/*!
 * ONNX Runtime Web v1.17.0
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
"use strict";
var ort = (() => {
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __esm = (fn, res) => function __init() {
    return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
  };
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __export = (target, all) => {
    for (var name in all)
      __defProp(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

  // common/dist/esm/backend-impl.js
  var backends, backendsSortedByPriority, registerBackend, resolveBackend;
  var init_backend_impl = __esm({
    "common/dist/esm/backend-impl.js"() {
      "use strict";
      backends = /* @__PURE__ */ new Map();
      backendsSortedByPriority = [];
      registerBackend = (name, backend, priority) => {
        if (backend && typeof backend.init === "function" && typeof backend.createInferenceSessionHandler === "function") {
          const currentBackend = backends.get(name);
          if (currentBackend === void 0) {
            backends.set(name, { backend, priority });
          } else if (currentBackend.priority > priority) {
            return;
          } else if (currentBackend.priority === priority) {
            if (currentBackend.backend !== backend) {
              throw new Error(`cannot register backend "${name}" using priority ${priority}`);
            }
          }
          if (priority >= 0) {
            const i = backendsSortedByPriority.indexOf(name);
            if (i !== -1) {
              backendsSortedByPriority.splice(i, 1);
            }
            for (let i2 = 0; i2 < backendsSortedByPriority.length; i2++) {
              if (backends.get(backendsSortedByPriority[i2]).priority <= priority) {
                backendsSortedByPriority.splice(i2, 0, name);
                return;
              }
            }
            backendsSortedByPriority.push(name);
          }
          return;
        }
        throw new TypeError("not a valid backend");
      };
      resolveBackend = async (backendHints) => {
        const backendNames = backendHints.length === 0 ? backendsSortedByPriority : backendHints;
        const errors = [];
        for (const backendName of backendNames) {
          const backendInfo = backends.get(backendName);
          if (backendInfo) {
            if (backendInfo.initialized) {
              return backendInfo.backend;
            } else if (backendInfo.aborted) {
              continue;
            }
            const isInitializing = !!backendInfo.initPromise;
            try {
              if (!isInitializing) {
                backendInfo.initPromise = backendInfo.backend.init();
              }
              await backendInfo.initPromise;
              backendInfo.initialized = true;
              return backendInfo.backend;
            } catch (e) {
              if (!isInitializing) {
                errors.push({ name: backendName, err: e });
              }
              backendInfo.aborted = true;
            } finally {
              delete backendInfo.initPromise;
            }
          }
        }
        throw new Error(`no available backend found. ERR: ${errors.map((e) => `[${e.name}] ${e.err}`).join(", ")}`);
      };
    }
  });

  // common/dist/esm/backend.js
  var init_backend = __esm({
    "common/dist/esm/backend.js"() {
      "use strict";
      init_backend_impl();
    }
  });

  // common/dist/esm/version.js
  var version;
  var init_version = __esm({
    "common/dist/esm/version.js"() {
      "use strict";
      version = "1.17.0";
    }
  });

  // common/dist/esm/env-impl.js
  var logLevelValue, env;
  var init_env_impl = __esm({
    "common/dist/esm/env-impl.js"() {
      "use strict";
      init_version();
      logLevelValue = "warning";
      env = {
        wasm: {},
        webgl: {},
        webgpu: {},
        versions: { common: version },
        set logLevel(value) {
          if (value === void 0) {
            return;
          }
          if (typeof value !== "string" || ["verbose", "info", "warning", "error", "fatal"].indexOf(value) === -1) {
            throw new Error(`Unsupported logging level: ${value}`);
          }
          logLevelValue = value;
        },
        get logLevel() {
          return logLevelValue;
        }
      };
      Object.defineProperty(env, "logLevel", { enumerable: true });
    }
  });

  // common/dist/esm/env.js
  var env2;
  var init_env = __esm({
    "common/dist/esm/env.js"() {
      "use strict";
      init_env_impl();
      env2 = env;
    }
  });

  // common/dist/esm/tensor-conversion-impl.js
  var tensorToDataURL, tensorToImageData;
  var init_tensor_conversion_impl = __esm({
    "common/dist/esm/tensor-conversion-impl.js"() {
      "use strict";
      tensorToDataURL = (tensor, options) => {
        const canvas = document.createElement("canvas");
        canvas.width = tensor.dims[3];
        canvas.height = tensor.dims[2];
        const pixels2DContext = canvas.getContext("2d");
        if (pixels2DContext != null) {
          let width;
          let height;
          if (options?.tensorLayout !== void 0 && options.tensorLayout === "NHWC") {
            width = tensor.dims[2];
            height = tensor.dims[3];
          } else {
            width = tensor.dims[3];
            height = tensor.dims[2];
          }
          const inputformat = options?.format !== void 0 ? options.format : "RGB";
          const norm = options?.norm;
          let normMean;
          let normBias;
          if (norm === void 0 || norm.mean === void 0) {
            normMean = [255, 255, 255, 255];
          } else {
            if (typeof norm.mean === "number") {
              normMean = [norm.mean, norm.mean, norm.mean, norm.mean];
            } else {
              normMean = [norm.mean[0], norm.mean[1], norm.mean[2], 0];
              if (norm.mean[3] !== void 0) {
                normMean[3] = norm.mean[3];
              }
            }
          }
          if (norm === void 0 || norm.bias === void 0) {
            normBias = [0, 0, 0, 0];
          } else {
            if (typeof norm.bias === "number") {
              normBias = [norm.bias, norm.bias, norm.bias, norm.bias];
            } else {
              normBias = [norm.bias[0], norm.bias[1], norm.bias[2], 0];
              if (norm.bias[3] !== void 0) {
                normBias[3] = norm.bias[3];
              }
            }
          }
          const stride = height * width;
          let rTensorPointer = 0, gTensorPointer = stride, bTensorPointer = stride * 2, aTensorPointer = -1;
          if (inputformat === "RGBA") {
            rTensorPointer = 0;
            gTensorPointer = stride;
            bTensorPointer = stride * 2;
            aTensorPointer = stride * 3;
          } else if (inputformat === "RGB") {
            rTensorPointer = 0;
            gTensorPointer = stride;
            bTensorPointer = stride * 2;
          } else if (inputformat === "RBG") {
            rTensorPointer = 0;
            bTensorPointer = stride;
            gTensorPointer = stride * 2;
          }
          for (let i = 0; i < height; i++) {
            for (let j = 0; j < width; j++) {
              const R = (tensor.data[rTensorPointer++] - normBias[0]) * normMean[0];
              const G = (tensor.data[gTensorPointer++] - normBias[1]) * normMean[1];
              const B = (tensor.data[bTensorPointer++] - normBias[2]) * normMean[2];
              const A = aTensorPointer === -1 ? 255 : (tensor.data[aTensorPointer++] - normBias[3]) * normMean[3];
              pixels2DContext.fillStyle = "rgba(" + R + "," + G + "," + B + "," + A + ")";
              pixels2DContext.fillRect(j, i, 1, 1);
            }
          }
          return canvas.toDataURL();
        } else {
          throw new Error("Can not access image data");
        }
      };
      tensorToImageData = (tensor, options) => {
        const pixels2DContext = document.createElement("canvas").getContext("2d");
        let image;
        if (pixels2DContext != null) {
          let width;
          let height;
          let channels;
          if (options?.tensorLayout !== void 0 && options.tensorLayout === "NHWC") {
            width = tensor.dims[2];
            height = tensor.dims[1];
            channels = tensor.dims[3];
          } else {
            width = tensor.dims[3];
            height = tensor.dims[2];
            channels = tensor.dims[1];
          }
          const inputformat = options !== void 0 ? options.format !== void 0 ? options.format : "RGB" : "RGB";
          const norm = options?.norm;
          let normMean;
          let normBias;
          if (norm === void 0 || norm.mean === void 0) {
            normMean = [255, 255, 255, 255];
          } else {
            if (typeof norm.mean === "number") {
              normMean = [norm.mean, norm.mean, norm.mean, norm.mean];
            } else {
              normMean = [norm.mean[0], norm.mean[1], norm.mean[2], 255];
              if (norm.mean[3] !== void 0) {
                normMean[3] = norm.mean[3];
              }
            }
          }
          if (norm === void 0 || norm.bias === void 0) {
            normBias = [0, 0, 0, 0];
          } else {
            if (typeof norm.bias === "number") {
              normBias = [norm.bias, norm.bias, norm.bias, norm.bias];
            } else {
              normBias = [norm.bias[0], norm.bias[1], norm.bias[2], 0];
              if (norm.bias[3] !== void 0) {
                normBias[3] = norm.bias[3];
              }
            }
          }
          const stride = height * width;
          if (options !== void 0) {
            if (options.format !== void 0 && (channels === 4 && options.format !== "RGBA") || channels === 3 && (options.format !== "RGB" && options.format !== "BGR")) {
              throw new Error("Tensor format doesn't match input tensor dims");
            }
          }
          const step = 4;
          let rImagePointer = 0, gImagePointer = 1, bImagePointer = 2, aImagePointer = 3;
          let rTensorPointer = 0, gTensorPointer = stride, bTensorPointer = stride * 2, aTensorPointer = -1;
          if (inputformat === "RGBA") {
            rTensorPointer = 0;
            gTensorPointer = stride;
            bTensorPointer = stride * 2;
            aTensorPointer = stride * 3;
          } else if (inputformat === "RGB") {
            rTensorPointer = 0;
            gTensorPointer = stride;
            bTensorPointer = stride * 2;
          } else if (inputformat === "RBG") {
            rTensorPointer = 0;
            bTensorPointer = stride;
            gTensorPointer = stride * 2;
          }
          image = pixels2DContext.createImageData(width, height);
          for (let i = 0; i < height * width; rImagePointer += step, gImagePointer += step, bImagePointer += step, aImagePointer += step, i++) {
            image.data[rImagePointer] = (tensor.data[rTensorPointer++] - normBias[0]) * normMean[0];
            image.data[gImagePointer] = (tensor.data[gTensorPointer++] - normBias[1]) * normMean[1];
            image.data[bImagePointer] = (tensor.data[bTensorPointer++] - normBias[2]) * normMean[2];
            image.data[aImagePointer] = aTensorPointer === -1 ? 255 : (tensor.data[aTensorPointer++] - normBias[3]) * normMean[3];
          }
        } else {
          throw new Error("Can not access image data");
        }
        return image;
      };
    }
  });

  // common/dist/esm/tensor-factory-impl.js
  var bufferToTensor, tensorFromImage, tensorFromTexture, tensorFromGpuBuffer, tensorFromPinnedBuffer;
  var init_tensor_factory_impl = __esm({
    "common/dist/esm/tensor-factory-impl.js"() {
      "use strict";
      init_tensor_impl();
      bufferToTensor = (buffer, options) => {
        if (buffer === void 0) {
          throw new Error("Image buffer must be defined");
        }
        if (options.height === void 0 || options.width === void 0) {
          throw new Error("Image height and width must be defined");
        }
        if (options.tensorLayout === "NHWC") {
          throw new Error("NHWC Tensor layout is not supported yet");
        }
        const { height, width } = options;
        const norm = options.norm ?? { mean: 255, bias: 0 };
        let normMean;
        let normBias;
        if (typeof norm.mean === "number") {
          normMean = [norm.mean, norm.mean, norm.mean, norm.mean];
        } else {
          normMean = [norm.mean[0], norm.mean[1], norm.mean[2], norm.mean[3] ?? 255];
        }
        if (typeof norm.bias === "number") {
          normBias = [norm.bias, norm.bias, norm.bias, norm.bias];
        } else {
          normBias = [norm.bias[0], norm.bias[1], norm.bias[2], norm.bias[3] ?? 0];
        }
        const inputformat = options.format !== void 0 ? options.format : "RGBA";
        const outputformat = options.tensorFormat !== void 0 ? options.tensorFormat !== void 0 ? options.tensorFormat : "RGB" : "RGB";
        const stride = height * width;
        const float32Data = outputformat === "RGBA" ? new Float32Array(stride * 4) : new Float32Array(stride * 3);
        let step = 4, rImagePointer = 0, gImagePointer = 1, bImagePointer = 2, aImagePointer = 3;
        let rTensorPointer = 0, gTensorPointer = stride, bTensorPointer = stride * 2, aTensorPointer = -1;
        if (inputformat === "RGB") {
          step = 3;
          rImagePointer = 0;
          gImagePointer = 1;
          bImagePointer = 2;
          aImagePointer = -1;
        }
        if (outputformat === "RGBA") {
          aTensorPointer = stride * 3;
        } else if (outputformat === "RBG") {
          rTensorPointer = 0;
          bTensorPointer = stride;
          gTensorPointer = stride * 2;
        } else if (outputformat === "BGR") {
          bTensorPointer = 0;
          gTensorPointer = stride;
          rTensorPointer = stride * 2;
        }
        for (let i = 0; i < stride; i++, rImagePointer += step, bImagePointer += step, gImagePointer += step, aImagePointer += step) {
          float32Data[rTensorPointer++] = (buffer[rImagePointer] + normBias[0]) / normMean[0];
          float32Data[gTensorPointer++] = (buffer[gImagePointer] + normBias[1]) / normMean[1];
          float32Data[bTensorPointer++] = (buffer[bImagePointer] + normBias[2]) / normMean[2];
          if (aTensorPointer !== -1 && aImagePointer !== -1) {
            float32Data[aTensorPointer++] = (buffer[aImagePointer] + normBias[3]) / normMean[3];
          }
        }
        const outputTensor = outputformat === "RGBA" ? new Tensor("float32", float32Data, [1, 4, height, width]) : new Tensor("float32", float32Data, [1, 3, height, width]);
        return outputTensor;
      };
      tensorFromImage = async (image, options) => {
        const isHTMLImageEle = typeof HTMLImageElement !== "undefined" && image instanceof HTMLImageElement;
        const isImageDataEle = typeof ImageData !== "undefined" && image instanceof ImageData;
        const isImageBitmap = typeof ImageBitmap !== "undefined" && image instanceof ImageBitmap;
        const isString = typeof image === "string";
        let data;
        let bufferToTensorOptions = options ?? {};
        if (isHTMLImageEle) {
          const canvas = document.createElement("canvas");
          canvas.width = image.width;
          canvas.height = image.height;
          const pixels2DContext = canvas.getContext("2d");
          if (pixels2DContext != null) {
            let height = image.height;
            let width = image.width;
            if (options !== void 0 && options.resizedHeight !== void 0 && options.resizedWidth !== void 0) {
              height = options.resizedHeight;
              width = options.resizedWidth;
            }
            if (options !== void 0) {
              bufferToTensorOptions = options;
              if (options.tensorFormat !== void 0) {
                throw new Error("Image input config format must be RGBA for HTMLImageElement");
              } else {
                bufferToTensorOptions.tensorFormat = "RGBA";
              }
              bufferToTensorOptions.height = height;
              bufferToTensorOptions.width = width;
            } else {
              bufferToTensorOptions.tensorFormat = "RGBA";
              bufferToTensorOptions.height = height;
              bufferToTensorOptions.width = width;
            }
            pixels2DContext.drawImage(image, 0, 0);
            data = pixels2DContext.getImageData(0, 0, width, height).data;
          } else {
            throw new Error("Can not access image data");
          }
        } else if (isImageDataEle) {
          let height;
          let width;
          if (options !== void 0 && options.resizedWidth !== void 0 && options.resizedHeight !== void 0) {
            height = options.resizedHeight;
            width = options.resizedWidth;
          } else {
            height = image.height;
            width = image.width;
          }
          if (options !== void 0) {
            bufferToTensorOptions = options;
          }
          bufferToTensorOptions.format = "RGBA";
          bufferToTensorOptions.height = height;
          bufferToTensorOptions.width = width;
          if (options !== void 0) {
            const tempCanvas = document.createElement("canvas");
            tempCanvas.width = width;
            tempCanvas.height = height;
            const pixels2DContext = tempCanvas.getContext("2d");
            if (pixels2DContext != null) {
              pixels2DContext.putImageData(image, 0, 0);
              data = pixels2DContext.getImageData(0, 0, width, height).data;
            } else {
              throw new Error("Can not access image data");
            }
          } else {
            data = image.data;
          }
        } else if (isImageBitmap) {
          if (options === void 0) {
            throw new Error("Please provide image config with format for Imagebitmap");
          }
          const canvas = document.createElement("canvas");
          canvas.width = image.width;
          canvas.height = image.height;
          const pixels2DContext = canvas.getContext("2d");
          if (pixels2DContext != null) {
            const height = image.height;
            const width = image.width;
            pixels2DContext.drawImage(image, 0, 0, width, height);
            data = pixels2DContext.getImageData(0, 0, width, height).data;
            bufferToTensorOptions.height = height;
            bufferToTensorOptions.width = width;
            return bufferToTensor(data, bufferToTensorOptions);
          } else {
            throw new Error("Can not access image data");
          }
        } else if (isString) {
          return new Promise((resolve, reject) => {
            const canvas = document.createElement("canvas");
            const context = canvas.getContext("2d");
            if (!image || !context) {
              return reject();
            }
            const newImage = new Image();
            newImage.crossOrigin = "Anonymous";
            newImage.src = image;
            newImage.onload = () => {
              canvas.width = newImage.width;
              canvas.height = newImage.height;
              context.drawImage(newImage, 0, 0, canvas.width, canvas.height);
              const img = context.getImageData(0, 0, canvas.width, canvas.height);
              bufferToTensorOptions.height = canvas.height;
              bufferToTensorOptions.width = canvas.width;
              resolve(bufferToTensor(img.data, bufferToTensorOptions));
            };
          });
        } else {
          throw new Error("Input data provided is not supported - aborted tensor creation");
        }
        if (data !== void 0) {
          return bufferToTensor(data, bufferToTensorOptions);
        } else {
          throw new Error("Input data provided is not supported - aborted tensor creation");
        }
      };
      tensorFromTexture = (texture, options) => {
        const { width, height, download, dispose } = options;
        const dims = [1, height, width, 4];
        return new Tensor({ location: "texture", type: "float32", texture, dims, download, dispose });
      };
      tensorFromGpuBuffer = (gpuBuffer, options) => {
        const { dataType, dims, download, dispose } = options;
        return new Tensor({ location: "gpu-buffer", type: dataType ?? "float32", gpuBuffer, dims, download, dispose });
      };
      tensorFromPinnedBuffer = (type, buffer, dims) => new Tensor({ location: "cpu-pinned", type, data: buffer, dims: dims ?? [buffer.length] });
    }
  });

  // common/dist/esm/tensor-impl-type-mapping.js
  var NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP, NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP, isBigIntChecked, checkBigInt;
  var init_tensor_impl_type_mapping = __esm({
    "common/dist/esm/tensor-impl-type-mapping.js"() {
      "use strict";
      NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP = /* @__PURE__ */ new Map([
        ["float32", Float32Array],
        ["uint8", Uint8Array],
        ["int8", Int8Array],
        ["uint16", Uint16Array],
        ["float16", Uint16Array],
        ["int16", Int16Array],
        ["int32", Int32Array],
        ["bool", Uint8Array],
        ["float64", Float64Array],
        ["uint32", Uint32Array]
      ]);
      NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP = /* @__PURE__ */ new Map([
        [Float32Array, "float32"],
        [Uint8Array, "uint8"],
        [Int8Array, "int8"],
        [Uint16Array, "uint16"],
        [Int16Array, "int16"],
        [Int32Array, "int32"],
        [Float64Array, "float64"],
        [Uint32Array, "uint32"]
      ]);
      isBigIntChecked = false;
      checkBigInt = () => {
        if (!isBigIntChecked) {
          isBigIntChecked = true;
          const isBigInt64ArrayAvailable = typeof BigInt64Array !== "undefined" && typeof BigInt64Array.from === "function";
          const isBigUint64ArrayAvailable = typeof BigUint64Array !== "undefined" && typeof BigUint64Array.from === "function";
          if (isBigInt64ArrayAvailable) {
            NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set("int64", BigInt64Array);
            NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(BigInt64Array, "int64");
          }
          if (isBigUint64ArrayAvailable) {
            NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set("uint64", BigUint64Array);
            NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(BigUint64Array, "uint64");
          }
        }
      };
    }
  });

  // common/dist/esm/tensor-utils-impl.js
  var calculateSize, tensorReshape;
  var init_tensor_utils_impl = __esm({
    "common/dist/esm/tensor-utils-impl.js"() {
      "use strict";
      init_tensor_impl();
      calculateSize = (dims) => {
        let size = 1;
        for (let i = 0; i < dims.length; i++) {
          const dim = dims[i];
          if (typeof dim !== "number" || !Number.isSafeInteger(dim)) {
            throw new TypeError(`dims[${i}] must be an integer, got: ${dim}`);
          }
          if (dim < 0) {
            throw new RangeError(`dims[${i}] must be a non-negative integer, got: ${dim}`);
          }
          size *= dim;
        }
        return size;
      };
      tensorReshape = (tensor, dims) => {
        switch (tensor.location) {
          case "cpu":
            return new Tensor(tensor.type, tensor.data, dims);
          case "cpu-pinned":
            return new Tensor({
              location: "cpu-pinned",
              data: tensor.data,
              type: tensor.type,
              dims
            });
          case "texture":
            return new Tensor({
              location: "texture",
              texture: tensor.texture,
              type: tensor.type,
              dims
            });
          case "gpu-buffer":
            return new Tensor({
              location: "gpu-buffer",
              gpuBuffer: tensor.gpuBuffer,
              type: tensor.type,
              dims
            });
          default:
            throw new Error(`tensorReshape: tensor location ${tensor.location} is not supported`);
        }
      };
    }
  });

  // common/dist/esm/tensor-impl.js
  var Tensor;
  var init_tensor_impl = __esm({
    "common/dist/esm/tensor-impl.js"() {
      "use strict";
      init_tensor_conversion_impl();
      init_tensor_factory_impl();
      init_tensor_impl_type_mapping();
      init_tensor_utils_impl();
      Tensor = class {
        /**
         * implementation.
         */
        constructor(arg0, arg1, arg2) {
          checkBigInt();
          let type;
          let dims;
          if (typeof arg0 === "object" && "location" in arg0) {
            this.dataLocation = arg0.location;
            type = arg0.type;
            dims = arg0.dims;
            switch (arg0.location) {
              case "cpu-pinned": {
                const expectedTypedArrayConstructor = NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.get(type);
                if (!expectedTypedArrayConstructor) {
                  throw new TypeError(`unsupported type "${type}" to create tensor from pinned buffer`);
                }
                if (!(arg0.data instanceof expectedTypedArrayConstructor)) {
                  throw new TypeError(`buffer should be of type ${expectedTypedArrayConstructor.name}`);
                }
                this.cpuData = arg0.data;
                break;
              }
              case "texture": {
                if (type !== "float32") {
                  throw new TypeError(`unsupported type "${type}" to create tensor from texture`);
                }
                this.gpuTextureData = arg0.texture;
                this.downloader = arg0.download;
                this.disposer = arg0.dispose;
                break;
              }
              case "gpu-buffer": {
                if (type !== "float32" && type !== "float16" && type !== "int32" && type !== "int64" && type !== "uint32" && type !== "bool") {
                  throw new TypeError(`unsupported type "${type}" to create tensor from gpu buffer`);
                }
                this.gpuBufferData = arg0.gpuBuffer;
                this.downloader = arg0.download;
                this.disposer = arg0.dispose;
                break;
              }
              default:
                throw new Error(`Tensor constructor: unsupported location '${this.dataLocation}'`);
            }
          } else {
            let data;
            let maybeDims;
            if (typeof arg0 === "string") {
              type = arg0;
              maybeDims = arg2;
              if (arg0 === "string") {
                if (!Array.isArray(arg1)) {
                  throw new TypeError("A string tensor's data must be a string array.");
                }
                data = arg1;
              } else {
                const typedArrayConstructor = NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.get(arg0);
                if (typedArrayConstructor === void 0) {
                  throw new TypeError(`Unsupported tensor type: ${arg0}.`);
                }
                if (Array.isArray(arg1)) {
                  if (arg0 === "float16") {
                    throw new TypeError("Creating a float16 tensor from number array is not supported. Please use Uint16Array as data.");
                  } else if (arg0 === "uint64" || arg0 === "int64") {
                    data = typedArrayConstructor.from(arg1, BigInt);
                  } else {
                    data = typedArrayConstructor.from(arg1);
                  }
                } else if (arg1 instanceof typedArrayConstructor) {
                  data = arg1;
                } else {
                  throw new TypeError(`A ${type} tensor's data must be type of ${typedArrayConstructor}`);
                }
              }
            } else {
              maybeDims = arg1;
              if (Array.isArray(arg0)) {
                if (arg0.length === 0) {
                  throw new TypeError("Tensor type cannot be inferred from an empty array.");
                }
                const firstElementType = typeof arg0[0];
                if (firstElementType === "string") {
                  type = "string";
                  data = arg0;
                } else if (firstElementType === "boolean") {
                  type = "bool";
                  data = Uint8Array.from(arg0);
                } else {
                  throw new TypeError(`Invalid element type of data array: ${firstElementType}.`);
                }
              } else {
                const mappedType = NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.get(arg0.constructor);
                if (mappedType === void 0) {
                  throw new TypeError(`Unsupported type for tensor data: ${arg0.constructor}.`);
                }
                type = mappedType;
                data = arg0;
              }
            }
            if (maybeDims === void 0) {
              maybeDims = [data.length];
            } else if (!Array.isArray(maybeDims)) {
              throw new TypeError("A tensor's dims must be a number array");
            }
            dims = maybeDims;
            this.cpuData = data;
            this.dataLocation = "cpu";
          }
          const size = calculateSize(dims);
          if (this.cpuData && size !== this.cpuData.length) {
            throw new Error(`Tensor's size(${size}) does not match data length(${this.cpuData.length}).`);
          }
          this.type = type;
          this.dims = dims;
          this.size = size;
        }
        // #endregion
        // #region factory
        static async fromImage(image, options) {
          return tensorFromImage(image, options);
        }
        static fromTexture(texture, options) {
          return tensorFromTexture(texture, options);
        }
        static fromGpuBuffer(gpuBuffer, options) {
          return tensorFromGpuBuffer(gpuBuffer, options);
        }
        static fromPinnedBuffer(type, buffer, dims) {
          return tensorFromPinnedBuffer(type, buffer, dims);
        }
        // #endregion
        // #region conversions
        toDataURL(options) {
          return tensorToDataURL(this, options);
        }
        toImageData(options) {
          return tensorToImageData(this, options);
        }
        // #endregion
        // #region properties
        get data() {
          this.ensureValid();
          if (!this.cpuData) {
            throw new Error("The data is not on CPU. Use `getData()` to download GPU data to CPU, or use `texture` or `gpuBuffer` property to access the GPU data directly.");
          }
          return this.cpuData;
        }
        get location() {
          return this.dataLocation;
        }
        get texture() {
          this.ensureValid();
          if (!this.gpuTextureData) {
            throw new Error("The data is not stored as a WebGL texture.");
          }
          return this.gpuTextureData;
        }
        get gpuBuffer() {
          this.ensureValid();
          if (!this.gpuBufferData) {
            throw new Error("The data is not stored as a WebGPU buffer.");
          }
          return this.gpuBufferData;
        }
        // #endregion
        // #region methods
        async getData(releaseData) {
          this.ensureValid();
          switch (this.dataLocation) {
            case "cpu":
            case "cpu-pinned":
              return this.data;
            case "texture":
            case "gpu-buffer": {
              if (!this.downloader) {
                throw new Error("The current tensor is not created with a specified data downloader.");
              }
              if (this.isDownloading) {
                throw new Error("The current tensor is being downloaded.");
              }
              try {
                this.isDownloading = true;
                const data = await this.downloader();
                this.downloader = void 0;
                this.dataLocation = "cpu";
                this.cpuData = data;
                if (releaseData && this.disposer) {
                  this.disposer();
                  this.disposer = void 0;
                }
                return data;
              } finally {
                this.isDownloading = false;
              }
            }
            default:
              throw new Error(`cannot get data from location: ${this.dataLocation}`);
          }
        }
        dispose() {
          if (this.isDownloading) {
            throw new Error("The current tensor is being downloaded.");
          }
          if (this.disposer) {
            this.disposer();
            this.disposer = void 0;
          }
          this.cpuData = void 0;
          this.gpuTextureData = void 0;
          this.gpuBufferData = void 0;
          this.downloader = void 0;
          this.isDownloading = void 0;
          this.dataLocation = "none";
        }
        // #endregion
        // #region tensor utilities
        ensureValid() {
          if (this.dataLocation === "none") {
            throw new Error("The tensor is disposed.");
          }
        }
        reshape(dims) {
          this.ensureValid();
          if (this.downloader || this.disposer) {
            throw new Error("Cannot reshape a tensor that owns GPU resource.");
          }
          return tensorReshape(this, dims);
        }
      };
    }
  });

  // common/dist/esm/tensor.js
  var Tensor2;
  var init_tensor = __esm({
    "common/dist/esm/tensor.js"() {
      "use strict";
      init_tensor_impl();
      Tensor2 = Tensor;
    }
  });

  // common/dist/esm/inference-session-impl.js
  var InferenceSession;
  var init_inference_session_impl = __esm({
    "common/dist/esm/inference-session-impl.js"() {
      "use strict";
      init_backend_impl();
      init_tensor();
      InferenceSession = class _InferenceSession {
        constructor(handler) {
          this.handler = handler;
        }
        async run(feeds, arg1, arg2) {
          const fetches = {};
          let options = {};
          if (typeof feeds !== "object" || feeds === null || feeds instanceof Tensor2 || Array.isArray(feeds)) {
            throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");
          }
          let isFetchesEmpty = true;
          if (typeof arg1 === "object") {
            if (arg1 === null) {
              throw new TypeError("Unexpected argument[1]: cannot be null.");
            }
            if (arg1 instanceof Tensor2) {
              throw new TypeError("'fetches' cannot be a Tensor");
            }
            if (Array.isArray(arg1)) {
              if (arg1.length === 0) {
                throw new TypeError("'fetches' cannot be an empty array.");
              }
              isFetchesEmpty = false;
              for (const name of arg1) {
                if (typeof name !== "string") {
                  throw new TypeError("'fetches' must be a string array or an object.");
                }
                if (this.outputNames.indexOf(name) === -1) {
                  throw new RangeError(`'fetches' contains invalid output name: ${name}.`);
                }
                fetches[name] = null;
              }
              if (typeof arg2 === "object" && arg2 !== null) {
                options = arg2;
              } else if (typeof arg2 !== "undefined") {
                throw new TypeError("'options' must be an object.");
              }
            } else {
              let isFetches = false;
              const arg1Keys = Object.getOwnPropertyNames(arg1);
              for (const name of this.outputNames) {
                if (arg1Keys.indexOf(name) !== -1) {
                  const v = arg1[name];
                  if (v === null || v instanceof Tensor2) {
                    isFetches = true;
                    isFetchesEmpty = false;
                    fetches[name] = v;
                  }
                }
              }
              if (isFetches) {
                if (typeof arg2 === "object" && arg2 !== null) {
                  options = arg2;
                } else if (typeof arg2 !== "undefined") {
                  throw new TypeError("'options' must be an object.");
                }
              } else {
                options = arg1;
              }
            }
          } else if (typeof arg1 !== "undefined") {
            throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");
          }
          for (const name of this.inputNames) {
            if (typeof feeds[name] === "undefined") {
              throw new Error(`input '${name}' is missing in 'feeds'.`);
            }
          }
          if (isFetchesEmpty) {
            for (const name of this.outputNames) {
              fetches[name] = null;
            }
          }
          const results = await this.handler.run(feeds, fetches, options);
          const returnValue = {};
          for (const key in results) {
            if (Object.hasOwnProperty.call(results, key)) {
              const result = results[key];
              if (result instanceof Tensor2) {
                returnValue[key] = result;
              } else {
                returnValue[key] = new Tensor2(result.type, result.data, result.dims);
              }
            }
          }
          return returnValue;
        }
        async release() {
          return this.handler.dispose();
        }
        static async create(arg0, arg1, arg2, arg3) {
          let filePathOrUint8Array;
          let options = {};
          if (typeof arg0 === "string") {
            filePathOrUint8Array = arg0;
            if (typeof arg1 === "object" && arg1 !== null) {
              options = arg1;
            } else if (typeof arg1 !== "undefined") {
              throw new TypeError("'options' must be an object.");
            }
          } else if (arg0 instanceof Uint8Array) {
            filePathOrUint8Array = arg0;
            if (typeof arg1 === "object" && arg1 !== null) {
              options = arg1;
            } else if (typeof arg1 !== "undefined") {
              throw new TypeError("'options' must be an object.");
            }
          } else if (arg0 instanceof ArrayBuffer || typeof SharedArrayBuffer !== "undefined" && arg0 instanceof SharedArrayBuffer) {
            const buffer = arg0;
            let byteOffset = 0;
            let byteLength = arg0.byteLength;
            if (typeof arg1 === "object" && arg1 !== null) {
              options = arg1;
            } else if (typeof arg1 === "number") {
              byteOffset = arg1;
              if (!Number.isSafeInteger(byteOffset)) {
                throw new RangeError("'byteOffset' must be an integer.");
              }
              if (byteOffset < 0 || byteOffset >= buffer.byteLength) {
                throw new RangeError(`'byteOffset' is out of range [0, ${buffer.byteLength}).`);
              }
              byteLength = arg0.byteLength - byteOffset;
              if (typeof arg2 === "number") {
                byteLength = arg2;
                if (!Number.isSafeInteger(byteLength)) {
                  throw new RangeError("'byteLength' must be an integer.");
                }
                if (byteLength <= 0 || byteOffset + byteLength > buffer.byteLength) {
                  throw new RangeError(`'byteLength' is out of range (0, ${buffer.byteLength - byteOffset}].`);
                }
                if (typeof arg3 === "object" && arg3 !== null) {
                  options = arg3;
                } else if (typeof arg3 !== "undefined") {
                  throw new TypeError("'options' must be an object.");
                }
              } else if (typeof arg2 !== "undefined") {
                throw new TypeError("'byteLength' must be a number.");
              }
            } else if (typeof arg1 !== "undefined") {
              throw new TypeError("'options' must be an object.");
            }
            filePathOrUint8Array = new Uint8Array(buffer, byteOffset, byteLength);
          } else {
            throw new TypeError("Unexpected argument[0]: must be 'path' or 'buffer'.");
          }
          const eps = options.executionProviders || [];
          const backendHints = eps.map((i) => typeof i === "string" ? i : i.name);
          const backend = await resolveBackend(backendHints);
          const handler = await backend.createInferenceSessionHandler(filePathOrUint8Array, options);
          return new _InferenceSession(handler);
        }
        startProfiling() {
          this.handler.startProfiling();
        }
        endProfiling() {
          this.handler.endProfiling();
        }
        get inputNames() {
          return this.handler.inputNames;
        }
        get outputNames() {
          return this.handler.outputNames;
        }
      };
    }
  });

  // common/dist/esm/inference-session.js
  var InferenceSession2;
  var init_inference_session = __esm({
    "common/dist/esm/inference-session.js"() {
      "use strict";
      init_inference_session_impl();
      InferenceSession2 = InferenceSession;
    }
  });

  // common/dist/esm/onnx-value.js
  var init_onnx_value = __esm({
    "common/dist/esm/onnx-value.js"() {
      "use strict";
    }
  });

  // common/dist/esm/training-session-impl.js
  var TrainingSession;
  var init_training_session_impl = __esm({
    "common/dist/esm/training-session-impl.js"() {
      "use strict";
      TrainingSession = class {
        constructor(handler) {
          this.handler = handler;
        }
        get inputNames() {
          return this.handler.inputNames;
        }
        get outputNames() {
          return this.handler.outputNames;
        }
        static async create(_trainingOptions, _sessionOptions) {
          throw new Error("Method not implemented");
        }
        async loadParametersBuffer(_array, _trainableOnly) {
          throw new Error("Method not implemented.");
        }
        async getContiguousParameters(_trainableOnly) {
          throw new Error("Method not implemented.");
        }
        async runTrainStep(_feeds, _fetches, _options) {
          throw new Error("Method not implemented.");
        }
        async release() {
          return this.handler.dispose();
        }
      };
    }
  });

  // common/dist/esm/training-session.js
  var TrainingSession2;
  var init_training_session = __esm({
    "common/dist/esm/training-session.js"() {
      "use strict";
      init_training_session_impl();
      TrainingSession2 = TrainingSession;
    }
  });

  // common/dist/esm/index.js
  var init_esm = __esm({
    "common/dist/esm/index.js"() {
      "use strict";
      init_backend();
      init_env();
      init_inference_session();
      init_tensor();
      init_onnx_value();
      init_training_session();
    }
  });

  // nodejs-ignore:node:os
  var cpus;
  var init_node_os = __esm({
    "nodejs-ignore:node:os"() {
      cpus = void 0;
    }
  });

  // nodejs-ignore:node:path
  var join;
  var init_node_path = __esm({
    "nodejs-ignore:node:path"() {
      join = void 0;
    }
  });

  // nodejs-ignore:fs
  var fs_exports = {};
  __export(fs_exports, {
    readFile: () => readFile
  });
  var readFile;
  var init_fs = __esm({
    "nodejs-ignore:fs"() {
      readFile = void 0;
    }
  });

  // nodejs-ignore:path
  var path_exports = {};
  __export(path_exports, {
    join: () => join2
  });
  var join2;
  var init_path = __esm({
    "nodejs-ignore:path"() {
      join2 = void 0;
    }
  });

  // web/lib/wasm/binding/ort-wasm.js
  var require_ort_wasm = __commonJS({
    "web/lib/wasm/binding/ort-wasm.js"(exports, module) {
      "use strict";
      var ortWasm = (() => {
        var _scriptDir = typeof document !== "undefined" && document.currentScript ? document.currentScript.src : void 0;
        if (typeof __filename !== "undefined")
          _scriptDir = _scriptDir || __filename;
        return function(moduleArg = {}) {
          var f = moduleArg, aa, m;
          f.ready = new Promise((a, b) => {
            aa = a;
            m = b;
          });
          var ba = Object.assign({}, f), ca = "./this.program", da = "object" == typeof window, q = "function" == typeof importScripts, ea = "object" == typeof process && "object" == typeof process.versions && "string" == typeof process.versions.node, t = "", fa, w, x;
          if (ea) {
            var fs = (init_fs(), __toCommonJS(fs_exports)), ha = (init_path(), __toCommonJS(path_exports));
            t = q ? ha.dirname(t) + "/" : __dirname + "/";
            fa = (a, b) => {
              a = a.startsWith("file://") ? new URL(a) : ha.normalize(a);
              return fs.readFileSync(a, b ? void 0 : "utf8");
            };
            x = (a) => {
              a = fa(a, true);
              a.buffer || (a = new Uint8Array(a));
              return a;
            };
            w = (a, b, c, d = true) => {
              a = a.startsWith("file://") ? new URL(a) : ha.normalize(a);
              fs.readFile(a, d ? void 0 : "utf8", (e, h) => {
                e ? c(e) : b(d ? h.buffer : h);
              });
            };
            !f.thisProgram && 1 < process.argv.length && (ca = process.argv[1].replace(/\\/g, "/"));
            process.argv.slice(2);
            f.inspect = () => "[Emscripten Module object]";
          } else if (da || q)
            q ? t = self.location.href : "undefined" != typeof document && document.currentScript && (t = document.currentScript.src), _scriptDir && (t = _scriptDir), 0 !== t.indexOf("blob:") ? t = t.substr(0, t.replace(/[?#].*/, "").lastIndexOf("/") + 1) : t = "", fa = (a) => {
              var b = new XMLHttpRequest();
              b.open("GET", a, false);
              b.send(null);
              return b.responseText;
            }, q && (x = (a) => {
              var b = new XMLHttpRequest();
              b.open("GET", a, false);
              b.responseType = "arraybuffer";
              b.send(null);
              return new Uint8Array(b.response);
            }), w = (a, b, c) => {
              var d = new XMLHttpRequest();
              d.open("GET", a, true);
              d.responseType = "arraybuffer";
              d.onload = () => {
                200 == d.status || 0 == d.status && d.response ? b(d.response) : c();
              };
              d.onerror = c;
              d.send(null);
            };
          var ia = f.print || console.log.bind(console), z = f.printErr || console.error.bind(console);
          Object.assign(f, ba);
          ba = null;
          f.thisProgram && (ca = f.thisProgram);
          var A;
          f.wasmBinary && (A = f.wasmBinary);
          var noExitRuntime = f.noExitRuntime || true;
          "object" != typeof WebAssembly && ja("no native wasm support detected");
          var B, C, ka = false, D, E, G, H, J, K, la, ma, na, oa;
          function pa() {
            var a = B.buffer;
            f.HEAP8 = D = new Int8Array(a);
            f.HEAP16 = G = new Int16Array(a);
            f.HEAP32 = J = new Int32Array(a);
            f.HEAPU8 = E = new Uint8Array(a);
            f.HEAPU16 = H = new Uint16Array(a);
            f.HEAPU32 = K = new Uint32Array(a);
            f.HEAPF32 = la = new Float32Array(a);
            f.HEAPF64 = oa = new Float64Array(a);
            f.HEAP64 = ma = new BigInt64Array(a);
            f.HEAPU64 = na = new BigUint64Array(a);
          }
          var qa = [], ra = [], sa = [];
          function ta() {
            var a = f.preRun.shift();
            qa.unshift(a);
          }
          var L = 0, ua = null, M = null;
          function ja(a) {
            if (f.onAbort)
              f.onAbort(a);
            a = "Aborted(" + a + ")";
            z(a);
            ka = true;
            a = new WebAssembly.RuntimeError(a + ". Build with -sASSERTIONS for more info.");
            m(a);
            throw a;
          }
          function va(a) {
            return a.startsWith("data:application/octet-stream;base64,");
          }
          var N;
          N = "ort-wasm.wasm";
          if (!va(N)) {
            var wa = N;
            N = f.locateFile ? f.locateFile(wa, t) : t + wa;
          }
          function xa(a) {
            if (a == N && A)
              return new Uint8Array(A);
            if (x)
              return x(a);
            throw "both async and sync fetching of the wasm failed";
          }
          function ya(a) {
            if (!A && (da || q)) {
              if ("function" == typeof fetch && !a.startsWith("file://"))
                return fetch(a, { credentials: "same-origin" }).then((b) => {
                  if (!b.ok)
                    throw "failed to load wasm binary file at '" + a + "'";
                  return b.arrayBuffer();
                }).catch(() => xa(a));
              if (w)
                return new Promise((b, c) => {
                  w(a, (d) => b(new Uint8Array(d)), c);
                });
            }
            return Promise.resolve().then(() => xa(a));
          }
          function za(a, b, c) {
            return ya(a).then((d) => WebAssembly.instantiate(d, b)).then((d) => d).then(c, (d) => {
              z("failed to asynchronously prepare wasm: " + d);
              ja(d);
            });
          }
          function Aa(a, b) {
            var c = N;
            return A || "function" != typeof WebAssembly.instantiateStreaming || va(c) || c.startsWith("file://") || ea || "function" != typeof fetch ? za(c, a, b) : fetch(c, { credentials: "same-origin" }).then((d) => WebAssembly.instantiateStreaming(d, a).then(b, function(e) {
              z("wasm streaming compile failed: " + e);
              z("falling back to ArrayBuffer instantiation");
              return za(c, a, b);
            }));
          }
          var Ba = (a) => {
            for (; 0 < a.length; )
              a.shift()(f);
          };
          function Ca(a) {
            this.Va = a - 24;
            this.fb = function(b) {
              K[this.Va + 4 >> 2] = b;
            };
            this.eb = function(b) {
              K[this.Va + 8 >> 2] = b;
            };
            this.Za = function(b, c) {
              this.$a();
              this.fb(b);
              this.eb(c);
            };
            this.$a = function() {
              K[this.Va + 16 >> 2] = 0;
            };
          }
          var Da = 0, Ea = 0, Fa = "undefined" != typeof TextDecoder ? new TextDecoder("utf8") : void 0, O = (a, b, c) => {
            var d = b + c;
            for (c = b; a[c] && !(c >= d); )
              ++c;
            if (16 < c - b && a.buffer && Fa)
              return Fa.decode(a.subarray(b, c));
            for (d = ""; b < c; ) {
              var e = a[b++];
              if (e & 128) {
                var h = a[b++] & 63;
                if (192 == (e & 224))
                  d += String.fromCharCode((e & 31) << 6 | h);
                else {
                  var l = a[b++] & 63;
                  e = 224 == (e & 240) ? (e & 15) << 12 | h << 6 | l : (e & 7) << 18 | h << 12 | l << 6 | a[b++] & 63;
                  65536 > e ? d += String.fromCharCode(e) : (e -= 65536, d += String.fromCharCode(55296 | e >> 10, 56320 | e & 1023));
                }
              } else
                d += String.fromCharCode(e);
            }
            return d;
          }, P = (a) => {
            for (var b = 0, c = 0; c < a.length; ++c) {
              var d = a.charCodeAt(c);
              127 >= d ? b++ : 2047 >= d ? b += 2 : 55296 <= d && 57343 >= d ? (b += 4, ++c) : b += 3;
            }
            return b;
          }, Q = (a, b, c, d) => {
            if (!(0 < d))
              return 0;
            var e = c;
            d = c + d - 1;
            for (var h = 0; h < a.length; ++h) {
              var l = a.charCodeAt(h);
              if (55296 <= l && 57343 >= l) {
                var k = a.charCodeAt(++h);
                l = 65536 + ((l & 1023) << 10) | k & 1023;
              }
              if (127 >= l) {
                if (c >= d)
                  break;
                b[c++] = l;
              } else {
                if (2047 >= l) {
                  if (c + 1 >= d)
                    break;
                  b[c++] = 192 | l >> 6;
                } else {
                  if (65535 >= l) {
                    if (c + 2 >= d)
                      break;
                    b[c++] = 224 | l >> 12;
                  } else {
                    if (c + 3 >= d)
                      break;
                    b[c++] = 240 | l >> 18;
                    b[c++] = 128 | l >> 12 & 63;
                  }
                  b[c++] = 128 | l >> 6 & 63;
                }
                b[c++] = 128 | l & 63;
              }
            }
            b[c] = 0;
            return c - e;
          };
          function Ga(a) {
            if (null === a)
              return "null";
            var b = typeof a;
            return "object" === b || "array" === b || "function" === b ? a.toString() : "" + a;
          }
          var Ha = void 0;
          function R(a) {
            for (var b = ""; E[a]; )
              b += Ha[E[a++]];
            return b;
          }
          var Ia = {}, Ja = {}, Ka = {}, La = void 0;
          function S(a) {
            throw new La(a);
          }
          function Ma(a, b, c = {}) {
            var d = b.name;
            a || S(`type "${d}" must have a positive integer typeid pointer`);
            if (Ja.hasOwnProperty(a)) {
              if (c.gb)
                return;
              S(`Cannot register type '${d}' twice`);
            }
            Ja[a] = b;
            delete Ka[a];
            Ia.hasOwnProperty(a) && (b = Ia[a], delete Ia[a], b.forEach((e) => e()));
          }
          function T(a, b, c = {}) {
            if (!("argPackAdvance" in b))
              throw new TypeError("registerType registeredInstance requires argPackAdvance");
            Ma(a, b, c);
          }
          function Na(a, b, c) {
            switch (b) {
              case 0:
                return c ? function(d) {
                  return D[d];
                } : function(d) {
                  return E[d];
                };
              case 1:
                return c ? function(d) {
                  return G[d >> 1];
                } : function(d) {
                  return H[d >> 1];
                };
              case 2:
                return c ? function(d) {
                  return J[d >> 2];
                } : function(d) {
                  return K[d >> 2];
                };
              case 3:
                return c ? function(d) {
                  return ma[d >> 3];
                } : function(d) {
                  return na[d >> 3];
                };
              default:
                throw new TypeError("Unknown integer type: " + a);
            }
          }
          function Oa(a) {
            switch (a) {
              case 1:
                return 0;
              case 2:
                return 1;
              case 4:
                return 2;
              case 8:
                return 3;
              default:
                throw new TypeError(`Unknown type size: ${a}`);
            }
          }
          function Pa() {
            this.Sa = [void 0];
            this.bb = [];
          }
          var U = new Pa();
          function Qa(a) {
            a >= U.Va && 0 === --U.get(a).cb && U.$a(a);
          }
          var V = (a) => {
            a || S("Cannot use deleted val. handle = " + a);
            return U.get(a).value;
          }, W = (a) => {
            switch (a) {
              case void 0:
                return 1;
              case null:
                return 2;
              case true:
                return 3;
              case false:
                return 4;
              default:
                return U.Za({ cb: 1, value: a });
            }
          };
          function Ra(a) {
            return this.fromWireType(J[a >> 2]);
          }
          function Sa(a, b) {
            switch (b) {
              case 2:
                return function(c) {
                  return this.fromWireType(la[c >> 2]);
                };
              case 3:
                return function(c) {
                  return this.fromWireType(oa[c >> 3]);
                };
              default:
                throw new TypeError("Unknown float type: " + a);
            }
          }
          var Ta = "undefined" != typeof TextDecoder ? new TextDecoder("utf-16le") : void 0, Ua = (a, b) => {
            var c = a >> 1;
            for (var d = c + b / 2; !(c >= d) && H[c]; )
              ++c;
            c <<= 1;
            if (32 < c - a && Ta)
              return Ta.decode(E.subarray(a, c));
            c = "";
            for (d = 0; !(d >= b / 2); ++d) {
              var e = G[a + 2 * d >> 1];
              if (0 == e)
                break;
              c += String.fromCharCode(e);
            }
            return c;
          }, Va = (a, b, c) => {
            void 0 === c && (c = 2147483647);
            if (2 > c)
              return 0;
            c -= 2;
            var d = b;
            c = c < 2 * a.length ? c / 2 : a.length;
            for (var e = 0; e < c; ++e)
              G[b >> 1] = a.charCodeAt(e), b += 2;
            G[b >> 1] = 0;
            return b - d;
          }, Wa = (a) => 2 * a.length, Xa = (a, b) => {
            for (var c = 0, d = ""; !(c >= b / 4); ) {
              var e = J[a + 4 * c >> 2];
              if (0 == e)
                break;
              ++c;
              65536 <= e ? (e -= 65536, d += String.fromCharCode(55296 | e >> 10, 56320 | e & 1023)) : d += String.fromCharCode(e);
            }
            return d;
          }, Ya = (a, b, c) => {
            void 0 === c && (c = 2147483647);
            if (4 > c)
              return 0;
            var d = b;
            c = d + c - 4;
            for (var e = 0; e < a.length; ++e) {
              var h = a.charCodeAt(e);
              if (55296 <= h && 57343 >= h) {
                var l = a.charCodeAt(++e);
                h = 65536 + ((h & 1023) << 10) | l & 1023;
              }
              J[b >> 2] = h;
              b += 4;
              if (b + 4 > c)
                break;
            }
            J[b >> 2] = 0;
            return b - d;
          }, Za = (a) => {
            for (var b = 0, c = 0; c < a.length; ++c) {
              var d = a.charCodeAt(c);
              55296 <= d && 57343 >= d && ++c;
              b += 4;
            }
            return b;
          };
          function $a(a, b) {
            var c = Ja[a];
            if (void 0 === c) {
              a = ab(a);
              var d = R(a);
              X(a);
              S(b + " has unknown type " + d);
            }
            return c;
          }
          var bb = {};
          function cb(a) {
            var b = bb[a];
            return void 0 === b ? R(a) : b;
          }
          var eb = [];
          function fb() {
            return "object" == typeof globalThis ? globalThis : Function("return this")();
          }
          function gb(a) {
            var b = eb.length;
            eb.push(a);
            return b;
          }
          function hb(a, b) {
            for (var c = Array(a), d = 0; d < a; ++d)
              c[d] = $a(K[b + 4 * d >> 2], "parameter " + d);
            return c;
          }
          function ib(a) {
            if (void 0 === a)
              return "_unknown";
            a = a.replace(/[^a-zA-Z0-9_]/g, "$");
            var b = a.charCodeAt(0);
            return 48 <= b && 57 >= b ? `_${a}` : a;
          }
          var jb = [];
          function kb(a, b) {
            a = ib(a);
            return { [a]: function() {
              return b.apply(this, arguments);
            } }[a];
          }
          function lb(a) {
            var b = Function;
            if (!(b instanceof Function))
              throw new TypeError(`new_ called with constructor type ${typeof b} which is not a function`);
            var c = kb(b.name || "unknownFunctionName", function() {
            });
            c.prototype = b.prototype;
            c = new c();
            a = b.apply(c, a);
            return a instanceof Object ? a : c;
          }
          function mb(a) {
            for (var b = "", c = 0; c < a; ++c)
              b += (0 !== c ? ", " : "") + "arg" + c;
            var d = "return function emval_allocator_" + a + "(constructor, argTypes, args) {\n  var HEAPU32 = getMemory();\n";
            for (c = 0; c < a; ++c)
              d += "var argType" + c + " = requireRegisteredType(HEAPU32[((argTypes)>>2)], 'parameter " + c + "');\nvar arg" + c + " = argType" + c + ".readValueFromPointer(args);\nargs += argType" + c + "['argPackAdvance'];\nargTypes += 4;\n";
            return new Function("requireRegisteredType", "Module", "valueToHandle", "getMemory", d + ("var obj = new constructor(" + b + ");\nreturn valueToHandle(obj);\n}\n"))($a, f, W, () => K);
          }
          var nb = {};
          function Y(a) {
            return -9007199254740992 > a || 9007199254740992 < a ? NaN : Number(a);
          }
          var Z = (a) => 0 === a % 4 && (0 !== a % 100 || 0 === a % 400), ob = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335], pb = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334], rb = (a) => {
            var b = P(a) + 1, c = qb(b);
            c && Q(a, E, c, b);
            return c;
          }, sb = {}, ub = () => {
            if (!tb) {
              var a = { USER: "web_user", LOGNAME: "web_user", PATH: "/", PWD: "/", HOME: "/home/web_user", LANG: ("object" == typeof navigator && navigator.languages && navigator.languages[0] || "C").replace("-", "_") + ".UTF-8", _: ca || "./this.program" }, b;
              for (b in sb)
                void 0 === sb[b] ? delete a[b] : a[b] = sb[b];
              var c = [];
              for (b in a)
                c.push(`${b}=${a[b]}`);
              tb = c;
            }
            return tb;
          }, tb, vb = [null, [], []], wb = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], xb = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
          function yb(a) {
            var b = Array(P(a) + 1);
            Q(a, b, 0, b.length);
            return b;
          }
          for (var zb = (a, b, c, d) => {
            function e(g, r, u) {
              for (g = "number" == typeof g ? g.toString() : g || ""; g.length < r; )
                g = u[0] + g;
              return g;
            }
            function h(g, r) {
              return e(g, r, "0");
            }
            function l(g, r) {
              function u(db) {
                return 0 > db ? -1 : 0 < db ? 1 : 0;
              }
              var I;
              0 === (I = u(g.getFullYear() - r.getFullYear())) && 0 === (I = u(g.getMonth() - r.getMonth())) && (I = u(g.getDate() - r.getDate()));
              return I;
            }
            function k(g) {
              switch (g.getDay()) {
                case 0:
                  return new Date(g.getFullYear() - 1, 11, 29);
                case 1:
                  return g;
                case 2:
                  return new Date(g.getFullYear(), 0, 3);
                case 3:
                  return new Date(
                    g.getFullYear(),
                    0,
                    2
                  );
                case 4:
                  return new Date(g.getFullYear(), 0, 1);
                case 5:
                  return new Date(g.getFullYear() - 1, 11, 31);
                case 6:
                  return new Date(g.getFullYear() - 1, 11, 30);
              }
            }
            function n(g) {
              var r = g.Ta;
              for (g = new Date(new Date(g.Ua + 1900, 0, 1).getTime()); 0 < r; ) {
                var u = g.getMonth(), I = (Z(g.getFullYear()) ? wb : xb)[u];
                if (r > I - g.getDate())
                  r -= I - g.getDate() + 1, g.setDate(1), 11 > u ? g.setMonth(u + 1) : (g.setMonth(0), g.setFullYear(g.getFullYear() + 1));
                else {
                  g.setDate(g.getDate() + r);
                  break;
                }
              }
              u = new Date(g.getFullYear() + 1, 0, 4);
              r = k(new Date(
                g.getFullYear(),
                0,
                4
              ));
              u = k(u);
              return 0 >= l(r, g) ? 0 >= l(u, g) ? g.getFullYear() + 1 : g.getFullYear() : g.getFullYear() - 1;
            }
            var p = J[d + 40 >> 2];
            d = { kb: J[d >> 2], jb: J[d + 4 >> 2], Xa: J[d + 8 >> 2], ab: J[d + 12 >> 2], Ya: J[d + 16 >> 2], Ua: J[d + 20 >> 2], Oa: J[d + 24 >> 2], Ta: J[d + 28 >> 2], mb: J[d + 32 >> 2], ib: J[d + 36 >> 2], lb: p ? p ? O(E, p) : "" : "" };
            c = c ? O(E, c) : "";
            p = {
              "%c": "%a %b %d %H:%M:%S %Y",
              "%D": "%m/%d/%y",
              "%F": "%Y-%m-%d",
              "%h": "%b",
              "%r": "%I:%M:%S %p",
              "%R": "%H:%M",
              "%T": "%H:%M:%S",
              "%x": "%m/%d/%y",
              "%X": "%H:%M:%S",
              "%Ec": "%c",
              "%EC": "%C",
              "%Ex": "%m/%d/%y",
              "%EX": "%H:%M:%S",
              "%Ey": "%y",
              "%EY": "%Y",
              "%Od": "%d",
              "%Oe": "%e",
              "%OH": "%H",
              "%OI": "%I",
              "%Om": "%m",
              "%OM": "%M",
              "%OS": "%S",
              "%Ou": "%u",
              "%OU": "%U",
              "%OV": "%V",
              "%Ow": "%w",
              "%OW": "%W",
              "%Oy": "%y"
            };
            for (var v in p)
              c = c.replace(new RegExp(v, "g"), p[v]);
            var y = "Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "), F = "January February March April May June July August September October November December".split(" ");
            p = { "%a": (g) => y[g.Oa].substring(0, 3), "%A": (g) => y[g.Oa], "%b": (g) => F[g.Ya].substring(0, 3), "%B": (g) => F[g.Ya], "%C": (g) => h((g.Ua + 1900) / 100 | 0, 2), "%d": (g) => h(g.ab, 2), "%e": (g) => e(g.ab, 2, " "), "%g": (g) => n(g).toString().substring(2), "%G": (g) => n(g), "%H": (g) => h(g.Xa, 2), "%I": (g) => {
              g = g.Xa;
              0 == g ? g = 12 : 12 < g && (g -= 12);
              return h(g, 2);
            }, "%j": (g) => {
              for (var r = 0, u = 0; u <= g.Ya - 1; r += (Z(g.Ua + 1900) ? wb : xb)[u++])
                ;
              return h(g.ab + r, 3);
            }, "%m": (g) => h(g.Ya + 1, 2), "%M": (g) => h(g.jb, 2), "%n": () => "\n", "%p": (g) => 0 <= g.Xa && 12 > g.Xa ? "AM" : "PM", "%S": (g) => h(g.kb, 2), "%t": () => "	", "%u": (g) => g.Oa || 7, "%U": (g) => h(Math.floor((g.Ta + 7 - g.Oa) / 7), 2), "%V": (g) => {
              var r = Math.floor((g.Ta + 7 - (g.Oa + 6) % 7) / 7);
              2 >= (g.Oa + 371 - g.Ta - 2) % 7 && r++;
              if (r)
                53 == r && (u = (g.Oa + 371 - g.Ta) % 7, 4 == u || 3 == u && Z(g.Ua) || (r = 1));
              else {
                r = 52;
                var u = (g.Oa + 7 - g.Ta - 1) % 7;
                (4 == u || 5 == u && Z(g.Ua % 400 - 1)) && r++;
              }
              return h(r, 2);
            }, "%w": (g) => g.Oa, "%W": (g) => h(Math.floor((g.Ta + 7 - (g.Oa + 6) % 7) / 7), 2), "%y": (g) => (g.Ua + 1900).toString().substring(2), "%Y": (g) => g.Ua + 1900, "%z": (g) => {
              g = g.ib;
              var r = 0 <= g;
              g = Math.abs(g) / 60;
              return (r ? "+" : "-") + String("0000" + (g / 60 * 100 + g % 60)).slice(-4);
            }, "%Z": (g) => g.lb, "%%": () => "%" };
            c = c.replace(/%%/g, "\0\0");
            for (v in p)
              c.includes(v) && (c = c.replace(new RegExp(v, "g"), p[v](d)));
            c = c.replace(/\0\0/g, "%");
            v = yb(c);
            if (v.length > b)
              return 0;
            D.set(v, a);
            return v.length - 1;
          }, Ab = Array(256), Bb = 0; 256 > Bb; ++Bb)
            Ab[Bb] = String.fromCharCode(Bb);
          Ha = Ab;
          La = f.BindingError = class extends Error {
            constructor(a) {
              super(a);
              this.name = "BindingError";
            }
          };
          f.InternalError = class extends Error {
            constructor(a) {
              super(a);
              this.name = "InternalError";
            }
          };
          Object.assign(Pa.prototype, { get(a) {
            return this.Sa[a];
          }, has(a) {
            return void 0 !== this.Sa[a];
          }, Za(a) {
            var b = this.bb.pop() || this.Sa.length;
            this.Sa[b] = a;
            return b;
          }, $a(a) {
            this.Sa[a] = void 0;
            this.bb.push(a);
          } });
          U.Sa.push({ value: void 0 }, { value: null }, { value: true }, { value: false });
          U.Va = U.Sa.length;
          f.count_emval_handles = function() {
            for (var a = 0, b = U.Va; b < U.Sa.length; ++b)
              void 0 !== U.Sa[b] && ++a;
            return a;
          };
          var Cb = {
            a: function(a, b, c) {
              new Ca(a).Za(b, c);
              Da = a;
              Ea++;
              throw Da;
            },
            v: function() {
              return 0;
            },
            ba: () => {
            },
            N: () => {
            },
            P: () => {
            },
            H: function() {
              return 0;
            },
            $: () => {
            },
            V: () => {
            },
            _: () => {
            },
            A: function() {
            },
            O: () => {
            },
            L: () => {
            },
            aa: () => {
            },
            M: () => {
            },
            D: function(a, b, c, d, e) {
              b = R(b);
              c = Oa(c);
              var h = -1 != b.indexOf("u");
              h && (e = (1n << 64n) - 1n);
              T(a, { name: b, fromWireType: function(l) {
                return l;
              }, toWireType: function(l, k) {
                if ("bigint" != typeof k && "number" != typeof k)
                  throw new TypeError(`Cannot convert "${Ga(k)}" to ${this.name}`);
                if (k < d || k > e)
                  throw new TypeError(`Passing a number "${Ga(k)}" from JS side to C/C++ side to an argument of type "${b}", which is outside the valid range [${d}, ${e}]!`);
                return k;
              }, argPackAdvance: 8, readValueFromPointer: Na(b, c, !h), Wa: null });
            },
            ea: function(a, b, c, d, e) {
              var h = Oa(c);
              b = R(b);
              T(a, { name: b, fromWireType: function(l) {
                return !!l;
              }, toWireType: function(l, k) {
                return k ? d : e;
              }, argPackAdvance: 8, readValueFromPointer: function(l) {
                if (1 === c)
                  var k = D;
                else if (2 === c)
                  k = G;
                else if (4 === c)
                  k = J;
                else
                  throw new TypeError("Unknown boolean type size: " + b);
                return this.fromWireType(k[l >> h]);
              }, Wa: null });
            },
            da: function(a, b) {
              b = R(b);
              T(a, { name: b, fromWireType: function(c) {
                var d = V(c);
                Qa(c);
                return d;
              }, toWireType: function(c, d) {
                return W(d);
              }, argPackAdvance: 8, readValueFromPointer: Ra, Wa: null });
            },
            C: function(a, b, c) {
              c = Oa(c);
              b = R(b);
              T(a, { name: b, fromWireType: function(d) {
                return d;
              }, toWireType: function(d, e) {
                return e;
              }, argPackAdvance: 8, readValueFromPointer: Sa(b, c), Wa: null });
            },
            p: function(a, b, c, d, e) {
              b = R(b);
              -1 === e && (e = 4294967295);
              e = Oa(c);
              var h = (k) => k;
              if (0 === d) {
                var l = 32 - 8 * c;
                h = (k) => k << l >>> l;
              }
              c = b.includes("unsigned") ? function(k, n) {
                return n >>> 0;
              } : function(k, n) {
                return n;
              };
              T(a, { name: b, fromWireType: h, toWireType: c, argPackAdvance: 8, readValueFromPointer: Na(
                b,
                e,
                0 !== d
              ), Wa: null });
            },
            l: function(a, b, c) {
              function d(h) {
                h >>= 2;
                var l = K;
                return new e(l.buffer, l[h + 1], l[h]);
              }
              var e = [Int8Array, Uint8Array, Int16Array, Uint16Array, Int32Array, Uint32Array, Float32Array, Float64Array, BigInt64Array, BigUint64Array][b];
              c = R(c);
              T(a, { name: c, fromWireType: d, argPackAdvance: 8, readValueFromPointer: d }, { gb: true });
            },
            E: function(a, b) {
              b = R(b);
              var c = "std::string" === b;
              T(a, { name: b, fromWireType: function(d) {
                var e = K[d >> 2], h = d + 4;
                if (c)
                  for (var l = h, k = 0; k <= e; ++k) {
                    var n = h + k;
                    if (k == e || 0 == E[n]) {
                      l = l ? O(E, l, n - l) : "";
                      if (void 0 === p)
                        var p = l;
                      else
                        p += String.fromCharCode(0), p += l;
                      l = n + 1;
                    }
                  }
                else {
                  p = Array(e);
                  for (k = 0; k < e; ++k)
                    p[k] = String.fromCharCode(E[h + k]);
                  p = p.join("");
                }
                X(d);
                return p;
              }, toWireType: function(d, e) {
                e instanceof ArrayBuffer && (e = new Uint8Array(e));
                var h = "string" == typeof e;
                h || e instanceof Uint8Array || e instanceof Uint8ClampedArray || e instanceof Int8Array || S("Cannot pass non-string to std::string");
                var l = c && h ? P(e) : e.length;
                var k = qb(4 + l + 1), n = k + 4;
                K[k >> 2] = l;
                if (c && h)
                  Q(e, E, n, l + 1);
                else if (h)
                  for (h = 0; h < l; ++h) {
                    var p = e.charCodeAt(h);
                    255 < p && (X(n), S("String has UTF-16 code units that do not fit in 8 bits"));
                    E[n + h] = p;
                  }
                else
                  for (h = 0; h < l; ++h)
                    E[n + h] = e[h];
                null !== d && d.push(X, k);
                return k;
              }, argPackAdvance: 8, readValueFromPointer: Ra, Wa: function(d) {
                X(d);
              } });
            },
            x: function(a, b, c) {
              c = R(c);
              if (2 === b) {
                var d = Ua;
                var e = Va;
                var h = Wa;
                var l = () => H;
                var k = 1;
              } else
                4 === b && (d = Xa, e = Ya, h = Za, l = () => K, k = 2);
              T(a, { name: c, fromWireType: function(n) {
                for (var p = K[n >> 2], v = l(), y, F = n + 4, g = 0; g <= p; ++g) {
                  var r = n + 4 + g * b;
                  if (g == p || 0 == v[r >> k])
                    F = d(F, r - F), void 0 === y ? y = F : (y += String.fromCharCode(0), y += F), F = r + b;
                }
                X(n);
                return y;
              }, toWireType: function(n, p) {
                "string" != typeof p && S(`Cannot pass non-string to C++ string type ${c}`);
                var v = h(p), y = qb(4 + v + b);
                K[y >> 2] = v >> k;
                e(p, y + 4, v + b);
                null !== n && n.push(X, y);
                return y;
              }, argPackAdvance: 8, readValueFromPointer: Ra, Wa: function(n) {
                X(n);
              } });
            },
            fa: function(a, b) {
              b = R(b);
              T(a, { hb: true, name: b, argPackAdvance: 0, fromWireType: function() {
              }, toWireType: function() {
              } });
            },
            ca: () => true,
            o: function(a, b, c) {
              a = V(a);
              b = $a(b, "emval::as");
              var d = [], e = W(d);
              K[c >> 2] = e;
              return b.toWireType(d, a);
            },
            h: function(a, b, c, d, e) {
              a = eb[a];
              b = V(b);
              c = cb(c);
              var h = [];
              K[d >> 2] = W(h);
              return a(b, c, h, e);
            },
            r: function(a, b, c, d) {
              a = eb[a];
              b = V(b);
              c = cb(c);
              a(b, c, null, d);
            },
            b: Qa,
            F: function(a, b) {
              a = V(a);
              b = V(b);
              return a == b;
            },
            u: function(a) {
              if (0 === a)
                return W(fb());
              a = cb(a);
              return W(fb()[a]);
            },
            g: function(a, b) {
              var c = hb(a, b), d = c[0];
              b = d.name + "_$" + c.slice(1).map(function(v) {
                return v.name;
              }).join("_") + "$";
              var e = jb[b];
              if (void 0 !== e)
                return e;
              e = ["retType"];
              for (var h = [d], l = "", k = 0; k < a - 1; ++k)
                l += (0 !== k ? ", " : "") + "arg" + k, e.push("argType" + k), h.push(c[1 + k]);
              var n = "return function " + ib("methodCaller_" + b) + "(handle, name, destructors, args) {\n", p = 0;
              for (k = 0; k < a - 1; ++k)
                n += "    var arg" + k + " = argType" + k + ".readValueFromPointer(args" + (p ? "+" + p : "") + ");\n", p += c[k + 1].argPackAdvance;
              n += "    var rv = handle[name](" + l + ");\n";
              for (k = 0; k < a - 1; ++k)
                c[k + 1].deleteObject && (n += "    argType" + k + ".deleteObject(arg" + k + ");\n");
              d.hb || (n += "    return retType.toWireType(destructors, rv);\n");
              e.push(n + "};\n");
              a = lb(e).apply(null, h);
              e = gb(a);
              return jb[b] = e;
            },
            q: function(a, b) {
              a = V(a);
              b = V(b);
              return W(a[b]);
            },
            c: function(a) {
              4 < a && (U.get(a).cb += 1);
            },
            G: function(a, b, c, d) {
              a = V(a);
              var e = nb[b];
              e || (e = mb(b), nb[b] = e);
              return e(a, c, d);
            },
            s: function() {
              return W([]);
            },
            k: function(a) {
              a = V(a);
              for (var b = Array(a.length), c = 0; c < a.length; c++)
                b[c] = a[c];
              return W(b);
            },
            d: function(a) {
              return W(cb(a));
            },
            j: function() {
              return W({});
            },
            f: function(a) {
              for (var b = V(a); b.length; ) {
                var c = b.pop();
                b.pop()(c);
              }
              Qa(a);
            },
            i: function(a, b, c) {
              a = V(a);
              b = V(b);
              c = V(c);
              a[b] = c;
            },
            e: function(a, b) {
              a = $a(a, "_emval_take_value");
              a = a.readValueFromPointer(b);
              return W(a);
            },
            S: function(a, b) {
              a = Y(a);
              b = Y(b);
              a = new Date(1e3 * a);
              J[b >> 2] = a.getUTCSeconds();
              J[b + 4 >> 2] = a.getUTCMinutes();
              J[b + 8 >> 2] = a.getUTCHours();
              J[b + 12 >> 2] = a.getUTCDate();
              J[b + 16 >> 2] = a.getUTCMonth();
              J[b + 20 >> 2] = a.getUTCFullYear() - 1900;
              J[b + 24 >> 2] = a.getUTCDay();
              J[b + 28 >> 2] = (a.getTime() - Date.UTC(a.getUTCFullYear(), 0, 1, 0, 0, 0, 0)) / 864e5 | 0;
            },
            T: function(a, b) {
              a = Y(a);
              b = Y(b);
              a = new Date(1e3 * a);
              J[b >> 2] = a.getSeconds();
              J[b + 4 >> 2] = a.getMinutes();
              J[b + 8 >> 2] = a.getHours();
              J[b + 12 >> 2] = a.getDate();
              J[b + 16 >> 2] = a.getMonth();
              J[b + 20 >> 2] = a.getFullYear() - 1900;
              J[b + 24 >> 2] = a.getDay();
              J[b + 28 >> 2] = (Z(a.getFullYear()) ? ob : pb)[a.getMonth()] + a.getDate() - 1 | 0;
              J[b + 36 >> 2] = -(60 * a.getTimezoneOffset());
              var c = new Date(a.getFullYear(), 6, 1).getTimezoneOffset(), d = new Date(a.getFullYear(), 0, 1).getTimezoneOffset();
              J[b + 32 >> 2] = (c != d && a.getTimezoneOffset() == Math.min(d, c)) | 0;
            },
            U: function(a) {
              a = Y(a);
              var b = new Date(J[a + 20 >> 2] + 1900, J[a + 16 >> 2], J[a + 12 >> 2], J[a + 8 >> 2], J[a + 4 >> 2], J[a >> 2], 0), c = J[a + 32 >> 2], d = b.getTimezoneOffset(), e = new Date(b.getFullYear(), 6, 1).getTimezoneOffset(), h = new Date(
                b.getFullYear(),
                0,
                1
              ).getTimezoneOffset(), l = Math.min(h, e);
              0 > c ? J[a + 32 >> 2] = Number(e != h && l == d) : 0 < c != (l == d) && (e = Math.max(h, e), b.setTime(b.getTime() + 6e4 * ((0 < c ? l : e) - d)));
              J[a + 24 >> 2] = b.getDay();
              J[a + 28 >> 2] = (Z(b.getFullYear()) ? ob : pb)[b.getMonth()] + b.getDate() - 1 | 0;
              J[a >> 2] = b.getSeconds();
              J[a + 4 >> 2] = b.getMinutes();
              J[a + 8 >> 2] = b.getHours();
              J[a + 12 >> 2] = b.getDate();
              J[a + 16 >> 2] = b.getMonth();
              J[a + 20 >> 2] = b.getYear();
              return BigInt(b.getTime() / 1e3);
            },
            Q: function() {
              return -52;
            },
            R: function() {
            },
            J: (a, b, c) => {
              function d(n) {
                return (n = n.toTimeString().match(/\(([A-Za-z ]+)\)$/)) ? n[1] : "GMT";
              }
              var e = (/* @__PURE__ */ new Date()).getFullYear(), h = new Date(e, 0, 1), l = new Date(e, 6, 1);
              e = h.getTimezoneOffset();
              var k = l.getTimezoneOffset();
              K[a >> 2] = 60 * Math.max(e, k);
              J[b >> 2] = Number(e != k);
              a = d(h);
              b = d(l);
              a = rb(a);
              b = rb(b);
              k < e ? (K[c >> 2] = a, K[c + 4 >> 2] = b) : (K[c >> 2] = b, K[c + 4 >> 2] = a);
            },
            t: () => {
              ja("");
            },
            B: function() {
              return Date.now();
            },
            K: () => 2147483648,
            n: () => performance.now(),
            Z: (a, b, c) => E.copyWithin(a, b, b + c),
            I: (a) => {
              var b = E.length;
              a >>>= 0;
              if (2147483648 < a)
                return false;
              for (var c = 1; 4 >= c; c *= 2) {
                var d = b * (1 + 0.2 / c);
                d = Math.min(d, a + 100663296);
                var e = Math;
                d = Math.max(a, d);
                a: {
                  e = e.min.call(e, 2147483648, d + (65536 - d % 65536) % 65536) - B.buffer.byteLength + 65535 >>> 16;
                  try {
                    B.grow(e);
                    pa();
                    var h = 1;
                    break a;
                  } catch (l) {
                  }
                  h = void 0;
                }
                if (h)
                  return true;
              }
              return false;
            },
            X: (a, b) => {
              var c = 0;
              ub().forEach(function(d, e) {
                var h = b + c;
                e = K[a + 4 * e >> 2] = h;
                for (h = 0; h < d.length; ++h)
                  D[e++ >> 0] = d.charCodeAt(h);
                D[e >> 0] = 0;
                c += d.length + 1;
              });
              return 0;
            },
            Y: (a, b) => {
              var c = ub();
              K[a >> 2] = c.length;
              var d = 0;
              c.forEach(function(e) {
                d += e.length + 1;
              });
              K[b >> 2] = d;
              return 0;
            },
            w: () => 52,
            z: () => 52,
            W: function() {
              return 70;
            },
            y: (a, b, c, d) => {
              for (var e = 0, h = 0; h < c; h++) {
                var l = K[b >> 2], k = K[b + 4 >> 2];
                b += 8;
                for (var n = 0; n < k; n++) {
                  var p = E[l + n], v = vb[a];
                  0 === p || 10 === p ? ((1 === a ? ia : z)(O(v, 0)), v.length = 0) : v.push(p);
                }
                e += k;
              }
              K[d >> 2] = e;
              return 0;
            },
            ga: zb,
            m: (a, b, c, d) => zb(a, b, c, d)
          };
          (function() {
            function a(c) {
              C = c = c.exports;
              B = C.ha;
              pa();
              ra.unshift(C.ia);
              L--;
              f.monitorRunDependencies && f.monitorRunDependencies(L);
              if (0 == L && (null !== ua && (clearInterval(ua), ua = null), M)) {
                var d = M;
                M = null;
                d();
              }
              return c;
            }
            var b = { a: Cb };
            L++;
            f.monitorRunDependencies && f.monitorRunDependencies(L);
            if (f.instantiateWasm)
              try {
                return f.instantiateWasm(b, a);
              } catch (c) {
                z("Module.instantiateWasm callback failed with error: " + c), m(c);
              }
            Aa(b, function(c) {
              a(c.instance);
            }).catch(m);
            return {};
          })();
          f._OrtInit = (a, b) => (f._OrtInit = C.ja)(a, b);
          f._OrtGetLastError = (a, b) => (f._OrtGetLastError = C.ka)(a, b);
          f._OrtCreateSessionOptions = (a, b, c, d, e, h, l, k, n, p) => (f._OrtCreateSessionOptions = C.la)(a, b, c, d, e, h, l, k, n, p);
          f._OrtAppendExecutionProvider = (a, b) => (f._OrtAppendExecutionProvider = C.ma)(a, b);
          f._OrtAddFreeDimensionOverride = (a, b, c) => (f._OrtAddFreeDimensionOverride = C.na)(a, b, c);
          f._OrtAddSessionConfigEntry = (a, b, c) => (f._OrtAddSessionConfigEntry = C.oa)(a, b, c);
          f._OrtReleaseSessionOptions = (a) => (f._OrtReleaseSessionOptions = C.pa)(a);
          f._OrtCreateSession = (a, b, c) => (f._OrtCreateSession = C.qa)(a, b, c);
          f._OrtReleaseSession = (a) => (f._OrtReleaseSession = C.ra)(a);
          f._OrtGetInputOutputCount = (a, b, c) => (f._OrtGetInputOutputCount = C.sa)(a, b, c);
          f._OrtGetInputName = (a, b) => (f._OrtGetInputName = C.ta)(a, b);
          f._OrtGetOutputName = (a, b) => (f._OrtGetOutputName = C.ua)(a, b);
          f._OrtFree = (a) => (f._OrtFree = C.va)(a);
          f._OrtCreateTensor = (a, b, c, d, e, h) => (f._OrtCreateTensor = C.wa)(a, b, c, d, e, h);
          f._OrtGetTensorData = (a, b, c, d, e) => (f._OrtGetTensorData = C.xa)(a, b, c, d, e);
          f._OrtReleaseTensor = (a) => (f._OrtReleaseTensor = C.ya)(a);
          f._OrtCreateRunOptions = (a, b, c, d) => (f._OrtCreateRunOptions = C.za)(a, b, c, d);
          f._OrtAddRunConfigEntry = (a, b, c) => (f._OrtAddRunConfigEntry = C.Aa)(a, b, c);
          f._OrtReleaseRunOptions = (a) => (f._OrtReleaseRunOptions = C.Ba)(a);
          f._OrtCreateBinding = (a) => (f._OrtCreateBinding = C.Ca)(a);
          f._OrtBindInput = (a, b, c) => (f._OrtBindInput = C.Da)(a, b, c);
          f._OrtBindOutput = (a, b, c, d) => (f._OrtBindOutput = C.Ea)(a, b, c, d);
          f._OrtClearBoundOutputs = (a) => (f._OrtClearBoundOutputs = C.Fa)(a);
          f._OrtReleaseBinding = (a) => (f._OrtReleaseBinding = C.Ga)(a);
          f._OrtRunWithBinding = (a, b, c, d, e) => (f._OrtRunWithBinding = C.Ha)(a, b, c, d, e);
          f._OrtRun = (a, b, c, d, e, h, l, k) => (f._OrtRun = C.Ia)(a, b, c, d, e, h, l, k);
          f._OrtEndProfiling = (a) => (f._OrtEndProfiling = C.Ja)(a);
          var qb = f._malloc = (a) => (qb = f._malloc = C.Ka)(a), X = f._free = (a) => (X = f._free = C.La)(a), ab = (a) => (ab = C.Ma)(a);
          f.__embind_initialize_bindings = () => (f.__embind_initialize_bindings = C.Na)();
          var Db = () => (Db = C.Pa)(), Eb = (a) => (Eb = C.Qa)(a), Fb = (a) => (Fb = C.Ra)(a);
          f.stackAlloc = Fb;
          f.stackSave = Db;
          f.stackRestore = Eb;
          f.UTF8ToString = (a, b) => a ? O(E, a, b) : "";
          f.stringToUTF8 = (a, b, c) => Q(a, E, b, c);
          f.lengthBytesUTF8 = P;
          var Gb;
          M = function Hb() {
            Gb || Ib();
            Gb || (M = Hb);
          };
          function Ib() {
            function a() {
              if (!Gb && (Gb = true, f.calledRun = true, !ka)) {
                Ba(ra);
                aa(f);
                if (f.onRuntimeInitialized)
                  f.onRuntimeInitialized();
                if (f.postRun)
                  for ("function" == typeof f.postRun && (f.postRun = [f.postRun]); f.postRun.length; ) {
                    var b = f.postRun.shift();
                    sa.unshift(b);
                  }
                Ba(sa);
              }
            }
            if (!(0 < L)) {
              if (f.preRun)
                for ("function" == typeof f.preRun && (f.preRun = [f.preRun]); f.preRun.length; )
                  ta();
              Ba(qa);
              0 < L || (f.setStatus ? (f.setStatus("Running..."), setTimeout(function() {
                setTimeout(function() {
                  f.setStatus("");
                }, 1);
                a();
              }, 1)) : a());
            }
          }
          if (f.preInit)
            for ("function" == typeof f.preInit && (f.preInit = [f.preInit]); 0 < f.preInit.length; )
              f.preInit.pop()();
          Ib();
          return moduleArg.ready;
        };
      })();
      if (typeof exports === "object" && typeof module === "object")
        module.exports = ortWasm;
      else if (typeof define === "function" && define["amd"])
        define([], () => ortWasm);
    }
  });

  // nodejs-ignore:worker_threads
  var require_worker_threads = __commonJS({
    "nodejs-ignore:worker_threads"() {
    }
  });

  // nodejs-ignore:perf_hooks
  var require_perf_hooks = __commonJS({
    "nodejs-ignore:perf_hooks"() {
    }
  });

  // nodejs-ignore:os
  var os_exports = {};
  __export(os_exports, {
    cpus: () => cpus2
  });
  var cpus2;
  var init_os = __esm({
    "nodejs-ignore:os"() {
      cpus2 = void 0;
    }
  });

  // web/lib/wasm/binding/ort-wasm-threaded.js
  var require_ort_wasm_threaded = __commonJS({
    "web/lib/wasm/binding/ort-wasm-threaded.js"(exports, module) {
      "use strict";
      var ortWasmThreaded = (() => {
        var _scriptDir = typeof document !== "undefined" && document.currentScript ? document.currentScript.src : void 0;
        if (typeof __filename !== "undefined")
          _scriptDir = _scriptDir || __filename;
        return function(moduleArg = {}) {
          function e() {
            m.buffer != n.buffer && p();
            return n;
          }
          function t() {
            m.buffer != n.buffer && p();
            return aa;
          }
          function v() {
            m.buffer != n.buffer && p();
            return ba;
          }
          function ca() {
            m.buffer != n.buffer && p();
            return da;
          }
          function w() {
            m.buffer != n.buffer && p();
            return ea;
          }
          function z() {
            m.buffer != n.buffer && p();
            return fa;
          }
          function ha() {
            m.buffer != n.buffer && p();
            return ia;
          }
          var A = moduleArg, ja, ka;
          A.ready = new Promise((a, b) => {
            ja = a;
            ka = b;
          });
          var la = Object.assign({}, A), ma = "./this.program", C = (a, b) => {
            throw b;
          }, na = "object" == typeof window, D = "function" == typeof importScripts, E = "object" == typeof process && "object" == typeof process.versions && "string" == typeof process.versions.node, F = A.ENVIRONMENT_IS_PTHREAD || false, G = "";
          function oa(a) {
            return A.locateFile ? A.locateFile(a, G) : G + a;
          }
          var pa, qa, ra;
          if (E) {
            var fs = (init_fs(), __toCommonJS(fs_exports)), sa = (init_path(), __toCommonJS(path_exports));
            G = D ? sa.dirname(G) + "/" : __dirname + "/";
            pa = (b, c) => {
              b = b.startsWith("file://") ? new URL(b) : sa.normalize(b);
              return fs.readFileSync(b, c ? void 0 : "utf8");
            };
            ra = (b) => {
              b = pa(b, true);
              b.buffer || (b = new Uint8Array(b));
              return b;
            };
            qa = (b, c, d, f = true) => {
              b = b.startsWith("file://") ? new URL(b) : sa.normalize(b);
              fs.readFile(b, f ? void 0 : "utf8", (g, k) => {
                g ? d(g) : c(f ? k.buffer : k);
              });
            };
            !A.thisProgram && 1 < process.argv.length && (ma = process.argv[1].replace(/\\/g, "/"));
            process.argv.slice(2);
            C = (b, c) => {
              process.exitCode = b;
              throw c;
            };
            A.inspect = () => "[Emscripten Module object]";
            let a;
            try {
              a = require_worker_threads();
            } catch (b) {
              throw console.error('The "worker_threads" module is not supported in this node.js build - perhaps a newer version is needed?'), b;
            }
            global.Worker = a.Worker;
          } else if (na || D)
            D ? G = self.location.href : "undefined" != typeof document && document.currentScript && (G = document.currentScript.src), typeof _scriptDir !== "undefined" && _scriptDir && (G = _scriptDir), 0 !== G.indexOf("blob:") ? G = G.substr(0, G.replace(/[?#].*/, "").lastIndexOf("/") + 1) : G = "", E || (pa = (a) => {
              var b = new XMLHttpRequest();
              b.open("GET", a, false);
              b.send(null);
              return b.responseText;
            }, D && (ra = (a) => {
              var b = new XMLHttpRequest();
              b.open("GET", a, false);
              b.responseType = "arraybuffer";
              b.send(null);
              return new Uint8Array(b.response);
            }), qa = (a, b, c) => {
              var d = new XMLHttpRequest();
              d.open("GET", a, true);
              d.responseType = "arraybuffer";
              d.onload = () => {
                200 == d.status || 0 == d.status && d.response ? b(d.response) : c();
              };
              d.onerror = c;
              d.send(null);
            });
          E && "undefined" == typeof performance && (global.performance = require_perf_hooks().performance);
          var ta = console.log.bind(console), ua = console.error.bind(console);
          E && (ta = (...a) => fs.writeSync(1, a.join(" ") + "\n"), ua = (...a) => fs.writeSync(2, a.join(" ") + "\n"));
          var va = A.print || ta, H = A.printErr || ua;
          Object.assign(A, la);
          la = null;
          A.thisProgram && (ma = A.thisProgram);
          A.quit && (C = A.quit);
          var I;
          A.wasmBinary && (I = A.wasmBinary);
          var noExitRuntime = A.noExitRuntime || true;
          "object" != typeof WebAssembly && wa("no native wasm support detected");
          var m, J, xa, ya = false, K, n, aa, ba, da, ea, fa, za, L, Aa, ia;
          function p() {
            var a = m.buffer;
            A.HEAP8 = n = new Int8Array(a);
            A.HEAP16 = ba = new Int16Array(a);
            A.HEAP32 = ea = new Int32Array(a);
            A.HEAPU8 = aa = new Uint8Array(a);
            A.HEAPU16 = da = new Uint16Array(a);
            A.HEAPU32 = fa = new Uint32Array(a);
            A.HEAPF32 = za = new Float32Array(a);
            A.HEAPF64 = ia = new Float64Array(a);
            A.HEAP64 = L = new BigInt64Array(a);
            A.HEAPU64 = Aa = new BigUint64Array(a);
          }
          var Ba = A.INITIAL_MEMORY || 16777216;
          5242880 <= Ba || wa("INITIAL_MEMORY should be larger than STACK_SIZE, was " + Ba + "! (STACK_SIZE=5242880)");
          if (F)
            m = A.wasmMemory;
          else if (A.wasmMemory)
            m = A.wasmMemory;
          else if (m = new WebAssembly.Memory({ initial: Ba / 65536, maximum: 32768, shared: true }), !(m.buffer instanceof SharedArrayBuffer))
            throw H("requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag"), E && H("(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and/or recent version)"), Error("bad memory");
          p();
          Ba = m.buffer.byteLength;
          var Ca, Da = [], Ea = [], Fa = [], Ga = 0;
          function Ha() {
            return noExitRuntime || 0 < Ga;
          }
          var M = 0, Ia = null, Ja = null;
          function Ka() {
            M++;
            A.monitorRunDependencies && A.monitorRunDependencies(M);
          }
          function La() {
            M--;
            A.monitorRunDependencies && A.monitorRunDependencies(M);
            if (0 == M && (null !== Ia && (clearInterval(Ia), Ia = null), Ja)) {
              var a = Ja;
              Ja = null;
              a();
            }
          }
          function wa(a) {
            if (A.onAbort)
              A.onAbort(a);
            a = "Aborted(" + a + ")";
            H(a);
            ya = true;
            K = 1;
            a = new WebAssembly.RuntimeError(a + ". Build with -sASSERTIONS for more info.");
            ka(a);
            throw a;
          }
          function Ma(a) {
            return a.startsWith("data:application/octet-stream;base64,");
          }
          var O;
          O = "ort-wasm-threaded.wasm";
          Ma(O) || (O = oa(O));
          function Na(a) {
            if (a == O && I)
              return new Uint8Array(I);
            if (ra)
              return ra(a);
            throw "both async and sync fetching of the wasm failed";
          }
          function Oa(a) {
            if (!I && (na || D)) {
              if ("function" == typeof fetch && !a.startsWith("file://"))
                return fetch(a, { credentials: "same-origin" }).then((b) => {
                  if (!b.ok)
                    throw "failed to load wasm binary file at '" + a + "'";
                  return b.arrayBuffer();
                }).catch(() => Na(a));
              if (qa)
                return new Promise((b, c) => {
                  qa(a, (d) => b(new Uint8Array(d)), c);
                });
            }
            return Promise.resolve().then(() => Na(a));
          }
          function Pa(a, b, c) {
            return Oa(a).then((d) => WebAssembly.instantiate(d, b)).then((d) => d).then(c, (d) => {
              H("failed to asynchronously prepare wasm: " + d);
              wa(d);
            });
          }
          function Qa(a, b) {
            var c = O;
            return I || "function" != typeof WebAssembly.instantiateStreaming || Ma(c) || c.startsWith("file://") || E || "function" != typeof fetch ? Pa(c, a, b) : fetch(c, { credentials: "same-origin" }).then((d) => WebAssembly.instantiateStreaming(d, a).then(b, function(f) {
              H("wasm streaming compile failed: " + f);
              H("falling back to ArrayBuffer instantiation");
              return Pa(c, a, b);
            }));
          }
          function Ra(a) {
            this.name = "ExitStatus";
            this.message = `Program terminated with exit(${a})`;
            this.status = a;
          }
          function Sa(a) {
            a.terminate();
            a.onmessage = () => {
            };
          }
          function Ta(a) {
            (a = P.kb[a]) || wa();
            P.Qb(a);
          }
          function Ua(a) {
            var b = P.Hb();
            if (!b)
              return 6;
            P.ob.push(b);
            P.kb[a.nb] = b;
            b.nb = a.nb;
            var c = { cmd: "run", start_routine: a.Rb, arg: a.Gb, pthread_ptr: a.nb };
            E && b.unref();
            b.postMessage(c, a.Xb);
            return 0;
          }
          var Va = "undefined" != typeof TextDecoder ? new TextDecoder("utf8") : void 0, Wa = (a, b, c) => {
            var d = b + c;
            for (c = b; a[c] && !(c >= d); )
              ++c;
            if (16 < c - b && a.buffer && Va)
              return Va.decode(a.buffer instanceof SharedArrayBuffer ? a.slice(b, c) : a.subarray(b, c));
            for (d = ""; b < c; ) {
              var f = a[b++];
              if (f & 128) {
                var g = a[b++] & 63;
                if (192 == (f & 224))
                  d += String.fromCharCode((f & 31) << 6 | g);
                else {
                  var k = a[b++] & 63;
                  f = 224 == (f & 240) ? (f & 15) << 12 | g << 6 | k : (f & 7) << 18 | g << 12 | k << 6 | a[b++] & 63;
                  65536 > f ? d += String.fromCharCode(f) : (f -= 65536, d += String.fromCharCode(55296 | f >> 10, 56320 | f & 1023));
                }
              } else
                d += String.fromCharCode(f);
            }
            return d;
          }, Xa = (a, b) => a ? Wa(t(), a, b) : "";
          function Ya(a) {
            if (F)
              return Q(1, 1, a);
            K = a;
            if (!Ha()) {
              P.Sb();
              if (A.onExit)
                A.onExit(a);
              ya = true;
            }
            C(a, new Ra(a));
          }
          var $a = (a) => {
            K = a;
            if (F)
              throw Za(a), "unwind";
            Ya(a);
          }, P = {
            rb: [],
            ob: [],
            Eb: [],
            kb: {},
            wb: function() {
              F ? P.Kb() : P.Jb();
            },
            Jb: function() {
              Da.unshift(() => {
                Ka();
                P.Mb(() => La());
              });
            },
            Kb: function() {
              P.receiveObjectTransfer = P.Pb;
              P.threadInitTLS = P.Db;
              P.setExitStatus = P.Cb;
              noExitRuntime = false;
            },
            Cb: function(a) {
              K = a;
            },
            bc: ["$terminateWorker"],
            Sb: function() {
              for (var a of P.ob)
                Sa(a);
              for (a of P.rb)
                Sa(a);
              P.rb = [];
              P.ob = [];
              P.kb = [];
            },
            Qb: function(a) {
              var b = a.nb;
              delete P.kb[b];
              P.rb.push(a);
              P.ob.splice(P.ob.indexOf(a), 1);
              a.nb = 0;
              ab(b);
            },
            Pb: function() {
            },
            Db: function() {
              P.Eb.forEach((a) => a());
            },
            Nb: (a) => new Promise((b) => {
              a.onmessage = (g) => {
                g = g.data;
                var k = g.cmd;
                if (g.targetThread && g.targetThread != bb()) {
                  var l = P.kb[g.ac];
                  l ? l.postMessage(g, g.transferList) : H('Internal error! Worker sent a message "' + k + '" to target pthread ' + g.targetThread + ", but that thread no longer exists!");
                } else if ("checkMailbox" === k)
                  cb();
                else if ("spawnThread" === k)
                  Ua(g);
                else if ("cleanupThread" === k)
                  Ta(g.thread);
                else if ("killThread" === k)
                  g = g.thread, k = P.kb[g], delete P.kb[g], Sa(k), ab(g), P.ob.splice(
                    P.ob.indexOf(k),
                    1
                  ), k.nb = 0;
                else if ("cancelThread" === k)
                  P.kb[g.thread].postMessage({ cmd: "cancel" });
                else if ("loaded" === k)
                  a.loaded = true, b(a);
                else if ("alert" === k)
                  alert("Thread " + g.threadId + ": " + g.text);
                else if ("setimmediate" === g.target)
                  a.postMessage(g);
                else if ("callHandler" === k)
                  A[g.handler](...g.args);
                else
                  k && H("worker sent an unknown command " + k);
              };
              a.onerror = (g) => {
                H("worker sent an error! " + g.filename + ":" + g.lineno + ": " + g.message);
                throw g;
              };
              E && (a.on("message", function(g) {
                a.onmessage({ data: g });
              }), a.on("error", function(g) {
                a.onerror(g);
              }));
              var c = [], d = ["onExit", "onAbort", "print", "printErr"], f;
              for (f of d)
                A.hasOwnProperty(f) && c.push(f);
              a.postMessage({ cmd: "load", handlers: c, urlOrBlob: A.mainScriptUrlOrBlob || _scriptDir, wasmMemory: m, wasmModule: xa });
            }),
            Mb: function(a) {
              a();
            },
            Fb: function() {
              var a = oa("ort-wasm-threaded.worker.js");
              a = new Worker(a);
              P.rb.push(a);
            },
            Hb: function() {
              0 == P.rb.length && (P.Fb(), P.Nb(P.rb[0]));
              return P.rb.pop();
            }
          };
          A.PThread = P;
          var db = (a) => {
            for (; 0 < a.length; )
              a.shift()(A);
          };
          A.establishStackSpace = function() {
            var a = bb(), b = w()[a + 52 >> 2];
            a = w()[a + 56 >> 2];
            eb(b, b - a);
            fb(b);
          };
          function Za(a) {
            if (F)
              return Q(2, 0, a);
            $a(a);
          }
          var gb = [];
          A.invokeEntryPoint = function(a, b) {
            var c = gb[a];
            c || (a >= gb.length && (gb.length = a + 1), gb[a] = c = Ca.get(a));
            a = c(b);
            Ha() ? P.Cb(a) : hb(a);
          };
          function ib(a) {
            this.tb = a - 24;
            this.Ob = function(b) {
              z()[this.tb + 4 >> 2] = b;
            };
            this.yb = function(b) {
              z()[this.tb + 8 >> 2] = b;
            };
            this.wb = function(b, c) {
              this.xb();
              this.Ob(b);
              this.yb(c);
            };
            this.xb = function() {
              z()[this.tb + 16 >> 2] = 0;
            };
          }
          var jb = 0, kb = 0;
          function lb(a, b, c, d) {
            return F ? Q(3, 1, a, b, c, d) : mb(a, b, c, d);
          }
          function mb(a, b, c, d) {
            if ("undefined" == typeof SharedArrayBuffer)
              return H("Current environment does not support SharedArrayBuffer, pthreads are not available!"), 6;
            var f = [];
            if (F && 0 === f.length)
              return lb(a, b, c, d);
            a = { Rb: c, nb: a, Gb: d, Xb: f };
            return F ? (a.Zb = "spawnThread", postMessage(a, f), 0) : Ua(a);
          }
          function nb(a, b, c) {
            return F ? Q(4, 1, a, b, c) : 0;
          }
          function ob(a, b) {
            if (F)
              return Q(5, 1, a, b);
          }
          var pb = (a) => {
            for (var b = 0, c = 0; c < a.length; ++c) {
              var d = a.charCodeAt(c);
              127 >= d ? b++ : 2047 >= d ? b += 2 : 55296 <= d && 57343 >= d ? (b += 4, ++c) : b += 3;
            }
            return b;
          }, qb = (a, b, c, d) => {
            if (!(0 < d))
              return 0;
            var f = c;
            d = c + d - 1;
            for (var g = 0; g < a.length; ++g) {
              var k = a.charCodeAt(g);
              if (55296 <= k && 57343 >= k) {
                var l = a.charCodeAt(++g);
                k = 65536 + ((k & 1023) << 10) | l & 1023;
              }
              if (127 >= k) {
                if (c >= d)
                  break;
                b[c++] = k;
              } else {
                if (2047 >= k) {
                  if (c + 1 >= d)
                    break;
                  b[c++] = 192 | k >> 6;
                } else {
                  if (65535 >= k) {
                    if (c + 2 >= d)
                      break;
                    b[c++] = 224 | k >> 12;
                  } else {
                    if (c + 3 >= d)
                      break;
                    b[c++] = 240 | k >> 18;
                    b[c++] = 128 | k >> 12 & 63;
                  }
                  b[c++] = 128 | k >> 6 & 63;
                }
                b[c++] = 128 | k & 63;
              }
            }
            b[c] = 0;
            return c - f;
          }, rb = (a, b, c) => qb(a, t(), b, c);
          function sb(a, b) {
            if (F)
              return Q(6, 1, a, b);
          }
          function tb(a, b, c) {
            if (F)
              return Q(7, 1, a, b, c);
          }
          function ub(a, b, c) {
            return F ? Q(8, 1, a, b, c) : 0;
          }
          function vb(a, b) {
            if (F)
              return Q(9, 1, a, b);
          }
          function wb(a, b, c) {
            if (F)
              return Q(10, 1, a, b, c);
          }
          function xb(a, b, c, d) {
            if (F)
              return Q(11, 1, a, b, c, d);
          }
          function yb(a, b, c, d) {
            if (F)
              return Q(12, 1, a, b, c, d);
          }
          function zb(a, b, c, d) {
            if (F)
              return Q(13, 1, a, b, c, d);
          }
          function Ab(a) {
            if (F)
              return Q(14, 1, a);
          }
          function Bb(a, b) {
            if (F)
              return Q(15, 1, a, b);
          }
          function Cb(a, b, c) {
            if (F)
              return Q(16, 1, a, b, c);
          }
          function Db(a) {
            if (null === a)
              return "null";
            var b = typeof a;
            return "object" === b || "array" === b || "function" === b ? a.toString() : "" + a;
          }
          var Eb = void 0;
          function S(a) {
            for (var b = ""; t()[a]; )
              b += Eb[t()[a++]];
            return b;
          }
          var Fb = {}, Gb = {}, Hb = {}, Ib = void 0;
          function T(a) {
            throw new Ib(a);
          }
          function Jb(a, b, c = {}) {
            var d = b.name;
            a || T(`type "${d}" must have a positive integer typeid pointer`);
            if (Gb.hasOwnProperty(a)) {
              if (c.Ib)
                return;
              T(`Cannot register type '${d}' twice`);
            }
            Gb[a] = b;
            delete Hb[a];
            Fb.hasOwnProperty(a) && (b = Fb[a], delete Fb[a], b.forEach((f) => f()));
          }
          function U(a, b, c = {}) {
            if (!("argPackAdvance" in b))
              throw new TypeError("registerType registeredInstance requires argPackAdvance");
            Jb(a, b, c);
          }
          function Kb(a, b, c) {
            switch (b) {
              case 0:
                return c ? function(d) {
                  return e()[d];
                } : function(d) {
                  return t()[d];
                };
              case 1:
                return c ? function(d) {
                  return v()[d >> 1];
                } : function(d) {
                  return ca()[d >> 1];
                };
              case 2:
                return c ? function(d) {
                  return w()[d >> 2];
                } : function(d) {
                  return z()[d >> 2];
                };
              case 3:
                return c ? function(d) {
                  return L[d >> 3];
                } : function(d) {
                  return Aa[d >> 3];
                };
              default:
                throw new TypeError("Unknown integer type: " + a);
            }
          }
          function Lb(a) {
            switch (a) {
              case 1:
                return 0;
              case 2:
                return 1;
              case 4:
                return 2;
              case 8:
                return 3;
              default:
                throw new TypeError(`Unknown type size: ${a}`);
            }
          }
          function Mb() {
            this.mb = [void 0];
            this.Ab = [];
          }
          var V = new Mb();
          function Nb(a) {
            a >= V.tb && 0 === --V.get(a).Bb && V.yb(a);
          }
          var W = (a) => {
            a || T("Cannot use deleted val. handle = " + a);
            return V.get(a).value;
          }, X = (a) => {
            switch (a) {
              case void 0:
                return 1;
              case null:
                return 2;
              case true:
                return 3;
              case false:
                return 4;
              default:
                return V.xb({ Bb: 1, value: a });
            }
          };
          function Ob(a) {
            return this.fromWireType(w()[a >> 2]);
          }
          function Pb(a, b) {
            switch (b) {
              case 2:
                return function(c) {
                  var d = this.fromWireType;
                  m.buffer != n.buffer && p();
                  return d.call(this, za[c >> 2]);
                };
              case 3:
                return function(c) {
                  return this.fromWireType(ha()[c >> 3]);
                };
              default:
                throw new TypeError("Unknown float type: " + a);
            }
          }
          var Qb = "undefined" != typeof TextDecoder ? new TextDecoder("utf-16le") : void 0, Rb = (a, b) => {
            var c = a >> 1;
            for (var d = c + b / 2; !(c >= d) && ca()[c]; )
              ++c;
            c <<= 1;
            if (32 < c - a && Qb)
              return Qb.decode(t().slice(a, c));
            c = "";
            for (d = 0; !(d >= b / 2); ++d) {
              var f = v()[a + 2 * d >> 1];
              if (0 == f)
                break;
              c += String.fromCharCode(f);
            }
            return c;
          }, Sb = (a, b, c) => {
            void 0 === c && (c = 2147483647);
            if (2 > c)
              return 0;
            c -= 2;
            var d = b;
            c = c < 2 * a.length ? c / 2 : a.length;
            for (var f = 0; f < c; ++f) {
              var g = a.charCodeAt(f);
              v()[b >> 1] = g;
              b += 2;
            }
            v()[b >> 1] = 0;
            return b - d;
          }, Tb = (a) => 2 * a.length, Ub = (a, b) => {
            for (var c = 0, d = ""; !(c >= b / 4); ) {
              var f = w()[a + 4 * c >> 2];
              if (0 == f)
                break;
              ++c;
              65536 <= f ? (f -= 65536, d += String.fromCharCode(55296 | f >> 10, 56320 | f & 1023)) : d += String.fromCharCode(f);
            }
            return d;
          }, Vb = (a, b, c) => {
            void 0 === c && (c = 2147483647);
            if (4 > c)
              return 0;
            var d = b;
            c = d + c - 4;
            for (var f = 0; f < a.length; ++f) {
              var g = a.charCodeAt(f);
              if (55296 <= g && 57343 >= g) {
                var k = a.charCodeAt(++f);
                g = 65536 + ((g & 1023) << 10) | k & 1023;
              }
              w()[b >> 2] = g;
              b += 4;
              if (b + 4 > c)
                break;
            }
            w()[b >> 2] = 0;
            return b - d;
          }, Wb = (a) => {
            for (var b = 0, c = 0; c < a.length; ++c) {
              var d = a.charCodeAt(c);
              55296 <= d && 57343 >= d && ++c;
              b += 4;
            }
            return b;
          }, Xb = (a) => {
            if (!ya)
              try {
                if (a(), !Ha())
                  try {
                    F ? hb(K) : $a(K);
                  } catch (b) {
                    b instanceof Ra || "unwind" == b || C(1, b);
                  }
              } catch (b) {
                b instanceof Ra || "unwind" == b || C(1, b);
              }
          };
          function Yb(a) {
            "function" === typeof Atomics.Yb && (Atomics.Yb(w(), a >> 2, a).value.then(cb), a += 128, Atomics.store(w(), a >> 2, 1));
          }
          A.__emscripten_thread_mailbox_await = Yb;
          function cb() {
            var a = bb();
            a && (Yb(a), Xb(() => Zb()));
          }
          A.checkMailbox = cb;
          function $b(a, b) {
            var c = Gb[a];
            if (void 0 === c) {
              a = ac(a);
              var d = S(a);
              Y(a);
              T(b + " has unknown type " + d);
            }
            return c;
          }
          var bc = {};
          function cc(a) {
            var b = bc[a];
            return void 0 === b ? S(a) : b;
          }
          var dc = [];
          function ec() {
            return "object" == typeof globalThis ? globalThis : Function("return this")();
          }
          function fc(a) {
            var b = dc.length;
            dc.push(a);
            return b;
          }
          function gc(a, b) {
            for (var c = Array(a), d = 0; d < a; ++d)
              c[d] = $b(z()[b + 4 * d >> 2], "parameter " + d);
            return c;
          }
          function hc(a) {
            if (void 0 === a)
              return "_unknown";
            a = a.replace(/[^a-zA-Z0-9_]/g, "$");
            var b = a.charCodeAt(0);
            return 48 <= b && 57 >= b ? `_${a}` : a;
          }
          var ic = [];
          function jc(a, b) {
            a = hc(a);
            return { [a]: function() {
              return b.apply(this, arguments);
            } }[a];
          }
          function kc(a) {
            var b = Function;
            if (!(b instanceof Function))
              throw new TypeError(`new_ called with constructor type ${typeof b} which is not a function`);
            var c = jc(b.name || "unknownFunctionName", function() {
            });
            c.prototype = b.prototype;
            c = new c();
            a = b.apply(c, a);
            return a instanceof Object ? a : c;
          }
          function lc(a) {
            for (var b = "", c = 0; c < a; ++c)
              b += (0 !== c ? ", " : "") + "arg" + c;
            var d = "return function emval_allocator_" + a + "(constructor, argTypes, args) {\n  var HEAPU32 = getMemory();\n";
            for (c = 0; c < a; ++c)
              d += "var argType" + c + " = requireRegisteredType(HEAPU32[((argTypes)>>2)], 'parameter " + c + "');\nvar arg" + c + " = argType" + c + ".readValueFromPointer(args);\nargs += argType" + c + "['argPackAdvance'];\nargTypes += 4;\n";
            return new Function("requireRegisteredType", "Module", "valueToHandle", "getMemory", d + ("var obj = new constructor(" + b + ");\nreturn valueToHandle(obj);\n}\n"))($b, A, X, () => z());
          }
          var mc = {};
          function nc(a) {
            return -9007199254740992 > a || 9007199254740992 < a ? NaN : Number(a);
          }
          var Z = (a) => 0 === a % 4 && (0 !== a % 100 || 0 === a % 400), oc = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335], pc = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];
          function rc(a, b, c, d, f, g, k) {
            return F ? Q(17, 1, a, b, c, d, f, g, k) : -52;
          }
          function sc(a, b, c, d, f, g) {
            if (F)
              return Q(18, 1, a, b, c, d, f, g);
          }
          var uc = (a) => {
            var b = pb(a) + 1, c = tc(b);
            c && rb(a, c, b);
            return c;
          }, wc = (a) => {
            var b = vc();
            a = a();
            fb(b);
            return a;
          };
          function Q(a, b) {
            var c = arguments.length - 2, d = arguments;
            return wc(() => {
              for (var f = 2 * c, g = xc(8 * f), k = g >> 3, l = 0; l < c; l++) {
                var q = d[2 + l];
                "bigint" == typeof q ? (L[k + 2 * l] = 1n, L[k + 2 * l + 1] = q) : (L[k + 2 * l] = 0n, ha()[k + 2 * l + 1] = q);
              }
              return yc(a, f, g, b);
            });
          }
          var zc = [], Ac = {}, Cc = () => {
            if (!Bc) {
              var a = { USER: "web_user", LOGNAME: "web_user", PATH: "/", PWD: "/", HOME: "/home/web_user", LANG: ("object" == typeof navigator && navigator.languages && navigator.languages[0] || "C").replace("-", "_") + ".UTF-8", _: ma || "./this.program" }, b;
              for (b in Ac)
                void 0 === Ac[b] ? delete a[b] : a[b] = Ac[b];
              var c = [];
              for (b in a)
                c.push(`${b}=${a[b]}`);
              Bc = c;
            }
            return Bc;
          }, Bc;
          function Dc(a, b) {
            if (F)
              return Q(19, 1, a, b);
            var c = 0;
            Cc().forEach(function(d, f) {
              var g = b + c;
              f = z()[a + 4 * f >> 2] = g;
              for (g = 0; g < d.length; ++g)
                e()[f++ >> 0] = d.charCodeAt(g);
              e()[f >> 0] = 0;
              c += d.length + 1;
            });
            return 0;
          }
          function Ec(a, b) {
            if (F)
              return Q(20, 1, a, b);
            var c = Cc();
            z()[a >> 2] = c.length;
            var d = 0;
            c.forEach(function(f) {
              d += f.length + 1;
            });
            z()[b >> 2] = d;
            return 0;
          }
          function Fc(a) {
            return F ? Q(21, 1, a) : 52;
          }
          function Gc(a, b, c, d) {
            return F ? Q(22, 1, a, b, c, d) : 52;
          }
          function Hc(a, b, c, d) {
            return F ? Q(23, 1, a, b, c, d) : 70;
          }
          var Ic = [null, [], []];
          function Jc(a, b, c, d) {
            if (F)
              return Q(24, 1, a, b, c, d);
            for (var f = 0, g = 0; g < c; g++) {
              var k = z()[b >> 2], l = z()[b + 4 >> 2];
              b += 8;
              for (var q = 0; q < l; q++) {
                var r = t()[k + q], x = Ic[a];
                0 === r || 10 === r ? ((1 === a ? va : H)(Wa(x, 0)), x.length = 0) : x.push(r);
              }
              f += l;
            }
            z()[d >> 2] = f;
            return 0;
          }
          var Kc = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], Lc = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
          function Mc(a) {
            var b = Array(pb(a) + 1);
            qb(a, b, 0, b.length);
            return b;
          }
          var Nc = (a, b) => {
            e().set(a, b);
          }, Oc = (a, b, c, d) => {
            function f(h, u, y) {
              for (h = "number" == typeof h ? h.toString() : h || ""; h.length < u; )
                h = y[0] + h;
              return h;
            }
            function g(h, u) {
              return f(h, u, "0");
            }
            function k(h, u) {
              function y(qc) {
                return 0 > qc ? -1 : 0 < qc ? 1 : 0;
              }
              var R;
              0 === (R = y(h.getFullYear() - u.getFullYear())) && 0 === (R = y(h.getMonth() - u.getMonth())) && (R = y(h.getDate() - u.getDate()));
              return R;
            }
            function l(h) {
              switch (h.getDay()) {
                case 0:
                  return new Date(h.getFullYear() - 1, 11, 29);
                case 1:
                  return h;
                case 2:
                  return new Date(h.getFullYear(), 0, 3);
                case 3:
                  return new Date(
                    h.getFullYear(),
                    0,
                    2
                  );
                case 4:
                  return new Date(h.getFullYear(), 0, 1);
                case 5:
                  return new Date(h.getFullYear() - 1, 11, 31);
                case 6:
                  return new Date(h.getFullYear() - 1, 11, 30);
              }
            }
            function q(h) {
              var u = h.pb;
              for (h = new Date(new Date(h.qb + 1900, 0, 1).getTime()); 0 < u; ) {
                var y = h.getMonth(), R = (Z(h.getFullYear()) ? Kc : Lc)[y];
                if (u > R - h.getDate())
                  u -= R - h.getDate() + 1, h.setDate(1), 11 > y ? h.setMonth(y + 1) : (h.setMonth(0), h.setFullYear(h.getFullYear() + 1));
                else {
                  h.setDate(h.getDate() + u);
                  break;
                }
              }
              y = new Date(h.getFullYear() + 1, 0, 4);
              u = l(new Date(
                h.getFullYear(),
                0,
                4
              ));
              y = l(y);
              return 0 >= k(u, h) ? 0 >= k(y, h) ? h.getFullYear() + 1 : h.getFullYear() : h.getFullYear() - 1;
            }
            var r = w()[d + 40 >> 2];
            d = { Vb: w()[d >> 2], Ub: w()[d + 4 >> 2], ub: w()[d + 8 >> 2], zb: w()[d + 12 >> 2], vb: w()[d + 16 >> 2], qb: w()[d + 20 >> 2], lb: w()[d + 24 >> 2], pb: w()[d + 28 >> 2], cc: w()[d + 32 >> 2], Tb: w()[d + 36 >> 2], Wb: r ? Xa(r) : "" };
            c = Xa(c);
            r = {
              "%c": "%a %b %d %H:%M:%S %Y",
              "%D": "%m/%d/%y",
              "%F": "%Y-%m-%d",
              "%h": "%b",
              "%r": "%I:%M:%S %p",
              "%R": "%H:%M",
              "%T": "%H:%M:%S",
              "%x": "%m/%d/%y",
              "%X": "%H:%M:%S",
              "%Ec": "%c",
              "%EC": "%C",
              "%Ex": "%m/%d/%y",
              "%EX": "%H:%M:%S",
              "%Ey": "%y",
              "%EY": "%Y",
              "%Od": "%d",
              "%Oe": "%e",
              "%OH": "%H",
              "%OI": "%I",
              "%Om": "%m",
              "%OM": "%M",
              "%OS": "%S",
              "%Ou": "%u",
              "%OU": "%U",
              "%OV": "%V",
              "%Ow": "%w",
              "%OW": "%W",
              "%Oy": "%y"
            };
            for (var x in r)
              c = c.replace(new RegExp(x, "g"), r[x]);
            var B = "Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "), N = "January February March April May June July August September October November December".split(" ");
            r = { "%a": (h) => B[h.lb].substring(0, 3), "%A": (h) => B[h.lb], "%b": (h) => N[h.vb].substring(0, 3), "%B": (h) => N[h.vb], "%C": (h) => g((h.qb + 1900) / 100 | 0, 2), "%d": (h) => g(h.zb, 2), "%e": (h) => f(h.zb, 2, " "), "%g": (h) => q(h).toString().substring(2), "%G": (h) => q(h), "%H": (h) => g(h.ub, 2), "%I": (h) => {
              h = h.ub;
              0 == h ? h = 12 : 12 < h && (h -= 12);
              return g(h, 2);
            }, "%j": (h) => {
              for (var u = 0, y = 0; y <= h.vb - 1; u += (Z(h.qb + 1900) ? Kc : Lc)[y++])
                ;
              return g(h.zb + u, 3);
            }, "%m": (h) => g(h.vb + 1, 2), "%M": (h) => g(h.Ub, 2), "%n": () => "\n", "%p": (h) => 0 <= h.ub && 12 > h.ub ? "AM" : "PM", "%S": (h) => g(h.Vb, 2), "%t": () => "	", "%u": (h) => h.lb || 7, "%U": (h) => g(Math.floor((h.pb + 7 - h.lb) / 7), 2), "%V": (h) => {
              var u = Math.floor((h.pb + 7 - (h.lb + 6) % 7) / 7);
              2 >= (h.lb + 371 - h.pb - 2) % 7 && u++;
              if (u)
                53 == u && (y = (h.lb + 371 - h.pb) % 7, 4 == y || 3 == y && Z(h.qb) || (u = 1));
              else {
                u = 52;
                var y = (h.lb + 7 - h.pb - 1) % 7;
                (4 == y || 5 == y && Z(h.qb % 400 - 1)) && u++;
              }
              return g(u, 2);
            }, "%w": (h) => h.lb, "%W": (h) => g(Math.floor((h.pb + 7 - (h.lb + 6) % 7) / 7), 2), "%y": (h) => (h.qb + 1900).toString().substring(2), "%Y": (h) => h.qb + 1900, "%z": (h) => {
              h = h.Tb;
              var u = 0 <= h;
              h = Math.abs(h) / 60;
              return (u ? "+" : "-") + String("0000" + (h / 60 * 100 + h % 60)).slice(-4);
            }, "%Z": (h) => h.Wb, "%%": () => "%" };
            c = c.replace(/%%/g, "\0\0");
            for (x in r)
              c.includes(x) && (c = c.replace(new RegExp(x, "g"), r[x](d)));
            c = c.replace(/\0\0/g, "%");
            x = Mc(c);
            if (x.length > b)
              return 0;
            Nc(x, a);
            return x.length - 1;
          };
          P.wb();
          for (var Pc = Array(256), Qc = 0; 256 > Qc; ++Qc)
            Pc[Qc] = String.fromCharCode(Qc);
          Eb = Pc;
          Ib = A.BindingError = class extends Error {
            constructor(a) {
              super(a);
              this.name = "BindingError";
            }
          };
          A.InternalError = class extends Error {
            constructor(a) {
              super(a);
              this.name = "InternalError";
            }
          };
          Object.assign(Mb.prototype, { get(a) {
            return this.mb[a];
          }, has(a) {
            return void 0 !== this.mb[a];
          }, xb(a) {
            var b = this.Ab.pop() || this.mb.length;
            this.mb[b] = a;
            return b;
          }, yb(a) {
            this.mb[a] = void 0;
            this.Ab.push(a);
          } });
          V.mb.push({ value: void 0 }, { value: null }, { value: true }, { value: false });
          V.tb = V.mb.length;
          A.count_emval_handles = function() {
            for (var a = 0, b = V.tb; b < V.mb.length; ++b)
              void 0 !== V.mb[b] && ++a;
            return a;
          };
          var Rc = [null, Ya, Za, lb, nb, ob, sb, tb, ub, vb, wb, xb, yb, zb, Ab, Bb, Cb, rc, sc, Dc, Ec, Fc, Gc, Hc, Jc], Tc = {
            b: function(a, b, c) {
              new ib(a).wb(b, c);
              jb = a;
              kb++;
              throw jb;
            },
            fa: function(a) {
              Sc(a, !D, 1, !na, 131072, false);
              P.Db();
            },
            D: function(a) {
              F ? postMessage({ cmd: "cleanupThread", thread: a }) : Ta(a);
            },
            W: mb,
            y: nb,
            la: ob,
            S: sb,
            U: tb,
            L: ub,
            ja: vb,
            aa: wb,
            ia: xb,
            F: yb,
            T: zb,
            Q: Ab,
            ka: Bb,
            R: Cb,
            I: function(a, b, c, d, f) {
              b = S(b);
              c = Lb(c);
              var g = -1 != b.indexOf("u");
              g && (f = (1n << 64n) - 1n);
              U(a, { name: b, fromWireType: function(k) {
                return k;
              }, toWireType: function(k, l) {
                if ("bigint" != typeof l && "number" != typeof l)
                  throw new TypeError(`Cannot convert "${Db(l)}" to ${this.name}`);
                if (l < d || l > f)
                  throw new TypeError(`Passing a number "${Db(l)}" from JS side to C/C++ side to an argument of type "${b}", which is outside the valid range [${d}, ${f}]!`);
                return l;
              }, argPackAdvance: 8, readValueFromPointer: Kb(b, c, !g), sb: null });
            },
            ra: function(a, b, c, d, f) {
              var g = Lb(c);
              b = S(b);
              U(a, { name: b, fromWireType: function(k) {
                return !!k;
              }, toWireType: function(k, l) {
                return l ? d : f;
              }, argPackAdvance: 8, readValueFromPointer: function(k) {
                if (1 === c)
                  var l = e();
                else if (2 === c)
                  l = v();
                else if (4 === c)
                  l = w();
                else
                  throw new TypeError("Unknown boolean type size: " + b);
                return this.fromWireType(l[k >> g]);
              }, sb: null });
            },
            qa: function(a, b) {
              b = S(b);
              U(a, { name: b, fromWireType: function(c) {
                var d = W(c);
                Nb(c);
                return d;
              }, toWireType: function(c, d) {
                return X(d);
              }, argPackAdvance: 8, readValueFromPointer: Ob, sb: null });
            },
            H: function(a, b, c) {
              c = Lb(c);
              b = S(b);
              U(a, { name: b, fromWireType: function(d) {
                return d;
              }, toWireType: function(d, f) {
                return f;
              }, argPackAdvance: 8, readValueFromPointer: Pb(b, c), sb: null });
            },
            t: function(a, b, c, d, f) {
              b = S(b);
              -1 === f && (f = 4294967295);
              f = Lb(c);
              var g = (l) => l;
              if (0 === d) {
                var k = 32 - 8 * c;
                g = (l) => l << k >>> k;
              }
              c = b.includes("unsigned") ? function(l, q) {
                return q >>> 0;
              } : function(l, q) {
                return q;
              };
              U(a, { name: b, fromWireType: g, toWireType: c, argPackAdvance: 8, readValueFromPointer: Kb(b, f, 0 !== d), sb: null });
            },
            m: function(a, b, c) {
              function d(g) {
                g >>= 2;
                var k = z();
                return new f(k.buffer, k[g + 1], k[g]);
              }
              var f = [Int8Array, Uint8Array, Int16Array, Uint16Array, Int32Array, Uint32Array, Float32Array, Float64Array, BigInt64Array, BigUint64Array][b];
              c = S(c);
              U(a, { name: c, fromWireType: d, argPackAdvance: 8, readValueFromPointer: d }, { Ib: true });
            },
            J: function(a, b) {
              b = S(b);
              var c = "std::string" === b;
              U(a, { name: b, fromWireType: function(d) {
                var f = z()[d >> 2], g = d + 4;
                if (c)
                  for (var k = g, l = 0; l <= f; ++l) {
                    var q = g + l;
                    if (l == f || 0 == t()[q]) {
                      k = Xa(k, q - k);
                      if (void 0 === r)
                        var r = k;
                      else
                        r += String.fromCharCode(0), r += k;
                      k = q + 1;
                    }
                  }
                else {
                  r = Array(f);
                  for (l = 0; l < f; ++l)
                    r[l] = String.fromCharCode(t()[g + l]);
                  r = r.join("");
                }
                Y(d);
                return r;
              }, toWireType: function(d, f) {
                f instanceof ArrayBuffer && (f = new Uint8Array(f));
                var g = "string" == typeof f;
                g || f instanceof Uint8Array || f instanceof Uint8ClampedArray || f instanceof Int8Array || T("Cannot pass non-string to std::string");
                var k = c && g ? pb(f) : f.length;
                var l = tc(4 + k + 1), q = l + 4;
                z()[l >> 2] = k;
                if (c && g)
                  rb(f, q, k + 1);
                else if (g)
                  for (g = 0; g < k; ++g) {
                    var r = f.charCodeAt(g);
                    255 < r && (Y(q), T("String has UTF-16 code units that do not fit in 8 bits"));
                    t()[q + g] = r;
                  }
                else
                  for (g = 0; g < k; ++g)
                    t()[q + g] = f[g];
                null !== d && d.push(Y, l);
                return l;
              }, argPackAdvance: 8, readValueFromPointer: Ob, sb: function(d) {
                Y(d);
              } });
            },
            A: function(a, b, c) {
              c = S(c);
              if (2 === b) {
                var d = Rb;
                var f = Sb;
                var g = Tb;
                var k = () => ca();
                var l = 1;
              } else
                4 === b && (d = Ub, f = Vb, g = Wb, k = () => z(), l = 2);
              U(a, {
                name: c,
                fromWireType: function(q) {
                  for (var r = z()[q >> 2], x = k(), B, N = q + 4, h = 0; h <= r; ++h) {
                    var u = q + 4 + h * b;
                    if (h == r || 0 == x[u >> l])
                      N = d(N, u - N), void 0 === B ? B = N : (B += String.fromCharCode(0), B += N), N = u + b;
                  }
                  Y(q);
                  return B;
                },
                toWireType: function(q, r) {
                  "string" != typeof r && T(`Cannot pass non-string to C++ string type ${c}`);
                  var x = g(r), B = tc(4 + x + b);
                  z()[B >> 2] = x >> l;
                  f(r, B + 4, x + b);
                  null !== q && q.push(Y, B);
                  return B;
                },
                argPackAdvance: 8,
                readValueFromPointer: Ob,
                sb: function(q) {
                  Y(q);
                }
              });
            },
            sa: function(a, b) {
              b = S(b);
              U(a, { Lb: true, name: b, argPackAdvance: 0, fromWireType: function() {
              }, toWireType: function() {
              } });
            },
            oa: () => true,
            O: function(a, b) {
              a == b ? setTimeout(() => cb()) : F ? postMessage({ targetThread: a, cmd: "checkMailbox" }) : (a = P.kb[a]) && a.postMessage({ cmd: "checkMailbox" });
            },
            da: function() {
              return -1;
            },
            ea: Yb,
            na: function(a) {
              E && P.kb[a].ref();
            },
            s: function(a, b, c) {
              a = W(a);
              b = $b(b, "emval::as");
              var d = [], f = X(d);
              z()[c >> 2] = f;
              return b.toWireType(d, a);
            },
            i: function(a, b, c, d, f) {
              a = dc[a];
              b = W(b);
              c = cc(c);
              var g = [];
              z()[d >> 2] = X(g);
              return a(b, c, g, f);
            },
            u: function(a, b, c, d) {
              a = dc[a];
              b = W(b);
              c = cc(c);
              a(b, c, null, d);
            },
            c: Nb,
            K: function(a, b) {
              a = W(a);
              b = W(b);
              return a == b;
            },
            o: function(a) {
              if (0 === a)
                return X(ec());
              a = cc(a);
              return X(ec()[a]);
            },
            h: function(a, b) {
              var c = gc(a, b), d = c[0];
              b = d.name + "_$" + c.slice(1).map(function(x) {
                return x.name;
              }).join("_") + "$";
              var f = ic[b];
              if (void 0 !== f)
                return f;
              f = ["retType"];
              for (var g = [d], k = "", l = 0; l < a - 1; ++l)
                k += (0 !== l ? ", " : "") + "arg" + l, f.push("argType" + l), g.push(c[1 + l]);
              var q = "return function " + hc("methodCaller_" + b) + "(handle, name, destructors, args) {\n", r = 0;
              for (l = 0; l < a - 1; ++l)
                q += "    var arg" + l + " = argType" + l + ".readValueFromPointer(args" + (r ? "+" + r : "") + ");\n", r += c[l + 1].argPackAdvance;
              q += "    var rv = handle[name](" + k + ");\n";
              for (l = 0; l < a - 1; ++l)
                c[l + 1].deleteObject && (q += "    argType" + l + ".deleteObject(arg" + l + ");\n");
              d.Lb || (q += "    return retType.toWireType(destructors, rv);\n");
              f.push(q + "};\n");
              a = kc(f).apply(null, g);
              f = fc(a);
              return ic[b] = f;
            },
            r: function(a, b) {
              a = W(a);
              b = W(b);
              return X(a[b]);
            },
            d: function(a) {
              4 < a && (V.get(a).Bb += 1);
            },
            x: function(a, b, c, d) {
              a = W(a);
              var f = mc[b];
              f || (f = lc(b), mc[b] = f);
              return f(a, c, d);
            },
            v: function() {
              return X([]);
            },
            l: function(a) {
              a = W(a);
              for (var b = Array(a.length), c = 0; c < a.length; c++)
                b[c] = a[c];
              return X(b);
            },
            e: function(a) {
              return X(cc(a));
            },
            k: function() {
              return X({});
            },
            g: function(a) {
              for (var b = W(a); b.length; ) {
                var c = b.pop();
                b.pop()(c);
              }
              Nb(a);
            },
            j: function(a, b, c) {
              a = W(a);
              b = W(b);
              c = W(c);
              a[b] = c;
            },
            f: function(a, b) {
              a = $b(a, "_emval_take_value");
              a = a.readValueFromPointer(b);
              return X(a);
            },
            Z: function(a, b) {
              a = nc(a);
              b = nc(b);
              a = new Date(1e3 * a);
              w()[b >> 2] = a.getUTCSeconds();
              w()[b + 4 >> 2] = a.getUTCMinutes();
              w()[b + 8 >> 2] = a.getUTCHours();
              w()[b + 12 >> 2] = a.getUTCDate();
              w()[b + 16 >> 2] = a.getUTCMonth();
              w()[b + 20 >> 2] = a.getUTCFullYear() - 1900;
              w()[b + 24 >> 2] = a.getUTCDay();
              a = (a.getTime() - Date.UTC(a.getUTCFullYear(), 0, 1, 0, 0, 0, 0)) / 864e5 | 0;
              w()[b + 28 >> 2] = a;
            },
            _: function(a, b) {
              a = nc(a);
              b = nc(b);
              a = new Date(1e3 * a);
              w()[b >> 2] = a.getSeconds();
              w()[b + 4 >> 2] = a.getMinutes();
              w()[b + 8 >> 2] = a.getHours();
              w()[b + 12 >> 2] = a.getDate();
              w()[b + 16 >> 2] = a.getMonth();
              w()[b + 20 >> 2] = a.getFullYear() - 1900;
              w()[b + 24 >> 2] = a.getDay();
              var c = (Z(a.getFullYear()) ? oc : pc)[a.getMonth()] + a.getDate() - 1 | 0;
              w()[b + 28 >> 2] = c;
              w()[b + 36 >> 2] = -(60 * a.getTimezoneOffset());
              c = new Date(a.getFullYear(), 6, 1).getTimezoneOffset();
              var d = new Date(a.getFullYear(), 0, 1).getTimezoneOffset();
              a = (c != d && a.getTimezoneOffset() == Math.min(d, c)) | 0;
              w()[b + 32 >> 2] = a;
            },
            $: function(a) {
              a = nc(a);
              var b = new Date(w()[a + 20 >> 2] + 1900, w()[a + 16 >> 2], w()[a + 12 >> 2], w()[a + 8 >> 2], w()[a + 4 >> 2], w()[a >> 2], 0), c = w()[a + 32 >> 2], d = b.getTimezoneOffset(), f = new Date(
                b.getFullYear(),
                6,
                1
              ).getTimezoneOffset(), g = new Date(b.getFullYear(), 0, 1).getTimezoneOffset(), k = Math.min(g, f);
              0 > c ? w()[a + 32 >> 2] = Number(f != g && k == d) : 0 < c != (k == d) && (f = Math.max(g, f), b.setTime(b.getTime() + 6e4 * ((0 < c ? k : f) - d)));
              w()[a + 24 >> 2] = b.getDay();
              c = (Z(b.getFullYear()) ? oc : pc)[b.getMonth()] + b.getDate() - 1 | 0;
              w()[a + 28 >> 2] = c;
              w()[a >> 2] = b.getSeconds();
              w()[a + 4 >> 2] = b.getMinutes();
              w()[a + 8 >> 2] = b.getHours();
              w()[a + 12 >> 2] = b.getDate();
              w()[a + 16 >> 2] = b.getMonth();
              w()[a + 20 >> 2] = b.getYear();
              return BigInt(b.getTime() / 1e3);
            },
            X: rc,
            Y: sc,
            N: (a, b, c) => {
              function d(r) {
                return (r = r.toTimeString().match(/\(([A-Za-z ]+)\)$/)) ? r[1] : "GMT";
              }
              var f = (/* @__PURE__ */ new Date()).getFullYear(), g = new Date(f, 0, 1), k = new Date(f, 6, 1);
              f = g.getTimezoneOffset();
              var l = k.getTimezoneOffset(), q = Math.max(f, l);
              z()[a >> 2] = 60 * q;
              w()[b >> 2] = Number(f != l);
              a = d(g);
              b = d(k);
              a = uc(a);
              b = uc(b);
              l < f ? (z()[c >> 2] = a, z()[c + 4 >> 2] = b) : (z()[c >> 2] = b, z()[c + 4 >> 2] = a);
            },
            n: () => {
              wa("");
            },
            E: function() {
            },
            G: function() {
              return Date.now();
            },
            ma: () => {
              Ga += 1;
              throw "unwind";
            },
            P: () => 2147483648,
            q: () => performance.timeOrigin + performance.now(),
            w: function() {
              return E ? (init_os(), __toCommonJS(os_exports)).cpus().length : navigator.hardwareConcurrency;
            },
            ca: function(a, b, c, d) {
              P.$b = b;
              c /= 2;
              zc.length = c;
              b = d >> 3;
              for (d = 0; d < c; d++)
                zc[d] = L[b + 2 * d] ? L[b + 2 * d + 1] : ha()[b + 2 * d + 1];
              return Rc[a].apply(null, zc);
            },
            M: (a) => {
              var b = t().length;
              a >>>= 0;
              if (a <= b || 2147483648 < a)
                return false;
              for (var c = 1; 4 >= c; c *= 2) {
                var d = b * (1 + 0.2 / c);
                d = Math.min(d, a + 100663296);
                var f = Math;
                d = Math.max(a, d);
                a: {
                  f = f.min.call(f, 2147483648, d + (65536 - d % 65536) % 65536) - m.buffer.byteLength + 65535 >>> 16;
                  try {
                    m.grow(f);
                    p();
                    var g = 1;
                    break a;
                  } catch (k) {
                  }
                  g = void 0;
                }
                if (g)
                  return true;
              }
              return false;
            },
            ga: Dc,
            ha: Ec,
            V: $a,
            z: Fc,
            C: Gc,
            ba: Hc,
            B: Jc,
            a: m || A.wasmMemory,
            pa: Oc,
            p: (a, b, c, d) => Oc(a, b, c, d)
          };
          (function() {
            function a(c, d) {
              J = c = c.exports;
              P.Eb.push(J.Ya);
              Ca = J.$a;
              Ea.unshift(J.ta);
              xa = d;
              La();
              return c;
            }
            var b = { a: Tc };
            Ka();
            if (A.instantiateWasm)
              try {
                return A.instantiateWasm(b, a);
              } catch (c) {
                H("Module.instantiateWasm callback failed with error: " + c), ka(c);
              }
            Qa(b, function(c) {
              a(c.instance, c.module);
            }).catch(ka);
            return {};
          })();
          A._OrtInit = (a, b) => (A._OrtInit = J.ua)(a, b);
          A._OrtGetLastError = (a, b) => (A._OrtGetLastError = J.va)(a, b);
          A._OrtCreateSessionOptions = (a, b, c, d, f, g, k, l, q, r) => (A._OrtCreateSessionOptions = J.wa)(a, b, c, d, f, g, k, l, q, r);
          A._OrtAppendExecutionProvider = (a, b) => (A._OrtAppendExecutionProvider = J.xa)(a, b);
          A._OrtAddFreeDimensionOverride = (a, b, c) => (A._OrtAddFreeDimensionOverride = J.ya)(a, b, c);
          A._OrtAddSessionConfigEntry = (a, b, c) => (A._OrtAddSessionConfigEntry = J.za)(a, b, c);
          A._OrtReleaseSessionOptions = (a) => (A._OrtReleaseSessionOptions = J.Aa)(a);
          A._OrtCreateSession = (a, b, c) => (A._OrtCreateSession = J.Ba)(a, b, c);
          A._OrtReleaseSession = (a) => (A._OrtReleaseSession = J.Ca)(a);
          A._OrtGetInputOutputCount = (a, b, c) => (A._OrtGetInputOutputCount = J.Da)(a, b, c);
          A._OrtGetInputName = (a, b) => (A._OrtGetInputName = J.Ea)(a, b);
          A._OrtGetOutputName = (a, b) => (A._OrtGetOutputName = J.Fa)(a, b);
          A._OrtFree = (a) => (A._OrtFree = J.Ga)(a);
          A._OrtCreateTensor = (a, b, c, d, f, g) => (A._OrtCreateTensor = J.Ha)(a, b, c, d, f, g);
          A._OrtGetTensorData = (a, b, c, d, f) => (A._OrtGetTensorData = J.Ia)(a, b, c, d, f);
          A._OrtReleaseTensor = (a) => (A._OrtReleaseTensor = J.Ja)(a);
          A._OrtCreateRunOptions = (a, b, c, d) => (A._OrtCreateRunOptions = J.Ka)(a, b, c, d);
          A._OrtAddRunConfigEntry = (a, b, c) => (A._OrtAddRunConfigEntry = J.La)(a, b, c);
          A._OrtReleaseRunOptions = (a) => (A._OrtReleaseRunOptions = J.Ma)(a);
          A._OrtCreateBinding = (a) => (A._OrtCreateBinding = J.Na)(a);
          A._OrtBindInput = (a, b, c) => (A._OrtBindInput = J.Oa)(a, b, c);
          A._OrtBindOutput = (a, b, c, d) => (A._OrtBindOutput = J.Pa)(a, b, c, d);
          A._OrtClearBoundOutputs = (a) => (A._OrtClearBoundOutputs = J.Qa)(a);
          A._OrtReleaseBinding = (a) => (A._OrtReleaseBinding = J.Ra)(a);
          A._OrtRunWithBinding = (a, b, c, d, f) => (A._OrtRunWithBinding = J.Sa)(a, b, c, d, f);
          A._OrtRun = (a, b, c, d, f, g, k, l) => (A._OrtRun = J.Ta)(a, b, c, d, f, g, k, l);
          A._OrtEndProfiling = (a) => (A._OrtEndProfiling = J.Ua)(a);
          var bb = A._pthread_self = () => (bb = A._pthread_self = J.Va)(), tc = A._malloc = (a) => (tc = A._malloc = J.Wa)(a), Y = A._free = (a) => (Y = A._free = J.Xa)(a);
          A.__emscripten_tls_init = () => (A.__emscripten_tls_init = J.Ya)();
          var ac = (a) => (ac = J.Za)(a);
          A.__embind_initialize_bindings = () => (A.__embind_initialize_bindings = J._a)();
          var Sc = A.__emscripten_thread_init = (a, b, c, d, f, g) => (Sc = A.__emscripten_thread_init = J.ab)(a, b, c, d, f, g);
          A.__emscripten_thread_crashed = () => (A.__emscripten_thread_crashed = J.bb)();
          var yc = (a, b, c, d) => (yc = J.cb)(a, b, c, d), ab = (a) => (ab = J.db)(a), hb = A.__emscripten_thread_exit = (a) => (hb = A.__emscripten_thread_exit = J.eb)(a), Zb = A.__emscripten_check_mailbox = () => (Zb = A.__emscripten_check_mailbox = J.fb)(), eb = (a, b) => (eb = J.gb)(a, b), vc = () => (vc = J.hb)(), fb = (a) => (fb = J.ib)(a), xc = (a) => (xc = J.jb)(a);
          A.keepRuntimeAlive = Ha;
          A.wasmMemory = m;
          A.stackAlloc = xc;
          A.stackSave = vc;
          A.stackRestore = fb;
          A.UTF8ToString = Xa;
          A.stringToUTF8 = rb;
          A.lengthBytesUTF8 = pb;
          A.ExitStatus = Ra;
          A.PThread = P;
          var Uc;
          Ja = function Vc() {
            Uc || Wc();
            Uc || (Ja = Vc);
          };
          function Wc() {
            function a() {
              if (!Uc && (Uc = true, A.calledRun = true, !ya)) {
                F || db(Ea);
                ja(A);
                if (A.onRuntimeInitialized)
                  A.onRuntimeInitialized();
                if (!F) {
                  if (A.postRun)
                    for ("function" == typeof A.postRun && (A.postRun = [A.postRun]); A.postRun.length; ) {
                      var b = A.postRun.shift();
                      Fa.unshift(b);
                    }
                  db(Fa);
                }
              }
            }
            if (!(0 < M))
              if (F)
                ja(A), F || db(Ea), startWorker(A);
              else {
                if (A.preRun)
                  for ("function" == typeof A.preRun && (A.preRun = [A.preRun]); A.preRun.length; )
                    Da.unshift(A.preRun.shift());
                db(Da);
                0 < M || (A.setStatus ? (A.setStatus("Running..."), setTimeout(function() {
                  setTimeout(
                    function() {
                      A.setStatus("");
                    },
                    1
                  );
                  a();
                }, 1)) : a());
              }
          }
          if (A.preInit)
            for ("function" == typeof A.preInit && (A.preInit = [A.preInit]); 0 < A.preInit.length; )
              A.preInit.pop()();
          Wc();
          return moduleArg.ready;
        };
      })();
      if (typeof exports === "object" && typeof module === "object")
        module.exports = ortWasmThreaded;
      else if (typeof define === "function" && define["amd"])
        define([], () => ortWasmThreaded);
    }
  });

  // web/lib/wasm/binding/ort-wasm-threaded.worker.js
  var require_ort_wasm_threaded_worker = __commonJS({
    "web/lib/wasm/binding/ort-wasm-threaded.worker.js"(exports, module) {
      module.exports = '"use strict";var Module={};var ENVIRONMENT_IS_NODE=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string";if(ENVIRONMENT_IS_NODE){var nodeWorkerThreads=require("worker_threads");var parentPort=nodeWorkerThreads.parentPort;parentPort.on("message",data=>onmessage({data:data}));var fs=require("fs");Object.assign(global,{self:global,require:require,Module:Module,location:{href:__filename},Worker:nodeWorkerThreads.Worker,importScripts:f=>(0,eval)(fs.readFileSync(f,"utf8")+"//# sourceURL="+f),postMessage:msg=>parentPort.postMessage(msg),performance:global.performance||{now:Date.now}})}var initializedJS=false;function threadPrintErr(){var text=Array.prototype.slice.call(arguments).join(" ");if(ENVIRONMENT_IS_NODE){fs.writeSync(2,text+"\\n");return}console.error(text)}function threadAlert(){var text=Array.prototype.slice.call(arguments).join(" ");postMessage({cmd:"alert",text:text,threadId:Module["_pthread_self"]()})}var err=threadPrintErr;self.alert=threadAlert;Module["instantiateWasm"]=(info,receiveInstance)=>{var module=Module["wasmModule"];Module["wasmModule"]=null;var instance=new WebAssembly.Instance(module,info);return receiveInstance(instance)};self.onunhandledrejection=e=>{throw e.reason??e};function handleMessage(e){try{if(e.data.cmd==="load"){let messageQueue=[];self.onmessage=e=>messageQueue.push(e);self.startWorker=instance=>{Module=instance;postMessage({"cmd":"loaded"});for(let msg of messageQueue){handleMessage(msg)}self.onmessage=handleMessage};Module["wasmModule"]=e.data.wasmModule;for(const handler of e.data.handlers){Module[handler]=(...args)=>{postMessage({cmd:"callHandler",handler:handler,args:args})}}Module["wasmMemory"]=e.data.wasmMemory;Module["buffer"]=Module["wasmMemory"].buffer;Module["ENVIRONMENT_IS_PTHREAD"]=true;if(typeof e.data.urlOrBlob=="string"){importScripts(e.data.urlOrBlob)}else{var objectUrl=URL.createObjectURL(e.data.urlOrBlob);importScripts(objectUrl);URL.revokeObjectURL(objectUrl)}ortWasmThreaded(Module)}else if(e.data.cmd==="run"){Module["__emscripten_thread_init"](e.data.pthread_ptr,/*isMainBrowserThread=*/0,/*isMainRuntimeThread=*/0,/*canBlock=*/1);Module["__emscripten_thread_mailbox_await"](e.data.pthread_ptr);Module["establishStackSpace"]();Module["PThread"].receiveObjectTransfer(e.data);Module["PThread"].threadInitTLS();if(!initializedJS){Module["__embind_initialize_bindings"]();initializedJS=true}try{Module["invokeEntryPoint"](e.data.start_routine,e.data.arg)}catch(ex){if(ex!="unwind"){throw ex}}}else if(e.data.cmd==="cancel"){if(Module["_pthread_self"]()){Module["__emscripten_thread_exit"](-1)}}else if(e.data.target==="setimmediate"){}else if(e.data.cmd==="checkMailbox"){if(initializedJS){Module["checkMailbox"]()}}else if(e.data.cmd){err("worker.js received unknown command "+e.data.cmd);err(e.data)}}catch(ex){if(Module["__emscripten_thread_crashed"]){Module["__emscripten_thread_crashed"]()}throw ex}}self.onmessage=handleMessage;\n';
    }
  });

  // web/lib/wasm/wasm-factory.ts
  var ortWasmFactory, ortWasmFactoryThreaded, wasm, initialized, initializing, aborted, isMultiThreadSupported, isSimdSupported, getWasmFileName, initializeWebAssembly, getInstance;
  var init_wasm_factory = __esm({
    "web/lib/wasm/wasm-factory.ts"() {
      "use strict";
      init_node_path();
      ortWasmFactory = true ? require_ort_wasm() : null;
      ortWasmFactoryThreaded = true ? true ? require_ort_wasm_threaded() : null : ortWasmFactory;
      initialized = false;
      initializing = false;
      aborted = false;
      isMultiThreadSupported = () => {
        try {
          if (typeof SharedArrayBuffer === "undefined") {
            return false;
          }
          if (typeof MessageChannel !== "undefined") {
            new MessageChannel().port1.postMessage(new SharedArrayBuffer(1));
          }
          return WebAssembly.validate(new Uint8Array([
            0,
            97,
            115,
            109,
            1,
            0,
            0,
            0,
            1,
            4,
            1,
            96,
            0,
            0,
            3,
            2,
            1,
            0,
            5,
            4,
            1,
            3,
            1,
            1,
            10,
            11,
            1,
            9,
            0,
            65,
            0,
            254,
            16,
            2,
            0,
            26,
            11
          ]));
        } catch (e) {
          return false;
        }
      };
      isSimdSupported = () => {
        try {
          return WebAssembly.validate(new Uint8Array([
            0,
            97,
            115,
            109,
            1,
            0,
            0,
            0,
            1,
            4,
            1,
            96,
            0,
            0,
            3,
            2,
            1,
            0,
            10,
            30,
            1,
            28,
            0,
            65,
            0,
            253,
            15,
            253,
            12,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            253,
            186,
            1,
            26,
            11
          ]));
        } catch (e) {
          return false;
        }
      };
      getWasmFileName = (useSimd, useThreads) => {
        if (useThreads) {
          return useSimd ? "ort-wasm-simd-threaded.wasm" : "ort-wasm-threaded.wasm";
        } else {
          return useSimd ? "ort-wasm-simd.wasm" : "ort-wasm.wasm";
        }
      };
      initializeWebAssembly = async (flags) => {
        if (initialized) {
          return Promise.resolve();
        }
        if (initializing) {
          throw new Error("multiple calls to 'initializeWebAssembly()' detected.");
        }
        if (aborted) {
          throw new Error("previous call to 'initializeWebAssembly()' failed.");
        }
        initializing = true;
        const timeout = flags.initTimeout;
        const numThreads = flags.numThreads;
        const simd = flags.simd;
        const useThreads = numThreads > 1 && isMultiThreadSupported();
        const useSimd = simd && isSimdSupported();
        const wasmPaths = flags.wasmPaths;
        const wasmPrefixOverride = typeof wasmPaths === "string" ? wasmPaths : void 0;
        const wasmFileName = getWasmFileName(useSimd, useThreads);
        const wasmPathOverride = typeof wasmPaths === "object" ? wasmPaths[wasmFileName] : void 0;
        let isTimeout = false;
        const tasks = [];
        if (timeout > 0) {
          tasks.push(new Promise((resolve) => {
            setTimeout(() => {
              isTimeout = true;
              resolve();
            }, timeout);
          }));
        }
        tasks.push(new Promise((resolve, reject) => {
          const factory = useThreads ? ortWasmFactoryThreaded : ortWasmFactory;
          const config = {
            locateFile: (fileName, scriptDirectory) => {
              if (useThreads && fileName.endsWith(".worker.js") && typeof Blob !== "undefined") {
                return URL.createObjectURL(new Blob(
                  [
                    // This require() function is handled by esbuild plugin to load file content as string.
                    // eslint-disable-next-line @typescript-eslint/no-require-imports
                    require_ort_wasm_threaded_worker()
                  ],
                  { type: "text/javascript" }
                ));
              }
              if (fileName.endsWith(".wasm")) {
                if (wasmPathOverride) {
                  return wasmPathOverride;
                }
                const prefix = wasmPrefixOverride ?? scriptDirectory;
                if (false) {
                  if (wasmFileName === "ort-wasm-simd.wasm") {
                    return prefix + "ort-wasm-simd.jsep.wasm";
                  } else if (wasmFileName === "ort-wasm-simd-threaded.wasm") {
                    return prefix + "ort-wasm-simd-threaded.jsep.wasm";
                  }
                }
                return prefix + wasmFileName;
              }
              return scriptDirectory + fileName;
            }
          };
          if (useThreads) {
            if (typeof Blob === "undefined") {
              config.mainScriptUrlOrBlob = join(__dirname, "ort-wasm-threaded.js");
            } else {
              const scriptSourceCode = `var ortWasmThreaded=${factory.toString()};`;
              config.mainScriptUrlOrBlob = new Blob([scriptSourceCode], { type: "text/javascript" });
            }
          }
          factory(config).then(
            // wasm module initialized successfully
            (module) => {
              initializing = false;
              initialized = true;
              wasm = module;
              resolve();
            },
            // wasm module failed to initialize
            (what) => {
              initializing = false;
              aborted = true;
              reject(what);
            }
          );
        }));
        await Promise.race(tasks);
        if (isTimeout) {
          throw new Error(`WebAssembly backend initializing failed due to timeout: ${timeout}ms`);
        }
      };
      getInstance = () => {
        if (initialized && wasm) {
          return wasm;
        }
        throw new Error("WebAssembly is not initialized yet.");
      };
    }
  });

  // web/lib/wasm/wasm-utils.ts
  var allocWasmString, iterateExtraOptions, checkLastError;
  var init_wasm_utils = __esm({
    "web/lib/wasm/wasm-utils.ts"() {
      "use strict";
      init_wasm_factory();
      allocWasmString = (data, allocs) => {
        const wasm2 = getInstance();
        const dataLength = wasm2.lengthBytesUTF8(data) + 1;
        const dataOffset = wasm2._malloc(dataLength);
        wasm2.stringToUTF8(data, dataOffset, dataLength);
        allocs.push(dataOffset);
        return dataOffset;
      };
      iterateExtraOptions = (options, prefix, seen, handler) => {
        if (typeof options == "object" && options !== null) {
          if (seen.has(options)) {
            throw new Error("Circular reference in options");
          } else {
            seen.add(options);
          }
        }
        Object.entries(options).forEach(([key, value]) => {
          const name = prefix ? prefix + key : key;
          if (typeof value === "object") {
            iterateExtraOptions(value, name + ".", seen, handler);
          } else if (typeof value === "string" || typeof value === "number") {
            handler(name, value.toString());
          } else if (typeof value === "boolean") {
            handler(name, value ? "1" : "0");
          } else {
            throw new Error(`Can't handle extra config type: ${typeof value}`);
          }
        });
      };
      checkLastError = (message) => {
        const wasm2 = getInstance();
        const stack = wasm2.stackSave();
        try {
          const paramsOffset = wasm2.stackAlloc(8);
          wasm2._OrtGetLastError(paramsOffset, paramsOffset + 4);
          const errorCode = wasm2.HEAP32[paramsOffset / 4];
          const errorMessagePointer = wasm2.HEAPU32[paramsOffset / 4 + 1];
          const errorMessage = errorMessagePointer ? wasm2.UTF8ToString(errorMessagePointer) : "";
          throw new Error(`${message} ERROR_CODE: ${errorCode}, ERROR_MESSAGE: ${errorMessage}`);
        } finally {
          wasm2.stackRestore(stack);
        }
      };
    }
  });

  // web/lib/wasm/run-options.ts
  var setRunOptions;
  var init_run_options = __esm({
    "web/lib/wasm/run-options.ts"() {
      "use strict";
      init_wasm_factory();
      init_wasm_utils();
      setRunOptions = (options) => {
        const wasm2 = getInstance();
        let runOptionsHandle = 0;
        const allocs = [];
        const runOptions = options || {};
        try {
          if (options?.logSeverityLevel === void 0) {
            runOptions.logSeverityLevel = 2;
          } else if (typeof options.logSeverityLevel !== "number" || !Number.isInteger(options.logSeverityLevel) || options.logSeverityLevel < 0 || options.logSeverityLevel > 4) {
            throw new Error(`log serverity level is not valid: ${options.logSeverityLevel}`);
          }
          if (options?.logVerbosityLevel === void 0) {
            runOptions.logVerbosityLevel = 0;
          } else if (typeof options.logVerbosityLevel !== "number" || !Number.isInteger(options.logVerbosityLevel)) {
            throw new Error(`log verbosity level is not valid: ${options.logVerbosityLevel}`);
          }
          if (options?.terminate === void 0) {
            runOptions.terminate = false;
          }
          let tagDataOffset = 0;
          if (options?.tag !== void 0) {
            tagDataOffset = allocWasmString(options.tag, allocs);
          }
          runOptionsHandle = wasm2._OrtCreateRunOptions(
            runOptions.logSeverityLevel,
            runOptions.logVerbosityLevel,
            !!runOptions.terminate,
            tagDataOffset
          );
          if (runOptionsHandle === 0) {
            checkLastError("Can't create run options.");
          }
          if (options?.extra !== void 0) {
            iterateExtraOptions(options.extra, "", /* @__PURE__ */ new WeakSet(), (key, value) => {
              const keyDataOffset = allocWasmString(key, allocs);
              const valueDataOffset = allocWasmString(value, allocs);
              if (wasm2._OrtAddRunConfigEntry(runOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {
                checkLastError(`Can't set a run config entry: ${key} - ${value}.`);
              }
            });
          }
          return [runOptionsHandle, allocs];
        } catch (e) {
          if (runOptionsHandle !== 0) {
            wasm2._OrtReleaseRunOptions(runOptionsHandle);
          }
          allocs.forEach((alloc) => wasm2._free(alloc));
          throw e;
        }
      };
    }
  });

  // web/lib/wasm/session-options.ts
  var getGraphOptimzationLevel, getExecutionMode, appendDefaultOptions, setExecutionProviders, setSessionOptions;
  var init_session_options = __esm({
    "web/lib/wasm/session-options.ts"() {
      "use strict";
      init_wasm_factory();
      init_wasm_utils();
      getGraphOptimzationLevel = (graphOptimizationLevel) => {
        switch (graphOptimizationLevel) {
          case "disabled":
            return 0;
          case "basic":
            return 1;
          case "extended":
            return 2;
          case "all":
            return 99;
          default:
            throw new Error(`unsupported graph optimization level: ${graphOptimizationLevel}`);
        }
      };
      getExecutionMode = (executionMode) => {
        switch (executionMode) {
          case "sequential":
            return 0;
          case "parallel":
            return 1;
          default:
            throw new Error(`unsupported execution mode: ${executionMode}`);
        }
      };
      appendDefaultOptions = (options) => {
        if (!options.extra) {
          options.extra = {};
        }
        if (!options.extra.session) {
          options.extra.session = {};
        }
        const session = options.extra.session;
        if (!session.use_ort_model_bytes_directly) {
          session.use_ort_model_bytes_directly = "1";
        }
        if (options.executionProviders && options.executionProviders.some((ep) => (typeof ep === "string" ? ep : ep.name) === "webgpu")) {
          options.enableMemPattern = false;
        }
      };
      setExecutionProviders = (sessionOptionsHandle, executionProviders, allocs) => {
        for (const ep of executionProviders) {
          let epName = typeof ep === "string" ? ep : ep.name;
          switch (epName) {
            case "xnnpack":
              epName = "XNNPACK";
              break;
            case "webnn":
              epName = "WEBNN";
              if (typeof ep !== "string") {
                const webnnOptions = ep;
                if (webnnOptions?.deviceType) {
                  const keyDataOffset = allocWasmString("deviceType", allocs);
                  const valueDataOffset = allocWasmString(webnnOptions.deviceType, allocs);
                  if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {
                    checkLastError(`Can't set a session config entry: 'deviceType' - ${webnnOptions.deviceType}.`);
                  }
                }
                if (webnnOptions?.powerPreference) {
                  const keyDataOffset = allocWasmString("powerPreference", allocs);
                  const valueDataOffset = allocWasmString(webnnOptions.powerPreference, allocs);
                  if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {
                    checkLastError(
                      `Can't set a session config entry: 'powerPreference' - ${webnnOptions.powerPreference}.`
                    );
                  }
                }
              }
              break;
            case "webgpu":
              epName = "JS";
              if (typeof ep !== "string") {
                const webgpuOptions = ep;
                if (webgpuOptions?.preferredLayout) {
                  if (webgpuOptions.preferredLayout !== "NCHW" && webgpuOptions.preferredLayout !== "NHWC") {
                    throw new Error(`preferredLayout must be either 'NCHW' or 'NHWC': ${webgpuOptions.preferredLayout}`);
                  }
                  const keyDataOffset = allocWasmString("preferredLayout", allocs);
                  const valueDataOffset = allocWasmString(webgpuOptions.preferredLayout, allocs);
                  if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {
                    checkLastError(
                      `Can't set a session config entry: 'preferredLayout' - ${webgpuOptions.preferredLayout}.`
                    );
                  }
                }
              }
              break;
            case "wasm":
            case "cpu":
              continue;
            default:
              throw new Error(`not supported execution provider: ${epName}`);
          }
          const epNameDataOffset = allocWasmString(epName, allocs);
          if (getInstance()._OrtAppendExecutionProvider(sessionOptionsHandle, epNameDataOffset) !== 0) {
            checkLastError(`Can't append execution provider: ${epName}.`);
          }
        }
      };
      setSessionOptions = (options) => {
        const wasm2 = getInstance();
        let sessionOptionsHandle = 0;
        const allocs = [];
        const sessionOptions = options || {};
        appendDefaultOptions(sessionOptions);
        try {
          const graphOptimizationLevel = getGraphOptimzationLevel(sessionOptions.graphOptimizationLevel ?? "all");
          const executionMode = getExecutionMode(sessionOptions.executionMode ?? "sequential");
          const logIdDataOffset = typeof sessionOptions.logId === "string" ? allocWasmString(sessionOptions.logId, allocs) : 0;
          const logSeverityLevel = sessionOptions.logSeverityLevel ?? 2;
          if (!Number.isInteger(logSeverityLevel) || logSeverityLevel < 0 || logSeverityLevel > 4) {
            throw new Error(`log serverity level is not valid: ${logSeverityLevel}`);
          }
          const logVerbosityLevel = sessionOptions.logVerbosityLevel ?? 0;
          if (!Number.isInteger(logVerbosityLevel) || logVerbosityLevel < 0 || logVerbosityLevel > 4) {
            throw new Error(`log verbosity level is not valid: ${logVerbosityLevel}`);
          }
          const optimizedModelFilePathOffset = typeof sessionOptions.optimizedModelFilePath === "string" ? allocWasmString(sessionOptions.optimizedModelFilePath, allocs) : 0;
          sessionOptionsHandle = wasm2._OrtCreateSessionOptions(
            graphOptimizationLevel,
            !!sessionOptions.enableCpuMemArena,
            !!sessionOptions.enableMemPattern,
            executionMode,
            !!sessionOptions.enableProfiling,
            0,
            logIdDataOffset,
            logSeverityLevel,
            logVerbosityLevel,
            optimizedModelFilePathOffset
          );
          if (sessionOptionsHandle === 0) {
            checkLastError("Can't create session options.");
          }
          if (sessionOptions.executionProviders) {
            setExecutionProviders(sessionOptionsHandle, sessionOptions.executionProviders, allocs);
          }
          if (sessionOptions.freeDimensionOverrides) {
            for (const [name, value] of Object.entries(sessionOptions.freeDimensionOverrides)) {
              if (typeof name !== "string") {
                throw new Error(`free dimension override name must be a string: ${name}`);
              }
              if (typeof value !== "number" || !Number.isInteger(value) || value < 0) {
                throw new Error(`free dimension override value must be a non-negative integer: ${value}`);
              }
              const nameOffset = allocWasmString(name, allocs);
              if (wasm2._OrtAddFreeDimensionOverride(sessionOptionsHandle, nameOffset, value) !== 0) {
                checkLastError(`Can't set a free dimension override: ${name} - ${value}.`);
              }
            }
          }
          if (sessionOptions.extra !== void 0) {
            iterateExtraOptions(sessionOptions.extra, "", /* @__PURE__ */ new WeakSet(), (key, value) => {
              const keyDataOffset = allocWasmString(key, allocs);
              const valueDataOffset = allocWasmString(value, allocs);
              if (wasm2._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {
                checkLastError(`Can't set a session config entry: ${key} - ${value}.`);
              }
            });
          }
          return [sessionOptionsHandle, allocs];
        } catch (e) {
          if (sessionOptionsHandle !== 0) {
            wasm2._OrtReleaseSessionOptions(sessionOptionsHandle);
          }
          allocs.forEach((alloc) => wasm2._free(alloc));
          throw e;
        }
      };
    }
  });

  // web/lib/wasm/wasm-common.ts
  var tensorDataTypeStringToEnum, tensorDataTypeEnumToString, getTensorElementSize, tensorTypeToTypedArrayConstructor, logLevelStringToEnum, isGpuBufferSupportedType, dataLocationStringToEnum;
  var init_wasm_common = __esm({
    "web/lib/wasm/wasm-common.ts"() {
      "use strict";
      tensorDataTypeStringToEnum = (type) => {
        switch (type) {
          case "int8":
            return 3 /* int8 */;
          case "uint8":
            return 2 /* uint8 */;
          case "bool":
            return 9 /* bool */;
          case "int16":
            return 5 /* int16 */;
          case "uint16":
            return 4 /* uint16 */;
          case "int32":
            return 6 /* int32 */;
          case "uint32":
            return 12 /* uint32 */;
          case "float16":
            return 10 /* float16 */;
          case "float32":
            return 1 /* float */;
          case "float64":
            return 11 /* double */;
          case "string":
            return 8 /* string */;
          case "int64":
            return 7 /* int64 */;
          case "uint64":
            return 13 /* uint64 */;
          default:
            throw new Error(`unsupported data type: ${type}`);
        }
      };
      tensorDataTypeEnumToString = (typeProto) => {
        switch (typeProto) {
          case 3 /* int8 */:
            return "int8";
          case 2 /* uint8 */:
            return "uint8";
          case 9 /* bool */:
            return "bool";
          case 5 /* int16 */:
            return "int16";
          case 4 /* uint16 */:
            return "uint16";
          case 6 /* int32 */:
            return "int32";
          case 12 /* uint32 */:
            return "uint32";
          case 10 /* float16 */:
            return "float16";
          case 1 /* float */:
            return "float32";
          case 11 /* double */:
            return "float64";
          case 8 /* string */:
            return "string";
          case 7 /* int64 */:
            return "int64";
          case 13 /* uint64 */:
            return "uint64";
          default:
            throw new Error(`unsupported data type: ${typeProto}`);
        }
      };
      getTensorElementSize = (dateType) => [void 0, 4, 1, 1, 2, 2, 4, 8, void 0, 1, 2, 8, 4, 8, void 0, void 0, void 0][dateType];
      tensorTypeToTypedArrayConstructor = (type) => {
        switch (type) {
          case "float16":
            return Uint16Array;
          case "float32":
            return Float32Array;
          case "uint8":
            return Uint8Array;
          case "int8":
            return Int8Array;
          case "uint16":
            return Uint16Array;
          case "int16":
            return Int16Array;
          case "int32":
            return Int32Array;
          case "bool":
            return Uint8Array;
          case "float64":
            return Float64Array;
          case "uint32":
            return Uint32Array;
          case "int64":
            return BigInt64Array;
          case "uint64":
            return BigUint64Array;
          default:
            throw new Error(`unsupported type: ${type}`);
        }
      };
      logLevelStringToEnum = (logLevel) => {
        switch (logLevel) {
          case "verbose":
            return 0;
          case "info":
            return 1;
          case "warning":
            return 2;
          case "error":
            return 3;
          case "fatal":
            return 4;
          default:
            throw new Error(`unsupported logging level: ${logLevel}`);
        }
      };
      isGpuBufferSupportedType = (type) => type === "float32" || type === "int32" || type === "int64" || type === "bool" || type === "float16" || type === "uint32";
      dataLocationStringToEnum = (location) => {
        switch (location) {
          case "none":
            return 0;
          case "cpu":
            return 1;
          case "cpu-pinned":
            return 2;
          case "texture":
            return 3;
          case "gpu-buffer":
            return 4;
          default:
            throw new Error(`unsupported data location: ${location}`);
        }
      };
    }
  });

  // web/lib/wasm/wasm-core-impl.ts
  var getSessionInputOutputCount, initOrt, initRuntime, activeSessions, createSessionAllocate, createSessionFinalize, createSession, releaseSession, prepareInputOutputTensor, run, endProfiling, extractTransferableBuffers;
  var init_wasm_core_impl = __esm({
    "web/lib/wasm/wasm-core-impl.ts"() {
      "use strict";
      init_run_options();
      init_session_options();
      init_wasm_common();
      init_wasm_factory();
      init_wasm_utils();
      getSessionInputOutputCount = (sessionHandle) => {
        const wasm2 = getInstance();
        const stack = wasm2.stackSave();
        try {
          const dataOffset = wasm2.stackAlloc(8);
          const errorCode = wasm2._OrtGetInputOutputCount(sessionHandle, dataOffset, dataOffset + 4);
          if (errorCode !== 0) {
            checkLastError("Can't get session input/output count.");
          }
          return [wasm2.HEAP32[dataOffset / 4], wasm2.HEAP32[dataOffset / 4 + 1]];
        } finally {
          wasm2.stackRestore(stack);
        }
      };
      initOrt = (numThreads, loggingLevel) => {
        const errorCode = getInstance()._OrtInit(numThreads, loggingLevel);
        if (errorCode !== 0) {
          checkLastError("Can't initialize onnxruntime.");
        }
      };
      initRuntime = async (env3) => {
        initOrt(env3.wasm.numThreads, logLevelStringToEnum(env3.logLevel));
        if (false) {
          const initJsep = null.init;
          await initJsep(getInstance(), env3);
        }
      };
      activeSessions = /* @__PURE__ */ new Map();
      createSessionAllocate = (model) => {
        const wasm2 = getInstance();
        const modelDataOffset = wasm2._malloc(model.byteLength);
        if (modelDataOffset === 0) {
          throw new Error(`Can't create a session. failed to allocate a buffer of size ${model.byteLength}.`);
        }
        wasm2.HEAPU8.set(model, modelDataOffset);
        return [modelDataOffset, model.byteLength];
      };
      createSessionFinalize = (modelData, options) => {
        const wasm2 = getInstance();
        let sessionHandle = 0;
        let sessionOptionsHandle = 0;
        let ioBindingHandle = 0;
        let allocs = [];
        const inputNamesUTF8Encoded = [];
        const outputNamesUTF8Encoded = [];
        try {
          [sessionOptionsHandle, allocs] = setSessionOptions(options);
          sessionHandle = wasm2._OrtCreateSession(modelData[0], modelData[1], sessionOptionsHandle);
          if (sessionHandle === 0) {
            checkLastError("Can't create a session.");
          }
          const [inputCount, outputCount] = getSessionInputOutputCount(sessionHandle);
          const inputNames = [];
          const outputNames = [];
          const outputPreferredLocations = [];
          for (let i = 0; i < inputCount; i++) {
            const name = wasm2._OrtGetInputName(sessionHandle, i);
            if (name === 0) {
              checkLastError("Can't get an input name.");
            }
            inputNamesUTF8Encoded.push(name);
            inputNames.push(wasm2.UTF8ToString(name));
          }
          for (let i = 0; i < outputCount; i++) {
            const name = wasm2._OrtGetOutputName(sessionHandle, i);
            if (name === 0) {
              checkLastError("Can't get an output name.");
            }
            outputNamesUTF8Encoded.push(name);
            const nameString = wasm2.UTF8ToString(name);
            outputNames.push(nameString);
            if (false) {
              const location = typeof options?.preferredOutputLocation === "string" ? options.preferredOutputLocation : options?.preferredOutputLocation?.[nameString] ?? "cpu";
              if (location !== "cpu" && location !== "cpu-pinned" && location !== "gpu-buffer") {
                throw new Error(`Not supported preferred output location: ${location}.`);
              }
              outputPreferredLocations.push(location);
            }
          }
          let bindingState = null;
          if (false) {
            ioBindingHandle = wasm2._OrtCreateBinding(sessionHandle);
            if (ioBindingHandle === 0) {
              checkLastError("Can't create IO binding.");
            }
            bindingState = {
              handle: ioBindingHandle,
              outputPreferredLocations,
              outputPreferredLocationsEncoded: outputPreferredLocations.map((l) => dataLocationStringToEnum(l))
            };
          }
          activeSessions.set(sessionHandle, [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded, bindingState]);
          return [sessionHandle, inputNames, outputNames];
        } catch (e) {
          inputNamesUTF8Encoded.forEach((buf) => wasm2._OrtFree(buf));
          outputNamesUTF8Encoded.forEach((buf) => wasm2._OrtFree(buf));
          if (ioBindingHandle !== 0) {
            wasm2._OrtReleaseBinding(ioBindingHandle);
          }
          if (sessionHandle !== 0) {
            wasm2._OrtReleaseSession(sessionHandle);
          }
          throw e;
        } finally {
          wasm2._free(modelData[0]);
          if (sessionOptionsHandle !== 0) {
            wasm2._OrtReleaseSessionOptions(sessionOptionsHandle);
          }
          allocs.forEach((alloc) => wasm2._free(alloc));
        }
      };
      createSession = (model, options) => {
        const modelData = createSessionAllocate(model);
        return createSessionFinalize(modelData, options);
      };
      releaseSession = (sessionId) => {
        const wasm2 = getInstance();
        const session = activeSessions.get(sessionId);
        if (!session) {
          throw new Error(`cannot release session. invalid session id: ${sessionId}`);
        }
        const [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded, ioBindingState] = session;
        if (ioBindingState) {
          wasm2._OrtReleaseBinding(ioBindingState.handle);
        }
        wasm2.jsepUnregisterBuffers?.(sessionId);
        inputNamesUTF8Encoded.forEach((buf) => wasm2._OrtFree(buf));
        outputNamesUTF8Encoded.forEach((buf) => wasm2._OrtFree(buf));
        wasm2._OrtReleaseSession(sessionHandle);
        activeSessions.delete(sessionId);
      };
      prepareInputOutputTensor = (tensor, tensorHandles, allocs, sessionId, index) => {
        if (!tensor) {
          tensorHandles.push(0);
          return;
        }
        const wasm2 = getInstance();
        const dataType = tensor[0];
        const dims = tensor[1];
        const location = tensor[3];
        let rawData;
        let dataByteLength;
        if (dataType === "string" && location === "gpu-buffer") {
          throw new Error("String tensor is not supported on GPU.");
        }
        if (location === "gpu-buffer") {
          const gpuBuffer = tensor[2].gpuBuffer;
          const elementSizeInBytes = getTensorElementSize(tensorDataTypeStringToEnum(dataType));
          dataByteLength = dims.reduce((a, b) => a * b, 1) * elementSizeInBytes;
          rawData = wasm2.jsepRegisterBuffer(sessionId, index, gpuBuffer, dataByteLength);
        } else {
          const data = tensor[2];
          if (Array.isArray(data)) {
            dataByteLength = 4 * data.length;
            rawData = wasm2._malloc(dataByteLength);
            allocs.push(rawData);
            let dataIndex = rawData / 4;
            for (let i = 0; i < data.length; i++) {
              if (typeof data[i] !== "string") {
                throw new TypeError(`tensor data at index ${i} is not a string`);
              }
              wasm2.HEAPU32[dataIndex++] = allocWasmString(data[i], allocs);
            }
          } else {
            dataByteLength = data.byteLength;
            rawData = wasm2._malloc(dataByteLength);
            allocs.push(rawData);
            wasm2.HEAPU8.set(new Uint8Array(data.buffer, data.byteOffset, dataByteLength), rawData);
          }
        }
        const stack = wasm2.stackSave();
        const dimsOffset = wasm2.stackAlloc(4 * dims.length);
        try {
          let dimIndex = dimsOffset / 4;
          dims.forEach((d) => wasm2.HEAP32[dimIndex++] = d);
          const tensor2 = wasm2._OrtCreateTensor(
            tensorDataTypeStringToEnum(dataType),
            rawData,
            dataByteLength,
            dimsOffset,
            dims.length,
            dataLocationStringToEnum(location)
          );
          if (tensor2 === 0) {
            checkLastError(`Can't create tensor for input/output. session=${sessionId}, index=${index}.`);
          }
          tensorHandles.push(tensor2);
        } finally {
          wasm2.stackRestore(stack);
        }
      };
      run = async (sessionId, inputIndices, inputTensors, outputIndices, outputTensors, options) => {
        const wasm2 = getInstance();
        const session = activeSessions.get(sessionId);
        if (!session) {
          throw new Error(`cannot run inference. invalid session id: ${sessionId}`);
        }
        const [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded, ioBindingState] = session;
        const inputCount = inputIndices.length;
        const outputCount = outputIndices.length;
        let runOptionsHandle = 0;
        let runOptionsAllocs = [];
        const inputTensorHandles = [];
        const outputTensorHandles = [];
        const inputOutputAllocs = [];
        const beforeRunStack = wasm2.stackSave();
        const inputValuesOffset = wasm2.stackAlloc(inputCount * 4);
        const inputNamesOffset = wasm2.stackAlloc(inputCount * 4);
        const outputValuesOffset = wasm2.stackAlloc(outputCount * 4);
        const outputNamesOffset = wasm2.stackAlloc(outputCount * 4);
        try {
          [runOptionsHandle, runOptionsAllocs] = setRunOptions(options);
          for (let i = 0; i < inputCount; i++) {
            prepareInputOutputTensor(inputTensors[i], inputTensorHandles, inputOutputAllocs, sessionId, inputIndices[i]);
          }
          for (let i = 0; i < outputCount; i++) {
            prepareInputOutputTensor(
              outputTensors[i],
              outputTensorHandles,
              inputOutputAllocs,
              sessionId,
              inputCount + outputIndices[i]
            );
          }
          let inputValuesIndex = inputValuesOffset / 4;
          let inputNamesIndex = inputNamesOffset / 4;
          let outputValuesIndex = outputValuesOffset / 4;
          let outputNamesIndex = outputNamesOffset / 4;
          for (let i = 0; i < inputCount; i++) {
            wasm2.HEAPU32[inputValuesIndex++] = inputTensorHandles[i];
            wasm2.HEAPU32[inputNamesIndex++] = inputNamesUTF8Encoded[inputIndices[i]];
          }
          for (let i = 0; i < outputCount; i++) {
            wasm2.HEAPU32[outputValuesIndex++] = outputTensorHandles[i];
            wasm2.HEAPU32[outputNamesIndex++] = outputNamesUTF8Encoded[outputIndices[i]];
          }
          if (false) {
            const { handle, outputPreferredLocations, outputPreferredLocationsEncoded } = ioBindingState;
            if (inputNamesUTF8Encoded.length !== inputCount) {
              throw new Error(`input count from feeds (${inputCount}) is expected to be always equal to model's input count (${inputNamesUTF8Encoded.length}).`);
            }
            for (let i = 0; i < inputCount; i++) {
              const index = inputIndices[i];
              const errorCode2 = await wasm2._OrtBindInput(handle, inputNamesUTF8Encoded[index], inputTensorHandles[i]);
              if (errorCode2 !== 0) {
                checkLastError(`Can't bind input[${i}] for session=${sessionId}.`);
              }
            }
            for (let i = 0; i < outputCount; i++) {
              const index = outputIndices[i];
              const location = outputTensors[i]?.[3];
              if (location) {
                const errorCode2 = wasm2._OrtBindOutput(handle, outputNamesUTF8Encoded[index], outputTensorHandles[i], 0);
                if (errorCode2 !== 0) {
                  checkLastError(`Can't bind pre-allocated output[${i}] for session=${sessionId}.`);
                }
              } else {
                const errorCode2 = wasm2._OrtBindOutput(handle, outputNamesUTF8Encoded[index], 0, outputPreferredLocationsEncoded[index]);
                if (errorCode2 !== 0) {
                  checkLastError(`Can't bind output[${i}] to ${outputPreferredLocations[i]} for session=${sessionId}.`);
                }
              }
            }
          }
          let errorCode;
          if (false) {
            errorCode = await wasm2._OrtRunWithBinding(
              sessionHandle,
              ioBindingState.handle,
              outputCount,
              outputValuesOffset,
              runOptionsHandle
            );
          } else {
            errorCode = await wasm2._OrtRun(
              sessionHandle,
              inputNamesOffset,
              inputValuesOffset,
              inputCount,
              outputNamesOffset,
              outputCount,
              outputValuesOffset,
              runOptionsHandle
            );
          }
          if (errorCode !== 0) {
            checkLastError("failed to call OrtRun().");
          }
          const output = [];
          for (let i = 0; i < outputCount; i++) {
            const tensor = wasm2.HEAPU32[outputValuesOffset / 4 + i];
            if (tensor === outputTensorHandles[i]) {
              output.push(outputTensors[i]);
              continue;
            }
            const beforeGetTensorDataStack = wasm2.stackSave();
            const tensorDataOffset = wasm2.stackAlloc(4 * 4);
            let keepOutputTensor = false;
            let type, dataOffset = 0;
            try {
              const errorCode2 = wasm2._OrtGetTensorData(
                tensor,
                tensorDataOffset,
                tensorDataOffset + 4,
                tensorDataOffset + 8,
                tensorDataOffset + 12
              );
              if (errorCode2 !== 0) {
                checkLastError(`Can't access output tensor data on index ${i}.`);
              }
              let tensorDataIndex = tensorDataOffset / 4;
              const dataType = wasm2.HEAPU32[tensorDataIndex++];
              dataOffset = wasm2.HEAPU32[tensorDataIndex++];
              const dimsOffset = wasm2.HEAPU32[tensorDataIndex++];
              const dimsLength = wasm2.HEAPU32[tensorDataIndex++];
              const dims = [];
              for (let i2 = 0; i2 < dimsLength; i2++) {
                dims.push(wasm2.HEAPU32[dimsOffset / 4 + i2]);
              }
              wasm2._OrtFree(dimsOffset);
              const size = dims.reduce((a, b) => a * b, 1);
              type = tensorDataTypeEnumToString(dataType);
              const preferredLocation = ioBindingState?.outputPreferredLocations[outputIndices[i]];
              if (type === "string") {
                if (preferredLocation === "gpu-buffer") {
                  throw new Error("String tensor is not supported on GPU.");
                }
                const stringData = [];
                let dataIndex = dataOffset / 4;
                for (let i2 = 0; i2 < size; i2++) {
                  const offset = wasm2.HEAPU32[dataIndex++];
                  const maxBytesToRead = i2 === size - 1 ? void 0 : wasm2.HEAPU32[dataIndex] - offset;
                  stringData.push(wasm2.UTF8ToString(offset, maxBytesToRead));
                }
                output.push([type, dims, stringData, "cpu"]);
              } else {
                if (preferredLocation === "gpu-buffer" && size > 0) {
                  const gpuBuffer = wasm2.jsepGetBuffer(dataOffset);
                  const elementSize = getTensorElementSize(dataType);
                  if (elementSize === void 0 || !isGpuBufferSupportedType(type)) {
                    throw new Error(`Unsupported data type: ${type}`);
                  }
                  keepOutputTensor = true;
                  output.push([
                    type,
                    dims,
                    {
                      gpuBuffer,
                      download: wasm2.jsepCreateDownloader(gpuBuffer, size * elementSize, type),
                      dispose: () => {
                        wasm2._OrtReleaseTensor(tensor);
                      }
                    },
                    "gpu-buffer"
                  ]);
                } else {
                  const typedArrayConstructor = tensorTypeToTypedArrayConstructor(type);
                  const data = new typedArrayConstructor(size);
                  new Uint8Array(data.buffer, data.byteOffset, data.byteLength).set(wasm2.HEAPU8.subarray(dataOffset, dataOffset + data.byteLength));
                  output.push([type, dims, data, "cpu"]);
                }
              }
            } finally {
              wasm2.stackRestore(beforeGetTensorDataStack);
              if (type === "string" && dataOffset) {
                wasm2._free(dataOffset);
              }
              if (!keepOutputTensor) {
                wasm2._OrtReleaseTensor(tensor);
              }
            }
          }
          if (ioBindingState) {
            wasm2._OrtClearBoundOutputs(ioBindingState.handle);
          }
          return output;
        } finally {
          wasm2.stackRestore(beforeRunStack);
          inputTensorHandles.forEach((v) => wasm2._OrtReleaseTensor(v));
          outputTensorHandles.forEach((v) => wasm2._OrtReleaseTensor(v));
          inputOutputAllocs.forEach((p) => wasm2._free(p));
          if (runOptionsHandle !== 0) {
            wasm2._OrtReleaseRunOptions(runOptionsHandle);
          }
          runOptionsAllocs.forEach((p) => wasm2._free(p));
        }
      };
      endProfiling = (sessionId) => {
        const wasm2 = getInstance();
        const session = activeSessions.get(sessionId);
        if (!session) {
          throw new Error("invalid session id");
        }
        const sessionHandle = session[0];
        const profileFileName = wasm2._OrtEndProfiling(sessionHandle);
        if (profileFileName === 0) {
          checkLastError("Can't get an profile file name.");
        }
        wasm2._OrtFree(profileFileName);
      };
      extractTransferableBuffers = (tensors) => {
        const buffers = [];
        for (const tensor of tensors) {
          const data = tensor[2];
          if (!Array.isArray(data) && "buffer" in data) {
            buffers.push(data.buffer);
          }
        }
        return buffers;
      };
    }
  });

  // proxy-worker:./proxy-worker/main
  var require_main = __commonJS({
    "proxy-worker:./proxy-worker/main"(exports, module) {
      module.exports = '/*!\n * ONNX Runtime Web v1.17.0\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n"use strict";\n(() => {\n  var __defProp = Object.defineProperty;\n  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;\n  var __getOwnPropNames = Object.getOwnPropertyNames;\n  var __hasOwnProp = Object.prototype.hasOwnProperty;\n  var __esm = (fn, res) => function __init() {\n    return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;\n  };\n  var __commonJS = (cb, mod) => function __require() {\n    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;\n  };\n  var __export = (target, all) => {\n    for (var name in all)\n      __defProp(target, name, { get: all[name], enumerable: true });\n  };\n  var __copyProps = (to, from, except, desc) => {\n    if (from && typeof from === "object" || typeof from === "function") {\n      for (let key of __getOwnPropNames(from))\n        if (!__hasOwnProp.call(to, key) && key !== except)\n          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n    }\n    return to;\n  };\n  var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);\n\n  // nodejs-ignore:fs\n  var fs_exports = {};\n  __export(fs_exports, {\n    readFile: () => readFile\n  });\n  var readFile;\n  var init_fs = __esm({\n    "nodejs-ignore:fs"() {\n      readFile = void 0;\n    }\n  });\n\n  // nodejs-ignore:path\n  var path_exports = {};\n  __export(path_exports, {\n    join: () => join2\n  });\n  var join2;\n  var init_path = __esm({\n    "nodejs-ignore:path"() {\n      join2 = void 0;\n    }\n  });\n\n  // web/lib/wasm/binding/ort-wasm.js\n  var require_ort_wasm = __commonJS({\n    "web/lib/wasm/binding/ort-wasm.js"(exports, module) {\n      "use strict";\n      var ortWasm = (() => {\n        var _scriptDir = typeof document !== "undefined" && document.currentScript ? document.currentScript.src : void 0;\n        if (typeof __filename !== "undefined")\n          _scriptDir = _scriptDir || __filename;\n        return function(moduleArg = {}) {\n          var f = moduleArg, aa, m;\n          f.ready = new Promise((a, b) => {\n            aa = a;\n            m = b;\n          });\n          var ba = Object.assign({}, f), ca = "./this.program", da = "object" == typeof window, q = "function" == typeof importScripts, ea = "object" == typeof process && "object" == typeof process.versions && "string" == typeof process.versions.node, t = "", fa, w, x;\n          if (ea) {\n            var fs = (init_fs(), __toCommonJS(fs_exports)), ha = (init_path(), __toCommonJS(path_exports));\n            t = q ? ha.dirname(t) + "/" : __dirname + "/";\n            fa = (a, b) => {\n              a = a.startsWith("file://") ? new URL(a) : ha.normalize(a);\n              return fs.readFileSync(a, b ? void 0 : "utf8");\n            };\n            x = (a) => {\n              a = fa(a, true);\n              a.buffer || (a = new Uint8Array(a));\n              return a;\n            };\n            w = (a, b, c, d = true) => {\n              a = a.startsWith("file://") ? new URL(a) : ha.normalize(a);\n              fs.readFile(a, d ? void 0 : "utf8", (e, h) => {\n                e ? c(e) : b(d ? h.buffer : h);\n              });\n            };\n            !f.thisProgram && 1 < process.argv.length && (ca = process.argv[1].replace(/\\\\/g, "/"));\n            process.argv.slice(2);\n            f.inspect = () => "[Emscripten Module object]";\n          } else if (da || q)\n            q ? t = self.location.href : "undefined" != typeof document && document.currentScript && (t = document.currentScript.src), _scriptDir && (t = _scriptDir), 0 !== t.indexOf("blob:") ? t = t.substr(0, t.replace(/[?#].*/, "").lastIndexOf("/") + 1) : t = "", fa = (a) => {\n              var b = new XMLHttpRequest();\n              b.open("GET", a, false);\n              b.send(null);\n              return b.responseText;\n            }, q && (x = (a) => {\n              var b = new XMLHttpRequest();\n              b.open("GET", a, false);\n              b.responseType = "arraybuffer";\n              b.send(null);\n              return new Uint8Array(b.response);\n            }), w = (a, b, c) => {\n              var d = new XMLHttpRequest();\n              d.open("GET", a, true);\n              d.responseType = "arraybuffer";\n              d.onload = () => {\n                200 == d.status || 0 == d.status && d.response ? b(d.response) : c();\n              };\n              d.onerror = c;\n              d.send(null);\n            };\n          var ia = f.print || console.log.bind(console), z = f.printErr || console.error.bind(console);\n          Object.assign(f, ba);\n          ba = null;\n          f.thisProgram && (ca = f.thisProgram);\n          var A;\n          f.wasmBinary && (A = f.wasmBinary);\n          var noExitRuntime = f.noExitRuntime || true;\n          "object" != typeof WebAssembly && ja("no native wasm support detected");\n          var B, C, ka = false, D, E, G, H, J, K, la, ma, na, oa;\n          function pa() {\n            var a = B.buffer;\n            f.HEAP8 = D = new Int8Array(a);\n            f.HEAP16 = G = new Int16Array(a);\n            f.HEAP32 = J = new Int32Array(a);\n            f.HEAPU8 = E = new Uint8Array(a);\n            f.HEAPU16 = H = new Uint16Array(a);\n            f.HEAPU32 = K = new Uint32Array(a);\n            f.HEAPF32 = la = new Float32Array(a);\n            f.HEAPF64 = oa = new Float64Array(a);\n            f.HEAP64 = ma = new BigInt64Array(a);\n            f.HEAPU64 = na = new BigUint64Array(a);\n          }\n          var qa = [], ra = [], sa = [];\n          function ta() {\n            var a = f.preRun.shift();\n            qa.unshift(a);\n          }\n          var L = 0, ua = null, M = null;\n          function ja(a) {\n            if (f.onAbort)\n              f.onAbort(a);\n            a = "Aborted(" + a + ")";\n            z(a);\n            ka = true;\n            a = new WebAssembly.RuntimeError(a + ". Build with -sASSERTIONS for more info.");\n            m(a);\n            throw a;\n          }\n          function va(a) {\n            return a.startsWith("data:application/octet-stream;base64,");\n          }\n          var N;\n          N = "ort-wasm.wasm";\n          if (!va(N)) {\n            var wa = N;\n            N = f.locateFile ? f.locateFile(wa, t) : t + wa;\n          }\n          function xa(a) {\n            if (a == N && A)\n              return new Uint8Array(A);\n            if (x)\n              return x(a);\n            throw "both async and sync fetching of the wasm failed";\n          }\n          function ya(a) {\n            if (!A && (da || q)) {\n              if ("function" == typeof fetch && !a.startsWith("file://"))\n                return fetch(a, { credentials: "same-origin" }).then((b) => {\n                  if (!b.ok)\n                    throw "failed to load wasm binary file at \'" + a + "\'";\n                  return b.arrayBuffer();\n                }).catch(() => xa(a));\n              if (w)\n                return new Promise((b, c) => {\n                  w(a, (d) => b(new Uint8Array(d)), c);\n                });\n            }\n            return Promise.resolve().then(() => xa(a));\n          }\n          function za(a, b, c) {\n            return ya(a).then((d) => WebAssembly.instantiate(d, b)).then((d) => d).then(c, (d) => {\n              z("failed to asynchronously prepare wasm: " + d);\n              ja(d);\n            });\n          }\n          function Aa(a, b) {\n            var c = N;\n            return A || "function" != typeof WebAssembly.instantiateStreaming || va(c) || c.startsWith("file://") || ea || "function" != typeof fetch ? za(c, a, b) : fetch(c, { credentials: "same-origin" }).then((d) => WebAssembly.instantiateStreaming(d, a).then(b, function(e) {\n              z("wasm streaming compile failed: " + e);\n              z("falling back to ArrayBuffer instantiation");\n              return za(c, a, b);\n            }));\n          }\n          var Ba = (a) => {\n            for (; 0 < a.length; )\n              a.shift()(f);\n          };\n          function Ca(a) {\n            this.Va = a - 24;\n            this.fb = function(b) {\n              K[this.Va + 4 >> 2] = b;\n            };\n            this.eb = function(b) {\n              K[this.Va + 8 >> 2] = b;\n            };\n            this.Za = function(b, c) {\n              this.$a();\n              this.fb(b);\n              this.eb(c);\n            };\n            this.$a = function() {\n              K[this.Va + 16 >> 2] = 0;\n            };\n          }\n          var Da = 0, Ea = 0, Fa = "undefined" != typeof TextDecoder ? new TextDecoder("utf8") : void 0, O = (a, b, c) => {\n            var d = b + c;\n            for (c = b; a[c] && !(c >= d); )\n              ++c;\n            if (16 < c - b && a.buffer && Fa)\n              return Fa.decode(a.subarray(b, c));\n            for (d = ""; b < c; ) {\n              var e = a[b++];\n              if (e & 128) {\n                var h = a[b++] & 63;\n                if (192 == (e & 224))\n                  d += String.fromCharCode((e & 31) << 6 | h);\n                else {\n                  var l = a[b++] & 63;\n                  e = 224 == (e & 240) ? (e & 15) << 12 | h << 6 | l : (e & 7) << 18 | h << 12 | l << 6 | a[b++] & 63;\n                  65536 > e ? d += String.fromCharCode(e) : (e -= 65536, d += String.fromCharCode(55296 | e >> 10, 56320 | e & 1023));\n                }\n              } else\n                d += String.fromCharCode(e);\n            }\n            return d;\n          }, P = (a) => {\n            for (var b = 0, c = 0; c < a.length; ++c) {\n              var d = a.charCodeAt(c);\n              127 >= d ? b++ : 2047 >= d ? b += 2 : 55296 <= d && 57343 >= d ? (b += 4, ++c) : b += 3;\n            }\n            return b;\n          }, Q = (a, b, c, d) => {\n            if (!(0 < d))\n              return 0;\n            var e = c;\n            d = c + d - 1;\n            for (var h = 0; h < a.length; ++h) {\n              var l = a.charCodeAt(h);\n              if (55296 <= l && 57343 >= l) {\n                var k = a.charCodeAt(++h);\n                l = 65536 + ((l & 1023) << 10) | k & 1023;\n              }\n              if (127 >= l) {\n                if (c >= d)\n                  break;\n                b[c++] = l;\n              } else {\n                if (2047 >= l) {\n                  if (c + 1 >= d)\n                    break;\n                  b[c++] = 192 | l >> 6;\n                } else {\n                  if (65535 >= l) {\n                    if (c + 2 >= d)\n                      break;\n                    b[c++] = 224 | l >> 12;\n                  } else {\n                    if (c + 3 >= d)\n                      break;\n                    b[c++] = 240 | l >> 18;\n                    b[c++] = 128 | l >> 12 & 63;\n                  }\n                  b[c++] = 128 | l >> 6 & 63;\n                }\n                b[c++] = 128 | l & 63;\n              }\n            }\n            b[c] = 0;\n            return c - e;\n          };\n          function Ga(a) {\n            if (null === a)\n              return "null";\n            var b = typeof a;\n            return "object" === b || "array" === b || "function" === b ? a.toString() : "" + a;\n          }\n          var Ha = void 0;\n          function R(a) {\n            for (var b = ""; E[a]; )\n              b += Ha[E[a++]];\n            return b;\n          }\n          var Ia = {}, Ja = {}, Ka = {}, La = void 0;\n          function S(a) {\n            throw new La(a);\n          }\n          function Ma(a, b, c = {}) {\n            var d = b.name;\n            a || S(`type "${d}" must have a positive integer typeid pointer`);\n            if (Ja.hasOwnProperty(a)) {\n              if (c.gb)\n                return;\n              S(`Cannot register type \'${d}\' twice`);\n            }\n            Ja[a] = b;\n            delete Ka[a];\n            Ia.hasOwnProperty(a) && (b = Ia[a], delete Ia[a], b.forEach((e) => e()));\n          }\n          function T(a, b, c = {}) {\n            if (!("argPackAdvance" in b))\n              throw new TypeError("registerType registeredInstance requires argPackAdvance");\n            Ma(a, b, c);\n          }\n          function Na(a, b, c) {\n            switch (b) {\n              case 0:\n                return c ? function(d) {\n                  return D[d];\n                } : function(d) {\n                  return E[d];\n                };\n              case 1:\n                return c ? function(d) {\n                  return G[d >> 1];\n                } : function(d) {\n                  return H[d >> 1];\n                };\n              case 2:\n                return c ? function(d) {\n                  return J[d >> 2];\n                } : function(d) {\n                  return K[d >> 2];\n                };\n              case 3:\n                return c ? function(d) {\n                  return ma[d >> 3];\n                } : function(d) {\n                  return na[d >> 3];\n                };\n              default:\n                throw new TypeError("Unknown integer type: " + a);\n            }\n          }\n          function Oa(a) {\n            switch (a) {\n              case 1:\n                return 0;\n              case 2:\n                return 1;\n              case 4:\n                return 2;\n              case 8:\n                return 3;\n              default:\n                throw new TypeError(`Unknown type size: ${a}`);\n            }\n          }\n          function Pa() {\n            this.Sa = [void 0];\n            this.bb = [];\n          }\n          var U = new Pa();\n          function Qa(a) {\n            a >= U.Va && 0 === --U.get(a).cb && U.$a(a);\n          }\n          var V = (a) => {\n            a || S("Cannot use deleted val. handle = " + a);\n            return U.get(a).value;\n          }, W = (a) => {\n            switch (a) {\n              case void 0:\n                return 1;\n              case null:\n                return 2;\n              case true:\n                return 3;\n              case false:\n                return 4;\n              default:\n                return U.Za({ cb: 1, value: a });\n            }\n          };\n          function Ra(a) {\n            return this.fromWireType(J[a >> 2]);\n          }\n          function Sa(a, b) {\n            switch (b) {\n              case 2:\n                return function(c) {\n                  return this.fromWireType(la[c >> 2]);\n                };\n              case 3:\n                return function(c) {\n                  return this.fromWireType(oa[c >> 3]);\n                };\n              default:\n                throw new TypeError("Unknown float type: " + a);\n            }\n          }\n          var Ta = "undefined" != typeof TextDecoder ? new TextDecoder("utf-16le") : void 0, Ua = (a, b) => {\n            var c = a >> 1;\n            for (var d = c + b / 2; !(c >= d) && H[c]; )\n              ++c;\n            c <<= 1;\n            if (32 < c - a && Ta)\n              return Ta.decode(E.subarray(a, c));\n            c = "";\n            for (d = 0; !(d >= b / 2); ++d) {\n              var e = G[a + 2 * d >> 1];\n              if (0 == e)\n                break;\n              c += String.fromCharCode(e);\n            }\n            return c;\n          }, Va = (a, b, c) => {\n            void 0 === c && (c = 2147483647);\n            if (2 > c)\n              return 0;\n            c -= 2;\n            var d = b;\n            c = c < 2 * a.length ? c / 2 : a.length;\n            for (var e = 0; e < c; ++e)\n              G[b >> 1] = a.charCodeAt(e), b += 2;\n            G[b >> 1] = 0;\n            return b - d;\n          }, Wa = (a) => 2 * a.length, Xa = (a, b) => {\n            for (var c = 0, d = ""; !(c >= b / 4); ) {\n              var e = J[a + 4 * c >> 2];\n              if (0 == e)\n                break;\n              ++c;\n              65536 <= e ? (e -= 65536, d += String.fromCharCode(55296 | e >> 10, 56320 | e & 1023)) : d += String.fromCharCode(e);\n            }\n            return d;\n          }, Ya = (a, b, c) => {\n            void 0 === c && (c = 2147483647);\n            if (4 > c)\n              return 0;\n            var d = b;\n            c = d + c - 4;\n            for (var e = 0; e < a.length; ++e) {\n              var h = a.charCodeAt(e);\n              if (55296 <= h && 57343 >= h) {\n                var l = a.charCodeAt(++e);\n                h = 65536 + ((h & 1023) << 10) | l & 1023;\n              }\n              J[b >> 2] = h;\n              b += 4;\n              if (b + 4 > c)\n                break;\n            }\n            J[b >> 2] = 0;\n            return b - d;\n          }, Za = (a) => {\n            for (var b = 0, c = 0; c < a.length; ++c) {\n              var d = a.charCodeAt(c);\n              55296 <= d && 57343 >= d && ++c;\n              b += 4;\n            }\n            return b;\n          };\n          function $a(a, b) {\n            var c = Ja[a];\n            if (void 0 === c) {\n              a = ab(a);\n              var d = R(a);\n              X(a);\n              S(b + " has unknown type " + d);\n            }\n            return c;\n          }\n          var bb = {};\n          function cb(a) {\n            var b = bb[a];\n            return void 0 === b ? R(a) : b;\n          }\n          var eb = [];\n          function fb() {\n            return "object" == typeof globalThis ? globalThis : Function("return this")();\n          }\n          function gb(a) {\n            var b = eb.length;\n            eb.push(a);\n            return b;\n          }\n          function hb(a, b) {\n            for (var c = Array(a), d = 0; d < a; ++d)\n              c[d] = $a(K[b + 4 * d >> 2], "parameter " + d);\n            return c;\n          }\n          function ib(a) {\n            if (void 0 === a)\n              return "_unknown";\n            a = a.replace(/[^a-zA-Z0-9_]/g, "$");\n            var b = a.charCodeAt(0);\n            return 48 <= b && 57 >= b ? `_${a}` : a;\n          }\n          var jb = [];\n          function kb(a, b) {\n            a = ib(a);\n            return { [a]: function() {\n              return b.apply(this, arguments);\n            } }[a];\n          }\n          function lb(a) {\n            var b = Function;\n            if (!(b instanceof Function))\n              throw new TypeError(`new_ called with constructor type ${typeof b} which is not a function`);\n            var c = kb(b.name || "unknownFunctionName", function() {\n            });\n            c.prototype = b.prototype;\n            c = new c();\n            a = b.apply(c, a);\n            return a instanceof Object ? a : c;\n          }\n          function mb(a) {\n            for (var b = "", c = 0; c < a; ++c)\n              b += (0 !== c ? ", " : "") + "arg" + c;\n            var d = "return function emval_allocator_" + a + "(constructor, argTypes, args) {\\n  var HEAPU32 = getMemory();\\n";\n            for (c = 0; c < a; ++c)\n              d += "var argType" + c + " = requireRegisteredType(HEAPU32[((argTypes)>>2)], \'parameter " + c + "\');\\nvar arg" + c + " = argType" + c + ".readValueFromPointer(args);\\nargs += argType" + c + "[\'argPackAdvance\'];\\nargTypes += 4;\\n";\n            return new Function("requireRegisteredType", "Module", "valueToHandle", "getMemory", d + ("var obj = new constructor(" + b + ");\\nreturn valueToHandle(obj);\\n}\\n"))($a, f, W, () => K);\n          }\n          var nb = {};\n          function Y(a) {\n            return -9007199254740992 > a || 9007199254740992 < a ? NaN : Number(a);\n          }\n          var Z = (a) => 0 === a % 4 && (0 !== a % 100 || 0 === a % 400), ob = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335], pb = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334], rb = (a) => {\n            var b = P(a) + 1, c = qb(b);\n            c && Q(a, E, c, b);\n            return c;\n          }, sb = {}, ub = () => {\n            if (!tb) {\n              var a = { USER: "web_user", LOGNAME: "web_user", PATH: "/", PWD: "/", HOME: "/home/web_user", LANG: ("object" == typeof navigator && navigator.languages && navigator.languages[0] || "C").replace("-", "_") + ".UTF-8", _: ca || "./this.program" }, b;\n              for (b in sb)\n                void 0 === sb[b] ? delete a[b] : a[b] = sb[b];\n              var c = [];\n              for (b in a)\n                c.push(`${b}=${a[b]}`);\n              tb = c;\n            }\n            return tb;\n          }, tb, vb = [null, [], []], wb = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], xb = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n          function yb(a) {\n            var b = Array(P(a) + 1);\n            Q(a, b, 0, b.length);\n            return b;\n          }\n          for (var zb = (a, b, c, d) => {\n            function e(g, r, u) {\n              for (g = "number" == typeof g ? g.toString() : g || ""; g.length < r; )\n                g = u[0] + g;\n              return g;\n            }\n            function h(g, r) {\n              return e(g, r, "0");\n            }\n            function l(g, r) {\n              function u(db) {\n                return 0 > db ? -1 : 0 < db ? 1 : 0;\n              }\n              var I;\n              0 === (I = u(g.getFullYear() - r.getFullYear())) && 0 === (I = u(g.getMonth() - r.getMonth())) && (I = u(g.getDate() - r.getDate()));\n              return I;\n            }\n            function k(g) {\n              switch (g.getDay()) {\n                case 0:\n                  return new Date(g.getFullYear() - 1, 11, 29);\n                case 1:\n                  return g;\n                case 2:\n                  return new Date(g.getFullYear(), 0, 3);\n                case 3:\n                  return new Date(\n                    g.getFullYear(),\n                    0,\n                    2\n                  );\n                case 4:\n                  return new Date(g.getFullYear(), 0, 1);\n                case 5:\n                  return new Date(g.getFullYear() - 1, 11, 31);\n                case 6:\n                  return new Date(g.getFullYear() - 1, 11, 30);\n              }\n            }\n            function n(g) {\n              var r = g.Ta;\n              for (g = new Date(new Date(g.Ua + 1900, 0, 1).getTime()); 0 < r; ) {\n                var u = g.getMonth(), I = (Z(g.getFullYear()) ? wb : xb)[u];\n                if (r > I - g.getDate())\n                  r -= I - g.getDate() + 1, g.setDate(1), 11 > u ? g.setMonth(u + 1) : (g.setMonth(0), g.setFullYear(g.getFullYear() + 1));\n                else {\n                  g.setDate(g.getDate() + r);\n                  break;\n                }\n              }\n              u = new Date(g.getFullYear() + 1, 0, 4);\n              r = k(new Date(\n                g.getFullYear(),\n                0,\n                4\n              ));\n              u = k(u);\n              return 0 >= l(r, g) ? 0 >= l(u, g) ? g.getFullYear() + 1 : g.getFullYear() : g.getFullYear() - 1;\n            }\n            var p = J[d + 40 >> 2];\n            d = { kb: J[d >> 2], jb: J[d + 4 >> 2], Xa: J[d + 8 >> 2], ab: J[d + 12 >> 2], Ya: J[d + 16 >> 2], Ua: J[d + 20 >> 2], Oa: J[d + 24 >> 2], Ta: J[d + 28 >> 2], mb: J[d + 32 >> 2], ib: J[d + 36 >> 2], lb: p ? p ? O(E, p) : "" : "" };\n            c = c ? O(E, c) : "";\n            p = {\n              "%c": "%a %b %d %H:%M:%S %Y",\n              "%D": "%m/%d/%y",\n              "%F": "%Y-%m-%d",\n              "%h": "%b",\n              "%r": "%I:%M:%S %p",\n              "%R": "%H:%M",\n              "%T": "%H:%M:%S",\n              "%x": "%m/%d/%y",\n              "%X": "%H:%M:%S",\n              "%Ec": "%c",\n              "%EC": "%C",\n              "%Ex": "%m/%d/%y",\n              "%EX": "%H:%M:%S",\n              "%Ey": "%y",\n              "%EY": "%Y",\n              "%Od": "%d",\n              "%Oe": "%e",\n              "%OH": "%H",\n              "%OI": "%I",\n              "%Om": "%m",\n              "%OM": "%M",\n              "%OS": "%S",\n              "%Ou": "%u",\n              "%OU": "%U",\n              "%OV": "%V",\n              "%Ow": "%w",\n              "%OW": "%W",\n              "%Oy": "%y"\n            };\n            for (var v in p)\n              c = c.replace(new RegExp(v, "g"), p[v]);\n            var y = "Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "), F = "January February March April May June July August September October November December".split(" ");\n            p = { "%a": (g) => y[g.Oa].substring(0, 3), "%A": (g) => y[g.Oa], "%b": (g) => F[g.Ya].substring(0, 3), "%B": (g) => F[g.Ya], "%C": (g) => h((g.Ua + 1900) / 100 | 0, 2), "%d": (g) => h(g.ab, 2), "%e": (g) => e(g.ab, 2, " "), "%g": (g) => n(g).toString().substring(2), "%G": (g) => n(g), "%H": (g) => h(g.Xa, 2), "%I": (g) => {\n              g = g.Xa;\n              0 == g ? g = 12 : 12 < g && (g -= 12);\n              return h(g, 2);\n            }, "%j": (g) => {\n              for (var r = 0, u = 0; u <= g.Ya - 1; r += (Z(g.Ua + 1900) ? wb : xb)[u++])\n                ;\n              return h(g.ab + r, 3);\n            }, "%m": (g) => h(g.Ya + 1, 2), "%M": (g) => h(g.jb, 2), "%n": () => "\\n", "%p": (g) => 0 <= g.Xa && 12 > g.Xa ? "AM" : "PM", "%S": (g) => h(g.kb, 2), "%t": () => "	", "%u": (g) => g.Oa || 7, "%U": (g) => h(Math.floor((g.Ta + 7 - g.Oa) / 7), 2), "%V": (g) => {\n              var r = Math.floor((g.Ta + 7 - (g.Oa + 6) % 7) / 7);\n              2 >= (g.Oa + 371 - g.Ta - 2) % 7 && r++;\n              if (r)\n                53 == r && (u = (g.Oa + 371 - g.Ta) % 7, 4 == u || 3 == u && Z(g.Ua) || (r = 1));\n              else {\n                r = 52;\n                var u = (g.Oa + 7 - g.Ta - 1) % 7;\n                (4 == u || 5 == u && Z(g.Ua % 400 - 1)) && r++;\n              }\n              return h(r, 2);\n            }, "%w": (g) => g.Oa, "%W": (g) => h(Math.floor((g.Ta + 7 - (g.Oa + 6) % 7) / 7), 2), "%y": (g) => (g.Ua + 1900).toString().substring(2), "%Y": (g) => g.Ua + 1900, "%z": (g) => {\n              g = g.ib;\n              var r = 0 <= g;\n              g = Math.abs(g) / 60;\n              return (r ? "+" : "-") + String("0000" + (g / 60 * 100 + g % 60)).slice(-4);\n            }, "%Z": (g) => g.lb, "%%": () => "%" };\n            c = c.replace(/%%/g, "\\0\\0");\n            for (v in p)\n              c.includes(v) && (c = c.replace(new RegExp(v, "g"), p[v](d)));\n            c = c.replace(/\\0\\0/g, "%");\n            v = yb(c);\n            if (v.length > b)\n              return 0;\n            D.set(v, a);\n            return v.length - 1;\n          }, Ab = Array(256), Bb = 0; 256 > Bb; ++Bb)\n            Ab[Bb] = String.fromCharCode(Bb);\n          Ha = Ab;\n          La = f.BindingError = class extends Error {\n            constructor(a) {\n              super(a);\n              this.name = "BindingError";\n            }\n          };\n          f.InternalError = class extends Error {\n            constructor(a) {\n              super(a);\n              this.name = "InternalError";\n            }\n          };\n          Object.assign(Pa.prototype, { get(a) {\n            return this.Sa[a];\n          }, has(a) {\n            return void 0 !== this.Sa[a];\n          }, Za(a) {\n            var b = this.bb.pop() || this.Sa.length;\n            this.Sa[b] = a;\n            return b;\n          }, $a(a) {\n            this.Sa[a] = void 0;\n            this.bb.push(a);\n          } });\n          U.Sa.push({ value: void 0 }, { value: null }, { value: true }, { value: false });\n          U.Va = U.Sa.length;\n          f.count_emval_handles = function() {\n            for (var a = 0, b = U.Va; b < U.Sa.length; ++b)\n              void 0 !== U.Sa[b] && ++a;\n            return a;\n          };\n          var Cb = {\n            a: function(a, b, c) {\n              new Ca(a).Za(b, c);\n              Da = a;\n              Ea++;\n              throw Da;\n            },\n            v: function() {\n              return 0;\n            },\n            ba: () => {\n            },\n            N: () => {\n            },\n            P: () => {\n            },\n            H: function() {\n              return 0;\n            },\n            $: () => {\n            },\n            V: () => {\n            },\n            _: () => {\n            },\n            A: function() {\n            },\n            O: () => {\n            },\n            L: () => {\n            },\n            aa: () => {\n            },\n            M: () => {\n            },\n            D: function(a, b, c, d, e) {\n              b = R(b);\n              c = Oa(c);\n              var h = -1 != b.indexOf("u");\n              h && (e = (1n << 64n) - 1n);\n              T(a, { name: b, fromWireType: function(l) {\n                return l;\n              }, toWireType: function(l, k) {\n                if ("bigint" != typeof k && "number" != typeof k)\n                  throw new TypeError(`Cannot convert "${Ga(k)}" to ${this.name}`);\n                if (k < d || k > e)\n                  throw new TypeError(`Passing a number "${Ga(k)}" from JS side to C/C++ side to an argument of type "${b}", which is outside the valid range [${d}, ${e}]!`);\n                return k;\n              }, argPackAdvance: 8, readValueFromPointer: Na(b, c, !h), Wa: null });\n            },\n            ea: function(a, b, c, d, e) {\n              var h = Oa(c);\n              b = R(b);\n              T(a, { name: b, fromWireType: function(l) {\n                return !!l;\n              }, toWireType: function(l, k) {\n                return k ? d : e;\n              }, argPackAdvance: 8, readValueFromPointer: function(l) {\n                if (1 === c)\n                  var k = D;\n                else if (2 === c)\n                  k = G;\n                else if (4 === c)\n                  k = J;\n                else\n                  throw new TypeError("Unknown boolean type size: " + b);\n                return this.fromWireType(k[l >> h]);\n              }, Wa: null });\n            },\n            da: function(a, b) {\n              b = R(b);\n              T(a, { name: b, fromWireType: function(c) {\n                var d = V(c);\n                Qa(c);\n                return d;\n              }, toWireType: function(c, d) {\n                return W(d);\n              }, argPackAdvance: 8, readValueFromPointer: Ra, Wa: null });\n            },\n            C: function(a, b, c) {\n              c = Oa(c);\n              b = R(b);\n              T(a, { name: b, fromWireType: function(d) {\n                return d;\n              }, toWireType: function(d, e) {\n                return e;\n              }, argPackAdvance: 8, readValueFromPointer: Sa(b, c), Wa: null });\n            },\n            p: function(a, b, c, d, e) {\n              b = R(b);\n              -1 === e && (e = 4294967295);\n              e = Oa(c);\n              var h = (k) => k;\n              if (0 === d) {\n                var l = 32 - 8 * c;\n                h = (k) => k << l >>> l;\n              }\n              c = b.includes("unsigned") ? function(k, n) {\n                return n >>> 0;\n              } : function(k, n) {\n                return n;\n              };\n              T(a, { name: b, fromWireType: h, toWireType: c, argPackAdvance: 8, readValueFromPointer: Na(\n                b,\n                e,\n                0 !== d\n              ), Wa: null });\n            },\n            l: function(a, b, c) {\n              function d(h) {\n                h >>= 2;\n                var l = K;\n                return new e(l.buffer, l[h + 1], l[h]);\n              }\n              var e = [Int8Array, Uint8Array, Int16Array, Uint16Array, Int32Array, Uint32Array, Float32Array, Float64Array, BigInt64Array, BigUint64Array][b];\n              c = R(c);\n              T(a, { name: c, fromWireType: d, argPackAdvance: 8, readValueFromPointer: d }, { gb: true });\n            },\n            E: function(a, b) {\n              b = R(b);\n              var c = "std::string" === b;\n              T(a, { name: b, fromWireType: function(d) {\n                var e = K[d >> 2], h = d + 4;\n                if (c)\n                  for (var l = h, k = 0; k <= e; ++k) {\n                    var n = h + k;\n                    if (k == e || 0 == E[n]) {\n                      l = l ? O(E, l, n - l) : "";\n                      if (void 0 === p)\n                        var p = l;\n                      else\n                        p += String.fromCharCode(0), p += l;\n                      l = n + 1;\n                    }\n                  }\n                else {\n                  p = Array(e);\n                  for (k = 0; k < e; ++k)\n                    p[k] = String.fromCharCode(E[h + k]);\n                  p = p.join("");\n                }\n                X(d);\n                return p;\n              }, toWireType: function(d, e) {\n                e instanceof ArrayBuffer && (e = new Uint8Array(e));\n                var h = "string" == typeof e;\n                h || e instanceof Uint8Array || e instanceof Uint8ClampedArray || e instanceof Int8Array || S("Cannot pass non-string to std::string");\n                var l = c && h ? P(e) : e.length;\n                var k = qb(4 + l + 1), n = k + 4;\n                K[k >> 2] = l;\n                if (c && h)\n                  Q(e, E, n, l + 1);\n                else if (h)\n                  for (h = 0; h < l; ++h) {\n                    var p = e.charCodeAt(h);\n                    255 < p && (X(n), S("String has UTF-16 code units that do not fit in 8 bits"));\n                    E[n + h] = p;\n                  }\n                else\n                  for (h = 0; h < l; ++h)\n                    E[n + h] = e[h];\n                null !== d && d.push(X, k);\n                return k;\n              }, argPackAdvance: 8, readValueFromPointer: Ra, Wa: function(d) {\n                X(d);\n              } });\n            },\n            x: function(a, b, c) {\n              c = R(c);\n              if (2 === b) {\n                var d = Ua;\n                var e = Va;\n                var h = Wa;\n                var l = () => H;\n                var k = 1;\n              } else\n                4 === b && (d = Xa, e = Ya, h = Za, l = () => K, k = 2);\n              T(a, { name: c, fromWireType: function(n) {\n                for (var p = K[n >> 2], v = l(), y, F = n + 4, g = 0; g <= p; ++g) {\n                  var r = n + 4 + g * b;\n                  if (g == p || 0 == v[r >> k])\n                    F = d(F, r - F), void 0 === y ? y = F : (y += String.fromCharCode(0), y += F), F = r + b;\n                }\n                X(n);\n                return y;\n              }, toWireType: function(n, p) {\n                "string" != typeof p && S(`Cannot pass non-string to C++ string type ${c}`);\n                var v = h(p), y = qb(4 + v + b);\n                K[y >> 2] = v >> k;\n                e(p, y + 4, v + b);\n                null !== n && n.push(X, y);\n                return y;\n              }, argPackAdvance: 8, readValueFromPointer: Ra, Wa: function(n) {\n                X(n);\n              } });\n            },\n            fa: function(a, b) {\n              b = R(b);\n              T(a, { hb: true, name: b, argPackAdvance: 0, fromWireType: function() {\n              }, toWireType: function() {\n              } });\n            },\n            ca: () => true,\n            o: function(a, b, c) {\n              a = V(a);\n              b = $a(b, "emval::as");\n              var d = [], e = W(d);\n              K[c >> 2] = e;\n              return b.toWireType(d, a);\n            },\n            h: function(a, b, c, d, e) {\n              a = eb[a];\n              b = V(b);\n              c = cb(c);\n              var h = [];\n              K[d >> 2] = W(h);\n              return a(b, c, h, e);\n            },\n            r: function(a, b, c, d) {\n              a = eb[a];\n              b = V(b);\n              c = cb(c);\n              a(b, c, null, d);\n            },\n            b: Qa,\n            F: function(a, b) {\n              a = V(a);\n              b = V(b);\n              return a == b;\n            },\n            u: function(a) {\n              if (0 === a)\n                return W(fb());\n              a = cb(a);\n              return W(fb()[a]);\n            },\n            g: function(a, b) {\n              var c = hb(a, b), d = c[0];\n              b = d.name + "_$" + c.slice(1).map(function(v) {\n                return v.name;\n              }).join("_") + "$";\n              var e = jb[b];\n              if (void 0 !== e)\n                return e;\n              e = ["retType"];\n              for (var h = [d], l = "", k = 0; k < a - 1; ++k)\n                l += (0 !== k ? ", " : "") + "arg" + k, e.push("argType" + k), h.push(c[1 + k]);\n              var n = "return function " + ib("methodCaller_" + b) + "(handle, name, destructors, args) {\\n", p = 0;\n              for (k = 0; k < a - 1; ++k)\n                n += "    var arg" + k + " = argType" + k + ".readValueFromPointer(args" + (p ? "+" + p : "") + ");\\n", p += c[k + 1].argPackAdvance;\n              n += "    var rv = handle[name](" + l + ");\\n";\n              for (k = 0; k < a - 1; ++k)\n                c[k + 1].deleteObject && (n += "    argType" + k + ".deleteObject(arg" + k + ");\\n");\n              d.hb || (n += "    return retType.toWireType(destructors, rv);\\n");\n              e.push(n + "};\\n");\n              a = lb(e).apply(null, h);\n              e = gb(a);\n              return jb[b] = e;\n            },\n            q: function(a, b) {\n              a = V(a);\n              b = V(b);\n              return W(a[b]);\n            },\n            c: function(a) {\n              4 < a && (U.get(a).cb += 1);\n            },\n            G: function(a, b, c, d) {\n              a = V(a);\n              var e = nb[b];\n              e || (e = mb(b), nb[b] = e);\n              return e(a, c, d);\n            },\n            s: function() {\n              return W([]);\n            },\n            k: function(a) {\n              a = V(a);\n              for (var b = Array(a.length), c = 0; c < a.length; c++)\n                b[c] = a[c];\n              return W(b);\n            },\n            d: function(a) {\n              return W(cb(a));\n            },\n            j: function() {\n              return W({});\n            },\n            f: function(a) {\n              for (var b = V(a); b.length; ) {\n                var c = b.pop();\n                b.pop()(c);\n              }\n              Qa(a);\n            },\n            i: function(a, b, c) {\n              a = V(a);\n              b = V(b);\n              c = V(c);\n              a[b] = c;\n            },\n            e: function(a, b) {\n              a = $a(a, "_emval_take_value");\n              a = a.readValueFromPointer(b);\n              return W(a);\n            },\n            S: function(a, b) {\n              a = Y(a);\n              b = Y(b);\n              a = new Date(1e3 * a);\n              J[b >> 2] = a.getUTCSeconds();\n              J[b + 4 >> 2] = a.getUTCMinutes();\n              J[b + 8 >> 2] = a.getUTCHours();\n              J[b + 12 >> 2] = a.getUTCDate();\n              J[b + 16 >> 2] = a.getUTCMonth();\n              J[b + 20 >> 2] = a.getUTCFullYear() - 1900;\n              J[b + 24 >> 2] = a.getUTCDay();\n              J[b + 28 >> 2] = (a.getTime() - Date.UTC(a.getUTCFullYear(), 0, 1, 0, 0, 0, 0)) / 864e5 | 0;\n            },\n            T: function(a, b) {\n              a = Y(a);\n              b = Y(b);\n              a = new Date(1e3 * a);\n              J[b >> 2] = a.getSeconds();\n              J[b + 4 >> 2] = a.getMinutes();\n              J[b + 8 >> 2] = a.getHours();\n              J[b + 12 >> 2] = a.getDate();\n              J[b + 16 >> 2] = a.getMonth();\n              J[b + 20 >> 2] = a.getFullYear() - 1900;\n              J[b + 24 >> 2] = a.getDay();\n              J[b + 28 >> 2] = (Z(a.getFullYear()) ? ob : pb)[a.getMonth()] + a.getDate() - 1 | 0;\n              J[b + 36 >> 2] = -(60 * a.getTimezoneOffset());\n              var c = new Date(a.getFullYear(), 6, 1).getTimezoneOffset(), d = new Date(a.getFullYear(), 0, 1).getTimezoneOffset();\n              J[b + 32 >> 2] = (c != d && a.getTimezoneOffset() == Math.min(d, c)) | 0;\n            },\n            U: function(a) {\n              a = Y(a);\n              var b = new Date(J[a + 20 >> 2] + 1900, J[a + 16 >> 2], J[a + 12 >> 2], J[a + 8 >> 2], J[a + 4 >> 2], J[a >> 2], 0), c = J[a + 32 >> 2], d = b.getTimezoneOffset(), e = new Date(b.getFullYear(), 6, 1).getTimezoneOffset(), h = new Date(\n                b.getFullYear(),\n                0,\n                1\n              ).getTimezoneOffset(), l = Math.min(h, e);\n              0 > c ? J[a + 32 >> 2] = Number(e != h && l == d) : 0 < c != (l == d) && (e = Math.max(h, e), b.setTime(b.getTime() + 6e4 * ((0 < c ? l : e) - d)));\n              J[a + 24 >> 2] = b.getDay();\n              J[a + 28 >> 2] = (Z(b.getFullYear()) ? ob : pb)[b.getMonth()] + b.getDate() - 1 | 0;\n              J[a >> 2] = b.getSeconds();\n              J[a + 4 >> 2] = b.getMinutes();\n              J[a + 8 >> 2] = b.getHours();\n              J[a + 12 >> 2] = b.getDate();\n              J[a + 16 >> 2] = b.getMonth();\n              J[a + 20 >> 2] = b.getYear();\n              return BigInt(b.getTime() / 1e3);\n            },\n            Q: function() {\n              return -52;\n            },\n            R: function() {\n            },\n            J: (a, b, c) => {\n              function d(n) {\n                return (n = n.toTimeString().match(/\\(([A-Za-z ]+)\\)$/)) ? n[1] : "GMT";\n              }\n              var e = (/* @__PURE__ */ new Date()).getFullYear(), h = new Date(e, 0, 1), l = new Date(e, 6, 1);\n              e = h.getTimezoneOffset();\n              var k = l.getTimezoneOffset();\n              K[a >> 2] = 60 * Math.max(e, k);\n              J[b >> 2] = Number(e != k);\n              a = d(h);\n              b = d(l);\n              a = rb(a);\n              b = rb(b);\n              k < e ? (K[c >> 2] = a, K[c + 4 >> 2] = b) : (K[c >> 2] = b, K[c + 4 >> 2] = a);\n            },\n            t: () => {\n              ja("");\n            },\n            B: function() {\n              return Date.now();\n            },\n            K: () => 2147483648,\n            n: () => performance.now(),\n            Z: (a, b, c) => E.copyWithin(a, b, b + c),\n            I: (a) => {\n              var b = E.length;\n              a >>>= 0;\n              if (2147483648 < a)\n                return false;\n              for (var c = 1; 4 >= c; c *= 2) {\n                var d = b * (1 + 0.2 / c);\n                d = Math.min(d, a + 100663296);\n                var e = Math;\n                d = Math.max(a, d);\n                a: {\n                  e = e.min.call(e, 2147483648, d + (65536 - d % 65536) % 65536) - B.buffer.byteLength + 65535 >>> 16;\n                  try {\n                    B.grow(e);\n                    pa();\n                    var h = 1;\n                    break a;\n                  } catch (l) {\n                  }\n                  h = void 0;\n                }\n                if (h)\n                  return true;\n              }\n              return false;\n            },\n            X: (a, b) => {\n              var c = 0;\n              ub().forEach(function(d, e) {\n                var h = b + c;\n                e = K[a + 4 * e >> 2] = h;\n                for (h = 0; h < d.length; ++h)\n                  D[e++ >> 0] = d.charCodeAt(h);\n                D[e >> 0] = 0;\n                c += d.length + 1;\n              });\n              return 0;\n            },\n            Y: (a, b) => {\n              var c = ub();\n              K[a >> 2] = c.length;\n              var d = 0;\n              c.forEach(function(e) {\n                d += e.length + 1;\n              });\n              K[b >> 2] = d;\n              return 0;\n            },\n            w: () => 52,\n            z: () => 52,\n            W: function() {\n              return 70;\n            },\n            y: (a, b, c, d) => {\n              for (var e = 0, h = 0; h < c; h++) {\n                var l = K[b >> 2], k = K[b + 4 >> 2];\n                b += 8;\n                for (var n = 0; n < k; n++) {\n                  var p = E[l + n], v = vb[a];\n                  0 === p || 10 === p ? ((1 === a ? ia : z)(O(v, 0)), v.length = 0) : v.push(p);\n                }\n                e += k;\n              }\n              K[d >> 2] = e;\n              return 0;\n            },\n            ga: zb,\n            m: (a, b, c, d) => zb(a, b, c, d)\n          };\n          (function() {\n            function a(c) {\n              C = c = c.exports;\n              B = C.ha;\n              pa();\n              ra.unshift(C.ia);\n              L--;\n              f.monitorRunDependencies && f.monitorRunDependencies(L);\n              if (0 == L && (null !== ua && (clearInterval(ua), ua = null), M)) {\n                var d = M;\n                M = null;\n                d();\n              }\n              return c;\n            }\n            var b = { a: Cb };\n            L++;\n            f.monitorRunDependencies && f.monitorRunDependencies(L);\n            if (f.instantiateWasm)\n              try {\n                return f.instantiateWasm(b, a);\n              } catch (c) {\n                z("Module.instantiateWasm callback failed with error: " + c), m(c);\n              }\n            Aa(b, function(c) {\n              a(c.instance);\n            }).catch(m);\n            return {};\n          })();\n          f._OrtInit = (a, b) => (f._OrtInit = C.ja)(a, b);\n          f._OrtGetLastError = (a, b) => (f._OrtGetLastError = C.ka)(a, b);\n          f._OrtCreateSessionOptions = (a, b, c, d, e, h, l, k, n, p) => (f._OrtCreateSessionOptions = C.la)(a, b, c, d, e, h, l, k, n, p);\n          f._OrtAppendExecutionProvider = (a, b) => (f._OrtAppendExecutionProvider = C.ma)(a, b);\n          f._OrtAddFreeDimensionOverride = (a, b, c) => (f._OrtAddFreeDimensionOverride = C.na)(a, b, c);\n          f._OrtAddSessionConfigEntry = (a, b, c) => (f._OrtAddSessionConfigEntry = C.oa)(a, b, c);\n          f._OrtReleaseSessionOptions = (a) => (f._OrtReleaseSessionOptions = C.pa)(a);\n          f._OrtCreateSession = (a, b, c) => (f._OrtCreateSession = C.qa)(a, b, c);\n          f._OrtReleaseSession = (a) => (f._OrtReleaseSession = C.ra)(a);\n          f._OrtGetInputOutputCount = (a, b, c) => (f._OrtGetInputOutputCount = C.sa)(a, b, c);\n          f._OrtGetInputName = (a, b) => (f._OrtGetInputName = C.ta)(a, b);\n          f._OrtGetOutputName = (a, b) => (f._OrtGetOutputName = C.ua)(a, b);\n          f._OrtFree = (a) => (f._OrtFree = C.va)(a);\n          f._OrtCreateTensor = (a, b, c, d, e, h) => (f._OrtCreateTensor = C.wa)(a, b, c, d, e, h);\n          f._OrtGetTensorData = (a, b, c, d, e) => (f._OrtGetTensorData = C.xa)(a, b, c, d, e);\n          f._OrtReleaseTensor = (a) => (f._OrtReleaseTensor = C.ya)(a);\n          f._OrtCreateRunOptions = (a, b, c, d) => (f._OrtCreateRunOptions = C.za)(a, b, c, d);\n          f._OrtAddRunConfigEntry = (a, b, c) => (f._OrtAddRunConfigEntry = C.Aa)(a, b, c);\n          f._OrtReleaseRunOptions = (a) => (f._OrtReleaseRunOptions = C.Ba)(a);\n          f._OrtCreateBinding = (a) => (f._OrtCreateBinding = C.Ca)(a);\n          f._OrtBindInput = (a, b, c) => (f._OrtBindInput = C.Da)(a, b, c);\n          f._OrtBindOutput = (a, b, c, d) => (f._OrtBindOutput = C.Ea)(a, b, c, d);\n          f._OrtClearBoundOutputs = (a) => (f._OrtClearBoundOutputs = C.Fa)(a);\n          f._OrtReleaseBinding = (a) => (f._OrtReleaseBinding = C.Ga)(a);\n          f._OrtRunWithBinding = (a, b, c, d, e) => (f._OrtRunWithBinding = C.Ha)(a, b, c, d, e);\n          f._OrtRun = (a, b, c, d, e, h, l, k) => (f._OrtRun = C.Ia)(a, b, c, d, e, h, l, k);\n          f._OrtEndProfiling = (a) => (f._OrtEndProfiling = C.Ja)(a);\n          var qb = f._malloc = (a) => (qb = f._malloc = C.Ka)(a), X = f._free = (a) => (X = f._free = C.La)(a), ab = (a) => (ab = C.Ma)(a);\n          f.__embind_initialize_bindings = () => (f.__embind_initialize_bindings = C.Na)();\n          var Db = () => (Db = C.Pa)(), Eb = (a) => (Eb = C.Qa)(a), Fb = (a) => (Fb = C.Ra)(a);\n          f.stackAlloc = Fb;\n          f.stackSave = Db;\n          f.stackRestore = Eb;\n          f.UTF8ToString = (a, b) => a ? O(E, a, b) : "";\n          f.stringToUTF8 = (a, b, c) => Q(a, E, b, c);\n          f.lengthBytesUTF8 = P;\n          var Gb;\n          M = function Hb() {\n            Gb || Ib();\n            Gb || (M = Hb);\n          };\n          function Ib() {\n            function a() {\n              if (!Gb && (Gb = true, f.calledRun = true, !ka)) {\n                Ba(ra);\n                aa(f);\n                if (f.onRuntimeInitialized)\n                  f.onRuntimeInitialized();\n                if (f.postRun)\n                  for ("function" == typeof f.postRun && (f.postRun = [f.postRun]); f.postRun.length; ) {\n                    var b = f.postRun.shift();\n                    sa.unshift(b);\n                  }\n                Ba(sa);\n              }\n            }\n            if (!(0 < L)) {\n              if (f.preRun)\n                for ("function" == typeof f.preRun && (f.preRun = [f.preRun]); f.preRun.length; )\n                  ta();\n              Ba(qa);\n              0 < L || (f.setStatus ? (f.setStatus("Running..."), setTimeout(function() {\n                setTimeout(function() {\n                  f.setStatus("");\n                }, 1);\n                a();\n              }, 1)) : a());\n            }\n          }\n          if (f.preInit)\n            for ("function" == typeof f.preInit && (f.preInit = [f.preInit]); 0 < f.preInit.length; )\n              f.preInit.pop()();\n          Ib();\n          return moduleArg.ready;\n        };\n      })();\n      if (typeof exports === "object" && typeof module === "object")\n        module.exports = ortWasm;\n      else if (typeof define === "function" && define["amd"])\n        define([], () => ortWasm);\n    }\n  });\n\n  // nodejs-ignore:worker_threads\n  var require_worker_threads = __commonJS({\n    "nodejs-ignore:worker_threads"() {\n    }\n  });\n\n  // nodejs-ignore:perf_hooks\n  var require_perf_hooks = __commonJS({\n    "nodejs-ignore:perf_hooks"() {\n    }\n  });\n\n  // nodejs-ignore:os\n  var os_exports = {};\n  __export(os_exports, {\n    cpus: () => cpus\n  });\n  var cpus;\n  var init_os = __esm({\n    "nodejs-ignore:os"() {\n      cpus = void 0;\n    }\n  });\n\n  // web/lib/wasm/binding/ort-wasm-threaded.js\n  var require_ort_wasm_threaded = __commonJS({\n    "web/lib/wasm/binding/ort-wasm-threaded.js"(exports, module) {\n      "use strict";\n      var ortWasmThreaded = (() => {\n        var _scriptDir = typeof document !== "undefined" && document.currentScript ? document.currentScript.src : void 0;\n        if (typeof __filename !== "undefined")\n          _scriptDir = _scriptDir || __filename;\n        return function(moduleArg = {}) {\n          function e() {\n            m.buffer != n.buffer && p();\n            return n;\n          }\n          function t() {\n            m.buffer != n.buffer && p();\n            return aa;\n          }\n          function v() {\n            m.buffer != n.buffer && p();\n            return ba;\n          }\n          function ca() {\n            m.buffer != n.buffer && p();\n            return da;\n          }\n          function w() {\n            m.buffer != n.buffer && p();\n            return ea;\n          }\n          function z() {\n            m.buffer != n.buffer && p();\n            return fa;\n          }\n          function ha() {\n            m.buffer != n.buffer && p();\n            return ia;\n          }\n          var A = moduleArg, ja, ka;\n          A.ready = new Promise((a, b) => {\n            ja = a;\n            ka = b;\n          });\n          var la = Object.assign({}, A), ma = "./this.program", C = (a, b) => {\n            throw b;\n          }, na = "object" == typeof window, D = "function" == typeof importScripts, E = "object" == typeof process && "object" == typeof process.versions && "string" == typeof process.versions.node, F = A.ENVIRONMENT_IS_PTHREAD || false, G = "";\n          function oa(a) {\n            return A.locateFile ? A.locateFile(a, G) : G + a;\n          }\n          var pa, qa, ra;\n          if (E) {\n            var fs = (init_fs(), __toCommonJS(fs_exports)), sa = (init_path(), __toCommonJS(path_exports));\n            G = D ? sa.dirname(G) + "/" : __dirname + "/";\n            pa = (b, c) => {\n              b = b.startsWith("file://") ? new URL(b) : sa.normalize(b);\n              return fs.readFileSync(b, c ? void 0 : "utf8");\n            };\n            ra = (b) => {\n              b = pa(b, true);\n              b.buffer || (b = new Uint8Array(b));\n              return b;\n            };\n            qa = (b, c, d, f = true) => {\n              b = b.startsWith("file://") ? new URL(b) : sa.normalize(b);\n              fs.readFile(b, f ? void 0 : "utf8", (g, k) => {\n                g ? d(g) : c(f ? k.buffer : k);\n              });\n            };\n            !A.thisProgram && 1 < process.argv.length && (ma = process.argv[1].replace(/\\\\/g, "/"));\n            process.argv.slice(2);\n            C = (b, c) => {\n              process.exitCode = b;\n              throw c;\n            };\n            A.inspect = () => "[Emscripten Module object]";\n            let a;\n            try {\n              a = require_worker_threads();\n            } catch (b) {\n              throw console.error(\'The "worker_threads" module is not supported in this node.js build - perhaps a newer version is needed?\'), b;\n            }\n            global.Worker = a.Worker;\n          } else if (na || D)\n            D ? G = self.location.href : "undefined" != typeof document && document.currentScript && (G = document.currentScript.src), typeof _scriptDir !== "undefined" && _scriptDir && (G = _scriptDir), 0 !== G.indexOf("blob:") ? G = G.substr(0, G.replace(/[?#].*/, "").lastIndexOf("/") + 1) : G = "", E || (pa = (a) => {\n              var b = new XMLHttpRequest();\n              b.open("GET", a, false);\n              b.send(null);\n              return b.responseText;\n            }, D && (ra = (a) => {\n              var b = new XMLHttpRequest();\n              b.open("GET", a, false);\n              b.responseType = "arraybuffer";\n              b.send(null);\n              return new Uint8Array(b.response);\n            }), qa = (a, b, c) => {\n              var d = new XMLHttpRequest();\n              d.open("GET", a, true);\n              d.responseType = "arraybuffer";\n              d.onload = () => {\n                200 == d.status || 0 == d.status && d.response ? b(d.response) : c();\n              };\n              d.onerror = c;\n              d.send(null);\n            });\n          E && "undefined" == typeof performance && (global.performance = require_perf_hooks().performance);\n          var ta = console.log.bind(console), ua = console.error.bind(console);\n          E && (ta = (...a) => fs.writeSync(1, a.join(" ") + "\\n"), ua = (...a) => fs.writeSync(2, a.join(" ") + "\\n"));\n          var va = A.print || ta, H = A.printErr || ua;\n          Object.assign(A, la);\n          la = null;\n          A.thisProgram && (ma = A.thisProgram);\n          A.quit && (C = A.quit);\n          var I;\n          A.wasmBinary && (I = A.wasmBinary);\n          var noExitRuntime = A.noExitRuntime || true;\n          "object" != typeof WebAssembly && wa("no native wasm support detected");\n          var m, J, xa, ya = false, K, n, aa, ba, da, ea, fa, za, L, Aa, ia;\n          function p() {\n            var a = m.buffer;\n            A.HEAP8 = n = new Int8Array(a);\n            A.HEAP16 = ba = new Int16Array(a);\n            A.HEAP32 = ea = new Int32Array(a);\n            A.HEAPU8 = aa = new Uint8Array(a);\n            A.HEAPU16 = da = new Uint16Array(a);\n            A.HEAPU32 = fa = new Uint32Array(a);\n            A.HEAPF32 = za = new Float32Array(a);\n            A.HEAPF64 = ia = new Float64Array(a);\n            A.HEAP64 = L = new BigInt64Array(a);\n            A.HEAPU64 = Aa = new BigUint64Array(a);\n          }\n          var Ba = A.INITIAL_MEMORY || 16777216;\n          5242880 <= Ba || wa("INITIAL_MEMORY should be larger than STACK_SIZE, was " + Ba + "! (STACK_SIZE=5242880)");\n          if (F)\n            m = A.wasmMemory;\n          else if (A.wasmMemory)\n            m = A.wasmMemory;\n          else if (m = new WebAssembly.Memory({ initial: Ba / 65536, maximum: 32768, shared: true }), !(m.buffer instanceof SharedArrayBuffer))\n            throw H("requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag"), E && H("(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and/or recent version)"), Error("bad memory");\n          p();\n          Ba = m.buffer.byteLength;\n          var Ca, Da = [], Ea = [], Fa = [], Ga = 0;\n          function Ha() {\n            return noExitRuntime || 0 < Ga;\n          }\n          var M = 0, Ia = null, Ja = null;\n          function Ka() {\n            M++;\n            A.monitorRunDependencies && A.monitorRunDependencies(M);\n          }\n          function La() {\n            M--;\n            A.monitorRunDependencies && A.monitorRunDependencies(M);\n            if (0 == M && (null !== Ia && (clearInterval(Ia), Ia = null), Ja)) {\n              var a = Ja;\n              Ja = null;\n              a();\n            }\n          }\n          function wa(a) {\n            if (A.onAbort)\n              A.onAbort(a);\n            a = "Aborted(" + a + ")";\n            H(a);\n            ya = true;\n            K = 1;\n            a = new WebAssembly.RuntimeError(a + ". Build with -sASSERTIONS for more info.");\n            ka(a);\n            throw a;\n          }\n          function Ma(a) {\n            return a.startsWith("data:application/octet-stream;base64,");\n          }\n          var O;\n          O = "ort-wasm-threaded.wasm";\n          Ma(O) || (O = oa(O));\n          function Na(a) {\n            if (a == O && I)\n              return new Uint8Array(I);\n            if (ra)\n              return ra(a);\n            throw "both async and sync fetching of the wasm failed";\n          }\n          function Oa(a) {\n            if (!I && (na || D)) {\n              if ("function" == typeof fetch && !a.startsWith("file://"))\n                return fetch(a, { credentials: "same-origin" }).then((b) => {\n                  if (!b.ok)\n                    throw "failed to load wasm binary file at \'" + a + "\'";\n                  return b.arrayBuffer();\n                }).catch(() => Na(a));\n              if (qa)\n                return new Promise((b, c) => {\n                  qa(a, (d) => b(new Uint8Array(d)), c);\n                });\n            }\n            return Promise.resolve().then(() => Na(a));\n          }\n          function Pa(a, b, c) {\n            return Oa(a).then((d) => WebAssembly.instantiate(d, b)).then((d) => d).then(c, (d) => {\n              H("failed to asynchronously prepare wasm: " + d);\n              wa(d);\n            });\n          }\n          function Qa(a, b) {\n            var c = O;\n            return I || "function" != typeof WebAssembly.instantiateStreaming || Ma(c) || c.startsWith("file://") || E || "function" != typeof fetch ? Pa(c, a, b) : fetch(c, { credentials: "same-origin" }).then((d) => WebAssembly.instantiateStreaming(d, a).then(b, function(f) {\n              H("wasm streaming compile failed: " + f);\n              H("falling back to ArrayBuffer instantiation");\n              return Pa(c, a, b);\n            }));\n          }\n          function Ra(a) {\n            this.name = "ExitStatus";\n            this.message = `Program terminated with exit(${a})`;\n            this.status = a;\n          }\n          function Sa(a) {\n            a.terminate();\n            a.onmessage = () => {\n            };\n          }\n          function Ta(a) {\n            (a = P.kb[a]) || wa();\n            P.Qb(a);\n          }\n          function Ua(a) {\n            var b = P.Hb();\n            if (!b)\n              return 6;\n            P.ob.push(b);\n            P.kb[a.nb] = b;\n            b.nb = a.nb;\n            var c = { cmd: "run", start_routine: a.Rb, arg: a.Gb, pthread_ptr: a.nb };\n            E && b.unref();\n            b.postMessage(c, a.Xb);\n            return 0;\n          }\n          var Va = "undefined" != typeof TextDecoder ? new TextDecoder("utf8") : void 0, Wa = (a, b, c) => {\n            var d = b + c;\n            for (c = b; a[c] && !(c >= d); )\n              ++c;\n            if (16 < c - b && a.buffer && Va)\n              return Va.decode(a.buffer instanceof SharedArrayBuffer ? a.slice(b, c) : a.subarray(b, c));\n            for (d = ""; b < c; ) {\n              var f = a[b++];\n              if (f & 128) {\n                var g = a[b++] & 63;\n                if (192 == (f & 224))\n                  d += String.fromCharCode((f & 31) << 6 | g);\n                else {\n                  var k = a[b++] & 63;\n                  f = 224 == (f & 240) ? (f & 15) << 12 | g << 6 | k : (f & 7) << 18 | g << 12 | k << 6 | a[b++] & 63;\n                  65536 > f ? d += String.fromCharCode(f) : (f -= 65536, d += String.fromCharCode(55296 | f >> 10, 56320 | f & 1023));\n                }\n              } else\n                d += String.fromCharCode(f);\n            }\n            return d;\n          }, Xa = (a, b) => a ? Wa(t(), a, b) : "";\n          function Ya(a) {\n            if (F)\n              return Q(1, 1, a);\n            K = a;\n            if (!Ha()) {\n              P.Sb();\n              if (A.onExit)\n                A.onExit(a);\n              ya = true;\n            }\n            C(a, new Ra(a));\n          }\n          var $a = (a) => {\n            K = a;\n            if (F)\n              throw Za(a), "unwind";\n            Ya(a);\n          }, P = {\n            rb: [],\n            ob: [],\n            Eb: [],\n            kb: {},\n            wb: function() {\n              F ? P.Kb() : P.Jb();\n            },\n            Jb: function() {\n              Da.unshift(() => {\n                Ka();\n                P.Mb(() => La());\n              });\n            },\n            Kb: function() {\n              P.receiveObjectTransfer = P.Pb;\n              P.threadInitTLS = P.Db;\n              P.setExitStatus = P.Cb;\n              noExitRuntime = false;\n            },\n            Cb: function(a) {\n              K = a;\n            },\n            bc: ["$terminateWorker"],\n            Sb: function() {\n              for (var a of P.ob)\n                Sa(a);\n              for (a of P.rb)\n                Sa(a);\n              P.rb = [];\n              P.ob = [];\n              P.kb = [];\n            },\n            Qb: function(a) {\n              var b = a.nb;\n              delete P.kb[b];\n              P.rb.push(a);\n              P.ob.splice(P.ob.indexOf(a), 1);\n              a.nb = 0;\n              ab(b);\n            },\n            Pb: function() {\n            },\n            Db: function() {\n              P.Eb.forEach((a) => a());\n            },\n            Nb: (a) => new Promise((b) => {\n              a.onmessage = (g) => {\n                g = g.data;\n                var k = g.cmd;\n                if (g.targetThread && g.targetThread != bb()) {\n                  var l = P.kb[g.ac];\n                  l ? l.postMessage(g, g.transferList) : H(\'Internal error! Worker sent a message "\' + k + \'" to target pthread \' + g.targetThread + ", but that thread no longer exists!");\n                } else if ("checkMailbox" === k)\n                  cb();\n                else if ("spawnThread" === k)\n                  Ua(g);\n                else if ("cleanupThread" === k)\n                  Ta(g.thread);\n                else if ("killThread" === k)\n                  g = g.thread, k = P.kb[g], delete P.kb[g], Sa(k), ab(g), P.ob.splice(\n                    P.ob.indexOf(k),\n                    1\n                  ), k.nb = 0;\n                else if ("cancelThread" === k)\n                  P.kb[g.thread].postMessage({ cmd: "cancel" });\n                else if ("loaded" === k)\n                  a.loaded = true, b(a);\n                else if ("alert" === k)\n                  alert("Thread " + g.threadId + ": " + g.text);\n                else if ("setimmediate" === g.target)\n                  a.postMessage(g);\n                else if ("callHandler" === k)\n                  A[g.handler](...g.args);\n                else\n                  k && H("worker sent an unknown command " + k);\n              };\n              a.onerror = (g) => {\n                H("worker sent an error! " + g.filename + ":" + g.lineno + ": " + g.message);\n                throw g;\n              };\n              E && (a.on("message", function(g) {\n                a.onmessage({ data: g });\n              }), a.on("error", function(g) {\n                a.onerror(g);\n              }));\n              var c = [], d = ["onExit", "onAbort", "print", "printErr"], f;\n              for (f of d)\n                A.hasOwnProperty(f) && c.push(f);\n              a.postMessage({ cmd: "load", handlers: c, urlOrBlob: A.mainScriptUrlOrBlob || _scriptDir, wasmMemory: m, wasmModule: xa });\n            }),\n            Mb: function(a) {\n              a();\n            },\n            Fb: function() {\n              var a = oa("ort-wasm-threaded.worker.js");\n              a = new Worker(a);\n              P.rb.push(a);\n            },\n            Hb: function() {\n              0 == P.rb.length && (P.Fb(), P.Nb(P.rb[0]));\n              return P.rb.pop();\n            }\n          };\n          A.PThread = P;\n          var db = (a) => {\n            for (; 0 < a.length; )\n              a.shift()(A);\n          };\n          A.establishStackSpace = function() {\n            var a = bb(), b = w()[a + 52 >> 2];\n            a = w()[a + 56 >> 2];\n            eb(b, b - a);\n            fb(b);\n          };\n          function Za(a) {\n            if (F)\n              return Q(2, 0, a);\n            $a(a);\n          }\n          var gb = [];\n          A.invokeEntryPoint = function(a, b) {\n            var c = gb[a];\n            c || (a >= gb.length && (gb.length = a + 1), gb[a] = c = Ca.get(a));\n            a = c(b);\n            Ha() ? P.Cb(a) : hb(a);\n          };\n          function ib(a) {\n            this.tb = a - 24;\n            this.Ob = function(b) {\n              z()[this.tb + 4 >> 2] = b;\n            };\n            this.yb = function(b) {\n              z()[this.tb + 8 >> 2] = b;\n            };\n            this.wb = function(b, c) {\n              this.xb();\n              this.Ob(b);\n              this.yb(c);\n            };\n            this.xb = function() {\n              z()[this.tb + 16 >> 2] = 0;\n            };\n          }\n          var jb = 0, kb = 0;\n          function lb(a, b, c, d) {\n            return F ? Q(3, 1, a, b, c, d) : mb(a, b, c, d);\n          }\n          function mb(a, b, c, d) {\n            if ("undefined" == typeof SharedArrayBuffer)\n              return H("Current environment does not support SharedArrayBuffer, pthreads are not available!"), 6;\n            var f = [];\n            if (F && 0 === f.length)\n              return lb(a, b, c, d);\n            a = { Rb: c, nb: a, Gb: d, Xb: f };\n            return F ? (a.Zb = "spawnThread", postMessage(a, f), 0) : Ua(a);\n          }\n          function nb(a, b, c) {\n            return F ? Q(4, 1, a, b, c) : 0;\n          }\n          function ob(a, b) {\n            if (F)\n              return Q(5, 1, a, b);\n          }\n          var pb = (a) => {\n            for (var b = 0, c = 0; c < a.length; ++c) {\n              var d = a.charCodeAt(c);\n              127 >= d ? b++ : 2047 >= d ? b += 2 : 55296 <= d && 57343 >= d ? (b += 4, ++c) : b += 3;\n            }\n            return b;\n          }, qb = (a, b, c, d) => {\n            if (!(0 < d))\n              return 0;\n            var f = c;\n            d = c + d - 1;\n            for (var g = 0; g < a.length; ++g) {\n              var k = a.charCodeAt(g);\n              if (55296 <= k && 57343 >= k) {\n                var l = a.charCodeAt(++g);\n                k = 65536 + ((k & 1023) << 10) | l & 1023;\n              }\n              if (127 >= k) {\n                if (c >= d)\n                  break;\n                b[c++] = k;\n              } else {\n                if (2047 >= k) {\n                  if (c + 1 >= d)\n                    break;\n                  b[c++] = 192 | k >> 6;\n                } else {\n                  if (65535 >= k) {\n                    if (c + 2 >= d)\n                      break;\n                    b[c++] = 224 | k >> 12;\n                  } else {\n                    if (c + 3 >= d)\n                      break;\n                    b[c++] = 240 | k >> 18;\n                    b[c++] = 128 | k >> 12 & 63;\n                  }\n                  b[c++] = 128 | k >> 6 & 63;\n                }\n                b[c++] = 128 | k & 63;\n              }\n            }\n            b[c] = 0;\n            return c - f;\n          }, rb = (a, b, c) => qb(a, t(), b, c);\n          function sb(a, b) {\n            if (F)\n              return Q(6, 1, a, b);\n          }\n          function tb(a, b, c) {\n            if (F)\n              return Q(7, 1, a, b, c);\n          }\n          function ub(a, b, c) {\n            return F ? Q(8, 1, a, b, c) : 0;\n          }\n          function vb(a, b) {\n            if (F)\n              return Q(9, 1, a, b);\n          }\n          function wb(a, b, c) {\n            if (F)\n              return Q(10, 1, a, b, c);\n          }\n          function xb(a, b, c, d) {\n            if (F)\n              return Q(11, 1, a, b, c, d);\n          }\n          function yb(a, b, c, d) {\n            if (F)\n              return Q(12, 1, a, b, c, d);\n          }\n          function zb(a, b, c, d) {\n            if (F)\n              return Q(13, 1, a, b, c, d);\n          }\n          function Ab(a) {\n            if (F)\n              return Q(14, 1, a);\n          }\n          function Bb(a, b) {\n            if (F)\n              return Q(15, 1, a, b);\n          }\n          function Cb(a, b, c) {\n            if (F)\n              return Q(16, 1, a, b, c);\n          }\n          function Db(a) {\n            if (null === a)\n              return "null";\n            var b = typeof a;\n            return "object" === b || "array" === b || "function" === b ? a.toString() : "" + a;\n          }\n          var Eb = void 0;\n          function S(a) {\n            for (var b = ""; t()[a]; )\n              b += Eb[t()[a++]];\n            return b;\n          }\n          var Fb = {}, Gb = {}, Hb = {}, Ib = void 0;\n          function T(a) {\n            throw new Ib(a);\n          }\n          function Jb(a, b, c = {}) {\n            var d = b.name;\n            a || T(`type "${d}" must have a positive integer typeid pointer`);\n            if (Gb.hasOwnProperty(a)) {\n              if (c.Ib)\n                return;\n              T(`Cannot register type \'${d}\' twice`);\n            }\n            Gb[a] = b;\n            delete Hb[a];\n            Fb.hasOwnProperty(a) && (b = Fb[a], delete Fb[a], b.forEach((f) => f()));\n          }\n          function U(a, b, c = {}) {\n            if (!("argPackAdvance" in b))\n              throw new TypeError("registerType registeredInstance requires argPackAdvance");\n            Jb(a, b, c);\n          }\n          function Kb(a, b, c) {\n            switch (b) {\n              case 0:\n                return c ? function(d) {\n                  return e()[d];\n                } : function(d) {\n                  return t()[d];\n                };\n              case 1:\n                return c ? function(d) {\n                  return v()[d >> 1];\n                } : function(d) {\n                  return ca()[d >> 1];\n                };\n              case 2:\n                return c ? function(d) {\n                  return w()[d >> 2];\n                } : function(d) {\n                  return z()[d >> 2];\n                };\n              case 3:\n                return c ? function(d) {\n                  return L[d >> 3];\n                } : function(d) {\n                  return Aa[d >> 3];\n                };\n              default:\n                throw new TypeError("Unknown integer type: " + a);\n            }\n          }\n          function Lb(a) {\n            switch (a) {\n              case 1:\n                return 0;\n              case 2:\n                return 1;\n              case 4:\n                return 2;\n              case 8:\n                return 3;\n              default:\n                throw new TypeError(`Unknown type size: ${a}`);\n            }\n          }\n          function Mb() {\n            this.mb = [void 0];\n            this.Ab = [];\n          }\n          var V = new Mb();\n          function Nb(a) {\n            a >= V.tb && 0 === --V.get(a).Bb && V.yb(a);\n          }\n          var W = (a) => {\n            a || T("Cannot use deleted val. handle = " + a);\n            return V.get(a).value;\n          }, X = (a) => {\n            switch (a) {\n              case void 0:\n                return 1;\n              case null:\n                return 2;\n              case true:\n                return 3;\n              case false:\n                return 4;\n              default:\n                return V.xb({ Bb: 1, value: a });\n            }\n          };\n          function Ob(a) {\n            return this.fromWireType(w()[a >> 2]);\n          }\n          function Pb(a, b) {\n            switch (b) {\n              case 2:\n                return function(c) {\n                  var d = this.fromWireType;\n                  m.buffer != n.buffer && p();\n                  return d.call(this, za[c >> 2]);\n                };\n              case 3:\n                return function(c) {\n                  return this.fromWireType(ha()[c >> 3]);\n                };\n              default:\n                throw new TypeError("Unknown float type: " + a);\n            }\n          }\n          var Qb = "undefined" != typeof TextDecoder ? new TextDecoder("utf-16le") : void 0, Rb = (a, b) => {\n            var c = a >> 1;\n            for (var d = c + b / 2; !(c >= d) && ca()[c]; )\n              ++c;\n            c <<= 1;\n            if (32 < c - a && Qb)\n              return Qb.decode(t().slice(a, c));\n            c = "";\n            for (d = 0; !(d >= b / 2); ++d) {\n              var f = v()[a + 2 * d >> 1];\n              if (0 == f)\n                break;\n              c += String.fromCharCode(f);\n            }\n            return c;\n          }, Sb = (a, b, c) => {\n            void 0 === c && (c = 2147483647);\n            if (2 > c)\n              return 0;\n            c -= 2;\n            var d = b;\n            c = c < 2 * a.length ? c / 2 : a.length;\n            for (var f = 0; f < c; ++f) {\n              var g = a.charCodeAt(f);\n              v()[b >> 1] = g;\n              b += 2;\n            }\n            v()[b >> 1] = 0;\n            return b - d;\n          }, Tb = (a) => 2 * a.length, Ub = (a, b) => {\n            for (var c = 0, d = ""; !(c >= b / 4); ) {\n              var f = w()[a + 4 * c >> 2];\n              if (0 == f)\n                break;\n              ++c;\n              65536 <= f ? (f -= 65536, d += String.fromCharCode(55296 | f >> 10, 56320 | f & 1023)) : d += String.fromCharCode(f);\n            }\n            return d;\n          }, Vb = (a, b, c) => {\n            void 0 === c && (c = 2147483647);\n            if (4 > c)\n              return 0;\n            var d = b;\n            c = d + c - 4;\n            for (var f = 0; f < a.length; ++f) {\n              var g = a.charCodeAt(f);\n              if (55296 <= g && 57343 >= g) {\n                var k = a.charCodeAt(++f);\n                g = 65536 + ((g & 1023) << 10) | k & 1023;\n              }\n              w()[b >> 2] = g;\n              b += 4;\n              if (b + 4 > c)\n                break;\n            }\n            w()[b >> 2] = 0;\n            return b - d;\n          }, Wb = (a) => {\n            for (var b = 0, c = 0; c < a.length; ++c) {\n              var d = a.charCodeAt(c);\n              55296 <= d && 57343 >= d && ++c;\n              b += 4;\n            }\n            return b;\n          }, Xb = (a) => {\n            if (!ya)\n              try {\n                if (a(), !Ha())\n                  try {\n                    F ? hb(K) : $a(K);\n                  } catch (b) {\n                    b instanceof Ra || "unwind" == b || C(1, b);\n                  }\n              } catch (b) {\n                b instanceof Ra || "unwind" == b || C(1, b);\n              }\n          };\n          function Yb(a) {\n            "function" === typeof Atomics.Yb && (Atomics.Yb(w(), a >> 2, a).value.then(cb), a += 128, Atomics.store(w(), a >> 2, 1));\n          }\n          A.__emscripten_thread_mailbox_await = Yb;\n          function cb() {\n            var a = bb();\n            a && (Yb(a), Xb(() => Zb()));\n          }\n          A.checkMailbox = cb;\n          function $b(a, b) {\n            var c = Gb[a];\n            if (void 0 === c) {\n              a = ac(a);\n              var d = S(a);\n              Y(a);\n              T(b + " has unknown type " + d);\n            }\n            return c;\n          }\n          var bc = {};\n          function cc(a) {\n            var b = bc[a];\n            return void 0 === b ? S(a) : b;\n          }\n          var dc = [];\n          function ec() {\n            return "object" == typeof globalThis ? globalThis : Function("return this")();\n          }\n          function fc(a) {\n            var b = dc.length;\n            dc.push(a);\n            return b;\n          }\n          function gc(a, b) {\n            for (var c = Array(a), d = 0; d < a; ++d)\n              c[d] = $b(z()[b + 4 * d >> 2], "parameter " + d);\n            return c;\n          }\n          function hc(a) {\n            if (void 0 === a)\n              return "_unknown";\n            a = a.replace(/[^a-zA-Z0-9_]/g, "$");\n            var b = a.charCodeAt(0);\n            return 48 <= b && 57 >= b ? `_${a}` : a;\n          }\n          var ic = [];\n          function jc(a, b) {\n            a = hc(a);\n            return { [a]: function() {\n              return b.apply(this, arguments);\n            } }[a];\n          }\n          function kc(a) {\n            var b = Function;\n            if (!(b instanceof Function))\n              throw new TypeError(`new_ called with constructor type ${typeof b} which is not a function`);\n            var c = jc(b.name || "unknownFunctionName", function() {\n            });\n            c.prototype = b.prototype;\n            c = new c();\n            a = b.apply(c, a);\n            return a instanceof Object ? a : c;\n          }\n          function lc(a) {\n            for (var b = "", c = 0; c < a; ++c)\n              b += (0 !== c ? ", " : "") + "arg" + c;\n            var d = "return function emval_allocator_" + a + "(constructor, argTypes, args) {\\n  var HEAPU32 = getMemory();\\n";\n            for (c = 0; c < a; ++c)\n              d += "var argType" + c + " = requireRegisteredType(HEAPU32[((argTypes)>>2)], \'parameter " + c + "\');\\nvar arg" + c + " = argType" + c + ".readValueFromPointer(args);\\nargs += argType" + c + "[\'argPackAdvance\'];\\nargTypes += 4;\\n";\n            return new Function("requireRegisteredType", "Module", "valueToHandle", "getMemory", d + ("var obj = new constructor(" + b + ");\\nreturn valueToHandle(obj);\\n}\\n"))($b, A, X, () => z());\n          }\n          var mc = {};\n          function nc(a) {\n            return -9007199254740992 > a || 9007199254740992 < a ? NaN : Number(a);\n          }\n          var Z = (a) => 0 === a % 4 && (0 !== a % 100 || 0 === a % 400), oc = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335], pc = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];\n          function rc(a, b, c, d, f, g, k) {\n            return F ? Q(17, 1, a, b, c, d, f, g, k) : -52;\n          }\n          function sc(a, b, c, d, f, g) {\n            if (F)\n              return Q(18, 1, a, b, c, d, f, g);\n          }\n          var uc = (a) => {\n            var b = pb(a) + 1, c = tc(b);\n            c && rb(a, c, b);\n            return c;\n          }, wc = (a) => {\n            var b = vc();\n            a = a();\n            fb(b);\n            return a;\n          };\n          function Q(a, b) {\n            var c = arguments.length - 2, d = arguments;\n            return wc(() => {\n              for (var f = 2 * c, g = xc(8 * f), k = g >> 3, l = 0; l < c; l++) {\n                var q = d[2 + l];\n                "bigint" == typeof q ? (L[k + 2 * l] = 1n, L[k + 2 * l + 1] = q) : (L[k + 2 * l] = 0n, ha()[k + 2 * l + 1] = q);\n              }\n              return yc(a, f, g, b);\n            });\n          }\n          var zc = [], Ac = {}, Cc = () => {\n            if (!Bc) {\n              var a = { USER: "web_user", LOGNAME: "web_user", PATH: "/", PWD: "/", HOME: "/home/web_user", LANG: ("object" == typeof navigator && navigator.languages && navigator.languages[0] || "C").replace("-", "_") + ".UTF-8", _: ma || "./this.program" }, b;\n              for (b in Ac)\n                void 0 === Ac[b] ? delete a[b] : a[b] = Ac[b];\n              var c = [];\n              for (b in a)\n                c.push(`${b}=${a[b]}`);\n              Bc = c;\n            }\n            return Bc;\n          }, Bc;\n          function Dc(a, b) {\n            if (F)\n              return Q(19, 1, a, b);\n            var c = 0;\n            Cc().forEach(function(d, f) {\n              var g = b + c;\n              f = z()[a + 4 * f >> 2] = g;\n              for (g = 0; g < d.length; ++g)\n                e()[f++ >> 0] = d.charCodeAt(g);\n              e()[f >> 0] = 0;\n              c += d.length + 1;\n            });\n            return 0;\n          }\n          function Ec(a, b) {\n            if (F)\n              return Q(20, 1, a, b);\n            var c = Cc();\n            z()[a >> 2] = c.length;\n            var d = 0;\n            c.forEach(function(f) {\n              d += f.length + 1;\n            });\n            z()[b >> 2] = d;\n            return 0;\n          }\n          function Fc(a) {\n            return F ? Q(21, 1, a) : 52;\n          }\n          function Gc(a, b, c, d) {\n            return F ? Q(22, 1, a, b, c, d) : 52;\n          }\n          function Hc(a, b, c, d) {\n            return F ? Q(23, 1, a, b, c, d) : 70;\n          }\n          var Ic = [null, [], []];\n          function Jc(a, b, c, d) {\n            if (F)\n              return Q(24, 1, a, b, c, d);\n            for (var f = 0, g = 0; g < c; g++) {\n              var k = z()[b >> 2], l = z()[b + 4 >> 2];\n              b += 8;\n              for (var q = 0; q < l; q++) {\n                var r = t()[k + q], x = Ic[a];\n                0 === r || 10 === r ? ((1 === a ? va : H)(Wa(x, 0)), x.length = 0) : x.push(r);\n              }\n              f += l;\n            }\n            z()[d >> 2] = f;\n            return 0;\n          }\n          var Kc = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], Lc = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n          function Mc(a) {\n            var b = Array(pb(a) + 1);\n            qb(a, b, 0, b.length);\n            return b;\n          }\n          var Nc = (a, b) => {\n            e().set(a, b);\n          }, Oc = (a, b, c, d) => {\n            function f(h, u, y) {\n              for (h = "number" == typeof h ? h.toString() : h || ""; h.length < u; )\n                h = y[0] + h;\n              return h;\n            }\n            function g(h, u) {\n              return f(h, u, "0");\n            }\n            function k(h, u) {\n              function y(qc) {\n                return 0 > qc ? -1 : 0 < qc ? 1 : 0;\n              }\n              var R;\n              0 === (R = y(h.getFullYear() - u.getFullYear())) && 0 === (R = y(h.getMonth() - u.getMonth())) && (R = y(h.getDate() - u.getDate()));\n              return R;\n            }\n            function l(h) {\n              switch (h.getDay()) {\n                case 0:\n                  return new Date(h.getFullYear() - 1, 11, 29);\n                case 1:\n                  return h;\n                case 2:\n                  return new Date(h.getFullYear(), 0, 3);\n                case 3:\n                  return new Date(\n                    h.getFullYear(),\n                    0,\n                    2\n                  );\n                case 4:\n                  return new Date(h.getFullYear(), 0, 1);\n                case 5:\n                  return new Date(h.getFullYear() - 1, 11, 31);\n                case 6:\n                  return new Date(h.getFullYear() - 1, 11, 30);\n              }\n            }\n            function q(h) {\n              var u = h.pb;\n              for (h = new Date(new Date(h.qb + 1900, 0, 1).getTime()); 0 < u; ) {\n                var y = h.getMonth(), R = (Z(h.getFullYear()) ? Kc : Lc)[y];\n                if (u > R - h.getDate())\n                  u -= R - h.getDate() + 1, h.setDate(1), 11 > y ? h.setMonth(y + 1) : (h.setMonth(0), h.setFullYear(h.getFullYear() + 1));\n                else {\n                  h.setDate(h.getDate() + u);\n                  break;\n                }\n              }\n              y = new Date(h.getFullYear() + 1, 0, 4);\n              u = l(new Date(\n                h.getFullYear(),\n                0,\n                4\n              ));\n              y = l(y);\n              return 0 >= k(u, h) ? 0 >= k(y, h) ? h.getFullYear() + 1 : h.getFullYear() : h.getFullYear() - 1;\n            }\n            var r = w()[d + 40 >> 2];\n            d = { Vb: w()[d >> 2], Ub: w()[d + 4 >> 2], ub: w()[d + 8 >> 2], zb: w()[d + 12 >> 2], vb: w()[d + 16 >> 2], qb: w()[d + 20 >> 2], lb: w()[d + 24 >> 2], pb: w()[d + 28 >> 2], cc: w()[d + 32 >> 2], Tb: w()[d + 36 >> 2], Wb: r ? Xa(r) : "" };\n            c = Xa(c);\n            r = {\n              "%c": "%a %b %d %H:%M:%S %Y",\n              "%D": "%m/%d/%y",\n              "%F": "%Y-%m-%d",\n              "%h": "%b",\n              "%r": "%I:%M:%S %p",\n              "%R": "%H:%M",\n              "%T": "%H:%M:%S",\n              "%x": "%m/%d/%y",\n              "%X": "%H:%M:%S",\n              "%Ec": "%c",\n              "%EC": "%C",\n              "%Ex": "%m/%d/%y",\n              "%EX": "%H:%M:%S",\n              "%Ey": "%y",\n              "%EY": "%Y",\n              "%Od": "%d",\n              "%Oe": "%e",\n              "%OH": "%H",\n              "%OI": "%I",\n              "%Om": "%m",\n              "%OM": "%M",\n              "%OS": "%S",\n              "%Ou": "%u",\n              "%OU": "%U",\n              "%OV": "%V",\n              "%Ow": "%w",\n              "%OW": "%W",\n              "%Oy": "%y"\n            };\n            for (var x in r)\n              c = c.replace(new RegExp(x, "g"), r[x]);\n            var B = "Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "), N = "January February March April May June July August September October November December".split(" ");\n            r = { "%a": (h) => B[h.lb].substring(0, 3), "%A": (h) => B[h.lb], "%b": (h) => N[h.vb].substring(0, 3), "%B": (h) => N[h.vb], "%C": (h) => g((h.qb + 1900) / 100 | 0, 2), "%d": (h) => g(h.zb, 2), "%e": (h) => f(h.zb, 2, " "), "%g": (h) => q(h).toString().substring(2), "%G": (h) => q(h), "%H": (h) => g(h.ub, 2), "%I": (h) => {\n              h = h.ub;\n              0 == h ? h = 12 : 12 < h && (h -= 12);\n              return g(h, 2);\n            }, "%j": (h) => {\n              for (var u = 0, y = 0; y <= h.vb - 1; u += (Z(h.qb + 1900) ? Kc : Lc)[y++])\n                ;\n              return g(h.zb + u, 3);\n            }, "%m": (h) => g(h.vb + 1, 2), "%M": (h) => g(h.Ub, 2), "%n": () => "\\n", "%p": (h) => 0 <= h.ub && 12 > h.ub ? "AM" : "PM", "%S": (h) => g(h.Vb, 2), "%t": () => "	", "%u": (h) => h.lb || 7, "%U": (h) => g(Math.floor((h.pb + 7 - h.lb) / 7), 2), "%V": (h) => {\n              var u = Math.floor((h.pb + 7 - (h.lb + 6) % 7) / 7);\n              2 >= (h.lb + 371 - h.pb - 2) % 7 && u++;\n              if (u)\n                53 == u && (y = (h.lb + 371 - h.pb) % 7, 4 == y || 3 == y && Z(h.qb) || (u = 1));\n              else {\n                u = 52;\n                var y = (h.lb + 7 - h.pb - 1) % 7;\n                (4 == y || 5 == y && Z(h.qb % 400 - 1)) && u++;\n              }\n              return g(u, 2);\n            }, "%w": (h) => h.lb, "%W": (h) => g(Math.floor((h.pb + 7 - (h.lb + 6) % 7) / 7), 2), "%y": (h) => (h.qb + 1900).toString().substring(2), "%Y": (h) => h.qb + 1900, "%z": (h) => {\n              h = h.Tb;\n              var u = 0 <= h;\n              h = Math.abs(h) / 60;\n              return (u ? "+" : "-") + String("0000" + (h / 60 * 100 + h % 60)).slice(-4);\n            }, "%Z": (h) => h.Wb, "%%": () => "%" };\n            c = c.replace(/%%/g, "\\0\\0");\n            for (x in r)\n              c.includes(x) && (c = c.replace(new RegExp(x, "g"), r[x](d)));\n            c = c.replace(/\\0\\0/g, "%");\n            x = Mc(c);\n            if (x.length > b)\n              return 0;\n            Nc(x, a);\n            return x.length - 1;\n          };\n          P.wb();\n          for (var Pc = Array(256), Qc = 0; 256 > Qc; ++Qc)\n            Pc[Qc] = String.fromCharCode(Qc);\n          Eb = Pc;\n          Ib = A.BindingError = class extends Error {\n            constructor(a) {\n              super(a);\n              this.name = "BindingError";\n            }\n          };\n          A.InternalError = class extends Error {\n            constructor(a) {\n              super(a);\n              this.name = "InternalError";\n            }\n          };\n          Object.assign(Mb.prototype, { get(a) {\n            return this.mb[a];\n          }, has(a) {\n            return void 0 !== this.mb[a];\n          }, xb(a) {\n            var b = this.Ab.pop() || this.mb.length;\n            this.mb[b] = a;\n            return b;\n          }, yb(a) {\n            this.mb[a] = void 0;\n            this.Ab.push(a);\n          } });\n          V.mb.push({ value: void 0 }, { value: null }, { value: true }, { value: false });\n          V.tb = V.mb.length;\n          A.count_emval_handles = function() {\n            for (var a = 0, b = V.tb; b < V.mb.length; ++b)\n              void 0 !== V.mb[b] && ++a;\n            return a;\n          };\n          var Rc = [null, Ya, Za, lb, nb, ob, sb, tb, ub, vb, wb, xb, yb, zb, Ab, Bb, Cb, rc, sc, Dc, Ec, Fc, Gc, Hc, Jc], Tc = {\n            b: function(a, b, c) {\n              new ib(a).wb(b, c);\n              jb = a;\n              kb++;\n              throw jb;\n            },\n            fa: function(a) {\n              Sc(a, !D, 1, !na, 131072, false);\n              P.Db();\n            },\n            D: function(a) {\n              F ? postMessage({ cmd: "cleanupThread", thread: a }) : Ta(a);\n            },\n            W: mb,\n            y: nb,\n            la: ob,\n            S: sb,\n            U: tb,\n            L: ub,\n            ja: vb,\n            aa: wb,\n            ia: xb,\n            F: yb,\n            T: zb,\n            Q: Ab,\n            ka: Bb,\n            R: Cb,\n            I: function(a, b, c, d, f) {\n              b = S(b);\n              c = Lb(c);\n              var g = -1 != b.indexOf("u");\n              g && (f = (1n << 64n) - 1n);\n              U(a, { name: b, fromWireType: function(k) {\n                return k;\n              }, toWireType: function(k, l) {\n                if ("bigint" != typeof l && "number" != typeof l)\n                  throw new TypeError(`Cannot convert "${Db(l)}" to ${this.name}`);\n                if (l < d || l > f)\n                  throw new TypeError(`Passing a number "${Db(l)}" from JS side to C/C++ side to an argument of type "${b}", which is outside the valid range [${d}, ${f}]!`);\n                return l;\n              }, argPackAdvance: 8, readValueFromPointer: Kb(b, c, !g), sb: null });\n            },\n            ra: function(a, b, c, d, f) {\n              var g = Lb(c);\n              b = S(b);\n              U(a, { name: b, fromWireType: function(k) {\n                return !!k;\n              }, toWireType: function(k, l) {\n                return l ? d : f;\n              }, argPackAdvance: 8, readValueFromPointer: function(k) {\n                if (1 === c)\n                  var l = e();\n                else if (2 === c)\n                  l = v();\n                else if (4 === c)\n                  l = w();\n                else\n                  throw new TypeError("Unknown boolean type size: " + b);\n                return this.fromWireType(l[k >> g]);\n              }, sb: null });\n            },\n            qa: function(a, b) {\n              b = S(b);\n              U(a, { name: b, fromWireType: function(c) {\n                var d = W(c);\n                Nb(c);\n                return d;\n              }, toWireType: function(c, d) {\n                return X(d);\n              }, argPackAdvance: 8, readValueFromPointer: Ob, sb: null });\n            },\n            H: function(a, b, c) {\n              c = Lb(c);\n              b = S(b);\n              U(a, { name: b, fromWireType: function(d) {\n                return d;\n              }, toWireType: function(d, f) {\n                return f;\n              }, argPackAdvance: 8, readValueFromPointer: Pb(b, c), sb: null });\n            },\n            t: function(a, b, c, d, f) {\n              b = S(b);\n              -1 === f && (f = 4294967295);\n              f = Lb(c);\n              var g = (l) => l;\n              if (0 === d) {\n                var k = 32 - 8 * c;\n                g = (l) => l << k >>> k;\n              }\n              c = b.includes("unsigned") ? function(l, q) {\n                return q >>> 0;\n              } : function(l, q) {\n                return q;\n              };\n              U(a, { name: b, fromWireType: g, toWireType: c, argPackAdvance: 8, readValueFromPointer: Kb(b, f, 0 !== d), sb: null });\n            },\n            m: function(a, b, c) {\n              function d(g) {\n                g >>= 2;\n                var k = z();\n                return new f(k.buffer, k[g + 1], k[g]);\n              }\n              var f = [Int8Array, Uint8Array, Int16Array, Uint16Array, Int32Array, Uint32Array, Float32Array, Float64Array, BigInt64Array, BigUint64Array][b];\n              c = S(c);\n              U(a, { name: c, fromWireType: d, argPackAdvance: 8, readValueFromPointer: d }, { Ib: true });\n            },\n            J: function(a, b) {\n              b = S(b);\n              var c = "std::string" === b;\n              U(a, { name: b, fromWireType: function(d) {\n                var f = z()[d >> 2], g = d + 4;\n                if (c)\n                  for (var k = g, l = 0; l <= f; ++l) {\n                    var q = g + l;\n                    if (l == f || 0 == t()[q]) {\n                      k = Xa(k, q - k);\n                      if (void 0 === r)\n                        var r = k;\n                      else\n                        r += String.fromCharCode(0), r += k;\n                      k = q + 1;\n                    }\n                  }\n                else {\n                  r = Array(f);\n                  for (l = 0; l < f; ++l)\n                    r[l] = String.fromCharCode(t()[g + l]);\n                  r = r.join("");\n                }\n                Y(d);\n                return r;\n              }, toWireType: function(d, f) {\n                f instanceof ArrayBuffer && (f = new Uint8Array(f));\n                var g = "string" == typeof f;\n                g || f instanceof Uint8Array || f instanceof Uint8ClampedArray || f instanceof Int8Array || T("Cannot pass non-string to std::string");\n                var k = c && g ? pb(f) : f.length;\n                var l = tc(4 + k + 1), q = l + 4;\n                z()[l >> 2] = k;\n                if (c && g)\n                  rb(f, q, k + 1);\n                else if (g)\n                  for (g = 0; g < k; ++g) {\n                    var r = f.charCodeAt(g);\n                    255 < r && (Y(q), T("String has UTF-16 code units that do not fit in 8 bits"));\n                    t()[q + g] = r;\n                  }\n                else\n                  for (g = 0; g < k; ++g)\n                    t()[q + g] = f[g];\n                null !== d && d.push(Y, l);\n                return l;\n              }, argPackAdvance: 8, readValueFromPointer: Ob, sb: function(d) {\n                Y(d);\n              } });\n            },\n            A: function(a, b, c) {\n              c = S(c);\n              if (2 === b) {\n                var d = Rb;\n                var f = Sb;\n                var g = Tb;\n                var k = () => ca();\n                var l = 1;\n              } else\n                4 === b && (d = Ub, f = Vb, g = Wb, k = () => z(), l = 2);\n              U(a, {\n                name: c,\n                fromWireType: function(q) {\n                  for (var r = z()[q >> 2], x = k(), B, N = q + 4, h = 0; h <= r; ++h) {\n                    var u = q + 4 + h * b;\n                    if (h == r || 0 == x[u >> l])\n                      N = d(N, u - N), void 0 === B ? B = N : (B += String.fromCharCode(0), B += N), N = u + b;\n                  }\n                  Y(q);\n                  return B;\n                },\n                toWireType: function(q, r) {\n                  "string" != typeof r && T(`Cannot pass non-string to C++ string type ${c}`);\n                  var x = g(r), B = tc(4 + x + b);\n                  z()[B >> 2] = x >> l;\n                  f(r, B + 4, x + b);\n                  null !== q && q.push(Y, B);\n                  return B;\n                },\n                argPackAdvance: 8,\n                readValueFromPointer: Ob,\n                sb: function(q) {\n                  Y(q);\n                }\n              });\n            },\n            sa: function(a, b) {\n              b = S(b);\n              U(a, { Lb: true, name: b, argPackAdvance: 0, fromWireType: function() {\n              }, toWireType: function() {\n              } });\n            },\n            oa: () => true,\n            O: function(a, b) {\n              a == b ? setTimeout(() => cb()) : F ? postMessage({ targetThread: a, cmd: "checkMailbox" }) : (a = P.kb[a]) && a.postMessage({ cmd: "checkMailbox" });\n            },\n            da: function() {\n              return -1;\n            },\n            ea: Yb,\n            na: function(a) {\n              E && P.kb[a].ref();\n            },\n            s: function(a, b, c) {\n              a = W(a);\n              b = $b(b, "emval::as");\n              var d = [], f = X(d);\n              z()[c >> 2] = f;\n              return b.toWireType(d, a);\n            },\n            i: function(a, b, c, d, f) {\n              a = dc[a];\n              b = W(b);\n              c = cc(c);\n              var g = [];\n              z()[d >> 2] = X(g);\n              return a(b, c, g, f);\n            },\n            u: function(a, b, c, d) {\n              a = dc[a];\n              b = W(b);\n              c = cc(c);\n              a(b, c, null, d);\n            },\n            c: Nb,\n            K: function(a, b) {\n              a = W(a);\n              b = W(b);\n              return a == b;\n            },\n            o: function(a) {\n              if (0 === a)\n                return X(ec());\n              a = cc(a);\n              return X(ec()[a]);\n            },\n            h: function(a, b) {\n              var c = gc(a, b), d = c[0];\n              b = d.name + "_$" + c.slice(1).map(function(x) {\n                return x.name;\n              }).join("_") + "$";\n              var f = ic[b];\n              if (void 0 !== f)\n                return f;\n              f = ["retType"];\n              for (var g = [d], k = "", l = 0; l < a - 1; ++l)\n                k += (0 !== l ? ", " : "") + "arg" + l, f.push("argType" + l), g.push(c[1 + l]);\n              var q = "return function " + hc("methodCaller_" + b) + "(handle, name, destructors, args) {\\n", r = 0;\n              for (l = 0; l < a - 1; ++l)\n                q += "    var arg" + l + " = argType" + l + ".readValueFromPointer(args" + (r ? "+" + r : "") + ");\\n", r += c[l + 1].argPackAdvance;\n              q += "    var rv = handle[name](" + k + ");\\n";\n              for (l = 0; l < a - 1; ++l)\n                c[l + 1].deleteObject && (q += "    argType" + l + ".deleteObject(arg" + l + ");\\n");\n              d.Lb || (q += "    return retType.toWireType(destructors, rv);\\n");\n              f.push(q + "};\\n");\n              a = kc(f).apply(null, g);\n              f = fc(a);\n              return ic[b] = f;\n            },\n            r: function(a, b) {\n              a = W(a);\n              b = W(b);\n              return X(a[b]);\n            },\n            d: function(a) {\n              4 < a && (V.get(a).Bb += 1);\n            },\n            x: function(a, b, c, d) {\n              a = W(a);\n              var f = mc[b];\n              f || (f = lc(b), mc[b] = f);\n              return f(a, c, d);\n            },\n            v: function() {\n              return X([]);\n            },\n            l: function(a) {\n              a = W(a);\n              for (var b = Array(a.length), c = 0; c < a.length; c++)\n                b[c] = a[c];\n              return X(b);\n            },\n            e: function(a) {\n              return X(cc(a));\n            },\n            k: function() {\n              return X({});\n            },\n            g: function(a) {\n              for (var b = W(a); b.length; ) {\n                var c = b.pop();\n                b.pop()(c);\n              }\n              Nb(a);\n            },\n            j: function(a, b, c) {\n              a = W(a);\n              b = W(b);\n              c = W(c);\n              a[b] = c;\n            },\n            f: function(a, b) {\n              a = $b(a, "_emval_take_value");\n              a = a.readValueFromPointer(b);\n              return X(a);\n            },\n            Z: function(a, b) {\n              a = nc(a);\n              b = nc(b);\n              a = new Date(1e3 * a);\n              w()[b >> 2] = a.getUTCSeconds();\n              w()[b + 4 >> 2] = a.getUTCMinutes();\n              w()[b + 8 >> 2] = a.getUTCHours();\n              w()[b + 12 >> 2] = a.getUTCDate();\n              w()[b + 16 >> 2] = a.getUTCMonth();\n              w()[b + 20 >> 2] = a.getUTCFullYear() - 1900;\n              w()[b + 24 >> 2] = a.getUTCDay();\n              a = (a.getTime() - Date.UTC(a.getUTCFullYear(), 0, 1, 0, 0, 0, 0)) / 864e5 | 0;\n              w()[b + 28 >> 2] = a;\n            },\n            _: function(a, b) {\n              a = nc(a);\n              b = nc(b);\n              a = new Date(1e3 * a);\n              w()[b >> 2] = a.getSeconds();\n              w()[b + 4 >> 2] = a.getMinutes();\n              w()[b + 8 >> 2] = a.getHours();\n              w()[b + 12 >> 2] = a.getDate();\n              w()[b + 16 >> 2] = a.getMonth();\n              w()[b + 20 >> 2] = a.getFullYear() - 1900;\n              w()[b + 24 >> 2] = a.getDay();\n              var c = (Z(a.getFullYear()) ? oc : pc)[a.getMonth()] + a.getDate() - 1 | 0;\n              w()[b + 28 >> 2] = c;\n              w()[b + 36 >> 2] = -(60 * a.getTimezoneOffset());\n              c = new Date(a.getFullYear(), 6, 1).getTimezoneOffset();\n              var d = new Date(a.getFullYear(), 0, 1).getTimezoneOffset();\n              a = (c != d && a.getTimezoneOffset() == Math.min(d, c)) | 0;\n              w()[b + 32 >> 2] = a;\n            },\n            $: function(a) {\n              a = nc(a);\n              var b = new Date(w()[a + 20 >> 2] + 1900, w()[a + 16 >> 2], w()[a + 12 >> 2], w()[a + 8 >> 2], w()[a + 4 >> 2], w()[a >> 2], 0), c = w()[a + 32 >> 2], d = b.getTimezoneOffset(), f = new Date(\n                b.getFullYear(),\n                6,\n                1\n              ).getTimezoneOffset(), g = new Date(b.getFullYear(), 0, 1).getTimezoneOffset(), k = Math.min(g, f);\n              0 > c ? w()[a + 32 >> 2] = Number(f != g && k == d) : 0 < c != (k == d) && (f = Math.max(g, f), b.setTime(b.getTime() + 6e4 * ((0 < c ? k : f) - d)));\n              w()[a + 24 >> 2] = b.getDay();\n              c = (Z(b.getFullYear()) ? oc : pc)[b.getMonth()] + b.getDate() - 1 | 0;\n              w()[a + 28 >> 2] = c;\n              w()[a >> 2] = b.getSeconds();\n              w()[a + 4 >> 2] = b.getMinutes();\n              w()[a + 8 >> 2] = b.getHours();\n              w()[a + 12 >> 2] = b.getDate();\n              w()[a + 16 >> 2] = b.getMonth();\n              w()[a + 20 >> 2] = b.getYear();\n              return BigInt(b.getTime() / 1e3);\n            },\n            X: rc,\n            Y: sc,\n            N: (a, b, c) => {\n              function d(r) {\n                return (r = r.toTimeString().match(/\\(([A-Za-z ]+)\\)$/)) ? r[1] : "GMT";\n              }\n              var f = (/* @__PURE__ */ new Date()).getFullYear(), g = new Date(f, 0, 1), k = new Date(f, 6, 1);\n              f = g.getTimezoneOffset();\n              var l = k.getTimezoneOffset(), q = Math.max(f, l);\n              z()[a >> 2] = 60 * q;\n              w()[b >> 2] = Number(f != l);\n              a = d(g);\n              b = d(k);\n              a = uc(a);\n              b = uc(b);\n              l < f ? (z()[c >> 2] = a, z()[c + 4 >> 2] = b) : (z()[c >> 2] = b, z()[c + 4 >> 2] = a);\n            },\n            n: () => {\n              wa("");\n            },\n            E: function() {\n            },\n            G: function() {\n              return Date.now();\n            },\n            ma: () => {\n              Ga += 1;\n              throw "unwind";\n            },\n            P: () => 2147483648,\n            q: () => performance.timeOrigin + performance.now(),\n            w: function() {\n              return E ? (init_os(), __toCommonJS(os_exports)).cpus().length : navigator.hardwareConcurrency;\n            },\n            ca: function(a, b, c, d) {\n              P.$b = b;\n              c /= 2;\n              zc.length = c;\n              b = d >> 3;\n              for (d = 0; d < c; d++)\n                zc[d] = L[b + 2 * d] ? L[b + 2 * d + 1] : ha()[b + 2 * d + 1];\n              return Rc[a].apply(null, zc);\n            },\n            M: (a) => {\n              var b = t().length;\n              a >>>= 0;\n              if (a <= b || 2147483648 < a)\n                return false;\n              for (var c = 1; 4 >= c; c *= 2) {\n                var d = b * (1 + 0.2 / c);\n                d = Math.min(d, a + 100663296);\n                var f = Math;\n                d = Math.max(a, d);\n                a: {\n                  f = f.min.call(f, 2147483648, d + (65536 - d % 65536) % 65536) - m.buffer.byteLength + 65535 >>> 16;\n                  try {\n                    m.grow(f);\n                    p();\n                    var g = 1;\n                    break a;\n                  } catch (k) {\n                  }\n                  g = void 0;\n                }\n                if (g)\n                  return true;\n              }\n              return false;\n            },\n            ga: Dc,\n            ha: Ec,\n            V: $a,\n            z: Fc,\n            C: Gc,\n            ba: Hc,\n            B: Jc,\n            a: m || A.wasmMemory,\n            pa: Oc,\n            p: (a, b, c, d) => Oc(a, b, c, d)\n          };\n          (function() {\n            function a(c, d) {\n              J = c = c.exports;\n              P.Eb.push(J.Ya);\n              Ca = J.$a;\n              Ea.unshift(J.ta);\n              xa = d;\n              La();\n              return c;\n            }\n            var b = { a: Tc };\n            Ka();\n            if (A.instantiateWasm)\n              try {\n                return A.instantiateWasm(b, a);\n              } catch (c) {\n                H("Module.instantiateWasm callback failed with error: " + c), ka(c);\n              }\n            Qa(b, function(c) {\n              a(c.instance, c.module);\n            }).catch(ka);\n            return {};\n          })();\n          A._OrtInit = (a, b) => (A._OrtInit = J.ua)(a, b);\n          A._OrtGetLastError = (a, b) => (A._OrtGetLastError = J.va)(a, b);\n          A._OrtCreateSessionOptions = (a, b, c, d, f, g, k, l, q, r) => (A._OrtCreateSessionOptions = J.wa)(a, b, c, d, f, g, k, l, q, r);\n          A._OrtAppendExecutionProvider = (a, b) => (A._OrtAppendExecutionProvider = J.xa)(a, b);\n          A._OrtAddFreeDimensionOverride = (a, b, c) => (A._OrtAddFreeDimensionOverride = J.ya)(a, b, c);\n          A._OrtAddSessionConfigEntry = (a, b, c) => (A._OrtAddSessionConfigEntry = J.za)(a, b, c);\n          A._OrtReleaseSessionOptions = (a) => (A._OrtReleaseSessionOptions = J.Aa)(a);\n          A._OrtCreateSession = (a, b, c) => (A._OrtCreateSession = J.Ba)(a, b, c);\n          A._OrtReleaseSession = (a) => (A._OrtReleaseSession = J.Ca)(a);\n          A._OrtGetInputOutputCount = (a, b, c) => (A._OrtGetInputOutputCount = J.Da)(a, b, c);\n          A._OrtGetInputName = (a, b) => (A._OrtGetInputName = J.Ea)(a, b);\n          A._OrtGetOutputName = (a, b) => (A._OrtGetOutputName = J.Fa)(a, b);\n          A._OrtFree = (a) => (A._OrtFree = J.Ga)(a);\n          A._OrtCreateTensor = (a, b, c, d, f, g) => (A._OrtCreateTensor = J.Ha)(a, b, c, d, f, g);\n          A._OrtGetTensorData = (a, b, c, d, f) => (A._OrtGetTensorData = J.Ia)(a, b, c, d, f);\n          A._OrtReleaseTensor = (a) => (A._OrtReleaseTensor = J.Ja)(a);\n          A._OrtCreateRunOptions = (a, b, c, d) => (A._OrtCreateRunOptions = J.Ka)(a, b, c, d);\n          A._OrtAddRunConfigEntry = (a, b, c) => (A._OrtAddRunConfigEntry = J.La)(a, b, c);\n          A._OrtReleaseRunOptions = (a) => (A._OrtReleaseRunOptions = J.Ma)(a);\n          A._OrtCreateBinding = (a) => (A._OrtCreateBinding = J.Na)(a);\n          A._OrtBindInput = (a, b, c) => (A._OrtBindInput = J.Oa)(a, b, c);\n          A._OrtBindOutput = (a, b, c, d) => (A._OrtBindOutput = J.Pa)(a, b, c, d);\n          A._OrtClearBoundOutputs = (a) => (A._OrtClearBoundOutputs = J.Qa)(a);\n          A._OrtReleaseBinding = (a) => (A._OrtReleaseBinding = J.Ra)(a);\n          A._OrtRunWithBinding = (a, b, c, d, f) => (A._OrtRunWithBinding = J.Sa)(a, b, c, d, f);\n          A._OrtRun = (a, b, c, d, f, g, k, l) => (A._OrtRun = J.Ta)(a, b, c, d, f, g, k, l);\n          A._OrtEndProfiling = (a) => (A._OrtEndProfiling = J.Ua)(a);\n          var bb = A._pthread_self = () => (bb = A._pthread_self = J.Va)(), tc = A._malloc = (a) => (tc = A._malloc = J.Wa)(a), Y = A._free = (a) => (Y = A._free = J.Xa)(a);\n          A.__emscripten_tls_init = () => (A.__emscripten_tls_init = J.Ya)();\n          var ac = (a) => (ac = J.Za)(a);\n          A.__embind_initialize_bindings = () => (A.__embind_initialize_bindings = J._a)();\n          var Sc = A.__emscripten_thread_init = (a, b, c, d, f, g) => (Sc = A.__emscripten_thread_init = J.ab)(a, b, c, d, f, g);\n          A.__emscripten_thread_crashed = () => (A.__emscripten_thread_crashed = J.bb)();\n          var yc = (a, b, c, d) => (yc = J.cb)(a, b, c, d), ab = (a) => (ab = J.db)(a), hb = A.__emscripten_thread_exit = (a) => (hb = A.__emscripten_thread_exit = J.eb)(a), Zb = A.__emscripten_check_mailbox = () => (Zb = A.__emscripten_check_mailbox = J.fb)(), eb = (a, b) => (eb = J.gb)(a, b), vc = () => (vc = J.hb)(), fb = (a) => (fb = J.ib)(a), xc = (a) => (xc = J.jb)(a);\n          A.keepRuntimeAlive = Ha;\n          A.wasmMemory = m;\n          A.stackAlloc = xc;\n          A.stackSave = vc;\n          A.stackRestore = fb;\n          A.UTF8ToString = Xa;\n          A.stringToUTF8 = rb;\n          A.lengthBytesUTF8 = pb;\n          A.ExitStatus = Ra;\n          A.PThread = P;\n          var Uc;\n          Ja = function Vc() {\n            Uc || Wc();\n            Uc || (Ja = Vc);\n          };\n          function Wc() {\n            function a() {\n              if (!Uc && (Uc = true, A.calledRun = true, !ya)) {\n                F || db(Ea);\n                ja(A);\n                if (A.onRuntimeInitialized)\n                  A.onRuntimeInitialized();\n                if (!F) {\n                  if (A.postRun)\n                    for ("function" == typeof A.postRun && (A.postRun = [A.postRun]); A.postRun.length; ) {\n                      var b = A.postRun.shift();\n                      Fa.unshift(b);\n                    }\n                  db(Fa);\n                }\n              }\n            }\n            if (!(0 < M))\n              if (F)\n                ja(A), F || db(Ea), startWorker(A);\n              else {\n                if (A.preRun)\n                  for ("function" == typeof A.preRun && (A.preRun = [A.preRun]); A.preRun.length; )\n                    Da.unshift(A.preRun.shift());\n                db(Da);\n                0 < M || (A.setStatus ? (A.setStatus("Running..."), setTimeout(function() {\n                  setTimeout(\n                    function() {\n                      A.setStatus("");\n                    },\n                    1\n                  );\n                  a();\n                }, 1)) : a());\n              }\n          }\n          if (A.preInit)\n            for ("function" == typeof A.preInit && (A.preInit = [A.preInit]); 0 < A.preInit.length; )\n              A.preInit.pop()();\n          Wc();\n          return moduleArg.ready;\n        };\n      })();\n      if (typeof exports === "object" && typeof module === "object")\n        module.exports = ortWasmThreaded;\n      else if (typeof define === "function" && define["amd"])\n        define([], () => ortWasmThreaded);\n    }\n  });\n\n  // web/lib/wasm/binding/ort-wasm-threaded.worker.js\n  var require_ort_wasm_threaded_worker = __commonJS({\n    "web/lib/wasm/binding/ort-wasm-threaded.worker.js"(exports, module) {\n      module.exports = \'"use strict";var Module={};var ENVIRONMENT_IS_NODE=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string";if(ENVIRONMENT_IS_NODE){var nodeWorkerThreads=require("worker_threads");var parentPort=nodeWorkerThreads.parentPort;parentPort.on("message",data=>onmessage({data:data}));var fs=require("fs");Object.assign(global,{self:global,require:require,Module:Module,location:{href:__filename},Worker:nodeWorkerThreads.Worker,importScripts:f=>(0,eval)(fs.readFileSync(f,"utf8")+"//# sourceURL="+f),postMessage:msg=>parentPort.postMessage(msg),performance:global.performance||{now:Date.now}})}var initializedJS=false;function threadPrintErr(){var text=Array.prototype.slice.call(arguments).join(" ");if(ENVIRONMENT_IS_NODE){fs.writeSync(2,text+"\\\\n");return}console.error(text)}function threadAlert(){var text=Array.prototype.slice.call(arguments).join(" ");postMessage({cmd:"alert",text:text,threadId:Module["_pthread_self"]()})}var err=threadPrintErr;self.alert=threadAlert;Module["instantiateWasm"]=(info,receiveInstance)=>{var module=Module["wasmModule"];Module["wasmModule"]=null;var instance=new WebAssembly.Instance(module,info);return receiveInstance(instance)};self.onunhandledrejection=e=>{throw e.reason??e};function handleMessage(e){try{if(e.data.cmd==="load"){let messageQueue=[];self.onmessage=e=>messageQueue.push(e);self.startWorker=instance=>{Module=instance;postMessage({"cmd":"loaded"});for(let msg of messageQueue){handleMessage(msg)}self.onmessage=handleMessage};Module["wasmModule"]=e.data.wasmModule;for(const handler of e.data.handlers){Module[handler]=(...args)=>{postMessage({cmd:"callHandler",handler:handler,args:args})}}Module["wasmMemory"]=e.data.wasmMemory;Module["buffer"]=Module["wasmMemory"].buffer;Module["ENVIRONMENT_IS_PTHREAD"]=true;if(typeof e.data.urlOrBlob=="string"){importScripts(e.data.urlOrBlob)}else{var objectUrl=URL.createObjectURL(e.data.urlOrBlob);importScripts(objectUrl);URL.revokeObjectURL(objectUrl)}ortWasmThreaded(Module)}else if(e.data.cmd==="run"){Module["__emscripten_thread_init"](e.data.pthread_ptr,/*isMainBrowserThread=*/0,/*isMainRuntimeThread=*/0,/*canBlock=*/1);Module["__emscripten_thread_mailbox_await"](e.data.pthread_ptr);Module["establishStackSpace"]();Module["PThread"].receiveObjectTransfer(e.data);Module["PThread"].threadInitTLS();if(!initializedJS){Module["__embind_initialize_bindings"]();initializedJS=true}try{Module["invokeEntryPoint"](e.data.start_routine,e.data.arg)}catch(ex){if(ex!="unwind"){throw ex}}}else if(e.data.cmd==="cancel"){if(Module["_pthread_self"]()){Module["__emscripten_thread_exit"](-1)}}else if(e.data.target==="setimmediate"){}else if(e.data.cmd==="checkMailbox"){if(initializedJS){Module["checkMailbox"]()}}else if(e.data.cmd){err("worker.js received unknown command "+e.data.cmd);err(e.data)}}catch(ex){if(Module["__emscripten_thread_crashed"]){Module["__emscripten_thread_crashed"]()}throw ex}}self.onmessage=handleMessage;\\n\';\n    }\n  });\n\n  // nodejs-ignore:node:path\n  var join = void 0;\n\n  // web/lib/wasm/wasm-factory.ts\n  var ortWasmFactory = true ? require_ort_wasm() : null;\n  var ortWasmFactoryThreaded = true ? true ? require_ort_wasm_threaded() : null : ortWasmFactory;\n  var wasm;\n  var initialized = false;\n  var initializing = false;\n  var aborted = false;\n  var isMultiThreadSupported = () => {\n    try {\n      if (typeof SharedArrayBuffer === "undefined") {\n        return false;\n      }\n      if (typeof MessageChannel !== "undefined") {\n        new MessageChannel().port1.postMessage(new SharedArrayBuffer(1));\n      }\n      return WebAssembly.validate(new Uint8Array([\n        0,\n        97,\n        115,\n        109,\n        1,\n        0,\n        0,\n        0,\n        1,\n        4,\n        1,\n        96,\n        0,\n        0,\n        3,\n        2,\n        1,\n        0,\n        5,\n        4,\n        1,\n        3,\n        1,\n        1,\n        10,\n        11,\n        1,\n        9,\n        0,\n        65,\n        0,\n        254,\n        16,\n        2,\n        0,\n        26,\n        11\n      ]));\n    } catch (e) {\n      return false;\n    }\n  };\n  var isSimdSupported = () => {\n    try {\n      return WebAssembly.validate(new Uint8Array([\n        0,\n        97,\n        115,\n        109,\n        1,\n        0,\n        0,\n        0,\n        1,\n        4,\n        1,\n        96,\n        0,\n        0,\n        3,\n        2,\n        1,\n        0,\n        10,\n        30,\n        1,\n        28,\n        0,\n        65,\n        0,\n        253,\n        15,\n        253,\n        12,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        253,\n        186,\n        1,\n        26,\n        11\n      ]));\n    } catch (e) {\n      return false;\n    }\n  };\n  var getWasmFileName = (useSimd, useThreads) => {\n    if (useThreads) {\n      return useSimd ? "ort-wasm-simd-threaded.wasm" : "ort-wasm-threaded.wasm";\n    } else {\n      return useSimd ? "ort-wasm-simd.wasm" : "ort-wasm.wasm";\n    }\n  };\n  var initializeWebAssembly = async (flags) => {\n    if (initialized) {\n      return Promise.resolve();\n    }\n    if (initializing) {\n      throw new Error("multiple calls to \'initializeWebAssembly()\' detected.");\n    }\n    if (aborted) {\n      throw new Error("previous call to \'initializeWebAssembly()\' failed.");\n    }\n    initializing = true;\n    const timeout = flags.initTimeout;\n    const numThreads = flags.numThreads;\n    const simd = flags.simd;\n    const useThreads = numThreads > 1 && isMultiThreadSupported();\n    const useSimd = simd && isSimdSupported();\n    const wasmPaths = flags.wasmPaths;\n    const wasmPrefixOverride = typeof wasmPaths === "string" ? wasmPaths : void 0;\n    const wasmFileName = getWasmFileName(useSimd, useThreads);\n    const wasmPathOverride = typeof wasmPaths === "object" ? wasmPaths[wasmFileName] : void 0;\n    let isTimeout = false;\n    const tasks = [];\n    if (timeout > 0) {\n      tasks.push(new Promise((resolve) => {\n        setTimeout(() => {\n          isTimeout = true;\n          resolve();\n        }, timeout);\n      }));\n    }\n    tasks.push(new Promise((resolve, reject) => {\n      const factory = useThreads ? ortWasmFactoryThreaded : ortWasmFactory;\n      const config = {\n        locateFile: (fileName, scriptDirectory) => {\n          if (useThreads && fileName.endsWith(".worker.js") && typeof Blob !== "undefined") {\n            return URL.createObjectURL(new Blob(\n              [\n                // This require() function is handled by esbuild plugin to load file content as string.\n                // eslint-disable-next-line @typescript-eslint/no-require-imports\n                require_ort_wasm_threaded_worker()\n              ],\n              { type: "text/javascript" }\n            ));\n          }\n          if (fileName.endsWith(".wasm")) {\n            if (wasmPathOverride) {\n              return wasmPathOverride;\n            }\n            const prefix = wasmPrefixOverride ?? scriptDirectory;\n            if (false) {\n              if (wasmFileName === "ort-wasm-simd.wasm") {\n                return prefix + "ort-wasm-simd.jsep.wasm";\n              } else if (wasmFileName === "ort-wasm-simd-threaded.wasm") {\n                return prefix + "ort-wasm-simd-threaded.jsep.wasm";\n              }\n            }\n            return prefix + wasmFileName;\n          }\n          return scriptDirectory + fileName;\n        }\n      };\n      if (useThreads) {\n        if (typeof Blob === "undefined") {\n          config.mainScriptUrlOrBlob = join(__dirname, "ort-wasm-threaded.js");\n        } else {\n          const scriptSourceCode = `var ortWasmThreaded=${factory.toString()};`;\n          config.mainScriptUrlOrBlob = new Blob([scriptSourceCode], { type: "text/javascript" });\n        }\n      }\n      factory(config).then(\n        // wasm module initialized successfully\n        (module) => {\n          initializing = false;\n          initialized = true;\n          wasm = module;\n          resolve();\n        },\n        // wasm module failed to initialize\n        (what) => {\n          initializing = false;\n          aborted = true;\n          reject(what);\n        }\n      );\n    }));\n    await Promise.race(tasks);\n    if (isTimeout) {\n      throw new Error(`WebAssembly backend initializing failed due to timeout: ${timeout}ms`);\n    }\n  };\n  var getInstance = () => {\n    if (initialized && wasm) {\n      return wasm;\n    }\n    throw new Error("WebAssembly is not initialized yet.");\n  };\n\n  // web/lib/wasm/wasm-utils.ts\n  var allocWasmString = (data, allocs) => {\n    const wasm2 = getInstance();\n    const dataLength = wasm2.lengthBytesUTF8(data) + 1;\n    const dataOffset = wasm2._malloc(dataLength);\n    wasm2.stringToUTF8(data, dataOffset, dataLength);\n    allocs.push(dataOffset);\n    return dataOffset;\n  };\n  var iterateExtraOptions = (options, prefix, seen, handler) => {\n    if (typeof options == "object" && options !== null) {\n      if (seen.has(options)) {\n        throw new Error("Circular reference in options");\n      } else {\n        seen.add(options);\n      }\n    }\n    Object.entries(options).forEach(([key, value]) => {\n      const name = prefix ? prefix + key : key;\n      if (typeof value === "object") {\n        iterateExtraOptions(value, name + ".", seen, handler);\n      } else if (typeof value === "string" || typeof value === "number") {\n        handler(name, value.toString());\n      } else if (typeof value === "boolean") {\n        handler(name, value ? "1" : "0");\n      } else {\n        throw new Error(`Can\'t handle extra config type: ${typeof value}`);\n      }\n    });\n  };\n  var checkLastError = (message) => {\n    const wasm2 = getInstance();\n    const stack = wasm2.stackSave();\n    try {\n      const paramsOffset = wasm2.stackAlloc(8);\n      wasm2._OrtGetLastError(paramsOffset, paramsOffset + 4);\n      const errorCode = wasm2.HEAP32[paramsOffset / 4];\n      const errorMessagePointer = wasm2.HEAPU32[paramsOffset / 4 + 1];\n      const errorMessage = errorMessagePointer ? wasm2.UTF8ToString(errorMessagePointer) : "";\n      throw new Error(`${message} ERROR_CODE: ${errorCode}, ERROR_MESSAGE: ${errorMessage}`);\n    } finally {\n      wasm2.stackRestore(stack);\n    }\n  };\n\n  // web/lib/wasm/run-options.ts\n  var setRunOptions = (options) => {\n    const wasm2 = getInstance();\n    let runOptionsHandle = 0;\n    const allocs = [];\n    const runOptions = options || {};\n    try {\n      if (options?.logSeverityLevel === void 0) {\n        runOptions.logSeverityLevel = 2;\n      } else if (typeof options.logSeverityLevel !== "number" || !Number.isInteger(options.logSeverityLevel) || options.logSeverityLevel < 0 || options.logSeverityLevel > 4) {\n        throw new Error(`log serverity level is not valid: ${options.logSeverityLevel}`);\n      }\n      if (options?.logVerbosityLevel === void 0) {\n        runOptions.logVerbosityLevel = 0;\n      } else if (typeof options.logVerbosityLevel !== "number" || !Number.isInteger(options.logVerbosityLevel)) {\n        throw new Error(`log verbosity level is not valid: ${options.logVerbosityLevel}`);\n      }\n      if (options?.terminate === void 0) {\n        runOptions.terminate = false;\n      }\n      let tagDataOffset = 0;\n      if (options?.tag !== void 0) {\n        tagDataOffset = allocWasmString(options.tag, allocs);\n      }\n      runOptionsHandle = wasm2._OrtCreateRunOptions(\n        runOptions.logSeverityLevel,\n        runOptions.logVerbosityLevel,\n        !!runOptions.terminate,\n        tagDataOffset\n      );\n      if (runOptionsHandle === 0) {\n        checkLastError("Can\'t create run options.");\n      }\n      if (options?.extra !== void 0) {\n        iterateExtraOptions(options.extra, "", /* @__PURE__ */ new WeakSet(), (key, value) => {\n          const keyDataOffset = allocWasmString(key, allocs);\n          const valueDataOffset = allocWasmString(value, allocs);\n          if (wasm2._OrtAddRunConfigEntry(runOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n            checkLastError(`Can\'t set a run config entry: ${key} - ${value}.`);\n          }\n        });\n      }\n      return [runOptionsHandle, allocs];\n    } catch (e) {\n      if (runOptionsHandle !== 0) {\n        wasm2._OrtReleaseRunOptions(runOptionsHandle);\n      }\n      allocs.forEach((alloc) => wasm2._free(alloc));\n      throw e;\n    }\n  };\n\n  // web/lib/wasm/session-options.ts\n  var getGraphOptimzationLevel = (graphOptimizationLevel) => {\n    switch (graphOptimizationLevel) {\n      case "disabled":\n        return 0;\n      case "basic":\n        return 1;\n      case "extended":\n        return 2;\n      case "all":\n        return 99;\n      default:\n        throw new Error(`unsupported graph optimization level: ${graphOptimizationLevel}`);\n    }\n  };\n  var getExecutionMode = (executionMode) => {\n    switch (executionMode) {\n      case "sequential":\n        return 0;\n      case "parallel":\n        return 1;\n      default:\n        throw new Error(`unsupported execution mode: ${executionMode}`);\n    }\n  };\n  var appendDefaultOptions = (options) => {\n    if (!options.extra) {\n      options.extra = {};\n    }\n    if (!options.extra.session) {\n      options.extra.session = {};\n    }\n    const session = options.extra.session;\n    if (!session.use_ort_model_bytes_directly) {\n      session.use_ort_model_bytes_directly = "1";\n    }\n    if (options.executionProviders && options.executionProviders.some((ep) => (typeof ep === "string" ? ep : ep.name) === "webgpu")) {\n      options.enableMemPattern = false;\n    }\n  };\n  var setExecutionProviders = (sessionOptionsHandle, executionProviders, allocs) => {\n    for (const ep of executionProviders) {\n      let epName = typeof ep === "string" ? ep : ep.name;\n      switch (epName) {\n        case "xnnpack":\n          epName = "XNNPACK";\n          break;\n        case "webnn":\n          epName = "WEBNN";\n          if (typeof ep !== "string") {\n            const webnnOptions = ep;\n            if (webnnOptions?.deviceType) {\n              const keyDataOffset = allocWasmString("deviceType", allocs);\n              const valueDataOffset = allocWasmString(webnnOptions.deviceType, allocs);\n              if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n                checkLastError(`Can\'t set a session config entry: \'deviceType\' - ${webnnOptions.deviceType}.`);\n              }\n            }\n            if (webnnOptions?.powerPreference) {\n              const keyDataOffset = allocWasmString("powerPreference", allocs);\n              const valueDataOffset = allocWasmString(webnnOptions.powerPreference, allocs);\n              if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n                checkLastError(\n                  `Can\'t set a session config entry: \'powerPreference\' - ${webnnOptions.powerPreference}.`\n                );\n              }\n            }\n          }\n          break;\n        case "webgpu":\n          epName = "JS";\n          if (typeof ep !== "string") {\n            const webgpuOptions = ep;\n            if (webgpuOptions?.preferredLayout) {\n              if (webgpuOptions.preferredLayout !== "NCHW" && webgpuOptions.preferredLayout !== "NHWC") {\n                throw new Error(`preferredLayout must be either \'NCHW\' or \'NHWC\': ${webgpuOptions.preferredLayout}`);\n              }\n              const keyDataOffset = allocWasmString("preferredLayout", allocs);\n              const valueDataOffset = allocWasmString(webgpuOptions.preferredLayout, allocs);\n              if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n                checkLastError(\n                  `Can\'t set a session config entry: \'preferredLayout\' - ${webgpuOptions.preferredLayout}.`\n                );\n              }\n            }\n          }\n          break;\n        case "wasm":\n        case "cpu":\n          continue;\n        default:\n          throw new Error(`not supported execution provider: ${epName}`);\n      }\n      const epNameDataOffset = allocWasmString(epName, allocs);\n      if (getInstance()._OrtAppendExecutionProvider(sessionOptionsHandle, epNameDataOffset) !== 0) {\n        checkLastError(`Can\'t append execution provider: ${epName}.`);\n      }\n    }\n  };\n  var setSessionOptions = (options) => {\n    const wasm2 = getInstance();\n    let sessionOptionsHandle = 0;\n    const allocs = [];\n    const sessionOptions = options || {};\n    appendDefaultOptions(sessionOptions);\n    try {\n      const graphOptimizationLevel = getGraphOptimzationLevel(sessionOptions.graphOptimizationLevel ?? "all");\n      const executionMode = getExecutionMode(sessionOptions.executionMode ?? "sequential");\n      const logIdDataOffset = typeof sessionOptions.logId === "string" ? allocWasmString(sessionOptions.logId, allocs) : 0;\n      const logSeverityLevel = sessionOptions.logSeverityLevel ?? 2;\n      if (!Number.isInteger(logSeverityLevel) || logSeverityLevel < 0 || logSeverityLevel > 4) {\n        throw new Error(`log serverity level is not valid: ${logSeverityLevel}`);\n      }\n      const logVerbosityLevel = sessionOptions.logVerbosityLevel ?? 0;\n      if (!Number.isInteger(logVerbosityLevel) || logVerbosityLevel < 0 || logVerbosityLevel > 4) {\n        throw new Error(`log verbosity level is not valid: ${logVerbosityLevel}`);\n      }\n      const optimizedModelFilePathOffset = typeof sessionOptions.optimizedModelFilePath === "string" ? allocWasmString(sessionOptions.optimizedModelFilePath, allocs) : 0;\n      sessionOptionsHandle = wasm2._OrtCreateSessionOptions(\n        graphOptimizationLevel,\n        !!sessionOptions.enableCpuMemArena,\n        !!sessionOptions.enableMemPattern,\n        executionMode,\n        !!sessionOptions.enableProfiling,\n        0,\n        logIdDataOffset,\n        logSeverityLevel,\n        logVerbosityLevel,\n        optimizedModelFilePathOffset\n      );\n      if (sessionOptionsHandle === 0) {\n        checkLastError("Can\'t create session options.");\n      }\n      if (sessionOptions.executionProviders) {\n        setExecutionProviders(sessionOptionsHandle, sessionOptions.executionProviders, allocs);\n      }\n      if (sessionOptions.freeDimensionOverrides) {\n        for (const [name, value] of Object.entries(sessionOptions.freeDimensionOverrides)) {\n          if (typeof name !== "string") {\n            throw new Error(`free dimension override name must be a string: ${name}`);\n          }\n          if (typeof value !== "number" || !Number.isInteger(value) || value < 0) {\n            throw new Error(`free dimension override value must be a non-negative integer: ${value}`);\n          }\n          const nameOffset = allocWasmString(name, allocs);\n          if (wasm2._OrtAddFreeDimensionOverride(sessionOptionsHandle, nameOffset, value) !== 0) {\n            checkLastError(`Can\'t set a free dimension override: ${name} - ${value}.`);\n          }\n        }\n      }\n      if (sessionOptions.extra !== void 0) {\n        iterateExtraOptions(sessionOptions.extra, "", /* @__PURE__ */ new WeakSet(), (key, value) => {\n          const keyDataOffset = allocWasmString(key, allocs);\n          const valueDataOffset = allocWasmString(value, allocs);\n          if (wasm2._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n            checkLastError(`Can\'t set a session config entry: ${key} - ${value}.`);\n          }\n        });\n      }\n      return [sessionOptionsHandle, allocs];\n    } catch (e) {\n      if (sessionOptionsHandle !== 0) {\n        wasm2._OrtReleaseSessionOptions(sessionOptionsHandle);\n      }\n      allocs.forEach((alloc) => wasm2._free(alloc));\n      throw e;\n    }\n  };\n\n  // web/lib/wasm/wasm-common.ts\n  var tensorDataTypeStringToEnum = (type) => {\n    switch (type) {\n      case "int8":\n        return 3 /* int8 */;\n      case "uint8":\n        return 2 /* uint8 */;\n      case "bool":\n        return 9 /* bool */;\n      case "int16":\n        return 5 /* int16 */;\n      case "uint16":\n        return 4 /* uint16 */;\n      case "int32":\n        return 6 /* int32 */;\n      case "uint32":\n        return 12 /* uint32 */;\n      case "float16":\n        return 10 /* float16 */;\n      case "float32":\n        return 1 /* float */;\n      case "float64":\n        return 11 /* double */;\n      case "string":\n        return 8 /* string */;\n      case "int64":\n        return 7 /* int64 */;\n      case "uint64":\n        return 13 /* uint64 */;\n      default:\n        throw new Error(`unsupported data type: ${type}`);\n    }\n  };\n  var tensorDataTypeEnumToString = (typeProto) => {\n    switch (typeProto) {\n      case 3 /* int8 */:\n        return "int8";\n      case 2 /* uint8 */:\n        return "uint8";\n      case 9 /* bool */:\n        return "bool";\n      case 5 /* int16 */:\n        return "int16";\n      case 4 /* uint16 */:\n        return "uint16";\n      case 6 /* int32 */:\n        return "int32";\n      case 12 /* uint32 */:\n        return "uint32";\n      case 10 /* float16 */:\n        return "float16";\n      case 1 /* float */:\n        return "float32";\n      case 11 /* double */:\n        return "float64";\n      case 8 /* string */:\n        return "string";\n      case 7 /* int64 */:\n        return "int64";\n      case 13 /* uint64 */:\n        return "uint64";\n      default:\n        throw new Error(`unsupported data type: ${typeProto}`);\n    }\n  };\n  var getTensorElementSize = (dateType) => [void 0, 4, 1, 1, 2, 2, 4, 8, void 0, 1, 2, 8, 4, 8, void 0, void 0, void 0][dateType];\n  var tensorTypeToTypedArrayConstructor = (type) => {\n    switch (type) {\n      case "float16":\n        return Uint16Array;\n      case "float32":\n        return Float32Array;\n      case "uint8":\n        return Uint8Array;\n      case "int8":\n        return Int8Array;\n      case "uint16":\n        return Uint16Array;\n      case "int16":\n        return Int16Array;\n      case "int32":\n        return Int32Array;\n      case "bool":\n        return Uint8Array;\n      case "float64":\n        return Float64Array;\n      case "uint32":\n        return Uint32Array;\n      case "int64":\n        return BigInt64Array;\n      case "uint64":\n        return BigUint64Array;\n      default:\n        throw new Error(`unsupported type: ${type}`);\n    }\n  };\n  var logLevelStringToEnum = (logLevel) => {\n    switch (logLevel) {\n      case "verbose":\n        return 0;\n      case "info":\n        return 1;\n      case "warning":\n        return 2;\n      case "error":\n        return 3;\n      case "fatal":\n        return 4;\n      default:\n        throw new Error(`unsupported logging level: ${logLevel}`);\n    }\n  };\n  var isGpuBufferSupportedType = (type) => type === "float32" || type === "int32" || type === "int64" || type === "bool" || type === "float16" || type === "uint32";\n  var dataLocationStringToEnum = (location) => {\n    switch (location) {\n      case "none":\n        return 0;\n      case "cpu":\n        return 1;\n      case "cpu-pinned":\n        return 2;\n      case "texture":\n        return 3;\n      case "gpu-buffer":\n        return 4;\n      default:\n        throw new Error(`unsupported data location: ${location}`);\n    }\n  };\n\n  // web/lib/wasm/wasm-core-impl.ts\n  var getSessionInputOutputCount = (sessionHandle) => {\n    const wasm2 = getInstance();\n    const stack = wasm2.stackSave();\n    try {\n      const dataOffset = wasm2.stackAlloc(8);\n      const errorCode = wasm2._OrtGetInputOutputCount(sessionHandle, dataOffset, dataOffset + 4);\n      if (errorCode !== 0) {\n        checkLastError("Can\'t get session input/output count.");\n      }\n      return [wasm2.HEAP32[dataOffset / 4], wasm2.HEAP32[dataOffset / 4 + 1]];\n    } finally {\n      wasm2.stackRestore(stack);\n    }\n  };\n  var initOrt = (numThreads, loggingLevel) => {\n    const errorCode = getInstance()._OrtInit(numThreads, loggingLevel);\n    if (errorCode !== 0) {\n      checkLastError("Can\'t initialize onnxruntime.");\n    }\n  };\n  var initRuntime = async (env) => {\n    initOrt(env.wasm.numThreads, logLevelStringToEnum(env.logLevel));\n    if (false) {\n      const initJsep = null.init;\n      await initJsep(getInstance(), env);\n    }\n  };\n  var activeSessions = /* @__PURE__ */ new Map();\n  var createSessionAllocate = (model) => {\n    const wasm2 = getInstance();\n    const modelDataOffset = wasm2._malloc(model.byteLength);\n    if (modelDataOffset === 0) {\n      throw new Error(`Can\'t create a session. failed to allocate a buffer of size ${model.byteLength}.`);\n    }\n    wasm2.HEAPU8.set(model, modelDataOffset);\n    return [modelDataOffset, model.byteLength];\n  };\n  var createSessionFinalize = (modelData, options) => {\n    const wasm2 = getInstance();\n    let sessionHandle = 0;\n    let sessionOptionsHandle = 0;\n    let ioBindingHandle = 0;\n    let allocs = [];\n    const inputNamesUTF8Encoded = [];\n    const outputNamesUTF8Encoded = [];\n    try {\n      [sessionOptionsHandle, allocs] = setSessionOptions(options);\n      sessionHandle = wasm2._OrtCreateSession(modelData[0], modelData[1], sessionOptionsHandle);\n      if (sessionHandle === 0) {\n        checkLastError("Can\'t create a session.");\n      }\n      const [inputCount, outputCount] = getSessionInputOutputCount(sessionHandle);\n      const inputNames = [];\n      const outputNames = [];\n      const outputPreferredLocations = [];\n      for (let i = 0; i < inputCount; i++) {\n        const name = wasm2._OrtGetInputName(sessionHandle, i);\n        if (name === 0) {\n          checkLastError("Can\'t get an input name.");\n        }\n        inputNamesUTF8Encoded.push(name);\n        inputNames.push(wasm2.UTF8ToString(name));\n      }\n      for (let i = 0; i < outputCount; i++) {\n        const name = wasm2._OrtGetOutputName(sessionHandle, i);\n        if (name === 0) {\n          checkLastError("Can\'t get an output name.");\n        }\n        outputNamesUTF8Encoded.push(name);\n        const nameString = wasm2.UTF8ToString(name);\n        outputNames.push(nameString);\n        if (false) {\n          const location = typeof options?.preferredOutputLocation === "string" ? options.preferredOutputLocation : options?.preferredOutputLocation?.[nameString] ?? "cpu";\n          if (location !== "cpu" && location !== "cpu-pinned" && location !== "gpu-buffer") {\n            throw new Error(`Not supported preferred output location: ${location}.`);\n          }\n          outputPreferredLocations.push(location);\n        }\n      }\n      let bindingState = null;\n      if (false) {\n        ioBindingHandle = wasm2._OrtCreateBinding(sessionHandle);\n        if (ioBindingHandle === 0) {\n          checkLastError("Can\'t create IO binding.");\n        }\n        bindingState = {\n          handle: ioBindingHandle,\n          outputPreferredLocations,\n          outputPreferredLocationsEncoded: outputPreferredLocations.map((l) => dataLocationStringToEnum(l))\n        };\n      }\n      activeSessions.set(sessionHandle, [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded, bindingState]);\n      return [sessionHandle, inputNames, outputNames];\n    } catch (e) {\n      inputNamesUTF8Encoded.forEach((buf) => wasm2._OrtFree(buf));\n      outputNamesUTF8Encoded.forEach((buf) => wasm2._OrtFree(buf));\n      if (ioBindingHandle !== 0) {\n        wasm2._OrtReleaseBinding(ioBindingHandle);\n      }\n      if (sessionHandle !== 0) {\n        wasm2._OrtReleaseSession(sessionHandle);\n      }\n      throw e;\n    } finally {\n      wasm2._free(modelData[0]);\n      if (sessionOptionsHandle !== 0) {\n        wasm2._OrtReleaseSessionOptions(sessionOptionsHandle);\n      }\n      allocs.forEach((alloc) => wasm2._free(alloc));\n    }\n  };\n  var createSession = (model, options) => {\n    const modelData = createSessionAllocate(model);\n    return createSessionFinalize(modelData, options);\n  };\n  var releaseSession = (sessionId) => {\n    const wasm2 = getInstance();\n    const session = activeSessions.get(sessionId);\n    if (!session) {\n      throw new Error(`cannot release session. invalid session id: ${sessionId}`);\n    }\n    const [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded, ioBindingState] = session;\n    if (ioBindingState) {\n      wasm2._OrtReleaseBinding(ioBindingState.handle);\n    }\n    wasm2.jsepUnregisterBuffers?.(sessionId);\n    inputNamesUTF8Encoded.forEach((buf) => wasm2._OrtFree(buf));\n    outputNamesUTF8Encoded.forEach((buf) => wasm2._OrtFree(buf));\n    wasm2._OrtReleaseSession(sessionHandle);\n    activeSessions.delete(sessionId);\n  };\n  var prepareInputOutputTensor = (tensor, tensorHandles, allocs, sessionId, index) => {\n    if (!tensor) {\n      tensorHandles.push(0);\n      return;\n    }\n    const wasm2 = getInstance();\n    const dataType = tensor[0];\n    const dims = tensor[1];\n    const location = tensor[3];\n    let rawData;\n    let dataByteLength;\n    if (dataType === "string" && location === "gpu-buffer") {\n      throw new Error("String tensor is not supported on GPU.");\n    }\n    if (location === "gpu-buffer") {\n      const gpuBuffer = tensor[2].gpuBuffer;\n      const elementSizeInBytes = getTensorElementSize(tensorDataTypeStringToEnum(dataType));\n      dataByteLength = dims.reduce((a, b) => a * b, 1) * elementSizeInBytes;\n      rawData = wasm2.jsepRegisterBuffer(sessionId, index, gpuBuffer, dataByteLength);\n    } else {\n      const data = tensor[2];\n      if (Array.isArray(data)) {\n        dataByteLength = 4 * data.length;\n        rawData = wasm2._malloc(dataByteLength);\n        allocs.push(rawData);\n        let dataIndex = rawData / 4;\n        for (let i = 0; i < data.length; i++) {\n          if (typeof data[i] !== "string") {\n            throw new TypeError(`tensor data at index ${i} is not a string`);\n          }\n          wasm2.HEAPU32[dataIndex++] = allocWasmString(data[i], allocs);\n        }\n      } else {\n        dataByteLength = data.byteLength;\n        rawData = wasm2._malloc(dataByteLength);\n        allocs.push(rawData);\n        wasm2.HEAPU8.set(new Uint8Array(data.buffer, data.byteOffset, dataByteLength), rawData);\n      }\n    }\n    const stack = wasm2.stackSave();\n    const dimsOffset = wasm2.stackAlloc(4 * dims.length);\n    try {\n      let dimIndex = dimsOffset / 4;\n      dims.forEach((d) => wasm2.HEAP32[dimIndex++] = d);\n      const tensor2 = wasm2._OrtCreateTensor(\n        tensorDataTypeStringToEnum(dataType),\n        rawData,\n        dataByteLength,\n        dimsOffset,\n        dims.length,\n        dataLocationStringToEnum(location)\n      );\n      if (tensor2 === 0) {\n        checkLastError(`Can\'t create tensor for input/output. session=${sessionId}, index=${index}.`);\n      }\n      tensorHandles.push(tensor2);\n    } finally {\n      wasm2.stackRestore(stack);\n    }\n  };\n  var run = async (sessionId, inputIndices, inputTensors, outputIndices, outputTensors, options) => {\n    const wasm2 = getInstance();\n    const session = activeSessions.get(sessionId);\n    if (!session) {\n      throw new Error(`cannot run inference. invalid session id: ${sessionId}`);\n    }\n    const [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded, ioBindingState] = session;\n    const inputCount = inputIndices.length;\n    const outputCount = outputIndices.length;\n    let runOptionsHandle = 0;\n    let runOptionsAllocs = [];\n    const inputTensorHandles = [];\n    const outputTensorHandles = [];\n    const inputOutputAllocs = [];\n    const beforeRunStack = wasm2.stackSave();\n    const inputValuesOffset = wasm2.stackAlloc(inputCount * 4);\n    const inputNamesOffset = wasm2.stackAlloc(inputCount * 4);\n    const outputValuesOffset = wasm2.stackAlloc(outputCount * 4);\n    const outputNamesOffset = wasm2.stackAlloc(outputCount * 4);\n    try {\n      [runOptionsHandle, runOptionsAllocs] = setRunOptions(options);\n      for (let i = 0; i < inputCount; i++) {\n        prepareInputOutputTensor(inputTensors[i], inputTensorHandles, inputOutputAllocs, sessionId, inputIndices[i]);\n      }\n      for (let i = 0; i < outputCount; i++) {\n        prepareInputOutputTensor(\n          outputTensors[i],\n          outputTensorHandles,\n          inputOutputAllocs,\n          sessionId,\n          inputCount + outputIndices[i]\n        );\n      }\n      let inputValuesIndex = inputValuesOffset / 4;\n      let inputNamesIndex = inputNamesOffset / 4;\n      let outputValuesIndex = outputValuesOffset / 4;\n      let outputNamesIndex = outputNamesOffset / 4;\n      for (let i = 0; i < inputCount; i++) {\n        wasm2.HEAPU32[inputValuesIndex++] = inputTensorHandles[i];\n        wasm2.HEAPU32[inputNamesIndex++] = inputNamesUTF8Encoded[inputIndices[i]];\n      }\n      for (let i = 0; i < outputCount; i++) {\n        wasm2.HEAPU32[outputValuesIndex++] = outputTensorHandles[i];\n        wasm2.HEAPU32[outputNamesIndex++] = outputNamesUTF8Encoded[outputIndices[i]];\n      }\n      if (false) {\n        const { handle, outputPreferredLocations, outputPreferredLocationsEncoded } = ioBindingState;\n        if (inputNamesUTF8Encoded.length !== inputCount) {\n          throw new Error(`input count from feeds (${inputCount}) is expected to be always equal to model\'s input count (${inputNamesUTF8Encoded.length}).`);\n        }\n        for (let i = 0; i < inputCount; i++) {\n          const index = inputIndices[i];\n          const errorCode2 = await wasm2._OrtBindInput(handle, inputNamesUTF8Encoded[index], inputTensorHandles[i]);\n          if (errorCode2 !== 0) {\n            checkLastError(`Can\'t bind input[${i}] for session=${sessionId}.`);\n          }\n        }\n        for (let i = 0; i < outputCount; i++) {\n          const index = outputIndices[i];\n          const location = outputTensors[i]?.[3];\n          if (location) {\n            const errorCode2 = wasm2._OrtBindOutput(handle, outputNamesUTF8Encoded[index], outputTensorHandles[i], 0);\n            if (errorCode2 !== 0) {\n              checkLastError(`Can\'t bind pre-allocated output[${i}] for session=${sessionId}.`);\n            }\n          } else {\n            const errorCode2 = wasm2._OrtBindOutput(handle, outputNamesUTF8Encoded[index], 0, outputPreferredLocationsEncoded[index]);\n            if (errorCode2 !== 0) {\n              checkLastError(`Can\'t bind output[${i}] to ${outputPreferredLocations[i]} for session=${sessionId}.`);\n            }\n          }\n        }\n      }\n      let errorCode;\n      if (false) {\n        errorCode = await wasm2._OrtRunWithBinding(\n          sessionHandle,\n          ioBindingState.handle,\n          outputCount,\n          outputValuesOffset,\n          runOptionsHandle\n        );\n      } else {\n        errorCode = await wasm2._OrtRun(\n          sessionHandle,\n          inputNamesOffset,\n          inputValuesOffset,\n          inputCount,\n          outputNamesOffset,\n          outputCount,\n          outputValuesOffset,\n          runOptionsHandle\n        );\n      }\n      if (errorCode !== 0) {\n        checkLastError("failed to call OrtRun().");\n      }\n      const output = [];\n      for (let i = 0; i < outputCount; i++) {\n        const tensor = wasm2.HEAPU32[outputValuesOffset / 4 + i];\n        if (tensor === outputTensorHandles[i]) {\n          output.push(outputTensors[i]);\n          continue;\n        }\n        const beforeGetTensorDataStack = wasm2.stackSave();\n        const tensorDataOffset = wasm2.stackAlloc(4 * 4);\n        let keepOutputTensor = false;\n        let type, dataOffset = 0;\n        try {\n          const errorCode2 = wasm2._OrtGetTensorData(\n            tensor,\n            tensorDataOffset,\n            tensorDataOffset + 4,\n            tensorDataOffset + 8,\n            tensorDataOffset + 12\n          );\n          if (errorCode2 !== 0) {\n            checkLastError(`Can\'t access output tensor data on index ${i}.`);\n          }\n          let tensorDataIndex = tensorDataOffset / 4;\n          const dataType = wasm2.HEAPU32[tensorDataIndex++];\n          dataOffset = wasm2.HEAPU32[tensorDataIndex++];\n          const dimsOffset = wasm2.HEAPU32[tensorDataIndex++];\n          const dimsLength = wasm2.HEAPU32[tensorDataIndex++];\n          const dims = [];\n          for (let i2 = 0; i2 < dimsLength; i2++) {\n            dims.push(wasm2.HEAPU32[dimsOffset / 4 + i2]);\n          }\n          wasm2._OrtFree(dimsOffset);\n          const size = dims.reduce((a, b) => a * b, 1);\n          type = tensorDataTypeEnumToString(dataType);\n          const preferredLocation = ioBindingState?.outputPreferredLocations[outputIndices[i]];\n          if (type === "string") {\n            if (preferredLocation === "gpu-buffer") {\n              throw new Error("String tensor is not supported on GPU.");\n            }\n            const stringData = [];\n            let dataIndex = dataOffset / 4;\n            for (let i2 = 0; i2 < size; i2++) {\n              const offset = wasm2.HEAPU32[dataIndex++];\n              const maxBytesToRead = i2 === size - 1 ? void 0 : wasm2.HEAPU32[dataIndex] - offset;\n              stringData.push(wasm2.UTF8ToString(offset, maxBytesToRead));\n            }\n            output.push([type, dims, stringData, "cpu"]);\n          } else {\n            if (preferredLocation === "gpu-buffer" && size > 0) {\n              const gpuBuffer = wasm2.jsepGetBuffer(dataOffset);\n              const elementSize = getTensorElementSize(dataType);\n              if (elementSize === void 0 || !isGpuBufferSupportedType(type)) {\n                throw new Error(`Unsupported data type: ${type}`);\n              }\n              keepOutputTensor = true;\n              output.push([\n                type,\n                dims,\n                {\n                  gpuBuffer,\n                  download: wasm2.jsepCreateDownloader(gpuBuffer, size * elementSize, type),\n                  dispose: () => {\n                    wasm2._OrtReleaseTensor(tensor);\n                  }\n                },\n                "gpu-buffer"\n              ]);\n            } else {\n              const typedArrayConstructor = tensorTypeToTypedArrayConstructor(type);\n              const data = new typedArrayConstructor(size);\n              new Uint8Array(data.buffer, data.byteOffset, data.byteLength).set(wasm2.HEAPU8.subarray(dataOffset, dataOffset + data.byteLength));\n              output.push([type, dims, data, "cpu"]);\n            }\n          }\n        } finally {\n          wasm2.stackRestore(beforeGetTensorDataStack);\n          if (type === "string" && dataOffset) {\n            wasm2._free(dataOffset);\n          }\n          if (!keepOutputTensor) {\n            wasm2._OrtReleaseTensor(tensor);\n          }\n        }\n      }\n      if (ioBindingState) {\n        wasm2._OrtClearBoundOutputs(ioBindingState.handle);\n      }\n      return output;\n    } finally {\n      wasm2.stackRestore(beforeRunStack);\n      inputTensorHandles.forEach((v) => wasm2._OrtReleaseTensor(v));\n      outputTensorHandles.forEach((v) => wasm2._OrtReleaseTensor(v));\n      inputOutputAllocs.forEach((p) => wasm2._free(p));\n      if (runOptionsHandle !== 0) {\n        wasm2._OrtReleaseRunOptions(runOptionsHandle);\n      }\n      runOptionsAllocs.forEach((p) => wasm2._free(p));\n    }\n  };\n  var endProfiling = (sessionId) => {\n    const wasm2 = getInstance();\n    const session = activeSessions.get(sessionId);\n    if (!session) {\n      throw new Error("invalid session id");\n    }\n    const sessionHandle = session[0];\n    const profileFileName = wasm2._OrtEndProfiling(sessionHandle);\n    if (profileFileName === 0) {\n      checkLastError("Can\'t get an profile file name.");\n    }\n    wasm2._OrtFree(profileFileName);\n  };\n  var extractTransferableBuffers = (tensors) => {\n    const buffers = [];\n    for (const tensor of tensors) {\n      const data = tensor[2];\n      if (!Array.isArray(data) && "buffer" in data) {\n        buffers.push(data.buffer);\n      }\n    }\n    return buffers;\n  };\n\n  // web/lib/wasm/proxy-worker/main.ts\n  self.onmessage = (ev) => {\n    switch (ev.data.type) {\n      case "init-wasm":\n        try {\n          initializeWebAssembly(ev.data.in).then(\n            () => postMessage({ type: "init-wasm" }),\n            (err) => postMessage({ type: "init-wasm", err })\n          );\n        } catch (err) {\n          postMessage({ type: "init-wasm", err });\n        }\n        break;\n      case "init-ort":\n        try {\n          initRuntime(ev.data.in).then(() => postMessage({ type: "init-ort" }), (err) => postMessage({\n            type: "init-ort",\n            err\n          }));\n        } catch (err) {\n          postMessage({ type: "init-ort", err });\n        }\n        break;\n      case "create_allocate":\n        try {\n          const { model } = ev.data.in;\n          const modeldata = createSessionAllocate(model);\n          postMessage({ type: "create_allocate", out: modeldata });\n        } catch (err) {\n          postMessage({ type: "create_allocate", err });\n        }\n        break;\n      case "create_finalize":\n        try {\n          const { modeldata, options } = ev.data.in;\n          const sessionMetadata = createSessionFinalize(modeldata, options);\n          postMessage({ type: "create_finalize", out: sessionMetadata });\n        } catch (err) {\n          postMessage({ type: "create_finalize", err });\n        }\n        break;\n      case "create":\n        try {\n          const { model, options } = ev.data.in;\n          const sessionMetadata = createSession(model, options);\n          postMessage({ type: "create", out: sessionMetadata });\n        } catch (err) {\n          postMessage({ type: "create", err });\n        }\n        break;\n      case "release":\n        try {\n          const handler = ev.data.in;\n          releaseSession(handler);\n          postMessage({ type: "release" });\n        } catch (err) {\n          postMessage({ type: "release", err });\n        }\n        break;\n      case "run":\n        try {\n          const { sessionId, inputIndices, inputs, outputIndices, options } = ev.data.in;\n          run(sessionId, inputIndices, inputs, outputIndices, options).then(\n            (outputs) => {\n              postMessage({ type: "run", out: outputs }, extractTransferableBuffers(outputs));\n            },\n            (err) => {\n              postMessage({ type: "run", err });\n            }\n          );\n        } catch (err) {\n          postMessage({ type: "run", err });\n        }\n        break;\n      case "end-profiling":\n        try {\n          const handler = ev.data.in;\n          endProfiling(handler);\n          postMessage({ type: "end-profiling" });\n        } catch (err) {\n          postMessage({ type: "end-profiling", err });\n        }\n        break;\n      default:\n    }\n  };\n})();\n//# sourceMappingURL=data:application/json;base64,\n';
    }
  });

  // web/lib/wasm/proxy-wrapper.ts
  var isProxy, proxyWorker, initializing2, initialized2, aborted2, initWasmCallbacks, initOrtCallbacks, createSessionAllocateCallbacks, createSessionFinalizeCallbacks, createSessionCallbacks, releaseSessionCallbacks, runCallbacks, endProfilingCallbacks, ensureWorker, onProxyWorkerMessage, scriptSrc, initializeWebAssemblyInstance, initializeRuntime, createSessionAllocate2, createSessionFinalize2, createSession2, releaseSession2, run2, endProfiling2;
  var init_proxy_wrapper = __esm({
    "web/lib/wasm/proxy-wrapper.ts"() {
      "use strict";
      init_esm();
      init_wasm_core_impl();
      init_wasm_factory();
      isProxy = () => !!env2.wasm.proxy && typeof document !== "undefined";
      initializing2 = false;
      initialized2 = false;
      aborted2 = false;
      createSessionAllocateCallbacks = [];
      createSessionFinalizeCallbacks = [];
      createSessionCallbacks = [];
      releaseSessionCallbacks = [];
      runCallbacks = [];
      endProfilingCallbacks = [];
      ensureWorker = () => {
        if (initializing2 || !initialized2 || aborted2 || !proxyWorker) {
          throw new Error("worker not ready");
        }
      };
      onProxyWorkerMessage = (ev) => {
        switch (ev.data.type) {
          case "init-wasm":
            initializing2 = false;
            if (ev.data.err) {
              aborted2 = true;
              initWasmCallbacks[1](ev.data.err);
            } else {
              initialized2 = true;
              initWasmCallbacks[0]();
            }
            break;
          case "init-ort":
            if (ev.data.err) {
              initOrtCallbacks[1](ev.data.err);
            } else {
              initOrtCallbacks[0]();
            }
            break;
          case "create_allocate":
            if (ev.data.err) {
              createSessionAllocateCallbacks.shift()[1](ev.data.err);
            } else {
              createSessionAllocateCallbacks.shift()[0](ev.data.out);
            }
            break;
          case "create_finalize":
            if (ev.data.err) {
              createSessionFinalizeCallbacks.shift()[1](ev.data.err);
            } else {
              createSessionFinalizeCallbacks.shift()[0](ev.data.out);
            }
            break;
          case "create":
            if (ev.data.err) {
              createSessionCallbacks.shift()[1](ev.data.err);
            } else {
              createSessionCallbacks.shift()[0](ev.data.out);
            }
            break;
          case "release":
            if (ev.data.err) {
              releaseSessionCallbacks.shift()[1](ev.data.err);
            } else {
              releaseSessionCallbacks.shift()[0]();
            }
            break;
          case "run":
            if (ev.data.err) {
              runCallbacks.shift()[1](ev.data.err);
            } else {
              runCallbacks.shift()[0](ev.data.out);
            }
            break;
          case "end-profiling":
            if (ev.data.err) {
              endProfilingCallbacks.shift()[1](ev.data.err);
            } else {
              endProfilingCallbacks.shift()[0]();
            }
            break;
          default:
        }
      };
      scriptSrc = typeof document !== "undefined" ? document?.currentScript?.src : void 0;
      initializeWebAssemblyInstance = async () => {
        if (isProxy()) {
          if (initialized2) {
            return;
          }
          if (initializing2) {
            throw new Error("multiple calls to 'initWasm()' detected.");
          }
          if (aborted2) {
            throw new Error("previous call to 'initWasm()' failed.");
          }
          initializing2 = true;
          if (env2.wasm.wasmPaths === void 0) {
            if (scriptSrc && scriptSrc.indexOf("blob:") !== 0) {
              env2.wasm.wasmPaths = scriptSrc.substr(0, +scriptSrc.lastIndexOf("/") + 1);
            }
          }
          return new Promise((resolve, reject) => {
            proxyWorker?.terminate();
            const workerUrl = URL.createObjectURL(new Blob(
              [
                // This require() function is handled by esbuild plugin to load file content as string.
                // eslint-disable-next-line @typescript-eslint/no-require-imports
                require_main()
              ],
              { type: "text/javascript" }
            ));
            proxyWorker = new Worker(workerUrl, { name: "ort-wasm-proxy-worker" });
            proxyWorker.onerror = (ev) => reject(ev);
            proxyWorker.onmessage = onProxyWorkerMessage;
            URL.revokeObjectURL(workerUrl);
            initWasmCallbacks = [resolve, reject];
            const message = { type: "init-wasm", in: env2.wasm };
            proxyWorker.postMessage(message);
          });
        } else {
          return initializeWebAssembly(env2.wasm);
        }
      };
      initializeRuntime = async (env3) => {
        if (isProxy()) {
          ensureWorker();
          return new Promise((resolve, reject) => {
            initOrtCallbacks = [resolve, reject];
            const message = { type: "init-ort", in: env3 };
            proxyWorker.postMessage(message);
          });
        } else {
          await initRuntime(env3);
        }
      };
      createSessionAllocate2 = async (model) => {
        if (isProxy()) {
          ensureWorker();
          return new Promise((resolve, reject) => {
            createSessionAllocateCallbacks.push([resolve, reject]);
            const message = { type: "create_allocate", in: { model } };
            proxyWorker.postMessage(message, [model.buffer]);
          });
        } else {
          return createSessionAllocate(model);
        }
      };
      createSessionFinalize2 = async (modeldata, options) => {
        if (isProxy()) {
          ensureWorker();
          return new Promise((resolve, reject) => {
            createSessionFinalizeCallbacks.push([resolve, reject]);
            const message = { type: "create_finalize", in: { modeldata, options } };
            proxyWorker.postMessage(message);
          });
        } else {
          return createSessionFinalize(modeldata, options);
        }
      };
      createSession2 = async (model, options) => {
        if (isProxy()) {
          if (options?.preferredOutputLocation) {
            throw new Error('session option "preferredOutputLocation" is not supported for proxy.');
          }
          ensureWorker();
          return new Promise((resolve, reject) => {
            createSessionCallbacks.push([resolve, reject]);
            const message = { type: "create", in: { model, options } };
            proxyWorker.postMessage(message, [model.buffer]);
          });
        } else {
          return createSession(model, options);
        }
      };
      releaseSession2 = async (sessionId) => {
        if (isProxy()) {
          ensureWorker();
          return new Promise((resolve, reject) => {
            releaseSessionCallbacks.push([resolve, reject]);
            const message = { type: "release", in: sessionId };
            proxyWorker.postMessage(message);
          });
        } else {
          releaseSession(sessionId);
        }
      };
      run2 = async (sessionId, inputIndices, inputs, outputIndices, outputs, options) => {
        if (isProxy()) {
          if (inputs.some((t) => t[3] !== "cpu")) {
            throw new Error("input tensor on GPU is not supported for proxy.");
          }
          if (outputs.some((t) => t)) {
            throw new Error("pre-allocated output tensor is not supported for proxy.");
          }
          ensureWorker();
          return new Promise((resolve, reject) => {
            runCallbacks.push([resolve, reject]);
            const serializableInputs = inputs;
            const message = { type: "run", in: { sessionId, inputIndices, inputs: serializableInputs, outputIndices, options } };
            proxyWorker.postMessage(message, extractTransferableBuffers(serializableInputs));
          });
        } else {
          return run(sessionId, inputIndices, inputs, outputIndices, outputs, options);
        }
      };
      endProfiling2 = async (sessionId) => {
        if (isProxy()) {
          ensureWorker();
          return new Promise((resolve, reject) => {
            endProfilingCallbacks.push([resolve, reject]);
            const message = { type: "end-profiling", in: sessionId };
            proxyWorker.postMessage(message);
          });
        } else {
          endProfiling(sessionId);
        }
      };
    }
  });

  // nodejs-ignore:node:fs/promises
  var readFile2;
  var init_promises = __esm({
    "nodejs-ignore:node:fs/promises"() {
      readFile2 = void 0;
    }
  });

  // web/lib/wasm/session-handler.ts
  var runtimeInitialized, runtimeInitializationPromise, encodeTensorMetadata, decodeTensorMetadata, OnnxruntimeWebAssemblySessionHandler;
  var init_session_handler = __esm({
    "web/lib/wasm/session-handler.ts"() {
      "use strict";
      init_promises();
      init_esm();
      init_proxy_wrapper();
      init_wasm_common();
      encodeTensorMetadata = (tensor, getName) => {
        switch (tensor.location) {
          case "cpu":
            return [tensor.type, tensor.dims, tensor.data, "cpu"];
          case "gpu-buffer":
            return [tensor.type, tensor.dims, { gpuBuffer: tensor.gpuBuffer }, "gpu-buffer"];
          default:
            throw new Error(`invalid data location: ${tensor.location} for ${getName()}`);
        }
      };
      decodeTensorMetadata = (tensor) => {
        switch (tensor[3]) {
          case "cpu":
            return new Tensor2(tensor[0], tensor[2], tensor[1]);
          case "gpu-buffer": {
            const dataType = tensor[0];
            if (!isGpuBufferSupportedType(dataType)) {
              throw new Error(`not supported data type: ${dataType} for deserializing GPU tensor`);
            }
            const { gpuBuffer, download, dispose } = tensor[2];
            return Tensor2.fromGpuBuffer(gpuBuffer, { dataType, dims: tensor[1], download, dispose });
          }
          default:
            throw new Error(`invalid data location: ${tensor[3]}`);
        }
      };
      OnnxruntimeWebAssemblySessionHandler = class {
        async createSessionAllocate(path) {
          const response = await fetch(path);
          if (response.status !== 200) {
            throw new Error(`failed to load model: ${path}`);
          }
          const arrayBuffer = await response.arrayBuffer();
          return createSessionAllocate2(new Uint8Array(arrayBuffer));
        }
        async loadModel(pathOrBuffer, options) {
          if (!runtimeInitialized) {
            if (!runtimeInitializationPromise) {
              runtimeInitializationPromise = initializeRuntime(env2);
            }
            await runtimeInitializationPromise;
            runtimeInitializationPromise = void 0;
            runtimeInitialized = true;
          }
          if (typeof pathOrBuffer === "string") {
            if (typeof process !== "undefined" && process.versions && process.versions.node) {
              const model = await readFile2(pathOrBuffer);
              [this.sessionId, this.inputNames, this.outputNames] = await createSession2(model, options);
            } else {
              const modelData = await this.createSessionAllocate(pathOrBuffer);
              [this.sessionId, this.inputNames, this.outputNames] = await createSessionFinalize2(modelData, options);
            }
          } else {
            [this.sessionId, this.inputNames, this.outputNames] = await createSession2(pathOrBuffer, options);
          }
        }
        async dispose() {
          return releaseSession2(this.sessionId);
        }
        async run(feeds, fetches, options) {
          const inputArray = [];
          const inputIndices = [];
          Object.entries(feeds).forEach((kvp) => {
            const name = kvp[0];
            const tensor = kvp[1];
            const index = this.inputNames.indexOf(name);
            if (index === -1) {
              throw new Error(`invalid input '${name}'`);
            }
            inputArray.push(tensor);
            inputIndices.push(index);
          });
          const outputArray = [];
          const outputIndices = [];
          Object.entries(fetches).forEach((kvp) => {
            const name = kvp[0];
            const tensor = kvp[1];
            const index = this.outputNames.indexOf(name);
            if (index === -1) {
              throw new Error(`invalid output '${name}'`);
            }
            outputArray.push(tensor);
            outputIndices.push(index);
          });
          const inputs = inputArray.map((t, i) => encodeTensorMetadata(t, () => `input "${this.inputNames[inputIndices[i]]}"`));
          const outputs = outputArray.map(
            (t, i) => t ? encodeTensorMetadata(t, () => `output "${this.outputNames[outputIndices[i]]}"`) : null
          );
          const results = await run2(this.sessionId, inputIndices, inputs, outputIndices, outputs, options);
          const resultMap = {};
          for (let i = 0; i < results.length; i++) {
            resultMap[this.outputNames[outputIndices[i]]] = outputArray[i] ?? decodeTensorMetadata(results[i]);
          }
          return resultMap;
        }
        startProfiling() {
        }
        endProfiling() {
          void endProfiling2(this.sessionId);
        }
      };
    }
  });

  // web/lib/backend-wasm.ts
  var backend_wasm_exports = {};
  __export(backend_wasm_exports, {
    initializeFlags: () => initializeFlags,
    wasmBackend: () => wasmBackend
  });
  var initializeFlags, OnnxruntimeWebAssemblyBackend, wasmBackend;
  var init_backend_wasm = __esm({
    "web/lib/backend-wasm.ts"() {
      "use strict";
      init_node_os();
      init_esm();
      init_proxy_wrapper();
      init_session_handler();
      initializeFlags = () => {
        if (typeof env2.wasm.initTimeout !== "number" || env2.wasm.initTimeout < 0) {
          env2.wasm.initTimeout = 0;
        }
        if (typeof env2.wasm.simd !== "boolean") {
          env2.wasm.simd = true;
        }
        if (typeof env2.wasm.proxy !== "boolean") {
          env2.wasm.proxy = false;
        }
        if (typeof env2.wasm.numThreads !== "number" || !Number.isInteger(env2.wasm.numThreads) || env2.wasm.numThreads <= 0) {
          const numCpuLogicalCores = typeof navigator === "undefined" ? cpus().length : navigator.hardwareConcurrency;
          env2.wasm.numThreads = Math.min(4, Math.ceil((numCpuLogicalCores || 1) / 2));
        }
      };
      OnnxruntimeWebAssemblyBackend = class {
        async init() {
          initializeFlags();
          await initializeWebAssemblyInstance();
        }
        async createInferenceSessionHandler(pathOrBuffer, options) {
          const handler = new OnnxruntimeWebAssemblySessionHandler();
          await handler.loadModel(pathOrBuffer, options);
          return Promise.resolve(handler);
        }
      };
      wasmBackend = new OnnxruntimeWebAssemblyBackend();
    }
  });

  // web/lib/index.ts
  var lib_exports = {};
  __export(lib_exports, {
    InferenceSession: () => InferenceSession2,
    Tensor: () => Tensor2,
    TrainingSession: () => TrainingSession2,
    env: () => env2,
    registerBackend: () => registerBackend
  });
  init_esm();
  init_esm();

  // web/lib/version.ts
  var version2 = "1.17.0";

  // web/lib/index.ts
  if (false) {
    const onnxjsBackend = null.onnxjsBackend;
    registerBackend("webgl", onnxjsBackend, -10);
  }
  if (true) {
    const wasmBackend2 = (init_backend_wasm(), __toCommonJS(backend_wasm_exports)).wasmBackend;
    if (false) {
      registerBackend("webgpu", wasmBackend2, 5);
    }
    registerBackend("cpu", wasmBackend2, 10);
    registerBackend("wasm", wasmBackend2, 10);
    registerBackend("xnnpack", wasmBackend2, 9);
    registerBackend("webnn", wasmBackend2, 9);
  }
  Object.defineProperty(env2.versions, "web", { value: version2, enumerable: true });
  return __toCommonJS(lib_exports);
})();
//# sourceMappingURL=data:application/json;base64,
