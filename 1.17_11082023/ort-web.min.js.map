{"version":3,"file":"ort-web.min.js","mappings":"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","sources":["webpack://onnxruntime-web/webpack/universalModuleDefinition","webpack://onnxruntime-web/./lib/backend-onnxjs.ts","webpack://onnxruntime-web/./lib/backend-wasm.ts","webpack://onnxruntime-web/./lib/index.ts","webpack://onnxruntime-web/./lib/onnxjs/attribute-with-cache-key.ts","webpack://onnxruntime-web/./lib/onnxjs/attribute.ts","webpack://onnxruntime-web/./lib/onnxjs/backend.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/backend-webgl.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-coordinate-lib.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-definitions.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-encoding-lib.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-fragcolor-lib.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-function-inliner.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-preprocessor.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-registered-libs.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-shape-utils-lib.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-source.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-vec-lib.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/inference-handler.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/op-resolve-rules.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/batch-normalization.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/binary-op.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/cast.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/concat-packed.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/concat.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/conv-grouped.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/conv-pack.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/conv-transpose.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/conv.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/depth-to-space.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/dot-product.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/flatten.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/fuse-utils.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/gather.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/gemm.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/im2col-pack.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/im2col.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/image-scaler.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/instance-normalization.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/lrn.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/matmul-pack.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/matmul.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/pack.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/packing-utils.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/pad.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/pool.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/reduce.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/reshape-packed.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/reshape.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/resize-packed.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/shape.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/slice.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/softmax.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/split.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/squeeze.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/sum.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/tile.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/transpose.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/uint8-encode.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/unary-op.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/unpack.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/unsqueeze.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/upsample.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/program-manager.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/session-handler.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/texture-data-encoder.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/texture-layout-strategy.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/texture-layout.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/texture-manager.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/types.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/utils.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/webgl-context-factory.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/webgl-context.ts","webpack://onnxruntime-web/./lib/onnxjs/execution-plan.ts","webpack://onnxruntime-web/./lib/onnxjs/graph.ts","webpack://onnxruntime-web/./lib/onnxjs/instrument.ts","webpack://onnxruntime-web/./lib/onnxjs/model.ts","webpack://onnxruntime-web/./lib/onnxjs/operators.ts","webpack://onnxruntime-web/./lib/onnxjs/opset.ts","webpack://onnxruntime-web/./lib/onnxjs/ort-schema/flatbuffers/ort-generated.ts","webpack://onnxruntime-web/./lib/onnxjs/session-handler.ts","webpack://onnxruntime-web/./lib/onnxjs/session.ts","webpack://onnxruntime-web/./lib/onnxjs/tensor.ts","webpack://onnxruntime-web/./lib/onnxjs/util.ts","webpack://onnxruntime-web/./lib/version.ts","webpack://onnxruntime-web/./lib/wasm/proxy-wrapper.ts","webpack://onnxruntime-web/./lib/wasm/run-options.ts","webpack://onnxruntime-web/./lib/wasm/session-handler.ts","webpack://onnxruntime-web/./lib/wasm/session-options.ts","webpack://onnxruntime-web/./lib/wasm/wasm-common.ts","webpack://onnxruntime-web/./lib/wasm/wasm-core-impl.ts","webpack://onnxruntime-web/./lib/wasm/wasm-factory.ts","webpack://onnxruntime-web/./lib/wasm/wasm-utils.ts","webpack://onnxruntime-web/./lib/wasm/proxy-worker/main.ts","webpack://onnxruntime-web/../node_modules/worker-loader/dist/runtime/inline.js","webpack://onnxruntime-web/./lib/onnxjs/ort-schema/protobuf/onnx.js","webpack://onnxruntime-web/./lib/wasm/binding/ort-wasm-threaded.min.js","webpack://onnxruntime-web/./lib/wasm/binding/ort-wasm.js","webpack://onnxruntime-web/./node_modules/@protobufjs/aspromise/index.js","webpack://onnxruntime-web/./node_modules/@protobufjs/base64/index.js","webpack://onnxruntime-web/./node_modules/@protobufjs/eventemitter/index.js","webpack://onnxruntime-web/./node_modules/@protobufjs/float/index.js","webpack://onnxruntime-web/./node_modules/@protobufjs/inquire/index.js","webpack://onnxruntime-web/./node_modules/@protobufjs/pool/index.js","webpack://onnxruntime-web/./node_modules/@protobufjs/utf8/index.js","webpack://onnxruntime-web/./node_modules/guid-typescript/dist/guid.js","webpack://onnxruntime-web/./node_modules/protobufjs/minimal.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/index-minimal.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/reader.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/reader_buffer.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/roots.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/rpc.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/rpc/service.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/util/longbits.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/util/minimal.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/writer.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/writer_buffer.js","webpack://onnxruntime-web/external umd {\"commonjs\":\"onnxruntime-common\",\"commonjs2\":\"onnxruntime-common\",\"root\":\"ort\"}","webpack://onnxruntime-web/./node_modules/long/umd/index.js","webpack://onnxruntime-web/./node_modules/flatbuffers/js/flatbuffers.mjs","webpack://onnxruntime-web/webpack/bootstrap","webpack://onnxruntime-web/webpack/runtime/compat get default export","webpack://onnxruntime-web/webpack/runtime/define property getters","webpack://onnxruntime-web/webpack/runtime/hasOwnProperty shorthand","webpack://onnxruntime-web/webpack/runtime/make namespace object","webpack://onnxruntime-web/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"onnxruntime-common\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = typeof exports === 'object' ? factory(require(\"onnxruntime-common\")) : factory(root[\"ort\"]);\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(self, (__WEBPACK_EXTERNAL_MODULE__1670__) => {\nreturn ","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/* eslint-disable import/no-internal-modules */\nimport {Backend, InferenceSession, SessionHandler} from 'onnxruntime-common';\n\nimport {Session} from './onnxjs/session';\nimport {OnnxjsSessionHandler} from './onnxjs/session-handler';\n\nclass OnnxjsBackend implements Backend {\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  async init(): Promise<void> {}\n\n  async createSessionHandler(pathOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions):\n      Promise<SessionHandler> {\n    // NOTE: Session.Config(from onnx.js) is not compatible with InferenceSession.SessionOptions(from\n    // onnxruntime-common).\n    //       In future we should remove Session.Config and use InferenceSession.SessionOptions.\n    //       Currently we allow this to happen to make test runner work.\n    const session = new Session(options as unknown as Session.Config);\n\n    // typescript cannot merge method override correctly (so far in 4.2.3). need if-else to call the method.\n    if (typeof pathOrBuffer === 'string') {\n      await session.loadModel(pathOrBuffer);\n    } else {\n      await session.loadModel(pathOrBuffer);\n    }\n\n    return new OnnxjsSessionHandler(session);\n  }\n}\n\nexport const onnxjsBackend = new OnnxjsBackend();\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Backend, env, InferenceSession, SessionHandler} from 'onnxruntime-common';\nimport {cpus} from 'os';\n\nimport {initializeWebAssemblyInstance} from './wasm/proxy-wrapper';\nimport {OnnxruntimeWebAssemblySessionHandler} from './wasm/session-handler';\n\n/**\n * This function initializes all flags for WebAssembly.\n *\n * Those flags are accessible from `ort.env.wasm`. Users are allow to set those flags before the first inference session\n * being created, to override default value.\n */\nexport const initializeFlags = (): void => {\n  if (typeof env.wasm.initTimeout !== 'number' || env.wasm.initTimeout < 0) {\n    env.wasm.initTimeout = 0;\n  }\n\n  if (typeof env.wasm.simd !== 'boolean') {\n    env.wasm.simd = true;\n  }\n\n  if (typeof env.wasm.proxy !== 'boolean') {\n    env.wasm.proxy = false;\n  }\n\n  if (typeof env.wasm.numThreads !== 'number' || !Number.isInteger(env.wasm.numThreads) || env.wasm.numThreads <= 0) {\n    const numCpuLogicalCores = typeof navigator === 'undefined' ? cpus().length : navigator.hardwareConcurrency;\n    env.wasm.numThreads = Math.min(4, Math.ceil((numCpuLogicalCores || 1) / 2));\n  }\n};\n\nclass OnnxruntimeWebAssemblyBackend implements Backend {\n  async init(): Promise<void> {\n    // populate wasm flags\n    initializeFlags();\n\n    // init wasm\n    await initializeWebAssemblyInstance();\n  }\n  createSessionHandler(path: string, options?: InferenceSession.SessionOptions): Promise<SessionHandler>;\n  createSessionHandler(buffer: Uint8Array, options?: InferenceSession.SessionOptions): Promise<SessionHandler>;\n  async createSessionHandler(pathOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions):\n      Promise<SessionHandler> {\n    const handler = new OnnxruntimeWebAssemblySessionHandler();\n    await handler.loadModel(pathOrBuffer, options);\n    return Promise.resolve(handler);\n  }\n}\n\nexport const wasmBackend = new OnnxruntimeWebAssemblyBackend();\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/* eslint-disable @typescript-eslint/no-var-requires, @typescript-eslint/no-require-imports */\n// We use \"require\" instead of \"import\" here because import statement must be put in top level. Our current code does\n// not allow terser to tree-shaking code as expected because some codes are treated as having side effects.\n// So we import code inside the if-clause to allow terser remove the code safely.\n\nexport * from 'onnxruntime-common';\nimport {registerBackend, env} from 'onnxruntime-common';\nimport {version} from './version';\n\nif (!BUILD_DEFS.DISABLE_WEBGL) {\n  const onnxjsBackend = require('./backend-onnxjs').onnxjsBackend;\n  registerBackend('webgl', onnxjsBackend, -10);\n}\n\nif (!BUILD_DEFS.DISABLE_WASM) {\n  const wasmBackend = require('./backend-wasm').wasmBackend;\n  if (!BUILD_DEFS.DISABLE_WEBGPU && typeof navigator !== 'undefined' && navigator.gpu) {\n    registerBackend('webgpu', wasmBackend, 5);\n  }\n  registerBackend('cpu', wasmBackend, 10);\n  registerBackend('wasm', wasmBackend, 10);\n  registerBackend('xnnpack', wasmBackend, 9);\n  if (!BUILD_DEFS.DISABLE_WEBNN) {\n    registerBackend('webnn', wasmBackend, 9);\n  }\n}\n\nObject.defineProperty(env.versions, 'web', {value: version, enumerable: true});\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nclass AttributeWithCacheKeyImpl {\n  constructor(attribute: Record<string, unknown>) {\n    Object.assign(this, attribute);\n  }\n\n  private _cacheKey: string;\n  public get cacheKey(): string {\n    if (!this._cacheKey) {\n      this._cacheKey =\n          Object.getOwnPropertyNames(this).sort().map(name => `${(this as Record<string, unknown>)[name]}`).join(';');\n    }\n    return this._cacheKey;\n  }\n}\n\nexport interface AttributeWithCacheKey {\n  readonly cacheKey: string;\n}\n\nexport const createAttributeWithCacheKey = <T extends Record<string, unknown>>(attribute: T): T&AttributeWithCacheKey =>\n    new AttributeWithCacheKeyImpl(attribute) as unknown as T & AttributeWithCacheKey;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport Long from 'long';\n\nimport {onnxruntime} from './ort-schema/flatbuffers/ort-generated';\nimport {onnx} from './ort-schema/protobuf/onnx';\nimport {Tensor} from './tensor';\nimport {decodeUtf8String, LongUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport declare namespace Attribute {\n  export interface DataTypeMap {\n    float: number;\n    int: number;\n    string: string;\n    tensor: Tensor;\n    floats: number[];\n    ints: number[];\n    strings: string[];\n    tensors: Tensor[];\n  }\n\n  export type DataType = keyof DataTypeMap;\n}\n\ntype ValueTypes = Attribute.DataTypeMap[Attribute.DataType];\n\ntype Value = [ValueTypes, Attribute.DataType];\n\nexport class Attribute {\n  constructor(attributes: onnx.IAttributeProto[]|ortFbs.Attribute[]|null|undefined) {\n    this._attributes = new Map();\n    if (attributes !== null && attributes !== undefined) {\n      for (const attr of attributes) {\n        if (attr instanceof onnx.AttributeProto) {\n          this._attributes.set(attr.name, [Attribute.getValue(attr), Attribute.getType(attr)]);\n        } else if (attr instanceof ortFbs.Attribute) {\n          this._attributes.set(attr.name()!, [Attribute.getValue(attr), Attribute.getType(attr)]);\n        }\n      }\n      if (this._attributes.size < attributes.length) {\n        throw new Error('duplicated attribute names');\n      }\n    }\n  }\n\n  set(key: string, type: Attribute.DataType, value: ValueTypes): void {\n    this._attributes.set(key, [value, type]);\n  }\n  delete(key: string): void {\n    this._attributes.delete(key);\n  }\n  getFloat(key: string, defaultValue?: Attribute.DataTypeMap['float']) {\n    return this.get(key, 'float', defaultValue);\n  }\n\n  getInt(key: string, defaultValue?: Attribute.DataTypeMap['int']) {\n    return this.get(key, 'int', defaultValue);\n  }\n\n  getString(key: string, defaultValue?: Attribute.DataTypeMap['string']) {\n    return this.get(key, 'string', defaultValue);\n  }\n\n  getTensor(key: string, defaultValue?: Attribute.DataTypeMap['tensor']) {\n    return this.get(key, 'tensor', defaultValue);\n  }\n\n  getFloats(key: string, defaultValue?: Attribute.DataTypeMap['floats']) {\n    return this.get(key, 'floats', defaultValue);\n  }\n\n  getInts(key: string, defaultValue?: Attribute.DataTypeMap['ints']) {\n    return this.get(key, 'ints', defaultValue);\n  }\n\n  getStrings(key: string, defaultValue?: Attribute.DataTypeMap['strings']) {\n    return this.get(key, 'strings', defaultValue);\n  }\n\n  getTensors(key: string, defaultValue?: Attribute.DataTypeMap['tensors']) {\n    return this.get(key, 'tensors', defaultValue);\n  }\n\n  private get<V extends Attribute.DataTypeMap[Attribute.DataType]>(\n      key: string, type: Attribute.DataType, defaultValue?: V): V {\n    const valueAndType = this._attributes.get(key);\n    if (valueAndType === undefined) {\n      if (defaultValue !== undefined) {\n        return defaultValue;\n      }\n      throw new Error(`required attribute not found: ${key}`);\n    }\n    if (valueAndType[1] !== type) {\n      throw new Error(`type mismatch: expected ${type} but got ${valueAndType[1]}`);\n    }\n    return valueAndType[0] as V;\n  }\n\n  private static getType(attr: onnx.IAttributeProto|ortFbs.Attribute): Attribute.DataType {\n    const type = attr instanceof onnx.AttributeProto ? (attr).type : (attr as ortFbs.Attribute).type();\n    switch (type) {\n      case onnx.AttributeProto.AttributeType.FLOAT:\n        return 'float';\n      case onnx.AttributeProto.AttributeType.INT:\n        return 'int';\n      case onnx.AttributeProto.AttributeType.STRING:\n        return 'string';\n      case onnx.AttributeProto.AttributeType.TENSOR:\n        return 'tensor';\n      case onnx.AttributeProto.AttributeType.FLOATS:\n        return 'floats';\n      case onnx.AttributeProto.AttributeType.INTS:\n        return 'ints';\n      case onnx.AttributeProto.AttributeType.STRINGS:\n        return 'strings';\n      case onnx.AttributeProto.AttributeType.TENSORS:\n        return 'tensors';\n      default:\n        throw new Error(`attribute type is not supported yet: ${onnx.AttributeProto.AttributeType[type]}`);\n    }\n  }\n\n  private static getValue(attr: onnx.IAttributeProto|ortFbs.Attribute) {\n    const attrType = attr instanceof onnx.AttributeProto ? attr.type : (attr as ortFbs.Attribute).type();\n    if (attrType === onnx.AttributeProto.AttributeType.GRAPH || attrType === onnx.AttributeProto.AttributeType.GRAPHS) {\n      throw new Error('graph attribute is not supported yet');\n    }\n\n    const value = this.getValueNoCheck(attr);\n\n    // cast LONG to number\n    if (attrType === onnx.AttributeProto.AttributeType.INT && LongUtil.isLong(value)) {\n      return LongUtil.longToNumber(value as Long | flatbuffers.Long);\n    }\n\n    // cast LONG[] to number[]\n    if (attrType === onnx.AttributeProto.AttributeType.INTS) {\n      const arr = (value as Array<number|Long|flatbuffers.Long>);\n      const numberValue: number[] = new Array<number>(arr.length);\n\n      for (let i = 0; i < arr.length; i++) {\n        const maybeLong = arr[i];\n        numberValue[i] = LongUtil.longToNumber(maybeLong);\n      }\n\n      return numberValue;\n    }\n\n    // cast onnx.TensorProto to onnxjs.Tensor\n    if (attrType === onnx.AttributeProto.AttributeType.TENSOR) {\n      return attr instanceof onnx.AttributeProto ? Tensor.fromProto(value as onnx.ITensorProto) :\n                                                   Tensor.fromOrtTensor(value as ortFbs.Tensor);\n    }\n\n    // cast onnx.TensorProto[] to onnxjs.Tensor[]\n    if (attrType === onnx.AttributeProto.AttributeType.TENSORS) {\n      if (attr instanceof onnx.AttributeProto) {\n        const tensorProtos = value as onnx.ITensorProto[];\n        return tensorProtos.map(value => Tensor.fromProto(value));\n      } else if (attr instanceof ortFbs.Attribute) {\n        const tensorProtos = value as ortFbs.Tensor[];\n        return tensorProtos.map(value => Tensor.fromOrtTensor(value));\n      }\n    }\n\n    // cast Uint8Array to string\n    if (attrType === onnx.AttributeProto.AttributeType.STRING) {\n      // string in onnx attribute is of uint8array type, so we need to convert it to string below. While in ort format,\n      // string attributes are returned as string, so no conversion is needed.\n      if (attr instanceof onnx.AttributeProto) {\n        const utf8String = value as Uint8Array;\n        return decodeUtf8String(utf8String);\n      }\n    }\n\n    // cast Uint8Array[] to string[]\n    if (attrType === onnx.AttributeProto.AttributeType.STRINGS) {\n      // strings in onnx attribute is returned as uint8array[], so we need to convert it to string[] below. While in ort\n      // format strings attributes are returned as string[], so no conversion is needed.\n      if (attr instanceof onnx.AttributeProto) {\n        const utf8Strings = value as Uint8Array[];\n        return utf8Strings.map(decodeUtf8String);\n      }\n    }\n\n    return value as ValueTypes;\n  }\n\n  private static getValueNoCheck(attr: onnx.IAttributeProto|ortFbs.Attribute) {\n    return attr instanceof (onnx.AttributeProto) ? this.getValueNoCheckFromOnnxFormat(attr) :\n                                                   this.getValueNoCheckFromOrtFormat(attr as ortFbs.Attribute);\n  }\n\n  private static getValueNoCheckFromOnnxFormat(attr: onnx.IAttributeProto) {\n    switch (attr.type!) {\n      case onnx.AttributeProto.AttributeType.FLOAT:\n        return attr.f;\n      case onnx.AttributeProto.AttributeType.INT:\n        return attr.i;\n      case onnx.AttributeProto.AttributeType.STRING:\n        return attr.s;\n      case onnx.AttributeProto.AttributeType.TENSOR:\n        return attr.t;\n      case onnx.AttributeProto.AttributeType.GRAPH:\n        return attr.g;\n      case onnx.AttributeProto.AttributeType.FLOATS:\n        return attr.floats;\n      case onnx.AttributeProto.AttributeType.INTS:\n        return attr.ints;\n      case onnx.AttributeProto.AttributeType.STRINGS:\n        return attr.strings;\n      case onnx.AttributeProto.AttributeType.TENSORS:\n        return attr.tensors;\n      case onnx.AttributeProto.AttributeType.GRAPHS:\n        return attr.graphs;\n      default:\n        throw new Error(`unsupported attribute type: ${onnx.AttributeProto.AttributeType[attr.type!]}`);\n    }\n  }\n\n  private static getValueNoCheckFromOrtFormat(attr: ortFbs.Attribute) {\n    switch (attr.type()) {\n      case ortFbs.AttributeType.FLOAT:\n        return attr.f();\n      case ortFbs.AttributeType.INT:\n        return attr.i();\n      case ortFbs.AttributeType.STRING:\n        return attr.s();\n      case ortFbs.AttributeType.TENSOR:\n        return attr.t();\n      case ortFbs.AttributeType.GRAPH:\n        return attr.g();\n      case ortFbs.AttributeType.FLOATS:\n        return attr.floatsArray();\n      case ortFbs.AttributeType.INTS: {\n        const ints = [];\n        for (let i = 0; i < attr.intsLength(); i++) {\n          ints.push(attr.ints(i)!);\n        }\n        return ints;\n      }\n      case ortFbs.AttributeType.STRINGS: {\n        const strings = [];\n        for (let i = 0; i < attr.stringsLength(); i++) {\n          strings.push(attr.strings(i));\n        }\n        return strings;\n      }\n      case ortFbs.AttributeType.TENSORS: {\n        const tensors = [];\n        for (let i = 0; i < attr.tensorsLength(); i++) {\n          tensors.push(attr.tensors(i)!);\n        }\n        return tensors;\n      }\n      // case ortFbs.AttributeType.GRAPHS:\n      // TODO: Subgraph not supported yet.\n      // const graphs = [];\n      // for (let i = 0; i < attr.graphsLength(); i++) {\n      //   graphs.push(attr.graphs(i)!);\n      // }\n      // return graphs;\n      default:\n        throw new Error(`unsupported attribute type: ${ortFbs.AttributeType[attr.type()]}`);\n    }\n  }\n\n  protected _attributes: Map<string, Value>;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {WebGLBackend} from './backends/backend-webgl';\nimport {Graph} from './graph';\nimport {Operator} from './operators';\nimport {OpSet} from './opset';\nimport {Session} from './session';\n\nexport interface InferenceHandler {\n  /**\n   * dispose the inference handler. it will be called as the last step in Session.run()\n   */\n  dispose(): void;\n}\n\nexport interface SessionHandler {\n  /**\n   * transform the graph at initialization time\n   * @param graphTransformer the graph transformer to manipulate the model graph\n   */\n  transformGraph?(graphTransformer: Graph.Transformer): void;\n\n  /**\n   * create an instance of InferenceHandler to use in a Session.run() call\n   */\n  createInferenceHandler(): InferenceHandler;\n\n  /**\n   * dispose the session handler. it will be called when a session is being disposed explicitly\n   */\n  dispose(): void;\n\n  /**\n   * Resolves the operator from the name and opset version; backend specific\n   * @param node the node to resolve\n   * @param opsets a list of opsets that exported from the model\n   * @param graph the completely initialized graph\n   */\n  resolve(node: Graph.Node, opsets: readonly OpSet[], graph: Graph): Operator;\n\n  /**\n   * This method let's the sessionHandler know that the graph initialization is complete\n   * @param graph the completely initialized graph\n   */\n  onGraphInitialized?(graph: Graph): void;\n\n  /**\n   * a reference to the corresponding backend\n   */\n  readonly backend: Backend;\n\n  /**\n   * a reference to the session context\n   */\n  readonly context: Session.Context;\n}\n\nexport interface Backend {\n  /**\n   * initialize the backend. will be called only once, when the first time the\n   * backend it to be used\n   */\n  initialize(): boolean|Promise<boolean>;\n\n  /**\n   * create an instance of SessionHandler to use in a Session object's lifecycle\n   */\n  createSessionHandler(context: Session.Context): SessionHandler;\n\n  /**\n   * dispose the backend. currently this will not be called\n   */\n  dispose(): void;\n}\n\n// caches all initialized backend instances\nconst backendsCache: Map<string, Backend> = new Map();\n\nexport const backend: {[name: string]: Backend} = {\n  webgl: new WebGLBackend()\n};\n\n/**\n * Resolve a reference to the backend. If a hint is specified, the corresponding\n * backend will be used.\n */\nexport async function resolveBackend(hint?: string|readonly string[]): Promise<Backend> {\n  if (!hint) {\n    return resolveBackend(['webgl']);\n  } else {\n    const hints = typeof hint === 'string' ? [hint] : hint;\n\n    for (const backendHint of hints) {\n      const cache = backendsCache.get(backendHint);\n      if (cache) {\n        return cache;\n      }\n\n      const backend = await tryLoadBackend(backendHint);\n      if (backend) {\n        return backend;\n      }\n    }\n  }\n\n  throw new Error('no available backend to use');\n}\n\nasync function tryLoadBackend(backendHint: string): Promise<Backend|undefined> {\n  const backendObj = backend;\n\n  if (typeof backendObj[backendHint] !== 'undefined' && isBackend(backendObj[backendHint])) {\n    const backend = backendObj[backendHint];\n    let init = backend.initialize();\n    if (typeof init === 'object' && 'then' in init) {\n      init = await init;\n    }\n    if (init) {\n      backendsCache.set(backendHint, backend);\n      return backend;\n    }\n  }\n\n  return undefined;\n}\n\nfunction isBackend(obj: unknown) {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const o = obj as any;\n\n  // check if an object is a Backend instance\n  if (\n      'initialize' in o && typeof o.initialize === 'function' &&                      // initialize()\n      'createSessionHandler' in o && typeof o.createSessionHandler === 'function' &&  // createSessionHandler()\n      'dispose' in o && typeof o.dispose === 'function'                               // dispose()\n  ) {\n    return true;\n  }\n\n  return false;\n}\n\nexport type BackendType = Backend;\nexport type SessionHandlerType = ReturnType<BackendType['createSessionHandler']>;\nexport type InferenceHandlerType = ReturnType<SessionHandlerType['createInferenceHandler']>;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\n\nimport {Backend, SessionHandler} from '../backend';\nimport {Logger} from '../instrument';\nimport {Session} from '../session';\n\nimport {WebGLSessionHandler} from './webgl/session-handler';\nimport {WebGLContext} from './webgl/webgl-context';\nimport {createWebGLContext} from './webgl/webgl-context-factory';\n\n/**\n * WebGLBackend is the entry point for all WebGL opeartions\n * When it starts it created the WebGLRenderingContext\n * and other main framework components such as Program and Texture Managers\n */\nexport class WebGLBackend implements Backend {\n  glContext: WebGLContext;\n\n  get contextId(): 'webgl'|'webgl2'|undefined {\n    return env.webgl.contextId;\n  }\n  set contextId(value: 'webgl'|'webgl2'|undefined) {\n    env.webgl.contextId = value;\n  }\n\n  get matmulMaxBatchSize(): number|undefined {\n    return env.webgl.matmulMaxBatchSize;\n  }\n  set matmulMaxBatchSize(value: number|undefined) {\n    env.webgl.matmulMaxBatchSize = value;\n  }\n\n  get textureCacheMode(): 'initializerOnly'|'full'|undefined {\n    return env.webgl.textureCacheMode;\n  }\n  set textureCacheMode(value: 'initializerOnly'|'full'|undefined) {\n    env.webgl.textureCacheMode = value;\n  }\n\n  get pack(): boolean|undefined {\n    return env.webgl.pack;\n  }\n  set pack(value: boolean|undefined) {\n    env.webgl.pack = value;\n  }\n\n  get async(): boolean|undefined {\n    return env.webgl.async;\n  }\n  set async(value: boolean|undefined) {\n    env.webgl.async = value;\n  }\n\n  initialize(): boolean {\n    try {\n      this.glContext = createWebGLContext(this.contextId);\n      if (typeof this.matmulMaxBatchSize !== 'number') {\n        this.matmulMaxBatchSize = 16;\n      }\n      if (typeof this.textureCacheMode !== 'string') {\n        this.textureCacheMode = 'full';\n      }\n      if (typeof this.pack !== 'boolean') {\n        this.pack = false;\n      }\n      if (typeof this.async !== 'boolean') {\n        this.async = false;\n      }\n\n      Logger.setWithEnv(env);\n\n      Object.defineProperty(env.webgl, 'context', {value: this.glContext.gl});\n\n      Logger.verbose(\n          'WebGLBackend',\n          `Created WebGLContext: ${typeof this.glContext} with matmulMaxBatchSize: ${\n              this.matmulMaxBatchSize}; textureCacheMode: ${this.textureCacheMode}; pack: ${this.pack}; async: ${\n              this.async}.`);\n      return true;\n    } catch (e) {\n      Logger.warning('WebGLBackend', `Unable to initialize WebGLBackend. ${e}`);\n      return false;\n    }\n  }\n  createSessionHandler(context: Session.Context): SessionHandler {\n    return new WebGLSessionHandler(this, context);\n  }\n  dispose(): void {\n    this.glContext.dispose();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ArrayUtil, BroadcastUtil, ShapeUtil} from '../../util';\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\nimport {getGlsl} from './glsl-source';\nimport {squeezeShape} from './texture-layout-strategy';\nimport {TextureLayout} from './types';\nimport {generateShaderFuncNameFromInputSamplerName, generateShaderFuncNameFromInputSamplerNameAtOutCoords, getCoordsDataType, getGlChannels, getSqueezedParams, squeezeInputShape} from './utils';\n\n/**\n * GLSL Library responsible for data types and routines for manipulating\n * coordinates and mapping to/from tensor indices\n */\nexport class CoordsGlslLib extends GlslLib {\n  returnType: string;\n\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {\n      ...this.offsetToCoords(),\n      ...this.coordsToOffset(),\n      ...this.toVec(),\n      ...this.valueFrom(),\n      // TODO return these only when packing is enabled.\n      ...this.getCommonUtilFuncs(),\n      ...this.getInputsSamplingSnippets(),\n      ...this.getOutputSamplingSnippet()\n    };\n  }\n  getCustomTypes() {\n    return {};\n  }\n  /**\n   * Produces a function that can map from\n   * 2D normalzied coordinates (s,t) to a flat offset\n   */\n  protected offsetToCoords(): {[name: string]: GlslLibRoutine} {\n    const funcName = 'offsetToCoords';\n    return {\n      offsetToCoords: new GlslLibRoutine(`\n      vec2 ${funcName}(int offset, int width, int height) {\n        int t = offset / width;\n        int s = offset - t*width;\n        vec2 coords = (vec2(s,t) + vec2(0.5,0.5)) / vec2(width, height);\n        return coords;\n      }\n      `)\n    };\n  }\n\n  /**\n   * Produces a function that can map from\n   * 2D normalzied coordinates (s,t) to a flat offset\n   */\n  protected coordsToOffset(): {[name: string]: GlslLibRoutine} {\n    const funcName = 'coordsToOffset';\n    return {\n      coordsToOffset: new GlslLibRoutine(`\n      int ${funcName}(vec2 coords, int width, int height) {\n        float s = coords.s * float(width);\n        float t = coords.t * float(height);\n        int offset = int(t) * width + int(s);\n        return offset;\n      }\n      `)\n    };\n  }\n\n  /**\n   * Generates code for output sampler.\n   */\n\n  protected getOutputSamplingSnippet(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    if (outputLayout.isPacked) {\n      return this.getPackedOutputSamplingSnippet(outputLayout);\n    } else {\n      return this.getUnpackedOutputSamplingSnippet(outputLayout);\n    }\n  }\n\n  /**\n   * Generates code for packed output sampler.\n   */\n  protected getPackedOutputSamplingSnippet(outputLayout: TextureLayout): {[name: string]: GlslLibRoutine} {\n    const outShape = outputLayout.unpackedShape;\n    const outTexShape = [outputLayout.width, outputLayout.height];\n    const result: {[name: string]: GlslLibRoutine} = {};\n    const funcName = 'getOutputCoords';\n    switch (outShape.length) {\n      case 0:\n        result[funcName] = this.getOutputScalarCoords();\n        break;\n      case 1:\n        result[funcName] = this.getOutputPacked1DCoords(outShape as [number], outTexShape as [number, number]);\n        break;\n      case 2:\n        result[funcName] = this.getOutputPacked2DCoords(outShape as [number, number], outTexShape as [number, number]);\n        break;\n      case 3:\n        result[funcName] =\n            this.getOutputPacked3DCoords(outShape as [number, number, number], outTexShape as [number, number]);\n        break;\n      default:\n        result[funcName] = this.getOutputPackedNDCoords(outShape, outTexShape as [number, number]);\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    // TODO we need this to properly return a packed vec4 from kernels.\n    // Replace all '{glsl.output} = result' with 'setOutput(result)' in all kernels.\n    const floatTextureSetRGBASource = `\n      void setOutput(vec4 val) {\n        ${glsl.output} = val;\n      }\n    `;\n    const floatTextureSetRGBAFuncName = 'floatTextureSetRGBA';\n    result[floatTextureSetRGBAFuncName] = new GlslLibRoutine(floatTextureSetRGBASource);\n    return result;\n  }\n\n  /**\n   * Generates code for unpacked output sampler.\n   */\n  protected getUnpackedOutputSamplingSnippet(outputLayout: TextureLayout): {[name: string]: GlslLibRoutine} {\n    const outShape = outputLayout.unpackedShape;\n    const outTexShape = [outputLayout.width, outputLayout.height];\n    const result: {[name: string]: GlslLibRoutine} = {};\n    const funcName = 'getOutputCoords';\n    switch (outShape.length) {\n      case 0:\n        result[funcName] = this.getOutputScalarCoords();\n        break;\n      case 1:\n        result[funcName] = this.getOutputUnpacked1DCoords(outShape as [number], outTexShape as [number, number]);\n        break;\n      case 2:\n        result[funcName] =\n            this.getOutputUnpacked2DCoords(outShape as [number, number], outTexShape as [number, number]);\n        break;\n      case 3:\n        result[funcName] =\n            this.getOutputUnpacked3DCoords(outShape as [number, number, number], outTexShape as [number, number]);\n        break;\n      case 4:\n        result[funcName] = this.getOutputUnpacked4DCoords(\n            outShape as [number, number, number, number], outTexShape as [number, number]);\n        break;\n      case 5:\n        result[funcName] = this.getOutputUnpacked5DCoords(\n            outShape as [number, number, number, number, number], outTexShape as [number, number]);\n        break;\n      case 6:\n        result[funcName] = this.getOutputUnpacked6DCoords(\n            outShape as [number, number, number, number, number, number], outTexShape as [number, number]);\n        break;\n      default:\n        throw new Error(`Unsupported output dimensionality: ${outShape.length}`);\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    // TODO we need this to properly return a packed vec4 from kernels.\n    // Replace all '{glsl.output} = result' with 'setOutput(result)' in all kernels.\n    const floatTextureSetRSource = `\n        void setOutput(float val) {\n          ${glsl.output} = vec4(val, 0, 0, 0);\n        }\n    `;\n    const floatTextureSetRFuncName = 'floatTextureSetR';\n    result[floatTextureSetRFuncName] = new GlslLibRoutine(floatTextureSetRSource);\n    return result;\n  }\n\n  /**\n   * Scalar output coordinates.\n   */\n  protected getOutputScalarCoords(): GlslLibRoutine {\n    return new GlslLibRoutine(`\n      int getOutputCoords() {\n        return 0;\n      }\n    `);\n  }\n\n  /**\n   * 1D packed output coordinates.\n   */\n  protected getOutputPacked1DCoords(shape: [number], texShape: [number, number]): GlslLibRoutine {\n    const packedTexShape = texShape;\n    let source = '';\n    if (packedTexShape[0] === 1) {\n      source = `\n          int getOutputCoords() {\n            return 2 * int(TexCoords.y * ${packedTexShape[1]}.0);\n          }\n        `;\n      return new GlslLibRoutine(source);\n    }\n\n    if (packedTexShape[1] === 1) {\n      source = `\n          int getOutputCoords() {\n            return 2 * int(TexCoords.x * ${packedTexShape[0]}.0);\n          }\n        `;\n      return new GlslLibRoutine(source);\n    }\n\n    source = `\n        int getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                 vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n          return 2 * (resTexRC.y * ${packedTexShape[0]} + resTexRC.x);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * 2D packed output coordinates.\n   */\n  protected getOutputPacked2DCoords(shape: [number, number], texShape: [number, number]): GlslLibRoutine {\n    let source = '';\n    if (ArrayUtil.arraysEqual(shape, texShape)) {\n      source = `\n        ivec2 getOutputCoords() {\n          return 2 * ivec2(TexCoords.xy * vec2(${texShape[0]}, ${texShape[1]}));\n        }\n      `;\n      return new GlslLibRoutine(source);\n    }\n\n    const packedTexShape = texShape;\n    // texels needed to accommodate a logical row\n    const texelsInLogicalRow = Math.ceil(shape[1] / 2);\n\n    /**\n     * getOutputCoords\n     *\n     * resTexRC: The rows and columns of the texels. If you move over one\n     * texel to the right in the packed texture, you are moving over one column\n     * (not two).\n     *\n     * index: The texel index\n     */\n    source = `\n        ivec2 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n\n          int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\n\n          // reverse r and c order for packed texture\n          int r = imod(index, ${texelsInLogicalRow}) * 2;\n          int c = 2 * (index / ${texelsInLogicalRow});\n\n          return ivec2(r, c);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * 3D packed output coordinates.\n   */\n  protected getOutputPacked3DCoords(shape: [number, number, number], texShape: [number, number]): GlslLibRoutine {\n    const packedTexShape = [texShape[0], texShape[1]];\n    const texelsInLogicalRow = Math.ceil(shape[2] / 2);\n    const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[1] / 2);\n    const source = `\n        ivec3 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n          int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\n\n          int b = index / ${texelsInBatch};\n          index -= b * ${texelsInBatch};\n\n          // reverse r and c order for packed texture\n          int r = imod(index, ${texelsInLogicalRow}) * 2;\n          int c = 2 * (index / ${texelsInLogicalRow});\n\n          return ivec3(b, r, c);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * ND packed output coordinates.\n   */\n  protected getOutputPackedNDCoords(shape: readonly number[], texShape: [number, number]): GlslLibRoutine {\n    const packedTexShape = [texShape[0], texShape[1]];\n\n    const texelsInLogicalRow = Math.ceil(shape[shape.length - 1] / 2);\n    const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[shape.length - 2] / 2);\n    let texelsInBatchN = texelsInBatch;\n    let batches = '';\n    let coords = 'b, r, c';\n\n    for (let b = 2; b < shape.length - 1; b++) {\n      texelsInBatchN *= shape[shape.length - b - 1];\n      batches = `\n      int b${b} = index / ${texelsInBatchN};\n      index -= b${b} * ${texelsInBatchN};\n    ` + batches;\n      coords = `b${b}, ` + coords;\n    }\n    const source = `\n      ivec${shape.length} getOutputCoords() {\n        ivec2 resTexRC = ivec2(TexCoords.xy *\n                              vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n        int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\n\n        ${batches}\n\n        int b = index / ${texelsInBatch};\n        index -= b * ${texelsInBatch};\n\n        // reverse r and c order for packed texture\n        int r = imod(index, ${texelsInLogicalRow}) * 2;\n        int c = 2 * (index / ${texelsInLogicalRow});\n\n        return ivec${shape.length}(${coords});\n      }\n    `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 1D output coordinates.\n   */\n  protected getOutputUnpacked1DCoords(shape: [number], texShape: [number, number]): GlslLibRoutine {\n    const source = `\n        int getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          return resTexRC.y * ${texShape[0]} + resTexRC.x;\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 2D output coordinates.\n   */\n  protected getOutputUnpacked2DCoords(shape: [number, number], texShape: [number, number]): GlslLibRoutine {\n    const source = `\n        ivec2 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          int r = index / ${shape[1]};\n          int c = index - r * ${shape[1]};\n          return ivec2(r, c);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 3D output coordinates.\n   */\n  protected getOutputUnpacked3DCoords(shape: [number, number, number], texShape: [number, number]): GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n        ivec3 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          ${coordsFromIndexSnippet}\n          return ivec3(r, c, d);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 4D output coordinates.\n   */\n  protected getOutputUnpacked4DCoords(shape: [number, number, number, number], texShape: [number, number]):\n      GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd', 'd2'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n      ivec4 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          ${coordsFromIndexSnippet}\n          return ivec4(r, c, d, d2);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 5D output coordinates.\n   */\n  protected getOutputUnpacked5DCoords(shape: [number, number, number, number, number], texShape: [number, number]):\n      GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd', 'd2', 'd3'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n      ivec5 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          ${coordsFromIndexSnippet}\n          return ivec5(r, c, d, d2, d3);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 6D output coordinates.\n   */\n  protected getOutputUnpacked6DCoords(shape: [number, number, number, number, number, number], texShape: [\n    number, number\n  ]): GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd', 'd2', 'd3', 'd4'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n     ivec6 getOutputCoords() {\n         ivec2 resTexRC = ivec2(TexCoords.xy *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n         int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n         ${coordsFromIndexSnippet}\n         return ivec6(r, c, d, d2, d3, d4);\n       }\n     `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Generates code for common UV coords computation utility functions.\n   */\n  protected getCommonUtilFuncs(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    let funcName = 'uvFromFlat';\n    result[funcName] = new GlslLibRoutine(`\n    vec2 uvFromFlat(int texNumR, int texNumC, int index) {\n      int texC = index / texNumR;\n      int texR = index - texC * texNumR;\n      // TODO: swap texR, texC order in following function so row is corresponding to u and column is corresponding to\n      //       v.\n      return (vec2(texR, texC) + halfCR) / vec2(texNumR, texNumC);\n    }\n    `);\n    funcName = 'packedUVfrom1D';\n    result[funcName] = new GlslLibRoutine(`\n      vec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n        int texelIndex = index / 2;\n        int texR = texelIndex / texNumC;\n        int texC = texelIndex - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      `);\n    funcName = 'packedUVfrom2D';\n    result[funcName] = new GlslLibRoutine(`\n      vec2 packedUVfrom2D(int texNumR, int texNumC, int texelsInLogicalRow, int row, int col) {\n        int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n        int texR = texelIndex / texNumC;\n        int texC = texelIndex - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      `);\n    funcName = 'packedUVfrom3D';\n    result[funcName] = new GlslLibRoutine(`\n      vec2 packedUVfrom3D(int texNumR, int texNumC,\n          int texelsInBatch, int texelsInLogicalRow, int b,\n          int row, int col) {\n        int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n        int texR = index / texNumC;\n        int texC = index - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      `);\n    funcName = 'sampleTexture';\n    const glsl = getGlsl(this.context.glContext.version);\n    result[funcName] = new GlslLibRoutine(`\n        float sampleTexture(sampler2D textureSampler, vec2 uv) {\n            return ${glsl.texture2D}(textureSampler, uv).r;\n        }`);\n    return result;\n  }\n\n  /**\n   * Constructing snippets for inputs\n   */\n  protected getInputsSamplingSnippets(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    const outputLayout = this.context.outputTextureLayout;\n    this.context.programInfo.inputNames.forEach((samplerName, i) => {\n      const inputLayout = this.context.inputTextureLayouts[i];\n      const funcName = generateShaderFuncNameFromInputSamplerName(samplerName);\n      if (inputLayout.isPacked) {\n        result[funcName] = this.getPackedSamplerFromInput(funcName, samplerName, inputLayout);\n      } else {\n        result[funcName] = this.getUnpackedSamplerFromInput(funcName, samplerName, inputLayout);\n      }\n\n      const outCoordFuncName = generateShaderFuncNameFromInputSamplerNameAtOutCoords(samplerName);\n      if (inputLayout.unpackedShape.length <= outputLayout.unpackedShape.length) {\n        if (inputLayout.isPacked) {\n          result[outCoordFuncName] =\n              this.getPackedSamplerAtOutputCoords(outCoordFuncName, inputLayout, outputLayout, samplerName);\n        } else {\n          result[outCoordFuncName] =\n              this.getUnpackedSamplerAtOutputCoords(outCoordFuncName, inputLayout, outputLayout, samplerName);\n        }\n      }\n    });\n\n    return result;\n  }\n\n  /**\n   * Constructing snippets for output coordinates of samplers\n   */\n  protected getPackedSamplerAtOutputCoords(\n      funcName: string, inputLayout: TextureLayout, outputLayout: TextureLayout, name: string): GlslLibRoutine {\n    const inShape = inputLayout.unpackedShape;\n    const outShape = outputLayout.unpackedShape;\n    const texName = name;\n    const texFuncSnippet = generateShaderFuncNameFromInputSamplerName(texName);\n\n    const inRank = inShape.length;\n    const outRank = outShape.length;\n\n    const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\n\n    const type = getCoordsDataType(outRank);\n    const rankDiff = outRank - inRank;\n    let coordsSnippet: string;\n    const fields = getGlChannels();\n\n    if (inRank === 0) {\n      coordsSnippet = '';\n    } else if (outRank < 2 && broadcastDims.length >= 1) {\n      coordsSnippet = 'coords = 0;';\n    } else {\n      coordsSnippet = broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`).join('\\n');\n    }\n    let unpackedCoordsSnippet = '';\n    if (outRank < 2 && inRank > 0) {\n      unpackedCoordsSnippet = 'coords';\n    } else {\n      unpackedCoordsSnippet = inShape.map((s, i) => `coords.${fields[i + rankDiff]}`).join(', ');\n    }\n\n    let output = 'return outputValue;';\n    const inSize = ShapeUtil.size(inShape);\n    const isInputScalar = inSize === 1;\n    const outSize = ShapeUtil.size(outShape);\n    const isOutputScalar = outSize === 1;\n\n    if (inRank === 1 && !isInputScalar && !isOutputScalar) {\n      output = `\n        return vec4(outputValue.xy, outputValue.xy);\n      `;\n    } else if (isInputScalar && !isOutputScalar) {\n      if (outRank === 1) {\n        output = `\n          return vec4(outputValue.x, outputValue.x, 0., 0.);\n        `;\n      } else {\n        output = `\n          return vec4(outputValue.x);\n        `;\n      }\n    } else if (broadcastDims.length) {\n      const rows = inRank - 2;\n      const cols = inRank - 1;\n\n      if (broadcastDims.indexOf(rows) > -1 && broadcastDims.indexOf(cols) > -1) {\n        output = 'return vec4(outputValue.x);';\n      } else if (broadcastDims.indexOf(rows) > -1) {\n        output = 'return vec4(outputValue.x, outputValue.y, ' +\n            'outputValue.x, outputValue.y);';\n      } else if (broadcastDims.indexOf(cols) > -1) {\n        output = 'return vec4(outputValue.xx, outputValue.zz);';\n      }\n    }\n\n    const swapLastDimsSnippet = `\n        int lastDim = coords.${fields[outRank - 1]};\n        coords.${fields[outRank - 1]} = coords.${fields[outRank - 2]};\n        coords.${fields[outRank - 2]} = lastDim;\n      `;\n    const source = `\n      vec4 ${funcName}() {\n        ${type} coords = getOutputCoords();\n        ${swapLastDimsSnippet}\n        ${coordsSnippet}\n        vec4 outputValue = ${texFuncSnippet}(${unpackedCoordsSnippet});\n        ${output}\n      }\n    `;\n    return new GlslLibRoutine(source, ['coordinates.getOutputCoords']);\n  }\n\n  /**\n   * Constructing snippets for unpacked output coordinates of samplers\n   */\n  protected getUnpackedSamplerAtOutputCoords(\n      funcName: string, inputLayout: TextureLayout, outputLayout: TextureLayout, name: string): GlslLibRoutine {\n    const outTexShape = [outputLayout.width, outputLayout.height];\n    const inTexShape = [inputLayout.width, inputLayout.height];\n    const inRank = inputLayout.unpackedShape.length;\n    const outRank = outputLayout.unpackedShape.length;\n    const inShape = inputLayout.unpackedShape;\n    const outShape = outputLayout.unpackedShape;\n    const texFuncSnippet = generateShaderFuncNameFromInputSamplerName(name);\n\n    if (inRank === outRank && ArrayUtil.arraysEqual(inTexShape, outTexShape)) {\n      const source = `\n          float ${funcName}() {\n            return sampleTexture(${name}, TexCoords);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const type = getCoordsDataType(outRank);\n    const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\n    const rankDiff = outRank - inRank;\n    let coordsSnippet: string;\n    const fields = getGlChannels();\n\n    if (inRank === 0) {\n      coordsSnippet = '';\n    } else if (outRank < 2 && broadcastDims.length >= 1) {\n      coordsSnippet = 'coords = 0;';\n    } else {\n      coordsSnippet = broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`).join('\\n');\n    }\n    let unpackedCoordsSnippet = '';\n    if (outRank < 2 && inRank > 0) {\n      unpackedCoordsSnippet = 'coords';\n    } else {\n      unpackedCoordsSnippet = inputLayout.unpackedShape.map((s, i) => `coords.${fields[i + rankDiff]}`).join(', ');\n    }\n    const source = `\n        float ${funcName}() {\n          ${type} coords = getOutputCoords();\n          ${coordsSnippet}\n          return ${texFuncSnippet}(${unpackedCoordsSnippet});\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.getOutputCoords']);\n  }\n\n  /**\n   * Constructing snippets for packed operations.\n   */\n  protected getPackedSamplerFromInput(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    switch (inputLayout.unpackedShape.length) {\n      case 0:\n        return this.getPackedSamplerScalar(funcName, name);\n      case 1:\n        return this.getPackedSampler1D(funcName, name, inputLayout);\n      case 2:\n        return this.getPackedSampler2D(funcName, name, inputLayout);\n      case 3:\n        return this.getPackedSampler3D(funcName, name, inputLayout);\n      default:\n        return this.getPackedSamplerND(funcName, name, inputLayout);\n    }\n  }\n\n  /**\n   * Constructing snippets for unpacked operations.\n   */\n  protected getUnpackedSamplerFromInput(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    switch (shape.length) {\n      case 0:\n        return this.getUnpackedSamplerScalar(funcName, name, inputLayout);\n      case 1:\n        return this.getUnpackedSampler1D(funcName, name, inputLayout);\n      case 2:\n        return this.getUnpackedSampler2D(funcName, name, inputLayout);\n      case 3:\n        return this.getUnpackedSampler3D(funcName, name, inputLayout);\n      case 4:\n        return this.getUnpackedSampler4D(funcName, name, inputLayout);\n      case 5:\n        return this.getUnpackedSampler5D(funcName, name, inputLayout);\n      case 6:\n        return this.getUnpackedSampler6D(funcName, name, inputLayout);\n      default:\n        // TODO support more dimensionalities\n        throw new Error(`Unsupported dimension ${shape.length}-D`);\n    }\n  }\n\n  /**\n   * Packed scalar snippet.\n   */\n  protected getPackedSamplerScalar(funcName: string, name: string): GlslLibRoutine {\n    const glsl = getGlsl(this.context.glContext.version);\n    const source = `\n          vec4 ${funcName}() {\n            return ${glsl.texture2D}(${name}, halfCR);\n          }\n        `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Packed 1D snippet.\n   */\n  protected getPackedSampler1D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const texShape = [inputLayout.width, inputLayout.height];\n    const packedTexShape = [texShape[1], texShape[0]];\n    const glsl = getGlsl(this.context.glContext.version);\n\n    const packedSampler = `vec4 ${funcName}(int index) {\n      vec2 uv = packedUVfrom1D(\n      ${packedTexShape[0]}, ${packedTexShape[1]}, index);\n      return ${glsl.texture2D}(${name}, uv);\n    }`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom1D']);\n  }\n\n  /**\n   * Packed 2D snippet.\n   */\n  protected getPackedSampler2D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const texShape = [inputLayout.width, inputLayout.height];\n    const glsl = getGlsl(this.context.glContext.version);\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n\n    if (texShape != null && ArrayUtil.arraysEqual(shape, texShape)) {\n      const packedSampler = `vec4 ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n        return ${glsl.texture2D}(${name}, uv);\n      }`;\n\n      return new GlslLibRoutine(packedSampler);\n    }\n    const packedTexShape = texShape;\n    const valuesPerRow = Math.ceil(shape[1] / 2);\n    const packedSampler = `vec4 ${funcName}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${packedTexShape[1]}, ${packedTexShape[0]}, ${valuesPerRow}, row, col);\n      return ${glsl.texture2D}(${name}, uv);\n    }`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom2D']);\n  }\n\n  /**\n   * Packed 3D snippet.\n   */\n  protected getPackedSampler3D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const texShape = [inputLayout.width, inputLayout.height];\n    const packedTexShape = [texShape[0], texShape[1]];\n    const glsl = getGlsl(this.context.glContext.version);\n\n    if (shape[0] === 1) {\n      const squeezedShape = shape.slice(1);\n      const keptDims = [1, 2];\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\n      const params = ['b', 'row', 'col'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n      const samplerRoutine = this.getPackedSamplerFromInput(funcName, name, newInputLayout);\n      const packedSampler = `${samplerRoutine.routineBody}\n      vec4 ${funcName}(int b, int row, int col) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      } `;\n      const source = packedSampler;\n      return new GlslLibRoutine(source, samplerRoutine.dependencies);\n    }\n    const texNumR = packedTexShape[0];\n    const texNumC = packedTexShape[1];\n\n    const valuesPerRow = Math.ceil(shape[2] / 2);\n    const texelsInBatch = valuesPerRow * Math.ceil(shape[1] / 2);\n\n    const packedSampler = `vec4 ${funcName}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${texNumC}, ${texNumR}, ${texelsInBatch}, ${valuesPerRow}, b, row, col);\n      return ${glsl.texture2D}(${name}, uv);}`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom3D']);\n  }\n  /*\n   * Packed ND snippet.\n   */\n  protected getPackedSamplerND(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const rank = shape.length;\n    const texShape = [inputLayout.width, inputLayout.height];\n    const glsl = getGlsl(this.context.glContext.version);\n\n    const packedTexShape = [texShape[0], texShape[1]];\n    const texNumR = packedTexShape[1];\n    const texNumC = packedTexShape[0];\n    const valuesPerRow = Math.ceil(shape[rank - 1] / 2);\n    let texelsInBatch = valuesPerRow * Math.ceil(shape[rank - 2] / 2);\n    let params = 'int b, int row, int col';\n    let index = `b * ${texelsInBatch} + (row / 2) * ${valuesPerRow} + (col / 2)`;\n    for (let b = 2; b < rank - 1; b++) {\n      params = `int b${b}, ` + params;\n      texelsInBatch *= shape[rank - b - 1];\n      index = `b${b} * ${texelsInBatch} + ` + index;\n    }\n    const packedSampler = `vec4 ${funcName}(${params}) {\n      int index = ${index};\n      int texR = index / ${texNumC};\n      int texC = index - texR * ${texNumC};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}, ${texNumR});\n      return ${glsl.texture2D}(${name}, uv);\n    }`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked scalar snippet.\n   */\n  protected getUnpackedSamplerScalar(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const [texNumR, texNumC] = [inputLayout.width, inputLayout.height];\n    if (texNumR === 1 && texNumC === 1) {\n      const source = `\n          float ${funcName}() {\n            return sampleTexture(${name}, halfCR);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const source = `\n        float ${funcName}() {\n          int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, offset_${name});\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * Unpacked 1D snippet.\n   */\n  protected getUnpackedSampler1D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const tNumR = inputLayout.width;\n    const tNumC = inputLayout.height;\n\n    if (tNumC === 1 && tNumR === 1) {\n      const source = `\n        float ${funcName}(int index) {\n          return sampleTexture(${name}, halfCR);\n        }\n      `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    if (tNumC === 1) {\n      const source = `\n          float ${funcName}(int index) {\n            vec2 uv = vec2((float(index) + 0.5) / ${tNumR}.0, 0.5);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n    if (tNumR === 1) {\n      const source = `\n          float ${funcName}(int index) {\n            vec2 uv = vec2(0.5, (float(index) + 0.5) / ${tNumC}.0);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n    const source = `\n        float ${funcName}(int index) {\n          vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture']);\n  }\n\n  /**\n   * Unpacked 2D snippet.\n   */\n\n  protected getUnpackedSampler2D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n\n    // TODO: modify row/col order for other dimensions.\n    const texShape = [inputLayout.height, inputLayout.width];\n\n    if (texShape != null && ArrayUtil.arraysEqual(shape, texShape)) {\n      const texNumR = texShape[1];\n      const texNumC = texShape[0];\n      const source = `\n          float ${funcName}(int row, int col) {\n            vec2 uv = (vec2(row, col) + halfCR) / vec2(${texNumR}.0, ${texNumC}.0);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    const squeezedShape = newShape;\n    if (squeezedShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n\n      const params = ['col', 'row'];\n      const source = `\n          ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n          float ${funcName}(int row, int col) {\n            return ${funcName}(${getSqueezedParams(params, keptDims)});\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const texNumR = texShape[1];\n    const texNumC = texShape[0];\n    if (texNumC === 1) {\n      const source = `\n          float ${funcName}(int row, int col) {\n            int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\n            float index = dot(vec3(row, col, offset_${name}), vec3(${shape[1]}, 1, 1));\n            vec2 uv = vec2(0.5, (index + 0.5) / ${texNumR}.0);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n    }\n\n    if (texNumR === 1) {\n      const source = `\n          float ${funcName}(int row, int col) {\n            int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\n            float index = dot(vec3(row, col, offset_${name}), vec3(${shape[1]}, 1, 1));\n            vec2 uv = vec2((index + 0.5) / ${texNumC}.0, 0.5);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n    }\n\n    const source = `\n        float ${funcName}(int row, int col) {\n          int index = col * ${shape[1]} + row;\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * Unpacked 3D snippet.\n   */\n\n  protected getUnpackedSampler3D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride0 = shape[1] * shape[2];\n    const stride1 = shape[2];\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    const squeezedShape = newShape;\n    if (squeezedShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\n      const params = ['batch', 'col', 'row'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n      const routine = this.getUnpackedSamplerFromInput(funcName, name, newInputLayout);\n      // TODO: revisit the logic here to make it simpler\n      const revDims = keptDims.reverse();\n      const source = `\n          ${routine.routineBody}\n          float ${funcName}(int batch, int row, int col) {\n            return ${funcName}(${getSqueezedParams(params, revDims)});\n          }\n        `;\n      return new GlslLibRoutine(source, routine.dependencies);\n    }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n          float ${funcName}(int depth, int row, int col) {\n            // Explicitly use integer operations as dot() only works on floats.\n            int index = depth * ${stride0} + col * ${stride1} + row;\n            vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n            return sampleTexture(${name}, uv);\n          }\n      `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * Unpacked 4D snippet.\n   */\n\n  protected getUnpackedSampler4D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride2 = shape[3];\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n\n    //\n    // TODO: re-enable this shortcut once the index calculation bug is fixed.\n    //\n    // const {newShape, keptDims} = squeezeShape(shape as number[]);\n    // if (newShape.length < shape.length) {\n    //   const newInputShape = squeezeInputShape(shape, newShape);\n    //   const params = ['row', 'col', 'depth', 'depth2'];\n    //   // Deep copy of input texture layout.\n    //   const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n    //   newInputLayout.unpackedShape = newInputShape;\n    //   const source = `\n    //       ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n    //       float ${funcName}(int row, int col, int depth, int depth2) {\n    //         return ${funcName}(${getSqueezedParams(params, keptDims)});\n    //       }\n    //     `;\n    //   return new GlslLibRoutine(\n    //       source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n    // }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n        float ${funcName}(int row, int col, int depth, int depth2) {\n          int index = row * ${stride0} + col * ${stride1} +\n              depth2 * ${stride2} + depth;\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture']);\n  }\n\n  /**\n   * Unpacked 5D snippet.\n   */\n  protected getUnpackedSampler5D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride3 = shape[4];\n    const stride2 = shape[3] * stride3;\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    if (newShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, newShape);\n      const params = ['row', 'col', 'depth', 'depth2', 'depth3'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n\n      const source = `\n          ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n          float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n            return ${funcName}(${getSqueezedParams(params, keptDims)});\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\n    }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n        float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n          int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth3 * ${stride3} + depth2;\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\n  }\n\n  /**\n   * Unpacked 6D snippet.\n   */\n  protected getUnpackedSampler6D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride4 = shape[5];\n    const stride3 = shape[4] * stride4;\n    const stride2 = shape[3] * stride3;\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    if (newShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, newShape);\n      const params = ['row', 'col', 'depth', 'depth2', 'depth3', 'depth4'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n\n      const source = `\n            ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n            float ${funcName}(int row, int col, int depth,\n              int depth2, int depth3, int depth4) {\n              return ${funcName}(${getSqueezedParams(params, keptDims)});\n            }\n          `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\n    }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n          float ${funcName}(int row, int col, int depth,\n            int depth2, int depth3, int depth4) {\n            int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n            depth2 * ${stride3} + depth3 * ${stride4} + depth4;\n            vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * This is the main function to map from the given texture coordiantes (s,t)\n   * to logical indices for the output\n   * There will only be one single variation of this\n   * Also see coordsToOffset and offsetToIndices for input-specific versions\n   */\n  protected toVec(): {[name: string]: GlslLibRoutine} {\n    const output = this.context.outputTextureLayout;\n    const rank = output.shape.length;\n    const strides = output.strides;\n    const xScale = output.width;\n    const yScale = output.height;\n\n    const stridesBlock = [];\n    for (let i = 0; i < rank - 1; ++i) {\n      stridesBlock.push(`\n        c[${i}] = offset / ${strides[i]};`);\n      stridesBlock.push(`\n        offset -= c[${i}] * ${strides[i]};`);\n    }\n    stridesBlock.push(`\n        c[${rank - 1}] = offset;`);\n    const body = `\n      void toVec(vec2 texCoords, out int c[${rank}]) {\n        int offset = coordsToOffset(texCoords, ${xScale}, ${yScale});\n        ${stridesBlock.join('')}\n      }\n      void toVec(int offset, out int c[${rank}]) {\n        ${stridesBlock.join('')}\n      }\n    `;\n    return {toVec: new GlslLibRoutine(body, ['coordinates.coordsToOffset'])};\n  }\n  /**\n   * These are value getter functions generated for each input\n   * Each function is hardwired to the name and dimensions of the input\n   * An '_T' variation is also produced which accesses values as if the\n   * input was transposed\n   */\n  protected valueFrom(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const layout = this.context.inputTextureLayouts[i];\n      const shape = layout.unpackedShape.length > 0 ? layout.unpackedShape : layout.shape;\n      const rank = shape.length;\n      let funcName = `_${name}`;\n      result[funcName] = new GlslLibRoutine(\n          this.getValueFromSingle(name, rank, layout.width, layout.height, false),\n          [`shapeUtils.indicesToOffset${funcName}`, 'coordinates.offsetToCoords', 'fragcolor.getColorAsFloat']);\n      funcName = funcName + '_T';\n      result[funcName] = new GlslLibRoutine(\n          this.getValueFromSingle(name, rank, layout.width, layout.height, true),\n          [`shapeUtils.indicesToOffset${funcName}`, 'coordinates.offsetToCoords', 'fragcolor.getColorAsFloat']);\n    });\n    return result;\n  }\n  /**\n   * Produces one value getter function for the name and rank given\n   * If a transpose is set proper offsetToCoords mapping will be used\n   * @param name name of the function\n   * @param rank rank of the input\n   * @param transpose whether or not should generate a transpose variation\n   */\n  protected getValueFromSingle(varName: string, rank: number, width: number, height: number, transpose: boolean):\n      string {\n    let name = `_${varName}`;\n    if (transpose) {\n      name = name + '_T';\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    return `\n        float ${name}(int m[${rank}]) {\n          int offset = indicesToOffset${name}(m);\n          vec2 coords = offsetToCoords(offset, ${width}, ${height});\n          float value = getColorAsFloat(${glsl.texture2D}(${varName}, coords));\n          return value;\n        }\n        `;\n  }\n\n  /**\n   * Produces a packed value getter function for the name and rank given\n   * If a transpose is set proper offsetToCoords mapping will be used\n   * @param name name of the function\n   * @param rank rank of the input\n   * @param transpose whether or not should generate a transpose variation\n   */\n  protected getPackedValueFrom(varName: string, rank: number, width: number, height: number, transpose: boolean):\n      string {\n    let name = `_${varName}_Pack`;\n    if (transpose) {\n      name = name + '_T';\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    return `\n        vec4 ${name}(int m[${rank}]) {\n          int offset = indicesToOffset_${varName}(m);\n          vec2 coords = offsetToCoords(offset, ${width}, ${height});\n          return ${glsl.texture2D}(${varName}, coords);\n        }\n        `;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ProgramInfo, TextureLayout} from './types';\nimport {WebGLContext} from './webgl-context';\n\n/* eslint-disable @typescript-eslint/naming-convention */\nexport enum FunctionType {\n  ValueBased,\n  Positional\n}\nexport interface GlslFunction<T extends FunctionType> {\n  body: string;\n  name: string;\n  type: T;\n}\nexport type GlslValueFunction = GlslFunction<FunctionType.ValueBased>;\nexport interface GlslPositionalFunction extends GlslFunction<FunctionType.Positional> {\n  inputShape: readonly number[];\n  outputShape: readonly number[];\n}\n\nexport class GlslContext {\n  constructor(\n      public glContext: WebGLContext, public programInfo: ProgramInfo, public inputTextureLayouts: TextureLayout[],\n      public outputTextureLayout: TextureLayout) {}\n}\nexport abstract class GlslLib {\n  constructor(public context: GlslContext) {}\n  abstract getFunctions(): {[name: string]: GlslLibRoutine};\n  abstract getCustomTypes(): {[name: string]: string};\n}\n\n// abstraction to represent a GLSL library routine and it's dependencies\nexport class GlslLibRoutine {\n  constructor(public routineBody: string, public dependencies?: string[]) {}\n}\n\n// abstraction to represent a GLSL library routine and it's dependencies AS GRAPH Nodes\n// this level of abstraction is used to topologically sort routines before fragment shade inclusion\nexport class GlslLibRoutineNode {\n  dependencies: GlslLibRoutineNode[];\n  routineBody: string;\n  constructor(public name: string, routineBody?: string, dependencies?: GlslLibRoutineNode[]) {\n    if (dependencies) {\n      this.dependencies = dependencies;\n    } else {\n      this.dependencies = [];\n    }\n\n    if (routineBody) {\n      this.routineBody = routineBody;\n    }\n  }\n  addDependency(node: GlslLibRoutineNode) {\n    if (node) {\n      this.dependencies.push(node);\n    }\n  }\n}\n\n// topologically sort GLSL library routines (graph nodes abstraction) before shader script inclusion\nexport class TopologicalSortGlslRoutines {\n  static returnOrderedNodes(nodes: GlslLibRoutineNode[]): GlslLibRoutineNode[] {\n    if (!nodes || nodes.length === 0) {\n      return [];\n    }\n\n    if (nodes.length === 1) {\n      return nodes;\n    }\n\n    const cycleCheck = new Set<string>();\n    const alreadyTraversed = new Set<string>();\n    const result = new Array<GlslLibRoutineNode>();\n\n    this.createOrderedNodes(nodes, cycleCheck, alreadyTraversed, result);\n    return result;\n  }\n\n  private static createOrderedNodes(\n      graphNodes: GlslLibRoutineNode[], cycleCheck: Set<string>, alreadyTraversed: Set<string>,\n      result: GlslLibRoutineNode[]) {\n    for (let i = 0; i < graphNodes.length; ++i) {\n      this.dfsTraverse(graphNodes[i], cycleCheck, alreadyTraversed, result);\n    }\n  }\n\n  private static dfsTraverse(\n      root: GlslLibRoutineNode, cycleCheck: Set<string>, alreadyTraversed: Set<string>, result: GlslLibRoutineNode[]) {\n    // if this root has already been traversed return\n    if (!root || alreadyTraversed.has(root.name)) {\n      return;\n    }\n\n    // cyclic dependency has been detected\n    if (cycleCheck.has(root.name)) {\n      throw new Error('Cyclic dependency detected. Can\\'t topologically sort routines needed for shader.');\n    }\n\n    // hold this node to detect cycles if any\n    cycleCheck.add(root.name);\n\n    // traverse children in a dfs fashion\n    const dependencies = root.dependencies;\n    if (dependencies && dependencies.length > 0) {\n      for (let i = 0; i < dependencies.length; ++i) {\n        this.dfsTraverse(dependencies[i], cycleCheck, alreadyTraversed, result);\n      }\n    }\n\n    // add to result holder\n    result.push(root);\n\n    // mark this node as traversed so that we don't traverse from this again\n    alreadyTraversed.add(root.name);\n\n    // release the hold\n    cycleCheck.delete(root.name);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\n\n/**\n * This GLSL library handles routines converting\n * float32 to/from Unsigned byte or float 16\n */\nexport class EncodingGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {...this.encodeFloat32(), ...this.decodeFloat32()};\n  }\n  getCustomTypes(): {[name: string]: string} {\n    return {};\n  }\n  protected encodeFloat32(): {[name: string]: GlslLibRoutine} {\n    return {\n      encode: new GlslLibRoutine(`highp vec4 encode(highp float f) {\n        return vec4(f, 0.0, 0.0, 0.0);\n      }\n        `)\n    };\n  }\n  protected decodeFloat32(): {[name: string]: GlslLibRoutine} {\n    return {\n      decode: new GlslLibRoutine(`highp float decode(highp vec4 rgba) {\n        return rgba.r;\n      }\n        `)\n    };\n  }\n  /**\n   * returns the routine to encode encode a 32bit float to a vec4 (of unsigned bytes)\n   * @credit: https://stackoverflow.com/questions/7059962/how-do-i-convert-a-vec4-rgba-value-to-a-float\n   */\n  protected encodeUint8(): {[name: string]: GlslLibRoutine} {\n    const endianness = EncodingGlslLib.isLittleEndian() ? 'rgba.rgba=rgba.abgr;' : '';\n    return {\n      encode: new GlslLibRoutine(`\n      highp vec4 encode(highp float f) {\n        highp float F = abs(f);\n        highp float Sign = step(0.0,-f);\n        highp float Exponent = floor(log2(F));\n        highp float Mantissa = (exp2(- Exponent) * F);\n        Exponent = floor(log2(F) + 127.0) + floor(log2(Mantissa));\n        highp vec4 rgba;\n        rgba[0] = 128.0 * Sign  + floor(Exponent*exp2(-1.0));\n        rgba[1] = 128.0 * mod(Exponent,2.0) + mod(floor(Mantissa*128.0),128.0);\n        rgba[2] = floor(mod(floor(Mantissa*exp2(23.0 -8.0)),exp2(8.0)));\n        rgba[3] = floor(exp2(23.0)*mod(Mantissa,exp2(-15.0)));\n        ${endianness}\n        rgba = rgba / 255.0; // values need to be normalized to [0,1]\n        return rgba;\n    }\n        `)\n    };\n  }\n  /**\n   * returns the routine to encode a vec4 of unsigned bytes to float32\n   * @credit: https://stackoverflow.com/questions/7059962/how-do-i-convert-a-vec4-rgba-value-to-a-float\n   */\n  protected decodeUint8(): {[name: string]: GlslLibRoutine} {\n    const endianness = EncodingGlslLib.isLittleEndian() ? 'rgba.rgba=rgba.abgr;' : '';\n    return {\n      decode: new GlslLibRoutine(`\n        highp float decode(highp vec4 rgba) {\n          rgba = rgba * 255.0; // values need to be de-normalized from [0,1] to [0,255]\n          ${endianness}\n          highp float Sign = 1.0 - step(128.0,rgba[0])*2.0;\n          highp float Exponent = 2.0 * mod(rgba[0],128.0) + step(128.0,rgba[1]) - 127.0;\n          highp float Mantissa = mod(rgba[1],128.0)*65536.0 + rgba[2]*256.0 +rgba[3] + float(0x800000);\n          highp float Result =  Sign * exp2(Exponent) * (Mantissa * exp2(-23.0 ));\n          return Result;\n      }\n        `)\n    };\n  }\n  /**\n   * Determines if the machine is little endian or not\n   * @credit: https://gist.github.com/TooTallNate/4750953\n   */\n  static isLittleEndian(): boolean {\n    const b = new ArrayBuffer(4);\n    const a = new Uint32Array(b);\n    const c = new Uint8Array(b);\n    a[0] = 0xdeadbeef;\n    if (c[0] === 0xef) {\n      return true;\n    }\n    if (c[0] === 0xde) {\n      return false;\n    }\n    throw new Error('unknown endianness');\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\nimport {getGlsl} from './glsl-source';\n\n/**\n * This GLSL library handles routines around reading a texlet and writing to it\n * Reading and writing could be more than just dealing with one channel\n * It may require encoding/decoding to/from 4 channels into one\n */\nexport class FragColorGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {...this.setFragColor(), ...this.getColorAsFloat()};\n  }\n  getCustomTypes(): {[name: string]: string} {\n    return {};\n  }\n  protected setFragColor(): {[name: string]: GlslLibRoutine} {\n    const glsl = getGlsl(this.context.glContext.version);\n    return {\n      setFragColor: new GlslLibRoutine(\n          `\n        void setFragColor(float value) {\n            ${glsl.output} = encode(value);\n        }\n        `,\n          ['encoding.encode'])\n    };\n  }\n  protected getColorAsFloat(): {[name: string]: GlslLibRoutine} {\n    return {\n      getColorAsFloat: new GlslLibRoutine(\n          `\n        float getColorAsFloat(vec4 color) {\n            return decode(color);\n        }\n        `,\n          ['encoding.decode'])\n    };\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nconst INLINE_FUNC_DEF_REGEX = /@inline[\\s\\n\\r]+(\\w+)[\\s\\n\\r]+([0-9a-zA-Z_]+)\\s*\\(([^)]*)\\)\\s*{(([^}]|[\\n\\r])*)}/gm;\nconst FUNC_CALL_REGEX = '(\\\\w+)?\\\\s+([_0-9a-zA-Z]+)\\\\s+=\\\\s+__FUNC__\\\\((.*)\\\\)\\\\s*;';\n/**\n * GLSL preprocessor responsible for resolving @inline directives\n */\nexport function replaceInlines(script: string): string {\n  const inlineDefs: {[name: string]: {params: Array<{type: string; name: string}|null>; body: string}} = {};\n  let match;\n  while ((match = INLINE_FUNC_DEF_REGEX.exec(script)) !== null) {\n    const params = match[3]\n                       .split(',')\n                       .map(s => {\n                         const tokens = s.trim().split(' ');\n                         if (tokens && tokens.length === 2) {\n                           return {type: tokens[0], name: tokens[1]};\n                         }\n                         return null;\n                       })\n                       .filter(v => v !== null);\n    inlineDefs[match[2]] = {params, body: match[4]};\n  }\n  for (const name in inlineDefs) {\n    const regexString = FUNC_CALL_REGEX.replace('__FUNC__', name);\n    const regex = new RegExp(regexString, 'gm');\n    while ((match = regex.exec(script)) !== null) {\n      const type = match[1];\n      const variable = match[2];\n      const params = match[3].split(',');\n      const declLine = (type) ? `${type} ${variable};` : '';\n      let newBody: string = inlineDefs[name].body;\n      let paramRedecLine = '';\n      inlineDefs[name].params.forEach((v, i) => {\n        if (v) {\n          paramRedecLine += `${v.type} ${v.name} = ${params[i]};\\n`;\n        }\n      });\n      newBody = `${paramRedecLine}\\n ${newBody}`;\n      newBody = newBody.replace('return', `${variable} = `);\n      const replacement = `\n      ${declLine}\n      {\n        ${newBody}\n      }\n      `;\n      script = script.replace(match[0], replacement);\n    }\n  }\n  script = script.replace(INLINE_FUNC_DEF_REGEX, '');\n  return script;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutineNode, TopologicalSortGlslRoutines} from './glsl-definitions';\nimport {replaceInlines} from './glsl-function-inliner';\nimport {glslRegistry} from './glsl-registered-libs';\nimport {getDefaultFragShaderMain, getFragShaderPreamble} from './glsl-source';\nimport {ProgramInfo, TextureLayout, VariableInfo} from './types';\nimport {WebGLContext} from './webgl-context';\n\n/**\n * Preprocessor for the additions to the GLSL language\n * It deals with:\n *  @include directives\n *  @inline\n *  Loop unrolling (not implemented)\n *  Macro resolution (not implemented)\n */\nexport class GlslPreprocessor {\n  readonly context: GlslContext;\n  readonly libs: {[name: string]: GlslLib} = {};\n  readonly glslLibRoutineDependencyGraph: {[routineName: string]: GlslLibRoutineNode} = {};\n\n  constructor(\n      glContext: WebGLContext, programInfo: ProgramInfo, inputTextureLayouts: TextureLayout[],\n      outputTextureLayout: TextureLayout) {\n    this.context = new GlslContext(glContext, programInfo, inputTextureLayouts, outputTextureLayout);\n\n    // construct GlslLibs\n    Object.keys(glslRegistry).forEach((name: string) => {\n      const lib = new glslRegistry[name](this.context);\n      this.libs[name] = lib;\n    });\n\n    // construct GlslRoutineDependencyGraph\n    const map = this.glslLibRoutineDependencyGraph;\n    for (const libName in this.libs) {\n      const lib = this.libs[libName];\n      const routinesInLib = lib.getFunctions();\n      for (const routine in routinesInLib) {\n        const key = libName + '.' + routine;\n        let currentNode: GlslLibRoutineNode;\n        if (map[key]) {\n          currentNode = map[key];\n          currentNode.routineBody = routinesInLib[routine].routineBody;\n        } else {\n          currentNode = new GlslLibRoutineNode(key, routinesInLib[routine].routineBody);\n          map[key] = currentNode;\n        }\n        const dependencies = routinesInLib[routine].dependencies;\n        if (dependencies) {\n          for (let i = 0; i < dependencies.length; ++i) {\n            if (!map[dependencies[i]]) {\n              const node = new GlslLibRoutineNode(dependencies[i]);\n              map[dependencies[i]] = node;\n              currentNode.addDependency(node);\n            } else {\n              currentNode.addDependency(map[dependencies[i]]);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  preprocess(): string {\n    const programInfo = this.context.programInfo;\n    let source = programInfo.shaderSource;\n\n    // append main() function\n    if (!this.context.programInfo.hasMain) {\n      source = `${source}\n      ${getDefaultFragShaderMain(this.context.glContext.version, this.context.outputTextureLayout.shape.length)}`;\n    }\n    // replace inlines\n    source = replaceInlines(source);\n\n    // concat final source string\n    return `${getFragShaderPreamble(this.context.glContext.version)}\n    ${this.getUniforms(programInfo.inputNames, programInfo.variables)}\n    ${this.getImports(source)}\n    ${source}`;\n  }\n\n  protected getImports(script: string): string {\n    const routinesIncluded = this.selectGlslLibRoutinesToBeIncluded(script);\n\n    if (routinesIncluded.length === 0) {\n      return '';\n    }\n\n    let routines = '';\n    for (let i = 0; i < routinesIncluded.length; ++i) {\n      if (routinesIncluded[i].routineBody) {\n        routines += routinesIncluded[i].routineBody + '\\n';\n      } else {\n        throw new Error(`Missing body for the Glsl Library routine: ${routinesIncluded[i].name}`);\n      }\n    }\n\n    return routines;\n  }\n  private selectGlslLibRoutinesToBeIncluded(script: string): GlslLibRoutineNode[] {\n    const nodes: GlslLibRoutineNode[] = [];\n\n    Object.keys(this.glslLibRoutineDependencyGraph).forEach(classAndRoutine => {\n      const routine = classAndRoutine.split('.')[1];\n      if (script.indexOf(routine) !== -1) {\n        nodes.push(this.glslLibRoutineDependencyGraph[classAndRoutine]);\n      }\n    });\n\n    return TopologicalSortGlslRoutines.returnOrderedNodes(nodes);\n  }\n\n  protected getUniforms(samplers?: string[], variables?: VariableInfo[]): string {\n    const uniformLines: string[] = [];\n    if (samplers) {\n      for (const sampler of samplers) {\n        uniformLines.push(`uniform sampler2D ${sampler};`);\n      }\n    }\n    if (variables) {\n      for (const variable of variables) {\n        uniformLines.push(\n            `uniform ${variable.type} ${variable.name}${variable.arrayLength ? `[${variable.arrayLength}]` : ''};`);\n      }\n    }\n    return uniformLines.join('\\n');\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {CoordsGlslLib} from './glsl-coordinate-lib';\nimport {GlslContext, GlslLib} from './glsl-definitions';\nimport {EncodingGlslLib} from './glsl-encoding-lib';\nimport {FragColorGlslLib} from './glsl-fragcolor-lib';\nimport {ShapeUtilsGlslLib} from './glsl-shape-utils-lib';\nimport {VecGlslLib} from './glsl-vec-lib';\n\nexport const glslRegistry: {[name: string]: new (context: GlslContext) => GlslLib} = {\n  'encoding': EncodingGlslLib,\n  'fragcolor': FragColorGlslLib,\n  'vec': VecGlslLib,\n  'shapeUtils': ShapeUtilsGlslLib,\n  'coordinates': CoordsGlslLib,\n  //  'arrays': ArrayGlslSLib\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\n\n/**\n * GLSL Library responsible for data types and routines for manipulating\n * coordinates and mapping to/from tensor indices\n */\nexport class ShapeUtilsGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {\n      ...this.bcastIndex(),\n      ...this.bcastMatmulIndex(),\n      ...this.offsetToIndices(),\n      ...this.indicesToOffset(),\n      ...this.incrementIndices()\n    };\n  }\n  getCustomTypes() {\n    return {};\n  }\n  protected bcastIndex(): {[name: string]: GlslLibRoutine} {\n    const outputRank = this.context.outputTextureLayout.shape.length;\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].unpackedShape;\n      if (shape.length <= outputRank) {\n        const rank = shape.length;\n        const dimOffset = outputRank - rank;\n        const funcName = `bcastIndices_${name}`;\n        let block = '';\n        for (let i = 0; i < rank; ++i) {\n          block += `\n          realIndices[${i}] = int( mod(float(bcastedIndices[${dimOffset + i}]), ${shape[i]}.0) );\n          `;\n        }\n        const body = `\n        void ${funcName} (int bcastedIndices[${outputRank}], out int realIndices[${rank}]) {\n          ${block}\n        }\n        `;\n        result[funcName] = new GlslLibRoutine(body);\n      }\n    });\n    return result;\n  }\n  protected bcastMatmulIndex(): {[name: string]: GlslLibRoutine} {\n    const outputRank = this.context.outputTextureLayout.shape.length;\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      if (!(shape.length < 2 || shape.length > outputRank)) {\n        const rank = shape.length;\n        const dimOffset = outputRank - rank;\n        const funcName = `bcastMatmulIndices_${name}`;\n        let block = '';\n        for (let i = 0; i < rank - 2; ++i) {\n          block += `\n          realIndices[${i}] = int( mod(float(bcastedIndices[${dimOffset + i}]), ${shape[i]}.0) );\n          `;\n        }\n        const body = `\n        void ${funcName}(int bcastedIndices[${outputRank}], out int realIndices[${rank}]) {\n          ${block}\n          realIndices[${rank - 1}] = bcastedIndices[${outputRank - 1}];\n          realIndices[${rank - 2}] = bcastedIndices[${outputRank - 2}];\n        }\n        `;\n        result[funcName] = new GlslLibRoutine(body);\n      }\n    });\n    return result;\n  }\n  protected indicesToOffset(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      const strides = this.context.inputTextureLayouts[i].strides;\n      const rank = shape.length;\n      let funcName = `indicesToOffset_${name}`;\n      result[funcName] = new GlslLibRoutine(ShapeUtilsGlslLib.indexToOffsetSingle(funcName, rank, strides));\n      funcName = `indicesToOffset_${name}_T`;\n      result[funcName] =\n          new GlslLibRoutine(ShapeUtilsGlslLib.indexToOffsetSingle(funcName, rank, strides.slice().reverse()));\n    });\n    return result;\n  }\n  static indexToOffsetSingle(name: string, rank: number, strides: readonly number[]): string {\n    let block = '';\n    for (let i = rank - 1; i >= 0; --i) {\n      block += `\n        offset += indices[${i}] * ${strides[i]};\n        `;\n    }\n    return `\n      int ${name}(int indices[${rank}]) {\n        int offset = 0;\n        ${block}\n        return offset;\n      }\n      `;\n  }\n  protected offsetToIndices(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      const strides = this.context.inputTextureLayouts[i].strides;\n      const rank = shape.length;\n      let funcName = `offsetToIndices_${name}`;\n      result[funcName] = new GlslLibRoutine(ShapeUtilsGlslLib.offsetToIndicesSingle(funcName, rank, strides));\n      funcName = `offsetToIndices_${name}_T`;\n      result[funcName] =\n          new GlslLibRoutine(ShapeUtilsGlslLib.offsetToIndicesSingle(funcName, rank, strides.slice().reverse()));\n    });\n    return result;\n  }\n  static offsetToIndicesSingle(name: string, rank: number, strides: readonly number[]): string {\n    const stridesBlock = [];\n    for (let i = 0; i < rank - 1; ++i) {\n      stridesBlock.push(`\n      indices[${i}] = offset / ${strides[i]};`);\n      stridesBlock.push(`\n        offset -= indices[${i}] * ${strides[i]};`);\n    }\n    stridesBlock.push(`\n      indices[${rank - 1}] = offset;`);\n    return `\n      void ${name}(int offset, out int indices[${rank}]) {\n        ${stridesBlock.join('')}\n      }\n      `;\n  }\n  protected incrementIndices(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      const rank = shape.length;\n      const funcName = `incrementIndices_${name}`;\n      let shapeInit = '';\n      for (let i = 0; i < rank; ++i) {\n        shapeInit += `\n        shape[${i}] = ${shape[i]};`;\n      }\n      const body = `\n        void ${funcName}(int axis, out int indices[${rank}]) {\n          int shape[${rank}];\n          ${shapeInit};\n          for(int i = ${rank} -1 ; i >= 0; --i) {\n            if(i > axis) continue;\n            indices[i] += 1;\n            if(indices[i] < shape[i]) {\n              break;\n            }\n            indices[i] = 0;\n          }\n        }\n        `;\n      result[funcName] = new GlslLibRoutine(body);\n    });\n    return result;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/**\n * represent a version irrelevant abstraction of for GLSL source code\n */\nexport interface Glsl {\n  readonly version: string;\n  readonly attribute: string;\n  readonly varyingVertex: string;\n  readonly varyingFrag: string;\n  readonly texture2D: string;\n  readonly output: string;\n  readonly outputDeclaration: string;\n}\n\nconst GLSL_ES_2_0: Glsl = {\n  version: '',\n  attribute: 'attribute',\n  varyingVertex: 'varying',\n  varyingFrag: 'varying',\n  texture2D: 'texture2D',\n  output: 'gl_FragColor',\n  outputDeclaration: '',\n};\nconst GLSL_ES_3_0: Glsl = {\n  version: '#version 300 es',\n  attribute: 'in',\n  varyingVertex: 'out',\n  varyingFrag: 'in',\n  texture2D: 'texture',\n  output: 'outputColor',\n  outputDeclaration: 'out vec4 outputColor;',\n};\n\nexport function getGlsl(version: 1|2) {\n  return version === 1 ? GLSL_ES_2_0 : GLSL_ES_3_0;\n}\n\nexport function getVertexShaderSource(version: 1|2): string {\n  const glsl = getGlsl(version);\n  return `${glsl.version}\n      precision highp float;\n      ${glsl.attribute} vec3 position;\n      ${glsl.attribute} vec2 textureCoord;\n\n      ${glsl.varyingVertex} vec2 TexCoords;\n\n      void main()\n      {\n          gl_Position = vec4(position, 1.0);\n          TexCoords = textureCoord;\n      }`;\n}\n\nexport function getFragShaderPreamble(version: 1|2): string {\n  const glsl = getGlsl(version);\n  return `${glsl.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${glsl.varyingFrag} vec2 TexCoords;\n    ${glsl.outputDeclaration}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    // Custom vector types to handle higher dimenalities.\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    `;\n}\n\nexport function getDefaultFragShaderMain(version: 1|2, outputShapeLength: number): string {\n  const glsl = getGlsl(version);\n  return `\n  void main() {\n    int indices[${outputShapeLength}];\n    toVec(TexCoords, indices);\n    vec4 result = vec4(process(indices));\n    ${glsl.output} = result;\n  }\n  `;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\n\n/**\n * GLSL Library responsible for vec routines\n * Vec is an varible length int array. The length is fixed at the time of\n * generating the library functions from the dimensions of the output.\n */\nexport class VecGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getCustomTypes(): {[name: string]: string} {\n    return {};\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {...this.binaryVecFunctions(), ...this.copyVec(), ...this.setVecItem(), ...this.getVecItem()};\n  }\n  protected binaryVecFunctions(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    const nameOp: {[name: string]: string} = {add: '+=', sub: '-=', mul: '*=', div: '/='};\n    const result: {[name: string]: GlslLibRoutine} = {};\n    for (const name in nameOp) {\n      const fname = `${name}Vec`;\n      let assignmentBlock = '';\n      for (let i = 0; i < rank; ++i) {\n        assignmentBlock += `\n          dest[${i}] ${nameOp[name]} src[${i}];\n          `;\n      }\n      const body = `\n        void ${fname}(int src[${rank}], out int dest[${rank}]) {\n          ${assignmentBlock}\n        }\n        `;\n      result[fname] = new GlslLibRoutine(body);\n    }\n\n    return result;\n  }\n  protected copyVec(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    let assignmentBlock = '';\n    for (let i = 0; i < rank; ++i) {\n      assignmentBlock += `\n        dest[${i}] = src[${i}];\n        `;\n    }\n    const body = `\n      void copyVec(int src[${rank}], out int dest[${rank}]) {\n        ${assignmentBlock}\n      }\n      `;\n    return {copyVec: new GlslLibRoutine(body)};\n  }\n\n  protected setVecItem(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    let block = `\n        if(index < 0)\n            index =${rank} + index;\n        if (index == 0)\n            m[0] = value;\n        `;\n    for (let i = 1; i < rank - 1; ++i) {\n      block += `\n        else if (index == ${i})\n            m[${i}] = value;\n            `;\n    }\n    block += `\n        else\n            m[${rank - 1}] = value;\n        `;\n    const body = `\n      void setVecItem(out int m[${rank}], int index, int value) {\n        ${block}\n      }\n        `;\n    return {setVecItem: new GlslLibRoutine(body)};\n  }\n  protected getVecItem(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    let block = `\n        if(index < 0)\n            index = ${rank} + index;\n        if (index == 0)\n            return m[0];\n      `;\n    for (let i = 1; i < rank - 1; ++i) {\n      block += `\n        else if (index == ${i})\n            return m[${i}];\n      `;\n    }\n    block += `\n        else\n            return m[${rank - 1}];\n        `;\n    const body = `\n      int getVecItem(int m[${rank}], int index) {\n        ${block}\n      }\n    `;\n    return {getVecItem: new GlslLibRoutine(body)};\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceHandler} from '../../backend';\nimport {Logger} from '../../instrument';\nimport {Tensor} from '../../tensor';\nimport {ShapeUtil} from '../../util';\n\nimport {createPackProgramInfoLoader} from './ops/pack';\nimport {createPackedReshape3DProgramInfoLoader, isReshapeCheap, processDims3D} from './ops/reshape-packed';\nimport {encodeAsUint8} from './ops/uint8-encode';\nimport {createUnpackProgramInfoLoader} from './ops/unpack';\nimport {WebGLSessionHandler} from './session-handler';\nimport {Encoder} from './texture-data-encoder';\nimport {calculateTextureWidthAndHeight, createTextureLayoutFromShape, createTextureLayoutFromTextureType} from './texture-layout';\nimport {Artifact, ProgramInfo, ProgramInfoLoader, TextureData, TextureLayout, TextureType} from './types';\n\nconst getProgramInfoUniqueKey =\n    (programInfo: ProgramInfo|ProgramInfoLoader, inputTextureDatas: TextureData[]): string => {\n      const inputs =\n          inputTextureDatas.map(texture => `${texture.unpackedShape.join(',')};${texture.width}x${texture.height}`)\n              .join('_');\n      let key = programInfo.name;\n      if (programInfo.cacheHint) {\n        key += '[' + programInfo.cacheHint + ']';\n      }\n      key += ':' + inputs;\n      return key;\n    };\n\nexport class WebGLInferenceHandler implements InferenceHandler {\n  private packedTextureDataCache: Map<Tensor.Id, TextureData>;\n  private unpackedTextureDataCache: Map<Tensor.Id, TextureData>;\n  constructor(public session: WebGLSessionHandler) {\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache = new Map();\n  }\n\n  /**\n   * @returns [width, height]\n   */\n  calculateTextureWidthAndHeight(shape: readonly number[], textureType: TextureType): [number, number] {\n    return calculateTextureWidthAndHeight(this.session.layoutStrategy, shape, textureType);\n  }\n\n  executeProgram(program: ProgramInfo|ProgramInfoLoader, inputs: readonly Tensor[]): TextureData {\n    if (inputs.length < program.inputNames.length) {\n      throw new Error(`Input size mustn't be less than ${program.inputNames.length}.`);\n    }\n    if (program.inputNames.length !== program.inputTypes.length) {\n      throw new Error('input names size does not match input types');\n    }\n\n    // create texture info for input\n    const inputTextureDatas: TextureData[] = [];\n    for (let i = 0; i < program.inputNames.length; ++i) {\n      inputTextureDatas[i] = this.getOrCreateTextureData(inputs[i], program.inputTypes[i]);\n    }\n\n    const key = getProgramInfoUniqueKey(program, inputTextureDatas);\n    let artifact = this.session.programManager.getArtifact(key);\n    const programInfo = artifact ?\n        artifact.programInfo :\n        (typeof (program as ProgramInfoLoader).get === 'function' ? (program as ProgramInfoLoader).get() :\n                                                                    (program as ProgramInfo));\n\n    // create texture info for output\n    const outputTextureLayout = createTextureLayoutFromTextureType(\n        this.session.layoutStrategy, programInfo.output.dims, programInfo.output.textureType);\n    const outputTextureData = this.createTextureData(outputTextureLayout, programInfo.output.type);\n\n    if (!artifact) {\n      artifact = this.session.programManager.build(programInfo, inputTextureDatas, outputTextureData);\n      this.session.programManager.setArtifact(key, artifact);\n    }\n\n    this.runProgram(artifact, inputTextureDatas, outputTextureData);\n    return outputTextureData;\n  }\n\n  run(program: ProgramInfoLoader, inputs: readonly Tensor[]): Tensor {\n    const outputTextureData = this.executeProgram(program, inputs);\n    return outputTextureData.tensor;\n  }\n\n  private runProgram(artifact: Artifact, inputs: TextureData[], output: TextureData): void {\n    // input should match\n    for (let i = 0; i < inputs.length; ++i) {\n      if (!!inputs[i].isPacked !== (artifact.programInfo.inputTypes[i] === TextureType.packed)) {\n        throw new Error(`input[${i}] property packed inconsistent`);\n      }\n    }\n\n    // output should match\n    if (!!output.isPacked !== (artifact.programInfo.output.textureType === TextureType.packed)) {\n      throw new Error('output property packed inconsistent');\n    }\n\n    this.session.programManager.run(artifact, inputs, output);\n  }\n\n  /**\n   * Create a TextureData object from a tensor.\n   * Usage = Encoder.Usage.UploadOnly.\n   * If a related texture data is found in cache, returns it;\n   * Otherwise:\n   *   Creates a new texture layout if not provided;\n   *   Creates WebGLTexture with the layout;\n   *   Upload tensor data to the texture;\n   *   Creates a texture data object associated with the given tensor.\n   * @param tensor the tensor with data to upload\n   */\n  private getOrCreateTextureData(tensor: Tensor, textureType: TextureType) {\n    let td = this.getTextureData(tensor.dataId, textureType === TextureType.packed);\n\n    if (!td) {\n      // check if we have texture data in different type\n      td = this.getTextureData(tensor.dataId, textureType !== TextureType.packed);\n      if (td) {\n        if (textureType === TextureType.packed) {\n          return this.pack(td);\n        } else {\n          return this.unpack(td);\n        }\n      }\n    }\n\n    if (!td) {\n      const layout = createTextureLayoutFromTextureType(this.session.layoutStrategy, tensor.dims, textureType);\n\n      if (textureType === TextureType.packedLastDimension) {\n        const group = 1;\n        const channels = 4;\n        const shape = tensor.dims;\n        if (shape.length === 4) {\n          // pre-processing for kernel data of Conv.\n          //\n          // TODO: currently this is a hacking to overwrite Conv's weight. The correct way to do this should be:\n          // 1. implement texture based const-folding\n          // 2. create a WebGL program \"preprocessConvWeight\" to do the same work as below\n          // 3. run the program before dotProduct.\n          //\n          const adjustedKernelShape = [shape[0], Math.ceil((shape[1] * shape[2] * shape[3]) / channels)];\n          const adjustedLayout =\n              createTextureLayoutFromTextureType(this.session.layoutStrategy, adjustedKernelShape, textureType);\n          let buffer = tensor.numberData;\n          if (shape[1] * shape[2] * shape[3] % channels !== 0) {\n            const numFeatureMaps = shape[0];\n            const oldRowSize = shape[1] * shape[2] * shape[3];\n            const newRowSize = Math.ceil(oldRowSize * group / channels) * channels;\n            const newSize = numFeatureMaps * newRowSize;\n            buffer = new Float32Array(newSize);\n            for (let f = 0; f < numFeatureMaps; ++f) {\n              const oldOffset = f * oldRowSize;\n              const newOffset = f * newRowSize + f % group * oldRowSize;\n              buffer.set(tensor.numberData.subarray(oldOffset, oldOffset + oldRowSize), newOffset);\n            }\n          }\n          return this.createTextureData(adjustedLayout, tensor.type, buffer, tensor, Encoder.Usage.UploadOnly);\n        }\n      }\n\n      if (textureType === TextureType.packed) {\n        const unpackedTextureLayout =\n            createTextureLayoutFromShape(this.session.layoutStrategy, tensor.dims, 1, [], {reverseWH: true});\n        const unpackedTextureData = this.createTextureData(\n            unpackedTextureLayout, tensor.type, tensor.numberData, tensor, Encoder.Usage.UploadOnly);\n        td = this.pack(unpackedTextureData);\n      } else {\n        td = this.createTextureData(layout, tensor.type, tensor.numberData, tensor, Encoder.Usage.UploadOnly);\n      }\n    }\n    return td;\n  }\n\n  /**\n   * Create a TextureData object using the given data and bind to the given tensor.\n   * Usage = Encoder.Usage.UploadOnly.\n   * NOTE: this function is a hack for Conv implementation. should remove this function, after rewriting Conv\n   * implementation by Graph.Transformer\n   * @param dataType the tensor data type\n   * @param data the actual data to upload\n   * @param tensor the tensor to bind. tensor's data is ignored.\n   */\n  createTextureDataFromLayoutBindTensor(\n      layout: TextureLayout, dataType: Tensor.DataType, data: Tensor.NumberType, tensor: Tensor): TextureData {\n    return this.createTextureData(layout, dataType, data, tensor, Encoder.Usage.UploadOnly);\n  }\n\n  private createTextureData(\n      layout: TextureLayout, dataType: Tensor.DataType, data?: Tensor.NumberType, tensor?: Tensor,\n      usage?: Encoder.Usage): TextureData {\n    Logger.verbose('InferenceHandler', `Creating TextureData: layout:[${JSON.stringify(layout)}]`);\n    const texture = this.session.textureManager.createTextureFromLayout(dataType, layout, data, usage);\n    return this.createTextureDataFromTexture(layout, dataType, texture, tensor);\n  }\n\n  reshapeUnpacked(input: Tensor, reshapedDims: readonly number[]): Tensor {\n    const inputTD = this.getOrCreateTextureData(input, TextureType.unpacked);\n    const newTextureLayout: TextureLayout = {\n      channels: inputTD.channels,\n      height: inputTD.height,\n      width: inputTD.width,\n      // handle reshaping into scalar Tensors\n      shape: reshapedDims.length !== 0 ? reshapedDims : [1],\n      strides: ShapeUtil.computeStrides(reshapedDims),\n      unpackedShape: reshapedDims,\n    };\n    const newTextureData = this.createTextureDataFromTexture(newTextureLayout, input.type, inputTD.texture);\n    return newTextureData.tensor;\n  }\n\n  reshapePacked(input: Tensor, reshapedDims: readonly number[]): Tensor {\n    const inputTD = this.getOrCreateTextureData(input, TextureType.packed);\n\n    // check if the reshape is 'cheap'\n    if (isReshapeCheap(input.dims, reshapedDims)) {\n      const newTextureLayout: TextureLayout = {\n        channels: inputTD.channels,\n        height: inputTD.height,\n        width: inputTD.width,\n        // handle reshaping into scalar Tensors\n        shape: reshapedDims.length !== 0 ? reshapedDims : [1],\n        strides: ShapeUtil.computeStrides(reshapedDims),\n        unpackedShape: reshapedDims,\n        isPacked: true\n      };\n      const newTextureData = this.createTextureDataFromTexture(newTextureLayout, input.type, inputTD.texture);\n      return newTextureData.tensor;\n    }\n\n    const squeezedInputShape = processDims3D(input.dims);\n    const squeezedOutputShape = processDims3D(reshapedDims);\n\n    const squeezedInputTensor = this.reshapePacked(input, squeezedInputShape);\n    const squeezedOutputTensor = this.run(\n        createPackedReshape3DProgramInfoLoader(this, squeezedInputTensor, squeezedOutputShape), [squeezedInputTensor]);\n    const outputTensor = this.reshapePacked(squeezedOutputTensor, reshapedDims);\n    return outputTensor;\n  }\n\n  cast(input: Tensor, type: Tensor.DataType): Tensor {\n    const inputTD = this.getOrCreateTextureData(input, TextureType.unpacked);\n    const newTextureData = this.createTextureDataFromTexture(inputTD as TextureLayout, type, inputTD.texture);\n    return newTextureData.tensor;\n  }\n\n  private createTextureDataFromTexture(\n      layout: TextureLayout, dataType: Tensor.DataType, texture: WebGLTexture, tensor?: Tensor, tensorId?: Tensor.Id) {\n    const textureData: TextureData = {\n      ...layout,\n      tensor: tensor ||\n          new Tensor(\n                  layout.unpackedShape, dataType, (_id: Tensor.Id) => this.readTexture(textureData),\n                  async (_id: Tensor.Id) => this.readTextureAsync(textureData), undefined, tensorId),\n      texture\n    };\n    this.setTextureData(textureData.tensor.dataId, textureData, layout.isPacked);\n    return textureData;\n  }\n\n  private getTextureData(tensorId: Tensor.Id, isPacked = false): TextureData|undefined {\n    return this.session.isInitializer(tensorId) ? this.session.getTextureData(tensorId, isPacked) :\n        isPacked                                ? this.packedTextureDataCache.get(tensorId) :\n                                                  this.unpackedTextureDataCache.get(tensorId);\n  }\n  setTextureData(tensorId: Tensor.Id, td: TextureData, isPacked = false): void {\n    if (this.session.isInitializer(tensorId)) {\n      this.session.setTextureData(tensorId, td, isPacked);\n    } else {\n      (isPacked ? this.packedTextureDataCache : this.unpackedTextureDataCache).set(tensorId, td);\n    }\n  }\n  isTextureLayoutCached(tensor: Tensor, isPacked = false): boolean {\n    return !!this.getTextureData(tensor.dataId, isPacked);\n  }\n\n  dispose(): void {\n    this.session.textureManager.clearActiveTextures();\n    this.packedTextureDataCache.forEach(td => this.session.textureManager.releaseTexture(td));\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache.forEach(td => this.session.textureManager.releaseTexture(td));\n    this.unpackedTextureDataCache = new Map();\n  }\n\n  readTexture(textureData: TextureData): Tensor.NumberType {\n    if (textureData.isPacked) {\n      return this.readTexture(this.unpack(textureData));\n    }\n    if (!this.session.backend.glContext.isFloat32DownloadSupported) {\n      return this.session.textureManager.readUint8TextureAsFloat(encodeAsUint8(this, textureData));\n    }\n    return this.session.textureManager.readTexture(textureData, textureData.tensor.type, textureData.channels);\n  }\n\n  async readTextureAsync(textureData: TextureData): Promise<Tensor.NumberType> {\n    if (textureData.isPacked) {\n      return this.readTextureAsync(this.unpack(textureData));\n    }\n    if (!this.session.backend.glContext.isFloat32DownloadSupported) {\n      return this.session.textureManager.readUint8TextureAsFloat(encodeAsUint8(this, textureData));\n    }\n    return this.session.textureManager.readTextureAsync(textureData, textureData.tensor.type, textureData.channels);\n  }\n\n  pack(input: TextureData): TextureData {\n    const outputTextureData = this.executeProgram(createPackProgramInfoLoader(this, input.tensor), [input.tensor]);\n    return outputTextureData;\n  }\n\n  unpack(input: TextureData): TextureData {\n    const outputTextureData = this.executeProgram(createUnpackProgramInfoLoader(this, input.tensor), [input.tensor]);\n    return outputTextureData;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {OpSet} from '../../opset';\n\nimport {batchNormalization, parseBatchNormalizationAttributes} from './ops/batch-normalization';\nimport * as binaryOps from './ops/binary-op';\nimport {cast, parseCastAttributes} from './ops/cast';\nimport {concat, parseConcatAttributes} from './ops/concat';\nimport {conv, parseConvAttributes} from './ops/conv';\nimport {convTranspose, parseConvTransposeAttributes} from './ops/conv-transpose';\nimport {depthToSpace, parseDepthToSpaceAttributes} from './ops/depth-to-space';\nimport {flatten, parseFlattenAttributes} from './ops/flatten';\nimport {gather, parseGatherAttributes} from './ops/gather';\nimport {gemm, parseGemmAttributesV11, parseGemmAttributesV7} from './ops/gemm';\nimport {imageScaler, parseImageScalerAttributes} from './ops/image-scaler';\nimport {instanceNormalization, parseInstanceNormalizationAttributes} from './ops/instance-normalization';\nimport {lrn, parseLrnAttributes} from './ops/lrn';\nimport {matMul, parseMatMulAttributes} from './ops/matmul';\nimport {padV11, padV2, parsePadAttributesV11, parsePadAttributesV2} from './ops/pad';\nimport {averagePool, globalAveragePool, globalMaxPool, maxPool, parseAveragePoolAttributes, parseGlobalAveragePoolAttributes, parseMaxPoolAttributes} from './ops/pool';\nimport {parseReduceAttributes, reduceLogSum, reduceLogSumSquare, reduceMax, reduceMean, reduceMin, reduceProd, reduceSum} from './ops/reduce';\nimport {reshape} from './ops/reshape';\nimport {parseResizeAttributesV10, parseResizeAttributesV11, resize} from './ops/resize-packed';\nimport {shape} from './ops/shape';\nimport {parseSliceAttributes, slice, sliceV10} from './ops/slice';\nimport {parseSoftmaxAttributes, parseSoftmaxAttributesV13, softmax, softmaxV13} from './ops/softmax';\nimport {parseSplitAttributes, split} from './ops/split';\nimport {parseSqueezeAttributes, squeeze, squeezeV13} from './ops/squeeze';\nimport {sum} from './ops/sum';\nimport {tile} from './ops/tile';\nimport {parseTransposeAttributes, transpose} from './ops/transpose';\nimport * as unaryOps from './ops/unary-op';\nimport {parseUnsqueezeAttributes, unsqueeze, unsqueezeV13} from './ops/unsqueeze';\nimport {parseUpsampleAttributesV7, parseUpsampleAttributesV9, upsample} from './ops/upsample';\n\nexport const WEBGL_OP_RESOLVE_RULES: readonly OpSet.ResolveRule[] = [\n  ['Abs', '', '6+', unaryOps.abs],\n  ['Acos', '', '7+', unaryOps.acos],\n  ['Add', '', '7+', binaryOps.add],\n  ['And', '', '7+', binaryOps.and],\n  ['Asin', '', '7+', unaryOps.asin],\n  ['Atan', '', '7+', unaryOps.atan],\n  // TODO: support new attributes for AveragePool-10\n  ['AveragePool', '', '7+', averagePool, parseAveragePoolAttributes],\n  ['BatchNormalization', '', '7+', batchNormalization, parseBatchNormalizationAttributes],\n  ['Cast', '', '6+', cast, parseCastAttributes],\n  ['Ceil', '', '6+', unaryOps.ceil],\n  ['Clip', '', '6-10', unaryOps.clip, unaryOps.parseClipAttributes],\n  ['Clip', '', '11+', unaryOps.clipV11],\n  ['Concat', '', '4+', concat, parseConcatAttributes],\n  ['Conv', '', '1+', conv, parseConvAttributes],\n  ['ConvTranspose', '', '1+', convTranspose, parseConvTransposeAttributes],\n  ['Cos', '', '7+', unaryOps.cos],\n  ['Div', '', '7+', binaryOps.div],\n  ['Dropout', '', '7+', unaryOps.identity],\n  ['DepthToSpace', '', '1+', depthToSpace, parseDepthToSpaceAttributes],\n  ['Equal', '', '7+', binaryOps.equal],\n  ['Elu', '', '6+', unaryOps.elu, unaryOps.parseEluAttributes],\n  ['Exp', '', '6+', unaryOps.exp],\n  ['Flatten', '', '1+', flatten, parseFlattenAttributes],\n  ['Floor', '', '6+', unaryOps.floor],\n  ['FusedConv', 'com.microsoft', '1+', conv, parseConvAttributes],\n  ['Gather', '', '1+', gather, parseGatherAttributes],\n  ['Gemm', '', '7-10', gemm, parseGemmAttributesV7],\n  ['Gemm', '', '11+', gemm, parseGemmAttributesV11],\n  ['GlobalAveragePool', '', '1+', globalAveragePool, parseGlobalAveragePoolAttributes],\n  ['GlobalMaxPool', '', '1+', globalMaxPool],\n  ['Greater', '', '7+', binaryOps.greater],\n  ['Identity', '', '1+', unaryOps.identity],\n  ['ImageScaler', '', '1+', imageScaler, parseImageScalerAttributes],\n  ['InstanceNormalization', '', '6+', instanceNormalization, parseInstanceNormalizationAttributes],\n  ['LeakyRelu', '', '6+', unaryOps.leakyRelu, unaryOps.parseLeakyReluAttributes],\n  ['Less', '', '7+', binaryOps.less],\n  ['LRN', '', '1+', lrn, parseLrnAttributes],\n  ['Log', '', '6+', unaryOps.log],\n  ['MatMul', '', '1+', matMul, parseMatMulAttributes],\n  // TODO: support new attributes for MaxPool-8 and MaxPool-10\n  ['MaxPool', '', '1+', maxPool, parseMaxPoolAttributes],\n  ['Mul', '', '7+', binaryOps.mul],\n  ['Neg', '', '6+', unaryOps.neg],\n  ['Not', '', '1+', unaryOps.not],\n  ['Or', '', '7+', binaryOps.or],\n  ['Pad', '', '2-10', padV2, parsePadAttributesV2],\n  ['Pad', '', '11+', padV11, parsePadAttributesV11],\n  ['Pow', '', '7+', binaryOps.pow],\n  ['PRelu', '', '7+', binaryOps.pRelu],\n  ['ReduceLogSum', '', '1+', reduceLogSum, parseReduceAttributes],\n  ['ReduceMax', '', '1+', reduceMax, parseReduceAttributes],\n  ['ReduceMean', '', '1+', reduceMean, parseReduceAttributes],\n  ['ReduceMin', '', '1+', reduceMin, parseReduceAttributes],\n  ['ReduceProd', '', '1+', reduceProd, parseReduceAttributes],\n  ['ReduceSum', '', '1-12', reduceSum, parseReduceAttributes],\n  ['ReduceSumSquare', '', '1+', reduceLogSumSquare, parseReduceAttributes],\n  ['Relu', '', '6+', unaryOps.relu],\n  ['Reshape', '', '5+', reshape],\n  ['Resize', '', '10', resize, parseResizeAttributesV10],\n  ['Resize', '', '11+', resize, parseResizeAttributesV11],\n  ['Shape', '', '1+', shape],\n  ['Sigmoid', '', '6+', unaryOps.sigmoid],\n  ['Sin', '', '7+', unaryOps.sin],\n  ['Slice', '', '10+', sliceV10],  // TODO: support 'steps' for Slice-10\n  ['Slice', '', '1-9', slice, parseSliceAttributes],\n  // The \"semantic\" meaning of axis has changed in opset-13.\n  ['Softmax', '', '1-12', softmax, parseSoftmaxAttributes],\n  ['Softmax', '', '13+', softmaxV13, parseSoftmaxAttributesV13],\n  // 'Split' operator has an optional attribute 'split'\n  // this attribute determines how the specified axis of input data is split.\n  // When the attribute is missing, we need the count of number of outputs\n  // so that we can determine the 'split' attribute from the runtime input to the Operator\n  ['Split', '', '2-12', split, parseSplitAttributes],\n  ['Sqrt', '', '6+', unaryOps.sqrt],\n  ['Squeeze', '', '1-12', squeeze, parseSqueezeAttributes],\n  ['Squeeze', '', '13+', squeezeV13],\n  ['Sub', '', '7+', binaryOps.sub],\n  ['Sum', '', '6+', sum],\n  ['Tan', '', '7+', unaryOps.tan],\n  ['Tanh', '', '6+', unaryOps.tanh],\n  ['Tile', '', '6+', tile],\n  ['Transpose', '', '1+', transpose, parseTransposeAttributes],\n  ['Upsample', '', '7-8', upsample, parseUpsampleAttributesV7],\n  ['Upsample', '', '9', upsample, parseUpsampleAttributesV9],\n  ['Unsqueeze', '', '1-12', unsqueeze, parseUnsqueezeAttributes],\n  ['Unsqueeze', '', '13+', unsqueezeV13],\n  ['Xor', '', '7+', binaryOps.xor],\n];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface BatchNormalizationAttributes extends AttributeWithCacheKey {\n  epsilon: number;\n  momentum: number;\n  spatial: number;\n}\n\nconst batchNormalizationProgramMetadata = {\n  name: 'BatchNormalization',\n  inputNames: ['A', 'Scale', 'B', 'Mean', 'Variance'],\n  inputTypes:\n      [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked, TextureType.unpacked, TextureType.unpacked]\n};\n\nexport const batchNormalization: OperatorImplementation<BatchNormalizationAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: BatchNormalizationAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...batchNormalizationProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createBatchNormalizationProgramInfo(inferenceHandler, inputs, attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseBatchNormalizationAttributes: OperatorInitialization<BatchNormalizationAttributes> =\n    (node: Graph.Node): BatchNormalizationAttributes => {\n      const epsilon = node.attributes.getFloat('epsilon', 1e-5);\n      const momentum = node.attributes.getFloat('momentum', 0.9);\n      const spatial = node.attributes.getInt('spatial', 1);\n      return createAttributeWithCacheKey({epsilon, momentum, spatial});\n    };\n\nconst createBatchNormalizationProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: BatchNormalizationAttributes):\n        ProgramInfo => {\n          const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n          const rank = inputs[0].dims.length;\n          const [scaleWidth, scaleHeight] =\n              inferenceHandler.calculateTextureWidthAndHeight(inputs[1].dims, TextureType.unpacked);\n          const shaderSource = `\n  float process(int[${rank}] indices) {\n    vec2 position = offsetToCoords(indices[1], ${scaleWidth}, ${scaleHeight});\n    float scale = getColorAsFloat(${glsl.texture2D}(Scale, position));\n    float mean = getColorAsFloat(${glsl.texture2D}(Mean, position));\n    float variance = getColorAsFloat(${glsl.texture2D}(Variance, position));\n    float b = getColorAsFloat(${glsl.texture2D}(B, position));\n\n    return scale * ( (_A(indices) - mean) / sqrt(variance + float(${attributes.epsilon})) ) + b;\n  }`;\n          return {\n            ...batchNormalizationProgramMetadata,\n            output: {dims: inputs[0].dims, type: inputs[0].type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 5) {\n    throw new Error('BatchNormalization requires 5 inputs.');\n  }\n\n  const X = inputs[0];\n  const scale = inputs[1];\n  const B = inputs[2];\n  const mean = inputs[3];\n  const var_ = inputs[4];\n\n  // input should atleast have three dimensions - N,C,dim1,...,dimn\n  // other inputs can have only one dimensions\n  if (X.dims.length < 3 || scale.dims.length !== 1 || B.dims.length !== 1 || mean.dims.length !== 1 ||\n      var_.dims.length !== 1) {\n    throw new Error('invalid input shape.');\n  }\n  if (scale.dims[0] !== X.dims[1] || B.dims[0] !== X.dims[1] || mean.dims[0] !== X.dims[1] ||\n      var_.dims[0] !== X.dims[1]) {\n    throw new Error('invalid input shape.');\n  }\n  if ((X.type !== 'float32' && X.type !== 'float64') || (scale.type !== 'float32' && scale.type !== 'float64') ||\n      (B.type !== 'float32' && B.type !== 'float64') || (mean.type !== 'float32' && mean.type !== 'float64') ||\n      (var_.type !== 'float32' && var_.type !== 'float64')) {\n    throw new Error('invalid input tensor types.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\nimport {FunctionType, GlslValueFunction} from '../glsl-definitions';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\n\nexport function glslAdd(): GlslValueFunction {\n  const name = 'add_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a + b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 + v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslDiv(): GlslValueFunction {\n  const name = 'div_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a / b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 / v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslMul(): GlslValueFunction {\n  const name = 'mul_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a * b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 * v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSub(): GlslValueFunction {\n  const name = 'sub_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a - b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 - v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslEqual(): GlslValueFunction {\n  const name = 'equal_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a == b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4(equal(v1, v2));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslGreater(): GlslValueFunction {\n  const name = 'greater_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a > b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4( v1.r > v2.r ,\n      v1.g > v2.g,\n      v1.b > v2.b,\n      v1.a > v2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslLess(): GlslValueFunction {\n  const name = 'less_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a < b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4( v1.r < v2.r ,\n                v1.g < v2.g,\n                v1.b < v2.b,\n                v1.a < v2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslAnd(): GlslValueFunction {\n  const name = 'and_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) && bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r && b2.r ,\n                b1.g && b2.g,\n                b1.b && b2.b,\n                b1.a && b2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslOr(): GlslValueFunction {\n  const name = 'or_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) || bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r || b2.r ,\n                b1.g || b2.g,\n                b1.b || b2.b,\n                b1.a || b2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslXor(): GlslValueFunction {\n  const name = 'xor_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) ^^ bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r ^^ b2.r ,\n                b1.g ^^ b2.g,\n                b1.b ^^ b2.b,\n                b1.a ^^ b2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslPow(): GlslValueFunction {\n  return glslBuiltinBinary('pow');\n}\nexport function glslPRelu(): GlslValueFunction {\n  const name = 'prelu_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a < 0.0 ? a * b: a;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4(\n      v1.r < 0.0 ? v1.r * v2.r: v1.r,\n      v1.g < 0.0 ? v1.g * v2.g: v1.g,\n      v1.b < 0.0 ? v1.b * v2.b: v1.b,\n      v1.a < 0.0 ? v1.a * v2.a: v1.a\n      );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\n\nfunction glslBuiltinBinary(fname: string): GlslValueFunction {\n  const name = `${fname}_`;\n  const body = `\n  float ${name}(float a, float b) {\n    return ${fname}(a, b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return ${fname}(v1, v2);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\n\nconst createBinaryProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], glslFunc: GlslValueFunction,\n     outputTensorType: Tensor.DataType = inputs[0].type, cacheKey?: string): ProgramInfoLoader => {\n      const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n      return {\n        name: glslFunc.name,\n        inputNames: ['A', 'B'],\n        inputTypes: [textureType, textureType],\n        cacheHint: cacheKey,\n        get: () => createBinaryProgramInfo(handler, inputs, glslFunc, outputTensorType)\n      };\n    };\n\nconst createBinaryProgramInfo =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], glslFunc: GlslValueFunction,\n     outputTensorType: Tensor.DataType = inputs[0].type): ProgramInfo => {\n      const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n      const isBroadcast = !ShapeUtil.areEqual(inputs[0].dims, inputs[1].dims);\n      let outputShape = inputs[0].dims;\n\n      const usePackedTexture = handler.session.pack;\n\n      if (isBroadcast) {\n        const calculatedShape = BroadcastUtil.calcShape(inputs[0].dims, inputs[1].dims, false);\n        if (!calculatedShape) {\n          throw new Error('Can\\'t perform binary op on the given tensors');\n        }\n        outputShape = calculatedShape;\n        const outputRank = outputShape.length;\n        const aRank = inputs[0].dims.length !== 0 ? inputs[0].dims.length : 1;\n        const bRank = inputs[1].dims.length !== 0 ? inputs[1].dims.length : 1;\n        const aBcast = inputs[0].dims.length !== 0 ? 'bcastIndices_A(indices, aindices);' : 'aindices[0] = 0;';\n        const bBcast = inputs[1].dims.length !== 0 ? 'bcastIndices_B(indices, bindices);' : 'bindices[0] = 0;';\n\n        const glsl = getGlsl(handler.session.backend.glContext.version);\n        const shaderSource = usePackedTexture ? `\n      ${glslFunc.body}\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n        vec4 result = ${glslFunc.name}(a, b);\n        ${glsl.output} = result;\n      }` :\n                                                `\n      ${glslFunc.body}\n      float process(int indices[${outputRank}]) {\n        int aindices[${aRank}];\n        int bindices[${bRank}];\n        ${aBcast}\n        ${bBcast}\n        return ${glslFunc.name}(_A(aindices), _B(bindices));\n      }`;\n\n        return {\n          name: glslFunc.name,\n          inputNames: ['A', 'B'],\n          inputTypes: [textureType, textureType],\n          output: {dims: outputShape, type: outputTensorType, textureType},\n          shaderSource,\n          hasMain: usePackedTexture\n        };\n      }\n      const glsl = getGlsl(handler.session.backend.glContext.version);\n      const shaderSource = `\n    ${glslFunc.body}\n    void main() {\n      vec4 v1 = ${glsl.texture2D}(A, TexCoords);\n      vec4 v2 = ${glsl.texture2D}(B, TexCoords);\n      vec4 result = ${glslFunc.name}(v1, v2);\n      ${glsl.output} = result;\n    }\n    `;\n\n      return {\n        name: glslFunc.name,\n        inputNames: ['A', 'B'],\n        inputTypes: [textureType, textureType],\n        output: {dims: inputs[0].dims, type: outputTensorType, textureType},\n        shaderSource,\n        hasMain: true\n      };\n    };\n\nexport const add = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslAdd()), inputs)];\n\nexport const and = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslAnd(), 'bool'), inputs)];\n\nexport const div = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslDiv()), inputs)];\n\nexport const equal = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslEqual(), 'bool'), inputs)];\n\nexport const greater = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslGreater(), 'bool'), inputs)];\n\nexport const less = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslLess(), 'bool'), inputs)];\n\nexport const mul = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslMul()), inputs)];\n\nexport const or = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslOr(), 'bool'), inputs)];\n\nexport const pow = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslPow()), inputs)];\n\nexport const pRelu = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslPRelu()), inputs)];\n\nexport const sub = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslSub()), inputs)];\n\nexport const xor = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslXor(), 'bool'), inputs)];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ProtoUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const cast: OperatorImplementation<Tensor.DataType> =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], to: Tensor.DataType): Tensor[] => {\n      validateInputs(inputs);\n      return [handler.cast(inputs[0], to)];\n    };\n\nexport const parseCastAttributes: OperatorInitialization<Tensor.DataType> = (node: Graph.Node): Tensor.DataType =>\n    ProtoUtil.tensorDataTypeFromProto(node.attributes.getInt('to'));\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Cast requires 1 input.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('Invalid input type.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\nimport {getCoordsDataType, getGlChannels} from '../utils';\n\nimport {ConcatAttributes} from './concat';\nimport {getChannels, unpackFromChannel} from './packing-utils';\n\nconst createPackedConcatProgramMetadata = (inputCount: number, cacheHint: string) => ({\n  name: 'Concat (packed)',\n  inputNames: Array.from({length: inputCount}, (v, i) => `X${i}`),\n  inputTypes: Array(inputCount).fill(TextureType.packed),\n  cacheHint\n});\n\nconst createPackedConcatProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      if (axis >= inputShape.length || axis < (-1 * inputShape.length)) {\n        throw new Error('axis specified for concat doesn\\'t match input dimensionality');\n      }\n      if (axis < 0) {\n        axis = inputShape.length + axis;\n      }\n      // ensure all of the non-concatenated axes match each other\n      // calculate the shape of the output tensor while we do that\n      const outputShape = inputShape.slice(0);\n      for (let i = 1; i < inputs.length; i++) {\n        const dataNShape = inputs[i].dims.slice();\n        for (let axisIndex = 0; axisIndex < inputShape.length; axisIndex++) {\n          // add to the placeholder for computing output shape\n          if (axisIndex === axis) {\n            outputShape[axis] += dataNShape[axisIndex];\n          }\n          // ensure all non-cancatenated axes match each other\n          else if (inputShape[axisIndex] !== dataNShape[axisIndex]) {\n            throw new Error('non concat dimensions must match');\n          }\n        }\n      }\n\n      const rank = outputShape.length;\n      const coords = getChannels('coords', rank);\n      const dtype = getCoordsDataType(rank);\n      const unpackChannel = unpackFromChannel();\n\n      const shapes = inputs.map(i => i.dims);\n      const channels = getGlChannels(rank);\n      const offsets: number[] = new Array(shapes.length - 1);\n\n      offsets[0] = shapes[0][axis];\n      for (let i = 1; i < offsets.length; i++) {\n        offsets[i] = offsets[i - 1] + shapes[i][axis];\n      }\n\n      const channel = channels[axis];\n      const lastChannels = channels.slice(-2);\n      const allChannels = channels.join();\n\n      let getValueSnippet = `if (${channel} < ${offsets[0]}) {\n        return getChannel(\n            getX0(${allChannels}), vec2(${lastChannels.join()}));\n        }`;\n      for (let i = 1; i < offsets.length; i++) {\n        const shift = offsets[i - 1];\n        getValueSnippet += `\n            if (${channel} < ${offsets[i]}  && ${channel} >= ${offsets[i - 1]}) {\n              return getChannel(\n                getX${i}(${getShiftedChannelsSnippet(channels, channel, shift)}),\n                vec2(${getShiftedChannelsSnippet(lastChannels, channel, shift)}));\n            }`;\n      }\n      const lastIndex = offsets.length;\n      const shift = offsets[offsets.length - 1];\n      getValueSnippet += `\n            return getChannel(\n              getX${lastIndex}(${getShiftedChannelsSnippet(channels, channel, shift)}),\n              vec2(${getShiftedChannelsSnippet(lastChannels, channel, shift)}));`;\n\n      const glsl = getGlsl(handler.session.backend.glContext.version);\n\n      const shaderSource = `\n          ${unpackChannel}\n          float getValue(${channels.map(x => 'int ' + x)}) {\n            ${getValueSnippet}\n          }\n\n          void main() {\n            ${dtype} coords = getOutputCoords();\n            int lastDim = coords.${channels[rank - 1]};\n            coords.${channels[rank - 1]} = coords.${channels[rank - 2]};\n            coords.${channels[rank - 2]} = lastDim;\n\n            vec4 result = vec4(getValue(${coords}), 0., 0., 0.);\n\n            ${coords[rank - 1]} = ${coords[rank - 1]} + 1;\n            if (${coords[rank - 1]} < ${outputShape[rank - 1]}) {\n              result.g = getValue(${coords});\n            }\n\n            ${coords[rank - 2]} = ${coords[rank - 2]} + 1;\n            if (${coords[rank - 2]} < ${outputShape[rank - 2]}) {\n              result.a = getValue(${coords});\n            }\n\n            ${coords[rank - 1]} = ${coords[rank - 1]} - 1;\n            if (${coords[rank - 2]} < ${outputShape[rank - 2]} &&\n                ${coords[rank - 1]} < ${outputShape[rank - 1]}) {\n              result.b = getValue(${coords});\n            }\n            ${glsl.output} = result;\n          }\n        `;\n\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n        shaderSource,\n        hasMain: true,\n      };\n    };\n\nexport const createPackedConcatProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): ProgramInfoLoader => {\n      const metadata = createPackedConcatProgramMetadata(inputs.length, attributes.cacheKey);\n      return {...metadata, get: () => createPackedConcatProgramInfo(handler, metadata, inputs, attributes.axis)};\n    };\n\nconst getShiftedChannelsSnippet = (channels: string[], channel: string, shift: number): string => {\n  const channelIdx = channels.indexOf(channel);\n  const res = channels.map((c, idx) => {\n    if (idx === channelIdx) {\n      return `${c} - ${shift}`;\n    } else {\n      return c;\n    }\n  });\n  return res.join();\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {createPackedConcatProgramInfoLoader} from './concat-packed';\n\nexport interface ConcatAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n}\n\nexport const concat: OperatorImplementation<ConcatAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): Tensor[] => {\n      validateInputs(inputs);\n      if (inferenceHandler.session.pack && inputs[0].dims.length > 1) {\n        const output =\n            inferenceHandler.run(createPackedConcatProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n        return [output];\n      } else {\n        const output =\n            inferenceHandler.run(createUnpackedConcatProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n        return [output];\n      }\n    };\n\nconst createUnpackedConcatProgramMetadata = (inputCount: number, cacheHint: string) => ({\n  name: 'Concat',\n  inputNames: Array.from({length: inputCount}, (v, i) => `X${i}`),\n  inputTypes: Array(inputCount).fill(TextureType.unpacked),\n  cacheHint\n});\n\nconst createUnpackedConcatProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      if (axis >= inputShape.length || axis < (-1 * inputShape.length)) {\n        throw new Error('axis specified for concat doesn\\'t match input dimensionality');\n      }\n      if (axis < 0) {\n        axis = inputShape.length + axis;\n      }\n      // ensure all of the non-concatenated axes match each other\n      // calculate the shape of the output tensor while we do that\n      const outputShape = inputShape.slice(0);\n      for (let i = 1; i < inputs.length; i++) {\n        const dataNShape = inputs[i].dims.slice();\n        for (let axisIndex = 0; axisIndex < inputShape.length; axisIndex++) {\n          // add to the placeholder for computing output shape\n          if (axisIndex === axis) {\n            outputShape[axis] += dataNShape[axisIndex];\n          }\n          // ensure all non-cancatenated axes match each other\n          else if (inputShape[axisIndex] !== dataNShape[axisIndex]) {\n            throw new Error('non concat dimensions must match');\n          }\n        }\n      }\n\n      const rank = outputShape.length;\n\n      const sizeInConcatAxis = new Array<number>(inputs.length);\n      let previousSum = 0;\n      for (let i = 0; i < sizeInConcatAxis.length; ++i) {\n        previousSum += inputs[i].dims[axis];\n        sizeInConcatAxis[i] = previousSum;\n      }\n\n      let getTextureIndexWhereDataResidesMethod = '';\n      // in most cases linear search is sufficient, as in most scenarios, only 2 tensors are concatenated\n      if (inputs.length < 5) {\n        getTextureIndexWhereDataResidesMethod = getTextureIndexWhereDataResidesLinearSearch(sizeInConcatAxis);\n      } else {\n        getTextureIndexWhereDataResidesMethod = getTextureIndexWhereDataResidesBinarySearch(sizeInConcatAxis);\n      }\n\n      const fetchDataFromCorrectTextureMethod = getFetchDataFromCorrectTextureMethod(inputs.length, rank);\n      const getSizeInConcatAxisValueFromIndexMethod = getGetSizeInConcatAxisValueFromIndexMethod(sizeInConcatAxis);\n      const shaderSource = `\n        ${fetchDataFromCorrectTextureMethod}\n        ${getSizeInConcatAxisValueFromIndexMethod}\n        ${getTextureIndexWhereDataResidesMethod}\n        float process(int indices[${rank}]) {\n          int textureIndex = getTextureWhereDataResides (indices[${axis}]);\n\n          if(textureIndex != 0) {\n            indices[${axis}] = indices[${axis}] - int(getSizeInConcatAxisValueFromIndex(textureIndex-int(1)));\n          }\n\n          return fetchDataFromCorrectTexture(textureIndex, indices);\n        }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n      };\n    };\n\nconst createUnpackedConcatProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): ProgramInfoLoader => {\n      const metadata = createUnpackedConcatProgramMetadata(inputs.length, attributes.cacheKey);\n      return {...metadata, get: () => createUnpackedConcatProgramInfo(handler, metadata, inputs, attributes.axis)};\n    };\n\nconst getTextureIndexWhereDataResidesLinearSearch = (sizeInConcatAxis: number[]): string => {\n  const searchAxis = sizeInConcatAxis.map((size, i) => `if(index<${size}) {return ${i};}\n`);\n  return `int getTextureWhereDataResides(int index) {\n      ${searchAxis.join('')}\n    }`;\n};\n\n// TODO: Implement BinarySearch in GLSL\nconst getTextureIndexWhereDataResidesBinarySearch = (sizeInConcatAxis: number[]): string =>\n    getTextureIndexWhereDataResidesLinearSearch(sizeInConcatAxis);\n\nconst getFetchDataFromCorrectTextureMethod = (numberOfTensors: number, tensorRank: number) => {\n  const codeLines: string[] = [`float fetchDataFromCorrectTexture(int textureIndex, int indices[${tensorRank}]) {`];\n  for (let i = 0; i < numberOfTensors; ++i) {\n    if (i === 0) {\n      codeLines.push(\n          '\\t' +\n          `if (textureIndex == ${i}) { return _X${i}(indices); }`);\n    } else if (i === numberOfTensors - 1) {\n      codeLines.push(\n          '\\t' +\n          `else { return _X${i}(indices); }`);\n    } else {\n      codeLines.push(\n          '\\t' +\n          `else if (textureIndex == ${i}) { return _X${i}(indices); }`);\n    }\n  }\n  codeLines.push(\n      '\\t' +\n      '}');\n  return codeLines.join('\\n');\n};\n\nconst getGetSizeInConcatAxisValueFromIndexMethod = (sizeInConcatAxis: number[]): string => {\n  const codeLines: string[] = ['int getSizeInConcatAxisValueFromIndex(int index) {'];\n  for (let i = 0; i < sizeInConcatAxis.length; ++i) {\n    if (i === 0) {\n      codeLines.push(\n          '\\t' +\n          `if (index == ${i}) { return ${sizeInConcatAxis[i]}; }`);\n    } else if (i === sizeInConcatAxis.length - 1) {\n      codeLines.push(\n          '\\t' +\n          `else { return ${sizeInConcatAxis[i]}; }`);\n    } else {\n      codeLines.push(\n          '\\t' +\n          `else if (index == ${i}) { return ${sizeInConcatAxis[i]}; }`);\n    }\n  }\n  codeLines.push(\n      '\\t' +\n      '}');\n\n  return codeLines.join('\\n');\n};\n\nexport const parseConcatAttributes: OperatorInitialization<ConcatAttributes> = (node: Graph.Node): ConcatAttributes =>\n    createAttributeWithCacheKey({axis: node.attributes.getInt('axis')});\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length < 1) {\n    throw new Error('too few inputs');\n  }\n\n  const inputType = inputs[0].type;\n  const inputDimensionality = inputs[0].dims.length;\n\n  // TODO: Support string concat\n  if (inputType === 'string') {\n    throw new Error('string tensor is not supported yet');\n  }\n\n  for (const input of inputs) {\n    // make sure types of all inputs match\n    if (input.type !== inputType) {\n      throw new Error('input tensors should be one type');\n    }\n\n    // make sure the dimensionality of all inputs are the same\n    if (input.dims.length !== inputDimensionality) {\n      throw new Error('input tensors should have the same shape');\n    }\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../../instrument';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {calculateOutputShape, ConvAttributes} from './conv';\nimport {getActivationSnippet} from './fuse-utils';\n\nconst createUnpackedGroupedConvProgramMetadata = (hasBias: boolean, cacheHint: string): ProgramMetadata => ({\n  name: 'GroupedConv',\n  inputNames: hasBias ? ['X', 'W', 'Bias'] : ['X', 'W'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.unpacked],\n  cacheHint\n});\n\nconst createUnpackedGroupedConvProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], metadata: ProgramMetadata,\n     attributes: ConvAttributes): ProgramInfo => {\n      const hasBias = inputs.length > 2;\n      const processBias = hasBias ? 'value += getBias(output_channel);' : '';\n      const xShape = inputs[0].dims.slice();\n      const wShape = inputs[1].dims.slice();\n      const outputChannelsPerGroup = wShape[0] / attributes.group;\n      Logger.verbose(\n          'GroupedConv',\n          `autpPad:${attributes.autoPad}, dilations:${attributes.dilations}, group:${attributes.group}, kernelShape:${\n              attributes.kernelShape}, pads:${attributes.pads}, strides:${attributes.strides}`);\n      const outputShape =\n          calculateOutputShape(xShape, wShape, attributes.dilations, attributes.pads, attributes.strides);\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const {activationFunction, applyActivation} = getActivationSnippet(attributes);\n\n      const shaderSource = `\n  const ivec2 strides = ivec2(${attributes.strides[0]}, ${attributes.strides[1]});\n  const ivec2 pads = ivec2(${attributes.pads[0]}, ${attributes.pads[1]});\n  ${activationFunction}\n  void main() {\n    ivec4 coords = getOutputCoords();\n    int batch = coords.x;\n    int output_channel = coords.y;\n    ivec2 xRCCorner = coords.zw * strides - pads;\n    int group_id = output_channel / ${outputChannelsPerGroup};\n\n    float value = 0.0;\n    for (int wInChannel = 0; wInChannel < ${wShape[1]}; wInChannel++) {\n      int input_channel = group_id * ${wShape[1]} + wInChannel;\n      for (int wHeight = 0; wHeight < ${wShape[2]}; wHeight++) {\n        int xHeight = xRCCorner.x + wHeight * ${attributes.dilations[0]};\n\n        if (xHeight < 0 || xHeight >= ${xShape[2]}) {\n          continue;\n        }\n\n        for (int wWidth = 0; wWidth < ${wShape[3]}; wWidth++) {\n          int xWidth = xRCCorner.y + wWidth * ${attributes.dilations[1]};\n          if (xWidth < 0 || xWidth >= ${xShape[3]}) {\n            continue;\n          }\n\n          float xVal = getX(batch, input_channel, xWidth, xHeight);\n          float wVal = getW(output_channel, wInChannel, wWidth, wHeight);\n          value += xVal*wVal;\n        }\n      }\n    }\n    ${processBias}\n    ${applyActivation}\n    ${glsl.output} = vec4(value, .0, .0, .0);\n  }\n`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n        hasMain: true,\n      };\n    };\n\nexport const createUnpackedGroupedConvProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes):\n        ProgramInfoLoader => {\n          const metadata = createUnpackedGroupedConvProgramMetadata(inputs.length > 2, attributes.cacheKey);\n          return {\n            ...metadata,\n            get: () => createUnpackedGroupedConvProgramInfo(inferenceHandler, inputs, metadata, attributes)\n          };\n        };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nimport {calculateOutputShape, ConvAttributes} from './conv';\nimport {createPackedIm2ColProgramInfoLoader} from './im2col-pack';\nimport {createPackedMatmulProgramInfoLoader} from './matmul-pack';\n\nexport const conv2DPackedPointwise =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n      const reshapedX = inferenceHandler.reshapePacked(inputs[0], [xshape[1], xshape[2] * xshape[3]]);\n      const reshapedK = inferenceHandler.reshapePacked(inputs[1], [kshape[0], kshape[1]]);\n\n      const matmulInputs = inputs.length > 2 ? [reshapedK, reshapedX, inputs[2]] : [reshapedK, reshapedX];\n      const matmulOutput = inferenceHandler.run(\n          createPackedMatmulProgramInfoLoader(inferenceHandler, matmulInputs, attributes), matmulInputs);\n      return inferenceHandler.reshapePacked(matmulOutput, outputShape);\n    };\n\nexport const conv2DPacked =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n\n      // run im2col\n      const im2colOutput = inferenceHandler.run(\n          createPackedIm2ColProgramInfoLoader(inferenceHandler, inputs[0], inputs[1], outputShape, attributes),\n          [inputs[0]]);\n\n      // reshape kernel\n      const kernelReshaped = inferenceHandler.reshapePacked(inputs[1], [kshape[0], kshape[1] * kshape[2] * kshape[3]]);\n\n      // run matmul\n      const matmulInputs =\n          (inputs.length === 3) ? [kernelReshaped, im2colOutput, inputs[2]] : [kernelReshaped, im2colOutput];\n      const matmulOutput = inferenceHandler.run(\n          createPackedMatmulProgramInfoLoader(inferenceHandler, matmulInputs, attributes), matmulInputs);\n\n      // reshape output\n      const outputReshaped = inferenceHandler.reshapePacked(matmulOutput, outputShape);\n      return outputReshaped;\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {InferenceHandler} from '../../../backend';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {ConvAttributes} from './conv';\nimport {getActivationSnippet, parseInternalActivationAttributes} from './fuse-utils';\n\nconst computeTotalPad =\n    (inDim: number, stride: number, adj: number, kernel: number, dilation: number, outSize: number) =>\n        (inDim - 1) * stride + adj + (kernel - 1) * dilation + 1 - outSize;\n\nconst distributePadding = (totalPad: number, autoPad: string, pads: number[], head: number, tail: number) => {\n  const smallPad = Math.floor(totalPad / 2);\n  if (autoPad === 'SAME_UPPER') {\n    pads[head] = smallPad;\n    pads[tail] = totalPad - smallPad;\n  } else if (autoPad === 'SAME_LOWER') {\n    pads[head] = totalPad - smallPad;\n    pads[tail] = smallPad;\n  }\n};\n\nconst calculateOutputShapeAndPads =\n    (inputShape: readonly number[], kernelShape: readonly number[], dilations: readonly number[], autoPad: string,\n     pads: number[], strides: readonly number[], outputPadding: readonly number[], outputShape: number[]) => {\n      const spatialRank = inputShape.length - 2;\n      const updateShape = outputShape.length === 0;\n      for (let i = 0; i < spatialRank; ++i) {\n        const outSize = updateShape ? inputShape[i + 2] * strides[i] : outputShape[i];\n        const totalPad = computeTotalPad(inputShape[i + 2], strides[i], pads[i], kernelShape[i], dilations[i], outSize);\n        distributePadding(totalPad, autoPad, pads, i, i + spatialRank);\n        if (updateShape) {\n          outputShape.push(\n              strides[i] * (inputShape[i + 2] - 1) + outputPadding[i] + (kernelShape[i] - 1) * dilations[i] + 1 -\n              pads[i] - pads[i + spatialRank]);\n        }\n      }\n    };\n\nexport interface ConvTransposeAttributes extends ConvAttributes {\n  readonly outputPadding: readonly number[];\n  readonly outputShape: readonly number[];\n}\n\nexport const convTranspose: OperatorImplementation<ConvTransposeAttributes> =\n    (inferenceHandler: InferenceHandler, inputs: Tensor[], attributes: ConvTransposeAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);  // currently will fail if not convTranspose2D\n      return convTranspose2d(inferenceHandler, inputs, attributes);\n    };\n\nconst convTranspose2d: OperatorImplementation<ConvTransposeAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConvTransposeAttributes): Tensor[] => {\n      const adjustedAttributes = getAdjustedConvTransposeAttributes(attributes, inputs);\n      return [convTranspose2DUnpacked(inferenceHandler, inputs, adjustedAttributes)];\n    };\n\nconst createConvTransposeProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\n  name: 'ConvTranspose',\n  inputNames: hasBias ? ['X', 'W', 'B'] : ['X', 'W'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.unpacked],\n  cacheHint\n});\n\nconst createUnpackedConvTransposeProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], metadata: ProgramMetadata,\n     attributes: ConvTransposeAttributes): ProgramInfo => {\n      const hasBias = inputs.length > 2;\n      const valueInit = hasBias ? 'getB(output_channel)' : '0.0';\n      const xShape = inputs[0].dims;\n      const wShape = inputs[1].dims;\n      const outputChannelsPerGroup = wShape[1];\n      const inputChannelsPerGroup = wShape[0] / attributes.group;\n      const outputShape = [inputs[0].dims[0], inputs[1].dims[1] * attributes.group, ...attributes.outputShape];\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const {activationFunction, applyActivation} = getActivationSnippet(attributes);\n\n      const shaderSource = `\n  const ivec2 strides = ivec2(${attributes.strides[0]}, ${attributes.strides[1]});\n  const ivec2 pads = ivec2(${attributes.pads[0]}, ${attributes.pads[1]});\n  ${activationFunction}\n  void main() {\n    ivec4 coords = getOutputCoords();\n    int batch = coords.x;\n    int output_channel = coords.y;\n\n    ivec2 loc = coords.zw + pads;\n\n    int group_id = output_channel / ${outputChannelsPerGroup};\n    int wOutChannel = output_channel - group_id * ${outputChannelsPerGroup};\n\n    float value = ${valueInit};\n    for (int inChannelOffset = 0; inChannelOffset < ${inputChannelsPerGroup}; inChannelOffset++) {\n      int input_channel = group_id * ${inputChannelsPerGroup} + inChannelOffset;\n      for (int wWOff = 0; wWOff < ${wShape[2]}; wWOff++) {\n        for (int wHOff = 0; wHOff < ${wShape[3]}; wHOff++) {\n          ivec2 wOff = ivec2(wWOff * ${attributes.dilations[0]}, wHOff * ${attributes.dilations[1]});\n          ivec2 wLoc = loc - wOff;\n          ivec2 wLocIn = wLoc / strides;\n          if (\n            wLocIn * strides == wLoc &&\n            wLocIn.x >= 0 && wLocIn.x < ${xShape[2]} &&\n            wLocIn.y >= 0 && wLocIn.y < ${xShape[3]}\n          ) {\n            float xVal = getX(batch, input_channel, wLocIn.y, wLocIn.x);\n            float wVal = getW(input_channel, wOutChannel, wHOff, wWOff);\n            value += xVal * wVal;\n          }\n        }\n      }\n    }\n    ${applyActivation}\n    ${glsl.output} = vec4(value, .0, .0, .0);\n  }\n`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n        hasMain: true,\n      };\n    };\n\nconst createUnpackedConvTransposeProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvTransposeAttributes):\n        ProgramInfoLoader => {\n          const metadata = createConvTransposeProgramMetadata(inputs.length > 2, attributes.cacheKey);\n          return {\n            ...metadata,\n            get: () => createUnpackedConvTransposeProgramInfo(inferenceHandler, inputs, metadata, attributes)\n          };\n        };\n\n\nconst convTranspose2DUnpacked =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvTransposeAttributes):\n        Tensor => {\n          const result = inferenceHandler.run(\n              createUnpackedConvTransposeProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n          return result;\n        };\n\nconst getAdjustedConvTransposeAttributes = <T extends ConvTransposeAttributes>(attributes: T, inputs: Tensor[]): T => {\n  const kernelShape = attributes.kernelShape.slice();\n  // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\n  if (attributes.kernelShape.length === 0) {\n    for (let i = 2; i < inputs[1].dims.length; ++i) {\n      kernelShape.push(inputs[1].dims[i]);\n    }\n  }\n\n  const pads = attributes.pads.slice();\n  const outputShape = attributes.outputShape.slice();\n  const inputShape = inputs[0].dims;\n  // If outputShape is not specified in the attributes of this op, infer it from the parameters\n  // Similarly, automatically infer pads if not specified\n  calculateOutputShapeAndPads(\n      inputShape, kernelShape, attributes.dilations, attributes.autoPad, pads, attributes.strides,\n      attributes.outputPadding, outputShape);\n\n  // always return a new object so does not modify the original attributes\n  const newAttributes: T = Object.assign({}, attributes);\n  Object.assign(newAttributes, {kernelShape, pads, outputShape, cacheKey: attributes.cacheKey});\n  return newAttributes;\n};\n\nexport const parseConvTransposeAttributes: OperatorInitialization<ConvTransposeAttributes> =\n    (node: Graph.Node): ConvTransposeAttributes => {\n      const attributes = node.attributes;\n      const activationAttributes = parseInternalActivationAttributes(attributes);\n      // TODO : Make this generic enough to compute default attributes for multi-dimensional conv\n      const autoPad = attributes.getString('auto_pad', 'NOTSET');\n      const dilations = attributes.getInts('dilations', [1, 1]);\n      const group = attributes.getInt('group', 1);\n      const kernelShape = attributes.getInts('kernel_shape', []);\n      const outputPadding = attributes.getInts('output_padding', [0, 0]);\n      const outputShape = attributes.getInts('output_shape', []);\n      const pads = attributes.getInts('pads', [0, 0, 0, 0]);\n      const strides = attributes.getInts('strides', [1, 1]);\n\n      return createAttributeWithCacheKey(\n          {autoPad, dilations, group, kernelShape, outputPadding, outputShape, pads, strides, ...activationAttributes});\n    };\n\nconst validateInputs = (inputs: Tensor[], attributes: ConvTransposeAttributes): void => {\n  // Refer to the below link for all input checks\n  // https://github.com/onnx/onnx/blob/main/docs/Operators.md#Conv\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Conv requires 2 or 3 inputs');\n  }\n\n  // TODO : Need to add support for multi-dimensional conv\n  if (inputs[0].dims.length !== 4 || inputs[1].dims.length !== 4) {\n    throw new Error('currently only support 2-dimensional conv');\n  }\n\n  // FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\n  const dataChannel = inputs[0].dims[1];\n  const filterInChannel = inputs[1].dims[0];\n  if (dataChannel !== filterInChannel) {\n    throw new Error('FILTER_IN_CHANNEL should be equal to DATA_CHANNEL');\n  }\n\n  const featureMaps = inputs[1].dims[1] * attributes.group;\n\n  // if bias is provided it should be 1D and the number of elements should be equal to the number of feature maps\n  if (inputs.length === 3 && (inputs[2].dims.length !== 1 || inputs[2].dims[0] !== featureMaps)) {\n    throw new Error('invalid bias');\n  }\n\n  const spatialRank = inputs[0].dims.length - 2;\n  // wrong dilations dimension\n  if (attributes.dilations.length !== spatialRank) {\n    throw new Error(`dilations should be ${spatialRank}D`);\n  }\n\n  // Wrong strides dimension\n  if (attributes.strides.length !== spatialRank) {\n    throw new Error(`strides should be ${spatialRank}D`);\n  }\n\n  // Wrong pads dimension\n  if (attributes.pads.length !== spatialRank * 2) {\n    throw new Error(`pads should be ${spatialRank * 2}D`);\n  }\n\n  // Wrong output padding dimension\n  if (attributes.outputPadding.length !== spatialRank) {\n    throw new Error(`output_padding should be ${spatialRank}D`);\n  }\n\n  // if kernelShape is specified, it's data length must be 2 less than dims length of the weights tensor\n  // (the first 2 dims are batch_size and channels)\n  if (attributes.kernelShape.length !== 0 && attributes.kernelShape.length !== inputs[1].dims.length - 2) {\n    throw new Error('invalid kernel shape');\n  }\n\n  // as with kernelShape, must have same number of spatial dims as input\n  if (attributes.outputShape.length !== 0 && attributes.outputShape.length !== inputs[0].dims.length - 2) {\n    throw new Error('invalid output shape');\n  }\n\n  // TODO : Need to add support for float64\n  if (inputs[0].type !== 'float32' || inputs[1].type !== 'float32') {\n    throw new Error('ConvTranspose input(X,W) should be float tensor');\n  }\n\n  if (inputs.length === 3 && inputs[2].type !== 'float32') {\n    throw new Error('ConvTranspose input(bias) should be float tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {InferenceHandler} from '../../../backend';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {PoolConvUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nimport {createUnpackedGroupedConvProgramInfoLoader} from './conv-grouped';\nimport {conv2DPacked} from './conv-pack';\nimport {createDotProductProgramInfoLoader} from './dot-product';\nimport {InternalActivationAttributes, parseInternalActivationAttributes} from './fuse-utils';\nimport {createIm2ColProgramInfoLoader} from './im2col';\nimport {createMatmulProgramInfoLoader} from './matmul';\n\n\nexport const calculateOutputShape =\n    (inputShape: readonly number[], kernelShape: readonly number[], dilations: readonly number[],\n     adjustPads: readonly number[], strides: readonly number[]): number[] => {\n      const batchSize = inputShape[0];\n      const inputSpatialShape = inputShape.slice(2);\n      const spatialRank = inputSpatialShape.length;\n      const outChannels = kernelShape[0];\n      const kernelSpatialShape = kernelShape.slice(2);\n      const dilatedKernelShape = kernelSpatialShape.map((v, i) => v + (v - 1) * (dilations[i] - 1));\n      const inputSpatialShapeWithPad = inputSpatialShape.map((v, i) => v + adjustPads[i] + adjustPads[i + spatialRank]);\n      const outputSpatialShape =\n          inputSpatialShapeWithPad.map((v, i) => Math.floor((v - dilatedKernelShape[i] + strides[i]) / strides[i]));\n      const outputShape = [batchSize, outChannels].concat(...outputSpatialShape);\n      return outputShape;\n    };\n\nexport interface ConvAttributes extends InternalActivationAttributes, AttributeWithCacheKey {\n  readonly autoPad: string;\n  readonly dilations: readonly number[];\n  readonly group: number;\n  readonly kernelShape: readonly number[];\n  readonly pads: readonly number[];\n  readonly strides: readonly number[];\n}\n\nexport const conv: OperatorImplementation<ConvAttributes> =\n    (inferenceHandler: InferenceHandler, inputs: Tensor[], attributes: ConvAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);  // currently will fail if not conv2D\n      return conv2d(inferenceHandler, inputs, attributes);\n    };\n\nconst conv2d: OperatorImplementation<ConvAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConvAttributes): Tensor[] => {\n      const adjustedAttributes = getAdjustedConvAttributes(attributes, inputs);\n      const packMode = inferenceHandler.session.pack;\n      const isPointwise = adjustedAttributes.kernelShape[0] === 1 && adjustedAttributes.kernelShape[1] === 1;\n      if (adjustedAttributes.group > 1) {\n        const result = inferenceHandler.run(\n            createUnpackedGroupedConvProgramInfoLoader(inferenceHandler, inputs, adjustedAttributes), inputs);\n        return [result];\n      } else if (isPointwise && packMode) {\n        return [conv2DUnpackedPointwise(inferenceHandler, inputs, adjustedAttributes)];\n      } else if (packMode && inputs[0].dims.length === 4 && inputs[0].dims[0] === 1 && !isPointwise) {\n        return [conv2DPacked(inferenceHandler, inputs, adjustedAttributes)];\n      } else {\n        return [conv2DUnpacked(inferenceHandler, inputs, adjustedAttributes)];\n      }\n    };\n\nconst conv2DUnpackedPointwise =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n      const reshapedX = inferenceHandler.reshapeUnpacked(inputs[0], [xshape[1], xshape[2] * xshape[3]]);\n      const reshapedK = inferenceHandler.reshapeUnpacked(inputs[1], [kshape[0], kshape[1]]);\n\n      const matmulInputs = inputs.length > 2 ? [reshapedK, reshapedX, inputs[2]] : [reshapedK, reshapedX];\n      const matmulOutput = inferenceHandler.run(createMatmulProgramInfoLoader(matmulInputs, attributes), matmulInputs);\n      return inferenceHandler.reshapeUnpacked(matmulOutput, outputShape);\n    };\n\nconst conv2DUnpacked =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n      const xIm2Col = inferenceHandler.run(\n          createIm2ColProgramInfoLoader(inferenceHandler, inputs[0], inputs[1], outputShape, attributes), [inputs[0]]);\n\n      const dotProductInputs = inputs.length === 3 ? [xIm2Col, inputs[1], inputs[2]] : [xIm2Col, inputs[1]];\n      const output = inferenceHandler.run(\n          createDotProductProgramInfoLoader(inferenceHandler, inputs, outputShape, attributes), dotProductInputs);\n      return output;\n    };\n\nconst getAdjustedConvAttributes = <T extends ConvAttributes>(attributes: T, inputs: Tensor[]): T => {\n  const kernelShape = attributes.kernelShape.slice();\n  // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\n  if (attributes.kernelShape.length === 0) {\n    for (let i = 2; i < inputs[1].dims.length; ++i) {\n      kernelShape.push(inputs[1].dims[i]);\n    }\n  }\n  const pads = attributes.pads.slice();\n  PoolConvUtil.adjustPadsBasedOnAutoPad(\n      inputs[0].dims, attributes.strides, attributes.dilations, kernelShape, pads, attributes.autoPad);\n\n  // always return a new object so does not modify the original attributes\n  const newAttributes: T = Object.assign({}, attributes);\n  Object.assign(newAttributes, {kernelShape, pads, cacheKey: attributes.cacheKey});\n  return newAttributes;\n};\n\nexport const parseConvAttributes: OperatorInitialization<ConvAttributes> = (node: Graph.Node): ConvAttributes => {\n  const attributes = node.attributes;\n  const activationAttributes = parseInternalActivationAttributes(attributes);\n  // TODO : Make this generic enough to compute default attributes for multi-dimensional conv\n  const autoPad = attributes.getString('auto_pad', 'NOTSET');\n  const dilations = attributes.getInts('dilations', [1, 1]);\n  const group = attributes.getInt('group', 1);\n  const kernelShape = attributes.getInts('kernel_shape', []);\n  const pads = attributes.getInts('pads', [0, 0, 0, 0]);\n  const strides = attributes.getInts('strides', [1, 1]);\n\n  return createAttributeWithCacheKey({autoPad, dilations, group, kernelShape, pads, strides, ...activationAttributes});\n};\n\nconst validateInputs = (inputs: Tensor[], attributes: ConvAttributes): void => {\n  // Refer to the below link for all input checks\n  // https://github.com/onnx/onnx/blob/main/docs/Operators.md#Conv\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Conv requires 2 or 3 inputs');\n  }\n\n  // TODO : Need to add support for multi-dimensional conv\n  if (inputs[0].dims.length !== 4 || inputs[1].dims.length !== 4) {\n    throw new Error('currently only support 2-dimensional conv');\n  }\n\n  // FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\n  const dataChannel = inputs[0].dims[1];\n  const filterInChannel = inputs[1].dims[1] * attributes.group;\n  if (dataChannel !== filterInChannel) {\n    throw new Error('FILTER_IN_CHANNEL should be equal to DATA_CHANNEL');\n  }\n\n  // if bias is provided it should be 1D and the number of elements should be equal to the number of feature maps\n  if (inputs.length === 3 && (inputs[2].dims.length !== 1 || inputs[1].dims[0] !== inputs[2].dims[0])) {\n    throw new Error('invalid bias');\n  }\n\n  const spatialRank = inputs[0].dims.length - 2;\n  // wrong dilations dimension\n  if (attributes.dilations.length !== spatialRank) {\n    throw new Error(`dilations should be ${spatialRank}D`);\n  }\n\n  // Wrong strides dimension\n  if (attributes.strides.length !== spatialRank) {\n    throw new Error(`strides should be ${spatialRank}D`);\n  }\n\n  // Wrong pads dimension\n  if (attributes.pads.length !== spatialRank * 2) {\n    throw new Error(`pads should be ${spatialRank * 2}D`);\n  }\n\n  // if kernelShape is specified, it's data length must be 2 less than dims length of the weights tensor\n  // (the first 2 dims are batch_size and channels)\n  if (attributes.kernelShape.length !== 0 && attributes.kernelShape.length !== inputs[1].dims.length - 2) {\n    throw new Error('invalid kernel shape');\n  }\n\n  // TODO : Need to add support for float64\n  if (inputs[0].type !== 'float32' || inputs[1].type !== 'float32') {\n    throw new Error('Conv input(X,W) should be float tensor');\n  }\n\n  if (inputs.length === 3 && inputs[2].type !== 'float32') {\n    throw new Error('Conv input(bias) should be float tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nimport {transpose, TransposeAttributes} from './transpose';\n\nexport interface DepthToSpaceAttributes {\n  mode: 'DCR'|'CRD';\n  blocksize: number;\n}\n\nexport const depthToSpace: OperatorImplementation<DepthToSpaceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: DepthToSpaceAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const blocksize = attributes.blocksize;\n      const blocksizeSqr = blocksize * blocksize;\n      const transposePerm = attributes.mode === 'DCR' ? [0, 3, 4, 1, 5, 2] : [0, 1, 4, 2, 5, 3];\n      const firstReshapeShape = attributes.mode === 'DCR' ?\n          [\n            inputs[0].dims[0], blocksize, blocksize, inputs[0].dims[1] / blocksizeSqr, inputs[0].dims[2],\n            inputs[0].dims[3]\n          ] :\n          [\n            inputs[0].dims[0], inputs[0].dims[1] / blocksizeSqr, blocksize, blocksize, inputs[0].dims[2],\n            inputs[0].dims[3]\n          ];\n\n      // const transpose = new WebGLTranspose();\n      // const attributes = new Attribute(undefined);\n      // attributes.set('perm', 'ints', transposePerm);\n      // transpose.initialize(attributes);\n\n      // First reshape\n      const firstReshapedTensor = inferenceHandler.reshapeUnpacked(inputs[0], firstReshapeShape);\n\n      // transpose\n      const transposeAttributes: TransposeAttributes = {perm: transposePerm, cacheKey: `${transposePerm}`};\n      const [transposeOutput] = transpose(inferenceHandler, [firstReshapedTensor], transposeAttributes);\n\n      // Second reshape\n      const secondReshapeShape = [\n        inputs[0].dims[0], inputs[0].dims[1] / blocksizeSqr, inputs[0].dims[2] * blocksize,\n        inputs[0].dims[3] * blocksize\n      ];\n      const result = inferenceHandler.reshapeUnpacked(transposeOutput, secondReshapeShape);\n      return [result];\n    };\n\nexport const parseDepthToSpaceAttributes: OperatorInitialization<DepthToSpaceAttributes> =\n    (node: Graph.Node): DepthToSpaceAttributes => {\n      // processing node attributes\n      const blocksize = node.attributes.getInt('blocksize');\n      if (blocksize < 1) {\n        throw new Error(`blocksize must be >= 1, but got : ${blocksize} for DepthToSpace`);\n      }\n      const mode = node.attributes.getString('mode', 'DCR');\n      if (mode !== 'DCR' && mode !== 'CRD') {\n        throw new Error(`unrecognized mode: ${mode} for DepthToSpace`);\n      }\n      return {mode, blocksize};\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (inputs.length !== 1) {\n    throw new Error(`DepthToSpace expect 1 inputs, but got ${inputs.length}`);\n  }\n\n  // Input has to be a 4-D tensor\n  // TODO: Support string depth-to-space.\n  if (inputs[0].type === 'string' || inputs[0].dims.length !== 4) {\n    throw new TypeError('DepthToSpace input should be a 4-D numeric tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {getActivationSnippet, InternalActivationAttributes} from './fuse-utils';\nimport {calculateIm2ColDims} from './im2col';\n\nconst createDotProductProgramMetadata = (hasBias: boolean, attributes: InternalActivationAttributes) => ({\n  name: 'ConvDotProduct',\n  inputNames: hasBias ? ['Im2Col', 'K', 'B'] : ['Im2Col', 'K'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.packedLastDimension, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.packedLastDimension],\n  cacheKey: attributes.activationCacheKey\n});\n\nconst createDotProductProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: readonly Tensor[],\n     outputShape: number[], attributes: InternalActivationAttributes): ProgramInfo => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const adjustedKernelShape = [kshape[0], Math.ceil((xshape[1] * kshape[2] * kshape[3]) / 4)];\n      const im2colShape = calculateIm2ColDims(xshape, kshape, outputShape);\n      const [kWidth, kHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(adjustedKernelShape, TextureType.packedLastDimension);\n\n      const im2colStrides = ShapeUtil.computeStrides(im2colShape);\n      const [im2colWidth, im2colHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(im2colShape, TextureType.packedLastDimension);\n      const rank = outputShape.length;\n\n      const initValue = (inputs.length < 3) ? '0.0' : '_B(b)';\n      const sharedDim = Math.ceil(xshape[1] * kshape[2] * kshape[3] / 4);\n      const {activationFunction, applyActivation} = getActivationSnippet(attributes);\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const shaderSource = `\n${activationFunction}\nfloat process(int indices[${rank}]) {\n  int b[1];\n  b[0] = indices[1];\n  int im2col[4];\n  im2col[0] = indices[0];\n  im2col[1] = indices[2];\n  im2col[2] = indices[3];\n  int im2colOffset = im2col[0] * ${im2colStrides[0]} + im2col[1] * ${im2colStrides[1]} + im2col[2] * ${\n          im2colStrides[2]};\n  int kernelOffset = indices[1] * ${adjustedKernelShape[1]};\n  float value = ${initValue};\n  for (int i = 0; i < ${sharedDim}; ++i) {\n    vec2 im2colCoords = offsetToCoords(im2colOffset, ${im2colWidth}, ${im2colHeight});\n    vec2 kernelCoords = offsetToCoords(kernelOffset, ${kWidth}, ${kHeight});\n    value += dot(${glsl.texture2D}(Im2Col, im2colCoords), ${glsl.texture2D}(K, kernelCoords));\n    ++im2colOffset;\n    ++kernelOffset;\n  }\n  ${applyActivation}\n  return value;\n}`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nexport const createDotProductProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], outputShape: number[],\n     attributes: InternalActivationAttributes): ProgramInfoLoader => {\n      const metadata = createDotProductProgramMetadata(inputs.length > 2, attributes);\n      return {\n        ...metadata,\n        get: () => createDotProductProgramInfo(inferenceHandler, metadata, inputs, outputShape, attributes)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const flatten: OperatorImplementation<number> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axis: number): Tensor[] => {\n      validateInputs(inputs, axis);\n\n      const outputDims = ShapeUtil.flattenShape(inputs[0].dims, axis);\n      return [inferenceHandler.reshapeUnpacked(inputs[0], outputDims)];\n    };\n\nexport const parseFlattenAttributes: OperatorInitialization<number> = (node: Graph.Node): number =>\n    node.attributes.getInt('axis', 1);  // default axis is 1\n\nconst validateInputs = (inputs: Tensor[], axis: number): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Flatten requires 1 input.');\n  }\n\n  const r = inputs[0].dims.length;\n  if (r === 0) {\n    throw new Error('scalar tensor is not supported.');\n  }\n\n  if (axis < -r || axis > r) {\n    throw new Error('Invalid axis');\n  }\n\n  // TODO: Support string type\n  if (inputs[0].type === 'string') {\n    throw new Error('string tensor is not supported.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from '../../../attribute';\nimport {MAX_CLIP, MIN_CLIP} from '../../../util';\nimport {GlslValueFunction} from '../glsl-definitions';\n\nimport {glslClip, glslRelu, glslSigmoid} from './unary-op';\n\nexport interface InternalActivationAttributes {\n  readonly activation: string;\n  readonly clipMin?: number;\n  readonly clipMax?: number;\n  readonly activationCacheKey: string;\n}\n\nexport function getActivationSnippet(attributes: InternalActivationAttributes) {\n  let func: GlslValueFunction;\n  switch (attributes.activation) {\n    case 'Relu':\n      func = glslRelu();\n      break;\n    case 'Sigmoid':\n      func = glslSigmoid();\n      break;\n    case 'Clip':\n      func = glslClip(attributes.clipMin!, attributes.clipMax!);\n      break;\n    // TODO: adding other activations that can be fused.\n    default:\n      return {activationFunction: '', applyActivation: ''};\n  }\n\n  const activationName = func.name;\n  const activationFunction = func.body;\n  const applyActivation = `value = ${activationName}_(value);`;\n  return {activationFunction, applyActivation};\n}\n\nexport const parseInternalActivationAttributes = (attributes: Attribute): InternalActivationAttributes => {\n  const activation = attributes.getString('activation', '');\n\n  if (activation === 'Clip') {\n    const [clipMin, clipMax] = attributes.getFloats('activation_params', [MIN_CLIP, MAX_CLIP]);\n    return {activation, clipMax, clipMin, activationCacheKey: `${activation}:${clipMin},${clipMax}`};\n  }\n  return {activation, activationCacheKey: activation};\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\ninterface GatherAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n}\n\nexport const gather: OperatorImplementation<GatherAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: GatherAttributes): Tensor[] => {\n      validateInputs(inputs, attributes.axis);\n      const output = inferenceHandler.run(createGatherProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n      return [output];\n    };\n\nexport const parseGatherAttributes: OperatorInitialization<GatherAttributes> = (node: Graph.Node): GatherAttributes =>\n    createAttributeWithCacheKey({axis: node.attributes.getInt('axis', 0)});\n\nconst gatherProgramMetadata = {\n  name: 'Gather',\n  inputNames: ['A', 'B'],\n  inputTypes: [TextureType.unpacked, TextureType.unpacked],\n};\n\nconst createGatherProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      const indexDataShape = inputs[1].dims.slice();\n      const outputShape = new Array(inputShape.length + indexDataShape.length - 1);\n\n      axis = ShapeUtil.normalizeAxis(axis, inputShape.length);\n      const indexCopyOps: string[] = [];\n      for (let i = 0; i < outputShape.length; i++) {\n        // outputShape is divided into three parts: A, B, C\n        // |0        axis|  axis + indexDataShape.length |          end|\n        // |     A       |             B                 |      C      |\n        //\n        // inputIdx: [A, inputs[1][B], C]\n        if (i < axis) {  // A\n          outputShape[i] = inputShape[i];\n          indexCopyOps.push(`inputIdx[${i}] = outputIdx[${i}];`);\n        } else {\n          if (i < axis + indexDataShape.length) {  // B\n            outputShape[i] = indexDataShape[i - axis];\n            indexCopyOps.push(`indexDataIdx[${i - axis}] = outputIdx[${i}];`);\n          } else {                                                       // C\n            outputShape[i] = inputShape[i - indexDataShape.length + 1];  // skip 1 for axis\n            indexCopyOps.push(`inputIdx[${i - indexDataShape.length + 1}] = outputIdx[${i}];`);\n          }\n        }\n      }\n\n      const orank = outputShape.length || 1;\n      const irank = inputShape.length;\n      const iDrank = indexDataShape.length || 1;\n      const shaderSource = `\n      float process(int outputIdx[${orank}]) {\n        int inputIdx[${irank}];\n        int indexDataIdx[${iDrank}];\n        indexDataIdx[0] = 0;\n        ${indexCopyOps.join('\\n        ')}\n        int idx = int(_B(indexDataIdx));\n        inputIdx[${axis}] = idx < 0 ? idx + ${inputShape[axis]} : idx;\n        return _A(inputIdx);\n      }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst createGatherProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: GatherAttributes): ProgramInfoLoader => {\n      const metadata = {...gatherProgramMetadata, cacheHint: attributes.cacheKey};\n      return {...metadata, get: () => createGatherProgramInfo(handler, metadata, inputs, attributes.axis)};\n    };\n\nconst validateInputs = (inputs: Tensor[], axis: number): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Gather requires 2 inputs.');\n  }\n  const tensorRank = inputs[0].dims.length;\n  if (tensorRank < 1) {\n    throw new Error('Invalid input shape.');\n  }\n  if (axis < -tensorRank || axis > tensorRank - 1) {\n    throw new Error('Invalid axis.');\n  }\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invaid input type.');\n  }\n  if (inputs[1].type !== 'int32' && inputs[1].type !== 'int16') {\n    throw new Error('Invaid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {GemmUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport interface GemmAttributes extends AttributeWithCacheKey {\n  transA: boolean;\n  transB: boolean;\n  alpha: number;\n  beta: number;\n  isOptionalC: boolean;  // in opset 11, C becomes optional\n}\n\nexport const gemm: OperatorImplementation<GemmAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: GemmAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);\n      const output = inferenceHandler.run(createGemmProgramInfoLoader(inputs, attributes), inputs);\n      return [output];\n    };\n\nconst parseGemmAttributes = (node: Graph.Node, isOptionalC: boolean): GemmAttributes => {\n  const transA = node.attributes.getInt('transA', 0) !== 0;\n  const transB = node.attributes.getInt('transB', 0) !== 0;\n  const alpha = node.attributes.getFloat('alpha', 1.0);\n  const beta = node.attributes.getFloat('beta', 1.0);\n  return createAttributeWithCacheKey({transA, transB, alpha, beta, isOptionalC});\n};\n\nexport const parseGemmAttributesV7: OperatorInitialization<GemmAttributes> = (node: Graph.Node): GemmAttributes =>\n    parseGemmAttributes(node, false);\n\nexport const parseGemmAttributesV11: OperatorInitialization<GemmAttributes> = (node: Graph.Node): GemmAttributes =>\n    parseGemmAttributes(node, true);\n\nconst createGemmProgramInfoLoader = (inputs: Tensor[], attributes: GemmAttributes): ProgramInfoLoader => {\n  const metadata = {\n    name: 'Gemm',\n    inputNames: inputs.length === 3 ? ['A', 'B', 'C'] : ['A', 'B'],\n    inputTypes: inputs.length === 3 ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                                      [TextureType.unpacked, TextureType.unpacked],\n    key: attributes.cacheKey\n  };\n\n  return {...metadata, get: () => createGemmProgramInfo(metadata, inputs, attributes)};\n};\n\nconst createGemmProgramInfo =\n    (metadata: ProgramMetadata, inputs: Tensor[], attributes: GemmAttributes): ProgramInfo => {\n      const aShape = inputs[0].dims.slice();\n      const bShape = inputs[1].dims.slice();\n      const [M, N] = GemmUtil.getShapeOfGemmResult(\n          aShape, attributes.transA, bShape, attributes.transB, inputs.length === 3 ? inputs[2].dims : undefined);\n      const outputShape = [M, N];\n      if (!outputShape) {\n        throw new Error('Can\\'t use gemm on the given tensors');\n      }\n      let sharedDim = aShape[aShape.length - 1];\n      let line = '';\n      if (attributes.transA) {\n        sharedDim = aShape[0];\n      }\n      if (attributes.transA && attributes.transB) {\n        line = 'value += _A_T(a) * _B_T(b);';\n      } else if (attributes.transA && !attributes.transB) {\n        line = 'value += _A_T(a) * _B(b);';\n      } else if (!attributes.transA && attributes.transB) {\n        line = 'value += _A(a) * _B_T(b);';\n      } else if (!attributes.transA && !attributes.transB) {\n        line = 'value += _A(a) * _B(b);';\n      }\n      const rank = outputShape.length;\n      const declareC = inputs.length === 3 ? `int c[${inputs[2].dims.length}];` : '';\n      const broadcastC = inputs.length === 3 ? 'bcastIndices_C(indices, c);' : '';\n      const calculateC = inputs.length === 3 ? 'value += beta * _C(c);' : '';\n      const shaderSource = `\n      float process(int indices[${rank}]) {\n          int a[${rank}];\n          int b[${rank}];\n          ${declareC}\n\n          copyVec(indices, a);\n          copyVec(indices, b);\n          ${broadcastC}\n\n          float value = 0.0;\n          for (int k=0; k<${sharedDim}; ++k) {\n              a[${rank - 1}] = k;\n              b[${rank - 2}] = k;\n              ${line}\n          }\n\n          value = value * alpha;\n          ${calculateC}\n          return value;\n      }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        variables: [\n          {name: 'alpha', type: 'float', data: attributes.alpha}, {name: 'beta', type: 'float', data: attributes.beta}\n        ],\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[], attributes: GemmAttributes): void => {\n  if (!inputs) {\n    throw new Error('Input is missing');\n  }\n  if (attributes.isOptionalC && (inputs.length < 2 || inputs.length > 3)) {\n    throw new Error('Invaid input shape.');\n  }\n  if (!attributes.isOptionalC && inputs.length !== 3) {\n    throw new Error('Gemm requires 3 inputs');\n  }\n\n  // 'C' can be of dimensionality 1 or 2 only\n  if (inputs.length === 3 && inputs[2].dims.length !== 1 && inputs[2].dims.length !== 2) {\n    throw new Error('Invalid input shape of C');\n  }\n\n  if ((inputs[0].type !== 'float32' && inputs[0].type !== 'float64') ||\n      (inputs[1].type !== 'float32' && inputs[1].type !== 'float64') ||\n      (inputs.length === 3 && inputs[2].type !== 'float32' && inputs[2].type !== 'float64')) {\n    throw new Error('Invalid input type.');\n  }\n\n  if ((inputs[0].type !== inputs[1].type) || (inputs.length === 3 && inputs[0].type !== inputs[2].type)) {\n    throw new Error('Input types are mismatched');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {ConvAttributes} from './conv';\nimport {unpackFromChannel} from './packing-utils';\n\nconst createPackedIm2ColProgramMetadata = (cacheHint: string) => ({\n  name: 'Im2Col (packed)',\n  inputNames: ['A'],\n  inputTypes: [TextureType.packed],\n  cacheHint,\n});\n\nconst createPackedIm2ColProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, x: Tensor, w: Tensor,\n     outputShape: readonly number[], attributes: ConvAttributes): ProgramInfo => {\n      const xshape = x.dims;\n      const wshape = w.dims;\n      const rowDim = 2;\n      const colDim = 3;\n      const rank = outputShape.length;\n      const im2colShape = [wshape[1] * wshape[2] * wshape[3], outputShape[2] * outputShape[3]];\n      const kernelSize = wshape[2] * wshape[3];\n      const unpackChannel = unpackFromChannel();\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      let unrolled = '';\n\n      for (let row = 0; row <= 1; row++) {\n        for (let col = 0; col <= 1; col++) {\n          unrolled += `\n            blockIndex = rc.x + ${col};\n            pos = rc.y + ${row};\n\n            if(blockIndex < ${im2colShape[1]} && pos < ${im2colShape[0]}) {\n              offsetY = int(blockIndex / (${outputShape[rank - 1]})) * ${attributes.strides[0]} -\n                ${attributes.pads[0]};\n              d0 = offsetY + ${attributes.dilations[0]} * (imod(pos, ${kernelSize}) / ${wshape[2]});\n\n              if(d0 < ${xshape[rowDim]} && d0 >= 0) {\n                offsetX = imod(blockIndex, ${outputShape[rank - 1]}) * ${attributes.strides[1]} -\n                  ${attributes.pads[1]};\n                d1 = offsetX + ${attributes.dilations[1]} * imod(imod(pos, ${kernelSize}), ${wshape[2]});\n\n                if(d1 < ${xshape[colDim]} && d1 >= 0) {\n\n                  ch = int(float(pos)/ ${kernelSize}.);\n                    innerDims = vec2(d0, d1);\n                    result[${row * 2 + col}] = getChannel(\n                      getA(0, ch, int(innerDims.x),\n                      int(innerDims.y)), innerDims);\n                }\n              }\n            }\n\n          `;\n        }\n      }\n\n      const shaderSource = `\n      ${unpackChannel}\n\n      void main() {\n        ivec2 rc = getOutputCoords();\n          vec4 result = vec4(0.0);\n          int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n          vec2 innerDims;\n          ${unrolled}\n          ${glsl.output} = result;\n      }\n            `;\n      return {\n        ...metadata,\n        output: {dims: im2colShape, type: x.type, textureType: TextureType.packed},\n        shaderSource,\n        hasMain: true\n      };\n    };\n\nexport const createPackedIm2ColProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, x: Tensor, w: Tensor, outputShape: readonly number[],\n     attributes: ConvAttributes): ProgramInfoLoader => {\n      const metadata = createPackedIm2ColProgramMetadata(attributes.cacheKey);\n      return {\n        ...metadata,\n        get: () => createPackedIm2ColProgramInfo(inferenceHandler, metadata, x, w, outputShape, attributes)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {ConvAttributes} from './conv';\n\nconst createIm2ColProgramMetadata = (cacheHint: string) => ({\n  name: 'Im2Col',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n  cacheHint,\n});\n\nconst createIm2ColProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, x: Tensor, w: Tensor,\n     outputShape: readonly number[], attributes: ConvAttributes): ProgramInfo => {\n      const xshape = x.dims;\n      const wshape = w.dims;\n\n      const rank = outputShape.length;\n      const im2colDims = calculateIm2ColDims(xshape, wshape, outputShape, 4);\n\n      const shaderSource = `\n        const int XC = ${xshape[1]};\n        const int XH = ${xshape[2]};\n        const int XW = ${xshape[3]};\n        const int KH = ${attributes.kernelShape[0]};\n        const int KW = ${attributes.kernelShape[1]};\n        const int dilationH = ${attributes.dilations[0]};\n        const int dilationW = ${attributes.dilations[1]};\n        const int strideH = ${attributes.strides[0]};\n        const int strideW = ${attributes.strides[1]};\n        const int padH = ${attributes.pads[0]};\n        const int padW = ${attributes.pads[1]};\n        const int KHKW = KH*KW;\n        const int XCKHKW = XC * KHKW;\n        const int outputChannels = 4;\n        vec4 process(int indices[${rank}]) {\n          int b  = indices[0]; // batch size\n          int oh = indices[1] * strideH - padH; //output height\n          int ow = indices[2] * strideW - padW; //output width\n          int p = indices[3] * outputChannels; //patch\n          vec4 value = vec4(0.0);\n          for(int i=0; i < outputChannels; ++i) {\n            if(p < XCKHKW) {\n              int patchC = p / KHKW;\n              int patchH = (p - patchC*KHKW) / KW;\n              int patchW = (p - patchC*KHKW) - patchH * KW;\n              int xh2 = oh + patchH * dilationH;\n              int xw2 = ow + patchW * dilationW;\n              int x[${xshape.length}];\n              x[0] = b;\n              x[1] = patchC;\n              x[2] = xh2;\n              x[3] = xw2;\n              if(xh2 >= 0 &&\n                  xh2 < XH &&\n                  xw2 >= 0 &&\n                  xw2 < XW) {\n                value[i] = _X(x);\n              }\n            }\n            ++p;\n          }\n          return value;\n        }\n        `;\n      return {\n        ...metadata,\n        output: {dims: im2colDims, type: x.type, textureType: TextureType.packedLastDimension},\n        shaderSource\n      };\n    };\n\nexport const createIm2ColProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, x: Tensor, w: Tensor, outputShape: readonly number[],\n     attributes: ConvAttributes): ProgramInfoLoader => {\n      const metadata = createIm2ColProgramMetadata(attributes.cacheKey);\n      return {\n        ...metadata,\n        get: () => createIm2ColProgramInfo(inferenceHandler, metadata, x, w, outputShape, attributes)\n      };\n    };\n\n\nexport const calculateIm2ColDims =\n    (inputShape: readonly number[], kernelShape: readonly number[], outputShape: readonly number[], channels = 4):\n        number[] =>\n            [outputShape[0], outputShape[2], outputShape[3],\n             Math.ceil(inputShape[1] * kernelShape[2] * kernelShape[3] / channels)];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport interface ImageScalerAttributes extends AttributeWithCacheKey {\n  scale: number;\n  bias: number[];\n}\n\nexport const imageScaler: OperatorImplementation<ImageScalerAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ImageScalerAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output =\n          inferenceHandler.run(createImageScalerProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n      return [output];\n    };\n\nexport const parseImageScalerAttributes: OperatorInitialization<ImageScalerAttributes> =\n    (node: Graph.Node): ImageScalerAttributes => {\n      const scale = node.attributes.getFloat('scale');\n      const bias = node.attributes.getFloats('bias');\n      return createAttributeWithCacheKey({scale, bias});\n    };\n\nconst imageScalerProgramMetadata = {\n  name: 'ImageScaler',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n};\n\nconst createImageScalerProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], attributes: ImageScalerAttributes):\n        ProgramInfo => {\n          const outputShape = inputs[0].dims.slice();\n          const rank = outputShape.length;\n          const getBiasMethod = createGetBiasMethod(attributes.bias.length);\n          const shaderSource = `\n      ${getBiasMethod}\n      float process(int indices[${rank}]) {\n        return _X(indices) * scale + getBias(bias, indices[1]);\n      }`;\n          return {\n            ...metadata,\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n            variables: [\n              {name: 'bias', type: 'float', arrayLength: attributes.bias.length, data: attributes.bias},\n              {name: 'scale', type: 'float', data: attributes.scale}\n            ],\n            shaderSource\n          };\n        };\n\nconst createImageScalerProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ImageScalerAttributes): ProgramInfoLoader => {\n      const metadata = {...imageScalerProgramMetadata, cacheHint: attributes.cacheKey};\n      return {...metadata, get: () => createImageScalerProgramInfo(handler, metadata, inputs, attributes)};\n    };\n\nconst createGetBiasMethod = (numChannels: number): string => {\n  const codeLines: string[] = [`float getBias(float bias[${numChannels}], int channel) {`];\n  for (let i = 0; i < numChannels; ++i) {\n    if (i === 0) {\n      codeLines.push(\n          '\\t' +\n          `if (channel == ${i}) { return bias[${i}]; }`);\n    } else if (i === numChannels - 1) {\n      codeLines.push(\n          '\\t' +\n          `else { return bias[${i}]; }`);\n    } else {\n      codeLines.push(\n          '\\t' +\n          `else if (channel == ${i}) { return bias[${i}]; }`);\n    }\n  }\n  codeLines.push(\n      '\\t' +\n      '}');\n  return codeLines.join('\\n');\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('ImageScaler requires 1 input.');\n  }\n  if (inputs[0].dims.length !== 4) {\n    throw new Error('Invalid input shape.');\n  }\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport const instanceNormalization: OperatorImplementation<number> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], epsilon: number): Tensor[] => {\n      validateInputs(inputs);\n\n      const meanAndVariance = inferenceHandler.run(createMeanAndVarianceProgramInfoLoader(inputs[0]), inputs);\n      const output = inferenceHandler.run(\n          createComputeOutputProgramInfoLoader(inferenceHandler, inputs[0], epsilon, meanAndVariance.dims),\n          [inputs[0], meanAndVariance, inputs[1], inputs[2]]);\n      return [output];\n    };\n\nexport const parseInstanceNormalizationAttributes: OperatorInitialization<number> = (node: Graph.Node): number =>\n    node.attributes.getFloat('epsilon', 1e-5);\n\nconst meanAndVarianceProgramMetadata = {\n  name: 'InstanceNormalization_MeanAndVariance',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n};\n\nconst createMeanAndVarianceProgramInfo = (metadata: ProgramMetadata, input: Tensor): ProgramInfo => {\n  const xDims = input.dims.slice();\n  const channel = xDims[1];\n  const channelSize = xDims[2] * xDims[3];\n  const outputShape = [xDims[0], channel];\n\n  const shaderSource = `\n      vec4 process(int[2] indices) {\n        vec4 v = vec4(0.0);\n        int a[4];\n        a[0] = indices[0];\n        a[1] = indices[1];\n        float temp = 0.0;\n        for(int a2=0; a2<${xDims[2]}; a2++) {\n          a[2] = a2;\n          for(int a3=0; a3<${xDims[3]}; a3++) {\n            a[3] = a3;\n            float x = _X(a);\n            temp += x;\n          }\n        }\n        float mean = temp / float(${channelSize});\n        temp = 0.0;\n        for(int a2=0; a2<${xDims[2]}; a2++) {\n          a[2] = a2;\n          for(int a3=0; a3<${xDims[3]}; a3++) {\n            a[3] = a3;\n            float x = _X(a);\n            temp += (x - mean) * (x - mean);\n          }\n        }\n        v.r = mean;\n        v.g = temp / float(${channelSize});\n\n        return v;\n      }`;\n  return {\n    ...metadata,\n    output: {dims: outputShape, type: input.type, textureType: TextureType.packedLastDimension},\n    shaderSource\n  };\n};\n\nconst createMeanAndVarianceProgramInfoLoader = (input: Tensor): ProgramInfoLoader => ({\n  ...meanAndVarianceProgramMetadata,\n  get: () => createMeanAndVarianceProgramInfo(meanAndVarianceProgramMetadata, input)\n});\n\nconst computeOutputProgramMetadata = {\n  name: 'InstanceNormalization_ComputeOutput',\n  inputNames: ['X', 'MeanAndVariance', 'Scale', 'B'],\n  inputTypes: [TextureType.unpacked, TextureType.packedLastDimension, TextureType.unpacked, TextureType.unpacked],\n};\n\nconst createComputeOutputProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, input: Tensor, epsilon: number,\n     meanAndVarianceShape: readonly number[]): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(meanAndVarianceShape, TextureType.packedLastDimension);\n      const [meanAndVarianceWidth, meanAndVarianceHeight] = [textureWidth / 4, textureHeight];\n      const shaderSource = `\n      vec4 get_MeanAndVariance(int[2] mv) {\n        int offset = indicesToOffset_MeanAndVariance(mv);\n        vec2 coords = offsetToCoords(offset, ${meanAndVarianceWidth}, ${meanAndVarianceHeight});\n        return ${glsl.texture2D}(MeanAndVariance, coords);\n      }\n\n      float process(int[4] indices) {\n        int mv[2];\n        mv[0] = indices[0];\n        mv[1] = indices[1];\n        vec4 mean_and_variance = get_MeanAndVariance(mv);\n        float mean = mean_and_variance.r;\n        float variance = mean_and_variance.g;\n\n        int sb[1];\n        sb[0] = indices[1];\n        float scale = _Scale(sb);\n        float b = _B(sb);\n\n        return scale * (_X(indices) - mean) / sqrt(variance + epsilon) + b;\n      }`;\n      return {\n        ...metadata,\n        output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\n        variables: [{name: 'epsilon', type: 'float', data: epsilon}],\n        shaderSource\n      };\n    };\n\nconst createComputeOutputProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, epsilon: number, meanAndVarianceShape: readonly number[]):\n        ProgramInfoLoader => {\n          const metadata = {...computeOutputProgramMetadata, cacheHint: `${epsilon}`};\n          return {\n            ...metadata,\n            get: () => createComputeOutputProgramInfo(inferenceHandler, metadata, input, epsilon, meanAndVarianceShape)\n          };\n        };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 3) {\n    throw new Error('InstanceNormalization requires 3 inputs.');\n  }\n\n  const X = inputs[0];\n  const scale = inputs[1];\n  const B = inputs[2];\n\n  // input should at least have three dimensions - N,C,dim1,...,dimn\n  // other inputs can have only one dimensions\n  if (X.dims.length < 3 || scale.dims.length !== 1 || B.dims.length !== 1) {\n    throw new Error('Invalid input shape.');\n  }\n  if (scale.dims[0] !== X.dims[1] || B.dims[0] !== X.dims[1]) {\n    throw new Error('Input shapes are mismatched.');\n  }\n  if ((X.type !== 'float32' && X.type !== 'float64') || (scale.type !== 'float32' && scale.type !== 'float64') ||\n      (B.type !== 'float32' && B.type !== 'float64')) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs[0].dims.length !== 4) {\n    throw new Error('Only support 4-D input shape.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\n\nexport interface LrnAttributes extends AttributeWithCacheKey {\n  alpha: number;\n  beta: number;\n  bias: number;\n  size: number;\n}\n\nexport const lrn: OperatorImplementation<LrnAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: LrnAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      // if (inferenceHandler.session.pack) {\n      //   return [inferenceHandler.run(createPackedLrnProgramInfoLoader(inferenceHandler, inputs, attributes),\n      //   inputs)];\n      // } else {\n      return [inferenceHandler.run(createLrnProgramInfoLoader(inputs, attributes), inputs)];\n      //}\n    };\n\nexport const parseLrnAttributes: OperatorInitialization<LrnAttributes> = (node: Graph.Node): LrnAttributes => {\n  const alpha = node.attributes.getFloat('alpha', 0.0001);\n  const beta = node.attributes.getFloat('beta', 0.75);\n  const bias = node.attributes.getFloat('bias', 1.0);\n  const size = node.attributes.getInt('size');\n\n  return createAttributeWithCacheKey({alpha, beta, bias, size});\n};\n\nconst lrnProgramMetadata = {\n  name: 'LRN',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked]\n};\n\nfunction createLrnProgramInfo(inputs: Tensor[], attributes: LrnAttributes): ProgramInfo {\n  const C = inputs[0].dims[1];\n  const rank = inputs[0].dims.length;\n  const from = -Math.floor((attributes.size - 1) / 2);\n  const to = Math.ceil((attributes.size - 1) / 2);\n  const alpha = `float(${attributes.alpha}) / float(${attributes.size})`;\n  const bias = `float(${attributes.bias})`;\n  const beta = `float(${attributes.beta})`;\n\n  const shaderSource = `\n    float process(int indices[${rank}]) {\n        int c = indices[1];\n        float x = _X(indices);\n        float square_sum = 0.0;\n\n        for (int i = ${from}; i <= ${to}; i++) {\n          int idx = c + i;\n          if (c >= 0 && c < ${C}) {\n            indices[1] = idx;\n            float j = _X(indices);\n            square_sum += j * j;\n          }\n        }\n        return x / pow(${bias} + ${alpha} * square_sum, ${beta});\n    }`;\n  return {\n    ...lrnProgramMetadata,\n    cacheHint: attributes.cacheKey,\n    output: {dims: inputs[0].dims, type: inputs[0].type, textureType: TextureType.unpacked},\n    shaderSource,\n  };\n}\n\nexport function createLrnProgramInfoLoader(inputs: Tensor[], attributes: LrnAttributes): ProgramInfoLoader {\n  return {...lrnProgramMetadata, cacheHint: attributes.cacheKey, get: () => createLrnProgramInfo(inputs, attributes)};\n}\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('LRN requires 1 input.');\n  }\n  if (inputs[0].dims.length !== 4) {\n    throw new Error('currently only support LRN for input with \"NCHW\" format');\n  }\n  if (inputs[0].type !== 'float32') {\n    throw new Error('input should be float type');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\nimport {getCoordsDataType, getGlChannels} from '../utils';\n\nimport {getActivationSnippet, InternalActivationAttributes} from './fuse-utils';\nimport {getBiasForMatmul} from './matmul';\n\nconst createPackedMatmulProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\n  name: 'MatMul (packed)',\n  inputNames: hasBias ? ['A', 'B', 'Bias'] : ['A', 'B'],\n  inputTypes: hasBias ? [TextureType.packed, TextureType.packed, TextureType.packed] :\n                        [TextureType.packed, TextureType.packed],\n  cacheHint\n});\n\nconst createPackedMatmulProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[],\n     activationAttributes: InternalActivationAttributes): ProgramInfo => {\n      const hasBias = inputs.length > 2;\n      const processBias = hasBias ? 'value += getBiasForMatmul();' : '';\n      const aShape = inputs[0].dims;\n      const bShape = inputs[1].dims;\n      const outputShape = BroadcastUtil.calcShape(aShape, bShape, true);\n      const isBroadcast = !ShapeUtil.areEqual(inputs[0].dims, inputs[1].dims);\n\n      if (!outputShape) {\n        throw new Error('Can\\'t use matmul on the given tensors');\n      }\n      const sharedDim = aShape[aShape.length - 1];\n      const sharedDimIndex = Math.ceil(sharedDim / 2);\n      const aRank = aShape.length;\n      const bRank = bShape.length;\n\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const coordsDataType = getCoordsDataType(outputShape.length);\n      const outRank = outputShape.length;\n      const allGlChannels = getGlChannels();\n      const {activationFunction, applyActivation} = getActivationSnippet(activationAttributes);\n\n      const getBiasForMatmulSnippet =\n          hasBias ? `${getBiasForMatmul(coordsDataType, allGlChannels, inputs[2].dims, outputShape, true)}` : '';\n\n      const getBcastedSamplerForMatmulSnippet =\n          isBroadcast ? `${getBcastSamplerForMatmul(coordsDataType, allGlChannels, inputs, outputShape)}` : '';\n\n      const getSamplerAInLoopSnippet = isBroadcast ? 'getAAtOutCoordsMatmul(i)' : `getA(${getA(allGlChannels, aRank)})`;\n      const getSamplerBInLoopSnippet = isBroadcast ? 'getBAtOutCoordsMatmul(i)' : `getB(${getB(allGlChannels, bRank)})`;\n      const getOutputCoordsSnippet = isBroadcast ? '' : `${coordsDataType} rc =\n          getOutputCoords(); int lastDim = rc.${allGlChannels[outRank - 1]}; rc.${allGlChannels[outRank - 1]} =\n          rc.${allGlChannels[outRank - 2]}; rc.${allGlChannels[outRank - 2]} = lastDim;\n      `;\n      const shaderSource = `\n            ${getBcastedSamplerForMatmulSnippet}\n            ${getBiasForMatmulSnippet}\n            ${activationFunction}\n            void main() {\n              ${getOutputCoordsSnippet}\n\n              vec4 value = vec4(0);\n              for (int i = 0; i < ${sharedDimIndex}; i++) {\n                vec4 a = ${getSamplerAInLoopSnippet};\n                vec4 b = ${getSamplerBInLoopSnippet};\n\n                value += (a.rrbb * b.rgrg);\n                value += (a.ggaa * b.baba);\n              }\n              ${processBias}\n              ${applyActivation}\n              ${glsl.output} = value;\n            }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n        shaderSource,\n        hasMain: true\n      };\n    };\n\nexport const createPackedMatmulProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[],\n     activationAttributes: InternalActivationAttributes): ProgramInfoLoader => {\n      const metadata = createPackedMatmulProgramMetadata(inputs.length > 2, activationAttributes.activationCacheKey);\n      return {\n        ...metadata,\n        get: () => createPackedMatmulProgramInfo(inferenceHandler, metadata, inputs, activationAttributes)\n      };\n    };\n\nfunction getBcastSamplerForMatmul(\n    coordsDataType: string, allGlChannels: readonly string[], inputs: Tensor[], outShape: readonly number[]): string {\n  let unpackedACoordsSnippet = [];\n  let unpackedBCoordsSnippet = [];\n\n  const inAShape = inputs[0].dims;\n  const inBShape = inputs[1].dims;\n\n  const inARank = inAShape.length;\n  const inBRank = inBShape.length;\n\n  const outRank = outShape.length;\n  const rankADiff = outRank - inARank;\n  const rankBDiff = outRank - inBRank;\n\n  unpackedACoordsSnippet = inAShape.map((s, i) => `coords.${allGlChannels[i + rankADiff]}`);\n  unpackedACoordsSnippet[inARank - 1] = 'i*2';\n  unpackedACoordsSnippet.join(', ');\n  unpackedBCoordsSnippet = inBShape.map((s, i) => `coords.${allGlChannels[i + rankBDiff]}`);\n  unpackedBCoordsSnippet[inBRank - 2] = 'i*2';\n  unpackedBCoordsSnippet.join(', ');\n\n  const broadcastADims = BroadcastUtil.getBroadcastDims(inAShape, outShape);\n  const broadcastBDims = BroadcastUtil.getBroadcastDims(inBShape, outShape);\n\n  const coordsASnippet = broadcastADims.map(d => `coords.${allGlChannels[d + rankADiff]} = 0;`).join('\\n');\n  const coordsBSnippet = broadcastBDims.map(d => `coords.${allGlChannels[d + rankBDiff]} = 0;`).join('\\n');\n  const swapDimSnippet = `int lastDim = coords.${allGlChannels[outRank - 1]};\n  coords.${allGlChannels[outRank - 1]} = coords.${allGlChannels[outRank - 2]};\n  coords.${allGlChannels[outRank - 2]} = lastDim;`;\n\n  const getBcastSamplerMatmulSource = `\nvec4 getAAtOutCoordsMatmul(int i) {\n  ${coordsDataType} coords = getOutputCoords();\n  ${swapDimSnippet}\n  ${coordsASnippet}\n  vec4 outputValue = getA(${unpackedACoordsSnippet});\n  return outputValue;\n}\n\nvec4 getBAtOutCoordsMatmul(int i) {\n  ${coordsDataType} coords = getOutputCoords();\n  ${swapDimSnippet}\n  ${coordsBSnippet}\n  vec4 outputValue = getB(${unpackedBCoordsSnippet});\n  return outputValue;\n}`;\n\n  return getBcastSamplerMatmulSource;\n}\n\nfunction getA(allGlChannels: string[], rank: number): string {\n  let res = '';\n  for (let i = 0; i < rank - 2; i++) {\n    res += `rc.${allGlChannels[i]}, `;\n  }\n  res += `rc.${allGlChannels[rank - 2]}, ` +\n      'i*2';\n  return res;\n}\n\nfunction getB(allGlChannels: string[], rank: number): string {\n  let res = '';\n  for (let i = 0; i < rank - 2; i++) {\n    res += `rc.${allGlChannels[i]}, `;\n  }\n  res += 'i*2, ' +\n      `rc.${allGlChannels[rank - 1]}`;\n  return res;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\nimport {getCoordsDataType, getGlChannels} from '../utils';\n\nimport {getActivationSnippet, InternalActivationAttributes, parseInternalActivationAttributes} from './fuse-utils';\nimport {createPackedMatmulProgramInfoLoader} from './matmul-pack';\n\nexport const matMul: OperatorImplementation<InternalActivationAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: InternalActivationAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      if (inferenceHandler.session.pack) {\n        return [inferenceHandler.run(\n            createPackedMatmulProgramInfoLoader(inferenceHandler, inputs, attributes), inputs)];\n      } else {\n        return [inferenceHandler.run(createMatmulProgramInfoLoader(inputs, attributes), inputs)];\n      }\n    };\n\nexport const parseMatMulAttributes: OperatorInitialization<InternalActivationAttributes> =\n    (node: Graph.Node): InternalActivationAttributes => parseInternalActivationAttributes(node.attributes);\n\nconst createMatmulProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\n  name: 'MatMul',\n  inputNames: hasBias ? ['A', 'B', 'Bias'] : ['A', 'B'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.unpacked],\n  cacheHint\n});\n\nfunction createMatmulProgramInfo(\n    metadata: ProgramMetadata, inputs: Tensor[], activationAttributes: InternalActivationAttributes): ProgramInfo {\n  const aShape = inputs[0].dims;\n  const bShape = inputs[1].dims;\n  const outputShape = BroadcastUtil.calcShape(aShape, bShape, true);\n  if (!outputShape) {\n    throw new Error('Can\\'t use matmul on the given tensors');\n  }\n  const coordsDataType = getCoordsDataType(outputShape.length);\n  const allGlChannels = getGlChannels();\n  const {activationFunction, applyActivation} = getActivationSnippet(activationAttributes);\n\n  const hasBias = inputs.length > 2;\n  const processBias = hasBias ? 'value += getBiasForMatmul();' : '';\n  const getBiasForMatmulSnippet =\n      hasBias ? `${getBiasForMatmul(coordsDataType, allGlChannels, inputs[2].dims, outputShape, false)}` : '';\n\n  const rank = outputShape.length;\n  const arank = aShape.length;\n  const brank = bShape.length;\n  const sharedDim = aShape[aShape.length - 1];\n  const shaderSource = `\n    ${activationFunction}\n    ${getBiasForMatmulSnippet}\n    float process(int indices[${rank}]) {\n        int a[${arank}];\n        int b[${brank}];\n        bcastMatmulIndices_A(indices, a);\n        bcastMatmulIndices_B(indices, b);\n\n        float value;\n        for (int k=0; k<${sharedDim}; ++k) {\n            a[${arank - 1}] = k;\n            b[${brank - 2}] = k;\n            value += _A(a) * _B(b);\n        }\n        ${processBias}\n        ${applyActivation}\n        return value;\n    }`;\n  return {\n    ...metadata,\n    output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n    shaderSource,\n  };\n}\n\nexport function createMatmulProgramInfoLoader(\n    inputs: Tensor[], activationAttributes: InternalActivationAttributes): ProgramInfoLoader {\n  const metadata = createMatmulProgramMetadata(inputs.length > 2, activationAttributes.activationCacheKey);\n  return {...metadata, get: () => createMatmulProgramInfo(metadata, inputs, activationAttributes)};\n}\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('MatMul requires 2 inputs.');\n  }\n\n  if (inputs[0].dims[inputs[0].dims.length - 1] !== inputs[1].dims[inputs[1].dims.length - 2]) {\n    throw new Error('shared dimension does not match.');\n  }\n\n  if ((inputs[0].type !== 'float32' && inputs[0].type !== 'float64') ||\n      (inputs[1].type !== 'float32' && inputs[1].type !== 'float64')) {\n    throw new Error('inputs should be float type');\n  }\n\n  if (inputs[0].type !== inputs[1].type) {\n    throw new Error('inputs types should match');\n  }\n};\n\nexport function getBiasForMatmul(\n    coordsDataType: string, allGlChannels: readonly string[], inShape: readonly number[], outShape: readonly number[],\n    isPacked: boolean): string {\n  let unpackedCoordsSnippet = '';\n  const inRank = inShape.length;\n  const outRank = outShape.length;\n  const rankDiff = outRank - inRank;\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inShape.map((s, i) => `coords.${allGlChannels[i + rankDiff]}`).join(', ');\n  }\n  const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\n  const coordsSnippet = broadcastDims.map(d => `coords.${allGlChannels[d + rankDiff]} = 0;`).join('\\n');\n  const inSize = ShapeUtil.size(inShape);\n  const isInputScalar = inSize === 1;\n  let output = 'vec4(outputValue.xx, outputValue.yy)';\n  if (isInputScalar) {\n    output = 'vec4(outputValue.x)';\n  }\n  const getBiasForMatmulSource = isPacked ? `\nvec4 getBiasForMatmul() {\n  ${coordsDataType} coords = getOutputCoords();\n  ${coordsSnippet}\n  vec4 outputValue = getBias(${unpackedCoordsSnippet});\n  return ${output};\n}` :\n                                            `\nfloat getBiasForMatmul() {\n  ${coordsDataType} coords = getOutputCoords();\n  ${coordsSnippet}\n  return getBias(coords.x);\n}`;\n\n  return getBiasForMatmulSource;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\nimport {getCoordsDataType} from '../utils';\n\nimport {getChannels} from './packing-utils';\n\nconst packProgramMetadata = {\n  name: 'pack',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpackedReversed]\n};\n\nconst createPackProgramInfo = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfo => {\n  const glsl = getGlsl(handler.session.backend.glContext.version);\n  const inputShape = input.dims;\n\n  const inputRank = inputShape.length;\n  // createTextureLayoutFromShape won't change output rank. Need to verify by running tests\n  const outputRank = input.dims.length;\n\n  const coordsDataType = getCoordsDataType(outputRank);\n  const channels = getChannels('rc', outputRank);\n  const setup = getSetup(outputRank, channels, inputShape[inputShape.length - 2], inputShape[inputShape.length - 1]);\n\n  let reversedInputWH;\n  if (inputRank === 0) {\n    reversedInputWH = [1, 1];\n  } else if (inputRank === 1) {\n    reversedInputWH = [inputShape[0], 1];\n  } else {\n    reversedInputWH = [inputShape[outputRank - 1], inputShape[outputRank - 2]];\n  }\n  const outOfBoundsCondition = getOutOfBoundsCondition(outputRank, reversedInputWH, channels);\n  const output = getOutput(inputShape, channels);\n\n  const shaderSource = `\n        void main() {\n          ${coordsDataType} rc = getOutputCoords();\n\n          if(${outOfBoundsCondition}) {\n            ${glsl.output} = vec4(0);\n          } else {\n            ${setup}\n\n            ${glsl.output} = vec4(${output});\n          }\n        }\n      `;\n  return {\n    ...packProgramMetadata,\n    hasMain: true,\n    output: {dims: input.dims, type: input.type, textureType: TextureType.packed},\n    shaderSource\n  };\n};\n\nexport const createPackProgramInfoLoader = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfoLoader =>\n    ({...packProgramMetadata, get: () => createPackProgramInfo(handler, input)});\n\n/**\n * check output coordinate location and return false if it is outside input's width/height boundary\n */\nfunction getOutOfBoundsCondition(rank: number, shape: readonly number[], dims: string[]): string {\n  if (rank === 0) {\n    return 'false';\n  }\n  if (rank === 1) {\n    return `rc > ${shape[0]}`;\n  }\n\n  let cond = '';\n  for (let i = rank - 2; i < rank; i++) {\n    cond += `${dims[i]} >= ${shape[i - rank + 2]}`;\n    if (i < rank - 1) {\n      cond += '||';\n    }\n  }\n\n  return cond;\n}\n\n/**\n * code snippet to sample input texture with output coordiantes\n */\nfunction getOutput(shape: readonly number[], dims: string[]): string {\n  const rank = shape.length;\n\n  if (rank === 0) {\n    return 'getA(), 0, 0, 0';\n  }\n\n  if (rank === 1) {\n    return `getA(rc),\n            rc + 1 >= ${shape[0]} ? 0. : getA(rc + 1),\n            0, 0`;\n  }\n\n  const coord00 = 'r, c';\n  const coord01 = 'r, cp1';\n  const coord10 = 'rp1, c';\n  const coord11 = 'rp1, cp1';\n  let D = '';\n  if (rank > 2) {\n    for (let i = 0; i < rank - 2; ++i) {\n      D = D + `${dims[i]},`;\n    }\n  }\n  return `getA(${D}${coord00}),\n          rEdge ? 0. : getA(${D}${coord10}),\n          cEdge ? 0. : getA(${D}${coord01}),\n          rEdge || cEdge ? 0. : getA(${D}${coord11})`;\n}\n\n/**\n * code snippet to setup 4 coordinates and edge conditions\n */\nfunction getSetup(rank: number, dims: string[], rows: number, cols: number): string {\n  if (rank === 0 || rank === 1) {\n    return '';\n  }\n  // rank >= 2 for width+height pack.\n  else {\n    const setup = `\n    int r = ${dims[rank - 2]};\n    int c = ${dims[rank - 1]};\n    int rp1 = ${dims[rank - 2]} + 1;\n    int cp1 = ${dims[rank - 1]} + 1;\n    bool rEdge = rp1 >= ${cols};\n    bool cEdge = cp1 >= ${rows};\n    `;\n    return setup;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {getGlChannels} from '../utils';\n\nexport function getVecChannels(name: string, rank: number): string[] {\n  return getGlChannels(rank).map(d => `${name}.${d}`);\n}\n\nexport function getChannels(name: string, rank: number): string[] {\n  if (rank === 1) {\n    return [name];\n  }\n  return getVecChannels(name, rank);\n}\n\nexport function unpackFromChannel(): string {\n  return `\n    float getChannel(vec4 frag, int dim) {\n      int modCoord = imod(dim, 2);\n      return modCoord == 0 ? frag.r : frag.g;\n    }\n\n    float getChannel(vec4 frag, vec2 innerDims) {\n      vec2 modCoord = mod(innerDims, 2.);\n      return modCoord.x == 0. ?\n        (modCoord.y == 0. ? frag.r : frag.g) :\n        (modCoord.y == 0. ? frag.b : frag.a);\n    }\n  `;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl, Glsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface PadAttributes extends AttributeWithCacheKey {\n  readonly mode: string;\n  readonly pads: number[];\n  readonly value: number;\n}\n\nconst padProgramMetadata = {\n  name: 'Pad',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked],\n};\n\nexport const padV2: OperatorImplementation<PadAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: PadAttributes): Tensor[] => {\n      validateInputsV2(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...padProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createPadProgramInfo(inferenceHandler, inputs[0], attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parsePadAttributesV2: OperatorInitialization<PadAttributes> = (node: Graph.Node): PadAttributes => {\n  const mode = node.attributes.getString('mode', 'constant');\n  const value = node.attributes.getFloat('value', 0.0);\n  const pads = node.attributes.getInts('pads');\n  return createAttributeWithCacheKey({mode, value, pads});\n};\n\nexport const padV11: OperatorImplementation<string> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], mode: string): Tensor[] => {\n      validateInputsV11(inputs);\n      const attrubutes = generatePadAttributesFromInputs(inferenceHandler, inputs, mode);\n      return padV2(inferenceHandler, [inputs[0]], attrubutes);\n    };\n\nexport const parsePadAttributesV11: OperatorInitialization<string> = (node: Graph.Node): string =>\n    node.attributes.getString('mode', 'constant');\n\nconst generatePadAttributesFromInputs =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], mode: string): PadAttributes => {\n      if (!inferenceHandler.session.isInitializer(inputs[1].dataId) ||\n          (inputs.length >= 3 && !inferenceHandler.session.isInitializer(inputs[2].dataId))) {\n        throw new Error('dynamic pad attributes are not allowed');\n      }\n\n      const pads = Array.from(inputs[1].integerData);\n      const value = (inputs.length >= 3) ? inputs[2].floatData[0] : 0.0;\n\n      return createAttributeWithCacheKey({mode, pads, value});\n    };\n\nconst createPadProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: PadAttributes): ProgramInfo => {\n      const outputShape = ShapeUtil.padShape(input.dims.slice(), attributes.pads);\n      const rank = outputShape.length;\n      const padFunction = getPadFunction(inferenceHandler, input, attributes);\n      const shaderSource = `\n      ${padFunction}\n      float process(int[${rank}] indices) {\n          return padA(indices);\n      }`;\n      return {\n        name: 'Pad',\n        inputNames: ['A'],\n        inputTypes: [TextureType.unpacked],\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputsV2 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Pad requires 1 input');\n  }\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n};\n\nconst validateInputsV11 = (inputs: Tensor[]): void => {\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Pad requires 2 or 3 inputs');\n  }\n  if (inputs[1].type !== 'int32') {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs.length >= 3 && inputs[2].type === 'string') {\n    throw new Error('Invalid input type.');\n  }\n};\n\nconst getPadFunction = (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: PadAttributes): string => {\n  const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n  const [width, height] = inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n  const strides = ShapeUtil.computeStrides(input.dims);\n\n  switch (attributes.mode) {\n    case 'constant':\n      return getPadConstant(glsl, input.dims, strides, width, height, attributes.pads, attributes.value);\n    case 'reflect':\n      return getPadReflect(glsl, input.dims, strides, width, height, attributes.pads);\n    case 'edge':\n      return getPadEdge(glsl, input.dims, strides, width, height, attributes.pads);\n    default:\n      throw new Error('Invalid mode');\n  }\n};\n\nconst getPadConstant =\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[],\n     value: number): string => {\n      const rank = shape.length;\n      let block = '';\n      for (let i = rank - 1; i >= 0; --i) {\n        block += `\n        k = m[${i}] - ${pads[i]};\n        if (k < 0)  return constant;\n        if (k >= ${shape[i]}) return constant;\n        offset += k * ${strides[i]};\n        `;\n      }\n      return `\n      float padA(int m[${rank}]) {\n        const float constant = float(${value});\n        int offset = 0;\n        int k = 0;\n        ${block}\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\n        return value;\n      }\n      `;\n    };\n\nconst getPadReflect =\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[]):\n        string => {\n          const rank = shape.length;\n\n          let block = '';\n          for (let i = rank - 1; i >= 0; --i) {\n            block += `\n        k = m[${i}] - ${pads[i]};\n        if (k < 0) { k = -k; }\n        {\n          const int _2n_1 = ${2 * (shape[i] - 1)};\n          k = int( mod( float(k), float(_2n_1) ) ) ;\n          if(k >= ${shape[i]}) { k = _2n_1 - k; }\n        }\n        offset += k * ${strides[i]};\n        `;\n          }\n          return `\n      float padA(int m[${rank}]) {\n        int offset = 0;\n        int k = 0;\n        ${block}\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\n        return value;\n      }\n      `;\n        };\n\nconst getPadEdge =\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[]):\n        string => {\n          const rank = shape.length;\n\n          let block = '';\n          for (let i = rank - 1; i >= 0; --i) {\n            block += `\n        k = m[${i}] - ${pads[i]};\n        if (k < 0)  k = 0;\n        if (k >= ${shape[i]}) k = ${shape[i] - 1};\n        offset += k * ${strides[i]};\n      `;\n          }\n          return `\n      float padA(int m[${rank}]) {\n        int offset = 0;\n        int k = 0;\n        ${block}\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\n        return value;\n      }\n      `;\n        };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {PoolConvUtil, ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport interface AveragePoolAttributes extends AttributeWithCacheKey {\n  readonly autoPad: string;\n  readonly ceilMode: number;\n  readonly countIncludePad: boolean;\n  readonly kernelShape: readonly number[];\n  readonly strides: readonly number[];\n  readonly pads: readonly number[];\n}\n\nexport const averagePool: OperatorImplementation<AveragePoolAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: AveragePoolAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const metadata =\n          {name: 'AveragePool', inputNames: ['X'], inputTypes: [TextureType.unpacked], cacheHint: attributes.cacheKey};\n      const output = inferenceHandler.run(\n          {...metadata, get: () => createAveragePoolProgramInfo(inputs, metadata, false, attributes)}, inputs);\n      return [output];\n    };\n\nexport const parseAveragePoolAttributes: OperatorInitialization<AveragePoolAttributes> =\n    (node: Graph.Node): AveragePoolAttributes => {\n      const autoPad = node.attributes.getString('auto_pad', 'NOTSET');\n      const ceilMode = node.attributes.getInt('ceil_mode', 0);\n      const countIncludePad = (node.attributes.getInt('count_include_pad', 0) === 0 ? false : true);\n      const kernelShape = node.attributes.getInts('kernel_shape');\n      const strides = node.attributes.getInts('strides', []);\n      const pads = node.attributes.getInts('pads', []);\n\n      // TODO: support attribute 'ceil_mode'\n      if (ceilMode !== 0) {\n        throw new Error('using ceil() in shape computation is not yet supported for AveragePool');\n      }\n\n      return createAttributeWithCacheKey({autoPad, ceilMode, countIncludePad, kernelShape, strides, pads});\n    };\n\nconst createAveragePoolProgramInfo =\n    (inputs: Tensor[], metadata: ProgramMetadata, isGlobalOperator: boolean, attributes: AveragePoolAttributes):\n        ProgramInfo => {\n          const [adjustedAttributes, outputShape] =\n              getAdjustedPoolAttributesAndOutputShape(inputs, attributes, isGlobalOperator);\n          const kernelSize = ShapeUtil.size(adjustedAttributes.kernelShape);\n          const op1 = 'value += _X(x);';\n          let op2 = '';\n          if (adjustedAttributes.countIncludePad) {\n            op2 += `value /= float(${kernelSize});`;\n          } else {\n            op2 += `value /= float(${kernelSize} - pad);`;\n          }\n          const poolingCode = generatePoolingCode(inputs[0].dims, adjustedAttributes, op1, op2, '0.0');\n          const shaderSource = `\n        ${poolingCode}\n      `;\n          return {\n            ...metadata,\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nexport const globalAveragePool: OperatorImplementation<AveragePoolAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: AveragePoolAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const metadata = {\n        name: 'GlobalAveragePool',\n        inputNames: ['X'],\n        inputTypes: [TextureType.unpacked],\n        cacheHint: `${attributes.countIncludePad}`\n      };\n      const output = inferenceHandler.run(\n          {...metadata, get: () => createAveragePoolProgramInfo(inputs, metadata, true, attributes)}, inputs);\n      return [output];\n    };\n\nexport const parseGlobalAveragePoolAttributes: OperatorInitialization<AveragePoolAttributes> =\n    (node: Graph.Node): AveragePoolAttributes => {\n      const countIncludePad = (node.attributes.getInt('count_include_pad', 0) === 0 ? false : true);\n      return createAttributeWithCacheKey(\n          {autoPad: '', ceilMode: 0, countIncludePad, kernelShape: [], strides: [], pads: []});\n    };\n\nexport interface MaxPoolAttributes extends AveragePoolAttributes {\n  readonly storageOrder: number;\n  readonly dilations: number[];\n}\n\nexport const maxPool: OperatorImplementation<MaxPoolAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: MaxPoolAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const metadata =\n          {name: 'MaxPool', inputNames: ['X'], inputTypes: [TextureType.unpacked], cacheHint: attributes.cacheKey};\n      const output = inferenceHandler.run(\n          {...metadata, get: () => createMaxPoolProgramInfo(inputs, metadata, false, attributes)}, inputs);\n      return [output];\n    };\n\nexport const parseMaxPoolAttributes: OperatorInitialization<MaxPoolAttributes> =\n    (node: Graph.Node): MaxPoolAttributes => {\n      const autoPad = node.attributes.getString('auto_pad', 'NOTSET');\n      const ceilMode = node.attributes.getInt('ceil_mode', 0);\n      const kernelShape = node.attributes.getInts('kernel_shape');\n      const strides = node.attributes.getInts('strides', []);\n      const pads = node.attributes.getInts('pads', []);\n      const storageOrder = node.attributes.getInt('storage_order', 0);\n      const dilations = node.attributes.getInts('dilations', []);\n\n      // TODO: support attribute 'ceil_mode' and 'storage_order'\n      if (storageOrder !== 0) {\n        throw new Error('column major storage order is not yet supported for MaxPool');\n      }\n      if (ceilMode !== 0) {\n        throw new Error('using ceil() in shape computation is not yet supported for MaxPool');\n      }\n\n      return createAttributeWithCacheKey(\n          {autoPad, ceilMode, countIncludePad: false, kernelShape, strides, pads, storageOrder, dilations});\n    };\n\nconst createMaxPoolProgramInfo =\n    (inputs: Tensor[], metadata: ProgramMetadata, isGlobalOperator: boolean, attributes: MaxPoolAttributes):\n        ProgramInfo => {\n          const [adjustedAttributes, outputShape] =\n              getAdjustedPoolAttributesAndOutputShape(inputs, attributes, isGlobalOperator);\n          const op1 = `\n      value = max(_X(x), value);\n    `;\n          const op2 = '';\n          const poolingCode = generatePoolingCode(inputs[0].dims, adjustedAttributes, op1, op2, '-1e5');\n          const shaderSource = `\n      ${poolingCode}\n    `;\n          return {\n            ...metadata,\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nconst getAdjustedPoolAttributesAndOutputShape =\n    (inputs: Tensor[], attributes: AveragePoolAttributes|MaxPoolAttributes, isGlobalOperator: boolean):\n        [AveragePoolAttributes|MaxPoolAttributes, number[]] => {\n          const inputShape = inputs[0].dims.slice();\n          const hasDilations = Object.hasOwnProperty.call(attributes, 'dilations');\n          const kernelShape = attributes.kernelShape.slice();\n          const strides = attributes.strides.slice();\n          const dilations: number[] = hasDilations ? (attributes as MaxPoolAttributes).dilations.slice() : [];\n          const pads = attributes.pads.slice();\n          PoolConvUtil.adjustPoolAttributes(isGlobalOperator, inputShape, kernelShape, strides, dilations, pads);\n\n          const outputShape = PoolConvUtil.computePoolOutputShape(\n              isGlobalOperator, inputShape, strides, dilations, kernelShape, pads, attributes.autoPad);\n\n          const newAttributes = Object.assign({}, attributes);\n          if (hasDilations) {\n            Object.assign(newAttributes, {kernelShape, strides, pads, dilations, cacheKey: attributes.cacheKey});\n          } else {\n            Object.assign(newAttributes, {kernelShape, strides, pads, cacheKey: attributes.cacheKey});\n          }\n          return [newAttributes, outputShape];\n        };\n\nconst globalMaxPoolAttributes = {\n  autoPad: '',\n  ceilMode: 0,\n  countIncludePad: false,\n  kernelShape: [],\n  strides: [],\n  pads: [],\n  storageOrder: 0,\n  dilations: [],\n  cacheKey: ''\n};\n\nconst globalMaxPoolMetadata = {\n  name: 'GlobalMaxPool',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked]\n};\n\nexport const globalMaxPool = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n  const output = inferenceHandler.run(\n      {\n        ...globalMaxPoolMetadata,\n        get: () => createMaxPoolProgramInfo(inputs, globalMaxPoolMetadata, true, globalMaxPoolAttributes)\n      },\n      inputs);\n  return [output];\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Pool ops requires 1 input.');\n  }\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n};\n\nconst generatePoolingCode =\n    (inputDims: readonly number[], attributes: AveragePoolAttributes, op1: string, op2: string, start: string):\n        string => {\n          const rank = inputDims.length;\n          if (attributes.kernelShape.length <= 2) {\n            const kw = attributes.kernelShape[attributes.kernelShape.length - 1];\n            const sw = attributes.strides[attributes.strides.length - 1];\n            const pwStart = attributes.pads[attributes.pads.length / 2 - 1];\n            const pwEnd = attributes.pads[attributes.pads.length - 1];\n            const dimW = inputDims[rank - 1];\n            let codeW = '';\n            let codeH = '';\n            let codeHEnd = '';\n            if (pwStart + pwEnd !== 0) {\n              codeW = `\n          for (int i = 0; i < ${kw}; i++) {\n            x[${rank} - 1] = indices[${rank} - 1] * ${sw} - ${pwStart} + i;\n            if (x[${rank} - 1] < 0 || x[${rank} - 1] >= ${dimW}) {\n              pad++;\n              continue;\n            }\n            ${op1}\n          }`;\n            } else {\n              codeW = `\n          for (int i = 0; i < ${kw}; i++) {\n            x[${rank} - 1] = indices[${rank} - 1] * ${sw} - ${pwStart} + i;\n            ${op1}\n          }`;\n            }\n\n            if (attributes.kernelShape.length === 2) {\n              const kh = attributes.kernelShape[attributes.kernelShape.length - 2];\n              const sh = attributes.strides[attributes.strides.length - 2];\n              const phStart = attributes.pads[attributes.pads.length / 2 - 2];\n              const phEnd = attributes.pads[attributes.pads.length - 2];\n              const dimH = inputDims[rank - 2];\n              if (phStart + phEnd !== 0) {\n                codeH = `\n            for (int j = 0; j < ${kh}; j++) {\n              x[${rank} - 2] = indices[${rank} - 2] * ${sh} - ${phStart} + j;\n              if (x[${rank} - 2] < 0 || x[${rank} - 2] >= ${dimH}) {\n                pad+= ${kw};\n                continue;\n              }\n          `;\n              } else {\n                codeH = `\n            for (int j = 0; j < ${kh}; j++) {\n              x[${rank} - 2] = indices[${rank} - 2] * ${sh} - ${phStart} + j;\n            `;\n              }\n              codeHEnd = `\n          }\n        `;\n            }\n\n            const poolingCode = `\n        float process(int indices[${rank}]) {\n          int x[${rank}];\n          copyVec(indices, x);\n\n          float value = ${start};\n          int pad = 0;\n          ${codeH}\n          ${codeW}\n          ${codeHEnd}\n          ${op2}\n          return value;\n        }\n      `;\n            return poolingCode;\n          } else {\n            const kernelSize = ShapeUtil.size(attributes.kernelShape);\n            const kernelStrides = ShapeUtil.computeStrides(attributes.kernelShape);\n            const stridesRank = kernelStrides.length;\n            const padsRank = attributes.pads.length;\n            const offsetToIndicesFunction = offsetToIndices(stridesRank);\n            const copyInputDims = copyArray(inputDims, 'inputDims');\n            const copyPads = copyArray(attributes.pads, 'pads');\n            const copyKernelStrides = copyArray(kernelStrides, 'kernelStrides');\n            const copyStrides = copyArray(attributes.strides, 'strides');\n            const hasPads = attributes.pads.reduce((sum, cur) => sum + cur);\n            let padCode = '';\n            if (hasPads) {\n              padCode = `\n            if (x[j] >= inputDims[j] || x[j] < 0) {\n              pad++;\n              isPad = true;\n              break;\n            }\n          }\n          if (!isPad) {\n            ${op1}\n          }`;\n            } else {\n              padCode = `\n          }\n          ${op1}\n        `;\n            }\n            const poolingCode = `\n        ${offsetToIndicesFunction}\n        float process(int indices[${rank}]) {\n          int x[${rank}];\n          copyVec(indices, x);\n          int offset[${stridesRank}];\n          int pads[${padsRank}];\n          int inputDims[${rank}];\n          int kernelStrides[${stridesRank}];\n          int strides[${stridesRank}];\n          ${copyPads}\n          ${copyInputDims}\n          ${copyStrides}\n          ${copyKernelStrides}\n\n          float value = ${start};\n          int pad = 0;\n          bool isPad = false;\n          for (int i = 0; i < ${kernelSize}; i++) {\n            offsetToIndices(i, kernelStrides, offset);\n            isPad = false;\n            for (int j = ${rank} - ${stridesRank}; j < ${rank}; j++) {\n              x[j] = indices[j] * strides[j - ${rank} + ${stridesRank}]\n                + offset[j - ${rank} + ${stridesRank}] - pads[j - 2];\n              ${padCode}\n          }\n          ${op2}\n\n          return value;\n        }\n      `;\n            return poolingCode;\n          }\n        };\n\nconst copyArray = (array: readonly number[], arrayName: string): string => {\n  let block = '';\n  for (let i = 0; i < array.length; i++) {\n    block += `\n      ${arrayName}[${i}] = ${array[i]};\n    `;\n  }\n  return block;\n};\n\nconst offsetToIndices = (rank: number): string => `\n  void offsetToIndices(int offset, int[${rank}] strides, out int[${rank}] indices) {\n    if (${rank} == 0) {\n      return;\n    }\n    for (int i = 0; i < ${rank} - 1; ++i) {\n      indices[i] = offset / strides[i];\n      offset -= indices[i] * strides[i];\n    }\n    indices[${rank} - 1] = offset;\n  }`;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport interface ReduceAttributes extends AttributeWithCacheKey {\n  readonly axes: number[];\n  readonly keepDims: boolean;\n}\n\n// return [init ops, reduce ops, final ops]\ntype ReduceOp = (inputs: Tensor[], axes: number[]) => string[];\n\nconst reduce =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes, name: string,\n     reduceOp: ReduceOp): Tensor[] => {\n      validateInputs(inputs);\n\n      const reduceProgramMetadata = {\n        name,\n        inputNames: ['A'],\n        inputTypes: [TextureType.unpacked],\n      };\n\n      const output = inferenceHandler.run(\n          {\n            ...reduceProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () =>\n                createReduceProgramInfo(inferenceHandler, inputs, attributes, name, reduceOp, reduceProgramMetadata)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseReduceAttributes: OperatorInitialization<ReduceAttributes> = (node: Graph.Node): ReduceAttributes => {\n  const axes = node.attributes.getInts('axes', []);\n  const keepDims = node.attributes.getInt('keepdims', 1) === 1;\n  return createAttributeWithCacheKey({axes, keepDims});\n};\n\nconst createReduceProgramInfo =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes, name: string, reduceOp: ReduceOp,\n     reduceProgramMetadata: ProgramMetadata): ProgramInfo => {\n      const outputShape: number[] = [];\n      const iRank = inputs[0].dims.length || 1;\n\n      const idxCopy = [];  // copy output indexes to input indexes\n\n      const axes = ShapeUtil.normalizeAxes(attributes.axes, inputs[0].dims.length);\n      const ops = reduceOp(inputs, axes);\n      let reduceOps = ops[1];\n\n      for (let k = 0; k < inputs[0].dims.length; k++) {\n        // if this axis is reduced\n        if (axes.indexOf(k) >= 0 || axes.length === 0) {\n          if (attributes.keepDims) {\n            outputShape.push(1);\n          }  // else { remove the axis from outputShape; }\n\n          // loop over the d-th axis\n          reduceOps = `\n          for(int j${k} = 0; j${k} < ${inputs[0].dims[k]}; j${k}++) {\n            inputIdx[${k}] = j${k};\n            ${reduceOps}\n          }`;\n        } else {\n          idxCopy.push(`inputIdx[${k}] = outputIdx[${outputShape.length}];`);\n\n          outputShape.push(inputs[0].dims[k]);\n        }\n      }\n\n      const oRank = outputShape.length || 1;\n\n      const shaderSource = `\n      float process(int outputIdx[${oRank}]) {\n        float value;                 // final result\n        int inputIdx[${iRank}];      // addressing input data\n        ${idxCopy.join('\\n')}\n        ${ops[0]}       // init ops for reduce max/min\n        ${reduceOps}\n        ${ops[2]}       // final computation for reduce mean\n        return value;\n      }`;\n\n      return {\n        ...reduceProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  // TODO: support Reduce* operators with 2 inputs.\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Reduce op requires 1 input.');\n  }\n\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invalid input type.');\n  }\n};\n\nexport const reduceSum: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['value = 0.0;', 'value += _A(inputIdx);', ''];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceSum', reduceOp);\n    };\n\nexport const reduceMean: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\n        let size = 1.0;\n        for (let k = 0; k < inputs[0].dims.length; k++) {\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\n            size *= inputs[0].dims[k];\n          }\n        }\n\n        return ['value = 0.0;', 'value += _A(inputIdx);', `value /= ${size}.;`];  // ensure real number with `.`\n      };\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMean', reduceOp);\n    };\n\nexport const reduceMax: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\n        const idxZero = [];\n        for (let k = 0; k < inputs[0].dims.length; k++) {\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\n            idxZero.push(`inputIdx[${k}] = 0;`);  // first element\n          }\n        }\n\n        return [`${idxZero.join('\\n')}\\nvalue = _A(inputIdx);`, 'value = max(value, _A(inputIdx));', ''];\n      };\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMax', reduceOp);\n    };\n\nexport const reduceMin: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\n        const idxZero = [];\n        for (let k = 0; k < inputs[0].dims.length; k++) {\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\n            idxZero.push(`inputIdx[${k}] = 0;`);  // first element\n          }\n        }\n\n        return [`${idxZero.join('\\n')}\\nvalue = _A(inputIdx);`, 'value = min(value, _A(inputIdx));', ''];\n      };\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMin', reduceOp);\n    };\n\nexport const reduceProd: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['value = 1.0;', 'value *= _A(inputIdx);', ''];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceProd', reduceOp);\n    };\n\nexport const reduceLogSum: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['value = 0.0;', 'value += _A(inputIdx);', 'value = log(value);'];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceLogSum', reduceOp);\n    };\n\nexport const reduceLogSumSquare: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['float t; value = 0.0;', 't = _A(inputIdx); value += t * t;', ''];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceLogSumSquare', reduceOp);\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {unpackFromChannel} from './packing-utils';\n\nconst createPackedReshape3DProgramMetadata = (outputShape3D: readonly number[]) =>\n    ({name: 'Reshape (packed)', inputTypes: [TextureType.packed], inputNames: ['A'], cacheHint: `${outputShape3D}`});\n\nconst createPackedReshape3DProgramInfo =\n    (handler: WebGLInferenceHandler, input3D: Tensor, metadata: ProgramMetadata, outputShape3D: readonly number[]):\n        ProgramInfo => {\n          const inputShape3D = input3D.dims as [number, number, number];\n          const squeezedOutputShape = outputShape3D as [number, number, number];\n\n          let mainLoop = '';\n          for (let i = 0; i < 4; i++) {\n            let outputCoords = '';\n            switch (i) {\n              case 0:\n                outputCoords = 'outputCoords = rc;';\n                break;\n              case 1:\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y+1, rc.z);';\n                break;\n              case 2:\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y, rc.z+1);';\n                break;\n              case 3:\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y+1, rc.z+1);';\n                break;\n              default:\n                throw new Error();\n            }\n\n            mainLoop += `\n        ${outputCoords}\n        ${i > 0 ? 'if(outputCoords.y < rows && outputCoords.z < cols){' : ''}\n          int flattenedIndex = getFlattenedIndex(outputCoords);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flattenedIndex);\n          vec2 innerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${i}] = getChannel(getA(inputRC.x, inputRC.y, inputRC.z), innerDims);\n\n        ${i > 0 ? '}' : ''}\n      `;\n          }\n          const glsl = getGlsl(handler.session.backend.glContext.version);\n\n          const shaderSource = `\n      ${getReshapedInputCoords(inputShape3D)}\n      ${getFlattenedIndexFrom3D(squeezedOutputShape)}\n      ${unpackFromChannel()}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.0);\n\n        ivec3 outputCoords;\n        int rows = ${squeezedOutputShape[2]};\n        int cols = ${squeezedOutputShape[1]};\n\n        ${mainLoop}\n        ${glsl.output} = result;\n      }\n    `;\n\n          return {\n            ...metadata,\n            output: {dims: squeezedOutputShape, type: input3D.type, textureType: TextureType.packed},\n            shaderSource,\n            hasMain: true\n          };\n        };\n\nexport const createPackedReshape3DProgramInfoLoader =\n    (handler: WebGLInferenceHandler, input3D: Tensor, outputShape3D: readonly number[]): ProgramInfoLoader => {\n      const metadata = createPackedReshape3DProgramMetadata(outputShape3D);\n      return {...metadata, get: () => createPackedReshape3DProgramInfo(handler, input3D, metadata, outputShape3D)};\n    };\n\nexport function processDims3D(shape: ArrayLike<number>): [number, number, number] {\n  if (shape.length === 0) {\n    return [1, 1, 1];\n  }\n  // TODO: squeeze other shapes to 2D case\n  let batch = 1;\n  for (let i = 0; i < shape.length - 2; ++i) {\n    batch *= shape[i];\n  }\n  return [batch, shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]];\n}\n\n// For packed reshape, we need to re-arrange texel data for output shape.\n// Our pack is designed to pack a 2x2 tile in last h and w dimension, so\n// for the reshaped new tensor, we just need to re-arrange the last h and\n// w dimension. For any shape that is not in 3D, i.e. [batch, W, H], we\n// first convert it to 3D by collapsing other dimension to batch dim, then\n// process with the last two dimensions.\n// Note: we only need the shape tensor to calculate output shape, so the\n// content in shape tensor is never uploaded to GPU. It is always kept in CPU.\n// TODO: optimize the algorithm -- in some cases, if the last two dims are\n// the same between input shape and output shape, the packed reshape can be\n// treated as no-op.\nexport function isReshapeCheap(dims: readonly number[], reshapedDims: readonly number[]) {\n  let isCheapReshape = false;\n  if (dims.length === 0 || reshapedDims.length === 0) {  // scalar\n    isCheapReshape = true;\n  } else if (dims.length < 2 || reshapedDims.length < 2) {  // 1D\n    isCheapReshape = dims[dims.length - 1] === reshapedDims[reshapedDims.length - 1];\n  } else {  // 2D +\n    isCheapReshape = dims[dims.length - 1] === reshapedDims[reshapedDims.length - 1] &&\n        dims[dims.length - 2] === reshapedDims[reshapedDims.length - 2];\n  }\n\n  return isCheapReshape;\n}\n\nfunction getReshapedInputCoords(shape: [number, number, number]): string {\n  const strides = ShapeUtil.computeStrides(shape);\n  const coords = ['b', 'r', 'c'];\n  const index = 'index';\n  const coordsFromIndexSnippet = strides\n                                     .map((stride, i) => {\n                                       const line1 = `int ${coords[i]} = ${index} / ${stride}`;\n                                       const line2 = i === strides.length - 1 ?\n                                           `int ${coords[i + 1]} = ${index} - ${coords[i]} * ${stride}` :\n                                           `index -= ${coords[i]} * ${stride}`;\n                                       return `${line1}; ${line2};`;\n                                     })\n                                     .join('');\n\n  return `\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${coordsFromIndexSnippet}\n      return ivec3(b, r, c);\n    }\n  `;\n}\n\nfunction getFlattenedIndexFrom3D(shape: [number, number, number]): string {\n  const strides = ShapeUtil.computeStrides(shape);\n\n  return `\n  int getFlattenedIndex(ivec3 coords) {\n    // reverse y, z order\n    return coords.x * ${strides[0]} + coords.z * ${strides[1]} + coords.y;\n  }\n`;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const reshape = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  const reshapedDims = ShapeUtil.calculateReshapedDims(inputs[0].dims, inputs[1].integerData);\n  if (handler.session.pack) {\n    return [handler.reshapePacked(inputs[0], reshapedDims)];\n  } else {\n    return [handler.reshapeUnpacked(inputs[0], reshapedDims)];\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\nimport {getCoordsDataType} from '../utils';\n\nimport {unpackFromChannel} from './packing-utils';\nimport {parseUpsampleAttributes, scalesValidation, UpsampleAttributes, validateInputs} from './upsample';\n\nconst resizeProgramMetadata = {\n  name: 'Resize',\n  inputNames: ['A'],\n  inputTypes: [TextureType.packed]\n};\n\nexport const resize: OperatorImplementation<UpsampleAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);\n      const output = inferenceHandler.run(\n          {\n            ...resizeProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createPackedResizeProgramInfo(inferenceHandler, inputs, attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseResizeAttributesV10: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 10);\n\nexport const parseResizeAttributesV11: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 11);\n\nconst createPackedResizeProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const [scales, outputShape] = prepareInputs(inputs, attributes);\n\n      const isSame =\n          scales.every((s: number) => s === 1) && attributes.coordinateTransformMode !== 'tf_crop_and_resize';\n      if (isSame) {\n        return {\n          ...resizeProgramMetadata,\n          output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n          hasMain: true,\n          shaderSource: `void main() {\n                    vec4 v = ${glsl.texture2D}(X, TexCoords);\n                    ${glsl.output} = v;\n                }`\n        };\n      }\n\n      const dim = outputShape.length;\n      if (dim < 2) {\n        throw new Error(`output dimension should be at least 2, but got ${dim}`);\n      }\n\n      const outputHeight = outputShape[dim - 2];\n      const outputWidth = outputShape[dim - 1];\n\n      const inputShape = inputs[0].dims;\n      if (dim !== inputShape.length) {\n        throw new Error(`output dimension should match input ${inputShape.length}, but got ${dim}`);\n      }\n      const inputHeight = inputShape[dim - 2];\n      const inputWidth = inputShape[dim - 1];\n\n      const scalesHeight = scales[dim - 2];\n      const scalesWidth = scales[dim - 1];\n\n      let getSourceFracIndex = '';\n\n      if (attributes.mode !== 'linear') {\n        // TODO: support other modes\n        throw new Error(`resize (packed) does not support mode: '${attributes.mode}'`);\n      }\n      switch (attributes.coordinateTransformMode) {\n        case 'asymmetric':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        return vec4(coords) / scaleWHWH;\n                    }\n                `;\n          break;\n        case 'half_pixel':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        return (vec4(coords) + 0.5) / scaleWHWH - 0.5;\n                    }\n                `;\n          break;\n        case 'pytorch_half_pixel':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        vec4 fcoords = vec4(coords);\n                        return vec4(\n                            ${outputWidth}.0 > 1.0 ? (fcoords.x + 0.5) / scaleWHWH.x - 0.5 : 0.0,\n                            ${outputHeight}.0 > 1.0 ? (fcoords.y + 0.5) / scaleWHWH.y - 0.5 : 0.0,\n                            ${outputWidth}.0 > 1.0 ? (fcoords.z + 0.5) / scaleWHWH.z - 0.5 : 0.0,\n                            ${outputHeight}.0 > 1.0 ? (fcoords.w + 0.5) / scaleWHWH.w - 0.5 : 0.0\n                          );\n                    }\n                `;\n          break;\n        case 'align_corners':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        vec4 resized = vec4(${outputWidth}.0 - 1.0, ${outputHeight}.0 - 1.0, ${outputWidth}.0 - 1.0,\n                            ${outputHeight}.0 - 1.0);\n                        vec4 original = vec4(${inputWidth}.0 - 1.0, ${inputHeight}.0 - 1.0, ${inputWidth}.0 - 1.0,\n                            ${inputHeight}.0 - 1.0);\n                        vec4 new_scale = original / resized;\n                        return vec4(coords) * new_scale;\n                    }\n                `;\n          break;\n        default:\n          // TODO:supporting other coordinateTransformModes\n          throw new Error(`resize (packed) does not support coordinateTransformMode: \\\n                                '${attributes.coordinateTransformMode}'`);\n      }\n\n      const coordsDataType = getCoordsDataType(dim);\n      const unpackChannel = unpackFromChannel();\n      const shaderSource = `\n            const vec2 inputWH = vec2(${inputHeight}.0, ${inputWidth}.0);\n            const vec4 scaleWHWH = vec4(float(${scalesHeight}), float(${scalesWidth}), float(${scalesHeight}), float(${\n          scalesWidth}));\n            ${unpackChannel}\n            ${getSourceFracIndex}\n            float getAValue(int x10, int r, int c, int d) {\n                return getChannel(getA(x10, r, c, d), vec2(c, d));\n            }\n            void main() {\n                ${coordsDataType} rc = getOutputCoords();\n\n                int batch = rc[0];\n                int depth = rc[1];\n\n                // retrieve the 4 coordinates that is used in the 4 packed output values.\n                ivec4 coords = ivec4(rc.wz, rc.w + 1, rc.z + 1);\n\n                // calculate the source index in fraction\n                vec4 sourceFrac = getSourceFracIndex(coords);\n\n                // get the lower and upper bound of the 4 values that will be packed into one texel.\n                ivec4 x00 = ivec4(max(sourceFrac.xy, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.xy)));\n                ivec4 x01 = ivec4(max(sourceFrac.xw, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.xw)));\n                ivec4 x10 = ivec4(max(sourceFrac.zy, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.zy)));\n                ivec4 x11 = ivec4(max(sourceFrac.zw, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.zw)));\n\n                bool hasNextRow = rc.w < ${outputHeight - 1};\n                bool hasNextCol = rc.z < ${outputWidth - 1};\n\n                // pack x00, x01, x10, x11's top-left corner into one vec4 structure\n                vec4 topLeft = vec4(\n                    getAValue(batch, depth, x00.x, x00.y),\n                    hasNextCol ? getAValue(batch, depth, x01.x, x01.y) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.x, x10.y) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.x, x11.y) : 0.0);\n\n                // pack x00, x01, x10, x11's top-right corner into one vec4 structure\n                vec4 topRight = vec4(\n                    getAValue(batch, depth, x00.x, x00.w),\n                    hasNextCol ? getAValue(batch, depth, x01.x, x01.w) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.x, x10.w) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.x, x11.w) : 0.0);\n\n                // pack x00, x01, x10, x11's bottom-left corner into one vec4 structure\n                vec4 bottomLeft = vec4(\n                    getAValue(batch, depth, x00.z, x00.y),\n                    hasNextCol ? getAValue(batch, depth, x01.z, x01.y) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.z, x10.y) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.z, x11.y) : 0.0);\n\n                // pack x00, x01, x10, x11's bottom-right corner into one vec4 structure\n                vec4 bottomRight = vec4(\n                    getAValue(batch, depth, x00.z, x00.w),\n                    hasNextCol ? getAValue(batch, depth, x01.z, x01.w) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.z, x10.w) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.z, x11.w) : 0.0);\n\n                // calculate the interpolation fraction on u and v direction\n                vec4 frac = vec4(sourceFrac) - floor(sourceFrac);\n                vec4 clampFrac = clamp(frac, vec4(0.0), vec4(1.0));\n\n                vec4 top = mix(topLeft, topRight, clampFrac.ywyw);\n                vec4 bottom = mix(bottomLeft, bottomRight, clampFrac.ywyw);\n                vec4 newValue = mix(top, bottom, clampFrac.xxzz);\n\n                ${glsl.output} = vec4(newValue);\n            }\n        `;\n      return {\n        ...resizeProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n        hasMain: true,\n        shaderSource\n      };\n    };\n\n\nconst prepareInputs = (inputs: Tensor[], attributes: UpsampleAttributes): [readonly number[], readonly number[]] => {\n  const x = inputs[0];\n  const xDims = x.dims;\n\n  let scales = attributes.scales;\n  let outputSizes: number[]|undefined;\n  if (scales.length === 0) {\n    const scalesTensor = inputs[attributes.scalesInputIdx];\n    if (scalesTensor && scalesTensor.size !== 0) {\n      if (inputs[attributes.sizesInputIdx]) {\n        throw new Error('Only one of scales or sizes must be provided as input.');\n      }\n      scales = parseScalesData(scalesTensor, attributes.mode, attributes.isResize);\n    } else {\n      const sizesTensor = inputs[attributes.sizesInputIdx];\n      if (!sizesTensor || sizesTensor.size === 0) {\n        throw new Error('Either scales or sizes MUST be provided as input.');\n      }\n\n      outputSizes = Array.from(sizesTensor.integerData);\n      scales = parseScalesDataFromOutputSize(outputSizes, xDims, attributes.mode, attributes.isResize);\n    }\n  } else {\n    if (inputs[attributes.sizesInputIdx]) {\n      throw new Error('Only one of scales or sizes must be provided as input.');\n    }\n  }\n\n  const yDims = outputSizes || (xDims.map((dim, i) => Math.floor(dim * scales[i])));\n\n  return [scales, yDims];\n};\n\nconst parseScalesData = (scale: Tensor, mode: string, isResize: boolean): number[] => {\n  const scales = Array.from(scale.floatData);\n  scalesValidation(scales, mode, isResize);\n  return scales;\n};\n\nconst parseScalesDataFromOutputSize =\n    (yDims: readonly number[], xDims: readonly number[], mode: string, isResize: boolean): number[] => {\n      const length = xDims.length;\n      const scales = new Array<number>(length);\n\n      for (let i = 0, end = length; i < end; i++) {\n        if (xDims[i] === 0) {\n          if (yDims[i] !== 0) {\n            throw new Error('Input dim is zero but required output dim is non-zero.');\n          }\n          scales[i] = 1;\n        } else {\n          scales[i] = yDims[i] / xDims[i];\n        }\n      }\n      scalesValidation(scales, mode, isResize);\n      return scales;\n    };\n\n// roi data is not used yet. but leave here for future usage.\n// const getRoi = (inputs: Tensor[], attributes: UpsampleAttributes) : number[] => {\n//     let roi: number[] = [];\n//     if (attributes.needRoiInput) {\n//         if (attributes.roiInputIdx <= 0) {\n//             throw new Error('Invalid roi input index.');\n//         }\n//         const roiTensor = inputs[attributes.roiInputIdx];\n//         roi = roiTensor.size > 0 ? Array.from(roiTensor.floatData) : [];\n//     } else {\n//         roi = new Array(inputs[0].dims.length * 2).fill(0);\n//     }\n//     return roi;\n// };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const shape = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n  return [new Tensor([inputs[0].dims.length], 'int32', undefined, undefined, new Int32Array(inputs[0].dims))];\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Shape requires 1 input.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface SliceAttributes extends AttributeWithCacheKey {\n  readonly axes: number[];\n  readonly ends: number[];\n  readonly starts: number[];\n}\n\nconst sliceProgramMetadata = {\n  name: 'Slice',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked]\n};\n\nexport const slice: OperatorImplementation<SliceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SliceAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...sliceProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createSliceProgramInfo(inferenceHandler, inputs[0], attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseSliceAttributes: OperatorInitialization<SliceAttributes> = (node: Graph.Node): SliceAttributes => {\n  const starts = node.attributes.getInts('starts');\n  const ends = node.attributes.getInts('ends');\n  const axes = node.attributes.getInts('axes', []);\n  return createAttributeWithCacheKey({starts, ends, axes});\n};\n\nconst createSliceProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: SliceAttributes): ProgramInfo => {\n      const axes = (attributes.axes.length === 0) ? input.dims.slice(0).map((val, i) => i) : attributes.axes;\n      const normalizedAxes = ShapeUtil.normalizeAxes(axes, input.dims.length);\n      const starts = attributes.starts.map((start, i) => {\n        if (start > input.dims[normalizedAxes[i]] - 1) {\n          return input.dims[normalizedAxes[i]];\n        }\n        return ShapeUtil.normalizeAxis(start, input.dims[normalizedAxes[i]]);\n      });\n      const ends = attributes.ends.map((end, i) => {\n        if (end > input.dims[normalizedAxes[i]] - 1) {\n          return input.dims[normalizedAxes[i]];\n        }\n        return ShapeUtil.normalizeAxis(end, input.dims[normalizedAxes[i]]);\n      });\n\n      const outputShape = input.dims.slice();\n\n      const sliceOps: string[] = [];\n      for (let i = 0; i < normalizedAxes.length; i++) {\n        outputShape[normalizedAxes[i]] = ends[i] - starts[i];\n        if (starts[i] > 0) {\n          sliceOps.push(`outputIdx[${normalizedAxes[i]}] += ${starts[i]};`);\n        }  // else { sliceOps.push(`outputIdx[${normalizedAxes[i]}] += 0;`); }\n      }\n\n      const rank = outputShape.length;\n      const shaderSource = `\n      float process(int outputIdx[${rank}]) {\n        ${sliceOps.join('\\n      ')}\n        return _A(outputIdx);\n      }`;\n      return {\n        ...sliceProgramMetadata,\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Slice requires 1 input.');\n  }\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invalid input type.');\n  }\n};\n\nexport const sliceV10 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputsV10(inputs);\n  const attributes = generateSliceAttributesFromInputs(inferenceHandler, inputs);\n  const output = inferenceHandler.run(\n      {\n        ...sliceProgramMetadata,\n        cacheHint: attributes.cacheKey,\n        get: () => createSliceProgramInfo(inferenceHandler, inputs[0], attributes)\n      },\n      [inputs[0]]);\n  return [output];\n};\n\nconst generateSliceAttributesFromInputs =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): SliceAttributes => {\n      if (!inferenceHandler.session.isInitializer(inputs[1].dataId) ||\n          !inferenceHandler.session.isInitializer(inputs[2].dataId) ||\n          (inputs.length >= 4 && !inferenceHandler.session.isInitializer(inputs[3].dataId)) ||\n          (inputs.length >= 5 && !inferenceHandler.session.isInitializer(inputs[4].dataId))) {\n        throw new Error('dynamic slice attributes are not allowed');\n      }\n\n      if (inputs.length >= 5 && inputs[4].integerData.some((i: number) => i !== 1)) {\n        throw new Error('currently non-1 steps is not supported for Slice');\n      }\n\n      const starts = Array.from(inputs[1].integerData);\n      const ends = Array.from(inputs[2].integerData);\n      const axes = inputs.length >= 4 ? Array.from(inputs[3].integerData) : [];\n      const cacheKey = `${axes};${starts};${ends}`;\n      return {starts, ends, axes, cacheKey};\n    };\n\nconst validateInputsV10 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length < 3 || inputs.length > 5) {\n    throw new Error('Invalid input number.');\n  }\n  if (inputs[1].type !== 'int32' || inputs[1].dims.length !== 1) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs[2].type !== 'int32' || inputs[2].dims.length !== 1) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs.length >= 4 && (inputs[3].type !== 'int32' || inputs[3].dims.length !== 1)) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs.length >= 5 && (inputs[4].type !== 'int32' || inputs[4].dims.length !== 1)) {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nimport {transpose, TransposeAttributes} from './transpose';\n\nexport interface SoftmaxAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n}\n\nconst softmaxComputeMaxProgramMetadata = {\n  name: 'SoftmaxComputeMax',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked],\n};\n\nconst softmaxComputeScaleProgramMetadata = {\n  name: 'SoftmaxComputeScale',\n  inputNames: ['A', 'Max'],\n  inputTypes: [TextureType.unpacked, TextureType.unpacked],\n};\n\nconst softmaxProgramMetadata = {\n  name: 'SoftMax',\n  inputNames: ['A', 'Max', 'Norm'],\n  inputTypes: [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked],\n};\n\nexport const softmax: OperatorImplementation<SoftmaxAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      const inputShape = inputs[0].dims.slice();\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputShape.length);\n      const logicalRowCount = ShapeUtil.sizeToDimension(inputShape, axis);\n      const featureCount = ShapeUtil.sizeFromDimension(inputShape, axis);\n\n      const output = computeSoftmax(inferenceHandler, inputs, attributes, logicalRowCount, featureCount);\n      return output;\n    };\n\nexport const parseSoftmaxAttributes: OperatorInitialization<SoftmaxAttributes> =\n    (node: Graph.Node): SoftmaxAttributes => createAttributeWithCacheKey({axis: node.attributes.getInt('axis', 1)});\n\nexport const parseSoftmaxAttributesV13: OperatorInitialization<SoftmaxAttributes> =\n    (node: Graph.Node): SoftmaxAttributes => createAttributeWithCacheKey({axis: node.attributes.getInt('axis', -1)});\n\n// The \"semantic\" meaning of axis has changed in opset-13.\n// Please compare: https://github.com/onnx/onnx/blob/main/docs/Operators.md#Softmax\n// with https://github.com/onnx/onnx/blob/main/docs/Changelog.md#Softmax-11 for detailed explanations\n// To account for the opset-13 behavior, our plan will be to transpose the \"axis\" dim to the innermost dim\n// and perform softmax and then reverse the transpose. We can skip the transposing aspect if the axis is already\n// the innermost dim\nexport const softmaxV13: OperatorImplementation<SoftmaxAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      const inputShape = inputs[0].dims.slice();\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputShape.length);\n      const rank = inputShape.length;\n\n      const isTransposeRequired = (axis !== rank - 1) ? true : false;\n      const transposedInputShape: number[] = [];\n      let perm: number[] = [];\n      let transposedInputs: Tensor[] = [];\n      let transposeAttribute: TransposeAttributes;\n\n      if (isTransposeRequired) {\n        perm = Array.from({length: rank}).map((_, i) => i);\n\n        // swap the innermost dim with the dim corresponding to axis\n        perm[axis] = rank - 1;\n        perm[rank - 1] = axis;\n\n        perm.map(p => transposedInputShape.push(inputShape[p]));\n\n        transposeAttribute = createAttributeWithCacheKey({perm});\n        transposedInputs = transpose(inferenceHandler, inputs, transposeAttribute);\n      }\n\n      const logicalRowCount = isTransposeRequired ? ShapeUtil.sizeToDimension(transposedInputShape, rank - 1) :\n                                                    ShapeUtil.sizeToDimension(inputShape, rank - 1);\n      const featureCount = isTransposeRequired ? ShapeUtil.sizeFromDimension(transposedInputShape, rank - 1) :\n                                                 ShapeUtil.sizeFromDimension(inputShape, rank - 1);\n\n      const output = computeSoftmax(\n          inferenceHandler, isTransposeRequired ? transposedInputs : inputs, attributes, logicalRowCount, featureCount);\n\n      if (isTransposeRequired) {\n        const reversedOutput = transpose(inferenceHandler, output, transposeAttribute!);\n        return reversedOutput;\n      } else {\n        return output;\n      }\n    };\n\nconst computeSoftmax =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes, logicalRowCount: number,\n     featureCount: number): Tensor[] => {\n      const computeMaxProgramInfo =\n          createComputeMaxProgramInfo(inferenceHandler, inputs[0], logicalRowCount, featureCount, [logicalRowCount]);\n      const max = inferenceHandler.run(\n          {...softmaxComputeMaxProgramMetadata, cacheHint: attributes.cacheKey, get: () => computeMaxProgramInfo},\n          inputs);\n\n      const computeScaleProgramInfo = createComputScaleProgramInfo(\n          inferenceHandler, inputs[0], logicalRowCount, featureCount, computeMaxProgramInfo.output.dims,\n          [logicalRowCount]);\n      const scale = inferenceHandler.run(\n          {...softmaxComputeScaleProgramMetadata, cacheHint: attributes.cacheKey, get: () => computeScaleProgramInfo},\n          [inputs[0], max]);\n\n      const softMaxProgramInfo = createSoftMaxProgramInfo(\n          inferenceHandler, inputs[0], logicalRowCount, featureCount, computeMaxProgramInfo.output.dims,\n          computeScaleProgramInfo.output.dims);\n      const output = inferenceHandler.run(\n          {...softmaxProgramMetadata, cacheHint: attributes.cacheKey, get: () => softMaxProgramInfo},\n          [inputs[0], max, scale]);\n      return [output];\n    };\n\n/**\n * Create a texture that contains the maximum value of each of the 'N' rows\n */\nconst createComputeMaxProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\n     outputShape: number[]): ProgramInfo => {\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n      const rank = outputShape.length;\n\n      if (logicalRowCount < 1 || featureCount < 1) {\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\n      }\n\n      if (outputShape.length !== 1) {\n        throw new Error('Dimensionality of the output should be 1');\n      }\n\n      if (outputShape[0] !== logicalRowCount) {\n        throw new Error('Shape of the output should be equal to logical row count');\n      }\n\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const shaderSource = `\n      float process(int[${rank}] indices) {\n        int logical_row_start_offset = indices[0] * ${featureCount};\n\n        float max = getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset, ${textureWidth},\n        ${textureHeight} )));\n        for(int i=1; i<${featureCount}; ++i)\n        {\n          float current = getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset + i,\n            ${textureWidth}, ${textureHeight})));\n          if(current > max)\n          max = current;\n        }\n\n        return max;\n      }`;\n      return {\n        ...softmaxComputeMaxProgramMetadata,\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\n/**\n * Create a texture that contains the normalization factor for each of the 'N' rows\n */\nconst createComputScaleProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\n     maxElementPerLogicalRow: readonly number[], outputShape: number[]): ProgramInfo => {\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n      const rank = outputShape.length;\n\n      if (logicalRowCount < 1 || featureCount < 1) {\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\n      }\n\n      if (outputShape.length !== 1) {\n        throw new Error('Dimensionality of the output should be 1');\n      }\n\n      if (outputShape[0] !== logicalRowCount) {\n        throw new Error('Shape of the output should be equal to logical row count');\n      }\n\n      if (maxElementPerLogicalRow.length !== 1) {\n        throw new Error('Dimensionality of the intermediate results should be 1');\n      }\n\n      if (maxElementPerLogicalRow[0] !== logicalRowCount) {\n        throw new Error('Shape of the intermediate results should be equal to logical row count');\n      }\n\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const shaderSource = `\n      float process(int[${rank}] indices) {\n        int logical_row_start_offset = indices[0] * ${featureCount};\n\n        float norm_factor = 0.0;\n        float max = _Max(indices);\n        for(int i=0; i<${featureCount}; ++i)\n        {\n          norm_factor += exp(getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset + i,\n            ${textureWidth}, ${textureHeight}))) - max);\n        }\n\n        return norm_factor;\n      }`;\n      return {\n        ...softmaxComputeScaleProgramMetadata,\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst createSoftMaxProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\n     maxElementPerLogicalRow: readonly number[], normalizationPerLogicalRow: readonly number[]): ProgramInfo => {\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n      const rank = input.dims.length;\n\n      if (logicalRowCount < 1 || featureCount < 1) {\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\n      }\n\n      if (maxElementPerLogicalRow.length !== 1 || normalizationPerLogicalRow.length !== 1) {\n        throw new Error('Dimensionality of the intermediate results should be 1');\n      }\n\n      if (maxElementPerLogicalRow[0] !== logicalRowCount || normalizationPerLogicalRow[0] !== logicalRowCount) {\n        throw new Error('Shape of the intermediate results should be equal to logical row count');\n      }\n\n      const shaderSource = `\n      float process(int[${rank}] indices) {\n\n      // get offset of current logical tensor index from the 2-D texture coordinates (TexCoords)\n      int offset = coordsToOffset(TexCoords, ${textureWidth}, ${textureHeight});\n\n      //determine the logical row for this index\n      int logical_row_index[1];\n      logical_row_index[0] = offset / ${featureCount};\n\n      float norm_factor = _Norm(logical_row_index);\n\n      // avoid possible division by 0\n      // if norm_facor is 0, all elements are zero\n      // if so, return 0\n      if(norm_factor == 0.0)\n        return 0.0;\n\n      return exp(_A(indices) - _Max(logical_row_index)) / norm_factor;\n    }`;\n      return {\n        ...softmaxProgramMetadata,\n        output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Softmax requires 1 input.');\n  }\n\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil, SplitUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface SplitAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n  readonly split: number[];\n  readonly numOutputs: number;\n}\n\nconst splitProgramMetadata = {\n  name: 'Split',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked],\n};\n\nexport const split: OperatorImplementation<SplitAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SplitAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputs[0].dims.length);\n      const count = getProgramCount(inferenceHandler, inputs, axis, attributes);\n      const output: Tensor[] = [];\n      for (let i = 0; i < count; ++i) {\n        output.push(inferenceHandler.run(\n            {\n              ...splitProgramMetadata,\n              cacheHint: `${attributes.cacheKey};${i}`,\n              get: () => createSplitProgramInfo(inferenceHandler, inputs[0], attributes, axis, i)\n            },\n            inputs));\n      }\n\n      return output;\n    };\n\nexport const parseSplitAttributes: OperatorInitialization<SplitAttributes> = (node: Graph.Node): SplitAttributes => {\n  const axis = node.attributes.getInt('axis', 0);\n  const split = node.attributes.getInts('split', []);\n  const numOutputs = node.outputs.length;\n  return createAttributeWithCacheKey({axis, split, numOutputs});\n};\n\nconst getProgramCount =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axis: number, attributes: SplitAttributes): number => {\n      const [, offsets] = SplitUtil.splitShape(inputs[0].dims, axis, attributes.split, attributes.numOutputs);\n      return offsets.length;\n    };\n\nconst createSplitProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: SplitAttributes, axis: number, index: number):\n        ProgramInfo => {\n          const [shapes, offsets] = SplitUtil.splitShape(input.dims, axis, attributes.split, attributes.numOutputs);\n          const offset = offsets[index];\n          const outputShape = shapes[index];\n          const rank = outputShape.length;\n          const shaderSource = `\n      float process(int indices[${rank}]) {\n        indices[${axis}] += ${offset};\n        return _A(indices);\n      }\n    `;\n          return {\n            ...splitProgramMetadata,\n            cacheHint: `${attributes.cacheKey}:${index}`,\n            output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Split requires one input.');\n  }\n\n  if (inputs[0].type !== 'int8' && inputs[0].type !== 'uint8' && inputs[0].type !== 'int16' &&\n      inputs[0].type !== 'uint16' && inputs[0].type !== 'int32' && inputs[0].type !== 'uint32' &&\n      inputs[0].type !== 'float32' && inputs[0].type !== 'float64' && inputs[0].type !== 'bool') {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const squeeze: OperatorImplementation<number[]> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axes: number[]): Tensor[] => {\n      validateInputs(inputs);\n      const outputShape = ShapeUtil.squeezeShape(inputs[0].dims, axes);\n      const output = inferenceHandler.reshapeUnpacked(inputs[0], outputShape);\n      return [output];\n    };\n\nexport const squeezeV13 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputsV13(inputs);\n  return squeeze(inferenceHandler, [inputs[0]], Array.from(inputs[1].integerData));\n};\n\nexport const parseSqueezeAttributes: OperatorInitialization<number[]> = (node: Graph.Node): number[] =>\n    node.attributes.getInts('axes');\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Squeeze requires 1 input.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('invalid input tensor types.');\n  }\n};\n\nconst validateInputsV13 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Squeeze requires 2 inputs.');\n  }\n\n  if (inputs[1].type !== 'int32') {\n    throw new Error('Invalid input type.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport const sum = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n\n  const sumProgramMetadata = {\n    name: 'Sum',\n    inputNames: inputs.map((v, i) => `X${i}`),\n    inputTypes: new Array(inputs.length).fill(TextureType.unpacked)\n  };\n\n  const output = inferenceHandler.run(\n      {...sumProgramMetadata, get: () => createSumProgramInfo(inferenceHandler, inputs, sumProgramMetadata)}, inputs);\n  return [output];\n};\n\nconst createSumProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], sumProgramMetadata: ProgramMetadata): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const outputShape = inputs[0].dims.slice();\n      const sumLine = inputs.map((v, i) => `${glsl.texture2D}(X${i},TexCoords)`).join(' + ');\n      const shaderSource = `\n      void main() {\n        vec4 result = ${sumLine};\n        ${glsl.output} = result;\n      }\n    `;\n      return {\n        ...sumProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        hasMain: true,\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length === 0) {\n    throw new Error('Sum requires inputs.');\n  }\n\n  const length = inputs[0].dims.length;\n  for (let i = 1; i < inputs.length; i++) {\n    if (length !== inputs[i].dims.length) {\n      throw new Error('Input shapes are mismatched.');\n    }\n\n    for (let j = 0; j < length; j++) {\n      if (inputs[0].dims[j] !== inputs[i].dims[j]) {\n        throw new Error('Input shapes are not matched.');\n      }\n    }\n  }\n\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n  for (let i = 1; i < inputs.length; i++) {\n    if (inputs[0].type !== inputs[i].type) {\n      throw new Error('Input types are not matched.');\n    }\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {NUMBER_TYPES} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport const tile = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n\n  const tileProgramMetadata = {\n    name: 'Tile',\n    inputNames: ['A'],\n    inputTypes: [TextureType.unpacked],\n  };\n\n  const output = inferenceHandler.run(\n      {...tileProgramMetadata, get: () => createTileProgramInfo(inferenceHandler, inputs, tileProgramMetadata)},\n      inputs);\n  return [output];\n};\n\nconst createTileProgramInfo =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], tileProgramMetadata: ProgramMetadata): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      const outputShape = new Array(inputShape.length);\n\n      const tileOps: string[] = [];\n      for (let i = 0; i < inputShape.length; i++) {\n        outputShape[i] = inputShape[i] * inputs[1].numberData[i];\n        tileOps.push(`inputIdx[${i}] = int(mod(float(outputIdx[${i}]), ${inputShape[i]}.));`);\n      }\n\n      const rank = outputShape.length;\n      const shaderSource = `\n      float process(int outputIdx[${rank}]) {\n        int inputIdx[${rank}];\n        ${tileOps.join('\\n')}\n        return _A(inputIdx);\n      }\n    `;\n      return {\n        ...tileProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Tile requires 2 input.');\n  }\n  if (inputs[1].dims.length !== 1) {\n    throw new Error('The second input shape must 1 dimension.');\n  }\n  if (inputs[1].dims[0] !== inputs[0].dims.length) {\n    throw new Error('Invalid input shape.');\n  }\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs[1].type !== 'int32' && inputs[1].type !== 'int16') {\n    throw new Error('Invalid repeat type.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface TransposeAttributes extends AttributeWithCacheKey {\n  readonly perm: number[];\n}\n\nconst transposeProgramMetadata = {\n  name: 'Transpose',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked]\n};\n\nexport const transpose: OperatorImplementation<TransposeAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: TransposeAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...transposeProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createTransposeProgramInfo(inferenceHandler, inputs[0], attributes.perm)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseTransposeAttributes: OperatorInitialization<TransposeAttributes> =\n    (node: Graph.Node): TransposeAttributes => createAttributeWithCacheKey({perm: node.attributes.getInts('perm', [])});\n\nconst createTransposeProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, perm: number[]): ProgramInfo => {\n      const inputShape = input.dims;\n      perm = getAdjustedPerm(inputShape, perm);\n      const unpackedOutputShape = getOutputShape(inputShape, perm);\n      const rank = inputShape.length;\n      // A dims=[${inputs[0].dims.toString()}]\n      // out Dims=[${unpackedOutputShape.toString()}]\n      // based on perm=[${perm.toString()}]\n      const shaderSource = `\n      ${getPermFunctionBody('perm', perm, rank)}\n      float process(int indices[${rank}]) {\n        int a[${rank}];\n        perm(a, indices);\n        return _A(a);\n      }`;\n      return {\n        ...transposeProgramMetadata,\n        output: {dims: unpackedOutputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst getAdjustedPerm = (inputShape: readonly number[], perm: number[]): number[] => {\n  if (perm && perm.length !== inputShape.length) {\n    perm = [...(inputShape.keys())].reverse();\n  }\n  return perm;\n};\n\nconst getOutputShape = (inputShape: readonly number[], perm: number[]): readonly number[] => {\n  perm = getAdjustedPerm(inputShape, perm);\n  return ShapeUtil.sortBasedOnPerm(inputShape, perm);\n};\n\nconst getPermFunctionBody = (name: string, perm: number[], rank: number): string => {\n  const reverseFunc = [];\n  reverseFunc.push(`void ${name}(out int a[${rank}], int src[${rank}]) {`);\n  for (let i = 0; i < rank; ++i) {\n    reverseFunc.push(`\\ta[${perm[i]}]=src[${i}];`);\n  }\n  reverseFunc.push('\\t}');\n  return reverseFunc.join('\\n');\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Transpose requires 1 input.');\n  }\n\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('input should be float tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {TextureData, TextureType} from '../types';\n\nexport const encodeAsUint8 = (inferenceHandler: WebGLInferenceHandler, input: TextureData): TextureData => {\n  const outputShape = input.shape;\n  const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n  /**\n   * https://github.com/tensorflow/tfjs-core/blob/master/src/kernels/webgl/encode_float_gpu.ts\n   */\n  const shaderSource = `\n    const float FLOAT_MAX = 1.70141184e38;\n    const float FLOAT_MIN = 1.17549435e-38;\n\n    bool isNaN(float val) {\n      return (val < 1.0 || 0.0 < val || val == 0.0) ? false : true;\n    }\n\n    highp vec4 encodeAsUint8(highp float v) {\n      if (isNaN(v)) {\n        return vec4(255, 255, 255, 255);\n      }\n\n      highp float av = abs(v);\n\n      if(av < FLOAT_MIN) {\n        return vec4(0.0, 0.0, 0.0, 0.0);\n      } else if(v > FLOAT_MAX) {\n        return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n      } else if(v < -FLOAT_MAX) {\n        return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n      }\n\n      highp vec4 c = vec4(0,0,0,0);\n\n      highp float e = floor(log2(av));\n      highp float m = exp2(fract(log2(av))) - 1.0;\n\n      c[2] = floor(128.0 * m);\n      m -= c[2] / 128.0;\n      c[1] = floor(32768.0 * m);\n      m -= c[1] / 32768.0;\n      c[0] = floor(8388608.0 * m);\n\n      highp float ebias = e + 127.0;\n      c[3] = floor(ebias / 2.0);\n      ebias -= c[3] * 2.0;\n      c[2] += floor(ebias) * 128.0;\n\n      c[3] += 128.0 * step(0.0, -v);\n\n      return c / 255.0;\n    }\n\n    void main() {\n      float value = ${glsl.texture2D}(X,TexCoords).r;\n      ${glsl.output} = encodeAsUint8(value);\n    }`;\n  const programInfo = {\n    name: 'Uint8Encode',\n    inputTypes: [TextureType.unpacked],\n    inputNames: ['X'],\n    output: {dims: outputShape, type: input.tensor.type, textureType: TextureType.downloadUint8AsFloat},\n    shaderSource,\n    hasMain: true\n  };\n  return inferenceHandler.executeProgram(programInfo, [input.tensor]);\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {Tensor} from '../../../tensor';\nimport {MAX_CLIP, MIN_CLIP} from '../../../util';\nimport {FunctionType, GlslValueFunction} from '../glsl-definitions';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport function glslAbs(): GlslValueFunction {\n  return glslBuiltinUnary('abs');\n}\nexport function glslAcos(): GlslValueFunction {\n  return glslBuiltinUnary('acos');\n}\nexport function glslAsin(): GlslValueFunction {\n  return glslBuiltinUnary('asin');\n}\nexport function glslAtan(): GlslValueFunction {\n  return glslBuiltinUnary('atan');\n}\nexport function glslCeil(): GlslValueFunction {\n  return glslBuiltinUnary('ceil');\n}\nexport function glslCos(): GlslValueFunction {\n  return glslBuiltinUnary('cos');\n}\nexport function glslElu(alpha: number): GlslValueFunction {\n  const name = 'elu';\n  const body = `\n  const float alpha = float(${alpha});\n\n  float ${name}_(float a) {\n    return a >= 0.0 ? a: (exp(a) - 1.0) * alpha;\n  }\n  vec4 ${name}_(vec4 v) {\n    return vec4(${name}_(v.x), ${name}_(v.y), ${name}_(v.z), ${name}_(v.w));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslExp(): GlslValueFunction {\n  return glslBuiltinUnary('exp');\n}\nexport function glslFloor(): GlslValueFunction {\n  return glslBuiltinUnary('floor');\n}\nexport function glslClip(min: number, max: number): GlslValueFunction {\n  const name = 'clip';\n  const body = `\n  const float min = float(${min});\n  const float max = float(${max});\n\n  float ${name}_(float a) {\n    return clamp(a, min, max);\n  }\n  vec4 ${name}_(vec4 v) {\n    return clamp(v, min, max);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslIdentity(): GlslValueFunction {\n  const name = 'indentity';\n  const body = `\n  float ${name}_(float a) {\n    return a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return v;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslLeakyRelu(alpha: number): GlslValueFunction {\n  const name = 'leakyRelu';\n  const body = `\n  const float alpha = float(${alpha});\n\n  float ${name}_(float a) {\n    return a < 0.0 ? a * alpha : a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return vec4(${name}_(v.x), ${name}_(v.y), ${name}_(v.z), ${name}_(v.w));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslLog(): GlslValueFunction {\n  return glslBuiltinUnary('log');\n}\nexport function glslNeg(): GlslValueFunction {\n  const name = 'neg';\n  const body = `\n  float ${name}_(float a) {\n    return -a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return -v;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslNot(): GlslValueFunction {\n  const name = 'not';\n  const body = `\n  float ${name}_(float a) {\n    return float( ! bool(a) );\n  }\n  bool ${name}_(bool a) {\n    return !a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return vec4(!bool(v.x), !bool(v.y), !bool(v.z), !bool(v.w));\n  }\n  bvec4 ${name}_(bvec4 v) {\n    return bvec4(!v.x, !v.y, !v.z, !v.w);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSin(): GlslValueFunction {\n  return glslBuiltinUnary('sin');\n}\nexport function glslRelu(): GlslValueFunction {\n  const name = 'relu';\n  const body = `\n  float ${name}_(float a) {\n    return max( a, 0.0 );\n  }\n  vec4 ${name}_(vec4 v) {\n    return max( v, 0.0 );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSigmoid(): GlslValueFunction {\n  const name = 'sigmoid';\n  const body = `\n  float ${name}_(float a) {\n    return 1.0 / (1.0 + exp(-a));\n  }\n  vec4 ${name}_(vec4 v) {\n    return 1.0 / (1.0 + exp(-v));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSqrt(): GlslValueFunction {\n  return glslBuiltinUnary('sqrt');\n}\nexport function glslTan(): GlslValueFunction {\n  return glslBuiltinUnary('tan');\n}\nexport function glslTanh(): GlslValueFunction {\n  const name = 'tanh';\n  const body = `\n  float ${name}_(float a) {\n    a = clamp(a, -10., 10.);\n    a = exp(2.*a);\n    return (a - 1.) / (a + 1.);\n  }\n  vec4 ${name}_(vec4 v) {\n    v = clamp(v, -10., 10.);\n    v = exp(2.*v);\n    return (v - 1.) / (v + 1.);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nfunction glslBuiltinUnary(name: string): GlslValueFunction {\n  const body = `\n  float ${name}_(float a) {\n    return ${name}(a);\n  }\n  vec4 ${name}_(vec4 v) {\n    return ${name}(v);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\n\n/////\n/////\n/////\n\nconst createElementwiseProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, input: Tensor, glslFunc: GlslValueFunction):\n        ProgramInfo => {\n          const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n          const glsl = getGlsl(handler.session.backend.glContext.version);\n          return {\n            ...metadata,\n            output: {dims: input.dims, type: input.type, textureType},\n            shaderSource: `\n     ${glslFunc.body}\n     void main() {\n       vec4 v = ${glsl.texture2D}(A, TexCoords);\n       v = ${glslFunc.name}_(v);\n       ${glsl.output} = v;\n     }\n     `,\n            hasMain: true\n          };\n        };\n\nconst createElementwiseProgramInfoLoader =\n    (handler: WebGLInferenceHandler, input: Tensor, glslFunc: GlslValueFunction, cacheKey?: string):\n        ProgramInfoLoader => {\n          const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n          const metadata = {name: glslFunc.name, inputTypes: [textureType], inputNames: ['A'], cacheHint: cacheKey};\n          return {...metadata, get: () => createElementwiseProgramInfo(handler, metadata, input, glslFunc)};\n        };\n\nexport const abs = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAbs()), inputs)];\n\nexport const acos = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAcos()), inputs)];\n\nexport const asin = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAsin()), inputs)];\n\nexport const atan = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAtan()), inputs)];\n\nexport interface ClipAttributes extends AttributeWithCacheKey {\n  readonly min: number;\n  readonly max: number;\n}\n\nexport const clip =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ClipAttributes): Tensor[] => [handler.run(\n        createElementwiseProgramInfoLoader(\n            handler, inputs[0], glslClip(attributes.min, attributes.max), attributes.cacheKey),\n        inputs)];\n\nexport const parseClipAttributes = (node: Graph.Node): ClipAttributes => createAttributeWithCacheKey(\n    {min: node.attributes.getFloat('min', MIN_CLIP), max: node.attributes.getFloat('max', MAX_CLIP)});\n\nexport const clipV11 = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  const attributes = generateClipAttributesFromInputs(handler, inputs);\n  return clip(handler, [inputs[0]], attributes);\n};\n\nconst generateClipAttributesFromInputs = (handler: WebGLInferenceHandler, inputs: Tensor[]): ClipAttributes => {\n  if (inputs.length >= 3 &&\n      (!handler.session.isInitializer(inputs[1].dataId) || !handler.session.isInitializer(inputs[2].dataId))) {\n    throw new Error('dynamic clip attributes are not allowed');\n  }\n\n  const min = (inputs.length >= 3) ? inputs[1].numberData[0] : MIN_CLIP;\n  const max = (inputs.length >= 3) ? inputs[2].numberData[0] : MAX_CLIP;\n  return createAttributeWithCacheKey({min, max});\n};\n\nexport const ceil = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslCeil()), inputs)];\n\nexport const cos = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslCos()), inputs)];\n\nexport interface EluAttributes extends AttributeWithCacheKey {\n  readonly alpha: number;\n}\n\nexport const elu =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: EluAttributes): Tensor[] => [handler.run(\n        createElementwiseProgramInfoLoader(handler, inputs[0], glslElu(attributes.alpha), attributes.cacheKey),\n        inputs)];\n\nexport const parseEluAttributes = (node: Graph.Node): EluAttributes =>\n    createAttributeWithCacheKey({alpha: node.attributes.getFloat('alpha', 1.0)});\n\nexport const exp = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslExp()), inputs)];\n\nexport const floor = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslFloor()), inputs)];\n\nexport const identity = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslIdentity()), inputs)];\n\nexport interface LeakyReluAttributes extends AttributeWithCacheKey {\n  readonly alpha: number;\n}\n\nexport const leakyRelu =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: LeakyReluAttributes): Tensor[] => [handler.run(\n        createElementwiseProgramInfoLoader(handler, inputs[0], glslLeakyRelu(attributes.alpha), attributes.cacheKey),\n        inputs)];\n\nexport const parseLeakyReluAttributes = (node: Graph.Node): LeakyReluAttributes =>\n    createAttributeWithCacheKey({alpha: node.attributes.getFloat('alpha', 0.01)});\n\nexport const log = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslLog()), inputs)];\n\nexport const neg = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslNeg()), inputs)];\n\nexport const not = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslNot()), inputs)];\n\nexport const relu = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslRelu()), inputs)];\n\nexport const sigmoid = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSigmoid()), inputs)];\n\nexport const sin = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSin()), inputs)];\n\nexport const sqrt = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSqrt()), inputs)];\n\nexport const tan = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslTan()), inputs)];\n\nexport const tanh = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslTanh()), inputs)];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\nimport {getCoordsDataType} from '../utils';\n\nimport {getChannels, unpackFromChannel} from './packing-utils';\n\nconst unpackProgramMetadata = {\n  name: 'unpack',\n  inputNames: ['A'],\n  inputTypes: [TextureType.packed]\n};\n\nexport const createUnpackProgramInfo = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfo => {\n  const rank = input.dims.length;\n\n  const channels = getChannels('rc', rank);\n  const innerDims = channels.slice(-2);\n  const coordsDataType = getCoordsDataType(rank);\n  const unpackChannel = unpackFromChannel();\n  const isScalar = (input.dims.length === 0);\n  const sourceCoords = isScalar ? '' : getSourceCoords(rank, channels);\n  const coords = rank <= 1 ? 'rc' : `vec2(${innerDims.join(',')})`;\n  const glsl = getGlsl(handler.session.backend.glContext.version);\n  const shaderSource = `\n    ${unpackChannel}\n    void main() {\n      ${coordsDataType} rc = getOutputCoords();\n\n       // Sample the texture with the coords to get the rgba channel value.\n       vec4 packedInput = getA(${sourceCoords});\n\n       ${glsl.output} = vec4(getChannel(packedInput, ${coords}), 0, 0, 0);\n     }\n   `;\n\n  return {\n    ...unpackProgramMetadata,\n    hasMain: true,\n    output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\n    shaderSource\n  };\n};\n\nexport const createUnpackProgramInfoLoader = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfoLoader =>\n    ({...unpackProgramMetadata, get: () => createUnpackProgramInfo(handler, input)});\n\nfunction getSourceCoords(rank: number, dims: string[]): string {\n  if (rank === 1) {\n    return 'rc';\n  }\n\n  let coords = '';\n  for (let i = 0; i < rank; i++) {\n    coords += dims[i];\n    if (i < rank - 1) {\n      coords += ',';\n    }\n  }\n  return coords;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const unsqueeze: OperatorImplementation<number[]> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axes: number[]): Tensor[] => {\n      validateInputs(inputs);\n      const outputShape = ShapeUtil.unsqueezeShape(inputs[0].dims, axes);\n      const output = inferenceHandler.reshapeUnpacked(inputs[0], outputShape);\n      return [output];\n    };\n\nexport const unsqueezeV13 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputsV13(inputs);\n  return unsqueeze(inferenceHandler, [inputs[0]], Array.from(inputs[1].integerData));\n};\n\nexport const parseUnsqueezeAttributes: OperatorInitialization<number[]> = (node: Graph.Node): number[] =>\n    node.attributes.getInts('axes');\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Unsqueeze requires 1 input.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('invalid input tensor types.');\n  }\n};\n\nconst validateInputsV13 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Unsqueeze requires 2 inputs.');\n  }\n\n  if (inputs[1].type !== 'int32') {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface UpsampleAttributes extends AttributeWithCacheKey {\n  readonly opset: number;\n  readonly isResize: boolean;\n  readonly mode: string;\n  readonly scales: number[];\n  readonly extrapolationValue: number;\n  readonly coordinateTransformMode: string;\n  readonly useExtrapolation: boolean;\n  readonly needRoiInput: boolean;\n  readonly nearestMode: string;\n  readonly cubicCoefficientA: number;\n  readonly excludeOutside: boolean;\n  readonly useNearest2xOptimization: boolean;\n  readonly roiInputIdx: number;\n  readonly scalesInputIdx: number;\n  readonly sizesInputIdx: number;\n}\n\nconst upsampleProgramMetadata = {\n  name: 'Upsample',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n};\n\nexport const upsample: OperatorImplementation<UpsampleAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);\n      const output = inferenceHandler.run(\n          {\n            ...upsampleProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createUpsampleProgramInfo(inferenceHandler, inputs, attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseUpsampleAttributesV7: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 7);\n\nexport const parseUpsampleAttributesV9: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 9);\n\nexport const parseUpsampleAttributes = (node: Graph.Node, opset: number): UpsampleAttributes => {\n  const isResize = (opset >= 10);\n\n  // processing node attributes\n  const mode = node.attributes.getString('mode', 'nearest');\n  if (mode !== 'nearest' && mode !== 'linear' && (opset < 11 || mode !== 'cubic')) {\n    throw new Error(`unrecognized mode: ${mode}`);\n  }\n\n  let scales: number[] = [];\n  if (opset < 9) {\n    scales = node.attributes.getFloats('scales');\n    scalesValidation(scales, mode, isResize);\n  }\n\n  const extrapolationValue = node.attributes.getFloat('extrapolation_value', 0.0);\n\n  const coordinateTransformMode =\n      opset > 10 ? node.attributes.getString('coordinate_transformation_mode', 'half_pixel') : 'asymmetric';\n  if ([\n        'asymmetric', 'pytorch_half_pixel', 'tf_half_pixel_for_nn', 'align_corners', 'tf_crop_and_resize', 'half_pixel'\n      ].indexOf(coordinateTransformMode) === -1) {\n    throw new Error(`coordinate_transform_mode '${coordinateTransformMode}' is not supported`);\n  }\n  const needRoiInput = (coordinateTransformMode === 'tf_crop_and_resize');\n  const useExtrapolation = needRoiInput;\n\n  const nearestMode =\n      (mode === 'nearest' && opset >= 11) ? node.attributes.getString('nearest_mode', 'round_prefer_floor') : '';\n  if (['round_prefer_floor', 'round_prefer_ceil', 'floor', 'ceil', ''].indexOf(nearestMode) === -1) {\n    throw new Error(`nearest_mode '${nearestMode}' is not supported`);\n  }\n\n  const cubicCoefficientA = node.attributes.getFloat('cubic_coeff_a', -0.75);\n  const excludeOutside = node.attributes.getInt('exclude_outside', 0) !== 0;\n  if (excludeOutside && mode !== 'cubic') {\n    throw new Error('exclude_outside can be set to 1 only when mode is CUBIC.');\n  }\n\n  const useNearest2xOptimization =\n      (opset < 11) ? true : (mode === 'nearest' && coordinateTransformMode === 'asymmetric' && nearestMode === 'floor');\n\n  let roiInputIdx = 0;\n  let scalesInputIdx = 0;\n  let sizesInputIdx = 0;\n\n  if (opset > 10) {\n    // handle when roiInput is not given\n    if (node.inputs.length > 2) {\n      roiInputIdx = 1;\n      scalesInputIdx = 2;\n      sizesInputIdx = 3;\n    } else {\n      scalesInputIdx = 1;\n      sizesInputIdx = 2;\n    }\n  } else if (opset === 9) {\n    scalesInputIdx = 1;\n  }\n\n  return createAttributeWithCacheKey({\n    opset,\n    isResize,\n    mode,\n    scales,\n    extrapolationValue,\n    coordinateTransformMode,\n    useExtrapolation,\n    needRoiInput,\n    nearestMode,\n    cubicCoefficientA,\n    excludeOutside,\n    useNearest2xOptimization,\n    roiInputIdx,\n    scalesInputIdx,\n    sizesInputIdx\n  });\n};\n\nconst createUpsampleProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const [inputWidth, inputHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(inputs[0].dims, TextureType.unpacked);\n\n      const outputShape = inputs[0].dims.map((dim, i) => Math.floor(dim * attributes.scales[i]));\n      const [outputWidth, outputHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(outputShape, TextureType.unpacked);\n      const dim = outputShape.length;\n\n      const outputPitches = new Array<number>(dim);\n      const inputPitches = new Array<number>(dim);\n      let precalculatedPitches = `\n      int output_pitches[${dim}];\n      int input_pitches[${dim}];\n      `;\n      for (let d = dim - 1; d >= 0; d--) {\n        outputPitches[d] = (d === dim - 1) ? 1 : outputPitches[d + 1] * outputShape[d + 1];\n        inputPitches[d] = (d === dim - 1) ? 1 : inputPitches[d + 1] * inputs[0].dims[d + 1];\n\n        precalculatedPitches += `\n        output_pitches[${d}] = ${outputPitches[d]};\n        input_pitches[${d}] = ${inputPitches[d]};\n        `;\n      }\n      const getInputFloatFunction = `\n      float getInputFloat(int index) {\n        vec2 coords = offsetToCoords(index, ${inputWidth}, ${inputHeight});\n        float value = getColorAsFloat(${glsl.texture2D}(X, coords));\n        return value;\n      }\n      `;\n\n      const shaderSource = attributes.mode === 'nearest' ?\n          // nearest\n          `\n    ${getInputFloatFunction}\n    float process(int indices[${dim}]) {\n      int input_index = 0;\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\n\n      ${precalculatedPitches}\n\n      int d, m;\n      for (int dim = 0; dim < ${dim}; ++dim) {\n        d = output_index / output_pitches[dim];\n        m = output_index - d * output_pitches[dim];\n        output_index = m;\n\n        if (scales[dim] != 1 && d > 0) {\n          int d2 = d / scales[dim];\n          m = d - d2 * scales[dim];\n          d = d2;\n        }\n        input_index += input_pitches[dim] * d;\n      }\n\n      return getInputFloat(input_index);\n    }` :\n          dim === 4 ?\n          // bilinear 4D\n              `\n    ${getInputFloatFunction}\n    float process(int indices[4]) {\n      int input_index = 0;\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\n\n      ${precalculatedPitches}\n\n      int m;\n      int index_of_dim0, index_of_dim1, index_of_dim2, index_of_dim3;\n      index_of_dim0 = output_index / output_pitches[0];\n      m = output_index - index_of_dim0 * output_pitches[0];\n      index_of_dim1 = m / output_pitches[1];\n      m = m - index_of_dim1 * output_pitches[1];\n      index_of_dim2 = m / output_pitches[2];\n      m = m - index_of_dim2 * output_pitches[2];\n      index_of_dim3 = m;\n\n      int index_of_input_dim2, index_of_input_dim3, x_offset, y_offset;\n      index_of_input_dim2 = index_of_dim2 / scales[2];\n      y_offset = index_of_dim2 - index_of_input_dim2 * scales[2];\n      index_of_input_dim3 = index_of_dim3 / scales[3];\n      x_offset = index_of_dim3 - index_of_input_dim3 * scales[3];\n\n      input_index = index_of_dim0 * input_pitches[0] +\n            index_of_dim1 * input_pitches[1] +\n            index_of_input_dim2 * input_pitches[2] +\n            index_of_input_dim3;\n\n      float x00 = getInputFloat(input_index);\n      float x10, x01, x11;\n\n      bool end_of_dim2 = false;\n      if (index_of_input_dim2 == (${inputs[0].dims[2]} - 1)) {\n        // It's the end in dimension 2\n        x01 = x00;\n        end_of_dim2 = true;\n      } else {\n        x01 = getInputFloat(input_index + input_pitches[2]);\n      }\n\n      if (index_of_input_dim3 == (input_pitches[2] - 1)) {\n        // It's the end in dimension 3\n        x10 = x00;\n        x11 = x01;\n      }\n      else {\n        x10 = getInputFloat(input_index + 1);\n        x11 = end_of_dim2 ? x10 : getInputFloat(input_index + input_pitches[2] + 1);\n      }\n\n      float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[2]);\n      float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[2]);\n      return y0 + float(x_offset) * (y1 - y0) / float(scales[3]);\n    }` :\n              // bilinear 2D\n              `\n    ${getInputFloatFunction}\n    float process(int indices[2]) {\n      int input_index = 0;\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\n\n      ${precalculatedPitches}\n\n      int m;\n      int index_of_dim0, index_of_dim1;\n      index_of_dim0 = output_index / output_pitches[0];\n      m = output_index - index_of_dim0 * output_pitches[0];\n      index_of_dim1 = m;\n\n      int index_of_input_dim0, index_of_input_dim1, x_offset, y_offset;\n      index_of_input_dim0 = index_of_dim0 / scales[0];\n      y_offset = index_of_dim0 - index_of_input_dim0 * scales[0];\n      index_of_input_dim1 = index_of_dim1 / scales[1];\n      x_offset = index_of_dim1 - index_of_input_dim1 * scales[1];\n\n      input_index = index_of_input_dim0 * input_pitches[0] + index_of_input_dim1;\n\n      float x00 = getInputFloat(input_index);\n      float x10, x01, x11;\n\n      bool end_of_dim0 = false;\n      if (index_of_input_dim0 == (${inputs[0].dims[0]} - 1)) {\n        // It's the end in dimension 0\n        x01 = x00;\n        end_of_dim0 = true;\n      } else {\n        x01 = getInputFloat(input_index + input_pitches[0]);\n      }\n\n      if (index_of_input_dim1 == (input_pitches[0] - 1)) {\n        // It's the end in dimension 1\n        x10 = x00;\n        x11 = x01;\n      }\n      else {\n        x10 = getInputFloat(input_index + 1);\n        x11 = end_of_dim0 ? x10 : getInputFloat(input_index + input_pitches[0] + 1);\n      }\n\n      float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[0]);\n      float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[0]);\n      return y0 + float(x_offset) * (y1 - y0) / float(scales[1]);\n    }`;\n      return {\n        ...upsampleProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n        variables: [{\n          name: 'scales',\n          type: 'int',\n          arrayLength: attributes.scales.length,\n          data: attributes.scales.map(x => Math.ceil(x))\n        }]\n      };\n    };\n\nexport const validateInputs = (inputs: Tensor[], attribute: UpsampleAttributes): void => {\n  if (!inputs || (attribute.opset < 9 && inputs.length !== 1) ||\n      (attribute.opset >= 9 && attribute.opset < 11 && inputs.length !== 2) ||\n      (attribute.opset >= 11 && inputs.length < 2)) {\n    throw new Error('invalid inputs.');\n  }\n\n  if (attribute.scales.length > 0 && inputs[0].dims.length !== attribute.scales.length) {\n    throw new Error('Invalid input shape.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('Invalid input tensor types.');\n  }\n};\n\nexport const scalesValidation = (scales: number[], mode: string, isResize: boolean): void => {\n  if (!isResize) {\n    for (const scale of scales) {\n      if (scale < 1) {\n        throw new Error('Scale value should be greater than or equal to 1.');\n      }\n    }\n  } else {\n    for (const scale of scales) {\n      if (scale <= 0) {\n        throw new Error('Scale value should be greater than 0.');\n      }\n    }\n  }\n  if (mode === 'linear' || mode === 'cubic') {\n    if (scales.length !== 2 && (scales.length !== 4 || scales[0] !== 1 || scales[1] !== 1)) {\n      throw new Error(`'Linear' mode and 'Cubic' mode only support 2-D inputs ('Bilinear', 'Bicubic') \\\n        or 4-D inputs with the corresponding outermost 2 scale values being 1 \\\n        in the ${isResize ? 'Resize' : 'Upsample'} opeartor.`);\n    }\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\n\nimport {Logger, Profiler} from '../../instrument';\n\nimport {GlslPreprocessor} from './glsl-preprocessor';\nimport {getVertexShaderSource} from './glsl-source';\nimport {TextureLayoutStrategy} from './texture-layout-strategy';\nimport {Artifact, ProgramInfo, ProgramVariable, TextureData, TextureLayout, VariableInfo} from './types';\nimport {WebGLContext} from './webgl-context';\n\n/**\n * ProgramManager is the main class behind running computations\n * It builds ProgramInfo's into Artifacts\n * It compiles given ProgramInfo's into WebGL Prorams (cached as Artifacts)\n * Uses the artifact to run the computation by calling Draw on\n * the WebGL drawing buffer\n * ProgramManager automatically maps (binds) input variables to their\n * corresponding Location's in the binary program\n */\nexport class ProgramManager {\n  repo: Map<unknown, Artifact>;  // this should be per-session object\n  vertexShader: WebGLShader;\n  attributesBound: boolean;\n\n  constructor(\n      public profiler: Readonly<Profiler>, public glContext: WebGLContext,\n      public textureLayoutStrategy: TextureLayoutStrategy) {\n    this.repo = new Map();\n    this.attributesBound = false;\n  }\n  getArtifact(key: unknown): Artifact|undefined {\n    return this.repo.get(key);\n  }\n  setArtifact(key: unknown, artifact: Artifact): void {\n    this.repo.set(key, artifact);\n  }\n  run(buildArtifact: Artifact, inputs: TextureData[], output: TextureData): void {\n    this.profiler.event('op', `ProgramManager.run ${buildArtifact.programInfo.name ?? 'unknown kernel'}`, () => {\n      const gl = this.glContext.gl;\n      const program = buildArtifact.program;\n      gl.useProgram(program);\n      try {\n        this.bindOutput(output);\n        if (!this.attributesBound) {\n          this.bindAttributes(buildArtifact.attribLocations);\n        }\n        this.bindUniforms(buildArtifact.uniformLocations, buildArtifact.programInfo.variables ?? [], inputs);\n      } catch (err) {\n        Logger.error('ProgramManager', buildArtifact.programInfo.shaderSource);\n        throw err;\n      }\n      this.profiler.event('backend', 'GlContext.draw()', () => {\n        this.glContext.draw();\n      });\n    }, this.glContext);\n  }\n  dispose(): void {\n    if (this.vertexShader) {\n      this.glContext.deleteShader(this.vertexShader);\n    }\n    this.repo.forEach(a => this.glContext.deleteProgram(a.program));\n  }\n  build(programInfo: ProgramInfo, inputTextureLayouts: TextureLayout[], outputTextureLayout: TextureLayout): Artifact {\n    return this.profiler.event('backend', 'ProgramManager.build', () => {\n      const preprocessor = new GlslPreprocessor(this.glContext, programInfo, inputTextureLayouts, outputTextureLayout);\n      const fragScript = preprocessor.preprocess();\n      const program = this.compile(fragScript);\n      const artifact = {\n        programInfo,\n        program,\n        uniformLocations: this.getUniformLocations(\n            program, preprocessor.context.programInfo.inputNames, preprocessor.context.programInfo.variables),\n        attribLocations: this.getAttribLocations(program)\n      };\n      return artifact;\n    });\n  }\n  protected compile(fragShaderScript: string): WebGLProgram {\n    if (!this.vertexShader) {\n      Logger.verbose('ProrgramManager', 'Compiling and caching Vertex shader for the first time');\n      const vertexShaderScript = getVertexShaderSource(this.glContext.version);\n      this.vertexShader = this.glContext.compileShader(vertexShaderScript, this.glContext.gl.VERTEX_SHADER);\n    }\n    if (env.debug) {\n      Logger.verbose('ProrgramManager', `FragShader:\n${fragShaderScript}\n`);\n    }\n    const fragShader = this.glContext.compileShader(fragShaderScript, this.glContext.gl.FRAGMENT_SHADER);\n    const program = this.glContext.createProgram(this.vertexShader, fragShader);\n    this.glContext.deleteShader(fragShader);\n    return program;\n  }\n  bindOutput(td: TextureData): void {\n    const width = td.width;\n    const height = td.height;\n    Logger.verbose(\n        'ProrgramManager',\n        `Binding output texture to Framebuffer: w/h=${width}/${height}, shape=${td.shape}, type=${td.tensor.type}`);\n    this.glContext.attachFramebuffer(td.texture, width, height);\n  }\n  bindAttributes(attribLocations: Artifact.AttribLocations): void {\n    const positionHandle = attribLocations.position;\n    const textureCoordHandle = attribLocations.textureCoord;\n    this.glContext.setVertexAttributes(positionHandle, textureCoordHandle);\n    this.attributesBound = true;\n  }\n  bindUniforms(uniformLocations: Artifact.UniformLocations, variables: ProgramVariable[], textures: TextureData[]):\n      void {\n    const gl = this.glContext.gl;\n    let texturePosition = 0;\n    for (const {name, type, location, arrayLength} of uniformLocations) {\n      const value = variables.find(v => v.name === name)?.data;\n      if (type !== 'sampler2D' && !value) {\n        throw new Error(`variable '${name}' does not have data defined in program info`);\n      }\n      switch (type) {\n        case 'sampler2D':\n          this.bindTexture(textures[texturePosition], location, texturePosition);\n          texturePosition++;\n          break;\n        case 'float':\n          if (arrayLength) {\n            gl.uniform1fv(location, value as number[]);\n          } else {\n            gl.uniform1f(location, value as number);\n          }\n          break;\n        case 'int':\n          if (arrayLength) {\n            gl.uniform1iv(location, value as number[]);\n          } else {\n            gl.uniform1i(location, value as number);\n          }\n          break;\n        default:\n          throw new Error(`Uniform not implemented: ${type}`);\n      }\n    }\n  }\n  bindTexture(td: TextureData, uniformHandle: WebGLUniformLocation, position: number): void {\n    this.glContext.bindTextureToUniform(td.texture, position, uniformHandle);\n  }\n  getAttribLocations(program: WebGLProgram): Artifact.AttribLocations {\n    return {\n      position: this.getAttribLocation(program, 'position'),\n      textureCoord: this.getAttribLocation(program, 'textureCoord')\n    };\n  }\n  getUniformLocations(program: WebGLProgram, samplers?: string[], variables?: VariableInfo[]):\n      Artifact.UniformLocations {\n    const uniformLocations: Artifact.UniformLocations = [];\n    if (samplers) {\n      for (const sampler of samplers) {\n        uniformLocations.push({name: sampler, type: 'sampler2D', location: this.getUniformLocation(program, sampler)});\n      }\n    }\n    if (variables) {\n      for (const variable of variables) {\n        uniformLocations.push({...variable, location: this.getUniformLocation(program, variable.name)});\n      }\n    }\n    return uniformLocations;\n  }\n  getUniformLocation(program: WebGLProgram, name: string): WebGLUniformLocation {\n    const gl = this.glContext.gl;\n    const reference = gl.getUniformLocation(program, name);\n    if (reference === null) {\n      throw new Error(`Uniform ${name} not found.`);\n    }\n    return reference;\n  }\n  getAttribLocation(program: WebGLProgram, name: string): number {\n    const gl = this.glContext.gl;\n    const attributeLocation: number = gl.getAttribLocation(program, name);\n    return attributeLocation;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {SessionHandler} from '../../backend';\nimport {Graph} from '../../graph';\nimport {Logger} from '../../instrument';\nimport {Operator} from '../../operators';\nimport {OpSet, resolveOperator} from '../../opset';\nimport {Session} from '../../session';\nimport {Tensor} from '../../tensor';\nimport {WebGLBackend} from '../backend-webgl';\n\nimport {WebGLInferenceHandler} from './inference-handler';\nimport {WEBGL_OP_RESOLVE_RULES} from './op-resolve-rules';\nimport {ProgramManager} from './program-manager';\nimport {PreferLogicalStrategy, TextureLayoutStrategy} from './texture-layout-strategy';\nimport {TextureManager} from './texture-manager';\nimport {TextureData} from './types';\n\nexport class WebGLSessionHandler implements SessionHandler {\n  programManager: ProgramManager;\n  textureManager: TextureManager;\n  layoutStrategy: TextureLayoutStrategy;\n  packedTextureDataCache: Map<Tensor.Id, TextureData>;\n  unpackedTextureDataCache: Map<Tensor.Id, TextureData>;\n  pack2unpackMap: Map<Tensor.Id, Tensor.Id>;\n  unpack2packMap: Map<Tensor.Id, Tensor.Id>;\n  initializers: Set<Tensor.Id>;\n  pack?: boolean;\n\n  constructor(public readonly backend: WebGLBackend, public readonly context: Session.Context) {\n    this.layoutStrategy = new PreferLogicalStrategy(backend.glContext.maxTextureSize);\n    this.programManager = new ProgramManager(this.context.profiler, backend.glContext, this.layoutStrategy);\n    this.textureManager = new TextureManager(\n        backend.glContext, this.layoutStrategy, this.context.profiler,\n        {reuseTextures: backend.textureCacheMode === 'full'});\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache = new Map();\n    this.pack = backend.pack;\n    this.pack2unpackMap = new Map();\n    this.unpack2packMap = new Map();\n  }\n\n  createInferenceHandler() {\n    return new WebGLInferenceHandler(this);\n  }\n  onGraphInitialized(graph: Graph): void {\n    const initializers = graph.getValues().filter(v => v.from === -1 && v.tensor).map(v => v.tensor!.dataId);\n    this.initializers = new Set(initializers);\n  }\n  isInitializer(tensorId: Tensor.Id): boolean {\n    return this.initializers ? this.initializers.has(tensorId) : false;\n  }\n  addInitializer(tensorId: Tensor.Id): void {\n    this.initializers.add(tensorId);\n  }\n  getTextureData(tensorId: Tensor.Id, isPacked: boolean): TextureData|undefined {\n    if (isPacked) {\n      return this.packedTextureDataCache.get(tensorId);\n    } else {\n      return this.unpackedTextureDataCache.get(tensorId);\n    }\n  }\n  setTextureData(tensorId: Tensor.Id, textureData: TextureData, isPacked = false): void {\n    Logger.verbose('WebGLSessionHandler', 'Storing Texture data in cache');\n    if (isPacked) {\n      this.packedTextureDataCache.set(tensorId, textureData);\n    } else {\n      this.unpackedTextureDataCache.set(tensorId, textureData);\n    }\n  }\n  dispose(): void {\n    this.programManager.dispose();\n    this.textureManager.clearActiveTextures();\n    this.packedTextureDataCache.forEach(td => this.textureManager.releaseTexture(td, true));\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache.forEach(td => this.textureManager.releaseTexture(td, true));\n    this.unpackedTextureDataCache = new Map();\n  }\n  resolve(node: Graph.Node, opsets: readonly OpSet[], graph: Graph): Operator {\n    const op = resolveOperator(node, opsets, WEBGL_OP_RESOLVE_RULES);\n    return {impl: op.opImpl, context: op.opInit ? op.opInit(node, graph) : node};\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../instrument';\n\nexport declare namespace Encoder {\n  export interface DataTypeMap {\n    float: Float32Array;\n    byte: Uint8Array;\n    int: Uint32Array;\n  }\n  export type DataType = keyof DataTypeMap;\n  type DataArrayType = DataTypeMap[DataType];\n\n  /* eslint-disable @typescript-eslint/naming-convention */\n  export const enum Usage {\n    Default = 0,\n    UploadOnly,\n    Download4BytesAsFloat32,\n  }\n}\n\n/**\n * Abstraction for mapping data types to texture texlets\n * Encoding means how a Float32 is mapped to 1 or 4 channels for each texlet\n * Decoding means how a texlet's channels are mapped to a resulting Float32\n */\nexport interface DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize: number;\n  encode(src: Encoder.DataArrayType, textureSize: number): Encoder.DataArrayType;\n  allocate(size: number): Encoder.DataArrayType;\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Encoder.DataArrayType;\n}\n/**\n * WebGL2 data encoder\n * Uses R32F as the format for texlet\n */\nexport class RedFloat32DataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize: number;\n  constructor(gl: WebGL2RenderingContext, channels = 1) {\n    if (channels === 1) {\n      this.internalFormat = gl.R32F;\n      this.format = gl.RED;\n      this.textureType = gl.FLOAT;\n      this.channelSize = channels;\n    } else if (channels === 4) {\n      this.internalFormat = gl.RGBA32F;\n      this.format = gl.RGBA;\n      this.textureType = gl.FLOAT;\n      this.channelSize = channels;\n    } else {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n  }\n  encode(src: Encoder.DataArrayType, textureSize: number): Encoder.DataArrayType {\n    let result: Float32Array;\n    let source: Float32Array;\n    if (src.constructor !== Float32Array) {\n      Logger.warning('Encoder', 'data was not of type Float32; creating new Float32Array');\n      source = new Float32Array(src);\n    }\n    if (textureSize * this.channelSize > src.length) {\n      Logger.warning('Encoder', 'Source data too small. Allocating larger array');\n      source = src as Float32Array;\n      result = this.allocate(textureSize * this.channelSize) as Float32Array;\n      source.forEach((v, i) => result[i] = v);\n    } else {\n      source = src as Float32Array;\n      result = source;\n    }\n    return result;\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Float32Array(size * 4);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Float32Array {\n    if (this.channelSize === 1) {\n      const filteredData = (buffer as Float32Array).filter((value, index) => index % 4 === 0).subarray(0, dataSize);\n      return filteredData;\n    }\n    return buffer.subarray(0, dataSize) as Float32Array;\n  }\n}\n/**\n * Data encoder for WebGL 1 with support for floating point texture\n */\nexport class RGBAFloatDataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize: number;\n  constructor(gl: WebGLRenderingContext, channels = 1, textureType?: number) {\n    if (channels !== 1 && channels !== 4) {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n    this.internalFormat = gl.RGBA;\n    this.format = gl.RGBA;\n    this.channelSize = channels;\n    this.textureType = textureType || gl.FLOAT;\n  }\n  encode(src: Float32Array, textureSize: number): Encoder.DataArrayType {\n    let dest = src;\n    if (this.channelSize === 1) {\n      Logger.verbose('Encoder', 'Exploding into a larger array');\n      dest = this.allocate(textureSize) as Float32Array;\n      src.forEach((v, i) => dest[i * 4] = v);\n    }\n    return dest;\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Float32Array(size * 4);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Float32Array {\n    if (this.channelSize === 1) {\n      const filteredData = (buffer as Float32Array).filter((value, index) => index % 4 === 0).subarray(0, dataSize);\n      return filteredData;\n    }\n    return buffer.subarray(0, dataSize) as Float32Array;\n  }\n}\n\nexport class Uint8DataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize = 4;\n  constructor(gl: WebGLRenderingContext, channels = 1) {\n    if (channels === 1) {\n      this.internalFormat = gl.ALPHA;\n      this.format = gl.ALPHA;  // not tested\n      this.textureType = gl.UNSIGNED_BYTE;\n      this.channelSize = channels;\n    } else if (channels === 4) {\n      this.internalFormat = gl.RGBA;\n      this.format = gl.RGBA;\n      this.textureType = gl.UNSIGNED_BYTE;\n      this.channelSize = channels;\n    } else {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n  }\n  encode(src: Uint8Array, _textureSize: number): Encoder.DataArrayType {\n    return new Uint8Array(src.buffer, src.byteOffset, src.byteLength);\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Uint8Array(size * this.channelSize);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Uint8Array {\n    if (buffer instanceof Uint8Array) {\n      return buffer.subarray(0, dataSize);\n    }\n    throw new Error(`Invalid array type: ${buffer.constructor}`);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../instrument';\nimport {assert} from '../../util';\n\n/** Layout preferences */\nexport interface WidthHeightPrefs {\n  breakAxis?: number;\n  isPacked?: boolean;\n  reverseWH?: boolean;\n}\n/**\n * TextureLayoutStrategy is an abstraction for different plans\n * for mapping n-dimensional arrays to 2D textures (and back)\n */\nexport interface TextureLayoutStrategy {\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number];\n}\n\n/**\n * This strategy try to find the minimal max(W,H) that fulfills (W * H == totalSize)\n */\nexport class AlwaysKeepOriginalSizeStrategy implements TextureLayoutStrategy {\n  constructor(public maxTextureSize: number) {}\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\n    // scalar tensor\n    if (shape.length === 0) {\n      return [1, 1];\n    }\n    const maxTextureSize = this.maxTextureSize;\n    if (prefs && prefs.breakAxis !== undefined) {\n      // check to see if dims fit\n      const wsize = prefs.breakAxis >= shape.length ? 1 : shape.slice(prefs.breakAxis).reduce((a, b) => a * b);\n      const hsize = prefs.breakAxis <= 0 ? 1 : shape.slice(0, prefs.breakAxis).reduce((a, b) => a * b);\n      if (wsize > maxTextureSize || hsize > maxTextureSize) {\n        // ignore preferences\n        // continue with default layout\n        Logger.verbose(\n            'TextureLayout',\n            `Given width/height preferences were unattainable: shape:${shape}, breakAxis:${prefs.breakAxis}`);\n      } else {\n        return [wsize, hsize];\n      }\n    }\n    const totalSize = shape.reduce((a, b) => a * b);\n\n    let width = Math.floor(Math.sqrt(totalSize));\n\n    for (; width < maxTextureSize && width < totalSize; width++) {\n      if (totalSize % width === 0) {\n        break;\n      }\n    }\n\n    if (width >= maxTextureSize || totalSize % width !== 0) {\n      throw new Error(`The given dimensions are outside this GPU's boundaries: ${shape}`);\n    }\n    return [width, totalSize / width];\n  }\n}\n\nexport class PreferLogicalStrategy implements TextureLayoutStrategy {\n  constructor(public maxTextureSize: number) {}\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\n    const wh = this.computeTexture(shape, prefs);\n    if (prefs && prefs.isPacked) {\n      wh[0] /= 2;\n      wh[1] /= 2;\n    }\n    if (prefs && prefs.reverseWH) {\n      return [wh[1], wh[0]];\n    }\n    return wh;\n  }\n\n  computeTexture(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\n    const isPacked = prefs && prefs.isPacked;\n    // scalar tensor\n    if (shape.length === 0) {\n      return isPacked ? [2, 2] : [1, 1];\n    }\n    let maxTextureSize = this.maxTextureSize;\n    if (prefs && prefs.breakAxis !== undefined) {\n      // check to see if dims fit\n      const wsize = prefs.breakAxis >= shape.length ? 1 : shape.slice(prefs.breakAxis).reduce((a, b) => a * b);\n      const hsize = prefs.breakAxis <= 0 ? 1 : shape.slice(0, prefs.breakAxis).reduce((a, b) => a * b);\n      if (wsize > maxTextureSize || hsize > maxTextureSize) {\n        // ignore preferences\n        // continue with default layout\n        Logger.verbose(\n            'TextureLayout',\n            `Given width/height preferences were unattainable: shape:${shape}, breakAxis:${prefs.breakAxis}`);\n      } else {\n        return [wsize, hsize];\n      }\n    }\n    let logShape = shape.slice(0);\n    if (isPacked) {\n      maxTextureSize = maxTextureSize * 2;\n\n      // This logic ensures we accurately count the number of packed texels needed\n      // to accommodate the tensor. We can only pack values in the same texel if\n      // they are from adjacent pairs of rows/cols within the same batch. So if a\n      // tensor has 3 rows, we pretend it has 4 rows in order to account for the\n      // fact that the texels containing the third row are half empty.\n      logShape = logShape.map(\n          (d, i) => i >= logShape.length - 2 ? (logShape[i] % 2 === 0 ? logShape[i] : logShape[i] + 1) : logShape[i]);\n\n      // Packed texture height is at least 2 (the channel height of a single\n      // texel).\n      if (logShape.length === 1) {\n        logShape = [2, logShape[0]];\n      }\n    }\n\n    // If logical shape is 2, we don't squeeze, since we want to match physical.\n    if (logShape.length !== 2) {\n      const squeezeResult = squeezeShape(logShape);\n      logShape = squeezeResult.newShape;\n    }\n\n    const size = sizeFromShape(logShape);\n    if (logShape.length <= 1 && size <= maxTextureSize) {\n      return [1, size];\n    } else if (logShape.length === 2 && logShape[0] <= maxTextureSize && logShape[1] <= maxTextureSize) {\n      return logShape as [number, number];\n    } else if (logShape.length === 3 && logShape[0] * logShape[1] <= maxTextureSize && logShape[2] <= maxTextureSize) {\n      return [logShape[0] * logShape[1], logShape[2]];\n    } else if (logShape.length === 3 && logShape[0] <= maxTextureSize && logShape[1] * logShape[2] <= maxTextureSize) {\n      return [logShape[0], logShape[1] * logShape[2]];\n    } else if (\n        logShape.length === 4 && logShape[0] * logShape[1] * logShape[2] <= maxTextureSize &&\n        logShape[3] <= maxTextureSize) {\n      return [logShape[0] * logShape[1] * logShape[2], logShape[3]];\n    } else if (\n        logShape.length === 4 && logShape[0] <= maxTextureSize &&\n        logShape[1] * logShape[2] * logShape[3] <= maxTextureSize) {\n      return [logShape[0], logShape[1] * logShape[2] * logShape[3]];\n    } else {\n      if (isPacked) {\n        // For packed textures size equals the number of channels required to\n        // accommodate the texture data. However in order to squarify such that\n        // inner dimensions stay even, we rewrite size to equal the number of\n        // texels. Then in the return statement we rehydrate the squarified\n        // dimensions to channel units.\n        return sizeToSquarishShape(size / 4).map(d => d * 2) as [number, number];\n      }\n      return sizeToSquarishShape(size);\n    }\n  }\n}\n\nexport function squeezeShape(shape: number[], axis?: number[]): {newShape: number[]; keptDims: number[]} {\n  const newShape: number[] = [];\n  const keptDims: number[] = [];\n  const isEmptyArray = axis != null && Array.isArray(axis) && axis.length === 0;\n  const axes = (axis == null || isEmptyArray) ? null : parseAxisParam(axis, shape).sort();\n  let j = 0;\n  for (let i = 0; i < shape.length; ++i) {\n    if (axes != null) {\n      if (axes[j] === i && shape[i] !== 1) {\n        throw new Error(`Can't squeeze axis ${i} since its dim '${shape[i]}' is not 1`);\n      }\n      if ((axes[j] == null || axes[j] > i) && shape[i] === 1) {\n        newShape.push(shape[i]);\n        keptDims.push(i);\n      }\n      if (axes[j] <= i) {\n        j++;\n      }\n    }\n    if (shape[i] !== 1) {\n      newShape.push(shape[i]);\n      keptDims.push(i);\n    }\n  }\n  return {newShape, keptDims};\n}\n\nexport function parseAxisParam(axis: number|number[], shape: number[]): number[] {\n  const rank = shape.length;\n\n  // Normalize input\n  axis = axis == null ? shape.map((s, i) => i) : ([] as number[]).concat(axis);\n\n  // Check for valid range\n  assert(\n      axis.every(ax => ax >= -rank && ax < rank),\n      () => `All values in axis param must be in range [-${rank}, ${rank}) but ` +\n          `got axis ${axis}`);\n\n  // Check for only integers\n  assert(\n      axis.every(isInt),\n      () => 'All values in axis param must be integers but ' +\n          `got axis ${axis}`);\n\n  // Handle negative axis.\n  return axis.map(a => a < 0 ? rank + a : a);\n}\nexport function isInt(a: number): boolean {\n  return a % 1 === 0;\n}\nexport function sizeFromShape(shape: number[]): number {\n  if (shape.length === 0) {\n    // Scalar.\n    return 1;\n  }\n  let size = shape[0];\n  for (let i = 1; i < shape.length; i++) {\n    size *= shape[i];\n  }\n  return size;\n}\nexport function getRowsCols(shape: number[]): [number, number] {\n  if (shape.length === 0) {\n    throw Error('Cannot get rows and columns of an empty shape array.');\n  }\n\n  return [shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]];\n}\nexport function sizeToSquarishShape(size: number): [number, number] {\n  const width = Math.ceil(Math.sqrt(size));\n  return [width, Math.ceil(size / width)];\n}\nexport function getBatchDim(shape: number[], dimsToSkip = 2): number {\n  return sizeFromShape(shape.slice(0, shape.length - dimsToSkip));\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ShapeUtil} from '../../util';\n\nimport {TextureLayoutStrategy, WidthHeightPrefs} from './texture-layout-strategy';\nimport {TextureLayout, TextureType} from './types';\n\nexport const createTextureLayoutFromTextureType =\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[],\n     textureType: TextureType): TextureLayout => {\n      const channel = (textureType === TextureType.unpacked || textureType === TextureType.unpackedReversed) ? 1 : 4;\n      const isPacked = textureType === TextureType.packed;\n      const reverseWH = (textureType === TextureType.unpackedReversed || textureType === TextureType.packed);\n      const breakAxis = textureType === TextureType.packedLastDimension ? shape.length - 1 : undefined;\n      const unpackedShape = textureType === TextureType.packedLastDimension ?\n          shape.map((d, i) => i === shape.length - 1 ? d * 4 : d) :\n          undefined;\n      return createTextureLayoutFromShape(\n          textureLayoutStrategy, shape, channel, unpackedShape, {isPacked, reverseWH, breakAxis});\n    };\n\nexport const calculateTextureWidthAndHeight =\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[], textureType: TextureType):\n        [number, number] => {\n          const layout = createTextureLayoutFromTextureType(textureLayoutStrategy, shape, textureType);\n          return [layout.width, layout.height];\n        };\n\n/**\n * Create a TextureLayout object from shape.\n */\nexport const createTextureLayoutFromShape =\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[], channels: 1|4 = 1,\n     unpackedShape?: readonly number[], prefs?: WidthHeightPrefs): TextureLayout => {\n      const isPacked = !!(prefs && prefs.isPacked);\n      const [width, height] = textureLayoutStrategy.computeTextureWH(isPacked ? unpackedShape || shape : shape, prefs);\n      const rank = shape.length;\n      let inferredDims = shape.slice(0);\n      if (rank === 0) {\n        inferredDims = [1];\n      }\n      if (channels === 1) {\n        // unpackedShape will take `shape` and not `inferredDims` so as to create a scalar Tensor if need be\n        unpackedShape = shape;\n      } else if (isPacked) {\n        if (channels !== 4) {\n          throw new Error('a packed texture must be 4-channel');\n        }\n        unpackedShape = shape;\n        if (rank > 0) {\n          inferredDims[rank - 1] = Math.ceil(inferredDims[rank - 1] / 2);\n        }\n        if (rank > 1) {\n          inferredDims[rank - 2] = Math.ceil(inferredDims[rank - 2] / 2);\n        }\n      } else if (!unpackedShape) {\n        throw new Error('Unpacked shape is needed when using channels > 1');\n      }\n      return {\n        width,\n        height,\n        channels,\n        isPacked,\n        shape: inferredDims,\n        strides: ShapeUtil.computeStrides(inferredDims),\n        unpackedShape,\n        reversedWH: (prefs && prefs.reverseWH)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger, Profiler} from '../../instrument';\nimport {Tensor} from '../../tensor';\n\nimport {Encoder} from './texture-data-encoder';\nimport {TextureLayoutStrategy} from './texture-layout-strategy';\nimport {TextureData, TextureLayout} from './types';\nimport {WebGLContext} from './webgl-context';\n\nexport interface TextureManagerConfig {\n  reuseTextures?: boolean;\n}\n\n/**\n * TextureManager is the mainly responsible for caching Textures\n * Textures are cached in 2 levels:\n *   1. the texures which are associated with a dataId (from Tensor)\n *    Caching these is crucial to performance. These are In-use Textures\n *   2. textures which are not in use by any current ProgramInfo/Tensor\n *     These are called Free Textures\n * TextureManager is also used to help creating textures. For this it\n * uses WebGLContext and TextureLayoutStrategy\n */\nexport class TextureManager {\n  private readonly inUseTextures: Map<string, WebGLTexture[]>;\n  private readonly idleTextures: Map<string, WebGLTexture[]>;\n  private readonly textureLookup: Map<WebGLTexture, string>;\n  private readonly pendingRead: Map<Tensor.Id, Array<(arr: Tensor.NumberType) => void>> = new Map();\n\n  constructor(\n      public glContext: WebGLContext, public layoutStrategy: TextureLayoutStrategy, public profiler: Readonly<Profiler>,\n      private config: TextureManagerConfig) {\n    if (config.reuseTextures) {\n      this.inUseTextures = new Map();\n      this.idleTextures = new Map();\n      this.textureLookup = new Map();\n    }\n  }\n  createTextureFromLayout(\n      dataType: Tensor.DataType, layout: TextureLayout, data?: Tensor.NumberType, usage?: Encoder.Usage) {\n    const textureDataType = this.toEncoderType(dataType);\n\n    const encoder = this.glContext.getEncoder(textureDataType, layout.channels || 1, usage);\n    if (layout.isPacked && usage === Encoder.Usage.UploadOnly) {\n      throw new Error('not implemented');\n    }\n    const width = layout.width;\n    const height = layout.height;\n\n    let key: string|undefined;\n    let inUseTextures: WebGLTexture[]|undefined;\n    if (this.config.reuseTextures) {\n      key = `${width}x${height}_${encoder.format}_${encoder.internalFormat}_${encoder.textureType}`;\n      inUseTextures = this.inUseTextures.get(key);\n      if (!inUseTextures) {\n        inUseTextures = [];\n        this.inUseTextures.set(key, inUseTextures);\n      }\n\n      const idleTextures = this.idleTextures.get(key);\n      if (idleTextures && idleTextures.length > 0) {\n        const texture = idleTextures.pop()!;\n        inUseTextures.push(texture);\n        if (usage === Encoder.Usage.UploadOnly) {\n          this.glContext.updateTexture(texture, width, height, encoder, this.toTextureData(dataType, data)!);\n        }\n        return texture;\n      }\n    }\n\n    Logger.verbose('TextureManager', `Creating new texture of size ${layout.width}x${layout.height}`);\n    const texture = this.glContext.allocateTexture(width, height, encoder, this.toTextureData(dataType, data));\n\n    if (this.config.reuseTextures) {\n      inUseTextures!.push(texture);\n      this.textureLookup.set(texture, key!);\n    }\n    return texture;\n  }\n  readTexture(td: TextureData, dataType: Tensor.DataType, channels?: number): Tensor.NumberType {\n    if (!channels) {\n      channels = 1;\n    }\n    return this.profiler.event('backend', 'TextureManager.readTexture', () => {\n      const dataSize = td.shape.reduce((a, b) => a * b) * channels!;\n      const data = this.glContext.readTexture(\n          td.texture, td.width, td.height, dataSize, this.toEncoderType(dataType), channels!);\n      return this.toTensorData(dataType, data);\n    });\n  }\n  async readTextureAsync(td: TextureData, dataType: Tensor.DataType, channels?: number): Promise<Tensor.NumberType> {\n    const dataId = td.tensor.dataId;\n    if (!channels) {\n      channels = 1;\n    }\n    if (this.pendingRead.has(dataId)) {\n      const subscribers = this.pendingRead.get(dataId);\n      return new Promise<Tensor.NumberType>(resolve => subscribers?.push(resolve));\n    }\n    return this.profiler.event('backend', 'TextureManager.readTextureAsync', async () => {\n      this.pendingRead.set(dataId, []);\n      const dataSize = td.shape.reduce((a, b) => a * b) * channels!;\n      // add a fence waiting for the data to be ready\n      await this.glContext.createAndWaitForFence();\n      const data = this.glContext.readTexture(\n          td.texture, td.width, td.height, dataSize, this.toEncoderType(dataType), channels!);\n      const tensorData = this.toTensorData(dataType, data);\n      const subscribers = this.pendingRead.get(dataId);\n      this.pendingRead.delete(dataId);\n      subscribers?.forEach(resolve => resolve(tensorData));\n      return tensorData;\n    });\n  }\n  readUint8TextureAsFloat(td: TextureData): Float32Array {\n    return this.profiler.event('backend', 'TextureManager.readUint8TextureAsFloat', () => {\n      const dataSize = td.shape.reduce((a, b) => a * b);\n      const data = this.glContext.readTexture(td.texture, td.width, td.height, dataSize * 4, 'byte', 4);\n      return new Float32Array(data.buffer, data.byteOffset, dataSize);\n    });\n  }\n  releaseTexture(textureData: TextureData, deleteTexture?: boolean): void {\n    let key: string|undefined;\n    if (this.config.reuseTextures) {\n      key = this.textureLookup.get(textureData.texture);\n      if (key) {\n        if (deleteTexture) {\n          this.textureLookup.delete(key);\n        }\n        const inUseTextures = this.inUseTextures.get(key);\n        if (inUseTextures) {\n          const index = inUseTextures.indexOf(textureData.texture);\n          if (index !== -1) {\n            inUseTextures.splice(index, 1);\n            let idleTextures = this.idleTextures.get(key);\n            if (!idleTextures) {\n              idleTextures = [];\n              this.idleTextures.set(key, idleTextures);\n            }\n            idleTextures.push(textureData.texture);\n          }\n        }\n      }\n    }\n\n    if (!key || deleteTexture) {\n      Logger.verbose('TextureManager', `Deleting texture of size ${textureData.width}x${textureData.height}`);\n      this.glContext.deleteTexture(textureData.texture);\n    }\n  }\n  toTensorData(dataType: Tensor.DataType, data: Encoder.DataArrayType): Tensor.NumberType {\n    switch (dataType) {\n      case 'int16':\n        return data instanceof Int16Array ? data : Int16Array.from(data);\n      case 'int32':\n        return data instanceof Int32Array ? data : Int32Array.from(data);\n      case 'int8':\n        return data instanceof Int8Array ? data : Int8Array.from(data);\n      case 'uint16':\n        return data instanceof Uint16Array ? data : Uint16Array.from(data);\n      case 'uint32':\n        return data instanceof Uint32Array ? data : Uint32Array.from(data);\n      case 'uint8':\n      case 'bool':\n        return data instanceof Uint8Array ? data : Uint8Array.from(data);\n      case 'float32':\n        return data instanceof Float32Array ? data : Float32Array.from(data);\n      case 'float64':\n        return data instanceof Float64Array ? data : Float64Array.from(data);\n      default:\n        throw new Error(`TensorData type ${dataType} is not supported`);\n    }\n  }\n  toTextureData(dataType: Tensor.DataType, data: Tensor.NumberType|undefined): Encoder.DataArrayType|undefined {\n    if (!data) {\n      return undefined;\n    }\n    return (data instanceof Float32Array) ? data : new Float32Array(data);\n    /*\n    switch (dataType) {\n      case 'int16':\n      case 'int32':\n      case 'uint16':\n      case 'uint32':\n        return (data.constructor === Uint32Array) ? data as Uint32Array : new Uint32Array(data);\n      case 'int8':\n      case 'uint8':\n      case 'bool':\n        return (data.constructor === Uint8Array) ? data as Uint8Array : new Uint8Array(data);\n      case 'float32':\n      case 'float64':\n        return (data.constructor === Float32Array) ? data as Float32Array : new Float32Array(data);\n      default:\n        throw new Error(`TensorData type ${dataType} is not supported`);\n    }\n    */\n  }\n  toEncoderType(_dataType: Tensor.DataType): Encoder.DataType {\n    return 'float';\n    // switch (dataType) {\n    //   case 'int16':\n    //   case 'int32':\n    //   case 'uint16':\n    //   case 'uint32':\n    //     return 'int';\n    //   case 'uint8':\n    //   case 'bool':\n    //     return 'byte';\n    //   case 'float32':\n    //   case 'float64':\n    //     return 'float';\n    //   default:\n    //     throw new Error(`TensorData type ${dataType} is not supported`);\n    // }\n  }\n  clearActiveTextures(): void {\n    this.glContext.clearActiveTextures();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../tensor';\n\n/**\n * Layout info is used for mapping n-dimensional array to 2D textures\n * The layout is created by the TextureLayoutStrategy based on\n * the Tensor's dimensions and strides\n */\nexport interface TextureLayout {\n  width: number;\n  height: number;\n  /**\n   * specify the number of value that encoded in a single pixel\n   */\n  channels: 1|2|3|4;\n  /**\n   * whether in packed mode or not\n   */\n  isPacked?: boolean;\n  /**\n   * the normalized shape\n   */\n  shape: readonly number[];\n  /**\n   * the stride of each dimensions, calculated according to shape\n   */\n  strides: readonly number[];\n  /**\n   * the original shape(dims) of the corresponding tensor\n   */\n  unpackedShape: readonly number[];\n\n  reversedWH?: boolean;\n}\nexport interface TextureData extends TextureLayout {\n  tensor: Tensor;\n  texture: WebGLTexture;\n}\n\nexport enum TextureType {\n  unpacked,              // <-- normal unpacked texture\n  unpackedReversed,      // <-- unpacked texture used in old ONNX.js implementation (deprecated)\n  packed,                // <-- normal packed texture\n  downloadUint8AsFloat,  // <-- ONLY used in texture downloading for iOS devices\n  packedLastDimension    // <-- ONLY used in old ONNX.js Conv implementation for input W (deprecated)\n}\n\nexport interface TensorInfo {\n  id?: Tensor.Id;\n  dims: readonly number[];\n  type: Tensor.DataType;\n  textureType: TextureType;\n}\n\nexport interface ProgramVariable {\n  type: 'float'|'int';\n  name: string;\n  arrayLength?: number;\n  data: number|number[];\n}\n\n/**\n * A set of metadata of a shader program.\n */\nexport interface ProgramMetadata {\n  /**\n   * the name of the program. used for debugging and profiling\n   */\n  name: string;\n  /**\n   * texture types for each input\n   */\n  inputTypes: TextureType[];\n  /**\n   * names of each input\n   */\n  inputNames: string[];\n  /**\n   * an optional string as a cache hint in the artifact cache\n   */\n  cacheHint?: string;\n}\n\n/**\n * A ProgramInfoLoader allows\n */\nexport interface ProgramInfoLoader extends ProgramMetadata {\n  /**\n   * a function to get the program info\n   */\n  get(): ProgramInfo;\n}\n\n/**\n * A set of data that represent a shader program\n */\nexport interface ProgramInfo extends ProgramMetadata {\n  /**\n   * information of uniform variables\n   */\n  variables?: ProgramVariable[];\n  /**\n   * tensor info for output\n   */\n  output: TensorInfo;\n  /**\n   * the shader's processing source code\n   */\n  shaderSource: string;\n  /**\n   * whether the shader source contains a customized main function implementation\n   */\n  hasMain?: boolean;\n}\n\nexport interface VariableInfo {\n  type: 'float'|'int';\n  name: string;\n  arrayLength?: number;\n}\n\nexport interface ProgramVariable {\n  type: 'float'|'int';\n  name: string;\n  arrayLength?: number;\n  data: number|number[];\n}\n\n/**\n * Information of uniforms that shader uses\n */\nexport interface UniformInfo {\n  type: 'sampler2D'|VariableInfo['type'];\n  name: string;\n  arrayLength?: number;\n}\n\nexport interface UniformLocation extends UniformInfo {\n  location: WebGLUniformLocation;\n}\n\n/**\n * Artifact is the result of compilation\n * It does not contain input of output data\n * However anything that could be run as a \"program\"\n */\nexport interface Artifact {\n  programInfo: ProgramInfo;\n  program: WebGLProgram;\n  uniformLocations: UniformLocation[];\n  attribLocations: {position: number; textureCoord: number};\n}\nexport declare namespace Artifact {\n  type UniformLocations = Artifact['uniformLocations'];\n  type AttribLocations = Artifact['attribLocations'];\n}\n\nexport interface UniformData {\n  [name: string]: number|number[];\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {assert} from '../../util';\n/**\n * Given a non RGBA shape calculate the R version\n * It is assumed that the dimensions are multiples of given channels\n * NOTE: it is always the last dim that gets packed.\n * @param unpackedShape original shape to create a packed version from\n */\nexport function getPackedShape(unpackedShape: readonly number[]): readonly number[] {\n  const len = unpackedShape.length;\n  return unpackedShape.slice(0, len - 1).concat(unpackedShape[len - 1] / 4);\n}\n\nexport async function repeatedTry(\n    checkFn: () => boolean, delayFn = (_counter: number) => 0, maxCounter?: number): Promise<void> {\n  return new Promise<void>((resolve, reject) => {\n    let tryCount = 0;\n\n    const tryFn = () => {\n      if (checkFn()) {\n        resolve();\n        return;\n      }\n\n      tryCount++;\n\n      const nextBackoff = delayFn(tryCount);\n\n      if (maxCounter != null && tryCount >= maxCounter) {\n        reject();\n        return;\n      }\n      setTimeout(tryFn, nextBackoff);\n    };\n\n    tryFn();\n  });\n}\n\n/**\n * Generates the function name from an input sampler name.\n * @param samplerName Name of the sampler.\n */\nexport function generateShaderFuncNameFromInputSamplerName(samplerName: string): string {\n  assert(typeof samplerName !== 'undefined' && samplerName.length !== 0, () => 'empty string found for sampler name');\n  return 'get' + samplerName.charAt(0).toUpperCase() + samplerName.slice(1);\n}\n\n/**\n * Generates the function name from an input sampler name at output coordinates.\n * @param samplerName Name of the sampler.\n */\nexport function generateShaderFuncNameFromInputSamplerNameAtOutCoords(samplerName: string): string {\n  assert(typeof samplerName !== 'undefined' && samplerName.length !== 0, () => 'empty string found for sampler name');\n  return 'get' + samplerName.charAt(0).toUpperCase() + samplerName.slice(1) + 'AtOutCoords';\n}\n\n/** Returns a new input shape (a copy) that has a squeezed logical shape. */\nexport function squeezeInputShape(inputShape: readonly number[], squeezedShape: number[]): number[] {\n  // Deep copy.\n  let newInputShape: number[] = JSON.parse(JSON.stringify(inputShape));\n  newInputShape = squeezedShape;\n  return newInputShape;\n}\n\n/** Returns a list of squeezed parameters for shader functions */\nexport function getSqueezedParams(params: string[], keptDims: number[]): string {\n  return keptDims.map(d => params[d]).join(', ');\n}\n\n/** Returns the data type for different ranks. */\nexport function getCoordsDataType(rank: number): string {\n  if (rank <= 1) {\n    return 'int';\n  } else if (rank === 2) {\n    return 'ivec2';\n  } else if (rank === 3) {\n    return 'ivec3';\n  } else if (rank === 4) {\n    return 'ivec4';\n  } else if (rank === 5) {\n    return 'ivec5';\n  } else if (rank === 6) {\n    return 'ivec6';\n  } else {\n    throw Error(`GPU for rank ${rank} is not yet supported`);\n  }\n}\n\nexport function getGlChannels(rank = 6): string[] {\n  return ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, rank);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../instrument';\n\nimport {WebGLContext} from './webgl-context';\n\nconst cache: {[contextId: string]: WebGLContext} = {};\n\n/**\n * This factory function creates proper WebGLRenderingContext based on\n * the current browsers capabilities\n * The order is from higher/most recent versions to most basic\n */\nexport function createWebGLContext(contextId?: 'webgl'|'webgl2'): WebGLContext {\n  let context: WebGLContext|undefined;\n  if ((!contextId || contextId === 'webgl2') && 'webgl2' in cache) {\n    context = cache.webgl2;\n  } else if ((!contextId || contextId === 'webgl') && 'webgl' in cache) {\n    context = cache.webgl;\n  }\n\n  if (!context) {\n    try {\n      // try to create webgl context from an offscreen canvas\n      const offscreenCanvas = createOffscreenCanvas();\n      context = createNewWebGLContext(offscreenCanvas, contextId);\n    } catch (e) {\n      // if failed, fallback to try to use a normal canvas element\n      const canvas = createCanvas();\n      context = createNewWebGLContext(canvas, contextId);\n    }\n  }\n\n  contextId = contextId || context.version === 1 ? 'webgl' : 'webgl2';\n  const gl = context.gl;\n\n  cache[contextId] = context;\n\n  if (gl.isContextLost()) {\n    delete cache[contextId];\n    return createWebGLContext(contextId);\n  }\n\n  gl.disable(gl.DEPTH_TEST);\n  gl.disable(gl.STENCIL_TEST);\n  gl.disable(gl.BLEND);\n  gl.disable(gl.DITHER);\n  gl.disable(gl.POLYGON_OFFSET_FILL);\n  gl.disable(gl.SAMPLE_COVERAGE);\n  gl.enable(gl.SCISSOR_TEST);\n  gl.enable(gl.CULL_FACE);\n  gl.cullFace(gl.BACK);\n\n  return context;\n}\n\nexport function createNewWebGLContext(canvas: HTMLCanvasElement, contextId?: 'webgl'|'webgl2'): WebGLContext {\n  const contextAttributes: WebGLContextAttributes = {\n    alpha: false,\n    depth: false,\n    antialias: false,\n    stencil: false,\n    preserveDrawingBuffer: false,\n    premultipliedAlpha: false,\n    failIfMajorPerformanceCaveat: false\n  };\n  let gl: WebGLRenderingContext|null;\n  const ca = contextAttributes;\n  if (!contextId || contextId === 'webgl2') {\n    gl = canvas.getContext('webgl2', ca);\n    if (gl) {\n      try {\n        return new WebGLContext(gl, 2);\n      } catch (err) {\n        Logger.warning('GlContextFactory', `failed to create WebGLContext using contextId 'webgl2'. Error: ${err}`);\n      }\n    }\n  }\n  if (!contextId || contextId === 'webgl') {\n    gl = canvas.getContext('webgl', ca) || canvas.getContext('experimental-webgl', ca) as WebGLRenderingContext;\n    if (gl) {\n      try {\n        return new WebGLContext(gl, 1);\n      } catch (err) {\n        Logger.warning(\n            'GlContextFactory',\n            `failed to create WebGLContext using contextId 'webgl' or 'experimental-webgl'. Error: ${err}`);\n      }\n    }\n  }\n\n  throw new Error('WebGL is not supported');\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\ndeclare let OffscreenCanvas: {new (width: number, height: number): HTMLCanvasElement};\n\nfunction createCanvas(): HTMLCanvasElement {\n  if (typeof document === 'undefined') {\n    throw new TypeError('failed to create canvas: document is not supported');\n  }\n  const canvas: HTMLCanvasElement = document.createElement('canvas');\n  canvas.width = 1;\n  canvas.height = 1;\n  return canvas;\n}\n\nfunction createOffscreenCanvas(): HTMLCanvasElement {\n  if (typeof OffscreenCanvas === 'undefined') {\n    throw new TypeError('failed to create offscreen canvas: OffscreenCanvas is not supported');\n  }\n  return new OffscreenCanvas(1, 1);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\n\nimport * as DataEncoders from './texture-data-encoder';\nimport {DataEncoder, Encoder} from './texture-data-encoder';\nimport {repeatedTry} from './utils';\n\nexport interface FenceContext {\n  query: WebGLSync|null;\n  isFencePassed(): boolean;\n}\n\ntype PollItem = {\n  isDoneFn: () => boolean; resolveFn: () => void;\n};\n\nexport function linearSearchLastTrue(arr: Array<() => boolean>): number {\n  let i = 0;\n  for (; i < arr.length; ++i) {\n    const isDone = arr[i]();\n    if (!isDone) {\n      break;\n    }\n  }\n  return i - 1;\n}\n\n/**\n * Abstraction and wrapper around WebGLRenderingContext and its operations\n */\nexport class WebGLContext {\n  gl: WebGLRenderingContext;\n  version: 1|2;\n\n  private vertexbuffer: WebGLBuffer;\n  private framebuffer: WebGLFramebuffer;\n\n  // WebGL flags and vital parameters\n  private isFloatTextureAttachableToFrameBuffer: boolean;\n  isFloat32DownloadSupported: boolean;\n  isRenderFloat32Supported: boolean;\n  isBlendSupported: boolean;\n  maxTextureSize: number;\n  // private maxCombinedTextureImageUnits: number;\n  private maxTextureImageUnits: number;\n  // private maxCubeMapTextureSize: number;\n  // private shadingLanguageVersion: string;\n  // private webglVendor: string;\n  // private webglVersion: string;\n\n  // WebGL2 flags and vital parameters\n  // private max3DTextureSize: number;\n  // private maxArrayTextureLayers: number;\n  // private maxColorAttachments: number;\n  // private maxDrawBuffers: number;\n\n  // WebGL extensions\n  // eslint-disable-next-line camelcase\n  textureFloatExtension: OES_texture_float|null;\n  // eslint-disable-next-line camelcase\n  textureHalfFloatExtension: OES_texture_half_float|null;\n\n  // WebGL2 extensions\n  colorBufferFloatExtension: unknown|null;\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  disjointTimerQueryWebgl2Extension: {TIME_ELAPSED_EXT: GLenum; GPU_DISJOINT_EXT: GLenum}|null;\n\n  private disposed: boolean;\n  private frameBufferBound = false;\n\n  constructor(gl: WebGLRenderingContext, version: 1|2) {\n    this.gl = gl;\n    this.version = version;\n\n    this.getExtensions();\n    this.vertexbuffer = this.createVertexbuffer();\n    this.framebuffer = this.createFramebuffer();\n    this.queryVitalParameters();\n  }\n\n  allocateTexture(width: number, height: number, encoder: DataEncoder, data?: Encoder.DataArrayType): WebGLTexture {\n    const gl = this.gl;\n    // create the texture\n    const texture = gl.createTexture();\n    // bind the texture so the following methods effect this texture.\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    const buffer = data ? encoder.encode(data, width * height) : null;\n    gl.texImage2D(\n        gl.TEXTURE_2D,\n        0,  // Level of detail.\n        encoder.internalFormat, width, height,\n        0,  // Always 0 in OpenGL ES.\n        encoder.format, encoder.textureType, buffer);\n    this.checkError();\n    return texture as WebGLTexture;\n  }\n  updateTexture(\n      texture: WebGLTexture, width: number, height: number, encoder: DataEncoder, data: Encoder.DataArrayType): void {\n    const gl = this.gl;\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    const buffer = encoder.encode(data, width * height);\n    gl.texSubImage2D(\n        gl.TEXTURE_2D,\n        0,  // level\n        0,  // xoffset\n        0,  // yoffset\n        width, height, encoder.format, encoder.textureType, buffer);\n    this.checkError();\n  }\n  attachFramebuffer(texture: WebGLTexture, width: number, height: number): void {\n    const gl = this.gl;\n    // Make it the target for framebuffer operations - including rendering.\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\n    gl.framebufferTexture2D(\n        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture,\n        0);  // 0, we aren't using MIPMAPs\n    this.checkError();\n    gl.viewport(0, 0, width, height);\n    gl.scissor(0, 0, width, height);\n  }\n  readTexture(\n      texture: WebGLTexture, width: number, height: number, dataSize: number, dataType: Encoder.DataType,\n      channels: number): Encoder.DataArrayType {\n    const gl = this.gl;\n    if (!channels) {\n      channels = 1;\n    }\n    if (!this.frameBufferBound) {\n      this.attachFramebuffer(texture, width, height);\n    }\n    const encoder = this.getEncoder(dataType, channels);\n    const buffer = encoder.allocate(width * height);\n    // bind texture to framebuffer\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.framebufferTexture2D(\n        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture,\n        0);  // 0, we aren't using MIPMAPs\n    // TODO: Check if framebuffer is ready\n    gl.readPixels(0, 0, width, height, gl.RGBA, encoder.textureType, buffer);\n    this.checkError();\n    // unbind FB\n    return encoder.decode(buffer, dataSize);\n  }\n\n  isFramebufferReady(): boolean {\n    // TODO: Implement logic to check if the framebuffer is ready\n    return true;\n  }\n  getActiveTexture(): string {\n    const gl = this.gl;\n    const n = gl.getParameter(this.gl.ACTIVE_TEXTURE);\n    return `TEXTURE${(n - gl.TEXTURE0)}`;\n  }\n  getTextureBinding(): WebGLTexture {\n    return this.gl.getParameter(this.gl.TEXTURE_BINDING_2D);\n  }\n  getFramebufferBinding(): WebGLFramebuffer {\n    return this.gl.getParameter(this.gl.FRAMEBUFFER_BINDING);\n  }\n  setVertexAttributes(positionHandle: number, textureCoordHandle: number): void {\n    const gl = this.gl;\n    gl.vertexAttribPointer(positionHandle, 3, gl.FLOAT, false, 20, 0);\n    gl.enableVertexAttribArray(positionHandle);\n    if (textureCoordHandle !== -1) {\n      gl.vertexAttribPointer(textureCoordHandle, 2, gl.FLOAT, false, 20, 12);\n      gl.enableVertexAttribArray(textureCoordHandle);\n    }\n    this.checkError();\n  }\n  createProgram(\n      vertexShader: WebGLShader,\n      fragShader: WebGLShader,\n      ): WebGLProgram {\n    const gl = this.gl;\n    const program = gl.createProgram()!;\n\n    // the program consists of our shaders\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragShader);\n    gl.linkProgram(program);\n    return program;\n  }\n  compileShader(shaderSource: string, shaderType: number): WebGLShader {\n    const gl = this.gl;\n    const shader = gl.createShader(shaderType);\n    if (!shader) {\n      throw new Error(`createShader() returned null with type ${shaderType}`);\n    }\n\n    gl.shaderSource(shader, shaderSource);\n    gl.compileShader(shader);\n    if (gl.getShaderParameter(shader, gl.COMPILE_STATUS) === false) {\n      throw new Error(`Failed to compile shader: ${gl.getShaderInfoLog(shader)}\nShader source:\n${shaderSource}`);\n    }\n    return shader;\n  }\n  deleteShader(shader: WebGLShader): void {\n    this.gl.deleteShader(shader);\n  }\n  bindTextureToUniform(texture: WebGLTexture, position: number, uniformHandle: WebGLUniformLocation): void {\n    const gl = this.gl;\n    gl.activeTexture(gl.TEXTURE0 + position);\n    this.checkError();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    this.checkError();\n    gl.uniform1i(uniformHandle, position);\n    this.checkError();\n  }\n  draw(): void {\n    this.gl.drawArrays(this.gl.TRIANGLE_STRIP, 0, 4);\n    this.checkError();\n  }\n  checkError(): void {\n    if (env.debug) {\n      const gl = this.gl;\n      const error = gl.getError();\n      let label = '';\n      switch (error) {\n        case (gl.NO_ERROR):\n          return;\n        case (gl.INVALID_ENUM):\n          label = 'INVALID_ENUM';\n          break;\n        case (gl.INVALID_VALUE):\n          label = 'INVALID_VALUE';\n          break;\n        case (gl.INVALID_OPERATION):\n          label = 'INVALID_OPERATION';\n          break;\n        case (gl.INVALID_FRAMEBUFFER_OPERATION):\n          label = 'INVALID_FRAMEBUFFER_OPERATION';\n          break;\n        case (gl.OUT_OF_MEMORY):\n          label = 'OUT_OF_MEMORY';\n          break;\n        case (gl.CONTEXT_LOST_WEBGL):\n          label = 'CONTEXT_LOST_WEBGL';\n          break;\n        default:\n          label = `Unknown WebGL Error: ${error.toString(16)}`;\n      }\n      throw new Error(label);\n    }\n  }\n  deleteTexture(texture: WebGLTexture): void {\n    this.gl.deleteTexture(texture);\n  }\n  deleteProgram(program: WebGLProgram): void {\n    this.gl.deleteProgram(program);\n  }\n  getEncoder(dataType: Encoder.DataType, channels: number, usage: Encoder.Usage = Encoder.Usage.Default): DataEncoder {\n    if (this.version === 2) {\n      return new DataEncoders.RedFloat32DataEncoder(this.gl as WebGL2RenderingContext, channels);\n    }\n\n    switch (dataType) {\n      case 'float':\n        if (usage === Encoder.Usage.UploadOnly || this.isRenderFloat32Supported) {\n          return new DataEncoders.RGBAFloatDataEncoder(this.gl, channels);\n        } else {\n          return new DataEncoders.RGBAFloatDataEncoder(\n              this.gl, channels, this.textureHalfFloatExtension!.HALF_FLOAT_OES);\n        }\n      case 'int':\n        throw new Error('not implemented');\n      case 'byte':\n        return new DataEncoders.Uint8DataEncoder(this.gl, channels);\n      default:\n        throw new Error(`Invalid dataType: ${dataType}`);\n    }\n  }\n  clearActiveTextures(): void {\n    const gl = this.gl;\n    for (let unit = 0; unit < this.maxTextureImageUnits; ++unit) {\n      gl.activeTexture(gl.TEXTURE0 + unit);\n      gl.bindTexture(gl.TEXTURE_2D, null);\n    }\n  }\n  dispose(): void {\n    if (this.disposed) {\n      return;\n    }\n    const gl = this.gl;\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.deleteFramebuffer(this.framebuffer);\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    gl.deleteBuffer(this.vertexbuffer);\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n    gl.finish();\n    this.disposed = true;\n  }\n\n  private createDefaultGeometry(): Float32Array {\n    // Sets of x,y,z(=0),s,t coordinates.\n    return new Float32Array([\n      -1.0, 1.0,  0.0, 0.0, 1.0,  // upper left\n      -1.0, -1.0, 0.0, 0.0, 0.0,  // lower left\n      1.0,  1.0,  0.0, 1.0, 1.0,  // upper right\n      1.0,  -1.0, 0.0, 1.0, 0.0   // lower right\n    ]);\n  }\n  private createVertexbuffer(): WebGLBuffer {\n    const gl = this.gl;\n    const buffer = gl.createBuffer();\n    if (!buffer) {\n      throw new Error('createBuffer() returned null');\n    }\n    const geometry = this.createDefaultGeometry();\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, geometry, gl.STATIC_DRAW);\n    this.checkError();\n    return buffer;\n  }\n  private createFramebuffer(): WebGLFramebuffer {\n    const fb = this.gl.createFramebuffer();\n    if (!fb) {\n      throw new Error('createFramebuffer returned null');\n    }\n    return fb;\n  }\n\n  private queryVitalParameters(): void {\n    const gl = this.gl;\n\n    this.isFloatTextureAttachableToFrameBuffer = this.checkFloatTextureAttachableToFrameBuffer();\n    this.isRenderFloat32Supported = this.checkRenderFloat32();\n    this.isFloat32DownloadSupported = this.checkFloat32Download();\n\n    if (this.version === 1 && !this.textureHalfFloatExtension && !this.isRenderFloat32Supported) {\n      throw new Error('both float32 and float16 TextureType are not supported');\n    }\n\n    this.isBlendSupported = !this.isRenderFloat32Supported || this.checkFloat32Blend();\n\n    // this.maxCombinedTextureImageUnits = gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);\n    this.maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n    this.maxTextureImageUnits = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n    // this.maxCubeMapTextureSize = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);\n    // this.shadingLanguageVersion = gl.getParameter(gl.SHADING_LANGUAGE_VERSION);\n    // this.webglVendor = gl.getParameter(gl.VENDOR);\n    // this.webglVersion = gl.getParameter(gl.VERSION);\n\n    if (this.version === 2) {\n      // this.max3DTextureSize = gl.getParameter(WebGL2RenderingContext.MAX_3D_TEXTURE_SIZE);\n      // this.maxArrayTextureLayers = gl.getParameter(WebGL2RenderingContext.MAX_ARRAY_TEXTURE_LAYERS);\n      // this.maxColorAttachments = gl.getParameter(WebGL2RenderingContext.MAX_COLOR_ATTACHMENTS);\n      // this.maxDrawBuffers = gl.getParameter(WebGL2RenderingContext.MAX_DRAW_BUFFERS);\n    }\n  }\n  private getExtensions(): void {\n    if (this.version === 2) {\n      this.colorBufferFloatExtension = this.gl.getExtension('EXT_color_buffer_float');\n      this.disjointTimerQueryWebgl2Extension = this.gl.getExtension('EXT_disjoint_timer_query_webgl2');\n    } else {\n      this.textureFloatExtension = this.gl.getExtension('OES_texture_float');\n      this.textureHalfFloatExtension = this.gl.getExtension('OES_texture_half_float');\n    }\n  }\n\n  private checkFloatTextureAttachableToFrameBuffer(): boolean {\n    // test whether Float32 texture is supported:\n    // STEP.1 create a float texture\n    const gl = this.gl;\n    const texture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    const internalFormat = this.version === 2 ? (gl as unknown as {RGBA32F: number}).RGBA32F : gl.RGBA;\n    gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 1, 1, 0, gl.RGBA, gl.FLOAT, null);\n    // STEP.2 bind a frame buffer\n    const frameBuffer = gl.createFramebuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n    // STEP.3 attach texture to framebuffer\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n    // STEP.4 test whether framebuffer is complete\n    const isComplete = gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.deleteTexture(texture);\n    gl.deleteFramebuffer(frameBuffer);\n    return isComplete;\n  }\n\n  private checkRenderFloat32(): boolean {\n    if (this.version === 2) {\n      if (!this.colorBufferFloatExtension) {\n        return false;\n      }\n    } else {\n      if (!this.textureFloatExtension) {\n        return false;\n      }\n    }\n    return this.isFloatTextureAttachableToFrameBuffer;\n  }\n\n  private checkFloat32Download(): boolean {\n    if (this.version === 2) {\n      if (!this.colorBufferFloatExtension) {\n        return false;\n      }\n    } else {\n      if (!this.textureFloatExtension) {\n        return false;\n      }\n      if (!this.gl.getExtension('WEBGL_color_buffer_float')) {\n        return false;\n      }\n    }\n    return this.isFloatTextureAttachableToFrameBuffer;\n  }\n\n  /**\n   * Check whether GL_BLEND is supported\n   */\n  private checkFloat32Blend(): boolean {\n    // it looks like currently (2019-05-08) there is no easy way to detect whether BLEND is supported\n    // https://github.com/microsoft/onnxjs/issues/145\n\n    const gl = this.gl;\n\n    let texture: WebGLTexture|null|undefined;\n    let frameBuffer: WebGLFramebuffer|null|undefined;\n    let vertexShader: WebGLShader|null|undefined;\n    let fragmentShader: WebGLShader|null|undefined;\n    let program: WebGLProgram|null|undefined;\n\n    try {\n      texture = gl.createTexture();\n      frameBuffer = gl.createFramebuffer();\n      gl.bindTexture(gl.TEXTURE_2D, texture);\n\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      const internalFormat = this.version === 2 ? (gl as unknown as {RGBA32F: number}).RGBA32F : gl.RGBA;\n      gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 1, 1, 0, gl.RGBA, gl.FLOAT, null);\n\n      gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n\n      gl.enable(gl.BLEND);\n\n      vertexShader = gl.createShader(gl.VERTEX_SHADER);\n      if (!vertexShader) {\n        return false;\n      }\n      gl.shaderSource(vertexShader, 'void main(){}');\n      gl.compileShader(vertexShader);\n\n      fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n      if (!fragmentShader) {\n        return false;\n      }\n      gl.shaderSource(fragmentShader, 'precision highp float;void main(){gl_FragColor=vec4(0.5);}');\n      gl.compileShader(fragmentShader);\n\n      program = gl.createProgram();\n      if (!program) {\n        return false;\n      }\n      gl.attachShader(program, vertexShader);\n      gl.attachShader(program, fragmentShader);\n      gl.linkProgram(program);\n      gl.useProgram(program);\n\n      gl.drawArrays(gl.POINTS, 0, 1);\n      return gl.getError() === gl.NO_ERROR;\n\n    } finally {\n      gl.disable(gl.BLEND);\n\n      if (program) {\n        gl.deleteProgram(program);\n      }\n      if (vertexShader) {\n        gl.deleteShader(vertexShader);\n      }\n      if (fragmentShader) {\n        gl.deleteShader(fragmentShader);\n      }\n      if (frameBuffer) {\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n        gl.deleteFramebuffer(frameBuffer);\n      }\n      if (texture) {\n        gl.bindTexture(gl.TEXTURE_2D, null);\n        gl.deleteTexture(texture);\n      }\n    }\n  }\n\n  beginTimer(): WebGLQuery {\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.disjointTimerQueryWebgl2Extension;\n\n      const query = gl2.createQuery() as WebGLQuery;\n      gl2.beginQuery(ext.TIME_ELAPSED_EXT, query);\n      return query;\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported.');\n    }\n  }\n\n  endTimer() {\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.disjointTimerQueryWebgl2Extension;\n      gl2.endQuery(ext.TIME_ELAPSED_EXT);\n      return;\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported');\n    }\n  }\n\n  isTimerResultAvailable(query: WebGLQuery): boolean {\n    let available = false, disjoint = false;\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.disjointTimerQueryWebgl2Extension;\n\n      available = gl2.getQueryParameter(query, gl2.QUERY_RESULT_AVAILABLE);\n      disjoint = gl2.getParameter(ext.GPU_DISJOINT_EXT);\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported');\n    }\n\n    return available && !disjoint;\n  }\n\n  getTimerResult(query: WebGLQuery): number {\n    let timeElapsed = 0;\n    if (this.version === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      timeElapsed = gl2.getQueryParameter(query, gl2.QUERY_RESULT);\n      gl2.deleteQuery(query);\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported');\n    }\n    // return miliseconds\n    return timeElapsed / 1000000;\n  }\n\n  async waitForQueryAndGetTime(query: WebGLQuery): Promise<number> {\n    await repeatedTry(() => this.isTimerResultAvailable(query));\n    return this.getTimerResult(query);\n  }\n\n  public async createAndWaitForFence(): Promise<void> {\n    const fenceContext = this.createFence(this.gl);\n    return this.pollFence(fenceContext);\n  }\n\n  private createFence(gl: WebGLRenderingContext): FenceContext {\n    let isFencePassed: () => boolean;\n    const gl2 = gl as WebGL2RenderingContext;\n    const query = gl2.fenceSync(gl2.SYNC_GPU_COMMANDS_COMPLETE, 0);\n    gl.flush();\n    if (query === null) {\n      isFencePassed = () => true;\n    } else {\n      isFencePassed = () => {\n        const status = gl2.clientWaitSync(query, 0, 0);\n        return status === gl2.ALREADY_SIGNALED || status === gl2.CONDITION_SATISFIED;\n      };\n    }\n    return {query, isFencePassed};\n  }\n\n  async pollFence(fenceContext: FenceContext) {\n    return new Promise<void>(resolve => {\n      void this.addItemToPoll(() => fenceContext.isFencePassed(), () => resolve());\n    });\n  }\n\n  private itemsToPoll: PollItem[] = [];\n\n  pollItems(): void {\n    // Find the last query that has finished.\n    const index = linearSearchLastTrue(this.itemsToPoll.map(x => x.isDoneFn));\n    for (let i = 0; i <= index; ++i) {\n      const {resolveFn} = this.itemsToPoll[i];\n      resolveFn();\n    }\n    this.itemsToPoll = this.itemsToPoll.slice(index + 1);\n  }\n\n  private async addItemToPoll(isDoneFn: () => boolean, resolveFn: () => void) {\n    this.itemsToPoll.push({isDoneFn, resolveFn});\n    if (this.itemsToPoll.length > 1) {\n      // We already have a running loop that polls.\n      return;\n    }\n    // Start a new loop that polls.\n    await repeatedTry(() => {\n      this.pollItems();\n      // End the loop if no more items to poll.\n      return this.itemsToPoll.length === 0;\n    });\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {SessionHandler} from './backend';\nimport {Graph} from './graph';\nimport {Logger, Profiler} from './instrument';\nimport {Operator} from './operators';\nimport {Tensor} from './tensor';\n\nclass KernelOp {\n  constructor(public op: Operator, public node: Graph.Node) {}\n}\n\nexport class ExecutionPlan {\n  constructor(private graph: Graph, ops: Operator[], private profiler: Readonly<Profiler>) {\n    this.initialize(ops);\n  }\n\n  initialize(ops: Operator[]) {\n    this.profiler.event('session', 'ExecutionPlan.initialize', () => {\n      const graphNodes = this.graph.getNodes();\n      if (graphNodes.length !== ops.length) {\n        throw new Error('The size of nodes and OPs do not match.');\n      }\n\n      this._ops = ops.map((op, i) => new KernelOp(op, graphNodes[i]));\n      this.reset();\n\n      // look for starter node(s)\n      this._starter = [];\n      this._ops.forEach((op, i) => {\n        let resolved = true;\n        for (const input of op.node.inputs) {\n          if (\n              !this._values[input]                                   // not an initialized input\n              && this.graph.getInputIndices().indexOf(input) === -1  // not model input\n          ) {\n            resolved = false;\n            break;\n          }\n        }\n        if (resolved) {\n          this._starter.push(i);\n        }\n      });\n    });\n  }\n\n  reset() {\n    this._values = this.graph.getValues().map(i => i.tensor);\n  }\n\n  async execute(sessionHandler: SessionHandler, modelInputs: Tensor[]): Promise<Tensor[]> {\n    return this.profiler.event('session', 'ExecutionPlan.execute', async () => {\n      // reset mediem result\n      this.reset();\n\n      // create inference handler\n      const inferenceHandler = sessionHandler.createInferenceHandler();\n\n      // populate inputs value\n      const graphInputs = this.graph.getInputIndices();\n      if (modelInputs.length !== graphInputs.length) {\n        throw new Error(`number of input tensors don't match the number of inputs to the model: actual: ${\n            modelInputs.length} expected: ${graphInputs.length}`);\n      }\n\n      modelInputs.forEach((input, i) => {\n        const index = graphInputs[i];\n        this._values[index] = input;\n      });\n\n      // prepare running sequence\n      const sequence: number[] = this._starter.slice(0);\n\n      // execution iterations\n      const graphValues = this.graph.getValues();\n      const graphNodes = this.graph.getNodes();\n\n      let rear = 0;\n      while (rear < sequence.length) {\n        const thisOpIndex = sequence[rear++];\n        const thisOp = this._ops[thisOpIndex];\n\n        // check input\n        const inputList = thisOp.node.inputs.map(i => this._values[i]);\n        if (inputList.indexOf(undefined) !== -1) {\n          throw new Error(`unresolved input detected: op: ${thisOp.node}`);\n        }\n\n        // run\n        const inputTensors = inputList as Tensor[];\n        Logger.verbose(\n            'ExecPlan',\n            `Runing op:${thisOp.node.name} (${\n                inputTensors.map((t, i) => `'${thisOp.node.inputs[i]}': ${t.type}[${t.dims.join(',')}]`).join(', ')})`);\n\n        const outputList = await this.profiler.event(\n            'node', thisOp.node.name, async () => thisOp.op.impl(inferenceHandler, inputTensors, thisOp.op.context));\n\n        // check output\n        if (outputList.length !== thisOp.node.outputs.length) {\n          throw new Error('the size of output does not match model definition.');\n        }\n\n        // fill value\n        outputList.forEach((output, i) => {\n          const j = thisOp.node.outputs[i];\n          if (this._values[j]) {\n            throw new Error(`output [${j}] already has value: op:${thisOp.node.name}`);\n          }\n          this._values[j] = output;\n        });\n\n        // resolve downstream nodes\n        const downstreamNodes = new Set<number>();\n        outputList.forEach((output, i) => {\n          const j = thisOp.node.outputs[i];\n          for (const currentDownstreamNodeIndex of graphValues[j].to) {\n            const currentDownstreamNode = graphNodes[currentDownstreamNodeIndex];\n            let resolved = true;\n            for (const k of currentDownstreamNode.inputs) {\n              if (!this._values[k]) {\n                resolved = false;\n                break;\n              }\n            }\n            if (resolved) {\n              downstreamNodes.add(currentDownstreamNodeIndex);\n            }\n          }\n        });\n        sequence.push(...downstreamNodes);\n      }\n\n      const output: Tensor[] = [];\n      for (let i = 0; i < this.graph.getOutputIndices().length; i++) {\n        const outputIndex = this.graph.getOutputIndices()[i];\n        const outputTensor = this._values[outputIndex];\n        if (outputTensor === undefined) {\n          throw new Error(`required output [${outputIndex}] does not have value`);\n        }\n        if (outputIndex === 0) {\n          await outputTensor.getData();\n        } else {\n          // eslint-disable-next-line no-unused-expressions\n          outputTensor.data;\n        }\n        output.push(outputTensor);\n      }\n      Logger.verbose('ExecPlan', 'disposing of inferenceHandler');\n      inferenceHandler.dispose();\n      return output;\n    });\n  }\n\n  _values: Array<Tensor|undefined>;\n  _ops: KernelOp[];\n  _starter: number[];\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from './attribute';\nimport {onnxruntime} from './ort-schema/flatbuffers/ort-generated';\nimport {onnx} from './ort-schema/protobuf/onnx';\nimport {Tensor} from './tensor';\nimport {LongUtil, MAX_CLIP, MIN_CLIP, ProtoUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport declare namespace Graph {\n  export interface Shape {\n    readonly dims: readonly number[];\n  }\n  export interface ValueType {\n    readonly tensorType: Tensor.DataType;\n    readonly shape: Shape;\n  }\n  export interface Value {\n    // the tensor data. empty for non-initialized inputs\n    readonly tensor?: Tensor;\n\n    // index to the Node where the value comes from. -1 for initializer.\n    readonly from: number;\n\n    // indices to the Nodes where the values go to.\n    readonly to: readonly number[];\n\n    // value type specification. empty for non-input values.\n    readonly type?: ValueType;\n  }\n  export interface Node {\n    // name of the node\n    readonly name: string;\n\n    // the operator type\n    readonly opType: string;\n\n    // indices to the Values where the inputs come from.\n    readonly inputs: readonly number[];\n\n    // indices to the Values where the outpus go to.\n    readonly outputs: readonly number[];\n\n    // the attributes that used by the operator\n    readonly attributes: Attribute;\n  }\n\n  /**\n   * a Transformer is an instance that allows all possible transformation operations that applied to a graph\n   */\n  export interface Transformer {\n    removeAllIdentityNodes(): void;\n    removeAllDropoutNodes(): void;\n    fuseConvActivationNodes(): void;\n    // TODO: add generic functions to manipulate the graph\n  }\n\n  // an initializer can use transformer to transform the graph\n  export interface Initializer {\n    transformGraph(transformer: Transformer): void;\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport interface Graph {\n  getInputIndices(): readonly number[];\n  getInputNames(): readonly string[];\n  getOutputIndices(): readonly number[];\n  getOutputNames(): readonly string[];\n  getValues(): readonly Graph.Value[];\n  getNodes(): readonly Graph.Node[];\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention, @typescript-eslint/no-redeclare\nexport const Graph = {\n  /**\n   * construct a graph from a graph protobuf type\n   */\n  from: (graphProto: onnx.IGraphProto|ortFbs.Graph, initializer?: Graph.Initializer) =>\n      new GraphImpl(graphProto, initializer),\n};\n\nclass Value implements Graph.Value {\n  constructor(valueInfo?: onnx.IValueInfoProto) {\n    this._from = undefined;\n    this._to = [];\n    this.tensor = undefined;\n    this.type = undefined;\n\n    if (valueInfo) {\n      this.type = ProtoUtil.tensorValueTypeFromProto(valueInfo.type!.tensorType!);\n    }\n  }\n\n  _from?: number;  // -1 represent from initializer\n  get from() {\n    return this._from!;\n  }\n  _to: number[];\n  get to() {\n    return this._to;\n  }\n  type?: Graph.ValueType;\n  tensor?: Tensor;\n}\n\nclass Node implements Graph.Node {\n  constructor(_nodeProto: onnx.INodeProto|ortFbs.Node, name?: string) {\n    if (_nodeProto instanceof onnx.NodeProto) {\n      this.name = _nodeProto.name;\n      this.opType = _nodeProto.opType;\n      this.attributes = new Attribute(_nodeProto.attribute);\n    } else if (_nodeProto instanceof ortFbs.Node) {\n      this.name = name ?? _nodeProto.name()!;\n      this.opType = _nodeProto.opType()!;\n      this.attributes = new Attribute(ProtoUtil.tensorAttributesFromORTFormat(_nodeProto));\n    }\n\n    this.inputs = [];\n    this.outputs = [];\n    this.executeNode = true;\n  }\n\n  name: string;\n  opType: string;\n  inputs: number[];\n  outputs: number[];\n  attributes: Attribute;\n  executeNode: boolean;\n}\n\nclass GraphImpl implements Graph, Graph.Transformer {\n  private _allData: Value[];\n\n  private _allInputIndices: number[];\n  private _allInputNames: string[];\n\n  private _allOutputIndices: number[];\n  private _allOutputNames: string[];\n\n  private _nodes: Node[];\n\n  constructor(graph: onnx.IGraphProto|ortFbs.Graph, graphInitializer?: Graph.Initializer) {\n    if (!graph) {\n      throw new TypeError('graph is empty');\n    }\n\n    // build the graph - will throw exceptions if something fatal is detected\n    this.buildGraph(graph);\n\n    // execute any transformation logic for the graph (if applicable)\n    this.transformGraph(graphInitializer);\n\n    // check for cycles and other inconsistencies - will throw exceptions if something fatal is detected\n    this.checkIsAcyclic();\n  }\n\n  getInputIndices(): readonly number[] {\n    return this._allInputIndices;\n  }\n\n  getInputNames(): readonly string[] {\n    return this._allInputNames;\n  }\n\n  getOutputIndices(): readonly number[] {\n    return this._allOutputIndices;\n  }\n\n  getOutputNames(): readonly string[] {\n    return this._allOutputNames;\n  }\n\n  getValues(): readonly Graph.Value[] {\n    return this._allData;\n  }\n\n  getNodes(): readonly Graph.Node[] {\n    return this._nodes;\n  }\n\n  private buildGraph(graph: onnx.IGraphProto|ortFbs.Graph) {\n    // build the graph - will throw exceptions if something fatal is detected\n    if (graph instanceof onnx.GraphProto) {\n      this.buildGraphFromOnnxFormat(graph);\n    } else if (graph instanceof ortFbs.Graph) {\n      this.buildGraphFromOrtFormat(graph);\n    } else {\n      throw new TypeError('Graph type is not supported.');\n    }\n  }\n  private buildGraphFromOnnxFormat(graph: onnx.IGraphProto) {\n    const dataIndices = new Map<string, number>();\n    this._allData = [];\n\n    this._allInputIndices = [];\n    this._allInputNames = [];\n\n    this._allOutputIndices = [];\n    this._allOutputNames = [];\n\n    this._nodes = [];\n\n    const nodesIndices = new Map<string, number>();\n\n    // scan all inputs\n    if (!graph.input) {\n      throw new Error('missing information in graph: input');\n    }\n    const inputValueNames = [];\n    for (const i of graph.input) {\n      if (dataIndices.has(i.name!)) {\n        throw new Error(`duplicated input name: ${i.name}`);\n      }\n      const currentIndex = this._allData.push(new Value(i)) - 1;\n      dataIndices.set(i.name!, currentIndex);\n      inputValueNames.push(i.name!);\n    }\n\n    // scan all initializers\n    if (!graph.initializer) {\n      throw new Error('missing information in graph: initializer');\n    }\n    for (const i of graph.initializer) {\n      let index = dataIndices.get(i.name!);\n      if (index === undefined) {\n        const value = new Value();\n        value.type = {\n          shape: {dims: ProtoUtil.tensorDimsFromProto(i.dims!)},\n          tensorType: ProtoUtil.tensorDataTypeFromProto(i.dataType!)\n        };\n        index = this._allData.push(value) - 1;\n        dataIndices.set(i.name!, index);\n      }\n      this._allData[index]._from = -1;\n      this._allData[index].tensor = Tensor.fromProto(i);\n    }\n\n    // filter out input indices\n    for (let i = 0; i < this._allData.length; i++) {\n      if (!this._allData[i].tensor) {\n        this._allInputIndices.push(i);\n        this._allInputNames.push(inputValueNames[i]);\n      }\n    }\n\n    // scan all outputs\n    if (!graph.output) {\n      throw new Error('missing information in graph: output');\n    }\n    for (const i of graph.output) {\n      if (dataIndices.has(i.name!)) {\n        throw new Error(`duplicated output name: ${i.name}`);\n      }\n      const currentIndex = this._allData.push(new Value(i)) - 1;\n      dataIndices.set(i.name!, currentIndex);\n      this._allOutputIndices.push(currentIndex);\n      this._allOutputNames.push(i.name!);\n    }\n\n    // scan all nodes\n    if (!graph.node) {\n      throw new Error('missing information in graph: node');\n    }\n    for (const nodeProto of graph.node) {\n      if (!nodeProto.name) {\n        // assign a name to the node if it doesn't have one\n        for (let pick = 0;; pick++) {\n          const name = `unnamed_${nodeProto.opType}_${pick}`;\n          if (!nodesIndices.has(name)) {\n            nodeProto.name = name;\n            break;\n          }\n        }\n      }\n\n      if (nodesIndices.has(nodeProto.name)) {\n        throw new Error(`duplicated node name: ${nodeProto.name}`);\n      }\n      const currentIndex = this._nodes.push(new Node(nodeProto)) - 1;\n      nodesIndices.set(nodeProto.name, currentIndex);\n    }\n\n    // scan node's outputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.node[i];\n      if (!nodeProto.output) {\n        throw new Error(`missing output for node: ${nodeProto.name}`);\n      }\n      for (const output of nodeProto.output) {\n        let dataIndex = dataIndices.get(output);\n        if (typeof dataIndex === 'undefined') {\n          dataIndex = this._allData.push(new Value()) - 1;\n          dataIndices.set(output, dataIndex);\n        }\n        node.outputs.push(dataIndex);\n\n        if (this._allData[dataIndex]._from !== undefined) {\n          throw new Error(`multiple nodes output to one data value: ${dataIndex}`);\n        }\n        this._allData[dataIndex]._from = i;\n\n        // for the 'Constant' operator, just create a new edge in the graph corresponding to the 'output' of the\n        // operator and ignore the node from the graph\n        if (nodeProto.opType === 'Constant') {\n          if (!nodeProto.attribute || nodeProto.attribute.length !== 1 || !nodeProto.attribute[0].t) {\n            throw new Error('missing attributes or missing tensor value in attributes for this Constant operator');\n          }\n          if (!nodeProto.output || nodeProto.output.length !== 1) {\n            throw new Error('missing output or incorrect number of outputs for this Constant operator');\n          }\n          node.outputs.pop();\n          node.executeNode = false;\n\n          this._allData[dataIndex]._from = -1;\n          this._allData[dataIndex].tensor = Tensor.fromProto(nodeProto.attribute[0].t);\n        }\n      }\n    }\n\n    // scan node's inputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.node[i];\n\n      if (!nodeProto.input) {\n        throw new Error(`missing input for node: ${nodeProto.name}`);\n      }\n      for (const input of nodeProto.input) {\n        const dataIndex = dataIndices.get(input);\n        if (typeof dataIndex === 'undefined') {\n          // handle exception when opset > 9 and roi / scales not given\n          if (input === '' && (nodeProto.input.length === 3 || nodeProto.input.length === 4) &&\n              nodeProto.opType === 'Resize') {\n            continue;\n          }\n          throw new Error(`unrecognized input '${input}' for node: ${nodeProto.name}`);\n        }\n        node.inputs.push(dataIndex);\n\n        this._allData[dataIndex]._to.push(i);\n      }\n    }\n\n    return true;\n  }\n\n  private buildGraphFromOrtFormat(graph: ortFbs.Graph) {\n    const dataIndices = new Map<string, number>();\n    this._allData = [];\n\n    this._allInputIndices = [];\n    this._allInputNames = [];\n\n    this._allOutputIndices = [];\n    this._allOutputNames = [];\n\n    this._nodes = [];\n\n    const nodesIndices = new Map<string, number>();\n\n    // scan all inputs\n    const inputValueNames = [];\n    for (let i = 0; i < graph.inputsLength(); i++) {\n      const inputName = graph.inputs(i);\n      if (dataIndices.has(inputName)) {\n        throw new Error(`duplicated input name: ${inputName}`);\n      }\n      // Find the input typeInfo from nodeargs\n      for (let j = 0; j < graph.nodeArgsLength(); j++) {\n        if (graph.nodeArgs(j)?.name() === inputName) {\n          const value = new Value();\n          const valueType = graph.nodeArgs(j)?.type()?.valueType();\n          if (valueType !== ortFbs.TypeInfoValue.tensor_type) {\n            throw new Error('Unexpected value type for the nodeArg.');\n          }\n          const valueInfo = graph.nodeArgs(j)!.type()!.value(new ortFbs.TensorTypeAndShape())!;\n          const type = ProtoUtil.tensorDataTypeFromProto(valueInfo.elemType());\n          const shape = valueInfo.shape()!;\n          const dims = [];\n          for (let k = 0; k < shape.dimLength()!; k++) {\n            dims.push(LongUtil.longToNumber(shape.dim(k)!.value()!.dimValue()!));\n          }\n          value.type = {shape: {dims}, tensorType: type};\n          const currentIndex = this._allData.push(value) - 1;\n          dataIndices.set(inputName, currentIndex);\n          inputValueNames.push(inputName);\n        }\n      }\n    }\n    // check initializers\n    for (let i = 0; i < graph.initializersLength(); i++) {\n      const initializer = graph.initializers(i)!;\n      let index = dataIndices.get(initializer.name()!);\n      if (index === undefined) {\n        const value = new Value();\n        const dims = ProtoUtil.tensorDimsFromORTFormat(initializer);\n        const type = ProtoUtil.tensorDataTypeFromProto(initializer.dataType());\n        value.type = {shape: {dims}, tensorType: type};\n        index = this._allData.push(value) - 1;\n        dataIndices.set(initializer.name()!, index);\n      }\n      this._allData[index]._from = -1;\n      this._allData[index].tensor = Tensor.fromOrtTensor(initializer);\n    }\n\n    // filter out input indices\n    for (let i = 0; i < this._allData.length; i++) {\n      if (!this._allData[i].tensor) {\n        this._allInputIndices.push(i);\n        this._allInputNames.push(inputValueNames[i]);\n      }\n    }\n\n    // scan all outputs\n    for (let i = 0; i < graph.outputsLength(); i++) {\n      const outputName = graph.outputs(i);\n      if (dataIndices.has(outputName)) {\n        throw new Error(`duplicated output name: ${outputName}`);\n      }\n      const currentIndex = this._allData.push(new Value()) - 1;\n      dataIndices.set(outputName, currentIndex);\n      this._allOutputIndices.push(currentIndex);\n      this._allOutputNames.push(outputName);\n    }\n\n    // scan all nodes\n    if (!graph.nodes) {\n      throw new Error('missing information in graph: node');\n    }\n    for (let i = 0; i < graph.nodesLength(); i++) {\n      const nodeProto = graph.nodes(i);\n      let name = nodeProto!.name();\n      if (!name) {\n        // assign a name to the node if it doesn't have one\n        for (let pick = 0;; pick++) {\n          name = `unnamed_${nodeProto!.opType()}_${pick}`;\n          if (!nodesIndices.has(name)) {\n            // an unique name is found. break.\n            break;\n          }\n        }\n      }\n\n      if (nodesIndices.has(name)) {\n        throw new Error(`duplicated node name: ${name}`);\n      }\n      const currentIndex = this._nodes.push(new Node(nodeProto!, name)) - 1;\n      nodesIndices.set(name, currentIndex);\n    }\n\n    // scan node's outputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.nodes(i);\n      if (nodeProto == null) {\n        throw new Error(`No node exists at index ${i}`);\n      }\n      if (nodeProto?.outputsLength() === 0) {\n        throw new Error(`missing output for node: ${nodeProto.name}`);\n      }\n      for (let j = 0; j < nodeProto?.outputsLength(); j++) {\n        const output = nodeProto?.outputs(j);\n        let dataIndex = dataIndices.get(output);\n        if (typeof dataIndex === 'undefined') {\n          dataIndex = this._allData.push(new Value()) - 1;\n          dataIndices.set(output, dataIndex);\n        }\n        node.outputs.push(dataIndex);\n\n        if (this._allData[dataIndex]._from !== undefined) {\n          throw new Error(`multiple nodes output to one data value: ${dataIndex}`);\n        }\n        this._allData[dataIndex]._from = i;\n\n        // for the 'Constant' operator, just create a new edge in the graph corresponding to the 'output' of the\n        // operator and ignore the node from the graph\n        if (nodeProto.opType() === 'Constant') {\n          if (nodeProto.attributesLength() !== 1 || !nodeProto.attributes(0)!.t()) {\n            throw new Error('missing attributes or missing tensor value in attributes for this Constant operator');\n          }\n          if (nodeProto.outputsLength() !== 1) {\n            throw new Error('missing output or incorrect number of outputs for this Constant operator');\n          }\n          node.outputs.pop();\n          node.executeNode = false;\n\n          this._allData[dataIndex]._from = -1;\n          this._allData[dataIndex].tensor = Tensor.fromOrtTensor(nodeProto.attributes(0)!.t()!);\n        }\n      }\n    }\n\n    // scan node's inputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.nodes(i)!;\n\n      if (nodeProto.inputsLength() === 0) {\n        throw new Error(`missing input for node: ${nodeProto.name}`);\n      }\n      for (let j = 0; j < nodeProto.inputsLength()!; j++) {\n        const input = nodeProto.inputs(j)!;\n        const dataIndex = dataIndices.get(input);\n        if (typeof dataIndex === 'undefined') {\n          throw new Error(`unrecognized input '${input}' for node: ${nodeProto!.name()}`);\n        }\n        node.inputs.push(dataIndex);\n\n        this._allData[dataIndex]._to.push(i);\n      }\n    }\n  }\n\n  private checkIsAcyclic() {\n    // go through the graph and check for cycles or other fatal inconsistencies\n    const starters: Set<number> = new Set<number>();\n    this._allInputIndices.forEach(i => {\n      const data = this._allData[i];\n      data._to.forEach(j => {\n        starters.add(j);\n      });\n    });\n\n    // Iterative DFS to check for cycles\n    const nodesStack = Array.from(starters);\n    const nodesState = new Array<string>(this._nodes.length).fill('white');\n\n    while (nodesStack.length > 0) {\n      const nodeIndex = nodesStack.pop()!;\n      // this node has now been processed completely. Mark this node 'black' to denote this.\n      if (nodesState[nodeIndex] === 'gray') {\n        nodesState[nodeIndex] = 'black';\n      } else {\n        // this node is under processing stage. mark this node 'gray' to denote this.\n        nodesStack.push(nodeIndex);\n        nodesState[nodeIndex] = 'gray';\n\n        this._nodes[nodeIndex].outputs.forEach((outgoingEdgeIndex) => {\n          const data = this._allData[outgoingEdgeIndex];\n          if (typeof data.tensor !== 'undefined') {\n            throw new Error('node outputs should not be initialized');\n          }\n          if (data._from !== nodeIndex) {\n            throw new Error('from property of the Value object doesn\\'t match index of Node being processed');\n          }\n          data._to.forEach((downstreamNodeIndex) => {\n            // back edge found - cyclic\n            if (nodesState[downstreamNodeIndex] === 'gray') {\n              throw new Error('model graph is cyclic');\n            }\n            // tree edge found - continue processing by adding it to stack\n            else if (nodesState[downstreamNodeIndex] === 'white') {\n              nodesStack.push(downstreamNodeIndex);\n            }\n          });\n        });\n      }\n    }\n  }\n\n  private transformGraph(graphInitializer?: Graph.Initializer): void {\n    // apply common transform\n    this.removeAllIdentityNodes();\n    this.removeAllDropoutNodes();\n    this.fuseConvActivationNodes();\n    // apply initializer specific transform\n    if (graphInitializer) {\n      graphInitializer.transformGraph(this);\n    }\n\n    // finalize graph\n    this.finalizeGraph();\n  }\n\n  /**\n   * finalize the graph.\n   *\n   * this function should be called after all the transformation completed.\n   * this function removes all unnecessary nodes and values from the graph\n   */\n  finalizeGraph() {\n    let offset = 0;\n    // delete all nodes that are not being executed\n    // The graph is represented using these two arrays\n    // this._nodes - Array holding the kernels to execute - each entry is a kernel pointing to this._allData\n    // this._allData - hold 2 fields - to [] & from - these feileds hold the graph map for inputs and outputs per node\n    // newIndices - remapping the graph after reading the flag 'executeNode'\n    const newIndices = new Array<number>(this._nodes.length, 0);\n    let nodePossition = 0;\n\n    for (let i = 0; i < this._nodes.length; i++) {\n      // giving new indexes to the nodes based on execution flag\n      newIndices[i] = nodePossition;\n      if (this._nodes[i].executeNode) {\n        if (nodePossition !== i) {\n          this._nodes[nodePossition] = this._nodes[i];\n        }\n        nodePossition++;\n\n      } else {\n        // delete all output values\n        this._nodes[i].outputs.forEach(ind => {\n          this._allData[ind]._from = -2;\n        });\n      }\n    }\n\n    // removing the unused nodes\n    this._nodes.splice(nodePossition, this._nodes.length - nodePossition);\n\n    // Updating this._allData according to the new this._nodes\n    for (let i = 0; i < this._allData.length; i++) {\n      const currentData = this._allData[i];\n      if (currentData._from !== undefined && currentData._from !== -1 && currentData._from !== -2) {\n        currentData._from = newIndices[currentData._from];\n      }\n\n      for (let j = 0; j < currentData._to.length; j++) {\n        if (currentData._to[j] >= 0) {\n          currentData._to[j] = newIndices[currentData._to[j]];\n        } else {\n          throw new Error('Trying to update a removed node');\n        }\n      }\n    }\n\n    offset = 0;\n    // delete all values that are not being referenced\n    for (let i = 0; i < this._allData.length; i++) {\n      // if current value is neither linked to next node, nor an output value, remove it.\n      if (this._allData[i].from === -2 && this._allOutputIndices.indexOf(i + offset) === -1) {\n        offset++;\n        this._allData.splice(i, 1);\n        i--;\n        continue;\n      }\n      if (offset > 0) {\n        let ind = -1;\n        // if current value is neither an input value nor an initializer, find the node it's\n        // coming from and update the corresponding node output\n        if (this._allData[i].from !== undefined && this._allData[i].from !== -1) {\n          ind = this._nodes[this._allData[i].from].outputs.indexOf(i + offset);\n          if (ind !== -1) {\n            this._nodes[this._allData[i].from].outputs[ind] = i;\n          }\n        } else {\n          // if current value is an input value, update its reference in inputIndices\n          ind = this._allInputIndices.indexOf(i + offset);\n          if (ind !== -1) {\n            this._allInputIndices[ind] = i;\n          }\n        }\n\n        // find the node that the current value is linking to and update its input reference\n        this._allData[i].to.forEach(node => {\n          ind = this._nodes[node].inputs.indexOf(i + offset);\n          if (ind !== -1) {\n            this._nodes[node].inputs[ind] = i;\n          }\n        });\n        if (this._allData[i].to.length === 0) {\n          // if current value is a graph output, update its reference in outputIndices\n          ind = this._allOutputIndices.indexOf(i + offset);\n          if (ind !== -1) {\n            this._allOutputIndices[ind] = i;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Delete the specifed node. Assume the node has one incoming input and the first output connected to other nodes.\n   * An input validation must be done before calling this function.\n   * @param nodeIndex The index of node to be deleted\n   */\n  private deleteNode(nodeIndex: number) {\n    const node = this._nodes[nodeIndex];\n    if (node.outputs.length > 1) {\n      for (let i = 1; i < node.outputs.length; i++) {\n        if (this._allData[node.outputs[i]].to.length > 0) {\n          throw new Error('Node deletion with more than one output connected to other nodes is not supported. ');\n        }\n      }\n    }\n\n    // this node wil not be executed\n    node.executeNode = false;\n    const inputValueIndex = node.inputs[0];\n    const outputValueIndex = node.outputs[0];\n    const nodesConsumingOutput = this._allData[outputValueIndex].to;\n\n    // remove this node from the to property of the input Value\n    for (let i = 0; i < node.inputs.length; i++) {\n      const delIndex = this._allData[node.inputs[i]].to.indexOf(nodeIndex);\n      // should not happen\n      if (delIndex === -1) {\n        throw new Error('The Value object doesn\\'t have the current Node in it\\'s \\'to\\' property ');\n      }\n      this._allData[node.inputs[i]].to.splice(delIndex, 1);\n    }\n\n    // clear node indices consuming this output Value\n    this._allData[outputValueIndex]._to = [];\n\n    // if the output of this node is a graph output, adjust the index appropriately\n    const index = this._allOutputIndices.indexOf(outputValueIndex);\n    if (index !== -1) {\n      this._allOutputIndices[index] = inputValueIndex;\n    }\n\n    // override the inputs for nodes consuming this node's output with the input to this node\n    if (nodesConsumingOutput && nodesConsumingOutput.length > 0) {\n      for (const nodeIndex of nodesConsumingOutput) {\n        const replaceIndex = this._nodes[nodeIndex].inputs.indexOf(outputValueIndex);\n        // should not happen\n        if (replaceIndex === -1) {\n          throw new Error('The Node object doesn\\'t have the output Value in it\\'s \\'inputs\\' property ');\n        }\n        this._nodes[nodeIndex].inputs[replaceIndex] = inputValueIndex;\n        this._allData[inputValueIndex].to.push(nodeIndex);\n      }\n    }\n  }\n\n  removeAllDropoutNodes() {\n    let nodeIndex = 0;\n    for (const node of this._nodes) {\n      // weed out 'Dropout' nodes so that no time is wasted in execution\n      if (node.opType === 'Dropout') {\n        // the node should have exactly 1 input and 1 or 2 outputs\n        if (node.inputs.length !== 1) {\n          throw new Error('Dropout nodes should only contain one input. ');\n        }\n        if (node.outputs.length !== 1 && node.outputs.length !== 2) {\n          throw new Error('Dropout nodes should contain either 1 or 2 output(s)');\n        }\n        // the second output should not be referenced by any other node\n        if (node.outputs.length === 2 && this._allData[node.outputs[1]]._to.length !== 0) {\n          throw new Error('Dropout nodes\\'s second output should not be referenced by other nodes');\n        }\n        this.deleteNode(nodeIndex);\n      }\n      nodeIndex++;\n    }\n  }\n\n  removeAllIdentityNodes() {\n    let nodeIndex = 0;\n    for (const node of this._nodes) {\n      // weed out 'Identity' nodes so that no time is wasted in execution\n      if (node.opType === 'Identity') {\n        this.deleteNode(nodeIndex);\n      }\n      nodeIndex++;\n    }\n  }\n\n  isActivation(n: Node): boolean {\n    switch (n.opType) {\n      // TODO: add other activation methods\n      case 'Relu':\n      case 'Sigmoid':\n      case 'Clip':\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  fuseConvActivationNodes() {\n    for (const node of this._nodes) {\n      if (node.opType === 'Conv') {\n        const next = this._allData[node.outputs[0]]._to;\n        if (next.length === 1 && this.isActivation(this._nodes[next[0]])) {\n          const child = this._nodes[next[0]];\n          if (child.opType === 'Clip') {\n            if (child.inputs.length === 1) {\n              try {\n                node.attributes.set(\n                    'activation_params', 'floats',\n                    [child.attributes.getFloat('min'), child.attributes.getFloat('max')]);\n              } catch (e) {\n                node.attributes.set('activation_params', 'floats', [MIN_CLIP, MAX_CLIP]);\n              }\n            } else if (\n                child.inputs.length >= 3 && this._allData[child.inputs[1]].tensor !== undefined &&\n                this._allData[child.inputs[2]].tensor !== undefined) {\n              node.attributes.set('activation_params', 'floats', [\n                this._allData[child.inputs[1]].tensor!.floatData[0], this._allData[child.inputs[2]].tensor!.floatData[0]\n              ]);\n            } else {\n              // Skip fusion with clip node since clip min and clip max are not coming from initializer\n              continue;\n            }\n          }\n          node.attributes.set('activation', 'string', (child.opType));\n          this.deleteNode(next[0]);\n        }\n      }\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Env} from 'onnxruntime-common';\n\nimport {WebGLContext} from './backends/webgl/webgl-context';\n\nexport declare namespace Logger {\n  export interface SeverityTypeMap {\n    verbose: 'v';\n    info: 'i';\n    warning: 'w';\n    error: 'e';\n    fatal: 'f';\n  }\n\n  export type Severity = keyof SeverityTypeMap;\n\n  export type Provider = 'none'|'console';\n\n  /**\n   * Logging config that used to control the behavior of logger\n   */\n  export interface Config {\n    /**\n     * Specify the logging provider. 'console' by default\n     */\n    provider?: Provider;\n    /**\n     * Specify the minimal logger serverity. 'warning' by default\n     */\n    minimalSeverity?: Logger.Severity;\n    /**\n     * Whether to output date time in log. true by default\n     */\n    logDateTime?: boolean;\n    /**\n     * Whether to output source information (Not yet supported). false by default\n     */\n    logSourceLocation?: boolean;\n  }\n\n  export interface CategorizedLogger {\n    verbose(content: string): void;\n    info(content: string): void;\n    warning(content: string): void;\n    error(content: string): void;\n    fatal(content: string): void;\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport interface Logger {\n  (category: string): Logger.CategorizedLogger;\n\n  verbose(content: string): void;\n  verbose(category: string, content: string): void;\n  info(content: string): void;\n  info(category: string, content: string): void;\n  warning(content: string): void;\n  warning(category: string, content: string): void;\n  error(content: string): void;\n  error(category: string, content: string): void;\n  fatal(content: string): void;\n  fatal(category: string, content: string): void;\n\n  /**\n   * Reset the logger configuration.\n   * @param config specify an optional default config\n   */\n  reset(config?: Logger.Config): void;\n  /**\n   * Set the logger's behavior on the given category\n   * @param category specify a category string. If '*' is specified, all previous configuration will be overwritten. If\n   * '' is specified, the default behavior will be updated.\n   * @param config the config object to indicate the logger's behavior\n   */\n  set(category: string, config: Logger.Config): void;\n\n  /**\n   * Set the logger's behavior from ort-common env\n   * @param env the env used to set logger. Currently only setting loglevel is supported through Env.\n   */\n  setWithEnv(env: Env): void;\n}\n\ninterface LoggerProvider {\n  log(severity: Logger.Severity, content: string, category?: string): void;\n}\nclass NoOpLoggerProvider implements LoggerProvider {\n  log(_severity: Logger.Severity, _content: string, _category?: string) {\n    // do nothing\n  }\n}\nclass ConsoleLoggerProvider implements LoggerProvider {\n  log(severity: Logger.Severity, content: string, category?: string) {\n    // eslint-disable-next-line no-console\n    console.log(`${this.color(severity)} ${category ? '\\x1b[35m' + category + '\\x1b[0m ' : ''}${content}`);\n  }\n\n  private color(severity: Logger.Severity) {\n    switch (severity) {\n      case 'verbose':\n        return '\\x1b[34;40mv\\x1b[0m';\n      case 'info':\n        return '\\x1b[32mi\\x1b[0m';\n      case 'warning':\n        return '\\x1b[30;43mw\\x1b[0m';\n      case 'error':\n        return '\\x1b[31;40me\\x1b[0m';\n      case 'fatal':\n        return '\\x1b[101mf\\x1b[0m';\n      default:\n        throw new Error(`unsupported severity: ${severity}`);\n    }\n  }\n}\n\nconst SEVERITY_VALUE = {\n  verbose: 1000,\n  info: 2000,\n  warning: 4000,\n  error: 5000,\n  fatal: 6000\n};\n\nconst LOGGER_PROVIDER_MAP: {readonly [provider: string]: Readonly<LoggerProvider>} = {\n  ['none']: new NoOpLoggerProvider(),\n  ['console']: new ConsoleLoggerProvider()\n};\nconst LOGGER_DEFAULT_CONFIG = {\n  provider: 'console',\n  minimalSeverity: 'warning',\n  logDateTime: true,\n  logSourceLocation: false\n};\nlet LOGGER_CONFIG_MAP:\n    {[category: string]: Readonly<Required<Logger.Config>>} = {['']: LOGGER_DEFAULT_CONFIG as Required<Logger.Config>};\n\nfunction log(category: string): Logger.CategorizedLogger;\nfunction log(severity: Logger.Severity, content: string): void;\nfunction log(severity: Logger.Severity, category: string, content: string): void;\nfunction log(severity: Logger.Severity, arg1: string, arg2?: string): void;\nfunction log(\n    arg0: string|Logger.Severity, arg1?: string, arg2?: string|number, arg3?: number): Logger.CategorizedLogger|void {\n  if (arg1 === undefined) {\n    // log(category: string): Logger.CategorizedLogger;\n    return createCategorizedLogger(arg0);\n  } else if (arg2 === undefined) {\n    // log(severity, content);\n    logInternal(arg0 as Logger.Severity, arg1, 1);\n  } else if (typeof arg2 === 'number' && arg3 === undefined) {\n    // log(severity, content, stack)\n    logInternal(arg0 as Logger.Severity, arg1, arg2);\n  } else if (typeof arg2 === 'string' && arg3 === undefined) {\n    // log(severity, category, content)\n    logInternal(arg0 as Logger.Severity, arg2, 1, arg1);\n  } else if (typeof arg2 === 'string' && typeof arg3 === 'number') {\n    // log(severity, category, content, stack)\n    logInternal(arg0 as Logger.Severity, arg2, arg3, arg1);\n  } else {\n    throw new TypeError('input is valid');\n  }\n}\n\nfunction createCategorizedLogger(category: string): Logger.CategorizedLogger {\n  return {\n    verbose: log.verbose.bind(null, category),\n    info: log.info.bind(null, category),\n    warning: log.warning.bind(null, category),\n    error: log.error.bind(null, category),\n    fatal: log.fatal.bind(null, category)\n  };\n}\n\n// NOTE: argument 'category' is put the last parameter beacause typescript\n// doesn't allow optional argument put in front of required argument. This\n// order is different from a usual logging API.\nfunction logInternal(severity: Logger.Severity, content: string, stack: number, category?: string) {\n  const config = LOGGER_CONFIG_MAP[category || ''] || LOGGER_CONFIG_MAP[''];\n  if (SEVERITY_VALUE[severity] < SEVERITY_VALUE[config.minimalSeverity]) {\n    return;\n  }\n\n  if (config.logDateTime) {\n    content = `${new Date().toISOString()}|${content}`;\n  }\n\n  if (config.logSourceLocation) {\n    // TODO: calculate source location from 'stack'\n  }\n\n  LOGGER_PROVIDER_MAP[config.provider].log(severity, content, category);\n}\n\n// eslint-disable-next-line @typescript-eslint/no-namespace\nnamespace log {\n  export function verbose(content: string): void;\n  export function verbose(category: string, content: string): void;\n  export function verbose(arg0: string, arg1?: string) {\n    log('verbose', arg0, arg1);\n  }\n  export function info(content: string): void;\n  export function info(category: string, content: string): void;\n  export function info(arg0: string, arg1?: string) {\n    log('info', arg0, arg1);\n  }\n  export function warning(content: string): void;\n  export function warning(category: string, content: string): void;\n  export function warning(arg0: string, arg1?: string) {\n    log('warning', arg0, arg1);\n  }\n  export function error(content: string): void;\n  export function error(category: string, content: string): void;\n  export function error(arg0: string, arg1?: string) {\n    log('error', arg0, arg1);\n  }\n  export function fatal(content: string): void;\n  export function fatal(category: string, content: string): void;\n  export function fatal(arg0: string, arg1?: string) {\n    log('fatal', arg0, arg1);\n  }\n\n  export function reset(config?: Logger.Config): void {\n    LOGGER_CONFIG_MAP = {};\n    set('', config || {});\n  }\n  export function set(category: string, config: Logger.Config): void {\n    if (category === '*') {\n      reset(config);\n    } else {\n      const previousConfig = LOGGER_CONFIG_MAP[category] || LOGGER_DEFAULT_CONFIG;\n      LOGGER_CONFIG_MAP[category] = {\n        provider: config.provider || previousConfig.provider,\n        minimalSeverity: config.minimalSeverity || previousConfig.minimalSeverity,\n        logDateTime: (config.logDateTime === undefined) ? previousConfig.logDateTime : config.logDateTime,\n        logSourceLocation: (config.logSourceLocation === undefined) ? previousConfig.logSourceLocation :\n                                                                      config.logSourceLocation\n      };\n    }\n\n    // TODO: we want to support wildcard or regex?\n  }\n\n  export function setWithEnv(env: Env): void {\n    const config: Logger.Config = {};\n    if (env.logLevel) {\n      config.minimalSeverity = env.logLevel as Logger.Severity;\n    }\n    set('', config);\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare, @typescript-eslint/naming-convention\nexport const Logger: Logger = log;\n\nexport declare namespace Profiler {\n  export interface Config {\n    maxNumberEvents?: number;\n    flushBatchSize?: number;\n    flushIntervalInMilliseconds?: number;\n  }\n\n  export type EventCategory = 'session'|'node'|'op'|'backend';\n\n  export interface Event {\n    end(): void|Promise<void>;\n  }\n}\n// TODO\n// class WebGLEvent implements Profiler.Event {}\n\nclass Event implements Profiler.Event {\n  constructor(\n      public category: Profiler.EventCategory, public name: string, public startTime: number,\n      private endCallback: (e: Event) => void|Promise<void>, public timer?: WebGLQuery, public ctx?: WebGLContext) {}\n\n  async end() {\n    return this.endCallback(this);\n  }\n\n  async checkTimer(): Promise<number> {\n    if (this.ctx === undefined || this.timer === undefined) {\n      throw new Error('No webgl timer found');\n    } else {\n      this.ctx.endTimer();\n      return this.ctx.waitForQueryAndGetTime(this.timer);\n    }\n  }\n}\n\nclass EventRecord {\n  constructor(\n      public category: Profiler.EventCategory, public name: string, public startTime: number, public endTime: number) {}\n}\n\nexport class Profiler {\n  static create(config?: Profiler.Config): Profiler {\n    if (config === undefined) {\n      return new this();\n    }\n    return new this(config.maxNumberEvents, config.flushBatchSize, config.flushIntervalInMilliseconds);\n  }\n\n  private constructor(maxNumberEvents?: number, flushBatchSize?: number, flushIntervalInMilliseconds?: number) {\n    this._started = false;\n    this._maxNumberEvents = maxNumberEvents === undefined ? 10000 : maxNumberEvents;\n    this._flushBatchSize = flushBatchSize === undefined ? 10 : flushBatchSize;\n    this._flushIntervalInMilliseconds = flushIntervalInMilliseconds === undefined ? 5000 : flushIntervalInMilliseconds;\n  }\n\n  // start profiling\n  start() {\n    this._started = true;\n    this._timingEvents = [];\n    this._flushTime = now();\n    this._flushPointer = 0;\n  }\n\n  // stop profiling\n  stop() {\n    this._started = false;\n    for (; this._flushPointer < this._timingEvents.length; this._flushPointer++) {\n      this.logOneEvent(this._timingEvents[this._flushPointer]);\n    }\n  }\n\n  // create an event scope for the specific function\n  event<T>(category: Profiler.EventCategory, name: string, func: () => T, ctx?: WebGLContext): T;\n  event<T>(category: Profiler.EventCategory, name: string, func: () => Promise<T>, ctx?: WebGLContext): Promise<T>;\n\n  event<T>(category: Profiler.EventCategory, name: string, func: () => T | Promise<T>, ctx?: WebGLContext): T\n      |Promise<T> {\n    const event = this._started ? this.begin(category, name, ctx) : undefined;\n    let isPromise = false;\n\n    const res = func();\n\n    // we consider a then-able object is a promise\n    if (res && typeof (res as Promise<T>).then === 'function') {\n      isPromise = true;\n      return new Promise<T>((resolve, reject) => {\n        (res as Promise<T>)\n            .then(\n                async value => {  // fulfilled\n                  if (event) {\n                    await event.end();\n                  }\n                  resolve(value);\n                },\n                async reason => {  // rejected\n                  if (event) {\n                    await event.end();\n                  }\n                  reject(reason);\n                });\n      });\n    }\n    if (!isPromise && event) {\n      const eventRes = event.end();\n      if (eventRes && typeof eventRes.then === 'function') {\n        return new Promise<T>((resolve, reject) => {\n          (eventRes).then(\n              () => {  // fulfilled\n                resolve(res);\n              },\n              (reason) => {  // rejected\n                reject(reason);\n              });\n        });\n      }\n    }\n    return res;\n  }\n\n  // begin an event\n  begin(category: Profiler.EventCategory, name: string, ctx?: WebGLContext): Event {\n    if (!this._started) {\n      throw new Error('profiler is not started yet');\n    }\n    if (ctx === undefined) {\n      const startTime = now();\n      this.flush(startTime);\n      return new Event(category, name, startTime, e => this.endSync(e));\n    } else {\n      const timer: WebGLQuery = ctx.beginTimer();\n      return new Event(category, name, 0, async e => this.end(e), timer, ctx);\n    }\n  }\n\n  // end the specific event\n  private async end(event: Event): Promise<void> {\n    const endTime: number = await event.checkTimer();\n    if (this._timingEvents.length < this._maxNumberEvents) {\n      this._timingEvents.push(new EventRecord(event.category, event.name, event.startTime, endTime));\n      this.flush(endTime);\n    }\n  }\n\n  private endSync(event: Event): void {\n    const endTime: number = now();\n    if (this._timingEvents.length < this._maxNumberEvents) {\n      this._timingEvents.push(new EventRecord(event.category, event.name, event.startTime, endTime));\n      this.flush(endTime);\n    }\n  }\n\n  private logOneEvent(event: EventRecord) {\n    Logger.verbose(\n        `Profiler.${event.category}`,\n        `${(event.endTime - event.startTime).toFixed(2)}ms on event '${event.name}' at ${event.endTime.toFixed(2)}`);\n  }\n\n  private flush(currentTime: number) {\n    if (this._timingEvents.length - this._flushPointer >= this._flushBatchSize ||\n        currentTime - this._flushTime >= this._flushIntervalInMilliseconds) {\n      // should flush when either batch size accumlated or interval elepsed\n\n      for (const previousPointer = this._flushPointer; this._flushPointer < previousPointer + this._flushBatchSize &&\n           this._flushPointer < this._timingEvents.length;\n           this._flushPointer++) {\n        this.logOneEvent(this._timingEvents[this._flushPointer]);\n      }\n\n      this._flushTime = now();\n    }\n  }\n\n  get started() {\n    return this._started;\n  }\n  private _started = false;\n  private _timingEvents: EventRecord[];\n\n  private readonly _maxNumberEvents: number;\n\n  private readonly _flushBatchSize: number;\n  private readonly _flushIntervalInMilliseconds: number;\n\n  private _flushTime: number;\n  private _flushPointer = 0;\n}\n\n/**\n * returns a number to represent the current timestamp in a resolution as high as possible.\n */\nexport const now = (typeof performance !== 'undefined' && performance.now) ? () => performance.now() : Date.now;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {flatbuffers} from 'flatbuffers';\n\nimport {Graph} from './graph';\nimport {OpSet} from './opset';\nimport {onnxruntime} from './ort-schema/flatbuffers/ort-generated';\nimport {onnx} from './ort-schema/protobuf/onnx';\nimport {LongUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport class Model {\n  // empty model\n  constructor() {}\n\n  load(buf: Uint8Array, graphInitializer?: Graph.Initializer, isOrtFormat?: boolean): void {\n    if (!isOrtFormat) {\n      // isOrtFormat === false || isOrtFormat === undefined\n      try {\n        this.loadFromOnnxFormat(buf, graphInitializer);\n        return;\n      } catch (e) {\n        if (isOrtFormat !== undefined) {\n          throw e;\n        }\n      }\n    }\n\n    this.loadFromOrtFormat(buf, graphInitializer);\n  }\n\n  private loadFromOnnxFormat(buf: Uint8Array, graphInitializer?: Graph.Initializer): void {\n    const modelProto = onnx.ModelProto.decode(buf);\n    const irVersion = LongUtil.longToNumber(modelProto.irVersion);\n    if (irVersion < 3) {\n      throw new Error('only support ONNX model with IR_VERSION>=3');\n    }\n\n    this._opsets =\n        modelProto.opsetImport.map(i => ({domain: i.domain as string, version: LongUtil.longToNumber(i.version!)}));\n\n    this._graph = Graph.from(modelProto.graph!, graphInitializer);\n  }\n\n  private loadFromOrtFormat(buf: Uint8Array, graphInitializer?: Graph.Initializer): void {\n    const fb = new flatbuffers.ByteBuffer(buf);\n    const ortModel = ortFbs.InferenceSession.getRootAsInferenceSession(fb).model()!;\n    const irVersion = LongUtil.longToNumber(ortModel.irVersion());\n    if (irVersion < 3) {\n      throw new Error('only support ONNX model with IR_VERSION>=3');\n    }\n    this._opsets = [];\n    for (let i = 0; i < ortModel.opsetImportLength(); i++) {\n      const opsetId = ortModel.opsetImport(i)!;\n      this._opsets.push({domain: opsetId?.domain() as string, version: LongUtil.longToNumber(opsetId.version()!)});\n    }\n\n    this._graph = Graph.from(ortModel.graph()!, graphInitializer);\n  }\n\n  private _graph: Graph;\n  get graph(): Graph {\n    return this._graph;\n  }\n\n  private _opsets: OpSet[];\n  get opsets(): readonly OpSet[] {\n    return this._opsets;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceHandler} from './backend';\nimport {Graph} from './graph';\nimport {Tensor} from './tensor';\n\nexport type OperatorImplementation<T> = (inferenceHandler: InferenceHandler, inputs: Tensor[], context: T) => Tensor[];\nexport type OperatorInitialization<T> = (node: Graph.Node, graph: Graph) => T;\n\nexport interface Operator {\n  readonly impl: OperatorImplementation<unknown>;\n  readonly context: Graph.Node|unknown;\n}\n\nexport const NUMBER_TYPES: readonly Tensor.DataType[] =\n    ['float32', 'float64', 'int32', 'int16', 'int8', 'uint16', 'uint32', 'uint8'];\nexport const INT_TYPES: readonly Tensor.DataType[] = ['int32', 'int16', 'int8', 'uint16', 'uint32', 'uint8'];\nexport const FLOAT_TYPES: readonly Tensor.DataType[] = ['float32', 'float64'];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from './graph';\nimport {OperatorImplementation, OperatorInitialization} from './operators';\n\nexport interface OpSet {\n  domain: string;\n  version: number;\n}\nexport declare namespace OpSet {\n  /**\n   * Domain of an opset, it can be an empty string(default value, represent for ai.onnx), or 'ai.onnx.ml'\n   */\n  type Domain = ''|'ai.onnx.ml'|'com.microsoft';\n  /**\n   * A resolve rule consists of 4 or 5 items: opType, opSetDomain, versionSelector, operatorImplementation and\n   * operatorInitialization (optional)\n   */\n  type ResolveRule = [\n    string, Domain, string, OperatorImplementation<Graph.Node>\n  ]|[string, Domain, string, OperatorImplementation<unknown>, OperatorInitialization<unknown>];\n}\n\nexport function resolveOperator(node: Graph.Node, opsets: readonly OpSet[], rules: readonly OpSet.ResolveRule[]) {\n  for (const rule of rules) {\n    const opType = rule[0];\n    const domain = rule[1];\n    const versionSelector = rule[2];\n    const opImpl = rule[3];\n    const opInit = rule[4];\n\n    if (node.opType === opType) {  // operator type matches\n      for (const opset of opsets) {\n        // opset '' and 'ai.onnx' are considered the same.\n        if (opset.domain === domain || (opset.domain === 'ai.onnx' && domain === '')) {  // opset domain found\n          if (matchSelector(opset.version, versionSelector)) {\n            return {opImpl, opInit};\n          }\n        }\n      }\n    }\n  }\n\n  throw new TypeError(`cannot resolve operator '${node.opType}' with opsets: ${\n      opsets.map(set => `${set.domain || 'ai.onnx'} v${set.version}`).join(', ')}`);\n}\n\nfunction matchSelector(version: number, selector: string): boolean {\n  if (selector.endsWith('+')) {\n    // minimum version match ('7+' expects version>=7)\n    const rangeStart = Number.parseInt(selector.substring(0, selector.length - 1), 10);\n    return !isNaN(rangeStart) && rangeStart <= version;\n  } else if (selector.split('-').length === 2) {\n    // range match ('6-8' expects 6<=version<=8)\n    const pair = selector.split('-');\n    const rangeStart = Number.parseInt(pair[0], 10);\n    const rangeEnd = Number.parseInt(pair[1], 10);\n    return !isNaN(rangeStart) && !isNaN(rangeEnd) && rangeStart <= version && version <= rangeEnd;\n  } else {\n    // exact match ('7' expects version===7)\n    return Number.parseInt(selector, 10) === version;\n  }\n}\n","// automatically generated by the FlatBuffers compiler, do not modify\n/* eslint-disable */\n\nimport {flatbuffers} from 'flatbuffers';\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum AttributeType {\n    UNDEFINED = 0,\n    FLOAT = 1,\n    INT = 2,\n    STRING = 3,\n    TENSOR = 4,\n    GRAPH = 5,\n    FLOATS = 6,\n    INTS = 7,\n    STRINGS = 8,\n    TENSORS = 9,\n    GRAPHS = 10,\n    SPARSE_TENSOR = 11,\n    SPARSE_TENSORS = 12\n  }\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum DimensionValueType {UNKNOWN = 0, VALUE = 1, PARAM = 2}\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum TensorDataType {\n    UNDEFINED = 0,\n    FLOAT = 1,\n    UINT8 = 2,\n    INT8 = 3,\n    UINT16 = 4,\n    INT16 = 5,\n    INT32 = 6,\n    INT64 = 7,\n    STRING = 8,\n    BOOL = 9,\n    FLOAT16 = 10,\n    DOUBLE = 11,\n    UINT32 = 12,\n    UINT64 = 13,\n    COMPLEX64 = 14,\n    COMPLEX128 = 15,\n    BFLOAT16 = 16,\n    FLOAT8E4M3FN = 17,\n    FLOAT8E4M3FNUZ = 18,\n    FLOAT8E5M2 = 19,\n    FLOAT8E5M2FNUZ = 20,\n  }\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum NodeType {Primitive = 0, Fused = 1}\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum TypeInfoValue {NONE = 0, tensor_type = 1, sequence_type = 2, map_type = 3}\n}\n\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Shape {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Shape\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Shape {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Shape= obj\n     * @returns Shape\n     */\n    static getRootAsShape(bb: flatbuffers.ByteBuffer, obj?: Shape): Shape {\n      return (obj || new Shape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Shape= obj\n     * @returns Shape\n     */\n    static getSizePrefixedRootAsShape(bb: flatbuffers.ByteBuffer, obj?: Shape): Shape {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Shape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Dimension= obj\n     * @returns onnxruntime.experimental.fbs.Dimension\n     */\n    dim(index: number, obj?: onnxruntime.experimental.fbs.Dimension): onnxruntime.experimental.fbs.Dimension|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Dimension())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    dimLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startShape(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimOffset\n     */\n    static addDim(builder: flatbuffers.Builder, dimOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, dimOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createDimVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startDimVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endShape(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createShape(builder: flatbuffers.Builder, dimOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Shape.startShape(builder);\n      Shape.addDim(builder, dimOffset);\n      return Shape.endShape(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Dimension {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Dimension\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Dimension {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Dimension= obj\n     * @returns Dimension\n     */\n    static getRootAsDimension(bb: flatbuffers.ByteBuffer, obj?: Dimension): Dimension {\n      return (obj || new Dimension()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Dimension= obj\n     * @returns Dimension\n     */\n    static getSizePrefixedRootAsDimension(bb: flatbuffers.ByteBuffer, obj?: Dimension): Dimension {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Dimension()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.DimensionValue= obj\n     * @returns onnxruntime.experimental.fbs.DimensionValue|null\n     */\n    value(obj?: onnxruntime.experimental.fbs.DimensionValue): onnxruntime.experimental.fbs.DimensionValue|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.DimensionValue())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    denotation(): string|null;\n    denotation(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    denotation(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startDimension(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valueOffset\n     */\n    static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, valueOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset denotationOffset\n     */\n    static addDenotation(builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, denotationOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endDimension(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createDimension(\n        builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset,\n        denotationOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Dimension.startDimension(builder);\n      Dimension.addValue(builder, valueOffset);\n      Dimension.addDenotation(builder, denotationOffset);\n      return Dimension.endDimension(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class DimensionValue {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns DimensionValue\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): DimensionValue {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param DimensionValue= obj\n     * @returns DimensionValue\n     */\n    static getRootAsDimensionValue(bb: flatbuffers.ByteBuffer, obj?: DimensionValue): DimensionValue {\n      return (obj || new DimensionValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param DimensionValue= obj\n     * @returns DimensionValue\n     */\n    static getSizePrefixedRootAsDimensionValue(bb: flatbuffers.ByteBuffer, obj?: DimensionValue): DimensionValue {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new DimensionValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.DimensionValueType\n     */\n    dimType(): onnxruntime.experimental.fbs.DimensionValueType {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? /**  */ (this.bb!.readInt8(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.DimensionValueType.UNKNOWN;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    dimValue(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    dimParam(): string|null;\n    dimParam(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    dimParam(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startDimensionValue(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.DimensionValueType dimType\n     */\n    static addDimType(builder: flatbuffers.Builder, dimType: onnxruntime.experimental.fbs.DimensionValueType) {\n      builder.addFieldInt8(0, dimType, onnxruntime.experimental.fbs.DimensionValueType.UNKNOWN);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long dimValue\n     */\n    static addDimValue(builder: flatbuffers.Builder, dimValue: flatbuffers.Long) {\n      builder.addFieldInt64(1, dimValue, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimParamOffset\n     */\n    static addDimParam(builder: flatbuffers.Builder, dimParamOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dimParamOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endDimensionValue(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createDimensionValue(\n        builder: flatbuffers.Builder, dimType: onnxruntime.experimental.fbs.DimensionValueType,\n        dimValue: flatbuffers.Long, dimParamOffset: flatbuffers.Offset): flatbuffers.Offset {\n      DimensionValue.startDimensionValue(builder);\n      DimensionValue.addDimType(builder, dimType);\n      DimensionValue.addDimValue(builder, dimValue);\n      DimensionValue.addDimParam(builder, dimParamOffset);\n      return DimensionValue.endDimensionValue(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class TensorTypeAndShape {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns TensorTypeAndShape\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): TensorTypeAndShape {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TensorTypeAndShape= obj\n     * @returns TensorTypeAndShape\n     */\n    static getRootAsTensorTypeAndShape(bb: flatbuffers.ByteBuffer, obj?: TensorTypeAndShape): TensorTypeAndShape {\n      return (obj || new TensorTypeAndShape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TensorTypeAndShape= obj\n     * @returns TensorTypeAndShape\n     */\n    static getSizePrefixedRootAsTensorTypeAndShape(bb: flatbuffers.ByteBuffer, obj?: TensorTypeAndShape):\n        TensorTypeAndShape {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new TensorTypeAndShape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TensorDataType\n     */\n    elemType(): onnxruntime.experimental.fbs.TensorDataType {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Shape= obj\n     * @returns onnxruntime.experimental.fbs.Shape|null\n     */\n    shape(obj?: onnxruntime.experimental.fbs.Shape): onnxruntime.experimental.fbs.Shape|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Shape())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startTensorTypeAndShape(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TensorDataType elemType\n     */\n    static addElemType(builder: flatbuffers.Builder, elemType: onnxruntime.experimental.fbs.TensorDataType) {\n      builder.addFieldInt32(0, elemType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset shapeOffset\n     */\n    static addShape(builder: flatbuffers.Builder, shapeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, shapeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endTensorTypeAndShape(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createTensorTypeAndShape(\n        builder: flatbuffers.Builder, elemType: onnxruntime.experimental.fbs.TensorDataType,\n        shapeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      TensorTypeAndShape.startTensorTypeAndShape(builder);\n      TensorTypeAndShape.addElemType(builder, elemType);\n      TensorTypeAndShape.addShape(builder, shapeOffset);\n      return TensorTypeAndShape.endTensorTypeAndShape(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class MapType {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns MapType\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): MapType {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param MapType= obj\n     * @returns MapType\n     */\n    static getRootAsMapType(bb: flatbuffers.ByteBuffer, obj?: MapType): MapType {\n      return (obj || new MapType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param MapType= obj\n     * @returns MapType\n     */\n    static getSizePrefixedRootAsMapType(bb: flatbuffers.ByteBuffer, obj?: MapType): MapType {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new MapType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TensorDataType\n     */\n    keyType(): onnxruntime.experimental.fbs.TensorDataType {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\n     */\n    valueType(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startMapType(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TensorDataType keyType\n     */\n    static addKeyType(builder: flatbuffers.Builder, keyType: onnxruntime.experimental.fbs.TensorDataType) {\n      builder.addFieldInt32(0, keyType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valueTypeOffset\n     */\n    static addValueType(builder: flatbuffers.Builder, valueTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, valueTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endMapType(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createMapType(\n        builder: flatbuffers.Builder, keyType: onnxruntime.experimental.fbs.TensorDataType,\n        valueTypeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      MapType.startMapType(builder);\n      MapType.addKeyType(builder, keyType);\n      MapType.addValueType(builder, valueTypeOffset);\n      return MapType.endMapType(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SequenceType {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SequenceType\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SequenceType {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SequenceType= obj\n     * @returns SequenceType\n     */\n    static getRootAsSequenceType(bb: flatbuffers.ByteBuffer, obj?: SequenceType): SequenceType {\n      return (obj || new SequenceType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SequenceType= obj\n     * @returns SequenceType\n     */\n    static getSizePrefixedRootAsSequenceType(bb: flatbuffers.ByteBuffer, obj?: SequenceType): SequenceType {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SequenceType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\n     */\n    elemType(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSequenceType(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset elemTypeOffset\n     */\n    static addElemType(builder: flatbuffers.Builder, elemTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, elemTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSequenceType(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createSequenceType(builder: flatbuffers.Builder, elemTypeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SequenceType.startSequenceType(builder);\n      SequenceType.addElemType(builder, elemTypeOffset);\n      return SequenceType.endSequenceType(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class EdgeEnd {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns EdgeEnd\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): EdgeEnd {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeIndex(): number {\n      return this.bb!.readUint32(this.bb_pos);\n    }\n\n    /**\n     * @returns number\n     */\n    srcArgIndex(): number {\n      return this.bb!.readInt32(this.bb_pos + 4);\n    }\n\n    /**\n     * @returns number\n     */\n    dstArgIndex(): number {\n      return this.bb!.readInt32(this.bb_pos + 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number node_index\n     * @param number src_arg_index\n     * @param number dst_arg_index\n     * @returns flatbuffers.Offset\n     */\n    static createEdgeEnd(\n        builder: flatbuffers.Builder, node_index: number, src_arg_index: number,\n        dst_arg_index: number): flatbuffers.Offset {\n      builder.prep(4, 12);\n      builder.writeInt32(dst_arg_index);\n      builder.writeInt32(src_arg_index);\n      builder.writeInt32(node_index);\n      return builder.offset();\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class NodeEdge {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns NodeEdge\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): NodeEdge {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param NodeEdge= obj\n     * @returns NodeEdge\n     */\n    static getRootAsNodeEdge(bb: flatbuffers.ByteBuffer, obj?: NodeEdge): NodeEdge {\n      return (obj || new NodeEdge()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param NodeEdge= obj\n     * @returns NodeEdge\n     */\n    static getSizePrefixedRootAsNodeEdge(bb: flatbuffers.ByteBuffer, obj?: NodeEdge): NodeEdge {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new NodeEdge()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns number\n     */\n    nodeIndex(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.EdgeEnd= obj\n     * @returns onnxruntime.experimental.fbs.EdgeEnd\n     */\n    inputEdges(index: number, obj?: onnxruntime.experimental.fbs.EdgeEnd): onnxruntime.experimental.fbs.EdgeEnd|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.EdgeEnd())\n                          .__init(this.bb!.__vector(this.bb_pos + offset) + index * 12, this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    inputEdgesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.EdgeEnd= obj\n     * @returns onnxruntime.experimental.fbs.EdgeEnd\n     */\n    outputEdges(index: number, obj?: onnxruntime.experimental.fbs.EdgeEnd): onnxruntime.experimental.fbs.EdgeEnd|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.EdgeEnd())\n                          .__init(this.bb!.__vector(this.bb_pos + offset) + index * 12, this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    outputEdgesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startNodeEdge(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number nodeIndex\n     */\n    static addNodeIndex(builder: flatbuffers.Builder, nodeIndex: number) {\n      builder.addFieldInt32(0, nodeIndex, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputEdgesOffset\n     */\n    static addInputEdges(builder: flatbuffers.Builder, inputEdgesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, inputEdgesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputEdgesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(12, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset outputEdgesOffset\n     */\n    static addOutputEdges(builder: flatbuffers.Builder, outputEdgesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, outputEdgesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOutputEdgesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(12, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endNodeEdge(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createNodeEdge(\n        builder: flatbuffers.Builder, nodeIndex: number, inputEdgesOffset: flatbuffers.Offset,\n        outputEdgesOffset: flatbuffers.Offset): flatbuffers.Offset {\n      NodeEdge.startNodeEdge(builder);\n      NodeEdge.addNodeIndex(builder, nodeIndex);\n      NodeEdge.addInputEdges(builder, inputEdgesOffset);\n      NodeEdge.addOutputEdges(builder, outputEdgesOffset);\n      return NodeEdge.endNodeEdge(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Node {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Node\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Node {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Node= obj\n     * @returns Node\n     */\n    static getRootAsNode(bb: flatbuffers.ByteBuffer, obj?: Node): Node {\n      return (obj || new Node()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Node= obj\n     * @returns Node\n     */\n    static getSizePrefixedRootAsNode(bb: flatbuffers.ByteBuffer, obj?: Node): Node {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Node()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    domain(): string|null;\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    domain(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    sinceVersion(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    index(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    opType(): string|null;\n    opType(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    opType(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.NodeType\n     */\n    type(): onnxruntime.experimental.fbs.NodeType {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.NodeType.Primitive;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    executionProviderType(): string|null;\n    executionProviderType(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    executionProviderType(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    inputs(index: number): string;\n    inputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    inputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    inputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    outputs(index: number): string;\n    outputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    outputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    outputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Attribute= obj\n     * @returns onnxruntime.experimental.fbs.Attribute\n     */\n    attributes(index: number, obj?: onnxruntime.experimental.fbs.Attribute): onnxruntime.experimental.fbs.Attribute\n        |null {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Attribute())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    attributesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    inputArgCounts(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    inputArgCountsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Int32Array\n     */\n    inputArgCountsArray(): Int32Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ?\n          new Int32Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    implicitInputs(index: number): string;\n    implicitInputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    implicitInputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    implicitInputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startNode(builder: flatbuffers.Builder) {\n      builder.startObject(13);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset domainOffset\n     */\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, domainOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number sinceVersion\n     */\n    static addSinceVersion(builder: flatbuffers.Builder, sinceVersion: number) {\n      builder.addFieldInt32(3, sinceVersion, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number index\n     */\n    static addIndex(builder: flatbuffers.Builder, index: number) {\n      builder.addFieldInt32(4, index, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset opTypeOffset\n     */\n    static addOpType(builder: flatbuffers.Builder, opTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, opTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.NodeType type\n     */\n    static addType(builder: flatbuffers.Builder, type: onnxruntime.experimental.fbs.NodeType) {\n      builder.addFieldInt32(6, type, onnxruntime.experimental.fbs.NodeType.Primitive);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset executionProviderTypeOffset\n     */\n    static addExecutionProviderType(builder: flatbuffers.Builder, executionProviderTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, executionProviderTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputsOffset\n     */\n    static addInputs(builder: flatbuffers.Builder, inputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(8, inputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset outputsOffset\n     */\n    static addOutputs(builder: flatbuffers.Builder, outputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(9, outputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createOutputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOutputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset attributesOffset\n     */\n    static addAttributes(builder: flatbuffers.Builder, attributesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(10, attributesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createAttributesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startAttributesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputArgCountsOffset\n     */\n    static addInputArgCounts(builder: flatbuffers.Builder, inputArgCountsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(11, inputArgCountsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createInputArgCountsVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputArgCountsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset implicitInputsOffset\n     */\n    static addImplicitInputs(builder: flatbuffers.Builder, implicitInputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(12, implicitInputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createImplicitInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startImplicitInputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endNode(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createNode(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        domainOffset: flatbuffers.Offset, sinceVersion: number, index: number, opTypeOffset: flatbuffers.Offset,\n        type: onnxruntime.experimental.fbs.NodeType, executionProviderTypeOffset: flatbuffers.Offset,\n        inputsOffset: flatbuffers.Offset, outputsOffset: flatbuffers.Offset, attributesOffset: flatbuffers.Offset,\n        inputArgCountsOffset: flatbuffers.Offset, implicitInputsOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Node.startNode(builder);\n      Node.addName(builder, nameOffset);\n      Node.addDocString(builder, docStringOffset);\n      Node.addDomain(builder, domainOffset);\n      Node.addSinceVersion(builder, sinceVersion);\n      Node.addIndex(builder, index);\n      Node.addOpType(builder, opTypeOffset);\n      Node.addType(builder, type);\n      Node.addExecutionProviderType(builder, executionProviderTypeOffset);\n      Node.addInputs(builder, inputsOffset);\n      Node.addOutputs(builder, outputsOffset);\n      Node.addAttributes(builder, attributesOffset);\n      Node.addInputArgCounts(builder, inputArgCountsOffset);\n      Node.addImplicitInputs(builder, implicitInputsOffset);\n      return Node.endNode(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class ValueInfo {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns ValueInfo\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): ValueInfo {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param ValueInfo= obj\n     * @returns ValueInfo\n     */\n    static getRootAsValueInfo(bb: flatbuffers.ByteBuffer, obj?: ValueInfo): ValueInfo {\n      return (obj || new ValueInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param ValueInfo= obj\n     * @returns ValueInfo\n     */\n    static getSizePrefixedRootAsValueInfo(bb: flatbuffers.ByteBuffer, obj?: ValueInfo): ValueInfo {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new ValueInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\n     */\n    type(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startValueInfo(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset typeOffset\n     */\n    static addType(builder: flatbuffers.Builder, typeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, typeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endValueInfo(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createValueInfo(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        typeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      ValueInfo.startValueInfo(builder);\n      ValueInfo.addName(builder, nameOffset);\n      ValueInfo.addDocString(builder, docStringOffset);\n      ValueInfo.addType(builder, typeOffset);\n      return ValueInfo.endValueInfo(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class TypeInfo {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns TypeInfo\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): TypeInfo {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TypeInfo= obj\n     * @returns TypeInfo\n     */\n    static getRootAsTypeInfo(bb: flatbuffers.ByteBuffer, obj?: TypeInfo): TypeInfo {\n      return (obj || new TypeInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TypeInfo= obj\n     * @returns TypeInfo\n     */\n    static getSizePrefixedRootAsTypeInfo(bb: flatbuffers.ByteBuffer, obj?: TypeInfo): TypeInfo {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new TypeInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    denotation(): string|null;\n    denotation(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    denotation(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TypeInfoValue\n     */\n    valueType(): onnxruntime.experimental.fbs.TypeInfoValue {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? /**  */ (this.bb!.readUint8(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TypeInfoValue.NONE;\n    }\n\n    /**\n     * @param flatbuffers.Table obj\n     * @returns ?flatbuffers.Table\n     */\n    value<T extends flatbuffers.Table>(obj: T): T|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startTypeInfo(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset denotationOffset\n     */\n    static addDenotation(builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, denotationOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TypeInfoValue valueType\n     */\n    static addValueType(builder: flatbuffers.Builder, valueType: onnxruntime.experimental.fbs.TypeInfoValue) {\n      builder.addFieldInt8(1, valueType, onnxruntime.experimental.fbs.TypeInfoValue.NONE);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valueOffset\n     */\n    static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, valueOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endTypeInfo(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createTypeInfo(\n        builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset,\n        valueType: onnxruntime.experimental.fbs.TypeInfoValue, valueOffset: flatbuffers.Offset): flatbuffers.Offset {\n      TypeInfo.startTypeInfo(builder);\n      TypeInfo.addDenotation(builder, denotationOffset);\n      TypeInfo.addValueType(builder, valueType);\n      TypeInfo.addValue(builder, valueOffset);\n      return TypeInfo.endTypeInfo(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class OperatorSetId {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns OperatorSetId\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): OperatorSetId {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param OperatorSetId= obj\n     * @returns OperatorSetId\n     */\n    static getRootAsOperatorSetId(bb: flatbuffers.ByteBuffer, obj?: OperatorSetId): OperatorSetId {\n      return (obj || new OperatorSetId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param OperatorSetId= obj\n     * @returns OperatorSetId\n     */\n    static getSizePrefixedRootAsOperatorSetId(bb: flatbuffers.ByteBuffer, obj?: OperatorSetId): OperatorSetId {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new OperatorSetId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    domain(): string|null;\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    domain(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    version(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startOperatorSetId(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset domainOffset\n     */\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, domainOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long version\n     */\n    static addVersion(builder: flatbuffers.Builder, version: flatbuffers.Long) {\n      builder.addFieldInt64(1, version, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endOperatorSetId(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createOperatorSetId(\n        builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset, version: flatbuffers.Long): flatbuffers.Offset {\n      OperatorSetId.startOperatorSetId(builder);\n      OperatorSetId.addDomain(builder, domainOffset);\n      OperatorSetId.addVersion(builder, version);\n      return OperatorSetId.endOperatorSetId(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Tensor {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Tensor\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Tensor {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Tensor= obj\n     * @returns Tensor\n     */\n    static getRootAsTensor(bb: flatbuffers.ByteBuffer, obj?: Tensor): Tensor {\n      return (obj || new Tensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Tensor= obj\n     * @returns Tensor\n     */\n    static getSizePrefixedRootAsTensor(bb: flatbuffers.ByteBuffer, obj?: Tensor): Tensor {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Tensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    dims(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    dimsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TensorDataType\n     */\n    dataType(): onnxruntime.experimental.fbs.TensorDataType {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    rawData(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    rawDataLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Uint8Array\n     */\n    rawDataArray(): Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ?\n          new Uint8Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    stringData(index: number): string;\n    stringData(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    stringData(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    stringDataLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startTensor(builder: flatbuffers.Builder) {\n      builder.startObject(6);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimsOffset\n     */\n    static addDims(builder: flatbuffers.Builder, dimsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dimsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createDimsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startDimsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TensorDataType dataType\n     */\n    static addDataType(builder: flatbuffers.Builder, dataType: onnxruntime.experimental.fbs.TensorDataType) {\n      builder.addFieldInt32(3, dataType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset rawDataOffset\n     */\n    static addRawData(builder: flatbuffers.Builder, rawDataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, rawDataOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createRawDataVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(1, data.length, 1);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt8(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startRawDataVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(1, numElems, 1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset stringDataOffset\n     */\n    static addStringData(builder: flatbuffers.Builder, stringDataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, stringDataOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createStringDataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startStringDataVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endTensor(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createTensor(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        dimsOffset: flatbuffers.Offset, dataType: onnxruntime.experimental.fbs.TensorDataType,\n        rawDataOffset: flatbuffers.Offset, stringDataOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Tensor.startTensor(builder);\n      Tensor.addName(builder, nameOffset);\n      Tensor.addDocString(builder, docStringOffset);\n      Tensor.addDims(builder, dimsOffset);\n      Tensor.addDataType(builder, dataType);\n      Tensor.addRawData(builder, rawDataOffset);\n      Tensor.addStringData(builder, stringDataOffset);\n      return Tensor.endTensor(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SparseTensor {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SparseTensor\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SparseTensor {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SparseTensor= obj\n     * @returns SparseTensor\n     */\n    static getRootAsSparseTensor(bb: flatbuffers.ByteBuffer, obj?: SparseTensor): SparseTensor {\n      return (obj || new SparseTensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SparseTensor= obj\n     * @returns SparseTensor\n     */\n    static getSizePrefixedRootAsSparseTensor(bb: flatbuffers.ByteBuffer, obj?: SparseTensor): SparseTensor {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SparseTensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor|null\n     */\n    values(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor|null\n     */\n    indices(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    dims(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    dimsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSparseTensor(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valuesOffset\n     */\n    static addValues(builder: flatbuffers.Builder, valuesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, valuesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset indicesOffset\n     */\n    static addIndices(builder: flatbuffers.Builder, indicesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, indicesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimsOffset\n     */\n    static addDims(builder: flatbuffers.Builder, dimsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dimsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createDimsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startDimsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSparseTensor(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createSparseTensor(\n        builder: flatbuffers.Builder, valuesOffset: flatbuffers.Offset, indicesOffset: flatbuffers.Offset,\n        dimsOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SparseTensor.startSparseTensor(builder);\n      SparseTensor.addValues(builder, valuesOffset);\n      SparseTensor.addIndices(builder, indicesOffset);\n      SparseTensor.addDims(builder, dimsOffset);\n      return SparseTensor.endSparseTensor(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Attribute {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Attribute\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Attribute {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Attribute= obj\n     * @returns Attribute\n     */\n    static getRootAsAttribute(bb: flatbuffers.ByteBuffer, obj?: Attribute): Attribute {\n      return (obj || new Attribute()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Attribute= obj\n     * @returns Attribute\n     */\n    static getSizePrefixedRootAsAttribute(bb: flatbuffers.ByteBuffer, obj?: Attribute): Attribute {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Attribute()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.AttributeType\n     */\n    type(): onnxruntime.experimental.fbs.AttributeType {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.AttributeType.UNDEFINED;\n    }\n\n    /**\n     * @returns number\n     */\n    f(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    i(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    s(): string|null;\n    s(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    s(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor|null\n     */\n    t(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Graph= obj\n     * @returns onnxruntime.experimental.fbs.Graph|null\n     */\n    g(obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    floats(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.readFloat32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    floatsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Float32Array\n     */\n    floatsArray(): Float32Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ?\n          new Float32Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    ints(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    intsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    strings(index: number): string;\n    strings(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    strings(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    stringsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor\n     */\n    tensors(index: number, obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    tensorsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Graph= obj\n     * @returns onnxruntime.experimental.fbs.Graph\n     */\n    graphs(index: number, obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    graphsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startAttribute(builder: flatbuffers.Builder) {\n      builder.startObject(13);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.AttributeType type\n     */\n    static addType(builder: flatbuffers.Builder, type: onnxruntime.experimental.fbs.AttributeType) {\n      builder.addFieldInt32(2, type, onnxruntime.experimental.fbs.AttributeType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number f\n     */\n    static addF(builder: flatbuffers.Builder, f: number) {\n      builder.addFieldFloat32(3, f, 0.0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long i\n     */\n    static addI(builder: flatbuffers.Builder, i: flatbuffers.Long) {\n      builder.addFieldInt64(4, i, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sOffset\n     */\n    static addS(builder: flatbuffers.Builder, sOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, sOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset tOffset\n     */\n    static addT(builder: flatbuffers.Builder, tOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, tOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset gOffset\n     */\n    static addG(builder: flatbuffers.Builder, gOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, gOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset floatsOffset\n     */\n    static addFloats(builder: flatbuffers.Builder, floatsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(8, floatsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createFloatsVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addFloat32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startFloatsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset intsOffset\n     */\n    static addInts(builder: flatbuffers.Builder, intsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(9, intsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createIntsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startIntsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset stringsOffset\n     */\n    static addStrings(builder: flatbuffers.Builder, stringsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(10, stringsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createStringsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startStringsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset tensorsOffset\n     */\n    static addTensors(builder: flatbuffers.Builder, tensorsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(11, tensorsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createTensorsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startTensorsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphsOffset\n     */\n    static addGraphs(builder: flatbuffers.Builder, graphsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(12, graphsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createGraphsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startGraphsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endAttribute(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createAttribute(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        type: onnxruntime.experimental.fbs.AttributeType, f: number, i: flatbuffers.Long, sOffset: flatbuffers.Offset,\n        tOffset: flatbuffers.Offset, gOffset: flatbuffers.Offset, floatsOffset: flatbuffers.Offset,\n        intsOffset: flatbuffers.Offset, stringsOffset: flatbuffers.Offset, tensorsOffset: flatbuffers.Offset,\n        graphsOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Attribute.startAttribute(builder);\n      Attribute.addName(builder, nameOffset);\n      Attribute.addDocString(builder, docStringOffset);\n      Attribute.addType(builder, type);\n      Attribute.addF(builder, f);\n      Attribute.addI(builder, i);\n      Attribute.addS(builder, sOffset);\n      Attribute.addT(builder, tOffset);\n      Attribute.addG(builder, gOffset);\n      Attribute.addFloats(builder, floatsOffset);\n      Attribute.addInts(builder, intsOffset);\n      Attribute.addStrings(builder, stringsOffset);\n      Attribute.addTensors(builder, tensorsOffset);\n      Attribute.addGraphs(builder, graphsOffset);\n      return Attribute.endAttribute(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Graph {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Graph\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Graph {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Graph= obj\n     * @returns Graph\n     */\n    static getRootAsGraph(bb: flatbuffers.ByteBuffer, obj?: Graph): Graph {\n      return (obj || new Graph()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Graph= obj\n     * @returns Graph\n     */\n    static getSizePrefixedRootAsGraph(bb: flatbuffers.ByteBuffer, obj?: Graph): Graph {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Graph()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor\n     */\n    initializers(index: number, obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    initializersLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.ValueInfo= obj\n     * @returns onnxruntime.experimental.fbs.ValueInfo\n     */\n    nodeArgs(index: number, obj?: onnxruntime.experimental.fbs.ValueInfo): onnxruntime.experimental.fbs.ValueInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.ValueInfo())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeArgsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Node= obj\n     * @returns onnxruntime.experimental.fbs.Node\n     */\n    nodes(index: number, obj?: onnxruntime.experimental.fbs.Node): onnxruntime.experimental.fbs.Node|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Node())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    nodesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    maxNodeIndex(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.NodeEdge= obj\n     * @returns onnxruntime.experimental.fbs.NodeEdge\n     */\n    nodeEdges(index: number, obj?: onnxruntime.experimental.fbs.NodeEdge): onnxruntime.experimental.fbs.NodeEdge|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? (obj || new onnxruntime.experimental.fbs.NodeEdge())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeEdgesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    inputs(index: number): string;\n    inputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    inputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    inputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    outputs(index: number): string;\n    outputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    outputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    outputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.SparseTensor= obj\n     * @returns onnxruntime.experimental.fbs.SparseTensor\n     */\n    sparseInitializers(index: number, obj?: onnxruntime.experimental.fbs.SparseTensor):\n        onnxruntime.experimental.fbs.SparseTensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SparseTensor())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    sparseInitializersLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startGraph(builder: flatbuffers.Builder) {\n      builder.startObject(8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset initializersOffset\n     */\n    static addInitializers(builder: flatbuffers.Builder, initializersOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, initializersOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createInitializersVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInitializersVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodeArgsOffset\n     */\n    static addNodeArgs(builder: flatbuffers.Builder, nodeArgsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, nodeArgsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodeArgsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodeArgsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodesOffset\n     */\n    static addNodes(builder: flatbuffers.Builder, nodesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, nodesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number maxNodeIndex\n     */\n    static addMaxNodeIndex(builder: flatbuffers.Builder, maxNodeIndex: number) {\n      builder.addFieldInt32(3, maxNodeIndex, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodeEdgesOffset\n     */\n    static addNodeEdges(builder: flatbuffers.Builder, nodeEdgesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, nodeEdgesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodeEdgesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodeEdgesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputsOffset\n     */\n    static addInputs(builder: flatbuffers.Builder, inputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, inputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset outputsOffset\n     */\n    static addOutputs(builder: flatbuffers.Builder, outputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, outputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createOutputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOutputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sparseInitializersOffset\n     */\n    static addSparseInitializers(builder: flatbuffers.Builder, sparseInitializersOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, sparseInitializersOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createSparseInitializersVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]):\n        flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startSparseInitializersVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endGraph(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createGraph(\n        builder: flatbuffers.Builder, initializersOffset: flatbuffers.Offset, nodeArgsOffset: flatbuffers.Offset,\n        nodesOffset: flatbuffers.Offset, maxNodeIndex: number, nodeEdgesOffset: flatbuffers.Offset,\n        inputsOffset: flatbuffers.Offset, outputsOffset: flatbuffers.Offset,\n        sparseInitializersOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Graph.startGraph(builder);\n      Graph.addInitializers(builder, initializersOffset);\n      Graph.addNodeArgs(builder, nodeArgsOffset);\n      Graph.addNodes(builder, nodesOffset);\n      Graph.addMaxNodeIndex(builder, maxNodeIndex);\n      Graph.addNodeEdges(builder, nodeEdgesOffset);\n      Graph.addInputs(builder, inputsOffset);\n      Graph.addOutputs(builder, outputsOffset);\n      Graph.addSparseInitializers(builder, sparseInitializersOffset);\n      return Graph.endGraph(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Model {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Model\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Model {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Model= obj\n     * @returns Model\n     */\n    static getRootAsModel(bb: flatbuffers.ByteBuffer, obj?: Model): Model {\n      return (obj || new Model()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Model= obj\n     * @returns Model\n     */\n    static getSizePrefixedRootAsModel(bb: flatbuffers.ByteBuffer, obj?: Model): Model {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Model()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    irVersion(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.OperatorSetId= obj\n     * @returns onnxruntime.experimental.fbs.OperatorSetId\n     */\n    opsetImport(index: number, obj?: onnxruntime.experimental.fbs.OperatorSetId):\n        onnxruntime.experimental.fbs.OperatorSetId|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.OperatorSetId())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    opsetImportLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    producerName(): string|null;\n    producerName(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    producerName(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    producerVersion(): string|null;\n    producerVersion(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    producerVersion(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    domain(): string|null;\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    domain(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    modelVersion(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Graph= obj\n     * @returns onnxruntime.experimental.fbs.Graph|null\n     */\n    graph(obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    graphDocString(): string|null;\n    graphDocString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    graphDocString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startModel(builder: flatbuffers.Builder) {\n      builder.startObject(9);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long irVersion\n     */\n    static addIrVersion(builder: flatbuffers.Builder, irVersion: flatbuffers.Long) {\n      builder.addFieldInt64(0, irVersion, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset opsetImportOffset\n     */\n    static addOpsetImport(builder: flatbuffers.Builder, opsetImportOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, opsetImportOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createOpsetImportVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOpsetImportVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset producerNameOffset\n     */\n    static addProducerName(builder: flatbuffers.Builder, producerNameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, producerNameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset producerVersionOffset\n     */\n    static addProducerVersion(builder: flatbuffers.Builder, producerVersionOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(3, producerVersionOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset domainOffset\n     */\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, domainOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long modelVersion\n     */\n    static addModelVersion(builder: flatbuffers.Builder, modelVersion: flatbuffers.Long) {\n      builder.addFieldInt64(5, modelVersion, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphOffset\n     */\n    static addGraph(builder: flatbuffers.Builder, graphOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, graphOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphDocStringOffset\n     */\n    static addGraphDocString(builder: flatbuffers.Builder, graphDocStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(8, graphDocStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endModel(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createModel(\n        builder: flatbuffers.Builder, irVersion: flatbuffers.Long, opsetImportOffset: flatbuffers.Offset,\n        producerNameOffset: flatbuffers.Offset, producerVersionOffset: flatbuffers.Offset,\n        domainOffset: flatbuffers.Offset, modelVersion: flatbuffers.Long, docStringOffset: flatbuffers.Offset,\n        graphOffset: flatbuffers.Offset, graphDocStringOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Model.startModel(builder);\n      Model.addIrVersion(builder, irVersion);\n      Model.addOpsetImport(builder, opsetImportOffset);\n      Model.addProducerName(builder, producerNameOffset);\n      Model.addProducerVersion(builder, producerVersionOffset);\n      Model.addDomain(builder, domainOffset);\n      Model.addModelVersion(builder, modelVersion);\n      Model.addDocString(builder, docStringOffset);\n      Model.addGraph(builder, graphOffset);\n      Model.addGraphDocString(builder, graphDocStringOffset);\n      return Model.endModel(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class KernelCreateInfos {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns KernelCreateInfos\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): KernelCreateInfos {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param KernelCreateInfos= obj\n     * @returns KernelCreateInfos\n     */\n    static getRootAsKernelCreateInfos(bb: flatbuffers.ByteBuffer, obj?: KernelCreateInfos): KernelCreateInfos {\n      return (obj || new KernelCreateInfos()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param KernelCreateInfos= obj\n     * @returns KernelCreateInfos\n     */\n    static getSizePrefixedRootAsKernelCreateInfos(bb: flatbuffers.ByteBuffer, obj?: KernelCreateInfos):\n        KernelCreateInfos {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new KernelCreateInfos()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    nodeIndices(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.readUint32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeIndicesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Uint32Array\n     */\n    nodeIndicesArray(): Uint32Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ?\n          new Uint32Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    kernelDefHashes(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.readUint64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    kernelDefHashesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startKernelCreateInfos(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodeIndicesOffset\n     */\n    static addNodeIndices(builder: flatbuffers.Builder, nodeIndicesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nodeIndicesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodeIndicesVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodeIndicesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset kernelDefHashesOffset\n     */\n    static addKernelDefHashes(builder: flatbuffers.Builder, kernelDefHashesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, kernelDefHashesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createKernelDefHashesVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startKernelDefHashesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endKernelCreateInfos(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createKernelCreateInfos(\n        builder: flatbuffers.Builder, nodeIndicesOffset: flatbuffers.Offset,\n        kernelDefHashesOffset: flatbuffers.Offset): flatbuffers.Offset {\n      KernelCreateInfos.startKernelCreateInfos(builder);\n      KernelCreateInfos.addNodeIndices(builder, nodeIndicesOffset);\n      KernelCreateInfos.addKernelDefHashes(builder, kernelDefHashesOffset);\n      return KernelCreateInfos.endKernelCreateInfos(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SubGraphSessionState {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SubGraphSessionState\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SubGraphSessionState {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SubGraphSessionState= obj\n     * @returns SubGraphSessionState\n     */\n    static getRootAsSubGraphSessionState(bb: flatbuffers.ByteBuffer, obj?: SubGraphSessionState): SubGraphSessionState {\n      return (obj || new SubGraphSessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SubGraphSessionState= obj\n     * @returns SubGraphSessionState\n     */\n    static getSizePrefixedRootAsSubGraphSessionState(bb: flatbuffers.ByteBuffer, obj?: SubGraphSessionState):\n        SubGraphSessionState {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SubGraphSessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    graphId(): string|null;\n    graphId(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    graphId(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.SessionState= obj\n     * @returns onnxruntime.experimental.fbs.SessionState|null\n     */\n    sessionState(obj?: onnxruntime.experimental.fbs.SessionState): onnxruntime.experimental.fbs.SessionState|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SessionState())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSubGraphSessionState(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphIdOffset\n     */\n    static addGraphId(builder: flatbuffers.Builder, graphIdOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, graphIdOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sessionStateOffset\n     */\n    static addSessionState(builder: flatbuffers.Builder, sessionStateOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, sessionStateOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSubGraphSessionState(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      builder.requiredField(offset, 4);  // graph_id\n      return offset;\n    }\n\n    static createSubGraphSessionState(\n        builder: flatbuffers.Builder, graphIdOffset: flatbuffers.Offset,\n        sessionStateOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SubGraphSessionState.startSubGraphSessionState(builder);\n      SubGraphSessionState.addGraphId(builder, graphIdOffset);\n      SubGraphSessionState.addSessionState(builder, sessionStateOffset);\n      return SubGraphSessionState.endSubGraphSessionState(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SessionState {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SessionState\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SessionState {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SessionState= obj\n     * @returns SessionState\n     */\n    static getRootAsSessionState(bb: flatbuffers.ByteBuffer, obj?: SessionState): SessionState {\n      return (obj || new SessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SessionState= obj\n     * @returns SessionState\n     */\n    static getSizePrefixedRootAsSessionState(bb: flatbuffers.ByteBuffer, obj?: SessionState): SessionState {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.KernelCreateInfos= obj\n     * @returns onnxruntime.experimental.fbs.KernelCreateInfos|null\n     */\n    kernels(obj?: onnxruntime.experimental.fbs.KernelCreateInfos): onnxruntime.experimental.fbs.KernelCreateInfos|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.KernelCreateInfos())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.SubGraphSessionState= obj\n     * @returns onnxruntime.experimental.fbs.SubGraphSessionState\n     */\n    subGraphSessionStates(index: number, obj?: onnxruntime.experimental.fbs.SubGraphSessionState):\n        onnxruntime.experimental.fbs.SubGraphSessionState|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SubGraphSessionState())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    subGraphSessionStatesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSessionState(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset kernelsOffset\n     */\n    static addKernels(builder: flatbuffers.Builder, kernelsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, kernelsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset subGraphSessionStatesOffset\n     */\n    static addSubGraphSessionStates(builder: flatbuffers.Builder, subGraphSessionStatesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, subGraphSessionStatesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createSubGraphSessionStatesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]):\n        flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startSubGraphSessionStatesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSessionState(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createSessionState(\n        builder: flatbuffers.Builder, kernelsOffset: flatbuffers.Offset,\n        subGraphSessionStatesOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SessionState.startSessionState(builder);\n      SessionState.addKernels(builder, kernelsOffset);\n      SessionState.addSubGraphSessionStates(builder, subGraphSessionStatesOffset);\n      return SessionState.endSessionState(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class InferenceSession {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns InferenceSession\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): InferenceSession {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param InferenceSession= obj\n     * @returns InferenceSession\n     */\n    static getRootAsInferenceSession(bb: flatbuffers.ByteBuffer, obj?: InferenceSession): InferenceSession {\n      return (obj || new InferenceSession()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param InferenceSession= obj\n     * @returns InferenceSession\n     */\n    static getSizePrefixedRootAsInferenceSession(bb: flatbuffers.ByteBuffer, obj?: InferenceSession): InferenceSession {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new InferenceSession()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @returns boolean\n     */\n    static bufferHasIdentifier(bb: flatbuffers.ByteBuffer): boolean {\n      return bb.__has_identifier('ORTM');\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    ortVersion(): string|null;\n    ortVersion(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    ortVersion(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Model= obj\n     * @returns onnxruntime.experimental.fbs.Model|null\n     */\n    model(obj?: onnxruntime.experimental.fbs.Model): onnxruntime.experimental.fbs.Model|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Model())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.SessionState= obj\n     * @returns onnxruntime.experimental.fbs.SessionState|null\n     */\n    sessionState(obj?: onnxruntime.experimental.fbs.SessionState): onnxruntime.experimental.fbs.SessionState|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SessionState())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startInferenceSession(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset ortVersionOffset\n     */\n    static addOrtVersion(builder: flatbuffers.Builder, ortVersionOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, ortVersionOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset modelOffset\n     */\n    static addModel(builder: flatbuffers.Builder, modelOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, modelOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sessionStateOffset\n     */\n    static addSessionState(builder: flatbuffers.Builder, sessionStateOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, sessionStateOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endInferenceSession(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset offset\n     */\n    static finishInferenceSessionBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset, 'ORTM');\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset offset\n     */\n    static finishSizePrefixedInferenceSessionBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset, 'ORTM', true);\n    }\n\n    static createInferenceSession(\n        builder: flatbuffers.Builder, ortVersionOffset: flatbuffers.Offset, modelOffset: flatbuffers.Offset,\n        sessionStateOffset: flatbuffers.Offset): flatbuffers.Offset {\n      InferenceSession.startInferenceSession(builder);\n      InferenceSession.addOrtVersion(builder, ortVersionOffset);\n      InferenceSession.addModel(builder, modelOffset);\n      InferenceSession.addSessionState(builder, sessionStateOffset);\n      return InferenceSession.endInferenceSession(builder);\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession, SessionHandler, Tensor} from 'onnxruntime-common';\n\nimport {Session} from './session';\nimport {Tensor as OnnxjsTensor} from './tensor';\n\nexport class OnnxjsSessionHandler implements SessionHandler {\n  constructor(private session: Session) {\n    this.inputNames = this.session.inputNames;\n    this.outputNames = this.session.outputNames;\n  }\n\n  async dispose(): Promise<void> {}\n  inputNames: readonly string[];\n  outputNames: readonly string[];\n  async run(\n      feeds: SessionHandler.FeedsType, _fetches: SessionHandler.FetchesType,\n      _options: InferenceSession.RunOptions): Promise<SessionHandler.ReturnType> {\n    const inputMap = new Map<string, OnnxjsTensor>();\n    for (const name in feeds) {\n      if (Object.hasOwnProperty.call(feeds, name)) {\n        const feed = feeds[name];\n        inputMap.set(\n            name,\n            new OnnxjsTensor(\n                feed.dims, feed.type as OnnxjsTensor.DataType, undefined, undefined,\n                feed.data as OnnxjsTensor.NumberType));\n      }\n    }\n    const outputMap = await this.session.run(inputMap);\n    const output: SessionHandler.ReturnType = {};\n    outputMap.forEach((tensor, name) => {\n      output[name] = new Tensor(tensor.type, tensor.data, tensor.dims);\n    });\n    return output;\n  }\n  startProfiling(): void {\n    this.session.startProfiling();\n  }\n  endProfiling(): void {\n    this.session.endProfiling();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {readFile} from 'fs';\nimport {promisify} from 'util';\n\nimport {resolveBackend, SessionHandlerType} from './backend';\nimport {ExecutionPlan} from './execution-plan';\nimport {Graph} from './graph';\nimport {Profiler} from './instrument';\nimport {Model} from './model';\nimport {Operator} from './operators';\nimport {Tensor} from './tensor';\n\nexport declare namespace Session {\n  export interface Config {\n    backendHint?: string;\n    profiler?: Profiler.Config;\n  }\n\n  export interface Context {\n    profiler: Readonly<Profiler>;\n    graphInputTypes?: Tensor.DataType[];\n    graphInputDims?: Array<readonly number[]>;\n  }\n}\n\nexport class Session {\n  constructor(config: Session.Config = {}) {\n    this._initialized = false;\n    this.backendHint = config.backendHint;\n    this.profiler = Profiler.create(config.profiler);\n    this.context = {profiler: this.profiler, graphInputTypes: [], graphInputDims: []};\n  }\n\n  get inputNames(): readonly string[] {\n    return this._model.graph.getInputNames();\n  }\n  get outputNames(): readonly string[] {\n    return this._model.graph.getOutputNames();\n  }\n\n  startProfiling() {\n    this.profiler.start();\n  }\n\n  endProfiling() {\n    this.profiler.stop();\n  }\n\n  async loadModel(uri: string): Promise<void>;\n  async loadModel(buffer: ArrayBuffer, byteOffset?: number, length?: number): Promise<void>;\n  async loadModel(buffer: Uint8Array): Promise<void>;\n  async loadModel(arg: string|ArrayBuffer|Uint8Array, byteOffset?: number, length?: number): Promise<void> {\n    await this.profiler.event('session', 'Session.loadModel', async () => {\n      // resolve backend and session handler\n      const backend = await resolveBackend(this.backendHint);\n      this.sessionHandler = backend.createSessionHandler(this.context);\n\n      this._model = new Model();\n      if (typeof arg === 'string') {\n        const isOrtFormat = arg.endsWith('.ort');\n        if (typeof process !== 'undefined' && process.versions && process.versions.node) {\n          // node\n          const buf = await promisify(readFile)(arg);\n          this.initialize(buf, isOrtFormat);\n        } else {\n          // browser\n          const response = await fetch(arg);\n          const buf = await response.arrayBuffer();\n          this.initialize(new Uint8Array(buf), isOrtFormat);\n        }\n      } else if (!ArrayBuffer.isView(arg)) {\n        // load model from ArrayBuffer\n        const arr = new Uint8Array(arg, byteOffset || 0, length || arg.byteLength);\n        this.initialize(arr);\n      } else {\n        // load model from Uint8array\n        this.initialize(arg);\n      }\n    });\n  }\n\n  private initialize(modelProtoBlob: Uint8Array, isOrtFormat?: boolean): void {\n    if (this._initialized) {\n      throw new Error('already initialized');\n    }\n\n    this.profiler.event('session', 'Session.initialize', () => {\n      // load graph\n      const graphInitializer =\n          this.sessionHandler.transformGraph ? this.sessionHandler as Graph.Initializer : undefined;\n      this._model.load(modelProtoBlob, graphInitializer, isOrtFormat);\n\n      // graph is completely initialzied at this stage , let the interested handlers know\n      if (this.sessionHandler.onGraphInitialized) {\n        this.sessionHandler.onGraphInitialized(this._model.graph);\n      }\n      // initialize each operator in the graph\n      this.initializeOps(this._model.graph);\n\n      // instantiate an ExecutionPlan object to be used by the Session object\n      this._executionPlan = new ExecutionPlan(this._model.graph, this._ops, this.profiler);\n    });\n\n    this._initialized = true;\n  }\n\n  async run(inputs: Map<string, Tensor>|Tensor[]): Promise<Map<string, Tensor>> {\n    if (!this._initialized) {\n      throw new Error('session not initialized yet');\n    }\n\n    return this.profiler.event('session', 'Session.run', async () => {\n      const inputTensors = this.normalizeAndValidateInputs(inputs);\n\n      const outputTensors = await this._executionPlan.execute(this.sessionHandler, inputTensors);\n\n      return this.createOutput(outputTensors);\n    });\n  }\n\n  private normalizeAndValidateInputs(inputs: Map<string, Tensor>|Tensor[]): Tensor[] {\n    const modelInputNames = this._model.graph.getInputNames();\n\n    // normalize inputs\n    // inputs: Tensor[]\n    if (Array.isArray(inputs)) {\n      if (inputs.length !== modelInputNames.length) {\n        throw new Error(`incorrect input array length: expected ${modelInputNames.length} but got ${inputs.length}`);\n      }\n    }\n    // convert map to array\n    // inputs: Map<string, Tensor>\n    else {\n      if (inputs.size !== modelInputNames.length) {\n        throw new Error(`incorrect input map size: expected ${modelInputNames.length} but got ${inputs.size}`);\n      }\n\n      const sortedInputs = new Array<Tensor>(inputs.size);\n      let sortedInputsIndex = 0;\n      for (let i = 0; i < modelInputNames.length; ++i) {\n        const tensor = inputs.get(modelInputNames[i]);\n        if (!tensor) {\n          throw new Error(`missing input tensor for: '${name}'`);\n        }\n        sortedInputs[sortedInputsIndex++] = tensor;\n      }\n\n      inputs = sortedInputs;\n    }\n\n    // validate dims requirements\n    // First session run - graph input data is not cached for the session\n    if (!this.context.graphInputTypes || this.context.graphInputTypes.length === 0 || !this.context.graphInputDims ||\n        this.context.graphInputDims.length === 0) {\n      const modelInputIndices = this._model.graph.getInputIndices();\n      const modelValues = this._model.graph.getValues();\n\n      const graphInputDims = new Array<readonly number[]>(modelInputIndices.length);\n\n      for (let i = 0; i < modelInputIndices.length; ++i) {\n        const graphInput = modelValues[modelInputIndices[i]];\n        graphInputDims[i] = graphInput.type!.shape.dims;\n\n        // cached for second and subsequent runs.\n        // Some parts of the framework works on the assumption that the graph and types and shapes are static\n        this.context.graphInputTypes!.push(graphInput.type!.tensorType);\n        this.context.graphInputDims!.push(inputs[i].dims);\n      }\n\n      this.validateInputTensorDims(graphInputDims, inputs, true);\n    }\n\n    // Second and subsequent session runs - graph input data is cached for the session\n    else {\n      this.validateInputTensorDims(this.context.graphInputDims, inputs, false);\n    }\n\n    // validate types requirement\n    this.validateInputTensorTypes(this.context.graphInputTypes!, inputs);\n\n    return inputs;\n  }\n\n  private validateInputTensorTypes(graphInputTypes: Tensor.DataType[], givenInputs: Tensor[]) {\n    for (let i = 0; i < givenInputs.length; i++) {\n      const expectedType = graphInputTypes[i];\n      const actualType = givenInputs[i].type;\n      if (expectedType !== actualType) {\n        throw new Error(`input tensor[${i}] check failed: expected type '${expectedType}' but got ${actualType}`);\n      }\n    }\n  }\n\n  private validateInputTensorDims(\n      graphInputDims: Array<readonly number[]>, givenInputs: Tensor[], noneDimSupported: boolean) {\n    for (let i = 0; i < givenInputs.length; i++) {\n      const expectedDims = graphInputDims[i];\n      const actualDims = givenInputs[i].dims;\n      if (!this.compareTensorDims(expectedDims, actualDims, noneDimSupported)) {\n        throw new Error(`input tensor[${i}] check failed: expected shape '[${expectedDims.join(',')}]' but got [${\n            actualDims.join(',')}]`);\n      }\n    }\n  }\n\n  private compareTensorDims(expectedDims: readonly number[], actualDims: readonly number[], noneDimSupported: boolean):\n      boolean {\n    if (expectedDims.length !== actualDims.length) {\n      return false;\n    }\n\n    for (let i = 0; i < expectedDims.length; ++i) {\n      if (expectedDims[i] !== actualDims[i] && (!noneDimSupported || expectedDims[i] !== 0)) {\n        // data shape mis-match AND not a 'None' dimension.\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  private createOutput(outputTensors: Tensor[]): Map<string, Tensor> {\n    const modelOutputNames = this._model.graph.getOutputNames();\n    if (outputTensors.length !== modelOutputNames.length) {\n      throw new Error('expected number of outputs do not match number of generated outputs');\n    }\n\n    const output = new Map<string, Tensor>();\n    for (let i = 0; i < modelOutputNames.length; ++i) {\n      output.set(modelOutputNames[i], outputTensors[i]);\n    }\n\n    return output;\n  }\n\n  private initializeOps(graph: Graph): void {\n    const nodes = graph.getNodes();\n    this._ops = new Array(nodes.length);\n\n    for (let i = 0; i < nodes.length; i++) {\n      this._ops[i] = this.sessionHandler.resolve(nodes[i], this._model.opsets, graph);\n    }\n  }\n\n  private _model: Model;\n  private _initialized: boolean;\n\n  private _ops: Operator[];\n  private _executionPlan: ExecutionPlan;\n\n  private backendHint?: string;\n\n  private sessionHandler: SessionHandlerType;\n  private context: Session.Context;\n  private profiler: Readonly<Profiler>;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Guid} from 'guid-typescript';\nimport Long from 'long';\n\nimport {onnxruntime} from './ort-schema/flatbuffers/ort-generated';\nimport {onnx} from './ort-schema/protobuf/onnx';\nimport {decodeUtf8String, ProtoUtil, ShapeUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport declare namespace Tensor {\n  export interface DataTypeMap {\n    bool: Uint8Array;\n    float32: Float32Array;\n    float64: Float64Array;\n    string: string[];\n    int8: Int8Array;\n    uint8: Uint8Array;\n    int16: Int16Array;\n    uint16: Uint16Array;\n    int32: Int32Array;\n    uint32: Uint32Array;\n    int64: BigInt64Array;\n  }\n\n  export type DataType = keyof DataTypeMap;\n\n  export type StringType = Tensor.DataTypeMap['string'];\n  export type BooleanType = Tensor.DataTypeMap['bool'];\n  export type IntegerType = Tensor.DataTypeMap['int8']|Tensor.DataTypeMap['uint8']|Tensor.DataTypeMap['int16']|\n                            Tensor.DataTypeMap['uint16']|Tensor.DataTypeMap['int32']|Tensor.DataTypeMap['uint32'];\n  export type FloatType = Tensor.DataTypeMap['float32']|Tensor.DataTypeMap['float64'];\n  export type NumberType = BooleanType|IntegerType|FloatType;\n\n  export type Id = Guid;\n}\n\ntype TensorData = Tensor.DataTypeMap[Tensor.DataType];\n\ntype DataProvider = (id: Tensor.Id) => TensorData;\ntype AsyncDataProvider = (id: Tensor.Id) => Promise<TensorData>;\n\nexport class Tensor {\n  /**\n   * get the underlying tensor data\n   */\n  get data(): TensorData {\n    if (this.cache === undefined) {\n      const data = this.dataProvider!(this.dataId);\n      if (data.length !== this.size) {\n        throw new Error('Length of data provided by the Data Provider is inconsistent with the dims of this Tensor.');\n      }\n      this.cache = data;\n    }\n    return this.cache;\n  }\n\n  /**\n   * get the underlying string tensor data. Should only use when type is STRING\n   */\n  get stringData() {\n    if (this.type !== 'string') {\n      throw new TypeError('data type is not string');\n    }\n\n    return this.data as Tensor.StringType;\n  }\n\n  /**\n   * get the underlying integer tensor data. Should only use when type is one of the following: (UINT8, INT8, UINT16,\n   * INT16, INT32, UINT32, BOOL)\n   */\n  get integerData() {\n    switch (this.type) {\n      case 'uint8':\n      case 'int8':\n      case 'uint16':\n      case 'int16':\n      case 'int32':\n      case 'uint32':\n      case 'bool':\n        return this.data as Tensor.IntegerType;\n\n      default:\n        throw new TypeError('data type is not integer (uint8, int8, uint16, int16, int32, uint32, bool)');\n    }\n  }\n\n  /**\n   * get the underlying float tensor data. Should only use when type is one of the following: (FLOAT, DOUBLE)\n   */\n  get floatData() {\n    switch (this.type) {\n      case 'float32':\n      case 'float64':\n        return this.data as Tensor.FloatType;\n\n      default:\n        throw new TypeError('data type is not float (float32, float64)');\n    }\n  }\n\n  /**\n   * get the underlying number tensor data. Should only use when type is one of the following: (UINT8, INT8, UINT16,\n   * INT16, INT32, UINT32, BOOL, FLOAT, DOUBLE)\n   */\n  get numberData() {\n    if (this.type !== 'string') {\n      return this.data as Tensor.NumberType;\n    }\n    throw new TypeError('type cannot be non-number (string)');\n  }\n\n  /**\n   * get value of an element at the given indices\n   */\n  get(indices: readonly number[]): Tensor.DataTypeMap[Tensor.DataType][number] {\n    return this.data[ShapeUtil.indicesToOffset(indices, this.strides)];\n  }\n\n  /**\n   * set value of an element at the given indices\n   */\n  set(indices: readonly number[], value: Tensor.DataTypeMap[Tensor.DataType][number]) {\n    this.data[ShapeUtil.indicesToOffset(indices, this.strides)] = value;\n  }\n\n  /**\n   * get the underlying tensor data asynchronously\n   */\n  async getData(): Promise<TensorData> {\n    if (this.cache === undefined) {\n      this.cache = await this.asyncDataProvider!(this.dataId);\n    }\n    return this.cache;\n  }\n\n  /**\n   * get the number of elements in the tensor\n   */\n  public readonly size: number;\n\n  private _strides: readonly number[];\n  /**\n   * get the strides for each dimension\n   */\n  get strides(): readonly number[] {\n    if (!this._strides) {\n      this._strides = ShapeUtil.computeStrides(this.dims);\n    }\n    return this._strides;\n  }\n\n  constructor(\n      /**\n       * get the dimensions of the tensor\n       */\n      public readonly dims: readonly number[],\n      /**\n       * get the type of the tensor\n       */\n      public readonly type: Tensor.DataType, private dataProvider?: DataProvider,\n      private asyncDataProvider?: AsyncDataProvider, private cache?: TensorData,\n      /**\n       * get the data ID that used to map to a tensor data\n       */\n      public readonly dataId: Guid = Guid.create()) {\n    this.size = ShapeUtil.validateDimsAndCalcSize(dims);\n    const size = this.size;\n    const empty = (dataProvider === undefined && asyncDataProvider === undefined && cache === undefined);\n\n    if (cache !== undefined) {\n      if (cache.length !== size) {\n        throw new RangeError('Input dims doesn\\'t match data length.');\n      }\n    }\n\n    if (type === 'string') {\n      if (cache !== undefined && (!Array.isArray(cache) || !cache.every(i => typeof i === 'string'))) {\n        throw new TypeError('cache should be a string array');\n      }\n\n      if (empty) {\n        this.cache = new Array<string>(size);\n      }\n    } else {\n      if (cache !== undefined) {\n        const constructor = dataviewConstructor(type);\n        if (!(cache instanceof constructor)) {\n          throw new TypeError(`cache should be type ${constructor.name}`);\n        }\n      }\n\n      if (empty) {\n        const buf = new ArrayBuffer(size * sizeof(type));\n        this.cache = createView(buf, type);\n      }\n    }\n  }\n\n  /**\n   * Construct new Tensor from a ONNX Tensor object\n   * @param tensorProto the ONNX Tensor\n   */\n  static fromProto(tensorProto: onnx.ITensorProto): Tensor {\n    if (!tensorProto) {\n      throw new Error('cannot construct Value from an empty tensor');\n    }\n    const type = ProtoUtil.tensorDataTypeFromProto(tensorProto.dataType!);\n    const dims = ProtoUtil.tensorDimsFromProto(tensorProto.dims!);\n\n    const value = new Tensor(dims, type);\n\n    if (type === 'string') {\n      // When it's STRING type, the value should always be stored in field\n      // 'stringData'\n      tensorProto.stringData!.forEach((str, i) => {\n        value.data[i] = decodeUtf8String(str);\n      });\n\n    } else if (\n        tensorProto.rawData && typeof tensorProto.rawData.byteLength === 'number' &&\n        tensorProto.rawData.byteLength > 0) {\n      // NOT considering segment for now (IMPORTANT)\n\n      // populate value from rawData\n      const dataDest = value.data;\n      const dataSource =\n          new DataView(tensorProto.rawData.buffer, tensorProto.rawData.byteOffset, tensorProto.rawData.byteLength);\n      const elementSize = sizeofProto(tensorProto.dataType!);\n      const length = tensorProto.rawData.byteLength / elementSize;\n\n      if (tensorProto.rawData.byteLength % elementSize !== 0) {\n        throw new Error('invalid buffer length');\n      }\n      if (dataDest.length !== length) {\n        throw new Error('buffer length mismatch');\n      }\n\n      for (let i = 0; i < length; i++) {\n        const n = readProto(dataSource, tensorProto.dataType!, i * elementSize);\n        dataDest[i] = n;\n      }\n    } else {\n      // populate value from array\n      let array: Array<number|Long>;\n      switch (tensorProto.dataType) {\n        case onnx.TensorProto.DataType.FLOAT:\n          array = tensorProto.floatData!;\n          break;\n        case onnx.TensorProto.DataType.INT32:\n        case onnx.TensorProto.DataType.INT16:\n        case onnx.TensorProto.DataType.UINT16:\n        case onnx.TensorProto.DataType.INT8:\n        case onnx.TensorProto.DataType.UINT8:\n        case onnx.TensorProto.DataType.BOOL:\n          array = tensorProto.int32Data!;\n          break;\n        case onnx.TensorProto.DataType.INT64:\n          array = tensorProto.int64Data!;\n          break;\n        case onnx.TensorProto.DataType.DOUBLE:\n          array = tensorProto.doubleData!;\n          break;\n        case onnx.TensorProto.DataType.UINT32:\n        case onnx.TensorProto.DataType.UINT64:\n          array = tensorProto.uint64Data!;\n          break;\n        default:\n          // should never run here\n          throw new Error('unspecific error');\n      }\n\n      if (array === null || array === undefined) {\n        throw new Error('failed to populate data from a tensorproto value');\n      }\n\n      const data = value.data;\n      if (data.length !== array.length) {\n        throw new Error('array length mismatch');\n      }\n\n      for (let i = 0; i < array.length; i++) {\n        const element = array[i];\n        if (Long.isLong(element)) {\n          data[i] = longToNumber(element, tensorProto.dataType);\n        } else {\n          data[i] = element;\n        }\n      }\n    }\n\n    return value;\n  }\n\n  /**\n   * Construct new Tensor from raw data\n   * @param data the raw data object. Should be a string array for 'string' tensor, and the corresponding typed array\n   * for other types of tensor.\n   * @param dims the dimensions of the tensor\n   * @param type the type of the tensor\n   */\n  static fromData(data: Tensor.DataTypeMap[Tensor.DataType], dims: readonly number[], type: Tensor.DataType) {\n    return new Tensor(dims, type, undefined, undefined, data);\n  }\n\n  static fromOrtTensor(ortTensor: ortFbs.Tensor) {\n    if (!ortTensor) {\n      throw new Error('cannot construct Value from an empty tensor');\n    }\n    const dims = ProtoUtil.tensorDimsFromORTFormat(ortTensor);\n    const type = ProtoUtil.tensorDataTypeFromProto(ortTensor.dataType());\n\n    const value = new Tensor(dims, type);\n\n    if (type === 'string') {\n      // When it's STRING type, the value should always be stored in field\n      // 'stringData'\n      for (let i = 0; i < ortTensor.stringDataLength(); i++) {\n        value.data[i] = ortTensor.stringData(i);\n      }\n\n    } else if (\n        ortTensor.rawDataArray() && typeof ortTensor.rawDataLength() === 'number' && ortTensor.rawDataLength() > 0) {\n      // NOT considering segment for now (IMPORTANT)\n\n      // populate value from rawData\n      const dataDest = value.data;\n      const dataSource = new DataView(\n          ortTensor.rawDataArray()!.buffer, ortTensor.rawDataArray()!.byteOffset, ortTensor.rawDataLength());\n      const elementSize = sizeofProto(ortTensor.dataType());\n      const length = ortTensor.rawDataLength() / elementSize;\n\n      if (ortTensor.rawDataLength() % elementSize !== 0) {\n        throw new Error('invalid buffer length');\n      }\n      if (dataDest.length !== length) {\n        throw new Error('buffer length mismatch');\n      }\n\n      for (let i = 0; i < length; i++) {\n        const n = readProto(dataSource, ortTensor.dataType(), i * elementSize);\n        dataDest[i] = n;\n      }\n    }\n    return value;\n  }\n}\n\nfunction sizeof(type: Tensor.DataType): number {\n  switch (type) {\n    case 'bool':\n    case 'int8':\n    case 'uint8':\n      return 1;\n    case 'int16':\n    case 'uint16':\n      return 2;\n    case 'int32':\n    case 'uint32':\n    case 'float32':\n      return 4;\n    case 'float64':\n      return 8;\n    default:\n      throw new Error(`cannot calculate sizeof() on type ${type}`);\n  }\n}\n\nfunction sizeofProto(type: onnx.TensorProto.DataType|ortFbs.TensorDataType): number {\n  switch (type) {\n    case onnx.TensorProto.DataType.UINT8:\n    case onnx.TensorProto.DataType.INT8:\n    case onnx.TensorProto.DataType.BOOL:\n      return 1;\n    case onnx.TensorProto.DataType.UINT16:\n    case onnx.TensorProto.DataType.INT16:\n      return 2;\n    case onnx.TensorProto.DataType.FLOAT:\n    case onnx.TensorProto.DataType.INT32:\n    case onnx.TensorProto.DataType.UINT32:\n      return 4;\n    case onnx.TensorProto.DataType.INT64:\n    case onnx.TensorProto.DataType.DOUBLE:\n    case onnx.TensorProto.DataType.UINT64:\n      return 8;\n    default:\n      throw new Error(`cannot calculate sizeof() on type ${onnx.TensorProto.DataType[type]}`);\n  }\n}\n\nfunction createView(dataBuffer: ArrayBuffer, type: Tensor.DataType) {\n  return new (dataviewConstructor(type))(dataBuffer);\n}\n\nfunction dataviewConstructor(type: Tensor.DataType) {\n  switch (type) {\n    case 'bool':\n    case 'uint8':\n      return Uint8Array;\n    case 'int8':\n      return Int8Array;\n    case 'int16':\n      return Int16Array;\n    case 'uint16':\n      return Uint16Array;\n    case 'int32':\n      return Int32Array;\n    case 'uint32':\n      return Uint32Array;\n    case 'int64':\n      return BigInt64Array;\n    case 'float32':\n      return Float32Array;\n    case 'float64':\n      return Float64Array;\n    default:\n      // should never run to here\n      throw new Error('unspecified error');\n  }\n}\n\n// convert a long number to a 32-bit integer (cast-down)\nfunction longToNumber(i: Long, type: onnx.TensorProto.DataType|ortFbs.TensorDataType): number {\n  // INT64, UINT32, UINT64\n  if (type === onnx.TensorProto.DataType.INT64 || type === ortFbs.TensorDataType.INT64) {\n    if (i.greaterThanOrEqual(2147483648) || i.lessThan(-2147483648)) {\n      throw new TypeError('int64 is not supported');\n    }\n  } else if (\n      type === onnx.TensorProto.DataType.UINT32 || type === ortFbs.TensorDataType.UINT32 ||\n      type === onnx.TensorProto.DataType.UINT64 || type === ortFbs.TensorDataType.UINT64) {\n    if (i.greaterThanOrEqual(4294967296) || i.lessThan(0)) {\n      throw new TypeError('uint64 is not supported');\n    }\n  } else {\n    throw new TypeError(`not a LONG type: ${onnx.TensorProto.DataType[type]}`);\n  }\n\n  return i.toNumber();\n}\n\n// read one value from TensorProto\nfunction readProto(view: DataView, type: onnx.TensorProto.DataType|ortFbs.TensorDataType, byteOffset: number): number {\n  switch (type) {\n    case onnx.TensorProto.DataType.BOOL:\n    case onnx.TensorProto.DataType.UINT8:\n      return view.getUint8(byteOffset);\n    case onnx.TensorProto.DataType.INT8:\n      return view.getInt8(byteOffset);\n    case onnx.TensorProto.DataType.UINT16:\n      return view.getUint16(byteOffset, true);\n    case onnx.TensorProto.DataType.INT16:\n      return view.getInt16(byteOffset, true);\n    case onnx.TensorProto.DataType.FLOAT:\n      return view.getFloat32(byteOffset, true);\n    case onnx.TensorProto.DataType.INT32:\n      return view.getInt32(byteOffset, true);\n    case onnx.TensorProto.DataType.UINT32:\n      return view.getUint32(byteOffset, true);\n    case onnx.TensorProto.DataType.INT64:\n      return longToNumber(\n          Long.fromBits(view.getUint32(byteOffset, true), view.getUint32(byteOffset + 4, true), false), type);\n    case onnx.TensorProto.DataType.DOUBLE:\n      return view.getFloat64(byteOffset, true);\n    case onnx.TensorProto.DataType.UINT64:\n      return longToNumber(\n          Long.fromBits(view.getUint32(byteOffset, true), view.getUint32(byteOffset + 4, true), true), type);\n    default:\n      throw new Error(`cannot read from DataView for type ${onnx.TensorProto.DataType[type]}`);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {flatbuffers} from 'flatbuffers';\nimport Long from 'long';\n\nimport {Graph} from './graph';\nimport {onnxruntime} from './ort-schema/flatbuffers/ort-generated';\nimport {onnx} from './ort-schema/protobuf/onnx';\nimport {Tensor} from './tensor';\n\n// check the inputs shape before running an OP.\n// return true when the inputs pass the check\n// return false when the inputs do not fit the requirement\n// throw exception when fatal error or not implemented\nexport function checkInputsShape(inputs: Tensor[], ...expectedDimensions: number[]): boolean {\n  if (!inputs || inputs.length !== expectedDimensions.length) {\n    return false;\n  }\n  for (let i = 0; i < inputs.length; i++) {\n    if (!inputs[i].dims || inputs[i].dims.length !== expectedDimensions[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n// Evaluates the given expression and asserts error message if condition is unmet.\nexport function assert(expr: boolean, msg: () => string) {\n  if (!expr) {\n    throw new Error(typeof msg === 'string' ? msg : msg());\n  }\n}\n\nexport class ArrayUtil {\n  /**\n   * Verifies if 2 input arrays contain the same elements.\n   * @param n1 Array 1\n   * @param n2 Array 2\n   * @returns Whether these 2 are equal\n   */\n  static arraysEqual(\n      n1: readonly number[]|Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Uint8ClampedArray|\n      Float32Array|Float64Array,\n      n2: readonly number[]|Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Uint8ClampedArray|\n      Float32Array|Float64Array) {\n    if (n1.length !== n2.length) {\n      return false;\n    }\n    for (let i = 0; i < n1.length; i++) {\n      if (n1[i] !== n2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n\nexport class MatMulUtil {\n  /**\n   * Fix the input shapes for MatMul operation if they need fixing\n   * @param dimsA The shape of tensor A. Should be an array of positive integers\n   * @param dimsB The shape of tensor B. Should be an array of positive integers\n   * @returns A tuple containing the preprocessed input shapes as required by ONNX specifications\n   */\n  static preprocessInputShapes(dimsA: readonly number[], dimsB: readonly number[]):\n      [readonly number[], readonly number[]] {\n    // If the first argument is 1-D, it is promoted to a matrix by prepending\n    // a 1 to its dimensions. After matrix multiplication the prepended 1 is\n    // removed.\n    const a = (dimsA.length === 1) ? [1, dimsA[0]] : dimsA;\n\n    // If the second argument is 1-D, it is promoted to a matrix by appending\n    // a 1 to its dimensions. After matrix multiplication the appended 1 is\n    // removed.\n    const b = (dimsB.length === 1) ? [dimsB[0], 1] : dimsB;\n\n    return [a, b];\n  }\n\n  /**\n   * Fix the output shape computed for MatMul operation if it needs fixing\n   * @param outputShape The computed outputShape. Should be an array (atleast of length 2) of positive integers.\n   * This will be mutated.\n   * @param aRank The rank of tensor A.\n   * @param bRank The rank of tensor B.\n   */\n  static postprocessOutputShape(outputShape: number[], aRank: number, bRank: number) {\n    // Remove prepended dimension if first input is 1d\n    if (aRank === 1) {\n      // outputShape = outputShape.slice(0, outputShape.length - 2).concat(outputShape.slice(outputShape.length - 1));\n      outputShape.splice(outputShape.length - 2, 1);\n    }\n    // Remove appended dimension if second input is 1d\n    if (bRank === 1) {\n      outputShape.pop();\n    }\n  }\n\n  /**\n   * Calculate the expected shape when matrix multiplication\n   * @param a The shape of tensor A. Should be a tuple of 2 positive integers\n   * @param b The shape of tensor B. Should be a tuple of 2 positive integers\n   * @returns The expected shape of the result, or undefined if N/A\n   */\n  static calcMatMulShape(a: [number, number], b: [number, number]): [number, number]|undefined {\n    return (a[1] !== b[0]) ? undefined : [a[0], b[1]];\n  }\n}\n\nexport class BroadcastUtil {\n  /**\n   * Calculate the expected shape when broadcasting 2 tensors\n   * @param a The shape of tensor A. Should be an array of positive integers\n   * @param b The shape of tensor B. Should be an array of positive integers\n   * @param isMatMul Whether the operation is MatMul\n   * @returns The expected shape of the result, or undefined if N/A\n   */\n  static calcShape(adims: readonly number[], bdims: readonly number[], isMatMul = false): readonly number[]|undefined {\n    const arank = adims.length;\n    const brank = bdims.length;\n    if (arank === 0) {\n      return bdims;\n    }\n    if (brank === 0) {\n      return adims;\n    }\n    const crank = Math.max(adims.length, bdims.length);\n    const cdims = new Array<number>(crank);\n\n    // calculate the last 2 dimension if it is MatMul\n    if (isMatMul) {\n      if (arank < 2 || brank < 2) {\n        return undefined;\n      }\n      const cShapeMatMul =\n          MatMulUtil.calcMatMulShape([adims[arank - 2], adims[arank - 1]], [bdims[brank - 2], bdims[brank - 1]]);\n      if (cShapeMatMul === undefined) {\n        return undefined;\n      }\n      [cdims[crank - 2], cdims[crank - 1]] = cShapeMatMul;\n    }\n\n    for (let i = isMatMul ? 3 : 1; i <= crank; i++) {\n      const aLen = arank - i < 0 ? 1 : adims[arank - i];\n      const bLen = brank - i < 0 ? 1 : bdims[brank - i];\n\n      if (aLen !== bLen && aLen > 1 && bLen > 1) {\n        return undefined;\n      }\n      cdims[crank - i] = Math.max(aLen, bLen);\n    }\n\n    return cdims;\n  }\n\n  /**\n   * Given the indices of a broadcasted tensor, calculate the original indices\n   * @param broadcastedIndices The given indices of the broadcasted tensor.\n   * @param originalShape The original shape of the tensor before broadcas\n   * @returns The calculated indices that maps to the original tensor.\n   */\n  static index(broadcastedIndices: readonly number[], originalShape: readonly number[]): number[] {\n    // NOTE 1: we assume the parameter broadcastedIndices is valid. ie. it should have the same\n    // length as the broadcasted shape, and for each dimension the index should\n    // not be out of range.\n    const originalIndices = new Array(originalShape.length);\n    BroadcastUtil.fillIndex(broadcastedIndices, originalShape, originalIndices);\n    return originalIndices;\n  }\n\n  /**\n   * Given the indices of a broadcasted tensor, calculate the original indices\n   * @param broadcastedIndices The given indices of the broadcasted tensor.\n   * @param originalShape The original shape of the tensor before broadcast\n   * @param originalIndices The mapping of broadcastedIndices to the originalIndices (output parameter - will be\n   *     mutated).\n   */\n  static fillIndex(broadcastedIndices: readonly number[], originalShape: readonly number[], originalIndices: number[]) {\n    // NOTE 1: we assume the parameter broadcastedIndices is valid. ie. it should have the same length as the\n    // broadcasted shape, and for each dimension the index should not be out of range.\n    // NOTE 2: we assume the parameter originalIndices has the same length as the originalShape\n    const dimOffset = broadcastedIndices.length - originalShape.length;\n    for (let i = 0; i < originalShape.length; i++) {\n      originalIndices[i] = broadcastedIndices[dimOffset + i] % originalShape[i];\n    }\n  }\n\n  /**\n   * Perform the broadcasting operation on the specific operator\n   * @param a The input tensor A\n   * @param b The input tensor B\n   * @param op The operator lambda function\n   * @param inplace Whether to write the result back to A.\n   * @returns The result tensor, or undefined if input not broadcastable.\n   */\n  static calc(\n      a: Tensor, b: Tensor, op: (a: string|number, b: string|number) => (string | number), inplace: boolean,\n      resultType?: Tensor.DataType): Tensor|undefined {\n    const outputShape = BroadcastUtil.calcShape(a.dims, b.dims);\n\n    if (outputShape) {\n      if (inplace && !ShapeUtil.areEqual(outputShape, a.dims)) {\n        // B is not broadcastable to A, failed to calculate inplace.\n        return undefined;\n      }\n\n      const size = ShapeUtil.size(outputShape);\n      const c = inplace ? a : new Tensor(outputShape, resultType || a.type);\n\n      // both inputs are scalars\n      if (outputShape.length === 0) {\n        c.set([], op(a.get([]) as number, b.get([]) as number));\n      }\n\n      // atleast one input is a non-scalar\n      else {\n        const outputIndices = new Array<number>(outputShape.length);\n        const originalIndicesA = new Array(a.dims.length);\n        const originalIndicesB = new Array(b.dims.length);\n        let valA: string|number = 0;\n        let valB: string|number = 0;\n        let isAScalar = false;\n        let isBScalar = false;\n        if (a.dims.length === 0) {\n          valA = a.get([]) as number;\n          isAScalar = true;\n        }\n        if (b.dims.length === 0) {\n          valB = b.get([]) as number;\n          isBScalar = true;\n        }\n        let rest: number;\n        for (let i = 0; i < size; i++) {\n          // traversal indices\n          rest = i;\n          for (let j = outputShape.length - 1; j >= 0; j--) {\n            outputIndices[j] = rest % outputShape[j];\n            rest = Math.floor(rest / outputShape[j]);\n          }\n\n          if (!isAScalar) {\n            // map outputIndices (which is actually broadcasted) to the originalIndices\n            BroadcastUtil.fillIndex(outputIndices, a.dims, originalIndicesA);\n            valA = a.get(originalIndicesA) as number;\n          }\n          if (!isBScalar) {\n            BroadcastUtil.fillIndex(outputIndices, b.dims, originalIndicesB);\n            valB = b.get(originalIndicesB) as number;\n          }\n\n          c.set(outputIndices, op(valA, valB));\n        }\n      }\n\n      return c;\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Determine if a shape is unidirectional broadcastable to another shape\n   * @param shape The input shape\n   * @param finalShape The desired shape after broadcasting\n   */\n  static isValidBroadcast(shape: readonly number[], finalShape: readonly number[]): boolean {\n    // align shape to the right\n    const inputRank = shape.length;\n    const finalRank = finalShape.length;\n    if (inputRank > finalRank) {\n      return false;\n    }\n    for (let i = 1; i <= inputRank; i++) {\n      if (shape[inputRank - i] !== 1 && shape[inputRank - i] !== finalShape[finalRank - i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Determine the broadcasted dims in input shape based on the given output shape.\n   * Note that this function only returns the broadcasted dims.\n   * @param inputShape The input shape\n   * @param outputShape The output shape\n   * @returns The broadcasted dims in input shape.\n   */\n  static getBroadcastDims(inputShape: readonly number[], outputShape: readonly number[]): number[] {\n    const inRank = inputShape.length;\n    const dims: number[] = [];\n    for (let i = 0; i < inRank; i++) {\n      const dim = inRank - 1 - i;\n      const a = inputShape[dim] || 1;\n      const b = outputShape[outputShape.length - 1 - i] || 1;\n      if (b > 1 && a === 1) {\n        dims.unshift(dim);\n      }\n    }\n    return dims;\n  }\n}\n\n// copy array helper\n// mimics memcpy as much as possible\nexport function arrayCopyHelper(\n    target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n    blockSize: number) {\n  if (sourceIndex < 0 || sourceIndex >= source.length) {\n    throw new Error('sourceIndex out of bounds');\n  }\n  if (targetIndex < 0 || targetIndex >= target.length) {\n    throw new Error('targetIndex out of bounds');\n  }\n  if (sourceIndex + blockSize > source.length) {\n    throw new Error('source indices to be copied are outside bounds');\n  }\n  if (targetIndex + blockSize > target.length) {\n    throw new Error('target array is too small to hold result');\n  }\n\n  for (let offset = 0; offset < blockSize; offset++) {\n    target[targetIndex + offset] = source[sourceIndex + offset];\n  }\n}\n\nexport class GemmUtil {\n  // will make sure input shapes are compatible for this op\n  // and return back the shape of the output in the form of a tuple\n  // will throw exception if the input shapes are not compatible\n  static getShapeOfGemmResult(\n      leftShape: readonly number[], transLeft: boolean, rightShape: readonly number[], transRight: boolean,\n      biasShape?: readonly number[]): readonly number[] {\n    if (leftShape.length !== 2 || rightShape.length !== 2) {\n      throw new Error('shape need to be of size 2');\n    }\n\n    let M: number;\n    let K: number;\n    let N: number;\n\n    if (transLeft) {\n      M = leftShape[1];\n      K = leftShape[0];\n    } else {\n      M = leftShape[0];\n      K = leftShape[1];\n    }\n\n    let kDim = -1;\n\n    if (transRight) {\n      N = rightShape[0];\n      kDim = 1;\n    } else {\n      N = rightShape[1];\n      kDim = 0;\n    }\n\n    if (rightShape[kDim] !== K) {\n      throw new Error('dimension mismatch');\n    }\n\n    if (M <= 0 || N <= 0 || K <= 0) {\n      throw new Error('invalid shape specified');\n    }\n\n    if (biasShape && !BroadcastUtil.isValidBroadcast(biasShape, [M, N])) {\n      throw new Error('gemm: invalid bias shape for broadcast');\n    }\n\n    return [M, N, K];\n  }\n}\n\nexport class ProtoUtil {\n  static tensorDataTypeFromProto(typeProto: onnx.TensorProto.DataType|\n                                 onnxruntime.experimental.fbs.TensorDataType): Tensor.DataType {\n    switch (typeProto) {\n      case onnx.TensorProto.DataType.INT8:\n        return 'int8';\n      case onnx.TensorProto.DataType.UINT8:\n        return 'uint8';\n      case onnx.TensorProto.DataType.BOOL:\n        return 'bool';\n      case onnx.TensorProto.DataType.INT16:\n        return 'int16';\n      case onnx.TensorProto.DataType.UINT16:\n        return 'uint16';\n      case onnx.TensorProto.DataType.INT32:\n        return 'int32';\n      case onnx.TensorProto.DataType.UINT32:\n        return 'uint32';\n      case onnx.TensorProto.DataType.FLOAT:\n        return 'float32';\n      case onnx.TensorProto.DataType.DOUBLE:\n        return 'float64';\n      case onnx.TensorProto.DataType.STRING:\n        return 'string';\n\n      // For INT64/UINT64, reduce their value to 32-bits.\n      // Should throw exception when overflow\n      case onnx.TensorProto.DataType.INT64:\n        return 'int32';\n      case onnx.TensorProto.DataType.UINT64:\n        return 'uint32';\n\n      default:\n        throw new Error(`unsupported data type: ${onnx.TensorProto.DataType[typeProto]}`);\n    }\n  }\n\n  static tensorDataTypeStringToEnum(type: string): onnx.TensorProto.DataType {\n    switch (type) {\n      case 'int8':\n        return onnx.TensorProto.DataType.INT8;\n      case 'uint8':\n        return onnx.TensorProto.DataType.UINT8;\n      case 'bool':\n        return onnx.TensorProto.DataType.BOOL;\n      case 'int16':\n        return onnx.TensorProto.DataType.INT16;\n      case 'uint16':\n        return onnx.TensorProto.DataType.UINT16;\n      case 'int32':\n        return onnx.TensorProto.DataType.INT32;\n      case 'uint32':\n        return onnx.TensorProto.DataType.UINT32;\n      case 'float32':\n        return onnx.TensorProto.DataType.FLOAT;\n      case 'float64':\n        return onnx.TensorProto.DataType.DOUBLE;\n      case 'string':\n        return onnx.TensorProto.DataType.STRING;\n      case 'int64':\n        return onnx.TensorProto.DataType.INT64;\n      case 'uint64':\n        return onnx.TensorProto.DataType.UINT64;\n\n      default:\n        throw new Error(`unsupported data type: ${type}`);\n    }\n  }\n\n  static tensorDimsFromProto(dims: Array<number|Long>): number[] {\n    // get rid of Long type for dims\n    return dims.map(d => Long.isLong(d) ? d.toNumber() : d);\n  }\n\n  static tensorValueTypeFromProto(valueType: onnx.TypeProto.ITensor): Graph.ValueType {\n    return {\n      tensorType: ProtoUtil.tensorDataTypeFromProto(valueType.elemType!),\n      shape: {dims: ProtoUtil.tensorDimsFromProto(valueType.shape!.dim!.map(d => d.dimValue!))}\n    };\n  }\n\n  static tensorDimsFromORTFormat(tensor: onnxruntime.experimental.fbs.Tensor) {\n    const dims = [];\n    for (let i = 0; i < tensor.dimsLength(); i++) {\n      dims.push(LongUtil.longToNumber(tensor.dims(i)!));\n    }\n    return dims;\n  }\n\n  static tensorAttributesFromORTFormat(node: onnxruntime.experimental.fbs.Node) {\n    const attributes = [];\n    for (let i = 0; i < node.attributesLength(); i++) {\n      attributes.push(node.attributes(i)!);\n    }\n    return attributes;\n  }\n}\n\nexport class LongUtil {\n  // This function is called to get a number from long type of data for attribute, dim, and ir version,\n  // which values are signed integers.\n  // To make it more generic, add an optional paramter to convert to a unsigned number.\n  static longToNumber(n: Long|flatbuffers.Long|number, unsigned?: boolean) {\n    if (Long.isLong(n)) {\n      return n.toNumber();\n    } else if (n instanceof flatbuffers.Long) {\n      return Long.fromValue({low: n.low, high: n.high, unsigned: unsigned ?? false}).toNumber();\n    }\n    return n;\n  }\n  static isLong(n: unknown) {\n    return Long.isLong(n) || n instanceof flatbuffers.Long;\n  }\n}\n\nexport class ShapeUtil {\n  static size(dims: readonly number[]): number {\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, dims.length);\n  }\n\n  // `axis` inclusive\n  static sizeFromDimension(dims: readonly number[], axis: number): number {\n    if (axis < 0 || axis > dims.length) {\n      throw new Error(`invalid dimension of ${axis} for sizeFromDimension as Tensor has ${dims.length} dimensions.`);\n    }\n    return ShapeUtil.getSizeFromDimensionRange(dims, axis, dims.length);\n  }\n\n  // `axis` exclusive\n  static sizeToDimension(dims: readonly number[], axis: number): number {\n    if (axis < 0 || axis > dims.length) {\n      throw new Error(`invalid dimension of ${axis} for sizeToDimension as Tensor has ${dims.length} dimensions.`);\n    }\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, axis);\n  }\n\n  static getSizeFromDimensionRange(dims: readonly number[], start: number, end: number): number {\n    let size = 1;\n    for (let i = start; i < end; i++) {\n      // safety check as this method is called by multiple other methods requiring size.\n      // size cannot be 0 or negative.\n      if (dims[i] <= 0) {\n        throw new Error(\n            // eslint-disable-next-line max-len\n            'cannot get valid size from specified dimension range. Most likely the range contains 0 or negative values in them.');\n      }\n      size *= dims[i];\n    }\n    return size;\n  }\n\n  static computeStrides(dims: readonly number[]): readonly number[] {\n    const rank = dims.length;\n    if (rank === 0) {\n      return [];\n    } else if (rank === 1) {\n      return [1];\n    }\n    const strides = new Array(rank);\n    strides[rank - 1] = 1;\n    strides[rank - 2] = dims[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * dims[i + 1];\n    }\n    return strides;\n  }\n\n  static transpose(dims: readonly number[]): readonly number[] {\n    const copy = dims.slice();\n    return copy.reverse();\n  }\n\n  static indicesToOffset(indices: readonly number[], strides: readonly number[], axis?: number): number {\n    if (axis === undefined) {\n      axis = indices.length;\n    }\n    let offset = 0;\n    for (let i = 0; i < axis; ++i) {\n      offset += strides[i] * indices[i];\n    }\n    return offset;\n  }\n\n  static offsetToIndices(offset: number, strides: readonly number[]): readonly number[] {\n    const rank = strides.length;\n    if (rank === 0) {\n      return [];\n    } else if (rank === 1) {\n      return [offset * strides[0]];\n    }\n    const indices: number[] = new Array(strides.length);\n    for (let i = 0; i < indices.length - 1; ++i) {\n      indices[i] = Math.floor(offset / strides[i]);\n      offset -= indices[i] * strides[i];\n    }\n    indices[indices.length - 1] = offset;\n    return indices;\n  }\n\n  /**\n   * normailze axis of range [-r, r) into [0, r).\n   */\n  static normalizeAxis(axis: number, tensorRank: number): number {\n    if (axis < -tensorRank && axis >= tensorRank) {\n      throw new Error('unsupported axis for this operation.');\n    }\n    return axis < 0 ? axis + tensorRank : axis;\n  }\n\n  static normalizeAxes(axes: readonly number[], tensorRank: number): number[] {\n    return axes.map(x => this.normalizeAxis(x, tensorRank));\n  }\n\n  // Increment an index into a tensor (in lexicographic\n  // ordering), wrapping around the specified upper_bound.\n  /**\n   * Increment an index into a tensor (in lexicographic ordering), wrapping around the specified upper_bound.\n   * @param index Given index to increment (Will be mutated)\n   * @param dims The dimensions of the tensor for which the given index corresponds to\n   * @param axisToIncrementOn The 1-indexed axis to increment on. If undefined, axisToIncrementOn == rank\n   */\n  static incrementIndex(index: number[], dims: readonly number[], axisToIncrementOn?: number) {\n    if (dims.length === 0 || index.length === 0) {\n      throw new Error('Index incrementing unsupported for scalar Tensor');\n    }\n    if (axisToIncrementOn === undefined) {\n      axisToIncrementOn = dims.length;\n    } else {\n      if (axisToIncrementOn <= 0 || axisToIncrementOn > dims.length) {\n        throw new Error('Incorrect axis to increment on');\n      }\n    }\n\n    for (let k = axisToIncrementOn - 1; k >= 0; --k) {\n      index[k]++;\n      if (index[k] < dims[k]) {\n        break;\n      }\n      index[k] = 0;\n    }\n  }\n\n  /**\n   * Produces a new dimensions array based on the values in the 'originalDimensions' and 'shape' array\n   * Used in Reshape\n   * @param originalDims Original Shape array\n   * @param shapeHints array containing values to compute the new dimensions\n   * For example:\n   * originalDims = [2,2] and shapeHints = [0,-1] will return [2,2]\n   * originalDims = [2,2] and shapeHints = [4] will return [4]\n   * originalDims = [2,2] and shapeHints = [5] will throw an exception\n   * https://github.com/onnx/onnx/blob/main/docs/Operators.md#Reshape\n   */\n\n  static calculateReshapedDims(originalDims: readonly number[], shapeHints: ArrayLike<number>): number[] {\n    // reshape to a Scalar Tensor\n    if (shapeHints.length === 0) {\n      if (originalDims.length === 0 || ShapeUtil.size(originalDims) === 1) {\n        return [];\n      } else {\n        throw new Error('cannot reshape to a scalar Tensor');\n      }\n    }\n\n    const nDims = shapeHints.length;\n    const reshapedDims = new Array<number>(nDims);\n    let unknownDimension = -1;\n    let newTensorSize = 1;\n    for (let i = 0; i < nDims; i++) {\n      if (shapeHints[i] < -1) {\n        throw new Error('a dimension in shape hints cannot be less than -1');\n      }\n      if (shapeHints[i] === -1) {\n        if (unknownDimension !== -1) {\n          throw new Error('at most one dimension in shape hints can be -1');\n        }\n        unknownDimension = i;\n      } else {\n        if (shapeHints[i] === 0) {\n          if (i >= originalDims.length) {\n            throw new Error('the dimension with value zero exceeds the dimension size of the input tensor');\n          }\n          reshapedDims[i] = originalDims[i];\n        } else {\n          reshapedDims[i] = shapeHints[i];\n        }\n        newTensorSize *= reshapedDims[i];\n      }\n    }\n\n    const oldTensorSize = ShapeUtil.size(originalDims);\n    if (unknownDimension !== -1) {\n      if (oldTensorSize % newTensorSize !== 0) {\n        throw new Error(`the input tensor cannot be reshaped to the requested shape. Input shape: [${\n            originalDims}] Output shape: [${shapeHints}]`);\n      }\n      reshapedDims[unknownDimension] = oldTensorSize / newTensorSize;\n    }\n    // validate sizes from originalDims and reshapedDims match\n    else {\n      if (newTensorSize !== oldTensorSize) {\n        throw new Error('reshapedDims and originalDims don\\'t have matching sizes');\n      }\n    }\n    return reshapedDims;\n  }\n\n  /**\n   * Sorts a given array based on the indices in the Perm array\n   * Used in Transpose\n   * @param a Array to be sorted such as dims or strides\n   * @param perm Perm given; if null a will be reversed\n   */\n  static sortBasedOnPerm(a: readonly number[], perm?: readonly number[]): readonly number[] {\n    if (perm) {\n      return perm.map((v) => a[v]);\n    } else {\n      return a.slice().reverse();\n    }\n  }\n\n  /**\n   * Pads a given shape according to the padding values\n   * @param dims shape of the Tensor to be padded\n   * @param pad pad values\n   */\n  static padShape(dims: readonly number[], pad: readonly number[]): readonly number[] {\n    const rank = dims.length;\n    return dims.map((v, i) => v + pad[i] + pad[i + rank]);\n  }\n\n  /**\n   * Determines if the two shapes are identical\n   * @param shape1\n   * @param shape2\n   */\n  static areEqual(shape1: readonly number[], shape2: readonly number[]): boolean {\n    if (shape1.length !== shape2.length) {\n      return false;\n    }\n    return shape1.every((v, i) => v === shape2[i]);\n  }\n\n  /**\n   * Validates if the given `dims` or `shape` is valid in ONNX.js context and returns data size\n   * @param dims - input `dims` that needs to be checked\n   */\n  static validateDimsAndCalcSize(dims: readonly number[]): number {\n    if (dims.length > 6) {\n      throw new TypeError('Only rank 0 to 6 is supported for tensor shape.');\n    }\n    let size = 1;\n    for (const n of dims) {\n      if (!Number.isInteger(n)) {\n        throw new TypeError(`Invalid shape: ${n} is not an integer`);\n      }\n      if (n < 0 || n > 2147483647) {\n        throw new TypeError(`Invalid shape: length ${n} is not allowed`);\n      }\n      size *= n;\n    }\n    return size;\n  }\n\n  /**\n   * Determines the shape of output tensor y = flatten(x, axis)\n   * @param dims - shape of input tensor\n   * @param axis - flatten axis, in the range [-r, r]\n   */\n  static flattenShape(dims: readonly number[], axis: number): readonly number[] {\n    if (axis < 0) {\n      axis += dims.length;\n    }\n    const total = dims.reduce((x, y) => x * y, 1);\n    const right = dims.slice(axis).reduce((x, y) => x * y, 1);\n    const outputDims = [total / right, right];\n\n    return outputDims;\n  }\n\n  /**\n   * Determines the shape of output tensor y = squeeze(x, axes)\n   * @param dims - shape of input tensor\n   * @param axes - squeeze axes\n   */\n  static squeezeShape(dims: readonly number[], axes: readonly number[]): readonly number[] {\n    const outputDims = new Array<number>();\n\n    // sanity check\n    axes = ShapeUtil.normalizeAxes(axes, dims.length);\n\n    for (let i = 0; i < dims.length; i++) {\n      const inSqueezeList = axes.indexOf(i) >= 0;\n      if (inSqueezeList && dims[i] !== 1) {\n        throw new Error('squeeze an axis of size different than 1');\n      }\n\n      if ((axes.length === 0 && dims[i] > 1) || (axes.length > 0 && !inSqueezeList)) {\n        outputDims.push(dims[i]);\n      }\n    }\n\n    return outputDims;\n  }\n\n  /**\n   * Determines the shape of output tensor y = unsqueeze(x, axes)\n   * @param dims - shape of input tensor\n   * @param axes - unsqueeze axes\n   */\n  static unsqueezeShape(dims: readonly number[], axes: readonly number[]): readonly number[] {\n    const outputDims = new Array<number>(dims.length + axes.length);\n\n    // initialize the array elements to 0\n    outputDims.fill(0);\n\n    // set all axes indices to 1 in outputDims and check for duplicates\n    for (let i = 0; i < axes.length; i++) {\n      const axis = ShapeUtil.normalizeAxis(axes[i], outputDims.length);\n      if (axis >= outputDims.length) {\n        throw new Error('\\'axes\\' has an out of range axis');\n      }\n      if (outputDims[axis] !== 0) {\n        throw new Error('\\'axes\\' has a duplicate axis');\n      }\n\n      outputDims[axis] = 1;\n    }\n\n    // fill in the zero entries of outputDims with the input tensor's shape\n    let inputDimsIterator = 0;\n    for (let i = 0; i < outputDims.length; i++) {\n      if (outputDims[i] === 0) {\n        outputDims[i] = dims[inputDimsIterator++];\n      }\n    }\n\n    // sanity check assertion. 'inputDimsIterator'\n    // should be equal to the length of 'dims'\n    if (inputDimsIterator !== dims.length) {\n      throw new Error('the unsqueezed dimension could not be established');\n    }\n\n    return outputDims;\n  }\n}\n\n// bunch of helper methods that do a variety of math operations\nexport class MathUtil {\n  // y = (x*x) + y\n  static sqr(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] += Math.pow(source[sourceIndex + offset], 2);\n    }\n  }\n\n  // y = ax + y\n  static axpy(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number, alpha: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] += (alpha * source[sourceIndex + offset]);\n    }\n  }\n\n  // y = pow(x, b)\n  static powx(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number, b: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] = Math.pow(source[sourceIndex + offset], b);\n    }\n  }\n\n  // y = x * y\n  static mul(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] = (source[sourceIndex + offset] * target[targetIndex + offset]);\n    }\n  }\n}\n\nexport class SplitUtil {\n  /**\n   * Calculates new Shapes from existing one and the splits given along the axis provides\n   * @param dims Shape of the Tensor to be splitted into two or more Shapes\n   * @param axis The dimension along which the Tensor will be split\n   * @param splits Offsets for the start of each split\n   */\n  static splitShape(dims: readonly number[], axis: number, split: number[], numOutputs?: number):\n      [number[][], number[]] {\n    if (split.length === 0) {\n      if (!numOutputs) {\n        throw new Error('need to know number of outputs when the \\'split\\' attribute is not specified');\n      }\n      SplitUtil.determineSplit(dims[axis], numOutputs, split);\n    }\n\n    const shapes: number[][] = [];\n    const offsets = [0];\n    for (let i = 0; i < split.length; ++i) {\n      if (i !== 0) {\n        offsets.push(offsets[i - 1] + split[i - 1]);\n      }\n      const shape = dims.slice();\n      shape[axis] = split[i];\n      shapes.push(shape);\n    }\n    return [shapes, offsets];\n  }\n\n  static determineSplit(numElementsAlongAxis: number, numOutputs: number, split: number[]) {\n    // If 'split' is not specified by the user, we need to partition the number of elements equally among the outputs\n    if (numElementsAlongAxis % numOutputs !== 0) {\n      throw new Error('cannot split tensor to equal sized parts');\n    }\n    for (let i = 0; i < numOutputs; ++i) {\n      split.push(numElementsAlongAxis / numOutputs);\n    }\n  }\n}\n\nexport class ReduceUtil {\n  /**\n   * Perform reduce operations on the specific operator\n   * @param a Input tensor data\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param keepdims If set to true, the axes which are reduced are left in the\n   *    result as dimensions with size one.\n   * @param op1 The operation to be performed on each element in the tensor\n   * @param op2 The operation to be performed between elements in the tensor\n   */\n  static calcReduce(\n      a: Tensor, axes: number[], keepdims: boolean, op1: (b: number) => number,\n      op2: (a: number, b: number) => number): Tensor {\n    const dims = a.dims.slice(0);\n    // if axes is not set, perform reduce on all axes\n    if (axes.length === 0) {\n      dims.forEach((d, ind) => axes.push(ind));\n    }\n    // get a temporary broadcastable output shape\n    const outputDims = ReduceUtil.calcReduceShape(dims, axes, true);\n\n    // loop through the output and calculate result one by one\n    const size = ShapeUtil.size(outputDims);\n    const y = new Tensor(outputDims, a.type);\n    const strides = ShapeUtil.computeStrides(outputDims);\n    const inputStrides = ShapeUtil.computeStrides(dims);\n    const indicesY = new Array(dims.length);\n    for (let i = 0; i < size; i++) {\n      const indices = ShapeUtil.offsetToIndices(i, strides);\n      // map index\n      BroadcastUtil.fillIndex(indices, dims, indicesY);\n      y.set(\n          indices,\n          ReduceUtil.calcReduceByAxis(\n              a.numberData, axes, dims, 0, ShapeUtil.indicesToOffset(indicesY, inputStrides), op1, op2));\n    }\n\n    if (keepdims) {\n      return y;\n    } else {\n      // keepdims == 0, calculate the expected shape\n      return new Tensor(\n          ReduceUtil.calcReduceShape(dims, axes, keepdims), y.type, undefined, undefined, y.data, y.dataId);\n    }\n  }\n\n  /**\n   * Perform reduce operations on the specific operator on specific axes\n   * @param a Input tensor data\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param dims The input dimension.\n   * @param curAxisInd Index in axes specifying the current dimension along\n   *      which the tensor will be reduced\n   * @param pos The current index of element to perform operation\n   * @param op1 The operation to be performed on each element in the tensor\n   * @param op2 The operation to be performed between elements in the tensor\n   */\n  static calcReduceByAxis(\n      input: Tensor.NumberType, axes: number[], dims: number[], curAxisInd: number, pos: number,\n      op1: (b: number) => number, op2: (a: number, b: number) => number): number {\n    let res = 0;\n    if (curAxisInd >= axes.length) {\n      return op1(input[pos]);\n    }\n    const axis = axes[curAxisInd];\n    const step = axis >= dims.length ? 1 : ShapeUtil.size(dims.slice(axis + 1));\n    for (let i = 0; i < dims[axis]; i++) {\n      res = i === 0 ? ReduceUtil.calcReduceByAxis(input, axes, dims, curAxisInd + 1, pos, op1, op2) :\n                      op2(res, ReduceUtil.calcReduceByAxis(input, axes, dims, curAxisInd + 1, pos, op1, op2));\n      pos += step;\n    }\n    return res;\n  }\n\n  /**\n   * Calculate the expected shape of a reduce operation\n   * @param dims The input tensor dimension\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param keepdims If set to true, the axes which are reduced are left in the\n   *    result as dimensions with size one.\n   */\n  static calcReduceShape(dims: readonly number[], axes: readonly number[], keepDims: boolean): number[] {\n    const outputDims = dims.slice();\n    for (let i = 0; i < axes.length; i++) {\n      if (keepDims) {\n        outputDims[axes[i]] = 1;\n      } else {\n        outputDims[axes[i]] = 0;\n      }\n    }\n    return outputDims.filter(dim => dim !== 0);\n  }\n}\n\nexport class PoolConvUtil {\n  /**\n   * Adjust the kernel, strides, pads to correct rank. Set to default value if not present\n   * @param isGlobalOperator If true, perform global pooling.\n   * @param inputDims The input tensor dimension.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param strides Stride along each axis.\n   * @param dilations Dilation along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   */\n  static adjustPoolAttributes(\n      isGlobalOperator: boolean, inputDims: readonly number[], kernelShape: number[], strides: number[],\n      dilations: number[], pads: number[]) {\n    if (!isGlobalOperator && kernelShape.length !== inputDims.length - 2) {\n      throw new Error('length of specified kernel shapes should be 2 less than length of input dimensions');\n    }\n\n    if (isGlobalOperator) {\n      // adjust kernel shape to cover the input dims\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        if (dim >= kernelShape.length) {\n          kernelShape.push(inputDims[dim + 2]);\n        } else {\n          kernelShape[dim] = inputDims[dim + 2];\n        }\n      }\n    }\n\n    // adjust strides length to match kernel shape length\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (dim < strides.length) {\n        if (strides[dim] < 0) {\n          throw new Error('strides should be greater than or equal to 1');\n        }\n      } else {\n        strides.push(1);\n      }\n    }\n\n    // adjust dilation value\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (dim < dilations.length) {\n        if (dilations[dim] < 0) {\n          throw new Error('dilations should be greater than or equal to 1');\n        }\n      } else {\n        dilations.push(1);\n      }\n    }\n\n    // adjust pads length to match 2 * kernel shape length\n    for (let dim = 0; dim < kernelShape.length * 2; dim++) {\n      if (dim < pads.length) {\n        if (pads[dim] < 0) {\n          throw new Error('pad should be greater than or equal to 1');\n        }\n      } else {\n        pads.push(0);\n      }\n    }\n\n    // sanity checks for values in kernel shapes and pads\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (kernelShape[dim] <= 0) {\n        throw new Error('kernel shapes need to be greater than 0');\n      }\n\n      if (pads[dim] >= kernelShape[dim] || pads[dim + kernelShape.length] >= kernelShape[dim]) {\n        throw new Error('pads should be smaller than kernel');\n      }\n    }\n  }\n\n  // adjust pad values based on 'autoPad' attribute\n  static adjustPadsBasedOnAutoPad(\n      inputDims: readonly number[], strides: readonly number[], dilations: readonly number[],\n      kernelShape: readonly number[], pads: number[], autoPad?: string) {\n    if (!autoPad) {\n      return;\n    }\n\n    if (pads.length !== 2 * (inputDims.length - 2)) {\n      throw new Error('length of pads should be twice the length of data dimensions');\n    }\n\n    if (strides.length !== (inputDims.length - 2)) {\n      throw new Error('length of strides should be the length of data dimensions');\n    }\n\n    if (kernelShape.length !== (inputDims.length - 2)) {\n      throw new Error('length of kernel shapes should be the length of data dimensions');\n    }\n\n    for (let dim = 0; dim < inputDims.length - 2; dim++) {\n      PoolConvUtil.adjustPadAndReturnShape(\n          inputDims[dim + 2], strides[dim], dilations[dim], kernelShape[dim], pads, dim, dim + inputDims.length - 2,\n          autoPad);\n    }\n  }\n\n  /**\n   * Calculate the output shape for Pool ops based on input attributes. (Should be used only for Pool ops)\n   * @param isGlobalOperator If true, perform global pooling.\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\n   * @param strides Stride along each axis.\n   * @param dilations Dilation along each axis.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\n   */\n  static computePoolOutputShape(\n      isGlobalOperator: boolean, inputDims: readonly number[], strides: number[], dilations: number[],\n      kernelShape: number[], pads: number[], autoPad?: string): number[] {\n    if (inputDims.length <= 0) {\n      throw new Error('input shape must be of size greater than 0');\n    }\n\n    // Add batch size and number of channels of output\n    const outputDims = [inputDims[0], inputDims[1]];\n\n    PoolConvUtil.computeShapeHelper(\n        isGlobalOperator, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\n    return outputDims;\n  }\n\n  /**\n   * Calculate the output shape for Conv op based on input attributes. (Should be used only for Conv op)\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\n   * @param filterDims The filter tensor dimension. (inputs[1].dims)\n   * @param strides Stride along each axis.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\n   */\n  static computeConvOutputShape(\n      inputDims: readonly number[], filterDims: readonly number[], strides: number[], dilations: number[],\n      kernelShape: number[], pads: number[], autoPad?: string): number[] {\n    if (inputDims.length <= 0 || filterDims.length <= 0) {\n      throw new Error('invalid input tensor dims or invalid filter tensor dims');\n    }\n\n    // Add batch size and number of channels of output\n    const outputDims = [inputDims[0], filterDims[0]];\n\n    PoolConvUtil.computeShapeHelper(false, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\n    return outputDims;\n  }\n\n  // will compute output shapes for data dimensions ONLY (i.e.) no batch size and channels\n  // called by computePoolOutputShape() and computeConvOutputShape()\n  // adjust pads based on 'autoPad' attribute prior to shape computation\n  private static computeShapeHelper(\n      isGlobalOperator: boolean, inputDims: readonly number[], outputDims: number[], strides: readonly number[],\n      dilations: readonly number[], kernelShape: readonly number[], pads: number[], autoPad?: string) {\n    if (isGlobalOperator) {\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        outputDims.push(1);\n      }\n    } else {\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        outputDims.push(PoolConvUtil.adjustPadAndReturnShape(\n            inputDims[dim + 2], strides[dim], dilations[dim], kernelShape[dim], pads, dim, dim + inputDims.length - 2,\n            autoPad));\n      }\n    }\n  }\n\n  // helper for computeShapeHelper() and adjustPadsBasedOnAutoPad()\n  // adjusts pad value for given 'autoPad' string and computes output shape along a particular dimension\n  private static adjustPadAndReturnShape(\n      inSize: number, stride: number, dilation: number, kernel: number, pads: number[], padHeadIndex: number,\n      padTailIndex: number, autoPad?: string): number {\n    const dkernel = dilation * (kernel - 1) + 1;\n    if (autoPad && autoPad !== 'NOTSET') {\n      switch (autoPad) {\n        case 'VALID':\n          pads[padHeadIndex] = 0;\n          pads[padTailIndex] = 0;\n          return Math.floor(((inSize - dkernel) / stride) + 1);\n        case 'SAME_LOWER':\n        case 'SAME_UPPER':\n          if (dilation !== 1) {\n            throw new Error('Dilation not supported for SAME_UPPER or SAME_LOWER');\n          } else {\n            const legacyTargetSize = (inSize + stride - 1) / stride;\n            const padNeeded = (legacyTargetSize - 1) * stride + kernel - inSize;\n            pads[padHeadIndex] =\n                (autoPad === 'SAME_LOWER') ? Math.floor((padNeeded + 1) / 2) : Math.floor(padNeeded / 2);\n            pads[padTailIndex] = padNeeded - pads[padHeadIndex];\n            return Math.floor(((inSize + padNeeded - kernel) / stride) + 1);\n          }\n        default:\n          throw new Error('Unsupported AutoPad type');\n      }\n    } else {\n      return Math.floor(((inSize + pads[padHeadIndex] + pads[padTailIndex] - dkernel) / stride) + 1);\n    }\n  }\n}\n\nexport const MIN_CLIP = -3.4028234663852886e+38;\nexport const MAX_CLIP = 3.4028234663852886e+38;\n\nexport function decodeUtf8String(buffer: Uint8Array): string {\n  return new TextDecoder().decode(buffer);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n// This file is generated by /js/scripts/update-version.ts\n// Do not modify file content manually.\n\nexport const version = '1.17.0';\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Env, env, InferenceSession} from 'onnxruntime-common';\n\nimport {OrtWasmMessage, SerializableModeldata, SerializableSessionMetadata, SerializableTensor} from './proxy-messages';\nimport * as core from './wasm-core-impl';\nimport {initializeWebAssembly} from './wasm-factory';\n\nconst isProxy = (): boolean => !!env.wasm.proxy && typeof document !== 'undefined';\nlet proxyWorker: Worker|undefined;\nlet initializing = false;\nlet initialized = false;\nlet aborted = false;\n\n// resolve; reject\ntype PromiseCallbacks<T = void> = [(result: T) => void, (reason: unknown) => void];\n\nlet initWasmCallbacks: PromiseCallbacks;\nlet initOrtCallbacks: PromiseCallbacks;\nconst createSessionAllocateCallbacks: Array<PromiseCallbacks<SerializableModeldata>> = [];\nconst createSessionFinalizeCallbacks: Array<PromiseCallbacks<SerializableSessionMetadata>> = [];\nconst createSessionCallbacks: Array<PromiseCallbacks<SerializableSessionMetadata>> = [];\nconst releaseSessionCallbacks: Array<PromiseCallbacks<void>> = [];\nconst runCallbacks: Array<PromiseCallbacks<SerializableTensor[]>> = [];\nconst endProfilingCallbacks: Array<PromiseCallbacks<void>> = [];\n\nconst ensureWorker = (): void => {\n  if (initializing || !initialized || aborted || !proxyWorker) {\n    throw new Error('worker not ready');\n  }\n};\n\nconst onProxyWorkerMessage = (ev: MessageEvent<OrtWasmMessage>): void => {\n  switch (ev.data.type) {\n    case 'init-wasm':\n      initializing = false;\n      if (ev.data.err) {\n        aborted = true;\n        initWasmCallbacks[1](ev.data.err);\n      } else {\n        initialized = true;\n        initWasmCallbacks[0]();\n      }\n      break;\n    case 'init-ort':\n      if (ev.data.err) {\n        initOrtCallbacks[1](ev.data.err);\n      } else {\n        initOrtCallbacks[0]();\n      }\n      break;\n    case 'create_allocate':\n      if (ev.data.err) {\n        createSessionAllocateCallbacks.shift()![1](ev.data.err);\n      } else {\n        createSessionAllocateCallbacks.shift()![0](ev.data.out!);\n      }\n      break;\n    case 'create_finalize':\n      if (ev.data.err) {\n        createSessionFinalizeCallbacks.shift()![1](ev.data.err);\n      } else {\n        createSessionFinalizeCallbacks.shift()![0](ev.data.out!);\n      }\n      break;\n    case 'create':\n      if (ev.data.err) {\n        createSessionCallbacks.shift()![1](ev.data.err);\n      } else {\n        createSessionCallbacks.shift()![0](ev.data.out!);\n      }\n      break;\n    case 'release':\n      if (ev.data.err) {\n        releaseSessionCallbacks.shift()![1](ev.data.err);\n      } else {\n        releaseSessionCallbacks.shift()![0]();\n      }\n      break;\n    case 'run':\n      if (ev.data.err) {\n        runCallbacks.shift()![1](ev.data.err);\n      } else {\n        runCallbacks.shift()![0](ev.data.out!);\n      }\n      break;\n    case 'end-profiling':\n      if (ev.data.err) {\n        endProfilingCallbacks.shift()![1](ev.data.err);\n      } else {\n        endProfilingCallbacks.shift()![0]();\n      }\n      break;\n    default:\n  }\n};\n\nconst scriptSrc = typeof document !== 'undefined' ? (document?.currentScript as HTMLScriptElement)?.src : undefined;\n\nexport const initializeWebAssemblyInstance = async(): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    if (initialized) {\n      return;\n    }\n    if (initializing) {\n      throw new Error('multiple calls to \\'initWasm()\\' detected.');\n    }\n    if (aborted) {\n      throw new Error('previous call to \\'initWasm()\\' failed.');\n    }\n\n    initializing = true;\n\n    // overwrite wasm filepaths\n    if (env.wasm.wasmPaths === undefined) {\n      if (scriptSrc && scriptSrc.indexOf('blob:') !== 0) {\n        env.wasm.wasmPaths = scriptSrc.substr(0, +(scriptSrc).lastIndexOf('/') + 1);\n      }\n    }\n\n    return new Promise<void>((resolve, reject) => {\n      proxyWorker?.terminate();\n      // eslint-disable-next-line @typescript-eslint/no-var-requires, @typescript-eslint/no-require-imports\n      proxyWorker = require('worker-loader?inline=no-fallback!./proxy-worker/main').default() as Worker;\n      proxyWorker.onmessage = onProxyWorkerMessage;\n      initWasmCallbacks = [resolve, reject];\n      const message: OrtWasmMessage = {type: 'init-wasm', in : env.wasm};\n      proxyWorker.postMessage(message);\n    });\n\n  } else {\n    return initializeWebAssembly(env.wasm);\n  }\n};\n\nexport const initializeRuntime = async(env: Env): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<void>((resolve, reject) => {\n      initOrtCallbacks = [resolve, reject];\n      const message: OrtWasmMessage = {type: 'init-ort', in : env};\n      proxyWorker!.postMessage(message);\n    });\n  } else {\n    await core.initRuntime(env);\n  }\n};\n\nexport const createSessionAllocate = async(model: Uint8Array): Promise<SerializableModeldata> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<SerializableModeldata>((resolve, reject) => {\n      createSessionAllocateCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'create_allocate', in : {model}};\n      proxyWorker!.postMessage(message, [model.buffer]);\n    });\n  } else {\n    return core.createSessionAllocate(model);\n  }\n};\n\nexport const createSessionFinalize = async(modeldata: SerializableModeldata, options?: InferenceSession.SessionOptions):\n    Promise<SerializableSessionMetadata> => {\n      if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n        ensureWorker();\n        return new Promise<SerializableSessionMetadata>((resolve, reject) => {\n          createSessionFinalizeCallbacks.push([resolve, reject]);\n          const message: OrtWasmMessage = {type: 'create_finalize', in : {modeldata, options}};\n          proxyWorker!.postMessage(message);\n        });\n      } else {\n        return core.createSessionFinalize(modeldata, options);\n      }\n    };\n\nexport const createSession =\n    async(model: Uint8Array, options?: InferenceSession.SessionOptions): Promise<SerializableSessionMetadata> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<SerializableSessionMetadata>((resolve, reject) => {\n      createSessionCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'create', in : {model, options}};\n      proxyWorker!.postMessage(message, [model.buffer]);\n    });\n  } else {\n    return core.createSession(model, options);\n  }\n};\n\nexport const releaseSession = async(sessionId: number): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<void>((resolve, reject) => {\n      releaseSessionCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'release', in : sessionId};\n      proxyWorker!.postMessage(message);\n    });\n  } else {\n    core.releaseSession(sessionId);\n  }\n};\n\nexport const run = async(\n    sessionId: number, inputIndices: number[], inputs: SerializableTensor[], outputIndices: number[],\n    options: InferenceSession.RunOptions): Promise<SerializableTensor[]> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<SerializableTensor[]>((resolve, reject) => {\n      runCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'run', in : {sessionId, inputIndices, inputs, outputIndices, options}};\n      proxyWorker!.postMessage(message, core.extractTransferableBuffers(inputs));\n    });\n  } else {\n    return core.run(sessionId, inputIndices, inputs, outputIndices, options);\n  }\n};\n\nexport const endProfiling = async(sessionId: number): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<void>((resolve, reject) => {\n      endProfilingCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'end-profiling', in : sessionId};\n      proxyWorker!.postMessage(message);\n    });\n  } else {\n    core.endProfiling(sessionId);\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession} from 'onnxruntime-common';\n\nimport {getInstance} from './wasm-factory';\nimport {allocWasmString, checkLastError, iterateExtraOptions} from './wasm-utils';\n\nexport const setRunOptions = (options: InferenceSession.RunOptions): [number, number[]] => {\n  const wasm = getInstance();\n  let runOptionsHandle = 0;\n  const allocs: number[] = [];\n\n  const runOptions: InferenceSession.RunOptions = options || {};\n\n  try {\n    if (options?.logSeverityLevel === undefined) {\n      runOptions.logSeverityLevel = 2;  // Default to warning\n    } else if (\n        typeof options.logSeverityLevel !== 'number' || !Number.isInteger(options.logSeverityLevel) ||\n        options.logSeverityLevel < 0 || options.logSeverityLevel > 4) {\n      throw new Error(`log serverity level is not valid: ${options.logSeverityLevel}`);\n    }\n\n    if (options?.logVerbosityLevel === undefined) {\n      runOptions.logVerbosityLevel = 0;  // Default to 0\n    } else if (typeof options.logVerbosityLevel !== 'number' || !Number.isInteger(options.logVerbosityLevel)) {\n      throw new Error(`log verbosity level is not valid: ${options.logVerbosityLevel}`);\n    }\n\n    if (options?.terminate === undefined) {\n      runOptions.terminate = false;\n    }\n\n    let tagDataOffset = 0;\n    if (options?.tag !== undefined) {\n      tagDataOffset = allocWasmString(options.tag, allocs);\n    }\n\n    runOptionsHandle = wasm._OrtCreateRunOptions(\n        runOptions.logSeverityLevel!, runOptions.logVerbosityLevel!, !!runOptions.terminate!, tagDataOffset);\n    if (runOptionsHandle === 0) {\n      checkLastError('Can\\'t create run options.');\n    }\n\n    if (options?.extra !== undefined) {\n      iterateExtraOptions(options.extra, '', new WeakSet<Record<string, unknown>>(), (key, value) => {\n        const keyDataOffset = allocWasmString(key, allocs);\n        const valueDataOffset = allocWasmString(value, allocs);\n\n        if (wasm._OrtAddRunConfigEntry(runOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n          checkLastError(`Can't set a run config entry: ${key} - ${value}.`);\n        }\n      });\n    }\n\n    return [runOptionsHandle, allocs];\n  } catch (e) {\n    if (runOptionsHandle !== 0) {\n      wasm._OrtReleaseRunOptions(runOptionsHandle);\n    }\n    allocs.forEach(alloc => wasm._free(alloc));\n    throw e;\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {readFile} from 'fs';\nimport {env, InferenceSession, SessionHandler, Tensor} from 'onnxruntime-common';\nimport {promisify} from 'util';\n\nimport {SerializableModeldata} from './proxy-messages';\nimport {createSession, createSessionAllocate, createSessionFinalize, endProfiling, initializeRuntime, releaseSession, run} from './proxy-wrapper';\n\nlet runtimeInitialized: boolean;\nlet runtimeInitializationPromise: Promise<void>|undefined;\n\nexport class OnnxruntimeWebAssemblySessionHandler implements SessionHandler {\n  private sessionId: number;\n\n  inputNames: string[];\n  outputNames: string[];\n\n  async createSessionAllocate(path: string): Promise<SerializableModeldata> {\n    // fetch model from url and move to wasm heap. The arraybufffer that held the http\n    // response is freed once we return\n    const response = await fetch(path);\n    if (response.status !== 200) {\n      throw new Error(`failed to load model: ${path}`);\n    }\n    const arrayBuffer = await response.arrayBuffer();\n    return createSessionAllocate(new Uint8Array(arrayBuffer));\n  }\n\n  async loadModel(pathOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions): Promise<void> {\n    if (!runtimeInitialized) {\n      if (!runtimeInitializationPromise) {\n        runtimeInitializationPromise = initializeRuntime(env);\n      }\n      await runtimeInitializationPromise;\n      runtimeInitializationPromise = undefined;\n      runtimeInitialized = true;\n    }\n\n    if (typeof pathOrBuffer === 'string') {\n      if (typeof process !== 'undefined' && process.versions && process.versions.node) {\n        // node\n        const model = await promisify(readFile)(pathOrBuffer);\n        [this.sessionId, this.inputNames, this.outputNames] = await createSession(model, options);\n      } else {\n        // browser\n        // fetch model and move to wasm heap.\n        const modelData: SerializableModeldata = await this.createSessionAllocate(pathOrBuffer);\n        // create the session\n        [this.sessionId, this.inputNames, this.outputNames] = await createSessionFinalize(modelData, options);\n      }\n    } else {\n      [this.sessionId, this.inputNames, this.outputNames] = await createSession(pathOrBuffer, options);\n    }\n  }\n\n  async dispose(): Promise<void> {\n    return releaseSession(this.sessionId);\n  }\n\n  async run(feeds: SessionHandler.FeedsType, fetches: SessionHandler.FetchesType, options: InferenceSession.RunOptions):\n      Promise<SessionHandler.ReturnType> {\n    const inputArray: Tensor[] = [];\n    const inputIndices: number[] = [];\n    Object.entries(feeds).forEach(kvp => {\n      const name = kvp[0];\n      const tensor = kvp[1];\n      const index = this.inputNames.indexOf(name);\n      if (index === -1) {\n        throw new Error(`invalid input '${name}'`);\n      }\n      inputArray.push(tensor);\n      inputIndices.push(index);\n    });\n\n    const outputIndices: number[] = [];\n    Object.entries(fetches).forEach(kvp => {\n      const name = kvp[0];\n      // TODO: support pre-allocated output\n      const index = this.outputNames.indexOf(name);\n      if (index === -1) {\n        throw new Error(`invalid output '${name}'`);\n      }\n      outputIndices.push(index);\n    });\n\n    const outputs =\n        await run(this.sessionId, inputIndices, inputArray.map(t => [t.type, t.dims, t.data]), outputIndices, options);\n\n    const result: SessionHandler.ReturnType = {};\n    for (let i = 0; i < outputs.length; i++) {\n      result[this.outputNames[outputIndices[i]]] = new Tensor(outputs[i][0], outputs[i][2], outputs[i][1]);\n    }\n    return result;\n  }\n\n  startProfiling(): void {\n    // TODO: implement profiling\n  }\n\n  endProfiling(): void {\n    void endProfiling(this.sessionId);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession} from 'onnxruntime-common';\n\nimport {getInstance} from './wasm-factory';\nimport {allocWasmString, checkLastError, iterateExtraOptions} from './wasm-utils';\n\nconst getGraphOptimzationLevel = (graphOptimizationLevel: string|unknown): number => {\n  switch (graphOptimizationLevel) {\n    case 'disabled':\n      return 0;\n    case 'basic':\n      return 1;\n    case 'extended':\n      return 2;\n    case 'all':\n      return 99;\n    default:\n      throw new Error(`unsupported graph optimization level: ${graphOptimizationLevel}`);\n  }\n};\n\nconst getExecutionMode = (executionMode: 'sequential'|'parallel'): number => {\n  switch (executionMode) {\n    case 'sequential':\n      return 0;\n    case 'parallel':\n      return 1;\n    default:\n      throw new Error(`unsupported execution mode: ${executionMode}`);\n  }\n};\n\nconst appendDefaultOptions = (options: InferenceSession.SessionOptions): void => {\n  if (!options.extra) {\n    options.extra = {};\n  }\n  if (!options.extra.session) {\n    options.extra.session = {};\n  }\n  const session = options.extra.session as Record<string, string>;\n  if (!session.use_ort_model_bytes_directly) {\n    // eslint-disable-next-line camelcase\n    session.use_ort_model_bytes_directly = '1';\n  }\n\n  // if using JSEP with WebGPU, always disable memory pattern\n  if (options.executionProviders &&\n      options.executionProviders.some(ep => (typeof ep === 'string' ? ep : ep.name) === 'webgpu')) {\n    options.enableMemPattern = false;\n  }\n};\n\nconst setExecutionProviders =\n    (sessionOptionsHandle: number, executionProviders: readonly InferenceSession.ExecutionProviderConfig[],\n     allocs: number[]): void => {\n      for (const ep of executionProviders) {\n        let epName = typeof ep === 'string' ? ep : ep.name;\n\n        // check EP name\n        switch (epName) {\n          case 'xnnpack':\n            epName = 'XNNPACK';\n            break;\n          case 'webnn':\n            epName = 'WEBNN';\n            if (typeof ep !== 'string') {\n              const webnnOptions = ep as InferenceSession.WebNNExecutionProviderOption;\n              if (webnnOptions?.deviceType) {\n                const keyDataOffset = allocWasmString('deviceType', allocs);\n                const valueDataOffset = allocWasmString(webnnOptions.deviceType, allocs);\n                if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !==\n                    0) {\n                  checkLastError(`Can't set a session config entry: 'deviceType' - ${webnnOptions.deviceType}.`);\n                }\n              }\n              if (webnnOptions?.powerPreference) {\n                const keyDataOffset = allocWasmString('powerPreference', allocs);\n                const valueDataOffset = allocWasmString(webnnOptions.powerPreference, allocs);\n                if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !==\n                    0) {\n                  checkLastError(\n                      `Can't set a session config entry: 'powerPreference' - ${webnnOptions.powerPreference}.`);\n                }\n              }\n            }\n            break;\n          case 'webgpu':\n            epName = 'JS';\n            break;\n          case 'wasm':\n          case 'cpu':\n            continue;\n          default:\n            throw new Error(`not supported execution provider: ${epName}`);\n        }\n\n        const epNameDataOffset = allocWasmString(epName, allocs);\n        if (getInstance()._OrtAppendExecutionProvider(sessionOptionsHandle, epNameDataOffset) !== 0) {\n          checkLastError(`Can't append execution provider: ${epName}.`);\n        }\n      }\n    };\n\nexport const setSessionOptions = (options?: InferenceSession.SessionOptions): [number, number[]] => {\n  const wasm = getInstance();\n  let sessionOptionsHandle = 0;\n  const allocs: number[] = [];\n\n  const sessionOptions: InferenceSession.SessionOptions = options || {};\n  appendDefaultOptions(sessionOptions);\n\n  try {\n    const graphOptimizationLevel = getGraphOptimzationLevel(sessionOptions.graphOptimizationLevel ?? 'all');\n    const executionMode = getExecutionMode(sessionOptions.executionMode ?? 'sequential');\n    const logIdDataOffset =\n        typeof sessionOptions.logId === 'string' ? allocWasmString(sessionOptions.logId, allocs) : 0;\n\n    const logSeverityLevel = sessionOptions.logSeverityLevel ?? 2;  // Default to 2 - warning\n    if (!Number.isInteger(logSeverityLevel) || logSeverityLevel < 0 || logSeverityLevel > 4) {\n      throw new Error(`log serverity level is not valid: ${logSeverityLevel}`);\n    }\n\n    const logVerbosityLevel = sessionOptions.logVerbosityLevel ?? 0;  // Default to 0 - verbose\n    if (!Number.isInteger(logVerbosityLevel) || logVerbosityLevel < 0 || logVerbosityLevel > 4) {\n      throw new Error(`log verbosity level is not valid: ${logVerbosityLevel}`);\n    }\n\n    const optimizedModelFilePathOffset = typeof sessionOptions.optimizedModelFilePath === 'string' ?\n        allocWasmString(sessionOptions.optimizedModelFilePath, allocs) :\n        0;\n\n    sessionOptionsHandle = wasm._OrtCreateSessionOptions(\n        graphOptimizationLevel, !!sessionOptions.enableCpuMemArena, !!sessionOptions.enableMemPattern, executionMode,\n        !!sessionOptions.enableProfiling, 0, logIdDataOffset, logSeverityLevel, logVerbosityLevel,\n        optimizedModelFilePathOffset);\n    if (sessionOptionsHandle === 0) {\n      checkLastError('Can\\'t create session options.');\n    }\n\n    if (sessionOptions.executionProviders) {\n      setExecutionProviders(sessionOptionsHandle, sessionOptions.executionProviders, allocs);\n    }\n\n    if (sessionOptions.freeDimensionOverrides) {\n      for (const [name, value] of Object.entries(sessionOptions.freeDimensionOverrides)) {\n        if (typeof name !== 'string') {\n          throw new Error(`free dimension override name must be a string: ${name}`);\n        }\n        if (typeof value !== 'number' || !Number.isInteger(value) || value < 0) {\n          throw new Error(`free dimension override value must be a non-negative integer: ${value}`);\n        }\n        const nameOffset = allocWasmString(name, allocs);\n        if (wasm._OrtAddFreeDimensionOverride(sessionOptionsHandle, nameOffset, value) !== 0) {\n          checkLastError(`Can't set a free dimension override: ${name} - ${value}.`);\n        }\n      }\n    }\n\n    if (sessionOptions.extra !== undefined) {\n      iterateExtraOptions(sessionOptions.extra, '', new WeakSet<Record<string, unknown>>(), (key, value) => {\n        const keyDataOffset = allocWasmString(key, allocs);\n        const valueDataOffset = allocWasmString(value, allocs);\n\n        if (wasm._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n          checkLastError(`Can't set a session config entry: ${key} - ${value}.`);\n        }\n      });\n    }\n\n    return [sessionOptionsHandle, allocs];\n  } catch (e) {\n    if (sessionOptionsHandle !== 0) {\n      wasm._OrtReleaseSessionOptions(sessionOptionsHandle);\n    }\n    allocs.forEach(alloc => wasm._free(alloc));\n    throw e;\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from 'onnxruntime-common';\n\n// This file includes common definitions. They do NOT have dependency on the WebAssembly instance.\n\n/**\n * Copied from ONNX definition. Use this to drop dependency 'onnx_proto' to decrease compiled .js file size.\n */\nexport const enum DataType {\n  undefined = 0,\n  float = 1,\n  uint8 = 2,\n  int8 = 3,\n  uint16 = 4,\n  int16 = 5,\n  int32 = 6,\n  int64 = 7,\n  string = 8,\n  bool = 9,\n  float16 = 10,\n  double = 11,\n  uint32 = 12,\n  uint64 = 13,\n  complex64 = 14,\n  complex128 = 15,\n  bfloat16 = 16\n}\n\n/**\n * Map string tensor data to enum value\n */\nexport const tensorDataTypeStringToEnum = (type: string): DataType => {\n  switch (type) {\n    case 'int8':\n      return DataType.int8;\n    case 'uint8':\n      return DataType.uint8;\n    case 'bool':\n      return DataType.bool;\n    case 'int16':\n      return DataType.int16;\n    case 'uint16':\n      return DataType.uint16;\n    case 'int32':\n      return DataType.int32;\n    case 'uint32':\n      return DataType.uint32;\n    case 'float16':\n      return DataType.float16;\n    case 'float32':\n      return DataType.float;\n    case 'float64':\n      return DataType.double;\n    case 'string':\n      return DataType.string;\n    case 'int64':\n      return DataType.int64;\n    case 'uint64':\n      return DataType.uint64;\n\n    default:\n      throw new Error(`unsupported data type: ${type}`);\n  }\n};\n\n/**\n * Map enum value to string tensor data\n */\nexport const tensorDataTypeEnumToString = (typeProto: DataType): Tensor.Type => {\n  switch (typeProto) {\n    case DataType.int8:\n      return 'int8';\n    case DataType.uint8:\n      return 'uint8';\n    case DataType.bool:\n      return 'bool';\n    case DataType.int16:\n      return 'int16';\n    case DataType.uint16:\n      return 'uint16';\n    case DataType.int32:\n      return 'int32';\n    case DataType.uint32:\n      return 'uint32';\n    case DataType.float16:\n      return 'float16';\n    case DataType.float:\n      return 'float32';\n    case DataType.double:\n      return 'float64';\n    case DataType.string:\n      return 'string';\n    case DataType.int64:\n      return 'int64';\n    case DataType.uint64:\n      return 'uint64';\n\n    default:\n      throw new Error(`unsupported data type: ${typeProto}`);\n  }\n};\n\n/**\n * get tensor element size in bytes by the given data type\n * @returns size in integer or undefined if the data type is not supported\n */\nexport const getTensorElementSize = (dateType: number): number|\n    undefined => [undefined, 4, 1, 1, 2, 2, 4, 8, undefined, 1, 2, 8, 4, 8, undefined, undefined, undefined][dateType];\n\n/**\n * get typed array constructor by the given tensor type\n */\nexport const tensorTypeToTypedArrayConstructor = (type: Tensor.Type): Float32ArrayConstructor|Uint8ArrayConstructor|\n    Int8ArrayConstructor|Uint16ArrayConstructor|Int16ArrayConstructor|Int32ArrayConstructor|BigInt64ArrayConstructor|\n    Uint8ArrayConstructor|Float64ArrayConstructor|Uint32ArrayConstructor|BigUint64ArrayConstructor => {\n      switch (type) {\n        case 'float16':\n          return Uint16Array;\n        case 'float32':\n          return Float32Array;\n        case 'uint8':\n          return Uint8Array;\n        case 'int8':\n          return Int8Array;\n        case 'uint16':\n          return Uint16Array;\n        case 'int16':\n          return Int16Array;\n        case 'int32':\n          return Int32Array;\n        case 'bool':\n          return Uint8Array;\n        case 'float64':\n          return Float64Array;\n        case 'uint32':\n          return Uint32Array;\n        case 'int64':\n          return BigInt64Array;\n        case 'uint64':\n          return BigUint64Array;\n        default:\n          throw new Error(`unsupported type: ${type}`);\n      }\n    };\n\n/**\n * Map string log level to integer value\n */\nexport const logLevelStringToEnum = (logLevel?: 'verbose'|'info'|'warning'|'error'|'fatal'): number => {\n  switch (logLevel) {\n    case 'verbose':\n      return 0;\n    case 'info':\n      return 1;\n    case 'warning':\n      return 2;\n    case 'error':\n      return 3;\n    case 'fatal':\n      return 4;\n    default:\n      throw new Error(`unsupported logging level: ${logLevel}`);\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Env, InferenceSession, Tensor} from 'onnxruntime-common';\n\nimport {SerializableModeldata, SerializableSessionMetadata, SerializableTensor} from './proxy-messages';\nimport {setRunOptions} from './run-options';\nimport {setSessionOptions} from './session-options';\nimport {logLevelStringToEnum, tensorDataTypeEnumToString, tensorDataTypeStringToEnum, tensorTypeToTypedArrayConstructor} from './wasm-common';\nimport {getInstance} from './wasm-factory';\nimport {allocWasmString, checkLastError} from './wasm-utils';\n\n/**\n * get the input/output count of the session.\n * @param sessionHandle the handle representing the session. should be non-zero.\n * @returns a tuple including 2 numbers, representing the input count and output count.\n */\nconst getSessionInputOutputCount = (sessionHandle: number): [number, number] => {\n  const wasm = getInstance();\n  const stack = wasm.stackSave();\n  try {\n    const dataOffset = wasm.stackAlloc(8);\n    const errorCode = wasm._OrtGetInputOutputCount(sessionHandle, dataOffset, dataOffset + 4);\n    if (errorCode !== 0) {\n      checkLastError('Can\\'t get session input/output count.');\n    }\n    return [wasm.HEAP32[dataOffset / 4], wasm.HEAP32[dataOffset / 4 + 1]];\n  } finally {\n    wasm.stackRestore(stack);\n  }\n};\n\n/**\n * initialize ORT environment.\n * @param numThreads SetGlobalIntraOpNumThreads(numThreads)\n * @param loggingLevel CreateEnv(static_cast<OrtLoggingLevel>(logging_level))\n */\nconst initOrt = (numThreads: number, loggingLevel: number): void => {\n  const errorCode = getInstance()._OrtInit(numThreads, loggingLevel);\n  if (errorCode !== 0) {\n    checkLastError('Can\\'t initialize onnxruntime.');\n  }\n};\n\n/**\n * intialize runtime environment.\n * @param env passed in the environment config object.\n */\nexport const initRuntime = async(env: Env): Promise<void> => {\n  // init ORT\n  initOrt(env.wasm.numThreads!, logLevelStringToEnum(env.logLevel));\n\n  if (!BUILD_DEFS.DISABLE_WEBGPU) {\n    // init JSEP if available\n\n    // eslint-disable-next-line @typescript-eslint/no-require-imports, @typescript-eslint/no-var-requires\n    const initJsep = require('./jsep/init').init;\n    await initJsep(getInstance(), env);\n  }\n};\n\n/**\n *  tuple elements are: InferenceSession ID; inputNamesUTF8Encoded; outputNamesUTF8Encoded\n */\ntype SessionMetadata = [number, number[], number[]];\n\nconst activeSessions = new Map<number, SessionMetadata>();\n\n/**\n * allocate the memory and memcpy the model bytes, preparing for creating an instance of InferenceSession.\n * @returns a 2-elements tuple - the pointer and size of the allocated buffer\n */\nexport const createSessionAllocate = (model: Uint8Array): [number, number] => {\n  const wasm = getInstance();\n  const modelDataOffset = wasm._malloc(model.byteLength);\n  if (modelDataOffset === 0) {\n    throw new Error(`Can't create a session. failed to allocate a buffer of size ${model.byteLength}.`);\n  }\n  wasm.HEAPU8.set(model, modelDataOffset);\n  return [modelDataOffset, model.byteLength];\n};\n\n/**\n * create an inference session using the prepared buffer containing the model data.\n * @param modelData a 2-elements tuple containing the pointer and size of the model data buffer.\n * @param options an optional session options object.\n * @returns a 3-elements tuple containing [session handle, input names, output names]\n */\nexport const createSessionFinalize =\n    (modelData: SerializableModeldata, options?: InferenceSession.SessionOptions): SerializableSessionMetadata => {\n      const wasm = getInstance();\n\n      let sessionHandle = 0;\n      let sessionOptionsHandle = 0;\n      let allocs: number[] = [];\n      const inputNamesUTF8Encoded = [];\n      const outputNamesUTF8Encoded = [];\n\n      try {\n        [sessionOptionsHandle, allocs] = setSessionOptions(options);\n\n        sessionHandle = wasm._OrtCreateSession(modelData[0], modelData[1], sessionOptionsHandle);\n        if (sessionHandle === 0) {\n          checkLastError('Can\\'t create a session.');\n        }\n\n        const [inputCount, outputCount] = getSessionInputOutputCount(sessionHandle);\n\n        const inputNames = [];\n        const outputNames = [];\n        for (let i = 0; i < inputCount; i++) {\n          const name = wasm._OrtGetInputName(sessionHandle, i);\n          if (name === 0) {\n            checkLastError('Can\\'t get an input name.');\n          }\n          inputNamesUTF8Encoded.push(name);\n          inputNames.push(wasm.UTF8ToString(name));\n        }\n        for (let i = 0; i < outputCount; i++) {\n          const name = wasm._OrtGetOutputName(sessionHandle, i);\n          if (name === 0) {\n            checkLastError('Can\\'t get an output name.');\n          }\n          outputNamesUTF8Encoded.push(name);\n          outputNames.push(wasm.UTF8ToString(name));\n        }\n\n        activeSessions.set(sessionHandle, [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded]);\n        return [sessionHandle, inputNames, outputNames];\n      } catch (e) {\n        inputNamesUTF8Encoded.forEach(buf => wasm._OrtFree(buf));\n        outputNamesUTF8Encoded.forEach(buf => wasm._OrtFree(buf));\n\n        if (sessionHandle !== 0) {\n          wasm._OrtReleaseSession(sessionHandle);\n        }\n        throw e;\n      } finally {\n        wasm._free(modelData[0]);\n        if (sessionOptionsHandle !== 0) {\n          wasm._OrtReleaseSessionOptions(sessionOptionsHandle);\n        }\n        allocs.forEach(alloc => wasm._free(alloc));\n      }\n    };\n\n\n/**\n * create an instance of InferenceSession.\n * @returns the metadata of InferenceSession. 0-value handle for failure.\n */\nexport const createSession =\n    (model: Uint8Array, options?: InferenceSession.SessionOptions): SerializableSessionMetadata => {\n      const modelData: SerializableModeldata = createSessionAllocate(model);\n      return createSessionFinalize(modelData, options);\n    };\n\nexport const releaseSession = (sessionId: number): void => {\n  const wasm = getInstance();\n  const session = activeSessions.get(sessionId);\n  if (!session) {\n    throw new Error(`cannot release session. invalid session id: ${sessionId}`);\n  }\n  const [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded] = session;\n\n  inputNamesUTF8Encoded.forEach(buf => wasm._OrtFree(buf));\n  outputNamesUTF8Encoded.forEach(buf => wasm._OrtFree(buf));\n  wasm._OrtReleaseSession(sessionHandle);\n  activeSessions.delete(sessionId);\n};\n\n/**\n * perform inference run\n */\nexport const run = async(\n    sessionId: number, inputIndices: number[], inputs: SerializableTensor[], outputIndices: number[],\n    options: InferenceSession.RunOptions): Promise<SerializableTensor[]> => {\n  const wasm = getInstance();\n  const session = activeSessions.get(sessionId);\n  if (!session) {\n    throw new Error(`cannot run inference. invalid session id: ${sessionId}`);\n  }\n  const [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded] = session;\n\n  const inputCount = inputIndices.length;\n  const outputCount = outputIndices.length;\n\n  let runOptionsHandle = 0;\n  let runOptionsAllocs: number[] = [];\n\n  const inputValues: number[] = [];\n  const inputAllocs: number[] = [];\n\n  try {\n    [runOptionsHandle, runOptionsAllocs] = setRunOptions(options);\n\n    // create input tensors\n    for (let i = 0; i < inputCount; i++) {\n      const dataType = inputs[i][0];\n      const dims = inputs[i][1];\n      const data = inputs[i][2];\n\n      let dataOffset: number;\n      let dataByteLength: number;\n\n      if (Array.isArray(data)) {\n        // string tensor\n        dataByteLength = 4 * data.length;\n        dataOffset = wasm._malloc(dataByteLength);\n        inputAllocs.push(dataOffset);\n        let dataIndex = dataOffset / 4;\n        for (let i = 0; i < data.length; i++) {\n          if (typeof data[i] !== 'string') {\n            throw new TypeError(`tensor data at index ${i} is not a string`);\n          }\n          wasm.HEAPU32[dataIndex++] = allocWasmString(data[i], inputAllocs);\n        }\n      } else {\n        dataByteLength = data.byteLength;\n        dataOffset = wasm._malloc(dataByteLength);\n        inputAllocs.push(dataOffset);\n        wasm.HEAPU8.set(new Uint8Array(data.buffer, data.byteOffset, dataByteLength), dataOffset);\n      }\n\n      const stack = wasm.stackSave();\n      const dimsOffset = wasm.stackAlloc(4 * dims.length);\n      try {\n        let dimIndex = dimsOffset / 4;\n        dims.forEach(d => wasm.HEAP32[dimIndex++] = d);\n        const tensor = wasm._OrtCreateTensor(\n            tensorDataTypeStringToEnum(dataType), dataOffset, dataByteLength, dimsOffset, dims.length);\n        if (tensor === 0) {\n          checkLastError(`Can't create tensor for input[${i}].`);\n        }\n        inputValues.push(tensor);\n      } finally {\n        wasm.stackRestore(stack);\n      }\n    }\n\n    const beforeRunStack = wasm.stackSave();\n    const inputValuesOffset = wasm.stackAlloc(inputCount * 4);\n    const inputNamesOffset = wasm.stackAlloc(inputCount * 4);\n    const outputValuesOffset = wasm.stackAlloc(outputCount * 4);\n    const outputNamesOffset = wasm.stackAlloc(outputCount * 4);\n\n    try {\n      let inputValuesIndex = inputValuesOffset / 4;\n      let inputNamesIndex = inputNamesOffset / 4;\n      let outputValuesIndex = outputValuesOffset / 4;\n      let outputNamesIndex = outputNamesOffset / 4;\n      for (let i = 0; i < inputCount; i++) {\n        wasm.HEAPU32[inputValuesIndex++] = inputValues[i];\n        wasm.HEAPU32[inputNamesIndex++] = inputNamesUTF8Encoded[inputIndices[i]];\n      }\n      for (let i = 0; i < outputCount; i++) {\n        wasm.HEAPU32[outputValuesIndex++] = 0;\n        wasm.HEAPU32[outputNamesIndex++] = outputNamesUTF8Encoded[outputIndices[i]];\n      }\n\n      // jsepOnRunStart is only available when JSEP is enabled.\n      wasm.jsepOnRunStart?.(sessionId);\n\n      // support RunOptions\n      let errorCode = wasm._OrtRun(\n          sessionHandle, inputNamesOffset, inputValuesOffset, inputCount, outputNamesOffset, outputCount,\n          outputValuesOffset, runOptionsHandle);\n\n      const runPromise = wasm.jsepRunPromise;\n      if (runPromise) {\n        // jsepRunPromise is a Promise object. It is only available when JSEP is enabled.\n        //\n        // OrtRun() is a synchrnous call, but it internally calls async functions. Emscripten's ASYNCIFY allows it to\n        // work in this way. However, OrtRun() does not return a promise, so when code reaches here, it is earlier than\n        // the async functions are finished.\n        //\n        // To make it work, we created a Promise and resolve the promise when the C++ code actually reaches the end of\n        // OrtRun(). If the promise exists, we need to await for the promise to be resolved.\n        errorCode = await runPromise;\n      }\n\n      const jsepOnRunEnd = wasm.jsepOnRunEnd;\n      if (jsepOnRunEnd) {\n        // jsepOnRunEnd is only available when JSEP is enabled.\n        //\n        // it returns a promise, which is resolved or rejected when the following async functions are finished:\n        // - collecting GPU validation errors.\n        await jsepOnRunEnd(sessionId);\n      }\n\n      const output: SerializableTensor[] = [];\n\n      if (errorCode !== 0) {\n        checkLastError('failed to call OrtRun().');\n      }\n\n      for (let i = 0; i < outputCount; i++) {\n        const tensor = wasm.HEAPU32[outputValuesOffset / 4 + i];\n\n        const beforeGetTensorDataStack = wasm.stackSave();\n        // stack allocate 4 pointer value\n        const tensorDataOffset = wasm.stackAlloc(4 * 4);\n\n        let type: Tensor.Type|undefined, dataOffset = 0;\n        try {\n          errorCode = wasm._OrtGetTensorData(\n              tensor, tensorDataOffset, tensorDataOffset + 4, tensorDataOffset + 8, tensorDataOffset + 12);\n          if (errorCode !== 0) {\n            checkLastError(`Can't access output tensor data on index ${i}.`);\n          }\n          let tensorDataIndex = tensorDataOffset / 4;\n          const dataType = wasm.HEAPU32[tensorDataIndex++];\n          dataOffset = wasm.HEAPU32[tensorDataIndex++];\n          const dimsOffset = wasm.HEAPU32[tensorDataIndex++];\n          const dimsLength = wasm.HEAPU32[tensorDataIndex++];\n          const dims = [];\n          for (let i = 0; i < dimsLength; i++) {\n            dims.push(wasm.HEAPU32[dimsOffset / 4 + i]);\n          }\n          wasm._OrtFree(dimsOffset);\n\n          const size = dims.length === 0 ? 1 : dims.reduce((a, b) => a * b);\n          type = tensorDataTypeEnumToString(dataType);\n          if (type === 'string') {\n            const stringData: string[] = [];\n            let dataIndex = dataOffset / 4;\n            for (let i = 0; i < size; i++) {\n              const offset = wasm.HEAPU32[dataIndex++];\n              const maxBytesToRead = i === size - 1 ? undefined : wasm.HEAPU32[dataIndex] - offset;\n              stringData.push(wasm.UTF8ToString(offset, maxBytesToRead));\n            }\n            output.push([type, dims, stringData]);\n          } else {\n            const typedArrayConstructor = tensorTypeToTypedArrayConstructor(type);\n            const data = new typedArrayConstructor(size);\n            new Uint8Array(data.buffer, data.byteOffset, data.byteLength)\n                .set(wasm.HEAPU8.subarray(dataOffset, dataOffset + data.byteLength));\n            output.push([type, dims, data]);\n          }\n        } finally {\n          wasm.stackRestore(beforeGetTensorDataStack);\n          if (type === 'string' && dataOffset) {\n            wasm._free(dataOffset);\n          }\n          wasm._OrtReleaseTensor(tensor);\n        }\n      }\n\n      return output;\n    } finally {\n      wasm.stackRestore(beforeRunStack);\n    }\n  } finally {\n    inputValues.forEach(v => wasm._OrtReleaseTensor(v));\n    inputAllocs.forEach(p => wasm._free(p));\n\n    if (runOptionsHandle !== 0) {\n      wasm._OrtReleaseRunOptions(runOptionsHandle);\n    }\n    runOptionsAllocs.forEach(p => wasm._free(p));\n  }\n};\n\n/**\n * end profiling\n */\nexport const endProfiling = (sessionId: number): void => {\n  const wasm = getInstance();\n  const session = activeSessions.get(sessionId);\n  if (!session) {\n    throw new Error('invalid session id');\n  }\n  const sessionHandle = session[0];\n\n  // profile file name is not used yet, but it must be freed.\n  const profileFileName = wasm._OrtEndProfiling(sessionHandle);\n  if (profileFileName === 0) {\n    checkLastError('Can\\'t get an profile file name.');\n  }\n  wasm._OrtFree(profileFileName);\n};\n\nexport const extractTransferableBuffers = (tensors: readonly SerializableTensor[]): ArrayBufferLike[] => {\n  const buffers: ArrayBufferLike[] = [];\n  for (const tensor of tensors) {\n    const data = tensor[2];\n    if (!Array.isArray(data) && data.buffer) {\n      buffers.push(data.buffer);\n    }\n  }\n  return buffers;\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Env} from 'onnxruntime-common';\nimport * as path from 'path';\n\nimport {OrtWasmModule} from './binding/ort-wasm';\nimport {OrtWasmThreadedModule} from './binding/ort-wasm-threaded';\n\n/* eslint-disable @typescript-eslint/no-require-imports */\nconst ortWasmFactory: EmscriptenModuleFactory<OrtWasmModule> =\n    BUILD_DEFS.DISABLE_WEBGPU ? require('./binding/ort-wasm.js') : require('./binding/ort-wasm-simd.jsep.js');\n\nconst ortWasmFactoryThreaded: EmscriptenModuleFactory<OrtWasmModule> = !BUILD_DEFS.DISABLE_WASM_THREAD ?\n    (BUILD_DEFS.DISABLE_WEBGPU ? require('./binding/ort-wasm-threaded.js') :\n                                 require('./binding/ort-wasm-simd-threaded.jsep.js')) :\n    ortWasmFactory;\n/* eslint-enable @typescript-eslint/no-require-imports */\n\nlet wasm: OrtWasmModule|undefined;\nlet initialized = false;\nlet initializing = false;\nlet aborted = false;\n\nconst isMultiThreadSupported = (): boolean => {\n  try {\n    // If 'SharedArrayBuffer' is not available, WebAssembly threads will not work.\n    if (typeof SharedArrayBuffer === 'undefined') {\n      return false;\n    }\n\n    // Test for transferability of SABs (for browsers. needed for Firefox)\n    // https://groups.google.com/forum/#!msg/mozilla.dev.platform/IHkBZlHETpA/dwsMNchWEQAJ\n    if (typeof MessageChannel !== 'undefined') {\n      new MessageChannel().port1.postMessage(new SharedArrayBuffer(1));\n    }\n\n    // Test for WebAssembly threads capability (for both browsers and Node.js)\n    // This typed array is a WebAssembly program containing threaded instructions.\n    return WebAssembly.validate(new Uint8Array([\n      0, 97, 115, 109, 1, 0,  0,  0, 1, 4, 1,  96, 0,   0,  3, 2, 1,  0, 5,\n      4, 1,  3,   1,   1, 10, 11, 1, 9, 0, 65, 0,  254, 16, 2, 0, 26, 11\n    ]));\n  } catch (e) {\n    return false;\n  }\n};\n\nconst isSimdSupported = (): boolean => {\n  try {\n    // Test for WebAssembly SIMD capability (for both browsers and Node.js)\n    // This typed array is a WebAssembly program containing SIMD instructions.\n\n    // The binary data is generated from the following code by wat2wasm:\n    //\n    // (module\n    //   (type $t0 (func))\n    //   (func $f0 (type $t0)\n    //     (drop\n    //       (i32x4.dot_i16x8_s\n    //         (i8x16.splat\n    //           (i32.const 0))\n    //         (v128.const i32x4 0x00000000 0x00000000 0x00000000 0x00000000)))))\n\n    return WebAssembly.validate(new Uint8Array([\n      0,   97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 10, 30, 1,   28,  0, 65, 0,\n      253, 15, 253, 12,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0,  0,  253, 186, 1, 26, 11\n    ]));\n  } catch (e) {\n    return false;\n  }\n};\n\nconst getWasmFileName = (useSimd: boolean, useThreads: boolean) => {\n  if (useThreads) {\n    return useSimd ? 'ort-wasm-simd-threaded.wasm' : 'ort-wasm-threaded.wasm';\n  } else {\n    return useSimd ? 'ort-wasm-simd.wasm' : 'ort-wasm.wasm';\n  }\n};\n\nexport const initializeWebAssembly = async(flags: Env.WebAssemblyFlags): Promise<void> => {\n  if (initialized) {\n    return Promise.resolve();\n  }\n  if (initializing) {\n    throw new Error('multiple calls to \\'initializeWebAssembly()\\' detected.');\n  }\n  if (aborted) {\n    throw new Error('previous call to \\'initializeWebAssembly()\\' failed.');\n  }\n\n  initializing = true;\n\n  // wasm flags are already initialized\n  const timeout = flags.initTimeout!;\n  const numThreads = flags.numThreads!;\n  const simd = flags.simd!;\n\n  const useThreads = numThreads > 1 && isMultiThreadSupported();\n  const useSimd = simd && isSimdSupported();\n\n  const wasmPaths = flags.wasmPaths;\n  const wasmPrefixOverride = typeof wasmPaths === 'string' ? wasmPaths : undefined;\n  const wasmFileName = getWasmFileName(useSimd, useThreads);\n  const wasmPathOverride = typeof wasmPaths === 'object' ? wasmPaths[wasmFileName] : undefined;\n\n  let isTimeout = false;\n\n  const tasks: Array<Promise<void>> = [];\n\n  // promise for timeout\n  if (timeout > 0) {\n    tasks.push(new Promise((resolve) => {\n      setTimeout(() => {\n        isTimeout = true;\n        resolve();\n      }, timeout);\n    }));\n  }\n\n  // promise for module initialization\n  tasks.push(new Promise((resolve, reject) => {\n    const factory = useThreads ? ortWasmFactoryThreaded : ortWasmFactory;\n    const config: Partial<OrtWasmModule> = {\n      locateFile: (fileName: string, scriptDirectory: string) => {\n        if (!BUILD_DEFS.DISABLE_WASM_THREAD && useThreads && fileName.endsWith('.worker.js') &&\n            typeof Blob !== 'undefined') {\n          return URL.createObjectURL(new Blob(\n              [\n                // This require() function is handled by webpack to load file content of the corresponding .worker.js\n                // eslint-disable-next-line @typescript-eslint/no-require-imports\n                require('./binding/ort-wasm-threaded.worker.js')\n              ],\n              {type: 'text/javascript'}));\n        }\n\n        if (fileName.endsWith('.wasm')) {\n          if (wasmPathOverride) {\n            return wasmPathOverride;\n          }\n\n          const prefix = wasmPrefixOverride ?? scriptDirectory;\n\n          if (!BUILD_DEFS.DISABLE_WEBGPU) {\n            if (wasmFileName === 'ort-wasm-simd.wasm') {\n              return prefix + 'ort-wasm-simd.jsep.wasm';\n            } else if (wasmFileName === 'ort-wasm-simd-threaded.wasm') {\n              return prefix + 'ort-wasm-simd-threaded.jsep.wasm';\n            }\n          }\n\n          return prefix + wasmFileName;\n        }\n\n        return scriptDirectory + fileName;\n      }\n    };\n\n    if (!BUILD_DEFS.DISABLE_WASM_THREAD && useThreads) {\n      if (typeof Blob === 'undefined') {\n        config.mainScriptUrlOrBlob = path.join(__dirname, 'ort-wasm-threaded.js');\n      } else {\n        const scriptSourceCode = `var ortWasmThreaded=(function(){var _scriptDir;return ${factory.toString()}})();`;\n        config.mainScriptUrlOrBlob = new Blob([scriptSourceCode], {type: 'text/javascript'});\n      }\n    }\n\n    factory(config).then(\n        // wasm module initialized successfully\n        module => {\n          initializing = false;\n          initialized = true;\n          wasm = module;\n          resolve();\n        },\n        // wasm module failed to initialize\n        (what) => {\n          initializing = false;\n          aborted = true;\n          reject(what);\n        });\n  }));\n\n  await Promise.race(tasks);\n\n  if (isTimeout) {\n    throw new Error(`WebAssembly backend initializing failed due to timeout: ${timeout}ms`);\n  }\n};\n\nexport const getInstance = (): OrtWasmModule => {\n  if (initialized && wasm) {\n    return wasm;\n  }\n\n  throw new Error('WebAssembly is not initialized yet.');\n};\n\nexport const dispose = (): void => {\n  if (initialized && !initializing && !aborted) {\n    initializing = true;\n\n    (wasm as OrtWasmThreadedModule).PThread?.terminateAllThreads();\n    wasm = undefined;\n\n    initializing = false;\n    initialized = false;\n    aborted = true;\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {getInstance} from './wasm-factory';\n\nexport const allocWasmString = (data: string, allocs: number[]): number => {\n  const wasm = getInstance();\n\n  const dataLength = wasm.lengthBytesUTF8(data) + 1;\n  const dataOffset = wasm._malloc(dataLength);\n  wasm.stringToUTF8(data, dataOffset, dataLength);\n  allocs.push(dataOffset);\n\n  return dataOffset;\n};\n\ninterface ExtraOptionsHandler {\n  (name: string, value: string): void;\n}\n\nexport const iterateExtraOptions =\n    (options: Record<string, unknown>, prefix: string, seen: WeakSet<Record<string, unknown>>,\n     handler: ExtraOptionsHandler): void => {\n      if (typeof options == 'object' && options !== null) {\n        if (seen.has(options)) {\n          throw new Error('Circular reference in options');\n        } else {\n          seen.add(options);\n        }\n      }\n\n      Object.entries(options).forEach(([key, value]) => {\n        const name = (prefix) ? prefix + key : key;\n        if (typeof value === 'object') {\n          iterateExtraOptions(value as Record<string, unknown>, name + '.', seen, handler);\n        } else if (typeof value === 'string' || typeof value === 'number') {\n          handler(name, value.toString());\n        } else if (typeof value === 'boolean') {\n          handler(name, (value) ? '1' : '0');\n        } else {\n          throw new Error(`Can't handle extra config type: ${typeof value}`);\n        }\n      });\n    };\n\n/**\n * check web assembly API's last error and throw error if any error occurred.\n * @param message a message used when an error occurred.\n */\nexport const checkLastError = (message: string): void => {\n  const wasm = getInstance();\n\n  const stack = wasm.stackSave();\n  try {\n    const paramsOffset = wasm.stackAlloc(8);\n    wasm._OrtGetLastError(paramsOffset, paramsOffset + 4);\n    const errorCode = wasm.HEAP32[paramsOffset / 4];\n    const errorMessagePointer = wasm.HEAPU32[paramsOffset / 4 + 1];\n    const errorMessage = errorMessagePointer ? wasm.UTF8ToString(errorMessagePointer) : '';\n    throw new Error(`${message} ERROR_CODE: ${errorCode}, ERROR_MESSAGE: ${errorMessage}`);\n  } finally {\n    wasm.stackRestore(stack);\n  }\n};\n","\nimport worker from \"!!../../../../node_modules/worker-loader/dist/runtime/inline.js\";\n\nexport default function Worker_fn() {\n  return worker(\"/*!\\n* ONNX Runtime Web v1.17.0\\n* Copyright (c) Microsoft Corporation. All rights reserved.\\n* Licensed under the MIT License.\\n*/\\n(()=>{var e={918:(e,t,r)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.setRunOptions=void 0;const n=r(263),a=r(497);t.setRunOptions=e=>{const t=(0,n.getInstance)();let r=0;const o=[],i=e||{};try{if(void 0===(null==e?void 0:e.logSeverityLevel))i.logSeverityLevel=2;else if(\\\"number\\\"!=typeof e.logSeverityLevel||!Number.isInteger(e.logSeverityLevel)||e.logSeverityLevel<0||e.logSeverityLevel>4)throw new Error(`log serverity level is not valid: ${e.logSeverityLevel}`);if(void 0===(null==e?void 0:e.logVerbosityLevel))i.logVerbosityLevel=0;else if(\\\"number\\\"!=typeof e.logVerbosityLevel||!Number.isInteger(e.logVerbosityLevel))throw new Error(`log verbosity level is not valid: ${e.logVerbosityLevel}`);void 0===(null==e?void 0:e.terminate)&&(i.terminate=!1);let n=0;return void 0!==(null==e?void 0:e.tag)&&(n=(0,a.allocWasmString)(e.tag,o)),r=t._OrtCreateRunOptions(i.logSeverityLevel,i.logVerbosityLevel,!!i.terminate,n),0===r&&(0,a.checkLastError)(\\\"Can't create run options.\\\"),void 0!==(null==e?void 0:e.extra)&&(0,a.iterateExtraOptions)(e.extra,\\\"\\\",new WeakSet,((e,n)=>{const i=(0,a.allocWasmString)(e,o),s=(0,a.allocWasmString)(n,o);0!==t._OrtAddRunConfigEntry(r,i,s)&&(0,a.checkLastError)(`Can't set a run config entry: ${e} - ${n}.`)})),[r,o]}catch(e){throw 0!==r&&t._OrtReleaseRunOptions(r),o.forEach((e=>t._free(e))),e}}},622:(e,t,r)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.setSessionOptions=void 0;const n=r(263),a=r(497);t.setSessionOptions=e=>{var t,r,o,i;const s=(0,n.getInstance)();let u=0;const c=[],l=e||{};(e=>{e.extra||(e.extra={}),e.extra.session||(e.extra.session={});const t=e.extra.session;t.use_ort_model_bytes_directly||(t.use_ort_model_bytes_directly=\\\"1\\\"),e.executionProviders&&e.executionProviders.some((e=>\\\"webgpu\\\"===(\\\"string\\\"==typeof e?e:e.name)))&&(e.enableMemPattern=!1)})(l);try{const e=(e=>{switch(e){case\\\"disabled\\\":return 0;case\\\"basic\\\":return 1;case\\\"extended\\\":return 2;case\\\"all\\\":return 99;default:throw new Error(`unsupported graph optimization level: ${e}`)}})(null!==(t=l.graphOptimizationLevel)&&void 0!==t?t:\\\"all\\\"),f=(e=>{switch(e){case\\\"sequential\\\":return 0;case\\\"parallel\\\":return 1;default:throw new Error(`unsupported execution mode: ${e}`)}})(null!==(r=l.executionMode)&&void 0!==r?r:\\\"sequential\\\"),d=\\\"string\\\"==typeof l.logId?(0,a.allocWasmString)(l.logId,c):0,p=null!==(o=l.logSeverityLevel)&&void 0!==o?o:2;if(!Number.isInteger(p)||p<0||p>4)throw new Error(`log serverity level is not valid: ${p}`);const g=null!==(i=l.logVerbosityLevel)&&void 0!==i?i:0;if(!Number.isInteger(g)||g<0||g>4)throw new Error(`log verbosity level is not valid: ${g}`);const h=\\\"string\\\"==typeof l.optimizedModelFilePath?(0,a.allocWasmString)(l.optimizedModelFilePath,c):0;if(u=s._OrtCreateSessionOptions(e,!!l.enableCpuMemArena,!!l.enableMemPattern,f,!!l.enableProfiling,0,d,p,g,h),0===u&&(0,a.checkLastError)(\\\"Can't create session options.\\\"),l.executionProviders&&((e,t,r)=>{for(const o of t){let t=\\\"string\\\"==typeof o?o:o.name;switch(t){case\\\"xnnpack\\\":t=\\\"XNNPACK\\\";break;case\\\"webnn\\\":if(t=\\\"WEBNN\\\",\\\"string\\\"!=typeof o){const t=o;if(null==t?void 0:t.deviceType){const o=(0,a.allocWasmString)(\\\"deviceType\\\",r),i=(0,a.allocWasmString)(t.deviceType,r);0!==(0,n.getInstance)()._OrtAddSessionConfigEntry(e,o,i)&&(0,a.checkLastError)(`Can't set a session config entry: 'deviceType' - ${t.deviceType}.`)}if(null==t?void 0:t.powerPreference){const o=(0,a.allocWasmString)(\\\"powerPreference\\\",r),i=(0,a.allocWasmString)(t.powerPreference,r);0!==(0,n.getInstance)()._OrtAddSessionConfigEntry(e,o,i)&&(0,a.checkLastError)(`Can't set a session config entry: 'powerPreference' - ${t.powerPreference}.`)}}break;case\\\"webgpu\\\":t=\\\"JS\\\";break;case\\\"wasm\\\":case\\\"cpu\\\":continue;default:throw new Error(`not supported execution provider: ${t}`)}const i=(0,a.allocWasmString)(t,r);0!==(0,n.getInstance)()._OrtAppendExecutionProvider(e,i)&&(0,a.checkLastError)(`Can't append execution provider: ${t}.`)}})(u,l.executionProviders,c),l.freeDimensionOverrides)for(const[e,t]of Object.entries(l.freeDimensionOverrides)){if(\\\"string\\\"!=typeof e)throw new Error(`free dimension override name must be a string: ${e}`);if(\\\"number\\\"!=typeof t||!Number.isInteger(t)||t<0)throw new Error(`free dimension override value must be a non-negative integer: ${t}`);const r=(0,a.allocWasmString)(e,c);0!==s._OrtAddFreeDimensionOverride(u,r,t)&&(0,a.checkLastError)(`Can't set a free dimension override: ${e} - ${t}.`)}return void 0!==l.extra&&(0,a.iterateExtraOptions)(l.extra,\\\"\\\",new WeakSet,((e,t)=>{const r=(0,a.allocWasmString)(e,c),n=(0,a.allocWasmString)(t,c);0!==s._OrtAddSessionConfigEntry(u,r,n)&&(0,a.checkLastError)(`Can't set a session config entry: ${e} - ${t}.`)})),[u,c]}catch(e){throw 0!==u&&s._OrtReleaseSessionOptions(u),c.forEach((e=>s._free(e))),e}}},917:(e,t)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.logLevelStringToEnum=t.tensorTypeToTypedArrayConstructor=t.getTensorElementSize=t.tensorDataTypeEnumToString=t.tensorDataTypeStringToEnum=void 0,t.tensorDataTypeStringToEnum=e=>{switch(e){case\\\"int8\\\":return 3;case\\\"uint8\\\":return 2;case\\\"bool\\\":return 9;case\\\"int16\\\":return 5;case\\\"uint16\\\":return 4;case\\\"int32\\\":return 6;case\\\"uint32\\\":return 12;case\\\"float16\\\":return 10;case\\\"float32\\\":return 1;case\\\"float64\\\":return 11;case\\\"string\\\":return 8;case\\\"int64\\\":return 7;case\\\"uint64\\\":return 13;default:throw new Error(`unsupported data type: ${e}`)}},t.tensorDataTypeEnumToString=e=>{switch(e){case 3:return\\\"int8\\\";case 2:return\\\"uint8\\\";case 9:return\\\"bool\\\";case 5:return\\\"int16\\\";case 4:return\\\"uint16\\\";case 6:return\\\"int32\\\";case 12:return\\\"uint32\\\";case 10:return\\\"float16\\\";case 1:return\\\"float32\\\";case 11:return\\\"float64\\\";case 8:return\\\"string\\\";case 7:return\\\"int64\\\";case 13:return\\\"uint64\\\";default:throw new Error(`unsupported data type: ${e}`)}},t.getTensorElementSize=e=>[void 0,4,1,1,2,2,4,8,void 0,1,2,8,4,8,void 0,void 0,void 0][e],t.tensorTypeToTypedArrayConstructor=e=>{switch(e){case\\\"float16\\\":case\\\"uint16\\\":return Uint16Array;case\\\"float32\\\":return Float32Array;case\\\"uint8\\\":case\\\"bool\\\":return Uint8Array;case\\\"int8\\\":return Int8Array;case\\\"int16\\\":return Int16Array;case\\\"int32\\\":return Int32Array;case\\\"float64\\\":return Float64Array;case\\\"uint32\\\":return Uint32Array;case\\\"int64\\\":return BigInt64Array;case\\\"uint64\\\":return BigUint64Array;default:throw new Error(`unsupported type: ${e}`)}},t.logLevelStringToEnum=e=>{switch(e){case\\\"verbose\\\":return 0;case\\\"info\\\":return 1;case\\\"warning\\\":return 2;case\\\"error\\\":return 3;case\\\"fatal\\\":return 4;default:throw new Error(`unsupported logging level: ${e}`)}}},259:(e,t,r)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.extractTransferableBuffers=t.endProfiling=t.run=t.releaseSession=t.createSession=t.createSessionFinalize=t.createSessionAllocate=t.initRuntime=void 0;const n=r(918),a=r(622),o=r(917),i=r(263),s=r(497);t.initRuntime=async e=>{var t,r;t=e.wasm.numThreads,r=(0,o.logLevelStringToEnum)(e.logLevel),0!==(0,i.getInstance)()._OrtInit(t,r)&&(0,s.checkLastError)(\\\"Can't initialize onnxruntime.\\\")};const u=new Map;t.createSessionAllocate=e=>{const t=(0,i.getInstance)(),r=t._malloc(e.byteLength);if(0===r)throw new Error(`Can't create a session. failed to allocate a buffer of size ${e.byteLength}.`);return t.HEAPU8.set(e,r),[r,e.byteLength]},t.createSessionFinalize=(e,t)=>{const r=(0,i.getInstance)();let n=0,o=0,c=[];const l=[],f=[];try{[o,c]=(0,a.setSessionOptions)(t),n=r._OrtCreateSession(e[0],e[1],o),0===n&&(0,s.checkLastError)(\\\"Can't create a session.\\\");const[d,p]=(e=>{const t=(0,i.getInstance)(),r=t.stackSave();try{const r=t.stackAlloc(8);return 0!==t._OrtGetInputOutputCount(e,r,r+4)&&(0,s.checkLastError)(\\\"Can't get session input/output count.\\\"),[t.HEAP32[r/4],t.HEAP32[r/4+1]]}finally{t.stackRestore(r)}})(n),g=[],h=[];for(let e=0;e<d;e++){const t=r._OrtGetInputName(n,e);0===t&&(0,s.checkLastError)(\\\"Can't get an input name.\\\"),l.push(t),g.push(r.UTF8ToString(t))}for(let e=0;e<p;e++){const t=r._OrtGetOutputName(n,e);0===t&&(0,s.checkLastError)(\\\"Can't get an output name.\\\"),f.push(t),h.push(r.UTF8ToString(t))}return u.set(n,[n,l,f]),[n,g,h]}catch(e){throw l.forEach((e=>r._OrtFree(e))),f.forEach((e=>r._OrtFree(e))),0!==n&&r._OrtReleaseSession(n),e}finally{r._free(e[0]),0!==o&&r._OrtReleaseSessionOptions(o),c.forEach((e=>r._free(e)))}},t.createSession=(e,r)=>{const n=(0,t.createSessionAllocate)(e);return(0,t.createSessionFinalize)(n,r)},t.releaseSession=e=>{const t=(0,i.getInstance)(),r=u.get(e);if(!r)throw new Error(`cannot release session. invalid session id: ${e}`);const[n,a,o]=r;a.forEach((e=>t._OrtFree(e))),o.forEach((e=>t._OrtFree(e))),t._OrtReleaseSession(n),u.delete(e)},t.run=async(e,t,r,a,c)=>{var l;const f=(0,i.getInstance)(),d=u.get(e);if(!d)throw new Error(`cannot run inference. invalid session id: ${e}`);const[p,g,h]=d,m=t.length,y=a.length;let v=0,b=[];const w=[],_=[];try{[v,b]=(0,n.setRunOptions)(c);for(let e=0;e<m;e++){const t=r[e][0],n=r[e][1],a=r[e][2];let i,u;if(Array.isArray(a)){u=4*a.length,i=f._malloc(u),_.push(i);let e=i/4;for(let t=0;t<a.length;t++){if(\\\"string\\\"!=typeof a[t])throw new TypeError(`tensor data at index ${t} is not a string`);f.HEAPU32[e++]=(0,s.allocWasmString)(a[t],_)}}else u=a.byteLength,i=f._malloc(u),_.push(i),f.HEAPU8.set(new Uint8Array(a.buffer,a.byteOffset,u),i);const c=f.stackSave(),l=f.stackAlloc(4*n.length);try{let r=l/4;n.forEach((e=>f.HEAP32[r++]=e));const a=f._OrtCreateTensor((0,o.tensorDataTypeStringToEnum)(t),i,u,l,n.length);0===a&&(0,s.checkLastError)(`Can't create tensor for input[${e}].`),w.push(a)}finally{f.stackRestore(c)}}const i=f.stackSave(),u=f.stackAlloc(4*m),d=f.stackAlloc(4*m),O=f.stackAlloc(4*y),A=f.stackAlloc(4*y);try{let r=u/4,n=d/4,i=O/4,c=A/4;for(let e=0;e<m;e++)f.HEAPU32[r++]=w[e],f.HEAPU32[n++]=g[t[e]];for(let e=0;e<y;e++)f.HEAPU32[i++]=0,f.HEAPU32[c++]=h[a[e]];null===(l=f.jsepOnRunStart)||void 0===l||l.call(f,e);let b=f._OrtRun(p,d,u,m,A,y,O,v);const _=f.jsepRunPromise;_&&(b=await _);const T=f.jsepOnRunEnd;T&&await T(e);const S=[];0!==b&&(0,s.checkLastError)(\\\"failed to call OrtRun().\\\");for(let e=0;e<y;e++){const t=f.HEAPU32[O/4+e],r=f.stackSave(),n=f.stackAlloc(16);let a,i=0;try{b=f._OrtGetTensorData(t,n,n+4,n+8,n+12),0!==b&&(0,s.checkLastError)(`Can't access output tensor data on index ${e}.`);let r=n/4;const u=f.HEAPU32[r++];i=f.HEAPU32[r++];const c=f.HEAPU32[r++],l=f.HEAPU32[r++],d=[];for(let e=0;e<l;e++)d.push(f.HEAPU32[c/4+e]);f._OrtFree(c);const p=0===d.length?1:d.reduce(((e,t)=>e*t));if(a=(0,o.tensorDataTypeEnumToString)(u),\\\"string\\\"===a){const e=[];let t=i/4;for(let r=0;r<p;r++){const n=f.HEAPU32[t++],a=r===p-1?void 0:f.HEAPU32[t]-n;e.push(f.UTF8ToString(n,a))}S.push([a,d,e])}else{const e=new((0,o.tensorTypeToTypedArrayConstructor)(a))(p);new Uint8Array(e.buffer,e.byteOffset,e.byteLength).set(f.HEAPU8.subarray(i,i+e.byteLength)),S.push([a,d,e])}}finally{f.stackRestore(r),\\\"string\\\"===a&&i&&f._free(i),f._OrtReleaseTensor(t)}}return S}finally{f.stackRestore(i)}}finally{w.forEach((e=>f._OrtReleaseTensor(e))),_.forEach((e=>f._free(e))),0!==v&&f._OrtReleaseRunOptions(v),b.forEach((e=>f._free(e)))}},t.endProfiling=e=>{const t=(0,i.getInstance)(),r=u.get(e);if(!r)throw new Error(\\\"invalid session id\\\");const n=r[0],a=t._OrtEndProfiling(n);0===a&&(0,s.checkLastError)(\\\"Can't get an profile file name.\\\"),t._OrtFree(a)},t.extractTransferableBuffers=e=>{const t=[];for(const r of e){const e=r[2];!Array.isArray(e)&&e.buffer&&t.push(e.buffer)}return t}},263:function(e,t,r){\\\"use strict\\\";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r);var a=Object.getOwnPropertyDescriptor(t,r);a&&!(\\\"get\\\"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,n,a)}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,\\\"default\\\",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)\\\"default\\\"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&n(t,e,r);return a(t,e),t};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.dispose=t.getInstance=t.initializeWebAssembly=void 0;const i=o(r(449)),s=r(932),u=r(474);let c,l=!1,f=!1,d=!1;t.initializeWebAssembly=async e=>{if(l)return Promise.resolve();if(f)throw new Error(\\\"multiple calls to 'initializeWebAssembly()' detected.\\\");if(d)throw new Error(\\\"previous call to 'initializeWebAssembly()' failed.\\\");f=!0;const t=e.initTimeout,n=e.numThreads,a=e.simd,o=n>1&&(()=>{try{return\\\"undefined\\\"!=typeof SharedArrayBuffer&&(\\\"undefined\\\"!=typeof MessageChannel&&(new MessageChannel).port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11])))}catch(e){return!1}})(),p=a&&(()=>{try{return WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,30,1,28,0,65,0,253,15,253,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,186,1,26,11]))}catch(e){return!1}})(),g=e.wasmPaths,h=\\\"string\\\"==typeof g?g:void 0,m=((e,t)=>t?e?\\\"ort-wasm-simd-threaded.wasm\\\":\\\"ort-wasm-threaded.wasm\\\":e?\\\"ort-wasm-simd.wasm\\\":\\\"ort-wasm.wasm\\\")(p,o),y=\\\"object\\\"==typeof g?g[m]:void 0;let v=!1;const b=[];if(t>0&&b.push(new Promise((e=>{setTimeout((()=>{v=!0,e()}),t)}))),b.push(new Promise(((e,t)=>{const n=o?u:s,a={locateFile:(e,t)=>o&&e.endsWith(\\\".worker.js\\\")&&\\\"undefined\\\"!=typeof Blob?URL.createObjectURL(new Blob([r(154)],{type:\\\"text/javascript\\\"})):e.endsWith(\\\".wasm\\\")?y||(null!=h?h:t)+m:t+e};if(o)if(\\\"undefined\\\"==typeof Blob)a.mainScriptUrlOrBlob=i.join(__dirname,\\\"ort-wasm-threaded.js\\\");else{const e=`var ortWasmThreaded=(function(){var _scriptDir;return ${n.toString()}})();`;a.mainScriptUrlOrBlob=new Blob([e],{type:\\\"text/javascript\\\"})}n(a).then((t=>{f=!1,l=!0,c=t,e()}),(e=>{f=!1,d=!0,t(e)}))}))),await Promise.race(b),v)throw new Error(`WebAssembly backend initializing failed due to timeout: ${t}ms`)},t.getInstance=()=>{if(l&&c)return c;throw new Error(\\\"WebAssembly is not initialized yet.\\\")},t.dispose=()=>{var e;!l||f||d||(f=!0,null===(e=c.PThread)||void 0===e||e.terminateAllThreads(),c=void 0,f=!1,l=!1,d=!0)}},497:(e,t,r)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.checkLastError=t.iterateExtraOptions=t.allocWasmString=void 0;const n=r(263);t.allocWasmString=(e,t)=>{const r=(0,n.getInstance)(),a=r.lengthBytesUTF8(e)+1,o=r._malloc(a);return r.stringToUTF8(e,o,a),t.push(o),o},t.iterateExtraOptions=(e,r,n,a)=>{if(\\\"object\\\"==typeof e&&null!==e){if(n.has(e))throw new Error(\\\"Circular reference in options\\\");n.add(e)}Object.entries(e).forEach((([e,o])=>{const i=r?r+e:e;if(\\\"object\\\"==typeof o)(0,t.iterateExtraOptions)(o,i+\\\".\\\",n,a);else if(\\\"string\\\"==typeof o||\\\"number\\\"==typeof o)a(i,o.toString());else{if(\\\"boolean\\\"!=typeof o)throw new Error(\\\"Can't handle extra config type: \\\"+typeof o);a(i,o?\\\"1\\\":\\\"0\\\")}}))},t.checkLastError=e=>{const t=(0,n.getInstance)(),r=t.stackSave();try{const r=t.stackAlloc(8);t._OrtGetLastError(r,r+4);const n=t.HEAP32[r/4],a=t.HEAPU32[r/4+1],o=a?t.UTF8ToString(a):\\\"\\\";throw new Error(`${e} ERROR_CODE: ${n}, ERROR_MESSAGE: ${o}`)}finally{t.stackRestore(r)}}},474:(e,t,r)=>{var _scriptDir,n=(_scriptDir=\\\"undefined\\\"!=typeof document&&document.currentScript?document.currentScript.src:void 0,\\\"undefined\\\"!=typeof __filename&&(_scriptDir=_scriptDir||__filename),function(e={}){function t(){return C.buffer!=D.buffer&&j(),D}function n(){return C.buffer!=D.buffer&&j(),U}function a(){return C.buffer!=D.buffer&&j(),W}function o(){return C.buffer!=D.buffer&&j(),x}function i(){return C.buffer!=D.buffer&&j(),L}var s,u,c=e;c.ready=new Promise(((e,t)=>{s=e,u=t}));var l,f,d,p=Object.assign({},c),g=\\\"./this.program\\\",h=(e,t)=>{throw t},m=\\\"object\\\"==typeof window,y=\\\"function\\\"==typeof importScripts,v=\\\"object\\\"==typeof process&&\\\"object\\\"==typeof process.versions&&\\\"string\\\"==typeof process.versions.node,b=c.ENVIRONMENT_IS_PTHREAD||!1,w=\\\"\\\";function _(e){return c.locateFile?c.locateFile(e,w):w+e}if(v){var O=r(384),A=r(908);let t;w=y?A.dirname(w)+\\\"/\\\":__dirname+\\\"/\\\",l=(e,t)=>(e=e.startsWith(\\\"file://\\\")?new URL(e):A.normalize(e),O.readFileSync(e,t?void 0:\\\"utf8\\\")),d=e=>((e=l(e,!0)).buffer||(e=new Uint8Array(e)),e),f=(e,t,r,n=!0)=>{e=e.startsWith(\\\"file://\\\")?new URL(e):A.normalize(e),O.readFile(e,n?void 0:\\\"utf8\\\",((e,a)=>{e?r(e):t(n?a.buffer:a)}))},!c.thisProgram&&1<process.argv.length&&(g=process.argv[1].replace(/\\\\\\\\/g,\\\"/\\\")),process.argv.slice(2),h=(e,t)=>{throw process.exitCode=e,t},c.inspect=()=>\\\"[Emscripten Module object]\\\";try{t=r(925)}catch(e){throw console.error('The \\\"worker_threads\\\" module is not supported in this node.js build - perhaps a newer version is needed?'),e}global.Worker=t.Worker}else(m||y)&&(y?w=self.location.href:\\\"undefined\\\"!=typeof document&&document.currentScript&&(w=document.currentScript.src),_scriptDir&&(w=_scriptDir),w=0!==w.indexOf(\\\"blob:\\\")?w.substr(0,w.replace(/[?#].*/,\\\"\\\").lastIndexOf(\\\"/\\\")+1):\\\"\\\",v||(l=e=>{var t=new XMLHttpRequest;return t.open(\\\"GET\\\",e,!1),t.send(null),t.responseText},y&&(d=e=>{var t=new XMLHttpRequest;return t.open(\\\"GET\\\",e,!1),t.responseType=\\\"arraybuffer\\\",t.send(null),new Uint8Array(t.response)}),f=(e,t,r)=>{var n=new XMLHttpRequest;n.open(\\\"GET\\\",e,!0),n.responseType=\\\"arraybuffer\\\",n.onload=()=>{200==n.status||0==n.status&&n.response?t(n.response):r()},n.onerror=r,n.send(null)}));v&&\\\"undefined\\\"==typeof performance&&(global.performance=r(953).performance);var T=console.log.bind(console),S=console.error.bind(console);v&&(T=(...e)=>O.writeSync(1,e.join(\\\" \\\")+\\\"\\\\n\\\"),S=(...e)=>O.writeSync(2,e.join(\\\" \\\")+\\\"\\\\n\\\"));var E,M=c.print||T,R=c.printErr||S;Object.assign(c,p),p=null,c.thisProgram&&(g=c.thisProgram),c.quit&&(h=c.quit),c.wasmBinary&&(E=c.wasmBinary);var P=c.noExitRuntime||!0;\\\"object\\\"!=typeof WebAssembly&&te(\\\"no native wasm support detected\\\");var C,F,k,I,D,U,W,x,L,H=!1;function j(){var e=C.buffer;c.HEAP8=D=new Int8Array(e),c.HEAP16=new Int16Array(e),c.HEAP32=W=new Int32Array(e),c.HEAPU8=U=new Uint8Array(e),c.HEAPU16=new Uint16Array(e),c.HEAPU32=x=new Uint32Array(e),c.HEAPF32=new Float32Array(e),c.HEAPF64=L=new Float64Array(e)}var Y=c.INITIAL_MEMORY||16777216;if(5242880<=Y||te(\\\"INITIAL_MEMORY should be larger than STACK_SIZE, was \\\"+Y+\\\"! (STACK_SIZE=5242880)\\\"),b)C=c.wasmMemory;else if(c.wasmMemory)C=c.wasmMemory;else if(!((C=new WebAssembly.Memory({initial:Y/65536,maximum:65536,shared:!0})).buffer instanceof SharedArrayBuffer))throw R(\\\"requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag\\\"),v&&R(\\\"(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and/or recent version)\\\"),Error(\\\"bad memory\\\");j(),Y=C.buffer.byteLength;var N,$=[],z=[],G=[],B=0;function V(){return P||0<B}var q,J,X=0,K=null,Q=null;function Z(){X++,c.monitorRunDependencies&&c.monitorRunDependencies(X)}function ee(){if(X--,c.monitorRunDependencies&&c.monitorRunDependencies(X),0==X&&(null!==K&&(clearInterval(K),K=null),Q)){var e=Q;Q=null,e()}}function te(e){throw c.onAbort&&c.onAbort(e),R(e=\\\"Aborted(\\\"+e+\\\")\\\"),H=!0,I=1,e=new WebAssembly.RuntimeError(e+\\\". Build with -sASSERTIONS for more info.\\\"),u(e),e}function re(e){return e.startsWith(\\\"data:application/octet-stream;base64,\\\")}function ne(e){if(e==q&&E)return new Uint8Array(E);if(d)return d(e);throw\\\"both async and sync fetching of the wasm failed\\\"}function ae(e,t,r){return function(e){if(!E&&(m||y)){if(\\\"function\\\"==typeof fetch&&!e.startsWith(\\\"file://\\\"))return fetch(e,{credentials:\\\"same-origin\\\"}).then((t=>{if(!t.ok)throw\\\"failed to load wasm binary file at '\\\"+e+\\\"'\\\";return t.arrayBuffer()})).catch((()=>ne(e)));if(f)return new Promise(((t,r)=>{f(e,(e=>t(new Uint8Array(e))),r)}))}return Promise.resolve().then((()=>ne(e)))}(e).then((e=>WebAssembly.instantiate(e,t))).then((e=>e)).then(r,(e=>{R(\\\"failed to asynchronously prepare wasm: \\\"+e),te(e)}))}function oe(e){this.name=\\\"ExitStatus\\\",this.message=`Program terminated with exit(${e})`,this.status=e}function ie(e){e.terminate(),e.onmessage=()=>{}}function se(e){(e=ge.Fa[e])||te(),ge.fb(e)}function ue(e){var t=ge.Za();if(!t)return 6;ge.Ia.push(t),ge.Fa[e.Ha]=t,t.Ha=e.Ha;var r={cmd:\\\"run\\\",start_routine:e.gb,arg:e.Ya,pthread_ptr:e.Ha};return v&&t.unref(),t.postMessage(r,e.mb),0}re(q=\\\"ort-wasm-threaded.wasm\\\")||(q=_(q));var ce=\\\"undefined\\\"!=typeof TextDecoder?new TextDecoder(\\\"utf8\\\"):void 0,le=(e,t,r)=>{var n=(t>>>=0)+r;for(r=t;e[r]&&!(r>=n);)++r;if(16<r-t&&e.buffer&&ce)return ce.decode(e.buffer instanceof SharedArrayBuffer?e.slice(t,r):e.subarray(t,r));for(n=\\\"\\\";t<r;){var a=e[t++];if(128&a){var o=63&e[t++];if(192==(224&a))n+=String.fromCharCode((31&a)<<6|o);else{var i=63&e[t++];65536>(a=224==(240&a)?(15&a)<<12|o<<6|i:(7&a)<<18|o<<12|i<<6|63&e[t++])?n+=String.fromCharCode(a):(a-=65536,n+=String.fromCharCode(55296|a>>10,56320|1023&a))}}else n+=String.fromCharCode(a)}return n},fe=(e,t)=>(e>>>=0)?le(n(),e,t):\\\"\\\";function de(e){if(b)return Ve(1,1,e);I=e,V()||(ge.hb(),c.onExit&&c.onExit(e),H=!0),h(e,new oe(e))}var pe=e=>{if(I=e,b)throw me(e),\\\"unwind\\\";de(e)},ge={La:[],Ia:[],Ta:[],Fa:{},Pa:function(){b?ge.ab():ge.$a()},$a:function(){$.unshift((()=>{Z(),ge.bb((()=>ee()))}))},ab:function(){ge.receiveObjectTransfer=ge.eb,ge.threadInitTLS=ge.Sa,ge.setExitStatus=ge.Ra,P=!1},Ra:function(e){I=e},rb:[\\\"$terminateWorker\\\"],hb:function(){for(var e of ge.Ia)ie(e);for(e of ge.La)ie(e);ge.La=[],ge.Ia=[],ge.Fa=[]},fb:function(e){var t=e.Ha;delete ge.Fa[t],ge.La.push(e),ge.Ia.splice(ge.Ia.indexOf(e),1),e.Ha=0,mt(t)},eb:function(){},Sa:function(){ge.Ta.forEach((e=>e()))},cb:e=>new Promise((t=>{e.onmessage=r=>{var n=(r=r.data).cmd;if(r.targetThread&&r.targetThread!=ft()){var a=ge.Fa[r.qb];a?a.postMessage(r,r.transferList):R('Internal error! Worker sent a message \\\"'+n+'\\\" to target pthread '+r.targetThread+\\\", but that thread no longer exists!\\\")}else\\\"checkMailbox\\\"===n?He():\\\"spawnThread\\\"===n?ue(r):\\\"cleanupThread\\\"===n?se(r.thread):\\\"killThread\\\"===n?(r=r.thread,n=ge.Fa[r],delete ge.Fa[r],ie(n),mt(r),ge.Ia.splice(ge.Ia.indexOf(n),1),n.Ha=0):\\\"cancelThread\\\"===n?ge.Fa[r.thread].postMessage({cmd:\\\"cancel\\\"}):\\\"loaded\\\"===n?(e.loaded=!0,t(e)):\\\"alert\\\"===n?alert(\\\"Thread \\\"+r.threadId+\\\": \\\"+r.text):\\\"setimmediate\\\"===r.target?e.postMessage(r):\\\"callHandler\\\"===n?c[r.handler](...r.args):n&&R(\\\"worker sent an unknown command \\\"+n)},e.onerror=e=>{throw R(\\\"worker sent an error! \\\"+e.filename+\\\":\\\"+e.lineno+\\\": \\\"+e.message),e},v&&(e.on(\\\"message\\\",(function(t){e.onmessage({data:t})})),e.on(\\\"error\\\",(function(t){e.onerror(t)})));var r,n=[];for(r of[\\\"onExit\\\",\\\"onAbort\\\",\\\"print\\\",\\\"printErr\\\"])c.hasOwnProperty(r)&&n.push(r);e.postMessage({cmd:\\\"load\\\",handlers:n,urlOrBlob:c.mainScriptUrlOrBlob||_scriptDir,wasmMemory:C,wasmModule:k})})),bb:function(e){e()},Xa:function(){var e=_(\\\"ort-wasm-threaded.worker.js\\\");e=new Worker(e),ge.La.push(e)},Za:function(){return 0==ge.La.length&&(ge.Xa(),ge.cb(ge.La[0])),ge.La.pop()}};c.PThread=ge;var he=e=>{for(;0<e.length;)e.shift()(c)};function me(e){if(b)return Ve(2,0,e);pe(e)}c.establishStackSpace=function(){var e=ft(),t=a()[e+52>>2>>>0];e=a()[e+56>>2>>>0],wt(t,t-e),Ot(t)};var ye=[];function ve(e){this.Oa=e-24,this.Wa=function(e){o()[this.Oa+4>>2>>>0]=e},this.Va=function(e){o()[this.Oa+8>>2>>>0]=e},this.Pa=function(e,t){this.Ua(),this.Wa(e),this.Va(t)},this.Ua=function(){o()[this.Oa+16>>2>>>0]=0}}function be(e,t,r,n){return b?Ve(3,1,e,t,r,n):we(e,t,r,n)}function we(e,t,r,n){if(e>>>=0,t>>>=0,r>>>=0,n>>>=0,\\\"undefined\\\"==typeof SharedArrayBuffer)return R(\\\"Current environment does not support SharedArrayBuffer, pthreads are not available!\\\"),6;var a=[];return b&&0===a.length?be(e,t,r,n):(e={gb:r,Ha:e,Ya:n,mb:a},b?(e.ob=\\\"spawnThread\\\",postMessage(e,a),0):ue(e))}function _e(e,t,r){return b?Ve(4,1,e,t,r):0}function Oe(e,t){if(b)return Ve(5,1,e,t)}c.invokeEntryPoint=function(e,t){var r=ye[e];r||(e>=ye.length&&(ye.length=e+1),ye[e]=r=N.get(e)),e=r(t),V()?ge.Ra(e):yt(e)};var Ae=e=>{for(var t=0,r=0;r<e.length;++r){var n=e.charCodeAt(r);127>=n?t++:2047>=n?t+=2:55296<=n&&57343>=n?(t+=4,++r):t+=3}return t},Te=(e,t,r,n)=>{if(!(0<n))return 0;var a=r>>>=0;n=r+n-1;for(var o=0;o<e.length;++o){var i=e.charCodeAt(o);if(55296<=i&&57343>=i&&(i=65536+((1023&i)<<10)|1023&e.charCodeAt(++o)),127>=i){if(r>=n)break;t[r++>>>0]=i}else{if(2047>=i){if(r+1>=n)break;t[r++>>>0]=192|i>>6}else{if(65535>=i){if(r+2>=n)break;t[r++>>>0]=224|i>>12}else{if(r+3>=n)break;t[r++>>>0]=240|i>>18,t[r++>>>0]=128|i>>12&63}t[r++>>>0]=128|i>>6&63}t[r++>>>0]=128|63&i}}return t[r>>>0]=0,r-a},Se=(e,t,r)=>Te(e,n(),t,r);function Ee(e,t){if(b)return Ve(6,1,e,t)}function Me(e,t,r){if(b)return Ve(7,1,e,t,r)}function Re(e,t,r){return b?Ve(8,1,e,t,r):0}function Pe(e,t){if(b)return Ve(9,1,e,t)}function Ce(e,t,r){if(b)return Ve(10,1,e,t,r)}function Fe(e,t,r,n){if(b)return Ve(11,1,e,t,r,n)}function ke(e,t,r,n){if(b)return Ve(12,1,e,t,r,n)}function Ie(e,t,r,n){if(b)return Ve(13,1,e,t,r,n)}function De(e){if(b)return Ve(14,1,e)}function Ue(e,t){if(b)return Ve(15,1,e,t)}function We(e,t,r){if(b)return Ve(16,1,e,t,r)}var xe=e=>{if(!H)try{if(e(),!V())try{b?yt(I):pe(I)}catch(e){e instanceof oe||\\\"unwind\\\"==e||h(1,e)}}catch(e){e instanceof oe||\\\"unwind\\\"==e||h(1,e)}};function Le(e){e>>>=0,\\\"function\\\"==typeof Atomics.nb&&(Atomics.nb(a(),e>>2,e).value.then(He),e+=128,Atomics.store(a(),e>>2,1))}function He(){var e=ft();e&&(Le(e),xe((()=>vt())))}c.__emscripten_thread_mailbox_await=Le,c.checkMailbox=He;var je=e=>0==e%4&&(0!=e%100||0==e%400),Ye=[0,31,60,91,121,152,182,213,244,274,305,335],Ne=[0,31,59,90,120,151,181,212,243,273,304,334];function $e(e,t,r,n,a,o,i,s){return b?Ve(17,1,e,t,r,n,a,o,i,s):-52}function ze(e,t,r,n,a,o,i){if(b)return Ve(18,1,e,t,r,n,a,o,i)}var Ge=e=>{var t=Ae(e)+1,r=dt(t);return r&&Se(e,r,t),r},Be=e=>{var t=_t();return e=e(),Ot(t),e};function Ve(e,t){var r=arguments.length-2,n=arguments;return Be((()=>{for(var a=At(8*r),o=a>>3,s=0;s<r;s++){var u=n[2+s];i()[o+s>>>0]=u}return ht(e,r,a,t)}))}var qe,Je=[],Xe={},Ke=()=>{if(!qe){var e,t={USER:\\\"web_user\\\",LOGNAME:\\\"web_user\\\",PATH:\\\"/\\\",PWD:\\\"/\\\",HOME:\\\"/home/web_user\\\",LANG:(\\\"object\\\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\\\"C\\\").replace(\\\"-\\\",\\\"_\\\")+\\\".UTF-8\\\",_:g||\\\"./this.program\\\"};for(e in Xe)void 0===Xe[e]?delete t[e]:t[e]=Xe[e];var r=[];for(e in t)r.push(`${e}=${t[e]}`);qe=r}return qe};function Qe(e,r){if(b)return Ve(19,1,e,r);e>>>=0,r>>>=0;var n=0;return Ke().forEach((function(a,i){var s=r+n;for(i=o()[e+4*i>>2>>>0]=s,s=0;s<a.length;++s)t()[i++>>0>>>0]=a.charCodeAt(s);t()[i>>0>>>0]=0,n+=a.length+1})),0}function Ze(e,t){if(b)return Ve(20,1,e,t);e>>>=0,t>>>=0;var r=Ke();o()[e>>2>>>0]=r.length;var n=0;return r.forEach((function(e){n+=e.length+1})),o()[t>>2>>>0]=n,0}function et(e){return b?Ve(21,1,e):52}function tt(e,t,r,n){return b?Ve(22,1,e,t,r,n):52}function rt(e,t,r,n,a){return b?Ve(23,1,e,t,r,n,a):70}var nt=[null,[],[]];function at(e,t,r,a){if(b)return Ve(24,1,e,t,r,a);t>>>=0,r>>>=0,a>>>=0;for(var i=0,s=0;s<r;s++){var u=o()[t>>2>>>0],c=o()[t+4>>2>>>0];t+=8;for(var l=0;l<c;l++){var f=n()[u+l>>>0],d=nt[e];0===f||10===f?((1===e?M:R)(le(d,0)),d.length=0):d.push(f)}i+=c}return o()[a>>2>>>0]=i,0}var ot=[31,29,31,30,31,30,31,31,30,31,30,31],it=[31,28,31,30,31,30,31,31,30,31,30,31],st=(e,r)=>{t().set(e,r>>>0)};function ut(e,t,r,n){function o(e,t,r){for(e=\\\"number\\\"==typeof e?e.toString():e||\\\"\\\";e.length<t;)e=r[0]+e;return e}function i(e,t){return o(e,t,\\\"0\\\")}function s(e,t){function r(e){return 0>e?-1:0<e?1:0}var n;return 0===(n=r(e.getFullYear()-t.getFullYear()))&&0===(n=r(e.getMonth()-t.getMonth()))&&(n=r(e.getDate()-t.getDate())),n}function u(e){switch(e.getDay()){case 0:return new Date(e.getFullYear()-1,11,29);case 1:return e;case 2:return new Date(e.getFullYear(),0,3);case 3:return new Date(e.getFullYear(),0,2);case 4:return new Date(e.getFullYear(),0,1);case 5:return new Date(e.getFullYear()-1,11,31);case 6:return new Date(e.getFullYear()-1,11,30)}}function c(e){var t=e.Ja;for(e=new Date(new Date(e.Ka+1900,0,1).getTime());0<t;){var r=e.getMonth(),n=(je(e.getFullYear())?ot:it)[r];if(!(t>n-e.getDate())){e.setDate(e.getDate()+t);break}t-=n-e.getDate()+1,e.setDate(1),11>r?e.setMonth(r+1):(e.setMonth(0),e.setFullYear(e.getFullYear()+1))}return r=new Date(e.getFullYear()+1,0,4),t=u(new Date(e.getFullYear(),0,4)),r=u(r),0>=s(t,e)?0>=s(r,e)?e.getFullYear()+1:e.getFullYear():e.getFullYear()-1}e>>>=0,t>>>=0,r>>>=0,n>>>=0;var l=a()[n+40>>2>>>0];for(var f in n={kb:a()[n>>2>>>0],jb:a()[n+4>>2>>>0],Ma:a()[n+8>>2>>>0],Qa:a()[n+12>>2>>>0],Na:a()[n+16>>2>>>0],Ka:a()[n+20>>2>>>0],Ga:a()[n+24>>2>>>0],Ja:a()[n+28>>2>>>0],sb:a()[n+32>>2>>>0],ib:a()[n+36>>2>>>0],lb:l?fe(l):\\\"\\\"},r=fe(r),l={\\\"%c\\\":\\\"%a %b %d %H:%M:%S %Y\\\",\\\"%D\\\":\\\"%m/%d/%y\\\",\\\"%F\\\":\\\"%Y-%m-%d\\\",\\\"%h\\\":\\\"%b\\\",\\\"%r\\\":\\\"%I:%M:%S %p\\\",\\\"%R\\\":\\\"%H:%M\\\",\\\"%T\\\":\\\"%H:%M:%S\\\",\\\"%x\\\":\\\"%m/%d/%y\\\",\\\"%X\\\":\\\"%H:%M:%S\\\",\\\"%Ec\\\":\\\"%c\\\",\\\"%EC\\\":\\\"%C\\\",\\\"%Ex\\\":\\\"%m/%d/%y\\\",\\\"%EX\\\":\\\"%H:%M:%S\\\",\\\"%Ey\\\":\\\"%y\\\",\\\"%EY\\\":\\\"%Y\\\",\\\"%Od\\\":\\\"%d\\\",\\\"%Oe\\\":\\\"%e\\\",\\\"%OH\\\":\\\"%H\\\",\\\"%OI\\\":\\\"%I\\\",\\\"%Om\\\":\\\"%m\\\",\\\"%OM\\\":\\\"%M\\\",\\\"%OS\\\":\\\"%S\\\",\\\"%Ou\\\":\\\"%u\\\",\\\"%OU\\\":\\\"%U\\\",\\\"%OV\\\":\\\"%V\\\",\\\"%Ow\\\":\\\"%w\\\",\\\"%OW\\\":\\\"%W\\\",\\\"%Oy\\\":\\\"%y\\\"})r=r.replace(new RegExp(f,\\\"g\\\"),l[f]);var d=\\\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\\\".split(\\\" \\\"),p=\\\"January February March April May June July August September October November December\\\".split(\\\" \\\");for(f in l={\\\"%a\\\":e=>d[e.Ga].substring(0,3),\\\"%A\\\":e=>d[e.Ga],\\\"%b\\\":e=>p[e.Na].substring(0,3),\\\"%B\\\":e=>p[e.Na],\\\"%C\\\":e=>i((e.Ka+1900)/100|0,2),\\\"%d\\\":e=>i(e.Qa,2),\\\"%e\\\":e=>o(e.Qa,2,\\\" \\\"),\\\"%g\\\":e=>c(e).toString().substring(2),\\\"%G\\\":e=>c(e),\\\"%H\\\":e=>i(e.Ma,2),\\\"%I\\\":e=>(0==(e=e.Ma)?e=12:12<e&&(e-=12),i(e,2)),\\\"%j\\\":e=>{for(var t=0,r=0;r<=e.Na-1;t+=(je(e.Ka+1900)?ot:it)[r++]);return i(e.Qa+t,3)},\\\"%m\\\":e=>i(e.Na+1,2),\\\"%M\\\":e=>i(e.jb,2),\\\"%n\\\":()=>\\\"\\\\n\\\",\\\"%p\\\":e=>0<=e.Ma&&12>e.Ma?\\\"AM\\\":\\\"PM\\\",\\\"%S\\\":e=>i(e.kb,2),\\\"%t\\\":()=>\\\"\\\\t\\\",\\\"%u\\\":e=>e.Ga||7,\\\"%U\\\":e=>i(Math.floor((e.Ja+7-e.Ga)/7),2),\\\"%V\\\":e=>{var t=Math.floor((e.Ja+7-(e.Ga+6)%7)/7);if(2>=(e.Ga+371-e.Ja-2)%7&&t++,t)53==t&&(4==(r=(e.Ga+371-e.Ja)%7)||3==r&&je(e.Ka)||(t=1));else{t=52;var r=(e.Ga+7-e.Ja-1)%7;(4==r||5==r&&je(e.Ka%400-1))&&t++}return i(t,2)},\\\"%w\\\":e=>e.Ga,\\\"%W\\\":e=>i(Math.floor((e.Ja+7-(e.Ga+6)%7)/7),2),\\\"%y\\\":e=>(e.Ka+1900).toString().substring(2),\\\"%Y\\\":e=>e.Ka+1900,\\\"%z\\\":e=>{var t=0<=(e=e.ib);return e=Math.abs(e)/60,(t?\\\"+\\\":\\\"-\\\")+String(\\\"0000\\\"+(e/60*100+e%60)).slice(-4)},\\\"%Z\\\":e=>e.lb,\\\"%%\\\":()=>\\\"%\\\"},r=r.replace(/%%/g,\\\"\\\\0\\\\0\\\"),l)r.includes(f)&&(r=r.replace(new RegExp(f,\\\"g\\\"),l[f](n)));return f=function(e){var t=Array(Ae(e)+1);return Te(e,t,0,t.length),t}(r=r.replace(/\\\\0\\\\0/g,\\\"%\\\")),f.length>t?0:(st(f,e),f.length-1)}ge.Pa();var ct=[null,de,me,be,_e,Oe,Ee,Me,Re,Pe,Ce,Fe,ke,Ie,De,Ue,We,$e,ze,Qe,Ze,et,tt,rt,at],lt={b:function(e,t,r){throw new ve(e>>>=0).Pa(t>>>0,r>>>0),e},N:function(e){pt(e>>>0,!y,1,!m,131072,!1),ge.Sa()},j:function(e){e>>>=0,b?postMessage({cmd:\\\"cleanupThread\\\",thread:e}):se(e)},I:we,h:_e,T:Oe,D:Ee,F:Me,U:Re,R:Pe,J:Ce,Q:Fe,n:ke,E:Ie,B:De,S:Ue,C:We,q:()=>!0,z:function(e,t){(e>>>=0)==t>>>0?setTimeout((()=>He())):b?postMessage({targetThread:e,cmd:\\\"checkMailbox\\\"}):(e=ge.Fa[e])&&e.postMessage({cmd:\\\"checkMailbox\\\"})},L:function(){return-1},M:Le,p:function(e){v&&ge.Fa[e>>>0].ref()},t:function(e,t,r){e=t+2097152>>>0<4194305-!!e?(e>>>0)+4294967296*t:NaN,r>>>=0,e=new Date(1e3*e),a()[r>>2>>>0]=e.getUTCSeconds(),a()[r+4>>2>>>0]=e.getUTCMinutes(),a()[r+8>>2>>>0]=e.getUTCHours(),a()[r+12>>2>>>0]=e.getUTCDate(),a()[r+16>>2>>>0]=e.getUTCMonth(),a()[r+20>>2>>>0]=e.getUTCFullYear()-1900,a()[r+24>>2>>>0]=e.getUTCDay(),e=(e.getTime()-Date.UTC(e.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,a()[r+28>>2>>>0]=e},u:function(e,t,r){e=t+2097152>>>0<4194305-!!e?(e>>>0)+4294967296*t:NaN,r>>>=0,e=new Date(1e3*e),a()[r>>2>>>0]=e.getSeconds(),a()[r+4>>2>>>0]=e.getMinutes(),a()[r+8>>2>>>0]=e.getHours(),a()[r+12>>2>>>0]=e.getDate(),a()[r+16>>2>>>0]=e.getMonth(),a()[r+20>>2>>>0]=e.getFullYear()-1900,a()[r+24>>2>>>0]=e.getDay(),t=(je(e.getFullYear())?Ye:Ne)[e.getMonth()]+e.getDate()-1|0,a()[r+28>>2>>>0]=t,a()[r+36>>2>>>0]=-60*e.getTimezoneOffset(),t=new Date(e.getFullYear(),6,1).getTimezoneOffset();var n=new Date(e.getFullYear(),0,1).getTimezoneOffset();e=0|(t!=n&&e.getTimezoneOffset()==Math.min(n,t)),a()[r+32>>2>>>0]=e},v:function(e){e>>>=0;var t=new Date(a()[e+20>>2>>>0]+1900,a()[e+16>>2>>>0],a()[e+12>>2>>>0],a()[e+8>>2>>>0],a()[e+4>>2>>>0],a()[e>>2>>>0],0),r=a()[e+32>>2>>>0],n=t.getTimezoneOffset(),o=new Date(t.getFullYear(),6,1).getTimezoneOffset(),i=new Date(t.getFullYear(),0,1).getTimezoneOffset(),s=Math.min(i,o);return 0>r?a()[e+32>>2>>>0]=Number(o!=i&&s==n):0<r!=(s==n)&&(o=Math.max(i,o),t.setTime(t.getTime()+6e4*((0<r?s:o)-n))),a()[e+24>>2>>>0]=t.getDay(),r=(je(t.getFullYear())?Ye:Ne)[t.getMonth()]+t.getDate()-1|0,a()[e+28>>2>>>0]=r,a()[e>>2>>>0]=t.getSeconds(),a()[e+4>>2>>>0]=t.getMinutes(),a()[e+8>>2>>>0]=t.getHours(),a()[e+12>>2>>>0]=t.getDate(),a()[e+16>>2>>>0]=t.getMonth(),a()[e+20>>2>>>0]=t.getYear(),e=t.getTime()/1e3,bt((J=e,1<=+Math.abs(J)?0<J?+Math.floor(J/4294967296)>>>0:~~+Math.ceil((J-+(~~J>>>0))/4294967296)>>>0:0)),e>>>0},r:$e,s:ze,y:function(e,t,r){function n(e){return(e=e.toTimeString().match(/\\\\(([A-Za-z ]+)\\\\)$/))?e[1]:\\\"GMT\\\"}e>>>=0,t>>>=0,r>>>=0;var i=(new Date).getFullYear(),s=new Date(i,0,1),u=new Date(i,6,1);i=s.getTimezoneOffset();var c=u.getTimezoneOffset(),l=Math.max(i,c);o()[e>>2>>>0]=60*l,a()[t>>2>>>0]=Number(i!=c),e=n(s),t=n(u),e=Ge(e),t=Ge(t),c<i?(o()[r>>2>>>0]=e,o()[r+4>>2>>>0]=t):(o()[r>>2>>>0]=t,o()[r+4>>2>>>0]=e)},c:()=>{te(\\\"\\\")},k:function(){},i:function(){return Date.now()},o:()=>{throw B+=1,\\\"unwind\\\"},A:function(){return 4294901760},e:()=>performance.timeOrigin+performance.now(),f:function(){return v?r(993).cpus().length:navigator.hardwareConcurrency},K:function(e,t,r,n){for(ge.pb=t>>>0,Je.length=r,t=n>>>0>>3,n=0;n<r;n++)Je[n]=i()[t+n>>>0];return ct[e].apply(null,Je)},x:function(e){e>>>=0;var t=n().length;if(e<=t||4294901760<e)return!1;for(var r=1;4>=r;r*=2){var a=t*(1+.2/r);a=Math.min(a,e+100663296);var o=Math;a=Math.max(e,a);e:{o=o.min.call(o,4294901760,a+(65536-a%65536)%65536)-C.buffer.byteLength+65535>>>16;try{C.grow(o),j();var i=1;break e}catch(e){}i=void 0}if(i)return!0}return!1},O:Qe,P:Ze,H:pe,g:et,m:tt,w:rt,l:at,a:C||c.wasmMemory,G:ut,d:function(e,t,r,n){return ut(e>>>0,t>>>0,r>>>0,n>>>0)}};!function(){function e(e,t){return e=e.exports,F=e=function(e){var t=e=>()=>e()>>>0,r=e=>t=>e(t)>>>0;return(e=Object.assign({},e)).__errno_location=t(e.__errno_location),e.pthread_self=t(e.pthread_self),e.malloc=r(e.malloc),e.stackSave=t(e.stackSave),e.stackAlloc=r(e.stackAlloc),e}(e),ge.Ta.push(F.sa),N=F.ta,z.unshift(F.V),k=t,ee(),e}var t={a:lt};if(Z(),c.instantiateWasm)try{return c.instantiateWasm(t,e)}catch(e){R(\\\"Module.instantiateWasm callback failed with error: \\\"+e),u(e)}(function(e,t){var r=q;return E||\\\"function\\\"!=typeof WebAssembly.instantiateStreaming||re(r)||r.startsWith(\\\"file://\\\")||v||\\\"function\\\"!=typeof fetch?ae(r,e,t):fetch(r,{credentials:\\\"same-origin\\\"}).then((n=>WebAssembly.instantiateStreaming(n,e).then(t,(function(n){return R(\\\"wasm streaming compile failed: \\\"+n),R(\\\"falling back to ArrayBuffer instantiation\\\"),ae(r,e,t)}))))})(t,(function(t){e(t.instance,t.module)})).catch(u)}(),c._OrtInit=(e,t)=>(c._OrtInit=F.W)(e,t),c._OrtGetLastError=(e,t)=>(c._OrtGetLastError=F.X)(e,t),c._OrtCreateSessionOptions=(e,t,r,n,a,o,i,s,u,l)=>(c._OrtCreateSessionOptions=F.Y)(e,t,r,n,a,o,i,s,u,l),c._OrtAppendExecutionProvider=(e,t)=>(c._OrtAppendExecutionProvider=F.Z)(e,t),c._OrtAddFreeDimensionOverride=(e,t,r)=>(c._OrtAddFreeDimensionOverride=F._)(e,t,r),c._OrtAddSessionConfigEntry=(e,t,r)=>(c._OrtAddSessionConfigEntry=F.$)(e,t,r),c._OrtReleaseSessionOptions=e=>(c._OrtReleaseSessionOptions=F.aa)(e),c._OrtCreateSession=(e,t,r)=>(c._OrtCreateSession=F.ba)(e,t,r),c._OrtReleaseSession=e=>(c._OrtReleaseSession=F.ca)(e),c._OrtGetInputOutputCount=(e,t,r)=>(c._OrtGetInputOutputCount=F.da)(e,t,r),c._OrtGetInputName=(e,t)=>(c._OrtGetInputName=F.ea)(e,t),c._OrtGetOutputName=(e,t)=>(c._OrtGetOutputName=F.fa)(e,t),c._OrtFree=e=>(c._OrtFree=F.ga)(e),c._OrtCreateTensor=(e,t,r,n,a)=>(c._OrtCreateTensor=F.ha)(e,t,r,n,a),c._OrtGetTensorData=(e,t,r,n,a)=>(c._OrtGetTensorData=F.ia)(e,t,r,n,a),c._OrtReleaseTensor=e=>(c._OrtReleaseTensor=F.ja)(e),c._OrtCreateRunOptions=(e,t,r,n)=>(c._OrtCreateRunOptions=F.ka)(e,t,r,n),c._OrtAddRunConfigEntry=(e,t,r)=>(c._OrtAddRunConfigEntry=F.la)(e,t,r),c._OrtReleaseRunOptions=e=>(c._OrtReleaseRunOptions=F.ma)(e),c._OrtRun=(e,t,r,n,a,o,i,s)=>(c._OrtRun=F.na)(e,t,r,n,a,o,i,s),c._OrtEndProfiling=e=>(c._OrtEndProfiling=F.oa)(e);var ft=c._pthread_self=()=>(ft=c._pthread_self=F.pa)(),dt=c._malloc=e=>(dt=c._malloc=F.qa)(e);c._free=e=>(c._free=F.ra)(e),c.__emscripten_tls_init=()=>(c.__emscripten_tls_init=F.sa)();var pt=c.__emscripten_thread_init=(e,t,r,n,a,o)=>(pt=c.__emscripten_thread_init=F.ua)(e,t,r,n,a,o);c.__emscripten_thread_crashed=()=>(c.__emscripten_thread_crashed=F.va)();var gt,ht=(e,t,r,n)=>(ht=F.wa)(e,t,r,n),mt=e=>(mt=F.xa)(e),yt=c.__emscripten_thread_exit=e=>(yt=c.__emscripten_thread_exit=F.ya)(e),vt=c.__emscripten_check_mailbox=()=>(vt=c.__emscripten_check_mailbox=F.za)(),bt=e=>(bt=F.Aa)(e),wt=(e,t)=>(wt=F.Ba)(e,t),_t=()=>(_t=F.Ca)(),Ot=e=>(Ot=F.Da)(e),At=e=>(At=F.Ea)(e);function Tt(){function e(){if(!gt&&(gt=!0,c.calledRun=!0,!H)&&(b||he(z),s(c),c.onRuntimeInitialized&&c.onRuntimeInitialized(),!b)){if(c.postRun)for(\\\"function\\\"==typeof c.postRun&&(c.postRun=[c.postRun]);c.postRun.length;){var e=c.postRun.shift();G.unshift(e)}he(G)}}if(!(0<X))if(b)s(c),b||he(z),startWorker(c);else{if(c.preRun)for(\\\"function\\\"==typeof c.preRun&&(c.preRun=[c.preRun]);c.preRun.length;)$.unshift(c.preRun.shift());he($),0<X||(c.setStatus?(c.setStatus(\\\"Running...\\\"),setTimeout((function(){setTimeout((function(){c.setStatus(\\\"\\\")}),1),e()}),1)):e())}}if(c.keepRuntimeAlive=V,c.wasmMemory=C,c.stackAlloc=At,c.stackSave=_t,c.stackRestore=Ot,c.UTF8ToString=fe,c.stringToUTF8=Se,c.lengthBytesUTF8=Ae,c.ExitStatus=oe,c.PThread=ge,Q=function e(){gt||Tt(),gt||(Q=e)},c.preInit)for(\\\"function\\\"==typeof c.preInit&&(c.preInit=[c.preInit]);0<c.preInit.length;)c.preInit.pop()();return Tt(),e.ready});e.exports=n},932:(e,t,r)=>{var _scriptDir,n=(_scriptDir=\\\"undefined\\\"!=typeof document&&document.currentScript?document.currentScript.src:void 0,\\\"undefined\\\"!=typeof __filename&&(_scriptDir=_scriptDir||__filename),function(e={}){var t,n,a=e;a.ready=new Promise(((e,r)=>{t=e,n=r}));var o,i,s,u=Object.assign({},a),c=\\\"./this.program\\\",l=\\\"object\\\"==typeof window,f=\\\"function\\\"==typeof importScripts,d=\\\"object\\\"==typeof process&&\\\"object\\\"==typeof process.versions&&\\\"string\\\"==typeof process.versions.node,p=\\\"\\\";if(d){var g=r(384),h=r(908);p=f?h.dirname(p)+\\\"/\\\":__dirname+\\\"/\\\",o=(e,t)=>(e=e.startsWith(\\\"file://\\\")?new URL(e):h.normalize(e),g.readFileSync(e,t?void 0:\\\"utf8\\\")),s=e=>((e=o(e,!0)).buffer||(e=new Uint8Array(e)),e),i=(e,t,r,n=!0)=>{e=e.startsWith(\\\"file://\\\")?new URL(e):h.normalize(e),g.readFile(e,n?void 0:\\\"utf8\\\",((e,a)=>{e?r(e):t(n?a.buffer:a)}))},!a.thisProgram&&1<process.argv.length&&(c=process.argv[1].replace(/\\\\\\\\/g,\\\"/\\\")),process.argv.slice(2),a.inspect=()=>\\\"[Emscripten Module object]\\\"}else(l||f)&&(f?p=self.location.href:\\\"undefined\\\"!=typeof document&&document.currentScript&&(p=document.currentScript.src),_scriptDir&&(p=_scriptDir),p=0!==p.indexOf(\\\"blob:\\\")?p.substr(0,p.replace(/[?#].*/,\\\"\\\").lastIndexOf(\\\"/\\\")+1):\\\"\\\",o=e=>{var t=new XMLHttpRequest;return t.open(\\\"GET\\\",e,!1),t.send(null),t.responseText},f&&(s=e=>{var t=new XMLHttpRequest;return t.open(\\\"GET\\\",e,!1),t.responseType=\\\"arraybuffer\\\",t.send(null),new Uint8Array(t.response)}),i=(e,t,r)=>{var n=new XMLHttpRequest;n.open(\\\"GET\\\",e,!0),n.responseType=\\\"arraybuffer\\\",n.onload=()=>{200==n.status||0==n.status&&n.response?t(n.response):r()},n.onerror=r,n.send(null)});var m,y=a.print||console.log.bind(console),v=a.printErr||console.error.bind(console);Object.assign(a,u),u=null,a.thisProgram&&(c=a.thisProgram),a.wasmBinary&&(m=a.wasmBinary),a.noExitRuntime,\\\"object\\\"!=typeof WebAssembly&&Y(\\\"no native wasm support detected\\\");var b,w,_,O,A,T,S,E,M,R,P,C,F=!1;function k(){var e=b.buffer;a.HEAP8=_=new Int8Array(e),a.HEAP16=A=new Int16Array(e),a.HEAP32=S=new Int32Array(e),a.HEAPU8=O=new Uint8Array(e),a.HEAPU16=T=new Uint16Array(e),a.HEAPU32=E=new Uint32Array(e),a.HEAPF32=M=new Float32Array(e),a.HEAPF64=C=new Float64Array(e),a.HEAP64=R=new BigInt64Array(e),a.HEAPU64=P=new BigUint64Array(e)}var I=[],D=[],U=[];function W(){var e=a.preRun.shift();I.unshift(e)}var x,L=0,H=null,j=null;function Y(e){throw a.onAbort&&a.onAbort(e),v(e=\\\"Aborted(\\\"+e+\\\")\\\"),F=!0,e=new WebAssembly.RuntimeError(e+\\\". Build with -sASSERTIONS for more info.\\\"),n(e),e}function N(e){return e.startsWith(\\\"data:application/octet-stream;base64,\\\")}if(!N(x=\\\"ort-wasm.wasm\\\")){var $=x;x=a.locateFile?a.locateFile($,p):p+$}function z(e){if(e==x&&m)return new Uint8Array(m);if(s)return s(e);throw\\\"both async and sync fetching of the wasm failed\\\"}function G(e,t,r){return function(e){if(!m&&(l||f)){if(\\\"function\\\"==typeof fetch&&!e.startsWith(\\\"file://\\\"))return fetch(e,{credentials:\\\"same-origin\\\"}).then((t=>{if(!t.ok)throw\\\"failed to load wasm binary file at '\\\"+e+\\\"'\\\";return t.arrayBuffer()})).catch((()=>z(e)));if(i)return new Promise(((t,r)=>{i(e,(e=>t(new Uint8Array(e))),r)}))}return Promise.resolve().then((()=>z(e)))}(e).then((e=>WebAssembly.instantiate(e,t))).then((e=>e)).then(r,(e=>{v(\\\"failed to asynchronously prepare wasm: \\\"+e),Y(e)}))}var B=e=>{for(;0<e.length;)e.shift()(a)};function V(e){this.Pa=e-24,this.Za=function(e){E[this.Pa+4>>2]=e},this.Ya=function(e){E[this.Pa+8>>2]=e},this.Ta=function(e,t){this.Ua(),this.Za(e),this.Ya(t)},this.Ua=function(){E[this.Pa+16>>2]=0}}var q=\\\"undefined\\\"!=typeof TextDecoder?new TextDecoder(\\\"utf8\\\"):void 0,J=(e,t,r)=>{var n=t+r;for(r=t;e[r]&&!(r>=n);)++r;if(16<r-t&&e.buffer&&q)return q.decode(e.subarray(t,r));for(n=\\\"\\\";t<r;){var a=e[t++];if(128&a){var o=63&e[t++];if(192==(224&a))n+=String.fromCharCode((31&a)<<6|o);else{var i=63&e[t++];65536>(a=224==(240&a)?(15&a)<<12|o<<6|i:(7&a)<<18|o<<12|i<<6|63&e[t++])?n+=String.fromCharCode(a):(a-=65536,n+=String.fromCharCode(55296|a>>10,56320|1023&a))}}else n+=String.fromCharCode(a)}return n},X=e=>{for(var t=0,r=0;r<e.length;++r){var n=e.charCodeAt(r);127>=n?t++:2047>=n?t+=2:55296<=n&&57343>=n?(t+=4,++r):t+=3}return t},K=(e,t,r,n)=>{if(!(0<n))return 0;var a=r;n=r+n-1;for(var o=0;o<e.length;++o){var i=e.charCodeAt(o);if(55296<=i&&57343>=i&&(i=65536+((1023&i)<<10)|1023&e.charCodeAt(++o)),127>=i){if(r>=n)break;t[r++]=i}else{if(2047>=i){if(r+1>=n)break;t[r++]=192|i>>6}else{if(65535>=i){if(r+2>=n)break;t[r++]=224|i>>12}else{if(r+3>=n)break;t[r++]=240|i>>18,t[r++]=128|i>>12&63}t[r++]=128|i>>6&63}t[r++]=128|63&i}}return t[r]=0,r-a};function Q(e){if(null===e)return\\\"null\\\";var t=typeof e;return\\\"object\\\"===t||\\\"array\\\"===t||\\\"function\\\"===t?e.toString():\\\"\\\"+e}var Z=void 0;function ee(e){for(var t=\\\"\\\";O[e];)t+=Z[O[e++]];return t}var te={},re={},ne={},ae=void 0;function oe(e){throw new ae(e)}function ie(e,t,r={}){if(!(\\\"argPackAdvance\\\"in t))throw new TypeError(\\\"registerType registeredInstance requires argPackAdvance\\\");!function(e,t,r={}){var n=t.name;if(e||oe(`type \\\"${n}\\\" must have a positive integer typeid pointer`),re.hasOwnProperty(e)){if(r.$a)return;oe(`Cannot register type '${n}' twice`)}re[e]=t,delete ne[e],te.hasOwnProperty(e)&&(t=te[e],delete te[e],t.forEach((e=>e())))}(e,t,r)}function se(e,t,r){switch(t){case 0:return r?function(e){return _[e]}:function(e){return O[e]};case 1:return r?function(e){return A[e>>1]}:function(e){return T[e>>1]};case 2:return r?function(e){return S[e>>2]}:function(e){return E[e>>2]};case 3:return r?function(e){return R[e>>3]}:function(e){return P[e>>3]};default:throw new TypeError(\\\"Unknown integer type: \\\"+e)}}function ue(e){switch(e){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError(`Unknown type size: ${e}`)}}function ce(){this.Ma=[void 0],this.Wa=[]}var le=new ce;function fe(e){e>=le.Pa&&0==--le.get(e).Xa&&le.Ua(e)}var de=e=>(e||oe(\\\"Cannot use deleted val. handle = \\\"+e),le.get(e).value),pe=e=>{switch(e){case void 0:return 1;case null:return 2;case!0:return 3;case!1:return 4;default:return le.Ta({Xa:1,value:e})}};function ge(e){return this.fromWireType(S[e>>2])}function he(e,t){switch(t){case 2:return function(e){return this.fromWireType(M[e>>2])};case 3:return function(e){return this.fromWireType(C[e>>3])};default:throw new TypeError(\\\"Unknown float type: \\\"+e)}}var me=\\\"undefined\\\"!=typeof TextDecoder?new TextDecoder(\\\"utf-16le\\\"):void 0,ye=(e,t)=>{for(var r=e>>1,n=r+t/2;!(r>=n)&&T[r];)++r;if(32<(r<<=1)-e&&me)return me.decode(O.subarray(e,r));for(r=\\\"\\\",n=0;!(n>=t/2);++n){var a=A[e+2*n>>1];if(0==a)break;r+=String.fromCharCode(a)}return r},ve=(e,t,r)=>{if(void 0===r&&(r=2147483647),2>r)return 0;var n=t;r=(r-=2)<2*e.length?r/2:e.length;for(var a=0;a<r;++a)A[t>>1]=e.charCodeAt(a),t+=2;return A[t>>1]=0,t-n},be=e=>2*e.length,we=(e,t)=>{for(var r=0,n=\\\"\\\";!(r>=t/4);){var a=S[e+4*r>>2];if(0==a)break;++r,65536<=a?(a-=65536,n+=String.fromCharCode(55296|a>>10,56320|1023&a)):n+=String.fromCharCode(a)}return n},_e=(e,t,r)=>{if(void 0===r&&(r=2147483647),4>r)return 0;var n=t;r=n+r-4;for(var a=0;a<e.length;++a){var o=e.charCodeAt(a);if(55296<=o&&57343>=o&&(o=65536+((1023&o)<<10)|1023&e.charCodeAt(++a)),S[t>>2]=o,(t+=4)+4>r)break}return S[t>>2]=0,t-n},Oe=e=>{for(var t=0,r=0;r<e.length;++r){var n=e.charCodeAt(r);55296<=n&&57343>=n&&++r,t+=4}return t};function Ae(e,t){var r=re[e];if(void 0===r){var n=ee(e=qe(e));Ve(e),oe(t+\\\" has unknown type \\\"+n)}return r}var Te={};function Se(e){var t=Te[e];return void 0===t?ee(e):t}var Ee=[];function Me(){return\\\"object\\\"==typeof globalThis?globalThis:Function(\\\"return this\\\")()}function Re(e){if(void 0===e)return\\\"_unknown\\\";var t=(e=e.replace(/[^a-zA-Z0-9_]/g,\\\"$\\\")).charCodeAt(0);return 48<=t&&57>=t?`_${e}`:e}var Pe=[];var Ce={};function Fe(e){return-9007199254740992>e||9007199254740992<e?NaN:Number(e)}for(var ke,Ie=e=>0==e%4&&(0!=e%100||0==e%400),De=[0,31,60,91,121,152,182,213,244,274,305,335],Ue=[0,31,59,90,120,151,181,212,243,273,304,334],We=e=>{var t=X(e)+1,r=Be(t);return r&&K(e,O,r,t),r},xe={},Le=()=>{if(!ke){var e,t={USER:\\\"web_user\\\",LOGNAME:\\\"web_user\\\",PATH:\\\"/\\\",PWD:\\\"/\\\",HOME:\\\"/home/web_user\\\",LANG:(\\\"object\\\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\\\"C\\\").replace(\\\"-\\\",\\\"_\\\")+\\\".UTF-8\\\",_:c||\\\"./this.program\\\"};for(e in xe)void 0===xe[e]?delete t[e]:t[e]=xe[e];var r=[];for(e in t)r.push(`${e}=${t[e]}`);ke=r}return ke},He=[null,[],[]],je=[31,29,31,30,31,30,31,31,30,31,30,31],Ye=[31,28,31,30,31,30,31,31,30,31,30,31],Ne=(e,t,r,n)=>{function a(e,t,r){for(e=\\\"number\\\"==typeof e?e.toString():e||\\\"\\\";e.length<t;)e=r[0]+e;return e}function o(e,t){return a(e,t,\\\"0\\\")}function i(e,t){function r(e){return 0>e?-1:0<e?1:0}var n;return 0===(n=r(e.getFullYear()-t.getFullYear()))&&0===(n=r(e.getMonth()-t.getMonth()))&&(n=r(e.getDate()-t.getDate())),n}function s(e){switch(e.getDay()){case 0:return new Date(e.getFullYear()-1,11,29);case 1:return e;case 2:return new Date(e.getFullYear(),0,3);case 3:return new Date(e.getFullYear(),0,2);case 4:return new Date(e.getFullYear(),0,1);case 5:return new Date(e.getFullYear()-1,11,31);case 6:return new Date(e.getFullYear()-1,11,30)}}function u(e){var t=e.Na;for(e=new Date(new Date(e.Oa+1900,0,1).getTime());0<t;){var r=e.getMonth(),n=(Ie(e.getFullYear())?je:Ye)[r];if(!(t>n-e.getDate())){e.setDate(e.getDate()+t);break}t-=n-e.getDate()+1,e.setDate(1),11>r?e.setMonth(r+1):(e.setMonth(0),e.setFullYear(e.getFullYear()+1))}return r=new Date(e.getFullYear()+1,0,4),t=s(new Date(e.getFullYear(),0,4)),r=s(r),0>=i(t,e)?0>=i(r,e)?e.getFullYear()+1:e.getFullYear():e.getFullYear()-1}var c=S[n+40>>2];for(var l in n={eb:S[n>>2],cb:S[n+4>>2],Ra:S[n+8>>2],Va:S[n+12>>2],Sa:S[n+16>>2],Oa:S[n+20>>2],Ia:S[n+24>>2],Na:S[n+28>>2],gb:S[n+32>>2],bb:S[n+36>>2],fb:c&&c?J(O,c):\\\"\\\"},r=r?J(O,r):\\\"\\\",c={\\\"%c\\\":\\\"%a %b %d %H:%M:%S %Y\\\",\\\"%D\\\":\\\"%m/%d/%y\\\",\\\"%F\\\":\\\"%Y-%m-%d\\\",\\\"%h\\\":\\\"%b\\\",\\\"%r\\\":\\\"%I:%M:%S %p\\\",\\\"%R\\\":\\\"%H:%M\\\",\\\"%T\\\":\\\"%H:%M:%S\\\",\\\"%x\\\":\\\"%m/%d/%y\\\",\\\"%X\\\":\\\"%H:%M:%S\\\",\\\"%Ec\\\":\\\"%c\\\",\\\"%EC\\\":\\\"%C\\\",\\\"%Ex\\\":\\\"%m/%d/%y\\\",\\\"%EX\\\":\\\"%H:%M:%S\\\",\\\"%Ey\\\":\\\"%y\\\",\\\"%EY\\\":\\\"%Y\\\",\\\"%Od\\\":\\\"%d\\\",\\\"%Oe\\\":\\\"%e\\\",\\\"%OH\\\":\\\"%H\\\",\\\"%OI\\\":\\\"%I\\\",\\\"%Om\\\":\\\"%m\\\",\\\"%OM\\\":\\\"%M\\\",\\\"%OS\\\":\\\"%S\\\",\\\"%Ou\\\":\\\"%u\\\",\\\"%OU\\\":\\\"%U\\\",\\\"%OV\\\":\\\"%V\\\",\\\"%Ow\\\":\\\"%w\\\",\\\"%OW\\\":\\\"%W\\\",\\\"%Oy\\\":\\\"%y\\\"})r=r.replace(new RegExp(l,\\\"g\\\"),c[l]);var f=\\\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\\\".split(\\\" \\\"),d=\\\"January February March April May June July August September October November December\\\".split(\\\" \\\");for(l in c={\\\"%a\\\":e=>f[e.Ia].substring(0,3),\\\"%A\\\":e=>f[e.Ia],\\\"%b\\\":e=>d[e.Sa].substring(0,3),\\\"%B\\\":e=>d[e.Sa],\\\"%C\\\":e=>o((e.Oa+1900)/100|0,2),\\\"%d\\\":e=>o(e.Va,2),\\\"%e\\\":e=>a(e.Va,2,\\\" \\\"),\\\"%g\\\":e=>u(e).toString().substring(2),\\\"%G\\\":e=>u(e),\\\"%H\\\":e=>o(e.Ra,2),\\\"%I\\\":e=>(0==(e=e.Ra)?e=12:12<e&&(e-=12),o(e,2)),\\\"%j\\\":e=>{for(var t=0,r=0;r<=e.Sa-1;t+=(Ie(e.Oa+1900)?je:Ye)[r++]);return o(e.Va+t,3)},\\\"%m\\\":e=>o(e.Sa+1,2),\\\"%M\\\":e=>o(e.cb,2),\\\"%n\\\":()=>\\\"\\\\n\\\",\\\"%p\\\":e=>0<=e.Ra&&12>e.Ra?\\\"AM\\\":\\\"PM\\\",\\\"%S\\\":e=>o(e.eb,2),\\\"%t\\\":()=>\\\"\\\\t\\\",\\\"%u\\\":e=>e.Ia||7,\\\"%U\\\":e=>o(Math.floor((e.Na+7-e.Ia)/7),2),\\\"%V\\\":e=>{var t=Math.floor((e.Na+7-(e.Ia+6)%7)/7);if(2>=(e.Ia+371-e.Na-2)%7&&t++,t)53==t&&(4==(r=(e.Ia+371-e.Na)%7)||3==r&&Ie(e.Oa)||(t=1));else{t=52;var r=(e.Ia+7-e.Na-1)%7;(4==r||5==r&&Ie(e.Oa%400-1))&&t++}return o(t,2)},\\\"%w\\\":e=>e.Ia,\\\"%W\\\":e=>o(Math.floor((e.Na+7-(e.Ia+6)%7)/7),2),\\\"%y\\\":e=>(e.Oa+1900).toString().substring(2),\\\"%Y\\\":e=>e.Oa+1900,\\\"%z\\\":e=>{var t=0<=(e=e.bb);return e=Math.abs(e)/60,(t?\\\"+\\\":\\\"-\\\")+String(\\\"0000\\\"+(e/60*100+e%60)).slice(-4)},\\\"%Z\\\":e=>e.fb,\\\"%%\\\":()=>\\\"%\\\"},r=r.replace(/%%/g,\\\"\\\\0\\\\0\\\"),c)r.includes(l)&&(r=r.replace(new RegExp(l,\\\"g\\\"),c[l](n)));return l=function(e){var t=Array(X(e)+1);return K(e,t,0,t.length),t}(r=r.replace(/\\\\0\\\\0/g,\\\"%\\\")),l.length>t?0:(_.set(l,e),l.length-1)},$e=Array(256),ze=0;256>ze;++ze)$e[ze]=String.fromCharCode(ze);Z=$e,ae=a.BindingError=class extends Error{constructor(e){super(e),this.name=\\\"BindingError\\\"}},a.InternalError=class extends Error{constructor(e){super(e),this.name=\\\"InternalError\\\"}},Object.assign(ce.prototype,{get(e){return this.Ma[e]},has(e){return void 0!==this.Ma[e]},Ta(e){var t=this.Wa.pop()||this.Ma.length;return this.Ma[t]=e,t},Ua(e){this.Ma[e]=void 0,this.Wa.push(e)}}),le.Ma.push({value:void 0},{value:null},{value:!0},{value:!1}),le.Pa=le.Ma.length,a.count_emval_handles=function(){for(var e=0,t=le.Pa;t<le.Ma.length;++t)void 0!==le.Ma[t]&&++e;return e};var Ge={a:function(e,t,r){throw new V(e).Ta(t,r),e},v:function(){return 0},ba:()=>{},N:()=>{},P:()=>{},H:function(){return 0},$:()=>{},V:()=>{},_:()=>{},A:function(){},O:()=>{},L:()=>{},aa:()=>{},M:()=>{},D:function(e,t,r,n,a){t=ee(t),r=ue(r);var o=-1!=t.indexOf(\\\"u\\\");o&&(a=(1n<<64n)-1n),ie(e,{name:t,fromWireType:function(e){return e},toWireType:function(e,r){if(\\\"bigint\\\"!=typeof r&&\\\"number\\\"!=typeof r)throw new TypeError(`Cannot convert \\\"${Q(r)}\\\" to ${this.name}`);if(r<n||r>a)throw new TypeError(`Passing a number \\\"${Q(r)}\\\" from JS side to C/C++ side to an argument of type \\\"${t}\\\", which is outside the valid range [${n}, ${a}]!`);return r},argPackAdvance:8,readValueFromPointer:se(t,r,!o),Qa:null})},ea:function(e,t,r,n,a){var o=ue(r);ie(e,{name:t=ee(t),fromWireType:function(e){return!!e},toWireType:function(e,t){return t?n:a},argPackAdvance:8,readValueFromPointer:function(e){if(1===r)var n=_;else if(2===r)n=A;else{if(4!==r)throw new TypeError(\\\"Unknown boolean type size: \\\"+t);n=S}return this.fromWireType(n[e>>o])},Qa:null})},da:function(e,t){ie(e,{name:t=ee(t),fromWireType:function(e){var t=de(e);return fe(e),t},toWireType:function(e,t){return pe(t)},argPackAdvance:8,readValueFromPointer:ge,Qa:null})},C:function(e,t,r){r=ue(r),ie(e,{name:t=ee(t),fromWireType:function(e){return e},toWireType:function(e,t){return t},argPackAdvance:8,readValueFromPointer:he(t,r),Qa:null})},p:function(e,t,r,n,a){t=ee(t),-1===a&&(a=4294967295),a=ue(r);var o=e=>e;if(0===n){var i=32-8*r;o=e=>e<<i>>>i}r=t.includes(\\\"unsigned\\\")?function(e,t){return t>>>0}:function(e,t){return t},ie(e,{name:t,fromWireType:o,toWireType:r,argPackAdvance:8,readValueFromPointer:se(t,a,0!==n),Qa:null})},l:function(e,t,r){function n(e){e>>=2;var t=E;return new a(t.buffer,t[e+1],t[e])}var a=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array,BigInt64Array,BigUint64Array][t];ie(e,{name:r=ee(r),fromWireType:n,argPackAdvance:8,readValueFromPointer:n},{$a:!0})},E:function(e,t){var r=\\\"std::string\\\"===(t=ee(t));ie(e,{name:t,fromWireType:function(e){var t=E[e>>2],n=e+4;if(r)for(var a=n,o=0;o<=t;++o){var i=n+o;if(o==t||0==O[i]){if(a=a?J(O,a,i-a):\\\"\\\",void 0===s)var s=a;else s+=String.fromCharCode(0),s+=a;a=i+1}}else{for(s=Array(t),o=0;o<t;++o)s[o]=String.fromCharCode(O[n+o]);s=s.join(\\\"\\\")}return Ve(e),s},toWireType:function(e,t){t instanceof ArrayBuffer&&(t=new Uint8Array(t));var n=\\\"string\\\"==typeof t;n||t instanceof Uint8Array||t instanceof Uint8ClampedArray||t instanceof Int8Array||oe(\\\"Cannot pass non-string to std::string\\\");var a=r&&n?X(t):t.length,o=Be(4+a+1),i=o+4;if(E[o>>2]=a,r&&n)K(t,O,i,a+1);else if(n)for(n=0;n<a;++n){var s=t.charCodeAt(n);255<s&&(Ve(i),oe(\\\"String has UTF-16 code units that do not fit in 8 bits\\\")),O[i+n]=s}else for(n=0;n<a;++n)O[i+n]=t[n];return null!==e&&e.push(Ve,o),o},argPackAdvance:8,readValueFromPointer:ge,Qa:function(e){Ve(e)}})},x:function(e,t,r){if(r=ee(r),2===t)var n=ye,a=ve,o=be,i=()=>T,s=1;else 4===t&&(n=we,a=_e,o=Oe,i=()=>E,s=2);ie(e,{name:r,fromWireType:function(e){for(var r,a=E[e>>2],o=i(),u=e+4,c=0;c<=a;++c){var l=e+4+c*t;c!=a&&0!=o[l>>s]||(u=n(u,l-u),void 0===r?r=u:(r+=String.fromCharCode(0),r+=u),u=l+t)}return Ve(e),r},toWireType:function(e,n){\\\"string\\\"!=typeof n&&oe(`Cannot pass non-string to C++ string type ${r}`);var i=o(n),u=Be(4+i+t);return E[u>>2]=i>>s,a(n,u+4,i+t),null!==e&&e.push(Ve,u),u},argPackAdvance:8,readValueFromPointer:ge,Qa:function(e){Ve(e)}})},fa:function(e,t){ie(e,{ab:!0,name:t=ee(t),argPackAdvance:0,fromWireType:function(){},toWireType:function(){}})},ca:()=>!0,o:function(e,t,r){e=de(e),t=Ae(t,\\\"emval::as\\\");var n=[],a=pe(n);return E[r>>2]=a,t.toWireType(n,e)},h:function(e,t,r,n,a){e=Ee[e],t=de(t),r=Se(r);var o=[];return E[n>>2]=pe(o),e(t,r,o,a)},q:function(e,t,r,n){(e=Ee[e])(t=de(t),r=Se(r),null,n)},b:fe,F:function(e,t){return(e=de(e))==de(t)},u:function(e){return 0===e?pe(Me()):(e=Se(e),pe(Me()[e]))},g:function(e,t){var r=function(e,t){for(var r=Array(e),n=0;n<e;++n)r[n]=Ae(E[t+4*n>>2],\\\"parameter \\\"+n);return r}(e,t),n=r[0];t=n.name+\\\"_$\\\"+r.slice(1).map((function(e){return e.name})).join(\\\"_\\\")+\\\"$\\\";var a=Pe[t];if(void 0!==a)return a;a=[\\\"retType\\\"];for(var o=[n],i=\\\"\\\",s=0;s<e-1;++s)i+=(0!==s?\\\", \\\":\\\"\\\")+\\\"arg\\\"+s,a.push(\\\"argType\\\"+s),o.push(r[1+s]);var u=\\\"return function \\\"+Re(\\\"methodCaller_\\\"+t)+\\\"(handle, name, destructors, args) {\\\\n\\\",c=0;for(s=0;s<e-1;++s)u+=\\\"    var arg\\\"+s+\\\" = argType\\\"+s+\\\".readValueFromPointer(args\\\"+(c?\\\"+\\\"+c:\\\"\\\")+\\\");\\\\n\\\",c+=r[s+1].argPackAdvance;for(u+=\\\"    var rv = handle[name](\\\"+i+\\\");\\\\n\\\",s=0;s<e-1;++s)r[s+1].deleteObject&&(u+=\\\"    argType\\\"+s+\\\".deleteObject(arg\\\"+s+\\\");\\\\n\\\");return n.ab||(u+=\\\"    return retType.toWireType(destructors, rv);\\\\n\\\"),a.push(u+\\\"};\\\\n\\\"),a=function(e){var t=Ee.length;return Ee.push(e),t}(e=function(e){var t=Function;if(!(t instanceof Function))throw new TypeError(`new_ called with constructor type ${typeof t} which is not a function`);var r=function(e,t){return{[e=Re(e)]:function(){return t.apply(this,arguments)}}[e]}(t.name||\\\"unknownFunctionName\\\",(function(){}));return r.prototype=t.prototype,r=new r,(e=t.apply(r,e))instanceof Object?e:r}(a).apply(null,o)),Pe[t]=a},r:function(e,t){return e=de(e),t=de(t),pe(e[t])},c:function(e){4<e&&(le.get(e).Xa+=1)},G:function(e,t,r,n){e=de(e);var o=Ce[t];return o||(o=function(e){for(var t=\\\"\\\",r=0;r<e;++r)t+=(0!==r?\\\", \\\":\\\"\\\")+\\\"arg\\\"+r;var n=\\\"return function emval_allocator_\\\"+e+\\\"(constructor, argTypes, args) {\\\\n  var HEAPU32 = getMemory();\\\\n\\\";for(r=0;r<e;++r)n+=\\\"var argType\\\"+r+\\\" = requireRegisteredType(HEAPU32[((argTypes)>>2)], 'parameter \\\"+r+\\\"');\\\\nvar arg\\\"+r+\\\" = argType\\\"+r+\\\".readValueFromPointer(args);\\\\nargs += argType\\\"+r+\\\"['argPackAdvance'];\\\\nargTypes += 4;\\\\n\\\";return new Function(\\\"requireRegisteredType\\\",\\\"Module\\\",\\\"valueToHandle\\\",\\\"getMemory\\\",n+\\\"var obj = new constructor(\\\"+t+\\\");\\\\nreturn valueToHandle(obj);\\\\n}\\\\n\\\")(Ae,a,pe,(()=>E))}(t),Ce[t]=o),o(e,r,n)},s:function(){return pe([])},k:function(e){e=de(e);for(var t=Array(e.length),r=0;r<e.length;r++)t[r]=e[r];return pe(t)},d:function(e){return pe(Se(e))},j:function(){return pe({})},f:function(e){for(var t=de(e);t.length;){var r=t.pop();t.pop()(r)}fe(e)},i:function(e,t,r){e=de(e),t=de(t),r=de(r),e[t]=r},e:function(e,t){return e=(e=Ae(e,\\\"_emval_take_value\\\")).readValueFromPointer(t),pe(e)},S:function(e,t){e=Fe(e),t=Fe(t),e=new Date(1e3*e),S[t>>2]=e.getUTCSeconds(),S[t+4>>2]=e.getUTCMinutes(),S[t+8>>2]=e.getUTCHours(),S[t+12>>2]=e.getUTCDate(),S[t+16>>2]=e.getUTCMonth(),S[t+20>>2]=e.getUTCFullYear()-1900,S[t+24>>2]=e.getUTCDay(),S[t+28>>2]=(e.getTime()-Date.UTC(e.getUTCFullYear(),0,1,0,0,0,0))/864e5|0},T:function(e,t){e=Fe(e),t=Fe(t),e=new Date(1e3*e),S[t>>2]=e.getSeconds(),S[t+4>>2]=e.getMinutes(),S[t+8>>2]=e.getHours(),S[t+12>>2]=e.getDate(),S[t+16>>2]=e.getMonth(),S[t+20>>2]=e.getFullYear()-1900,S[t+24>>2]=e.getDay(),S[t+28>>2]=(Ie(e.getFullYear())?De:Ue)[e.getMonth()]+e.getDate()-1|0,S[t+36>>2]=-60*e.getTimezoneOffset();var r=new Date(e.getFullYear(),6,1).getTimezoneOffset(),n=new Date(e.getFullYear(),0,1).getTimezoneOffset();S[t+32>>2]=0|(r!=n&&e.getTimezoneOffset()==Math.min(n,r))},U:function(e){e=Fe(e);var t=new Date(S[e+20>>2]+1900,S[e+16>>2],S[e+12>>2],S[e+8>>2],S[e+4>>2],S[e>>2],0),r=S[e+32>>2],n=t.getTimezoneOffset(),a=new Date(t.getFullYear(),6,1).getTimezoneOffset(),o=new Date(t.getFullYear(),0,1).getTimezoneOffset(),i=Math.min(o,a);return 0>r?S[e+32>>2]=Number(a!=o&&i==n):0<r!=(i==n)&&(a=Math.max(o,a),t.setTime(t.getTime()+6e4*((0<r?i:a)-n))),S[e+24>>2]=t.getDay(),S[e+28>>2]=(Ie(t.getFullYear())?De:Ue)[t.getMonth()]+t.getDate()-1|0,S[e>>2]=t.getSeconds(),S[e+4>>2]=t.getMinutes(),S[e+8>>2]=t.getHours(),S[e+12>>2]=t.getDate(),S[e+16>>2]=t.getMonth(),S[e+20>>2]=t.getYear(),BigInt(t.getTime()/1e3)},Q:function(){return-52},R:function(){},J:(e,t,r)=>{function n(e){return(e=e.toTimeString().match(/\\\\(([A-Za-z ]+)\\\\)$/))?e[1]:\\\"GMT\\\"}var a=(new Date).getFullYear(),o=new Date(a,0,1),i=new Date(a,6,1);a=o.getTimezoneOffset();var s=i.getTimezoneOffset();E[e>>2]=60*Math.max(a,s),S[t>>2]=Number(a!=s),e=n(o),t=n(i),e=We(e),t=We(t),s<a?(E[r>>2]=e,E[r+4>>2]=t):(E[r>>2]=t,E[r+4>>2]=e)},t:()=>{Y(\\\"\\\")},B:function(){return Date.now()},K:()=>2147483648,n:()=>performance.now(),Z:(e,t,r)=>O.copyWithin(e,t,t+r),I:e=>{var t=O.length;if(2147483648<(e>>>=0))return!1;for(var r=1;4>=r;r*=2){var n=t*(1+.2/r);n=Math.min(n,e+100663296);var a=Math;n=Math.max(e,n);e:{a=a.min.call(a,2147483648,n+(65536-n%65536)%65536)-b.buffer.byteLength+65535>>>16;try{b.grow(a),k();var o=1;break e}catch(e){}o=void 0}if(o)return!0}return!1},X:(e,t)=>{var r=0;return Le().forEach((function(n,a){var o=t+r;for(a=E[e+4*a>>2]=o,o=0;o<n.length;++o)_[a++>>0]=n.charCodeAt(o);_[a>>0]=0,r+=n.length+1})),0},Y:(e,t)=>{var r=Le();E[e>>2]=r.length;var n=0;return r.forEach((function(e){n+=e.length+1})),E[t>>2]=n,0},w:()=>52,z:()=>52,W:function(){return 70},y:(e,t,r,n)=>{for(var a=0,o=0;o<r;o++){var i=E[t>>2],s=E[t+4>>2];t+=8;for(var u=0;u<s;u++){var c=O[i+u],l=He[e];0===c||10===c?((1===e?y:v)(J(l,0)),l.length=0):l.push(c)}a+=s}return E[n>>2]=a,0},ga:Ne,m:(e,t,r,n)=>Ne(e,t,r,n)};!function(){function e(e){if(w=e=e.exports,b=w.ha,k(),D.unshift(w.ia),L--,a.monitorRunDependencies&&a.monitorRunDependencies(L),0==L&&(null!==H&&(clearInterval(H),H=null),j)){var t=j;j=null,t()}return e}var t={a:Ge};if(L++,a.monitorRunDependencies&&a.monitorRunDependencies(L),a.instantiateWasm)try{return a.instantiateWasm(t,e)}catch(e){v(\\\"Module.instantiateWasm callback failed with error: \\\"+e),n(e)}(function(e,t){var r=x;return m||\\\"function\\\"!=typeof WebAssembly.instantiateStreaming||N(r)||r.startsWith(\\\"file://\\\")||d||\\\"function\\\"!=typeof fetch?G(r,e,t):fetch(r,{credentials:\\\"same-origin\\\"}).then((n=>WebAssembly.instantiateStreaming(n,e).then(t,(function(n){return v(\\\"wasm streaming compile failed: \\\"+n),v(\\\"falling back to ArrayBuffer instantiation\\\"),G(r,e,t)}))))})(t,(function(t){e(t.instance)})).catch(n)}(),a._OrtInit=(e,t)=>(a._OrtInit=w.ja)(e,t),a._OrtGetLastError=(e,t)=>(a._OrtGetLastError=w.ka)(e,t),a._OrtCreateSessionOptions=(e,t,r,n,o,i,s,u,c,l)=>(a._OrtCreateSessionOptions=w.la)(e,t,r,n,o,i,s,u,c,l),a._OrtAppendExecutionProvider=(e,t)=>(a._OrtAppendExecutionProvider=w.ma)(e,t),a._OrtAddFreeDimensionOverride=(e,t,r)=>(a._OrtAddFreeDimensionOverride=w.na)(e,t,r),a._OrtAddSessionConfigEntry=(e,t,r)=>(a._OrtAddSessionConfigEntry=w.oa)(e,t,r),a._OrtReleaseSessionOptions=e=>(a._OrtReleaseSessionOptions=w.pa)(e),a._OrtCreateSession=(e,t,r)=>(a._OrtCreateSession=w.qa)(e,t,r),a._OrtReleaseSession=e=>(a._OrtReleaseSession=w.ra)(e),a._OrtGetInputOutputCount=(e,t,r)=>(a._OrtGetInputOutputCount=w.sa)(e,t,r),a._OrtGetInputName=(e,t)=>(a._OrtGetInputName=w.ta)(e,t),a._OrtGetOutputName=(e,t)=>(a._OrtGetOutputName=w.ua)(e,t),a._OrtFree=e=>(a._OrtFree=w.va)(e),a._OrtCreateTensor=(e,t,r,n,o)=>(a._OrtCreateTensor=w.wa)(e,t,r,n,o),a._OrtGetTensorData=(e,t,r,n,o)=>(a._OrtGetTensorData=w.xa)(e,t,r,n,o),a._OrtReleaseTensor=e=>(a._OrtReleaseTensor=w.ya)(e),a._OrtCreateRunOptions=(e,t,r,n)=>(a._OrtCreateRunOptions=w.za)(e,t,r,n),a._OrtAddRunConfigEntry=(e,t,r)=>(a._OrtAddRunConfigEntry=w.Aa)(e,t,r),a._OrtReleaseRunOptions=e=>(a._OrtReleaseRunOptions=w.Ba)(e),a._OrtRun=(e,t,r,n,o,i,s,u)=>(a._OrtRun=w.Ca)(e,t,r,n,o,i,s,u),a._OrtEndProfiling=e=>(a._OrtEndProfiling=w.Da)(e);var Be=a._malloc=e=>(Be=a._malloc=w.Ea)(e),Ve=a._free=e=>(Ve=a._free=w.Fa)(e),qe=e=>(qe=w.Ga)(e);a.__embind_initialize_bindings=()=>(a.__embind_initialize_bindings=w.Ha)();var Je,Xe=()=>(Xe=w.Ja)(),Ke=e=>(Ke=w.Ka)(e),Qe=e=>(Qe=w.La)(e);function Ze(){function e(){if(!Je&&(Je=!0,a.calledRun=!0,!F)){if(B(D),t(a),a.onRuntimeInitialized&&a.onRuntimeInitialized(),a.postRun)for(\\\"function\\\"==typeof a.postRun&&(a.postRun=[a.postRun]);a.postRun.length;){var e=a.postRun.shift();U.unshift(e)}B(U)}}if(!(0<L)){if(a.preRun)for(\\\"function\\\"==typeof a.preRun&&(a.preRun=[a.preRun]);a.preRun.length;)W();B(I),0<L||(a.setStatus?(a.setStatus(\\\"Running...\\\"),setTimeout((function(){setTimeout((function(){a.setStatus(\\\"\\\")}),1),e()}),1)):e())}}if(a.stackAlloc=Qe,a.stackSave=Xe,a.stackRestore=Ke,a.UTF8ToString=(e,t)=>e?J(O,e,t):\\\"\\\",a.stringToUTF8=(e,t,r)=>K(e,O,t,r),a.lengthBytesUTF8=X,j=function e(){Je||Ze(),Je||(j=e)},a.preInit)for(\\\"function\\\"==typeof a.preInit&&(a.preInit=[a.preInit]);0<a.preInit.length;)a.preInit.pop()();return Ze(),e.ready});e.exports=n},154:e=>{\\\"use strict\\\";e.exports='\\\"use strict\\\";var e={},a=\\\"object\\\"==typeof process&&\\\"object\\\"==typeof process.versions&&\\\"string\\\"==typeof process.versions.node;if(a){var r=require(\\\"worker_threads\\\"),t=r.parentPort;t.on(\\\"message\\\",(e=>onmessage({data:e})));var s=require(\\\"fs\\\");Object.assign(global,{self:global,require:require,Module:e,location:{href:__filename},Worker:r.Worker,importScripts:e=>(0,eval)(s.readFileSync(e,\\\"utf8\\\")+\\\"//# sourceURL=\\\"+e),postMessage:e=>t.postMessage(e),performance:global.performance||{now:Date.now}})}var o=!1,d=function(){var e=Array.prototype.slice.call(arguments).join(\\\" \\\");a?s.writeSync(2,e+\\\"\\\\\\\\n\\\"):console.error(e)};self.alert=function(){var a=Array.prototype.slice.call(arguments).join(\\\" \\\");postMessage({cmd:\\\"alert\\\",text:a,threadId:e._pthread_self()})},e.instantiateWasm=(a,r)=>{var t=e.wasmModule;return e.wasmModule=null,r(new WebAssembly.Instance(t,a))},self.onunhandledrejection=e=>{throw e.reason??e},self.onmessage=function a(r){try{if(\\\"load\\\"===r.data.cmd){let s=[];self.onmessage=e=>s.push(e),self.startWorker=r=>{e=r,postMessage({cmd:\\\"loaded\\\"});for(let e of s)a(e);self.onmessage=a},e.wasmModule=r.data.wasmModule;for(const a of r.data.handlers)e[a]=(...e)=>{postMessage({cmd:\\\"callHandler\\\",handler:a,args:e})};if(e.wasmMemory=r.data.wasmMemory,e.buffer=e.wasmMemory.buffer,e.ENVIRONMENT_IS_PTHREAD=!0,\\\"string\\\"==typeof r.data.urlOrBlob)importScripts(r.data.urlOrBlob);else{var t=URL.createObjectURL(r.data.urlOrBlob);importScripts(t),URL.revokeObjectURL(t)}ortWasmThreaded(e)}else if(\\\"run\\\"===r.data.cmd){e.__emscripten_thread_init(r.data.pthread_ptr,0,0,1),e.__emscripten_thread_mailbox_await(r.data.pthread_ptr),e.establishStackSpace(),e.PThread.receiveObjectTransfer(r.data),e.PThread.threadInitTLS(),o||(o=!0);try{e.invokeEntryPoint(r.data.start_routine,r.data.arg)}catch(e){if(\\\"unwind\\\"!=e)throw e}}else\\\"cancel\\\"===r.data.cmd?e._pthread_self()&&e.__emscripten_thread_exit(-1):\\\"setimmediate\\\"===r.data.target||(\\\"checkMailbox\\\"===r.data.cmd?o&&e.checkMailbox():r.data.cmd&&(d(\\\"worker.js received unknown command \\\"+r.data.cmd),d(r.data)))}catch(a){throw e.__emscripten_thread_crashed&&e.__emscripten_thread_crashed(),a}};\\\\n'},384:()=>{},993:()=>{},908:()=>{},953:()=>{},925:()=>{},449:()=>{}},t={};function r(n){var a=t[n];if(void 0!==a)return a.exports;var o=t[n]={exports:{}};return e[n].call(o.exports,o,o.exports,r),o.exports}(()=>{\\\"use strict\\\";const e=r(259),t=r(263);self.onmessage=r=>{switch(r.data.type){case\\\"init-wasm\\\":try{(0,t.initializeWebAssembly)(r.data.in).then((()=>postMessage({type:\\\"init-wasm\\\"})),(e=>postMessage({type:\\\"init-wasm\\\",err:e})))}catch(e){postMessage({type:\\\"init-wasm\\\",err:e})}break;case\\\"init-ort\\\":try{(0,e.initRuntime)(r.data.in).then((()=>postMessage({type:\\\"init-ort\\\"})),(e=>postMessage({type:\\\"init-ort\\\",err:e}))),postMessage({type:\\\"init-ort\\\"})}catch(e){postMessage({type:\\\"init-ort\\\",err:e})}break;case\\\"create_allocate\\\":try{const{model:t}=r.data.in,n=(0,e.createSessionAllocate)(t);postMessage({type:\\\"create_allocate\\\",out:n})}catch(e){postMessage({type:\\\"create_allocate\\\",err:e})}break;case\\\"create_finalize\\\":try{const{modeldata:t,options:n}=r.data.in,a=(0,e.createSessionFinalize)(t,n);postMessage({type:\\\"create_finalize\\\",out:a})}catch(e){postMessage({type:\\\"create_finalize\\\",err:e})}break;case\\\"create\\\":try{const{model:t,options:n}=r.data.in,a=(0,e.createSession)(t,n);postMessage({type:\\\"create\\\",out:a})}catch(e){postMessage({type:\\\"create\\\",err:e})}break;case\\\"release\\\":try{const t=r.data.in;(0,e.releaseSession)(t),postMessage({type:\\\"release\\\"})}catch(e){postMessage({type:\\\"release\\\",err:e})}break;case\\\"run\\\":try{const{sessionId:t,inputIndices:n,inputs:a,outputIndices:o,options:i}=r.data.in;(0,e.run)(t,n,a,o,i).then((t=>{postMessage({type:\\\"run\\\",out:t},(0,e.extractTransferableBuffers)(t))}),(e=>{postMessage({type:\\\"run\\\",err:e})}))}catch(e){postMessage({type:\\\"run\\\",err:e})}break;case\\\"end-profiling\\\":try{const t=r.data.in;(0,e.endProfiling)(t),postMessage({type:\\\"end-profiling\\\"})}catch(e){postMessage({type:\\\"end-profiling\\\",err:e})}}}})()})();\\n\", \"Worker\", undefined, undefined);\n}\n","\"use strict\";\n\n/* eslint-env browser */\n\n/* eslint-disable no-undef, no-use-before-define, new-cap */\nmodule.exports = function (content, workerConstructor, workerOptions, url) {\n  var globalScope = self || window;\n\n  try {\n    try {\n      var blob;\n\n      try {\n        // New API\n        blob = new globalScope.Blob([content]);\n      } catch (e) {\n        // BlobBuilder = Deprecated, but widely implemented\n        var BlobBuilder = globalScope.BlobBuilder || globalScope.WebKitBlobBuilder || globalScope.MozBlobBuilder || globalScope.MSBlobBuilder;\n        blob = new BlobBuilder();\n        blob.append(content);\n        blob = blob.getBlob();\n      }\n\n      var URL = globalScope.URL || globalScope.webkitURL;\n      var objectURL = URL.createObjectURL(blob);\n      var worker = new globalScope[workerConstructor](objectURL, workerOptions);\n      URL.revokeObjectURL(objectURL);\n      return worker;\n    } catch (e) {\n      return new globalScope[workerConstructor](\"data:application/javascript,\".concat(encodeURIComponent(content)), workerOptions);\n    }\n  } catch (e) {\n    if (!url) {\n      throw Error(\"Inline worker is not supported\");\n    }\n\n    return new globalScope[workerConstructor](url, workerOptions);\n  }\n};","/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n\"use strict\";\n\nvar $protobuf = require(\"protobufjs/minimal\");\n\n// Common aliases\nvar $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nvar $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\n$root.onnx = (function() {\n\n    /**\n     * Namespace onnx.\n     * @exports onnx\n     * @namespace\n     */\n    var onnx = {};\n\n    /**\n     * Version enum.\n     * @name onnx.Version\n     * @enum {number}\n     * @property {number} _START_VERSION=0 _START_VERSION value\n     * @property {number} IR_VERSION_2017_10_10=1 IR_VERSION_2017_10_10 value\n     * @property {number} IR_VERSION_2017_10_30=2 IR_VERSION_2017_10_30 value\n     * @property {number} IR_VERSION_2017_11_3=3 IR_VERSION_2017_11_3 value\n     * @property {number} IR_VERSION_2019_1_22=4 IR_VERSION_2019_1_22 value\n     * @property {number} IR_VERSION_2019_3_18=5 IR_VERSION_2019_3_18 value\n     * @property {number} IR_VERSION_2019_9_19=6 IR_VERSION_2019_9_19 value\n     * @property {number} IR_VERSION_2020_5_8=7 IR_VERSION_2020_5_8 value\n     * @property {number} IR_VERSION_2021_7_30=8 IR_VERSION_2021_7_30 value\n     * @property {number} IR_VERSION=9 IR_VERSION value\n     */\n    onnx.Version = (function() {\n        var valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"_START_VERSION\"] = 0;\n        values[valuesById[1] = \"IR_VERSION_2017_10_10\"] = 1;\n        values[valuesById[2] = \"IR_VERSION_2017_10_30\"] = 2;\n        values[valuesById[3] = \"IR_VERSION_2017_11_3\"] = 3;\n        values[valuesById[4] = \"IR_VERSION_2019_1_22\"] = 4;\n        values[valuesById[5] = \"IR_VERSION_2019_3_18\"] = 5;\n        values[valuesById[6] = \"IR_VERSION_2019_9_19\"] = 6;\n        values[valuesById[7] = \"IR_VERSION_2020_5_8\"] = 7;\n        values[valuesById[8] = \"IR_VERSION_2021_7_30\"] = 8;\n        values[valuesById[9] = \"IR_VERSION\"] = 9;\n        return values;\n    })();\n\n    onnx.AttributeProto = (function() {\n\n        /**\n         * Properties of an AttributeProto.\n         * @memberof onnx\n         * @interface IAttributeProto\n         * @property {string|null} [name] AttributeProto name\n         * @property {string|null} [refAttrName] AttributeProto refAttrName\n         * @property {string|null} [docString] AttributeProto docString\n         * @property {onnx.AttributeProto.AttributeType|null} [type] AttributeProto type\n         * @property {number|null} [f] AttributeProto f\n         * @property {number|Long|null} [i] AttributeProto i\n         * @property {Uint8Array|null} [s] AttributeProto s\n         * @property {onnx.ITensorProto|null} [t] AttributeProto t\n         * @property {onnx.IGraphProto|null} [g] AttributeProto g\n         * @property {onnx.ISparseTensorProto|null} [sparseTensor] AttributeProto sparseTensor\n         * @property {onnx.ITypeProto|null} [tp] AttributeProto tp\n         * @property {Array.<number>|null} [floats] AttributeProto floats\n         * @property {Array.<number|Long>|null} [ints] AttributeProto ints\n         * @property {Array.<Uint8Array>|null} [strings] AttributeProto strings\n         * @property {Array.<onnx.ITensorProto>|null} [tensors] AttributeProto tensors\n         * @property {Array.<onnx.IGraphProto>|null} [graphs] AttributeProto graphs\n         * @property {Array.<onnx.ISparseTensorProto>|null} [sparseTensors] AttributeProto sparseTensors\n         * @property {Array.<onnx.ITypeProto>|null} [typeProtos] AttributeProto typeProtos\n         */\n\n        /**\n         * Constructs a new AttributeProto.\n         * @memberof onnx\n         * @classdesc Represents an AttributeProto.\n         * @implements IAttributeProto\n         * @constructor\n         * @param {onnx.IAttributeProto=} [properties] Properties to set\n         */\n        function AttributeProto(properties) {\n            this.floats = [];\n            this.ints = [];\n            this.strings = [];\n            this.tensors = [];\n            this.graphs = [];\n            this.sparseTensors = [];\n            this.typeProtos = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * AttributeProto name.\n         * @member {string} name\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.name = \"\";\n\n        /**\n         * AttributeProto refAttrName.\n         * @member {string} refAttrName\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.refAttrName = \"\";\n\n        /**\n         * AttributeProto docString.\n         * @member {string} docString\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.docString = \"\";\n\n        /**\n         * AttributeProto type.\n         * @member {onnx.AttributeProto.AttributeType} type\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.type = 0;\n\n        /**\n         * AttributeProto f.\n         * @member {number} f\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.f = 0;\n\n        /**\n         * AttributeProto i.\n         * @member {number|Long} i\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.i = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * AttributeProto s.\n         * @member {Uint8Array} s\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.s = $util.newBuffer([]);\n\n        /**\n         * AttributeProto t.\n         * @member {onnx.ITensorProto|null|undefined} t\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.t = null;\n\n        /**\n         * AttributeProto g.\n         * @member {onnx.IGraphProto|null|undefined} g\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.g = null;\n\n        /**\n         * AttributeProto sparseTensor.\n         * @member {onnx.ISparseTensorProto|null|undefined} sparseTensor\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.sparseTensor = null;\n\n        /**\n         * AttributeProto tp.\n         * @member {onnx.ITypeProto|null|undefined} tp\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.tp = null;\n\n        /**\n         * AttributeProto floats.\n         * @member {Array.<number>} floats\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.floats = $util.emptyArray;\n\n        /**\n         * AttributeProto ints.\n         * @member {Array.<number|Long>} ints\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.ints = $util.emptyArray;\n\n        /**\n         * AttributeProto strings.\n         * @member {Array.<Uint8Array>} strings\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.strings = $util.emptyArray;\n\n        /**\n         * AttributeProto tensors.\n         * @member {Array.<onnx.ITensorProto>} tensors\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.tensors = $util.emptyArray;\n\n        /**\n         * AttributeProto graphs.\n         * @member {Array.<onnx.IGraphProto>} graphs\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.graphs = $util.emptyArray;\n\n        /**\n         * AttributeProto sparseTensors.\n         * @member {Array.<onnx.ISparseTensorProto>} sparseTensors\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.sparseTensors = $util.emptyArray;\n\n        /**\n         * AttributeProto typeProtos.\n         * @member {Array.<onnx.ITypeProto>} typeProtos\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.typeProtos = $util.emptyArray;\n\n        /**\n         * Creates a new AttributeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto=} [properties] Properties to set\n         * @returns {onnx.AttributeProto} AttributeProto instance\n         */\n        AttributeProto.create = function create(properties) {\n            return new AttributeProto(properties);\n        };\n\n        /**\n         * Encodes the specified AttributeProto message. Does not implicitly {@link onnx.AttributeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto} message AttributeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AttributeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.f != null && Object.hasOwnProperty.call(message, \"f\"))\n                writer.uint32(/* id 2, wireType 5 =*/21).float(message.f);\n            if (message.i != null && Object.hasOwnProperty.call(message, \"i\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).int64(message.i);\n            if (message.s != null && Object.hasOwnProperty.call(message, \"s\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.s);\n            if (message.t != null && Object.hasOwnProperty.call(message, \"t\"))\n                $root.onnx.TensorProto.encode(message.t, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.g != null && Object.hasOwnProperty.call(message, \"g\"))\n                $root.onnx.GraphProto.encode(message.g, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n            if (message.floats != null && message.floats.length) {\n                writer.uint32(/* id 7, wireType 2 =*/58).fork();\n                for (var i = 0; i < message.floats.length; ++i)\n                    writer.float(message.floats[i]);\n                writer.ldelim();\n            }\n            if (message.ints != null && message.ints.length) {\n                writer.uint32(/* id 8, wireType 2 =*/66).fork();\n                for (var i = 0; i < message.ints.length; ++i)\n                    writer.int64(message.ints[i]);\n                writer.ldelim();\n            }\n            if (message.strings != null && message.strings.length)\n                for (var i = 0; i < message.strings.length; ++i)\n                    writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.strings[i]);\n            if (message.tensors != null && message.tensors.length)\n                for (var i = 0; i < message.tensors.length; ++i)\n                    $root.onnx.TensorProto.encode(message.tensors[i], writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();\n            if (message.graphs != null && message.graphs.length)\n                for (var i = 0; i < message.graphs.length; ++i)\n                    $root.onnx.GraphProto.encode(message.graphs[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            if (message.docString != null && Object.hasOwnProperty.call(message, \"docString\"))\n                writer.uint32(/* id 13, wireType 2 =*/106).string(message.docString);\n            if (message.tp != null && Object.hasOwnProperty.call(message, \"tp\"))\n                $root.onnx.TypeProto.encode(message.tp, writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n            if (message.typeProtos != null && message.typeProtos.length)\n                for (var i = 0; i < message.typeProtos.length; ++i)\n                    $root.onnx.TypeProto.encode(message.typeProtos[i], writer.uint32(/* id 15, wireType 2 =*/122).fork()).ldelim();\n            if (message.type != null && Object.hasOwnProperty.call(message, \"type\"))\n                writer.uint32(/* id 20, wireType 0 =*/160).int32(message.type);\n            if (message.refAttrName != null && Object.hasOwnProperty.call(message, \"refAttrName\"))\n                writer.uint32(/* id 21, wireType 2 =*/170).string(message.refAttrName);\n            if (message.sparseTensor != null && Object.hasOwnProperty.call(message, \"sparseTensor\"))\n                $root.onnx.SparseTensorProto.encode(message.sparseTensor, writer.uint32(/* id 22, wireType 2 =*/178).fork()).ldelim();\n            if (message.sparseTensors != null && message.sparseTensors.length)\n                for (var i = 0; i < message.sparseTensors.length; ++i)\n                    $root.onnx.SparseTensorProto.encode(message.sparseTensors[i], writer.uint32(/* id 23, wireType 2 =*/186).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified AttributeProto message, length delimited. Does not implicitly {@link onnx.AttributeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto} message AttributeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AttributeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an AttributeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.AttributeProto} AttributeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AttributeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.AttributeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.name = reader.string();\n                        break;\n                    }\n                case 21: {\n                        message.refAttrName = reader.string();\n                        break;\n                    }\n                case 13: {\n                        message.docString = reader.string();\n                        break;\n                    }\n                case 20: {\n                        message.type = reader.int32();\n                        break;\n                    }\n                case 2: {\n                        message.f = reader.float();\n                        break;\n                    }\n                case 3: {\n                        message.i = reader.int64();\n                        break;\n                    }\n                case 4: {\n                        message.s = reader.bytes();\n                        break;\n                    }\n                case 5: {\n                        message.t = $root.onnx.TensorProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 6: {\n                        message.g = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 22: {\n                        message.sparseTensor = $root.onnx.SparseTensorProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 14: {\n                        message.tp = $root.onnx.TypeProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 7: {\n                        if (!(message.floats && message.floats.length))\n                            message.floats = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.floats.push(reader.float());\n                        } else\n                            message.floats.push(reader.float());\n                        break;\n                    }\n                case 8: {\n                        if (!(message.ints && message.ints.length))\n                            message.ints = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.ints.push(reader.int64());\n                        } else\n                            message.ints.push(reader.int64());\n                        break;\n                    }\n                case 9: {\n                        if (!(message.strings && message.strings.length))\n                            message.strings = [];\n                        message.strings.push(reader.bytes());\n                        break;\n                    }\n                case 10: {\n                        if (!(message.tensors && message.tensors.length))\n                            message.tensors = [];\n                        message.tensors.push($root.onnx.TensorProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 11: {\n                        if (!(message.graphs && message.graphs.length))\n                            message.graphs = [];\n                        message.graphs.push($root.onnx.GraphProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 23: {\n                        if (!(message.sparseTensors && message.sparseTensors.length))\n                            message.sparseTensors = [];\n                        message.sparseTensors.push($root.onnx.SparseTensorProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 15: {\n                        if (!(message.typeProtos && message.typeProtos.length))\n                            message.typeProtos = [];\n                        message.typeProtos.push($root.onnx.TypeProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an AttributeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.AttributeProto} AttributeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AttributeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an AttributeProto message.\n         * @function verify\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        AttributeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                if (!$util.isString(message.refAttrName))\n                    return \"refAttrName: string expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                switch (message.type) {\n                default:\n                    return \"type: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                case 5:\n                case 11:\n                case 13:\n                case 6:\n                case 7:\n                case 8:\n                case 9:\n                case 10:\n                case 12:\n                case 14:\n                    break;\n                }\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                if (typeof message.f !== \"number\")\n                    return \"f: number expected\";\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                if (!$util.isInteger(message.i) && !(message.i && $util.isInteger(message.i.low) && $util.isInteger(message.i.high)))\n                    return \"i: integer|Long expected\";\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                if (!(message.s && typeof message.s.length === \"number\" || $util.isString(message.s)))\n                    return \"s: buffer expected\";\n            if (message.t != null && message.hasOwnProperty(\"t\")) {\n                var error = $root.onnx.TensorProto.verify(message.t);\n                if (error)\n                    return \"t.\" + error;\n            }\n            if (message.g != null && message.hasOwnProperty(\"g\")) {\n                var error = $root.onnx.GraphProto.verify(message.g);\n                if (error)\n                    return \"g.\" + error;\n            }\n            if (message.sparseTensor != null && message.hasOwnProperty(\"sparseTensor\")) {\n                var error = $root.onnx.SparseTensorProto.verify(message.sparseTensor);\n                if (error)\n                    return \"sparseTensor.\" + error;\n            }\n            if (message.tp != null && message.hasOwnProperty(\"tp\")) {\n                var error = $root.onnx.TypeProto.verify(message.tp);\n                if (error)\n                    return \"tp.\" + error;\n            }\n            if (message.floats != null && message.hasOwnProperty(\"floats\")) {\n                if (!Array.isArray(message.floats))\n                    return \"floats: array expected\";\n                for (var i = 0; i < message.floats.length; ++i)\n                    if (typeof message.floats[i] !== \"number\")\n                        return \"floats: number[] expected\";\n            }\n            if (message.ints != null && message.hasOwnProperty(\"ints\")) {\n                if (!Array.isArray(message.ints))\n                    return \"ints: array expected\";\n                for (var i = 0; i < message.ints.length; ++i)\n                    if (!$util.isInteger(message.ints[i]) && !(message.ints[i] && $util.isInteger(message.ints[i].low) && $util.isInteger(message.ints[i].high)))\n                        return \"ints: integer|Long[] expected\";\n            }\n            if (message.strings != null && message.hasOwnProperty(\"strings\")) {\n                if (!Array.isArray(message.strings))\n                    return \"strings: array expected\";\n                for (var i = 0; i < message.strings.length; ++i)\n                    if (!(message.strings[i] && typeof message.strings[i].length === \"number\" || $util.isString(message.strings[i])))\n                        return \"strings: buffer[] expected\";\n            }\n            if (message.tensors != null && message.hasOwnProperty(\"tensors\")) {\n                if (!Array.isArray(message.tensors))\n                    return \"tensors: array expected\";\n                for (var i = 0; i < message.tensors.length; ++i) {\n                    var error = $root.onnx.TensorProto.verify(message.tensors[i]);\n                    if (error)\n                        return \"tensors.\" + error;\n                }\n            }\n            if (message.graphs != null && message.hasOwnProperty(\"graphs\")) {\n                if (!Array.isArray(message.graphs))\n                    return \"graphs: array expected\";\n                for (var i = 0; i < message.graphs.length; ++i) {\n                    var error = $root.onnx.GraphProto.verify(message.graphs[i]);\n                    if (error)\n                        return \"graphs.\" + error;\n                }\n            }\n            if (message.sparseTensors != null && message.hasOwnProperty(\"sparseTensors\")) {\n                if (!Array.isArray(message.sparseTensors))\n                    return \"sparseTensors: array expected\";\n                for (var i = 0; i < message.sparseTensors.length; ++i) {\n                    var error = $root.onnx.SparseTensorProto.verify(message.sparseTensors[i]);\n                    if (error)\n                        return \"sparseTensors.\" + error;\n                }\n            }\n            if (message.typeProtos != null && message.hasOwnProperty(\"typeProtos\")) {\n                if (!Array.isArray(message.typeProtos))\n                    return \"typeProtos: array expected\";\n                for (var i = 0; i < message.typeProtos.length; ++i) {\n                    var error = $root.onnx.TypeProto.verify(message.typeProtos[i]);\n                    if (error)\n                        return \"typeProtos.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates an AttributeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.AttributeProto} AttributeProto\n         */\n        AttributeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.AttributeProto)\n                return object;\n            var message = new $root.onnx.AttributeProto();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.refAttrName != null)\n                message.refAttrName = String(object.refAttrName);\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            switch (object.type) {\n            default:\n                if (typeof object.type === \"number\") {\n                    message.type = object.type;\n                    break;\n                }\n                break;\n            case \"UNDEFINED\":\n            case 0:\n                message.type = 0;\n                break;\n            case \"FLOAT\":\n            case 1:\n                message.type = 1;\n                break;\n            case \"INT\":\n            case 2:\n                message.type = 2;\n                break;\n            case \"STRING\":\n            case 3:\n                message.type = 3;\n                break;\n            case \"TENSOR\":\n            case 4:\n                message.type = 4;\n                break;\n            case \"GRAPH\":\n            case 5:\n                message.type = 5;\n                break;\n            case \"SPARSE_TENSOR\":\n            case 11:\n                message.type = 11;\n                break;\n            case \"TYPE_PROTO\":\n            case 13:\n                message.type = 13;\n                break;\n            case \"FLOATS\":\n            case 6:\n                message.type = 6;\n                break;\n            case \"INTS\":\n            case 7:\n                message.type = 7;\n                break;\n            case \"STRINGS\":\n            case 8:\n                message.type = 8;\n                break;\n            case \"TENSORS\":\n            case 9:\n                message.type = 9;\n                break;\n            case \"GRAPHS\":\n            case 10:\n                message.type = 10;\n                break;\n            case \"SPARSE_TENSORS\":\n            case 12:\n                message.type = 12;\n                break;\n            case \"TYPE_PROTOS\":\n            case 14:\n                message.type = 14;\n                break;\n            }\n            if (object.f != null)\n                message.f = Number(object.f);\n            if (object.i != null)\n                if ($util.Long)\n                    (message.i = $util.Long.fromValue(object.i)).unsigned = false;\n                else if (typeof object.i === \"string\")\n                    message.i = parseInt(object.i, 10);\n                else if (typeof object.i === \"number\")\n                    message.i = object.i;\n                else if (typeof object.i === \"object\")\n                    message.i = new $util.LongBits(object.i.low >>> 0, object.i.high >>> 0).toNumber();\n            if (object.s != null)\n                if (typeof object.s === \"string\")\n                    $util.base64.decode(object.s, message.s = $util.newBuffer($util.base64.length(object.s)), 0);\n                else if (object.s.length >= 0)\n                    message.s = object.s;\n            if (object.t != null) {\n                if (typeof object.t !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.t: object expected\");\n                message.t = $root.onnx.TensorProto.fromObject(object.t);\n            }\n            if (object.g != null) {\n                if (typeof object.g !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.g: object expected\");\n                message.g = $root.onnx.GraphProto.fromObject(object.g);\n            }\n            if (object.sparseTensor != null) {\n                if (typeof object.sparseTensor !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.sparseTensor: object expected\");\n                message.sparseTensor = $root.onnx.SparseTensorProto.fromObject(object.sparseTensor);\n            }\n            if (object.tp != null) {\n                if (typeof object.tp !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.tp: object expected\");\n                message.tp = $root.onnx.TypeProto.fromObject(object.tp);\n            }\n            if (object.floats) {\n                if (!Array.isArray(object.floats))\n                    throw TypeError(\".onnx.AttributeProto.floats: array expected\");\n                message.floats = [];\n                for (var i = 0; i < object.floats.length; ++i)\n                    message.floats[i] = Number(object.floats[i]);\n            }\n            if (object.ints) {\n                if (!Array.isArray(object.ints))\n                    throw TypeError(\".onnx.AttributeProto.ints: array expected\");\n                message.ints = [];\n                for (var i = 0; i < object.ints.length; ++i)\n                    if ($util.Long)\n                        (message.ints[i] = $util.Long.fromValue(object.ints[i])).unsigned = false;\n                    else if (typeof object.ints[i] === \"string\")\n                        message.ints[i] = parseInt(object.ints[i], 10);\n                    else if (typeof object.ints[i] === \"number\")\n                        message.ints[i] = object.ints[i];\n                    else if (typeof object.ints[i] === \"object\")\n                        message.ints[i] = new $util.LongBits(object.ints[i].low >>> 0, object.ints[i].high >>> 0).toNumber();\n            }\n            if (object.strings) {\n                if (!Array.isArray(object.strings))\n                    throw TypeError(\".onnx.AttributeProto.strings: array expected\");\n                message.strings = [];\n                for (var i = 0; i < object.strings.length; ++i)\n                    if (typeof object.strings[i] === \"string\")\n                        $util.base64.decode(object.strings[i], message.strings[i] = $util.newBuffer($util.base64.length(object.strings[i])), 0);\n                    else if (object.strings[i].length >= 0)\n                        message.strings[i] = object.strings[i];\n            }\n            if (object.tensors) {\n                if (!Array.isArray(object.tensors))\n                    throw TypeError(\".onnx.AttributeProto.tensors: array expected\");\n                message.tensors = [];\n                for (var i = 0; i < object.tensors.length; ++i) {\n                    if (typeof object.tensors[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.tensors: object expected\");\n                    message.tensors[i] = $root.onnx.TensorProto.fromObject(object.tensors[i]);\n                }\n            }\n            if (object.graphs) {\n                if (!Array.isArray(object.graphs))\n                    throw TypeError(\".onnx.AttributeProto.graphs: array expected\");\n                message.graphs = [];\n                for (var i = 0; i < object.graphs.length; ++i) {\n                    if (typeof object.graphs[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.graphs: object expected\");\n                    message.graphs[i] = $root.onnx.GraphProto.fromObject(object.graphs[i]);\n                }\n            }\n            if (object.sparseTensors) {\n                if (!Array.isArray(object.sparseTensors))\n                    throw TypeError(\".onnx.AttributeProto.sparseTensors: array expected\");\n                message.sparseTensors = [];\n                for (var i = 0; i < object.sparseTensors.length; ++i) {\n                    if (typeof object.sparseTensors[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.sparseTensors: object expected\");\n                    message.sparseTensors[i] = $root.onnx.SparseTensorProto.fromObject(object.sparseTensors[i]);\n                }\n            }\n            if (object.typeProtos) {\n                if (!Array.isArray(object.typeProtos))\n                    throw TypeError(\".onnx.AttributeProto.typeProtos: array expected\");\n                message.typeProtos = [];\n                for (var i = 0; i < object.typeProtos.length; ++i) {\n                    if (typeof object.typeProtos[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.typeProtos: object expected\");\n                    message.typeProtos[i] = $root.onnx.TypeProto.fromObject(object.typeProtos[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an AttributeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.AttributeProto} message AttributeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        AttributeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.floats = [];\n                object.ints = [];\n                object.strings = [];\n                object.tensors = [];\n                object.graphs = [];\n                object.typeProtos = [];\n                object.sparseTensors = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.f = 0;\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.i = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.i = options.longs === String ? \"0\" : 0;\n                if (options.bytes === String)\n                    object.s = \"\";\n                else {\n                    object.s = [];\n                    if (options.bytes !== Array)\n                        object.s = $util.newBuffer(object.s);\n                }\n                object.t = null;\n                object.g = null;\n                object.docString = \"\";\n                object.tp = null;\n                object.type = options.enums === String ? \"UNDEFINED\" : 0;\n                object.refAttrName = \"\";\n                object.sparseTensor = null;\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                object.f = options.json && !isFinite(message.f) ? String(message.f) : message.f;\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                if (typeof message.i === \"number\")\n                    object.i = options.longs === String ? String(message.i) : message.i;\n                else\n                    object.i = options.longs === String ? $util.Long.prototype.toString.call(message.i) : options.longs === Number ? new $util.LongBits(message.i.low >>> 0, message.i.high >>> 0).toNumber() : message.i;\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                object.s = options.bytes === String ? $util.base64.encode(message.s, 0, message.s.length) : options.bytes === Array ? Array.prototype.slice.call(message.s) : message.s;\n            if (message.t != null && message.hasOwnProperty(\"t\"))\n                object.t = $root.onnx.TensorProto.toObject(message.t, options);\n            if (message.g != null && message.hasOwnProperty(\"g\"))\n                object.g = $root.onnx.GraphProto.toObject(message.g, options);\n            if (message.floats && message.floats.length) {\n                object.floats = [];\n                for (var j = 0; j < message.floats.length; ++j)\n                    object.floats[j] = options.json && !isFinite(message.floats[j]) ? String(message.floats[j]) : message.floats[j];\n            }\n            if (message.ints && message.ints.length) {\n                object.ints = [];\n                for (var j = 0; j < message.ints.length; ++j)\n                    if (typeof message.ints[j] === \"number\")\n                        object.ints[j] = options.longs === String ? String(message.ints[j]) : message.ints[j];\n                    else\n                        object.ints[j] = options.longs === String ? $util.Long.prototype.toString.call(message.ints[j]) : options.longs === Number ? new $util.LongBits(message.ints[j].low >>> 0, message.ints[j].high >>> 0).toNumber() : message.ints[j];\n            }\n            if (message.strings && message.strings.length) {\n                object.strings = [];\n                for (var j = 0; j < message.strings.length; ++j)\n                    object.strings[j] = options.bytes === String ? $util.base64.encode(message.strings[j], 0, message.strings[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.strings[j]) : message.strings[j];\n            }\n            if (message.tensors && message.tensors.length) {\n                object.tensors = [];\n                for (var j = 0; j < message.tensors.length; ++j)\n                    object.tensors[j] = $root.onnx.TensorProto.toObject(message.tensors[j], options);\n            }\n            if (message.graphs && message.graphs.length) {\n                object.graphs = [];\n                for (var j = 0; j < message.graphs.length; ++j)\n                    object.graphs[j] = $root.onnx.GraphProto.toObject(message.graphs[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.tp != null && message.hasOwnProperty(\"tp\"))\n                object.tp = $root.onnx.TypeProto.toObject(message.tp, options);\n            if (message.typeProtos && message.typeProtos.length) {\n                object.typeProtos = [];\n                for (var j = 0; j < message.typeProtos.length; ++j)\n                    object.typeProtos[j] = $root.onnx.TypeProto.toObject(message.typeProtos[j], options);\n            }\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = options.enums === String ? $root.onnx.AttributeProto.AttributeType[message.type] === undefined ? message.type : $root.onnx.AttributeProto.AttributeType[message.type] : message.type;\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                object.refAttrName = message.refAttrName;\n            if (message.sparseTensor != null && message.hasOwnProperty(\"sparseTensor\"))\n                object.sparseTensor = $root.onnx.SparseTensorProto.toObject(message.sparseTensor, options);\n            if (message.sparseTensors && message.sparseTensors.length) {\n                object.sparseTensors = [];\n                for (var j = 0; j < message.sparseTensors.length; ++j)\n                    object.sparseTensors[j] = $root.onnx.SparseTensorProto.toObject(message.sparseTensors[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this AttributeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.AttributeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        AttributeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for AttributeProto\n         * @function getTypeUrl\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        AttributeProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.AttributeProto\";\n        };\n\n        /**\n         * AttributeType enum.\n         * @name onnx.AttributeProto.AttributeType\n         * @enum {number}\n         * @property {number} UNDEFINED=0 UNDEFINED value\n         * @property {number} FLOAT=1 FLOAT value\n         * @property {number} INT=2 INT value\n         * @property {number} STRING=3 STRING value\n         * @property {number} TENSOR=4 TENSOR value\n         * @property {number} GRAPH=5 GRAPH value\n         * @property {number} SPARSE_TENSOR=11 SPARSE_TENSOR value\n         * @property {number} TYPE_PROTO=13 TYPE_PROTO value\n         * @property {number} FLOATS=6 FLOATS value\n         * @property {number} INTS=7 INTS value\n         * @property {number} STRINGS=8 STRINGS value\n         * @property {number} TENSORS=9 TENSORS value\n         * @property {number} GRAPHS=10 GRAPHS value\n         * @property {number} SPARSE_TENSORS=12 SPARSE_TENSORS value\n         * @property {number} TYPE_PROTOS=14 TYPE_PROTOS value\n         */\n        AttributeProto.AttributeType = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"UNDEFINED\"] = 0;\n            values[valuesById[1] = \"FLOAT\"] = 1;\n            values[valuesById[2] = \"INT\"] = 2;\n            values[valuesById[3] = \"STRING\"] = 3;\n            values[valuesById[4] = \"TENSOR\"] = 4;\n            values[valuesById[5] = \"GRAPH\"] = 5;\n            values[valuesById[11] = \"SPARSE_TENSOR\"] = 11;\n            values[valuesById[13] = \"TYPE_PROTO\"] = 13;\n            values[valuesById[6] = \"FLOATS\"] = 6;\n            values[valuesById[7] = \"INTS\"] = 7;\n            values[valuesById[8] = \"STRINGS\"] = 8;\n            values[valuesById[9] = \"TENSORS\"] = 9;\n            values[valuesById[10] = \"GRAPHS\"] = 10;\n            values[valuesById[12] = \"SPARSE_TENSORS\"] = 12;\n            values[valuesById[14] = \"TYPE_PROTOS\"] = 14;\n            return values;\n        })();\n\n        return AttributeProto;\n    })();\n\n    onnx.ValueInfoProto = (function() {\n\n        /**\n         * Properties of a ValueInfoProto.\n         * @memberof onnx\n         * @interface IValueInfoProto\n         * @property {string|null} [name] ValueInfoProto name\n         * @property {onnx.ITypeProto|null} [type] ValueInfoProto type\n         * @property {string|null} [docString] ValueInfoProto docString\n         */\n\n        /**\n         * Constructs a new ValueInfoProto.\n         * @memberof onnx\n         * @classdesc Represents a ValueInfoProto.\n         * @implements IValueInfoProto\n         * @constructor\n         * @param {onnx.IValueInfoProto=} [properties] Properties to set\n         */\n        function ValueInfoProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ValueInfoProto name.\n         * @member {string} name\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.name = \"\";\n\n        /**\n         * ValueInfoProto type.\n         * @member {onnx.ITypeProto|null|undefined} type\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.type = null;\n\n        /**\n         * ValueInfoProto docString.\n         * @member {string} docString\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.docString = \"\";\n\n        /**\n         * Creates a new ValueInfoProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto=} [properties] Properties to set\n         * @returns {onnx.ValueInfoProto} ValueInfoProto instance\n         */\n        ValueInfoProto.create = function create(properties) {\n            return new ValueInfoProto(properties);\n        };\n\n        /**\n         * Encodes the specified ValueInfoProto message. Does not implicitly {@link onnx.ValueInfoProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto} message ValueInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ValueInfoProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.type != null && Object.hasOwnProperty.call(message, \"type\"))\n                $root.onnx.TypeProto.encode(message.type, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.docString != null && Object.hasOwnProperty.call(message, \"docString\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.docString);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ValueInfoProto message, length delimited. Does not implicitly {@link onnx.ValueInfoProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto} message ValueInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ValueInfoProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ValueInfoProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ValueInfoProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.ValueInfoProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.name = reader.string();\n                        break;\n                    }\n                case 2: {\n                        message.type = $root.onnx.TypeProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 3: {\n                        message.docString = reader.string();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ValueInfoProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ValueInfoProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ValueInfoProto message.\n         * @function verify\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ValueInfoProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.type != null && message.hasOwnProperty(\"type\")) {\n                var error = $root.onnx.TypeProto.verify(message.type);\n                if (error)\n                    return \"type.\" + error;\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ValueInfoProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         */\n        ValueInfoProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.ValueInfoProto)\n                return object;\n            var message = new $root.onnx.ValueInfoProto();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.type != null) {\n                if (typeof object.type !== \"object\")\n                    throw TypeError(\".onnx.ValueInfoProto.type: object expected\");\n                message.type = $root.onnx.TypeProto.fromObject(object.type);\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ValueInfoProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.ValueInfoProto} message ValueInfoProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ValueInfoProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.name = \"\";\n                object.type = null;\n                object.docString = \"\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = $root.onnx.TypeProto.toObject(message.type, options);\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            return object;\n        };\n\n        /**\n         * Converts this ValueInfoProto to JSON.\n         * @function toJSON\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ValueInfoProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for ValueInfoProto\n         * @function getTypeUrl\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        ValueInfoProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.ValueInfoProto\";\n        };\n\n        return ValueInfoProto;\n    })();\n\n    onnx.NodeProto = (function() {\n\n        /**\n         * Properties of a NodeProto.\n         * @memberof onnx\n         * @interface INodeProto\n         * @property {Array.<string>|null} [input] NodeProto input\n         * @property {Array.<string>|null} [output] NodeProto output\n         * @property {string|null} [name] NodeProto name\n         * @property {string|null} [opType] NodeProto opType\n         * @property {string|null} [domain] NodeProto domain\n         * @property {Array.<onnx.IAttributeProto>|null} [attribute] NodeProto attribute\n         * @property {string|null} [docString] NodeProto docString\n         */\n\n        /**\n         * Constructs a new NodeProto.\n         * @memberof onnx\n         * @classdesc Represents a NodeProto.\n         * @implements INodeProto\n         * @constructor\n         * @param {onnx.INodeProto=} [properties] Properties to set\n         */\n        function NodeProto(properties) {\n            this.input = [];\n            this.output = [];\n            this.attribute = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * NodeProto input.\n         * @member {Array.<string>} input\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.input = $util.emptyArray;\n\n        /**\n         * NodeProto output.\n         * @member {Array.<string>} output\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.output = $util.emptyArray;\n\n        /**\n         * NodeProto name.\n         * @member {string} name\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.name = \"\";\n\n        /**\n         * NodeProto opType.\n         * @member {string} opType\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.opType = \"\";\n\n        /**\n         * NodeProto domain.\n         * @member {string} domain\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.domain = \"\";\n\n        /**\n         * NodeProto attribute.\n         * @member {Array.<onnx.IAttributeProto>} attribute\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.attribute = $util.emptyArray;\n\n        /**\n         * NodeProto docString.\n         * @member {string} docString\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.docString = \"\";\n\n        /**\n         * Creates a new NodeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto=} [properties] Properties to set\n         * @returns {onnx.NodeProto} NodeProto instance\n         */\n        NodeProto.create = function create(properties) {\n            return new NodeProto(properties);\n        };\n\n        /**\n         * Encodes the specified NodeProto message. Does not implicitly {@link onnx.NodeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto} message NodeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        NodeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.input != null && message.input.length)\n                for (var i = 0; i < message.input.length; ++i)\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.input[i]);\n            if (message.output != null && message.output.length)\n                for (var i = 0; i < message.output.length; ++i)\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.output[i]);\n            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);\n            if (message.opType != null && Object.hasOwnProperty.call(message, \"opType\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.opType);\n            if (message.attribute != null && message.attribute.length)\n                for (var i = 0; i < message.attribute.length; ++i)\n                    $root.onnx.AttributeProto.encode(message.attribute[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.docString != null && Object.hasOwnProperty.call(message, \"docString\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.docString);\n            if (message.domain != null && Object.hasOwnProperty.call(message, \"domain\"))\n                writer.uint32(/* id 7, wireType 2 =*/58).string(message.domain);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified NodeProto message, length delimited. Does not implicitly {@link onnx.NodeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto} message NodeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        NodeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a NodeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.NodeProto} NodeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        NodeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.NodeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        if (!(message.input && message.input.length))\n                            message.input = [];\n                        message.input.push(reader.string());\n                        break;\n                    }\n                case 2: {\n                        if (!(message.output && message.output.length))\n                            message.output = [];\n                        message.output.push(reader.string());\n                        break;\n                    }\n                case 3: {\n                        message.name = reader.string();\n                        break;\n                    }\n                case 4: {\n                        message.opType = reader.string();\n                        break;\n                    }\n                case 7: {\n                        message.domain = reader.string();\n                        break;\n                    }\n                case 5: {\n                        if (!(message.attribute && message.attribute.length))\n                            message.attribute = [];\n                        message.attribute.push($root.onnx.AttributeProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 6: {\n                        message.docString = reader.string();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a NodeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.NodeProto} NodeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        NodeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a NodeProto message.\n         * @function verify\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        NodeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.input != null && message.hasOwnProperty(\"input\")) {\n                if (!Array.isArray(message.input))\n                    return \"input: array expected\";\n                for (var i = 0; i < message.input.length; ++i)\n                    if (!$util.isString(message.input[i]))\n                        return \"input: string[] expected\";\n            }\n            if (message.output != null && message.hasOwnProperty(\"output\")) {\n                if (!Array.isArray(message.output))\n                    return \"output: array expected\";\n                for (var i = 0; i < message.output.length; ++i)\n                    if (!$util.isString(message.output[i]))\n                        return \"output: string[] expected\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                if (!$util.isString(message.opType))\n                    return \"opType: string expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.attribute != null && message.hasOwnProperty(\"attribute\")) {\n                if (!Array.isArray(message.attribute))\n                    return \"attribute: array expected\";\n                for (var i = 0; i < message.attribute.length; ++i) {\n                    var error = $root.onnx.AttributeProto.verify(message.attribute[i]);\n                    if (error)\n                        return \"attribute.\" + error;\n                }\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a NodeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.NodeProto} NodeProto\n         */\n        NodeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.NodeProto)\n                return object;\n            var message = new $root.onnx.NodeProto();\n            if (object.input) {\n                if (!Array.isArray(object.input))\n                    throw TypeError(\".onnx.NodeProto.input: array expected\");\n                message.input = [];\n                for (var i = 0; i < object.input.length; ++i)\n                    message.input[i] = String(object.input[i]);\n            }\n            if (object.output) {\n                if (!Array.isArray(object.output))\n                    throw TypeError(\".onnx.NodeProto.output: array expected\");\n                message.output = [];\n                for (var i = 0; i < object.output.length; ++i)\n                    message.output[i] = String(object.output[i]);\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.opType != null)\n                message.opType = String(object.opType);\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.attribute) {\n                if (!Array.isArray(object.attribute))\n                    throw TypeError(\".onnx.NodeProto.attribute: array expected\");\n                message.attribute = [];\n                for (var i = 0; i < object.attribute.length; ++i) {\n                    if (typeof object.attribute[i] !== \"object\")\n                        throw TypeError(\".onnx.NodeProto.attribute: object expected\");\n                    message.attribute[i] = $root.onnx.AttributeProto.fromObject(object.attribute[i]);\n                }\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a NodeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.NodeProto} message NodeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        NodeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.input = [];\n                object.output = [];\n                object.attribute = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.opType = \"\";\n                object.docString = \"\";\n                object.domain = \"\";\n            }\n            if (message.input && message.input.length) {\n                object.input = [];\n                for (var j = 0; j < message.input.length; ++j)\n                    object.input[j] = message.input[j];\n            }\n            if (message.output && message.output.length) {\n                object.output = [];\n                for (var j = 0; j < message.output.length; ++j)\n                    object.output[j] = message.output[j];\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                object.opType = message.opType;\n            if (message.attribute && message.attribute.length) {\n                object.attribute = [];\n                for (var j = 0; j < message.attribute.length; ++j)\n                    object.attribute[j] = $root.onnx.AttributeProto.toObject(message.attribute[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            return object;\n        };\n\n        /**\n         * Converts this NodeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.NodeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        NodeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for NodeProto\n         * @function getTypeUrl\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        NodeProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.NodeProto\";\n        };\n\n        return NodeProto;\n    })();\n\n    onnx.TrainingInfoProto = (function() {\n\n        /**\n         * Properties of a TrainingInfoProto.\n         * @memberof onnx\n         * @interface ITrainingInfoProto\n         * @property {onnx.IGraphProto|null} [initialization] TrainingInfoProto initialization\n         * @property {onnx.IGraphProto|null} [algorithm] TrainingInfoProto algorithm\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [initializationBinding] TrainingInfoProto initializationBinding\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [updateBinding] TrainingInfoProto updateBinding\n         */\n\n        /**\n         * Constructs a new TrainingInfoProto.\n         * @memberof onnx\n         * @classdesc Represents a TrainingInfoProto.\n         * @implements ITrainingInfoProto\n         * @constructor\n         * @param {onnx.ITrainingInfoProto=} [properties] Properties to set\n         */\n        function TrainingInfoProto(properties) {\n            this.initializationBinding = [];\n            this.updateBinding = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TrainingInfoProto initialization.\n         * @member {onnx.IGraphProto|null|undefined} initialization\n         * @memberof onnx.TrainingInfoProto\n         * @instance\n         */\n        TrainingInfoProto.prototype.initialization = null;\n\n        /**\n         * TrainingInfoProto algorithm.\n         * @member {onnx.IGraphProto|null|undefined} algorithm\n         * @memberof onnx.TrainingInfoProto\n         * @instance\n         */\n        TrainingInfoProto.prototype.algorithm = null;\n\n        /**\n         * TrainingInfoProto initializationBinding.\n         * @member {Array.<onnx.IStringStringEntryProto>} initializationBinding\n         * @memberof onnx.TrainingInfoProto\n         * @instance\n         */\n        TrainingInfoProto.prototype.initializationBinding = $util.emptyArray;\n\n        /**\n         * TrainingInfoProto updateBinding.\n         * @member {Array.<onnx.IStringStringEntryProto>} updateBinding\n         * @memberof onnx.TrainingInfoProto\n         * @instance\n         */\n        TrainingInfoProto.prototype.updateBinding = $util.emptyArray;\n\n        /**\n         * Creates a new TrainingInfoProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TrainingInfoProto\n         * @static\n         * @param {onnx.ITrainingInfoProto=} [properties] Properties to set\n         * @returns {onnx.TrainingInfoProto} TrainingInfoProto instance\n         */\n        TrainingInfoProto.create = function create(properties) {\n            return new TrainingInfoProto(properties);\n        };\n\n        /**\n         * Encodes the specified TrainingInfoProto message. Does not implicitly {@link onnx.TrainingInfoProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TrainingInfoProto\n         * @static\n         * @param {onnx.ITrainingInfoProto} message TrainingInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TrainingInfoProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.initialization != null && Object.hasOwnProperty.call(message, \"initialization\"))\n                $root.onnx.GraphProto.encode(message.initialization, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.algorithm != null && Object.hasOwnProperty.call(message, \"algorithm\"))\n                $root.onnx.GraphProto.encode(message.algorithm, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.initializationBinding != null && message.initializationBinding.length)\n                for (var i = 0; i < message.initializationBinding.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.initializationBinding[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            if (message.updateBinding != null && message.updateBinding.length)\n                for (var i = 0; i < message.updateBinding.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.updateBinding[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TrainingInfoProto message, length delimited. Does not implicitly {@link onnx.TrainingInfoProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TrainingInfoProto\n         * @static\n         * @param {onnx.ITrainingInfoProto} message TrainingInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TrainingInfoProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TrainingInfoProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TrainingInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TrainingInfoProto} TrainingInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TrainingInfoProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TrainingInfoProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.initialization = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 2: {\n                        message.algorithm = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 3: {\n                        if (!(message.initializationBinding && message.initializationBinding.length))\n                            message.initializationBinding = [];\n                        message.initializationBinding.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 4: {\n                        if (!(message.updateBinding && message.updateBinding.length))\n                            message.updateBinding = [];\n                        message.updateBinding.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TrainingInfoProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TrainingInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TrainingInfoProto} TrainingInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TrainingInfoProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TrainingInfoProto message.\n         * @function verify\n         * @memberof onnx.TrainingInfoProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TrainingInfoProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.initialization != null && message.hasOwnProperty(\"initialization\")) {\n                var error = $root.onnx.GraphProto.verify(message.initialization);\n                if (error)\n                    return \"initialization.\" + error;\n            }\n            if (message.algorithm != null && message.hasOwnProperty(\"algorithm\")) {\n                var error = $root.onnx.GraphProto.verify(message.algorithm);\n                if (error)\n                    return \"algorithm.\" + error;\n            }\n            if (message.initializationBinding != null && message.hasOwnProperty(\"initializationBinding\")) {\n                if (!Array.isArray(message.initializationBinding))\n                    return \"initializationBinding: array expected\";\n                for (var i = 0; i < message.initializationBinding.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.initializationBinding[i]);\n                    if (error)\n                        return \"initializationBinding.\" + error;\n                }\n            }\n            if (message.updateBinding != null && message.hasOwnProperty(\"updateBinding\")) {\n                if (!Array.isArray(message.updateBinding))\n                    return \"updateBinding: array expected\";\n                for (var i = 0; i < message.updateBinding.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.updateBinding[i]);\n                    if (error)\n                        return \"updateBinding.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TrainingInfoProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TrainingInfoProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TrainingInfoProto} TrainingInfoProto\n         */\n        TrainingInfoProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TrainingInfoProto)\n                return object;\n            var message = new $root.onnx.TrainingInfoProto();\n            if (object.initialization != null) {\n                if (typeof object.initialization !== \"object\")\n                    throw TypeError(\".onnx.TrainingInfoProto.initialization: object expected\");\n                message.initialization = $root.onnx.GraphProto.fromObject(object.initialization);\n            }\n            if (object.algorithm != null) {\n                if (typeof object.algorithm !== \"object\")\n                    throw TypeError(\".onnx.TrainingInfoProto.algorithm: object expected\");\n                message.algorithm = $root.onnx.GraphProto.fromObject(object.algorithm);\n            }\n            if (object.initializationBinding) {\n                if (!Array.isArray(object.initializationBinding))\n                    throw TypeError(\".onnx.TrainingInfoProto.initializationBinding: array expected\");\n                message.initializationBinding = [];\n                for (var i = 0; i < object.initializationBinding.length; ++i) {\n                    if (typeof object.initializationBinding[i] !== \"object\")\n                        throw TypeError(\".onnx.TrainingInfoProto.initializationBinding: object expected\");\n                    message.initializationBinding[i] = $root.onnx.StringStringEntryProto.fromObject(object.initializationBinding[i]);\n                }\n            }\n            if (object.updateBinding) {\n                if (!Array.isArray(object.updateBinding))\n                    throw TypeError(\".onnx.TrainingInfoProto.updateBinding: array expected\");\n                message.updateBinding = [];\n                for (var i = 0; i < object.updateBinding.length; ++i) {\n                    if (typeof object.updateBinding[i] !== \"object\")\n                        throw TypeError(\".onnx.TrainingInfoProto.updateBinding: object expected\");\n                    message.updateBinding[i] = $root.onnx.StringStringEntryProto.fromObject(object.updateBinding[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TrainingInfoProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TrainingInfoProto\n         * @static\n         * @param {onnx.TrainingInfoProto} message TrainingInfoProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TrainingInfoProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.initializationBinding = [];\n                object.updateBinding = [];\n            }\n            if (options.defaults) {\n                object.initialization = null;\n                object.algorithm = null;\n            }\n            if (message.initialization != null && message.hasOwnProperty(\"initialization\"))\n                object.initialization = $root.onnx.GraphProto.toObject(message.initialization, options);\n            if (message.algorithm != null && message.hasOwnProperty(\"algorithm\"))\n                object.algorithm = $root.onnx.GraphProto.toObject(message.algorithm, options);\n            if (message.initializationBinding && message.initializationBinding.length) {\n                object.initializationBinding = [];\n                for (var j = 0; j < message.initializationBinding.length; ++j)\n                    object.initializationBinding[j] = $root.onnx.StringStringEntryProto.toObject(message.initializationBinding[j], options);\n            }\n            if (message.updateBinding && message.updateBinding.length) {\n                object.updateBinding = [];\n                for (var j = 0; j < message.updateBinding.length; ++j)\n                    object.updateBinding[j] = $root.onnx.StringStringEntryProto.toObject(message.updateBinding[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TrainingInfoProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TrainingInfoProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TrainingInfoProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for TrainingInfoProto\n         * @function getTypeUrl\n         * @memberof onnx.TrainingInfoProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        TrainingInfoProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.TrainingInfoProto\";\n        };\n\n        return TrainingInfoProto;\n    })();\n\n    onnx.ModelProto = (function() {\n\n        /**\n         * Properties of a ModelProto.\n         * @memberof onnx\n         * @interface IModelProto\n         * @property {number|Long|null} [irVersion] ModelProto irVersion\n         * @property {Array.<onnx.IOperatorSetIdProto>|null} [opsetImport] ModelProto opsetImport\n         * @property {string|null} [producerName] ModelProto producerName\n         * @property {string|null} [producerVersion] ModelProto producerVersion\n         * @property {string|null} [domain] ModelProto domain\n         * @property {number|Long|null} [modelVersion] ModelProto modelVersion\n         * @property {string|null} [docString] ModelProto docString\n         * @property {onnx.IGraphProto|null} [graph] ModelProto graph\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [metadataProps] ModelProto metadataProps\n         * @property {Array.<onnx.ITrainingInfoProto>|null} [trainingInfo] ModelProto trainingInfo\n         * @property {Array.<onnx.IFunctionProto>|null} [functions] ModelProto functions\n         */\n\n        /**\n         * Constructs a new ModelProto.\n         * @memberof onnx\n         * @classdesc Represents a ModelProto.\n         * @implements IModelProto\n         * @constructor\n         * @param {onnx.IModelProto=} [properties] Properties to set\n         */\n        function ModelProto(properties) {\n            this.opsetImport = [];\n            this.metadataProps = [];\n            this.trainingInfo = [];\n            this.functions = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ModelProto irVersion.\n         * @member {number|Long} irVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.irVersion = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * ModelProto opsetImport.\n         * @member {Array.<onnx.IOperatorSetIdProto>} opsetImport\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.opsetImport = $util.emptyArray;\n\n        /**\n         * ModelProto producerName.\n         * @member {string} producerName\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.producerName = \"\";\n\n        /**\n         * ModelProto producerVersion.\n         * @member {string} producerVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.producerVersion = \"\";\n\n        /**\n         * ModelProto domain.\n         * @member {string} domain\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.domain = \"\";\n\n        /**\n         * ModelProto modelVersion.\n         * @member {number|Long} modelVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.modelVersion = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * ModelProto docString.\n         * @member {string} docString\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.docString = \"\";\n\n        /**\n         * ModelProto graph.\n         * @member {onnx.IGraphProto|null|undefined} graph\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.graph = null;\n\n        /**\n         * ModelProto metadataProps.\n         * @member {Array.<onnx.IStringStringEntryProto>} metadataProps\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.metadataProps = $util.emptyArray;\n\n        /**\n         * ModelProto trainingInfo.\n         * @member {Array.<onnx.ITrainingInfoProto>} trainingInfo\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.trainingInfo = $util.emptyArray;\n\n        /**\n         * ModelProto functions.\n         * @member {Array.<onnx.IFunctionProto>} functions\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.functions = $util.emptyArray;\n\n        /**\n         * Creates a new ModelProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto=} [properties] Properties to set\n         * @returns {onnx.ModelProto} ModelProto instance\n         */\n        ModelProto.create = function create(properties) {\n            return new ModelProto(properties);\n        };\n\n        /**\n         * Encodes the specified ModelProto message. Does not implicitly {@link onnx.ModelProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto} message ModelProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ModelProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.irVersion != null && Object.hasOwnProperty.call(message, \"irVersion\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.irVersion);\n            if (message.producerName != null && Object.hasOwnProperty.call(message, \"producerName\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.producerName);\n            if (message.producerVersion != null && Object.hasOwnProperty.call(message, \"producerVersion\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.producerVersion);\n            if (message.domain != null && Object.hasOwnProperty.call(message, \"domain\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.domain);\n            if (message.modelVersion != null && Object.hasOwnProperty.call(message, \"modelVersion\"))\n                writer.uint32(/* id 5, wireType 0 =*/40).int64(message.modelVersion);\n            if (message.docString != null && Object.hasOwnProperty.call(message, \"docString\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.docString);\n            if (message.graph != null && Object.hasOwnProperty.call(message, \"graph\"))\n                $root.onnx.GraphProto.encode(message.graph, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n            if (message.opsetImport != null && message.opsetImport.length)\n                for (var i = 0; i < message.opsetImport.length; ++i)\n                    $root.onnx.OperatorSetIdProto.encode(message.opsetImport[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\n            if (message.metadataProps != null && message.metadataProps.length)\n                for (var i = 0; i < message.metadataProps.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.metadataProps[i], writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n            if (message.trainingInfo != null && message.trainingInfo.length)\n                for (var i = 0; i < message.trainingInfo.length; ++i)\n                    $root.onnx.TrainingInfoProto.encode(message.trainingInfo[i], writer.uint32(/* id 20, wireType 2 =*/162).fork()).ldelim();\n            if (message.functions != null && message.functions.length)\n                for (var i = 0; i < message.functions.length; ++i)\n                    $root.onnx.FunctionProto.encode(message.functions[i], writer.uint32(/* id 25, wireType 2 =*/202).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ModelProto message, length delimited. Does not implicitly {@link onnx.ModelProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto} message ModelProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ModelProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ModelProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.ModelProto} ModelProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ModelProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.ModelProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.irVersion = reader.int64();\n                        break;\n                    }\n                case 8: {\n                        if (!(message.opsetImport && message.opsetImport.length))\n                            message.opsetImport = [];\n                        message.opsetImport.push($root.onnx.OperatorSetIdProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 2: {\n                        message.producerName = reader.string();\n                        break;\n                    }\n                case 3: {\n                        message.producerVersion = reader.string();\n                        break;\n                    }\n                case 4: {\n                        message.domain = reader.string();\n                        break;\n                    }\n                case 5: {\n                        message.modelVersion = reader.int64();\n                        break;\n                    }\n                case 6: {\n                        message.docString = reader.string();\n                        break;\n                    }\n                case 7: {\n                        message.graph = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 14: {\n                        if (!(message.metadataProps && message.metadataProps.length))\n                            message.metadataProps = [];\n                        message.metadataProps.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 20: {\n                        if (!(message.trainingInfo && message.trainingInfo.length))\n                            message.trainingInfo = [];\n                        message.trainingInfo.push($root.onnx.TrainingInfoProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 25: {\n                        if (!(message.functions && message.functions.length))\n                            message.functions = [];\n                        message.functions.push($root.onnx.FunctionProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ModelProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.ModelProto} ModelProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ModelProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ModelProto message.\n         * @function verify\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ModelProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                if (!$util.isInteger(message.irVersion) && !(message.irVersion && $util.isInteger(message.irVersion.low) && $util.isInteger(message.irVersion.high)))\n                    return \"irVersion: integer|Long expected\";\n            if (message.opsetImport != null && message.hasOwnProperty(\"opsetImport\")) {\n                if (!Array.isArray(message.opsetImport))\n                    return \"opsetImport: array expected\";\n                for (var i = 0; i < message.opsetImport.length; ++i) {\n                    var error = $root.onnx.OperatorSetIdProto.verify(message.opsetImport[i]);\n                    if (error)\n                        return \"opsetImport.\" + error;\n                }\n            }\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                if (!$util.isString(message.producerName))\n                    return \"producerName: string expected\";\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                if (!$util.isString(message.producerVersion))\n                    return \"producerVersion: string expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                if (!$util.isInteger(message.modelVersion) && !(message.modelVersion && $util.isInteger(message.modelVersion.low) && $util.isInteger(message.modelVersion.high)))\n                    return \"modelVersion: integer|Long expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.graph != null && message.hasOwnProperty(\"graph\")) {\n                var error = $root.onnx.GraphProto.verify(message.graph);\n                if (error)\n                    return \"graph.\" + error;\n            }\n            if (message.metadataProps != null && message.hasOwnProperty(\"metadataProps\")) {\n                if (!Array.isArray(message.metadataProps))\n                    return \"metadataProps: array expected\";\n                for (var i = 0; i < message.metadataProps.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.metadataProps[i]);\n                    if (error)\n                        return \"metadataProps.\" + error;\n                }\n            }\n            if (message.trainingInfo != null && message.hasOwnProperty(\"trainingInfo\")) {\n                if (!Array.isArray(message.trainingInfo))\n                    return \"trainingInfo: array expected\";\n                for (var i = 0; i < message.trainingInfo.length; ++i) {\n                    var error = $root.onnx.TrainingInfoProto.verify(message.trainingInfo[i]);\n                    if (error)\n                        return \"trainingInfo.\" + error;\n                }\n            }\n            if (message.functions != null && message.hasOwnProperty(\"functions\")) {\n                if (!Array.isArray(message.functions))\n                    return \"functions: array expected\";\n                for (var i = 0; i < message.functions.length; ++i) {\n                    var error = $root.onnx.FunctionProto.verify(message.functions[i]);\n                    if (error)\n                        return \"functions.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a ModelProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.ModelProto} ModelProto\n         */\n        ModelProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.ModelProto)\n                return object;\n            var message = new $root.onnx.ModelProto();\n            if (object.irVersion != null)\n                if ($util.Long)\n                    (message.irVersion = $util.Long.fromValue(object.irVersion)).unsigned = false;\n                else if (typeof object.irVersion === \"string\")\n                    message.irVersion = parseInt(object.irVersion, 10);\n                else if (typeof object.irVersion === \"number\")\n                    message.irVersion = object.irVersion;\n                else if (typeof object.irVersion === \"object\")\n                    message.irVersion = new $util.LongBits(object.irVersion.low >>> 0, object.irVersion.high >>> 0).toNumber();\n            if (object.opsetImport) {\n                if (!Array.isArray(object.opsetImport))\n                    throw TypeError(\".onnx.ModelProto.opsetImport: array expected\");\n                message.opsetImport = [];\n                for (var i = 0; i < object.opsetImport.length; ++i) {\n                    if (typeof object.opsetImport[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.opsetImport: object expected\");\n                    message.opsetImport[i] = $root.onnx.OperatorSetIdProto.fromObject(object.opsetImport[i]);\n                }\n            }\n            if (object.producerName != null)\n                message.producerName = String(object.producerName);\n            if (object.producerVersion != null)\n                message.producerVersion = String(object.producerVersion);\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.modelVersion != null)\n                if ($util.Long)\n                    (message.modelVersion = $util.Long.fromValue(object.modelVersion)).unsigned = false;\n                else if (typeof object.modelVersion === \"string\")\n                    message.modelVersion = parseInt(object.modelVersion, 10);\n                else if (typeof object.modelVersion === \"number\")\n                    message.modelVersion = object.modelVersion;\n                else if (typeof object.modelVersion === \"object\")\n                    message.modelVersion = new $util.LongBits(object.modelVersion.low >>> 0, object.modelVersion.high >>> 0).toNumber();\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.graph != null) {\n                if (typeof object.graph !== \"object\")\n                    throw TypeError(\".onnx.ModelProto.graph: object expected\");\n                message.graph = $root.onnx.GraphProto.fromObject(object.graph);\n            }\n            if (object.metadataProps) {\n                if (!Array.isArray(object.metadataProps))\n                    throw TypeError(\".onnx.ModelProto.metadataProps: array expected\");\n                message.metadataProps = [];\n                for (var i = 0; i < object.metadataProps.length; ++i) {\n                    if (typeof object.metadataProps[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.metadataProps: object expected\");\n                    message.metadataProps[i] = $root.onnx.StringStringEntryProto.fromObject(object.metadataProps[i]);\n                }\n            }\n            if (object.trainingInfo) {\n                if (!Array.isArray(object.trainingInfo))\n                    throw TypeError(\".onnx.ModelProto.trainingInfo: array expected\");\n                message.trainingInfo = [];\n                for (var i = 0; i < object.trainingInfo.length; ++i) {\n                    if (typeof object.trainingInfo[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.trainingInfo: object expected\");\n                    message.trainingInfo[i] = $root.onnx.TrainingInfoProto.fromObject(object.trainingInfo[i]);\n                }\n            }\n            if (object.functions) {\n                if (!Array.isArray(object.functions))\n                    throw TypeError(\".onnx.ModelProto.functions: array expected\");\n                message.functions = [];\n                for (var i = 0; i < object.functions.length; ++i) {\n                    if (typeof object.functions[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.functions: object expected\");\n                    message.functions[i] = $root.onnx.FunctionProto.fromObject(object.functions[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ModelProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.ModelProto} message ModelProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ModelProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.opsetImport = [];\n                object.metadataProps = [];\n                object.trainingInfo = [];\n                object.functions = [];\n            }\n            if (options.defaults) {\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.irVersion = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.irVersion = options.longs === String ? \"0\" : 0;\n                object.producerName = \"\";\n                object.producerVersion = \"\";\n                object.domain = \"\";\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.modelVersion = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.modelVersion = options.longs === String ? \"0\" : 0;\n                object.docString = \"\";\n                object.graph = null;\n            }\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                if (typeof message.irVersion === \"number\")\n                    object.irVersion = options.longs === String ? String(message.irVersion) : message.irVersion;\n                else\n                    object.irVersion = options.longs === String ? $util.Long.prototype.toString.call(message.irVersion) : options.longs === Number ? new $util.LongBits(message.irVersion.low >>> 0, message.irVersion.high >>> 0).toNumber() : message.irVersion;\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                object.producerName = message.producerName;\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                object.producerVersion = message.producerVersion;\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                if (typeof message.modelVersion === \"number\")\n                    object.modelVersion = options.longs === String ? String(message.modelVersion) : message.modelVersion;\n                else\n                    object.modelVersion = options.longs === String ? $util.Long.prototype.toString.call(message.modelVersion) : options.longs === Number ? new $util.LongBits(message.modelVersion.low >>> 0, message.modelVersion.high >>> 0).toNumber() : message.modelVersion;\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.graph != null && message.hasOwnProperty(\"graph\"))\n                object.graph = $root.onnx.GraphProto.toObject(message.graph, options);\n            if (message.opsetImport && message.opsetImport.length) {\n                object.opsetImport = [];\n                for (var j = 0; j < message.opsetImport.length; ++j)\n                    object.opsetImport[j] = $root.onnx.OperatorSetIdProto.toObject(message.opsetImport[j], options);\n            }\n            if (message.metadataProps && message.metadataProps.length) {\n                object.metadataProps = [];\n                for (var j = 0; j < message.metadataProps.length; ++j)\n                    object.metadataProps[j] = $root.onnx.StringStringEntryProto.toObject(message.metadataProps[j], options);\n            }\n            if (message.trainingInfo && message.trainingInfo.length) {\n                object.trainingInfo = [];\n                for (var j = 0; j < message.trainingInfo.length; ++j)\n                    object.trainingInfo[j] = $root.onnx.TrainingInfoProto.toObject(message.trainingInfo[j], options);\n            }\n            if (message.functions && message.functions.length) {\n                object.functions = [];\n                for (var j = 0; j < message.functions.length; ++j)\n                    object.functions[j] = $root.onnx.FunctionProto.toObject(message.functions[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this ModelProto to JSON.\n         * @function toJSON\n         * @memberof onnx.ModelProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ModelProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for ModelProto\n         * @function getTypeUrl\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        ModelProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.ModelProto\";\n        };\n\n        return ModelProto;\n    })();\n\n    onnx.StringStringEntryProto = (function() {\n\n        /**\n         * Properties of a StringStringEntryProto.\n         * @memberof onnx\n         * @interface IStringStringEntryProto\n         * @property {string|null} [key] StringStringEntryProto key\n         * @property {string|null} [value] StringStringEntryProto value\n         */\n\n        /**\n         * Constructs a new StringStringEntryProto.\n         * @memberof onnx\n         * @classdesc Represents a StringStringEntryProto.\n         * @implements IStringStringEntryProto\n         * @constructor\n         * @param {onnx.IStringStringEntryProto=} [properties] Properties to set\n         */\n        function StringStringEntryProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * StringStringEntryProto key.\n         * @member {string} key\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         */\n        StringStringEntryProto.prototype.key = \"\";\n\n        /**\n         * StringStringEntryProto value.\n         * @member {string} value\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         */\n        StringStringEntryProto.prototype.value = \"\";\n\n        /**\n         * Creates a new StringStringEntryProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto=} [properties] Properties to set\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto instance\n         */\n        StringStringEntryProto.create = function create(properties) {\n            return new StringStringEntryProto(properties);\n        };\n\n        /**\n         * Encodes the specified StringStringEntryProto message. Does not implicitly {@link onnx.StringStringEntryProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto} message StringStringEntryProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        StringStringEntryProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.key != null && Object.hasOwnProperty.call(message, \"key\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.key);\n            if (message.value != null && Object.hasOwnProperty.call(message, \"value\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.value);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified StringStringEntryProto message, length delimited. Does not implicitly {@link onnx.StringStringEntryProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto} message StringStringEntryProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        StringStringEntryProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a StringStringEntryProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        StringStringEntryProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.StringStringEntryProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.key = reader.string();\n                        break;\n                    }\n                case 2: {\n                        message.value = reader.string();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a StringStringEntryProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        StringStringEntryProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a StringStringEntryProto message.\n         * @function verify\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        StringStringEntryProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                if (!$util.isString(message.key))\n                    return \"key: string expected\";\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                if (!$util.isString(message.value))\n                    return \"value: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a StringStringEntryProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         */\n        StringStringEntryProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.StringStringEntryProto)\n                return object;\n            var message = new $root.onnx.StringStringEntryProto();\n            if (object.key != null)\n                message.key = String(object.key);\n            if (object.value != null)\n                message.value = String(object.value);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a StringStringEntryProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.StringStringEntryProto} message StringStringEntryProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        StringStringEntryProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.key = \"\";\n                object.value = \"\";\n            }\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                object.key = message.key;\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                object.value = message.value;\n            return object;\n        };\n\n        /**\n         * Converts this StringStringEntryProto to JSON.\n         * @function toJSON\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        StringStringEntryProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for StringStringEntryProto\n         * @function getTypeUrl\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        StringStringEntryProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.StringStringEntryProto\";\n        };\n\n        return StringStringEntryProto;\n    })();\n\n    onnx.TensorAnnotation = (function() {\n\n        /**\n         * Properties of a TensorAnnotation.\n         * @memberof onnx\n         * @interface ITensorAnnotation\n         * @property {string|null} [tensorName] TensorAnnotation tensorName\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [quantParameterTensorNames] TensorAnnotation quantParameterTensorNames\n         */\n\n        /**\n         * Constructs a new TensorAnnotation.\n         * @memberof onnx\n         * @classdesc Represents a TensorAnnotation.\n         * @implements ITensorAnnotation\n         * @constructor\n         * @param {onnx.ITensorAnnotation=} [properties] Properties to set\n         */\n        function TensorAnnotation(properties) {\n            this.quantParameterTensorNames = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorAnnotation tensorName.\n         * @member {string} tensorName\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         */\n        TensorAnnotation.prototype.tensorName = \"\";\n\n        /**\n         * TensorAnnotation quantParameterTensorNames.\n         * @member {Array.<onnx.IStringStringEntryProto>} quantParameterTensorNames\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         */\n        TensorAnnotation.prototype.quantParameterTensorNames = $util.emptyArray;\n\n        /**\n         * Creates a new TensorAnnotation instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation=} [properties] Properties to set\n         * @returns {onnx.TensorAnnotation} TensorAnnotation instance\n         */\n        TensorAnnotation.create = function create(properties) {\n            return new TensorAnnotation(properties);\n        };\n\n        /**\n         * Encodes the specified TensorAnnotation message. Does not implicitly {@link onnx.TensorAnnotation.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation} message TensorAnnotation message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorAnnotation.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.tensorName != null && Object.hasOwnProperty.call(message, \"tensorName\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.tensorName);\n            if (message.quantParameterTensorNames != null && message.quantParameterTensorNames.length)\n                for (var i = 0; i < message.quantParameterTensorNames.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.quantParameterTensorNames[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorAnnotation message, length delimited. Does not implicitly {@link onnx.TensorAnnotation.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation} message TensorAnnotation message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorAnnotation.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorAnnotation message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorAnnotation.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorAnnotation();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.tensorName = reader.string();\n                        break;\n                    }\n                case 2: {\n                        if (!(message.quantParameterTensorNames && message.quantParameterTensorNames.length))\n                            message.quantParameterTensorNames = [];\n                        message.quantParameterTensorNames.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorAnnotation message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorAnnotation.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorAnnotation message.\n         * @function verify\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorAnnotation.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                if (!$util.isString(message.tensorName))\n                    return \"tensorName: string expected\";\n            if (message.quantParameterTensorNames != null && message.hasOwnProperty(\"quantParameterTensorNames\")) {\n                if (!Array.isArray(message.quantParameterTensorNames))\n                    return \"quantParameterTensorNames: array expected\";\n                for (var i = 0; i < message.quantParameterTensorNames.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.quantParameterTensorNames[i]);\n                    if (error)\n                        return \"quantParameterTensorNames.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorAnnotation message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         */\n        TensorAnnotation.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorAnnotation)\n                return object;\n            var message = new $root.onnx.TensorAnnotation();\n            if (object.tensorName != null)\n                message.tensorName = String(object.tensorName);\n            if (object.quantParameterTensorNames) {\n                if (!Array.isArray(object.quantParameterTensorNames))\n                    throw TypeError(\".onnx.TensorAnnotation.quantParameterTensorNames: array expected\");\n                message.quantParameterTensorNames = [];\n                for (var i = 0; i < object.quantParameterTensorNames.length; ++i) {\n                    if (typeof object.quantParameterTensorNames[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorAnnotation.quantParameterTensorNames: object expected\");\n                    message.quantParameterTensorNames[i] = $root.onnx.StringStringEntryProto.fromObject(object.quantParameterTensorNames[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorAnnotation message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.TensorAnnotation} message TensorAnnotation\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorAnnotation.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.quantParameterTensorNames = [];\n            if (options.defaults)\n                object.tensorName = \"\";\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                object.tensorName = message.tensorName;\n            if (message.quantParameterTensorNames && message.quantParameterTensorNames.length) {\n                object.quantParameterTensorNames = [];\n                for (var j = 0; j < message.quantParameterTensorNames.length; ++j)\n                    object.quantParameterTensorNames[j] = $root.onnx.StringStringEntryProto.toObject(message.quantParameterTensorNames[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TensorAnnotation to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorAnnotation.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for TensorAnnotation\n         * @function getTypeUrl\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        TensorAnnotation.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.TensorAnnotation\";\n        };\n\n        return TensorAnnotation;\n    })();\n\n    onnx.GraphProto = (function() {\n\n        /**\n         * Properties of a GraphProto.\n         * @memberof onnx\n         * @interface IGraphProto\n         * @property {Array.<onnx.INodeProto>|null} [node] GraphProto node\n         * @property {string|null} [name] GraphProto name\n         * @property {Array.<onnx.ITensorProto>|null} [initializer] GraphProto initializer\n         * @property {Array.<onnx.ISparseTensorProto>|null} [sparseInitializer] GraphProto sparseInitializer\n         * @property {string|null} [docString] GraphProto docString\n         * @property {Array.<onnx.IValueInfoProto>|null} [input] GraphProto input\n         * @property {Array.<onnx.IValueInfoProto>|null} [output] GraphProto output\n         * @property {Array.<onnx.IValueInfoProto>|null} [valueInfo] GraphProto valueInfo\n         * @property {Array.<onnx.ITensorAnnotation>|null} [quantizationAnnotation] GraphProto quantizationAnnotation\n         */\n\n        /**\n         * Constructs a new GraphProto.\n         * @memberof onnx\n         * @classdesc Represents a GraphProto.\n         * @implements IGraphProto\n         * @constructor\n         * @param {onnx.IGraphProto=} [properties] Properties to set\n         */\n        function GraphProto(properties) {\n            this.node = [];\n            this.initializer = [];\n            this.sparseInitializer = [];\n            this.input = [];\n            this.output = [];\n            this.valueInfo = [];\n            this.quantizationAnnotation = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * GraphProto node.\n         * @member {Array.<onnx.INodeProto>} node\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.node = $util.emptyArray;\n\n        /**\n         * GraphProto name.\n         * @member {string} name\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.name = \"\";\n\n        /**\n         * GraphProto initializer.\n         * @member {Array.<onnx.ITensorProto>} initializer\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.initializer = $util.emptyArray;\n\n        /**\n         * GraphProto sparseInitializer.\n         * @member {Array.<onnx.ISparseTensorProto>} sparseInitializer\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.sparseInitializer = $util.emptyArray;\n\n        /**\n         * GraphProto docString.\n         * @member {string} docString\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.docString = \"\";\n\n        /**\n         * GraphProto input.\n         * @member {Array.<onnx.IValueInfoProto>} input\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.input = $util.emptyArray;\n\n        /**\n         * GraphProto output.\n         * @member {Array.<onnx.IValueInfoProto>} output\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.output = $util.emptyArray;\n\n        /**\n         * GraphProto valueInfo.\n         * @member {Array.<onnx.IValueInfoProto>} valueInfo\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.valueInfo = $util.emptyArray;\n\n        /**\n         * GraphProto quantizationAnnotation.\n         * @member {Array.<onnx.ITensorAnnotation>} quantizationAnnotation\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.quantizationAnnotation = $util.emptyArray;\n\n        /**\n         * Creates a new GraphProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto=} [properties] Properties to set\n         * @returns {onnx.GraphProto} GraphProto instance\n         */\n        GraphProto.create = function create(properties) {\n            return new GraphProto(properties);\n        };\n\n        /**\n         * Encodes the specified GraphProto message. Does not implicitly {@link onnx.GraphProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto} message GraphProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        GraphProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.node != null && message.node.length)\n                for (var i = 0; i < message.node.length; ++i)\n                    $root.onnx.NodeProto.encode(message.node[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);\n            if (message.initializer != null && message.initializer.length)\n                for (var i = 0; i < message.initializer.length; ++i)\n                    $root.onnx.TensorProto.encode(message.initializer[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.docString != null && Object.hasOwnProperty.call(message, \"docString\"))\n                writer.uint32(/* id 10, wireType 2 =*/82).string(message.docString);\n            if (message.input != null && message.input.length)\n                for (var i = 0; i < message.input.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.input[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            if (message.output != null && message.output.length)\n                for (var i = 0; i < message.output.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.output[i], writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();\n            if (message.valueInfo != null && message.valueInfo.length)\n                for (var i = 0; i < message.valueInfo.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.valueInfo[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n            if (message.quantizationAnnotation != null && message.quantizationAnnotation.length)\n                for (var i = 0; i < message.quantizationAnnotation.length; ++i)\n                    $root.onnx.TensorAnnotation.encode(message.quantizationAnnotation[i], writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n            if (message.sparseInitializer != null && message.sparseInitializer.length)\n                for (var i = 0; i < message.sparseInitializer.length; ++i)\n                    $root.onnx.SparseTensorProto.encode(message.sparseInitializer[i], writer.uint32(/* id 15, wireType 2 =*/122).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified GraphProto message, length delimited. Does not implicitly {@link onnx.GraphProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto} message GraphProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        GraphProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a GraphProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.GraphProto} GraphProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        GraphProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.GraphProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        if (!(message.node && message.node.length))\n                            message.node = [];\n                        message.node.push($root.onnx.NodeProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 2: {\n                        message.name = reader.string();\n                        break;\n                    }\n                case 5: {\n                        if (!(message.initializer && message.initializer.length))\n                            message.initializer = [];\n                        message.initializer.push($root.onnx.TensorProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 15: {\n                        if (!(message.sparseInitializer && message.sparseInitializer.length))\n                            message.sparseInitializer = [];\n                        message.sparseInitializer.push($root.onnx.SparseTensorProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 10: {\n                        message.docString = reader.string();\n                        break;\n                    }\n                case 11: {\n                        if (!(message.input && message.input.length))\n                            message.input = [];\n                        message.input.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 12: {\n                        if (!(message.output && message.output.length))\n                            message.output = [];\n                        message.output.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 13: {\n                        if (!(message.valueInfo && message.valueInfo.length))\n                            message.valueInfo = [];\n                        message.valueInfo.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 14: {\n                        if (!(message.quantizationAnnotation && message.quantizationAnnotation.length))\n                            message.quantizationAnnotation = [];\n                        message.quantizationAnnotation.push($root.onnx.TensorAnnotation.decode(reader, reader.uint32()));\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a GraphProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.GraphProto} GraphProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        GraphProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a GraphProto message.\n         * @function verify\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        GraphProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.node != null && message.hasOwnProperty(\"node\")) {\n                if (!Array.isArray(message.node))\n                    return \"node: array expected\";\n                for (var i = 0; i < message.node.length; ++i) {\n                    var error = $root.onnx.NodeProto.verify(message.node[i]);\n                    if (error)\n                        return \"node.\" + error;\n                }\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.initializer != null && message.hasOwnProperty(\"initializer\")) {\n                if (!Array.isArray(message.initializer))\n                    return \"initializer: array expected\";\n                for (var i = 0; i < message.initializer.length; ++i) {\n                    var error = $root.onnx.TensorProto.verify(message.initializer[i]);\n                    if (error)\n                        return \"initializer.\" + error;\n                }\n            }\n            if (message.sparseInitializer != null && message.hasOwnProperty(\"sparseInitializer\")) {\n                if (!Array.isArray(message.sparseInitializer))\n                    return \"sparseInitializer: array expected\";\n                for (var i = 0; i < message.sparseInitializer.length; ++i) {\n                    var error = $root.onnx.SparseTensorProto.verify(message.sparseInitializer[i]);\n                    if (error)\n                        return \"sparseInitializer.\" + error;\n                }\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.input != null && message.hasOwnProperty(\"input\")) {\n                if (!Array.isArray(message.input))\n                    return \"input: array expected\";\n                for (var i = 0; i < message.input.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.input[i]);\n                    if (error)\n                        return \"input.\" + error;\n                }\n            }\n            if (message.output != null && message.hasOwnProperty(\"output\")) {\n                if (!Array.isArray(message.output))\n                    return \"output: array expected\";\n                for (var i = 0; i < message.output.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.output[i]);\n                    if (error)\n                        return \"output.\" + error;\n                }\n            }\n            if (message.valueInfo != null && message.hasOwnProperty(\"valueInfo\")) {\n                if (!Array.isArray(message.valueInfo))\n                    return \"valueInfo: array expected\";\n                for (var i = 0; i < message.valueInfo.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.valueInfo[i]);\n                    if (error)\n                        return \"valueInfo.\" + error;\n                }\n            }\n            if (message.quantizationAnnotation != null && message.hasOwnProperty(\"quantizationAnnotation\")) {\n                if (!Array.isArray(message.quantizationAnnotation))\n                    return \"quantizationAnnotation: array expected\";\n                for (var i = 0; i < message.quantizationAnnotation.length; ++i) {\n                    var error = $root.onnx.TensorAnnotation.verify(message.quantizationAnnotation[i]);\n                    if (error)\n                        return \"quantizationAnnotation.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a GraphProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.GraphProto} GraphProto\n         */\n        GraphProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.GraphProto)\n                return object;\n            var message = new $root.onnx.GraphProto();\n            if (object.node) {\n                if (!Array.isArray(object.node))\n                    throw TypeError(\".onnx.GraphProto.node: array expected\");\n                message.node = [];\n                for (var i = 0; i < object.node.length; ++i) {\n                    if (typeof object.node[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.node: object expected\");\n                    message.node[i] = $root.onnx.NodeProto.fromObject(object.node[i]);\n                }\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.initializer) {\n                if (!Array.isArray(object.initializer))\n                    throw TypeError(\".onnx.GraphProto.initializer: array expected\");\n                message.initializer = [];\n                for (var i = 0; i < object.initializer.length; ++i) {\n                    if (typeof object.initializer[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.initializer: object expected\");\n                    message.initializer[i] = $root.onnx.TensorProto.fromObject(object.initializer[i]);\n                }\n            }\n            if (object.sparseInitializer) {\n                if (!Array.isArray(object.sparseInitializer))\n                    throw TypeError(\".onnx.GraphProto.sparseInitializer: array expected\");\n                message.sparseInitializer = [];\n                for (var i = 0; i < object.sparseInitializer.length; ++i) {\n                    if (typeof object.sparseInitializer[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.sparseInitializer: object expected\");\n                    message.sparseInitializer[i] = $root.onnx.SparseTensorProto.fromObject(object.sparseInitializer[i]);\n                }\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.input) {\n                if (!Array.isArray(object.input))\n                    throw TypeError(\".onnx.GraphProto.input: array expected\");\n                message.input = [];\n                for (var i = 0; i < object.input.length; ++i) {\n                    if (typeof object.input[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.input: object expected\");\n                    message.input[i] = $root.onnx.ValueInfoProto.fromObject(object.input[i]);\n                }\n            }\n            if (object.output) {\n                if (!Array.isArray(object.output))\n                    throw TypeError(\".onnx.GraphProto.output: array expected\");\n                message.output = [];\n                for (var i = 0; i < object.output.length; ++i) {\n                    if (typeof object.output[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.output: object expected\");\n                    message.output[i] = $root.onnx.ValueInfoProto.fromObject(object.output[i]);\n                }\n            }\n            if (object.valueInfo) {\n                if (!Array.isArray(object.valueInfo))\n                    throw TypeError(\".onnx.GraphProto.valueInfo: array expected\");\n                message.valueInfo = [];\n                for (var i = 0; i < object.valueInfo.length; ++i) {\n                    if (typeof object.valueInfo[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.valueInfo: object expected\");\n                    message.valueInfo[i] = $root.onnx.ValueInfoProto.fromObject(object.valueInfo[i]);\n                }\n            }\n            if (object.quantizationAnnotation) {\n                if (!Array.isArray(object.quantizationAnnotation))\n                    throw TypeError(\".onnx.GraphProto.quantizationAnnotation: array expected\");\n                message.quantizationAnnotation = [];\n                for (var i = 0; i < object.quantizationAnnotation.length; ++i) {\n                    if (typeof object.quantizationAnnotation[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.quantizationAnnotation: object expected\");\n                    message.quantizationAnnotation[i] = $root.onnx.TensorAnnotation.fromObject(object.quantizationAnnotation[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a GraphProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.GraphProto} message GraphProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        GraphProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.node = [];\n                object.initializer = [];\n                object.input = [];\n                object.output = [];\n                object.valueInfo = [];\n                object.quantizationAnnotation = [];\n                object.sparseInitializer = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.docString = \"\";\n            }\n            if (message.node && message.node.length) {\n                object.node = [];\n                for (var j = 0; j < message.node.length; ++j)\n                    object.node[j] = $root.onnx.NodeProto.toObject(message.node[j], options);\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.initializer && message.initializer.length) {\n                object.initializer = [];\n                for (var j = 0; j < message.initializer.length; ++j)\n                    object.initializer[j] = $root.onnx.TensorProto.toObject(message.initializer[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.input && message.input.length) {\n                object.input = [];\n                for (var j = 0; j < message.input.length; ++j)\n                    object.input[j] = $root.onnx.ValueInfoProto.toObject(message.input[j], options);\n            }\n            if (message.output && message.output.length) {\n                object.output = [];\n                for (var j = 0; j < message.output.length; ++j)\n                    object.output[j] = $root.onnx.ValueInfoProto.toObject(message.output[j], options);\n            }\n            if (message.valueInfo && message.valueInfo.length) {\n                object.valueInfo = [];\n                for (var j = 0; j < message.valueInfo.length; ++j)\n                    object.valueInfo[j] = $root.onnx.ValueInfoProto.toObject(message.valueInfo[j], options);\n            }\n            if (message.quantizationAnnotation && message.quantizationAnnotation.length) {\n                object.quantizationAnnotation = [];\n                for (var j = 0; j < message.quantizationAnnotation.length; ++j)\n                    object.quantizationAnnotation[j] = $root.onnx.TensorAnnotation.toObject(message.quantizationAnnotation[j], options);\n            }\n            if (message.sparseInitializer && message.sparseInitializer.length) {\n                object.sparseInitializer = [];\n                for (var j = 0; j < message.sparseInitializer.length; ++j)\n                    object.sparseInitializer[j] = $root.onnx.SparseTensorProto.toObject(message.sparseInitializer[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this GraphProto to JSON.\n         * @function toJSON\n         * @memberof onnx.GraphProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        GraphProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for GraphProto\n         * @function getTypeUrl\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        GraphProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.GraphProto\";\n        };\n\n        return GraphProto;\n    })();\n\n    onnx.TensorProto = (function() {\n\n        /**\n         * Properties of a TensorProto.\n         * @memberof onnx\n         * @interface ITensorProto\n         * @property {Array.<number|Long>|null} [dims] TensorProto dims\n         * @property {number|null} [dataType] TensorProto dataType\n         * @property {onnx.TensorProto.ISegment|null} [segment] TensorProto segment\n         * @property {Array.<number>|null} [floatData] TensorProto floatData\n         * @property {Array.<number>|null} [int32Data] TensorProto int32Data\n         * @property {Array.<Uint8Array>|null} [stringData] TensorProto stringData\n         * @property {Array.<number|Long>|null} [int64Data] TensorProto int64Data\n         * @property {string|null} [name] TensorProto name\n         * @property {string|null} [docString] TensorProto docString\n         * @property {Uint8Array|null} [rawData] TensorProto rawData\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [externalData] TensorProto externalData\n         * @property {onnx.TensorProto.DataLocation|null} [dataLocation] TensorProto dataLocation\n         * @property {Array.<number>|null} [doubleData] TensorProto doubleData\n         * @property {Array.<number|Long>|null} [uint64Data] TensorProto uint64Data\n         */\n\n        /**\n         * Constructs a new TensorProto.\n         * @memberof onnx\n         * @classdesc Represents a TensorProto.\n         * @implements ITensorProto\n         * @constructor\n         * @param {onnx.ITensorProto=} [properties] Properties to set\n         */\n        function TensorProto(properties) {\n            this.dims = [];\n            this.floatData = [];\n            this.int32Data = [];\n            this.stringData = [];\n            this.int64Data = [];\n            this.externalData = [];\n            this.doubleData = [];\n            this.uint64Data = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorProto dims.\n         * @member {Array.<number|Long>} dims\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dims = $util.emptyArray;\n\n        /**\n         * TensorProto dataType.\n         * @member {number} dataType\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dataType = 0;\n\n        /**\n         * TensorProto segment.\n         * @member {onnx.TensorProto.ISegment|null|undefined} segment\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.segment = null;\n\n        /**\n         * TensorProto floatData.\n         * @member {Array.<number>} floatData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.floatData = $util.emptyArray;\n\n        /**\n         * TensorProto int32Data.\n         * @member {Array.<number>} int32Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.int32Data = $util.emptyArray;\n\n        /**\n         * TensorProto stringData.\n         * @member {Array.<Uint8Array>} stringData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.stringData = $util.emptyArray;\n\n        /**\n         * TensorProto int64Data.\n         * @member {Array.<number|Long>} int64Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.int64Data = $util.emptyArray;\n\n        /**\n         * TensorProto name.\n         * @member {string} name\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.name = \"\";\n\n        /**\n         * TensorProto docString.\n         * @member {string} docString\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.docString = \"\";\n\n        /**\n         * TensorProto rawData.\n         * @member {Uint8Array} rawData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.rawData = $util.newBuffer([]);\n\n        /**\n         * TensorProto externalData.\n         * @member {Array.<onnx.IStringStringEntryProto>} externalData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.externalData = $util.emptyArray;\n\n        /**\n         * TensorProto dataLocation.\n         * @member {onnx.TensorProto.DataLocation} dataLocation\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dataLocation = 0;\n\n        /**\n         * TensorProto doubleData.\n         * @member {Array.<number>} doubleData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.doubleData = $util.emptyArray;\n\n        /**\n         * TensorProto uint64Data.\n         * @member {Array.<number|Long>} uint64Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.uint64Data = $util.emptyArray;\n\n        /**\n         * Creates a new TensorProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto=} [properties] Properties to set\n         * @returns {onnx.TensorProto} TensorProto instance\n         */\n        TensorProto.create = function create(properties) {\n            return new TensorProto(properties);\n        };\n\n        /**\n         * Encodes the specified TensorProto message. Does not implicitly {@link onnx.TensorProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto} message TensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.dims != null && message.dims.length) {\n                writer.uint32(/* id 1, wireType 2 =*/10).fork();\n                for (var i = 0; i < message.dims.length; ++i)\n                    writer.int64(message.dims[i]);\n                writer.ldelim();\n            }\n            if (message.dataType != null && Object.hasOwnProperty.call(message, \"dataType\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.dataType);\n            if (message.segment != null && Object.hasOwnProperty.call(message, \"segment\"))\n                $root.onnx.TensorProto.Segment.encode(message.segment, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            if (message.floatData != null && message.floatData.length) {\n                writer.uint32(/* id 4, wireType 2 =*/34).fork();\n                for (var i = 0; i < message.floatData.length; ++i)\n                    writer.float(message.floatData[i]);\n                writer.ldelim();\n            }\n            if (message.int32Data != null && message.int32Data.length) {\n                writer.uint32(/* id 5, wireType 2 =*/42).fork();\n                for (var i = 0; i < message.int32Data.length; ++i)\n                    writer.int32(message.int32Data[i]);\n                writer.ldelim();\n            }\n            if (message.stringData != null && message.stringData.length)\n                for (var i = 0; i < message.stringData.length; ++i)\n                    writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.stringData[i]);\n            if (message.int64Data != null && message.int64Data.length) {\n                writer.uint32(/* id 7, wireType 2 =*/58).fork();\n                for (var i = 0; i < message.int64Data.length; ++i)\n                    writer.int64(message.int64Data[i]);\n                writer.ldelim();\n            }\n            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n                writer.uint32(/* id 8, wireType 2 =*/66).string(message.name);\n            if (message.rawData != null && Object.hasOwnProperty.call(message, \"rawData\"))\n                writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.rawData);\n            if (message.doubleData != null && message.doubleData.length) {\n                writer.uint32(/* id 10, wireType 2 =*/82).fork();\n                for (var i = 0; i < message.doubleData.length; ++i)\n                    writer.double(message.doubleData[i]);\n                writer.ldelim();\n            }\n            if (message.uint64Data != null && message.uint64Data.length) {\n                writer.uint32(/* id 11, wireType 2 =*/90).fork();\n                for (var i = 0; i < message.uint64Data.length; ++i)\n                    writer.uint64(message.uint64Data[i]);\n                writer.ldelim();\n            }\n            if (message.docString != null && Object.hasOwnProperty.call(message, \"docString\"))\n                writer.uint32(/* id 12, wireType 2 =*/98).string(message.docString);\n            if (message.externalData != null && message.externalData.length)\n                for (var i = 0; i < message.externalData.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.externalData[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n            if (message.dataLocation != null && Object.hasOwnProperty.call(message, \"dataLocation\"))\n                writer.uint32(/* id 14, wireType 0 =*/112).int32(message.dataLocation);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorProto message, length delimited. Does not implicitly {@link onnx.TensorProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto} message TensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorProto} TensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        if (!(message.dims && message.dims.length))\n                            message.dims = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.dims.push(reader.int64());\n                        } else\n                            message.dims.push(reader.int64());\n                        break;\n                    }\n                case 2: {\n                        message.dataType = reader.int32();\n                        break;\n                    }\n                case 3: {\n                        message.segment = $root.onnx.TensorProto.Segment.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 4: {\n                        if (!(message.floatData && message.floatData.length))\n                            message.floatData = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.floatData.push(reader.float());\n                        } else\n                            message.floatData.push(reader.float());\n                        break;\n                    }\n                case 5: {\n                        if (!(message.int32Data && message.int32Data.length))\n                            message.int32Data = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.int32Data.push(reader.int32());\n                        } else\n                            message.int32Data.push(reader.int32());\n                        break;\n                    }\n                case 6: {\n                        if (!(message.stringData && message.stringData.length))\n                            message.stringData = [];\n                        message.stringData.push(reader.bytes());\n                        break;\n                    }\n                case 7: {\n                        if (!(message.int64Data && message.int64Data.length))\n                            message.int64Data = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.int64Data.push(reader.int64());\n                        } else\n                            message.int64Data.push(reader.int64());\n                        break;\n                    }\n                case 8: {\n                        message.name = reader.string();\n                        break;\n                    }\n                case 12: {\n                        message.docString = reader.string();\n                        break;\n                    }\n                case 9: {\n                        message.rawData = reader.bytes();\n                        break;\n                    }\n                case 13: {\n                        if (!(message.externalData && message.externalData.length))\n                            message.externalData = [];\n                        message.externalData.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 14: {\n                        message.dataLocation = reader.int32();\n                        break;\n                    }\n                case 10: {\n                        if (!(message.doubleData && message.doubleData.length))\n                            message.doubleData = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.doubleData.push(reader.double());\n                        } else\n                            message.doubleData.push(reader.double());\n                        break;\n                    }\n                case 11: {\n                        if (!(message.uint64Data && message.uint64Data.length))\n                            message.uint64Data = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.uint64Data.push(reader.uint64());\n                        } else\n                            message.uint64Data.push(reader.uint64());\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorProto} TensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorProto message.\n         * @function verify\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.dims != null && message.hasOwnProperty(\"dims\")) {\n                if (!Array.isArray(message.dims))\n                    return \"dims: array expected\";\n                for (var i = 0; i < message.dims.length; ++i)\n                    if (!$util.isInteger(message.dims[i]) && !(message.dims[i] && $util.isInteger(message.dims[i].low) && $util.isInteger(message.dims[i].high)))\n                        return \"dims: integer|Long[] expected\";\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                if (!$util.isInteger(message.dataType))\n                    return \"dataType: integer expected\";\n            if (message.segment != null && message.hasOwnProperty(\"segment\")) {\n                var error = $root.onnx.TensorProto.Segment.verify(message.segment);\n                if (error)\n                    return \"segment.\" + error;\n            }\n            if (message.floatData != null && message.hasOwnProperty(\"floatData\")) {\n                if (!Array.isArray(message.floatData))\n                    return \"floatData: array expected\";\n                for (var i = 0; i < message.floatData.length; ++i)\n                    if (typeof message.floatData[i] !== \"number\")\n                        return \"floatData: number[] expected\";\n            }\n            if (message.int32Data != null && message.hasOwnProperty(\"int32Data\")) {\n                if (!Array.isArray(message.int32Data))\n                    return \"int32Data: array expected\";\n                for (var i = 0; i < message.int32Data.length; ++i)\n                    if (!$util.isInteger(message.int32Data[i]))\n                        return \"int32Data: integer[] expected\";\n            }\n            if (message.stringData != null && message.hasOwnProperty(\"stringData\")) {\n                if (!Array.isArray(message.stringData))\n                    return \"stringData: array expected\";\n                for (var i = 0; i < message.stringData.length; ++i)\n                    if (!(message.stringData[i] && typeof message.stringData[i].length === \"number\" || $util.isString(message.stringData[i])))\n                        return \"stringData: buffer[] expected\";\n            }\n            if (message.int64Data != null && message.hasOwnProperty(\"int64Data\")) {\n                if (!Array.isArray(message.int64Data))\n                    return \"int64Data: array expected\";\n                for (var i = 0; i < message.int64Data.length; ++i)\n                    if (!$util.isInteger(message.int64Data[i]) && !(message.int64Data[i] && $util.isInteger(message.int64Data[i].low) && $util.isInteger(message.int64Data[i].high)))\n                        return \"int64Data: integer|Long[] expected\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                if (!(message.rawData && typeof message.rawData.length === \"number\" || $util.isString(message.rawData)))\n                    return \"rawData: buffer expected\";\n            if (message.externalData != null && message.hasOwnProperty(\"externalData\")) {\n                if (!Array.isArray(message.externalData))\n                    return \"externalData: array expected\";\n                for (var i = 0; i < message.externalData.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.externalData[i]);\n                    if (error)\n                        return \"externalData.\" + error;\n                }\n            }\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                switch (message.dataLocation) {\n                default:\n                    return \"dataLocation: enum value expected\";\n                case 0:\n                case 1:\n                    break;\n                }\n            if (message.doubleData != null && message.hasOwnProperty(\"doubleData\")) {\n                if (!Array.isArray(message.doubleData))\n                    return \"doubleData: array expected\";\n                for (var i = 0; i < message.doubleData.length; ++i)\n                    if (typeof message.doubleData[i] !== \"number\")\n                        return \"doubleData: number[] expected\";\n            }\n            if (message.uint64Data != null && message.hasOwnProperty(\"uint64Data\")) {\n                if (!Array.isArray(message.uint64Data))\n                    return \"uint64Data: array expected\";\n                for (var i = 0; i < message.uint64Data.length; ++i)\n                    if (!$util.isInteger(message.uint64Data[i]) && !(message.uint64Data[i] && $util.isInteger(message.uint64Data[i].low) && $util.isInteger(message.uint64Data[i].high)))\n                        return \"uint64Data: integer|Long[] expected\";\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorProto} TensorProto\n         */\n        TensorProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorProto)\n                return object;\n            var message = new $root.onnx.TensorProto();\n            if (object.dims) {\n                if (!Array.isArray(object.dims))\n                    throw TypeError(\".onnx.TensorProto.dims: array expected\");\n                message.dims = [];\n                for (var i = 0; i < object.dims.length; ++i)\n                    if ($util.Long)\n                        (message.dims[i] = $util.Long.fromValue(object.dims[i])).unsigned = false;\n                    else if (typeof object.dims[i] === \"string\")\n                        message.dims[i] = parseInt(object.dims[i], 10);\n                    else if (typeof object.dims[i] === \"number\")\n                        message.dims[i] = object.dims[i];\n                    else if (typeof object.dims[i] === \"object\")\n                        message.dims[i] = new $util.LongBits(object.dims[i].low >>> 0, object.dims[i].high >>> 0).toNumber();\n            }\n            if (object.dataType != null)\n                message.dataType = object.dataType | 0;\n            if (object.segment != null) {\n                if (typeof object.segment !== \"object\")\n                    throw TypeError(\".onnx.TensorProto.segment: object expected\");\n                message.segment = $root.onnx.TensorProto.Segment.fromObject(object.segment);\n            }\n            if (object.floatData) {\n                if (!Array.isArray(object.floatData))\n                    throw TypeError(\".onnx.TensorProto.floatData: array expected\");\n                message.floatData = [];\n                for (var i = 0; i < object.floatData.length; ++i)\n                    message.floatData[i] = Number(object.floatData[i]);\n            }\n            if (object.int32Data) {\n                if (!Array.isArray(object.int32Data))\n                    throw TypeError(\".onnx.TensorProto.int32Data: array expected\");\n                message.int32Data = [];\n                for (var i = 0; i < object.int32Data.length; ++i)\n                    message.int32Data[i] = object.int32Data[i] | 0;\n            }\n            if (object.stringData) {\n                if (!Array.isArray(object.stringData))\n                    throw TypeError(\".onnx.TensorProto.stringData: array expected\");\n                message.stringData = [];\n                for (var i = 0; i < object.stringData.length; ++i)\n                    if (typeof object.stringData[i] === \"string\")\n                        $util.base64.decode(object.stringData[i], message.stringData[i] = $util.newBuffer($util.base64.length(object.stringData[i])), 0);\n                    else if (object.stringData[i].length >= 0)\n                        message.stringData[i] = object.stringData[i];\n            }\n            if (object.int64Data) {\n                if (!Array.isArray(object.int64Data))\n                    throw TypeError(\".onnx.TensorProto.int64Data: array expected\");\n                message.int64Data = [];\n                for (var i = 0; i < object.int64Data.length; ++i)\n                    if ($util.Long)\n                        (message.int64Data[i] = $util.Long.fromValue(object.int64Data[i])).unsigned = false;\n                    else if (typeof object.int64Data[i] === \"string\")\n                        message.int64Data[i] = parseInt(object.int64Data[i], 10);\n                    else if (typeof object.int64Data[i] === \"number\")\n                        message.int64Data[i] = object.int64Data[i];\n                    else if (typeof object.int64Data[i] === \"object\")\n                        message.int64Data[i] = new $util.LongBits(object.int64Data[i].low >>> 0, object.int64Data[i].high >>> 0).toNumber();\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.rawData != null)\n                if (typeof object.rawData === \"string\")\n                    $util.base64.decode(object.rawData, message.rawData = $util.newBuffer($util.base64.length(object.rawData)), 0);\n                else if (object.rawData.length >= 0)\n                    message.rawData = object.rawData;\n            if (object.externalData) {\n                if (!Array.isArray(object.externalData))\n                    throw TypeError(\".onnx.TensorProto.externalData: array expected\");\n                message.externalData = [];\n                for (var i = 0; i < object.externalData.length; ++i) {\n                    if (typeof object.externalData[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorProto.externalData: object expected\");\n                    message.externalData[i] = $root.onnx.StringStringEntryProto.fromObject(object.externalData[i]);\n                }\n            }\n            switch (object.dataLocation) {\n            default:\n                if (typeof object.dataLocation === \"number\") {\n                    message.dataLocation = object.dataLocation;\n                    break;\n                }\n                break;\n            case \"DEFAULT\":\n            case 0:\n                message.dataLocation = 0;\n                break;\n            case \"EXTERNAL\":\n            case 1:\n                message.dataLocation = 1;\n                break;\n            }\n            if (object.doubleData) {\n                if (!Array.isArray(object.doubleData))\n                    throw TypeError(\".onnx.TensorProto.doubleData: array expected\");\n                message.doubleData = [];\n                for (var i = 0; i < object.doubleData.length; ++i)\n                    message.doubleData[i] = Number(object.doubleData[i]);\n            }\n            if (object.uint64Data) {\n                if (!Array.isArray(object.uint64Data))\n                    throw TypeError(\".onnx.TensorProto.uint64Data: array expected\");\n                message.uint64Data = [];\n                for (var i = 0; i < object.uint64Data.length; ++i)\n                    if ($util.Long)\n                        (message.uint64Data[i] = $util.Long.fromValue(object.uint64Data[i])).unsigned = true;\n                    else if (typeof object.uint64Data[i] === \"string\")\n                        message.uint64Data[i] = parseInt(object.uint64Data[i], 10);\n                    else if (typeof object.uint64Data[i] === \"number\")\n                        message.uint64Data[i] = object.uint64Data[i];\n                    else if (typeof object.uint64Data[i] === \"object\")\n                        message.uint64Data[i] = new $util.LongBits(object.uint64Data[i].low >>> 0, object.uint64Data[i].high >>> 0).toNumber(true);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.TensorProto} message TensorProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.dims = [];\n                object.floatData = [];\n                object.int32Data = [];\n                object.stringData = [];\n                object.int64Data = [];\n                object.doubleData = [];\n                object.uint64Data = [];\n                object.externalData = [];\n            }\n            if (options.defaults) {\n                object.dataType = 0;\n                object.segment = null;\n                object.name = \"\";\n                if (options.bytes === String)\n                    object.rawData = \"\";\n                else {\n                    object.rawData = [];\n                    if (options.bytes !== Array)\n                        object.rawData = $util.newBuffer(object.rawData);\n                }\n                object.docString = \"\";\n                object.dataLocation = options.enums === String ? \"DEFAULT\" : 0;\n            }\n            if (message.dims && message.dims.length) {\n                object.dims = [];\n                for (var j = 0; j < message.dims.length; ++j)\n                    if (typeof message.dims[j] === \"number\")\n                        object.dims[j] = options.longs === String ? String(message.dims[j]) : message.dims[j];\n                    else\n                        object.dims[j] = options.longs === String ? $util.Long.prototype.toString.call(message.dims[j]) : options.longs === Number ? new $util.LongBits(message.dims[j].low >>> 0, message.dims[j].high >>> 0).toNumber() : message.dims[j];\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                object.dataType = message.dataType;\n            if (message.segment != null && message.hasOwnProperty(\"segment\"))\n                object.segment = $root.onnx.TensorProto.Segment.toObject(message.segment, options);\n            if (message.floatData && message.floatData.length) {\n                object.floatData = [];\n                for (var j = 0; j < message.floatData.length; ++j)\n                    object.floatData[j] = options.json && !isFinite(message.floatData[j]) ? String(message.floatData[j]) : message.floatData[j];\n            }\n            if (message.int32Data && message.int32Data.length) {\n                object.int32Data = [];\n                for (var j = 0; j < message.int32Data.length; ++j)\n                    object.int32Data[j] = message.int32Data[j];\n            }\n            if (message.stringData && message.stringData.length) {\n                object.stringData = [];\n                for (var j = 0; j < message.stringData.length; ++j)\n                    object.stringData[j] = options.bytes === String ? $util.base64.encode(message.stringData[j], 0, message.stringData[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.stringData[j]) : message.stringData[j];\n            }\n            if (message.int64Data && message.int64Data.length) {\n                object.int64Data = [];\n                for (var j = 0; j < message.int64Data.length; ++j)\n                    if (typeof message.int64Data[j] === \"number\")\n                        object.int64Data[j] = options.longs === String ? String(message.int64Data[j]) : message.int64Data[j];\n                    else\n                        object.int64Data[j] = options.longs === String ? $util.Long.prototype.toString.call(message.int64Data[j]) : options.longs === Number ? new $util.LongBits(message.int64Data[j].low >>> 0, message.int64Data[j].high >>> 0).toNumber() : message.int64Data[j];\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                object.rawData = options.bytes === String ? $util.base64.encode(message.rawData, 0, message.rawData.length) : options.bytes === Array ? Array.prototype.slice.call(message.rawData) : message.rawData;\n            if (message.doubleData && message.doubleData.length) {\n                object.doubleData = [];\n                for (var j = 0; j < message.doubleData.length; ++j)\n                    object.doubleData[j] = options.json && !isFinite(message.doubleData[j]) ? String(message.doubleData[j]) : message.doubleData[j];\n            }\n            if (message.uint64Data && message.uint64Data.length) {\n                object.uint64Data = [];\n                for (var j = 0; j < message.uint64Data.length; ++j)\n                    if (typeof message.uint64Data[j] === \"number\")\n                        object.uint64Data[j] = options.longs === String ? String(message.uint64Data[j]) : message.uint64Data[j];\n                    else\n                        object.uint64Data[j] = options.longs === String ? $util.Long.prototype.toString.call(message.uint64Data[j]) : options.longs === Number ? new $util.LongBits(message.uint64Data[j].low >>> 0, message.uint64Data[j].high >>> 0).toNumber(true) : message.uint64Data[j];\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.externalData && message.externalData.length) {\n                object.externalData = [];\n                for (var j = 0; j < message.externalData.length; ++j)\n                    object.externalData[j] = $root.onnx.StringStringEntryProto.toObject(message.externalData[j], options);\n            }\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                object.dataLocation = options.enums === String ? $root.onnx.TensorProto.DataLocation[message.dataLocation] === undefined ? message.dataLocation : $root.onnx.TensorProto.DataLocation[message.dataLocation] : message.dataLocation;\n            return object;\n        };\n\n        /**\n         * Converts this TensorProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for TensorProto\n         * @function getTypeUrl\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        TensorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.TensorProto\";\n        };\n\n        /**\n         * DataType enum.\n         * @name onnx.TensorProto.DataType\n         * @enum {number}\n         * @property {number} UNDEFINED=0 UNDEFINED value\n         * @property {number} FLOAT=1 FLOAT value\n         * @property {number} UINT8=2 UINT8 value\n         * @property {number} INT8=3 INT8 value\n         * @property {number} UINT16=4 UINT16 value\n         * @property {number} INT16=5 INT16 value\n         * @property {number} INT32=6 INT32 value\n         * @property {number} INT64=7 INT64 value\n         * @property {number} STRING=8 STRING value\n         * @property {number} BOOL=9 BOOL value\n         * @property {number} FLOAT16=10 FLOAT16 value\n         * @property {number} DOUBLE=11 DOUBLE value\n         * @property {number} UINT32=12 UINT32 value\n         * @property {number} UINT64=13 UINT64 value\n         * @property {number} COMPLEX64=14 COMPLEX64 value\n         * @property {number} COMPLEX128=15 COMPLEX128 value\n         * @property {number} BFLOAT16=16 BFLOAT16 value\n         * @property {number} FLOAT8E4M3FN=17 FLOAT8E4M3FN value\n         * @property {number} FLOAT8E4M3FNUZ=18 FLOAT8E4M3FNUZ value\n         * @property {number} FLOAT8E5M2=19 FLOAT8E5M2 value\n         * @property {number} FLOAT8E5M2FNUZ=20 FLOAT8E5M2FNUZ value\n         */\n        TensorProto.DataType = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"UNDEFINED\"] = 0;\n            values[valuesById[1] = \"FLOAT\"] = 1;\n            values[valuesById[2] = \"UINT8\"] = 2;\n            values[valuesById[3] = \"INT8\"] = 3;\n            values[valuesById[4] = \"UINT16\"] = 4;\n            values[valuesById[5] = \"INT16\"] = 5;\n            values[valuesById[6] = \"INT32\"] = 6;\n            values[valuesById[7] = \"INT64\"] = 7;\n            values[valuesById[8] = \"STRING\"] = 8;\n            values[valuesById[9] = \"BOOL\"] = 9;\n            values[valuesById[10] = \"FLOAT16\"] = 10;\n            values[valuesById[11] = \"DOUBLE\"] = 11;\n            values[valuesById[12] = \"UINT32\"] = 12;\n            values[valuesById[13] = \"UINT64\"] = 13;\n            values[valuesById[14] = \"COMPLEX64\"] = 14;\n            values[valuesById[15] = \"COMPLEX128\"] = 15;\n            values[valuesById[16] = \"BFLOAT16\"] = 16;\n            values[valuesById[17] = \"FLOAT8E4M3FN\"] = 17;\n            values[valuesById[18] = \"FLOAT8E4M3FNUZ\"] = 18;\n            values[valuesById[19] = \"FLOAT8E5M2\"] = 19;\n            values[valuesById[20] = \"FLOAT8E5M2FNUZ\"] = 20;\n            return values;\n        })();\n\n        TensorProto.Segment = (function() {\n\n            /**\n             * Properties of a Segment.\n             * @memberof onnx.TensorProto\n             * @interface ISegment\n             * @property {number|Long|null} [begin] Segment begin\n             * @property {number|Long|null} [end] Segment end\n             */\n\n            /**\n             * Constructs a new Segment.\n             * @memberof onnx.TensorProto\n             * @classdesc Represents a Segment.\n             * @implements ISegment\n             * @constructor\n             * @param {onnx.TensorProto.ISegment=} [properties] Properties to set\n             */\n            function Segment(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Segment begin.\n             * @member {number|Long} begin\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             */\n            Segment.prototype.begin = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Segment end.\n             * @member {number|Long} end\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             */\n            Segment.prototype.end = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Creates a new Segment instance using the specified properties.\n             * @function create\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment=} [properties] Properties to set\n             * @returns {onnx.TensorProto.Segment} Segment instance\n             */\n            Segment.create = function create(properties) {\n                return new Segment(properties);\n            };\n\n            /**\n             * Encodes the specified Segment message. Does not implicitly {@link onnx.TensorProto.Segment.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment} message Segment message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Segment.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.begin != null && Object.hasOwnProperty.call(message, \"begin\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.begin);\n                if (message.end != null && Object.hasOwnProperty.call(message, \"end\"))\n                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.end);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Segment message, length delimited. Does not implicitly {@link onnx.TensorProto.Segment.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment} message Segment message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Segment.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Segment message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TensorProto.Segment} Segment\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Segment.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorProto.Segment();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1: {\n                            message.begin = reader.int64();\n                            break;\n                        }\n                    case 2: {\n                            message.end = reader.int64();\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Segment message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TensorProto.Segment} Segment\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Segment.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Segment message.\n             * @function verify\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Segment.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    if (!$util.isInteger(message.begin) && !(message.begin && $util.isInteger(message.begin.low) && $util.isInteger(message.begin.high)))\n                        return \"begin: integer|Long expected\";\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    if (!$util.isInteger(message.end) && !(message.end && $util.isInteger(message.end.low) && $util.isInteger(message.end.high)))\n                        return \"end: integer|Long expected\";\n                return null;\n            };\n\n            /**\n             * Creates a Segment message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TensorProto.Segment} Segment\n             */\n            Segment.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TensorProto.Segment)\n                    return object;\n                var message = new $root.onnx.TensorProto.Segment();\n                if (object.begin != null)\n                    if ($util.Long)\n                        (message.begin = $util.Long.fromValue(object.begin)).unsigned = false;\n                    else if (typeof object.begin === \"string\")\n                        message.begin = parseInt(object.begin, 10);\n                    else if (typeof object.begin === \"number\")\n                        message.begin = object.begin;\n                    else if (typeof object.begin === \"object\")\n                        message.begin = new $util.LongBits(object.begin.low >>> 0, object.begin.high >>> 0).toNumber();\n                if (object.end != null)\n                    if ($util.Long)\n                        (message.end = $util.Long.fromValue(object.end)).unsigned = false;\n                    else if (typeof object.end === \"string\")\n                        message.end = parseInt(object.end, 10);\n                    else if (typeof object.end === \"number\")\n                        message.end = object.end;\n                    else if (typeof object.end === \"object\")\n                        message.end = new $util.LongBits(object.end.low >>> 0, object.end.high >>> 0).toNumber();\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Segment message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.Segment} message Segment\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Segment.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.begin = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.begin = options.longs === String ? \"0\" : 0;\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.end = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.end = options.longs === String ? \"0\" : 0;\n                }\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    if (typeof message.begin === \"number\")\n                        object.begin = options.longs === String ? String(message.begin) : message.begin;\n                    else\n                        object.begin = options.longs === String ? $util.Long.prototype.toString.call(message.begin) : options.longs === Number ? new $util.LongBits(message.begin.low >>> 0, message.begin.high >>> 0).toNumber() : message.begin;\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    if (typeof message.end === \"number\")\n                        object.end = options.longs === String ? String(message.end) : message.end;\n                    else\n                        object.end = options.longs === String ? $util.Long.prototype.toString.call(message.end) : options.longs === Number ? new $util.LongBits(message.end.low >>> 0, message.end.high >>> 0).toNumber() : message.end;\n                return object;\n            };\n\n            /**\n             * Converts this Segment to JSON.\n             * @function toJSON\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Segment.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for Segment\n             * @function getTypeUrl\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            Segment.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/onnx.TensorProto.Segment\";\n            };\n\n            return Segment;\n        })();\n\n        /**\n         * DataLocation enum.\n         * @name onnx.TensorProto.DataLocation\n         * @enum {number}\n         * @property {number} DEFAULT=0 DEFAULT value\n         * @property {number} EXTERNAL=1 EXTERNAL value\n         */\n        TensorProto.DataLocation = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"DEFAULT\"] = 0;\n            values[valuesById[1] = \"EXTERNAL\"] = 1;\n            return values;\n        })();\n\n        return TensorProto;\n    })();\n\n    onnx.SparseTensorProto = (function() {\n\n        /**\n         * Properties of a SparseTensorProto.\n         * @memberof onnx\n         * @interface ISparseTensorProto\n         * @property {onnx.ITensorProto|null} [values] SparseTensorProto values\n         * @property {onnx.ITensorProto|null} [indices] SparseTensorProto indices\n         * @property {Array.<number|Long>|null} [dims] SparseTensorProto dims\n         */\n\n        /**\n         * Constructs a new SparseTensorProto.\n         * @memberof onnx\n         * @classdesc Represents a SparseTensorProto.\n         * @implements ISparseTensorProto\n         * @constructor\n         * @param {onnx.ISparseTensorProto=} [properties] Properties to set\n         */\n        function SparseTensorProto(properties) {\n            this.dims = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * SparseTensorProto values.\n         * @member {onnx.ITensorProto|null|undefined} values\n         * @memberof onnx.SparseTensorProto\n         * @instance\n         */\n        SparseTensorProto.prototype.values = null;\n\n        /**\n         * SparseTensorProto indices.\n         * @member {onnx.ITensorProto|null|undefined} indices\n         * @memberof onnx.SparseTensorProto\n         * @instance\n         */\n        SparseTensorProto.prototype.indices = null;\n\n        /**\n         * SparseTensorProto dims.\n         * @member {Array.<number|Long>} dims\n         * @memberof onnx.SparseTensorProto\n         * @instance\n         */\n        SparseTensorProto.prototype.dims = $util.emptyArray;\n\n        /**\n         * Creates a new SparseTensorProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.SparseTensorProto\n         * @static\n         * @param {onnx.ISparseTensorProto=} [properties] Properties to set\n         * @returns {onnx.SparseTensorProto} SparseTensorProto instance\n         */\n        SparseTensorProto.create = function create(properties) {\n            return new SparseTensorProto(properties);\n        };\n\n        /**\n         * Encodes the specified SparseTensorProto message. Does not implicitly {@link onnx.SparseTensorProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.SparseTensorProto\n         * @static\n         * @param {onnx.ISparseTensorProto} message SparseTensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        SparseTensorProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.values != null && Object.hasOwnProperty.call(message, \"values\"))\n                $root.onnx.TensorProto.encode(message.values, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.indices != null && Object.hasOwnProperty.call(message, \"indices\"))\n                $root.onnx.TensorProto.encode(message.indices, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.dims != null && message.dims.length) {\n                writer.uint32(/* id 3, wireType 2 =*/26).fork();\n                for (var i = 0; i < message.dims.length; ++i)\n                    writer.int64(message.dims[i]);\n                writer.ldelim();\n            }\n            return writer;\n        };\n\n        /**\n         * Encodes the specified SparseTensorProto message, length delimited. Does not implicitly {@link onnx.SparseTensorProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.SparseTensorProto\n         * @static\n         * @param {onnx.ISparseTensorProto} message SparseTensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        SparseTensorProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a SparseTensorProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.SparseTensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.SparseTensorProto} SparseTensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        SparseTensorProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.SparseTensorProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.values = $root.onnx.TensorProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 2: {\n                        message.indices = $root.onnx.TensorProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 3: {\n                        if (!(message.dims && message.dims.length))\n                            message.dims = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.dims.push(reader.int64());\n                        } else\n                            message.dims.push(reader.int64());\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a SparseTensorProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.SparseTensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.SparseTensorProto} SparseTensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        SparseTensorProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a SparseTensorProto message.\n         * @function verify\n         * @memberof onnx.SparseTensorProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        SparseTensorProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.values != null && message.hasOwnProperty(\"values\")) {\n                var error = $root.onnx.TensorProto.verify(message.values);\n                if (error)\n                    return \"values.\" + error;\n            }\n            if (message.indices != null && message.hasOwnProperty(\"indices\")) {\n                var error = $root.onnx.TensorProto.verify(message.indices);\n                if (error)\n                    return \"indices.\" + error;\n            }\n            if (message.dims != null && message.hasOwnProperty(\"dims\")) {\n                if (!Array.isArray(message.dims))\n                    return \"dims: array expected\";\n                for (var i = 0; i < message.dims.length; ++i)\n                    if (!$util.isInteger(message.dims[i]) && !(message.dims[i] && $util.isInteger(message.dims[i].low) && $util.isInteger(message.dims[i].high)))\n                        return \"dims: integer|Long[] expected\";\n            }\n            return null;\n        };\n\n        /**\n         * Creates a SparseTensorProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.SparseTensorProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.SparseTensorProto} SparseTensorProto\n         */\n        SparseTensorProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.SparseTensorProto)\n                return object;\n            var message = new $root.onnx.SparseTensorProto();\n            if (object.values != null) {\n                if (typeof object.values !== \"object\")\n                    throw TypeError(\".onnx.SparseTensorProto.values: object expected\");\n                message.values = $root.onnx.TensorProto.fromObject(object.values);\n            }\n            if (object.indices != null) {\n                if (typeof object.indices !== \"object\")\n                    throw TypeError(\".onnx.SparseTensorProto.indices: object expected\");\n                message.indices = $root.onnx.TensorProto.fromObject(object.indices);\n            }\n            if (object.dims) {\n                if (!Array.isArray(object.dims))\n                    throw TypeError(\".onnx.SparseTensorProto.dims: array expected\");\n                message.dims = [];\n                for (var i = 0; i < object.dims.length; ++i)\n                    if ($util.Long)\n                        (message.dims[i] = $util.Long.fromValue(object.dims[i])).unsigned = false;\n                    else if (typeof object.dims[i] === \"string\")\n                        message.dims[i] = parseInt(object.dims[i], 10);\n                    else if (typeof object.dims[i] === \"number\")\n                        message.dims[i] = object.dims[i];\n                    else if (typeof object.dims[i] === \"object\")\n                        message.dims[i] = new $util.LongBits(object.dims[i].low >>> 0, object.dims[i].high >>> 0).toNumber();\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a SparseTensorProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.SparseTensorProto\n         * @static\n         * @param {onnx.SparseTensorProto} message SparseTensorProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        SparseTensorProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.dims = [];\n            if (options.defaults) {\n                object.values = null;\n                object.indices = null;\n            }\n            if (message.values != null && message.hasOwnProperty(\"values\"))\n                object.values = $root.onnx.TensorProto.toObject(message.values, options);\n            if (message.indices != null && message.hasOwnProperty(\"indices\"))\n                object.indices = $root.onnx.TensorProto.toObject(message.indices, options);\n            if (message.dims && message.dims.length) {\n                object.dims = [];\n                for (var j = 0; j < message.dims.length; ++j)\n                    if (typeof message.dims[j] === \"number\")\n                        object.dims[j] = options.longs === String ? String(message.dims[j]) : message.dims[j];\n                    else\n                        object.dims[j] = options.longs === String ? $util.Long.prototype.toString.call(message.dims[j]) : options.longs === Number ? new $util.LongBits(message.dims[j].low >>> 0, message.dims[j].high >>> 0).toNumber() : message.dims[j];\n            }\n            return object;\n        };\n\n        /**\n         * Converts this SparseTensorProto to JSON.\n         * @function toJSON\n         * @memberof onnx.SparseTensorProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        SparseTensorProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for SparseTensorProto\n         * @function getTypeUrl\n         * @memberof onnx.SparseTensorProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        SparseTensorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.SparseTensorProto\";\n        };\n\n        return SparseTensorProto;\n    })();\n\n    onnx.TensorShapeProto = (function() {\n\n        /**\n         * Properties of a TensorShapeProto.\n         * @memberof onnx\n         * @interface ITensorShapeProto\n         * @property {Array.<onnx.TensorShapeProto.IDimension>|null} [dim] TensorShapeProto dim\n         */\n\n        /**\n         * Constructs a new TensorShapeProto.\n         * @memberof onnx\n         * @classdesc Represents a TensorShapeProto.\n         * @implements ITensorShapeProto\n         * @constructor\n         * @param {onnx.ITensorShapeProto=} [properties] Properties to set\n         */\n        function TensorShapeProto(properties) {\n            this.dim = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorShapeProto dim.\n         * @member {Array.<onnx.TensorShapeProto.IDimension>} dim\n         * @memberof onnx.TensorShapeProto\n         * @instance\n         */\n        TensorShapeProto.prototype.dim = $util.emptyArray;\n\n        /**\n         * Creates a new TensorShapeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto=} [properties] Properties to set\n         * @returns {onnx.TensorShapeProto} TensorShapeProto instance\n         */\n        TensorShapeProto.create = function create(properties) {\n            return new TensorShapeProto(properties);\n        };\n\n        /**\n         * Encodes the specified TensorShapeProto message. Does not implicitly {@link onnx.TensorShapeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto} message TensorShapeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorShapeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.dim != null && message.dim.length)\n                for (var i = 0; i < message.dim.length; ++i)\n                    $root.onnx.TensorShapeProto.Dimension.encode(message.dim[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorShapeProto message, length delimited. Does not implicitly {@link onnx.TensorShapeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto} message TensorShapeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorShapeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorShapeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorShapeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorShapeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        if (!(message.dim && message.dim.length))\n                            message.dim = [];\n                        message.dim.push($root.onnx.TensorShapeProto.Dimension.decode(reader, reader.uint32()));\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorShapeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorShapeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorShapeProto message.\n         * @function verify\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorShapeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.dim != null && message.hasOwnProperty(\"dim\")) {\n                if (!Array.isArray(message.dim))\n                    return \"dim: array expected\";\n                for (var i = 0; i < message.dim.length; ++i) {\n                    var error = $root.onnx.TensorShapeProto.Dimension.verify(message.dim[i]);\n                    if (error)\n                        return \"dim.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorShapeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         */\n        TensorShapeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorShapeProto)\n                return object;\n            var message = new $root.onnx.TensorShapeProto();\n            if (object.dim) {\n                if (!Array.isArray(object.dim))\n                    throw TypeError(\".onnx.TensorShapeProto.dim: array expected\");\n                message.dim = [];\n                for (var i = 0; i < object.dim.length; ++i) {\n                    if (typeof object.dim[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorShapeProto.dim: object expected\");\n                    message.dim[i] = $root.onnx.TensorShapeProto.Dimension.fromObject(object.dim[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorShapeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.TensorShapeProto} message TensorShapeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorShapeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.dim = [];\n            if (message.dim && message.dim.length) {\n                object.dim = [];\n                for (var j = 0; j < message.dim.length; ++j)\n                    object.dim[j] = $root.onnx.TensorShapeProto.Dimension.toObject(message.dim[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TensorShapeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorShapeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorShapeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for TensorShapeProto\n         * @function getTypeUrl\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        TensorShapeProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.TensorShapeProto\";\n        };\n\n        TensorShapeProto.Dimension = (function() {\n\n            /**\n             * Properties of a Dimension.\n             * @memberof onnx.TensorShapeProto\n             * @interface IDimension\n             * @property {number|Long|null} [dimValue] Dimension dimValue\n             * @property {string|null} [dimParam] Dimension dimParam\n             * @property {string|null} [denotation] Dimension denotation\n             */\n\n            /**\n             * Constructs a new Dimension.\n             * @memberof onnx.TensorShapeProto\n             * @classdesc Represents a Dimension.\n             * @implements IDimension\n             * @constructor\n             * @param {onnx.TensorShapeProto.IDimension=} [properties] Properties to set\n             */\n            function Dimension(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Dimension dimValue.\n             * @member {number|Long|null|undefined} dimValue\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.dimValue = null;\n\n            /**\n             * Dimension dimParam.\n             * @member {string|null|undefined} dimParam\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.dimParam = null;\n\n            /**\n             * Dimension denotation.\n             * @member {string} denotation\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.denotation = \"\";\n\n            // OneOf field names bound to virtual getters and setters\n            var $oneOfFields;\n\n            /**\n             * Dimension value.\n             * @member {\"dimValue\"|\"dimParam\"|undefined} value\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Object.defineProperty(Dimension.prototype, \"value\", {\n                get: $util.oneOfGetter($oneOfFields = [\"dimValue\", \"dimParam\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n\n            /**\n             * Creates a new Dimension instance using the specified properties.\n             * @function create\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension=} [properties] Properties to set\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension instance\n             */\n            Dimension.create = function create(properties) {\n                return new Dimension(properties);\n            };\n\n            /**\n             * Encodes the specified Dimension message. Does not implicitly {@link onnx.TensorShapeProto.Dimension.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension} message Dimension message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Dimension.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.dimValue != null && Object.hasOwnProperty.call(message, \"dimValue\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.dimValue);\n                if (message.dimParam != null && Object.hasOwnProperty.call(message, \"dimParam\"))\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.dimParam);\n                if (message.denotation != null && Object.hasOwnProperty.call(message, \"denotation\"))\n                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.denotation);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Dimension message, length delimited. Does not implicitly {@link onnx.TensorShapeProto.Dimension.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension} message Dimension message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Dimension.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Dimension message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Dimension.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorShapeProto.Dimension();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1: {\n                            message.dimValue = reader.int64();\n                            break;\n                        }\n                    case 2: {\n                            message.dimParam = reader.string();\n                            break;\n                        }\n                    case 3: {\n                            message.denotation = reader.string();\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Dimension message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Dimension.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Dimension message.\n             * @function verify\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Dimension.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                var properties = {};\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\")) {\n                    properties.value = 1;\n                    if (!$util.isInteger(message.dimValue) && !(message.dimValue && $util.isInteger(message.dimValue.low) && $util.isInteger(message.dimValue.high)))\n                        return \"dimValue: integer|Long expected\";\n                }\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\")) {\n                    if (properties.value === 1)\n                        return \"value: multiple values\";\n                    properties.value = 1;\n                    if (!$util.isString(message.dimParam))\n                        return \"dimParam: string expected\";\n                }\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    if (!$util.isString(message.denotation))\n                        return \"denotation: string expected\";\n                return null;\n            };\n\n            /**\n             * Creates a Dimension message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             */\n            Dimension.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TensorShapeProto.Dimension)\n                    return object;\n                var message = new $root.onnx.TensorShapeProto.Dimension();\n                if (object.dimValue != null)\n                    if ($util.Long)\n                        (message.dimValue = $util.Long.fromValue(object.dimValue)).unsigned = false;\n                    else if (typeof object.dimValue === \"string\")\n                        message.dimValue = parseInt(object.dimValue, 10);\n                    else if (typeof object.dimValue === \"number\")\n                        message.dimValue = object.dimValue;\n                    else if (typeof object.dimValue === \"object\")\n                        message.dimValue = new $util.LongBits(object.dimValue.low >>> 0, object.dimValue.high >>> 0).toNumber();\n                if (object.dimParam != null)\n                    message.dimParam = String(object.dimParam);\n                if (object.denotation != null)\n                    message.denotation = String(object.denotation);\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Dimension message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.Dimension} message Dimension\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Dimension.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults)\n                    object.denotation = \"\";\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\")) {\n                    if (typeof message.dimValue === \"number\")\n                        object.dimValue = options.longs === String ? String(message.dimValue) : message.dimValue;\n                    else\n                        object.dimValue = options.longs === String ? $util.Long.prototype.toString.call(message.dimValue) : options.longs === Number ? new $util.LongBits(message.dimValue.low >>> 0, message.dimValue.high >>> 0).toNumber() : message.dimValue;\n                    if (options.oneofs)\n                        object.value = \"dimValue\";\n                }\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\")) {\n                    object.dimParam = message.dimParam;\n                    if (options.oneofs)\n                        object.value = \"dimParam\";\n                }\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    object.denotation = message.denotation;\n                return object;\n            };\n\n            /**\n             * Converts this Dimension to JSON.\n             * @function toJSON\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Dimension.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for Dimension\n             * @function getTypeUrl\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            Dimension.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/onnx.TensorShapeProto.Dimension\";\n            };\n\n            return Dimension;\n        })();\n\n        return TensorShapeProto;\n    })();\n\n    onnx.TypeProto = (function() {\n\n        /**\n         * Properties of a TypeProto.\n         * @memberof onnx\n         * @interface ITypeProto\n         * @property {onnx.TypeProto.ITensor|null} [tensorType] TypeProto tensorType\n         * @property {onnx.TypeProto.ISequence|null} [sequenceType] TypeProto sequenceType\n         * @property {onnx.TypeProto.IMap|null} [mapType] TypeProto mapType\n         * @property {onnx.TypeProto.IOptional|null} [optionalType] TypeProto optionalType\n         * @property {onnx.TypeProto.ISparseTensor|null} [sparseTensorType] TypeProto sparseTensorType\n         * @property {string|null} [denotation] TypeProto denotation\n         */\n\n        /**\n         * Constructs a new TypeProto.\n         * @memberof onnx\n         * @classdesc Represents a TypeProto.\n         * @implements ITypeProto\n         * @constructor\n         * @param {onnx.ITypeProto=} [properties] Properties to set\n         */\n        function TypeProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TypeProto tensorType.\n         * @member {onnx.TypeProto.ITensor|null|undefined} tensorType\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.tensorType = null;\n\n        /**\n         * TypeProto sequenceType.\n         * @member {onnx.TypeProto.ISequence|null|undefined} sequenceType\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.sequenceType = null;\n\n        /**\n         * TypeProto mapType.\n         * @member {onnx.TypeProto.IMap|null|undefined} mapType\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.mapType = null;\n\n        /**\n         * TypeProto optionalType.\n         * @member {onnx.TypeProto.IOptional|null|undefined} optionalType\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.optionalType = null;\n\n        /**\n         * TypeProto sparseTensorType.\n         * @member {onnx.TypeProto.ISparseTensor|null|undefined} sparseTensorType\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.sparseTensorType = null;\n\n        /**\n         * TypeProto denotation.\n         * @member {string} denotation\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.denotation = \"\";\n\n        // OneOf field names bound to virtual getters and setters\n        var $oneOfFields;\n\n        /**\n         * TypeProto value.\n         * @member {\"tensorType\"|\"sequenceType\"|\"mapType\"|\"optionalType\"|\"sparseTensorType\"|undefined} value\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        Object.defineProperty(TypeProto.prototype, \"value\", {\n            get: $util.oneOfGetter($oneOfFields = [\"tensorType\", \"sequenceType\", \"mapType\", \"optionalType\", \"sparseTensorType\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new TypeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto=} [properties] Properties to set\n         * @returns {onnx.TypeProto} TypeProto instance\n         */\n        TypeProto.create = function create(properties) {\n            return new TypeProto(properties);\n        };\n\n        /**\n         * Encodes the specified TypeProto message. Does not implicitly {@link onnx.TypeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto} message TypeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TypeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.tensorType != null && Object.hasOwnProperty.call(message, \"tensorType\"))\n                $root.onnx.TypeProto.Tensor.encode(message.tensorType, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.sequenceType != null && Object.hasOwnProperty.call(message, \"sequenceType\"))\n                $root.onnx.TypeProto.Sequence.encode(message.sequenceType, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n            if (message.mapType != null && Object.hasOwnProperty.call(message, \"mapType\"))\n                $root.onnx.TypeProto.Map.encode(message.mapType, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.denotation != null && Object.hasOwnProperty.call(message, \"denotation\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.denotation);\n            if (message.sparseTensorType != null && Object.hasOwnProperty.call(message, \"sparseTensorType\"))\n                $root.onnx.TypeProto.SparseTensor.encode(message.sparseTensorType, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\n            if (message.optionalType != null && Object.hasOwnProperty.call(message, \"optionalType\"))\n                $root.onnx.TypeProto.Optional.encode(message.optionalType, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TypeProto message, length delimited. Does not implicitly {@link onnx.TypeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto} message TypeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TypeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TypeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TypeProto} TypeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TypeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.tensorType = $root.onnx.TypeProto.Tensor.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 4: {\n                        message.sequenceType = $root.onnx.TypeProto.Sequence.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 5: {\n                        message.mapType = $root.onnx.TypeProto.Map.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 9: {\n                        message.optionalType = $root.onnx.TypeProto.Optional.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 8: {\n                        message.sparseTensorType = $root.onnx.TypeProto.SparseTensor.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 6: {\n                        message.denotation = reader.string();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TypeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TypeProto} TypeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TypeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TypeProto message.\n         * @function verify\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TypeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            var properties = {};\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\")) {\n                properties.value = 1;\n                {\n                    var error = $root.onnx.TypeProto.Tensor.verify(message.tensorType);\n                    if (error)\n                        return \"tensorType.\" + error;\n                }\n            }\n            if (message.sequenceType != null && message.hasOwnProperty(\"sequenceType\")) {\n                if (properties.value === 1)\n                    return \"value: multiple values\";\n                properties.value = 1;\n                {\n                    var error = $root.onnx.TypeProto.Sequence.verify(message.sequenceType);\n                    if (error)\n                        return \"sequenceType.\" + error;\n                }\n            }\n            if (message.mapType != null && message.hasOwnProperty(\"mapType\")) {\n                if (properties.value === 1)\n                    return \"value: multiple values\";\n                properties.value = 1;\n                {\n                    var error = $root.onnx.TypeProto.Map.verify(message.mapType);\n                    if (error)\n                        return \"mapType.\" + error;\n                }\n            }\n            if (message.optionalType != null && message.hasOwnProperty(\"optionalType\")) {\n                if (properties.value === 1)\n                    return \"value: multiple values\";\n                properties.value = 1;\n                {\n                    var error = $root.onnx.TypeProto.Optional.verify(message.optionalType);\n                    if (error)\n                        return \"optionalType.\" + error;\n                }\n            }\n            if (message.sparseTensorType != null && message.hasOwnProperty(\"sparseTensorType\")) {\n                if (properties.value === 1)\n                    return \"value: multiple values\";\n                properties.value = 1;\n                {\n                    var error = $root.onnx.TypeProto.SparseTensor.verify(message.sparseTensorType);\n                    if (error)\n                        return \"sparseTensorType.\" + error;\n                }\n            }\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                if (!$util.isString(message.denotation))\n                    return \"denotation: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a TypeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TypeProto} TypeProto\n         */\n        TypeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TypeProto)\n                return object;\n            var message = new $root.onnx.TypeProto();\n            if (object.tensorType != null) {\n                if (typeof object.tensorType !== \"object\")\n                    throw TypeError(\".onnx.TypeProto.tensorType: object expected\");\n                message.tensorType = $root.onnx.TypeProto.Tensor.fromObject(object.tensorType);\n            }\n            if (object.sequenceType != null) {\n                if (typeof object.sequenceType !== \"object\")\n                    throw TypeError(\".onnx.TypeProto.sequenceType: object expected\");\n                message.sequenceType = $root.onnx.TypeProto.Sequence.fromObject(object.sequenceType);\n            }\n            if (object.mapType != null) {\n                if (typeof object.mapType !== \"object\")\n                    throw TypeError(\".onnx.TypeProto.mapType: object expected\");\n                message.mapType = $root.onnx.TypeProto.Map.fromObject(object.mapType);\n            }\n            if (object.optionalType != null) {\n                if (typeof object.optionalType !== \"object\")\n                    throw TypeError(\".onnx.TypeProto.optionalType: object expected\");\n                message.optionalType = $root.onnx.TypeProto.Optional.fromObject(object.optionalType);\n            }\n            if (object.sparseTensorType != null) {\n                if (typeof object.sparseTensorType !== \"object\")\n                    throw TypeError(\".onnx.TypeProto.sparseTensorType: object expected\");\n                message.sparseTensorType = $root.onnx.TypeProto.SparseTensor.fromObject(object.sparseTensorType);\n            }\n            if (object.denotation != null)\n                message.denotation = String(object.denotation);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TypeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.TypeProto} message TypeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TypeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults)\n                object.denotation = \"\";\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\")) {\n                object.tensorType = $root.onnx.TypeProto.Tensor.toObject(message.tensorType, options);\n                if (options.oneofs)\n                    object.value = \"tensorType\";\n            }\n            if (message.sequenceType != null && message.hasOwnProperty(\"sequenceType\")) {\n                object.sequenceType = $root.onnx.TypeProto.Sequence.toObject(message.sequenceType, options);\n                if (options.oneofs)\n                    object.value = \"sequenceType\";\n            }\n            if (message.mapType != null && message.hasOwnProperty(\"mapType\")) {\n                object.mapType = $root.onnx.TypeProto.Map.toObject(message.mapType, options);\n                if (options.oneofs)\n                    object.value = \"mapType\";\n            }\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                object.denotation = message.denotation;\n            if (message.sparseTensorType != null && message.hasOwnProperty(\"sparseTensorType\")) {\n                object.sparseTensorType = $root.onnx.TypeProto.SparseTensor.toObject(message.sparseTensorType, options);\n                if (options.oneofs)\n                    object.value = \"sparseTensorType\";\n            }\n            if (message.optionalType != null && message.hasOwnProperty(\"optionalType\")) {\n                object.optionalType = $root.onnx.TypeProto.Optional.toObject(message.optionalType, options);\n                if (options.oneofs)\n                    object.value = \"optionalType\";\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TypeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TypeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TypeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for TypeProto\n         * @function getTypeUrl\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        TypeProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.TypeProto\";\n        };\n\n        TypeProto.Tensor = (function() {\n\n            /**\n             * Properties of a Tensor.\n             * @memberof onnx.TypeProto\n             * @interface ITensor\n             * @property {number|null} [elemType] Tensor elemType\n             * @property {onnx.ITensorShapeProto|null} [shape] Tensor shape\n             */\n\n            /**\n             * Constructs a new Tensor.\n             * @memberof onnx.TypeProto\n             * @classdesc Represents a Tensor.\n             * @implements ITensor\n             * @constructor\n             * @param {onnx.TypeProto.ITensor=} [properties] Properties to set\n             */\n            function Tensor(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Tensor elemType.\n             * @member {number} elemType\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             */\n            Tensor.prototype.elemType = 0;\n\n            /**\n             * Tensor shape.\n             * @member {onnx.ITensorShapeProto|null|undefined} shape\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             */\n            Tensor.prototype.shape = null;\n\n            /**\n             * Creates a new Tensor instance using the specified properties.\n             * @function create\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor=} [properties] Properties to set\n             * @returns {onnx.TypeProto.Tensor} Tensor instance\n             */\n            Tensor.create = function create(properties) {\n                return new Tensor(properties);\n            };\n\n            /**\n             * Encodes the specified Tensor message. Does not implicitly {@link onnx.TypeProto.Tensor.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor} message Tensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Tensor.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.elemType != null && Object.hasOwnProperty.call(message, \"elemType\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.elemType);\n                if (message.shape != null && Object.hasOwnProperty.call(message, \"shape\"))\n                    $root.onnx.TensorShapeProto.encode(message.shape, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Tensor message, length delimited. Does not implicitly {@link onnx.TypeProto.Tensor.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor} message Tensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Tensor.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Tensor message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Tensor.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto.Tensor();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1: {\n                            message.elemType = reader.int32();\n                            break;\n                        }\n                    case 2: {\n                            message.shape = $root.onnx.TensorShapeProto.decode(reader, reader.uint32());\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Tensor message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Tensor.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Tensor message.\n             * @function verify\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Tensor.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    if (!$util.isInteger(message.elemType))\n                        return \"elemType: integer expected\";\n                if (message.shape != null && message.hasOwnProperty(\"shape\")) {\n                    var error = $root.onnx.TensorShapeProto.verify(message.shape);\n                    if (error)\n                        return \"shape.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a Tensor message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             */\n            Tensor.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TypeProto.Tensor)\n                    return object;\n                var message = new $root.onnx.TypeProto.Tensor();\n                if (object.elemType != null)\n                    message.elemType = object.elemType | 0;\n                if (object.shape != null) {\n                    if (typeof object.shape !== \"object\")\n                        throw TypeError(\".onnx.TypeProto.Tensor.shape: object expected\");\n                    message.shape = $root.onnx.TensorShapeProto.fromObject(object.shape);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Tensor message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.Tensor} message Tensor\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Tensor.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    object.elemType = 0;\n                    object.shape = null;\n                }\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    object.elemType = message.elemType;\n                if (message.shape != null && message.hasOwnProperty(\"shape\"))\n                    object.shape = $root.onnx.TensorShapeProto.toObject(message.shape, options);\n                return object;\n            };\n\n            /**\n             * Converts this Tensor to JSON.\n             * @function toJSON\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Tensor.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for Tensor\n             * @function getTypeUrl\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            Tensor.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/onnx.TypeProto.Tensor\";\n            };\n\n            return Tensor;\n        })();\n\n        TypeProto.Sequence = (function() {\n\n            /**\n             * Properties of a Sequence.\n             * @memberof onnx.TypeProto\n             * @interface ISequence\n             * @property {onnx.ITypeProto|null} [elemType] Sequence elemType\n             */\n\n            /**\n             * Constructs a new Sequence.\n             * @memberof onnx.TypeProto\n             * @classdesc Represents a Sequence.\n             * @implements ISequence\n             * @constructor\n             * @param {onnx.TypeProto.ISequence=} [properties] Properties to set\n             */\n            function Sequence(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Sequence elemType.\n             * @member {onnx.ITypeProto|null|undefined} elemType\n             * @memberof onnx.TypeProto.Sequence\n             * @instance\n             */\n            Sequence.prototype.elemType = null;\n\n            /**\n             * Creates a new Sequence instance using the specified properties.\n             * @function create\n             * @memberof onnx.TypeProto.Sequence\n             * @static\n             * @param {onnx.TypeProto.ISequence=} [properties] Properties to set\n             * @returns {onnx.TypeProto.Sequence} Sequence instance\n             */\n            Sequence.create = function create(properties) {\n                return new Sequence(properties);\n            };\n\n            /**\n             * Encodes the specified Sequence message. Does not implicitly {@link onnx.TypeProto.Sequence.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TypeProto.Sequence\n             * @static\n             * @param {onnx.TypeProto.ISequence} message Sequence message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Sequence.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.elemType != null && Object.hasOwnProperty.call(message, \"elemType\"))\n                    $root.onnx.TypeProto.encode(message.elemType, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Sequence message, length delimited. Does not implicitly {@link onnx.TypeProto.Sequence.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TypeProto.Sequence\n             * @static\n             * @param {onnx.TypeProto.ISequence} message Sequence message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Sequence.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Sequence message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TypeProto.Sequence\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TypeProto.Sequence} Sequence\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Sequence.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto.Sequence();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1: {\n                            message.elemType = $root.onnx.TypeProto.decode(reader, reader.uint32());\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Sequence message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TypeProto.Sequence\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TypeProto.Sequence} Sequence\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Sequence.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Sequence message.\n             * @function verify\n             * @memberof onnx.TypeProto.Sequence\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Sequence.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\")) {\n                    var error = $root.onnx.TypeProto.verify(message.elemType);\n                    if (error)\n                        return \"elemType.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a Sequence message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TypeProto.Sequence\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TypeProto.Sequence} Sequence\n             */\n            Sequence.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TypeProto.Sequence)\n                    return object;\n                var message = new $root.onnx.TypeProto.Sequence();\n                if (object.elemType != null) {\n                    if (typeof object.elemType !== \"object\")\n                        throw TypeError(\".onnx.TypeProto.Sequence.elemType: object expected\");\n                    message.elemType = $root.onnx.TypeProto.fromObject(object.elemType);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Sequence message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TypeProto.Sequence\n             * @static\n             * @param {onnx.TypeProto.Sequence} message Sequence\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Sequence.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults)\n                    object.elemType = null;\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    object.elemType = $root.onnx.TypeProto.toObject(message.elemType, options);\n                return object;\n            };\n\n            /**\n             * Converts this Sequence to JSON.\n             * @function toJSON\n             * @memberof onnx.TypeProto.Sequence\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Sequence.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for Sequence\n             * @function getTypeUrl\n             * @memberof onnx.TypeProto.Sequence\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            Sequence.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/onnx.TypeProto.Sequence\";\n            };\n\n            return Sequence;\n        })();\n\n        TypeProto.Map = (function() {\n\n            /**\n             * Properties of a Map.\n             * @memberof onnx.TypeProto\n             * @interface IMap\n             * @property {number|null} [keyType] Map keyType\n             * @property {onnx.ITypeProto|null} [valueType] Map valueType\n             */\n\n            /**\n             * Constructs a new Map.\n             * @memberof onnx.TypeProto\n             * @classdesc Represents a Map.\n             * @implements IMap\n             * @constructor\n             * @param {onnx.TypeProto.IMap=} [properties] Properties to set\n             */\n            function Map(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Map keyType.\n             * @member {number} keyType\n             * @memberof onnx.TypeProto.Map\n             * @instance\n             */\n            Map.prototype.keyType = 0;\n\n            /**\n             * Map valueType.\n             * @member {onnx.ITypeProto|null|undefined} valueType\n             * @memberof onnx.TypeProto.Map\n             * @instance\n             */\n            Map.prototype.valueType = null;\n\n            /**\n             * Creates a new Map instance using the specified properties.\n             * @function create\n             * @memberof onnx.TypeProto.Map\n             * @static\n             * @param {onnx.TypeProto.IMap=} [properties] Properties to set\n             * @returns {onnx.TypeProto.Map} Map instance\n             */\n            Map.create = function create(properties) {\n                return new Map(properties);\n            };\n\n            /**\n             * Encodes the specified Map message. Does not implicitly {@link onnx.TypeProto.Map.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TypeProto.Map\n             * @static\n             * @param {onnx.TypeProto.IMap} message Map message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Map.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.keyType != null && Object.hasOwnProperty.call(message, \"keyType\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.keyType);\n                if (message.valueType != null && Object.hasOwnProperty.call(message, \"valueType\"))\n                    $root.onnx.TypeProto.encode(message.valueType, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Map message, length delimited. Does not implicitly {@link onnx.TypeProto.Map.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TypeProto.Map\n             * @static\n             * @param {onnx.TypeProto.IMap} message Map message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Map.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Map message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TypeProto.Map\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TypeProto.Map} Map\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Map.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto.Map();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1: {\n                            message.keyType = reader.int32();\n                            break;\n                        }\n                    case 2: {\n                            message.valueType = $root.onnx.TypeProto.decode(reader, reader.uint32());\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Map message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TypeProto.Map\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TypeProto.Map} Map\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Map.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Map message.\n             * @function verify\n             * @memberof onnx.TypeProto.Map\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Map.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.keyType != null && message.hasOwnProperty(\"keyType\"))\n                    if (!$util.isInteger(message.keyType))\n                        return \"keyType: integer expected\";\n                if (message.valueType != null && message.hasOwnProperty(\"valueType\")) {\n                    var error = $root.onnx.TypeProto.verify(message.valueType);\n                    if (error)\n                        return \"valueType.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a Map message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TypeProto.Map\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TypeProto.Map} Map\n             */\n            Map.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TypeProto.Map)\n                    return object;\n                var message = new $root.onnx.TypeProto.Map();\n                if (object.keyType != null)\n                    message.keyType = object.keyType | 0;\n                if (object.valueType != null) {\n                    if (typeof object.valueType !== \"object\")\n                        throw TypeError(\".onnx.TypeProto.Map.valueType: object expected\");\n                    message.valueType = $root.onnx.TypeProto.fromObject(object.valueType);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Map message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TypeProto.Map\n             * @static\n             * @param {onnx.TypeProto.Map} message Map\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Map.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    object.keyType = 0;\n                    object.valueType = null;\n                }\n                if (message.keyType != null && message.hasOwnProperty(\"keyType\"))\n                    object.keyType = message.keyType;\n                if (message.valueType != null && message.hasOwnProperty(\"valueType\"))\n                    object.valueType = $root.onnx.TypeProto.toObject(message.valueType, options);\n                return object;\n            };\n\n            /**\n             * Converts this Map to JSON.\n             * @function toJSON\n             * @memberof onnx.TypeProto.Map\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Map.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for Map\n             * @function getTypeUrl\n             * @memberof onnx.TypeProto.Map\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            Map.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/onnx.TypeProto.Map\";\n            };\n\n            return Map;\n        })();\n\n        TypeProto.Optional = (function() {\n\n            /**\n             * Properties of an Optional.\n             * @memberof onnx.TypeProto\n             * @interface IOptional\n             * @property {onnx.ITypeProto|null} [elemType] Optional elemType\n             */\n\n            /**\n             * Constructs a new Optional.\n             * @memberof onnx.TypeProto\n             * @classdesc Represents an Optional.\n             * @implements IOptional\n             * @constructor\n             * @param {onnx.TypeProto.IOptional=} [properties] Properties to set\n             */\n            function Optional(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Optional elemType.\n             * @member {onnx.ITypeProto|null|undefined} elemType\n             * @memberof onnx.TypeProto.Optional\n             * @instance\n             */\n            Optional.prototype.elemType = null;\n\n            /**\n             * Creates a new Optional instance using the specified properties.\n             * @function create\n             * @memberof onnx.TypeProto.Optional\n             * @static\n             * @param {onnx.TypeProto.IOptional=} [properties] Properties to set\n             * @returns {onnx.TypeProto.Optional} Optional instance\n             */\n            Optional.create = function create(properties) {\n                return new Optional(properties);\n            };\n\n            /**\n             * Encodes the specified Optional message. Does not implicitly {@link onnx.TypeProto.Optional.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TypeProto.Optional\n             * @static\n             * @param {onnx.TypeProto.IOptional} message Optional message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Optional.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.elemType != null && Object.hasOwnProperty.call(message, \"elemType\"))\n                    $root.onnx.TypeProto.encode(message.elemType, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Optional message, length delimited. Does not implicitly {@link onnx.TypeProto.Optional.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TypeProto.Optional\n             * @static\n             * @param {onnx.TypeProto.IOptional} message Optional message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Optional.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes an Optional message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TypeProto.Optional\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TypeProto.Optional} Optional\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Optional.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto.Optional();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1: {\n                            message.elemType = $root.onnx.TypeProto.decode(reader, reader.uint32());\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes an Optional message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TypeProto.Optional\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TypeProto.Optional} Optional\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Optional.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies an Optional message.\n             * @function verify\n             * @memberof onnx.TypeProto.Optional\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Optional.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\")) {\n                    var error = $root.onnx.TypeProto.verify(message.elemType);\n                    if (error)\n                        return \"elemType.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates an Optional message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TypeProto.Optional\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TypeProto.Optional} Optional\n             */\n            Optional.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TypeProto.Optional)\n                    return object;\n                var message = new $root.onnx.TypeProto.Optional();\n                if (object.elemType != null) {\n                    if (typeof object.elemType !== \"object\")\n                        throw TypeError(\".onnx.TypeProto.Optional.elemType: object expected\");\n                    message.elemType = $root.onnx.TypeProto.fromObject(object.elemType);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from an Optional message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TypeProto.Optional\n             * @static\n             * @param {onnx.TypeProto.Optional} message Optional\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Optional.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults)\n                    object.elemType = null;\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    object.elemType = $root.onnx.TypeProto.toObject(message.elemType, options);\n                return object;\n            };\n\n            /**\n             * Converts this Optional to JSON.\n             * @function toJSON\n             * @memberof onnx.TypeProto.Optional\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Optional.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for Optional\n             * @function getTypeUrl\n             * @memberof onnx.TypeProto.Optional\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            Optional.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/onnx.TypeProto.Optional\";\n            };\n\n            return Optional;\n        })();\n\n        TypeProto.SparseTensor = (function() {\n\n            /**\n             * Properties of a SparseTensor.\n             * @memberof onnx.TypeProto\n             * @interface ISparseTensor\n             * @property {number|null} [elemType] SparseTensor elemType\n             * @property {onnx.ITensorShapeProto|null} [shape] SparseTensor shape\n             */\n\n            /**\n             * Constructs a new SparseTensor.\n             * @memberof onnx.TypeProto\n             * @classdesc Represents a SparseTensor.\n             * @implements ISparseTensor\n             * @constructor\n             * @param {onnx.TypeProto.ISparseTensor=} [properties] Properties to set\n             */\n            function SparseTensor(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * SparseTensor elemType.\n             * @member {number} elemType\n             * @memberof onnx.TypeProto.SparseTensor\n             * @instance\n             */\n            SparseTensor.prototype.elemType = 0;\n\n            /**\n             * SparseTensor shape.\n             * @member {onnx.ITensorShapeProto|null|undefined} shape\n             * @memberof onnx.TypeProto.SparseTensor\n             * @instance\n             */\n            SparseTensor.prototype.shape = null;\n\n            /**\n             * Creates a new SparseTensor instance using the specified properties.\n             * @function create\n             * @memberof onnx.TypeProto.SparseTensor\n             * @static\n             * @param {onnx.TypeProto.ISparseTensor=} [properties] Properties to set\n             * @returns {onnx.TypeProto.SparseTensor} SparseTensor instance\n             */\n            SparseTensor.create = function create(properties) {\n                return new SparseTensor(properties);\n            };\n\n            /**\n             * Encodes the specified SparseTensor message. Does not implicitly {@link onnx.TypeProto.SparseTensor.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TypeProto.SparseTensor\n             * @static\n             * @param {onnx.TypeProto.ISparseTensor} message SparseTensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            SparseTensor.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.elemType != null && Object.hasOwnProperty.call(message, \"elemType\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.elemType);\n                if (message.shape != null && Object.hasOwnProperty.call(message, \"shape\"))\n                    $root.onnx.TensorShapeProto.encode(message.shape, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified SparseTensor message, length delimited. Does not implicitly {@link onnx.TypeProto.SparseTensor.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TypeProto.SparseTensor\n             * @static\n             * @param {onnx.TypeProto.ISparseTensor} message SparseTensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            SparseTensor.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a SparseTensor message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TypeProto.SparseTensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TypeProto.SparseTensor} SparseTensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            SparseTensor.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto.SparseTensor();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1: {\n                            message.elemType = reader.int32();\n                            break;\n                        }\n                    case 2: {\n                            message.shape = $root.onnx.TensorShapeProto.decode(reader, reader.uint32());\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a SparseTensor message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TypeProto.SparseTensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TypeProto.SparseTensor} SparseTensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            SparseTensor.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a SparseTensor message.\n             * @function verify\n             * @memberof onnx.TypeProto.SparseTensor\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            SparseTensor.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    if (!$util.isInteger(message.elemType))\n                        return \"elemType: integer expected\";\n                if (message.shape != null && message.hasOwnProperty(\"shape\")) {\n                    var error = $root.onnx.TensorShapeProto.verify(message.shape);\n                    if (error)\n                        return \"shape.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a SparseTensor message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TypeProto.SparseTensor\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TypeProto.SparseTensor} SparseTensor\n             */\n            SparseTensor.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TypeProto.SparseTensor)\n                    return object;\n                var message = new $root.onnx.TypeProto.SparseTensor();\n                if (object.elemType != null)\n                    message.elemType = object.elemType | 0;\n                if (object.shape != null) {\n                    if (typeof object.shape !== \"object\")\n                        throw TypeError(\".onnx.TypeProto.SparseTensor.shape: object expected\");\n                    message.shape = $root.onnx.TensorShapeProto.fromObject(object.shape);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a SparseTensor message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TypeProto.SparseTensor\n             * @static\n             * @param {onnx.TypeProto.SparseTensor} message SparseTensor\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            SparseTensor.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    object.elemType = 0;\n                    object.shape = null;\n                }\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    object.elemType = message.elemType;\n                if (message.shape != null && message.hasOwnProperty(\"shape\"))\n                    object.shape = $root.onnx.TensorShapeProto.toObject(message.shape, options);\n                return object;\n            };\n\n            /**\n             * Converts this SparseTensor to JSON.\n             * @function toJSON\n             * @memberof onnx.TypeProto.SparseTensor\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            SparseTensor.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for SparseTensor\n             * @function getTypeUrl\n             * @memberof onnx.TypeProto.SparseTensor\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            SparseTensor.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/onnx.TypeProto.SparseTensor\";\n            };\n\n            return SparseTensor;\n        })();\n\n        return TypeProto;\n    })();\n\n    onnx.OperatorSetIdProto = (function() {\n\n        /**\n         * Properties of an OperatorSetIdProto.\n         * @memberof onnx\n         * @interface IOperatorSetIdProto\n         * @property {string|null} [domain] OperatorSetIdProto domain\n         * @property {number|Long|null} [version] OperatorSetIdProto version\n         */\n\n        /**\n         * Constructs a new OperatorSetIdProto.\n         * @memberof onnx\n         * @classdesc Represents an OperatorSetIdProto.\n         * @implements IOperatorSetIdProto\n         * @constructor\n         * @param {onnx.IOperatorSetIdProto=} [properties] Properties to set\n         */\n        function OperatorSetIdProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * OperatorSetIdProto domain.\n         * @member {string} domain\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         */\n        OperatorSetIdProto.prototype.domain = \"\";\n\n        /**\n         * OperatorSetIdProto version.\n         * @member {number|Long} version\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         */\n        OperatorSetIdProto.prototype.version = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * Creates a new OperatorSetIdProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto=} [properties] Properties to set\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto instance\n         */\n        OperatorSetIdProto.create = function create(properties) {\n            return new OperatorSetIdProto(properties);\n        };\n\n        /**\n         * Encodes the specified OperatorSetIdProto message. Does not implicitly {@link onnx.OperatorSetIdProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto} message OperatorSetIdProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        OperatorSetIdProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.domain != null && Object.hasOwnProperty.call(message, \"domain\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.domain);\n            if (message.version != null && Object.hasOwnProperty.call(message, \"version\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.version);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified OperatorSetIdProto message, length delimited. Does not implicitly {@link onnx.OperatorSetIdProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto} message OperatorSetIdProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        OperatorSetIdProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an OperatorSetIdProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        OperatorSetIdProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.OperatorSetIdProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.domain = reader.string();\n                        break;\n                    }\n                case 2: {\n                        message.version = reader.int64();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an OperatorSetIdProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        OperatorSetIdProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an OperatorSetIdProto message.\n         * @function verify\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        OperatorSetIdProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (!$util.isInteger(message.version) && !(message.version && $util.isInteger(message.version.low) && $util.isInteger(message.version.high)))\n                    return \"version: integer|Long expected\";\n            return null;\n        };\n\n        /**\n         * Creates an OperatorSetIdProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         */\n        OperatorSetIdProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.OperatorSetIdProto)\n                return object;\n            var message = new $root.onnx.OperatorSetIdProto();\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.version != null)\n                if ($util.Long)\n                    (message.version = $util.Long.fromValue(object.version)).unsigned = false;\n                else if (typeof object.version === \"string\")\n                    message.version = parseInt(object.version, 10);\n                else if (typeof object.version === \"number\")\n                    message.version = object.version;\n                else if (typeof object.version === \"object\")\n                    message.version = new $util.LongBits(object.version.low >>> 0, object.version.high >>> 0).toNumber();\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an OperatorSetIdProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.OperatorSetIdProto} message OperatorSetIdProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        OperatorSetIdProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.domain = \"\";\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.version = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.version = options.longs === String ? \"0\" : 0;\n            }\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (typeof message.version === \"number\")\n                    object.version = options.longs === String ? String(message.version) : message.version;\n                else\n                    object.version = options.longs === String ? $util.Long.prototype.toString.call(message.version) : options.longs === Number ? new $util.LongBits(message.version.low >>> 0, message.version.high >>> 0).toNumber() : message.version;\n            return object;\n        };\n\n        /**\n         * Converts this OperatorSetIdProto to JSON.\n         * @function toJSON\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        OperatorSetIdProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for OperatorSetIdProto\n         * @function getTypeUrl\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        OperatorSetIdProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.OperatorSetIdProto\";\n        };\n\n        return OperatorSetIdProto;\n    })();\n\n    /**\n     * OperatorStatus enum.\n     * @name onnx.OperatorStatus\n     * @enum {number}\n     * @property {number} EXPERIMENTAL=0 EXPERIMENTAL value\n     * @property {number} STABLE=1 STABLE value\n     */\n    onnx.OperatorStatus = (function() {\n        var valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"EXPERIMENTAL\"] = 0;\n        values[valuesById[1] = \"STABLE\"] = 1;\n        return values;\n    })();\n\n    onnx.FunctionProto = (function() {\n\n        /**\n         * Properties of a FunctionProto.\n         * @memberof onnx\n         * @interface IFunctionProto\n         * @property {string|null} [name] FunctionProto name\n         * @property {Array.<string>|null} [input] FunctionProto input\n         * @property {Array.<string>|null} [output] FunctionProto output\n         * @property {Array.<string>|null} [attribute] FunctionProto attribute\n         * @property {Array.<onnx.IAttributeProto>|null} [attributeProto] FunctionProto attributeProto\n         * @property {Array.<onnx.INodeProto>|null} [node] FunctionProto node\n         * @property {string|null} [docString] FunctionProto docString\n         * @property {Array.<onnx.IOperatorSetIdProto>|null} [opsetImport] FunctionProto opsetImport\n         * @property {string|null} [domain] FunctionProto domain\n         */\n\n        /**\n         * Constructs a new FunctionProto.\n         * @memberof onnx\n         * @classdesc Represents a FunctionProto.\n         * @implements IFunctionProto\n         * @constructor\n         * @param {onnx.IFunctionProto=} [properties] Properties to set\n         */\n        function FunctionProto(properties) {\n            this.input = [];\n            this.output = [];\n            this.attribute = [];\n            this.attributeProto = [];\n            this.node = [];\n            this.opsetImport = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * FunctionProto name.\n         * @member {string} name\n         * @memberof onnx.FunctionProto\n         * @instance\n         */\n        FunctionProto.prototype.name = \"\";\n\n        /**\n         * FunctionProto input.\n         * @member {Array.<string>} input\n         * @memberof onnx.FunctionProto\n         * @instance\n         */\n        FunctionProto.prototype.input = $util.emptyArray;\n\n        /**\n         * FunctionProto output.\n         * @member {Array.<string>} output\n         * @memberof onnx.FunctionProto\n         * @instance\n         */\n        FunctionProto.prototype.output = $util.emptyArray;\n\n        /**\n         * FunctionProto attribute.\n         * @member {Array.<string>} attribute\n         * @memberof onnx.FunctionProto\n         * @instance\n         */\n        FunctionProto.prototype.attribute = $util.emptyArray;\n\n        /**\n         * FunctionProto attributeProto.\n         * @member {Array.<onnx.IAttributeProto>} attributeProto\n         * @memberof onnx.FunctionProto\n         * @instance\n         */\n        FunctionProto.prototype.attributeProto = $util.emptyArray;\n\n        /**\n         * FunctionProto node.\n         * @member {Array.<onnx.INodeProto>} node\n         * @memberof onnx.FunctionProto\n         * @instance\n         */\n        FunctionProto.prototype.node = $util.emptyArray;\n\n        /**\n         * FunctionProto docString.\n         * @member {string} docString\n         * @memberof onnx.FunctionProto\n         * @instance\n         */\n        FunctionProto.prototype.docString = \"\";\n\n        /**\n         * FunctionProto opsetImport.\n         * @member {Array.<onnx.IOperatorSetIdProto>} opsetImport\n         * @memberof onnx.FunctionProto\n         * @instance\n         */\n        FunctionProto.prototype.opsetImport = $util.emptyArray;\n\n        /**\n         * FunctionProto domain.\n         * @member {string} domain\n         * @memberof onnx.FunctionProto\n         * @instance\n         */\n        FunctionProto.prototype.domain = \"\";\n\n        /**\n         * Creates a new FunctionProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.FunctionProto\n         * @static\n         * @param {onnx.IFunctionProto=} [properties] Properties to set\n         * @returns {onnx.FunctionProto} FunctionProto instance\n         */\n        FunctionProto.create = function create(properties) {\n            return new FunctionProto(properties);\n        };\n\n        /**\n         * Encodes the specified FunctionProto message. Does not implicitly {@link onnx.FunctionProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.FunctionProto\n         * @static\n         * @param {onnx.IFunctionProto} message FunctionProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        FunctionProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.input != null && message.input.length)\n                for (var i = 0; i < message.input.length; ++i)\n                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.input[i]);\n            if (message.output != null && message.output.length)\n                for (var i = 0; i < message.output.length; ++i)\n                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.output[i]);\n            if (message.attribute != null && message.attribute.length)\n                for (var i = 0; i < message.attribute.length; ++i)\n                    writer.uint32(/* id 6, wireType 2 =*/50).string(message.attribute[i]);\n            if (message.node != null && message.node.length)\n                for (var i = 0; i < message.node.length; ++i)\n                    $root.onnx.NodeProto.encode(message.node[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n            if (message.docString != null && Object.hasOwnProperty.call(message, \"docString\"))\n                writer.uint32(/* id 8, wireType 2 =*/66).string(message.docString);\n            if (message.opsetImport != null && message.opsetImport.length)\n                for (var i = 0; i < message.opsetImport.length; ++i)\n                    $root.onnx.OperatorSetIdProto.encode(message.opsetImport[i], writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();\n            if (message.domain != null && Object.hasOwnProperty.call(message, \"domain\"))\n                writer.uint32(/* id 10, wireType 2 =*/82).string(message.domain);\n            if (message.attributeProto != null && message.attributeProto.length)\n                for (var i = 0; i < message.attributeProto.length; ++i)\n                    $root.onnx.AttributeProto.encode(message.attributeProto[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified FunctionProto message, length delimited. Does not implicitly {@link onnx.FunctionProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.FunctionProto\n         * @static\n         * @param {onnx.IFunctionProto} message FunctionProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        FunctionProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a FunctionProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.FunctionProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.FunctionProto} FunctionProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        FunctionProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.FunctionProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.name = reader.string();\n                        break;\n                    }\n                case 4: {\n                        if (!(message.input && message.input.length))\n                            message.input = [];\n                        message.input.push(reader.string());\n                        break;\n                    }\n                case 5: {\n                        if (!(message.output && message.output.length))\n                            message.output = [];\n                        message.output.push(reader.string());\n                        break;\n                    }\n                case 6: {\n                        if (!(message.attribute && message.attribute.length))\n                            message.attribute = [];\n                        message.attribute.push(reader.string());\n                        break;\n                    }\n                case 11: {\n                        if (!(message.attributeProto && message.attributeProto.length))\n                            message.attributeProto = [];\n                        message.attributeProto.push($root.onnx.AttributeProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 7: {\n                        if (!(message.node && message.node.length))\n                            message.node = [];\n                        message.node.push($root.onnx.NodeProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 8: {\n                        message.docString = reader.string();\n                        break;\n                    }\n                case 9: {\n                        if (!(message.opsetImport && message.opsetImport.length))\n                            message.opsetImport = [];\n                        message.opsetImport.push($root.onnx.OperatorSetIdProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 10: {\n                        message.domain = reader.string();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a FunctionProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.FunctionProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.FunctionProto} FunctionProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        FunctionProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a FunctionProto message.\n         * @function verify\n         * @memberof onnx.FunctionProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        FunctionProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.input != null && message.hasOwnProperty(\"input\")) {\n                if (!Array.isArray(message.input))\n                    return \"input: array expected\";\n                for (var i = 0; i < message.input.length; ++i)\n                    if (!$util.isString(message.input[i]))\n                        return \"input: string[] expected\";\n            }\n            if (message.output != null && message.hasOwnProperty(\"output\")) {\n                if (!Array.isArray(message.output))\n                    return \"output: array expected\";\n                for (var i = 0; i < message.output.length; ++i)\n                    if (!$util.isString(message.output[i]))\n                        return \"output: string[] expected\";\n            }\n            if (message.attribute != null && message.hasOwnProperty(\"attribute\")) {\n                if (!Array.isArray(message.attribute))\n                    return \"attribute: array expected\";\n                for (var i = 0; i < message.attribute.length; ++i)\n                    if (!$util.isString(message.attribute[i]))\n                        return \"attribute: string[] expected\";\n            }\n            if (message.attributeProto != null && message.hasOwnProperty(\"attributeProto\")) {\n                if (!Array.isArray(message.attributeProto))\n                    return \"attributeProto: array expected\";\n                for (var i = 0; i < message.attributeProto.length; ++i) {\n                    var error = $root.onnx.AttributeProto.verify(message.attributeProto[i]);\n                    if (error)\n                        return \"attributeProto.\" + error;\n                }\n            }\n            if (message.node != null && message.hasOwnProperty(\"node\")) {\n                if (!Array.isArray(message.node))\n                    return \"node: array expected\";\n                for (var i = 0; i < message.node.length; ++i) {\n                    var error = $root.onnx.NodeProto.verify(message.node[i]);\n                    if (error)\n                        return \"node.\" + error;\n                }\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.opsetImport != null && message.hasOwnProperty(\"opsetImport\")) {\n                if (!Array.isArray(message.opsetImport))\n                    return \"opsetImport: array expected\";\n                for (var i = 0; i < message.opsetImport.length; ++i) {\n                    var error = $root.onnx.OperatorSetIdProto.verify(message.opsetImport[i]);\n                    if (error)\n                        return \"opsetImport.\" + error;\n                }\n            }\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a FunctionProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.FunctionProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.FunctionProto} FunctionProto\n         */\n        FunctionProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.FunctionProto)\n                return object;\n            var message = new $root.onnx.FunctionProto();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.input) {\n                if (!Array.isArray(object.input))\n                    throw TypeError(\".onnx.FunctionProto.input: array expected\");\n                message.input = [];\n                for (var i = 0; i < object.input.length; ++i)\n                    message.input[i] = String(object.input[i]);\n            }\n            if (object.output) {\n                if (!Array.isArray(object.output))\n                    throw TypeError(\".onnx.FunctionProto.output: array expected\");\n                message.output = [];\n                for (var i = 0; i < object.output.length; ++i)\n                    message.output[i] = String(object.output[i]);\n            }\n            if (object.attribute) {\n                if (!Array.isArray(object.attribute))\n                    throw TypeError(\".onnx.FunctionProto.attribute: array expected\");\n                message.attribute = [];\n                for (var i = 0; i < object.attribute.length; ++i)\n                    message.attribute[i] = String(object.attribute[i]);\n            }\n            if (object.attributeProto) {\n                if (!Array.isArray(object.attributeProto))\n                    throw TypeError(\".onnx.FunctionProto.attributeProto: array expected\");\n                message.attributeProto = [];\n                for (var i = 0; i < object.attributeProto.length; ++i) {\n                    if (typeof object.attributeProto[i] !== \"object\")\n                        throw TypeError(\".onnx.FunctionProto.attributeProto: object expected\");\n                    message.attributeProto[i] = $root.onnx.AttributeProto.fromObject(object.attributeProto[i]);\n                }\n            }\n            if (object.node) {\n                if (!Array.isArray(object.node))\n                    throw TypeError(\".onnx.FunctionProto.node: array expected\");\n                message.node = [];\n                for (var i = 0; i < object.node.length; ++i) {\n                    if (typeof object.node[i] !== \"object\")\n                        throw TypeError(\".onnx.FunctionProto.node: object expected\");\n                    message.node[i] = $root.onnx.NodeProto.fromObject(object.node[i]);\n                }\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.opsetImport) {\n                if (!Array.isArray(object.opsetImport))\n                    throw TypeError(\".onnx.FunctionProto.opsetImport: array expected\");\n                message.opsetImport = [];\n                for (var i = 0; i < object.opsetImport.length; ++i) {\n                    if (typeof object.opsetImport[i] !== \"object\")\n                        throw TypeError(\".onnx.FunctionProto.opsetImport: object expected\");\n                    message.opsetImport[i] = $root.onnx.OperatorSetIdProto.fromObject(object.opsetImport[i]);\n                }\n            }\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a FunctionProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.FunctionProto\n         * @static\n         * @param {onnx.FunctionProto} message FunctionProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        FunctionProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.input = [];\n                object.output = [];\n                object.attribute = [];\n                object.node = [];\n                object.opsetImport = [];\n                object.attributeProto = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.docString = \"\";\n                object.domain = \"\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.input && message.input.length) {\n                object.input = [];\n                for (var j = 0; j < message.input.length; ++j)\n                    object.input[j] = message.input[j];\n            }\n            if (message.output && message.output.length) {\n                object.output = [];\n                for (var j = 0; j < message.output.length; ++j)\n                    object.output[j] = message.output[j];\n            }\n            if (message.attribute && message.attribute.length) {\n                object.attribute = [];\n                for (var j = 0; j < message.attribute.length; ++j)\n                    object.attribute[j] = message.attribute[j];\n            }\n            if (message.node && message.node.length) {\n                object.node = [];\n                for (var j = 0; j < message.node.length; ++j)\n                    object.node[j] = $root.onnx.NodeProto.toObject(message.node[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.opsetImport && message.opsetImport.length) {\n                object.opsetImport = [];\n                for (var j = 0; j < message.opsetImport.length; ++j)\n                    object.opsetImport[j] = $root.onnx.OperatorSetIdProto.toObject(message.opsetImport[j], options);\n            }\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            if (message.attributeProto && message.attributeProto.length) {\n                object.attributeProto = [];\n                for (var j = 0; j < message.attributeProto.length; ++j)\n                    object.attributeProto[j] = $root.onnx.AttributeProto.toObject(message.attributeProto[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this FunctionProto to JSON.\n         * @function toJSON\n         * @memberof onnx.FunctionProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        FunctionProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for FunctionProto\n         * @function getTypeUrl\n         * @memberof onnx.FunctionProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        FunctionProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.FunctionProto\";\n        };\n\n        return FunctionProto;\n    })();\n\n    return onnx;\n})();\n\nmodule.exports = $root;\n","var _scriptDir,e=(_scriptDir=\"undefined\"!=typeof document&&document.currentScript?document.currentScript.src:void 0,\"undefined\"!=typeof __filename&&(_scriptDir=_scriptDir||__filename),function(e={}){function t(){return F.buffer!=k.buffer&&W(),k}function r(){return F.buffer!=k.buffer&&W(),x}function n(){return F.buffer!=k.buffer&&W(),Y}function a(){return F.buffer!=k.buffer&&W(),H}function o(){return F.buffer!=k.buffer&&W(),P}var i,u,s=e;s.ready=new Promise(((e,t)=>{i=e,u=t}));var f,c,l,d=Object.assign({},s),h=\"./this.program\",m=(e,t)=>{throw t},p=\"object\"==typeof window,g=\"function\"==typeof importScripts,b=\"object\"==typeof process&&\"object\"==typeof process.versions&&\"string\"==typeof process.versions.node,v=s.ENVIRONMENT_IS_PTHREAD||!1,_=\"\";function y(e){return s.locateFile?s.locateFile(e,_):_+e}if(b){var w=require(\"fs\"),O=require(\"path\");let e;_=g?O.dirname(_)+\"/\":__dirname+\"/\",f=(e,t)=>(e=e.startsWith(\"file://\")?new URL(e):O.normalize(e),w.readFileSync(e,t?void 0:\"utf8\")),l=e=>((e=f(e,!0)).buffer||(e=new Uint8Array(e)),e),c=(e,t,r,n=!0)=>{e=e.startsWith(\"file://\")?new URL(e):O.normalize(e),w.readFile(e,n?void 0:\"utf8\",((e,a)=>{e?r(e):t(n?a.buffer:a)}))},!s.thisProgram&&1<process.argv.length&&(h=process.argv[1].replace(/\\\\/g,\"/\")),process.argv.slice(2),m=(e,t)=>{throw process.exitCode=e,t},s.inspect=()=>\"[Emscripten Module object]\";try{e=require(\"worker_threads\")}catch(e){throw console.error('The \"worker_threads\" module is not supported in this node.js build - perhaps a newer version is needed?'),e}global.Worker=e.Worker}else(p||g)&&(g?_=self.location.href:\"undefined\"!=typeof document&&document.currentScript&&(_=document.currentScript.src),_scriptDir&&(_=_scriptDir),_=0!==_.indexOf(\"blob:\")?_.substr(0,_.replace(/[?#].*/,\"\").lastIndexOf(\"/\")+1):\"\",b||(f=e=>{var t=new XMLHttpRequest;return t.open(\"GET\",e,!1),t.send(null),t.responseText},g&&(l=e=>{var t=new XMLHttpRequest;return t.open(\"GET\",e,!1),t.responseType=\"arraybuffer\",t.send(null),new Uint8Array(t.response)}),c=(e,t,r)=>{var n=new XMLHttpRequest;n.open(\"GET\",e,!0),n.responseType=\"arraybuffer\",n.onload=()=>{200==n.status||0==n.status&&n.response?t(n.response):r()},n.onerror=r,n.send(null)}));b&&\"undefined\"==typeof performance&&(global.performance=require(\"perf_hooks\").performance);var M=console.log.bind(console),T=console.error.bind(console);b&&(M=(...e)=>w.writeSync(1,e.join(\" \")+\"\\n\"),T=(...e)=>w.writeSync(2,e.join(\" \")+\"\\n\"));var S,A=s.print||M,E=s.printErr||T;Object.assign(s,d),d=null,s.thisProgram&&(h=s.thisProgram),s.quit&&(m=s.quit),s.wasmBinary&&(S=s.wasmBinary);var R=s.noExitRuntime||!0;\"object\"!=typeof WebAssembly&&ee(\"no native wasm support detected\");var F,D,C,I,k,x,Y,H,P,U=!1;function W(){var e=F.buffer;s.HEAP8=k=new Int8Array(e),s.HEAP16=new Int16Array(e),s.HEAP32=Y=new Int32Array(e),s.HEAPU8=x=new Uint8Array(e),s.HEAPU16=new Uint16Array(e),s.HEAPU32=H=new Uint32Array(e),s.HEAPF32=new Float32Array(e),s.HEAPF64=P=new Float64Array(e)}var G=s.INITIAL_MEMORY||16777216;if(5242880<=G||ee(\"INITIAL_MEMORY should be larger than STACK_SIZE, was \"+G+\"! (STACK_SIZE=5242880)\"),v)F=s.wasmMemory;else if(s.wasmMemory)F=s.wasmMemory;else if(!((F=new WebAssembly.Memory({initial:G/65536,maximum:65536,shared:!0})).buffer instanceof SharedArrayBuffer))throw E(\"requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag\"),b&&E(\"(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and/or recent version)\"),Error(\"bad memory\");W(),G=F.buffer.byteLength;var N,L=[],j=[],z=[],B=0;function q(){return R||0<B}var J,K,X=0,$=null,V=null;function Z(){X++,s.monitorRunDependencies&&s.monitorRunDependencies(X)}function Q(){if(X--,s.monitorRunDependencies&&s.monitorRunDependencies(X),0==X&&(null!==$&&(clearInterval($),$=null),V)){var e=V;V=null,e()}}function ee(e){throw s.onAbort&&s.onAbort(e),E(e=\"Aborted(\"+e+\")\"),U=!0,I=1,e=new WebAssembly.RuntimeError(e+\". Build with -sASSERTIONS for more info.\"),u(e),e}function te(e){return e.startsWith(\"data:application/octet-stream;base64,\")}function re(e){if(e==J&&S)return new Uint8Array(S);if(l)return l(e);throw\"both async and sync fetching of the wasm failed\"}function ne(e,t,r){return function(e){if(!S&&(p||g)){if(\"function\"==typeof fetch&&!e.startsWith(\"file://\"))return fetch(e,{credentials:\"same-origin\"}).then((t=>{if(!t.ok)throw\"failed to load wasm binary file at '\"+e+\"'\";return t.arrayBuffer()})).catch((()=>re(e)));if(c)return new Promise(((t,r)=>{c(e,(e=>t(new Uint8Array(e))),r)}))}return Promise.resolve().then((()=>re(e)))}(e).then((e=>WebAssembly.instantiate(e,t))).then((e=>e)).then(r,(e=>{E(\"failed to asynchronously prepare wasm: \"+e),ee(e)}))}function ae(e){this.name=\"ExitStatus\",this.message=`Program terminated with exit(${e})`,this.status=e}function oe(e){e.terminate(),e.onmessage=()=>{}}function ie(e){(e=he.Fa[e])||ee(),he.fb(e)}function ue(e){var t=he.Za();if(!t)return 6;he.Ia.push(t),he.Fa[e.Ha]=t,t.Ha=e.Ha;var r={cmd:\"run\",start_routine:e.gb,arg:e.Ya,pthread_ptr:e.Ha};return b&&t.unref(),t.postMessage(r,e.mb),0}te(J=\"ort-wasm-threaded.wasm\")||(J=y(J));var se=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf8\"):void 0,fe=(e,t,r)=>{var n=(t>>>=0)+r;for(r=t;e[r]&&!(r>=n);)++r;if(16<r-t&&e.buffer&&se)return se.decode(e.buffer instanceof SharedArrayBuffer?e.slice(t,r):e.subarray(t,r));for(n=\"\";t<r;){var a=e[t++];if(128&a){var o=63&e[t++];if(192==(224&a))n+=String.fromCharCode((31&a)<<6|o);else{var i=63&e[t++];65536>(a=224==(240&a)?(15&a)<<12|o<<6|i:(7&a)<<18|o<<12|i<<6|63&e[t++])?n+=String.fromCharCode(a):(a-=65536,n+=String.fromCharCode(55296|a>>10,56320|1023&a))}}else n+=String.fromCharCode(a)}return n},ce=(e,t)=>(e>>>=0)?fe(r(),e,t):\"\";function le(e){if(v)return qe(1,1,e);I=e,q()||(he.hb(),s.onExit&&s.onExit(e),U=!0),m(e,new ae(e))}var de=e=>{if(I=e,v)throw pe(e),\"unwind\";le(e)},he={La:[],Ia:[],Ta:[],Fa:{},Pa:function(){v?he.ab():he.$a()},$a:function(){L.unshift((()=>{Z(),he.bb((()=>Q()))}))},ab:function(){he.receiveObjectTransfer=he.eb,he.threadInitTLS=he.Sa,he.setExitStatus=he.Ra,R=!1},Ra:function(e){I=e},rb:[\"$terminateWorker\"],hb:function(){for(var e of he.Ia)oe(e);for(e of he.La)oe(e);he.La=[],he.Ia=[],he.Fa=[]},fb:function(e){var t=e.Ha;delete he.Fa[t],he.La.push(e),he.Ia.splice(he.Ia.indexOf(e),1),e.Ha=0,pt(t)},eb:function(){},Sa:function(){he.Ta.forEach((e=>e()))},cb:e=>new Promise((t=>{e.onmessage=r=>{var n=(r=r.data).cmd;if(r.targetThread&&r.targetThread!=ct()){var a=he.Fa[r.qb];a?a.postMessage(r,r.transferList):E('Internal error! Worker sent a message \"'+n+'\" to target pthread '+r.targetThread+\", but that thread no longer exists!\")}else\"checkMailbox\"===n?Ue():\"spawnThread\"===n?ue(r):\"cleanupThread\"===n?ie(r.thread):\"killThread\"===n?(r=r.thread,n=he.Fa[r],delete he.Fa[r],oe(n),pt(r),he.Ia.splice(he.Ia.indexOf(n),1),n.Ha=0):\"cancelThread\"===n?he.Fa[r.thread].postMessage({cmd:\"cancel\"}):\"loaded\"===n?(e.loaded=!0,t(e)):\"alert\"===n?alert(\"Thread \"+r.threadId+\": \"+r.text):\"setimmediate\"===r.target?e.postMessage(r):\"callHandler\"===n?s[r.handler](...r.args):n&&E(\"worker sent an unknown command \"+n)},e.onerror=e=>{throw E(\"worker sent an error! \"+e.filename+\":\"+e.lineno+\": \"+e.message),e},b&&(e.on(\"message\",(function(t){e.onmessage({data:t})})),e.on(\"error\",(function(t){e.onerror(t)})));var r,n=[];for(r of[\"onExit\",\"onAbort\",\"print\",\"printErr\"])s.hasOwnProperty(r)&&n.push(r);e.postMessage({cmd:\"load\",handlers:n,urlOrBlob:s.mainScriptUrlOrBlob||_scriptDir,wasmMemory:F,wasmModule:C})})),bb:function(e){e()},Xa:function(){var e=y(\"ort-wasm-threaded.worker.js\");e=new Worker(e),he.La.push(e)},Za:function(){return 0==he.La.length&&(he.Xa(),he.cb(he.La[0])),he.La.pop()}};s.PThread=he;var me=e=>{for(;0<e.length;)e.shift()(s)};function pe(e){if(v)return qe(2,0,e);de(e)}s.establishStackSpace=function(){var e=ct(),t=n()[e+52>>2>>>0];e=n()[e+56>>2>>>0],_t(t,t-e),wt(t)};var ge=[];function be(e){this.Oa=e-24,this.Wa=function(e){a()[this.Oa+4>>2>>>0]=e},this.Va=function(e){a()[this.Oa+8>>2>>>0]=e},this.Pa=function(e,t){this.Ua(),this.Wa(e),this.Va(t)},this.Ua=function(){a()[this.Oa+16>>2>>>0]=0}}function ve(e,t,r,n){return v?qe(3,1,e,t,r,n):_e(e,t,r,n)}function _e(e,t,r,n){if(e>>>=0,t>>>=0,r>>>=0,n>>>=0,\"undefined\"==typeof SharedArrayBuffer)return E(\"Current environment does not support SharedArrayBuffer, pthreads are not available!\"),6;var a=[];return v&&0===a.length?ve(e,t,r,n):(e={gb:r,Ha:e,Ya:n,mb:a},v?(e.ob=\"spawnThread\",postMessage(e,a),0):ue(e))}function ye(e,t,r){return v?qe(4,1,e,t,r):0}function we(e,t){if(v)return qe(5,1,e,t)}s.invokeEntryPoint=function(e,t){var r=ge[e];r||(e>=ge.length&&(ge.length=e+1),ge[e]=r=N.get(e)),e=r(t),q()?he.Ra(e):gt(e)};var Oe=e=>{for(var t=0,r=0;r<e.length;++r){var n=e.charCodeAt(r);127>=n?t++:2047>=n?t+=2:55296<=n&&57343>=n?(t+=4,++r):t+=3}return t},Me=(e,t,r,n)=>{if(!(0<n))return 0;var a=r>>>=0;n=r+n-1;for(var o=0;o<e.length;++o){var i=e.charCodeAt(o);if(55296<=i&&57343>=i&&(i=65536+((1023&i)<<10)|1023&e.charCodeAt(++o)),127>=i){if(r>=n)break;t[r++>>>0]=i}else{if(2047>=i){if(r+1>=n)break;t[r++>>>0]=192|i>>6}else{if(65535>=i){if(r+2>=n)break;t[r++>>>0]=224|i>>12}else{if(r+3>=n)break;t[r++>>>0]=240|i>>18,t[r++>>>0]=128|i>>12&63}t[r++>>>0]=128|i>>6&63}t[r++>>>0]=128|63&i}}return t[r>>>0]=0,r-a},Te=(e,t,n)=>Me(e,r(),t,n);function Se(e,t){if(v)return qe(6,1,e,t)}function Ae(e,t,r){if(v)return qe(7,1,e,t,r)}function Ee(e,t,r){return v?qe(8,1,e,t,r):0}function Re(e,t){if(v)return qe(9,1,e,t)}function Fe(e,t,r){if(v)return qe(10,1,e,t,r)}function De(e,t,r,n){if(v)return qe(11,1,e,t,r,n)}function Ce(e,t,r,n){if(v)return qe(12,1,e,t,r,n)}function Ie(e,t,r,n){if(v)return qe(13,1,e,t,r,n)}function ke(e){if(v)return qe(14,1,e)}function xe(e,t){if(v)return qe(15,1,e,t)}function Ye(e,t,r){if(v)return qe(16,1,e,t,r)}var He=e=>{if(!U)try{if(e(),!q())try{v?gt(I):de(I)}catch(e){e instanceof ae||\"unwind\"==e||m(1,e)}}catch(e){e instanceof ae||\"unwind\"==e||m(1,e)}};function Pe(e){e>>>=0,\"function\"==typeof Atomics.nb&&(Atomics.nb(n(),e>>2,e).value.then(Ue),e+=128,Atomics.store(n(),e>>2,1))}function Ue(){var e=ct();e&&(Pe(e),He((()=>bt())))}s.__emscripten_thread_mailbox_await=Pe,s.checkMailbox=Ue;var We=e=>0==e%4&&(0!=e%100||0==e%400),Ge=[0,31,60,91,121,152,182,213,244,274,305,335],Ne=[0,31,59,90,120,151,181,212,243,273,304,334];function Le(e,t,r,n,a,o,i,u){return v?qe(17,1,e,t,r,n,a,o,i,u):-52}function je(e,t,r,n,a,o,i){if(v)return qe(18,1,e,t,r,n,a,o,i)}var ze=e=>{var t=Oe(e)+1,r=lt(t);return r&&Te(e,r,t),r},Be=e=>{var t=yt();return e=e(),wt(t),e};function qe(e,t){var r=arguments.length-2,n=arguments;return Be((()=>{for(var a=Ot(8*r),i=a>>3,u=0;u<r;u++){var s=n[2+u];o()[i+u>>>0]=s}return mt(e,r,a,t)}))}var Je,Ke=[],Xe={},$e=()=>{if(!Je){var e,t={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:h||\"./this.program\"};for(e in Xe)void 0===Xe[e]?delete t[e]:t[e]=Xe[e];var r=[];for(e in t)r.push(`${e}=${t[e]}`);Je=r}return Je};function Ve(e,r){if(v)return qe(19,1,e,r);e>>>=0,r>>>=0;var n=0;return $e().forEach((function(o,i){var u=r+n;for(i=a()[e+4*i>>2>>>0]=u,u=0;u<o.length;++u)t()[i++>>0>>>0]=o.charCodeAt(u);t()[i>>0>>>0]=0,n+=o.length+1})),0}function Ze(e,t){if(v)return qe(20,1,e,t);e>>>=0,t>>>=0;var r=$e();a()[e>>2>>>0]=r.length;var n=0;return r.forEach((function(e){n+=e.length+1})),a()[t>>2>>>0]=n,0}function Qe(e){return v?qe(21,1,e):52}function et(e,t,r,n){return v?qe(22,1,e,t,r,n):52}function tt(e,t,r,n,a){return v?qe(23,1,e,t,r,n,a):70}var rt=[null,[],[]];function nt(e,t,n,o){if(v)return qe(24,1,e,t,n,o);t>>>=0,n>>>=0,o>>>=0;for(var i=0,u=0;u<n;u++){var s=a()[t>>2>>>0],f=a()[t+4>>2>>>0];t+=8;for(var c=0;c<f;c++){var l=r()[s+c>>>0],d=rt[e];0===l||10===l?((1===e?A:E)(fe(d,0)),d.length=0):d.push(l)}i+=f}return a()[o>>2>>>0]=i,0}var at=[31,29,31,30,31,30,31,31,30,31,30,31],ot=[31,28,31,30,31,30,31,31,30,31,30,31],it=(e,r)=>{t().set(e,r>>>0)};function ut(e,t,r,a){function o(e,t,r){for(e=\"number\"==typeof e?e.toString():e||\"\";e.length<t;)e=r[0]+e;return e}function i(e,t){return o(e,t,\"0\")}function u(e,t){function r(e){return 0>e?-1:0<e?1:0}var n;return 0===(n=r(e.getFullYear()-t.getFullYear()))&&0===(n=r(e.getMonth()-t.getMonth()))&&(n=r(e.getDate()-t.getDate())),n}function s(e){switch(e.getDay()){case 0:return new Date(e.getFullYear()-1,11,29);case 1:return e;case 2:return new Date(e.getFullYear(),0,3);case 3:return new Date(e.getFullYear(),0,2);case 4:return new Date(e.getFullYear(),0,1);case 5:return new Date(e.getFullYear()-1,11,31);case 6:return new Date(e.getFullYear()-1,11,30)}}function f(e){var t=e.Ja;for(e=new Date(new Date(e.Ka+1900,0,1).getTime());0<t;){var r=e.getMonth(),n=(We(e.getFullYear())?at:ot)[r];if(!(t>n-e.getDate())){e.setDate(e.getDate()+t);break}t-=n-e.getDate()+1,e.setDate(1),11>r?e.setMonth(r+1):(e.setMonth(0),e.setFullYear(e.getFullYear()+1))}return r=new Date(e.getFullYear()+1,0,4),t=s(new Date(e.getFullYear(),0,4)),r=s(r),0>=u(t,e)?0>=u(r,e)?e.getFullYear()+1:e.getFullYear():e.getFullYear()-1}e>>>=0,t>>>=0,r>>>=0,a>>>=0;var c=n()[a+40>>2>>>0];for(var l in a={kb:n()[a>>2>>>0],jb:n()[a+4>>2>>>0],Ma:n()[a+8>>2>>>0],Qa:n()[a+12>>2>>>0],Na:n()[a+16>>2>>>0],Ka:n()[a+20>>2>>>0],Ga:n()[a+24>>2>>>0],Ja:n()[a+28>>2>>>0],sb:n()[a+32>>2>>>0],ib:n()[a+36>>2>>>0],lb:c?ce(c):\"\"},r=ce(r),c={\"%c\":\"%a %b %d %H:%M:%S %Y\",\"%D\":\"%m/%d/%y\",\"%F\":\"%Y-%m-%d\",\"%h\":\"%b\",\"%r\":\"%I:%M:%S %p\",\"%R\":\"%H:%M\",\"%T\":\"%H:%M:%S\",\"%x\":\"%m/%d/%y\",\"%X\":\"%H:%M:%S\",\"%Ec\":\"%c\",\"%EC\":\"%C\",\"%Ex\":\"%m/%d/%y\",\"%EX\":\"%H:%M:%S\",\"%Ey\":\"%y\",\"%EY\":\"%Y\",\"%Od\":\"%d\",\"%Oe\":\"%e\",\"%OH\":\"%H\",\"%OI\":\"%I\",\"%Om\":\"%m\",\"%OM\":\"%M\",\"%OS\":\"%S\",\"%Ou\":\"%u\",\"%OU\":\"%U\",\"%OV\":\"%V\",\"%Ow\":\"%w\",\"%OW\":\"%W\",\"%Oy\":\"%y\"})r=r.replace(new RegExp(l,\"g\"),c[l]);var d=\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\".split(\" \"),h=\"January February March April May June July August September October November December\".split(\" \");for(l in c={\"%a\":e=>d[e.Ga].substring(0,3),\"%A\":e=>d[e.Ga],\"%b\":e=>h[e.Na].substring(0,3),\"%B\":e=>h[e.Na],\"%C\":e=>i((e.Ka+1900)/100|0,2),\"%d\":e=>i(e.Qa,2),\"%e\":e=>o(e.Qa,2,\" \"),\"%g\":e=>f(e).toString().substring(2),\"%G\":e=>f(e),\"%H\":e=>i(e.Ma,2),\"%I\":e=>(0==(e=e.Ma)?e=12:12<e&&(e-=12),i(e,2)),\"%j\":e=>{for(var t=0,r=0;r<=e.Na-1;t+=(We(e.Ka+1900)?at:ot)[r++]);return i(e.Qa+t,3)},\"%m\":e=>i(e.Na+1,2),\"%M\":e=>i(e.jb,2),\"%n\":()=>\"\\n\",\"%p\":e=>0<=e.Ma&&12>e.Ma?\"AM\":\"PM\",\"%S\":e=>i(e.kb,2),\"%t\":()=>\"\\t\",\"%u\":e=>e.Ga||7,\"%U\":e=>i(Math.floor((e.Ja+7-e.Ga)/7),2),\"%V\":e=>{var t=Math.floor((e.Ja+7-(e.Ga+6)%7)/7);if(2>=(e.Ga+371-e.Ja-2)%7&&t++,t)53==t&&(4==(r=(e.Ga+371-e.Ja)%7)||3==r&&We(e.Ka)||(t=1));else{t=52;var r=(e.Ga+7-e.Ja-1)%7;(4==r||5==r&&We(e.Ka%400-1))&&t++}return i(t,2)},\"%w\":e=>e.Ga,\"%W\":e=>i(Math.floor((e.Ja+7-(e.Ga+6)%7)/7),2),\"%y\":e=>(e.Ka+1900).toString().substring(2),\"%Y\":e=>e.Ka+1900,\"%z\":e=>{var t=0<=(e=e.ib);return e=Math.abs(e)/60,(t?\"+\":\"-\")+String(\"0000\"+(e/60*100+e%60)).slice(-4)},\"%Z\":e=>e.lb,\"%%\":()=>\"%\"},r=r.replace(/%%/g,\"\\0\\0\"),c)r.includes(l)&&(r=r.replace(new RegExp(l,\"g\"),c[l](a)));return l=function(e){var t=Array(Oe(e)+1);return Me(e,t,0,t.length),t}(r=r.replace(/\\0\\0/g,\"%\")),l.length>t?0:(it(l,e),l.length-1)}he.Pa();var st=[null,le,pe,ve,ye,we,Se,Ae,Ee,Re,Fe,De,Ce,Ie,ke,xe,Ye,Le,je,Ve,Ze,Qe,et,tt,nt],ft={b:function(e,t,r){throw new be(e>>>=0).Pa(t>>>0,r>>>0),e},N:function(e){dt(e>>>0,!g,1,!p,131072,!1),he.Sa()},j:function(e){e>>>=0,v?postMessage({cmd:\"cleanupThread\",thread:e}):ie(e)},I:_e,h:ye,T:we,D:Se,F:Ae,U:Ee,R:Re,J:Fe,Q:De,n:Ce,E:Ie,B:ke,S:xe,C:Ye,q:()=>!0,z:function(e,t){(e>>>=0)==t>>>0?setTimeout((()=>Ue())):v?postMessage({targetThread:e,cmd:\"checkMailbox\"}):(e=he.Fa[e])&&e.postMessage({cmd:\"checkMailbox\"})},L:function(){return-1},M:Pe,p:function(e){b&&he.Fa[e>>>0].ref()},t:function(e,t,r){e=t+2097152>>>0<4194305-!!e?(e>>>0)+4294967296*t:NaN,r>>>=0,e=new Date(1e3*e),n()[r>>2>>>0]=e.getUTCSeconds(),n()[r+4>>2>>>0]=e.getUTCMinutes(),n()[r+8>>2>>>0]=e.getUTCHours(),n()[r+12>>2>>>0]=e.getUTCDate(),n()[r+16>>2>>>0]=e.getUTCMonth(),n()[r+20>>2>>>0]=e.getUTCFullYear()-1900,n()[r+24>>2>>>0]=e.getUTCDay(),e=(e.getTime()-Date.UTC(e.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,n()[r+28>>2>>>0]=e},u:function(e,t,r){e=t+2097152>>>0<4194305-!!e?(e>>>0)+4294967296*t:NaN,r>>>=0,e=new Date(1e3*e),n()[r>>2>>>0]=e.getSeconds(),n()[r+4>>2>>>0]=e.getMinutes(),n()[r+8>>2>>>0]=e.getHours(),n()[r+12>>2>>>0]=e.getDate(),n()[r+16>>2>>>0]=e.getMonth(),n()[r+20>>2>>>0]=e.getFullYear()-1900,n()[r+24>>2>>>0]=e.getDay(),t=(We(e.getFullYear())?Ge:Ne)[e.getMonth()]+e.getDate()-1|0,n()[r+28>>2>>>0]=t,n()[r+36>>2>>>0]=-60*e.getTimezoneOffset(),t=new Date(e.getFullYear(),6,1).getTimezoneOffset();var a=new Date(e.getFullYear(),0,1).getTimezoneOffset();e=0|(t!=a&&e.getTimezoneOffset()==Math.min(a,t)),n()[r+32>>2>>>0]=e},v:function(e){e>>>=0;var t=new Date(n()[e+20>>2>>>0]+1900,n()[e+16>>2>>>0],n()[e+12>>2>>>0],n()[e+8>>2>>>0],n()[e+4>>2>>>0],n()[e>>2>>>0],0),r=n()[e+32>>2>>>0],a=t.getTimezoneOffset(),o=new Date(t.getFullYear(),6,1).getTimezoneOffset(),i=new Date(t.getFullYear(),0,1).getTimezoneOffset(),u=Math.min(i,o);return 0>r?n()[e+32>>2>>>0]=Number(o!=i&&u==a):0<r!=(u==a)&&(o=Math.max(i,o),t.setTime(t.getTime()+6e4*((0<r?u:o)-a))),n()[e+24>>2>>>0]=t.getDay(),r=(We(t.getFullYear())?Ge:Ne)[t.getMonth()]+t.getDate()-1|0,n()[e+28>>2>>>0]=r,n()[e>>2>>>0]=t.getSeconds(),n()[e+4>>2>>>0]=t.getMinutes(),n()[e+8>>2>>>0]=t.getHours(),n()[e+12>>2>>>0]=t.getDate(),n()[e+16>>2>>>0]=t.getMonth(),n()[e+20>>2>>>0]=t.getYear(),e=t.getTime()/1e3,vt((K=e,1<=+Math.abs(K)?0<K?+Math.floor(K/4294967296)>>>0:~~+Math.ceil((K-+(~~K>>>0))/4294967296)>>>0:0)),e>>>0},r:Le,s:je,y:function(e,t,r){function o(e){return(e=e.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?e[1]:\"GMT\"}e>>>=0,t>>>=0,r>>>=0;var i=(new Date).getFullYear(),u=new Date(i,0,1),s=new Date(i,6,1);i=u.getTimezoneOffset();var f=s.getTimezoneOffset(),c=Math.max(i,f);a()[e>>2>>>0]=60*c,n()[t>>2>>>0]=Number(i!=f),e=o(u),t=o(s),e=ze(e),t=ze(t),f<i?(a()[r>>2>>>0]=e,a()[r+4>>2>>>0]=t):(a()[r>>2>>>0]=t,a()[r+4>>2>>>0]=e)},c:()=>{ee(\"\")},k:function(){},i:function(){return Date.now()},o:()=>{throw B+=1,\"unwind\"},A:function(){return 4294901760},e:()=>performance.timeOrigin+performance.now(),f:function(){return b?require(\"os\").cpus().length:navigator.hardwareConcurrency},K:function(e,t,r,n){for(he.pb=t>>>0,Ke.length=r,t=n>>>0>>3,n=0;n<r;n++)Ke[n]=o()[t+n>>>0];return st[e].apply(null,Ke)},x:function(e){e>>>=0;var t=r().length;if(e<=t||4294901760<e)return!1;for(var n=1;4>=n;n*=2){var a=t*(1+.2/n);a=Math.min(a,e+100663296);var o=Math;a=Math.max(e,a);e:{o=o.min.call(o,4294901760,a+(65536-a%65536)%65536)-F.buffer.byteLength+65535>>>16;try{F.grow(o),W();var i=1;break e}catch(e){}i=void 0}if(i)return!0}return!1},O:Ve,P:Ze,H:de,g:Qe,m:et,w:tt,l:nt,a:F||s.wasmMemory,G:ut,d:function(e,t,r,n){return ut(e>>>0,t>>>0,r>>>0,n>>>0)}};!function(){function e(e,t){return e=e.exports,D=e=function(e){var t=e=>()=>e()>>>0,r=e=>t=>e(t)>>>0;return(e=Object.assign({},e)).__errno_location=t(e.__errno_location),e.pthread_self=t(e.pthread_self),e.malloc=r(e.malloc),e.stackSave=t(e.stackSave),e.stackAlloc=r(e.stackAlloc),e}(e),he.Ta.push(D.sa),N=D.ta,j.unshift(D.V),C=t,Q(),e}var t={a:ft};if(Z(),s.instantiateWasm)try{return s.instantiateWasm(t,e)}catch(e){E(\"Module.instantiateWasm callback failed with error: \"+e),u(e)}(function(e,t){var r=J;return S||\"function\"!=typeof WebAssembly.instantiateStreaming||te(r)||r.startsWith(\"file://\")||b||\"function\"!=typeof fetch?ne(r,e,t):fetch(r,{credentials:\"same-origin\"}).then((n=>WebAssembly.instantiateStreaming(n,e).then(t,(function(n){return E(\"wasm streaming compile failed: \"+n),E(\"falling back to ArrayBuffer instantiation\"),ne(r,e,t)}))))})(t,(function(t){e(t.instance,t.module)})).catch(u)}(),s._OrtInit=(e,t)=>(s._OrtInit=D.W)(e,t),s._OrtGetLastError=(e,t)=>(s._OrtGetLastError=D.X)(e,t),s._OrtCreateSessionOptions=(e,t,r,n,a,o,i,u,f,c)=>(s._OrtCreateSessionOptions=D.Y)(e,t,r,n,a,o,i,u,f,c),s._OrtAppendExecutionProvider=(e,t)=>(s._OrtAppendExecutionProvider=D.Z)(e,t),s._OrtAddFreeDimensionOverride=(e,t,r)=>(s._OrtAddFreeDimensionOverride=D._)(e,t,r),s._OrtAddSessionConfigEntry=(e,t,r)=>(s._OrtAddSessionConfigEntry=D.$)(e,t,r),s._OrtReleaseSessionOptions=e=>(s._OrtReleaseSessionOptions=D.aa)(e),s._OrtCreateSession=(e,t,r)=>(s._OrtCreateSession=D.ba)(e,t,r),s._OrtReleaseSession=e=>(s._OrtReleaseSession=D.ca)(e),s._OrtGetInputOutputCount=(e,t,r)=>(s._OrtGetInputOutputCount=D.da)(e,t,r),s._OrtGetInputName=(e,t)=>(s._OrtGetInputName=D.ea)(e,t),s._OrtGetOutputName=(e,t)=>(s._OrtGetOutputName=D.fa)(e,t),s._OrtFree=e=>(s._OrtFree=D.ga)(e),s._OrtCreateTensor=(e,t,r,n,a)=>(s._OrtCreateTensor=D.ha)(e,t,r,n,a),s._OrtGetTensorData=(e,t,r,n,a)=>(s._OrtGetTensorData=D.ia)(e,t,r,n,a),s._OrtReleaseTensor=e=>(s._OrtReleaseTensor=D.ja)(e),s._OrtCreateRunOptions=(e,t,r,n)=>(s._OrtCreateRunOptions=D.ka)(e,t,r,n),s._OrtAddRunConfigEntry=(e,t,r)=>(s._OrtAddRunConfigEntry=D.la)(e,t,r),s._OrtReleaseRunOptions=e=>(s._OrtReleaseRunOptions=D.ma)(e),s._OrtRun=(e,t,r,n,a,o,i,u)=>(s._OrtRun=D.na)(e,t,r,n,a,o,i,u),s._OrtEndProfiling=e=>(s._OrtEndProfiling=D.oa)(e);var ct=s._pthread_self=()=>(ct=s._pthread_self=D.pa)(),lt=s._malloc=e=>(lt=s._malloc=D.qa)(e);s._free=e=>(s._free=D.ra)(e),s.__emscripten_tls_init=()=>(s.__emscripten_tls_init=D.sa)();var dt=s.__emscripten_thread_init=(e,t,r,n,a,o)=>(dt=s.__emscripten_thread_init=D.ua)(e,t,r,n,a,o);s.__emscripten_thread_crashed=()=>(s.__emscripten_thread_crashed=D.va)();var ht,mt=(e,t,r,n)=>(mt=D.wa)(e,t,r,n),pt=e=>(pt=D.xa)(e),gt=s.__emscripten_thread_exit=e=>(gt=s.__emscripten_thread_exit=D.ya)(e),bt=s.__emscripten_check_mailbox=()=>(bt=s.__emscripten_check_mailbox=D.za)(),vt=e=>(vt=D.Aa)(e),_t=(e,t)=>(_t=D.Ba)(e,t),yt=()=>(yt=D.Ca)(),wt=e=>(wt=D.Da)(e),Ot=e=>(Ot=D.Ea)(e);function Mt(){function e(){if(!ht&&(ht=!0,s.calledRun=!0,!U)&&(v||me(j),i(s),s.onRuntimeInitialized&&s.onRuntimeInitialized(),!v)){if(s.postRun)for(\"function\"==typeof s.postRun&&(s.postRun=[s.postRun]);s.postRun.length;){var e=s.postRun.shift();z.unshift(e)}me(z)}}if(!(0<X))if(v)i(s),v||me(j),startWorker(s);else{if(s.preRun)for(\"function\"==typeof s.preRun&&(s.preRun=[s.preRun]);s.preRun.length;)L.unshift(s.preRun.shift());me(L),0<X||(s.setStatus?(s.setStatus(\"Running...\"),setTimeout((function(){setTimeout((function(){s.setStatus(\"\")}),1),e()}),1)):e())}}if(s.keepRuntimeAlive=q,s.wasmMemory=F,s.stackAlloc=Ot,s.stackSave=yt,s.stackRestore=wt,s.UTF8ToString=ce,s.stringToUTF8=Te,s.lengthBytesUTF8=Oe,s.ExitStatus=ae,s.PThread=he,V=function e(){ht||Mt(),ht||(V=e)},s.preInit)for(\"function\"==typeof s.preInit&&(s.preInit=[s.preInit]);0<s.preInit.length;)s.preInit.pop()();return Mt(),e.ready});\"object\"==typeof exports&&\"object\"==typeof module?module.exports=e:\"function\"==typeof define&&define.amd&&define([],(()=>e));\n","\nvar ortWasm = (() => {\n  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;\n  if (typeof __filename !== 'undefined') _scriptDir = _scriptDir || __filename;\n  return (\nfunction(moduleArg = {}) {\n\nvar g=moduleArg,aa,m;g.ready=new Promise((a,b)=>{aa=a;m=b});var ba=Object.assign({},g),ca=\"./this.program\",da=\"object\"==typeof window,q=\"function\"==typeof importScripts,ea=\"object\"==typeof process&&\"object\"==typeof process.versions&&\"string\"==typeof process.versions.node,t=\"\",fa,w,x;\nif(ea){var fs=require(\"fs\"),ha=require(\"path\");t=q?ha.dirname(t)+\"/\":__dirname+\"/\";fa=(a,b)=>{a=a.startsWith(\"file://\")?new URL(a):ha.normalize(a);return fs.readFileSync(a,b?void 0:\"utf8\")};x=a=>{a=fa(a,!0);a.buffer||(a=new Uint8Array(a));return a};w=(a,b,c,d=!0)=>{a=a.startsWith(\"file://\")?new URL(a):ha.normalize(a);fs.readFile(a,d?void 0:\"utf8\",(e,h)=>{e?c(e):b(d?h.buffer:h)})};!g.thisProgram&&1<process.argv.length&&(ca=process.argv[1].replace(/\\\\/g,\"/\"));process.argv.slice(2);g.inspect=()=>\"[Emscripten Module object]\"}else if(da||\nq)q?t=self.location.href:\"undefined\"!=typeof document&&document.currentScript&&(t=document.currentScript.src),_scriptDir&&(t=_scriptDir),0!==t.indexOf(\"blob:\")?t=t.substr(0,t.replace(/[?#].*/,\"\").lastIndexOf(\"/\")+1):t=\"\",fa=a=>{var b=new XMLHttpRequest;b.open(\"GET\",a,!1);b.send(null);return b.responseText},q&&(x=a=>{var b=new XMLHttpRequest;b.open(\"GET\",a,!1);b.responseType=\"arraybuffer\";b.send(null);return new Uint8Array(b.response)}),w=(a,b,c)=>{var d=new XMLHttpRequest;d.open(\"GET\",a,!0);d.responseType=\n\"arraybuffer\";d.onload=()=>{200==d.status||0==d.status&&d.response?b(d.response):c()};d.onerror=c;d.send(null)};var ia=g.print||console.log.bind(console),z=g.printErr||console.error.bind(console);Object.assign(g,ba);ba=null;g.thisProgram&&(ca=g.thisProgram);var A;g.wasmBinary&&(A=g.wasmBinary);var noExitRuntime=g.noExitRuntime||!0;\"object\"!=typeof WebAssembly&&ja(\"no native wasm support detected\");var B,C,ka=!1,D,E,G,H,J,K,la,ma,na,oa;\nfunction pa(){var a=B.buffer;g.HEAP8=D=new Int8Array(a);g.HEAP16=G=new Int16Array(a);g.HEAP32=J=new Int32Array(a);g.HEAPU8=E=new Uint8Array(a);g.HEAPU16=H=new Uint16Array(a);g.HEAPU32=K=new Uint32Array(a);g.HEAPF32=la=new Float32Array(a);g.HEAPF64=oa=new Float64Array(a);g.HEAP64=ma=new BigInt64Array(a);g.HEAPU64=na=new BigUint64Array(a)}var qa=[],ra=[],sa=[];function ta(){var a=g.preRun.shift();qa.unshift(a)}var L=0,ua=null,M=null;\nfunction ja(a){if(g.onAbort)g.onAbort(a);a=\"Aborted(\"+a+\")\";z(a);ka=!0;a=new WebAssembly.RuntimeError(a+\". Build with -sASSERTIONS for more info.\");m(a);throw a;}function va(a){return a.startsWith(\"data:application/octet-stream;base64,\")}var N;N=\"ort-wasm.wasm\";if(!va(N)){var wa=N;N=g.locateFile?g.locateFile(wa,t):t+wa}function xa(a){if(a==N&&A)return new Uint8Array(A);if(x)return x(a);throw\"both async and sync fetching of the wasm failed\";}\nfunction ya(a){if(!A&&(da||q)){if(\"function\"==typeof fetch&&!a.startsWith(\"file://\"))return fetch(a,{credentials:\"same-origin\"}).then(b=>{if(!b.ok)throw\"failed to load wasm binary file at '\"+a+\"'\";return b.arrayBuffer()}).catch(()=>xa(a));if(w)return new Promise((b,c)=>{w(a,d=>b(new Uint8Array(d)),c)})}return Promise.resolve().then(()=>xa(a))}function za(a,b,c){return ya(a).then(d=>WebAssembly.instantiate(d,b)).then(d=>d).then(c,d=>{z(\"failed to asynchronously prepare wasm: \"+d);ja(d)})}\nfunction Aa(a,b){var c=N;return A||\"function\"!=typeof WebAssembly.instantiateStreaming||va(c)||c.startsWith(\"file://\")||ea||\"function\"!=typeof fetch?za(c,a,b):fetch(c,{credentials:\"same-origin\"}).then(d=>WebAssembly.instantiateStreaming(d,a).then(b,function(e){z(\"wasm streaming compile failed: \"+e);z(\"falling back to ArrayBuffer instantiation\");return za(c,a,b)}))}var Ba=a=>{for(;0<a.length;)a.shift()(g)};\nfunction Ca(a){this.Pa=a-24;this.Za=function(b){K[this.Pa+4>>2]=b};this.Ya=function(b){K[this.Pa+8>>2]=b};this.Ta=function(b,c){this.Ua();this.Za(b);this.Ya(c)};this.Ua=function(){K[this.Pa+16>>2]=0}}\nvar Da=0,Ea=0,Fa=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf8\"):void 0,O=(a,b,c)=>{var d=b+c;for(c=b;a[c]&&!(c>=d);)++c;if(16<c-b&&a.buffer&&Fa)return Fa.decode(a.subarray(b,c));for(d=\"\";b<c;){var e=a[b++];if(e&128){var h=a[b++]&63;if(192==(e&224))d+=String.fromCharCode((e&31)<<6|h);else{var l=a[b++]&63;e=224==(e&240)?(e&15)<<12|h<<6|l:(e&7)<<18|h<<12|l<<6|a[b++]&63;65536>e?d+=String.fromCharCode(e):(e-=65536,d+=String.fromCharCode(55296|e>>10,56320|e&1023))}}else d+=String.fromCharCode(e)}return d},\nP=a=>{for(var b=0,c=0;c<a.length;++c){var d=a.charCodeAt(c);127>=d?b++:2047>=d?b+=2:55296<=d&&57343>=d?(b+=4,++c):b+=3}return b},Q=(a,b,c,d)=>{if(!(0<d))return 0;var e=c;d=c+d-1;for(var h=0;h<a.length;++h){var l=a.charCodeAt(h);if(55296<=l&&57343>=l){var k=a.charCodeAt(++h);l=65536+((l&1023)<<10)|k&1023}if(127>=l){if(c>=d)break;b[c++]=l}else{if(2047>=l){if(c+1>=d)break;b[c++]=192|l>>6}else{if(65535>=l){if(c+2>=d)break;b[c++]=224|l>>12}else{if(c+3>=d)break;b[c++]=240|l>>18;b[c++]=128|l>>12&63}b[c++]=\n128|l>>6&63}b[c++]=128|l&63}}b[c]=0;return c-e};function Ga(a){if(null===a)return\"null\";var b=typeof a;return\"object\"===b||\"array\"===b||\"function\"===b?a.toString():\"\"+a}var Ha=void 0;function R(a){for(var b=\"\";E[a];)b+=Ha[E[a++]];return b}var Ia={},Ja={},Ka={},La=void 0;function S(a){throw new La(a);}\nfunction Ma(a,b,c={}){var d=b.name;a||S(`type \"${d}\" must have a positive integer typeid pointer`);if(Ja.hasOwnProperty(a)){if(c.$a)return;S(`Cannot register type '${d}' twice`)}Ja[a]=b;delete Ka[a];Ia.hasOwnProperty(a)&&(b=Ia[a],delete Ia[a],b.forEach(e=>e()))}function T(a,b,c={}){if(!(\"argPackAdvance\"in b))throw new TypeError(\"registerType registeredInstance requires argPackAdvance\");Ma(a,b,c)}\nfunction Na(a,b,c){switch(b){case 0:return c?function(d){return D[d]}:function(d){return E[d]};case 1:return c?function(d){return G[d>>1]}:function(d){return H[d>>1]};case 2:return c?function(d){return J[d>>2]}:function(d){return K[d>>2]};case 3:return c?function(d){return ma[d>>3]}:function(d){return na[d>>3]};default:throw new TypeError(\"Unknown integer type: \"+a);}}\nfunction Oa(a){switch(a){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError(`Unknown type size: ${a}`);}}function Pa(){this.Ma=[void 0];this.Wa=[]}var U=new Pa;function Qa(a){a>=U.Pa&&0===--U.get(a).Xa&&U.Ua(a)}var V=a=>{a||S(\"Cannot use deleted val. handle = \"+a);return U.get(a).value},W=a=>{switch(a){case void 0:return 1;case null:return 2;case !0:return 3;case !1:return 4;default:return U.Ta({Xa:1,value:a})}};\nfunction Ra(a){return this.fromWireType(J[a>>2])}function Sa(a,b){switch(b){case 2:return function(c){return this.fromWireType(la[c>>2])};case 3:return function(c){return this.fromWireType(oa[c>>3])};default:throw new TypeError(\"Unknown float type: \"+a);}}\nvar Ta=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf-16le\"):void 0,Ua=(a,b)=>{var c=a>>1;for(var d=c+b/2;!(c>=d)&&H[c];)++c;c<<=1;if(32<c-a&&Ta)return Ta.decode(E.subarray(a,c));c=\"\";for(d=0;!(d>=b/2);++d){var e=G[a+2*d>>1];if(0==e)break;c+=String.fromCharCode(e)}return c},Va=(a,b,c)=>{void 0===c&&(c=2147483647);if(2>c)return 0;c-=2;var d=b;c=c<2*a.length?c/2:a.length;for(var e=0;e<c;++e)G[b>>1]=a.charCodeAt(e),b+=2;G[b>>1]=0;return b-d},Wa=a=>2*a.length,Xa=(a,b)=>{for(var c=0,d=\"\";!(c>=b/\n4);){var e=J[a+4*c>>2];if(0==e)break;++c;65536<=e?(e-=65536,d+=String.fromCharCode(55296|e>>10,56320|e&1023)):d+=String.fromCharCode(e)}return d},Ya=(a,b,c)=>{void 0===c&&(c=2147483647);if(4>c)return 0;var d=b;c=d+c-4;for(var e=0;e<a.length;++e){var h=a.charCodeAt(e);if(55296<=h&&57343>=h){var l=a.charCodeAt(++e);h=65536+((h&1023)<<10)|l&1023}J[b>>2]=h;b+=4;if(b+4>c)break}J[b>>2]=0;return b-d},Za=a=>{for(var b=0,c=0;c<a.length;++c){var d=a.charCodeAt(c);55296<=d&&57343>=d&&++c;b+=4}return b};\nfunction $a(a,b){var c=Ja[a];if(void 0===c){a=ab(a);var d=R(a);X(a);S(b+\" has unknown type \"+d)}return c}var bb={};function cb(a){var b=bb[a];return void 0===b?R(a):b}var eb=[];function fb(){return\"object\"==typeof globalThis?globalThis:Function(\"return this\")()}function gb(a){var b=eb.length;eb.push(a);return b}function hb(a,b){for(var c=Array(a),d=0;d<a;++d)c[d]=$a(K[b+4*d>>2],\"parameter \"+d);return c}\nfunction ib(a){if(void 0===a)return\"_unknown\";a=a.replace(/[^a-zA-Z0-9_]/g,\"$\");var b=a.charCodeAt(0);return 48<=b&&57>=b?`_${a}`:a}var jb=[];function kb(a,b){a=ib(a);return{[a]:function(){return b.apply(this,arguments)}}[a]}\nfunction lb(a){var b=Function;if(!(b instanceof Function))throw new TypeError(`new_ called with constructor type ${typeof b} which is not a function`);var c=kb(b.name||\"unknownFunctionName\",function(){});c.prototype=b.prototype;c=new c;a=b.apply(c,a);return a instanceof Object?a:c}\nfunction mb(a){for(var b=\"\",c=0;c<a;++c)b+=(0!==c?\", \":\"\")+\"arg\"+c;var d=\"return function emval_allocator_\"+a+\"(constructor, argTypes, args) {\\n  var HEAPU32 = getMemory();\\n\";for(c=0;c<a;++c)d+=\"var argType\"+c+\" = requireRegisteredType(HEAPU32[((argTypes)>>2)], 'parameter \"+c+\"');\\nvar arg\"+c+\" = argType\"+c+\".readValueFromPointer(args);\\nargs += argType\"+c+\"['argPackAdvance'];\\nargTypes += 4;\\n\";return(new Function(\"requireRegisteredType\",\"Module\",\"valueToHandle\",\"getMemory\",d+(\"var obj = new constructor(\"+\nb+\");\\nreturn valueToHandle(obj);\\n}\\n\")))($a,g,W,()=>K)}var nb={};function Y(a){return-9007199254740992>a||9007199254740992<a?NaN:Number(a)}\nvar Z=a=>0===a%4&&(0!==a%100||0===a%400),ob=[0,31,60,91,121,152,182,213,244,274,305,335],pb=[0,31,59,90,120,151,181,212,243,273,304,334],rb=a=>{var b=P(a)+1,c=qb(b);c&&Q(a,E,c,b);return c},sb={},ub=()=>{if(!tb){var a={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:ca||\"./this.program\"},b;for(b in sb)void 0===sb[b]?delete a[b]:a[b]=sb[b];var c=[];for(b in a)c.push(`${b}=${a[b]}`);\ntb=c}return tb},tb,vb=[null,[],[]],wb=[31,29,31,30,31,30,31,31,30,31,30,31],xb=[31,28,31,30,31,30,31,31,30,31,30,31];function yb(a){var b=Array(P(a)+1);Q(a,b,0,b.length);return b}\nfor(var zb=(a,b,c,d)=>{function e(f,r,u){for(f=\"number\"==typeof f?f.toString():f||\"\";f.length<r;)f=u[0]+f;return f}function h(f,r){return e(f,r,\"0\")}function l(f,r){function u(db){return 0>db?-1:0<db?1:0}var I;0===(I=u(f.getFullYear()-r.getFullYear()))&&0===(I=u(f.getMonth()-r.getMonth()))&&(I=u(f.getDate()-r.getDate()));return I}function k(f){switch(f.getDay()){case 0:return new Date(f.getFullYear()-1,11,29);case 1:return f;case 2:return new Date(f.getFullYear(),0,3);case 3:return new Date(f.getFullYear(),\n0,2);case 4:return new Date(f.getFullYear(),0,1);case 5:return new Date(f.getFullYear()-1,11,31);case 6:return new Date(f.getFullYear()-1,11,30)}}function n(f){var r=f.Na;for(f=new Date((new Date(f.Oa+1900,0,1)).getTime());0<r;){var u=f.getMonth(),I=(Z(f.getFullYear())?wb:xb)[u];if(r>I-f.getDate())r-=I-f.getDate()+1,f.setDate(1),11>u?f.setMonth(u+1):(f.setMonth(0),f.setFullYear(f.getFullYear()+1));else{f.setDate(f.getDate()+r);break}}u=new Date(f.getFullYear()+1,0,4);r=k(new Date(f.getFullYear(),\n0,4));u=k(u);return 0>=l(r,f)?0>=l(u,f)?f.getFullYear()+1:f.getFullYear():f.getFullYear()-1}var p=J[d+40>>2];d={eb:J[d>>2],cb:J[d+4>>2],Ra:J[d+8>>2],Va:J[d+12>>2],Sa:J[d+16>>2],Oa:J[d+20>>2],Ia:J[d+24>>2],Na:J[d+28>>2],gb:J[d+32>>2],bb:J[d+36>>2],fb:p?p?O(E,p):\"\":\"\"};c=c?O(E,c):\"\";p={\"%c\":\"%a %b %d %H:%M:%S %Y\",\"%D\":\"%m/%d/%y\",\"%F\":\"%Y-%m-%d\",\"%h\":\"%b\",\"%r\":\"%I:%M:%S %p\",\"%R\":\"%H:%M\",\"%T\":\"%H:%M:%S\",\"%x\":\"%m/%d/%y\",\"%X\":\"%H:%M:%S\",\"%Ec\":\"%c\",\"%EC\":\"%C\",\"%Ex\":\"%m/%d/%y\",\"%EX\":\"%H:%M:%S\",\"%Ey\":\"%y\",\n\"%EY\":\"%Y\",\"%Od\":\"%d\",\"%Oe\":\"%e\",\"%OH\":\"%H\",\"%OI\":\"%I\",\"%Om\":\"%m\",\"%OM\":\"%M\",\"%OS\":\"%S\",\"%Ou\":\"%u\",\"%OU\":\"%U\",\"%OV\":\"%V\",\"%Ow\":\"%w\",\"%OW\":\"%W\",\"%Oy\":\"%y\"};for(var v in p)c=c.replace(new RegExp(v,\"g\"),p[v]);var y=\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\".split(\" \"),F=\"January February March April May June July August September October November December\".split(\" \");p={\"%a\":f=>y[f.Ia].substring(0,3),\"%A\":f=>y[f.Ia],\"%b\":f=>F[f.Sa].substring(0,3),\"%B\":f=>F[f.Sa],\"%C\":f=>h((f.Oa+1900)/\n100|0,2),\"%d\":f=>h(f.Va,2),\"%e\":f=>e(f.Va,2,\" \"),\"%g\":f=>n(f).toString().substring(2),\"%G\":f=>n(f),\"%H\":f=>h(f.Ra,2),\"%I\":f=>{f=f.Ra;0==f?f=12:12<f&&(f-=12);return h(f,2)},\"%j\":f=>{for(var r=0,u=0;u<=f.Sa-1;r+=(Z(f.Oa+1900)?wb:xb)[u++]);return h(f.Va+r,3)},\"%m\":f=>h(f.Sa+1,2),\"%M\":f=>h(f.cb,2),\"%n\":()=>\"\\n\",\"%p\":f=>0<=f.Ra&&12>f.Ra?\"AM\":\"PM\",\"%S\":f=>h(f.eb,2),\"%t\":()=>\"\\t\",\"%u\":f=>f.Ia||7,\"%U\":f=>h(Math.floor((f.Na+7-f.Ia)/7),2),\"%V\":f=>{var r=Math.floor((f.Na+7-(f.Ia+6)%7)/7);2>=(f.Ia+371-f.Na-2)%\n7&&r++;if(r)53==r&&(u=(f.Ia+371-f.Na)%7,4==u||3==u&&Z(f.Oa)||(r=1));else{r=52;var u=(f.Ia+7-f.Na-1)%7;(4==u||5==u&&Z(f.Oa%400-1))&&r++}return h(r,2)},\"%w\":f=>f.Ia,\"%W\":f=>h(Math.floor((f.Na+7-(f.Ia+6)%7)/7),2),\"%y\":f=>(f.Oa+1900).toString().substring(2),\"%Y\":f=>f.Oa+1900,\"%z\":f=>{f=f.bb;var r=0<=f;f=Math.abs(f)/60;return(r?\"+\":\"-\")+String(\"0000\"+(f/60*100+f%60)).slice(-4)},\"%Z\":f=>f.fb,\"%%\":()=>\"%\"};c=c.replace(/%%/g,\"\\x00\\x00\");for(v in p)c.includes(v)&&(c=c.replace(new RegExp(v,\"g\"),p[v](d)));c=\nc.replace(/\\0\\0/g,\"%\");v=yb(c);if(v.length>b)return 0;D.set(v,a);return v.length-1},Ab=Array(256),Bb=0;256>Bb;++Bb)Ab[Bb]=String.fromCharCode(Bb);Ha=Ab;La=g.BindingError=class extends Error{constructor(a){super(a);this.name=\"BindingError\"}};g.InternalError=class extends Error{constructor(a){super(a);this.name=\"InternalError\"}};\nObject.assign(Pa.prototype,{get(a){return this.Ma[a]},has(a){return void 0!==this.Ma[a]},Ta(a){var b=this.Wa.pop()||this.Ma.length;this.Ma[b]=a;return b},Ua(a){this.Ma[a]=void 0;this.Wa.push(a)}});U.Ma.push({value:void 0},{value:null},{value:!0},{value:!1});U.Pa=U.Ma.length;g.count_emval_handles=function(){for(var a=0,b=U.Pa;b<U.Ma.length;++b)void 0!==U.Ma[b]&&++a;return a};\nvar Cb={a:function(a,b,c){(new Ca(a)).Ta(b,c);Da=a;Ea++;throw Da;},v:function(){return 0},ba:()=>{},N:()=>{},P:()=>{},H:function(){return 0},$:()=>{},V:()=>{},_:()=>{},A:function(){},O:()=>{},L:()=>{},aa:()=>{},M:()=>{},D:function(a,b,c,d,e){b=R(b);c=Oa(c);var h=-1!=b.indexOf(\"u\");h&&(e=(1n<<64n)-1n);T(a,{name:b,fromWireType:function(l){return l},toWireType:function(l,k){if(\"bigint\"!=typeof k&&\"number\"!=typeof k)throw new TypeError(`Cannot convert \"${Ga(k)}\" to ${this.name}`);if(k<d||k>e)throw new TypeError(`Passing a number \"${Ga(k)}\" from JS side to C/C++ side to an argument of type \"${b}\", which is outside the valid range [${d}, ${e}]!`);\nreturn k},argPackAdvance:8,readValueFromPointer:Na(b,c,!h),Qa:null})},ea:function(a,b,c,d,e){var h=Oa(c);b=R(b);T(a,{name:b,fromWireType:function(l){return!!l},toWireType:function(l,k){return k?d:e},argPackAdvance:8,readValueFromPointer:function(l){if(1===c)var k=D;else if(2===c)k=G;else if(4===c)k=J;else throw new TypeError(\"Unknown boolean type size: \"+b);return this.fromWireType(k[l>>h])},Qa:null})},da:function(a,b){b=R(b);T(a,{name:b,fromWireType:function(c){var d=V(c);Qa(c);return d},toWireType:function(c,\nd){return W(d)},argPackAdvance:8,readValueFromPointer:Ra,Qa:null})},C:function(a,b,c){c=Oa(c);b=R(b);T(a,{name:b,fromWireType:function(d){return d},toWireType:function(d,e){return e},argPackAdvance:8,readValueFromPointer:Sa(b,c),Qa:null})},p:function(a,b,c,d,e){b=R(b);-1===e&&(e=4294967295);e=Oa(c);var h=k=>k;if(0===d){var l=32-8*c;h=k=>k<<l>>>l}c=b.includes(\"unsigned\")?function(k,n){return n>>>0}:function(k,n){return n};T(a,{name:b,fromWireType:h,toWireType:c,argPackAdvance:8,readValueFromPointer:Na(b,\ne,0!==d),Qa:null})},l:function(a,b,c){function d(h){h>>=2;var l=K;return new e(l.buffer,l[h+1],l[h])}var e=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array,BigInt64Array,BigUint64Array][b];c=R(c);T(a,{name:c,fromWireType:d,argPackAdvance:8,readValueFromPointer:d},{$a:!0})},E:function(a,b){b=R(b);var c=\"std::string\"===b;T(a,{name:b,fromWireType:function(d){var e=K[d>>2],h=d+4;if(c)for(var l=h,k=0;k<=e;++k){var n=h+k;if(k==e||0==E[n]){l=l?O(E,l,n-l):\"\";if(void 0===\np)var p=l;else p+=String.fromCharCode(0),p+=l;l=n+1}}else{p=Array(e);for(k=0;k<e;++k)p[k]=String.fromCharCode(E[h+k]);p=p.join(\"\")}X(d);return p},toWireType:function(d,e){e instanceof ArrayBuffer&&(e=new Uint8Array(e));var h=\"string\"==typeof e;h||e instanceof Uint8Array||e instanceof Uint8ClampedArray||e instanceof Int8Array||S(\"Cannot pass non-string to std::string\");var l=c&&h?P(e):e.length;var k=qb(4+l+1),n=k+4;K[k>>2]=l;if(c&&h)Q(e,E,n,l+1);else if(h)for(h=0;h<l;++h){var p=e.charCodeAt(h);255<\np&&(X(n),S(\"String has UTF-16 code units that do not fit in 8 bits\"));E[n+h]=p}else for(h=0;h<l;++h)E[n+h]=e[h];null!==d&&d.push(X,k);return k},argPackAdvance:8,readValueFromPointer:Ra,Qa:function(d){X(d)}})},x:function(a,b,c){c=R(c);if(2===b){var d=Ua;var e=Va;var h=Wa;var l=()=>H;var k=1}else 4===b&&(d=Xa,e=Ya,h=Za,l=()=>K,k=2);T(a,{name:c,fromWireType:function(n){for(var p=K[n>>2],v=l(),y,F=n+4,f=0;f<=p;++f){var r=n+4+f*b;if(f==p||0==v[r>>k])F=d(F,r-F),void 0===y?y=F:(y+=String.fromCharCode(0),\ny+=F),F=r+b}X(n);return y},toWireType:function(n,p){\"string\"!=typeof p&&S(`Cannot pass non-string to C++ string type ${c}`);var v=h(p),y=qb(4+v+b);K[y>>2]=v>>k;e(p,y+4,v+b);null!==n&&n.push(X,y);return y},argPackAdvance:8,readValueFromPointer:Ra,Qa:function(n){X(n)}})},fa:function(a,b){b=R(b);T(a,{ab:!0,name:b,argPackAdvance:0,fromWireType:function(){},toWireType:function(){}})},ca:()=>!0,o:function(a,b,c){a=V(a);b=$a(b,\"emval::as\");var d=[],e=W(d);K[c>>2]=e;return b.toWireType(d,a)},h:function(a,\nb,c,d,e){a=eb[a];b=V(b);c=cb(c);var h=[];K[d>>2]=W(h);return a(b,c,h,e)},q:function(a,b,c,d){a=eb[a];b=V(b);c=cb(c);a(b,c,null,d)},b:Qa,F:function(a,b){a=V(a);b=V(b);return a==b},u:function(a){if(0===a)return W(fb());a=cb(a);return W(fb()[a])},g:function(a,b){var c=hb(a,b),d=c[0];b=d.name+\"_$\"+c.slice(1).map(function(v){return v.name}).join(\"_\")+\"$\";var e=jb[b];if(void 0!==e)return e;e=[\"retType\"];for(var h=[d],l=\"\",k=0;k<a-1;++k)l+=(0!==k?\", \":\"\")+\"arg\"+k,e.push(\"argType\"+k),h.push(c[1+k]);var n=\n\"return function \"+ib(\"methodCaller_\"+b)+\"(handle, name, destructors, args) {\\n\",p=0;for(k=0;k<a-1;++k)n+=\"    var arg\"+k+\" = argType\"+k+\".readValueFromPointer(args\"+(p?\"+\"+p:\"\")+\");\\n\",p+=c[k+1].argPackAdvance;n+=\"    var rv = handle[name](\"+l+\");\\n\";for(k=0;k<a-1;++k)c[k+1].deleteObject&&(n+=\"    argType\"+k+\".deleteObject(arg\"+k+\");\\n\");d.ab||(n+=\"    return retType.toWireType(destructors, rv);\\n\");e.push(n+\"};\\n\");a=lb(e).apply(null,h);e=gb(a);return jb[b]=e},r:function(a,b){a=V(a);b=V(b);return W(a[b])},\nc:function(a){4<a&&(U.get(a).Xa+=1)},G:function(a,b,c,d){a=V(a);var e=nb[b];e||(e=mb(b),nb[b]=e);return e(a,c,d)},s:function(){return W([])},k:function(a){a=V(a);for(var b=Array(a.length),c=0;c<a.length;c++)b[c]=a[c];return W(b)},d:function(a){return W(cb(a))},j:function(){return W({})},f:function(a){for(var b=V(a);b.length;){var c=b.pop();b.pop()(c)}Qa(a)},i:function(a,b,c){a=V(a);b=V(b);c=V(c);a[b]=c},e:function(a,b){a=$a(a,\"_emval_take_value\");a=a.readValueFromPointer(b);return W(a)},S:function(a,\nb){a=Y(a);b=Y(b);a=new Date(1E3*a);J[b>>2]=a.getUTCSeconds();J[b+4>>2]=a.getUTCMinutes();J[b+8>>2]=a.getUTCHours();J[b+12>>2]=a.getUTCDate();J[b+16>>2]=a.getUTCMonth();J[b+20>>2]=a.getUTCFullYear()-1900;J[b+24>>2]=a.getUTCDay();J[b+28>>2]=(a.getTime()-Date.UTC(a.getUTCFullYear(),0,1,0,0,0,0))/864E5|0},T:function(a,b){a=Y(a);b=Y(b);a=new Date(1E3*a);J[b>>2]=a.getSeconds();J[b+4>>2]=a.getMinutes();J[b+8>>2]=a.getHours();J[b+12>>2]=a.getDate();J[b+16>>2]=a.getMonth();J[b+20>>2]=a.getFullYear()-1900;\nJ[b+24>>2]=a.getDay();J[b+28>>2]=(Z(a.getFullYear())?ob:pb)[a.getMonth()]+a.getDate()-1|0;J[b+36>>2]=-(60*a.getTimezoneOffset());var c=(new Date(a.getFullYear(),6,1)).getTimezoneOffset(),d=(new Date(a.getFullYear(),0,1)).getTimezoneOffset();J[b+32>>2]=(c!=d&&a.getTimezoneOffset()==Math.min(d,c))|0},U:function(a){a=Y(a);var b=new Date(J[a+20>>2]+1900,J[a+16>>2],J[a+12>>2],J[a+8>>2],J[a+4>>2],J[a>>2],0),c=J[a+32>>2],d=b.getTimezoneOffset(),e=(new Date(b.getFullYear(),6,1)).getTimezoneOffset(),h=(new Date(b.getFullYear(),\n0,1)).getTimezoneOffset(),l=Math.min(h,e);0>c?J[a+32>>2]=Number(e!=h&&l==d):0<c!=(l==d)&&(e=Math.max(h,e),b.setTime(b.getTime()+6E4*((0<c?l:e)-d)));J[a+24>>2]=b.getDay();J[a+28>>2]=(Z(b.getFullYear())?ob:pb)[b.getMonth()]+b.getDate()-1|0;J[a>>2]=b.getSeconds();J[a+4>>2]=b.getMinutes();J[a+8>>2]=b.getHours();J[a+12>>2]=b.getDate();J[a+16>>2]=b.getMonth();J[a+20>>2]=b.getYear();return BigInt(b.getTime()/1E3)},Q:function(){return-52},R:function(){},J:(a,b,c)=>{function d(n){return(n=n.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?\nn[1]:\"GMT\"}var e=(new Date).getFullYear(),h=new Date(e,0,1),l=new Date(e,6,1);e=h.getTimezoneOffset();var k=l.getTimezoneOffset();K[a>>2]=60*Math.max(e,k);J[b>>2]=Number(e!=k);a=d(h);b=d(l);a=rb(a);b=rb(b);k<e?(K[c>>2]=a,K[c+4>>2]=b):(K[c>>2]=b,K[c+4>>2]=a)},t:()=>{ja(\"\")},B:function(){return Date.now()},K:()=>2147483648,n:()=>performance.now(),Z:(a,b,c)=>E.copyWithin(a,b,b+c),I:a=>{var b=E.length;a>>>=0;if(2147483648<a)return!1;for(var c=1;4>=c;c*=2){var d=b*(1+.2/c);d=Math.min(d,a+100663296);var e=\nMath;d=Math.max(a,d);a:{e=e.min.call(e,2147483648,d+(65536-d%65536)%65536)-B.buffer.byteLength+65535>>>16;try{B.grow(e);pa();var h=1;break a}catch(l){}h=void 0}if(h)return!0}return!1},X:(a,b)=>{var c=0;ub().forEach(function(d,e){var h=b+c;e=K[a+4*e>>2]=h;for(h=0;h<d.length;++h)D[e++>>0]=d.charCodeAt(h);D[e>>0]=0;c+=d.length+1});return 0},Y:(a,b)=>{var c=ub();K[a>>2]=c.length;var d=0;c.forEach(function(e){d+=e.length+1});K[b>>2]=d;return 0},w:()=>52,z:()=>52,W:function(){return 70},y:(a,b,c,d)=>{for(var e=\n0,h=0;h<c;h++){var l=K[b>>2],k=K[b+4>>2];b+=8;for(var n=0;n<k;n++){var p=E[l+n],v=vb[a];0===p||10===p?((1===a?ia:z)(O(v,0)),v.length=0):v.push(p)}e+=k}K[d>>2]=e;return 0},ga:zb,m:(a,b,c,d)=>zb(a,b,c,d)};\n(function(){function a(c){C=c=c.exports;B=C.ha;pa();ra.unshift(C.ia);L--;g.monitorRunDependencies&&g.monitorRunDependencies(L);if(0==L&&(null!==ua&&(clearInterval(ua),ua=null),M)){var d=M;M=null;d()}return c}var b={a:Cb};L++;g.monitorRunDependencies&&g.monitorRunDependencies(L);if(g.instantiateWasm)try{return g.instantiateWasm(b,a)}catch(c){z(\"Module.instantiateWasm callback failed with error: \"+c),m(c)}Aa(b,function(c){a(c.instance)}).catch(m);return{}})();g._OrtInit=(a,b)=>(g._OrtInit=C.ja)(a,b);\ng._OrtGetLastError=(a,b)=>(g._OrtGetLastError=C.ka)(a,b);g._OrtCreateSessionOptions=(a,b,c,d,e,h,l,k,n,p)=>(g._OrtCreateSessionOptions=C.la)(a,b,c,d,e,h,l,k,n,p);g._OrtAppendExecutionProvider=(a,b)=>(g._OrtAppendExecutionProvider=C.ma)(a,b);g._OrtAddFreeDimensionOverride=(a,b,c)=>(g._OrtAddFreeDimensionOverride=C.na)(a,b,c);g._OrtAddSessionConfigEntry=(a,b,c)=>(g._OrtAddSessionConfigEntry=C.oa)(a,b,c);g._OrtReleaseSessionOptions=a=>(g._OrtReleaseSessionOptions=C.pa)(a);\ng._OrtCreateSession=(a,b,c)=>(g._OrtCreateSession=C.qa)(a,b,c);g._OrtReleaseSession=a=>(g._OrtReleaseSession=C.ra)(a);g._OrtGetInputOutputCount=(a,b,c)=>(g._OrtGetInputOutputCount=C.sa)(a,b,c);g._OrtGetInputName=(a,b)=>(g._OrtGetInputName=C.ta)(a,b);g._OrtGetOutputName=(a,b)=>(g._OrtGetOutputName=C.ua)(a,b);g._OrtFree=a=>(g._OrtFree=C.va)(a);g._OrtCreateTensor=(a,b,c,d,e)=>(g._OrtCreateTensor=C.wa)(a,b,c,d,e);g._OrtGetTensorData=(a,b,c,d,e)=>(g._OrtGetTensorData=C.xa)(a,b,c,d,e);\ng._OrtReleaseTensor=a=>(g._OrtReleaseTensor=C.ya)(a);g._OrtCreateRunOptions=(a,b,c,d)=>(g._OrtCreateRunOptions=C.za)(a,b,c,d);g._OrtAddRunConfigEntry=(a,b,c)=>(g._OrtAddRunConfigEntry=C.Aa)(a,b,c);g._OrtReleaseRunOptions=a=>(g._OrtReleaseRunOptions=C.Ba)(a);g._OrtRun=(a,b,c,d,e,h,l,k)=>(g._OrtRun=C.Ca)(a,b,c,d,e,h,l,k);g._OrtEndProfiling=a=>(g._OrtEndProfiling=C.Da)(a);var qb=g._malloc=a=>(qb=g._malloc=C.Ea)(a),X=g._free=a=>(X=g._free=C.Fa)(a),ab=a=>(ab=C.Ga)(a);\ng.__embind_initialize_bindings=()=>(g.__embind_initialize_bindings=C.Ha)();var Db=()=>(Db=C.Ja)(),Eb=a=>(Eb=C.Ka)(a),Fb=a=>(Fb=C.La)(a);g.stackAlloc=Fb;g.stackSave=Db;g.stackRestore=Eb;g.UTF8ToString=(a,b)=>a?O(E,a,b):\"\";g.stringToUTF8=(a,b,c)=>Q(a,E,b,c);g.lengthBytesUTF8=P;var Gb;M=function Hb(){Gb||Ib();Gb||(M=Hb)};\nfunction Ib(){function a(){if(!Gb&&(Gb=!0,g.calledRun=!0,!ka)){Ba(ra);aa(g);if(g.onRuntimeInitialized)g.onRuntimeInitialized();if(g.postRun)for(\"function\"==typeof g.postRun&&(g.postRun=[g.postRun]);g.postRun.length;){var b=g.postRun.shift();sa.unshift(b)}Ba(sa)}}if(!(0<L)){if(g.preRun)for(\"function\"==typeof g.preRun&&(g.preRun=[g.preRun]);g.preRun.length;)ta();Ba(qa);0<L||(g.setStatus?(g.setStatus(\"Running...\"),setTimeout(function(){setTimeout(function(){g.setStatus(\"\")},1);a()},1)):a())}}\nif(g.preInit)for(\"function\"==typeof g.preInit&&(g.preInit=[g.preInit]);0<g.preInit.length;)g.preInit.pop()();Ib();\n\n\n  return moduleArg.ready\n}\n\n);\n})();\nif (typeof exports === 'object' && typeof module === 'object')\n  module.exports = ortWasm;\nelse if (typeof define === 'function' && define['amd'])\n  define([], () => ortWasm);\n","\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Callback as used by {@link util.asPromise}.\r\n * @typedef asPromiseCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {...*} params Additional arguments\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {asPromiseCallback} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params  = new Array(arguments.length - 1),\r\n        offset  = 0,\r\n        index   = 2,\r\n        pending = true;\r\n    while (index < arguments.length)\r\n        params[offset++] = arguments[index++];\r\n    return new Promise(function executor(resolve, reject) {\r\n        params[offset] = function callback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var params = new Array(arguments.length - 1),\r\n                        offset = 0;\r\n                    while (offset < params.length)\r\n                        params[offset++] = arguments[offset];\r\n                    resolve.apply(null, params);\r\n                }\r\n            }\r\n        };\r\n        try {\r\n            fn.apply(ctx || null, params);\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var parts = null,\r\n        chunk = [];\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                chunk[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                chunk[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                chunk[i++] = b64[t | b >> 6];\r\n                chunk[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (j) {\r\n        chunk[i++] = b64[t];\r\n        chunk[i++] = 61;\r\n        if (j === 1)\r\n            chunk[i++] = 61;\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\n\r\nmodule.exports = factory(factory);\r\n\r\n/**\r\n * Reads / writes floats / doubles from / to buffers.\r\n * @name util.float\r\n * @namespace\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using little endian byte order.\r\n * @name util.float.writeFloatLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using big endian byte order.\r\n * @name util.float.writeFloatBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using little endian byte order.\r\n * @name util.float.readFloatLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using big endian byte order.\r\n * @name util.float.readFloatBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using little endian byte order.\r\n * @name util.float.writeDoubleLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using big endian byte order.\r\n * @name util.float.writeDoubleBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using little endian byte order.\r\n * @name util.float.readDoubleLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using big endian byte order.\r\n * @name util.float.readDoubleBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n// Factory function for the purpose of node-based testing in modified global environments\r\nfunction factory(exports) {\r\n\r\n    // float: typed array\r\n    if (typeof Float32Array !== \"undefined\") (function() {\r\n\r\n        var f32 = new Float32Array([ -0 ]),\r\n            f8b = new Uint8Array(f32.buffer),\r\n            le  = f8b[3] === 128;\r\n\r\n        function writeFloat_f32_cpy(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n        }\r\n\r\n        function writeFloat_f32_rev(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[3];\r\n            buf[pos + 1] = f8b[2];\r\n            buf[pos + 2] = f8b[1];\r\n            buf[pos + 3] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\r\n\r\n        function readFloat_f32_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        function readFloat_f32_rev(buf, pos) {\r\n            f8b[3] = buf[pos    ];\r\n            f8b[2] = buf[pos + 1];\r\n            f8b[1] = buf[pos + 2];\r\n            f8b[0] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\r\n\r\n    // float: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeFloat_ieee754(writeUint, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0)\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n            else if (isNaN(val))\r\n                writeUint(2143289344, buf, pos);\r\n            else if (val > 3.4028234663852886e+38) // +-Infinity\r\n                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n            else if (val < 1.1754943508222875e-38) // denormal\r\n                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n            else {\r\n                var exponent = Math.floor(Math.log(val) / Math.LN2),\r\n                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n            }\r\n        }\r\n\r\n        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\r\n        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\r\n\r\n        function readFloat_ieee754(readUint, buf, pos) {\r\n            var uint = readUint(buf, pos),\r\n                sign = (uint >> 31) * 2 + 1,\r\n                exponent = uint >>> 23 & 255,\r\n                mantissa = uint & 8388607;\r\n            return exponent === 255\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 1.401298464324817e-45 * mantissa\r\n                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n        }\r\n\r\n        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\r\n        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\r\n\r\n    })();\r\n\r\n    // double: typed array\r\n    if (typeof Float64Array !== \"undefined\") (function() {\r\n\r\n        var f64 = new Float64Array([-0]),\r\n            f8b = new Uint8Array(f64.buffer),\r\n            le  = f8b[7] === 128;\r\n\r\n        function writeDouble_f64_cpy(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n            buf[pos + 4] = f8b[4];\r\n            buf[pos + 5] = f8b[5];\r\n            buf[pos + 6] = f8b[6];\r\n            buf[pos + 7] = f8b[7];\r\n        }\r\n\r\n        function writeDouble_f64_rev(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[7];\r\n            buf[pos + 1] = f8b[6];\r\n            buf[pos + 2] = f8b[5];\r\n            buf[pos + 3] = f8b[4];\r\n            buf[pos + 4] = f8b[3];\r\n            buf[pos + 5] = f8b[2];\r\n            buf[pos + 6] = f8b[1];\r\n            buf[pos + 7] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\r\n\r\n        function readDouble_f64_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            f8b[4] = buf[pos + 4];\r\n            f8b[5] = buf[pos + 5];\r\n            f8b[6] = buf[pos + 6];\r\n            f8b[7] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        function readDouble_f64_rev(buf, pos) {\r\n            f8b[7] = buf[pos    ];\r\n            f8b[6] = buf[pos + 1];\r\n            f8b[5] = buf[pos + 2];\r\n            f8b[4] = buf[pos + 3];\r\n            f8b[3] = buf[pos + 4];\r\n            f8b[2] = buf[pos + 5];\r\n            f8b[1] = buf[pos + 6];\r\n            f8b[0] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\r\n\r\n    // double: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);\r\n            } else if (isNaN(val)) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(2146959360, buf, pos + off1);\r\n            } else if (val > 1.7976931348623157e+308) { // +-Infinity\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\r\n            } else {\r\n                var mantissa;\r\n                if (val < 2.2250738585072014e-308) { // denormal\r\n                    mantissa = val / 5e-324;\r\n                    writeUint(mantissa >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\r\n                } else {\r\n                    var exponent = Math.floor(Math.log(val) / Math.LN2);\r\n                    if (exponent === 1024)\r\n                        exponent = 1023;\r\n                    mantissa = val * Math.pow(2, -exponent);\r\n                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\r\n                }\r\n            }\r\n        }\r\n\r\n        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\r\n        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\r\n\r\n        function readDouble_ieee754(readUint, off0, off1, buf, pos) {\r\n            var lo = readUint(buf, pos + off0),\r\n                hi = readUint(buf, pos + off1);\r\n            var sign = (hi >> 31) * 2 + 1,\r\n                exponent = hi >>> 20 & 2047,\r\n                mantissa = 4294967296 * (hi & 1048575) + lo;\r\n            return exponent === 2047\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 5e-324 * mantissa\r\n                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n        }\r\n\r\n        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\r\n        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\r\n\r\n    })();\r\n\r\n    return exports;\r\n}\r\n\r\n// uint helpers\r\n\r\nfunction writeUintLE(val, buf, pos) {\r\n    buf[pos    ] =  val        & 255;\r\n    buf[pos + 1] =  val >>> 8  & 255;\r\n    buf[pos + 2] =  val >>> 16 & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\nfunction writeUintBE(val, buf, pos) {\r\n    buf[pos    ] =  val >>> 24;\r\n    buf[pos + 1] =  val >>> 16 & 255;\r\n    buf[pos + 2] =  val >>> 8  & 255;\r\n    buf[pos + 3] =  val        & 255;\r\n}\r\n\r\nfunction readUintLE(buf, pos) {\r\n    return (buf[pos    ]\r\n          | buf[pos + 1] << 8\r\n          | buf[pos + 2] << 16\r\n          | buf[pos + 3] << 24) >>> 0;\r\n}\r\n\r\nfunction readUintBE(buf, pos) {\r\n    return (buf[pos    ] << 24\r\n          | buf[pos + 1] << 16\r\n          | buf[pos + 2] << 8\r\n          | buf[pos + 3]) >>> 0;\r\n}\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","\"use strict\";\r\nexports.__esModule = true;\r\nvar Guid = /** @class */ (function () {\r\n    function Guid(guid) {\r\n        if (!guid) {\r\n            throw new TypeError(\"Invalid argument; `value` has no value.\");\r\n        }\r\n        this.value = Guid.EMPTY;\r\n        if (guid && Guid.isGuid(guid)) {\r\n            this.value = guid;\r\n        }\r\n    }\r\n    Guid.isGuid = function (guid) {\r\n        var value = guid.toString();\r\n        return guid && (guid instanceof Guid || Guid.validator.test(value));\r\n    };\r\n    Guid.create = function () {\r\n        return new Guid([Guid.gen(2), Guid.gen(1), Guid.gen(1), Guid.gen(1), Guid.gen(3)].join(\"-\"));\r\n    };\r\n    Guid.createEmpty = function () {\r\n        return new Guid(\"emptyguid\");\r\n    };\r\n    Guid.parse = function (guid) {\r\n        return new Guid(guid);\r\n    };\r\n    Guid.raw = function () {\r\n        return [Guid.gen(2), Guid.gen(1), Guid.gen(1), Guid.gen(1), Guid.gen(3)].join(\"-\");\r\n    };\r\n    Guid.gen = function (count) {\r\n        var out = \"\";\r\n        for (var i = 0; i < count; i++) {\r\n            // tslint:disable-next-line:no-bitwise\r\n            out += (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\r\n        }\r\n        return out;\r\n    };\r\n    Guid.prototype.equals = function (other) {\r\n        // Comparing string `value` against provided `guid` will auto-call\r\n        // toString on `guid` for comparison\r\n        return Guid.isGuid(other) && this.value === other.toString();\r\n    };\r\n    Guid.prototype.isEmpty = function () {\r\n        return this.value === Guid.EMPTY;\r\n    };\r\n    Guid.prototype.toString = function () {\r\n        return this.value;\r\n    };\r\n    Guid.prototype.toJSON = function () {\r\n        return {\r\n            value: this.value\r\n        };\r\n    };\r\n    Guid.validator = new RegExp(\"^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$\", \"i\");\r\n    Guid.EMPTY = \"00000000-0000-0000-0000-000000000000\";\r\n    return Guid;\r\n}());\r\nexports.Guid = Guid;\r\n","// minimal library entry point.\n\n\"use strict\";\nmodule.exports = require(\"./src/index-minimal\");\n","\"use strict\";\nvar protobuf = exports;\n\n/**\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\n * @name build\n * @type {string}\n * @const\n */\nprotobuf.build = \"minimal\";\n\n// Serialization\nprotobuf.Writer       = require(\"./writer\");\nprotobuf.BufferWriter = require(\"./writer_buffer\");\nprotobuf.Reader       = require(\"./reader\");\nprotobuf.BufferReader = require(\"./reader_buffer\");\n\n// Utility\nprotobuf.util         = require(\"./util/minimal\");\nprotobuf.rpc          = require(\"./rpc\");\nprotobuf.roots        = require(\"./roots\");\nprotobuf.configure    = configure;\n\n/* istanbul ignore next */\n/**\n * Reconfigures the library according to the environment.\n * @returns {undefined}\n */\nfunction configure() {\n    protobuf.util._configure();\n    protobuf.Writer._configure(protobuf.BufferWriter);\n    protobuf.Reader._configure(protobuf.BufferReader);\n}\n\n// Set up buffer utility according to the environment\nconfigure();\n","\"use strict\";\nmodule.exports = Reader;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferReader; // cyclic\n\nvar LongBits  = util.LongBits,\n    utf8      = util.utf8;\n\n/* istanbul ignore next */\nfunction indexOutOfRange(reader, writeLength) {\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\n}\n\n/**\n * Constructs a new reader instance using the specified buffer.\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n * @param {Uint8Array} buffer Buffer to read from\n */\nfunction Reader(buffer) {\n\n    /**\n     * Read buffer.\n     * @type {Uint8Array}\n     */\n    this.buf = buffer;\n\n    /**\n     * Read buffer position.\n     * @type {number}\n     */\n    this.pos = 0;\n\n    /**\n     * Read buffer length.\n     * @type {number}\n     */\n    this.len = buffer.length;\n}\n\nvar create_array = typeof Uint8Array !== \"undefined\"\n    ? function create_typed_array(buffer) {\n        if (buffer instanceof Uint8Array || Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    }\n    /* istanbul ignore next */\n    : function create_array(buffer) {\n        if (Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    };\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup(buffer) {\n            return (Reader.create = function create_buffer(buffer) {\n                return util.Buffer.isBuffer(buffer)\n                    ? new BufferReader(buffer)\n                    /* istanbul ignore next */\n                    : create_array(buffer);\n            })(buffer);\n        }\n        /* istanbul ignore next */\n        : create_array;\n};\n\n/**\n * Creates a new reader using the specified buffer.\n * @function\n * @param {Uint8Array|Buffer} buffer Buffer to read from\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\n * @throws {Error} If `buffer` is not a valid buffer\n */\nReader.create = create();\n\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\n\n/**\n * Reads a varint as an unsigned 32 bit value.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.uint32 = (function read_uint32_setup() {\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\n    return function read_uint32() {\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\n\n        /* istanbul ignore if */\n        if ((this.pos += 5) > this.len) {\n            this.pos = this.len;\n            throw indexOutOfRange(this, 10);\n        }\n        return value;\n    };\n})();\n\n/**\n * Reads a varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.int32 = function read_int32() {\n    return this.uint32() | 0;\n};\n\n/**\n * Reads a zig-zag encoded varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.sint32 = function read_sint32() {\n    var value = this.uint32();\n    return value >>> 1 ^ -(value & 1) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readLongVarint() {\n    // tends to deopt with local vars for octet etc.\n    var bits = new LongBits(0, 0);\n    var i = 0;\n    if (this.len - this.pos > 4) { // fast route (lo)\n        for (; i < 4; ++i) {\n            // 1st..4th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 5th\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\n        if (this.buf[this.pos++] < 128)\n            return bits;\n        i = 0;\n    } else {\n        for (; i < 3; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 1st..3th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 4th\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\n        return bits;\n    }\n    if (this.len - this.pos > 4) { // fast route (hi)\n        for (; i < 5; ++i) {\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    } else {\n        for (; i < 5; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    }\n    /* istanbul ignore next */\n    throw Error(\"invalid varint encoding\");\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads a varint as a signed 64 bit value.\n * @name Reader#int64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as an unsigned 64 bit value.\n * @name Reader#uint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a zig-zag encoded varint as a signed 64 bit value.\n * @name Reader#sint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as a boolean.\n * @returns {boolean} Value read\n */\nReader.prototype.bool = function read_bool() {\n    return this.uint32() !== 0;\n};\n\nfunction readFixed32_end(buf, end) { // note that this uses `end`, not `pos`\n    return (buf[end - 4]\n          | buf[end - 3] << 8\n          | buf[end - 2] << 16\n          | buf[end - 1] << 24) >>> 0;\n}\n\n/**\n * Reads fixed 32 bits as an unsigned 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.fixed32 = function read_fixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4);\n};\n\n/**\n * Reads fixed 32 bits as a signed 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.sfixed32 = function read_sfixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readFixed64(/* this: Reader */) {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 8);\n\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads fixed 64 bits.\n * @name Reader#fixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads zig-zag encoded fixed 64 bits.\n * @name Reader#sfixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a float (32 bit) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.float = function read_float() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readFloatLE(this.buf, this.pos);\n    this.pos += 4;\n    return value;\n};\n\n/**\n * Reads a double (64 bit float) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.double = function read_double() {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readDoubleLE(this.buf, this.pos);\n    this.pos += 8;\n    return value;\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @returns {Uint8Array} Value read\n */\nReader.prototype.bytes = function read_bytes() {\n    var length = this.uint32(),\n        start  = this.pos,\n        end    = this.pos + length;\n\n    /* istanbul ignore if */\n    if (end > this.len)\n        throw indexOutOfRange(this, length);\n\n    this.pos += length;\n    if (Array.isArray(this.buf)) // plain array\n        return this.buf.slice(start, end);\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\n        ? new this.buf.constructor(0)\n        : this._slice.call(this.buf, start, end);\n};\n\n/**\n * Reads a string preceeded by its byte length as a varint.\n * @returns {string} Value read\n */\nReader.prototype.string = function read_string() {\n    var bytes = this.bytes();\n    return utf8.read(bytes, 0, bytes.length);\n};\n\n/**\n * Skips the specified number of bytes if specified, otherwise skips a varint.\n * @param {number} [length] Length if known, otherwise a varint is assumed\n * @returns {Reader} `this`\n */\nReader.prototype.skip = function skip(length) {\n    if (typeof length === \"number\") {\n        /* istanbul ignore if */\n        if (this.pos + length > this.len)\n            throw indexOutOfRange(this, length);\n        this.pos += length;\n    } else {\n        do {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n        } while (this.buf[this.pos++] & 128);\n    }\n    return this;\n};\n\n/**\n * Skips the next element of the specified wire type.\n * @param {number} wireType Wire type received\n * @returns {Reader} `this`\n */\nReader.prototype.skipType = function(wireType) {\n    switch (wireType) {\n        case 0:\n            this.skip();\n            break;\n        case 1:\n            this.skip(8);\n            break;\n        case 2:\n            this.skip(this.uint32());\n            break;\n        case 3:\n            while ((wireType = this.uint32() & 7) !== 4) {\n                this.skipType(wireType);\n            }\n            break;\n        case 5:\n            this.skip(4);\n            break;\n\n        /* istanbul ignore next */\n        default:\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\n    }\n    return this;\n};\n\nReader._configure = function(BufferReader_) {\n    BufferReader = BufferReader_;\n    Reader.create = create();\n    BufferReader._configure();\n\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\n    util.merge(Reader.prototype, {\n\n        int64: function read_int64() {\n            return readLongVarint.call(this)[fn](false);\n        },\n\n        uint64: function read_uint64() {\n            return readLongVarint.call(this)[fn](true);\n        },\n\n        sint64: function read_sint64() {\n            return readLongVarint.call(this).zzDecode()[fn](false);\n        },\n\n        fixed64: function read_fixed64() {\n            return readFixed64.call(this)[fn](true);\n        },\n\n        sfixed64: function read_sfixed64() {\n            return readFixed64.call(this)[fn](false);\n        }\n\n    });\n};\n","\"use strict\";\nmodule.exports = BufferReader;\n\n// extends Reader\nvar Reader = require(\"./reader\");\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer reader instance.\n * @classdesc Wire format reader using node buffers.\n * @extends Reader\n * @constructor\n * @param {Buffer} buffer Buffer to read from\n */\nfunction BufferReader(buffer) {\n    Reader.call(this, buffer);\n\n    /**\n     * Read buffer.\n     * @name BufferReader#buf\n     * @type {Buffer}\n     */\n}\n\nBufferReader._configure = function () {\n    /* istanbul ignore else */\n    if (util.Buffer)\n        BufferReader.prototype._slice = util.Buffer.prototype.slice;\n};\n\n\n/**\n * @override\n */\nBufferReader.prototype.string = function read_string_buffer() {\n    var len = this.uint32(); // modifies pos\n    return this.buf.utf8Slice\n        ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len))\n        : this.buf.toString(\"utf-8\", this.pos, this.pos = Math.min(this.pos + len, this.len));\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @name BufferReader#bytes\n * @function\n * @returns {Buffer} Value read\n */\n\nBufferReader._configure();\n","\"use strict\";\nmodule.exports = {};\n\n/**\n * Named roots.\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\n * Can also be used manually to make roots available across modules.\n * @name roots\n * @type {Object.<string,Root>}\n * @example\n * // pbjs -r myroot -o compiled.js ...\n *\n * // in another module:\n * require(\"./compiled.js\");\n *\n * // in any subsequent module:\n * var root = protobuf.roots[\"myroot\"];\n */\n","\"use strict\";\n\n/**\n * Streaming RPC helpers.\n * @namespace\n */\nvar rpc = exports;\n\n/**\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\n * @typedef RPCImpl\n * @type {function}\n * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\n * @param {Uint8Array} requestData Request data\n * @param {RPCImplCallback} callback Callback function\n * @returns {undefined}\n * @example\n * function rpcImpl(method, requestData, callback) {\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\n *         throw Error(\"no such method\");\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\n *         callback(err, responseData);\n *     });\n * }\n */\n\n/**\n * Node-style callback as used by {@link RPCImpl}.\n * @typedef RPCImplCallback\n * @type {function}\n * @param {Error|null} error Error, if any, otherwise `null`\n * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\n * @returns {undefined}\n */\n\nrpc.Service = require(\"./rpc/service\");\n","\"use strict\";\nmodule.exports = Service;\n\nvar util = require(\"../util/minimal\");\n\n// Extends EventEmitter\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\n\n/**\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\n *\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\n * @typedef rpc.ServiceMethodCallback\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {Error|null} error Error, if any\n * @param {TRes} [response] Response message\n * @returns {undefined}\n */\n\n/**\n * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\n * @typedef rpc.ServiceMethod\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\n * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\n */\n\n/**\n * Constructs a new RPC service instance.\n * @classdesc An RPC service as returned by {@link Service#create}.\n * @exports rpc.Service\n * @extends util.EventEmitter\n * @constructor\n * @param {RPCImpl} rpcImpl RPC implementation\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n */\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\n\n    if (typeof rpcImpl !== \"function\")\n        throw TypeError(\"rpcImpl must be a function\");\n\n    util.EventEmitter.call(this);\n\n    /**\n     * RPC implementation. Becomes `null` once the service is ended.\n     * @type {RPCImpl|null}\n     */\n    this.rpcImpl = rpcImpl;\n\n    /**\n     * Whether requests are length-delimited.\n     * @type {boolean}\n     */\n    this.requestDelimited = Boolean(requestDelimited);\n\n    /**\n     * Whether responses are length-delimited.\n     * @type {boolean}\n     */\n    this.responseDelimited = Boolean(responseDelimited);\n}\n\n/**\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\n * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\n * @param {Constructor<TReq>} requestCtor Request constructor\n * @param {Constructor<TRes>} responseCtor Response constructor\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\n * @returns {undefined}\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n */\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\n\n    if (!request)\n        throw TypeError(\"request must be specified\");\n\n    var self = this;\n    if (!callback)\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\n\n    if (!self.rpcImpl) {\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\n        return undefined;\n    }\n\n    try {\n        return self.rpcImpl(\n            method,\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\n            function rpcCallback(err, response) {\n\n                if (err) {\n                    self.emit(\"error\", err, method);\n                    return callback(err);\n                }\n\n                if (response === null) {\n                    self.end(/* endedByRPC */ true);\n                    return undefined;\n                }\n\n                if (!(response instanceof responseCtor)) {\n                    try {\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\n                    } catch (err) {\n                        self.emit(\"error\", err, method);\n                        return callback(err);\n                    }\n                }\n\n                self.emit(\"data\", response, method);\n                return callback(null, response);\n            }\n        );\n    } catch (err) {\n        self.emit(\"error\", err, method);\n        setTimeout(function() { callback(err); }, 0);\n        return undefined;\n    }\n};\n\n/**\n * Ends this service and emits the `end` event.\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\n * @returns {rpc.Service} `this`\n */\nService.prototype.end = function end(endedByRPC) {\n    if (this.rpcImpl) {\n        if (!endedByRPC) // signal end to rpcImpl\n            this.rpcImpl(null, null, null);\n        this.rpcImpl = null;\n        this.emit(\"end\").off();\n    }\n    return this;\n};\n","\"use strict\";\nmodule.exports = LongBits;\n\nvar util = require(\"../util/minimal\");\n\n/**\n * Constructs new long bits.\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\n * @memberof util\n * @constructor\n * @param {number} lo Low 32 bits, unsigned\n * @param {number} hi High 32 bits, unsigned\n */\nfunction LongBits(lo, hi) {\n\n    // note that the casts below are theoretically unnecessary as of today, but older statically\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\n\n    /**\n     * Low bits.\n     * @type {number}\n     */\n    this.lo = lo >>> 0;\n\n    /**\n     * High bits.\n     * @type {number}\n     */\n    this.hi = hi >>> 0;\n}\n\n/**\n * Zero bits.\n * @memberof util.LongBits\n * @type {util.LongBits}\n */\nvar zero = LongBits.zero = new LongBits(0, 0);\n\nzero.toNumber = function() { return 0; };\nzero.zzEncode = zero.zzDecode = function() { return this; };\nzero.length = function() { return 1; };\n\n/**\n * Zero hash.\n * @memberof util.LongBits\n * @type {string}\n */\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\n\n/**\n * Constructs new long bits from the specified number.\n * @param {number} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.fromNumber = function fromNumber(value) {\n    if (value === 0)\n        return zero;\n    var sign = value < 0;\n    if (sign)\n        value = -value;\n    var lo = value >>> 0,\n        hi = (value - lo) / 4294967296 >>> 0;\n    if (sign) {\n        hi = ~hi >>> 0;\n        lo = ~lo >>> 0;\n        if (++lo > 4294967295) {\n            lo = 0;\n            if (++hi > 4294967295)\n                hi = 0;\n        }\n    }\n    return new LongBits(lo, hi);\n};\n\n/**\n * Constructs new long bits from a number, long or string.\n * @param {Long|number|string} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.from = function from(value) {\n    if (typeof value === \"number\")\n        return LongBits.fromNumber(value);\n    if (util.isString(value)) {\n        /* istanbul ignore else */\n        if (util.Long)\n            value = util.Long.fromString(value);\n        else\n            return LongBits.fromNumber(parseInt(value, 10));\n    }\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\n};\n\n/**\n * Converts this long bits to a possibly unsafe JavaScript number.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {number} Possibly unsafe number\n */\nLongBits.prototype.toNumber = function toNumber(unsigned) {\n    if (!unsigned && this.hi >>> 31) {\n        var lo = ~this.lo + 1 >>> 0,\n            hi = ~this.hi     >>> 0;\n        if (!lo)\n            hi = hi + 1 >>> 0;\n        return -(lo + hi * 4294967296);\n    }\n    return this.lo + this.hi * 4294967296;\n};\n\n/**\n * Converts this long bits to a long.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long} Long\n */\nLongBits.prototype.toLong = function toLong(unsigned) {\n    return util.Long\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\n        /* istanbul ignore next */\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\n};\n\nvar charCodeAt = String.prototype.charCodeAt;\n\n/**\n * Constructs new long bits from the specified 8 characters long hash.\n * @param {string} hash Hash\n * @returns {util.LongBits} Bits\n */\nLongBits.fromHash = function fromHash(hash) {\n    if (hash === zeroHash)\n        return zero;\n    return new LongBits(\n        ( charCodeAt.call(hash, 0)\n        | charCodeAt.call(hash, 1) << 8\n        | charCodeAt.call(hash, 2) << 16\n        | charCodeAt.call(hash, 3) << 24) >>> 0\n    ,\n        ( charCodeAt.call(hash, 4)\n        | charCodeAt.call(hash, 5) << 8\n        | charCodeAt.call(hash, 6) << 16\n        | charCodeAt.call(hash, 7) << 24) >>> 0\n    );\n};\n\n/**\n * Converts this long bits to a 8 characters long hash.\n * @returns {string} Hash\n */\nLongBits.prototype.toHash = function toHash() {\n    return String.fromCharCode(\n        this.lo        & 255,\n        this.lo >>> 8  & 255,\n        this.lo >>> 16 & 255,\n        this.lo >>> 24      ,\n        this.hi        & 255,\n        this.hi >>> 8  & 255,\n        this.hi >>> 16 & 255,\n        this.hi >>> 24\n    );\n};\n\n/**\n * Zig-zag encodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzEncode = function zzEncode() {\n    var mask =   this.hi >> 31;\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Zig-zag decodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzDecode = function zzDecode() {\n    var mask = -(this.lo & 1);\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Calculates the length of this longbits when encoded as a varint.\n * @returns {number} Length\n */\nLongBits.prototype.length = function length() {\n    var part0 =  this.lo,\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\n        part2 =  this.hi >>> 24;\n    return part2 === 0\n         ? part1 === 0\n           ? part0 < 16384\n             ? part0 < 128 ? 1 : 2\n             : part0 < 2097152 ? 3 : 4\n           : part1 < 16384\n             ? part1 < 128 ? 5 : 6\n             : part1 < 2097152 ? 7 : 8\n         : part2 < 128 ? 9 : 10;\n};\n","\"use strict\";\nvar util = exports;\n\n// used to return a Promise where callback is omitted\nutil.asPromise = require(\"@protobufjs/aspromise\");\n\n// converts to / from base64 encoded strings\nutil.base64 = require(\"@protobufjs/base64\");\n\n// base class of rpc.Service\nutil.EventEmitter = require(\"@protobufjs/eventemitter\");\n\n// float handling accross browsers\nutil.float = require(\"@protobufjs/float\");\n\n// requires modules optionally and hides the call from bundlers\nutil.inquire = require(\"@protobufjs/inquire\");\n\n// converts to / from utf8 encoded strings\nutil.utf8 = require(\"@protobufjs/utf8\");\n\n// provides a node-like buffer pool in the browser\nutil.pool = require(\"@protobufjs/pool\");\n\n// utility to work with the low and high bits of a 64 bit value\nutil.LongBits = require(\"./longbits\");\n\n/**\n * Whether running within node or not.\n * @memberof util\n * @type {boolean}\n */\nutil.isNode = Boolean(typeof global !== \"undefined\"\n                   && global\n                   && global.process\n                   && global.process.versions\n                   && global.process.versions.node);\n\n/**\n * Global object reference.\n * @memberof util\n * @type {Object}\n */\nutil.global = util.isNode && global\n           || typeof window !== \"undefined\" && window\n           || typeof self   !== \"undefined\" && self\n           || this; // eslint-disable-line no-invalid-this\n\n/**\n * An immuable empty array.\n * @memberof util\n * @type {Array.<*>}\n * @const\n */\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\n\n/**\n * An immutable empty object.\n * @type {Object}\n * @const\n */\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\n\n/**\n * Tests if the specified value is an integer.\n * @function\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is an integer\n */\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\n};\n\n/**\n * Tests if the specified value is a string.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a string\n */\nutil.isString = function isString(value) {\n    return typeof value === \"string\" || value instanceof String;\n};\n\n/**\n * Tests if the specified value is a non-null object.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a non-null object\n */\nutil.isObject = function isObject(value) {\n    return value && typeof value === \"object\";\n};\n\n/**\n * Checks if a property on a message is considered to be present.\n * This is an alias of {@link util.isSet}.\n * @function\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isset =\n\n/**\n * Checks if a property on a message is considered to be present.\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isSet = function isSet(obj, prop) {\n    var value = obj[prop];\n    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\n    return false;\n};\n\n/**\n * Any compatible Buffer instance.\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\n * @interface Buffer\n * @extends Uint8Array\n */\n\n/**\n * Node's Buffer class if available.\n * @type {Constructor<Buffer>}\n */\nutil.Buffer = (function() {\n    try {\n        var Buffer = util.inquire(\"buffer\").Buffer;\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\n    } catch (e) {\n        /* istanbul ignore next */\n        return null;\n    }\n})();\n\n// Internal alias of or polyfull for Buffer.from.\nutil._Buffer_from = null;\n\n// Internal alias of or polyfill for Buffer.allocUnsafe.\nutil._Buffer_allocUnsafe = null;\n\n/**\n * Creates a new buffer of whatever type supported by the environment.\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\n * @returns {Uint8Array|Buffer} Buffer\n */\nutil.newBuffer = function newBuffer(sizeOrArray) {\n    /* istanbul ignore next */\n    return typeof sizeOrArray === \"number\"\n        ? util.Buffer\n            ? util._Buffer_allocUnsafe(sizeOrArray)\n            : new util.Array(sizeOrArray)\n        : util.Buffer\n            ? util._Buffer_from(sizeOrArray)\n            : typeof Uint8Array === \"undefined\"\n                ? sizeOrArray\n                : new Uint8Array(sizeOrArray);\n};\n\n/**\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\n * @type {Constructor<Uint8Array>}\n */\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\n\n/**\n * Any compatible Long instance.\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\n * @interface Long\n * @property {number} low Low bits\n * @property {number} high High bits\n * @property {boolean} unsigned Whether unsigned or not\n */\n\n/**\n * Long.js's Long class if available.\n * @type {Constructor<Long>}\n */\nutil.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long\n         || /* istanbul ignore next */ util.global.Long\n         || util.inquire(\"long\");\n\n/**\n * Regular expression used to verify 2 bit (`bool`) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key2Re = /^true|false|0|1$/;\n\n/**\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\n\n/**\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\n\n/**\n * Converts a number or long to an 8 characters long hash string.\n * @param {Long|number} value Value to convert\n * @returns {string} Hash\n */\nutil.longToHash = function longToHash(value) {\n    return value\n        ? util.LongBits.from(value).toHash()\n        : util.LongBits.zeroHash;\n};\n\n/**\n * Converts an 8 characters long hash string to a long or number.\n * @param {string} hash Hash\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long|number} Original value\n */\nutil.longFromHash = function longFromHash(hash, unsigned) {\n    var bits = util.LongBits.fromHash(hash);\n    if (util.Long)\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\n    return bits.toNumber(Boolean(unsigned));\n};\n\n/**\n * Merges the properties of the source object into the destination object.\n * @memberof util\n * @param {Object.<string,*>} dst Destination object\n * @param {Object.<string,*>} src Source object\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\n * @returns {Object.<string,*>} Destination object\n */\nfunction merge(dst, src, ifNotSet) { // used by converters\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\n        if (dst[keys[i]] === undefined || !ifNotSet)\n            dst[keys[i]] = src[keys[i]];\n    return dst;\n}\n\nutil.merge = merge;\n\n/**\n * Converts the first character of a string to lower case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */\nutil.lcFirst = function lcFirst(str) {\n    return str.charAt(0).toLowerCase() + str.substring(1);\n};\n\n/**\n * Creates a custom error constructor.\n * @memberof util\n * @param {string} name Error name\n * @returns {Constructor<Error>} Custom error constructor\n */\nfunction newError(name) {\n\n    function CustomError(message, properties) {\n\n        if (!(this instanceof CustomError))\n            return new CustomError(message, properties);\n\n        // Error.call(this, message);\n        // ^ just returns a new error instance because the ctor can be called as a function\n\n        Object.defineProperty(this, \"message\", { get: function() { return message; } });\n\n        /* istanbul ignore next */\n        if (Error.captureStackTrace) // node\n            Error.captureStackTrace(this, CustomError);\n        else\n            Object.defineProperty(this, \"stack\", { value: new Error().stack || \"\" });\n\n        if (properties)\n            merge(this, properties);\n    }\n\n    CustomError.prototype = Object.create(Error.prototype, {\n        constructor: {\n            value: CustomError,\n            writable: true,\n            enumerable: false,\n            configurable: true,\n        },\n        name: {\n            get: function get() { return name; },\n            set: undefined,\n            enumerable: false,\n            // configurable: false would accurately preserve the behavior of\n            // the original, but I'm guessing that was not intentional.\n            // For an actual error subclass, this property would\n            // be configurable.\n            configurable: true,\n        },\n        toString: {\n            value: function value() { return this.name + \": \" + this.message; },\n            writable: true,\n            enumerable: false,\n            configurable: true,\n        },\n    });\n\n    return CustomError;\n}\n\nutil.newError = newError;\n\n/**\n * Constructs a new protocol error.\n * @classdesc Error subclass indicating a protocol specifc error.\n * @memberof util\n * @extends Error\n * @template T extends Message<T>\n * @constructor\n * @param {string} message Error message\n * @param {Object.<string,*>} [properties] Additional properties\n * @example\n * try {\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\n * } catch (e) {\n *     if (e instanceof ProtocolError && e.instance)\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\n * }\n */\nutil.ProtocolError = newError(\"ProtocolError\");\n\n/**\n * So far decoded message instance.\n * @name util.ProtocolError#instance\n * @type {Message<T>}\n */\n\n/**\n * A OneOf getter as returned by {@link util.oneOfGetter}.\n * @typedef OneOfGetter\n * @type {function}\n * @returns {string|undefined} Set field name, if any\n */\n\n/**\n * Builds a getter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfGetter} Unbound getter\n */\nutil.oneOfGetter = function getOneOf(fieldNames) {\n    var fieldMap = {};\n    for (var i = 0; i < fieldNames.length; ++i)\n        fieldMap[fieldNames[i]] = 1;\n\n    /**\n     * @returns {string|undefined} Set field name, if any\n     * @this Object\n     * @ignore\n     */\n    return function() { // eslint-disable-line consistent-return\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\n                return keys[i];\n    };\n};\n\n/**\n * A OneOf setter as returned by {@link util.oneOfSetter}.\n * @typedef OneOfSetter\n * @type {function}\n * @param {string|undefined} value Field name\n * @returns {undefined}\n */\n\n/**\n * Builds a setter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfSetter} Unbound setter\n */\nutil.oneOfSetter = function setOneOf(fieldNames) {\n\n    /**\n     * @param {string} name Field name\n     * @returns {undefined}\n     * @this Object\n     * @ignore\n     */\n    return function(name) {\n        for (var i = 0; i < fieldNames.length; ++i)\n            if (fieldNames[i] !== name)\n                delete this[fieldNames[i]];\n    };\n};\n\n/**\n * Default conversion options used for {@link Message#toJSON} implementations.\n *\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\n *\n * - Longs become strings\n * - Enums become string keys\n * - Bytes become base64 encoded strings\n * - (Sub-)Messages become plain objects\n * - Maps become plain objects with all string keys\n * - Repeated fields become arrays\n * - NaN and Infinity for float and double fields become strings\n *\n * @type {IConversionOptions}\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\n */\nutil.toJSONOptions = {\n    longs: String,\n    enums: String,\n    bytes: String,\n    json: true\n};\n\n// Sets up buffer utility according to the environment (called in index-minimal)\nutil._configure = function() {\n    var Buffer = util.Buffer;\n    /* istanbul ignore if */\n    if (!Buffer) {\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\n        return;\n    }\n    // because node 4.x buffers are incompatible & immutable\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\n        /* istanbul ignore next */\n        function Buffer_from(value, encoding) {\n            return new Buffer(value, encoding);\n        };\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\n        /* istanbul ignore next */\n        function Buffer_allocUnsafe(size) {\n            return new Buffer(size);\n        };\n};\n","\"use strict\";\nmodule.exports = Writer;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferWriter; // cyclic\n\nvar LongBits  = util.LongBits,\n    base64    = util.base64,\n    utf8      = util.utf8;\n\n/**\n * Constructs a new writer operation instance.\n * @classdesc Scheduled writer operation.\n * @constructor\n * @param {function(*, Uint8Array, number)} fn Function to call\n * @param {number} len Value byte length\n * @param {*} val Value to write\n * @ignore\n */\nfunction Op(fn, len, val) {\n\n    /**\n     * Function to call.\n     * @type {function(Uint8Array, number, *)}\n     */\n    this.fn = fn;\n\n    /**\n     * Value byte length.\n     * @type {number}\n     */\n    this.len = len;\n\n    /**\n     * Next operation.\n     * @type {Writer.Op|undefined}\n     */\n    this.next = undefined;\n\n    /**\n     * Value to write.\n     * @type {*}\n     */\n    this.val = val; // type varies\n}\n\n/* istanbul ignore next */\nfunction noop() {} // eslint-disable-line no-empty-function\n\n/**\n * Constructs a new writer state instance.\n * @classdesc Copied writer state.\n * @memberof Writer\n * @constructor\n * @param {Writer} writer Writer to copy state from\n * @ignore\n */\nfunction State(writer) {\n\n    /**\n     * Current head.\n     * @type {Writer.Op}\n     */\n    this.head = writer.head;\n\n    /**\n     * Current tail.\n     * @type {Writer.Op}\n     */\n    this.tail = writer.tail;\n\n    /**\n     * Current buffer length.\n     * @type {number}\n     */\n    this.len = writer.len;\n\n    /**\n     * Next state.\n     * @type {State|null}\n     */\n    this.next = writer.states;\n}\n\n/**\n * Constructs a new writer instance.\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n */\nfunction Writer() {\n\n    /**\n     * Current length.\n     * @type {number}\n     */\n    this.len = 0;\n\n    /**\n     * Operations head.\n     * @type {Object}\n     */\n    this.head = new Op(noop, 0, 0);\n\n    /**\n     * Operations tail\n     * @type {Object}\n     */\n    this.tail = this.head;\n\n    /**\n     * Linked forked states.\n     * @type {Object|null}\n     */\n    this.states = null;\n\n    // When a value is written, the writer calculates its byte length and puts it into a linked\n    // list of operations to perform when finish() is called. This both allows us to allocate\n    // buffers of the exact required size and reduces the amount of work we have to do compared\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\n    // part is just a linked list walk calling operations with already prepared values.\n}\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup() {\n            return (Writer.create = function create_buffer() {\n                return new BufferWriter();\n            })();\n        }\n        /* istanbul ignore next */\n        : function create_array() {\n            return new Writer();\n        };\n};\n\n/**\n * Creates a new writer.\n * @function\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\n */\nWriter.create = create();\n\n/**\n * Allocates a buffer of the specified size.\n * @param {number} size Buffer size\n * @returns {Uint8Array} Buffer\n */\nWriter.alloc = function alloc(size) {\n    return new util.Array(size);\n};\n\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\n/* istanbul ignore else */\nif (util.Array !== Array)\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\n\n/**\n * Pushes a new operation to the queue.\n * @param {function(Uint8Array, number, *)} fn Function to call\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @returns {Writer} `this`\n * @private\n */\nWriter.prototype._push = function push(fn, len, val) {\n    this.tail = this.tail.next = new Op(fn, len, val);\n    this.len += len;\n    return this;\n};\n\nfunction writeByte(val, buf, pos) {\n    buf[pos] = val & 255;\n}\n\nfunction writeVarint32(val, buf, pos) {\n    while (val > 127) {\n        buf[pos++] = val & 127 | 128;\n        val >>>= 7;\n    }\n    buf[pos] = val;\n}\n\n/**\n * Constructs a new varint writer operation instance.\n * @classdesc Scheduled varint writer operation.\n * @extends Op\n * @constructor\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @ignore\n */\nfunction VarintOp(len, val) {\n    this.len = len;\n    this.next = undefined;\n    this.val = val;\n}\n\nVarintOp.prototype = Object.create(Op.prototype);\nVarintOp.prototype.fn = writeVarint32;\n\n/**\n * Writes an unsigned 32 bit value as a varint.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.uint32 = function write_uint32(value) {\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\n    this.len += (this.tail = this.tail.next = new VarintOp(\n        (value = value >>> 0)\n                < 128       ? 1\n        : value < 16384     ? 2\n        : value < 2097152   ? 3\n        : value < 268435456 ? 4\n        :                     5,\n    value)).len;\n    return this;\n};\n\n/**\n * Writes a signed 32 bit value as a varint.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.int32 = function write_int32(value) {\n    return value < 0\n        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\n        : this.uint32(value);\n};\n\n/**\n * Writes a 32 bit value as a varint, zig-zag encoded.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sint32 = function write_sint32(value) {\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\n};\n\nfunction writeVarint64(val, buf, pos) {\n    while (val.hi) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\n        val.hi >>>= 7;\n    }\n    while (val.lo > 127) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = val.lo >>> 7;\n    }\n    buf[pos++] = val.lo;\n}\n\n/**\n * Writes an unsigned 64 bit value as a varint.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.uint64 = function write_uint64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a signed 64 bit value as a varint.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.int64 = Writer.prototype.uint64;\n\n/**\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sint64 = function write_sint64(value) {\n    var bits = LongBits.from(value).zzEncode();\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a boolish value as a varint.\n * @param {boolean} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bool = function write_bool(value) {\n    return this._push(writeByte, 1, value ? 1 : 0);\n};\n\nfunction writeFixed32(val, buf, pos) {\n    buf[pos    ] =  val         & 255;\n    buf[pos + 1] =  val >>> 8   & 255;\n    buf[pos + 2] =  val >>> 16  & 255;\n    buf[pos + 3] =  val >>> 24;\n}\n\n/**\n * Writes an unsigned 32 bit value as fixed 32 bits.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.fixed32 = function write_fixed32(value) {\n    return this._push(writeFixed32, 4, value >>> 0);\n};\n\n/**\n * Writes a signed 32 bit value as fixed 32 bits.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\n\n/**\n * Writes an unsigned 64 bit value as fixed 64 bits.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.fixed64 = function write_fixed64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\n};\n\n/**\n * Writes a signed 64 bit value as fixed 64 bits.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\n\n/**\n * Writes a float (32 bit).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.float = function write_float(value) {\n    return this._push(util.float.writeFloatLE, 4, value);\n};\n\n/**\n * Writes a double (64 bit float).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.double = function write_double(value) {\n    return this._push(util.float.writeDoubleLE, 8, value);\n};\n\nvar writeBytes = util.Array.prototype.set\n    ? function writeBytes_set(val, buf, pos) {\n        buf.set(val, pos); // also works for plain array values\n    }\n    /* istanbul ignore next */\n    : function writeBytes_for(val, buf, pos) {\n        for (var i = 0; i < val.length; ++i)\n            buf[pos + i] = val[i];\n    };\n\n/**\n * Writes a sequence of bytes.\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bytes = function write_bytes(value) {\n    var len = value.length >>> 0;\n    if (!len)\n        return this._push(writeByte, 1, 0);\n    if (util.isString(value)) {\n        var buf = Writer.alloc(len = base64.length(value));\n        base64.decode(value, buf, 0);\n        value = buf;\n    }\n    return this.uint32(len)._push(writeBytes, len, value);\n};\n\n/**\n * Writes a string.\n * @param {string} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.string = function write_string(value) {\n    var len = utf8.length(value);\n    return len\n        ? this.uint32(len)._push(utf8.write, len, value)\n        : this._push(writeByte, 1, 0);\n};\n\n/**\n * Forks this writer's state by pushing it to a stack.\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\n * @returns {Writer} `this`\n */\nWriter.prototype.fork = function fork() {\n    this.states = new State(this);\n    this.head = this.tail = new Op(noop, 0, 0);\n    this.len = 0;\n    return this;\n};\n\n/**\n * Resets this instance to the last state.\n * @returns {Writer} `this`\n */\nWriter.prototype.reset = function reset() {\n    if (this.states) {\n        this.head   = this.states.head;\n        this.tail   = this.states.tail;\n        this.len    = this.states.len;\n        this.states = this.states.next;\n    } else {\n        this.head = this.tail = new Op(noop, 0, 0);\n        this.len  = 0;\n    }\n    return this;\n};\n\n/**\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\n * @returns {Writer} `this`\n */\nWriter.prototype.ldelim = function ldelim() {\n    var head = this.head,\n        tail = this.tail,\n        len  = this.len;\n    this.reset().uint32(len);\n    if (len) {\n        this.tail.next = head.next; // skip noop\n        this.tail = tail;\n        this.len += len;\n    }\n    return this;\n};\n\n/**\n * Finishes the write operation.\n * @returns {Uint8Array} Finished buffer\n */\nWriter.prototype.finish = function finish() {\n    var head = this.head.next, // skip noop\n        buf  = this.constructor.alloc(this.len),\n        pos  = 0;\n    while (head) {\n        head.fn(head.val, buf, pos);\n        pos += head.len;\n        head = head.next;\n    }\n    // this.head = this.tail = null;\n    return buf;\n};\n\nWriter._configure = function(BufferWriter_) {\n    BufferWriter = BufferWriter_;\n    Writer.create = create();\n    BufferWriter._configure();\n};\n","\"use strict\";\nmodule.exports = BufferWriter;\n\n// extends Writer\nvar Writer = require(\"./writer\");\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer writer instance.\n * @classdesc Wire format writer using node buffers.\n * @extends Writer\n * @constructor\n */\nfunction BufferWriter() {\n    Writer.call(this);\n}\n\nBufferWriter._configure = function () {\n    /**\n     * Allocates a buffer of the specified size.\n     * @function\n     * @param {number} size Buffer size\n     * @returns {Buffer} Buffer\n     */\n    BufferWriter.alloc = util._Buffer_allocUnsafe;\n\n    BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === \"set\"\n        ? function writeBytesBuffer_set(val, buf, pos) {\n          buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\n          // also works for plain array values\n        }\n        /* istanbul ignore next */\n        : function writeBytesBuffer_copy(val, buf, pos) {\n          if (val.copy) // Buffer values\n            val.copy(buf, pos, 0, val.length);\n          else for (var i = 0; i < val.length;) // plain array values\n            buf[pos++] = val[i++];\n        };\n};\n\n\n/**\n * @override\n */\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\n    if (util.isString(value))\n        value = util._Buffer_from(value, \"base64\");\n    var len = value.length >>> 0;\n    this.uint32(len);\n    if (len)\n        this._push(BufferWriter.writeBytesBuffer, len, value);\n    return this;\n};\n\nfunction writeStringBuffer(val, buf, pos) {\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\n        util.utf8.write(val, buf, pos);\n    else if (buf.utf8Write)\n        buf.utf8Write(val, pos);\n    else\n        buf.write(val, pos);\n}\n\n/**\n * @override\n */\nBufferWriter.prototype.string = function write_string_buffer(value) {\n    var len = util.Buffer.byteLength(value);\n    this.uint32(len);\n    if (len)\n        this._push(writeStringBuffer, len, value);\n    return this;\n};\n\n\n/**\n * Finishes the write operation.\n * @name BufferWriter#finish\n * @function\n * @returns {Buffer} Finished buffer\n */\n\nBufferWriter._configure();\n","module.exports = __WEBPACK_EXTERNAL_MODULE__1670__;","// GENERATED FILE. DO NOT EDIT.\nvar Long = (function(exports) {\n  \"use strict\";\n  \n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  \n  /**\n   * @license\n   * Copyright 2009 The Closure Library Authors\n   * Copyright 2020 Daniel Wirtz / The long.js Authors.\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   *\n   * SPDX-License-Identifier: Apache-2.0\n   */\n  // WebAssembly optimizations to do native i64 multiplication and divide\n  var wasm = null;\n  \n  try {\n    wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11])), {}).exports;\n  } catch (e) {// no wasm support :(\n  }\n  /**\n   * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\n   *  See the from* functions below for more convenient ways of constructing Longs.\n   * @exports Long\n   * @class A Long class for representing a 64 bit two's-complement integer value.\n   * @param {number} low The low (signed) 32 bits of the long\n   * @param {number} high The high (signed) 32 bits of the long\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @constructor\n   */\n  \n  \n  function Long(low, high, unsigned) {\n    /**\n     * The low 32 bits as a signed value.\n     * @type {number}\n     */\n    this.low = low | 0;\n    /**\n     * The high 32 bits as a signed value.\n     * @type {number}\n     */\n  \n    this.high = high | 0;\n    /**\n     * Whether unsigned or not.\n     * @type {boolean}\n     */\n  \n    this.unsigned = !!unsigned;\n  } // The internal representation of a long is the two given signed, 32-bit values.\n  // We use 32-bit pieces because these are the size of integers on which\n  // Javascript performs bit-operations.  For operations like addition and\n  // multiplication, we split each number into 16 bit pieces, which can easily be\n  // multiplied within Javascript's floating-point representation without overflow\n  // or change in sign.\n  //\n  // In the algorithms below, we frequently reduce the negative case to the\n  // positive case by negating the input(s) and then post-processing the result.\n  // Note that we must ALWAYS check specially whether those values are MIN_VALUE\n  // (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n  // a positive number, it overflows back into a negative).  Not handling this\n  // case would often result in infinite recursion.\n  //\n  // Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\n  // methods on which they depend.\n  \n  /**\n   * An indicator used to reliably determine if an object is a Long or not.\n   * @type {boolean}\n   * @const\n   * @private\n   */\n  \n  \n  Long.prototype.__isLong__;\n  Object.defineProperty(Long.prototype, \"__isLong__\", {\n    value: true\n  });\n  /**\n   * @function\n   * @param {*} obj Object\n   * @returns {boolean}\n   * @inner\n   */\n  \n  function isLong(obj) {\n    return (obj && obj[\"__isLong__\"]) === true;\n  }\n  /**\n   * @function\n   * @param {*} value number\n   * @returns {number}\n   * @inner\n   */\n  \n  \n  function ctz32(value) {\n    var c = Math.clz32(value & -value);\n    return value ? 31 - c : c;\n  }\n  /**\n   * Tests if the specified object is a Long.\n   * @function\n   * @param {*} obj Object\n   * @returns {boolean}\n   */\n  \n  \n  Long.isLong = isLong;\n  /**\n   * A cache of the Long representations of small integer values.\n   * @type {!Object}\n   * @inner\n   */\n  \n  var INT_CACHE = {};\n  /**\n   * A cache of the Long representations of small unsigned integer values.\n   * @type {!Object}\n   * @inner\n   */\n  \n  var UINT_CACHE = {};\n  /**\n   * @param {number} value\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromInt(value, unsigned) {\n    var obj, cachedObj, cache;\n  \n    if (unsigned) {\n      value >>>= 0;\n  \n      if (cache = 0 <= value && value < 256) {\n        cachedObj = UINT_CACHE[value];\n        if (cachedObj) return cachedObj;\n      }\n  \n      obj = fromBits(value, 0, true);\n      if (cache) UINT_CACHE[value] = obj;\n      return obj;\n    } else {\n      value |= 0;\n  \n      if (cache = -128 <= value && value < 128) {\n        cachedObj = INT_CACHE[value];\n        if (cachedObj) return cachedObj;\n      }\n  \n      obj = fromBits(value, value < 0 ? -1 : 0, false);\n      if (cache) INT_CACHE[value] = obj;\n      return obj;\n    }\n  }\n  /**\n   * Returns a Long representing the given 32 bit integer value.\n   * @function\n   * @param {number} value The 32 bit integer in question\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromInt = fromInt;\n  /**\n   * @param {number} value\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromNumber(value, unsigned) {\n    if (isNaN(value)) return unsigned ? UZERO : ZERO;\n  \n    if (unsigned) {\n      if (value < 0) return UZERO;\n      if (value >= TWO_PWR_64_DBL) return MAX_UNSIGNED_VALUE;\n    } else {\n      if (value <= -TWO_PWR_63_DBL) return MIN_VALUE;\n      if (value + 1 >= TWO_PWR_63_DBL) return MAX_VALUE;\n    }\n  \n    if (value < 0) return fromNumber(-value, unsigned).neg();\n    return fromBits(value % TWO_PWR_32_DBL | 0, value / TWO_PWR_32_DBL | 0, unsigned);\n  }\n  /**\n   * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n   * @function\n   * @param {number} value The number in question\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromNumber = fromNumber;\n  /**\n   * @param {number} lowBits\n   * @param {number} highBits\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromBits(lowBits, highBits, unsigned) {\n    return new Long(lowBits, highBits, unsigned);\n  }\n  /**\n   * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\n   *  assumed to use 32 bits.\n   * @function\n   * @param {number} lowBits The low 32 bits\n   * @param {number} highBits The high 32 bits\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBits = fromBits;\n  /**\n   * @function\n   * @param {number} base\n   * @param {number} exponent\n   * @returns {number}\n   * @inner\n   */\n  \n  var pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\n  \n  /**\n   * @param {string} str\n   * @param {(boolean|number)=} unsigned\n   * @param {number=} radix\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromString(str, unsigned, radix) {\n    if (str.length === 0) throw Error('empty string');\n  \n    if (typeof unsigned === 'number') {\n      // For goog.math.long compatibility\n      radix = unsigned;\n      unsigned = false;\n    } else {\n      unsigned = !!unsigned;\n    }\n  \n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\") return unsigned ? UZERO : ZERO;\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix) throw RangeError('radix');\n    var p;\n    if ((p = str.indexOf('-')) > 0) throw Error('interior hyphen');else if (p === 0) {\n      return fromString(str.substring(1), unsigned, radix).neg();\n    } // Do several (8) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n  \n    var radixToPower = fromNumber(pow_dbl(radix, 8));\n    var result = ZERO;\n  \n    for (var i = 0; i < str.length; i += 8) {\n      var size = Math.min(8, str.length - i),\n          value = parseInt(str.substring(i, i + size), radix);\n  \n      if (size < 8) {\n        var power = fromNumber(pow_dbl(radix, size));\n        result = result.mul(power).add(fromNumber(value));\n      } else {\n        result = result.mul(radixToPower);\n        result = result.add(fromNumber(value));\n      }\n    }\n  \n    result.unsigned = unsigned;\n    return result;\n  }\n  /**\n   * Returns a Long representation of the given string, written using the specified radix.\n   * @function\n   * @param {string} str The textual representation of the Long\n   * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\n   * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromString = fromString;\n  /**\n   * @function\n   * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromValue(val, unsigned) {\n    if (typeof val === 'number') return fromNumber(val, unsigned);\n    if (typeof val === 'string') return fromString(val, unsigned); // Throws for non-objects, converts non-instanceof Long:\n  \n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\n  }\n  /**\n   * Converts the specified value to a Long using the appropriate from* function for its type.\n   * @function\n   * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long}\n   */\n  \n  \n  Long.fromValue = fromValue; // NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\n  // no runtime penalty for these.\n  \n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_16_DBL = 1 << 16;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_24_DBL = 1 << 24;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\n  /**\n   * @type {!Long}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var ZERO = fromInt(0);\n  /**\n   * Signed zero.\n   * @type {!Long}\n   */\n  \n  Long.ZERO = ZERO;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var UZERO = fromInt(0, true);\n  /**\n   * Unsigned zero.\n   * @type {!Long}\n   */\n  \n  Long.UZERO = UZERO;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var ONE = fromInt(1);\n  /**\n   * Signed one.\n   * @type {!Long}\n   */\n  \n  Long.ONE = ONE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var UONE = fromInt(1, true);\n  /**\n   * Unsigned one.\n   * @type {!Long}\n   */\n  \n  Long.UONE = UONE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var NEG_ONE = fromInt(-1);\n  /**\n   * Signed negative one.\n   * @type {!Long}\n   */\n  \n  Long.NEG_ONE = NEG_ONE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var MAX_VALUE = fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0, false);\n  /**\n   * Maximum signed value.\n   * @type {!Long}\n   */\n  \n  Long.MAX_VALUE = MAX_VALUE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF | 0, 0xFFFFFFFF | 0, true);\n  /**\n   * Maximum unsigned value.\n   * @type {!Long}\n   */\n  \n  Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var MIN_VALUE = fromBits(0, 0x80000000 | 0, false);\n  /**\n   * Minimum signed value.\n   * @type {!Long}\n   */\n  \n  Long.MIN_VALUE = MIN_VALUE;\n  /**\n   * @alias Long.prototype\n   * @inner\n   */\n  \n  var LongPrototype = Long.prototype;\n  /**\n   * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\n   * @this {!Long}\n   * @returns {number}\n   */\n  \n  LongPrototype.toInt = function toInt() {\n    return this.unsigned ? this.low >>> 0 : this.low;\n  };\n  /**\n   * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\n   * @this {!Long}\n   * @returns {number}\n   */\n  \n  \n  LongPrototype.toNumber = function toNumber() {\n    if (this.unsigned) return (this.high >>> 0) * TWO_PWR_32_DBL + (this.low >>> 0);\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\n  };\n  /**\n   * Converts the Long to a string written in the specified radix.\n   * @this {!Long}\n   * @param {number=} radix Radix (2-36), defaults to 10\n   * @returns {string}\n   * @override\n   * @throws {RangeError} If `radix` is out of range\n   */\n  \n  \n  LongPrototype.toString = function toString(radix) {\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix) throw RangeError('radix');\n    if (this.isZero()) return '0';\n  \n    if (this.isNegative()) {\n      // Unsigned Longs are never negative\n      if (this.eq(MIN_VALUE)) {\n        // We need to change the Long value before it can be negated, so we remove\n        // the bottom-most digit in this base and then recurse to do the rest.\n        var radixLong = fromNumber(radix),\n            div = this.div(radixLong),\n            rem1 = div.mul(radixLong).sub(this);\n        return div.toString(radix) + rem1.toInt().toString(radix);\n      } else return '-' + this.neg().toString(radix);\n    } // Do several (6) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n  \n  \n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\n        rem = this;\n    var result = '';\n  \n    while (true) {\n      var remDiv = rem.div(radixToPower),\n          intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\n          digits = intval.toString(radix);\n      rem = remDiv;\n      if (rem.isZero()) return digits + result;else {\n        while (digits.length < 6) digits = '0' + digits;\n  \n        result = '' + digits + result;\n      }\n    }\n  };\n  /**\n   * Gets the high 32 bits as a signed integer.\n   * @this {!Long}\n   * @returns {number} Signed high bits\n   */\n  \n  \n  LongPrototype.getHighBits = function getHighBits() {\n    return this.high;\n  };\n  /**\n   * Gets the high 32 bits as an unsigned integer.\n   * @this {!Long}\n   * @returns {number} Unsigned high bits\n   */\n  \n  \n  LongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\n    return this.high >>> 0;\n  };\n  /**\n   * Gets the low 32 bits as a signed integer.\n   * @this {!Long}\n   * @returns {number} Signed low bits\n   */\n  \n  \n  LongPrototype.getLowBits = function getLowBits() {\n    return this.low;\n  };\n  /**\n   * Gets the low 32 bits as an unsigned integer.\n   * @this {!Long}\n   * @returns {number} Unsigned low bits\n   */\n  \n  \n  LongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\n    return this.low >>> 0;\n  };\n  /**\n   * Gets the number of bits needed to represent the absolute value of this Long.\n   * @this {!Long}\n   * @returns {number}\n   */\n  \n  \n  LongPrototype.getNumBitsAbs = function getNumBitsAbs() {\n    if (this.isNegative()) // Unsigned Longs are never negative\n      return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\n    var val = this.high != 0 ? this.high : this.low;\n  \n    for (var bit = 31; bit > 0; bit--) if ((val & 1 << bit) != 0) break;\n  \n    return this.high != 0 ? bit + 33 : bit + 1;\n  };\n  /**\n   * Tests if this Long's value equals zero.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isZero = function isZero() {\n    return this.high === 0 && this.low === 0;\n  };\n  /**\n   * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.eqz = LongPrototype.isZero;\n  /**\n   * Tests if this Long's value is negative.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  LongPrototype.isNegative = function isNegative() {\n    return !this.unsigned && this.high < 0;\n  };\n  /**\n   * Tests if this Long's value is positive or zero.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isPositive = function isPositive() {\n    return this.unsigned || this.high >= 0;\n  };\n  /**\n   * Tests if this Long's value is odd.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isOdd = function isOdd() {\n    return (this.low & 1) === 1;\n  };\n  /**\n   * Tests if this Long's value is even.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isEven = function isEven() {\n    return (this.low & 1) === 0;\n  };\n  /**\n   * Tests if this Long's value equals the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.equals = function equals(other) {\n    if (!isLong(other)) other = fromValue(other);\n    if (this.unsigned !== other.unsigned && this.high >>> 31 === 1 && other.high >>> 31 === 1) return false;\n    return this.high === other.high && this.low === other.low;\n  };\n  /**\n   * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.eq = LongPrototype.equals;\n  /**\n   * Tests if this Long's value differs from the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.notEquals = function notEquals(other) {\n    return !this.eq(\n    /* validates */\n    other);\n  };\n  /**\n   * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.neq = LongPrototype.notEquals;\n  /**\n   * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.ne = LongPrototype.notEquals;\n  /**\n   * Tests if this Long's value is less than the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.lessThan = function lessThan(other) {\n    return this.comp(\n    /* validates */\n    other) < 0;\n  };\n  /**\n   * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.lt = LongPrototype.lessThan;\n  /**\n   * Tests if this Long's value is less than or equal the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\n    return this.comp(\n    /* validates */\n    other) <= 0;\n  };\n  /**\n   * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.lte = LongPrototype.lessThanOrEqual;\n  /**\n   * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.le = LongPrototype.lessThanOrEqual;\n  /**\n   * Tests if this Long's value is greater than the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.greaterThan = function greaterThan(other) {\n    return this.comp(\n    /* validates */\n    other) > 0;\n  };\n  /**\n   * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.gt = LongPrototype.greaterThan;\n  /**\n   * Tests if this Long's value is greater than or equal the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\n    return this.comp(\n    /* validates */\n    other) >= 0;\n  };\n  /**\n   * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.gte = LongPrototype.greaterThanOrEqual;\n  /**\n   * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.ge = LongPrototype.greaterThanOrEqual;\n  /**\n   * Compares this Long's value with the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n   *  if the given one is greater\n   */\n  \n  LongPrototype.compare = function compare(other) {\n    if (!isLong(other)) other = fromValue(other);\n    if (this.eq(other)) return 0;\n    var thisNeg = this.isNegative(),\n        otherNeg = other.isNegative();\n    if (thisNeg && !otherNeg) return -1;\n    if (!thisNeg && otherNeg) return 1; // At this point the sign bits are the same\n  \n    if (!this.unsigned) return this.sub(other).isNegative() ? -1 : 1; // Both are positive if at least one is unsigned\n  \n    return other.high >>> 0 > this.high >>> 0 || other.high === this.high && other.low >>> 0 > this.low >>> 0 ? -1 : 1;\n  };\n  /**\n   * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n   *  if the given one is greater\n   */\n  \n  \n  LongPrototype.comp = LongPrototype.compare;\n  /**\n   * Negates this Long's value.\n   * @this {!Long}\n   * @returns {!Long} Negated Long\n   */\n  \n  LongPrototype.negate = function negate() {\n    if (!this.unsigned && this.eq(MIN_VALUE)) return MIN_VALUE;\n    return this.not().add(ONE);\n  };\n  /**\n   * Negates this Long's value. This is an alias of {@link Long#negate}.\n   * @function\n   * @returns {!Long} Negated Long\n   */\n  \n  \n  LongPrototype.neg = LongPrototype.negate;\n  /**\n   * Returns the sum of this and the specified Long.\n   * @this {!Long}\n   * @param {!Long|number|string} addend Addend\n   * @returns {!Long} Sum\n   */\n  \n  LongPrototype.add = function add(addend) {\n    if (!isLong(addend)) addend = fromValue(addend); // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n  \n    var a48 = this.high >>> 16;\n    var a32 = this.high & 0xFFFF;\n    var a16 = this.low >>> 16;\n    var a00 = this.low & 0xFFFF;\n    var b48 = addend.high >>> 16;\n    var b32 = addend.high & 0xFFFF;\n    var b16 = addend.low >>> 16;\n    var b00 = addend.low & 0xFFFF;\n    var c48 = 0,\n        c32 = 0,\n        c16 = 0,\n        c00 = 0;\n    c00 += a00 + b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 + b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 + b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 + b48;\n    c48 &= 0xFFFF;\n    return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);\n  };\n  /**\n   * Returns the difference of this and the specified Long.\n   * @this {!Long}\n   * @param {!Long|number|string} subtrahend Subtrahend\n   * @returns {!Long} Difference\n   */\n  \n  \n  LongPrototype.subtract = function subtract(subtrahend) {\n    if (!isLong(subtrahend)) subtrahend = fromValue(subtrahend);\n    return this.add(subtrahend.neg());\n  };\n  /**\n   * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\n   * @function\n   * @param {!Long|number|string} subtrahend Subtrahend\n   * @returns {!Long} Difference\n   */\n  \n  \n  LongPrototype.sub = LongPrototype.subtract;\n  /**\n   * Returns the product of this and the specified Long.\n   * @this {!Long}\n   * @param {!Long|number|string} multiplier Multiplier\n   * @returns {!Long} Product\n   */\n  \n  LongPrototype.multiply = function multiply(multiplier) {\n    if (this.isZero()) return this;\n    if (!isLong(multiplier)) multiplier = fromValue(multiplier); // use wasm support if present\n  \n    if (wasm) {\n      var low = wasm[\"mul\"](this.low, this.high, multiplier.low, multiplier.high);\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n    }\n  \n    if (multiplier.isZero()) return this.unsigned ? UZERO : ZERO;\n    if (this.eq(MIN_VALUE)) return multiplier.isOdd() ? MIN_VALUE : ZERO;\n    if (multiplier.eq(MIN_VALUE)) return this.isOdd() ? MIN_VALUE : ZERO;\n  \n    if (this.isNegative()) {\n      if (multiplier.isNegative()) return this.neg().mul(multiplier.neg());else return this.neg().mul(multiplier).neg();\n    } else if (multiplier.isNegative()) return this.mul(multiplier.neg()).neg(); // If both longs are small, use float multiplication\n  \n  \n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24)) return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned); // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n    // We can skip products that would overflow.\n  \n    var a48 = this.high >>> 16;\n    var a32 = this.high & 0xFFFF;\n    var a16 = this.low >>> 16;\n    var a00 = this.low & 0xFFFF;\n    var b48 = multiplier.high >>> 16;\n    var b32 = multiplier.high & 0xFFFF;\n    var b16 = multiplier.low >>> 16;\n    var b00 = multiplier.low & 0xFFFF;\n    var c48 = 0,\n        c32 = 0,\n        c16 = 0,\n        c00 = 0;\n    c00 += a00 * b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 * b00;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c16 += a00 * b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 * b00;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a16 * b16;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a00 * b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n    c48 &= 0xFFFF;\n    return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);\n  };\n  /**\n   * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\n   * @function\n   * @param {!Long|number|string} multiplier Multiplier\n   * @returns {!Long} Product\n   */\n  \n  \n  LongPrototype.mul = LongPrototype.multiply;\n  /**\n   * Returns this Long divided by the specified. The result is signed if this Long is signed or\n   *  unsigned if this Long is unsigned.\n   * @this {!Long}\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Quotient\n   */\n  \n  LongPrototype.divide = function divide(divisor) {\n    if (!isLong(divisor)) divisor = fromValue(divisor);\n    if (divisor.isZero()) throw Error('division by zero'); // use wasm support if present\n  \n    if (wasm) {\n      // guard against signed division overflow: the largest\n      // negative number / -1 would be 1 larger than the largest\n      // positive number, due to two's complement.\n      if (!this.unsigned && this.high === -0x80000000 && divisor.low === -1 && divisor.high === -1) {\n        // be consistent with non-wasm code path\n        return this;\n      }\n  \n      var low = (this.unsigned ? wasm[\"div_u\"] : wasm[\"div_s\"])(this.low, this.high, divisor.low, divisor.high);\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n    }\n  \n    if (this.isZero()) return this.unsigned ? UZERO : ZERO;\n    var approx, rem, res;\n  \n    if (!this.unsigned) {\n      // This section is only relevant for signed longs and is derived from the\n      // closure library as a whole.\n      if (this.eq(MIN_VALUE)) {\n        if (divisor.eq(ONE) || divisor.eq(NEG_ONE)) return MIN_VALUE; // recall that -MIN_VALUE == MIN_VALUE\n        else if (divisor.eq(MIN_VALUE)) return ONE;else {\n          // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n          var halfThis = this.shr(1);\n          approx = halfThis.div(divisor).shl(1);\n  \n          if (approx.eq(ZERO)) {\n            return divisor.isNegative() ? ONE : NEG_ONE;\n          } else {\n            rem = this.sub(divisor.mul(approx));\n            res = approx.add(rem.div(divisor));\n            return res;\n          }\n        }\n      } else if (divisor.eq(MIN_VALUE)) return this.unsigned ? UZERO : ZERO;\n  \n      if (this.isNegative()) {\n        if (divisor.isNegative()) return this.neg().div(divisor.neg());\n        return this.neg().div(divisor).neg();\n      } else if (divisor.isNegative()) return this.div(divisor.neg()).neg();\n  \n      res = ZERO;\n    } else {\n      // The algorithm below has not been made for unsigned longs. It's therefore\n      // required to take special care of the MSB prior to running it.\n      if (!divisor.unsigned) divisor = divisor.toUnsigned();\n      if (divisor.gt(this)) return UZERO;\n      if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\n        return UONE;\n      res = UZERO;\n    } // Repeat the following until the remainder is less than other:  find a\n    // floating-point that approximates remainder / other *from below*, add this\n    // into the result, and subtract it from the remainder.  It is critical that\n    // the approximate value is less than or equal to the real value so that the\n    // remainder never becomes negative.\n  \n  \n    rem = this;\n  \n    while (rem.gte(divisor)) {\n      // Approximate the result of division. This may be a little greater or\n      // smaller than the actual value.\n      approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber())); // We will tweak the approximate result by changing it in the 48-th digit or\n      // the smallest non-fractional digit, whichever is larger.\n  \n      var log2 = Math.ceil(Math.log(approx) / Math.LN2),\n          delta = log2 <= 48 ? 1 : pow_dbl(2, log2 - 48),\n          // Decrease the approximation until it is smaller than the remainder.  Note\n      // that if it is too large, the product overflows and is negative.\n      approxRes = fromNumber(approx),\n          approxRem = approxRes.mul(divisor);\n  \n      while (approxRem.isNegative() || approxRem.gt(rem)) {\n        approx -= delta;\n        approxRes = fromNumber(approx, this.unsigned);\n        approxRem = approxRes.mul(divisor);\n      } // We know the answer can't be zero... and actually, zero would cause\n      // infinite recursion since we would make no progress.\n  \n  \n      if (approxRes.isZero()) approxRes = ONE;\n      res = res.add(approxRes);\n      rem = rem.sub(approxRem);\n    }\n  \n    return res;\n  };\n  /**\n   * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\n   * @function\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Quotient\n   */\n  \n  \n  LongPrototype.div = LongPrototype.divide;\n  /**\n   * Returns this Long modulo the specified.\n   * @this {!Long}\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Remainder\n   */\n  \n  LongPrototype.modulo = function modulo(divisor) {\n    if (!isLong(divisor)) divisor = fromValue(divisor); // use wasm support if present\n  \n    if (wasm) {\n      var low = (this.unsigned ? wasm[\"rem_u\"] : wasm[\"rem_s\"])(this.low, this.high, divisor.low, divisor.high);\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n    }\n  \n    return this.sub(this.div(divisor).mul(divisor));\n  };\n  /**\n   * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n   * @function\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Remainder\n   */\n  \n  \n  LongPrototype.mod = LongPrototype.modulo;\n  /**\n   * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n   * @function\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Remainder\n   */\n  \n  LongPrototype.rem = LongPrototype.modulo;\n  /**\n   * Returns the bitwise NOT of this Long.\n   * @this {!Long}\n   * @returns {!Long}\n   */\n  \n  LongPrototype.not = function not() {\n    return fromBits(~this.low, ~this.high, this.unsigned);\n  };\n  /**\n   * Returns count leading zeros of this Long.\n   * @this {!Long}\n   * @returns {!number}\n   */\n  \n  \n  LongPrototype.countLeadingZeros = function countLeadingZeros() {\n    return this.high ? Math.clz32(this.high) : Math.clz32(this.low) + 32;\n  };\n  /**\n   * Returns count leading zeros. This is an alias of {@link Long#countLeadingZeros}.\n   * @function\n   * @param {!Long}\n   * @returns {!number}\n   */\n  \n  \n  LongPrototype.clz = LongPrototype.countLeadingZeros;\n  /**\n   * Returns count trailing zeros of this Long.\n   * @this {!Long}\n   * @returns {!number}\n   */\n  \n  LongPrototype.countTrailingZeros = function countTrailingZeros() {\n    return this.low ? ctz32(this.low) : ctz32(this.high) + 32;\n  };\n  /**\n   * Returns count trailing zeros. This is an alias of {@link Long#countTrailingZeros}.\n   * @function\n   * @param {!Long}\n   * @returns {!number}\n   */\n  \n  \n  LongPrototype.ctz = LongPrototype.countTrailingZeros;\n  /**\n   * Returns the bitwise AND of this Long and the specified.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other Long\n   * @returns {!Long}\n   */\n  \n  LongPrototype.and = function and(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\n  };\n  /**\n   * Returns the bitwise OR of this Long and the specified.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other Long\n   * @returns {!Long}\n   */\n  \n  \n  LongPrototype.or = function or(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\n  };\n  /**\n   * Returns the bitwise XOR of this Long and the given one.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other Long\n   * @returns {!Long}\n   */\n  \n  \n  LongPrototype.xor = function xor(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits shifted to the left by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shiftLeft = function shiftLeft(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;else if (numBits < 32) return fromBits(this.low << numBits, this.high << numBits | this.low >>> 32 - numBits, this.unsigned);else return fromBits(0, this.low << numBits - 32, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shl = LongPrototype.shiftLeft;\n  /**\n   * Returns this Long with bits arithmetically shifted to the right by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  LongPrototype.shiftRight = function shiftRight(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;else if (numBits < 32) return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >> numBits, this.unsigned);else return fromBits(this.high >> numBits - 32, this.high >= 0 ? 0 : -1, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shr = LongPrototype.shiftRight;\n  /**\n   * Returns this Long with bits logically shifted to the right by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  LongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;\n    if (numBits < 32) return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >>> numBits, this.unsigned);\n    if (numBits === 32) return fromBits(this.high, 0, this.unsigned);\n    return fromBits(this.high >>> numBits - 32, 0, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shru = LongPrototype.shiftRightUnsigned;\n  /**\n   * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  LongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\n  /**\n   * Returns this Long with bits rotated to the left by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  LongPrototype.rotateLeft = function rotateLeft(numBits) {\n    var b;\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;\n    if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\n  \n    if (numBits < 32) {\n      b = 32 - numBits;\n      return fromBits(this.low << numBits | this.high >>> b, this.high << numBits | this.low >>> b, this.unsigned);\n    }\n  \n    numBits -= 32;\n    b = 32 - numBits;\n    return fromBits(this.high << numBits | this.low >>> b, this.low << numBits | this.high >>> b, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits rotated to the left by the given amount. This is an alias of {@link Long#rotateLeft}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  \n  LongPrototype.rotl = LongPrototype.rotateLeft;\n  /**\n   * Returns this Long with bits rotated to the right by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  LongPrototype.rotateRight = function rotateRight(numBits) {\n    var b;\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;\n    if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\n  \n    if (numBits < 32) {\n      b = 32 - numBits;\n      return fromBits(this.high << b | this.low >>> numBits, this.low << b | this.high >>> numBits, this.unsigned);\n    }\n  \n    numBits -= 32;\n    b = 32 - numBits;\n    return fromBits(this.low << b | this.high >>> numBits, this.high << b | this.low >>> numBits, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits rotated to the right by the given amount. This is an alias of {@link Long#rotateRight}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  \n  LongPrototype.rotr = LongPrototype.rotateRight;\n  /**\n   * Converts this Long to signed.\n   * @this {!Long}\n   * @returns {!Long} Signed long\n   */\n  \n  LongPrototype.toSigned = function toSigned() {\n    if (!this.unsigned) return this;\n    return fromBits(this.low, this.high, false);\n  };\n  /**\n   * Converts this Long to unsigned.\n   * @this {!Long}\n   * @returns {!Long} Unsigned long\n   */\n  \n  \n  LongPrototype.toUnsigned = function toUnsigned() {\n    if (this.unsigned) return this;\n    return fromBits(this.low, this.high, true);\n  };\n  /**\n   * Converts this Long to its byte representation.\n   * @param {boolean=} le Whether little or big endian, defaults to big endian\n   * @this {!Long}\n   * @returns {!Array.<number>} Byte representation\n   */\n  \n  \n  LongPrototype.toBytes = function toBytes(le) {\n    return le ? this.toBytesLE() : this.toBytesBE();\n  };\n  /**\n   * Converts this Long to its little endian byte representation.\n   * @this {!Long}\n   * @returns {!Array.<number>} Little endian byte representation\n   */\n  \n  \n  LongPrototype.toBytesLE = function toBytesLE() {\n    var hi = this.high,\n        lo = this.low;\n    return [lo & 0xff, lo >>> 8 & 0xff, lo >>> 16 & 0xff, lo >>> 24, hi & 0xff, hi >>> 8 & 0xff, hi >>> 16 & 0xff, hi >>> 24];\n  };\n  /**\n   * Converts this Long to its big endian byte representation.\n   * @this {!Long}\n   * @returns {!Array.<number>} Big endian byte representation\n   */\n  \n  \n  LongPrototype.toBytesBE = function toBytesBE() {\n    var hi = this.high,\n        lo = this.low;\n    return [hi >>> 24, hi >>> 16 & 0xff, hi >>> 8 & 0xff, hi & 0xff, lo >>> 24, lo >>> 16 & 0xff, lo >>> 8 & 0xff, lo & 0xff];\n  };\n  /**\n   * Creates a Long from its byte representation.\n   * @param {!Array.<number>} bytes Byte representation\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @param {boolean=} le Whether little or big endian, defaults to big endian\n   * @returns {Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBytes = function fromBytes(bytes, unsigned, le) {\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\n  };\n  /**\n   * Creates a Long from its little endian byte representation.\n   * @param {!Array.<number>} bytes Little endian byte representation\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBytesLE = function fromBytesLE(bytes, unsigned) {\n    return new Long(bytes[0] | bytes[1] << 8 | bytes[2] << 16 | bytes[3] << 24, bytes[4] | bytes[5] << 8 | bytes[6] << 16 | bytes[7] << 24, unsigned);\n  };\n  /**\n   * Creates a Long from its big endian byte representation.\n   * @param {!Array.<number>} bytes Big endian byte representation\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBytesBE = function fromBytesBE(bytes, unsigned) {\n    return new Long(bytes[4] << 24 | bytes[5] << 16 | bytes[6] << 8 | bytes[7], bytes[0] << 24 | bytes[1] << 16 | bytes[2] << 8 | bytes[3], unsigned);\n  };\n  \n  var _default = Long;\n  exports.default = _default;\n  return \"default\" in exports ? exports.default : exports;\n})({});\nif (typeof define === 'function' && define.amd) define([], function() { return Long; });\nelse if (typeof module === 'object' && typeof exports === 'object') module.exports = Long;\n","/// @file\n/// @addtogroup flatbuffers_javascript_api\n/// @{\n/// @cond FLATBUFFERS_INTERNAL\n\n/**\n * @fileoverview\n *\n * Need to suppress 'global this' error so the Node.js export line doesn't cause\n * closure compile to error out.\n * @suppress {globalThis}\n */\n\n/**\n * @const\n * @namespace\n */\nvar flatbuffers = {};\n\n/**\n * @typedef {number}\n */\nflatbuffers.Offset;\n\n/**\n * @typedef {{\n *   bb: flatbuffers.ByteBuffer,\n *   bb_pos: number\n * }}\n */\nflatbuffers.Table;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_SHORT = 2;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_INT = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.FILE_IDENTIFIER_LENGTH = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZE_PREFIX_LENGTH = 4;\n\n/**\n * @enum {number}\n */\nflatbuffers.Encoding = {\n  UTF8_BYTES: 1,\n  UTF16_STRING: 2\n};\n\n/**\n * @type {Int32Array}\n * @const\n */\nflatbuffers.int32 = new Int32Array(2);\n\n/**\n * @type {Float32Array}\n * @const\n */\nflatbuffers.float32 = new Float32Array(flatbuffers.int32.buffer);\n\n/**\n * @type {Float64Array}\n * @const\n */\nflatbuffers.float64 = new Float64Array(flatbuffers.int32.buffer);\n\n/**\n * @type {boolean}\n * @const\n */\nflatbuffers.isLittleEndian = new Uint16Array(new Uint8Array([1, 0]).buffer)[0] === 1;\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @constructor\n * @param {number} low\n * @param {number} high\n */\nflatbuffers.Long = function(low, high) {\n  /**\n   * @type {number}\n   * @const\n   */\n  this.low = low | 0;\n\n  /**\n   * @type {number}\n   * @const\n   */\n  this.high = high | 0;\n};\n\n/**\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.Long.create = function(low, high) {\n  // Special-case zero to avoid GC overhead for default values\n  return low == 0 && high == 0 ? flatbuffers.Long.ZERO : new flatbuffers.Long(low, high);\n};\n\n/**\n * @returns {number}\n */\nflatbuffers.Long.prototype.toFloat64 = function() {\n  return (this.low >>> 0) + this.high * 0x100000000;\n};\n\n/**\n * @param {flatbuffers.Long} other\n * @returns {boolean}\n */\nflatbuffers.Long.prototype.equals = function(other) {\n  return this.low == other.low && this.high == other.high;\n};\n\n/**\n * @type {!flatbuffers.Long}\n * @const\n */\nflatbuffers.Long.ZERO = new flatbuffers.Long(0, 0);\n\n/// @endcond\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a FlatBufferBuilder.\n *\n * @constructor\n * @param {number=} opt_initial_size\n */\nflatbuffers.Builder = function(opt_initial_size) {\n  if (!opt_initial_size) {\n    var initial_size = 1024;\n  } else {\n    var initial_size = opt_initial_size;\n  }\n\n  /**\n   * @type {flatbuffers.ByteBuffer}\n   * @private\n   */\n  this.bb = flatbuffers.ByteBuffer.allocate(initial_size);\n\n  /**\n   * Remaining space in the ByteBuffer.\n   *\n   * @type {number}\n   * @private\n   */\n  this.space = initial_size;\n\n  /**\n   * Minimum alignment encountered so far.\n   *\n   * @type {number}\n   * @private\n   */\n  this.minalign = 1;\n\n  /**\n   * The vtable for the current table.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtable = null;\n\n  /**\n   * The amount of fields we're actually using.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vtable_in_use = 0;\n\n  /**\n   * Whether we are currently serializing a table.\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.isNested = false;\n\n  /**\n   * Starting offset of the current struct/table.\n   *\n   * @type {number}\n   * @private\n   */\n  this.object_start = 0;\n\n  /**\n   * List of offsets of all vtables.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtables = [];\n\n  /**\n   * For the current vector being built.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vector_num_elems = 0;\n\n  /**\n   * False omits default values from the serialized data\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.force_defaults = false;\n};\n\nflatbuffers.Builder.prototype.clear = function() {\n  this.bb.clear();\n  this.space = this.bb.capacity();\n  this.minalign = 1;\n  this.vtable = null;\n  this.vtable_in_use = 0;\n  this.isNested = false;\n  this.object_start = 0;\n  this.vtables = [];\n  this.vector_num_elems = 0;\n  this.force_defaults = false;\n};\n\n/**\n * In order to save space, fields that are set to their default value\n * don't get serialized into the buffer. Forcing defaults provides a\n * way to manually disable this optimization.\n *\n * @param {boolean} forceDefaults true always serializes default values\n */\nflatbuffers.Builder.prototype.forceDefaults = function(forceDefaults) {\n  this.force_defaults = forceDefaults;\n};\n\n/**\n * Get the ByteBuffer representing the FlatBuffer. Only call this after you've\n * called finish(). The actual data starts at the ByteBuffer's current position,\n * not necessarily at 0.\n *\n * @returns {flatbuffers.ByteBuffer}\n */\nflatbuffers.Builder.prototype.dataBuffer = function() {\n  return this.bb;\n};\n\n/**\n * Get the bytes representing the FlatBuffer. Only call this after you've\n * called finish().\n *\n * @returns {!Uint8Array}\n */\nflatbuffers.Builder.prototype.asUint8Array = function() {\n  return this.bb.bytes().subarray(this.bb.position(), this.bb.position() + this.offset());\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Prepare to write an element of `size` after `additional_bytes` have been\n * written, e.g. if you write a string, you need to align such the int length\n * field is aligned to 4 bytes, and the string data follows it directly. If all\n * you need to do is alignment, `additional_bytes` will be 0.\n *\n * @param {number} size This is the of the new element to write\n * @param {number} additional_bytes The padding size\n */\nflatbuffers.Builder.prototype.prep = function(size, additional_bytes) {\n  // Track the biggest thing we've ever aligned to.\n  if (size > this.minalign) {\n    this.minalign = size;\n  }\n\n  // Find the amount of alignment needed such that `size` is properly\n  // aligned after `additional_bytes`\n  var align_size = ((~(this.bb.capacity() - this.space + additional_bytes)) + 1) & (size - 1);\n\n  // Reallocate the buffer if needed.\n  while (this.space < align_size + size + additional_bytes) {\n    var old_buf_size = this.bb.capacity();\n    this.bb = flatbuffers.Builder.growByteBuffer(this.bb);\n    this.space += this.bb.capacity() - old_buf_size;\n  }\n\n  this.pad(align_size);\n};\n\n/**\n * @param {number} byte_size\n */\nflatbuffers.Builder.prototype.pad = function(byte_size) {\n  for (var i = 0; i < byte_size; i++) {\n    this.bb.writeInt8(--this.space, 0);\n  }\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt8 = function(value) {\n  this.bb.writeInt8(this.space -= 1, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt16 = function(value) {\n  this.bb.writeInt16(this.space -= 2, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt32 = function(value) {\n  this.bb.writeInt32(this.space -= 4, value);\n};\n\n/**\n * @param {flatbuffers.Long} value\n */\nflatbuffers.Builder.prototype.writeInt64 = function(value) {\n  this.bb.writeInt64(this.space -= 8, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat32 = function(value) {\n  this.bb.writeFloat32(this.space -= 4, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat64 = function(value) {\n  this.bb.writeFloat64(this.space -= 8, value);\n};\n/// @endcond\n\n/**\n * Add an `int8` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int8` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt8 = function(value) {\n  this.prep(1, 0);\n  this.writeInt8(value);\n};\n\n/**\n * Add an `int16` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int16` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt16 = function(value) {\n  this.prep(2, 0);\n  this.writeInt16(value);\n};\n\n/**\n * Add an `int32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt32 = function(value) {\n  this.prep(4, 0);\n  this.writeInt32(value);\n};\n\n/**\n * Add an `int64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {flatbuffers.Long} value The `int64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt64 = function(value) {\n  this.prep(8, 0);\n  this.writeInt64(value);\n};\n\n/**\n * Add a `float32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat32 = function(value) {\n  this.prep(4, 0);\n  this.writeFloat32(value);\n};\n\n/**\n * Add a `float64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat64 = function(value) {\n  this.prep(8, 0);\n  this.writeFloat64(value);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt8 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt8(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt16 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt16(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Long} value\n * @param {flatbuffers.Long} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || !value.equals(defaultValue)) {\n    this.addInt64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldOffset = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addOffset(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structs are stored inline, so nothing additional is being added. `d` is always 0.\n *\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldStruct = function(voffset, value, defaultValue) {\n  if (value != defaultValue) {\n    this.nested(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structures are always stored inline, they need to be created right\n * where they're used.  You'll get this assertion failure if you\n * created it elsewhere.\n *\n * @param {flatbuffers.Offset} obj The offset of the created object\n */\nflatbuffers.Builder.prototype.nested = function(obj) {\n  if (obj != this.offset()) {\n    throw new Error('FlatBuffers: struct must be serialized inline.');\n  }\n};\n\n/**\n * Should not be creating any other object, string or vector\n * while an object is being constructed\n */\nflatbuffers.Builder.prototype.notNested = function() {\n  if (this.isNested) {\n    throw new Error('FlatBuffers: object serialization must not be nested.');\n  }\n};\n\n/**\n * Set the current vtable at `voffset` to the current location in the buffer.\n *\n * @param {number} voffset\n */\nflatbuffers.Builder.prototype.slot = function(voffset) {\n  this.vtable[voffset] = this.offset();\n};\n\n/**\n * @returns {flatbuffers.Offset} Offset relative to the end of the buffer.\n */\nflatbuffers.Builder.prototype.offset = function() {\n  return this.bb.capacity() - this.space;\n};\n\n/**\n * Doubles the size of the backing ByteBuffer and copies the old data towards\n * the end of the new buffer (since we build the buffer backwards).\n *\n * @param {flatbuffers.ByteBuffer} bb The current buffer with the existing data\n * @returns {!flatbuffers.ByteBuffer} A new byte buffer with the old data copied\n * to it. The data is located at the end of the buffer.\n *\n * uint8Array.set() formally takes {Array<number>|ArrayBufferView}, so to pass\n * it a uint8Array we need to suppress the type check:\n * @suppress {checkTypes}\n */\nflatbuffers.Builder.growByteBuffer = function(bb) {\n  var old_buf_size = bb.capacity();\n\n  // Ensure we don't grow beyond what fits in an int.\n  if (old_buf_size & 0xC0000000) {\n    throw new Error('FlatBuffers: cannot grow buffer beyond 2 gigabytes.');\n  }\n\n  var new_buf_size = old_buf_size << 1;\n  var nbb = flatbuffers.ByteBuffer.allocate(new_buf_size);\n  nbb.setPosition(new_buf_size - old_buf_size);\n  nbb.bytes().set(bb.bytes(), new_buf_size - old_buf_size);\n  return nbb;\n};\n/// @endcond\n\n/**\n * Adds on offset, relative to where it will be written.\n *\n * @param {flatbuffers.Offset} offset The offset to add.\n */\nflatbuffers.Builder.prototype.addOffset = function(offset) {\n  this.prep(flatbuffers.SIZEOF_INT, 0); // Ensure alignment is already done.\n  this.writeInt32(this.offset() - offset + flatbuffers.SIZEOF_INT);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Start encoding a new object in the buffer.  Users will not usually need to\n * call this directly. The FlatBuffers compiler will generate helper methods\n * that call this method internally.\n *\n * @param {number} numfields\n */\nflatbuffers.Builder.prototype.startObject = function(numfields) {\n  this.notNested();\n  if (this.vtable == null) {\n    this.vtable = [];\n  }\n  this.vtable_in_use = numfields;\n  for (var i = 0; i < numfields; i++) {\n    this.vtable[i] = 0; // This will push additional elements as needed\n  }\n  this.isNested = true;\n  this.object_start = this.offset();\n};\n\n/**\n * Finish off writing the object that is under construction.\n *\n * @returns {flatbuffers.Offset} The offset to the object inside `dataBuffer`\n */\nflatbuffers.Builder.prototype.endObject = function() {\n  if (this.vtable == null || !this.isNested) {\n    throw new Error('FlatBuffers: endObject called without startObject');\n  }\n\n  this.addInt32(0);\n  var vtableloc = this.offset();\n\n  // Trim trailing zeroes.\n  var i = this.vtable_in_use - 1;\n  for (; i >= 0 && this.vtable[i] == 0; i--) {}\n  var trimmed_size = i + 1;\n\n  // Write out the current vtable.\n  for (; i >= 0; i--) {\n    // Offset relative to the start of the table.\n    this.addInt16(this.vtable[i] != 0 ? vtableloc - this.vtable[i] : 0);\n  }\n\n  var standard_fields = 2; // The fields below:\n  this.addInt16(vtableloc - this.object_start);\n  var len = (trimmed_size + standard_fields) * flatbuffers.SIZEOF_SHORT;\n  this.addInt16(len);\n\n  // Search for an existing vtable that matches the current one.\n  var existing_vtable = 0;\n  var vt1 = this.space;\nouter_loop:\n  for (i = 0; i < this.vtables.length; i++) {\n    var vt2 = this.bb.capacity() - this.vtables[i];\n    if (len == this.bb.readInt16(vt2)) {\n      for (var j = flatbuffers.SIZEOF_SHORT; j < len; j += flatbuffers.SIZEOF_SHORT) {\n        if (this.bb.readInt16(vt1 + j) != this.bb.readInt16(vt2 + j)) {\n          continue outer_loop;\n        }\n      }\n      existing_vtable = this.vtables[i];\n      break;\n    }\n  }\n\n  if (existing_vtable) {\n    // Found a match:\n    // Remove the current vtable.\n    this.space = this.bb.capacity() - vtableloc;\n\n    // Point table to existing vtable.\n    this.bb.writeInt32(this.space, existing_vtable - vtableloc);\n  } else {\n    // No match:\n    // Add the location of the current vtable to the list of vtables.\n    this.vtables.push(this.offset());\n\n    // Point table to current vtable.\n    this.bb.writeInt32(this.bb.capacity() - vtableloc, this.offset() - vtableloc);\n  }\n\n  this.isNested = false;\n  return vtableloc;\n};\n/// @endcond\n\n/**\n * Finalize a buffer, poiting to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n * @param {boolean=} opt_size_prefix\n */\nflatbuffers.Builder.prototype.finish = function(root_table, opt_file_identifier, opt_size_prefix) {\n  var size_prefix = opt_size_prefix ? flatbuffers.SIZE_PREFIX_LENGTH : 0;\n  if (opt_file_identifier) {\n    var file_identifier = opt_file_identifier;\n    this.prep(this.minalign, flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH + size_prefix);\n    if (file_identifier.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n      throw new Error('FlatBuffers: file identifier must be length ' +\n        flatbuffers.FILE_IDENTIFIER_LENGTH);\n    }\n    for (var i = flatbuffers.FILE_IDENTIFIER_LENGTH - 1; i >= 0; i--) {\n      this.writeInt8(file_identifier.charCodeAt(i));\n    }\n  }\n  this.prep(this.minalign, flatbuffers.SIZEOF_INT + size_prefix);\n  this.addOffset(root_table);\n  if (size_prefix) {\n    this.addInt32(this.bb.capacity() - this.space);\n  }\n  this.bb.setPosition(this.space);\n};\n\n/**\n * Finalize a size prefixed buffer, pointing to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n */\nflatbuffers.Builder.prototype.finishSizePrefixed = function (root_table, opt_file_identifier) {\n  this.finish(root_table, opt_file_identifier, true);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * This checks a required field has been set in a given table that has\n * just been constructed.\n *\n * @param {flatbuffers.Offset} table\n * @param {number} field\n */\nflatbuffers.Builder.prototype.requiredField = function(table, field) {\n  var table_start = this.bb.capacity() - table;\n  var vtable_start = table_start - this.bb.readInt32(table_start);\n  var ok = this.bb.readInt16(vtable_start + field) != 0;\n\n  // If this fails, the caller will show what field needs to be set.\n  if (!ok) {\n    throw new Error('FlatBuffers: field ' + field + ' must be set');\n  }\n};\n\n/**\n * Start a new array/vector of objects.  Users usually will not call\n * this directly. The FlatBuffers compiler will create a start/end\n * method for vector types in generated code.\n *\n * @param {number} elem_size The size of each element in the array\n * @param {number} num_elems The number of elements in the array\n * @param {number} alignment The alignment of the array\n */\nflatbuffers.Builder.prototype.startVector = function(elem_size, num_elems, alignment) {\n  this.notNested();\n  this.vector_num_elems = num_elems;\n  this.prep(flatbuffers.SIZEOF_INT, elem_size * num_elems);\n  this.prep(alignment, elem_size * num_elems); // Just in case alignment > int.\n};\n\n/**\n * Finish off the creation of an array and all its elements. The array must be\n * created with `startVector`.\n *\n * @returns {flatbuffers.Offset} The offset at which the newly created array\n * starts.\n */\nflatbuffers.Builder.prototype.endVector = function() {\n  this.writeInt32(this.vector_num_elems);\n  return this.offset();\n};\n/// @endcond\n\n/**\n * Encode the string `s` in the buffer using UTF-8. If a Uint8Array is passed\n * instead of a string, it is assumed to contain valid UTF-8 encoded data.\n *\n * @param {string|Uint8Array} s The string to encode\n * @return {flatbuffers.Offset} The offset in the buffer where the encoded string starts\n */\nflatbuffers.Builder.prototype.createString = function(s) {\n  if (s instanceof Uint8Array) {\n    var utf8 = s;\n  } else {\n    var utf8 = [];\n    var i = 0;\n\n    while (i < s.length) {\n      var codePoint;\n\n      // Decode UTF-16\n      var a = s.charCodeAt(i++);\n      if (a < 0xD800 || a >= 0xDC00) {\n        codePoint = a;\n      } else {\n        var b = s.charCodeAt(i++);\n        codePoint = (a << 10) + b + (0x10000 - (0xD800 << 10) - 0xDC00);\n      }\n\n      // Encode UTF-8\n      if (codePoint < 0x80) {\n        utf8.push(codePoint);\n      } else {\n        if (codePoint < 0x800) {\n          utf8.push(((codePoint >> 6) & 0x1F) | 0xC0);\n        } else {\n          if (codePoint < 0x10000) {\n            utf8.push(((codePoint >> 12) & 0x0F) | 0xE0);\n          } else {\n            utf8.push(\n              ((codePoint >> 18) & 0x07) | 0xF0,\n              ((codePoint >> 12) & 0x3F) | 0x80);\n          }\n          utf8.push(((codePoint >> 6) & 0x3F) | 0x80);\n        }\n        utf8.push((codePoint & 0x3F) | 0x80);\n      }\n    }\n  }\n\n  this.addInt8(0);\n  this.startVector(1, utf8.length, 1);\n  this.bb.setPosition(this.space -= utf8.length);\n  for (var i = 0, offset = this.space, bytes = this.bb.bytes(); i < utf8.length; i++) {\n    bytes[offset++] = utf8[i];\n  }\n  return this.endVector();\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.Builder.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n////////////////////////////////////////////////////////////////////////////////\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Create a new ByteBuffer with a given array of bytes (`Uint8Array`).\n *\n * @constructor\n * @param {Uint8Array} bytes\n */\nflatbuffers.ByteBuffer = function(bytes) {\n  /**\n   * @type {Uint8Array}\n   * @private\n   */\n  this.bytes_ = bytes;\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.position_ = 0;\n};\n\n/**\n * Create and allocate a new ByteBuffer with a given size.\n *\n * @param {number} byte_size\n * @returns {!flatbuffers.ByteBuffer}\n */\nflatbuffers.ByteBuffer.allocate = function(byte_size) {\n  return new flatbuffers.ByteBuffer(new Uint8Array(byte_size));\n};\n\nflatbuffers.ByteBuffer.prototype.clear = function() {\n  this.position_ = 0;\n};\n\n/**\n * Get the underlying `Uint8Array`.\n *\n * @returns {Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.bytes = function() {\n  return this.bytes_;\n};\n\n/**\n * Get the buffer's position.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.position = function() {\n  return this.position_;\n};\n\n/**\n * Set the buffer's position.\n *\n * @param {number} position\n */\nflatbuffers.ByteBuffer.prototype.setPosition = function(position) {\n  this.position_ = position;\n};\n\n/**\n * Get the buffer's capacity.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.capacity = function() {\n  return this.bytes_.length;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt8 = function(offset) {\n  return this.readUint8(offset) << 24 >> 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint8 = function(offset) {\n  return this.bytes_[offset];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt16 = function(offset) {\n  return this.readUint16(offset) << 16 >> 16;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint16 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt32 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8 | this.bytes_[offset + 2] << 16 | this.bytes_[offset + 3] << 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint32 = function(offset) {\n  return this.readInt32(offset) >>> 0;\n};\n\n/**\n * @param {number} offset\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readInt64 = function(offset) {\n  return new flatbuffers.Long(this.readInt32(offset), this.readInt32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readUint64 = function(offset) {\n  return new flatbuffers.Long(this.readUint32(offset), this.readUint32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat32 = function(offset) {\n  flatbuffers.int32[0] = this.readInt32(offset);\n  return flatbuffers.float32[0];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat64 = function(offset) {\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1] = this.readInt32(offset);\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0] = this.readInt32(offset + 4);\n  return flatbuffers.float64[0];\n};\n\n/**\n * @param {number} offset\n * @param {number|boolean} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt8 = function(offset, value) {\n  this.bytes_[offset] = /** @type {number} */(value);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint8 = function(offset, value) {\n  this.bytes_[offset] = value;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt16 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint16 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt32 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n  this.bytes_[offset + 2] = value >> 16;\n  this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint32 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n    this.bytes_[offset + 2] = value >> 16;\n    this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt64 = function(offset, value) {\n  this.writeInt32(offset, value.low);\n  this.writeInt32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint64 = function(offset, value) {\n    this.writeUint32(offset, value.low);\n    this.writeUint32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat32 = function(offset, value) {\n  flatbuffers.float32[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[0]);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat64 = function(offset, value) {\n  flatbuffers.float64[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1]);\n  this.writeInt32(offset + 4, flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0]);\n};\n\n/**\n * Return the file identifier.   Behavior is undefined for FlatBuffers whose\n * schema does not include a file_identifier (likely points at padding or the\n * start of a the root vtable).\n * @returns {string}\n */\nflatbuffers.ByteBuffer.prototype.getBufferIdentifier = function() {\n  if (this.bytes_.length < this.position_ + flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error(\n        'FlatBuffers: ByteBuffer is too short to contain an identifier.');\n  }\n  var result = \"\";\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    result += String.fromCharCode(\n        this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i));\n  }\n  return result;\n};\n\n/**\n * Look up a field in the vtable, return an offset into the object, or 0 if the\n * field is not present.\n *\n * @param {number} bb_pos\n * @param {number} vtable_offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__offset = function(bb_pos, vtable_offset) {\n  var vtable = bb_pos - this.readInt32(bb_pos);\n  return vtable_offset < this.readInt16(vtable) ? this.readInt16(vtable + vtable_offset) : 0;\n};\n\n/**\n * Initialize any Table-derived type to point to the union at the given offset.\n *\n * @param {flatbuffers.Table} t\n * @param {number} offset\n * @returns {flatbuffers.Table}\n */\nflatbuffers.ByteBuffer.prototype.__union = function(t, offset) {\n  t.bb_pos = offset + this.readInt32(offset);\n  t.bb = this;\n  return t;\n};\n\n/**\n * Create a JavaScript string from UTF-8 data stored inside the FlatBuffer.\n * This allocates a new string and converts to wide chars upon each access.\n *\n * To avoid the conversion to UTF-16, pass flatbuffers.Encoding.UTF8_BYTES as\n * the \"optionalEncoding\" argument. This is useful for avoiding conversion to\n * and from UTF-16 when the data will just be packaged back up in another\n * FlatBuffer later on.\n *\n * @param {number} offset\n * @param {flatbuffers.Encoding=} opt_encoding Defaults to UTF16_STRING\n * @returns {string|!Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.__string = function(offset, opt_encoding) {\n  offset += this.readInt32(offset);\n\n  var length = this.readInt32(offset);\n  var result = '';\n  var i = 0;\n\n  offset += flatbuffers.SIZEOF_INT;\n\n  if (opt_encoding === flatbuffers.Encoding.UTF8_BYTES) {\n    return this.bytes_.subarray(offset, offset + length);\n  }\n\n  while (i < length) {\n    var codePoint;\n\n    // Decode UTF-8\n    var a = this.readUint8(offset + i++);\n    if (a < 0xC0) {\n      codePoint = a;\n    } else {\n      var b = this.readUint8(offset + i++);\n      if (a < 0xE0) {\n        codePoint =\n          ((a & 0x1F) << 6) |\n          (b & 0x3F);\n      } else {\n        var c = this.readUint8(offset + i++);\n        if (a < 0xF0) {\n          codePoint =\n            ((a & 0x0F) << 12) |\n            ((b & 0x3F) << 6) |\n            (c & 0x3F);\n        } else {\n          var d = this.readUint8(offset + i++);\n          codePoint =\n            ((a & 0x07) << 18) |\n            ((b & 0x3F) << 12) |\n            ((c & 0x3F) << 6) |\n            (d & 0x3F);\n        }\n      }\n    }\n\n    // Encode UTF-16\n    if (codePoint < 0x10000) {\n      result += String.fromCharCode(codePoint);\n    } else {\n      codePoint -= 0x10000;\n      result += String.fromCharCode(\n        (codePoint >> 10) + 0xD800,\n        (codePoint & ((1 << 10) - 1)) + 0xDC00);\n    }\n  }\n\n  return result;\n};\n\n/**\n * Retrieve the relative offset stored at \"offset\"\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__indirect = function(offset) {\n  return offset + this.readInt32(offset);\n};\n\n/**\n * Get the start of data of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector = function(offset) {\n  return offset + this.readInt32(offset) + flatbuffers.SIZEOF_INT; // data starts after the length\n};\n\n/**\n * Get the length of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector_len = function(offset) {\n  return this.readInt32(offset + this.readInt32(offset));\n};\n\n/**\n * @param {string} ident\n * @returns {boolean}\n */\nflatbuffers.ByteBuffer.prototype.__has_identifier = function(ident) {\n  if (ident.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error('FlatBuffers: file identifier must be length ' +\n                    flatbuffers.FILE_IDENTIFIER_LENGTH);\n  }\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    if (ident.charCodeAt(i) != this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n\n// Exports for Node.js and RequireJS\nexport { flatbuffers };\n\n/// @endcond\n/// @}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(1057);\n"],"names":["root","factory","exports","module","require","define","amd","a","i","self","__WEBPACK_EXTERNAL_MODULE__1670__","async","pathOrBuffer","options","session","Session","loadModel","OnnxjsSessionHandler","env","wasm","initTimeout","simd","proxy","numThreads","Number","isInteger","numCpuLogicalCores","navigator","cpus","length","hardwareConcurrency","Math","min","ceil","initializeWebAssemblyInstance","handler","OnnxruntimeWebAssemblySessionHandler","Promise","resolve","onnxjsBackend","registerBackend","wasmBackend","Object","defineProperty","versions","value","version","enumerable","AttributeWithCacheKeyImpl","constructor","attribute","assign","this","cacheKey","_cacheKey","getOwnPropertyNames","sort","map","name","join","createAttributeWithCacheKey","ortFbs","onnxruntime","experimental","fbs","Attribute","attributes","_attributes","Map","attr","onnx","AttributeProto","set","getValue","getType","size","Error","key","type","delete","getFloat","defaultValue","get","getInt","getString","getTensor","getFloats","getInts","getStrings","getTensors","valueAndType","undefined","static","AttributeType","FLOAT","INT","STRING","TENSOR","FLOATS","INTS","STRINGS","TENSORS","attrType","GRAPH","GRAPHS","getValueNoCheck","LongUtil","isLong","longToNumber","arr","numberValue","Array","maybeLong","Tensor","fromProto","fromOrtTensor","utf8String","decodeUtf8String","getValueNoCheckFromOnnxFormat","getValueNoCheckFromOrtFormat","f","s","t","g","floats","ints","strings","tensors","graphs","floatsArray","intsLength","push","stringsLength","tensorsLength","backendsCache","tryLoadBackend","backendHint","backendObj","backend","obj","o","initialize","createSessionHandler","dispose","isBackend","init","webgl","WebGLBackend","resolveBackend","hint","hints","cache","contextId","matmulMaxBatchSize","textureCacheMode","pack","glContext","createWebGLContext","Logger","setWithEnv","gl","verbose","e","warning","context","WebGLSessionHandler","CoordsGlslLib","GlslLib","super","getFunctions","offsetToCoords","coordsToOffset","toVec","valueFrom","getCommonUtilFuncs","getInputsSamplingSnippets","getOutputSamplingSnippet","getCustomTypes","GlslLibRoutine","outputLayout","outputTextureLayout","isPacked","getPackedOutputSamplingSnippet","getUnpackedOutputSamplingSnippet","outShape","unpackedShape","outTexShape","width","height","result","funcName","getOutputScalarCoords","getOutputPacked1DCoords","getOutputPacked2DCoords","getOutputPacked3DCoords","getOutputPackedNDCoords","floatTextureSetRGBASource","getGlsl","output","getOutputUnpacked1DCoords","getOutputUnpacked2DCoords","getOutputUnpacked3DCoords","getOutputUnpacked4DCoords","getOutputUnpacked5DCoords","getOutputUnpacked6DCoords","floatTextureSetRSource","shape","texShape","packedTexShape","source","ArrayUtil","arraysEqual","texelsInLogicalRow","texelsInBatch","texelsInBatchN","batches","coords","b","rank","strides","coordsToCompute","coordsFromIndexSnippet","stride","glsl","texture2D","programInfo","inputNames","forEach","samplerName","inputLayout","inputTextureLayouts","generateShaderFuncNameFromInputSamplerName","getPackedSamplerFromInput","getUnpackedSamplerFromInput","outCoordFuncName","generateShaderFuncNameFromInputSamplerNameAtOutCoords","getPackedSamplerAtOutputCoords","getUnpackedSamplerAtOutputCoords","inShape","texName","texFuncSnippet","inRank","outRank","broadcastDims","BroadcastUtil","getBroadcastDims","getCoordsDataType","rankDiff","coordsSnippet","fields","getGlChannels","d","unpackedCoordsSnippet","isInputScalar","ShapeUtil","isOutputScalar","rows","cols","indexOf","inTexShape","getPackedSamplerScalar","getPackedSampler1D","getPackedSampler2D","getPackedSampler3D","getPackedSamplerND","getUnpackedSamplerScalar","getUnpackedSampler1D","getUnpackedSampler2D","getUnpackedSampler3D","getUnpackedSampler4D","getUnpackedSampler5D","getUnpackedSampler6D","texNumR","texNumC","packedSampler","valuesPerRow","squeezedShape","slice","keptDims","newInputShape","squeezeInputShape","params","newInputLayout","JSON","parse","stringify","samplerRoutine","routineBody","getSqueezedParams","dependencies","index","tNumR","tNumC","newShape","squeezeShape","stride0","stride1","routine","revDims","reverse","stride2","stride3","stride4","xScale","yScale","stridesBlock","body","layout","getValueFromSingle","varName","transpose","getPackedValueFrom","FunctionType","addDependency","node","nodes","cycleCheck","Set","alreadyTraversed","createOrderedNodes","graphNodes","dfsTraverse","has","add","EncodingGlslLib","encodeFloat32","decodeFloat32","encode","decode","encodeUint8","endianness","isLittleEndian","decodeUint8","ArrayBuffer","Uint32Array","c","Uint8Array","FragColorGlslLib","setFragColor","getColorAsFloat","INLINE_FUNC_DEF_REGEX","script","inlineDefs","match","exec","split","tokens","trim","filter","v","regexString","replace","regex","RegExp","variable","declLine","newBody","paramRedecLine","replacement","libs","glslLibRoutineDependencyGraph","GlslContext","keys","glslRegistry","lib","libName","routinesInLib","currentNode","GlslLibRoutineNode","preprocess","shaderSource","hasMain","getDefaultFragShaderMain","replaceInlines","getFragShaderPreamble","getUniforms","variables","getImports","routinesIncluded","selectGlslLibRoutinesToBeIncluded","routines","classAndRoutine","TopologicalSortGlslRoutines","returnOrderedNodes","samplers","uniformLines","sampler","arrayLength","VecGlslLib","ShapeUtilsGlslLib","bcastIndex","bcastMatmulIndex","offsetToIndices","indicesToOffset","incrementIndices","outputRank","dimOffset","block","indexToOffsetSingle","offsetToIndicesSingle","shapeInit","GLSL_ES_2_0","varyingVertex","varyingFrag","outputDeclaration","GLSL_ES_3_0","outputShapeLength","binaryVecFunctions","copyVec","setVecItem","getVecItem","nameOp","sub","mul","div","fname","assignmentBlock","packedTextureDataCache","unpackedTextureDataCache","calculateTextureWidthAndHeight","textureType","layoutStrategy","executeProgram","program","inputs","inputTypes","inputTextureDatas","getOrCreateTextureData","texture","cacheHint","getProgramInfoUniqueKey","artifact","programManager","getArtifact","createTextureLayoutFromTextureType","dims","outputTextureData","createTextureData","build","setArtifact","runProgram","run","tensor","TextureType","packed","td","getTextureData","dataId","unpack","packedLastDimension","group","channels","adjustedKernelShape","adjustedLayout","buffer","numberData","numFeatureMaps","oldRowSize","newRowSize","Float32Array","oldOffset","newOffset","subarray","unpackedTextureLayout","createTextureLayoutFromShape","reverseWH","unpackedTextureData","createTextureDataFromLayoutBindTensor","dataType","data","usage","textureManager","createTextureFromLayout","createTextureDataFromTexture","reshapeUnpacked","input","reshapedDims","inputTD","unpacked","newTextureLayout","computeStrides","reshapePacked","isReshapeCheap","squeezedInputShape","processDims3D","squeezedOutputShape","squeezedInputTensor","squeezedOutputTensor","createPackedReshape3DProgramInfoLoader","cast","tensorId","textureData","_id","readTexture","readTextureAsync","setTextureData","isInitializer","isTextureLayoutCached","clearActiveTextures","releaseTexture","isFloat32DownloadSupported","readUint8TextureAsFloat","encodeAsUint8","createPackProgramInfoLoader","createUnpackProgramInfoLoader","WEBGL_OP_RESOLVE_RULES","unaryOps","abs","acos","binaryOps","and","asin","atan","averagePool","parseAveragePoolAttributes","batchNormalization","parseBatchNormalizationAttributes","parseCastAttributes","clip","parseClipAttributes","clipV11","concat","parseConcatAttributes","conv","parseConvAttributes","convTranspose","parseConvTransposeAttributes","cos","identity","depthToSpace","parseDepthToSpaceAttributes","equal","elu","parseEluAttributes","exp","flatten","parseFlattenAttributes","floor","gather","parseGatherAttributes","gemm","parseGemmAttributesV7","parseGemmAttributesV11","globalAveragePool","parseGlobalAveragePoolAttributes","globalMaxPool","greater","imageScaler","parseImageScalerAttributes","instanceNormalization","parseInstanceNormalizationAttributes","leakyRelu","parseLeakyReluAttributes","less","lrn","parseLrnAttributes","log","matMul","parseMatMulAttributes","maxPool","parseMaxPoolAttributes","neg","not","or","padV2","parsePadAttributesV2","padV11","parsePadAttributesV11","pow","pRelu","reduceLogSum","parseReduceAttributes","reduceMax","reduceMean","reduceMin","reduceProd","reduceSum","reduceLogSumSquare","relu","reshape","resize","parseResizeAttributesV10","parseResizeAttributesV11","sigmoid","sin","sliceV10","parseSliceAttributes","softmax","parseSoftmaxAttributes","softmaxV13","parseSoftmaxAttributesV13","parseSplitAttributes","sqrt","squeeze","parseSqueezeAttributes","squeezeV13","sum","tan","tanh","tile","parseTransposeAttributes","upsample","parseUpsampleAttributesV7","parseUpsampleAttributesV9","unsqueeze","parseUnsqueezeAttributes","unsqueezeV13","xor","batchNormalizationProgramMetadata","inferenceHandler","validateInputs","createBatchNormalizationProgramInfo","epsilon","momentum","spatial","scaleWidth","scaleHeight","X","scale","B","mean","var_","glslAdd","ValueBased","glslDiv","glslMul","glslSub","glslEqual","glslGreater","glslLess","glslAnd","glslOr","glslXor","glslPow","glslBuiltinBinary","glslPRelu","createBinaryProgramInfoLoader","glslFunc","outputTensorType","createBinaryProgramInfo","isBroadcast","areEqual","outputShape","usePackedTexture","calculatedShape","calcShape","aRank","bRank","aBcast","bBcast","to","ProtoUtil","tensorDataTypeFromProto","createPackedConcatProgramInfoLoader","metadata","inputCount","from","fill","axis","inputShape","dataNShape","axisIndex","getChannels","dtype","unpackChannel","unpackFromChannel","shapes","offsets","channel","lastChannels","allChannels","getValueSnippet","shift","getShiftedChannelsSnippet","lastIndex","x","createPackedConcatProgramInfo","channelIdx","idx","createUnpackedConcatProgramInfoLoader","sizeInConcatAxis","previousSum","getTextureIndexWhereDataResidesMethod","getTextureIndexWhereDataResidesLinearSearch","getTextureIndexWhereDataResidesBinarySearch","getFetchDataFromCorrectTextureMethod","getGetSizeInConcatAxisValueFromIndexMethod","createUnpackedConcatProgramInfo","numberOfTensors","tensorRank","codeLines","inputType","inputDimensionality","createUnpackedGroupedConvProgramInfoLoader","hasBias","processBias","xShape","wShape","outputChannelsPerGroup","autoPad","dilations","kernelShape","pads","calculateOutputShape","activationFunction","applyActivation","getActivationSnippet","createUnpackedGroupedConvProgramInfo","conv2DPackedPointwise","xshape","kshape","reshapedX","reshapedK","matmulInputs","matmulOutput","createPackedMatmulProgramInfoLoader","conv2DPacked","im2colOutput","createPackedIm2ColProgramInfoLoader","kernelReshaped","computeTotalPad","inDim","adj","kernel","dilation","outSize","distributePadding","totalPad","head","tail","smallPad","convTranspose2d","adjustedAttributes","getAdjustedConvTransposeAttributes","convTranspose2DUnpacked","valueInit","inputChannelsPerGroup","createUnpackedConvTransposeProgramInfo","createUnpackedConvTransposeProgramInfoLoader","outputPadding","spatialRank","updateShape","calculateOutputShapeAndPads","newAttributes","activationAttributes","parseInternalActivationAttributes","featureMaps","adjustPads","batchSize","inputSpatialShape","outChannels","dilatedKernelShape","outputSpatialShape","conv2d","getAdjustedConvAttributes","packMode","isPointwise","conv2DUnpackedPointwise","conv2DUnpacked","createMatmulProgramInfoLoader","xIm2Col","createIm2ColProgramInfoLoader","dotProductInputs","createDotProductProgramInfoLoader","PoolConvUtil","adjustPadsBasedOnAutoPad","blocksize","blocksizeSqr","transposePerm","mode","firstReshapeShape","firstReshapedTensor","transposeAttributes","perm","transposeOutput","secondReshapeShape","TypeError","activationCacheKey","createDotProductProgramMetadata","im2colShape","calculateIm2ColDims","kWidth","kHeight","im2colStrides","im2colWidth","im2colHeight","initValue","sharedDim","createDotProductProgramInfo","outputDims","flattenShape","r","func","activation","glslRelu","glslSigmoid","glslClip","clipMin","clipMax","activationName","MIN_CLIP","MAX_CLIP","createGatherProgramInfoLoader","gatherProgramMetadata","indexDataShape","normalizeAxis","indexCopyOps","createGatherProgramInfo","NUMBER_TYPES","createGemmProgramInfoLoader","parseGemmAttributes","isOptionalC","transA","transB","alpha","beta","createGemmProgramInfo","aShape","bShape","M","N","GemmUtil","getShapeOfGemmResult","line","w","wshape","kernelSize","unrolled","row","col","createPackedIm2ColProgramInfo","im2colDims","createIm2ColProgramInfo","createImageScalerProgramInfoLoader","bias","imageScalerProgramMetadata","createGetBiasMethod","createImageScalerProgramInfo","numChannels","meanAndVariance","createMeanAndVarianceProgramInfoLoader","createComputeOutputProgramInfoLoader","meanAndVarianceProgramMetadata","xDims","channelSize","createMeanAndVarianceProgramInfo","computeOutputProgramMetadata","meanAndVarianceShape","textureWidth","textureHeight","meanAndVarianceWidth","meanAndVarianceHeight","createComputeOutputProgramInfo","createLrnProgramInfoLoader","lrnProgramMetadata","C","createLrnProgramInfo","sharedDimIndex","coordsDataType","allGlChannels","getBiasForMatmulSnippet","getBiasForMatmul","getBcastedSamplerForMatmulSnippet","unpackedACoordsSnippet","unpackedBCoordsSnippet","inAShape","inBShape","inARank","inBRank","rankADiff","rankBDiff","broadcastADims","broadcastBDims","coordsASnippet","coordsBSnippet","swapDimSnippet","getBcastSamplerForMatmul","getSamplerAInLoopSnippet","res","getA","getSamplerBInLoopSnippet","getB","createPackedMatmulProgramInfo","createMatmulProgramMetadata","arank","brank","createMatmulProgramInfo","packProgramMetadata","unpackedReversed","inputRank","setup","reversedInputWH","outOfBoundsCondition","cond","getOutOfBoundsCondition","D","getOutput","createPackProgramInfo","getVecChannels","padProgramMetadata","validateInputsV2","createPadProgramInfo","validateInputsV11","attrubutes","generatePadAttributesFromInputs","integerData","floatData","padShape","getPadFunction","getPadConstant","getPadReflect","getPadEdge","createAveragePoolProgramInfo","ceilMode","countIncludePad","isGlobalOperator","getAdjustedPoolAttributesAndOutputShape","op2","generatePoolingCode","createMaxPoolProgramInfo","storageOrder","hasDilations","hasOwnProperty","call","adjustPoolAttributes","computePoolOutputShape","globalMaxPoolAttributes","globalMaxPoolMetadata","inputDims","op1","start","kw","sw","pwStart","pwEnd","dimW","codeW","codeH","codeHEnd","kh","sh","phStart","phEnd","dimH","kernelStrides","stridesRank","padsRank","offsetToIndicesFunction","copyInputDims","copyArray","copyPads","copyKernelStrides","copyStrides","padCode","reduce","cur","array","arrayName","reduceOp","reduceProgramMetadata","createReduceProgramInfo","axes","keepDims","iRank","idxCopy","normalizeAxes","ops","reduceOps","k","idxZero","input3D","outputShape3D","createPackedReshape3DProgramMetadata","inputShape3D","mainLoop","outputCoords","getReshapedInputCoords","getFlattenedIndexFrom3D","createPackedReshape3DProgramInfo","batch","isCheapReshape","calculateReshapedDims","resizeProgramMetadata","createPackedResizeProgramInfo","parseUpsampleAttributes","scales","prepareInputs","every","coordinateTransformMode","dim","outputHeight","outputWidth","inputHeight","inputWidth","scalesHeight","scalesWidth","getSourceFracIndex","outputSizes","scalesTensor","scalesInputIdx","sizesInputIdx","parseScalesData","isResize","sizesTensor","parseScalesDataFromOutputSize","yDims","scalesValidation","end","Int32Array","sliceProgramMetadata","createSliceProgramInfo","starts","ends","val","normalizedAxes","sliceOps","validateInputsV10","generateSliceAttributesFromInputs","some","softmaxComputeMaxProgramMetadata","softmaxComputeScaleProgramMetadata","softmaxProgramMetadata","logicalRowCount","sizeToDimension","featureCount","sizeFromDimension","computeSoftmax","isTransposeRequired","transposedInputShape","transposeAttribute","transposedInputs","_","p","computeMaxProgramInfo","createComputeMaxProgramInfo","max","computeScaleProgramInfo","createComputScaleProgramInfo","softMaxProgramInfo","createSoftMaxProgramInfo","maxElementPerLogicalRow","normalizationPerLogicalRow","splitProgramMetadata","count","getProgramCount","createSplitProgramInfo","numOutputs","outputs","SplitUtil","splitShape","offset","validateInputsV13","sumProgramMetadata","createSumProgramInfo","j","tileProgramMetadata","createTileProgramInfo","tileOps","transposeProgramMetadata","createTransposeProgramInfo","getAdjustedPerm","unpackedOutputShape","getOutputShape","getPermFunctionBody","sortBasedOnPerm","reverseFunc","downloadUint8AsFloat","glslAbs","glslBuiltinUnary","glslAcos","glslAsin","glslAtan","glslCeil","glslCos","glslElu","glslExp","glslFloor","glslIdentity","glslLeakyRelu","glslLog","glslNeg","glslNot","glslSin","glslSqrt","glslTan","glslTanh","createElementwiseProgramInfoLoader","createElementwiseProgramInfo","generateClipAttributesFromInputs","unpackProgramMetadata","createUnpackProgramInfo","innerDims","sourceCoords","getSourceCoords","unsqueezeShape","upsampleProgramMetadata","createUpsampleProgramInfo","opset","extrapolationValue","needRoiInput","useExtrapolation","nearestMode","cubicCoefficientA","excludeOutside","useNearest2xOptimization","roiInputIdx","outputPitches","inputPitches","precalculatedPitches","getInputFloatFunction","profiler","textureLayoutStrategy","repo","attributesBound","buildArtifact","event","useProgram","bindOutput","bindAttributes","attribLocations","bindUniforms","uniformLocations","err","error","draw","vertexShader","deleteShader","deleteProgram","preprocessor","GlslPreprocessor","fragScript","compile","getUniformLocations","getAttribLocations","fragShaderScript","vertexShaderScript","getVertexShaderSource","compileShader","VERTEX_SHADER","debug","fragShader","FRAGMENT_SHADER","createProgram","attachFramebuffer","positionHandle","position","textureCoordHandle","textureCoord","setVertexAttributes","textures","texturePosition","location","find","bindTexture","uniform1fv","uniform1f","uniform1iv","uniform1i","uniformHandle","bindTextureToUniform","getAttribLocation","getUniformLocation","reference","PreferLogicalStrategy","maxTextureSize","ProgramManager","TextureManager","reuseTextures","pack2unpackMap","unpack2packMap","createInferenceHandler","WebGLInferenceHandler","onGraphInitialized","graph","initializers","getValues","addInitializer","opsets","op","resolveOperator","impl","opImpl","opInit","internalFormat","R32F","format","RED","RGBA32F","RGBA","src","textureSize","allocate","dataSize","dest","ALPHA","UNSIGNED_BYTE","_textureSize","byteOffset","byteLength","isEmptyArray","isArray","parseAxisParam","assert","ax","isInt","sizeFromShape","sizeToSquarishShape","computeTextureWH","prefs","breakAxis","wsize","hsize","totalSize","wh","computeTexture","logShape","squeezeResult","dimsToSkip","inferredDims","reversedWH","config","pendingRead","inUseTextures","idleTextures","textureLookup","textureDataType","toEncoderType","encoder","getEncoder","pop","updateTexture","toTextureData","allocateTexture","toTensorData","subscribers","createAndWaitForFence","tensorData","deleteTexture","splice","Int16Array","Int8Array","Uint16Array","Float64Array","_dataType","len","checkFn","delayFn","_counter","maxCounter","reject","tryCount","tryFn","nextBackoff","setTimeout","charAt","toUpperCase","createNewWebGLContext","canvas","ca","depth","antialias","stencil","preserveDrawingBuffer","premultipliedAlpha","failIfMajorPerformanceCaveat","getContext","WebGLContext","webgl2","OffscreenCanvas","createOffscreenCanvas","document","createElement","createCanvas","isContextLost","disable","DEPTH_TEST","STENCIL_TEST","BLEND","DITHER","POLYGON_OFFSET_FILL","SAMPLE_COVERAGE","enable","SCISSOR_TEST","CULL_FACE","cullFace","BACK","linearSearchLastTrue","frameBufferBound","itemsToPoll","getExtensions","vertexbuffer","createVertexbuffer","framebuffer","createFramebuffer","queryVitalParameters","createTexture","TEXTURE_2D","texParameteri","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","texImage2D","checkError","texSubImage2D","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","viewport","scissor","readPixels","isFramebufferReady","getActiveTexture","getParameter","ACTIVE_TEXTURE","TEXTURE0","getTextureBinding","TEXTURE_BINDING_2D","getFramebufferBinding","FRAMEBUFFER_BINDING","vertexAttribPointer","enableVertexAttribArray","attachShader","linkProgram","shaderType","shader","createShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","activeTexture","drawArrays","TRIANGLE_STRIP","getError","label","toString","DataEncoders","RedFloat32DataEncoder","isRenderFloat32Supported","RGBAFloatDataEncoder","textureHalfFloatExtension","HALF_FLOAT_OES","Uint8DataEncoder","unit","maxTextureImageUnits","disposed","deleteFramebuffer","bindBuffer","ARRAY_BUFFER","deleteBuffer","ELEMENT_ARRAY_BUFFER","finish","createDefaultGeometry","createBuffer","geometry","bufferData","STATIC_DRAW","fb","isFloatTextureAttachableToFrameBuffer","checkFloatTextureAttachableToFrameBuffer","checkRenderFloat32","checkFloat32Download","isBlendSupported","checkFloat32Blend","MAX_TEXTURE_SIZE","MAX_TEXTURE_IMAGE_UNITS","colorBufferFloatExtension","getExtension","disjointTimerQueryWebgl2Extension","textureFloatExtension","frameBuffer","isComplete","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","fragmentShader","POINTS","NO_ERROR","beginTimer","gl2","ext","query","createQuery","beginQuery","TIME_ELAPSED_EXT","endTimer","endQuery","isTimerResultAvailable","available","disjoint","getQueryParameter","QUERY_RESULT_AVAILABLE","GPU_DISJOINT_EXT","getTimerResult","timeElapsed","QUERY_RESULT","deleteQuery","repeatedTry","fenceContext","createFence","pollFence","isFencePassed","fenceSync","SYNC_GPU_COMMANDS_COMPLETE","flush","status","clientWaitSync","ALREADY_SIGNALED","CONDITION_SATISFIED","addItemToPoll","pollItems","isDoneFn","resolveFn","KernelOp","getNodes","_ops","reset","_starter","resolved","_values","getInputIndices","sessionHandler","modelInputs","graphInputs","sequence","graphValues","rear","thisOpIndex","thisOp","inputList","inputTensors","outputList","downstreamNodes","currentDownstreamNodeIndex","currentDownstreamNode","getOutputIndices","outputIndex","outputTensor","getData","Graph","graphProto","initializer","GraphImpl","Value","valueInfo","_from","_to","tensorValueTypeFromProto","tensorType","Node","_nodeProto","NodeProto","opType","tensorAttributesFromORTFormat","executeNode","graphInitializer","buildGraph","transformGraph","checkIsAcyclic","_allInputIndices","getInputNames","_allInputNames","_allOutputIndices","getOutputNames","_allOutputNames","_allData","_nodes","GraphProto","buildGraphFromOnnxFormat","buildGraphFromOrtFormat","dataIndices","nodesIndices","inputValueNames","currentIndex","tensorDimsFromProto","nodeProto","pick","dataIndex","inputsLength","inputName","nodeArgsLength","nodeArgs","valueType","TypeInfoValue","tensor_type","TensorTypeAndShape","elemType","dimLength","dimValue","initializersLength","tensorDimsFromORTFormat","outputsLength","outputName","nodesLength","attributesLength","starters","nodesStack","nodesState","nodeIndex","outgoingEdgeIndex","downstreamNodeIndex","removeAllIdentityNodes","removeAllDropoutNodes","fuseConvActivationNodes","finalizeGraph","newIndices","nodePossition","ind","currentData","deleteNode","inputValueIndex","outputValueIndex","nodesConsumingOutput","delIndex","replaceIndex","isActivation","n","next","child","SEVERITY_VALUE","info","fatal","LOGGER_PROVIDER_MAP","_severity","_content","_category","severity","content","category","console","color","LOGGER_DEFAULT_CONFIG","provider","minimalSeverity","logDateTime","logSourceLocation","LOGGER_CONFIG_MAP","arg0","arg1","arg2","arg3","bind","logInternal","stack","Date","toISOString","previousConfig","logLevel","Event","startTime","endCallback","timer","ctx","waitForQueryAndGetTime","EventRecord","endTime","maxNumberEvents","flushBatchSize","flushIntervalInMilliseconds","_started","_flushPointer","_maxNumberEvents","_flushBatchSize","_flushIntervalInMilliseconds","_timingEvents","_flushTime","now","stop","logOneEvent","begin","isPromise","then","reason","eventRes","endSync","checkTimer","toFixed","currentTime","previousPointer","started","performance","load","buf","isOrtFormat","loadFromOnnxFormat","loadFromOrtFormat","modelProto","ModelProto","irVersion","_opsets","opsetImport","domain","_graph","flatbuffers","ByteBuffer","ortModel","InferenceSession","getRootAsInferenceSession","model","opsetImportLength","opsetId","INT_TYPES","FLOAT_TYPES","matchSelector","selector","endsWith","rangeStart","parseInt","substring","isNaN","pair","rangeEnd","rules","rule","versionSelector","DimensionValueType","TensorDataType","NodeType","Shape","bb","bb_pos","__init","readInt32","setPosition","SIZE_PREFIX_LENGTH","__offset","Dimension","__indirect","__vector","__vector_len","builder","startObject","addFieldOffset","startVector","addOffset","endVector","numElems","endObject","startShape","addDim","endShape","DimensionValue","denotation","optionalEncoding","__string","valueOffset","denotationOffset","startDimension","addValue","addDenotation","endDimension","dimType","readInt8","UNKNOWN","readInt64","createLong","dimParam","addFieldInt8","addFieldInt64","dimParamOffset","startDimensionValue","addDimType","addDimValue","addDimParam","endDimensionValue","UNDEFINED","addFieldInt32","shapeOffset","startTensorTypeAndShape","addElemType","addShape","endTensorTypeAndShape","MapType","keyType","TypeInfo","valueTypeOffset","startMapType","addKeyType","addValueType","endMapType","SequenceType","elemTypeOffset","startSequenceType","endSequenceType","EdgeEnd","readUint32","srcArgIndex","dstArgIndex","node_index","src_arg_index","dst_arg_index","prep","writeInt32","NodeEdge","inputEdges","inputEdgesLength","outputEdges","outputEdgesLength","inputEdgesOffset","outputEdgesOffset","startNodeEdge","addNodeIndex","addInputEdges","addOutputEdges","endNodeEdge","docString","sinceVersion","Primitive","executionProviderType","inputArgCounts","inputArgCountsLength","inputArgCountsArray","bytes","implicitInputs","implicitInputsLength","nameOffset","docStringOffset","domainOffset","opTypeOffset","executionProviderTypeOffset","inputsOffset","outputsOffset","attributesOffset","inputArgCountsOffset","addInt32","implicitInputsOffset","startNode","addName","addDocString","addDomain","addSinceVersion","addIndex","addOpType","addType","addExecutionProviderType","addInputs","addOutputs","addAttributes","addInputArgCounts","addImplicitInputs","endNode","ValueInfo","typeOffset","startValueInfo","endValueInfo","readUint8","NONE","__union","startTypeInfo","endTypeInfo","OperatorSetId","startOperatorSetId","addVersion","endOperatorSetId","dimsLength","rawData","rawDataLength","rawDataArray","stringData","stringDataLength","dimsOffset","addInt64","rawDataOffset","addInt8","stringDataOffset","startTensor","addDims","addDataType","addRawData","addStringData","endTensor","SparseTensor","values","indices","valuesOffset","indicesOffset","startSparseTensor","addValues","addIndices","endSparseTensor","readFloat32","floatsLength","graphsLength","addFieldFloat32","sOffset","tOffset","gOffset","floatsOffset","addFloat32","intsOffset","stringsOffset","tensorsOffset","graphsOffset","startAttribute","addF","addI","addS","addT","addG","addFloats","addInts","addStrings","addTensors","addGraphs","endAttribute","maxNodeIndex","nodeEdges","nodeEdgesLength","sparseInitializers","sparseInitializersLength","initializersOffset","nodeArgsOffset","nodesOffset","nodeEdgesOffset","sparseInitializersOffset","startGraph","addInitializers","addNodeArgs","addNodes","addMaxNodeIndex","addNodeEdges","addSparseInitializers","endGraph","Model","producerName","producerVersion","modelVersion","graphDocString","opsetImportOffset","producerNameOffset","producerVersionOffset","graphOffset","graphDocStringOffset","startModel","addIrVersion","addOpsetImport","addProducerName","addProducerVersion","addModelVersion","addGraph","addGraphDocString","endModel","KernelCreateInfos","nodeIndices","nodeIndicesLength","nodeIndicesArray","kernelDefHashes","readUint64","kernelDefHashesLength","nodeIndicesOffset","kernelDefHashesOffset","startKernelCreateInfos","addNodeIndices","addKernelDefHashes","endKernelCreateInfos","SubGraphSessionState","graphId","sessionState","SessionState","graphIdOffset","sessionStateOffset","requiredField","startSubGraphSessionState","addGraphId","addSessionState","endSubGraphSessionState","kernels","subGraphSessionStates","subGraphSessionStatesLength","kernelsOffset","subGraphSessionStatesOffset","startSessionState","addKernels","addSubGraphSessionStates","endSessionState","__has_identifier","ortVersion","ortVersionOffset","modelOffset","startInferenceSession","addOrtVersion","addModel","endInferenceSession","outputNames","feeds","_fetches","_options","inputMap","feed","outputMap","startProfiling","endProfiling","_initialized","Profiler","create","graphInputTypes","graphInputDims","_model","arg","process","promisify","readFile","response","fetch","arrayBuffer","isView","modelProtoBlob","initializeOps","_executionPlan","ExecutionPlan","normalizeAndValidateInputs","outputTensors","execute","createOutput","modelInputNames","sortedInputs","sortedInputsIndex","validateInputTensorDims","modelInputIndices","modelValues","graphInput","validateInputTensorTypes","givenInputs","expectedType","actualType","noneDimSupported","expectedDims","actualDims","compareTensorDims","modelOutputNames","dataProvider","asyncDataProvider","_strides","Guid","validateDimsAndCalcSize","empty","RangeError","dataviewConstructor","sizeof","dataBuffer","createView","tensorProto","str","dataDest","dataSource","DataView","elementSize","sizeofProto","readProto","TensorProto","DataType","INT32","INT16","UINT16","INT8","UINT8","BOOL","int32Data","INT64","int64Data","DOUBLE","doubleData","UINT32","UINT64","uint64Data","element","ortTensor","BigInt64Array","greaterThanOrEqual","lessThan","toNumber","view","getUint8","getInt8","getUint16","getInt16","getFloat32","getInt32","getUint32","fromBits","getFloat64","expectedDimensions","expr","msg","n1","n2","MatMulUtil","dimsA","dimsB","adims","bdims","isMatMul","crank","cdims","cShapeMatMul","calcMatMulShape","aLen","bLen","broadcastedIndices","originalShape","originalIndices","fillIndex","inplace","resultType","outputIndices","originalIndicesA","originalIndicesB","rest","valA","valB","isAScalar","isBScalar","finalShape","finalRank","unshift","target","targetIndex","sourceIndex","blockSize","leftShape","transLeft","rightShape","transRight","biasShape","K","kDim","isValidBroadcast","typeProto","unsigned","Long","fromValue","low","high","getSizeFromDimensionRange","axisToIncrementOn","originalDims","shapeHints","nDims","unknownDimension","newTensorSize","oldTensorSize","pad","shape1","shape2","total","y","right","inSqueezeList","inputDimsIterator","determineSplit","numElementsAlongAxis","ReduceUtil","keepdims","calcReduceShape","inputStrides","indicesY","calcReduceByAxis","curAxisInd","pos","step","adjustPadAndReturnShape","computeShapeHelper","filterDims","inSize","padHeadIndex","padTailIndex","dkernel","padNeeded","TextDecoder","isProxy","proxyWorker","initWasmCallbacks","initOrtCallbacks","initializing","initialized","aborted","createSessionAllocateCallbacks","createSessionFinalizeCallbacks","createSessionCallbacks","releaseSessionCallbacks","runCallbacks","endProfilingCallbacks","ensureWorker","onProxyWorkerMessage","ev","out","scriptSrc","currentScript","wasmPaths","substr","lastIndexOf","terminate","onmessage","message","in","postMessage","initializeWebAssembly","initializeRuntime","core","initRuntime","createSessionAllocate","createSessionFinalize","modeldata","createSession","releaseSession","sessionId","inputIndices","extractTransferableBuffers","setRunOptions","getInstance","runOptionsHandle","allocs","runOptions","logSeverityLevel","logVerbosityLevel","tagDataOffset","tag","allocWasmString","_OrtCreateRunOptions","checkLastError","extra","iterateExtraOptions","WeakSet","keyDataOffset","valueDataOffset","_OrtAddRunConfigEntry","_OrtReleaseRunOptions","alloc","_free","runtimeInitialized","runtimeInitializationPromise","path","modelData","fetches","inputArray","entries","kvp","setSessionOptions","sessionOptionsHandle","sessionOptions","use_ort_model_bytes_directly","executionProviders","ep","enableMemPattern","appendDefaultOptions","graphOptimizationLevel","getGraphOptimzationLevel","executionMode","getExecutionMode","logIdDataOffset","logId","optimizedModelFilePathOffset","optimizedModelFilePath","_OrtCreateSessionOptions","enableCpuMemArena","enableProfiling","epName","webnnOptions","deviceType","_OrtAddSessionConfigEntry","powerPreference","epNameDataOffset","_OrtAppendExecutionProvider","setExecutionProviders","freeDimensionOverrides","_OrtAddFreeDimensionOverride","_OrtReleaseSessionOptions","tensorDataTypeStringToEnum","tensorDataTypeEnumToString","getTensorElementSize","dateType","tensorTypeToTypedArrayConstructor","BigUint64Array","logLevelStringToEnum","loggingLevel","_OrtInit","activeSessions","modelDataOffset","_malloc","HEAPU8","sessionHandle","inputNamesUTF8Encoded","outputNamesUTF8Encoded","_OrtCreateSession","outputCount","stackSave","dataOffset","stackAlloc","_OrtGetInputOutputCount","HEAP32","stackRestore","getSessionInputOutputCount","_OrtGetInputName","UTF8ToString","_OrtGetOutputName","_OrtFree","_OrtReleaseSession","runOptionsAllocs","inputValues","inputAllocs","dataByteLength","HEAPU32","dimIndex","_OrtCreateTensor","beforeRunStack","inputValuesOffset","inputNamesOffset","outputValuesOffset","outputNamesOffset","inputValuesIndex","inputNamesIndex","outputValuesIndex","outputNamesIndex","jsepOnRunStart","errorCode","_OrtRun","runPromise","jsepRunPromise","jsepOnRunEnd","beforeGetTensorDataStack","tensorDataOffset","_OrtGetTensorData","tensorDataIndex","maxBytesToRead","_OrtReleaseTensor","profileFileName","_OrtEndProfiling","buffers","ortWasmFactory","ortWasmFactoryThreaded","flags","timeout","useThreads","SharedArrayBuffer","MessageChannel","port1","WebAssembly","validate","isMultiThreadSupported","useSimd","isSimdSupported","wasmPrefixOverride","wasmFileName","getWasmFileName","wasmPathOverride","isTimeout","tasks","locateFile","fileName","scriptDirectory","Blob","URL","createObjectURL","mainScriptUrlOrBlob","__dirname","scriptSourceCode","what","race","PThread","terminateAllThreads","dataLength","lengthBytesUTF8","stringToUTF8","prefix","seen","paramsOffset","_OrtGetLastError","errorMessagePointer","errorMessage","Worker_fn","workerConstructor","workerOptions","url","globalScope","window","blob","BlobBuilder","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","append","getBlob","webkitURL","objectURL","worker","revokeObjectURL","encodeURIComponent","valuesById","$protobuf","$Reader","Reader","$Writer","Writer","$util","util","$root","roots","Version","properties","sparseTensors","typeProtos","prototype","refAttrName","newBuffer","sparseTensor","tp","emptyArray","writer","uint32","string","float","int64","fork","ldelim","TypeProto","int32","SparseTensorProto","encodeDelimited","reader","end2","skipType","decodeDelimited","verify","isString","fromObject","object","String","LongBits","base64","toObject","arrays","defaults","long","longs","enums","json","isFinite","toJSON","toJSONOptions","getTypeUrl","typeUrlPrefix","ValueInfoProto","TrainingInfoProto","initializationBinding","updateBinding","initialization","algorithm","StringStringEntryProto","metadataProps","trainingInfo","functions","OperatorSetIdProto","FunctionProto","TensorAnnotation","quantParameterTensorNames","tensorName","sparseInitializer","quantizationAnnotation","externalData","segment","dataLocation","Segment","double","uint64","DataLocation","TensorShapeProto","$oneOfFields","oneOfGetter","oneOfSetter","oneofs","sequenceType","mapType","optionalType","sparseTensorType","Sequence","Optional","OperatorStatus","attributeProto","_scriptDir","__filename","F","W","Y","H","P","u","ready","l","h","m","importScripts","ENVIRONMENT_IS_PTHREAD","O","dirname","startsWith","normalize","readFileSync","thisProgram","argv","exitCode","inspect","global","Worker","href","XMLHttpRequest","open","send","responseText","responseType","onload","onerror","T","writeSync","S","A","print","E","printErr","quit","wasmBinary","R","noExitRuntime","ee","I","U","HEAP8","HEAP16","HEAPU16","HEAPF32","HEAPF64","G","INITIAL_MEMORY","wasmMemory","Memory","initial","maximum","shared","L","z","q","J","$","V","Z","monitorRunDependencies","Q","clearInterval","onAbort","RuntimeError","te","re","ne","credentials","ok","catch","instantiate","ae","oe","ie","he","Fa","ue","Za","Ia","Ha","cmd","start_routine","gb","Ya","pthread_ptr","unref","mb","se","fe","fromCharCode","ce","le","qe","hb","onExit","de","pe","La","Ta","Pa","ab","$a","receiveObjectTransfer","eb","threadInitTLS","Sa","setExitStatus","Ra","rb","pt","cb","targetThread","ct","qb","transferList","Ue","thread","loaded","alert","threadId","text","args","filename","lineno","on","handlers","urlOrBlob","wasmModule","Xa","me","establishStackSpace","_t","wt","ge","be","Oa","Wa","Va","Ua","ve","_e","ob","ye","we","invokeEntryPoint","gt","Oe","charCodeAt","Me","Te","Se","Ae","Ee","Re","Fe","De","Ce","Ie","ke","xe","Ye","He","Pe","Atomics","nb","store","bt","__emscripten_thread_mailbox_await","checkMailbox","We","Ge","Ne","Le","je","ze","lt","Be","yt","arguments","Ot","mt","Je","Ke","Xe","$e","USER","LOGNAME","PATH","PWD","HOME","LANG","languages","Ve","Ze","Qe","et","tt","rt","nt","at","ot","it","ut","getFullYear","getMonth","getDate","getDay","Ja","Ka","getTime","setDate","setMonth","setFullYear","kb","jb","Ma","Qa","Na","Ga","sb","ib","lb","includes","st","ft","dt","ref","NaN","getUTCSeconds","getUTCMinutes","getUTCHours","getUTCDate","getUTCMonth","getUTCFullYear","getUTCDay","UTC","getSeconds","getMinutes","getHours","getTimezoneOffset","setTime","getYear","vt","toTimeString","timeOrigin","pb","apply","grow","__errno_location","pthread_self","malloc","sa","ta","instantiateWasm","instantiateStreaming","instance","aa","ba","da","ea","fa","ga","ha","ia","ja","ka","la","ma","na","oa","_pthread_self","pa","qa","ra","__emscripten_tls_init","__emscripten_thread_init","ua","__emscripten_thread_crashed","va","ht","wa","xa","__emscripten_thread_exit","ya","__emscripten_check_mailbox","za","Aa","Ba","Ca","Da","Ea","Mt","calledRun","onRuntimeInitialized","postRun","startWorker","preRun","setStatus","keepRuntimeAlive","ExitStatus","preInit","ortWasm","moduleArg","fs","HEAP64","HEAPU64","fromWireType","globalThis","Function","tb","ub","vb","wb","xb","zb","db","yb","Ab","Bb","BindingError","InternalError","count_emval_handles","Cb","toWireType","argPackAdvance","readValueFromPointer","Uint8ClampedArray","deleteObject","BigInt","copyWithin","__embind_initialize_bindings","Gb","Db","Eb","Fb","Ib","Hb","fn","pending","b64","s64","parts","chunk","invalidEncoding","test","EventEmitter","_listeners","evt","off","listeners","emit","f32","f8b","writeFloat_f32_cpy","writeFloat_f32_rev","readFloat_f32_cpy","readFloat_f32_rev","writeFloatLE","writeFloatBE","readFloatLE","readFloatBE","writeFloat_ieee754","writeUint","sign","round","exponent","LN2","readFloat_ieee754","readUint","uint","mantissa","Infinity","writeUintLE","writeUintBE","readUintLE","readUintBE","f64","writeDouble_f64_cpy","writeDouble_f64_rev","readDouble_f64_cpy","readDouble_f64_rev","writeDoubleLE","writeDoubleBE","readDoubleLE","readDoubleBE","writeDouble_ieee754","off0","off1","readDouble_ieee754","lo","hi","inquire","moduleName","mod","eval","SIZE","MAX","slab","utf8","read","write","c1","c2","__esModule","guid","EMPTY","isGuid","validator","gen","createEmpty","raw","random","equals","other","isEmpty","protobuf","configure","_configure","BufferWriter","BufferReader","rpc","indexOutOfRange","writeLength","create_array","Buffer","isBuffer","readLongVarint","bits","readFixed32_end","readFixed64","_slice","sint32","bool","fixed32","sfixed32","skip","wireType","BufferReader_","merge","sint64","zzDecode","fixed64","sfixed64","utf8Slice","Service","rpcImpl","requestDelimited","responseDelimited","Boolean","rpcCall","method","requestCtor","responseCtor","request","callback","asPromise","endedByRPC","zero","zzEncode","zeroHash","fromNumber","fromString","toLong","fromHash","hash","toHash","mask","part0","part1","part2","dst","ifNotSet","newError","CustomError","captureStackTrace","writable","configurable","pool","isNode","freeze","emptyObject","isObject","isset","isSet","prop","utf8Write","_Buffer_from","_Buffer_allocUnsafe","sizeOrArray","dcodeIO","key2Re","key32Re","key64Re","longToHash","longFromHash","lcFirst","toLowerCase","ProtocolError","fieldNames","fieldMap","encoding","allocUnsafe","Op","noop","State","states","writeByte","VarintOp","writeVarint64","writeFixed32","_push","writeBytes","BufferWriter_","writeStringBuffer","writeBytesBuffer","copy","default","Instance","Module","ctz32","clz32","__isLong__","INT_CACHE","UINT_CACHE","fromInt","cachedObj","UZERO","ZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","MAX_VALUE","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","radix","radixToPower","power","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","eq","radixLong","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","notEquals","neq","comp","lessThanOrEqual","lte","greaterThan","gte","compare","thisNeg","otherNeg","negate","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","b00","divide","divisor","approx","toUnsigned","shru","shr","shl","log2","delta","approxRes","approxRem","modulo","countLeadingZeros","clz","countTrailingZeros","ctz","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","rotateLeft","rotl","rotateRight","rotr","toSigned","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","_default","Offset","Table","SIZEOF_SHORT","SIZEOF_INT","FILE_IDENTIFIER_LENGTH","Encoding","UTF8_BYTES","UTF16_STRING","float32","float64","toFloat64","Builder","opt_initial_size","initial_size","space","minalign","vtable","vtable_in_use","isNested","object_start","vtables","vector_num_elems","force_defaults","clear","capacity","forceDefaults","asUint8Array","additional_bytes","align_size","old_buf_size","growByteBuffer","byte_size","writeInt8","writeInt16","writeInt64","writeFloat32","writeFloat64","addInt16","addFloat64","voffset","slot","addFieldInt16","addFieldFloat64","addFieldStruct","nested","notNested","new_buf_size","nbb","numfields","vtableloc","trimmed_size","existing_vtable","vt1","outer_loop","vt2","readInt16","root_table","opt_file_identifier","opt_size_prefix","size_prefix","file_identifier","finishSizePrefixed","table","field","table_start","vtable_start","elem_size","num_elems","alignment","createString","codePoint","bytes_","position_","readUint16","readFloat64","writeUint8","writeUint16","writeUint32","writeUint64","getBufferIdentifier","vtable_offset","opt_encoding","ident","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","getter","definition","Symbol","toStringTag","__webpack_exports__"],"sourceRoot":""}