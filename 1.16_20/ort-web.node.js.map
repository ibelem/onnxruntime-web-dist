{"version":3,"file":"ort-web.node.js","mappings":"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AK,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,IAAK,IAAK,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,EAAG,EAAG,GAAI,IAAK,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EA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","sources":["webpack://onnxruntime-web/./lib/backend-onnxjs.ts","webpack://onnxruntime-web/./lib/backend-wasm.ts","webpack://onnxruntime-web/./lib/index.ts","webpack://onnxruntime-web/./lib/onnxjs/attribute-with-cache-key.ts","webpack://onnxruntime-web/./lib/onnxjs/attribute.ts","webpack://onnxruntime-web/./lib/onnxjs/backend.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/backend-webgl.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-coordinate-lib.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-definitions.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-encoding-lib.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-fragcolor-lib.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-function-inliner.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-preprocessor.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-registered-libs.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-shape-utils-lib.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-source.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-vec-lib.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/inference-handler.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/op-resolve-rules.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/batch-normalization.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/binary-op.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/cast.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/concat-packed.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/concat.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/conv-grouped.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/conv-pack.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/conv-transpose.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/conv.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/depth-to-space.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/dot-product.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/flatten.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/fuse-utils.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/gather.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/gemm.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/im2col-pack.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/im2col.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/image-scaler.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/instance-normalization.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/lrn.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/matmul-pack.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/matmul.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/pack.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/packing-utils.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/pad.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/pool.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/reduce.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/reshape-packed.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/reshape.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/resize-packed.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/shape.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/slice.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/softmax.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/split.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/squeeze.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/sum.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/tile.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/transpose.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/uint8-encode.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/unary-op.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/unpack.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/unsqueeze.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/upsample.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/program-manager.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/session-handler.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/texture-data-encoder.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/texture-layout-strategy.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/texture-layout.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/texture-manager.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/types.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/utils.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/webgl-context-factory.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/webgl-context.ts","webpack://onnxruntime-web/./lib/onnxjs/execution-plan.ts","webpack://onnxruntime-web/./lib/onnxjs/graph.ts","webpack://onnxruntime-web/./lib/onnxjs/instrument.ts","webpack://onnxruntime-web/./lib/onnxjs/model.ts","webpack://onnxruntime-web/./lib/onnxjs/operators.ts","webpack://onnxruntime-web/./lib/onnxjs/opset.ts","webpack://onnxruntime-web/./lib/onnxjs/ort-schema/flatbuffers/ort-generated.ts","webpack://onnxruntime-web/./lib/onnxjs/session-handler.ts","webpack://onnxruntime-web/./lib/onnxjs/session.ts","webpack://onnxruntime-web/./lib/onnxjs/tensor.ts","webpack://onnxruntime-web/./lib/onnxjs/util.ts","webpack://onnxruntime-web/./lib/version.ts","webpack://onnxruntime-web/./lib/wasm/proxy-wrapper.ts","webpack://onnxruntime-web/./lib/wasm/run-options.ts","webpack://onnxruntime-web/./lib/wasm/session-handler.ts","webpack://onnxruntime-web/./lib/wasm/session-options.ts","webpack://onnxruntime-web/./lib/wasm/wasm-common.ts","webpack://onnxruntime-web/./lib/wasm/wasm-core-impl.ts","webpack://onnxruntime-web/./lib/wasm/wasm-factory.ts","webpack://onnxruntime-web/./lib/wasm/wasm-utils.ts","webpack://onnxruntime-web/./lib/wasm/proxy-worker/main.ts","webpack://onnxruntime-web/../node_modules/worker-loader/dist/runtime/inline.js","webpack://onnxruntime-web/./lib/onnxjs/ort-schema/protobuf/onnx.js","webpack://onnxruntime-web/./lib/wasm/binding/ort-wasm-threaded.min.js","webpack://onnxruntime-web/./lib/wasm/binding/ort-wasm.js","webpack://onnxruntime-web/./node_modules/@protobufjs/aspromise/index.js","webpack://onnxruntime-web/./node_modules/@protobufjs/base64/index.js","webpack://onnxruntime-web/./node_modules/@protobufjs/eventemitter/index.js","webpack://onnxruntime-web/./node_modules/@protobufjs/float/index.js","webpack://onnxruntime-web/./node_modules/@protobufjs/inquire/index.js","webpack://onnxruntime-web/./node_modules/@protobufjs/pool/index.js","webpack://onnxruntime-web/./node_modules/@protobufjs/utf8/index.js","webpack://onnxruntime-web/./node_modules/guid-typescript/dist/guid.js","webpack://onnxruntime-web/./node_modules/protobufjs/minimal.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/index-minimal.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/reader.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/reader_buffer.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/roots.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/rpc.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/rpc/service.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/util/longbits.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/util/minimal.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/writer.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/writer_buffer.js","webpack://onnxruntime-web/external commonjs \"fs\"","webpack://onnxruntime-web/external commonjs \"os\"","webpack://onnxruntime-web/external commonjs \"path\"","webpack://onnxruntime-web/external commonjs \"perf_hooks\"","webpack://onnxruntime-web/external commonjs \"util\"","webpack://onnxruntime-web/external commonjs \"worker_threads\"","webpack://onnxruntime-web/external commonjs {\"commonjs\":\"onnxruntime-common\",\"commonjs2\":\"onnxruntime-common\",\"root\":\"ort\"}","webpack://onnxruntime-web/./node_modules/long/umd/index.js","webpack://onnxruntime-web/./node_modules/flatbuffers/js/flatbuffers.mjs","webpack://onnxruntime-web/webpack/bootstrap","webpack://onnxruntime-web/webpack/runtime/compat get default export","webpack://onnxruntime-web/webpack/runtime/define property getters","webpack://onnxruntime-web/webpack/runtime/hasOwnProperty shorthand","webpack://onnxruntime-web/webpack/runtime/make namespace object","webpack://onnxruntime-web/webpack/startup"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/* eslint-disable import/no-internal-modules */\nimport {Backend, InferenceSession, SessionHandler} from 'onnxruntime-common';\n\nimport {Session} from './onnxjs/session';\nimport {OnnxjsSessionHandler} from './onnxjs/session-handler';\n\nclass OnnxjsBackend implements Backend {\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  async init(): Promise<void> {}\n\n  async createSessionHandler(pathOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions):\n      Promise<SessionHandler> {\n    // NOTE: Session.Config(from onnx.js) is not compatible with InferenceSession.SessionOptions(from\n    // onnxruntime-common).\n    //       In future we should remove Session.Config and use InferenceSession.SessionOptions.\n    //       Currently we allow this to happen to make test runner work.\n    const session = new Session(options as unknown as Session.Config);\n\n    // typescript cannot merge method override correctly (so far in 4.2.3). need if-else to call the method.\n    if (typeof pathOrBuffer === 'string') {\n      await session.loadModel(pathOrBuffer);\n    } else {\n      await session.loadModel(pathOrBuffer);\n    }\n\n    return new OnnxjsSessionHandler(session);\n  }\n}\n\nexport const onnxjsBackend = new OnnxjsBackend();\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Backend, env, InferenceSession, SessionHandler} from 'onnxruntime-common';\nimport {cpus} from 'os';\n\nimport {initializeWebAssemblyInstance} from './wasm/proxy-wrapper';\nimport {OnnxruntimeWebAssemblySessionHandler} from './wasm/session-handler';\n\n/**\n * This function initializes all flags for WebAssembly.\n *\n * Those flags are accessible from `ort.env.wasm`. Users are allow to set those flags before the first inference session\n * being created, to override default value.\n */\nexport const initializeFlags = (): void => {\n  if (typeof env.wasm.initTimeout !== 'number' || env.wasm.initTimeout < 0) {\n    env.wasm.initTimeout = 0;\n  }\n\n  if (typeof env.wasm.simd !== 'boolean') {\n    env.wasm.simd = true;\n  }\n\n  if (typeof env.wasm.proxy !== 'boolean') {\n    env.wasm.proxy = false;\n  }\n\n  if (typeof env.wasm.numThreads !== 'number' || !Number.isInteger(env.wasm.numThreads) || env.wasm.numThreads <= 0) {\n    const numCpuLogicalCores = typeof navigator === 'undefined' ? cpus().length : navigator.hardwareConcurrency;\n    env.wasm.numThreads = Math.min(4, Math.ceil((numCpuLogicalCores || 1) / 2));\n  }\n};\n\nclass OnnxruntimeWebAssemblyBackend implements Backend {\n  async init(): Promise<void> {\n    // populate wasm flags\n    initializeFlags();\n\n    // init wasm\n    await initializeWebAssemblyInstance();\n  }\n  createSessionHandler(path: string, options?: InferenceSession.SessionOptions): Promise<SessionHandler>;\n  createSessionHandler(buffer: Uint8Array, options?: InferenceSession.SessionOptions): Promise<SessionHandler>;\n  async createSessionHandler(pathOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions):\n      Promise<SessionHandler> {\n    const handler = new OnnxruntimeWebAssemblySessionHandler();\n    await handler.loadModel(pathOrBuffer, options);\n    return Promise.resolve(handler);\n  }\n}\n\nexport const wasmBackend = new OnnxruntimeWebAssemblyBackend();\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/* eslint-disable @typescript-eslint/no-var-requires, @typescript-eslint/no-require-imports */\n// We use \"require\" instead of \"import\" here because import statement must be put in top level. Our current code does\n// not allow terser to tree-shaking code as expected because some codes are treated as having side effects.\n// So we import code inside the if-clause to allow terser remove the code safely.\n\nexport * from 'onnxruntime-common';\nimport {registerBackend, env} from 'onnxruntime-common';\nimport {version} from './version';\n\nif (!BUILD_DEFS.DISABLE_WEBGL) {\n  const onnxjsBackend = require('./backend-onnxjs').onnxjsBackend;\n  registerBackend('webgl', onnxjsBackend, -10);\n}\n\nif (!BUILD_DEFS.DISABLE_WASM) {\n  const wasmBackend = require('./backend-wasm').wasmBackend;\n  if (!BUILD_DEFS.DISABLE_WEBGPU && typeof navigator !== 'undefined' && navigator.gpu) {\n    registerBackend('webgpu', wasmBackend, 5);\n  }\n  registerBackend('cpu', wasmBackend, 10);\n  registerBackend('wasm', wasmBackend, 10);\n  registerBackend('xnnpack', wasmBackend, 9);\n  if (!BUILD_DEFS.DISABLE_WEBNN) {\n    registerBackend('webnn', wasmBackend, 9);\n  }\n}\n\nObject.defineProperty(env.versions, 'web', {value: version, enumerable: true});\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nclass AttributeWithCacheKeyImpl {\n  constructor(attribute: Record<string, unknown>) {\n    Object.assign(this, attribute);\n  }\n\n  private _cacheKey: string;\n  public get cacheKey(): string {\n    if (!this._cacheKey) {\n      this._cacheKey =\n          Object.getOwnPropertyNames(this).sort().map(name => `${(this as Record<string, unknown>)[name]}`).join(';');\n    }\n    return this._cacheKey;\n  }\n}\n\nexport interface AttributeWithCacheKey {\n  readonly cacheKey: string;\n}\n\nexport const createAttributeWithCacheKey = <T extends Record<string, unknown>>(attribute: T): T&AttributeWithCacheKey =>\n    new AttributeWithCacheKeyImpl(attribute) as unknown as T & AttributeWithCacheKey;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport Long from 'long';\n\nimport {onnxruntime} from './ort-schema/flatbuffers/ort-generated';\nimport {onnx} from './ort-schema/protobuf/onnx';\nimport {Tensor} from './tensor';\nimport {decodeUtf8String, LongUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport declare namespace Attribute {\n  export interface DataTypeMap {\n    float: number;\n    int: number;\n    string: string;\n    tensor: Tensor;\n    floats: number[];\n    ints: number[];\n    strings: string[];\n    tensors: Tensor[];\n  }\n\n  export type DataType = keyof DataTypeMap;\n}\n\ntype ValueTypes = Attribute.DataTypeMap[Attribute.DataType];\n\ntype Value = [ValueTypes, Attribute.DataType];\n\nexport class Attribute {\n  constructor(attributes: onnx.IAttributeProto[]|ortFbs.Attribute[]|null|undefined) {\n    this._attributes = new Map();\n    if (attributes !== null && attributes !== undefined) {\n      for (const attr of attributes) {\n        if (attr instanceof onnx.AttributeProto) {\n          this._attributes.set(attr.name, [Attribute.getValue(attr), Attribute.getType(attr)]);\n        } else if (attr instanceof ortFbs.Attribute) {\n          this._attributes.set(attr.name()!, [Attribute.getValue(attr), Attribute.getType(attr)]);\n        }\n      }\n      if (this._attributes.size < attributes.length) {\n        throw new Error('duplicated attribute names');\n      }\n    }\n  }\n\n  set(key: string, type: Attribute.DataType, value: ValueTypes): void {\n    this._attributes.set(key, [value, type]);\n  }\n  delete(key: string): void {\n    this._attributes.delete(key);\n  }\n  getFloat(key: string, defaultValue?: Attribute.DataTypeMap['float']) {\n    return this.get(key, 'float', defaultValue);\n  }\n\n  getInt(key: string, defaultValue?: Attribute.DataTypeMap['int']) {\n    return this.get(key, 'int', defaultValue);\n  }\n\n  getString(key: string, defaultValue?: Attribute.DataTypeMap['string']) {\n    return this.get(key, 'string', defaultValue);\n  }\n\n  getTensor(key: string, defaultValue?: Attribute.DataTypeMap['tensor']) {\n    return this.get(key, 'tensor', defaultValue);\n  }\n\n  getFloats(key: string, defaultValue?: Attribute.DataTypeMap['floats']) {\n    return this.get(key, 'floats', defaultValue);\n  }\n\n  getInts(key: string, defaultValue?: Attribute.DataTypeMap['ints']) {\n    return this.get(key, 'ints', defaultValue);\n  }\n\n  getStrings(key: string, defaultValue?: Attribute.DataTypeMap['strings']) {\n    return this.get(key, 'strings', defaultValue);\n  }\n\n  getTensors(key: string, defaultValue?: Attribute.DataTypeMap['tensors']) {\n    return this.get(key, 'tensors', defaultValue);\n  }\n\n  private get<V extends Attribute.DataTypeMap[Attribute.DataType]>(\n      key: string, type: Attribute.DataType, defaultValue?: V): V {\n    const valueAndType = this._attributes.get(key);\n    if (valueAndType === undefined) {\n      if (defaultValue !== undefined) {\n        return defaultValue;\n      }\n      throw new Error(`required attribute not found: ${key}`);\n    }\n    if (valueAndType[1] !== type) {\n      throw new Error(`type mismatch: expected ${type} but got ${valueAndType[1]}`);\n    }\n    return valueAndType[0] as V;\n  }\n\n  private static getType(attr: onnx.IAttributeProto|ortFbs.Attribute): Attribute.DataType {\n    const type = attr instanceof onnx.AttributeProto ? (attr).type : (attr as ortFbs.Attribute).type();\n    switch (type) {\n      case onnx.AttributeProto.AttributeType.FLOAT:\n        return 'float';\n      case onnx.AttributeProto.AttributeType.INT:\n        return 'int';\n      case onnx.AttributeProto.AttributeType.STRING:\n        return 'string';\n      case onnx.AttributeProto.AttributeType.TENSOR:\n        return 'tensor';\n      case onnx.AttributeProto.AttributeType.FLOATS:\n        return 'floats';\n      case onnx.AttributeProto.AttributeType.INTS:\n        return 'ints';\n      case onnx.AttributeProto.AttributeType.STRINGS:\n        return 'strings';\n      case onnx.AttributeProto.AttributeType.TENSORS:\n        return 'tensors';\n      default:\n        throw new Error(`attribute type is not supported yet: ${onnx.AttributeProto.AttributeType[type]}`);\n    }\n  }\n\n  private static getValue(attr: onnx.IAttributeProto|ortFbs.Attribute) {\n    const attrType = attr instanceof onnx.AttributeProto ? attr.type : (attr as ortFbs.Attribute).type();\n    if (attrType === onnx.AttributeProto.AttributeType.GRAPH || attrType === onnx.AttributeProto.AttributeType.GRAPHS) {\n      throw new Error('graph attribute is not supported yet');\n    }\n\n    const value = this.getValueNoCheck(attr);\n\n    // cast LONG to number\n    if (attrType === onnx.AttributeProto.AttributeType.INT && LongUtil.isLong(value)) {\n      return LongUtil.longToNumber(value as Long | flatbuffers.Long);\n    }\n\n    // cast LONG[] to number[]\n    if (attrType === onnx.AttributeProto.AttributeType.INTS) {\n      const arr = (value as Array<number|Long|flatbuffers.Long>);\n      const numberValue: number[] = new Array<number>(arr.length);\n\n      for (let i = 0; i < arr.length; i++) {\n        const maybeLong = arr[i];\n        numberValue[i] = LongUtil.longToNumber(maybeLong);\n      }\n\n      return numberValue;\n    }\n\n    // cast onnx.TensorProto to onnxjs.Tensor\n    if (attrType === onnx.AttributeProto.AttributeType.TENSOR) {\n      return attr instanceof onnx.AttributeProto ? Tensor.fromProto(value as onnx.ITensorProto) :\n                                                   Tensor.fromOrtTensor(value as ortFbs.Tensor);\n    }\n\n    // cast onnx.TensorProto[] to onnxjs.Tensor[]\n    if (attrType === onnx.AttributeProto.AttributeType.TENSORS) {\n      if (attr instanceof onnx.AttributeProto) {\n        const tensorProtos = value as onnx.ITensorProto[];\n        return tensorProtos.map(value => Tensor.fromProto(value));\n      } else if (attr instanceof ortFbs.Attribute) {\n        const tensorProtos = value as ortFbs.Tensor[];\n        return tensorProtos.map(value => Tensor.fromOrtTensor(value));\n      }\n    }\n\n    // cast Uint8Array to string\n    if (attrType === onnx.AttributeProto.AttributeType.STRING) {\n      // string in onnx attribute is of uint8array type, so we need to convert it to string below. While in ort format,\n      // string attributes are returned as string, so no conversion is needed.\n      if (attr instanceof onnx.AttributeProto) {\n        const utf8String = value as Uint8Array;\n        return decodeUtf8String(utf8String);\n      }\n    }\n\n    // cast Uint8Array[] to string[]\n    if (attrType === onnx.AttributeProto.AttributeType.STRINGS) {\n      // strings in onnx attribute is returned as uint8array[], so we need to convert it to string[] below. While in ort\n      // format strings attributes are returned as string[], so no conversion is needed.\n      if (attr instanceof onnx.AttributeProto) {\n        const utf8Strings = value as Uint8Array[];\n        return utf8Strings.map(decodeUtf8String);\n      }\n    }\n\n    return value as ValueTypes;\n  }\n\n  private static getValueNoCheck(attr: onnx.IAttributeProto|ortFbs.Attribute) {\n    return attr instanceof (onnx.AttributeProto) ? this.getValueNoCheckFromOnnxFormat(attr) :\n                                                   this.getValueNoCheckFromOrtFormat(attr as ortFbs.Attribute);\n  }\n\n  private static getValueNoCheckFromOnnxFormat(attr: onnx.IAttributeProto) {\n    switch (attr.type!) {\n      case onnx.AttributeProto.AttributeType.FLOAT:\n        return attr.f;\n      case onnx.AttributeProto.AttributeType.INT:\n        return attr.i;\n      case onnx.AttributeProto.AttributeType.STRING:\n        return attr.s;\n      case onnx.AttributeProto.AttributeType.TENSOR:\n        return attr.t;\n      case onnx.AttributeProto.AttributeType.GRAPH:\n        return attr.g;\n      case onnx.AttributeProto.AttributeType.FLOATS:\n        return attr.floats;\n      case onnx.AttributeProto.AttributeType.INTS:\n        return attr.ints;\n      case onnx.AttributeProto.AttributeType.STRINGS:\n        return attr.strings;\n      case onnx.AttributeProto.AttributeType.TENSORS:\n        return attr.tensors;\n      case onnx.AttributeProto.AttributeType.GRAPHS:\n        return attr.graphs;\n      default:\n        throw new Error(`unsupported attribute type: ${onnx.AttributeProto.AttributeType[attr.type!]}`);\n    }\n  }\n\n  private static getValueNoCheckFromOrtFormat(attr: ortFbs.Attribute) {\n    switch (attr.type()) {\n      case ortFbs.AttributeType.FLOAT:\n        return attr.f();\n      case ortFbs.AttributeType.INT:\n        return attr.i();\n      case ortFbs.AttributeType.STRING:\n        return attr.s();\n      case ortFbs.AttributeType.TENSOR:\n        return attr.t();\n      case ortFbs.AttributeType.GRAPH:\n        return attr.g();\n      case ortFbs.AttributeType.FLOATS:\n        return attr.floatsArray();\n      case ortFbs.AttributeType.INTS: {\n        const ints = [];\n        for (let i = 0; i < attr.intsLength(); i++) {\n          ints.push(attr.ints(i)!);\n        }\n        return ints;\n      }\n      case ortFbs.AttributeType.STRINGS: {\n        const strings = [];\n        for (let i = 0; i < attr.stringsLength(); i++) {\n          strings.push(attr.strings(i));\n        }\n        return strings;\n      }\n      case ortFbs.AttributeType.TENSORS: {\n        const tensors = [];\n        for (let i = 0; i < attr.tensorsLength(); i++) {\n          tensors.push(attr.tensors(i)!);\n        }\n        return tensors;\n      }\n      // case ortFbs.AttributeType.GRAPHS:\n      // TODO: Subgraph not supported yet.\n      // const graphs = [];\n      // for (let i = 0; i < attr.graphsLength(); i++) {\n      //   graphs.push(attr.graphs(i)!);\n      // }\n      // return graphs;\n      default:\n        throw new Error(`unsupported attribute type: ${ortFbs.AttributeType[attr.type()]}`);\n    }\n  }\n\n  protected _attributes: Map<string, Value>;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {WebGLBackend} from './backends/backend-webgl';\nimport {Graph} from './graph';\nimport {Operator} from './operators';\nimport {OpSet} from './opset';\nimport {Session} from './session';\n\nexport interface InferenceHandler {\n  /**\n   * dispose the inference handler. it will be called as the last step in Session.run()\n   */\n  dispose(): void;\n}\n\nexport interface SessionHandler {\n  /**\n   * transform the graph at initialization time\n   * @param graphTransformer the graph transformer to manipulate the model graph\n   */\n  transformGraph?(graphTransformer: Graph.Transformer): void;\n\n  /**\n   * create an instance of InferenceHandler to use in a Session.run() call\n   */\n  createInferenceHandler(): InferenceHandler;\n\n  /**\n   * dispose the session handler. it will be called when a session is being disposed explicitly\n   */\n  dispose(): void;\n\n  /**\n   * Resolves the operator from the name and opset version; backend specific\n   * @param node the node to resolve\n   * @param opsets a list of opsets that exported from the model\n   * @param graph the completely initialized graph\n   */\n  resolve(node: Graph.Node, opsets: readonly OpSet[], graph: Graph): Operator;\n\n  /**\n   * This method let's the sessionHandler know that the graph initialization is complete\n   * @param graph the completely initialized graph\n   */\n  onGraphInitialized?(graph: Graph): void;\n\n  /**\n   * a reference to the corresponding backend\n   */\n  readonly backend: Backend;\n\n  /**\n   * a reference to the session context\n   */\n  readonly context: Session.Context;\n}\n\nexport interface Backend {\n  /**\n   * initialize the backend. will be called only once, when the first time the\n   * backend it to be used\n   */\n  initialize(): boolean|Promise<boolean>;\n\n  /**\n   * create an instance of SessionHandler to use in a Session object's lifecycle\n   */\n  createSessionHandler(context: Session.Context): SessionHandler;\n\n  /**\n   * dispose the backend. currently this will not be called\n   */\n  dispose(): void;\n}\n\n// caches all initialized backend instances\nconst backendsCache: Map<string, Backend> = new Map();\n\nexport const backend: {[name: string]: Backend} = {\n  webgl: new WebGLBackend()\n};\n\n/**\n * Resolve a reference to the backend. If a hint is specified, the corresponding\n * backend will be used.\n */\nexport async function resolveBackend(hint?: string|readonly string[]): Promise<Backend> {\n  if (!hint) {\n    return resolveBackend(['webgl']);\n  } else {\n    const hints = typeof hint === 'string' ? [hint] : hint;\n\n    for (const backendHint of hints) {\n      const cache = backendsCache.get(backendHint);\n      if (cache) {\n        return cache;\n      }\n\n      const backend = await tryLoadBackend(backendHint);\n      if (backend) {\n        return backend;\n      }\n    }\n  }\n\n  throw new Error('no available backend to use');\n}\n\nasync function tryLoadBackend(backendHint: string): Promise<Backend|undefined> {\n  const backendObj = backend;\n\n  if (typeof backendObj[backendHint] !== 'undefined' && isBackend(backendObj[backendHint])) {\n    const backend = backendObj[backendHint];\n    let init = backend.initialize();\n    if (typeof init === 'object' && 'then' in init) {\n      init = await init;\n    }\n    if (init) {\n      backendsCache.set(backendHint, backend);\n      return backend;\n    }\n  }\n\n  return undefined;\n}\n\nfunction isBackend(obj: unknown) {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const o = obj as any;\n\n  // check if an object is a Backend instance\n  if (\n      'initialize' in o && typeof o.initialize === 'function' &&                      // initialize()\n      'createSessionHandler' in o && typeof o.createSessionHandler === 'function' &&  // createSessionHandler()\n      'dispose' in o && typeof o.dispose === 'function'                               // dispose()\n  ) {\n    return true;\n  }\n\n  return false;\n}\n\nexport type BackendType = Backend;\nexport type SessionHandlerType = ReturnType<BackendType['createSessionHandler']>;\nexport type InferenceHandlerType = ReturnType<SessionHandlerType['createInferenceHandler']>;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\n\nimport {Backend, SessionHandler} from '../backend';\nimport {Logger} from '../instrument';\nimport {Session} from '../session';\n\nimport {WebGLSessionHandler} from './webgl/session-handler';\nimport {WebGLContext} from './webgl/webgl-context';\nimport {createWebGLContext} from './webgl/webgl-context-factory';\n\n/**\n * WebGLBackend is the entry point for all WebGL opeartions\n * When it starts it created the WebGLRenderingContext\n * and other main framework components such as Program and Texture Managers\n */\nexport class WebGLBackend implements Backend {\n  glContext: WebGLContext;\n\n  get contextId(): 'webgl'|'webgl2'|undefined {\n    return env.webgl.contextId;\n  }\n  set contextId(value: 'webgl'|'webgl2'|undefined) {\n    env.webgl.contextId = value;\n  }\n\n  get matmulMaxBatchSize(): number|undefined {\n    return env.webgl.matmulMaxBatchSize;\n  }\n  set matmulMaxBatchSize(value: number|undefined) {\n    env.webgl.matmulMaxBatchSize = value;\n  }\n\n  get textureCacheMode(): 'initializerOnly'|'full'|undefined {\n    return env.webgl.textureCacheMode;\n  }\n  set textureCacheMode(value: 'initializerOnly'|'full'|undefined) {\n    env.webgl.textureCacheMode = value;\n  }\n\n  get pack(): boolean|undefined {\n    return env.webgl.pack;\n  }\n  set pack(value: boolean|undefined) {\n    env.webgl.pack = value;\n  }\n\n  get async(): boolean|undefined {\n    return env.webgl.async;\n  }\n  set async(value: boolean|undefined) {\n    env.webgl.async = value;\n  }\n\n  initialize(): boolean {\n    try {\n      this.glContext = createWebGLContext(this.contextId);\n      if (typeof this.matmulMaxBatchSize !== 'number') {\n        this.matmulMaxBatchSize = 16;\n      }\n      if (typeof this.textureCacheMode !== 'string') {\n        this.textureCacheMode = 'full';\n      }\n      if (typeof this.pack !== 'boolean') {\n        this.pack = false;\n      }\n      if (typeof this.async !== 'boolean') {\n        this.async = false;\n      }\n\n      Logger.setWithEnv(env);\n\n      Object.defineProperty(env.webgl, 'context', {value: this.glContext.gl});\n\n      Logger.verbose(\n          'WebGLBackend',\n          `Created WebGLContext: ${typeof this.glContext} with matmulMaxBatchSize: ${\n              this.matmulMaxBatchSize}; textureCacheMode: ${this.textureCacheMode}; pack: ${this.pack}; async: ${\n              this.async}.`);\n      return true;\n    } catch (e) {\n      Logger.warning('WebGLBackend', `Unable to initialize WebGLBackend. ${e}`);\n      return false;\n    }\n  }\n  createSessionHandler(context: Session.Context): SessionHandler {\n    return new WebGLSessionHandler(this, context);\n  }\n  dispose(): void {\n    this.glContext.dispose();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ArrayUtil, BroadcastUtil, ShapeUtil} from '../../util';\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\nimport {getGlsl} from './glsl-source';\nimport {squeezeShape} from './texture-layout-strategy';\nimport {TextureLayout} from './types';\nimport {generateShaderFuncNameFromInputSamplerName, generateShaderFuncNameFromInputSamplerNameAtOutCoords, getCoordsDataType, getGlChannels, getSqueezedParams, squeezeInputShape} from './utils';\n\n/**\n * GLSL Library responsible for data types and routines for manipulating\n * coordinates and mapping to/from tensor indices\n */\nexport class CoordsGlslLib extends GlslLib {\n  returnType: string;\n\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {\n      ...this.offsetToCoords(),\n      ...this.coordsToOffset(),\n      ...this.toVec(),\n      ...this.valueFrom(),\n      // TODO return these only when packing is enabled.\n      ...this.getCommonUtilFuncs(),\n      ...this.getInputsSamplingSnippets(),\n      ...this.getOutputSamplingSnippet()\n    };\n  }\n  getCustomTypes() {\n    return {};\n  }\n  /**\n   * Produces a function that can map from\n   * 2D normalzied coordinates (s,t) to a flat offset\n   */\n  protected offsetToCoords(): {[name: string]: GlslLibRoutine} {\n    const funcName = 'offsetToCoords';\n    return {\n      offsetToCoords: new GlslLibRoutine(`\n      vec2 ${funcName}(int offset, int width, int height) {\n        int t = offset / width;\n        int s = offset - t*width;\n        vec2 coords = (vec2(s,t) + vec2(0.5,0.5)) / vec2(width, height);\n        return coords;\n      }\n      `)\n    };\n  }\n\n  /**\n   * Produces a function that can map from\n   * 2D normalzied coordinates (s,t) to a flat offset\n   */\n  protected coordsToOffset(): {[name: string]: GlslLibRoutine} {\n    const funcName = 'coordsToOffset';\n    return {\n      coordsToOffset: new GlslLibRoutine(`\n      int ${funcName}(vec2 coords, int width, int height) {\n        float s = coords.s * float(width);\n        float t = coords.t * float(height);\n        int offset = int(t) * width + int(s);\n        return offset;\n      }\n      `)\n    };\n  }\n\n  /**\n   * Generates code for output sampler.\n   */\n\n  protected getOutputSamplingSnippet(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    if (outputLayout.isPacked) {\n      return this.getPackedOutputSamplingSnippet(outputLayout);\n    } else {\n      return this.getUnpackedOutputSamplingSnippet(outputLayout);\n    }\n  }\n\n  /**\n   * Generates code for packed output sampler.\n   */\n  protected getPackedOutputSamplingSnippet(outputLayout: TextureLayout): {[name: string]: GlslLibRoutine} {\n    const outShape = outputLayout.unpackedShape;\n    const outTexShape = [outputLayout.width, outputLayout.height];\n    const result: {[name: string]: GlslLibRoutine} = {};\n    const funcName = 'getOutputCoords';\n    switch (outShape.length) {\n      case 0:\n        result[funcName] = this.getOutputScalarCoords();\n        break;\n      case 1:\n        result[funcName] = this.getOutputPacked1DCoords(outShape as [number], outTexShape as [number, number]);\n        break;\n      case 2:\n        result[funcName] = this.getOutputPacked2DCoords(outShape as [number, number], outTexShape as [number, number]);\n        break;\n      case 3:\n        result[funcName] =\n            this.getOutputPacked3DCoords(outShape as [number, number, number], outTexShape as [number, number]);\n        break;\n      default:\n        result[funcName] = this.getOutputPackedNDCoords(outShape, outTexShape as [number, number]);\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    // TODO we need this to properly return a packed vec4 from kernels.\n    // Replace all '{glsl.output} = result' with 'setOutput(result)' in all kernels.\n    const floatTextureSetRGBASource = `\n      void setOutput(vec4 val) {\n        ${glsl.output} = val;\n      }\n    `;\n    const floatTextureSetRGBAFuncName = 'floatTextureSetRGBA';\n    result[floatTextureSetRGBAFuncName] = new GlslLibRoutine(floatTextureSetRGBASource);\n    return result;\n  }\n\n  /**\n   * Generates code for unpacked output sampler.\n   */\n  protected getUnpackedOutputSamplingSnippet(outputLayout: TextureLayout): {[name: string]: GlslLibRoutine} {\n    const outShape = outputLayout.unpackedShape;\n    const outTexShape = [outputLayout.width, outputLayout.height];\n    const result: {[name: string]: GlslLibRoutine} = {};\n    const funcName = 'getOutputCoords';\n    switch (outShape.length) {\n      case 0:\n        result[funcName] = this.getOutputScalarCoords();\n        break;\n      case 1:\n        result[funcName] = this.getOutputUnpacked1DCoords(outShape as [number], outTexShape as [number, number]);\n        break;\n      case 2:\n        result[funcName] =\n            this.getOutputUnpacked2DCoords(outShape as [number, number], outTexShape as [number, number]);\n        break;\n      case 3:\n        result[funcName] =\n            this.getOutputUnpacked3DCoords(outShape as [number, number, number], outTexShape as [number, number]);\n        break;\n      case 4:\n        result[funcName] = this.getOutputUnpacked4DCoords(\n            outShape as [number, number, number, number], outTexShape as [number, number]);\n        break;\n      case 5:\n        result[funcName] = this.getOutputUnpacked5DCoords(\n            outShape as [number, number, number, number, number], outTexShape as [number, number]);\n        break;\n      case 6:\n        result[funcName] = this.getOutputUnpacked6DCoords(\n            outShape as [number, number, number, number, number, number], outTexShape as [number, number]);\n        break;\n      default:\n        throw new Error(`Unsupported output dimensionality: ${outShape.length}`);\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    // TODO we need this to properly return a packed vec4 from kernels.\n    // Replace all '{glsl.output} = result' with 'setOutput(result)' in all kernels.\n    const floatTextureSetRSource = `\n        void setOutput(float val) {\n          ${glsl.output} = vec4(val, 0, 0, 0);\n        }\n    `;\n    const floatTextureSetRFuncName = 'floatTextureSetR';\n    result[floatTextureSetRFuncName] = new GlslLibRoutine(floatTextureSetRSource);\n    return result;\n  }\n\n  /**\n   * Scalar output coordinates.\n   */\n  protected getOutputScalarCoords(): GlslLibRoutine {\n    return new GlslLibRoutine(`\n      int getOutputCoords() {\n        return 0;\n      }\n    `);\n  }\n\n  /**\n   * 1D packed output coordinates.\n   */\n  protected getOutputPacked1DCoords(shape: [number], texShape: [number, number]): GlslLibRoutine {\n    const packedTexShape = texShape;\n    let source = '';\n    if (packedTexShape[0] === 1) {\n      source = `\n          int getOutputCoords() {\n            return 2 * int(TexCoords.y * ${packedTexShape[1]}.0);\n          }\n        `;\n      return new GlslLibRoutine(source);\n    }\n\n    if (packedTexShape[1] === 1) {\n      source = `\n          int getOutputCoords() {\n            return 2 * int(TexCoords.x * ${packedTexShape[0]}.0);\n          }\n        `;\n      return new GlslLibRoutine(source);\n    }\n\n    source = `\n        int getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                 vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n          return 2 * (resTexRC.y * ${packedTexShape[0]} + resTexRC.x);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * 2D packed output coordinates.\n   */\n  protected getOutputPacked2DCoords(shape: [number, number], texShape: [number, number]): GlslLibRoutine {\n    let source = '';\n    if (ArrayUtil.arraysEqual(shape, texShape)) {\n      source = `\n        ivec2 getOutputCoords() {\n          return 2 * ivec2(TexCoords.xy * vec2(${texShape[0]}, ${texShape[1]}));\n        }\n      `;\n      return new GlslLibRoutine(source);\n    }\n\n    const packedTexShape = texShape;\n    // texels needed to accommodate a logical row\n    const texelsInLogicalRow = Math.ceil(shape[1] / 2);\n\n    /**\n     * getOutputCoords\n     *\n     * resTexRC: The rows and columns of the texels. If you move over one\n     * texel to the right in the packed texture, you are moving over one column\n     * (not two).\n     *\n     * index: The texel index\n     */\n    source = `\n        ivec2 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n\n          int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\n\n          // reverse r and c order for packed texture\n          int r = imod(index, ${texelsInLogicalRow}) * 2;\n          int c = 2 * (index / ${texelsInLogicalRow});\n\n          return ivec2(r, c);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * 3D packed output coordinates.\n   */\n  protected getOutputPacked3DCoords(shape: [number, number, number], texShape: [number, number]): GlslLibRoutine {\n    const packedTexShape = [texShape[0], texShape[1]];\n    const texelsInLogicalRow = Math.ceil(shape[2] / 2);\n    const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[1] / 2);\n    const source = `\n        ivec3 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n          int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\n\n          int b = index / ${texelsInBatch};\n          index -= b * ${texelsInBatch};\n\n          // reverse r and c order for packed texture\n          int r = imod(index, ${texelsInLogicalRow}) * 2;\n          int c = 2 * (index / ${texelsInLogicalRow});\n\n          return ivec3(b, r, c);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * ND packed output coordinates.\n   */\n  protected getOutputPackedNDCoords(shape: readonly number[], texShape: [number, number]): GlslLibRoutine {\n    const packedTexShape = [texShape[0], texShape[1]];\n\n    const texelsInLogicalRow = Math.ceil(shape[shape.length - 1] / 2);\n    const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[shape.length - 2] / 2);\n    let texelsInBatchN = texelsInBatch;\n    let batches = '';\n    let coords = 'b, r, c';\n\n    for (let b = 2; b < shape.length - 1; b++) {\n      texelsInBatchN *= shape[shape.length - b - 1];\n      batches = `\n      int b${b} = index / ${texelsInBatchN};\n      index -= b${b} * ${texelsInBatchN};\n    ` + batches;\n      coords = `b${b}, ` + coords;\n    }\n    const source = `\n      ivec${shape.length} getOutputCoords() {\n        ivec2 resTexRC = ivec2(TexCoords.xy *\n                              vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n        int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\n\n        ${batches}\n\n        int b = index / ${texelsInBatch};\n        index -= b * ${texelsInBatch};\n\n        // reverse r and c order for packed texture\n        int r = imod(index, ${texelsInLogicalRow}) * 2;\n        int c = 2 * (index / ${texelsInLogicalRow});\n\n        return ivec${shape.length}(${coords});\n      }\n    `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 1D output coordinates.\n   */\n  protected getOutputUnpacked1DCoords(shape: [number], texShape: [number, number]): GlslLibRoutine {\n    const source = `\n        int getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          return resTexRC.y * ${texShape[0]} + resTexRC.x;\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 2D output coordinates.\n   */\n  protected getOutputUnpacked2DCoords(shape: [number, number], texShape: [number, number]): GlslLibRoutine {\n    const source = `\n        ivec2 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          int r = index / ${shape[1]};\n          int c = index - r * ${shape[1]};\n          return ivec2(r, c);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 3D output coordinates.\n   */\n  protected getOutputUnpacked3DCoords(shape: [number, number, number], texShape: [number, number]): GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n        ivec3 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          ${coordsFromIndexSnippet}\n          return ivec3(r, c, d);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 4D output coordinates.\n   */\n  protected getOutputUnpacked4DCoords(shape: [number, number, number, number], texShape: [number, number]):\n      GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd', 'd2'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n      ivec4 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          ${coordsFromIndexSnippet}\n          return ivec4(r, c, d, d2);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 5D output coordinates.\n   */\n  protected getOutputUnpacked5DCoords(shape: [number, number, number, number, number], texShape: [number, number]):\n      GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd', 'd2', 'd3'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n      ivec5 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          ${coordsFromIndexSnippet}\n          return ivec5(r, c, d, d2, d3);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 6D output coordinates.\n   */\n  protected getOutputUnpacked6DCoords(shape: [number, number, number, number, number, number], texShape: [\n    number, number\n  ]): GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd', 'd2', 'd3', 'd4'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n     ivec6 getOutputCoords() {\n         ivec2 resTexRC = ivec2(TexCoords.xy *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n         int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n         ${coordsFromIndexSnippet}\n         return ivec6(r, c, d, d2, d3, d4);\n       }\n     `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Generates code for common UV coords computation utility functions.\n   */\n  protected getCommonUtilFuncs(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    let funcName = 'uvFromFlat';\n    result[funcName] = new GlslLibRoutine(`\n    vec2 uvFromFlat(int texNumR, int texNumC, int index) {\n      int texC = index / texNumR;\n      int texR = index - texC * texNumR;\n      // TODO: swap texR, texC order in following function so row is corresponding to u and column is corresponding to\n      //       v.\n      return (vec2(texR, texC) + halfCR) / vec2(texNumR, texNumC);\n    }\n    `);\n    funcName = 'packedUVfrom1D';\n    result[funcName] = new GlslLibRoutine(`\n      vec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n        int texelIndex = index / 2;\n        int texR = texelIndex / texNumC;\n        int texC = texelIndex - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      `);\n    funcName = 'packedUVfrom2D';\n    result[funcName] = new GlslLibRoutine(`\n      vec2 packedUVfrom2D(int texNumR, int texNumC, int texelsInLogicalRow, int row, int col) {\n        int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n        int texR = texelIndex / texNumC;\n        int texC = texelIndex - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      `);\n    funcName = 'packedUVfrom3D';\n    result[funcName] = new GlslLibRoutine(`\n      vec2 packedUVfrom3D(int texNumR, int texNumC,\n          int texelsInBatch, int texelsInLogicalRow, int b,\n          int row, int col) {\n        int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n        int texR = index / texNumC;\n        int texC = index - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      `);\n    funcName = 'sampleTexture';\n    const glsl = getGlsl(this.context.glContext.version);\n    result[funcName] = new GlslLibRoutine(`\n        float sampleTexture(sampler2D textureSampler, vec2 uv) {\n            return ${glsl.texture2D}(textureSampler, uv).r;\n        }`);\n    return result;\n  }\n\n  /**\n   * Constructing snippets for inputs\n   */\n  protected getInputsSamplingSnippets(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    const outputLayout = this.context.outputTextureLayout;\n    this.context.programInfo.inputNames.forEach((samplerName, i) => {\n      const inputLayout = this.context.inputTextureLayouts[i];\n      const funcName = generateShaderFuncNameFromInputSamplerName(samplerName);\n      if (inputLayout.isPacked) {\n        result[funcName] = this.getPackedSamplerFromInput(funcName, samplerName, inputLayout);\n      } else {\n        result[funcName] = this.getUnpackedSamplerFromInput(funcName, samplerName, inputLayout);\n      }\n\n      const outCoordFuncName = generateShaderFuncNameFromInputSamplerNameAtOutCoords(samplerName);\n      if (inputLayout.unpackedShape.length <= outputLayout.unpackedShape.length) {\n        if (inputLayout.isPacked) {\n          result[outCoordFuncName] =\n              this.getPackedSamplerAtOutputCoords(outCoordFuncName, inputLayout, outputLayout, samplerName);\n        } else {\n          result[outCoordFuncName] =\n              this.getUnpackedSamplerAtOutputCoords(outCoordFuncName, inputLayout, outputLayout, samplerName);\n        }\n      }\n    });\n\n    return result;\n  }\n\n  /**\n   * Constructing snippets for output coordinates of samplers\n   */\n  protected getPackedSamplerAtOutputCoords(\n      funcName: string, inputLayout: TextureLayout, outputLayout: TextureLayout, name: string): GlslLibRoutine {\n    const inShape = inputLayout.unpackedShape;\n    const outShape = outputLayout.unpackedShape;\n    const texName = name;\n    const texFuncSnippet = generateShaderFuncNameFromInputSamplerName(texName);\n\n    const inRank = inShape.length;\n    const outRank = outShape.length;\n\n    const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\n\n    const type = getCoordsDataType(outRank);\n    const rankDiff = outRank - inRank;\n    let coordsSnippet: string;\n    const fields = getGlChannels();\n\n    if (inRank === 0) {\n      coordsSnippet = '';\n    } else if (outRank < 2 && broadcastDims.length >= 1) {\n      coordsSnippet = 'coords = 0;';\n    } else {\n      coordsSnippet = broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`).join('\\n');\n    }\n    let unpackedCoordsSnippet = '';\n    if (outRank < 2 && inRank > 0) {\n      unpackedCoordsSnippet = 'coords';\n    } else {\n      unpackedCoordsSnippet = inShape.map((s, i) => `coords.${fields[i + rankDiff]}`).join(', ');\n    }\n\n    let output = 'return outputValue;';\n    const inSize = ShapeUtil.size(inShape);\n    const isInputScalar = inSize === 1;\n    const outSize = ShapeUtil.size(outShape);\n    const isOutputScalar = outSize === 1;\n\n    if (inRank === 1 && !isInputScalar && !isOutputScalar) {\n      output = `\n        return vec4(outputValue.xy, outputValue.xy);\n      `;\n    } else if (isInputScalar && !isOutputScalar) {\n      if (outRank === 1) {\n        output = `\n          return vec4(outputValue.x, outputValue.x, 0., 0.);\n        `;\n      } else {\n        output = `\n          return vec4(outputValue.x);\n        `;\n      }\n    } else if (broadcastDims.length) {\n      const rows = inRank - 2;\n      const cols = inRank - 1;\n\n      if (broadcastDims.indexOf(rows) > -1 && broadcastDims.indexOf(cols) > -1) {\n        output = 'return vec4(outputValue.x);';\n      } else if (broadcastDims.indexOf(rows) > -1) {\n        output = 'return vec4(outputValue.x, outputValue.y, ' +\n            'outputValue.x, outputValue.y);';\n      } else if (broadcastDims.indexOf(cols) > -1) {\n        output = 'return vec4(outputValue.xx, outputValue.zz);';\n      }\n    }\n\n    const swapLastDimsSnippet = `\n        int lastDim = coords.${fields[outRank - 1]};\n        coords.${fields[outRank - 1]} = coords.${fields[outRank - 2]};\n        coords.${fields[outRank - 2]} = lastDim;\n      `;\n    const source = `\n      vec4 ${funcName}() {\n        ${type} coords = getOutputCoords();\n        ${swapLastDimsSnippet}\n        ${coordsSnippet}\n        vec4 outputValue = ${texFuncSnippet}(${unpackedCoordsSnippet});\n        ${output}\n      }\n    `;\n    return new GlslLibRoutine(source, ['coordinates.getOutputCoords']);\n  }\n\n  /**\n   * Constructing snippets for unpacked output coordinates of samplers\n   */\n  protected getUnpackedSamplerAtOutputCoords(\n      funcName: string, inputLayout: TextureLayout, outputLayout: TextureLayout, name: string): GlslLibRoutine {\n    const outTexShape = [outputLayout.width, outputLayout.height];\n    const inTexShape = [inputLayout.width, inputLayout.height];\n    const inRank = inputLayout.unpackedShape.length;\n    const outRank = outputLayout.unpackedShape.length;\n    const inShape = inputLayout.unpackedShape;\n    const outShape = outputLayout.unpackedShape;\n    const texFuncSnippet = generateShaderFuncNameFromInputSamplerName(name);\n\n    if (inRank === outRank && ArrayUtil.arraysEqual(inTexShape, outTexShape)) {\n      const source = `\n          float ${funcName}() {\n            return sampleTexture(${name}, TexCoords);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const type = getCoordsDataType(outRank);\n    const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\n    const rankDiff = outRank - inRank;\n    let coordsSnippet: string;\n    const fields = getGlChannels();\n\n    if (inRank === 0) {\n      coordsSnippet = '';\n    } else if (outRank < 2 && broadcastDims.length >= 1) {\n      coordsSnippet = 'coords = 0;';\n    } else {\n      coordsSnippet = broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`).join('\\n');\n    }\n    let unpackedCoordsSnippet = '';\n    if (outRank < 2 && inRank > 0) {\n      unpackedCoordsSnippet = 'coords';\n    } else {\n      unpackedCoordsSnippet = inputLayout.unpackedShape.map((s, i) => `coords.${fields[i + rankDiff]}`).join(', ');\n    }\n    const source = `\n        float ${funcName}() {\n          ${type} coords = getOutputCoords();\n          ${coordsSnippet}\n          return ${texFuncSnippet}(${unpackedCoordsSnippet});\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.getOutputCoords']);\n  }\n\n  /**\n   * Constructing snippets for packed operations.\n   */\n  protected getPackedSamplerFromInput(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    switch (inputLayout.unpackedShape.length) {\n      case 0:\n        return this.getPackedSamplerScalar(funcName, name);\n      case 1:\n        return this.getPackedSampler1D(funcName, name, inputLayout);\n      case 2:\n        return this.getPackedSampler2D(funcName, name, inputLayout);\n      case 3:\n        return this.getPackedSampler3D(funcName, name, inputLayout);\n      default:\n        return this.getPackedSamplerND(funcName, name, inputLayout);\n    }\n  }\n\n  /**\n   * Constructing snippets for unpacked operations.\n   */\n  protected getUnpackedSamplerFromInput(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    switch (shape.length) {\n      case 0:\n        return this.getUnpackedSamplerScalar(funcName, name, inputLayout);\n      case 1:\n        return this.getUnpackedSampler1D(funcName, name, inputLayout);\n      case 2:\n        return this.getUnpackedSampler2D(funcName, name, inputLayout);\n      case 3:\n        return this.getUnpackedSampler3D(funcName, name, inputLayout);\n      case 4:\n        return this.getUnpackedSampler4D(funcName, name, inputLayout);\n      case 5:\n        return this.getUnpackedSampler5D(funcName, name, inputLayout);\n      case 6:\n        return this.getUnpackedSampler6D(funcName, name, inputLayout);\n      default:\n        // TODO support more dimensionalities\n        throw new Error(`Unsupported dimension ${shape.length}-D`);\n    }\n  }\n\n  /**\n   * Packed scalar snippet.\n   */\n  protected getPackedSamplerScalar(funcName: string, name: string): GlslLibRoutine {\n    const glsl = getGlsl(this.context.glContext.version);\n    const source = `\n          vec4 ${funcName}() {\n            return ${glsl.texture2D}(${name}, halfCR);\n          }\n        `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Packed 1D snippet.\n   */\n  protected getPackedSampler1D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const texShape = [inputLayout.width, inputLayout.height];\n    const packedTexShape = [texShape[1], texShape[0]];\n    const glsl = getGlsl(this.context.glContext.version);\n\n    const packedSampler = `vec4 ${funcName}(int index) {\n      vec2 uv = packedUVfrom1D(\n      ${packedTexShape[0]}, ${packedTexShape[1]}, index);\n      return ${glsl.texture2D}(${name}, uv);\n    }`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom1D']);\n  }\n\n  /**\n   * Packed 2D snippet.\n   */\n  protected getPackedSampler2D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const texShape = [inputLayout.width, inputLayout.height];\n    const glsl = getGlsl(this.context.glContext.version);\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n\n    if (texShape != null && ArrayUtil.arraysEqual(shape, texShape)) {\n      const packedSampler = `vec4 ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n        return ${glsl.texture2D}(${name}, uv);\n      }`;\n\n      return new GlslLibRoutine(packedSampler);\n    }\n    const packedTexShape = texShape;\n    const valuesPerRow = Math.ceil(shape[1] / 2);\n    const packedSampler = `vec4 ${funcName}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${packedTexShape[1]}, ${packedTexShape[0]}, ${valuesPerRow}, row, col);\n      return ${glsl.texture2D}(${name}, uv);\n    }`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom2D']);\n  }\n\n  /**\n   * Packed 3D snippet.\n   */\n  protected getPackedSampler3D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const texShape = [inputLayout.width, inputLayout.height];\n    const packedTexShape = [texShape[0], texShape[1]];\n    const glsl = getGlsl(this.context.glContext.version);\n\n    if (shape[0] === 1) {\n      const squeezedShape = shape.slice(1);\n      const keptDims = [1, 2];\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\n      const params = ['b', 'row', 'col'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n      const samplerRoutine = this.getPackedSamplerFromInput(funcName, name, newInputLayout);\n      const packedSampler = `${samplerRoutine.routineBody}\n      vec4 ${funcName}(int b, int row, int col) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      } `;\n      const source = packedSampler;\n      return new GlslLibRoutine(source, samplerRoutine.dependencies);\n    }\n    const texNumR = packedTexShape[0];\n    const texNumC = packedTexShape[1];\n\n    const valuesPerRow = Math.ceil(shape[2] / 2);\n    const texelsInBatch = valuesPerRow * Math.ceil(shape[1] / 2);\n\n    const packedSampler = `vec4 ${funcName}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${texNumC}, ${texNumR}, ${texelsInBatch}, ${valuesPerRow}, b, row, col);\n      return ${glsl.texture2D}(${name}, uv);}`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom3D']);\n  }\n  /*\n   * Packed ND snippet.\n   */\n  protected getPackedSamplerND(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const rank = shape.length;\n    const texShape = [inputLayout.width, inputLayout.height];\n    const glsl = getGlsl(this.context.glContext.version);\n\n    const packedTexShape = [texShape[0], texShape[1]];\n    const texNumR = packedTexShape[1];\n    const texNumC = packedTexShape[0];\n    const valuesPerRow = Math.ceil(shape[rank - 1] / 2);\n    let texelsInBatch = valuesPerRow * Math.ceil(shape[rank - 2] / 2);\n    let params = 'int b, int row, int col';\n    let index = `b * ${texelsInBatch} + (row / 2) * ${valuesPerRow} + (col / 2)`;\n    for (let b = 2; b < rank - 1; b++) {\n      params = `int b${b}, ` + params;\n      texelsInBatch *= shape[rank - b - 1];\n      index = `b${b} * ${texelsInBatch} + ` + index;\n    }\n    const packedSampler = `vec4 ${funcName}(${params}) {\n      int index = ${index};\n      int texR = index / ${texNumC};\n      int texC = index - texR * ${texNumC};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}, ${texNumR});\n      return ${glsl.texture2D}(${name}, uv);\n    }`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked scalar snippet.\n   */\n  protected getUnpackedSamplerScalar(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const [texNumR, texNumC] = [inputLayout.width, inputLayout.height];\n    if (texNumR === 1 && texNumC === 1) {\n      const source = `\n          float ${funcName}() {\n            return sampleTexture(${name}, halfCR);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const source = `\n        float ${funcName}() {\n          int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, offset_${name});\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * Unpacked 1D snippet.\n   */\n  protected getUnpackedSampler1D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const tNumR = inputLayout.width;\n    const tNumC = inputLayout.height;\n\n    if (tNumC === 1 && tNumR === 1) {\n      const source = `\n        float ${funcName}(int index) {\n          return sampleTexture(${name}, halfCR);\n        }\n      `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    if (tNumC === 1) {\n      const source = `\n          float ${funcName}(int index) {\n            vec2 uv = vec2((float(index) + 0.5) / ${tNumR}.0, 0.5);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n    if (tNumR === 1) {\n      const source = `\n          float ${funcName}(int index) {\n            vec2 uv = vec2(0.5, (float(index) + 0.5) / ${tNumC}.0);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n    const source = `\n        float ${funcName}(int index) {\n          vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture']);\n  }\n\n  /**\n   * Unpacked 2D snippet.\n   */\n\n  protected getUnpackedSampler2D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n\n    // TODO: modify row/col order for other dimensions.\n    const texShape = [inputLayout.height, inputLayout.width];\n\n    if (texShape != null && ArrayUtil.arraysEqual(shape, texShape)) {\n      const texNumR = texShape[1];\n      const texNumC = texShape[0];\n      const source = `\n          float ${funcName}(int row, int col) {\n            vec2 uv = (vec2(row, col) + halfCR) / vec2(${texNumR}.0, ${texNumC}.0);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    const squeezedShape = newShape;\n    if (squeezedShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n\n      const params = ['col', 'row'];\n      const source = `\n          ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n          float ${funcName}(int row, int col) {\n            return ${funcName}(${getSqueezedParams(params, keptDims)});\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const texNumR = texShape[1];\n    const texNumC = texShape[0];\n    if (texNumC === 1) {\n      const source = `\n          float ${funcName}(int row, int col) {\n            int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\n            float index = dot(vec3(row, col, offset_${name}), vec3(${shape[1]}, 1, 1));\n            vec2 uv = vec2(0.5, (index + 0.5) / ${texNumR}.0);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n    }\n\n    if (texNumR === 1) {\n      const source = `\n          float ${funcName}(int row, int col) {\n            int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\n            float index = dot(vec3(row, col, offset_${name}), vec3(${shape[1]}, 1, 1));\n            vec2 uv = vec2((index + 0.5) / ${texNumC}.0, 0.5);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n    }\n\n    const source = `\n        float ${funcName}(int row, int col) {\n          int index = col * ${shape[1]} + row;\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * Unpacked 3D snippet.\n   */\n\n  protected getUnpackedSampler3D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride0 = shape[1] * shape[2];\n    const stride1 = shape[2];\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    const squeezedShape = newShape;\n    if (squeezedShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\n      const params = ['batch', 'col', 'row'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n      const routine = this.getUnpackedSamplerFromInput(funcName, name, newInputLayout);\n      // TODO: revisit the logic here to make it simpler\n      const revDims = keptDims.reverse();\n      const source = `\n          ${routine.routineBody}\n          float ${funcName}(int batch, int row, int col) {\n            return ${funcName}(${getSqueezedParams(params, revDims)});\n          }\n        `;\n      return new GlslLibRoutine(source, routine.dependencies);\n    }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n          float ${funcName}(int depth, int row, int col) {\n            // Explicitly use integer operations as dot() only works on floats.\n            int index = depth * ${stride0} + col * ${stride1} + row;\n            vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n            return sampleTexture(${name}, uv);\n          }\n      `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * Unpacked 4D snippet.\n   */\n\n  protected getUnpackedSampler4D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride2 = shape[3];\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n\n    //\n    // TODO: re-enable this shortcut once the index calculation bug is fixed.\n    //\n    // const {newShape, keptDims} = squeezeShape(shape as number[]);\n    // if (newShape.length < shape.length) {\n    //   const newInputShape = squeezeInputShape(shape, newShape);\n    //   const params = ['row', 'col', 'depth', 'depth2'];\n    //   // Deep copy of input texture layout.\n    //   const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n    //   newInputLayout.unpackedShape = newInputShape;\n    //   const source = `\n    //       ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n    //       float ${funcName}(int row, int col, int depth, int depth2) {\n    //         return ${funcName}(${getSqueezedParams(params, keptDims)});\n    //       }\n    //     `;\n    //   return new GlslLibRoutine(\n    //       source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n    // }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n        float ${funcName}(int row, int col, int depth, int depth2) {\n          int index = row * ${stride0} + col * ${stride1} +\n              depth2 * ${stride2} + depth;\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture']);\n  }\n\n  /**\n   * Unpacked 5D snippet.\n   */\n  protected getUnpackedSampler5D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride3 = shape[4];\n    const stride2 = shape[3] * stride3;\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    if (newShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, newShape);\n      const params = ['row', 'col', 'depth', 'depth2', 'depth3'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n\n      const source = `\n          ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n          float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n            return ${funcName}(${getSqueezedParams(params, keptDims)});\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\n    }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n        float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n          int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth3 * ${stride3} + depth2;\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\n  }\n\n  /**\n   * Unpacked 6D snippet.\n   */\n  protected getUnpackedSampler6D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride4 = shape[5];\n    const stride3 = shape[4] * stride4;\n    const stride2 = shape[3] * stride3;\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    if (newShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, newShape);\n      const params = ['row', 'col', 'depth', 'depth2', 'depth3', 'depth4'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n\n      const source = `\n            ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n            float ${funcName}(int row, int col, int depth,\n              int depth2, int depth3, int depth4) {\n              return ${funcName}(${getSqueezedParams(params, keptDims)});\n            }\n          `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\n    }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n          float ${funcName}(int row, int col, int depth,\n            int depth2, int depth3, int depth4) {\n            int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n            depth2 * ${stride3} + depth3 * ${stride4} + depth4;\n            vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * This is the main function to map from the given texture coordiantes (s,t)\n   * to logical indices for the output\n   * There will only be one single variation of this\n   * Also see coordsToOffset and offsetToIndices for input-specific versions\n   */\n  protected toVec(): {[name: string]: GlslLibRoutine} {\n    const output = this.context.outputTextureLayout;\n    const rank = output.shape.length;\n    const strides = output.strides;\n    const xScale = output.width;\n    const yScale = output.height;\n\n    const stridesBlock = [];\n    for (let i = 0; i < rank - 1; ++i) {\n      stridesBlock.push(`\n        c[${i}] = offset / ${strides[i]};`);\n      stridesBlock.push(`\n        offset -= c[${i}] * ${strides[i]};`);\n    }\n    stridesBlock.push(`\n        c[${rank - 1}] = offset;`);\n    const body = `\n      void toVec(vec2 texCoords, out int c[${rank}]) {\n        int offset = coordsToOffset(texCoords, ${xScale}, ${yScale});\n        ${stridesBlock.join('')}\n      }\n      void toVec(int offset, out int c[${rank}]) {\n        ${stridesBlock.join('')}\n      }\n    `;\n    return {toVec: new GlslLibRoutine(body, ['coordinates.coordsToOffset'])};\n  }\n  /**\n   * These are value getter functions generated for each input\n   * Each function is hardwired to the name and dimensions of the input\n   * An '_T' variation is also produced which accesses values as if the\n   * input was transposed\n   */\n  protected valueFrom(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const layout = this.context.inputTextureLayouts[i];\n      const shape = layout.unpackedShape.length > 0 ? layout.unpackedShape : layout.shape;\n      const rank = shape.length;\n      let funcName = `_${name}`;\n      result[funcName] = new GlslLibRoutine(\n          this.getValueFromSingle(name, rank, layout.width, layout.height, false),\n          [`shapeUtils.indicesToOffset${funcName}`, 'coordinates.offsetToCoords', 'fragcolor.getColorAsFloat']);\n      funcName = funcName + '_T';\n      result[funcName] = new GlslLibRoutine(\n          this.getValueFromSingle(name, rank, layout.width, layout.height, true),\n          [`shapeUtils.indicesToOffset${funcName}`, 'coordinates.offsetToCoords', 'fragcolor.getColorAsFloat']);\n    });\n    return result;\n  }\n  /**\n   * Produces one value getter function for the name and rank given\n   * If a transpose is set proper offsetToCoords mapping will be used\n   * @param name name of the function\n   * @param rank rank of the input\n   * @param transpose whether or not should generate a transpose variation\n   */\n  protected getValueFromSingle(varName: string, rank: number, width: number, height: number, transpose: boolean):\n      string {\n    let name = `_${varName}`;\n    if (transpose) {\n      name = name + '_T';\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    return `\n        float ${name}(int m[${rank}]) {\n          int offset = indicesToOffset${name}(m);\n          vec2 coords = offsetToCoords(offset, ${width}, ${height});\n          float value = getColorAsFloat(${glsl.texture2D}(${varName}, coords));\n          return value;\n        }\n        `;\n  }\n\n  /**\n   * Produces a packed value getter function for the name and rank given\n   * If a transpose is set proper offsetToCoords mapping will be used\n   * @param name name of the function\n   * @param rank rank of the input\n   * @param transpose whether or not should generate a transpose variation\n   */\n  protected getPackedValueFrom(varName: string, rank: number, width: number, height: number, transpose: boolean):\n      string {\n    let name = `_${varName}_Pack`;\n    if (transpose) {\n      name = name + '_T';\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    return `\n        vec4 ${name}(int m[${rank}]) {\n          int offset = indicesToOffset_${varName}(m);\n          vec2 coords = offsetToCoords(offset, ${width}, ${height});\n          return ${glsl.texture2D}(${varName}, coords);\n        }\n        `;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ProgramInfo, TextureLayout} from './types';\nimport {WebGLContext} from './webgl-context';\n\n/* eslint-disable @typescript-eslint/naming-convention */\nexport enum FunctionType {\n  ValueBased,\n  Positional\n}\nexport interface GlslFunction<T extends FunctionType> {\n  body: string;\n  name: string;\n  type: T;\n}\nexport type GlslValueFunction = GlslFunction<FunctionType.ValueBased>;\nexport interface GlslPositionalFunction extends GlslFunction<FunctionType.Positional> {\n  inputShape: readonly number[];\n  outputShape: readonly number[];\n}\n\nexport class GlslContext {\n  constructor(\n      public glContext: WebGLContext, public programInfo: ProgramInfo, public inputTextureLayouts: TextureLayout[],\n      public outputTextureLayout: TextureLayout) {}\n}\nexport abstract class GlslLib {\n  constructor(public context: GlslContext) {}\n  abstract getFunctions(): {[name: string]: GlslLibRoutine};\n  abstract getCustomTypes(): {[name: string]: string};\n}\n\n// abstraction to represent a GLSL library routine and it's dependencies\nexport class GlslLibRoutine {\n  constructor(public routineBody: string, public dependencies?: string[]) {}\n}\n\n// abstraction to represent a GLSL library routine and it's dependencies AS GRAPH Nodes\n// this level of abstraction is used to topologically sort routines before fragment shade inclusion\nexport class GlslLibRoutineNode {\n  dependencies: GlslLibRoutineNode[];\n  routineBody: string;\n  constructor(public name: string, routineBody?: string, dependencies?: GlslLibRoutineNode[]) {\n    if (dependencies) {\n      this.dependencies = dependencies;\n    } else {\n      this.dependencies = [];\n    }\n\n    if (routineBody) {\n      this.routineBody = routineBody;\n    }\n  }\n  addDependency(node: GlslLibRoutineNode) {\n    if (node) {\n      this.dependencies.push(node);\n    }\n  }\n}\n\n// topologically sort GLSL library routines (graph nodes abstraction) before shader script inclusion\nexport class TopologicalSortGlslRoutines {\n  static returnOrderedNodes(nodes: GlslLibRoutineNode[]): GlslLibRoutineNode[] {\n    if (!nodes || nodes.length === 0) {\n      return [];\n    }\n\n    if (nodes.length === 1) {\n      return nodes;\n    }\n\n    const cycleCheck = new Set<string>();\n    const alreadyTraversed = new Set<string>();\n    const result = new Array<GlslLibRoutineNode>();\n\n    this.createOrderedNodes(nodes, cycleCheck, alreadyTraversed, result);\n    return result;\n  }\n\n  private static createOrderedNodes(\n      graphNodes: GlslLibRoutineNode[], cycleCheck: Set<string>, alreadyTraversed: Set<string>,\n      result: GlslLibRoutineNode[]) {\n    for (let i = 0; i < graphNodes.length; ++i) {\n      this.dfsTraverse(graphNodes[i], cycleCheck, alreadyTraversed, result);\n    }\n  }\n\n  private static dfsTraverse(\n      root: GlslLibRoutineNode, cycleCheck: Set<string>, alreadyTraversed: Set<string>, result: GlslLibRoutineNode[]) {\n    // if this root has already been traversed return\n    if (!root || alreadyTraversed.has(root.name)) {\n      return;\n    }\n\n    // cyclic dependency has been detected\n    if (cycleCheck.has(root.name)) {\n      throw new Error('Cyclic dependency detected. Can\\'t topologically sort routines needed for shader.');\n    }\n\n    // hold this node to detect cycles if any\n    cycleCheck.add(root.name);\n\n    // traverse children in a dfs fashion\n    const dependencies = root.dependencies;\n    if (dependencies && dependencies.length > 0) {\n      for (let i = 0; i < dependencies.length; ++i) {\n        this.dfsTraverse(dependencies[i], cycleCheck, alreadyTraversed, result);\n      }\n    }\n\n    // add to result holder\n    result.push(root);\n\n    // mark this node as traversed so that we don't traverse from this again\n    alreadyTraversed.add(root.name);\n\n    // release the hold\n    cycleCheck.delete(root.name);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\n\n/**\n * This GLSL library handles routines converting\n * float32 to/from Unsigned byte or float 16\n */\nexport class EncodingGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {...this.encodeFloat32(), ...this.decodeFloat32()};\n  }\n  getCustomTypes(): {[name: string]: string} {\n    return {};\n  }\n  protected encodeFloat32(): {[name: string]: GlslLibRoutine} {\n    return {\n      encode: new GlslLibRoutine(`highp vec4 encode(highp float f) {\n        return vec4(f, 0.0, 0.0, 0.0);\n      }\n        `)\n    };\n  }\n  protected decodeFloat32(): {[name: string]: GlslLibRoutine} {\n    return {\n      decode: new GlslLibRoutine(`highp float decode(highp vec4 rgba) {\n        return rgba.r;\n      }\n        `)\n    };\n  }\n  /**\n   * returns the routine to encode encode a 32bit float to a vec4 (of unsigned bytes)\n   * @credit: https://stackoverflow.com/questions/7059962/how-do-i-convert-a-vec4-rgba-value-to-a-float\n   */\n  protected encodeUint8(): {[name: string]: GlslLibRoutine} {\n    const endianness = EncodingGlslLib.isLittleEndian() ? 'rgba.rgba=rgba.abgr;' : '';\n    return {\n      encode: new GlslLibRoutine(`\n      highp vec4 encode(highp float f) {\n        highp float F = abs(f);\n        highp float Sign = step(0.0,-f);\n        highp float Exponent = floor(log2(F));\n        highp float Mantissa = (exp2(- Exponent) * F);\n        Exponent = floor(log2(F) + 127.0) + floor(log2(Mantissa));\n        highp vec4 rgba;\n        rgba[0] = 128.0 * Sign  + floor(Exponent*exp2(-1.0));\n        rgba[1] = 128.0 * mod(Exponent,2.0) + mod(floor(Mantissa*128.0),128.0);\n        rgba[2] = floor(mod(floor(Mantissa*exp2(23.0 -8.0)),exp2(8.0)));\n        rgba[3] = floor(exp2(23.0)*mod(Mantissa,exp2(-15.0)));\n        ${endianness}\n        rgba = rgba / 255.0; // values need to be normalized to [0,1]\n        return rgba;\n    }\n        `)\n    };\n  }\n  /**\n   * returns the routine to encode a vec4 of unsigned bytes to float32\n   * @credit: https://stackoverflow.com/questions/7059962/how-do-i-convert-a-vec4-rgba-value-to-a-float\n   */\n  protected decodeUint8(): {[name: string]: GlslLibRoutine} {\n    const endianness = EncodingGlslLib.isLittleEndian() ? 'rgba.rgba=rgba.abgr;' : '';\n    return {\n      decode: new GlslLibRoutine(`\n        highp float decode(highp vec4 rgba) {\n          rgba = rgba * 255.0; // values need to be de-normalized from [0,1] to [0,255]\n          ${endianness}\n          highp float Sign = 1.0 - step(128.0,rgba[0])*2.0;\n          highp float Exponent = 2.0 * mod(rgba[0],128.0) + step(128.0,rgba[1]) - 127.0;\n          highp float Mantissa = mod(rgba[1],128.0)*65536.0 + rgba[2]*256.0 +rgba[3] + float(0x800000);\n          highp float Result =  Sign * exp2(Exponent) * (Mantissa * exp2(-23.0 ));\n          return Result;\n      }\n        `)\n    };\n  }\n  /**\n   * Determines if the machine is little endian or not\n   * @credit: https://gist.github.com/TooTallNate/4750953\n   */\n  static isLittleEndian(): boolean {\n    const b = new ArrayBuffer(4);\n    const a = new Uint32Array(b);\n    const c = new Uint8Array(b);\n    a[0] = 0xdeadbeef;\n    if (c[0] === 0xef) {\n      return true;\n    }\n    if (c[0] === 0xde) {\n      return false;\n    }\n    throw new Error('unknown endianness');\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\nimport {getGlsl} from './glsl-source';\n\n/**\n * This GLSL library handles routines around reading a texlet and writing to it\n * Reading and writing could be more than just dealing with one channel\n * It may require encoding/decoding to/from 4 channels into one\n */\nexport class FragColorGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {...this.setFragColor(), ...this.getColorAsFloat()};\n  }\n  getCustomTypes(): {[name: string]: string} {\n    return {};\n  }\n  protected setFragColor(): {[name: string]: GlslLibRoutine} {\n    const glsl = getGlsl(this.context.glContext.version);\n    return {\n      setFragColor: new GlslLibRoutine(\n          `\n        void setFragColor(float value) {\n            ${glsl.output} = encode(value);\n        }\n        `,\n          ['encoding.encode'])\n    };\n  }\n  protected getColorAsFloat(): {[name: string]: GlslLibRoutine} {\n    return {\n      getColorAsFloat: new GlslLibRoutine(\n          `\n        float getColorAsFloat(vec4 color) {\n            return decode(color);\n        }\n        `,\n          ['encoding.decode'])\n    };\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nconst INLINE_FUNC_DEF_REGEX = /@inline[\\s\\n\\r]+(\\w+)[\\s\\n\\r]+([0-9a-zA-Z_]+)\\s*\\(([^)]*)\\)\\s*{(([^}]|[\\n\\r])*)}/gm;\nconst FUNC_CALL_REGEX = '(\\\\w+)?\\\\s+([_0-9a-zA-Z]+)\\\\s+=\\\\s+__FUNC__\\\\((.*)\\\\)\\\\s*;';\n/**\n * GLSL preprocessor responsible for resolving @inline directives\n */\nexport function replaceInlines(script: string): string {\n  const inlineDefs: {[name: string]: {params: Array<{type: string; name: string}|null>; body: string}} = {};\n  let match;\n  while ((match = INLINE_FUNC_DEF_REGEX.exec(script)) !== null) {\n    const params = match[3]\n                       .split(',')\n                       .map(s => {\n                         const tokens = s.trim().split(' ');\n                         if (tokens && tokens.length === 2) {\n                           return {type: tokens[0], name: tokens[1]};\n                         }\n                         return null;\n                       })\n                       .filter(v => v !== null);\n    inlineDefs[match[2]] = {params, body: match[4]};\n  }\n  for (const name in inlineDefs) {\n    const regexString = FUNC_CALL_REGEX.replace('__FUNC__', name);\n    const regex = new RegExp(regexString, 'gm');\n    while ((match = regex.exec(script)) !== null) {\n      const type = match[1];\n      const variable = match[2];\n      const params = match[3].split(',');\n      const declLine = (type) ? `${type} ${variable};` : '';\n      let newBody: string = inlineDefs[name].body;\n      let paramRedecLine = '';\n      inlineDefs[name].params.forEach((v, i) => {\n        if (v) {\n          paramRedecLine += `${v.type} ${v.name} = ${params[i]};\\n`;\n        }\n      });\n      newBody = `${paramRedecLine}\\n ${newBody}`;\n      newBody = newBody.replace('return', `${variable} = `);\n      const replacement = `\n      ${declLine}\n      {\n        ${newBody}\n      }\n      `;\n      script = script.replace(match[0], replacement);\n    }\n  }\n  script = script.replace(INLINE_FUNC_DEF_REGEX, '');\n  return script;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutineNode, TopologicalSortGlslRoutines} from './glsl-definitions';\nimport {replaceInlines} from './glsl-function-inliner';\nimport {glslRegistry} from './glsl-registered-libs';\nimport {getDefaultFragShaderMain, getFragShaderPreamble} from './glsl-source';\nimport {ProgramInfo, TextureLayout, VariableInfo} from './types';\nimport {WebGLContext} from './webgl-context';\n\n/**\n * Preprocessor for the additions to the GLSL language\n * It deals with:\n *  @include directives\n *  @inline\n *  Loop unrolling (not implemented)\n *  Macro resolution (not implemented)\n */\nexport class GlslPreprocessor {\n  readonly context: GlslContext;\n  readonly libs: {[name: string]: GlslLib} = {};\n  readonly glslLibRoutineDependencyGraph: {[routineName: string]: GlslLibRoutineNode} = {};\n\n  constructor(\n      glContext: WebGLContext, programInfo: ProgramInfo, inputTextureLayouts: TextureLayout[],\n      outputTextureLayout: TextureLayout) {\n    this.context = new GlslContext(glContext, programInfo, inputTextureLayouts, outputTextureLayout);\n\n    // construct GlslLibs\n    Object.keys(glslRegistry).forEach((name: string) => {\n      const lib = new glslRegistry[name](this.context);\n      this.libs[name] = lib;\n    });\n\n    // construct GlslRoutineDependencyGraph\n    const map = this.glslLibRoutineDependencyGraph;\n    for (const libName in this.libs) {\n      const lib = this.libs[libName];\n      const routinesInLib = lib.getFunctions();\n      for (const routine in routinesInLib) {\n        const key = libName + '.' + routine;\n        let currentNode: GlslLibRoutineNode;\n        if (map[key]) {\n          currentNode = map[key];\n          currentNode.routineBody = routinesInLib[routine].routineBody;\n        } else {\n          currentNode = new GlslLibRoutineNode(key, routinesInLib[routine].routineBody);\n          map[key] = currentNode;\n        }\n        const dependencies = routinesInLib[routine].dependencies;\n        if (dependencies) {\n          for (let i = 0; i < dependencies.length; ++i) {\n            if (!map[dependencies[i]]) {\n              const node = new GlslLibRoutineNode(dependencies[i]);\n              map[dependencies[i]] = node;\n              currentNode.addDependency(node);\n            } else {\n              currentNode.addDependency(map[dependencies[i]]);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  preprocess(): string {\n    const programInfo = this.context.programInfo;\n    let source = programInfo.shaderSource;\n\n    // append main() function\n    if (!this.context.programInfo.hasMain) {\n      source = `${source}\n      ${getDefaultFragShaderMain(this.context.glContext.version, this.context.outputTextureLayout.shape.length)}`;\n    }\n    // replace inlines\n    source = replaceInlines(source);\n\n    // concat final source string\n    return `${getFragShaderPreamble(this.context.glContext.version)}\n    ${this.getUniforms(programInfo.inputNames, programInfo.variables)}\n    ${this.getImports(source)}\n    ${source}`;\n  }\n\n  protected getImports(script: string): string {\n    const routinesIncluded = this.selectGlslLibRoutinesToBeIncluded(script);\n\n    if (routinesIncluded.length === 0) {\n      return '';\n    }\n\n    let routines = '';\n    for (let i = 0; i < routinesIncluded.length; ++i) {\n      if (routinesIncluded[i].routineBody) {\n        routines += routinesIncluded[i].routineBody + '\\n';\n      } else {\n        throw new Error(`Missing body for the Glsl Library routine: ${routinesIncluded[i].name}`);\n      }\n    }\n\n    return routines;\n  }\n  private selectGlslLibRoutinesToBeIncluded(script: string): GlslLibRoutineNode[] {\n    const nodes: GlslLibRoutineNode[] = [];\n\n    Object.keys(this.glslLibRoutineDependencyGraph).forEach(classAndRoutine => {\n      const routine = classAndRoutine.split('.')[1];\n      if (script.indexOf(routine) !== -1) {\n        nodes.push(this.glslLibRoutineDependencyGraph[classAndRoutine]);\n      }\n    });\n\n    return TopologicalSortGlslRoutines.returnOrderedNodes(nodes);\n  }\n\n  protected getUniforms(samplers?: string[], variables?: VariableInfo[]): string {\n    const uniformLines: string[] = [];\n    if (samplers) {\n      for (const sampler of samplers) {\n        uniformLines.push(`uniform sampler2D ${sampler};`);\n      }\n    }\n    if (variables) {\n      for (const variable of variables) {\n        uniformLines.push(\n            `uniform ${variable.type} ${variable.name}${variable.arrayLength ? `[${variable.arrayLength}]` : ''};`);\n      }\n    }\n    return uniformLines.join('\\n');\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {CoordsGlslLib} from './glsl-coordinate-lib';\nimport {GlslContext, GlslLib} from './glsl-definitions';\nimport {EncodingGlslLib} from './glsl-encoding-lib';\nimport {FragColorGlslLib} from './glsl-fragcolor-lib';\nimport {ShapeUtilsGlslLib} from './glsl-shape-utils-lib';\nimport {VecGlslLib} from './glsl-vec-lib';\n\nexport const glslRegistry: {[name: string]: new (context: GlslContext) => GlslLib} = {\n  'encoding': EncodingGlslLib,\n  'fragcolor': FragColorGlslLib,\n  'vec': VecGlslLib,\n  'shapeUtils': ShapeUtilsGlslLib,\n  'coordinates': CoordsGlslLib,\n  //  'arrays': ArrayGlslSLib\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\n\n/**\n * GLSL Library responsible for data types and routines for manipulating\n * coordinates and mapping to/from tensor indices\n */\nexport class ShapeUtilsGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {\n      ...this.bcastIndex(),\n      ...this.bcastMatmulIndex(),\n      ...this.offsetToIndices(),\n      ...this.indicesToOffset(),\n      ...this.incrementIndices()\n    };\n  }\n  getCustomTypes() {\n    return {};\n  }\n  protected bcastIndex(): {[name: string]: GlslLibRoutine} {\n    const outputRank = this.context.outputTextureLayout.shape.length;\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].unpackedShape;\n      if (shape.length <= outputRank) {\n        const rank = shape.length;\n        const dimOffset = outputRank - rank;\n        const funcName = `bcastIndices_${name}`;\n        let block = '';\n        for (let i = 0; i < rank; ++i) {\n          block += `\n          realIndices[${i}] = int( mod(float(bcastedIndices[${dimOffset + i}]), ${shape[i]}.0) );\n          `;\n        }\n        const body = `\n        void ${funcName} (int bcastedIndices[${outputRank}], out int realIndices[${rank}]) {\n          ${block}\n        }\n        `;\n        result[funcName] = new GlslLibRoutine(body);\n      }\n    });\n    return result;\n  }\n  protected bcastMatmulIndex(): {[name: string]: GlslLibRoutine} {\n    const outputRank = this.context.outputTextureLayout.shape.length;\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      if (!(shape.length < 2 || shape.length > outputRank)) {\n        const rank = shape.length;\n        const dimOffset = outputRank - rank;\n        const funcName = `bcastMatmulIndices_${name}`;\n        let block = '';\n        for (let i = 0; i < rank - 2; ++i) {\n          block += `\n          realIndices[${i}] = int( mod(float(bcastedIndices[${dimOffset + i}]), ${shape[i]}.0) );\n          `;\n        }\n        const body = `\n        void ${funcName}(int bcastedIndices[${outputRank}], out int realIndices[${rank}]) {\n          ${block}\n          realIndices[${rank - 1}] = bcastedIndices[${outputRank - 1}];\n          realIndices[${rank - 2}] = bcastedIndices[${outputRank - 2}];\n        }\n        `;\n        result[funcName] = new GlslLibRoutine(body);\n      }\n    });\n    return result;\n  }\n  protected indicesToOffset(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      const strides = this.context.inputTextureLayouts[i].strides;\n      const rank = shape.length;\n      let funcName = `indicesToOffset_${name}`;\n      result[funcName] = new GlslLibRoutine(ShapeUtilsGlslLib.indexToOffsetSingle(funcName, rank, strides));\n      funcName = `indicesToOffset_${name}_T`;\n      result[funcName] =\n          new GlslLibRoutine(ShapeUtilsGlslLib.indexToOffsetSingle(funcName, rank, strides.slice().reverse()));\n    });\n    return result;\n  }\n  static indexToOffsetSingle(name: string, rank: number, strides: readonly number[]): string {\n    let block = '';\n    for (let i = rank - 1; i >= 0; --i) {\n      block += `\n        offset += indices[${i}] * ${strides[i]};\n        `;\n    }\n    return `\n      int ${name}(int indices[${rank}]) {\n        int offset = 0;\n        ${block}\n        return offset;\n      }\n      `;\n  }\n  protected offsetToIndices(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      const strides = this.context.inputTextureLayouts[i].strides;\n      const rank = shape.length;\n      let funcName = `offsetToIndices_${name}`;\n      result[funcName] = new GlslLibRoutine(ShapeUtilsGlslLib.offsetToIndicesSingle(funcName, rank, strides));\n      funcName = `offsetToIndices_${name}_T`;\n      result[funcName] =\n          new GlslLibRoutine(ShapeUtilsGlslLib.offsetToIndicesSingle(funcName, rank, strides.slice().reverse()));\n    });\n    return result;\n  }\n  static offsetToIndicesSingle(name: string, rank: number, strides: readonly number[]): string {\n    const stridesBlock = [];\n    for (let i = 0; i < rank - 1; ++i) {\n      stridesBlock.push(`\n      indices[${i}] = offset / ${strides[i]};`);\n      stridesBlock.push(`\n        offset -= indices[${i}] * ${strides[i]};`);\n    }\n    stridesBlock.push(`\n      indices[${rank - 1}] = offset;`);\n    return `\n      void ${name}(int offset, out int indices[${rank}]) {\n        ${stridesBlock.join('')}\n      }\n      `;\n  }\n  protected incrementIndices(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      const rank = shape.length;\n      const funcName = `incrementIndices_${name}`;\n      let shapeInit = '';\n      for (let i = 0; i < rank; ++i) {\n        shapeInit += `\n        shape[${i}] = ${shape[i]};`;\n      }\n      const body = `\n        void ${funcName}(int axis, out int indices[${rank}]) {\n          int shape[${rank}];\n          ${shapeInit};\n          for(int i = ${rank} -1 ; i >= 0; --i) {\n            if(i > axis) continue;\n            indices[i] += 1;\n            if(indices[i] < shape[i]) {\n              break;\n            }\n            indices[i] = 0;\n          }\n        }\n        `;\n      result[funcName] = new GlslLibRoutine(body);\n    });\n    return result;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/**\n * represent a version irrelevant abstraction of for GLSL source code\n */\nexport interface Glsl {\n  readonly version: string;\n  readonly attribute: string;\n  readonly varyingVertex: string;\n  readonly varyingFrag: string;\n  readonly texture2D: string;\n  readonly output: string;\n  readonly outputDeclaration: string;\n}\n\nconst GLSL_ES_2_0: Glsl = {\n  version: '',\n  attribute: 'attribute',\n  varyingVertex: 'varying',\n  varyingFrag: 'varying',\n  texture2D: 'texture2D',\n  output: 'gl_FragColor',\n  outputDeclaration: '',\n};\nconst GLSL_ES_3_0: Glsl = {\n  version: '#version 300 es',\n  attribute: 'in',\n  varyingVertex: 'out',\n  varyingFrag: 'in',\n  texture2D: 'texture',\n  output: 'outputColor',\n  outputDeclaration: 'out vec4 outputColor;',\n};\n\nexport function getGlsl(version: 1|2) {\n  return version === 1 ? GLSL_ES_2_0 : GLSL_ES_3_0;\n}\n\nexport function getVertexShaderSource(version: 1|2): string {\n  const glsl = getGlsl(version);\n  return `${glsl.version}\n      precision highp float;\n      ${glsl.attribute} vec3 position;\n      ${glsl.attribute} vec2 textureCoord;\n\n      ${glsl.varyingVertex} vec2 TexCoords;\n\n      void main()\n      {\n          gl_Position = vec4(position, 1.0);\n          TexCoords = textureCoord;\n      }`;\n}\n\nexport function getFragShaderPreamble(version: 1|2): string {\n  const glsl = getGlsl(version);\n  return `${glsl.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${glsl.varyingFrag} vec2 TexCoords;\n    ${glsl.outputDeclaration}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    // Custom vector types to handle higher dimenalities.\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    `;\n}\n\nexport function getDefaultFragShaderMain(version: 1|2, outputShapeLength: number): string {\n  const glsl = getGlsl(version);\n  return `\n  void main() {\n    int indices[${outputShapeLength}];\n    toVec(TexCoords, indices);\n    vec4 result = vec4(process(indices));\n    ${glsl.output} = result;\n  }\n  `;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\n\n/**\n * GLSL Library responsible for vec routines\n * Vec is an varible length int array. The length is fixed at the time of\n * generating the library functions from the dimensions of the output.\n */\nexport class VecGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getCustomTypes(): {[name: string]: string} {\n    return {};\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {...this.binaryVecFunctions(), ...this.copyVec(), ...this.setVecItem(), ...this.getVecItem()};\n  }\n  protected binaryVecFunctions(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    const nameOp: {[name: string]: string} = {add: '+=', sub: '-=', mul: '*=', div: '/='};\n    const result: {[name: string]: GlslLibRoutine} = {};\n    for (const name in nameOp) {\n      const fname = `${name}Vec`;\n      let assignmentBlock = '';\n      for (let i = 0; i < rank; ++i) {\n        assignmentBlock += `\n          dest[${i}] ${nameOp[name]} src[${i}];\n          `;\n      }\n      const body = `\n        void ${fname}(int src[${rank}], out int dest[${rank}]) {\n          ${assignmentBlock}\n        }\n        `;\n      result[fname] = new GlslLibRoutine(body);\n    }\n\n    return result;\n  }\n  protected copyVec(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    let assignmentBlock = '';\n    for (let i = 0; i < rank; ++i) {\n      assignmentBlock += `\n        dest[${i}] = src[${i}];\n        `;\n    }\n    const body = `\n      void copyVec(int src[${rank}], out int dest[${rank}]) {\n        ${assignmentBlock}\n      }\n      `;\n    return {copyVec: new GlslLibRoutine(body)};\n  }\n\n  protected setVecItem(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    let block = `\n        if(index < 0)\n            index =${rank} + index;\n        if (index == 0)\n            m[0] = value;\n        `;\n    for (let i = 1; i < rank - 1; ++i) {\n      block += `\n        else if (index == ${i})\n            m[${i}] = value;\n            `;\n    }\n    block += `\n        else\n            m[${rank - 1}] = value;\n        `;\n    const body = `\n      void setVecItem(out int m[${rank}], int index, int value) {\n        ${block}\n      }\n        `;\n    return {setVecItem: new GlslLibRoutine(body)};\n  }\n  protected getVecItem(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    let block = `\n        if(index < 0)\n            index = ${rank} + index;\n        if (index == 0)\n            return m[0];\n      `;\n    for (let i = 1; i < rank - 1; ++i) {\n      block += `\n        else if (index == ${i})\n            return m[${i}];\n      `;\n    }\n    block += `\n        else\n            return m[${rank - 1}];\n        `;\n    const body = `\n      int getVecItem(int m[${rank}], int index) {\n        ${block}\n      }\n    `;\n    return {getVecItem: new GlslLibRoutine(body)};\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceHandler} from '../../backend';\nimport {Logger} from '../../instrument';\nimport {Tensor} from '../../tensor';\nimport {ShapeUtil} from '../../util';\n\nimport {createPackProgramInfoLoader} from './ops/pack';\nimport {createPackedReshape3DProgramInfoLoader, isReshapeCheap, processDims3D} from './ops/reshape-packed';\nimport {encodeAsUint8} from './ops/uint8-encode';\nimport {createUnpackProgramInfoLoader} from './ops/unpack';\nimport {WebGLSessionHandler} from './session-handler';\nimport {Encoder} from './texture-data-encoder';\nimport {calculateTextureWidthAndHeight, createTextureLayoutFromShape, createTextureLayoutFromTextureType} from './texture-layout';\nimport {Artifact, ProgramInfo, ProgramInfoLoader, TextureData, TextureLayout, TextureType} from './types';\n\nconst getProgramInfoUniqueKey =\n    (programInfo: ProgramInfo|ProgramInfoLoader, inputTextureDatas: TextureData[]): string => {\n      const inputs =\n          inputTextureDatas.map(texture => `${texture.unpackedShape.join(',')};${texture.width}x${texture.height}`)\n              .join('_');\n      let key = programInfo.name;\n      if (programInfo.cacheHint) {\n        key += '[' + programInfo.cacheHint + ']';\n      }\n      key += ':' + inputs;\n      return key;\n    };\n\nexport class WebGLInferenceHandler implements InferenceHandler {\n  private packedTextureDataCache: Map<Tensor.Id, TextureData>;\n  private unpackedTextureDataCache: Map<Tensor.Id, TextureData>;\n  constructor(public session: WebGLSessionHandler) {\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache = new Map();\n  }\n\n  /**\n   * @returns [width, height]\n   */\n  calculateTextureWidthAndHeight(shape: readonly number[], textureType: TextureType): [number, number] {\n    return calculateTextureWidthAndHeight(this.session.layoutStrategy, shape, textureType);\n  }\n\n  executeProgram(program: ProgramInfo|ProgramInfoLoader, inputs: readonly Tensor[]): TextureData {\n    if (inputs.length < program.inputNames.length) {\n      throw new Error(`Input size mustn't be less than ${program.inputNames.length}.`);\n    }\n    if (program.inputNames.length !== program.inputTypes.length) {\n      throw new Error('input names size does not match input types');\n    }\n\n    // create texture info for input\n    const inputTextureDatas: TextureData[] = [];\n    for (let i = 0; i < program.inputNames.length; ++i) {\n      inputTextureDatas[i] = this.getOrCreateTextureData(inputs[i], program.inputTypes[i]);\n    }\n\n    const key = getProgramInfoUniqueKey(program, inputTextureDatas);\n    let artifact = this.session.programManager.getArtifact(key);\n    const programInfo = artifact ?\n        artifact.programInfo :\n        (typeof (program as ProgramInfoLoader).get === 'function' ? (program as ProgramInfoLoader).get() :\n                                                                    (program as ProgramInfo));\n\n    // create texture info for output\n    const outputTextureLayout = createTextureLayoutFromTextureType(\n        this.session.layoutStrategy, programInfo.output.dims, programInfo.output.textureType);\n    const outputTextureData = this.createTextureData(outputTextureLayout, programInfo.output.type);\n\n    if (!artifact) {\n      artifact = this.session.programManager.build(programInfo, inputTextureDatas, outputTextureData);\n      this.session.programManager.setArtifact(key, artifact);\n    }\n\n    this.runProgram(artifact, inputTextureDatas, outputTextureData);\n    return outputTextureData;\n  }\n\n  run(program: ProgramInfoLoader, inputs: readonly Tensor[]): Tensor {\n    const outputTextureData = this.executeProgram(program, inputs);\n    return outputTextureData.tensor;\n  }\n\n  private runProgram(artifact: Artifact, inputs: TextureData[], output: TextureData): void {\n    // input should match\n    for (let i = 0; i < inputs.length; ++i) {\n      if (!!inputs[i].isPacked !== (artifact.programInfo.inputTypes[i] === TextureType.packed)) {\n        throw new Error(`input[${i}] property packed inconsistent`);\n      }\n    }\n\n    // output should match\n    if (!!output.isPacked !== (artifact.programInfo.output.textureType === TextureType.packed)) {\n      throw new Error('output property packed inconsistent');\n    }\n\n    this.session.programManager.run(artifact, inputs, output);\n  }\n\n  /**\n   * Create a TextureData object from a tensor.\n   * Usage = Encoder.Usage.UploadOnly.\n   * If a related texture data is found in cache, returns it;\n   * Otherwise:\n   *   Creates a new texture layout if not provided;\n   *   Creates WebGLTexture with the layout;\n   *   Upload tensor data to the texture;\n   *   Creates a texture data object associated with the given tensor.\n   * @param tensor the tensor with data to upload\n   */\n  private getOrCreateTextureData(tensor: Tensor, textureType: TextureType) {\n    let td = this.getTextureData(tensor.dataId, textureType === TextureType.packed);\n\n    if (!td) {\n      // check if we have texture data in different type\n      td = this.getTextureData(tensor.dataId, textureType !== TextureType.packed);\n      if (td) {\n        if (textureType === TextureType.packed) {\n          return this.pack(td);\n        } else {\n          return this.unpack(td);\n        }\n      }\n    }\n\n    if (!td) {\n      const layout = createTextureLayoutFromTextureType(this.session.layoutStrategy, tensor.dims, textureType);\n\n      if (textureType === TextureType.packedLastDimension) {\n        const group = 1;\n        const channels = 4;\n        const shape = tensor.dims;\n        if (shape.length === 4) {\n          // pre-processing for kernel data of Conv.\n          //\n          // TODO: currently this is a hacking to overwrite Conv's weight. The correct way to do this should be:\n          // 1. implement texture based const-folding\n          // 2. create a WebGL program \"preprocessConvWeight\" to do the same work as below\n          // 3. run the program before dotProduct.\n          //\n          const adjustedKernelShape = [shape[0], Math.ceil((shape[1] * shape[2] * shape[3]) / channels)];\n          const adjustedLayout =\n              createTextureLayoutFromTextureType(this.session.layoutStrategy, adjustedKernelShape, textureType);\n          let buffer = tensor.numberData;\n          if (shape[1] * shape[2] * shape[3] % channels !== 0) {\n            const numFeatureMaps = shape[0];\n            const oldRowSize = shape[1] * shape[2] * shape[3];\n            const newRowSize = Math.ceil(oldRowSize * group / channels) * channels;\n            const newSize = numFeatureMaps * newRowSize;\n            buffer = new Float32Array(newSize);\n            for (let f = 0; f < numFeatureMaps; ++f) {\n              const oldOffset = f * oldRowSize;\n              const newOffset = f * newRowSize + f % group * oldRowSize;\n              buffer.set(tensor.numberData.subarray(oldOffset, oldOffset + oldRowSize), newOffset);\n            }\n          }\n          return this.createTextureData(adjustedLayout, tensor.type, buffer, tensor, Encoder.Usage.UploadOnly);\n        }\n      }\n\n      if (textureType === TextureType.packed) {\n        const unpackedTextureLayout =\n            createTextureLayoutFromShape(this.session.layoutStrategy, tensor.dims, 1, [], {reverseWH: true});\n        const unpackedTextureData = this.createTextureData(\n            unpackedTextureLayout, tensor.type, tensor.numberData, tensor, Encoder.Usage.UploadOnly);\n        td = this.pack(unpackedTextureData);\n      } else {\n        td = this.createTextureData(layout, tensor.type, tensor.numberData, tensor, Encoder.Usage.UploadOnly);\n      }\n    }\n    return td;\n  }\n\n  /**\n   * Create a TextureData object using the given data and bind to the given tensor.\n   * Usage = Encoder.Usage.UploadOnly.\n   * NOTE: this function is a hack for Conv implementation. should remove this function, after rewriting Conv\n   * implementation by Graph.Transformer\n   * @param dataType the tensor data type\n   * @param data the actual data to upload\n   * @param tensor the tensor to bind. tensor's data is ignored.\n   */\n  createTextureDataFromLayoutBindTensor(\n      layout: TextureLayout, dataType: Tensor.DataType, data: Tensor.NumberType, tensor: Tensor): TextureData {\n    return this.createTextureData(layout, dataType, data, tensor, Encoder.Usage.UploadOnly);\n  }\n\n  private createTextureData(\n      layout: TextureLayout, dataType: Tensor.DataType, data?: Tensor.NumberType, tensor?: Tensor,\n      usage?: Encoder.Usage): TextureData {\n    Logger.verbose('InferenceHandler', `Creating TextureData: layout:[${JSON.stringify(layout)}]`);\n    const texture = this.session.textureManager.createTextureFromLayout(dataType, layout, data, usage);\n    return this.createTextureDataFromTexture(layout, dataType, texture, tensor);\n  }\n\n  reshapeUnpacked(input: Tensor, reshapedDims: readonly number[]): Tensor {\n    const inputTD = this.getOrCreateTextureData(input, TextureType.unpacked);\n    const newTextureLayout: TextureLayout = {\n      channels: inputTD.channels,\n      height: inputTD.height,\n      width: inputTD.width,\n      // handle reshaping into scalar Tensors\n      shape: reshapedDims.length !== 0 ? reshapedDims : [1],\n      strides: ShapeUtil.computeStrides(reshapedDims),\n      unpackedShape: reshapedDims,\n    };\n    const newTextureData = this.createTextureDataFromTexture(newTextureLayout, input.type, inputTD.texture);\n    return newTextureData.tensor;\n  }\n\n  reshapePacked(input: Tensor, reshapedDims: readonly number[]): Tensor {\n    const inputTD = this.getOrCreateTextureData(input, TextureType.packed);\n\n    // check if the reshape is 'cheap'\n    if (isReshapeCheap(input.dims, reshapedDims)) {\n      const newTextureLayout: TextureLayout = {\n        channels: inputTD.channels,\n        height: inputTD.height,\n        width: inputTD.width,\n        // handle reshaping into scalar Tensors\n        shape: reshapedDims.length !== 0 ? reshapedDims : [1],\n        strides: ShapeUtil.computeStrides(reshapedDims),\n        unpackedShape: reshapedDims,\n        isPacked: true\n      };\n      const newTextureData = this.createTextureDataFromTexture(newTextureLayout, input.type, inputTD.texture);\n      return newTextureData.tensor;\n    }\n\n    const squeezedInputShape = processDims3D(input.dims);\n    const squeezedOutputShape = processDims3D(reshapedDims);\n\n    const squeezedInputTensor = this.reshapePacked(input, squeezedInputShape);\n    const squeezedOutputTensor = this.run(\n        createPackedReshape3DProgramInfoLoader(this, squeezedInputTensor, squeezedOutputShape), [squeezedInputTensor]);\n    const outputTensor = this.reshapePacked(squeezedOutputTensor, reshapedDims);\n    return outputTensor;\n  }\n\n  cast(input: Tensor, type: Tensor.DataType): Tensor {\n    const inputTD = this.getOrCreateTextureData(input, TextureType.unpacked);\n    const newTextureData = this.createTextureDataFromTexture(inputTD as TextureLayout, type, inputTD.texture);\n    return newTextureData.tensor;\n  }\n\n  private createTextureDataFromTexture(\n      layout: TextureLayout, dataType: Tensor.DataType, texture: WebGLTexture, tensor?: Tensor, tensorId?: Tensor.Id) {\n    const textureData: TextureData = {\n      ...layout,\n      tensor: tensor ||\n          new Tensor(\n                  layout.unpackedShape, dataType, (_id: Tensor.Id) => this.readTexture(textureData),\n                  async (_id: Tensor.Id) => this.readTextureAsync(textureData), undefined, tensorId),\n      texture\n    };\n    this.setTextureData(textureData.tensor.dataId, textureData, layout.isPacked);\n    return textureData;\n  }\n\n  private getTextureData(tensorId: Tensor.Id, isPacked = false): TextureData|undefined {\n    return this.session.isInitializer(tensorId) ? this.session.getTextureData(tensorId, isPacked) :\n        isPacked                                ? this.packedTextureDataCache.get(tensorId) :\n                                                  this.unpackedTextureDataCache.get(tensorId);\n  }\n  setTextureData(tensorId: Tensor.Id, td: TextureData, isPacked = false): void {\n    if (this.session.isInitializer(tensorId)) {\n      this.session.setTextureData(tensorId, td, isPacked);\n    } else {\n      (isPacked ? this.packedTextureDataCache : this.unpackedTextureDataCache).set(tensorId, td);\n    }\n  }\n  isTextureLayoutCached(tensor: Tensor, isPacked = false): boolean {\n    return !!this.getTextureData(tensor.dataId, isPacked);\n  }\n\n  dispose(): void {\n    this.session.textureManager.clearActiveTextures();\n    this.packedTextureDataCache.forEach(td => this.session.textureManager.releaseTexture(td));\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache.forEach(td => this.session.textureManager.releaseTexture(td));\n    this.unpackedTextureDataCache = new Map();\n  }\n\n  readTexture(textureData: TextureData): Tensor.NumberType {\n    if (textureData.isPacked) {\n      return this.readTexture(this.unpack(textureData));\n    }\n    if (!this.session.backend.glContext.isFloat32DownloadSupported) {\n      return this.session.textureManager.readUint8TextureAsFloat(encodeAsUint8(this, textureData));\n    }\n    return this.session.textureManager.readTexture(textureData, textureData.tensor.type, textureData.channels);\n  }\n\n  async readTextureAsync(textureData: TextureData): Promise<Tensor.NumberType> {\n    if (textureData.isPacked) {\n      return this.readTextureAsync(this.unpack(textureData));\n    }\n    if (!this.session.backend.glContext.isFloat32DownloadSupported) {\n      return this.session.textureManager.readUint8TextureAsFloat(encodeAsUint8(this, textureData));\n    }\n    return this.session.textureManager.readTextureAsync(textureData, textureData.tensor.type, textureData.channels);\n  }\n\n  pack(input: TextureData): TextureData {\n    const outputTextureData = this.executeProgram(createPackProgramInfoLoader(this, input.tensor), [input.tensor]);\n    return outputTextureData;\n  }\n\n  unpack(input: TextureData): TextureData {\n    const outputTextureData = this.executeProgram(createUnpackProgramInfoLoader(this, input.tensor), [input.tensor]);\n    return outputTextureData;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {OpSet} from '../../opset';\n\nimport {batchNormalization, parseBatchNormalizationAttributes} from './ops/batch-normalization';\nimport * as binaryOps from './ops/binary-op';\nimport {cast, parseCastAttributes} from './ops/cast';\nimport {concat, parseConcatAttributes} from './ops/concat';\nimport {conv, parseConvAttributes} from './ops/conv';\nimport {convTranspose, parseConvTransposeAttributes} from './ops/conv-transpose';\nimport {depthToSpace, parseDepthToSpaceAttributes} from './ops/depth-to-space';\nimport {flatten, parseFlattenAttributes} from './ops/flatten';\nimport {gather, parseGatherAttributes} from './ops/gather';\nimport {gemm, parseGemmAttributesV11, parseGemmAttributesV7} from './ops/gemm';\nimport {imageScaler, parseImageScalerAttributes} from './ops/image-scaler';\nimport {instanceNormalization, parseInstanceNormalizationAttributes} from './ops/instance-normalization';\nimport {lrn, parseLrnAttributes} from './ops/lrn';\nimport {matMul, parseMatMulAttributes} from './ops/matmul';\nimport {padV11, padV2, parsePadAttributesV11, parsePadAttributesV2} from './ops/pad';\nimport {averagePool, globalAveragePool, globalMaxPool, maxPool, parseAveragePoolAttributes, parseGlobalAveragePoolAttributes, parseMaxPoolAttributes} from './ops/pool';\nimport {parseReduceAttributes, reduceLogSum, reduceLogSumSquare, reduceMax, reduceMean, reduceMin, reduceProd, reduceSum} from './ops/reduce';\nimport {reshape} from './ops/reshape';\nimport {parseResizeAttributesV10, parseResizeAttributesV11, resize} from './ops/resize-packed';\nimport {shape} from './ops/shape';\nimport {parseSliceAttributes, slice, sliceV10} from './ops/slice';\nimport {parseSoftmaxAttributes, parseSoftmaxAttributesV13, softmax, softmaxV13} from './ops/softmax';\nimport {parseSplitAttributes, split} from './ops/split';\nimport {parseSqueezeAttributes, squeeze, squeezeV13} from './ops/squeeze';\nimport {sum} from './ops/sum';\nimport {tile} from './ops/tile';\nimport {parseTransposeAttributes, transpose} from './ops/transpose';\nimport * as unaryOps from './ops/unary-op';\nimport {parseUnsqueezeAttributes, unsqueeze, unsqueezeV13} from './ops/unsqueeze';\nimport {parseUpsampleAttributesV7, parseUpsampleAttributesV9, upsample} from './ops/upsample';\n\nexport const WEBGL_OP_RESOLVE_RULES: readonly OpSet.ResolveRule[] = [\n  ['Abs', '', '6+', unaryOps.abs],\n  ['Acos', '', '7+', unaryOps.acos],\n  ['Add', '', '7+', binaryOps.add],\n  ['And', '', '7+', binaryOps.and],\n  ['Asin', '', '7+', unaryOps.asin],\n  ['Atan', '', '7+', unaryOps.atan],\n  // TODO: support new attributes for AveragePool-10\n  ['AveragePool', '', '7+', averagePool, parseAveragePoolAttributes],\n  ['BatchNormalization', '', '7+', batchNormalization, parseBatchNormalizationAttributes],\n  ['Cast', '', '6+', cast, parseCastAttributes],\n  ['Ceil', '', '6+', unaryOps.ceil],\n  ['Clip', '', '6-10', unaryOps.clip, unaryOps.parseClipAttributes],\n  ['Clip', '', '11+', unaryOps.clipV11],\n  ['Concat', '', '4+', concat, parseConcatAttributes],\n  ['Conv', '', '1+', conv, parseConvAttributes],\n  ['ConvTranspose', '', '1+', convTranspose, parseConvTransposeAttributes],\n  ['Cos', '', '7+', unaryOps.cos],\n  ['Div', '', '7+', binaryOps.div],\n  ['Dropout', '', '7+', unaryOps.identity],\n  ['DepthToSpace', '', '1+', depthToSpace, parseDepthToSpaceAttributes],\n  ['Equal', '', '7+', binaryOps.equal],\n  ['Elu', '', '6+', unaryOps.elu, unaryOps.parseEluAttributes],\n  ['Exp', '', '6+', unaryOps.exp],\n  ['Flatten', '', '1+', flatten, parseFlattenAttributes],\n  ['Floor', '', '6+', unaryOps.floor],\n  ['FusedConv', 'com.microsoft', '1+', conv, parseConvAttributes],\n  ['Gather', '', '1+', gather, parseGatherAttributes],\n  ['Gemm', '', '7-10', gemm, parseGemmAttributesV7],\n  ['Gemm', '', '11+', gemm, parseGemmAttributesV11],\n  ['GlobalAveragePool', '', '1+', globalAveragePool, parseGlobalAveragePoolAttributes],\n  ['GlobalMaxPool', '', '1+', globalMaxPool],\n  ['Greater', '', '7+', binaryOps.greater],\n  ['Identity', '', '1+', unaryOps.identity],\n  ['ImageScaler', '', '1+', imageScaler, parseImageScalerAttributes],\n  ['InstanceNormalization', '', '6+', instanceNormalization, parseInstanceNormalizationAttributes],\n  ['LeakyRelu', '', '6+', unaryOps.leakyRelu, unaryOps.parseLeakyReluAttributes],\n  ['Less', '', '7+', binaryOps.less],\n  ['LRN', '', '1+', lrn, parseLrnAttributes],\n  ['Log', '', '6+', unaryOps.log],\n  ['MatMul', '', '1+', matMul, parseMatMulAttributes],\n  // TODO: support new attributes for MaxPool-8 and MaxPool-10\n  ['MaxPool', '', '1+', maxPool, parseMaxPoolAttributes],\n  ['Mul', '', '7+', binaryOps.mul],\n  ['Neg', '', '6+', unaryOps.neg],\n  ['Not', '', '1+', unaryOps.not],\n  ['Or', '', '7+', binaryOps.or],\n  ['Pad', '', '2-10', padV2, parsePadAttributesV2],\n  ['Pad', '', '11+', padV11, parsePadAttributesV11],\n  ['Pow', '', '7+', binaryOps.pow],\n  ['PRelu', '', '7+', binaryOps.pRelu],\n  ['ReduceLogSum', '', '1+', reduceLogSum, parseReduceAttributes],\n  ['ReduceMax', '', '1+', reduceMax, parseReduceAttributes],\n  ['ReduceMean', '', '1+', reduceMean, parseReduceAttributes],\n  ['ReduceMin', '', '1+', reduceMin, parseReduceAttributes],\n  ['ReduceProd', '', '1+', reduceProd, parseReduceAttributes],\n  ['ReduceSum', '', '1-12', reduceSum, parseReduceAttributes],\n  ['ReduceSumSquare', '', '1+', reduceLogSumSquare, parseReduceAttributes],\n  ['Relu', '', '6+', unaryOps.relu],\n  ['Reshape', '', '5+', reshape],\n  ['Resize', '', '10', resize, parseResizeAttributesV10],\n  ['Resize', '', '11+', resize, parseResizeAttributesV11],\n  ['Shape', '', '1+', shape],\n  ['Sigmoid', '', '6+', unaryOps.sigmoid],\n  ['Sin', '', '7+', unaryOps.sin],\n  ['Slice', '', '10+', sliceV10],  // TODO: support 'steps' for Slice-10\n  ['Slice', '', '1-9', slice, parseSliceAttributes],\n  // The \"semantic\" meaning of axis has changed in opset-13.\n  ['Softmax', '', '1-12', softmax, parseSoftmaxAttributes],\n  ['Softmax', '', '13+', softmaxV13, parseSoftmaxAttributesV13],\n  // 'Split' operator has an optional attribute 'split'\n  // this attribute determines how the specified axis of input data is split.\n  // When the attribute is missing, we need the count of number of outputs\n  // so that we can determine the 'split' attribute from the runtime input to the Operator\n  ['Split', '', '2-12', split, parseSplitAttributes],\n  ['Sqrt', '', '6+', unaryOps.sqrt],\n  ['Squeeze', '', '1-12', squeeze, parseSqueezeAttributes],\n  ['Squeeze', '', '13+', squeezeV13],\n  ['Sub', '', '7+', binaryOps.sub],\n  ['Sum', '', '6+', sum],\n  ['Tan', '', '7+', unaryOps.tan],\n  ['Tanh', '', '6+', unaryOps.tanh],\n  ['Tile', '', '6+', tile],\n  ['Transpose', '', '1+', transpose, parseTransposeAttributes],\n  ['Upsample', '', '7-8', upsample, parseUpsampleAttributesV7],\n  ['Upsample', '', '9', upsample, parseUpsampleAttributesV9],\n  ['Unsqueeze', '', '1-12', unsqueeze, parseUnsqueezeAttributes],\n  ['Unsqueeze', '', '13+', unsqueezeV13],\n  ['Xor', '', '7+', binaryOps.xor],\n];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface BatchNormalizationAttributes extends AttributeWithCacheKey {\n  epsilon: number;\n  momentum: number;\n  spatial: number;\n}\n\nconst batchNormalizationProgramMetadata = {\n  name: 'BatchNormalization',\n  inputNames: ['A', 'Scale', 'B', 'Mean', 'Variance'],\n  inputTypes:\n      [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked, TextureType.unpacked, TextureType.unpacked]\n};\n\nexport const batchNormalization: OperatorImplementation<BatchNormalizationAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: BatchNormalizationAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...batchNormalizationProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createBatchNormalizationProgramInfo(inferenceHandler, inputs, attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseBatchNormalizationAttributes: OperatorInitialization<BatchNormalizationAttributes> =\n    (node: Graph.Node): BatchNormalizationAttributes => {\n      const epsilon = node.attributes.getFloat('epsilon', 1e-5);\n      const momentum = node.attributes.getFloat('momentum', 0.9);\n      const spatial = node.attributes.getInt('spatial', 1);\n      return createAttributeWithCacheKey({epsilon, momentum, spatial});\n    };\n\nconst createBatchNormalizationProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: BatchNormalizationAttributes):\n        ProgramInfo => {\n          const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n          const rank = inputs[0].dims.length;\n          const [scaleWidth, scaleHeight] =\n              inferenceHandler.calculateTextureWidthAndHeight(inputs[1].dims, TextureType.unpacked);\n          const shaderSource = `\n  float process(int[${rank}] indices) {\n    vec2 position = offsetToCoords(indices[1], ${scaleWidth}, ${scaleHeight});\n    float scale = getColorAsFloat(${glsl.texture2D}(Scale, position));\n    float mean = getColorAsFloat(${glsl.texture2D}(Mean, position));\n    float variance = getColorAsFloat(${glsl.texture2D}(Variance, position));\n    float b = getColorAsFloat(${glsl.texture2D}(B, position));\n\n    return scale * ( (_A(indices) - mean) / sqrt(variance + float(${attributes.epsilon})) ) + b;\n  }`;\n          return {\n            ...batchNormalizationProgramMetadata,\n            output: {dims: inputs[0].dims, type: inputs[0].type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 5) {\n    throw new Error('BatchNormalization requires 5 inputs.');\n  }\n\n  const X = inputs[0];\n  const scale = inputs[1];\n  const B = inputs[2];\n  const mean = inputs[3];\n  const var_ = inputs[4];\n\n  // input should atleast have three dimensions - N,C,dim1,...,dimn\n  // other inputs can have only one dimensions\n  if (X.dims.length < 3 || scale.dims.length !== 1 || B.dims.length !== 1 || mean.dims.length !== 1 ||\n      var_.dims.length !== 1) {\n    throw new Error('invalid input shape.');\n  }\n  if (scale.dims[0] !== X.dims[1] || B.dims[0] !== X.dims[1] || mean.dims[0] !== X.dims[1] ||\n      var_.dims[0] !== X.dims[1]) {\n    throw new Error('invalid input shape.');\n  }\n  if ((X.type !== 'float32' && X.type !== 'float64') || (scale.type !== 'float32' && scale.type !== 'float64') ||\n      (B.type !== 'float32' && B.type !== 'float64') || (mean.type !== 'float32' && mean.type !== 'float64') ||\n      (var_.type !== 'float32' && var_.type !== 'float64')) {\n    throw new Error('invalid input tensor types.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\nimport {FunctionType, GlslValueFunction} from '../glsl-definitions';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\n\nexport function glslAdd(): GlslValueFunction {\n  const name = 'add_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a + b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 + v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslDiv(): GlslValueFunction {\n  const name = 'div_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a / b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 / v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslMul(): GlslValueFunction {\n  const name = 'mul_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a * b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 * v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSub(): GlslValueFunction {\n  const name = 'sub_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a - b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 - v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslEqual(): GlslValueFunction {\n  const name = 'equal_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a == b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4(equal(v1, v2));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslGreater(): GlslValueFunction {\n  const name = 'greater_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a > b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4( v1.r > v2.r ,\n      v1.g > v2.g,\n      v1.b > v2.b,\n      v1.a > v2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslLess(): GlslValueFunction {\n  const name = 'less_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a < b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4( v1.r < v2.r ,\n                v1.g < v2.g,\n                v1.b < v2.b,\n                v1.a < v2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslAnd(): GlslValueFunction {\n  const name = 'and_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) && bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r && b2.r ,\n                b1.g && b2.g,\n                b1.b && b2.b,\n                b1.a && b2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslOr(): GlslValueFunction {\n  const name = 'or_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) || bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r || b2.r ,\n                b1.g || b2.g,\n                b1.b || b2.b,\n                b1.a || b2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslXor(): GlslValueFunction {\n  const name = 'xor_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) ^^ bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r ^^ b2.r ,\n                b1.g ^^ b2.g,\n                b1.b ^^ b2.b,\n                b1.a ^^ b2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslPow(): GlslValueFunction {\n  return glslBuiltinBinary('pow');\n}\nexport function glslPRelu(): GlslValueFunction {\n  const name = 'prelu_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a < 0.0 ? a * b: a;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4(\n      v1.r < 0.0 ? v1.r * v2.r: v1.r,\n      v1.g < 0.0 ? v1.g * v2.g: v1.g,\n      v1.b < 0.0 ? v1.b * v2.b: v1.b,\n      v1.a < 0.0 ? v1.a * v2.a: v1.a\n      );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\n\nfunction glslBuiltinBinary(fname: string): GlslValueFunction {\n  const name = `${fname}_`;\n  const body = `\n  float ${name}(float a, float b) {\n    return ${fname}(a, b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return ${fname}(v1, v2);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\n\nconst createBinaryProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], glslFunc: GlslValueFunction,\n     outputTensorType: Tensor.DataType = inputs[0].type, cacheKey?: string): ProgramInfoLoader => {\n      const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n      return {\n        name: glslFunc.name,\n        inputNames: ['A', 'B'],\n        inputTypes: [textureType, textureType],\n        cacheHint: cacheKey,\n        get: () => createBinaryProgramInfo(handler, inputs, glslFunc, outputTensorType)\n      };\n    };\n\nconst createBinaryProgramInfo =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], glslFunc: GlslValueFunction,\n     outputTensorType: Tensor.DataType = inputs[0].type): ProgramInfo => {\n      const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n      const isBroadcast = !ShapeUtil.areEqual(inputs[0].dims, inputs[1].dims);\n      let outputShape = inputs[0].dims;\n\n      const usePackedTexture = handler.session.pack;\n\n      if (isBroadcast) {\n        const calculatedShape = BroadcastUtil.calcShape(inputs[0].dims, inputs[1].dims, false);\n        if (!calculatedShape) {\n          throw new Error('Can\\'t perform binary op on the given tensors');\n        }\n        outputShape = calculatedShape;\n        const outputRank = outputShape.length;\n        const aRank = inputs[0].dims.length !== 0 ? inputs[0].dims.length : 1;\n        const bRank = inputs[1].dims.length !== 0 ? inputs[1].dims.length : 1;\n        const aBcast = inputs[0].dims.length !== 0 ? 'bcastIndices_A(indices, aindices);' : 'aindices[0] = 0;';\n        const bBcast = inputs[1].dims.length !== 0 ? 'bcastIndices_B(indices, bindices);' : 'bindices[0] = 0;';\n\n        const glsl = getGlsl(handler.session.backend.glContext.version);\n        const shaderSource = usePackedTexture ? `\n      ${glslFunc.body}\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n        vec4 result = ${glslFunc.name}(a, b);\n        ${glsl.output} = result;\n      }` :\n                                                `\n      ${glslFunc.body}\n      float process(int indices[${outputRank}]) {\n        int aindices[${aRank}];\n        int bindices[${bRank}];\n        ${aBcast}\n        ${bBcast}\n        return ${glslFunc.name}(_A(aindices), _B(bindices));\n      }`;\n\n        return {\n          name: glslFunc.name,\n          inputNames: ['A', 'B'],\n          inputTypes: [textureType, textureType],\n          output: {dims: outputShape, type: outputTensorType, textureType},\n          shaderSource,\n          hasMain: usePackedTexture\n        };\n      }\n      const glsl = getGlsl(handler.session.backend.glContext.version);\n      const shaderSource = `\n    ${glslFunc.body}\n    void main() {\n      vec4 v1 = ${glsl.texture2D}(A, TexCoords);\n      vec4 v2 = ${glsl.texture2D}(B, TexCoords);\n      vec4 result = ${glslFunc.name}(v1, v2);\n      ${glsl.output} = result;\n    }\n    `;\n\n      return {\n        name: glslFunc.name,\n        inputNames: ['A', 'B'],\n        inputTypes: [textureType, textureType],\n        output: {dims: inputs[0].dims, type: outputTensorType, textureType},\n        shaderSource,\n        hasMain: true\n      };\n    };\n\nexport const add = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslAdd()), inputs)];\n\nexport const and = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslAnd(), 'bool'), inputs)];\n\nexport const div = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslDiv()), inputs)];\n\nexport const equal = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslEqual(), 'bool'), inputs)];\n\nexport const greater = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslGreater(), 'bool'), inputs)];\n\nexport const less = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslLess(), 'bool'), inputs)];\n\nexport const mul = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslMul()), inputs)];\n\nexport const or = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslOr(), 'bool'), inputs)];\n\nexport const pow = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslPow()), inputs)];\n\nexport const pRelu = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslPRelu()), inputs)];\n\nexport const sub = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslSub()), inputs)];\n\nexport const xor = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslXor(), 'bool'), inputs)];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ProtoUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const cast: OperatorImplementation<Tensor.DataType> =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], to: Tensor.DataType): Tensor[] => {\n      validateInputs(inputs);\n      return [handler.cast(inputs[0], to)];\n    };\n\nexport const parseCastAttributes: OperatorInitialization<Tensor.DataType> = (node: Graph.Node): Tensor.DataType =>\n    ProtoUtil.tensorDataTypeFromProto(node.attributes.getInt('to'));\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Cast requires 1 input.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('Invalid input type.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\nimport {getCoordsDataType, getGlChannels} from '../utils';\n\nimport {ConcatAttributes} from './concat';\nimport {getChannels, unpackFromChannel} from './packing-utils';\n\nconst createPackedConcatProgramMetadata = (inputCount: number, cacheHint: string) => ({\n  name: 'Concat (packed)',\n  inputNames: Array.from({length: inputCount}, (v, i) => `X${i}`),\n  inputTypes: Array(inputCount).fill(TextureType.packed),\n  cacheHint\n});\n\nconst createPackedConcatProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      if (axis >= inputShape.length || axis < (-1 * inputShape.length)) {\n        throw new Error('axis specified for concat doesn\\'t match input dimensionality');\n      }\n      if (axis < 0) {\n        axis = inputShape.length + axis;\n      }\n      // ensure all of the non-concatenated axes match each other\n      // calculate the shape of the output tensor while we do that\n      const outputShape = inputShape.slice(0);\n      for (let i = 1; i < inputs.length; i++) {\n        const dataNShape = inputs[i].dims.slice();\n        for (let axisIndex = 0; axisIndex < inputShape.length; axisIndex++) {\n          // add to the placeholder for computing output shape\n          if (axisIndex === axis) {\n            outputShape[axis] += dataNShape[axisIndex];\n          }\n          // ensure all non-cancatenated axes match each other\n          else if (inputShape[axisIndex] !== dataNShape[axisIndex]) {\n            throw new Error('non concat dimensions must match');\n          }\n        }\n      }\n\n      const rank = outputShape.length;\n      const coords = getChannels('coords', rank);\n      const dtype = getCoordsDataType(rank);\n      const unpackChannel = unpackFromChannel();\n\n      const shapes = inputs.map(i => i.dims);\n      const channels = getGlChannels(rank);\n      const offsets: number[] = new Array(shapes.length - 1);\n\n      offsets[0] = shapes[0][axis];\n      for (let i = 1; i < offsets.length; i++) {\n        offsets[i] = offsets[i - 1] + shapes[i][axis];\n      }\n\n      const channel = channels[axis];\n      const lastChannels = channels.slice(-2);\n      const allChannels = channels.join();\n\n      let getValueSnippet = `if (${channel} < ${offsets[0]}) {\n        return getChannel(\n            getX0(${allChannels}), vec2(${lastChannels.join()}));\n        }`;\n      for (let i = 1; i < offsets.length; i++) {\n        const shift = offsets[i - 1];\n        getValueSnippet += `\n            if (${channel} < ${offsets[i]}  && ${channel} >= ${offsets[i - 1]}) {\n              return getChannel(\n                getX${i}(${getShiftedChannelsSnippet(channels, channel, shift)}),\n                vec2(${getShiftedChannelsSnippet(lastChannels, channel, shift)}));\n            }`;\n      }\n      const lastIndex = offsets.length;\n      const shift = offsets[offsets.length - 1];\n      getValueSnippet += `\n            return getChannel(\n              getX${lastIndex}(${getShiftedChannelsSnippet(channels, channel, shift)}),\n              vec2(${getShiftedChannelsSnippet(lastChannels, channel, shift)}));`;\n\n      const glsl = getGlsl(handler.session.backend.glContext.version);\n\n      const shaderSource = `\n          ${unpackChannel}\n          float getValue(${channels.map(x => 'int ' + x)}) {\n            ${getValueSnippet}\n          }\n\n          void main() {\n            ${dtype} coords = getOutputCoords();\n            int lastDim = coords.${channels[rank - 1]};\n            coords.${channels[rank - 1]} = coords.${channels[rank - 2]};\n            coords.${channels[rank - 2]} = lastDim;\n\n            vec4 result = vec4(getValue(${coords}), 0., 0., 0.);\n\n            ${coords[rank - 1]} = ${coords[rank - 1]} + 1;\n            if (${coords[rank - 1]} < ${outputShape[rank - 1]}) {\n              result.g = getValue(${coords});\n            }\n\n            ${coords[rank - 2]} = ${coords[rank - 2]} + 1;\n            if (${coords[rank - 2]} < ${outputShape[rank - 2]}) {\n              result.a = getValue(${coords});\n            }\n\n            ${coords[rank - 1]} = ${coords[rank - 1]} - 1;\n            if (${coords[rank - 2]} < ${outputShape[rank - 2]} &&\n                ${coords[rank - 1]} < ${outputShape[rank - 1]}) {\n              result.b = getValue(${coords});\n            }\n            ${glsl.output} = result;\n          }\n        `;\n\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n        shaderSource,\n        hasMain: true,\n      };\n    };\n\nexport const createPackedConcatProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): ProgramInfoLoader => {\n      const metadata = createPackedConcatProgramMetadata(inputs.length, attributes.cacheKey);\n      return {...metadata, get: () => createPackedConcatProgramInfo(handler, metadata, inputs, attributes.axis)};\n    };\n\nconst getShiftedChannelsSnippet = (channels: string[], channel: string, shift: number): string => {\n  const channelIdx = channels.indexOf(channel);\n  const res = channels.map((c, idx) => {\n    if (idx === channelIdx) {\n      return `${c} - ${shift}`;\n    } else {\n      return c;\n    }\n  });\n  return res.join();\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {createPackedConcatProgramInfoLoader} from './concat-packed';\n\nexport interface ConcatAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n}\n\nexport const concat: OperatorImplementation<ConcatAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): Tensor[] => {\n      validateInputs(inputs);\n      if (inferenceHandler.session.pack && inputs[0].dims.length > 1) {\n        const output =\n            inferenceHandler.run(createPackedConcatProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n        return [output];\n      } else {\n        const output =\n            inferenceHandler.run(createUnpackedConcatProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n        return [output];\n      }\n    };\n\nconst createUnpackedConcatProgramMetadata = (inputCount: number, cacheHint: string) => ({\n  name: 'Concat',\n  inputNames: Array.from({length: inputCount}, (v, i) => `X${i}`),\n  inputTypes: Array(inputCount).fill(TextureType.unpacked),\n  cacheHint\n});\n\nconst createUnpackedConcatProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      if (axis >= inputShape.length || axis < (-1 * inputShape.length)) {\n        throw new Error('axis specified for concat doesn\\'t match input dimensionality');\n      }\n      if (axis < 0) {\n        axis = inputShape.length + axis;\n      }\n      // ensure all of the non-concatenated axes match each other\n      // calculate the shape of the output tensor while we do that\n      const outputShape = inputShape.slice(0);\n      for (let i = 1; i < inputs.length; i++) {\n        const dataNShape = inputs[i].dims.slice();\n        for (let axisIndex = 0; axisIndex < inputShape.length; axisIndex++) {\n          // add to the placeholder for computing output shape\n          if (axisIndex === axis) {\n            outputShape[axis] += dataNShape[axisIndex];\n          }\n          // ensure all non-cancatenated axes match each other\n          else if (inputShape[axisIndex] !== dataNShape[axisIndex]) {\n            throw new Error('non concat dimensions must match');\n          }\n        }\n      }\n\n      const rank = outputShape.length;\n\n      const sizeInConcatAxis = new Array<number>(inputs.length);\n      let previousSum = 0;\n      for (let i = 0; i < sizeInConcatAxis.length; ++i) {\n        previousSum += inputs[i].dims[axis];\n        sizeInConcatAxis[i] = previousSum;\n      }\n\n      let getTextureIndexWhereDataResidesMethod = '';\n      // in most cases linear search is sufficient, as in most scenarios, only 2 tensors are concatenated\n      if (inputs.length < 5) {\n        getTextureIndexWhereDataResidesMethod = getTextureIndexWhereDataResidesLinearSearch(sizeInConcatAxis);\n      } else {\n        getTextureIndexWhereDataResidesMethod = getTextureIndexWhereDataResidesBinarySearch(sizeInConcatAxis);\n      }\n\n      const fetchDataFromCorrectTextureMethod = getFetchDataFromCorrectTextureMethod(inputs.length, rank);\n      const getSizeInConcatAxisValueFromIndexMethod = getGetSizeInConcatAxisValueFromIndexMethod(sizeInConcatAxis);\n      const shaderSource = `\n        ${fetchDataFromCorrectTextureMethod}\n        ${getSizeInConcatAxisValueFromIndexMethod}\n        ${getTextureIndexWhereDataResidesMethod}\n        float process(int indices[${rank}]) {\n          int textureIndex = getTextureWhereDataResides (indices[${axis}]);\n\n          if(textureIndex != 0) {\n            indices[${axis}] = indices[${axis}] - int(getSizeInConcatAxisValueFromIndex(textureIndex-int(1)));\n          }\n\n          return fetchDataFromCorrectTexture(textureIndex, indices);\n        }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n      };\n    };\n\nconst createUnpackedConcatProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): ProgramInfoLoader => {\n      const metadata = createUnpackedConcatProgramMetadata(inputs.length, attributes.cacheKey);\n      return {...metadata, get: () => createUnpackedConcatProgramInfo(handler, metadata, inputs, attributes.axis)};\n    };\n\nconst getTextureIndexWhereDataResidesLinearSearch = (sizeInConcatAxis: number[]): string => {\n  const searchAxis = sizeInConcatAxis.map((size, i) => `if(index<${size}) {return ${i};}\n`);\n  return `int getTextureWhereDataResides(int index) {\n      ${searchAxis.join('')}\n    }`;\n};\n\n// TODO: Implement BinarySearch in GLSL\nconst getTextureIndexWhereDataResidesBinarySearch = (sizeInConcatAxis: number[]): string =>\n    getTextureIndexWhereDataResidesLinearSearch(sizeInConcatAxis);\n\nconst getFetchDataFromCorrectTextureMethod = (numberOfTensors: number, tensorRank: number) => {\n  const codeLines: string[] = [`float fetchDataFromCorrectTexture(int textureIndex, int indices[${tensorRank}]) {`];\n  for (let i = 0; i < numberOfTensors; ++i) {\n    if (i === 0) {\n      codeLines.push(\n          '\\t' +\n          `if (textureIndex == ${i}) { return _X${i}(indices); }`);\n    } else if (i === numberOfTensors - 1) {\n      codeLines.push(\n          '\\t' +\n          `else { return _X${i}(indices); }`);\n    } else {\n      codeLines.push(\n          '\\t' +\n          `else if (textureIndex == ${i}) { return _X${i}(indices); }`);\n    }\n  }\n  codeLines.push(\n      '\\t' +\n      '}');\n  return codeLines.join('\\n');\n};\n\nconst getGetSizeInConcatAxisValueFromIndexMethod = (sizeInConcatAxis: number[]): string => {\n  const codeLines: string[] = ['int getSizeInConcatAxisValueFromIndex(int index) {'];\n  for (let i = 0; i < sizeInConcatAxis.length; ++i) {\n    if (i === 0) {\n      codeLines.push(\n          '\\t' +\n          `if (index == ${i}) { return ${sizeInConcatAxis[i]}; }`);\n    } else if (i === sizeInConcatAxis.length - 1) {\n      codeLines.push(\n          '\\t' +\n          `else { return ${sizeInConcatAxis[i]}; }`);\n    } else {\n      codeLines.push(\n          '\\t' +\n          `else if (index == ${i}) { return ${sizeInConcatAxis[i]}; }`);\n    }\n  }\n  codeLines.push(\n      '\\t' +\n      '}');\n\n  return codeLines.join('\\n');\n};\n\nexport const parseConcatAttributes: OperatorInitialization<ConcatAttributes> = (node: Graph.Node): ConcatAttributes =>\n    createAttributeWithCacheKey({axis: node.attributes.getInt('axis')});\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length < 1) {\n    throw new Error('too few inputs');\n  }\n\n  const inputType = inputs[0].type;\n  const inputDimensionality = inputs[0].dims.length;\n\n  // TODO: Support string concat\n  if (inputType === 'string') {\n    throw new Error('string tensor is not supported yet');\n  }\n\n  for (const input of inputs) {\n    // make sure types of all inputs match\n    if (input.type !== inputType) {\n      throw new Error('input tensors should be one type');\n    }\n\n    // make sure the dimensionality of all inputs are the same\n    if (input.dims.length !== inputDimensionality) {\n      throw new Error('input tensors should have the same shape');\n    }\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../../instrument';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {calculateOutputShape, ConvAttributes} from './conv';\nimport {getActivationSnippet} from './fuse-utils';\n\nconst createUnpackedGroupedConvProgramMetadata = (hasBias: boolean, cacheHint: string): ProgramMetadata => ({\n  name: 'GroupedConv',\n  inputNames: hasBias ? ['X', 'W', 'Bias'] : ['X', 'W'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.unpacked],\n  cacheHint\n});\n\nconst createUnpackedGroupedConvProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], metadata: ProgramMetadata,\n     attributes: ConvAttributes): ProgramInfo => {\n      const hasBias = inputs.length > 2;\n      const processBias = hasBias ? 'value += getBias(output_channel);' : '';\n      const xShape = inputs[0].dims.slice();\n      const wShape = inputs[1].dims.slice();\n      const outputChannelsPerGroup = wShape[0] / attributes.group;\n      Logger.verbose(\n          'GroupedConv',\n          `autpPad:${attributes.autoPad}, dilations:${attributes.dilations}, group:${attributes.group}, kernelShape:${\n              attributes.kernelShape}, pads:${attributes.pads}, strides:${attributes.strides}`);\n      const outputShape =\n          calculateOutputShape(xShape, wShape, attributes.dilations, attributes.pads, attributes.strides);\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const {activationFunction, applyActivation} = getActivationSnippet(attributes);\n\n      const shaderSource = `\n  const ivec2 strides = ivec2(${attributes.strides[0]}, ${attributes.strides[1]});\n  const ivec2 pads = ivec2(${attributes.pads[0]}, ${attributes.pads[1]});\n  ${activationFunction}\n  void main() {\n    ivec4 coords = getOutputCoords();\n    int batch = coords.x;\n    int output_channel = coords.y;\n    ivec2 xRCCorner = coords.zw * strides - pads;\n    int group_id = output_channel / ${outputChannelsPerGroup};\n\n    float value = 0.0;\n    for (int wInChannel = 0; wInChannel < ${wShape[1]}; wInChannel++) {\n      int input_channel = group_id * ${wShape[1]} + wInChannel;\n      for (int wHeight = 0; wHeight < ${wShape[2]}; wHeight++) {\n        int xHeight = xRCCorner.x + wHeight * ${attributes.dilations[0]};\n\n        if (xHeight < 0 || xHeight >= ${xShape[2]}) {\n          continue;\n        }\n\n        for (int wWidth = 0; wWidth < ${wShape[3]}; wWidth++) {\n          int xWidth = xRCCorner.y + wWidth * ${attributes.dilations[1]};\n          if (xWidth < 0 || xWidth >= ${xShape[3]}) {\n            continue;\n          }\n\n          float xVal = getX(batch, input_channel, xWidth, xHeight);\n          float wVal = getW(output_channel, wInChannel, wWidth, wHeight);\n          value += xVal*wVal;\n        }\n      }\n    }\n    ${processBias}\n    ${applyActivation}\n    ${glsl.output} = vec4(value, .0, .0, .0);\n  }\n`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n        hasMain: true,\n      };\n    };\n\nexport const createUnpackedGroupedConvProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes):\n        ProgramInfoLoader => {\n          const metadata = createUnpackedGroupedConvProgramMetadata(inputs.length > 2, attributes.cacheKey);\n          return {\n            ...metadata,\n            get: () => createUnpackedGroupedConvProgramInfo(inferenceHandler, inputs, metadata, attributes)\n          };\n        };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nimport {calculateOutputShape, ConvAttributes} from './conv';\nimport {createPackedIm2ColProgramInfoLoader} from './im2col-pack';\nimport {createPackedMatmulProgramInfoLoader} from './matmul-pack';\n\nexport const conv2DPackedPointwise =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n      const reshapedX = inferenceHandler.reshapePacked(inputs[0], [xshape[1], xshape[2] * xshape[3]]);\n      const reshapedK = inferenceHandler.reshapePacked(inputs[1], [kshape[0], kshape[1]]);\n\n      const matmulInputs = inputs.length > 2 ? [reshapedK, reshapedX, inputs[2]] : [reshapedK, reshapedX];\n      const matmulOutput = inferenceHandler.run(\n          createPackedMatmulProgramInfoLoader(inferenceHandler, matmulInputs, attributes), matmulInputs);\n      return inferenceHandler.reshapePacked(matmulOutput, outputShape);\n    };\n\nexport const conv2DPacked =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n\n      // run im2col\n      const im2colOutput = inferenceHandler.run(\n          createPackedIm2ColProgramInfoLoader(inferenceHandler, inputs[0], inputs[1], outputShape, attributes),\n          [inputs[0]]);\n\n      // reshape kernel\n      const kernelReshaped = inferenceHandler.reshapePacked(inputs[1], [kshape[0], kshape[1] * kshape[2] * kshape[3]]);\n\n      // run matmul\n      const matmulInputs =\n          (inputs.length === 3) ? [kernelReshaped, im2colOutput, inputs[2]] : [kernelReshaped, im2colOutput];\n      const matmulOutput = inferenceHandler.run(\n          createPackedMatmulProgramInfoLoader(inferenceHandler, matmulInputs, attributes), matmulInputs);\n\n      // reshape output\n      const outputReshaped = inferenceHandler.reshapePacked(matmulOutput, outputShape);\n      return outputReshaped;\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {InferenceHandler} from '../../../backend';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {ConvAttributes} from './conv';\nimport {getActivationSnippet, parseInternalActivationAttributes} from './fuse-utils';\n\nconst computeTotalPad =\n    (inDim: number, stride: number, adj: number, kernel: number, dilation: number, outSize: number) =>\n        (inDim - 1) * stride + adj + (kernel - 1) * dilation + 1 - outSize;\n\nconst distributePadding = (totalPad: number, autoPad: string, pads: number[], head: number, tail: number) => {\n  const smallPad = Math.floor(totalPad / 2);\n  if (autoPad === 'SAME_UPPER') {\n    pads[head] = smallPad;\n    pads[tail] = totalPad - smallPad;\n  } else if (autoPad === 'SAME_LOWER') {\n    pads[head] = totalPad - smallPad;\n    pads[tail] = smallPad;\n  }\n};\n\nconst calculateOutputShapeAndPads =\n    (inputShape: readonly number[], kernelShape: readonly number[], dilations: readonly number[], autoPad: string,\n     pads: number[], strides: readonly number[], outputPadding: readonly number[], outputShape: number[]) => {\n      const spatialRank = inputShape.length - 2;\n      const updateShape = outputShape.length === 0;\n      for (let i = 0; i < spatialRank; ++i) {\n        const outSize = updateShape ? inputShape[i + 2] * strides[i] : outputShape[i];\n        const totalPad = computeTotalPad(inputShape[i + 2], strides[i], pads[i], kernelShape[i], dilations[i], outSize);\n        distributePadding(totalPad, autoPad, pads, i, i + spatialRank);\n        if (updateShape) {\n          outputShape.push(\n              strides[i] * (inputShape[i + 2] - 1) + outputPadding[i] + (kernelShape[i] - 1) * dilations[i] + 1 -\n              pads[i] - pads[i + spatialRank]);\n        }\n      }\n    };\n\nexport interface ConvTransposeAttributes extends ConvAttributes {\n  readonly outputPadding: readonly number[];\n  readonly outputShape: readonly number[];\n}\n\nexport const convTranspose: OperatorImplementation<ConvTransposeAttributes> =\n    (inferenceHandler: InferenceHandler, inputs: Tensor[], attributes: ConvTransposeAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);  // currently will fail if not convTranspose2D\n      return convTranspose2d(inferenceHandler, inputs, attributes);\n    };\n\nconst convTranspose2d: OperatorImplementation<ConvTransposeAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConvTransposeAttributes): Tensor[] => {\n      const adjustedAttributes = getAdjustedConvTransposeAttributes(attributes, inputs);\n      return [convTranspose2DUnpacked(inferenceHandler, inputs, adjustedAttributes)];\n    };\n\nconst createConvTransposeProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\n  name: 'ConvTranspose',\n  inputNames: hasBias ? ['X', 'W', 'B'] : ['X', 'W'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.unpacked],\n  cacheHint\n});\n\nconst createUnpackedConvTransposeProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], metadata: ProgramMetadata,\n     attributes: ConvTransposeAttributes): ProgramInfo => {\n      const hasBias = inputs.length > 2;\n      const valueInit = hasBias ? 'getB(output_channel)' : '0.0';\n      const xShape = inputs[0].dims;\n      const wShape = inputs[1].dims;\n      const outputChannelsPerGroup = wShape[1];\n      const inputChannelsPerGroup = wShape[0] / attributes.group;\n      const outputShape = [inputs[0].dims[0], inputs[1].dims[1] * attributes.group, ...attributes.outputShape];\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const {activationFunction, applyActivation} = getActivationSnippet(attributes);\n\n      const shaderSource = `\n  const ivec2 strides = ivec2(${attributes.strides[0]}, ${attributes.strides[1]});\n  const ivec2 pads = ivec2(${attributes.pads[0]}, ${attributes.pads[1]});\n  ${activationFunction}\n  void main() {\n    ivec4 coords = getOutputCoords();\n    int batch = coords.x;\n    int output_channel = coords.y;\n\n    ivec2 loc = coords.zw + pads;\n\n    int group_id = output_channel / ${outputChannelsPerGroup};\n    int wOutChannel = output_channel - group_id * ${outputChannelsPerGroup};\n\n    float value = ${valueInit};\n    for (int inChannelOffset = 0; inChannelOffset < ${inputChannelsPerGroup}; inChannelOffset++) {\n      int input_channel = group_id * ${inputChannelsPerGroup} + inChannelOffset;\n      for (int wWOff = 0; wWOff < ${wShape[2]}; wWOff++) {\n        for (int wHOff = 0; wHOff < ${wShape[3]}; wHOff++) {\n          ivec2 wOff = ivec2(wWOff * ${attributes.dilations[0]}, wHOff * ${attributes.dilations[1]});\n          ivec2 wLoc = loc - wOff;\n          ivec2 wLocIn = wLoc / strides;\n          if (\n            wLocIn * strides == wLoc &&\n            wLocIn.x >= 0 && wLocIn.x < ${xShape[2]} &&\n            wLocIn.y >= 0 && wLocIn.y < ${xShape[3]}\n          ) {\n            float xVal = getX(batch, input_channel, wLocIn.y, wLocIn.x);\n            float wVal = getW(input_channel, wOutChannel, wHOff, wWOff);\n            value += xVal * wVal;\n          }\n        }\n      }\n    }\n    ${applyActivation}\n    ${glsl.output} = vec4(value, .0, .0, .0);\n  }\n`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n        hasMain: true,\n      };\n    };\n\nconst createUnpackedConvTransposeProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvTransposeAttributes):\n        ProgramInfoLoader => {\n          const metadata = createConvTransposeProgramMetadata(inputs.length > 2, attributes.cacheKey);\n          return {\n            ...metadata,\n            get: () => createUnpackedConvTransposeProgramInfo(inferenceHandler, inputs, metadata, attributes)\n          };\n        };\n\n\nconst convTranspose2DUnpacked =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvTransposeAttributes):\n        Tensor => {\n          const result = inferenceHandler.run(\n              createUnpackedConvTransposeProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n          return result;\n        };\n\nconst getAdjustedConvTransposeAttributes = <T extends ConvTransposeAttributes>(attributes: T, inputs: Tensor[]): T => {\n  const kernelShape = attributes.kernelShape.slice();\n  // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\n  if (attributes.kernelShape.length === 0) {\n    for (let i = 2; i < inputs[1].dims.length; ++i) {\n      kernelShape.push(inputs[1].dims[i]);\n    }\n  }\n\n  const pads = attributes.pads.slice();\n  const outputShape = attributes.outputShape.slice();\n  const inputShape = inputs[0].dims;\n  // If outputShape is not specified in the attributes of this op, infer it from the parameters\n  // Similarly, automatically infer pads if not specified\n  calculateOutputShapeAndPads(\n      inputShape, kernelShape, attributes.dilations, attributes.autoPad, pads, attributes.strides,\n      attributes.outputPadding, outputShape);\n\n  // always return a new object so does not modify the original attributes\n  const newAttributes: T = Object.assign({}, attributes);\n  Object.assign(newAttributes, {kernelShape, pads, outputShape, cacheKey: attributes.cacheKey});\n  return newAttributes;\n};\n\nexport const parseConvTransposeAttributes: OperatorInitialization<ConvTransposeAttributes> =\n    (node: Graph.Node): ConvTransposeAttributes => {\n      const attributes = node.attributes;\n      const activationAttributes = parseInternalActivationAttributes(attributes);\n      // TODO : Make this generic enough to compute default attributes for multi-dimensional conv\n      const autoPad = attributes.getString('auto_pad', 'NOTSET');\n      const dilations = attributes.getInts('dilations', [1, 1]);\n      const group = attributes.getInt('group', 1);\n      const kernelShape = attributes.getInts('kernel_shape', []);\n      const outputPadding = attributes.getInts('output_padding', [0, 0]);\n      const outputShape = attributes.getInts('output_shape', []);\n      const pads = attributes.getInts('pads', [0, 0, 0, 0]);\n      const strides = attributes.getInts('strides', [1, 1]);\n\n      return createAttributeWithCacheKey(\n          {autoPad, dilations, group, kernelShape, outputPadding, outputShape, pads, strides, ...activationAttributes});\n    };\n\nconst validateInputs = (inputs: Tensor[], attributes: ConvTransposeAttributes): void => {\n  // Refer to the below link for all input checks\n  // https://github.com/onnx/onnx/blob/main/docs/Operators.md#Conv\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Conv requires 2 or 3 inputs');\n  }\n\n  // TODO : Need to add support for multi-dimensional conv\n  if (inputs[0].dims.length !== 4 || inputs[1].dims.length !== 4) {\n    throw new Error('currently only support 2-dimensional conv');\n  }\n\n  // FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\n  const dataChannel = inputs[0].dims[1];\n  const filterInChannel = inputs[1].dims[0];\n  if (dataChannel !== filterInChannel) {\n    throw new Error('FILTER_IN_CHANNEL should be equal to DATA_CHANNEL');\n  }\n\n  const featureMaps = inputs[1].dims[1] * attributes.group;\n\n  // if bias is provided it should be 1D and the number of elements should be equal to the number of feature maps\n  if (inputs.length === 3 && (inputs[2].dims.length !== 1 || inputs[2].dims[0] !== featureMaps)) {\n    throw new Error('invalid bias');\n  }\n\n  const spatialRank = inputs[0].dims.length - 2;\n  // wrong dilations dimension\n  if (attributes.dilations.length !== spatialRank) {\n    throw new Error(`dilations should be ${spatialRank}D`);\n  }\n\n  // Wrong strides dimension\n  if (attributes.strides.length !== spatialRank) {\n    throw new Error(`strides should be ${spatialRank}D`);\n  }\n\n  // Wrong pads dimension\n  if (attributes.pads.length !== spatialRank * 2) {\n    throw new Error(`pads should be ${spatialRank * 2}D`);\n  }\n\n  // Wrong output padding dimension\n  if (attributes.outputPadding.length !== spatialRank) {\n    throw new Error(`output_padding should be ${spatialRank}D`);\n  }\n\n  // if kernelShape is specified, it's data length must be 2 less than dims length of the weights tensor\n  // (the first 2 dims are batch_size and channels)\n  if (attributes.kernelShape.length !== 0 && attributes.kernelShape.length !== inputs[1].dims.length - 2) {\n    throw new Error('invalid kernel shape');\n  }\n\n  // as with kernelShape, must have same number of spatial dims as input\n  if (attributes.outputShape.length !== 0 && attributes.outputShape.length !== inputs[0].dims.length - 2) {\n    throw new Error('invalid output shape');\n  }\n\n  // TODO : Need to add support for float64\n  if (inputs[0].type !== 'float32' || inputs[1].type !== 'float32') {\n    throw new Error('ConvTranspose input(X,W) should be float tensor');\n  }\n\n  if (inputs.length === 3 && inputs[2].type !== 'float32') {\n    throw new Error('ConvTranspose input(bias) should be float tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {InferenceHandler} from '../../../backend';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {PoolConvUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nimport {createUnpackedGroupedConvProgramInfoLoader} from './conv-grouped';\nimport {conv2DPacked} from './conv-pack';\nimport {createDotProductProgramInfoLoader} from './dot-product';\nimport {InternalActivationAttributes, parseInternalActivationAttributes} from './fuse-utils';\nimport {createIm2ColProgramInfoLoader} from './im2col';\nimport {createMatmulProgramInfoLoader} from './matmul';\n\n\nexport const calculateOutputShape =\n    (inputShape: readonly number[], kernelShape: readonly number[], dilations: readonly number[],\n     adjustPads: readonly number[], strides: readonly number[]): number[] => {\n      const batchSize = inputShape[0];\n      const inputSpatialShape = inputShape.slice(2);\n      const spatialRank = inputSpatialShape.length;\n      const outChannels = kernelShape[0];\n      const kernelSpatialShape = kernelShape.slice(2);\n      const dilatedKernelShape = kernelSpatialShape.map((v, i) => v + (v - 1) * (dilations[i] - 1));\n      const inputSpatialShapeWithPad = inputSpatialShape.map((v, i) => v + adjustPads[i] + adjustPads[i + spatialRank]);\n      const outputSpatialShape =\n          inputSpatialShapeWithPad.map((v, i) => Math.floor((v - dilatedKernelShape[i] + strides[i]) / strides[i]));\n      const outputShape = [batchSize, outChannels].concat(...outputSpatialShape);\n      return outputShape;\n    };\n\nexport interface ConvAttributes extends InternalActivationAttributes, AttributeWithCacheKey {\n  readonly autoPad: string;\n  readonly dilations: readonly number[];\n  readonly group: number;\n  readonly kernelShape: readonly number[];\n  readonly pads: readonly number[];\n  readonly strides: readonly number[];\n}\n\nexport const conv: OperatorImplementation<ConvAttributes> =\n    (inferenceHandler: InferenceHandler, inputs: Tensor[], attributes: ConvAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);  // currently will fail if not conv2D\n      return conv2d(inferenceHandler, inputs, attributes);\n    };\n\nconst conv2d: OperatorImplementation<ConvAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConvAttributes): Tensor[] => {\n      const adjustedAttributes = getAdjustedConvAttributes(attributes, inputs);\n      const packMode = inferenceHandler.session.pack;\n      const isPointwise = adjustedAttributes.kernelShape[0] === 1 && adjustedAttributes.kernelShape[1] === 1;\n      if (adjustedAttributes.group > 1) {\n        const result = inferenceHandler.run(\n            createUnpackedGroupedConvProgramInfoLoader(inferenceHandler, inputs, adjustedAttributes), inputs);\n        return [result];\n      } else if (isPointwise && packMode) {\n        return [conv2DUnpackedPointwise(inferenceHandler, inputs, adjustedAttributes)];\n      } else if (packMode && inputs[0].dims.length === 4 && inputs[0].dims[0] === 1 && !isPointwise) {\n        return [conv2DPacked(inferenceHandler, inputs, adjustedAttributes)];\n      } else {\n        return [conv2DUnpacked(inferenceHandler, inputs, adjustedAttributes)];\n      }\n    };\n\nconst conv2DUnpackedPointwise =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n      const reshapedX = inferenceHandler.reshapeUnpacked(inputs[0], [xshape[1], xshape[2] * xshape[3]]);\n      const reshapedK = inferenceHandler.reshapeUnpacked(inputs[1], [kshape[0], kshape[1]]);\n\n      const matmulInputs = inputs.length > 2 ? [reshapedK, reshapedX, inputs[2]] : [reshapedK, reshapedX];\n      const matmulOutput = inferenceHandler.run(createMatmulProgramInfoLoader(matmulInputs, attributes), matmulInputs);\n      return inferenceHandler.reshapeUnpacked(matmulOutput, outputShape);\n    };\n\nconst conv2DUnpacked =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n      const xIm2Col = inferenceHandler.run(\n          createIm2ColProgramInfoLoader(inferenceHandler, inputs[0], inputs[1], outputShape, attributes), [inputs[0]]);\n\n      const dotProductInputs = inputs.length === 3 ? [xIm2Col, inputs[1], inputs[2]] : [xIm2Col, inputs[1]];\n      const output = inferenceHandler.run(\n          createDotProductProgramInfoLoader(inferenceHandler, inputs, outputShape, attributes), dotProductInputs);\n      return output;\n    };\n\nconst getAdjustedConvAttributes = <T extends ConvAttributes>(attributes: T, inputs: Tensor[]): T => {\n  const kernelShape = attributes.kernelShape.slice();\n  // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\n  if (attributes.kernelShape.length === 0) {\n    for (let i = 2; i < inputs[1].dims.length; ++i) {\n      kernelShape.push(inputs[1].dims[i]);\n    }\n  }\n  const pads = attributes.pads.slice();\n  PoolConvUtil.adjustPadsBasedOnAutoPad(\n      inputs[0].dims, attributes.strides, attributes.dilations, kernelShape, pads, attributes.autoPad);\n\n  // always return a new object so does not modify the original attributes\n  const newAttributes: T = Object.assign({}, attributes);\n  Object.assign(newAttributes, {kernelShape, pads, cacheKey: attributes.cacheKey});\n  return newAttributes;\n};\n\nexport const parseConvAttributes: OperatorInitialization<ConvAttributes> = (node: Graph.Node): ConvAttributes => {\n  const attributes = node.attributes;\n  const activationAttributes = parseInternalActivationAttributes(attributes);\n  // TODO : Make this generic enough to compute default attributes for multi-dimensional conv\n  const autoPad = attributes.getString('auto_pad', 'NOTSET');\n  const dilations = attributes.getInts('dilations', [1, 1]);\n  const group = attributes.getInt('group', 1);\n  const kernelShape = attributes.getInts('kernel_shape', []);\n  const pads = attributes.getInts('pads', [0, 0, 0, 0]);\n  const strides = attributes.getInts('strides', [1, 1]);\n\n  return createAttributeWithCacheKey({autoPad, dilations, group, kernelShape, pads, strides, ...activationAttributes});\n};\n\nconst validateInputs = (inputs: Tensor[], attributes: ConvAttributes): void => {\n  // Refer to the below link for all input checks\n  // https://github.com/onnx/onnx/blob/main/docs/Operators.md#Conv\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Conv requires 2 or 3 inputs');\n  }\n\n  // TODO : Need to add support for multi-dimensional conv\n  if (inputs[0].dims.length !== 4 || inputs[1].dims.length !== 4) {\n    throw new Error('currently only support 2-dimensional conv');\n  }\n\n  // FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\n  const dataChannel = inputs[0].dims[1];\n  const filterInChannel = inputs[1].dims[1] * attributes.group;\n  if (dataChannel !== filterInChannel) {\n    throw new Error('FILTER_IN_CHANNEL should be equal to DATA_CHANNEL');\n  }\n\n  // if bias is provided it should be 1D and the number of elements should be equal to the number of feature maps\n  if (inputs.length === 3 && (inputs[2].dims.length !== 1 || inputs[1].dims[0] !== inputs[2].dims[0])) {\n    throw new Error('invalid bias');\n  }\n\n  const spatialRank = inputs[0].dims.length - 2;\n  // wrong dilations dimension\n  if (attributes.dilations.length !== spatialRank) {\n    throw new Error(`dilations should be ${spatialRank}D`);\n  }\n\n  // Wrong strides dimension\n  if (attributes.strides.length !== spatialRank) {\n    throw new Error(`strides should be ${spatialRank}D`);\n  }\n\n  // Wrong pads dimension\n  if (attributes.pads.length !== spatialRank * 2) {\n    throw new Error(`pads should be ${spatialRank * 2}D`);\n  }\n\n  // if kernelShape is specified, it's data length must be 2 less than dims length of the weights tensor\n  // (the first 2 dims are batch_size and channels)\n  if (attributes.kernelShape.length !== 0 && attributes.kernelShape.length !== inputs[1].dims.length - 2) {\n    throw new Error('invalid kernel shape');\n  }\n\n  // TODO : Need to add support for float64\n  if (inputs[0].type !== 'float32' || inputs[1].type !== 'float32') {\n    throw new Error('Conv input(X,W) should be float tensor');\n  }\n\n  if (inputs.length === 3 && inputs[2].type !== 'float32') {\n    throw new Error('Conv input(bias) should be float tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nimport {transpose, TransposeAttributes} from './transpose';\n\nexport interface DepthToSpaceAttributes {\n  mode: 'DCR'|'CRD';\n  blocksize: number;\n}\n\nexport const depthToSpace: OperatorImplementation<DepthToSpaceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: DepthToSpaceAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const blocksize = attributes.blocksize;\n      const blocksizeSqr = blocksize * blocksize;\n      const transposePerm = attributes.mode === 'DCR' ? [0, 3, 4, 1, 5, 2] : [0, 1, 4, 2, 5, 3];\n      const firstReshapeShape = attributes.mode === 'DCR' ?\n          [\n            inputs[0].dims[0], blocksize, blocksize, inputs[0].dims[1] / blocksizeSqr, inputs[0].dims[2],\n            inputs[0].dims[3]\n          ] :\n          [\n            inputs[0].dims[0], inputs[0].dims[1] / blocksizeSqr, blocksize, blocksize, inputs[0].dims[2],\n            inputs[0].dims[3]\n          ];\n\n      // const transpose = new WebGLTranspose();\n      // const attributes = new Attribute(undefined);\n      // attributes.set('perm', 'ints', transposePerm);\n      // transpose.initialize(attributes);\n\n      // First reshape\n      const firstReshapedTensor = inferenceHandler.reshapeUnpacked(inputs[0], firstReshapeShape);\n\n      // transpose\n      const transposeAttributes: TransposeAttributes = {perm: transposePerm, cacheKey: `${transposePerm}`};\n      const [transposeOutput] = transpose(inferenceHandler, [firstReshapedTensor], transposeAttributes);\n\n      // Second reshape\n      const secondReshapeShape = [\n        inputs[0].dims[0], inputs[0].dims[1] / blocksizeSqr, inputs[0].dims[2] * blocksize,\n        inputs[0].dims[3] * blocksize\n      ];\n      const result = inferenceHandler.reshapeUnpacked(transposeOutput, secondReshapeShape);\n      return [result];\n    };\n\nexport const parseDepthToSpaceAttributes: OperatorInitialization<DepthToSpaceAttributes> =\n    (node: Graph.Node): DepthToSpaceAttributes => {\n      // processing node attributes\n      const blocksize = node.attributes.getInt('blocksize');\n      if (blocksize < 1) {\n        throw new Error(`blocksize must be >= 1, but got : ${blocksize} for DepthToSpace`);\n      }\n      const mode = node.attributes.getString('mode', 'DCR');\n      if (mode !== 'DCR' && mode !== 'CRD') {\n        throw new Error(`unrecognized mode: ${mode} for DepthToSpace`);\n      }\n      return {mode, blocksize};\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (inputs.length !== 1) {\n    throw new Error(`DepthToSpace expect 1 inputs, but got ${inputs.length}`);\n  }\n\n  // Input has to be a 4-D tensor\n  // TODO: Support string depth-to-space.\n  if (inputs[0].type === 'string' || inputs[0].dims.length !== 4) {\n    throw new TypeError('DepthToSpace input should be a 4-D numeric tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {getActivationSnippet, InternalActivationAttributes} from './fuse-utils';\nimport {calculateIm2ColDims} from './im2col';\n\nconst createDotProductProgramMetadata = (hasBias: boolean, attributes: InternalActivationAttributes) => ({\n  name: 'ConvDotProduct',\n  inputNames: hasBias ? ['Im2Col', 'K', 'B'] : ['Im2Col', 'K'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.packedLastDimension, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.packedLastDimension],\n  cacheKey: attributes.activationCacheKey\n});\n\nconst createDotProductProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: readonly Tensor[],\n     outputShape: number[], attributes: InternalActivationAttributes): ProgramInfo => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const adjustedKernelShape = [kshape[0], Math.ceil((xshape[1] * kshape[2] * kshape[3]) / 4)];\n      const im2colShape = calculateIm2ColDims(xshape, kshape, outputShape);\n      const [kWidth, kHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(adjustedKernelShape, TextureType.packedLastDimension);\n\n      const im2colStrides = ShapeUtil.computeStrides(im2colShape);\n      const [im2colWidth, im2colHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(im2colShape, TextureType.packedLastDimension);\n      const rank = outputShape.length;\n\n      const initValue = (inputs.length < 3) ? '0.0' : '_B(b)';\n      const sharedDim = Math.ceil(xshape[1] * kshape[2] * kshape[3] / 4);\n      const {activationFunction, applyActivation} = getActivationSnippet(attributes);\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const shaderSource = `\n${activationFunction}\nfloat process(int indices[${rank}]) {\n  int b[1];\n  b[0] = indices[1];\n  int im2col[4];\n  im2col[0] = indices[0];\n  im2col[1] = indices[2];\n  im2col[2] = indices[3];\n  int im2colOffset = im2col[0] * ${im2colStrides[0]} + im2col[1] * ${im2colStrides[1]} + im2col[2] * ${\n          im2colStrides[2]};\n  int kernelOffset = indices[1] * ${adjustedKernelShape[1]};\n  float value = ${initValue};\n  for (int i = 0; i < ${sharedDim}; ++i) {\n    vec2 im2colCoords = offsetToCoords(im2colOffset, ${im2colWidth}, ${im2colHeight});\n    vec2 kernelCoords = offsetToCoords(kernelOffset, ${kWidth}, ${kHeight});\n    value += dot(${glsl.texture2D}(Im2Col, im2colCoords), ${glsl.texture2D}(K, kernelCoords));\n    ++im2colOffset;\n    ++kernelOffset;\n  }\n  ${applyActivation}\n  return value;\n}`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nexport const createDotProductProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], outputShape: number[],\n     attributes: InternalActivationAttributes): ProgramInfoLoader => {\n      const metadata = createDotProductProgramMetadata(inputs.length > 2, attributes);\n      return {\n        ...metadata,\n        get: () => createDotProductProgramInfo(inferenceHandler, metadata, inputs, outputShape, attributes)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const flatten: OperatorImplementation<number> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axis: number): Tensor[] => {\n      validateInputs(inputs, axis);\n\n      const outputDims = ShapeUtil.flattenShape(inputs[0].dims, axis);\n      return [inferenceHandler.reshapeUnpacked(inputs[0], outputDims)];\n    };\n\nexport const parseFlattenAttributes: OperatorInitialization<number> = (node: Graph.Node): number =>\n    node.attributes.getInt('axis', 1);  // default axis is 1\n\nconst validateInputs = (inputs: Tensor[], axis: number): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Flatten requires 1 input.');\n  }\n\n  const r = inputs[0].dims.length;\n  if (r === 0) {\n    throw new Error('scalar tensor is not supported.');\n  }\n\n  if (axis < -r || axis > r) {\n    throw new Error('Invalid axis');\n  }\n\n  // TODO: Support string type\n  if (inputs[0].type === 'string') {\n    throw new Error('string tensor is not supported.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from '../../../attribute';\nimport {MAX_CLIP, MIN_CLIP} from '../../../util';\nimport {GlslValueFunction} from '../glsl-definitions';\n\nimport {glslClip, glslRelu, glslSigmoid} from './unary-op';\n\nexport interface InternalActivationAttributes {\n  readonly activation: string;\n  readonly clipMin?: number;\n  readonly clipMax?: number;\n  readonly activationCacheKey: string;\n}\n\nexport function getActivationSnippet(attributes: InternalActivationAttributes) {\n  let func: GlslValueFunction;\n  switch (attributes.activation) {\n    case 'Relu':\n      func = glslRelu();\n      break;\n    case 'Sigmoid':\n      func = glslSigmoid();\n      break;\n    case 'Clip':\n      func = glslClip(attributes.clipMin!, attributes.clipMax!);\n      break;\n    // TODO: adding other activations that can be fused.\n    default:\n      return {activationFunction: '', applyActivation: ''};\n  }\n\n  const activationName = func.name;\n  const activationFunction = func.body;\n  const applyActivation = `value = ${activationName}_(value);`;\n  return {activationFunction, applyActivation};\n}\n\nexport const parseInternalActivationAttributes = (attributes: Attribute): InternalActivationAttributes => {\n  const activation = attributes.getString('activation', '');\n\n  if (activation === 'Clip') {\n    const [clipMin, clipMax] = attributes.getFloats('activation_params', [MIN_CLIP, MAX_CLIP]);\n    return {activation, clipMax, clipMin, activationCacheKey: `${activation}:${clipMin},${clipMax}`};\n  }\n  return {activation, activationCacheKey: activation};\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\ninterface GatherAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n}\n\nexport const gather: OperatorImplementation<GatherAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: GatherAttributes): Tensor[] => {\n      validateInputs(inputs, attributes.axis);\n      const output = inferenceHandler.run(createGatherProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n      return [output];\n    };\n\nexport const parseGatherAttributes: OperatorInitialization<GatherAttributes> = (node: Graph.Node): GatherAttributes =>\n    createAttributeWithCacheKey({axis: node.attributes.getInt('axis', 0)});\n\nconst gatherProgramMetadata = {\n  name: 'Gather',\n  inputNames: ['A', 'B'],\n  inputTypes: [TextureType.unpacked, TextureType.unpacked],\n};\n\nconst createGatherProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      const indexDataShape = inputs[1].dims.slice();\n      const outputShape = new Array(inputShape.length + indexDataShape.length - 1);\n\n      axis = ShapeUtil.normalizeAxis(axis, inputShape.length);\n      const indexCopyOps: string[] = [];\n      for (let i = 0; i < outputShape.length; i++) {\n        // outputShape is divided into three parts: A, B, C\n        // |0        axis|  axis + indexDataShape.length |          end|\n        // |     A       |             B                 |      C      |\n        //\n        // inputIdx: [A, inputs[1][B], C]\n        if (i < axis) {  // A\n          outputShape[i] = inputShape[i];\n          indexCopyOps.push(`inputIdx[${i}] = outputIdx[${i}];`);\n        } else {\n          if (i < axis + indexDataShape.length) {  // B\n            outputShape[i] = indexDataShape[i - axis];\n            indexCopyOps.push(`indexDataIdx[${i - axis}] = outputIdx[${i}];`);\n          } else {                                                       // C\n            outputShape[i] = inputShape[i - indexDataShape.length + 1];  // skip 1 for axis\n            indexCopyOps.push(`inputIdx[${i - indexDataShape.length + 1}] = outputIdx[${i}];`);\n          }\n        }\n      }\n\n      const orank = outputShape.length || 1;\n      const irank = inputShape.length;\n      const iDrank = indexDataShape.length || 1;\n      const shaderSource = `\n      float process(int outputIdx[${orank}]) {\n        int inputIdx[${irank}];\n        int indexDataIdx[${iDrank}];\n        indexDataIdx[0] = 0;\n        ${indexCopyOps.join('\\n        ')}\n        int idx = int(_B(indexDataIdx));\n        inputIdx[${axis}] = idx < 0 ? idx + ${inputShape[axis]} : idx;\n        return _A(inputIdx);\n      }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst createGatherProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: GatherAttributes): ProgramInfoLoader => {\n      const metadata = {...gatherProgramMetadata, cacheHint: attributes.cacheKey};\n      return {...metadata, get: () => createGatherProgramInfo(handler, metadata, inputs, attributes.axis)};\n    };\n\nconst validateInputs = (inputs: Tensor[], axis: number): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Gather requires 2 inputs.');\n  }\n  const tensorRank = inputs[0].dims.length;\n  if (tensorRank < 1) {\n    throw new Error('Invalid input shape.');\n  }\n  if (axis < -tensorRank || axis > tensorRank - 1) {\n    throw new Error('Invalid axis.');\n  }\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invaid input type.');\n  }\n  if (inputs[1].type !== 'int32' && inputs[1].type !== 'int16') {\n    throw new Error('Invaid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {GemmUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport interface GemmAttributes extends AttributeWithCacheKey {\n  transA: boolean;\n  transB: boolean;\n  alpha: number;\n  beta: number;\n  isOptionalC: boolean;  // in opset 11, C becomes optional\n}\n\nexport const gemm: OperatorImplementation<GemmAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: GemmAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);\n      const output = inferenceHandler.run(createGemmProgramInfoLoader(inputs, attributes), inputs);\n      return [output];\n    };\n\nconst parseGemmAttributes = (node: Graph.Node, isOptionalC: boolean): GemmAttributes => {\n  const transA = node.attributes.getInt('transA', 0) !== 0;\n  const transB = node.attributes.getInt('transB', 0) !== 0;\n  const alpha = node.attributes.getFloat('alpha', 1.0);\n  const beta = node.attributes.getFloat('beta', 1.0);\n  return createAttributeWithCacheKey({transA, transB, alpha, beta, isOptionalC});\n};\n\nexport const parseGemmAttributesV7: OperatorInitialization<GemmAttributes> = (node: Graph.Node): GemmAttributes =>\n    parseGemmAttributes(node, false);\n\nexport const parseGemmAttributesV11: OperatorInitialization<GemmAttributes> = (node: Graph.Node): GemmAttributes =>\n    parseGemmAttributes(node, true);\n\nconst createGemmProgramInfoLoader = (inputs: Tensor[], attributes: GemmAttributes): ProgramInfoLoader => {\n  const metadata = {\n    name: 'Gemm',\n    inputNames: inputs.length === 3 ? ['A', 'B', 'C'] : ['A', 'B'],\n    inputTypes: inputs.length === 3 ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                                      [TextureType.unpacked, TextureType.unpacked],\n    key: attributes.cacheKey\n  };\n\n  return {...metadata, get: () => createGemmProgramInfo(metadata, inputs, attributes)};\n};\n\nconst createGemmProgramInfo =\n    (metadata: ProgramMetadata, inputs: Tensor[], attributes: GemmAttributes): ProgramInfo => {\n      const aShape = inputs[0].dims.slice();\n      const bShape = inputs[1].dims.slice();\n      const [M, N] = GemmUtil.getShapeOfGemmResult(\n          aShape, attributes.transA, bShape, attributes.transB, inputs.length === 3 ? inputs[2].dims : undefined);\n      const outputShape = [M, N];\n      if (!outputShape) {\n        throw new Error('Can\\'t use gemm on the given tensors');\n      }\n      let sharedDim = aShape[aShape.length - 1];\n      let line = '';\n      if (attributes.transA) {\n        sharedDim = aShape[0];\n      }\n      if (attributes.transA && attributes.transB) {\n        line = 'value += _A_T(a) * _B_T(b);';\n      } else if (attributes.transA && !attributes.transB) {\n        line = 'value += _A_T(a) * _B(b);';\n      } else if (!attributes.transA && attributes.transB) {\n        line = 'value += _A(a) * _B_T(b);';\n      } else if (!attributes.transA && !attributes.transB) {\n        line = 'value += _A(a) * _B(b);';\n      }\n      const rank = outputShape.length;\n      const declareC = inputs.length === 3 ? `int c[${inputs[2].dims.length}];` : '';\n      const broadcastC = inputs.length === 3 ? 'bcastIndices_C(indices, c);' : '';\n      const calculateC = inputs.length === 3 ? 'value += beta * _C(c);' : '';\n      const shaderSource = `\n      float process(int indices[${rank}]) {\n          int a[${rank}];\n          int b[${rank}];\n          ${declareC}\n\n          copyVec(indices, a);\n          copyVec(indices, b);\n          ${broadcastC}\n\n          float value = 0.0;\n          for (int k=0; k<${sharedDim}; ++k) {\n              a[${rank - 1}] = k;\n              b[${rank - 2}] = k;\n              ${line}\n          }\n\n          value = value * alpha;\n          ${calculateC}\n          return value;\n      }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        variables: [\n          {name: 'alpha', type: 'float', data: attributes.alpha}, {name: 'beta', type: 'float', data: attributes.beta}\n        ],\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[], attributes: GemmAttributes): void => {\n  if (!inputs) {\n    throw new Error('Input is missing');\n  }\n  if (attributes.isOptionalC && (inputs.length < 2 || inputs.length > 3)) {\n    throw new Error('Invaid input shape.');\n  }\n  if (!attributes.isOptionalC && inputs.length !== 3) {\n    throw new Error('Gemm requires 3 inputs');\n  }\n\n  // 'C' can be of dimensionality 1 or 2 only\n  if (inputs.length === 3 && inputs[2].dims.length !== 1 && inputs[2].dims.length !== 2) {\n    throw new Error('Invalid input shape of C');\n  }\n\n  if ((inputs[0].type !== 'float32' && inputs[0].type !== 'float64') ||\n      (inputs[1].type !== 'float32' && inputs[1].type !== 'float64') ||\n      (inputs.length === 3 && inputs[2].type !== 'float32' && inputs[2].type !== 'float64')) {\n    throw new Error('Invalid input type.');\n  }\n\n  if ((inputs[0].type !== inputs[1].type) || (inputs.length === 3 && inputs[0].type !== inputs[2].type)) {\n    throw new Error('Input types are mismatched');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {ConvAttributes} from './conv';\nimport {unpackFromChannel} from './packing-utils';\n\nconst createPackedIm2ColProgramMetadata = (cacheHint: string) => ({\n  name: 'Im2Col (packed)',\n  inputNames: ['A'],\n  inputTypes: [TextureType.packed],\n  cacheHint,\n});\n\nconst createPackedIm2ColProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, x: Tensor, w: Tensor,\n     outputShape: readonly number[], attributes: ConvAttributes): ProgramInfo => {\n      const xshape = x.dims;\n      const wshape = w.dims;\n      const rowDim = 2;\n      const colDim = 3;\n      const rank = outputShape.length;\n      const im2colShape = [wshape[1] * wshape[2] * wshape[3], outputShape[2] * outputShape[3]];\n      const kernelSize = wshape[2] * wshape[3];\n      const unpackChannel = unpackFromChannel();\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      let unrolled = '';\n\n      for (let row = 0; row <= 1; row++) {\n        for (let col = 0; col <= 1; col++) {\n          unrolled += `\n            blockIndex = rc.x + ${col};\n            pos = rc.y + ${row};\n\n            if(blockIndex < ${im2colShape[1]} && pos < ${im2colShape[0]}) {\n              offsetY = int(blockIndex / (${outputShape[rank - 1]})) * ${attributes.strides[0]} -\n                ${attributes.pads[0]};\n              d0 = offsetY + ${attributes.dilations[0]} * (imod(pos, ${kernelSize}) / ${wshape[2]});\n\n              if(d0 < ${xshape[rowDim]} && d0 >= 0) {\n                offsetX = imod(blockIndex, ${outputShape[rank - 1]}) * ${attributes.strides[1]} -\n                  ${attributes.pads[1]};\n                d1 = offsetX + ${attributes.dilations[1]} * imod(imod(pos, ${kernelSize}), ${wshape[2]});\n\n                if(d1 < ${xshape[colDim]} && d1 >= 0) {\n\n                  ch = int(float(pos)/ ${kernelSize}.);\n                    innerDims = vec2(d0, d1);\n                    result[${row * 2 + col}] = getChannel(\n                      getA(0, ch, int(innerDims.x),\n                      int(innerDims.y)), innerDims);\n                }\n              }\n            }\n\n          `;\n        }\n      }\n\n      const shaderSource = `\n      ${unpackChannel}\n\n      void main() {\n        ivec2 rc = getOutputCoords();\n          vec4 result = vec4(0.0);\n          int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n          vec2 innerDims;\n          ${unrolled}\n          ${glsl.output} = result;\n      }\n            `;\n      return {\n        ...metadata,\n        output: {dims: im2colShape, type: x.type, textureType: TextureType.packed},\n        shaderSource,\n        hasMain: true\n      };\n    };\n\nexport const createPackedIm2ColProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, x: Tensor, w: Tensor, outputShape: readonly number[],\n     attributes: ConvAttributes): ProgramInfoLoader => {\n      const metadata = createPackedIm2ColProgramMetadata(attributes.cacheKey);\n      return {\n        ...metadata,\n        get: () => createPackedIm2ColProgramInfo(inferenceHandler, metadata, x, w, outputShape, attributes)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {ConvAttributes} from './conv';\n\nconst createIm2ColProgramMetadata = (cacheHint: string) => ({\n  name: 'Im2Col',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n  cacheHint,\n});\n\nconst createIm2ColProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, x: Tensor, w: Tensor,\n     outputShape: readonly number[], attributes: ConvAttributes): ProgramInfo => {\n      const xshape = x.dims;\n      const wshape = w.dims;\n\n      const rank = outputShape.length;\n      const im2colDims = calculateIm2ColDims(xshape, wshape, outputShape, 4);\n\n      const shaderSource = `\n        const int XC = ${xshape[1]};\n        const int XH = ${xshape[2]};\n        const int XW = ${xshape[3]};\n        const int KH = ${attributes.kernelShape[0]};\n        const int KW = ${attributes.kernelShape[1]};\n        const int dilationH = ${attributes.dilations[0]};\n        const int dilationW = ${attributes.dilations[1]};\n        const int strideH = ${attributes.strides[0]};\n        const int strideW = ${attributes.strides[1]};\n        const int padH = ${attributes.pads[0]};\n        const int padW = ${attributes.pads[1]};\n        const int KHKW = KH*KW;\n        const int XCKHKW = XC * KHKW;\n        const int outputChannels = 4;\n        vec4 process(int indices[${rank}]) {\n          int b  = indices[0]; // batch size\n          int oh = indices[1] * strideH - padH; //output height\n          int ow = indices[2] * strideW - padW; //output width\n          int p = indices[3] * outputChannels; //patch\n          vec4 value = vec4(0.0);\n          for(int i=0; i < outputChannels; ++i) {\n            if(p < XCKHKW) {\n              int patchC = p / KHKW;\n              int patchH = (p - patchC*KHKW) / KW;\n              int patchW = (p - patchC*KHKW) - patchH * KW;\n              int xh2 = oh + patchH * dilationH;\n              int xw2 = ow + patchW * dilationW;\n              int x[${xshape.length}];\n              x[0] = b;\n              x[1] = patchC;\n              x[2] = xh2;\n              x[3] = xw2;\n              if(xh2 >= 0 &&\n                  xh2 < XH &&\n                  xw2 >= 0 &&\n                  xw2 < XW) {\n                value[i] = _X(x);\n              }\n            }\n            ++p;\n          }\n          return value;\n        }\n        `;\n      return {\n        ...metadata,\n        output: {dims: im2colDims, type: x.type, textureType: TextureType.packedLastDimension},\n        shaderSource\n      };\n    };\n\nexport const createIm2ColProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, x: Tensor, w: Tensor, outputShape: readonly number[],\n     attributes: ConvAttributes): ProgramInfoLoader => {\n      const metadata = createIm2ColProgramMetadata(attributes.cacheKey);\n      return {\n        ...metadata,\n        get: () => createIm2ColProgramInfo(inferenceHandler, metadata, x, w, outputShape, attributes)\n      };\n    };\n\n\nexport const calculateIm2ColDims =\n    (inputShape: readonly number[], kernelShape: readonly number[], outputShape: readonly number[], channels = 4):\n        number[] =>\n            [outputShape[0], outputShape[2], outputShape[3],\n             Math.ceil(inputShape[1] * kernelShape[2] * kernelShape[3] / channels)];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport interface ImageScalerAttributes extends AttributeWithCacheKey {\n  scale: number;\n  bias: number[];\n}\n\nexport const imageScaler: OperatorImplementation<ImageScalerAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ImageScalerAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output =\n          inferenceHandler.run(createImageScalerProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n      return [output];\n    };\n\nexport const parseImageScalerAttributes: OperatorInitialization<ImageScalerAttributes> =\n    (node: Graph.Node): ImageScalerAttributes => {\n      const scale = node.attributes.getFloat('scale');\n      const bias = node.attributes.getFloats('bias');\n      return createAttributeWithCacheKey({scale, bias});\n    };\n\nconst imageScalerProgramMetadata = {\n  name: 'ImageScaler',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n};\n\nconst createImageScalerProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], attributes: ImageScalerAttributes):\n        ProgramInfo => {\n          const outputShape = inputs[0].dims.slice();\n          const rank = outputShape.length;\n          const getBiasMethod = createGetBiasMethod(attributes.bias.length);\n          const shaderSource = `\n      ${getBiasMethod}\n      float process(int indices[${rank}]) {\n        return _X(indices) * scale + getBias(bias, indices[1]);\n      }`;\n          return {\n            ...metadata,\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n            variables: [\n              {name: 'bias', type: 'float', arrayLength: attributes.bias.length, data: attributes.bias},\n              {name: 'scale', type: 'float', data: attributes.scale}\n            ],\n            shaderSource\n          };\n        };\n\nconst createImageScalerProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ImageScalerAttributes): ProgramInfoLoader => {\n      const metadata = {...imageScalerProgramMetadata, cacheHint: attributes.cacheKey};\n      return {...metadata, get: () => createImageScalerProgramInfo(handler, metadata, inputs, attributes)};\n    };\n\nconst createGetBiasMethod = (numChannels: number): string => {\n  const codeLines: string[] = [`float getBias(float bias[${numChannels}], int channel) {`];\n  for (let i = 0; i < numChannels; ++i) {\n    if (i === 0) {\n      codeLines.push(\n          '\\t' +\n          `if (channel == ${i}) { return bias[${i}]; }`);\n    } else if (i === numChannels - 1) {\n      codeLines.push(\n          '\\t' +\n          `else { return bias[${i}]; }`);\n    } else {\n      codeLines.push(\n          '\\t' +\n          `else if (channel == ${i}) { return bias[${i}]; }`);\n    }\n  }\n  codeLines.push(\n      '\\t' +\n      '}');\n  return codeLines.join('\\n');\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('ImageScaler requires 1 input.');\n  }\n  if (inputs[0].dims.length !== 4) {\n    throw new Error('Invalid input shape.');\n  }\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport const instanceNormalization: OperatorImplementation<number> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], epsilon: number): Tensor[] => {\n      validateInputs(inputs);\n\n      const meanAndVariance = inferenceHandler.run(createMeanAndVarianceProgramInfoLoader(inputs[0]), inputs);\n      const output = inferenceHandler.run(\n          createComputeOutputProgramInfoLoader(inferenceHandler, inputs[0], epsilon, meanAndVariance.dims),\n          [inputs[0], meanAndVariance, inputs[1], inputs[2]]);\n      return [output];\n    };\n\nexport const parseInstanceNormalizationAttributes: OperatorInitialization<number> = (node: Graph.Node): number =>\n    node.attributes.getFloat('epsilon', 1e-5);\n\nconst meanAndVarianceProgramMetadata = {\n  name: 'InstanceNormalization_MeanAndVariance',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n};\n\nconst createMeanAndVarianceProgramInfo = (metadata: ProgramMetadata, input: Tensor): ProgramInfo => {\n  const xDims = input.dims.slice();\n  const channel = xDims[1];\n  const channelSize = xDims[2] * xDims[3];\n  const outputShape = [xDims[0], channel];\n\n  const shaderSource = `\n      vec4 process(int[2] indices) {\n        vec4 v = vec4(0.0);\n        int a[4];\n        a[0] = indices[0];\n        a[1] = indices[1];\n        float temp = 0.0;\n        for(int a2=0; a2<${xDims[2]}; a2++) {\n          a[2] = a2;\n          for(int a3=0; a3<${xDims[3]}; a3++) {\n            a[3] = a3;\n            float x = _X(a);\n            temp += x;\n          }\n        }\n        float mean = temp / float(${channelSize});\n        temp = 0.0;\n        for(int a2=0; a2<${xDims[2]}; a2++) {\n          a[2] = a2;\n          for(int a3=0; a3<${xDims[3]}; a3++) {\n            a[3] = a3;\n            float x = _X(a);\n            temp += (x - mean) * (x - mean);\n          }\n        }\n        v.r = mean;\n        v.g = temp / float(${channelSize});\n\n        return v;\n      }`;\n  return {\n    ...metadata,\n    output: {dims: outputShape, type: input.type, textureType: TextureType.packedLastDimension},\n    shaderSource\n  };\n};\n\nconst createMeanAndVarianceProgramInfoLoader = (input: Tensor): ProgramInfoLoader => ({\n  ...meanAndVarianceProgramMetadata,\n  get: () => createMeanAndVarianceProgramInfo(meanAndVarianceProgramMetadata, input)\n});\n\nconst computeOutputProgramMetadata = {\n  name: 'InstanceNormalization_ComputeOutput',\n  inputNames: ['X', 'MeanAndVariance', 'Scale', 'B'],\n  inputTypes: [TextureType.unpacked, TextureType.packedLastDimension, TextureType.unpacked, TextureType.unpacked],\n};\n\nconst createComputeOutputProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, input: Tensor, epsilon: number,\n     meanAndVarianceShape: readonly number[]): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(meanAndVarianceShape, TextureType.packedLastDimension);\n      const [meanAndVarianceWidth, meanAndVarianceHeight] = [textureWidth / 4, textureHeight];\n      const shaderSource = `\n      vec4 get_MeanAndVariance(int[2] mv) {\n        int offset = indicesToOffset_MeanAndVariance(mv);\n        vec2 coords = offsetToCoords(offset, ${meanAndVarianceWidth}, ${meanAndVarianceHeight});\n        return ${glsl.texture2D}(MeanAndVariance, coords);\n      }\n\n      float process(int[4] indices) {\n        int mv[2];\n        mv[0] = indices[0];\n        mv[1] = indices[1];\n        vec4 mean_and_variance = get_MeanAndVariance(mv);\n        float mean = mean_and_variance.r;\n        float variance = mean_and_variance.g;\n\n        int sb[1];\n        sb[0] = indices[1];\n        float scale = _Scale(sb);\n        float b = _B(sb);\n\n        return scale * (_X(indices) - mean) / sqrt(variance + epsilon) + b;\n      }`;\n      return {\n        ...metadata,\n        output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\n        variables: [{name: 'epsilon', type: 'float', data: epsilon}],\n        shaderSource\n      };\n    };\n\nconst createComputeOutputProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, epsilon: number, meanAndVarianceShape: readonly number[]):\n        ProgramInfoLoader => {\n          const metadata = {...computeOutputProgramMetadata, cacheHint: `${epsilon}`};\n          return {\n            ...metadata,\n            get: () => createComputeOutputProgramInfo(inferenceHandler, metadata, input, epsilon, meanAndVarianceShape)\n          };\n        };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 3) {\n    throw new Error('InstanceNormalization requires 3 inputs.');\n  }\n\n  const X = inputs[0];\n  const scale = inputs[1];\n  const B = inputs[2];\n\n  // input should at least have three dimensions - N,C,dim1,...,dimn\n  // other inputs can have only one dimensions\n  if (X.dims.length < 3 || scale.dims.length !== 1 || B.dims.length !== 1) {\n    throw new Error('Invalid input shape.');\n  }\n  if (scale.dims[0] !== X.dims[1] || B.dims[0] !== X.dims[1]) {\n    throw new Error('Input shapes are mismatched.');\n  }\n  if ((X.type !== 'float32' && X.type !== 'float64') || (scale.type !== 'float32' && scale.type !== 'float64') ||\n      (B.type !== 'float32' && B.type !== 'float64')) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs[0].dims.length !== 4) {\n    throw new Error('Only support 4-D input shape.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\n\nexport interface LrnAttributes extends AttributeWithCacheKey {\n  alpha: number;\n  beta: number;\n  bias: number;\n  size: number;\n}\n\nexport const lrn: OperatorImplementation<LrnAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: LrnAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      // if (inferenceHandler.session.pack) {\n      //   return [inferenceHandler.run(createPackedLrnProgramInfoLoader(inferenceHandler, inputs, attributes),\n      //   inputs)];\n      // } else {\n      return [inferenceHandler.run(createLrnProgramInfoLoader(inputs, attributes), inputs)];\n      //}\n    };\n\nexport const parseLrnAttributes: OperatorInitialization<LrnAttributes> = (node: Graph.Node): LrnAttributes => {\n  const alpha = node.attributes.getFloat('alpha', 0.0001);\n  const beta = node.attributes.getFloat('beta', 0.75);\n  const bias = node.attributes.getFloat('bias', 1.0);\n  const size = node.attributes.getInt('size');\n\n  return createAttributeWithCacheKey({alpha, beta, bias, size});\n};\n\nconst lrnProgramMetadata = {\n  name: 'LRN',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked]\n};\n\nfunction createLrnProgramInfo(inputs: Tensor[], attributes: LrnAttributes): ProgramInfo {\n  const C = inputs[0].dims[1];\n  const rank = inputs[0].dims.length;\n  const from = -Math.floor((attributes.size - 1) / 2);\n  const to = Math.ceil((attributes.size - 1) / 2);\n  const alpha = `float(${attributes.alpha}) / float(${attributes.size})`;\n  const bias = `float(${attributes.bias})`;\n  const beta = `float(${attributes.beta})`;\n\n  const shaderSource = `\n    float process(int indices[${rank}]) {\n        int c = indices[1];\n        float x = _X(indices);\n        float square_sum = 0.0;\n\n        for (int i = ${from}; i <= ${to}; i++) {\n          int idx = c + i;\n          if (c >= 0 && c < ${C}) {\n            indices[1] = idx;\n            float j = _X(indices);\n            square_sum += j * j;\n          }\n        }\n        return x / pow(${bias} + ${alpha} * square_sum, ${beta});\n    }`;\n  return {\n    ...lrnProgramMetadata,\n    cacheHint: attributes.cacheKey,\n    output: {dims: inputs[0].dims, type: inputs[0].type, textureType: TextureType.unpacked},\n    shaderSource,\n  };\n}\n\nexport function createLrnProgramInfoLoader(inputs: Tensor[], attributes: LrnAttributes): ProgramInfoLoader {\n  return {...lrnProgramMetadata, cacheHint: attributes.cacheKey, get: () => createLrnProgramInfo(inputs, attributes)};\n}\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('LRN requires 1 input.');\n  }\n  if (inputs[0].dims.length !== 4) {\n    throw new Error('currently only support LRN for input with \"NCHW\" format');\n  }\n  if (inputs[0].type !== 'float32') {\n    throw new Error('input should be float type');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\nimport {getCoordsDataType, getGlChannels} from '../utils';\n\nimport {getActivationSnippet, InternalActivationAttributes} from './fuse-utils';\nimport {getBiasForMatmul} from './matmul';\n\nconst createPackedMatmulProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\n  name: 'MatMul (packed)',\n  inputNames: hasBias ? ['A', 'B', 'Bias'] : ['A', 'B'],\n  inputTypes: hasBias ? [TextureType.packed, TextureType.packed, TextureType.packed] :\n                        [TextureType.packed, TextureType.packed],\n  cacheHint\n});\n\nconst createPackedMatmulProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[],\n     activationAttributes: InternalActivationAttributes): ProgramInfo => {\n      const hasBias = inputs.length > 2;\n      const processBias = hasBias ? 'value += getBiasForMatmul();' : '';\n      const aShape = inputs[0].dims;\n      const bShape = inputs[1].dims;\n      const outputShape = BroadcastUtil.calcShape(aShape, bShape, true);\n      const isBroadcast = !ShapeUtil.areEqual(inputs[0].dims, inputs[1].dims);\n\n      if (!outputShape) {\n        throw new Error('Can\\'t use matmul on the given tensors');\n      }\n      const sharedDim = aShape[aShape.length - 1];\n      const sharedDimIndex = Math.ceil(sharedDim / 2);\n      const aRank = aShape.length;\n      const bRank = bShape.length;\n\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const coordsDataType = getCoordsDataType(outputShape.length);\n      const outRank = outputShape.length;\n      const allGlChannels = getGlChannels();\n      const {activationFunction, applyActivation} = getActivationSnippet(activationAttributes);\n\n      const getBiasForMatmulSnippet =\n          hasBias ? `${getBiasForMatmul(coordsDataType, allGlChannels, inputs[2].dims, outputShape, true)}` : '';\n\n      const getBcastedSamplerForMatmulSnippet =\n          isBroadcast ? `${getBcastSamplerForMatmul(coordsDataType, allGlChannels, inputs, outputShape)}` : '';\n\n      const getSamplerAInLoopSnippet = isBroadcast ? 'getAAtOutCoordsMatmul(i)' : `getA(${getA(allGlChannels, aRank)})`;\n      const getSamplerBInLoopSnippet = isBroadcast ? 'getBAtOutCoordsMatmul(i)' : `getB(${getB(allGlChannels, bRank)})`;\n      const getOutputCoordsSnippet = isBroadcast ? '' : `${coordsDataType} rc =\n          getOutputCoords(); int lastDim = rc.${allGlChannels[outRank - 1]}; rc.${allGlChannels[outRank - 1]} =\n          rc.${allGlChannels[outRank - 2]}; rc.${allGlChannels[outRank - 2]} = lastDim;\n      `;\n      const shaderSource = `\n            ${getBcastedSamplerForMatmulSnippet}\n            ${getBiasForMatmulSnippet}\n            ${activationFunction}\n            void main() {\n              ${getOutputCoordsSnippet}\n\n              vec4 value = vec4(0);\n              for (int i = 0; i < ${sharedDimIndex}; i++) {\n                vec4 a = ${getSamplerAInLoopSnippet};\n                vec4 b = ${getSamplerBInLoopSnippet};\n\n                value += (a.rrbb * b.rgrg);\n                value += (a.ggaa * b.baba);\n              }\n              ${processBias}\n              ${applyActivation}\n              ${glsl.output} = value;\n            }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n        shaderSource,\n        hasMain: true\n      };\n    };\n\nexport const createPackedMatmulProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[],\n     activationAttributes: InternalActivationAttributes): ProgramInfoLoader => {\n      const metadata = createPackedMatmulProgramMetadata(inputs.length > 2, activationAttributes.activationCacheKey);\n      return {\n        ...metadata,\n        get: () => createPackedMatmulProgramInfo(inferenceHandler, metadata, inputs, activationAttributes)\n      };\n    };\n\nfunction getBcastSamplerForMatmul(\n    coordsDataType: string, allGlChannels: readonly string[], inputs: Tensor[], outShape: readonly number[]): string {\n  let unpackedACoordsSnippet = [];\n  let unpackedBCoordsSnippet = [];\n\n  const inAShape = inputs[0].dims;\n  const inBShape = inputs[1].dims;\n\n  const inARank = inAShape.length;\n  const inBRank = inBShape.length;\n\n  const outRank = outShape.length;\n  const rankADiff = outRank - inARank;\n  const rankBDiff = outRank - inBRank;\n\n  unpackedACoordsSnippet = inAShape.map((s, i) => `coords.${allGlChannels[i + rankADiff]}`);\n  unpackedACoordsSnippet[inARank - 1] = 'i*2';\n  unpackedACoordsSnippet.join(', ');\n  unpackedBCoordsSnippet = inBShape.map((s, i) => `coords.${allGlChannels[i + rankBDiff]}`);\n  unpackedBCoordsSnippet[inBRank - 2] = 'i*2';\n  unpackedBCoordsSnippet.join(', ');\n\n  const broadcastADims = BroadcastUtil.getBroadcastDims(inAShape, outShape);\n  const broadcastBDims = BroadcastUtil.getBroadcastDims(inBShape, outShape);\n\n  const coordsASnippet = broadcastADims.map(d => `coords.${allGlChannels[d + rankADiff]} = 0;`).join('\\n');\n  const coordsBSnippet = broadcastBDims.map(d => `coords.${allGlChannels[d + rankBDiff]} = 0;`).join('\\n');\n  const swapDimSnippet = `int lastDim = coords.${allGlChannels[outRank - 1]};\n  coords.${allGlChannels[outRank - 1]} = coords.${allGlChannels[outRank - 2]};\n  coords.${allGlChannels[outRank - 2]} = lastDim;`;\n\n  const getBcastSamplerMatmulSource = `\nvec4 getAAtOutCoordsMatmul(int i) {\n  ${coordsDataType} coords = getOutputCoords();\n  ${swapDimSnippet}\n  ${coordsASnippet}\n  vec4 outputValue = getA(${unpackedACoordsSnippet});\n  return outputValue;\n}\n\nvec4 getBAtOutCoordsMatmul(int i) {\n  ${coordsDataType} coords = getOutputCoords();\n  ${swapDimSnippet}\n  ${coordsBSnippet}\n  vec4 outputValue = getB(${unpackedBCoordsSnippet});\n  return outputValue;\n}`;\n\n  return getBcastSamplerMatmulSource;\n}\n\nfunction getA(allGlChannels: string[], rank: number): string {\n  let res = '';\n  for (let i = 0; i < rank - 2; i++) {\n    res += `rc.${allGlChannels[i]}, `;\n  }\n  res += `rc.${allGlChannels[rank - 2]}, ` +\n      'i*2';\n  return res;\n}\n\nfunction getB(allGlChannels: string[], rank: number): string {\n  let res = '';\n  for (let i = 0; i < rank - 2; i++) {\n    res += `rc.${allGlChannels[i]}, `;\n  }\n  res += 'i*2, ' +\n      `rc.${allGlChannels[rank - 1]}`;\n  return res;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\nimport {getCoordsDataType, getGlChannels} from '../utils';\n\nimport {getActivationSnippet, InternalActivationAttributes, parseInternalActivationAttributes} from './fuse-utils';\nimport {createPackedMatmulProgramInfoLoader} from './matmul-pack';\n\nexport const matMul: OperatorImplementation<InternalActivationAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: InternalActivationAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      if (inferenceHandler.session.pack) {\n        return [inferenceHandler.run(\n            createPackedMatmulProgramInfoLoader(inferenceHandler, inputs, attributes), inputs)];\n      } else {\n        return [inferenceHandler.run(createMatmulProgramInfoLoader(inputs, attributes), inputs)];\n      }\n    };\n\nexport const parseMatMulAttributes: OperatorInitialization<InternalActivationAttributes> =\n    (node: Graph.Node): InternalActivationAttributes => parseInternalActivationAttributes(node.attributes);\n\nconst createMatmulProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\n  name: 'MatMul',\n  inputNames: hasBias ? ['A', 'B', 'Bias'] : ['A', 'B'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.unpacked],\n  cacheHint\n});\n\nfunction createMatmulProgramInfo(\n    metadata: ProgramMetadata, inputs: Tensor[], activationAttributes: InternalActivationAttributes): ProgramInfo {\n  const aShape = inputs[0].dims;\n  const bShape = inputs[1].dims;\n  const outputShape = BroadcastUtil.calcShape(aShape, bShape, true);\n  if (!outputShape) {\n    throw new Error('Can\\'t use matmul on the given tensors');\n  }\n  const coordsDataType = getCoordsDataType(outputShape.length);\n  const allGlChannels = getGlChannels();\n  const {activationFunction, applyActivation} = getActivationSnippet(activationAttributes);\n\n  const hasBias = inputs.length > 2;\n  const processBias = hasBias ? 'value += getBiasForMatmul();' : '';\n  const getBiasForMatmulSnippet =\n      hasBias ? `${getBiasForMatmul(coordsDataType, allGlChannels, inputs[2].dims, outputShape, false)}` : '';\n\n  const rank = outputShape.length;\n  const arank = aShape.length;\n  const brank = bShape.length;\n  const sharedDim = aShape[aShape.length - 1];\n  const shaderSource = `\n    ${activationFunction}\n    ${getBiasForMatmulSnippet}\n    float process(int indices[${rank}]) {\n        int a[${arank}];\n        int b[${brank}];\n        bcastMatmulIndices_A(indices, a);\n        bcastMatmulIndices_B(indices, b);\n\n        float value;\n        for (int k=0; k<${sharedDim}; ++k) {\n            a[${arank - 1}] = k;\n            b[${brank - 2}] = k;\n            value += _A(a) * _B(b);\n        }\n        ${processBias}\n        ${applyActivation}\n        return value;\n    }`;\n  return {\n    ...metadata,\n    output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n    shaderSource,\n  };\n}\n\nexport function createMatmulProgramInfoLoader(\n    inputs: Tensor[], activationAttributes: InternalActivationAttributes): ProgramInfoLoader {\n  const metadata = createMatmulProgramMetadata(inputs.length > 2, activationAttributes.activationCacheKey);\n  return {...metadata, get: () => createMatmulProgramInfo(metadata, inputs, activationAttributes)};\n}\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('MatMul requires 2 inputs.');\n  }\n\n  if (inputs[0].dims[inputs[0].dims.length - 1] !== inputs[1].dims[inputs[1].dims.length - 2]) {\n    throw new Error('shared dimension does not match.');\n  }\n\n  if ((inputs[0].type !== 'float32' && inputs[0].type !== 'float64') ||\n      (inputs[1].type !== 'float32' && inputs[1].type !== 'float64')) {\n    throw new Error('inputs should be float type');\n  }\n\n  if (inputs[0].type !== inputs[1].type) {\n    throw new Error('inputs types should match');\n  }\n};\n\nexport function getBiasForMatmul(\n    coordsDataType: string, allGlChannels: readonly string[], inShape: readonly number[], outShape: readonly number[],\n    isPacked: boolean): string {\n  let unpackedCoordsSnippet = '';\n  const inRank = inShape.length;\n  const outRank = outShape.length;\n  const rankDiff = outRank - inRank;\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inShape.map((s, i) => `coords.${allGlChannels[i + rankDiff]}`).join(', ');\n  }\n  const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\n  const coordsSnippet = broadcastDims.map(d => `coords.${allGlChannels[d + rankDiff]} = 0;`).join('\\n');\n  const inSize = ShapeUtil.size(inShape);\n  const isInputScalar = inSize === 1;\n  let output = 'vec4(outputValue.xx, outputValue.yy)';\n  if (isInputScalar) {\n    output = 'vec4(outputValue.x)';\n  }\n  const getBiasForMatmulSource = isPacked ? `\nvec4 getBiasForMatmul() {\n  ${coordsDataType} coords = getOutputCoords();\n  ${coordsSnippet}\n  vec4 outputValue = getBias(${unpackedCoordsSnippet});\n  return ${output};\n}` :\n                                            `\nfloat getBiasForMatmul() {\n  ${coordsDataType} coords = getOutputCoords();\n  ${coordsSnippet}\n  return getBias(coords.x);\n}`;\n\n  return getBiasForMatmulSource;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\nimport {getCoordsDataType} from '../utils';\n\nimport {getChannels} from './packing-utils';\n\nconst packProgramMetadata = {\n  name: 'pack',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpackedReversed]\n};\n\nconst createPackProgramInfo = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfo => {\n  const glsl = getGlsl(handler.session.backend.glContext.version);\n  const inputShape = input.dims;\n\n  const inputRank = inputShape.length;\n  // createTextureLayoutFromShape won't change output rank. Need to verify by running tests\n  const outputRank = input.dims.length;\n\n  const coordsDataType = getCoordsDataType(outputRank);\n  const channels = getChannels('rc', outputRank);\n  const setup = getSetup(outputRank, channels, inputShape[inputShape.length - 2], inputShape[inputShape.length - 1]);\n\n  let reversedInputWH;\n  if (inputRank === 0) {\n    reversedInputWH = [1, 1];\n  } else if (inputRank === 1) {\n    reversedInputWH = [inputShape[0], 1];\n  } else {\n    reversedInputWH = [inputShape[outputRank - 1], inputShape[outputRank - 2]];\n  }\n  const outOfBoundsCondition = getOutOfBoundsCondition(outputRank, reversedInputWH, channels);\n  const output = getOutput(inputShape, channels);\n\n  const shaderSource = `\n        void main() {\n          ${coordsDataType} rc = getOutputCoords();\n\n          if(${outOfBoundsCondition}) {\n            ${glsl.output} = vec4(0);\n          } else {\n            ${setup}\n\n            ${glsl.output} = vec4(${output});\n          }\n        }\n      `;\n  return {\n    ...packProgramMetadata,\n    hasMain: true,\n    output: {dims: input.dims, type: input.type, textureType: TextureType.packed},\n    shaderSource\n  };\n};\n\nexport const createPackProgramInfoLoader = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfoLoader =>\n    ({...packProgramMetadata, get: () => createPackProgramInfo(handler, input)});\n\n/**\n * check output coordinate location and return false if it is outside input's width/height boundary\n */\nfunction getOutOfBoundsCondition(rank: number, shape: readonly number[], dims: string[]): string {\n  if (rank === 0) {\n    return 'false';\n  }\n  if (rank === 1) {\n    return `rc > ${shape[0]}`;\n  }\n\n  let cond = '';\n  for (let i = rank - 2; i < rank; i++) {\n    cond += `${dims[i]} >= ${shape[i - rank + 2]}`;\n    if (i < rank - 1) {\n      cond += '||';\n    }\n  }\n\n  return cond;\n}\n\n/**\n * code snippet to sample input texture with output coordiantes\n */\nfunction getOutput(shape: readonly number[], dims: string[]): string {\n  const rank = shape.length;\n\n  if (rank === 0) {\n    return 'getA(), 0, 0, 0';\n  }\n\n  if (rank === 1) {\n    return `getA(rc),\n            rc + 1 >= ${shape[0]} ? 0. : getA(rc + 1),\n            0, 0`;\n  }\n\n  const coord00 = 'r, c';\n  const coord01 = 'r, cp1';\n  const coord10 = 'rp1, c';\n  const coord11 = 'rp1, cp1';\n  let D = '';\n  if (rank > 2) {\n    for (let i = 0; i < rank - 2; ++i) {\n      D = D + `${dims[i]},`;\n    }\n  }\n  return `getA(${D}${coord00}),\n          rEdge ? 0. : getA(${D}${coord10}),\n          cEdge ? 0. : getA(${D}${coord01}),\n          rEdge || cEdge ? 0. : getA(${D}${coord11})`;\n}\n\n/**\n * code snippet to setup 4 coordinates and edge conditions\n */\nfunction getSetup(rank: number, dims: string[], rows: number, cols: number): string {\n  if (rank === 0 || rank === 1) {\n    return '';\n  }\n  // rank >= 2 for width+height pack.\n  else {\n    const setup = `\n    int r = ${dims[rank - 2]};\n    int c = ${dims[rank - 1]};\n    int rp1 = ${dims[rank - 2]} + 1;\n    int cp1 = ${dims[rank - 1]} + 1;\n    bool rEdge = rp1 >= ${cols};\n    bool cEdge = cp1 >= ${rows};\n    `;\n    return setup;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {getGlChannels} from '../utils';\n\nexport function getVecChannels(name: string, rank: number): string[] {\n  return getGlChannels(rank).map(d => `${name}.${d}`);\n}\n\nexport function getChannels(name: string, rank: number): string[] {\n  if (rank === 1) {\n    return [name];\n  }\n  return getVecChannels(name, rank);\n}\n\nexport function unpackFromChannel(): string {\n  return `\n    float getChannel(vec4 frag, int dim) {\n      int modCoord = imod(dim, 2);\n      return modCoord == 0 ? frag.r : frag.g;\n    }\n\n    float getChannel(vec4 frag, vec2 innerDims) {\n      vec2 modCoord = mod(innerDims, 2.);\n      return modCoord.x == 0. ?\n        (modCoord.y == 0. ? frag.r : frag.g) :\n        (modCoord.y == 0. ? frag.b : frag.a);\n    }\n  `;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl, Glsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface PadAttributes extends AttributeWithCacheKey {\n  readonly mode: string;\n  readonly pads: number[];\n  readonly value: number;\n}\n\nconst padProgramMetadata = {\n  name: 'Pad',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked],\n};\n\nexport const padV2: OperatorImplementation<PadAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: PadAttributes): Tensor[] => {\n      validateInputsV2(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...padProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createPadProgramInfo(inferenceHandler, inputs[0], attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parsePadAttributesV2: OperatorInitialization<PadAttributes> = (node: Graph.Node): PadAttributes => {\n  const mode = node.attributes.getString('mode', 'constant');\n  const value = node.attributes.getFloat('value', 0.0);\n  const pads = node.attributes.getInts('pads');\n  return createAttributeWithCacheKey({mode, value, pads});\n};\n\nexport const padV11: OperatorImplementation<string> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], mode: string): Tensor[] => {\n      validateInputsV11(inputs);\n      const attrubutes = generatePadAttributesFromInputs(inferenceHandler, inputs, mode);\n      return padV2(inferenceHandler, [inputs[0]], attrubutes);\n    };\n\nexport const parsePadAttributesV11: OperatorInitialization<string> = (node: Graph.Node): string =>\n    node.attributes.getString('mode', 'constant');\n\nconst generatePadAttributesFromInputs =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], mode: string): PadAttributes => {\n      if (!inferenceHandler.session.isInitializer(inputs[1].dataId) ||\n          (inputs.length >= 3 && !inferenceHandler.session.isInitializer(inputs[2].dataId))) {\n        throw new Error('dynamic pad attributes are not allowed');\n      }\n\n      const pads = Array.from(inputs[1].integerData);\n      const value = (inputs.length >= 3) ? inputs[2].floatData[0] : 0.0;\n\n      return createAttributeWithCacheKey({mode, pads, value});\n    };\n\nconst createPadProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: PadAttributes): ProgramInfo => {\n      const outputShape = ShapeUtil.padShape(input.dims.slice(), attributes.pads);\n      const rank = outputShape.length;\n      const padFunction = getPadFunction(inferenceHandler, input, attributes);\n      const shaderSource = `\n      ${padFunction}\n      float process(int[${rank}] indices) {\n          return padA(indices);\n      }`;\n      return {\n        name: 'Pad',\n        inputNames: ['A'],\n        inputTypes: [TextureType.unpacked],\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputsV2 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Pad requires 1 input');\n  }\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n};\n\nconst validateInputsV11 = (inputs: Tensor[]): void => {\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Pad requires 2 or 3 inputs');\n  }\n  if (inputs[1].type !== 'int32') {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs.length >= 3 && inputs[2].type === 'string') {\n    throw new Error('Invalid input type.');\n  }\n};\n\nconst getPadFunction = (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: PadAttributes): string => {\n  const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n  const [width, height] = inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n  const strides = ShapeUtil.computeStrides(input.dims);\n\n  switch (attributes.mode) {\n    case 'constant':\n      return getPadConstant(glsl, input.dims, strides, width, height, attributes.pads, attributes.value);\n    case 'reflect':\n      return getPadReflect(glsl, input.dims, strides, width, height, attributes.pads);\n    case 'edge':\n      return getPadEdge(glsl, input.dims, strides, width, height, attributes.pads);\n    default:\n      throw new Error('Invalid mode');\n  }\n};\n\nconst getPadConstant =\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[],\n     value: number): string => {\n      const rank = shape.length;\n      let block = '';\n      for (let i = rank - 1; i >= 0; --i) {\n        block += `\n        k = m[${i}] - ${pads[i]};\n        if (k < 0)  return constant;\n        if (k >= ${shape[i]}) return constant;\n        offset += k * ${strides[i]};\n        `;\n      }\n      return `\n      float padA(int m[${rank}]) {\n        const float constant = float(${value});\n        int offset = 0;\n        int k = 0;\n        ${block}\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\n        return value;\n      }\n      `;\n    };\n\nconst getPadReflect =\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[]):\n        string => {\n          const rank = shape.length;\n\n          let block = '';\n          for (let i = rank - 1; i >= 0; --i) {\n            block += `\n        k = m[${i}] - ${pads[i]};\n        if (k < 0) { k = -k; }\n        {\n          const int _2n_1 = ${2 * (shape[i] - 1)};\n          k = int( mod( float(k), float(_2n_1) ) ) ;\n          if(k >= ${shape[i]}) { k = _2n_1 - k; }\n        }\n        offset += k * ${strides[i]};\n        `;\n          }\n          return `\n      float padA(int m[${rank}]) {\n        int offset = 0;\n        int k = 0;\n        ${block}\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\n        return value;\n      }\n      `;\n        };\n\nconst getPadEdge =\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[]):\n        string => {\n          const rank = shape.length;\n\n          let block = '';\n          for (let i = rank - 1; i >= 0; --i) {\n            block += `\n        k = m[${i}] - ${pads[i]};\n        if (k < 0)  k = 0;\n        if (k >= ${shape[i]}) k = ${shape[i] - 1};\n        offset += k * ${strides[i]};\n      `;\n          }\n          return `\n      float padA(int m[${rank}]) {\n        int offset = 0;\n        int k = 0;\n        ${block}\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\n        return value;\n      }\n      `;\n        };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {PoolConvUtil, ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport interface AveragePoolAttributes extends AttributeWithCacheKey {\n  readonly autoPad: string;\n  readonly ceilMode: number;\n  readonly countIncludePad: boolean;\n  readonly kernelShape: readonly number[];\n  readonly strides: readonly number[];\n  readonly pads: readonly number[];\n}\n\nexport const averagePool: OperatorImplementation<AveragePoolAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: AveragePoolAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const metadata =\n          {name: 'AveragePool', inputNames: ['X'], inputTypes: [TextureType.unpacked], cacheHint: attributes.cacheKey};\n      const output = inferenceHandler.run(\n          {...metadata, get: () => createAveragePoolProgramInfo(inputs, metadata, false, attributes)}, inputs);\n      return [output];\n    };\n\nexport const parseAveragePoolAttributes: OperatorInitialization<AveragePoolAttributes> =\n    (node: Graph.Node): AveragePoolAttributes => {\n      const autoPad = node.attributes.getString('auto_pad', 'NOTSET');\n      const ceilMode = node.attributes.getInt('ceil_mode', 0);\n      const countIncludePad = (node.attributes.getInt('count_include_pad', 0) === 0 ? false : true);\n      const kernelShape = node.attributes.getInts('kernel_shape');\n      const strides = node.attributes.getInts('strides', []);\n      const pads = node.attributes.getInts('pads', []);\n\n      // TODO: support attribute 'ceil_mode'\n      if (ceilMode !== 0) {\n        throw new Error('using ceil() in shape computation is not yet supported for AveragePool');\n      }\n\n      return createAttributeWithCacheKey({autoPad, ceilMode, countIncludePad, kernelShape, strides, pads});\n    };\n\nconst createAveragePoolProgramInfo =\n    (inputs: Tensor[], metadata: ProgramMetadata, isGlobalOperator: boolean, attributes: AveragePoolAttributes):\n        ProgramInfo => {\n          const [adjustedAttributes, outputShape] =\n              getAdjustedPoolAttributesAndOutputShape(inputs, attributes, isGlobalOperator);\n          const kernelSize = ShapeUtil.size(adjustedAttributes.kernelShape);\n          const op1 = 'value += _X(x);';\n          let op2 = '';\n          if (adjustedAttributes.countIncludePad) {\n            op2 += `value /= float(${kernelSize});`;\n          } else {\n            op2 += `value /= float(${kernelSize} - pad);`;\n          }\n          const poolingCode = generatePoolingCode(inputs[0].dims, adjustedAttributes, op1, op2, '0.0');\n          const shaderSource = `\n        ${poolingCode}\n      `;\n          return {\n            ...metadata,\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nexport const globalAveragePool: OperatorImplementation<AveragePoolAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: AveragePoolAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const metadata = {\n        name: 'GlobalAveragePool',\n        inputNames: ['X'],\n        inputTypes: [TextureType.unpacked],\n        cacheHint: `${attributes.countIncludePad}`\n      };\n      const output = inferenceHandler.run(\n          {...metadata, get: () => createAveragePoolProgramInfo(inputs, metadata, true, attributes)}, inputs);\n      return [output];\n    };\n\nexport const parseGlobalAveragePoolAttributes: OperatorInitialization<AveragePoolAttributes> =\n    (node: Graph.Node): AveragePoolAttributes => {\n      const countIncludePad = (node.attributes.getInt('count_include_pad', 0) === 0 ? false : true);\n      return createAttributeWithCacheKey(\n          {autoPad: '', ceilMode: 0, countIncludePad, kernelShape: [], strides: [], pads: []});\n    };\n\nexport interface MaxPoolAttributes extends AveragePoolAttributes {\n  readonly storageOrder: number;\n  readonly dilations: number[];\n}\n\nexport const maxPool: OperatorImplementation<MaxPoolAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: MaxPoolAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const metadata =\n          {name: 'MaxPool', inputNames: ['X'], inputTypes: [TextureType.unpacked], cacheHint: attributes.cacheKey};\n      const output = inferenceHandler.run(\n          {...metadata, get: () => createMaxPoolProgramInfo(inputs, metadata, false, attributes)}, inputs);\n      return [output];\n    };\n\nexport const parseMaxPoolAttributes: OperatorInitialization<MaxPoolAttributes> =\n    (node: Graph.Node): MaxPoolAttributes => {\n      const autoPad = node.attributes.getString('auto_pad', 'NOTSET');\n      const ceilMode = node.attributes.getInt('ceil_mode', 0);\n      const kernelShape = node.attributes.getInts('kernel_shape');\n      const strides = node.attributes.getInts('strides', []);\n      const pads = node.attributes.getInts('pads', []);\n      const storageOrder = node.attributes.getInt('storage_order', 0);\n      const dilations = node.attributes.getInts('dilations', []);\n\n      // TODO: support attribute 'ceil_mode' and 'storage_order'\n      if (storageOrder !== 0) {\n        throw new Error('column major storage order is not yet supported for MaxPool');\n      }\n      if (ceilMode !== 0) {\n        throw new Error('using ceil() in shape computation is not yet supported for MaxPool');\n      }\n\n      return createAttributeWithCacheKey(\n          {autoPad, ceilMode, countIncludePad: false, kernelShape, strides, pads, storageOrder, dilations});\n    };\n\nconst createMaxPoolProgramInfo =\n    (inputs: Tensor[], metadata: ProgramMetadata, isGlobalOperator: boolean, attributes: MaxPoolAttributes):\n        ProgramInfo => {\n          const [adjustedAttributes, outputShape] =\n              getAdjustedPoolAttributesAndOutputShape(inputs, attributes, isGlobalOperator);\n          const op1 = `\n      value = max(_X(x), value);\n    `;\n          const op2 = '';\n          const poolingCode = generatePoolingCode(inputs[0].dims, adjustedAttributes, op1, op2, '-1e5');\n          const shaderSource = `\n      ${poolingCode}\n    `;\n          return {\n            ...metadata,\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nconst getAdjustedPoolAttributesAndOutputShape =\n    (inputs: Tensor[], attributes: AveragePoolAttributes|MaxPoolAttributes, isGlobalOperator: boolean):\n        [AveragePoolAttributes|MaxPoolAttributes, number[]] => {\n          const inputShape = inputs[0].dims.slice();\n          const hasDilations = Object.hasOwnProperty.call(attributes, 'dilations');\n          const kernelShape = attributes.kernelShape.slice();\n          const strides = attributes.strides.slice();\n          const dilations: number[] = hasDilations ? (attributes as MaxPoolAttributes).dilations.slice() : [];\n          const pads = attributes.pads.slice();\n          PoolConvUtil.adjustPoolAttributes(isGlobalOperator, inputShape, kernelShape, strides, dilations, pads);\n\n          const outputShape = PoolConvUtil.computePoolOutputShape(\n              isGlobalOperator, inputShape, strides, dilations, kernelShape, pads, attributes.autoPad);\n\n          const newAttributes = Object.assign({}, attributes);\n          if (hasDilations) {\n            Object.assign(newAttributes, {kernelShape, strides, pads, dilations, cacheKey: attributes.cacheKey});\n          } else {\n            Object.assign(newAttributes, {kernelShape, strides, pads, cacheKey: attributes.cacheKey});\n          }\n          return [newAttributes, outputShape];\n        };\n\nconst globalMaxPoolAttributes = {\n  autoPad: '',\n  ceilMode: 0,\n  countIncludePad: false,\n  kernelShape: [],\n  strides: [],\n  pads: [],\n  storageOrder: 0,\n  dilations: [],\n  cacheKey: ''\n};\n\nconst globalMaxPoolMetadata = {\n  name: 'GlobalMaxPool',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked]\n};\n\nexport const globalMaxPool = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n  const output = inferenceHandler.run(\n      {\n        ...globalMaxPoolMetadata,\n        get: () => createMaxPoolProgramInfo(inputs, globalMaxPoolMetadata, true, globalMaxPoolAttributes)\n      },\n      inputs);\n  return [output];\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Pool ops requires 1 input.');\n  }\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n};\n\nconst generatePoolingCode =\n    (inputDims: readonly number[], attributes: AveragePoolAttributes, op1: string, op2: string, start: string):\n        string => {\n          const rank = inputDims.length;\n          if (attributes.kernelShape.length <= 2) {\n            const kw = attributes.kernelShape[attributes.kernelShape.length - 1];\n            const sw = attributes.strides[attributes.strides.length - 1];\n            const pwStart = attributes.pads[attributes.pads.length / 2 - 1];\n            const pwEnd = attributes.pads[attributes.pads.length - 1];\n            const dimW = inputDims[rank - 1];\n            let codeW = '';\n            let codeH = '';\n            let codeHEnd = '';\n            if (pwStart + pwEnd !== 0) {\n              codeW = `\n          for (int i = 0; i < ${kw}; i++) {\n            x[${rank} - 1] = indices[${rank} - 1] * ${sw} - ${pwStart} + i;\n            if (x[${rank} - 1] < 0 || x[${rank} - 1] >= ${dimW}) {\n              pad++;\n              continue;\n            }\n            ${op1}\n          }`;\n            } else {\n              codeW = `\n          for (int i = 0; i < ${kw}; i++) {\n            x[${rank} - 1] = indices[${rank} - 1] * ${sw} - ${pwStart} + i;\n            ${op1}\n          }`;\n            }\n\n            if (attributes.kernelShape.length === 2) {\n              const kh = attributes.kernelShape[attributes.kernelShape.length - 2];\n              const sh = attributes.strides[attributes.strides.length - 2];\n              const phStart = attributes.pads[attributes.pads.length / 2 - 2];\n              const phEnd = attributes.pads[attributes.pads.length - 2];\n              const dimH = inputDims[rank - 2];\n              if (phStart + phEnd !== 0) {\n                codeH = `\n            for (int j = 0; j < ${kh}; j++) {\n              x[${rank} - 2] = indices[${rank} - 2] * ${sh} - ${phStart} + j;\n              if (x[${rank} - 2] < 0 || x[${rank} - 2] >= ${dimH}) {\n                pad+= ${kw};\n                continue;\n              }\n          `;\n              } else {\n                codeH = `\n            for (int j = 0; j < ${kh}; j++) {\n              x[${rank} - 2] = indices[${rank} - 2] * ${sh} - ${phStart} + j;\n            `;\n              }\n              codeHEnd = `\n          }\n        `;\n            }\n\n            const poolingCode = `\n        float process(int indices[${rank}]) {\n          int x[${rank}];\n          copyVec(indices, x);\n\n          float value = ${start};\n          int pad = 0;\n          ${codeH}\n          ${codeW}\n          ${codeHEnd}\n          ${op2}\n          return value;\n        }\n      `;\n            return poolingCode;\n          } else {\n            const kernelSize = ShapeUtil.size(attributes.kernelShape);\n            const kernelStrides = ShapeUtil.computeStrides(attributes.kernelShape);\n            const stridesRank = kernelStrides.length;\n            const padsRank = attributes.pads.length;\n            const offsetToIndicesFunction = offsetToIndices(stridesRank);\n            const copyInputDims = copyArray(inputDims, 'inputDims');\n            const copyPads = copyArray(attributes.pads, 'pads');\n            const copyKernelStrides = copyArray(kernelStrides, 'kernelStrides');\n            const copyStrides = copyArray(attributes.strides, 'strides');\n            const hasPads = attributes.pads.reduce((sum, cur) => sum + cur);\n            let padCode = '';\n            if (hasPads) {\n              padCode = `\n            if (x[j] >= inputDims[j] || x[j] < 0) {\n              pad++;\n              isPad = true;\n              break;\n            }\n          }\n          if (!isPad) {\n            ${op1}\n          }`;\n            } else {\n              padCode = `\n          }\n          ${op1}\n        `;\n            }\n            const poolingCode = `\n        ${offsetToIndicesFunction}\n        float process(int indices[${rank}]) {\n          int x[${rank}];\n          copyVec(indices, x);\n          int offset[${stridesRank}];\n          int pads[${padsRank}];\n          int inputDims[${rank}];\n          int kernelStrides[${stridesRank}];\n          int strides[${stridesRank}];\n          ${copyPads}\n          ${copyInputDims}\n          ${copyStrides}\n          ${copyKernelStrides}\n\n          float value = ${start};\n          int pad = 0;\n          bool isPad = false;\n          for (int i = 0; i < ${kernelSize}; i++) {\n            offsetToIndices(i, kernelStrides, offset);\n            isPad = false;\n            for (int j = ${rank} - ${stridesRank}; j < ${rank}; j++) {\n              x[j] = indices[j] * strides[j - ${rank} + ${stridesRank}]\n                + offset[j - ${rank} + ${stridesRank}] - pads[j - 2];\n              ${padCode}\n          }\n          ${op2}\n\n          return value;\n        }\n      `;\n            return poolingCode;\n          }\n        };\n\nconst copyArray = (array: readonly number[], arrayName: string): string => {\n  let block = '';\n  for (let i = 0; i < array.length; i++) {\n    block += `\n      ${arrayName}[${i}] = ${array[i]};\n    `;\n  }\n  return block;\n};\n\nconst offsetToIndices = (rank: number): string => `\n  void offsetToIndices(int offset, int[${rank}] strides, out int[${rank}] indices) {\n    if (${rank} == 0) {\n      return;\n    }\n    for (int i = 0; i < ${rank} - 1; ++i) {\n      indices[i] = offset / strides[i];\n      offset -= indices[i] * strides[i];\n    }\n    indices[${rank} - 1] = offset;\n  }`;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport interface ReduceAttributes extends AttributeWithCacheKey {\n  readonly axes: number[];\n  readonly keepDims: boolean;\n}\n\n// return [init ops, reduce ops, final ops]\ntype ReduceOp = (inputs: Tensor[], axes: number[]) => string[];\n\nconst reduce =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes, name: string,\n     reduceOp: ReduceOp): Tensor[] => {\n      validateInputs(inputs);\n\n      const reduceProgramMetadata = {\n        name,\n        inputNames: ['A'],\n        inputTypes: [TextureType.unpacked],\n      };\n\n      const output = inferenceHandler.run(\n          {\n            ...reduceProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () =>\n                createReduceProgramInfo(inferenceHandler, inputs, attributes, name, reduceOp, reduceProgramMetadata)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseReduceAttributes: OperatorInitialization<ReduceAttributes> = (node: Graph.Node): ReduceAttributes => {\n  const axes = node.attributes.getInts('axes', []);\n  const keepDims = node.attributes.getInt('keepdims', 1) === 1;\n  return createAttributeWithCacheKey({axes, keepDims});\n};\n\nconst createReduceProgramInfo =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes, name: string, reduceOp: ReduceOp,\n     reduceProgramMetadata: ProgramMetadata): ProgramInfo => {\n      const outputShape: number[] = [];\n      const iRank = inputs[0].dims.length || 1;\n\n      const idxCopy = [];  // copy output indexes to input indexes\n\n      const axes = ShapeUtil.normalizeAxes(attributes.axes, inputs[0].dims.length);\n      const ops = reduceOp(inputs, axes);\n      let reduceOps = ops[1];\n\n      for (let k = 0; k < inputs[0].dims.length; k++) {\n        // if this axis is reduced\n        if (axes.indexOf(k) >= 0 || axes.length === 0) {\n          if (attributes.keepDims) {\n            outputShape.push(1);\n          }  // else { remove the axis from outputShape; }\n\n          // loop over the d-th axis\n          reduceOps = `\n          for(int j${k} = 0; j${k} < ${inputs[0].dims[k]}; j${k}++) {\n            inputIdx[${k}] = j${k};\n            ${reduceOps}\n          }`;\n        } else {\n          idxCopy.push(`inputIdx[${k}] = outputIdx[${outputShape.length}];`);\n\n          outputShape.push(inputs[0].dims[k]);\n        }\n      }\n\n      const oRank = outputShape.length || 1;\n\n      const shaderSource = `\n      float process(int outputIdx[${oRank}]) {\n        float value;                 // final result\n        int inputIdx[${iRank}];      // addressing input data\n        ${idxCopy.join('\\n')}\n        ${ops[0]}       // init ops for reduce max/min\n        ${reduceOps}\n        ${ops[2]}       // final computation for reduce mean\n        return value;\n      }`;\n\n      return {\n        ...reduceProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  // TODO: support Reduce* operators with 2 inputs.\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Reduce op requires 1 input.');\n  }\n\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invalid input type.');\n  }\n};\n\nexport const reduceSum: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['value = 0.0;', 'value += _A(inputIdx);', ''];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceSum', reduceOp);\n    };\n\nexport const reduceMean: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\n        let size = 1.0;\n        for (let k = 0; k < inputs[0].dims.length; k++) {\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\n            size *= inputs[0].dims[k];\n          }\n        }\n\n        return ['value = 0.0;', 'value += _A(inputIdx);', `value /= ${size}.;`];  // ensure real number with `.`\n      };\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMean', reduceOp);\n    };\n\nexport const reduceMax: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\n        const idxZero = [];\n        for (let k = 0; k < inputs[0].dims.length; k++) {\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\n            idxZero.push(`inputIdx[${k}] = 0;`);  // first element\n          }\n        }\n\n        return [`${idxZero.join('\\n')}\\nvalue = _A(inputIdx);`, 'value = max(value, _A(inputIdx));', ''];\n      };\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMax', reduceOp);\n    };\n\nexport const reduceMin: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\n        const idxZero = [];\n        for (let k = 0; k < inputs[0].dims.length; k++) {\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\n            idxZero.push(`inputIdx[${k}] = 0;`);  // first element\n          }\n        }\n\n        return [`${idxZero.join('\\n')}\\nvalue = _A(inputIdx);`, 'value = min(value, _A(inputIdx));', ''];\n      };\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMin', reduceOp);\n    };\n\nexport const reduceProd: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['value = 1.0;', 'value *= _A(inputIdx);', ''];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceProd', reduceOp);\n    };\n\nexport const reduceLogSum: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['value = 0.0;', 'value += _A(inputIdx);', 'value = log(value);'];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceLogSum', reduceOp);\n    };\n\nexport const reduceLogSumSquare: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['float t; value = 0.0;', 't = _A(inputIdx); value += t * t;', ''];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceLogSumSquare', reduceOp);\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {unpackFromChannel} from './packing-utils';\n\nconst createPackedReshape3DProgramMetadata = (outputShape3D: readonly number[]) =>\n    ({name: 'Reshape (packed)', inputTypes: [TextureType.packed], inputNames: ['A'], cacheHint: `${outputShape3D}`});\n\nconst createPackedReshape3DProgramInfo =\n    (handler: WebGLInferenceHandler, input3D: Tensor, metadata: ProgramMetadata, outputShape3D: readonly number[]):\n        ProgramInfo => {\n          const inputShape3D = input3D.dims as [number, number, number];\n          const squeezedOutputShape = outputShape3D as [number, number, number];\n\n          let mainLoop = '';\n          for (let i = 0; i < 4; i++) {\n            let outputCoords = '';\n            switch (i) {\n              case 0:\n                outputCoords = 'outputCoords = rc;';\n                break;\n              case 1:\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y+1, rc.z);';\n                break;\n              case 2:\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y, rc.z+1);';\n                break;\n              case 3:\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y+1, rc.z+1);';\n                break;\n              default:\n                throw new Error();\n            }\n\n            mainLoop += `\n        ${outputCoords}\n        ${i > 0 ? 'if(outputCoords.y < rows && outputCoords.z < cols){' : ''}\n          int flattenedIndex = getFlattenedIndex(outputCoords);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flattenedIndex);\n          vec2 innerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${i}] = getChannel(getA(inputRC.x, inputRC.y, inputRC.z), innerDims);\n\n        ${i > 0 ? '}' : ''}\n      `;\n          }\n          const glsl = getGlsl(handler.session.backend.glContext.version);\n\n          const shaderSource = `\n      ${getReshapedInputCoords(inputShape3D)}\n      ${getFlattenedIndexFrom3D(squeezedOutputShape)}\n      ${unpackFromChannel()}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.0);\n\n        ivec3 outputCoords;\n        int rows = ${squeezedOutputShape[2]};\n        int cols = ${squeezedOutputShape[1]};\n\n        ${mainLoop}\n        ${glsl.output} = result;\n      }\n    `;\n\n          return {\n            ...metadata,\n            output: {dims: squeezedOutputShape, type: input3D.type, textureType: TextureType.packed},\n            shaderSource,\n            hasMain: true\n          };\n        };\n\nexport const createPackedReshape3DProgramInfoLoader =\n    (handler: WebGLInferenceHandler, input3D: Tensor, outputShape3D: readonly number[]): ProgramInfoLoader => {\n      const metadata = createPackedReshape3DProgramMetadata(outputShape3D);\n      return {...metadata, get: () => createPackedReshape3DProgramInfo(handler, input3D, metadata, outputShape3D)};\n    };\n\nexport function processDims3D(shape: ArrayLike<number>): [number, number, number] {\n  if (shape.length === 0) {\n    return [1, 1, 1];\n  }\n  // TODO: squeeze other shapes to 2D case\n  let batch = 1;\n  for (let i = 0; i < shape.length - 2; ++i) {\n    batch *= shape[i];\n  }\n  return [batch, shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]];\n}\n\n// For packed reshape, we need to re-arrange texel data for output shape.\n// Our pack is designed to pack a 2x2 tile in last h and w dimension, so\n// for the reshaped new tensor, we just need to re-arrange the last h and\n// w dimension. For any shape that is not in 3D, i.e. [batch, W, H], we\n// first convert it to 3D by collapsing other dimension to batch dim, then\n// process with the last two dimensions.\n// Note: we only need the shape tensor to calculate output shape, so the\n// content in shape tensor is never uploaded to GPU. It is always kept in CPU.\n// TODO: optimize the algorithm -- in some cases, if the last two dims are\n// the same between input shape and output shape, the packed reshape can be\n// treated as no-op.\nexport function isReshapeCheap(dims: readonly number[], reshapedDims: readonly number[]) {\n  let isCheapReshape = false;\n  if (dims.length === 0 || reshapedDims.length === 0) {  // scalar\n    isCheapReshape = true;\n  } else if (dims.length < 2 || reshapedDims.length < 2) {  // 1D\n    isCheapReshape = dims[dims.length - 1] === reshapedDims[reshapedDims.length - 1];\n  } else {  // 2D +\n    isCheapReshape = dims[dims.length - 1] === reshapedDims[reshapedDims.length - 1] &&\n        dims[dims.length - 2] === reshapedDims[reshapedDims.length - 2];\n  }\n\n  return isCheapReshape;\n}\n\nfunction getReshapedInputCoords(shape: [number, number, number]): string {\n  const strides = ShapeUtil.computeStrides(shape);\n  const coords = ['b', 'r', 'c'];\n  const index = 'index';\n  const coordsFromIndexSnippet = strides\n                                     .map((stride, i) => {\n                                       const line1 = `int ${coords[i]} = ${index} / ${stride}`;\n                                       const line2 = i === strides.length - 1 ?\n                                           `int ${coords[i + 1]} = ${index} - ${coords[i]} * ${stride}` :\n                                           `index -= ${coords[i]} * ${stride}`;\n                                       return `${line1}; ${line2};`;\n                                     })\n                                     .join('');\n\n  return `\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${coordsFromIndexSnippet}\n      return ivec3(b, r, c);\n    }\n  `;\n}\n\nfunction getFlattenedIndexFrom3D(shape: [number, number, number]): string {\n  const strides = ShapeUtil.computeStrides(shape);\n\n  return `\n  int getFlattenedIndex(ivec3 coords) {\n    // reverse y, z order\n    return coords.x * ${strides[0]} + coords.z * ${strides[1]} + coords.y;\n  }\n`;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const reshape = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  const reshapedDims = ShapeUtil.calculateReshapedDims(inputs[0].dims, inputs[1].integerData);\n  if (handler.session.pack) {\n    return [handler.reshapePacked(inputs[0], reshapedDims)];\n  } else {\n    return [handler.reshapeUnpacked(inputs[0], reshapedDims)];\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\nimport {getCoordsDataType} from '../utils';\n\nimport {unpackFromChannel} from './packing-utils';\nimport {parseUpsampleAttributes, scalesValidation, UpsampleAttributes, validateInputs} from './upsample';\n\nconst resizeProgramMetadata = {\n  name: 'Resize',\n  inputNames: ['A'],\n  inputTypes: [TextureType.packed]\n};\n\nexport const resize: OperatorImplementation<UpsampleAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);\n      const output = inferenceHandler.run(\n          {\n            ...resizeProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createPackedResizeProgramInfo(inferenceHandler, inputs, attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseResizeAttributesV10: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 10);\n\nexport const parseResizeAttributesV11: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 11);\n\nconst createPackedResizeProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const [scales, outputShape] = prepareInputs(inputs, attributes);\n\n      const isSame =\n          scales.every((s: number) => s === 1) && attributes.coordinateTransformMode !== 'tf_crop_and_resize';\n      if (isSame) {\n        return {\n          ...resizeProgramMetadata,\n          output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n          hasMain: true,\n          shaderSource: `void main() {\n                    vec4 v = ${glsl.texture2D}(X, TexCoords);\n                    ${glsl.output} = v;\n                }`\n        };\n      }\n\n      const dim = outputShape.length;\n      if (dim < 2) {\n        throw new Error(`output dimension should be at least 2, but got ${dim}`);\n      }\n\n      const outputHeight = outputShape[dim - 2];\n      const outputWidth = outputShape[dim - 1];\n\n      const inputShape = inputs[0].dims;\n      if (dim !== inputShape.length) {\n        throw new Error(`output dimension should match input ${inputShape.length}, but got ${dim}`);\n      }\n      const inputHeight = inputShape[dim - 2];\n      const inputWidth = inputShape[dim - 1];\n\n      const scalesHeight = scales[dim - 2];\n      const scalesWidth = scales[dim - 1];\n\n      let getSourceFracIndex = '';\n\n      if (attributes.mode !== 'linear') {\n        // TODO: support other modes\n        throw new Error(`resize (packed) does not support mode: '${attributes.mode}'`);\n      }\n      switch (attributes.coordinateTransformMode) {\n        case 'asymmetric':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        return vec4(coords) / scaleWHWH;\n                    }\n                `;\n          break;\n        case 'half_pixel':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        return (vec4(coords) + 0.5) / scaleWHWH - 0.5;\n                    }\n                `;\n          break;\n        case 'pytorch_half_pixel':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        vec4 fcoords = vec4(coords);\n                        return vec4(\n                            ${outputWidth}.0 > 1.0 ? (fcoords.x + 0.5) / scaleWHWH.x - 0.5 : 0.0,\n                            ${outputHeight}.0 > 1.0 ? (fcoords.y + 0.5) / scaleWHWH.y - 0.5 : 0.0,\n                            ${outputWidth}.0 > 1.0 ? (fcoords.z + 0.5) / scaleWHWH.z - 0.5 : 0.0,\n                            ${outputHeight}.0 > 1.0 ? (fcoords.w + 0.5) / scaleWHWH.w - 0.5 : 0.0\n                          );\n                    }\n                `;\n          break;\n        case 'align_corners':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        vec4 resized = vec4(${outputWidth}.0 - 1.0, ${outputHeight}.0 - 1.0, ${outputWidth}.0 - 1.0,\n                            ${outputHeight}.0 - 1.0);\n                        vec4 original = vec4(${inputWidth}.0 - 1.0, ${inputHeight}.0 - 1.0, ${inputWidth}.0 - 1.0,\n                            ${inputHeight}.0 - 1.0);\n                        vec4 new_scale = original / resized;\n                        return vec4(coords) * new_scale;\n                    }\n                `;\n          break;\n        default:\n          // TODO:supporting other coordinateTransformModes\n          throw new Error(`resize (packed) does not support coordinateTransformMode: \\\n                                '${attributes.coordinateTransformMode}'`);\n      }\n\n      const coordsDataType = getCoordsDataType(dim);\n      const unpackChannel = unpackFromChannel();\n      const shaderSource = `\n            const vec2 inputWH = vec2(${inputHeight}.0, ${inputWidth}.0);\n            const vec4 scaleWHWH = vec4(float(${scalesHeight}), float(${scalesWidth}), float(${scalesHeight}), float(${\n          scalesWidth}));\n            ${unpackChannel}\n            ${getSourceFracIndex}\n            float getAValue(int x10, int r, int c, int d) {\n                return getChannel(getA(x10, r, c, d), vec2(c, d));\n            }\n            void main() {\n                ${coordsDataType} rc = getOutputCoords();\n\n                int batch = rc[0];\n                int depth = rc[1];\n\n                // retrieve the 4 coordinates that is used in the 4 packed output values.\n                ivec4 coords = ivec4(rc.wz, rc.w + 1, rc.z + 1);\n\n                // calculate the source index in fraction\n                vec4 sourceFrac = getSourceFracIndex(coords);\n\n                // get the lower and upper bound of the 4 values that will be packed into one texel.\n                ivec4 x00 = ivec4(max(sourceFrac.xy, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.xy)));\n                ivec4 x01 = ivec4(max(sourceFrac.xw, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.xw)));\n                ivec4 x10 = ivec4(max(sourceFrac.zy, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.zy)));\n                ivec4 x11 = ivec4(max(sourceFrac.zw, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.zw)));\n\n                bool hasNextRow = rc.w < ${outputHeight - 1};\n                bool hasNextCol = rc.z < ${outputWidth - 1};\n\n                // pack x00, x01, x10, x11's top-left corner into one vec4 structure\n                vec4 topLeft = vec4(\n                    getAValue(batch, depth, x00.x, x00.y),\n                    hasNextCol ? getAValue(batch, depth, x01.x, x01.y) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.x, x10.y) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.x, x11.y) : 0.0);\n\n                // pack x00, x01, x10, x11's top-right corner into one vec4 structure\n                vec4 topRight = vec4(\n                    getAValue(batch, depth, x00.x, x00.w),\n                    hasNextCol ? getAValue(batch, depth, x01.x, x01.w) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.x, x10.w) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.x, x11.w) : 0.0);\n\n                // pack x00, x01, x10, x11's bottom-left corner into one vec4 structure\n                vec4 bottomLeft = vec4(\n                    getAValue(batch, depth, x00.z, x00.y),\n                    hasNextCol ? getAValue(batch, depth, x01.z, x01.y) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.z, x10.y) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.z, x11.y) : 0.0);\n\n                // pack x00, x01, x10, x11's bottom-right corner into one vec4 structure\n                vec4 bottomRight = vec4(\n                    getAValue(batch, depth, x00.z, x00.w),\n                    hasNextCol ? getAValue(batch, depth, x01.z, x01.w) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.z, x10.w) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.z, x11.w) : 0.0);\n\n                // calculate the interpolation fraction on u and v direction\n                vec4 frac = vec4(sourceFrac) - floor(sourceFrac);\n                vec4 clampFrac = clamp(frac, vec4(0.0), vec4(1.0));\n\n                vec4 top = mix(topLeft, topRight, clampFrac.ywyw);\n                vec4 bottom = mix(bottomLeft, bottomRight, clampFrac.ywyw);\n                vec4 newValue = mix(top, bottom, clampFrac.xxzz);\n\n                ${glsl.output} = vec4(newValue);\n            }\n        `;\n      return {\n        ...resizeProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n        hasMain: true,\n        shaderSource\n      };\n    };\n\n\nconst prepareInputs = (inputs: Tensor[], attributes: UpsampleAttributes): [readonly number[], readonly number[]] => {\n  const x = inputs[0];\n  const xDims = x.dims;\n\n  let scales = attributes.scales;\n  let outputSizes: number[]|undefined;\n  if (scales.length === 0) {\n    const scalesTensor = inputs[attributes.scalesInputIdx];\n    if (scalesTensor && scalesTensor.size !== 0) {\n      if (inputs[attributes.sizesInputIdx]) {\n        throw new Error('Only one of scales or sizes must be provided as input.');\n      }\n      scales = parseScalesData(scalesTensor, attributes.mode, attributes.isResize);\n    } else {\n      const sizesTensor = inputs[attributes.sizesInputIdx];\n      if (!sizesTensor || sizesTensor.size === 0) {\n        throw new Error('Either scales or sizes MUST be provided as input.');\n      }\n\n      outputSizes = Array.from(sizesTensor.integerData);\n      scales = parseScalesDataFromOutputSize(outputSizes, xDims, attributes.mode, attributes.isResize);\n    }\n  } else {\n    if (inputs[attributes.sizesInputIdx]) {\n      throw new Error('Only one of scales or sizes must be provided as input.');\n    }\n  }\n\n  const yDims = outputSizes || (xDims.map((dim, i) => Math.floor(dim * scales[i])));\n\n  return [scales, yDims];\n};\n\nconst parseScalesData = (scale: Tensor, mode: string, isResize: boolean): number[] => {\n  const scales = Array.from(scale.floatData);\n  scalesValidation(scales, mode, isResize);\n  return scales;\n};\n\nconst parseScalesDataFromOutputSize =\n    (yDims: readonly number[], xDims: readonly number[], mode: string, isResize: boolean): number[] => {\n      const length = xDims.length;\n      const scales = new Array<number>(length);\n\n      for (let i = 0, end = length; i < end; i++) {\n        if (xDims[i] === 0) {\n          if (yDims[i] !== 0) {\n            throw new Error('Input dim is zero but required output dim is non-zero.');\n          }\n          scales[i] = 1;\n        } else {\n          scales[i] = yDims[i] / xDims[i];\n        }\n      }\n      scalesValidation(scales, mode, isResize);\n      return scales;\n    };\n\n// roi data is not used yet. but leave here for future usage.\n// const getRoi = (inputs: Tensor[], attributes: UpsampleAttributes) : number[] => {\n//     let roi: number[] = [];\n//     if (attributes.needRoiInput) {\n//         if (attributes.roiInputIdx <= 0) {\n//             throw new Error('Invalid roi input index.');\n//         }\n//         const roiTensor = inputs[attributes.roiInputIdx];\n//         roi = roiTensor.size > 0 ? Array.from(roiTensor.floatData) : [];\n//     } else {\n//         roi = new Array(inputs[0].dims.length * 2).fill(0);\n//     }\n//     return roi;\n// };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const shape = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n  return [new Tensor([inputs[0].dims.length], 'int32', undefined, undefined, new Int32Array(inputs[0].dims))];\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Shape requires 1 input.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface SliceAttributes extends AttributeWithCacheKey {\n  readonly axes: number[];\n  readonly ends: number[];\n  readonly starts: number[];\n}\n\nconst sliceProgramMetadata = {\n  name: 'Slice',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked]\n};\n\nexport const slice: OperatorImplementation<SliceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SliceAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...sliceProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createSliceProgramInfo(inferenceHandler, inputs[0], attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseSliceAttributes: OperatorInitialization<SliceAttributes> = (node: Graph.Node): SliceAttributes => {\n  const starts = node.attributes.getInts('starts');\n  const ends = node.attributes.getInts('ends');\n  const axes = node.attributes.getInts('axes', []);\n  return createAttributeWithCacheKey({starts, ends, axes});\n};\n\nconst createSliceProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: SliceAttributes): ProgramInfo => {\n      const axes = (attributes.axes.length === 0) ? input.dims.slice(0).map((val, i) => i) : attributes.axes;\n      const normalizedAxes = ShapeUtil.normalizeAxes(axes, input.dims.length);\n      const starts = attributes.starts.map((start, i) => {\n        if (start > input.dims[normalizedAxes[i]] - 1) {\n          return input.dims[normalizedAxes[i]];\n        }\n        return ShapeUtil.normalizeAxis(start, input.dims[normalizedAxes[i]]);\n      });\n      const ends = attributes.ends.map((end, i) => {\n        if (end > input.dims[normalizedAxes[i]] - 1) {\n          return input.dims[normalizedAxes[i]];\n        }\n        return ShapeUtil.normalizeAxis(end, input.dims[normalizedAxes[i]]);\n      });\n\n      const outputShape = input.dims.slice();\n\n      const sliceOps: string[] = [];\n      for (let i = 0; i < normalizedAxes.length; i++) {\n        outputShape[normalizedAxes[i]] = ends[i] - starts[i];\n        if (starts[i] > 0) {\n          sliceOps.push(`outputIdx[${normalizedAxes[i]}] += ${starts[i]};`);\n        }  // else { sliceOps.push(`outputIdx[${normalizedAxes[i]}] += 0;`); }\n      }\n\n      const rank = outputShape.length;\n      const shaderSource = `\n      float process(int outputIdx[${rank}]) {\n        ${sliceOps.join('\\n      ')}\n        return _A(outputIdx);\n      }`;\n      return {\n        ...sliceProgramMetadata,\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Slice requires 1 input.');\n  }\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invalid input type.');\n  }\n};\n\nexport const sliceV10 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputsV10(inputs);\n  const attributes = generateSliceAttributesFromInputs(inferenceHandler, inputs);\n  const output = inferenceHandler.run(\n      {\n        ...sliceProgramMetadata,\n        cacheHint: attributes.cacheKey,\n        get: () => createSliceProgramInfo(inferenceHandler, inputs[0], attributes)\n      },\n      [inputs[0]]);\n  return [output];\n};\n\nconst generateSliceAttributesFromInputs =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): SliceAttributes => {\n      if (!inferenceHandler.session.isInitializer(inputs[1].dataId) ||\n          !inferenceHandler.session.isInitializer(inputs[2].dataId) ||\n          (inputs.length >= 4 && !inferenceHandler.session.isInitializer(inputs[3].dataId)) ||\n          (inputs.length >= 5 && !inferenceHandler.session.isInitializer(inputs[4].dataId))) {\n        throw new Error('dynamic slice attributes are not allowed');\n      }\n\n      if (inputs.length >= 5 && inputs[4].integerData.some((i: number) => i !== 1)) {\n        throw new Error('currently non-1 steps is not supported for Slice');\n      }\n\n      const starts = Array.from(inputs[1].integerData);\n      const ends = Array.from(inputs[2].integerData);\n      const axes = inputs.length >= 4 ? Array.from(inputs[3].integerData) : [];\n      const cacheKey = `${axes};${starts};${ends}`;\n      return {starts, ends, axes, cacheKey};\n    };\n\nconst validateInputsV10 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length < 3 || inputs.length > 5) {\n    throw new Error('Invalid input number.');\n  }\n  if (inputs[1].type !== 'int32' || inputs[1].dims.length !== 1) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs[2].type !== 'int32' || inputs[2].dims.length !== 1) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs.length >= 4 && (inputs[3].type !== 'int32' || inputs[3].dims.length !== 1)) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs.length >= 5 && (inputs[4].type !== 'int32' || inputs[4].dims.length !== 1)) {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nimport {transpose, TransposeAttributes} from './transpose';\n\nexport interface SoftmaxAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n}\n\nconst softmaxComputeMaxProgramMetadata = {\n  name: 'SoftmaxComputeMax',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked],\n};\n\nconst softmaxComputeScaleProgramMetadata = {\n  name: 'SoftmaxComputeScale',\n  inputNames: ['A', 'Max'],\n  inputTypes: [TextureType.unpacked, TextureType.unpacked],\n};\n\nconst softmaxProgramMetadata = {\n  name: 'SoftMax',\n  inputNames: ['A', 'Max', 'Norm'],\n  inputTypes: [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked],\n};\n\nexport const softmax: OperatorImplementation<SoftmaxAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      const inputShape = inputs[0].dims.slice();\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputShape.length);\n      const logicalRowCount = ShapeUtil.sizeToDimension(inputShape, axis);\n      const featureCount = ShapeUtil.sizeFromDimension(inputShape, axis);\n\n      const output = computeSoftmax(inferenceHandler, inputs, attributes, logicalRowCount, featureCount);\n      return output;\n    };\n\nexport const parseSoftmaxAttributes: OperatorInitialization<SoftmaxAttributes> =\n    (node: Graph.Node): SoftmaxAttributes => createAttributeWithCacheKey({axis: node.attributes.getInt('axis', 1)});\n\nexport const parseSoftmaxAttributesV13: OperatorInitialization<SoftmaxAttributes> =\n    (node: Graph.Node): SoftmaxAttributes => createAttributeWithCacheKey({axis: node.attributes.getInt('axis', -1)});\n\n// The \"semantic\" meaning of axis has changed in opset-13.\n// Please compare: https://github.com/onnx/onnx/blob/main/docs/Operators.md#Softmax\n// with https://github.com/onnx/onnx/blob/main/docs/Changelog.md#Softmax-11 for detailed explanations\n// To account for the opset-13 behavior, our plan will be to transpose the \"axis\" dim to the innermost dim\n// and perform softmax and then reverse the transpose. We can skip the transposing aspect if the axis is already\n// the innermost dim\nexport const softmaxV13: OperatorImplementation<SoftmaxAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      const inputShape = inputs[0].dims.slice();\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputShape.length);\n      const rank = inputShape.length;\n\n      const isTransposeRequired = (axis !== rank - 1) ? true : false;\n      const transposedInputShape: number[] = [];\n      let perm: number[] = [];\n      let transposedInputs: Tensor[] = [];\n      let transposeAttribute: TransposeAttributes;\n\n      if (isTransposeRequired) {\n        perm = Array.from({length: rank}).map((_, i) => i);\n\n        // swap the innermost dim with the dim corresponding to axis\n        perm[axis] = rank - 1;\n        perm[rank - 1] = axis;\n\n        perm.map(p => transposedInputShape.push(inputShape[p]));\n\n        transposeAttribute = createAttributeWithCacheKey({perm});\n        transposedInputs = transpose(inferenceHandler, inputs, transposeAttribute);\n      }\n\n      const logicalRowCount = isTransposeRequired ? ShapeUtil.sizeToDimension(transposedInputShape, rank - 1) :\n                                                    ShapeUtil.sizeToDimension(inputShape, rank - 1);\n      const featureCount = isTransposeRequired ? ShapeUtil.sizeFromDimension(transposedInputShape, rank - 1) :\n                                                 ShapeUtil.sizeFromDimension(inputShape, rank - 1);\n\n      const output = computeSoftmax(\n          inferenceHandler, isTransposeRequired ? transposedInputs : inputs, attributes, logicalRowCount, featureCount);\n\n      if (isTransposeRequired) {\n        const reversedOutput = transpose(inferenceHandler, output, transposeAttribute!);\n        return reversedOutput;\n      } else {\n        return output;\n      }\n    };\n\nconst computeSoftmax =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes, logicalRowCount: number,\n     featureCount: number): Tensor[] => {\n      const computeMaxProgramInfo =\n          createComputeMaxProgramInfo(inferenceHandler, inputs[0], logicalRowCount, featureCount, [logicalRowCount]);\n      const max = inferenceHandler.run(\n          {...softmaxComputeMaxProgramMetadata, cacheHint: attributes.cacheKey, get: () => computeMaxProgramInfo},\n          inputs);\n\n      const computeScaleProgramInfo = createComputScaleProgramInfo(\n          inferenceHandler, inputs[0], logicalRowCount, featureCount, computeMaxProgramInfo.output.dims,\n          [logicalRowCount]);\n      const scale = inferenceHandler.run(\n          {...softmaxComputeScaleProgramMetadata, cacheHint: attributes.cacheKey, get: () => computeScaleProgramInfo},\n          [inputs[0], max]);\n\n      const softMaxProgramInfo = createSoftMaxProgramInfo(\n          inferenceHandler, inputs[0], logicalRowCount, featureCount, computeMaxProgramInfo.output.dims,\n          computeScaleProgramInfo.output.dims);\n      const output = inferenceHandler.run(\n          {...softmaxProgramMetadata, cacheHint: attributes.cacheKey, get: () => softMaxProgramInfo},\n          [inputs[0], max, scale]);\n      return [output];\n    };\n\n/**\n * Create a texture that contains the maximum value of each of the 'N' rows\n */\nconst createComputeMaxProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\n     outputShape: number[]): ProgramInfo => {\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n      const rank = outputShape.length;\n\n      if (logicalRowCount < 1 || featureCount < 1) {\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\n      }\n\n      if (outputShape.length !== 1) {\n        throw new Error('Dimensionality of the output should be 1');\n      }\n\n      if (outputShape[0] !== logicalRowCount) {\n        throw new Error('Shape of the output should be equal to logical row count');\n      }\n\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const shaderSource = `\n      float process(int[${rank}] indices) {\n        int logical_row_start_offset = indices[0] * ${featureCount};\n\n        float max = getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset, ${textureWidth},\n        ${textureHeight} )));\n        for(int i=1; i<${featureCount}; ++i)\n        {\n          float current = getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset + i,\n            ${textureWidth}, ${textureHeight})));\n          if(current > max)\n          max = current;\n        }\n\n        return max;\n      }`;\n      return {\n        ...softmaxComputeMaxProgramMetadata,\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\n/**\n * Create a texture that contains the normalization factor for each of the 'N' rows\n */\nconst createComputScaleProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\n     maxElementPerLogicalRow: readonly number[], outputShape: number[]): ProgramInfo => {\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n      const rank = outputShape.length;\n\n      if (logicalRowCount < 1 || featureCount < 1) {\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\n      }\n\n      if (outputShape.length !== 1) {\n        throw new Error('Dimensionality of the output should be 1');\n      }\n\n      if (outputShape[0] !== logicalRowCount) {\n        throw new Error('Shape of the output should be equal to logical row count');\n      }\n\n      if (maxElementPerLogicalRow.length !== 1) {\n        throw new Error('Dimensionality of the intermediate results should be 1');\n      }\n\n      if (maxElementPerLogicalRow[0] !== logicalRowCount) {\n        throw new Error('Shape of the intermediate results should be equal to logical row count');\n      }\n\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const shaderSource = `\n      float process(int[${rank}] indices) {\n        int logical_row_start_offset = indices[0] * ${featureCount};\n\n        float norm_factor = 0.0;\n        float max = _Max(indices);\n        for(int i=0; i<${featureCount}; ++i)\n        {\n          norm_factor += exp(getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset + i,\n            ${textureWidth}, ${textureHeight}))) - max);\n        }\n\n        return norm_factor;\n      }`;\n      return {\n        ...softmaxComputeScaleProgramMetadata,\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst createSoftMaxProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\n     maxElementPerLogicalRow: readonly number[], normalizationPerLogicalRow: readonly number[]): ProgramInfo => {\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n      const rank = input.dims.length;\n\n      if (logicalRowCount < 1 || featureCount < 1) {\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\n      }\n\n      if (maxElementPerLogicalRow.length !== 1 || normalizationPerLogicalRow.length !== 1) {\n        throw new Error('Dimensionality of the intermediate results should be 1');\n      }\n\n      if (maxElementPerLogicalRow[0] !== logicalRowCount || normalizationPerLogicalRow[0] !== logicalRowCount) {\n        throw new Error('Shape of the intermediate results should be equal to logical row count');\n      }\n\n      const shaderSource = `\n      float process(int[${rank}] indices) {\n\n      // get offset of current logical tensor index from the 2-D texture coordinates (TexCoords)\n      int offset = coordsToOffset(TexCoords, ${textureWidth}, ${textureHeight});\n\n      //determine the logical row for this index\n      int logical_row_index[1];\n      logical_row_index[0] = offset / ${featureCount};\n\n      float norm_factor = _Norm(logical_row_index);\n\n      // avoid possible division by 0\n      // if norm_facor is 0, all elements are zero\n      // if so, return 0\n      if(norm_factor == 0.0)\n        return 0.0;\n\n      return exp(_A(indices) - _Max(logical_row_index)) / norm_factor;\n    }`;\n      return {\n        ...softmaxProgramMetadata,\n        output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Softmax requires 1 input.');\n  }\n\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil, SplitUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface SplitAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n  readonly split: number[];\n  readonly numOutputs: number;\n}\n\nconst splitProgramMetadata = {\n  name: 'Split',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked],\n};\n\nexport const split: OperatorImplementation<SplitAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SplitAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputs[0].dims.length);\n      const count = getProgramCount(inferenceHandler, inputs, axis, attributes);\n      const output: Tensor[] = [];\n      for (let i = 0; i < count; ++i) {\n        output.push(inferenceHandler.run(\n            {\n              ...splitProgramMetadata,\n              cacheHint: `${attributes.cacheKey};${i}`,\n              get: () => createSplitProgramInfo(inferenceHandler, inputs[0], attributes, axis, i)\n            },\n            inputs));\n      }\n\n      return output;\n    };\n\nexport const parseSplitAttributes: OperatorInitialization<SplitAttributes> = (node: Graph.Node): SplitAttributes => {\n  const axis = node.attributes.getInt('axis', 0);\n  const split = node.attributes.getInts('split', []);\n  const numOutputs = node.outputs.length;\n  return createAttributeWithCacheKey({axis, split, numOutputs});\n};\n\nconst getProgramCount =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axis: number, attributes: SplitAttributes): number => {\n      const [, offsets] = SplitUtil.splitShape(inputs[0].dims, axis, attributes.split, attributes.numOutputs);\n      return offsets.length;\n    };\n\nconst createSplitProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: SplitAttributes, axis: number, index: number):\n        ProgramInfo => {\n          const [shapes, offsets] = SplitUtil.splitShape(input.dims, axis, attributes.split, attributes.numOutputs);\n          const offset = offsets[index];\n          const outputShape = shapes[index];\n          const rank = outputShape.length;\n          const shaderSource = `\n      float process(int indices[${rank}]) {\n        indices[${axis}] += ${offset};\n        return _A(indices);\n      }\n    `;\n          return {\n            ...splitProgramMetadata,\n            cacheHint: `${attributes.cacheKey}:${index}`,\n            output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Split requires one input.');\n  }\n\n  if (inputs[0].type !== 'int8' && inputs[0].type !== 'uint8' && inputs[0].type !== 'int16' &&\n      inputs[0].type !== 'uint16' && inputs[0].type !== 'int32' && inputs[0].type !== 'uint32' &&\n      inputs[0].type !== 'float32' && inputs[0].type !== 'float64' && inputs[0].type !== 'bool') {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const squeeze: OperatorImplementation<number[]> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axes: number[]): Tensor[] => {\n      validateInputs(inputs);\n      const outputShape = ShapeUtil.squeezeShape(inputs[0].dims, axes);\n      const output = inferenceHandler.reshapeUnpacked(inputs[0], outputShape);\n      return [output];\n    };\n\nexport const squeezeV13 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputsV13(inputs);\n  return squeeze(inferenceHandler, [inputs[0]], Array.from(inputs[1].integerData));\n};\n\nexport const parseSqueezeAttributes: OperatorInitialization<number[]> = (node: Graph.Node): number[] =>\n    node.attributes.getInts('axes');\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Squeeze requires 1 input.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('invalid input tensor types.');\n  }\n};\n\nconst validateInputsV13 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Squeeze requires 2 inputs.');\n  }\n\n  if (inputs[1].type !== 'int32') {\n    throw new Error('Invalid input type.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport const sum = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n\n  const sumProgramMetadata = {\n    name: 'Sum',\n    inputNames: inputs.map((v, i) => `X${i}`),\n    inputTypes: new Array(inputs.length).fill(TextureType.unpacked)\n  };\n\n  const output = inferenceHandler.run(\n      {...sumProgramMetadata, get: () => createSumProgramInfo(inferenceHandler, inputs, sumProgramMetadata)}, inputs);\n  return [output];\n};\n\nconst createSumProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], sumProgramMetadata: ProgramMetadata): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const outputShape = inputs[0].dims.slice();\n      const sumLine = inputs.map((v, i) => `${glsl.texture2D}(X${i},TexCoords)`).join(' + ');\n      const shaderSource = `\n      void main() {\n        vec4 result = ${sumLine};\n        ${glsl.output} = result;\n      }\n    `;\n      return {\n        ...sumProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        hasMain: true,\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length === 0) {\n    throw new Error('Sum requires inputs.');\n  }\n\n  const length = inputs[0].dims.length;\n  for (let i = 1; i < inputs.length; i++) {\n    if (length !== inputs[i].dims.length) {\n      throw new Error('Input shapes are mismatched.');\n    }\n\n    for (let j = 0; j < length; j++) {\n      if (inputs[0].dims[j] !== inputs[i].dims[j]) {\n        throw new Error('Input shapes are not matched.');\n      }\n    }\n  }\n\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n  for (let i = 1; i < inputs.length; i++) {\n    if (inputs[0].type !== inputs[i].type) {\n      throw new Error('Input types are not matched.');\n    }\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {NUMBER_TYPES} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport const tile = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n\n  const tileProgramMetadata = {\n    name: 'Tile',\n    inputNames: ['A'],\n    inputTypes: [TextureType.unpacked],\n  };\n\n  const output = inferenceHandler.run(\n      {...tileProgramMetadata, get: () => createTileProgramInfo(inferenceHandler, inputs, tileProgramMetadata)},\n      inputs);\n  return [output];\n};\n\nconst createTileProgramInfo =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], tileProgramMetadata: ProgramMetadata): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      const outputShape = new Array(inputShape.length);\n\n      const tileOps: string[] = [];\n      for (let i = 0; i < inputShape.length; i++) {\n        outputShape[i] = inputShape[i] * inputs[1].numberData[i];\n        tileOps.push(`inputIdx[${i}] = int(mod(float(outputIdx[${i}]), ${inputShape[i]}.));`);\n      }\n\n      const rank = outputShape.length;\n      const shaderSource = `\n      float process(int outputIdx[${rank}]) {\n        int inputIdx[${rank}];\n        ${tileOps.join('\\n')}\n        return _A(inputIdx);\n      }\n    `;\n      return {\n        ...tileProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Tile requires 2 input.');\n  }\n  if (inputs[1].dims.length !== 1) {\n    throw new Error('The second input shape must 1 dimension.');\n  }\n  if (inputs[1].dims[0] !== inputs[0].dims.length) {\n    throw new Error('Invalid input shape.');\n  }\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs[1].type !== 'int32' && inputs[1].type !== 'int16') {\n    throw new Error('Invalid repeat type.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface TransposeAttributes extends AttributeWithCacheKey {\n  readonly perm: number[];\n}\n\nconst transposeProgramMetadata = {\n  name: 'Transpose',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked]\n};\n\nexport const transpose: OperatorImplementation<TransposeAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: TransposeAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...transposeProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createTransposeProgramInfo(inferenceHandler, inputs[0], attributes.perm)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseTransposeAttributes: OperatorInitialization<TransposeAttributes> =\n    (node: Graph.Node): TransposeAttributes => createAttributeWithCacheKey({perm: node.attributes.getInts('perm', [])});\n\nconst createTransposeProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, perm: number[]): ProgramInfo => {\n      const inputShape = input.dims;\n      perm = getAdjustedPerm(inputShape, perm);\n      const unpackedOutputShape = getOutputShape(inputShape, perm);\n      const rank = inputShape.length;\n      // A dims=[${inputs[0].dims.toString()}]\n      // out Dims=[${unpackedOutputShape.toString()}]\n      // based on perm=[${perm.toString()}]\n      const shaderSource = `\n      ${getPermFunctionBody('perm', perm, rank)}\n      float process(int indices[${rank}]) {\n        int a[${rank}];\n        perm(a, indices);\n        return _A(a);\n      }`;\n      return {\n        ...transposeProgramMetadata,\n        output: {dims: unpackedOutputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst getAdjustedPerm = (inputShape: readonly number[], perm: number[]): number[] => {\n  if (perm && perm.length !== inputShape.length) {\n    perm = [...(inputShape.keys())].reverse();\n  }\n  return perm;\n};\n\nconst getOutputShape = (inputShape: readonly number[], perm: number[]): readonly number[] => {\n  perm = getAdjustedPerm(inputShape, perm);\n  return ShapeUtil.sortBasedOnPerm(inputShape, perm);\n};\n\nconst getPermFunctionBody = (name: string, perm: number[], rank: number): string => {\n  const reverseFunc = [];\n  reverseFunc.push(`void ${name}(out int a[${rank}], int src[${rank}]) {`);\n  for (let i = 0; i < rank; ++i) {\n    reverseFunc.push(`\\ta[${perm[i]}]=src[${i}];`);\n  }\n  reverseFunc.push('\\t}');\n  return reverseFunc.join('\\n');\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Transpose requires 1 input.');\n  }\n\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('input should be float tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {TextureData, TextureType} from '../types';\n\nexport const encodeAsUint8 = (inferenceHandler: WebGLInferenceHandler, input: TextureData): TextureData => {\n  const outputShape = input.shape;\n  const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n  /**\n   * https://github.com/tensorflow/tfjs-core/blob/master/src/kernels/webgl/encode_float_gpu.ts\n   */\n  const shaderSource = `\n    const float FLOAT_MAX = 1.70141184e38;\n    const float FLOAT_MIN = 1.17549435e-38;\n\n    bool isNaN(float val) {\n      return (val < 1.0 || 0.0 < val || val == 0.0) ? false : true;\n    }\n\n    highp vec4 encodeAsUint8(highp float v) {\n      if (isNaN(v)) {\n        return vec4(255, 255, 255, 255);\n      }\n\n      highp float av = abs(v);\n\n      if(av < FLOAT_MIN) {\n        return vec4(0.0, 0.0, 0.0, 0.0);\n      } else if(v > FLOAT_MAX) {\n        return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n      } else if(v < -FLOAT_MAX) {\n        return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n      }\n\n      highp vec4 c = vec4(0,0,0,0);\n\n      highp float e = floor(log2(av));\n      highp float m = exp2(fract(log2(av))) - 1.0;\n\n      c[2] = floor(128.0 * m);\n      m -= c[2] / 128.0;\n      c[1] = floor(32768.0 * m);\n      m -= c[1] / 32768.0;\n      c[0] = floor(8388608.0 * m);\n\n      highp float ebias = e + 127.0;\n      c[3] = floor(ebias / 2.0);\n      ebias -= c[3] * 2.0;\n      c[2] += floor(ebias) * 128.0;\n\n      c[3] += 128.0 * step(0.0, -v);\n\n      return c / 255.0;\n    }\n\n    void main() {\n      float value = ${glsl.texture2D}(X,TexCoords).r;\n      ${glsl.output} = encodeAsUint8(value);\n    }`;\n  const programInfo = {\n    name: 'Uint8Encode',\n    inputTypes: [TextureType.unpacked],\n    inputNames: ['X'],\n    output: {dims: outputShape, type: input.tensor.type, textureType: TextureType.downloadUint8AsFloat},\n    shaderSource,\n    hasMain: true\n  };\n  return inferenceHandler.executeProgram(programInfo, [input.tensor]);\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {Tensor} from '../../../tensor';\nimport {MAX_CLIP, MIN_CLIP} from '../../../util';\nimport {FunctionType, GlslValueFunction} from '../glsl-definitions';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport function glslAbs(): GlslValueFunction {\n  return glslBuiltinUnary('abs');\n}\nexport function glslAcos(): GlslValueFunction {\n  return glslBuiltinUnary('acos');\n}\nexport function glslAsin(): GlslValueFunction {\n  return glslBuiltinUnary('asin');\n}\nexport function glslAtan(): GlslValueFunction {\n  return glslBuiltinUnary('atan');\n}\nexport function glslCeil(): GlslValueFunction {\n  return glslBuiltinUnary('ceil');\n}\nexport function glslCos(): GlslValueFunction {\n  return glslBuiltinUnary('cos');\n}\nexport function glslElu(alpha: number): GlslValueFunction {\n  const name = 'elu';\n  const body = `\n  const float alpha = float(${alpha});\n\n  float ${name}_(float a) {\n    return a >= 0.0 ? a: (exp(a) - 1.0) * alpha;\n  }\n  vec4 ${name}_(vec4 v) {\n    return vec4(${name}_(v.x), ${name}_(v.y), ${name}_(v.z), ${name}_(v.w));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslExp(): GlslValueFunction {\n  return glslBuiltinUnary('exp');\n}\nexport function glslFloor(): GlslValueFunction {\n  return glslBuiltinUnary('floor');\n}\nexport function glslClip(min: number, max: number): GlslValueFunction {\n  const name = 'clip';\n  const body = `\n  const float min = float(${min});\n  const float max = float(${max});\n\n  float ${name}_(float a) {\n    return clamp(a, min, max);\n  }\n  vec4 ${name}_(vec4 v) {\n    return clamp(v, min, max);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslIdentity(): GlslValueFunction {\n  const name = 'indentity';\n  const body = `\n  float ${name}_(float a) {\n    return a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return v;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslLeakyRelu(alpha: number): GlslValueFunction {\n  const name = 'leakyRelu';\n  const body = `\n  const float alpha = float(${alpha});\n\n  float ${name}_(float a) {\n    return a < 0.0 ? a * alpha : a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return vec4(${name}_(v.x), ${name}_(v.y), ${name}_(v.z), ${name}_(v.w));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslLog(): GlslValueFunction {\n  return glslBuiltinUnary('log');\n}\nexport function glslNeg(): GlslValueFunction {\n  const name = 'neg';\n  const body = `\n  float ${name}_(float a) {\n    return -a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return -v;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslNot(): GlslValueFunction {\n  const name = 'not';\n  const body = `\n  float ${name}_(float a) {\n    return float( ! bool(a) );\n  }\n  bool ${name}_(bool a) {\n    return !a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return vec4(!bool(v.x), !bool(v.y), !bool(v.z), !bool(v.w));\n  }\n  bvec4 ${name}_(bvec4 v) {\n    return bvec4(!v.x, !v.y, !v.z, !v.w);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSin(): GlslValueFunction {\n  return glslBuiltinUnary('sin');\n}\nexport function glslRelu(): GlslValueFunction {\n  const name = 'relu';\n  const body = `\n  float ${name}_(float a) {\n    return max( a, 0.0 );\n  }\n  vec4 ${name}_(vec4 v) {\n    return max( v, 0.0 );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSigmoid(): GlslValueFunction {\n  const name = 'sigmoid';\n  const body = `\n  float ${name}_(float a) {\n    return 1.0 / (1.0 + exp(-a));\n  }\n  vec4 ${name}_(vec4 v) {\n    return 1.0 / (1.0 + exp(-v));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSqrt(): GlslValueFunction {\n  return glslBuiltinUnary('sqrt');\n}\nexport function glslTan(): GlslValueFunction {\n  return glslBuiltinUnary('tan');\n}\nexport function glslTanh(): GlslValueFunction {\n  const name = 'tanh';\n  const body = `\n  float ${name}_(float a) {\n    a = clamp(a, -10., 10.);\n    a = exp(2.*a);\n    return (a - 1.) / (a + 1.);\n  }\n  vec4 ${name}_(vec4 v) {\n    v = clamp(v, -10., 10.);\n    v = exp(2.*v);\n    return (v - 1.) / (v + 1.);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nfunction glslBuiltinUnary(name: string): GlslValueFunction {\n  const body = `\n  float ${name}_(float a) {\n    return ${name}(a);\n  }\n  vec4 ${name}_(vec4 v) {\n    return ${name}(v);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\n\n/////\n/////\n/////\n\nconst createElementwiseProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, input: Tensor, glslFunc: GlslValueFunction):\n        ProgramInfo => {\n          const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n          const glsl = getGlsl(handler.session.backend.glContext.version);\n          return {\n            ...metadata,\n            output: {dims: input.dims, type: input.type, textureType},\n            shaderSource: `\n     ${glslFunc.body}\n     void main() {\n       vec4 v = ${glsl.texture2D}(A, TexCoords);\n       v = ${glslFunc.name}_(v);\n       ${glsl.output} = v;\n     }\n     `,\n            hasMain: true\n          };\n        };\n\nconst createElementwiseProgramInfoLoader =\n    (handler: WebGLInferenceHandler, input: Tensor, glslFunc: GlslValueFunction, cacheKey?: string):\n        ProgramInfoLoader => {\n          const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n          const metadata = {name: glslFunc.name, inputTypes: [textureType], inputNames: ['A'], cacheHint: cacheKey};\n          return {...metadata, get: () => createElementwiseProgramInfo(handler, metadata, input, glslFunc)};\n        };\n\nexport const abs = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAbs()), inputs)];\n\nexport const acos = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAcos()), inputs)];\n\nexport const asin = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAsin()), inputs)];\n\nexport const atan = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAtan()), inputs)];\n\nexport interface ClipAttributes extends AttributeWithCacheKey {\n  readonly min: number;\n  readonly max: number;\n}\n\nexport const clip =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ClipAttributes): Tensor[] => [handler.run(\n        createElementwiseProgramInfoLoader(\n            handler, inputs[0], glslClip(attributes.min, attributes.max), attributes.cacheKey),\n        inputs)];\n\nexport const parseClipAttributes = (node: Graph.Node): ClipAttributes => createAttributeWithCacheKey(\n    {min: node.attributes.getFloat('min', MIN_CLIP), max: node.attributes.getFloat('max', MAX_CLIP)});\n\nexport const clipV11 = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  const attributes = generateClipAttributesFromInputs(handler, inputs);\n  return clip(handler, [inputs[0]], attributes);\n};\n\nconst generateClipAttributesFromInputs = (handler: WebGLInferenceHandler, inputs: Tensor[]): ClipAttributes => {\n  if (inputs.length >= 3 &&\n      (!handler.session.isInitializer(inputs[1].dataId) || !handler.session.isInitializer(inputs[2].dataId))) {\n    throw new Error('dynamic clip attributes are not allowed');\n  }\n\n  const min = (inputs.length >= 3) ? inputs[1].numberData[0] : MIN_CLIP;\n  const max = (inputs.length >= 3) ? inputs[2].numberData[0] : MAX_CLIP;\n  return createAttributeWithCacheKey({min, max});\n};\n\nexport const ceil = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslCeil()), inputs)];\n\nexport const cos = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslCos()), inputs)];\n\nexport interface EluAttributes extends AttributeWithCacheKey {\n  readonly alpha: number;\n}\n\nexport const elu =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: EluAttributes): Tensor[] => [handler.run(\n        createElementwiseProgramInfoLoader(handler, inputs[0], glslElu(attributes.alpha), attributes.cacheKey),\n        inputs)];\n\nexport const parseEluAttributes = (node: Graph.Node): EluAttributes =>\n    createAttributeWithCacheKey({alpha: node.attributes.getFloat('alpha', 1.0)});\n\nexport const exp = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslExp()), inputs)];\n\nexport const floor = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslFloor()), inputs)];\n\nexport const identity = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslIdentity()), inputs)];\n\nexport interface LeakyReluAttributes extends AttributeWithCacheKey {\n  readonly alpha: number;\n}\n\nexport const leakyRelu =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: LeakyReluAttributes): Tensor[] => [handler.run(\n        createElementwiseProgramInfoLoader(handler, inputs[0], glslLeakyRelu(attributes.alpha), attributes.cacheKey),\n        inputs)];\n\nexport const parseLeakyReluAttributes = (node: Graph.Node): LeakyReluAttributes =>\n    createAttributeWithCacheKey({alpha: node.attributes.getFloat('alpha', 0.01)});\n\nexport const log = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslLog()), inputs)];\n\nexport const neg = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslNeg()), inputs)];\n\nexport const not = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslNot()), inputs)];\n\nexport const relu = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslRelu()), inputs)];\n\nexport const sigmoid = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSigmoid()), inputs)];\n\nexport const sin = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSin()), inputs)];\n\nexport const sqrt = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSqrt()), inputs)];\n\nexport const tan = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslTan()), inputs)];\n\nexport const tanh = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslTanh()), inputs)];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\nimport {getCoordsDataType} from '../utils';\n\nimport {getChannels, unpackFromChannel} from './packing-utils';\n\nconst unpackProgramMetadata = {\n  name: 'unpack',\n  inputNames: ['A'],\n  inputTypes: [TextureType.packed]\n};\n\nexport const createUnpackProgramInfo = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfo => {\n  const rank = input.dims.length;\n\n  const channels = getChannels('rc', rank);\n  const innerDims = channels.slice(-2);\n  const coordsDataType = getCoordsDataType(rank);\n  const unpackChannel = unpackFromChannel();\n  const isScalar = (input.dims.length === 0);\n  const sourceCoords = isScalar ? '' : getSourceCoords(rank, channels);\n  const coords = rank <= 1 ? 'rc' : `vec2(${innerDims.join(',')})`;\n  const glsl = getGlsl(handler.session.backend.glContext.version);\n  const shaderSource = `\n    ${unpackChannel}\n    void main() {\n      ${coordsDataType} rc = getOutputCoords();\n\n       // Sample the texture with the coords to get the rgba channel value.\n       vec4 packedInput = getA(${sourceCoords});\n\n       ${glsl.output} = vec4(getChannel(packedInput, ${coords}), 0, 0, 0);\n     }\n   `;\n\n  return {\n    ...unpackProgramMetadata,\n    hasMain: true,\n    output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\n    shaderSource\n  };\n};\n\nexport const createUnpackProgramInfoLoader = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfoLoader =>\n    ({...unpackProgramMetadata, get: () => createUnpackProgramInfo(handler, input)});\n\nfunction getSourceCoords(rank: number, dims: string[]): string {\n  if (rank === 1) {\n    return 'rc';\n  }\n\n  let coords = '';\n  for (let i = 0; i < rank; i++) {\n    coords += dims[i];\n    if (i < rank - 1) {\n      coords += ',';\n    }\n  }\n  return coords;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const unsqueeze: OperatorImplementation<number[]> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axes: number[]): Tensor[] => {\n      validateInputs(inputs);\n      const outputShape = ShapeUtil.unsqueezeShape(inputs[0].dims, axes);\n      const output = inferenceHandler.reshapeUnpacked(inputs[0], outputShape);\n      return [output];\n    };\n\nexport const unsqueezeV13 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputsV13(inputs);\n  return unsqueeze(inferenceHandler, [inputs[0]], Array.from(inputs[1].integerData));\n};\n\nexport const parseUnsqueezeAttributes: OperatorInitialization<number[]> = (node: Graph.Node): number[] =>\n    node.attributes.getInts('axes');\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Unsqueeze requires 1 input.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('invalid input tensor types.');\n  }\n};\n\nconst validateInputsV13 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Unsqueeze requires 2 inputs.');\n  }\n\n  if (inputs[1].type !== 'int32') {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface UpsampleAttributes extends AttributeWithCacheKey {\n  readonly opset: number;\n  readonly isResize: boolean;\n  readonly mode: string;\n  readonly scales: number[];\n  readonly extrapolationValue: number;\n  readonly coordinateTransformMode: string;\n  readonly useExtrapolation: boolean;\n  readonly needRoiInput: boolean;\n  readonly nearestMode: string;\n  readonly cubicCoefficientA: number;\n  readonly excludeOutside: boolean;\n  readonly useNearest2xOptimization: boolean;\n  readonly roiInputIdx: number;\n  readonly scalesInputIdx: number;\n  readonly sizesInputIdx: number;\n}\n\nconst upsampleProgramMetadata = {\n  name: 'Upsample',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n};\n\nexport const upsample: OperatorImplementation<UpsampleAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);\n      const output = inferenceHandler.run(\n          {\n            ...upsampleProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createUpsampleProgramInfo(inferenceHandler, inputs, attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseUpsampleAttributesV7: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 7);\n\nexport const parseUpsampleAttributesV9: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 9);\n\nexport const parseUpsampleAttributes = (node: Graph.Node, opset: number): UpsampleAttributes => {\n  const isResize = (opset >= 10);\n\n  // processing node attributes\n  const mode = node.attributes.getString('mode', 'nearest');\n  if (mode !== 'nearest' && mode !== 'linear' && (opset < 11 || mode !== 'cubic')) {\n    throw new Error(`unrecognized mode: ${mode}`);\n  }\n\n  let scales: number[] = [];\n  if (opset < 9) {\n    scales = node.attributes.getFloats('scales');\n    scalesValidation(scales, mode, isResize);\n  }\n\n  const extrapolationValue = node.attributes.getFloat('extrapolation_value', 0.0);\n\n  const coordinateTransformMode =\n      opset > 10 ? node.attributes.getString('coordinate_transformation_mode', 'half_pixel') : 'asymmetric';\n  if ([\n        'asymmetric', 'pytorch_half_pixel', 'tf_half_pixel_for_nn', 'align_corners', 'tf_crop_and_resize', 'half_pixel'\n      ].indexOf(coordinateTransformMode) === -1) {\n    throw new Error(`coordinate_transform_mode '${coordinateTransformMode}' is not supported`);\n  }\n  const needRoiInput = (coordinateTransformMode === 'tf_crop_and_resize');\n  const useExtrapolation = needRoiInput;\n\n  const nearestMode =\n      (mode === 'nearest' && opset >= 11) ? node.attributes.getString('nearest_mode', 'round_prefer_floor') : '';\n  if (['round_prefer_floor', 'round_prefer_ceil', 'floor', 'ceil', ''].indexOf(nearestMode) === -1) {\n    throw new Error(`nearest_mode '${nearestMode}' is not supported`);\n  }\n\n  const cubicCoefficientA = node.attributes.getFloat('cubic_coeff_a', -0.75);\n  const excludeOutside = node.attributes.getInt('exclude_outside', 0) !== 0;\n  if (excludeOutside && mode !== 'cubic') {\n    throw new Error('exclude_outside can be set to 1 only when mode is CUBIC.');\n  }\n\n  const useNearest2xOptimization =\n      (opset < 11) ? true : (mode === 'nearest' && coordinateTransformMode === 'asymmetric' && nearestMode === 'floor');\n\n  let roiInputIdx = 0;\n  let scalesInputIdx = 0;\n  let sizesInputIdx = 0;\n\n  if (opset > 10) {\n    // handle when roiInput is not given\n    if (node.inputs.length > 2) {\n      roiInputIdx = 1;\n      scalesInputIdx = 2;\n      sizesInputIdx = 3;\n    } else {\n      scalesInputIdx = 1;\n      sizesInputIdx = 2;\n    }\n  } else if (opset === 9) {\n    scalesInputIdx = 1;\n  }\n\n  return createAttributeWithCacheKey({\n    opset,\n    isResize,\n    mode,\n    scales,\n    extrapolationValue,\n    coordinateTransformMode,\n    useExtrapolation,\n    needRoiInput,\n    nearestMode,\n    cubicCoefficientA,\n    excludeOutside,\n    useNearest2xOptimization,\n    roiInputIdx,\n    scalesInputIdx,\n    sizesInputIdx\n  });\n};\n\nconst createUpsampleProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const [inputWidth, inputHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(inputs[0].dims, TextureType.unpacked);\n\n      const outputShape = inputs[0].dims.map((dim, i) => Math.floor(dim * attributes.scales[i]));\n      const [outputWidth, outputHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(outputShape, TextureType.unpacked);\n      const dim = outputShape.length;\n\n      const outputPitches = new Array<number>(dim);\n      const inputPitches = new Array<number>(dim);\n      let precalculatedPitches = `\n      int output_pitches[${dim}];\n      int input_pitches[${dim}];\n      `;\n      for (let d = dim - 1; d >= 0; d--) {\n        outputPitches[d] = (d === dim - 1) ? 1 : outputPitches[d + 1] * outputShape[d + 1];\n        inputPitches[d] = (d === dim - 1) ? 1 : inputPitches[d + 1] * inputs[0].dims[d + 1];\n\n        precalculatedPitches += `\n        output_pitches[${d}] = ${outputPitches[d]};\n        input_pitches[${d}] = ${inputPitches[d]};\n        `;\n      }\n      const getInputFloatFunction = `\n      float getInputFloat(int index) {\n        vec2 coords = offsetToCoords(index, ${inputWidth}, ${inputHeight});\n        float value = getColorAsFloat(${glsl.texture2D}(X, coords));\n        return value;\n      }\n      `;\n\n      const shaderSource = attributes.mode === 'nearest' ?\n          // nearest\n          `\n    ${getInputFloatFunction}\n    float process(int indices[${dim}]) {\n      int input_index = 0;\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\n\n      ${precalculatedPitches}\n\n      int d, m;\n      for (int dim = 0; dim < ${dim}; ++dim) {\n        d = output_index / output_pitches[dim];\n        m = output_index - d * output_pitches[dim];\n        output_index = m;\n\n        if (scales[dim] != 1 && d > 0) {\n          int d2 = d / scales[dim];\n          m = d - d2 * scales[dim];\n          d = d2;\n        }\n        input_index += input_pitches[dim] * d;\n      }\n\n      return getInputFloat(input_index);\n    }` :\n          dim === 4 ?\n          // bilinear 4D\n              `\n    ${getInputFloatFunction}\n    float process(int indices[4]) {\n      int input_index = 0;\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\n\n      ${precalculatedPitches}\n\n      int m;\n      int index_of_dim0, index_of_dim1, index_of_dim2, index_of_dim3;\n      index_of_dim0 = output_index / output_pitches[0];\n      m = output_index - index_of_dim0 * output_pitches[0];\n      index_of_dim1 = m / output_pitches[1];\n      m = m - index_of_dim1 * output_pitches[1];\n      index_of_dim2 = m / output_pitches[2];\n      m = m - index_of_dim2 * output_pitches[2];\n      index_of_dim3 = m;\n\n      int index_of_input_dim2, index_of_input_dim3, x_offset, y_offset;\n      index_of_input_dim2 = index_of_dim2 / scales[2];\n      y_offset = index_of_dim2 - index_of_input_dim2 * scales[2];\n      index_of_input_dim3 = index_of_dim3 / scales[3];\n      x_offset = index_of_dim3 - index_of_input_dim3 * scales[3];\n\n      input_index = index_of_dim0 * input_pitches[0] +\n            index_of_dim1 * input_pitches[1] +\n            index_of_input_dim2 * input_pitches[2] +\n            index_of_input_dim3;\n\n      float x00 = getInputFloat(input_index);\n      float x10, x01, x11;\n\n      bool end_of_dim2 = false;\n      if (index_of_input_dim2 == (${inputs[0].dims[2]} - 1)) {\n        // It's the end in dimension 2\n        x01 = x00;\n        end_of_dim2 = true;\n      } else {\n        x01 = getInputFloat(input_index + input_pitches[2]);\n      }\n\n      if (index_of_input_dim3 == (input_pitches[2] - 1)) {\n        // It's the end in dimension 3\n        x10 = x00;\n        x11 = x01;\n      }\n      else {\n        x10 = getInputFloat(input_index + 1);\n        x11 = end_of_dim2 ? x10 : getInputFloat(input_index + input_pitches[2] + 1);\n      }\n\n      float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[2]);\n      float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[2]);\n      return y0 + float(x_offset) * (y1 - y0) / float(scales[3]);\n    }` :\n              // bilinear 2D\n              `\n    ${getInputFloatFunction}\n    float process(int indices[2]) {\n      int input_index = 0;\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\n\n      ${precalculatedPitches}\n\n      int m;\n      int index_of_dim0, index_of_dim1;\n      index_of_dim0 = output_index / output_pitches[0];\n      m = output_index - index_of_dim0 * output_pitches[0];\n      index_of_dim1 = m;\n\n      int index_of_input_dim0, index_of_input_dim1, x_offset, y_offset;\n      index_of_input_dim0 = index_of_dim0 / scales[0];\n      y_offset = index_of_dim0 - index_of_input_dim0 * scales[0];\n      index_of_input_dim1 = index_of_dim1 / scales[1];\n      x_offset = index_of_dim1 - index_of_input_dim1 * scales[1];\n\n      input_index = index_of_input_dim0 * input_pitches[0] + index_of_input_dim1;\n\n      float x00 = getInputFloat(input_index);\n      float x10, x01, x11;\n\n      bool end_of_dim0 = false;\n      if (index_of_input_dim0 == (${inputs[0].dims[0]} - 1)) {\n        // It's the end in dimension 0\n        x01 = x00;\n        end_of_dim0 = true;\n      } else {\n        x01 = getInputFloat(input_index + input_pitches[0]);\n      }\n\n      if (index_of_input_dim1 == (input_pitches[0] - 1)) {\n        // It's the end in dimension 1\n        x10 = x00;\n        x11 = x01;\n      }\n      else {\n        x10 = getInputFloat(input_index + 1);\n        x11 = end_of_dim0 ? x10 : getInputFloat(input_index + input_pitches[0] + 1);\n      }\n\n      float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[0]);\n      float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[0]);\n      return y0 + float(x_offset) * (y1 - y0) / float(scales[1]);\n    }`;\n      return {\n        ...upsampleProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n        variables: [{\n          name: 'scales',\n          type: 'int',\n          arrayLength: attributes.scales.length,\n          data: attributes.scales.map(x => Math.ceil(x))\n        }]\n      };\n    };\n\nexport const validateInputs = (inputs: Tensor[], attribute: UpsampleAttributes): void => {\n  if (!inputs || (attribute.opset < 9 && inputs.length !== 1) ||\n      (attribute.opset >= 9 && attribute.opset < 11 && inputs.length !== 2) ||\n      (attribute.opset >= 11 && inputs.length < 2)) {\n    throw new Error('invalid inputs.');\n  }\n\n  if (attribute.scales.length > 0 && inputs[0].dims.length !== attribute.scales.length) {\n    throw new Error('Invalid input shape.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('Invalid input tensor types.');\n  }\n};\n\nexport const scalesValidation = (scales: number[], mode: string, isResize: boolean): void => {\n  if (!isResize) {\n    for (const scale of scales) {\n      if (scale < 1) {\n        throw new Error('Scale value should be greater than or equal to 1.');\n      }\n    }\n  } else {\n    for (const scale of scales) {\n      if (scale <= 0) {\n        throw new Error('Scale value should be greater than 0.');\n      }\n    }\n  }\n  if (mode === 'linear' || mode === 'cubic') {\n    if (scales.length !== 2 && (scales.length !== 4 || scales[0] !== 1 || scales[1] !== 1)) {\n      throw new Error(`'Linear' mode and 'Cubic' mode only support 2-D inputs ('Bilinear', 'Bicubic') \\\n        or 4-D inputs with the corresponding outermost 2 scale values being 1 \\\n        in the ${isResize ? 'Resize' : 'Upsample'} opeartor.`);\n    }\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\n\nimport {Logger, Profiler} from '../../instrument';\n\nimport {GlslPreprocessor} from './glsl-preprocessor';\nimport {getVertexShaderSource} from './glsl-source';\nimport {TextureLayoutStrategy} from './texture-layout-strategy';\nimport {Artifact, ProgramInfo, ProgramVariable, TextureData, TextureLayout, VariableInfo} from './types';\nimport {WebGLContext} from './webgl-context';\n\n/**\n * ProgramManager is the main class behind running computations\n * It builds ProgramInfo's into Artifacts\n * It compiles given ProgramInfo's into WebGL Prorams (cached as Artifacts)\n * Uses the artifact to run the computation by calling Draw on\n * the WebGL drawing buffer\n * ProgramManager automatically maps (binds) input variables to their\n * corresponding Location's in the binary program\n */\nexport class ProgramManager {\n  repo: Map<unknown, Artifact>;  // this should be per-session object\n  vertexShader: WebGLShader;\n  attributesBound: boolean;\n\n  constructor(\n      public profiler: Readonly<Profiler>, public glContext: WebGLContext,\n      public textureLayoutStrategy: TextureLayoutStrategy) {\n    this.repo = new Map();\n    this.attributesBound = false;\n  }\n  getArtifact(key: unknown): Artifact|undefined {\n    return this.repo.get(key);\n  }\n  setArtifact(key: unknown, artifact: Artifact): void {\n    this.repo.set(key, artifact);\n  }\n  run(buildArtifact: Artifact, inputs: TextureData[], output: TextureData): void {\n    this.profiler.event('op', `ProgramManager.run ${buildArtifact.programInfo.name ?? 'unknown kernel'}`, () => {\n      const gl = this.glContext.gl;\n      const program = buildArtifact.program;\n      gl.useProgram(program);\n      try {\n        this.bindOutput(output);\n        if (!this.attributesBound) {\n          this.bindAttributes(buildArtifact.attribLocations);\n        }\n        this.bindUniforms(buildArtifact.uniformLocations, buildArtifact.programInfo.variables ?? [], inputs);\n      } catch (err) {\n        Logger.error('ProgramManager', buildArtifact.programInfo.shaderSource);\n        throw err;\n      }\n      this.profiler.event('backend', 'GlContext.draw()', () => {\n        this.glContext.draw();\n      });\n    }, this.glContext);\n  }\n  dispose(): void {\n    if (this.vertexShader) {\n      this.glContext.deleteShader(this.vertexShader);\n    }\n    this.repo.forEach(a => this.glContext.deleteProgram(a.program));\n  }\n  build(programInfo: ProgramInfo, inputTextureLayouts: TextureLayout[], outputTextureLayout: TextureLayout): Artifact {\n    return this.profiler.event('backend', 'ProgramManager.build', () => {\n      const preprocessor = new GlslPreprocessor(this.glContext, programInfo, inputTextureLayouts, outputTextureLayout);\n      const fragScript = preprocessor.preprocess();\n      const program = this.compile(fragScript);\n      const artifact = {\n        programInfo,\n        program,\n        uniformLocations: this.getUniformLocations(\n            program, preprocessor.context.programInfo.inputNames, preprocessor.context.programInfo.variables),\n        attribLocations: this.getAttribLocations(program)\n      };\n      return artifact;\n    });\n  }\n  protected compile(fragShaderScript: string): WebGLProgram {\n    if (!this.vertexShader) {\n      Logger.verbose('ProrgramManager', 'Compiling and caching Vertex shader for the first time');\n      const vertexShaderScript = getVertexShaderSource(this.glContext.version);\n      this.vertexShader = this.glContext.compileShader(vertexShaderScript, this.glContext.gl.VERTEX_SHADER);\n    }\n    if (env.debug) {\n      Logger.verbose('ProrgramManager', `FragShader:\n${fragShaderScript}\n`);\n    }\n    const fragShader = this.glContext.compileShader(fragShaderScript, this.glContext.gl.FRAGMENT_SHADER);\n    const program = this.glContext.createProgram(this.vertexShader, fragShader);\n    this.glContext.deleteShader(fragShader);\n    return program;\n  }\n  bindOutput(td: TextureData): void {\n    const width = td.width;\n    const height = td.height;\n    Logger.verbose(\n        'ProrgramManager',\n        `Binding output texture to Framebuffer: w/h=${width}/${height}, shape=${td.shape}, type=${td.tensor.type}`);\n    this.glContext.attachFramebuffer(td.texture, width, height);\n  }\n  bindAttributes(attribLocations: Artifact.AttribLocations): void {\n    const positionHandle = attribLocations.position;\n    const textureCoordHandle = attribLocations.textureCoord;\n    this.glContext.setVertexAttributes(positionHandle, textureCoordHandle);\n    this.attributesBound = true;\n  }\n  bindUniforms(uniformLocations: Artifact.UniformLocations, variables: ProgramVariable[], textures: TextureData[]):\n      void {\n    const gl = this.glContext.gl;\n    let texturePosition = 0;\n    for (const {name, type, location, arrayLength} of uniformLocations) {\n      const value = variables.find(v => v.name === name)?.data;\n      if (type !== 'sampler2D' && !value) {\n        throw new Error(`variable '${name}' does not have data defined in program info`);\n      }\n      switch (type) {\n        case 'sampler2D':\n          this.bindTexture(textures[texturePosition], location, texturePosition);\n          texturePosition++;\n          break;\n        case 'float':\n          if (arrayLength) {\n            gl.uniform1fv(location, value as number[]);\n          } else {\n            gl.uniform1f(location, value as number);\n          }\n          break;\n        case 'int':\n          if (arrayLength) {\n            gl.uniform1iv(location, value as number[]);\n          } else {\n            gl.uniform1i(location, value as number);\n          }\n          break;\n        default:\n          throw new Error(`Uniform not implemented: ${type}`);\n      }\n    }\n  }\n  bindTexture(td: TextureData, uniformHandle: WebGLUniformLocation, position: number): void {\n    this.glContext.bindTextureToUniform(td.texture, position, uniformHandle);\n  }\n  getAttribLocations(program: WebGLProgram): Artifact.AttribLocations {\n    return {\n      position: this.getAttribLocation(program, 'position'),\n      textureCoord: this.getAttribLocation(program, 'textureCoord')\n    };\n  }\n  getUniformLocations(program: WebGLProgram, samplers?: string[], variables?: VariableInfo[]):\n      Artifact.UniformLocations {\n    const uniformLocations: Artifact.UniformLocations = [];\n    if (samplers) {\n      for (const sampler of samplers) {\n        uniformLocations.push({name: sampler, type: 'sampler2D', location: this.getUniformLocation(program, sampler)});\n      }\n    }\n    if (variables) {\n      for (const variable of variables) {\n        uniformLocations.push({...variable, location: this.getUniformLocation(program, variable.name)});\n      }\n    }\n    return uniformLocations;\n  }\n  getUniformLocation(program: WebGLProgram, name: string): WebGLUniformLocation {\n    const gl = this.glContext.gl;\n    const reference = gl.getUniformLocation(program, name);\n    if (reference === null) {\n      throw new Error(`Uniform ${name} not found.`);\n    }\n    return reference;\n  }\n  getAttribLocation(program: WebGLProgram, name: string): number {\n    const gl = this.glContext.gl;\n    const attributeLocation: number = gl.getAttribLocation(program, name);\n    return attributeLocation;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {SessionHandler} from '../../backend';\nimport {Graph} from '../../graph';\nimport {Logger} from '../../instrument';\nimport {Operator} from '../../operators';\nimport {OpSet, resolveOperator} from '../../opset';\nimport {Session} from '../../session';\nimport {Tensor} from '../../tensor';\nimport {WebGLBackend} from '../backend-webgl';\n\nimport {WebGLInferenceHandler} from './inference-handler';\nimport {WEBGL_OP_RESOLVE_RULES} from './op-resolve-rules';\nimport {ProgramManager} from './program-manager';\nimport {PreferLogicalStrategy, TextureLayoutStrategy} from './texture-layout-strategy';\nimport {TextureManager} from './texture-manager';\nimport {TextureData} from './types';\n\nexport class WebGLSessionHandler implements SessionHandler {\n  programManager: ProgramManager;\n  textureManager: TextureManager;\n  layoutStrategy: TextureLayoutStrategy;\n  packedTextureDataCache: Map<Tensor.Id, TextureData>;\n  unpackedTextureDataCache: Map<Tensor.Id, TextureData>;\n  pack2unpackMap: Map<Tensor.Id, Tensor.Id>;\n  unpack2packMap: Map<Tensor.Id, Tensor.Id>;\n  initializers: Set<Tensor.Id>;\n  pack?: boolean;\n\n  constructor(public readonly backend: WebGLBackend, public readonly context: Session.Context) {\n    this.layoutStrategy = new PreferLogicalStrategy(backend.glContext.maxTextureSize);\n    this.programManager = new ProgramManager(this.context.profiler, backend.glContext, this.layoutStrategy);\n    this.textureManager = new TextureManager(\n        backend.glContext, this.layoutStrategy, this.context.profiler,\n        {reuseTextures: backend.textureCacheMode === 'full'});\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache = new Map();\n    this.pack = backend.pack;\n    this.pack2unpackMap = new Map();\n    this.unpack2packMap = new Map();\n  }\n\n  createInferenceHandler() {\n    return new WebGLInferenceHandler(this);\n  }\n  onGraphInitialized(graph: Graph): void {\n    const initializers = graph.getValues().filter(v => v.from === -1 && v.tensor).map(v => v.tensor!.dataId);\n    this.initializers = new Set(initializers);\n  }\n  isInitializer(tensorId: Tensor.Id): boolean {\n    return this.initializers ? this.initializers.has(tensorId) : false;\n  }\n  addInitializer(tensorId: Tensor.Id): void {\n    this.initializers.add(tensorId);\n  }\n  getTextureData(tensorId: Tensor.Id, isPacked: boolean): TextureData|undefined {\n    if (isPacked) {\n      return this.packedTextureDataCache.get(tensorId);\n    } else {\n      return this.unpackedTextureDataCache.get(tensorId);\n    }\n  }\n  setTextureData(tensorId: Tensor.Id, textureData: TextureData, isPacked = false): void {\n    Logger.verbose('WebGLSessionHandler', 'Storing Texture data in cache');\n    if (isPacked) {\n      this.packedTextureDataCache.set(tensorId, textureData);\n    } else {\n      this.unpackedTextureDataCache.set(tensorId, textureData);\n    }\n  }\n  dispose(): void {\n    this.programManager.dispose();\n    this.textureManager.clearActiveTextures();\n    this.packedTextureDataCache.forEach(td => this.textureManager.releaseTexture(td, true));\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache.forEach(td => this.textureManager.releaseTexture(td, true));\n    this.unpackedTextureDataCache = new Map();\n  }\n  resolve(node: Graph.Node, opsets: readonly OpSet[], graph: Graph): Operator {\n    const op = resolveOperator(node, opsets, WEBGL_OP_RESOLVE_RULES);\n    return {impl: op.opImpl, context: op.opInit ? op.opInit(node, graph) : node};\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../instrument';\n\nexport declare namespace Encoder {\n  export interface DataTypeMap {\n    float: Float32Array;\n    byte: Uint8Array;\n    int: Uint32Array;\n  }\n  export type DataType = keyof DataTypeMap;\n  type DataArrayType = DataTypeMap[DataType];\n\n  /* eslint-disable @typescript-eslint/naming-convention */\n  export const enum Usage {\n    Default = 0,\n    UploadOnly,\n    Download4BytesAsFloat32,\n  }\n}\n\n/**\n * Abstraction for mapping data types to texture texlets\n * Encoding means how a Float32 is mapped to 1 or 4 channels for each texlet\n * Decoding means how a texlet's channels are mapped to a resulting Float32\n */\nexport interface DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize: number;\n  encode(src: Encoder.DataArrayType, textureSize: number): Encoder.DataArrayType;\n  allocate(size: number): Encoder.DataArrayType;\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Encoder.DataArrayType;\n}\n/**\n * WebGL2 data encoder\n * Uses R32F as the format for texlet\n */\nexport class RedFloat32DataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize: number;\n  constructor(gl: WebGL2RenderingContext, channels = 1) {\n    if (channels === 1) {\n      this.internalFormat = gl.R32F;\n      this.format = gl.RED;\n      this.textureType = gl.FLOAT;\n      this.channelSize = channels;\n    } else if (channels === 4) {\n      this.internalFormat = gl.RGBA32F;\n      this.format = gl.RGBA;\n      this.textureType = gl.FLOAT;\n      this.channelSize = channels;\n    } else {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n  }\n  encode(src: Encoder.DataArrayType, textureSize: number): Encoder.DataArrayType {\n    let result: Float32Array;\n    let source: Float32Array;\n    if (src.constructor !== Float32Array) {\n      Logger.warning('Encoder', 'data was not of type Float32; creating new Float32Array');\n      source = new Float32Array(src);\n    }\n    if (textureSize * this.channelSize > src.length) {\n      Logger.warning('Encoder', 'Source data too small. Allocating larger array');\n      source = src as Float32Array;\n      result = this.allocate(textureSize * this.channelSize) as Float32Array;\n      source.forEach((v, i) => result[i] = v);\n    } else {\n      source = src as Float32Array;\n      result = source;\n    }\n    return result;\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Float32Array(size * 4);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Float32Array {\n    if (this.channelSize === 1) {\n      const filteredData = (buffer as Float32Array).filter((value, index) => index % 4 === 0).subarray(0, dataSize);\n      return filteredData;\n    }\n    return buffer.subarray(0, dataSize) as Float32Array;\n  }\n}\n/**\n * Data encoder for WebGL 1 with support for floating point texture\n */\nexport class RGBAFloatDataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize: number;\n  constructor(gl: WebGLRenderingContext, channels = 1, textureType?: number) {\n    if (channels !== 1 && channels !== 4) {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n    this.internalFormat = gl.RGBA;\n    this.format = gl.RGBA;\n    this.channelSize = channels;\n    this.textureType = textureType || gl.FLOAT;\n  }\n  encode(src: Float32Array, textureSize: number): Encoder.DataArrayType {\n    let dest = src;\n    if (this.channelSize === 1) {\n      Logger.verbose('Encoder', 'Exploding into a larger array');\n      dest = this.allocate(textureSize) as Float32Array;\n      src.forEach((v, i) => dest[i * 4] = v);\n    }\n    return dest;\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Float32Array(size * 4);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Float32Array {\n    if (this.channelSize === 1) {\n      const filteredData = (buffer as Float32Array).filter((value, index) => index % 4 === 0).subarray(0, dataSize);\n      return filteredData;\n    }\n    return buffer.subarray(0, dataSize) as Float32Array;\n  }\n}\n\nexport class Uint8DataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize = 4;\n  constructor(gl: WebGLRenderingContext, channels = 1) {\n    if (channels === 1) {\n      this.internalFormat = gl.ALPHA;\n      this.format = gl.ALPHA;  // not tested\n      this.textureType = gl.UNSIGNED_BYTE;\n      this.channelSize = channels;\n    } else if (channels === 4) {\n      this.internalFormat = gl.RGBA;\n      this.format = gl.RGBA;\n      this.textureType = gl.UNSIGNED_BYTE;\n      this.channelSize = channels;\n    } else {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n  }\n  encode(src: Uint8Array, _textureSize: number): Encoder.DataArrayType {\n    return new Uint8Array(src.buffer, src.byteOffset, src.byteLength);\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Uint8Array(size * this.channelSize);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Uint8Array {\n    if (buffer instanceof Uint8Array) {\n      return buffer.subarray(0, dataSize);\n    }\n    throw new Error(`Invalid array type: ${buffer.constructor}`);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../instrument';\nimport {assert} from '../../util';\n\n/** Layout preferences */\nexport interface WidthHeightPrefs {\n  breakAxis?: number;\n  isPacked?: boolean;\n  reverseWH?: boolean;\n}\n/**\n * TextureLayoutStrategy is an abstraction for different plans\n * for mapping n-dimensional arrays to 2D textures (and back)\n */\nexport interface TextureLayoutStrategy {\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number];\n}\n\n/**\n * This strategy try to find the minimal max(W,H) that fulfills (W * H == totalSize)\n */\nexport class AlwaysKeepOriginalSizeStrategy implements TextureLayoutStrategy {\n  constructor(public maxTextureSize: number) {}\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\n    // scalar tensor\n    if (shape.length === 0) {\n      return [1, 1];\n    }\n    const maxTextureSize = this.maxTextureSize;\n    if (prefs && prefs.breakAxis !== undefined) {\n      // check to see if dims fit\n      const wsize = prefs.breakAxis >= shape.length ? 1 : shape.slice(prefs.breakAxis).reduce((a, b) => a * b);\n      const hsize = prefs.breakAxis <= 0 ? 1 : shape.slice(0, prefs.breakAxis).reduce((a, b) => a * b);\n      if (wsize > maxTextureSize || hsize > maxTextureSize) {\n        // ignore preferences\n        // continue with default layout\n        Logger.verbose(\n            'TextureLayout',\n            `Given width/height preferences were unattainable: shape:${shape}, breakAxis:${prefs.breakAxis}`);\n      } else {\n        return [wsize, hsize];\n      }\n    }\n    const totalSize = shape.reduce((a, b) => a * b);\n\n    let width = Math.floor(Math.sqrt(totalSize));\n\n    for (; width < maxTextureSize && width < totalSize; width++) {\n      if (totalSize % width === 0) {\n        break;\n      }\n    }\n\n    if (width >= maxTextureSize || totalSize % width !== 0) {\n      throw new Error(`The given dimensions are outside this GPU's boundaries: ${shape}`);\n    }\n    return [width, totalSize / width];\n  }\n}\n\nexport class PreferLogicalStrategy implements TextureLayoutStrategy {\n  constructor(public maxTextureSize: number) {}\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\n    const wh = this.computeTexture(shape, prefs);\n    if (prefs && prefs.isPacked) {\n      wh[0] /= 2;\n      wh[1] /= 2;\n    }\n    if (prefs && prefs.reverseWH) {\n      return [wh[1], wh[0]];\n    }\n    return wh;\n  }\n\n  computeTexture(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\n    const isPacked = prefs && prefs.isPacked;\n    // scalar tensor\n    if (shape.length === 0) {\n      return isPacked ? [2, 2] : [1, 1];\n    }\n    let maxTextureSize = this.maxTextureSize;\n    if (prefs && prefs.breakAxis !== undefined) {\n      // check to see if dims fit\n      const wsize = prefs.breakAxis >= shape.length ? 1 : shape.slice(prefs.breakAxis).reduce((a, b) => a * b);\n      const hsize = prefs.breakAxis <= 0 ? 1 : shape.slice(0, prefs.breakAxis).reduce((a, b) => a * b);\n      if (wsize > maxTextureSize || hsize > maxTextureSize) {\n        // ignore preferences\n        // continue with default layout\n        Logger.verbose(\n            'TextureLayout',\n            `Given width/height preferences were unattainable: shape:${shape}, breakAxis:${prefs.breakAxis}`);\n      } else {\n        return [wsize, hsize];\n      }\n    }\n    let logShape = shape.slice(0);\n    if (isPacked) {\n      maxTextureSize = maxTextureSize * 2;\n\n      // This logic ensures we accurately count the number of packed texels needed\n      // to accommodate the tensor. We can only pack values in the same texel if\n      // they are from adjacent pairs of rows/cols within the same batch. So if a\n      // tensor has 3 rows, we pretend it has 4 rows in order to account for the\n      // fact that the texels containing the third row are half empty.\n      logShape = logShape.map(\n          (d, i) => i >= logShape.length - 2 ? (logShape[i] % 2 === 0 ? logShape[i] : logShape[i] + 1) : logShape[i]);\n\n      // Packed texture height is at least 2 (the channel height of a single\n      // texel).\n      if (logShape.length === 1) {\n        logShape = [2, logShape[0]];\n      }\n    }\n\n    // If logical shape is 2, we don't squeeze, since we want to match physical.\n    if (logShape.length !== 2) {\n      const squeezeResult = squeezeShape(logShape);\n      logShape = squeezeResult.newShape;\n    }\n\n    const size = sizeFromShape(logShape);\n    if (logShape.length <= 1 && size <= maxTextureSize) {\n      return [1, size];\n    } else if (logShape.length === 2 && logShape[0] <= maxTextureSize && logShape[1] <= maxTextureSize) {\n      return logShape as [number, number];\n    } else if (logShape.length === 3 && logShape[0] * logShape[1] <= maxTextureSize && logShape[2] <= maxTextureSize) {\n      return [logShape[0] * logShape[1], logShape[2]];\n    } else if (logShape.length === 3 && logShape[0] <= maxTextureSize && logShape[1] * logShape[2] <= maxTextureSize) {\n      return [logShape[0], logShape[1] * logShape[2]];\n    } else if (\n        logShape.length === 4 && logShape[0] * logShape[1] * logShape[2] <= maxTextureSize &&\n        logShape[3] <= maxTextureSize) {\n      return [logShape[0] * logShape[1] * logShape[2], logShape[3]];\n    } else if (\n        logShape.length === 4 && logShape[0] <= maxTextureSize &&\n        logShape[1] * logShape[2] * logShape[3] <= maxTextureSize) {\n      return [logShape[0], logShape[1] * logShape[2] * logShape[3]];\n    } else {\n      if (isPacked) {\n        // For packed textures size equals the number of channels required to\n        // accommodate the texture data. However in order to squarify such that\n        // inner dimensions stay even, we rewrite size to equal the number of\n        // texels. Then in the return statement we rehydrate the squarified\n        // dimensions to channel units.\n        return sizeToSquarishShape(size / 4).map(d => d * 2) as [number, number];\n      }\n      return sizeToSquarishShape(size);\n    }\n  }\n}\n\nexport function squeezeShape(shape: number[], axis?: number[]): {newShape: number[]; keptDims: number[]} {\n  const newShape: number[] = [];\n  const keptDims: number[] = [];\n  const isEmptyArray = axis != null && Array.isArray(axis) && axis.length === 0;\n  const axes = (axis == null || isEmptyArray) ? null : parseAxisParam(axis, shape).sort();\n  let j = 0;\n  for (let i = 0; i < shape.length; ++i) {\n    if (axes != null) {\n      if (axes[j] === i && shape[i] !== 1) {\n        throw new Error(`Can't squeeze axis ${i} since its dim '${shape[i]}' is not 1`);\n      }\n      if ((axes[j] == null || axes[j] > i) && shape[i] === 1) {\n        newShape.push(shape[i]);\n        keptDims.push(i);\n      }\n      if (axes[j] <= i) {\n        j++;\n      }\n    }\n    if (shape[i] !== 1) {\n      newShape.push(shape[i]);\n      keptDims.push(i);\n    }\n  }\n  return {newShape, keptDims};\n}\n\nexport function parseAxisParam(axis: number|number[], shape: number[]): number[] {\n  const rank = shape.length;\n\n  // Normalize input\n  axis = axis == null ? shape.map((s, i) => i) : ([] as number[]).concat(axis);\n\n  // Check for valid range\n  assert(\n      axis.every(ax => ax >= -rank && ax < rank),\n      () => `All values in axis param must be in range [-${rank}, ${rank}) but ` +\n          `got axis ${axis}`);\n\n  // Check for only integers\n  assert(\n      axis.every(isInt),\n      () => 'All values in axis param must be integers but ' +\n          `got axis ${axis}`);\n\n  // Handle negative axis.\n  return axis.map(a => a < 0 ? rank + a : a);\n}\nexport function isInt(a: number): boolean {\n  return a % 1 === 0;\n}\nexport function sizeFromShape(shape: number[]): number {\n  if (shape.length === 0) {\n    // Scalar.\n    return 1;\n  }\n  let size = shape[0];\n  for (let i = 1; i < shape.length; i++) {\n    size *= shape[i];\n  }\n  return size;\n}\nexport function getRowsCols(shape: number[]): [number, number] {\n  if (shape.length === 0) {\n    throw Error('Cannot get rows and columns of an empty shape array.');\n  }\n\n  return [shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]];\n}\nexport function sizeToSquarishShape(size: number): [number, number] {\n  const width = Math.ceil(Math.sqrt(size));\n  return [width, Math.ceil(size / width)];\n}\nexport function getBatchDim(shape: number[], dimsToSkip = 2): number {\n  return sizeFromShape(shape.slice(0, shape.length - dimsToSkip));\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ShapeUtil} from '../../util';\n\nimport {TextureLayoutStrategy, WidthHeightPrefs} from './texture-layout-strategy';\nimport {TextureLayout, TextureType} from './types';\n\nexport const createTextureLayoutFromTextureType =\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[],\n     textureType: TextureType): TextureLayout => {\n      const channel = (textureType === TextureType.unpacked || textureType === TextureType.unpackedReversed) ? 1 : 4;\n      const isPacked = textureType === TextureType.packed;\n      const reverseWH = (textureType === TextureType.unpackedReversed || textureType === TextureType.packed);\n      const breakAxis = textureType === TextureType.packedLastDimension ? shape.length - 1 : undefined;\n      const unpackedShape = textureType === TextureType.packedLastDimension ?\n          shape.map((d, i) => i === shape.length - 1 ? d * 4 : d) :\n          undefined;\n      return createTextureLayoutFromShape(\n          textureLayoutStrategy, shape, channel, unpackedShape, {isPacked, reverseWH, breakAxis});\n    };\n\nexport const calculateTextureWidthAndHeight =\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[], textureType: TextureType):\n        [number, number] => {\n          const layout = createTextureLayoutFromTextureType(textureLayoutStrategy, shape, textureType);\n          return [layout.width, layout.height];\n        };\n\n/**\n * Create a TextureLayout object from shape.\n */\nexport const createTextureLayoutFromShape =\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[], channels: 1|4 = 1,\n     unpackedShape?: readonly number[], prefs?: WidthHeightPrefs): TextureLayout => {\n      const isPacked = !!(prefs && prefs.isPacked);\n      const [width, height] = textureLayoutStrategy.computeTextureWH(isPacked ? unpackedShape || shape : shape, prefs);\n      const rank = shape.length;\n      let inferredDims = shape.slice(0);\n      if (rank === 0) {\n        inferredDims = [1];\n      }\n      if (channels === 1) {\n        // unpackedShape will take `shape` and not `inferredDims` so as to create a scalar Tensor if need be\n        unpackedShape = shape;\n      } else if (isPacked) {\n        if (channels !== 4) {\n          throw new Error('a packed texture must be 4-channel');\n        }\n        unpackedShape = shape;\n        if (rank > 0) {\n          inferredDims[rank - 1] = Math.ceil(inferredDims[rank - 1] / 2);\n        }\n        if (rank > 1) {\n          inferredDims[rank - 2] = Math.ceil(inferredDims[rank - 2] / 2);\n        }\n      } else if (!unpackedShape) {\n        throw new Error('Unpacked shape is needed when using channels > 1');\n      }\n      return {\n        width,\n        height,\n        channels,\n        isPacked,\n        shape: inferredDims,\n        strides: ShapeUtil.computeStrides(inferredDims),\n        unpackedShape,\n        reversedWH: (prefs && prefs.reverseWH)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger, Profiler} from '../../instrument';\nimport {Tensor} from '../../tensor';\n\nimport {Encoder} from './texture-data-encoder';\nimport {TextureLayoutStrategy} from './texture-layout-strategy';\nimport {TextureData, TextureLayout} from './types';\nimport {WebGLContext} from './webgl-context';\n\nexport interface TextureManagerConfig {\n  reuseTextures?: boolean;\n}\n\n/**\n * TextureManager is the mainly responsible for caching Textures\n * Textures are cached in 2 levels:\n *   1. the texures which are associated with a dataId (from Tensor)\n *    Caching these is crucial to performance. These are In-use Textures\n *   2. textures which are not in use by any current ProgramInfo/Tensor\n *     These are called Free Textures\n * TextureManager is also used to help creating textures. For this it\n * uses WebGLContext and TextureLayoutStrategy\n */\nexport class TextureManager {\n  private readonly inUseTextures: Map<string, WebGLTexture[]>;\n  private readonly idleTextures: Map<string, WebGLTexture[]>;\n  private readonly textureLookup: Map<WebGLTexture, string>;\n  private readonly pendingRead: Map<Tensor.Id, Array<(arr: Tensor.NumberType) => void>> = new Map();\n\n  constructor(\n      public glContext: WebGLContext, public layoutStrategy: TextureLayoutStrategy, public profiler: Readonly<Profiler>,\n      private config: TextureManagerConfig) {\n    if (config.reuseTextures) {\n      this.inUseTextures = new Map();\n      this.idleTextures = new Map();\n      this.textureLookup = new Map();\n    }\n  }\n  createTextureFromLayout(\n      dataType: Tensor.DataType, layout: TextureLayout, data?: Tensor.NumberType, usage?: Encoder.Usage) {\n    const textureDataType = this.toEncoderType(dataType);\n\n    const encoder = this.glContext.getEncoder(textureDataType, layout.channels || 1, usage);\n    if (layout.isPacked && usage === Encoder.Usage.UploadOnly) {\n      throw new Error('not implemented');\n    }\n    const width = layout.width;\n    const height = layout.height;\n\n    let key: string|undefined;\n    let inUseTextures: WebGLTexture[]|undefined;\n    if (this.config.reuseTextures) {\n      key = `${width}x${height}_${encoder.format}_${encoder.internalFormat}_${encoder.textureType}`;\n      inUseTextures = this.inUseTextures.get(key);\n      if (!inUseTextures) {\n        inUseTextures = [];\n        this.inUseTextures.set(key, inUseTextures);\n      }\n\n      const idleTextures = this.idleTextures.get(key);\n      if (idleTextures && idleTextures.length > 0) {\n        const texture = idleTextures.pop()!;\n        inUseTextures.push(texture);\n        if (usage === Encoder.Usage.UploadOnly) {\n          this.glContext.updateTexture(texture, width, height, encoder, this.toTextureData(dataType, data)!);\n        }\n        return texture;\n      }\n    }\n\n    Logger.verbose('TextureManager', `Creating new texture of size ${layout.width}x${layout.height}`);\n    const texture = this.glContext.allocateTexture(width, height, encoder, this.toTextureData(dataType, data));\n\n    if (this.config.reuseTextures) {\n      inUseTextures!.push(texture);\n      this.textureLookup.set(texture, key!);\n    }\n    return texture;\n  }\n  readTexture(td: TextureData, dataType: Tensor.DataType, channels?: number): Tensor.NumberType {\n    if (!channels) {\n      channels = 1;\n    }\n    return this.profiler.event('backend', 'TextureManager.readTexture', () => {\n      const dataSize = td.shape.reduce((a, b) => a * b) * channels!;\n      const data = this.glContext.readTexture(\n          td.texture, td.width, td.height, dataSize, this.toEncoderType(dataType), channels!);\n      return this.toTensorData(dataType, data);\n    });\n  }\n  async readTextureAsync(td: TextureData, dataType: Tensor.DataType, channels?: number): Promise<Tensor.NumberType> {\n    const dataId = td.tensor.dataId;\n    if (!channels) {\n      channels = 1;\n    }\n    if (this.pendingRead.has(dataId)) {\n      const subscribers = this.pendingRead.get(dataId);\n      return new Promise<Tensor.NumberType>(resolve => subscribers?.push(resolve));\n    }\n    return this.profiler.event('backend', 'TextureManager.readTextureAsync', async () => {\n      this.pendingRead.set(dataId, []);\n      const dataSize = td.shape.reduce((a, b) => a * b) * channels!;\n      // add a fence waiting for the data to be ready\n      await this.glContext.createAndWaitForFence();\n      const data = this.glContext.readTexture(\n          td.texture, td.width, td.height, dataSize, this.toEncoderType(dataType), channels!);\n      const tensorData = this.toTensorData(dataType, data);\n      const subscribers = this.pendingRead.get(dataId);\n      this.pendingRead.delete(dataId);\n      subscribers?.forEach(resolve => resolve(tensorData));\n      return tensorData;\n    });\n  }\n  readUint8TextureAsFloat(td: TextureData): Float32Array {\n    return this.profiler.event('backend', 'TextureManager.readUint8TextureAsFloat', () => {\n      const dataSize = td.shape.reduce((a, b) => a * b);\n      const data = this.glContext.readTexture(td.texture, td.width, td.height, dataSize * 4, 'byte', 4);\n      return new Float32Array(data.buffer, data.byteOffset, dataSize);\n    });\n  }\n  releaseTexture(textureData: TextureData, deleteTexture?: boolean): void {\n    let key: string|undefined;\n    if (this.config.reuseTextures) {\n      key = this.textureLookup.get(textureData.texture);\n      if (key) {\n        if (deleteTexture) {\n          this.textureLookup.delete(key);\n        }\n        const inUseTextures = this.inUseTextures.get(key);\n        if (inUseTextures) {\n          const index = inUseTextures.indexOf(textureData.texture);\n          if (index !== -1) {\n            inUseTextures.splice(index, 1);\n            let idleTextures = this.idleTextures.get(key);\n            if (!idleTextures) {\n              idleTextures = [];\n              this.idleTextures.set(key, idleTextures);\n            }\n            idleTextures.push(textureData.texture);\n          }\n        }\n      }\n    }\n\n    if (!key || deleteTexture) {\n      Logger.verbose('TextureManager', `Deleting texture of size ${textureData.width}x${textureData.height}`);\n      this.glContext.deleteTexture(textureData.texture);\n    }\n  }\n  toTensorData(dataType: Tensor.DataType, data: Encoder.DataArrayType): Tensor.NumberType {\n    switch (dataType) {\n      case 'int16':\n        return data instanceof Int16Array ? data : Int16Array.from(data);\n      case 'int32':\n        return data instanceof Int32Array ? data : Int32Array.from(data);\n      case 'int8':\n        return data instanceof Int8Array ? data : Int8Array.from(data);\n      case 'uint16':\n        return data instanceof Uint16Array ? data : Uint16Array.from(data);\n      case 'uint32':\n        return data instanceof Uint32Array ? data : Uint32Array.from(data);\n      case 'uint8':\n      case 'bool':\n        return data instanceof Uint8Array ? data : Uint8Array.from(data);\n      case 'float32':\n        return data instanceof Float32Array ? data : Float32Array.from(data);\n      case 'float64':\n        return data instanceof Float64Array ? data : Float64Array.from(data);\n      default:\n        throw new Error(`TensorData type ${dataType} is not supported`);\n    }\n  }\n  toTextureData(dataType: Tensor.DataType, data: Tensor.NumberType|undefined): Encoder.DataArrayType|undefined {\n    if (!data) {\n      return undefined;\n    }\n    return (data instanceof Float32Array) ? data : new Float32Array(data);\n    /*\n    switch (dataType) {\n      case 'int16':\n      case 'int32':\n      case 'uint16':\n      case 'uint32':\n        return (data.constructor === Uint32Array) ? data as Uint32Array : new Uint32Array(data);\n      case 'int8':\n      case 'uint8':\n      case 'bool':\n        return (data.constructor === Uint8Array) ? data as Uint8Array : new Uint8Array(data);\n      case 'float32':\n      case 'float64':\n        return (data.constructor === Float32Array) ? data as Float32Array : new Float32Array(data);\n      default:\n        throw new Error(`TensorData type ${dataType} is not supported`);\n    }\n    */\n  }\n  toEncoderType(_dataType: Tensor.DataType): Encoder.DataType {\n    return 'float';\n    // switch (dataType) {\n    //   case 'int16':\n    //   case 'int32':\n    //   case 'uint16':\n    //   case 'uint32':\n    //     return 'int';\n    //   case 'uint8':\n    //   case 'bool':\n    //     return 'byte';\n    //   case 'float32':\n    //   case 'float64':\n    //     return 'float';\n    //   default:\n    //     throw new Error(`TensorData type ${dataType} is not supported`);\n    // }\n  }\n  clearActiveTextures(): void {\n    this.glContext.clearActiveTextures();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../tensor';\n\n/**\n * Layout info is used for mapping n-dimensional array to 2D textures\n * The layout is created by the TextureLayoutStrategy based on\n * the Tensor's dimensions and strides\n */\nexport interface TextureLayout {\n  width: number;\n  height: number;\n  /**\n   * specify the number of value that encoded in a single pixel\n   */\n  channels: 1|2|3|4;\n  /**\n   * whether in packed mode or not\n   */\n  isPacked?: boolean;\n  /**\n   * the normalized shape\n   */\n  shape: readonly number[];\n  /**\n   * the stride of each dimensions, calculated according to shape\n   */\n  strides: readonly number[];\n  /**\n   * the original shape(dims) of the corresponding tensor\n   */\n  unpackedShape: readonly number[];\n\n  reversedWH?: boolean;\n}\nexport interface TextureData extends TextureLayout {\n  tensor: Tensor;\n  texture: WebGLTexture;\n}\n\nexport enum TextureType {\n  unpacked,              // <-- normal unpacked texture\n  unpackedReversed,      // <-- unpacked texture used in old ONNX.js implementation (deprecated)\n  packed,                // <-- normal packed texture\n  downloadUint8AsFloat,  // <-- ONLY used in texture downloading for iOS devices\n  packedLastDimension    // <-- ONLY used in old ONNX.js Conv implementation for input W (deprecated)\n}\n\nexport interface TensorInfo {\n  id?: Tensor.Id;\n  dims: readonly number[];\n  type: Tensor.DataType;\n  textureType: TextureType;\n}\n\nexport interface ProgramVariable {\n  type: 'float'|'int';\n  name: string;\n  arrayLength?: number;\n  data: number|number[];\n}\n\n/**\n * A set of metadata of a shader program.\n */\nexport interface ProgramMetadata {\n  /**\n   * the name of the program. used for debugging and profiling\n   */\n  name: string;\n  /**\n   * texture types for each input\n   */\n  inputTypes: TextureType[];\n  /**\n   * names of each input\n   */\n  inputNames: string[];\n  /**\n   * an optional string as a cache hint in the artifact cache\n   */\n  cacheHint?: string;\n}\n\n/**\n * A ProgramInfoLoader allows\n */\nexport interface ProgramInfoLoader extends ProgramMetadata {\n  /**\n   * a function to get the program info\n   */\n  get(): ProgramInfo;\n}\n\n/**\n * A set of data that represent a shader program\n */\nexport interface ProgramInfo extends ProgramMetadata {\n  /**\n   * information of uniform variables\n   */\n  variables?: ProgramVariable[];\n  /**\n   * tensor info for output\n   */\n  output: TensorInfo;\n  /**\n   * the shader's processing source code\n   */\n  shaderSource: string;\n  /**\n   * whether the shader source contains a customized main function implementation\n   */\n  hasMain?: boolean;\n}\n\nexport interface VariableInfo {\n  type: 'float'|'int';\n  name: string;\n  arrayLength?: number;\n}\n\nexport interface ProgramVariable {\n  type: 'float'|'int';\n  name: string;\n  arrayLength?: number;\n  data: number|number[];\n}\n\n/**\n * Information of uniforms that shader uses\n */\nexport interface UniformInfo {\n  type: 'sampler2D'|VariableInfo['type'];\n  name: string;\n  arrayLength?: number;\n}\n\nexport interface UniformLocation extends UniformInfo {\n  location: WebGLUniformLocation;\n}\n\n/**\n * Artifact is the result of compilation\n * It does not contain input of output data\n * However anything that could be run as a \"program\"\n */\nexport interface Artifact {\n  programInfo: ProgramInfo;\n  program: WebGLProgram;\n  uniformLocations: UniformLocation[];\n  attribLocations: {position: number; textureCoord: number};\n}\nexport declare namespace Artifact {\n  type UniformLocations = Artifact['uniformLocations'];\n  type AttribLocations = Artifact['attribLocations'];\n}\n\nexport interface UniformData {\n  [name: string]: number|number[];\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {assert} from '../../util';\n/**\n * Given a non RGBA shape calculate the R version\n * It is assumed that the dimensions are multiples of given channels\n * NOTE: it is always the last dim that gets packed.\n * @param unpackedShape original shape to create a packed version from\n */\nexport function getPackedShape(unpackedShape: readonly number[]): readonly number[] {\n  const len = unpackedShape.length;\n  return unpackedShape.slice(0, len - 1).concat(unpackedShape[len - 1] / 4);\n}\n\nexport async function repeatedTry(\n    checkFn: () => boolean, delayFn = (_counter: number) => 0, maxCounter?: number): Promise<void> {\n  return new Promise<void>((resolve, reject) => {\n    let tryCount = 0;\n\n    const tryFn = () => {\n      if (checkFn()) {\n        resolve();\n        return;\n      }\n\n      tryCount++;\n\n      const nextBackoff = delayFn(tryCount);\n\n      if (maxCounter != null && tryCount >= maxCounter) {\n        reject();\n        return;\n      }\n      setTimeout(tryFn, nextBackoff);\n    };\n\n    tryFn();\n  });\n}\n\n/**\n * Generates the function name from an input sampler name.\n * @param samplerName Name of the sampler.\n */\nexport function generateShaderFuncNameFromInputSamplerName(samplerName: string): string {\n  assert(typeof samplerName !== 'undefined' && samplerName.length !== 0, () => 'empty string found for sampler name');\n  return 'get' + samplerName.charAt(0).toUpperCase() + samplerName.slice(1);\n}\n\n/**\n * Generates the function name from an input sampler name at output coordinates.\n * @param samplerName Name of the sampler.\n */\nexport function generateShaderFuncNameFromInputSamplerNameAtOutCoords(samplerName: string): string {\n  assert(typeof samplerName !== 'undefined' && samplerName.length !== 0, () => 'empty string found for sampler name');\n  return 'get' + samplerName.charAt(0).toUpperCase() + samplerName.slice(1) + 'AtOutCoords';\n}\n\n/** Returns a new input shape (a copy) that has a squeezed logical shape. */\nexport function squeezeInputShape(inputShape: readonly number[], squeezedShape: number[]): number[] {\n  // Deep copy.\n  let newInputShape: number[] = JSON.parse(JSON.stringify(inputShape));\n  newInputShape = squeezedShape;\n  return newInputShape;\n}\n\n/** Returns a list of squeezed parameters for shader functions */\nexport function getSqueezedParams(params: string[], keptDims: number[]): string {\n  return keptDims.map(d => params[d]).join(', ');\n}\n\n/** Returns the data type for different ranks. */\nexport function getCoordsDataType(rank: number): string {\n  if (rank <= 1) {\n    return 'int';\n  } else if (rank === 2) {\n    return 'ivec2';\n  } else if (rank === 3) {\n    return 'ivec3';\n  } else if (rank === 4) {\n    return 'ivec4';\n  } else if (rank === 5) {\n    return 'ivec5';\n  } else if (rank === 6) {\n    return 'ivec6';\n  } else {\n    throw Error(`GPU for rank ${rank} is not yet supported`);\n  }\n}\n\nexport function getGlChannels(rank = 6): string[] {\n  return ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, rank);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../instrument';\n\nimport {WebGLContext} from './webgl-context';\n\nconst cache: {[contextId: string]: WebGLContext} = {};\n\n/**\n * This factory function creates proper WebGLRenderingContext based on\n * the current browsers capabilities\n * The order is from higher/most recent versions to most basic\n */\nexport function createWebGLContext(contextId?: 'webgl'|'webgl2'): WebGLContext {\n  let context: WebGLContext|undefined;\n  if ((!contextId || contextId === 'webgl2') && 'webgl2' in cache) {\n    context = cache.webgl2;\n  } else if ((!contextId || contextId === 'webgl') && 'webgl' in cache) {\n    context = cache.webgl;\n  }\n\n  if (!context) {\n    try {\n      // try to create webgl context from an offscreen canvas\n      const offscreenCanvas = createOffscreenCanvas();\n      context = createNewWebGLContext(offscreenCanvas, contextId);\n    } catch (e) {\n      // if failed, fallback to try to use a normal canvas element\n      const canvas = createCanvas();\n      context = createNewWebGLContext(canvas, contextId);\n    }\n  }\n\n  contextId = contextId || context.version === 1 ? 'webgl' : 'webgl2';\n  const gl = context.gl;\n\n  cache[contextId] = context;\n\n  if (gl.isContextLost()) {\n    delete cache[contextId];\n    return createWebGLContext(contextId);\n  }\n\n  gl.disable(gl.DEPTH_TEST);\n  gl.disable(gl.STENCIL_TEST);\n  gl.disable(gl.BLEND);\n  gl.disable(gl.DITHER);\n  gl.disable(gl.POLYGON_OFFSET_FILL);\n  gl.disable(gl.SAMPLE_COVERAGE);\n  gl.enable(gl.SCISSOR_TEST);\n  gl.enable(gl.CULL_FACE);\n  gl.cullFace(gl.BACK);\n\n  return context;\n}\n\nexport function createNewWebGLContext(canvas: HTMLCanvasElement, contextId?: 'webgl'|'webgl2'): WebGLContext {\n  const contextAttributes: WebGLContextAttributes = {\n    alpha: false,\n    depth: false,\n    antialias: false,\n    stencil: false,\n    preserveDrawingBuffer: false,\n    premultipliedAlpha: false,\n    failIfMajorPerformanceCaveat: false\n  };\n  let gl: WebGLRenderingContext|null;\n  const ca = contextAttributes;\n  if (!contextId || contextId === 'webgl2') {\n    gl = canvas.getContext('webgl2', ca);\n    if (gl) {\n      try {\n        return new WebGLContext(gl, 2);\n      } catch (err) {\n        Logger.warning('GlContextFactory', `failed to create WebGLContext using contextId 'webgl2'. Error: ${err}`);\n      }\n    }\n  }\n  if (!contextId || contextId === 'webgl') {\n    gl = canvas.getContext('webgl', ca) || canvas.getContext('experimental-webgl', ca) as WebGLRenderingContext;\n    if (gl) {\n      try {\n        return new WebGLContext(gl, 1);\n      } catch (err) {\n        Logger.warning(\n            'GlContextFactory',\n            `failed to create WebGLContext using contextId 'webgl' or 'experimental-webgl'. Error: ${err}`);\n      }\n    }\n  }\n\n  throw new Error('WebGL is not supported');\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\ndeclare let OffscreenCanvas: {new (width: number, height: number): HTMLCanvasElement};\n\nfunction createCanvas(): HTMLCanvasElement {\n  if (typeof document === 'undefined') {\n    throw new TypeError('failed to create canvas: document is not supported');\n  }\n  const canvas: HTMLCanvasElement = document.createElement('canvas');\n  canvas.width = 1;\n  canvas.height = 1;\n  return canvas;\n}\n\nfunction createOffscreenCanvas(): HTMLCanvasElement {\n  if (typeof OffscreenCanvas === 'undefined') {\n    throw new TypeError('failed to create offscreen canvas: OffscreenCanvas is not supported');\n  }\n  return new OffscreenCanvas(1, 1);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\n\nimport * as DataEncoders from './texture-data-encoder';\nimport {DataEncoder, Encoder} from './texture-data-encoder';\nimport {repeatedTry} from './utils';\n\nexport interface FenceContext {\n  query: WebGLSync|null;\n  isFencePassed(): boolean;\n}\n\ntype PollItem = {\n  isDoneFn: () => boolean; resolveFn: () => void;\n};\n\nexport function linearSearchLastTrue(arr: Array<() => boolean>): number {\n  let i = 0;\n  for (; i < arr.length; ++i) {\n    const isDone = arr[i]();\n    if (!isDone) {\n      break;\n    }\n  }\n  return i - 1;\n}\n\n/**\n * Abstraction and wrapper around WebGLRenderingContext and its operations\n */\nexport class WebGLContext {\n  gl: WebGLRenderingContext;\n  version: 1|2;\n\n  private vertexbuffer: WebGLBuffer;\n  private framebuffer: WebGLFramebuffer;\n\n  // WebGL flags and vital parameters\n  private isFloatTextureAttachableToFrameBuffer: boolean;\n  isFloat32DownloadSupported: boolean;\n  isRenderFloat32Supported: boolean;\n  isBlendSupported: boolean;\n  maxTextureSize: number;\n  // private maxCombinedTextureImageUnits: number;\n  private maxTextureImageUnits: number;\n  // private maxCubeMapTextureSize: number;\n  // private shadingLanguageVersion: string;\n  // private webglVendor: string;\n  // private webglVersion: string;\n\n  // WebGL2 flags and vital parameters\n  // private max3DTextureSize: number;\n  // private maxArrayTextureLayers: number;\n  // private maxColorAttachments: number;\n  // private maxDrawBuffers: number;\n\n  // WebGL extensions\n  // eslint-disable-next-line camelcase\n  textureFloatExtension: OES_texture_float|null;\n  // eslint-disable-next-line camelcase\n  textureHalfFloatExtension: OES_texture_half_float|null;\n\n  // WebGL2 extensions\n  colorBufferFloatExtension: unknown|null;\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  disjointTimerQueryWebgl2Extension: {TIME_ELAPSED_EXT: GLenum; GPU_DISJOINT_EXT: GLenum}|null;\n\n  private disposed: boolean;\n  private frameBufferBound = false;\n\n  constructor(gl: WebGLRenderingContext, version: 1|2) {\n    this.gl = gl;\n    this.version = version;\n\n    this.getExtensions();\n    this.vertexbuffer = this.createVertexbuffer();\n    this.framebuffer = this.createFramebuffer();\n    this.queryVitalParameters();\n  }\n\n  allocateTexture(width: number, height: number, encoder: DataEncoder, data?: Encoder.DataArrayType): WebGLTexture {\n    const gl = this.gl;\n    // create the texture\n    const texture = gl.createTexture();\n    // bind the texture so the following methods effect this texture.\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    const buffer = data ? encoder.encode(data, width * height) : null;\n    gl.texImage2D(\n        gl.TEXTURE_2D,\n        0,  // Level of detail.\n        encoder.internalFormat, width, height,\n        0,  // Always 0 in OpenGL ES.\n        encoder.format, encoder.textureType, buffer);\n    this.checkError();\n    return texture as WebGLTexture;\n  }\n  updateTexture(\n      texture: WebGLTexture, width: number, height: number, encoder: DataEncoder, data: Encoder.DataArrayType): void {\n    const gl = this.gl;\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    const buffer = encoder.encode(data, width * height);\n    gl.texSubImage2D(\n        gl.TEXTURE_2D,\n        0,  // level\n        0,  // xoffset\n        0,  // yoffset\n        width, height, encoder.format, encoder.textureType, buffer);\n    this.checkError();\n  }\n  attachFramebuffer(texture: WebGLTexture, width: number, height: number): void {\n    const gl = this.gl;\n    // Make it the target for framebuffer operations - including rendering.\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\n    gl.framebufferTexture2D(\n        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture,\n        0);  // 0, we aren't using MIPMAPs\n    this.checkError();\n    gl.viewport(0, 0, width, height);\n    gl.scissor(0, 0, width, height);\n  }\n  readTexture(\n      texture: WebGLTexture, width: number, height: number, dataSize: number, dataType: Encoder.DataType,\n      channels: number): Encoder.DataArrayType {\n    const gl = this.gl;\n    if (!channels) {\n      channels = 1;\n    }\n    if (!this.frameBufferBound) {\n      this.attachFramebuffer(texture, width, height);\n    }\n    const encoder = this.getEncoder(dataType, channels);\n    const buffer = encoder.allocate(width * height);\n    // bind texture to framebuffer\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.framebufferTexture2D(\n        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture,\n        0);  // 0, we aren't using MIPMAPs\n    // TODO: Check if framebuffer is ready\n    gl.readPixels(0, 0, width, height, gl.RGBA, encoder.textureType, buffer);\n    this.checkError();\n    // unbind FB\n    return encoder.decode(buffer, dataSize);\n  }\n\n  isFramebufferReady(): boolean {\n    // TODO: Implement logic to check if the framebuffer is ready\n    return true;\n  }\n  getActiveTexture(): string {\n    const gl = this.gl;\n    const n = gl.getParameter(this.gl.ACTIVE_TEXTURE);\n    return `TEXTURE${(n - gl.TEXTURE0)}`;\n  }\n  getTextureBinding(): WebGLTexture {\n    return this.gl.getParameter(this.gl.TEXTURE_BINDING_2D);\n  }\n  getFramebufferBinding(): WebGLFramebuffer {\n    return this.gl.getParameter(this.gl.FRAMEBUFFER_BINDING);\n  }\n  setVertexAttributes(positionHandle: number, textureCoordHandle: number): void {\n    const gl = this.gl;\n    gl.vertexAttribPointer(positionHandle, 3, gl.FLOAT, false, 20, 0);\n    gl.enableVertexAttribArray(positionHandle);\n    if (textureCoordHandle !== -1) {\n      gl.vertexAttribPointer(textureCoordHandle, 2, gl.FLOAT, false, 20, 12);\n      gl.enableVertexAttribArray(textureCoordHandle);\n    }\n    this.checkError();\n  }\n  createProgram(\n      vertexShader: WebGLShader,\n      fragShader: WebGLShader,\n      ): WebGLProgram {\n    const gl = this.gl;\n    const program = gl.createProgram()!;\n\n    // the program consists of our shaders\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragShader);\n    gl.linkProgram(program);\n    return program;\n  }\n  compileShader(shaderSource: string, shaderType: number): WebGLShader {\n    const gl = this.gl;\n    const shader = gl.createShader(shaderType);\n    if (!shader) {\n      throw new Error(`createShader() returned null with type ${shaderType}`);\n    }\n\n    gl.shaderSource(shader, shaderSource);\n    gl.compileShader(shader);\n    if (gl.getShaderParameter(shader, gl.COMPILE_STATUS) === false) {\n      throw new Error(`Failed to compile shader: ${gl.getShaderInfoLog(shader)}\nShader source:\n${shaderSource}`);\n    }\n    return shader;\n  }\n  deleteShader(shader: WebGLShader): void {\n    this.gl.deleteShader(shader);\n  }\n  bindTextureToUniform(texture: WebGLTexture, position: number, uniformHandle: WebGLUniformLocation): void {\n    const gl = this.gl;\n    gl.activeTexture(gl.TEXTURE0 + position);\n    this.checkError();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    this.checkError();\n    gl.uniform1i(uniformHandle, position);\n    this.checkError();\n  }\n  draw(): void {\n    this.gl.drawArrays(this.gl.TRIANGLE_STRIP, 0, 4);\n    this.checkError();\n  }\n  checkError(): void {\n    if (env.debug) {\n      const gl = this.gl;\n      const error = gl.getError();\n      let label = '';\n      switch (error) {\n        case (gl.NO_ERROR):\n          return;\n        case (gl.INVALID_ENUM):\n          label = 'INVALID_ENUM';\n          break;\n        case (gl.INVALID_VALUE):\n          label = 'INVALID_VALUE';\n          break;\n        case (gl.INVALID_OPERATION):\n          label = 'INVALID_OPERATION';\n          break;\n        case (gl.INVALID_FRAMEBUFFER_OPERATION):\n          label = 'INVALID_FRAMEBUFFER_OPERATION';\n          break;\n        case (gl.OUT_OF_MEMORY):\n          label = 'OUT_OF_MEMORY';\n          break;\n        case (gl.CONTEXT_LOST_WEBGL):\n          label = 'CONTEXT_LOST_WEBGL';\n          break;\n        default:\n          label = `Unknown WebGL Error: ${error.toString(16)}`;\n      }\n      throw new Error(label);\n    }\n  }\n  deleteTexture(texture: WebGLTexture): void {\n    this.gl.deleteTexture(texture);\n  }\n  deleteProgram(program: WebGLProgram): void {\n    this.gl.deleteProgram(program);\n  }\n  getEncoder(dataType: Encoder.DataType, channels: number, usage: Encoder.Usage = Encoder.Usage.Default): DataEncoder {\n    if (this.version === 2) {\n      return new DataEncoders.RedFloat32DataEncoder(this.gl as WebGL2RenderingContext, channels);\n    }\n\n    switch (dataType) {\n      case 'float':\n        if (usage === Encoder.Usage.UploadOnly || this.isRenderFloat32Supported) {\n          return new DataEncoders.RGBAFloatDataEncoder(this.gl, channels);\n        } else {\n          return new DataEncoders.RGBAFloatDataEncoder(\n              this.gl, channels, this.textureHalfFloatExtension!.HALF_FLOAT_OES);\n        }\n      case 'int':\n        throw new Error('not implemented');\n      case 'byte':\n        return new DataEncoders.Uint8DataEncoder(this.gl, channels);\n      default:\n        throw new Error(`Invalid dataType: ${dataType}`);\n    }\n  }\n  clearActiveTextures(): void {\n    const gl = this.gl;\n    for (let unit = 0; unit < this.maxTextureImageUnits; ++unit) {\n      gl.activeTexture(gl.TEXTURE0 + unit);\n      gl.bindTexture(gl.TEXTURE_2D, null);\n    }\n  }\n  dispose(): void {\n    if (this.disposed) {\n      return;\n    }\n    const gl = this.gl;\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.deleteFramebuffer(this.framebuffer);\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    gl.deleteBuffer(this.vertexbuffer);\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n    gl.finish();\n    this.disposed = true;\n  }\n\n  private createDefaultGeometry(): Float32Array {\n    // Sets of x,y,z(=0),s,t coordinates.\n    return new Float32Array([\n      -1.0, 1.0,  0.0, 0.0, 1.0,  // upper left\n      -1.0, -1.0, 0.0, 0.0, 0.0,  // lower left\n      1.0,  1.0,  0.0, 1.0, 1.0,  // upper right\n      1.0,  -1.0, 0.0, 1.0, 0.0   // lower right\n    ]);\n  }\n  private createVertexbuffer(): WebGLBuffer {\n    const gl = this.gl;\n    const buffer = gl.createBuffer();\n    if (!buffer) {\n      throw new Error('createBuffer() returned null');\n    }\n    const geometry = this.createDefaultGeometry();\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, geometry, gl.STATIC_DRAW);\n    this.checkError();\n    return buffer;\n  }\n  private createFramebuffer(): WebGLFramebuffer {\n    const fb = this.gl.createFramebuffer();\n    if (!fb) {\n      throw new Error('createFramebuffer returned null');\n    }\n    return fb;\n  }\n\n  private queryVitalParameters(): void {\n    const gl = this.gl;\n\n    this.isFloatTextureAttachableToFrameBuffer = this.checkFloatTextureAttachableToFrameBuffer();\n    this.isRenderFloat32Supported = this.checkRenderFloat32();\n    this.isFloat32DownloadSupported = this.checkFloat32Download();\n\n    if (this.version === 1 && !this.textureHalfFloatExtension && !this.isRenderFloat32Supported) {\n      throw new Error('both float32 and float16 TextureType are not supported');\n    }\n\n    this.isBlendSupported = !this.isRenderFloat32Supported || this.checkFloat32Blend();\n\n    // this.maxCombinedTextureImageUnits = gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);\n    this.maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n    this.maxTextureImageUnits = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n    // this.maxCubeMapTextureSize = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);\n    // this.shadingLanguageVersion = gl.getParameter(gl.SHADING_LANGUAGE_VERSION);\n    // this.webglVendor = gl.getParameter(gl.VENDOR);\n    // this.webglVersion = gl.getParameter(gl.VERSION);\n\n    if (this.version === 2) {\n      // this.max3DTextureSize = gl.getParameter(WebGL2RenderingContext.MAX_3D_TEXTURE_SIZE);\n      // this.maxArrayTextureLayers = gl.getParameter(WebGL2RenderingContext.MAX_ARRAY_TEXTURE_LAYERS);\n      // this.maxColorAttachments = gl.getParameter(WebGL2RenderingContext.MAX_COLOR_ATTACHMENTS);\n      // this.maxDrawBuffers = gl.getParameter(WebGL2RenderingContext.MAX_DRAW_BUFFERS);\n    }\n  }\n  private getExtensions(): void {\n    if (this.version === 2) {\n      this.colorBufferFloatExtension = this.gl.getExtension('EXT_color_buffer_float');\n      this.disjointTimerQueryWebgl2Extension = this.gl.getExtension('EXT_disjoint_timer_query_webgl2');\n    } else {\n      this.textureFloatExtension = this.gl.getExtension('OES_texture_float');\n      this.textureHalfFloatExtension = this.gl.getExtension('OES_texture_half_float');\n    }\n  }\n\n  private checkFloatTextureAttachableToFrameBuffer(): boolean {\n    // test whether Float32 texture is supported:\n    // STEP.1 create a float texture\n    const gl = this.gl;\n    const texture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    const internalFormat = this.version === 2 ? (gl as unknown as {RGBA32F: number}).RGBA32F : gl.RGBA;\n    gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 1, 1, 0, gl.RGBA, gl.FLOAT, null);\n    // STEP.2 bind a frame buffer\n    const frameBuffer = gl.createFramebuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n    // STEP.3 attach texture to framebuffer\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n    // STEP.4 test whether framebuffer is complete\n    const isComplete = gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.deleteTexture(texture);\n    gl.deleteFramebuffer(frameBuffer);\n    return isComplete;\n  }\n\n  private checkRenderFloat32(): boolean {\n    if (this.version === 2) {\n      if (!this.colorBufferFloatExtension) {\n        return false;\n      }\n    } else {\n      if (!this.textureFloatExtension) {\n        return false;\n      }\n    }\n    return this.isFloatTextureAttachableToFrameBuffer;\n  }\n\n  private checkFloat32Download(): boolean {\n    if (this.version === 2) {\n      if (!this.colorBufferFloatExtension) {\n        return false;\n      }\n    } else {\n      if (!this.textureFloatExtension) {\n        return false;\n      }\n      if (!this.gl.getExtension('WEBGL_color_buffer_float')) {\n        return false;\n      }\n    }\n    return this.isFloatTextureAttachableToFrameBuffer;\n  }\n\n  /**\n   * Check whether GL_BLEND is supported\n   */\n  private checkFloat32Blend(): boolean {\n    // it looks like currently (2019-05-08) there is no easy way to detect whether BLEND is supported\n    // https://github.com/microsoft/onnxjs/issues/145\n\n    const gl = this.gl;\n\n    let texture: WebGLTexture|null|undefined;\n    let frameBuffer: WebGLFramebuffer|null|undefined;\n    let vertexShader: WebGLShader|null|undefined;\n    let fragmentShader: WebGLShader|null|undefined;\n    let program: WebGLProgram|null|undefined;\n\n    try {\n      texture = gl.createTexture();\n      frameBuffer = gl.createFramebuffer();\n      gl.bindTexture(gl.TEXTURE_2D, texture);\n\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      const internalFormat = this.version === 2 ? (gl as unknown as {RGBA32F: number}).RGBA32F : gl.RGBA;\n      gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 1, 1, 0, gl.RGBA, gl.FLOAT, null);\n\n      gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n\n      gl.enable(gl.BLEND);\n\n      vertexShader = gl.createShader(gl.VERTEX_SHADER);\n      if (!vertexShader) {\n        return false;\n      }\n      gl.shaderSource(vertexShader, 'void main(){}');\n      gl.compileShader(vertexShader);\n\n      fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n      if (!fragmentShader) {\n        return false;\n      }\n      gl.shaderSource(fragmentShader, 'precision highp float;void main(){gl_FragColor=vec4(0.5);}');\n      gl.compileShader(fragmentShader);\n\n      program = gl.createProgram();\n      if (!program) {\n        return false;\n      }\n      gl.attachShader(program, vertexShader);\n      gl.attachShader(program, fragmentShader);\n      gl.linkProgram(program);\n      gl.useProgram(program);\n\n      gl.drawArrays(gl.POINTS, 0, 1);\n      return gl.getError() === gl.NO_ERROR;\n\n    } finally {\n      gl.disable(gl.BLEND);\n\n      if (program) {\n        gl.deleteProgram(program);\n      }\n      if (vertexShader) {\n        gl.deleteShader(vertexShader);\n      }\n      if (fragmentShader) {\n        gl.deleteShader(fragmentShader);\n      }\n      if (frameBuffer) {\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n        gl.deleteFramebuffer(frameBuffer);\n      }\n      if (texture) {\n        gl.bindTexture(gl.TEXTURE_2D, null);\n        gl.deleteTexture(texture);\n      }\n    }\n  }\n\n  beginTimer(): WebGLQuery {\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.disjointTimerQueryWebgl2Extension;\n\n      const query = gl2.createQuery() as WebGLQuery;\n      gl2.beginQuery(ext.TIME_ELAPSED_EXT, query);\n      return query;\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported.');\n    }\n  }\n\n  endTimer() {\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.disjointTimerQueryWebgl2Extension;\n      gl2.endQuery(ext.TIME_ELAPSED_EXT);\n      return;\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported');\n    }\n  }\n\n  isTimerResultAvailable(query: WebGLQuery): boolean {\n    let available = false, disjoint = false;\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.disjointTimerQueryWebgl2Extension;\n\n      available = gl2.getQueryParameter(query, gl2.QUERY_RESULT_AVAILABLE);\n      disjoint = gl2.getParameter(ext.GPU_DISJOINT_EXT);\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported');\n    }\n\n    return available && !disjoint;\n  }\n\n  getTimerResult(query: WebGLQuery): number {\n    let timeElapsed = 0;\n    if (this.version === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      timeElapsed = gl2.getQueryParameter(query, gl2.QUERY_RESULT);\n      gl2.deleteQuery(query);\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported');\n    }\n    // return miliseconds\n    return timeElapsed / 1000000;\n  }\n\n  async waitForQueryAndGetTime(query: WebGLQuery): Promise<number> {\n    await repeatedTry(() => this.isTimerResultAvailable(query));\n    return this.getTimerResult(query);\n  }\n\n  public async createAndWaitForFence(): Promise<void> {\n    const fenceContext = this.createFence(this.gl);\n    return this.pollFence(fenceContext);\n  }\n\n  private createFence(gl: WebGLRenderingContext): FenceContext {\n    let isFencePassed: () => boolean;\n    const gl2 = gl as WebGL2RenderingContext;\n    const query = gl2.fenceSync(gl2.SYNC_GPU_COMMANDS_COMPLETE, 0);\n    gl.flush();\n    if (query === null) {\n      isFencePassed = () => true;\n    } else {\n      isFencePassed = () => {\n        const status = gl2.clientWaitSync(query, 0, 0);\n        return status === gl2.ALREADY_SIGNALED || status === gl2.CONDITION_SATISFIED;\n      };\n    }\n    return {query, isFencePassed};\n  }\n\n  async pollFence(fenceContext: FenceContext) {\n    return new Promise<void>(resolve => {\n      void this.addItemToPoll(() => fenceContext.isFencePassed(), () => resolve());\n    });\n  }\n\n  private itemsToPoll: PollItem[] = [];\n\n  pollItems(): void {\n    // Find the last query that has finished.\n    const index = linearSearchLastTrue(this.itemsToPoll.map(x => x.isDoneFn));\n    for (let i = 0; i <= index; ++i) {\n      const {resolveFn} = this.itemsToPoll[i];\n      resolveFn();\n    }\n    this.itemsToPoll = this.itemsToPoll.slice(index + 1);\n  }\n\n  private async addItemToPoll(isDoneFn: () => boolean, resolveFn: () => void) {\n    this.itemsToPoll.push({isDoneFn, resolveFn});\n    if (this.itemsToPoll.length > 1) {\n      // We already have a running loop that polls.\n      return;\n    }\n    // Start a new loop that polls.\n    await repeatedTry(() => {\n      this.pollItems();\n      // End the loop if no more items to poll.\n      return this.itemsToPoll.length === 0;\n    });\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {SessionHandler} from './backend';\nimport {Graph} from './graph';\nimport {Logger, Profiler} from './instrument';\nimport {Operator} from './operators';\nimport {Tensor} from './tensor';\n\nclass KernelOp {\n  constructor(public op: Operator, public node: Graph.Node) {}\n}\n\nexport class ExecutionPlan {\n  constructor(private graph: Graph, ops: Operator[], private profiler: Readonly<Profiler>) {\n    this.initialize(ops);\n  }\n\n  initialize(ops: Operator[]) {\n    this.profiler.event('session', 'ExecutionPlan.initialize', () => {\n      const graphNodes = this.graph.getNodes();\n      if (graphNodes.length !== ops.length) {\n        throw new Error('The size of nodes and OPs do not match.');\n      }\n\n      this._ops = ops.map((op, i) => new KernelOp(op, graphNodes[i]));\n      this.reset();\n\n      // look for starter node(s)\n      this._starter = [];\n      this._ops.forEach((op, i) => {\n        let resolved = true;\n        for (const input of op.node.inputs) {\n          if (\n              !this._values[input]                                   // not an initialized input\n              && this.graph.getInputIndices().indexOf(input) === -1  // not model input\n          ) {\n            resolved = false;\n            break;\n          }\n        }\n        if (resolved) {\n          this._starter.push(i);\n        }\n      });\n    });\n  }\n\n  reset() {\n    this._values = this.graph.getValues().map(i => i.tensor);\n  }\n\n  async execute(sessionHandler: SessionHandler, modelInputs: Tensor[]): Promise<Tensor[]> {\n    return this.profiler.event('session', 'ExecutionPlan.execute', async () => {\n      // reset mediem result\n      this.reset();\n\n      // create inference handler\n      const inferenceHandler = sessionHandler.createInferenceHandler();\n\n      // populate inputs value\n      const graphInputs = this.graph.getInputIndices();\n      if (modelInputs.length !== graphInputs.length) {\n        throw new Error(`number of input tensors don't match the number of inputs to the model: actual: ${\n            modelInputs.length} expected: ${graphInputs.length}`);\n      }\n\n      modelInputs.forEach((input, i) => {\n        const index = graphInputs[i];\n        this._values[index] = input;\n      });\n\n      // prepare running sequence\n      const sequence: number[] = this._starter.slice(0);\n\n      // execution iterations\n      const graphValues = this.graph.getValues();\n      const graphNodes = this.graph.getNodes();\n\n      let rear = 0;\n      while (rear < sequence.length) {\n        const thisOpIndex = sequence[rear++];\n        const thisOp = this._ops[thisOpIndex];\n\n        // check input\n        const inputList = thisOp.node.inputs.map(i => this._values[i]);\n        if (inputList.indexOf(undefined) !== -1) {\n          throw new Error(`unresolved input detected: op: ${thisOp.node}`);\n        }\n\n        // run\n        const inputTensors = inputList as Tensor[];\n        Logger.verbose(\n            'ExecPlan',\n            `Runing op:${thisOp.node.name} (${\n                inputTensors.map((t, i) => `'${thisOp.node.inputs[i]}': ${t.type}[${t.dims.join(',')}]`).join(', ')})`);\n\n        const outputList = await this.profiler.event(\n            'node', thisOp.node.name, async () => thisOp.op.impl(inferenceHandler, inputTensors, thisOp.op.context));\n\n        // check output\n        if (outputList.length !== thisOp.node.outputs.length) {\n          throw new Error('the size of output does not match model definition.');\n        }\n\n        // fill value\n        outputList.forEach((output, i) => {\n          const j = thisOp.node.outputs[i];\n          if (this._values[j]) {\n            throw new Error(`output [${j}] already has value: op:${thisOp.node.name}`);\n          }\n          this._values[j] = output;\n        });\n\n        // resolve downstream nodes\n        const downstreamNodes = new Set<number>();\n        outputList.forEach((output, i) => {\n          const j = thisOp.node.outputs[i];\n          for (const currentDownstreamNodeIndex of graphValues[j].to) {\n            const currentDownstreamNode = graphNodes[currentDownstreamNodeIndex];\n            let resolved = true;\n            for (const k of currentDownstreamNode.inputs) {\n              if (!this._values[k]) {\n                resolved = false;\n                break;\n              }\n            }\n            if (resolved) {\n              downstreamNodes.add(currentDownstreamNodeIndex);\n            }\n          }\n        });\n        sequence.push(...downstreamNodes);\n      }\n\n      const output: Tensor[] = [];\n      for (let i = 0; i < this.graph.getOutputIndices().length; i++) {\n        const outputIndex = this.graph.getOutputIndices()[i];\n        const outputTensor = this._values[outputIndex];\n        if (outputTensor === undefined) {\n          throw new Error(`required output [${outputIndex}] does not have value`);\n        }\n        if (outputIndex === 0) {\n          await outputTensor.getData();\n        } else {\n          // eslint-disable-next-line no-unused-expressions\n          outputTensor.data;\n        }\n        output.push(outputTensor);\n      }\n      Logger.verbose('ExecPlan', 'disposing of inferenceHandler');\n      inferenceHandler.dispose();\n      return output;\n    });\n  }\n\n  _values: Array<Tensor|undefined>;\n  _ops: KernelOp[];\n  _starter: number[];\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from './attribute';\nimport {onnxruntime} from './ort-schema/flatbuffers/ort-generated';\nimport {onnx} from './ort-schema/protobuf/onnx';\nimport {Tensor} from './tensor';\nimport {LongUtil, MAX_CLIP, MIN_CLIP, ProtoUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport declare namespace Graph {\n  export interface Shape {\n    readonly dims: readonly number[];\n  }\n  export interface ValueType {\n    readonly tensorType: Tensor.DataType;\n    readonly shape: Shape;\n  }\n  export interface Value {\n    // the tensor data. empty for non-initialized inputs\n    readonly tensor?: Tensor;\n\n    // index to the Node where the value comes from. -1 for initializer.\n    readonly from: number;\n\n    // indices to the Nodes where the values go to.\n    readonly to: readonly number[];\n\n    // value type specification. empty for non-input values.\n    readonly type?: ValueType;\n  }\n  export interface Node {\n    // name of the node\n    readonly name: string;\n\n    // the operator type\n    readonly opType: string;\n\n    // indices to the Values where the inputs come from.\n    readonly inputs: readonly number[];\n\n    // indices to the Values where the outpus go to.\n    readonly outputs: readonly number[];\n\n    // the attributes that used by the operator\n    readonly attributes: Attribute;\n  }\n\n  /**\n   * a Transformer is an instance that allows all possible transformation operations that applied to a graph\n   */\n  export interface Transformer {\n    removeAllIdentityNodes(): void;\n    removeAllDropoutNodes(): void;\n    fuseConvActivationNodes(): void;\n    // TODO: add generic functions to manipulate the graph\n  }\n\n  // an initializer can use transformer to transform the graph\n  export interface Initializer {\n    transformGraph(transformer: Transformer): void;\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport interface Graph {\n  getInputIndices(): readonly number[];\n  getInputNames(): readonly string[];\n  getOutputIndices(): readonly number[];\n  getOutputNames(): readonly string[];\n  getValues(): readonly Graph.Value[];\n  getNodes(): readonly Graph.Node[];\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention, @typescript-eslint/no-redeclare\nexport const Graph = {\n  /**\n   * construct a graph from a graph protobuf type\n   */\n  from: (graphProto: onnx.IGraphProto|ortFbs.Graph, initializer?: Graph.Initializer) =>\n      new GraphImpl(graphProto, initializer),\n};\n\nclass Value implements Graph.Value {\n  constructor(valueInfo?: onnx.IValueInfoProto) {\n    this._from = undefined;\n    this._to = [];\n    this.tensor = undefined;\n    this.type = undefined;\n\n    if (valueInfo) {\n      this.type = ProtoUtil.tensorValueTypeFromProto(valueInfo.type!.tensorType!);\n    }\n  }\n\n  _from?: number;  // -1 represent from initializer\n  get from() {\n    return this._from!;\n  }\n  _to: number[];\n  get to() {\n    return this._to;\n  }\n  type?: Graph.ValueType;\n  tensor?: Tensor;\n}\n\nclass Node implements Graph.Node {\n  constructor(_nodeProto: onnx.INodeProto|ortFbs.Node, name?: string) {\n    if (_nodeProto instanceof onnx.NodeProto) {\n      this.name = _nodeProto.name;\n      this.opType = _nodeProto.opType;\n      this.attributes = new Attribute(_nodeProto.attribute);\n    } else if (_nodeProto instanceof ortFbs.Node) {\n      this.name = name ?? _nodeProto.name()!;\n      this.opType = _nodeProto.opType()!;\n      this.attributes = new Attribute(ProtoUtil.tensorAttributesFromORTFormat(_nodeProto));\n    }\n\n    this.inputs = [];\n    this.outputs = [];\n    this.executeNode = true;\n  }\n\n  name: string;\n  opType: string;\n  inputs: number[];\n  outputs: number[];\n  attributes: Attribute;\n  executeNode: boolean;\n}\n\nclass GraphImpl implements Graph, Graph.Transformer {\n  private _allData: Value[];\n\n  private _allInputIndices: number[];\n  private _allInputNames: string[];\n\n  private _allOutputIndices: number[];\n  private _allOutputNames: string[];\n\n  private _nodes: Node[];\n\n  constructor(graph: onnx.IGraphProto|ortFbs.Graph, graphInitializer?: Graph.Initializer) {\n    if (!graph) {\n      throw new TypeError('graph is empty');\n    }\n\n    // build the graph - will throw exceptions if something fatal is detected\n    this.buildGraph(graph);\n\n    // execute any transformation logic for the graph (if applicable)\n    this.transformGraph(graphInitializer);\n\n    // check for cycles and other inconsistencies - will throw exceptions if something fatal is detected\n    this.checkIsAcyclic();\n  }\n\n  getInputIndices(): readonly number[] {\n    return this._allInputIndices;\n  }\n\n  getInputNames(): readonly string[] {\n    return this._allInputNames;\n  }\n\n  getOutputIndices(): readonly number[] {\n    return this._allOutputIndices;\n  }\n\n  getOutputNames(): readonly string[] {\n    return this._allOutputNames;\n  }\n\n  getValues(): readonly Graph.Value[] {\n    return this._allData;\n  }\n\n  getNodes(): readonly Graph.Node[] {\n    return this._nodes;\n  }\n\n  private buildGraph(graph: onnx.IGraphProto|ortFbs.Graph) {\n    // build the graph - will throw exceptions if something fatal is detected\n    if (graph instanceof onnx.GraphProto) {\n      this.buildGraphFromOnnxFormat(graph);\n    } else if (graph instanceof ortFbs.Graph) {\n      this.buildGraphFromOrtFormat(graph);\n    } else {\n      throw new TypeError('Graph type is not supported.');\n    }\n  }\n  private buildGraphFromOnnxFormat(graph: onnx.IGraphProto) {\n    const dataIndices = new Map<string, number>();\n    this._allData = [];\n\n    this._allInputIndices = [];\n    this._allInputNames = [];\n\n    this._allOutputIndices = [];\n    this._allOutputNames = [];\n\n    this._nodes = [];\n\n    const nodesIndices = new Map<string, number>();\n\n    // scan all inputs\n    if (!graph.input) {\n      throw new Error('missing information in graph: input');\n    }\n    const inputValueNames = [];\n    for (const i of graph.input) {\n      if (dataIndices.has(i.name!)) {\n        throw new Error(`duplicated input name: ${i.name}`);\n      }\n      const currentIndex = this._allData.push(new Value(i)) - 1;\n      dataIndices.set(i.name!, currentIndex);\n      inputValueNames.push(i.name!);\n    }\n\n    // scan all initializers\n    if (!graph.initializer) {\n      throw new Error('missing information in graph: initializer');\n    }\n    for (const i of graph.initializer) {\n      let index = dataIndices.get(i.name!);\n      if (index === undefined) {\n        const value = new Value();\n        value.type = {\n          shape: {dims: ProtoUtil.tensorDimsFromProto(i.dims!)},\n          tensorType: ProtoUtil.tensorDataTypeFromProto(i.dataType!)\n        };\n        index = this._allData.push(value) - 1;\n        dataIndices.set(i.name!, index);\n      }\n      this._allData[index]._from = -1;\n      this._allData[index].tensor = Tensor.fromProto(i);\n    }\n\n    // filter out input indices\n    for (let i = 0; i < this._allData.length; i++) {\n      if (!this._allData[i].tensor) {\n        this._allInputIndices.push(i);\n        this._allInputNames.push(inputValueNames[i]);\n      }\n    }\n\n    // scan all outputs\n    if (!graph.output) {\n      throw new Error('missing information in graph: output');\n    }\n    for (const i of graph.output) {\n      if (dataIndices.has(i.name!)) {\n        throw new Error(`duplicated output name: ${i.name}`);\n      }\n      const currentIndex = this._allData.push(new Value(i)) - 1;\n      dataIndices.set(i.name!, currentIndex);\n      this._allOutputIndices.push(currentIndex);\n      this._allOutputNames.push(i.name!);\n    }\n\n    // scan all nodes\n    if (!graph.node) {\n      throw new Error('missing information in graph: node');\n    }\n    for (const nodeProto of graph.node) {\n      if (!nodeProto.name) {\n        // assign a name to the node if it doesn't have one\n        for (let pick = 0;; pick++) {\n          const name = `unnamed_${nodeProto.opType}_${pick}`;\n          if (!nodesIndices.has(name)) {\n            nodeProto.name = name;\n            break;\n          }\n        }\n      }\n\n      if (nodesIndices.has(nodeProto.name)) {\n        throw new Error(`duplicated node name: ${nodeProto.name}`);\n      }\n      const currentIndex = this._nodes.push(new Node(nodeProto)) - 1;\n      nodesIndices.set(nodeProto.name, currentIndex);\n    }\n\n    // scan node's outputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.node[i];\n      if (!nodeProto.output) {\n        throw new Error(`missing output for node: ${nodeProto.name}`);\n      }\n      for (const output of nodeProto.output) {\n        let dataIndex = dataIndices.get(output);\n        if (typeof dataIndex === 'undefined') {\n          dataIndex = this._allData.push(new Value()) - 1;\n          dataIndices.set(output, dataIndex);\n        }\n        node.outputs.push(dataIndex);\n\n        if (this._allData[dataIndex]._from !== undefined) {\n          throw new Error(`multiple nodes output to one data value: ${dataIndex}`);\n        }\n        this._allData[dataIndex]._from = i;\n\n        // for the 'Constant' operator, just create a new edge in the graph corresponding to the 'output' of the\n        // operator and ignore the node from the graph\n        if (nodeProto.opType === 'Constant') {\n          if (!nodeProto.attribute || nodeProto.attribute.length !== 1 || !nodeProto.attribute[0].t) {\n            throw new Error('missing attributes or missing tensor value in attributes for this Constant operator');\n          }\n          if (!nodeProto.output || nodeProto.output.length !== 1) {\n            throw new Error('missing output or incorrect number of outputs for this Constant operator');\n          }\n          node.outputs.pop();\n          node.executeNode = false;\n\n          this._allData[dataIndex]._from = -1;\n          this._allData[dataIndex].tensor = Tensor.fromProto(nodeProto.attribute[0].t);\n        }\n      }\n    }\n\n    // scan node's inputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.node[i];\n\n      if (!nodeProto.input) {\n        throw new Error(`missing input for node: ${nodeProto.name}`);\n      }\n      for (const input of nodeProto.input) {\n        const dataIndex = dataIndices.get(input);\n        if (typeof dataIndex === 'undefined') {\n          // handle exception when opset > 9 and roi / scales not given\n          if (input === '' && (nodeProto.input.length === 3 || nodeProto.input.length === 4) &&\n              nodeProto.opType === 'Resize') {\n            continue;\n          }\n          throw new Error(`unrecognized input '${input}' for node: ${nodeProto.name}`);\n        }\n        node.inputs.push(dataIndex);\n\n        this._allData[dataIndex]._to.push(i);\n      }\n    }\n\n    return true;\n  }\n\n  private buildGraphFromOrtFormat(graph: ortFbs.Graph) {\n    const dataIndices = new Map<string, number>();\n    this._allData = [];\n\n    this._allInputIndices = [];\n    this._allInputNames = [];\n\n    this._allOutputIndices = [];\n    this._allOutputNames = [];\n\n    this._nodes = [];\n\n    const nodesIndices = new Map<string, number>();\n\n    // scan all inputs\n    const inputValueNames = [];\n    for (let i = 0; i < graph.inputsLength(); i++) {\n      const inputName = graph.inputs(i);\n      if (dataIndices.has(inputName)) {\n        throw new Error(`duplicated input name: ${inputName}`);\n      }\n      // Find the input typeInfo from nodeargs\n      for (let j = 0; j < graph.nodeArgsLength(); j++) {\n        if (graph.nodeArgs(j)?.name() === inputName) {\n          const value = new Value();\n          const valueType = graph.nodeArgs(j)?.type()?.valueType();\n          if (valueType !== ortFbs.TypeInfoValue.tensor_type) {\n            throw new Error('Unexpected value type for the nodeArg.');\n          }\n          const valueInfo = graph.nodeArgs(j)!.type()!.value(new ortFbs.TensorTypeAndShape())!;\n          const type = ProtoUtil.tensorDataTypeFromProto(valueInfo.elemType());\n          const shape = valueInfo.shape()!;\n          const dims = [];\n          for (let k = 0; k < shape.dimLength()!; k++) {\n            dims.push(LongUtil.longToNumber(shape.dim(k)!.value()!.dimValue()!));\n          }\n          value.type = {shape: {dims}, tensorType: type};\n          const currentIndex = this._allData.push(value) - 1;\n          dataIndices.set(inputName, currentIndex);\n          inputValueNames.push(inputName);\n        }\n      }\n    }\n    // check initializers\n    for (let i = 0; i < graph.initializersLength(); i++) {\n      const initializer = graph.initializers(i)!;\n      let index = dataIndices.get(initializer.name()!);\n      if (index === undefined) {\n        const value = new Value();\n        const dims = ProtoUtil.tensorDimsFromORTFormat(initializer);\n        const type = ProtoUtil.tensorDataTypeFromProto(initializer.dataType());\n        value.type = {shape: {dims}, tensorType: type};\n        index = this._allData.push(value) - 1;\n        dataIndices.set(initializer.name()!, index);\n      }\n      this._allData[index]._from = -1;\n      this._allData[index].tensor = Tensor.fromOrtTensor(initializer);\n    }\n\n    // filter out input indices\n    for (let i = 0; i < this._allData.length; i++) {\n      if (!this._allData[i].tensor) {\n        this._allInputIndices.push(i);\n        this._allInputNames.push(inputValueNames[i]);\n      }\n    }\n\n    // scan all outputs\n    for (let i = 0; i < graph.outputsLength(); i++) {\n      const outputName = graph.outputs(i);\n      if (dataIndices.has(outputName)) {\n        throw new Error(`duplicated output name: ${outputName}`);\n      }\n      const currentIndex = this._allData.push(new Value()) - 1;\n      dataIndices.set(outputName, currentIndex);\n      this._allOutputIndices.push(currentIndex);\n      this._allOutputNames.push(outputName);\n    }\n\n    // scan all nodes\n    if (!graph.nodes) {\n      throw new Error('missing information in graph: node');\n    }\n    for (let i = 0; i < graph.nodesLength(); i++) {\n      const nodeProto = graph.nodes(i);\n      let name = nodeProto!.name();\n      if (!name) {\n        // assign a name to the node if it doesn't have one\n        for (let pick = 0;; pick++) {\n          name = `unnamed_${nodeProto!.opType()}_${pick}`;\n          if (!nodesIndices.has(name)) {\n            // an unique name is found. break.\n            break;\n          }\n        }\n      }\n\n      if (nodesIndices.has(name)) {\n        throw new Error(`duplicated node name: ${name}`);\n      }\n      const currentIndex = this._nodes.push(new Node(nodeProto!, name)) - 1;\n      nodesIndices.set(name, currentIndex);\n    }\n\n    // scan node's outputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.nodes(i);\n      if (nodeProto == null) {\n        throw new Error(`No node exists at index ${i}`);\n      }\n      if (nodeProto?.outputsLength() === 0) {\n        throw new Error(`missing output for node: ${nodeProto.name}`);\n      }\n      for (let j = 0; j < nodeProto?.outputsLength(); j++) {\n        const output = nodeProto?.outputs(j);\n        let dataIndex = dataIndices.get(output);\n        if (typeof dataIndex === 'undefined') {\n          dataIndex = this._allData.push(new Value()) - 1;\n          dataIndices.set(output, dataIndex);\n        }\n        node.outputs.push(dataIndex);\n\n        if (this._allData[dataIndex]._from !== undefined) {\n          throw new Error(`multiple nodes output to one data value: ${dataIndex}`);\n        }\n        this._allData[dataIndex]._from = i;\n\n        // for the 'Constant' operator, just create a new edge in the graph corresponding to the 'output' of the\n        // operator and ignore the node from the graph\n        if (nodeProto.opType() === 'Constant') {\n          if (nodeProto.attributesLength() !== 1 || !nodeProto.attributes(0)!.t()) {\n            throw new Error('missing attributes or missing tensor value in attributes for this Constant operator');\n          }\n          if (nodeProto.outputsLength() !== 1) {\n            throw new Error('missing output or incorrect number of outputs for this Constant operator');\n          }\n          node.outputs.pop();\n          node.executeNode = false;\n\n          this._allData[dataIndex]._from = -1;\n          this._allData[dataIndex].tensor = Tensor.fromOrtTensor(nodeProto.attributes(0)!.t()!);\n        }\n      }\n    }\n\n    // scan node's inputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.nodes(i)!;\n\n      if (nodeProto.inputsLength() === 0) {\n        throw new Error(`missing input for node: ${nodeProto.name}`);\n      }\n      for (let j = 0; j < nodeProto.inputsLength()!; j++) {\n        const input = nodeProto.inputs(j)!;\n        const dataIndex = dataIndices.get(input);\n        if (typeof dataIndex === 'undefined') {\n          throw new Error(`unrecognized input '${input}' for node: ${nodeProto!.name()}`);\n        }\n        node.inputs.push(dataIndex);\n\n        this._allData[dataIndex]._to.push(i);\n      }\n    }\n  }\n\n  private checkIsAcyclic() {\n    // go through the graph and check for cycles or other fatal inconsistencies\n    const starters: Set<number> = new Set<number>();\n    this._allInputIndices.forEach(i => {\n      const data = this._allData[i];\n      data._to.forEach(j => {\n        starters.add(j);\n      });\n    });\n\n    // Iterative DFS to check for cycles\n    const nodesStack = Array.from(starters);\n    const nodesState = new Array<string>(this._nodes.length).fill('white');\n\n    while (nodesStack.length > 0) {\n      const nodeIndex = nodesStack.pop()!;\n      // this node has now been processed completely. Mark this node 'black' to denote this.\n      if (nodesState[nodeIndex] === 'gray') {\n        nodesState[nodeIndex] = 'black';\n      } else {\n        // this node is under processing stage. mark this node 'gray' to denote this.\n        nodesStack.push(nodeIndex);\n        nodesState[nodeIndex] = 'gray';\n\n        this._nodes[nodeIndex].outputs.forEach((outgoingEdgeIndex) => {\n          const data = this._allData[outgoingEdgeIndex];\n          if (typeof data.tensor !== 'undefined') {\n            throw new Error('node outputs should not be initialized');\n          }\n          if (data._from !== nodeIndex) {\n            throw new Error('from property of the Value object doesn\\'t match index of Node being processed');\n          }\n          data._to.forEach((downstreamNodeIndex) => {\n            // back edge found - cyclic\n            if (nodesState[downstreamNodeIndex] === 'gray') {\n              throw new Error('model graph is cyclic');\n            }\n            // tree edge found - continue processing by adding it to stack\n            else if (nodesState[downstreamNodeIndex] === 'white') {\n              nodesStack.push(downstreamNodeIndex);\n            }\n          });\n        });\n      }\n    }\n  }\n\n  private transformGraph(graphInitializer?: Graph.Initializer): void {\n    // apply common transform\n    this.removeAllIdentityNodes();\n    this.removeAllDropoutNodes();\n    this.fuseConvActivationNodes();\n    // apply initializer specific transform\n    if (graphInitializer) {\n      graphInitializer.transformGraph(this);\n    }\n\n    // finalize graph\n    this.finalizeGraph();\n  }\n\n  /**\n   * finalize the graph.\n   *\n   * this function should be called after all the transformation completed.\n   * this function removes all unnecessary nodes and values from the graph\n   */\n  finalizeGraph() {\n    let offset = 0;\n    // delete all nodes that are not being executed\n    // The graph is represented using these two arrays\n    // this._nodes - Array holding the kernels to execute - each entry is a kernel pointing to this._allData\n    // this._allData - hold 2 fields - to [] & from - these feileds hold the graph map for inputs and outputs per node\n    // newIndices - remapping the graph after reading the flag 'executeNode'\n    const newIndices = new Array<number>(this._nodes.length, 0);\n    let nodePossition = 0;\n\n    for (let i = 0; i < this._nodes.length; i++) {\n      // giving new indexes to the nodes based on execution flag\n      newIndices[i] = nodePossition;\n      if (this._nodes[i].executeNode) {\n        if (nodePossition !== i) {\n          this._nodes[nodePossition] = this._nodes[i];\n        }\n        nodePossition++;\n\n      } else {\n        // delete all output values\n        this._nodes[i].outputs.forEach(ind => {\n          this._allData[ind]._from = -2;\n        });\n      }\n    }\n\n    // removing the unused nodes\n    this._nodes.splice(nodePossition, this._nodes.length - nodePossition);\n\n    // Updating this._allData according to the new this._nodes\n    for (let i = 0; i < this._allData.length; i++) {\n      const currentData = this._allData[i];\n      if (currentData._from !== undefined && currentData._from !== -1 && currentData._from !== -2) {\n        currentData._from = newIndices[currentData._from];\n      }\n\n      for (let j = 0; j < currentData._to.length; j++) {\n        if (currentData._to[j] >= 0) {\n          currentData._to[j] = newIndices[currentData._to[j]];\n        } else {\n          throw new Error('Trying to update a removed node');\n        }\n      }\n    }\n\n    offset = 0;\n    // delete all values that are not being referenced\n    for (let i = 0; i < this._allData.length; i++) {\n      // if current value is neither linked to next node, nor an output value, remove it.\n      if (this._allData[i].from === -2 && this._allOutputIndices.indexOf(i + offset) === -1) {\n        offset++;\n        this._allData.splice(i, 1);\n        i--;\n        continue;\n      }\n      if (offset > 0) {\n        let ind = -1;\n        // if current value is neither an input value nor an initializer, find the node it's\n        // coming from and update the corresponding node output\n        if (this._allData[i].from !== undefined && this._allData[i].from !== -1) {\n          ind = this._nodes[this._allData[i].from].outputs.indexOf(i + offset);\n          if (ind !== -1) {\n            this._nodes[this._allData[i].from].outputs[ind] = i;\n          }\n        } else {\n          // if current value is an input value, update its reference in inputIndices\n          ind = this._allInputIndices.indexOf(i + offset);\n          if (ind !== -1) {\n            this._allInputIndices[ind] = i;\n          }\n        }\n\n        // find the node that the current value is linking to and update its input reference\n        this._allData[i].to.forEach(node => {\n          ind = this._nodes[node].inputs.indexOf(i + offset);\n          if (ind !== -1) {\n            this._nodes[node].inputs[ind] = i;\n          }\n        });\n        if (this._allData[i].to.length === 0) {\n          // if current value is a graph output, update its reference in outputIndices\n          ind = this._allOutputIndices.indexOf(i + offset);\n          if (ind !== -1) {\n            this._allOutputIndices[ind] = i;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Delete the specifed node. Assume the node has one incoming input and the first output connected to other nodes.\n   * An input validation must be done before calling this function.\n   * @param nodeIndex The index of node to be deleted\n   */\n  private deleteNode(nodeIndex: number) {\n    const node = this._nodes[nodeIndex];\n    if (node.outputs.length > 1) {\n      for (let i = 1; i < node.outputs.length; i++) {\n        if (this._allData[node.outputs[i]].to.length > 0) {\n          throw new Error('Node deletion with more than one output connected to other nodes is not supported. ');\n        }\n      }\n    }\n\n    // this node wil not be executed\n    node.executeNode = false;\n    const inputValueIndex = node.inputs[0];\n    const outputValueIndex = node.outputs[0];\n    const nodesConsumingOutput = this._allData[outputValueIndex].to;\n\n    // remove this node from the to property of the input Value\n    for (let i = 0; i < node.inputs.length; i++) {\n      const delIndex = this._allData[node.inputs[i]].to.indexOf(nodeIndex);\n      // should not happen\n      if (delIndex === -1) {\n        throw new Error('The Value object doesn\\'t have the current Node in it\\'s \\'to\\' property ');\n      }\n      this._allData[node.inputs[i]].to.splice(delIndex, 1);\n    }\n\n    // clear node indices consuming this output Value\n    this._allData[outputValueIndex]._to = [];\n\n    // if the output of this node is a graph output, adjust the index appropriately\n    const index = this._allOutputIndices.indexOf(outputValueIndex);\n    if (index !== -1) {\n      this._allOutputIndices[index] = inputValueIndex;\n    }\n\n    // override the inputs for nodes consuming this node's output with the input to this node\n    if (nodesConsumingOutput && nodesConsumingOutput.length > 0) {\n      for (const nodeIndex of nodesConsumingOutput) {\n        const replaceIndex = this._nodes[nodeIndex].inputs.indexOf(outputValueIndex);\n        // should not happen\n        if (replaceIndex === -1) {\n          throw new Error('The Node object doesn\\'t have the output Value in it\\'s \\'inputs\\' property ');\n        }\n        this._nodes[nodeIndex].inputs[replaceIndex] = inputValueIndex;\n        this._allData[inputValueIndex].to.push(nodeIndex);\n      }\n    }\n  }\n\n  removeAllDropoutNodes() {\n    let nodeIndex = 0;\n    for (const node of this._nodes) {\n      // weed out 'Dropout' nodes so that no time is wasted in execution\n      if (node.opType === 'Dropout') {\n        // the node should have exactly 1 input and 1 or 2 outputs\n        if (node.inputs.length !== 1) {\n          throw new Error('Dropout nodes should only contain one input. ');\n        }\n        if (node.outputs.length !== 1 && node.outputs.length !== 2) {\n          throw new Error('Dropout nodes should contain either 1 or 2 output(s)');\n        }\n        // the second output should not be referenced by any other node\n        if (node.outputs.length === 2 && this._allData[node.outputs[1]]._to.length !== 0) {\n          throw new Error('Dropout nodes\\'s second output should not be referenced by other nodes');\n        }\n        this.deleteNode(nodeIndex);\n      }\n      nodeIndex++;\n    }\n  }\n\n  removeAllIdentityNodes() {\n    let nodeIndex = 0;\n    for (const node of this._nodes) {\n      // weed out 'Identity' nodes so that no time is wasted in execution\n      if (node.opType === 'Identity') {\n        this.deleteNode(nodeIndex);\n      }\n      nodeIndex++;\n    }\n  }\n\n  isActivation(n: Node): boolean {\n    switch (n.opType) {\n      // TODO: add other activation methods\n      case 'Relu':\n      case 'Sigmoid':\n      case 'Clip':\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  fuseConvActivationNodes() {\n    for (const node of this._nodes) {\n      if (node.opType === 'Conv') {\n        const next = this._allData[node.outputs[0]]._to;\n        if (next.length === 1 && this.isActivation(this._nodes[next[0]])) {\n          const child = this._nodes[next[0]];\n          if (child.opType === 'Clip') {\n            if (child.inputs.length === 1) {\n              try {\n                node.attributes.set(\n                    'activation_params', 'floats',\n                    [child.attributes.getFloat('min'), child.attributes.getFloat('max')]);\n              } catch (e) {\n                node.attributes.set('activation_params', 'floats', [MIN_CLIP, MAX_CLIP]);\n              }\n            } else if (\n                child.inputs.length >= 3 && this._allData[child.inputs[1]].tensor !== undefined &&\n                this._allData[child.inputs[2]].tensor !== undefined) {\n              node.attributes.set('activation_params', 'floats', [\n                this._allData[child.inputs[1]].tensor!.floatData[0], this._allData[child.inputs[2]].tensor!.floatData[0]\n              ]);\n            } else {\n              // Skip fusion with clip node since clip min and clip max are not coming from initializer\n              continue;\n            }\n          }\n          node.attributes.set('activation', 'string', (child.opType));\n          this.deleteNode(next[0]);\n        }\n      }\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Env} from 'onnxruntime-common';\n\nimport {WebGLContext} from './backends/webgl/webgl-context';\n\nexport declare namespace Logger {\n  export interface SeverityTypeMap {\n    verbose: 'v';\n    info: 'i';\n    warning: 'w';\n    error: 'e';\n    fatal: 'f';\n  }\n\n  export type Severity = keyof SeverityTypeMap;\n\n  export type Provider = 'none'|'console';\n\n  /**\n   * Logging config that used to control the behavior of logger\n   */\n  export interface Config {\n    /**\n     * Specify the logging provider. 'console' by default\n     */\n    provider?: Provider;\n    /**\n     * Specify the minimal logger serverity. 'warning' by default\n     */\n    minimalSeverity?: Logger.Severity;\n    /**\n     * Whether to output date time in log. true by default\n     */\n    logDateTime?: boolean;\n    /**\n     * Whether to output source information (Not yet supported). false by default\n     */\n    logSourceLocation?: boolean;\n  }\n\n  export interface CategorizedLogger {\n    verbose(content: string): void;\n    info(content: string): void;\n    warning(content: string): void;\n    error(content: string): void;\n    fatal(content: string): void;\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport interface Logger {\n  (category: string): Logger.CategorizedLogger;\n\n  verbose(content: string): void;\n  verbose(category: string, content: string): void;\n  info(content: string): void;\n  info(category: string, content: string): void;\n  warning(content: string): void;\n  warning(category: string, content: string): void;\n  error(content: string): void;\n  error(category: string, content: string): void;\n  fatal(content: string): void;\n  fatal(category: string, content: string): void;\n\n  /**\n   * Reset the logger configuration.\n   * @param config specify an optional default config\n   */\n  reset(config?: Logger.Config): void;\n  /**\n   * Set the logger's behavior on the given category\n   * @param category specify a category string. If '*' is specified, all previous configuration will be overwritten. If\n   * '' is specified, the default behavior will be updated.\n   * @param config the config object to indicate the logger's behavior\n   */\n  set(category: string, config: Logger.Config): void;\n\n  /**\n   * Set the logger's behavior from ort-common env\n   * @param env the env used to set logger. Currently only setting loglevel is supported through Env.\n   */\n  setWithEnv(env: Env): void;\n}\n\ninterface LoggerProvider {\n  log(severity: Logger.Severity, content: string, category?: string): void;\n}\nclass NoOpLoggerProvider implements LoggerProvider {\n  log(_severity: Logger.Severity, _content: string, _category?: string) {\n    // do nothing\n  }\n}\nclass ConsoleLoggerProvider implements LoggerProvider {\n  log(severity: Logger.Severity, content: string, category?: string) {\n    // eslint-disable-next-line no-console\n    console.log(`${this.color(severity)} ${category ? '\\x1b[35m' + category + '\\x1b[0m ' : ''}${content}`);\n  }\n\n  private color(severity: Logger.Severity) {\n    switch (severity) {\n      case 'verbose':\n        return '\\x1b[34;40mv\\x1b[0m';\n      case 'info':\n        return '\\x1b[32mi\\x1b[0m';\n      case 'warning':\n        return '\\x1b[30;43mw\\x1b[0m';\n      case 'error':\n        return '\\x1b[31;40me\\x1b[0m';\n      case 'fatal':\n        return '\\x1b[101mf\\x1b[0m';\n      default:\n        throw new Error(`unsupported severity: ${severity}`);\n    }\n  }\n}\n\nconst SEVERITY_VALUE = {\n  verbose: 1000,\n  info: 2000,\n  warning: 4000,\n  error: 5000,\n  fatal: 6000\n};\n\nconst LOGGER_PROVIDER_MAP: {readonly [provider: string]: Readonly<LoggerProvider>} = {\n  ['none']: new NoOpLoggerProvider(),\n  ['console']: new ConsoleLoggerProvider()\n};\nconst LOGGER_DEFAULT_CONFIG = {\n  provider: 'console',\n  minimalSeverity: 'warning',\n  logDateTime: true,\n  logSourceLocation: false\n};\nlet LOGGER_CONFIG_MAP:\n    {[category: string]: Readonly<Required<Logger.Config>>} = {['']: LOGGER_DEFAULT_CONFIG as Required<Logger.Config>};\n\nfunction log(category: string): Logger.CategorizedLogger;\nfunction log(severity: Logger.Severity, content: string): void;\nfunction log(severity: Logger.Severity, category: string, content: string): void;\nfunction log(severity: Logger.Severity, arg1: string, arg2?: string): void;\nfunction log(\n    arg0: string|Logger.Severity, arg1?: string, arg2?: string|number, arg3?: number): Logger.CategorizedLogger|void {\n  if (arg1 === undefined) {\n    // log(category: string): Logger.CategorizedLogger;\n    return createCategorizedLogger(arg0);\n  } else if (arg2 === undefined) {\n    // log(severity, content);\n    logInternal(arg0 as Logger.Severity, arg1, 1);\n  } else if (typeof arg2 === 'number' && arg3 === undefined) {\n    // log(severity, content, stack)\n    logInternal(arg0 as Logger.Severity, arg1, arg2);\n  } else if (typeof arg2 === 'string' && arg3 === undefined) {\n    // log(severity, category, content)\n    logInternal(arg0 as Logger.Severity, arg2, 1, arg1);\n  } else if (typeof arg2 === 'string' && typeof arg3 === 'number') {\n    // log(severity, category, content, stack)\n    logInternal(arg0 as Logger.Severity, arg2, arg3, arg1);\n  } else {\n    throw new TypeError('input is valid');\n  }\n}\n\nfunction createCategorizedLogger(category: string): Logger.CategorizedLogger {\n  return {\n    verbose: log.verbose.bind(null, category),\n    info: log.info.bind(null, category),\n    warning: log.warning.bind(null, category),\n    error: log.error.bind(null, category),\n    fatal: log.fatal.bind(null, category)\n  };\n}\n\n// NOTE: argument 'category' is put the last parameter beacause typescript\n// doesn't allow optional argument put in front of required argument. This\n// order is different from a usual logging API.\nfunction logInternal(severity: Logger.Severity, content: string, stack: number, category?: string) {\n  const config = LOGGER_CONFIG_MAP[category || ''] || LOGGER_CONFIG_MAP[''];\n  if (SEVERITY_VALUE[severity] < SEVERITY_VALUE[config.minimalSeverity]) {\n    return;\n  }\n\n  if (config.logDateTime) {\n    content = `${new Date().toISOString()}|${content}`;\n  }\n\n  if (config.logSourceLocation) {\n    // TODO: calculate source location from 'stack'\n  }\n\n  LOGGER_PROVIDER_MAP[config.provider].log(severity, content, category);\n}\n\n// eslint-disable-next-line @typescript-eslint/no-namespace\nnamespace log {\n  export function verbose(content: string): void;\n  export function verbose(category: string, content: string): void;\n  export function verbose(arg0: string, arg1?: string) {\n    log('verbose', arg0, arg1);\n  }\n  export function info(content: string): void;\n  export function info(category: string, content: string): void;\n  export function info(arg0: string, arg1?: string) {\n    log('info', arg0, arg1);\n  }\n  export function warning(content: string): void;\n  export function warning(category: string, content: string): void;\n  export function warning(arg0: string, arg1?: string) {\n    log('warning', arg0, arg1);\n  }\n  export function error(content: string): void;\n  export function error(category: string, content: string): void;\n  export function error(arg0: string, arg1?: string) {\n    log('error', arg0, arg1);\n  }\n  export function fatal(content: string): void;\n  export function fatal(category: string, content: string): void;\n  export function fatal(arg0: string, arg1?: string) {\n    log('fatal', arg0, arg1);\n  }\n\n  export function reset(config?: Logger.Config): void {\n    LOGGER_CONFIG_MAP = {};\n    set('', config || {});\n  }\n  export function set(category: string, config: Logger.Config): void {\n    if (category === '*') {\n      reset(config);\n    } else {\n      const previousConfig = LOGGER_CONFIG_MAP[category] || LOGGER_DEFAULT_CONFIG;\n      LOGGER_CONFIG_MAP[category] = {\n        provider: config.provider || previousConfig.provider,\n        minimalSeverity: config.minimalSeverity || previousConfig.minimalSeverity,\n        logDateTime: (config.logDateTime === undefined) ? previousConfig.logDateTime : config.logDateTime,\n        logSourceLocation: (config.logSourceLocation === undefined) ? previousConfig.logSourceLocation :\n                                                                      config.logSourceLocation\n      };\n    }\n\n    // TODO: we want to support wildcard or regex?\n  }\n\n  export function setWithEnv(env: Env): void {\n    const config: Logger.Config = {};\n    if (env.logLevel) {\n      config.minimalSeverity = env.logLevel as Logger.Severity;\n    }\n    set('', config);\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare, @typescript-eslint/naming-convention\nexport const Logger: Logger = log;\n\nexport declare namespace Profiler {\n  export interface Config {\n    maxNumberEvents?: number;\n    flushBatchSize?: number;\n    flushIntervalInMilliseconds?: number;\n  }\n\n  export type EventCategory = 'session'|'node'|'op'|'backend';\n\n  export interface Event {\n    end(): void|Promise<void>;\n  }\n}\n// TODO\n// class WebGLEvent implements Profiler.Event {}\n\nclass Event implements Profiler.Event {\n  constructor(\n      public category: Profiler.EventCategory, public name: string, public startTime: number,\n      private endCallback: (e: Event) => void|Promise<void>, public timer?: WebGLQuery, public ctx?: WebGLContext) {}\n\n  async end() {\n    return this.endCallback(this);\n  }\n\n  async checkTimer(): Promise<number> {\n    if (this.ctx === undefined || this.timer === undefined) {\n      throw new Error('No webgl timer found');\n    } else {\n      this.ctx.endTimer();\n      return this.ctx.waitForQueryAndGetTime(this.timer);\n    }\n  }\n}\n\nclass EventRecord {\n  constructor(\n      public category: Profiler.EventCategory, public name: string, public startTime: number, public endTime: number) {}\n}\n\nexport class Profiler {\n  static create(config?: Profiler.Config): Profiler {\n    if (config === undefined) {\n      return new this();\n    }\n    return new this(config.maxNumberEvents, config.flushBatchSize, config.flushIntervalInMilliseconds);\n  }\n\n  private constructor(maxNumberEvents?: number, flushBatchSize?: number, flushIntervalInMilliseconds?: number) {\n    this._started = false;\n    this._maxNumberEvents = maxNumberEvents === undefined ? 10000 : maxNumberEvents;\n    this._flushBatchSize = flushBatchSize === undefined ? 10 : flushBatchSize;\n    this._flushIntervalInMilliseconds = flushIntervalInMilliseconds === undefined ? 5000 : flushIntervalInMilliseconds;\n  }\n\n  // start profiling\n  start() {\n    this._started = true;\n    this._timingEvents = [];\n    this._flushTime = now();\n    this._flushPointer = 0;\n  }\n\n  // stop profiling\n  stop() {\n    this._started = false;\n    for (; this._flushPointer < this._timingEvents.length; this._flushPointer++) {\n      this.logOneEvent(this._timingEvents[this._flushPointer]);\n    }\n  }\n\n  // create an event scope for the specific function\n  event<T>(category: Profiler.EventCategory, name: string, func: () => T, ctx?: WebGLContext): T;\n  event<T>(category: Profiler.EventCategory, name: string, func: () => Promise<T>, ctx?: WebGLContext): Promise<T>;\n\n  event<T>(category: Profiler.EventCategory, name: string, func: () => T | Promise<T>, ctx?: WebGLContext): T\n      |Promise<T> {\n    const event = this._started ? this.begin(category, name, ctx) : undefined;\n    let isPromise = false;\n\n    const res = func();\n\n    // we consider a then-able object is a promise\n    if (res && typeof (res as Promise<T>).then === 'function') {\n      isPromise = true;\n      return new Promise<T>((resolve, reject) => {\n        (res as Promise<T>)\n            .then(\n                async value => {  // fulfilled\n                  if (event) {\n                    await event.end();\n                  }\n                  resolve(value);\n                },\n                async reason => {  // rejected\n                  if (event) {\n                    await event.end();\n                  }\n                  reject(reason);\n                });\n      });\n    }\n    if (!isPromise && event) {\n      const eventRes = event.end();\n      if (eventRes && typeof eventRes.then === 'function') {\n        return new Promise<T>((resolve, reject) => {\n          (eventRes).then(\n              () => {  // fulfilled\n                resolve(res);\n              },\n              (reason) => {  // rejected\n                reject(reason);\n              });\n        });\n      }\n    }\n    return res;\n  }\n\n  // begin an event\n  begin(category: Profiler.EventCategory, name: string, ctx?: WebGLContext): Event {\n    if (!this._started) {\n      throw new Error('profiler is not started yet');\n    }\n    if (ctx === undefined) {\n      const startTime = now();\n      this.flush(startTime);\n      return new Event(category, name, startTime, e => this.endSync(e));\n    } else {\n      const timer: WebGLQuery = ctx.beginTimer();\n      return new Event(category, name, 0, async e => this.end(e), timer, ctx);\n    }\n  }\n\n  // end the specific event\n  private async end(event: Event): Promise<void> {\n    const endTime: number = await event.checkTimer();\n    if (this._timingEvents.length < this._maxNumberEvents) {\n      this._timingEvents.push(new EventRecord(event.category, event.name, event.startTime, endTime));\n      this.flush(endTime);\n    }\n  }\n\n  private endSync(event: Event): void {\n    const endTime: number = now();\n    if (this._timingEvents.length < this._maxNumberEvents) {\n      this._timingEvents.push(new EventRecord(event.category, event.name, event.startTime, endTime));\n      this.flush(endTime);\n    }\n  }\n\n  private logOneEvent(event: EventRecord) {\n    Logger.verbose(\n        `Profiler.${event.category}`,\n        `${(event.endTime - event.startTime).toFixed(2)}ms on event '${event.name}' at ${event.endTime.toFixed(2)}`);\n  }\n\n  private flush(currentTime: number) {\n    if (this._timingEvents.length - this._flushPointer >= this._flushBatchSize ||\n        currentTime - this._flushTime >= this._flushIntervalInMilliseconds) {\n      // should flush when either batch size accumlated or interval elepsed\n\n      for (const previousPointer = this._flushPointer; this._flushPointer < previousPointer + this._flushBatchSize &&\n           this._flushPointer < this._timingEvents.length;\n           this._flushPointer++) {\n        this.logOneEvent(this._timingEvents[this._flushPointer]);\n      }\n\n      this._flushTime = now();\n    }\n  }\n\n  get started() {\n    return this._started;\n  }\n  private _started = false;\n  private _timingEvents: EventRecord[];\n\n  private readonly _maxNumberEvents: number;\n\n  private readonly _flushBatchSize: number;\n  private readonly _flushIntervalInMilliseconds: number;\n\n  private _flushTime: number;\n  private _flushPointer = 0;\n}\n\n/**\n * returns a number to represent the current timestamp in a resolution as high as possible.\n */\nexport const now = (typeof performance !== 'undefined' && performance.now) ? () => performance.now() : Date.now;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {flatbuffers} from 'flatbuffers';\n\nimport {Graph} from './graph';\nimport {OpSet} from './opset';\nimport {onnxruntime} from './ort-schema/flatbuffers/ort-generated';\nimport {onnx} from './ort-schema/protobuf/onnx';\nimport {LongUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport class Model {\n  // empty model\n  constructor() {}\n\n  load(buf: Uint8Array, graphInitializer?: Graph.Initializer, isOrtFormat?: boolean): void {\n    if (!isOrtFormat) {\n      // isOrtFormat === false || isOrtFormat === undefined\n      try {\n        this.loadFromOnnxFormat(buf, graphInitializer);\n        return;\n      } catch (e) {\n        if (isOrtFormat !== undefined) {\n          throw e;\n        }\n      }\n    }\n\n    this.loadFromOrtFormat(buf, graphInitializer);\n  }\n\n  private loadFromOnnxFormat(buf: Uint8Array, graphInitializer?: Graph.Initializer): void {\n    const modelProto = onnx.ModelProto.decode(buf);\n    const irVersion = LongUtil.longToNumber(modelProto.irVersion);\n    if (irVersion < 3) {\n      throw new Error('only support ONNX model with IR_VERSION>=3');\n    }\n\n    this._opsets =\n        modelProto.opsetImport.map(i => ({domain: i.domain as string, version: LongUtil.longToNumber(i.version!)}));\n\n    this._graph = Graph.from(modelProto.graph!, graphInitializer);\n  }\n\n  private loadFromOrtFormat(buf: Uint8Array, graphInitializer?: Graph.Initializer): void {\n    const fb = new flatbuffers.ByteBuffer(buf);\n    const ortModel = ortFbs.InferenceSession.getRootAsInferenceSession(fb).model()!;\n    const irVersion = LongUtil.longToNumber(ortModel.irVersion());\n    if (irVersion < 3) {\n      throw new Error('only support ONNX model with IR_VERSION>=3');\n    }\n    this._opsets = [];\n    for (let i = 0; i < ortModel.opsetImportLength(); i++) {\n      const opsetId = ortModel.opsetImport(i)!;\n      this._opsets.push({domain: opsetId?.domain() as string, version: LongUtil.longToNumber(opsetId.version()!)});\n    }\n\n    this._graph = Graph.from(ortModel.graph()!, graphInitializer);\n  }\n\n  private _graph: Graph;\n  get graph(): Graph {\n    return this._graph;\n  }\n\n  private _opsets: OpSet[];\n  get opsets(): readonly OpSet[] {\n    return this._opsets;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceHandler} from './backend';\nimport {Graph} from './graph';\nimport {Tensor} from './tensor';\n\nexport type OperatorImplementation<T> = (inferenceHandler: InferenceHandler, inputs: Tensor[], context: T) => Tensor[];\nexport type OperatorInitialization<T> = (node: Graph.Node, graph: Graph) => T;\n\nexport interface Operator {\n  readonly impl: OperatorImplementation<unknown>;\n  readonly context: Graph.Node|unknown;\n}\n\nexport const NUMBER_TYPES: readonly Tensor.DataType[] =\n    ['float32', 'float64', 'int32', 'int16', 'int8', 'uint16', 'uint32', 'uint8'];\nexport const INT_TYPES: readonly Tensor.DataType[] = ['int32', 'int16', 'int8', 'uint16', 'uint32', 'uint8'];\nexport const FLOAT_TYPES: readonly Tensor.DataType[] = ['float32', 'float64'];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from './graph';\nimport {OperatorImplementation, OperatorInitialization} from './operators';\n\nexport interface OpSet {\n  domain: string;\n  version: number;\n}\nexport declare namespace OpSet {\n  /**\n   * Domain of an opset, it can be an empty string(default value, represent for ai.onnx), or 'ai.onnx.ml'\n   */\n  type Domain = ''|'ai.onnx.ml'|'com.microsoft';\n  /**\n   * A resolve rule consists of 4 or 5 items: opType, opSetDomain, versionSelector, operatorImplementation and\n   * operatorInitialization (optional)\n   */\n  type ResolveRule = [\n    string, Domain, string, OperatorImplementation<Graph.Node>\n  ]|[string, Domain, string, OperatorImplementation<unknown>, OperatorInitialization<unknown>];\n}\n\nexport function resolveOperator(node: Graph.Node, opsets: readonly OpSet[], rules: readonly OpSet.ResolveRule[]) {\n  for (const rule of rules) {\n    const opType = rule[0];\n    const domain = rule[1];\n    const versionSelector = rule[2];\n    const opImpl = rule[3];\n    const opInit = rule[4];\n\n    if (node.opType === opType) {  // operator type matches\n      for (const opset of opsets) {\n        // opset '' and 'ai.onnx' are considered the same.\n        if (opset.domain === domain || (opset.domain === 'ai.onnx' && domain === '')) {  // opset domain found\n          if (matchSelector(opset.version, versionSelector)) {\n            return {opImpl, opInit};\n          }\n        }\n      }\n    }\n  }\n\n  throw new TypeError(`cannot resolve operator '${node.opType}' with opsets: ${\n      opsets.map(set => `${set.domain || 'ai.onnx'} v${set.version}`).join(', ')}`);\n}\n\nfunction matchSelector(version: number, selector: string): boolean {\n  if (selector.endsWith('+')) {\n    // minimum version match ('7+' expects version>=7)\n    const rangeStart = Number.parseInt(selector.substring(0, selector.length - 1), 10);\n    return !isNaN(rangeStart) && rangeStart <= version;\n  } else if (selector.split('-').length === 2) {\n    // range match ('6-8' expects 6<=version<=8)\n    const pair = selector.split('-');\n    const rangeStart = Number.parseInt(pair[0], 10);\n    const rangeEnd = Number.parseInt(pair[1], 10);\n    return !isNaN(rangeStart) && !isNaN(rangeEnd) && rangeStart <= version && version <= rangeEnd;\n  } else {\n    // exact match ('7' expects version===7)\n    return Number.parseInt(selector, 10) === version;\n  }\n}\n","// automatically generated by the FlatBuffers compiler, do not modify\n/* eslint-disable */\n\nimport {flatbuffers} from 'flatbuffers';\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum AttributeType {\n    UNDEFINED = 0,\n    FLOAT = 1,\n    INT = 2,\n    STRING = 3,\n    TENSOR = 4,\n    GRAPH = 5,\n    FLOATS = 6,\n    INTS = 7,\n    STRINGS = 8,\n    TENSORS = 9,\n    GRAPHS = 10,\n    SPARSE_TENSOR = 11,\n    SPARSE_TENSORS = 12\n  }\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum DimensionValueType {UNKNOWN = 0, VALUE = 1, PARAM = 2}\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum TensorDataType {\n    UNDEFINED = 0,\n    FLOAT = 1,\n    UINT8 = 2,\n    INT8 = 3,\n    UINT16 = 4,\n    INT16 = 5,\n    INT32 = 6,\n    INT64 = 7,\n    STRING = 8,\n    BOOL = 9,\n    FLOAT16 = 10,\n    DOUBLE = 11,\n    UINT32 = 12,\n    UINT64 = 13,\n    COMPLEX64 = 14,\n    COMPLEX128 = 15,\n    BFLOAT16 = 16,\n    FLOAT8E4M3FN = 17,\n    FLOAT8E4M3FNUZ = 18,\n    FLOAT8E5M2 = 19,\n    FLOAT8E5M2FNUZ = 20,\n  }\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum NodeType {Primitive = 0, Fused = 1}\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum TypeInfoValue {NONE = 0, tensor_type = 1, sequence_type = 2, map_type = 3}\n}\n\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Shape {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Shape\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Shape {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Shape= obj\n     * @returns Shape\n     */\n    static getRootAsShape(bb: flatbuffers.ByteBuffer, obj?: Shape): Shape {\n      return (obj || new Shape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Shape= obj\n     * @returns Shape\n     */\n    static getSizePrefixedRootAsShape(bb: flatbuffers.ByteBuffer, obj?: Shape): Shape {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Shape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Dimension= obj\n     * @returns onnxruntime.experimental.fbs.Dimension\n     */\n    dim(index: number, obj?: onnxruntime.experimental.fbs.Dimension): onnxruntime.experimental.fbs.Dimension|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Dimension())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    dimLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startShape(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimOffset\n     */\n    static addDim(builder: flatbuffers.Builder, dimOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, dimOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createDimVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startDimVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endShape(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createShape(builder: flatbuffers.Builder, dimOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Shape.startShape(builder);\n      Shape.addDim(builder, dimOffset);\n      return Shape.endShape(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Dimension {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Dimension\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Dimension {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Dimension= obj\n     * @returns Dimension\n     */\n    static getRootAsDimension(bb: flatbuffers.ByteBuffer, obj?: Dimension): Dimension {\n      return (obj || new Dimension()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Dimension= obj\n     * @returns Dimension\n     */\n    static getSizePrefixedRootAsDimension(bb: flatbuffers.ByteBuffer, obj?: Dimension): Dimension {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Dimension()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.DimensionValue= obj\n     * @returns onnxruntime.experimental.fbs.DimensionValue|null\n     */\n    value(obj?: onnxruntime.experimental.fbs.DimensionValue): onnxruntime.experimental.fbs.DimensionValue|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.DimensionValue())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    denotation(): string|null;\n    denotation(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    denotation(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startDimension(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valueOffset\n     */\n    static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, valueOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset denotationOffset\n     */\n    static addDenotation(builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, denotationOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endDimension(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createDimension(\n        builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset,\n        denotationOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Dimension.startDimension(builder);\n      Dimension.addValue(builder, valueOffset);\n      Dimension.addDenotation(builder, denotationOffset);\n      return Dimension.endDimension(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class DimensionValue {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns DimensionValue\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): DimensionValue {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param DimensionValue= obj\n     * @returns DimensionValue\n     */\n    static getRootAsDimensionValue(bb: flatbuffers.ByteBuffer, obj?: DimensionValue): DimensionValue {\n      return (obj || new DimensionValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param DimensionValue= obj\n     * @returns DimensionValue\n     */\n    static getSizePrefixedRootAsDimensionValue(bb: flatbuffers.ByteBuffer, obj?: DimensionValue): DimensionValue {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new DimensionValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.DimensionValueType\n     */\n    dimType(): onnxruntime.experimental.fbs.DimensionValueType {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? /**  */ (this.bb!.readInt8(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.DimensionValueType.UNKNOWN;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    dimValue(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    dimParam(): string|null;\n    dimParam(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    dimParam(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startDimensionValue(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.DimensionValueType dimType\n     */\n    static addDimType(builder: flatbuffers.Builder, dimType: onnxruntime.experimental.fbs.DimensionValueType) {\n      builder.addFieldInt8(0, dimType, onnxruntime.experimental.fbs.DimensionValueType.UNKNOWN);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long dimValue\n     */\n    static addDimValue(builder: flatbuffers.Builder, dimValue: flatbuffers.Long) {\n      builder.addFieldInt64(1, dimValue, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimParamOffset\n     */\n    static addDimParam(builder: flatbuffers.Builder, dimParamOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dimParamOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endDimensionValue(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createDimensionValue(\n        builder: flatbuffers.Builder, dimType: onnxruntime.experimental.fbs.DimensionValueType,\n        dimValue: flatbuffers.Long, dimParamOffset: flatbuffers.Offset): flatbuffers.Offset {\n      DimensionValue.startDimensionValue(builder);\n      DimensionValue.addDimType(builder, dimType);\n      DimensionValue.addDimValue(builder, dimValue);\n      DimensionValue.addDimParam(builder, dimParamOffset);\n      return DimensionValue.endDimensionValue(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class TensorTypeAndShape {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns TensorTypeAndShape\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): TensorTypeAndShape {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TensorTypeAndShape= obj\n     * @returns TensorTypeAndShape\n     */\n    static getRootAsTensorTypeAndShape(bb: flatbuffers.ByteBuffer, obj?: TensorTypeAndShape): TensorTypeAndShape {\n      return (obj || new TensorTypeAndShape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TensorTypeAndShape= obj\n     * @returns TensorTypeAndShape\n     */\n    static getSizePrefixedRootAsTensorTypeAndShape(bb: flatbuffers.ByteBuffer, obj?: TensorTypeAndShape):\n        TensorTypeAndShape {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new TensorTypeAndShape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TensorDataType\n     */\n    elemType(): onnxruntime.experimental.fbs.TensorDataType {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Shape= obj\n     * @returns onnxruntime.experimental.fbs.Shape|null\n     */\n    shape(obj?: onnxruntime.experimental.fbs.Shape): onnxruntime.experimental.fbs.Shape|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Shape())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startTensorTypeAndShape(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TensorDataType elemType\n     */\n    static addElemType(builder: flatbuffers.Builder, elemType: onnxruntime.experimental.fbs.TensorDataType) {\n      builder.addFieldInt32(0, elemType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset shapeOffset\n     */\n    static addShape(builder: flatbuffers.Builder, shapeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, shapeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endTensorTypeAndShape(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createTensorTypeAndShape(\n        builder: flatbuffers.Builder, elemType: onnxruntime.experimental.fbs.TensorDataType,\n        shapeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      TensorTypeAndShape.startTensorTypeAndShape(builder);\n      TensorTypeAndShape.addElemType(builder, elemType);\n      TensorTypeAndShape.addShape(builder, shapeOffset);\n      return TensorTypeAndShape.endTensorTypeAndShape(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class MapType {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns MapType\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): MapType {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param MapType= obj\n     * @returns MapType\n     */\n    static getRootAsMapType(bb: flatbuffers.ByteBuffer, obj?: MapType): MapType {\n      return (obj || new MapType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param MapType= obj\n     * @returns MapType\n     */\n    static getSizePrefixedRootAsMapType(bb: flatbuffers.ByteBuffer, obj?: MapType): MapType {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new MapType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TensorDataType\n     */\n    keyType(): onnxruntime.experimental.fbs.TensorDataType {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\n     */\n    valueType(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startMapType(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TensorDataType keyType\n     */\n    static addKeyType(builder: flatbuffers.Builder, keyType: onnxruntime.experimental.fbs.TensorDataType) {\n      builder.addFieldInt32(0, keyType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valueTypeOffset\n     */\n    static addValueType(builder: flatbuffers.Builder, valueTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, valueTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endMapType(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createMapType(\n        builder: flatbuffers.Builder, keyType: onnxruntime.experimental.fbs.TensorDataType,\n        valueTypeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      MapType.startMapType(builder);\n      MapType.addKeyType(builder, keyType);\n      MapType.addValueType(builder, valueTypeOffset);\n      return MapType.endMapType(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SequenceType {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SequenceType\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SequenceType {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SequenceType= obj\n     * @returns SequenceType\n     */\n    static getRootAsSequenceType(bb: flatbuffers.ByteBuffer, obj?: SequenceType): SequenceType {\n      return (obj || new SequenceType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SequenceType= obj\n     * @returns SequenceType\n     */\n    static getSizePrefixedRootAsSequenceType(bb: flatbuffers.ByteBuffer, obj?: SequenceType): SequenceType {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SequenceType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\n     */\n    elemType(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSequenceType(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset elemTypeOffset\n     */\n    static addElemType(builder: flatbuffers.Builder, elemTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, elemTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSequenceType(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createSequenceType(builder: flatbuffers.Builder, elemTypeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SequenceType.startSequenceType(builder);\n      SequenceType.addElemType(builder, elemTypeOffset);\n      return SequenceType.endSequenceType(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class EdgeEnd {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns EdgeEnd\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): EdgeEnd {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeIndex(): number {\n      return this.bb!.readUint32(this.bb_pos);\n    }\n\n    /**\n     * @returns number\n     */\n    srcArgIndex(): number {\n      return this.bb!.readInt32(this.bb_pos + 4);\n    }\n\n    /**\n     * @returns number\n     */\n    dstArgIndex(): number {\n      return this.bb!.readInt32(this.bb_pos + 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number node_index\n     * @param number src_arg_index\n     * @param number dst_arg_index\n     * @returns flatbuffers.Offset\n     */\n    static createEdgeEnd(\n        builder: flatbuffers.Builder, node_index: number, src_arg_index: number,\n        dst_arg_index: number): flatbuffers.Offset {\n      builder.prep(4, 12);\n      builder.writeInt32(dst_arg_index);\n      builder.writeInt32(src_arg_index);\n      builder.writeInt32(node_index);\n      return builder.offset();\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class NodeEdge {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns NodeEdge\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): NodeEdge {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param NodeEdge= obj\n     * @returns NodeEdge\n     */\n    static getRootAsNodeEdge(bb: flatbuffers.ByteBuffer, obj?: NodeEdge): NodeEdge {\n      return (obj || new NodeEdge()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param NodeEdge= obj\n     * @returns NodeEdge\n     */\n    static getSizePrefixedRootAsNodeEdge(bb: flatbuffers.ByteBuffer, obj?: NodeEdge): NodeEdge {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new NodeEdge()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns number\n     */\n    nodeIndex(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.EdgeEnd= obj\n     * @returns onnxruntime.experimental.fbs.EdgeEnd\n     */\n    inputEdges(index: number, obj?: onnxruntime.experimental.fbs.EdgeEnd): onnxruntime.experimental.fbs.EdgeEnd|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.EdgeEnd())\n                          .__init(this.bb!.__vector(this.bb_pos + offset) + index * 12, this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    inputEdgesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.EdgeEnd= obj\n     * @returns onnxruntime.experimental.fbs.EdgeEnd\n     */\n    outputEdges(index: number, obj?: onnxruntime.experimental.fbs.EdgeEnd): onnxruntime.experimental.fbs.EdgeEnd|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.EdgeEnd())\n                          .__init(this.bb!.__vector(this.bb_pos + offset) + index * 12, this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    outputEdgesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startNodeEdge(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number nodeIndex\n     */\n    static addNodeIndex(builder: flatbuffers.Builder, nodeIndex: number) {\n      builder.addFieldInt32(0, nodeIndex, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputEdgesOffset\n     */\n    static addInputEdges(builder: flatbuffers.Builder, inputEdgesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, inputEdgesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputEdgesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(12, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset outputEdgesOffset\n     */\n    static addOutputEdges(builder: flatbuffers.Builder, outputEdgesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, outputEdgesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOutputEdgesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(12, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endNodeEdge(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createNodeEdge(\n        builder: flatbuffers.Builder, nodeIndex: number, inputEdgesOffset: flatbuffers.Offset,\n        outputEdgesOffset: flatbuffers.Offset): flatbuffers.Offset {\n      NodeEdge.startNodeEdge(builder);\n      NodeEdge.addNodeIndex(builder, nodeIndex);\n      NodeEdge.addInputEdges(builder, inputEdgesOffset);\n      NodeEdge.addOutputEdges(builder, outputEdgesOffset);\n      return NodeEdge.endNodeEdge(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Node {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Node\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Node {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Node= obj\n     * @returns Node\n     */\n    static getRootAsNode(bb: flatbuffers.ByteBuffer, obj?: Node): Node {\n      return (obj || new Node()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Node= obj\n     * @returns Node\n     */\n    static getSizePrefixedRootAsNode(bb: flatbuffers.ByteBuffer, obj?: Node): Node {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Node()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    domain(): string|null;\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    domain(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    sinceVersion(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    index(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    opType(): string|null;\n    opType(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    opType(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.NodeType\n     */\n    type(): onnxruntime.experimental.fbs.NodeType {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.NodeType.Primitive;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    executionProviderType(): string|null;\n    executionProviderType(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    executionProviderType(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    inputs(index: number): string;\n    inputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    inputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    inputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    outputs(index: number): string;\n    outputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    outputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    outputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Attribute= obj\n     * @returns onnxruntime.experimental.fbs.Attribute\n     */\n    attributes(index: number, obj?: onnxruntime.experimental.fbs.Attribute): onnxruntime.experimental.fbs.Attribute\n        |null {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Attribute())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    attributesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    inputArgCounts(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    inputArgCountsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Int32Array\n     */\n    inputArgCountsArray(): Int32Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ?\n          new Int32Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    implicitInputs(index: number): string;\n    implicitInputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    implicitInputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    implicitInputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startNode(builder: flatbuffers.Builder) {\n      builder.startObject(13);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset domainOffset\n     */\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, domainOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number sinceVersion\n     */\n    static addSinceVersion(builder: flatbuffers.Builder, sinceVersion: number) {\n      builder.addFieldInt32(3, sinceVersion, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number index\n     */\n    static addIndex(builder: flatbuffers.Builder, index: number) {\n      builder.addFieldInt32(4, index, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset opTypeOffset\n     */\n    static addOpType(builder: flatbuffers.Builder, opTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, opTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.NodeType type\n     */\n    static addType(builder: flatbuffers.Builder, type: onnxruntime.experimental.fbs.NodeType) {\n      builder.addFieldInt32(6, type, onnxruntime.experimental.fbs.NodeType.Primitive);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset executionProviderTypeOffset\n     */\n    static addExecutionProviderType(builder: flatbuffers.Builder, executionProviderTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, executionProviderTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputsOffset\n     */\n    static addInputs(builder: flatbuffers.Builder, inputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(8, inputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset outputsOffset\n     */\n    static addOutputs(builder: flatbuffers.Builder, outputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(9, outputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createOutputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOutputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset attributesOffset\n     */\n    static addAttributes(builder: flatbuffers.Builder, attributesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(10, attributesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createAttributesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startAttributesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputArgCountsOffset\n     */\n    static addInputArgCounts(builder: flatbuffers.Builder, inputArgCountsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(11, inputArgCountsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createInputArgCountsVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputArgCountsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset implicitInputsOffset\n     */\n    static addImplicitInputs(builder: flatbuffers.Builder, implicitInputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(12, implicitInputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createImplicitInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startImplicitInputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endNode(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createNode(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        domainOffset: flatbuffers.Offset, sinceVersion: number, index: number, opTypeOffset: flatbuffers.Offset,\n        type: onnxruntime.experimental.fbs.NodeType, executionProviderTypeOffset: flatbuffers.Offset,\n        inputsOffset: flatbuffers.Offset, outputsOffset: flatbuffers.Offset, attributesOffset: flatbuffers.Offset,\n        inputArgCountsOffset: flatbuffers.Offset, implicitInputsOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Node.startNode(builder);\n      Node.addName(builder, nameOffset);\n      Node.addDocString(builder, docStringOffset);\n      Node.addDomain(builder, domainOffset);\n      Node.addSinceVersion(builder, sinceVersion);\n      Node.addIndex(builder, index);\n      Node.addOpType(builder, opTypeOffset);\n      Node.addType(builder, type);\n      Node.addExecutionProviderType(builder, executionProviderTypeOffset);\n      Node.addInputs(builder, inputsOffset);\n      Node.addOutputs(builder, outputsOffset);\n      Node.addAttributes(builder, attributesOffset);\n      Node.addInputArgCounts(builder, inputArgCountsOffset);\n      Node.addImplicitInputs(builder, implicitInputsOffset);\n      return Node.endNode(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class ValueInfo {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns ValueInfo\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): ValueInfo {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param ValueInfo= obj\n     * @returns ValueInfo\n     */\n    static getRootAsValueInfo(bb: flatbuffers.ByteBuffer, obj?: ValueInfo): ValueInfo {\n      return (obj || new ValueInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param ValueInfo= obj\n     * @returns ValueInfo\n     */\n    static getSizePrefixedRootAsValueInfo(bb: flatbuffers.ByteBuffer, obj?: ValueInfo): ValueInfo {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new ValueInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\n     */\n    type(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startValueInfo(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset typeOffset\n     */\n    static addType(builder: flatbuffers.Builder, typeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, typeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endValueInfo(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createValueInfo(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        typeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      ValueInfo.startValueInfo(builder);\n      ValueInfo.addName(builder, nameOffset);\n      ValueInfo.addDocString(builder, docStringOffset);\n      ValueInfo.addType(builder, typeOffset);\n      return ValueInfo.endValueInfo(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class TypeInfo {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns TypeInfo\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): TypeInfo {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TypeInfo= obj\n     * @returns TypeInfo\n     */\n    static getRootAsTypeInfo(bb: flatbuffers.ByteBuffer, obj?: TypeInfo): TypeInfo {\n      return (obj || new TypeInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TypeInfo= obj\n     * @returns TypeInfo\n     */\n    static getSizePrefixedRootAsTypeInfo(bb: flatbuffers.ByteBuffer, obj?: TypeInfo): TypeInfo {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new TypeInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    denotation(): string|null;\n    denotation(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    denotation(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TypeInfoValue\n     */\n    valueType(): onnxruntime.experimental.fbs.TypeInfoValue {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? /**  */ (this.bb!.readUint8(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TypeInfoValue.NONE;\n    }\n\n    /**\n     * @param flatbuffers.Table obj\n     * @returns ?flatbuffers.Table\n     */\n    value<T extends flatbuffers.Table>(obj: T): T|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startTypeInfo(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset denotationOffset\n     */\n    static addDenotation(builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, denotationOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TypeInfoValue valueType\n     */\n    static addValueType(builder: flatbuffers.Builder, valueType: onnxruntime.experimental.fbs.TypeInfoValue) {\n      builder.addFieldInt8(1, valueType, onnxruntime.experimental.fbs.TypeInfoValue.NONE);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valueOffset\n     */\n    static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, valueOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endTypeInfo(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createTypeInfo(\n        builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset,\n        valueType: onnxruntime.experimental.fbs.TypeInfoValue, valueOffset: flatbuffers.Offset): flatbuffers.Offset {\n      TypeInfo.startTypeInfo(builder);\n      TypeInfo.addDenotation(builder, denotationOffset);\n      TypeInfo.addValueType(builder, valueType);\n      TypeInfo.addValue(builder, valueOffset);\n      return TypeInfo.endTypeInfo(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class OperatorSetId {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns OperatorSetId\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): OperatorSetId {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param OperatorSetId= obj\n     * @returns OperatorSetId\n     */\n    static getRootAsOperatorSetId(bb: flatbuffers.ByteBuffer, obj?: OperatorSetId): OperatorSetId {\n      return (obj || new OperatorSetId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param OperatorSetId= obj\n     * @returns OperatorSetId\n     */\n    static getSizePrefixedRootAsOperatorSetId(bb: flatbuffers.ByteBuffer, obj?: OperatorSetId): OperatorSetId {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new OperatorSetId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    domain(): string|null;\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    domain(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    version(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startOperatorSetId(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset domainOffset\n     */\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, domainOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long version\n     */\n    static addVersion(builder: flatbuffers.Builder, version: flatbuffers.Long) {\n      builder.addFieldInt64(1, version, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endOperatorSetId(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createOperatorSetId(\n        builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset, version: flatbuffers.Long): flatbuffers.Offset {\n      OperatorSetId.startOperatorSetId(builder);\n      OperatorSetId.addDomain(builder, domainOffset);\n      OperatorSetId.addVersion(builder, version);\n      return OperatorSetId.endOperatorSetId(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Tensor {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Tensor\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Tensor {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Tensor= obj\n     * @returns Tensor\n     */\n    static getRootAsTensor(bb: flatbuffers.ByteBuffer, obj?: Tensor): Tensor {\n      return (obj || new Tensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Tensor= obj\n     * @returns Tensor\n     */\n    static getSizePrefixedRootAsTensor(bb: flatbuffers.ByteBuffer, obj?: Tensor): Tensor {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Tensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    dims(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    dimsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TensorDataType\n     */\n    dataType(): onnxruntime.experimental.fbs.TensorDataType {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    rawData(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    rawDataLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Uint8Array\n     */\n    rawDataArray(): Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ?\n          new Uint8Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    stringData(index: number): string;\n    stringData(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    stringData(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    stringDataLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startTensor(builder: flatbuffers.Builder) {\n      builder.startObject(6);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimsOffset\n     */\n    static addDims(builder: flatbuffers.Builder, dimsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dimsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createDimsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startDimsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TensorDataType dataType\n     */\n    static addDataType(builder: flatbuffers.Builder, dataType: onnxruntime.experimental.fbs.TensorDataType) {\n      builder.addFieldInt32(3, dataType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset rawDataOffset\n     */\n    static addRawData(builder: flatbuffers.Builder, rawDataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, rawDataOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createRawDataVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(1, data.length, 1);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt8(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startRawDataVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(1, numElems, 1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset stringDataOffset\n     */\n    static addStringData(builder: flatbuffers.Builder, stringDataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, stringDataOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createStringDataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startStringDataVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endTensor(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createTensor(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        dimsOffset: flatbuffers.Offset, dataType: onnxruntime.experimental.fbs.TensorDataType,\n        rawDataOffset: flatbuffers.Offset, stringDataOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Tensor.startTensor(builder);\n      Tensor.addName(builder, nameOffset);\n      Tensor.addDocString(builder, docStringOffset);\n      Tensor.addDims(builder, dimsOffset);\n      Tensor.addDataType(builder, dataType);\n      Tensor.addRawData(builder, rawDataOffset);\n      Tensor.addStringData(builder, stringDataOffset);\n      return Tensor.endTensor(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SparseTensor {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SparseTensor\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SparseTensor {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SparseTensor= obj\n     * @returns SparseTensor\n     */\n    static getRootAsSparseTensor(bb: flatbuffers.ByteBuffer, obj?: SparseTensor): SparseTensor {\n      return (obj || new SparseTensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SparseTensor= obj\n     * @returns SparseTensor\n     */\n    static getSizePrefixedRootAsSparseTensor(bb: flatbuffers.ByteBuffer, obj?: SparseTensor): SparseTensor {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SparseTensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor|null\n     */\n    values(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor|null\n     */\n    indices(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    dims(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    dimsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSparseTensor(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valuesOffset\n     */\n    static addValues(builder: flatbuffers.Builder, valuesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, valuesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset indicesOffset\n     */\n    static addIndices(builder: flatbuffers.Builder, indicesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, indicesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimsOffset\n     */\n    static addDims(builder: flatbuffers.Builder, dimsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dimsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createDimsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startDimsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSparseTensor(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createSparseTensor(\n        builder: flatbuffers.Builder, valuesOffset: flatbuffers.Offset, indicesOffset: flatbuffers.Offset,\n        dimsOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SparseTensor.startSparseTensor(builder);\n      SparseTensor.addValues(builder, valuesOffset);\n      SparseTensor.addIndices(builder, indicesOffset);\n      SparseTensor.addDims(builder, dimsOffset);\n      return SparseTensor.endSparseTensor(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Attribute {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Attribute\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Attribute {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Attribute= obj\n     * @returns Attribute\n     */\n    static getRootAsAttribute(bb: flatbuffers.ByteBuffer, obj?: Attribute): Attribute {\n      return (obj || new Attribute()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Attribute= obj\n     * @returns Attribute\n     */\n    static getSizePrefixedRootAsAttribute(bb: flatbuffers.ByteBuffer, obj?: Attribute): Attribute {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Attribute()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.AttributeType\n     */\n    type(): onnxruntime.experimental.fbs.AttributeType {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.AttributeType.UNDEFINED;\n    }\n\n    /**\n     * @returns number\n     */\n    f(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    i(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    s(): string|null;\n    s(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    s(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor|null\n     */\n    t(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Graph= obj\n     * @returns onnxruntime.experimental.fbs.Graph|null\n     */\n    g(obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    floats(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.readFloat32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    floatsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Float32Array\n     */\n    floatsArray(): Float32Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ?\n          new Float32Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    ints(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    intsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    strings(index: number): string;\n    strings(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    strings(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    stringsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor\n     */\n    tensors(index: number, obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    tensorsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Graph= obj\n     * @returns onnxruntime.experimental.fbs.Graph\n     */\n    graphs(index: number, obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    graphsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startAttribute(builder: flatbuffers.Builder) {\n      builder.startObject(13);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.AttributeType type\n     */\n    static addType(builder: flatbuffers.Builder, type: onnxruntime.experimental.fbs.AttributeType) {\n      builder.addFieldInt32(2, type, onnxruntime.experimental.fbs.AttributeType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number f\n     */\n    static addF(builder: flatbuffers.Builder, f: number) {\n      builder.addFieldFloat32(3, f, 0.0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long i\n     */\n    static addI(builder: flatbuffers.Builder, i: flatbuffers.Long) {\n      builder.addFieldInt64(4, i, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sOffset\n     */\n    static addS(builder: flatbuffers.Builder, sOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, sOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset tOffset\n     */\n    static addT(builder: flatbuffers.Builder, tOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, tOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset gOffset\n     */\n    static addG(builder: flatbuffers.Builder, gOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, gOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset floatsOffset\n     */\n    static addFloats(builder: flatbuffers.Builder, floatsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(8, floatsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createFloatsVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addFloat32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startFloatsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset intsOffset\n     */\n    static addInts(builder: flatbuffers.Builder, intsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(9, intsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createIntsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startIntsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset stringsOffset\n     */\n    static addStrings(builder: flatbuffers.Builder, stringsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(10, stringsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createStringsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startStringsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset tensorsOffset\n     */\n    static addTensors(builder: flatbuffers.Builder, tensorsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(11, tensorsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createTensorsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startTensorsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphsOffset\n     */\n    static addGraphs(builder: flatbuffers.Builder, graphsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(12, graphsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createGraphsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startGraphsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endAttribute(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createAttribute(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        type: onnxruntime.experimental.fbs.AttributeType, f: number, i: flatbuffers.Long, sOffset: flatbuffers.Offset,\n        tOffset: flatbuffers.Offset, gOffset: flatbuffers.Offset, floatsOffset: flatbuffers.Offset,\n        intsOffset: flatbuffers.Offset, stringsOffset: flatbuffers.Offset, tensorsOffset: flatbuffers.Offset,\n        graphsOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Attribute.startAttribute(builder);\n      Attribute.addName(builder, nameOffset);\n      Attribute.addDocString(builder, docStringOffset);\n      Attribute.addType(builder, type);\n      Attribute.addF(builder, f);\n      Attribute.addI(builder, i);\n      Attribute.addS(builder, sOffset);\n      Attribute.addT(builder, tOffset);\n      Attribute.addG(builder, gOffset);\n      Attribute.addFloats(builder, floatsOffset);\n      Attribute.addInts(builder, intsOffset);\n      Attribute.addStrings(builder, stringsOffset);\n      Attribute.addTensors(builder, tensorsOffset);\n      Attribute.addGraphs(builder, graphsOffset);\n      return Attribute.endAttribute(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Graph {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Graph\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Graph {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Graph= obj\n     * @returns Graph\n     */\n    static getRootAsGraph(bb: flatbuffers.ByteBuffer, obj?: Graph): Graph {\n      return (obj || new Graph()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Graph= obj\n     * @returns Graph\n     */\n    static getSizePrefixedRootAsGraph(bb: flatbuffers.ByteBuffer, obj?: Graph): Graph {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Graph()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor\n     */\n    initializers(index: number, obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    initializersLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.ValueInfo= obj\n     * @returns onnxruntime.experimental.fbs.ValueInfo\n     */\n    nodeArgs(index: number, obj?: onnxruntime.experimental.fbs.ValueInfo): onnxruntime.experimental.fbs.ValueInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.ValueInfo())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeArgsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Node= obj\n     * @returns onnxruntime.experimental.fbs.Node\n     */\n    nodes(index: number, obj?: onnxruntime.experimental.fbs.Node): onnxruntime.experimental.fbs.Node|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Node())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    nodesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    maxNodeIndex(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.NodeEdge= obj\n     * @returns onnxruntime.experimental.fbs.NodeEdge\n     */\n    nodeEdges(index: number, obj?: onnxruntime.experimental.fbs.NodeEdge): onnxruntime.experimental.fbs.NodeEdge|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? (obj || new onnxruntime.experimental.fbs.NodeEdge())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeEdgesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    inputs(index: number): string;\n    inputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    inputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    inputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    outputs(index: number): string;\n    outputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    outputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    outputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.SparseTensor= obj\n     * @returns onnxruntime.experimental.fbs.SparseTensor\n     */\n    sparseInitializers(index: number, obj?: onnxruntime.experimental.fbs.SparseTensor):\n        onnxruntime.experimental.fbs.SparseTensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SparseTensor())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    sparseInitializersLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startGraph(builder: flatbuffers.Builder) {\n      builder.startObject(8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset initializersOffset\n     */\n    static addInitializers(builder: flatbuffers.Builder, initializersOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, initializersOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createInitializersVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInitializersVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodeArgsOffset\n     */\n    static addNodeArgs(builder: flatbuffers.Builder, nodeArgsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, nodeArgsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodeArgsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodeArgsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodesOffset\n     */\n    static addNodes(builder: flatbuffers.Builder, nodesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, nodesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number maxNodeIndex\n     */\n    static addMaxNodeIndex(builder: flatbuffers.Builder, maxNodeIndex: number) {\n      builder.addFieldInt32(3, maxNodeIndex, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodeEdgesOffset\n     */\n    static addNodeEdges(builder: flatbuffers.Builder, nodeEdgesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, nodeEdgesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodeEdgesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodeEdgesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputsOffset\n     */\n    static addInputs(builder: flatbuffers.Builder, inputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, inputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset outputsOffset\n     */\n    static addOutputs(builder: flatbuffers.Builder, outputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, outputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createOutputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOutputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sparseInitializersOffset\n     */\n    static addSparseInitializers(builder: flatbuffers.Builder, sparseInitializersOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, sparseInitializersOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createSparseInitializersVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]):\n        flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startSparseInitializersVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endGraph(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createGraph(\n        builder: flatbuffers.Builder, initializersOffset: flatbuffers.Offset, nodeArgsOffset: flatbuffers.Offset,\n        nodesOffset: flatbuffers.Offset, maxNodeIndex: number, nodeEdgesOffset: flatbuffers.Offset,\n        inputsOffset: flatbuffers.Offset, outputsOffset: flatbuffers.Offset,\n        sparseInitializersOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Graph.startGraph(builder);\n      Graph.addInitializers(builder, initializersOffset);\n      Graph.addNodeArgs(builder, nodeArgsOffset);\n      Graph.addNodes(builder, nodesOffset);\n      Graph.addMaxNodeIndex(builder, maxNodeIndex);\n      Graph.addNodeEdges(builder, nodeEdgesOffset);\n      Graph.addInputs(builder, inputsOffset);\n      Graph.addOutputs(builder, outputsOffset);\n      Graph.addSparseInitializers(builder, sparseInitializersOffset);\n      return Graph.endGraph(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Model {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Model\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Model {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Model= obj\n     * @returns Model\n     */\n    static getRootAsModel(bb: flatbuffers.ByteBuffer, obj?: Model): Model {\n      return (obj || new Model()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Model= obj\n     * @returns Model\n     */\n    static getSizePrefixedRootAsModel(bb: flatbuffers.ByteBuffer, obj?: Model): Model {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Model()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    irVersion(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.OperatorSetId= obj\n     * @returns onnxruntime.experimental.fbs.OperatorSetId\n     */\n    opsetImport(index: number, obj?: onnxruntime.experimental.fbs.OperatorSetId):\n        onnxruntime.experimental.fbs.OperatorSetId|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.OperatorSetId())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    opsetImportLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    producerName(): string|null;\n    producerName(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    producerName(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    producerVersion(): string|null;\n    producerVersion(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    producerVersion(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    domain(): string|null;\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    domain(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    modelVersion(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Graph= obj\n     * @returns onnxruntime.experimental.fbs.Graph|null\n     */\n    graph(obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    graphDocString(): string|null;\n    graphDocString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    graphDocString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startModel(builder: flatbuffers.Builder) {\n      builder.startObject(9);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long irVersion\n     */\n    static addIrVersion(builder: flatbuffers.Builder, irVersion: flatbuffers.Long) {\n      builder.addFieldInt64(0, irVersion, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset opsetImportOffset\n     */\n    static addOpsetImport(builder: flatbuffers.Builder, opsetImportOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, opsetImportOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createOpsetImportVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOpsetImportVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset producerNameOffset\n     */\n    static addProducerName(builder: flatbuffers.Builder, producerNameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, producerNameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset producerVersionOffset\n     */\n    static addProducerVersion(builder: flatbuffers.Builder, producerVersionOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(3, producerVersionOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset domainOffset\n     */\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, domainOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long modelVersion\n     */\n    static addModelVersion(builder: flatbuffers.Builder, modelVersion: flatbuffers.Long) {\n      builder.addFieldInt64(5, modelVersion, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphOffset\n     */\n    static addGraph(builder: flatbuffers.Builder, graphOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, graphOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphDocStringOffset\n     */\n    static addGraphDocString(builder: flatbuffers.Builder, graphDocStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(8, graphDocStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endModel(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createModel(\n        builder: flatbuffers.Builder, irVersion: flatbuffers.Long, opsetImportOffset: flatbuffers.Offset,\n        producerNameOffset: flatbuffers.Offset, producerVersionOffset: flatbuffers.Offset,\n        domainOffset: flatbuffers.Offset, modelVersion: flatbuffers.Long, docStringOffset: flatbuffers.Offset,\n        graphOffset: flatbuffers.Offset, graphDocStringOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Model.startModel(builder);\n      Model.addIrVersion(builder, irVersion);\n      Model.addOpsetImport(builder, opsetImportOffset);\n      Model.addProducerName(builder, producerNameOffset);\n      Model.addProducerVersion(builder, producerVersionOffset);\n      Model.addDomain(builder, domainOffset);\n      Model.addModelVersion(builder, modelVersion);\n      Model.addDocString(builder, docStringOffset);\n      Model.addGraph(builder, graphOffset);\n      Model.addGraphDocString(builder, graphDocStringOffset);\n      return Model.endModel(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class KernelCreateInfos {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns KernelCreateInfos\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): KernelCreateInfos {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param KernelCreateInfos= obj\n     * @returns KernelCreateInfos\n     */\n    static getRootAsKernelCreateInfos(bb: flatbuffers.ByteBuffer, obj?: KernelCreateInfos): KernelCreateInfos {\n      return (obj || new KernelCreateInfos()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param KernelCreateInfos= obj\n     * @returns KernelCreateInfos\n     */\n    static getSizePrefixedRootAsKernelCreateInfos(bb: flatbuffers.ByteBuffer, obj?: KernelCreateInfos):\n        KernelCreateInfos {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new KernelCreateInfos()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    nodeIndices(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.readUint32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeIndicesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Uint32Array\n     */\n    nodeIndicesArray(): Uint32Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ?\n          new Uint32Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    kernelDefHashes(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.readUint64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    kernelDefHashesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startKernelCreateInfos(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodeIndicesOffset\n     */\n    static addNodeIndices(builder: flatbuffers.Builder, nodeIndicesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nodeIndicesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodeIndicesVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodeIndicesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset kernelDefHashesOffset\n     */\n    static addKernelDefHashes(builder: flatbuffers.Builder, kernelDefHashesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, kernelDefHashesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createKernelDefHashesVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startKernelDefHashesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endKernelCreateInfos(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createKernelCreateInfos(\n        builder: flatbuffers.Builder, nodeIndicesOffset: flatbuffers.Offset,\n        kernelDefHashesOffset: flatbuffers.Offset): flatbuffers.Offset {\n      KernelCreateInfos.startKernelCreateInfos(builder);\n      KernelCreateInfos.addNodeIndices(builder, nodeIndicesOffset);\n      KernelCreateInfos.addKernelDefHashes(builder, kernelDefHashesOffset);\n      return KernelCreateInfos.endKernelCreateInfos(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SubGraphSessionState {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SubGraphSessionState\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SubGraphSessionState {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SubGraphSessionState= obj\n     * @returns SubGraphSessionState\n     */\n    static getRootAsSubGraphSessionState(bb: flatbuffers.ByteBuffer, obj?: SubGraphSessionState): SubGraphSessionState {\n      return (obj || new SubGraphSessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SubGraphSessionState= obj\n     * @returns SubGraphSessionState\n     */\n    static getSizePrefixedRootAsSubGraphSessionState(bb: flatbuffers.ByteBuffer, obj?: SubGraphSessionState):\n        SubGraphSessionState {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SubGraphSessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    graphId(): string|null;\n    graphId(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    graphId(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.SessionState= obj\n     * @returns onnxruntime.experimental.fbs.SessionState|null\n     */\n    sessionState(obj?: onnxruntime.experimental.fbs.SessionState): onnxruntime.experimental.fbs.SessionState|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SessionState())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSubGraphSessionState(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphIdOffset\n     */\n    static addGraphId(builder: flatbuffers.Builder, graphIdOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, graphIdOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sessionStateOffset\n     */\n    static addSessionState(builder: flatbuffers.Builder, sessionStateOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, sessionStateOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSubGraphSessionState(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      builder.requiredField(offset, 4);  // graph_id\n      return offset;\n    }\n\n    static createSubGraphSessionState(\n        builder: flatbuffers.Builder, graphIdOffset: flatbuffers.Offset,\n        sessionStateOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SubGraphSessionState.startSubGraphSessionState(builder);\n      SubGraphSessionState.addGraphId(builder, graphIdOffset);\n      SubGraphSessionState.addSessionState(builder, sessionStateOffset);\n      return SubGraphSessionState.endSubGraphSessionState(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SessionState {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SessionState\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SessionState {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SessionState= obj\n     * @returns SessionState\n     */\n    static getRootAsSessionState(bb: flatbuffers.ByteBuffer, obj?: SessionState): SessionState {\n      return (obj || new SessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SessionState= obj\n     * @returns SessionState\n     */\n    static getSizePrefixedRootAsSessionState(bb: flatbuffers.ByteBuffer, obj?: SessionState): SessionState {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.KernelCreateInfos= obj\n     * @returns onnxruntime.experimental.fbs.KernelCreateInfos|null\n     */\n    kernels(obj?: onnxruntime.experimental.fbs.KernelCreateInfos): onnxruntime.experimental.fbs.KernelCreateInfos|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.KernelCreateInfos())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.SubGraphSessionState= obj\n     * @returns onnxruntime.experimental.fbs.SubGraphSessionState\n     */\n    subGraphSessionStates(index: number, obj?: onnxruntime.experimental.fbs.SubGraphSessionState):\n        onnxruntime.experimental.fbs.SubGraphSessionState|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SubGraphSessionState())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    subGraphSessionStatesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSessionState(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset kernelsOffset\n     */\n    static addKernels(builder: flatbuffers.Builder, kernelsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, kernelsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset subGraphSessionStatesOffset\n     */\n    static addSubGraphSessionStates(builder: flatbuffers.Builder, subGraphSessionStatesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, subGraphSessionStatesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createSubGraphSessionStatesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]):\n        flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startSubGraphSessionStatesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSessionState(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createSessionState(\n        builder: flatbuffers.Builder, kernelsOffset: flatbuffers.Offset,\n        subGraphSessionStatesOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SessionState.startSessionState(builder);\n      SessionState.addKernels(builder, kernelsOffset);\n      SessionState.addSubGraphSessionStates(builder, subGraphSessionStatesOffset);\n      return SessionState.endSessionState(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class InferenceSession {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns InferenceSession\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): InferenceSession {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param InferenceSession= obj\n     * @returns InferenceSession\n     */\n    static getRootAsInferenceSession(bb: flatbuffers.ByteBuffer, obj?: InferenceSession): InferenceSession {\n      return (obj || new InferenceSession()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param InferenceSession= obj\n     * @returns InferenceSession\n     */\n    static getSizePrefixedRootAsInferenceSession(bb: flatbuffers.ByteBuffer, obj?: InferenceSession): InferenceSession {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new InferenceSession()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @returns boolean\n     */\n    static bufferHasIdentifier(bb: flatbuffers.ByteBuffer): boolean {\n      return bb.__has_identifier('ORTM');\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    ortVersion(): string|null;\n    ortVersion(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    ortVersion(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Model= obj\n     * @returns onnxruntime.experimental.fbs.Model|null\n     */\n    model(obj?: onnxruntime.experimental.fbs.Model): onnxruntime.experimental.fbs.Model|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Model())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.SessionState= obj\n     * @returns onnxruntime.experimental.fbs.SessionState|null\n     */\n    sessionState(obj?: onnxruntime.experimental.fbs.SessionState): onnxruntime.experimental.fbs.SessionState|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SessionState())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startInferenceSession(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset ortVersionOffset\n     */\n    static addOrtVersion(builder: flatbuffers.Builder, ortVersionOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, ortVersionOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset modelOffset\n     */\n    static addModel(builder: flatbuffers.Builder, modelOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, modelOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sessionStateOffset\n     */\n    static addSessionState(builder: flatbuffers.Builder, sessionStateOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, sessionStateOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endInferenceSession(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset offset\n     */\n    static finishInferenceSessionBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset, 'ORTM');\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset offset\n     */\n    static finishSizePrefixedInferenceSessionBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset, 'ORTM', true);\n    }\n\n    static createInferenceSession(\n        builder: flatbuffers.Builder, ortVersionOffset: flatbuffers.Offset, modelOffset: flatbuffers.Offset,\n        sessionStateOffset: flatbuffers.Offset): flatbuffers.Offset {\n      InferenceSession.startInferenceSession(builder);\n      InferenceSession.addOrtVersion(builder, ortVersionOffset);\n      InferenceSession.addModel(builder, modelOffset);\n      InferenceSession.addSessionState(builder, sessionStateOffset);\n      return InferenceSession.endInferenceSession(builder);\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession, SessionHandler, Tensor} from 'onnxruntime-common';\n\nimport {Session} from './session';\nimport {Tensor as OnnxjsTensor} from './tensor';\n\nexport class OnnxjsSessionHandler implements SessionHandler {\n  constructor(private session: Session) {\n    this.inputNames = this.session.inputNames;\n    this.outputNames = this.session.outputNames;\n  }\n\n  async dispose(): Promise<void> {}\n  inputNames: readonly string[];\n  outputNames: readonly string[];\n  async run(\n      feeds: SessionHandler.FeedsType, _fetches: SessionHandler.FetchesType,\n      _options: InferenceSession.RunOptions): Promise<SessionHandler.ReturnType> {\n    const inputMap = new Map<string, OnnxjsTensor>();\n    for (const name in feeds) {\n      if (Object.hasOwnProperty.call(feeds, name)) {\n        const feed = feeds[name];\n        inputMap.set(\n            name,\n            new OnnxjsTensor(\n                feed.dims, feed.type as OnnxjsTensor.DataType, undefined, undefined,\n                feed.data as OnnxjsTensor.NumberType));\n      }\n    }\n    const outputMap = await this.session.run(inputMap);\n    const output: SessionHandler.ReturnType = {};\n    outputMap.forEach((tensor, name) => {\n      output[name] = new Tensor(tensor.type, tensor.data, tensor.dims);\n    });\n    return output;\n  }\n  startProfiling(): void {\n    this.session.startProfiling();\n  }\n  endProfiling(): void {\n    this.session.endProfiling();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {readFile} from 'fs';\nimport {promisify} from 'util';\n\nimport {resolveBackend, SessionHandlerType} from './backend';\nimport {ExecutionPlan} from './execution-plan';\nimport {Graph} from './graph';\nimport {Profiler} from './instrument';\nimport {Model} from './model';\nimport {Operator} from './operators';\nimport {Tensor} from './tensor';\n\nexport declare namespace Session {\n  export interface Config {\n    backendHint?: string;\n    profiler?: Profiler.Config;\n  }\n\n  export interface Context {\n    profiler: Readonly<Profiler>;\n    graphInputTypes?: Tensor.DataType[];\n    graphInputDims?: Array<readonly number[]>;\n  }\n}\n\nexport class Session {\n  constructor(config: Session.Config = {}) {\n    this._initialized = false;\n    this.backendHint = config.backendHint;\n    this.profiler = Profiler.create(config.profiler);\n    this.context = {profiler: this.profiler, graphInputTypes: [], graphInputDims: []};\n  }\n\n  get inputNames(): readonly string[] {\n    return this._model.graph.getInputNames();\n  }\n  get outputNames(): readonly string[] {\n    return this._model.graph.getOutputNames();\n  }\n\n  startProfiling() {\n    this.profiler.start();\n  }\n\n  endProfiling() {\n    this.profiler.stop();\n  }\n\n  async loadModel(uri: string): Promise<void>;\n  async loadModel(buffer: ArrayBuffer, byteOffset?: number, length?: number): Promise<void>;\n  async loadModel(buffer: Uint8Array): Promise<void>;\n  async loadModel(arg: string|ArrayBuffer|Uint8Array, byteOffset?: number, length?: number): Promise<void> {\n    await this.profiler.event('session', 'Session.loadModel', async () => {\n      // resolve backend and session handler\n      const backend = await resolveBackend(this.backendHint);\n      this.sessionHandler = backend.createSessionHandler(this.context);\n\n      this._model = new Model();\n      if (typeof arg === 'string') {\n        const isOrtFormat = arg.endsWith('.ort');\n        if (typeof process !== 'undefined' && process.versions && process.versions.node) {\n          // node\n          const buf = await promisify(readFile)(arg);\n          this.initialize(buf, isOrtFormat);\n        } else {\n          // browser\n          const response = await fetch(arg);\n          const buf = await response.arrayBuffer();\n          this.initialize(new Uint8Array(buf), isOrtFormat);\n        }\n      } else if (!ArrayBuffer.isView(arg)) {\n        // load model from ArrayBuffer\n        const arr = new Uint8Array(arg, byteOffset || 0, length || arg.byteLength);\n        this.initialize(arr);\n      } else {\n        // load model from Uint8array\n        this.initialize(arg);\n      }\n    });\n  }\n\n  private initialize(modelProtoBlob: Uint8Array, isOrtFormat?: boolean): void {\n    if (this._initialized) {\n      throw new Error('already initialized');\n    }\n\n    this.profiler.event('session', 'Session.initialize', () => {\n      // load graph\n      const graphInitializer =\n          this.sessionHandler.transformGraph ? this.sessionHandler as Graph.Initializer : undefined;\n      this._model.load(modelProtoBlob, graphInitializer, isOrtFormat);\n\n      // graph is completely initialzied at this stage , let the interested handlers know\n      if (this.sessionHandler.onGraphInitialized) {\n        this.sessionHandler.onGraphInitialized(this._model.graph);\n      }\n      // initialize each operator in the graph\n      this.initializeOps(this._model.graph);\n\n      // instantiate an ExecutionPlan object to be used by the Session object\n      this._executionPlan = new ExecutionPlan(this._model.graph, this._ops, this.profiler);\n    });\n\n    this._initialized = true;\n  }\n\n  async run(inputs: Map<string, Tensor>|Tensor[]): Promise<Map<string, Tensor>> {\n    if (!this._initialized) {\n      throw new Error('session not initialized yet');\n    }\n\n    return this.profiler.event('session', 'Session.run', async () => {\n      const inputTensors = this.normalizeAndValidateInputs(inputs);\n\n      const outputTensors = await this._executionPlan.execute(this.sessionHandler, inputTensors);\n\n      return this.createOutput(outputTensors);\n    });\n  }\n\n  private normalizeAndValidateInputs(inputs: Map<string, Tensor>|Tensor[]): Tensor[] {\n    const modelInputNames = this._model.graph.getInputNames();\n\n    // normalize inputs\n    // inputs: Tensor[]\n    if (Array.isArray(inputs)) {\n      if (inputs.length !== modelInputNames.length) {\n        throw new Error(`incorrect input array length: expected ${modelInputNames.length} but got ${inputs.length}`);\n      }\n    }\n    // convert map to array\n    // inputs: Map<string, Tensor>\n    else {\n      if (inputs.size !== modelInputNames.length) {\n        throw new Error(`incorrect input map size: expected ${modelInputNames.length} but got ${inputs.size}`);\n      }\n\n      const sortedInputs = new Array<Tensor>(inputs.size);\n      let sortedInputsIndex = 0;\n      for (let i = 0; i < modelInputNames.length; ++i) {\n        const tensor = inputs.get(modelInputNames[i]);\n        if (!tensor) {\n          throw new Error(`missing input tensor for: '${name}'`);\n        }\n        sortedInputs[sortedInputsIndex++] = tensor;\n      }\n\n      inputs = sortedInputs;\n    }\n\n    // validate dims requirements\n    // First session run - graph input data is not cached for the session\n    if (!this.context.graphInputTypes || this.context.graphInputTypes.length === 0 || !this.context.graphInputDims ||\n        this.context.graphInputDims.length === 0) {\n      const modelInputIndices = this._model.graph.getInputIndices();\n      const modelValues = this._model.graph.getValues();\n\n      const graphInputDims = new Array<readonly number[]>(modelInputIndices.length);\n\n      for (let i = 0; i < modelInputIndices.length; ++i) {\n        const graphInput = modelValues[modelInputIndices[i]];\n        graphInputDims[i] = graphInput.type!.shape.dims;\n\n        // cached for second and subsequent runs.\n        // Some parts of the framework works on the assumption that the graph and types and shapes are static\n        this.context.graphInputTypes!.push(graphInput.type!.tensorType);\n        this.context.graphInputDims!.push(inputs[i].dims);\n      }\n\n      this.validateInputTensorDims(graphInputDims, inputs, true);\n    }\n\n    // Second and subsequent session runs - graph input data is cached for the session\n    else {\n      this.validateInputTensorDims(this.context.graphInputDims, inputs, false);\n    }\n\n    // validate types requirement\n    this.validateInputTensorTypes(this.context.graphInputTypes!, inputs);\n\n    return inputs;\n  }\n\n  private validateInputTensorTypes(graphInputTypes: Tensor.DataType[], givenInputs: Tensor[]) {\n    for (let i = 0; i < givenInputs.length; i++) {\n      const expectedType = graphInputTypes[i];\n      const actualType = givenInputs[i].type;\n      if (expectedType !== actualType) {\n        throw new Error(`input tensor[${i}] check failed: expected type '${expectedType}' but got ${actualType}`);\n      }\n    }\n  }\n\n  private validateInputTensorDims(\n      graphInputDims: Array<readonly number[]>, givenInputs: Tensor[], noneDimSupported: boolean) {\n    for (let i = 0; i < givenInputs.length; i++) {\n      const expectedDims = graphInputDims[i];\n      const actualDims = givenInputs[i].dims;\n      if (!this.compareTensorDims(expectedDims, actualDims, noneDimSupported)) {\n        throw new Error(`input tensor[${i}] check failed: expected shape '[${expectedDims.join(',')}]' but got [${\n            actualDims.join(',')}]`);\n      }\n    }\n  }\n\n  private compareTensorDims(expectedDims: readonly number[], actualDims: readonly number[], noneDimSupported: boolean):\n      boolean {\n    if (expectedDims.length !== actualDims.length) {\n      return false;\n    }\n\n    for (let i = 0; i < expectedDims.length; ++i) {\n      if (expectedDims[i] !== actualDims[i] && (!noneDimSupported || expectedDims[i] !== 0)) {\n        // data shape mis-match AND not a 'None' dimension.\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  private createOutput(outputTensors: Tensor[]): Map<string, Tensor> {\n    const modelOutputNames = this._model.graph.getOutputNames();\n    if (outputTensors.length !== modelOutputNames.length) {\n      throw new Error('expected number of outputs do not match number of generated outputs');\n    }\n\n    const output = new Map<string, Tensor>();\n    for (let i = 0; i < modelOutputNames.length; ++i) {\n      output.set(modelOutputNames[i], outputTensors[i]);\n    }\n\n    return output;\n  }\n\n  private initializeOps(graph: Graph): void {\n    const nodes = graph.getNodes();\n    this._ops = new Array(nodes.length);\n\n    for (let i = 0; i < nodes.length; i++) {\n      this._ops[i] = this.sessionHandler.resolve(nodes[i], this._model.opsets, graph);\n    }\n  }\n\n  private _model: Model;\n  private _initialized: boolean;\n\n  private _ops: Operator[];\n  private _executionPlan: ExecutionPlan;\n\n  private backendHint?: string;\n\n  private sessionHandler: SessionHandlerType;\n  private context: Session.Context;\n  private profiler: Readonly<Profiler>;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Guid} from 'guid-typescript';\nimport Long from 'long';\n\nimport {onnxruntime} from './ort-schema/flatbuffers/ort-generated';\nimport {onnx} from './ort-schema/protobuf/onnx';\nimport {decodeUtf8String, ProtoUtil, ShapeUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport declare namespace Tensor {\n  export interface DataTypeMap {\n    bool: Uint8Array;\n    float32: Float32Array;\n    float64: Float64Array;\n    string: string[];\n    int8: Int8Array;\n    uint8: Uint8Array;\n    int16: Int16Array;\n    uint16: Uint16Array;\n    int32: Int32Array;\n    uint32: Uint32Array;\n    int64: BigInt64Array;\n  }\n\n  export type DataType = keyof DataTypeMap;\n\n  export type StringType = Tensor.DataTypeMap['string'];\n  export type BooleanType = Tensor.DataTypeMap['bool'];\n  export type IntegerType = Tensor.DataTypeMap['int8']|Tensor.DataTypeMap['uint8']|Tensor.DataTypeMap['int16']|\n                            Tensor.DataTypeMap['uint16']|Tensor.DataTypeMap['int32']|Tensor.DataTypeMap['uint32'];\n  export type FloatType = Tensor.DataTypeMap['float32']|Tensor.DataTypeMap['float64'];\n  export type NumberType = BooleanType|IntegerType|FloatType;\n\n  export type Id = Guid;\n}\n\ntype TensorData = Tensor.DataTypeMap[Tensor.DataType];\n\ntype DataProvider = (id: Tensor.Id) => TensorData;\ntype AsyncDataProvider = (id: Tensor.Id) => Promise<TensorData>;\n\nexport class Tensor {\n  /**\n   * get the underlying tensor data\n   */\n  get data(): TensorData {\n    if (this.cache === undefined) {\n      const data = this.dataProvider!(this.dataId);\n      if (data.length !== this.size) {\n        throw new Error('Length of data provided by the Data Provider is inconsistent with the dims of this Tensor.');\n      }\n      this.cache = data;\n    }\n    return this.cache;\n  }\n\n  /**\n   * get the underlying string tensor data. Should only use when type is STRING\n   */\n  get stringData() {\n    if (this.type !== 'string') {\n      throw new TypeError('data type is not string');\n    }\n\n    return this.data as Tensor.StringType;\n  }\n\n  /**\n   * get the underlying integer tensor data. Should only use when type is one of the following: (UINT8, INT8, UINT16,\n   * INT16, INT32, UINT32, BOOL)\n   */\n  get integerData() {\n    switch (this.type) {\n      case 'uint8':\n      case 'int8':\n      case 'uint16':\n      case 'int16':\n      case 'int32':\n      case 'uint32':\n      case 'bool':\n        return this.data as Tensor.IntegerType;\n\n      default:\n        throw new TypeError('data type is not integer (uint8, int8, uint16, int16, int32, uint32, bool)');\n    }\n  }\n\n  /**\n   * get the underlying float tensor data. Should only use when type is one of the following: (FLOAT, DOUBLE)\n   */\n  get floatData() {\n    switch (this.type) {\n      case 'float32':\n      case 'float64':\n        return this.data as Tensor.FloatType;\n\n      default:\n        throw new TypeError('data type is not float (float32, float64)');\n    }\n  }\n\n  /**\n   * get the underlying number tensor data. Should only use when type is one of the following: (UINT8, INT8, UINT16,\n   * INT16, INT32, UINT32, BOOL, FLOAT, DOUBLE)\n   */\n  get numberData() {\n    if (this.type !== 'string') {\n      return this.data as Tensor.NumberType;\n    }\n    throw new TypeError('type cannot be non-number (string)');\n  }\n\n  /**\n   * get value of an element at the given indices\n   */\n  get(indices: readonly number[]): Tensor.DataTypeMap[Tensor.DataType][number] {\n    return this.data[ShapeUtil.indicesToOffset(indices, this.strides)];\n  }\n\n  /**\n   * set value of an element at the given indices\n   */\n  set(indices: readonly number[], value: Tensor.DataTypeMap[Tensor.DataType][number]) {\n    this.data[ShapeUtil.indicesToOffset(indices, this.strides)] = value;\n  }\n\n  /**\n   * get the underlying tensor data asynchronously\n   */\n  async getData(): Promise<TensorData> {\n    if (this.cache === undefined) {\n      this.cache = await this.asyncDataProvider!(this.dataId);\n    }\n    return this.cache;\n  }\n\n  /**\n   * get the number of elements in the tensor\n   */\n  public readonly size: number;\n\n  private _strides: readonly number[];\n  /**\n   * get the strides for each dimension\n   */\n  get strides(): readonly number[] {\n    if (!this._strides) {\n      this._strides = ShapeUtil.computeStrides(this.dims);\n    }\n    return this._strides;\n  }\n\n  constructor(\n      /**\n       * get the dimensions of the tensor\n       */\n      public readonly dims: readonly number[],\n      /**\n       * get the type of the tensor\n       */\n      public readonly type: Tensor.DataType, private dataProvider?: DataProvider,\n      private asyncDataProvider?: AsyncDataProvider, private cache?: TensorData,\n      /**\n       * get the data ID that used to map to a tensor data\n       */\n      public readonly dataId: Guid = Guid.create()) {\n    this.size = ShapeUtil.validateDimsAndCalcSize(dims);\n    const size = this.size;\n    const empty = (dataProvider === undefined && asyncDataProvider === undefined && cache === undefined);\n\n    if (cache !== undefined) {\n      if (cache.length !== size) {\n        throw new RangeError('Input dims doesn\\'t match data length.');\n      }\n    }\n\n    if (type === 'string') {\n      if (cache !== undefined && (!Array.isArray(cache) || !cache.every(i => typeof i === 'string'))) {\n        throw new TypeError('cache should be a string array');\n      }\n\n      if (empty) {\n        this.cache = new Array<string>(size);\n      }\n    } else {\n      if (cache !== undefined) {\n        const constructor = dataviewConstructor(type);\n        if (!(cache instanceof constructor)) {\n          throw new TypeError(`cache should be type ${constructor.name}`);\n        }\n      }\n\n      if (empty) {\n        const buf = new ArrayBuffer(size * sizeof(type));\n        this.cache = createView(buf, type);\n      }\n    }\n  }\n\n  /**\n   * Construct new Tensor from a ONNX Tensor object\n   * @param tensorProto the ONNX Tensor\n   */\n  static fromProto(tensorProto: onnx.ITensorProto): Tensor {\n    if (!tensorProto) {\n      throw new Error('cannot construct Value from an empty tensor');\n    }\n    const type = ProtoUtil.tensorDataTypeFromProto(tensorProto.dataType!);\n    const dims = ProtoUtil.tensorDimsFromProto(tensorProto.dims!);\n\n    const value = new Tensor(dims, type);\n\n    if (type === 'string') {\n      // When it's STRING type, the value should always be stored in field\n      // 'stringData'\n      tensorProto.stringData!.forEach((str, i) => {\n        value.data[i] = decodeUtf8String(str);\n      });\n\n    } else if (\n        tensorProto.rawData && typeof tensorProto.rawData.byteLength === 'number' &&\n        tensorProto.rawData.byteLength > 0) {\n      // NOT considering segment for now (IMPORTANT)\n\n      // populate value from rawData\n      const dataDest = value.data;\n      const dataSource =\n          new DataView(tensorProto.rawData.buffer, tensorProto.rawData.byteOffset, tensorProto.rawData.byteLength);\n      const elementSize = sizeofProto(tensorProto.dataType!);\n      const length = tensorProto.rawData.byteLength / elementSize;\n\n      if (tensorProto.rawData.byteLength % elementSize !== 0) {\n        throw new Error('invalid buffer length');\n      }\n      if (dataDest.length !== length) {\n        throw new Error('buffer length mismatch');\n      }\n\n      for (let i = 0; i < length; i++) {\n        const n = readProto(dataSource, tensorProto.dataType!, i * elementSize);\n        dataDest[i] = n;\n      }\n    } else {\n      // populate value from array\n      let array: Array<number|Long>;\n      switch (tensorProto.dataType) {\n        case onnx.TensorProto.DataType.FLOAT:\n          array = tensorProto.floatData!;\n          break;\n        case onnx.TensorProto.DataType.INT32:\n        case onnx.TensorProto.DataType.INT16:\n        case onnx.TensorProto.DataType.UINT16:\n        case onnx.TensorProto.DataType.INT8:\n        case onnx.TensorProto.DataType.UINT8:\n        case onnx.TensorProto.DataType.BOOL:\n          array = tensorProto.int32Data!;\n          break;\n        case onnx.TensorProto.DataType.INT64:\n          array = tensorProto.int64Data!;\n          break;\n        case onnx.TensorProto.DataType.DOUBLE:\n          array = tensorProto.doubleData!;\n          break;\n        case onnx.TensorProto.DataType.UINT32:\n        case onnx.TensorProto.DataType.UINT64:\n          array = tensorProto.uint64Data!;\n          break;\n        default:\n          // should never run here\n          throw new Error('unspecific error');\n      }\n\n      if (array === null || array === undefined) {\n        throw new Error('failed to populate data from a tensorproto value');\n      }\n\n      const data = value.data;\n      if (data.length !== array.length) {\n        throw new Error('array length mismatch');\n      }\n\n      for (let i = 0; i < array.length; i++) {\n        const element = array[i];\n        if (Long.isLong(element)) {\n          data[i] = longToNumber(element, tensorProto.dataType);\n        } else {\n          data[i] = element;\n        }\n      }\n    }\n\n    return value;\n  }\n\n  /**\n   * Construct new Tensor from raw data\n   * @param data the raw data object. Should be a string array for 'string' tensor, and the corresponding typed array\n   * for other types of tensor.\n   * @param dims the dimensions of the tensor\n   * @param type the type of the tensor\n   */\n  static fromData(data: Tensor.DataTypeMap[Tensor.DataType], dims: readonly number[], type: Tensor.DataType) {\n    return new Tensor(dims, type, undefined, undefined, data);\n  }\n\n  static fromOrtTensor(ortTensor: ortFbs.Tensor) {\n    if (!ortTensor) {\n      throw new Error('cannot construct Value from an empty tensor');\n    }\n    const dims = ProtoUtil.tensorDimsFromORTFormat(ortTensor);\n    const type = ProtoUtil.tensorDataTypeFromProto(ortTensor.dataType());\n\n    const value = new Tensor(dims, type);\n\n    if (type === 'string') {\n      // When it's STRING type, the value should always be stored in field\n      // 'stringData'\n      for (let i = 0; i < ortTensor.stringDataLength(); i++) {\n        value.data[i] = ortTensor.stringData(i);\n      }\n\n    } else if (\n        ortTensor.rawDataArray() && typeof ortTensor.rawDataLength() === 'number' && ortTensor.rawDataLength() > 0) {\n      // NOT considering segment for now (IMPORTANT)\n\n      // populate value from rawData\n      const dataDest = value.data;\n      const dataSource = new DataView(\n          ortTensor.rawDataArray()!.buffer, ortTensor.rawDataArray()!.byteOffset, ortTensor.rawDataLength());\n      const elementSize = sizeofProto(ortTensor.dataType());\n      const length = ortTensor.rawDataLength() / elementSize;\n\n      if (ortTensor.rawDataLength() % elementSize !== 0) {\n        throw new Error('invalid buffer length');\n      }\n      if (dataDest.length !== length) {\n        throw new Error('buffer length mismatch');\n      }\n\n      for (let i = 0; i < length; i++) {\n        const n = readProto(dataSource, ortTensor.dataType(), i * elementSize);\n        dataDest[i] = n;\n      }\n    }\n    return value;\n  }\n}\n\nfunction sizeof(type: Tensor.DataType): number {\n  switch (type) {\n    case 'bool':\n    case 'int8':\n    case 'uint8':\n      return 1;\n    case 'int16':\n    case 'uint16':\n      return 2;\n    case 'int32':\n    case 'uint32':\n    case 'float32':\n      return 4;\n    case 'float64':\n      return 8;\n    default:\n      throw new Error(`cannot calculate sizeof() on type ${type}`);\n  }\n}\n\nfunction sizeofProto(type: onnx.TensorProto.DataType|ortFbs.TensorDataType): number {\n  switch (type) {\n    case onnx.TensorProto.DataType.UINT8:\n    case onnx.TensorProto.DataType.INT8:\n    case onnx.TensorProto.DataType.BOOL:\n      return 1;\n    case onnx.TensorProto.DataType.UINT16:\n    case onnx.TensorProto.DataType.INT16:\n      return 2;\n    case onnx.TensorProto.DataType.FLOAT:\n    case onnx.TensorProto.DataType.INT32:\n    case onnx.TensorProto.DataType.UINT32:\n      return 4;\n    case onnx.TensorProto.DataType.INT64:\n    case onnx.TensorProto.DataType.DOUBLE:\n    case onnx.TensorProto.DataType.UINT64:\n      return 8;\n    default:\n      throw new Error(`cannot calculate sizeof() on type ${onnx.TensorProto.DataType[type]}`);\n  }\n}\n\nfunction createView(dataBuffer: ArrayBuffer, type: Tensor.DataType) {\n  return new (dataviewConstructor(type))(dataBuffer);\n}\n\nfunction dataviewConstructor(type: Tensor.DataType) {\n  switch (type) {\n    case 'bool':\n    case 'uint8':\n      return Uint8Array;\n    case 'int8':\n      return Int8Array;\n    case 'int16':\n      return Int16Array;\n    case 'uint16':\n      return Uint16Array;\n    case 'int32':\n      return Int32Array;\n    case 'uint32':\n      return Uint32Array;\n    case 'int64':\n      return BigInt64Array;\n    case 'float32':\n      return Float32Array;\n    case 'float64':\n      return Float64Array;\n    default:\n      // should never run to here\n      throw new Error('unspecified error');\n  }\n}\n\n// convert a long number to a 32-bit integer (cast-down)\nfunction longToNumber(i: Long, type: onnx.TensorProto.DataType|ortFbs.TensorDataType): number {\n  // INT64, UINT32, UINT64\n  if (type === onnx.TensorProto.DataType.INT64 || type === ortFbs.TensorDataType.INT64) {\n    if (i.greaterThanOrEqual(2147483648) || i.lessThan(-2147483648)) {\n      throw new TypeError('int64 is not supported');\n    }\n  } else if (\n      type === onnx.TensorProto.DataType.UINT32 || type === ortFbs.TensorDataType.UINT32 ||\n      type === onnx.TensorProto.DataType.UINT64 || type === ortFbs.TensorDataType.UINT64) {\n    if (i.greaterThanOrEqual(4294967296) || i.lessThan(0)) {\n      throw new TypeError('uint64 is not supported');\n    }\n  } else {\n    throw new TypeError(`not a LONG type: ${onnx.TensorProto.DataType[type]}`);\n  }\n\n  return i.toNumber();\n}\n\n// read one value from TensorProto\nfunction readProto(view: DataView, type: onnx.TensorProto.DataType|ortFbs.TensorDataType, byteOffset: number): number {\n  switch (type) {\n    case onnx.TensorProto.DataType.BOOL:\n    case onnx.TensorProto.DataType.UINT8:\n      return view.getUint8(byteOffset);\n    case onnx.TensorProto.DataType.INT8:\n      return view.getInt8(byteOffset);\n    case onnx.TensorProto.DataType.UINT16:\n      return view.getUint16(byteOffset, true);\n    case onnx.TensorProto.DataType.INT16:\n      return view.getInt16(byteOffset, true);\n    case onnx.TensorProto.DataType.FLOAT:\n      return view.getFloat32(byteOffset, true);\n    case onnx.TensorProto.DataType.INT32:\n      return view.getInt32(byteOffset, true);\n    case onnx.TensorProto.DataType.UINT32:\n      return view.getUint32(byteOffset, true);\n    case onnx.TensorProto.DataType.INT64:\n      return longToNumber(\n          Long.fromBits(view.getUint32(byteOffset, true), view.getUint32(byteOffset + 4, true), false), type);\n    case onnx.TensorProto.DataType.DOUBLE:\n      return view.getFloat64(byteOffset, true);\n    case onnx.TensorProto.DataType.UINT64:\n      return longToNumber(\n          Long.fromBits(view.getUint32(byteOffset, true), view.getUint32(byteOffset + 4, true), true), type);\n    default:\n      throw new Error(`cannot read from DataView for type ${onnx.TensorProto.DataType[type]}`);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {flatbuffers} from 'flatbuffers';\nimport Long from 'long';\n\nimport {Graph} from './graph';\nimport {onnxruntime} from './ort-schema/flatbuffers/ort-generated';\nimport {onnx} from './ort-schema/protobuf/onnx';\nimport {Tensor} from './tensor';\n\n// check the inputs shape before running an OP.\n// return true when the inputs pass the check\n// return false when the inputs do not fit the requirement\n// throw exception when fatal error or not implemented\nexport function checkInputsShape(inputs: Tensor[], ...expectedDimensions: number[]): boolean {\n  if (!inputs || inputs.length !== expectedDimensions.length) {\n    return false;\n  }\n  for (let i = 0; i < inputs.length; i++) {\n    if (!inputs[i].dims || inputs[i].dims.length !== expectedDimensions[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n// Evaluates the given expression and asserts error message if condition is unmet.\nexport function assert(expr: boolean, msg: () => string) {\n  if (!expr) {\n    throw new Error(typeof msg === 'string' ? msg : msg());\n  }\n}\n\nexport class ArrayUtil {\n  /**\n   * Verifies if 2 input arrays contain the same elements.\n   * @param n1 Array 1\n   * @param n2 Array 2\n   * @returns Whether these 2 are equal\n   */\n  static arraysEqual(\n      n1: readonly number[]|Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Uint8ClampedArray|\n      Float32Array|Float64Array,\n      n2: readonly number[]|Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Uint8ClampedArray|\n      Float32Array|Float64Array) {\n    if (n1.length !== n2.length) {\n      return false;\n    }\n    for (let i = 0; i < n1.length; i++) {\n      if (n1[i] !== n2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n\nexport class MatMulUtil {\n  /**\n   * Fix the input shapes for MatMul operation if they need fixing\n   * @param dimsA The shape of tensor A. Should be an array of positive integers\n   * @param dimsB The shape of tensor B. Should be an array of positive integers\n   * @returns A tuple containing the preprocessed input shapes as required by ONNX specifications\n   */\n  static preprocessInputShapes(dimsA: readonly number[], dimsB: readonly number[]):\n      [readonly number[], readonly number[]] {\n    // If the first argument is 1-D, it is promoted to a matrix by prepending\n    // a 1 to its dimensions. After matrix multiplication the prepended 1 is\n    // removed.\n    const a = (dimsA.length === 1) ? [1, dimsA[0]] : dimsA;\n\n    // If the second argument is 1-D, it is promoted to a matrix by appending\n    // a 1 to its dimensions. After matrix multiplication the appended 1 is\n    // removed.\n    const b = (dimsB.length === 1) ? [dimsB[0], 1] : dimsB;\n\n    return [a, b];\n  }\n\n  /**\n   * Fix the output shape computed for MatMul operation if it needs fixing\n   * @param outputShape The computed outputShape. Should be an array (atleast of length 2) of positive integers.\n   * This will be mutated.\n   * @param aRank The rank of tensor A.\n   * @param bRank The rank of tensor B.\n   */\n  static postprocessOutputShape(outputShape: number[], aRank: number, bRank: number) {\n    // Remove prepended dimension if first input is 1d\n    if (aRank === 1) {\n      // outputShape = outputShape.slice(0, outputShape.length - 2).concat(outputShape.slice(outputShape.length - 1));\n      outputShape.splice(outputShape.length - 2, 1);\n    }\n    // Remove appended dimension if second input is 1d\n    if (bRank === 1) {\n      outputShape.pop();\n    }\n  }\n\n  /**\n   * Calculate the expected shape when matrix multiplication\n   * @param a The shape of tensor A. Should be a tuple of 2 positive integers\n   * @param b The shape of tensor B. Should be a tuple of 2 positive integers\n   * @returns The expected shape of the result, or undefined if N/A\n   */\n  static calcMatMulShape(a: [number, number], b: [number, number]): [number, number]|undefined {\n    return (a[1] !== b[0]) ? undefined : [a[0], b[1]];\n  }\n}\n\nexport class BroadcastUtil {\n  /**\n   * Calculate the expected shape when broadcasting 2 tensors\n   * @param a The shape of tensor A. Should be an array of positive integers\n   * @param b The shape of tensor B. Should be an array of positive integers\n   * @param isMatMul Whether the operation is MatMul\n   * @returns The expected shape of the result, or undefined if N/A\n   */\n  static calcShape(adims: readonly number[], bdims: readonly number[], isMatMul = false): readonly number[]|undefined {\n    const arank = adims.length;\n    const brank = bdims.length;\n    if (arank === 0) {\n      return bdims;\n    }\n    if (brank === 0) {\n      return adims;\n    }\n    const crank = Math.max(adims.length, bdims.length);\n    const cdims = new Array<number>(crank);\n\n    // calculate the last 2 dimension if it is MatMul\n    if (isMatMul) {\n      if (arank < 2 || brank < 2) {\n        return undefined;\n      }\n      const cShapeMatMul =\n          MatMulUtil.calcMatMulShape([adims[arank - 2], adims[arank - 1]], [bdims[brank - 2], bdims[brank - 1]]);\n      if (cShapeMatMul === undefined) {\n        return undefined;\n      }\n      [cdims[crank - 2], cdims[crank - 1]] = cShapeMatMul;\n    }\n\n    for (let i = isMatMul ? 3 : 1; i <= crank; i++) {\n      const aLen = arank - i < 0 ? 1 : adims[arank - i];\n      const bLen = brank - i < 0 ? 1 : bdims[brank - i];\n\n      if (aLen !== bLen && aLen > 1 && bLen > 1) {\n        return undefined;\n      }\n      cdims[crank - i] = Math.max(aLen, bLen);\n    }\n\n    return cdims;\n  }\n\n  /**\n   * Given the indices of a broadcasted tensor, calculate the original indices\n   * @param broadcastedIndices The given indices of the broadcasted tensor.\n   * @param originalShape The original shape of the tensor before broadcas\n   * @returns The calculated indices that maps to the original tensor.\n   */\n  static index(broadcastedIndices: readonly number[], originalShape: readonly number[]): number[] {\n    // NOTE 1: we assume the parameter broadcastedIndices is valid. ie. it should have the same\n    // length as the broadcasted shape, and for each dimension the index should\n    // not be out of range.\n    const originalIndices = new Array(originalShape.length);\n    BroadcastUtil.fillIndex(broadcastedIndices, originalShape, originalIndices);\n    return originalIndices;\n  }\n\n  /**\n   * Given the indices of a broadcasted tensor, calculate the original indices\n   * @param broadcastedIndices The given indices of the broadcasted tensor.\n   * @param originalShape The original shape of the tensor before broadcast\n   * @param originalIndices The mapping of broadcastedIndices to the originalIndices (output parameter - will be\n   *     mutated).\n   */\n  static fillIndex(broadcastedIndices: readonly number[], originalShape: readonly number[], originalIndices: number[]) {\n    // NOTE 1: we assume the parameter broadcastedIndices is valid. ie. it should have the same length as the\n    // broadcasted shape, and for each dimension the index should not be out of range.\n    // NOTE 2: we assume the parameter originalIndices has the same length as the originalShape\n    const dimOffset = broadcastedIndices.length - originalShape.length;\n    for (let i = 0; i < originalShape.length; i++) {\n      originalIndices[i] = broadcastedIndices[dimOffset + i] % originalShape[i];\n    }\n  }\n\n  /**\n   * Perform the broadcasting operation on the specific operator\n   * @param a The input tensor A\n   * @param b The input tensor B\n   * @param op The operator lambda function\n   * @param inplace Whether to write the result back to A.\n   * @returns The result tensor, or undefined if input not broadcastable.\n   */\n  static calc(\n      a: Tensor, b: Tensor, op: (a: string|number, b: string|number) => (string | number), inplace: boolean,\n      resultType?: Tensor.DataType): Tensor|undefined {\n    const outputShape = BroadcastUtil.calcShape(a.dims, b.dims);\n\n    if (outputShape) {\n      if (inplace && !ShapeUtil.areEqual(outputShape, a.dims)) {\n        // B is not broadcastable to A, failed to calculate inplace.\n        return undefined;\n      }\n\n      const size = ShapeUtil.size(outputShape);\n      const c = inplace ? a : new Tensor(outputShape, resultType || a.type);\n\n      // both inputs are scalars\n      if (outputShape.length === 0) {\n        c.set([], op(a.get([]) as number, b.get([]) as number));\n      }\n\n      // atleast one input is a non-scalar\n      else {\n        const outputIndices = new Array<number>(outputShape.length);\n        const originalIndicesA = new Array(a.dims.length);\n        const originalIndicesB = new Array(b.dims.length);\n        let valA: string|number = 0;\n        let valB: string|number = 0;\n        let isAScalar = false;\n        let isBScalar = false;\n        if (a.dims.length === 0) {\n          valA = a.get([]) as number;\n          isAScalar = true;\n        }\n        if (b.dims.length === 0) {\n          valB = b.get([]) as number;\n          isBScalar = true;\n        }\n        let rest: number;\n        for (let i = 0; i < size; i++) {\n          // traversal indices\n          rest = i;\n          for (let j = outputShape.length - 1; j >= 0; j--) {\n            outputIndices[j] = rest % outputShape[j];\n            rest = Math.floor(rest / outputShape[j]);\n          }\n\n          if (!isAScalar) {\n            // map outputIndices (which is actually broadcasted) to the originalIndices\n            BroadcastUtil.fillIndex(outputIndices, a.dims, originalIndicesA);\n            valA = a.get(originalIndicesA) as number;\n          }\n          if (!isBScalar) {\n            BroadcastUtil.fillIndex(outputIndices, b.dims, originalIndicesB);\n            valB = b.get(originalIndicesB) as number;\n          }\n\n          c.set(outputIndices, op(valA, valB));\n        }\n      }\n\n      return c;\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Determine if a shape is unidirectional broadcastable to another shape\n   * @param shape The input shape\n   * @param finalShape The desired shape after broadcasting\n   */\n  static isValidBroadcast(shape: readonly number[], finalShape: readonly number[]): boolean {\n    // align shape to the right\n    const inputRank = shape.length;\n    const finalRank = finalShape.length;\n    if (inputRank > finalRank) {\n      return false;\n    }\n    for (let i = 1; i <= inputRank; i++) {\n      if (shape[inputRank - i] !== 1 && shape[inputRank - i] !== finalShape[finalRank - i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Determine the broadcasted dims in input shape based on the given output shape.\n   * Note that this function only returns the broadcasted dims.\n   * @param inputShape The input shape\n   * @param outputShape The output shape\n   * @returns The broadcasted dims in input shape.\n   */\n  static getBroadcastDims(inputShape: readonly number[], outputShape: readonly number[]): number[] {\n    const inRank = inputShape.length;\n    const dims: number[] = [];\n    for (let i = 0; i < inRank; i++) {\n      const dim = inRank - 1 - i;\n      const a = inputShape[dim] || 1;\n      const b = outputShape[outputShape.length - 1 - i] || 1;\n      if (b > 1 && a === 1) {\n        dims.unshift(dim);\n      }\n    }\n    return dims;\n  }\n}\n\n// copy array helper\n// mimics memcpy as much as possible\nexport function arrayCopyHelper(\n    target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n    blockSize: number) {\n  if (sourceIndex < 0 || sourceIndex >= source.length) {\n    throw new Error('sourceIndex out of bounds');\n  }\n  if (targetIndex < 0 || targetIndex >= target.length) {\n    throw new Error('targetIndex out of bounds');\n  }\n  if (sourceIndex + blockSize > source.length) {\n    throw new Error('source indices to be copied are outside bounds');\n  }\n  if (targetIndex + blockSize > target.length) {\n    throw new Error('target array is too small to hold result');\n  }\n\n  for (let offset = 0; offset < blockSize; offset++) {\n    target[targetIndex + offset] = source[sourceIndex + offset];\n  }\n}\n\nexport class GemmUtil {\n  // will make sure input shapes are compatible for this op\n  // and return back the shape of the output in the form of a tuple\n  // will throw exception if the input shapes are not compatible\n  static getShapeOfGemmResult(\n      leftShape: readonly number[], transLeft: boolean, rightShape: readonly number[], transRight: boolean,\n      biasShape?: readonly number[]): readonly number[] {\n    if (leftShape.length !== 2 || rightShape.length !== 2) {\n      throw new Error('shape need to be of size 2');\n    }\n\n    let M: number;\n    let K: number;\n    let N: number;\n\n    if (transLeft) {\n      M = leftShape[1];\n      K = leftShape[0];\n    } else {\n      M = leftShape[0];\n      K = leftShape[1];\n    }\n\n    let kDim = -1;\n\n    if (transRight) {\n      N = rightShape[0];\n      kDim = 1;\n    } else {\n      N = rightShape[1];\n      kDim = 0;\n    }\n\n    if (rightShape[kDim] !== K) {\n      throw new Error('dimension mismatch');\n    }\n\n    if (M <= 0 || N <= 0 || K <= 0) {\n      throw new Error('invalid shape specified');\n    }\n\n    if (biasShape && !BroadcastUtil.isValidBroadcast(biasShape, [M, N])) {\n      throw new Error('gemm: invalid bias shape for broadcast');\n    }\n\n    return [M, N, K];\n  }\n}\n\nexport class ProtoUtil {\n  static tensorDataTypeFromProto(typeProto: onnx.TensorProto.DataType|\n                                 onnxruntime.experimental.fbs.TensorDataType): Tensor.DataType {\n    switch (typeProto) {\n      case onnx.TensorProto.DataType.INT8:\n        return 'int8';\n      case onnx.TensorProto.DataType.UINT8:\n        return 'uint8';\n      case onnx.TensorProto.DataType.BOOL:\n        return 'bool';\n      case onnx.TensorProto.DataType.INT16:\n        return 'int16';\n      case onnx.TensorProto.DataType.UINT16:\n        return 'uint16';\n      case onnx.TensorProto.DataType.INT32:\n        return 'int32';\n      case onnx.TensorProto.DataType.UINT32:\n        return 'uint32';\n      case onnx.TensorProto.DataType.FLOAT:\n        return 'float32';\n      case onnx.TensorProto.DataType.DOUBLE:\n        return 'float64';\n      case onnx.TensorProto.DataType.STRING:\n        return 'string';\n\n      // For INT64/UINT64, reduce their value to 32-bits.\n      // Should throw exception when overflow\n      case onnx.TensorProto.DataType.INT64:\n        return 'int32';\n      case onnx.TensorProto.DataType.UINT64:\n        return 'uint32';\n\n      default:\n        throw new Error(`unsupported data type: ${onnx.TensorProto.DataType[typeProto]}`);\n    }\n  }\n\n  static tensorDataTypeStringToEnum(type: string): onnx.TensorProto.DataType {\n    switch (type) {\n      case 'int8':\n        return onnx.TensorProto.DataType.INT8;\n      case 'uint8':\n        return onnx.TensorProto.DataType.UINT8;\n      case 'bool':\n        return onnx.TensorProto.DataType.BOOL;\n      case 'int16':\n        return onnx.TensorProto.DataType.INT16;\n      case 'uint16':\n        return onnx.TensorProto.DataType.UINT16;\n      case 'int32':\n        return onnx.TensorProto.DataType.INT32;\n      case 'uint32':\n        return onnx.TensorProto.DataType.UINT32;\n      case 'float32':\n        return onnx.TensorProto.DataType.FLOAT;\n      case 'float64':\n        return onnx.TensorProto.DataType.DOUBLE;\n      case 'string':\n        return onnx.TensorProto.DataType.STRING;\n      case 'int64':\n        return onnx.TensorProto.DataType.INT64;\n      case 'uint64':\n        return onnx.TensorProto.DataType.UINT64;\n\n      default:\n        throw new Error(`unsupported data type: ${type}`);\n    }\n  }\n\n  static tensorDimsFromProto(dims: Array<number|Long>): number[] {\n    // get rid of Long type for dims\n    return dims.map(d => Long.isLong(d) ? d.toNumber() : d);\n  }\n\n  static tensorValueTypeFromProto(valueType: onnx.TypeProto.ITensor): Graph.ValueType {\n    return {\n      tensorType: ProtoUtil.tensorDataTypeFromProto(valueType.elemType!),\n      shape: {dims: ProtoUtil.tensorDimsFromProto(valueType.shape!.dim!.map(d => d.dimValue!))}\n    };\n  }\n\n  static tensorDimsFromORTFormat(tensor: onnxruntime.experimental.fbs.Tensor) {\n    const dims = [];\n    for (let i = 0; i < tensor.dimsLength(); i++) {\n      dims.push(LongUtil.longToNumber(tensor.dims(i)!));\n    }\n    return dims;\n  }\n\n  static tensorAttributesFromORTFormat(node: onnxruntime.experimental.fbs.Node) {\n    const attributes = [];\n    for (let i = 0; i < node.attributesLength(); i++) {\n      attributes.push(node.attributes(i)!);\n    }\n    return attributes;\n  }\n}\n\nexport class LongUtil {\n  // This function is called to get a number from long type of data for attribute, dim, and ir version,\n  // which values are signed integers.\n  // To make it more generic, add an optional paramter to convert to a unsigned number.\n  static longToNumber(n: Long|flatbuffers.Long|number, unsigned?: boolean) {\n    if (Long.isLong(n)) {\n      return n.toNumber();\n    } else if (n instanceof flatbuffers.Long) {\n      return Long.fromValue({low: n.low, high: n.high, unsigned: unsigned ?? false}).toNumber();\n    }\n    return n;\n  }\n  static isLong(n: unknown) {\n    return Long.isLong(n) || n instanceof flatbuffers.Long;\n  }\n}\n\nexport class ShapeUtil {\n  static size(dims: readonly number[]): number {\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, dims.length);\n  }\n\n  // `axis` inclusive\n  static sizeFromDimension(dims: readonly number[], axis: number): number {\n    if (axis < 0 || axis > dims.length) {\n      throw new Error(`invalid dimension of ${axis} for sizeFromDimension as Tensor has ${dims.length} dimensions.`);\n    }\n    return ShapeUtil.getSizeFromDimensionRange(dims, axis, dims.length);\n  }\n\n  // `axis` exclusive\n  static sizeToDimension(dims: readonly number[], axis: number): number {\n    if (axis < 0 || axis > dims.length) {\n      throw new Error(`invalid dimension of ${axis} for sizeToDimension as Tensor has ${dims.length} dimensions.`);\n    }\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, axis);\n  }\n\n  static getSizeFromDimensionRange(dims: readonly number[], start: number, end: number): number {\n    let size = 1;\n    for (let i = start; i < end; i++) {\n      // safety check as this method is called by multiple other methods requiring size.\n      // size cannot be 0 or negative.\n      if (dims[i] <= 0) {\n        throw new Error(\n            // eslint-disable-next-line max-len\n            'cannot get valid size from specified dimension range. Most likely the range contains 0 or negative values in them.');\n      }\n      size *= dims[i];\n    }\n    return size;\n  }\n\n  static computeStrides(dims: readonly number[]): readonly number[] {\n    const rank = dims.length;\n    if (rank === 0) {\n      return [];\n    } else if (rank === 1) {\n      return [1];\n    }\n    const strides = new Array(rank);\n    strides[rank - 1] = 1;\n    strides[rank - 2] = dims[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * dims[i + 1];\n    }\n    return strides;\n  }\n\n  static transpose(dims: readonly number[]): readonly number[] {\n    const copy = dims.slice();\n    return copy.reverse();\n  }\n\n  static indicesToOffset(indices: readonly number[], strides: readonly number[], axis?: number): number {\n    if (axis === undefined) {\n      axis = indices.length;\n    }\n    let offset = 0;\n    for (let i = 0; i < axis; ++i) {\n      offset += strides[i] * indices[i];\n    }\n    return offset;\n  }\n\n  static offsetToIndices(offset: number, strides: readonly number[]): readonly number[] {\n    const rank = strides.length;\n    if (rank === 0) {\n      return [];\n    } else if (rank === 1) {\n      return [offset * strides[0]];\n    }\n    const indices: number[] = new Array(strides.length);\n    for (let i = 0; i < indices.length - 1; ++i) {\n      indices[i] = Math.floor(offset / strides[i]);\n      offset -= indices[i] * strides[i];\n    }\n    indices[indices.length - 1] = offset;\n    return indices;\n  }\n\n  /**\n   * normailze axis of range [-r, r) into [0, r).\n   */\n  static normalizeAxis(axis: number, tensorRank: number): number {\n    if (axis < -tensorRank && axis >= tensorRank) {\n      throw new Error('unsupported axis for this operation.');\n    }\n    return axis < 0 ? axis + tensorRank : axis;\n  }\n\n  static normalizeAxes(axes: readonly number[], tensorRank: number): number[] {\n    return axes.map(x => this.normalizeAxis(x, tensorRank));\n  }\n\n  // Increment an index into a tensor (in lexicographic\n  // ordering), wrapping around the specified upper_bound.\n  /**\n   * Increment an index into a tensor (in lexicographic ordering), wrapping around the specified upper_bound.\n   * @param index Given index to increment (Will be mutated)\n   * @param dims The dimensions of the tensor for which the given index corresponds to\n   * @param axisToIncrementOn The 1-indexed axis to increment on. If undefined, axisToIncrementOn == rank\n   */\n  static incrementIndex(index: number[], dims: readonly number[], axisToIncrementOn?: number) {\n    if (dims.length === 0 || index.length === 0) {\n      throw new Error('Index incrementing unsupported for scalar Tensor');\n    }\n    if (axisToIncrementOn === undefined) {\n      axisToIncrementOn = dims.length;\n    } else {\n      if (axisToIncrementOn <= 0 || axisToIncrementOn > dims.length) {\n        throw new Error('Incorrect axis to increment on');\n      }\n    }\n\n    for (let k = axisToIncrementOn - 1; k >= 0; --k) {\n      index[k]++;\n      if (index[k] < dims[k]) {\n        break;\n      }\n      index[k] = 0;\n    }\n  }\n\n  /**\n   * Produces a new dimensions array based on the values in the 'originalDimensions' and 'shape' array\n   * Used in Reshape\n   * @param originalDims Original Shape array\n   * @param shapeHints array containing values to compute the new dimensions\n   * For example:\n   * originalDims = [2,2] and shapeHints = [0,-1] will return [2,2]\n   * originalDims = [2,2] and shapeHints = [4] will return [4]\n   * originalDims = [2,2] and shapeHints = [5] will throw an exception\n   * https://github.com/onnx/onnx/blob/main/docs/Operators.md#Reshape\n   */\n\n  static calculateReshapedDims(originalDims: readonly number[], shapeHints: ArrayLike<number>): number[] {\n    // reshape to a Scalar Tensor\n    if (shapeHints.length === 0) {\n      if (originalDims.length === 0 || ShapeUtil.size(originalDims) === 1) {\n        return [];\n      } else {\n        throw new Error('cannot reshape to a scalar Tensor');\n      }\n    }\n\n    const nDims = shapeHints.length;\n    const reshapedDims = new Array<number>(nDims);\n    let unknownDimension = -1;\n    let newTensorSize = 1;\n    for (let i = 0; i < nDims; i++) {\n      if (shapeHints[i] < -1) {\n        throw new Error('a dimension in shape hints cannot be less than -1');\n      }\n      if (shapeHints[i] === -1) {\n        if (unknownDimension !== -1) {\n          throw new Error('at most one dimension in shape hints can be -1');\n        }\n        unknownDimension = i;\n      } else {\n        if (shapeHints[i] === 0) {\n          if (i >= originalDims.length) {\n            throw new Error('the dimension with value zero exceeds the dimension size of the input tensor');\n          }\n          reshapedDims[i] = originalDims[i];\n        } else {\n          reshapedDims[i] = shapeHints[i];\n        }\n        newTensorSize *= reshapedDims[i];\n      }\n    }\n\n    const oldTensorSize = ShapeUtil.size(originalDims);\n    if (unknownDimension !== -1) {\n      if (oldTensorSize % newTensorSize !== 0) {\n        throw new Error(`the input tensor cannot be reshaped to the requested shape. Input shape: [${\n            originalDims}] Output shape: [${shapeHints}]`);\n      }\n      reshapedDims[unknownDimension] = oldTensorSize / newTensorSize;\n    }\n    // validate sizes from originalDims and reshapedDims match\n    else {\n      if (newTensorSize !== oldTensorSize) {\n        throw new Error('reshapedDims and originalDims don\\'t have matching sizes');\n      }\n    }\n    return reshapedDims;\n  }\n\n  /**\n   * Sorts a given array based on the indices in the Perm array\n   * Used in Transpose\n   * @param a Array to be sorted such as dims or strides\n   * @param perm Perm given; if null a will be reversed\n   */\n  static sortBasedOnPerm(a: readonly number[], perm?: readonly number[]): readonly number[] {\n    if (perm) {\n      return perm.map((v) => a[v]);\n    } else {\n      return a.slice().reverse();\n    }\n  }\n\n  /**\n   * Pads a given shape according to the padding values\n   * @param dims shape of the Tensor to be padded\n   * @param pad pad values\n   */\n  static padShape(dims: readonly number[], pad: readonly number[]): readonly number[] {\n    const rank = dims.length;\n    return dims.map((v, i) => v + pad[i] + pad[i + rank]);\n  }\n\n  /**\n   * Determines if the two shapes are identical\n   * @param shape1\n   * @param shape2\n   */\n  static areEqual(shape1: readonly number[], shape2: readonly number[]): boolean {\n    if (shape1.length !== shape2.length) {\n      return false;\n    }\n    return shape1.every((v, i) => v === shape2[i]);\n  }\n\n  /**\n   * Validates if the given `dims` or `shape` is valid in ONNX.js context and returns data size\n   * @param dims - input `dims` that needs to be checked\n   */\n  static validateDimsAndCalcSize(dims: readonly number[]): number {\n    if (dims.length > 6) {\n      throw new TypeError('Only rank 0 to 6 is supported for tensor shape.');\n    }\n    let size = 1;\n    for (const n of dims) {\n      if (!Number.isInteger(n)) {\n        throw new TypeError(`Invalid shape: ${n} is not an integer`);\n      }\n      if (n < 0 || n > 2147483647) {\n        throw new TypeError(`Invalid shape: length ${n} is not allowed`);\n      }\n      size *= n;\n    }\n    return size;\n  }\n\n  /**\n   * Determines the shape of output tensor y = flatten(x, axis)\n   * @param dims - shape of input tensor\n   * @param axis - flatten axis, in the range [-r, r]\n   */\n  static flattenShape(dims: readonly number[], axis: number): readonly number[] {\n    if (axis < 0) {\n      axis += dims.length;\n    }\n    const total = dims.reduce((x, y) => x * y, 1);\n    const right = dims.slice(axis).reduce((x, y) => x * y, 1);\n    const outputDims = [total / right, right];\n\n    return outputDims;\n  }\n\n  /**\n   * Determines the shape of output tensor y = squeeze(x, axes)\n   * @param dims - shape of input tensor\n   * @param axes - squeeze axes\n   */\n  static squeezeShape(dims: readonly number[], axes: readonly number[]): readonly number[] {\n    const outputDims = new Array<number>();\n\n    // sanity check\n    axes = ShapeUtil.normalizeAxes(axes, dims.length);\n\n    for (let i = 0; i < dims.length; i++) {\n      const inSqueezeList = axes.indexOf(i) >= 0;\n      if (inSqueezeList && dims[i] !== 1) {\n        throw new Error('squeeze an axis of size different than 1');\n      }\n\n      if ((axes.length === 0 && dims[i] > 1) || (axes.length > 0 && !inSqueezeList)) {\n        outputDims.push(dims[i]);\n      }\n    }\n\n    return outputDims;\n  }\n\n  /**\n   * Determines the shape of output tensor y = unsqueeze(x, axes)\n   * @param dims - shape of input tensor\n   * @param axes - unsqueeze axes\n   */\n  static unsqueezeShape(dims: readonly number[], axes: readonly number[]): readonly number[] {\n    const outputDims = new Array<number>(dims.length + axes.length);\n\n    // initialize the array elements to 0\n    outputDims.fill(0);\n\n    // set all axes indices to 1 in outputDims and check for duplicates\n    for (let i = 0; i < axes.length; i++) {\n      const axis = ShapeUtil.normalizeAxis(axes[i], outputDims.length);\n      if (axis >= outputDims.length) {\n        throw new Error('\\'axes\\' has an out of range axis');\n      }\n      if (outputDims[axis] !== 0) {\n        throw new Error('\\'axes\\' has a duplicate axis');\n      }\n\n      outputDims[axis] = 1;\n    }\n\n    // fill in the zero entries of outputDims with the input tensor's shape\n    let inputDimsIterator = 0;\n    for (let i = 0; i < outputDims.length; i++) {\n      if (outputDims[i] === 0) {\n        outputDims[i] = dims[inputDimsIterator++];\n      }\n    }\n\n    // sanity check assertion. 'inputDimsIterator'\n    // should be equal to the length of 'dims'\n    if (inputDimsIterator !== dims.length) {\n      throw new Error('the unsqueezed dimension could not be established');\n    }\n\n    return outputDims;\n  }\n}\n\n// bunch of helper methods that do a variety of math operations\nexport class MathUtil {\n  // y = (x*x) + y\n  static sqr(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] += Math.pow(source[sourceIndex + offset], 2);\n    }\n  }\n\n  // y = ax + y\n  static axpy(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number, alpha: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] += (alpha * source[sourceIndex + offset]);\n    }\n  }\n\n  // y = pow(x, b)\n  static powx(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number, b: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] = Math.pow(source[sourceIndex + offset], b);\n    }\n  }\n\n  // y = x * y\n  static mul(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] = (source[sourceIndex + offset] * target[targetIndex + offset]);\n    }\n  }\n}\n\nexport class SplitUtil {\n  /**\n   * Calculates new Shapes from existing one and the splits given along the axis provides\n   * @param dims Shape of the Tensor to be splitted into two or more Shapes\n   * @param axis The dimension along which the Tensor will be split\n   * @param splits Offsets for the start of each split\n   */\n  static splitShape(dims: readonly number[], axis: number, split: number[], numOutputs?: number):\n      [number[][], number[]] {\n    if (split.length === 0) {\n      if (!numOutputs) {\n        throw new Error('need to know number of outputs when the \\'split\\' attribute is not specified');\n      }\n      SplitUtil.determineSplit(dims[axis], numOutputs, split);\n    }\n\n    const shapes: number[][] = [];\n    const offsets = [0];\n    for (let i = 0; i < split.length; ++i) {\n      if (i !== 0) {\n        offsets.push(offsets[i - 1] + split[i - 1]);\n      }\n      const shape = dims.slice();\n      shape[axis] = split[i];\n      shapes.push(shape);\n    }\n    return [shapes, offsets];\n  }\n\n  static determineSplit(numElementsAlongAxis: number, numOutputs: number, split: number[]) {\n    // If 'split' is not specified by the user, we need to partition the number of elements equally among the outputs\n    if (numElementsAlongAxis % numOutputs !== 0) {\n      throw new Error('cannot split tensor to equal sized parts');\n    }\n    for (let i = 0; i < numOutputs; ++i) {\n      split.push(numElementsAlongAxis / numOutputs);\n    }\n  }\n}\n\nexport class ReduceUtil {\n  /**\n   * Perform reduce operations on the specific operator\n   * @param a Input tensor data\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param keepdims If set to true, the axes which are reduced are left in the\n   *    result as dimensions with size one.\n   * @param op1 The operation to be performed on each element in the tensor\n   * @param op2 The operation to be performed between elements in the tensor\n   */\n  static calcReduce(\n      a: Tensor, axes: number[], keepdims: boolean, op1: (b: number) => number,\n      op2: (a: number, b: number) => number): Tensor {\n    const dims = a.dims.slice(0);\n    // if axes is not set, perform reduce on all axes\n    if (axes.length === 0) {\n      dims.forEach((d, ind) => axes.push(ind));\n    }\n    // get a temporary broadcastable output shape\n    const outputDims = ReduceUtil.calcReduceShape(dims, axes, true);\n\n    // loop through the output and calculate result one by one\n    const size = ShapeUtil.size(outputDims);\n    const y = new Tensor(outputDims, a.type);\n    const strides = ShapeUtil.computeStrides(outputDims);\n    const inputStrides = ShapeUtil.computeStrides(dims);\n    const indicesY = new Array(dims.length);\n    for (let i = 0; i < size; i++) {\n      const indices = ShapeUtil.offsetToIndices(i, strides);\n      // map index\n      BroadcastUtil.fillIndex(indices, dims, indicesY);\n      y.set(\n          indices,\n          ReduceUtil.calcReduceByAxis(\n              a.numberData, axes, dims, 0, ShapeUtil.indicesToOffset(indicesY, inputStrides), op1, op2));\n    }\n\n    if (keepdims) {\n      return y;\n    } else {\n      // keepdims == 0, calculate the expected shape\n      return new Tensor(\n          ReduceUtil.calcReduceShape(dims, axes, keepdims), y.type, undefined, undefined, y.data, y.dataId);\n    }\n  }\n\n  /**\n   * Perform reduce operations on the specific operator on specific axes\n   * @param a Input tensor data\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param dims The input dimension.\n   * @param curAxisInd Index in axes specifying the current dimension along\n   *      which the tensor will be reduced\n   * @param pos The current index of element to perform operation\n   * @param op1 The operation to be performed on each element in the tensor\n   * @param op2 The operation to be performed between elements in the tensor\n   */\n  static calcReduceByAxis(\n      input: Tensor.NumberType, axes: number[], dims: number[], curAxisInd: number, pos: number,\n      op1: (b: number) => number, op2: (a: number, b: number) => number): number {\n    let res = 0;\n    if (curAxisInd >= axes.length) {\n      return op1(input[pos]);\n    }\n    const axis = axes[curAxisInd];\n    const step = axis >= dims.length ? 1 : ShapeUtil.size(dims.slice(axis + 1));\n    for (let i = 0; i < dims[axis]; i++) {\n      res = i === 0 ? ReduceUtil.calcReduceByAxis(input, axes, dims, curAxisInd + 1, pos, op1, op2) :\n                      op2(res, ReduceUtil.calcReduceByAxis(input, axes, dims, curAxisInd + 1, pos, op1, op2));\n      pos += step;\n    }\n    return res;\n  }\n\n  /**\n   * Calculate the expected shape of a reduce operation\n   * @param dims The input tensor dimension\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param keepdims If set to true, the axes which are reduced are left in the\n   *    result as dimensions with size one.\n   */\n  static calcReduceShape(dims: readonly number[], axes: readonly number[], keepDims: boolean): number[] {\n    const outputDims = dims.slice();\n    for (let i = 0; i < axes.length; i++) {\n      if (keepDims) {\n        outputDims[axes[i]] = 1;\n      } else {\n        outputDims[axes[i]] = 0;\n      }\n    }\n    return outputDims.filter(dim => dim !== 0);\n  }\n}\n\nexport class PoolConvUtil {\n  /**\n   * Adjust the kernel, strides, pads to correct rank. Set to default value if not present\n   * @param isGlobalOperator If true, perform global pooling.\n   * @param inputDims The input tensor dimension.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param strides Stride along each axis.\n   * @param dilations Dilation along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   */\n  static adjustPoolAttributes(\n      isGlobalOperator: boolean, inputDims: readonly number[], kernelShape: number[], strides: number[],\n      dilations: number[], pads: number[]) {\n    if (!isGlobalOperator && kernelShape.length !== inputDims.length - 2) {\n      throw new Error('length of specified kernel shapes should be 2 less than length of input dimensions');\n    }\n\n    if (isGlobalOperator) {\n      // adjust kernel shape to cover the input dims\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        if (dim >= kernelShape.length) {\n          kernelShape.push(inputDims[dim + 2]);\n        } else {\n          kernelShape[dim] = inputDims[dim + 2];\n        }\n      }\n    }\n\n    // adjust strides length to match kernel shape length\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (dim < strides.length) {\n        if (strides[dim] < 0) {\n          throw new Error('strides should be greater than or equal to 1');\n        }\n      } else {\n        strides.push(1);\n      }\n    }\n\n    // adjust dilation value\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (dim < dilations.length) {\n        if (dilations[dim] < 0) {\n          throw new Error('dilations should be greater than or equal to 1');\n        }\n      } else {\n        dilations.push(1);\n      }\n    }\n\n    // adjust pads length to match 2 * kernel shape length\n    for (let dim = 0; dim < kernelShape.length * 2; dim++) {\n      if (dim < pads.length) {\n        if (pads[dim] < 0) {\n          throw new Error('pad should be greater than or equal to 1');\n        }\n      } else {\n        pads.push(0);\n      }\n    }\n\n    // sanity checks for values in kernel shapes and pads\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (kernelShape[dim] <= 0) {\n        throw new Error('kernel shapes need to be greater than 0');\n      }\n\n      if (pads[dim] >= kernelShape[dim] || pads[dim + kernelShape.length] >= kernelShape[dim]) {\n        throw new Error('pads should be smaller than kernel');\n      }\n    }\n  }\n\n  // adjust pad values based on 'autoPad' attribute\n  static adjustPadsBasedOnAutoPad(\n      inputDims: readonly number[], strides: readonly number[], dilations: readonly number[],\n      kernelShape: readonly number[], pads: number[], autoPad?: string) {\n    if (!autoPad) {\n      return;\n    }\n\n    if (pads.length !== 2 * (inputDims.length - 2)) {\n      throw new Error('length of pads should be twice the length of data dimensions');\n    }\n\n    if (strides.length !== (inputDims.length - 2)) {\n      throw new Error('length of strides should be the length of data dimensions');\n    }\n\n    if (kernelShape.length !== (inputDims.length - 2)) {\n      throw new Error('length of kernel shapes should be the length of data dimensions');\n    }\n\n    for (let dim = 0; dim < inputDims.length - 2; dim++) {\n      PoolConvUtil.adjustPadAndReturnShape(\n          inputDims[dim + 2], strides[dim], dilations[dim], kernelShape[dim], pads, dim, dim + inputDims.length - 2,\n          autoPad);\n    }\n  }\n\n  /**\n   * Calculate the output shape for Pool ops based on input attributes. (Should be used only for Pool ops)\n   * @param isGlobalOperator If true, perform global pooling.\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\n   * @param strides Stride along each axis.\n   * @param dilations Dilation along each axis.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\n   */\n  static computePoolOutputShape(\n      isGlobalOperator: boolean, inputDims: readonly number[], strides: number[], dilations: number[],\n      kernelShape: number[], pads: number[], autoPad?: string): number[] {\n    if (inputDims.length <= 0) {\n      throw new Error('input shape must be of size greater than 0');\n    }\n\n    // Add batch size and number of channels of output\n    const outputDims = [inputDims[0], inputDims[1]];\n\n    PoolConvUtil.computeShapeHelper(\n        isGlobalOperator, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\n    return outputDims;\n  }\n\n  /**\n   * Calculate the output shape for Conv op based on input attributes. (Should be used only for Conv op)\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\n   * @param filterDims The filter tensor dimension. (inputs[1].dims)\n   * @param strides Stride along each axis.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\n   */\n  static computeConvOutputShape(\n      inputDims: readonly number[], filterDims: readonly number[], strides: number[], dilations: number[],\n      kernelShape: number[], pads: number[], autoPad?: string): number[] {\n    if (inputDims.length <= 0 || filterDims.length <= 0) {\n      throw new Error('invalid input tensor dims or invalid filter tensor dims');\n    }\n\n    // Add batch size and number of channels of output\n    const outputDims = [inputDims[0], filterDims[0]];\n\n    PoolConvUtil.computeShapeHelper(false, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\n    return outputDims;\n  }\n\n  // will compute output shapes for data dimensions ONLY (i.e.) no batch size and channels\n  // called by computePoolOutputShape() and computeConvOutputShape()\n  // adjust pads based on 'autoPad' attribute prior to shape computation\n  private static computeShapeHelper(\n      isGlobalOperator: boolean, inputDims: readonly number[], outputDims: number[], strides: readonly number[],\n      dilations: readonly number[], kernelShape: readonly number[], pads: number[], autoPad?: string) {\n    if (isGlobalOperator) {\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        outputDims.push(1);\n      }\n    } else {\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        outputDims.push(PoolConvUtil.adjustPadAndReturnShape(\n            inputDims[dim + 2], strides[dim], dilations[dim], kernelShape[dim], pads, dim, dim + inputDims.length - 2,\n            autoPad));\n      }\n    }\n  }\n\n  // helper for computeShapeHelper() and adjustPadsBasedOnAutoPad()\n  // adjusts pad value for given 'autoPad' string and computes output shape along a particular dimension\n  private static adjustPadAndReturnShape(\n      inSize: number, stride: number, dilation: number, kernel: number, pads: number[], padHeadIndex: number,\n      padTailIndex: number, autoPad?: string): number {\n    const dkernel = dilation * (kernel - 1) + 1;\n    if (autoPad && autoPad !== 'NOTSET') {\n      switch (autoPad) {\n        case 'VALID':\n          pads[padHeadIndex] = 0;\n          pads[padTailIndex] = 0;\n          return Math.floor(((inSize - dkernel) / stride) + 1);\n        case 'SAME_LOWER':\n        case 'SAME_UPPER':\n          if (dilation !== 1) {\n            throw new Error('Dilation not supported for SAME_UPPER or SAME_LOWER');\n          } else {\n            const legacyTargetSize = (inSize + stride - 1) / stride;\n            const padNeeded = (legacyTargetSize - 1) * stride + kernel - inSize;\n            pads[padHeadIndex] =\n                (autoPad === 'SAME_LOWER') ? Math.floor((padNeeded + 1) / 2) : Math.floor(padNeeded / 2);\n            pads[padTailIndex] = padNeeded - pads[padHeadIndex];\n            return Math.floor(((inSize + padNeeded - kernel) / stride) + 1);\n          }\n        default:\n          throw new Error('Unsupported AutoPad type');\n      }\n    } else {\n      return Math.floor(((inSize + pads[padHeadIndex] + pads[padTailIndex] - dkernel) / stride) + 1);\n    }\n  }\n}\n\nexport const MIN_CLIP = -3.4028234663852886e+38;\nexport const MAX_CLIP = 3.4028234663852886e+38;\n\nexport function decodeUtf8String(buffer: Uint8Array): string {\n  return new TextDecoder().decode(buffer);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n// This file is generated by /js/scripts/update-version.ts\n// Do not modify file content manually.\n\nexport const version = '1.17.0';\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Env, env, InferenceSession} from 'onnxruntime-common';\n\nimport {OrtWasmMessage, SerializableModeldata, SerializableSessionMetadata, SerializableTensor} from './proxy-messages';\nimport * as core from './wasm-core-impl';\nimport {initializeWebAssembly} from './wasm-factory';\n\nconst isProxy = (): boolean => !!env.wasm.proxy && typeof document !== 'undefined';\nlet proxyWorker: Worker|undefined;\nlet initializing = false;\nlet initialized = false;\nlet aborted = false;\n\n// resolve; reject\ntype PromiseCallbacks<T = void> = [(result: T) => void, (reason: unknown) => void];\n\nlet initWasmCallbacks: PromiseCallbacks;\nlet initOrtCallbacks: PromiseCallbacks;\nconst createSessionAllocateCallbacks: Array<PromiseCallbacks<SerializableModeldata>> = [];\nconst createSessionFinalizeCallbacks: Array<PromiseCallbacks<SerializableSessionMetadata>> = [];\nconst createSessionCallbacks: Array<PromiseCallbacks<SerializableSessionMetadata>> = [];\nconst releaseSessionCallbacks: Array<PromiseCallbacks<void>> = [];\nconst runCallbacks: Array<PromiseCallbacks<SerializableTensor[]>> = [];\nconst endProfilingCallbacks: Array<PromiseCallbacks<void>> = [];\n\nconst ensureWorker = (): void => {\n  if (initializing || !initialized || aborted || !proxyWorker) {\n    throw new Error('worker not ready');\n  }\n};\n\nconst onProxyWorkerMessage = (ev: MessageEvent<OrtWasmMessage>): void => {\n  switch (ev.data.type) {\n    case 'init-wasm':\n      initializing = false;\n      if (ev.data.err) {\n        aborted = true;\n        initWasmCallbacks[1](ev.data.err);\n      } else {\n        initialized = true;\n        initWasmCallbacks[0]();\n      }\n      break;\n    case 'init-ort':\n      if (ev.data.err) {\n        initOrtCallbacks[1](ev.data.err);\n      } else {\n        initOrtCallbacks[0]();\n      }\n      break;\n    case 'create_allocate':\n      if (ev.data.err) {\n        createSessionAllocateCallbacks.shift()![1](ev.data.err);\n      } else {\n        createSessionAllocateCallbacks.shift()![0](ev.data.out!);\n      }\n      break;\n    case 'create_finalize':\n      if (ev.data.err) {\n        createSessionFinalizeCallbacks.shift()![1](ev.data.err);\n      } else {\n        createSessionFinalizeCallbacks.shift()![0](ev.data.out!);\n      }\n      break;\n    case 'create':\n      if (ev.data.err) {\n        createSessionCallbacks.shift()![1](ev.data.err);\n      } else {\n        createSessionCallbacks.shift()![0](ev.data.out!);\n      }\n      break;\n    case 'release':\n      if (ev.data.err) {\n        releaseSessionCallbacks.shift()![1](ev.data.err);\n      } else {\n        releaseSessionCallbacks.shift()![0]();\n      }\n      break;\n    case 'run':\n      if (ev.data.err) {\n        runCallbacks.shift()![1](ev.data.err);\n      } else {\n        runCallbacks.shift()![0](ev.data.out!);\n      }\n      break;\n    case 'end-profiling':\n      if (ev.data.err) {\n        endProfilingCallbacks.shift()![1](ev.data.err);\n      } else {\n        endProfilingCallbacks.shift()![0]();\n      }\n      break;\n    default:\n  }\n};\n\nconst scriptSrc = typeof document !== 'undefined' ? (document?.currentScript as HTMLScriptElement)?.src : undefined;\n\nexport const initializeWebAssemblyInstance = async(): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    if (initialized) {\n      return;\n    }\n    if (initializing) {\n      throw new Error('multiple calls to \\'initWasm()\\' detected.');\n    }\n    if (aborted) {\n      throw new Error('previous call to \\'initWasm()\\' failed.');\n    }\n\n    initializing = true;\n\n    // overwrite wasm filepaths\n    if (env.wasm.wasmPaths === undefined) {\n      if (scriptSrc && scriptSrc.indexOf('blob:') !== 0) {\n        env.wasm.wasmPaths = scriptSrc.substr(0, +(scriptSrc).lastIndexOf('/') + 1);\n      }\n    }\n\n    return new Promise<void>((resolve, reject) => {\n      proxyWorker?.terminate();\n      // eslint-disable-next-line @typescript-eslint/no-var-requires, @typescript-eslint/no-require-imports\n      proxyWorker = require('worker-loader?inline=no-fallback!./proxy-worker/main').default() as Worker;\n      proxyWorker.onmessage = onProxyWorkerMessage;\n      initWasmCallbacks = [resolve, reject];\n      const message: OrtWasmMessage = {type: 'init-wasm', in : env.wasm};\n      proxyWorker.postMessage(message);\n    });\n\n  } else {\n    return initializeWebAssembly(env.wasm);\n  }\n};\n\nexport const initializeRuntime = async(env: Env): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<void>((resolve, reject) => {\n      initOrtCallbacks = [resolve, reject];\n      const message: OrtWasmMessage = {type: 'init-ort', in : env};\n      proxyWorker!.postMessage(message);\n    });\n  } else {\n    await core.initRuntime(env);\n  }\n};\n\nexport const createSessionAllocate = async(model: Uint8Array): Promise<SerializableModeldata> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<SerializableModeldata>((resolve, reject) => {\n      createSessionAllocateCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'create_allocate', in : {model}};\n      proxyWorker!.postMessage(message, [model.buffer]);\n    });\n  } else {\n    return core.createSessionAllocate(model);\n  }\n};\n\nexport const createSessionFinalize = async(modeldata: SerializableModeldata, options?: InferenceSession.SessionOptions):\n    Promise<SerializableSessionMetadata> => {\n      if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n        ensureWorker();\n        return new Promise<SerializableSessionMetadata>((resolve, reject) => {\n          createSessionFinalizeCallbacks.push([resolve, reject]);\n          const message: OrtWasmMessage = {type: 'create_finalize', in : {modeldata, options}};\n          proxyWorker!.postMessage(message);\n        });\n      } else {\n        return core.createSessionFinalize(modeldata, options);\n      }\n    };\n\nexport const createSession =\n    async(model: Uint8Array, options?: InferenceSession.SessionOptions): Promise<SerializableSessionMetadata> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<SerializableSessionMetadata>((resolve, reject) => {\n      createSessionCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'create', in : {model, options}};\n      proxyWorker!.postMessage(message, [model.buffer]);\n    });\n  } else {\n    return core.createSession(model, options);\n  }\n};\n\nexport const releaseSession = async(sessionId: number): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<void>((resolve, reject) => {\n      releaseSessionCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'release', in : sessionId};\n      proxyWorker!.postMessage(message);\n    });\n  } else {\n    core.releaseSession(sessionId);\n  }\n};\n\nexport const run = async(\n    sessionId: number, inputIndices: number[], inputs: SerializableTensor[], outputIndices: number[],\n    options: InferenceSession.RunOptions): Promise<SerializableTensor[]> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<SerializableTensor[]>((resolve, reject) => {\n      runCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'run', in : {sessionId, inputIndices, inputs, outputIndices, options}};\n      proxyWorker!.postMessage(message, core.extractTransferableBuffers(inputs));\n    });\n  } else {\n    return core.run(sessionId, inputIndices, inputs, outputIndices, options);\n  }\n};\n\nexport const endProfiling = async(sessionId: number): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<void>((resolve, reject) => {\n      endProfilingCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'end-profiling', in : sessionId};\n      proxyWorker!.postMessage(message);\n    });\n  } else {\n    core.endProfiling(sessionId);\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession} from 'onnxruntime-common';\n\nimport {getInstance} from './wasm-factory';\nimport {allocWasmString, checkLastError, iterateExtraOptions} from './wasm-utils';\n\nexport const setRunOptions = (options: InferenceSession.RunOptions): [number, number[]] => {\n  const wasm = getInstance();\n  let runOptionsHandle = 0;\n  const allocs: number[] = [];\n\n  const runOptions: InferenceSession.RunOptions = options || {};\n\n  try {\n    if (options?.logSeverityLevel === undefined) {\n      runOptions.logSeverityLevel = 2;  // Default to warning\n    } else if (\n        typeof options.logSeverityLevel !== 'number' || !Number.isInteger(options.logSeverityLevel) ||\n        options.logSeverityLevel < 0 || options.logSeverityLevel > 4) {\n      throw new Error(`log serverity level is not valid: ${options.logSeverityLevel}`);\n    }\n\n    if (options?.logVerbosityLevel === undefined) {\n      runOptions.logVerbosityLevel = 0;  // Default to 0\n    } else if (typeof options.logVerbosityLevel !== 'number' || !Number.isInteger(options.logVerbosityLevel)) {\n      throw new Error(`log verbosity level is not valid: ${options.logVerbosityLevel}`);\n    }\n\n    if (options?.terminate === undefined) {\n      runOptions.terminate = false;\n    }\n\n    let tagDataOffset = 0;\n    if (options?.tag !== undefined) {\n      tagDataOffset = allocWasmString(options.tag, allocs);\n    }\n\n    runOptionsHandle = wasm._OrtCreateRunOptions(\n        runOptions.logSeverityLevel!, runOptions.logVerbosityLevel!, !!runOptions.terminate!, tagDataOffset);\n    if (runOptionsHandle === 0) {\n      checkLastError('Can\\'t create run options.');\n    }\n\n    if (options?.extra !== undefined) {\n      iterateExtraOptions(options.extra, '', new WeakSet<Record<string, unknown>>(), (key, value) => {\n        const keyDataOffset = allocWasmString(key, allocs);\n        const valueDataOffset = allocWasmString(value, allocs);\n\n        if (wasm._OrtAddRunConfigEntry(runOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n          checkLastError(`Can't set a run config entry: ${key} - ${value}.`);\n        }\n      });\n    }\n\n    return [runOptionsHandle, allocs];\n  } catch (e) {\n    if (runOptionsHandle !== 0) {\n      wasm._OrtReleaseRunOptions(runOptionsHandle);\n    }\n    allocs.forEach(alloc => wasm._free(alloc));\n    throw e;\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {readFile} from 'fs';\nimport {env, InferenceSession, SessionHandler, Tensor} from 'onnxruntime-common';\nimport {promisify} from 'util';\n\nimport {SerializableModeldata} from './proxy-messages';\nimport {createSession, createSessionAllocate, createSessionFinalize, endProfiling, initializeRuntime, releaseSession, run} from './proxy-wrapper';\n\nlet runtimeInitialized: boolean;\nlet runtimeInitializationPromise: Promise<void>|undefined;\n\nexport class OnnxruntimeWebAssemblySessionHandler implements SessionHandler {\n  private sessionId: number;\n\n  inputNames: string[];\n  outputNames: string[];\n\n  async createSessionAllocate(path: string): Promise<SerializableModeldata> {\n    // fetch model from url and move to wasm heap. The arraybufffer that held the http\n    // response is freed once we return\n    const response = await fetch(path);\n    if (response.status !== 200) {\n      throw new Error(`failed to load model: ${path}`);\n    }\n    const arrayBuffer = await response.arrayBuffer();\n    return createSessionAllocate(new Uint8Array(arrayBuffer));\n  }\n\n  async loadModel(pathOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions): Promise<void> {\n    if (!runtimeInitialized) {\n      if (!runtimeInitializationPromise) {\n        runtimeInitializationPromise = initializeRuntime(env);\n      }\n      await runtimeInitializationPromise;\n      runtimeInitializationPromise = undefined;\n      runtimeInitialized = true;\n    }\n\n    if (typeof pathOrBuffer === 'string') {\n      if (typeof process !== 'undefined' && process.versions && process.versions.node) {\n        // node\n        const model = await promisify(readFile)(pathOrBuffer);\n        [this.sessionId, this.inputNames, this.outputNames] = await createSession(model, options);\n      } else {\n        // browser\n        // fetch model and move to wasm heap.\n        const modelData: SerializableModeldata = await this.createSessionAllocate(pathOrBuffer);\n        // create the session\n        [this.sessionId, this.inputNames, this.outputNames] = await createSessionFinalize(modelData, options);\n      }\n    } else {\n      [this.sessionId, this.inputNames, this.outputNames] = await createSession(pathOrBuffer, options);\n    }\n  }\n\n  async dispose(): Promise<void> {\n    return releaseSession(this.sessionId);\n  }\n\n  async run(feeds: SessionHandler.FeedsType, fetches: SessionHandler.FetchesType, options: InferenceSession.RunOptions):\n      Promise<SessionHandler.ReturnType> {\n    const inputArray: Tensor[] = [];\n    const inputIndices: number[] = [];\n    Object.entries(feeds).forEach(kvp => {\n      const name = kvp[0];\n      const tensor = kvp[1];\n      const index = this.inputNames.indexOf(name);\n      if (index === -1) {\n        throw new Error(`invalid input '${name}'`);\n      }\n      inputArray.push(tensor);\n      inputIndices.push(index);\n    });\n\n    const outputIndices: number[] = [];\n    Object.entries(fetches).forEach(kvp => {\n      const name = kvp[0];\n      // TODO: support pre-allocated output\n      const index = this.outputNames.indexOf(name);\n      if (index === -1) {\n        throw new Error(`invalid output '${name}'`);\n      }\n      outputIndices.push(index);\n    });\n\n    const outputs =\n        await run(this.sessionId, inputIndices, inputArray.map(t => [t.type, t.dims, t.data]), outputIndices, options);\n\n    const result: SessionHandler.ReturnType = {};\n    for (let i = 0; i < outputs.length; i++) {\n      result[this.outputNames[outputIndices[i]]] = new Tensor(outputs[i][0], outputs[i][2], outputs[i][1]);\n    }\n    return result;\n  }\n\n  startProfiling(): void {\n    // TODO: implement profiling\n  }\n\n  endProfiling(): void {\n    void endProfiling(this.sessionId);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession} from 'onnxruntime-common';\n\nimport {getInstance} from './wasm-factory';\nimport {allocWasmString, checkLastError, iterateExtraOptions} from './wasm-utils';\n\nconst getGraphOptimzationLevel = (graphOptimizationLevel: string|unknown): number => {\n  switch (graphOptimizationLevel) {\n    case 'disabled':\n      return 0;\n    case 'basic':\n      return 1;\n    case 'extended':\n      return 2;\n    case 'all':\n      return 99;\n    default:\n      throw new Error(`unsupported graph optimization level: ${graphOptimizationLevel}`);\n  }\n};\n\nconst getExecutionMode = (executionMode: 'sequential'|'parallel'): number => {\n  switch (executionMode) {\n    case 'sequential':\n      return 0;\n    case 'parallel':\n      return 1;\n    default:\n      throw new Error(`unsupported execution mode: ${executionMode}`);\n  }\n};\n\nconst appendDefaultOptions = (options: InferenceSession.SessionOptions): void => {\n  if (!options.extra) {\n    options.extra = {};\n  }\n  if (!options.extra.session) {\n    options.extra.session = {};\n  }\n  const session = options.extra.session as Record<string, string>;\n  if (!session.use_ort_model_bytes_directly) {\n    // eslint-disable-next-line camelcase\n    session.use_ort_model_bytes_directly = '1';\n  }\n\n  // if using JSEP with WebGPU, always disable memory pattern\n  if (options.executionProviders &&\n      options.executionProviders.some(ep => (typeof ep === 'string' ? ep : ep.name) === 'webgpu')) {\n    options.enableMemPattern = false;\n  }\n};\n\nconst setExecutionProviders =\n    (sessionOptionsHandle: number, executionProviders: readonly InferenceSession.ExecutionProviderConfig[],\n     allocs: number[]): void => {\n      for (const ep of executionProviders) {\n        let epName = typeof ep === 'string' ? ep : ep.name;\n\n        // check EP name\n        switch (epName) {\n          case 'xnnpack':\n            epName = 'XNNPACK';\n            break;\n          case 'webnn':\n            epName = 'WEBNN';\n            if (typeof ep !== 'string') {\n              const webnnOptions = ep as InferenceSession.WebNNExecutionProviderOption;\n              if (webnnOptions?.deviceType) {\n                const keyDataOffset = allocWasmString('deviceType', allocs);\n                const valueDataOffset = allocWasmString(webnnOptions.deviceType, allocs);\n                if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !==\n                    0) {\n                  checkLastError(`Can't set a session config entry: 'deviceType' - ${webnnOptions.deviceType}.`);\n                }\n              }\n              if (webnnOptions?.powerPreference) {\n                const keyDataOffset = allocWasmString('powerPreference', allocs);\n                const valueDataOffset = allocWasmString(webnnOptions.powerPreference, allocs);\n                if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !==\n                    0) {\n                  checkLastError(\n                      `Can't set a session config entry: 'powerPreference' - ${webnnOptions.powerPreference}.`);\n                }\n              }\n            }\n            break;\n          case 'webgpu':\n            epName = 'JS';\n            break;\n          case 'wasm':\n          case 'cpu':\n            continue;\n          default:\n            throw new Error(`not supported execution provider: ${epName}`);\n        }\n\n        const epNameDataOffset = allocWasmString(epName, allocs);\n        if (getInstance()._OrtAppendExecutionProvider(sessionOptionsHandle, epNameDataOffset) !== 0) {\n          checkLastError(`Can't append execution provider: ${epName}.`);\n        }\n      }\n    };\n\nexport const setSessionOptions = (options?: InferenceSession.SessionOptions): [number, number[]] => {\n  const wasm = getInstance();\n  let sessionOptionsHandle = 0;\n  const allocs: number[] = [];\n\n  const sessionOptions: InferenceSession.SessionOptions = options || {};\n  appendDefaultOptions(sessionOptions);\n\n  try {\n    const graphOptimizationLevel = getGraphOptimzationLevel(sessionOptions.graphOptimizationLevel ?? 'all');\n    const executionMode = getExecutionMode(sessionOptions.executionMode ?? 'sequential');\n    const logIdDataOffset =\n        typeof sessionOptions.logId === 'string' ? allocWasmString(sessionOptions.logId, allocs) : 0;\n\n    const logSeverityLevel = sessionOptions.logSeverityLevel ?? 2;  // Default to 2 - warning\n    if (!Number.isInteger(logSeverityLevel) || logSeverityLevel < 0 || logSeverityLevel > 4) {\n      throw new Error(`log serverity level is not valid: ${logSeverityLevel}`);\n    }\n\n    const logVerbosityLevel = sessionOptions.logVerbosityLevel ?? 0;  // Default to 0 - verbose\n    if (!Number.isInteger(logVerbosityLevel) || logVerbosityLevel < 0 || logVerbosityLevel > 4) {\n      throw new Error(`log verbosity level is not valid: ${logVerbosityLevel}`);\n    }\n\n    const optimizedModelFilePathOffset = typeof sessionOptions.optimizedModelFilePath === 'string' ?\n        allocWasmString(sessionOptions.optimizedModelFilePath, allocs) :\n        0;\n\n    sessionOptionsHandle = wasm._OrtCreateSessionOptions(\n        graphOptimizationLevel, !!sessionOptions.enableCpuMemArena, !!sessionOptions.enableMemPattern, executionMode,\n        !!sessionOptions.enableProfiling, 0, logIdDataOffset, logSeverityLevel, logVerbosityLevel,\n        optimizedModelFilePathOffset);\n    if (sessionOptionsHandle === 0) {\n      checkLastError('Can\\'t create session options.');\n    }\n\n    if (sessionOptions.executionProviders) {\n      setExecutionProviders(sessionOptionsHandle, sessionOptions.executionProviders, allocs);\n    }\n\n    if (sessionOptions.freeDimensionOverrides) {\n      for (const [name, value] of Object.entries(sessionOptions.freeDimensionOverrides)) {\n        if (typeof name !== 'string') {\n          throw new Error(`free dimension override name must be a string: ${name}`);\n        }\n        if (typeof value !== 'number' || !Number.isInteger(value) || value < 0) {\n          throw new Error(`free dimension override value must be a non-negative integer: ${value}`);\n        }\n        const nameOffset = allocWasmString(name, allocs);\n        if (wasm._OrtAddFreeDimensionOverride(sessionOptionsHandle, nameOffset, value) !== 0) {\n          checkLastError(`Can't set a free dimension override: ${name} - ${value}.`);\n        }\n      }\n    }\n\n    if (sessionOptions.extra !== undefined) {\n      iterateExtraOptions(sessionOptions.extra, '', new WeakSet<Record<string, unknown>>(), (key, value) => {\n        const keyDataOffset = allocWasmString(key, allocs);\n        const valueDataOffset = allocWasmString(value, allocs);\n\n        if (wasm._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n          checkLastError(`Can't set a session config entry: ${key} - ${value}.`);\n        }\n      });\n    }\n\n    return [sessionOptionsHandle, allocs];\n  } catch (e) {\n    if (sessionOptionsHandle !== 0) {\n      wasm._OrtReleaseSessionOptions(sessionOptionsHandle);\n    }\n    allocs.forEach(alloc => wasm._free(alloc));\n    throw e;\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from 'onnxruntime-common';\n\n// This file includes common definitions. They do NOT have dependency on the WebAssembly instance.\n\n/**\n * Copied from ONNX definition. Use this to drop dependency 'onnx_proto' to decrease compiled .js file size.\n */\nexport const enum DataType {\n  undefined = 0,\n  float = 1,\n  uint8 = 2,\n  int8 = 3,\n  uint16 = 4,\n  int16 = 5,\n  int32 = 6,\n  int64 = 7,\n  string = 8,\n  bool = 9,\n  float16 = 10,\n  double = 11,\n  uint32 = 12,\n  uint64 = 13,\n  complex64 = 14,\n  complex128 = 15,\n  bfloat16 = 16\n}\n\n/**\n * Map string tensor data to enum value\n */\nexport const tensorDataTypeStringToEnum = (type: string): DataType => {\n  switch (type) {\n    case 'int8':\n      return DataType.int8;\n    case 'uint8':\n      return DataType.uint8;\n    case 'bool':\n      return DataType.bool;\n    case 'int16':\n      return DataType.int16;\n    case 'uint16':\n      return DataType.uint16;\n    case 'int32':\n      return DataType.int32;\n    case 'uint32':\n      return DataType.uint32;\n    case 'float16':\n      return DataType.float16;\n    case 'float32':\n      return DataType.float;\n    case 'float64':\n      return DataType.double;\n    case 'string':\n      return DataType.string;\n    case 'int64':\n      return DataType.int64;\n    case 'uint64':\n      return DataType.uint64;\n\n    default:\n      throw new Error(`unsupported data type: ${type}`);\n  }\n};\n\n/**\n * Map enum value to string tensor data\n */\nexport const tensorDataTypeEnumToString = (typeProto: DataType): Tensor.Type => {\n  switch (typeProto) {\n    case DataType.int8:\n      return 'int8';\n    case DataType.uint8:\n      return 'uint8';\n    case DataType.bool:\n      return 'bool';\n    case DataType.int16:\n      return 'int16';\n    case DataType.uint16:\n      return 'uint16';\n    case DataType.int32:\n      return 'int32';\n    case DataType.uint32:\n      return 'uint32';\n    case DataType.float16:\n      return 'float16';\n    case DataType.float:\n      return 'float32';\n    case DataType.double:\n      return 'float64';\n    case DataType.string:\n      return 'string';\n    case DataType.int64:\n      return 'int64';\n    case DataType.uint64:\n      return 'uint64';\n\n    default:\n      throw new Error(`unsupported data type: ${typeProto}`);\n  }\n};\n\n/**\n * get tensor element size in bytes by the given data type\n * @returns size in integer or undefined if the data type is not supported\n */\nexport const getTensorElementSize = (dateType: number): number|\n    undefined => [undefined, 4, 1, 1, 2, 2, 4, 8, undefined, 1, 2, 8, 4, 8, undefined, undefined, undefined][dateType];\n\n/**\n * get typed array constructor by the given tensor type\n */\nexport const tensorTypeToTypedArrayConstructor = (type: Tensor.Type): Float32ArrayConstructor|Uint8ArrayConstructor|\n    Int8ArrayConstructor|Uint16ArrayConstructor|Int16ArrayConstructor|Int32ArrayConstructor|BigInt64ArrayConstructor|\n    Uint8ArrayConstructor|Float64ArrayConstructor|Uint32ArrayConstructor|BigUint64ArrayConstructor => {\n      switch (type) {\n        case 'float16':\n          return Uint16Array;\n        case 'float32':\n          return Float32Array;\n        case 'uint8':\n          return Uint8Array;\n        case 'int8':\n          return Int8Array;\n        case 'uint16':\n          return Uint16Array;\n        case 'int16':\n          return Int16Array;\n        case 'int32':\n          return Int32Array;\n        case 'bool':\n          return Uint8Array;\n        case 'float64':\n          return Float64Array;\n        case 'uint32':\n          return Uint32Array;\n        case 'int64':\n          return BigInt64Array;\n        case 'uint64':\n          return BigUint64Array;\n        default:\n          throw new Error(`unsupported type: ${type}`);\n      }\n    };\n\n/**\n * Map string log level to integer value\n */\nexport const logLevelStringToEnum = (logLevel?: 'verbose'|'info'|'warning'|'error'|'fatal'): number => {\n  switch (logLevel) {\n    case 'verbose':\n      return 0;\n    case 'info':\n      return 1;\n    case 'warning':\n      return 2;\n    case 'error':\n      return 3;\n    case 'fatal':\n      return 4;\n    default:\n      throw new Error(`unsupported logging level: ${logLevel}`);\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Env, InferenceSession, Tensor} from 'onnxruntime-common';\n\nimport {SerializableModeldata, SerializableSessionMetadata, SerializableTensor} from './proxy-messages';\nimport {setRunOptions} from './run-options';\nimport {setSessionOptions} from './session-options';\nimport {logLevelStringToEnum, tensorDataTypeEnumToString, tensorDataTypeStringToEnum, tensorTypeToTypedArrayConstructor} from './wasm-common';\nimport {getInstance} from './wasm-factory';\nimport {allocWasmString, checkLastError} from './wasm-utils';\n\n/**\n * get the input/output count of the session.\n * @param sessionHandle the handle representing the session. should be non-zero.\n * @returns a tuple including 2 numbers, representing the input count and output count.\n */\nconst getSessionInputOutputCount = (sessionHandle: number): [number, number] => {\n  const wasm = getInstance();\n  const stack = wasm.stackSave();\n  try {\n    const dataOffset = wasm.stackAlloc(8);\n    const errorCode = wasm._OrtGetInputOutputCount(sessionHandle, dataOffset, dataOffset + 4);\n    if (errorCode !== 0) {\n      checkLastError('Can\\'t get session input/output count.');\n    }\n    return [wasm.HEAP32[dataOffset / 4], wasm.HEAP32[dataOffset / 4 + 1]];\n  } finally {\n    wasm.stackRestore(stack);\n  }\n};\n\n/**\n * initialize ORT environment.\n * @param numThreads SetGlobalIntraOpNumThreads(numThreads)\n * @param loggingLevel CreateEnv(static_cast<OrtLoggingLevel>(logging_level))\n */\nconst initOrt = (numThreads: number, loggingLevel: number): void => {\n  const errorCode = getInstance()._OrtInit(numThreads, loggingLevel);\n  if (errorCode !== 0) {\n    checkLastError('Can\\'t initialize onnxruntime.');\n  }\n};\n\n/**\n * intialize runtime environment.\n * @param env passed in the environment config object.\n */\nexport const initRuntime = async(env: Env): Promise<void> => {\n  // init ORT\n  initOrt(env.wasm.numThreads!, logLevelStringToEnum(env.logLevel));\n\n  if (!BUILD_DEFS.DISABLE_WEBGPU) {\n    // init JSEP if available\n\n    // eslint-disable-next-line @typescript-eslint/no-require-imports, @typescript-eslint/no-var-requires\n    const initJsep = require('./jsep/init').init;\n    await initJsep(getInstance(), env);\n  }\n};\n\n/**\n *  tuple elements are: InferenceSession ID; inputNamesUTF8Encoded; outputNamesUTF8Encoded\n */\ntype SessionMetadata = [number, number[], number[]];\n\nconst activeSessions = new Map<number, SessionMetadata>();\n\n/**\n * allocate the memory and memcpy the model bytes, preparing for creating an instance of InferenceSession.\n * @returns a 2-elements tuple - the pointer and size of the allocated buffer\n */\nexport const createSessionAllocate = (model: Uint8Array): [number, number] => {\n  const wasm = getInstance();\n  const modelDataOffset = wasm._malloc(model.byteLength);\n  if (modelDataOffset === 0) {\n    throw new Error(`Can't create a session. failed to allocate a buffer of size ${model.byteLength}.`);\n  }\n  wasm.HEAPU8.set(model, modelDataOffset);\n  return [modelDataOffset, model.byteLength];\n};\n\n/**\n * create an inference session using the prepared buffer containing the model data.\n * @param modelData a 2-elements tuple containing the pointer and size of the model data buffer.\n * @param options an optional session options object.\n * @returns a 3-elements tuple containing [session handle, input names, output names]\n */\nexport const createSessionFinalize =\n    (modelData: SerializableModeldata, options?: InferenceSession.SessionOptions): SerializableSessionMetadata => {\n      const wasm = getInstance();\n\n      let sessionHandle = 0;\n      let sessionOptionsHandle = 0;\n      let allocs: number[] = [];\n      const inputNamesUTF8Encoded = [];\n      const outputNamesUTF8Encoded = [];\n\n      try {\n        [sessionOptionsHandle, allocs] = setSessionOptions(options);\n\n        sessionHandle = wasm._OrtCreateSession(modelData[0], modelData[1], sessionOptionsHandle);\n        if (sessionHandle === 0) {\n          checkLastError('Can\\'t create a session.');\n        }\n\n        const [inputCount, outputCount] = getSessionInputOutputCount(sessionHandle);\n\n        const inputNames = [];\n        const outputNames = [];\n        for (let i = 0; i < inputCount; i++) {\n          const name = wasm._OrtGetInputName(sessionHandle, i);\n          if (name === 0) {\n            checkLastError('Can\\'t get an input name.');\n          }\n          inputNamesUTF8Encoded.push(name);\n          inputNames.push(wasm.UTF8ToString(name));\n        }\n        for (let i = 0; i < outputCount; i++) {\n          const name = wasm._OrtGetOutputName(sessionHandle, i);\n          if (name === 0) {\n            checkLastError('Can\\'t get an output name.');\n          }\n          outputNamesUTF8Encoded.push(name);\n          outputNames.push(wasm.UTF8ToString(name));\n        }\n\n        activeSessions.set(sessionHandle, [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded]);\n        return [sessionHandle, inputNames, outputNames];\n      } catch (e) {\n        inputNamesUTF8Encoded.forEach(buf => wasm._OrtFree(buf));\n        outputNamesUTF8Encoded.forEach(buf => wasm._OrtFree(buf));\n\n        if (sessionHandle !== 0) {\n          wasm._OrtReleaseSession(sessionHandle);\n        }\n        throw e;\n      } finally {\n        wasm._free(modelData[0]);\n        if (sessionOptionsHandle !== 0) {\n          wasm._OrtReleaseSessionOptions(sessionOptionsHandle);\n        }\n        allocs.forEach(alloc => wasm._free(alloc));\n      }\n    };\n\n\n/**\n * create an instance of InferenceSession.\n * @returns the metadata of InferenceSession. 0-value handle for failure.\n */\nexport const createSession =\n    (model: Uint8Array, options?: InferenceSession.SessionOptions): SerializableSessionMetadata => {\n      const modelData: SerializableModeldata = createSessionAllocate(model);\n      return createSessionFinalize(modelData, options);\n    };\n\nexport const releaseSession = (sessionId: number): void => {\n  const wasm = getInstance();\n  const session = activeSessions.get(sessionId);\n  if (!session) {\n    throw new Error(`cannot release session. invalid session id: ${sessionId}`);\n  }\n  const [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded] = session;\n\n  inputNamesUTF8Encoded.forEach(buf => wasm._OrtFree(buf));\n  outputNamesUTF8Encoded.forEach(buf => wasm._OrtFree(buf));\n  wasm._OrtReleaseSession(sessionHandle);\n  activeSessions.delete(sessionId);\n};\n\n/**\n * perform inference run\n */\nexport const run = async(\n    sessionId: number, inputIndices: number[], inputs: SerializableTensor[], outputIndices: number[],\n    options: InferenceSession.RunOptions): Promise<SerializableTensor[]> => {\n  const wasm = getInstance();\n  const session = activeSessions.get(sessionId);\n  if (!session) {\n    throw new Error(`cannot run inference. invalid session id: ${sessionId}`);\n  }\n  const [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded] = session;\n\n  const inputCount = inputIndices.length;\n  const outputCount = outputIndices.length;\n\n  let runOptionsHandle = 0;\n  let runOptionsAllocs: number[] = [];\n\n  const inputValues: number[] = [];\n  const inputAllocs: number[] = [];\n\n  try {\n    [runOptionsHandle, runOptionsAllocs] = setRunOptions(options);\n\n    // create input tensors\n    for (let i = 0; i < inputCount; i++) {\n      const dataType = inputs[i][0];\n      const dims = inputs[i][1];\n      const data = inputs[i][2];\n\n      let dataOffset: number;\n      let dataByteLength: number;\n\n      if (Array.isArray(data)) {\n        // string tensor\n        dataByteLength = 4 * data.length;\n        dataOffset = wasm._malloc(dataByteLength);\n        inputAllocs.push(dataOffset);\n        let dataIndex = dataOffset / 4;\n        for (let i = 0; i < data.length; i++) {\n          if (typeof data[i] !== 'string') {\n            throw new TypeError(`tensor data at index ${i} is not a string`);\n          }\n          wasm.HEAPU32[dataIndex++] = allocWasmString(data[i], inputAllocs);\n        }\n      } else {\n        dataByteLength = data.byteLength;\n        dataOffset = wasm._malloc(dataByteLength);\n        inputAllocs.push(dataOffset);\n        wasm.HEAPU8.set(new Uint8Array(data.buffer, data.byteOffset, dataByteLength), dataOffset);\n      }\n\n      const stack = wasm.stackSave();\n      const dimsOffset = wasm.stackAlloc(4 * dims.length);\n      try {\n        let dimIndex = dimsOffset / 4;\n        dims.forEach(d => wasm.HEAP32[dimIndex++] = d);\n        const tensor = wasm._OrtCreateTensor(\n            tensorDataTypeStringToEnum(dataType), dataOffset, dataByteLength, dimsOffset, dims.length);\n        if (tensor === 0) {\n          checkLastError(`Can't create tensor for input[${i}].`);\n        }\n        inputValues.push(tensor);\n      } finally {\n        wasm.stackRestore(stack);\n      }\n    }\n\n    const beforeRunStack = wasm.stackSave();\n    const inputValuesOffset = wasm.stackAlloc(inputCount * 4);\n    const inputNamesOffset = wasm.stackAlloc(inputCount * 4);\n    const outputValuesOffset = wasm.stackAlloc(outputCount * 4);\n    const outputNamesOffset = wasm.stackAlloc(outputCount * 4);\n\n    try {\n      let inputValuesIndex = inputValuesOffset / 4;\n      let inputNamesIndex = inputNamesOffset / 4;\n      let outputValuesIndex = outputValuesOffset / 4;\n      let outputNamesIndex = outputNamesOffset / 4;\n      for (let i = 0; i < inputCount; i++) {\n        wasm.HEAPU32[inputValuesIndex++] = inputValues[i];\n        wasm.HEAPU32[inputNamesIndex++] = inputNamesUTF8Encoded[inputIndices[i]];\n      }\n      for (let i = 0; i < outputCount; i++) {\n        wasm.HEAPU32[outputValuesIndex++] = 0;\n        wasm.HEAPU32[outputNamesIndex++] = outputNamesUTF8Encoded[outputIndices[i]];\n      }\n\n      // jsepOnRunStart is only available when JSEP is enabled.\n      wasm.jsepOnRunStart?.(sessionId);\n\n      // support RunOptions\n      let errorCode = wasm._OrtRun(\n          sessionHandle, inputNamesOffset, inputValuesOffset, inputCount, outputNamesOffset, outputCount,\n          outputValuesOffset, runOptionsHandle);\n\n      const runPromise = wasm.jsepRunPromise;\n      if (runPromise) {\n        // jsepRunPromise is a Promise object. It is only available when JSEP is enabled.\n        //\n        // OrtRun() is a synchrnous call, but it internally calls async functions. Emscripten's ASYNCIFY allows it to\n        // work in this way. However, OrtRun() does not return a promise, so when code reaches here, it is earlier than\n        // the async functions are finished.\n        //\n        // To make it work, we created a Promise and resolve the promise when the C++ code actually reaches the end of\n        // OrtRun(). If the promise exists, we need to await for the promise to be resolved.\n        errorCode = await runPromise;\n      }\n\n      const jsepOnRunEnd = wasm.jsepOnRunEnd;\n      if (jsepOnRunEnd) {\n        // jsepOnRunEnd is only available when JSEP is enabled.\n        //\n        // it returns a promise, which is resolved or rejected when the following async functions are finished:\n        // - collecting GPU validation errors.\n        await jsepOnRunEnd(sessionId);\n      }\n\n      const output: SerializableTensor[] = [];\n\n      if (errorCode !== 0) {\n        checkLastError('failed to call OrtRun().');\n      }\n\n      for (let i = 0; i < outputCount; i++) {\n        const tensor = wasm.HEAPU32[outputValuesOffset / 4 + i];\n\n        const beforeGetTensorDataStack = wasm.stackSave();\n        // stack allocate 4 pointer value\n        const tensorDataOffset = wasm.stackAlloc(4 * 4);\n\n        let type: Tensor.Type|undefined, dataOffset = 0;\n        try {\n          errorCode = wasm._OrtGetTensorData(\n              tensor, tensorDataOffset, tensorDataOffset + 4, tensorDataOffset + 8, tensorDataOffset + 12);\n          if (errorCode !== 0) {\n            checkLastError(`Can't access output tensor data on index ${i}.`);\n          }\n          let tensorDataIndex = tensorDataOffset / 4;\n          const dataType = wasm.HEAPU32[tensorDataIndex++];\n          dataOffset = wasm.HEAPU32[tensorDataIndex++];\n          const dimsOffset = wasm.HEAPU32[tensorDataIndex++];\n          const dimsLength = wasm.HEAPU32[tensorDataIndex++];\n          const dims = [];\n          for (let i = 0; i < dimsLength; i++) {\n            dims.push(wasm.HEAPU32[dimsOffset / 4 + i]);\n          }\n          wasm._OrtFree(dimsOffset);\n\n          const size = dims.length === 0 ? 1 : dims.reduce((a, b) => a * b);\n          type = tensorDataTypeEnumToString(dataType);\n          if (type === 'string') {\n            const stringData: string[] = [];\n            let dataIndex = dataOffset / 4;\n            for (let i = 0; i < size; i++) {\n              const offset = wasm.HEAPU32[dataIndex++];\n              const maxBytesToRead = i === size - 1 ? undefined : wasm.HEAPU32[dataIndex] - offset;\n              stringData.push(wasm.UTF8ToString(offset, maxBytesToRead));\n            }\n            output.push([type, dims, stringData]);\n          } else {\n            const typedArrayConstructor = tensorTypeToTypedArrayConstructor(type);\n            const data = new typedArrayConstructor(size);\n            new Uint8Array(data.buffer, data.byteOffset, data.byteLength)\n                .set(wasm.HEAPU8.subarray(dataOffset, dataOffset + data.byteLength));\n            output.push([type, dims, data]);\n          }\n        } finally {\n          wasm.stackRestore(beforeGetTensorDataStack);\n          if (type === 'string' && dataOffset) {\n            wasm._free(dataOffset);\n          }\n          wasm._OrtReleaseTensor(tensor);\n        }\n      }\n\n      return output;\n    } finally {\n      wasm.stackRestore(beforeRunStack);\n    }\n  } finally {\n    inputValues.forEach(v => wasm._OrtReleaseTensor(v));\n    inputAllocs.forEach(p => wasm._free(p));\n\n    if (runOptionsHandle !== 0) {\n      wasm._OrtReleaseRunOptions(runOptionsHandle);\n    }\n    runOptionsAllocs.forEach(p => wasm._free(p));\n  }\n};\n\n/**\n * end profiling\n */\nexport const endProfiling = (sessionId: number): void => {\n  const wasm = getInstance();\n  const session = activeSessions.get(sessionId);\n  if (!session) {\n    throw new Error('invalid session id');\n  }\n  const sessionHandle = session[0];\n\n  // profile file name is not used yet, but it must be freed.\n  const profileFileName = wasm._OrtEndProfiling(sessionHandle);\n  if (profileFileName === 0) {\n    checkLastError('Can\\'t get an profile file name.');\n  }\n  wasm._OrtFree(profileFileName);\n};\n\nexport const extractTransferableBuffers = (tensors: readonly SerializableTensor[]): ArrayBufferLike[] => {\n  const buffers: ArrayBufferLike[] = [];\n  for (const tensor of tensors) {\n    const data = tensor[2];\n    if (!Array.isArray(data) && data.buffer) {\n      buffers.push(data.buffer);\n    }\n  }\n  return buffers;\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Env} from 'onnxruntime-common';\nimport * as path from 'path';\n\nimport {OrtWasmModule} from './binding/ort-wasm';\nimport {OrtWasmThreadedModule} from './binding/ort-wasm-threaded';\n\n/* eslint-disable @typescript-eslint/no-require-imports */\nconst ortWasmFactory: EmscriptenModuleFactory<OrtWasmModule> =\n    BUILD_DEFS.DISABLE_WEBGPU ? require('./binding/ort-wasm.js') : require('./binding/ort-wasm-simd.jsep.js');\n\nconst ortWasmFactoryThreaded: EmscriptenModuleFactory<OrtWasmModule> = !BUILD_DEFS.DISABLE_WASM_THREAD ?\n    (BUILD_DEFS.DISABLE_WEBGPU ? require('./binding/ort-wasm-threaded.js') :\n                                 require('./binding/ort-wasm-simd-threaded.jsep.js')) :\n    ortWasmFactory;\n/* eslint-enable @typescript-eslint/no-require-imports */\n\nlet wasm: OrtWasmModule|undefined;\nlet initialized = false;\nlet initializing = false;\nlet aborted = false;\n\nconst isMultiThreadSupported = (): boolean => {\n  try {\n    // If 'SharedArrayBuffer' is not available, WebAssembly threads will not work.\n    if (typeof SharedArrayBuffer === 'undefined') {\n      return false;\n    }\n\n    // Test for transferability of SABs (for browsers. needed for Firefox)\n    // https://groups.google.com/forum/#!msg/mozilla.dev.platform/IHkBZlHETpA/dwsMNchWEQAJ\n    if (typeof MessageChannel !== 'undefined') {\n      new MessageChannel().port1.postMessage(new SharedArrayBuffer(1));\n    }\n\n    // Test for WebAssembly threads capability (for both browsers and Node.js)\n    // This typed array is a WebAssembly program containing threaded instructions.\n    return WebAssembly.validate(new Uint8Array([\n      0, 97, 115, 109, 1, 0,  0,  0, 1, 4, 1,  96, 0,   0,  3, 2, 1,  0, 5,\n      4, 1,  3,   1,   1, 10, 11, 1, 9, 0, 65, 0,  254, 16, 2, 0, 26, 11\n    ]));\n  } catch (e) {\n    return false;\n  }\n};\n\nconst isSimdSupported = (): boolean => {\n  try {\n    // Test for WebAssembly SIMD capability (for both browsers and Node.js)\n    // This typed array is a WebAssembly program containing SIMD instructions.\n\n    // The binary data is generated from the following code by wat2wasm:\n    //\n    // (module\n    //   (type $t0 (func))\n    //   (func $f0 (type $t0)\n    //     (drop\n    //       (i32x4.dot_i16x8_s\n    //         (i8x16.splat\n    //           (i32.const 0))\n    //         (v128.const i32x4 0x00000000 0x00000000 0x00000000 0x00000000)))))\n\n    return WebAssembly.validate(new Uint8Array([\n      0,   97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 10, 30, 1,   28,  0, 65, 0,\n      253, 15, 253, 12,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0,  0,  253, 186, 1, 26, 11\n    ]));\n  } catch (e) {\n    return false;\n  }\n};\n\nconst getWasmFileName = (useSimd: boolean, useThreads: boolean) => {\n  if (useThreads) {\n    return useSimd ? 'ort-wasm-simd-threaded.wasm' : 'ort-wasm-threaded.wasm';\n  } else {\n    return useSimd ? 'ort-wasm-simd.wasm' : 'ort-wasm.wasm';\n  }\n};\n\nexport const initializeWebAssembly = async(flags: Env.WebAssemblyFlags): Promise<void> => {\n  if (initialized) {\n    return Promise.resolve();\n  }\n  if (initializing) {\n    throw new Error('multiple calls to \\'initializeWebAssembly()\\' detected.');\n  }\n  if (aborted) {\n    throw new Error('previous call to \\'initializeWebAssembly()\\' failed.');\n  }\n\n  initializing = true;\n\n  // wasm flags are already initialized\n  const timeout = flags.initTimeout!;\n  const numThreads = flags.numThreads!;\n  const simd = flags.simd!;\n\n  const useThreads = numThreads > 1 && isMultiThreadSupported();\n  const useSimd = simd && isSimdSupported();\n\n  const wasmPaths = flags.wasmPaths;\n  const wasmPrefixOverride = typeof wasmPaths === 'string' ? wasmPaths : undefined;\n  const wasmFileName = getWasmFileName(useSimd, useThreads);\n  const wasmPathOverride = typeof wasmPaths === 'object' ? wasmPaths[wasmFileName] : undefined;\n\n  let isTimeout = false;\n\n  const tasks: Array<Promise<void>> = [];\n\n  // promise for timeout\n  if (timeout > 0) {\n    tasks.push(new Promise((resolve) => {\n      setTimeout(() => {\n        isTimeout = true;\n        resolve();\n      }, timeout);\n    }));\n  }\n\n  // promise for module initialization\n  tasks.push(new Promise((resolve, reject) => {\n    const factory = useThreads ? ortWasmFactoryThreaded : ortWasmFactory;\n    const config: Partial<OrtWasmModule> = {\n      locateFile: (fileName: string, scriptDirectory: string) => {\n        if (!BUILD_DEFS.DISABLE_WASM_THREAD && useThreads && fileName.endsWith('.worker.js') &&\n            typeof Blob !== 'undefined') {\n          return URL.createObjectURL(new Blob(\n              [\n                // This require() function is handled by webpack to load file content of the corresponding .worker.js\n                // eslint-disable-next-line @typescript-eslint/no-require-imports\n                require('./binding/ort-wasm-threaded.worker.js')\n              ],\n              {type: 'text/javascript'}));\n        }\n\n        if (fileName.endsWith('.wasm')) {\n          if (wasmPathOverride) {\n            return wasmPathOverride;\n          }\n\n          const prefix = wasmPrefixOverride ?? scriptDirectory;\n\n          if (!BUILD_DEFS.DISABLE_WEBGPU) {\n            if (wasmFileName === 'ort-wasm-simd.wasm') {\n              return prefix + 'ort-wasm-simd.jsep.wasm';\n            } else if (wasmFileName === 'ort-wasm-simd-threaded.wasm') {\n              return prefix + 'ort-wasm-simd-threaded.jsep.wasm';\n            }\n          }\n\n          return prefix + wasmFileName;\n        }\n\n        return scriptDirectory + fileName;\n      }\n    };\n\n    if (!BUILD_DEFS.DISABLE_WASM_THREAD && useThreads) {\n      if (typeof Blob === 'undefined') {\n        config.mainScriptUrlOrBlob = path.join(__dirname, 'ort-wasm-threaded.js');\n      } else {\n        const scriptSourceCode = `var ortWasmThreaded=(function(){var _scriptDir;return ${factory.toString()}})();`;\n        config.mainScriptUrlOrBlob = new Blob([scriptSourceCode], {type: 'text/javascript'});\n      }\n    }\n\n    factory(config).then(\n        // wasm module initialized successfully\n        module => {\n          initializing = false;\n          initialized = true;\n          wasm = module;\n          resolve();\n        },\n        // wasm module failed to initialize\n        (what) => {\n          initializing = false;\n          aborted = true;\n          reject(what);\n        });\n  }));\n\n  await Promise.race(tasks);\n\n  if (isTimeout) {\n    throw new Error(`WebAssembly backend initializing failed due to timeout: ${timeout}ms`);\n  }\n};\n\nexport const getInstance = (): OrtWasmModule => {\n  if (initialized && wasm) {\n    return wasm;\n  }\n\n  throw new Error('WebAssembly is not initialized yet.');\n};\n\nexport const dispose = (): void => {\n  if (initialized && !initializing && !aborted) {\n    initializing = true;\n\n    (wasm as OrtWasmThreadedModule).PThread?.terminateAllThreads();\n    wasm = undefined;\n\n    initializing = false;\n    initialized = false;\n    aborted = true;\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {getInstance} from './wasm-factory';\n\nexport const allocWasmString = (data: string, allocs: number[]): number => {\n  const wasm = getInstance();\n\n  const dataLength = wasm.lengthBytesUTF8(data) + 1;\n  const dataOffset = wasm._malloc(dataLength);\n  wasm.stringToUTF8(data, dataOffset, dataLength);\n  allocs.push(dataOffset);\n\n  return dataOffset;\n};\n\ninterface ExtraOptionsHandler {\n  (name: string, value: string): void;\n}\n\nexport const iterateExtraOptions =\n    (options: Record<string, unknown>, prefix: string, seen: WeakSet<Record<string, unknown>>,\n     handler: ExtraOptionsHandler): void => {\n      if (typeof options == 'object' && options !== null) {\n        if (seen.has(options)) {\n          throw new Error('Circular reference in options');\n        } else {\n          seen.add(options);\n        }\n      }\n\n      Object.entries(options).forEach(([key, value]) => {\n        const name = (prefix) ? prefix + key : key;\n        if (typeof value === 'object') {\n          iterateExtraOptions(value as Record<string, unknown>, name + '.', seen, handler);\n        } else if (typeof value === 'string' || typeof value === 'number') {\n          handler(name, value.toString());\n        } else if (typeof value === 'boolean') {\n          handler(name, (value) ? '1' : '0');\n        } else {\n          throw new Error(`Can't handle extra config type: ${typeof value}`);\n        }\n      });\n    };\n\n/**\n * check web assembly API's last error and throw error if any error occurred.\n * @param message a message used when an error occurred.\n */\nexport const checkLastError = (message: string): void => {\n  const wasm = getInstance();\n\n  const stack = wasm.stackSave();\n  try {\n    const paramsOffset = wasm.stackAlloc(8);\n    wasm._OrtGetLastError(paramsOffset, paramsOffset + 4);\n    const errorCode = wasm.HEAP32[paramsOffset / 4];\n    const errorMessagePointer = wasm.HEAPU32[paramsOffset / 4 + 1];\n    const errorMessage = errorMessagePointer ? wasm.UTF8ToString(errorMessagePointer) : '';\n    throw new Error(`${message} ERROR_CODE: ${errorCode}, ERROR_MESSAGE: ${errorMessage}`);\n  } finally {\n    wasm.stackRestore(stack);\n  }\n};\n","\nimport worker from \"!!../../../../node_modules/worker-loader/dist/runtime/inline.js\";\n\nexport default function Worker_fn() {\n  return worker(\"/*!\\n* ONNX Runtime Web v1.17.0\\n* Copyright (c) Microsoft Corporation. All rights reserved.\\n* Licensed under the MIT License.\\n*/\\n(()=>{var e={918:(e,t,r)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.setRunOptions=void 0;const n=r(263),a=r(497);t.setRunOptions=e=>{const t=(0,n.getInstance)();let r=0;const o=[],i=e||{};try{if(void 0===(null==e?void 0:e.logSeverityLevel))i.logSeverityLevel=2;else if(\\\"number\\\"!=typeof e.logSeverityLevel||!Number.isInteger(e.logSeverityLevel)||e.logSeverityLevel<0||e.logSeverityLevel>4)throw new Error(`log serverity level is not valid: ${e.logSeverityLevel}`);if(void 0===(null==e?void 0:e.logVerbosityLevel))i.logVerbosityLevel=0;else if(\\\"number\\\"!=typeof e.logVerbosityLevel||!Number.isInteger(e.logVerbosityLevel))throw new Error(`log verbosity level is not valid: ${e.logVerbosityLevel}`);void 0===(null==e?void 0:e.terminate)&&(i.terminate=!1);let n=0;return void 0!==(null==e?void 0:e.tag)&&(n=(0,a.allocWasmString)(e.tag,o)),r=t._OrtCreateRunOptions(i.logSeverityLevel,i.logVerbosityLevel,!!i.terminate,n),0===r&&(0,a.checkLastError)(\\\"Can't create run options.\\\"),void 0!==(null==e?void 0:e.extra)&&(0,a.iterateExtraOptions)(e.extra,\\\"\\\",new WeakSet,((e,n)=>{const i=(0,a.allocWasmString)(e,o),s=(0,a.allocWasmString)(n,o);0!==t._OrtAddRunConfigEntry(r,i,s)&&(0,a.checkLastError)(`Can't set a run config entry: ${e} - ${n}.`)})),[r,o]}catch(e){throw 0!==r&&t._OrtReleaseRunOptions(r),o.forEach((e=>t._free(e))),e}}},622:(e,t,r)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.setSessionOptions=void 0;const n=r(263),a=r(497);t.setSessionOptions=e=>{var t,r,o,i;const s=(0,n.getInstance)();let u=0;const c=[],l=e||{};(e=>{e.extra||(e.extra={}),e.extra.session||(e.extra.session={});const t=e.extra.session;t.use_ort_model_bytes_directly||(t.use_ort_model_bytes_directly=\\\"1\\\"),e.executionProviders&&e.executionProviders.some((e=>\\\"webgpu\\\"===(\\\"string\\\"==typeof e?e:e.name)))&&(e.enableMemPattern=!1)})(l);try{const e=(e=>{switch(e){case\\\"disabled\\\":return 0;case\\\"basic\\\":return 1;case\\\"extended\\\":return 2;case\\\"all\\\":return 99;default:throw new Error(`unsupported graph optimization level: ${e}`)}})(null!==(t=l.graphOptimizationLevel)&&void 0!==t?t:\\\"all\\\"),f=(e=>{switch(e){case\\\"sequential\\\":return 0;case\\\"parallel\\\":return 1;default:throw new Error(`unsupported execution mode: ${e}`)}})(null!==(r=l.executionMode)&&void 0!==r?r:\\\"sequential\\\"),d=\\\"string\\\"==typeof l.logId?(0,a.allocWasmString)(l.logId,c):0,p=null!==(o=l.logSeverityLevel)&&void 0!==o?o:2;if(!Number.isInteger(p)||p<0||p>4)throw new Error(`log serverity level is not valid: ${p}`);const g=null!==(i=l.logVerbosityLevel)&&void 0!==i?i:0;if(!Number.isInteger(g)||g<0||g>4)throw new Error(`log verbosity level is not valid: ${g}`);const h=\\\"string\\\"==typeof l.optimizedModelFilePath?(0,a.allocWasmString)(l.optimizedModelFilePath,c):0;if(u=s._OrtCreateSessionOptions(e,!!l.enableCpuMemArena,!!l.enableMemPattern,f,!!l.enableProfiling,0,d,p,g,h),0===u&&(0,a.checkLastError)(\\\"Can't create session options.\\\"),l.executionProviders&&((e,t,r)=>{for(const o of t){let t=\\\"string\\\"==typeof o?o:o.name;switch(t){case\\\"xnnpack\\\":t=\\\"XNNPACK\\\";break;case\\\"webnn\\\":if(t=\\\"WEBNN\\\",\\\"string\\\"!=typeof o){const t=o;if(null==t?void 0:t.deviceType){const o=(0,a.allocWasmString)(\\\"deviceType\\\",r),i=(0,a.allocWasmString)(t.deviceType,r);0!==(0,n.getInstance)()._OrtAddSessionConfigEntry(e,o,i)&&(0,a.checkLastError)(`Can't set a session config entry: 'deviceType' - ${t.deviceType}.`)}if(null==t?void 0:t.powerPreference){const o=(0,a.allocWasmString)(\\\"powerPreference\\\",r),i=(0,a.allocWasmString)(t.powerPreference,r);0!==(0,n.getInstance)()._OrtAddSessionConfigEntry(e,o,i)&&(0,a.checkLastError)(`Can't set a session config entry: 'powerPreference' - ${t.powerPreference}.`)}}break;case\\\"webgpu\\\":t=\\\"JS\\\";break;case\\\"wasm\\\":case\\\"cpu\\\":continue;default:throw new Error(`not supported execution provider: ${t}`)}const i=(0,a.allocWasmString)(t,r);0!==(0,n.getInstance)()._OrtAppendExecutionProvider(e,i)&&(0,a.checkLastError)(`Can't append execution provider: ${t}.`)}})(u,l.executionProviders,c),l.freeDimensionOverrides)for(const[e,t]of Object.entries(l.freeDimensionOverrides)){if(\\\"string\\\"!=typeof e)throw new Error(`free dimension override name must be a string: ${e}`);if(\\\"number\\\"!=typeof t||!Number.isInteger(t)||t<0)throw new Error(`free dimension override value must be a non-negative integer: ${t}`);const r=(0,a.allocWasmString)(e,c);0!==s._OrtAddFreeDimensionOverride(u,r,t)&&(0,a.checkLastError)(`Can't set a free dimension override: ${e} - ${t}.`)}return void 0!==l.extra&&(0,a.iterateExtraOptions)(l.extra,\\\"\\\",new WeakSet,((e,t)=>{const r=(0,a.allocWasmString)(e,c),n=(0,a.allocWasmString)(t,c);0!==s._OrtAddSessionConfigEntry(u,r,n)&&(0,a.checkLastError)(`Can't set a session config entry: ${e} - ${t}.`)})),[u,c]}catch(e){throw 0!==u&&s._OrtReleaseSessionOptions(u),c.forEach((e=>s._free(e))),e}}},917:(e,t)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.logLevelStringToEnum=t.tensorTypeToTypedArrayConstructor=t.getTensorElementSize=t.tensorDataTypeEnumToString=t.tensorDataTypeStringToEnum=void 0,t.tensorDataTypeStringToEnum=e=>{switch(e){case\\\"int8\\\":return 3;case\\\"uint8\\\":return 2;case\\\"bool\\\":return 9;case\\\"int16\\\":return 5;case\\\"uint16\\\":return 4;case\\\"int32\\\":return 6;case\\\"uint32\\\":return 12;case\\\"float16\\\":return 10;case\\\"float32\\\":return 1;case\\\"float64\\\":return 11;case\\\"string\\\":return 8;case\\\"int64\\\":return 7;case\\\"uint64\\\":return 13;default:throw new Error(`unsupported data type: ${e}`)}},t.tensorDataTypeEnumToString=e=>{switch(e){case 3:return\\\"int8\\\";case 2:return\\\"uint8\\\";case 9:return\\\"bool\\\";case 5:return\\\"int16\\\";case 4:return\\\"uint16\\\";case 6:return\\\"int32\\\";case 12:return\\\"uint32\\\";case 10:return\\\"float16\\\";case 1:return\\\"float32\\\";case 11:return\\\"float64\\\";case 8:return\\\"string\\\";case 7:return\\\"int64\\\";case 13:return\\\"uint64\\\";default:throw new Error(`unsupported data type: ${e}`)}},t.getTensorElementSize=e=>[void 0,4,1,1,2,2,4,8,void 0,1,2,8,4,8,void 0,void 0,void 0][e],t.tensorTypeToTypedArrayConstructor=e=>{switch(e){case\\\"float16\\\":case\\\"uint16\\\":return Uint16Array;case\\\"float32\\\":return Float32Array;case\\\"uint8\\\":case\\\"bool\\\":return Uint8Array;case\\\"int8\\\":return Int8Array;case\\\"int16\\\":return Int16Array;case\\\"int32\\\":return Int32Array;case\\\"float64\\\":return Float64Array;case\\\"uint32\\\":return Uint32Array;case\\\"int64\\\":return BigInt64Array;case\\\"uint64\\\":return BigUint64Array;default:throw new Error(`unsupported type: ${e}`)}},t.logLevelStringToEnum=e=>{switch(e){case\\\"verbose\\\":return 0;case\\\"info\\\":return 1;case\\\"warning\\\":return 2;case\\\"error\\\":return 3;case\\\"fatal\\\":return 4;default:throw new Error(`unsupported logging level: ${e}`)}}},259:(e,t,r)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.extractTransferableBuffers=t.endProfiling=t.run=t.releaseSession=t.createSession=t.createSessionFinalize=t.createSessionAllocate=t.initRuntime=void 0;const n=r(918),a=r(622),o=r(917),i=r(263),s=r(497);t.initRuntime=async e=>{var t,r;t=e.wasm.numThreads,r=(0,o.logLevelStringToEnum)(e.logLevel),0!==(0,i.getInstance)()._OrtInit(t,r)&&(0,s.checkLastError)(\\\"Can't initialize onnxruntime.\\\")};const u=new Map;t.createSessionAllocate=e=>{const t=(0,i.getInstance)(),r=t._malloc(e.byteLength);if(0===r)throw new Error(`Can't create a session. failed to allocate a buffer of size ${e.byteLength}.`);return t.HEAPU8.set(e,r),[r,e.byteLength]},t.createSessionFinalize=(e,t)=>{const r=(0,i.getInstance)();let n=0,o=0,c=[];const l=[],f=[];try{[o,c]=(0,a.setSessionOptions)(t),n=r._OrtCreateSession(e[0],e[1],o),0===n&&(0,s.checkLastError)(\\\"Can't create a session.\\\");const[d,p]=(e=>{const t=(0,i.getInstance)(),r=t.stackSave();try{const r=t.stackAlloc(8);return 0!==t._OrtGetInputOutputCount(e,r,r+4)&&(0,s.checkLastError)(\\\"Can't get session input/output count.\\\"),[t.HEAP32[r/4],t.HEAP32[r/4+1]]}finally{t.stackRestore(r)}})(n),g=[],h=[];for(let e=0;e<d;e++){const t=r._OrtGetInputName(n,e);0===t&&(0,s.checkLastError)(\\\"Can't get an input name.\\\"),l.push(t),g.push(r.UTF8ToString(t))}for(let e=0;e<p;e++){const t=r._OrtGetOutputName(n,e);0===t&&(0,s.checkLastError)(\\\"Can't get an output name.\\\"),f.push(t),h.push(r.UTF8ToString(t))}return u.set(n,[n,l,f]),[n,g,h]}catch(e){throw l.forEach((e=>r._OrtFree(e))),f.forEach((e=>r._OrtFree(e))),0!==n&&r._OrtReleaseSession(n),e}finally{r._free(e[0]),0!==o&&r._OrtReleaseSessionOptions(o),c.forEach((e=>r._free(e)))}},t.createSession=(e,r)=>{const n=(0,t.createSessionAllocate)(e);return(0,t.createSessionFinalize)(n,r)},t.releaseSession=e=>{const t=(0,i.getInstance)(),r=u.get(e);if(!r)throw new Error(`cannot release session. invalid session id: ${e}`);const[n,a,o]=r;a.forEach((e=>t._OrtFree(e))),o.forEach((e=>t._OrtFree(e))),t._OrtReleaseSession(n),u.delete(e)},t.run=async(e,t,r,a,c)=>{var l;const f=(0,i.getInstance)(),d=u.get(e);if(!d)throw new Error(`cannot run inference. invalid session id: ${e}`);const[p,g,h]=d,m=t.length,y=a.length;let v=0,b=[];const w=[],_=[];try{[v,b]=(0,n.setRunOptions)(c);for(let e=0;e<m;e++){const t=r[e][0],n=r[e][1],a=r[e][2];let i,u;if(Array.isArray(a)){u=4*a.length,i=f._malloc(u),_.push(i);let e=i/4;for(let t=0;t<a.length;t++){if(\\\"string\\\"!=typeof a[t])throw new TypeError(`tensor data at index ${t} is not a string`);f.HEAPU32[e++]=(0,s.allocWasmString)(a[t],_)}}else u=a.byteLength,i=f._malloc(u),_.push(i),f.HEAPU8.set(new Uint8Array(a.buffer,a.byteOffset,u),i);const c=f.stackSave(),l=f.stackAlloc(4*n.length);try{let r=l/4;n.forEach((e=>f.HEAP32[r++]=e));const a=f._OrtCreateTensor((0,o.tensorDataTypeStringToEnum)(t),i,u,l,n.length);0===a&&(0,s.checkLastError)(`Can't create tensor for input[${e}].`),w.push(a)}finally{f.stackRestore(c)}}const i=f.stackSave(),u=f.stackAlloc(4*m),d=f.stackAlloc(4*m),O=f.stackAlloc(4*y),A=f.stackAlloc(4*y);try{let r=u/4,n=d/4,i=O/4,c=A/4;for(let e=0;e<m;e++)f.HEAPU32[r++]=w[e],f.HEAPU32[n++]=g[t[e]];for(let e=0;e<y;e++)f.HEAPU32[i++]=0,f.HEAPU32[c++]=h[a[e]];null===(l=f.jsepOnRunStart)||void 0===l||l.call(f,e);let b=f._OrtRun(p,d,u,m,A,y,O,v);const _=f.jsepRunPromise;_&&(b=await _);const T=f.jsepOnRunEnd;T&&await T(e);const S=[];0!==b&&(0,s.checkLastError)(\\\"failed to call OrtRun().\\\");for(let e=0;e<y;e++){const t=f.HEAPU32[O/4+e],r=f.stackSave(),n=f.stackAlloc(16);let a,i=0;try{b=f._OrtGetTensorData(t,n,n+4,n+8,n+12),0!==b&&(0,s.checkLastError)(`Can't access output tensor data on index ${e}.`);let r=n/4;const u=f.HEAPU32[r++];i=f.HEAPU32[r++];const c=f.HEAPU32[r++],l=f.HEAPU32[r++],d=[];for(let e=0;e<l;e++)d.push(f.HEAPU32[c/4+e]);f._OrtFree(c);const p=0===d.length?1:d.reduce(((e,t)=>e*t));if(a=(0,o.tensorDataTypeEnumToString)(u),\\\"string\\\"===a){const e=[];let t=i/4;for(let r=0;r<p;r++){const n=f.HEAPU32[t++],a=r===p-1?void 0:f.HEAPU32[t]-n;e.push(f.UTF8ToString(n,a))}S.push([a,d,e])}else{const e=new((0,o.tensorTypeToTypedArrayConstructor)(a))(p);new Uint8Array(e.buffer,e.byteOffset,e.byteLength).set(f.HEAPU8.subarray(i,i+e.byteLength)),S.push([a,d,e])}}finally{f.stackRestore(r),\\\"string\\\"===a&&i&&f._free(i),f._OrtReleaseTensor(t)}}return S}finally{f.stackRestore(i)}}finally{w.forEach((e=>f._OrtReleaseTensor(e))),_.forEach((e=>f._free(e))),0!==v&&f._OrtReleaseRunOptions(v),b.forEach((e=>f._free(e)))}},t.endProfiling=e=>{const t=(0,i.getInstance)(),r=u.get(e);if(!r)throw new Error(\\\"invalid session id\\\");const n=r[0],a=t._OrtEndProfiling(n);0===a&&(0,s.checkLastError)(\\\"Can't get an profile file name.\\\"),t._OrtFree(a)},t.extractTransferableBuffers=e=>{const t=[];for(const r of e){const e=r[2];!Array.isArray(e)&&e.buffer&&t.push(e.buffer)}return t}},263:function(e,t,r){\\\"use strict\\\";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r);var a=Object.getOwnPropertyDescriptor(t,r);a&&!(\\\"get\\\"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,n,a)}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,\\\"default\\\",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)\\\"default\\\"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&n(t,e,r);return a(t,e),t};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.dispose=t.getInstance=t.initializeWebAssembly=void 0;const i=o(r(17)),s=r(932),u=r(474);let c,l=!1,f=!1,d=!1;t.initializeWebAssembly=async e=>{if(l)return Promise.resolve();if(f)throw new Error(\\\"multiple calls to 'initializeWebAssembly()' detected.\\\");if(d)throw new Error(\\\"previous call to 'initializeWebAssembly()' failed.\\\");f=!0;const t=e.initTimeout,n=e.numThreads,a=e.simd,o=n>1&&(()=>{try{return\\\"undefined\\\"!=typeof SharedArrayBuffer&&(\\\"undefined\\\"!=typeof MessageChannel&&(new MessageChannel).port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11])))}catch(e){return!1}})(),p=a&&(()=>{try{return WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,30,1,28,0,65,0,253,15,253,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,186,1,26,11]))}catch(e){return!1}})(),g=e.wasmPaths,h=\\\"string\\\"==typeof g?g:void 0,m=((e,t)=>t?e?\\\"ort-wasm-simd-threaded.wasm\\\":\\\"ort-wasm-threaded.wasm\\\":e?\\\"ort-wasm-simd.wasm\\\":\\\"ort-wasm.wasm\\\")(p,o),y=\\\"object\\\"==typeof g?g[m]:void 0;let v=!1;const b=[];if(t>0&&b.push(new Promise((e=>{setTimeout((()=>{v=!0,e()}),t)}))),b.push(new Promise(((e,t)=>{const n=o?u:s,a={locateFile:(e,t)=>o&&e.endsWith(\\\".worker.js\\\")&&\\\"undefined\\\"!=typeof Blob?URL.createObjectURL(new Blob([r(154)],{type:\\\"text/javascript\\\"})):e.endsWith(\\\".wasm\\\")?y||(null!=h?h:t)+m:t+e};if(o)if(\\\"undefined\\\"==typeof Blob)a.mainScriptUrlOrBlob=i.join(__dirname,\\\"ort-wasm-threaded.js\\\");else{const e=`var ortWasmThreaded=(function(){var _scriptDir;return ${n.toString()}})();`;a.mainScriptUrlOrBlob=new Blob([e],{type:\\\"text/javascript\\\"})}n(a).then((t=>{f=!1,l=!0,c=t,e()}),(e=>{f=!1,d=!0,t(e)}))}))),await Promise.race(b),v)throw new Error(`WebAssembly backend initializing failed due to timeout: ${t}ms`)},t.getInstance=()=>{if(l&&c)return c;throw new Error(\\\"WebAssembly is not initialized yet.\\\")},t.dispose=()=>{var e;!l||f||d||(f=!0,null===(e=c.PThread)||void 0===e||e.terminateAllThreads(),c=void 0,f=!1,l=!1,d=!0)}},497:(e,t,r)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.checkLastError=t.iterateExtraOptions=t.allocWasmString=void 0;const n=r(263);t.allocWasmString=(e,t)=>{const r=(0,n.getInstance)(),a=r.lengthBytesUTF8(e)+1,o=r._malloc(a);return r.stringToUTF8(e,o,a),t.push(o),o},t.iterateExtraOptions=(e,r,n,a)=>{if(\\\"object\\\"==typeof e&&null!==e){if(n.has(e))throw new Error(\\\"Circular reference in options\\\");n.add(e)}Object.entries(e).forEach((([e,o])=>{const i=r?r+e:e;if(\\\"object\\\"==typeof o)(0,t.iterateExtraOptions)(o,i+\\\".\\\",n,a);else if(\\\"string\\\"==typeof o||\\\"number\\\"==typeof o)a(i,o.toString());else{if(\\\"boolean\\\"!=typeof o)throw new Error(\\\"Can't handle extra config type: \\\"+typeof o);a(i,o?\\\"1\\\":\\\"0\\\")}}))},t.checkLastError=e=>{const t=(0,n.getInstance)(),r=t.stackSave();try{const r=t.stackAlloc(8);t._OrtGetLastError(r,r+4);const n=t.HEAP32[r/4],a=t.HEAPU32[r/4+1],o=a?t.UTF8ToString(a):\\\"\\\";throw new Error(`${e} ERROR_CODE: ${n}, ERROR_MESSAGE: ${o}`)}finally{t.stackRestore(r)}}},474:(e,t,r)=>{var _scriptDir,n=(_scriptDir=\\\"undefined\\\"!=typeof document&&document.currentScript?document.currentScript.src:void 0,\\\"undefined\\\"!=typeof __filename&&(_scriptDir=_scriptDir||__filename),function(e={}){function t(){return C.buffer!=D.buffer&&j(),D}function n(){return C.buffer!=D.buffer&&j(),U}function a(){return C.buffer!=D.buffer&&j(),x}function o(){return C.buffer!=D.buffer&&j(),W}function i(){return C.buffer!=D.buffer&&j(),L}var s,u,c=e;c.ready=new Promise(((e,t)=>{s=e,u=t}));var l,f,d,p=Object.assign({},c),g=\\\"./this.program\\\",h=(e,t)=>{throw t},m=\\\"object\\\"==typeof window,y=\\\"function\\\"==typeof importScripts,v=\\\"object\\\"==typeof process&&\\\"object\\\"==typeof process.versions&&\\\"string\\\"==typeof process.versions.node,b=c.ENVIRONMENT_IS_PTHREAD||!1,w=\\\"\\\";function _(e){return c.locateFile?c.locateFile(e,w):w+e}if(v){var O=r(147),A=r(17);let t;w=y?A.dirname(w)+\\\"/\\\":__dirname+\\\"/\\\",l=(e,t)=>(e=e.startsWith(\\\"file://\\\")?new URL(e):A.normalize(e),O.readFileSync(e,t?void 0:\\\"utf8\\\")),d=e=>((e=l(e,!0)).buffer||(e=new Uint8Array(e)),e),f=(e,t,r,n=!0)=>{e=e.startsWith(\\\"file://\\\")?new URL(e):A.normalize(e),O.readFile(e,n?void 0:\\\"utf8\\\",((e,a)=>{e?r(e):t(n?a.buffer:a)}))},!c.thisProgram&&1<process.argv.length&&(g=process.argv[1].replace(/\\\\\\\\/g,\\\"/\\\")),process.argv.slice(2),h=(e,t)=>{throw process.exitCode=e,t},c.inspect=()=>\\\"[Emscripten Module object]\\\";try{t=r(267)}catch(e){throw console.error('The \\\"worker_threads\\\" module is not supported in this node.js build - perhaps a newer version is needed?'),e}global.Worker=t.Worker}else(m||y)&&(y?w=self.location.href:\\\"undefined\\\"!=typeof document&&document.currentScript&&(w=document.currentScript.src),_scriptDir&&(w=_scriptDir),w=0!==w.indexOf(\\\"blob:\\\")?w.substr(0,w.replace(/[?#].*/,\\\"\\\").lastIndexOf(\\\"/\\\")+1):\\\"\\\",v||(l=e=>{var t=new XMLHttpRequest;return t.open(\\\"GET\\\",e,!1),t.send(null),t.responseText},y&&(d=e=>{var t=new XMLHttpRequest;return t.open(\\\"GET\\\",e,!1),t.responseType=\\\"arraybuffer\\\",t.send(null),new Uint8Array(t.response)}),f=(e,t,r)=>{var n=new XMLHttpRequest;n.open(\\\"GET\\\",e,!0),n.responseType=\\\"arraybuffer\\\",n.onload=()=>{200==n.status||0==n.status&&n.response?t(n.response):r()},n.onerror=r,n.send(null)}));v&&\\\"undefined\\\"==typeof performance&&(global.performance=r(74).performance);var T=console.log.bind(console),S=console.error.bind(console);v&&(T=(...e)=>O.writeSync(1,e.join(\\\" \\\")+\\\"\\\\n\\\"),S=(...e)=>O.writeSync(2,e.join(\\\" \\\")+\\\"\\\\n\\\"));var E,M=c.print||T,R=c.printErr||S;Object.assign(c,p),p=null,c.thisProgram&&(g=c.thisProgram),c.quit&&(h=c.quit),c.wasmBinary&&(E=c.wasmBinary);var P=c.noExitRuntime||!0;\\\"object\\\"!=typeof WebAssembly&&te(\\\"no native wasm support detected\\\");var C,F,k,I,D,U,x,W,L,H=!1;function j(){var e=C.buffer;c.HEAP8=D=new Int8Array(e),c.HEAP16=new Int16Array(e),c.HEAP32=x=new Int32Array(e),c.HEAPU8=U=new Uint8Array(e),c.HEAPU16=new Uint16Array(e),c.HEAPU32=W=new Uint32Array(e),c.HEAPF32=new Float32Array(e),c.HEAPF64=L=new Float64Array(e)}var Y=c.INITIAL_MEMORY||16777216;if(5242880<=Y||te(\\\"INITIAL_MEMORY should be larger than STACK_SIZE, was \\\"+Y+\\\"! (STACK_SIZE=5242880)\\\"),b)C=c.wasmMemory;else if(c.wasmMemory)C=c.wasmMemory;else if(!((C=new WebAssembly.Memory({initial:Y/65536,maximum:65536,shared:!0})).buffer instanceof SharedArrayBuffer))throw R(\\\"requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag\\\"),v&&R(\\\"(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and/or recent version)\\\"),Error(\\\"bad memory\\\");j(),Y=C.buffer.byteLength;var N,$=[],z=[],G=[],B=0;function V(){return P||0<B}var q,J,X=0,K=null,Q=null;function Z(){X++,c.monitorRunDependencies&&c.monitorRunDependencies(X)}function ee(){if(X--,c.monitorRunDependencies&&c.monitorRunDependencies(X),0==X&&(null!==K&&(clearInterval(K),K=null),Q)){var e=Q;Q=null,e()}}function te(e){throw c.onAbort&&c.onAbort(e),R(e=\\\"Aborted(\\\"+e+\\\")\\\"),H=!0,I=1,e=new WebAssembly.RuntimeError(e+\\\". Build with -sASSERTIONS for more info.\\\"),u(e),e}function re(e){return e.startsWith(\\\"data:application/octet-stream;base64,\\\")}function ne(e){if(e==q&&E)return new Uint8Array(E);if(d)return d(e);throw\\\"both async and sync fetching of the wasm failed\\\"}function ae(e,t,r){return function(e){if(!E&&(m||y)){if(\\\"function\\\"==typeof fetch&&!e.startsWith(\\\"file://\\\"))return fetch(e,{credentials:\\\"same-origin\\\"}).then((t=>{if(!t.ok)throw\\\"failed to load wasm binary file at '\\\"+e+\\\"'\\\";return t.arrayBuffer()})).catch((()=>ne(e)));if(f)return new Promise(((t,r)=>{f(e,(e=>t(new Uint8Array(e))),r)}))}return Promise.resolve().then((()=>ne(e)))}(e).then((e=>WebAssembly.instantiate(e,t))).then((e=>e)).then(r,(e=>{R(\\\"failed to asynchronously prepare wasm: \\\"+e),te(e)}))}function oe(e){this.name=\\\"ExitStatus\\\",this.message=`Program terminated with exit(${e})`,this.status=e}function ie(e){e.terminate(),e.onmessage=()=>{}}function se(e){(e=ge.Fa[e])||te(),ge.fb(e)}function ue(e){var t=ge.Za();if(!t)return 6;ge.Ia.push(t),ge.Fa[e.Ha]=t,t.Ha=e.Ha;var r={cmd:\\\"run\\\",start_routine:e.gb,arg:e.Ya,pthread_ptr:e.Ha};return v&&t.unref(),t.postMessage(r,e.mb),0}re(q=\\\"ort-wasm-threaded.wasm\\\")||(q=_(q));var ce=\\\"undefined\\\"!=typeof TextDecoder?new TextDecoder(\\\"utf8\\\"):void 0,le=(e,t,r)=>{var n=(t>>>=0)+r;for(r=t;e[r]&&!(r>=n);)++r;if(16<r-t&&e.buffer&&ce)return ce.decode(e.buffer instanceof SharedArrayBuffer?e.slice(t,r):e.subarray(t,r));for(n=\\\"\\\";t<r;){var a=e[t++];if(128&a){var o=63&e[t++];if(192==(224&a))n+=String.fromCharCode((31&a)<<6|o);else{var i=63&e[t++];65536>(a=224==(240&a)?(15&a)<<12|o<<6|i:(7&a)<<18|o<<12|i<<6|63&e[t++])?n+=String.fromCharCode(a):(a-=65536,n+=String.fromCharCode(55296|a>>10,56320|1023&a))}}else n+=String.fromCharCode(a)}return n},fe=(e,t)=>(e>>>=0)?le(n(),e,t):\\\"\\\";function de(e){if(b)return Ve(1,1,e);I=e,V()||(ge.hb(),c.onExit&&c.onExit(e),H=!0),h(e,new oe(e))}var pe=e=>{if(I=e,b)throw me(e),\\\"unwind\\\";de(e)},ge={La:[],Ia:[],Ta:[],Fa:{},Pa:function(){b?ge.ab():ge.$a()},$a:function(){$.unshift((()=>{Z(),ge.bb((()=>ee()))}))},ab:function(){ge.receiveObjectTransfer=ge.eb,ge.threadInitTLS=ge.Sa,ge.setExitStatus=ge.Ra,P=!1},Ra:function(e){I=e},rb:[\\\"$terminateWorker\\\"],hb:function(){for(var e of ge.Ia)ie(e);for(e of ge.La)ie(e);ge.La=[],ge.Ia=[],ge.Fa=[]},fb:function(e){var t=e.Ha;delete ge.Fa[t],ge.La.push(e),ge.Ia.splice(ge.Ia.indexOf(e),1),e.Ha=0,mt(t)},eb:function(){},Sa:function(){ge.Ta.forEach((e=>e()))},cb:e=>new Promise((t=>{e.onmessage=r=>{var n=(r=r.data).cmd;if(r.targetThread&&r.targetThread!=ft()){var a=ge.Fa[r.qb];a?a.postMessage(r,r.transferList):R('Internal error! Worker sent a message \\\"'+n+'\\\" to target pthread '+r.targetThread+\\\", but that thread no longer exists!\\\")}else\\\"checkMailbox\\\"===n?He():\\\"spawnThread\\\"===n?ue(r):\\\"cleanupThread\\\"===n?se(r.thread):\\\"killThread\\\"===n?(r=r.thread,n=ge.Fa[r],delete ge.Fa[r],ie(n),mt(r),ge.Ia.splice(ge.Ia.indexOf(n),1),n.Ha=0):\\\"cancelThread\\\"===n?ge.Fa[r.thread].postMessage({cmd:\\\"cancel\\\"}):\\\"loaded\\\"===n?(e.loaded=!0,t(e)):\\\"alert\\\"===n?alert(\\\"Thread \\\"+r.threadId+\\\": \\\"+r.text):\\\"setimmediate\\\"===r.target?e.postMessage(r):\\\"callHandler\\\"===n?c[r.handler](...r.args):n&&R(\\\"worker sent an unknown command \\\"+n)},e.onerror=e=>{throw R(\\\"worker sent an error! \\\"+e.filename+\\\":\\\"+e.lineno+\\\": \\\"+e.message),e},v&&(e.on(\\\"message\\\",(function(t){e.onmessage({data:t})})),e.on(\\\"error\\\",(function(t){e.onerror(t)})));var r,n=[];for(r of[\\\"onExit\\\",\\\"onAbort\\\",\\\"print\\\",\\\"printErr\\\"])c.hasOwnProperty(r)&&n.push(r);e.postMessage({cmd:\\\"load\\\",handlers:n,urlOrBlob:c.mainScriptUrlOrBlob||_scriptDir,wasmMemory:C,wasmModule:k})})),bb:function(e){e()},Xa:function(){var e=_(\\\"ort-wasm-threaded.worker.js\\\");e=new Worker(e),ge.La.push(e)},Za:function(){return 0==ge.La.length&&(ge.Xa(),ge.cb(ge.La[0])),ge.La.pop()}};c.PThread=ge;var he=e=>{for(;0<e.length;)e.shift()(c)};function me(e){if(b)return Ve(2,0,e);pe(e)}c.establishStackSpace=function(){var e=ft(),t=a()[e+52>>2>>>0];e=a()[e+56>>2>>>0],wt(t,t-e),Ot(t)};var ye=[];function ve(e){this.Oa=e-24,this.Wa=function(e){o()[this.Oa+4>>2>>>0]=e},this.Va=function(e){o()[this.Oa+8>>2>>>0]=e},this.Pa=function(e,t){this.Ua(),this.Wa(e),this.Va(t)},this.Ua=function(){o()[this.Oa+16>>2>>>0]=0}}function be(e,t,r,n){return b?Ve(3,1,e,t,r,n):we(e,t,r,n)}function we(e,t,r,n){if(e>>>=0,t>>>=0,r>>>=0,n>>>=0,\\\"undefined\\\"==typeof SharedArrayBuffer)return R(\\\"Current environment does not support SharedArrayBuffer, pthreads are not available!\\\"),6;var a=[];return b&&0===a.length?be(e,t,r,n):(e={gb:r,Ha:e,Ya:n,mb:a},b?(e.ob=\\\"spawnThread\\\",postMessage(e,a),0):ue(e))}function _e(e,t,r){return b?Ve(4,1,e,t,r):0}function Oe(e,t){if(b)return Ve(5,1,e,t)}c.invokeEntryPoint=function(e,t){var r=ye[e];r||(e>=ye.length&&(ye.length=e+1),ye[e]=r=N.get(e)),e=r(t),V()?ge.Ra(e):yt(e)};var Ae=e=>{for(var t=0,r=0;r<e.length;++r){var n=e.charCodeAt(r);127>=n?t++:2047>=n?t+=2:55296<=n&&57343>=n?(t+=4,++r):t+=3}return t},Te=(e,t,r,n)=>{if(!(0<n))return 0;var a=r>>>=0;n=r+n-1;for(var o=0;o<e.length;++o){var i=e.charCodeAt(o);if(55296<=i&&57343>=i&&(i=65536+((1023&i)<<10)|1023&e.charCodeAt(++o)),127>=i){if(r>=n)break;t[r++>>>0]=i}else{if(2047>=i){if(r+1>=n)break;t[r++>>>0]=192|i>>6}else{if(65535>=i){if(r+2>=n)break;t[r++>>>0]=224|i>>12}else{if(r+3>=n)break;t[r++>>>0]=240|i>>18,t[r++>>>0]=128|i>>12&63}t[r++>>>0]=128|i>>6&63}t[r++>>>0]=128|63&i}}return t[r>>>0]=0,r-a},Se=(e,t,r)=>Te(e,n(),t,r);function Ee(e,t){if(b)return Ve(6,1,e,t)}function Me(e,t,r){if(b)return Ve(7,1,e,t,r)}function Re(e,t,r){return b?Ve(8,1,e,t,r):0}function Pe(e,t){if(b)return Ve(9,1,e,t)}function Ce(e,t,r){if(b)return Ve(10,1,e,t,r)}function Fe(e,t,r,n){if(b)return Ve(11,1,e,t,r,n)}function ke(e,t,r,n){if(b)return Ve(12,1,e,t,r,n)}function Ie(e,t,r,n){if(b)return Ve(13,1,e,t,r,n)}function De(e){if(b)return Ve(14,1,e)}function Ue(e,t){if(b)return Ve(15,1,e,t)}function xe(e,t,r){if(b)return Ve(16,1,e,t,r)}var We=e=>{if(!H)try{if(e(),!V())try{b?yt(I):pe(I)}catch(e){e instanceof oe||\\\"unwind\\\"==e||h(1,e)}}catch(e){e instanceof oe||\\\"unwind\\\"==e||h(1,e)}};function Le(e){e>>>=0,\\\"function\\\"==typeof Atomics.nb&&(Atomics.nb(a(),e>>2,e).value.then(He),e+=128,Atomics.store(a(),e>>2,1))}function He(){var e=ft();e&&(Le(e),We((()=>vt())))}c.__emscripten_thread_mailbox_await=Le,c.checkMailbox=He;var je=e=>0==e%4&&(0!=e%100||0==e%400),Ye=[0,31,60,91,121,152,182,213,244,274,305,335],Ne=[0,31,59,90,120,151,181,212,243,273,304,334];function $e(e,t,r,n,a,o,i,s){return b?Ve(17,1,e,t,r,n,a,o,i,s):-52}function ze(e,t,r,n,a,o,i){if(b)return Ve(18,1,e,t,r,n,a,o,i)}var Ge=e=>{var t=Ae(e)+1,r=dt(t);return r&&Se(e,r,t),r},Be=e=>{var t=_t();return e=e(),Ot(t),e};function Ve(e,t){var r=arguments.length-2,n=arguments;return Be((()=>{for(var a=At(8*r),o=a>>3,s=0;s<r;s++){var u=n[2+s];i()[o+s>>>0]=u}return ht(e,r,a,t)}))}var qe,Je=[],Xe={},Ke=()=>{if(!qe){var e,t={USER:\\\"web_user\\\",LOGNAME:\\\"web_user\\\",PATH:\\\"/\\\",PWD:\\\"/\\\",HOME:\\\"/home/web_user\\\",LANG:(\\\"object\\\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\\\"C\\\").replace(\\\"-\\\",\\\"_\\\")+\\\".UTF-8\\\",_:g||\\\"./this.program\\\"};for(e in Xe)void 0===Xe[e]?delete t[e]:t[e]=Xe[e];var r=[];for(e in t)r.push(`${e}=${t[e]}`);qe=r}return qe};function Qe(e,r){if(b)return Ve(19,1,e,r);e>>>=0,r>>>=0;var n=0;return Ke().forEach((function(a,i){var s=r+n;for(i=o()[e+4*i>>2>>>0]=s,s=0;s<a.length;++s)t()[i++>>0>>>0]=a.charCodeAt(s);t()[i>>0>>>0]=0,n+=a.length+1})),0}function Ze(e,t){if(b)return Ve(20,1,e,t);e>>>=0,t>>>=0;var r=Ke();o()[e>>2>>>0]=r.length;var n=0;return r.forEach((function(e){n+=e.length+1})),o()[t>>2>>>0]=n,0}function et(e){return b?Ve(21,1,e):52}function tt(e,t,r,n){return b?Ve(22,1,e,t,r,n):52}function rt(e,t,r,n,a){return b?Ve(23,1,e,t,r,n,a):70}var nt=[null,[],[]];function at(e,t,r,a){if(b)return Ve(24,1,e,t,r,a);t>>>=0,r>>>=0,a>>>=0;for(var i=0,s=0;s<r;s++){var u=o()[t>>2>>>0],c=o()[t+4>>2>>>0];t+=8;for(var l=0;l<c;l++){var f=n()[u+l>>>0],d=nt[e];0===f||10===f?((1===e?M:R)(le(d,0)),d.length=0):d.push(f)}i+=c}return o()[a>>2>>>0]=i,0}var ot=[31,29,31,30,31,30,31,31,30,31,30,31],it=[31,28,31,30,31,30,31,31,30,31,30,31],st=(e,r)=>{t().set(e,r>>>0)};function ut(e,t,r,n){function o(e,t,r){for(e=\\\"number\\\"==typeof e?e.toString():e||\\\"\\\";e.length<t;)e=r[0]+e;return e}function i(e,t){return o(e,t,\\\"0\\\")}function s(e,t){function r(e){return 0>e?-1:0<e?1:0}var n;return 0===(n=r(e.getFullYear()-t.getFullYear()))&&0===(n=r(e.getMonth()-t.getMonth()))&&(n=r(e.getDate()-t.getDate())),n}function u(e){switch(e.getDay()){case 0:return new Date(e.getFullYear()-1,11,29);case 1:return e;case 2:return new Date(e.getFullYear(),0,3);case 3:return new Date(e.getFullYear(),0,2);case 4:return new Date(e.getFullYear(),0,1);case 5:return new Date(e.getFullYear()-1,11,31);case 6:return new Date(e.getFullYear()-1,11,30)}}function c(e){var t=e.Ja;for(e=new Date(new Date(e.Ka+1900,0,1).getTime());0<t;){var r=e.getMonth(),n=(je(e.getFullYear())?ot:it)[r];if(!(t>n-e.getDate())){e.setDate(e.getDate()+t);break}t-=n-e.getDate()+1,e.setDate(1),11>r?e.setMonth(r+1):(e.setMonth(0),e.setFullYear(e.getFullYear()+1))}return r=new Date(e.getFullYear()+1,0,4),t=u(new Date(e.getFullYear(),0,4)),r=u(r),0>=s(t,e)?0>=s(r,e)?e.getFullYear()+1:e.getFullYear():e.getFullYear()-1}e>>>=0,t>>>=0,r>>>=0,n>>>=0;var l=a()[n+40>>2>>>0];for(var f in n={kb:a()[n>>2>>>0],jb:a()[n+4>>2>>>0],Ma:a()[n+8>>2>>>0],Qa:a()[n+12>>2>>>0],Na:a()[n+16>>2>>>0],Ka:a()[n+20>>2>>>0],Ga:a()[n+24>>2>>>0],Ja:a()[n+28>>2>>>0],sb:a()[n+32>>2>>>0],ib:a()[n+36>>2>>>0],lb:l?fe(l):\\\"\\\"},r=fe(r),l={\\\"%c\\\":\\\"%a %b %d %H:%M:%S %Y\\\",\\\"%D\\\":\\\"%m/%d/%y\\\",\\\"%F\\\":\\\"%Y-%m-%d\\\",\\\"%h\\\":\\\"%b\\\",\\\"%r\\\":\\\"%I:%M:%S %p\\\",\\\"%R\\\":\\\"%H:%M\\\",\\\"%T\\\":\\\"%H:%M:%S\\\",\\\"%x\\\":\\\"%m/%d/%y\\\",\\\"%X\\\":\\\"%H:%M:%S\\\",\\\"%Ec\\\":\\\"%c\\\",\\\"%EC\\\":\\\"%C\\\",\\\"%Ex\\\":\\\"%m/%d/%y\\\",\\\"%EX\\\":\\\"%H:%M:%S\\\",\\\"%Ey\\\":\\\"%y\\\",\\\"%EY\\\":\\\"%Y\\\",\\\"%Od\\\":\\\"%d\\\",\\\"%Oe\\\":\\\"%e\\\",\\\"%OH\\\":\\\"%H\\\",\\\"%OI\\\":\\\"%I\\\",\\\"%Om\\\":\\\"%m\\\",\\\"%OM\\\":\\\"%M\\\",\\\"%OS\\\":\\\"%S\\\",\\\"%Ou\\\":\\\"%u\\\",\\\"%OU\\\":\\\"%U\\\",\\\"%OV\\\":\\\"%V\\\",\\\"%Ow\\\":\\\"%w\\\",\\\"%OW\\\":\\\"%W\\\",\\\"%Oy\\\":\\\"%y\\\"})r=r.replace(new RegExp(f,\\\"g\\\"),l[f]);var d=\\\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\\\".split(\\\" \\\"),p=\\\"January February March April May June July August September October November December\\\".split(\\\" \\\");for(f in l={\\\"%a\\\":e=>d[e.Ga].substring(0,3),\\\"%A\\\":e=>d[e.Ga],\\\"%b\\\":e=>p[e.Na].substring(0,3),\\\"%B\\\":e=>p[e.Na],\\\"%C\\\":e=>i((e.Ka+1900)/100|0,2),\\\"%d\\\":e=>i(e.Qa,2),\\\"%e\\\":e=>o(e.Qa,2,\\\" \\\"),\\\"%g\\\":e=>c(e).toString().substring(2),\\\"%G\\\":e=>c(e),\\\"%H\\\":e=>i(e.Ma,2),\\\"%I\\\":e=>(0==(e=e.Ma)?e=12:12<e&&(e-=12),i(e,2)),\\\"%j\\\":e=>{for(var t=0,r=0;r<=e.Na-1;t+=(je(e.Ka+1900)?ot:it)[r++]);return i(e.Qa+t,3)},\\\"%m\\\":e=>i(e.Na+1,2),\\\"%M\\\":e=>i(e.jb,2),\\\"%n\\\":()=>\\\"\\\\n\\\",\\\"%p\\\":e=>0<=e.Ma&&12>e.Ma?\\\"AM\\\":\\\"PM\\\",\\\"%S\\\":e=>i(e.kb,2),\\\"%t\\\":()=>\\\"\\\\t\\\",\\\"%u\\\":e=>e.Ga||7,\\\"%U\\\":e=>i(Math.floor((e.Ja+7-e.Ga)/7),2),\\\"%V\\\":e=>{var t=Math.floor((e.Ja+7-(e.Ga+6)%7)/7);if(2>=(e.Ga+371-e.Ja-2)%7&&t++,t)53==t&&(4==(r=(e.Ga+371-e.Ja)%7)||3==r&&je(e.Ka)||(t=1));else{t=52;var r=(e.Ga+7-e.Ja-1)%7;(4==r||5==r&&je(e.Ka%400-1))&&t++}return i(t,2)},\\\"%w\\\":e=>e.Ga,\\\"%W\\\":e=>i(Math.floor((e.Ja+7-(e.Ga+6)%7)/7),2),\\\"%y\\\":e=>(e.Ka+1900).toString().substring(2),\\\"%Y\\\":e=>e.Ka+1900,\\\"%z\\\":e=>{var t=0<=(e=e.ib);return e=Math.abs(e)/60,(t?\\\"+\\\":\\\"-\\\")+String(\\\"0000\\\"+(e/60*100+e%60)).slice(-4)},\\\"%Z\\\":e=>e.lb,\\\"%%\\\":()=>\\\"%\\\"},r=r.replace(/%%/g,\\\"\\\\0\\\\0\\\"),l)r.includes(f)&&(r=r.replace(new RegExp(f,\\\"g\\\"),l[f](n)));return f=function(e){var t=Array(Ae(e)+1);return Te(e,t,0,t.length),t}(r=r.replace(/\\\\0\\\\0/g,\\\"%\\\")),f.length>t?0:(st(f,e),f.length-1)}ge.Pa();var ct=[null,de,me,be,_e,Oe,Ee,Me,Re,Pe,Ce,Fe,ke,Ie,De,Ue,xe,$e,ze,Qe,Ze,et,tt,rt,at],lt={b:function(e,t,r){throw new ve(e>>>=0).Pa(t>>>0,r>>>0),e},N:function(e){pt(e>>>0,!y,1,!m,131072,!1),ge.Sa()},j:function(e){e>>>=0,b?postMessage({cmd:\\\"cleanupThread\\\",thread:e}):se(e)},I:we,h:_e,T:Oe,D:Ee,F:Me,U:Re,R:Pe,J:Ce,Q:Fe,n:ke,E:Ie,B:De,S:Ue,C:xe,q:()=>!0,z:function(e,t){(e>>>=0)==t>>>0?setTimeout((()=>He())):b?postMessage({targetThread:e,cmd:\\\"checkMailbox\\\"}):(e=ge.Fa[e])&&e.postMessage({cmd:\\\"checkMailbox\\\"})},L:function(){return-1},M:Le,p:function(e){v&&ge.Fa[e>>>0].ref()},t:function(e,t,r){e=t+2097152>>>0<4194305-!!e?(e>>>0)+4294967296*t:NaN,r>>>=0,e=new Date(1e3*e),a()[r>>2>>>0]=e.getUTCSeconds(),a()[r+4>>2>>>0]=e.getUTCMinutes(),a()[r+8>>2>>>0]=e.getUTCHours(),a()[r+12>>2>>>0]=e.getUTCDate(),a()[r+16>>2>>>0]=e.getUTCMonth(),a()[r+20>>2>>>0]=e.getUTCFullYear()-1900,a()[r+24>>2>>>0]=e.getUTCDay(),e=(e.getTime()-Date.UTC(e.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,a()[r+28>>2>>>0]=e},u:function(e,t,r){e=t+2097152>>>0<4194305-!!e?(e>>>0)+4294967296*t:NaN,r>>>=0,e=new Date(1e3*e),a()[r>>2>>>0]=e.getSeconds(),a()[r+4>>2>>>0]=e.getMinutes(),a()[r+8>>2>>>0]=e.getHours(),a()[r+12>>2>>>0]=e.getDate(),a()[r+16>>2>>>0]=e.getMonth(),a()[r+20>>2>>>0]=e.getFullYear()-1900,a()[r+24>>2>>>0]=e.getDay(),t=(je(e.getFullYear())?Ye:Ne)[e.getMonth()]+e.getDate()-1|0,a()[r+28>>2>>>0]=t,a()[r+36>>2>>>0]=-60*e.getTimezoneOffset(),t=new Date(e.getFullYear(),6,1).getTimezoneOffset();var n=new Date(e.getFullYear(),0,1).getTimezoneOffset();e=0|(t!=n&&e.getTimezoneOffset()==Math.min(n,t)),a()[r+32>>2>>>0]=e},v:function(e){e>>>=0;var t=new Date(a()[e+20>>2>>>0]+1900,a()[e+16>>2>>>0],a()[e+12>>2>>>0],a()[e+8>>2>>>0],a()[e+4>>2>>>0],a()[e>>2>>>0],0),r=a()[e+32>>2>>>0],n=t.getTimezoneOffset(),o=new Date(t.getFullYear(),6,1).getTimezoneOffset(),i=new Date(t.getFullYear(),0,1).getTimezoneOffset(),s=Math.min(i,o);return 0>r?a()[e+32>>2>>>0]=Number(o!=i&&s==n):0<r!=(s==n)&&(o=Math.max(i,o),t.setTime(t.getTime()+6e4*((0<r?s:o)-n))),a()[e+24>>2>>>0]=t.getDay(),r=(je(t.getFullYear())?Ye:Ne)[t.getMonth()]+t.getDate()-1|0,a()[e+28>>2>>>0]=r,a()[e>>2>>>0]=t.getSeconds(),a()[e+4>>2>>>0]=t.getMinutes(),a()[e+8>>2>>>0]=t.getHours(),a()[e+12>>2>>>0]=t.getDate(),a()[e+16>>2>>>0]=t.getMonth(),a()[e+20>>2>>>0]=t.getYear(),e=t.getTime()/1e3,bt((J=e,1<=+Math.abs(J)?0<J?+Math.floor(J/4294967296)>>>0:~~+Math.ceil((J-+(~~J>>>0))/4294967296)>>>0:0)),e>>>0},r:$e,s:ze,y:function(e,t,r){function n(e){return(e=e.toTimeString().match(/\\\\(([A-Za-z ]+)\\\\)$/))?e[1]:\\\"GMT\\\"}e>>>=0,t>>>=0,r>>>=0;var i=(new Date).getFullYear(),s=new Date(i,0,1),u=new Date(i,6,1);i=s.getTimezoneOffset();var c=u.getTimezoneOffset(),l=Math.max(i,c);o()[e>>2>>>0]=60*l,a()[t>>2>>>0]=Number(i!=c),e=n(s),t=n(u),e=Ge(e),t=Ge(t),c<i?(o()[r>>2>>>0]=e,o()[r+4>>2>>>0]=t):(o()[r>>2>>>0]=t,o()[r+4>>2>>>0]=e)},c:()=>{te(\\\"\\\")},k:function(){},i:function(){return Date.now()},o:()=>{throw B+=1,\\\"unwind\\\"},A:function(){return 4294901760},e:()=>performance.timeOrigin+performance.now(),f:function(){return v?r(37).cpus().length:navigator.hardwareConcurrency},K:function(e,t,r,n){for(ge.pb=t>>>0,Je.length=r,t=n>>>0>>3,n=0;n<r;n++)Je[n]=i()[t+n>>>0];return ct[e].apply(null,Je)},x:function(e){e>>>=0;var t=n().length;if(e<=t||4294901760<e)return!1;for(var r=1;4>=r;r*=2){var a=t*(1+.2/r);a=Math.min(a,e+100663296);var o=Math;a=Math.max(e,a);e:{o=o.min.call(o,4294901760,a+(65536-a%65536)%65536)-C.buffer.byteLength+65535>>>16;try{C.grow(o),j();var i=1;break e}catch(e){}i=void 0}if(i)return!0}return!1},O:Qe,P:Ze,H:pe,g:et,m:tt,w:rt,l:at,a:C||c.wasmMemory,G:ut,d:function(e,t,r,n){return ut(e>>>0,t>>>0,r>>>0,n>>>0)}};!function(){function e(e,t){return e=e.exports,F=e=function(e){var t=e=>()=>e()>>>0,r=e=>t=>e(t)>>>0;return(e=Object.assign({},e)).__errno_location=t(e.__errno_location),e.pthread_self=t(e.pthread_self),e.malloc=r(e.malloc),e.stackSave=t(e.stackSave),e.stackAlloc=r(e.stackAlloc),e}(e),ge.Ta.push(F.sa),N=F.ta,z.unshift(F.V),k=t,ee(),e}var t={a:lt};if(Z(),c.instantiateWasm)try{return c.instantiateWasm(t,e)}catch(e){R(\\\"Module.instantiateWasm callback failed with error: \\\"+e),u(e)}(function(e,t){var r=q;return E||\\\"function\\\"!=typeof WebAssembly.instantiateStreaming||re(r)||r.startsWith(\\\"file://\\\")||v||\\\"function\\\"!=typeof fetch?ae(r,e,t):fetch(r,{credentials:\\\"same-origin\\\"}).then((n=>WebAssembly.instantiateStreaming(n,e).then(t,(function(n){return R(\\\"wasm streaming compile failed: \\\"+n),R(\\\"falling back to ArrayBuffer instantiation\\\"),ae(r,e,t)}))))})(t,(function(t){e(t.instance,t.module)})).catch(u)}(),c._OrtInit=(e,t)=>(c._OrtInit=F.W)(e,t),c._OrtGetLastError=(e,t)=>(c._OrtGetLastError=F.X)(e,t),c._OrtCreateSessionOptions=(e,t,r,n,a,o,i,s,u,l)=>(c._OrtCreateSessionOptions=F.Y)(e,t,r,n,a,o,i,s,u,l),c._OrtAppendExecutionProvider=(e,t)=>(c._OrtAppendExecutionProvider=F.Z)(e,t),c._OrtAddFreeDimensionOverride=(e,t,r)=>(c._OrtAddFreeDimensionOverride=F._)(e,t,r),c._OrtAddSessionConfigEntry=(e,t,r)=>(c._OrtAddSessionConfigEntry=F.$)(e,t,r),c._OrtReleaseSessionOptions=e=>(c._OrtReleaseSessionOptions=F.aa)(e),c._OrtCreateSession=(e,t,r)=>(c._OrtCreateSession=F.ba)(e,t,r),c._OrtReleaseSession=e=>(c._OrtReleaseSession=F.ca)(e),c._OrtGetInputOutputCount=(e,t,r)=>(c._OrtGetInputOutputCount=F.da)(e,t,r),c._OrtGetInputName=(e,t)=>(c._OrtGetInputName=F.ea)(e,t),c._OrtGetOutputName=(e,t)=>(c._OrtGetOutputName=F.fa)(e,t),c._OrtFree=e=>(c._OrtFree=F.ga)(e),c._OrtCreateTensor=(e,t,r,n,a)=>(c._OrtCreateTensor=F.ha)(e,t,r,n,a),c._OrtGetTensorData=(e,t,r,n,a)=>(c._OrtGetTensorData=F.ia)(e,t,r,n,a),c._OrtReleaseTensor=e=>(c._OrtReleaseTensor=F.ja)(e),c._OrtCreateRunOptions=(e,t,r,n)=>(c._OrtCreateRunOptions=F.ka)(e,t,r,n),c._OrtAddRunConfigEntry=(e,t,r)=>(c._OrtAddRunConfigEntry=F.la)(e,t,r),c._OrtReleaseRunOptions=e=>(c._OrtReleaseRunOptions=F.ma)(e),c._OrtRun=(e,t,r,n,a,o,i,s)=>(c._OrtRun=F.na)(e,t,r,n,a,o,i,s),c._OrtEndProfiling=e=>(c._OrtEndProfiling=F.oa)(e);var ft=c._pthread_self=()=>(ft=c._pthread_self=F.pa)(),dt=c._malloc=e=>(dt=c._malloc=F.qa)(e);c._free=e=>(c._free=F.ra)(e),c.__emscripten_tls_init=()=>(c.__emscripten_tls_init=F.sa)();var pt=c.__emscripten_thread_init=(e,t,r,n,a,o)=>(pt=c.__emscripten_thread_init=F.ua)(e,t,r,n,a,o);c.__emscripten_thread_crashed=()=>(c.__emscripten_thread_crashed=F.va)();var gt,ht=(e,t,r,n)=>(ht=F.wa)(e,t,r,n),mt=e=>(mt=F.xa)(e),yt=c.__emscripten_thread_exit=e=>(yt=c.__emscripten_thread_exit=F.ya)(e),vt=c.__emscripten_check_mailbox=()=>(vt=c.__emscripten_check_mailbox=F.za)(),bt=e=>(bt=F.Aa)(e),wt=(e,t)=>(wt=F.Ba)(e,t),_t=()=>(_t=F.Ca)(),Ot=e=>(Ot=F.Da)(e),At=e=>(At=F.Ea)(e);function Tt(){function e(){if(!gt&&(gt=!0,c.calledRun=!0,!H)&&(b||he(z),s(c),c.onRuntimeInitialized&&c.onRuntimeInitialized(),!b)){if(c.postRun)for(\\\"function\\\"==typeof c.postRun&&(c.postRun=[c.postRun]);c.postRun.length;){var e=c.postRun.shift();G.unshift(e)}he(G)}}if(!(0<X))if(b)s(c),b||he(z),startWorker(c);else{if(c.preRun)for(\\\"function\\\"==typeof c.preRun&&(c.preRun=[c.preRun]);c.preRun.length;)$.unshift(c.preRun.shift());he($),0<X||(c.setStatus?(c.setStatus(\\\"Running...\\\"),setTimeout((function(){setTimeout((function(){c.setStatus(\\\"\\\")}),1),e()}),1)):e())}}if(c.keepRuntimeAlive=V,c.wasmMemory=C,c.stackAlloc=At,c.stackSave=_t,c.stackRestore=Ot,c.UTF8ToString=fe,c.stringToUTF8=Se,c.lengthBytesUTF8=Ae,c.ExitStatus=oe,c.PThread=ge,Q=function e(){gt||Tt(),gt||(Q=e)},c.preInit)for(\\\"function\\\"==typeof c.preInit&&(c.preInit=[c.preInit]);0<c.preInit.length;)c.preInit.pop()();return Tt(),e.ready});e.exports=n},932:(e,t,r)=>{var _scriptDir,n=(_scriptDir=\\\"undefined\\\"!=typeof document&&document.currentScript?document.currentScript.src:void 0,\\\"undefined\\\"!=typeof __filename&&(_scriptDir=_scriptDir||__filename),function(e={}){var t,n,a=e;a.ready=new Promise(((e,r)=>{t=e,n=r}));var o,i,s,u=Object.assign({},a),c=\\\"./this.program\\\",l=\\\"object\\\"==typeof window,f=\\\"function\\\"==typeof importScripts,d=\\\"object\\\"==typeof process&&\\\"object\\\"==typeof process.versions&&\\\"string\\\"==typeof process.versions.node,p=\\\"\\\";if(d){var g=r(147),h=r(17);p=f?h.dirname(p)+\\\"/\\\":__dirname+\\\"/\\\",o=(e,t)=>(e=e.startsWith(\\\"file://\\\")?new URL(e):h.normalize(e),g.readFileSync(e,t?void 0:\\\"utf8\\\")),s=e=>((e=o(e,!0)).buffer||(e=new Uint8Array(e)),e),i=(e,t,r,n=!0)=>{e=e.startsWith(\\\"file://\\\")?new URL(e):h.normalize(e),g.readFile(e,n?void 0:\\\"utf8\\\",((e,a)=>{e?r(e):t(n?a.buffer:a)}))},!a.thisProgram&&1<process.argv.length&&(c=process.argv[1].replace(/\\\\\\\\/g,\\\"/\\\")),process.argv.slice(2),a.inspect=()=>\\\"[Emscripten Module object]\\\"}else(l||f)&&(f?p=self.location.href:\\\"undefined\\\"!=typeof document&&document.currentScript&&(p=document.currentScript.src),_scriptDir&&(p=_scriptDir),p=0!==p.indexOf(\\\"blob:\\\")?p.substr(0,p.replace(/[?#].*/,\\\"\\\").lastIndexOf(\\\"/\\\")+1):\\\"\\\",o=e=>{var t=new XMLHttpRequest;return t.open(\\\"GET\\\",e,!1),t.send(null),t.responseText},f&&(s=e=>{var t=new XMLHttpRequest;return t.open(\\\"GET\\\",e,!1),t.responseType=\\\"arraybuffer\\\",t.send(null),new Uint8Array(t.response)}),i=(e,t,r)=>{var n=new XMLHttpRequest;n.open(\\\"GET\\\",e,!0),n.responseType=\\\"arraybuffer\\\",n.onload=()=>{200==n.status||0==n.status&&n.response?t(n.response):r()},n.onerror=r,n.send(null)});var m,y=a.print||console.log.bind(console),v=a.printErr||console.error.bind(console);Object.assign(a,u),u=null,a.thisProgram&&(c=a.thisProgram),a.wasmBinary&&(m=a.wasmBinary),a.noExitRuntime,\\\"object\\\"!=typeof WebAssembly&&Y(\\\"no native wasm support detected\\\");var b,w,_,O,A,T,S,E,M,R,P,C,F=!1;function k(){var e=b.buffer;a.HEAP8=_=new Int8Array(e),a.HEAP16=A=new Int16Array(e),a.HEAP32=S=new Int32Array(e),a.HEAPU8=O=new Uint8Array(e),a.HEAPU16=T=new Uint16Array(e),a.HEAPU32=E=new Uint32Array(e),a.HEAPF32=M=new Float32Array(e),a.HEAPF64=C=new Float64Array(e),a.HEAP64=R=new BigInt64Array(e),a.HEAPU64=P=new BigUint64Array(e)}var I=[],D=[],U=[];function x(){var e=a.preRun.shift();I.unshift(e)}var W,L=0,H=null,j=null;function Y(e){throw a.onAbort&&a.onAbort(e),v(e=\\\"Aborted(\\\"+e+\\\")\\\"),F=!0,e=new WebAssembly.RuntimeError(e+\\\". Build with -sASSERTIONS for more info.\\\"),n(e),e}function N(e){return e.startsWith(\\\"data:application/octet-stream;base64,\\\")}if(!N(W=\\\"ort-wasm.wasm\\\")){var $=W;W=a.locateFile?a.locateFile($,p):p+$}function z(e){if(e==W&&m)return new Uint8Array(m);if(s)return s(e);throw\\\"both async and sync fetching of the wasm failed\\\"}function G(e,t,r){return function(e){if(!m&&(l||f)){if(\\\"function\\\"==typeof fetch&&!e.startsWith(\\\"file://\\\"))return fetch(e,{credentials:\\\"same-origin\\\"}).then((t=>{if(!t.ok)throw\\\"failed to load wasm binary file at '\\\"+e+\\\"'\\\";return t.arrayBuffer()})).catch((()=>z(e)));if(i)return new Promise(((t,r)=>{i(e,(e=>t(new Uint8Array(e))),r)}))}return Promise.resolve().then((()=>z(e)))}(e).then((e=>WebAssembly.instantiate(e,t))).then((e=>e)).then(r,(e=>{v(\\\"failed to asynchronously prepare wasm: \\\"+e),Y(e)}))}var B=e=>{for(;0<e.length;)e.shift()(a)};function V(e){this.Pa=e-24,this.Za=function(e){E[this.Pa+4>>2]=e},this.Ya=function(e){E[this.Pa+8>>2]=e},this.Ta=function(e,t){this.Ua(),this.Za(e),this.Ya(t)},this.Ua=function(){E[this.Pa+16>>2]=0}}var q=\\\"undefined\\\"!=typeof TextDecoder?new TextDecoder(\\\"utf8\\\"):void 0,J=(e,t,r)=>{var n=t+r;for(r=t;e[r]&&!(r>=n);)++r;if(16<r-t&&e.buffer&&q)return q.decode(e.subarray(t,r));for(n=\\\"\\\";t<r;){var a=e[t++];if(128&a){var o=63&e[t++];if(192==(224&a))n+=String.fromCharCode((31&a)<<6|o);else{var i=63&e[t++];65536>(a=224==(240&a)?(15&a)<<12|o<<6|i:(7&a)<<18|o<<12|i<<6|63&e[t++])?n+=String.fromCharCode(a):(a-=65536,n+=String.fromCharCode(55296|a>>10,56320|1023&a))}}else n+=String.fromCharCode(a)}return n},X=e=>{for(var t=0,r=0;r<e.length;++r){var n=e.charCodeAt(r);127>=n?t++:2047>=n?t+=2:55296<=n&&57343>=n?(t+=4,++r):t+=3}return t},K=(e,t,r,n)=>{if(!(0<n))return 0;var a=r;n=r+n-1;for(var o=0;o<e.length;++o){var i=e.charCodeAt(o);if(55296<=i&&57343>=i&&(i=65536+((1023&i)<<10)|1023&e.charCodeAt(++o)),127>=i){if(r>=n)break;t[r++]=i}else{if(2047>=i){if(r+1>=n)break;t[r++]=192|i>>6}else{if(65535>=i){if(r+2>=n)break;t[r++]=224|i>>12}else{if(r+3>=n)break;t[r++]=240|i>>18,t[r++]=128|i>>12&63}t[r++]=128|i>>6&63}t[r++]=128|63&i}}return t[r]=0,r-a};function Q(e){if(null===e)return\\\"null\\\";var t=typeof e;return\\\"object\\\"===t||\\\"array\\\"===t||\\\"function\\\"===t?e.toString():\\\"\\\"+e}var Z=void 0;function ee(e){for(var t=\\\"\\\";O[e];)t+=Z[O[e++]];return t}var te={},re={},ne={},ae=void 0;function oe(e){throw new ae(e)}function ie(e,t,r={}){if(!(\\\"argPackAdvance\\\"in t))throw new TypeError(\\\"registerType registeredInstance requires argPackAdvance\\\");!function(e,t,r={}){var n=t.name;if(e||oe(`type \\\"${n}\\\" must have a positive integer typeid pointer`),re.hasOwnProperty(e)){if(r.$a)return;oe(`Cannot register type '${n}' twice`)}re[e]=t,delete ne[e],te.hasOwnProperty(e)&&(t=te[e],delete te[e],t.forEach((e=>e())))}(e,t,r)}function se(e,t,r){switch(t){case 0:return r?function(e){return _[e]}:function(e){return O[e]};case 1:return r?function(e){return A[e>>1]}:function(e){return T[e>>1]};case 2:return r?function(e){return S[e>>2]}:function(e){return E[e>>2]};case 3:return r?function(e){return R[e>>3]}:function(e){return P[e>>3]};default:throw new TypeError(\\\"Unknown integer type: \\\"+e)}}function ue(e){switch(e){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError(`Unknown type size: ${e}`)}}function ce(){this.Ma=[void 0],this.Wa=[]}var le=new ce;function fe(e){e>=le.Pa&&0==--le.get(e).Xa&&le.Ua(e)}var de=e=>(e||oe(\\\"Cannot use deleted val. handle = \\\"+e),le.get(e).value),pe=e=>{switch(e){case void 0:return 1;case null:return 2;case!0:return 3;case!1:return 4;default:return le.Ta({Xa:1,value:e})}};function ge(e){return this.fromWireType(S[e>>2])}function he(e,t){switch(t){case 2:return function(e){return this.fromWireType(M[e>>2])};case 3:return function(e){return this.fromWireType(C[e>>3])};default:throw new TypeError(\\\"Unknown float type: \\\"+e)}}var me=\\\"undefined\\\"!=typeof TextDecoder?new TextDecoder(\\\"utf-16le\\\"):void 0,ye=(e,t)=>{for(var r=e>>1,n=r+t/2;!(r>=n)&&T[r];)++r;if(32<(r<<=1)-e&&me)return me.decode(O.subarray(e,r));for(r=\\\"\\\",n=0;!(n>=t/2);++n){var a=A[e+2*n>>1];if(0==a)break;r+=String.fromCharCode(a)}return r},ve=(e,t,r)=>{if(void 0===r&&(r=2147483647),2>r)return 0;var n=t;r=(r-=2)<2*e.length?r/2:e.length;for(var a=0;a<r;++a)A[t>>1]=e.charCodeAt(a),t+=2;return A[t>>1]=0,t-n},be=e=>2*e.length,we=(e,t)=>{for(var r=0,n=\\\"\\\";!(r>=t/4);){var a=S[e+4*r>>2];if(0==a)break;++r,65536<=a?(a-=65536,n+=String.fromCharCode(55296|a>>10,56320|1023&a)):n+=String.fromCharCode(a)}return n},_e=(e,t,r)=>{if(void 0===r&&(r=2147483647),4>r)return 0;var n=t;r=n+r-4;for(var a=0;a<e.length;++a){var o=e.charCodeAt(a);if(55296<=o&&57343>=o&&(o=65536+((1023&o)<<10)|1023&e.charCodeAt(++a)),S[t>>2]=o,(t+=4)+4>r)break}return S[t>>2]=0,t-n},Oe=e=>{for(var t=0,r=0;r<e.length;++r){var n=e.charCodeAt(r);55296<=n&&57343>=n&&++r,t+=4}return t};function Ae(e,t){var r=re[e];if(void 0===r){var n=ee(e=qe(e));Ve(e),oe(t+\\\" has unknown type \\\"+n)}return r}var Te={};function Se(e){var t=Te[e];return void 0===t?ee(e):t}var Ee=[];function Me(){return\\\"object\\\"==typeof globalThis?globalThis:Function(\\\"return this\\\")()}function Re(e){if(void 0===e)return\\\"_unknown\\\";var t=(e=e.replace(/[^a-zA-Z0-9_]/g,\\\"$\\\")).charCodeAt(0);return 48<=t&&57>=t?`_${e}`:e}var Pe=[];var Ce={};function Fe(e){return-9007199254740992>e||9007199254740992<e?NaN:Number(e)}for(var ke,Ie=e=>0==e%4&&(0!=e%100||0==e%400),De=[0,31,60,91,121,152,182,213,244,274,305,335],Ue=[0,31,59,90,120,151,181,212,243,273,304,334],xe=e=>{var t=X(e)+1,r=Be(t);return r&&K(e,O,r,t),r},We={},Le=()=>{if(!ke){var e,t={USER:\\\"web_user\\\",LOGNAME:\\\"web_user\\\",PATH:\\\"/\\\",PWD:\\\"/\\\",HOME:\\\"/home/web_user\\\",LANG:(\\\"object\\\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\\\"C\\\").replace(\\\"-\\\",\\\"_\\\")+\\\".UTF-8\\\",_:c||\\\"./this.program\\\"};for(e in We)void 0===We[e]?delete t[e]:t[e]=We[e];var r=[];for(e in t)r.push(`${e}=${t[e]}`);ke=r}return ke},He=[null,[],[]],je=[31,29,31,30,31,30,31,31,30,31,30,31],Ye=[31,28,31,30,31,30,31,31,30,31,30,31],Ne=(e,t,r,n)=>{function a(e,t,r){for(e=\\\"number\\\"==typeof e?e.toString():e||\\\"\\\";e.length<t;)e=r[0]+e;return e}function o(e,t){return a(e,t,\\\"0\\\")}function i(e,t){function r(e){return 0>e?-1:0<e?1:0}var n;return 0===(n=r(e.getFullYear()-t.getFullYear()))&&0===(n=r(e.getMonth()-t.getMonth()))&&(n=r(e.getDate()-t.getDate())),n}function s(e){switch(e.getDay()){case 0:return new Date(e.getFullYear()-1,11,29);case 1:return e;case 2:return new Date(e.getFullYear(),0,3);case 3:return new Date(e.getFullYear(),0,2);case 4:return new Date(e.getFullYear(),0,1);case 5:return new Date(e.getFullYear()-1,11,31);case 6:return new Date(e.getFullYear()-1,11,30)}}function u(e){var t=e.Na;for(e=new Date(new Date(e.Oa+1900,0,1).getTime());0<t;){var r=e.getMonth(),n=(Ie(e.getFullYear())?je:Ye)[r];if(!(t>n-e.getDate())){e.setDate(e.getDate()+t);break}t-=n-e.getDate()+1,e.setDate(1),11>r?e.setMonth(r+1):(e.setMonth(0),e.setFullYear(e.getFullYear()+1))}return r=new Date(e.getFullYear()+1,0,4),t=s(new Date(e.getFullYear(),0,4)),r=s(r),0>=i(t,e)?0>=i(r,e)?e.getFullYear()+1:e.getFullYear():e.getFullYear()-1}var c=S[n+40>>2];for(var l in n={eb:S[n>>2],cb:S[n+4>>2],Ra:S[n+8>>2],Va:S[n+12>>2],Sa:S[n+16>>2],Oa:S[n+20>>2],Ia:S[n+24>>2],Na:S[n+28>>2],gb:S[n+32>>2],bb:S[n+36>>2],fb:c&&c?J(O,c):\\\"\\\"},r=r?J(O,r):\\\"\\\",c={\\\"%c\\\":\\\"%a %b %d %H:%M:%S %Y\\\",\\\"%D\\\":\\\"%m/%d/%y\\\",\\\"%F\\\":\\\"%Y-%m-%d\\\",\\\"%h\\\":\\\"%b\\\",\\\"%r\\\":\\\"%I:%M:%S %p\\\",\\\"%R\\\":\\\"%H:%M\\\",\\\"%T\\\":\\\"%H:%M:%S\\\",\\\"%x\\\":\\\"%m/%d/%y\\\",\\\"%X\\\":\\\"%H:%M:%S\\\",\\\"%Ec\\\":\\\"%c\\\",\\\"%EC\\\":\\\"%C\\\",\\\"%Ex\\\":\\\"%m/%d/%y\\\",\\\"%EX\\\":\\\"%H:%M:%S\\\",\\\"%Ey\\\":\\\"%y\\\",\\\"%EY\\\":\\\"%Y\\\",\\\"%Od\\\":\\\"%d\\\",\\\"%Oe\\\":\\\"%e\\\",\\\"%OH\\\":\\\"%H\\\",\\\"%OI\\\":\\\"%I\\\",\\\"%Om\\\":\\\"%m\\\",\\\"%OM\\\":\\\"%M\\\",\\\"%OS\\\":\\\"%S\\\",\\\"%Ou\\\":\\\"%u\\\",\\\"%OU\\\":\\\"%U\\\",\\\"%OV\\\":\\\"%V\\\",\\\"%Ow\\\":\\\"%w\\\",\\\"%OW\\\":\\\"%W\\\",\\\"%Oy\\\":\\\"%y\\\"})r=r.replace(new RegExp(l,\\\"g\\\"),c[l]);var f=\\\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\\\".split(\\\" \\\"),d=\\\"January February March April May June July August September October November December\\\".split(\\\" \\\");for(l in c={\\\"%a\\\":e=>f[e.Ia].substring(0,3),\\\"%A\\\":e=>f[e.Ia],\\\"%b\\\":e=>d[e.Sa].substring(0,3),\\\"%B\\\":e=>d[e.Sa],\\\"%C\\\":e=>o((e.Oa+1900)/100|0,2),\\\"%d\\\":e=>o(e.Va,2),\\\"%e\\\":e=>a(e.Va,2,\\\" \\\"),\\\"%g\\\":e=>u(e).toString().substring(2),\\\"%G\\\":e=>u(e),\\\"%H\\\":e=>o(e.Ra,2),\\\"%I\\\":e=>(0==(e=e.Ra)?e=12:12<e&&(e-=12),o(e,2)),\\\"%j\\\":e=>{for(var t=0,r=0;r<=e.Sa-1;t+=(Ie(e.Oa+1900)?je:Ye)[r++]);return o(e.Va+t,3)},\\\"%m\\\":e=>o(e.Sa+1,2),\\\"%M\\\":e=>o(e.cb,2),\\\"%n\\\":()=>\\\"\\\\n\\\",\\\"%p\\\":e=>0<=e.Ra&&12>e.Ra?\\\"AM\\\":\\\"PM\\\",\\\"%S\\\":e=>o(e.eb,2),\\\"%t\\\":()=>\\\"\\\\t\\\",\\\"%u\\\":e=>e.Ia||7,\\\"%U\\\":e=>o(Math.floor((e.Na+7-e.Ia)/7),2),\\\"%V\\\":e=>{var t=Math.floor((e.Na+7-(e.Ia+6)%7)/7);if(2>=(e.Ia+371-e.Na-2)%7&&t++,t)53==t&&(4==(r=(e.Ia+371-e.Na)%7)||3==r&&Ie(e.Oa)||(t=1));else{t=52;var r=(e.Ia+7-e.Na-1)%7;(4==r||5==r&&Ie(e.Oa%400-1))&&t++}return o(t,2)},\\\"%w\\\":e=>e.Ia,\\\"%W\\\":e=>o(Math.floor((e.Na+7-(e.Ia+6)%7)/7),2),\\\"%y\\\":e=>(e.Oa+1900).toString().substring(2),\\\"%Y\\\":e=>e.Oa+1900,\\\"%z\\\":e=>{var t=0<=(e=e.bb);return e=Math.abs(e)/60,(t?\\\"+\\\":\\\"-\\\")+String(\\\"0000\\\"+(e/60*100+e%60)).slice(-4)},\\\"%Z\\\":e=>e.fb,\\\"%%\\\":()=>\\\"%\\\"},r=r.replace(/%%/g,\\\"\\\\0\\\\0\\\"),c)r.includes(l)&&(r=r.replace(new RegExp(l,\\\"g\\\"),c[l](n)));return l=function(e){var t=Array(X(e)+1);return K(e,t,0,t.length),t}(r=r.replace(/\\\\0\\\\0/g,\\\"%\\\")),l.length>t?0:(_.set(l,e),l.length-1)},$e=Array(256),ze=0;256>ze;++ze)$e[ze]=String.fromCharCode(ze);Z=$e,ae=a.BindingError=class extends Error{constructor(e){super(e),this.name=\\\"BindingError\\\"}},a.InternalError=class extends Error{constructor(e){super(e),this.name=\\\"InternalError\\\"}},Object.assign(ce.prototype,{get(e){return this.Ma[e]},has(e){return void 0!==this.Ma[e]},Ta(e){var t=this.Wa.pop()||this.Ma.length;return this.Ma[t]=e,t},Ua(e){this.Ma[e]=void 0,this.Wa.push(e)}}),le.Ma.push({value:void 0},{value:null},{value:!0},{value:!1}),le.Pa=le.Ma.length,a.count_emval_handles=function(){for(var e=0,t=le.Pa;t<le.Ma.length;++t)void 0!==le.Ma[t]&&++e;return e};var Ge={a:function(e,t,r){throw new V(e).Ta(t,r),e},v:function(){return 0},ba:()=>{},N:()=>{},P:()=>{},H:function(){return 0},$:()=>{},V:()=>{},_:()=>{},A:function(){},O:()=>{},L:()=>{},aa:()=>{},M:()=>{},D:function(e,t,r,n,a){t=ee(t),r=ue(r);var o=-1!=t.indexOf(\\\"u\\\");o&&(a=(1n<<64n)-1n),ie(e,{name:t,fromWireType:function(e){return e},toWireType:function(e,r){if(\\\"bigint\\\"!=typeof r&&\\\"number\\\"!=typeof r)throw new TypeError(`Cannot convert \\\"${Q(r)}\\\" to ${this.name}`);if(r<n||r>a)throw new TypeError(`Passing a number \\\"${Q(r)}\\\" from JS side to C/C++ side to an argument of type \\\"${t}\\\", which is outside the valid range [${n}, ${a}]!`);return r},argPackAdvance:8,readValueFromPointer:se(t,r,!o),Qa:null})},ea:function(e,t,r,n,a){var o=ue(r);ie(e,{name:t=ee(t),fromWireType:function(e){return!!e},toWireType:function(e,t){return t?n:a},argPackAdvance:8,readValueFromPointer:function(e){if(1===r)var n=_;else if(2===r)n=A;else{if(4!==r)throw new TypeError(\\\"Unknown boolean type size: \\\"+t);n=S}return this.fromWireType(n[e>>o])},Qa:null})},da:function(e,t){ie(e,{name:t=ee(t),fromWireType:function(e){var t=de(e);return fe(e),t},toWireType:function(e,t){return pe(t)},argPackAdvance:8,readValueFromPointer:ge,Qa:null})},C:function(e,t,r){r=ue(r),ie(e,{name:t=ee(t),fromWireType:function(e){return e},toWireType:function(e,t){return t},argPackAdvance:8,readValueFromPointer:he(t,r),Qa:null})},p:function(e,t,r,n,a){t=ee(t),-1===a&&(a=4294967295),a=ue(r);var o=e=>e;if(0===n){var i=32-8*r;o=e=>e<<i>>>i}r=t.includes(\\\"unsigned\\\")?function(e,t){return t>>>0}:function(e,t){return t},ie(e,{name:t,fromWireType:o,toWireType:r,argPackAdvance:8,readValueFromPointer:se(t,a,0!==n),Qa:null})},l:function(e,t,r){function n(e){e>>=2;var t=E;return new a(t.buffer,t[e+1],t[e])}var a=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array,BigInt64Array,BigUint64Array][t];ie(e,{name:r=ee(r),fromWireType:n,argPackAdvance:8,readValueFromPointer:n},{$a:!0})},E:function(e,t){var r=\\\"std::string\\\"===(t=ee(t));ie(e,{name:t,fromWireType:function(e){var t=E[e>>2],n=e+4;if(r)for(var a=n,o=0;o<=t;++o){var i=n+o;if(o==t||0==O[i]){if(a=a?J(O,a,i-a):\\\"\\\",void 0===s)var s=a;else s+=String.fromCharCode(0),s+=a;a=i+1}}else{for(s=Array(t),o=0;o<t;++o)s[o]=String.fromCharCode(O[n+o]);s=s.join(\\\"\\\")}return Ve(e),s},toWireType:function(e,t){t instanceof ArrayBuffer&&(t=new Uint8Array(t));var n=\\\"string\\\"==typeof t;n||t instanceof Uint8Array||t instanceof Uint8ClampedArray||t instanceof Int8Array||oe(\\\"Cannot pass non-string to std::string\\\");var a=r&&n?X(t):t.length,o=Be(4+a+1),i=o+4;if(E[o>>2]=a,r&&n)K(t,O,i,a+1);else if(n)for(n=0;n<a;++n){var s=t.charCodeAt(n);255<s&&(Ve(i),oe(\\\"String has UTF-16 code units that do not fit in 8 bits\\\")),O[i+n]=s}else for(n=0;n<a;++n)O[i+n]=t[n];return null!==e&&e.push(Ve,o),o},argPackAdvance:8,readValueFromPointer:ge,Qa:function(e){Ve(e)}})},x:function(e,t,r){if(r=ee(r),2===t)var n=ye,a=ve,o=be,i=()=>T,s=1;else 4===t&&(n=we,a=_e,o=Oe,i=()=>E,s=2);ie(e,{name:r,fromWireType:function(e){for(var r,a=E[e>>2],o=i(),u=e+4,c=0;c<=a;++c){var l=e+4+c*t;c!=a&&0!=o[l>>s]||(u=n(u,l-u),void 0===r?r=u:(r+=String.fromCharCode(0),r+=u),u=l+t)}return Ve(e),r},toWireType:function(e,n){\\\"string\\\"!=typeof n&&oe(`Cannot pass non-string to C++ string type ${r}`);var i=o(n),u=Be(4+i+t);return E[u>>2]=i>>s,a(n,u+4,i+t),null!==e&&e.push(Ve,u),u},argPackAdvance:8,readValueFromPointer:ge,Qa:function(e){Ve(e)}})},fa:function(e,t){ie(e,{ab:!0,name:t=ee(t),argPackAdvance:0,fromWireType:function(){},toWireType:function(){}})},ca:()=>!0,o:function(e,t,r){e=de(e),t=Ae(t,\\\"emval::as\\\");var n=[],a=pe(n);return E[r>>2]=a,t.toWireType(n,e)},h:function(e,t,r,n,a){e=Ee[e],t=de(t),r=Se(r);var o=[];return E[n>>2]=pe(o),e(t,r,o,a)},q:function(e,t,r,n){(e=Ee[e])(t=de(t),r=Se(r),null,n)},b:fe,F:function(e,t){return(e=de(e))==de(t)},u:function(e){return 0===e?pe(Me()):(e=Se(e),pe(Me()[e]))},g:function(e,t){var r=function(e,t){for(var r=Array(e),n=0;n<e;++n)r[n]=Ae(E[t+4*n>>2],\\\"parameter \\\"+n);return r}(e,t),n=r[0];t=n.name+\\\"_$\\\"+r.slice(1).map((function(e){return e.name})).join(\\\"_\\\")+\\\"$\\\";var a=Pe[t];if(void 0!==a)return a;a=[\\\"retType\\\"];for(var o=[n],i=\\\"\\\",s=0;s<e-1;++s)i+=(0!==s?\\\", \\\":\\\"\\\")+\\\"arg\\\"+s,a.push(\\\"argType\\\"+s),o.push(r[1+s]);var u=\\\"return function \\\"+Re(\\\"methodCaller_\\\"+t)+\\\"(handle, name, destructors, args) {\\\\n\\\",c=0;for(s=0;s<e-1;++s)u+=\\\"    var arg\\\"+s+\\\" = argType\\\"+s+\\\".readValueFromPointer(args\\\"+(c?\\\"+\\\"+c:\\\"\\\")+\\\");\\\\n\\\",c+=r[s+1].argPackAdvance;for(u+=\\\"    var rv = handle[name](\\\"+i+\\\");\\\\n\\\",s=0;s<e-1;++s)r[s+1].deleteObject&&(u+=\\\"    argType\\\"+s+\\\".deleteObject(arg\\\"+s+\\\");\\\\n\\\");return n.ab||(u+=\\\"    return retType.toWireType(destructors, rv);\\\\n\\\"),a.push(u+\\\"};\\\\n\\\"),a=function(e){var t=Ee.length;return Ee.push(e),t}(e=function(e){var t=Function;if(!(t instanceof Function))throw new TypeError(`new_ called with constructor type ${typeof t} which is not a function`);var r=function(e,t){return{[e=Re(e)]:function(){return t.apply(this,arguments)}}[e]}(t.name||\\\"unknownFunctionName\\\",(function(){}));return r.prototype=t.prototype,r=new r,(e=t.apply(r,e))instanceof Object?e:r}(a).apply(null,o)),Pe[t]=a},r:function(e,t){return e=de(e),t=de(t),pe(e[t])},c:function(e){4<e&&(le.get(e).Xa+=1)},G:function(e,t,r,n){e=de(e);var o=Ce[t];return o||(o=function(e){for(var t=\\\"\\\",r=0;r<e;++r)t+=(0!==r?\\\", \\\":\\\"\\\")+\\\"arg\\\"+r;var n=\\\"return function emval_allocator_\\\"+e+\\\"(constructor, argTypes, args) {\\\\n  var HEAPU32 = getMemory();\\\\n\\\";for(r=0;r<e;++r)n+=\\\"var argType\\\"+r+\\\" = requireRegisteredType(HEAPU32[((argTypes)>>2)], 'parameter \\\"+r+\\\"');\\\\nvar arg\\\"+r+\\\" = argType\\\"+r+\\\".readValueFromPointer(args);\\\\nargs += argType\\\"+r+\\\"['argPackAdvance'];\\\\nargTypes += 4;\\\\n\\\";return new Function(\\\"requireRegisteredType\\\",\\\"Module\\\",\\\"valueToHandle\\\",\\\"getMemory\\\",n+\\\"var obj = new constructor(\\\"+t+\\\");\\\\nreturn valueToHandle(obj);\\\\n}\\\\n\\\")(Ae,a,pe,(()=>E))}(t),Ce[t]=o),o(e,r,n)},s:function(){return pe([])},k:function(e){e=de(e);for(var t=Array(e.length),r=0;r<e.length;r++)t[r]=e[r];return pe(t)},d:function(e){return pe(Se(e))},j:function(){return pe({})},f:function(e){for(var t=de(e);t.length;){var r=t.pop();t.pop()(r)}fe(e)},i:function(e,t,r){e=de(e),t=de(t),r=de(r),e[t]=r},e:function(e,t){return e=(e=Ae(e,\\\"_emval_take_value\\\")).readValueFromPointer(t),pe(e)},S:function(e,t){e=Fe(e),t=Fe(t),e=new Date(1e3*e),S[t>>2]=e.getUTCSeconds(),S[t+4>>2]=e.getUTCMinutes(),S[t+8>>2]=e.getUTCHours(),S[t+12>>2]=e.getUTCDate(),S[t+16>>2]=e.getUTCMonth(),S[t+20>>2]=e.getUTCFullYear()-1900,S[t+24>>2]=e.getUTCDay(),S[t+28>>2]=(e.getTime()-Date.UTC(e.getUTCFullYear(),0,1,0,0,0,0))/864e5|0},T:function(e,t){e=Fe(e),t=Fe(t),e=new Date(1e3*e),S[t>>2]=e.getSeconds(),S[t+4>>2]=e.getMinutes(),S[t+8>>2]=e.getHours(),S[t+12>>2]=e.getDate(),S[t+16>>2]=e.getMonth(),S[t+20>>2]=e.getFullYear()-1900,S[t+24>>2]=e.getDay(),S[t+28>>2]=(Ie(e.getFullYear())?De:Ue)[e.getMonth()]+e.getDate()-1|0,S[t+36>>2]=-60*e.getTimezoneOffset();var r=new Date(e.getFullYear(),6,1).getTimezoneOffset(),n=new Date(e.getFullYear(),0,1).getTimezoneOffset();S[t+32>>2]=0|(r!=n&&e.getTimezoneOffset()==Math.min(n,r))},U:function(e){e=Fe(e);var t=new Date(S[e+20>>2]+1900,S[e+16>>2],S[e+12>>2],S[e+8>>2],S[e+4>>2],S[e>>2],0),r=S[e+32>>2],n=t.getTimezoneOffset(),a=new Date(t.getFullYear(),6,1).getTimezoneOffset(),o=new Date(t.getFullYear(),0,1).getTimezoneOffset(),i=Math.min(o,a);return 0>r?S[e+32>>2]=Number(a!=o&&i==n):0<r!=(i==n)&&(a=Math.max(o,a),t.setTime(t.getTime()+6e4*((0<r?i:a)-n))),S[e+24>>2]=t.getDay(),S[e+28>>2]=(Ie(t.getFullYear())?De:Ue)[t.getMonth()]+t.getDate()-1|0,S[e>>2]=t.getSeconds(),S[e+4>>2]=t.getMinutes(),S[e+8>>2]=t.getHours(),S[e+12>>2]=t.getDate(),S[e+16>>2]=t.getMonth(),S[e+20>>2]=t.getYear(),BigInt(t.getTime()/1e3)},Q:function(){return-52},R:function(){},J:(e,t,r)=>{function n(e){return(e=e.toTimeString().match(/\\\\(([A-Za-z ]+)\\\\)$/))?e[1]:\\\"GMT\\\"}var a=(new Date).getFullYear(),o=new Date(a,0,1),i=new Date(a,6,1);a=o.getTimezoneOffset();var s=i.getTimezoneOffset();E[e>>2]=60*Math.max(a,s),S[t>>2]=Number(a!=s),e=n(o),t=n(i),e=xe(e),t=xe(t),s<a?(E[r>>2]=e,E[r+4>>2]=t):(E[r>>2]=t,E[r+4>>2]=e)},t:()=>{Y(\\\"\\\")},B:function(){return Date.now()},K:()=>2147483648,n:()=>performance.now(),Z:(e,t,r)=>O.copyWithin(e,t,t+r),I:e=>{var t=O.length;if(2147483648<(e>>>=0))return!1;for(var r=1;4>=r;r*=2){var n=t*(1+.2/r);n=Math.min(n,e+100663296);var a=Math;n=Math.max(e,n);e:{a=a.min.call(a,2147483648,n+(65536-n%65536)%65536)-b.buffer.byteLength+65535>>>16;try{b.grow(a),k();var o=1;break e}catch(e){}o=void 0}if(o)return!0}return!1},X:(e,t)=>{var r=0;return Le().forEach((function(n,a){var o=t+r;for(a=E[e+4*a>>2]=o,o=0;o<n.length;++o)_[a++>>0]=n.charCodeAt(o);_[a>>0]=0,r+=n.length+1})),0},Y:(e,t)=>{var r=Le();E[e>>2]=r.length;var n=0;return r.forEach((function(e){n+=e.length+1})),E[t>>2]=n,0},w:()=>52,z:()=>52,W:function(){return 70},y:(e,t,r,n)=>{for(var a=0,o=0;o<r;o++){var i=E[t>>2],s=E[t+4>>2];t+=8;for(var u=0;u<s;u++){var c=O[i+u],l=He[e];0===c||10===c?((1===e?y:v)(J(l,0)),l.length=0):l.push(c)}a+=s}return E[n>>2]=a,0},ga:Ne,m:(e,t,r,n)=>Ne(e,t,r,n)};!function(){function e(e){if(w=e=e.exports,b=w.ha,k(),D.unshift(w.ia),L--,a.monitorRunDependencies&&a.monitorRunDependencies(L),0==L&&(null!==H&&(clearInterval(H),H=null),j)){var t=j;j=null,t()}return e}var t={a:Ge};if(L++,a.monitorRunDependencies&&a.monitorRunDependencies(L),a.instantiateWasm)try{return a.instantiateWasm(t,e)}catch(e){v(\\\"Module.instantiateWasm callback failed with error: \\\"+e),n(e)}(function(e,t){var r=W;return m||\\\"function\\\"!=typeof WebAssembly.instantiateStreaming||N(r)||r.startsWith(\\\"file://\\\")||d||\\\"function\\\"!=typeof fetch?G(r,e,t):fetch(r,{credentials:\\\"same-origin\\\"}).then((n=>WebAssembly.instantiateStreaming(n,e).then(t,(function(n){return v(\\\"wasm streaming compile failed: \\\"+n),v(\\\"falling back to ArrayBuffer instantiation\\\"),G(r,e,t)}))))})(t,(function(t){e(t.instance)})).catch(n)}(),a._OrtInit=(e,t)=>(a._OrtInit=w.ja)(e,t),a._OrtGetLastError=(e,t)=>(a._OrtGetLastError=w.ka)(e,t),a._OrtCreateSessionOptions=(e,t,r,n,o,i,s,u,c,l)=>(a._OrtCreateSessionOptions=w.la)(e,t,r,n,o,i,s,u,c,l),a._OrtAppendExecutionProvider=(e,t)=>(a._OrtAppendExecutionProvider=w.ma)(e,t),a._OrtAddFreeDimensionOverride=(e,t,r)=>(a._OrtAddFreeDimensionOverride=w.na)(e,t,r),a._OrtAddSessionConfigEntry=(e,t,r)=>(a._OrtAddSessionConfigEntry=w.oa)(e,t,r),a._OrtReleaseSessionOptions=e=>(a._OrtReleaseSessionOptions=w.pa)(e),a._OrtCreateSession=(e,t,r)=>(a._OrtCreateSession=w.qa)(e,t,r),a._OrtReleaseSession=e=>(a._OrtReleaseSession=w.ra)(e),a._OrtGetInputOutputCount=(e,t,r)=>(a._OrtGetInputOutputCount=w.sa)(e,t,r),a._OrtGetInputName=(e,t)=>(a._OrtGetInputName=w.ta)(e,t),a._OrtGetOutputName=(e,t)=>(a._OrtGetOutputName=w.ua)(e,t),a._OrtFree=e=>(a._OrtFree=w.va)(e),a._OrtCreateTensor=(e,t,r,n,o)=>(a._OrtCreateTensor=w.wa)(e,t,r,n,o),a._OrtGetTensorData=(e,t,r,n,o)=>(a._OrtGetTensorData=w.xa)(e,t,r,n,o),a._OrtReleaseTensor=e=>(a._OrtReleaseTensor=w.ya)(e),a._OrtCreateRunOptions=(e,t,r,n)=>(a._OrtCreateRunOptions=w.za)(e,t,r,n),a._OrtAddRunConfigEntry=(e,t,r)=>(a._OrtAddRunConfigEntry=w.Aa)(e,t,r),a._OrtReleaseRunOptions=e=>(a._OrtReleaseRunOptions=w.Ba)(e),a._OrtRun=(e,t,r,n,o,i,s,u)=>(a._OrtRun=w.Ca)(e,t,r,n,o,i,s,u),a._OrtEndProfiling=e=>(a._OrtEndProfiling=w.Da)(e);var Be=a._malloc=e=>(Be=a._malloc=w.Ea)(e),Ve=a._free=e=>(Ve=a._free=w.Fa)(e),qe=e=>(qe=w.Ga)(e);a.__embind_initialize_bindings=()=>(a.__embind_initialize_bindings=w.Ha)();var Je,Xe=()=>(Xe=w.Ja)(),Ke=e=>(Ke=w.Ka)(e),Qe=e=>(Qe=w.La)(e);function Ze(){function e(){if(!Je&&(Je=!0,a.calledRun=!0,!F)){if(B(D),t(a),a.onRuntimeInitialized&&a.onRuntimeInitialized(),a.postRun)for(\\\"function\\\"==typeof a.postRun&&(a.postRun=[a.postRun]);a.postRun.length;){var e=a.postRun.shift();U.unshift(e)}B(U)}}if(!(0<L)){if(a.preRun)for(\\\"function\\\"==typeof a.preRun&&(a.preRun=[a.preRun]);a.preRun.length;)x();B(I),0<L||(a.setStatus?(a.setStatus(\\\"Running...\\\"),setTimeout((function(){setTimeout((function(){a.setStatus(\\\"\\\")}),1),e()}),1)):e())}}if(a.stackAlloc=Qe,a.stackSave=Xe,a.stackRestore=Ke,a.UTF8ToString=(e,t)=>e?J(O,e,t):\\\"\\\",a.stringToUTF8=(e,t,r)=>K(e,O,t,r),a.lengthBytesUTF8=X,j=function e(){Je||Ze(),Je||(j=e)},a.preInit)for(\\\"function\\\"==typeof a.preInit&&(a.preInit=[a.preInit]);0<a.preInit.length;)a.preInit.pop()();return Ze(),e.ready});e.exports=n},154:e=>{\\\"use strict\\\";e.exports='\\\"use strict\\\";var e={},a=\\\"object\\\"==typeof process&&\\\"object\\\"==typeof process.versions&&\\\"string\\\"==typeof process.versions.node;if(a){var r=require(\\\"worker_threads\\\"),t=r.parentPort;t.on(\\\"message\\\",(e=>onmessage({data:e})));var s=require(\\\"fs\\\");Object.assign(global,{self:global,require:require,Module:e,location:{href:__filename},Worker:r.Worker,importScripts:e=>(0,eval)(s.readFileSync(e,\\\"utf8\\\")+\\\"//# sourceURL=\\\"+e),postMessage:e=>t.postMessage(e),performance:global.performance||{now:Date.now}})}var o=!1,d=function(){var e=Array.prototype.slice.call(arguments).join(\\\" \\\");a?s.writeSync(2,e+\\\"\\\\\\\\n\\\"):console.error(e)};self.alert=function(){var a=Array.prototype.slice.call(arguments).join(\\\" \\\");postMessage({cmd:\\\"alert\\\",text:a,threadId:e._pthread_self()})},e.instantiateWasm=(a,r)=>{var t=e.wasmModule;return e.wasmModule=null,r(new WebAssembly.Instance(t,a))},self.onunhandledrejection=e=>{throw e.reason??e},self.onmessage=function a(r){try{if(\\\"load\\\"===r.data.cmd){let s=[];self.onmessage=e=>s.push(e),self.startWorker=r=>{e=r,postMessage({cmd:\\\"loaded\\\"});for(let e of s)a(e);self.onmessage=a},e.wasmModule=r.data.wasmModule;for(const a of r.data.handlers)e[a]=(...e)=>{postMessage({cmd:\\\"callHandler\\\",handler:a,args:e})};if(e.wasmMemory=r.data.wasmMemory,e.buffer=e.wasmMemory.buffer,e.ENVIRONMENT_IS_PTHREAD=!0,\\\"string\\\"==typeof r.data.urlOrBlob)importScripts(r.data.urlOrBlob);else{var t=URL.createObjectURL(r.data.urlOrBlob);importScripts(t),URL.revokeObjectURL(t)}ortWasmThreaded(e)}else if(\\\"run\\\"===r.data.cmd){e.__emscripten_thread_init(r.data.pthread_ptr,0,0,1),e.__emscripten_thread_mailbox_await(r.data.pthread_ptr),e.establishStackSpace(),e.PThread.receiveObjectTransfer(r.data),e.PThread.threadInitTLS(),o||(o=!0);try{e.invokeEntryPoint(r.data.start_routine,r.data.arg)}catch(e){if(\\\"unwind\\\"!=e)throw e}}else\\\"cancel\\\"===r.data.cmd?e._pthread_self()&&e.__emscripten_thread_exit(-1):\\\"setimmediate\\\"===r.data.target||(\\\"checkMailbox\\\"===r.data.cmd?o&&e.checkMailbox():r.data.cmd&&(d(\\\"worker.js received unknown command \\\"+r.data.cmd),d(r.data)))}catch(a){throw e.__emscripten_thread_crashed&&e.__emscripten_thread_crashed(),a}};\\\\n'},147:e=>{\\\"use strict\\\";e.exports=require(\\\"fs\\\")},37:e=>{\\\"use strict\\\";e.exports=require(\\\"os\\\")},17:e=>{\\\"use strict\\\";e.exports=require(\\\"path\\\")},74:e=>{\\\"use strict\\\";e.exports=require(\\\"perf_hooks\\\")},267:e=>{\\\"use strict\\\";e.exports=require(\\\"worker_threads\\\")}},t={};function r(n){var a=t[n];if(void 0!==a)return a.exports;var o=t[n]={exports:{}};return e[n].call(o.exports,o,o.exports,r),o.exports}(()=>{\\\"use strict\\\";const e=r(259),t=r(263);self.onmessage=r=>{switch(r.data.type){case\\\"init-wasm\\\":try{(0,t.initializeWebAssembly)(r.data.in).then((()=>postMessage({type:\\\"init-wasm\\\"})),(e=>postMessage({type:\\\"init-wasm\\\",err:e})))}catch(e){postMessage({type:\\\"init-wasm\\\",err:e})}break;case\\\"init-ort\\\":try{(0,e.initRuntime)(r.data.in).then((()=>postMessage({type:\\\"init-ort\\\"})),(e=>postMessage({type:\\\"init-ort\\\",err:e}))),postMessage({type:\\\"init-ort\\\"})}catch(e){postMessage({type:\\\"init-ort\\\",err:e})}break;case\\\"create_allocate\\\":try{const{model:t}=r.data.in,n=(0,e.createSessionAllocate)(t);postMessage({type:\\\"create_allocate\\\",out:n})}catch(e){postMessage({type:\\\"create_allocate\\\",err:e})}break;case\\\"create_finalize\\\":try{const{modeldata:t,options:n}=r.data.in,a=(0,e.createSessionFinalize)(t,n);postMessage({type:\\\"create_finalize\\\",out:a})}catch(e){postMessage({type:\\\"create_finalize\\\",err:e})}break;case\\\"create\\\":try{const{model:t,options:n}=r.data.in,a=(0,e.createSession)(t,n);postMessage({type:\\\"create\\\",out:a})}catch(e){postMessage({type:\\\"create\\\",err:e})}break;case\\\"release\\\":try{const t=r.data.in;(0,e.releaseSession)(t),postMessage({type:\\\"release\\\"})}catch(e){postMessage({type:\\\"release\\\",err:e})}break;case\\\"run\\\":try{const{sessionId:t,inputIndices:n,inputs:a,outputIndices:o,options:i}=r.data.in;(0,e.run)(t,n,a,o,i).then((t=>{postMessage({type:\\\"run\\\",out:t},(0,e.extractTransferableBuffers)(t))}),(e=>{postMessage({type:\\\"run\\\",err:e})}))}catch(e){postMessage({type:\\\"run\\\",err:e})}break;case\\\"end-profiling\\\":try{const t=r.data.in;(0,e.endProfiling)(t),postMessage({type:\\\"end-profiling\\\"})}catch(e){postMessage({type:\\\"end-profiling\\\",err:e})}}}})()})();\\n\", \"Worker\", undefined, undefined);\n}\n","\"use strict\";\n\n/* eslint-env browser */\n\n/* eslint-disable no-undef, no-use-before-define, new-cap */\nmodule.exports = function (content, workerConstructor, workerOptions, url) {\n  var globalScope = self || window;\n\n  try {\n    try {\n      var blob;\n\n      try {\n        // New API\n        blob = new globalScope.Blob([content]);\n      } catch (e) {\n        // BlobBuilder = Deprecated, but widely implemented\n        var BlobBuilder = globalScope.BlobBuilder || globalScope.WebKitBlobBuilder || globalScope.MozBlobBuilder || globalScope.MSBlobBuilder;\n        blob = new BlobBuilder();\n        blob.append(content);\n        blob = blob.getBlob();\n      }\n\n      var URL = globalScope.URL || globalScope.webkitURL;\n      var objectURL = URL.createObjectURL(blob);\n      var worker = new globalScope[workerConstructor](objectURL, workerOptions);\n      URL.revokeObjectURL(objectURL);\n      return worker;\n    } catch (e) {\n      return new globalScope[workerConstructor](\"data:application/javascript,\".concat(encodeURIComponent(content)), workerOptions);\n    }\n  } catch (e) {\n    if (!url) {\n      throw Error(\"Inline worker is not supported\");\n    }\n\n    return new globalScope[workerConstructor](url, workerOptions);\n  }\n};","/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n\"use strict\";\n\nvar $protobuf = require(\"protobufjs/minimal\");\n\n// Common aliases\nvar $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nvar $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\n$root.onnx = (function() {\n\n    /**\n     * Namespace onnx.\n     * @exports onnx\n     * @namespace\n     */\n    var onnx = {};\n\n    /**\n     * Version enum.\n     * @name onnx.Version\n     * @enum {number}\n     * @property {number} _START_VERSION=0 _START_VERSION value\n     * @property {number} IR_VERSION_2017_10_10=1 IR_VERSION_2017_10_10 value\n     * @property {number} IR_VERSION_2017_10_30=2 IR_VERSION_2017_10_30 value\n     * @property {number} IR_VERSION_2017_11_3=3 IR_VERSION_2017_11_3 value\n     * @property {number} IR_VERSION_2019_1_22=4 IR_VERSION_2019_1_22 value\n     * @property {number} IR_VERSION_2019_3_18=5 IR_VERSION_2019_3_18 value\n     * @property {number} IR_VERSION_2019_9_19=6 IR_VERSION_2019_9_19 value\n     * @property {number} IR_VERSION_2020_5_8=7 IR_VERSION_2020_5_8 value\n     * @property {number} IR_VERSION_2021_7_30=8 IR_VERSION_2021_7_30 value\n     * @property {number} IR_VERSION=9 IR_VERSION value\n     */\n    onnx.Version = (function() {\n        var valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"_START_VERSION\"] = 0;\n        values[valuesById[1] = \"IR_VERSION_2017_10_10\"] = 1;\n        values[valuesById[2] = \"IR_VERSION_2017_10_30\"] = 2;\n        values[valuesById[3] = \"IR_VERSION_2017_11_3\"] = 3;\n        values[valuesById[4] = \"IR_VERSION_2019_1_22\"] = 4;\n        values[valuesById[5] = \"IR_VERSION_2019_3_18\"] = 5;\n        values[valuesById[6] = \"IR_VERSION_2019_9_19\"] = 6;\n        values[valuesById[7] = \"IR_VERSION_2020_5_8\"] = 7;\n        values[valuesById[8] = \"IR_VERSION_2021_7_30\"] = 8;\n        values[valuesById[9] = \"IR_VERSION\"] = 9;\n        return values;\n    })();\n\n    onnx.AttributeProto = (function() {\n\n        /**\n         * Properties of an AttributeProto.\n         * @memberof onnx\n         * @interface IAttributeProto\n         * @property {string|null} [name] AttributeProto name\n         * @property {string|null} [refAttrName] AttributeProto refAttrName\n         * @property {string|null} [docString] AttributeProto docString\n         * @property {onnx.AttributeProto.AttributeType|null} [type] AttributeProto type\n         * @property {number|null} [f] AttributeProto f\n         * @property {number|Long|null} [i] AttributeProto i\n         * @property {Uint8Array|null} [s] AttributeProto s\n         * @property {onnx.ITensorProto|null} [t] AttributeProto t\n         * @property {onnx.IGraphProto|null} [g] AttributeProto g\n         * @property {onnx.ISparseTensorProto|null} [sparseTensor] AttributeProto sparseTensor\n         * @property {onnx.ITypeProto|null} [tp] AttributeProto tp\n         * @property {Array.<number>|null} [floats] AttributeProto floats\n         * @property {Array.<number|Long>|null} [ints] AttributeProto ints\n         * @property {Array.<Uint8Array>|null} [strings] AttributeProto strings\n         * @property {Array.<onnx.ITensorProto>|null} [tensors] AttributeProto tensors\n         * @property {Array.<onnx.IGraphProto>|null} [graphs] AttributeProto graphs\n         * @property {Array.<onnx.ISparseTensorProto>|null} [sparseTensors] AttributeProto sparseTensors\n         * @property {Array.<onnx.ITypeProto>|null} [typeProtos] AttributeProto typeProtos\n         */\n\n        /**\n         * Constructs a new AttributeProto.\n         * @memberof onnx\n         * @classdesc Represents an AttributeProto.\n         * @implements IAttributeProto\n         * @constructor\n         * @param {onnx.IAttributeProto=} [properties] Properties to set\n         */\n        function AttributeProto(properties) {\n            this.floats = [];\n            this.ints = [];\n            this.strings = [];\n            this.tensors = [];\n            this.graphs = [];\n            this.sparseTensors = [];\n            this.typeProtos = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * AttributeProto name.\n         * @member {string} name\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.name = \"\";\n\n        /**\n         * AttributeProto refAttrName.\n         * @member {string} refAttrName\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.refAttrName = \"\";\n\n        /**\n         * AttributeProto docString.\n         * @member {string} docString\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.docString = \"\";\n\n        /**\n         * AttributeProto type.\n         * @member {onnx.AttributeProto.AttributeType} type\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.type = 0;\n\n        /**\n         * AttributeProto f.\n         * @member {number} f\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.f = 0;\n\n        /**\n         * AttributeProto i.\n         * @member {number|Long} i\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.i = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * AttributeProto s.\n         * @member {Uint8Array} s\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.s = $util.newBuffer([]);\n\n        /**\n         * AttributeProto t.\n         * @member {onnx.ITensorProto|null|undefined} t\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.t = null;\n\n        /**\n         * AttributeProto g.\n         * @member {onnx.IGraphProto|null|undefined} g\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.g = null;\n\n        /**\n         * AttributeProto sparseTensor.\n         * @member {onnx.ISparseTensorProto|null|undefined} sparseTensor\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.sparseTensor = null;\n\n        /**\n         * AttributeProto tp.\n         * @member {onnx.ITypeProto|null|undefined} tp\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.tp = null;\n\n        /**\n         * AttributeProto floats.\n         * @member {Array.<number>} floats\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.floats = $util.emptyArray;\n\n        /**\n         * AttributeProto ints.\n         * @member {Array.<number|Long>} ints\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.ints = $util.emptyArray;\n\n        /**\n         * AttributeProto strings.\n         * @member {Array.<Uint8Array>} strings\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.strings = $util.emptyArray;\n\n        /**\n         * AttributeProto tensors.\n         * @member {Array.<onnx.ITensorProto>} tensors\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.tensors = $util.emptyArray;\n\n        /**\n         * AttributeProto graphs.\n         * @member {Array.<onnx.IGraphProto>} graphs\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.graphs = $util.emptyArray;\n\n        /**\n         * AttributeProto sparseTensors.\n         * @member {Array.<onnx.ISparseTensorProto>} sparseTensors\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.sparseTensors = $util.emptyArray;\n\n        /**\n         * AttributeProto typeProtos.\n         * @member {Array.<onnx.ITypeProto>} typeProtos\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.typeProtos = $util.emptyArray;\n\n        /**\n         * Creates a new AttributeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto=} [properties] Properties to set\n         * @returns {onnx.AttributeProto} AttributeProto instance\n         */\n        AttributeProto.create = function create(properties) {\n            return new AttributeProto(properties);\n        };\n\n        /**\n         * Encodes the specified AttributeProto message. Does not implicitly {@link onnx.AttributeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto} message AttributeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AttributeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.f != null && Object.hasOwnProperty.call(message, \"f\"))\n                writer.uint32(/* id 2, wireType 5 =*/21).float(message.f);\n            if (message.i != null && Object.hasOwnProperty.call(message, \"i\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).int64(message.i);\n            if (message.s != null && Object.hasOwnProperty.call(message, \"s\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.s);\n            if (message.t != null && Object.hasOwnProperty.call(message, \"t\"))\n                $root.onnx.TensorProto.encode(message.t, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.g != null && Object.hasOwnProperty.call(message, \"g\"))\n                $root.onnx.GraphProto.encode(message.g, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n            if (message.floats != null && message.floats.length) {\n                writer.uint32(/* id 7, wireType 2 =*/58).fork();\n                for (var i = 0; i < message.floats.length; ++i)\n                    writer.float(message.floats[i]);\n                writer.ldelim();\n            }\n            if (message.ints != null && message.ints.length) {\n                writer.uint32(/* id 8, wireType 2 =*/66).fork();\n                for (var i = 0; i < message.ints.length; ++i)\n                    writer.int64(message.ints[i]);\n                writer.ldelim();\n            }\n            if (message.strings != null && message.strings.length)\n                for (var i = 0; i < message.strings.length; ++i)\n                    writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.strings[i]);\n            if (message.tensors != null && message.tensors.length)\n                for (var i = 0; i < message.tensors.length; ++i)\n                    $root.onnx.TensorProto.encode(message.tensors[i], writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();\n            if (message.graphs != null && message.graphs.length)\n                for (var i = 0; i < message.graphs.length; ++i)\n                    $root.onnx.GraphProto.encode(message.graphs[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            if (message.docString != null && Object.hasOwnProperty.call(message, \"docString\"))\n                writer.uint32(/* id 13, wireType 2 =*/106).string(message.docString);\n            if (message.tp != null && Object.hasOwnProperty.call(message, \"tp\"))\n                $root.onnx.TypeProto.encode(message.tp, writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n            if (message.typeProtos != null && message.typeProtos.length)\n                for (var i = 0; i < message.typeProtos.length; ++i)\n                    $root.onnx.TypeProto.encode(message.typeProtos[i], writer.uint32(/* id 15, wireType 2 =*/122).fork()).ldelim();\n            if (message.type != null && Object.hasOwnProperty.call(message, \"type\"))\n                writer.uint32(/* id 20, wireType 0 =*/160).int32(message.type);\n            if (message.refAttrName != null && Object.hasOwnProperty.call(message, \"refAttrName\"))\n                writer.uint32(/* id 21, wireType 2 =*/170).string(message.refAttrName);\n            if (message.sparseTensor != null && Object.hasOwnProperty.call(message, \"sparseTensor\"))\n                $root.onnx.SparseTensorProto.encode(message.sparseTensor, writer.uint32(/* id 22, wireType 2 =*/178).fork()).ldelim();\n            if (message.sparseTensors != null && message.sparseTensors.length)\n                for (var i = 0; i < message.sparseTensors.length; ++i)\n                    $root.onnx.SparseTensorProto.encode(message.sparseTensors[i], writer.uint32(/* id 23, wireType 2 =*/186).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified AttributeProto message, length delimited. Does not implicitly {@link onnx.AttributeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto} message AttributeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AttributeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an AttributeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.AttributeProto} AttributeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AttributeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.AttributeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.name = reader.string();\n                        break;\n                    }\n                case 21: {\n                        message.refAttrName = reader.string();\n                        break;\n                    }\n                case 13: {\n                        message.docString = reader.string();\n                        break;\n                    }\n                case 20: {\n                        message.type = reader.int32();\n                        break;\n                    }\n                case 2: {\n                        message.f = reader.float();\n                        break;\n                    }\n                case 3: {\n                        message.i = reader.int64();\n                        break;\n                    }\n                case 4: {\n                        message.s = reader.bytes();\n                        break;\n                    }\n                case 5: {\n                        message.t = $root.onnx.TensorProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 6: {\n                        message.g = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 22: {\n                        message.sparseTensor = $root.onnx.SparseTensorProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 14: {\n                        message.tp = $root.onnx.TypeProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 7: {\n                        if (!(message.floats && message.floats.length))\n                            message.floats = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.floats.push(reader.float());\n                        } else\n                            message.floats.push(reader.float());\n                        break;\n                    }\n                case 8: {\n                        if (!(message.ints && message.ints.length))\n                            message.ints = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.ints.push(reader.int64());\n                        } else\n                            message.ints.push(reader.int64());\n                        break;\n                    }\n                case 9: {\n                        if (!(message.strings && message.strings.length))\n                            message.strings = [];\n                        message.strings.push(reader.bytes());\n                        break;\n                    }\n                case 10: {\n                        if (!(message.tensors && message.tensors.length))\n                            message.tensors = [];\n                        message.tensors.push($root.onnx.TensorProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 11: {\n                        if (!(message.graphs && message.graphs.length))\n                            message.graphs = [];\n                        message.graphs.push($root.onnx.GraphProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 23: {\n                        if (!(message.sparseTensors && message.sparseTensors.length))\n                            message.sparseTensors = [];\n                        message.sparseTensors.push($root.onnx.SparseTensorProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 15: {\n                        if (!(message.typeProtos && message.typeProtos.length))\n                            message.typeProtos = [];\n                        message.typeProtos.push($root.onnx.TypeProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an AttributeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.AttributeProto} AttributeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AttributeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an AttributeProto message.\n         * @function verify\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        AttributeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                if (!$util.isString(message.refAttrName))\n                    return \"refAttrName: string expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                switch (message.type) {\n                default:\n                    return \"type: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                case 5:\n                case 11:\n                case 13:\n                case 6:\n                case 7:\n                case 8:\n                case 9:\n                case 10:\n                case 12:\n                case 14:\n                    break;\n                }\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                if (typeof message.f !== \"number\")\n                    return \"f: number expected\";\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                if (!$util.isInteger(message.i) && !(message.i && $util.isInteger(message.i.low) && $util.isInteger(message.i.high)))\n                    return \"i: integer|Long expected\";\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                if (!(message.s && typeof message.s.length === \"number\" || $util.isString(message.s)))\n                    return \"s: buffer expected\";\n            if (message.t != null && message.hasOwnProperty(\"t\")) {\n                var error = $root.onnx.TensorProto.verify(message.t);\n                if (error)\n                    return \"t.\" + error;\n            }\n            if (message.g != null && message.hasOwnProperty(\"g\")) {\n                var error = $root.onnx.GraphProto.verify(message.g);\n                if (error)\n                    return \"g.\" + error;\n            }\n            if (message.sparseTensor != null && message.hasOwnProperty(\"sparseTensor\")) {\n                var error = $root.onnx.SparseTensorProto.verify(message.sparseTensor);\n                if (error)\n                    return \"sparseTensor.\" + error;\n            }\n            if (message.tp != null && message.hasOwnProperty(\"tp\")) {\n                var error = $root.onnx.TypeProto.verify(message.tp);\n                if (error)\n                    return \"tp.\" + error;\n            }\n            if (message.floats != null && message.hasOwnProperty(\"floats\")) {\n                if (!Array.isArray(message.floats))\n                    return \"floats: array expected\";\n                for (var i = 0; i < message.floats.length; ++i)\n                    if (typeof message.floats[i] !== \"number\")\n                        return \"floats: number[] expected\";\n            }\n            if (message.ints != null && message.hasOwnProperty(\"ints\")) {\n                if (!Array.isArray(message.ints))\n                    return \"ints: array expected\";\n                for (var i = 0; i < message.ints.length; ++i)\n                    if (!$util.isInteger(message.ints[i]) && !(message.ints[i] && $util.isInteger(message.ints[i].low) && $util.isInteger(message.ints[i].high)))\n                        return \"ints: integer|Long[] expected\";\n            }\n            if (message.strings != null && message.hasOwnProperty(\"strings\")) {\n                if (!Array.isArray(message.strings))\n                    return \"strings: array expected\";\n                for (var i = 0; i < message.strings.length; ++i)\n                    if (!(message.strings[i] && typeof message.strings[i].length === \"number\" || $util.isString(message.strings[i])))\n                        return \"strings: buffer[] expected\";\n            }\n            if (message.tensors != null && message.hasOwnProperty(\"tensors\")) {\n                if (!Array.isArray(message.tensors))\n                    return \"tensors: array expected\";\n                for (var i = 0; i < message.tensors.length; ++i) {\n                    var error = $root.onnx.TensorProto.verify(message.tensors[i]);\n                    if (error)\n                        return \"tensors.\" + error;\n                }\n            }\n            if (message.graphs != null && message.hasOwnProperty(\"graphs\")) {\n                if (!Array.isArray(message.graphs))\n                    return \"graphs: array expected\";\n                for (var i = 0; i < message.graphs.length; ++i) {\n                    var error = $root.onnx.GraphProto.verify(message.graphs[i]);\n                    if (error)\n                        return \"graphs.\" + error;\n                }\n            }\n            if (message.sparseTensors != null && message.hasOwnProperty(\"sparseTensors\")) {\n                if (!Array.isArray(message.sparseTensors))\n                    return \"sparseTensors: array expected\";\n                for (var i = 0; i < message.sparseTensors.length; ++i) {\n                    var error = $root.onnx.SparseTensorProto.verify(message.sparseTensors[i]);\n                    if (error)\n                        return \"sparseTensors.\" + error;\n                }\n            }\n            if (message.typeProtos != null && message.hasOwnProperty(\"typeProtos\")) {\n                if (!Array.isArray(message.typeProtos))\n                    return \"typeProtos: array expected\";\n                for (var i = 0; i < message.typeProtos.length; ++i) {\n                    var error = $root.onnx.TypeProto.verify(message.typeProtos[i]);\n                    if (error)\n                        return \"typeProtos.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates an AttributeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.AttributeProto} AttributeProto\n         */\n        AttributeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.AttributeProto)\n                return object;\n            var message = new $root.onnx.AttributeProto();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.refAttrName != null)\n                message.refAttrName = String(object.refAttrName);\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            switch (object.type) {\n            default:\n                if (typeof object.type === \"number\") {\n                    message.type = object.type;\n                    break;\n                }\n                break;\n            case \"UNDEFINED\":\n            case 0:\n                message.type = 0;\n                break;\n            case \"FLOAT\":\n            case 1:\n                message.type = 1;\n                break;\n            case \"INT\":\n            case 2:\n                message.type = 2;\n                break;\n            case \"STRING\":\n            case 3:\n                message.type = 3;\n                break;\n            case \"TENSOR\":\n            case 4:\n                message.type = 4;\n                break;\n            case \"GRAPH\":\n            case 5:\n                message.type = 5;\n                break;\n            case \"SPARSE_TENSOR\":\n            case 11:\n                message.type = 11;\n                break;\n            case \"TYPE_PROTO\":\n            case 13:\n                message.type = 13;\n                break;\n            case \"FLOATS\":\n            case 6:\n                message.type = 6;\n                break;\n            case \"INTS\":\n            case 7:\n                message.type = 7;\n                break;\n            case \"STRINGS\":\n            case 8:\n                message.type = 8;\n                break;\n            case \"TENSORS\":\n            case 9:\n                message.type = 9;\n                break;\n            case \"GRAPHS\":\n            case 10:\n                message.type = 10;\n                break;\n            case \"SPARSE_TENSORS\":\n            case 12:\n                message.type = 12;\n                break;\n            case \"TYPE_PROTOS\":\n            case 14:\n                message.type = 14;\n                break;\n            }\n            if (object.f != null)\n                message.f = Number(object.f);\n            if (object.i != null)\n                if ($util.Long)\n                    (message.i = $util.Long.fromValue(object.i)).unsigned = false;\n                else if (typeof object.i === \"string\")\n                    message.i = parseInt(object.i, 10);\n                else if (typeof object.i === \"number\")\n                    message.i = object.i;\n                else if (typeof object.i === \"object\")\n                    message.i = new $util.LongBits(object.i.low >>> 0, object.i.high >>> 0).toNumber();\n            if (object.s != null)\n                if (typeof object.s === \"string\")\n                    $util.base64.decode(object.s, message.s = $util.newBuffer($util.base64.length(object.s)), 0);\n                else if (object.s.length >= 0)\n                    message.s = object.s;\n            if (object.t != null) {\n                if (typeof object.t !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.t: object expected\");\n                message.t = $root.onnx.TensorProto.fromObject(object.t);\n            }\n            if (object.g != null) {\n                if (typeof object.g !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.g: object expected\");\n                message.g = $root.onnx.GraphProto.fromObject(object.g);\n            }\n            if (object.sparseTensor != null) {\n                if (typeof object.sparseTensor !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.sparseTensor: object expected\");\n                message.sparseTensor = $root.onnx.SparseTensorProto.fromObject(object.sparseTensor);\n            }\n            if (object.tp != null) {\n                if (typeof object.tp !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.tp: object expected\");\n                message.tp = $root.onnx.TypeProto.fromObject(object.tp);\n            }\n            if (object.floats) {\n                if (!Array.isArray(object.floats))\n                    throw TypeError(\".onnx.AttributeProto.floats: array expected\");\n                message.floats = [];\n                for (var i = 0; i < object.floats.length; ++i)\n                    message.floats[i] = Number(object.floats[i]);\n            }\n            if (object.ints) {\n                if (!Array.isArray(object.ints))\n                    throw TypeError(\".onnx.AttributeProto.ints: array expected\");\n                message.ints = [];\n                for (var i = 0; i < object.ints.length; ++i)\n                    if ($util.Long)\n                        (message.ints[i] = $util.Long.fromValue(object.ints[i])).unsigned = false;\n                    else if (typeof object.ints[i] === \"string\")\n                        message.ints[i] = parseInt(object.ints[i], 10);\n                    else if (typeof object.ints[i] === \"number\")\n                        message.ints[i] = object.ints[i];\n                    else if (typeof object.ints[i] === \"object\")\n                        message.ints[i] = new $util.LongBits(object.ints[i].low >>> 0, object.ints[i].high >>> 0).toNumber();\n            }\n            if (object.strings) {\n                if (!Array.isArray(object.strings))\n                    throw TypeError(\".onnx.AttributeProto.strings: array expected\");\n                message.strings = [];\n                for (var i = 0; i < object.strings.length; ++i)\n                    if (typeof object.strings[i] === \"string\")\n                        $util.base64.decode(object.strings[i], message.strings[i] = $util.newBuffer($util.base64.length(object.strings[i])), 0);\n                    else if (object.strings[i].length >= 0)\n                        message.strings[i] = object.strings[i];\n            }\n            if (object.tensors) {\n                if (!Array.isArray(object.tensors))\n                    throw TypeError(\".onnx.AttributeProto.tensors: array expected\");\n                message.tensors = [];\n                for (var i = 0; i < object.tensors.length; ++i) {\n                    if (typeof object.tensors[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.tensors: object expected\");\n                    message.tensors[i] = $root.onnx.TensorProto.fromObject(object.tensors[i]);\n                }\n            }\n            if (object.graphs) {\n                if (!Array.isArray(object.graphs))\n                    throw TypeError(\".onnx.AttributeProto.graphs: array expected\");\n                message.graphs = [];\n                for (var i = 0; i < object.graphs.length; ++i) {\n                    if (typeof object.graphs[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.graphs: object expected\");\n                    message.graphs[i] = $root.onnx.GraphProto.fromObject(object.graphs[i]);\n                }\n            }\n            if (object.sparseTensors) {\n                if (!Array.isArray(object.sparseTensors))\n                    throw TypeError(\".onnx.AttributeProto.sparseTensors: array expected\");\n                message.sparseTensors = [];\n                for (var i = 0; i < object.sparseTensors.length; ++i) {\n                    if (typeof object.sparseTensors[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.sparseTensors: object expected\");\n                    message.sparseTensors[i] = $root.onnx.SparseTensorProto.fromObject(object.sparseTensors[i]);\n                }\n            }\n            if (object.typeProtos) {\n                if (!Array.isArray(object.typeProtos))\n                    throw TypeError(\".onnx.AttributeProto.typeProtos: array expected\");\n                message.typeProtos = [];\n                for (var i = 0; i < object.typeProtos.length; ++i) {\n                    if (typeof object.typeProtos[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.typeProtos: object expected\");\n                    message.typeProtos[i] = $root.onnx.TypeProto.fromObject(object.typeProtos[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an AttributeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.AttributeProto} message AttributeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        AttributeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.floats = [];\n                object.ints = [];\n                object.strings = [];\n                object.tensors = [];\n                object.graphs = [];\n                object.typeProtos = [];\n                object.sparseTensors = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.f = 0;\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.i = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.i = options.longs === String ? \"0\" : 0;\n                if (options.bytes === String)\n                    object.s = \"\";\n                else {\n                    object.s = [];\n                    if (options.bytes !== Array)\n                        object.s = $util.newBuffer(object.s);\n                }\n                object.t = null;\n                object.g = null;\n                object.docString = \"\";\n                object.tp = null;\n                object.type = options.enums === String ? \"UNDEFINED\" : 0;\n                object.refAttrName = \"\";\n                object.sparseTensor = null;\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                object.f = options.json && !isFinite(message.f) ? String(message.f) : message.f;\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                if (typeof message.i === \"number\")\n                    object.i = options.longs === String ? String(message.i) : message.i;\n                else\n                    object.i = options.longs === String ? $util.Long.prototype.toString.call(message.i) : options.longs === Number ? new $util.LongBits(message.i.low >>> 0, message.i.high >>> 0).toNumber() : message.i;\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                object.s = options.bytes === String ? $util.base64.encode(message.s, 0, message.s.length) : options.bytes === Array ? Array.prototype.slice.call(message.s) : message.s;\n            if (message.t != null && message.hasOwnProperty(\"t\"))\n                object.t = $root.onnx.TensorProto.toObject(message.t, options);\n            if (message.g != null && message.hasOwnProperty(\"g\"))\n                object.g = $root.onnx.GraphProto.toObject(message.g, options);\n            if (message.floats && message.floats.length) {\n                object.floats = [];\n                for (var j = 0; j < message.floats.length; ++j)\n                    object.floats[j] = options.json && !isFinite(message.floats[j]) ? String(message.floats[j]) : message.floats[j];\n            }\n            if (message.ints && message.ints.length) {\n                object.ints = [];\n                for (var j = 0; j < message.ints.length; ++j)\n                    if (typeof message.ints[j] === \"number\")\n                        object.ints[j] = options.longs === String ? String(message.ints[j]) : message.ints[j];\n                    else\n                        object.ints[j] = options.longs === String ? $util.Long.prototype.toString.call(message.ints[j]) : options.longs === Number ? new $util.LongBits(message.ints[j].low >>> 0, message.ints[j].high >>> 0).toNumber() : message.ints[j];\n            }\n            if (message.strings && message.strings.length) {\n                object.strings = [];\n                for (var j = 0; j < message.strings.length; ++j)\n                    object.strings[j] = options.bytes === String ? $util.base64.encode(message.strings[j], 0, message.strings[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.strings[j]) : message.strings[j];\n            }\n            if (message.tensors && message.tensors.length) {\n                object.tensors = [];\n                for (var j = 0; j < message.tensors.length; ++j)\n                    object.tensors[j] = $root.onnx.TensorProto.toObject(message.tensors[j], options);\n            }\n            if (message.graphs && message.graphs.length) {\n                object.graphs = [];\n                for (var j = 0; j < message.graphs.length; ++j)\n                    object.graphs[j] = $root.onnx.GraphProto.toObject(message.graphs[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.tp != null && message.hasOwnProperty(\"tp\"))\n                object.tp = $root.onnx.TypeProto.toObject(message.tp, options);\n            if (message.typeProtos && message.typeProtos.length) {\n                object.typeProtos = [];\n                for (var j = 0; j < message.typeProtos.length; ++j)\n                    object.typeProtos[j] = $root.onnx.TypeProto.toObject(message.typeProtos[j], options);\n            }\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = options.enums === String ? $root.onnx.AttributeProto.AttributeType[message.type] === undefined ? message.type : $root.onnx.AttributeProto.AttributeType[message.type] : message.type;\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                object.refAttrName = message.refAttrName;\n            if (message.sparseTensor != null && message.hasOwnProperty(\"sparseTensor\"))\n                object.sparseTensor = $root.onnx.SparseTensorProto.toObject(message.sparseTensor, options);\n            if (message.sparseTensors && message.sparseTensors.length) {\n                object.sparseTensors = [];\n                for (var j = 0; j < message.sparseTensors.length; ++j)\n                    object.sparseTensors[j] = $root.onnx.SparseTensorProto.toObject(message.sparseTensors[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this AttributeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.AttributeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        AttributeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for AttributeProto\n         * @function getTypeUrl\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        AttributeProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.AttributeProto\";\n        };\n\n        /**\n         * AttributeType enum.\n         * @name onnx.AttributeProto.AttributeType\n         * @enum {number}\n         * @property {number} UNDEFINED=0 UNDEFINED value\n         * @property {number} FLOAT=1 FLOAT value\n         * @property {number} INT=2 INT value\n         * @property {number} STRING=3 STRING value\n         * @property {number} TENSOR=4 TENSOR value\n         * @property {number} GRAPH=5 GRAPH value\n         * @property {number} SPARSE_TENSOR=11 SPARSE_TENSOR value\n         * @property {number} TYPE_PROTO=13 TYPE_PROTO value\n         * @property {number} FLOATS=6 FLOATS value\n         * @property {number} INTS=7 INTS value\n         * @property {number} STRINGS=8 STRINGS value\n         * @property {number} TENSORS=9 TENSORS value\n         * @property {number} GRAPHS=10 GRAPHS value\n         * @property {number} SPARSE_TENSORS=12 SPARSE_TENSORS value\n         * @property {number} TYPE_PROTOS=14 TYPE_PROTOS value\n         */\n        AttributeProto.AttributeType = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"UNDEFINED\"] = 0;\n            values[valuesById[1] = \"FLOAT\"] = 1;\n            values[valuesById[2] = \"INT\"] = 2;\n            values[valuesById[3] = \"STRING\"] = 3;\n            values[valuesById[4] = \"TENSOR\"] = 4;\n            values[valuesById[5] = \"GRAPH\"] = 5;\n            values[valuesById[11] = \"SPARSE_TENSOR\"] = 11;\n            values[valuesById[13] = \"TYPE_PROTO\"] = 13;\n            values[valuesById[6] = \"FLOATS\"] = 6;\n            values[valuesById[7] = \"INTS\"] = 7;\n            values[valuesById[8] = \"STRINGS\"] = 8;\n            values[valuesById[9] = \"TENSORS\"] = 9;\n            values[valuesById[10] = \"GRAPHS\"] = 10;\n            values[valuesById[12] = \"SPARSE_TENSORS\"] = 12;\n            values[valuesById[14] = \"TYPE_PROTOS\"] = 14;\n            return values;\n        })();\n\n        return AttributeProto;\n    })();\n\n    onnx.ValueInfoProto = (function() {\n\n        /**\n         * Properties of a ValueInfoProto.\n         * @memberof onnx\n         * @interface IValueInfoProto\n         * @property {string|null} [name] ValueInfoProto name\n         * @property {onnx.ITypeProto|null} [type] ValueInfoProto type\n         * @property {string|null} [docString] ValueInfoProto docString\n         */\n\n        /**\n         * Constructs a new ValueInfoProto.\n         * @memberof onnx\n         * @classdesc Represents a ValueInfoProto.\n         * @implements IValueInfoProto\n         * @constructor\n         * @param {onnx.IValueInfoProto=} [properties] Properties to set\n         */\n        function ValueInfoProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ValueInfoProto name.\n         * @member {string} name\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.name = \"\";\n\n        /**\n         * ValueInfoProto type.\n         * @member {onnx.ITypeProto|null|undefined} type\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.type = null;\n\n        /**\n         * ValueInfoProto docString.\n         * @member {string} docString\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.docString = \"\";\n\n        /**\n         * Creates a new ValueInfoProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto=} [properties] Properties to set\n         * @returns {onnx.ValueInfoProto} ValueInfoProto instance\n         */\n        ValueInfoProto.create = function create(properties) {\n            return new ValueInfoProto(properties);\n        };\n\n        /**\n         * Encodes the specified ValueInfoProto message. Does not implicitly {@link onnx.ValueInfoProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto} message ValueInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ValueInfoProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.type != null && Object.hasOwnProperty.call(message, \"type\"))\n                $root.onnx.TypeProto.encode(message.type, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.docString != null && Object.hasOwnProperty.call(message, \"docString\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.docString);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ValueInfoProto message, length delimited. Does not implicitly {@link onnx.ValueInfoProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto} message ValueInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ValueInfoProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ValueInfoProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ValueInfoProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.ValueInfoProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.name = reader.string();\n                        break;\n                    }\n                case 2: {\n                        message.type = $root.onnx.TypeProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 3: {\n                        message.docString = reader.string();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ValueInfoProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ValueInfoProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ValueInfoProto message.\n         * @function verify\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ValueInfoProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.type != null && message.hasOwnProperty(\"type\")) {\n                var error = $root.onnx.TypeProto.verify(message.type);\n                if (error)\n                    return \"type.\" + error;\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ValueInfoProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         */\n        ValueInfoProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.ValueInfoProto)\n                return object;\n            var message = new $root.onnx.ValueInfoProto();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.type != null) {\n                if (typeof object.type !== \"object\")\n                    throw TypeError(\".onnx.ValueInfoProto.type: object expected\");\n                message.type = $root.onnx.TypeProto.fromObject(object.type);\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ValueInfoProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.ValueInfoProto} message ValueInfoProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ValueInfoProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.name = \"\";\n                object.type = null;\n                object.docString = \"\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = $root.onnx.TypeProto.toObject(message.type, options);\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            return object;\n        };\n\n        /**\n         * Converts this ValueInfoProto to JSON.\n         * @function toJSON\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ValueInfoProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for ValueInfoProto\n         * @function getTypeUrl\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        ValueInfoProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.ValueInfoProto\";\n        };\n\n        return ValueInfoProto;\n    })();\n\n    onnx.NodeProto = (function() {\n\n        /**\n         * Properties of a NodeProto.\n         * @memberof onnx\n         * @interface INodeProto\n         * @property {Array.<string>|null} [input] NodeProto input\n         * @property {Array.<string>|null} [output] NodeProto output\n         * @property {string|null} [name] NodeProto name\n         * @property {string|null} [opType] NodeProto opType\n         * @property {string|null} [domain] NodeProto domain\n         * @property {Array.<onnx.IAttributeProto>|null} [attribute] NodeProto attribute\n         * @property {string|null} [docString] NodeProto docString\n         */\n\n        /**\n         * Constructs a new NodeProto.\n         * @memberof onnx\n         * @classdesc Represents a NodeProto.\n         * @implements INodeProto\n         * @constructor\n         * @param {onnx.INodeProto=} [properties] Properties to set\n         */\n        function NodeProto(properties) {\n            this.input = [];\n            this.output = [];\n            this.attribute = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * NodeProto input.\n         * @member {Array.<string>} input\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.input = $util.emptyArray;\n\n        /**\n         * NodeProto output.\n         * @member {Array.<string>} output\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.output = $util.emptyArray;\n\n        /**\n         * NodeProto name.\n         * @member {string} name\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.name = \"\";\n\n        /**\n         * NodeProto opType.\n         * @member {string} opType\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.opType = \"\";\n\n        /**\n         * NodeProto domain.\n         * @member {string} domain\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.domain = \"\";\n\n        /**\n         * NodeProto attribute.\n         * @member {Array.<onnx.IAttributeProto>} attribute\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.attribute = $util.emptyArray;\n\n        /**\n         * NodeProto docString.\n         * @member {string} docString\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.docString = \"\";\n\n        /**\n         * Creates a new NodeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto=} [properties] Properties to set\n         * @returns {onnx.NodeProto} NodeProto instance\n         */\n        NodeProto.create = function create(properties) {\n            return new NodeProto(properties);\n        };\n\n        /**\n         * Encodes the specified NodeProto message. Does not implicitly {@link onnx.NodeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto} message NodeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        NodeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.input != null && message.input.length)\n                for (var i = 0; i < message.input.length; ++i)\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.input[i]);\n            if (message.output != null && message.output.length)\n                for (var i = 0; i < message.output.length; ++i)\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.output[i]);\n            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);\n            if (message.opType != null && Object.hasOwnProperty.call(message, \"opType\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.opType);\n            if (message.attribute != null && message.attribute.length)\n                for (var i = 0; i < message.attribute.length; ++i)\n                    $root.onnx.AttributeProto.encode(message.attribute[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.docString != null && Object.hasOwnProperty.call(message, \"docString\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.docString);\n            if (message.domain != null && Object.hasOwnProperty.call(message, \"domain\"))\n                writer.uint32(/* id 7, wireType 2 =*/58).string(message.domain);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified NodeProto message, length delimited. Does not implicitly {@link onnx.NodeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto} message NodeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        NodeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a NodeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.NodeProto} NodeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        NodeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.NodeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        if (!(message.input && message.input.length))\n                            message.input = [];\n                        message.input.push(reader.string());\n                        break;\n                    }\n                case 2: {\n                        if (!(message.output && message.output.length))\n                            message.output = [];\n                        message.output.push(reader.string());\n                        break;\n                    }\n                case 3: {\n                        message.name = reader.string();\n                        break;\n                    }\n                case 4: {\n                        message.opType = reader.string();\n                        break;\n                    }\n                case 7: {\n                        message.domain = reader.string();\n                        break;\n                    }\n                case 5: {\n                        if (!(message.attribute && message.attribute.length))\n                            message.attribute = [];\n                        message.attribute.push($root.onnx.AttributeProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 6: {\n                        message.docString = reader.string();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a NodeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.NodeProto} NodeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        NodeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a NodeProto message.\n         * @function verify\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        NodeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.input != null && message.hasOwnProperty(\"input\")) {\n                if (!Array.isArray(message.input))\n                    return \"input: array expected\";\n                for (var i = 0; i < message.input.length; ++i)\n                    if (!$util.isString(message.input[i]))\n                        return \"input: string[] expected\";\n            }\n            if (message.output != null && message.hasOwnProperty(\"output\")) {\n                if (!Array.isArray(message.output))\n                    return \"output: array expected\";\n                for (var i = 0; i < message.output.length; ++i)\n                    if (!$util.isString(message.output[i]))\n                        return \"output: string[] expected\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                if (!$util.isString(message.opType))\n                    return \"opType: string expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.attribute != null && message.hasOwnProperty(\"attribute\")) {\n                if (!Array.isArray(message.attribute))\n                    return \"attribute: array expected\";\n                for (var i = 0; i < message.attribute.length; ++i) {\n                    var error = $root.onnx.AttributeProto.verify(message.attribute[i]);\n                    if (error)\n                        return \"attribute.\" + error;\n                }\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a NodeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.NodeProto} NodeProto\n         */\n        NodeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.NodeProto)\n                return object;\n            var message = new $root.onnx.NodeProto();\n            if (object.input) {\n                if (!Array.isArray(object.input))\n                    throw TypeError(\".onnx.NodeProto.input: array expected\");\n                message.input = [];\n                for (var i = 0; i < object.input.length; ++i)\n                    message.input[i] = String(object.input[i]);\n            }\n            if (object.output) {\n                if (!Array.isArray(object.output))\n                    throw TypeError(\".onnx.NodeProto.output: array expected\");\n                message.output = [];\n                for (var i = 0; i < object.output.length; ++i)\n                    message.output[i] = String(object.output[i]);\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.opType != null)\n                message.opType = String(object.opType);\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.attribute) {\n                if (!Array.isArray(object.attribute))\n                    throw TypeError(\".onnx.NodeProto.attribute: array expected\");\n                message.attribute = [];\n                for (var i = 0; i < object.attribute.length; ++i) {\n                    if (typeof object.attribute[i] !== \"object\")\n                        throw TypeError(\".onnx.NodeProto.attribute: object expected\");\n                    message.attribute[i] = $root.onnx.AttributeProto.fromObject(object.attribute[i]);\n                }\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a NodeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.NodeProto} message NodeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        NodeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.input = [];\n                object.output = [];\n                object.attribute = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.opType = \"\";\n                object.docString = \"\";\n                object.domain = \"\";\n            }\n            if (message.input && message.input.length) {\n                object.input = [];\n                for (var j = 0; j < message.input.length; ++j)\n                    object.input[j] = message.input[j];\n            }\n            if (message.output && message.output.length) {\n                object.output = [];\n                for (var j = 0; j < message.output.length; ++j)\n                    object.output[j] = message.output[j];\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                object.opType = message.opType;\n            if (message.attribute && message.attribute.length) {\n                object.attribute = [];\n                for (var j = 0; j < message.attribute.length; ++j)\n                    object.attribute[j] = $root.onnx.AttributeProto.toObject(message.attribute[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            return object;\n        };\n\n        /**\n         * Converts this NodeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.NodeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        NodeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for NodeProto\n         * @function getTypeUrl\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        NodeProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.NodeProto\";\n        };\n\n        return NodeProto;\n    })();\n\n    onnx.TrainingInfoProto = (function() {\n\n        /**\n         * Properties of a TrainingInfoProto.\n         * @memberof onnx\n         * @interface ITrainingInfoProto\n         * @property {onnx.IGraphProto|null} [initialization] TrainingInfoProto initialization\n         * @property {onnx.IGraphProto|null} [algorithm] TrainingInfoProto algorithm\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [initializationBinding] TrainingInfoProto initializationBinding\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [updateBinding] TrainingInfoProto updateBinding\n         */\n\n        /**\n         * Constructs a new TrainingInfoProto.\n         * @memberof onnx\n         * @classdesc Represents a TrainingInfoProto.\n         * @implements ITrainingInfoProto\n         * @constructor\n         * @param {onnx.ITrainingInfoProto=} [properties] Properties to set\n         */\n        function TrainingInfoProto(properties) {\n            this.initializationBinding = [];\n            this.updateBinding = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TrainingInfoProto initialization.\n         * @member {onnx.IGraphProto|null|undefined} initialization\n         * @memberof onnx.TrainingInfoProto\n         * @instance\n         */\n        TrainingInfoProto.prototype.initialization = null;\n\n        /**\n         * TrainingInfoProto algorithm.\n         * @member {onnx.IGraphProto|null|undefined} algorithm\n         * @memberof onnx.TrainingInfoProto\n         * @instance\n         */\n        TrainingInfoProto.prototype.algorithm = null;\n\n        /**\n         * TrainingInfoProto initializationBinding.\n         * @member {Array.<onnx.IStringStringEntryProto>} initializationBinding\n         * @memberof onnx.TrainingInfoProto\n         * @instance\n         */\n        TrainingInfoProto.prototype.initializationBinding = $util.emptyArray;\n\n        /**\n         * TrainingInfoProto updateBinding.\n         * @member {Array.<onnx.IStringStringEntryProto>} updateBinding\n         * @memberof onnx.TrainingInfoProto\n         * @instance\n         */\n        TrainingInfoProto.prototype.updateBinding = $util.emptyArray;\n\n        /**\n         * Creates a new TrainingInfoProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TrainingInfoProto\n         * @static\n         * @param {onnx.ITrainingInfoProto=} [properties] Properties to set\n         * @returns {onnx.TrainingInfoProto} TrainingInfoProto instance\n         */\n        TrainingInfoProto.create = function create(properties) {\n            return new TrainingInfoProto(properties);\n        };\n\n        /**\n         * Encodes the specified TrainingInfoProto message. Does not implicitly {@link onnx.TrainingInfoProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TrainingInfoProto\n         * @static\n         * @param {onnx.ITrainingInfoProto} message TrainingInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TrainingInfoProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.initialization != null && Object.hasOwnProperty.call(message, \"initialization\"))\n                $root.onnx.GraphProto.encode(message.initialization, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.algorithm != null && Object.hasOwnProperty.call(message, \"algorithm\"))\n                $root.onnx.GraphProto.encode(message.algorithm, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.initializationBinding != null && message.initializationBinding.length)\n                for (var i = 0; i < message.initializationBinding.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.initializationBinding[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            if (message.updateBinding != null && message.updateBinding.length)\n                for (var i = 0; i < message.updateBinding.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.updateBinding[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TrainingInfoProto message, length delimited. Does not implicitly {@link onnx.TrainingInfoProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TrainingInfoProto\n         * @static\n         * @param {onnx.ITrainingInfoProto} message TrainingInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TrainingInfoProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TrainingInfoProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TrainingInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TrainingInfoProto} TrainingInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TrainingInfoProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TrainingInfoProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.initialization = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 2: {\n                        message.algorithm = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 3: {\n                        if (!(message.initializationBinding && message.initializationBinding.length))\n                            message.initializationBinding = [];\n                        message.initializationBinding.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 4: {\n                        if (!(message.updateBinding && message.updateBinding.length))\n                            message.updateBinding = [];\n                        message.updateBinding.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TrainingInfoProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TrainingInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TrainingInfoProto} TrainingInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TrainingInfoProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TrainingInfoProto message.\n         * @function verify\n         * @memberof onnx.TrainingInfoProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TrainingInfoProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.initialization != null && message.hasOwnProperty(\"initialization\")) {\n                var error = $root.onnx.GraphProto.verify(message.initialization);\n                if (error)\n                    return \"initialization.\" + error;\n            }\n            if (message.algorithm != null && message.hasOwnProperty(\"algorithm\")) {\n                var error = $root.onnx.GraphProto.verify(message.algorithm);\n                if (error)\n                    return \"algorithm.\" + error;\n            }\n            if (message.initializationBinding != null && message.hasOwnProperty(\"initializationBinding\")) {\n                if (!Array.isArray(message.initializationBinding))\n                    return \"initializationBinding: array expected\";\n                for (var i = 0; i < message.initializationBinding.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.initializationBinding[i]);\n                    if (error)\n                        return \"initializationBinding.\" + error;\n                }\n            }\n            if (message.updateBinding != null && message.hasOwnProperty(\"updateBinding\")) {\n                if (!Array.isArray(message.updateBinding))\n                    return \"updateBinding: array expected\";\n                for (var i = 0; i < message.updateBinding.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.updateBinding[i]);\n                    if (error)\n                        return \"updateBinding.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TrainingInfoProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TrainingInfoProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TrainingInfoProto} TrainingInfoProto\n         */\n        TrainingInfoProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TrainingInfoProto)\n                return object;\n            var message = new $root.onnx.TrainingInfoProto();\n            if (object.initialization != null) {\n                if (typeof object.initialization !== \"object\")\n                    throw TypeError(\".onnx.TrainingInfoProto.initialization: object expected\");\n                message.initialization = $root.onnx.GraphProto.fromObject(object.initialization);\n            }\n            if (object.algorithm != null) {\n                if (typeof object.algorithm !== \"object\")\n                    throw TypeError(\".onnx.TrainingInfoProto.algorithm: object expected\");\n                message.algorithm = $root.onnx.GraphProto.fromObject(object.algorithm);\n            }\n            if (object.initializationBinding) {\n                if (!Array.isArray(object.initializationBinding))\n                    throw TypeError(\".onnx.TrainingInfoProto.initializationBinding: array expected\");\n                message.initializationBinding = [];\n                for (var i = 0; i < object.initializationBinding.length; ++i) {\n                    if (typeof object.initializationBinding[i] !== \"object\")\n                        throw TypeError(\".onnx.TrainingInfoProto.initializationBinding: object expected\");\n                    message.initializationBinding[i] = $root.onnx.StringStringEntryProto.fromObject(object.initializationBinding[i]);\n                }\n            }\n            if (object.updateBinding) {\n                if (!Array.isArray(object.updateBinding))\n                    throw TypeError(\".onnx.TrainingInfoProto.updateBinding: array expected\");\n                message.updateBinding = [];\n                for (var i = 0; i < object.updateBinding.length; ++i) {\n                    if (typeof object.updateBinding[i] !== \"object\")\n                        throw TypeError(\".onnx.TrainingInfoProto.updateBinding: object expected\");\n                    message.updateBinding[i] = $root.onnx.StringStringEntryProto.fromObject(object.updateBinding[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TrainingInfoProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TrainingInfoProto\n         * @static\n         * @param {onnx.TrainingInfoProto} message TrainingInfoProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TrainingInfoProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.initializationBinding = [];\n                object.updateBinding = [];\n            }\n            if (options.defaults) {\n                object.initialization = null;\n                object.algorithm = null;\n            }\n            if (message.initialization != null && message.hasOwnProperty(\"initialization\"))\n                object.initialization = $root.onnx.GraphProto.toObject(message.initialization, options);\n            if (message.algorithm != null && message.hasOwnProperty(\"algorithm\"))\n                object.algorithm = $root.onnx.GraphProto.toObject(message.algorithm, options);\n            if (message.initializationBinding && message.initializationBinding.length) {\n                object.initializationBinding = [];\n                for (var j = 0; j < message.initializationBinding.length; ++j)\n                    object.initializationBinding[j] = $root.onnx.StringStringEntryProto.toObject(message.initializationBinding[j], options);\n            }\n            if (message.updateBinding && message.updateBinding.length) {\n                object.updateBinding = [];\n                for (var j = 0; j < message.updateBinding.length; ++j)\n                    object.updateBinding[j] = $root.onnx.StringStringEntryProto.toObject(message.updateBinding[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TrainingInfoProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TrainingInfoProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TrainingInfoProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for TrainingInfoProto\n         * @function getTypeUrl\n         * @memberof onnx.TrainingInfoProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        TrainingInfoProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.TrainingInfoProto\";\n        };\n\n        return TrainingInfoProto;\n    })();\n\n    onnx.ModelProto = (function() {\n\n        /**\n         * Properties of a ModelProto.\n         * @memberof onnx\n         * @interface IModelProto\n         * @property {number|Long|null} [irVersion] ModelProto irVersion\n         * @property {Array.<onnx.IOperatorSetIdProto>|null} [opsetImport] ModelProto opsetImport\n         * @property {string|null} [producerName] ModelProto producerName\n         * @property {string|null} [producerVersion] ModelProto producerVersion\n         * @property {string|null} [domain] ModelProto domain\n         * @property {number|Long|null} [modelVersion] ModelProto modelVersion\n         * @property {string|null} [docString] ModelProto docString\n         * @property {onnx.IGraphProto|null} [graph] ModelProto graph\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [metadataProps] ModelProto metadataProps\n         * @property {Array.<onnx.ITrainingInfoProto>|null} [trainingInfo] ModelProto trainingInfo\n         * @property {Array.<onnx.IFunctionProto>|null} [functions] ModelProto functions\n         */\n\n        /**\n         * Constructs a new ModelProto.\n         * @memberof onnx\n         * @classdesc Represents a ModelProto.\n         * @implements IModelProto\n         * @constructor\n         * @param {onnx.IModelProto=} [properties] Properties to set\n         */\n        function ModelProto(properties) {\n            this.opsetImport = [];\n            this.metadataProps = [];\n            this.trainingInfo = [];\n            this.functions = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ModelProto irVersion.\n         * @member {number|Long} irVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.irVersion = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * ModelProto opsetImport.\n         * @member {Array.<onnx.IOperatorSetIdProto>} opsetImport\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.opsetImport = $util.emptyArray;\n\n        /**\n         * ModelProto producerName.\n         * @member {string} producerName\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.producerName = \"\";\n\n        /**\n         * ModelProto producerVersion.\n         * @member {string} producerVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.producerVersion = \"\";\n\n        /**\n         * ModelProto domain.\n         * @member {string} domain\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.domain = \"\";\n\n        /**\n         * ModelProto modelVersion.\n         * @member {number|Long} modelVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.modelVersion = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * ModelProto docString.\n         * @member {string} docString\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.docString = \"\";\n\n        /**\n         * ModelProto graph.\n         * @member {onnx.IGraphProto|null|undefined} graph\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.graph = null;\n\n        /**\n         * ModelProto metadataProps.\n         * @member {Array.<onnx.IStringStringEntryProto>} metadataProps\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.metadataProps = $util.emptyArray;\n\n        /**\n         * ModelProto trainingInfo.\n         * @member {Array.<onnx.ITrainingInfoProto>} trainingInfo\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.trainingInfo = $util.emptyArray;\n\n        /**\n         * ModelProto functions.\n         * @member {Array.<onnx.IFunctionProto>} functions\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.functions = $util.emptyArray;\n\n        /**\n         * Creates a new ModelProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto=} [properties] Properties to set\n         * @returns {onnx.ModelProto} ModelProto instance\n         */\n        ModelProto.create = function create(properties) {\n            return new ModelProto(properties);\n        };\n\n        /**\n         * Encodes the specified ModelProto message. Does not implicitly {@link onnx.ModelProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto} message ModelProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ModelProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.irVersion != null && Object.hasOwnProperty.call(message, \"irVersion\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.irVersion);\n            if (message.producerName != null && Object.hasOwnProperty.call(message, \"producerName\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.producerName);\n            if (message.producerVersion != null && Object.hasOwnProperty.call(message, \"producerVersion\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.producerVersion);\n            if (message.domain != null && Object.hasOwnProperty.call(message, \"domain\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.domain);\n            if (message.modelVersion != null && Object.hasOwnProperty.call(message, \"modelVersion\"))\n                writer.uint32(/* id 5, wireType 0 =*/40).int64(message.modelVersion);\n            if (message.docString != null && Object.hasOwnProperty.call(message, \"docString\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.docString);\n            if (message.graph != null && Object.hasOwnProperty.call(message, \"graph\"))\n                $root.onnx.GraphProto.encode(message.graph, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n            if (message.opsetImport != null && message.opsetImport.length)\n                for (var i = 0; i < message.opsetImport.length; ++i)\n                    $root.onnx.OperatorSetIdProto.encode(message.opsetImport[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\n            if (message.metadataProps != null && message.metadataProps.length)\n                for (var i = 0; i < message.metadataProps.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.metadataProps[i], writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n            if (message.trainingInfo != null && message.trainingInfo.length)\n                for (var i = 0; i < message.trainingInfo.length; ++i)\n                    $root.onnx.TrainingInfoProto.encode(message.trainingInfo[i], writer.uint32(/* id 20, wireType 2 =*/162).fork()).ldelim();\n            if (message.functions != null && message.functions.length)\n                for (var i = 0; i < message.functions.length; ++i)\n                    $root.onnx.FunctionProto.encode(message.functions[i], writer.uint32(/* id 25, wireType 2 =*/202).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ModelProto message, length delimited. Does not implicitly {@link onnx.ModelProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto} message ModelProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ModelProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ModelProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.ModelProto} ModelProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ModelProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.ModelProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.irVersion = reader.int64();\n                        break;\n                    }\n                case 8: {\n                        if (!(message.opsetImport && message.opsetImport.length))\n                            message.opsetImport = [];\n                        message.opsetImport.push($root.onnx.OperatorSetIdProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 2: {\n                        message.producerName = reader.string();\n                        break;\n                    }\n                case 3: {\n                        message.producerVersion = reader.string();\n                        break;\n                    }\n                case 4: {\n                        message.domain = reader.string();\n                        break;\n                    }\n                case 5: {\n                        message.modelVersion = reader.int64();\n                        break;\n                    }\n                case 6: {\n                        message.docString = reader.string();\n                        break;\n                    }\n                case 7: {\n                        message.graph = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 14: {\n                        if (!(message.metadataProps && message.metadataProps.length))\n                            message.metadataProps = [];\n                        message.metadataProps.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 20: {\n                        if (!(message.trainingInfo && message.trainingInfo.length))\n                            message.trainingInfo = [];\n                        message.trainingInfo.push($root.onnx.TrainingInfoProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 25: {\n                        if (!(message.functions && message.functions.length))\n                            message.functions = [];\n                        message.functions.push($root.onnx.FunctionProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ModelProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.ModelProto} ModelProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ModelProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ModelProto message.\n         * @function verify\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ModelProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                if (!$util.isInteger(message.irVersion) && !(message.irVersion && $util.isInteger(message.irVersion.low) && $util.isInteger(message.irVersion.high)))\n                    return \"irVersion: integer|Long expected\";\n            if (message.opsetImport != null && message.hasOwnProperty(\"opsetImport\")) {\n                if (!Array.isArray(message.opsetImport))\n                    return \"opsetImport: array expected\";\n                for (var i = 0; i < message.opsetImport.length; ++i) {\n                    var error = $root.onnx.OperatorSetIdProto.verify(message.opsetImport[i]);\n                    if (error)\n                        return \"opsetImport.\" + error;\n                }\n            }\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                if (!$util.isString(message.producerName))\n                    return \"producerName: string expected\";\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                if (!$util.isString(message.producerVersion))\n                    return \"producerVersion: string expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                if (!$util.isInteger(message.modelVersion) && !(message.modelVersion && $util.isInteger(message.modelVersion.low) && $util.isInteger(message.modelVersion.high)))\n                    return \"modelVersion: integer|Long expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.graph != null && message.hasOwnProperty(\"graph\")) {\n                var error = $root.onnx.GraphProto.verify(message.graph);\n                if (error)\n                    return \"graph.\" + error;\n            }\n            if (message.metadataProps != null && message.hasOwnProperty(\"metadataProps\")) {\n                if (!Array.isArray(message.metadataProps))\n                    return \"metadataProps: array expected\";\n                for (var i = 0; i < message.metadataProps.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.metadataProps[i]);\n                    if (error)\n                        return \"metadataProps.\" + error;\n                }\n            }\n            if (message.trainingInfo != null && message.hasOwnProperty(\"trainingInfo\")) {\n                if (!Array.isArray(message.trainingInfo))\n                    return \"trainingInfo: array expected\";\n                for (var i = 0; i < message.trainingInfo.length; ++i) {\n                    var error = $root.onnx.TrainingInfoProto.verify(message.trainingInfo[i]);\n                    if (error)\n                        return \"trainingInfo.\" + error;\n                }\n            }\n            if (message.functions != null && message.hasOwnProperty(\"functions\")) {\n                if (!Array.isArray(message.functions))\n                    return \"functions: array expected\";\n                for (var i = 0; i < message.functions.length; ++i) {\n                    var error = $root.onnx.FunctionProto.verify(message.functions[i]);\n                    if (error)\n                        return \"functions.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a ModelProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.ModelProto} ModelProto\n         */\n        ModelProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.ModelProto)\n                return object;\n            var message = new $root.onnx.ModelProto();\n            if (object.irVersion != null)\n                if ($util.Long)\n                    (message.irVersion = $util.Long.fromValue(object.irVersion)).unsigned = false;\n                else if (typeof object.irVersion === \"string\")\n                    message.irVersion = parseInt(object.irVersion, 10);\n                else if (typeof object.irVersion === \"number\")\n                    message.irVersion = object.irVersion;\n                else if (typeof object.irVersion === \"object\")\n                    message.irVersion = new $util.LongBits(object.irVersion.low >>> 0, object.irVersion.high >>> 0).toNumber();\n            if (object.opsetImport) {\n                if (!Array.isArray(object.opsetImport))\n                    throw TypeError(\".onnx.ModelProto.opsetImport: array expected\");\n                message.opsetImport = [];\n                for (var i = 0; i < object.opsetImport.length; ++i) {\n                    if (typeof object.opsetImport[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.opsetImport: object expected\");\n                    message.opsetImport[i] = $root.onnx.OperatorSetIdProto.fromObject(object.opsetImport[i]);\n                }\n            }\n            if (object.producerName != null)\n                message.producerName = String(object.producerName);\n            if (object.producerVersion != null)\n                message.producerVersion = String(object.producerVersion);\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.modelVersion != null)\n                if ($util.Long)\n                    (message.modelVersion = $util.Long.fromValue(object.modelVersion)).unsigned = false;\n                else if (typeof object.modelVersion === \"string\")\n                    message.modelVersion = parseInt(object.modelVersion, 10);\n                else if (typeof object.modelVersion === \"number\")\n                    message.modelVersion = object.modelVersion;\n                else if (typeof object.modelVersion === \"object\")\n                    message.modelVersion = new $util.LongBits(object.modelVersion.low >>> 0, object.modelVersion.high >>> 0).toNumber();\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.graph != null) {\n                if (typeof object.graph !== \"object\")\n                    throw TypeError(\".onnx.ModelProto.graph: object expected\");\n                message.graph = $root.onnx.GraphProto.fromObject(object.graph);\n            }\n            if (object.metadataProps) {\n                if (!Array.isArray(object.metadataProps))\n                    throw TypeError(\".onnx.ModelProto.metadataProps: array expected\");\n                message.metadataProps = [];\n                for (var i = 0; i < object.metadataProps.length; ++i) {\n                    if (typeof object.metadataProps[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.metadataProps: object expected\");\n                    message.metadataProps[i] = $root.onnx.StringStringEntryProto.fromObject(object.metadataProps[i]);\n                }\n            }\n            if (object.trainingInfo) {\n                if (!Array.isArray(object.trainingInfo))\n                    throw TypeError(\".onnx.ModelProto.trainingInfo: array expected\");\n                message.trainingInfo = [];\n                for (var i = 0; i < object.trainingInfo.length; ++i) {\n                    if (typeof object.trainingInfo[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.trainingInfo: object expected\");\n                    message.trainingInfo[i] = $root.onnx.TrainingInfoProto.fromObject(object.trainingInfo[i]);\n                }\n            }\n            if (object.functions) {\n                if (!Array.isArray(object.functions))\n                    throw TypeError(\".onnx.ModelProto.functions: array expected\");\n                message.functions = [];\n                for (var i = 0; i < object.functions.length; ++i) {\n                    if (typeof object.functions[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.functions: object expected\");\n                    message.functions[i] = $root.onnx.FunctionProto.fromObject(object.functions[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ModelProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.ModelProto} message ModelProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ModelProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.opsetImport = [];\n                object.metadataProps = [];\n                object.trainingInfo = [];\n                object.functions = [];\n            }\n            if (options.defaults) {\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.irVersion = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.irVersion = options.longs === String ? \"0\" : 0;\n                object.producerName = \"\";\n                object.producerVersion = \"\";\n                object.domain = \"\";\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.modelVersion = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.modelVersion = options.longs === String ? \"0\" : 0;\n                object.docString = \"\";\n                object.graph = null;\n            }\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                if (typeof message.irVersion === \"number\")\n                    object.irVersion = options.longs === String ? String(message.irVersion) : message.irVersion;\n                else\n                    object.irVersion = options.longs === String ? $util.Long.prototype.toString.call(message.irVersion) : options.longs === Number ? new $util.LongBits(message.irVersion.low >>> 0, message.irVersion.high >>> 0).toNumber() : message.irVersion;\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                object.producerName = message.producerName;\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                object.producerVersion = message.producerVersion;\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                if (typeof message.modelVersion === \"number\")\n                    object.modelVersion = options.longs === String ? String(message.modelVersion) : message.modelVersion;\n                else\n                    object.modelVersion = options.longs === String ? $util.Long.prototype.toString.call(message.modelVersion) : options.longs === Number ? new $util.LongBits(message.modelVersion.low >>> 0, message.modelVersion.high >>> 0).toNumber() : message.modelVersion;\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.graph != null && message.hasOwnProperty(\"graph\"))\n                object.graph = $root.onnx.GraphProto.toObject(message.graph, options);\n            if (message.opsetImport && message.opsetImport.length) {\n                object.opsetImport = [];\n                for (var j = 0; j < message.opsetImport.length; ++j)\n                    object.opsetImport[j] = $root.onnx.OperatorSetIdProto.toObject(message.opsetImport[j], options);\n            }\n            if (message.metadataProps && message.metadataProps.length) {\n                object.metadataProps = [];\n                for (var j = 0; j < message.metadataProps.length; ++j)\n                    object.metadataProps[j] = $root.onnx.StringStringEntryProto.toObject(message.metadataProps[j], options);\n            }\n            if (message.trainingInfo && message.trainingInfo.length) {\n                object.trainingInfo = [];\n                for (var j = 0; j < message.trainingInfo.length; ++j)\n                    object.trainingInfo[j] = $root.onnx.TrainingInfoProto.toObject(message.trainingInfo[j], options);\n            }\n            if (message.functions && message.functions.length) {\n                object.functions = [];\n                for (var j = 0; j < message.functions.length; ++j)\n                    object.functions[j] = $root.onnx.FunctionProto.toObject(message.functions[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this ModelProto to JSON.\n         * @function toJSON\n         * @memberof onnx.ModelProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ModelProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for ModelProto\n         * @function getTypeUrl\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        ModelProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.ModelProto\";\n        };\n\n        return ModelProto;\n    })();\n\n    onnx.StringStringEntryProto = (function() {\n\n        /**\n         * Properties of a StringStringEntryProto.\n         * @memberof onnx\n         * @interface IStringStringEntryProto\n         * @property {string|null} [key] StringStringEntryProto key\n         * @property {string|null} [value] StringStringEntryProto value\n         */\n\n        /**\n         * Constructs a new StringStringEntryProto.\n         * @memberof onnx\n         * @classdesc Represents a StringStringEntryProto.\n         * @implements IStringStringEntryProto\n         * @constructor\n         * @param {onnx.IStringStringEntryProto=} [properties] Properties to set\n         */\n        function StringStringEntryProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * StringStringEntryProto key.\n         * @member {string} key\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         */\n        StringStringEntryProto.prototype.key = \"\";\n\n        /**\n         * StringStringEntryProto value.\n         * @member {string} value\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         */\n        StringStringEntryProto.prototype.value = \"\";\n\n        /**\n         * Creates a new StringStringEntryProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto=} [properties] Properties to set\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto instance\n         */\n        StringStringEntryProto.create = function create(properties) {\n            return new StringStringEntryProto(properties);\n        };\n\n        /**\n         * Encodes the specified StringStringEntryProto message. Does not implicitly {@link onnx.StringStringEntryProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto} message StringStringEntryProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        StringStringEntryProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.key != null && Object.hasOwnProperty.call(message, \"key\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.key);\n            if (message.value != null && Object.hasOwnProperty.call(message, \"value\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.value);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified StringStringEntryProto message, length delimited. Does not implicitly {@link onnx.StringStringEntryProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto} message StringStringEntryProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        StringStringEntryProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a StringStringEntryProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        StringStringEntryProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.StringStringEntryProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.key = reader.string();\n                        break;\n                    }\n                case 2: {\n                        message.value = reader.string();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a StringStringEntryProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        StringStringEntryProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a StringStringEntryProto message.\n         * @function verify\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        StringStringEntryProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                if (!$util.isString(message.key))\n                    return \"key: string expected\";\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                if (!$util.isString(message.value))\n                    return \"value: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a StringStringEntryProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         */\n        StringStringEntryProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.StringStringEntryProto)\n                return object;\n            var message = new $root.onnx.StringStringEntryProto();\n            if (object.key != null)\n                message.key = String(object.key);\n            if (object.value != null)\n                message.value = String(object.value);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a StringStringEntryProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.StringStringEntryProto} message StringStringEntryProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        StringStringEntryProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.key = \"\";\n                object.value = \"\";\n            }\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                object.key = message.key;\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                object.value = message.value;\n            return object;\n        };\n\n        /**\n         * Converts this StringStringEntryProto to JSON.\n         * @function toJSON\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        StringStringEntryProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for StringStringEntryProto\n         * @function getTypeUrl\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        StringStringEntryProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.StringStringEntryProto\";\n        };\n\n        return StringStringEntryProto;\n    })();\n\n    onnx.TensorAnnotation = (function() {\n\n        /**\n         * Properties of a TensorAnnotation.\n         * @memberof onnx\n         * @interface ITensorAnnotation\n         * @property {string|null} [tensorName] TensorAnnotation tensorName\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [quantParameterTensorNames] TensorAnnotation quantParameterTensorNames\n         */\n\n        /**\n         * Constructs a new TensorAnnotation.\n         * @memberof onnx\n         * @classdesc Represents a TensorAnnotation.\n         * @implements ITensorAnnotation\n         * @constructor\n         * @param {onnx.ITensorAnnotation=} [properties] Properties to set\n         */\n        function TensorAnnotation(properties) {\n            this.quantParameterTensorNames = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorAnnotation tensorName.\n         * @member {string} tensorName\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         */\n        TensorAnnotation.prototype.tensorName = \"\";\n\n        /**\n         * TensorAnnotation quantParameterTensorNames.\n         * @member {Array.<onnx.IStringStringEntryProto>} quantParameterTensorNames\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         */\n        TensorAnnotation.prototype.quantParameterTensorNames = $util.emptyArray;\n\n        /**\n         * Creates a new TensorAnnotation instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation=} [properties] Properties to set\n         * @returns {onnx.TensorAnnotation} TensorAnnotation instance\n         */\n        TensorAnnotation.create = function create(properties) {\n            return new TensorAnnotation(properties);\n        };\n\n        /**\n         * Encodes the specified TensorAnnotation message. Does not implicitly {@link onnx.TensorAnnotation.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation} message TensorAnnotation message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorAnnotation.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.tensorName != null && Object.hasOwnProperty.call(message, \"tensorName\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.tensorName);\n            if (message.quantParameterTensorNames != null && message.quantParameterTensorNames.length)\n                for (var i = 0; i < message.quantParameterTensorNames.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.quantParameterTensorNames[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorAnnotation message, length delimited. Does not implicitly {@link onnx.TensorAnnotation.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation} message TensorAnnotation message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorAnnotation.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorAnnotation message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorAnnotation.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorAnnotation();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.tensorName = reader.string();\n                        break;\n                    }\n                case 2: {\n                        if (!(message.quantParameterTensorNames && message.quantParameterTensorNames.length))\n                            message.quantParameterTensorNames = [];\n                        message.quantParameterTensorNames.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorAnnotation message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorAnnotation.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorAnnotation message.\n         * @function verify\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorAnnotation.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                if (!$util.isString(message.tensorName))\n                    return \"tensorName: string expected\";\n            if (message.quantParameterTensorNames != null && message.hasOwnProperty(\"quantParameterTensorNames\")) {\n                if (!Array.isArray(message.quantParameterTensorNames))\n                    return \"quantParameterTensorNames: array expected\";\n                for (var i = 0; i < message.quantParameterTensorNames.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.quantParameterTensorNames[i]);\n                    if (error)\n                        return \"quantParameterTensorNames.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorAnnotation message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         */\n        TensorAnnotation.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorAnnotation)\n                return object;\n            var message = new $root.onnx.TensorAnnotation();\n            if (object.tensorName != null)\n                message.tensorName = String(object.tensorName);\n            if (object.quantParameterTensorNames) {\n                if (!Array.isArray(object.quantParameterTensorNames))\n                    throw TypeError(\".onnx.TensorAnnotation.quantParameterTensorNames: array expected\");\n                message.quantParameterTensorNames = [];\n                for (var i = 0; i < object.quantParameterTensorNames.length; ++i) {\n                    if (typeof object.quantParameterTensorNames[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorAnnotation.quantParameterTensorNames: object expected\");\n                    message.quantParameterTensorNames[i] = $root.onnx.StringStringEntryProto.fromObject(object.quantParameterTensorNames[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorAnnotation message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.TensorAnnotation} message TensorAnnotation\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorAnnotation.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.quantParameterTensorNames = [];\n            if (options.defaults)\n                object.tensorName = \"\";\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                object.tensorName = message.tensorName;\n            if (message.quantParameterTensorNames && message.quantParameterTensorNames.length) {\n                object.quantParameterTensorNames = [];\n                for (var j = 0; j < message.quantParameterTensorNames.length; ++j)\n                    object.quantParameterTensorNames[j] = $root.onnx.StringStringEntryProto.toObject(message.quantParameterTensorNames[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TensorAnnotation to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorAnnotation.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for TensorAnnotation\n         * @function getTypeUrl\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        TensorAnnotation.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.TensorAnnotation\";\n        };\n\n        return TensorAnnotation;\n    })();\n\n    onnx.GraphProto = (function() {\n\n        /**\n         * Properties of a GraphProto.\n         * @memberof onnx\n         * @interface IGraphProto\n         * @property {Array.<onnx.INodeProto>|null} [node] GraphProto node\n         * @property {string|null} [name] GraphProto name\n         * @property {Array.<onnx.ITensorProto>|null} [initializer] GraphProto initializer\n         * @property {Array.<onnx.ISparseTensorProto>|null} [sparseInitializer] GraphProto sparseInitializer\n         * @property {string|null} [docString] GraphProto docString\n         * @property {Array.<onnx.IValueInfoProto>|null} [input] GraphProto input\n         * @property {Array.<onnx.IValueInfoProto>|null} [output] GraphProto output\n         * @property {Array.<onnx.IValueInfoProto>|null} [valueInfo] GraphProto valueInfo\n         * @property {Array.<onnx.ITensorAnnotation>|null} [quantizationAnnotation] GraphProto quantizationAnnotation\n         */\n\n        /**\n         * Constructs a new GraphProto.\n         * @memberof onnx\n         * @classdesc Represents a GraphProto.\n         * @implements IGraphProto\n         * @constructor\n         * @param {onnx.IGraphProto=} [properties] Properties to set\n         */\n        function GraphProto(properties) {\n            this.node = [];\n            this.initializer = [];\n            this.sparseInitializer = [];\n            this.input = [];\n            this.output = [];\n            this.valueInfo = [];\n            this.quantizationAnnotation = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * GraphProto node.\n         * @member {Array.<onnx.INodeProto>} node\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.node = $util.emptyArray;\n\n        /**\n         * GraphProto name.\n         * @member {string} name\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.name = \"\";\n\n        /**\n         * GraphProto initializer.\n         * @member {Array.<onnx.ITensorProto>} initializer\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.initializer = $util.emptyArray;\n\n        /**\n         * GraphProto sparseInitializer.\n         * @member {Array.<onnx.ISparseTensorProto>} sparseInitializer\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.sparseInitializer = $util.emptyArray;\n\n        /**\n         * GraphProto docString.\n         * @member {string} docString\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.docString = \"\";\n\n        /**\n         * GraphProto input.\n         * @member {Array.<onnx.IValueInfoProto>} input\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.input = $util.emptyArray;\n\n        /**\n         * GraphProto output.\n         * @member {Array.<onnx.IValueInfoProto>} output\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.output = $util.emptyArray;\n\n        /**\n         * GraphProto valueInfo.\n         * @member {Array.<onnx.IValueInfoProto>} valueInfo\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.valueInfo = $util.emptyArray;\n\n        /**\n         * GraphProto quantizationAnnotation.\n         * @member {Array.<onnx.ITensorAnnotation>} quantizationAnnotation\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.quantizationAnnotation = $util.emptyArray;\n\n        /**\n         * Creates a new GraphProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto=} [properties] Properties to set\n         * @returns {onnx.GraphProto} GraphProto instance\n         */\n        GraphProto.create = function create(properties) {\n            return new GraphProto(properties);\n        };\n\n        /**\n         * Encodes the specified GraphProto message. Does not implicitly {@link onnx.GraphProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto} message GraphProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        GraphProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.node != null && message.node.length)\n                for (var i = 0; i < message.node.length; ++i)\n                    $root.onnx.NodeProto.encode(message.node[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);\n            if (message.initializer != null && message.initializer.length)\n                for (var i = 0; i < message.initializer.length; ++i)\n                    $root.onnx.TensorProto.encode(message.initializer[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.docString != null && Object.hasOwnProperty.call(message, \"docString\"))\n                writer.uint32(/* id 10, wireType 2 =*/82).string(message.docString);\n            if (message.input != null && message.input.length)\n                for (var i = 0; i < message.input.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.input[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            if (message.output != null && message.output.length)\n                for (var i = 0; i < message.output.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.output[i], writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();\n            if (message.valueInfo != null && message.valueInfo.length)\n                for (var i = 0; i < message.valueInfo.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.valueInfo[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n            if (message.quantizationAnnotation != null && message.quantizationAnnotation.length)\n                for (var i = 0; i < message.quantizationAnnotation.length; ++i)\n                    $root.onnx.TensorAnnotation.encode(message.quantizationAnnotation[i], writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n            if (message.sparseInitializer != null && message.sparseInitializer.length)\n                for (var i = 0; i < message.sparseInitializer.length; ++i)\n                    $root.onnx.SparseTensorProto.encode(message.sparseInitializer[i], writer.uint32(/* id 15, wireType 2 =*/122).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified GraphProto message, length delimited. Does not implicitly {@link onnx.GraphProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto} message GraphProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        GraphProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a GraphProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.GraphProto} GraphProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        GraphProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.GraphProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        if (!(message.node && message.node.length))\n                            message.node = [];\n                        message.node.push($root.onnx.NodeProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 2: {\n                        message.name = reader.string();\n                        break;\n                    }\n                case 5: {\n                        if (!(message.initializer && message.initializer.length))\n                            message.initializer = [];\n                        message.initializer.push($root.onnx.TensorProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 15: {\n                        if (!(message.sparseInitializer && message.sparseInitializer.length))\n                            message.sparseInitializer = [];\n                        message.sparseInitializer.push($root.onnx.SparseTensorProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 10: {\n                        message.docString = reader.string();\n                        break;\n                    }\n                case 11: {\n                        if (!(message.input && message.input.length))\n                            message.input = [];\n                        message.input.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 12: {\n                        if (!(message.output && message.output.length))\n                            message.output = [];\n                        message.output.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 13: {\n                        if (!(message.valueInfo && message.valueInfo.length))\n                            message.valueInfo = [];\n                        message.valueInfo.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 14: {\n                        if (!(message.quantizationAnnotation && message.quantizationAnnotation.length))\n                            message.quantizationAnnotation = [];\n                        message.quantizationAnnotation.push($root.onnx.TensorAnnotation.decode(reader, reader.uint32()));\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a GraphProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.GraphProto} GraphProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        GraphProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a GraphProto message.\n         * @function verify\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        GraphProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.node != null && message.hasOwnProperty(\"node\")) {\n                if (!Array.isArray(message.node))\n                    return \"node: array expected\";\n                for (var i = 0; i < message.node.length; ++i) {\n                    var error = $root.onnx.NodeProto.verify(message.node[i]);\n                    if (error)\n                        return \"node.\" + error;\n                }\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.initializer != null && message.hasOwnProperty(\"initializer\")) {\n                if (!Array.isArray(message.initializer))\n                    return \"initializer: array expected\";\n                for (var i = 0; i < message.initializer.length; ++i) {\n                    var error = $root.onnx.TensorProto.verify(message.initializer[i]);\n                    if (error)\n                        return \"initializer.\" + error;\n                }\n            }\n            if (message.sparseInitializer != null && message.hasOwnProperty(\"sparseInitializer\")) {\n                if (!Array.isArray(message.sparseInitializer))\n                    return \"sparseInitializer: array expected\";\n                for (var i = 0; i < message.sparseInitializer.length; ++i) {\n                    var error = $root.onnx.SparseTensorProto.verify(message.sparseInitializer[i]);\n                    if (error)\n                        return \"sparseInitializer.\" + error;\n                }\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.input != null && message.hasOwnProperty(\"input\")) {\n                if (!Array.isArray(message.input))\n                    return \"input: array expected\";\n                for (var i = 0; i < message.input.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.input[i]);\n                    if (error)\n                        return \"input.\" + error;\n                }\n            }\n            if (message.output != null && message.hasOwnProperty(\"output\")) {\n                if (!Array.isArray(message.output))\n                    return \"output: array expected\";\n                for (var i = 0; i < message.output.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.output[i]);\n                    if (error)\n                        return \"output.\" + error;\n                }\n            }\n            if (message.valueInfo != null && message.hasOwnProperty(\"valueInfo\")) {\n                if (!Array.isArray(message.valueInfo))\n                    return \"valueInfo: array expected\";\n                for (var i = 0; i < message.valueInfo.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.valueInfo[i]);\n                    if (error)\n                        return \"valueInfo.\" + error;\n                }\n            }\n            if (message.quantizationAnnotation != null && message.hasOwnProperty(\"quantizationAnnotation\")) {\n                if (!Array.isArray(message.quantizationAnnotation))\n                    return \"quantizationAnnotation: array expected\";\n                for (var i = 0; i < message.quantizationAnnotation.length; ++i) {\n                    var error = $root.onnx.TensorAnnotation.verify(message.quantizationAnnotation[i]);\n                    if (error)\n                        return \"quantizationAnnotation.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a GraphProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.GraphProto} GraphProto\n         */\n        GraphProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.GraphProto)\n                return object;\n            var message = new $root.onnx.GraphProto();\n            if (object.node) {\n                if (!Array.isArray(object.node))\n                    throw TypeError(\".onnx.GraphProto.node: array expected\");\n                message.node = [];\n                for (var i = 0; i < object.node.length; ++i) {\n                    if (typeof object.node[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.node: object expected\");\n                    message.node[i] = $root.onnx.NodeProto.fromObject(object.node[i]);\n                }\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.initializer) {\n                if (!Array.isArray(object.initializer))\n                    throw TypeError(\".onnx.GraphProto.initializer: array expected\");\n                message.initializer = [];\n                for (var i = 0; i < object.initializer.length; ++i) {\n                    if (typeof object.initializer[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.initializer: object expected\");\n                    message.initializer[i] = $root.onnx.TensorProto.fromObject(object.initializer[i]);\n                }\n            }\n            if (object.sparseInitializer) {\n                if (!Array.isArray(object.sparseInitializer))\n                    throw TypeError(\".onnx.GraphProto.sparseInitializer: array expected\");\n                message.sparseInitializer = [];\n                for (var i = 0; i < object.sparseInitializer.length; ++i) {\n                    if (typeof object.sparseInitializer[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.sparseInitializer: object expected\");\n                    message.sparseInitializer[i] = $root.onnx.SparseTensorProto.fromObject(object.sparseInitializer[i]);\n                }\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.input) {\n                if (!Array.isArray(object.input))\n                    throw TypeError(\".onnx.GraphProto.input: array expected\");\n                message.input = [];\n                for (var i = 0; i < object.input.length; ++i) {\n                    if (typeof object.input[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.input: object expected\");\n                    message.input[i] = $root.onnx.ValueInfoProto.fromObject(object.input[i]);\n                }\n            }\n            if (object.output) {\n                if (!Array.isArray(object.output))\n                    throw TypeError(\".onnx.GraphProto.output: array expected\");\n                message.output = [];\n                for (var i = 0; i < object.output.length; ++i) {\n                    if (typeof object.output[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.output: object expected\");\n                    message.output[i] = $root.onnx.ValueInfoProto.fromObject(object.output[i]);\n                }\n            }\n            if (object.valueInfo) {\n                if (!Array.isArray(object.valueInfo))\n                    throw TypeError(\".onnx.GraphProto.valueInfo: array expected\");\n                message.valueInfo = [];\n                for (var i = 0; i < object.valueInfo.length; ++i) {\n                    if (typeof object.valueInfo[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.valueInfo: object expected\");\n                    message.valueInfo[i] = $root.onnx.ValueInfoProto.fromObject(object.valueInfo[i]);\n                }\n            }\n            if (object.quantizationAnnotation) {\n                if (!Array.isArray(object.quantizationAnnotation))\n                    throw TypeError(\".onnx.GraphProto.quantizationAnnotation: array expected\");\n                message.quantizationAnnotation = [];\n                for (var i = 0; i < object.quantizationAnnotation.length; ++i) {\n                    if (typeof object.quantizationAnnotation[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.quantizationAnnotation: object expected\");\n                    message.quantizationAnnotation[i] = $root.onnx.TensorAnnotation.fromObject(object.quantizationAnnotation[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a GraphProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.GraphProto} message GraphProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        GraphProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.node = [];\n                object.initializer = [];\n                object.input = [];\n                object.output = [];\n                object.valueInfo = [];\n                object.quantizationAnnotation = [];\n                object.sparseInitializer = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.docString = \"\";\n            }\n            if (message.node && message.node.length) {\n                object.node = [];\n                for (var j = 0; j < message.node.length; ++j)\n                    object.node[j] = $root.onnx.NodeProto.toObject(message.node[j], options);\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.initializer && message.initializer.length) {\n                object.initializer = [];\n                for (var j = 0; j < message.initializer.length; ++j)\n                    object.initializer[j] = $root.onnx.TensorProto.toObject(message.initializer[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.input && message.input.length) {\n                object.input = [];\n                for (var j = 0; j < message.input.length; ++j)\n                    object.input[j] = $root.onnx.ValueInfoProto.toObject(message.input[j], options);\n            }\n            if (message.output && message.output.length) {\n                object.output = [];\n                for (var j = 0; j < message.output.length; ++j)\n                    object.output[j] = $root.onnx.ValueInfoProto.toObject(message.output[j], options);\n            }\n            if (message.valueInfo && message.valueInfo.length) {\n                object.valueInfo = [];\n                for (var j = 0; j < message.valueInfo.length; ++j)\n                    object.valueInfo[j] = $root.onnx.ValueInfoProto.toObject(message.valueInfo[j], options);\n            }\n            if (message.quantizationAnnotation && message.quantizationAnnotation.length) {\n                object.quantizationAnnotation = [];\n                for (var j = 0; j < message.quantizationAnnotation.length; ++j)\n                    object.quantizationAnnotation[j] = $root.onnx.TensorAnnotation.toObject(message.quantizationAnnotation[j], options);\n            }\n            if (message.sparseInitializer && message.sparseInitializer.length) {\n                object.sparseInitializer = [];\n                for (var j = 0; j < message.sparseInitializer.length; ++j)\n                    object.sparseInitializer[j] = $root.onnx.SparseTensorProto.toObject(message.sparseInitializer[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this GraphProto to JSON.\n         * @function toJSON\n         * @memberof onnx.GraphProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        GraphProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for GraphProto\n         * @function getTypeUrl\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        GraphProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.GraphProto\";\n        };\n\n        return GraphProto;\n    })();\n\n    onnx.TensorProto = (function() {\n\n        /**\n         * Properties of a TensorProto.\n         * @memberof onnx\n         * @interface ITensorProto\n         * @property {Array.<number|Long>|null} [dims] TensorProto dims\n         * @property {number|null} [dataType] TensorProto dataType\n         * @property {onnx.TensorProto.ISegment|null} [segment] TensorProto segment\n         * @property {Array.<number>|null} [floatData] TensorProto floatData\n         * @property {Array.<number>|null} [int32Data] TensorProto int32Data\n         * @property {Array.<Uint8Array>|null} [stringData] TensorProto stringData\n         * @property {Array.<number|Long>|null} [int64Data] TensorProto int64Data\n         * @property {string|null} [name] TensorProto name\n         * @property {string|null} [docString] TensorProto docString\n         * @property {Uint8Array|null} [rawData] TensorProto rawData\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [externalData] TensorProto externalData\n         * @property {onnx.TensorProto.DataLocation|null} [dataLocation] TensorProto dataLocation\n         * @property {Array.<number>|null} [doubleData] TensorProto doubleData\n         * @property {Array.<number|Long>|null} [uint64Data] TensorProto uint64Data\n         */\n\n        /**\n         * Constructs a new TensorProto.\n         * @memberof onnx\n         * @classdesc Represents a TensorProto.\n         * @implements ITensorProto\n         * @constructor\n         * @param {onnx.ITensorProto=} [properties] Properties to set\n         */\n        function TensorProto(properties) {\n            this.dims = [];\n            this.floatData = [];\n            this.int32Data = [];\n            this.stringData = [];\n            this.int64Data = [];\n            this.externalData = [];\n            this.doubleData = [];\n            this.uint64Data = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorProto dims.\n         * @member {Array.<number|Long>} dims\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dims = $util.emptyArray;\n\n        /**\n         * TensorProto dataType.\n         * @member {number} dataType\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dataType = 0;\n\n        /**\n         * TensorProto segment.\n         * @member {onnx.TensorProto.ISegment|null|undefined} segment\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.segment = null;\n\n        /**\n         * TensorProto floatData.\n         * @member {Array.<number>} floatData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.floatData = $util.emptyArray;\n\n        /**\n         * TensorProto int32Data.\n         * @member {Array.<number>} int32Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.int32Data = $util.emptyArray;\n\n        /**\n         * TensorProto stringData.\n         * @member {Array.<Uint8Array>} stringData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.stringData = $util.emptyArray;\n\n        /**\n         * TensorProto int64Data.\n         * @member {Array.<number|Long>} int64Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.int64Data = $util.emptyArray;\n\n        /**\n         * TensorProto name.\n         * @member {string} name\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.name = \"\";\n\n        /**\n         * TensorProto docString.\n         * @member {string} docString\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.docString = \"\";\n\n        /**\n         * TensorProto rawData.\n         * @member {Uint8Array} rawData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.rawData = $util.newBuffer([]);\n\n        /**\n         * TensorProto externalData.\n         * @member {Array.<onnx.IStringStringEntryProto>} externalData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.externalData = $util.emptyArray;\n\n        /**\n         * TensorProto dataLocation.\n         * @member {onnx.TensorProto.DataLocation} dataLocation\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dataLocation = 0;\n\n        /**\n         * TensorProto doubleData.\n         * @member {Array.<number>} doubleData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.doubleData = $util.emptyArray;\n\n        /**\n         * TensorProto uint64Data.\n         * @member {Array.<number|Long>} uint64Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.uint64Data = $util.emptyArray;\n\n        /**\n         * Creates a new TensorProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto=} [properties] Properties to set\n         * @returns {onnx.TensorProto} TensorProto instance\n         */\n        TensorProto.create = function create(properties) {\n            return new TensorProto(properties);\n        };\n\n        /**\n         * Encodes the specified TensorProto message. Does not implicitly {@link onnx.TensorProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto} message TensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.dims != null && message.dims.length) {\n                writer.uint32(/* id 1, wireType 2 =*/10).fork();\n                for (var i = 0; i < message.dims.length; ++i)\n                    writer.int64(message.dims[i]);\n                writer.ldelim();\n            }\n            if (message.dataType != null && Object.hasOwnProperty.call(message, \"dataType\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.dataType);\n            if (message.segment != null && Object.hasOwnProperty.call(message, \"segment\"))\n                $root.onnx.TensorProto.Segment.encode(message.segment, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            if (message.floatData != null && message.floatData.length) {\n                writer.uint32(/* id 4, wireType 2 =*/34).fork();\n                for (var i = 0; i < message.floatData.length; ++i)\n                    writer.float(message.floatData[i]);\n                writer.ldelim();\n            }\n            if (message.int32Data != null && message.int32Data.length) {\n                writer.uint32(/* id 5, wireType 2 =*/42).fork();\n                for (var i = 0; i < message.int32Data.length; ++i)\n                    writer.int32(message.int32Data[i]);\n                writer.ldelim();\n            }\n            if (message.stringData != null && message.stringData.length)\n                for (var i = 0; i < message.stringData.length; ++i)\n                    writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.stringData[i]);\n            if (message.int64Data != null && message.int64Data.length) {\n                writer.uint32(/* id 7, wireType 2 =*/58).fork();\n                for (var i = 0; i < message.int64Data.length; ++i)\n                    writer.int64(message.int64Data[i]);\n                writer.ldelim();\n            }\n            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n                writer.uint32(/* id 8, wireType 2 =*/66).string(message.name);\n            if (message.rawData != null && Object.hasOwnProperty.call(message, \"rawData\"))\n                writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.rawData);\n            if (message.doubleData != null && message.doubleData.length) {\n                writer.uint32(/* id 10, wireType 2 =*/82).fork();\n                for (var i = 0; i < message.doubleData.length; ++i)\n                    writer.double(message.doubleData[i]);\n                writer.ldelim();\n            }\n            if (message.uint64Data != null && message.uint64Data.length) {\n                writer.uint32(/* id 11, wireType 2 =*/90).fork();\n                for (var i = 0; i < message.uint64Data.length; ++i)\n                    writer.uint64(message.uint64Data[i]);\n                writer.ldelim();\n            }\n            if (message.docString != null && Object.hasOwnProperty.call(message, \"docString\"))\n                writer.uint32(/* id 12, wireType 2 =*/98).string(message.docString);\n            if (message.externalData != null && message.externalData.length)\n                for (var i = 0; i < message.externalData.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.externalData[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n            if (message.dataLocation != null && Object.hasOwnProperty.call(message, \"dataLocation\"))\n                writer.uint32(/* id 14, wireType 0 =*/112).int32(message.dataLocation);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorProto message, length delimited. Does not implicitly {@link onnx.TensorProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto} message TensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorProto} TensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        if (!(message.dims && message.dims.length))\n                            message.dims = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.dims.push(reader.int64());\n                        } else\n                            message.dims.push(reader.int64());\n                        break;\n                    }\n                case 2: {\n                        message.dataType = reader.int32();\n                        break;\n                    }\n                case 3: {\n                        message.segment = $root.onnx.TensorProto.Segment.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 4: {\n                        if (!(message.floatData && message.floatData.length))\n                            message.floatData = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.floatData.push(reader.float());\n                        } else\n                            message.floatData.push(reader.float());\n                        break;\n                    }\n                case 5: {\n                        if (!(message.int32Data && message.int32Data.length))\n                            message.int32Data = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.int32Data.push(reader.int32());\n                        } else\n                            message.int32Data.push(reader.int32());\n                        break;\n                    }\n                case 6: {\n                        if (!(message.stringData && message.stringData.length))\n                            message.stringData = [];\n                        message.stringData.push(reader.bytes());\n                        break;\n                    }\n                case 7: {\n                        if (!(message.int64Data && message.int64Data.length))\n                            message.int64Data = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.int64Data.push(reader.int64());\n                        } else\n                            message.int64Data.push(reader.int64());\n                        break;\n                    }\n                case 8: {\n                        message.name = reader.string();\n                        break;\n                    }\n                case 12: {\n                        message.docString = reader.string();\n                        break;\n                    }\n                case 9: {\n                        message.rawData = reader.bytes();\n                        break;\n                    }\n                case 13: {\n                        if (!(message.externalData && message.externalData.length))\n                            message.externalData = [];\n                        message.externalData.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 14: {\n                        message.dataLocation = reader.int32();\n                        break;\n                    }\n                case 10: {\n                        if (!(message.doubleData && message.doubleData.length))\n                            message.doubleData = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.doubleData.push(reader.double());\n                        } else\n                            message.doubleData.push(reader.double());\n                        break;\n                    }\n                case 11: {\n                        if (!(message.uint64Data && message.uint64Data.length))\n                            message.uint64Data = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.uint64Data.push(reader.uint64());\n                        } else\n                            message.uint64Data.push(reader.uint64());\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorProto} TensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorProto message.\n         * @function verify\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.dims != null && message.hasOwnProperty(\"dims\")) {\n                if (!Array.isArray(message.dims))\n                    return \"dims: array expected\";\n                for (var i = 0; i < message.dims.length; ++i)\n                    if (!$util.isInteger(message.dims[i]) && !(message.dims[i] && $util.isInteger(message.dims[i].low) && $util.isInteger(message.dims[i].high)))\n                        return \"dims: integer|Long[] expected\";\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                if (!$util.isInteger(message.dataType))\n                    return \"dataType: integer expected\";\n            if (message.segment != null && message.hasOwnProperty(\"segment\")) {\n                var error = $root.onnx.TensorProto.Segment.verify(message.segment);\n                if (error)\n                    return \"segment.\" + error;\n            }\n            if (message.floatData != null && message.hasOwnProperty(\"floatData\")) {\n                if (!Array.isArray(message.floatData))\n                    return \"floatData: array expected\";\n                for (var i = 0; i < message.floatData.length; ++i)\n                    if (typeof message.floatData[i] !== \"number\")\n                        return \"floatData: number[] expected\";\n            }\n            if (message.int32Data != null && message.hasOwnProperty(\"int32Data\")) {\n                if (!Array.isArray(message.int32Data))\n                    return \"int32Data: array expected\";\n                for (var i = 0; i < message.int32Data.length; ++i)\n                    if (!$util.isInteger(message.int32Data[i]))\n                        return \"int32Data: integer[] expected\";\n            }\n            if (message.stringData != null && message.hasOwnProperty(\"stringData\")) {\n                if (!Array.isArray(message.stringData))\n                    return \"stringData: array expected\";\n                for (var i = 0; i < message.stringData.length; ++i)\n                    if (!(message.stringData[i] && typeof message.stringData[i].length === \"number\" || $util.isString(message.stringData[i])))\n                        return \"stringData: buffer[] expected\";\n            }\n            if (message.int64Data != null && message.hasOwnProperty(\"int64Data\")) {\n                if (!Array.isArray(message.int64Data))\n                    return \"int64Data: array expected\";\n                for (var i = 0; i < message.int64Data.length; ++i)\n                    if (!$util.isInteger(message.int64Data[i]) && !(message.int64Data[i] && $util.isInteger(message.int64Data[i].low) && $util.isInteger(message.int64Data[i].high)))\n                        return \"int64Data: integer|Long[] expected\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                if (!(message.rawData && typeof message.rawData.length === \"number\" || $util.isString(message.rawData)))\n                    return \"rawData: buffer expected\";\n            if (message.externalData != null && message.hasOwnProperty(\"externalData\")) {\n                if (!Array.isArray(message.externalData))\n                    return \"externalData: array expected\";\n                for (var i = 0; i < message.externalData.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.externalData[i]);\n                    if (error)\n                        return \"externalData.\" + error;\n                }\n            }\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                switch (message.dataLocation) {\n                default:\n                    return \"dataLocation: enum value expected\";\n                case 0:\n                case 1:\n                    break;\n                }\n            if (message.doubleData != null && message.hasOwnProperty(\"doubleData\")) {\n                if (!Array.isArray(message.doubleData))\n                    return \"doubleData: array expected\";\n                for (var i = 0; i < message.doubleData.length; ++i)\n                    if (typeof message.doubleData[i] !== \"number\")\n                        return \"doubleData: number[] expected\";\n            }\n            if (message.uint64Data != null && message.hasOwnProperty(\"uint64Data\")) {\n                if (!Array.isArray(message.uint64Data))\n                    return \"uint64Data: array expected\";\n                for (var i = 0; i < message.uint64Data.length; ++i)\n                    if (!$util.isInteger(message.uint64Data[i]) && !(message.uint64Data[i] && $util.isInteger(message.uint64Data[i].low) && $util.isInteger(message.uint64Data[i].high)))\n                        return \"uint64Data: integer|Long[] expected\";\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorProto} TensorProto\n         */\n        TensorProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorProto)\n                return object;\n            var message = new $root.onnx.TensorProto();\n            if (object.dims) {\n                if (!Array.isArray(object.dims))\n                    throw TypeError(\".onnx.TensorProto.dims: array expected\");\n                message.dims = [];\n                for (var i = 0; i < object.dims.length; ++i)\n                    if ($util.Long)\n                        (message.dims[i] = $util.Long.fromValue(object.dims[i])).unsigned = false;\n                    else if (typeof object.dims[i] === \"string\")\n                        message.dims[i] = parseInt(object.dims[i], 10);\n                    else if (typeof object.dims[i] === \"number\")\n                        message.dims[i] = object.dims[i];\n                    else if (typeof object.dims[i] === \"object\")\n                        message.dims[i] = new $util.LongBits(object.dims[i].low >>> 0, object.dims[i].high >>> 0).toNumber();\n            }\n            if (object.dataType != null)\n                message.dataType = object.dataType | 0;\n            if (object.segment != null) {\n                if (typeof object.segment !== \"object\")\n                    throw TypeError(\".onnx.TensorProto.segment: object expected\");\n                message.segment = $root.onnx.TensorProto.Segment.fromObject(object.segment);\n            }\n            if (object.floatData) {\n                if (!Array.isArray(object.floatData))\n                    throw TypeError(\".onnx.TensorProto.floatData: array expected\");\n                message.floatData = [];\n                for (var i = 0; i < object.floatData.length; ++i)\n                    message.floatData[i] = Number(object.floatData[i]);\n            }\n            if (object.int32Data) {\n                if (!Array.isArray(object.int32Data))\n                    throw TypeError(\".onnx.TensorProto.int32Data: array expected\");\n                message.int32Data = [];\n                for (var i = 0; i < object.int32Data.length; ++i)\n                    message.int32Data[i] = object.int32Data[i] | 0;\n            }\n            if (object.stringData) {\n                if (!Array.isArray(object.stringData))\n                    throw TypeError(\".onnx.TensorProto.stringData: array expected\");\n                message.stringData = [];\n                for (var i = 0; i < object.stringData.length; ++i)\n                    if (typeof object.stringData[i] === \"string\")\n                        $util.base64.decode(object.stringData[i], message.stringData[i] = $util.newBuffer($util.base64.length(object.stringData[i])), 0);\n                    else if (object.stringData[i].length >= 0)\n                        message.stringData[i] = object.stringData[i];\n            }\n            if (object.int64Data) {\n                if (!Array.isArray(object.int64Data))\n                    throw TypeError(\".onnx.TensorProto.int64Data: array expected\");\n                message.int64Data = [];\n                for (var i = 0; i < object.int64Data.length; ++i)\n                    if ($util.Long)\n                        (message.int64Data[i] = $util.Long.fromValue(object.int64Data[i])).unsigned = false;\n                    else if (typeof object.int64Data[i] === \"string\")\n                        message.int64Data[i] = parseInt(object.int64Data[i], 10);\n                    else if (typeof object.int64Data[i] === \"number\")\n                        message.int64Data[i] = object.int64Data[i];\n                    else if (typeof object.int64Data[i] === \"object\")\n                        message.int64Data[i] = new $util.LongBits(object.int64Data[i].low >>> 0, object.int64Data[i].high >>> 0).toNumber();\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.rawData != null)\n                if (typeof object.rawData === \"string\")\n                    $util.base64.decode(object.rawData, message.rawData = $util.newBuffer($util.base64.length(object.rawData)), 0);\n                else if (object.rawData.length >= 0)\n                    message.rawData = object.rawData;\n            if (object.externalData) {\n                if (!Array.isArray(object.externalData))\n                    throw TypeError(\".onnx.TensorProto.externalData: array expected\");\n                message.externalData = [];\n                for (var i = 0; i < object.externalData.length; ++i) {\n                    if (typeof object.externalData[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorProto.externalData: object expected\");\n                    message.externalData[i] = $root.onnx.StringStringEntryProto.fromObject(object.externalData[i]);\n                }\n            }\n            switch (object.dataLocation) {\n            default:\n                if (typeof object.dataLocation === \"number\") {\n                    message.dataLocation = object.dataLocation;\n                    break;\n                }\n                break;\n            case \"DEFAULT\":\n            case 0:\n                message.dataLocation = 0;\n                break;\n            case \"EXTERNAL\":\n            case 1:\n                message.dataLocation = 1;\n                break;\n            }\n            if (object.doubleData) {\n                if (!Array.isArray(object.doubleData))\n                    throw TypeError(\".onnx.TensorProto.doubleData: array expected\");\n                message.doubleData = [];\n                for (var i = 0; i < object.doubleData.length; ++i)\n                    message.doubleData[i] = Number(object.doubleData[i]);\n            }\n            if (object.uint64Data) {\n                if (!Array.isArray(object.uint64Data))\n                    throw TypeError(\".onnx.TensorProto.uint64Data: array expected\");\n                message.uint64Data = [];\n                for (var i = 0; i < object.uint64Data.length; ++i)\n                    if ($util.Long)\n                        (message.uint64Data[i] = $util.Long.fromValue(object.uint64Data[i])).unsigned = true;\n                    else if (typeof object.uint64Data[i] === \"string\")\n                        message.uint64Data[i] = parseInt(object.uint64Data[i], 10);\n                    else if (typeof object.uint64Data[i] === \"number\")\n                        message.uint64Data[i] = object.uint64Data[i];\n                    else if (typeof object.uint64Data[i] === \"object\")\n                        message.uint64Data[i] = new $util.LongBits(object.uint64Data[i].low >>> 0, object.uint64Data[i].high >>> 0).toNumber(true);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.TensorProto} message TensorProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.dims = [];\n                object.floatData = [];\n                object.int32Data = [];\n                object.stringData = [];\n                object.int64Data = [];\n                object.doubleData = [];\n                object.uint64Data = [];\n                object.externalData = [];\n            }\n            if (options.defaults) {\n                object.dataType = 0;\n                object.segment = null;\n                object.name = \"\";\n                if (options.bytes === String)\n                    object.rawData = \"\";\n                else {\n                    object.rawData = [];\n                    if (options.bytes !== Array)\n                        object.rawData = $util.newBuffer(object.rawData);\n                }\n                object.docString = \"\";\n                object.dataLocation = options.enums === String ? \"DEFAULT\" : 0;\n            }\n            if (message.dims && message.dims.length) {\n                object.dims = [];\n                for (var j = 0; j < message.dims.length; ++j)\n                    if (typeof message.dims[j] === \"number\")\n                        object.dims[j] = options.longs === String ? String(message.dims[j]) : message.dims[j];\n                    else\n                        object.dims[j] = options.longs === String ? $util.Long.prototype.toString.call(message.dims[j]) : options.longs === Number ? new $util.LongBits(message.dims[j].low >>> 0, message.dims[j].high >>> 0).toNumber() : message.dims[j];\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                object.dataType = message.dataType;\n            if (message.segment != null && message.hasOwnProperty(\"segment\"))\n                object.segment = $root.onnx.TensorProto.Segment.toObject(message.segment, options);\n            if (message.floatData && message.floatData.length) {\n                object.floatData = [];\n                for (var j = 0; j < message.floatData.length; ++j)\n                    object.floatData[j] = options.json && !isFinite(message.floatData[j]) ? String(message.floatData[j]) : message.floatData[j];\n            }\n            if (message.int32Data && message.int32Data.length) {\n                object.int32Data = [];\n                for (var j = 0; j < message.int32Data.length; ++j)\n                    object.int32Data[j] = message.int32Data[j];\n            }\n            if (message.stringData && message.stringData.length) {\n                object.stringData = [];\n                for (var j = 0; j < message.stringData.length; ++j)\n                    object.stringData[j] = options.bytes === String ? $util.base64.encode(message.stringData[j], 0, message.stringData[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.stringData[j]) : message.stringData[j];\n            }\n            if (message.int64Data && message.int64Data.length) {\n                object.int64Data = [];\n                for (var j = 0; j < message.int64Data.length; ++j)\n                    if (typeof message.int64Data[j] === \"number\")\n                        object.int64Data[j] = options.longs === String ? String(message.int64Data[j]) : message.int64Data[j];\n                    else\n                        object.int64Data[j] = options.longs === String ? $util.Long.prototype.toString.call(message.int64Data[j]) : options.longs === Number ? new $util.LongBits(message.int64Data[j].low >>> 0, message.int64Data[j].high >>> 0).toNumber() : message.int64Data[j];\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                object.rawData = options.bytes === String ? $util.base64.encode(message.rawData, 0, message.rawData.length) : options.bytes === Array ? Array.prototype.slice.call(message.rawData) : message.rawData;\n            if (message.doubleData && message.doubleData.length) {\n                object.doubleData = [];\n                for (var j = 0; j < message.doubleData.length; ++j)\n                    object.doubleData[j] = options.json && !isFinite(message.doubleData[j]) ? String(message.doubleData[j]) : message.doubleData[j];\n            }\n            if (message.uint64Data && message.uint64Data.length) {\n                object.uint64Data = [];\n                for (var j = 0; j < message.uint64Data.length; ++j)\n                    if (typeof message.uint64Data[j] === \"number\")\n                        object.uint64Data[j] = options.longs === String ? String(message.uint64Data[j]) : message.uint64Data[j];\n                    else\n                        object.uint64Data[j] = options.longs === String ? $util.Long.prototype.toString.call(message.uint64Data[j]) : options.longs === Number ? new $util.LongBits(message.uint64Data[j].low >>> 0, message.uint64Data[j].high >>> 0).toNumber(true) : message.uint64Data[j];\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.externalData && message.externalData.length) {\n                object.externalData = [];\n                for (var j = 0; j < message.externalData.length; ++j)\n                    object.externalData[j] = $root.onnx.StringStringEntryProto.toObject(message.externalData[j], options);\n            }\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                object.dataLocation = options.enums === String ? $root.onnx.TensorProto.DataLocation[message.dataLocation] === undefined ? message.dataLocation : $root.onnx.TensorProto.DataLocation[message.dataLocation] : message.dataLocation;\n            return object;\n        };\n\n        /**\n         * Converts this TensorProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for TensorProto\n         * @function getTypeUrl\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        TensorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.TensorProto\";\n        };\n\n        /**\n         * DataType enum.\n         * @name onnx.TensorProto.DataType\n         * @enum {number}\n         * @property {number} UNDEFINED=0 UNDEFINED value\n         * @property {number} FLOAT=1 FLOAT value\n         * @property {number} UINT8=2 UINT8 value\n         * @property {number} INT8=3 INT8 value\n         * @property {number} UINT16=4 UINT16 value\n         * @property {number} INT16=5 INT16 value\n         * @property {number} INT32=6 INT32 value\n         * @property {number} INT64=7 INT64 value\n         * @property {number} STRING=8 STRING value\n         * @property {number} BOOL=9 BOOL value\n         * @property {number} FLOAT16=10 FLOAT16 value\n         * @property {number} DOUBLE=11 DOUBLE value\n         * @property {number} UINT32=12 UINT32 value\n         * @property {number} UINT64=13 UINT64 value\n         * @property {number} COMPLEX64=14 COMPLEX64 value\n         * @property {number} COMPLEX128=15 COMPLEX128 value\n         * @property {number} BFLOAT16=16 BFLOAT16 value\n         * @property {number} FLOAT8E4M3FN=17 FLOAT8E4M3FN value\n         * @property {number} FLOAT8E4M3FNUZ=18 FLOAT8E4M3FNUZ value\n         * @property {number} FLOAT8E5M2=19 FLOAT8E5M2 value\n         * @property {number} FLOAT8E5M2FNUZ=20 FLOAT8E5M2FNUZ value\n         */\n        TensorProto.DataType = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"UNDEFINED\"] = 0;\n            values[valuesById[1] = \"FLOAT\"] = 1;\n            values[valuesById[2] = \"UINT8\"] = 2;\n            values[valuesById[3] = \"INT8\"] = 3;\n            values[valuesById[4] = \"UINT16\"] = 4;\n            values[valuesById[5] = \"INT16\"] = 5;\n            values[valuesById[6] = \"INT32\"] = 6;\n            values[valuesById[7] = \"INT64\"] = 7;\n            values[valuesById[8] = \"STRING\"] = 8;\n            values[valuesById[9] = \"BOOL\"] = 9;\n            values[valuesById[10] = \"FLOAT16\"] = 10;\n            values[valuesById[11] = \"DOUBLE\"] = 11;\n            values[valuesById[12] = \"UINT32\"] = 12;\n            values[valuesById[13] = \"UINT64\"] = 13;\n            values[valuesById[14] = \"COMPLEX64\"] = 14;\n            values[valuesById[15] = \"COMPLEX128\"] = 15;\n            values[valuesById[16] = \"BFLOAT16\"] = 16;\n            values[valuesById[17] = \"FLOAT8E4M3FN\"] = 17;\n            values[valuesById[18] = \"FLOAT8E4M3FNUZ\"] = 18;\n            values[valuesById[19] = \"FLOAT8E5M2\"] = 19;\n            values[valuesById[20] = \"FLOAT8E5M2FNUZ\"] = 20;\n            return values;\n        })();\n\n        TensorProto.Segment = (function() {\n\n            /**\n             * Properties of a Segment.\n             * @memberof onnx.TensorProto\n             * @interface ISegment\n             * @property {number|Long|null} [begin] Segment begin\n             * @property {number|Long|null} [end] Segment end\n             */\n\n            /**\n             * Constructs a new Segment.\n             * @memberof onnx.TensorProto\n             * @classdesc Represents a Segment.\n             * @implements ISegment\n             * @constructor\n             * @param {onnx.TensorProto.ISegment=} [properties] Properties to set\n             */\n            function Segment(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Segment begin.\n             * @member {number|Long} begin\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             */\n            Segment.prototype.begin = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Segment end.\n             * @member {number|Long} end\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             */\n            Segment.prototype.end = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Creates a new Segment instance using the specified properties.\n             * @function create\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment=} [properties] Properties to set\n             * @returns {onnx.TensorProto.Segment} Segment instance\n             */\n            Segment.create = function create(properties) {\n                return new Segment(properties);\n            };\n\n            /**\n             * Encodes the specified Segment message. Does not implicitly {@link onnx.TensorProto.Segment.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment} message Segment message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Segment.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.begin != null && Object.hasOwnProperty.call(message, \"begin\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.begin);\n                if (message.end != null && Object.hasOwnProperty.call(message, \"end\"))\n                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.end);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Segment message, length delimited. Does not implicitly {@link onnx.TensorProto.Segment.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment} message Segment message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Segment.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Segment message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TensorProto.Segment} Segment\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Segment.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorProto.Segment();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1: {\n                            message.begin = reader.int64();\n                            break;\n                        }\n                    case 2: {\n                            message.end = reader.int64();\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Segment message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TensorProto.Segment} Segment\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Segment.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Segment message.\n             * @function verify\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Segment.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    if (!$util.isInteger(message.begin) && !(message.begin && $util.isInteger(message.begin.low) && $util.isInteger(message.begin.high)))\n                        return \"begin: integer|Long expected\";\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    if (!$util.isInteger(message.end) && !(message.end && $util.isInteger(message.end.low) && $util.isInteger(message.end.high)))\n                        return \"end: integer|Long expected\";\n                return null;\n            };\n\n            /**\n             * Creates a Segment message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TensorProto.Segment} Segment\n             */\n            Segment.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TensorProto.Segment)\n                    return object;\n                var message = new $root.onnx.TensorProto.Segment();\n                if (object.begin != null)\n                    if ($util.Long)\n                        (message.begin = $util.Long.fromValue(object.begin)).unsigned = false;\n                    else if (typeof object.begin === \"string\")\n                        message.begin = parseInt(object.begin, 10);\n                    else if (typeof object.begin === \"number\")\n                        message.begin = object.begin;\n                    else if (typeof object.begin === \"object\")\n                        message.begin = new $util.LongBits(object.begin.low >>> 0, object.begin.high >>> 0).toNumber();\n                if (object.end != null)\n                    if ($util.Long)\n                        (message.end = $util.Long.fromValue(object.end)).unsigned = false;\n                    else if (typeof object.end === \"string\")\n                        message.end = parseInt(object.end, 10);\n                    else if (typeof object.end === \"number\")\n                        message.end = object.end;\n                    else if (typeof object.end === \"object\")\n                        message.end = new $util.LongBits(object.end.low >>> 0, object.end.high >>> 0).toNumber();\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Segment message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.Segment} message Segment\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Segment.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.begin = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.begin = options.longs === String ? \"0\" : 0;\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.end = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.end = options.longs === String ? \"0\" : 0;\n                }\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    if (typeof message.begin === \"number\")\n                        object.begin = options.longs === String ? String(message.begin) : message.begin;\n                    else\n                        object.begin = options.longs === String ? $util.Long.prototype.toString.call(message.begin) : options.longs === Number ? new $util.LongBits(message.begin.low >>> 0, message.begin.high >>> 0).toNumber() : message.begin;\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    if (typeof message.end === \"number\")\n                        object.end = options.longs === String ? String(message.end) : message.end;\n                    else\n                        object.end = options.longs === String ? $util.Long.prototype.toString.call(message.end) : options.longs === Number ? new $util.LongBits(message.end.low >>> 0, message.end.high >>> 0).toNumber() : message.end;\n                return object;\n            };\n\n            /**\n             * Converts this Segment to JSON.\n             * @function toJSON\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Segment.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for Segment\n             * @function getTypeUrl\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            Segment.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/onnx.TensorProto.Segment\";\n            };\n\n            return Segment;\n        })();\n\n        /**\n         * DataLocation enum.\n         * @name onnx.TensorProto.DataLocation\n         * @enum {number}\n         * @property {number} DEFAULT=0 DEFAULT value\n         * @property {number} EXTERNAL=1 EXTERNAL value\n         */\n        TensorProto.DataLocation = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"DEFAULT\"] = 0;\n            values[valuesById[1] = \"EXTERNAL\"] = 1;\n            return values;\n        })();\n\n        return TensorProto;\n    })();\n\n    onnx.SparseTensorProto = (function() {\n\n        /**\n         * Properties of a SparseTensorProto.\n         * @memberof onnx\n         * @interface ISparseTensorProto\n         * @property {onnx.ITensorProto|null} [values] SparseTensorProto values\n         * @property {onnx.ITensorProto|null} [indices] SparseTensorProto indices\n         * @property {Array.<number|Long>|null} [dims] SparseTensorProto dims\n         */\n\n        /**\n         * Constructs a new SparseTensorProto.\n         * @memberof onnx\n         * @classdesc Represents a SparseTensorProto.\n         * @implements ISparseTensorProto\n         * @constructor\n         * @param {onnx.ISparseTensorProto=} [properties] Properties to set\n         */\n        function SparseTensorProto(properties) {\n            this.dims = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * SparseTensorProto values.\n         * @member {onnx.ITensorProto|null|undefined} values\n         * @memberof onnx.SparseTensorProto\n         * @instance\n         */\n        SparseTensorProto.prototype.values = null;\n\n        /**\n         * SparseTensorProto indices.\n         * @member {onnx.ITensorProto|null|undefined} indices\n         * @memberof onnx.SparseTensorProto\n         * @instance\n         */\n        SparseTensorProto.prototype.indices = null;\n\n        /**\n         * SparseTensorProto dims.\n         * @member {Array.<number|Long>} dims\n         * @memberof onnx.SparseTensorProto\n         * @instance\n         */\n        SparseTensorProto.prototype.dims = $util.emptyArray;\n\n        /**\n         * Creates a new SparseTensorProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.SparseTensorProto\n         * @static\n         * @param {onnx.ISparseTensorProto=} [properties] Properties to set\n         * @returns {onnx.SparseTensorProto} SparseTensorProto instance\n         */\n        SparseTensorProto.create = function create(properties) {\n            return new SparseTensorProto(properties);\n        };\n\n        /**\n         * Encodes the specified SparseTensorProto message. Does not implicitly {@link onnx.SparseTensorProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.SparseTensorProto\n         * @static\n         * @param {onnx.ISparseTensorProto} message SparseTensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        SparseTensorProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.values != null && Object.hasOwnProperty.call(message, \"values\"))\n                $root.onnx.TensorProto.encode(message.values, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.indices != null && Object.hasOwnProperty.call(message, \"indices\"))\n                $root.onnx.TensorProto.encode(message.indices, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.dims != null && message.dims.length) {\n                writer.uint32(/* id 3, wireType 2 =*/26).fork();\n                for (var i = 0; i < message.dims.length; ++i)\n                    writer.int64(message.dims[i]);\n                writer.ldelim();\n            }\n            return writer;\n        };\n\n        /**\n         * Encodes the specified SparseTensorProto message, length delimited. Does not implicitly {@link onnx.SparseTensorProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.SparseTensorProto\n         * @static\n         * @param {onnx.ISparseTensorProto} message SparseTensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        SparseTensorProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a SparseTensorProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.SparseTensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.SparseTensorProto} SparseTensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        SparseTensorProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.SparseTensorProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.values = $root.onnx.TensorProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 2: {\n                        message.indices = $root.onnx.TensorProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 3: {\n                        if (!(message.dims && message.dims.length))\n                            message.dims = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.dims.push(reader.int64());\n                        } else\n                            message.dims.push(reader.int64());\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a SparseTensorProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.SparseTensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.SparseTensorProto} SparseTensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        SparseTensorProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a SparseTensorProto message.\n         * @function verify\n         * @memberof onnx.SparseTensorProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        SparseTensorProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.values != null && message.hasOwnProperty(\"values\")) {\n                var error = $root.onnx.TensorProto.verify(message.values);\n                if (error)\n                    return \"values.\" + error;\n            }\n            if (message.indices != null && message.hasOwnProperty(\"indices\")) {\n                var error = $root.onnx.TensorProto.verify(message.indices);\n                if (error)\n                    return \"indices.\" + error;\n            }\n            if (message.dims != null && message.hasOwnProperty(\"dims\")) {\n                if (!Array.isArray(message.dims))\n                    return \"dims: array expected\";\n                for (var i = 0; i < message.dims.length; ++i)\n                    if (!$util.isInteger(message.dims[i]) && !(message.dims[i] && $util.isInteger(message.dims[i].low) && $util.isInteger(message.dims[i].high)))\n                        return \"dims: integer|Long[] expected\";\n            }\n            return null;\n        };\n\n        /**\n         * Creates a SparseTensorProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.SparseTensorProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.SparseTensorProto} SparseTensorProto\n         */\n        SparseTensorProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.SparseTensorProto)\n                return object;\n            var message = new $root.onnx.SparseTensorProto();\n            if (object.values != null) {\n                if (typeof object.values !== \"object\")\n                    throw TypeError(\".onnx.SparseTensorProto.values: object expected\");\n                message.values = $root.onnx.TensorProto.fromObject(object.values);\n            }\n            if (object.indices != null) {\n                if (typeof object.indices !== \"object\")\n                    throw TypeError(\".onnx.SparseTensorProto.indices: object expected\");\n                message.indices = $root.onnx.TensorProto.fromObject(object.indices);\n            }\n            if (object.dims) {\n                if (!Array.isArray(object.dims))\n                    throw TypeError(\".onnx.SparseTensorProto.dims: array expected\");\n                message.dims = [];\n                for (var i = 0; i < object.dims.length; ++i)\n                    if ($util.Long)\n                        (message.dims[i] = $util.Long.fromValue(object.dims[i])).unsigned = false;\n                    else if (typeof object.dims[i] === \"string\")\n                        message.dims[i] = parseInt(object.dims[i], 10);\n                    else if (typeof object.dims[i] === \"number\")\n                        message.dims[i] = object.dims[i];\n                    else if (typeof object.dims[i] === \"object\")\n                        message.dims[i] = new $util.LongBits(object.dims[i].low >>> 0, object.dims[i].high >>> 0).toNumber();\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a SparseTensorProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.SparseTensorProto\n         * @static\n         * @param {onnx.SparseTensorProto} message SparseTensorProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        SparseTensorProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.dims = [];\n            if (options.defaults) {\n                object.values = null;\n                object.indices = null;\n            }\n            if (message.values != null && message.hasOwnProperty(\"values\"))\n                object.values = $root.onnx.TensorProto.toObject(message.values, options);\n            if (message.indices != null && message.hasOwnProperty(\"indices\"))\n                object.indices = $root.onnx.TensorProto.toObject(message.indices, options);\n            if (message.dims && message.dims.length) {\n                object.dims = [];\n                for (var j = 0; j < message.dims.length; ++j)\n                    if (typeof message.dims[j] === \"number\")\n                        object.dims[j] = options.longs === String ? String(message.dims[j]) : message.dims[j];\n                    else\n                        object.dims[j] = options.longs === String ? $util.Long.prototype.toString.call(message.dims[j]) : options.longs === Number ? new $util.LongBits(message.dims[j].low >>> 0, message.dims[j].high >>> 0).toNumber() : message.dims[j];\n            }\n            return object;\n        };\n\n        /**\n         * Converts this SparseTensorProto to JSON.\n         * @function toJSON\n         * @memberof onnx.SparseTensorProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        SparseTensorProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for SparseTensorProto\n         * @function getTypeUrl\n         * @memberof onnx.SparseTensorProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        SparseTensorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.SparseTensorProto\";\n        };\n\n        return SparseTensorProto;\n    })();\n\n    onnx.TensorShapeProto = (function() {\n\n        /**\n         * Properties of a TensorShapeProto.\n         * @memberof onnx\n         * @interface ITensorShapeProto\n         * @property {Array.<onnx.TensorShapeProto.IDimension>|null} [dim] TensorShapeProto dim\n         */\n\n        /**\n         * Constructs a new TensorShapeProto.\n         * @memberof onnx\n         * @classdesc Represents a TensorShapeProto.\n         * @implements ITensorShapeProto\n         * @constructor\n         * @param {onnx.ITensorShapeProto=} [properties] Properties to set\n         */\n        function TensorShapeProto(properties) {\n            this.dim = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorShapeProto dim.\n         * @member {Array.<onnx.TensorShapeProto.IDimension>} dim\n         * @memberof onnx.TensorShapeProto\n         * @instance\n         */\n        TensorShapeProto.prototype.dim = $util.emptyArray;\n\n        /**\n         * Creates a new TensorShapeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto=} [properties] Properties to set\n         * @returns {onnx.TensorShapeProto} TensorShapeProto instance\n         */\n        TensorShapeProto.create = function create(properties) {\n            return new TensorShapeProto(properties);\n        };\n\n        /**\n         * Encodes the specified TensorShapeProto message. Does not implicitly {@link onnx.TensorShapeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto} message TensorShapeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorShapeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.dim != null && message.dim.length)\n                for (var i = 0; i < message.dim.length; ++i)\n                    $root.onnx.TensorShapeProto.Dimension.encode(message.dim[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorShapeProto message, length delimited. Does not implicitly {@link onnx.TensorShapeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto} message TensorShapeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorShapeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorShapeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorShapeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorShapeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        if (!(message.dim && message.dim.length))\n                            message.dim = [];\n                        message.dim.push($root.onnx.TensorShapeProto.Dimension.decode(reader, reader.uint32()));\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorShapeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorShapeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorShapeProto message.\n         * @function verify\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorShapeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.dim != null && message.hasOwnProperty(\"dim\")) {\n                if (!Array.isArray(message.dim))\n                    return \"dim: array expected\";\n                for (var i = 0; i < message.dim.length; ++i) {\n                    var error = $root.onnx.TensorShapeProto.Dimension.verify(message.dim[i]);\n                    if (error)\n                        return \"dim.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorShapeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         */\n        TensorShapeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorShapeProto)\n                return object;\n            var message = new $root.onnx.TensorShapeProto();\n            if (object.dim) {\n                if (!Array.isArray(object.dim))\n                    throw TypeError(\".onnx.TensorShapeProto.dim: array expected\");\n                message.dim = [];\n                for (var i = 0; i < object.dim.length; ++i) {\n                    if (typeof object.dim[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorShapeProto.dim: object expected\");\n                    message.dim[i] = $root.onnx.TensorShapeProto.Dimension.fromObject(object.dim[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorShapeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.TensorShapeProto} message TensorShapeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorShapeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.dim = [];\n            if (message.dim && message.dim.length) {\n                object.dim = [];\n                for (var j = 0; j < message.dim.length; ++j)\n                    object.dim[j] = $root.onnx.TensorShapeProto.Dimension.toObject(message.dim[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TensorShapeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorShapeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorShapeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for TensorShapeProto\n         * @function getTypeUrl\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        TensorShapeProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.TensorShapeProto\";\n        };\n\n        TensorShapeProto.Dimension = (function() {\n\n            /**\n             * Properties of a Dimension.\n             * @memberof onnx.TensorShapeProto\n             * @interface IDimension\n             * @property {number|Long|null} [dimValue] Dimension dimValue\n             * @property {string|null} [dimParam] Dimension dimParam\n             * @property {string|null} [denotation] Dimension denotation\n             */\n\n            /**\n             * Constructs a new Dimension.\n             * @memberof onnx.TensorShapeProto\n             * @classdesc Represents a Dimension.\n             * @implements IDimension\n             * @constructor\n             * @param {onnx.TensorShapeProto.IDimension=} [properties] Properties to set\n             */\n            function Dimension(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Dimension dimValue.\n             * @member {number|Long|null|undefined} dimValue\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.dimValue = null;\n\n            /**\n             * Dimension dimParam.\n             * @member {string|null|undefined} dimParam\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.dimParam = null;\n\n            /**\n             * Dimension denotation.\n             * @member {string} denotation\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.denotation = \"\";\n\n            // OneOf field names bound to virtual getters and setters\n            var $oneOfFields;\n\n            /**\n             * Dimension value.\n             * @member {\"dimValue\"|\"dimParam\"|undefined} value\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Object.defineProperty(Dimension.prototype, \"value\", {\n                get: $util.oneOfGetter($oneOfFields = [\"dimValue\", \"dimParam\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n\n            /**\n             * Creates a new Dimension instance using the specified properties.\n             * @function create\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension=} [properties] Properties to set\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension instance\n             */\n            Dimension.create = function create(properties) {\n                return new Dimension(properties);\n            };\n\n            /**\n             * Encodes the specified Dimension message. Does not implicitly {@link onnx.TensorShapeProto.Dimension.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension} message Dimension message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Dimension.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.dimValue != null && Object.hasOwnProperty.call(message, \"dimValue\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.dimValue);\n                if (message.dimParam != null && Object.hasOwnProperty.call(message, \"dimParam\"))\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.dimParam);\n                if (message.denotation != null && Object.hasOwnProperty.call(message, \"denotation\"))\n                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.denotation);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Dimension message, length delimited. Does not implicitly {@link onnx.TensorShapeProto.Dimension.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension} message Dimension message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Dimension.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Dimension message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Dimension.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorShapeProto.Dimension();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1: {\n                            message.dimValue = reader.int64();\n                            break;\n                        }\n                    case 2: {\n                            message.dimParam = reader.string();\n                            break;\n                        }\n                    case 3: {\n                            message.denotation = reader.string();\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Dimension message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Dimension.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Dimension message.\n             * @function verify\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Dimension.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                var properties = {};\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\")) {\n                    properties.value = 1;\n                    if (!$util.isInteger(message.dimValue) && !(message.dimValue && $util.isInteger(message.dimValue.low) && $util.isInteger(message.dimValue.high)))\n                        return \"dimValue: integer|Long expected\";\n                }\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\")) {\n                    if (properties.value === 1)\n                        return \"value: multiple values\";\n                    properties.value = 1;\n                    if (!$util.isString(message.dimParam))\n                        return \"dimParam: string expected\";\n                }\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    if (!$util.isString(message.denotation))\n                        return \"denotation: string expected\";\n                return null;\n            };\n\n            /**\n             * Creates a Dimension message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             */\n            Dimension.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TensorShapeProto.Dimension)\n                    return object;\n                var message = new $root.onnx.TensorShapeProto.Dimension();\n                if (object.dimValue != null)\n                    if ($util.Long)\n                        (message.dimValue = $util.Long.fromValue(object.dimValue)).unsigned = false;\n                    else if (typeof object.dimValue === \"string\")\n                        message.dimValue = parseInt(object.dimValue, 10);\n                    else if (typeof object.dimValue === \"number\")\n                        message.dimValue = object.dimValue;\n                    else if (typeof object.dimValue === \"object\")\n                        message.dimValue = new $util.LongBits(object.dimValue.low >>> 0, object.dimValue.high >>> 0).toNumber();\n                if (object.dimParam != null)\n                    message.dimParam = String(object.dimParam);\n                if (object.denotation != null)\n                    message.denotation = String(object.denotation);\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Dimension message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.Dimension} message Dimension\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Dimension.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults)\n                    object.denotation = \"\";\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\")) {\n                    if (typeof message.dimValue === \"number\")\n                        object.dimValue = options.longs === String ? String(message.dimValue) : message.dimValue;\n                    else\n                        object.dimValue = options.longs === String ? $util.Long.prototype.toString.call(message.dimValue) : options.longs === Number ? new $util.LongBits(message.dimValue.low >>> 0, message.dimValue.high >>> 0).toNumber() : message.dimValue;\n                    if (options.oneofs)\n                        object.value = \"dimValue\";\n                }\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\")) {\n                    object.dimParam = message.dimParam;\n                    if (options.oneofs)\n                        object.value = \"dimParam\";\n                }\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    object.denotation = message.denotation;\n                return object;\n            };\n\n            /**\n             * Converts this Dimension to JSON.\n             * @function toJSON\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Dimension.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for Dimension\n             * @function getTypeUrl\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            Dimension.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/onnx.TensorShapeProto.Dimension\";\n            };\n\n            return Dimension;\n        })();\n\n        return TensorShapeProto;\n    })();\n\n    onnx.TypeProto = (function() {\n\n        /**\n         * Properties of a TypeProto.\n         * @memberof onnx\n         * @interface ITypeProto\n         * @property {onnx.TypeProto.ITensor|null} [tensorType] TypeProto tensorType\n         * @property {onnx.TypeProto.ISequence|null} [sequenceType] TypeProto sequenceType\n         * @property {onnx.TypeProto.IMap|null} [mapType] TypeProto mapType\n         * @property {onnx.TypeProto.IOptional|null} [optionalType] TypeProto optionalType\n         * @property {onnx.TypeProto.ISparseTensor|null} [sparseTensorType] TypeProto sparseTensorType\n         * @property {string|null} [denotation] TypeProto denotation\n         */\n\n        /**\n         * Constructs a new TypeProto.\n         * @memberof onnx\n         * @classdesc Represents a TypeProto.\n         * @implements ITypeProto\n         * @constructor\n         * @param {onnx.ITypeProto=} [properties] Properties to set\n         */\n        function TypeProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TypeProto tensorType.\n         * @member {onnx.TypeProto.ITensor|null|undefined} tensorType\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.tensorType = null;\n\n        /**\n         * TypeProto sequenceType.\n         * @member {onnx.TypeProto.ISequence|null|undefined} sequenceType\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.sequenceType = null;\n\n        /**\n         * TypeProto mapType.\n         * @member {onnx.TypeProto.IMap|null|undefined} mapType\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.mapType = null;\n\n        /**\n         * TypeProto optionalType.\n         * @member {onnx.TypeProto.IOptional|null|undefined} optionalType\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.optionalType = null;\n\n        /**\n         * TypeProto sparseTensorType.\n         * @member {onnx.TypeProto.ISparseTensor|null|undefined} sparseTensorType\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.sparseTensorType = null;\n\n        /**\n         * TypeProto denotation.\n         * @member {string} denotation\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.denotation = \"\";\n\n        // OneOf field names bound to virtual getters and setters\n        var $oneOfFields;\n\n        /**\n         * TypeProto value.\n         * @member {\"tensorType\"|\"sequenceType\"|\"mapType\"|\"optionalType\"|\"sparseTensorType\"|undefined} value\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        Object.defineProperty(TypeProto.prototype, \"value\", {\n            get: $util.oneOfGetter($oneOfFields = [\"tensorType\", \"sequenceType\", \"mapType\", \"optionalType\", \"sparseTensorType\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new TypeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto=} [properties] Properties to set\n         * @returns {onnx.TypeProto} TypeProto instance\n         */\n        TypeProto.create = function create(properties) {\n            return new TypeProto(properties);\n        };\n\n        /**\n         * Encodes the specified TypeProto message. Does not implicitly {@link onnx.TypeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto} message TypeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TypeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.tensorType != null && Object.hasOwnProperty.call(message, \"tensorType\"))\n                $root.onnx.TypeProto.Tensor.encode(message.tensorType, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.sequenceType != null && Object.hasOwnProperty.call(message, \"sequenceType\"))\n                $root.onnx.TypeProto.Sequence.encode(message.sequenceType, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n            if (message.mapType != null && Object.hasOwnProperty.call(message, \"mapType\"))\n                $root.onnx.TypeProto.Map.encode(message.mapType, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.denotation != null && Object.hasOwnProperty.call(message, \"denotation\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.denotation);\n            if (message.sparseTensorType != null && Object.hasOwnProperty.call(message, \"sparseTensorType\"))\n                $root.onnx.TypeProto.SparseTensor.encode(message.sparseTensorType, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\n            if (message.optionalType != null && Object.hasOwnProperty.call(message, \"optionalType\"))\n                $root.onnx.TypeProto.Optional.encode(message.optionalType, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TypeProto message, length delimited. Does not implicitly {@link onnx.TypeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto} message TypeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TypeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TypeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TypeProto} TypeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TypeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.tensorType = $root.onnx.TypeProto.Tensor.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 4: {\n                        message.sequenceType = $root.onnx.TypeProto.Sequence.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 5: {\n                        message.mapType = $root.onnx.TypeProto.Map.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 9: {\n                        message.optionalType = $root.onnx.TypeProto.Optional.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 8: {\n                        message.sparseTensorType = $root.onnx.TypeProto.SparseTensor.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 6: {\n                        message.denotation = reader.string();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TypeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TypeProto} TypeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TypeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TypeProto message.\n         * @function verify\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TypeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            var properties = {};\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\")) {\n                properties.value = 1;\n                {\n                    var error = $root.onnx.TypeProto.Tensor.verify(message.tensorType);\n                    if (error)\n                        return \"tensorType.\" + error;\n                }\n            }\n            if (message.sequenceType != null && message.hasOwnProperty(\"sequenceType\")) {\n                if (properties.value === 1)\n                    return \"value: multiple values\";\n                properties.value = 1;\n                {\n                    var error = $root.onnx.TypeProto.Sequence.verify(message.sequenceType);\n                    if (error)\n                        return \"sequenceType.\" + error;\n                }\n            }\n            if (message.mapType != null && message.hasOwnProperty(\"mapType\")) {\n                if (properties.value === 1)\n                    return \"value: multiple values\";\n                properties.value = 1;\n                {\n                    var error = $root.onnx.TypeProto.Map.verify(message.mapType);\n                    if (error)\n                        return \"mapType.\" + error;\n                }\n            }\n            if (message.optionalType != null && message.hasOwnProperty(\"optionalType\")) {\n                if (properties.value === 1)\n                    return \"value: multiple values\";\n                properties.value = 1;\n                {\n                    var error = $root.onnx.TypeProto.Optional.verify(message.optionalType);\n                    if (error)\n                        return \"optionalType.\" + error;\n                }\n            }\n            if (message.sparseTensorType != null && message.hasOwnProperty(\"sparseTensorType\")) {\n                if (properties.value === 1)\n                    return \"value: multiple values\";\n                properties.value = 1;\n                {\n                    var error = $root.onnx.TypeProto.SparseTensor.verify(message.sparseTensorType);\n                    if (error)\n                        return \"sparseTensorType.\" + error;\n                }\n            }\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                if (!$util.isString(message.denotation))\n                    return \"denotation: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a TypeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TypeProto} TypeProto\n         */\n        TypeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TypeProto)\n                return object;\n            var message = new $root.onnx.TypeProto();\n            if (object.tensorType != null) {\n                if (typeof object.tensorType !== \"object\")\n                    throw TypeError(\".onnx.TypeProto.tensorType: object expected\");\n                message.tensorType = $root.onnx.TypeProto.Tensor.fromObject(object.tensorType);\n            }\n            if (object.sequenceType != null) {\n                if (typeof object.sequenceType !== \"object\")\n                    throw TypeError(\".onnx.TypeProto.sequenceType: object expected\");\n                message.sequenceType = $root.onnx.TypeProto.Sequence.fromObject(object.sequenceType);\n            }\n            if (object.mapType != null) {\n                if (typeof object.mapType !== \"object\")\n                    throw TypeError(\".onnx.TypeProto.mapType: object expected\");\n                message.mapType = $root.onnx.TypeProto.Map.fromObject(object.mapType);\n            }\n            if (object.optionalType != null) {\n                if (typeof object.optionalType !== \"object\")\n                    throw TypeError(\".onnx.TypeProto.optionalType: object expected\");\n                message.optionalType = $root.onnx.TypeProto.Optional.fromObject(object.optionalType);\n            }\n            if (object.sparseTensorType != null) {\n                if (typeof object.sparseTensorType !== \"object\")\n                    throw TypeError(\".onnx.TypeProto.sparseTensorType: object expected\");\n                message.sparseTensorType = $root.onnx.TypeProto.SparseTensor.fromObject(object.sparseTensorType);\n            }\n            if (object.denotation != null)\n                message.denotation = String(object.denotation);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TypeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.TypeProto} message TypeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TypeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults)\n                object.denotation = \"\";\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\")) {\n                object.tensorType = $root.onnx.TypeProto.Tensor.toObject(message.tensorType, options);\n                if (options.oneofs)\n                    object.value = \"tensorType\";\n            }\n            if (message.sequenceType != null && message.hasOwnProperty(\"sequenceType\")) {\n                object.sequenceType = $root.onnx.TypeProto.Sequence.toObject(message.sequenceType, options);\n                if (options.oneofs)\n                    object.value = \"sequenceType\";\n            }\n            if (message.mapType != null && message.hasOwnProperty(\"mapType\")) {\n                object.mapType = $root.onnx.TypeProto.Map.toObject(message.mapType, options);\n                if (options.oneofs)\n                    object.value = \"mapType\";\n            }\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                object.denotation = message.denotation;\n            if (message.sparseTensorType != null && message.hasOwnProperty(\"sparseTensorType\")) {\n                object.sparseTensorType = $root.onnx.TypeProto.SparseTensor.toObject(message.sparseTensorType, options);\n                if (options.oneofs)\n                    object.value = \"sparseTensorType\";\n            }\n            if (message.optionalType != null && message.hasOwnProperty(\"optionalType\")) {\n                object.optionalType = $root.onnx.TypeProto.Optional.toObject(message.optionalType, options);\n                if (options.oneofs)\n                    object.value = \"optionalType\";\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TypeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TypeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TypeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for TypeProto\n         * @function getTypeUrl\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        TypeProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.TypeProto\";\n        };\n\n        TypeProto.Tensor = (function() {\n\n            /**\n             * Properties of a Tensor.\n             * @memberof onnx.TypeProto\n             * @interface ITensor\n             * @property {number|null} [elemType] Tensor elemType\n             * @property {onnx.ITensorShapeProto|null} [shape] Tensor shape\n             */\n\n            /**\n             * Constructs a new Tensor.\n             * @memberof onnx.TypeProto\n             * @classdesc Represents a Tensor.\n             * @implements ITensor\n             * @constructor\n             * @param {onnx.TypeProto.ITensor=} [properties] Properties to set\n             */\n            function Tensor(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Tensor elemType.\n             * @member {number} elemType\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             */\n            Tensor.prototype.elemType = 0;\n\n            /**\n             * Tensor shape.\n             * @member {onnx.ITensorShapeProto|null|undefined} shape\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             */\n            Tensor.prototype.shape = null;\n\n            /**\n             * Creates a new Tensor instance using the specified properties.\n             * @function create\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor=} [properties] Properties to set\n             * @returns {onnx.TypeProto.Tensor} Tensor instance\n             */\n            Tensor.create = function create(properties) {\n                return new Tensor(properties);\n            };\n\n            /**\n             * Encodes the specified Tensor message. Does not implicitly {@link onnx.TypeProto.Tensor.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor} message Tensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Tensor.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.elemType != null && Object.hasOwnProperty.call(message, \"elemType\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.elemType);\n                if (message.shape != null && Object.hasOwnProperty.call(message, \"shape\"))\n                    $root.onnx.TensorShapeProto.encode(message.shape, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Tensor message, length delimited. Does not implicitly {@link onnx.TypeProto.Tensor.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor} message Tensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Tensor.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Tensor message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Tensor.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto.Tensor();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1: {\n                            message.elemType = reader.int32();\n                            break;\n                        }\n                    case 2: {\n                            message.shape = $root.onnx.TensorShapeProto.decode(reader, reader.uint32());\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Tensor message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Tensor.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Tensor message.\n             * @function verify\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Tensor.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    if (!$util.isInteger(message.elemType))\n                        return \"elemType: integer expected\";\n                if (message.shape != null && message.hasOwnProperty(\"shape\")) {\n                    var error = $root.onnx.TensorShapeProto.verify(message.shape);\n                    if (error)\n                        return \"shape.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a Tensor message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             */\n            Tensor.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TypeProto.Tensor)\n                    return object;\n                var message = new $root.onnx.TypeProto.Tensor();\n                if (object.elemType != null)\n                    message.elemType = object.elemType | 0;\n                if (object.shape != null) {\n                    if (typeof object.shape !== \"object\")\n                        throw TypeError(\".onnx.TypeProto.Tensor.shape: object expected\");\n                    message.shape = $root.onnx.TensorShapeProto.fromObject(object.shape);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Tensor message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.Tensor} message Tensor\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Tensor.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    object.elemType = 0;\n                    object.shape = null;\n                }\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    object.elemType = message.elemType;\n                if (message.shape != null && message.hasOwnProperty(\"shape\"))\n                    object.shape = $root.onnx.TensorShapeProto.toObject(message.shape, options);\n                return object;\n            };\n\n            /**\n             * Converts this Tensor to JSON.\n             * @function toJSON\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Tensor.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for Tensor\n             * @function getTypeUrl\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            Tensor.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/onnx.TypeProto.Tensor\";\n            };\n\n            return Tensor;\n        })();\n\n        TypeProto.Sequence = (function() {\n\n            /**\n             * Properties of a Sequence.\n             * @memberof onnx.TypeProto\n             * @interface ISequence\n             * @property {onnx.ITypeProto|null} [elemType] Sequence elemType\n             */\n\n            /**\n             * Constructs a new Sequence.\n             * @memberof onnx.TypeProto\n             * @classdesc Represents a Sequence.\n             * @implements ISequence\n             * @constructor\n             * @param {onnx.TypeProto.ISequence=} [properties] Properties to set\n             */\n            function Sequence(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Sequence elemType.\n             * @member {onnx.ITypeProto|null|undefined} elemType\n             * @memberof onnx.TypeProto.Sequence\n             * @instance\n             */\n            Sequence.prototype.elemType = null;\n\n            /**\n             * Creates a new Sequence instance using the specified properties.\n             * @function create\n             * @memberof onnx.TypeProto.Sequence\n             * @static\n             * @param {onnx.TypeProto.ISequence=} [properties] Properties to set\n             * @returns {onnx.TypeProto.Sequence} Sequence instance\n             */\n            Sequence.create = function create(properties) {\n                return new Sequence(properties);\n            };\n\n            /**\n             * Encodes the specified Sequence message. Does not implicitly {@link onnx.TypeProto.Sequence.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TypeProto.Sequence\n             * @static\n             * @param {onnx.TypeProto.ISequence} message Sequence message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Sequence.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.elemType != null && Object.hasOwnProperty.call(message, \"elemType\"))\n                    $root.onnx.TypeProto.encode(message.elemType, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Sequence message, length delimited. Does not implicitly {@link onnx.TypeProto.Sequence.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TypeProto.Sequence\n             * @static\n             * @param {onnx.TypeProto.ISequence} message Sequence message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Sequence.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Sequence message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TypeProto.Sequence\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TypeProto.Sequence} Sequence\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Sequence.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto.Sequence();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1: {\n                            message.elemType = $root.onnx.TypeProto.decode(reader, reader.uint32());\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Sequence message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TypeProto.Sequence\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TypeProto.Sequence} Sequence\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Sequence.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Sequence message.\n             * @function verify\n             * @memberof onnx.TypeProto.Sequence\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Sequence.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\")) {\n                    var error = $root.onnx.TypeProto.verify(message.elemType);\n                    if (error)\n                        return \"elemType.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a Sequence message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TypeProto.Sequence\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TypeProto.Sequence} Sequence\n             */\n            Sequence.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TypeProto.Sequence)\n                    return object;\n                var message = new $root.onnx.TypeProto.Sequence();\n                if (object.elemType != null) {\n                    if (typeof object.elemType !== \"object\")\n                        throw TypeError(\".onnx.TypeProto.Sequence.elemType: object expected\");\n                    message.elemType = $root.onnx.TypeProto.fromObject(object.elemType);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Sequence message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TypeProto.Sequence\n             * @static\n             * @param {onnx.TypeProto.Sequence} message Sequence\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Sequence.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults)\n                    object.elemType = null;\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    object.elemType = $root.onnx.TypeProto.toObject(message.elemType, options);\n                return object;\n            };\n\n            /**\n             * Converts this Sequence to JSON.\n             * @function toJSON\n             * @memberof onnx.TypeProto.Sequence\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Sequence.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for Sequence\n             * @function getTypeUrl\n             * @memberof onnx.TypeProto.Sequence\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            Sequence.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/onnx.TypeProto.Sequence\";\n            };\n\n            return Sequence;\n        })();\n\n        TypeProto.Map = (function() {\n\n            /**\n             * Properties of a Map.\n             * @memberof onnx.TypeProto\n             * @interface IMap\n             * @property {number|null} [keyType] Map keyType\n             * @property {onnx.ITypeProto|null} [valueType] Map valueType\n             */\n\n            /**\n             * Constructs a new Map.\n             * @memberof onnx.TypeProto\n             * @classdesc Represents a Map.\n             * @implements IMap\n             * @constructor\n             * @param {onnx.TypeProto.IMap=} [properties] Properties to set\n             */\n            function Map(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Map keyType.\n             * @member {number} keyType\n             * @memberof onnx.TypeProto.Map\n             * @instance\n             */\n            Map.prototype.keyType = 0;\n\n            /**\n             * Map valueType.\n             * @member {onnx.ITypeProto|null|undefined} valueType\n             * @memberof onnx.TypeProto.Map\n             * @instance\n             */\n            Map.prototype.valueType = null;\n\n            /**\n             * Creates a new Map instance using the specified properties.\n             * @function create\n             * @memberof onnx.TypeProto.Map\n             * @static\n             * @param {onnx.TypeProto.IMap=} [properties] Properties to set\n             * @returns {onnx.TypeProto.Map} Map instance\n             */\n            Map.create = function create(properties) {\n                return new Map(properties);\n            };\n\n            /**\n             * Encodes the specified Map message. Does not implicitly {@link onnx.TypeProto.Map.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TypeProto.Map\n             * @static\n             * @param {onnx.TypeProto.IMap} message Map message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Map.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.keyType != null && Object.hasOwnProperty.call(message, \"keyType\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.keyType);\n                if (message.valueType != null && Object.hasOwnProperty.call(message, \"valueType\"))\n                    $root.onnx.TypeProto.encode(message.valueType, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Map message, length delimited. Does not implicitly {@link onnx.TypeProto.Map.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TypeProto.Map\n             * @static\n             * @param {onnx.TypeProto.IMap} message Map message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Map.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Map message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TypeProto.Map\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TypeProto.Map} Map\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Map.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto.Map();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1: {\n                            message.keyType = reader.int32();\n                            break;\n                        }\n                    case 2: {\n                            message.valueType = $root.onnx.TypeProto.decode(reader, reader.uint32());\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Map message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TypeProto.Map\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TypeProto.Map} Map\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Map.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Map message.\n             * @function verify\n             * @memberof onnx.TypeProto.Map\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Map.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.keyType != null && message.hasOwnProperty(\"keyType\"))\n                    if (!$util.isInteger(message.keyType))\n                        return \"keyType: integer expected\";\n                if (message.valueType != null && message.hasOwnProperty(\"valueType\")) {\n                    var error = $root.onnx.TypeProto.verify(message.valueType);\n                    if (error)\n                        return \"valueType.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a Map message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TypeProto.Map\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TypeProto.Map} Map\n             */\n            Map.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TypeProto.Map)\n                    return object;\n                var message = new $root.onnx.TypeProto.Map();\n                if (object.keyType != null)\n                    message.keyType = object.keyType | 0;\n                if (object.valueType != null) {\n                    if (typeof object.valueType !== \"object\")\n                        throw TypeError(\".onnx.TypeProto.Map.valueType: object expected\");\n                    message.valueType = $root.onnx.TypeProto.fromObject(object.valueType);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Map message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TypeProto.Map\n             * @static\n             * @param {onnx.TypeProto.Map} message Map\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Map.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    object.keyType = 0;\n                    object.valueType = null;\n                }\n                if (message.keyType != null && message.hasOwnProperty(\"keyType\"))\n                    object.keyType = message.keyType;\n                if (message.valueType != null && message.hasOwnProperty(\"valueType\"))\n                    object.valueType = $root.onnx.TypeProto.toObject(message.valueType, options);\n                return object;\n            };\n\n            /**\n             * Converts this Map to JSON.\n             * @function toJSON\n             * @memberof onnx.TypeProto.Map\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Map.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for Map\n             * @function getTypeUrl\n             * @memberof onnx.TypeProto.Map\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            Map.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/onnx.TypeProto.Map\";\n            };\n\n            return Map;\n        })();\n\n        TypeProto.Optional = (function() {\n\n            /**\n             * Properties of an Optional.\n             * @memberof onnx.TypeProto\n             * @interface IOptional\n             * @property {onnx.ITypeProto|null} [elemType] Optional elemType\n             */\n\n            /**\n             * Constructs a new Optional.\n             * @memberof onnx.TypeProto\n             * @classdesc Represents an Optional.\n             * @implements IOptional\n             * @constructor\n             * @param {onnx.TypeProto.IOptional=} [properties] Properties to set\n             */\n            function Optional(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Optional elemType.\n             * @member {onnx.ITypeProto|null|undefined} elemType\n             * @memberof onnx.TypeProto.Optional\n             * @instance\n             */\n            Optional.prototype.elemType = null;\n\n            /**\n             * Creates a new Optional instance using the specified properties.\n             * @function create\n             * @memberof onnx.TypeProto.Optional\n             * @static\n             * @param {onnx.TypeProto.IOptional=} [properties] Properties to set\n             * @returns {onnx.TypeProto.Optional} Optional instance\n             */\n            Optional.create = function create(properties) {\n                return new Optional(properties);\n            };\n\n            /**\n             * Encodes the specified Optional message. Does not implicitly {@link onnx.TypeProto.Optional.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TypeProto.Optional\n             * @static\n             * @param {onnx.TypeProto.IOptional} message Optional message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Optional.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.elemType != null && Object.hasOwnProperty.call(message, \"elemType\"))\n                    $root.onnx.TypeProto.encode(message.elemType, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Optional message, length delimited. Does not implicitly {@link onnx.TypeProto.Optional.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TypeProto.Optional\n             * @static\n             * @param {onnx.TypeProto.IOptional} message Optional message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Optional.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes an Optional message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TypeProto.Optional\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TypeProto.Optional} Optional\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Optional.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto.Optional();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1: {\n                            message.elemType = $root.onnx.TypeProto.decode(reader, reader.uint32());\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes an Optional message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TypeProto.Optional\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TypeProto.Optional} Optional\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Optional.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies an Optional message.\n             * @function verify\n             * @memberof onnx.TypeProto.Optional\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Optional.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\")) {\n                    var error = $root.onnx.TypeProto.verify(message.elemType);\n                    if (error)\n                        return \"elemType.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates an Optional message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TypeProto.Optional\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TypeProto.Optional} Optional\n             */\n            Optional.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TypeProto.Optional)\n                    return object;\n                var message = new $root.onnx.TypeProto.Optional();\n                if (object.elemType != null) {\n                    if (typeof object.elemType !== \"object\")\n                        throw TypeError(\".onnx.TypeProto.Optional.elemType: object expected\");\n                    message.elemType = $root.onnx.TypeProto.fromObject(object.elemType);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from an Optional message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TypeProto.Optional\n             * @static\n             * @param {onnx.TypeProto.Optional} message Optional\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Optional.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults)\n                    object.elemType = null;\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    object.elemType = $root.onnx.TypeProto.toObject(message.elemType, options);\n                return object;\n            };\n\n            /**\n             * Converts this Optional to JSON.\n             * @function toJSON\n             * @memberof onnx.TypeProto.Optional\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Optional.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for Optional\n             * @function getTypeUrl\n             * @memberof onnx.TypeProto.Optional\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            Optional.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/onnx.TypeProto.Optional\";\n            };\n\n            return Optional;\n        })();\n\n        TypeProto.SparseTensor = (function() {\n\n            /**\n             * Properties of a SparseTensor.\n             * @memberof onnx.TypeProto\n             * @interface ISparseTensor\n             * @property {number|null} [elemType] SparseTensor elemType\n             * @property {onnx.ITensorShapeProto|null} [shape] SparseTensor shape\n             */\n\n            /**\n             * Constructs a new SparseTensor.\n             * @memberof onnx.TypeProto\n             * @classdesc Represents a SparseTensor.\n             * @implements ISparseTensor\n             * @constructor\n             * @param {onnx.TypeProto.ISparseTensor=} [properties] Properties to set\n             */\n            function SparseTensor(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * SparseTensor elemType.\n             * @member {number} elemType\n             * @memberof onnx.TypeProto.SparseTensor\n             * @instance\n             */\n            SparseTensor.prototype.elemType = 0;\n\n            /**\n             * SparseTensor shape.\n             * @member {onnx.ITensorShapeProto|null|undefined} shape\n             * @memberof onnx.TypeProto.SparseTensor\n             * @instance\n             */\n            SparseTensor.prototype.shape = null;\n\n            /**\n             * Creates a new SparseTensor instance using the specified properties.\n             * @function create\n             * @memberof onnx.TypeProto.SparseTensor\n             * @static\n             * @param {onnx.TypeProto.ISparseTensor=} [properties] Properties to set\n             * @returns {onnx.TypeProto.SparseTensor} SparseTensor instance\n             */\n            SparseTensor.create = function create(properties) {\n                return new SparseTensor(properties);\n            };\n\n            /**\n             * Encodes the specified SparseTensor message. Does not implicitly {@link onnx.TypeProto.SparseTensor.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TypeProto.SparseTensor\n             * @static\n             * @param {onnx.TypeProto.ISparseTensor} message SparseTensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            SparseTensor.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.elemType != null && Object.hasOwnProperty.call(message, \"elemType\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.elemType);\n                if (message.shape != null && Object.hasOwnProperty.call(message, \"shape\"))\n                    $root.onnx.TensorShapeProto.encode(message.shape, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified SparseTensor message, length delimited. Does not implicitly {@link onnx.TypeProto.SparseTensor.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TypeProto.SparseTensor\n             * @static\n             * @param {onnx.TypeProto.ISparseTensor} message SparseTensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            SparseTensor.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a SparseTensor message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TypeProto.SparseTensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TypeProto.SparseTensor} SparseTensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            SparseTensor.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto.SparseTensor();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1: {\n                            message.elemType = reader.int32();\n                            break;\n                        }\n                    case 2: {\n                            message.shape = $root.onnx.TensorShapeProto.decode(reader, reader.uint32());\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a SparseTensor message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TypeProto.SparseTensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TypeProto.SparseTensor} SparseTensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            SparseTensor.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a SparseTensor message.\n             * @function verify\n             * @memberof onnx.TypeProto.SparseTensor\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            SparseTensor.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    if (!$util.isInteger(message.elemType))\n                        return \"elemType: integer expected\";\n                if (message.shape != null && message.hasOwnProperty(\"shape\")) {\n                    var error = $root.onnx.TensorShapeProto.verify(message.shape);\n                    if (error)\n                        return \"shape.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a SparseTensor message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TypeProto.SparseTensor\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TypeProto.SparseTensor} SparseTensor\n             */\n            SparseTensor.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TypeProto.SparseTensor)\n                    return object;\n                var message = new $root.onnx.TypeProto.SparseTensor();\n                if (object.elemType != null)\n                    message.elemType = object.elemType | 0;\n                if (object.shape != null) {\n                    if (typeof object.shape !== \"object\")\n                        throw TypeError(\".onnx.TypeProto.SparseTensor.shape: object expected\");\n                    message.shape = $root.onnx.TensorShapeProto.fromObject(object.shape);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a SparseTensor message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TypeProto.SparseTensor\n             * @static\n             * @param {onnx.TypeProto.SparseTensor} message SparseTensor\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            SparseTensor.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    object.elemType = 0;\n                    object.shape = null;\n                }\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    object.elemType = message.elemType;\n                if (message.shape != null && message.hasOwnProperty(\"shape\"))\n                    object.shape = $root.onnx.TensorShapeProto.toObject(message.shape, options);\n                return object;\n            };\n\n            /**\n             * Converts this SparseTensor to JSON.\n             * @function toJSON\n             * @memberof onnx.TypeProto.SparseTensor\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            SparseTensor.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for SparseTensor\n             * @function getTypeUrl\n             * @memberof onnx.TypeProto.SparseTensor\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            SparseTensor.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/onnx.TypeProto.SparseTensor\";\n            };\n\n            return SparseTensor;\n        })();\n\n        return TypeProto;\n    })();\n\n    onnx.OperatorSetIdProto = (function() {\n\n        /**\n         * Properties of an OperatorSetIdProto.\n         * @memberof onnx\n         * @interface IOperatorSetIdProto\n         * @property {string|null} [domain] OperatorSetIdProto domain\n         * @property {number|Long|null} [version] OperatorSetIdProto version\n         */\n\n        /**\n         * Constructs a new OperatorSetIdProto.\n         * @memberof onnx\n         * @classdesc Represents an OperatorSetIdProto.\n         * @implements IOperatorSetIdProto\n         * @constructor\n         * @param {onnx.IOperatorSetIdProto=} [properties] Properties to set\n         */\n        function OperatorSetIdProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * OperatorSetIdProto domain.\n         * @member {string} domain\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         */\n        OperatorSetIdProto.prototype.domain = \"\";\n\n        /**\n         * OperatorSetIdProto version.\n         * @member {number|Long} version\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         */\n        OperatorSetIdProto.prototype.version = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * Creates a new OperatorSetIdProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto=} [properties] Properties to set\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto instance\n         */\n        OperatorSetIdProto.create = function create(properties) {\n            return new OperatorSetIdProto(properties);\n        };\n\n        /**\n         * Encodes the specified OperatorSetIdProto message. Does not implicitly {@link onnx.OperatorSetIdProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto} message OperatorSetIdProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        OperatorSetIdProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.domain != null && Object.hasOwnProperty.call(message, \"domain\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.domain);\n            if (message.version != null && Object.hasOwnProperty.call(message, \"version\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.version);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified OperatorSetIdProto message, length delimited. Does not implicitly {@link onnx.OperatorSetIdProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto} message OperatorSetIdProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        OperatorSetIdProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an OperatorSetIdProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        OperatorSetIdProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.OperatorSetIdProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.domain = reader.string();\n                        break;\n                    }\n                case 2: {\n                        message.version = reader.int64();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an OperatorSetIdProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        OperatorSetIdProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an OperatorSetIdProto message.\n         * @function verify\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        OperatorSetIdProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (!$util.isInteger(message.version) && !(message.version && $util.isInteger(message.version.low) && $util.isInteger(message.version.high)))\n                    return \"version: integer|Long expected\";\n            return null;\n        };\n\n        /**\n         * Creates an OperatorSetIdProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         */\n        OperatorSetIdProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.OperatorSetIdProto)\n                return object;\n            var message = new $root.onnx.OperatorSetIdProto();\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.version != null)\n                if ($util.Long)\n                    (message.version = $util.Long.fromValue(object.version)).unsigned = false;\n                else if (typeof object.version === \"string\")\n                    message.version = parseInt(object.version, 10);\n                else if (typeof object.version === \"number\")\n                    message.version = object.version;\n                else if (typeof object.version === \"object\")\n                    message.version = new $util.LongBits(object.version.low >>> 0, object.version.high >>> 0).toNumber();\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an OperatorSetIdProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.OperatorSetIdProto} message OperatorSetIdProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        OperatorSetIdProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.domain = \"\";\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.version = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.version = options.longs === String ? \"0\" : 0;\n            }\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (typeof message.version === \"number\")\n                    object.version = options.longs === String ? String(message.version) : message.version;\n                else\n                    object.version = options.longs === String ? $util.Long.prototype.toString.call(message.version) : options.longs === Number ? new $util.LongBits(message.version.low >>> 0, message.version.high >>> 0).toNumber() : message.version;\n            return object;\n        };\n\n        /**\n         * Converts this OperatorSetIdProto to JSON.\n         * @function toJSON\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        OperatorSetIdProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for OperatorSetIdProto\n         * @function getTypeUrl\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        OperatorSetIdProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.OperatorSetIdProto\";\n        };\n\n        return OperatorSetIdProto;\n    })();\n\n    /**\n     * OperatorStatus enum.\n     * @name onnx.OperatorStatus\n     * @enum {number}\n     * @property {number} EXPERIMENTAL=0 EXPERIMENTAL value\n     * @property {number} STABLE=1 STABLE value\n     */\n    onnx.OperatorStatus = (function() {\n        var valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"EXPERIMENTAL\"] = 0;\n        values[valuesById[1] = \"STABLE\"] = 1;\n        return values;\n    })();\n\n    onnx.FunctionProto = (function() {\n\n        /**\n         * Properties of a FunctionProto.\n         * @memberof onnx\n         * @interface IFunctionProto\n         * @property {string|null} [name] FunctionProto name\n         * @property {Array.<string>|null} [input] FunctionProto input\n         * @property {Array.<string>|null} [output] FunctionProto output\n         * @property {Array.<string>|null} [attribute] FunctionProto attribute\n         * @property {Array.<onnx.IAttributeProto>|null} [attributeProto] FunctionProto attributeProto\n         * @property {Array.<onnx.INodeProto>|null} [node] FunctionProto node\n         * @property {string|null} [docString] FunctionProto docString\n         * @property {Array.<onnx.IOperatorSetIdProto>|null} [opsetImport] FunctionProto opsetImport\n         * @property {string|null} [domain] FunctionProto domain\n         */\n\n        /**\n         * Constructs a new FunctionProto.\n         * @memberof onnx\n         * @classdesc Represents a FunctionProto.\n         * @implements IFunctionProto\n         * @constructor\n         * @param {onnx.IFunctionProto=} [properties] Properties to set\n         */\n        function FunctionProto(properties) {\n            this.input = [];\n            this.output = [];\n            this.attribute = [];\n            this.attributeProto = [];\n            this.node = [];\n            this.opsetImport = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * FunctionProto name.\n         * @member {string} name\n         * @memberof onnx.FunctionProto\n         * @instance\n         */\n        FunctionProto.prototype.name = \"\";\n\n        /**\n         * FunctionProto input.\n         * @member {Array.<string>} input\n         * @memberof onnx.FunctionProto\n         * @instance\n         */\n        FunctionProto.prototype.input = $util.emptyArray;\n\n        /**\n         * FunctionProto output.\n         * @member {Array.<string>} output\n         * @memberof onnx.FunctionProto\n         * @instance\n         */\n        FunctionProto.prototype.output = $util.emptyArray;\n\n        /**\n         * FunctionProto attribute.\n         * @member {Array.<string>} attribute\n         * @memberof onnx.FunctionProto\n         * @instance\n         */\n        FunctionProto.prototype.attribute = $util.emptyArray;\n\n        /**\n         * FunctionProto attributeProto.\n         * @member {Array.<onnx.IAttributeProto>} attributeProto\n         * @memberof onnx.FunctionProto\n         * @instance\n         */\n        FunctionProto.prototype.attributeProto = $util.emptyArray;\n\n        /**\n         * FunctionProto node.\n         * @member {Array.<onnx.INodeProto>} node\n         * @memberof onnx.FunctionProto\n         * @instance\n         */\n        FunctionProto.prototype.node = $util.emptyArray;\n\n        /**\n         * FunctionProto docString.\n         * @member {string} docString\n         * @memberof onnx.FunctionProto\n         * @instance\n         */\n        FunctionProto.prototype.docString = \"\";\n\n        /**\n         * FunctionProto opsetImport.\n         * @member {Array.<onnx.IOperatorSetIdProto>} opsetImport\n         * @memberof onnx.FunctionProto\n         * @instance\n         */\n        FunctionProto.prototype.opsetImport = $util.emptyArray;\n\n        /**\n         * FunctionProto domain.\n         * @member {string} domain\n         * @memberof onnx.FunctionProto\n         * @instance\n         */\n        FunctionProto.prototype.domain = \"\";\n\n        /**\n         * Creates a new FunctionProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.FunctionProto\n         * @static\n         * @param {onnx.IFunctionProto=} [properties] Properties to set\n         * @returns {onnx.FunctionProto} FunctionProto instance\n         */\n        FunctionProto.create = function create(properties) {\n            return new FunctionProto(properties);\n        };\n\n        /**\n         * Encodes the specified FunctionProto message. Does not implicitly {@link onnx.FunctionProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.FunctionProto\n         * @static\n         * @param {onnx.IFunctionProto} message FunctionProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        FunctionProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.input != null && message.input.length)\n                for (var i = 0; i < message.input.length; ++i)\n                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.input[i]);\n            if (message.output != null && message.output.length)\n                for (var i = 0; i < message.output.length; ++i)\n                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.output[i]);\n            if (message.attribute != null && message.attribute.length)\n                for (var i = 0; i < message.attribute.length; ++i)\n                    writer.uint32(/* id 6, wireType 2 =*/50).string(message.attribute[i]);\n            if (message.node != null && message.node.length)\n                for (var i = 0; i < message.node.length; ++i)\n                    $root.onnx.NodeProto.encode(message.node[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n            if (message.docString != null && Object.hasOwnProperty.call(message, \"docString\"))\n                writer.uint32(/* id 8, wireType 2 =*/66).string(message.docString);\n            if (message.opsetImport != null && message.opsetImport.length)\n                for (var i = 0; i < message.opsetImport.length; ++i)\n                    $root.onnx.OperatorSetIdProto.encode(message.opsetImport[i], writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();\n            if (message.domain != null && Object.hasOwnProperty.call(message, \"domain\"))\n                writer.uint32(/* id 10, wireType 2 =*/82).string(message.domain);\n            if (message.attributeProto != null && message.attributeProto.length)\n                for (var i = 0; i < message.attributeProto.length; ++i)\n                    $root.onnx.AttributeProto.encode(message.attributeProto[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified FunctionProto message, length delimited. Does not implicitly {@link onnx.FunctionProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.FunctionProto\n         * @static\n         * @param {onnx.IFunctionProto} message FunctionProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        FunctionProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a FunctionProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.FunctionProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.FunctionProto} FunctionProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        FunctionProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.FunctionProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.name = reader.string();\n                        break;\n                    }\n                case 4: {\n                        if (!(message.input && message.input.length))\n                            message.input = [];\n                        message.input.push(reader.string());\n                        break;\n                    }\n                case 5: {\n                        if (!(message.output && message.output.length))\n                            message.output = [];\n                        message.output.push(reader.string());\n                        break;\n                    }\n                case 6: {\n                        if (!(message.attribute && message.attribute.length))\n                            message.attribute = [];\n                        message.attribute.push(reader.string());\n                        break;\n                    }\n                case 11: {\n                        if (!(message.attributeProto && message.attributeProto.length))\n                            message.attributeProto = [];\n                        message.attributeProto.push($root.onnx.AttributeProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 7: {\n                        if (!(message.node && message.node.length))\n                            message.node = [];\n                        message.node.push($root.onnx.NodeProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 8: {\n                        message.docString = reader.string();\n                        break;\n                    }\n                case 9: {\n                        if (!(message.opsetImport && message.opsetImport.length))\n                            message.opsetImport = [];\n                        message.opsetImport.push($root.onnx.OperatorSetIdProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 10: {\n                        message.domain = reader.string();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a FunctionProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.FunctionProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.FunctionProto} FunctionProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        FunctionProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a FunctionProto message.\n         * @function verify\n         * @memberof onnx.FunctionProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        FunctionProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.input != null && message.hasOwnProperty(\"input\")) {\n                if (!Array.isArray(message.input))\n                    return \"input: array expected\";\n                for (var i = 0; i < message.input.length; ++i)\n                    if (!$util.isString(message.input[i]))\n                        return \"input: string[] expected\";\n            }\n            if (message.output != null && message.hasOwnProperty(\"output\")) {\n                if (!Array.isArray(message.output))\n                    return \"output: array expected\";\n                for (var i = 0; i < message.output.length; ++i)\n                    if (!$util.isString(message.output[i]))\n                        return \"output: string[] expected\";\n            }\n            if (message.attribute != null && message.hasOwnProperty(\"attribute\")) {\n                if (!Array.isArray(message.attribute))\n                    return \"attribute: array expected\";\n                for (var i = 0; i < message.attribute.length; ++i)\n                    if (!$util.isString(message.attribute[i]))\n                        return \"attribute: string[] expected\";\n            }\n            if (message.attributeProto != null && message.hasOwnProperty(\"attributeProto\")) {\n                if (!Array.isArray(message.attributeProto))\n                    return \"attributeProto: array expected\";\n                for (var i = 0; i < message.attributeProto.length; ++i) {\n                    var error = $root.onnx.AttributeProto.verify(message.attributeProto[i]);\n                    if (error)\n                        return \"attributeProto.\" + error;\n                }\n            }\n            if (message.node != null && message.hasOwnProperty(\"node\")) {\n                if (!Array.isArray(message.node))\n                    return \"node: array expected\";\n                for (var i = 0; i < message.node.length; ++i) {\n                    var error = $root.onnx.NodeProto.verify(message.node[i]);\n                    if (error)\n                        return \"node.\" + error;\n                }\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.opsetImport != null && message.hasOwnProperty(\"opsetImport\")) {\n                if (!Array.isArray(message.opsetImport))\n                    return \"opsetImport: array expected\";\n                for (var i = 0; i < message.opsetImport.length; ++i) {\n                    var error = $root.onnx.OperatorSetIdProto.verify(message.opsetImport[i]);\n                    if (error)\n                        return \"opsetImport.\" + error;\n                }\n            }\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a FunctionProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.FunctionProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.FunctionProto} FunctionProto\n         */\n        FunctionProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.FunctionProto)\n                return object;\n            var message = new $root.onnx.FunctionProto();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.input) {\n                if (!Array.isArray(object.input))\n                    throw TypeError(\".onnx.FunctionProto.input: array expected\");\n                message.input = [];\n                for (var i = 0; i < object.input.length; ++i)\n                    message.input[i] = String(object.input[i]);\n            }\n            if (object.output) {\n                if (!Array.isArray(object.output))\n                    throw TypeError(\".onnx.FunctionProto.output: array expected\");\n                message.output = [];\n                for (var i = 0; i < object.output.length; ++i)\n                    message.output[i] = String(object.output[i]);\n            }\n            if (object.attribute) {\n                if (!Array.isArray(object.attribute))\n                    throw TypeError(\".onnx.FunctionProto.attribute: array expected\");\n                message.attribute = [];\n                for (var i = 0; i < object.attribute.length; ++i)\n                    message.attribute[i] = String(object.attribute[i]);\n            }\n            if (object.attributeProto) {\n                if (!Array.isArray(object.attributeProto))\n                    throw TypeError(\".onnx.FunctionProto.attributeProto: array expected\");\n                message.attributeProto = [];\n                for (var i = 0; i < object.attributeProto.length; ++i) {\n                    if (typeof object.attributeProto[i] !== \"object\")\n                        throw TypeError(\".onnx.FunctionProto.attributeProto: object expected\");\n                    message.attributeProto[i] = $root.onnx.AttributeProto.fromObject(object.attributeProto[i]);\n                }\n            }\n            if (object.node) {\n                if (!Array.isArray(object.node))\n                    throw TypeError(\".onnx.FunctionProto.node: array expected\");\n                message.node = [];\n                for (var i = 0; i < object.node.length; ++i) {\n                    if (typeof object.node[i] !== \"object\")\n                        throw TypeError(\".onnx.FunctionProto.node: object expected\");\n                    message.node[i] = $root.onnx.NodeProto.fromObject(object.node[i]);\n                }\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.opsetImport) {\n                if (!Array.isArray(object.opsetImport))\n                    throw TypeError(\".onnx.FunctionProto.opsetImport: array expected\");\n                message.opsetImport = [];\n                for (var i = 0; i < object.opsetImport.length; ++i) {\n                    if (typeof object.opsetImport[i] !== \"object\")\n                        throw TypeError(\".onnx.FunctionProto.opsetImport: object expected\");\n                    message.opsetImport[i] = $root.onnx.OperatorSetIdProto.fromObject(object.opsetImport[i]);\n                }\n            }\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a FunctionProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.FunctionProto\n         * @static\n         * @param {onnx.FunctionProto} message FunctionProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        FunctionProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.input = [];\n                object.output = [];\n                object.attribute = [];\n                object.node = [];\n                object.opsetImport = [];\n                object.attributeProto = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.docString = \"\";\n                object.domain = \"\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.input && message.input.length) {\n                object.input = [];\n                for (var j = 0; j < message.input.length; ++j)\n                    object.input[j] = message.input[j];\n            }\n            if (message.output && message.output.length) {\n                object.output = [];\n                for (var j = 0; j < message.output.length; ++j)\n                    object.output[j] = message.output[j];\n            }\n            if (message.attribute && message.attribute.length) {\n                object.attribute = [];\n                for (var j = 0; j < message.attribute.length; ++j)\n                    object.attribute[j] = message.attribute[j];\n            }\n            if (message.node && message.node.length) {\n                object.node = [];\n                for (var j = 0; j < message.node.length; ++j)\n                    object.node[j] = $root.onnx.NodeProto.toObject(message.node[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.opsetImport && message.opsetImport.length) {\n                object.opsetImport = [];\n                for (var j = 0; j < message.opsetImport.length; ++j)\n                    object.opsetImport[j] = $root.onnx.OperatorSetIdProto.toObject(message.opsetImport[j], options);\n            }\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            if (message.attributeProto && message.attributeProto.length) {\n                object.attributeProto = [];\n                for (var j = 0; j < message.attributeProto.length; ++j)\n                    object.attributeProto[j] = $root.onnx.AttributeProto.toObject(message.attributeProto[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this FunctionProto to JSON.\n         * @function toJSON\n         * @memberof onnx.FunctionProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        FunctionProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for FunctionProto\n         * @function getTypeUrl\n         * @memberof onnx.FunctionProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        FunctionProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.FunctionProto\";\n        };\n\n        return FunctionProto;\n    })();\n\n    return onnx;\n})();\n\nmodule.exports = $root;\n","var _scriptDir,e=(_scriptDir=\"undefined\"!=typeof document&&document.currentScript?document.currentScript.src:void 0,\"undefined\"!=typeof __filename&&(_scriptDir=_scriptDir||__filename),function(e={}){function t(){return F.buffer!=k.buffer&&W(),k}function r(){return F.buffer!=k.buffer&&W(),x}function n(){return F.buffer!=k.buffer&&W(),Y}function a(){return F.buffer!=k.buffer&&W(),H}function o(){return F.buffer!=k.buffer&&W(),P}var i,u,s=e;s.ready=new Promise(((e,t)=>{i=e,u=t}));var f,c,l,d=Object.assign({},s),h=\"./this.program\",m=(e,t)=>{throw t},p=\"object\"==typeof window,g=\"function\"==typeof importScripts,b=\"object\"==typeof process&&\"object\"==typeof process.versions&&\"string\"==typeof process.versions.node,v=s.ENVIRONMENT_IS_PTHREAD||!1,_=\"\";function y(e){return s.locateFile?s.locateFile(e,_):_+e}if(b){var w=require(\"fs\"),O=require(\"path\");let e;_=g?O.dirname(_)+\"/\":__dirname+\"/\",f=(e,t)=>(e=e.startsWith(\"file://\")?new URL(e):O.normalize(e),w.readFileSync(e,t?void 0:\"utf8\")),l=e=>((e=f(e,!0)).buffer||(e=new Uint8Array(e)),e),c=(e,t,r,n=!0)=>{e=e.startsWith(\"file://\")?new URL(e):O.normalize(e),w.readFile(e,n?void 0:\"utf8\",((e,a)=>{e?r(e):t(n?a.buffer:a)}))},!s.thisProgram&&1<process.argv.length&&(h=process.argv[1].replace(/\\\\/g,\"/\")),process.argv.slice(2),m=(e,t)=>{throw process.exitCode=e,t},s.inspect=()=>\"[Emscripten Module object]\";try{e=require(\"worker_threads\")}catch(e){throw console.error('The \"worker_threads\" module is not supported in this node.js build - perhaps a newer version is needed?'),e}global.Worker=e.Worker}else(p||g)&&(g?_=self.location.href:\"undefined\"!=typeof document&&document.currentScript&&(_=document.currentScript.src),_scriptDir&&(_=_scriptDir),_=0!==_.indexOf(\"blob:\")?_.substr(0,_.replace(/[?#].*/,\"\").lastIndexOf(\"/\")+1):\"\",b||(f=e=>{var t=new XMLHttpRequest;return t.open(\"GET\",e,!1),t.send(null),t.responseText},g&&(l=e=>{var t=new XMLHttpRequest;return t.open(\"GET\",e,!1),t.responseType=\"arraybuffer\",t.send(null),new Uint8Array(t.response)}),c=(e,t,r)=>{var n=new XMLHttpRequest;n.open(\"GET\",e,!0),n.responseType=\"arraybuffer\",n.onload=()=>{200==n.status||0==n.status&&n.response?t(n.response):r()},n.onerror=r,n.send(null)}));b&&\"undefined\"==typeof performance&&(global.performance=require(\"perf_hooks\").performance);var M=console.log.bind(console),T=console.error.bind(console);b&&(M=(...e)=>w.writeSync(1,e.join(\" \")+\"\\n\"),T=(...e)=>w.writeSync(2,e.join(\" \")+\"\\n\"));var S,A=s.print||M,E=s.printErr||T;Object.assign(s,d),d=null,s.thisProgram&&(h=s.thisProgram),s.quit&&(m=s.quit),s.wasmBinary&&(S=s.wasmBinary);var R=s.noExitRuntime||!0;\"object\"!=typeof WebAssembly&&ee(\"no native wasm support detected\");var F,D,C,I,k,x,Y,H,P,U=!1;function W(){var e=F.buffer;s.HEAP8=k=new Int8Array(e),s.HEAP16=new Int16Array(e),s.HEAP32=Y=new Int32Array(e),s.HEAPU8=x=new Uint8Array(e),s.HEAPU16=new Uint16Array(e),s.HEAPU32=H=new Uint32Array(e),s.HEAPF32=new Float32Array(e),s.HEAPF64=P=new Float64Array(e)}var G=s.INITIAL_MEMORY||16777216;if(5242880<=G||ee(\"INITIAL_MEMORY should be larger than STACK_SIZE, was \"+G+\"! (STACK_SIZE=5242880)\"),v)F=s.wasmMemory;else if(s.wasmMemory)F=s.wasmMemory;else if(!((F=new WebAssembly.Memory({initial:G/65536,maximum:65536,shared:!0})).buffer instanceof SharedArrayBuffer))throw E(\"requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag\"),b&&E(\"(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and/or recent version)\"),Error(\"bad memory\");W(),G=F.buffer.byteLength;var N,L=[],j=[],z=[],B=0;function q(){return R||0<B}var J,K,X=0,$=null,V=null;function Z(){X++,s.monitorRunDependencies&&s.monitorRunDependencies(X)}function Q(){if(X--,s.monitorRunDependencies&&s.monitorRunDependencies(X),0==X&&(null!==$&&(clearInterval($),$=null),V)){var e=V;V=null,e()}}function ee(e){throw s.onAbort&&s.onAbort(e),E(e=\"Aborted(\"+e+\")\"),U=!0,I=1,e=new WebAssembly.RuntimeError(e+\". Build with -sASSERTIONS for more info.\"),u(e),e}function te(e){return e.startsWith(\"data:application/octet-stream;base64,\")}function re(e){if(e==J&&S)return new Uint8Array(S);if(l)return l(e);throw\"both async and sync fetching of the wasm failed\"}function ne(e,t,r){return function(e){if(!S&&(p||g)){if(\"function\"==typeof fetch&&!e.startsWith(\"file://\"))return fetch(e,{credentials:\"same-origin\"}).then((t=>{if(!t.ok)throw\"failed to load wasm binary file at '\"+e+\"'\";return t.arrayBuffer()})).catch((()=>re(e)));if(c)return new Promise(((t,r)=>{c(e,(e=>t(new Uint8Array(e))),r)}))}return Promise.resolve().then((()=>re(e)))}(e).then((e=>WebAssembly.instantiate(e,t))).then((e=>e)).then(r,(e=>{E(\"failed to asynchronously prepare wasm: \"+e),ee(e)}))}function ae(e){this.name=\"ExitStatus\",this.message=`Program terminated with exit(${e})`,this.status=e}function oe(e){e.terminate(),e.onmessage=()=>{}}function ie(e){(e=he.Fa[e])||ee(),he.fb(e)}function ue(e){var t=he.Za();if(!t)return 6;he.Ia.push(t),he.Fa[e.Ha]=t,t.Ha=e.Ha;var r={cmd:\"run\",start_routine:e.gb,arg:e.Ya,pthread_ptr:e.Ha};return b&&t.unref(),t.postMessage(r,e.mb),0}te(J=\"ort-wasm-threaded.wasm\")||(J=y(J));var se=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf8\"):void 0,fe=(e,t,r)=>{var n=(t>>>=0)+r;for(r=t;e[r]&&!(r>=n);)++r;if(16<r-t&&e.buffer&&se)return se.decode(e.buffer instanceof SharedArrayBuffer?e.slice(t,r):e.subarray(t,r));for(n=\"\";t<r;){var a=e[t++];if(128&a){var o=63&e[t++];if(192==(224&a))n+=String.fromCharCode((31&a)<<6|o);else{var i=63&e[t++];65536>(a=224==(240&a)?(15&a)<<12|o<<6|i:(7&a)<<18|o<<12|i<<6|63&e[t++])?n+=String.fromCharCode(a):(a-=65536,n+=String.fromCharCode(55296|a>>10,56320|1023&a))}}else n+=String.fromCharCode(a)}return n},ce=(e,t)=>(e>>>=0)?fe(r(),e,t):\"\";function le(e){if(v)return qe(1,1,e);I=e,q()||(he.hb(),s.onExit&&s.onExit(e),U=!0),m(e,new ae(e))}var de=e=>{if(I=e,v)throw pe(e),\"unwind\";le(e)},he={La:[],Ia:[],Ta:[],Fa:{},Pa:function(){v?he.ab():he.$a()},$a:function(){L.unshift((()=>{Z(),he.bb((()=>Q()))}))},ab:function(){he.receiveObjectTransfer=he.eb,he.threadInitTLS=he.Sa,he.setExitStatus=he.Ra,R=!1},Ra:function(e){I=e},rb:[\"$terminateWorker\"],hb:function(){for(var e of he.Ia)oe(e);for(e of he.La)oe(e);he.La=[],he.Ia=[],he.Fa=[]},fb:function(e){var t=e.Ha;delete he.Fa[t],he.La.push(e),he.Ia.splice(he.Ia.indexOf(e),1),e.Ha=0,pt(t)},eb:function(){},Sa:function(){he.Ta.forEach((e=>e()))},cb:e=>new Promise((t=>{e.onmessage=r=>{var n=(r=r.data).cmd;if(r.targetThread&&r.targetThread!=ct()){var a=he.Fa[r.qb];a?a.postMessage(r,r.transferList):E('Internal error! Worker sent a message \"'+n+'\" to target pthread '+r.targetThread+\", but that thread no longer exists!\")}else\"checkMailbox\"===n?Ue():\"spawnThread\"===n?ue(r):\"cleanupThread\"===n?ie(r.thread):\"killThread\"===n?(r=r.thread,n=he.Fa[r],delete he.Fa[r],oe(n),pt(r),he.Ia.splice(he.Ia.indexOf(n),1),n.Ha=0):\"cancelThread\"===n?he.Fa[r.thread].postMessage({cmd:\"cancel\"}):\"loaded\"===n?(e.loaded=!0,t(e)):\"alert\"===n?alert(\"Thread \"+r.threadId+\": \"+r.text):\"setimmediate\"===r.target?e.postMessage(r):\"callHandler\"===n?s[r.handler](...r.args):n&&E(\"worker sent an unknown command \"+n)},e.onerror=e=>{throw E(\"worker sent an error! \"+e.filename+\":\"+e.lineno+\": \"+e.message),e},b&&(e.on(\"message\",(function(t){e.onmessage({data:t})})),e.on(\"error\",(function(t){e.onerror(t)})));var r,n=[];for(r of[\"onExit\",\"onAbort\",\"print\",\"printErr\"])s.hasOwnProperty(r)&&n.push(r);e.postMessage({cmd:\"load\",handlers:n,urlOrBlob:s.mainScriptUrlOrBlob||_scriptDir,wasmMemory:F,wasmModule:C})})),bb:function(e){e()},Xa:function(){var e=y(\"ort-wasm-threaded.worker.js\");e=new Worker(e),he.La.push(e)},Za:function(){return 0==he.La.length&&(he.Xa(),he.cb(he.La[0])),he.La.pop()}};s.PThread=he;var me=e=>{for(;0<e.length;)e.shift()(s)};function pe(e){if(v)return qe(2,0,e);de(e)}s.establishStackSpace=function(){var e=ct(),t=n()[e+52>>2>>>0];e=n()[e+56>>2>>>0],_t(t,t-e),wt(t)};var ge=[];function be(e){this.Oa=e-24,this.Wa=function(e){a()[this.Oa+4>>2>>>0]=e},this.Va=function(e){a()[this.Oa+8>>2>>>0]=e},this.Pa=function(e,t){this.Ua(),this.Wa(e),this.Va(t)},this.Ua=function(){a()[this.Oa+16>>2>>>0]=0}}function ve(e,t,r,n){return v?qe(3,1,e,t,r,n):_e(e,t,r,n)}function _e(e,t,r,n){if(e>>>=0,t>>>=0,r>>>=0,n>>>=0,\"undefined\"==typeof SharedArrayBuffer)return E(\"Current environment does not support SharedArrayBuffer, pthreads are not available!\"),6;var a=[];return v&&0===a.length?ve(e,t,r,n):(e={gb:r,Ha:e,Ya:n,mb:a},v?(e.ob=\"spawnThread\",postMessage(e,a),0):ue(e))}function ye(e,t,r){return v?qe(4,1,e,t,r):0}function we(e,t){if(v)return qe(5,1,e,t)}s.invokeEntryPoint=function(e,t){var r=ge[e];r||(e>=ge.length&&(ge.length=e+1),ge[e]=r=N.get(e)),e=r(t),q()?he.Ra(e):gt(e)};var Oe=e=>{for(var t=0,r=0;r<e.length;++r){var n=e.charCodeAt(r);127>=n?t++:2047>=n?t+=2:55296<=n&&57343>=n?(t+=4,++r):t+=3}return t},Me=(e,t,r,n)=>{if(!(0<n))return 0;var a=r>>>=0;n=r+n-1;for(var o=0;o<e.length;++o){var i=e.charCodeAt(o);if(55296<=i&&57343>=i&&(i=65536+((1023&i)<<10)|1023&e.charCodeAt(++o)),127>=i){if(r>=n)break;t[r++>>>0]=i}else{if(2047>=i){if(r+1>=n)break;t[r++>>>0]=192|i>>6}else{if(65535>=i){if(r+2>=n)break;t[r++>>>0]=224|i>>12}else{if(r+3>=n)break;t[r++>>>0]=240|i>>18,t[r++>>>0]=128|i>>12&63}t[r++>>>0]=128|i>>6&63}t[r++>>>0]=128|63&i}}return t[r>>>0]=0,r-a},Te=(e,t,n)=>Me(e,r(),t,n);function Se(e,t){if(v)return qe(6,1,e,t)}function Ae(e,t,r){if(v)return qe(7,1,e,t,r)}function Ee(e,t,r){return v?qe(8,1,e,t,r):0}function Re(e,t){if(v)return qe(9,1,e,t)}function Fe(e,t,r){if(v)return qe(10,1,e,t,r)}function De(e,t,r,n){if(v)return qe(11,1,e,t,r,n)}function Ce(e,t,r,n){if(v)return qe(12,1,e,t,r,n)}function Ie(e,t,r,n){if(v)return qe(13,1,e,t,r,n)}function ke(e){if(v)return qe(14,1,e)}function xe(e,t){if(v)return qe(15,1,e,t)}function Ye(e,t,r){if(v)return qe(16,1,e,t,r)}var He=e=>{if(!U)try{if(e(),!q())try{v?gt(I):de(I)}catch(e){e instanceof ae||\"unwind\"==e||m(1,e)}}catch(e){e instanceof ae||\"unwind\"==e||m(1,e)}};function Pe(e){e>>>=0,\"function\"==typeof Atomics.nb&&(Atomics.nb(n(),e>>2,e).value.then(Ue),e+=128,Atomics.store(n(),e>>2,1))}function Ue(){var e=ct();e&&(Pe(e),He((()=>bt())))}s.__emscripten_thread_mailbox_await=Pe,s.checkMailbox=Ue;var We=e=>0==e%4&&(0!=e%100||0==e%400),Ge=[0,31,60,91,121,152,182,213,244,274,305,335],Ne=[0,31,59,90,120,151,181,212,243,273,304,334];function Le(e,t,r,n,a,o,i,u){return v?qe(17,1,e,t,r,n,a,o,i,u):-52}function je(e,t,r,n,a,o,i){if(v)return qe(18,1,e,t,r,n,a,o,i)}var ze=e=>{var t=Oe(e)+1,r=lt(t);return r&&Te(e,r,t),r},Be=e=>{var t=yt();return e=e(),wt(t),e};function qe(e,t){var r=arguments.length-2,n=arguments;return Be((()=>{for(var a=Ot(8*r),i=a>>3,u=0;u<r;u++){var s=n[2+u];o()[i+u>>>0]=s}return mt(e,r,a,t)}))}var Je,Ke=[],Xe={},$e=()=>{if(!Je){var e,t={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:h||\"./this.program\"};for(e in Xe)void 0===Xe[e]?delete t[e]:t[e]=Xe[e];var r=[];for(e in t)r.push(`${e}=${t[e]}`);Je=r}return Je};function Ve(e,r){if(v)return qe(19,1,e,r);e>>>=0,r>>>=0;var n=0;return $e().forEach((function(o,i){var u=r+n;for(i=a()[e+4*i>>2>>>0]=u,u=0;u<o.length;++u)t()[i++>>0>>>0]=o.charCodeAt(u);t()[i>>0>>>0]=0,n+=o.length+1})),0}function Ze(e,t){if(v)return qe(20,1,e,t);e>>>=0,t>>>=0;var r=$e();a()[e>>2>>>0]=r.length;var n=0;return r.forEach((function(e){n+=e.length+1})),a()[t>>2>>>0]=n,0}function Qe(e){return v?qe(21,1,e):52}function et(e,t,r,n){return v?qe(22,1,e,t,r,n):52}function tt(e,t,r,n,a){return v?qe(23,1,e,t,r,n,a):70}var rt=[null,[],[]];function nt(e,t,n,o){if(v)return qe(24,1,e,t,n,o);t>>>=0,n>>>=0,o>>>=0;for(var i=0,u=0;u<n;u++){var s=a()[t>>2>>>0],f=a()[t+4>>2>>>0];t+=8;for(var c=0;c<f;c++){var l=r()[s+c>>>0],d=rt[e];0===l||10===l?((1===e?A:E)(fe(d,0)),d.length=0):d.push(l)}i+=f}return a()[o>>2>>>0]=i,0}var at=[31,29,31,30,31,30,31,31,30,31,30,31],ot=[31,28,31,30,31,30,31,31,30,31,30,31],it=(e,r)=>{t().set(e,r>>>0)};function ut(e,t,r,a){function o(e,t,r){for(e=\"number\"==typeof e?e.toString():e||\"\";e.length<t;)e=r[0]+e;return e}function i(e,t){return o(e,t,\"0\")}function u(e,t){function r(e){return 0>e?-1:0<e?1:0}var n;return 0===(n=r(e.getFullYear()-t.getFullYear()))&&0===(n=r(e.getMonth()-t.getMonth()))&&(n=r(e.getDate()-t.getDate())),n}function s(e){switch(e.getDay()){case 0:return new Date(e.getFullYear()-1,11,29);case 1:return e;case 2:return new Date(e.getFullYear(),0,3);case 3:return new Date(e.getFullYear(),0,2);case 4:return new Date(e.getFullYear(),0,1);case 5:return new Date(e.getFullYear()-1,11,31);case 6:return new Date(e.getFullYear()-1,11,30)}}function f(e){var t=e.Ja;for(e=new Date(new Date(e.Ka+1900,0,1).getTime());0<t;){var r=e.getMonth(),n=(We(e.getFullYear())?at:ot)[r];if(!(t>n-e.getDate())){e.setDate(e.getDate()+t);break}t-=n-e.getDate()+1,e.setDate(1),11>r?e.setMonth(r+1):(e.setMonth(0),e.setFullYear(e.getFullYear()+1))}return r=new Date(e.getFullYear()+1,0,4),t=s(new Date(e.getFullYear(),0,4)),r=s(r),0>=u(t,e)?0>=u(r,e)?e.getFullYear()+1:e.getFullYear():e.getFullYear()-1}e>>>=0,t>>>=0,r>>>=0,a>>>=0;var c=n()[a+40>>2>>>0];for(var l in a={kb:n()[a>>2>>>0],jb:n()[a+4>>2>>>0],Ma:n()[a+8>>2>>>0],Qa:n()[a+12>>2>>>0],Na:n()[a+16>>2>>>0],Ka:n()[a+20>>2>>>0],Ga:n()[a+24>>2>>>0],Ja:n()[a+28>>2>>>0],sb:n()[a+32>>2>>>0],ib:n()[a+36>>2>>>0],lb:c?ce(c):\"\"},r=ce(r),c={\"%c\":\"%a %b %d %H:%M:%S %Y\",\"%D\":\"%m/%d/%y\",\"%F\":\"%Y-%m-%d\",\"%h\":\"%b\",\"%r\":\"%I:%M:%S %p\",\"%R\":\"%H:%M\",\"%T\":\"%H:%M:%S\",\"%x\":\"%m/%d/%y\",\"%X\":\"%H:%M:%S\",\"%Ec\":\"%c\",\"%EC\":\"%C\",\"%Ex\":\"%m/%d/%y\",\"%EX\":\"%H:%M:%S\",\"%Ey\":\"%y\",\"%EY\":\"%Y\",\"%Od\":\"%d\",\"%Oe\":\"%e\",\"%OH\":\"%H\",\"%OI\":\"%I\",\"%Om\":\"%m\",\"%OM\":\"%M\",\"%OS\":\"%S\",\"%Ou\":\"%u\",\"%OU\":\"%U\",\"%OV\":\"%V\",\"%Ow\":\"%w\",\"%OW\":\"%W\",\"%Oy\":\"%y\"})r=r.replace(new RegExp(l,\"g\"),c[l]);var d=\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\".split(\" \"),h=\"January February March April May June July August September October November December\".split(\" \");for(l in c={\"%a\":e=>d[e.Ga].substring(0,3),\"%A\":e=>d[e.Ga],\"%b\":e=>h[e.Na].substring(0,3),\"%B\":e=>h[e.Na],\"%C\":e=>i((e.Ka+1900)/100|0,2),\"%d\":e=>i(e.Qa,2),\"%e\":e=>o(e.Qa,2,\" \"),\"%g\":e=>f(e).toString().substring(2),\"%G\":e=>f(e),\"%H\":e=>i(e.Ma,2),\"%I\":e=>(0==(e=e.Ma)?e=12:12<e&&(e-=12),i(e,2)),\"%j\":e=>{for(var t=0,r=0;r<=e.Na-1;t+=(We(e.Ka+1900)?at:ot)[r++]);return i(e.Qa+t,3)},\"%m\":e=>i(e.Na+1,2),\"%M\":e=>i(e.jb,2),\"%n\":()=>\"\\n\",\"%p\":e=>0<=e.Ma&&12>e.Ma?\"AM\":\"PM\",\"%S\":e=>i(e.kb,2),\"%t\":()=>\"\\t\",\"%u\":e=>e.Ga||7,\"%U\":e=>i(Math.floor((e.Ja+7-e.Ga)/7),2),\"%V\":e=>{var t=Math.floor((e.Ja+7-(e.Ga+6)%7)/7);if(2>=(e.Ga+371-e.Ja-2)%7&&t++,t)53==t&&(4==(r=(e.Ga+371-e.Ja)%7)||3==r&&We(e.Ka)||(t=1));else{t=52;var r=(e.Ga+7-e.Ja-1)%7;(4==r||5==r&&We(e.Ka%400-1))&&t++}return i(t,2)},\"%w\":e=>e.Ga,\"%W\":e=>i(Math.floor((e.Ja+7-(e.Ga+6)%7)/7),2),\"%y\":e=>(e.Ka+1900).toString().substring(2),\"%Y\":e=>e.Ka+1900,\"%z\":e=>{var t=0<=(e=e.ib);return e=Math.abs(e)/60,(t?\"+\":\"-\")+String(\"0000\"+(e/60*100+e%60)).slice(-4)},\"%Z\":e=>e.lb,\"%%\":()=>\"%\"},r=r.replace(/%%/g,\"\\0\\0\"),c)r.includes(l)&&(r=r.replace(new RegExp(l,\"g\"),c[l](a)));return l=function(e){var t=Array(Oe(e)+1);return Me(e,t,0,t.length),t}(r=r.replace(/\\0\\0/g,\"%\")),l.length>t?0:(it(l,e),l.length-1)}he.Pa();var st=[null,le,pe,ve,ye,we,Se,Ae,Ee,Re,Fe,De,Ce,Ie,ke,xe,Ye,Le,je,Ve,Ze,Qe,et,tt,nt],ft={b:function(e,t,r){throw new be(e>>>=0).Pa(t>>>0,r>>>0),e},N:function(e){dt(e>>>0,!g,1,!p,131072,!1),he.Sa()},j:function(e){e>>>=0,v?postMessage({cmd:\"cleanupThread\",thread:e}):ie(e)},I:_e,h:ye,T:we,D:Se,F:Ae,U:Ee,R:Re,J:Fe,Q:De,n:Ce,E:Ie,B:ke,S:xe,C:Ye,q:()=>!0,z:function(e,t){(e>>>=0)==t>>>0?setTimeout((()=>Ue())):v?postMessage({targetThread:e,cmd:\"checkMailbox\"}):(e=he.Fa[e])&&e.postMessage({cmd:\"checkMailbox\"})},L:function(){return-1},M:Pe,p:function(e){b&&he.Fa[e>>>0].ref()},t:function(e,t,r){e=t+2097152>>>0<4194305-!!e?(e>>>0)+4294967296*t:NaN,r>>>=0,e=new Date(1e3*e),n()[r>>2>>>0]=e.getUTCSeconds(),n()[r+4>>2>>>0]=e.getUTCMinutes(),n()[r+8>>2>>>0]=e.getUTCHours(),n()[r+12>>2>>>0]=e.getUTCDate(),n()[r+16>>2>>>0]=e.getUTCMonth(),n()[r+20>>2>>>0]=e.getUTCFullYear()-1900,n()[r+24>>2>>>0]=e.getUTCDay(),e=(e.getTime()-Date.UTC(e.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,n()[r+28>>2>>>0]=e},u:function(e,t,r){e=t+2097152>>>0<4194305-!!e?(e>>>0)+4294967296*t:NaN,r>>>=0,e=new Date(1e3*e),n()[r>>2>>>0]=e.getSeconds(),n()[r+4>>2>>>0]=e.getMinutes(),n()[r+8>>2>>>0]=e.getHours(),n()[r+12>>2>>>0]=e.getDate(),n()[r+16>>2>>>0]=e.getMonth(),n()[r+20>>2>>>0]=e.getFullYear()-1900,n()[r+24>>2>>>0]=e.getDay(),t=(We(e.getFullYear())?Ge:Ne)[e.getMonth()]+e.getDate()-1|0,n()[r+28>>2>>>0]=t,n()[r+36>>2>>>0]=-60*e.getTimezoneOffset(),t=new Date(e.getFullYear(),6,1).getTimezoneOffset();var a=new Date(e.getFullYear(),0,1).getTimezoneOffset();e=0|(t!=a&&e.getTimezoneOffset()==Math.min(a,t)),n()[r+32>>2>>>0]=e},v:function(e){e>>>=0;var t=new Date(n()[e+20>>2>>>0]+1900,n()[e+16>>2>>>0],n()[e+12>>2>>>0],n()[e+8>>2>>>0],n()[e+4>>2>>>0],n()[e>>2>>>0],0),r=n()[e+32>>2>>>0],a=t.getTimezoneOffset(),o=new Date(t.getFullYear(),6,1).getTimezoneOffset(),i=new Date(t.getFullYear(),0,1).getTimezoneOffset(),u=Math.min(i,o);return 0>r?n()[e+32>>2>>>0]=Number(o!=i&&u==a):0<r!=(u==a)&&(o=Math.max(i,o),t.setTime(t.getTime()+6e4*((0<r?u:o)-a))),n()[e+24>>2>>>0]=t.getDay(),r=(We(t.getFullYear())?Ge:Ne)[t.getMonth()]+t.getDate()-1|0,n()[e+28>>2>>>0]=r,n()[e>>2>>>0]=t.getSeconds(),n()[e+4>>2>>>0]=t.getMinutes(),n()[e+8>>2>>>0]=t.getHours(),n()[e+12>>2>>>0]=t.getDate(),n()[e+16>>2>>>0]=t.getMonth(),n()[e+20>>2>>>0]=t.getYear(),e=t.getTime()/1e3,vt((K=e,1<=+Math.abs(K)?0<K?+Math.floor(K/4294967296)>>>0:~~+Math.ceil((K-+(~~K>>>0))/4294967296)>>>0:0)),e>>>0},r:Le,s:je,y:function(e,t,r){function o(e){return(e=e.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?e[1]:\"GMT\"}e>>>=0,t>>>=0,r>>>=0;var i=(new Date).getFullYear(),u=new Date(i,0,1),s=new Date(i,6,1);i=u.getTimezoneOffset();var f=s.getTimezoneOffset(),c=Math.max(i,f);a()[e>>2>>>0]=60*c,n()[t>>2>>>0]=Number(i!=f),e=o(u),t=o(s),e=ze(e),t=ze(t),f<i?(a()[r>>2>>>0]=e,a()[r+4>>2>>>0]=t):(a()[r>>2>>>0]=t,a()[r+4>>2>>>0]=e)},c:()=>{ee(\"\")},k:function(){},i:function(){return Date.now()},o:()=>{throw B+=1,\"unwind\"},A:function(){return 4294901760},e:()=>performance.timeOrigin+performance.now(),f:function(){return b?require(\"os\").cpus().length:navigator.hardwareConcurrency},K:function(e,t,r,n){for(he.pb=t>>>0,Ke.length=r,t=n>>>0>>3,n=0;n<r;n++)Ke[n]=o()[t+n>>>0];return st[e].apply(null,Ke)},x:function(e){e>>>=0;var t=r().length;if(e<=t||4294901760<e)return!1;for(var n=1;4>=n;n*=2){var a=t*(1+.2/n);a=Math.min(a,e+100663296);var o=Math;a=Math.max(e,a);e:{o=o.min.call(o,4294901760,a+(65536-a%65536)%65536)-F.buffer.byteLength+65535>>>16;try{F.grow(o),W();var i=1;break e}catch(e){}i=void 0}if(i)return!0}return!1},O:Ve,P:Ze,H:de,g:Qe,m:et,w:tt,l:nt,a:F||s.wasmMemory,G:ut,d:function(e,t,r,n){return ut(e>>>0,t>>>0,r>>>0,n>>>0)}};!function(){function e(e,t){return e=e.exports,D=e=function(e){var t=e=>()=>e()>>>0,r=e=>t=>e(t)>>>0;return(e=Object.assign({},e)).__errno_location=t(e.__errno_location),e.pthread_self=t(e.pthread_self),e.malloc=r(e.malloc),e.stackSave=t(e.stackSave),e.stackAlloc=r(e.stackAlloc),e}(e),he.Ta.push(D.sa),N=D.ta,j.unshift(D.V),C=t,Q(),e}var t={a:ft};if(Z(),s.instantiateWasm)try{return s.instantiateWasm(t,e)}catch(e){E(\"Module.instantiateWasm callback failed with error: \"+e),u(e)}(function(e,t){var r=J;return S||\"function\"!=typeof WebAssembly.instantiateStreaming||te(r)||r.startsWith(\"file://\")||b||\"function\"!=typeof fetch?ne(r,e,t):fetch(r,{credentials:\"same-origin\"}).then((n=>WebAssembly.instantiateStreaming(n,e).then(t,(function(n){return E(\"wasm streaming compile failed: \"+n),E(\"falling back to ArrayBuffer instantiation\"),ne(r,e,t)}))))})(t,(function(t){e(t.instance,t.module)})).catch(u)}(),s._OrtInit=(e,t)=>(s._OrtInit=D.W)(e,t),s._OrtGetLastError=(e,t)=>(s._OrtGetLastError=D.X)(e,t),s._OrtCreateSessionOptions=(e,t,r,n,a,o,i,u,f,c)=>(s._OrtCreateSessionOptions=D.Y)(e,t,r,n,a,o,i,u,f,c),s._OrtAppendExecutionProvider=(e,t)=>(s._OrtAppendExecutionProvider=D.Z)(e,t),s._OrtAddFreeDimensionOverride=(e,t,r)=>(s._OrtAddFreeDimensionOverride=D._)(e,t,r),s._OrtAddSessionConfigEntry=(e,t,r)=>(s._OrtAddSessionConfigEntry=D.$)(e,t,r),s._OrtReleaseSessionOptions=e=>(s._OrtReleaseSessionOptions=D.aa)(e),s._OrtCreateSession=(e,t,r)=>(s._OrtCreateSession=D.ba)(e,t,r),s._OrtReleaseSession=e=>(s._OrtReleaseSession=D.ca)(e),s._OrtGetInputOutputCount=(e,t,r)=>(s._OrtGetInputOutputCount=D.da)(e,t,r),s._OrtGetInputName=(e,t)=>(s._OrtGetInputName=D.ea)(e,t),s._OrtGetOutputName=(e,t)=>(s._OrtGetOutputName=D.fa)(e,t),s._OrtFree=e=>(s._OrtFree=D.ga)(e),s._OrtCreateTensor=(e,t,r,n,a)=>(s._OrtCreateTensor=D.ha)(e,t,r,n,a),s._OrtGetTensorData=(e,t,r,n,a)=>(s._OrtGetTensorData=D.ia)(e,t,r,n,a),s._OrtReleaseTensor=e=>(s._OrtReleaseTensor=D.ja)(e),s._OrtCreateRunOptions=(e,t,r,n)=>(s._OrtCreateRunOptions=D.ka)(e,t,r,n),s._OrtAddRunConfigEntry=(e,t,r)=>(s._OrtAddRunConfigEntry=D.la)(e,t,r),s._OrtReleaseRunOptions=e=>(s._OrtReleaseRunOptions=D.ma)(e),s._OrtRun=(e,t,r,n,a,o,i,u)=>(s._OrtRun=D.na)(e,t,r,n,a,o,i,u),s._OrtEndProfiling=e=>(s._OrtEndProfiling=D.oa)(e);var ct=s._pthread_self=()=>(ct=s._pthread_self=D.pa)(),lt=s._malloc=e=>(lt=s._malloc=D.qa)(e);s._free=e=>(s._free=D.ra)(e),s.__emscripten_tls_init=()=>(s.__emscripten_tls_init=D.sa)();var dt=s.__emscripten_thread_init=(e,t,r,n,a,o)=>(dt=s.__emscripten_thread_init=D.ua)(e,t,r,n,a,o);s.__emscripten_thread_crashed=()=>(s.__emscripten_thread_crashed=D.va)();var ht,mt=(e,t,r,n)=>(mt=D.wa)(e,t,r,n),pt=e=>(pt=D.xa)(e),gt=s.__emscripten_thread_exit=e=>(gt=s.__emscripten_thread_exit=D.ya)(e),bt=s.__emscripten_check_mailbox=()=>(bt=s.__emscripten_check_mailbox=D.za)(),vt=e=>(vt=D.Aa)(e),_t=(e,t)=>(_t=D.Ba)(e,t),yt=()=>(yt=D.Ca)(),wt=e=>(wt=D.Da)(e),Ot=e=>(Ot=D.Ea)(e);function Mt(){function e(){if(!ht&&(ht=!0,s.calledRun=!0,!U)&&(v||me(j),i(s),s.onRuntimeInitialized&&s.onRuntimeInitialized(),!v)){if(s.postRun)for(\"function\"==typeof s.postRun&&(s.postRun=[s.postRun]);s.postRun.length;){var e=s.postRun.shift();z.unshift(e)}me(z)}}if(!(0<X))if(v)i(s),v||me(j),startWorker(s);else{if(s.preRun)for(\"function\"==typeof s.preRun&&(s.preRun=[s.preRun]);s.preRun.length;)L.unshift(s.preRun.shift());me(L),0<X||(s.setStatus?(s.setStatus(\"Running...\"),setTimeout((function(){setTimeout((function(){s.setStatus(\"\")}),1),e()}),1)):e())}}if(s.keepRuntimeAlive=q,s.wasmMemory=F,s.stackAlloc=Ot,s.stackSave=yt,s.stackRestore=wt,s.UTF8ToString=ce,s.stringToUTF8=Te,s.lengthBytesUTF8=Oe,s.ExitStatus=ae,s.PThread=he,V=function e(){ht||Mt(),ht||(V=e)},s.preInit)for(\"function\"==typeof s.preInit&&(s.preInit=[s.preInit]);0<s.preInit.length;)s.preInit.pop()();return Mt(),e.ready});\"object\"==typeof exports&&\"object\"==typeof module?module.exports=e:\"function\"==typeof define&&define.amd&&define([],(()=>e));\n","\nvar ortWasm = (() => {\n  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;\n  if (typeof __filename !== 'undefined') _scriptDir = _scriptDir || __filename;\n  return (\nfunction(moduleArg = {}) {\n\nvar g=moduleArg,aa,m;g.ready=new Promise((a,b)=>{aa=a;m=b});var ba=Object.assign({},g),ca=\"./this.program\",da=\"object\"==typeof window,q=\"function\"==typeof importScripts,ea=\"object\"==typeof process&&\"object\"==typeof process.versions&&\"string\"==typeof process.versions.node,t=\"\",fa,w,x;\nif(ea){var fs=require(\"fs\"),ha=require(\"path\");t=q?ha.dirname(t)+\"/\":__dirname+\"/\";fa=(a,b)=>{a=a.startsWith(\"file://\")?new URL(a):ha.normalize(a);return fs.readFileSync(a,b?void 0:\"utf8\")};x=a=>{a=fa(a,!0);a.buffer||(a=new Uint8Array(a));return a};w=(a,b,c,d=!0)=>{a=a.startsWith(\"file://\")?new URL(a):ha.normalize(a);fs.readFile(a,d?void 0:\"utf8\",(e,h)=>{e?c(e):b(d?h.buffer:h)})};!g.thisProgram&&1<process.argv.length&&(ca=process.argv[1].replace(/\\\\/g,\"/\"));process.argv.slice(2);g.inspect=()=>\"[Emscripten Module object]\"}else if(da||\nq)q?t=self.location.href:\"undefined\"!=typeof document&&document.currentScript&&(t=document.currentScript.src),_scriptDir&&(t=_scriptDir),0!==t.indexOf(\"blob:\")?t=t.substr(0,t.replace(/[?#].*/,\"\").lastIndexOf(\"/\")+1):t=\"\",fa=a=>{var b=new XMLHttpRequest;b.open(\"GET\",a,!1);b.send(null);return b.responseText},q&&(x=a=>{var b=new XMLHttpRequest;b.open(\"GET\",a,!1);b.responseType=\"arraybuffer\";b.send(null);return new Uint8Array(b.response)}),w=(a,b,c)=>{var d=new XMLHttpRequest;d.open(\"GET\",a,!0);d.responseType=\n\"arraybuffer\";d.onload=()=>{200==d.status||0==d.status&&d.response?b(d.response):c()};d.onerror=c;d.send(null)};var ia=g.print||console.log.bind(console),z=g.printErr||console.error.bind(console);Object.assign(g,ba);ba=null;g.thisProgram&&(ca=g.thisProgram);var A;g.wasmBinary&&(A=g.wasmBinary);var noExitRuntime=g.noExitRuntime||!0;\"object\"!=typeof WebAssembly&&ja(\"no native wasm support detected\");var B,C,ka=!1,D,E,G,H,J,K,la,ma,na,oa;\nfunction pa(){var a=B.buffer;g.HEAP8=D=new Int8Array(a);g.HEAP16=G=new Int16Array(a);g.HEAP32=J=new Int32Array(a);g.HEAPU8=E=new Uint8Array(a);g.HEAPU16=H=new Uint16Array(a);g.HEAPU32=K=new Uint32Array(a);g.HEAPF32=la=new Float32Array(a);g.HEAPF64=oa=new Float64Array(a);g.HEAP64=ma=new BigInt64Array(a);g.HEAPU64=na=new BigUint64Array(a)}var qa=[],ra=[],sa=[];function ta(){var a=g.preRun.shift();qa.unshift(a)}var L=0,ua=null,M=null;\nfunction ja(a){if(g.onAbort)g.onAbort(a);a=\"Aborted(\"+a+\")\";z(a);ka=!0;a=new WebAssembly.RuntimeError(a+\". Build with -sASSERTIONS for more info.\");m(a);throw a;}function va(a){return a.startsWith(\"data:application/octet-stream;base64,\")}var N;N=\"ort-wasm.wasm\";if(!va(N)){var wa=N;N=g.locateFile?g.locateFile(wa,t):t+wa}function xa(a){if(a==N&&A)return new Uint8Array(A);if(x)return x(a);throw\"both async and sync fetching of the wasm failed\";}\nfunction ya(a){if(!A&&(da||q)){if(\"function\"==typeof fetch&&!a.startsWith(\"file://\"))return fetch(a,{credentials:\"same-origin\"}).then(b=>{if(!b.ok)throw\"failed to load wasm binary file at '\"+a+\"'\";return b.arrayBuffer()}).catch(()=>xa(a));if(w)return new Promise((b,c)=>{w(a,d=>b(new Uint8Array(d)),c)})}return Promise.resolve().then(()=>xa(a))}function za(a,b,c){return ya(a).then(d=>WebAssembly.instantiate(d,b)).then(d=>d).then(c,d=>{z(\"failed to asynchronously prepare wasm: \"+d);ja(d)})}\nfunction Aa(a,b){var c=N;return A||\"function\"!=typeof WebAssembly.instantiateStreaming||va(c)||c.startsWith(\"file://\")||ea||\"function\"!=typeof fetch?za(c,a,b):fetch(c,{credentials:\"same-origin\"}).then(d=>WebAssembly.instantiateStreaming(d,a).then(b,function(e){z(\"wasm streaming compile failed: \"+e);z(\"falling back to ArrayBuffer instantiation\");return za(c,a,b)}))}var Ba=a=>{for(;0<a.length;)a.shift()(g)};\nfunction Ca(a){this.Pa=a-24;this.Za=function(b){K[this.Pa+4>>2]=b};this.Ya=function(b){K[this.Pa+8>>2]=b};this.Ta=function(b,c){this.Ua();this.Za(b);this.Ya(c)};this.Ua=function(){K[this.Pa+16>>2]=0}}\nvar Da=0,Ea=0,Fa=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf8\"):void 0,O=(a,b,c)=>{var d=b+c;for(c=b;a[c]&&!(c>=d);)++c;if(16<c-b&&a.buffer&&Fa)return Fa.decode(a.subarray(b,c));for(d=\"\";b<c;){var e=a[b++];if(e&128){var h=a[b++]&63;if(192==(e&224))d+=String.fromCharCode((e&31)<<6|h);else{var l=a[b++]&63;e=224==(e&240)?(e&15)<<12|h<<6|l:(e&7)<<18|h<<12|l<<6|a[b++]&63;65536>e?d+=String.fromCharCode(e):(e-=65536,d+=String.fromCharCode(55296|e>>10,56320|e&1023))}}else d+=String.fromCharCode(e)}return d},\nP=a=>{for(var b=0,c=0;c<a.length;++c){var d=a.charCodeAt(c);127>=d?b++:2047>=d?b+=2:55296<=d&&57343>=d?(b+=4,++c):b+=3}return b},Q=(a,b,c,d)=>{if(!(0<d))return 0;var e=c;d=c+d-1;for(var h=0;h<a.length;++h){var l=a.charCodeAt(h);if(55296<=l&&57343>=l){var k=a.charCodeAt(++h);l=65536+((l&1023)<<10)|k&1023}if(127>=l){if(c>=d)break;b[c++]=l}else{if(2047>=l){if(c+1>=d)break;b[c++]=192|l>>6}else{if(65535>=l){if(c+2>=d)break;b[c++]=224|l>>12}else{if(c+3>=d)break;b[c++]=240|l>>18;b[c++]=128|l>>12&63}b[c++]=\n128|l>>6&63}b[c++]=128|l&63}}b[c]=0;return c-e};function Ga(a){if(null===a)return\"null\";var b=typeof a;return\"object\"===b||\"array\"===b||\"function\"===b?a.toString():\"\"+a}var Ha=void 0;function R(a){for(var b=\"\";E[a];)b+=Ha[E[a++]];return b}var Ia={},Ja={},Ka={},La=void 0;function S(a){throw new La(a);}\nfunction Ma(a,b,c={}){var d=b.name;a||S(`type \"${d}\" must have a positive integer typeid pointer`);if(Ja.hasOwnProperty(a)){if(c.$a)return;S(`Cannot register type '${d}' twice`)}Ja[a]=b;delete Ka[a];Ia.hasOwnProperty(a)&&(b=Ia[a],delete Ia[a],b.forEach(e=>e()))}function T(a,b,c={}){if(!(\"argPackAdvance\"in b))throw new TypeError(\"registerType registeredInstance requires argPackAdvance\");Ma(a,b,c)}\nfunction Na(a,b,c){switch(b){case 0:return c?function(d){return D[d]}:function(d){return E[d]};case 1:return c?function(d){return G[d>>1]}:function(d){return H[d>>1]};case 2:return c?function(d){return J[d>>2]}:function(d){return K[d>>2]};case 3:return c?function(d){return ma[d>>3]}:function(d){return na[d>>3]};default:throw new TypeError(\"Unknown integer type: \"+a);}}\nfunction Oa(a){switch(a){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError(`Unknown type size: ${a}`);}}function Pa(){this.Ma=[void 0];this.Wa=[]}var U=new Pa;function Qa(a){a>=U.Pa&&0===--U.get(a).Xa&&U.Ua(a)}var V=a=>{a||S(\"Cannot use deleted val. handle = \"+a);return U.get(a).value},W=a=>{switch(a){case void 0:return 1;case null:return 2;case !0:return 3;case !1:return 4;default:return U.Ta({Xa:1,value:a})}};\nfunction Ra(a){return this.fromWireType(J[a>>2])}function Sa(a,b){switch(b){case 2:return function(c){return this.fromWireType(la[c>>2])};case 3:return function(c){return this.fromWireType(oa[c>>3])};default:throw new TypeError(\"Unknown float type: \"+a);}}\nvar Ta=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf-16le\"):void 0,Ua=(a,b)=>{var c=a>>1;for(var d=c+b/2;!(c>=d)&&H[c];)++c;c<<=1;if(32<c-a&&Ta)return Ta.decode(E.subarray(a,c));c=\"\";for(d=0;!(d>=b/2);++d){var e=G[a+2*d>>1];if(0==e)break;c+=String.fromCharCode(e)}return c},Va=(a,b,c)=>{void 0===c&&(c=2147483647);if(2>c)return 0;c-=2;var d=b;c=c<2*a.length?c/2:a.length;for(var e=0;e<c;++e)G[b>>1]=a.charCodeAt(e),b+=2;G[b>>1]=0;return b-d},Wa=a=>2*a.length,Xa=(a,b)=>{for(var c=0,d=\"\";!(c>=b/\n4);){var e=J[a+4*c>>2];if(0==e)break;++c;65536<=e?(e-=65536,d+=String.fromCharCode(55296|e>>10,56320|e&1023)):d+=String.fromCharCode(e)}return d},Ya=(a,b,c)=>{void 0===c&&(c=2147483647);if(4>c)return 0;var d=b;c=d+c-4;for(var e=0;e<a.length;++e){var h=a.charCodeAt(e);if(55296<=h&&57343>=h){var l=a.charCodeAt(++e);h=65536+((h&1023)<<10)|l&1023}J[b>>2]=h;b+=4;if(b+4>c)break}J[b>>2]=0;return b-d},Za=a=>{for(var b=0,c=0;c<a.length;++c){var d=a.charCodeAt(c);55296<=d&&57343>=d&&++c;b+=4}return b};\nfunction $a(a,b){var c=Ja[a];if(void 0===c){a=ab(a);var d=R(a);X(a);S(b+\" has unknown type \"+d)}return c}var bb={};function cb(a){var b=bb[a];return void 0===b?R(a):b}var eb=[];function fb(){return\"object\"==typeof globalThis?globalThis:Function(\"return this\")()}function gb(a){var b=eb.length;eb.push(a);return b}function hb(a,b){for(var c=Array(a),d=0;d<a;++d)c[d]=$a(K[b+4*d>>2],\"parameter \"+d);return c}\nfunction ib(a){if(void 0===a)return\"_unknown\";a=a.replace(/[^a-zA-Z0-9_]/g,\"$\");var b=a.charCodeAt(0);return 48<=b&&57>=b?`_${a}`:a}var jb=[];function kb(a,b){a=ib(a);return{[a]:function(){return b.apply(this,arguments)}}[a]}\nfunction lb(a){var b=Function;if(!(b instanceof Function))throw new TypeError(`new_ called with constructor type ${typeof b} which is not a function`);var c=kb(b.name||\"unknownFunctionName\",function(){});c.prototype=b.prototype;c=new c;a=b.apply(c,a);return a instanceof Object?a:c}\nfunction mb(a){for(var b=\"\",c=0;c<a;++c)b+=(0!==c?\", \":\"\")+\"arg\"+c;var d=\"return function emval_allocator_\"+a+\"(constructor, argTypes, args) {\\n  var HEAPU32 = getMemory();\\n\";for(c=0;c<a;++c)d+=\"var argType\"+c+\" = requireRegisteredType(HEAPU32[((argTypes)>>2)], 'parameter \"+c+\"');\\nvar arg\"+c+\" = argType\"+c+\".readValueFromPointer(args);\\nargs += argType\"+c+\"['argPackAdvance'];\\nargTypes += 4;\\n\";return(new Function(\"requireRegisteredType\",\"Module\",\"valueToHandle\",\"getMemory\",d+(\"var obj = new constructor(\"+\nb+\");\\nreturn valueToHandle(obj);\\n}\\n\")))($a,g,W,()=>K)}var nb={};function Y(a){return-9007199254740992>a||9007199254740992<a?NaN:Number(a)}\nvar Z=a=>0===a%4&&(0!==a%100||0===a%400),ob=[0,31,60,91,121,152,182,213,244,274,305,335],pb=[0,31,59,90,120,151,181,212,243,273,304,334],rb=a=>{var b=P(a)+1,c=qb(b);c&&Q(a,E,c,b);return c},sb={},ub=()=>{if(!tb){var a={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:ca||\"./this.program\"},b;for(b in sb)void 0===sb[b]?delete a[b]:a[b]=sb[b];var c=[];for(b in a)c.push(`${b}=${a[b]}`);\ntb=c}return tb},tb,vb=[null,[],[]],wb=[31,29,31,30,31,30,31,31,30,31,30,31],xb=[31,28,31,30,31,30,31,31,30,31,30,31];function yb(a){var b=Array(P(a)+1);Q(a,b,0,b.length);return b}\nfor(var zb=(a,b,c,d)=>{function e(f,r,u){for(f=\"number\"==typeof f?f.toString():f||\"\";f.length<r;)f=u[0]+f;return f}function h(f,r){return e(f,r,\"0\")}function l(f,r){function u(db){return 0>db?-1:0<db?1:0}var I;0===(I=u(f.getFullYear()-r.getFullYear()))&&0===(I=u(f.getMonth()-r.getMonth()))&&(I=u(f.getDate()-r.getDate()));return I}function k(f){switch(f.getDay()){case 0:return new Date(f.getFullYear()-1,11,29);case 1:return f;case 2:return new Date(f.getFullYear(),0,3);case 3:return new Date(f.getFullYear(),\n0,2);case 4:return new Date(f.getFullYear(),0,1);case 5:return new Date(f.getFullYear()-1,11,31);case 6:return new Date(f.getFullYear()-1,11,30)}}function n(f){var r=f.Na;for(f=new Date((new Date(f.Oa+1900,0,1)).getTime());0<r;){var u=f.getMonth(),I=(Z(f.getFullYear())?wb:xb)[u];if(r>I-f.getDate())r-=I-f.getDate()+1,f.setDate(1),11>u?f.setMonth(u+1):(f.setMonth(0),f.setFullYear(f.getFullYear()+1));else{f.setDate(f.getDate()+r);break}}u=new Date(f.getFullYear()+1,0,4);r=k(new Date(f.getFullYear(),\n0,4));u=k(u);return 0>=l(r,f)?0>=l(u,f)?f.getFullYear()+1:f.getFullYear():f.getFullYear()-1}var p=J[d+40>>2];d={eb:J[d>>2],cb:J[d+4>>2],Ra:J[d+8>>2],Va:J[d+12>>2],Sa:J[d+16>>2],Oa:J[d+20>>2],Ia:J[d+24>>2],Na:J[d+28>>2],gb:J[d+32>>2],bb:J[d+36>>2],fb:p?p?O(E,p):\"\":\"\"};c=c?O(E,c):\"\";p={\"%c\":\"%a %b %d %H:%M:%S %Y\",\"%D\":\"%m/%d/%y\",\"%F\":\"%Y-%m-%d\",\"%h\":\"%b\",\"%r\":\"%I:%M:%S %p\",\"%R\":\"%H:%M\",\"%T\":\"%H:%M:%S\",\"%x\":\"%m/%d/%y\",\"%X\":\"%H:%M:%S\",\"%Ec\":\"%c\",\"%EC\":\"%C\",\"%Ex\":\"%m/%d/%y\",\"%EX\":\"%H:%M:%S\",\"%Ey\":\"%y\",\n\"%EY\":\"%Y\",\"%Od\":\"%d\",\"%Oe\":\"%e\",\"%OH\":\"%H\",\"%OI\":\"%I\",\"%Om\":\"%m\",\"%OM\":\"%M\",\"%OS\":\"%S\",\"%Ou\":\"%u\",\"%OU\":\"%U\",\"%OV\":\"%V\",\"%Ow\":\"%w\",\"%OW\":\"%W\",\"%Oy\":\"%y\"};for(var v in p)c=c.replace(new RegExp(v,\"g\"),p[v]);var y=\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\".split(\" \"),F=\"January February March April May June July August September October November December\".split(\" \");p={\"%a\":f=>y[f.Ia].substring(0,3),\"%A\":f=>y[f.Ia],\"%b\":f=>F[f.Sa].substring(0,3),\"%B\":f=>F[f.Sa],\"%C\":f=>h((f.Oa+1900)/\n100|0,2),\"%d\":f=>h(f.Va,2),\"%e\":f=>e(f.Va,2,\" \"),\"%g\":f=>n(f).toString().substring(2),\"%G\":f=>n(f),\"%H\":f=>h(f.Ra,2),\"%I\":f=>{f=f.Ra;0==f?f=12:12<f&&(f-=12);return h(f,2)},\"%j\":f=>{for(var r=0,u=0;u<=f.Sa-1;r+=(Z(f.Oa+1900)?wb:xb)[u++]);return h(f.Va+r,3)},\"%m\":f=>h(f.Sa+1,2),\"%M\":f=>h(f.cb,2),\"%n\":()=>\"\\n\",\"%p\":f=>0<=f.Ra&&12>f.Ra?\"AM\":\"PM\",\"%S\":f=>h(f.eb,2),\"%t\":()=>\"\\t\",\"%u\":f=>f.Ia||7,\"%U\":f=>h(Math.floor((f.Na+7-f.Ia)/7),2),\"%V\":f=>{var r=Math.floor((f.Na+7-(f.Ia+6)%7)/7);2>=(f.Ia+371-f.Na-2)%\n7&&r++;if(r)53==r&&(u=(f.Ia+371-f.Na)%7,4==u||3==u&&Z(f.Oa)||(r=1));else{r=52;var u=(f.Ia+7-f.Na-1)%7;(4==u||5==u&&Z(f.Oa%400-1))&&r++}return h(r,2)},\"%w\":f=>f.Ia,\"%W\":f=>h(Math.floor((f.Na+7-(f.Ia+6)%7)/7),2),\"%y\":f=>(f.Oa+1900).toString().substring(2),\"%Y\":f=>f.Oa+1900,\"%z\":f=>{f=f.bb;var r=0<=f;f=Math.abs(f)/60;return(r?\"+\":\"-\")+String(\"0000\"+(f/60*100+f%60)).slice(-4)},\"%Z\":f=>f.fb,\"%%\":()=>\"%\"};c=c.replace(/%%/g,\"\\x00\\x00\");for(v in p)c.includes(v)&&(c=c.replace(new RegExp(v,\"g\"),p[v](d)));c=\nc.replace(/\\0\\0/g,\"%\");v=yb(c);if(v.length>b)return 0;D.set(v,a);return v.length-1},Ab=Array(256),Bb=0;256>Bb;++Bb)Ab[Bb]=String.fromCharCode(Bb);Ha=Ab;La=g.BindingError=class extends Error{constructor(a){super(a);this.name=\"BindingError\"}};g.InternalError=class extends Error{constructor(a){super(a);this.name=\"InternalError\"}};\nObject.assign(Pa.prototype,{get(a){return this.Ma[a]},has(a){return void 0!==this.Ma[a]},Ta(a){var b=this.Wa.pop()||this.Ma.length;this.Ma[b]=a;return b},Ua(a){this.Ma[a]=void 0;this.Wa.push(a)}});U.Ma.push({value:void 0},{value:null},{value:!0},{value:!1});U.Pa=U.Ma.length;g.count_emval_handles=function(){for(var a=0,b=U.Pa;b<U.Ma.length;++b)void 0!==U.Ma[b]&&++a;return a};\nvar Cb={a:function(a,b,c){(new Ca(a)).Ta(b,c);Da=a;Ea++;throw Da;},v:function(){return 0},ba:()=>{},N:()=>{},P:()=>{},H:function(){return 0},$:()=>{},V:()=>{},_:()=>{},A:function(){},O:()=>{},L:()=>{},aa:()=>{},M:()=>{},D:function(a,b,c,d,e){b=R(b);c=Oa(c);var h=-1!=b.indexOf(\"u\");h&&(e=(1n<<64n)-1n);T(a,{name:b,fromWireType:function(l){return l},toWireType:function(l,k){if(\"bigint\"!=typeof k&&\"number\"!=typeof k)throw new TypeError(`Cannot convert \"${Ga(k)}\" to ${this.name}`);if(k<d||k>e)throw new TypeError(`Passing a number \"${Ga(k)}\" from JS side to C/C++ side to an argument of type \"${b}\", which is outside the valid range [${d}, ${e}]!`);\nreturn k},argPackAdvance:8,readValueFromPointer:Na(b,c,!h),Qa:null})},ea:function(a,b,c,d,e){var h=Oa(c);b=R(b);T(a,{name:b,fromWireType:function(l){return!!l},toWireType:function(l,k){return k?d:e},argPackAdvance:8,readValueFromPointer:function(l){if(1===c)var k=D;else if(2===c)k=G;else if(4===c)k=J;else throw new TypeError(\"Unknown boolean type size: \"+b);return this.fromWireType(k[l>>h])},Qa:null})},da:function(a,b){b=R(b);T(a,{name:b,fromWireType:function(c){var d=V(c);Qa(c);return d},toWireType:function(c,\nd){return W(d)},argPackAdvance:8,readValueFromPointer:Ra,Qa:null})},C:function(a,b,c){c=Oa(c);b=R(b);T(a,{name:b,fromWireType:function(d){return d},toWireType:function(d,e){return e},argPackAdvance:8,readValueFromPointer:Sa(b,c),Qa:null})},p:function(a,b,c,d,e){b=R(b);-1===e&&(e=4294967295);e=Oa(c);var h=k=>k;if(0===d){var l=32-8*c;h=k=>k<<l>>>l}c=b.includes(\"unsigned\")?function(k,n){return n>>>0}:function(k,n){return n};T(a,{name:b,fromWireType:h,toWireType:c,argPackAdvance:8,readValueFromPointer:Na(b,\ne,0!==d),Qa:null})},l:function(a,b,c){function d(h){h>>=2;var l=K;return new e(l.buffer,l[h+1],l[h])}var e=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array,BigInt64Array,BigUint64Array][b];c=R(c);T(a,{name:c,fromWireType:d,argPackAdvance:8,readValueFromPointer:d},{$a:!0})},E:function(a,b){b=R(b);var c=\"std::string\"===b;T(a,{name:b,fromWireType:function(d){var e=K[d>>2],h=d+4;if(c)for(var l=h,k=0;k<=e;++k){var n=h+k;if(k==e||0==E[n]){l=l?O(E,l,n-l):\"\";if(void 0===\np)var p=l;else p+=String.fromCharCode(0),p+=l;l=n+1}}else{p=Array(e);for(k=0;k<e;++k)p[k]=String.fromCharCode(E[h+k]);p=p.join(\"\")}X(d);return p},toWireType:function(d,e){e instanceof ArrayBuffer&&(e=new Uint8Array(e));var h=\"string\"==typeof e;h||e instanceof Uint8Array||e instanceof Uint8ClampedArray||e instanceof Int8Array||S(\"Cannot pass non-string to std::string\");var l=c&&h?P(e):e.length;var k=qb(4+l+1),n=k+4;K[k>>2]=l;if(c&&h)Q(e,E,n,l+1);else if(h)for(h=0;h<l;++h){var p=e.charCodeAt(h);255<\np&&(X(n),S(\"String has UTF-16 code units that do not fit in 8 bits\"));E[n+h]=p}else for(h=0;h<l;++h)E[n+h]=e[h];null!==d&&d.push(X,k);return k},argPackAdvance:8,readValueFromPointer:Ra,Qa:function(d){X(d)}})},x:function(a,b,c){c=R(c);if(2===b){var d=Ua;var e=Va;var h=Wa;var l=()=>H;var k=1}else 4===b&&(d=Xa,e=Ya,h=Za,l=()=>K,k=2);T(a,{name:c,fromWireType:function(n){for(var p=K[n>>2],v=l(),y,F=n+4,f=0;f<=p;++f){var r=n+4+f*b;if(f==p||0==v[r>>k])F=d(F,r-F),void 0===y?y=F:(y+=String.fromCharCode(0),\ny+=F),F=r+b}X(n);return y},toWireType:function(n,p){\"string\"!=typeof p&&S(`Cannot pass non-string to C++ string type ${c}`);var v=h(p),y=qb(4+v+b);K[y>>2]=v>>k;e(p,y+4,v+b);null!==n&&n.push(X,y);return y},argPackAdvance:8,readValueFromPointer:Ra,Qa:function(n){X(n)}})},fa:function(a,b){b=R(b);T(a,{ab:!0,name:b,argPackAdvance:0,fromWireType:function(){},toWireType:function(){}})},ca:()=>!0,o:function(a,b,c){a=V(a);b=$a(b,\"emval::as\");var d=[],e=W(d);K[c>>2]=e;return b.toWireType(d,a)},h:function(a,\nb,c,d,e){a=eb[a];b=V(b);c=cb(c);var h=[];K[d>>2]=W(h);return a(b,c,h,e)},q:function(a,b,c,d){a=eb[a];b=V(b);c=cb(c);a(b,c,null,d)},b:Qa,F:function(a,b){a=V(a);b=V(b);return a==b},u:function(a){if(0===a)return W(fb());a=cb(a);return W(fb()[a])},g:function(a,b){var c=hb(a,b),d=c[0];b=d.name+\"_$\"+c.slice(1).map(function(v){return v.name}).join(\"_\")+\"$\";var e=jb[b];if(void 0!==e)return e;e=[\"retType\"];for(var h=[d],l=\"\",k=0;k<a-1;++k)l+=(0!==k?\", \":\"\")+\"arg\"+k,e.push(\"argType\"+k),h.push(c[1+k]);var n=\n\"return function \"+ib(\"methodCaller_\"+b)+\"(handle, name, destructors, args) {\\n\",p=0;for(k=0;k<a-1;++k)n+=\"    var arg\"+k+\" = argType\"+k+\".readValueFromPointer(args\"+(p?\"+\"+p:\"\")+\");\\n\",p+=c[k+1].argPackAdvance;n+=\"    var rv = handle[name](\"+l+\");\\n\";for(k=0;k<a-1;++k)c[k+1].deleteObject&&(n+=\"    argType\"+k+\".deleteObject(arg\"+k+\");\\n\");d.ab||(n+=\"    return retType.toWireType(destructors, rv);\\n\");e.push(n+\"};\\n\");a=lb(e).apply(null,h);e=gb(a);return jb[b]=e},r:function(a,b){a=V(a);b=V(b);return W(a[b])},\nc:function(a){4<a&&(U.get(a).Xa+=1)},G:function(a,b,c,d){a=V(a);var e=nb[b];e||(e=mb(b),nb[b]=e);return e(a,c,d)},s:function(){return W([])},k:function(a){a=V(a);for(var b=Array(a.length),c=0;c<a.length;c++)b[c]=a[c];return W(b)},d:function(a){return W(cb(a))},j:function(){return W({})},f:function(a){for(var b=V(a);b.length;){var c=b.pop();b.pop()(c)}Qa(a)},i:function(a,b,c){a=V(a);b=V(b);c=V(c);a[b]=c},e:function(a,b){a=$a(a,\"_emval_take_value\");a=a.readValueFromPointer(b);return W(a)},S:function(a,\nb){a=Y(a);b=Y(b);a=new Date(1E3*a);J[b>>2]=a.getUTCSeconds();J[b+4>>2]=a.getUTCMinutes();J[b+8>>2]=a.getUTCHours();J[b+12>>2]=a.getUTCDate();J[b+16>>2]=a.getUTCMonth();J[b+20>>2]=a.getUTCFullYear()-1900;J[b+24>>2]=a.getUTCDay();J[b+28>>2]=(a.getTime()-Date.UTC(a.getUTCFullYear(),0,1,0,0,0,0))/864E5|0},T:function(a,b){a=Y(a);b=Y(b);a=new Date(1E3*a);J[b>>2]=a.getSeconds();J[b+4>>2]=a.getMinutes();J[b+8>>2]=a.getHours();J[b+12>>2]=a.getDate();J[b+16>>2]=a.getMonth();J[b+20>>2]=a.getFullYear()-1900;\nJ[b+24>>2]=a.getDay();J[b+28>>2]=(Z(a.getFullYear())?ob:pb)[a.getMonth()]+a.getDate()-1|0;J[b+36>>2]=-(60*a.getTimezoneOffset());var c=(new Date(a.getFullYear(),6,1)).getTimezoneOffset(),d=(new Date(a.getFullYear(),0,1)).getTimezoneOffset();J[b+32>>2]=(c!=d&&a.getTimezoneOffset()==Math.min(d,c))|0},U:function(a){a=Y(a);var b=new Date(J[a+20>>2]+1900,J[a+16>>2],J[a+12>>2],J[a+8>>2],J[a+4>>2],J[a>>2],0),c=J[a+32>>2],d=b.getTimezoneOffset(),e=(new Date(b.getFullYear(),6,1)).getTimezoneOffset(),h=(new Date(b.getFullYear(),\n0,1)).getTimezoneOffset(),l=Math.min(h,e);0>c?J[a+32>>2]=Number(e!=h&&l==d):0<c!=(l==d)&&(e=Math.max(h,e),b.setTime(b.getTime()+6E4*((0<c?l:e)-d)));J[a+24>>2]=b.getDay();J[a+28>>2]=(Z(b.getFullYear())?ob:pb)[b.getMonth()]+b.getDate()-1|0;J[a>>2]=b.getSeconds();J[a+4>>2]=b.getMinutes();J[a+8>>2]=b.getHours();J[a+12>>2]=b.getDate();J[a+16>>2]=b.getMonth();J[a+20>>2]=b.getYear();return BigInt(b.getTime()/1E3)},Q:function(){return-52},R:function(){},J:(a,b,c)=>{function d(n){return(n=n.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?\nn[1]:\"GMT\"}var e=(new Date).getFullYear(),h=new Date(e,0,1),l=new Date(e,6,1);e=h.getTimezoneOffset();var k=l.getTimezoneOffset();K[a>>2]=60*Math.max(e,k);J[b>>2]=Number(e!=k);a=d(h);b=d(l);a=rb(a);b=rb(b);k<e?(K[c>>2]=a,K[c+4>>2]=b):(K[c>>2]=b,K[c+4>>2]=a)},t:()=>{ja(\"\")},B:function(){return Date.now()},K:()=>2147483648,n:()=>performance.now(),Z:(a,b,c)=>E.copyWithin(a,b,b+c),I:a=>{var b=E.length;a>>>=0;if(2147483648<a)return!1;for(var c=1;4>=c;c*=2){var d=b*(1+.2/c);d=Math.min(d,a+100663296);var e=\nMath;d=Math.max(a,d);a:{e=e.min.call(e,2147483648,d+(65536-d%65536)%65536)-B.buffer.byteLength+65535>>>16;try{B.grow(e);pa();var h=1;break a}catch(l){}h=void 0}if(h)return!0}return!1},X:(a,b)=>{var c=0;ub().forEach(function(d,e){var h=b+c;e=K[a+4*e>>2]=h;for(h=0;h<d.length;++h)D[e++>>0]=d.charCodeAt(h);D[e>>0]=0;c+=d.length+1});return 0},Y:(a,b)=>{var c=ub();K[a>>2]=c.length;var d=0;c.forEach(function(e){d+=e.length+1});K[b>>2]=d;return 0},w:()=>52,z:()=>52,W:function(){return 70},y:(a,b,c,d)=>{for(var e=\n0,h=0;h<c;h++){var l=K[b>>2],k=K[b+4>>2];b+=8;for(var n=0;n<k;n++){var p=E[l+n],v=vb[a];0===p||10===p?((1===a?ia:z)(O(v,0)),v.length=0):v.push(p)}e+=k}K[d>>2]=e;return 0},ga:zb,m:(a,b,c,d)=>zb(a,b,c,d)};\n(function(){function a(c){C=c=c.exports;B=C.ha;pa();ra.unshift(C.ia);L--;g.monitorRunDependencies&&g.monitorRunDependencies(L);if(0==L&&(null!==ua&&(clearInterval(ua),ua=null),M)){var d=M;M=null;d()}return c}var b={a:Cb};L++;g.monitorRunDependencies&&g.monitorRunDependencies(L);if(g.instantiateWasm)try{return g.instantiateWasm(b,a)}catch(c){z(\"Module.instantiateWasm callback failed with error: \"+c),m(c)}Aa(b,function(c){a(c.instance)}).catch(m);return{}})();g._OrtInit=(a,b)=>(g._OrtInit=C.ja)(a,b);\ng._OrtGetLastError=(a,b)=>(g._OrtGetLastError=C.ka)(a,b);g._OrtCreateSessionOptions=(a,b,c,d,e,h,l,k,n,p)=>(g._OrtCreateSessionOptions=C.la)(a,b,c,d,e,h,l,k,n,p);g._OrtAppendExecutionProvider=(a,b)=>(g._OrtAppendExecutionProvider=C.ma)(a,b);g._OrtAddFreeDimensionOverride=(a,b,c)=>(g._OrtAddFreeDimensionOverride=C.na)(a,b,c);g._OrtAddSessionConfigEntry=(a,b,c)=>(g._OrtAddSessionConfigEntry=C.oa)(a,b,c);g._OrtReleaseSessionOptions=a=>(g._OrtReleaseSessionOptions=C.pa)(a);\ng._OrtCreateSession=(a,b,c)=>(g._OrtCreateSession=C.qa)(a,b,c);g._OrtReleaseSession=a=>(g._OrtReleaseSession=C.ra)(a);g._OrtGetInputOutputCount=(a,b,c)=>(g._OrtGetInputOutputCount=C.sa)(a,b,c);g._OrtGetInputName=(a,b)=>(g._OrtGetInputName=C.ta)(a,b);g._OrtGetOutputName=(a,b)=>(g._OrtGetOutputName=C.ua)(a,b);g._OrtFree=a=>(g._OrtFree=C.va)(a);g._OrtCreateTensor=(a,b,c,d,e)=>(g._OrtCreateTensor=C.wa)(a,b,c,d,e);g._OrtGetTensorData=(a,b,c,d,e)=>(g._OrtGetTensorData=C.xa)(a,b,c,d,e);\ng._OrtReleaseTensor=a=>(g._OrtReleaseTensor=C.ya)(a);g._OrtCreateRunOptions=(a,b,c,d)=>(g._OrtCreateRunOptions=C.za)(a,b,c,d);g._OrtAddRunConfigEntry=(a,b,c)=>(g._OrtAddRunConfigEntry=C.Aa)(a,b,c);g._OrtReleaseRunOptions=a=>(g._OrtReleaseRunOptions=C.Ba)(a);g._OrtRun=(a,b,c,d,e,h,l,k)=>(g._OrtRun=C.Ca)(a,b,c,d,e,h,l,k);g._OrtEndProfiling=a=>(g._OrtEndProfiling=C.Da)(a);var qb=g._malloc=a=>(qb=g._malloc=C.Ea)(a),X=g._free=a=>(X=g._free=C.Fa)(a),ab=a=>(ab=C.Ga)(a);\ng.__embind_initialize_bindings=()=>(g.__embind_initialize_bindings=C.Ha)();var Db=()=>(Db=C.Ja)(),Eb=a=>(Eb=C.Ka)(a),Fb=a=>(Fb=C.La)(a);g.stackAlloc=Fb;g.stackSave=Db;g.stackRestore=Eb;g.UTF8ToString=(a,b)=>a?O(E,a,b):\"\";g.stringToUTF8=(a,b,c)=>Q(a,E,b,c);g.lengthBytesUTF8=P;var Gb;M=function Hb(){Gb||Ib();Gb||(M=Hb)};\nfunction Ib(){function a(){if(!Gb&&(Gb=!0,g.calledRun=!0,!ka)){Ba(ra);aa(g);if(g.onRuntimeInitialized)g.onRuntimeInitialized();if(g.postRun)for(\"function\"==typeof g.postRun&&(g.postRun=[g.postRun]);g.postRun.length;){var b=g.postRun.shift();sa.unshift(b)}Ba(sa)}}if(!(0<L)){if(g.preRun)for(\"function\"==typeof g.preRun&&(g.preRun=[g.preRun]);g.preRun.length;)ta();Ba(qa);0<L||(g.setStatus?(g.setStatus(\"Running...\"),setTimeout(function(){setTimeout(function(){g.setStatus(\"\")},1);a()},1)):a())}}\nif(g.preInit)for(\"function\"==typeof g.preInit&&(g.preInit=[g.preInit]);0<g.preInit.length;)g.preInit.pop()();Ib();\n\n\n  return moduleArg.ready\n}\n\n);\n})();\nif (typeof exports === 'object' && typeof module === 'object')\n  module.exports = ortWasm;\nelse if (typeof define === 'function' && define['amd'])\n  define([], () => ortWasm);\n","\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Callback as used by {@link util.asPromise}.\r\n * @typedef asPromiseCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {...*} params Additional arguments\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {asPromiseCallback} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params  = new Array(arguments.length - 1),\r\n        offset  = 0,\r\n        index   = 2,\r\n        pending = true;\r\n    while (index < arguments.length)\r\n        params[offset++] = arguments[index++];\r\n    return new Promise(function executor(resolve, reject) {\r\n        params[offset] = function callback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var params = new Array(arguments.length - 1),\r\n                        offset = 0;\r\n                    while (offset < params.length)\r\n                        params[offset++] = arguments[offset];\r\n                    resolve.apply(null, params);\r\n                }\r\n            }\r\n        };\r\n        try {\r\n            fn.apply(ctx || null, params);\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var parts = null,\r\n        chunk = [];\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                chunk[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                chunk[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                chunk[i++] = b64[t | b >> 6];\r\n                chunk[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (j) {\r\n        chunk[i++] = b64[t];\r\n        chunk[i++] = 61;\r\n        if (j === 1)\r\n            chunk[i++] = 61;\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\n\r\nmodule.exports = factory(factory);\r\n\r\n/**\r\n * Reads / writes floats / doubles from / to buffers.\r\n * @name util.float\r\n * @namespace\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using little endian byte order.\r\n * @name util.float.writeFloatLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using big endian byte order.\r\n * @name util.float.writeFloatBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using little endian byte order.\r\n * @name util.float.readFloatLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using big endian byte order.\r\n * @name util.float.readFloatBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using little endian byte order.\r\n * @name util.float.writeDoubleLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using big endian byte order.\r\n * @name util.float.writeDoubleBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using little endian byte order.\r\n * @name util.float.readDoubleLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using big endian byte order.\r\n * @name util.float.readDoubleBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n// Factory function for the purpose of node-based testing in modified global environments\r\nfunction factory(exports) {\r\n\r\n    // float: typed array\r\n    if (typeof Float32Array !== \"undefined\") (function() {\r\n\r\n        var f32 = new Float32Array([ -0 ]),\r\n            f8b = new Uint8Array(f32.buffer),\r\n            le  = f8b[3] === 128;\r\n\r\n        function writeFloat_f32_cpy(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n        }\r\n\r\n        function writeFloat_f32_rev(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[3];\r\n            buf[pos + 1] = f8b[2];\r\n            buf[pos + 2] = f8b[1];\r\n            buf[pos + 3] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\r\n\r\n        function readFloat_f32_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        function readFloat_f32_rev(buf, pos) {\r\n            f8b[3] = buf[pos    ];\r\n            f8b[2] = buf[pos + 1];\r\n            f8b[1] = buf[pos + 2];\r\n            f8b[0] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\r\n\r\n    // float: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeFloat_ieee754(writeUint, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0)\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n            else if (isNaN(val))\r\n                writeUint(2143289344, buf, pos);\r\n            else if (val > 3.4028234663852886e+38) // +-Infinity\r\n                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n            else if (val < 1.1754943508222875e-38) // denormal\r\n                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n            else {\r\n                var exponent = Math.floor(Math.log(val) / Math.LN2),\r\n                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n            }\r\n        }\r\n\r\n        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\r\n        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\r\n\r\n        function readFloat_ieee754(readUint, buf, pos) {\r\n            var uint = readUint(buf, pos),\r\n                sign = (uint >> 31) * 2 + 1,\r\n                exponent = uint >>> 23 & 255,\r\n                mantissa = uint & 8388607;\r\n            return exponent === 255\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 1.401298464324817e-45 * mantissa\r\n                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n        }\r\n\r\n        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\r\n        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\r\n\r\n    })();\r\n\r\n    // double: typed array\r\n    if (typeof Float64Array !== \"undefined\") (function() {\r\n\r\n        var f64 = new Float64Array([-0]),\r\n            f8b = new Uint8Array(f64.buffer),\r\n            le  = f8b[7] === 128;\r\n\r\n        function writeDouble_f64_cpy(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n            buf[pos + 4] = f8b[4];\r\n            buf[pos + 5] = f8b[5];\r\n            buf[pos + 6] = f8b[6];\r\n            buf[pos + 7] = f8b[7];\r\n        }\r\n\r\n        function writeDouble_f64_rev(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[7];\r\n            buf[pos + 1] = f8b[6];\r\n            buf[pos + 2] = f8b[5];\r\n            buf[pos + 3] = f8b[4];\r\n            buf[pos + 4] = f8b[3];\r\n            buf[pos + 5] = f8b[2];\r\n            buf[pos + 6] = f8b[1];\r\n            buf[pos + 7] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\r\n\r\n        function readDouble_f64_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            f8b[4] = buf[pos + 4];\r\n            f8b[5] = buf[pos + 5];\r\n            f8b[6] = buf[pos + 6];\r\n            f8b[7] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        function readDouble_f64_rev(buf, pos) {\r\n            f8b[7] = buf[pos    ];\r\n            f8b[6] = buf[pos + 1];\r\n            f8b[5] = buf[pos + 2];\r\n            f8b[4] = buf[pos + 3];\r\n            f8b[3] = buf[pos + 4];\r\n            f8b[2] = buf[pos + 5];\r\n            f8b[1] = buf[pos + 6];\r\n            f8b[0] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\r\n\r\n    // double: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);\r\n            } else if (isNaN(val)) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(2146959360, buf, pos + off1);\r\n            } else if (val > 1.7976931348623157e+308) { // +-Infinity\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\r\n            } else {\r\n                var mantissa;\r\n                if (val < 2.2250738585072014e-308) { // denormal\r\n                    mantissa = val / 5e-324;\r\n                    writeUint(mantissa >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\r\n                } else {\r\n                    var exponent = Math.floor(Math.log(val) / Math.LN2);\r\n                    if (exponent === 1024)\r\n                        exponent = 1023;\r\n                    mantissa = val * Math.pow(2, -exponent);\r\n                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\r\n                }\r\n            }\r\n        }\r\n\r\n        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\r\n        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\r\n\r\n        function readDouble_ieee754(readUint, off0, off1, buf, pos) {\r\n            var lo = readUint(buf, pos + off0),\r\n                hi = readUint(buf, pos + off1);\r\n            var sign = (hi >> 31) * 2 + 1,\r\n                exponent = hi >>> 20 & 2047,\r\n                mantissa = 4294967296 * (hi & 1048575) + lo;\r\n            return exponent === 2047\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 5e-324 * mantissa\r\n                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n        }\r\n\r\n        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\r\n        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\r\n\r\n    })();\r\n\r\n    return exports;\r\n}\r\n\r\n// uint helpers\r\n\r\nfunction writeUintLE(val, buf, pos) {\r\n    buf[pos    ] =  val        & 255;\r\n    buf[pos + 1] =  val >>> 8  & 255;\r\n    buf[pos + 2] =  val >>> 16 & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\nfunction writeUintBE(val, buf, pos) {\r\n    buf[pos    ] =  val >>> 24;\r\n    buf[pos + 1] =  val >>> 16 & 255;\r\n    buf[pos + 2] =  val >>> 8  & 255;\r\n    buf[pos + 3] =  val        & 255;\r\n}\r\n\r\nfunction readUintLE(buf, pos) {\r\n    return (buf[pos    ]\r\n          | buf[pos + 1] << 8\r\n          | buf[pos + 2] << 16\r\n          | buf[pos + 3] << 24) >>> 0;\r\n}\r\n\r\nfunction readUintBE(buf, pos) {\r\n    return (buf[pos    ] << 24\r\n          | buf[pos + 1] << 16\r\n          | buf[pos + 2] << 8\r\n          | buf[pos + 3]) >>> 0;\r\n}\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","\"use strict\";\r\nexports.__esModule = true;\r\nvar Guid = /** @class */ (function () {\r\n    function Guid(guid) {\r\n        if (!guid) {\r\n            throw new TypeError(\"Invalid argument; `value` has no value.\");\r\n        }\r\n        this.value = Guid.EMPTY;\r\n        if (guid && Guid.isGuid(guid)) {\r\n            this.value = guid;\r\n        }\r\n    }\r\n    Guid.isGuid = function (guid) {\r\n        var value = guid.toString();\r\n        return guid && (guid instanceof Guid || Guid.validator.test(value));\r\n    };\r\n    Guid.create = function () {\r\n        return new Guid([Guid.gen(2), Guid.gen(1), Guid.gen(1), Guid.gen(1), Guid.gen(3)].join(\"-\"));\r\n    };\r\n    Guid.createEmpty = function () {\r\n        return new Guid(\"emptyguid\");\r\n    };\r\n    Guid.parse = function (guid) {\r\n        return new Guid(guid);\r\n    };\r\n    Guid.raw = function () {\r\n        return [Guid.gen(2), Guid.gen(1), Guid.gen(1), Guid.gen(1), Guid.gen(3)].join(\"-\");\r\n    };\r\n    Guid.gen = function (count) {\r\n        var out = \"\";\r\n        for (var i = 0; i < count; i++) {\r\n            // tslint:disable-next-line:no-bitwise\r\n            out += (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\r\n        }\r\n        return out;\r\n    };\r\n    Guid.prototype.equals = function (other) {\r\n        // Comparing string `value` against provided `guid` will auto-call\r\n        // toString on `guid` for comparison\r\n        return Guid.isGuid(other) && this.value === other.toString();\r\n    };\r\n    Guid.prototype.isEmpty = function () {\r\n        return this.value === Guid.EMPTY;\r\n    };\r\n    Guid.prototype.toString = function () {\r\n        return this.value;\r\n    };\r\n    Guid.prototype.toJSON = function () {\r\n        return {\r\n            value: this.value\r\n        };\r\n    };\r\n    Guid.validator = new RegExp(\"^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$\", \"i\");\r\n    Guid.EMPTY = \"00000000-0000-0000-0000-000000000000\";\r\n    return Guid;\r\n}());\r\nexports.Guid = Guid;\r\n","// minimal library entry point.\n\n\"use strict\";\nmodule.exports = require(\"./src/index-minimal\");\n","\"use strict\";\nvar protobuf = exports;\n\n/**\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\n * @name build\n * @type {string}\n * @const\n */\nprotobuf.build = \"minimal\";\n\n// Serialization\nprotobuf.Writer       = require(\"./writer\");\nprotobuf.BufferWriter = require(\"./writer_buffer\");\nprotobuf.Reader       = require(\"./reader\");\nprotobuf.BufferReader = require(\"./reader_buffer\");\n\n// Utility\nprotobuf.util         = require(\"./util/minimal\");\nprotobuf.rpc          = require(\"./rpc\");\nprotobuf.roots        = require(\"./roots\");\nprotobuf.configure    = configure;\n\n/* istanbul ignore next */\n/**\n * Reconfigures the library according to the environment.\n * @returns {undefined}\n */\nfunction configure() {\n    protobuf.util._configure();\n    protobuf.Writer._configure(protobuf.BufferWriter);\n    protobuf.Reader._configure(protobuf.BufferReader);\n}\n\n// Set up buffer utility according to the environment\nconfigure();\n","\"use strict\";\nmodule.exports = Reader;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferReader; // cyclic\n\nvar LongBits  = util.LongBits,\n    utf8      = util.utf8;\n\n/* istanbul ignore next */\nfunction indexOutOfRange(reader, writeLength) {\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\n}\n\n/**\n * Constructs a new reader instance using the specified buffer.\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n * @param {Uint8Array} buffer Buffer to read from\n */\nfunction Reader(buffer) {\n\n    /**\n     * Read buffer.\n     * @type {Uint8Array}\n     */\n    this.buf = buffer;\n\n    /**\n     * Read buffer position.\n     * @type {number}\n     */\n    this.pos = 0;\n\n    /**\n     * Read buffer length.\n     * @type {number}\n     */\n    this.len = buffer.length;\n}\n\nvar create_array = typeof Uint8Array !== \"undefined\"\n    ? function create_typed_array(buffer) {\n        if (buffer instanceof Uint8Array || Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    }\n    /* istanbul ignore next */\n    : function create_array(buffer) {\n        if (Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    };\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup(buffer) {\n            return (Reader.create = function create_buffer(buffer) {\n                return util.Buffer.isBuffer(buffer)\n                    ? new BufferReader(buffer)\n                    /* istanbul ignore next */\n                    : create_array(buffer);\n            })(buffer);\n        }\n        /* istanbul ignore next */\n        : create_array;\n};\n\n/**\n * Creates a new reader using the specified buffer.\n * @function\n * @param {Uint8Array|Buffer} buffer Buffer to read from\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\n * @throws {Error} If `buffer` is not a valid buffer\n */\nReader.create = create();\n\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\n\n/**\n * Reads a varint as an unsigned 32 bit value.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.uint32 = (function read_uint32_setup() {\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\n    return function read_uint32() {\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\n\n        /* istanbul ignore if */\n        if ((this.pos += 5) > this.len) {\n            this.pos = this.len;\n            throw indexOutOfRange(this, 10);\n        }\n        return value;\n    };\n})();\n\n/**\n * Reads a varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.int32 = function read_int32() {\n    return this.uint32() | 0;\n};\n\n/**\n * Reads a zig-zag encoded varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.sint32 = function read_sint32() {\n    var value = this.uint32();\n    return value >>> 1 ^ -(value & 1) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readLongVarint() {\n    // tends to deopt with local vars for octet etc.\n    var bits = new LongBits(0, 0);\n    var i = 0;\n    if (this.len - this.pos > 4) { // fast route (lo)\n        for (; i < 4; ++i) {\n            // 1st..4th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 5th\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\n        if (this.buf[this.pos++] < 128)\n            return bits;\n        i = 0;\n    } else {\n        for (; i < 3; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 1st..3th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 4th\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\n        return bits;\n    }\n    if (this.len - this.pos > 4) { // fast route (hi)\n        for (; i < 5; ++i) {\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    } else {\n        for (; i < 5; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    }\n    /* istanbul ignore next */\n    throw Error(\"invalid varint encoding\");\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads a varint as a signed 64 bit value.\n * @name Reader#int64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as an unsigned 64 bit value.\n * @name Reader#uint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a zig-zag encoded varint as a signed 64 bit value.\n * @name Reader#sint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as a boolean.\n * @returns {boolean} Value read\n */\nReader.prototype.bool = function read_bool() {\n    return this.uint32() !== 0;\n};\n\nfunction readFixed32_end(buf, end) { // note that this uses `end`, not `pos`\n    return (buf[end - 4]\n          | buf[end - 3] << 8\n          | buf[end - 2] << 16\n          | buf[end - 1] << 24) >>> 0;\n}\n\n/**\n * Reads fixed 32 bits as an unsigned 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.fixed32 = function read_fixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4);\n};\n\n/**\n * Reads fixed 32 bits as a signed 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.sfixed32 = function read_sfixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readFixed64(/* this: Reader */) {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 8);\n\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads fixed 64 bits.\n * @name Reader#fixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads zig-zag encoded fixed 64 bits.\n * @name Reader#sfixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a float (32 bit) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.float = function read_float() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readFloatLE(this.buf, this.pos);\n    this.pos += 4;\n    return value;\n};\n\n/**\n * Reads a double (64 bit float) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.double = function read_double() {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readDoubleLE(this.buf, this.pos);\n    this.pos += 8;\n    return value;\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @returns {Uint8Array} Value read\n */\nReader.prototype.bytes = function read_bytes() {\n    var length = this.uint32(),\n        start  = this.pos,\n        end    = this.pos + length;\n\n    /* istanbul ignore if */\n    if (end > this.len)\n        throw indexOutOfRange(this, length);\n\n    this.pos += length;\n    if (Array.isArray(this.buf)) // plain array\n        return this.buf.slice(start, end);\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\n        ? new this.buf.constructor(0)\n        : this._slice.call(this.buf, start, end);\n};\n\n/**\n * Reads a string preceeded by its byte length as a varint.\n * @returns {string} Value read\n */\nReader.prototype.string = function read_string() {\n    var bytes = this.bytes();\n    return utf8.read(bytes, 0, bytes.length);\n};\n\n/**\n * Skips the specified number of bytes if specified, otherwise skips a varint.\n * @param {number} [length] Length if known, otherwise a varint is assumed\n * @returns {Reader} `this`\n */\nReader.prototype.skip = function skip(length) {\n    if (typeof length === \"number\") {\n        /* istanbul ignore if */\n        if (this.pos + length > this.len)\n            throw indexOutOfRange(this, length);\n        this.pos += length;\n    } else {\n        do {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n        } while (this.buf[this.pos++] & 128);\n    }\n    return this;\n};\n\n/**\n * Skips the next element of the specified wire type.\n * @param {number} wireType Wire type received\n * @returns {Reader} `this`\n */\nReader.prototype.skipType = function(wireType) {\n    switch (wireType) {\n        case 0:\n            this.skip();\n            break;\n        case 1:\n            this.skip(8);\n            break;\n        case 2:\n            this.skip(this.uint32());\n            break;\n        case 3:\n            while ((wireType = this.uint32() & 7) !== 4) {\n                this.skipType(wireType);\n            }\n            break;\n        case 5:\n            this.skip(4);\n            break;\n\n        /* istanbul ignore next */\n        default:\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\n    }\n    return this;\n};\n\nReader._configure = function(BufferReader_) {\n    BufferReader = BufferReader_;\n    Reader.create = create();\n    BufferReader._configure();\n\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\n    util.merge(Reader.prototype, {\n\n        int64: function read_int64() {\n            return readLongVarint.call(this)[fn](false);\n        },\n\n        uint64: function read_uint64() {\n            return readLongVarint.call(this)[fn](true);\n        },\n\n        sint64: function read_sint64() {\n            return readLongVarint.call(this).zzDecode()[fn](false);\n        },\n\n        fixed64: function read_fixed64() {\n            return readFixed64.call(this)[fn](true);\n        },\n\n        sfixed64: function read_sfixed64() {\n            return readFixed64.call(this)[fn](false);\n        }\n\n    });\n};\n","\"use strict\";\nmodule.exports = BufferReader;\n\n// extends Reader\nvar Reader = require(\"./reader\");\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer reader instance.\n * @classdesc Wire format reader using node buffers.\n * @extends Reader\n * @constructor\n * @param {Buffer} buffer Buffer to read from\n */\nfunction BufferReader(buffer) {\n    Reader.call(this, buffer);\n\n    /**\n     * Read buffer.\n     * @name BufferReader#buf\n     * @type {Buffer}\n     */\n}\n\nBufferReader._configure = function () {\n    /* istanbul ignore else */\n    if (util.Buffer)\n        BufferReader.prototype._slice = util.Buffer.prototype.slice;\n};\n\n\n/**\n * @override\n */\nBufferReader.prototype.string = function read_string_buffer() {\n    var len = this.uint32(); // modifies pos\n    return this.buf.utf8Slice\n        ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len))\n        : this.buf.toString(\"utf-8\", this.pos, this.pos = Math.min(this.pos + len, this.len));\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @name BufferReader#bytes\n * @function\n * @returns {Buffer} Value read\n */\n\nBufferReader._configure();\n","\"use strict\";\nmodule.exports = {};\n\n/**\n * Named roots.\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\n * Can also be used manually to make roots available across modules.\n * @name roots\n * @type {Object.<string,Root>}\n * @example\n * // pbjs -r myroot -o compiled.js ...\n *\n * // in another module:\n * require(\"./compiled.js\");\n *\n * // in any subsequent module:\n * var root = protobuf.roots[\"myroot\"];\n */\n","\"use strict\";\n\n/**\n * Streaming RPC helpers.\n * @namespace\n */\nvar rpc = exports;\n\n/**\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\n * @typedef RPCImpl\n * @type {function}\n * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\n * @param {Uint8Array} requestData Request data\n * @param {RPCImplCallback} callback Callback function\n * @returns {undefined}\n * @example\n * function rpcImpl(method, requestData, callback) {\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\n *         throw Error(\"no such method\");\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\n *         callback(err, responseData);\n *     });\n * }\n */\n\n/**\n * Node-style callback as used by {@link RPCImpl}.\n * @typedef RPCImplCallback\n * @type {function}\n * @param {Error|null} error Error, if any, otherwise `null`\n * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\n * @returns {undefined}\n */\n\nrpc.Service = require(\"./rpc/service\");\n","\"use strict\";\nmodule.exports = Service;\n\nvar util = require(\"../util/minimal\");\n\n// Extends EventEmitter\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\n\n/**\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\n *\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\n * @typedef rpc.ServiceMethodCallback\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {Error|null} error Error, if any\n * @param {TRes} [response] Response message\n * @returns {undefined}\n */\n\n/**\n * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\n * @typedef rpc.ServiceMethod\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\n * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\n */\n\n/**\n * Constructs a new RPC service instance.\n * @classdesc An RPC service as returned by {@link Service#create}.\n * @exports rpc.Service\n * @extends util.EventEmitter\n * @constructor\n * @param {RPCImpl} rpcImpl RPC implementation\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n */\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\n\n    if (typeof rpcImpl !== \"function\")\n        throw TypeError(\"rpcImpl must be a function\");\n\n    util.EventEmitter.call(this);\n\n    /**\n     * RPC implementation. Becomes `null` once the service is ended.\n     * @type {RPCImpl|null}\n     */\n    this.rpcImpl = rpcImpl;\n\n    /**\n     * Whether requests are length-delimited.\n     * @type {boolean}\n     */\n    this.requestDelimited = Boolean(requestDelimited);\n\n    /**\n     * Whether responses are length-delimited.\n     * @type {boolean}\n     */\n    this.responseDelimited = Boolean(responseDelimited);\n}\n\n/**\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\n * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\n * @param {Constructor<TReq>} requestCtor Request constructor\n * @param {Constructor<TRes>} responseCtor Response constructor\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\n * @returns {undefined}\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n */\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\n\n    if (!request)\n        throw TypeError(\"request must be specified\");\n\n    var self = this;\n    if (!callback)\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\n\n    if (!self.rpcImpl) {\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\n        return undefined;\n    }\n\n    try {\n        return self.rpcImpl(\n            method,\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\n            function rpcCallback(err, response) {\n\n                if (err) {\n                    self.emit(\"error\", err, method);\n                    return callback(err);\n                }\n\n                if (response === null) {\n                    self.end(/* endedByRPC */ true);\n                    return undefined;\n                }\n\n                if (!(response instanceof responseCtor)) {\n                    try {\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\n                    } catch (err) {\n                        self.emit(\"error\", err, method);\n                        return callback(err);\n                    }\n                }\n\n                self.emit(\"data\", response, method);\n                return callback(null, response);\n            }\n        );\n    } catch (err) {\n        self.emit(\"error\", err, method);\n        setTimeout(function() { callback(err); }, 0);\n        return undefined;\n    }\n};\n\n/**\n * Ends this service and emits the `end` event.\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\n * @returns {rpc.Service} `this`\n */\nService.prototype.end = function end(endedByRPC) {\n    if (this.rpcImpl) {\n        if (!endedByRPC) // signal end to rpcImpl\n            this.rpcImpl(null, null, null);\n        this.rpcImpl = null;\n        this.emit(\"end\").off();\n    }\n    return this;\n};\n","\"use strict\";\nmodule.exports = LongBits;\n\nvar util = require(\"../util/minimal\");\n\n/**\n * Constructs new long bits.\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\n * @memberof util\n * @constructor\n * @param {number} lo Low 32 bits, unsigned\n * @param {number} hi High 32 bits, unsigned\n */\nfunction LongBits(lo, hi) {\n\n    // note that the casts below are theoretically unnecessary as of today, but older statically\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\n\n    /**\n     * Low bits.\n     * @type {number}\n     */\n    this.lo = lo >>> 0;\n\n    /**\n     * High bits.\n     * @type {number}\n     */\n    this.hi = hi >>> 0;\n}\n\n/**\n * Zero bits.\n * @memberof util.LongBits\n * @type {util.LongBits}\n */\nvar zero = LongBits.zero = new LongBits(0, 0);\n\nzero.toNumber = function() { return 0; };\nzero.zzEncode = zero.zzDecode = function() { return this; };\nzero.length = function() { return 1; };\n\n/**\n * Zero hash.\n * @memberof util.LongBits\n * @type {string}\n */\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\n\n/**\n * Constructs new long bits from the specified number.\n * @param {number} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.fromNumber = function fromNumber(value) {\n    if (value === 0)\n        return zero;\n    var sign = value < 0;\n    if (sign)\n        value = -value;\n    var lo = value >>> 0,\n        hi = (value - lo) / 4294967296 >>> 0;\n    if (sign) {\n        hi = ~hi >>> 0;\n        lo = ~lo >>> 0;\n        if (++lo > 4294967295) {\n            lo = 0;\n            if (++hi > 4294967295)\n                hi = 0;\n        }\n    }\n    return new LongBits(lo, hi);\n};\n\n/**\n * Constructs new long bits from a number, long or string.\n * @param {Long|number|string} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.from = function from(value) {\n    if (typeof value === \"number\")\n        return LongBits.fromNumber(value);\n    if (util.isString(value)) {\n        /* istanbul ignore else */\n        if (util.Long)\n            value = util.Long.fromString(value);\n        else\n            return LongBits.fromNumber(parseInt(value, 10));\n    }\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\n};\n\n/**\n * Converts this long bits to a possibly unsafe JavaScript number.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {number} Possibly unsafe number\n */\nLongBits.prototype.toNumber = function toNumber(unsigned) {\n    if (!unsigned && this.hi >>> 31) {\n        var lo = ~this.lo + 1 >>> 0,\n            hi = ~this.hi     >>> 0;\n        if (!lo)\n            hi = hi + 1 >>> 0;\n        return -(lo + hi * 4294967296);\n    }\n    return this.lo + this.hi * 4294967296;\n};\n\n/**\n * Converts this long bits to a long.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long} Long\n */\nLongBits.prototype.toLong = function toLong(unsigned) {\n    return util.Long\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\n        /* istanbul ignore next */\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\n};\n\nvar charCodeAt = String.prototype.charCodeAt;\n\n/**\n * Constructs new long bits from the specified 8 characters long hash.\n * @param {string} hash Hash\n * @returns {util.LongBits} Bits\n */\nLongBits.fromHash = function fromHash(hash) {\n    if (hash === zeroHash)\n        return zero;\n    return new LongBits(\n        ( charCodeAt.call(hash, 0)\n        | charCodeAt.call(hash, 1) << 8\n        | charCodeAt.call(hash, 2) << 16\n        | charCodeAt.call(hash, 3) << 24) >>> 0\n    ,\n        ( charCodeAt.call(hash, 4)\n        | charCodeAt.call(hash, 5) << 8\n        | charCodeAt.call(hash, 6) << 16\n        | charCodeAt.call(hash, 7) << 24) >>> 0\n    );\n};\n\n/**\n * Converts this long bits to a 8 characters long hash.\n * @returns {string} Hash\n */\nLongBits.prototype.toHash = function toHash() {\n    return String.fromCharCode(\n        this.lo        & 255,\n        this.lo >>> 8  & 255,\n        this.lo >>> 16 & 255,\n        this.lo >>> 24      ,\n        this.hi        & 255,\n        this.hi >>> 8  & 255,\n        this.hi >>> 16 & 255,\n        this.hi >>> 24\n    );\n};\n\n/**\n * Zig-zag encodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzEncode = function zzEncode() {\n    var mask =   this.hi >> 31;\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Zig-zag decodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzDecode = function zzDecode() {\n    var mask = -(this.lo & 1);\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Calculates the length of this longbits when encoded as a varint.\n * @returns {number} Length\n */\nLongBits.prototype.length = function length() {\n    var part0 =  this.lo,\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\n        part2 =  this.hi >>> 24;\n    return part2 === 0\n         ? part1 === 0\n           ? part0 < 16384\n             ? part0 < 128 ? 1 : 2\n             : part0 < 2097152 ? 3 : 4\n           : part1 < 16384\n             ? part1 < 128 ? 5 : 6\n             : part1 < 2097152 ? 7 : 8\n         : part2 < 128 ? 9 : 10;\n};\n","\"use strict\";\nvar util = exports;\n\n// used to return a Promise where callback is omitted\nutil.asPromise = require(\"@protobufjs/aspromise\");\n\n// converts to / from base64 encoded strings\nutil.base64 = require(\"@protobufjs/base64\");\n\n// base class of rpc.Service\nutil.EventEmitter = require(\"@protobufjs/eventemitter\");\n\n// float handling accross browsers\nutil.float = require(\"@protobufjs/float\");\n\n// requires modules optionally and hides the call from bundlers\nutil.inquire = require(\"@protobufjs/inquire\");\n\n// converts to / from utf8 encoded strings\nutil.utf8 = require(\"@protobufjs/utf8\");\n\n// provides a node-like buffer pool in the browser\nutil.pool = require(\"@protobufjs/pool\");\n\n// utility to work with the low and high bits of a 64 bit value\nutil.LongBits = require(\"./longbits\");\n\n/**\n * Whether running within node or not.\n * @memberof util\n * @type {boolean}\n */\nutil.isNode = Boolean(typeof global !== \"undefined\"\n                   && global\n                   && global.process\n                   && global.process.versions\n                   && global.process.versions.node);\n\n/**\n * Global object reference.\n * @memberof util\n * @type {Object}\n */\nutil.global = util.isNode && global\n           || typeof window !== \"undefined\" && window\n           || typeof self   !== \"undefined\" && self\n           || this; // eslint-disable-line no-invalid-this\n\n/**\n * An immuable empty array.\n * @memberof util\n * @type {Array.<*>}\n * @const\n */\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\n\n/**\n * An immutable empty object.\n * @type {Object}\n * @const\n */\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\n\n/**\n * Tests if the specified value is an integer.\n * @function\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is an integer\n */\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\n};\n\n/**\n * Tests if the specified value is a string.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a string\n */\nutil.isString = function isString(value) {\n    return typeof value === \"string\" || value instanceof String;\n};\n\n/**\n * Tests if the specified value is a non-null object.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a non-null object\n */\nutil.isObject = function isObject(value) {\n    return value && typeof value === \"object\";\n};\n\n/**\n * Checks if a property on a message is considered to be present.\n * This is an alias of {@link util.isSet}.\n * @function\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isset =\n\n/**\n * Checks if a property on a message is considered to be present.\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isSet = function isSet(obj, prop) {\n    var value = obj[prop];\n    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\n    return false;\n};\n\n/**\n * Any compatible Buffer instance.\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\n * @interface Buffer\n * @extends Uint8Array\n */\n\n/**\n * Node's Buffer class if available.\n * @type {Constructor<Buffer>}\n */\nutil.Buffer = (function() {\n    try {\n        var Buffer = util.inquire(\"buffer\").Buffer;\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\n    } catch (e) {\n        /* istanbul ignore next */\n        return null;\n    }\n})();\n\n// Internal alias of or polyfull for Buffer.from.\nutil._Buffer_from = null;\n\n// Internal alias of or polyfill for Buffer.allocUnsafe.\nutil._Buffer_allocUnsafe = null;\n\n/**\n * Creates a new buffer of whatever type supported by the environment.\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\n * @returns {Uint8Array|Buffer} Buffer\n */\nutil.newBuffer = function newBuffer(sizeOrArray) {\n    /* istanbul ignore next */\n    return typeof sizeOrArray === \"number\"\n        ? util.Buffer\n            ? util._Buffer_allocUnsafe(sizeOrArray)\n            : new util.Array(sizeOrArray)\n        : util.Buffer\n            ? util._Buffer_from(sizeOrArray)\n            : typeof Uint8Array === \"undefined\"\n                ? sizeOrArray\n                : new Uint8Array(sizeOrArray);\n};\n\n/**\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\n * @type {Constructor<Uint8Array>}\n */\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\n\n/**\n * Any compatible Long instance.\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\n * @interface Long\n * @property {number} low Low bits\n * @property {number} high High bits\n * @property {boolean} unsigned Whether unsigned or not\n */\n\n/**\n * Long.js's Long class if available.\n * @type {Constructor<Long>}\n */\nutil.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long\n         || /* istanbul ignore next */ util.global.Long\n         || util.inquire(\"long\");\n\n/**\n * Regular expression used to verify 2 bit (`bool`) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key2Re = /^true|false|0|1$/;\n\n/**\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\n\n/**\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\n\n/**\n * Converts a number or long to an 8 characters long hash string.\n * @param {Long|number} value Value to convert\n * @returns {string} Hash\n */\nutil.longToHash = function longToHash(value) {\n    return value\n        ? util.LongBits.from(value).toHash()\n        : util.LongBits.zeroHash;\n};\n\n/**\n * Converts an 8 characters long hash string to a long or number.\n * @param {string} hash Hash\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long|number} Original value\n */\nutil.longFromHash = function longFromHash(hash, unsigned) {\n    var bits = util.LongBits.fromHash(hash);\n    if (util.Long)\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\n    return bits.toNumber(Boolean(unsigned));\n};\n\n/**\n * Merges the properties of the source object into the destination object.\n * @memberof util\n * @param {Object.<string,*>} dst Destination object\n * @param {Object.<string,*>} src Source object\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\n * @returns {Object.<string,*>} Destination object\n */\nfunction merge(dst, src, ifNotSet) { // used by converters\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\n        if (dst[keys[i]] === undefined || !ifNotSet)\n            dst[keys[i]] = src[keys[i]];\n    return dst;\n}\n\nutil.merge = merge;\n\n/**\n * Converts the first character of a string to lower case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */\nutil.lcFirst = function lcFirst(str) {\n    return str.charAt(0).toLowerCase() + str.substring(1);\n};\n\n/**\n * Creates a custom error constructor.\n * @memberof util\n * @param {string} name Error name\n * @returns {Constructor<Error>} Custom error constructor\n */\nfunction newError(name) {\n\n    function CustomError(message, properties) {\n\n        if (!(this instanceof CustomError))\n            return new CustomError(message, properties);\n\n        // Error.call(this, message);\n        // ^ just returns a new error instance because the ctor can be called as a function\n\n        Object.defineProperty(this, \"message\", { get: function() { return message; } });\n\n        /* istanbul ignore next */\n        if (Error.captureStackTrace) // node\n            Error.captureStackTrace(this, CustomError);\n        else\n            Object.defineProperty(this, \"stack\", { value: new Error().stack || \"\" });\n\n        if (properties)\n            merge(this, properties);\n    }\n\n    CustomError.prototype = Object.create(Error.prototype, {\n        constructor: {\n            value: CustomError,\n            writable: true,\n            enumerable: false,\n            configurable: true,\n        },\n        name: {\n            get: function get() { return name; },\n            set: undefined,\n            enumerable: false,\n            // configurable: false would accurately preserve the behavior of\n            // the original, but I'm guessing that was not intentional.\n            // For an actual error subclass, this property would\n            // be configurable.\n            configurable: true,\n        },\n        toString: {\n            value: function value() { return this.name + \": \" + this.message; },\n            writable: true,\n            enumerable: false,\n            configurable: true,\n        },\n    });\n\n    return CustomError;\n}\n\nutil.newError = newError;\n\n/**\n * Constructs a new protocol error.\n * @classdesc Error subclass indicating a protocol specifc error.\n * @memberof util\n * @extends Error\n * @template T extends Message<T>\n * @constructor\n * @param {string} message Error message\n * @param {Object.<string,*>} [properties] Additional properties\n * @example\n * try {\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\n * } catch (e) {\n *     if (e instanceof ProtocolError && e.instance)\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\n * }\n */\nutil.ProtocolError = newError(\"ProtocolError\");\n\n/**\n * So far decoded message instance.\n * @name util.ProtocolError#instance\n * @type {Message<T>}\n */\n\n/**\n * A OneOf getter as returned by {@link util.oneOfGetter}.\n * @typedef OneOfGetter\n * @type {function}\n * @returns {string|undefined} Set field name, if any\n */\n\n/**\n * Builds a getter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfGetter} Unbound getter\n */\nutil.oneOfGetter = function getOneOf(fieldNames) {\n    var fieldMap = {};\n    for (var i = 0; i < fieldNames.length; ++i)\n        fieldMap[fieldNames[i]] = 1;\n\n    /**\n     * @returns {string|undefined} Set field name, if any\n     * @this Object\n     * @ignore\n     */\n    return function() { // eslint-disable-line consistent-return\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\n                return keys[i];\n    };\n};\n\n/**\n * A OneOf setter as returned by {@link util.oneOfSetter}.\n * @typedef OneOfSetter\n * @type {function}\n * @param {string|undefined} value Field name\n * @returns {undefined}\n */\n\n/**\n * Builds a setter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfSetter} Unbound setter\n */\nutil.oneOfSetter = function setOneOf(fieldNames) {\n\n    /**\n     * @param {string} name Field name\n     * @returns {undefined}\n     * @this Object\n     * @ignore\n     */\n    return function(name) {\n        for (var i = 0; i < fieldNames.length; ++i)\n            if (fieldNames[i] !== name)\n                delete this[fieldNames[i]];\n    };\n};\n\n/**\n * Default conversion options used for {@link Message#toJSON} implementations.\n *\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\n *\n * - Longs become strings\n * - Enums become string keys\n * - Bytes become base64 encoded strings\n * - (Sub-)Messages become plain objects\n * - Maps become plain objects with all string keys\n * - Repeated fields become arrays\n * - NaN and Infinity for float and double fields become strings\n *\n * @type {IConversionOptions}\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\n */\nutil.toJSONOptions = {\n    longs: String,\n    enums: String,\n    bytes: String,\n    json: true\n};\n\n// Sets up buffer utility according to the environment (called in index-minimal)\nutil._configure = function() {\n    var Buffer = util.Buffer;\n    /* istanbul ignore if */\n    if (!Buffer) {\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\n        return;\n    }\n    // because node 4.x buffers are incompatible & immutable\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\n        /* istanbul ignore next */\n        function Buffer_from(value, encoding) {\n            return new Buffer(value, encoding);\n        };\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\n        /* istanbul ignore next */\n        function Buffer_allocUnsafe(size) {\n            return new Buffer(size);\n        };\n};\n","\"use strict\";\nmodule.exports = Writer;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferWriter; // cyclic\n\nvar LongBits  = util.LongBits,\n    base64    = util.base64,\n    utf8      = util.utf8;\n\n/**\n * Constructs a new writer operation instance.\n * @classdesc Scheduled writer operation.\n * @constructor\n * @param {function(*, Uint8Array, number)} fn Function to call\n * @param {number} len Value byte length\n * @param {*} val Value to write\n * @ignore\n */\nfunction Op(fn, len, val) {\n\n    /**\n     * Function to call.\n     * @type {function(Uint8Array, number, *)}\n     */\n    this.fn = fn;\n\n    /**\n     * Value byte length.\n     * @type {number}\n     */\n    this.len = len;\n\n    /**\n     * Next operation.\n     * @type {Writer.Op|undefined}\n     */\n    this.next = undefined;\n\n    /**\n     * Value to write.\n     * @type {*}\n     */\n    this.val = val; // type varies\n}\n\n/* istanbul ignore next */\nfunction noop() {} // eslint-disable-line no-empty-function\n\n/**\n * Constructs a new writer state instance.\n * @classdesc Copied writer state.\n * @memberof Writer\n * @constructor\n * @param {Writer} writer Writer to copy state from\n * @ignore\n */\nfunction State(writer) {\n\n    /**\n     * Current head.\n     * @type {Writer.Op}\n     */\n    this.head = writer.head;\n\n    /**\n     * Current tail.\n     * @type {Writer.Op}\n     */\n    this.tail = writer.tail;\n\n    /**\n     * Current buffer length.\n     * @type {number}\n     */\n    this.len = writer.len;\n\n    /**\n     * Next state.\n     * @type {State|null}\n     */\n    this.next = writer.states;\n}\n\n/**\n * Constructs a new writer instance.\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n */\nfunction Writer() {\n\n    /**\n     * Current length.\n     * @type {number}\n     */\n    this.len = 0;\n\n    /**\n     * Operations head.\n     * @type {Object}\n     */\n    this.head = new Op(noop, 0, 0);\n\n    /**\n     * Operations tail\n     * @type {Object}\n     */\n    this.tail = this.head;\n\n    /**\n     * Linked forked states.\n     * @type {Object|null}\n     */\n    this.states = null;\n\n    // When a value is written, the writer calculates its byte length and puts it into a linked\n    // list of operations to perform when finish() is called. This both allows us to allocate\n    // buffers of the exact required size and reduces the amount of work we have to do compared\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\n    // part is just a linked list walk calling operations with already prepared values.\n}\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup() {\n            return (Writer.create = function create_buffer() {\n                return new BufferWriter();\n            })();\n        }\n        /* istanbul ignore next */\n        : function create_array() {\n            return new Writer();\n        };\n};\n\n/**\n * Creates a new writer.\n * @function\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\n */\nWriter.create = create();\n\n/**\n * Allocates a buffer of the specified size.\n * @param {number} size Buffer size\n * @returns {Uint8Array} Buffer\n */\nWriter.alloc = function alloc(size) {\n    return new util.Array(size);\n};\n\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\n/* istanbul ignore else */\nif (util.Array !== Array)\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\n\n/**\n * Pushes a new operation to the queue.\n * @param {function(Uint8Array, number, *)} fn Function to call\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @returns {Writer} `this`\n * @private\n */\nWriter.prototype._push = function push(fn, len, val) {\n    this.tail = this.tail.next = new Op(fn, len, val);\n    this.len += len;\n    return this;\n};\n\nfunction writeByte(val, buf, pos) {\n    buf[pos] = val & 255;\n}\n\nfunction writeVarint32(val, buf, pos) {\n    while (val > 127) {\n        buf[pos++] = val & 127 | 128;\n        val >>>= 7;\n    }\n    buf[pos] = val;\n}\n\n/**\n * Constructs a new varint writer operation instance.\n * @classdesc Scheduled varint writer operation.\n * @extends Op\n * @constructor\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @ignore\n */\nfunction VarintOp(len, val) {\n    this.len = len;\n    this.next = undefined;\n    this.val = val;\n}\n\nVarintOp.prototype = Object.create(Op.prototype);\nVarintOp.prototype.fn = writeVarint32;\n\n/**\n * Writes an unsigned 32 bit value as a varint.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.uint32 = function write_uint32(value) {\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\n    this.len += (this.tail = this.tail.next = new VarintOp(\n        (value = value >>> 0)\n                < 128       ? 1\n        : value < 16384     ? 2\n        : value < 2097152   ? 3\n        : value < 268435456 ? 4\n        :                     5,\n    value)).len;\n    return this;\n};\n\n/**\n * Writes a signed 32 bit value as a varint.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.int32 = function write_int32(value) {\n    return value < 0\n        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\n        : this.uint32(value);\n};\n\n/**\n * Writes a 32 bit value as a varint, zig-zag encoded.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sint32 = function write_sint32(value) {\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\n};\n\nfunction writeVarint64(val, buf, pos) {\n    while (val.hi) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\n        val.hi >>>= 7;\n    }\n    while (val.lo > 127) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = val.lo >>> 7;\n    }\n    buf[pos++] = val.lo;\n}\n\n/**\n * Writes an unsigned 64 bit value as a varint.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.uint64 = function write_uint64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a signed 64 bit value as a varint.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.int64 = Writer.prototype.uint64;\n\n/**\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sint64 = function write_sint64(value) {\n    var bits = LongBits.from(value).zzEncode();\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a boolish value as a varint.\n * @param {boolean} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bool = function write_bool(value) {\n    return this._push(writeByte, 1, value ? 1 : 0);\n};\n\nfunction writeFixed32(val, buf, pos) {\n    buf[pos    ] =  val         & 255;\n    buf[pos + 1] =  val >>> 8   & 255;\n    buf[pos + 2] =  val >>> 16  & 255;\n    buf[pos + 3] =  val >>> 24;\n}\n\n/**\n * Writes an unsigned 32 bit value as fixed 32 bits.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.fixed32 = function write_fixed32(value) {\n    return this._push(writeFixed32, 4, value >>> 0);\n};\n\n/**\n * Writes a signed 32 bit value as fixed 32 bits.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\n\n/**\n * Writes an unsigned 64 bit value as fixed 64 bits.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.fixed64 = function write_fixed64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\n};\n\n/**\n * Writes a signed 64 bit value as fixed 64 bits.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\n\n/**\n * Writes a float (32 bit).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.float = function write_float(value) {\n    return this._push(util.float.writeFloatLE, 4, value);\n};\n\n/**\n * Writes a double (64 bit float).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.double = function write_double(value) {\n    return this._push(util.float.writeDoubleLE, 8, value);\n};\n\nvar writeBytes = util.Array.prototype.set\n    ? function writeBytes_set(val, buf, pos) {\n        buf.set(val, pos); // also works for plain array values\n    }\n    /* istanbul ignore next */\n    : function writeBytes_for(val, buf, pos) {\n        for (var i = 0; i < val.length; ++i)\n            buf[pos + i] = val[i];\n    };\n\n/**\n * Writes a sequence of bytes.\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bytes = function write_bytes(value) {\n    var len = value.length >>> 0;\n    if (!len)\n        return this._push(writeByte, 1, 0);\n    if (util.isString(value)) {\n        var buf = Writer.alloc(len = base64.length(value));\n        base64.decode(value, buf, 0);\n        value = buf;\n    }\n    return this.uint32(len)._push(writeBytes, len, value);\n};\n\n/**\n * Writes a string.\n * @param {string} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.string = function write_string(value) {\n    var len = utf8.length(value);\n    return len\n        ? this.uint32(len)._push(utf8.write, len, value)\n        : this._push(writeByte, 1, 0);\n};\n\n/**\n * Forks this writer's state by pushing it to a stack.\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\n * @returns {Writer} `this`\n */\nWriter.prototype.fork = function fork() {\n    this.states = new State(this);\n    this.head = this.tail = new Op(noop, 0, 0);\n    this.len = 0;\n    return this;\n};\n\n/**\n * Resets this instance to the last state.\n * @returns {Writer} `this`\n */\nWriter.prototype.reset = function reset() {\n    if (this.states) {\n        this.head   = this.states.head;\n        this.tail   = this.states.tail;\n        this.len    = this.states.len;\n        this.states = this.states.next;\n    } else {\n        this.head = this.tail = new Op(noop, 0, 0);\n        this.len  = 0;\n    }\n    return this;\n};\n\n/**\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\n * @returns {Writer} `this`\n */\nWriter.prototype.ldelim = function ldelim() {\n    var head = this.head,\n        tail = this.tail,\n        len  = this.len;\n    this.reset().uint32(len);\n    if (len) {\n        this.tail.next = head.next; // skip noop\n        this.tail = tail;\n        this.len += len;\n    }\n    return this;\n};\n\n/**\n * Finishes the write operation.\n * @returns {Uint8Array} Finished buffer\n */\nWriter.prototype.finish = function finish() {\n    var head = this.head.next, // skip noop\n        buf  = this.constructor.alloc(this.len),\n        pos  = 0;\n    while (head) {\n        head.fn(head.val, buf, pos);\n        pos += head.len;\n        head = head.next;\n    }\n    // this.head = this.tail = null;\n    return buf;\n};\n\nWriter._configure = function(BufferWriter_) {\n    BufferWriter = BufferWriter_;\n    Writer.create = create();\n    BufferWriter._configure();\n};\n","\"use strict\";\nmodule.exports = BufferWriter;\n\n// extends Writer\nvar Writer = require(\"./writer\");\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer writer instance.\n * @classdesc Wire format writer using node buffers.\n * @extends Writer\n * @constructor\n */\nfunction BufferWriter() {\n    Writer.call(this);\n}\n\nBufferWriter._configure = function () {\n    /**\n     * Allocates a buffer of the specified size.\n     * @function\n     * @param {number} size Buffer size\n     * @returns {Buffer} Buffer\n     */\n    BufferWriter.alloc = util._Buffer_allocUnsafe;\n\n    BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === \"set\"\n        ? function writeBytesBuffer_set(val, buf, pos) {\n          buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\n          // also works for plain array values\n        }\n        /* istanbul ignore next */\n        : function writeBytesBuffer_copy(val, buf, pos) {\n          if (val.copy) // Buffer values\n            val.copy(buf, pos, 0, val.length);\n          else for (var i = 0; i < val.length;) // plain array values\n            buf[pos++] = val[i++];\n        };\n};\n\n\n/**\n * @override\n */\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\n    if (util.isString(value))\n        value = util._Buffer_from(value, \"base64\");\n    var len = value.length >>> 0;\n    this.uint32(len);\n    if (len)\n        this._push(BufferWriter.writeBytesBuffer, len, value);\n    return this;\n};\n\nfunction writeStringBuffer(val, buf, pos) {\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\n        util.utf8.write(val, buf, pos);\n    else if (buf.utf8Write)\n        buf.utf8Write(val, pos);\n    else\n        buf.write(val, pos);\n}\n\n/**\n * @override\n */\nBufferWriter.prototype.string = function write_string_buffer(value) {\n    var len = util.Buffer.byteLength(value);\n    this.uint32(len);\n    if (len)\n        this._push(writeStringBuffer, len, value);\n    return this;\n};\n\n\n/**\n * Finishes the write operation.\n * @name BufferWriter#finish\n * @function\n * @returns {Buffer} Finished buffer\n */\n\nBufferWriter._configure();\n","module.exports = require(\"fs\");","module.exports = require(\"os\");","module.exports = require(\"path\");","module.exports = require(\"perf_hooks\");","module.exports = require(\"util\");","module.exports = require(\"worker_threads\");","module.exports = require(\"onnxruntime-common\");","// GENERATED FILE. DO NOT EDIT.\nvar Long = (function(exports) {\n  \"use strict\";\n  \n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  \n  /**\n   * @license\n   * Copyright 2009 The Closure Library Authors\n   * Copyright 2020 Daniel Wirtz / The long.js Authors.\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   *\n   * SPDX-License-Identifier: Apache-2.0\n   */\n  // WebAssembly optimizations to do native i64 multiplication and divide\n  var wasm = null;\n  \n  try {\n    wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11])), {}).exports;\n  } catch (e) {// no wasm support :(\n  }\n  /**\n   * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\n   *  See the from* functions below for more convenient ways of constructing Longs.\n   * @exports Long\n   * @class A Long class for representing a 64 bit two's-complement integer value.\n   * @param {number} low The low (signed) 32 bits of the long\n   * @param {number} high The high (signed) 32 bits of the long\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @constructor\n   */\n  \n  \n  function Long(low, high, unsigned) {\n    /**\n     * The low 32 bits as a signed value.\n     * @type {number}\n     */\n    this.low = low | 0;\n    /**\n     * The high 32 bits as a signed value.\n     * @type {number}\n     */\n  \n    this.high = high | 0;\n    /**\n     * Whether unsigned or not.\n     * @type {boolean}\n     */\n  \n    this.unsigned = !!unsigned;\n  } // The internal representation of a long is the two given signed, 32-bit values.\n  // We use 32-bit pieces because these are the size of integers on which\n  // Javascript performs bit-operations.  For operations like addition and\n  // multiplication, we split each number into 16 bit pieces, which can easily be\n  // multiplied within Javascript's floating-point representation without overflow\n  // or change in sign.\n  //\n  // In the algorithms below, we frequently reduce the negative case to the\n  // positive case by negating the input(s) and then post-processing the result.\n  // Note that we must ALWAYS check specially whether those values are MIN_VALUE\n  // (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n  // a positive number, it overflows back into a negative).  Not handling this\n  // case would often result in infinite recursion.\n  //\n  // Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\n  // methods on which they depend.\n  \n  /**\n   * An indicator used to reliably determine if an object is a Long or not.\n   * @type {boolean}\n   * @const\n   * @private\n   */\n  \n  \n  Long.prototype.__isLong__;\n  Object.defineProperty(Long.prototype, \"__isLong__\", {\n    value: true\n  });\n  /**\n   * @function\n   * @param {*} obj Object\n   * @returns {boolean}\n   * @inner\n   */\n  \n  function isLong(obj) {\n    return (obj && obj[\"__isLong__\"]) === true;\n  }\n  /**\n   * @function\n   * @param {*} value number\n   * @returns {number}\n   * @inner\n   */\n  \n  \n  function ctz32(value) {\n    var c = Math.clz32(value & -value);\n    return value ? 31 - c : c;\n  }\n  /**\n   * Tests if the specified object is a Long.\n   * @function\n   * @param {*} obj Object\n   * @returns {boolean}\n   */\n  \n  \n  Long.isLong = isLong;\n  /**\n   * A cache of the Long representations of small integer values.\n   * @type {!Object}\n   * @inner\n   */\n  \n  var INT_CACHE = {};\n  /**\n   * A cache of the Long representations of small unsigned integer values.\n   * @type {!Object}\n   * @inner\n   */\n  \n  var UINT_CACHE = {};\n  /**\n   * @param {number} value\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromInt(value, unsigned) {\n    var obj, cachedObj, cache;\n  \n    if (unsigned) {\n      value >>>= 0;\n  \n      if (cache = 0 <= value && value < 256) {\n        cachedObj = UINT_CACHE[value];\n        if (cachedObj) return cachedObj;\n      }\n  \n      obj = fromBits(value, 0, true);\n      if (cache) UINT_CACHE[value] = obj;\n      return obj;\n    } else {\n      value |= 0;\n  \n      if (cache = -128 <= value && value < 128) {\n        cachedObj = INT_CACHE[value];\n        if (cachedObj) return cachedObj;\n      }\n  \n      obj = fromBits(value, value < 0 ? -1 : 0, false);\n      if (cache) INT_CACHE[value] = obj;\n      return obj;\n    }\n  }\n  /**\n   * Returns a Long representing the given 32 bit integer value.\n   * @function\n   * @param {number} value The 32 bit integer in question\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromInt = fromInt;\n  /**\n   * @param {number} value\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromNumber(value, unsigned) {\n    if (isNaN(value)) return unsigned ? UZERO : ZERO;\n  \n    if (unsigned) {\n      if (value < 0) return UZERO;\n      if (value >= TWO_PWR_64_DBL) return MAX_UNSIGNED_VALUE;\n    } else {\n      if (value <= -TWO_PWR_63_DBL) return MIN_VALUE;\n      if (value + 1 >= TWO_PWR_63_DBL) return MAX_VALUE;\n    }\n  \n    if (value < 0) return fromNumber(-value, unsigned).neg();\n    return fromBits(value % TWO_PWR_32_DBL | 0, value / TWO_PWR_32_DBL | 0, unsigned);\n  }\n  /**\n   * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n   * @function\n   * @param {number} value The number in question\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromNumber = fromNumber;\n  /**\n   * @param {number} lowBits\n   * @param {number} highBits\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromBits(lowBits, highBits, unsigned) {\n    return new Long(lowBits, highBits, unsigned);\n  }\n  /**\n   * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\n   *  assumed to use 32 bits.\n   * @function\n   * @param {number} lowBits The low 32 bits\n   * @param {number} highBits The high 32 bits\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBits = fromBits;\n  /**\n   * @function\n   * @param {number} base\n   * @param {number} exponent\n   * @returns {number}\n   * @inner\n   */\n  \n  var pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\n  \n  /**\n   * @param {string} str\n   * @param {(boolean|number)=} unsigned\n   * @param {number=} radix\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromString(str, unsigned, radix) {\n    if (str.length === 0) throw Error('empty string');\n  \n    if (typeof unsigned === 'number') {\n      // For goog.math.long compatibility\n      radix = unsigned;\n      unsigned = false;\n    } else {\n      unsigned = !!unsigned;\n    }\n  \n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\") return unsigned ? UZERO : ZERO;\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix) throw RangeError('radix');\n    var p;\n    if ((p = str.indexOf('-')) > 0) throw Error('interior hyphen');else if (p === 0) {\n      return fromString(str.substring(1), unsigned, radix).neg();\n    } // Do several (8) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n  \n    var radixToPower = fromNumber(pow_dbl(radix, 8));\n    var result = ZERO;\n  \n    for (var i = 0; i < str.length; i += 8) {\n      var size = Math.min(8, str.length - i),\n          value = parseInt(str.substring(i, i + size), radix);\n  \n      if (size < 8) {\n        var power = fromNumber(pow_dbl(radix, size));\n        result = result.mul(power).add(fromNumber(value));\n      } else {\n        result = result.mul(radixToPower);\n        result = result.add(fromNumber(value));\n      }\n    }\n  \n    result.unsigned = unsigned;\n    return result;\n  }\n  /**\n   * Returns a Long representation of the given string, written using the specified radix.\n   * @function\n   * @param {string} str The textual representation of the Long\n   * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\n   * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromString = fromString;\n  /**\n   * @function\n   * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromValue(val, unsigned) {\n    if (typeof val === 'number') return fromNumber(val, unsigned);\n    if (typeof val === 'string') return fromString(val, unsigned); // Throws for non-objects, converts non-instanceof Long:\n  \n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\n  }\n  /**\n   * Converts the specified value to a Long using the appropriate from* function for its type.\n   * @function\n   * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long}\n   */\n  \n  \n  Long.fromValue = fromValue; // NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\n  // no runtime penalty for these.\n  \n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_16_DBL = 1 << 16;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_24_DBL = 1 << 24;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\n  /**\n   * @type {!Long}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var ZERO = fromInt(0);\n  /**\n   * Signed zero.\n   * @type {!Long}\n   */\n  \n  Long.ZERO = ZERO;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var UZERO = fromInt(0, true);\n  /**\n   * Unsigned zero.\n   * @type {!Long}\n   */\n  \n  Long.UZERO = UZERO;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var ONE = fromInt(1);\n  /**\n   * Signed one.\n   * @type {!Long}\n   */\n  \n  Long.ONE = ONE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var UONE = fromInt(1, true);\n  /**\n   * Unsigned one.\n   * @type {!Long}\n   */\n  \n  Long.UONE = UONE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var NEG_ONE = fromInt(-1);\n  /**\n   * Signed negative one.\n   * @type {!Long}\n   */\n  \n  Long.NEG_ONE = NEG_ONE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var MAX_VALUE = fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0, false);\n  /**\n   * Maximum signed value.\n   * @type {!Long}\n   */\n  \n  Long.MAX_VALUE = MAX_VALUE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF | 0, 0xFFFFFFFF | 0, true);\n  /**\n   * Maximum unsigned value.\n   * @type {!Long}\n   */\n  \n  Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var MIN_VALUE = fromBits(0, 0x80000000 | 0, false);\n  /**\n   * Minimum signed value.\n   * @type {!Long}\n   */\n  \n  Long.MIN_VALUE = MIN_VALUE;\n  /**\n   * @alias Long.prototype\n   * @inner\n   */\n  \n  var LongPrototype = Long.prototype;\n  /**\n   * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\n   * @this {!Long}\n   * @returns {number}\n   */\n  \n  LongPrototype.toInt = function toInt() {\n    return this.unsigned ? this.low >>> 0 : this.low;\n  };\n  /**\n   * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\n   * @this {!Long}\n   * @returns {number}\n   */\n  \n  \n  LongPrototype.toNumber = function toNumber() {\n    if (this.unsigned) return (this.high >>> 0) * TWO_PWR_32_DBL + (this.low >>> 0);\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\n  };\n  /**\n   * Converts the Long to a string written in the specified radix.\n   * @this {!Long}\n   * @param {number=} radix Radix (2-36), defaults to 10\n   * @returns {string}\n   * @override\n   * @throws {RangeError} If `radix` is out of range\n   */\n  \n  \n  LongPrototype.toString = function toString(radix) {\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix) throw RangeError('radix');\n    if (this.isZero()) return '0';\n  \n    if (this.isNegative()) {\n      // Unsigned Longs are never negative\n      if (this.eq(MIN_VALUE)) {\n        // We need to change the Long value before it can be negated, so we remove\n        // the bottom-most digit in this base and then recurse to do the rest.\n        var radixLong = fromNumber(radix),\n            div = this.div(radixLong),\n            rem1 = div.mul(radixLong).sub(this);\n        return div.toString(radix) + rem1.toInt().toString(radix);\n      } else return '-' + this.neg().toString(radix);\n    } // Do several (6) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n  \n  \n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\n        rem = this;\n    var result = '';\n  \n    while (true) {\n      var remDiv = rem.div(radixToPower),\n          intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\n          digits = intval.toString(radix);\n      rem = remDiv;\n      if (rem.isZero()) return digits + result;else {\n        while (digits.length < 6) digits = '0' + digits;\n  \n        result = '' + digits + result;\n      }\n    }\n  };\n  /**\n   * Gets the high 32 bits as a signed integer.\n   * @this {!Long}\n   * @returns {number} Signed high bits\n   */\n  \n  \n  LongPrototype.getHighBits = function getHighBits() {\n    return this.high;\n  };\n  /**\n   * Gets the high 32 bits as an unsigned integer.\n   * @this {!Long}\n   * @returns {number} Unsigned high bits\n   */\n  \n  \n  LongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\n    return this.high >>> 0;\n  };\n  /**\n   * Gets the low 32 bits as a signed integer.\n   * @this {!Long}\n   * @returns {number} Signed low bits\n   */\n  \n  \n  LongPrototype.getLowBits = function getLowBits() {\n    return this.low;\n  };\n  /**\n   * Gets the low 32 bits as an unsigned integer.\n   * @this {!Long}\n   * @returns {number} Unsigned low bits\n   */\n  \n  \n  LongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\n    return this.low >>> 0;\n  };\n  /**\n   * Gets the number of bits needed to represent the absolute value of this Long.\n   * @this {!Long}\n   * @returns {number}\n   */\n  \n  \n  LongPrototype.getNumBitsAbs = function getNumBitsAbs() {\n    if (this.isNegative()) // Unsigned Longs are never negative\n      return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\n    var val = this.high != 0 ? this.high : this.low;\n  \n    for (var bit = 31; bit > 0; bit--) if ((val & 1 << bit) != 0) break;\n  \n    return this.high != 0 ? bit + 33 : bit + 1;\n  };\n  /**\n   * Tests if this Long's value equals zero.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isZero = function isZero() {\n    return this.high === 0 && this.low === 0;\n  };\n  /**\n   * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.eqz = LongPrototype.isZero;\n  /**\n   * Tests if this Long's value is negative.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  LongPrototype.isNegative = function isNegative() {\n    return !this.unsigned && this.high < 0;\n  };\n  /**\n   * Tests if this Long's value is positive or zero.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isPositive = function isPositive() {\n    return this.unsigned || this.high >= 0;\n  };\n  /**\n   * Tests if this Long's value is odd.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isOdd = function isOdd() {\n    return (this.low & 1) === 1;\n  };\n  /**\n   * Tests if this Long's value is even.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isEven = function isEven() {\n    return (this.low & 1) === 0;\n  };\n  /**\n   * Tests if this Long's value equals the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.equals = function equals(other) {\n    if (!isLong(other)) other = fromValue(other);\n    if (this.unsigned !== other.unsigned && this.high >>> 31 === 1 && other.high >>> 31 === 1) return false;\n    return this.high === other.high && this.low === other.low;\n  };\n  /**\n   * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.eq = LongPrototype.equals;\n  /**\n   * Tests if this Long's value differs from the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.notEquals = function notEquals(other) {\n    return !this.eq(\n    /* validates */\n    other);\n  };\n  /**\n   * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.neq = LongPrototype.notEquals;\n  /**\n   * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.ne = LongPrototype.notEquals;\n  /**\n   * Tests if this Long's value is less than the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.lessThan = function lessThan(other) {\n    return this.comp(\n    /* validates */\n    other) < 0;\n  };\n  /**\n   * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.lt = LongPrototype.lessThan;\n  /**\n   * Tests if this Long's value is less than or equal the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\n    return this.comp(\n    /* validates */\n    other) <= 0;\n  };\n  /**\n   * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.lte = LongPrototype.lessThanOrEqual;\n  /**\n   * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.le = LongPrototype.lessThanOrEqual;\n  /**\n   * Tests if this Long's value is greater than the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.greaterThan = function greaterThan(other) {\n    return this.comp(\n    /* validates */\n    other) > 0;\n  };\n  /**\n   * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.gt = LongPrototype.greaterThan;\n  /**\n   * Tests if this Long's value is greater than or equal the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\n    return this.comp(\n    /* validates */\n    other) >= 0;\n  };\n  /**\n   * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.gte = LongPrototype.greaterThanOrEqual;\n  /**\n   * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.ge = LongPrototype.greaterThanOrEqual;\n  /**\n   * Compares this Long's value with the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n   *  if the given one is greater\n   */\n  \n  LongPrototype.compare = function compare(other) {\n    if (!isLong(other)) other = fromValue(other);\n    if (this.eq(other)) return 0;\n    var thisNeg = this.isNegative(),\n        otherNeg = other.isNegative();\n    if (thisNeg && !otherNeg) return -1;\n    if (!thisNeg && otherNeg) return 1; // At this point the sign bits are the same\n  \n    if (!this.unsigned) return this.sub(other).isNegative() ? -1 : 1; // Both are positive if at least one is unsigned\n  \n    return other.high >>> 0 > this.high >>> 0 || other.high === this.high && other.low >>> 0 > this.low >>> 0 ? -1 : 1;\n  };\n  /**\n   * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n   *  if the given one is greater\n   */\n  \n  \n  LongPrototype.comp = LongPrototype.compare;\n  /**\n   * Negates this Long's value.\n   * @this {!Long}\n   * @returns {!Long} Negated Long\n   */\n  \n  LongPrototype.negate = function negate() {\n    if (!this.unsigned && this.eq(MIN_VALUE)) return MIN_VALUE;\n    return this.not().add(ONE);\n  };\n  /**\n   * Negates this Long's value. This is an alias of {@link Long#negate}.\n   * @function\n   * @returns {!Long} Negated Long\n   */\n  \n  \n  LongPrototype.neg = LongPrototype.negate;\n  /**\n   * Returns the sum of this and the specified Long.\n   * @this {!Long}\n   * @param {!Long|number|string} addend Addend\n   * @returns {!Long} Sum\n   */\n  \n  LongPrototype.add = function add(addend) {\n    if (!isLong(addend)) addend = fromValue(addend); // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n  \n    var a48 = this.high >>> 16;\n    var a32 = this.high & 0xFFFF;\n    var a16 = this.low >>> 16;\n    var a00 = this.low & 0xFFFF;\n    var b48 = addend.high >>> 16;\n    var b32 = addend.high & 0xFFFF;\n    var b16 = addend.low >>> 16;\n    var b00 = addend.low & 0xFFFF;\n    var c48 = 0,\n        c32 = 0,\n        c16 = 0,\n        c00 = 0;\n    c00 += a00 + b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 + b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 + b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 + b48;\n    c48 &= 0xFFFF;\n    return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);\n  };\n  /**\n   * Returns the difference of this and the specified Long.\n   * @this {!Long}\n   * @param {!Long|number|string} subtrahend Subtrahend\n   * @returns {!Long} Difference\n   */\n  \n  \n  LongPrototype.subtract = function subtract(subtrahend) {\n    if (!isLong(subtrahend)) subtrahend = fromValue(subtrahend);\n    return this.add(subtrahend.neg());\n  };\n  /**\n   * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\n   * @function\n   * @param {!Long|number|string} subtrahend Subtrahend\n   * @returns {!Long} Difference\n   */\n  \n  \n  LongPrototype.sub = LongPrototype.subtract;\n  /**\n   * Returns the product of this and the specified Long.\n   * @this {!Long}\n   * @param {!Long|number|string} multiplier Multiplier\n   * @returns {!Long} Product\n   */\n  \n  LongPrototype.multiply = function multiply(multiplier) {\n    if (this.isZero()) return this;\n    if (!isLong(multiplier)) multiplier = fromValue(multiplier); // use wasm support if present\n  \n    if (wasm) {\n      var low = wasm[\"mul\"](this.low, this.high, multiplier.low, multiplier.high);\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n    }\n  \n    if (multiplier.isZero()) return this.unsigned ? UZERO : ZERO;\n    if (this.eq(MIN_VALUE)) return multiplier.isOdd() ? MIN_VALUE : ZERO;\n    if (multiplier.eq(MIN_VALUE)) return this.isOdd() ? MIN_VALUE : ZERO;\n  \n    if (this.isNegative()) {\n      if (multiplier.isNegative()) return this.neg().mul(multiplier.neg());else return this.neg().mul(multiplier).neg();\n    } else if (multiplier.isNegative()) return this.mul(multiplier.neg()).neg(); // If both longs are small, use float multiplication\n  \n  \n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24)) return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned); // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n    // We can skip products that would overflow.\n  \n    var a48 = this.high >>> 16;\n    var a32 = this.high & 0xFFFF;\n    var a16 = this.low >>> 16;\n    var a00 = this.low & 0xFFFF;\n    var b48 = multiplier.high >>> 16;\n    var b32 = multiplier.high & 0xFFFF;\n    var b16 = multiplier.low >>> 16;\n    var b00 = multiplier.low & 0xFFFF;\n    var c48 = 0,\n        c32 = 0,\n        c16 = 0,\n        c00 = 0;\n    c00 += a00 * b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 * b00;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c16 += a00 * b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 * b00;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a16 * b16;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a00 * b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n    c48 &= 0xFFFF;\n    return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);\n  };\n  /**\n   * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\n   * @function\n   * @param {!Long|number|string} multiplier Multiplier\n   * @returns {!Long} Product\n   */\n  \n  \n  LongPrototype.mul = LongPrototype.multiply;\n  /**\n   * Returns this Long divided by the specified. The result is signed if this Long is signed or\n   *  unsigned if this Long is unsigned.\n   * @this {!Long}\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Quotient\n   */\n  \n  LongPrototype.divide = function divide(divisor) {\n    if (!isLong(divisor)) divisor = fromValue(divisor);\n    if (divisor.isZero()) throw Error('division by zero'); // use wasm support if present\n  \n    if (wasm) {\n      // guard against signed division overflow: the largest\n      // negative number / -1 would be 1 larger than the largest\n      // positive number, due to two's complement.\n      if (!this.unsigned && this.high === -0x80000000 && divisor.low === -1 && divisor.high === -1) {\n        // be consistent with non-wasm code path\n        return this;\n      }\n  \n      var low = (this.unsigned ? wasm[\"div_u\"] : wasm[\"div_s\"])(this.low, this.high, divisor.low, divisor.high);\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n    }\n  \n    if (this.isZero()) return this.unsigned ? UZERO : ZERO;\n    var approx, rem, res;\n  \n    if (!this.unsigned) {\n      // This section is only relevant for signed longs and is derived from the\n      // closure library as a whole.\n      if (this.eq(MIN_VALUE)) {\n        if (divisor.eq(ONE) || divisor.eq(NEG_ONE)) return MIN_VALUE; // recall that -MIN_VALUE == MIN_VALUE\n        else if (divisor.eq(MIN_VALUE)) return ONE;else {\n          // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n          var halfThis = this.shr(1);\n          approx = halfThis.div(divisor).shl(1);\n  \n          if (approx.eq(ZERO)) {\n            return divisor.isNegative() ? ONE : NEG_ONE;\n          } else {\n            rem = this.sub(divisor.mul(approx));\n            res = approx.add(rem.div(divisor));\n            return res;\n          }\n        }\n      } else if (divisor.eq(MIN_VALUE)) return this.unsigned ? UZERO : ZERO;\n  \n      if (this.isNegative()) {\n        if (divisor.isNegative()) return this.neg().div(divisor.neg());\n        return this.neg().div(divisor).neg();\n      } else if (divisor.isNegative()) return this.div(divisor.neg()).neg();\n  \n      res = ZERO;\n    } else {\n      // The algorithm below has not been made for unsigned longs. It's therefore\n      // required to take special care of the MSB prior to running it.\n      if (!divisor.unsigned) divisor = divisor.toUnsigned();\n      if (divisor.gt(this)) return UZERO;\n      if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\n        return UONE;\n      res = UZERO;\n    } // Repeat the following until the remainder is less than other:  find a\n    // floating-point that approximates remainder / other *from below*, add this\n    // into the result, and subtract it from the remainder.  It is critical that\n    // the approximate value is less than or equal to the real value so that the\n    // remainder never becomes negative.\n  \n  \n    rem = this;\n  \n    while (rem.gte(divisor)) {\n      // Approximate the result of division. This may be a little greater or\n      // smaller than the actual value.\n      approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber())); // We will tweak the approximate result by changing it in the 48-th digit or\n      // the smallest non-fractional digit, whichever is larger.\n  \n      var log2 = Math.ceil(Math.log(approx) / Math.LN2),\n          delta = log2 <= 48 ? 1 : pow_dbl(2, log2 - 48),\n          // Decrease the approximation until it is smaller than the remainder.  Note\n      // that if it is too large, the product overflows and is negative.\n      approxRes = fromNumber(approx),\n          approxRem = approxRes.mul(divisor);\n  \n      while (approxRem.isNegative() || approxRem.gt(rem)) {\n        approx -= delta;\n        approxRes = fromNumber(approx, this.unsigned);\n        approxRem = approxRes.mul(divisor);\n      } // We know the answer can't be zero... and actually, zero would cause\n      // infinite recursion since we would make no progress.\n  \n  \n      if (approxRes.isZero()) approxRes = ONE;\n      res = res.add(approxRes);\n      rem = rem.sub(approxRem);\n    }\n  \n    return res;\n  };\n  /**\n   * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\n   * @function\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Quotient\n   */\n  \n  \n  LongPrototype.div = LongPrototype.divide;\n  /**\n   * Returns this Long modulo the specified.\n   * @this {!Long}\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Remainder\n   */\n  \n  LongPrototype.modulo = function modulo(divisor) {\n    if (!isLong(divisor)) divisor = fromValue(divisor); // use wasm support if present\n  \n    if (wasm) {\n      var low = (this.unsigned ? wasm[\"rem_u\"] : wasm[\"rem_s\"])(this.low, this.high, divisor.low, divisor.high);\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n    }\n  \n    return this.sub(this.div(divisor).mul(divisor));\n  };\n  /**\n   * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n   * @function\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Remainder\n   */\n  \n  \n  LongPrototype.mod = LongPrototype.modulo;\n  /**\n   * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n   * @function\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Remainder\n   */\n  \n  LongPrototype.rem = LongPrototype.modulo;\n  /**\n   * Returns the bitwise NOT of this Long.\n   * @this {!Long}\n   * @returns {!Long}\n   */\n  \n  LongPrototype.not = function not() {\n    return fromBits(~this.low, ~this.high, this.unsigned);\n  };\n  /**\n   * Returns count leading zeros of this Long.\n   * @this {!Long}\n   * @returns {!number}\n   */\n  \n  \n  LongPrototype.countLeadingZeros = function countLeadingZeros() {\n    return this.high ? Math.clz32(this.high) : Math.clz32(this.low) + 32;\n  };\n  /**\n   * Returns count leading zeros. This is an alias of {@link Long#countLeadingZeros}.\n   * @function\n   * @param {!Long}\n   * @returns {!number}\n   */\n  \n  \n  LongPrototype.clz = LongPrototype.countLeadingZeros;\n  /**\n   * Returns count trailing zeros of this Long.\n   * @this {!Long}\n   * @returns {!number}\n   */\n  \n  LongPrototype.countTrailingZeros = function countTrailingZeros() {\n    return this.low ? ctz32(this.low) : ctz32(this.high) + 32;\n  };\n  /**\n   * Returns count trailing zeros. This is an alias of {@link Long#countTrailingZeros}.\n   * @function\n   * @param {!Long}\n   * @returns {!number}\n   */\n  \n  \n  LongPrototype.ctz = LongPrototype.countTrailingZeros;\n  /**\n   * Returns the bitwise AND of this Long and the specified.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other Long\n   * @returns {!Long}\n   */\n  \n  LongPrototype.and = function and(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\n  };\n  /**\n   * Returns the bitwise OR of this Long and the specified.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other Long\n   * @returns {!Long}\n   */\n  \n  \n  LongPrototype.or = function or(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\n  };\n  /**\n   * Returns the bitwise XOR of this Long and the given one.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other Long\n   * @returns {!Long}\n   */\n  \n  \n  LongPrototype.xor = function xor(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits shifted to the left by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shiftLeft = function shiftLeft(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;else if (numBits < 32) return fromBits(this.low << numBits, this.high << numBits | this.low >>> 32 - numBits, this.unsigned);else return fromBits(0, this.low << numBits - 32, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shl = LongPrototype.shiftLeft;\n  /**\n   * Returns this Long with bits arithmetically shifted to the right by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  LongPrototype.shiftRight = function shiftRight(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;else if (numBits < 32) return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >> numBits, this.unsigned);else return fromBits(this.high >> numBits - 32, this.high >= 0 ? 0 : -1, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shr = LongPrototype.shiftRight;\n  /**\n   * Returns this Long with bits logically shifted to the right by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  LongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;\n    if (numBits < 32) return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >>> numBits, this.unsigned);\n    if (numBits === 32) return fromBits(this.high, 0, this.unsigned);\n    return fromBits(this.high >>> numBits - 32, 0, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shru = LongPrototype.shiftRightUnsigned;\n  /**\n   * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  LongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\n  /**\n   * Returns this Long with bits rotated to the left by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  LongPrototype.rotateLeft = function rotateLeft(numBits) {\n    var b;\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;\n    if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\n  \n    if (numBits < 32) {\n      b = 32 - numBits;\n      return fromBits(this.low << numBits | this.high >>> b, this.high << numBits | this.low >>> b, this.unsigned);\n    }\n  \n    numBits -= 32;\n    b = 32 - numBits;\n    return fromBits(this.high << numBits | this.low >>> b, this.low << numBits | this.high >>> b, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits rotated to the left by the given amount. This is an alias of {@link Long#rotateLeft}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  \n  LongPrototype.rotl = LongPrototype.rotateLeft;\n  /**\n   * Returns this Long with bits rotated to the right by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  LongPrototype.rotateRight = function rotateRight(numBits) {\n    var b;\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;\n    if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\n  \n    if (numBits < 32) {\n      b = 32 - numBits;\n      return fromBits(this.high << b | this.low >>> numBits, this.low << b | this.high >>> numBits, this.unsigned);\n    }\n  \n    numBits -= 32;\n    b = 32 - numBits;\n    return fromBits(this.low << b | this.high >>> numBits, this.high << b | this.low >>> numBits, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits rotated to the right by the given amount. This is an alias of {@link Long#rotateRight}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  \n  LongPrototype.rotr = LongPrototype.rotateRight;\n  /**\n   * Converts this Long to signed.\n   * @this {!Long}\n   * @returns {!Long} Signed long\n   */\n  \n  LongPrototype.toSigned = function toSigned() {\n    if (!this.unsigned) return this;\n    return fromBits(this.low, this.high, false);\n  };\n  /**\n   * Converts this Long to unsigned.\n   * @this {!Long}\n   * @returns {!Long} Unsigned long\n   */\n  \n  \n  LongPrototype.toUnsigned = function toUnsigned() {\n    if (this.unsigned) return this;\n    return fromBits(this.low, this.high, true);\n  };\n  /**\n   * Converts this Long to its byte representation.\n   * @param {boolean=} le Whether little or big endian, defaults to big endian\n   * @this {!Long}\n   * @returns {!Array.<number>} Byte representation\n   */\n  \n  \n  LongPrototype.toBytes = function toBytes(le) {\n    return le ? this.toBytesLE() : this.toBytesBE();\n  };\n  /**\n   * Converts this Long to its little endian byte representation.\n   * @this {!Long}\n   * @returns {!Array.<number>} Little endian byte representation\n   */\n  \n  \n  LongPrototype.toBytesLE = function toBytesLE() {\n    var hi = this.high,\n        lo = this.low;\n    return [lo & 0xff, lo >>> 8 & 0xff, lo >>> 16 & 0xff, lo >>> 24, hi & 0xff, hi >>> 8 & 0xff, hi >>> 16 & 0xff, hi >>> 24];\n  };\n  /**\n   * Converts this Long to its big endian byte representation.\n   * @this {!Long}\n   * @returns {!Array.<number>} Big endian byte representation\n   */\n  \n  \n  LongPrototype.toBytesBE = function toBytesBE() {\n    var hi = this.high,\n        lo = this.low;\n    return [hi >>> 24, hi >>> 16 & 0xff, hi >>> 8 & 0xff, hi & 0xff, lo >>> 24, lo >>> 16 & 0xff, lo >>> 8 & 0xff, lo & 0xff];\n  };\n  /**\n   * Creates a Long from its byte representation.\n   * @param {!Array.<number>} bytes Byte representation\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @param {boolean=} le Whether little or big endian, defaults to big endian\n   * @returns {Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBytes = function fromBytes(bytes, unsigned, le) {\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\n  };\n  /**\n   * Creates a Long from its little endian byte representation.\n   * @param {!Array.<number>} bytes Little endian byte representation\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBytesLE = function fromBytesLE(bytes, unsigned) {\n    return new Long(bytes[0] | bytes[1] << 8 | bytes[2] << 16 | bytes[3] << 24, bytes[4] | bytes[5] << 8 | bytes[6] << 16 | bytes[7] << 24, unsigned);\n  };\n  /**\n   * Creates a Long from its big endian byte representation.\n   * @param {!Array.<number>} bytes Big endian byte representation\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBytesBE = function fromBytesBE(bytes, unsigned) {\n    return new Long(bytes[4] << 24 | bytes[5] << 16 | bytes[6] << 8 | bytes[7], bytes[0] << 24 | bytes[1] << 16 | bytes[2] << 8 | bytes[3], unsigned);\n  };\n  \n  var _default = Long;\n  exports.default = _default;\n  return \"default\" in exports ? exports.default : exports;\n})({});\nif (typeof define === 'function' && define.amd) define([], function() { return Long; });\nelse if (typeof module === 'object' && typeof exports === 'object') module.exports = Long;\n","/// @file\n/// @addtogroup flatbuffers_javascript_api\n/// @{\n/// @cond FLATBUFFERS_INTERNAL\n\n/**\n * @fileoverview\n *\n * Need to suppress 'global this' error so the Node.js export line doesn't cause\n * closure compile to error out.\n * @suppress {globalThis}\n */\n\n/**\n * @const\n * @namespace\n */\nvar flatbuffers = {};\n\n/**\n * @typedef {number}\n */\nflatbuffers.Offset;\n\n/**\n * @typedef {{\n *   bb: flatbuffers.ByteBuffer,\n *   bb_pos: number\n * }}\n */\nflatbuffers.Table;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_SHORT = 2;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_INT = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.FILE_IDENTIFIER_LENGTH = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZE_PREFIX_LENGTH = 4;\n\n/**\n * @enum {number}\n */\nflatbuffers.Encoding = {\n  UTF8_BYTES: 1,\n  UTF16_STRING: 2\n};\n\n/**\n * @type {Int32Array}\n * @const\n */\nflatbuffers.int32 = new Int32Array(2);\n\n/**\n * @type {Float32Array}\n * @const\n */\nflatbuffers.float32 = new Float32Array(flatbuffers.int32.buffer);\n\n/**\n * @type {Float64Array}\n * @const\n */\nflatbuffers.float64 = new Float64Array(flatbuffers.int32.buffer);\n\n/**\n * @type {boolean}\n * @const\n */\nflatbuffers.isLittleEndian = new Uint16Array(new Uint8Array([1, 0]).buffer)[0] === 1;\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @constructor\n * @param {number} low\n * @param {number} high\n */\nflatbuffers.Long = function(low, high) {\n  /**\n   * @type {number}\n   * @const\n   */\n  this.low = low | 0;\n\n  /**\n   * @type {number}\n   * @const\n   */\n  this.high = high | 0;\n};\n\n/**\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.Long.create = function(low, high) {\n  // Special-case zero to avoid GC overhead for default values\n  return low == 0 && high == 0 ? flatbuffers.Long.ZERO : new flatbuffers.Long(low, high);\n};\n\n/**\n * @returns {number}\n */\nflatbuffers.Long.prototype.toFloat64 = function() {\n  return (this.low >>> 0) + this.high * 0x100000000;\n};\n\n/**\n * @param {flatbuffers.Long} other\n * @returns {boolean}\n */\nflatbuffers.Long.prototype.equals = function(other) {\n  return this.low == other.low && this.high == other.high;\n};\n\n/**\n * @type {!flatbuffers.Long}\n * @const\n */\nflatbuffers.Long.ZERO = new flatbuffers.Long(0, 0);\n\n/// @endcond\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a FlatBufferBuilder.\n *\n * @constructor\n * @param {number=} opt_initial_size\n */\nflatbuffers.Builder = function(opt_initial_size) {\n  if (!opt_initial_size) {\n    var initial_size = 1024;\n  } else {\n    var initial_size = opt_initial_size;\n  }\n\n  /**\n   * @type {flatbuffers.ByteBuffer}\n   * @private\n   */\n  this.bb = flatbuffers.ByteBuffer.allocate(initial_size);\n\n  /**\n   * Remaining space in the ByteBuffer.\n   *\n   * @type {number}\n   * @private\n   */\n  this.space = initial_size;\n\n  /**\n   * Minimum alignment encountered so far.\n   *\n   * @type {number}\n   * @private\n   */\n  this.minalign = 1;\n\n  /**\n   * The vtable for the current table.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtable = null;\n\n  /**\n   * The amount of fields we're actually using.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vtable_in_use = 0;\n\n  /**\n   * Whether we are currently serializing a table.\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.isNested = false;\n\n  /**\n   * Starting offset of the current struct/table.\n   *\n   * @type {number}\n   * @private\n   */\n  this.object_start = 0;\n\n  /**\n   * List of offsets of all vtables.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtables = [];\n\n  /**\n   * For the current vector being built.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vector_num_elems = 0;\n\n  /**\n   * False omits default values from the serialized data\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.force_defaults = false;\n};\n\nflatbuffers.Builder.prototype.clear = function() {\n  this.bb.clear();\n  this.space = this.bb.capacity();\n  this.minalign = 1;\n  this.vtable = null;\n  this.vtable_in_use = 0;\n  this.isNested = false;\n  this.object_start = 0;\n  this.vtables = [];\n  this.vector_num_elems = 0;\n  this.force_defaults = false;\n};\n\n/**\n * In order to save space, fields that are set to their default value\n * don't get serialized into the buffer. Forcing defaults provides a\n * way to manually disable this optimization.\n *\n * @param {boolean} forceDefaults true always serializes default values\n */\nflatbuffers.Builder.prototype.forceDefaults = function(forceDefaults) {\n  this.force_defaults = forceDefaults;\n};\n\n/**\n * Get the ByteBuffer representing the FlatBuffer. Only call this after you've\n * called finish(). The actual data starts at the ByteBuffer's current position,\n * not necessarily at 0.\n *\n * @returns {flatbuffers.ByteBuffer}\n */\nflatbuffers.Builder.prototype.dataBuffer = function() {\n  return this.bb;\n};\n\n/**\n * Get the bytes representing the FlatBuffer. Only call this after you've\n * called finish().\n *\n * @returns {!Uint8Array}\n */\nflatbuffers.Builder.prototype.asUint8Array = function() {\n  return this.bb.bytes().subarray(this.bb.position(), this.bb.position() + this.offset());\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Prepare to write an element of `size` after `additional_bytes` have been\n * written, e.g. if you write a string, you need to align such the int length\n * field is aligned to 4 bytes, and the string data follows it directly. If all\n * you need to do is alignment, `additional_bytes` will be 0.\n *\n * @param {number} size This is the of the new element to write\n * @param {number} additional_bytes The padding size\n */\nflatbuffers.Builder.prototype.prep = function(size, additional_bytes) {\n  // Track the biggest thing we've ever aligned to.\n  if (size > this.minalign) {\n    this.minalign = size;\n  }\n\n  // Find the amount of alignment needed such that `size` is properly\n  // aligned after `additional_bytes`\n  var align_size = ((~(this.bb.capacity() - this.space + additional_bytes)) + 1) & (size - 1);\n\n  // Reallocate the buffer if needed.\n  while (this.space < align_size + size + additional_bytes) {\n    var old_buf_size = this.bb.capacity();\n    this.bb = flatbuffers.Builder.growByteBuffer(this.bb);\n    this.space += this.bb.capacity() - old_buf_size;\n  }\n\n  this.pad(align_size);\n};\n\n/**\n * @param {number} byte_size\n */\nflatbuffers.Builder.prototype.pad = function(byte_size) {\n  for (var i = 0; i < byte_size; i++) {\n    this.bb.writeInt8(--this.space, 0);\n  }\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt8 = function(value) {\n  this.bb.writeInt8(this.space -= 1, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt16 = function(value) {\n  this.bb.writeInt16(this.space -= 2, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt32 = function(value) {\n  this.bb.writeInt32(this.space -= 4, value);\n};\n\n/**\n * @param {flatbuffers.Long} value\n */\nflatbuffers.Builder.prototype.writeInt64 = function(value) {\n  this.bb.writeInt64(this.space -= 8, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat32 = function(value) {\n  this.bb.writeFloat32(this.space -= 4, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat64 = function(value) {\n  this.bb.writeFloat64(this.space -= 8, value);\n};\n/// @endcond\n\n/**\n * Add an `int8` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int8` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt8 = function(value) {\n  this.prep(1, 0);\n  this.writeInt8(value);\n};\n\n/**\n * Add an `int16` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int16` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt16 = function(value) {\n  this.prep(2, 0);\n  this.writeInt16(value);\n};\n\n/**\n * Add an `int32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt32 = function(value) {\n  this.prep(4, 0);\n  this.writeInt32(value);\n};\n\n/**\n * Add an `int64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {flatbuffers.Long} value The `int64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt64 = function(value) {\n  this.prep(8, 0);\n  this.writeInt64(value);\n};\n\n/**\n * Add a `float32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat32 = function(value) {\n  this.prep(4, 0);\n  this.writeFloat32(value);\n};\n\n/**\n * Add a `float64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat64 = function(value) {\n  this.prep(8, 0);\n  this.writeFloat64(value);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt8 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt8(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt16 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt16(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Long} value\n * @param {flatbuffers.Long} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || !value.equals(defaultValue)) {\n    this.addInt64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldOffset = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addOffset(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structs are stored inline, so nothing additional is being added. `d` is always 0.\n *\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldStruct = function(voffset, value, defaultValue) {\n  if (value != defaultValue) {\n    this.nested(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structures are always stored inline, they need to be created right\n * where they're used.  You'll get this assertion failure if you\n * created it elsewhere.\n *\n * @param {flatbuffers.Offset} obj The offset of the created object\n */\nflatbuffers.Builder.prototype.nested = function(obj) {\n  if (obj != this.offset()) {\n    throw new Error('FlatBuffers: struct must be serialized inline.');\n  }\n};\n\n/**\n * Should not be creating any other object, string or vector\n * while an object is being constructed\n */\nflatbuffers.Builder.prototype.notNested = function() {\n  if (this.isNested) {\n    throw new Error('FlatBuffers: object serialization must not be nested.');\n  }\n};\n\n/**\n * Set the current vtable at `voffset` to the current location in the buffer.\n *\n * @param {number} voffset\n */\nflatbuffers.Builder.prototype.slot = function(voffset) {\n  this.vtable[voffset] = this.offset();\n};\n\n/**\n * @returns {flatbuffers.Offset} Offset relative to the end of the buffer.\n */\nflatbuffers.Builder.prototype.offset = function() {\n  return this.bb.capacity() - this.space;\n};\n\n/**\n * Doubles the size of the backing ByteBuffer and copies the old data towards\n * the end of the new buffer (since we build the buffer backwards).\n *\n * @param {flatbuffers.ByteBuffer} bb The current buffer with the existing data\n * @returns {!flatbuffers.ByteBuffer} A new byte buffer with the old data copied\n * to it. The data is located at the end of the buffer.\n *\n * uint8Array.set() formally takes {Array<number>|ArrayBufferView}, so to pass\n * it a uint8Array we need to suppress the type check:\n * @suppress {checkTypes}\n */\nflatbuffers.Builder.growByteBuffer = function(bb) {\n  var old_buf_size = bb.capacity();\n\n  // Ensure we don't grow beyond what fits in an int.\n  if (old_buf_size & 0xC0000000) {\n    throw new Error('FlatBuffers: cannot grow buffer beyond 2 gigabytes.');\n  }\n\n  var new_buf_size = old_buf_size << 1;\n  var nbb = flatbuffers.ByteBuffer.allocate(new_buf_size);\n  nbb.setPosition(new_buf_size - old_buf_size);\n  nbb.bytes().set(bb.bytes(), new_buf_size - old_buf_size);\n  return nbb;\n};\n/// @endcond\n\n/**\n * Adds on offset, relative to where it will be written.\n *\n * @param {flatbuffers.Offset} offset The offset to add.\n */\nflatbuffers.Builder.prototype.addOffset = function(offset) {\n  this.prep(flatbuffers.SIZEOF_INT, 0); // Ensure alignment is already done.\n  this.writeInt32(this.offset() - offset + flatbuffers.SIZEOF_INT);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Start encoding a new object in the buffer.  Users will not usually need to\n * call this directly. The FlatBuffers compiler will generate helper methods\n * that call this method internally.\n *\n * @param {number} numfields\n */\nflatbuffers.Builder.prototype.startObject = function(numfields) {\n  this.notNested();\n  if (this.vtable == null) {\n    this.vtable = [];\n  }\n  this.vtable_in_use = numfields;\n  for (var i = 0; i < numfields; i++) {\n    this.vtable[i] = 0; // This will push additional elements as needed\n  }\n  this.isNested = true;\n  this.object_start = this.offset();\n};\n\n/**\n * Finish off writing the object that is under construction.\n *\n * @returns {flatbuffers.Offset} The offset to the object inside `dataBuffer`\n */\nflatbuffers.Builder.prototype.endObject = function() {\n  if (this.vtable == null || !this.isNested) {\n    throw new Error('FlatBuffers: endObject called without startObject');\n  }\n\n  this.addInt32(0);\n  var vtableloc = this.offset();\n\n  // Trim trailing zeroes.\n  var i = this.vtable_in_use - 1;\n  for (; i >= 0 && this.vtable[i] == 0; i--) {}\n  var trimmed_size = i + 1;\n\n  // Write out the current vtable.\n  for (; i >= 0; i--) {\n    // Offset relative to the start of the table.\n    this.addInt16(this.vtable[i] != 0 ? vtableloc - this.vtable[i] : 0);\n  }\n\n  var standard_fields = 2; // The fields below:\n  this.addInt16(vtableloc - this.object_start);\n  var len = (trimmed_size + standard_fields) * flatbuffers.SIZEOF_SHORT;\n  this.addInt16(len);\n\n  // Search for an existing vtable that matches the current one.\n  var existing_vtable = 0;\n  var vt1 = this.space;\nouter_loop:\n  for (i = 0; i < this.vtables.length; i++) {\n    var vt2 = this.bb.capacity() - this.vtables[i];\n    if (len == this.bb.readInt16(vt2)) {\n      for (var j = flatbuffers.SIZEOF_SHORT; j < len; j += flatbuffers.SIZEOF_SHORT) {\n        if (this.bb.readInt16(vt1 + j) != this.bb.readInt16(vt2 + j)) {\n          continue outer_loop;\n        }\n      }\n      existing_vtable = this.vtables[i];\n      break;\n    }\n  }\n\n  if (existing_vtable) {\n    // Found a match:\n    // Remove the current vtable.\n    this.space = this.bb.capacity() - vtableloc;\n\n    // Point table to existing vtable.\n    this.bb.writeInt32(this.space, existing_vtable - vtableloc);\n  } else {\n    // No match:\n    // Add the location of the current vtable to the list of vtables.\n    this.vtables.push(this.offset());\n\n    // Point table to current vtable.\n    this.bb.writeInt32(this.bb.capacity() - vtableloc, this.offset() - vtableloc);\n  }\n\n  this.isNested = false;\n  return vtableloc;\n};\n/// @endcond\n\n/**\n * Finalize a buffer, poiting to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n * @param {boolean=} opt_size_prefix\n */\nflatbuffers.Builder.prototype.finish = function(root_table, opt_file_identifier, opt_size_prefix) {\n  var size_prefix = opt_size_prefix ? flatbuffers.SIZE_PREFIX_LENGTH : 0;\n  if (opt_file_identifier) {\n    var file_identifier = opt_file_identifier;\n    this.prep(this.minalign, flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH + size_prefix);\n    if (file_identifier.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n      throw new Error('FlatBuffers: file identifier must be length ' +\n        flatbuffers.FILE_IDENTIFIER_LENGTH);\n    }\n    for (var i = flatbuffers.FILE_IDENTIFIER_LENGTH - 1; i >= 0; i--) {\n      this.writeInt8(file_identifier.charCodeAt(i));\n    }\n  }\n  this.prep(this.minalign, flatbuffers.SIZEOF_INT + size_prefix);\n  this.addOffset(root_table);\n  if (size_prefix) {\n    this.addInt32(this.bb.capacity() - this.space);\n  }\n  this.bb.setPosition(this.space);\n};\n\n/**\n * Finalize a size prefixed buffer, pointing to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n */\nflatbuffers.Builder.prototype.finishSizePrefixed = function (root_table, opt_file_identifier) {\n  this.finish(root_table, opt_file_identifier, true);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * This checks a required field has been set in a given table that has\n * just been constructed.\n *\n * @param {flatbuffers.Offset} table\n * @param {number} field\n */\nflatbuffers.Builder.prototype.requiredField = function(table, field) {\n  var table_start = this.bb.capacity() - table;\n  var vtable_start = table_start - this.bb.readInt32(table_start);\n  var ok = this.bb.readInt16(vtable_start + field) != 0;\n\n  // If this fails, the caller will show what field needs to be set.\n  if (!ok) {\n    throw new Error('FlatBuffers: field ' + field + ' must be set');\n  }\n};\n\n/**\n * Start a new array/vector of objects.  Users usually will not call\n * this directly. The FlatBuffers compiler will create a start/end\n * method for vector types in generated code.\n *\n * @param {number} elem_size The size of each element in the array\n * @param {number} num_elems The number of elements in the array\n * @param {number} alignment The alignment of the array\n */\nflatbuffers.Builder.prototype.startVector = function(elem_size, num_elems, alignment) {\n  this.notNested();\n  this.vector_num_elems = num_elems;\n  this.prep(flatbuffers.SIZEOF_INT, elem_size * num_elems);\n  this.prep(alignment, elem_size * num_elems); // Just in case alignment > int.\n};\n\n/**\n * Finish off the creation of an array and all its elements. The array must be\n * created with `startVector`.\n *\n * @returns {flatbuffers.Offset} The offset at which the newly created array\n * starts.\n */\nflatbuffers.Builder.prototype.endVector = function() {\n  this.writeInt32(this.vector_num_elems);\n  return this.offset();\n};\n/// @endcond\n\n/**\n * Encode the string `s` in the buffer using UTF-8. If a Uint8Array is passed\n * instead of a string, it is assumed to contain valid UTF-8 encoded data.\n *\n * @param {string|Uint8Array} s The string to encode\n * @return {flatbuffers.Offset} The offset in the buffer where the encoded string starts\n */\nflatbuffers.Builder.prototype.createString = function(s) {\n  if (s instanceof Uint8Array) {\n    var utf8 = s;\n  } else {\n    var utf8 = [];\n    var i = 0;\n\n    while (i < s.length) {\n      var codePoint;\n\n      // Decode UTF-16\n      var a = s.charCodeAt(i++);\n      if (a < 0xD800 || a >= 0xDC00) {\n        codePoint = a;\n      } else {\n        var b = s.charCodeAt(i++);\n        codePoint = (a << 10) + b + (0x10000 - (0xD800 << 10) - 0xDC00);\n      }\n\n      // Encode UTF-8\n      if (codePoint < 0x80) {\n        utf8.push(codePoint);\n      } else {\n        if (codePoint < 0x800) {\n          utf8.push(((codePoint >> 6) & 0x1F) | 0xC0);\n        } else {\n          if (codePoint < 0x10000) {\n            utf8.push(((codePoint >> 12) & 0x0F) | 0xE0);\n          } else {\n            utf8.push(\n              ((codePoint >> 18) & 0x07) | 0xF0,\n              ((codePoint >> 12) & 0x3F) | 0x80);\n          }\n          utf8.push(((codePoint >> 6) & 0x3F) | 0x80);\n        }\n        utf8.push((codePoint & 0x3F) | 0x80);\n      }\n    }\n  }\n\n  this.addInt8(0);\n  this.startVector(1, utf8.length, 1);\n  this.bb.setPosition(this.space -= utf8.length);\n  for (var i = 0, offset = this.space, bytes = this.bb.bytes(); i < utf8.length; i++) {\n    bytes[offset++] = utf8[i];\n  }\n  return this.endVector();\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.Builder.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n////////////////////////////////////////////////////////////////////////////////\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Create a new ByteBuffer with a given array of bytes (`Uint8Array`).\n *\n * @constructor\n * @param {Uint8Array} bytes\n */\nflatbuffers.ByteBuffer = function(bytes) {\n  /**\n   * @type {Uint8Array}\n   * @private\n   */\n  this.bytes_ = bytes;\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.position_ = 0;\n};\n\n/**\n * Create and allocate a new ByteBuffer with a given size.\n *\n * @param {number} byte_size\n * @returns {!flatbuffers.ByteBuffer}\n */\nflatbuffers.ByteBuffer.allocate = function(byte_size) {\n  return new flatbuffers.ByteBuffer(new Uint8Array(byte_size));\n};\n\nflatbuffers.ByteBuffer.prototype.clear = function() {\n  this.position_ = 0;\n};\n\n/**\n * Get the underlying `Uint8Array`.\n *\n * @returns {Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.bytes = function() {\n  return this.bytes_;\n};\n\n/**\n * Get the buffer's position.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.position = function() {\n  return this.position_;\n};\n\n/**\n * Set the buffer's position.\n *\n * @param {number} position\n */\nflatbuffers.ByteBuffer.prototype.setPosition = function(position) {\n  this.position_ = position;\n};\n\n/**\n * Get the buffer's capacity.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.capacity = function() {\n  return this.bytes_.length;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt8 = function(offset) {\n  return this.readUint8(offset) << 24 >> 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint8 = function(offset) {\n  return this.bytes_[offset];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt16 = function(offset) {\n  return this.readUint16(offset) << 16 >> 16;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint16 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt32 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8 | this.bytes_[offset + 2] << 16 | this.bytes_[offset + 3] << 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint32 = function(offset) {\n  return this.readInt32(offset) >>> 0;\n};\n\n/**\n * @param {number} offset\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readInt64 = function(offset) {\n  return new flatbuffers.Long(this.readInt32(offset), this.readInt32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readUint64 = function(offset) {\n  return new flatbuffers.Long(this.readUint32(offset), this.readUint32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat32 = function(offset) {\n  flatbuffers.int32[0] = this.readInt32(offset);\n  return flatbuffers.float32[0];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat64 = function(offset) {\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1] = this.readInt32(offset);\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0] = this.readInt32(offset + 4);\n  return flatbuffers.float64[0];\n};\n\n/**\n * @param {number} offset\n * @param {number|boolean} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt8 = function(offset, value) {\n  this.bytes_[offset] = /** @type {number} */(value);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint8 = function(offset, value) {\n  this.bytes_[offset] = value;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt16 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint16 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt32 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n  this.bytes_[offset + 2] = value >> 16;\n  this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint32 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n    this.bytes_[offset + 2] = value >> 16;\n    this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt64 = function(offset, value) {\n  this.writeInt32(offset, value.low);\n  this.writeInt32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint64 = function(offset, value) {\n    this.writeUint32(offset, value.low);\n    this.writeUint32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat32 = function(offset, value) {\n  flatbuffers.float32[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[0]);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat64 = function(offset, value) {\n  flatbuffers.float64[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1]);\n  this.writeInt32(offset + 4, flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0]);\n};\n\n/**\n * Return the file identifier.   Behavior is undefined for FlatBuffers whose\n * schema does not include a file_identifier (likely points at padding or the\n * start of a the root vtable).\n * @returns {string}\n */\nflatbuffers.ByteBuffer.prototype.getBufferIdentifier = function() {\n  if (this.bytes_.length < this.position_ + flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error(\n        'FlatBuffers: ByteBuffer is too short to contain an identifier.');\n  }\n  var result = \"\";\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    result += String.fromCharCode(\n        this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i));\n  }\n  return result;\n};\n\n/**\n * Look up a field in the vtable, return an offset into the object, or 0 if the\n * field is not present.\n *\n * @param {number} bb_pos\n * @param {number} vtable_offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__offset = function(bb_pos, vtable_offset) {\n  var vtable = bb_pos - this.readInt32(bb_pos);\n  return vtable_offset < this.readInt16(vtable) ? this.readInt16(vtable + vtable_offset) : 0;\n};\n\n/**\n * Initialize any Table-derived type to point to the union at the given offset.\n *\n * @param {flatbuffers.Table} t\n * @param {number} offset\n * @returns {flatbuffers.Table}\n */\nflatbuffers.ByteBuffer.prototype.__union = function(t, offset) {\n  t.bb_pos = offset + this.readInt32(offset);\n  t.bb = this;\n  return t;\n};\n\n/**\n * Create a JavaScript string from UTF-8 data stored inside the FlatBuffer.\n * This allocates a new string and converts to wide chars upon each access.\n *\n * To avoid the conversion to UTF-16, pass flatbuffers.Encoding.UTF8_BYTES as\n * the \"optionalEncoding\" argument. This is useful for avoiding conversion to\n * and from UTF-16 when the data will just be packaged back up in another\n * FlatBuffer later on.\n *\n * @param {number} offset\n * @param {flatbuffers.Encoding=} opt_encoding Defaults to UTF16_STRING\n * @returns {string|!Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.__string = function(offset, opt_encoding) {\n  offset += this.readInt32(offset);\n\n  var length = this.readInt32(offset);\n  var result = '';\n  var i = 0;\n\n  offset += flatbuffers.SIZEOF_INT;\n\n  if (opt_encoding === flatbuffers.Encoding.UTF8_BYTES) {\n    return this.bytes_.subarray(offset, offset + length);\n  }\n\n  while (i < length) {\n    var codePoint;\n\n    // Decode UTF-8\n    var a = this.readUint8(offset + i++);\n    if (a < 0xC0) {\n      codePoint = a;\n    } else {\n      var b = this.readUint8(offset + i++);\n      if (a < 0xE0) {\n        codePoint =\n          ((a & 0x1F) << 6) |\n          (b & 0x3F);\n      } else {\n        var c = this.readUint8(offset + i++);\n        if (a < 0xF0) {\n          codePoint =\n            ((a & 0x0F) << 12) |\n            ((b & 0x3F) << 6) |\n            (c & 0x3F);\n        } else {\n          var d = this.readUint8(offset + i++);\n          codePoint =\n            ((a & 0x07) << 18) |\n            ((b & 0x3F) << 12) |\n            ((c & 0x3F) << 6) |\n            (d & 0x3F);\n        }\n      }\n    }\n\n    // Encode UTF-16\n    if (codePoint < 0x10000) {\n      result += String.fromCharCode(codePoint);\n    } else {\n      codePoint -= 0x10000;\n      result += String.fromCharCode(\n        (codePoint >> 10) + 0xD800,\n        (codePoint & ((1 << 10) - 1)) + 0xDC00);\n    }\n  }\n\n  return result;\n};\n\n/**\n * Retrieve the relative offset stored at \"offset\"\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__indirect = function(offset) {\n  return offset + this.readInt32(offset);\n};\n\n/**\n * Get the start of data of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector = function(offset) {\n  return offset + this.readInt32(offset) + flatbuffers.SIZEOF_INT; // data starts after the length\n};\n\n/**\n * Get the length of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector_len = function(offset) {\n  return this.readInt32(offset + this.readInt32(offset));\n};\n\n/**\n * @param {string} ident\n * @returns {boolean}\n */\nflatbuffers.ByteBuffer.prototype.__has_identifier = function(ident) {\n  if (ident.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error('FlatBuffers: file identifier must be length ' +\n                    flatbuffers.FILE_IDENTIFIER_LENGTH);\n  }\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    if (ident.charCodeAt(i) != this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n\n// Exports for Node.js and RequireJS\nexport { flatbuffers };\n\n/// @endcond\n/// @}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(1057);\n"],"names":["async","pathOrBuffer","options","session","Session","loadModel","OnnxjsSessionHandler","env","wasm","initTimeout","simd","proxy","numThreads","Number","isInteger","numCpuLogicalCores","navigator","cpus","length","hardwareConcurrency","Math","min","ceil","initializeWebAssemblyInstance","handler","OnnxruntimeWebAssemblySessionHandler","Promise","resolve","onnxjsBackend","registerBackend","wasmBackend","Object","defineProperty","versions","value","version","enumerable","AttributeWithCacheKeyImpl","constructor","attribute","assign","this","cacheKey","_cacheKey","getOwnPropertyNames","sort","map","name","join","createAttributeWithCacheKey","ortFbs","onnxruntime","experimental","fbs","Attribute","attributes","_attributes","Map","attr","onnx","AttributeProto","set","getValue","getType","size","Error","key","type","delete","getFloat","defaultValue","get","getInt","getString","getTensor","getFloats","getInts","getStrings","getTensors","valueAndType","undefined","static","AttributeType","FLOAT","INT","STRING","TENSOR","FLOATS","INTS","STRINGS","TENSORS","attrType","GRAPH","GRAPHS","getValueNoCheck","LongUtil","isLong","longToNumber","arr","numberValue","Array","i","maybeLong","Tensor","fromProto","fromOrtTensor","utf8String","decodeUtf8String","getValueNoCheckFromOnnxFormat","getValueNoCheckFromOrtFormat","f","s","t","g","floats","ints","strings","tensors","graphs","floatsArray","intsLength","push","stringsLength","tensorsLength","backendsCache","tryLoadBackend","backendHint","backendObj","backend","obj","o","initialize","createSessionHandler","dispose","isBackend","init","webgl","WebGLBackend","resolveBackend","hint","hints","cache","contextId","matmulMaxBatchSize","textureCacheMode","pack","glContext","createWebGLContext","Logger","setWithEnv","gl","verbose","e","warning","context","WebGLSessionHandler","CoordsGlslLib","GlslLib","super","getFunctions","offsetToCoords","coordsToOffset","toVec","valueFrom","getCommonUtilFuncs","getInputsSamplingSnippets","getOutputSamplingSnippet","getCustomTypes","GlslLibRoutine","outputLayout","outputTextureLayout","isPacked","getPackedOutputSamplingSnippet","getUnpackedOutputSamplingSnippet","outShape","unpackedShape","outTexShape","width","height","result","funcName","getOutputScalarCoords","getOutputPacked1DCoords","getOutputPacked2DCoords","getOutputPacked3DCoords","getOutputPackedNDCoords","floatTextureSetRGBASource","getGlsl","output","getOutputUnpacked1DCoords","getOutputUnpacked2DCoords","getOutputUnpacked3DCoords","getOutputUnpacked4DCoords","getOutputUnpacked5DCoords","getOutputUnpacked6DCoords","floatTextureSetRSource","shape","texShape","packedTexShape","source","ArrayUtil","arraysEqual","texelsInLogicalRow","texelsInBatch","texelsInBatchN","batches","coords","b","rank","strides","coordsToCompute","coordsFromIndexSnippet","stride","glsl","texture2D","programInfo","inputNames","forEach","samplerName","inputLayout","inputTextureLayouts","generateShaderFuncNameFromInputSamplerName","getPackedSamplerFromInput","getUnpackedSamplerFromInput","outCoordFuncName","generateShaderFuncNameFromInputSamplerNameAtOutCoords","getPackedSamplerAtOutputCoords","getUnpackedSamplerAtOutputCoords","inShape","texName","texFuncSnippet","inRank","outRank","broadcastDims","BroadcastUtil","getBroadcastDims","getCoordsDataType","rankDiff","coordsSnippet","fields","getGlChannels","d","unpackedCoordsSnippet","isInputScalar","ShapeUtil","isOutputScalar","rows","cols","indexOf","inTexShape","getPackedSamplerScalar","getPackedSampler1D","getPackedSampler2D","getPackedSampler3D","getPackedSamplerND","getUnpackedSamplerScalar","getUnpackedSampler1D","getUnpackedSampler2D","getUnpackedSampler3D","getUnpackedSampler4D","getUnpackedSampler5D","getUnpackedSampler6D","texNumR","texNumC","packedSampler","valuesPerRow","squeezedShape","slice","keptDims","newInputShape","squeezeInputShape","params","newInputLayout","JSON","parse","stringify","samplerRoutine","routineBody","getSqueezedParams","dependencies","index","tNumR","tNumC","newShape","squeezeShape","stride0","stride1","routine","revDims","reverse","stride2","stride3","stride4","xScale","yScale","stridesBlock","body","layout","getValueFromSingle","varName","transpose","getPackedValueFrom","FunctionType","addDependency","node","nodes","cycleCheck","Set","alreadyTraversed","createOrderedNodes","graphNodes","dfsTraverse","root","has","add","EncodingGlslLib","encodeFloat32","decodeFloat32","encode","decode","encodeUint8","endianness","isLittleEndian","decodeUint8","ArrayBuffer","a","Uint32Array","c","Uint8Array","FragColorGlslLib","setFragColor","getColorAsFloat","INLINE_FUNC_DEF_REGEX","script","inlineDefs","match","exec","split","tokens","trim","filter","v","regexString","replace","regex","RegExp","variable","declLine","newBody","paramRedecLine","replacement","libs","glslLibRoutineDependencyGraph","GlslContext","keys","glslRegistry","lib","libName","routinesInLib","currentNode","GlslLibRoutineNode","preprocess","shaderSource","hasMain","getDefaultFragShaderMain","replaceInlines","getFragShaderPreamble","getUniforms","variables","getImports","routinesIncluded","selectGlslLibRoutinesToBeIncluded","routines","classAndRoutine","TopologicalSortGlslRoutines","returnOrderedNodes","samplers","uniformLines","sampler","arrayLength","VecGlslLib","ShapeUtilsGlslLib","bcastIndex","bcastMatmulIndex","offsetToIndices","indicesToOffset","incrementIndices","outputRank","dimOffset","block","indexToOffsetSingle","offsetToIndicesSingle","shapeInit","GLSL_ES_2_0","varyingVertex","varyingFrag","outputDeclaration","GLSL_ES_3_0","outputShapeLength","binaryVecFunctions","copyVec","setVecItem","getVecItem","nameOp","sub","mul","div","fname","assignmentBlock","packedTextureDataCache","unpackedTextureDataCache","calculateTextureWidthAndHeight","textureType","layoutStrategy","executeProgram","program","inputs","inputTypes","inputTextureDatas","getOrCreateTextureData","texture","cacheHint","getProgramInfoUniqueKey","artifact","programManager","getArtifact","createTextureLayoutFromTextureType","dims","outputTextureData","createTextureData","build","setArtifact","runProgram","run","tensor","TextureType","packed","td","getTextureData","dataId","unpack","packedLastDimension","group","channels","adjustedKernelShape","adjustedLayout","buffer","numberData","numFeatureMaps","oldRowSize","newRowSize","Float32Array","oldOffset","newOffset","subarray","unpackedTextureLayout","createTextureLayoutFromShape","reverseWH","unpackedTextureData","createTextureDataFromLayoutBindTensor","dataType","data","usage","textureManager","createTextureFromLayout","createTextureDataFromTexture","reshapeUnpacked","input","reshapedDims","inputTD","unpacked","newTextureLayout","computeStrides","reshapePacked","isReshapeCheap","squeezedInputShape","processDims3D","squeezedOutputShape","squeezedInputTensor","squeezedOutputTensor","createPackedReshape3DProgramInfoLoader","cast","tensorId","textureData","_id","readTexture","readTextureAsync","setTextureData","isInitializer","isTextureLayoutCached","clearActiveTextures","releaseTexture","isFloat32DownloadSupported","readUint8TextureAsFloat","encodeAsUint8","createPackProgramInfoLoader","createUnpackProgramInfoLoader","WEBGL_OP_RESOLVE_RULES","unaryOps","abs","acos","binaryOps","and","asin","atan","averagePool","parseAveragePoolAttributes","batchNormalization","parseBatchNormalizationAttributes","parseCastAttributes","clip","parseClipAttributes","clipV11","concat","parseConcatAttributes","conv","parseConvAttributes","convTranspose","parseConvTransposeAttributes","cos","identity","depthToSpace","parseDepthToSpaceAttributes","equal","elu","parseEluAttributes","exp","flatten","parseFlattenAttributes","floor","gather","parseGatherAttributes","gemm","parseGemmAttributesV7","parseGemmAttributesV11","globalAveragePool","parseGlobalAveragePoolAttributes","globalMaxPool","greater","imageScaler","parseImageScalerAttributes","instanceNormalization","parseInstanceNormalizationAttributes","leakyRelu","parseLeakyReluAttributes","less","lrn","parseLrnAttributes","log","matMul","parseMatMulAttributes","maxPool","parseMaxPoolAttributes","neg","not","or","padV2","parsePadAttributesV2","padV11","parsePadAttributesV11","pow","pRelu","reduceLogSum","parseReduceAttributes","reduceMax","reduceMean","reduceMin","reduceProd","reduceSum","reduceLogSumSquare","relu","reshape","resize","parseResizeAttributesV10","parseResizeAttributesV11","sigmoid","sin","sliceV10","parseSliceAttributes","softmax","parseSoftmaxAttributes","softmaxV13","parseSoftmaxAttributesV13","parseSplitAttributes","sqrt","squeeze","parseSqueezeAttributes","squeezeV13","sum","tan","tanh","tile","parseTransposeAttributes","upsample","parseUpsampleAttributesV7","parseUpsampleAttributesV9","unsqueeze","parseUnsqueezeAttributes","unsqueezeV13","xor","batchNormalizationProgramMetadata","inferenceHandler","validateInputs","createBatchNormalizationProgramInfo","epsilon","momentum","spatial","scaleWidth","scaleHeight","X","scale","B","mean","var_","glslAdd","ValueBased","glslDiv","glslMul","glslSub","glslEqual","glslGreater","glslLess","glslAnd","glslOr","glslXor","glslPow","glslBuiltinBinary","glslPRelu","createBinaryProgramInfoLoader","glslFunc","outputTensorType","createBinaryProgramInfo","isBroadcast","areEqual","outputShape","usePackedTexture","calculatedShape","calcShape","aRank","bRank","aBcast","bBcast","to","ProtoUtil","tensorDataTypeFromProto","createPackedConcatProgramInfoLoader","metadata","inputCount","from","fill","axis","inputShape","dataNShape","axisIndex","getChannels","dtype","unpackChannel","unpackFromChannel","shapes","offsets","channel","lastChannels","allChannels","getValueSnippet","shift","getShiftedChannelsSnippet","lastIndex","x","createPackedConcatProgramInfo","channelIdx","idx","createUnpackedConcatProgramInfoLoader","sizeInConcatAxis","previousSum","getTextureIndexWhereDataResidesMethod","getTextureIndexWhereDataResidesLinearSearch","getTextureIndexWhereDataResidesBinarySearch","getFetchDataFromCorrectTextureMethod","getGetSizeInConcatAxisValueFromIndexMethod","createUnpackedConcatProgramInfo","searchAxis","numberOfTensors","tensorRank","codeLines","inputType","inputDimensionality","createUnpackedGroupedConvProgramInfoLoader","hasBias","processBias","xShape","wShape","outputChannelsPerGroup","autoPad","dilations","kernelShape","pads","calculateOutputShape","activationFunction","applyActivation","getActivationSnippet","createUnpackedGroupedConvProgramInfo","conv2DPackedPointwise","xshape","kshape","reshapedX","reshapedK","matmulInputs","matmulOutput","createPackedMatmulProgramInfoLoader","conv2DPacked","im2colOutput","createPackedIm2ColProgramInfoLoader","kernelReshaped","computeTotalPad","inDim","adj","kernel","dilation","outSize","distributePadding","totalPad","head","tail","smallPad","convTranspose2d","adjustedAttributes","getAdjustedConvTransposeAttributes","convTranspose2DUnpacked","valueInit","inputChannelsPerGroup","createUnpackedConvTransposeProgramInfo","createUnpackedConvTransposeProgramInfoLoader","outputPadding","spatialRank","updateShape","calculateOutputShapeAndPads","newAttributes","activationAttributes","parseInternalActivationAttributes","featureMaps","adjustPads","batchSize","inputSpatialShape","outChannels","dilatedKernelShape","inputSpatialShapeWithPad","outputSpatialShape","conv2d","getAdjustedConvAttributes","packMode","isPointwise","conv2DUnpackedPointwise","conv2DUnpacked","createMatmulProgramInfoLoader","xIm2Col","createIm2ColProgramInfoLoader","dotProductInputs","createDotProductProgramInfoLoader","PoolConvUtil","adjustPadsBasedOnAutoPad","blocksize","blocksizeSqr","transposePerm","mode","firstReshapeShape","firstReshapedTensor","transposeAttributes","perm","transposeOutput","secondReshapeShape","TypeError","activationCacheKey","createDotProductProgramMetadata","im2colShape","calculateIm2ColDims","kWidth","kHeight","im2colStrides","im2colWidth","im2colHeight","initValue","sharedDim","createDotProductProgramInfo","outputDims","flattenShape","r","func","activation","glslRelu","glslSigmoid","glslClip","clipMin","clipMax","activationName","MIN_CLIP","MAX_CLIP","createGatherProgramInfoLoader","gatherProgramMetadata","indexDataShape","normalizeAxis","indexCopyOps","createGatherProgramInfo","NUMBER_TYPES","createGemmProgramInfoLoader","parseGemmAttributes","isOptionalC","transA","transB","alpha","beta","createGemmProgramInfo","aShape","bShape","M","N","GemmUtil","getShapeOfGemmResult","line","w","wshape","kernelSize","unrolled","row","col","createPackedIm2ColProgramInfo","im2colDims","createIm2ColProgramInfo","createImageScalerProgramInfoLoader","bias","imageScalerProgramMetadata","createGetBiasMethod","createImageScalerProgramInfo","numChannels","meanAndVariance","createMeanAndVarianceProgramInfoLoader","createComputeOutputProgramInfoLoader","meanAndVarianceProgramMetadata","xDims","channelSize","createMeanAndVarianceProgramInfo","computeOutputProgramMetadata","meanAndVarianceShape","textureWidth","textureHeight","meanAndVarianceWidth","meanAndVarianceHeight","createComputeOutputProgramInfo","createLrnProgramInfoLoader","lrnProgramMetadata","C","createLrnProgramInfo","sharedDimIndex","coordsDataType","allGlChannels","getBiasForMatmulSnippet","getBiasForMatmul","getBcastedSamplerForMatmulSnippet","unpackedACoordsSnippet","unpackedBCoordsSnippet","inAShape","inBShape","inARank","inBRank","rankADiff","rankBDiff","broadcastADims","broadcastBDims","coordsASnippet","coordsBSnippet","swapDimSnippet","getBcastSamplerForMatmul","getSamplerAInLoopSnippet","res","getA","getSamplerBInLoopSnippet","getB","createPackedMatmulProgramInfo","createMatmulProgramMetadata","arank","brank","createMatmulProgramInfo","packProgramMetadata","unpackedReversed","inputRank","setup","reversedInputWH","outOfBoundsCondition","cond","getOutOfBoundsCondition","D","getOutput","createPackProgramInfo","getVecChannels","padProgramMetadata","validateInputsV2","createPadProgramInfo","validateInputsV11","attrubutes","generatePadAttributesFromInputs","integerData","floatData","padShape","getPadFunction","getPadConstant","getPadReflect","getPadEdge","createAveragePoolProgramInfo","ceilMode","countIncludePad","isGlobalOperator","getAdjustedPoolAttributesAndOutputShape","op2","generatePoolingCode","createMaxPoolProgramInfo","storageOrder","hasDilations","hasOwnProperty","call","adjustPoolAttributes","computePoolOutputShape","globalMaxPoolAttributes","globalMaxPoolMetadata","inputDims","op1","start","kw","sw","pwStart","pwEnd","dimW","codeW","codeH","codeHEnd","kh","sh","phStart","phEnd","dimH","kernelStrides","stridesRank","padsRank","offsetToIndicesFunction","copyInputDims","copyArray","copyPads","copyKernelStrides","copyStrides","padCode","reduce","cur","array","arrayName","reduceOp","reduceProgramMetadata","createReduceProgramInfo","axes","keepDims","iRank","idxCopy","normalizeAxes","ops","reduceOps","k","idxZero","input3D","outputShape3D","createPackedReshape3DProgramMetadata","inputShape3D","mainLoop","outputCoords","getReshapedInputCoords","getFlattenedIndexFrom3D","createPackedReshape3DProgramInfo","batch","isCheapReshape","calculateReshapedDims","resizeProgramMetadata","createPackedResizeProgramInfo","parseUpsampleAttributes","scales","prepareInputs","every","coordinateTransformMode","dim","outputHeight","outputWidth","inputHeight","inputWidth","scalesHeight","scalesWidth","getSourceFracIndex","outputSizes","scalesTensor","scalesInputIdx","sizesInputIdx","parseScalesData","isResize","sizesTensor","parseScalesDataFromOutputSize","yDims","scalesValidation","end","Int32Array","sliceProgramMetadata","createSliceProgramInfo","starts","ends","val","normalizedAxes","sliceOps","validateInputsV10","generateSliceAttributesFromInputs","some","softmaxComputeMaxProgramMetadata","softmaxComputeScaleProgramMetadata","softmaxProgramMetadata","logicalRowCount","sizeToDimension","featureCount","sizeFromDimension","computeSoftmax","isTransposeRequired","transposedInputShape","transposeAttribute","transposedInputs","_","p","computeMaxProgramInfo","createComputeMaxProgramInfo","max","computeScaleProgramInfo","createComputScaleProgramInfo","softMaxProgramInfo","createSoftMaxProgramInfo","maxElementPerLogicalRow","normalizationPerLogicalRow","splitProgramMetadata","count","getProgramCount","createSplitProgramInfo","numOutputs","outputs","SplitUtil","splitShape","offset","validateInputsV13","sumProgramMetadata","createSumProgramInfo","sumLine","j","tileProgramMetadata","createTileProgramInfo","tileOps","transposeProgramMetadata","createTransposeProgramInfo","getAdjustedPerm","unpackedOutputShape","getOutputShape","getPermFunctionBody","sortBasedOnPerm","reverseFunc","downloadUint8AsFloat","glslAbs","glslBuiltinUnary","glslAcos","glslAsin","glslAtan","glslCeil","glslCos","glslElu","glslExp","glslFloor","glslIdentity","glslLeakyRelu","glslLog","glslNeg","glslNot","glslSin","glslSqrt","glslTan","glslTanh","createElementwiseProgramInfoLoader","createElementwiseProgramInfo","generateClipAttributesFromInputs","unpackProgramMetadata","createUnpackProgramInfo","innerDims","sourceCoords","getSourceCoords","unsqueezeShape","upsampleProgramMetadata","createUpsampleProgramInfo","opset","extrapolationValue","needRoiInput","useExtrapolation","nearestMode","cubicCoefficientA","excludeOutside","useNearest2xOptimization","roiInputIdx","outputPitches","inputPitches","precalculatedPitches","getInputFloatFunction","profiler","textureLayoutStrategy","repo","attributesBound","buildArtifact","event","useProgram","bindOutput","bindAttributes","attribLocations","bindUniforms","uniformLocations","err","error","draw","vertexShader","deleteShader","deleteProgram","preprocessor","GlslPreprocessor","fragScript","compile","getUniformLocations","getAttribLocations","fragShaderScript","vertexShaderScript","getVertexShaderSource","compileShader","VERTEX_SHADER","debug","fragShader","FRAGMENT_SHADER","createProgram","attachFramebuffer","positionHandle","position","textureCoordHandle","textureCoord","setVertexAttributes","textures","texturePosition","location","find","bindTexture","uniform1fv","uniform1f","uniform1iv","uniform1i","uniformHandle","bindTextureToUniform","getAttribLocation","getUniformLocation","reference","PreferLogicalStrategy","maxTextureSize","ProgramManager","TextureManager","reuseTextures","pack2unpackMap","unpack2packMap","createInferenceHandler","WebGLInferenceHandler","onGraphInitialized","graph","initializers","getValues","addInitializer","opsets","op","resolveOperator","impl","opImpl","opInit","internalFormat","R32F","format","RED","RGBA32F","RGBA","src","textureSize","allocate","dataSize","dest","ALPHA","UNSIGNED_BYTE","_textureSize","byteOffset","byteLength","isEmptyArray","isArray","parseAxisParam","assert","ax","isInt","sizeFromShape","sizeToSquarishShape","computeTextureWH","prefs","breakAxis","wsize","hsize","totalSize","wh","computeTexture","logShape","squeezeResult","dimsToSkip","inferredDims","reversedWH","config","pendingRead","inUseTextures","idleTextures","textureLookup","textureDataType","toEncoderType","encoder","getEncoder","pop","updateTexture","toTextureData","allocateTexture","toTensorData","subscribers","createAndWaitForFence","tensorData","deleteTexture","splice","Int16Array","Int8Array","Uint16Array","Float64Array","_dataType","len","checkFn","delayFn","_counter","maxCounter","reject","tryCount","tryFn","nextBackoff","setTimeout","charAt","toUpperCase","createNewWebGLContext","canvas","ca","depth","antialias","stencil","preserveDrawingBuffer","premultipliedAlpha","failIfMajorPerformanceCaveat","getContext","WebGLContext","webgl2","OffscreenCanvas","createOffscreenCanvas","document","createElement","createCanvas","isContextLost","disable","DEPTH_TEST","STENCIL_TEST","BLEND","DITHER","POLYGON_OFFSET_FILL","SAMPLE_COVERAGE","enable","SCISSOR_TEST","CULL_FACE","cullFace","BACK","linearSearchLastTrue","frameBufferBound","itemsToPoll","getExtensions","vertexbuffer","createVertexbuffer","framebuffer","createFramebuffer","queryVitalParameters","createTexture","TEXTURE_2D","texParameteri","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","texImage2D","checkError","texSubImage2D","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","viewport","scissor","readPixels","isFramebufferReady","getActiveTexture","getParameter","ACTIVE_TEXTURE","TEXTURE0","getTextureBinding","TEXTURE_BINDING_2D","getFramebufferBinding","FRAMEBUFFER_BINDING","vertexAttribPointer","enableVertexAttribArray","attachShader","linkProgram","shaderType","shader","createShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","activeTexture","drawArrays","TRIANGLE_STRIP","getError","label","toString","DataEncoders","RedFloat32DataEncoder","isRenderFloat32Supported","RGBAFloatDataEncoder","textureHalfFloatExtension","HALF_FLOAT_OES","Uint8DataEncoder","unit","maxTextureImageUnits","disposed","deleteFramebuffer","bindBuffer","ARRAY_BUFFER","deleteBuffer","ELEMENT_ARRAY_BUFFER","finish","createDefaultGeometry","createBuffer","geometry","bufferData","STATIC_DRAW","fb","isFloatTextureAttachableToFrameBuffer","checkFloatTextureAttachableToFrameBuffer","checkRenderFloat32","checkFloat32Download","isBlendSupported","checkFloat32Blend","MAX_TEXTURE_SIZE","MAX_TEXTURE_IMAGE_UNITS","colorBufferFloatExtension","getExtension","disjointTimerQueryWebgl2Extension","textureFloatExtension","frameBuffer","isComplete","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","fragmentShader","POINTS","NO_ERROR","beginTimer","gl2","ext","query","createQuery","beginQuery","TIME_ELAPSED_EXT","endTimer","endQuery","isTimerResultAvailable","available","disjoint","getQueryParameter","QUERY_RESULT_AVAILABLE","GPU_DISJOINT_EXT","getTimerResult","timeElapsed","QUERY_RESULT","deleteQuery","repeatedTry","fenceContext","createFence","pollFence","isFencePassed","fenceSync","SYNC_GPU_COMMANDS_COMPLETE","flush","status","clientWaitSync","ALREADY_SIGNALED","CONDITION_SATISFIED","addItemToPoll","pollItems","isDoneFn","resolveFn","KernelOp","getNodes","_ops","reset","_starter","resolved","_values","getInputIndices","sessionHandler","modelInputs","graphInputs","sequence","graphValues","rear","thisOpIndex","thisOp","inputList","inputTensors","outputList","downstreamNodes","currentDownstreamNodeIndex","currentDownstreamNode","getOutputIndices","outputIndex","outputTensor","getData","Graph","graphProto","initializer","GraphImpl","Value","valueInfo","_from","_to","tensorValueTypeFromProto","tensorType","Node","_nodeProto","NodeProto","opType","tensorAttributesFromORTFormat","executeNode","graphInitializer","buildGraph","transformGraph","checkIsAcyclic","_allInputIndices","getInputNames","_allInputNames","_allOutputIndices","getOutputNames","_allOutputNames","_allData","_nodes","GraphProto","buildGraphFromOnnxFormat","buildGraphFromOrtFormat","dataIndices","nodesIndices","inputValueNames","currentIndex","tensorDimsFromProto","nodeProto","pick","dataIndex","inputsLength","inputName","nodeArgsLength","nodeArgs","valueType","TypeInfoValue","tensor_type","TensorTypeAndShape","elemType","dimLength","dimValue","initializersLength","tensorDimsFromORTFormat","outputsLength","outputName","nodesLength","attributesLength","starters","nodesStack","nodesState","nodeIndex","outgoingEdgeIndex","downstreamNodeIndex","removeAllIdentityNodes","removeAllDropoutNodes","fuseConvActivationNodes","finalizeGraph","newIndices","nodePossition","ind","currentData","deleteNode","inputValueIndex","outputValueIndex","nodesConsumingOutput","delIndex","replaceIndex","isActivation","n","next","child","SEVERITY_VALUE","info","fatal","LOGGER_PROVIDER_MAP","_severity","_content","_category","severity","content","category","console","color","LOGGER_DEFAULT_CONFIG","provider","minimalSeverity","logDateTime","logSourceLocation","LOGGER_CONFIG_MAP","arg0","arg1","arg2","arg3","bind","logInternal","stack","Date","toISOString","previousConfig","logLevel","Event","startTime","endCallback","timer","ctx","waitForQueryAndGetTime","EventRecord","endTime","maxNumberEvents","flushBatchSize","flushIntervalInMilliseconds","_started","_flushPointer","_maxNumberEvents","_flushBatchSize","_flushIntervalInMilliseconds","_timingEvents","_flushTime","now","stop","logOneEvent","begin","isPromise","then","reason","eventRes","endSync","checkTimer","toFixed","currentTime","previousPointer","started","performance","load","buf","isOrtFormat","loadFromOnnxFormat","loadFromOrtFormat","modelProto","ModelProto","irVersion","_opsets","opsetImport","domain","_graph","flatbuffers","ByteBuffer","ortModel","InferenceSession","getRootAsInferenceSession","model","opsetImportLength","opsetId","INT_TYPES","FLOAT_TYPES","matchSelector","selector","endsWith","rangeStart","parseInt","substring","isNaN","pair","rangeEnd","rules","rule","versionSelector","DimensionValueType","TensorDataType","NodeType","Shape","bb","bb_pos","__init","readInt32","setPosition","SIZE_PREFIX_LENGTH","__offset","Dimension","__indirect","__vector","__vector_len","builder","startObject","addFieldOffset","startVector","addOffset","endVector","numElems","endObject","startShape","addDim","endShape","DimensionValue","denotation","optionalEncoding","__string","valueOffset","denotationOffset","startDimension","addValue","addDenotation","endDimension","dimType","readInt8","UNKNOWN","readInt64","createLong","dimParam","addFieldInt8","addFieldInt64","dimParamOffset","startDimensionValue","addDimType","addDimValue","addDimParam","endDimensionValue","UNDEFINED","addFieldInt32","shapeOffset","startTensorTypeAndShape","addElemType","addShape","endTensorTypeAndShape","MapType","keyType","TypeInfo","valueTypeOffset","startMapType","addKeyType","addValueType","endMapType","SequenceType","elemTypeOffset","startSequenceType","endSequenceType","EdgeEnd","readUint32","srcArgIndex","dstArgIndex","node_index","src_arg_index","dst_arg_index","prep","writeInt32","NodeEdge","inputEdges","inputEdgesLength","outputEdges","outputEdgesLength","inputEdgesOffset","outputEdgesOffset","startNodeEdge","addNodeIndex","addInputEdges","addOutputEdges","endNodeEdge","docString","sinceVersion","Primitive","executionProviderType","inputArgCounts","inputArgCountsLength","inputArgCountsArray","bytes","implicitInputs","implicitInputsLength","nameOffset","docStringOffset","domainOffset","opTypeOffset","executionProviderTypeOffset","inputsOffset","outputsOffset","attributesOffset","inputArgCountsOffset","addInt32","implicitInputsOffset","startNode","addName","addDocString","addDomain","addSinceVersion","addIndex","addOpType","addType","addExecutionProviderType","addInputs","addOutputs","addAttributes","addInputArgCounts","addImplicitInputs","endNode","ValueInfo","typeOffset","startValueInfo","endValueInfo","readUint8","NONE","__union","startTypeInfo","endTypeInfo","OperatorSetId","startOperatorSetId","addVersion","endOperatorSetId","dimsLength","rawData","rawDataLength","rawDataArray","stringData","stringDataLength","dimsOffset","addInt64","rawDataOffset","addInt8","stringDataOffset","startTensor","addDims","addDataType","addRawData","addStringData","endTensor","SparseTensor","values","indices","valuesOffset","indicesOffset","startSparseTensor","addValues","addIndices","endSparseTensor","readFloat32","floatsLength","graphsLength","addFieldFloat32","sOffset","tOffset","gOffset","floatsOffset","addFloat32","intsOffset","stringsOffset","tensorsOffset","graphsOffset","startAttribute","addF","addI","addS","addT","addG","addFloats","addInts","addStrings","addTensors","addGraphs","endAttribute","maxNodeIndex","nodeEdges","nodeEdgesLength","sparseInitializers","sparseInitializersLength","initializersOffset","nodeArgsOffset","nodesOffset","nodeEdgesOffset","sparseInitializersOffset","startGraph","addInitializers","addNodeArgs","addNodes","addMaxNodeIndex","addNodeEdges","addSparseInitializers","endGraph","Model","producerName","producerVersion","modelVersion","graphDocString","opsetImportOffset","producerNameOffset","producerVersionOffset","graphOffset","graphDocStringOffset","startModel","addIrVersion","addOpsetImport","addProducerName","addProducerVersion","addModelVersion","addGraph","addGraphDocString","endModel","KernelCreateInfos","nodeIndices","nodeIndicesLength","nodeIndicesArray","kernelDefHashes","readUint64","kernelDefHashesLength","nodeIndicesOffset","kernelDefHashesOffset","startKernelCreateInfos","addNodeIndices","addKernelDefHashes","endKernelCreateInfos","SubGraphSessionState","graphId","sessionState","SessionState","graphIdOffset","sessionStateOffset","requiredField","startSubGraphSessionState","addGraphId","addSessionState","endSubGraphSessionState","kernels","subGraphSessionStates","subGraphSessionStatesLength","kernelsOffset","subGraphSessionStatesOffset","startSessionState","addKernels","addSubGraphSessionStates","endSessionState","__has_identifier","ortVersion","ortVersionOffset","modelOffset","startInferenceSession","addOrtVersion","addModel","endInferenceSession","outputNames","feeds","_fetches","_options","inputMap","feed","outputMap","startProfiling","endProfiling","_initialized","Profiler","create","graphInputTypes","graphInputDims","_model","arg","process","promisify","readFile","response","fetch","arrayBuffer","isView","modelProtoBlob","initializeOps","_executionPlan","ExecutionPlan","normalizeAndValidateInputs","outputTensors","execute","createOutput","modelInputNames","sortedInputs","sortedInputsIndex","validateInputTensorDims","modelInputIndices","modelValues","graphInput","validateInputTensorTypes","givenInputs","expectedType","actualType","noneDimSupported","expectedDims","actualDims","compareTensorDims","modelOutputNames","dataProvider","asyncDataProvider","_strides","Guid","validateDimsAndCalcSize","empty","RangeError","dataviewConstructor","sizeof","dataBuffer","createView","tensorProto","str","dataDest","dataSource","DataView","elementSize","sizeofProto","readProto","TensorProto","DataType","INT32","INT16","UINT16","INT8","UINT8","BOOL","int32Data","INT64","int64Data","DOUBLE","doubleData","UINT32","UINT64","uint64Data","element","ortTensor","BigInt64Array","greaterThanOrEqual","lessThan","toNumber","view","getUint8","getInt8","getUint16","getInt16","getFloat32","getInt32","getUint32","fromBits","getFloat64","expectedDimensions","expr","msg","n1","n2","MatMulUtil","dimsA","dimsB","adims","bdims","isMatMul","crank","cdims","cShapeMatMul","calcMatMulShape","aLen","bLen","broadcastedIndices","originalShape","originalIndices","fillIndex","inplace","resultType","outputIndices","originalIndicesA","originalIndicesB","rest","valA","valB","isAScalar","isBScalar","finalShape","finalRank","unshift","target","targetIndex","sourceIndex","blockSize","leftShape","transLeft","rightShape","transRight","biasShape","K","kDim","isValidBroadcast","typeProto","unsigned","Long","fromValue","low","high","getSizeFromDimensionRange","axisToIncrementOn","originalDims","shapeHints","nDims","unknownDimension","newTensorSize","oldTensorSize","pad","shape1","shape2","total","y","right","inSqueezeList","inputDimsIterator","determineSplit","numElementsAlongAxis","ReduceUtil","keepdims","calcReduceShape","inputStrides","indicesY","calcReduceByAxis","curAxisInd","pos","step","adjustPadAndReturnShape","computeShapeHelper","filterDims","inSize","padHeadIndex","padTailIndex","dkernel","padNeeded","TextDecoder","isProxy","proxyWorker","initWasmCallbacks","initOrtCallbacks","initializing","initialized","aborted","createSessionAllocateCallbacks","createSessionFinalizeCallbacks","createSessionCallbacks","releaseSessionCallbacks","runCallbacks","endProfilingCallbacks","ensureWorker","onProxyWorkerMessage","ev","out","scriptSrc","currentScript","wasmPaths","substr","lastIndexOf","terminate","onmessage","message","in","postMessage","initializeWebAssembly","initializeRuntime","core","initRuntime","createSessionAllocate","createSessionFinalize","modeldata","createSession","releaseSession","sessionId","inputIndices","extractTransferableBuffers","setRunOptions","getInstance","runOptionsHandle","allocs","runOptions","logSeverityLevel","logVerbosityLevel","tagDataOffset","tag","allocWasmString","_OrtCreateRunOptions","checkLastError","extra","iterateExtraOptions","WeakSet","keyDataOffset","valueDataOffset","_OrtAddRunConfigEntry","_OrtReleaseRunOptions","alloc","_free","runtimeInitialized","runtimeInitializationPromise","path","modelData","fetches","inputArray","entries","kvp","setSessionOptions","sessionOptionsHandle","sessionOptions","use_ort_model_bytes_directly","executionProviders","ep","enableMemPattern","appendDefaultOptions","graphOptimizationLevel","getGraphOptimzationLevel","executionMode","getExecutionMode","logIdDataOffset","logId","optimizedModelFilePathOffset","optimizedModelFilePath","_OrtCreateSessionOptions","enableCpuMemArena","enableProfiling","epName","webnnOptions","deviceType","_OrtAddSessionConfigEntry","powerPreference","epNameDataOffset","_OrtAppendExecutionProvider","setExecutionProviders","freeDimensionOverrides","_OrtAddFreeDimensionOverride","_OrtReleaseSessionOptions","tensorDataTypeStringToEnum","tensorDataTypeEnumToString","getTensorElementSize","dateType","tensorTypeToTypedArrayConstructor","BigUint64Array","logLevelStringToEnum","loggingLevel","_OrtInit","activeSessions","modelDataOffset","_malloc","HEAPU8","sessionHandle","inputNamesUTF8Encoded","outputNamesUTF8Encoded","_OrtCreateSession","outputCount","stackSave","dataOffset","stackAlloc","_OrtGetInputOutputCount","HEAP32","stackRestore","getSessionInputOutputCount","_OrtGetInputName","UTF8ToString","_OrtGetOutputName","_OrtFree","_OrtReleaseSession","runOptionsAllocs","inputValues","inputAllocs","dataByteLength","HEAPU32","dimIndex","_OrtCreateTensor","beforeRunStack","inputValuesOffset","inputNamesOffset","outputValuesOffset","outputNamesOffset","inputValuesIndex","inputNamesIndex","outputValuesIndex","outputNamesIndex","jsepOnRunStart","errorCode","_OrtRun","runPromise","jsepRunPromise","jsepOnRunEnd","beforeGetTensorDataStack","tensorDataOffset","_OrtGetTensorData","tensorDataIndex","maxBytesToRead","_OrtReleaseTensor","profileFileName","_OrtEndProfiling","buffers","ortWasmFactory","ortWasmFactoryThreaded","flags","timeout","useThreads","SharedArrayBuffer","MessageChannel","port1","WebAssembly","validate","isMultiThreadSupported","useSimd","isSimdSupported","wasmPrefixOverride","wasmFileName","getWasmFileName","wasmPathOverride","isTimeout","tasks","factory","locateFile","fileName","scriptDirectory","Blob","URL","createObjectURL","mainScriptUrlOrBlob","__dirname","scriptSourceCode","module","what","race","PThread","terminateAllThreads","dataLength","lengthBytesUTF8","stringToUTF8","prefix","seen","paramsOffset","_OrtGetLastError","errorMessagePointer","errorMessage","Worker_fn","exports","workerConstructor","workerOptions","url","globalScope","self","window","blob","BlobBuilder","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","append","getBlob","webkitURL","objectURL","worker","revokeObjectURL","encodeURIComponent","valuesById","$protobuf","$Reader","Reader","$Writer","Writer","$util","util","$root","roots","Version","properties","sparseTensors","typeProtos","prototype","refAttrName","newBuffer","sparseTensor","tp","emptyArray","writer","uint32","string","float","int64","fork","ldelim","TypeProto","int32","SparseTensorProto","encodeDelimited","reader","end2","skipType","decodeDelimited","verify","isString","fromObject","object","String","LongBits","base64","toObject","arrays","defaults","long","longs","enums","json","isFinite","toJSON","toJSONOptions","getTypeUrl","typeUrlPrefix","ValueInfoProto","TrainingInfoProto","initializationBinding","updateBinding","initialization","algorithm","StringStringEntryProto","metadataProps","trainingInfo","functions","OperatorSetIdProto","FunctionProto","TensorAnnotation","quantParameterTensorNames","tensorName","sparseInitializer","quantizationAnnotation","externalData","segment","dataLocation","Segment","double","uint64","DataLocation","TensorShapeProto","$oneOfFields","oneOfGetter","oneOfSetter","oneofs","sequenceType","mapType","optionalType","sparseTensorType","Sequence","Optional","OperatorStatus","attributeProto","_scriptDir","__filename","F","W","Y","H","P","u","ready","l","h","m","importScripts","ENVIRONMENT_IS_PTHREAD","O","dirname","startsWith","normalize","readFileSync","thisProgram","argv","exitCode","inspect","global","Worker","href","XMLHttpRequest","open","send","responseText","responseType","onload","onerror","T","writeSync","S","A","print","E","printErr","quit","wasmBinary","R","noExitRuntime","ee","I","U","HEAP8","HEAP16","HEAPU16","HEAPF32","HEAPF64","G","INITIAL_MEMORY","wasmMemory","Memory","initial","maximum","shared","L","z","q","J","$","V","Z","monitorRunDependencies","Q","clearInterval","onAbort","RuntimeError","te","re","ne","credentials","ok","catch","instantiate","ae","oe","ie","he","Fa","ue","Za","Ia","Ha","cmd","start_routine","gb","Ya","pthread_ptr","unref","mb","se","fe","fromCharCode","ce","le","qe","hb","onExit","de","pe","La","Ta","Pa","ab","$a","receiveObjectTransfer","eb","threadInitTLS","Sa","setExitStatus","Ra","rb","pt","cb","targetThread","ct","qb","transferList","Ue","thread","loaded","alert","threadId","text","args","filename","lineno","on","handlers","urlOrBlob","wasmModule","Xa","me","establishStackSpace","_t","wt","ge","be","Oa","Wa","Va","Ua","ve","_e","ob","ye","we","invokeEntryPoint","gt","Oe","charCodeAt","Me","Te","Se","Ae","Ee","Re","Fe","De","Ce","Ie","ke","xe","Ye","He","Pe","Atomics","nb","store","bt","__emscripten_thread_mailbox_await","checkMailbox","We","Ge","Ne","Le","je","ze","lt","Be","yt","arguments","Ot","mt","Je","Ke","Xe","$e","USER","LOGNAME","PATH","PWD","HOME","LANG","languages","Ve","Ze","Qe","et","tt","rt","nt","at","ot","it","ut","getFullYear","getMonth","getDate","getDay","Ja","Ka","getTime","setDate","setMonth","setFullYear","kb","jb","Ma","Qa","Na","Ga","sb","ib","lb","includes","st","ft","dt","ref","NaN","getUTCSeconds","getUTCMinutes","getUTCHours","getUTCDate","getUTCMonth","getUTCFullYear","getUTCDay","UTC","getSeconds","getMinutes","getHours","getTimezoneOffset","setTime","getYear","vt","toTimeString","timeOrigin","pb","apply","grow","__errno_location","pthread_self","malloc","sa","ta","instantiateWasm","instantiateStreaming","instance","aa","ba","da","ea","fa","ga","ha","ia","ja","ka","la","ma","na","oa","_pthread_self","pa","qa","ra","__emscripten_tls_init","__emscripten_thread_init","ua","__emscripten_thread_crashed","va","ht","wa","xa","__emscripten_thread_exit","ya","__emscripten_check_mailbox","za","Aa","Ba","Ca","Da","Ea","Mt","calledRun","onRuntimeInitialized","postRun","startWorker","preRun","setStatus","keepRuntimeAlive","ExitStatus","preInit","ortWasm","moduleArg","fs","HEAP64","HEAPU64","fromWireType","globalThis","Function","tb","ub","vb","wb","xb","zb","db","yb","Ab","Bb","BindingError","InternalError","count_emval_handles","Cb","toWireType","argPackAdvance","readValueFromPointer","Uint8ClampedArray","deleteObject","BigInt","copyWithin","__embind_initialize_bindings","Gb","Db","Eb","Fb","Ib","Hb","fn","pending","b64","s64","parts","chunk","invalidEncoding","test","EventEmitter","_listeners","evt","off","listeners","emit","f32","f8b","writeFloat_f32_cpy","writeFloat_f32_rev","readFloat_f32_cpy","readFloat_f32_rev","writeFloatLE","writeFloatBE","readFloatLE","readFloatBE","writeFloat_ieee754","writeUint","sign","round","exponent","LN2","readFloat_ieee754","readUint","uint","mantissa","Infinity","writeUintLE","writeUintBE","readUintLE","readUintBE","f64","writeDouble_f64_cpy","writeDouble_f64_rev","readDouble_f64_cpy","readDouble_f64_rev","writeDoubleLE","writeDoubleBE","readDoubleLE","readDoubleBE","writeDouble_ieee754","off0","off1","readDouble_ieee754","lo","hi","inquire","moduleName","mod","eval","SIZE","MAX","slab","utf8","read","write","c1","c2","__esModule","guid","EMPTY","isGuid","validator","gen","createEmpty","raw","random","equals","other","isEmpty","protobuf","configure","_configure","BufferWriter","BufferReader","rpc","indexOutOfRange","writeLength","create_array","Buffer","isBuffer","readLongVarint","bits","readFixed32_end","readFixed64","_slice","sint32","bool","fixed32","sfixed32","skip","wireType","BufferReader_","merge","sint64","zzDecode","fixed64","sfixed64","utf8Slice","Service","rpcImpl","requestDelimited","responseDelimited","Boolean","rpcCall","method","requestCtor","responseCtor","request","callback","asPromise","endedByRPC","zero","zzEncode","zeroHash","fromNumber","fromString","toLong","fromHash","hash","toHash","mask","part0","part1","part2","dst","ifNotSet","newError","CustomError","captureStackTrace","writable","configurable","pool","isNode","freeze","emptyObject","isObject","isset","isSet","prop","utf8Write","_Buffer_from","_Buffer_allocUnsafe","sizeOrArray","dcodeIO","key2Re","key32Re","key64Re","longToHash","longFromHash","lcFirst","toLowerCase","ProtocolError","fieldNames","fieldMap","encoding","allocUnsafe","Op","noop","State","states","writeByte","VarintOp","writeVarint64","writeFixed32","_push","writeBytes","BufferWriter_","writeStringBuffer","writeBytesBuffer","copy","require","default","Instance","Module","ctz32","clz32","__isLong__","INT_CACHE","UINT_CACHE","fromInt","cachedObj","UZERO","ZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","MAX_VALUE","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","radix","radixToPower","power","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","eq","radixLong","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","notEquals","neq","comp","lessThanOrEqual","lte","greaterThan","gte","compare","thisNeg","otherNeg","negate","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","b00","divide","divisor","approx","toUnsigned","shru","shr","shl","log2","delta","approxRes","approxRem","modulo","countLeadingZeros","clz","countTrailingZeros","ctz","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","rotateLeft","rotl","rotateRight","rotr","toSigned","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","_default","Offset","Table","SIZEOF_SHORT","SIZEOF_INT","FILE_IDENTIFIER_LENGTH","Encoding","UTF8_BYTES","UTF16_STRING","float32","float64","toFloat64","Builder","opt_initial_size","initial_size","space","minalign","vtable","vtable_in_use","isNested","object_start","vtables","vector_num_elems","force_defaults","clear","capacity","forceDefaults","asUint8Array","additional_bytes","align_size","old_buf_size","growByteBuffer","byte_size","writeInt8","writeInt16","writeInt64","writeFloat32","writeFloat64","addInt16","addFloat64","voffset","slot","addFieldInt16","addFieldFloat64","addFieldStruct","nested","notNested","new_buf_size","nbb","numfields","vtableloc","trimmed_size","existing_vtable","vt1","outer_loop","vt2","readInt16","root_table","opt_file_identifier","opt_size_prefix","size_prefix","file_identifier","finishSizePrefixed","table","field","table_start","vtable_start","elem_size","num_elems","alignment","createString","codePoint","bytes_","position_","readUint16","readFloat64","writeUint8","writeUint16","writeUint32","writeUint64","getBufferIdentifier","vtable_offset","opt_encoding","ident","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","getter","definition","Symbol","toStringTag","__webpack_exports__"],"sourceRoot":""}