/*!
 * ONNX Runtime Web v1.17.0
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// common/dist/esm/backend-impl.js
var backends, backendsSortedByPriority, registerBackend, resolveBackend;
var init_backend_impl = __esm({
  "common/dist/esm/backend-impl.js"() {
    "use strict";
    backends = /* @__PURE__ */ new Map();
    backendsSortedByPriority = [];
    registerBackend = (name, backend, priority) => {
      if (backend && typeof backend.init === "function" && typeof backend.createInferenceSessionHandler === "function") {
        const currentBackend = backends.get(name);
        if (currentBackend === void 0) {
          backends.set(name, { backend, priority });
        } else if (currentBackend.priority > priority) {
          return;
        } else if (currentBackend.priority === priority) {
          if (currentBackend.backend !== backend) {
            throw new Error(`cannot register backend "${name}" using priority ${priority}`);
          }
        }
        if (priority >= 0) {
          const i = backendsSortedByPriority.indexOf(name);
          if (i !== -1) {
            backendsSortedByPriority.splice(i, 1);
          }
          for (let i2 = 0; i2 < backendsSortedByPriority.length; i2++) {
            if (backends.get(backendsSortedByPriority[i2]).priority <= priority) {
              backendsSortedByPriority.splice(i2, 0, name);
              return;
            }
          }
          backendsSortedByPriority.push(name);
        }
        return;
      }
      throw new TypeError("not a valid backend");
    };
    resolveBackend = async (backendHints) => {
      const backendNames = backendHints.length === 0 ? backendsSortedByPriority : backendHints;
      const errors = [];
      for (const backendName of backendNames) {
        const backendInfo = backends.get(backendName);
        if (backendInfo) {
          if (backendInfo.initialized) {
            return backendInfo.backend;
          } else if (backendInfo.aborted) {
            continue;
          }
          const isInitializing = !!backendInfo.initPromise;
          try {
            if (!isInitializing) {
              backendInfo.initPromise = backendInfo.backend.init();
            }
            await backendInfo.initPromise;
            backendInfo.initialized = true;
            return backendInfo.backend;
          } catch (e) {
            if (!isInitializing) {
              errors.push({ name: backendName, err: e });
            }
            backendInfo.aborted = true;
          } finally {
            delete backendInfo.initPromise;
          }
        }
      }
      throw new Error(`no available backend found. ERR: ${errors.map((e) => `[${e.name}] ${e.err}`).join(", ")}`);
    };
  }
});

// common/dist/esm/backend.js
var init_backend = __esm({
  "common/dist/esm/backend.js"() {
    "use strict";
    init_backend_impl();
  }
});

// common/dist/esm/version.js
var version;
var init_version = __esm({
  "common/dist/esm/version.js"() {
    "use strict";
    version = "1.17.0";
  }
});

// common/dist/esm/env-impl.js
var logLevelValue, env;
var init_env_impl = __esm({
  "common/dist/esm/env-impl.js"() {
    "use strict";
    init_version();
    logLevelValue = "warning";
    env = {
      wasm: {},
      webgl: {},
      webgpu: {},
      versions: { common: version },
      set logLevel(value) {
        if (value === void 0) {
          return;
        }
        if (typeof value !== "string" || ["verbose", "info", "warning", "error", "fatal"].indexOf(value) === -1) {
          throw new Error(`Unsupported logging level: ${value}`);
        }
        logLevelValue = value;
      },
      get logLevel() {
        return logLevelValue;
      }
    };
    Object.defineProperty(env, "logLevel", { enumerable: true });
  }
});

// common/dist/esm/env.js
var env2;
var init_env = __esm({
  "common/dist/esm/env.js"() {
    "use strict";
    init_env_impl();
    env2 = env;
  }
});

// common/dist/esm/tensor-conversion-impl.js
var tensorToDataURL, tensorToImageData;
var init_tensor_conversion_impl = __esm({
  "common/dist/esm/tensor-conversion-impl.js"() {
    "use strict";
    tensorToDataURL = (tensor, options) => {
      const canvas = document.createElement("canvas");
      canvas.width = tensor.dims[3];
      canvas.height = tensor.dims[2];
      const pixels2DContext = canvas.getContext("2d");
      if (pixels2DContext != null) {
        let width;
        let height;
        if (options?.tensorLayout !== void 0 && options.tensorLayout === "NHWC") {
          width = tensor.dims[2];
          height = tensor.dims[3];
        } else {
          width = tensor.dims[3];
          height = tensor.dims[2];
        }
        const inputformat = options?.format !== void 0 ? options.format : "RGB";
        const norm = options?.norm;
        let normMean;
        let normBias;
        if (norm === void 0 || norm.mean === void 0) {
          normMean = [255, 255, 255, 255];
        } else {
          if (typeof norm.mean === "number") {
            normMean = [norm.mean, norm.mean, norm.mean, norm.mean];
          } else {
            normMean = [norm.mean[0], norm.mean[1], norm.mean[2], 0];
            if (norm.mean[3] !== void 0) {
              normMean[3] = norm.mean[3];
            }
          }
        }
        if (norm === void 0 || norm.bias === void 0) {
          normBias = [0, 0, 0, 0];
        } else {
          if (typeof norm.bias === "number") {
            normBias = [norm.bias, norm.bias, norm.bias, norm.bias];
          } else {
            normBias = [norm.bias[0], norm.bias[1], norm.bias[2], 0];
            if (norm.bias[3] !== void 0) {
              normBias[3] = norm.bias[3];
            }
          }
        }
        const stride = height * width;
        let rTensorPointer = 0, gTensorPointer = stride, bTensorPointer = stride * 2, aTensorPointer = -1;
        if (inputformat === "RGBA") {
          rTensorPointer = 0;
          gTensorPointer = stride;
          bTensorPointer = stride * 2;
          aTensorPointer = stride * 3;
        } else if (inputformat === "RGB") {
          rTensorPointer = 0;
          gTensorPointer = stride;
          bTensorPointer = stride * 2;
        } else if (inputformat === "RBG") {
          rTensorPointer = 0;
          bTensorPointer = stride;
          gTensorPointer = stride * 2;
        }
        for (let i = 0; i < height; i++) {
          for (let j = 0; j < width; j++) {
            const R = (tensor.data[rTensorPointer++] - normBias[0]) * normMean[0];
            const G = (tensor.data[gTensorPointer++] - normBias[1]) * normMean[1];
            const B = (tensor.data[bTensorPointer++] - normBias[2]) * normMean[2];
            const A = aTensorPointer === -1 ? 255 : (tensor.data[aTensorPointer++] - normBias[3]) * normMean[3];
            pixels2DContext.fillStyle = "rgba(" + R + "," + G + "," + B + "," + A + ")";
            pixels2DContext.fillRect(j, i, 1, 1);
          }
        }
        return canvas.toDataURL();
      } else {
        throw new Error("Can not access image data");
      }
    };
    tensorToImageData = (tensor, options) => {
      const pixels2DContext = document.createElement("canvas").getContext("2d");
      let image;
      if (pixels2DContext != null) {
        let width;
        let height;
        let channels;
        if (options?.tensorLayout !== void 0 && options.tensorLayout === "NHWC") {
          width = tensor.dims[2];
          height = tensor.dims[1];
          channels = tensor.dims[3];
        } else {
          width = tensor.dims[3];
          height = tensor.dims[2];
          channels = tensor.dims[1];
        }
        const inputformat = options !== void 0 ? options.format !== void 0 ? options.format : "RGB" : "RGB";
        const norm = options?.norm;
        let normMean;
        let normBias;
        if (norm === void 0 || norm.mean === void 0) {
          normMean = [255, 255, 255, 255];
        } else {
          if (typeof norm.mean === "number") {
            normMean = [norm.mean, norm.mean, norm.mean, norm.mean];
          } else {
            normMean = [norm.mean[0], norm.mean[1], norm.mean[2], 255];
            if (norm.mean[3] !== void 0) {
              normMean[3] = norm.mean[3];
            }
          }
        }
        if (norm === void 0 || norm.bias === void 0) {
          normBias = [0, 0, 0, 0];
        } else {
          if (typeof norm.bias === "number") {
            normBias = [norm.bias, norm.bias, norm.bias, norm.bias];
          } else {
            normBias = [norm.bias[0], norm.bias[1], norm.bias[2], 0];
            if (norm.bias[3] !== void 0) {
              normBias[3] = norm.bias[3];
            }
          }
        }
        const stride = height * width;
        if (options !== void 0) {
          if (options.format !== void 0 && (channels === 4 && options.format !== "RGBA") || channels === 3 && (options.format !== "RGB" && options.format !== "BGR")) {
            throw new Error("Tensor format doesn't match input tensor dims");
          }
        }
        const step = 4;
        let rImagePointer = 0, gImagePointer = 1, bImagePointer = 2, aImagePointer = 3;
        let rTensorPointer = 0, gTensorPointer = stride, bTensorPointer = stride * 2, aTensorPointer = -1;
        if (inputformat === "RGBA") {
          rTensorPointer = 0;
          gTensorPointer = stride;
          bTensorPointer = stride * 2;
          aTensorPointer = stride * 3;
        } else if (inputformat === "RGB") {
          rTensorPointer = 0;
          gTensorPointer = stride;
          bTensorPointer = stride * 2;
        } else if (inputformat === "RBG") {
          rTensorPointer = 0;
          bTensorPointer = stride;
          gTensorPointer = stride * 2;
        }
        image = pixels2DContext.createImageData(width, height);
        for (let i = 0; i < height * width; rImagePointer += step, gImagePointer += step, bImagePointer += step, aImagePointer += step, i++) {
          image.data[rImagePointer] = (tensor.data[rTensorPointer++] - normBias[0]) * normMean[0];
          image.data[gImagePointer] = (tensor.data[gTensorPointer++] - normBias[1]) * normMean[1];
          image.data[bImagePointer] = (tensor.data[bTensorPointer++] - normBias[2]) * normMean[2];
          image.data[aImagePointer] = aTensorPointer === -1 ? 255 : (tensor.data[aTensorPointer++] - normBias[3]) * normMean[3];
        }
      } else {
        throw new Error("Can not access image data");
      }
      return image;
    };
  }
});

// common/dist/esm/tensor-factory-impl.js
var bufferToTensor, tensorFromImage, tensorFromTexture, tensorFromGpuBuffer, tensorFromPinnedBuffer;
var init_tensor_factory_impl = __esm({
  "common/dist/esm/tensor-factory-impl.js"() {
    "use strict";
    init_tensor_impl();
    bufferToTensor = (buffer, options) => {
      if (buffer === void 0) {
        throw new Error("Image buffer must be defined");
      }
      if (options.height === void 0 || options.width === void 0) {
        throw new Error("Image height and width must be defined");
      }
      if (options.tensorLayout === "NHWC") {
        throw new Error("NHWC Tensor layout is not supported yet");
      }
      const { height, width } = options;
      const norm = options.norm ?? { mean: 255, bias: 0 };
      let normMean;
      let normBias;
      if (typeof norm.mean === "number") {
        normMean = [norm.mean, norm.mean, norm.mean, norm.mean];
      } else {
        normMean = [norm.mean[0], norm.mean[1], norm.mean[2], norm.mean[3] ?? 255];
      }
      if (typeof norm.bias === "number") {
        normBias = [norm.bias, norm.bias, norm.bias, norm.bias];
      } else {
        normBias = [norm.bias[0], norm.bias[1], norm.bias[2], norm.bias[3] ?? 0];
      }
      const inputformat = options.format !== void 0 ? options.format : "RGBA";
      const outputformat = options.tensorFormat !== void 0 ? options.tensorFormat !== void 0 ? options.tensorFormat : "RGB" : "RGB";
      const stride = height * width;
      const float32Data = outputformat === "RGBA" ? new Float32Array(stride * 4) : new Float32Array(stride * 3);
      let step = 4, rImagePointer = 0, gImagePointer = 1, bImagePointer = 2, aImagePointer = 3;
      let rTensorPointer = 0, gTensorPointer = stride, bTensorPointer = stride * 2, aTensorPointer = -1;
      if (inputformat === "RGB") {
        step = 3;
        rImagePointer = 0;
        gImagePointer = 1;
        bImagePointer = 2;
        aImagePointer = -1;
      }
      if (outputformat === "RGBA") {
        aTensorPointer = stride * 3;
      } else if (outputformat === "RBG") {
        rTensorPointer = 0;
        bTensorPointer = stride;
        gTensorPointer = stride * 2;
      } else if (outputformat === "BGR") {
        bTensorPointer = 0;
        gTensorPointer = stride;
        rTensorPointer = stride * 2;
      }
      for (let i = 0; i < stride; i++, rImagePointer += step, bImagePointer += step, gImagePointer += step, aImagePointer += step) {
        float32Data[rTensorPointer++] = (buffer[rImagePointer] + normBias[0]) / normMean[0];
        float32Data[gTensorPointer++] = (buffer[gImagePointer] + normBias[1]) / normMean[1];
        float32Data[bTensorPointer++] = (buffer[bImagePointer] + normBias[2]) / normMean[2];
        if (aTensorPointer !== -1 && aImagePointer !== -1) {
          float32Data[aTensorPointer++] = (buffer[aImagePointer] + normBias[3]) / normMean[3];
        }
      }
      const outputTensor = outputformat === "RGBA" ? new Tensor("float32", float32Data, [1, 4, height, width]) : new Tensor("float32", float32Data, [1, 3, height, width]);
      return outputTensor;
    };
    tensorFromImage = async (image, options) => {
      const isHTMLImageEle = typeof HTMLImageElement !== "undefined" && image instanceof HTMLImageElement;
      const isImageDataEle = typeof ImageData !== "undefined" && image instanceof ImageData;
      const isImageBitmap = typeof ImageBitmap !== "undefined" && image instanceof ImageBitmap;
      const isString = typeof image === "string";
      let data;
      let bufferToTensorOptions = options ?? {};
      if (isHTMLImageEle) {
        const canvas = document.createElement("canvas");
        canvas.width = image.width;
        canvas.height = image.height;
        const pixels2DContext = canvas.getContext("2d");
        if (pixels2DContext != null) {
          let height = image.height;
          let width = image.width;
          if (options !== void 0 && options.resizedHeight !== void 0 && options.resizedWidth !== void 0) {
            height = options.resizedHeight;
            width = options.resizedWidth;
          }
          if (options !== void 0) {
            bufferToTensorOptions = options;
            if (options.tensorFormat !== void 0) {
              throw new Error("Image input config format must be RGBA for HTMLImageElement");
            } else {
              bufferToTensorOptions.tensorFormat = "RGBA";
            }
            bufferToTensorOptions.height = height;
            bufferToTensorOptions.width = width;
          } else {
            bufferToTensorOptions.tensorFormat = "RGBA";
            bufferToTensorOptions.height = height;
            bufferToTensorOptions.width = width;
          }
          pixels2DContext.drawImage(image, 0, 0);
          data = pixels2DContext.getImageData(0, 0, width, height).data;
        } else {
          throw new Error("Can not access image data");
        }
      } else if (isImageDataEle) {
        let height;
        let width;
        if (options !== void 0 && options.resizedWidth !== void 0 && options.resizedHeight !== void 0) {
          height = options.resizedHeight;
          width = options.resizedWidth;
        } else {
          height = image.height;
          width = image.width;
        }
        if (options !== void 0) {
          bufferToTensorOptions = options;
        }
        bufferToTensorOptions.format = "RGBA";
        bufferToTensorOptions.height = height;
        bufferToTensorOptions.width = width;
        if (options !== void 0) {
          const tempCanvas = document.createElement("canvas");
          tempCanvas.width = width;
          tempCanvas.height = height;
          const pixels2DContext = tempCanvas.getContext("2d");
          if (pixels2DContext != null) {
            pixels2DContext.putImageData(image, 0, 0);
            data = pixels2DContext.getImageData(0, 0, width, height).data;
          } else {
            throw new Error("Can not access image data");
          }
        } else {
          data = image.data;
        }
      } else if (isImageBitmap) {
        if (options === void 0) {
          throw new Error("Please provide image config with format for Imagebitmap");
        }
        const canvas = document.createElement("canvas");
        canvas.width = image.width;
        canvas.height = image.height;
        const pixels2DContext = canvas.getContext("2d");
        if (pixels2DContext != null) {
          const height = image.height;
          const width = image.width;
          pixels2DContext.drawImage(image, 0, 0, width, height);
          data = pixels2DContext.getImageData(0, 0, width, height).data;
          bufferToTensorOptions.height = height;
          bufferToTensorOptions.width = width;
          return bufferToTensor(data, bufferToTensorOptions);
        } else {
          throw new Error("Can not access image data");
        }
      } else if (isString) {
        return new Promise((resolve, reject) => {
          const canvas = document.createElement("canvas");
          const context = canvas.getContext("2d");
          if (!image || !context) {
            return reject();
          }
          const newImage = new Image();
          newImage.crossOrigin = "Anonymous";
          newImage.src = image;
          newImage.onload = () => {
            canvas.width = newImage.width;
            canvas.height = newImage.height;
            context.drawImage(newImage, 0, 0, canvas.width, canvas.height);
            const img = context.getImageData(0, 0, canvas.width, canvas.height);
            bufferToTensorOptions.height = canvas.height;
            bufferToTensorOptions.width = canvas.width;
            resolve(bufferToTensor(img.data, bufferToTensorOptions));
          };
        });
      } else {
        throw new Error("Input data provided is not supported - aborted tensor creation");
      }
      if (data !== void 0) {
        return bufferToTensor(data, bufferToTensorOptions);
      } else {
        throw new Error("Input data provided is not supported - aborted tensor creation");
      }
    };
    tensorFromTexture = (texture, options) => {
      const { width, height, download, dispose } = options;
      const dims = [1, height, width, 4];
      return new Tensor({ location: "texture", type: "float32", texture, dims, download, dispose });
    };
    tensorFromGpuBuffer = (gpuBuffer, options) => {
      const { dataType, dims, download, dispose } = options;
      return new Tensor({ location: "gpu-buffer", type: dataType ?? "float32", gpuBuffer, dims, download, dispose });
    };
    tensorFromPinnedBuffer = (type, buffer, dims) => new Tensor({ location: "cpu-pinned", type, data: buffer, dims: dims ?? [buffer.length] });
  }
});

// common/dist/esm/tensor-impl-type-mapping.js
var NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP, NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP, isBigIntChecked, checkBigInt;
var init_tensor_impl_type_mapping = __esm({
  "common/dist/esm/tensor-impl-type-mapping.js"() {
    "use strict";
    NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP = /* @__PURE__ */ new Map([
      ["float32", Float32Array],
      ["uint8", Uint8Array],
      ["int8", Int8Array],
      ["uint16", Uint16Array],
      ["float16", Uint16Array],
      ["int16", Int16Array],
      ["int32", Int32Array],
      ["bool", Uint8Array],
      ["float64", Float64Array],
      ["uint32", Uint32Array]
    ]);
    NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP = /* @__PURE__ */ new Map([
      [Float32Array, "float32"],
      [Uint8Array, "uint8"],
      [Int8Array, "int8"],
      [Uint16Array, "uint16"],
      [Int16Array, "int16"],
      [Int32Array, "int32"],
      [Float64Array, "float64"],
      [Uint32Array, "uint32"]
    ]);
    isBigIntChecked = false;
    checkBigInt = () => {
      if (!isBigIntChecked) {
        isBigIntChecked = true;
        const isBigInt64ArrayAvailable = typeof BigInt64Array !== "undefined" && typeof BigInt64Array.from === "function";
        const isBigUint64ArrayAvailable = typeof BigUint64Array !== "undefined" && typeof BigUint64Array.from === "function";
        if (isBigInt64ArrayAvailable) {
          NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set("int64", BigInt64Array);
          NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(BigInt64Array, "int64");
        }
        if (isBigUint64ArrayAvailable) {
          NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set("uint64", BigUint64Array);
          NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(BigUint64Array, "uint64");
        }
      }
    };
  }
});

// common/dist/esm/tensor-utils-impl.js
var calculateSize, tensorReshape;
var init_tensor_utils_impl = __esm({
  "common/dist/esm/tensor-utils-impl.js"() {
    "use strict";
    init_tensor_impl();
    calculateSize = (dims) => {
      let size = 1;
      for (let i = 0; i < dims.length; i++) {
        const dim = dims[i];
        if (typeof dim !== "number" || !Number.isSafeInteger(dim)) {
          throw new TypeError(`dims[${i}] must be an integer, got: ${dim}`);
        }
        if (dim < 0) {
          throw new RangeError(`dims[${i}] must be a non-negative integer, got: ${dim}`);
        }
        size *= dim;
      }
      return size;
    };
    tensorReshape = (tensor, dims) => {
      switch (tensor.location) {
        case "cpu":
          return new Tensor(tensor.type, tensor.data, dims);
        case "cpu-pinned":
          return new Tensor({
            location: "cpu-pinned",
            data: tensor.data,
            type: tensor.type,
            dims
          });
        case "texture":
          return new Tensor({
            location: "texture",
            texture: tensor.texture,
            type: tensor.type,
            dims
          });
        case "gpu-buffer":
          return new Tensor({
            location: "gpu-buffer",
            gpuBuffer: tensor.gpuBuffer,
            type: tensor.type,
            dims
          });
        default:
          throw new Error(`tensorReshape: tensor location ${tensor.location} is not supported`);
      }
    };
  }
});

// common/dist/esm/tensor-impl.js
var Tensor;
var init_tensor_impl = __esm({
  "common/dist/esm/tensor-impl.js"() {
    "use strict";
    init_tensor_conversion_impl();
    init_tensor_factory_impl();
    init_tensor_impl_type_mapping();
    init_tensor_utils_impl();
    Tensor = class {
      /**
       * implementation.
       */
      constructor(arg0, arg1, arg2) {
        checkBigInt();
        let type;
        let dims;
        if (typeof arg0 === "object" && "location" in arg0) {
          this.dataLocation = arg0.location;
          type = arg0.type;
          dims = arg0.dims;
          switch (arg0.location) {
            case "cpu-pinned": {
              const expectedTypedArrayConstructor = NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.get(type);
              if (!expectedTypedArrayConstructor) {
                throw new TypeError(`unsupported type "${type}" to create tensor from pinned buffer`);
              }
              if (!(arg0.data instanceof expectedTypedArrayConstructor)) {
                throw new TypeError(`buffer should be of type ${expectedTypedArrayConstructor.name}`);
              }
              this.cpuData = arg0.data;
              break;
            }
            case "texture": {
              if (type !== "float32") {
                throw new TypeError(`unsupported type "${type}" to create tensor from texture`);
              }
              this.gpuTextureData = arg0.texture;
              this.downloader = arg0.download;
              this.disposer = arg0.dispose;
              break;
            }
            case "gpu-buffer": {
              if (type !== "float32" && type !== "float16" && type !== "int32" && type !== "int64" && type !== "uint32" && type !== "bool") {
                throw new TypeError(`unsupported type "${type}" to create tensor from gpu buffer`);
              }
              this.gpuBufferData = arg0.gpuBuffer;
              this.downloader = arg0.download;
              this.disposer = arg0.dispose;
              break;
            }
            default:
              throw new Error(`Tensor constructor: unsupported location '${this.dataLocation}'`);
          }
        } else {
          let data;
          let maybeDims;
          if (typeof arg0 === "string") {
            type = arg0;
            maybeDims = arg2;
            if (arg0 === "string") {
              if (!Array.isArray(arg1)) {
                throw new TypeError("A string tensor's data must be a string array.");
              }
              data = arg1;
            } else {
              const typedArrayConstructor = NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.get(arg0);
              if (typedArrayConstructor === void 0) {
                throw new TypeError(`Unsupported tensor type: ${arg0}.`);
              }
              if (Array.isArray(arg1)) {
                if (arg0 === "float16") {
                  throw new TypeError("Creating a float16 tensor from number array is not supported. Please use Uint16Array as data.");
                } else if (arg0 === "uint64" || arg0 === "int64") {
                  data = typedArrayConstructor.from(arg1, BigInt);
                } else {
                  data = typedArrayConstructor.from(arg1);
                }
              } else if (arg1 instanceof typedArrayConstructor) {
                data = arg1;
              } else {
                throw new TypeError(`A ${type} tensor's data must be type of ${typedArrayConstructor}`);
              }
            }
          } else {
            maybeDims = arg1;
            if (Array.isArray(arg0)) {
              if (arg0.length === 0) {
                throw new TypeError("Tensor type cannot be inferred from an empty array.");
              }
              const firstElementType = typeof arg0[0];
              if (firstElementType === "string") {
                type = "string";
                data = arg0;
              } else if (firstElementType === "boolean") {
                type = "bool";
                data = Uint8Array.from(arg0);
              } else {
                throw new TypeError(`Invalid element type of data array: ${firstElementType}.`);
              }
            } else {
              const mappedType = NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.get(arg0.constructor);
              if (mappedType === void 0) {
                throw new TypeError(`Unsupported type for tensor data: ${arg0.constructor}.`);
              }
              type = mappedType;
              data = arg0;
            }
          }
          if (maybeDims === void 0) {
            maybeDims = [data.length];
          } else if (!Array.isArray(maybeDims)) {
            throw new TypeError("A tensor's dims must be a number array");
          }
          dims = maybeDims;
          this.cpuData = data;
          this.dataLocation = "cpu";
        }
        const size = calculateSize(dims);
        if (this.cpuData && size !== this.cpuData.length) {
          throw new Error(`Tensor's size(${size}) does not match data length(${this.cpuData.length}).`);
        }
        this.type = type;
        this.dims = dims;
        this.size = size;
      }
      // #endregion
      // #region factory
      static async fromImage(image, options) {
        return tensorFromImage(image, options);
      }
      static fromTexture(texture, options) {
        return tensorFromTexture(texture, options);
      }
      static fromGpuBuffer(gpuBuffer, options) {
        return tensorFromGpuBuffer(gpuBuffer, options);
      }
      static fromPinnedBuffer(type, buffer, dims) {
        return tensorFromPinnedBuffer(type, buffer, dims);
      }
      // #endregion
      // #region conversions
      toDataURL(options) {
        return tensorToDataURL(this, options);
      }
      toImageData(options) {
        return tensorToImageData(this, options);
      }
      // #endregion
      // #region properties
      get data() {
        this.ensureValid();
        if (!this.cpuData) {
          throw new Error("The data is not on CPU. Use `getData()` to download GPU data to CPU, or use `texture` or `gpuBuffer` property to access the GPU data directly.");
        }
        return this.cpuData;
      }
      get location() {
        return this.dataLocation;
      }
      get texture() {
        this.ensureValid();
        if (!this.gpuTextureData) {
          throw new Error("The data is not stored as a WebGL texture.");
        }
        return this.gpuTextureData;
      }
      get gpuBuffer() {
        this.ensureValid();
        if (!this.gpuBufferData) {
          throw new Error("The data is not stored as a WebGPU buffer.");
        }
        return this.gpuBufferData;
      }
      // #endregion
      // #region methods
      async getData(releaseData) {
        this.ensureValid();
        switch (this.dataLocation) {
          case "cpu":
          case "cpu-pinned":
            return this.data;
          case "texture":
          case "gpu-buffer": {
            if (!this.downloader) {
              throw new Error("The current tensor is not created with a specified data downloader.");
            }
            if (this.isDownloading) {
              throw new Error("The current tensor is being downloaded.");
            }
            try {
              this.isDownloading = true;
              const data = await this.downloader();
              this.downloader = void 0;
              this.dataLocation = "cpu";
              this.cpuData = data;
              if (releaseData && this.disposer) {
                this.disposer();
                this.disposer = void 0;
              }
              return data;
            } finally {
              this.isDownloading = false;
            }
          }
          default:
            throw new Error(`cannot get data from location: ${this.dataLocation}`);
        }
      }
      dispose() {
        if (this.isDownloading) {
          throw new Error("The current tensor is being downloaded.");
        }
        if (this.disposer) {
          this.disposer();
          this.disposer = void 0;
        }
        this.cpuData = void 0;
        this.gpuTextureData = void 0;
        this.gpuBufferData = void 0;
        this.downloader = void 0;
        this.isDownloading = void 0;
        this.dataLocation = "none";
      }
      // #endregion
      // #region tensor utilities
      ensureValid() {
        if (this.dataLocation === "none") {
          throw new Error("The tensor is disposed.");
        }
      }
      reshape(dims) {
        this.ensureValid();
        if (this.downloader || this.disposer) {
          throw new Error("Cannot reshape a tensor that owns GPU resource.");
        }
        return tensorReshape(this, dims);
      }
    };
  }
});

// common/dist/esm/tensor.js
var Tensor2;
var init_tensor = __esm({
  "common/dist/esm/tensor.js"() {
    "use strict";
    init_tensor_impl();
    Tensor2 = Tensor;
  }
});

// common/dist/esm/inference-session-impl.js
var InferenceSession;
var init_inference_session_impl = __esm({
  "common/dist/esm/inference-session-impl.js"() {
    "use strict";
    init_backend_impl();
    init_tensor();
    InferenceSession = class _InferenceSession {
      constructor(handler) {
        this.handler = handler;
      }
      async run(feeds, arg1, arg2) {
        const fetches = {};
        let options = {};
        if (typeof feeds !== "object" || feeds === null || feeds instanceof Tensor2 || Array.isArray(feeds)) {
          throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");
        }
        let isFetchesEmpty = true;
        if (typeof arg1 === "object") {
          if (arg1 === null) {
            throw new TypeError("Unexpected argument[1]: cannot be null.");
          }
          if (arg1 instanceof Tensor2) {
            throw new TypeError("'fetches' cannot be a Tensor");
          }
          if (Array.isArray(arg1)) {
            if (arg1.length === 0) {
              throw new TypeError("'fetches' cannot be an empty array.");
            }
            isFetchesEmpty = false;
            for (const name of arg1) {
              if (typeof name !== "string") {
                throw new TypeError("'fetches' must be a string array or an object.");
              }
              if (this.outputNames.indexOf(name) === -1) {
                throw new RangeError(`'fetches' contains invalid output name: ${name}.`);
              }
              fetches[name] = null;
            }
            if (typeof arg2 === "object" && arg2 !== null) {
              options = arg2;
            } else if (typeof arg2 !== "undefined") {
              throw new TypeError("'options' must be an object.");
            }
          } else {
            let isFetches = false;
            const arg1Keys = Object.getOwnPropertyNames(arg1);
            for (const name of this.outputNames) {
              if (arg1Keys.indexOf(name) !== -1) {
                const v = arg1[name];
                if (v === null || v instanceof Tensor2) {
                  isFetches = true;
                  isFetchesEmpty = false;
                  fetches[name] = v;
                }
              }
            }
            if (isFetches) {
              if (typeof arg2 === "object" && arg2 !== null) {
                options = arg2;
              } else if (typeof arg2 !== "undefined") {
                throw new TypeError("'options' must be an object.");
              }
            } else {
              options = arg1;
            }
          }
        } else if (typeof arg1 !== "undefined") {
          throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");
        }
        for (const name of this.inputNames) {
          if (typeof feeds[name] === "undefined") {
            throw new Error(`input '${name}' is missing in 'feeds'.`);
          }
        }
        if (isFetchesEmpty) {
          for (const name of this.outputNames) {
            fetches[name] = null;
          }
        }
        const results = await this.handler.run(feeds, fetches, options);
        const returnValue = {};
        for (const key in results) {
          if (Object.hasOwnProperty.call(results, key)) {
            const result = results[key];
            if (result instanceof Tensor2) {
              returnValue[key] = result;
            } else {
              returnValue[key] = new Tensor2(result.type, result.data, result.dims);
            }
          }
        }
        return returnValue;
      }
      async release() {
        return this.handler.dispose();
      }
      static async create(arg0, arg1, arg2, arg3) {
        let filePathOrUint8Array;
        let options = {};
        if (typeof arg0 === "string") {
          filePathOrUint8Array = arg0;
          if (typeof arg1 === "object" && arg1 !== null) {
            options = arg1;
          } else if (typeof arg1 !== "undefined") {
            throw new TypeError("'options' must be an object.");
          }
        } else if (arg0 instanceof Uint8Array) {
          filePathOrUint8Array = arg0;
          if (typeof arg1 === "object" && arg1 !== null) {
            options = arg1;
          } else if (typeof arg1 !== "undefined") {
            throw new TypeError("'options' must be an object.");
          }
        } else if (arg0 instanceof ArrayBuffer || typeof SharedArrayBuffer !== "undefined" && arg0 instanceof SharedArrayBuffer) {
          const buffer = arg0;
          let byteOffset = 0;
          let byteLength = arg0.byteLength;
          if (typeof arg1 === "object" && arg1 !== null) {
            options = arg1;
          } else if (typeof arg1 === "number") {
            byteOffset = arg1;
            if (!Number.isSafeInteger(byteOffset)) {
              throw new RangeError("'byteOffset' must be an integer.");
            }
            if (byteOffset < 0 || byteOffset >= buffer.byteLength) {
              throw new RangeError(`'byteOffset' is out of range [0, ${buffer.byteLength}).`);
            }
            byteLength = arg0.byteLength - byteOffset;
            if (typeof arg2 === "number") {
              byteLength = arg2;
              if (!Number.isSafeInteger(byteLength)) {
                throw new RangeError("'byteLength' must be an integer.");
              }
              if (byteLength <= 0 || byteOffset + byteLength > buffer.byteLength) {
                throw new RangeError(`'byteLength' is out of range (0, ${buffer.byteLength - byteOffset}].`);
              }
              if (typeof arg3 === "object" && arg3 !== null) {
                options = arg3;
              } else if (typeof arg3 !== "undefined") {
                throw new TypeError("'options' must be an object.");
              }
            } else if (typeof arg2 !== "undefined") {
              throw new TypeError("'byteLength' must be a number.");
            }
          } else if (typeof arg1 !== "undefined") {
            throw new TypeError("'options' must be an object.");
          }
          filePathOrUint8Array = new Uint8Array(buffer, byteOffset, byteLength);
        } else {
          throw new TypeError("Unexpected argument[0]: must be 'path' or 'buffer'.");
        }
        const eps = options.executionProviders || [];
        const backendHints = eps.map((i) => typeof i === "string" ? i : i.name);
        const backend = await resolveBackend(backendHints);
        const handler = await backend.createInferenceSessionHandler(filePathOrUint8Array, options);
        return new _InferenceSession(handler);
      }
      startProfiling() {
        this.handler.startProfiling();
      }
      endProfiling() {
        this.handler.endProfiling();
      }
      get inputNames() {
        return this.handler.inputNames;
      }
      get outputNames() {
        return this.handler.outputNames;
      }
    };
  }
});

// common/dist/esm/inference-session.js
var InferenceSession2;
var init_inference_session = __esm({
  "common/dist/esm/inference-session.js"() {
    "use strict";
    init_inference_session_impl();
    InferenceSession2 = InferenceSession;
  }
});

// common/dist/esm/onnx-value.js
var init_onnx_value = __esm({
  "common/dist/esm/onnx-value.js"() {
    "use strict";
  }
});

// common/dist/esm/training-session-impl.js
var TrainingSession;
var init_training_session_impl = __esm({
  "common/dist/esm/training-session-impl.js"() {
    "use strict";
    TrainingSession = class {
      constructor(handler) {
        this.handler = handler;
      }
      get inputNames() {
        return this.handler.inputNames;
      }
      get outputNames() {
        return this.handler.outputNames;
      }
      static async create(_trainingOptions, _sessionOptions) {
        throw new Error("Method not implemented");
      }
      async loadParametersBuffer(_array, _trainableOnly) {
        throw new Error("Method not implemented.");
      }
      async getContiguousParameters(_trainableOnly) {
        throw new Error("Method not implemented.");
      }
      async runTrainStep(_feeds, _fetches, _options) {
        throw new Error("Method not implemented.");
      }
      async release() {
        return this.handler.dispose();
      }
    };
  }
});

// common/dist/esm/training-session.js
var TrainingSession2;
var init_training_session = __esm({
  "common/dist/esm/training-session.js"() {
    "use strict";
    init_training_session_impl();
    TrainingSession2 = TrainingSession;
  }
});

// common/dist/esm/index.js
var init_esm = __esm({
  "common/dist/esm/index.js"() {
    "use strict";
    init_backend();
    init_env();
    init_inference_session();
    init_tensor();
    init_onnx_value();
    init_training_session();
  }
});

// nodejs-ignore:node:os
var cpus;
var init_node_os = __esm({
  "nodejs-ignore:node:os"() {
    cpus = void 0;
  }
});

// nodejs-ignore:node:path
var join;
var init_node_path = __esm({
  "nodejs-ignore:node:path"() {
    join = void 0;
  }
});

// nodejs-ignore:fs
var fs_exports = {};
__export(fs_exports, {
  readFile: () => readFile
});
var readFile;
var init_fs = __esm({
  "nodejs-ignore:fs"() {
    readFile = void 0;
  }
});

// nodejs-ignore:path
var path_exports = {};
__export(path_exports, {
  join: () => join2
});
var join2;
var init_path = __esm({
  "nodejs-ignore:path"() {
    join2 = void 0;
  }
});

// web/lib/wasm/binding/ort-training-wasm-simd.js
var require_ort_training_wasm_simd = __commonJS({
  "web/lib/wasm/binding/ort-training-wasm-simd.js"(exports, module) {
    "use strict";
    var ortWasm = (() => {
      var _scriptDir = typeof document !== "undefined" && document.currentScript ? document.currentScript.src : void 0;
      if (typeof __filename !== "undefined")
        _scriptDir = _scriptDir || __filename;
      return function(moduleArg = {}) {
        var d = moduleArg, k, l;
        d.ready = new Promise((a, b) => {
          k = a;
          l = b;
        });
        var r = Object.assign({}, d), v = "./this.program", aa = "object" == typeof window, x = "function" == typeof importScripts, ba = "object" == typeof process && "object" == typeof process.versions && "string" == typeof process.versions.node, y = "", A, B, C;
        if (ba) {
          var fs = (init_fs(), __toCommonJS(fs_exports)), D = (init_path(), __toCommonJS(path_exports));
          y = x ? D.dirname(y) + "/" : __dirname + "/";
          A = (a, b) => {
            a = a.startsWith("file://") ? new URL(a) : D.normalize(a);
            return fs.readFileSync(a, b ? void 0 : "utf8");
          };
          C = (a) => {
            a = A(a, true);
            a.buffer || (a = new Uint8Array(a));
            return a;
          };
          B = (a, b, c, f = true) => {
            a = a.startsWith("file://") ? new URL(a) : D.normalize(a);
            fs.readFile(a, f ? void 0 : "utf8", (g, h) => {
              g ? c(g) : b(f ? h.buffer : h);
            });
          };
          !d.thisProgram && 1 < process.argv.length && (v = process.argv[1].replace(/\\/g, "/"));
          process.argv.slice(2);
          d.inspect = () => "[Emscripten Module object]";
        } else if (aa || x)
          x ? y = self.location.href : "undefined" != typeof document && document.currentScript && (y = document.currentScript.src), _scriptDir && (y = _scriptDir), 0 !== y.indexOf("blob:") ? y = y.substr(0, y.replace(/[?#].*/, "").lastIndexOf("/") + 1) : y = "", A = (a) => {
            var b = new XMLHttpRequest();
            b.open("GET", a, false);
            b.send(null);
            return b.responseText;
          }, x && (C = (a) => {
            var b = new XMLHttpRequest();
            b.open("GET", a, false);
            b.responseType = "arraybuffer";
            b.send(null);
            return new Uint8Array(b.response);
          }), B = (a, b, c) => {
            var f = new XMLHttpRequest();
            f.open("GET", a, true);
            f.responseType = "arraybuffer";
            f.onload = () => {
              200 == f.status || 0 == f.status && f.response ? b(f.response) : c();
            };
            f.onerror = c;
            f.send(null);
          };
        var ca = d.print || console.log.bind(console), E = d.printErr || console.error.bind(console);
        Object.assign(d, r);
        r = null;
        d.thisProgram && (v = d.thisProgram);
        var F;
        d.wasmBinary && (F = d.wasmBinary);
        var noExitRuntime = d.noExitRuntime || true;
        "object" != typeof WebAssembly && G("no native wasm support detected");
        var H, I, da = false, J, K, L, M;
        function ea() {
          var a = H.buffer;
          d.HEAP8 = J = new Int8Array(a);
          d.HEAP16 = new Int16Array(a);
          d.HEAP32 = L = new Int32Array(a);
          d.HEAPU8 = K = new Uint8Array(a);
          d.HEAPU16 = new Uint16Array(a);
          d.HEAPU32 = M = new Uint32Array(a);
          d.HEAPF32 = new Float32Array(a);
          d.HEAPF64 = new Float64Array(a);
        }
        var fa = [], ha = [], ia = [];
        function ja() {
          var a = d.preRun.shift();
          fa.unshift(a);
        }
        var N = 0, O = null, P = null;
        function G(a) {
          if (d.onAbort)
            d.onAbort(a);
          a = "Aborted(" + a + ")";
          E(a);
          da = true;
          a = new WebAssembly.RuntimeError(a + ". Build with -sASSERTIONS for more info.");
          l(a);
          throw a;
        }
        function ka(a) {
          return a.startsWith("data:application/octet-stream;base64,");
        }
        var Q;
        Q = "ort-training-wasm-simd.wasm";
        if (!ka(Q)) {
          var la = Q;
          Q = d.locateFile ? d.locateFile(la, y) : y + la;
        }
        function ma(a) {
          if (a == Q && F)
            return new Uint8Array(F);
          if (C)
            return C(a);
          throw "both async and sync fetching of the wasm failed";
        }
        function na(a) {
          if (!F && (aa || x)) {
            if ("function" == typeof fetch && !a.startsWith("file://"))
              return fetch(a, { credentials: "same-origin" }).then((b) => {
                if (!b.ok)
                  throw "failed to load wasm binary file at '" + a + "'";
                return b.arrayBuffer();
              }).catch(() => ma(a));
            if (B)
              return new Promise((b, c) => {
                B(a, (f) => b(new Uint8Array(f)), c);
              });
          }
          return Promise.resolve().then(() => ma(a));
        }
        function oa(a, b, c) {
          return na(a).then((f) => WebAssembly.instantiate(f, b)).then((f) => f).then(c, (f) => {
            E("failed to asynchronously prepare wasm: " + f);
            G(f);
          });
        }
        function pa(a, b) {
          var c = Q;
          return F || "function" != typeof WebAssembly.instantiateStreaming || ka(c) || c.startsWith("file://") || ba || "function" != typeof fetch ? oa(c, a, b) : fetch(c, { credentials: "same-origin" }).then((f) => WebAssembly.instantiateStreaming(f, a).then(b, function(g) {
            E("wasm streaming compile failed: " + g);
            E("falling back to ArrayBuffer instantiation");
            return oa(c, a, b);
          }));
        }
        var R, S = (a) => {
          for (; 0 < a.length; )
            a.shift()(d);
        };
        function qa(a) {
          this.Ha = a - 24;
          this.La = function(b) {
            M[this.Ha + 4 >> 2 >>> 0] = b;
          };
          this.Ka = function(b) {
            M[this.Ha + 8 >> 2 >>> 0] = b;
          };
          this.Ia = function(b, c) {
            this.Ja();
            this.La(b);
            this.Ka(c);
          };
          this.Ja = function() {
            M[this.Ha + 16 >> 2 >>> 0] = 0;
          };
        }
        var ra = 0, sa = 0, ta = "undefined" != typeof TextDecoder ? new TextDecoder("utf8") : void 0, ua = (a, b, c) => {
          b >>>= 0;
          var f = b + c;
          for (c = b; a[c] && !(c >= f); )
            ++c;
          if (16 < c - b && a.buffer && ta)
            return ta.decode(a.subarray(b, c));
          for (f = ""; b < c; ) {
            var g = a[b++];
            if (g & 128) {
              var h = a[b++] & 63;
              if (192 == (g & 224))
                f += String.fromCharCode((g & 31) << 6 | h);
              else {
                var m = a[b++] & 63;
                g = 224 == (g & 240) ? (g & 15) << 12 | h << 6 | m : (g & 7) << 18 | h << 12 | m << 6 | a[b++] & 63;
                65536 > g ? f += String.fromCharCode(g) : (g -= 65536, f += String.fromCharCode(55296 | g >> 10, 56320 | g & 1023));
              }
            } else
              f += String.fromCharCode(g);
          }
          return f;
        }, T = (a, b) => (a >>>= 0) ? ua(K, a, b) : "", U = (a) => {
          for (var b = 0, c = 0; c < a.length; ++c) {
            var f = a.charCodeAt(c);
            127 >= f ? b++ : 2047 >= f ? b += 2 : 55296 <= f && 57343 >= f ? (b += 4, ++c) : b += 3;
          }
          return b;
        }, V = (a, b, c, f) => {
          c >>>= 0;
          if (!(0 < f))
            return 0;
          var g = c;
          f = c + f - 1;
          for (var h = 0; h < a.length; ++h) {
            var m = a.charCodeAt(h);
            if (55296 <= m && 57343 >= m) {
              var q = a.charCodeAt(++h);
              m = 65536 + ((m & 1023) << 10) | q & 1023;
            }
            if (127 >= m) {
              if (c >= f)
                break;
              b[c++ >>> 0] = m;
            } else {
              if (2047 >= m) {
                if (c + 1 >= f)
                  break;
                b[c++ >>> 0] = 192 | m >> 6;
              } else {
                if (65535 >= m) {
                  if (c + 2 >= f)
                    break;
                  b[c++ >>> 0] = 224 | m >> 12;
                } else {
                  if (c + 3 >= f)
                    break;
                  b[c++ >>> 0] = 240 | m >> 18;
                  b[c++ >>> 0] = 128 | m >> 12 & 63;
                }
                b[c++ >>> 0] = 128 | m >> 6 & 63;
              }
              b[c++ >>> 0] = 128 | m & 63;
            }
          }
          b[c >>> 0] = 0;
          return c - g;
        }, W = (a) => 0 === a % 4 && (0 !== a % 100 || 0 === a % 400), va = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335], wa = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334], Ba = (a) => {
          var b = U(a) + 1, c = Aa(b);
          c && V(a, K, c, b);
          return c;
        }, X = {}, Ca = () => {
          if (!Y) {
            var a = { USER: "web_user", LOGNAME: "web_user", PATH: "/", PWD: "/", HOME: "/home/web_user", LANG: ("object" == typeof navigator && navigator.languages && navigator.languages[0] || "C").replace(
              "-",
              "_"
            ) + ".UTF-8", _: v || "./this.program" }, b;
            for (b in X)
              void 0 === X[b] ? delete a[b] : a[b] = X[b];
            var c = [];
            for (b in a)
              c.push(`${b}=${a[b]}`);
            Y = c;
          }
          return Y;
        }, Y, Da = [null, [], []], Ea = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], Fa = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
        function Ga(a) {
          var b = Array(U(a) + 1);
          V(a, b, 0, b.length);
          return b;
        }
        function Ha(a, b, c, f) {
          function g(e, n, p) {
            for (e = "number" == typeof e ? e.toString() : e || ""; e.length < n; )
              e = p[0] + e;
            return e;
          }
          function h(e, n) {
            return g(e, n, "0");
          }
          function m(e, n) {
            function p(xa) {
              return 0 > xa ? -1 : 0 < xa ? 1 : 0;
            }
            var z;
            0 === (z = p(e.getFullYear() - n.getFullYear())) && 0 === (z = p(e.getMonth() - n.getMonth())) && (z = p(e.getDate() - n.getDate()));
            return z;
          }
          function q(e) {
            switch (e.getDay()) {
              case 0:
                return new Date(e.getFullYear() - 1, 11, 29);
              case 1:
                return e;
              case 2:
                return new Date(e.getFullYear(), 0, 3);
              case 3:
                return new Date(
                  e.getFullYear(),
                  0,
                  2
                );
              case 4:
                return new Date(e.getFullYear(), 0, 1);
              case 5:
                return new Date(e.getFullYear() - 1, 11, 31);
              case 6:
                return new Date(e.getFullYear() - 1, 11, 30);
            }
          }
          function w(e) {
            var n = e.Ca;
            for (e = new Date(new Date(e.Da + 1900, 0, 1).getTime()); 0 < n; ) {
              var p = e.getMonth(), z = (W(e.getFullYear()) ? Ea : Fa)[p];
              if (n > z - e.getDate())
                n -= z - e.getDate() + 1, e.setDate(1), 11 > p ? e.setMonth(p + 1) : (e.setMonth(0), e.setFullYear(e.getFullYear() + 1));
              else {
                e.setDate(e.getDate() + n);
                break;
              }
            }
            p = new Date(e.getFullYear() + 1, 0, 4);
            n = q(new Date(
              e.getFullYear(),
              0,
              4
            ));
            p = q(p);
            return 0 >= m(n, e) ? 0 >= m(p, e) ? e.getFullYear() + 1 : e.getFullYear() : e.getFullYear() - 1;
          }
          a >>>= 0;
          b >>>= 0;
          c >>>= 0;
          f >>>= 0;
          var t = L[f + 40 >> 2 >>> 0];
          f = { Oa: L[f >> 2 >>> 0], Na: L[f + 4 >> 2 >>> 0], Ea: L[f + 8 >> 2 >>> 0], Ga: L[f + 12 >> 2 >>> 0], Fa: L[f + 16 >> 2 >>> 0], Da: L[f + 20 >> 2 >>> 0], xa: L[f + 24 >> 2 >>> 0], Ca: L[f + 28 >> 2 >>> 0], Qa: L[f + 32 >> 2 >>> 0], Ma: L[f + 36 >> 2 >>> 0], Pa: t ? T(t) : "" };
          c = T(c);
          t = {
            "%c": "%a %b %d %H:%M:%S %Y",
            "%D": "%m/%d/%y",
            "%F": "%Y-%m-%d",
            "%h": "%b",
            "%r": "%I:%M:%S %p",
            "%R": "%H:%M",
            "%T": "%H:%M:%S",
            "%x": "%m/%d/%y",
            "%X": "%H:%M:%S",
            "%Ec": "%c",
            "%EC": "%C",
            "%Ex": "%m/%d/%y",
            "%EX": "%H:%M:%S",
            "%Ey": "%y",
            "%EY": "%Y",
            "%Od": "%d",
            "%Oe": "%e",
            "%OH": "%H",
            "%OI": "%I",
            "%Om": "%m",
            "%OM": "%M",
            "%OS": "%S",
            "%Ou": "%u",
            "%OU": "%U",
            "%OV": "%V",
            "%Ow": "%w",
            "%OW": "%W",
            "%Oy": "%y"
          };
          for (var u in t)
            c = c.replace(new RegExp(u, "g"), t[u]);
          var ya = "Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "), za = "January February March April May June July August September October November December".split(" ");
          t = { "%a": (e) => ya[e.xa].substring(0, 3), "%A": (e) => ya[e.xa], "%b": (e) => za[e.Fa].substring(0, 3), "%B": (e) => za[e.Fa], "%C": (e) => h((e.Da + 1900) / 100 | 0, 2), "%d": (e) => h(e.Ga, 2), "%e": (e) => g(e.Ga, 2, " "), "%g": (e) => w(e).toString().substring(2), "%G": (e) => w(e), "%H": (e) => h(e.Ea, 2), "%I": (e) => {
            e = e.Ea;
            0 == e ? e = 12 : 12 < e && (e -= 12);
            return h(e, 2);
          }, "%j": (e) => {
            for (var n = 0, p = 0; p <= e.Fa - 1; n += (W(e.Da + 1900) ? Ea : Fa)[p++])
              ;
            return h(e.Ga + n, 3);
          }, "%m": (e) => h(e.Fa + 1, 2), "%M": (e) => h(e.Na, 2), "%n": () => "\n", "%p": (e) => 0 <= e.Ea && 12 > e.Ea ? "AM" : "PM", "%S": (e) => h(e.Oa, 2), "%t": () => "	", "%u": (e) => e.xa || 7, "%U": (e) => h(Math.floor((e.Ca + 7 - e.xa) / 7), 2), "%V": (e) => {
            var n = Math.floor((e.Ca + 7 - (e.xa + 6) % 7) / 7);
            2 >= (e.xa + 371 - e.Ca - 2) % 7 && n++;
            if (n)
              53 == n && (p = (e.xa + 371 - e.Ca) % 7, 4 == p || 3 == p && W(e.Da) || (n = 1));
            else {
              n = 52;
              var p = (e.xa + 7 - e.Ca - 1) % 7;
              (4 == p || 5 == p && W(e.Da % 400 - 1)) && n++;
            }
            return h(n, 2);
          }, "%w": (e) => e.xa, "%W": (e) => h(Math.floor((e.Ca + 7 - (e.xa + 6) % 7) / 7), 2), "%y": (e) => (e.Da + 1900).toString().substring(2), "%Y": (e) => e.Da + 1900, "%z": (e) => {
            e = e.Ma;
            var n = 0 <= e;
            e = Math.abs(e) / 60;
            return (n ? "+" : "-") + String("0000" + (e / 60 * 100 + e % 60)).slice(-4);
          }, "%Z": (e) => e.Pa, "%%": () => "%" };
          c = c.replace(/%%/g, "\0\0");
          for (u in t)
            c.includes(u) && (c = c.replace(new RegExp(u, "g"), t[u](f)));
          c = c.replace(/\0\0/g, "%");
          u = Ga(c);
          if (u.length > b)
            return 0;
          J.set(u, a >>> 0);
          return u.length - 1;
        }
        var Ja = {
          a: function(a, b, c) {
            a >>>= 0;
            new qa(a).Ia(b >>> 0, c >>> 0);
            ra = a;
            sa++;
            throw ra;
          },
          e: function() {
            return 0;
          },
          H: function() {
          },
          x: function() {
          },
          z: function() {
          },
          k: function() {
            return 0;
          },
          F: function() {
          },
          B: function() {
          },
          E: function() {
          },
          g: function() {
          },
          y: function() {
          },
          v: function() {
          },
          G: function() {
          },
          w: function() {
          },
          l: () => true,
          o: function(a, b, c) {
            a = b + 2097152 >>> 0 < 4194305 - !!a ? (a >>> 0) + 4294967296 * b : NaN;
            c >>>= 0;
            a = new Date(1e3 * a);
            L[c >> 2 >>> 0] = a.getUTCSeconds();
            L[c + 4 >> 2 >>> 0] = a.getUTCMinutes();
            L[c + 8 >> 2 >>> 0] = a.getUTCHours();
            L[c + 12 >> 2 >>> 0] = a.getUTCDate();
            L[c + 16 >> 2 >>> 0] = a.getUTCMonth();
            L[c + 20 >> 2 >>> 0] = a.getUTCFullYear() - 1900;
            L[c + 24 >> 2 >>> 0] = a.getUTCDay();
            L[c + 28 >> 2 >>> 0] = (a.getTime() - Date.UTC(a.getUTCFullYear(), 0, 1, 0, 0, 0, 0)) / 864e5 | 0;
          },
          p: function(a, b, c) {
            a = b + 2097152 >>> 0 < 4194305 - !!a ? (a >>> 0) + 4294967296 * b : NaN;
            c >>>= 0;
            a = new Date(1e3 * a);
            L[c >> 2 >>> 0] = a.getSeconds();
            L[c + 4 >> 2 >>> 0] = a.getMinutes();
            L[c + 8 >> 2 >>> 0] = a.getHours();
            L[c + 12 >> 2 >>> 0] = a.getDate();
            L[c + 16 >> 2 >>> 0] = a.getMonth();
            L[c + 20 >> 2 >>> 0] = a.getFullYear() - 1900;
            L[c + 24 >> 2 >>> 0] = a.getDay();
            L[c + 28 >> 2 >>> 0] = (W(a.getFullYear()) ? va : wa)[a.getMonth()] + a.getDate() - 1 | 0;
            L[c + 36 >> 2 >>> 0] = -(60 * a.getTimezoneOffset());
            b = new Date(a.getFullYear(), 6, 1).getTimezoneOffset();
            var f = new Date(a.getFullYear(), 0, 1).getTimezoneOffset();
            L[c + 32 >> 2 >>> 0] = (b != f && a.getTimezoneOffset() == Math.min(f, b)) | 0;
          },
          q: function(a) {
            a >>>= 0;
            var b = new Date(L[a + 20 >> 2 >>> 0] + 1900, L[a + 16 >> 2 >>> 0], L[a + 12 >> 2 >>> 0], L[a + 8 >> 2 >>> 0], L[a + 4 >> 2 >>> 0], L[a >> 2 >>> 0], 0), c = L[a + 32 >> 2 >>> 0], f = b.getTimezoneOffset(), g = new Date(b.getFullYear(), 6, 1).getTimezoneOffset(), h = new Date(b.getFullYear(), 0, 1).getTimezoneOffset(), m = Math.min(h, g);
            0 > c ? L[a + 32 >> 2 >>> 0] = Number(g != h && m == f) : 0 < c != (m == f) && (g = Math.max(h, g), b.setTime(b.getTime() + 6e4 * ((0 < c ? m : g) - f)));
            L[a + 24 >> 2 >>> 0] = b.getDay();
            L[a + 28 >> 2 >>> 0] = (W(b.getFullYear()) ? va : wa)[b.getMonth()] + b.getDate() - 1 | 0;
            L[a >> 2 >>> 0] = b.getSeconds();
            L[a + 4 >> 2 >>> 0] = b.getMinutes();
            L[a + 8 >> 2 >>> 0] = b.getHours();
            L[a + 12 >> 2 >>> 0] = b.getDate();
            L[a + 16 >> 2 >>> 0] = b.getMonth();
            L[a + 20 >> 2 >>> 0] = b.getYear();
            a = b.getTime() / 1e3;
            return Ia((R = a, 1 <= +Math.abs(R) ? 0 < R ? +Math.floor(R / 4294967296) >>> 0 : ~~+Math.ceil((R - +(~~R >>> 0)) / 4294967296) >>> 0 : 0)), a >>> 0;
          },
          m: function() {
            return -52;
          },
          n: function() {
          },
          t: function(a, b, c) {
            function f(w) {
              return (w = w.toTimeString().match(/\(([A-Za-z ]+)\)$/)) ? w[1] : "GMT";
            }
            c >>>= 0;
            var g = (/* @__PURE__ */ new Date()).getFullYear(), h = new Date(g, 0, 1), m = new Date(g, 6, 1);
            g = h.getTimezoneOffset();
            var q = m.getTimezoneOffset();
            M[a >>> 0 >> 2 >>> 0] = 60 * Math.max(g, q);
            L[b >>> 0 >> 2 >>> 0] = Number(g != q);
            a = f(h);
            b = f(m);
            a = Ba(a);
            b = Ba(b);
            q < g ? (M[c >> 2 >>> 0] = a, M[c + 4 >> 2 >>> 0] = b) : (M[c >> 2 >>> 0] = b, M[c + 4 >> 2 >>> 0] = a);
          },
          d: () => {
            G("");
          },
          h: function() {
            return Date.now();
          },
          u: function() {
            return 4294901760;
          },
          b: () => performance.now(),
          I: function(a, b, c) {
            b >>>= 0;
            return K.copyWithin(a >>> 0 >>> 0, b >>> 0, b + (c >>> 0) >>> 0);
          },
          s: function(a) {
            a >>>= 0;
            var b = K.length;
            if (4294901760 < a)
              return false;
            for (var c = 1; 4 >= c; c *= 2) {
              var f = b * (1 + 0.2 / c);
              f = Math.min(f, a + 100663296);
              var g = Math;
              f = Math.max(a, f);
              a: {
                g = g.min.call(g, 4294901760, f + (65536 - f % 65536) % 65536) - H.buffer.byteLength + 65535 >>> 16;
                try {
                  H.grow(g);
                  ea();
                  var h = 1;
                  break a;
                } catch (m) {
                }
                h = void 0;
              }
              if (h)
                return true;
            }
            return false;
          },
          C: function(a, b) {
            a >>>= 0;
            b >>>= 0;
            var c = 0;
            Ca().forEach(function(f, g) {
              var h = b + c;
              g = M[a + 4 * g >> 2 >>> 0] = h;
              for (h = 0; h < f.length; ++h)
                J[g++ >> 0 >>> 0] = f.charCodeAt(h);
              J[g >> 0 >>> 0] = 0;
              c += f.length + 1;
            });
            return 0;
          },
          D: function(a, b) {
            a >>>= 0;
            b >>>= 0;
            var c = Ca();
            M[a >> 2 >>> 0] = c.length;
            var f = 0;
            c.forEach(function(g) {
              f += g.length + 1;
            });
            M[b >> 2 >>> 0] = f;
            return 0;
          },
          f: () => 52,
          j: function() {
            return 52;
          },
          r: function() {
            return 70;
          },
          i: function(a, b, c, f) {
            b >>>= 0;
            c >>>= 0;
            f >>>= 0;
            for (var g = 0, h = 0; h < c; h++) {
              var m = M[b >> 2 >>> 0], q = M[b + 4 >> 2 >>> 0];
              b += 8;
              for (var w = 0; w < q; w++) {
                var t = K[m + w >>> 0], u = Da[a];
                0 === t || 10 === t ? ((1 === a ? ca : E)(ua(u, 0)), u.length = 0) : u.push(t);
              }
              g += q;
            }
            M[f >> 2 >>> 0] = g;
            return 0;
          },
          A: Ha,
          c: function(a, b, c, f) {
            return Ha(a >>> 0, b >>> 0, c >>> 0, f >>> 0);
          }
        };
        (function() {
          function a(c) {
            c = c.exports;
            I = c = Ka(c);
            H = I.J;
            ea();
            ha.unshift(I.K);
            N--;
            d.monitorRunDependencies && d.monitorRunDependencies(N);
            if (0 == N && (null !== O && (clearInterval(O), O = null), P)) {
              var f = P;
              P = null;
              f();
            }
            return c;
          }
          var b = { a: Ja };
          N++;
          d.monitorRunDependencies && d.monitorRunDependencies(N);
          if (d.instantiateWasm)
            try {
              return d.instantiateWasm(b, a);
            } catch (c) {
              E("Module.instantiateWasm callback failed with error: " + c), l(c);
            }
          pa(b, function(c) {
            a(c.instance);
          }).catch(l);
          return {};
        })();
        d._OrtInit = (a, b) => (d._OrtInit = I.L)(a, b);
        d._OrtGetLastError = (a, b) => (d._OrtGetLastError = I.M)(a, b);
        d._OrtCreateSessionOptions = (a, b, c, f, g, h, m, q, w, t) => (d._OrtCreateSessionOptions = I.N)(a, b, c, f, g, h, m, q, w, t);
        d._OrtAppendExecutionProvider = (a, b) => (d._OrtAppendExecutionProvider = I.O)(a, b);
        d._OrtAddFreeDimensionOverride = (a, b, c) => (d._OrtAddFreeDimensionOverride = I.P)(a, b, c);
        d._OrtAddSessionConfigEntry = (a, b, c) => (d._OrtAddSessionConfigEntry = I.Q)(a, b, c);
        d._OrtReleaseSessionOptions = (a) => (d._OrtReleaseSessionOptions = I.R)(a);
        d._OrtCreateSession = (a, b, c) => (d._OrtCreateSession = I.S)(a, b, c);
        d._OrtReleaseSession = (a) => (d._OrtReleaseSession = I.T)(a);
        d._OrtGetInputOutputCount = (a, b, c) => (d._OrtGetInputOutputCount = I.U)(a, b, c);
        d._OrtGetInputName = (a, b) => (d._OrtGetInputName = I.V)(a, b);
        d._OrtGetOutputName = (a, b) => (d._OrtGetOutputName = I.W)(a, b);
        d._OrtFree = (a) => (d._OrtFree = I.X)(a);
        d._OrtCreateTensor = (a, b, c, f, g, h) => (d._OrtCreateTensor = I.Y)(a, b, c, f, g, h);
        d._OrtGetTensorData = (a, b, c, f, g) => (d._OrtGetTensorData = I.Z)(a, b, c, f, g);
        d._OrtReleaseTensor = (a) => (d._OrtReleaseTensor = I._)(a);
        d._OrtCreateRunOptions = (a, b, c, f) => (d._OrtCreateRunOptions = I.$)(a, b, c, f);
        d._OrtAddRunConfigEntry = (a, b, c) => (d._OrtAddRunConfigEntry = I.aa)(a, b, c);
        d._OrtReleaseRunOptions = (a) => (d._OrtReleaseRunOptions = I.ba)(a);
        d._OrtCreateBinding = (a) => (d._OrtCreateBinding = I.ca)(a);
        d._OrtBindInput = (a, b, c) => (d._OrtBindInput = I.da)(a, b, c);
        d._OrtBindOutput = (a, b, c, f) => (d._OrtBindOutput = I.ea)(a, b, c, f);
        d._OrtClearBoundOutputs = (a) => (d._OrtClearBoundOutputs = I.fa)(a);
        d._OrtReleaseBinding = (a) => (d._OrtReleaseBinding = I.ga)(a);
        d._OrtRunWithBinding = (a, b, c, f, g) => (d._OrtRunWithBinding = I.ha)(a, b, c, f, g);
        d._OrtRun = (a, b, c, f, g, h, m, q) => (d._OrtRun = I.ia)(a, b, c, f, g, h, m, q);
        d._OrtEndProfiling = (a) => (d._OrtEndProfiling = I.ja)(a);
        d._OrtTrainingLoadCheckpoint = (a, b) => (d._OrtTrainingLoadCheckpoint = I.ka)(a, b);
        d._OrtTrainingReleaseCheckpoint = (a) => (d._OrtTrainingReleaseCheckpoint = I.la)(a);
        d._OrtTrainingCreateSession = (a, b, c, f, g, h, m, q) => (d._OrtTrainingCreateSession = I.ma)(a, b, c, f, g, h, m, q);
        d._OrtTrainingLazyResetGrad = (a) => (d._OrtTrainingLazyResetGrad = I.na)(a);
        d._OrtTrainingRunTrainStep = (a, b, c, f, g, h) => (d._OrtTrainingRunTrainStep = I.oa)(a, b, c, f, g, h);
        d._OrtTrainingOptimizerStep = (a, b) => (d._OrtTrainingOptimizerStep = I.pa)(a, b);
        d._OrtTrainingEvalStep = (a, b, c, f, g, h) => (d._OrtTrainingEvalStep = I.qa)(a, b, c, f, g, h);
        d._OrtTrainingGetParametersSize = (a, b, c) => (d._OrtTrainingGetParametersSize = I.ra)(a, b, c);
        d._OrtTrainingCopyParametersToBuffer = (a, b, c, f) => (d._OrtTrainingCopyParametersToBuffer = I.sa)(a, b, c, f);
        d._OrtTrainingCopyParametersFromBuffer = (a, b, c, f) => (d._OrtTrainingCopyParametersFromBuffer = I.ta)(a, b, c, f);
        d._OrtTrainingReleaseSession = (a) => (d._OrtTrainingReleaseSession = I.ua)(a);
        var Aa = d._malloc = (a) => (Aa = d._malloc = I.va)(a);
        d._free = (a) => (d._free = I.wa)(a);
        var Ia = (a) => (Ia = I.ya)(a), La = () => (La = I.za)(), Ma = (a) => (Ma = I.Aa)(a), Na = (a) => (Na = I.Ba)(a);
        function Ka(a) {
          a = Object.assign({}, a);
          var b = (f) => () => f() >>> 0, c = (f) => (g) => f(g) >>> 0;
          a.__errno_location = b(a.__errno_location);
          a.malloc = c(a.malloc);
          a.stackSave = b(a.stackSave);
          a.stackAlloc = c(a.stackAlloc);
          return a;
        }
        d.stackAlloc = Na;
        d.stackSave = La;
        d.stackRestore = Ma;
        d.UTF8ToString = T;
        d.stringToUTF8 = (a, b, c) => V(a, K, b, c);
        d.lengthBytesUTF8 = U;
        var Z;
        P = function Oa() {
          Z || Pa();
          Z || (P = Oa);
        };
        function Pa() {
          function a() {
            if (!Z && (Z = true, d.calledRun = true, !da)) {
              S(ha);
              k(d);
              if (d.onRuntimeInitialized)
                d.onRuntimeInitialized();
              if (d.postRun)
                for ("function" == typeof d.postRun && (d.postRun = [d.postRun]); d.postRun.length; ) {
                  var b = d.postRun.shift();
                  ia.unshift(b);
                }
              S(ia);
            }
          }
          if (!(0 < N)) {
            if (d.preRun)
              for ("function" == typeof d.preRun && (d.preRun = [d.preRun]); d.preRun.length; )
                ja();
            S(fa);
            0 < N || (d.setStatus ? (d.setStatus("Running..."), setTimeout(function() {
              setTimeout(function() {
                d.setStatus("");
              }, 1);
              a();
            }, 1)) : a());
          }
        }
        if (d.preInit)
          for ("function" == typeof d.preInit && (d.preInit = [d.preInit]); 0 < d.preInit.length; )
            d.preInit.pop()();
        Pa();
        return moduleArg.ready;
      };
    })();
    if (typeof exports === "object" && typeof module === "object")
      module.exports = ortWasm;
    else if (typeof define === "function" && define["amd"])
      define([], () => ortWasm);
  }
});

// nodejs-ignore:worker_threads
var require_worker_threads = __commonJS({
  "nodejs-ignore:worker_threads"() {
  }
});

// nodejs-ignore:perf_hooks
var require_perf_hooks = __commonJS({
  "nodejs-ignore:perf_hooks"() {
  }
});

// nodejs-ignore:os
var os_exports = {};
__export(os_exports, {
  cpus: () => cpus2
});
var cpus2;
var init_os = __esm({
  "nodejs-ignore:os"() {
    cpus2 = void 0;
  }
});

// web/lib/wasm/binding/ort-wasm-threaded.js
var require_ort_wasm_threaded = __commonJS({
  "web/lib/wasm/binding/ort-wasm-threaded.js"(exports, module) {
    "use strict";
    var ortWasmThreaded = (() => {
      var _scriptDir = typeof document !== "undefined" && document.currentScript ? document.currentScript.src : void 0;
      if (typeof __filename !== "undefined")
        _scriptDir = _scriptDir || __filename;
      return function(moduleArg = {}) {
        function p() {
          q.buffer != r.buffer && t();
          return r;
        }
        function x() {
          q.buffer != r.buffer && t();
          return ba;
        }
        function ca() {
          q.buffer != r.buffer && t();
          return da;
        }
        function ea() {
          q.buffer != r.buffer && t();
          return fa;
        }
        function A() {
          q.buffer != r.buffer && t();
          return ha;
        }
        function B() {
          q.buffer != r.buffer && t();
          return ia;
        }
        function ja() {
          q.buffer != r.buffer && t();
          return ka;
        }
        var C = moduleArg, la, ma;
        C.ready = new Promise((a, b) => {
          la = a;
          ma = b;
        });
        var na = Object.assign({}, C), oa = "./this.program", pa = (a, b) => {
          throw b;
        }, qa = "object" == typeof window, ra = "function" == typeof importScripts, F = "object" == typeof process && "object" == typeof process.versions && "string" == typeof process.versions.node, G = C.ENVIRONMENT_IS_PTHREAD || false, H = "";
        function sa(a) {
          return C.locateFile ? C.locateFile(a, H) : H + a;
        }
        var ta, ua, va;
        if (F) {
          var fs = (init_fs(), __toCommonJS(fs_exports)), wa = (init_path(), __toCommonJS(path_exports));
          H = ra ? wa.dirname(H) + "/" : __dirname + "/";
          ta = (b, c) => {
            b = b.startsWith("file://") ? new URL(b) : wa.normalize(b);
            return fs.readFileSync(b, c ? void 0 : "utf8");
          };
          va = (b) => {
            b = ta(b, true);
            b.buffer || (b = new Uint8Array(b));
            return b;
          };
          ua = (b, c, d, e = true) => {
            b = b.startsWith("file://") ? new URL(b) : wa.normalize(b);
            fs.readFile(b, e ? void 0 : "utf8", (f, g) => {
              f ? d(f) : c(e ? g.buffer : g);
            });
          };
          !C.thisProgram && 1 < process.argv.length && (oa = process.argv[1].replace(/\\/g, "/"));
          process.argv.slice(2);
          pa = (b, c) => {
            process.exitCode = b;
            throw c;
          };
          C.inspect = () => "[Emscripten Module object]";
          let a;
          try {
            a = require_worker_threads();
          } catch (b) {
            throw console.error('The "worker_threads" module is not supported in this node.js build - perhaps a newer version is needed?'), b;
          }
          global.Worker = a.Worker;
        } else if (qa || ra)
          ra ? H = self.location.href : "undefined" != typeof document && document.currentScript && (H = document.currentScript.src), typeof _scriptDir !== "undefined" && _scriptDir && (H = _scriptDir), 0 !== H.indexOf("blob:") ? H = H.substr(0, H.replace(/[?#].*/, "").lastIndexOf("/") + 1) : H = "", F || (ta = (a) => {
            var b = new XMLHttpRequest();
            b.open("GET", a, false);
            b.send(null);
            return b.responseText;
          }, ra && (va = (a) => {
            var b = new XMLHttpRequest();
            b.open("GET", a, false);
            b.responseType = "arraybuffer";
            b.send(null);
            return new Uint8Array(b.response);
          }), ua = (a, b, c) => {
            var d = new XMLHttpRequest();
            d.open("GET", a, true);
            d.responseType = "arraybuffer";
            d.onload = () => {
              200 == d.status || 0 == d.status && d.response ? b(d.response) : c();
            };
            d.onerror = c;
            d.send(null);
          });
        F && "undefined" == typeof performance && (global.performance = require_perf_hooks().performance);
        var xa = console.log.bind(console), ya = console.error.bind(console);
        F && (xa = (...a) => fs.writeSync(1, a.join(" ") + "\n"), ya = (...a) => fs.writeSync(2, a.join(" ") + "\n"));
        var za = xa, L = ya;
        Object.assign(C, na);
        na = null;
        var noExitRuntime = true;
        "object" != typeof WebAssembly && Aa("no native wasm support detected");
        var q, Ba, Ca = false, Da, r, ba, da, fa, ha, ia, Ea, Fa, Ga, ka;
        function t() {
          var a = q.buffer;
          C.HEAP8 = r = new Int8Array(a);
          C.HEAP16 = da = new Int16Array(a);
          C.HEAPU8 = ba = new Uint8Array(a);
          C.HEAPU16 = fa = new Uint16Array(a);
          C.HEAP32 = ha = new Int32Array(a);
          C.HEAPU32 = ia = new Uint32Array(a);
          C.HEAPF32 = Ea = new Float32Array(a);
          C.HEAPF64 = ka = new Float64Array(a);
          C.HEAP64 = Fa = new BigInt64Array(a);
          C.HEAPU64 = Ga = new BigUint64Array(a);
        }
        var Ha = 16777216;
        5242880 <= Ha || Aa("INITIAL_MEMORY should be larger than STACK_SIZE, was " + Ha + "! (STACK_SIZE=5242880)");
        if (G)
          q = C.wasmMemory;
        else if (q = new WebAssembly.Memory({ initial: Ha / 65536, maximum: 65536, shared: true }), !(q.buffer instanceof SharedArrayBuffer))
          throw L("requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag"), F && L("(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and/or recent version)"), Error("bad memory");
        t();
        Ha = q.buffer.byteLength;
        var Ia = [], Ja = [], Ka = [], La = 0;
        function Ma() {
          return noExitRuntime || 0 < La;
        }
        var Na = 0, Oa = null, Pa = null;
        function Qa() {
          Na--;
          if (0 == Na && (null !== Oa && (clearInterval(Oa), Oa = null), Pa)) {
            var a = Pa;
            Pa = null;
            a();
          }
        }
        function Aa(a) {
          a = "Aborted(" + a + ")";
          L(a);
          Ca = true;
          Da = 1;
          a = new WebAssembly.RuntimeError(a + ". Build with -sASSERTIONS for more info.");
          ma(a);
          throw a;
        }
        function Ra(a) {
          return a.startsWith("data:application/octet-stream;base64,");
        }
        var Sa;
        Sa = "ort-wasm-threaded.wasm";
        Ra(Sa) || (Sa = sa(Sa));
        function Ta(a) {
          if (va)
            return va(a);
          throw "both async and sync fetching of the wasm failed";
        }
        function Ua(a) {
          if (qa || ra) {
            if ("function" == typeof fetch && !a.startsWith("file://"))
              return fetch(a, { credentials: "same-origin" }).then((b) => {
                if (!b.ok)
                  throw "failed to load wasm binary file at '" + a + "'";
                return b.arrayBuffer();
              }).catch(() => Ta(a));
            if (ua)
              return new Promise((b, c) => {
                ua(a, (d) => b(new Uint8Array(d)), c);
              });
          }
          return Promise.resolve().then(() => Ta(a));
        }
        function Va(a, b, c) {
          return Ua(a).then((d) => WebAssembly.instantiate(d, b)).then((d) => d).then(c, (d) => {
            L(`failed to asynchronously prepare wasm: ${d}`);
            Aa(d);
          });
        }
        function Wa(a, b) {
          var c = Sa;
          return "function" != typeof WebAssembly.instantiateStreaming || Ra(c) || c.startsWith("file://") || F || "function" != typeof fetch ? Va(c, a, b) : fetch(c, { credentials: "same-origin" }).then((d) => WebAssembly.instantiateStreaming(d, a).then(b, function(e) {
            L(`wasm streaming compile failed: ${e}`);
            L("falling back to ArrayBuffer instantiation");
            return Va(c, a, b);
          }));
        }
        function Xa(a) {
          this.name = "ExitStatus";
          this.message = `Program terminated with exit(${a})`;
          this.status = a;
        }
        var Ya = (a) => {
          a.terminate();
          a.onmessage = () => {
          };
        }, Za = (a) => {
          if (0 == M.Qe.length) {
            var b = sa("ort-wasm-threaded.worker.js");
            b = new Worker(b);
            M.Qe.push(b);
            M.sf(M.Qe[0]);
          }
          b = M.Qe.pop();
          if (!b)
            return 6;
          M.Ne.push(b);
          M.Je[a.Me] = b;
          b.Me = a.Me;
          var c = { cmd: "run", start_routine: a.uf, arg: a.mf, pthread_ptr: a.Me };
          F && b.unref();
          b.postMessage(c, a.Af);
          return 0;
        }, $a = "undefined" != typeof TextDecoder ? new TextDecoder("utf8") : void 0, ab = (a, b, c) => {
          b >>>= 0;
          var d = b + c;
          for (c = b; a[c] && !(c >= d); )
            ++c;
          if (16 < c - b && a.buffer && $a)
            return $a.decode(a.buffer instanceof SharedArrayBuffer ? a.slice(b, c) : a.subarray(b, c));
          for (d = ""; b < c; ) {
            var e = a[b++];
            if (e & 128) {
              var f = a[b++] & 63;
              if (192 == (e & 224))
                d += String.fromCharCode((e & 31) << 6 | f);
              else {
                var g = a[b++] & 63;
                e = 224 == (e & 240) ? (e & 15) << 12 | f << 6 | g : (e & 7) << 18 | f << 12 | g << 6 | a[b++] & 63;
                65536 > e ? d += String.fromCharCode(e) : (e -= 65536, d += String.fromCharCode(55296 | e >> 10, 56320 | e & 1023));
              }
            } else
              d += String.fromCharCode(e);
          }
          return d;
        }, bb = (a, b) => (a >>>= 0) ? ab(x(), a, b) : "";
        function cb(a) {
          if (G)
            return N(0, 1, a);
          Da = a;
          Ma() || (M.vf(), Ca = true);
          pa(a, new Xa(a));
        }
        var eb = (a) => {
          Da = a;
          if (G)
            throw db(a), "unwind";
          cb(a);
        };
        function gb() {
          Ia.unshift(() => {
            Na++;
            Qa();
          });
        }
        var M = { Qe: [], Ne: [], ff: [], Je: {}, Xe() {
          G ? (M.receiveObjectTransfer = M.tf, M.threadInitTLS = M.ef, M.setExitStatus = M.bf, noExitRuntime = false) : gb();
        }, bf: (a) => {
          Da = a;
        }, Df: ["$terminateWorker"], vf: () => {
          for (var a of M.Ne)
            Ya(a);
          for (a of M.Qe)
            Ya(a);
          M.Qe = [];
          M.Ne = [];
          M.Je = [];
        }, af: (a) => {
          var b = a.Me;
          delete M.Je[b];
          M.Qe.push(a);
          M.Ne.splice(M.Ne.indexOf(a), 1);
          a.Me = 0;
          hb(b);
        }, tf() {
        }, ef() {
          M.ff.forEach((a) => a());
        }, sf: (a) => new Promise((b) => {
          a.onmessage = (f) => {
            f = f.data;
            var g = f.cmd;
            if (f.targetThread && f.targetThread != ib()) {
              var h = M.Je[f.targetThread];
              h ? h.postMessage(f, f.transferList) : L(`Internal error! Worker sent a message "${g}" to target pthread ${f.targetThread}, but that thread no longer exists!`);
            } else if ("checkMailbox" === g)
              jb();
            else if ("spawnThread" === g)
              Za(f);
            else if ("cleanupThread" === g)
              (f = M.Je[f.thread]) || Aa(), M.af(f);
            else if ("killThread" === g)
              f = f.thread, g = M.Je[f], delete M.Je[f], Ya(g), hb(f), M.Ne.splice(M.Ne.indexOf(g), 1), g.Me = 0;
            else if ("cancelThread" === g)
              M.Je[f.thread].postMessage({ cmd: "cancel" });
            else if ("loaded" === g)
              a.loaded = true, b(a);
            else if ("alert" === g)
              alert(`Thread ${f.threadId}: ${f.text}`);
            else if ("setimmediate" === f.target)
              a.postMessage(f);
            else if ("callHandler" === g)
              C[f.handler](...f.args);
            else
              g && L(`worker sent an unknown command ${g}`);
          };
          a.onerror = (f) => {
            L(`${"worker sent an error!"} ${f.filename}:${f.lineno}: ${f.message}`);
            throw f;
          };
          F && (a.on("message", (f) => a.onmessage({ data: f })), a.on("error", (f) => a.onerror(f)));
          var c = [], d = [], e;
          for (e of d)
            C.hasOwnProperty(e) && c.push(e);
          a.postMessage({
            cmd: "load",
            handlers: c,
            urlOrBlob: C.mainScriptUrlOrBlob || _scriptDir,
            wasmMemory: q,
            wasmModule: Ba
          });
        }) };
        C.PThread = M;
        var kb = (a) => {
          for (; 0 < a.length; )
            a.shift()(C);
        };
        C.establishStackSpace = () => {
          var a = ib(), b = B()[a + 52 >>> 2 >>> 0];
          a = B()[a + 56 >>> 2 >>> 0];
          lb(b, b - a);
          O(b);
        };
        function db(a) {
          if (G)
            return N(1, 0, a);
          eb(a);
        }
        var mb = [], nb, P = (a) => {
          var b = mb[a];
          b || (a >= mb.length && (mb.length = a + 1), mb[a] = b = nb.get(a));
          return b;
        };
        C.invokeEntryPoint = (a, b) => {
          a = P(a)(b);
          Ma() ? M.bf(a) : ob(a);
        };
        var pb = [], qb = 0, Q = 0;
        function rb(a) {
          this.Se = a;
          this.Ie = a - 24;
          this.lf = function(b) {
            B()[this.Ie + 4 >>> 2 >>> 0] = b;
          };
          this.Te = function() {
            return B()[this.Ie + 4 >>> 2 >>> 0];
          };
          this.kf = function(b) {
            B()[this.Ie + 8 >>> 2 >>> 0] = b;
          };
          this.cf = function(b) {
            b = b ? 1 : 0;
            p()[this.Ie + 12 >>> 0 >>> 0] = b;
          };
          this.hf = function() {
            return 0 != p()[this.Ie + 12 >>> 0 >>> 0];
          };
          this.df = function(b) {
            b = b ? 1 : 0;
            p()[this.Ie + 13 >>> 0 >>> 0] = b;
          };
          this.pf = function() {
            return 0 != p()[this.Ie + 13 >>> 0 >>> 0];
          };
          this.Xe = function(b, c) {
            this.Ue(0);
            this.lf(b);
            this.kf(c);
          };
          this.Ue = function(b) {
            B()[this.Ie + 16 >>> 2 >>> 0] = b;
          };
          this.gf = function() {
            return B()[this.Ie + 16 >>> 2 >>> 0];
          };
          this.jf = function() {
            if (sb(this.Te()))
              return B()[this.Se >>> 2 >>> 0];
            var b = this.gf();
            return 0 !== b ? b : this.Se;
          };
        }
        var vb = (a) => {
          var b = Q;
          if (!b)
            return tb(0), 0;
          var c = new rb(b);
          c.Ue(b);
          var d = c.Te();
          if (!d)
            return tb(0), b;
          for (var e in a) {
            var f = a[e];
            if (0 === f || f === d)
              break;
            if (ub(f, d, c.Ie + 16))
              return tb(f), b;
          }
          tb(d);
          return b;
        };
        function wb(a, b, c, d) {
          return G ? N(2, 1, a, b, c, d) : xb(a, b, c, d);
        }
        function xb(a, b, c, d) {
          a >>>= 0;
          b >>>= 0;
          c >>>= 0;
          d >>>= 0;
          if ("undefined" == typeof SharedArrayBuffer)
            return L("Current environment does not support SharedArrayBuffer, pthreads are not available!"), 6;
          var e = [];
          if (G && 0 === e.length)
            return wb(a, b, c, d);
          a = { uf: c, Me: a, mf: d, Af: e };
          return G ? (a.Cf = "spawnThread", postMessage(a, e), 0) : Za(a);
        }
        function yb(a, b, c) {
          return G ? N(3, 1, a, b, c) : 0;
        }
        function zb(a, b) {
          if (G)
            return N(4, 1, a, b);
        }
        var Ab = (a) => {
          for (var b = 0, c = 0; c < a.length; ++c) {
            var d = a.charCodeAt(c);
            127 >= d ? b++ : 2047 >= d ? b += 2 : 55296 <= d && 57343 >= d ? (b += 4, ++c) : b += 3;
          }
          return b;
        }, Bb = (a, b, c, d) => {
          c >>>= 0;
          if (!(0 < d))
            return 0;
          var e = c;
          d = c + d - 1;
          for (var f = 0; f < a.length; ++f) {
            var g = a.charCodeAt(f);
            if (55296 <= g && 57343 >= g) {
              var h = a.charCodeAt(++f);
              g = 65536 + ((g & 1023) << 10) | h & 1023;
            }
            if (127 >= g) {
              if (c >= d)
                break;
              b[c++ >>> 0] = g;
            } else {
              if (2047 >= g) {
                if (c + 1 >= d)
                  break;
                b[c++ >>> 0] = 192 | g >> 6;
              } else {
                if (65535 >= g) {
                  if (c + 2 >= d)
                    break;
                  b[c++ >>> 0] = 224 | g >> 12;
                } else {
                  if (c + 3 >= d)
                    break;
                  b[c++ >>> 0] = 240 | g >> 18;
                  b[c++ >>> 0] = 128 | g >> 12 & 63;
                }
                b[c++ >>> 0] = 128 | g >> 6 & 63;
              }
              b[c++ >>> 0] = 128 | g & 63;
            }
          }
          b[c >>> 0] = 0;
          return c - e;
        }, Cb = (a, b, c) => Bb(a, x(), b, c);
        function Db(a, b) {
          if (G)
            return N(5, 1, a, b);
        }
        function Eb(a, b, c) {
          if (G)
            return N(6, 1, a, b, c);
        }
        function Fb(a, b, c) {
          return G ? N(7, 1, a, b, c) : 0;
        }
        function Gb(a, b) {
          if (G)
            return N(8, 1, a, b);
        }
        function Hb(a, b, c) {
          if (G)
            return N(9, 1, a, b, c);
        }
        function Ib(a, b, c, d) {
          if (G)
            return N(10, 1, a, b, c, d);
        }
        function Jb(a, b, c, d) {
          if (G)
            return N(11, 1, a, b, c, d);
        }
        function Kb(a, b, c, d) {
          if (G)
            return N(12, 1, a, b, c, d);
        }
        function Lb(a) {
          if (G)
            return N(13, 1, a);
        }
        function Mb(a, b) {
          if (G)
            return N(14, 1, a, b);
        }
        function Nb(a, b, c) {
          if (G)
            return N(15, 1, a, b, c);
        }
        var Ob = (a) => {
          if (null === a)
            return "null";
          var b = typeof a;
          return "object" === b || "array" === b || "function" === b ? a.toString() : "" + a;
        }, Pb, R = (a) => {
          for (var b = ""; x()[a >>> 0]; )
            b += Pb[x()[a++ >>> 0]];
          return b;
        }, Qb = {}, Rb = {}, Sb = {}, Tb;
        function Ub(a, b, c = {}) {
          var d = b.name;
          if (!a)
            throw new Tb(`type "${d}" must have a positive integer typeid pointer`);
          if (Rb.hasOwnProperty(a)) {
            if (c.qf)
              return;
            throw new Tb(`Cannot register type '${d}' twice`);
          }
          Rb[a] = b;
          delete Sb[a];
          Qb.hasOwnProperty(a) && (b = Qb[a], delete Qb[a], b.forEach((e) => e()));
        }
        function S(a, b, c = {}) {
          if (!("argPackAdvance" in b))
            throw new TypeError("registerType registeredInstance requires argPackAdvance");
          Ub(a, b, c);
        }
        var Vb = (a, b, c) => {
          switch (b) {
            case 1:
              return c ? (d) => p()[d >>> 0 >>> 0] : (d) => x()[d >>> 0 >>> 0];
            case 2:
              return c ? (d) => ca()[d >>> 1 >>> 0] : (d) => ea()[d >>> 1 >>> 0];
            case 4:
              return c ? (d) => A()[d >>> 2 >>> 0] : (d) => B()[d >>> 2 >>> 0];
            case 8:
              return c ? (d) => Fa[d >>> 3] : (d) => Ga[d >>> 3];
            default:
              throw new TypeError(`invalid integer width (${b}): ${a}`);
          }
        };
        function Wb() {
          this.Le = [void 0];
          this.Ze = [];
        }
        var T = new Wb();
        function Xb(a) {
          a >>>= 0;
          a >= T.Ie && 0 === --T.get(a).$e && T.Ue(a);
        }
        var U = (a) => {
          if (!a)
            throw new Tb("Cannot use deleted val. handle = " + a);
          return T.get(a).value;
        }, V = (a) => {
          switch (a) {
            case void 0:
              return 1;
            case null:
              return 2;
            case true:
              return 3;
            case false:
              return 4;
            default:
              return T.Te({ $e: 1, value: a });
          }
        };
        function Yb(a) {
          return this.fromWireType(A()[a >>> 2 >>> 0]);
        }
        var Zb = (a, b) => {
          switch (b) {
            case 4:
              return function(c) {
                var d = this.fromWireType;
                q.buffer != r.buffer && t();
                return d.call(this, Ea[c >>> 2 >>> 0]);
              };
            case 8:
              return function(c) {
                return this.fromWireType(ja()[c >>> 3 >>> 0]);
              };
            default:
              throw new TypeError(`invalid float width (${b}): ${a}`);
          }
        };
        function $b(a) {
          return this.fromWireType(B()[a >>> 2 >>> 0]);
        }
        var ac = "undefined" != typeof TextDecoder ? new TextDecoder("utf-16le") : void 0, bc = (a, b) => {
          var c = a >> 1;
          for (var d = c + b / 2; !(c >= d) && ea()[c >>> 0]; )
            ++c;
          c <<= 1;
          if (32 < c - a && ac)
            return ac.decode(x().slice(a, c));
          c = "";
          for (d = 0; !(d >= b / 2); ++d) {
            var e = ca()[a + 2 * d >>> 1 >>> 0];
            if (0 == e)
              break;
            c += String.fromCharCode(e);
          }
          return c;
        }, cc = (a, b, c) => {
          void 0 === c && (c = 2147483647);
          if (2 > c)
            return 0;
          c -= 2;
          var d = b;
          c = c < 2 * a.length ? c / 2 : a.length;
          for (var e = 0; e < c; ++e) {
            var f = a.charCodeAt(e);
            ca()[b >>> 1 >>> 0] = f;
            b += 2;
          }
          ca()[b >>> 1 >>> 0] = 0;
          return b - d;
        }, dc = (a) => 2 * a.length, ec = (a, b) => {
          for (var c = 0, d = ""; !(c >= b / 4); ) {
            var e = A()[a + 4 * c >>> 2 >>> 0];
            if (0 == e)
              break;
            ++c;
            65536 <= e ? (e -= 65536, d += String.fromCharCode(55296 | e >> 10, 56320 | e & 1023)) : d += String.fromCharCode(e);
          }
          return d;
        }, fc = (a, b, c) => {
          b >>>= 0;
          void 0 === c && (c = 2147483647);
          if (4 > c)
            return 0;
          var d = b;
          c = d + c - 4;
          for (var e = 0; e < a.length; ++e) {
            var f = a.charCodeAt(e);
            if (55296 <= f && 57343 >= f) {
              var g = a.charCodeAt(++e);
              f = 65536 + ((f & 1023) << 10) | g & 1023;
            }
            A()[b >>> 2 >>> 0] = f;
            b += 4;
            if (b + 4 > c)
              break;
          }
          A()[b >>> 2 >>> 0] = 0;
          return b - d;
        }, gc = (a) => {
          for (var b = 0, c = 0; c < a.length; ++c) {
            var d = a.charCodeAt(c);
            55296 <= d && 57343 >= d && ++c;
            b += 4;
          }
          return b;
        }, hc = (a) => {
          if (!Ca)
            try {
              if (a(), !Ma())
                try {
                  G ? ob(Da) : eb(Da);
                } catch (b) {
                  b instanceof Xa || "unwind" == b || pa(1, b);
                }
            } catch (b) {
              b instanceof Xa || "unwind" == b || pa(1, b);
            }
        };
        function ic(a) {
          a >>>= 0;
          "function" === typeof Atomics.Bf && (Atomics.Bf(A(), a >>> 2, a).value.then(jb), a += 128, Atomics.store(A(), a >>> 2, 1));
        }
        C.__emscripten_thread_mailbox_await = ic;
        var jb = () => {
          var a = ib();
          a && (ic(a), hc(() => jc()));
        };
        C.checkMailbox = jb;
        var kc = (a) => {
          var b = W();
          a = a();
          O(b);
          return a;
        };
        function N(a, b) {
          var c = arguments.length - 2, d = arguments;
          return kc(() => {
            for (var e = 2 * c, f = lc(8 * e), g = f >>> 3, h = 0; h < c; h++) {
              var k = d[2 + h];
              "bigint" == typeof k ? (Fa[g + 2 * h] = 1n, Fa[g + 2 * h + 1] = k) : (Fa[g + 2 * h] = 0n, ja()[g + 2 * h + 1 >>> 0] = k);
            }
            return mc(a, e, f, b);
          });
        }
        var nc = [], pc = (a, b) => {
          var c = Rb[a];
          if (void 0 === c)
            throw a = oc(a), c = R(a), X(a), new Tb(b + " has unknown type " + c);
          return c;
        }, qc = {}, rc = (a) => {
          var b = qc[a];
          return void 0 === b ? R(a) : b;
        }, sc = [], tc = () => "object" == typeof globalThis ? globalThis : Function("return this")(), uc = (a) => {
          var b = sc.length;
          sc.push(a);
          return b;
        }, vc = (a, b) => {
          for (var c = Array(a), d = 0; d < a; ++d)
            c[d] = pc(B()[b + 4 * d >>> 2 >>> 0], "parameter " + d);
          return c;
        }, wc = (a) => {
          if (void 0 === a)
            return "_unknown";
          a = a.replace(/[^a-zA-Z0-9_]/g, "$");
          var b = a.charCodeAt(0);
          return 48 <= b && 57 >= b ? `_${a}` : a;
        }, xc = {};
        function yc(a, b) {
          a = wc(a);
          return { [a]: function() {
            return b.apply(this, arguments);
          } }[a];
        }
        function zc(a) {
          var b = Function;
          if (!(b instanceof Function))
            throw new TypeError(`new_ called with constructor type ${typeof b} which is not a function`);
          var c = yc(b.name || "unknownFunctionName", function() {
          });
          c.prototype = b.prototype;
          c = new c();
          a = b.apply(c, a);
          return a instanceof Object ? a : c;
        }
        var Ac = (a) => {
          for (var b = "", c = 0; c < a; ++c)
            b += (0 !== c ? ", " : "") + "arg" + c;
          var d = "return function emval_allocator_" + a + "(constructor, argTypes, args) {\n  var HEAPU32 = getMemory();\n";
          for (c = 0; c < a; ++c)
            d += "var argType" + c + " = requireRegisteredType(HEAPU32[((argTypes)>>>2)], 'parameter " + c + "');\nvar arg" + c + " = argType" + c + ".readValueFromPointer(args);\nargs += argType" + c + "['argPackAdvance'];\nargTypes += 4;\n";
          return new Function("requireRegisteredType", "Module", "valueToHandle", "getMemory", d + ("var obj = new constructor(" + b + ");\nreturn valueToHandle(obj);\n}\n"))(pc, C, V, () => B());
        }, Bc = {}, Cc = (a) => 0 === a % 4 && (0 !== a % 100 || 0 === a % 400), Dc = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335], Ec = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];
        function Fc(a, b, c, d, e, f, g) {
          return G ? N(16, 1, a, b, c, d, e, f, g) : -52;
        }
        function Gc(a, b, c, d, e, f) {
          if (G)
            return N(17, 1, a, b, c, d, e, f);
        }
        var Ic = (a) => {
          var b = Ab(a) + 1, c = Hc(b);
          c && Cb(a, c, b);
          return c;
        }, Jc = {}, Lc = () => {
          if (!Kc) {
            var a = { USER: "web_user", LOGNAME: "web_user", PATH: "/", PWD: "/", HOME: "/home/web_user", LANG: ("object" == typeof navigator && navigator.languages && navigator.languages[0] || "C").replace("-", "_") + ".UTF-8", _: oa || "./this.program" }, b;
            for (b in Jc)
              void 0 === Jc[b] ? delete a[b] : a[b] = Jc[b];
            var c = [];
            for (b in a)
              c.push(`${b}=${a[b]}`);
            Kc = c;
          }
          return Kc;
        }, Kc;
        function Mc(a, b) {
          if (G)
            return N(18, 1, a, b);
          a >>>= 0;
          b >>>= 0;
          var c = 0;
          Lc().forEach((d, e) => {
            var f = b + c;
            e = B()[a + 4 * e >>> 2 >>> 0] = f;
            for (f = 0; f < d.length; ++f)
              p()[e++ >>> 0 >>> 0] = d.charCodeAt(f);
            p()[e >>> 0 >>> 0] = 0;
            c += d.length + 1;
          });
          return 0;
        }
        function Nc(a, b) {
          if (G)
            return N(19, 1, a, b);
          a >>>= 0;
          b >>>= 0;
          var c = Lc();
          B()[a >>> 2 >>> 0] = c.length;
          var d = 0;
          c.forEach((e) => d += e.length + 1);
          B()[b >>> 2 >>> 0] = d;
          return 0;
        }
        function Oc(a) {
          return G ? N(20, 1, a) : 52;
        }
        function Pc(a, b, c, d) {
          return G ? N(21, 1, a, b, c, d) : 52;
        }
        function Qc(a, b, c, d) {
          return G ? N(22, 1, a, b, c, d) : 70;
        }
        var Rc = [null, [], []];
        function Sc(a, b, c, d) {
          if (G)
            return N(23, 1, a, b, c, d);
          b >>>= 0;
          c >>>= 0;
          d >>>= 0;
          for (var e = 0, f = 0; f < c; f++) {
            var g = B()[b >>> 2 >>> 0], h = B()[b + 4 >>> 2 >>> 0];
            b += 8;
            for (var k = 0; k < h; k++) {
              var l = x()[g + k >>> 0], n = Rc[a];
              0 === l || 10 === l ? ((1 === a ? za : L)(ab(n, 0)), n.length = 0) : n.push(l);
            }
            e += h;
          }
          B()[d >>> 2 >>> 0] = e;
          return 0;
        }
        var Tc = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], Uc = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
        function Vc(a) {
          var b = Array(Ab(a) + 1);
          Bb(a, b, 0, b.length);
          return b;
        }
        var Wc = (a, b) => {
          p().set(a, b >>> 0);
        };
        function Xc(a, b, c, d) {
          function e(m, w, y) {
            for (m = "number" == typeof m ? m.toString() : m || ""; m.length < w; )
              m = y[0] + m;
            return m;
          }
          function f(m, w) {
            return e(m, w, "0");
          }
          function g(m, w) {
            function y(D) {
              return 0 > D ? -1 : 0 < D ? 1 : 0;
            }
            var z;
            0 === (z = y(m.getFullYear() - w.getFullYear())) && 0 === (z = y(m.getMonth() - w.getMonth())) && (z = y(m.getDate() - w.getDate()));
            return z;
          }
          function h(m) {
            switch (m.getDay()) {
              case 0:
                return new Date(m.getFullYear() - 1, 11, 29);
              case 1:
                return m;
              case 2:
                return new Date(m.getFullYear(), 0, 3);
              case 3:
                return new Date(
                  m.getFullYear(),
                  0,
                  2
                );
              case 4:
                return new Date(m.getFullYear(), 0, 1);
              case 5:
                return new Date(m.getFullYear() - 1, 11, 31);
              case 6:
                return new Date(m.getFullYear() - 1, 11, 30);
            }
          }
          function k(m) {
            var w = m.Oe;
            for (m = new Date(new Date(m.Pe + 1900, 0, 1).getTime()); 0 < w; ) {
              var y = m.getMonth(), z = (Cc(m.getFullYear()) ? Tc : Uc)[y];
              if (w > z - m.getDate())
                w -= z - m.getDate() + 1, m.setDate(1), 11 > y ? m.setMonth(y + 1) : (m.setMonth(0), m.setFullYear(m.getFullYear() + 1));
              else {
                m.setDate(m.getDate() + w);
                break;
              }
            }
            y = new Date(m.getFullYear() + 1, 0, 4);
            w = h(new Date(
              m.getFullYear(),
              0,
              4
            ));
            y = h(y);
            return 0 >= g(w, m) ? 0 >= g(y, m) ? m.getFullYear() + 1 : m.getFullYear() : m.getFullYear() - 1;
          }
          a >>>= 0;
          b >>>= 0;
          c >>>= 0;
          d >>>= 0;
          var l = B()[d + 40 >>> 2 >>> 0];
          d = { yf: A()[d >>> 2 >>> 0], xf: A()[d + 4 >>> 2 >>> 0], Ve: A()[d + 8 >>> 2 >>> 0], Ye: A()[d + 12 >>> 2 >>> 0], We: A()[d + 16 >>> 2 >>> 0], Pe: A()[d + 20 >>> 2 >>> 0], Ke: A()[d + 24 >>> 2 >>> 0], Oe: A()[d + 28 >>> 2 >>> 0], Ef: A()[d + 32 >>> 2 >>> 0], wf: A()[d + 36 >>> 2 >>> 0], zf: l ? bb(l) : "" };
          c = bb(c);
          l = {
            "%c": "%a %b %d %H:%M:%S %Y",
            "%D": "%m/%d/%y",
            "%F": "%Y-%m-%d",
            "%h": "%b",
            "%r": "%I:%M:%S %p",
            "%R": "%H:%M",
            "%T": "%H:%M:%S",
            "%x": "%m/%d/%y",
            "%X": "%H:%M:%S",
            "%Ec": "%c",
            "%EC": "%C",
            "%Ex": "%m/%d/%y",
            "%EX": "%H:%M:%S",
            "%Ey": "%y",
            "%EY": "%Y",
            "%Od": "%d",
            "%Oe": "%e",
            "%OH": "%H",
            "%OI": "%I",
            "%Om": "%m",
            "%OM": "%M",
            "%OS": "%S",
            "%Ou": "%u",
            "%OU": "%U",
            "%OV": "%V",
            "%Ow": "%w",
            "%OW": "%W",
            "%Oy": "%y"
          };
          for (var n in l)
            c = c.replace(new RegExp(n, "g"), l[n]);
          var u = "Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "), v = "January February March April May June July August September October November December".split(" ");
          l = { "%a": (m) => u[m.Ke].substring(0, 3), "%A": (m) => u[m.Ke], "%b": (m) => v[m.We].substring(0, 3), "%B": (m) => v[m.We], "%C": (m) => f((m.Pe + 1900) / 100 | 0, 2), "%d": (m) => f(m.Ye, 2), "%e": (m) => e(m.Ye, 2, " "), "%g": (m) => k(m).toString().substring(2), "%G": (m) => k(m), "%H": (m) => f(m.Ve, 2), "%I": (m) => {
            m = m.Ve;
            0 == m ? m = 12 : 12 < m && (m -= 12);
            return f(m, 2);
          }, "%j": (m) => {
            for (var w = 0, y = 0; y <= m.We - 1; w += (Cc(m.Pe + 1900) ? Tc : Uc)[y++])
              ;
            return f(m.Ye + w, 3);
          }, "%m": (m) => f(m.We + 1, 2), "%M": (m) => f(m.xf, 2), "%n": () => "\n", "%p": (m) => 0 <= m.Ve && 12 > m.Ve ? "AM" : "PM", "%S": (m) => f(m.yf, 2), "%t": () => "	", "%u": (m) => m.Ke || 7, "%U": (m) => f(Math.floor((m.Oe + 7 - m.Ke) / 7), 2), "%V": (m) => {
            var w = Math.floor((m.Oe + 7 - (m.Ke + 6) % 7) / 7);
            2 >= (m.Ke + 371 - m.Oe - 2) % 7 && w++;
            if (w)
              53 == w && (y = (m.Ke + 371 - m.Oe) % 7, 4 == y || 3 == y && Cc(m.Pe) || (w = 1));
            else {
              w = 52;
              var y = (m.Ke + 7 - m.Oe - 1) % 7;
              (4 == y || 5 == y && Cc(m.Pe % 400 - 1)) && w++;
            }
            return f(w, 2);
          }, "%w": (m) => m.Ke, "%W": (m) => f(Math.floor((m.Oe + 7 - (m.Ke + 6) % 7) / 7), 2), "%y": (m) => (m.Pe + 1900).toString().substring(2), "%Y": (m) => m.Pe + 1900, "%z": (m) => {
            m = m.wf;
            var w = 0 <= m;
            m = Math.abs(m) / 60;
            return (w ? "+" : "-") + String("0000" + (m / 60 * 100 + m % 60)).slice(-4);
          }, "%Z": (m) => m.zf, "%%": () => "%" };
          c = c.replace(/%%/g, "\0\0");
          for (n in l)
            c.includes(n) && (c = c.replace(new RegExp(n, "g"), l[n](d)));
          c = c.replace(/\0\0/g, "%");
          n = Vc(c);
          if (n.length > b)
            return 0;
          Wc(n, a);
          return n.length - 1;
        }
        M.Xe();
        for (var Yc = Array(256), Zc = 0; 256 > Zc; ++Zc)
          Yc[Zc] = String.fromCharCode(Zc);
        Pb = Yc;
        Tb = C.BindingError = class extends Error {
          constructor(a) {
            super(a);
            this.name = "BindingError";
          }
        };
        C.InternalError = class extends Error {
          constructor(a) {
            super(a);
            this.name = "InternalError";
          }
        };
        Object.assign(Wb.prototype, { get(a) {
          return this.Le[a];
        }, has(a) {
          return void 0 !== this.Le[a];
        }, Te(a) {
          var b = this.Ze.pop() || this.Le.length;
          this.Le[b] = a;
          return b;
        }, Ue(a) {
          this.Le[a] = void 0;
          this.Ze.push(a);
        } });
        T.Le.push({ value: void 0 }, { value: null }, { value: true }, { value: false });
        T.Ie = T.Le.length;
        C.count_emval_handles = () => {
          for (var a = 0, b = T.Ie; b < T.Le.length; ++b)
            void 0 !== T.Le[b] && ++a;
          return a;
        };
        var $c = [cb, db, wb, yb, zb, Db, Eb, Fb, Gb, Hb, Ib, Jb, Kb, Lb, Mb, Nb, Fc, Gc, Mc, Nc, Oc, Pc, Qc, Sc], rg = {
          u: function(a) {
            a = new rb(a >>> 0);
            a.hf() || (a.cf(true), qb--);
            a.df(false);
            pb.push(a);
            ad(a.Se);
            return a.jf();
          },
          M: () => {
            Y(0, 0);
            var a = pb.pop();
            bd(a.Se);
            Q = 0;
          },
          b: function() {
            return vb([]);
          },
          n: function(a) {
            return vb([a >>> 0]);
          },
          y: function(a, b) {
            return vb([a >>> 0, b >>> 0]);
          },
          q: function(a, b, c) {
            return vb([a >>> 0, b >>> 0, c >>> 0]);
          },
          zb: () => {
            var a = pb.pop();
            a || Aa("no exception to throw");
            var b = a.Se;
            a.pf() || (pb.push(a), a.df(true), a.cf(false), qb++);
            Q = b;
            throw Q;
          },
          t: function(a, b, c) {
            a >>>= 0;
            new rb(a).Xe(b >>> 0, c >>> 0);
            Q = a;
            qb++;
            throw Q;
          },
          Sa: () => qb,
          Wc: function(a) {
            cd(a >>> 0, !ra, 1, !qa, 131072, false);
            M.ef();
          },
          Ub: function(a) {
            a >>>= 0;
            G ? postMessage({ cmd: "cleanupThread", thread: a }) : ((a = M.Je[a]) || Aa(), M.af(a));
          },
          Mc: xb,
          i: function(a) {
            Q || (Q = a >>> 0);
            throw Q;
          },
          Ab: yb,
          ad: zb,
          Hc: Db,
          Jc: Eb,
          Ac: Fb,
          _c: Gb,
          Tc: Hb,
          Zc: Ib,
          Wb: Jb,
          Ic: Kb,
          Fc: Lb,
          $c: Mb,
          Gc: Nb,
          Zb: function(a, b, c, d, e) {
            a >>>= 0;
            b >>>= 0;
            c >>>= 0;
            b = R(b);
            var f = -1 != b.indexOf("u");
            f && (e = (1n << 64n) - 1n);
            S(a, { name: b, fromWireType: (g) => g, toWireType: function(g, h) {
              if ("bigint" != typeof h && "number" != typeof h)
                throw new TypeError(`Cannot convert "${Ob(h)}" to ${this.name}`);
              if (h < d || h > e)
                throw new TypeError(`Passing a number "${Ob(h)}" from JS side to C/C++ side to an argument of type "${b}", which is outside the valid range [${d}, ${e}]!`);
              return h;
            }, argPackAdvance: 8, readValueFromPointer: Vb(b, c, !f), Re: null });
          },
          hd: function(a, b, c, d) {
            a >>>= 0;
            b = R(b >>> 0);
            S(a, { name: b, fromWireType: function(e) {
              return !!e;
            }, toWireType: function(e, f) {
              return f ? c : d;
            }, argPackAdvance: 8, readValueFromPointer: function(e) {
              return this.fromWireType(x()[e >>> 0]);
            }, Re: null });
          },
          ed: function(a, b) {
            a >>>= 0;
            b = R(b >>> 0);
            S(a, { name: b, fromWireType: (c) => {
              var d = U(c);
              Xb(c);
              return d;
            }, toWireType: (c, d) => V(d), argPackAdvance: 8, readValueFromPointer: Yb, Re: null });
          },
          Yb: function(a, b, c) {
            a >>>= 0;
            c >>>= 0;
            b = R(b >>> 0);
            S(a, { name: b, fromWireType: (d) => d, toWireType: (d, e) => e, argPackAdvance: 8, readValueFromPointer: Zb(b, c), Re: null });
          },
          wa: function(a, b, c, d, e) {
            a >>>= 0;
            c >>>= 0;
            b = R(b >>> 0);
            -1 === e && (e = 4294967295);
            e = (h) => h;
            if (0 === d) {
              var f = 32 - 8 * c;
              e = (h) => h << f >>> f;
            }
            var g = b.includes("unsigned") ? function(h, k) {
              return k >>> 0;
            } : function(h, k) {
              return k;
            };
            S(a, { name: b, fromWireType: e, toWireType: g, argPackAdvance: 8, readValueFromPointer: Vb(b, c, 0 !== d), Re: null });
          },
          _: function(a, b, c) {
            function d(f) {
              var g = B()[f >>> 2 >>> 0];
              f = B()[f + 4 >>> 2 >>> 0];
              return new e(p().buffer, f, g);
            }
            a >>>= 0;
            var e = [Int8Array, Uint8Array, Int16Array, Uint16Array, Int32Array, Uint32Array, Float32Array, Float64Array, BigInt64Array, BigUint64Array][b];
            c = R(c >>> 0);
            S(a, { name: c, fromWireType: d, argPackAdvance: 8, readValueFromPointer: d }, { qf: true });
          },
          _b: function(a, b) {
            a >>>= 0;
            b = R(b >>> 0);
            var c = "std::string" === b;
            S(a, { name: b, fromWireType: function(d) {
              var e = B()[d >>> 2 >>> 0], f = d + 4;
              if (c)
                for (var g = f, h = 0; h <= e; ++h) {
                  var k = f + h;
                  if (h == e || 0 == x()[k >>> 0]) {
                    g = bb(g, k - g);
                    if (void 0 === l)
                      var l = g;
                    else
                      l += String.fromCharCode(0), l += g;
                    g = k + 1;
                  }
                }
              else {
                l = Array(e);
                for (h = 0; h < e; ++h)
                  l[h] = String.fromCharCode(x()[f + h >>> 0]);
                l = l.join("");
              }
              X(d);
              return l;
            }, toWireType: function(d, e) {
              e instanceof ArrayBuffer && (e = new Uint8Array(e));
              var f = "string" == typeof e;
              if (!(f || e instanceof Uint8Array || e instanceof Uint8ClampedArray || e instanceof Int8Array))
                throw new Tb("Cannot pass non-string to std::string");
              var g = c && f ? Ab(e) : e.length;
              var h = Hc(4 + g + 1), k = h + 4;
              B()[h >>> 2 >>> 0] = g;
              if (c && f)
                Cb(e, k, g + 1);
              else if (f)
                for (f = 0; f < g; ++f) {
                  var l = e.charCodeAt(f);
                  if (255 < l)
                    throw X(k), new Tb("String has UTF-16 code units that do not fit in 8 bits");
                  x()[k + f >>> 0] = l;
                }
              else
                for (f = 0; f < g; ++f)
                  x()[k + f >>> 0] = e[f];
              null !== d && d.push(X, h);
              return h;
            }, argPackAdvance: 8, readValueFromPointer: $b, Re(d) {
              X(d);
            } });
          },
          Cb: function(a, b, c) {
            a >>>= 0;
            b >>>= 0;
            c >>>= 0;
            c = R(c);
            if (2 === b) {
              var d = bc;
              var e = cc;
              var f = dc;
              var g = () => ea();
              var h = 1;
            } else
              4 === b && (d = ec, e = fc, f = gc, g = () => B(), h = 2);
            S(a, { name: c, fromWireType: (k) => {
              for (var l = B()[k >>> 2 >>> 0], n = g(), u, v = k + 4, m = 0; m <= l; ++m) {
                var w = k + 4 + m * b;
                if (m == l || 0 == n[w >>> h])
                  v = d(v, w - v), void 0 === u ? u = v : (u += String.fromCharCode(0), u += v), v = w + b;
              }
              X(k);
              return u;
            }, toWireType: (k, l) => {
              if ("string" != typeof l)
                throw new Tb(`Cannot pass non-string to C++ string type ${c}`);
              var n = f(l), u = Hc(4 + n + b);
              B()[u >>> 2] = n >> h;
              e(l, u + 4, n + b);
              null !== k && k.push(X, u);
              return u;
            }, argPackAdvance: 8, readValueFromPointer: Yb, Re(k) {
              X(k);
            } });
          },
          kd: function(a, b) {
            a >>>= 0;
            b = R(b >>> 0);
            S(a, {
              rf: true,
              name: b,
              argPackAdvance: 0,
              fromWireType: () => {
              },
              toWireType: () => {
              }
            });
          },
          dd: () => true,
          Dc: function(a, b) {
            a >>>= 0;
            a == b >>> 0 ? setTimeout(() => jb()) : G ? postMessage({ targetThread: a, cmd: "checkMailbox" }) : (a = M.Je[a]) && a.postMessage({ cmd: "checkMailbox" });
          },
          Nc: function(a, b, c, d) {
            b >>>= 0;
            c /= 2;
            nc.length = c;
            d = d >>> 0 >>> 3;
            for (var e = 0; e < c; e++)
              nc[e] = Fa[d + 2 * e] ? Fa[d + 2 * e + 1] : ja()[d + 2 * e + 1 >>> 0];
            a = $c[a];
            M.nf = b;
            b = a.apply(null, nc);
            M.nf = 0;
            return b;
          },
          Vc: ic,
          cd: function(a) {
            F && M.Je[a >>> 0].ref();
          },
          xd: function(a, b, c) {
            b >>>= 0;
            c >>>= 0;
            a = U(a >>> 0);
            b = pc(b, "emval::as");
            var d = [], e = V(d);
            B()[c >>> 2 >>> 0] = e;
            return b.toWireType(d, a);
          },
          la: function(a, b, c, d, e) {
            c >>>= 0;
            d >>>= 0;
            e >>>= 0;
            a = sc[a >>> 0];
            b = U(b >>> 0);
            c = rc(c);
            var f = [];
            B()[d >>> 2 >>> 0] = V(f);
            return a(b, c, f, e);
          },
          Fd: function(a, b, c, d) {
            c >>>= 0;
            d >>>= 0;
            a = sc[a >>> 0];
            b = U(b >>> 0);
            c = rc(c);
            a(b, c, null, d);
          },
          zc: Xb,
          yd: function(a, b) {
            b >>>= 0;
            a = U(a >>> 0);
            b = U(b);
            return a == b;
          },
          Jd: function(a) {
            a >>>= 0;
            if (0 === a)
              return V(tc());
            a = rc(a);
            return V(tc()[a]);
          },
          ma: function(a, b) {
            var c = vc(a, b >>> 0), d = c[0];
            b = d.name + "_$" + c.slice(1).map(function(n) {
              return n.name;
            }).join("_") + "$";
            var e = xc[b];
            if (void 0 !== e)
              return e;
            e = ["retType"];
            for (var f = [d], g = "", h = 0; h < a - 1; ++h)
              g += (0 !== h ? ", " : "") + "arg" + h, e.push("argType" + h), f.push(c[1 + h]);
            var k = "return function " + wc("methodCaller_" + b) + "(handle, name, destructors, args) {\n", l = 0;
            for (h = 0; h < a - 1; ++h)
              k += "    var arg" + h + " = argType" + h + ".readValueFromPointer(args" + (l ? "+" + l : "") + ");\n", l += c[h + 1].argPackAdvance;
            k += "    var rv = handle[name](" + g + ");\n";
            for (h = 0; h < a - 1; ++h)
              c[h + 1].deleteObject && (k += "    argType" + h + ".deleteObject(arg" + h + ");\n");
            d.rf || (k += "    return retType.toWireType(destructors, rv);\n");
            e.push(k + "};\n");
            a = zc(e).apply(null, f);
            e = uc(a);
            return xc[b] = e;
          },
          Hd: function(a, b) {
            b >>>= 0;
            a = U(a >>> 0);
            b = U(b);
            return V(a[b]);
          },
          Q: function(a) {
            a >>>= 0;
            4 < a && (T.get(a).$e += 1);
          },
          Bd: function(a, b, c, d) {
            c >>>= 0;
            d >>>= 0;
            a = U(a >>> 0);
            var e = Bc[b];
            e || (e = Ac(b), Bc[b] = e);
            return e(a, c, d);
          },
          rd: function() {
            return V([]);
          },
          td: function(a) {
            a = U(a >>> 0);
            for (var b = Array(a.length), c = 0; c < a.length; c++)
              b[c] = a[c];
            return V(b);
          },
          X: function(a) {
            return V(rc(a >>> 0));
          },
          Ra: function() {
            return V({});
          },
          Cd: function(a) {
            a >>>= 0;
            for (var b = U(a); b.length; ) {
              var c = b.pop();
              b.pop()(c);
            }
            Xb(a);
          },
          Ad: function(a, b, c) {
            b >>>= 0;
            c >>>= 0;
            a = U(a >>> 0);
            b = U(b);
            c = U(c);
            a[b] = c;
          },
          bb: function(a, b) {
            b >>>= 0;
            a = pc(a >>> 0, "_emval_take_value");
            a = a.readValueFromPointer(b);
            return V(a);
          },
          Qc: function(a, b) {
            a = -9007199254740992 > a || 9007199254740992 < a ? NaN : Number(a);
            b >>>= 0;
            a = new Date(1e3 * a);
            A()[b >>> 2 >>> 0] = a.getUTCSeconds();
            A()[b + 4 >>> 2 >>> 0] = a.getUTCMinutes();
            A()[b + 8 >>> 2 >>> 0] = a.getUTCHours();
            A()[b + 12 >>> 2 >>> 0] = a.getUTCDate();
            A()[b + 16 >>> 2 >>> 0] = a.getUTCMonth();
            A()[b + 20 >>> 2 >>> 0] = a.getUTCFullYear() - 1900;
            A()[b + 24 >>> 2 >>> 0] = a.getUTCDay();
            a = (a.getTime() - Date.UTC(a.getUTCFullYear(), 0, 1, 0, 0, 0, 0)) / 864e5 | 0;
            A()[b + 28 >>> 2 >>> 0] = a;
          },
          Rc: function(a, b) {
            a = -9007199254740992 > a || 9007199254740992 < a ? NaN : Number(a);
            b >>>= 0;
            a = new Date(1e3 * a);
            A()[b >>> 2 >>> 0] = a.getSeconds();
            A()[b + 4 >>> 2 >>> 0] = a.getMinutes();
            A()[b + 8 >>> 2 >>> 0] = a.getHours();
            A()[b + 12 >>> 2 >>> 0] = a.getDate();
            A()[b + 16 >>> 2 >>> 0] = a.getMonth();
            A()[b + 20 >>> 2 >>> 0] = a.getFullYear() - 1900;
            A()[b + 24 >>> 2 >>> 0] = a.getDay();
            var c = (Cc(a.getFullYear()) ? Dc : Ec)[a.getMonth()] + a.getDate() - 1 | 0;
            A()[b + 28 >>> 2 >>> 0] = c;
            A()[b + 36 >>> 2 >>> 0] = -(60 * a.getTimezoneOffset());
            c = new Date(a.getFullYear(), 6, 1).getTimezoneOffset();
            var d = new Date(a.getFullYear(), 0, 1).getTimezoneOffset();
            a = (c != d && a.getTimezoneOffset() == Math.min(d, c)) | 0;
            A()[b + 32 >>> 2 >>> 0] = a;
          },
          Sc: function(a) {
            a >>>= 0;
            var b = new Date(A()[a + 20 >>> 2 >>> 0] + 1900, A()[a + 16 >>> 2 >>> 0], A()[a + 12 >>> 2 >>> 0], A()[a + 8 >>> 2 >>> 0], A()[a + 4 >>> 2 >>> 0], A()[a >>> 2 >>> 0], 0), c = A()[a + 32 >>> 2 >>> 0], d = b.getTimezoneOffset(), e = new Date(
              b.getFullYear(),
              6,
              1
            ).getTimezoneOffset(), f = new Date(b.getFullYear(), 0, 1).getTimezoneOffset(), g = Math.min(f, e);
            0 > c ? A()[a + 32 >>> 2 >>> 0] = Number(e != f && g == d) : 0 < c != (g == d) && (e = Math.max(f, e), b.setTime(b.getTime() + 6e4 * ((0 < c ? g : e) - d)));
            A()[a + 24 >>> 2 >>> 0] = b.getDay();
            c = (Cc(b.getFullYear()) ? Dc : Ec)[b.getMonth()] + b.getDate() - 1 | 0;
            A()[a + 28 >>> 2 >>> 0] = c;
            A()[a >>> 2 >>> 0] = b.getSeconds();
            A()[a + 4 >>> 2 >>> 0] = b.getMinutes();
            A()[a + 8 >>> 2 >>> 0] = b.getHours();
            A()[a + 12 >>> 2 >>> 0] = b.getDate();
            A()[a + 16 >>> 2 >>> 0] = b.getMonth();
            A()[a + 20 >>> 2 >>> 0] = b.getYear();
            return BigInt(b.getTime() / 1e3);
          },
          Oc: Fc,
          Pc: Gc,
          Cc: function(a, b, c) {
            function d(l) {
              return (l = l.toTimeString().match(/\(([A-Za-z ]+)\)$/)) ? l[1] : "GMT";
            }
            a >>>= 0;
            b >>>= 0;
            c >>>= 0;
            var e = (/* @__PURE__ */ new Date()).getFullYear(), f = new Date(e, 0, 1), g = new Date(e, 6, 1);
            e = f.getTimezoneOffset();
            var h = g.getTimezoneOffset(), k = Math.max(e, h);
            B()[a >>> 2 >>> 0] = 60 * k;
            A()[b >>> 2 >>> 0] = Number(e != h);
            a = d(f);
            b = d(g);
            a = Ic(a);
            b = Ic(b);
            h < e ? (B()[c >>> 2 >>> 0] = a, B()[c + 4 >>> 2 >>> 0] = b) : (B()[c >>> 2 >>> 0] = b, B()[c + 4 >>> 2 >>> 0] = a);
          },
          aa: () => {
            Aa("");
          },
          Vb: () => {
          },
          Xb: () => Date.now(),
          bd: () => {
            La += 1;
            throw "unwind";
          },
          Ec: function() {
            return 4294901760;
          },
          va: () => performance.timeOrigin + performance.now(),
          jb: () => F ? (init_os(), __toCommonJS(os_exports)).cpus().length : navigator.hardwareConcurrency,
          Bc: function(a) {
            a >>>= 0;
            var b = x().length;
            if (a <= b || 4294901760 < a)
              return false;
            for (var c = 1; 4 >= c; c *= 2) {
              var d = b * (1 + 0.2 / c);
              d = Math.min(d, a + 100663296);
              var e = Math;
              d = Math.max(a, d);
              a: {
                e = (e.min.call(e, 4294901760, d + (65536 - d % 65536) % 65536) - q.buffer.byteLength + 65535) / 65536;
                try {
                  q.grow(e);
                  t();
                  var f = 1;
                  break a;
                } catch (g) {
                }
                f = void 0;
              }
              if (f)
                return true;
            }
            return false;
          },
          Xc: Mc,
          Yc: Nc,
          Lc: eb,
          Bb: Oc,
          Tb: Pc,
          Uc: Qc,
          Sb: Sc,
          ib: dd,
          fd: ed,
          sa: fd,
          G: gd,
          pa: hd,
          ga: jd,
          gd: kd,
          nd: ld,
          N: md,
          z: nd,
          c: od,
          dc: pd,
          ya: qd,
          g: rd,
          Eb: sd,
          d: td,
          Y: ud,
          j: vd,
          id: wd,
          k: xd,
          r: yd,
          s: zd,
          p: Ad,
          Aa: Bd,
          Va: Cd,
          ia: Dd,
          Pb: Ed,
          $a: Fd,
          Ib: Gd,
          nb: Hd,
          ic: Id,
          xc: Jd,
          fc: Kd,
          gc: Ld,
          $b: Md,
          ka: Nd,
          yb: Od,
          Ba: Pd,
          Db: Qd,
          da: Rd,
          hc: Sd,
          Pa: Td,
          F: Ud,
          L: Vd,
          Gb: Wd,
          sd: Xd,
          oa: Yd,
          O: Zd,
          $: $d,
          V: ae,
          A: be,
          Fb: ce,
          ec: de,
          C: ee,
          Hb: fe,
          qd: ge,
          Qa: he,
          eb: ie,
          jc: je,
          ac: ke,
          Mb: le,
          P: me,
          H: ne,
          D: oe,
          ld: pe,
          lb: qe,
          R: re,
          e: se,
          Xa: te,
          l: ue,
          xa: ve,
          Wa: we,
          vb: xe,
          h: ye,
          yc: ze,
          ca: Ae,
          fb: Be,
          za: Ce,
          mb: De,
          gb: Ee,
          f: Fe,
          vc: Ge,
          ud: He,
          o: Ie,
          sc: Je,
          m: Ke,
          wc: Le,
          rc: Me,
          wd: Ne,
          w: Oe,
          Na: Pe,
          tb: Qe,
          Ma: Re,
          Kb: Se,
          B: Te,
          E: Ue,
          W: Ve,
          Ua: We,
          oc: Xe,
          Dd: Ye,
          ub: Ze,
          ua: $e,
          ja: af,
          S: bf,
          ab: cf,
          Ha: df,
          Gd: ef,
          kb: ff,
          Da: gf,
          lc: hf,
          Ca: jf,
          Ea: kf,
          jd: lf,
          Ed: mf,
          na: nf,
          vd: of,
          Ia: pf,
          Ga: qf,
          qc: rf,
          Fa: sf,
          Ja: tf,
          pb: uf,
          ha: vf,
          ta: wf,
          kc: xf,
          pc: yf,
          Jb: zf,
          Za: Af,
          fa: Bf,
          Rb: Cf,
          pd: Df,
          U: Ef,
          wb: Ff,
          db: Gf,
          Ta: Hf,
          hb: If,
          J: Jf,
          T: Kf,
          xb: Lf,
          od: Mf,
          uc: Nf,
          ba: Of,
          ob: Pf,
          ra: Qf,
          nc: Rf,
          bc: Sf,
          Id: Tf,
          x: Uf,
          cb: Vf,
          zd: Wf,
          Nb: Xf,
          mc: Yf,
          Kd: Zf,
          Ob: $f,
          Lb: ag,
          _a: bg,
          Qb: cg,
          Ka: dg,
          cc: eg,
          Z: fg,
          tc: gg,
          K: hg,
          md: ig,
          Ya: jg,
          qa: kg,
          I: lg,
          rb: mg,
          La: ng,
          Oa: og,
          qb: pg,
          sb: qg,
          v: function(a) {
            return a >>> 0;
          },
          a: q || C.wasmMemory,
          Kc: Xc,
          ea: function(a, b, c, d) {
            return Xc(a >>> 0, b >>> 0, c >>> 0, d >>> 0);
          }
        }, Z = function() {
          var a = { a: rg };
          Na++;
          Wa(a, function(b) {
            var c = b.module;
            Z = b.instance.exports;
            Z = sg();
            M.ff.push(Z.oe);
            nb = Z.re;
            Ja.unshift(Z.Ld);
            Ba = c;
            Qa();
          }).catch(ma);
          return {};
        }();
        C._OrtInit = (a, b) => (C._OrtInit = Z.Md)(a, b);
        C._OrtGetLastError = (a, b) => (C._OrtGetLastError = Z.Nd)(a, b);
        C._OrtCreateSessionOptions = (a, b, c, d, e, f, g, h, k, l) => (C._OrtCreateSessionOptions = Z.Od)(a, b, c, d, e, f, g, h, k, l);
        C._OrtAppendExecutionProvider = (a, b) => (C._OrtAppendExecutionProvider = Z.Pd)(a, b);
        C._OrtAddFreeDimensionOverride = (a, b, c) => (C._OrtAddFreeDimensionOverride = Z.Qd)(a, b, c);
        C._OrtAddSessionConfigEntry = (a, b, c) => (C._OrtAddSessionConfigEntry = Z.Rd)(a, b, c);
        C._OrtReleaseSessionOptions = (a) => (C._OrtReleaseSessionOptions = Z.Sd)(a);
        C._OrtCreateSession = (a, b, c) => (C._OrtCreateSession = Z.Td)(a, b, c);
        C._OrtReleaseSession = (a) => (C._OrtReleaseSession = Z.Ud)(a);
        C._OrtGetInputOutputCount = (a, b, c) => (C._OrtGetInputOutputCount = Z.Vd)(a, b, c);
        C._OrtGetInputName = (a, b) => (C._OrtGetInputName = Z.Wd)(a, b);
        C._OrtGetOutputName = (a, b) => (C._OrtGetOutputName = Z.Xd)(a, b);
        C._OrtFree = (a) => (C._OrtFree = Z.Yd)(a);
        C._OrtCreateTensor = (a, b, c, d, e, f) => (C._OrtCreateTensor = Z.Zd)(a, b, c, d, e, f);
        C._OrtGetTensorData = (a, b, c, d, e) => (C._OrtGetTensorData = Z._d)(a, b, c, d, e);
        C._OrtReleaseTensor = (a) => (C._OrtReleaseTensor = Z.$d)(a);
        C._OrtCreateRunOptions = (a, b, c, d) => (C._OrtCreateRunOptions = Z.ae)(a, b, c, d);
        C._OrtAddRunConfigEntry = (a, b, c) => (C._OrtAddRunConfigEntry = Z.be)(a, b, c);
        C._OrtReleaseRunOptions = (a) => (C._OrtReleaseRunOptions = Z.ce)(a);
        C._OrtCreateBinding = (a) => (C._OrtCreateBinding = Z.de)(a);
        C._OrtBindInput = (a, b, c) => (C._OrtBindInput = Z.ee)(a, b, c);
        C._OrtBindOutput = (a, b, c, d) => (C._OrtBindOutput = Z.fe)(a, b, c, d);
        C._OrtClearBoundOutputs = (a) => (C._OrtClearBoundOutputs = Z.ge)(a);
        C._OrtReleaseBinding = (a) => (C._OrtReleaseBinding = Z.he)(a);
        C._OrtRunWithBinding = (a, b, c, d, e) => (C._OrtRunWithBinding = Z.ie)(a, b, c, d, e);
        C._OrtRun = (a, b, c, d, e, f, g, h) => (C._OrtRun = Z.je)(a, b, c, d, e, f, g, h);
        C._OrtEndProfiling = (a) => (C._OrtEndProfiling = Z.ke)(a);
        var ib = C._pthread_self = () => (ib = C._pthread_self = Z.le)(), Hc = C._malloc = (a) => (Hc = C._malloc = Z.me)(a), X = C._free = (a) => (X = C._free = Z.ne)(a);
        C.__emscripten_tls_init = () => (C.__emscripten_tls_init = Z.oe)();
        var oc = (a) => (oc = Z.pe)(a);
        C.__embind_initialize_bindings = () => (C.__embind_initialize_bindings = Z.qe)();
        var cd = C.__emscripten_thread_init = (a, b, c, d, e, f) => (cd = C.__emscripten_thread_init = Z.se)(a, b, c, d, e, f);
        C.__emscripten_thread_crashed = () => (C.__emscripten_thread_crashed = Z.te)();
        var mc = (a, b, c, d) => (mc = Z.ue)(a, b, c, d), hb = (a) => (hb = Z.ve)(a), ob = C.__emscripten_thread_exit = (a) => (ob = C.__emscripten_thread_exit = Z.we)(a), jc = C.__emscripten_check_mailbox = () => (jc = C.__emscripten_check_mailbox = Z.xe)(), Y = (a, b) => (Y = Z.ye)(a, b), tb = (a) => (tb = Z.ze)(a), lb = (a, b) => (lb = Z.Ae)(a, b), W = () => (W = Z.Be)(), O = (a) => (O = Z.Ce)(a), lc = (a) => (lc = Z.De)(a), bd = (a) => (bd = Z.Ee)(a), ad = (a) => (ad = Z.Fe)(a), ub = (a, b, c) => (ub = Z.Ge)(a, b, c), sb = (a) => (sb = Z.He)(a);
        function td(a, b, c, d) {
          var e = W();
          try {
            return P(a)(b, c, d);
          } catch (f) {
            O(e);
            if (f !== f + 0)
              throw f;
            Y(1, 0);
          }
        }
        function rd(a, b, c) {
          var d = W();
          try {
            return P(a)(b, c);
          } catch (e) {
            O(d);
            if (e !== e + 0)
              throw e;
            Y(1, 0);
          }
        }
        function ye(a, b, c) {
          var d = W();
          try {
            P(a)(b, c);
          } catch (e) {
            O(d);
            if (e !== e + 0)
              throw e;
            Y(1, 0);
          }
        }
        function od(a, b) {
          var c = W();
          try {
            return P(a)(b);
          } catch (d) {
            O(c);
            if (d !== d + 0)
              throw d;
            Y(1, 0);
          }
        }
        function ue(a, b) {
          var c = W();
          try {
            P(a)(b);
          } catch (d) {
            O(c);
            if (d !== d + 0)
              throw d;
            Y(1, 0);
          }
        }
        function Ud(a, b, c, d) {
          var e = W();
          try {
            return P(a)(b, c, d);
          } catch (f) {
            O(e);
            if (f !== f + 0)
              throw f;
            Y(1, 0);
          }
        }
        function se(a) {
          var b = W();
          try {
            P(a)();
          } catch (c) {
            O(b);
            if (c !== c + 0)
              throw c;
            Y(1, 0);
          }
        }
        function yd(a, b, c, d, e, f, g) {
          var h = W();
          try {
            return P(a)(b, c, d, e, f, g);
          } catch (k) {
            O(h);
            if (k !== k + 0)
              throw k;
            Y(1, 0);
          }
        }
        function xd(a, b, c, d, e, f) {
          var g = W();
          try {
            return P(a)(b, c, d, e, f);
          } catch (h) {
            O(g);
            if (h !== h + 0)
              throw h;
            Y(1, 0);
          }
        }
        function vd(a, b, c, d, e) {
          var f = W();
          try {
            return P(a)(b, c, d, e);
          } catch (g) {
            O(f);
            if (g !== g + 0)
              throw g;
            Y(1, 0);
          }
        }
        function Fe(a, b, c, d) {
          var e = W();
          try {
            P(a)(b, c, d);
          } catch (f) {
            O(e);
            if (f !== f + 0)
              throw f;
            Y(1, 0);
          }
        }
        function Ie(a, b, c, d, e) {
          var f = W();
          try {
            P(a)(b, c, d, e);
          } catch (g) {
            O(f);
            if (g !== g + 0)
              throw g;
            Y(1, 0);
          }
        }
        function nd(a) {
          var b = W();
          try {
            return P(a)();
          } catch (c) {
            O(b);
            if (c !== c + 0)
              throw c;
            Y(1, 0);
          }
        }
        function be(a, b, c) {
          var d = W();
          try {
            return P(a)(b, c);
          } catch (e) {
            O(d);
            if (e !== e + 0)
              throw e;
            Y(1, 0);
          }
        }
        function Uf(a, b, c) {
          var d = W();
          try {
            P(a)(b, c);
          } catch (e) {
            O(d);
            if (e !== e + 0)
              throw e;
            Y(1, 0);
          }
        }
        function Ke(a, b, c, d, e, f) {
          var g = W();
          try {
            P(a)(b, c, d, e, f);
          } catch (h) {
            O(g);
            if (h !== h + 0)
              throw h;
            Y(1, 0);
          }
        }
        function zd(a, b, c, d, e, f, g, h) {
          var k = W();
          try {
            return P(a)(b, c, d, e, f, g, h);
          } catch (l) {
            O(k);
            if (l !== l + 0)
              throw l;
            Y(1, 0);
          }
        }
        function jd(a, b) {
          var c = W();
          try {
            return P(a)(b);
          } catch (d) {
            O(c);
            if (d !== d + 0)
              throw d;
            Y(1, 0);
          }
        }
        function me(a, b) {
          var c = W();
          try {
            return P(a)(b);
          } catch (d) {
            O(c);
            if (d !== d + 0)
              throw d;
            Y(1, 0);
            return 0n;
          }
        }
        function dd(a, b) {
          var c = W();
          try {
            return P(a)(b);
          } catch (d) {
            O(c);
            if (d !== d + 0)
              throw d;
            Y(1, 0);
          }
        }
        function Ad(a, b, c, d, e, f, g, h, k) {
          var l = W();
          try {
            return P(a)(b, c, d, e, f, g, h, k);
          } catch (n) {
            O(l);
            if (n !== n + 0)
              throw n;
            Y(1, 0);
          }
        }
        function Jf(a, b, c, d) {
          var e = W();
          try {
            P(a)(b, c, d);
          } catch (f) {
            O(e);
            if (f !== f + 0)
              throw f;
            Y(1, 0);
          }
        }
        function Oe(a, b, c, d, e, f, g) {
          var h = W();
          try {
            P(a)(b, c, d, e, f, g);
          } catch (k) {
            O(h);
            if (k !== k + 0)
              throw k;
            Y(1, 0);
          }
        }
        function Zf(a, b, c, d) {
          var e = W();
          try {
            P(a)(b, c, d);
          } catch (f) {
            O(e);
            if (f !== f + 0)
              throw f;
            Y(1, 0);
          }
        }
        function Cf(a, b, c, d, e, f, g) {
          var h = W();
          try {
            P(a)(b, c, d, e, f, g);
          } catch (k) {
            O(h);
            if (k !== k + 0)
              throw k;
            Y(1, 0);
          }
        }
        function Te(a, b, c, d, e, f, g, h) {
          var k = W();
          try {
            P(a)(b, c, d, e, f, g, h);
          } catch (l) {
            O(k);
            if (l !== l + 0)
              throw l;
            Y(1, 0);
          }
        }
        function Of(a, b, c, d, e) {
          var f = W();
          try {
            P(a)(b, c, d, e);
          } catch (g) {
            O(f);
            if (g !== g + 0)
              throw g;
            Y(1, 0);
          }
        }
        function Bd(a, b, c, d, e, f, g, h, k, l) {
          var n = W();
          try {
            return P(a)(b, c, d, e, f, g, h, k, l);
          } catch (u) {
            O(n);
            if (u !== u + 0)
              throw u;
            Y(1, 0);
          }
        }
        function Ue(a, b, c, d, e, f, g, h, k) {
          var l = W();
          try {
            P(a)(b, c, d, e, f, g, h, k);
          } catch (n) {
            O(l);
            if (n !== n + 0)
              throw n;
            Y(1, 0);
          }
        }
        function Od(a, b, c, d, e, f, g, h, k, l, n) {
          var u = W();
          try {
            return P(a)(b, c, d, e, f, g, h, k, l, n);
          } catch (v) {
            O(u);
            if (v !== v + 0)
              throw v;
            Y(1, 0);
          }
        }
        function Lf(a, b, c, d, e, f, g) {
          var h = W();
          try {
            P(a)(b, c, d, e, f, g);
          } catch (k) {
            O(h);
            if (k !== k + 0)
              throw k;
            Y(1, 0);
          }
        }
        function Ve(a, b, c, d, e, f, g, h, k, l) {
          var n = W();
          try {
            P(a)(b, c, d, e, f, g, h, k, l);
          } catch (u) {
            O(n);
            if (u !== u + 0)
              throw u;
            Y(1, 0);
          }
        }
        function ne(a, b, c) {
          var d = W();
          try {
            return P(a)(b, c);
          } catch (e) {
            O(d);
            if (e !== e + 0)
              throw e;
            Y(1, 0);
            return 0n;
          }
        }
        function ze(a, b, c, d) {
          var e = W();
          try {
            P(a)(b, c, d);
          } catch (f) {
            O(e);
            if (f !== f + 0)
              throw f;
            Y(1, 0);
          }
        }
        function Jd(a, b, c, d, e, f, g, h, k) {
          var l = W();
          try {
            return P(a)(b, c, d, e, f, g, h, k);
          } catch (n) {
            O(l);
            if (n !== n + 0)
              throw n;
            Y(1, 0);
          }
        }
        function Dd(a, b, c, d, e, f, g, h, k, l, n, u) {
          var v = W();
          try {
            return P(a)(b, c, d, e, f, g, h, k, l, n, u);
          } catch (m) {
            O(v);
            if (m !== m + 0)
              throw m;
            Y(1, 0);
          }
        }
        function cf(a, b, c, d, e, f, g, h, k, l, n, u, v, m) {
          var w = W();
          try {
            P(a)(b, c, d, e, f, g, h, k, l, n, u, v, m);
          } catch (y) {
            O(w);
            if (y !== y + 0)
              throw y;
            Y(1, 0);
          }
        }
        function Tf(a, b, c, d, e, f, g, h, k, l, n, u) {
          var v = W();
          try {
            P(a)(b, c, d, e, f, g, h, k, l, n, u);
          } catch (m) {
            O(v);
            if (m !== m + 0)
              throw m;
            Y(1, 0);
          }
        }
        function Ff(a, b, c, d, e, f, g, h, k, l, n, u) {
          var v = W();
          try {
            P(a)(b, c, d, e, f, g, h, k, l, n, u);
          } catch (m) {
            O(v);
            if (m !== m + 0)
              throw m;
            Y(1, 0);
          }
        }
        function Kf(a, b, c, d, e) {
          var f = W();
          try {
            P(a)(b, c, d, e);
          } catch (g) {
            O(f);
            if (g !== g + 0)
              throw g;
            Y(1, 0);
          }
        }
        function xe(a, b, c, d, e, f, g) {
          var h = W();
          try {
            P(a)(b, c, d, e, f, g);
          } catch (k) {
            O(h);
            if (k !== k + 0)
              throw k;
            Y(1, 0);
          }
        }
        function If(a, b, c, d, e, f, g, h, k) {
          var l = W();
          try {
            P(a)(b, c, d, e, f, g, h, k);
          } catch (n) {
            O(l);
            if (n !== n + 0)
              throw n;
            Y(1, 0);
          }
        }
        function Ee(a, b, c, d, e, f, g) {
          var h = W();
          try {
            P(a)(b, c, d, e, f, g);
          } catch (k) {
            O(h);
            if (k !== k + 0)
              throw k;
            Y(1, 0);
          }
        }
        function Le(a, b, c, d, e, f, g, h, k, l, n) {
          var u = W();
          try {
            P(a)(b, c, d, e, f, g, h, k, l, n);
          } catch (v) {
            O(u);
            if (v !== v + 0)
              throw v;
            Y(1, 0);
          }
        }
        function jg(a, b, c, d, e, f, g, h) {
          var k = W();
          try {
            P(a)(b, c, d, e, f, g, h);
          } catch (l) {
            O(k);
            if (l !== l + 0)
              throw l;
            Y(1, 0);
          }
        }
        function oe(a, b, c, d) {
          var e = W();
          try {
            return P(a)(b, c, d);
          } catch (f) {
            O(e);
            if (f !== f + 0)
              throw f;
            Y(1, 0);
            return 0n;
          }
        }
        function Ge(a, b, c, d, e) {
          var f = W();
          try {
            P(a)(b, c, d, e);
          } catch (g) {
            O(f);
            if (g !== g + 0)
              throw g;
            Y(1, 0);
          }
        }
        function ef(a, b, c, d, e, f, g, h, k, l, n, u, v, m, w, y, z) {
          var D = W();
          try {
            P(a)(b, c, d, e, f, g, h, k, l, n, u, v, m, w, y, z);
          } catch (E) {
            O(D);
            if (E !== E + 0)
              throw E;
            Y(1, 0);
          }
        }
        function Nf(a, b, c, d, e, f, g, h, k, l, n) {
          var u = W();
          try {
            P(a)(b, c, d, e, f, g, h, k, l, n);
          } catch (v) {
            O(u);
            if (v !== v + 0)
              throw v;
            Y(1, 0);
          }
        }
        function gg(a, b, c, d, e, f, g, h, k, l, n, u, v, m, w, y) {
          var z = W();
          try {
            P(a)(b, c, d, e, f, g, h, k, l, n, u, v, m, w, y);
          } catch (D) {
            O(z);
            if (D !== D + 0)
              throw D;
            Y(1, 0);
          }
        }
        function Bf(a, b, c, d, e, f) {
          var g = W();
          try {
            P(a)(b, c, d, e, f);
          } catch (h) {
            O(g);
            if (h !== h + 0)
              throw h;
            Y(1, 0);
          }
        }
        function cg(a, b, c, d, e, f, g, h, k) {
          var l = W();
          try {
            P(a)(b, c, d, e, f, g, h, k);
          } catch (n) {
            O(l);
            if (n !== n + 0)
              throw n;
            Y(1, 0);
          }
        }
        function Vd(a, b, c, d, e) {
          var f = W();
          try {
            return P(a)(b, c, d, e);
          } catch (g) {
            O(f);
            if (g !== g + 0)
              throw g;
            Y(1, 0);
          }
        }
        function $d(a, b, c, d, e, f, g, h, k, l, n, u, v, m) {
          var w = W();
          try {
            return P(a)(b, c, d, e, f, g, h, k, l, n, u, v, m);
          } catch (y) {
            O(w);
            if (y !== y + 0)
              throw y;
            Y(1, 0);
          }
        }
        function hg(a, b) {
          var c = W();
          try {
            P(a)(b);
          } catch (d) {
            O(c);
            if (d !== d + 0)
              throw d;
            Y(1, 0);
          }
        }
        function re(a, b, c) {
          var d = W();
          try {
            return P(a)(b, c);
          } catch (e) {
            O(d);
            if (e !== e + 0)
              throw e;
            Y(1, 0);
            return 0n;
          }
        }
        function Zd(a, b, c, d, e, f, g, h, k, l) {
          var n = W();
          try {
            return P(a)(b, c, d, e, f, g, h, k, l);
          } catch (u) {
            O(n);
            if (u !== u + 0)
              throw u;
            Y(1, 0);
          }
        }
        function md(a, b, c, d, e) {
          var f = W();
          try {
            return P(a)(b, c, d, e);
          } catch (g) {
            O(f);
            if (g !== g + 0)
              throw g;
            Y(1, 0);
          }
        }
        function Ze(a, b, c, d, e, f, g, h, k, l, n, u, v, m, w) {
          var y = W();
          try {
            P(a)(b, c, d, e, f, g, h, k, l, n, u, v, m, w);
          } catch (z) {
            O(y);
            if (z !== z + 0)
              throw z;
            Y(1, 0);
          }
        }
        function te(a, b, c, d, e) {
          var f = W();
          try {
            P(a)(b, c, d, e);
          } catch (g) {
            O(f);
            if (g !== g + 0)
              throw g;
            Y(1, 0);
          }
        }
        function Je(a, b, c, d, e, f, g) {
          var h = W();
          try {
            P(a)(b, c, d, e, f, g);
          } catch (k) {
            O(h);
            if (k !== k + 0)
              throw k;
            Y(1, 0);
          }
        }
        function Be(a, b, c, d, e) {
          var f = W();
          try {
            P(a)(b, c, d, e);
          } catch (g) {
            O(f);
            if (g !== g + 0)
              throw g;
            Y(1, 0);
          }
        }
        function Me(a, b, c, d, e, f, g, h) {
          var k = W();
          try {
            P(a)(b, c, d, e, f, g, h);
          } catch (l) {
            O(k);
            if (l !== l + 0)
              throw l;
            Y(1, 0);
          }
        }
        function mf(a, b, c, d, e, f, g, h, k, l, n) {
          var u = W();
          try {
            P(a)(b, c, d, e, f, g, h, k, l, n);
          } catch (v) {
            O(u);
            if (v !== v + 0)
              throw v;
            Y(1, 0);
          }
        }
        function Ed(a, b, c, d, e, f, g, h, k, l, n, u, v, m, w, y, z) {
          var D = W();
          try {
            return P(a)(b, c, d, e, f, g, h, k, l, n, u, v, m, w, y, z);
          } catch (E) {
            O(D);
            if (E !== E + 0)
              throw E;
            Y(1, 0);
          }
        }
        function bf(a, b, c, d, e, f, g, h, k, l, n, u, v) {
          var m = W();
          try {
            P(a)(b, c, d, e, f, g, h, k, l, n, u, v);
          } catch (w) {
            O(m);
            if (w !== w + 0)
              throw w;
            Y(1, 0);
          }
        }
        function he(a, b) {
          var c = W();
          try {
            return P(a)(b);
          } catch (d) {
            O(c);
            if (d !== d + 0)
              throw d;
            Y(1, 0);
          }
        }
        function Fd(a, b, c, d, e, f, g, h, k, l, n, u, v, m, w, y, z, D, E, I) {
          var J = W();
          try {
            return P(a)(b, c, d, e, f, g, h, k, l, n, u, v, m, w, y, z, D, E, I);
          } catch (K) {
            O(J);
            if (K !== K + 0)
              throw K;
            Y(1, 0);
          }
        }
        function bg(a, b, c, d, e, f, g, h, k, l) {
          var n = W();
          try {
            P(a)(b, c, d, e, f, g, h, k, l);
          } catch (u) {
            O(n);
            if (u !== u + 0)
              throw u;
            Y(1, 0);
          }
        }
        function Td(a, b, c, d, e, f, g) {
          var h = W();
          try {
            return P(a)(b, c, d, e, f, g);
          } catch (k) {
            O(h);
            if (k !== k + 0)
              throw k;
            Y(1, 0);
          }
        }
        function $e(a, b, c, d, e, f, g, h, k, l, n) {
          var u = W();
          try {
            P(a)(b, c, d, e, f, g, h, k, l, n);
          } catch (v) {
            O(u);
            if (v !== v + 0)
              throw v;
            Y(1, 0);
          }
        }
        function ae(a, b, c, d, e, f) {
          var g = W();
          try {
            return P(a)(b, c, d, e, f);
          } catch (h) {
            O(g);
            if (h !== h + 0)
              throw h;
            Y(1, 0);
          }
        }
        function wf(a, b, c, d, e, f) {
          var g = W();
          try {
            P(a)(b, c, d, e, f);
          } catch (h) {
            O(g);
            if (h !== h + 0)
              throw h;
            Y(1, 0);
          }
        }
        function Ye(a, b, c, d, e, f, g, h, k, l, n, u, v, m) {
          var w = W();
          try {
            P(a)(b, c, d, e, f, g, h, k, l, n, u, v, m);
          } catch (y) {
            O(w);
            if (y !== y + 0)
              throw y;
            Y(1, 0);
          }
        }
        function og(a, b, c, d, e, f, g, h, k, l, n, u, v, m, w, y, z, D) {
          var E = W();
          try {
            P(a)(b, c, d, e, f, g, h, k, l, n, u, v, m, w, y, z, D);
          } catch (I) {
            O(E);
            if (I !== I + 0)
              throw I;
            Y(1, 0);
          }
        }
        function Qe(a, b, c, d, e, f, g, h, k, l, n, u, v, m, w, y, z) {
          var D = W();
          try {
            P(a)(b, c, d, e, f, g, h, k, l, n, u, v, m, w, y, z);
          } catch (E) {
            O(D);
            if (E !== E + 0)
              throw E;
            Y(1, 0);
          }
        }
        function Pe(a, b, c, d, e, f, g, h, k, l, n, u, v, m, w, y) {
          var z = W();
          try {
            P(a)(b, c, d, e, f, g, h, k, l, n, u, v, m, w, y);
          } catch (D) {
            O(z);
            if (D !== D + 0)
              throw D;
            Y(1, 0);
          }
        }
        function Re(a, b, c, d, e, f, g, h, k, l, n, u, v, m, w) {
          var y = W();
          try {
            P(a)(b, c, d, e, f, g, h, k, l, n, u, v, m, w);
          } catch (z) {
            O(y);
            if (z !== z + 0)
              throw z;
            Y(1, 0);
          }
        }
        function qg(a, b, c, d, e, f, g, h, k, l, n, u, v, m, w, y, z, D, E, I, J) {
          var K = W();
          try {
            P(a)(b, c, d, e, f, g, h, k, l, n, u, v, m, w, y, z, D, E, I, J);
          } catch (aa) {
            O(K);
            if (aa !== aa + 0)
              throw aa;
            Y(1, 0);
          }
        }
        function ng(a, b, c, d, e, f, g, h, k, l, n, u, v, m, w, y, z, D, E) {
          var I = W();
          try {
            P(a)(b, c, d, e, f, g, h, k, l, n, u, v, m, w, y, z, D, E);
          } catch (J) {
            O(I);
            if (J !== J + 0)
              throw J;
            Y(1, 0);
          }
        }
        function mg(a, b, c, d, e, f, g, h, k, l, n, u, v, m, w, y, z) {
          var D = W();
          try {
            P(a)(b, c, d, e, f, g, h, k, l, n, u, v, m, w, y, z);
          } catch (E) {
            O(D);
            if (E !== E + 0)
              throw E;
            Y(1, 0);
          }
        }
        function pg(a, b, c, d, e, f, g, h, k, l, n, u, v, m, w, y, z, D, E, I) {
          var J = W();
          try {
            P(a)(b, c, d, e, f, g, h, k, l, n, u, v, m, w, y, z, D, E, I);
          } catch (K) {
            O(J);
            if (K !== K + 0)
              throw K;
            Y(1, 0);
          }
        }
        function $f(a, b, c, d, e, f, g, h, k, l) {
          var n = W();
          try {
            P(a)(b, c, d, e, f, g, h, k, l);
          } catch (u) {
            O(n);
            if (u !== u + 0)
              throw u;
            Y(1, 0);
          }
        }
        function Xf(a, b, c, d, e, f, g, h, k, l, n) {
          var u = W();
          try {
            P(a)(b, c, d, e, f, g, h, k, l, n);
          } catch (v) {
            O(u);
            if (v !== v + 0)
              throw v;
            Y(1, 0);
          }
        }
        function fg(a, b, c, d, e, f, g, h, k, l, n, u, v, m, w) {
          var y = W();
          try {
            P(a)(b, c, d, e, f, g, h, k, l, n, u, v, m, w);
          } catch (z) {
            O(y);
            if (z !== z + 0)
              throw z;
            Y(1, 0);
          }
        }
        function lg(a, b, c, d, e, f, g, h, k, l) {
          var n = W();
          try {
            P(a)(b, c, d, e, f, g, h, k, l);
          } catch (u) {
            O(n);
            if (u !== u + 0)
              throw u;
            Y(1, 0);
          }
        }
        function kg(a, b, c, d, e, f, g, h, k) {
          var l = W();
          try {
            P(a)(b, c, d, e, f, g, h, k);
          } catch (n) {
            O(l);
            if (n !== n + 0)
              throw n;
            Y(1, 0);
          }
        }
        function hd(a, b, c, d, e, f, g) {
          var h = W();
          try {
            return P(a)(b, c, d, e, f, g);
          } catch (k) {
            O(h);
            if (k !== k + 0)
              throw k;
            Y(1, 0);
          }
        }
        function Ce(a, b, c, d, e) {
          var f = W();
          try {
            P(a)(b, c, d, e);
          } catch (g) {
            O(f);
            if (g !== g + 0)
              throw g;
            Y(1, 0);
          }
        }
        function le(a, b, c) {
          var d = W();
          try {
            return P(a)(b, c);
          } catch (e) {
            O(d);
            if (e !== e + 0)
              throw e;
            Y(1, 0);
            return 0n;
          }
        }
        function Nd(a, b, c, d, e, f, g) {
          var h = W();
          try {
            return P(a)(b, c, d, e, f, g);
          } catch (k) {
            O(h);
            if (k !== k + 0)
              throw k;
            Y(1, 0);
          }
        }
        function ag(a, b, c, d, e, f) {
          var g = W();
          try {
            P(a)(b, c, d, e, f);
          } catch (h) {
            O(g);
            if (h !== h + 0)
              throw h;
            Y(1, 0);
          }
        }
        function Ef(a, b, c, d, e, f, g, h, k, l, n) {
          var u = W();
          try {
            P(a)(b, c, d, e, f, g, h, k, l, n);
          } catch (v) {
            O(u);
            if (v !== v + 0)
              throw v;
            Y(1, 0);
          }
        }
        function uf(a, b, c, d, e, f, g, h, k, l, n, u, v) {
          var m = W();
          try {
            P(a)(b, c, d, e, f, g, h, k, l, n, u, v);
          } catch (w) {
            O(m);
            if (w !== w + 0)
              throw w;
            Y(1, 0);
          }
        }
        function Rd(a, b, c, d, e, f) {
          var g = W();
          try {
            return P(a)(b, c, d, e, f);
          } catch (h) {
            O(g);
            if (h !== h + 0)
              throw h;
            Y(1, 0);
          }
        }
        function rf(a, b, c, d, e, f, g, h, k, l, n, u, v) {
          var m = W();
          try {
            P(a)(b, c, d, e, f, g, h, k, l, n, u, v);
          } catch (w) {
            O(m);
            if (w !== w + 0)
              throw w;
            Y(1, 0);
          }
        }
        function yf(a, b, c, d, e, f, g, h) {
          var k = W();
          try {
            P(a)(b, c, d, e, f, g, h);
          } catch (l) {
            O(k);
            if (l !== l + 0)
              throw l;
            Y(1, 0);
          }
        }
        function Qf(a, b, c, d, e, f, g, h) {
          var k = W();
          try {
            P(a)(b, c, d, e, f, g, h);
          } catch (l) {
            O(k);
            if (l !== l + 0)
              throw l;
            Y(1, 0);
          }
        }
        function ie(a, b, c, d) {
          var e = W();
          try {
            return P(a)(b, c, d);
          } catch (f) {
            O(e);
            if (f !== f + 0)
              throw f;
            Y(1, 0);
          }
        }
        function vf(a, b, c, d, e, f, g, h, k, l) {
          var n = W();
          try {
            P(a)(b, c, d, e, f, g, h, k, l);
          } catch (u) {
            O(n);
            if (u !== u + 0)
              throw u;
            Y(1, 0);
          }
        }
        function dg(a, b, c, d, e, f, g, h, k) {
          var l = W();
          try {
            P(a)(b, c, d, e, f, g, h, k);
          } catch (n) {
            O(l);
            if (n !== n + 0)
              throw n;
            Y(1, 0);
          }
        }
        function tf(a, b, c, d, e, f, g, h, k) {
          var l = W();
          try {
            P(a)(b, c, d, e, f, g, h, k);
          } catch (n) {
            O(l);
            if (n !== n + 0)
              throw n;
            Y(1, 0);
          }
        }
        function pf(a, b, c, d, e, f, g, h, k, l) {
          var n = W();
          try {
            P(a)(b, c, d, e, f, g, h, k, l);
          } catch (u) {
            O(n);
            if (u !== u + 0)
              throw u;
            Y(1, 0);
          }
        }
        function Wf(a, b, c, d, e, f) {
          var g = W();
          try {
            P(a)(b, c, d, e, f);
          } catch (h) {
            O(g);
            if (h !== h + 0)
              throw h;
            Y(1, 0);
          }
        }
        function Xe(a, b, c, d, e, f, g, h, k, l, n, u) {
          var v = W();
          try {
            P(a)(b, c, d, e, f, g, h, k, l, n, u);
          } catch (m) {
            O(v);
            if (m !== m + 0)
              throw m;
            Y(1, 0);
          }
        }
        function Gf(a, b, c, d, e, f, g, h, k, l, n, u, v, m) {
          var w = W();
          try {
            P(a)(b, c, d, e, f, g, h, k, l, n, u, v, m);
          } catch (y) {
            O(w);
            if (y !== y + 0)
              throw y;
            Y(1, 0);
          }
        }
        function Yd(a, b, c, d, e, f, g, h) {
          var k = W();
          try {
            return P(a)(b, c, d, e, f, g, h);
          } catch (l) {
            O(k);
            if (l !== l + 0)
              throw l;
            Y(1, 0);
          }
        }
        function df(a, b, c, d, e, f, g, h, k, l, n, u, v, m, w) {
          var y = W();
          try {
            P(a)(b, c, d, e, f, g, h, k, l, n, u, v, m, w);
          } catch (z) {
            O(y);
            if (z !== z + 0)
              throw z;
            Y(1, 0);
          }
        }
        function qf(a, b, c, d, e, f, g, h, k, l, n, u, v, m) {
          var w = W();
          try {
            P(a)(b, c, d, e, f, g, h, k, l, n, u, v, m);
          } catch (y) {
            O(w);
            if (y !== y + 0)
              throw y;
            Y(1, 0);
          }
        }
        function nf(a, b, c, d, e, f, g, h, k, l, n, u, v, m, w) {
          var y = W();
          try {
            P(a)(b, c, d, e, f, g, h, k, l, n, u, v, m, w);
          } catch (z) {
            O(y);
            if (z !== z + 0)
              throw z;
            Y(1, 0);
          }
        }
        function we(a, b, c) {
          var d = W();
          try {
            P(a)(b, c);
          } catch (e) {
            O(d);
            if (e !== e + 0)
              throw e;
            Y(1, 0);
          }
        }
        function Rf(a, b, c, d, e, f, g, h, k) {
          var l = W();
          try {
            P(a)(b, c, d, e, f, g, h, k);
          } catch (n) {
            O(l);
            if (n !== n + 0)
              throw n;
            Y(1, 0);
          }
        }
        function Se(a, b, c, d, e, f, g, h, k, l, n) {
          var u = W();
          try {
            P(a)(b, c, d, e, f, g, h, k, l, n);
          } catch (v) {
            O(u);
            if (v !== v + 0)
              throw v;
            Y(1, 0);
          }
        }
        function sf(a, b, c, d, e, f, g, h, k, l, n, u, v, m, w, y, z, D, E, I, J, K, aa, vg, wg, xg) {
          var yg = W();
          try {
            P(a)(b, c, d, e, f, g, h, k, l, n, u, v, m, w, y, z, D, E, I, J, K, aa, vg, wg, xg);
          } catch (fb) {
            O(yg);
            if (fb !== fb + 0)
              throw fb;
            Y(1, 0);
          }
        }
        function Pf(a, b, c, d, e, f) {
          var g = W();
          try {
            P(a)(b, c, d, e, f);
          } catch (h) {
            O(g);
            if (h !== h + 0)
              throw h;
            Y(1, 0);
          }
        }
        function Hd(a, b, c, d, e, f, g, h, k, l, n, u, v) {
          var m = W();
          try {
            return P(a)(b, c, d, e, f, g, h, k, l, n, u, v);
          } catch (w) {
            O(m);
            if (w !== w + 0)
              throw w;
            Y(1, 0);
          }
        }
        function af(a, b, c, d, e, f, g, h, k, l, n, u) {
          var v = W();
          try {
            P(a)(b, c, d, e, f, g, h, k, l, n, u);
          } catch (m) {
            O(v);
            if (m !== m + 0)
              throw m;
            Y(1, 0);
          }
        }
        function De(a, b, c, d, e, f, g, h, k, l, n, u, v) {
          var m = W();
          try {
            P(a)(b, c, d, e, f, g, h, k, l, n, u, v);
          } catch (w) {
            O(m);
            if (w !== w + 0)
              throw w;
            Y(1, 0);
          }
        }
        function kf(a, b, c, d, e, f, g, h, k, l, n, u, v, m, w, y, z, D, E, I, J) {
          var K = W();
          try {
            P(a)(b, c, d, e, f, g, h, k, l, n, u, v, m, w, y, z, D, E, I, J);
          } catch (aa) {
            O(K);
            if (aa !== aa + 0)
              throw aa;
            Y(1, 0);
          }
        }
        function qd(a, b, c) {
          var d = W();
          try {
            return P(a)(b, c);
          } catch (e) {
            O(d);
            if (e !== e + 0)
              throw e;
            Y(1, 0);
          }
        }
        function Ne(a, b, c, d, e, f, g, h, k, l, n, u, v) {
          var m = W();
          try {
            P(a)(b, c, d, e, f, g, h, k, l, n, u, v);
          } catch (w) {
            O(m);
            if (w !== w + 0)
              throw w;
            Y(1, 0);
          }
        }
        function Yf(a, b, c, d, e, f, g, h, k, l, n, u, v, m) {
          var w = W();
          try {
            P(a)(b, c, d, e, f, g, h, k, l, n, u, v, m);
          } catch (y) {
            O(w);
            if (y !== y + 0)
              throw y;
            Y(1, 0);
          }
        }
        function zf(a, b, c, d, e, f, g, h) {
          var k = W();
          try {
            P(a)(b, c, d, e, f, g, h);
          } catch (l) {
            O(k);
            if (l !== l + 0)
              throw l;
            Y(1, 0);
          }
        }
        function gf(a, b, c, d, e, f, g, h, k, l, n, u, v, m, w, y, z) {
          var D = W();
          try {
            P(a)(b, c, d, e, f, g, h, k, l, n, u, v, m, w, y, z);
          } catch (E) {
            O(D);
            if (E !== E + 0)
              throw E;
            Y(1, 0);
          }
        }
        function jf(a, b, c, d, e, f, g, h, k, l, n, u, v, m, w, y, z, D, E, I) {
          var J = W();
          try {
            P(a)(b, c, d, e, f, g, h, k, l, n, u, v, m, w, y, z, D, E, I);
          } catch (K) {
            O(J);
            if (K !== K + 0)
              throw K;
            Y(1, 0);
          }
        }
        function hf(a, b, c, d, e, f, g, h, k, l, n, u, v, m, w, y, z, D, E) {
          var I = W();
          try {
            P(a)(b, c, d, e, f, g, h, k, l, n, u, v, m, w, y, z, D, E);
          } catch (J) {
            O(I);
            if (J !== J + 0)
              throw J;
            Y(1, 0);
          }
        }
        function of(a, b, c, d, e, f, g, h, k, l, n) {
          var u = W();
          try {
            P(a)(b, c, d, e, f, g, h, k, l, n);
          } catch (v) {
            O(u);
            if (v !== v + 0)
              throw v;
            Y(1, 0);
          }
        }
        function Cd(a, b, c, d, e, f, g, h, k, l, n) {
          var u = W();
          try {
            return P(a)(b, c, d, e, f, g, h, k, l, n);
          } catch (v) {
            O(u);
            if (v !== v + 0)
              throw v;
            Y(1, 0);
          }
        }
        function Gd(a, b, c, d, e, f, g, h, k, l, n, u, v, m, w, y, z, D, E, I) {
          var J = W();
          try {
            return P(a)(b, c, d, e, f, g, h, k, l, n, u, v, m, w, y, z, D, E, I);
          } catch (K) {
            O(J);
            if (K !== K + 0)
              throw K;
            Y(1, 0);
          }
        }
        function He(a, b, c, d, e) {
          var f = W();
          try {
            P(a)(b, c, d, e);
          } catch (g) {
            O(f);
            if (g !== g + 0)
              throw g;
            Y(1, 0);
          }
        }
        function We(a, b, c, d, e, f, g, h, k, l, n, u) {
          var v = W();
          try {
            P(a)(b, c, d, e, f, g, h, k, l, n, u);
          } catch (m) {
            O(v);
            if (m !== m + 0)
              throw m;
            Y(1, 0);
          }
        }
        function ee(a, b, c, d, e) {
          var f = W();
          try {
            return P(a)(b, c, d, e);
          } catch (g) {
            O(f);
            if (g !== g + 0)
              throw g;
            Y(1, 0);
          }
        }
        function qe(a, b, c, d) {
          var e = W();
          try {
            return P(a)(b, c, d);
          } catch (f) {
            O(e);
            if (f !== f + 0)
              throw f;
            Y(1, 0);
            return 0n;
          }
        }
        function xf(a, b, c, d, e, f, g) {
          var h = W();
          try {
            P(a)(b, c, d, e, f, g);
          } catch (k) {
            O(h);
            if (k !== k + 0)
              throw k;
            Y(1, 0);
          }
        }
        function fe(a, b, c, d, e, f) {
          var g = W();
          try {
            return P(a)(b, c, d, e, f);
          } catch (h) {
            O(g);
            if (h !== h + 0)
              throw h;
            Y(1, 0);
          }
        }
        function Af(a, b, c, d, e) {
          var f = W();
          try {
            P(a)(b, c, d, e);
          } catch (g) {
            O(f);
            if (g !== g + 0)
              throw g;
            Y(1, 0);
          }
        }
        function je(a, b, c, d, e, f) {
          var g = W();
          try {
            return P(a)(b, c, d, e, f);
          } catch (h) {
            O(g);
            if (h !== h + 0)
              throw h;
            Y(1, 0);
          }
        }
        function Hf(a, b, c, d, e, f, g, h, k) {
          var l = W();
          try {
            P(a)(b, c, d, e, f, g, h, k);
          } catch (n) {
            O(l);
            if (n !== n + 0)
              throw n;
            Y(1, 0);
          }
        }
        function Ae(a, b, c, d) {
          var e = W();
          try {
            P(a)(b, c, d);
          } catch (f) {
            O(e);
            if (f !== f + 0)
              throw f;
            Y(1, 0);
          }
        }
        function Pd(a, b, c, d, e, f, g, h) {
          var k = W();
          try {
            return P(a)(b, c, d, e, f, g, h);
          } catch (l) {
            O(k);
            if (l !== l + 0)
              throw l;
            Y(1, 0);
          }
        }
        function Vf(a, b, c, d) {
          var e = W();
          try {
            P(a)(b, c, d);
          } catch (f) {
            O(e);
            if (f !== f + 0)
              throw f;
            Y(1, 0);
          }
        }
        function ud(a, b, c, d, e, f) {
          var g = W();
          try {
            return P(a)(b, c, d, e, f);
          } catch (h) {
            O(g);
            if (h !== h + 0)
              throw h;
            Y(1, 0);
          }
        }
        function Wd(a, b, c, d, e, f) {
          var g = W();
          try {
            return P(a)(b, c, d, e, f);
          } catch (h) {
            O(g);
            if (h !== h + 0)
              throw h;
            Y(1, 0);
          }
        }
        function Id(a, b, c, d, e, f, g, h, k, l, n, u) {
          var v = W();
          try {
            return P(a)(b, c, d, e, f, g, h, k, l, n, u);
          } catch (m) {
            O(v);
            if (m !== m + 0)
              throw m;
            Y(1, 0);
          }
        }
        function Sd(a, b, c, d, e, f, g, h) {
          var k = W();
          try {
            return P(a)(b, c, d, e, f, g, h);
          } catch (l) {
            O(k);
            if (l !== l + 0)
              throw l;
            Y(1, 0);
          }
        }
        function Ld(a, b, c, d, e, f, g, h, k, l, n) {
          var u = W();
          try {
            return P(a)(b, c, d, e, f, g, h, k, l, n);
          } catch (v) {
            O(u);
            if (v !== v + 0)
              throw v;
            Y(1, 0);
          }
        }
        function Xd(a, b, c, d, e, f, g) {
          var h = W();
          try {
            return P(a)(b, c, d, e, f, g);
          } catch (k) {
            O(h);
            if (k !== k + 0)
              throw k;
            Y(1, 0);
          }
        }
        function Kd(a, b, c, d, e, f, g, h, k, l, n, u, v) {
          var m = W();
          try {
            return P(a)(b, c, d, e, f, g, h, k, l, n, u, v);
          } catch (w) {
            O(m);
            if (w !== w + 0)
              throw w;
            Y(1, 0);
          }
        }
        function de(a, b, c, d, e, f, g) {
          var h = W();
          try {
            return P(a)(b, c, d, e, f, g);
          } catch (k) {
            O(h);
            if (k !== k + 0)
              throw k;
            Y(1, 0);
          }
        }
        function ge(a, b, c, d, e, f, g) {
          var h = W();
          try {
            return P(a)(b, c, d, e, f, g);
          } catch (k) {
            O(h);
            if (k !== k + 0)
              throw k;
            Y(1, 0);
          }
        }
        function ce(a, b, c, d) {
          var e = W();
          try {
            return P(a)(b, c, d);
          } catch (f) {
            O(e);
            if (f !== f + 0)
              throw f;
            Y(1, 0);
          }
        }
        function Df(a, b, c, d, e, f, g, h, k, l) {
          var n = W();
          try {
            P(a)(b, c, d, e, f, g, h, k, l);
          } catch (u) {
            O(n);
            if (u !== u + 0)
              throw u;
            Y(1, 0);
          }
        }
        function Mf(a, b, c, d, e, f, g, h, k, l, n, u, v) {
          var m = W();
          try {
            P(a)(b, c, d, e, f, g, h, k, l, n, u, v);
          } catch (w) {
            O(m);
            if (w !== w + 0)
              throw w;
            Y(1, 0);
          }
        }
        function pd(a, b, c) {
          var d = W();
          try {
            return P(a)(b, c);
          } catch (e) {
            O(d);
            if (e !== e + 0)
              throw e;
            Y(1, 0);
          }
        }
        function sd(a, b, c, d) {
          var e = W();
          try {
            return P(a)(b, c, d);
          } catch (f) {
            O(e);
            if (f !== f + 0)
              throw f;
            Y(1, 0);
          }
        }
        function ve(a, b, c, d) {
          var e = W();
          try {
            P(a)(b, c, d);
          } catch (f) {
            O(e);
            if (f !== f + 0)
              throw f;
            Y(1, 0);
          }
        }
        function ld(a, b, c, d) {
          var e = W();
          try {
            return P(a)(b, c, d);
          } catch (f) {
            O(e);
            if (f !== f + 0)
              throw f;
            Y(1, 0);
          }
        }
        function ig(a, b, c, d, e) {
          var f = W();
          try {
            P(a)(b, c, d, e);
          } catch (g) {
            O(f);
            if (g !== g + 0)
              throw g;
            Y(1, 0);
          }
        }
        function pe(a, b, c, d, e) {
          var f = W();
          try {
            return P(a)(b, c, d, e);
          } catch (g) {
            O(f);
            if (g !== g + 0)
              throw g;
            Y(1, 0);
            return 0n;
          }
        }
        function gd(a, b, c, d, e, f) {
          var g = W();
          try {
            return P(a)(b, c, d, e, f);
          } catch (h) {
            O(g);
            if (h !== h + 0)
              throw h;
            Y(1, 0);
          }
        }
        function eg(a, b, c, d, e, f, g, h, k, l, n, u, v) {
          var m = W();
          try {
            P(a)(b, c, d, e, f, g, h, k, l, n, u, v);
          } catch (w) {
            O(m);
            if (w !== w + 0)
              throw w;
            Y(1, 0);
          }
        }
        function Sf(a, b, c, d, e, f, g, h, k, l) {
          var n = W();
          try {
            P(a)(b, c, d, e, f, g, h, k, l);
          } catch (u) {
            O(n);
            if (u !== u + 0)
              throw u;
            Y(1, 0);
          }
        }
        function fd(a, b, c, d) {
          var e = W();
          try {
            return P(a)(b, c, d);
          } catch (f) {
            O(e);
            if (f !== f + 0)
              throw f;
            Y(1, 0);
          }
        }
        function lf(a, b, c, d, e, f, g, h, k, l, n, u) {
          var v = W();
          try {
            P(a)(b, c, d, e, f, g, h, k, l, n, u);
          } catch (m) {
            O(v);
            if (m !== m + 0)
              throw m;
            Y(1, 0);
          }
        }
        function Qd(a, b, c, d, e) {
          var f = W();
          try {
            return P(a)(b, c, d, e);
          } catch (g) {
            O(f);
            if (g !== g + 0)
              throw g;
            Y(1, 0);
          }
        }
        function ke(a) {
          var b = W();
          try {
            return P(a)();
          } catch (c) {
            O(b);
            if (c !== c + 0)
              throw c;
            Y(1, 0);
            return 0n;
          }
        }
        function Md(a, b, c, d, e, f) {
          var g = W();
          try {
            return P(a)(b, c, d, e, f);
          } catch (h) {
            O(g);
            if (h !== h + 0)
              throw h;
            Y(1, 0);
          }
        }
        function wd(a, b, c, d, e, f) {
          var g = W();
          try {
            return P(a)(b, c, d, e, f);
          } catch (h) {
            O(g);
            if (h !== h + 0)
              throw h;
            Y(1, 0);
          }
        }
        function ff(a, b, c, d, e, f, g, h, k, l, n, u, v, m, w, y) {
          var z = W();
          try {
            P(a)(b, c, d, e, f, g, h, k, l, n, u, v, m, w, y);
          } catch (D) {
            O(z);
            if (D !== D + 0)
              throw D;
            Y(1, 0);
          }
        }
        function kd(a, b, c) {
          var d = W();
          try {
            return P(a)(b, c);
          } catch (e) {
            O(d);
            if (e !== e + 0)
              throw e;
            Y(1, 0);
          }
        }
        function ed(a, b, c) {
          var d = W();
          try {
            return P(a)(b, c);
          } catch (e) {
            O(d);
            if (e !== e + 0)
              throw e;
            Y(1, 0);
          }
        }
        function sg() {
          var a = Z;
          a = Object.assign({}, a);
          var b = (d) => () => d() >>> 0, c = (d) => (e) => d(e) >>> 0;
          a.__errno_location = b(a.__errno_location);
          a.le = b(a.le);
          a.me = c(a.me);
          a.pe = c(a.pe);
          a.Be = b(a.Be);
          a.De = c(a.De);
          return a;
        }
        C.keepRuntimeAlive = Ma;
        C.wasmMemory = q;
        C.stackAlloc = lc;
        C.stackSave = W;
        C.stackRestore = O;
        C.UTF8ToString = bb;
        C.stringToUTF8 = Cb;
        C.lengthBytesUTF8 = Ab;
        C.ExitStatus = Xa;
        C.PThread = M;
        var tg;
        Pa = function ug() {
          tg || zg();
          tg || (Pa = ug);
        };
        function zg() {
          0 < Na || (G ? (la(C), G || kb(Ja), startWorker(C)) : (kb(Ia), 0 < Na || tg || (tg = true, C.calledRun = true, Ca || (G || kb(Ja), la(C), G || kb(Ka)))));
        }
        zg();
        return moduleArg.ready;
      };
    })();
    if (typeof exports === "object" && typeof module === "object")
      module.exports = ortWasmThreaded;
    else if (typeof define === "function" && define["amd"])
      define([], () => ortWasmThreaded);
  }
});

// web/lib/wasm/binding/ort-wasm-threaded.worker.js
var require_ort_wasm_threaded_worker = __commonJS({
  "web/lib/wasm/binding/ort-wasm-threaded.worker.js"(exports, module) {
    module.exports = '"use strict";var Module={};var ENVIRONMENT_IS_NODE=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string";if(ENVIRONMENT_IS_NODE){var nodeWorkerThreads=require("worker_threads");var parentPort=nodeWorkerThreads.parentPort;parentPort.on("message",data=>onmessage({data:data}));var fs=require("fs");Object.assign(global,{self:global,require:require,Module:Module,location:{href:__filename},Worker:nodeWorkerThreads.Worker,importScripts:f=>(0,eval)(fs.readFileSync(f,"utf8")+"//# sourceURL="+f),postMessage:msg=>parentPort.postMessage(msg),performance:global.performance||{now:Date.now}})}var initializedJS=false;function threadPrintErr(){var text=Array.prototype.slice.call(arguments).join(" ");if(ENVIRONMENT_IS_NODE){fs.writeSync(2,text+"\\n");return}console.error(text)}function threadAlert(){var text=Array.prototype.slice.call(arguments).join(" ");postMessage({cmd:"alert",text:text,threadId:Module["_pthread_self"]()})}var err=threadPrintErr;self.alert=threadAlert;Module["instantiateWasm"]=(info,receiveInstance)=>{var module=Module["wasmModule"];Module["wasmModule"]=null;var instance=new WebAssembly.Instance(module,info);return receiveInstance(instance)};self.onunhandledrejection=e=>{throw e.reason||e};function handleMessage(e){try{if(e.data.cmd==="load"){let messageQueue=[];self.onmessage=e=>messageQueue.push(e);self.startWorker=instance=>{Module=instance;postMessage({"cmd":"loaded"});for(let msg of messageQueue){handleMessage(msg)}self.onmessage=handleMessage};Module["wasmModule"]=e.data.wasmModule;for(const handler of e.data.handlers){Module[handler]=(...args)=>{postMessage({cmd:"callHandler",handler:handler,args:args})}}Module["wasmMemory"]=e.data.wasmMemory;Module["buffer"]=Module["wasmMemory"].buffer;Module["ENVIRONMENT_IS_PTHREAD"]=true;if(typeof e.data.urlOrBlob=="string"){importScripts(e.data.urlOrBlob)}else{var objectUrl=URL.createObjectURL(e.data.urlOrBlob);importScripts(objectUrl);URL.revokeObjectURL(objectUrl)}ortWasmThreaded(Module)}else if(e.data.cmd==="run"){Module["__emscripten_thread_init"](e.data.pthread_ptr,/*is_main=*/0,/*is_runtime=*/0,/*can_block=*/1);Module["__emscripten_thread_mailbox_await"](e.data.pthread_ptr);Module["establishStackSpace"]();Module["PThread"].receiveObjectTransfer(e.data);Module["PThread"].threadInitTLS();if(!initializedJS){Module["__embind_initialize_bindings"]();initializedJS=true}try{Module["invokeEntryPoint"](e.data.start_routine,e.data.arg)}catch(ex){if(ex!="unwind"){throw ex}}}else if(e.data.cmd==="cancel"){if(Module["_pthread_self"]()){Module["__emscripten_thread_exit"](-1)}}else if(e.data.target==="setimmediate"){}else if(e.data.cmd==="checkMailbox"){if(initializedJS){Module["checkMailbox"]()}}else if(e.data.cmd){err(`worker.js received unknown command ${e.data.cmd}`);err(e.data)}}catch(ex){if(Module["__emscripten_thread_crashed"]){Module["__emscripten_thread_crashed"]()}throw ex}}self.onmessage=handleMessage;\n';
  }
});

// web/lib/wasm/wasm-factory.ts
var ortWasmFactory, ortWasmFactoryThreaded, wasm, initialized, initializing, aborted, isMultiThreadSupported, isSimdSupported, getWasmFileName, initializeWebAssembly, getInstance;
var init_wasm_factory = __esm({
  "web/lib/wasm/wasm-factory.ts"() {
    "use strict";
    init_node_path();
    if (true) {
      ortWasmFactory = require_ort_training_wasm_simd();
    } else {
      ortWasmFactory = true ? null : null;
    }
    ortWasmFactoryThreaded = true ? true ? require_ort_wasm_threaded() : null : ortWasmFactory;
    initialized = false;
    initializing = false;
    aborted = false;
    isMultiThreadSupported = () => {
      try {
        if (typeof SharedArrayBuffer === "undefined") {
          return false;
        }
        if (typeof MessageChannel !== "undefined") {
          new MessageChannel().port1.postMessage(new SharedArrayBuffer(1));
        }
        return WebAssembly.validate(new Uint8Array([
          0,
          97,
          115,
          109,
          1,
          0,
          0,
          0,
          1,
          4,
          1,
          96,
          0,
          0,
          3,
          2,
          1,
          0,
          5,
          4,
          1,
          3,
          1,
          1,
          10,
          11,
          1,
          9,
          0,
          65,
          0,
          254,
          16,
          2,
          0,
          26,
          11
        ]));
      } catch (e) {
        return false;
      }
    };
    isSimdSupported = () => {
      try {
        return WebAssembly.validate(new Uint8Array([
          0,
          97,
          115,
          109,
          1,
          0,
          0,
          0,
          1,
          4,
          1,
          96,
          0,
          0,
          3,
          2,
          1,
          0,
          10,
          30,
          1,
          28,
          0,
          65,
          0,
          253,
          15,
          253,
          12,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          253,
          186,
          1,
          26,
          11
        ]));
      } catch (e) {
        return false;
      }
    };
    getWasmFileName = (useSimd, useThreads) => {
      if (useSimd) {
        if (true) {
          return "ort-training-wasm-simd.wasm";
        }
        return useThreads ? "ort-wasm-simd-threaded.wasm" : "ort-wasm-simd.wasm";
      } else {
        return useThreads ? "ort-wasm-threaded.wasm" : "ort-wasm.wasm";
      }
    };
    initializeWebAssembly = async (flags) => {
      if (initialized) {
        return Promise.resolve();
      }
      if (initializing) {
        throw new Error("multiple calls to 'initializeWebAssembly()' detected.");
      }
      if (aborted) {
        throw new Error("previous call to 'initializeWebAssembly()' failed.");
      }
      initializing = true;
      const timeout = flags.initTimeout;
      const numThreads = flags.numThreads;
      const simd = flags.simd;
      const useThreads = numThreads > 1 && isMultiThreadSupported();
      const useSimd = simd && isSimdSupported();
      const wasmPaths = flags.wasmPaths;
      const wasmPrefixOverride = typeof wasmPaths === "string" ? wasmPaths : void 0;
      const wasmFileName = getWasmFileName(useSimd, useThreads);
      const wasmPathOverride = typeof wasmPaths === "object" ? wasmPaths[wasmFileName] : void 0;
      let isTimeout = false;
      const tasks = [];
      if (timeout > 0) {
        tasks.push(new Promise((resolve) => {
          setTimeout(() => {
            isTimeout = true;
            resolve();
          }, timeout);
        }));
      }
      tasks.push(new Promise((resolve, reject) => {
        const factory = useThreads ? ortWasmFactoryThreaded : ortWasmFactory;
        const config = {
          locateFile: (fileName, scriptDirectory) => {
            if (useThreads && fileName.endsWith(".worker.js") && typeof Blob !== "undefined") {
              return URL.createObjectURL(new Blob(
                [
                  // This require() function is handled by esbuild plugin to load file content as string.
                  // eslint-disable-next-line @typescript-eslint/no-require-imports
                  require_ort_wasm_threaded_worker()
                ],
                { type: "text/javascript" }
              ));
            }
            if (fileName.endsWith(".wasm")) {
              if (wasmPathOverride) {
                return wasmPathOverride;
              }
              const prefix = wasmPrefixOverride ?? scriptDirectory;
              if (false) {
                if (wasmFileName === "ort-wasm-simd.wasm") {
                  return prefix + "ort-wasm-simd.jsep.wasm";
                } else if (wasmFileName === "ort-wasm-simd-threaded.wasm") {
                  return prefix + "ort-wasm-simd-threaded.jsep.wasm";
                }
              }
              return prefix + wasmFileName;
            }
            return scriptDirectory + fileName;
          }
        };
        if (useThreads) {
          if (typeof Blob === "undefined") {
            config.mainScriptUrlOrBlob = join(__dirname, "ort-wasm-threaded.js");
          } else {
            const scriptSourceCode = `var ortWasmThreaded=${factory.toString()};`;
            config.mainScriptUrlOrBlob = new Blob([scriptSourceCode], { type: "text/javascript" });
          }
        }
        factory(config).then(
          // wasm module initialized successfully
          (module) => {
            initializing = false;
            initialized = true;
            wasm = module;
            resolve();
          },
          // wasm module failed to initialize
          (what) => {
            initializing = false;
            aborted = true;
            reject(what);
          }
        );
      }));
      await Promise.race(tasks);
      if (isTimeout) {
        throw new Error(`WebAssembly backend initializing failed due to timeout: ${timeout}ms`);
      }
    };
    getInstance = () => {
      if (initialized && wasm) {
        return wasm;
      }
      throw new Error("WebAssembly is not initialized yet.");
    };
  }
});

// web/lib/wasm/wasm-utils.ts
var allocWasmString, iterateExtraOptions, checkLastError;
var init_wasm_utils = __esm({
  "web/lib/wasm/wasm-utils.ts"() {
    "use strict";
    init_wasm_factory();
    allocWasmString = (data, allocs) => {
      const wasm2 = getInstance();
      const dataLength = wasm2.lengthBytesUTF8(data) + 1;
      const dataOffset = wasm2._malloc(dataLength);
      wasm2.stringToUTF8(data, dataOffset, dataLength);
      allocs.push(dataOffset);
      return dataOffset;
    };
    iterateExtraOptions = (options, prefix, seen, handler) => {
      if (typeof options == "object" && options !== null) {
        if (seen.has(options)) {
          throw new Error("Circular reference in options");
        } else {
          seen.add(options);
        }
      }
      Object.entries(options).forEach(([key, value]) => {
        const name = prefix ? prefix + key : key;
        if (typeof value === "object") {
          iterateExtraOptions(value, name + ".", seen, handler);
        } else if (typeof value === "string" || typeof value === "number") {
          handler(name, value.toString());
        } else if (typeof value === "boolean") {
          handler(name, value ? "1" : "0");
        } else {
          throw new Error(`Can't handle extra config type: ${typeof value}`);
        }
      });
    };
    checkLastError = (message) => {
      const wasm2 = getInstance();
      const stack = wasm2.stackSave();
      try {
        const paramsOffset = wasm2.stackAlloc(8);
        wasm2._OrtGetLastError(paramsOffset, paramsOffset + 4);
        const errorCode = wasm2.HEAP32[paramsOffset / 4];
        const errorMessagePointer = wasm2.HEAPU32[paramsOffset / 4 + 1];
        const errorMessage = errorMessagePointer ? wasm2.UTF8ToString(errorMessagePointer) : "";
        throw new Error(`${message} ERROR_CODE: ${errorCode}, ERROR_MESSAGE: ${errorMessage}`);
      } finally {
        wasm2.stackRestore(stack);
      }
    };
  }
});

// web/lib/wasm/run-options.ts
var setRunOptions;
var init_run_options = __esm({
  "web/lib/wasm/run-options.ts"() {
    "use strict";
    init_wasm_factory();
    init_wasm_utils();
    setRunOptions = (options) => {
      const wasm2 = getInstance();
      let runOptionsHandle = 0;
      const allocs = [];
      const runOptions = options || {};
      try {
        if (options?.logSeverityLevel === void 0) {
          runOptions.logSeverityLevel = 2;
        } else if (typeof options.logSeverityLevel !== "number" || !Number.isInteger(options.logSeverityLevel) || options.logSeverityLevel < 0 || options.logSeverityLevel > 4) {
          throw new Error(`log serverity level is not valid: ${options.logSeverityLevel}`);
        }
        if (options?.logVerbosityLevel === void 0) {
          runOptions.logVerbosityLevel = 0;
        } else if (typeof options.logVerbosityLevel !== "number" || !Number.isInteger(options.logVerbosityLevel)) {
          throw new Error(`log verbosity level is not valid: ${options.logVerbosityLevel}`);
        }
        if (options?.terminate === void 0) {
          runOptions.terminate = false;
        }
        let tagDataOffset = 0;
        if (options?.tag !== void 0) {
          tagDataOffset = allocWasmString(options.tag, allocs);
        }
        runOptionsHandle = wasm2._OrtCreateRunOptions(
          runOptions.logSeverityLevel,
          runOptions.logVerbosityLevel,
          !!runOptions.terminate,
          tagDataOffset
        );
        if (runOptionsHandle === 0) {
          checkLastError("Can't create run options.");
        }
        if (options?.extra !== void 0) {
          iterateExtraOptions(options.extra, "", /* @__PURE__ */ new WeakSet(), (key, value) => {
            const keyDataOffset = allocWasmString(key, allocs);
            const valueDataOffset = allocWasmString(value, allocs);
            if (wasm2._OrtAddRunConfigEntry(runOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {
              checkLastError(`Can't set a run config entry: ${key} - ${value}.`);
            }
          });
        }
        return [runOptionsHandle, allocs];
      } catch (e) {
        if (runOptionsHandle !== 0) {
          wasm2._OrtReleaseRunOptions(runOptionsHandle);
        }
        allocs.forEach((alloc) => wasm2._free(alloc));
        throw e;
      }
    };
  }
});

// web/lib/wasm/session-options.ts
var getGraphOptimzationLevel, getExecutionMode, appendDefaultOptions, setExecutionProviders, setSessionOptions;
var init_session_options = __esm({
  "web/lib/wasm/session-options.ts"() {
    "use strict";
    init_wasm_factory();
    init_wasm_utils();
    getGraphOptimzationLevel = (graphOptimizationLevel) => {
      switch (graphOptimizationLevel) {
        case "disabled":
          return 0;
        case "basic":
          return 1;
        case "extended":
          return 2;
        case "all":
          return 99;
        default:
          throw new Error(`unsupported graph optimization level: ${graphOptimizationLevel}`);
      }
    };
    getExecutionMode = (executionMode) => {
      switch (executionMode) {
        case "sequential":
          return 0;
        case "parallel":
          return 1;
        default:
          throw new Error(`unsupported execution mode: ${executionMode}`);
      }
    };
    appendDefaultOptions = (options) => {
      if (!options.extra) {
        options.extra = {};
      }
      if (!options.extra.session) {
        options.extra.session = {};
      }
      const session = options.extra.session;
      if (!session.use_ort_model_bytes_directly) {
        session.use_ort_model_bytes_directly = "1";
      }
      if (options.executionProviders && options.executionProviders.some((ep) => (typeof ep === "string" ? ep : ep.name) === "webgpu")) {
        options.enableMemPattern = false;
      }
    };
    setExecutionProviders = (sessionOptionsHandle, executionProviders, allocs) => {
      for (const ep of executionProviders) {
        let epName = typeof ep === "string" ? ep : ep.name;
        switch (epName) {
          case "xnnpack":
            epName = "XNNPACK";
            break;
          case "webnn":
            epName = "WEBNN";
            if (typeof ep !== "string") {
              const webnnOptions = ep;
              if (webnnOptions?.deviceType) {
                const keyDataOffset = allocWasmString("deviceType", allocs);
                const valueDataOffset = allocWasmString(webnnOptions.deviceType, allocs);
                if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {
                  checkLastError(`Can't set a session config entry: 'deviceType' - ${webnnOptions.deviceType}.`);
                }
              }
              if (webnnOptions?.numThreads) {
                let numThreads = webnnOptions.numThreads;
                if (typeof numThreads != "number" || !Number.isInteger(numThreads) || numThreads < 0) {
                  numThreads = 0;
                }
                const keyDataOffset = allocWasmString("numThreads", allocs);
                const valueDataOffset = allocWasmString(numThreads.toString(), allocs);
                if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {
                  checkLastError(`Can't set a session config entry: 'numThreads' - ${webnnOptions.numThreads}.`);
                }
              }
              if (webnnOptions?.powerPreference) {
                const keyDataOffset = allocWasmString("powerPreference", allocs);
                const valueDataOffset = allocWasmString(webnnOptions.powerPreference, allocs);
                if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {
                  checkLastError(
                    `Can't set a session config entry: 'powerPreference' - ${webnnOptions.powerPreference}.`
                  );
                }
              }
            }
            break;
          case "webgpu":
            epName = "JS";
            if (typeof ep !== "string") {
              const webgpuOptions = ep;
              if (webgpuOptions?.preferredLayout) {
                if (webgpuOptions.preferredLayout !== "NCHW" && webgpuOptions.preferredLayout !== "NHWC") {
                  throw new Error(`preferredLayout must be either 'NCHW' or 'NHWC': ${webgpuOptions.preferredLayout}`);
                }
                const keyDataOffset = allocWasmString("preferredLayout", allocs);
                const valueDataOffset = allocWasmString(webgpuOptions.preferredLayout, allocs);
                if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {
                  checkLastError(
                    `Can't set a session config entry: 'preferredLayout' - ${webgpuOptions.preferredLayout}.`
                  );
                }
              }
            }
            break;
          case "wasm":
          case "cpu":
            continue;
          default:
            throw new Error(`not supported execution provider: ${epName}`);
        }
        const epNameDataOffset = allocWasmString(epName, allocs);
        if (getInstance()._OrtAppendExecutionProvider(sessionOptionsHandle, epNameDataOffset) !== 0) {
          checkLastError(`Can't append execution provider: ${epName}.`);
        }
      }
    };
    setSessionOptions = (options) => {
      const wasm2 = getInstance();
      let sessionOptionsHandle = 0;
      const allocs = [];
      const sessionOptions = options || {};
      appendDefaultOptions(sessionOptions);
      try {
        const graphOptimizationLevel = getGraphOptimzationLevel(sessionOptions.graphOptimizationLevel ?? "all");
        const executionMode = getExecutionMode(sessionOptions.executionMode ?? "sequential");
        const logIdDataOffset = typeof sessionOptions.logId === "string" ? allocWasmString(sessionOptions.logId, allocs) : 0;
        const logSeverityLevel = sessionOptions.logSeverityLevel ?? 2;
        if (!Number.isInteger(logSeverityLevel) || logSeverityLevel < 0 || logSeverityLevel > 4) {
          throw new Error(`log serverity level is not valid: ${logSeverityLevel}`);
        }
        const logVerbosityLevel = sessionOptions.logVerbosityLevel ?? 0;
        if (!Number.isInteger(logVerbosityLevel) || logVerbosityLevel < 0 || logVerbosityLevel > 4) {
          throw new Error(`log verbosity level is not valid: ${logVerbosityLevel}`);
        }
        const optimizedModelFilePathOffset = typeof sessionOptions.optimizedModelFilePath === "string" ? allocWasmString(sessionOptions.optimizedModelFilePath, allocs) : 0;
        sessionOptionsHandle = wasm2._OrtCreateSessionOptions(
          graphOptimizationLevel,
          !!sessionOptions.enableCpuMemArena,
          !!sessionOptions.enableMemPattern,
          executionMode,
          !!sessionOptions.enableProfiling,
          0,
          logIdDataOffset,
          logSeverityLevel,
          logVerbosityLevel,
          optimizedModelFilePathOffset
        );
        if (sessionOptionsHandle === 0) {
          checkLastError("Can't create session options.");
        }
        if (sessionOptions.executionProviders) {
          setExecutionProviders(sessionOptionsHandle, sessionOptions.executionProviders, allocs);
        }
        if (sessionOptions.freeDimensionOverrides) {
          for (const [name, value] of Object.entries(sessionOptions.freeDimensionOverrides)) {
            if (typeof name !== "string") {
              throw new Error(`free dimension override name must be a string: ${name}`);
            }
            if (typeof value !== "number" || !Number.isInteger(value) || value < 0) {
              throw new Error(`free dimension override value must be a non-negative integer: ${value}`);
            }
            const nameOffset = allocWasmString(name, allocs);
            if (wasm2._OrtAddFreeDimensionOverride(sessionOptionsHandle, nameOffset, value) !== 0) {
              checkLastError(`Can't set a free dimension override: ${name} - ${value}.`);
            }
          }
        }
        if (sessionOptions.extra !== void 0) {
          iterateExtraOptions(sessionOptions.extra, "", /* @__PURE__ */ new WeakSet(), (key, value) => {
            const keyDataOffset = allocWasmString(key, allocs);
            const valueDataOffset = allocWasmString(value, allocs);
            if (wasm2._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {
              checkLastError(`Can't set a session config entry: ${key} - ${value}.`);
            }
          });
        }
        return [sessionOptionsHandle, allocs];
      } catch (e) {
        if (sessionOptionsHandle !== 0) {
          wasm2._OrtReleaseSessionOptions(sessionOptionsHandle);
        }
        allocs.forEach((alloc) => wasm2._free(alloc));
        throw e;
      }
    };
  }
});

// web/lib/wasm/wasm-common.ts
var tensorDataTypeStringToEnum, tensorDataTypeEnumToString, getTensorElementSize, tensorTypeToTypedArrayConstructor, logLevelStringToEnum, isGpuBufferSupportedType, dataLocationStringToEnum;
var init_wasm_common = __esm({
  "web/lib/wasm/wasm-common.ts"() {
    "use strict";
    tensorDataTypeStringToEnum = (type) => {
      switch (type) {
        case "int8":
          return 3 /* int8 */;
        case "uint8":
          return 2 /* uint8 */;
        case "bool":
          return 9 /* bool */;
        case "int16":
          return 5 /* int16 */;
        case "uint16":
          return 4 /* uint16 */;
        case "int32":
          return 6 /* int32 */;
        case "uint32":
          return 12 /* uint32 */;
        case "float16":
          return 10 /* float16 */;
        case "float32":
          return 1 /* float */;
        case "float64":
          return 11 /* double */;
        case "string":
          return 8 /* string */;
        case "int64":
          return 7 /* int64 */;
        case "uint64":
          return 13 /* uint64 */;
        default:
          throw new Error(`unsupported data type: ${type}`);
      }
    };
    tensorDataTypeEnumToString = (typeProto) => {
      switch (typeProto) {
        case 3 /* int8 */:
          return "int8";
        case 2 /* uint8 */:
          return "uint8";
        case 9 /* bool */:
          return "bool";
        case 5 /* int16 */:
          return "int16";
        case 4 /* uint16 */:
          return "uint16";
        case 6 /* int32 */:
          return "int32";
        case 12 /* uint32 */:
          return "uint32";
        case 10 /* float16 */:
          return "float16";
        case 1 /* float */:
          return "float32";
        case 11 /* double */:
          return "float64";
        case 8 /* string */:
          return "string";
        case 7 /* int64 */:
          return "int64";
        case 13 /* uint64 */:
          return "uint64";
        default:
          throw new Error(`unsupported data type: ${typeProto}`);
      }
    };
    getTensorElementSize = (dateType) => [void 0, 4, 1, 1, 2, 2, 4, 8, void 0, 1, 2, 8, 4, 8, void 0, void 0, void 0][dateType];
    tensorTypeToTypedArrayConstructor = (type) => {
      switch (type) {
        case "float16":
          return Uint16Array;
        case "float32":
          return Float32Array;
        case "uint8":
          return Uint8Array;
        case "int8":
          return Int8Array;
        case "uint16":
          return Uint16Array;
        case "int16":
          return Int16Array;
        case "int32":
          return Int32Array;
        case "bool":
          return Uint8Array;
        case "float64":
          return Float64Array;
        case "uint32":
          return Uint32Array;
        case "int64":
          return BigInt64Array;
        case "uint64":
          return BigUint64Array;
        default:
          throw new Error(`unsupported type: ${type}`);
      }
    };
    logLevelStringToEnum = (logLevel) => {
      switch (logLevel) {
        case "verbose":
          return 0;
        case "info":
          return 1;
        case "warning":
          return 2;
        case "error":
          return 3;
        case "fatal":
          return 4;
        default:
          throw new Error(`unsupported logging level: ${logLevel}`);
      }
    };
    isGpuBufferSupportedType = (type) => type === "float32" || type === "int32" || type === "int64" || type === "bool" || type === "float16" || type === "uint32";
    dataLocationStringToEnum = (location) => {
      switch (location) {
        case "none":
          return 0;
        case "cpu":
          return 1;
        case "cpu-pinned":
          return 2;
        case "texture":
          return 3;
        case "gpu-buffer":
          return 4;
        default:
          throw new Error(`unsupported data location: ${location}`);
      }
    };
  }
});

// web/lib/wasm/wasm-core-impl.ts
var getSessionInputOutputCount, initOrt, initRuntime, activeSessions, createSessionAllocate, createSessionFinalize, createSession, releaseSession, prepareInputOutputTensor, run, endProfiling, extractTransferableBuffers;
var init_wasm_core_impl = __esm({
  "web/lib/wasm/wasm-core-impl.ts"() {
    "use strict";
    init_run_options();
    init_session_options();
    init_wasm_common();
    init_wasm_factory();
    init_wasm_utils();
    getSessionInputOutputCount = (sessionHandle) => {
      const wasm2 = getInstance();
      const stack = wasm2.stackSave();
      try {
        const dataOffset = wasm2.stackAlloc(8);
        const errorCode = wasm2._OrtGetInputOutputCount(sessionHandle, dataOffset, dataOffset + 4);
        if (errorCode !== 0) {
          checkLastError("Can't get session input/output count.");
        }
        return [wasm2.HEAP32[dataOffset / 4], wasm2.HEAP32[dataOffset / 4 + 1]];
      } finally {
        wasm2.stackRestore(stack);
      }
    };
    initOrt = (numThreads, loggingLevel) => {
      const errorCode = getInstance()._OrtInit(numThreads, loggingLevel);
      if (errorCode !== 0) {
        checkLastError("Can't initialize onnxruntime.");
      }
    };
    initRuntime = async (env3) => {
      initOrt(env3.wasm.numThreads, logLevelStringToEnum(env3.logLevel));
      if (false) {
        const initJsep = null.init;
        await initJsep(getInstance(), env3);
      }
    };
    activeSessions = /* @__PURE__ */ new Map();
    createSessionAllocate = (model) => {
      const wasm2 = getInstance();
      const modelDataOffset = wasm2._malloc(model.byteLength);
      if (modelDataOffset === 0) {
        throw new Error(`Can't create a session. failed to allocate a buffer of size ${model.byteLength}.`);
      }
      wasm2.HEAPU8.set(model, modelDataOffset);
      return [modelDataOffset, model.byteLength];
    };
    createSessionFinalize = (modelData, options) => {
      const wasm2 = getInstance();
      let sessionHandle = 0;
      let sessionOptionsHandle = 0;
      let ioBindingHandle = 0;
      let allocs = [];
      const inputNamesUTF8Encoded = [];
      const outputNamesUTF8Encoded = [];
      try {
        [sessionOptionsHandle, allocs] = setSessionOptions(options);
        sessionHandle = wasm2._OrtCreateSession(modelData[0], modelData[1], sessionOptionsHandle);
        if (sessionHandle === 0) {
          checkLastError("Can't create a session.");
        }
        const [inputCount, outputCount] = getSessionInputOutputCount(sessionHandle);
        const inputNames = [];
        const outputNames = [];
        const outputPreferredLocations = [];
        for (let i = 0; i < inputCount; i++) {
          const name = wasm2._OrtGetInputName(sessionHandle, i);
          if (name === 0) {
            checkLastError("Can't get an input name.");
          }
          inputNamesUTF8Encoded.push(name);
          inputNames.push(wasm2.UTF8ToString(name));
        }
        for (let i = 0; i < outputCount; i++) {
          const name = wasm2._OrtGetOutputName(sessionHandle, i);
          if (name === 0) {
            checkLastError("Can't get an output name.");
          }
          outputNamesUTF8Encoded.push(name);
          const nameString = wasm2.UTF8ToString(name);
          outputNames.push(nameString);
          if (false) {
            const location = typeof options?.preferredOutputLocation === "string" ? options.preferredOutputLocation : options?.preferredOutputLocation?.[nameString] ?? "cpu";
            if (location !== "cpu" && location !== "cpu-pinned" && location !== "gpu-buffer") {
              throw new Error(`Not supported preferred output location: ${location}.`);
            }
            outputPreferredLocations.push(location);
          }
        }
        let bindingState = null;
        if (false) {
          ioBindingHandle = wasm2._OrtCreateBinding(sessionHandle);
          if (ioBindingHandle === 0) {
            checkLastError("Can't create IO binding.");
          }
          bindingState = {
            handle: ioBindingHandle,
            outputPreferredLocations,
            outputPreferredLocationsEncoded: outputPreferredLocations.map((l) => dataLocationStringToEnum(l))
          };
        }
        activeSessions.set(sessionHandle, [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded, bindingState]);
        return [sessionHandle, inputNames, outputNames];
      } catch (e) {
        inputNamesUTF8Encoded.forEach((buf) => wasm2._OrtFree(buf));
        outputNamesUTF8Encoded.forEach((buf) => wasm2._OrtFree(buf));
        if (ioBindingHandle !== 0) {
          wasm2._OrtReleaseBinding(ioBindingHandle);
        }
        if (sessionHandle !== 0) {
          wasm2._OrtReleaseSession(sessionHandle);
        }
        throw e;
      } finally {
        wasm2._free(modelData[0]);
        if (sessionOptionsHandle !== 0) {
          wasm2._OrtReleaseSessionOptions(sessionOptionsHandle);
        }
        allocs.forEach((alloc) => wasm2._free(alloc));
      }
    };
    createSession = (model, options) => {
      const modelData = createSessionAllocate(model);
      return createSessionFinalize(modelData, options);
    };
    releaseSession = (sessionId) => {
      const wasm2 = getInstance();
      const session = activeSessions.get(sessionId);
      if (!session) {
        throw new Error(`cannot release session. invalid session id: ${sessionId}`);
      }
      const [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded, ioBindingState] = session;
      if (ioBindingState) {
        wasm2._OrtReleaseBinding(ioBindingState.handle);
      }
      wasm2.jsepUnregisterBuffers?.(sessionId);
      inputNamesUTF8Encoded.forEach((buf) => wasm2._OrtFree(buf));
      outputNamesUTF8Encoded.forEach((buf) => wasm2._OrtFree(buf));
      wasm2._OrtReleaseSession(sessionHandle);
      activeSessions.delete(sessionId);
    };
    prepareInputOutputTensor = (tensor, tensorHandles, allocs, sessionId, index) => {
      if (!tensor) {
        tensorHandles.push(0);
        return;
      }
      const wasm2 = getInstance();
      const dataType = tensor[0];
      const dims = tensor[1];
      const location = tensor[3];
      let rawData;
      let dataByteLength;
      if (dataType === "string" && location === "gpu-buffer") {
        throw new Error("String tensor is not supported on GPU.");
      }
      if (location === "gpu-buffer") {
        const gpuBuffer = tensor[2].gpuBuffer;
        const elementSizeInBytes = getTensorElementSize(tensorDataTypeStringToEnum(dataType));
        dataByteLength = dims.reduce((a, b) => a * b, 1) * elementSizeInBytes;
        rawData = wasm2.jsepRegisterBuffer(sessionId, index, gpuBuffer, dataByteLength);
      } else {
        const data = tensor[2];
        if (Array.isArray(data)) {
          dataByteLength = 4 * data.length;
          rawData = wasm2._malloc(dataByteLength);
          allocs.push(rawData);
          let dataIndex = rawData / 4;
          for (let i = 0; i < data.length; i++) {
            if (typeof data[i] !== "string") {
              throw new TypeError(`tensor data at index ${i} is not a string`);
            }
            wasm2.HEAPU32[dataIndex++] = allocWasmString(data[i], allocs);
          }
        } else {
          dataByteLength = data.byteLength;
          rawData = wasm2._malloc(dataByteLength);
          allocs.push(rawData);
          wasm2.HEAPU8.set(new Uint8Array(data.buffer, data.byteOffset, dataByteLength), rawData);
        }
      }
      const stack = wasm2.stackSave();
      const dimsOffset = wasm2.stackAlloc(4 * dims.length);
      try {
        let dimIndex = dimsOffset / 4;
        dims.forEach((d) => wasm2.HEAP32[dimIndex++] = d);
        const tensor2 = wasm2._OrtCreateTensor(
          tensorDataTypeStringToEnum(dataType),
          rawData,
          dataByteLength,
          dimsOffset,
          dims.length,
          dataLocationStringToEnum(location)
        );
        if (tensor2 === 0) {
          checkLastError(`Can't create tensor for input/output. session=${sessionId}, index=${index}.`);
        }
        tensorHandles.push(tensor2);
      } finally {
        wasm2.stackRestore(stack);
      }
    };
    run = async (sessionId, inputIndices, inputTensors, outputIndices, outputTensors, options) => {
      const wasm2 = getInstance();
      const session = activeSessions.get(sessionId);
      if (!session) {
        throw new Error(`cannot run inference. invalid session id: ${sessionId}`);
      }
      const [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded, ioBindingState] = session;
      const inputCount = inputIndices.length;
      const outputCount = outputIndices.length;
      let runOptionsHandle = 0;
      let runOptionsAllocs = [];
      const inputTensorHandles = [];
      const outputTensorHandles = [];
      const inputOutputAllocs = [];
      const beforeRunStack = wasm2.stackSave();
      const inputValuesOffset = wasm2.stackAlloc(inputCount * 4);
      const inputNamesOffset = wasm2.stackAlloc(inputCount * 4);
      const outputValuesOffset = wasm2.stackAlloc(outputCount * 4);
      const outputNamesOffset = wasm2.stackAlloc(outputCount * 4);
      try {
        [runOptionsHandle, runOptionsAllocs] = setRunOptions(options);
        for (let i = 0; i < inputCount; i++) {
          prepareInputOutputTensor(inputTensors[i], inputTensorHandles, inputOutputAllocs, sessionId, inputIndices[i]);
        }
        for (let i = 0; i < outputCount; i++) {
          prepareInputOutputTensor(
            outputTensors[i],
            outputTensorHandles,
            inputOutputAllocs,
            sessionId,
            inputCount + outputIndices[i]
          );
        }
        let inputValuesIndex = inputValuesOffset / 4;
        let inputNamesIndex = inputNamesOffset / 4;
        let outputValuesIndex = outputValuesOffset / 4;
        let outputNamesIndex = outputNamesOffset / 4;
        for (let i = 0; i < inputCount; i++) {
          wasm2.HEAPU32[inputValuesIndex++] = inputTensorHandles[i];
          wasm2.HEAPU32[inputNamesIndex++] = inputNamesUTF8Encoded[inputIndices[i]];
        }
        for (let i = 0; i < outputCount; i++) {
          wasm2.HEAPU32[outputValuesIndex++] = outputTensorHandles[i];
          wasm2.HEAPU32[outputNamesIndex++] = outputNamesUTF8Encoded[outputIndices[i]];
        }
        if (false) {
          const { handle, outputPreferredLocations, outputPreferredLocationsEncoded } = ioBindingState;
          if (inputNamesUTF8Encoded.length !== inputCount) {
            throw new Error(`input count from feeds (${inputCount}) is expected to be always equal to model's input count (${inputNamesUTF8Encoded.length}).`);
          }
          for (let i = 0; i < inputCount; i++) {
            const index = inputIndices[i];
            const errorCode2 = await wasm2._OrtBindInput(handle, inputNamesUTF8Encoded[index], inputTensorHandles[i]);
            if (errorCode2 !== 0) {
              checkLastError(`Can't bind input[${i}] for session=${sessionId}.`);
            }
          }
          for (let i = 0; i < outputCount; i++) {
            const index = outputIndices[i];
            const location = outputTensors[i]?.[3];
            if (location) {
              const errorCode2 = wasm2._OrtBindOutput(handle, outputNamesUTF8Encoded[index], outputTensorHandles[i], 0);
              if (errorCode2 !== 0) {
                checkLastError(`Can't bind pre-allocated output[${i}] for session=${sessionId}.`);
              }
            } else {
              const errorCode2 = wasm2._OrtBindOutput(handle, outputNamesUTF8Encoded[index], 0, outputPreferredLocationsEncoded[index]);
              if (errorCode2 !== 0) {
                checkLastError(`Can't bind output[${i}] to ${outputPreferredLocations[i]} for session=${sessionId}.`);
              }
            }
          }
        }
        let errorCode;
        if (false) {
          errorCode = await wasm2._OrtRunWithBinding(
            sessionHandle,
            ioBindingState.handle,
            outputCount,
            outputValuesOffset,
            runOptionsHandle
          );
        } else {
          errorCode = await wasm2._OrtRun(
            sessionHandle,
            inputNamesOffset,
            inputValuesOffset,
            inputCount,
            outputNamesOffset,
            outputCount,
            outputValuesOffset,
            runOptionsHandle
          );
        }
        if (errorCode !== 0) {
          checkLastError("failed to call OrtRun().");
        }
        const output = [];
        for (let i = 0; i < outputCount; i++) {
          const tensor = wasm2.HEAPU32[outputValuesOffset / 4 + i];
          if (tensor === outputTensorHandles[i]) {
            output.push(outputTensors[i]);
            continue;
          }
          const beforeGetTensorDataStack = wasm2.stackSave();
          const tensorDataOffset = wasm2.stackAlloc(4 * 4);
          let keepOutputTensor = false;
          let type, dataOffset = 0;
          try {
            const errorCode2 = wasm2._OrtGetTensorData(
              tensor,
              tensorDataOffset,
              tensorDataOffset + 4,
              tensorDataOffset + 8,
              tensorDataOffset + 12
            );
            if (errorCode2 !== 0) {
              checkLastError(`Can't access output tensor data on index ${i}.`);
            }
            let tensorDataIndex = tensorDataOffset / 4;
            const dataType = wasm2.HEAPU32[tensorDataIndex++];
            dataOffset = wasm2.HEAPU32[tensorDataIndex++];
            const dimsOffset = wasm2.HEAPU32[tensorDataIndex++];
            const dimsLength = wasm2.HEAPU32[tensorDataIndex++];
            const dims = [];
            for (let i2 = 0; i2 < dimsLength; i2++) {
              dims.push(wasm2.HEAPU32[dimsOffset / 4 + i2]);
            }
            wasm2._OrtFree(dimsOffset);
            const size = dims.reduce((a, b) => a * b, 1);
            type = tensorDataTypeEnumToString(dataType);
            const preferredLocation = ioBindingState?.outputPreferredLocations[outputIndices[i]];
            if (type === "string") {
              if (preferredLocation === "gpu-buffer") {
                throw new Error("String tensor is not supported on GPU.");
              }
              const stringData = [];
              let dataIndex = dataOffset / 4;
              for (let i2 = 0; i2 < size; i2++) {
                const offset = wasm2.HEAPU32[dataIndex++];
                const maxBytesToRead = i2 === size - 1 ? void 0 : wasm2.HEAPU32[dataIndex] - offset;
                stringData.push(wasm2.UTF8ToString(offset, maxBytesToRead));
              }
              output.push([type, dims, stringData, "cpu"]);
            } else {
              if (preferredLocation === "gpu-buffer" && size > 0) {
                const gpuBuffer = wasm2.jsepGetBuffer(dataOffset);
                const elementSize = getTensorElementSize(dataType);
                if (elementSize === void 0 || !isGpuBufferSupportedType(type)) {
                  throw new Error(`Unsupported data type: ${type}`);
                }
                keepOutputTensor = true;
                output.push([
                  type,
                  dims,
                  {
                    gpuBuffer,
                    download: wasm2.jsepCreateDownloader(gpuBuffer, size * elementSize, type),
                    dispose: () => {
                      wasm2._OrtReleaseTensor(tensor);
                    }
                  },
                  "gpu-buffer"
                ]);
              } else {
                const typedArrayConstructor = tensorTypeToTypedArrayConstructor(type);
                const data = new typedArrayConstructor(size);
                new Uint8Array(data.buffer, data.byteOffset, data.byteLength).set(wasm2.HEAPU8.subarray(dataOffset, dataOffset + data.byteLength));
                output.push([type, dims, data, "cpu"]);
              }
            }
          } finally {
            wasm2.stackRestore(beforeGetTensorDataStack);
            if (type === "string" && dataOffset) {
              wasm2._free(dataOffset);
            }
            if (!keepOutputTensor) {
              wasm2._OrtReleaseTensor(tensor);
            }
          }
        }
        if (ioBindingState) {
          wasm2._OrtClearBoundOutputs(ioBindingState.handle);
        }
        return output;
      } finally {
        wasm2.stackRestore(beforeRunStack);
        inputTensorHandles.forEach((v) => wasm2._OrtReleaseTensor(v));
        outputTensorHandles.forEach((v) => wasm2._OrtReleaseTensor(v));
        inputOutputAllocs.forEach((p) => wasm2._free(p));
        if (runOptionsHandle !== 0) {
          wasm2._OrtReleaseRunOptions(runOptionsHandle);
        }
        runOptionsAllocs.forEach((p) => wasm2._free(p));
      }
    };
    endProfiling = (sessionId) => {
      const wasm2 = getInstance();
      const session = activeSessions.get(sessionId);
      if (!session) {
        throw new Error("invalid session id");
      }
      const sessionHandle = session[0];
      const profileFileName = wasm2._OrtEndProfiling(sessionHandle);
      if (profileFileName === 0) {
        checkLastError("Can't get an profile file name.");
      }
      wasm2._OrtFree(profileFileName);
    };
    extractTransferableBuffers = (tensors) => {
      const buffers = [];
      for (const tensor of tensors) {
        const data = tensor[2];
        if (!Array.isArray(data) && "buffer" in data) {
          buffers.push(data.buffer);
        }
      }
      return buffers;
    };
  }
});

// proxy-worker:./proxy-worker/main
var require_main = __commonJS({
  "proxy-worker:./proxy-worker/main"(exports, module) {
    module.exports = '/*!\n * ONNX Runtime Web v1.17.0\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n"use strict";\n(() => {\n  var __defProp = Object.defineProperty;\n  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;\n  var __getOwnPropNames = Object.getOwnPropertyNames;\n  var __hasOwnProp = Object.prototype.hasOwnProperty;\n  var __esm = (fn, res) => function __init() {\n    return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;\n  };\n  var __commonJS = (cb, mod) => function __require() {\n    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;\n  };\n  var __export = (target, all) => {\n    for (var name in all)\n      __defProp(target, name, { get: all[name], enumerable: true });\n  };\n  var __copyProps = (to, from, except, desc) => {\n    if (from && typeof from === "object" || typeof from === "function") {\n      for (let key of __getOwnPropNames(from))\n        if (!__hasOwnProp.call(to, key) && key !== except)\n          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n    }\n    return to;\n  };\n  var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);\n\n  // nodejs-ignore:fs\n  var fs_exports = {};\n  __export(fs_exports, {\n    readFile: () => readFile\n  });\n  var readFile;\n  var init_fs = __esm({\n    "nodejs-ignore:fs"() {\n      readFile = void 0;\n    }\n  });\n\n  // nodejs-ignore:path\n  var path_exports = {};\n  __export(path_exports, {\n    join: () => join2\n  });\n  var join2;\n  var init_path = __esm({\n    "nodejs-ignore:path"() {\n      join2 = void 0;\n    }\n  });\n\n  // web/lib/wasm/binding/ort-training-wasm-simd.js\n  var require_ort_training_wasm_simd = __commonJS({\n    "web/lib/wasm/binding/ort-training-wasm-simd.js"(exports, module) {\n      "use strict";\n      var ortWasm = (() => {\n        var _scriptDir = typeof document !== "undefined" && document.currentScript ? document.currentScript.src : void 0;\n        if (typeof __filename !== "undefined")\n          _scriptDir = _scriptDir || __filename;\n        return function(moduleArg = {}) {\n          var d = moduleArg, k, l;\n          d.ready = new Promise((a, b) => {\n            k = a;\n            l = b;\n          });\n          var r = Object.assign({}, d), v = "./this.program", aa = "object" == typeof window, x = "function" == typeof importScripts, ba = "object" == typeof process && "object" == typeof process.versions && "string" == typeof process.versions.node, y = "", A, B, C;\n          if (ba) {\n            var fs = (init_fs(), __toCommonJS(fs_exports)), D = (init_path(), __toCommonJS(path_exports));\n            y = x ? D.dirname(y) + "/" : __dirname + "/";\n            A = (a, b) => {\n              a = a.startsWith("file://") ? new URL(a) : D.normalize(a);\n              return fs.readFileSync(a, b ? void 0 : "utf8");\n            };\n            C = (a) => {\n              a = A(a, true);\n              a.buffer || (a = new Uint8Array(a));\n              return a;\n            };\n            B = (a, b, c, f = true) => {\n              a = a.startsWith("file://") ? new URL(a) : D.normalize(a);\n              fs.readFile(a, f ? void 0 : "utf8", (g, h) => {\n                g ? c(g) : b(f ? h.buffer : h);\n              });\n            };\n            !d.thisProgram && 1 < process.argv.length && (v = process.argv[1].replace(/\\\\/g, "/"));\n            process.argv.slice(2);\n            d.inspect = () => "[Emscripten Module object]";\n          } else if (aa || x)\n            x ? y = self.location.href : "undefined" != typeof document && document.currentScript && (y = document.currentScript.src), _scriptDir && (y = _scriptDir), 0 !== y.indexOf("blob:") ? y = y.substr(0, y.replace(/[?#].*/, "").lastIndexOf("/") + 1) : y = "", A = (a) => {\n              var b = new XMLHttpRequest();\n              b.open("GET", a, false);\n              b.send(null);\n              return b.responseText;\n            }, x && (C = (a) => {\n              var b = new XMLHttpRequest();\n              b.open("GET", a, false);\n              b.responseType = "arraybuffer";\n              b.send(null);\n              return new Uint8Array(b.response);\n            }), B = (a, b, c) => {\n              var f = new XMLHttpRequest();\n              f.open("GET", a, true);\n              f.responseType = "arraybuffer";\n              f.onload = () => {\n                200 == f.status || 0 == f.status && f.response ? b(f.response) : c();\n              };\n              f.onerror = c;\n              f.send(null);\n            };\n          var ca = d.print || console.log.bind(console), E = d.printErr || console.error.bind(console);\n          Object.assign(d, r);\n          r = null;\n          d.thisProgram && (v = d.thisProgram);\n          var F;\n          d.wasmBinary && (F = d.wasmBinary);\n          var noExitRuntime = d.noExitRuntime || true;\n          "object" != typeof WebAssembly && G("no native wasm support detected");\n          var H, I, da = false, J, K, L, M;\n          function ea() {\n            var a = H.buffer;\n            d.HEAP8 = J = new Int8Array(a);\n            d.HEAP16 = new Int16Array(a);\n            d.HEAP32 = L = new Int32Array(a);\n            d.HEAPU8 = K = new Uint8Array(a);\n            d.HEAPU16 = new Uint16Array(a);\n            d.HEAPU32 = M = new Uint32Array(a);\n            d.HEAPF32 = new Float32Array(a);\n            d.HEAPF64 = new Float64Array(a);\n          }\n          var fa = [], ha = [], ia = [];\n          function ja() {\n            var a = d.preRun.shift();\n            fa.unshift(a);\n          }\n          var N = 0, O = null, P = null;\n          function G(a) {\n            if (d.onAbort)\n              d.onAbort(a);\n            a = "Aborted(" + a + ")";\n            E(a);\n            da = true;\n            a = new WebAssembly.RuntimeError(a + ". Build with -sASSERTIONS for more info.");\n            l(a);\n            throw a;\n          }\n          function ka(a) {\n            return a.startsWith("data:application/octet-stream;base64,");\n          }\n          var Q;\n          Q = "ort-training-wasm-simd.wasm";\n          if (!ka(Q)) {\n            var la = Q;\n            Q = d.locateFile ? d.locateFile(la, y) : y + la;\n          }\n          function ma(a) {\n            if (a == Q && F)\n              return new Uint8Array(F);\n            if (C)\n              return C(a);\n            throw "both async and sync fetching of the wasm failed";\n          }\n          function na(a) {\n            if (!F && (aa || x)) {\n              if ("function" == typeof fetch && !a.startsWith("file://"))\n                return fetch(a, { credentials: "same-origin" }).then((b) => {\n                  if (!b.ok)\n                    throw "failed to load wasm binary file at \'" + a + "\'";\n                  return b.arrayBuffer();\n                }).catch(() => ma(a));\n              if (B)\n                return new Promise((b, c) => {\n                  B(a, (f) => b(new Uint8Array(f)), c);\n                });\n            }\n            return Promise.resolve().then(() => ma(a));\n          }\n          function oa(a, b, c) {\n            return na(a).then((f) => WebAssembly.instantiate(f, b)).then((f) => f).then(c, (f) => {\n              E("failed to asynchronously prepare wasm: " + f);\n              G(f);\n            });\n          }\n          function pa(a, b) {\n            var c = Q;\n            return F || "function" != typeof WebAssembly.instantiateStreaming || ka(c) || c.startsWith("file://") || ba || "function" != typeof fetch ? oa(c, a, b) : fetch(c, { credentials: "same-origin" }).then((f) => WebAssembly.instantiateStreaming(f, a).then(b, function(g) {\n              E("wasm streaming compile failed: " + g);\n              E("falling back to ArrayBuffer instantiation");\n              return oa(c, a, b);\n            }));\n          }\n          var R, S = (a) => {\n            for (; 0 < a.length; )\n              a.shift()(d);\n          };\n          function qa(a) {\n            this.Ha = a - 24;\n            this.La = function(b) {\n              M[this.Ha + 4 >> 2 >>> 0] = b;\n            };\n            this.Ka = function(b) {\n              M[this.Ha + 8 >> 2 >>> 0] = b;\n            };\n            this.Ia = function(b, c) {\n              this.Ja();\n              this.La(b);\n              this.Ka(c);\n            };\n            this.Ja = function() {\n              M[this.Ha + 16 >> 2 >>> 0] = 0;\n            };\n          }\n          var ra = 0, sa = 0, ta = "undefined" != typeof TextDecoder ? new TextDecoder("utf8") : void 0, ua = (a, b, c) => {\n            b >>>= 0;\n            var f = b + c;\n            for (c = b; a[c] && !(c >= f); )\n              ++c;\n            if (16 < c - b && a.buffer && ta)\n              return ta.decode(a.subarray(b, c));\n            for (f = ""; b < c; ) {\n              var g = a[b++];\n              if (g & 128) {\n                var h = a[b++] & 63;\n                if (192 == (g & 224))\n                  f += String.fromCharCode((g & 31) << 6 | h);\n                else {\n                  var m = a[b++] & 63;\n                  g = 224 == (g & 240) ? (g & 15) << 12 | h << 6 | m : (g & 7) << 18 | h << 12 | m << 6 | a[b++] & 63;\n                  65536 > g ? f += String.fromCharCode(g) : (g -= 65536, f += String.fromCharCode(55296 | g >> 10, 56320 | g & 1023));\n                }\n              } else\n                f += String.fromCharCode(g);\n            }\n            return f;\n          }, T = (a, b) => (a >>>= 0) ? ua(K, a, b) : "", U = (a) => {\n            for (var b = 0, c = 0; c < a.length; ++c) {\n              var f = a.charCodeAt(c);\n              127 >= f ? b++ : 2047 >= f ? b += 2 : 55296 <= f && 57343 >= f ? (b += 4, ++c) : b += 3;\n            }\n            return b;\n          }, V = (a, b, c, f) => {\n            c >>>= 0;\n            if (!(0 < f))\n              return 0;\n            var g = c;\n            f = c + f - 1;\n            for (var h = 0; h < a.length; ++h) {\n              var m = a.charCodeAt(h);\n              if (55296 <= m && 57343 >= m) {\n                var q = a.charCodeAt(++h);\n                m = 65536 + ((m & 1023) << 10) | q & 1023;\n              }\n              if (127 >= m) {\n                if (c >= f)\n                  break;\n                b[c++ >>> 0] = m;\n              } else {\n                if (2047 >= m) {\n                  if (c + 1 >= f)\n                    break;\n                  b[c++ >>> 0] = 192 | m >> 6;\n                } else {\n                  if (65535 >= m) {\n                    if (c + 2 >= f)\n                      break;\n                    b[c++ >>> 0] = 224 | m >> 12;\n                  } else {\n                    if (c + 3 >= f)\n                      break;\n                    b[c++ >>> 0] = 240 | m >> 18;\n                    b[c++ >>> 0] = 128 | m >> 12 & 63;\n                  }\n                  b[c++ >>> 0] = 128 | m >> 6 & 63;\n                }\n                b[c++ >>> 0] = 128 | m & 63;\n              }\n            }\n            b[c >>> 0] = 0;\n            return c - g;\n          }, W = (a) => 0 === a % 4 && (0 !== a % 100 || 0 === a % 400), va = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335], wa = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334], Ba = (a) => {\n            var b = U(a) + 1, c = Aa(b);\n            c && V(a, K, c, b);\n            return c;\n          }, X = {}, Ca = () => {\n            if (!Y) {\n              var a = { USER: "web_user", LOGNAME: "web_user", PATH: "/", PWD: "/", HOME: "/home/web_user", LANG: ("object" == typeof navigator && navigator.languages && navigator.languages[0] || "C").replace(\n                "-",\n                "_"\n              ) + ".UTF-8", _: v || "./this.program" }, b;\n              for (b in X)\n                void 0 === X[b] ? delete a[b] : a[b] = X[b];\n              var c = [];\n              for (b in a)\n                c.push(`${b}=${a[b]}`);\n              Y = c;\n            }\n            return Y;\n          }, Y, Da = [null, [], []], Ea = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], Fa = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n          function Ga(a) {\n            var b = Array(U(a) + 1);\n            V(a, b, 0, b.length);\n            return b;\n          }\n          function Ha(a, b, c, f) {\n            function g(e, n, p) {\n              for (e = "number" == typeof e ? e.toString() : e || ""; e.length < n; )\n                e = p[0] + e;\n              return e;\n            }\n            function h(e, n) {\n              return g(e, n, "0");\n            }\n            function m(e, n) {\n              function p(xa) {\n                return 0 > xa ? -1 : 0 < xa ? 1 : 0;\n              }\n              var z;\n              0 === (z = p(e.getFullYear() - n.getFullYear())) && 0 === (z = p(e.getMonth() - n.getMonth())) && (z = p(e.getDate() - n.getDate()));\n              return z;\n            }\n            function q(e) {\n              switch (e.getDay()) {\n                case 0:\n                  return new Date(e.getFullYear() - 1, 11, 29);\n                case 1:\n                  return e;\n                case 2:\n                  return new Date(e.getFullYear(), 0, 3);\n                case 3:\n                  return new Date(\n                    e.getFullYear(),\n                    0,\n                    2\n                  );\n                case 4:\n                  return new Date(e.getFullYear(), 0, 1);\n                case 5:\n                  return new Date(e.getFullYear() - 1, 11, 31);\n                case 6:\n                  return new Date(e.getFullYear() - 1, 11, 30);\n              }\n            }\n            function w(e) {\n              var n = e.Ca;\n              for (e = new Date(new Date(e.Da + 1900, 0, 1).getTime()); 0 < n; ) {\n                var p = e.getMonth(), z = (W(e.getFullYear()) ? Ea : Fa)[p];\n                if (n > z - e.getDate())\n                  n -= z - e.getDate() + 1, e.setDate(1), 11 > p ? e.setMonth(p + 1) : (e.setMonth(0), e.setFullYear(e.getFullYear() + 1));\n                else {\n                  e.setDate(e.getDate() + n);\n                  break;\n                }\n              }\n              p = new Date(e.getFullYear() + 1, 0, 4);\n              n = q(new Date(\n                e.getFullYear(),\n                0,\n                4\n              ));\n              p = q(p);\n              return 0 >= m(n, e) ? 0 >= m(p, e) ? e.getFullYear() + 1 : e.getFullYear() : e.getFullYear() - 1;\n            }\n            a >>>= 0;\n            b >>>= 0;\n            c >>>= 0;\n            f >>>= 0;\n            var t = L[f + 40 >> 2 >>> 0];\n            f = { Oa: L[f >> 2 >>> 0], Na: L[f + 4 >> 2 >>> 0], Ea: L[f + 8 >> 2 >>> 0], Ga: L[f + 12 >> 2 >>> 0], Fa: L[f + 16 >> 2 >>> 0], Da: L[f + 20 >> 2 >>> 0], xa: L[f + 24 >> 2 >>> 0], Ca: L[f + 28 >> 2 >>> 0], Qa: L[f + 32 >> 2 >>> 0], Ma: L[f + 36 >> 2 >>> 0], Pa: t ? T(t) : "" };\n            c = T(c);\n            t = {\n              "%c": "%a %b %d %H:%M:%S %Y",\n              "%D": "%m/%d/%y",\n              "%F": "%Y-%m-%d",\n              "%h": "%b",\n              "%r": "%I:%M:%S %p",\n              "%R": "%H:%M",\n              "%T": "%H:%M:%S",\n              "%x": "%m/%d/%y",\n              "%X": "%H:%M:%S",\n              "%Ec": "%c",\n              "%EC": "%C",\n              "%Ex": "%m/%d/%y",\n              "%EX": "%H:%M:%S",\n              "%Ey": "%y",\n              "%EY": "%Y",\n              "%Od": "%d",\n              "%Oe": "%e",\n              "%OH": "%H",\n              "%OI": "%I",\n              "%Om": "%m",\n              "%OM": "%M",\n              "%OS": "%S",\n              "%Ou": "%u",\n              "%OU": "%U",\n              "%OV": "%V",\n              "%Ow": "%w",\n              "%OW": "%W",\n              "%Oy": "%y"\n            };\n            for (var u in t)\n              c = c.replace(new RegExp(u, "g"), t[u]);\n            var ya = "Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "), za = "January February March April May June July August September October November December".split(" ");\n            t = { "%a": (e) => ya[e.xa].substring(0, 3), "%A": (e) => ya[e.xa], "%b": (e) => za[e.Fa].substring(0, 3), "%B": (e) => za[e.Fa], "%C": (e) => h((e.Da + 1900) / 100 | 0, 2), "%d": (e) => h(e.Ga, 2), "%e": (e) => g(e.Ga, 2, " "), "%g": (e) => w(e).toString().substring(2), "%G": (e) => w(e), "%H": (e) => h(e.Ea, 2), "%I": (e) => {\n              e = e.Ea;\n              0 == e ? e = 12 : 12 < e && (e -= 12);\n              return h(e, 2);\n            }, "%j": (e) => {\n              for (var n = 0, p = 0; p <= e.Fa - 1; n += (W(e.Da + 1900) ? Ea : Fa)[p++])\n                ;\n              return h(e.Ga + n, 3);\n            }, "%m": (e) => h(e.Fa + 1, 2), "%M": (e) => h(e.Na, 2), "%n": () => "\\n", "%p": (e) => 0 <= e.Ea && 12 > e.Ea ? "AM" : "PM", "%S": (e) => h(e.Oa, 2), "%t": () => "	", "%u": (e) => e.xa || 7, "%U": (e) => h(Math.floor((e.Ca + 7 - e.xa) / 7), 2), "%V": (e) => {\n              var n = Math.floor((e.Ca + 7 - (e.xa + 6) % 7) / 7);\n              2 >= (e.xa + 371 - e.Ca - 2) % 7 && n++;\n              if (n)\n                53 == n && (p = (e.xa + 371 - e.Ca) % 7, 4 == p || 3 == p && W(e.Da) || (n = 1));\n              else {\n                n = 52;\n                var p = (e.xa + 7 - e.Ca - 1) % 7;\n                (4 == p || 5 == p && W(e.Da % 400 - 1)) && n++;\n              }\n              return h(n, 2);\n            }, "%w": (e) => e.xa, "%W": (e) => h(Math.floor((e.Ca + 7 - (e.xa + 6) % 7) / 7), 2), "%y": (e) => (e.Da + 1900).toString().substring(2), "%Y": (e) => e.Da + 1900, "%z": (e) => {\n              e = e.Ma;\n              var n = 0 <= e;\n              e = Math.abs(e) / 60;\n              return (n ? "+" : "-") + String("0000" + (e / 60 * 100 + e % 60)).slice(-4);\n            }, "%Z": (e) => e.Pa, "%%": () => "%" };\n            c = c.replace(/%%/g, "\\0\\0");\n            for (u in t)\n              c.includes(u) && (c = c.replace(new RegExp(u, "g"), t[u](f)));\n            c = c.replace(/\\0\\0/g, "%");\n            u = Ga(c);\n            if (u.length > b)\n              return 0;\n            J.set(u, a >>> 0);\n            return u.length - 1;\n          }\n          var Ja = {\n            a: function(a, b, c) {\n              a >>>= 0;\n              new qa(a).Ia(b >>> 0, c >>> 0);\n              ra = a;\n              sa++;\n              throw ra;\n            },\n            e: function() {\n              return 0;\n            },\n            H: function() {\n            },\n            x: function() {\n            },\n            z: function() {\n            },\n            k: function() {\n              return 0;\n            },\n            F: function() {\n            },\n            B: function() {\n            },\n            E: function() {\n            },\n            g: function() {\n            },\n            y: function() {\n            },\n            v: function() {\n            },\n            G: function() {\n            },\n            w: function() {\n            },\n            l: () => true,\n            o: function(a, b, c) {\n              a = b + 2097152 >>> 0 < 4194305 - !!a ? (a >>> 0) + 4294967296 * b : NaN;\n              c >>>= 0;\n              a = new Date(1e3 * a);\n              L[c >> 2 >>> 0] = a.getUTCSeconds();\n              L[c + 4 >> 2 >>> 0] = a.getUTCMinutes();\n              L[c + 8 >> 2 >>> 0] = a.getUTCHours();\n              L[c + 12 >> 2 >>> 0] = a.getUTCDate();\n              L[c + 16 >> 2 >>> 0] = a.getUTCMonth();\n              L[c + 20 >> 2 >>> 0] = a.getUTCFullYear() - 1900;\n              L[c + 24 >> 2 >>> 0] = a.getUTCDay();\n              L[c + 28 >> 2 >>> 0] = (a.getTime() - Date.UTC(a.getUTCFullYear(), 0, 1, 0, 0, 0, 0)) / 864e5 | 0;\n            },\n            p: function(a, b, c) {\n              a = b + 2097152 >>> 0 < 4194305 - !!a ? (a >>> 0) + 4294967296 * b : NaN;\n              c >>>= 0;\n              a = new Date(1e3 * a);\n              L[c >> 2 >>> 0] = a.getSeconds();\n              L[c + 4 >> 2 >>> 0] = a.getMinutes();\n              L[c + 8 >> 2 >>> 0] = a.getHours();\n              L[c + 12 >> 2 >>> 0] = a.getDate();\n              L[c + 16 >> 2 >>> 0] = a.getMonth();\n              L[c + 20 >> 2 >>> 0] = a.getFullYear() - 1900;\n              L[c + 24 >> 2 >>> 0] = a.getDay();\n              L[c + 28 >> 2 >>> 0] = (W(a.getFullYear()) ? va : wa)[a.getMonth()] + a.getDate() - 1 | 0;\n              L[c + 36 >> 2 >>> 0] = -(60 * a.getTimezoneOffset());\n              b = new Date(a.getFullYear(), 6, 1).getTimezoneOffset();\n              var f = new Date(a.getFullYear(), 0, 1).getTimezoneOffset();\n              L[c + 32 >> 2 >>> 0] = (b != f && a.getTimezoneOffset() == Math.min(f, b)) | 0;\n            },\n            q: function(a) {\n              a >>>= 0;\n              var b = new Date(L[a + 20 >> 2 >>> 0] + 1900, L[a + 16 >> 2 >>> 0], L[a + 12 >> 2 >>> 0], L[a + 8 >> 2 >>> 0], L[a + 4 >> 2 >>> 0], L[a >> 2 >>> 0], 0), c = L[a + 32 >> 2 >>> 0], f = b.getTimezoneOffset(), g = new Date(b.getFullYear(), 6, 1).getTimezoneOffset(), h = new Date(b.getFullYear(), 0, 1).getTimezoneOffset(), m = Math.min(h, g);\n              0 > c ? L[a + 32 >> 2 >>> 0] = Number(g != h && m == f) : 0 < c != (m == f) && (g = Math.max(h, g), b.setTime(b.getTime() + 6e4 * ((0 < c ? m : g) - f)));\n              L[a + 24 >> 2 >>> 0] = b.getDay();\n              L[a + 28 >> 2 >>> 0] = (W(b.getFullYear()) ? va : wa)[b.getMonth()] + b.getDate() - 1 | 0;\n              L[a >> 2 >>> 0] = b.getSeconds();\n              L[a + 4 >> 2 >>> 0] = b.getMinutes();\n              L[a + 8 >> 2 >>> 0] = b.getHours();\n              L[a + 12 >> 2 >>> 0] = b.getDate();\n              L[a + 16 >> 2 >>> 0] = b.getMonth();\n              L[a + 20 >> 2 >>> 0] = b.getYear();\n              a = b.getTime() / 1e3;\n              return Ia((R = a, 1 <= +Math.abs(R) ? 0 < R ? +Math.floor(R / 4294967296) >>> 0 : ~~+Math.ceil((R - +(~~R >>> 0)) / 4294967296) >>> 0 : 0)), a >>> 0;\n            },\n            m: function() {\n              return -52;\n            },\n            n: function() {\n            },\n            t: function(a, b, c) {\n              function f(w) {\n                return (w = w.toTimeString().match(/\\(([A-Za-z ]+)\\)$/)) ? w[1] : "GMT";\n              }\n              c >>>= 0;\n              var g = (/* @__PURE__ */ new Date()).getFullYear(), h = new Date(g, 0, 1), m = new Date(g, 6, 1);\n              g = h.getTimezoneOffset();\n              var q = m.getTimezoneOffset();\n              M[a >>> 0 >> 2 >>> 0] = 60 * Math.max(g, q);\n              L[b >>> 0 >> 2 >>> 0] = Number(g != q);\n              a = f(h);\n              b = f(m);\n              a = Ba(a);\n              b = Ba(b);\n              q < g ? (M[c >> 2 >>> 0] = a, M[c + 4 >> 2 >>> 0] = b) : (M[c >> 2 >>> 0] = b, M[c + 4 >> 2 >>> 0] = a);\n            },\n            d: () => {\n              G("");\n            },\n            h: function() {\n              return Date.now();\n            },\n            u: function() {\n              return 4294901760;\n            },\n            b: () => performance.now(),\n            I: function(a, b, c) {\n              b >>>= 0;\n              return K.copyWithin(a >>> 0 >>> 0, b >>> 0, b + (c >>> 0) >>> 0);\n            },\n            s: function(a) {\n              a >>>= 0;\n              var b = K.length;\n              if (4294901760 < a)\n                return false;\n              for (var c = 1; 4 >= c; c *= 2) {\n                var f = b * (1 + 0.2 / c);\n                f = Math.min(f, a + 100663296);\n                var g = Math;\n                f = Math.max(a, f);\n                a: {\n                  g = g.min.call(g, 4294901760, f + (65536 - f % 65536) % 65536) - H.buffer.byteLength + 65535 >>> 16;\n                  try {\n                    H.grow(g);\n                    ea();\n                    var h = 1;\n                    break a;\n                  } catch (m) {\n                  }\n                  h = void 0;\n                }\n                if (h)\n                  return true;\n              }\n              return false;\n            },\n            C: function(a, b) {\n              a >>>= 0;\n              b >>>= 0;\n              var c = 0;\n              Ca().forEach(function(f, g) {\n                var h = b + c;\n                g = M[a + 4 * g >> 2 >>> 0] = h;\n                for (h = 0; h < f.length; ++h)\n                  J[g++ >> 0 >>> 0] = f.charCodeAt(h);\n                J[g >> 0 >>> 0] = 0;\n                c += f.length + 1;\n              });\n              return 0;\n            },\n            D: function(a, b) {\n              a >>>= 0;\n              b >>>= 0;\n              var c = Ca();\n              M[a >> 2 >>> 0] = c.length;\n              var f = 0;\n              c.forEach(function(g) {\n                f += g.length + 1;\n              });\n              M[b >> 2 >>> 0] = f;\n              return 0;\n            },\n            f: () => 52,\n            j: function() {\n              return 52;\n            },\n            r: function() {\n              return 70;\n            },\n            i: function(a, b, c, f) {\n              b >>>= 0;\n              c >>>= 0;\n              f >>>= 0;\n              for (var g = 0, h = 0; h < c; h++) {\n                var m = M[b >> 2 >>> 0], q = M[b + 4 >> 2 >>> 0];\n                b += 8;\n                for (var w = 0; w < q; w++) {\n                  var t = K[m + w >>> 0], u = Da[a];\n                  0 === t || 10 === t ? ((1 === a ? ca : E)(ua(u, 0)), u.length = 0) : u.push(t);\n                }\n                g += q;\n              }\n              M[f >> 2 >>> 0] = g;\n              return 0;\n            },\n            A: Ha,\n            c: function(a, b, c, f) {\n              return Ha(a >>> 0, b >>> 0, c >>> 0, f >>> 0);\n            }\n          };\n          (function() {\n            function a(c) {\n              c = c.exports;\n              I = c = Ka(c);\n              H = I.J;\n              ea();\n              ha.unshift(I.K);\n              N--;\n              d.monitorRunDependencies && d.monitorRunDependencies(N);\n              if (0 == N && (null !== O && (clearInterval(O), O = null), P)) {\n                var f = P;\n                P = null;\n                f();\n              }\n              return c;\n            }\n            var b = { a: Ja };\n            N++;\n            d.monitorRunDependencies && d.monitorRunDependencies(N);\n            if (d.instantiateWasm)\n              try {\n                return d.instantiateWasm(b, a);\n              } catch (c) {\n                E("Module.instantiateWasm callback failed with error: " + c), l(c);\n              }\n            pa(b, function(c) {\n              a(c.instance);\n            }).catch(l);\n            return {};\n          })();\n          d._OrtInit = (a, b) => (d._OrtInit = I.L)(a, b);\n          d._OrtGetLastError = (a, b) => (d._OrtGetLastError = I.M)(a, b);\n          d._OrtCreateSessionOptions = (a, b, c, f, g, h, m, q, w, t) => (d._OrtCreateSessionOptions = I.N)(a, b, c, f, g, h, m, q, w, t);\n          d._OrtAppendExecutionProvider = (a, b) => (d._OrtAppendExecutionProvider = I.O)(a, b);\n          d._OrtAddFreeDimensionOverride = (a, b, c) => (d._OrtAddFreeDimensionOverride = I.P)(a, b, c);\n          d._OrtAddSessionConfigEntry = (a, b, c) => (d._OrtAddSessionConfigEntry = I.Q)(a, b, c);\n          d._OrtReleaseSessionOptions = (a) => (d._OrtReleaseSessionOptions = I.R)(a);\n          d._OrtCreateSession = (a, b, c) => (d._OrtCreateSession = I.S)(a, b, c);\n          d._OrtReleaseSession = (a) => (d._OrtReleaseSession = I.T)(a);\n          d._OrtGetInputOutputCount = (a, b, c) => (d._OrtGetInputOutputCount = I.U)(a, b, c);\n          d._OrtGetInputName = (a, b) => (d._OrtGetInputName = I.V)(a, b);\n          d._OrtGetOutputName = (a, b) => (d._OrtGetOutputName = I.W)(a, b);\n          d._OrtFree = (a) => (d._OrtFree = I.X)(a);\n          d._OrtCreateTensor = (a, b, c, f, g, h) => (d._OrtCreateTensor = I.Y)(a, b, c, f, g, h);\n          d._OrtGetTensorData = (a, b, c, f, g) => (d._OrtGetTensorData = I.Z)(a, b, c, f, g);\n          d._OrtReleaseTensor = (a) => (d._OrtReleaseTensor = I._)(a);\n          d._OrtCreateRunOptions = (a, b, c, f) => (d._OrtCreateRunOptions = I.$)(a, b, c, f);\n          d._OrtAddRunConfigEntry = (a, b, c) => (d._OrtAddRunConfigEntry = I.aa)(a, b, c);\n          d._OrtReleaseRunOptions = (a) => (d._OrtReleaseRunOptions = I.ba)(a);\n          d._OrtCreateBinding = (a) => (d._OrtCreateBinding = I.ca)(a);\n          d._OrtBindInput = (a, b, c) => (d._OrtBindInput = I.da)(a, b, c);\n          d._OrtBindOutput = (a, b, c, f) => (d._OrtBindOutput = I.ea)(a, b, c, f);\n          d._OrtClearBoundOutputs = (a) => (d._OrtClearBoundOutputs = I.fa)(a);\n          d._OrtReleaseBinding = (a) => (d._OrtReleaseBinding = I.ga)(a);\n          d._OrtRunWithBinding = (a, b, c, f, g) => (d._OrtRunWithBinding = I.ha)(a, b, c, f, g);\n          d._OrtRun = (a, b, c, f, g, h, m, q) => (d._OrtRun = I.ia)(a, b, c, f, g, h, m, q);\n          d._OrtEndProfiling = (a) => (d._OrtEndProfiling = I.ja)(a);\n          d._OrtTrainingLoadCheckpoint = (a, b) => (d._OrtTrainingLoadCheckpoint = I.ka)(a, b);\n          d._OrtTrainingReleaseCheckpoint = (a) => (d._OrtTrainingReleaseCheckpoint = I.la)(a);\n          d._OrtTrainingCreateSession = (a, b, c, f, g, h, m, q) => (d._OrtTrainingCreateSession = I.ma)(a, b, c, f, g, h, m, q);\n          d._OrtTrainingLazyResetGrad = (a) => (d._OrtTrainingLazyResetGrad = I.na)(a);\n          d._OrtTrainingRunTrainStep = (a, b, c, f, g, h) => (d._OrtTrainingRunTrainStep = I.oa)(a, b, c, f, g, h);\n          d._OrtTrainingOptimizerStep = (a, b) => (d._OrtTrainingOptimizerStep = I.pa)(a, b);\n          d._OrtTrainingEvalStep = (a, b, c, f, g, h) => (d._OrtTrainingEvalStep = I.qa)(a, b, c, f, g, h);\n          d._OrtTrainingGetParametersSize = (a, b, c) => (d._OrtTrainingGetParametersSize = I.ra)(a, b, c);\n          d._OrtTrainingCopyParametersToBuffer = (a, b, c, f) => (d._OrtTrainingCopyParametersToBuffer = I.sa)(a, b, c, f);\n          d._OrtTrainingCopyParametersFromBuffer = (a, b, c, f) => (d._OrtTrainingCopyParametersFromBuffer = I.ta)(a, b, c, f);\n          d._OrtTrainingReleaseSession = (a) => (d._OrtTrainingReleaseSession = I.ua)(a);\n          var Aa = d._malloc = (a) => (Aa = d._malloc = I.va)(a);\n          d._free = (a) => (d._free = I.wa)(a);\n          var Ia = (a) => (Ia = I.ya)(a), La = () => (La = I.za)(), Ma = (a) => (Ma = I.Aa)(a), Na = (a) => (Na = I.Ba)(a);\n          function Ka(a) {\n            a = Object.assign({}, a);\n            var b = (f) => () => f() >>> 0, c = (f) => (g) => f(g) >>> 0;\n            a.__errno_location = b(a.__errno_location);\n            a.malloc = c(a.malloc);\n            a.stackSave = b(a.stackSave);\n            a.stackAlloc = c(a.stackAlloc);\n            return a;\n          }\n          d.stackAlloc = Na;\n          d.stackSave = La;\n          d.stackRestore = Ma;\n          d.UTF8ToString = T;\n          d.stringToUTF8 = (a, b, c) => V(a, K, b, c);\n          d.lengthBytesUTF8 = U;\n          var Z;\n          P = function Oa() {\n            Z || Pa();\n            Z || (P = Oa);\n          };\n          function Pa() {\n            function a() {\n              if (!Z && (Z = true, d.calledRun = true, !da)) {\n                S(ha);\n                k(d);\n                if (d.onRuntimeInitialized)\n                  d.onRuntimeInitialized();\n                if (d.postRun)\n                  for ("function" == typeof d.postRun && (d.postRun = [d.postRun]); d.postRun.length; ) {\n                    var b = d.postRun.shift();\n                    ia.unshift(b);\n                  }\n                S(ia);\n              }\n            }\n            if (!(0 < N)) {\n              if (d.preRun)\n                for ("function" == typeof d.preRun && (d.preRun = [d.preRun]); d.preRun.length; )\n                  ja();\n              S(fa);\n              0 < N || (d.setStatus ? (d.setStatus("Running..."), setTimeout(function() {\n                setTimeout(function() {\n                  d.setStatus("");\n                }, 1);\n                a();\n              }, 1)) : a());\n            }\n          }\n          if (d.preInit)\n            for ("function" == typeof d.preInit && (d.preInit = [d.preInit]); 0 < d.preInit.length; )\n              d.preInit.pop()();\n          Pa();\n          return moduleArg.ready;\n        };\n      })();\n      if (typeof exports === "object" && typeof module === "object")\n        module.exports = ortWasm;\n      else if (typeof define === "function" && define["amd"])\n        define([], () => ortWasm);\n    }\n  });\n\n  // nodejs-ignore:worker_threads\n  var require_worker_threads = __commonJS({\n    "nodejs-ignore:worker_threads"() {\n    }\n  });\n\n  // nodejs-ignore:perf_hooks\n  var require_perf_hooks = __commonJS({\n    "nodejs-ignore:perf_hooks"() {\n    }\n  });\n\n  // nodejs-ignore:os\n  var os_exports = {};\n  __export(os_exports, {\n    cpus: () => cpus\n  });\n  var cpus;\n  var init_os = __esm({\n    "nodejs-ignore:os"() {\n      cpus = void 0;\n    }\n  });\n\n  // web/lib/wasm/binding/ort-wasm-threaded.js\n  var require_ort_wasm_threaded = __commonJS({\n    "web/lib/wasm/binding/ort-wasm-threaded.js"(exports, module) {\n      "use strict";\n      var ortWasmThreaded = (() => {\n        var _scriptDir = typeof document !== "undefined" && document.currentScript ? document.currentScript.src : void 0;\n        if (typeof __filename !== "undefined")\n          _scriptDir = _scriptDir || __filename;\n        return function(moduleArg = {}) {\n          function p() {\n            q.buffer != r.buffer && t();\n            return r;\n          }\n          function x() {\n            q.buffer != r.buffer && t();\n            return ba;\n          }\n          function ca() {\n            q.buffer != r.buffer && t();\n            return da;\n          }\n          function ea() {\n            q.buffer != r.buffer && t();\n            return fa;\n          }\n          function A() {\n            q.buffer != r.buffer && t();\n            return ha;\n          }\n          function B() {\n            q.buffer != r.buffer && t();\n            return ia;\n          }\n          function ja() {\n            q.buffer != r.buffer && t();\n            return ka;\n          }\n          var C = moduleArg, la, ma;\n          C.ready = new Promise((a, b) => {\n            la = a;\n            ma = b;\n          });\n          var na = Object.assign({}, C), oa = "./this.program", pa = (a, b) => {\n            throw b;\n          }, qa = "object" == typeof window, ra = "function" == typeof importScripts, F = "object" == typeof process && "object" == typeof process.versions && "string" == typeof process.versions.node, G = C.ENVIRONMENT_IS_PTHREAD || false, H = "";\n          function sa(a) {\n            return C.locateFile ? C.locateFile(a, H) : H + a;\n          }\n          var ta, ua, va;\n          if (F) {\n            var fs = (init_fs(), __toCommonJS(fs_exports)), wa = (init_path(), __toCommonJS(path_exports));\n            H = ra ? wa.dirname(H) + "/" : __dirname + "/";\n            ta = (b, c) => {\n              b = b.startsWith("file://") ? new URL(b) : wa.normalize(b);\n              return fs.readFileSync(b, c ? void 0 : "utf8");\n            };\n            va = (b) => {\n              b = ta(b, true);\n              b.buffer || (b = new Uint8Array(b));\n              return b;\n            };\n            ua = (b, c, d, e = true) => {\n              b = b.startsWith("file://") ? new URL(b) : wa.normalize(b);\n              fs.readFile(b, e ? void 0 : "utf8", (f, g) => {\n                f ? d(f) : c(e ? g.buffer : g);\n              });\n            };\n            !C.thisProgram && 1 < process.argv.length && (oa = process.argv[1].replace(/\\\\/g, "/"));\n            process.argv.slice(2);\n            pa = (b, c) => {\n              process.exitCode = b;\n              throw c;\n            };\n            C.inspect = () => "[Emscripten Module object]";\n            let a;\n            try {\n              a = require_worker_threads();\n            } catch (b) {\n              throw console.error(\'The "worker_threads" module is not supported in this node.js build - perhaps a newer version is needed?\'), b;\n            }\n            global.Worker = a.Worker;\n          } else if (qa || ra)\n            ra ? H = self.location.href : "undefined" != typeof document && document.currentScript && (H = document.currentScript.src), typeof _scriptDir !== "undefined" && _scriptDir && (H = _scriptDir), 0 !== H.indexOf("blob:") ? H = H.substr(0, H.replace(/[?#].*/, "").lastIndexOf("/") + 1) : H = "", F || (ta = (a) => {\n              var b = new XMLHttpRequest();\n              b.open("GET", a, false);\n              b.send(null);\n              return b.responseText;\n            }, ra && (va = (a) => {\n              var b = new XMLHttpRequest();\n              b.open("GET", a, false);\n              b.responseType = "arraybuffer";\n              b.send(null);\n              return new Uint8Array(b.response);\n            }), ua = (a, b, c) => {\n              var d = new XMLHttpRequest();\n              d.open("GET", a, true);\n              d.responseType = "arraybuffer";\n              d.onload = () => {\n                200 == d.status || 0 == d.status && d.response ? b(d.response) : c();\n              };\n              d.onerror = c;\n              d.send(null);\n            });\n          F && "undefined" == typeof performance && (global.performance = require_perf_hooks().performance);\n          var xa = console.log.bind(console), ya = console.error.bind(console);\n          F && (xa = (...a) => fs.writeSync(1, a.join(" ") + "\\n"), ya = (...a) => fs.writeSync(2, a.join(" ") + "\\n"));\n          var za = xa, L = ya;\n          Object.assign(C, na);\n          na = null;\n          var noExitRuntime = true;\n          "object" != typeof WebAssembly && Aa("no native wasm support detected");\n          var q, Ba, Ca = false, Da, r, ba, da, fa, ha, ia, Ea, Fa, Ga, ka;\n          function t() {\n            var a = q.buffer;\n            C.HEAP8 = r = new Int8Array(a);\n            C.HEAP16 = da = new Int16Array(a);\n            C.HEAPU8 = ba = new Uint8Array(a);\n            C.HEAPU16 = fa = new Uint16Array(a);\n            C.HEAP32 = ha = new Int32Array(a);\n            C.HEAPU32 = ia = new Uint32Array(a);\n            C.HEAPF32 = Ea = new Float32Array(a);\n            C.HEAPF64 = ka = new Float64Array(a);\n            C.HEAP64 = Fa = new BigInt64Array(a);\n            C.HEAPU64 = Ga = new BigUint64Array(a);\n          }\n          var Ha = 16777216;\n          5242880 <= Ha || Aa("INITIAL_MEMORY should be larger than STACK_SIZE, was " + Ha + "! (STACK_SIZE=5242880)");\n          if (G)\n            q = C.wasmMemory;\n          else if (q = new WebAssembly.Memory({ initial: Ha / 65536, maximum: 65536, shared: true }), !(q.buffer instanceof SharedArrayBuffer))\n            throw L("requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag"), F && L("(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and/or recent version)"), Error("bad memory");\n          t();\n          Ha = q.buffer.byteLength;\n          var Ia = [], Ja = [], Ka = [], La = 0;\n          function Ma() {\n            return noExitRuntime || 0 < La;\n          }\n          var Na = 0, Oa = null, Pa = null;\n          function Qa() {\n            Na--;\n            if (0 == Na && (null !== Oa && (clearInterval(Oa), Oa = null), Pa)) {\n              var a = Pa;\n              Pa = null;\n              a();\n            }\n          }\n          function Aa(a) {\n            a = "Aborted(" + a + ")";\n            L(a);\n            Ca = true;\n            Da = 1;\n            a = new WebAssembly.RuntimeError(a + ". Build with -sASSERTIONS for more info.");\n            ma(a);\n            throw a;\n          }\n          function Ra(a) {\n            return a.startsWith("data:application/octet-stream;base64,");\n          }\n          var Sa;\n          Sa = "ort-wasm-threaded.wasm";\n          Ra(Sa) || (Sa = sa(Sa));\n          function Ta(a) {\n            if (va)\n              return va(a);\n            throw "both async and sync fetching of the wasm failed";\n          }\n          function Ua(a) {\n            if (qa || ra) {\n              if ("function" == typeof fetch && !a.startsWith("file://"))\n                return fetch(a, { credentials: "same-origin" }).then((b) => {\n                  if (!b.ok)\n                    throw "failed to load wasm binary file at \'" + a + "\'";\n                  return b.arrayBuffer();\n                }).catch(() => Ta(a));\n              if (ua)\n                return new Promise((b, c) => {\n                  ua(a, (d) => b(new Uint8Array(d)), c);\n                });\n            }\n            return Promise.resolve().then(() => Ta(a));\n          }\n          function Va(a, b, c) {\n            return Ua(a).then((d) => WebAssembly.instantiate(d, b)).then((d) => d).then(c, (d) => {\n              L(`failed to asynchronously prepare wasm: ${d}`);\n              Aa(d);\n            });\n          }\n          function Wa(a, b) {\n            var c = Sa;\n            return "function" != typeof WebAssembly.instantiateStreaming || Ra(c) || c.startsWith("file://") || F || "function" != typeof fetch ? Va(c, a, b) : fetch(c, { credentials: "same-origin" }).then((d) => WebAssembly.instantiateStreaming(d, a).then(b, function(e) {\n              L(`wasm streaming compile failed: ${e}`);\n              L("falling back to ArrayBuffer instantiation");\n              return Va(c, a, b);\n            }));\n          }\n          function Xa(a) {\n            this.name = "ExitStatus";\n            this.message = `Program terminated with exit(${a})`;\n            this.status = a;\n          }\n          var Ya = (a) => {\n            a.terminate();\n            a.onmessage = () => {\n            };\n          }, Za = (a) => {\n            if (0 == M.Qe.length) {\n              var b = sa("ort-wasm-threaded.worker.js");\n              b = new Worker(b);\n              M.Qe.push(b);\n              M.sf(M.Qe[0]);\n            }\n            b = M.Qe.pop();\n            if (!b)\n              return 6;\n            M.Ne.push(b);\n            M.Je[a.Me] = b;\n            b.Me = a.Me;\n            var c = { cmd: "run", start_routine: a.uf, arg: a.mf, pthread_ptr: a.Me };\n            F && b.unref();\n            b.postMessage(c, a.Af);\n            return 0;\n          }, $a = "undefined" != typeof TextDecoder ? new TextDecoder("utf8") : void 0, ab = (a, b, c) => {\n            b >>>= 0;\n            var d = b + c;\n            for (c = b; a[c] && !(c >= d); )\n              ++c;\n            if (16 < c - b && a.buffer && $a)\n              return $a.decode(a.buffer instanceof SharedArrayBuffer ? a.slice(b, c) : a.subarray(b, c));\n            for (d = ""; b < c; ) {\n              var e = a[b++];\n              if (e & 128) {\n                var f = a[b++] & 63;\n                if (192 == (e & 224))\n                  d += String.fromCharCode((e & 31) << 6 | f);\n                else {\n                  var g = a[b++] & 63;\n                  e = 224 == (e & 240) ? (e & 15) << 12 | f << 6 | g : (e & 7) << 18 | f << 12 | g << 6 | a[b++] & 63;\n                  65536 > e ? d += String.fromCharCode(e) : (e -= 65536, d += String.fromCharCode(55296 | e >> 10, 56320 | e & 1023));\n                }\n              } else\n                d += String.fromCharCode(e);\n            }\n            return d;\n          }, bb = (a, b) => (a >>>= 0) ? ab(x(), a, b) : "";\n          function cb(a) {\n            if (G)\n              return N(0, 1, a);\n            Da = a;\n            Ma() || (M.vf(), Ca = true);\n            pa(a, new Xa(a));\n          }\n          var eb = (a) => {\n            Da = a;\n            if (G)\n              throw db(a), "unwind";\n            cb(a);\n          };\n          function gb() {\n            Ia.unshift(() => {\n              Na++;\n              Qa();\n            });\n          }\n          var M = { Qe: [], Ne: [], ff: [], Je: {}, Xe() {\n            G ? (M.receiveObjectTransfer = M.tf, M.threadInitTLS = M.ef, M.setExitStatus = M.bf, noExitRuntime = false) : gb();\n          }, bf: (a) => {\n            Da = a;\n          }, Df: ["$terminateWorker"], vf: () => {\n            for (var a of M.Ne)\n              Ya(a);\n            for (a of M.Qe)\n              Ya(a);\n            M.Qe = [];\n            M.Ne = [];\n            M.Je = [];\n          }, af: (a) => {\n            var b = a.Me;\n            delete M.Je[b];\n            M.Qe.push(a);\n            M.Ne.splice(M.Ne.indexOf(a), 1);\n            a.Me = 0;\n            hb(b);\n          }, tf() {\n          }, ef() {\n            M.ff.forEach((a) => a());\n          }, sf: (a) => new Promise((b) => {\n            a.onmessage = (f) => {\n              f = f.data;\n              var g = f.cmd;\n              if (f.targetThread && f.targetThread != ib()) {\n                var h = M.Je[f.targetThread];\n                h ? h.postMessage(f, f.transferList) : L(`Internal error! Worker sent a message "${g}" to target pthread ${f.targetThread}, but that thread no longer exists!`);\n              } else if ("checkMailbox" === g)\n                jb();\n              else if ("spawnThread" === g)\n                Za(f);\n              else if ("cleanupThread" === g)\n                (f = M.Je[f.thread]) || Aa(), M.af(f);\n              else if ("killThread" === g)\n                f = f.thread, g = M.Je[f], delete M.Je[f], Ya(g), hb(f), M.Ne.splice(M.Ne.indexOf(g), 1), g.Me = 0;\n              else if ("cancelThread" === g)\n                M.Je[f.thread].postMessage({ cmd: "cancel" });\n              else if ("loaded" === g)\n                a.loaded = true, b(a);\n              else if ("alert" === g)\n                alert(`Thread ${f.threadId}: ${f.text}`);\n              else if ("setimmediate" === f.target)\n                a.postMessage(f);\n              else if ("callHandler" === g)\n                C[f.handler](...f.args);\n              else\n                g && L(`worker sent an unknown command ${g}`);\n            };\n            a.onerror = (f) => {\n              L(`${"worker sent an error!"} ${f.filename}:${f.lineno}: ${f.message}`);\n              throw f;\n            };\n            F && (a.on("message", (f) => a.onmessage({ data: f })), a.on("error", (f) => a.onerror(f)));\n            var c = [], d = [], e;\n            for (e of d)\n              C.hasOwnProperty(e) && c.push(e);\n            a.postMessage({\n              cmd: "load",\n              handlers: c,\n              urlOrBlob: C.mainScriptUrlOrBlob || _scriptDir,\n              wasmMemory: q,\n              wasmModule: Ba\n            });\n          }) };\n          C.PThread = M;\n          var kb = (a) => {\n            for (; 0 < a.length; )\n              a.shift()(C);\n          };\n          C.establishStackSpace = () => {\n            var a = ib(), b = B()[a + 52 >>> 2 >>> 0];\n            a = B()[a + 56 >>> 2 >>> 0];\n            lb(b, b - a);\n            O(b);\n          };\n          function db(a) {\n            if (G)\n              return N(1, 0, a);\n            eb(a);\n          }\n          var mb = [], nb, P = (a) => {\n            var b = mb[a];\n            b || (a >= mb.length && (mb.length = a + 1), mb[a] = b = nb.get(a));\n            return b;\n          };\n          C.invokeEntryPoint = (a, b) => {\n            a = P(a)(b);\n            Ma() ? M.bf(a) : ob(a);\n          };\n          var pb = [], qb = 0, Q = 0;\n          function rb(a) {\n            this.Se = a;\n            this.Ie = a - 24;\n            this.lf = function(b) {\n              B()[this.Ie + 4 >>> 2 >>> 0] = b;\n            };\n            this.Te = function() {\n              return B()[this.Ie + 4 >>> 2 >>> 0];\n            };\n            this.kf = function(b) {\n              B()[this.Ie + 8 >>> 2 >>> 0] = b;\n            };\n            this.cf = function(b) {\n              b = b ? 1 : 0;\n              p()[this.Ie + 12 >>> 0 >>> 0] = b;\n            };\n            this.hf = function() {\n              return 0 != p()[this.Ie + 12 >>> 0 >>> 0];\n            };\n            this.df = function(b) {\n              b = b ? 1 : 0;\n              p()[this.Ie + 13 >>> 0 >>> 0] = b;\n            };\n            this.pf = function() {\n              return 0 != p()[this.Ie + 13 >>> 0 >>> 0];\n            };\n            this.Xe = function(b, c) {\n              this.Ue(0);\n              this.lf(b);\n              this.kf(c);\n            };\n            this.Ue = function(b) {\n              B()[this.Ie + 16 >>> 2 >>> 0] = b;\n            };\n            this.gf = function() {\n              return B()[this.Ie + 16 >>> 2 >>> 0];\n            };\n            this.jf = function() {\n              if (sb(this.Te()))\n                return B()[this.Se >>> 2 >>> 0];\n              var b = this.gf();\n              return 0 !== b ? b : this.Se;\n            };\n          }\n          var vb = (a) => {\n            var b = Q;\n            if (!b)\n              return tb(0), 0;\n            var c = new rb(b);\n            c.Ue(b);\n            var d = c.Te();\n            if (!d)\n              return tb(0), b;\n            for (var e in a) {\n              var f = a[e];\n              if (0 === f || f === d)\n                break;\n              if (ub(f, d, c.Ie + 16))\n                return tb(f), b;\n            }\n            tb(d);\n            return b;\n          };\n          function wb(a, b, c, d) {\n            return G ? N(2, 1, a, b, c, d) : xb(a, b, c, d);\n          }\n          function xb(a, b, c, d) {\n            a >>>= 0;\n            b >>>= 0;\n            c >>>= 0;\n            d >>>= 0;\n            if ("undefined" == typeof SharedArrayBuffer)\n              return L("Current environment does not support SharedArrayBuffer, pthreads are not available!"), 6;\n            var e = [];\n            if (G && 0 === e.length)\n              return wb(a, b, c, d);\n            a = { uf: c, Me: a, mf: d, Af: e };\n            return G ? (a.Cf = "spawnThread", postMessage(a, e), 0) : Za(a);\n          }\n          function yb(a, b, c) {\n            return G ? N(3, 1, a, b, c) : 0;\n          }\n          function zb(a, b) {\n            if (G)\n              return N(4, 1, a, b);\n          }\n          var Ab = (a) => {\n            for (var b = 0, c = 0; c < a.length; ++c) {\n              var d = a.charCodeAt(c);\n              127 >= d ? b++ : 2047 >= d ? b += 2 : 55296 <= d && 57343 >= d ? (b += 4, ++c) : b += 3;\n            }\n            return b;\n          }, Bb = (a, b, c, d) => {\n            c >>>= 0;\n            if (!(0 < d))\n              return 0;\n            var e = c;\n            d = c + d - 1;\n            for (var f = 0; f < a.length; ++f) {\n              var g = a.charCodeAt(f);\n              if (55296 <= g && 57343 >= g) {\n                var h = a.charCodeAt(++f);\n                g = 65536 + ((g & 1023) << 10) | h & 1023;\n              }\n              if (127 >= g) {\n                if (c >= d)\n                  break;\n                b[c++ >>> 0] = g;\n              } else {\n                if (2047 >= g) {\n                  if (c + 1 >= d)\n                    break;\n                  b[c++ >>> 0] = 192 | g >> 6;\n                } else {\n                  if (65535 >= g) {\n                    if (c + 2 >= d)\n                      break;\n                    b[c++ >>> 0] = 224 | g >> 12;\n                  } else {\n                    if (c + 3 >= d)\n                      break;\n                    b[c++ >>> 0] = 240 | g >> 18;\n                    b[c++ >>> 0] = 128 | g >> 12 & 63;\n                  }\n                  b[c++ >>> 0] = 128 | g >> 6 & 63;\n                }\n                b[c++ >>> 0] = 128 | g & 63;\n              }\n            }\n            b[c >>> 0] = 0;\n            return c - e;\n          }, Cb = (a, b, c) => Bb(a, x(), b, c);\n          function Db(a, b) {\n            if (G)\n              return N(5, 1, a, b);\n          }\n          function Eb(a, b, c) {\n            if (G)\n              return N(6, 1, a, b, c);\n          }\n          function Fb(a, b, c) {\n            return G ? N(7, 1, a, b, c) : 0;\n          }\n          function Gb(a, b) {\n            if (G)\n              return N(8, 1, a, b);\n          }\n          function Hb(a, b, c) {\n            if (G)\n              return N(9, 1, a, b, c);\n          }\n          function Ib(a, b, c, d) {\n            if (G)\n              return N(10, 1, a, b, c, d);\n          }\n          function Jb(a, b, c, d) {\n            if (G)\n              return N(11, 1, a, b, c, d);\n          }\n          function Kb(a, b, c, d) {\n            if (G)\n              return N(12, 1, a, b, c, d);\n          }\n          function Lb(a) {\n            if (G)\n              return N(13, 1, a);\n          }\n          function Mb(a, b) {\n            if (G)\n              return N(14, 1, a, b);\n          }\n          function Nb(a, b, c) {\n            if (G)\n              return N(15, 1, a, b, c);\n          }\n          var Ob = (a) => {\n            if (null === a)\n              return "null";\n            var b = typeof a;\n            return "object" === b || "array" === b || "function" === b ? a.toString() : "" + a;\n          }, Pb, R = (a) => {\n            for (var b = ""; x()[a >>> 0]; )\n              b += Pb[x()[a++ >>> 0]];\n            return b;\n          }, Qb = {}, Rb = {}, Sb = {}, Tb;\n          function Ub(a, b, c = {}) {\n            var d = b.name;\n            if (!a)\n              throw new Tb(`type "${d}" must have a positive integer typeid pointer`);\n            if (Rb.hasOwnProperty(a)) {\n              if (c.qf)\n                return;\n              throw new Tb(`Cannot register type \'${d}\' twice`);\n            }\n            Rb[a] = b;\n            delete Sb[a];\n            Qb.hasOwnProperty(a) && (b = Qb[a], delete Qb[a], b.forEach((e) => e()));\n          }\n          function S(a, b, c = {}) {\n            if (!("argPackAdvance" in b))\n              throw new TypeError("registerType registeredInstance requires argPackAdvance");\n            Ub(a, b, c);\n          }\n          var Vb = (a, b, c) => {\n            switch (b) {\n              case 1:\n                return c ? (d) => p()[d >>> 0 >>> 0] : (d) => x()[d >>> 0 >>> 0];\n              case 2:\n                return c ? (d) => ca()[d >>> 1 >>> 0] : (d) => ea()[d >>> 1 >>> 0];\n              case 4:\n                return c ? (d) => A()[d >>> 2 >>> 0] : (d) => B()[d >>> 2 >>> 0];\n              case 8:\n                return c ? (d) => Fa[d >>> 3] : (d) => Ga[d >>> 3];\n              default:\n                throw new TypeError(`invalid integer width (${b}): ${a}`);\n            }\n          };\n          function Wb() {\n            this.Le = [void 0];\n            this.Ze = [];\n          }\n          var T = new Wb();\n          function Xb(a) {\n            a >>>= 0;\n            a >= T.Ie && 0 === --T.get(a).$e && T.Ue(a);\n          }\n          var U = (a) => {\n            if (!a)\n              throw new Tb("Cannot use deleted val. handle = " + a);\n            return T.get(a).value;\n          }, V = (a) => {\n            switch (a) {\n              case void 0:\n                return 1;\n              case null:\n                return 2;\n              case true:\n                return 3;\n              case false:\n                return 4;\n              default:\n                return T.Te({ $e: 1, value: a });\n            }\n          };\n          function Yb(a) {\n            return this.fromWireType(A()[a >>> 2 >>> 0]);\n          }\n          var Zb = (a, b) => {\n            switch (b) {\n              case 4:\n                return function(c) {\n                  var d = this.fromWireType;\n                  q.buffer != r.buffer && t();\n                  return d.call(this, Ea[c >>> 2 >>> 0]);\n                };\n              case 8:\n                return function(c) {\n                  return this.fromWireType(ja()[c >>> 3 >>> 0]);\n                };\n              default:\n                throw new TypeError(`invalid float width (${b}): ${a}`);\n            }\n          };\n          function $b(a) {\n            return this.fromWireType(B()[a >>> 2 >>> 0]);\n          }\n          var ac = "undefined" != typeof TextDecoder ? new TextDecoder("utf-16le") : void 0, bc = (a, b) => {\n            var c = a >> 1;\n            for (var d = c + b / 2; !(c >= d) && ea()[c >>> 0]; )\n              ++c;\n            c <<= 1;\n            if (32 < c - a && ac)\n              return ac.decode(x().slice(a, c));\n            c = "";\n            for (d = 0; !(d >= b / 2); ++d) {\n              var e = ca()[a + 2 * d >>> 1 >>> 0];\n              if (0 == e)\n                break;\n              c += String.fromCharCode(e);\n            }\n            return c;\n          }, cc = (a, b, c) => {\n            void 0 === c && (c = 2147483647);\n            if (2 > c)\n              return 0;\n            c -= 2;\n            var d = b;\n            c = c < 2 * a.length ? c / 2 : a.length;\n            for (var e = 0; e < c; ++e) {\n              var f = a.charCodeAt(e);\n              ca()[b >>> 1 >>> 0] = f;\n              b += 2;\n            }\n            ca()[b >>> 1 >>> 0] = 0;\n            return b - d;\n          }, dc = (a) => 2 * a.length, ec = (a, b) => {\n            for (var c = 0, d = ""; !(c >= b / 4); ) {\n              var e = A()[a + 4 * c >>> 2 >>> 0];\n              if (0 == e)\n                break;\n              ++c;\n              65536 <= e ? (e -= 65536, d += String.fromCharCode(55296 | e >> 10, 56320 | e & 1023)) : d += String.fromCharCode(e);\n            }\n            return d;\n          }, fc = (a, b, c) => {\n            b >>>= 0;\n            void 0 === c && (c = 2147483647);\n            if (4 > c)\n              return 0;\n            var d = b;\n            c = d + c - 4;\n            for (var e = 0; e < a.length; ++e) {\n              var f = a.charCodeAt(e);\n              if (55296 <= f && 57343 >= f) {\n                var g = a.charCodeAt(++e);\n                f = 65536 + ((f & 1023) << 10) | g & 1023;\n              }\n              A()[b >>> 2 >>> 0] = f;\n              b += 4;\n              if (b + 4 > c)\n                break;\n            }\n            A()[b >>> 2 >>> 0] = 0;\n            return b - d;\n          }, gc = (a) => {\n            for (var b = 0, c = 0; c < a.length; ++c) {\n              var d = a.charCodeAt(c);\n              55296 <= d && 57343 >= d && ++c;\n              b += 4;\n            }\n            return b;\n          }, hc = (a) => {\n            if (!Ca)\n              try {\n                if (a(), !Ma())\n                  try {\n                    G ? ob(Da) : eb(Da);\n                  } catch (b) {\n                    b instanceof Xa || "unwind" == b || pa(1, b);\n                  }\n              } catch (b) {\n                b instanceof Xa || "unwind" == b || pa(1, b);\n              }\n          };\n          function ic(a) {\n            a >>>= 0;\n            "function" === typeof Atomics.Bf && (Atomics.Bf(A(), a >>> 2, a).value.then(jb), a += 128, Atomics.store(A(), a >>> 2, 1));\n          }\n          C.__emscripten_thread_mailbox_await = ic;\n          var jb = () => {\n            var a = ib();\n            a && (ic(a), hc(() => jc()));\n          };\n          C.checkMailbox = jb;\n          var kc = (a) => {\n            var b = W();\n            a = a();\n            O(b);\n            return a;\n          };\n          function N(a, b) {\n            var c = arguments.length - 2, d = arguments;\n            return kc(() => {\n              for (var e = 2 * c, f = lc(8 * e), g = f >>> 3, h = 0; h < c; h++) {\n                var k = d[2 + h];\n                "bigint" == typeof k ? (Fa[g + 2 * h] = 1n, Fa[g + 2 * h + 1] = k) : (Fa[g + 2 * h] = 0n, ja()[g + 2 * h + 1 >>> 0] = k);\n              }\n              return mc(a, e, f, b);\n            });\n          }\n          var nc = [], pc = (a, b) => {\n            var c = Rb[a];\n            if (void 0 === c)\n              throw a = oc(a), c = R(a), X(a), new Tb(b + " has unknown type " + c);\n            return c;\n          }, qc = {}, rc = (a) => {\n            var b = qc[a];\n            return void 0 === b ? R(a) : b;\n          }, sc = [], tc = () => "object" == typeof globalThis ? globalThis : Function("return this")(), uc = (a) => {\n            var b = sc.length;\n            sc.push(a);\n            return b;\n          }, vc = (a, b) => {\n            for (var c = Array(a), d = 0; d < a; ++d)\n              c[d] = pc(B()[b + 4 * d >>> 2 >>> 0], "parameter " + d);\n            return c;\n          }, wc = (a) => {\n            if (void 0 === a)\n              return "_unknown";\n            a = a.replace(/[^a-zA-Z0-9_]/g, "$");\n            var b = a.charCodeAt(0);\n            return 48 <= b && 57 >= b ? `_${a}` : a;\n          }, xc = {};\n          function yc(a, b) {\n            a = wc(a);\n            return { [a]: function() {\n              return b.apply(this, arguments);\n            } }[a];\n          }\n          function zc(a) {\n            var b = Function;\n            if (!(b instanceof Function))\n              throw new TypeError(`new_ called with constructor type ${typeof b} which is not a function`);\n            var c = yc(b.name || "unknownFunctionName", function() {\n            });\n            c.prototype = b.prototype;\n            c = new c();\n            a = b.apply(c, a);\n            return a instanceof Object ? a : c;\n          }\n          var Ac = (a) => {\n            for (var b = "", c = 0; c < a; ++c)\n              b += (0 !== c ? ", " : "") + "arg" + c;\n            var d = "return function emval_allocator_" + a + "(constructor, argTypes, args) {\\n  var HEAPU32 = getMemory();\\n";\n            for (c = 0; c < a; ++c)\n              d += "var argType" + c + " = requireRegisteredType(HEAPU32[((argTypes)>>>2)], \'parameter " + c + "\');\\nvar arg" + c + " = argType" + c + ".readValueFromPointer(args);\\nargs += argType" + c + "[\'argPackAdvance\'];\\nargTypes += 4;\\n";\n            return new Function("requireRegisteredType", "Module", "valueToHandle", "getMemory", d + ("var obj = new constructor(" + b + ");\\nreturn valueToHandle(obj);\\n}\\n"))(pc, C, V, () => B());\n          }, Bc = {}, Cc = (a) => 0 === a % 4 && (0 !== a % 100 || 0 === a % 400), Dc = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335], Ec = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];\n          function Fc(a, b, c, d, e, f, g) {\n            return G ? N(16, 1, a, b, c, d, e, f, g) : -52;\n          }\n          function Gc(a, b, c, d, e, f) {\n            if (G)\n              return N(17, 1, a, b, c, d, e, f);\n          }\n          var Ic = (a) => {\n            var b = Ab(a) + 1, c = Hc(b);\n            c && Cb(a, c, b);\n            return c;\n          }, Jc = {}, Lc = () => {\n            if (!Kc) {\n              var a = { USER: "web_user", LOGNAME: "web_user", PATH: "/", PWD: "/", HOME: "/home/web_user", LANG: ("object" == typeof navigator && navigator.languages && navigator.languages[0] || "C").replace("-", "_") + ".UTF-8", _: oa || "./this.program" }, b;\n              for (b in Jc)\n                void 0 === Jc[b] ? delete a[b] : a[b] = Jc[b];\n              var c = [];\n              for (b in a)\n                c.push(`${b}=${a[b]}`);\n              Kc = c;\n            }\n            return Kc;\n          }, Kc;\n          function Mc(a, b) {\n            if (G)\n              return N(18, 1, a, b);\n            a >>>= 0;\n            b >>>= 0;\n            var c = 0;\n            Lc().forEach((d, e) => {\n              var f = b + c;\n              e = B()[a + 4 * e >>> 2 >>> 0] = f;\n              for (f = 0; f < d.length; ++f)\n                p()[e++ >>> 0 >>> 0] = d.charCodeAt(f);\n              p()[e >>> 0 >>> 0] = 0;\n              c += d.length + 1;\n            });\n            return 0;\n          }\n          function Nc(a, b) {\n            if (G)\n              return N(19, 1, a, b);\n            a >>>= 0;\n            b >>>= 0;\n            var c = Lc();\n            B()[a >>> 2 >>> 0] = c.length;\n            var d = 0;\n            c.forEach((e) => d += e.length + 1);\n            B()[b >>> 2 >>> 0] = d;\n            return 0;\n          }\n          function Oc(a) {\n            return G ? N(20, 1, a) : 52;\n          }\n          function Pc(a, b, c, d) {\n            return G ? N(21, 1, a, b, c, d) : 52;\n          }\n          function Qc(a, b, c, d) {\n            return G ? N(22, 1, a, b, c, d) : 70;\n          }\n          var Rc = [null, [], []];\n          function Sc(a, b, c, d) {\n            if (G)\n              return N(23, 1, a, b, c, d);\n            b >>>= 0;\n            c >>>= 0;\n            d >>>= 0;\n            for (var e = 0, f = 0; f < c; f++) {\n              var g = B()[b >>> 2 >>> 0], h = B()[b + 4 >>> 2 >>> 0];\n              b += 8;\n              for (var k = 0; k < h; k++) {\n                var l = x()[g + k >>> 0], n = Rc[a];\n                0 === l || 10 === l ? ((1 === a ? za : L)(ab(n, 0)), n.length = 0) : n.push(l);\n              }\n              e += h;\n            }\n            B()[d >>> 2 >>> 0] = e;\n            return 0;\n          }\n          var Tc = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], Uc = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n          function Vc(a) {\n            var b = Array(Ab(a) + 1);\n            Bb(a, b, 0, b.length);\n            return b;\n          }\n          var Wc = (a, b) => {\n            p().set(a, b >>> 0);\n          };\n          function Xc(a, b, c, d) {\n            function e(m, w, y) {\n              for (m = "number" == typeof m ? m.toString() : m || ""; m.length < w; )\n                m = y[0] + m;\n              return m;\n            }\n            function f(m, w) {\n              return e(m, w, "0");\n            }\n            function g(m, w) {\n              function y(D) {\n                return 0 > D ? -1 : 0 < D ? 1 : 0;\n              }\n              var z;\n              0 === (z = y(m.getFullYear() - w.getFullYear())) && 0 === (z = y(m.getMonth() - w.getMonth())) && (z = y(m.getDate() - w.getDate()));\n              return z;\n            }\n            function h(m) {\n              switch (m.getDay()) {\n                case 0:\n                  return new Date(m.getFullYear() - 1, 11, 29);\n                case 1:\n                  return m;\n                case 2:\n                  return new Date(m.getFullYear(), 0, 3);\n                case 3:\n                  return new Date(\n                    m.getFullYear(),\n                    0,\n                    2\n                  );\n                case 4:\n                  return new Date(m.getFullYear(), 0, 1);\n                case 5:\n                  return new Date(m.getFullYear() - 1, 11, 31);\n                case 6:\n                  return new Date(m.getFullYear() - 1, 11, 30);\n              }\n            }\n            function k(m) {\n              var w = m.Oe;\n              for (m = new Date(new Date(m.Pe + 1900, 0, 1).getTime()); 0 < w; ) {\n                var y = m.getMonth(), z = (Cc(m.getFullYear()) ? Tc : Uc)[y];\n                if (w > z - m.getDate())\n                  w -= z - m.getDate() + 1, m.setDate(1), 11 > y ? m.setMonth(y + 1) : (m.setMonth(0), m.setFullYear(m.getFullYear() + 1));\n                else {\n                  m.setDate(m.getDate() + w);\n                  break;\n                }\n              }\n              y = new Date(m.getFullYear() + 1, 0, 4);\n              w = h(new Date(\n                m.getFullYear(),\n                0,\n                4\n              ));\n              y = h(y);\n              return 0 >= g(w, m) ? 0 >= g(y, m) ? m.getFullYear() + 1 : m.getFullYear() : m.getFullYear() - 1;\n            }\n            a >>>= 0;\n            b >>>= 0;\n            c >>>= 0;\n            d >>>= 0;\n            var l = B()[d + 40 >>> 2 >>> 0];\n            d = { yf: A()[d >>> 2 >>> 0], xf: A()[d + 4 >>> 2 >>> 0], Ve: A()[d + 8 >>> 2 >>> 0], Ye: A()[d + 12 >>> 2 >>> 0], We: A()[d + 16 >>> 2 >>> 0], Pe: A()[d + 20 >>> 2 >>> 0], Ke: A()[d + 24 >>> 2 >>> 0], Oe: A()[d + 28 >>> 2 >>> 0], Ef: A()[d + 32 >>> 2 >>> 0], wf: A()[d + 36 >>> 2 >>> 0], zf: l ? bb(l) : "" };\n            c = bb(c);\n            l = {\n              "%c": "%a %b %d %H:%M:%S %Y",\n              "%D": "%m/%d/%y",\n              "%F": "%Y-%m-%d",\n              "%h": "%b",\n              "%r": "%I:%M:%S %p",\n              "%R": "%H:%M",\n              "%T": "%H:%M:%S",\n              "%x": "%m/%d/%y",\n              "%X": "%H:%M:%S",\n              "%Ec": "%c",\n              "%EC": "%C",\n              "%Ex": "%m/%d/%y",\n              "%EX": "%H:%M:%S",\n              "%Ey": "%y",\n              "%EY": "%Y",\n              "%Od": "%d",\n              "%Oe": "%e",\n              "%OH": "%H",\n              "%OI": "%I",\n              "%Om": "%m",\n              "%OM": "%M",\n              "%OS": "%S",\n              "%Ou": "%u",\n              "%OU": "%U",\n              "%OV": "%V",\n              "%Ow": "%w",\n              "%OW": "%W",\n              "%Oy": "%y"\n            };\n            for (var n in l)\n              c = c.replace(new RegExp(n, "g"), l[n]);\n            var u = "Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "), v = "January February March April May June July August September October November December".split(" ");\n            l = { "%a": (m) => u[m.Ke].substring(0, 3), "%A": (m) => u[m.Ke], "%b": (m) => v[m.We].substring(0, 3), "%B": (m) => v[m.We], "%C": (m) => f((m.Pe + 1900) / 100 | 0, 2), "%d": (m) => f(m.Ye, 2), "%e": (m) => e(m.Ye, 2, " "), "%g": (m) => k(m).toString().substring(2), "%G": (m) => k(m), "%H": (m) => f(m.Ve, 2), "%I": (m) => {\n              m = m.Ve;\n              0 == m ? m = 12 : 12 < m && (m -= 12);\n              return f(m, 2);\n            }, "%j": (m) => {\n              for (var w = 0, y = 0; y <= m.We - 1; w += (Cc(m.Pe + 1900) ? Tc : Uc)[y++])\n                ;\n              return f(m.Ye + w, 3);\n            }, "%m": (m) => f(m.We + 1, 2), "%M": (m) => f(m.xf, 2), "%n": () => "\\n", "%p": (m) => 0 <= m.Ve && 12 > m.Ve ? "AM" : "PM", "%S": (m) => f(m.yf, 2), "%t": () => "	", "%u": (m) => m.Ke || 7, "%U": (m) => f(Math.floor((m.Oe + 7 - m.Ke) / 7), 2), "%V": (m) => {\n              var w = Math.floor((m.Oe + 7 - (m.Ke + 6) % 7) / 7);\n              2 >= (m.Ke + 371 - m.Oe - 2) % 7 && w++;\n              if (w)\n                53 == w && (y = (m.Ke + 371 - m.Oe) % 7, 4 == y || 3 == y && Cc(m.Pe) || (w = 1));\n              else {\n                w = 52;\n                var y = (m.Ke + 7 - m.Oe - 1) % 7;\n                (4 == y || 5 == y && Cc(m.Pe % 400 - 1)) && w++;\n              }\n              return f(w, 2);\n            }, "%w": (m) => m.Ke, "%W": (m) => f(Math.floor((m.Oe + 7 - (m.Ke + 6) % 7) / 7), 2), "%y": (m) => (m.Pe + 1900).toString().substring(2), "%Y": (m) => m.Pe + 1900, "%z": (m) => {\n              m = m.wf;\n              var w = 0 <= m;\n              m = Math.abs(m) / 60;\n              return (w ? "+" : "-") + String("0000" + (m / 60 * 100 + m % 60)).slice(-4);\n            }, "%Z": (m) => m.zf, "%%": () => "%" };\n            c = c.replace(/%%/g, "\\0\\0");\n            for (n in l)\n              c.includes(n) && (c = c.replace(new RegExp(n, "g"), l[n](d)));\n            c = c.replace(/\\0\\0/g, "%");\n            n = Vc(c);\n            if (n.length > b)\n              return 0;\n            Wc(n, a);\n            return n.length - 1;\n          }\n          M.Xe();\n          for (var Yc = Array(256), Zc = 0; 256 > Zc; ++Zc)\n            Yc[Zc] = String.fromCharCode(Zc);\n          Pb = Yc;\n          Tb = C.BindingError = class extends Error {\n            constructor(a) {\n              super(a);\n              this.name = "BindingError";\n            }\n          };\n          C.InternalError = class extends Error {\n            constructor(a) {\n              super(a);\n              this.name = "InternalError";\n            }\n          };\n          Object.assign(Wb.prototype, { get(a) {\n            return this.Le[a];\n          }, has(a) {\n            return void 0 !== this.Le[a];\n          }, Te(a) {\n            var b = this.Ze.pop() || this.Le.length;\n            this.Le[b] = a;\n            return b;\n          }, Ue(a) {\n            this.Le[a] = void 0;\n            this.Ze.push(a);\n          } });\n          T.Le.push({ value: void 0 }, { value: null }, { value: true }, { value: false });\n          T.Ie = T.Le.length;\n          C.count_emval_handles = () => {\n            for (var a = 0, b = T.Ie; b < T.Le.length; ++b)\n              void 0 !== T.Le[b] && ++a;\n            return a;\n          };\n          var $c = [cb, db, wb, yb, zb, Db, Eb, Fb, Gb, Hb, Ib, Jb, Kb, Lb, Mb, Nb, Fc, Gc, Mc, Nc, Oc, Pc, Qc, Sc], rg = {\n            u: function(a) {\n              a = new rb(a >>> 0);\n              a.hf() || (a.cf(true), qb--);\n              a.df(false);\n              pb.push(a);\n              ad(a.Se);\n              return a.jf();\n            },\n            M: () => {\n              Y(0, 0);\n              var a = pb.pop();\n              bd(a.Se);\n              Q = 0;\n            },\n            b: function() {\n              return vb([]);\n            },\n            n: function(a) {\n              return vb([a >>> 0]);\n            },\n            y: function(a, b) {\n              return vb([a >>> 0, b >>> 0]);\n            },\n            q: function(a, b, c) {\n              return vb([a >>> 0, b >>> 0, c >>> 0]);\n            },\n            zb: () => {\n              var a = pb.pop();\n              a || Aa("no exception to throw");\n              var b = a.Se;\n              a.pf() || (pb.push(a), a.df(true), a.cf(false), qb++);\n              Q = b;\n              throw Q;\n            },\n            t: function(a, b, c) {\n              a >>>= 0;\n              new rb(a).Xe(b >>> 0, c >>> 0);\n              Q = a;\n              qb++;\n              throw Q;\n            },\n            Sa: () => qb,\n            Wc: function(a) {\n              cd(a >>> 0, !ra, 1, !qa, 131072, false);\n              M.ef();\n            },\n            Ub: function(a) {\n              a >>>= 0;\n              G ? postMessage({ cmd: "cleanupThread", thread: a }) : ((a = M.Je[a]) || Aa(), M.af(a));\n            },\n            Mc: xb,\n            i: function(a) {\n              Q || (Q = a >>> 0);\n              throw Q;\n            },\n            Ab: yb,\n            ad: zb,\n            Hc: Db,\n            Jc: Eb,\n            Ac: Fb,\n            _c: Gb,\n            Tc: Hb,\n            Zc: Ib,\n            Wb: Jb,\n            Ic: Kb,\n            Fc: Lb,\n            $c: Mb,\n            Gc: Nb,\n            Zb: function(a, b, c, d, e) {\n              a >>>= 0;\n              b >>>= 0;\n              c >>>= 0;\n              b = R(b);\n              var f = -1 != b.indexOf("u");\n              f && (e = (1n << 64n) - 1n);\n              S(a, { name: b, fromWireType: (g) => g, toWireType: function(g, h) {\n                if ("bigint" != typeof h && "number" != typeof h)\n                  throw new TypeError(`Cannot convert "${Ob(h)}" to ${this.name}`);\n                if (h < d || h > e)\n                  throw new TypeError(`Passing a number "${Ob(h)}" from JS side to C/C++ side to an argument of type "${b}", which is outside the valid range [${d}, ${e}]!`);\n                return h;\n              }, argPackAdvance: 8, readValueFromPointer: Vb(b, c, !f), Re: null });\n            },\n            hd: function(a, b, c, d) {\n              a >>>= 0;\n              b = R(b >>> 0);\n              S(a, { name: b, fromWireType: function(e) {\n                return !!e;\n              }, toWireType: function(e, f) {\n                return f ? c : d;\n              }, argPackAdvance: 8, readValueFromPointer: function(e) {\n                return this.fromWireType(x()[e >>> 0]);\n              }, Re: null });\n            },\n            ed: function(a, b) {\n              a >>>= 0;\n              b = R(b >>> 0);\n              S(a, { name: b, fromWireType: (c) => {\n                var d = U(c);\n                Xb(c);\n                return d;\n              }, toWireType: (c, d) => V(d), argPackAdvance: 8, readValueFromPointer: Yb, Re: null });\n            },\n            Yb: function(a, b, c) {\n              a >>>= 0;\n              c >>>= 0;\n              b = R(b >>> 0);\n              S(a, { name: b, fromWireType: (d) => d, toWireType: (d, e) => e, argPackAdvance: 8, readValueFromPointer: Zb(b, c), Re: null });\n            },\n            wa: function(a, b, c, d, e) {\n              a >>>= 0;\n              c >>>= 0;\n              b = R(b >>> 0);\n              -1 === e && (e = 4294967295);\n              e = (h) => h;\n              if (0 === d) {\n                var f = 32 - 8 * c;\n                e = (h) => h << f >>> f;\n              }\n              var g = b.includes("unsigned") ? function(h, k) {\n                return k >>> 0;\n              } : function(h, k) {\n                return k;\n              };\n              S(a, { name: b, fromWireType: e, toWireType: g, argPackAdvance: 8, readValueFromPointer: Vb(b, c, 0 !== d), Re: null });\n            },\n            _: function(a, b, c) {\n              function d(f) {\n                var g = B()[f >>> 2 >>> 0];\n                f = B()[f + 4 >>> 2 >>> 0];\n                return new e(p().buffer, f, g);\n              }\n              a >>>= 0;\n              var e = [Int8Array, Uint8Array, Int16Array, Uint16Array, Int32Array, Uint32Array, Float32Array, Float64Array, BigInt64Array, BigUint64Array][b];\n              c = R(c >>> 0);\n              S(a, { name: c, fromWireType: d, argPackAdvance: 8, readValueFromPointer: d }, { qf: true });\n            },\n            _b: function(a, b) {\n              a >>>= 0;\n              b = R(b >>> 0);\n              var c = "std::string" === b;\n              S(a, { name: b, fromWireType: function(d) {\n                var e = B()[d >>> 2 >>> 0], f = d + 4;\n                if (c)\n                  for (var g = f, h = 0; h <= e; ++h) {\n                    var k = f + h;\n                    if (h == e || 0 == x()[k >>> 0]) {\n                      g = bb(g, k - g);\n                      if (void 0 === l)\n                        var l = g;\n                      else\n                        l += String.fromCharCode(0), l += g;\n                      g = k + 1;\n                    }\n                  }\n                else {\n                  l = Array(e);\n                  for (h = 0; h < e; ++h)\n                    l[h] = String.fromCharCode(x()[f + h >>> 0]);\n                  l = l.join("");\n                }\n                X(d);\n                return l;\n              }, toWireType: function(d, e) {\n                e instanceof ArrayBuffer && (e = new Uint8Array(e));\n                var f = "string" == typeof e;\n                if (!(f || e instanceof Uint8Array || e instanceof Uint8ClampedArray || e instanceof Int8Array))\n                  throw new Tb("Cannot pass non-string to std::string");\n                var g = c && f ? Ab(e) : e.length;\n                var h = Hc(4 + g + 1), k = h + 4;\n                B()[h >>> 2 >>> 0] = g;\n                if (c && f)\n                  Cb(e, k, g + 1);\n                else if (f)\n                  for (f = 0; f < g; ++f) {\n                    var l = e.charCodeAt(f);\n                    if (255 < l)\n                      throw X(k), new Tb("String has UTF-16 code units that do not fit in 8 bits");\n                    x()[k + f >>> 0] = l;\n                  }\n                else\n                  for (f = 0; f < g; ++f)\n                    x()[k + f >>> 0] = e[f];\n                null !== d && d.push(X, h);\n                return h;\n              }, argPackAdvance: 8, readValueFromPointer: $b, Re(d) {\n                X(d);\n              } });\n            },\n            Cb: function(a, b, c) {\n              a >>>= 0;\n              b >>>= 0;\n              c >>>= 0;\n              c = R(c);\n              if (2 === b) {\n                var d = bc;\n                var e = cc;\n                var f = dc;\n                var g = () => ea();\n                var h = 1;\n              } else\n                4 === b && (d = ec, e = fc, f = gc, g = () => B(), h = 2);\n              S(a, { name: c, fromWireType: (k) => {\n                for (var l = B()[k >>> 2 >>> 0], n = g(), u, v = k + 4, m = 0; m <= l; ++m) {\n                  var w = k + 4 + m * b;\n                  if (m == l || 0 == n[w >>> h])\n                    v = d(v, w - v), void 0 === u ? u = v : (u += String.fromCharCode(0), u += v), v = w + b;\n                }\n                X(k);\n                return u;\n              }, toWireType: (k, l) => {\n                if ("string" != typeof l)\n                  throw new Tb(`Cannot pass non-string to C++ string type ${c}`);\n                var n = f(l), u = Hc(4 + n + b);\n                B()[u >>> 2] = n >> h;\n                e(l, u + 4, n + b);\n                null !== k && k.push(X, u);\n                return u;\n              }, argPackAdvance: 8, readValueFromPointer: Yb, Re(k) {\n                X(k);\n              } });\n            },\n            kd: function(a, b) {\n              a >>>= 0;\n              b = R(b >>> 0);\n              S(a, {\n                rf: true,\n                name: b,\n                argPackAdvance: 0,\n                fromWireType: () => {\n                },\n                toWireType: () => {\n                }\n              });\n            },\n            dd: () => true,\n            Dc: function(a, b) {\n              a >>>= 0;\n              a == b >>> 0 ? setTimeout(() => jb()) : G ? postMessage({ targetThread: a, cmd: "checkMailbox" }) : (a = M.Je[a]) && a.postMessage({ cmd: "checkMailbox" });\n            },\n            Nc: function(a, b, c, d) {\n              b >>>= 0;\n              c /= 2;\n              nc.length = c;\n              d = d >>> 0 >>> 3;\n              for (var e = 0; e < c; e++)\n                nc[e] = Fa[d + 2 * e] ? Fa[d + 2 * e + 1] : ja()[d + 2 * e + 1 >>> 0];\n              a = $c[a];\n              M.nf = b;\n              b = a.apply(null, nc);\n              M.nf = 0;\n              return b;\n            },\n            Vc: ic,\n            cd: function(a) {\n              F && M.Je[a >>> 0].ref();\n            },\n            xd: function(a, b, c) {\n              b >>>= 0;\n              c >>>= 0;\n              a = U(a >>> 0);\n              b = pc(b, "emval::as");\n              var d = [], e = V(d);\n              B()[c >>> 2 >>> 0] = e;\n              return b.toWireType(d, a);\n            },\n            la: function(a, b, c, d, e) {\n              c >>>= 0;\n              d >>>= 0;\n              e >>>= 0;\n              a = sc[a >>> 0];\n              b = U(b >>> 0);\n              c = rc(c);\n              var f = [];\n              B()[d >>> 2 >>> 0] = V(f);\n              return a(b, c, f, e);\n            },\n            Fd: function(a, b, c, d) {\n              c >>>= 0;\n              d >>>= 0;\n              a = sc[a >>> 0];\n              b = U(b >>> 0);\n              c = rc(c);\n              a(b, c, null, d);\n            },\n            zc: Xb,\n            yd: function(a, b) {\n              b >>>= 0;\n              a = U(a >>> 0);\n              b = U(b);\n              return a == b;\n            },\n            Jd: function(a) {\n              a >>>= 0;\n              if (0 === a)\n                return V(tc());\n              a = rc(a);\n              return V(tc()[a]);\n            },\n            ma: function(a, b) {\n              var c = vc(a, b >>> 0), d = c[0];\n              b = d.name + "_$" + c.slice(1).map(function(n) {\n                return n.name;\n              }).join("_") + "$";\n              var e = xc[b];\n              if (void 0 !== e)\n                return e;\n              e = ["retType"];\n              for (var f = [d], g = "", h = 0; h < a - 1; ++h)\n                g += (0 !== h ? ", " : "") + "arg" + h, e.push("argType" + h), f.push(c[1 + h]);\n              var k = "return function " + wc("methodCaller_" + b) + "(handle, name, destructors, args) {\\n", l = 0;\n              for (h = 0; h < a - 1; ++h)\n                k += "    var arg" + h + " = argType" + h + ".readValueFromPointer(args" + (l ? "+" + l : "") + ");\\n", l += c[h + 1].argPackAdvance;\n              k += "    var rv = handle[name](" + g + ");\\n";\n              for (h = 0; h < a - 1; ++h)\n                c[h + 1].deleteObject && (k += "    argType" + h + ".deleteObject(arg" + h + ");\\n");\n              d.rf || (k += "    return retType.toWireType(destructors, rv);\\n");\n              e.push(k + "};\\n");\n              a = zc(e).apply(null, f);\n              e = uc(a);\n              return xc[b] = e;\n            },\n            Hd: function(a, b) {\n              b >>>= 0;\n              a = U(a >>> 0);\n              b = U(b);\n              return V(a[b]);\n            },\n            Q: function(a) {\n              a >>>= 0;\n              4 < a && (T.get(a).$e += 1);\n            },\n            Bd: function(a, b, c, d) {\n              c >>>= 0;\n              d >>>= 0;\n              a = U(a >>> 0);\n              var e = Bc[b];\n              e || (e = Ac(b), Bc[b] = e);\n              return e(a, c, d);\n            },\n            rd: function() {\n              return V([]);\n            },\n            td: function(a) {\n              a = U(a >>> 0);\n              for (var b = Array(a.length), c = 0; c < a.length; c++)\n                b[c] = a[c];\n              return V(b);\n            },\n            X: function(a) {\n              return V(rc(a >>> 0));\n            },\n            Ra: function() {\n              return V({});\n            },\n            Cd: function(a) {\n              a >>>= 0;\n              for (var b = U(a); b.length; ) {\n                var c = b.pop();\n                b.pop()(c);\n              }\n              Xb(a);\n            },\n            Ad: function(a, b, c) {\n              b >>>= 0;\n              c >>>= 0;\n              a = U(a >>> 0);\n              b = U(b);\n              c = U(c);\n              a[b] = c;\n            },\n            bb: function(a, b) {\n              b >>>= 0;\n              a = pc(a >>> 0, "_emval_take_value");\n              a = a.readValueFromPointer(b);\n              return V(a);\n            },\n            Qc: function(a, b) {\n              a = -9007199254740992 > a || 9007199254740992 < a ? NaN : Number(a);\n              b >>>= 0;\n              a = new Date(1e3 * a);\n              A()[b >>> 2 >>> 0] = a.getUTCSeconds();\n              A()[b + 4 >>> 2 >>> 0] = a.getUTCMinutes();\n              A()[b + 8 >>> 2 >>> 0] = a.getUTCHours();\n              A()[b + 12 >>> 2 >>> 0] = a.getUTCDate();\n              A()[b + 16 >>> 2 >>> 0] = a.getUTCMonth();\n              A()[b + 20 >>> 2 >>> 0] = a.getUTCFullYear() - 1900;\n              A()[b + 24 >>> 2 >>> 0] = a.getUTCDay();\n              a = (a.getTime() - Date.UTC(a.getUTCFullYear(), 0, 1, 0, 0, 0, 0)) / 864e5 | 0;\n              A()[b + 28 >>> 2 >>> 0] = a;\n            },\n            Rc: function(a, b) {\n              a = -9007199254740992 > a || 9007199254740992 < a ? NaN : Number(a);\n              b >>>= 0;\n              a = new Date(1e3 * a);\n              A()[b >>> 2 >>> 0] = a.getSeconds();\n              A()[b + 4 >>> 2 >>> 0] = a.getMinutes();\n              A()[b + 8 >>> 2 >>> 0] = a.getHours();\n              A()[b + 12 >>> 2 >>> 0] = a.getDate();\n              A()[b + 16 >>> 2 >>> 0] = a.getMonth();\n              A()[b + 20 >>> 2 >>> 0] = a.getFullYear() - 1900;\n              A()[b + 24 >>> 2 >>> 0] = a.getDay();\n              var c = (Cc(a.getFullYear()) ? Dc : Ec)[a.getMonth()] + a.getDate() - 1 | 0;\n              A()[b + 28 >>> 2 >>> 0] = c;\n              A()[b + 36 >>> 2 >>> 0] = -(60 * a.getTimezoneOffset());\n              c = new Date(a.getFullYear(), 6, 1).getTimezoneOffset();\n              var d = new Date(a.getFullYear(), 0, 1).getTimezoneOffset();\n              a = (c != d && a.getTimezoneOffset() == Math.min(d, c)) | 0;\n              A()[b + 32 >>> 2 >>> 0] = a;\n            },\n            Sc: function(a) {\n              a >>>= 0;\n              var b = new Date(A()[a + 20 >>> 2 >>> 0] + 1900, A()[a + 16 >>> 2 >>> 0], A()[a + 12 >>> 2 >>> 0], A()[a + 8 >>> 2 >>> 0], A()[a + 4 >>> 2 >>> 0], A()[a >>> 2 >>> 0], 0), c = A()[a + 32 >>> 2 >>> 0], d = b.getTimezoneOffset(), e = new Date(\n                b.getFullYear(),\n                6,\n                1\n              ).getTimezoneOffset(), f = new Date(b.getFullYear(), 0, 1).getTimezoneOffset(), g = Math.min(f, e);\n              0 > c ? A()[a + 32 >>> 2 >>> 0] = Number(e != f && g == d) : 0 < c != (g == d) && (e = Math.max(f, e), b.setTime(b.getTime() + 6e4 * ((0 < c ? g : e) - d)));\n              A()[a + 24 >>> 2 >>> 0] = b.getDay();\n              c = (Cc(b.getFullYear()) ? Dc : Ec)[b.getMonth()] + b.getDate() - 1 | 0;\n              A()[a + 28 >>> 2 >>> 0] = c;\n              A()[a >>> 2 >>> 0] = b.getSeconds();\n              A()[a + 4 >>> 2 >>> 0] = b.getMinutes();\n              A()[a + 8 >>> 2 >>> 0] = b.getHours();\n              A()[a + 12 >>> 2 >>> 0] = b.getDate();\n              A()[a + 16 >>> 2 >>> 0] = b.getMonth();\n              A()[a + 20 >>> 2 >>> 0] = b.getYear();\n              return BigInt(b.getTime() / 1e3);\n            },\n            Oc: Fc,\n            Pc: Gc,\n            Cc: function(a, b, c) {\n              function d(l) {\n                return (l = l.toTimeString().match(/\\(([A-Za-z ]+)\\)$/)) ? l[1] : "GMT";\n              }\n              a >>>= 0;\n              b >>>= 0;\n              c >>>= 0;\n              var e = (/* @__PURE__ */ new Date()).getFullYear(), f = new Date(e, 0, 1), g = new Date(e, 6, 1);\n              e = f.getTimezoneOffset();\n              var h = g.getTimezoneOffset(), k = Math.max(e, h);\n              B()[a >>> 2 >>> 0] = 60 * k;\n              A()[b >>> 2 >>> 0] = Number(e != h);\n              a = d(f);\n              b = d(g);\n              a = Ic(a);\n              b = Ic(b);\n              h < e ? (B()[c >>> 2 >>> 0] = a, B()[c + 4 >>> 2 >>> 0] = b) : (B()[c >>> 2 >>> 0] = b, B()[c + 4 >>> 2 >>> 0] = a);\n            },\n            aa: () => {\n              Aa("");\n            },\n            Vb: () => {\n            },\n            Xb: () => Date.now(),\n            bd: () => {\n              La += 1;\n              throw "unwind";\n            },\n            Ec: function() {\n              return 4294901760;\n            },\n            va: () => performance.timeOrigin + performance.now(),\n            jb: () => F ? (init_os(), __toCommonJS(os_exports)).cpus().length : navigator.hardwareConcurrency,\n            Bc: function(a) {\n              a >>>= 0;\n              var b = x().length;\n              if (a <= b || 4294901760 < a)\n                return false;\n              for (var c = 1; 4 >= c; c *= 2) {\n                var d = b * (1 + 0.2 / c);\n                d = Math.min(d, a + 100663296);\n                var e = Math;\n                d = Math.max(a, d);\n                a: {\n                  e = (e.min.call(e, 4294901760, d + (65536 - d % 65536) % 65536) - q.buffer.byteLength + 65535) / 65536;\n                  try {\n                    q.grow(e);\n                    t();\n                    var f = 1;\n                    break a;\n                  } catch (g) {\n                  }\n                  f = void 0;\n                }\n                if (f)\n                  return true;\n              }\n              return false;\n            },\n            Xc: Mc,\n            Yc: Nc,\n            Lc: eb,\n            Bb: Oc,\n            Tb: Pc,\n            Uc: Qc,\n            Sb: Sc,\n            ib: dd,\n            fd: ed,\n            sa: fd,\n            G: gd,\n            pa: hd,\n            ga: jd,\n            gd: kd,\n            nd: ld,\n            N: md,\n            z: nd,\n            c: od,\n            dc: pd,\n            ya: qd,\n            g: rd,\n            Eb: sd,\n            d: td,\n            Y: ud,\n            j: vd,\n            id: wd,\n            k: xd,\n            r: yd,\n            s: zd,\n            p: Ad,\n            Aa: Bd,\n            Va: Cd,\n            ia: Dd,\n            Pb: Ed,\n            $a: Fd,\n            Ib: Gd,\n            nb: Hd,\n            ic: Id,\n            xc: Jd,\n            fc: Kd,\n            gc: Ld,\n            $b: Md,\n            ka: Nd,\n            yb: Od,\n            Ba: Pd,\n            Db: Qd,\n            da: Rd,\n            hc: Sd,\n            Pa: Td,\n            F: Ud,\n            L: Vd,\n            Gb: Wd,\n            sd: Xd,\n            oa: Yd,\n            O: Zd,\n            $: $d,\n            V: ae,\n            A: be,\n            Fb: ce,\n            ec: de,\n            C: ee,\n            Hb: fe,\n            qd: ge,\n            Qa: he,\n            eb: ie,\n            jc: je,\n            ac: ke,\n            Mb: le,\n            P: me,\n            H: ne,\n            D: oe,\n            ld: pe,\n            lb: qe,\n            R: re,\n            e: se,\n            Xa: te,\n            l: ue,\n            xa: ve,\n            Wa: we,\n            vb: xe,\n            h: ye,\n            yc: ze,\n            ca: Ae,\n            fb: Be,\n            za: Ce,\n            mb: De,\n            gb: Ee,\n            f: Fe,\n            vc: Ge,\n            ud: He,\n            o: Ie,\n            sc: Je,\n            m: Ke,\n            wc: Le,\n            rc: Me,\n            wd: Ne,\n            w: Oe,\n            Na: Pe,\n            tb: Qe,\n            Ma: Re,\n            Kb: Se,\n            B: Te,\n            E: Ue,\n            W: Ve,\n            Ua: We,\n            oc: Xe,\n            Dd: Ye,\n            ub: Ze,\n            ua: $e,\n            ja: af,\n            S: bf,\n            ab: cf,\n            Ha: df,\n            Gd: ef,\n            kb: ff,\n            Da: gf,\n            lc: hf,\n            Ca: jf,\n            Ea: kf,\n            jd: lf,\n            Ed: mf,\n            na: nf,\n            vd: of,\n            Ia: pf,\n            Ga: qf,\n            qc: rf,\n            Fa: sf,\n            Ja: tf,\n            pb: uf,\n            ha: vf,\n            ta: wf,\n            kc: xf,\n            pc: yf,\n            Jb: zf,\n            Za: Af,\n            fa: Bf,\n            Rb: Cf,\n            pd: Df,\n            U: Ef,\n            wb: Ff,\n            db: Gf,\n            Ta: Hf,\n            hb: If,\n            J: Jf,\n            T: Kf,\n            xb: Lf,\n            od: Mf,\n            uc: Nf,\n            ba: Of,\n            ob: Pf,\n            ra: Qf,\n            nc: Rf,\n            bc: Sf,\n            Id: Tf,\n            x: Uf,\n            cb: Vf,\n            zd: Wf,\n            Nb: Xf,\n            mc: Yf,\n            Kd: Zf,\n            Ob: $f,\n            Lb: ag,\n            _a: bg,\n            Qb: cg,\n            Ka: dg,\n            cc: eg,\n            Z: fg,\n            tc: gg,\n            K: hg,\n            md: ig,\n            Ya: jg,\n            qa: kg,\n            I: lg,\n            rb: mg,\n            La: ng,\n            Oa: og,\n            qb: pg,\n            sb: qg,\n            v: function(a) {\n              return a >>> 0;\n            },\n            a: q || C.wasmMemory,\n            Kc: Xc,\n            ea: function(a, b, c, d) {\n              return Xc(a >>> 0, b >>> 0, c >>> 0, d >>> 0);\n            }\n          }, Z = function() {\n            var a = { a: rg };\n            Na++;\n            Wa(a, function(b) {\n              var c = b.module;\n              Z = b.instance.exports;\n              Z = sg();\n              M.ff.push(Z.oe);\n              nb = Z.re;\n              Ja.unshift(Z.Ld);\n              Ba = c;\n              Qa();\n            }).catch(ma);\n            return {};\n          }();\n          C._OrtInit = (a, b) => (C._OrtInit = Z.Md)(a, b);\n          C._OrtGetLastError = (a, b) => (C._OrtGetLastError = Z.Nd)(a, b);\n          C._OrtCreateSessionOptions = (a, b, c, d, e, f, g, h, k, l) => (C._OrtCreateSessionOptions = Z.Od)(a, b, c, d, e, f, g, h, k, l);\n          C._OrtAppendExecutionProvider = (a, b) => (C._OrtAppendExecutionProvider = Z.Pd)(a, b);\n          C._OrtAddFreeDimensionOverride = (a, b, c) => (C._OrtAddFreeDimensionOverride = Z.Qd)(a, b, c);\n          C._OrtAddSessionConfigEntry = (a, b, c) => (C._OrtAddSessionConfigEntry = Z.Rd)(a, b, c);\n          C._OrtReleaseSessionOptions = (a) => (C._OrtReleaseSessionOptions = Z.Sd)(a);\n          C._OrtCreateSession = (a, b, c) => (C._OrtCreateSession = Z.Td)(a, b, c);\n          C._OrtReleaseSession = (a) => (C._OrtReleaseSession = Z.Ud)(a);\n          C._OrtGetInputOutputCount = (a, b, c) => (C._OrtGetInputOutputCount = Z.Vd)(a, b, c);\n          C._OrtGetInputName = (a, b) => (C._OrtGetInputName = Z.Wd)(a, b);\n          C._OrtGetOutputName = (a, b) => (C._OrtGetOutputName = Z.Xd)(a, b);\n          C._OrtFree = (a) => (C._OrtFree = Z.Yd)(a);\n          C._OrtCreateTensor = (a, b, c, d, e, f) => (C._OrtCreateTensor = Z.Zd)(a, b, c, d, e, f);\n          C._OrtGetTensorData = (a, b, c, d, e) => (C._OrtGetTensorData = Z._d)(a, b, c, d, e);\n          C._OrtReleaseTensor = (a) => (C._OrtReleaseTensor = Z.$d)(a);\n          C._OrtCreateRunOptions = (a, b, c, d) => (C._OrtCreateRunOptions = Z.ae)(a, b, c, d);\n          C._OrtAddRunConfigEntry = (a, b, c) => (C._OrtAddRunConfigEntry = Z.be)(a, b, c);\n          C._OrtReleaseRunOptions = (a) => (C._OrtReleaseRunOptions = Z.ce)(a);\n          C._OrtCreateBinding = (a) => (C._OrtCreateBinding = Z.de)(a);\n          C._OrtBindInput = (a, b, c) => (C._OrtBindInput = Z.ee)(a, b, c);\n          C._OrtBindOutput = (a, b, c, d) => (C._OrtBindOutput = Z.fe)(a, b, c, d);\n          C._OrtClearBoundOutputs = (a) => (C._OrtClearBoundOutputs = Z.ge)(a);\n          C._OrtReleaseBinding = (a) => (C._OrtReleaseBinding = Z.he)(a);\n          C._OrtRunWithBinding = (a, b, c, d, e) => (C._OrtRunWithBinding = Z.ie)(a, b, c, d, e);\n          C._OrtRun = (a, b, c, d, e, f, g, h) => (C._OrtRun = Z.je)(a, b, c, d, e, f, g, h);\n          C._OrtEndProfiling = (a) => (C._OrtEndProfiling = Z.ke)(a);\n          var ib = C._pthread_self = () => (ib = C._pthread_self = Z.le)(), Hc = C._malloc = (a) => (Hc = C._malloc = Z.me)(a), X = C._free = (a) => (X = C._free = Z.ne)(a);\n          C.__emscripten_tls_init = () => (C.__emscripten_tls_init = Z.oe)();\n          var oc = (a) => (oc = Z.pe)(a);\n          C.__embind_initialize_bindings = () => (C.__embind_initialize_bindings = Z.qe)();\n          var cd = C.__emscripten_thread_init = (a, b, c, d, e, f) => (cd = C.__emscripten_thread_init = Z.se)(a, b, c, d, e, f);\n          C.__emscripten_thread_crashed = () => (C.__emscripten_thread_crashed = Z.te)();\n          var mc = (a, b, c, d) => (mc = Z.ue)(a, b, c, d), hb = (a) => (hb = Z.ve)(a), ob = C.__emscripten_thread_exit = (a) => (ob = C.__emscripten_thread_exit = Z.we)(a), jc = C.__emscripten_check_mailbox = () => (jc = C.__emscripten_check_mailbox = Z.xe)(), Y = (a, b) => (Y = Z.ye)(a, b), tb = (a) => (tb = Z.ze)(a), lb = (a, b) => (lb = Z.Ae)(a, b), W = () => (W = Z.Be)(), O = (a) => (O = Z.Ce)(a), lc = (a) => (lc = Z.De)(a), bd = (a) => (bd = Z.Ee)(a), ad = (a) => (ad = Z.Fe)(a), ub = (a, b, c) => (ub = Z.Ge)(a, b, c), sb = (a) => (sb = Z.He)(a);\n          function td(a, b, c, d) {\n            var e = W();\n            try {\n              return P(a)(b, c, d);\n            } catch (f) {\n              O(e);\n              if (f !== f + 0)\n                throw f;\n              Y(1, 0);\n            }\n          }\n          function rd(a, b, c) {\n            var d = W();\n            try {\n              return P(a)(b, c);\n            } catch (e) {\n              O(d);\n              if (e !== e + 0)\n                throw e;\n              Y(1, 0);\n            }\n          }\n          function ye(a, b, c) {\n            var d = W();\n            try {\n              P(a)(b, c);\n            } catch (e) {\n              O(d);\n              if (e !== e + 0)\n                throw e;\n              Y(1, 0);\n            }\n          }\n          function od(a, b) {\n            var c = W();\n            try {\n              return P(a)(b);\n            } catch (d) {\n              O(c);\n              if (d !== d + 0)\n                throw d;\n              Y(1, 0);\n            }\n          }\n          function ue(a, b) {\n            var c = W();\n            try {\n              P(a)(b);\n            } catch (d) {\n              O(c);\n              if (d !== d + 0)\n                throw d;\n              Y(1, 0);\n            }\n          }\n          function Ud(a, b, c, d) {\n            var e = W();\n            try {\n              return P(a)(b, c, d);\n            } catch (f) {\n              O(e);\n              if (f !== f + 0)\n                throw f;\n              Y(1, 0);\n            }\n          }\n          function se(a) {\n            var b = W();\n            try {\n              P(a)();\n            } catch (c) {\n              O(b);\n              if (c !== c + 0)\n                throw c;\n              Y(1, 0);\n            }\n          }\n          function yd(a, b, c, d, e, f, g) {\n            var h = W();\n            try {\n              return P(a)(b, c, d, e, f, g);\n            } catch (k) {\n              O(h);\n              if (k !== k + 0)\n                throw k;\n              Y(1, 0);\n            }\n          }\n          function xd(a, b, c, d, e, f) {\n            var g = W();\n            try {\n              return P(a)(b, c, d, e, f);\n            } catch (h) {\n              O(g);\n              if (h !== h + 0)\n                throw h;\n              Y(1, 0);\n            }\n          }\n          function vd(a, b, c, d, e) {\n            var f = W();\n            try {\n              return P(a)(b, c, d, e);\n            } catch (g) {\n              O(f);\n              if (g !== g + 0)\n                throw g;\n              Y(1, 0);\n            }\n          }\n          function Fe(a, b, c, d) {\n            var e = W();\n            try {\n              P(a)(b, c, d);\n            } catch (f) {\n              O(e);\n              if (f !== f + 0)\n                throw f;\n              Y(1, 0);\n            }\n          }\n          function Ie(a, b, c, d, e) {\n            var f = W();\n            try {\n              P(a)(b, c, d, e);\n            } catch (g) {\n              O(f);\n              if (g !== g + 0)\n                throw g;\n              Y(1, 0);\n            }\n          }\n          function nd(a) {\n            var b = W();\n            try {\n              return P(a)();\n            } catch (c) {\n              O(b);\n              if (c !== c + 0)\n                throw c;\n              Y(1, 0);\n            }\n          }\n          function be(a, b, c) {\n            var d = W();\n            try {\n              return P(a)(b, c);\n            } catch (e) {\n              O(d);\n              if (e !== e + 0)\n                throw e;\n              Y(1, 0);\n            }\n          }\n          function Uf(a, b, c) {\n            var d = W();\n            try {\n              P(a)(b, c);\n            } catch (e) {\n              O(d);\n              if (e !== e + 0)\n                throw e;\n              Y(1, 0);\n            }\n          }\n          function Ke(a, b, c, d, e, f) {\n            var g = W();\n            try {\n              P(a)(b, c, d, e, f);\n            } catch (h) {\n              O(g);\n              if (h !== h + 0)\n                throw h;\n              Y(1, 0);\n            }\n          }\n          function zd(a, b, c, d, e, f, g, h) {\n            var k = W();\n            try {\n              return P(a)(b, c, d, e, f, g, h);\n            } catch (l) {\n              O(k);\n              if (l !== l + 0)\n                throw l;\n              Y(1, 0);\n            }\n          }\n          function jd(a, b) {\n            var c = W();\n            try {\n              return P(a)(b);\n            } catch (d) {\n              O(c);\n              if (d !== d + 0)\n                throw d;\n              Y(1, 0);\n            }\n          }\n          function me(a, b) {\n            var c = W();\n            try {\n              return P(a)(b);\n            } catch (d) {\n              O(c);\n              if (d !== d + 0)\n                throw d;\n              Y(1, 0);\n              return 0n;\n            }\n          }\n          function dd(a, b) {\n            var c = W();\n            try {\n              return P(a)(b);\n            } catch (d) {\n              O(c);\n              if (d !== d + 0)\n                throw d;\n              Y(1, 0);\n            }\n          }\n          function Ad(a, b, c, d, e, f, g, h, k) {\n            var l = W();\n            try {\n              return P(a)(b, c, d, e, f, g, h, k);\n            } catch (n) {\n              O(l);\n              if (n !== n + 0)\n                throw n;\n              Y(1, 0);\n            }\n          }\n          function Jf(a, b, c, d) {\n            var e = W();\n            try {\n              P(a)(b, c, d);\n            } catch (f) {\n              O(e);\n              if (f !== f + 0)\n                throw f;\n              Y(1, 0);\n            }\n          }\n          function Oe(a, b, c, d, e, f, g) {\n            var h = W();\n            try {\n              P(a)(b, c, d, e, f, g);\n            } catch (k) {\n              O(h);\n              if (k !== k + 0)\n                throw k;\n              Y(1, 0);\n            }\n          }\n          function Zf(a, b, c, d) {\n            var e = W();\n            try {\n              P(a)(b, c, d);\n            } catch (f) {\n              O(e);\n              if (f !== f + 0)\n                throw f;\n              Y(1, 0);\n            }\n          }\n          function Cf(a, b, c, d, e, f, g) {\n            var h = W();\n            try {\n              P(a)(b, c, d, e, f, g);\n            } catch (k) {\n              O(h);\n              if (k !== k + 0)\n                throw k;\n              Y(1, 0);\n            }\n          }\n          function Te(a, b, c, d, e, f, g, h) {\n            var k = W();\n            try {\n              P(a)(b, c, d, e, f, g, h);\n            } catch (l) {\n              O(k);\n              if (l !== l + 0)\n                throw l;\n              Y(1, 0);\n            }\n          }\n          function Of(a, b, c, d, e) {\n            var f = W();\n            try {\n              P(a)(b, c, d, e);\n            } catch (g) {\n              O(f);\n              if (g !== g + 0)\n                throw g;\n              Y(1, 0);\n            }\n          }\n          function Bd(a, b, c, d, e, f, g, h, k, l) {\n            var n = W();\n            try {\n              return P(a)(b, c, d, e, f, g, h, k, l);\n            } catch (u) {\n              O(n);\n              if (u !== u + 0)\n                throw u;\n              Y(1, 0);\n            }\n          }\n          function Ue(a, b, c, d, e, f, g, h, k) {\n            var l = W();\n            try {\n              P(a)(b, c, d, e, f, g, h, k);\n            } catch (n) {\n              O(l);\n              if (n !== n + 0)\n                throw n;\n              Y(1, 0);\n            }\n          }\n          function Od(a, b, c, d, e, f, g, h, k, l, n) {\n            var u = W();\n            try {\n              return P(a)(b, c, d, e, f, g, h, k, l, n);\n            } catch (v) {\n              O(u);\n              if (v !== v + 0)\n                throw v;\n              Y(1, 0);\n            }\n          }\n          function Lf(a, b, c, d, e, f, g) {\n            var h = W();\n            try {\n              P(a)(b, c, d, e, f, g);\n            } catch (k) {\n              O(h);\n              if (k !== k + 0)\n                throw k;\n              Y(1, 0);\n            }\n          }\n          function Ve(a, b, c, d, e, f, g, h, k, l) {\n            var n = W();\n            try {\n              P(a)(b, c, d, e, f, g, h, k, l);\n            } catch (u) {\n              O(n);\n              if (u !== u + 0)\n                throw u;\n              Y(1, 0);\n            }\n          }\n          function ne(a, b, c) {\n            var d = W();\n            try {\n              return P(a)(b, c);\n            } catch (e) {\n              O(d);\n              if (e !== e + 0)\n                throw e;\n              Y(1, 0);\n              return 0n;\n            }\n          }\n          function ze(a, b, c, d) {\n            var e = W();\n            try {\n              P(a)(b, c, d);\n            } catch (f) {\n              O(e);\n              if (f !== f + 0)\n                throw f;\n              Y(1, 0);\n            }\n          }\n          function Jd(a, b, c, d, e, f, g, h, k) {\n            var l = W();\n            try {\n              return P(a)(b, c, d, e, f, g, h, k);\n            } catch (n) {\n              O(l);\n              if (n !== n + 0)\n                throw n;\n              Y(1, 0);\n            }\n          }\n          function Dd(a, b, c, d, e, f, g, h, k, l, n, u) {\n            var v = W();\n            try {\n              return P(a)(b, c, d, e, f, g, h, k, l, n, u);\n            } catch (m) {\n              O(v);\n              if (m !== m + 0)\n                throw m;\n              Y(1, 0);\n            }\n          }\n          function cf(a, b, c, d, e, f, g, h, k, l, n, u, v, m) {\n            var w = W();\n            try {\n              P(a)(b, c, d, e, f, g, h, k, l, n, u, v, m);\n            } catch (y) {\n              O(w);\n              if (y !== y + 0)\n                throw y;\n              Y(1, 0);\n            }\n          }\n          function Tf(a, b, c, d, e, f, g, h, k, l, n, u) {\n            var v = W();\n            try {\n              P(a)(b, c, d, e, f, g, h, k, l, n, u);\n            } catch (m) {\n              O(v);\n              if (m !== m + 0)\n                throw m;\n              Y(1, 0);\n            }\n          }\n          function Ff(a, b, c, d, e, f, g, h, k, l, n, u) {\n            var v = W();\n            try {\n              P(a)(b, c, d, e, f, g, h, k, l, n, u);\n            } catch (m) {\n              O(v);\n              if (m !== m + 0)\n                throw m;\n              Y(1, 0);\n            }\n          }\n          function Kf(a, b, c, d, e) {\n            var f = W();\n            try {\n              P(a)(b, c, d, e);\n            } catch (g) {\n              O(f);\n              if (g !== g + 0)\n                throw g;\n              Y(1, 0);\n            }\n          }\n          function xe(a, b, c, d, e, f, g) {\n            var h = W();\n            try {\n              P(a)(b, c, d, e, f, g);\n            } catch (k) {\n              O(h);\n              if (k !== k + 0)\n                throw k;\n              Y(1, 0);\n            }\n          }\n          function If(a, b, c, d, e, f, g, h, k) {\n            var l = W();\n            try {\n              P(a)(b, c, d, e, f, g, h, k);\n            } catch (n) {\n              O(l);\n              if (n !== n + 0)\n                throw n;\n              Y(1, 0);\n            }\n          }\n          function Ee(a, b, c, d, e, f, g) {\n            var h = W();\n            try {\n              P(a)(b, c, d, e, f, g);\n            } catch (k) {\n              O(h);\n              if (k !== k + 0)\n                throw k;\n              Y(1, 0);\n            }\n          }\n          function Le(a, b, c, d, e, f, g, h, k, l, n) {\n            var u = W();\n            try {\n              P(a)(b, c, d, e, f, g, h, k, l, n);\n            } catch (v) {\n              O(u);\n              if (v !== v + 0)\n                throw v;\n              Y(1, 0);\n            }\n          }\n          function jg(a, b, c, d, e, f, g, h) {\n            var k = W();\n            try {\n              P(a)(b, c, d, e, f, g, h);\n            } catch (l) {\n              O(k);\n              if (l !== l + 0)\n                throw l;\n              Y(1, 0);\n            }\n          }\n          function oe(a, b, c, d) {\n            var e = W();\n            try {\n              return P(a)(b, c, d);\n            } catch (f) {\n              O(e);\n              if (f !== f + 0)\n                throw f;\n              Y(1, 0);\n              return 0n;\n            }\n          }\n          function Ge(a, b, c, d, e) {\n            var f = W();\n            try {\n              P(a)(b, c, d, e);\n            } catch (g) {\n              O(f);\n              if (g !== g + 0)\n                throw g;\n              Y(1, 0);\n            }\n          }\n          function ef(a, b, c, d, e, f, g, h, k, l, n, u, v, m, w, y, z) {\n            var D = W();\n            try {\n              P(a)(b, c, d, e, f, g, h, k, l, n, u, v, m, w, y, z);\n            } catch (E) {\n              O(D);\n              if (E !== E + 0)\n                throw E;\n              Y(1, 0);\n            }\n          }\n          function Nf(a, b, c, d, e, f, g, h, k, l, n) {\n            var u = W();\n            try {\n              P(a)(b, c, d, e, f, g, h, k, l, n);\n            } catch (v) {\n              O(u);\n              if (v !== v + 0)\n                throw v;\n              Y(1, 0);\n            }\n          }\n          function gg(a, b, c, d, e, f, g, h, k, l, n, u, v, m, w, y) {\n            var z = W();\n            try {\n              P(a)(b, c, d, e, f, g, h, k, l, n, u, v, m, w, y);\n            } catch (D) {\n              O(z);\n              if (D !== D + 0)\n                throw D;\n              Y(1, 0);\n            }\n          }\n          function Bf(a, b, c, d, e, f) {\n            var g = W();\n            try {\n              P(a)(b, c, d, e, f);\n            } catch (h) {\n              O(g);\n              if (h !== h + 0)\n                throw h;\n              Y(1, 0);\n            }\n          }\n          function cg(a, b, c, d, e, f, g, h, k) {\n            var l = W();\n            try {\n              P(a)(b, c, d, e, f, g, h, k);\n            } catch (n) {\n              O(l);\n              if (n !== n + 0)\n                throw n;\n              Y(1, 0);\n            }\n          }\n          function Vd(a, b, c, d, e) {\n            var f = W();\n            try {\n              return P(a)(b, c, d, e);\n            } catch (g) {\n              O(f);\n              if (g !== g + 0)\n                throw g;\n              Y(1, 0);\n            }\n          }\n          function $d(a, b, c, d, e, f, g, h, k, l, n, u, v, m) {\n            var w = W();\n            try {\n              return P(a)(b, c, d, e, f, g, h, k, l, n, u, v, m);\n            } catch (y) {\n              O(w);\n              if (y !== y + 0)\n                throw y;\n              Y(1, 0);\n            }\n          }\n          function hg(a, b) {\n            var c = W();\n            try {\n              P(a)(b);\n            } catch (d) {\n              O(c);\n              if (d !== d + 0)\n                throw d;\n              Y(1, 0);\n            }\n          }\n          function re(a, b, c) {\n            var d = W();\n            try {\n              return P(a)(b, c);\n            } catch (e) {\n              O(d);\n              if (e !== e + 0)\n                throw e;\n              Y(1, 0);\n              return 0n;\n            }\n          }\n          function Zd(a, b, c, d, e, f, g, h, k, l) {\n            var n = W();\n            try {\n              return P(a)(b, c, d, e, f, g, h, k, l);\n            } catch (u) {\n              O(n);\n              if (u !== u + 0)\n                throw u;\n              Y(1, 0);\n            }\n          }\n          function md(a, b, c, d, e) {\n            var f = W();\n            try {\n              return P(a)(b, c, d, e);\n            } catch (g) {\n              O(f);\n              if (g !== g + 0)\n                throw g;\n              Y(1, 0);\n            }\n          }\n          function Ze(a, b, c, d, e, f, g, h, k, l, n, u, v, m, w) {\n            var y = W();\n            try {\n              P(a)(b, c, d, e, f, g, h, k, l, n, u, v, m, w);\n            } catch (z) {\n              O(y);\n              if (z !== z + 0)\n                throw z;\n              Y(1, 0);\n            }\n          }\n          function te(a, b, c, d, e) {\n            var f = W();\n            try {\n              P(a)(b, c, d, e);\n            } catch (g) {\n              O(f);\n              if (g !== g + 0)\n                throw g;\n              Y(1, 0);\n            }\n          }\n          function Je(a, b, c, d, e, f, g) {\n            var h = W();\n            try {\n              P(a)(b, c, d, e, f, g);\n            } catch (k) {\n              O(h);\n              if (k !== k + 0)\n                throw k;\n              Y(1, 0);\n            }\n          }\n          function Be(a, b, c, d, e) {\n            var f = W();\n            try {\n              P(a)(b, c, d, e);\n            } catch (g) {\n              O(f);\n              if (g !== g + 0)\n                throw g;\n              Y(1, 0);\n            }\n          }\n          function Me(a, b, c, d, e, f, g, h) {\n            var k = W();\n            try {\n              P(a)(b, c, d, e, f, g, h);\n            } catch (l) {\n              O(k);\n              if (l !== l + 0)\n                throw l;\n              Y(1, 0);\n            }\n          }\n          function mf(a, b, c, d, e, f, g, h, k, l, n) {\n            var u = W();\n            try {\n              P(a)(b, c, d, e, f, g, h, k, l, n);\n            } catch (v) {\n              O(u);\n              if (v !== v + 0)\n                throw v;\n              Y(1, 0);\n            }\n          }\n          function Ed(a, b, c, d, e, f, g, h, k, l, n, u, v, m, w, y, z) {\n            var D = W();\n            try {\n              return P(a)(b, c, d, e, f, g, h, k, l, n, u, v, m, w, y, z);\n            } catch (E) {\n              O(D);\n              if (E !== E + 0)\n                throw E;\n              Y(1, 0);\n            }\n          }\n          function bf(a, b, c, d, e, f, g, h, k, l, n, u, v) {\n            var m = W();\n            try {\n              P(a)(b, c, d, e, f, g, h, k, l, n, u, v);\n            } catch (w) {\n              O(m);\n              if (w !== w + 0)\n                throw w;\n              Y(1, 0);\n            }\n          }\n          function he(a, b) {\n            var c = W();\n            try {\n              return P(a)(b);\n            } catch (d) {\n              O(c);\n              if (d !== d + 0)\n                throw d;\n              Y(1, 0);\n            }\n          }\n          function Fd(a, b, c, d, e, f, g, h, k, l, n, u, v, m, w, y, z, D, E, I) {\n            var J = W();\n            try {\n              return P(a)(b, c, d, e, f, g, h, k, l, n, u, v, m, w, y, z, D, E, I);\n            } catch (K) {\n              O(J);\n              if (K !== K + 0)\n                throw K;\n              Y(1, 0);\n            }\n          }\n          function bg(a, b, c, d, e, f, g, h, k, l) {\n            var n = W();\n            try {\n              P(a)(b, c, d, e, f, g, h, k, l);\n            } catch (u) {\n              O(n);\n              if (u !== u + 0)\n                throw u;\n              Y(1, 0);\n            }\n          }\n          function Td(a, b, c, d, e, f, g) {\n            var h = W();\n            try {\n              return P(a)(b, c, d, e, f, g);\n            } catch (k) {\n              O(h);\n              if (k !== k + 0)\n                throw k;\n              Y(1, 0);\n            }\n          }\n          function $e(a, b, c, d, e, f, g, h, k, l, n) {\n            var u = W();\n            try {\n              P(a)(b, c, d, e, f, g, h, k, l, n);\n            } catch (v) {\n              O(u);\n              if (v !== v + 0)\n                throw v;\n              Y(1, 0);\n            }\n          }\n          function ae(a, b, c, d, e, f) {\n            var g = W();\n            try {\n              return P(a)(b, c, d, e, f);\n            } catch (h) {\n              O(g);\n              if (h !== h + 0)\n                throw h;\n              Y(1, 0);\n            }\n          }\n          function wf(a, b, c, d, e, f) {\n            var g = W();\n            try {\n              P(a)(b, c, d, e, f);\n            } catch (h) {\n              O(g);\n              if (h !== h + 0)\n                throw h;\n              Y(1, 0);\n            }\n          }\n          function Ye(a, b, c, d, e, f, g, h, k, l, n, u, v, m) {\n            var w = W();\n            try {\n              P(a)(b, c, d, e, f, g, h, k, l, n, u, v, m);\n            } catch (y) {\n              O(w);\n              if (y !== y + 0)\n                throw y;\n              Y(1, 0);\n            }\n          }\n          function og(a, b, c, d, e, f, g, h, k, l, n, u, v, m, w, y, z, D) {\n            var E = W();\n            try {\n              P(a)(b, c, d, e, f, g, h, k, l, n, u, v, m, w, y, z, D);\n            } catch (I) {\n              O(E);\n              if (I !== I + 0)\n                throw I;\n              Y(1, 0);\n            }\n          }\n          function Qe(a, b, c, d, e, f, g, h, k, l, n, u, v, m, w, y, z) {\n            var D = W();\n            try {\n              P(a)(b, c, d, e, f, g, h, k, l, n, u, v, m, w, y, z);\n            } catch (E) {\n              O(D);\n              if (E !== E + 0)\n                throw E;\n              Y(1, 0);\n            }\n          }\n          function Pe(a, b, c, d, e, f, g, h, k, l, n, u, v, m, w, y) {\n            var z = W();\n            try {\n              P(a)(b, c, d, e, f, g, h, k, l, n, u, v, m, w, y);\n            } catch (D) {\n              O(z);\n              if (D !== D + 0)\n                throw D;\n              Y(1, 0);\n            }\n          }\n          function Re(a, b, c, d, e, f, g, h, k, l, n, u, v, m, w) {\n            var y = W();\n            try {\n              P(a)(b, c, d, e, f, g, h, k, l, n, u, v, m, w);\n            } catch (z) {\n              O(y);\n              if (z !== z + 0)\n                throw z;\n              Y(1, 0);\n            }\n          }\n          function qg(a, b, c, d, e, f, g, h, k, l, n, u, v, m, w, y, z, D, E, I, J) {\n            var K = W();\n            try {\n              P(a)(b, c, d, e, f, g, h, k, l, n, u, v, m, w, y, z, D, E, I, J);\n            } catch (aa) {\n              O(K);\n              if (aa !== aa + 0)\n                throw aa;\n              Y(1, 0);\n            }\n          }\n          function ng(a, b, c, d, e, f, g, h, k, l, n, u, v, m, w, y, z, D, E) {\n            var I = W();\n            try {\n              P(a)(b, c, d, e, f, g, h, k, l, n, u, v, m, w, y, z, D, E);\n            } catch (J) {\n              O(I);\n              if (J !== J + 0)\n                throw J;\n              Y(1, 0);\n            }\n          }\n          function mg(a, b, c, d, e, f, g, h, k, l, n, u, v, m, w, y, z) {\n            var D = W();\n            try {\n              P(a)(b, c, d, e, f, g, h, k, l, n, u, v, m, w, y, z);\n            } catch (E) {\n              O(D);\n              if (E !== E + 0)\n                throw E;\n              Y(1, 0);\n            }\n          }\n          function pg(a, b, c, d, e, f, g, h, k, l, n, u, v, m, w, y, z, D, E, I) {\n            var J = W();\n            try {\n              P(a)(b, c, d, e, f, g, h, k, l, n, u, v, m, w, y, z, D, E, I);\n            } catch (K) {\n              O(J);\n              if (K !== K + 0)\n                throw K;\n              Y(1, 0);\n            }\n          }\n          function $f(a, b, c, d, e, f, g, h, k, l) {\n            var n = W();\n            try {\n              P(a)(b, c, d, e, f, g, h, k, l);\n            } catch (u) {\n              O(n);\n              if (u !== u + 0)\n                throw u;\n              Y(1, 0);\n            }\n          }\n          function Xf(a, b, c, d, e, f, g, h, k, l, n) {\n            var u = W();\n            try {\n              P(a)(b, c, d, e, f, g, h, k, l, n);\n            } catch (v) {\n              O(u);\n              if (v !== v + 0)\n                throw v;\n              Y(1, 0);\n            }\n          }\n          function fg(a, b, c, d, e, f, g, h, k, l, n, u, v, m, w) {\n            var y = W();\n            try {\n              P(a)(b, c, d, e, f, g, h, k, l, n, u, v, m, w);\n            } catch (z) {\n              O(y);\n              if (z !== z + 0)\n                throw z;\n              Y(1, 0);\n            }\n          }\n          function lg(a, b, c, d, e, f, g, h, k, l) {\n            var n = W();\n            try {\n              P(a)(b, c, d, e, f, g, h, k, l);\n            } catch (u) {\n              O(n);\n              if (u !== u + 0)\n                throw u;\n              Y(1, 0);\n            }\n          }\n          function kg(a, b, c, d, e, f, g, h, k) {\n            var l = W();\n            try {\n              P(a)(b, c, d, e, f, g, h, k);\n            } catch (n) {\n              O(l);\n              if (n !== n + 0)\n                throw n;\n              Y(1, 0);\n            }\n          }\n          function hd(a, b, c, d, e, f, g) {\n            var h = W();\n            try {\n              return P(a)(b, c, d, e, f, g);\n            } catch (k) {\n              O(h);\n              if (k !== k + 0)\n                throw k;\n              Y(1, 0);\n            }\n          }\n          function Ce(a, b, c, d, e) {\n            var f = W();\n            try {\n              P(a)(b, c, d, e);\n            } catch (g) {\n              O(f);\n              if (g !== g + 0)\n                throw g;\n              Y(1, 0);\n            }\n          }\n          function le(a, b, c) {\n            var d = W();\n            try {\n              return P(a)(b, c);\n            } catch (e) {\n              O(d);\n              if (e !== e + 0)\n                throw e;\n              Y(1, 0);\n              return 0n;\n            }\n          }\n          function Nd(a, b, c, d, e, f, g) {\n            var h = W();\n            try {\n              return P(a)(b, c, d, e, f, g);\n            } catch (k) {\n              O(h);\n              if (k !== k + 0)\n                throw k;\n              Y(1, 0);\n            }\n          }\n          function ag(a, b, c, d, e, f) {\n            var g = W();\n            try {\n              P(a)(b, c, d, e, f);\n            } catch (h) {\n              O(g);\n              if (h !== h + 0)\n                throw h;\n              Y(1, 0);\n            }\n          }\n          function Ef(a, b, c, d, e, f, g, h, k, l, n) {\n            var u = W();\n            try {\n              P(a)(b, c, d, e, f, g, h, k, l, n);\n            } catch (v) {\n              O(u);\n              if (v !== v + 0)\n                throw v;\n              Y(1, 0);\n            }\n          }\n          function uf(a, b, c, d, e, f, g, h, k, l, n, u, v) {\n            var m = W();\n            try {\n              P(a)(b, c, d, e, f, g, h, k, l, n, u, v);\n            } catch (w) {\n              O(m);\n              if (w !== w + 0)\n                throw w;\n              Y(1, 0);\n            }\n          }\n          function Rd(a, b, c, d, e, f) {\n            var g = W();\n            try {\n              return P(a)(b, c, d, e, f);\n            } catch (h) {\n              O(g);\n              if (h !== h + 0)\n                throw h;\n              Y(1, 0);\n            }\n          }\n          function rf(a, b, c, d, e, f, g, h, k, l, n, u, v) {\n            var m = W();\n            try {\n              P(a)(b, c, d, e, f, g, h, k, l, n, u, v);\n            } catch (w) {\n              O(m);\n              if (w !== w + 0)\n                throw w;\n              Y(1, 0);\n            }\n          }\n          function yf(a, b, c, d, e, f, g, h) {\n            var k = W();\n            try {\n              P(a)(b, c, d, e, f, g, h);\n            } catch (l) {\n              O(k);\n              if (l !== l + 0)\n                throw l;\n              Y(1, 0);\n            }\n          }\n          function Qf(a, b, c, d, e, f, g, h) {\n            var k = W();\n            try {\n              P(a)(b, c, d, e, f, g, h);\n            } catch (l) {\n              O(k);\n              if (l !== l + 0)\n                throw l;\n              Y(1, 0);\n            }\n          }\n          function ie(a, b, c, d) {\n            var e = W();\n            try {\n              return P(a)(b, c, d);\n            } catch (f) {\n              O(e);\n              if (f !== f + 0)\n                throw f;\n              Y(1, 0);\n            }\n          }\n          function vf(a, b, c, d, e, f, g, h, k, l) {\n            var n = W();\n            try {\n              P(a)(b, c, d, e, f, g, h, k, l);\n            } catch (u) {\n              O(n);\n              if (u !== u + 0)\n                throw u;\n              Y(1, 0);\n            }\n          }\n          function dg(a, b, c, d, e, f, g, h, k) {\n            var l = W();\n            try {\n              P(a)(b, c, d, e, f, g, h, k);\n            } catch (n) {\n              O(l);\n              if (n !== n + 0)\n                throw n;\n              Y(1, 0);\n            }\n          }\n          function tf(a, b, c, d, e, f, g, h, k) {\n            var l = W();\n            try {\n              P(a)(b, c, d, e, f, g, h, k);\n            } catch (n) {\n              O(l);\n              if (n !== n + 0)\n                throw n;\n              Y(1, 0);\n            }\n          }\n          function pf(a, b, c, d, e, f, g, h, k, l) {\n            var n = W();\n            try {\n              P(a)(b, c, d, e, f, g, h, k, l);\n            } catch (u) {\n              O(n);\n              if (u !== u + 0)\n                throw u;\n              Y(1, 0);\n            }\n          }\n          function Wf(a, b, c, d, e, f) {\n            var g = W();\n            try {\n              P(a)(b, c, d, e, f);\n            } catch (h) {\n              O(g);\n              if (h !== h + 0)\n                throw h;\n              Y(1, 0);\n            }\n          }\n          function Xe(a, b, c, d, e, f, g, h, k, l, n, u) {\n            var v = W();\n            try {\n              P(a)(b, c, d, e, f, g, h, k, l, n, u);\n            } catch (m) {\n              O(v);\n              if (m !== m + 0)\n                throw m;\n              Y(1, 0);\n            }\n          }\n          function Gf(a, b, c, d, e, f, g, h, k, l, n, u, v, m) {\n            var w = W();\n            try {\n              P(a)(b, c, d, e, f, g, h, k, l, n, u, v, m);\n            } catch (y) {\n              O(w);\n              if (y !== y + 0)\n                throw y;\n              Y(1, 0);\n            }\n          }\n          function Yd(a, b, c, d, e, f, g, h) {\n            var k = W();\n            try {\n              return P(a)(b, c, d, e, f, g, h);\n            } catch (l) {\n              O(k);\n              if (l !== l + 0)\n                throw l;\n              Y(1, 0);\n            }\n          }\n          function df(a, b, c, d, e, f, g, h, k, l, n, u, v, m, w) {\n            var y = W();\n            try {\n              P(a)(b, c, d, e, f, g, h, k, l, n, u, v, m, w);\n            } catch (z) {\n              O(y);\n              if (z !== z + 0)\n                throw z;\n              Y(1, 0);\n            }\n          }\n          function qf(a, b, c, d, e, f, g, h, k, l, n, u, v, m) {\n            var w = W();\n            try {\n              P(a)(b, c, d, e, f, g, h, k, l, n, u, v, m);\n            } catch (y) {\n              O(w);\n              if (y !== y + 0)\n                throw y;\n              Y(1, 0);\n            }\n          }\n          function nf(a, b, c, d, e, f, g, h, k, l, n, u, v, m, w) {\n            var y = W();\n            try {\n              P(a)(b, c, d, e, f, g, h, k, l, n, u, v, m, w);\n            } catch (z) {\n              O(y);\n              if (z !== z + 0)\n                throw z;\n              Y(1, 0);\n            }\n          }\n          function we(a, b, c) {\n            var d = W();\n            try {\n              P(a)(b, c);\n            } catch (e) {\n              O(d);\n              if (e !== e + 0)\n                throw e;\n              Y(1, 0);\n            }\n          }\n          function Rf(a, b, c, d, e, f, g, h, k) {\n            var l = W();\n            try {\n              P(a)(b, c, d, e, f, g, h, k);\n            } catch (n) {\n              O(l);\n              if (n !== n + 0)\n                throw n;\n              Y(1, 0);\n            }\n          }\n          function Se(a, b, c, d, e, f, g, h, k, l, n) {\n            var u = W();\n            try {\n              P(a)(b, c, d, e, f, g, h, k, l, n);\n            } catch (v) {\n              O(u);\n              if (v !== v + 0)\n                throw v;\n              Y(1, 0);\n            }\n          }\n          function sf(a, b, c, d, e, f, g, h, k, l, n, u, v, m, w, y, z, D, E, I, J, K, aa, vg, wg, xg) {\n            var yg = W();\n            try {\n              P(a)(b, c, d, e, f, g, h, k, l, n, u, v, m, w, y, z, D, E, I, J, K, aa, vg, wg, xg);\n            } catch (fb) {\n              O(yg);\n              if (fb !== fb + 0)\n                throw fb;\n              Y(1, 0);\n            }\n          }\n          function Pf(a, b, c, d, e, f) {\n            var g = W();\n            try {\n              P(a)(b, c, d, e, f);\n            } catch (h) {\n              O(g);\n              if (h !== h + 0)\n                throw h;\n              Y(1, 0);\n            }\n          }\n          function Hd(a, b, c, d, e, f, g, h, k, l, n, u, v) {\n            var m = W();\n            try {\n              return P(a)(b, c, d, e, f, g, h, k, l, n, u, v);\n            } catch (w) {\n              O(m);\n              if (w !== w + 0)\n                throw w;\n              Y(1, 0);\n            }\n          }\n          function af(a, b, c, d, e, f, g, h, k, l, n, u) {\n            var v = W();\n            try {\n              P(a)(b, c, d, e, f, g, h, k, l, n, u);\n            } catch (m) {\n              O(v);\n              if (m !== m + 0)\n                throw m;\n              Y(1, 0);\n            }\n          }\n          function De(a, b, c, d, e, f, g, h, k, l, n, u, v) {\n            var m = W();\n            try {\n              P(a)(b, c, d, e, f, g, h, k, l, n, u, v);\n            } catch (w) {\n              O(m);\n              if (w !== w + 0)\n                throw w;\n              Y(1, 0);\n            }\n          }\n          function kf(a, b, c, d, e, f, g, h, k, l, n, u, v, m, w, y, z, D, E, I, J) {\n            var K = W();\n            try {\n              P(a)(b, c, d, e, f, g, h, k, l, n, u, v, m, w, y, z, D, E, I, J);\n            } catch (aa) {\n              O(K);\n              if (aa !== aa + 0)\n                throw aa;\n              Y(1, 0);\n            }\n          }\n          function qd(a, b, c) {\n            var d = W();\n            try {\n              return P(a)(b, c);\n            } catch (e) {\n              O(d);\n              if (e !== e + 0)\n                throw e;\n              Y(1, 0);\n            }\n          }\n          function Ne(a, b, c, d, e, f, g, h, k, l, n, u, v) {\n            var m = W();\n            try {\n              P(a)(b, c, d, e, f, g, h, k, l, n, u, v);\n            } catch (w) {\n              O(m);\n              if (w !== w + 0)\n                throw w;\n              Y(1, 0);\n            }\n          }\n          function Yf(a, b, c, d, e, f, g, h, k, l, n, u, v, m) {\n            var w = W();\n            try {\n              P(a)(b, c, d, e, f, g, h, k, l, n, u, v, m);\n            } catch (y) {\n              O(w);\n              if (y !== y + 0)\n                throw y;\n              Y(1, 0);\n            }\n          }\n          function zf(a, b, c, d, e, f, g, h) {\n            var k = W();\n            try {\n              P(a)(b, c, d, e, f, g, h);\n            } catch (l) {\n              O(k);\n              if (l !== l + 0)\n                throw l;\n              Y(1, 0);\n            }\n          }\n          function gf(a, b, c, d, e, f, g, h, k, l, n, u, v, m, w, y, z) {\n            var D = W();\n            try {\n              P(a)(b, c, d, e, f, g, h, k, l, n, u, v, m, w, y, z);\n            } catch (E) {\n              O(D);\n              if (E !== E + 0)\n                throw E;\n              Y(1, 0);\n            }\n          }\n          function jf(a, b, c, d, e, f, g, h, k, l, n, u, v, m, w, y, z, D, E, I) {\n            var J = W();\n            try {\n              P(a)(b, c, d, e, f, g, h, k, l, n, u, v, m, w, y, z, D, E, I);\n            } catch (K) {\n              O(J);\n              if (K !== K + 0)\n                throw K;\n              Y(1, 0);\n            }\n          }\n          function hf(a, b, c, d, e, f, g, h, k, l, n, u, v, m, w, y, z, D, E) {\n            var I = W();\n            try {\n              P(a)(b, c, d, e, f, g, h, k, l, n, u, v, m, w, y, z, D, E);\n            } catch (J) {\n              O(I);\n              if (J !== J + 0)\n                throw J;\n              Y(1, 0);\n            }\n          }\n          function of(a, b, c, d, e, f, g, h, k, l, n) {\n            var u = W();\n            try {\n              P(a)(b, c, d, e, f, g, h, k, l, n);\n            } catch (v) {\n              O(u);\n              if (v !== v + 0)\n                throw v;\n              Y(1, 0);\n            }\n          }\n          function Cd(a, b, c, d, e, f, g, h, k, l, n) {\n            var u = W();\n            try {\n              return P(a)(b, c, d, e, f, g, h, k, l, n);\n            } catch (v) {\n              O(u);\n              if (v !== v + 0)\n                throw v;\n              Y(1, 0);\n            }\n          }\n          function Gd(a, b, c, d, e, f, g, h, k, l, n, u, v, m, w, y, z, D, E, I) {\n            var J = W();\n            try {\n              return P(a)(b, c, d, e, f, g, h, k, l, n, u, v, m, w, y, z, D, E, I);\n            } catch (K) {\n              O(J);\n              if (K !== K + 0)\n                throw K;\n              Y(1, 0);\n            }\n          }\n          function He(a, b, c, d, e) {\n            var f = W();\n            try {\n              P(a)(b, c, d, e);\n            } catch (g) {\n              O(f);\n              if (g !== g + 0)\n                throw g;\n              Y(1, 0);\n            }\n          }\n          function We(a, b, c, d, e, f, g, h, k, l, n, u) {\n            var v = W();\n            try {\n              P(a)(b, c, d, e, f, g, h, k, l, n, u);\n            } catch (m) {\n              O(v);\n              if (m !== m + 0)\n                throw m;\n              Y(1, 0);\n            }\n          }\n          function ee(a, b, c, d, e) {\n            var f = W();\n            try {\n              return P(a)(b, c, d, e);\n            } catch (g) {\n              O(f);\n              if (g !== g + 0)\n                throw g;\n              Y(1, 0);\n            }\n          }\n          function qe(a, b, c, d) {\n            var e = W();\n            try {\n              return P(a)(b, c, d);\n            } catch (f) {\n              O(e);\n              if (f !== f + 0)\n                throw f;\n              Y(1, 0);\n              return 0n;\n            }\n          }\n          function xf(a, b, c, d, e, f, g) {\n            var h = W();\n            try {\n              P(a)(b, c, d, e, f, g);\n            } catch (k) {\n              O(h);\n              if (k !== k + 0)\n                throw k;\n              Y(1, 0);\n            }\n          }\n          function fe(a, b, c, d, e, f) {\n            var g = W();\n            try {\n              return P(a)(b, c, d, e, f);\n            } catch (h) {\n              O(g);\n              if (h !== h + 0)\n                throw h;\n              Y(1, 0);\n            }\n          }\n          function Af(a, b, c, d, e) {\n            var f = W();\n            try {\n              P(a)(b, c, d, e);\n            } catch (g) {\n              O(f);\n              if (g !== g + 0)\n                throw g;\n              Y(1, 0);\n            }\n          }\n          function je(a, b, c, d, e, f) {\n            var g = W();\n            try {\n              return P(a)(b, c, d, e, f);\n            } catch (h) {\n              O(g);\n              if (h !== h + 0)\n                throw h;\n              Y(1, 0);\n            }\n          }\n          function Hf(a, b, c, d, e, f, g, h, k) {\n            var l = W();\n            try {\n              P(a)(b, c, d, e, f, g, h, k);\n            } catch (n) {\n              O(l);\n              if (n !== n + 0)\n                throw n;\n              Y(1, 0);\n            }\n          }\n          function Ae(a, b, c, d) {\n            var e = W();\n            try {\n              P(a)(b, c, d);\n            } catch (f) {\n              O(e);\n              if (f !== f + 0)\n                throw f;\n              Y(1, 0);\n            }\n          }\n          function Pd(a, b, c, d, e, f, g, h) {\n            var k = W();\n            try {\n              return P(a)(b, c, d, e, f, g, h);\n            } catch (l) {\n              O(k);\n              if (l !== l + 0)\n                throw l;\n              Y(1, 0);\n            }\n          }\n          function Vf(a, b, c, d) {\n            var e = W();\n            try {\n              P(a)(b, c, d);\n            } catch (f) {\n              O(e);\n              if (f !== f + 0)\n                throw f;\n              Y(1, 0);\n            }\n          }\n          function ud(a, b, c, d, e, f) {\n            var g = W();\n            try {\n              return P(a)(b, c, d, e, f);\n            } catch (h) {\n              O(g);\n              if (h !== h + 0)\n                throw h;\n              Y(1, 0);\n            }\n          }\n          function Wd(a, b, c, d, e, f) {\n            var g = W();\n            try {\n              return P(a)(b, c, d, e, f);\n            } catch (h) {\n              O(g);\n              if (h !== h + 0)\n                throw h;\n              Y(1, 0);\n            }\n          }\n          function Id(a, b, c, d, e, f, g, h, k, l, n, u) {\n            var v = W();\n            try {\n              return P(a)(b, c, d, e, f, g, h, k, l, n, u);\n            } catch (m) {\n              O(v);\n              if (m !== m + 0)\n                throw m;\n              Y(1, 0);\n            }\n          }\n          function Sd(a, b, c, d, e, f, g, h) {\n            var k = W();\n            try {\n              return P(a)(b, c, d, e, f, g, h);\n            } catch (l) {\n              O(k);\n              if (l !== l + 0)\n                throw l;\n              Y(1, 0);\n            }\n          }\n          function Ld(a, b, c, d, e, f, g, h, k, l, n) {\n            var u = W();\n            try {\n              return P(a)(b, c, d, e, f, g, h, k, l, n);\n            } catch (v) {\n              O(u);\n              if (v !== v + 0)\n                throw v;\n              Y(1, 0);\n            }\n          }\n          function Xd(a, b, c, d, e, f, g) {\n            var h = W();\n            try {\n              return P(a)(b, c, d, e, f, g);\n            } catch (k) {\n              O(h);\n              if (k !== k + 0)\n                throw k;\n              Y(1, 0);\n            }\n          }\n          function Kd(a, b, c, d, e, f, g, h, k, l, n, u, v) {\n            var m = W();\n            try {\n              return P(a)(b, c, d, e, f, g, h, k, l, n, u, v);\n            } catch (w) {\n              O(m);\n              if (w !== w + 0)\n                throw w;\n              Y(1, 0);\n            }\n          }\n          function de(a, b, c, d, e, f, g) {\n            var h = W();\n            try {\n              return P(a)(b, c, d, e, f, g);\n            } catch (k) {\n              O(h);\n              if (k !== k + 0)\n                throw k;\n              Y(1, 0);\n            }\n          }\n          function ge(a, b, c, d, e, f, g) {\n            var h = W();\n            try {\n              return P(a)(b, c, d, e, f, g);\n            } catch (k) {\n              O(h);\n              if (k !== k + 0)\n                throw k;\n              Y(1, 0);\n            }\n          }\n          function ce(a, b, c, d) {\n            var e = W();\n            try {\n              return P(a)(b, c, d);\n            } catch (f) {\n              O(e);\n              if (f !== f + 0)\n                throw f;\n              Y(1, 0);\n            }\n          }\n          function Df(a, b, c, d, e, f, g, h, k, l) {\n            var n = W();\n            try {\n              P(a)(b, c, d, e, f, g, h, k, l);\n            } catch (u) {\n              O(n);\n              if (u !== u + 0)\n                throw u;\n              Y(1, 0);\n            }\n          }\n          function Mf(a, b, c, d, e, f, g, h, k, l, n, u, v) {\n            var m = W();\n            try {\n              P(a)(b, c, d, e, f, g, h, k, l, n, u, v);\n            } catch (w) {\n              O(m);\n              if (w !== w + 0)\n                throw w;\n              Y(1, 0);\n            }\n          }\n          function pd(a, b, c) {\n            var d = W();\n            try {\n              return P(a)(b, c);\n            } catch (e) {\n              O(d);\n              if (e !== e + 0)\n                throw e;\n              Y(1, 0);\n            }\n          }\n          function sd(a, b, c, d) {\n            var e = W();\n            try {\n              return P(a)(b, c, d);\n            } catch (f) {\n              O(e);\n              if (f !== f + 0)\n                throw f;\n              Y(1, 0);\n            }\n          }\n          function ve(a, b, c, d) {\n            var e = W();\n            try {\n              P(a)(b, c, d);\n            } catch (f) {\n              O(e);\n              if (f !== f + 0)\n                throw f;\n              Y(1, 0);\n            }\n          }\n          function ld(a, b, c, d) {\n            var e = W();\n            try {\n              return P(a)(b, c, d);\n            } catch (f) {\n              O(e);\n              if (f !== f + 0)\n                throw f;\n              Y(1, 0);\n            }\n          }\n          function ig(a, b, c, d, e) {\n            var f = W();\n            try {\n              P(a)(b, c, d, e);\n            } catch (g) {\n              O(f);\n              if (g !== g + 0)\n                throw g;\n              Y(1, 0);\n            }\n          }\n          function pe(a, b, c, d, e) {\n            var f = W();\n            try {\n              return P(a)(b, c, d, e);\n            } catch (g) {\n              O(f);\n              if (g !== g + 0)\n                throw g;\n              Y(1, 0);\n              return 0n;\n            }\n          }\n          function gd(a, b, c, d, e, f) {\n            var g = W();\n            try {\n              return P(a)(b, c, d, e, f);\n            } catch (h) {\n              O(g);\n              if (h !== h + 0)\n                throw h;\n              Y(1, 0);\n            }\n          }\n          function eg(a, b, c, d, e, f, g, h, k, l, n, u, v) {\n            var m = W();\n            try {\n              P(a)(b, c, d, e, f, g, h, k, l, n, u, v);\n            } catch (w) {\n              O(m);\n              if (w !== w + 0)\n                throw w;\n              Y(1, 0);\n            }\n          }\n          function Sf(a, b, c, d, e, f, g, h, k, l) {\n            var n = W();\n            try {\n              P(a)(b, c, d, e, f, g, h, k, l);\n            } catch (u) {\n              O(n);\n              if (u !== u + 0)\n                throw u;\n              Y(1, 0);\n            }\n          }\n          function fd(a, b, c, d) {\n            var e = W();\n            try {\n              return P(a)(b, c, d);\n            } catch (f) {\n              O(e);\n              if (f !== f + 0)\n                throw f;\n              Y(1, 0);\n            }\n          }\n          function lf(a, b, c, d, e, f, g, h, k, l, n, u) {\n            var v = W();\n            try {\n              P(a)(b, c, d, e, f, g, h, k, l, n, u);\n            } catch (m) {\n              O(v);\n              if (m !== m + 0)\n                throw m;\n              Y(1, 0);\n            }\n          }\n          function Qd(a, b, c, d, e) {\n            var f = W();\n            try {\n              return P(a)(b, c, d, e);\n            } catch (g) {\n              O(f);\n              if (g !== g + 0)\n                throw g;\n              Y(1, 0);\n            }\n          }\n          function ke(a) {\n            var b = W();\n            try {\n              return P(a)();\n            } catch (c) {\n              O(b);\n              if (c !== c + 0)\n                throw c;\n              Y(1, 0);\n              return 0n;\n            }\n          }\n          function Md(a, b, c, d, e, f) {\n            var g = W();\n            try {\n              return P(a)(b, c, d, e, f);\n            } catch (h) {\n              O(g);\n              if (h !== h + 0)\n                throw h;\n              Y(1, 0);\n            }\n          }\n          function wd(a, b, c, d, e, f) {\n            var g = W();\n            try {\n              return P(a)(b, c, d, e, f);\n            } catch (h) {\n              O(g);\n              if (h !== h + 0)\n                throw h;\n              Y(1, 0);\n            }\n          }\n          function ff(a, b, c, d, e, f, g, h, k, l, n, u, v, m, w, y) {\n            var z = W();\n            try {\n              P(a)(b, c, d, e, f, g, h, k, l, n, u, v, m, w, y);\n            } catch (D) {\n              O(z);\n              if (D !== D + 0)\n                throw D;\n              Y(1, 0);\n            }\n          }\n          function kd(a, b, c) {\n            var d = W();\n            try {\n              return P(a)(b, c);\n            } catch (e) {\n              O(d);\n              if (e !== e + 0)\n                throw e;\n              Y(1, 0);\n            }\n          }\n          function ed(a, b, c) {\n            var d = W();\n            try {\n              return P(a)(b, c);\n            } catch (e) {\n              O(d);\n              if (e !== e + 0)\n                throw e;\n              Y(1, 0);\n            }\n          }\n          function sg() {\n            var a = Z;\n            a = Object.assign({}, a);\n            var b = (d) => () => d() >>> 0, c = (d) => (e) => d(e) >>> 0;\n            a.__errno_location = b(a.__errno_location);\n            a.le = b(a.le);\n            a.me = c(a.me);\n            a.pe = c(a.pe);\n            a.Be = b(a.Be);\n            a.De = c(a.De);\n            return a;\n          }\n          C.keepRuntimeAlive = Ma;\n          C.wasmMemory = q;\n          C.stackAlloc = lc;\n          C.stackSave = W;\n          C.stackRestore = O;\n          C.UTF8ToString = bb;\n          C.stringToUTF8 = Cb;\n          C.lengthBytesUTF8 = Ab;\n          C.ExitStatus = Xa;\n          C.PThread = M;\n          var tg;\n          Pa = function ug() {\n            tg || zg();\n            tg || (Pa = ug);\n          };\n          function zg() {\n            0 < Na || (G ? (la(C), G || kb(Ja), startWorker(C)) : (kb(Ia), 0 < Na || tg || (tg = true, C.calledRun = true, Ca || (G || kb(Ja), la(C), G || kb(Ka)))));\n          }\n          zg();\n          return moduleArg.ready;\n        };\n      })();\n      if (typeof exports === "object" && typeof module === "object")\n        module.exports = ortWasmThreaded;\n      else if (typeof define === "function" && define["amd"])\n        define([], () => ortWasmThreaded);\n    }\n  });\n\n  // web/lib/wasm/binding/ort-wasm-threaded.worker.js\n  var require_ort_wasm_threaded_worker = __commonJS({\n    "web/lib/wasm/binding/ort-wasm-threaded.worker.js"(exports, module) {\n      module.exports = \'"use strict";var Module={};var ENVIRONMENT_IS_NODE=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string";if(ENVIRONMENT_IS_NODE){var nodeWorkerThreads=require("worker_threads");var parentPort=nodeWorkerThreads.parentPort;parentPort.on("message",data=>onmessage({data:data}));var fs=require("fs");Object.assign(global,{self:global,require:require,Module:Module,location:{href:__filename},Worker:nodeWorkerThreads.Worker,importScripts:f=>(0,eval)(fs.readFileSync(f,"utf8")+"//# sourceURL="+f),postMessage:msg=>parentPort.postMessage(msg),performance:global.performance||{now:Date.now}})}var initializedJS=false;function threadPrintErr(){var text=Array.prototype.slice.call(arguments).join(" ");if(ENVIRONMENT_IS_NODE){fs.writeSync(2,text+"\\\\n");return}console.error(text)}function threadAlert(){var text=Array.prototype.slice.call(arguments).join(" ");postMessage({cmd:"alert",text:text,threadId:Module["_pthread_self"]()})}var err=threadPrintErr;self.alert=threadAlert;Module["instantiateWasm"]=(info,receiveInstance)=>{var module=Module["wasmModule"];Module["wasmModule"]=null;var instance=new WebAssembly.Instance(module,info);return receiveInstance(instance)};self.onunhandledrejection=e=>{throw e.reason||e};function handleMessage(e){try{if(e.data.cmd==="load"){let messageQueue=[];self.onmessage=e=>messageQueue.push(e);self.startWorker=instance=>{Module=instance;postMessage({"cmd":"loaded"});for(let msg of messageQueue){handleMessage(msg)}self.onmessage=handleMessage};Module["wasmModule"]=e.data.wasmModule;for(const handler of e.data.handlers){Module[handler]=(...args)=>{postMessage({cmd:"callHandler",handler:handler,args:args})}}Module["wasmMemory"]=e.data.wasmMemory;Module["buffer"]=Module["wasmMemory"].buffer;Module["ENVIRONMENT_IS_PTHREAD"]=true;if(typeof e.data.urlOrBlob=="string"){importScripts(e.data.urlOrBlob)}else{var objectUrl=URL.createObjectURL(e.data.urlOrBlob);importScripts(objectUrl);URL.revokeObjectURL(objectUrl)}ortWasmThreaded(Module)}else if(e.data.cmd==="run"){Module["__emscripten_thread_init"](e.data.pthread_ptr,/*is_main=*/0,/*is_runtime=*/0,/*can_block=*/1);Module["__emscripten_thread_mailbox_await"](e.data.pthread_ptr);Module["establishStackSpace"]();Module["PThread"].receiveObjectTransfer(e.data);Module["PThread"].threadInitTLS();if(!initializedJS){Module["__embind_initialize_bindings"]();initializedJS=true}try{Module["invokeEntryPoint"](e.data.start_routine,e.data.arg)}catch(ex){if(ex!="unwind"){throw ex}}}else if(e.data.cmd==="cancel"){if(Module["_pthread_self"]()){Module["__emscripten_thread_exit"](-1)}}else if(e.data.target==="setimmediate"){}else if(e.data.cmd==="checkMailbox"){if(initializedJS){Module["checkMailbox"]()}}else if(e.data.cmd){err(`worker.js received unknown command ${e.data.cmd}`);err(e.data)}}catch(ex){if(Module["__emscripten_thread_crashed"]){Module["__emscripten_thread_crashed"]()}throw ex}}self.onmessage=handleMessage;\\n\';\n    }\n  });\n\n  // nodejs-ignore:node:path\n  var join = void 0;\n\n  // web/lib/wasm/wasm-factory.ts\n  var ortWasmFactory;\n  if (true) {\n    ortWasmFactory = require_ort_training_wasm_simd();\n  } else {\n    ortWasmFactory = true ? null : null;\n  }\n  var ortWasmFactoryThreaded = true ? true ? require_ort_wasm_threaded() : null : ortWasmFactory;\n  var wasm;\n  var initialized = false;\n  var initializing = false;\n  var aborted = false;\n  var isMultiThreadSupported = () => {\n    try {\n      if (typeof SharedArrayBuffer === "undefined") {\n        return false;\n      }\n      if (typeof MessageChannel !== "undefined") {\n        new MessageChannel().port1.postMessage(new SharedArrayBuffer(1));\n      }\n      return WebAssembly.validate(new Uint8Array([\n        0,\n        97,\n        115,\n        109,\n        1,\n        0,\n        0,\n        0,\n        1,\n        4,\n        1,\n        96,\n        0,\n        0,\n        3,\n        2,\n        1,\n        0,\n        5,\n        4,\n        1,\n        3,\n        1,\n        1,\n        10,\n        11,\n        1,\n        9,\n        0,\n        65,\n        0,\n        254,\n        16,\n        2,\n        0,\n        26,\n        11\n      ]));\n    } catch (e) {\n      return false;\n    }\n  };\n  var isSimdSupported = () => {\n    try {\n      return WebAssembly.validate(new Uint8Array([\n        0,\n        97,\n        115,\n        109,\n        1,\n        0,\n        0,\n        0,\n        1,\n        4,\n        1,\n        96,\n        0,\n        0,\n        3,\n        2,\n        1,\n        0,\n        10,\n        30,\n        1,\n        28,\n        0,\n        65,\n        0,\n        253,\n        15,\n        253,\n        12,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        253,\n        186,\n        1,\n        26,\n        11\n      ]));\n    } catch (e) {\n      return false;\n    }\n  };\n  var getWasmFileName = (useSimd, useThreads) => {\n    if (useSimd) {\n      if (true) {\n        return "ort-training-wasm-simd.wasm";\n      }\n      return useThreads ? "ort-wasm-simd-threaded.wasm" : "ort-wasm-simd.wasm";\n    } else {\n      return useThreads ? "ort-wasm-threaded.wasm" : "ort-wasm.wasm";\n    }\n  };\n  var initializeWebAssembly = async (flags) => {\n    if (initialized) {\n      return Promise.resolve();\n    }\n    if (initializing) {\n      throw new Error("multiple calls to \'initializeWebAssembly()\' detected.");\n    }\n    if (aborted) {\n      throw new Error("previous call to \'initializeWebAssembly()\' failed.");\n    }\n    initializing = true;\n    const timeout = flags.initTimeout;\n    const numThreads = flags.numThreads;\n    const simd = flags.simd;\n    const useThreads = numThreads > 1 && isMultiThreadSupported();\n    const useSimd = simd && isSimdSupported();\n    const wasmPaths = flags.wasmPaths;\n    const wasmPrefixOverride = typeof wasmPaths === "string" ? wasmPaths : void 0;\n    const wasmFileName = getWasmFileName(useSimd, useThreads);\n    const wasmPathOverride = typeof wasmPaths === "object" ? wasmPaths[wasmFileName] : void 0;\n    let isTimeout = false;\n    const tasks = [];\n    if (timeout > 0) {\n      tasks.push(new Promise((resolve) => {\n        setTimeout(() => {\n          isTimeout = true;\n          resolve();\n        }, timeout);\n      }));\n    }\n    tasks.push(new Promise((resolve, reject) => {\n      const factory = useThreads ? ortWasmFactoryThreaded : ortWasmFactory;\n      const config = {\n        locateFile: (fileName, scriptDirectory) => {\n          if (useThreads && fileName.endsWith(".worker.js") && typeof Blob !== "undefined") {\n            return URL.createObjectURL(new Blob(\n              [\n                // This require() function is handled by esbuild plugin to load file content as string.\n                // eslint-disable-next-line @typescript-eslint/no-require-imports\n                require_ort_wasm_threaded_worker()\n              ],\n              { type: "text/javascript" }\n            ));\n          }\n          if (fileName.endsWith(".wasm")) {\n            if (wasmPathOverride) {\n              return wasmPathOverride;\n            }\n            const prefix = wasmPrefixOverride ?? scriptDirectory;\n            if (false) {\n              if (wasmFileName === "ort-wasm-simd.wasm") {\n                return prefix + "ort-wasm-simd.jsep.wasm";\n              } else if (wasmFileName === "ort-wasm-simd-threaded.wasm") {\n                return prefix + "ort-wasm-simd-threaded.jsep.wasm";\n              }\n            }\n            return prefix + wasmFileName;\n          }\n          return scriptDirectory + fileName;\n        }\n      };\n      if (useThreads) {\n        if (typeof Blob === "undefined") {\n          config.mainScriptUrlOrBlob = join(__dirname, "ort-wasm-threaded.js");\n        } else {\n          const scriptSourceCode = `var ortWasmThreaded=${factory.toString()};`;\n          config.mainScriptUrlOrBlob = new Blob([scriptSourceCode], { type: "text/javascript" });\n        }\n      }\n      factory(config).then(\n        // wasm module initialized successfully\n        (module) => {\n          initializing = false;\n          initialized = true;\n          wasm = module;\n          resolve();\n        },\n        // wasm module failed to initialize\n        (what) => {\n          initializing = false;\n          aborted = true;\n          reject(what);\n        }\n      );\n    }));\n    await Promise.race(tasks);\n    if (isTimeout) {\n      throw new Error(`WebAssembly backend initializing failed due to timeout: ${timeout}ms`);\n    }\n  };\n  var getInstance = () => {\n    if (initialized && wasm) {\n      return wasm;\n    }\n    throw new Error("WebAssembly is not initialized yet.");\n  };\n\n  // web/lib/wasm/wasm-utils.ts\n  var allocWasmString = (data, allocs) => {\n    const wasm2 = getInstance();\n    const dataLength = wasm2.lengthBytesUTF8(data) + 1;\n    const dataOffset = wasm2._malloc(dataLength);\n    wasm2.stringToUTF8(data, dataOffset, dataLength);\n    allocs.push(dataOffset);\n    return dataOffset;\n  };\n  var iterateExtraOptions = (options, prefix, seen, handler) => {\n    if (typeof options == "object" && options !== null) {\n      if (seen.has(options)) {\n        throw new Error("Circular reference in options");\n      } else {\n        seen.add(options);\n      }\n    }\n    Object.entries(options).forEach(([key, value]) => {\n      const name = prefix ? prefix + key : key;\n      if (typeof value === "object") {\n        iterateExtraOptions(value, name + ".", seen, handler);\n      } else if (typeof value === "string" || typeof value === "number") {\n        handler(name, value.toString());\n      } else if (typeof value === "boolean") {\n        handler(name, value ? "1" : "0");\n      } else {\n        throw new Error(`Can\'t handle extra config type: ${typeof value}`);\n      }\n    });\n  };\n  var checkLastError = (message) => {\n    const wasm2 = getInstance();\n    const stack = wasm2.stackSave();\n    try {\n      const paramsOffset = wasm2.stackAlloc(8);\n      wasm2._OrtGetLastError(paramsOffset, paramsOffset + 4);\n      const errorCode = wasm2.HEAP32[paramsOffset / 4];\n      const errorMessagePointer = wasm2.HEAPU32[paramsOffset / 4 + 1];\n      const errorMessage = errorMessagePointer ? wasm2.UTF8ToString(errorMessagePointer) : "";\n      throw new Error(`${message} ERROR_CODE: ${errorCode}, ERROR_MESSAGE: ${errorMessage}`);\n    } finally {\n      wasm2.stackRestore(stack);\n    }\n  };\n\n  // web/lib/wasm/run-options.ts\n  var setRunOptions = (options) => {\n    const wasm2 = getInstance();\n    let runOptionsHandle = 0;\n    const allocs = [];\n    const runOptions = options || {};\n    try {\n      if (options?.logSeverityLevel === void 0) {\n        runOptions.logSeverityLevel = 2;\n      } else if (typeof options.logSeverityLevel !== "number" || !Number.isInteger(options.logSeverityLevel) || options.logSeverityLevel < 0 || options.logSeverityLevel > 4) {\n        throw new Error(`log serverity level is not valid: ${options.logSeverityLevel}`);\n      }\n      if (options?.logVerbosityLevel === void 0) {\n        runOptions.logVerbosityLevel = 0;\n      } else if (typeof options.logVerbosityLevel !== "number" || !Number.isInteger(options.logVerbosityLevel)) {\n        throw new Error(`log verbosity level is not valid: ${options.logVerbosityLevel}`);\n      }\n      if (options?.terminate === void 0) {\n        runOptions.terminate = false;\n      }\n      let tagDataOffset = 0;\n      if (options?.tag !== void 0) {\n        tagDataOffset = allocWasmString(options.tag, allocs);\n      }\n      runOptionsHandle = wasm2._OrtCreateRunOptions(\n        runOptions.logSeverityLevel,\n        runOptions.logVerbosityLevel,\n        !!runOptions.terminate,\n        tagDataOffset\n      );\n      if (runOptionsHandle === 0) {\n        checkLastError("Can\'t create run options.");\n      }\n      if (options?.extra !== void 0) {\n        iterateExtraOptions(options.extra, "", /* @__PURE__ */ new WeakSet(), (key, value) => {\n          const keyDataOffset = allocWasmString(key, allocs);\n          const valueDataOffset = allocWasmString(value, allocs);\n          if (wasm2._OrtAddRunConfigEntry(runOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n            checkLastError(`Can\'t set a run config entry: ${key} - ${value}.`);\n          }\n        });\n      }\n      return [runOptionsHandle, allocs];\n    } catch (e) {\n      if (runOptionsHandle !== 0) {\n        wasm2._OrtReleaseRunOptions(runOptionsHandle);\n      }\n      allocs.forEach((alloc) => wasm2._free(alloc));\n      throw e;\n    }\n  };\n\n  // web/lib/wasm/session-options.ts\n  var getGraphOptimzationLevel = (graphOptimizationLevel) => {\n    switch (graphOptimizationLevel) {\n      case "disabled":\n        return 0;\n      case "basic":\n        return 1;\n      case "extended":\n        return 2;\n      case "all":\n        return 99;\n      default:\n        throw new Error(`unsupported graph optimization level: ${graphOptimizationLevel}`);\n    }\n  };\n  var getExecutionMode = (executionMode) => {\n    switch (executionMode) {\n      case "sequential":\n        return 0;\n      case "parallel":\n        return 1;\n      default:\n        throw new Error(`unsupported execution mode: ${executionMode}`);\n    }\n  };\n  var appendDefaultOptions = (options) => {\n    if (!options.extra) {\n      options.extra = {};\n    }\n    if (!options.extra.session) {\n      options.extra.session = {};\n    }\n    const session = options.extra.session;\n    if (!session.use_ort_model_bytes_directly) {\n      session.use_ort_model_bytes_directly = "1";\n    }\n    if (options.executionProviders && options.executionProviders.some((ep) => (typeof ep === "string" ? ep : ep.name) === "webgpu")) {\n      options.enableMemPattern = false;\n    }\n  };\n  var setExecutionProviders = (sessionOptionsHandle, executionProviders, allocs) => {\n    for (const ep of executionProviders) {\n      let epName = typeof ep === "string" ? ep : ep.name;\n      switch (epName) {\n        case "xnnpack":\n          epName = "XNNPACK";\n          break;\n        case "webnn":\n          epName = "WEBNN";\n          if (typeof ep !== "string") {\n            const webnnOptions = ep;\n            if (webnnOptions?.deviceType) {\n              const keyDataOffset = allocWasmString("deviceType", allocs);\n              const valueDataOffset = allocWasmString(webnnOptions.deviceType, allocs);\n              if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n                checkLastError(`Can\'t set a session config entry: \'deviceType\' - ${webnnOptions.deviceType}.`);\n              }\n            }\n            if (webnnOptions?.numThreads) {\n              let numThreads = webnnOptions.numThreads;\n              if (typeof numThreads != "number" || !Number.isInteger(numThreads) || numThreads < 0) {\n                numThreads = 0;\n              }\n              const keyDataOffset = allocWasmString("numThreads", allocs);\n              const valueDataOffset = allocWasmString(numThreads.toString(), allocs);\n              if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n                checkLastError(`Can\'t set a session config entry: \'numThreads\' - ${webnnOptions.numThreads}.`);\n              }\n            }\n            if (webnnOptions?.powerPreference) {\n              const keyDataOffset = allocWasmString("powerPreference", allocs);\n              const valueDataOffset = allocWasmString(webnnOptions.powerPreference, allocs);\n              if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n                checkLastError(\n                  `Can\'t set a session config entry: \'powerPreference\' - ${webnnOptions.powerPreference}.`\n                );\n              }\n            }\n          }\n          break;\n        case "webgpu":\n          epName = "JS";\n          if (typeof ep !== "string") {\n            const webgpuOptions = ep;\n            if (webgpuOptions?.preferredLayout) {\n              if (webgpuOptions.preferredLayout !== "NCHW" && webgpuOptions.preferredLayout !== "NHWC") {\n                throw new Error(`preferredLayout must be either \'NCHW\' or \'NHWC\': ${webgpuOptions.preferredLayout}`);\n              }\n              const keyDataOffset = allocWasmString("preferredLayout", allocs);\n              const valueDataOffset = allocWasmString(webgpuOptions.preferredLayout, allocs);\n              if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n                checkLastError(\n                  `Can\'t set a session config entry: \'preferredLayout\' - ${webgpuOptions.preferredLayout}.`\n                );\n              }\n            }\n          }\n          break;\n        case "wasm":\n        case "cpu":\n          continue;\n        default:\n          throw new Error(`not supported execution provider: ${epName}`);\n      }\n      const epNameDataOffset = allocWasmString(epName, allocs);\n      if (getInstance()._OrtAppendExecutionProvider(sessionOptionsHandle, epNameDataOffset) !== 0) {\n        checkLastError(`Can\'t append execution provider: ${epName}.`);\n      }\n    }\n  };\n  var setSessionOptions = (options) => {\n    const wasm2 = getInstance();\n    let sessionOptionsHandle = 0;\n    const allocs = [];\n    const sessionOptions = options || {};\n    appendDefaultOptions(sessionOptions);\n    try {\n      const graphOptimizationLevel = getGraphOptimzationLevel(sessionOptions.graphOptimizationLevel ?? "all");\n      const executionMode = getExecutionMode(sessionOptions.executionMode ?? "sequential");\n      const logIdDataOffset = typeof sessionOptions.logId === "string" ? allocWasmString(sessionOptions.logId, allocs) : 0;\n      const logSeverityLevel = sessionOptions.logSeverityLevel ?? 2;\n      if (!Number.isInteger(logSeverityLevel) || logSeverityLevel < 0 || logSeverityLevel > 4) {\n        throw new Error(`log serverity level is not valid: ${logSeverityLevel}`);\n      }\n      const logVerbosityLevel = sessionOptions.logVerbosityLevel ?? 0;\n      if (!Number.isInteger(logVerbosityLevel) || logVerbosityLevel < 0 || logVerbosityLevel > 4) {\n        throw new Error(`log verbosity level is not valid: ${logVerbosityLevel}`);\n      }\n      const optimizedModelFilePathOffset = typeof sessionOptions.optimizedModelFilePath === "string" ? allocWasmString(sessionOptions.optimizedModelFilePath, allocs) : 0;\n      sessionOptionsHandle = wasm2._OrtCreateSessionOptions(\n        graphOptimizationLevel,\n        !!sessionOptions.enableCpuMemArena,\n        !!sessionOptions.enableMemPattern,\n        executionMode,\n        !!sessionOptions.enableProfiling,\n        0,\n        logIdDataOffset,\n        logSeverityLevel,\n        logVerbosityLevel,\n        optimizedModelFilePathOffset\n      );\n      if (sessionOptionsHandle === 0) {\n        checkLastError("Can\'t create session options.");\n      }\n      if (sessionOptions.executionProviders) {\n        setExecutionProviders(sessionOptionsHandle, sessionOptions.executionProviders, allocs);\n      }\n      if (sessionOptions.freeDimensionOverrides) {\n        for (const [name, value] of Object.entries(sessionOptions.freeDimensionOverrides)) {\n          if (typeof name !== "string") {\n            throw new Error(`free dimension override name must be a string: ${name}`);\n          }\n          if (typeof value !== "number" || !Number.isInteger(value) || value < 0) {\n            throw new Error(`free dimension override value must be a non-negative integer: ${value}`);\n          }\n          const nameOffset = allocWasmString(name, allocs);\n          if (wasm2._OrtAddFreeDimensionOverride(sessionOptionsHandle, nameOffset, value) !== 0) {\n            checkLastError(`Can\'t set a free dimension override: ${name} - ${value}.`);\n          }\n        }\n      }\n      if (sessionOptions.extra !== void 0) {\n        iterateExtraOptions(sessionOptions.extra, "", /* @__PURE__ */ new WeakSet(), (key, value) => {\n          const keyDataOffset = allocWasmString(key, allocs);\n          const valueDataOffset = allocWasmString(value, allocs);\n          if (wasm2._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n            checkLastError(`Can\'t set a session config entry: ${key} - ${value}.`);\n          }\n        });\n      }\n      return [sessionOptionsHandle, allocs];\n    } catch (e) {\n      if (sessionOptionsHandle !== 0) {\n        wasm2._OrtReleaseSessionOptions(sessionOptionsHandle);\n      }\n      allocs.forEach((alloc) => wasm2._free(alloc));\n      throw e;\n    }\n  };\n\n  // web/lib/wasm/wasm-common.ts\n  var tensorDataTypeStringToEnum = (type) => {\n    switch (type) {\n      case "int8":\n        return 3 /* int8 */;\n      case "uint8":\n        return 2 /* uint8 */;\n      case "bool":\n        return 9 /* bool */;\n      case "int16":\n        return 5 /* int16 */;\n      case "uint16":\n        return 4 /* uint16 */;\n      case "int32":\n        return 6 /* int32 */;\n      case "uint32":\n        return 12 /* uint32 */;\n      case "float16":\n        return 10 /* float16 */;\n      case "float32":\n        return 1 /* float */;\n      case "float64":\n        return 11 /* double */;\n      case "string":\n        return 8 /* string */;\n      case "int64":\n        return 7 /* int64 */;\n      case "uint64":\n        return 13 /* uint64 */;\n      default:\n        throw new Error(`unsupported data type: ${type}`);\n    }\n  };\n  var tensorDataTypeEnumToString = (typeProto) => {\n    switch (typeProto) {\n      case 3 /* int8 */:\n        return "int8";\n      case 2 /* uint8 */:\n        return "uint8";\n      case 9 /* bool */:\n        return "bool";\n      case 5 /* int16 */:\n        return "int16";\n      case 4 /* uint16 */:\n        return "uint16";\n      case 6 /* int32 */:\n        return "int32";\n      case 12 /* uint32 */:\n        return "uint32";\n      case 10 /* float16 */:\n        return "float16";\n      case 1 /* float */:\n        return "float32";\n      case 11 /* double */:\n        return "float64";\n      case 8 /* string */:\n        return "string";\n      case 7 /* int64 */:\n        return "int64";\n      case 13 /* uint64 */:\n        return "uint64";\n      default:\n        throw new Error(`unsupported data type: ${typeProto}`);\n    }\n  };\n  var getTensorElementSize = (dateType) => [void 0, 4, 1, 1, 2, 2, 4, 8, void 0, 1, 2, 8, 4, 8, void 0, void 0, void 0][dateType];\n  var tensorTypeToTypedArrayConstructor = (type) => {\n    switch (type) {\n      case "float16":\n        return Uint16Array;\n      case "float32":\n        return Float32Array;\n      case "uint8":\n        return Uint8Array;\n      case "int8":\n        return Int8Array;\n      case "uint16":\n        return Uint16Array;\n      case "int16":\n        return Int16Array;\n      case "int32":\n        return Int32Array;\n      case "bool":\n        return Uint8Array;\n      case "float64":\n        return Float64Array;\n      case "uint32":\n        return Uint32Array;\n      case "int64":\n        return BigInt64Array;\n      case "uint64":\n        return BigUint64Array;\n      default:\n        throw new Error(`unsupported type: ${type}`);\n    }\n  };\n  var logLevelStringToEnum = (logLevel) => {\n    switch (logLevel) {\n      case "verbose":\n        return 0;\n      case "info":\n        return 1;\n      case "warning":\n        return 2;\n      case "error":\n        return 3;\n      case "fatal":\n        return 4;\n      default:\n        throw new Error(`unsupported logging level: ${logLevel}`);\n    }\n  };\n  var isGpuBufferSupportedType = (type) => type === "float32" || type === "int32" || type === "int64" || type === "bool" || type === "float16" || type === "uint32";\n  var dataLocationStringToEnum = (location) => {\n    switch (location) {\n      case "none":\n        return 0;\n      case "cpu":\n        return 1;\n      case "cpu-pinned":\n        return 2;\n      case "texture":\n        return 3;\n      case "gpu-buffer":\n        return 4;\n      default:\n        throw new Error(`unsupported data location: ${location}`);\n    }\n  };\n\n  // web/lib/wasm/wasm-core-impl.ts\n  var getSessionInputOutputCount = (sessionHandle) => {\n    const wasm2 = getInstance();\n    const stack = wasm2.stackSave();\n    try {\n      const dataOffset = wasm2.stackAlloc(8);\n      const errorCode = wasm2._OrtGetInputOutputCount(sessionHandle, dataOffset, dataOffset + 4);\n      if (errorCode !== 0) {\n        checkLastError("Can\'t get session input/output count.");\n      }\n      return [wasm2.HEAP32[dataOffset / 4], wasm2.HEAP32[dataOffset / 4 + 1]];\n    } finally {\n      wasm2.stackRestore(stack);\n    }\n  };\n  var initOrt = (numThreads, loggingLevel) => {\n    const errorCode = getInstance()._OrtInit(numThreads, loggingLevel);\n    if (errorCode !== 0) {\n      checkLastError("Can\'t initialize onnxruntime.");\n    }\n  };\n  var initRuntime = async (env) => {\n    initOrt(env.wasm.numThreads, logLevelStringToEnum(env.logLevel));\n    if (false) {\n      const initJsep = null.init;\n      await initJsep(getInstance(), env);\n    }\n  };\n  var activeSessions = /* @__PURE__ */ new Map();\n  var createSessionAllocate = (model) => {\n    const wasm2 = getInstance();\n    const modelDataOffset = wasm2._malloc(model.byteLength);\n    if (modelDataOffset === 0) {\n      throw new Error(`Can\'t create a session. failed to allocate a buffer of size ${model.byteLength}.`);\n    }\n    wasm2.HEAPU8.set(model, modelDataOffset);\n    return [modelDataOffset, model.byteLength];\n  };\n  var createSessionFinalize = (modelData, options) => {\n    const wasm2 = getInstance();\n    let sessionHandle = 0;\n    let sessionOptionsHandle = 0;\n    let ioBindingHandle = 0;\n    let allocs = [];\n    const inputNamesUTF8Encoded = [];\n    const outputNamesUTF8Encoded = [];\n    try {\n      [sessionOptionsHandle, allocs] = setSessionOptions(options);\n      sessionHandle = wasm2._OrtCreateSession(modelData[0], modelData[1], sessionOptionsHandle);\n      if (sessionHandle === 0) {\n        checkLastError("Can\'t create a session.");\n      }\n      const [inputCount, outputCount] = getSessionInputOutputCount(sessionHandle);\n      const inputNames = [];\n      const outputNames = [];\n      const outputPreferredLocations = [];\n      for (let i = 0; i < inputCount; i++) {\n        const name = wasm2._OrtGetInputName(sessionHandle, i);\n        if (name === 0) {\n          checkLastError("Can\'t get an input name.");\n        }\n        inputNamesUTF8Encoded.push(name);\n        inputNames.push(wasm2.UTF8ToString(name));\n      }\n      for (let i = 0; i < outputCount; i++) {\n        const name = wasm2._OrtGetOutputName(sessionHandle, i);\n        if (name === 0) {\n          checkLastError("Can\'t get an output name.");\n        }\n        outputNamesUTF8Encoded.push(name);\n        const nameString = wasm2.UTF8ToString(name);\n        outputNames.push(nameString);\n        if (false) {\n          const location = typeof options?.preferredOutputLocation === "string" ? options.preferredOutputLocation : options?.preferredOutputLocation?.[nameString] ?? "cpu";\n          if (location !== "cpu" && location !== "cpu-pinned" && location !== "gpu-buffer") {\n            throw new Error(`Not supported preferred output location: ${location}.`);\n          }\n          outputPreferredLocations.push(location);\n        }\n      }\n      let bindingState = null;\n      if (false) {\n        ioBindingHandle = wasm2._OrtCreateBinding(sessionHandle);\n        if (ioBindingHandle === 0) {\n          checkLastError("Can\'t create IO binding.");\n        }\n        bindingState = {\n          handle: ioBindingHandle,\n          outputPreferredLocations,\n          outputPreferredLocationsEncoded: outputPreferredLocations.map((l) => dataLocationStringToEnum(l))\n        };\n      }\n      activeSessions.set(sessionHandle, [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded, bindingState]);\n      return [sessionHandle, inputNames, outputNames];\n    } catch (e) {\n      inputNamesUTF8Encoded.forEach((buf) => wasm2._OrtFree(buf));\n      outputNamesUTF8Encoded.forEach((buf) => wasm2._OrtFree(buf));\n      if (ioBindingHandle !== 0) {\n        wasm2._OrtReleaseBinding(ioBindingHandle);\n      }\n      if (sessionHandle !== 0) {\n        wasm2._OrtReleaseSession(sessionHandle);\n      }\n      throw e;\n    } finally {\n      wasm2._free(modelData[0]);\n      if (sessionOptionsHandle !== 0) {\n        wasm2._OrtReleaseSessionOptions(sessionOptionsHandle);\n      }\n      allocs.forEach((alloc) => wasm2._free(alloc));\n    }\n  };\n  var createSession = (model, options) => {\n    const modelData = createSessionAllocate(model);\n    return createSessionFinalize(modelData, options);\n  };\n  var releaseSession = (sessionId) => {\n    const wasm2 = getInstance();\n    const session = activeSessions.get(sessionId);\n    if (!session) {\n      throw new Error(`cannot release session. invalid session id: ${sessionId}`);\n    }\n    const [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded, ioBindingState] = session;\n    if (ioBindingState) {\n      wasm2._OrtReleaseBinding(ioBindingState.handle);\n    }\n    wasm2.jsepUnregisterBuffers?.(sessionId);\n    inputNamesUTF8Encoded.forEach((buf) => wasm2._OrtFree(buf));\n    outputNamesUTF8Encoded.forEach((buf) => wasm2._OrtFree(buf));\n    wasm2._OrtReleaseSession(sessionHandle);\n    activeSessions.delete(sessionId);\n  };\n  var prepareInputOutputTensor = (tensor, tensorHandles, allocs, sessionId, index) => {\n    if (!tensor) {\n      tensorHandles.push(0);\n      return;\n    }\n    const wasm2 = getInstance();\n    const dataType = tensor[0];\n    const dims = tensor[1];\n    const location = tensor[3];\n    let rawData;\n    let dataByteLength;\n    if (dataType === "string" && location === "gpu-buffer") {\n      throw new Error("String tensor is not supported on GPU.");\n    }\n    if (location === "gpu-buffer") {\n      const gpuBuffer = tensor[2].gpuBuffer;\n      const elementSizeInBytes = getTensorElementSize(tensorDataTypeStringToEnum(dataType));\n      dataByteLength = dims.reduce((a, b) => a * b, 1) * elementSizeInBytes;\n      rawData = wasm2.jsepRegisterBuffer(sessionId, index, gpuBuffer, dataByteLength);\n    } else {\n      const data = tensor[2];\n      if (Array.isArray(data)) {\n        dataByteLength = 4 * data.length;\n        rawData = wasm2._malloc(dataByteLength);\n        allocs.push(rawData);\n        let dataIndex = rawData / 4;\n        for (let i = 0; i < data.length; i++) {\n          if (typeof data[i] !== "string") {\n            throw new TypeError(`tensor data at index ${i} is not a string`);\n          }\n          wasm2.HEAPU32[dataIndex++] = allocWasmString(data[i], allocs);\n        }\n      } else {\n        dataByteLength = data.byteLength;\n        rawData = wasm2._malloc(dataByteLength);\n        allocs.push(rawData);\n        wasm2.HEAPU8.set(new Uint8Array(data.buffer, data.byteOffset, dataByteLength), rawData);\n      }\n    }\n    const stack = wasm2.stackSave();\n    const dimsOffset = wasm2.stackAlloc(4 * dims.length);\n    try {\n      let dimIndex = dimsOffset / 4;\n      dims.forEach((d) => wasm2.HEAP32[dimIndex++] = d);\n      const tensor2 = wasm2._OrtCreateTensor(\n        tensorDataTypeStringToEnum(dataType),\n        rawData,\n        dataByteLength,\n        dimsOffset,\n        dims.length,\n        dataLocationStringToEnum(location)\n      );\n      if (tensor2 === 0) {\n        checkLastError(`Can\'t create tensor for input/output. session=${sessionId}, index=${index}.`);\n      }\n      tensorHandles.push(tensor2);\n    } finally {\n      wasm2.stackRestore(stack);\n    }\n  };\n  var run = async (sessionId, inputIndices, inputTensors, outputIndices, outputTensors, options) => {\n    const wasm2 = getInstance();\n    const session = activeSessions.get(sessionId);\n    if (!session) {\n      throw new Error(`cannot run inference. invalid session id: ${sessionId}`);\n    }\n    const [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded, ioBindingState] = session;\n    const inputCount = inputIndices.length;\n    const outputCount = outputIndices.length;\n    let runOptionsHandle = 0;\n    let runOptionsAllocs = [];\n    const inputTensorHandles = [];\n    const outputTensorHandles = [];\n    const inputOutputAllocs = [];\n    const beforeRunStack = wasm2.stackSave();\n    const inputValuesOffset = wasm2.stackAlloc(inputCount * 4);\n    const inputNamesOffset = wasm2.stackAlloc(inputCount * 4);\n    const outputValuesOffset = wasm2.stackAlloc(outputCount * 4);\n    const outputNamesOffset = wasm2.stackAlloc(outputCount * 4);\n    try {\n      [runOptionsHandle, runOptionsAllocs] = setRunOptions(options);\n      for (let i = 0; i < inputCount; i++) {\n        prepareInputOutputTensor(inputTensors[i], inputTensorHandles, inputOutputAllocs, sessionId, inputIndices[i]);\n      }\n      for (let i = 0; i < outputCount; i++) {\n        prepareInputOutputTensor(\n          outputTensors[i],\n          outputTensorHandles,\n          inputOutputAllocs,\n          sessionId,\n          inputCount + outputIndices[i]\n        );\n      }\n      let inputValuesIndex = inputValuesOffset / 4;\n      let inputNamesIndex = inputNamesOffset / 4;\n      let outputValuesIndex = outputValuesOffset / 4;\n      let outputNamesIndex = outputNamesOffset / 4;\n      for (let i = 0; i < inputCount; i++) {\n        wasm2.HEAPU32[inputValuesIndex++] = inputTensorHandles[i];\n        wasm2.HEAPU32[inputNamesIndex++] = inputNamesUTF8Encoded[inputIndices[i]];\n      }\n      for (let i = 0; i < outputCount; i++) {\n        wasm2.HEAPU32[outputValuesIndex++] = outputTensorHandles[i];\n        wasm2.HEAPU32[outputNamesIndex++] = outputNamesUTF8Encoded[outputIndices[i]];\n      }\n      if (false) {\n        const { handle, outputPreferredLocations, outputPreferredLocationsEncoded } = ioBindingState;\n        if (inputNamesUTF8Encoded.length !== inputCount) {\n          throw new Error(`input count from feeds (${inputCount}) is expected to be always equal to model\'s input count (${inputNamesUTF8Encoded.length}).`);\n        }\n        for (let i = 0; i < inputCount; i++) {\n          const index = inputIndices[i];\n          const errorCode2 = await wasm2._OrtBindInput(handle, inputNamesUTF8Encoded[index], inputTensorHandles[i]);\n          if (errorCode2 !== 0) {\n            checkLastError(`Can\'t bind input[${i}] for session=${sessionId}.`);\n          }\n        }\n        for (let i = 0; i < outputCount; i++) {\n          const index = outputIndices[i];\n          const location = outputTensors[i]?.[3];\n          if (location) {\n            const errorCode2 = wasm2._OrtBindOutput(handle, outputNamesUTF8Encoded[index], outputTensorHandles[i], 0);\n            if (errorCode2 !== 0) {\n              checkLastError(`Can\'t bind pre-allocated output[${i}] for session=${sessionId}.`);\n            }\n          } else {\n            const errorCode2 = wasm2._OrtBindOutput(handle, outputNamesUTF8Encoded[index], 0, outputPreferredLocationsEncoded[index]);\n            if (errorCode2 !== 0) {\n              checkLastError(`Can\'t bind output[${i}] to ${outputPreferredLocations[i]} for session=${sessionId}.`);\n            }\n          }\n        }\n      }\n      let errorCode;\n      if (false) {\n        errorCode = await wasm2._OrtRunWithBinding(\n          sessionHandle,\n          ioBindingState.handle,\n          outputCount,\n          outputValuesOffset,\n          runOptionsHandle\n        );\n      } else {\n        errorCode = await wasm2._OrtRun(\n          sessionHandle,\n          inputNamesOffset,\n          inputValuesOffset,\n          inputCount,\n          outputNamesOffset,\n          outputCount,\n          outputValuesOffset,\n          runOptionsHandle\n        );\n      }\n      if (errorCode !== 0) {\n        checkLastError("failed to call OrtRun().");\n      }\n      const output = [];\n      for (let i = 0; i < outputCount; i++) {\n        const tensor = wasm2.HEAPU32[outputValuesOffset / 4 + i];\n        if (tensor === outputTensorHandles[i]) {\n          output.push(outputTensors[i]);\n          continue;\n        }\n        const beforeGetTensorDataStack = wasm2.stackSave();\n        const tensorDataOffset = wasm2.stackAlloc(4 * 4);\n        let keepOutputTensor = false;\n        let type, dataOffset = 0;\n        try {\n          const errorCode2 = wasm2._OrtGetTensorData(\n            tensor,\n            tensorDataOffset,\n            tensorDataOffset + 4,\n            tensorDataOffset + 8,\n            tensorDataOffset + 12\n          );\n          if (errorCode2 !== 0) {\n            checkLastError(`Can\'t access output tensor data on index ${i}.`);\n          }\n          let tensorDataIndex = tensorDataOffset / 4;\n          const dataType = wasm2.HEAPU32[tensorDataIndex++];\n          dataOffset = wasm2.HEAPU32[tensorDataIndex++];\n          const dimsOffset = wasm2.HEAPU32[tensorDataIndex++];\n          const dimsLength = wasm2.HEAPU32[tensorDataIndex++];\n          const dims = [];\n          for (let i2 = 0; i2 < dimsLength; i2++) {\n            dims.push(wasm2.HEAPU32[dimsOffset / 4 + i2]);\n          }\n          wasm2._OrtFree(dimsOffset);\n          const size = dims.reduce((a, b) => a * b, 1);\n          type = tensorDataTypeEnumToString(dataType);\n          const preferredLocation = ioBindingState?.outputPreferredLocations[outputIndices[i]];\n          if (type === "string") {\n            if (preferredLocation === "gpu-buffer") {\n              throw new Error("String tensor is not supported on GPU.");\n            }\n            const stringData = [];\n            let dataIndex = dataOffset / 4;\n            for (let i2 = 0; i2 < size; i2++) {\n              const offset = wasm2.HEAPU32[dataIndex++];\n              const maxBytesToRead = i2 === size - 1 ? void 0 : wasm2.HEAPU32[dataIndex] - offset;\n              stringData.push(wasm2.UTF8ToString(offset, maxBytesToRead));\n            }\n            output.push([type, dims, stringData, "cpu"]);\n          } else {\n            if (preferredLocation === "gpu-buffer" && size > 0) {\n              const gpuBuffer = wasm2.jsepGetBuffer(dataOffset);\n              const elementSize = getTensorElementSize(dataType);\n              if (elementSize === void 0 || !isGpuBufferSupportedType(type)) {\n                throw new Error(`Unsupported data type: ${type}`);\n              }\n              keepOutputTensor = true;\n              output.push([\n                type,\n                dims,\n                {\n                  gpuBuffer,\n                  download: wasm2.jsepCreateDownloader(gpuBuffer, size * elementSize, type),\n                  dispose: () => {\n                    wasm2._OrtReleaseTensor(tensor);\n                  }\n                },\n                "gpu-buffer"\n              ]);\n            } else {\n              const typedArrayConstructor = tensorTypeToTypedArrayConstructor(type);\n              const data = new typedArrayConstructor(size);\n              new Uint8Array(data.buffer, data.byteOffset, data.byteLength).set(wasm2.HEAPU8.subarray(dataOffset, dataOffset + data.byteLength));\n              output.push([type, dims, data, "cpu"]);\n            }\n          }\n        } finally {\n          wasm2.stackRestore(beforeGetTensorDataStack);\n          if (type === "string" && dataOffset) {\n            wasm2._free(dataOffset);\n          }\n          if (!keepOutputTensor) {\n            wasm2._OrtReleaseTensor(tensor);\n          }\n        }\n      }\n      if (ioBindingState) {\n        wasm2._OrtClearBoundOutputs(ioBindingState.handle);\n      }\n      return output;\n    } finally {\n      wasm2.stackRestore(beforeRunStack);\n      inputTensorHandles.forEach((v) => wasm2._OrtReleaseTensor(v));\n      outputTensorHandles.forEach((v) => wasm2._OrtReleaseTensor(v));\n      inputOutputAllocs.forEach((p) => wasm2._free(p));\n      if (runOptionsHandle !== 0) {\n        wasm2._OrtReleaseRunOptions(runOptionsHandle);\n      }\n      runOptionsAllocs.forEach((p) => wasm2._free(p));\n    }\n  };\n  var endProfiling = (sessionId) => {\n    const wasm2 = getInstance();\n    const session = activeSessions.get(sessionId);\n    if (!session) {\n      throw new Error("invalid session id");\n    }\n    const sessionHandle = session[0];\n    const profileFileName = wasm2._OrtEndProfiling(sessionHandle);\n    if (profileFileName === 0) {\n      checkLastError("Can\'t get an profile file name.");\n    }\n    wasm2._OrtFree(profileFileName);\n  };\n  var extractTransferableBuffers = (tensors) => {\n    const buffers = [];\n    for (const tensor of tensors) {\n      const data = tensor[2];\n      if (!Array.isArray(data) && "buffer" in data) {\n        buffers.push(data.buffer);\n      }\n    }\n    return buffers;\n  };\n\n  // web/lib/wasm/proxy-worker/main.ts\n  self.onmessage = (ev) => {\n    switch (ev.data.type) {\n      case "init-wasm":\n        try {\n          initializeWebAssembly(ev.data.in).then(\n            () => postMessage({ type: "init-wasm" }),\n            (err) => postMessage({ type: "init-wasm", err })\n          );\n        } catch (err) {\n          postMessage({ type: "init-wasm", err });\n        }\n        break;\n      case "init-ort":\n        try {\n          initRuntime(ev.data.in).then(() => postMessage({ type: "init-ort" }), (err) => postMessage({\n            type: "init-ort",\n            err\n          }));\n        } catch (err) {\n          postMessage({ type: "init-ort", err });\n        }\n        break;\n      case "create_allocate":\n        try {\n          const { model } = ev.data.in;\n          const modeldata = createSessionAllocate(model);\n          postMessage({ type: "create_allocate", out: modeldata });\n        } catch (err) {\n          postMessage({ type: "create_allocate", err });\n        }\n        break;\n      case "create_finalize":\n        try {\n          const { modeldata, options } = ev.data.in;\n          const sessionMetadata = createSessionFinalize(modeldata, options);\n          postMessage({ type: "create_finalize", out: sessionMetadata });\n        } catch (err) {\n          postMessage({ type: "create_finalize", err });\n        }\n        break;\n      case "create":\n        try {\n          const { model, options } = ev.data.in;\n          const sessionMetadata = createSession(model, options);\n          postMessage({ type: "create", out: sessionMetadata });\n        } catch (err) {\n          postMessage({ type: "create", err });\n        }\n        break;\n      case "release":\n        try {\n          const handler = ev.data.in;\n          releaseSession(handler);\n          postMessage({ type: "release" });\n        } catch (err) {\n          postMessage({ type: "release", err });\n        }\n        break;\n      case "run":\n        try {\n          const { sessionId, inputIndices, inputs, outputIndices, options } = ev.data.in;\n          run(sessionId, inputIndices, inputs, outputIndices, options).then(\n            (outputs) => {\n              postMessage({ type: "run", out: outputs }, extractTransferableBuffers(outputs));\n            },\n            (err) => {\n              postMessage({ type: "run", err });\n            }\n          );\n        } catch (err) {\n          postMessage({ type: "run", err });\n        }\n        break;\n      case "end-profiling":\n        try {\n          const handler = ev.data.in;\n          endProfiling(handler);\n          postMessage({ type: "end-profiling" });\n        } catch (err) {\n          postMessage({ type: "end-profiling", err });\n        }\n        break;\n      default:\n    }\n  };\n})();\n//# sourceMappingURL=data:application/json;base64,\n';
  }
});

// web/lib/wasm/proxy-wrapper.ts
var isProxy, proxyWorker, initializing2, initialized2, aborted2, initWasmCallbacks, initOrtCallbacks, createSessionAllocateCallbacks, createSessionFinalizeCallbacks, createSessionCallbacks, releaseSessionCallbacks, runCallbacks, endProfilingCallbacks, ensureWorker, onProxyWorkerMessage, scriptSrc, initializeWebAssemblyInstance, initializeRuntime, createSessionAllocate2, createSessionFinalize2, createSession2, releaseSession2, run2, endProfiling2;
var init_proxy_wrapper = __esm({
  "web/lib/wasm/proxy-wrapper.ts"() {
    "use strict";
    init_esm();
    init_wasm_core_impl();
    init_wasm_factory();
    isProxy = () => !!env2.wasm.proxy && typeof document !== "undefined";
    initializing2 = false;
    initialized2 = false;
    aborted2 = false;
    createSessionAllocateCallbacks = [];
    createSessionFinalizeCallbacks = [];
    createSessionCallbacks = [];
    releaseSessionCallbacks = [];
    runCallbacks = [];
    endProfilingCallbacks = [];
    ensureWorker = () => {
      if (initializing2 || !initialized2 || aborted2 || !proxyWorker) {
        throw new Error("worker not ready");
      }
    };
    onProxyWorkerMessage = (ev) => {
      switch (ev.data.type) {
        case "init-wasm":
          initializing2 = false;
          if (ev.data.err) {
            aborted2 = true;
            initWasmCallbacks[1](ev.data.err);
          } else {
            initialized2 = true;
            initWasmCallbacks[0]();
          }
          break;
        case "init-ort":
          if (ev.data.err) {
            initOrtCallbacks[1](ev.data.err);
          } else {
            initOrtCallbacks[0]();
          }
          break;
        case "create_allocate":
          if (ev.data.err) {
            createSessionAllocateCallbacks.shift()[1](ev.data.err);
          } else {
            createSessionAllocateCallbacks.shift()[0](ev.data.out);
          }
          break;
        case "create_finalize":
          if (ev.data.err) {
            createSessionFinalizeCallbacks.shift()[1](ev.data.err);
          } else {
            createSessionFinalizeCallbacks.shift()[0](ev.data.out);
          }
          break;
        case "create":
          if (ev.data.err) {
            createSessionCallbacks.shift()[1](ev.data.err);
          } else {
            createSessionCallbacks.shift()[0](ev.data.out);
          }
          break;
        case "release":
          if (ev.data.err) {
            releaseSessionCallbacks.shift()[1](ev.data.err);
          } else {
            releaseSessionCallbacks.shift()[0]();
          }
          break;
        case "run":
          if (ev.data.err) {
            runCallbacks.shift()[1](ev.data.err);
          } else {
            runCallbacks.shift()[0](ev.data.out);
          }
          break;
        case "end-profiling":
          if (ev.data.err) {
            endProfilingCallbacks.shift()[1](ev.data.err);
          } else {
            endProfilingCallbacks.shift()[0]();
          }
          break;
        default:
      }
    };
    scriptSrc = typeof document !== "undefined" ? document?.currentScript?.src : void 0;
    initializeWebAssemblyInstance = async () => {
      if (isProxy()) {
        if (initialized2) {
          return;
        }
        if (initializing2) {
          throw new Error("multiple calls to 'initWasm()' detected.");
        }
        if (aborted2) {
          throw new Error("previous call to 'initWasm()' failed.");
        }
        initializing2 = true;
        if (env2.wasm.wasmPaths === void 0) {
          if (scriptSrc && scriptSrc.indexOf("blob:") !== 0) {
            env2.wasm.wasmPaths = scriptSrc.substr(0, +scriptSrc.lastIndexOf("/") + 1);
          }
        }
        return new Promise((resolve, reject) => {
          proxyWorker?.terminate();
          const workerUrl = URL.createObjectURL(new Blob(
            [
              // This require() function is handled by esbuild plugin to load file content as string.
              // eslint-disable-next-line @typescript-eslint/no-require-imports
              require_main()
            ],
            { type: "text/javascript" }
          ));
          proxyWorker = new Worker(workerUrl, { name: "ort-wasm-proxy-worker" });
          proxyWorker.onerror = (ev) => reject(ev);
          proxyWorker.onmessage = onProxyWorkerMessage;
          URL.revokeObjectURL(workerUrl);
          initWasmCallbacks = [resolve, reject];
          const message = { type: "init-wasm", in: env2.wasm };
          proxyWorker.postMessage(message);
        });
      } else {
        return initializeWebAssembly(env2.wasm);
      }
    };
    initializeRuntime = async (env3) => {
      if (isProxy()) {
        ensureWorker();
        return new Promise((resolve, reject) => {
          initOrtCallbacks = [resolve, reject];
          const message = { type: "init-ort", in: env3 };
          proxyWorker.postMessage(message);
        });
      } else {
        await initRuntime(env3);
      }
    };
    createSessionAllocate2 = async (model) => {
      if (isProxy()) {
        ensureWorker();
        return new Promise((resolve, reject) => {
          createSessionAllocateCallbacks.push([resolve, reject]);
          const message = { type: "create_allocate", in: { model } };
          proxyWorker.postMessage(message, [model.buffer]);
        });
      } else {
        return createSessionAllocate(model);
      }
    };
    createSessionFinalize2 = async (modeldata, options) => {
      if (isProxy()) {
        ensureWorker();
        return new Promise((resolve, reject) => {
          createSessionFinalizeCallbacks.push([resolve, reject]);
          const message = { type: "create_finalize", in: { modeldata, options } };
          proxyWorker.postMessage(message);
        });
      } else {
        return createSessionFinalize(modeldata, options);
      }
    };
    createSession2 = async (model, options) => {
      if (isProxy()) {
        if (options?.preferredOutputLocation) {
          throw new Error('session option "preferredOutputLocation" is not supported for proxy.');
        }
        ensureWorker();
        return new Promise((resolve, reject) => {
          createSessionCallbacks.push([resolve, reject]);
          const message = { type: "create", in: { model, options } };
          proxyWorker.postMessage(message, [model.buffer]);
        });
      } else {
        return createSession(model, options);
      }
    };
    releaseSession2 = async (sessionId) => {
      if (isProxy()) {
        ensureWorker();
        return new Promise((resolve, reject) => {
          releaseSessionCallbacks.push([resolve, reject]);
          const message = { type: "release", in: sessionId };
          proxyWorker.postMessage(message);
        });
      } else {
        releaseSession(sessionId);
      }
    };
    run2 = async (sessionId, inputIndices, inputs, outputIndices, outputs, options) => {
      if (isProxy()) {
        if (inputs.some((t) => t[3] !== "cpu")) {
          throw new Error("input tensor on GPU is not supported for proxy.");
        }
        if (outputs.some((t) => t)) {
          throw new Error("pre-allocated output tensor is not supported for proxy.");
        }
        ensureWorker();
        return new Promise((resolve, reject) => {
          runCallbacks.push([resolve, reject]);
          const serializableInputs = inputs;
          const message = { type: "run", in: { sessionId, inputIndices, inputs: serializableInputs, outputIndices, options } };
          proxyWorker.postMessage(message, extractTransferableBuffers(serializableInputs));
        });
      } else {
        return run(sessionId, inputIndices, inputs, outputIndices, outputs, options);
      }
    };
    endProfiling2 = async (sessionId) => {
      if (isProxy()) {
        ensureWorker();
        return new Promise((resolve, reject) => {
          endProfilingCallbacks.push([resolve, reject]);
          const message = { type: "end-profiling", in: sessionId };
          proxyWorker.postMessage(message);
        });
      } else {
        endProfiling(sessionId);
      }
    };
  }
});

// nodejs-ignore:node:fs/promises
var readFile2;
var init_promises = __esm({
  "nodejs-ignore:node:fs/promises"() {
    readFile2 = void 0;
  }
});

// web/lib/wasm/session-handler.ts
var runtimeInitialized, runtimeInitializationPromise, encodeTensorMetadata, decodeTensorMetadata, OnnxruntimeWebAssemblySessionHandler;
var init_session_handler = __esm({
  "web/lib/wasm/session-handler.ts"() {
    "use strict";
    init_promises();
    init_esm();
    init_proxy_wrapper();
    init_wasm_common();
    encodeTensorMetadata = (tensor, getName) => {
      switch (tensor.location) {
        case "cpu":
          return [tensor.type, tensor.dims, tensor.data, "cpu"];
        case "gpu-buffer":
          return [tensor.type, tensor.dims, { gpuBuffer: tensor.gpuBuffer }, "gpu-buffer"];
        default:
          throw new Error(`invalid data location: ${tensor.location} for ${getName()}`);
      }
    };
    decodeTensorMetadata = (tensor) => {
      switch (tensor[3]) {
        case "cpu":
          return new Tensor2(tensor[0], tensor[2], tensor[1]);
        case "gpu-buffer": {
          const dataType = tensor[0];
          if (!isGpuBufferSupportedType(dataType)) {
            throw new Error(`not supported data type: ${dataType} for deserializing GPU tensor`);
          }
          const { gpuBuffer, download, dispose } = tensor[2];
          return Tensor2.fromGpuBuffer(gpuBuffer, { dataType, dims: tensor[1], download, dispose });
        }
        default:
          throw new Error(`invalid data location: ${tensor[3]}`);
      }
    };
    OnnxruntimeWebAssemblySessionHandler = class {
      async createSessionAllocate(path) {
        const response = await fetch(path);
        if (response.status !== 200) {
          throw new Error(`failed to load model: ${path}`);
        }
        const arrayBuffer = await response.arrayBuffer();
        return createSessionAllocate2(new Uint8Array(arrayBuffer));
      }
      async loadModel(pathOrBuffer, options) {
        if (!runtimeInitialized) {
          if (!runtimeInitializationPromise) {
            runtimeInitializationPromise = initializeRuntime(env2);
          }
          await runtimeInitializationPromise;
          runtimeInitializationPromise = void 0;
          runtimeInitialized = true;
        }
        if (typeof pathOrBuffer === "string") {
          if (typeof process !== "undefined" && process.versions && process.versions.node) {
            const model = await readFile2(pathOrBuffer);
            [this.sessionId, this.inputNames, this.outputNames] = await createSession2(model, options);
          } else {
            const modelData = await this.createSessionAllocate(pathOrBuffer);
            [this.sessionId, this.inputNames, this.outputNames] = await createSessionFinalize2(modelData, options);
          }
        } else {
          [this.sessionId, this.inputNames, this.outputNames] = await createSession2(pathOrBuffer, options);
        }
      }
      async dispose() {
        return releaseSession2(this.sessionId);
      }
      async run(feeds, fetches, options) {
        const inputArray = [];
        const inputIndices = [];
        Object.entries(feeds).forEach((kvp) => {
          const name = kvp[0];
          const tensor = kvp[1];
          const index = this.inputNames.indexOf(name);
          if (index === -1) {
            throw new Error(`invalid input '${name}'`);
          }
          inputArray.push(tensor);
          inputIndices.push(index);
        });
        const outputArray = [];
        const outputIndices = [];
        Object.entries(fetches).forEach((kvp) => {
          const name = kvp[0];
          const tensor = kvp[1];
          const index = this.outputNames.indexOf(name);
          if (index === -1) {
            throw new Error(`invalid output '${name}'`);
          }
          outputArray.push(tensor);
          outputIndices.push(index);
        });
        const inputs = inputArray.map((t, i) => encodeTensorMetadata(t, () => `input "${this.inputNames[inputIndices[i]]}"`));
        const outputs = outputArray.map(
          (t, i) => t ? encodeTensorMetadata(t, () => `output "${this.outputNames[outputIndices[i]]}"`) : null
        );
        const results = await run2(this.sessionId, inputIndices, inputs, outputIndices, outputs, options);
        const resultMap = {};
        for (let i = 0; i < results.length; i++) {
          resultMap[this.outputNames[outputIndices[i]]] = outputArray[i] ?? decodeTensorMetadata(results[i]);
        }
        return resultMap;
      }
      startProfiling() {
      }
      endProfiling() {
        void endProfiling2(this.sessionId);
      }
    };
  }
});

// web/lib/backend-wasm.ts
var initializeFlags, OnnxruntimeWebAssemblyBackend;
var init_backend_wasm = __esm({
  "web/lib/backend-wasm.ts"() {
    "use strict";
    init_node_os();
    init_esm();
    init_proxy_wrapper();
    init_session_handler();
    initializeFlags = () => {
      if (typeof env2.wasm.initTimeout !== "number" || env2.wasm.initTimeout < 0) {
        env2.wasm.initTimeout = 0;
      }
      if (typeof env2.wasm.simd !== "boolean") {
        env2.wasm.simd = true;
      }
      if (typeof env2.wasm.proxy !== "boolean") {
        env2.wasm.proxy = false;
      }
      if (typeof env2.wasm.numThreads !== "number" || !Number.isInteger(env2.wasm.numThreads) || env2.wasm.numThreads <= 0) {
        const numCpuLogicalCores = typeof navigator === "undefined" ? cpus().length : navigator.hardwareConcurrency;
        env2.wasm.numThreads = Math.min(4, Math.ceil((numCpuLogicalCores || 1) / 2));
      }
    };
    OnnxruntimeWebAssemblyBackend = class {
      async init() {
        initializeFlags();
        await initializeWebAssemblyInstance();
      }
      async createInferenceSessionHandler(pathOrBuffer, options) {
        const handler = new OnnxruntimeWebAssemblySessionHandler();
        await handler.loadModel(pathOrBuffer, options);
        return Promise.resolve(handler);
      }
    };
  }
});

// web/lib/backend-wasm-training.ts
var backend_wasm_training_exports = {};
__export(backend_wasm_training_exports, {
  wasmBackend: () => wasmBackend
});
var OnnxruntimeTrainingWebAssemblyBackend, wasmBackend;
var init_backend_wasm_training = __esm({
  "web/lib/backend-wasm-training.ts"() {
    "use strict";
    init_backend_wasm();
    OnnxruntimeTrainingWebAssemblyBackend = class extends OnnxruntimeWebAssemblyBackend {
      async createTrainingSessionHandler(_checkpointStateUriOrBuffer, _trainModelUriOrBuffer, _evalModelUriOrBuffer, _optimizerModelUriOrBuffer, _options) {
        throw new Error("Method not implemented yet.");
      }
    };
    wasmBackend = new OnnxruntimeTrainingWebAssemblyBackend();
  }
});

// web/lib/index.ts
init_esm();
init_esm();

// web/lib/version.ts
var version2 = "1.17.0";

// web/lib/index.ts
if (false) {
  const onnxjsBackend = null.onnxjsBackend;
  registerBackend("webgl", onnxjsBackend, -10);
}
if (true) {
  const wasmBackend2 = false ? null.wasmBackend : (init_backend_wasm_training(), __toCommonJS(backend_wasm_training_exports)).wasmBackend;
  if (false) {
    registerBackend("webgpu", wasmBackend2, 5);
  }
  registerBackend("cpu", wasmBackend2, 10);
  registerBackend("wasm", wasmBackend2, 10);
  if (false) {
    registerBackend("xnnpack", wasmBackend2, 9);
    registerBackend("webnn", wasmBackend2, 9);
  }
}
Object.defineProperty(env2.versions, "web", { value: version2, enumerable: true });
export {
  InferenceSession2 as InferenceSession,
  Tensor2 as Tensor,
  TrainingSession2 as TrainingSession,
  env2 as env,
  registerBackend
};
//# sourceMappingURL=data:application/json;base64,
