/*!
 * ONNX Runtime Web v1.18.0
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// web/node_modules/onnxruntime-common/dist/esm/backend-impl.js
var backends, backendsSortedByPriority, registerBackend, resolveBackend;
var init_backend_impl = __esm({
  "web/node_modules/onnxruntime-common/dist/esm/backend-impl.js"() {
    backends = /* @__PURE__ */ new Map();
    backendsSortedByPriority = [];
    registerBackend = (name, backend, priority) => {
      if (backend && typeof backend.init === "function" && typeof backend.createInferenceSessionHandler === "function") {
        const currentBackend = backends.get(name);
        if (currentBackend === void 0) {
          backends.set(name, { backend, priority });
        } else if (currentBackend.priority > priority) {
          return;
        } else if (currentBackend.priority === priority) {
          if (currentBackend.backend !== backend) {
            throw new Error(`cannot register backend "${name}" using priority ${priority}`);
          }
        }
        if (priority >= 0) {
          const i = backendsSortedByPriority.indexOf(name);
          if (i !== -1) {
            backendsSortedByPriority.splice(i, 1);
          }
          for (let i2 = 0; i2 < backendsSortedByPriority.length; i2++) {
            if (backends.get(backendsSortedByPriority[i2]).priority <= priority) {
              backendsSortedByPriority.splice(i2, 0, name);
              return;
            }
          }
          backendsSortedByPriority.push(name);
        }
        return;
      }
      throw new TypeError("not a valid backend");
    };
    resolveBackend = async (backendHints) => {
      const backendNames = backendHints.length === 0 ? backendsSortedByPriority : backendHints;
      const errors = [];
      for (const backendName of backendNames) {
        const backendInfo = backends.get(backendName);
        if (backendInfo) {
          if (backendInfo.initialized) {
            return backendInfo.backend;
          } else if (backendInfo.aborted) {
            continue;
          }
          const isInitializing = !!backendInfo.initPromise;
          try {
            if (!isInitializing) {
              backendInfo.initPromise = backendInfo.backend.init(backendName);
            }
            await backendInfo.initPromise;
            backendInfo.initialized = true;
            return backendInfo.backend;
          } catch (e) {
            if (!isInitializing) {
              errors.push({ name: backendName, err: e });
            }
            backendInfo.aborted = true;
          } finally {
            delete backendInfo.initPromise;
          }
        }
      }
      throw new Error(`no available backend found. ERR: ${errors.map((e) => `[${e.name}] ${e.err}`).join(", ")}`);
    };
  }
});

// web/node_modules/onnxruntime-common/dist/esm/backend.js
var init_backend = __esm({
  "web/node_modules/onnxruntime-common/dist/esm/backend.js"() {
    init_backend_impl();
  }
});

// web/node_modules/onnxruntime-common/dist/esm/version.js
var version;
var init_version = __esm({
  "web/node_modules/onnxruntime-common/dist/esm/version.js"() {
    version = "1.18.0";
  }
});

// web/node_modules/onnxruntime-common/dist/esm/env-impl.js
var logLevelValue, env;
var init_env_impl = __esm({
  "web/node_modules/onnxruntime-common/dist/esm/env-impl.js"() {
    init_version();
    logLevelValue = "warning";
    env = {
      wasm: {},
      webgl: {},
      webgpu: {},
      versions: { common: version },
      set logLevel(value) {
        if (value === void 0) {
          return;
        }
        if (typeof value !== "string" || ["verbose", "info", "warning", "error", "fatal"].indexOf(value) === -1) {
          throw new Error(`Unsupported logging level: ${value}`);
        }
        logLevelValue = value;
      },
      get logLevel() {
        return logLevelValue;
      }
    };
    Object.defineProperty(env, "logLevel", { enumerable: true });
  }
});

// web/node_modules/onnxruntime-common/dist/esm/env.js
var env2;
var init_env = __esm({
  "web/node_modules/onnxruntime-common/dist/esm/env.js"() {
    init_env_impl();
    env2 = env;
  }
});

// web/node_modules/onnxruntime-common/dist/esm/tensor-conversion-impl.js
var tensorToDataURL, tensorToImageData;
var init_tensor_conversion_impl = __esm({
  "web/node_modules/onnxruntime-common/dist/esm/tensor-conversion-impl.js"() {
    tensorToDataURL = (tensor, options) => {
      const canvas = typeof document !== "undefined" ? document.createElement("canvas") : new OffscreenCanvas(1, 1);
      canvas.width = tensor.dims[3];
      canvas.height = tensor.dims[2];
      const pixels2DContext = canvas.getContext("2d");
      if (pixels2DContext != null) {
        let width;
        let height;
        if (options?.tensorLayout !== void 0 && options.tensorLayout === "NHWC") {
          width = tensor.dims[2];
          height = tensor.dims[3];
        } else {
          width = tensor.dims[3];
          height = tensor.dims[2];
        }
        const inputformat = options?.format !== void 0 ? options.format : "RGB";
        const norm = options?.norm;
        let normMean;
        let normBias;
        if (norm === void 0 || norm.mean === void 0) {
          normMean = [255, 255, 255, 255];
        } else {
          if (typeof norm.mean === "number") {
            normMean = [norm.mean, norm.mean, norm.mean, norm.mean];
          } else {
            normMean = [norm.mean[0], norm.mean[1], norm.mean[2], 0];
            if (norm.mean[3] !== void 0) {
              normMean[3] = norm.mean[3];
            }
          }
        }
        if (norm === void 0 || norm.bias === void 0) {
          normBias = [0, 0, 0, 0];
        } else {
          if (typeof norm.bias === "number") {
            normBias = [norm.bias, norm.bias, norm.bias, norm.bias];
          } else {
            normBias = [norm.bias[0], norm.bias[1], norm.bias[2], 0];
            if (norm.bias[3] !== void 0) {
              normBias[3] = norm.bias[3];
            }
          }
        }
        const stride = height * width;
        let rTensorPointer = 0, gTensorPointer = stride, bTensorPointer = stride * 2, aTensorPointer = -1;
        if (inputformat === "RGBA") {
          rTensorPointer = 0;
          gTensorPointer = stride;
          bTensorPointer = stride * 2;
          aTensorPointer = stride * 3;
        } else if (inputformat === "RGB") {
          rTensorPointer = 0;
          gTensorPointer = stride;
          bTensorPointer = stride * 2;
        } else if (inputformat === "RBG") {
          rTensorPointer = 0;
          bTensorPointer = stride;
          gTensorPointer = stride * 2;
        }
        for (let i = 0; i < height; i++) {
          for (let j = 0; j < width; j++) {
            const R = (tensor.data[rTensorPointer++] - normBias[0]) * normMean[0];
            const G = (tensor.data[gTensorPointer++] - normBias[1]) * normMean[1];
            const B = (tensor.data[bTensorPointer++] - normBias[2]) * normMean[2];
            const A = aTensorPointer === -1 ? 255 : (tensor.data[aTensorPointer++] - normBias[3]) * normMean[3];
            pixels2DContext.fillStyle = "rgba(" + R + "," + G + "," + B + "," + A + ")";
            pixels2DContext.fillRect(j, i, 1, 1);
          }
        }
        if ("toDataURL" in canvas) {
          return canvas.toDataURL();
        } else {
          throw new Error("toDataURL is not supported");
        }
      } else {
        throw new Error("Can not access image data");
      }
    };
    tensorToImageData = (tensor, options) => {
      const pixels2DContext = typeof document !== "undefined" ? document.createElement("canvas").getContext("2d") : new OffscreenCanvas(1, 1).getContext("2d");
      let image;
      if (pixels2DContext != null) {
        let width;
        let height;
        let channels;
        if (options?.tensorLayout !== void 0 && options.tensorLayout === "NHWC") {
          width = tensor.dims[2];
          height = tensor.dims[1];
          channels = tensor.dims[3];
        } else {
          width = tensor.dims[3];
          height = tensor.dims[2];
          channels = tensor.dims[1];
        }
        const inputformat = options !== void 0 ? options.format !== void 0 ? options.format : "RGB" : "RGB";
        const norm = options?.norm;
        let normMean;
        let normBias;
        if (norm === void 0 || norm.mean === void 0) {
          normMean = [255, 255, 255, 255];
        } else {
          if (typeof norm.mean === "number") {
            normMean = [norm.mean, norm.mean, norm.mean, norm.mean];
          } else {
            normMean = [norm.mean[0], norm.mean[1], norm.mean[2], 255];
            if (norm.mean[3] !== void 0) {
              normMean[3] = norm.mean[3];
            }
          }
        }
        if (norm === void 0 || norm.bias === void 0) {
          normBias = [0, 0, 0, 0];
        } else {
          if (typeof norm.bias === "number") {
            normBias = [norm.bias, norm.bias, norm.bias, norm.bias];
          } else {
            normBias = [norm.bias[0], norm.bias[1], norm.bias[2], 0];
            if (norm.bias[3] !== void 0) {
              normBias[3] = norm.bias[3];
            }
          }
        }
        const stride = height * width;
        if (options !== void 0) {
          if (options.format !== void 0 && (channels === 4 && options.format !== "RGBA") || channels === 3 && (options.format !== "RGB" && options.format !== "BGR")) {
            throw new Error("Tensor format doesn't match input tensor dims");
          }
        }
        const step = 4;
        let rImagePointer = 0, gImagePointer = 1, bImagePointer = 2, aImagePointer = 3;
        let rTensorPointer = 0, gTensorPointer = stride, bTensorPointer = stride * 2, aTensorPointer = -1;
        if (inputformat === "RGBA") {
          rTensorPointer = 0;
          gTensorPointer = stride;
          bTensorPointer = stride * 2;
          aTensorPointer = stride * 3;
        } else if (inputformat === "RGB") {
          rTensorPointer = 0;
          gTensorPointer = stride;
          bTensorPointer = stride * 2;
        } else if (inputformat === "RBG") {
          rTensorPointer = 0;
          bTensorPointer = stride;
          gTensorPointer = stride * 2;
        }
        image = pixels2DContext.createImageData(width, height);
        for (let i = 0; i < height * width; rImagePointer += step, gImagePointer += step, bImagePointer += step, aImagePointer += step, i++) {
          image.data[rImagePointer] = (tensor.data[rTensorPointer++] - normBias[0]) * normMean[0];
          image.data[gImagePointer] = (tensor.data[gTensorPointer++] - normBias[1]) * normMean[1];
          image.data[bImagePointer] = (tensor.data[bTensorPointer++] - normBias[2]) * normMean[2];
          image.data[aImagePointer] = aTensorPointer === -1 ? 255 : (tensor.data[aTensorPointer++] - normBias[3]) * normMean[3];
        }
      } else {
        throw new Error("Can not access image data");
      }
      return image;
    };
  }
});

// web/node_modules/onnxruntime-common/dist/esm/tensor-factory-impl.js
var bufferToTensor, tensorFromImage, tensorFromTexture, tensorFromGpuBuffer, tensorFromPinnedBuffer;
var init_tensor_factory_impl = __esm({
  "web/node_modules/onnxruntime-common/dist/esm/tensor-factory-impl.js"() {
    init_tensor_impl();
    bufferToTensor = (buffer, options) => {
      if (buffer === void 0) {
        throw new Error("Image buffer must be defined");
      }
      if (options.height === void 0 || options.width === void 0) {
        throw new Error("Image height and width must be defined");
      }
      if (options.tensorLayout === "NHWC") {
        throw new Error("NHWC Tensor layout is not supported yet");
      }
      const { height, width } = options;
      const norm = options.norm ?? { mean: 255, bias: 0 };
      let normMean;
      let normBias;
      if (typeof norm.mean === "number") {
        normMean = [norm.mean, norm.mean, norm.mean, norm.mean];
      } else {
        normMean = [norm.mean[0], norm.mean[1], norm.mean[2], norm.mean[3] ?? 255];
      }
      if (typeof norm.bias === "number") {
        normBias = [norm.bias, norm.bias, norm.bias, norm.bias];
      } else {
        normBias = [norm.bias[0], norm.bias[1], norm.bias[2], norm.bias[3] ?? 0];
      }
      const inputformat = options.format !== void 0 ? options.format : "RGBA";
      const outputformat = options.tensorFormat !== void 0 ? options.tensorFormat !== void 0 ? options.tensorFormat : "RGB" : "RGB";
      const stride = height * width;
      const float32Data = outputformat === "RGBA" ? new Float32Array(stride * 4) : new Float32Array(stride * 3);
      let step = 4, rImagePointer = 0, gImagePointer = 1, bImagePointer = 2, aImagePointer = 3;
      let rTensorPointer = 0, gTensorPointer = stride, bTensorPointer = stride * 2, aTensorPointer = -1;
      if (inputformat === "RGB") {
        step = 3;
        rImagePointer = 0;
        gImagePointer = 1;
        bImagePointer = 2;
        aImagePointer = -1;
      }
      if (outputformat === "RGBA") {
        aTensorPointer = stride * 3;
      } else if (outputformat === "RBG") {
        rTensorPointer = 0;
        bTensorPointer = stride;
        gTensorPointer = stride * 2;
      } else if (outputformat === "BGR") {
        bTensorPointer = 0;
        gTensorPointer = stride;
        rTensorPointer = stride * 2;
      }
      for (let i = 0; i < stride; i++, rImagePointer += step, bImagePointer += step, gImagePointer += step, aImagePointer += step) {
        float32Data[rTensorPointer++] = (buffer[rImagePointer] + normBias[0]) / normMean[0];
        float32Data[gTensorPointer++] = (buffer[gImagePointer] + normBias[1]) / normMean[1];
        float32Data[bTensorPointer++] = (buffer[bImagePointer] + normBias[2]) / normMean[2];
        if (aTensorPointer !== -1 && aImagePointer !== -1) {
          float32Data[aTensorPointer++] = (buffer[aImagePointer] + normBias[3]) / normMean[3];
        }
      }
      const outputTensor = outputformat === "RGBA" ? new Tensor("float32", float32Data, [1, 4, height, width]) : new Tensor("float32", float32Data, [1, 3, height, width]);
      return outputTensor;
    };
    tensorFromImage = async (image, options) => {
      const isHTMLImageEle = typeof HTMLImageElement !== "undefined" && image instanceof HTMLImageElement;
      const isImageDataEle = typeof ImageData !== "undefined" && image instanceof ImageData;
      const isImageBitmap = typeof ImageBitmap !== "undefined" && image instanceof ImageBitmap;
      const isString = typeof image === "string";
      let data;
      let bufferToTensorOptions = options ?? {};
      const createCanvas = () => {
        if (typeof document !== "undefined") {
          return document.createElement("canvas");
        } else if (typeof OffscreenCanvas !== "undefined") {
          return new OffscreenCanvas(1, 1);
        } else {
          throw new Error("Canvas is not supported");
        }
      };
      const createCanvasContext = (canvas) => {
        if (canvas instanceof HTMLCanvasElement) {
          return canvas.getContext("2d");
        } else if (canvas instanceof OffscreenCanvas) {
          return canvas.getContext("2d");
        } else {
          return null;
        }
      };
      if (isHTMLImageEle) {
        const canvas = createCanvas();
        canvas.width = image.width;
        canvas.height = image.height;
        const pixels2DContext = createCanvasContext(canvas);
        if (pixels2DContext != null) {
          let height = image.height;
          let width = image.width;
          if (options !== void 0 && options.resizedHeight !== void 0 && options.resizedWidth !== void 0) {
            height = options.resizedHeight;
            width = options.resizedWidth;
          }
          if (options !== void 0) {
            bufferToTensorOptions = options;
            if (options.tensorFormat !== void 0) {
              throw new Error("Image input config format must be RGBA for HTMLImageElement");
            } else {
              bufferToTensorOptions.tensorFormat = "RGBA";
            }
            bufferToTensorOptions.height = height;
            bufferToTensorOptions.width = width;
          } else {
            bufferToTensorOptions.tensorFormat = "RGBA";
            bufferToTensorOptions.height = height;
            bufferToTensorOptions.width = width;
          }
          pixels2DContext.drawImage(image, 0, 0);
          data = pixels2DContext.getImageData(0, 0, width, height).data;
        } else {
          throw new Error("Can not access image data");
        }
      } else if (isImageDataEle) {
        let height;
        let width;
        if (options !== void 0 && options.resizedWidth !== void 0 && options.resizedHeight !== void 0) {
          height = options.resizedHeight;
          width = options.resizedWidth;
        } else {
          height = image.height;
          width = image.width;
        }
        if (options !== void 0) {
          bufferToTensorOptions = options;
        }
        bufferToTensorOptions.format = "RGBA";
        bufferToTensorOptions.height = height;
        bufferToTensorOptions.width = width;
        if (options !== void 0) {
          const tempCanvas = createCanvas();
          tempCanvas.width = width;
          tempCanvas.height = height;
          const pixels2DContext = createCanvasContext(tempCanvas);
          if (pixels2DContext != null) {
            pixels2DContext.putImageData(image, 0, 0);
            data = pixels2DContext.getImageData(0, 0, width, height).data;
          } else {
            throw new Error("Can not access image data");
          }
        } else {
          data = image.data;
        }
      } else if (isImageBitmap) {
        if (options === void 0) {
          throw new Error("Please provide image config with format for Imagebitmap");
        }
        const canvas = createCanvas();
        canvas.width = image.width;
        canvas.height = image.height;
        const pixels2DContext = createCanvasContext(canvas);
        if (pixels2DContext != null) {
          const height = image.height;
          const width = image.width;
          pixels2DContext.drawImage(image, 0, 0, width, height);
          data = pixels2DContext.getImageData(0, 0, width, height).data;
          bufferToTensorOptions.height = height;
          bufferToTensorOptions.width = width;
          return bufferToTensor(data, bufferToTensorOptions);
        } else {
          throw new Error("Can not access image data");
        }
      } else if (isString) {
        return new Promise((resolve, reject) => {
          const canvas = createCanvas();
          const context = createCanvasContext(canvas);
          if (!image || !context) {
            return reject();
          }
          const newImage = new Image();
          newImage.crossOrigin = "Anonymous";
          newImage.src = image;
          newImage.onload = () => {
            canvas.width = newImage.width;
            canvas.height = newImage.height;
            context.drawImage(newImage, 0, 0, canvas.width, canvas.height);
            const img = context.getImageData(0, 0, canvas.width, canvas.height);
            bufferToTensorOptions.height = canvas.height;
            bufferToTensorOptions.width = canvas.width;
            resolve(bufferToTensor(img.data, bufferToTensorOptions));
          };
        });
      } else {
        throw new Error("Input data provided is not supported - aborted tensor creation");
      }
      if (data !== void 0) {
        return bufferToTensor(data, bufferToTensorOptions);
      } else {
        throw new Error("Input data provided is not supported - aborted tensor creation");
      }
    };
    tensorFromTexture = (texture, options) => {
      const { width, height, download, dispose } = options;
      const dims = [1, height, width, 4];
      return new Tensor({ location: "texture", type: "float32", texture, dims, download, dispose });
    };
    tensorFromGpuBuffer = (gpuBuffer, options) => {
      const { dataType, dims, download, dispose } = options;
      return new Tensor({ location: "gpu-buffer", type: dataType ?? "float32", gpuBuffer, dims, download, dispose });
    };
    tensorFromPinnedBuffer = (type, buffer, dims) => new Tensor({ location: "cpu-pinned", type, data: buffer, dims: dims ?? [buffer.length] });
  }
});

// web/node_modules/onnxruntime-common/dist/esm/tensor-impl-type-mapping.js
var NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP, NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP, isTypedArrayChecked, checkTypedArray;
var init_tensor_impl_type_mapping = __esm({
  "web/node_modules/onnxruntime-common/dist/esm/tensor-impl-type-mapping.js"() {
    NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP = /* @__PURE__ */ new Map([
      ["float32", Float32Array],
      ["uint8", Uint8Array],
      ["int8", Int8Array],
      ["uint16", Uint16Array],
      ["int16", Int16Array],
      ["int32", Int32Array],
      ["bool", Uint8Array],
      ["float64", Float64Array],
      ["uint32", Uint32Array]
    ]);
    NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP = /* @__PURE__ */ new Map([
      [Float32Array, "float32"],
      [Uint8Array, "uint8"],
      [Int8Array, "int8"],
      [Uint16Array, "uint16"],
      [Int16Array, "int16"],
      [Int32Array, "int32"],
      [Float64Array, "float64"],
      [Uint32Array, "uint32"]
    ]);
    isTypedArrayChecked = false;
    checkTypedArray = () => {
      if (!isTypedArrayChecked) {
        isTypedArrayChecked = true;
        const isBigInt64ArrayAvailable = typeof BigInt64Array !== "undefined" && BigInt64Array.from;
        const isBigUint64ArrayAvailable = typeof BigUint64Array !== "undefined" && BigUint64Array.from;
        const isFloat16ArrayAvailable = typeof Float16Array !== "undefined" && Float16Array.from;
        if (isBigInt64ArrayAvailable) {
          NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set("int64", BigInt64Array);
          NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(BigInt64Array, "int64");
        }
        if (isBigUint64ArrayAvailable) {
          NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set("uint64", BigUint64Array);
          NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(BigUint64Array, "uint64");
        }
        if (isFloat16ArrayAvailable) {
          NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set("float16", Float16Array);
          NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(Float16Array, "float16");
        } else {
          NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set("float16", Uint16Array);
        }
      }
    };
  }
});

// web/node_modules/onnxruntime-common/dist/esm/tensor-utils-impl.js
var calculateSize, tensorReshape;
var init_tensor_utils_impl = __esm({
  "web/node_modules/onnxruntime-common/dist/esm/tensor-utils-impl.js"() {
    init_tensor_impl();
    calculateSize = (dims) => {
      let size = 1;
      for (let i = 0; i < dims.length; i++) {
        const dim = dims[i];
        if (typeof dim !== "number" || !Number.isSafeInteger(dim)) {
          throw new TypeError(`dims[${i}] must be an integer, got: ${dim}`);
        }
        if (dim < 0) {
          throw new RangeError(`dims[${i}] must be a non-negative integer, got: ${dim}`);
        }
        size *= dim;
      }
      return size;
    };
    tensorReshape = (tensor, dims) => {
      switch (tensor.location) {
        case "cpu":
          return new Tensor(tensor.type, tensor.data, dims);
        case "cpu-pinned":
          return new Tensor({
            location: "cpu-pinned",
            data: tensor.data,
            type: tensor.type,
            dims
          });
        case "texture":
          return new Tensor({
            location: "texture",
            texture: tensor.texture,
            type: tensor.type,
            dims
          });
        case "gpu-buffer":
          return new Tensor({
            location: "gpu-buffer",
            gpuBuffer: tensor.gpuBuffer,
            type: tensor.type,
            dims
          });
        default:
          throw new Error(`tensorReshape: tensor location ${tensor.location} is not supported`);
      }
    };
  }
});

// web/node_modules/onnxruntime-common/dist/esm/tensor-impl.js
var Tensor;
var init_tensor_impl = __esm({
  "web/node_modules/onnxruntime-common/dist/esm/tensor-impl.js"() {
    init_tensor_conversion_impl();
    init_tensor_factory_impl();
    init_tensor_impl_type_mapping();
    init_tensor_utils_impl();
    Tensor = class {
      /**
       * implementation.
       */
      constructor(arg0, arg1, arg2) {
        checkTypedArray();
        let type;
        let dims;
        if (typeof arg0 === "object" && "location" in arg0) {
          this.dataLocation = arg0.location;
          type = arg0.type;
          dims = arg0.dims;
          switch (arg0.location) {
            case "cpu-pinned": {
              const expectedTypedArrayConstructor = NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.get(type);
              if (!expectedTypedArrayConstructor) {
                throw new TypeError(`unsupported type "${type}" to create tensor from pinned buffer`);
              }
              if (!(arg0.data instanceof expectedTypedArrayConstructor)) {
                throw new TypeError(`buffer should be of type ${expectedTypedArrayConstructor.name}`);
              }
              this.cpuData = arg0.data;
              break;
            }
            case "texture": {
              if (type !== "float32") {
                throw new TypeError(`unsupported type "${type}" to create tensor from texture`);
              }
              this.gpuTextureData = arg0.texture;
              this.downloader = arg0.download;
              this.disposer = arg0.dispose;
              break;
            }
            case "gpu-buffer": {
              if (type !== "float32" && type !== "float16" && type !== "int32" && type !== "int64" && type !== "uint32" && type !== "uint8" && type !== "bool") {
                throw new TypeError(`unsupported type "${type}" to create tensor from gpu buffer`);
              }
              this.gpuBufferData = arg0.gpuBuffer;
              this.downloader = arg0.download;
              this.disposer = arg0.dispose;
              break;
            }
            default:
              throw new Error(`Tensor constructor: unsupported location '${this.dataLocation}'`);
          }
        } else {
          let data;
          let maybeDims;
          if (typeof arg0 === "string") {
            type = arg0;
            maybeDims = arg2;
            if (arg0 === "string") {
              if (!Array.isArray(arg1)) {
                throw new TypeError("A string tensor's data must be a string array.");
              }
              data = arg1;
            } else {
              const typedArrayConstructor = NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.get(arg0);
              if (typedArrayConstructor === void 0) {
                throw new TypeError(`Unsupported tensor type: ${arg0}.`);
              }
              if (Array.isArray(arg1)) {
                if (arg0 === "float16" && typedArrayConstructor === Uint16Array) {
                  throw new TypeError("Creating a float16 tensor from number array is not supported. Please use Uint16Array as data.");
                } else if (arg0 === "uint64" || arg0 === "int64") {
                  data = typedArrayConstructor.from(arg1, BigInt);
                } else {
                  data = typedArrayConstructor.from(arg1);
                }
              } else if (arg1 instanceof typedArrayConstructor) {
                data = arg1;
              } else {
                throw new TypeError(`A ${type} tensor's data must be type of ${typedArrayConstructor}`);
              }
            }
          } else {
            maybeDims = arg1;
            if (Array.isArray(arg0)) {
              if (arg0.length === 0) {
                throw new TypeError("Tensor type cannot be inferred from an empty array.");
              }
              const firstElementType = typeof arg0[0];
              if (firstElementType === "string") {
                type = "string";
                data = arg0;
              } else if (firstElementType === "boolean") {
                type = "bool";
                data = Uint8Array.from(arg0);
              } else {
                throw new TypeError(`Invalid element type of data array: ${firstElementType}.`);
              }
            } else {
              const mappedType = NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.get(arg0.constructor);
              if (mappedType === void 0) {
                throw new TypeError(`Unsupported type for tensor data: ${arg0.constructor}.`);
              }
              type = mappedType;
              data = arg0;
            }
          }
          if (maybeDims === void 0) {
            maybeDims = [data.length];
          } else if (!Array.isArray(maybeDims)) {
            throw new TypeError("A tensor's dims must be a number array");
          }
          dims = maybeDims;
          this.cpuData = data;
          this.dataLocation = "cpu";
        }
        const size = calculateSize(dims);
        if (this.cpuData && size !== this.cpuData.length) {
          throw new Error(`Tensor's size(${size}) does not match data length(${this.cpuData.length}).`);
        }
        this.type = type;
        this.dims = dims;
        this.size = size;
      }
      // #endregion
      // #region factory
      static async fromImage(image, options) {
        return tensorFromImage(image, options);
      }
      static fromTexture(texture, options) {
        return tensorFromTexture(texture, options);
      }
      static fromGpuBuffer(gpuBuffer, options) {
        return tensorFromGpuBuffer(gpuBuffer, options);
      }
      static fromPinnedBuffer(type, buffer, dims) {
        return tensorFromPinnedBuffer(type, buffer, dims);
      }
      // #endregion
      // #region conversions
      toDataURL(options) {
        return tensorToDataURL(this, options);
      }
      toImageData(options) {
        return tensorToImageData(this, options);
      }
      // #endregion
      // #region properties
      get data() {
        this.ensureValid();
        if (!this.cpuData) {
          throw new Error("The data is not on CPU. Use `getData()` to download GPU data to CPU, or use `texture` or `gpuBuffer` property to access the GPU data directly.");
        }
        return this.cpuData;
      }
      get location() {
        return this.dataLocation;
      }
      get texture() {
        this.ensureValid();
        if (!this.gpuTextureData) {
          throw new Error("The data is not stored as a WebGL texture.");
        }
        return this.gpuTextureData;
      }
      get gpuBuffer() {
        this.ensureValid();
        if (!this.gpuBufferData) {
          throw new Error("The data is not stored as a WebGPU buffer.");
        }
        return this.gpuBufferData;
      }
      // #endregion
      // #region methods
      async getData(releaseData) {
        this.ensureValid();
        switch (this.dataLocation) {
          case "cpu":
          case "cpu-pinned":
            return this.data;
          case "texture":
          case "gpu-buffer": {
            if (!this.downloader) {
              throw new Error("The current tensor is not created with a specified data downloader.");
            }
            if (this.isDownloading) {
              throw new Error("The current tensor is being downloaded.");
            }
            try {
              this.isDownloading = true;
              const data = await this.downloader();
              this.downloader = void 0;
              this.dataLocation = "cpu";
              this.cpuData = data;
              if (releaseData && this.disposer) {
                this.disposer();
                this.disposer = void 0;
              }
              return data;
            } finally {
              this.isDownloading = false;
            }
          }
          default:
            throw new Error(`cannot get data from location: ${this.dataLocation}`);
        }
      }
      dispose() {
        if (this.isDownloading) {
          throw new Error("The current tensor is being downloaded.");
        }
        if (this.disposer) {
          this.disposer();
          this.disposer = void 0;
        }
        this.cpuData = void 0;
        this.gpuTextureData = void 0;
        this.gpuBufferData = void 0;
        this.downloader = void 0;
        this.isDownloading = void 0;
        this.dataLocation = "none";
      }
      // #endregion
      // #region tensor utilities
      ensureValid() {
        if (this.dataLocation === "none") {
          throw new Error("The tensor is disposed.");
        }
      }
      reshape(dims) {
        this.ensureValid();
        if (this.downloader || this.disposer) {
          throw new Error("Cannot reshape a tensor that owns GPU resource.");
        }
        return tensorReshape(this, dims);
      }
    };
  }
});

// web/node_modules/onnxruntime-common/dist/esm/tensor.js
var Tensor2;
var init_tensor = __esm({
  "web/node_modules/onnxruntime-common/dist/esm/tensor.js"() {
    init_tensor_impl();
    Tensor2 = Tensor;
  }
});

// web/node_modules/onnxruntime-common/dist/esm/trace.js
var TRACE, TRACE_FUNC, TRACE_FUNC_BEGIN, TRACE_FUNC_END;
var init_trace = __esm({
  "web/node_modules/onnxruntime-common/dist/esm/trace.js"() {
    init_env_impl();
    TRACE = (deviceType, label) => {
      if (typeof env.trace === "undefined" ? !env.wasm.trace : !env.trace) {
        return;
      }
      console.timeStamp(`${deviceType}::ORT::${label}`);
    };
    TRACE_FUNC = (msg, extraMsg) => {
      const stack = new Error().stack?.split(/\r\n|\r|\n/g) || [];
      let hasTraceFunc = false;
      for (let i = 0; i < stack.length; i++) {
        if (hasTraceFunc && !stack[i].includes("TRACE_FUNC")) {
          let label = `FUNC_${msg}::${stack[i].trim().split(" ")[1]}`;
          if (extraMsg) {
            label += `::${extraMsg}`;
          }
          TRACE("CPU", label);
          return;
        }
        if (stack[i].includes("TRACE_FUNC")) {
          hasTraceFunc = true;
        }
      }
    };
    TRACE_FUNC_BEGIN = (extraMsg) => {
      if (typeof env.trace === "undefined" ? !env.wasm.trace : !env.trace) {
        return;
      }
      TRACE_FUNC("BEGIN", extraMsg);
    };
    TRACE_FUNC_END = (extraMsg) => {
      if (typeof env.trace === "undefined" ? !env.wasm.trace : !env.trace) {
        return;
      }
      TRACE_FUNC("END", extraMsg);
    };
  }
});

// web/node_modules/onnxruntime-common/dist/esm/inference-session-impl.js
var InferenceSession;
var init_inference_session_impl = __esm({
  "web/node_modules/onnxruntime-common/dist/esm/inference-session-impl.js"() {
    init_backend_impl();
    init_tensor();
    init_trace();
    InferenceSession = class _InferenceSession {
      constructor(handler) {
        this.handler = handler;
      }
      async run(feeds, arg1, arg2) {
        TRACE_FUNC_BEGIN();
        const fetches = {};
        let options = {};
        if (typeof feeds !== "object" || feeds === null || feeds instanceof Tensor2 || Array.isArray(feeds)) {
          throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");
        }
        let isFetchesEmpty = true;
        if (typeof arg1 === "object") {
          if (arg1 === null) {
            throw new TypeError("Unexpected argument[1]: cannot be null.");
          }
          if (arg1 instanceof Tensor2) {
            throw new TypeError("'fetches' cannot be a Tensor");
          }
          if (Array.isArray(arg1)) {
            if (arg1.length === 0) {
              throw new TypeError("'fetches' cannot be an empty array.");
            }
            isFetchesEmpty = false;
            for (const name of arg1) {
              if (typeof name !== "string") {
                throw new TypeError("'fetches' must be a string array or an object.");
              }
              if (this.outputNames.indexOf(name) === -1) {
                throw new RangeError(`'fetches' contains invalid output name: ${name}.`);
              }
              fetches[name] = null;
            }
            if (typeof arg2 === "object" && arg2 !== null) {
              options = arg2;
            } else if (typeof arg2 !== "undefined") {
              throw new TypeError("'options' must be an object.");
            }
          } else {
            let isFetches = false;
            const arg1Keys = Object.getOwnPropertyNames(arg1);
            for (const name of this.outputNames) {
              if (arg1Keys.indexOf(name) !== -1) {
                const v = arg1[name];
                if (v === null || v instanceof Tensor2) {
                  isFetches = true;
                  isFetchesEmpty = false;
                  fetches[name] = v;
                }
              }
            }
            if (isFetches) {
              if (typeof arg2 === "object" && arg2 !== null) {
                options = arg2;
              } else if (typeof arg2 !== "undefined") {
                throw new TypeError("'options' must be an object.");
              }
            } else {
              options = arg1;
            }
          }
        } else if (typeof arg1 !== "undefined") {
          throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");
        }
        for (const name of this.inputNames) {
          if (typeof feeds[name] === "undefined") {
            throw new Error(`input '${name}' is missing in 'feeds'.`);
          }
        }
        if (isFetchesEmpty) {
          for (const name of this.outputNames) {
            fetches[name] = null;
          }
        }
        const results = await this.handler.run(feeds, fetches, options);
        const returnValue = {};
        for (const key in results) {
          if (Object.hasOwnProperty.call(results, key)) {
            const result = results[key];
            if (result instanceof Tensor2) {
              returnValue[key] = result;
            } else {
              returnValue[key] = new Tensor2(result.type, result.data, result.dims);
            }
          }
        }
        TRACE_FUNC_END();
        return returnValue;
      }
      async release() {
        return this.handler.dispose();
      }
      static async create(arg0, arg1, arg2, arg3) {
        TRACE_FUNC_BEGIN();
        let filePathOrUint8Array;
        let options = {};
        if (typeof arg0 === "string") {
          filePathOrUint8Array = arg0;
          if (typeof arg1 === "object" && arg1 !== null) {
            options = arg1;
          } else if (typeof arg1 !== "undefined") {
            throw new TypeError("'options' must be an object.");
          }
        } else if (arg0 instanceof Uint8Array) {
          filePathOrUint8Array = arg0;
          if (typeof arg1 === "object" && arg1 !== null) {
            options = arg1;
          } else if (typeof arg1 !== "undefined") {
            throw new TypeError("'options' must be an object.");
          }
        } else if (arg0 instanceof ArrayBuffer || typeof SharedArrayBuffer !== "undefined" && arg0 instanceof SharedArrayBuffer) {
          const buffer = arg0;
          let byteOffset = 0;
          let byteLength = arg0.byteLength;
          if (typeof arg1 === "object" && arg1 !== null) {
            options = arg1;
          } else if (typeof arg1 === "number") {
            byteOffset = arg1;
            if (!Number.isSafeInteger(byteOffset)) {
              throw new RangeError("'byteOffset' must be an integer.");
            }
            if (byteOffset < 0 || byteOffset >= buffer.byteLength) {
              throw new RangeError(`'byteOffset' is out of range [0, ${buffer.byteLength}).`);
            }
            byteLength = arg0.byteLength - byteOffset;
            if (typeof arg2 === "number") {
              byteLength = arg2;
              if (!Number.isSafeInteger(byteLength)) {
                throw new RangeError("'byteLength' must be an integer.");
              }
              if (byteLength <= 0 || byteOffset + byteLength > buffer.byteLength) {
                throw new RangeError(`'byteLength' is out of range (0, ${buffer.byteLength - byteOffset}].`);
              }
              if (typeof arg3 === "object" && arg3 !== null) {
                options = arg3;
              } else if (typeof arg3 !== "undefined") {
                throw new TypeError("'options' must be an object.");
              }
            } else if (typeof arg2 !== "undefined") {
              throw new TypeError("'byteLength' must be a number.");
            }
          } else if (typeof arg1 !== "undefined") {
            throw new TypeError("'options' must be an object.");
          }
          filePathOrUint8Array = new Uint8Array(buffer, byteOffset, byteLength);
        } else {
          throw new TypeError("Unexpected argument[0]: must be 'path' or 'buffer'.");
        }
        const eps = options.executionProviders || [];
        const backendHints = eps.map((i) => typeof i === "string" ? i : i.name);
        const backend = await resolveBackend(backendHints);
        const handler = await backend.createInferenceSessionHandler(filePathOrUint8Array, options);
        TRACE_FUNC_END();
        return new _InferenceSession(handler);
      }
      startProfiling() {
        this.handler.startProfiling();
      }
      endProfiling() {
        this.handler.endProfiling();
      }
      get inputNames() {
        return this.handler.inputNames;
      }
      get outputNames() {
        return this.handler.outputNames;
      }
    };
  }
});

// web/node_modules/onnxruntime-common/dist/esm/inference-session.js
var InferenceSession2;
var init_inference_session = __esm({
  "web/node_modules/onnxruntime-common/dist/esm/inference-session.js"() {
    init_inference_session_impl();
    InferenceSession2 = InferenceSession;
  }
});

// web/node_modules/onnxruntime-common/dist/esm/onnx-value.js
var init_onnx_value = __esm({
  "web/node_modules/onnxruntime-common/dist/esm/onnx-value.js"() {
  }
});

// web/node_modules/onnxruntime-common/dist/esm/training-session-impl.js
var noBackendErrMsg, TrainingSession;
var init_training_session_impl = __esm({
  "web/node_modules/onnxruntime-common/dist/esm/training-session-impl.js"() {
    init_backend_impl();
    init_tensor();
    noBackendErrMsg = "Training backend could not be resolved. Make sure you're using the correct configuration & WebAssembly files.";
    TrainingSession = class _TrainingSession {
      constructor(handler, hasOptimizerModel, hasEvalModel) {
        this.handler = handler;
        this.hasOptimizerModel = hasOptimizerModel;
        this.hasEvalModel = hasEvalModel;
      }
      get trainingInputNames() {
        return this.handler.inputNames;
      }
      get trainingOutputNames() {
        return this.handler.outputNames;
      }
      get evalInputNames() {
        if (this.hasEvalModel) {
          return this.handler.evalInputNames;
        } else {
          throw new Error("This training session has no evalModel loaded.");
        }
      }
      get evalOutputNames() {
        if (this.hasEvalModel) {
          return this.handler.evalOutputNames;
        } else {
          throw new Error("This training session has no evalModel loaded.");
        }
      }
      static async create(trainingOptions, sessionOptions) {
        const evalModel = trainingOptions.evalModel || "";
        const optimizerModel = trainingOptions.optimizerModel || "";
        const options = sessionOptions || {};
        const eps = options.executionProviders || [];
        const backendHints = eps.map((i) => typeof i === "string" ? i : i.name);
        const backend = await resolveBackend(backendHints);
        if (backend.createTrainingSessionHandler) {
          const handler = await backend.createTrainingSessionHandler(trainingOptions.checkpointState, trainingOptions.trainModel, evalModel, optimizerModel, options);
          return new _TrainingSession(handler, !!trainingOptions.optimizerModel, !!trainingOptions.evalModel);
        } else {
          throw new Error(noBackendErrMsg);
        }
      }
      /**
       * Helper function for runTrainStep and future runStep methods that handles the type-narrowing conversion from
       * the given parameters to SessionHandler.FetchesType and RunOptions.
       *
       * @param inputNames the feeds object is checked that they contain all input names in the provided list of input
       * names.
       * @param outputNames the fetches object is checked that their keys match up with valid names in the list of output
       * names.
       * @param feeds the required input
       * @param arg1 narrowed & converted into the SessionHandler.FetchesType or RunOptions object
       * @param arg2 optional RunOptions object.
       * @returns
       */
      typeNarrowingForRunStep(inputNames, outputNames, feeds, arg1, arg2) {
        const fetches = {};
        let options = {};
        if (typeof feeds !== "object" || feeds === null || feeds instanceof Tensor2 || Array.isArray(feeds)) {
          throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");
        }
        let isFetchesEmpty = true;
        if (typeof arg1 === "object") {
          if (arg1 === null) {
            throw new TypeError("Unexpected argument[1]: cannot be null.");
          }
          if (arg1 instanceof Tensor2) {
            throw new TypeError("'fetches' cannot be a Tensor");
          }
          if (Array.isArray(arg1)) {
            if (arg1.length === 0) {
              throw new TypeError("'fetches' cannot be an empty array.");
            }
            isFetchesEmpty = false;
            for (const name of arg1) {
              if (typeof name !== "string") {
                throw new TypeError("'fetches' must be a string array or an object.");
              }
              if (outputNames.indexOf(name) === -1) {
                throw new RangeError(`'fetches' contains invalid output name: ${name}.`);
              }
              fetches[name] = null;
            }
            if (typeof arg2 === "object" && arg2 !== null) {
              options = arg2;
            } else if (typeof arg2 !== "undefined") {
              throw new TypeError("'options' must be an object.");
            }
          } else {
            let isFetches = false;
            const arg1Keys = Object.getOwnPropertyNames(arg1);
            for (const name of outputNames) {
              if (arg1Keys.indexOf(name) !== -1) {
                const v = arg1[name];
                if (v === null || v instanceof Tensor2) {
                  isFetches = true;
                  isFetchesEmpty = false;
                  fetches[name] = v;
                }
              }
            }
            if (isFetches) {
              if (typeof arg2 === "object" && arg2 !== null) {
                options = arg2;
              } else if (typeof arg2 !== "undefined") {
                throw new TypeError("'options' must be an object.");
              }
            } else {
              options = arg1;
            }
          }
        } else if (typeof arg1 !== "undefined") {
          throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");
        }
        for (const name of inputNames) {
          if (typeof feeds[name] === "undefined") {
            throw new Error(`input '${name}' is missing in 'feeds'.`);
          }
        }
        if (isFetchesEmpty) {
          for (const name of outputNames) {
            fetches[name] = null;
          }
        }
        return [fetches, options];
      }
      /**
       * Helper method for runTrainStep and any other runStep methods. Takes the ReturnType result from the SessionHandler
       * and changes it into a map of Tensors.
       *
       * @param results
       * @returns
       */
      convertHandlerReturnTypeToMapOfTensors(results) {
        const returnValue = {};
        for (const key in results) {
          if (Object.hasOwnProperty.call(results, key)) {
            const result = results[key];
            if (result instanceof Tensor2) {
              returnValue[key] = result;
            } else {
              returnValue[key] = new Tensor2(result.type, result.data, result.dims);
            }
          }
        }
        return returnValue;
      }
      async lazyResetGrad() {
        await this.handler.lazyResetGrad();
      }
      async runTrainStep(feeds, arg1, arg2) {
        const [fetches, options] = this.typeNarrowingForRunStep(this.trainingInputNames, this.trainingOutputNames, feeds, arg1, arg2);
        const results = await this.handler.runTrainStep(feeds, fetches, options);
        return this.convertHandlerReturnTypeToMapOfTensors(results);
      }
      async runOptimizerStep(options) {
        if (this.hasOptimizerModel) {
          await this.handler.runOptimizerStep(options || {});
        } else {
          throw new Error("This TrainingSession has no OptimizerModel loaded.");
        }
      }
      async runEvalStep(feeds, arg1, arg2) {
        if (this.hasEvalModel) {
          const [fetches, options] = this.typeNarrowingForRunStep(this.evalInputNames, this.evalOutputNames, feeds, arg1, arg2);
          const results = await this.handler.runEvalStep(feeds, fetches, options);
          return this.convertHandlerReturnTypeToMapOfTensors(results);
        } else {
          throw new Error("This TrainingSession has no EvalModel loaded.");
        }
      }
      async getParametersSize(trainableOnly = true) {
        return this.handler.getParametersSize(trainableOnly);
      }
      async loadParametersBuffer(array, trainableOnly = true) {
        const paramsSize = await this.getParametersSize(trainableOnly);
        if (array.length !== 4 * paramsSize) {
          throw new Error("Size of the buffer passed into loadParametersBuffer must match the number of parameters in the model. Please use getParametersSize method to check.");
        }
        return this.handler.loadParametersBuffer(array, trainableOnly);
      }
      async getContiguousParameters(trainableOnly = true) {
        return this.handler.getContiguousParameters(trainableOnly);
      }
      async release() {
        return this.handler.dispose();
      }
    };
  }
});

// web/node_modules/onnxruntime-common/dist/esm/training-session.js
var TrainingSession2;
var init_training_session = __esm({
  "web/node_modules/onnxruntime-common/dist/esm/training-session.js"() {
    init_training_session_impl();
    TrainingSession2 = TrainingSession;
  }
});

// web/node_modules/onnxruntime-common/dist/esm/index.js
var esm_exports = {};
__export(esm_exports, {
  InferenceSession: () => InferenceSession2,
  TRACE: () => TRACE,
  TRACE_FUNC_BEGIN: () => TRACE_FUNC_BEGIN,
  TRACE_FUNC_END: () => TRACE_FUNC_END,
  Tensor: () => Tensor2,
  TrainingSession: () => TrainingSession2,
  env: () => env2,
  registerBackend: () => registerBackend
});
var init_esm = __esm({
  "web/node_modules/onnxruntime-common/dist/esm/index.js"() {
    init_backend();
    init_env();
    init_inference_session();
    init_tensor();
    init_trace();
    init_onnx_value();
    init_training_session();
  }
});

// nodejs-ignore:node:os
var cpus;
var init_node_os = __esm({
  "nodejs-ignore:node:os"() {
    cpus = void 0;
  }
});

// nodejs-ignore:node:path
var join;
var init_node_path = __esm({
  "nodejs-ignore:node:path"() {
    join = void 0;
  }
});

// nodejs-ignore:fs
var fs_exports = {};
__export(fs_exports, {
  createReadStream: () => createReadStream,
  readFile: () => readFile,
  readFileSync: () => readFileSync
});
var readFile, readFileSync, createReadStream;
var init_fs = __esm({
  "nodejs-ignore:fs"() {
    readFile = void 0;
    readFileSync = void 0;
    createReadStream = void 0;
  }
});

// nodejs-ignore:path
var path_exports = {};
__export(path_exports, {
  join: () => join2
});
var join2;
var init_path = __esm({
  "nodejs-ignore:path"() {
    join2 = void 0;
  }
});

// web/lib/wasm/binding/ort-training-wasm-simd.js
var require_ort_training_wasm_simd = __commonJS({
  "web/lib/wasm/binding/ort-training-wasm-simd.js"(exports, module2) {
    "use strict";
    var ortWasm = (() => {
      var _scriptDir = typeof document !== "undefined" && document.currentScript ? document.currentScript.src : void 0;
      if (typeof __filename !== "undefined")
        _scriptDir = _scriptDir || __filename;
      return function(moduleArg = {}) {
        var e = moduleArg, k, l;
        e.ready = new Promise((a, b) => {
          k = a;
          l = b;
        });
        var aa = Object.assign({}, e), ba = "./this.program", ca = "object" == typeof window, q = "function" == typeof importScripts, da = "object" == typeof process && "object" == typeof process.versions && "string" == typeof process.versions.node, v = "", x, z, A;
        if (da) {
          var fs = (init_fs(), __toCommonJS(fs_exports)), B = (init_path(), __toCommonJS(path_exports));
          v = q ? B.dirname(v) + "/" : __dirname + "/";
          x = (a, b) => {
            a = C(a) ? new URL(a) : B.normalize(a);
            return fs.readFileSync(a, b ? void 0 : "utf8");
          };
          A = (a) => {
            a = x(a, true);
            a.buffer || (a = new Uint8Array(a));
            return a;
          };
          z = (a, b, c, d = true) => {
            a = C(a) ? new URL(a) : B.normalize(a);
            fs.readFile(a, d ? void 0 : "utf8", (g, h) => {
              g ? c(g) : b(d ? h.buffer : h);
            });
          };
          !e.thisProgram && 1 < process.argv.length && (ba = process.argv[1].replace(/\\/g, "/"));
          process.argv.slice(2);
          e.inspect = () => "[Emscripten Module object]";
        } else if (ca || q)
          q ? v = self.location.href : "undefined" != typeof document && document.currentScript && (v = document.currentScript.src), _scriptDir && (v = _scriptDir), 0 !== v.indexOf("blob:") ? v = v.substr(0, v.replace(/[?#].*/, "").lastIndexOf("/") + 1) : v = "", x = (a) => {
            var b = new XMLHttpRequest();
            b.open("GET", a, false);
            b.send(null);
            return b.responseText;
          }, q && (A = (a) => {
            var b = new XMLHttpRequest();
            b.open("GET", a, false);
            b.responseType = "arraybuffer";
            b.send(null);
            return new Uint8Array(b.response);
          }), z = (a, b, c) => {
            var d = new XMLHttpRequest();
            d.open("GET", a, true);
            d.responseType = "arraybuffer";
            d.onload = () => {
              200 == d.status || 0 == d.status && d.response ? b(d.response) : c();
            };
            d.onerror = c;
            d.send(null);
          };
        var ea = console.log.bind(console), D = console.error.bind(console);
        Object.assign(e, aa);
        aa = null;
        "object" != typeof WebAssembly && E("no native wasm support detected");
        var F, fa = false, G, H, I, J, ha;
        function ia() {
          var a = F.buffer;
          e.HEAP8 = G = new Int8Array(a);
          e.HEAP16 = new Int16Array(a);
          e.HEAPU8 = H = new Uint8Array(a);
          e.HEAPU16 = new Uint16Array(a);
          e.HEAP32 = I = new Int32Array(a);
          e.HEAPU32 = J = new Uint32Array(a);
          e.HEAPF32 = new Float32Array(a);
          e.HEAPF64 = ha = new Float64Array(a);
        }
        var K = [], L = [], ja = [], M = 0, N = null, O = null;
        function E(a) {
          a = "Aborted(" + a + ")";
          D(a);
          fa = true;
          a = new WebAssembly.RuntimeError(a + ". Build with -sASSERTIONS for more info.");
          l(a);
          throw a;
        }
        var ka = (a) => a.startsWith("data:application/octet-stream;base64,"), C = (a) => a.startsWith("file://"), P;
        P = "ort-training-wasm-simd.wasm";
        if (!ka(P)) {
          var la = P;
          P = e.locateFile ? e.locateFile(la, v) : v + la;
        }
        function ma(a) {
          if (A)
            return A(a);
          throw "both async and sync fetching of the wasm failed";
        }
        function na(a) {
          if (ca || q) {
            if ("function" == typeof fetch && !C(a))
              return fetch(a, { credentials: "same-origin" }).then((b) => {
                if (!b.ok)
                  throw "failed to load wasm binary file at '" + a + "'";
                return b.arrayBuffer();
              }).catch(() => ma(a));
            if (z)
              return new Promise((b, c) => {
                z(a, (d) => b(new Uint8Array(d)), c);
              });
          }
          return Promise.resolve().then(() => ma(a));
        }
        function oa(a, b, c) {
          return na(a).then((d) => WebAssembly.instantiate(d, b)).then((d) => d).then(c, (d) => {
            D(`failed to asynchronously prepare wasm: ${d}`);
            E(d);
          });
        }
        function pa(a, b) {
          var c = P;
          return "function" != typeof WebAssembly.instantiateStreaming || ka(c) || C(c) || da || "function" != typeof fetch ? oa(c, a, b) : fetch(c, { credentials: "same-origin" }).then((d) => WebAssembly.instantiateStreaming(d, a).then(b, function(g) {
            D(`wasm streaming compile failed: ${g}`);
            D("falling back to ArrayBuffer instantiation");
            return oa(c, a, b);
          }));
        }
        var Q, qa = { 993136: (a, b, c, d) => {
          if ("undefined" == typeof e || !e.Qa)
            return 1;
          a = R(a >>> 0);
          a.startsWith("./") && (a = a.substring(2));
          a = e.Qa.get(a);
          if (!a)
            return 2;
          b >>>= 0;
          c >>>= 0;
          if (b + c > a.byteLength)
            return 3;
          try {
            return H.set(a.subarray(b, b + c), d >>> 0 >>> 0), 0;
          } catch {
            return 4;
          }
        } };
        function ra(a) {
          this.Ka = a - 24;
          this.Pa = function(b) {
            J[this.Ka + 4 >>> 2 >>> 0] = b;
          };
          this.Oa = function(b) {
            J[this.Ka + 8 >>> 2 >>> 0] = b;
          };
          this.Ma = function(b, c) {
            this.Na();
            this.Pa(b);
            this.Oa(c);
          };
          this.Na = function() {
            J[this.Ka + 16 >>> 2 >>> 0] = 0;
          };
        }
        var sa = 0, ta = 0, ua = "undefined" != typeof TextDecoder ? new TextDecoder("utf8") : void 0, va = (a, b, c) => {
          b >>>= 0;
          var d = b + c;
          for (c = b; a[c] && !(c >= d); )
            ++c;
          if (16 < c - b && a.buffer && ua)
            return ua.decode(a.subarray(b, c));
          for (d = ""; b < c; ) {
            var g = a[b++];
            if (g & 128) {
              var h = a[b++] & 63;
              if (192 == (g & 224))
                d += String.fromCharCode((g & 31) << 6 | h);
              else {
                var m = a[b++] & 63;
                g = 224 == (g & 240) ? (g & 15) << 12 | h << 6 | m : (g & 7) << 18 | h << 12 | m << 6 | a[b++] & 63;
                65536 > g ? d += String.fromCharCode(g) : (g -= 65536, d += String.fromCharCode(55296 | g >> 10, 56320 | g & 1023));
              }
            } else
              d += String.fromCharCode(g);
          }
          return d;
        }, R = (a, b) => (a >>>= 0) ? va(H, a, b) : "", S = (a) => {
          for (var b = 0, c = 0; c < a.length; ++c) {
            var d = a.charCodeAt(c);
            127 >= d ? b++ : 2047 >= d ? b += 2 : 55296 <= d && 57343 >= d ? (b += 4, ++c) : b += 3;
          }
          return b;
        }, T = (a, b, c, d) => {
          c >>>= 0;
          if (!(0 < d))
            return 0;
          var g = c;
          d = c + d - 1;
          for (var h = 0; h < a.length; ++h) {
            var m = a.charCodeAt(h);
            if (55296 <= m && 57343 >= m) {
              var r = a.charCodeAt(++h);
              m = 65536 + ((m & 1023) << 10) | r & 1023;
            }
            if (127 >= m) {
              if (c >= d)
                break;
              b[c++ >>> 0] = m;
            } else {
              if (2047 >= m) {
                if (c + 1 >= d)
                  break;
                b[c++ >>> 0] = 192 | m >> 6;
              } else {
                if (65535 >= m) {
                  if (c + 2 >= d)
                    break;
                  b[c++ >>> 0] = 224 | m >> 12;
                } else {
                  if (c + 3 >= d)
                    break;
                  b[c++ >>> 0] = 240 | m >> 18;
                  b[c++ >>> 0] = 128 | m >> 12 & 63;
                }
                b[c++ >>> 0] = 128 | m >> 6 & 63;
              }
              b[c++ >>> 0] = 128 | m & 63;
            }
          }
          b[c >>> 0] = 0;
          return c - g;
        }, U = (a) => 0 === a % 4 && (0 !== a % 100 || 0 === a % 400), wa = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335], xa = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334], Ca = (a) => {
          var b = S(a) + 1, c = Ba(b);
          c && T(a, H, c, b);
          return c;
        }, V = [], W = {}, Da = () => {
          if (!X) {
            var a = { USER: "web_user", LOGNAME: "web_user", PATH: "/", PWD: "/", HOME: "/home/web_user", LANG: ("object" == typeof navigator && navigator.languages && navigator.languages[0] || "C").replace(
              "-",
              "_"
            ) + ".UTF-8", _: ba || "./this.program" }, b;
            for (b in W)
              void 0 === W[b] ? delete a[b] : a[b] = W[b];
            var c = [];
            for (b in a)
              c.push(`${b}=${a[b]}`);
            X = c;
          }
          return X;
        }, X, Ea = [null, [], []], Fa = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], Ga = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
        function Ha(a) {
          var b = Array(S(a) + 1);
          T(a, b, 0, b.length);
          return b;
        }
        function Ia(a, b, c, d) {
          function g(f, n, p) {
            for (f = "number" == typeof f ? f.toString() : f || ""; f.length < n; )
              f = p[0] + f;
            return f;
          }
          function h(f, n) {
            return g(f, n, "0");
          }
          function m(f, n) {
            function p(ya) {
              return 0 > ya ? -1 : 0 < ya ? 1 : 0;
            }
            var y;
            0 === (y = p(f.getFullYear() - n.getFullYear())) && 0 === (y = p(f.getMonth() - n.getMonth())) && (y = p(f.getDate() - n.getDate()));
            return y;
          }
          function r(f) {
            switch (f.getDay()) {
              case 0:
                return new Date(f.getFullYear() - 1, 11, 29);
              case 1:
                return f;
              case 2:
                return new Date(f.getFullYear(), 0, 3);
              case 3:
                return new Date(
                  f.getFullYear(),
                  0,
                  2
                );
              case 4:
                return new Date(f.getFullYear(), 0, 1);
              case 5:
                return new Date(f.getFullYear() - 1, 11, 31);
              case 6:
                return new Date(f.getFullYear() - 1, 11, 30);
            }
          }
          function w(f) {
            var n = f.Ga;
            for (f = new Date(new Date(f.Ha + 1900, 0, 1).getTime()); 0 < n; ) {
              var p = f.getMonth(), y = (U(f.getFullYear()) ? Fa : Ga)[p];
              if (n > y - f.getDate())
                n -= y - f.getDate() + 1, f.setDate(1), 11 > p ? f.setMonth(p + 1) : (f.setMonth(0), f.setFullYear(f.getFullYear() + 1));
              else {
                f.setDate(f.getDate() + n);
                break;
              }
            }
            p = new Date(f.getFullYear() + 1, 0, 4);
            n = r(new Date(
              f.getFullYear(),
              0,
              4
            ));
            p = r(p);
            return 0 >= m(n, f) ? 0 >= m(p, f) ? f.getFullYear() + 1 : f.getFullYear() : f.getFullYear() - 1;
          }
          a >>>= 0;
          b >>>= 0;
          c >>>= 0;
          d >>>= 0;
          var t = J[d + 40 >>> 2 >>> 0];
          d = { Ta: I[d >>> 2 >>> 0], Sa: I[d + 4 >>> 2 >>> 0], Ia: I[d + 8 >>> 2 >>> 0], La: I[d + 12 >>> 2 >>> 0], Ja: I[d + 16 >>> 2 >>> 0], Ha: I[d + 20 >>> 2 >>> 0], Ba: I[d + 24 >>> 2 >>> 0], Ga: I[d + 28 >>> 2 >>> 0], Va: I[d + 32 >>> 2 >>> 0], Ra: I[d + 36 >>> 2 >>> 0], Ua: t ? R(t) : "" };
          c = R(c);
          t = {
            "%c": "%a %b %d %H:%M:%S %Y",
            "%D": "%m/%d/%y",
            "%F": "%Y-%m-%d",
            "%h": "%b",
            "%r": "%I:%M:%S %p",
            "%R": "%H:%M",
            "%T": "%H:%M:%S",
            "%x": "%m/%d/%y",
            "%X": "%H:%M:%S",
            "%Ec": "%c",
            "%EC": "%C",
            "%Ex": "%m/%d/%y",
            "%EX": "%H:%M:%S",
            "%Ey": "%y",
            "%EY": "%Y",
            "%Od": "%d",
            "%Oe": "%e",
            "%OH": "%H",
            "%OI": "%I",
            "%Om": "%m",
            "%OM": "%M",
            "%OS": "%S",
            "%Ou": "%u",
            "%OU": "%U",
            "%OV": "%V",
            "%Ow": "%w",
            "%OW": "%W",
            "%Oy": "%y"
          };
          for (var u in t)
            c = c.replace(new RegExp(u, "g"), t[u]);
          var za = "Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "), Aa = "January February March April May June July August September October November December".split(" ");
          t = {
            "%a": (f) => za[f.Ba].substring(0, 3),
            "%A": (f) => za[f.Ba],
            "%b": (f) => Aa[f.Ja].substring(0, 3),
            "%B": (f) => Aa[f.Ja],
            "%C": (f) => h((f.Ha + 1900) / 100 | 0, 2),
            "%d": (f) => h(f.La, 2),
            "%e": (f) => g(f.La, 2, " "),
            "%g": (f) => w(f).toString().substring(2),
            "%G": (f) => w(f),
            "%H": (f) => h(f.Ia, 2),
            "%I": (f) => {
              f = f.Ia;
              0 == f ? f = 12 : 12 < f && (f -= 12);
              return h(f, 2);
            },
            "%j": (f) => {
              for (var n = 0, p = 0; p <= f.Ja - 1; n += (U(f.Ha + 1900) ? Fa : Ga)[p++])
                ;
              return h(f.La + n, 3);
            },
            "%m": (f) => h(f.Ja + 1, 2),
            "%M": (f) => h(f.Sa, 2),
            "%n": () => "\n",
            "%p": (f) => 0 <= f.Ia && 12 > f.Ia ? "AM" : "PM",
            "%S": (f) => h(f.Ta, 2),
            "%t": () => "	",
            "%u": (f) => f.Ba || 7,
            "%U": (f) => h(
              Math.floor((f.Ga + 7 - f.Ba) / 7),
              2
            ),
            "%V": (f) => {
              var n = Math.floor((f.Ga + 7 - (f.Ba + 6) % 7) / 7);
              2 >= (f.Ba + 371 - f.Ga - 2) % 7 && n++;
              if (n)
                53 == n && (p = (f.Ba + 371 - f.Ga) % 7, 4 == p || 3 == p && U(f.Ha) || (n = 1));
              else {
                n = 52;
                var p = (f.Ba + 7 - f.Ga - 1) % 7;
                (4 == p || 5 == p && U(f.Ha % 400 - 1)) && n++;
              }
              return h(n, 2);
            },
            "%w": (f) => f.Ba,
            "%W": (f) => h(Math.floor((f.Ga + 7 - (f.Ba + 6) % 7) / 7), 2),
            "%y": (f) => (f.Ha + 1900).toString().substring(2),
            "%Y": (f) => f.Ha + 1900,
            "%z": (f) => {
              f = f.Ra;
              var n = 0 <= f;
              f = Math.abs(f) / 60;
              return (n ? "+" : "-") + String("0000" + (f / 60 * 100 + f % 60)).slice(-4);
            },
            "%Z": (f) => f.Ua,
            "%%": () => "%"
          };
          c = c.replace(/%%/g, "\0\0");
          for (u in t)
            c.includes(u) && (c = c.replace(new RegExp(u, "g"), t[u](d)));
          c = c.replace(/\0\0/g, "%");
          u = Ha(c);
          if (u.length > b)
            return 0;
          G.set(u, a >>> 0);
          return u.length - 1;
        }
        var La = { a: function(a, b, c) {
          a >>>= 0;
          new ra(a).Ma(b >>> 0, c >>> 0);
          sa = a;
          ta++;
          throw sa;
        }, e: function() {
          return 0;
        }, H: function() {
        }, x: function() {
        }, z: function() {
        }, J: function() {
          return 0;
        }, F: function() {
        }, A: function() {
        }, E: function() {
        }, g: function() {
        }, y: function() {
        }, v: function() {
        }, G: function() {
        }, w: function() {
        }, k: () => 1, n: function(a, b, c) {
          a = b + 2097152 >>> 0 < 4194305 - !!a ? (a >>> 0) + 4294967296 * b : NaN;
          c >>>= 0;
          a = new Date(1e3 * a);
          I[c >>> 2 >>> 0] = a.getUTCSeconds();
          I[c + 4 >>> 2 >>> 0] = a.getUTCMinutes();
          I[c + 8 >>> 2 >>> 0] = a.getUTCHours();
          I[c + 12 >>> 2 >>> 0] = a.getUTCDate();
          I[c + 16 >>> 2 >>> 0] = a.getUTCMonth();
          I[c + 20 >>> 2 >>> 0] = a.getUTCFullYear() - 1900;
          I[c + 24 >>> 2 >>> 0] = a.getUTCDay();
          I[c + 28 >>> 2 >>> 0] = (a.getTime() - Date.UTC(a.getUTCFullYear(), 0, 1, 0, 0, 0, 0)) / 864e5 | 0;
        }, o: function(a, b, c) {
          a = b + 2097152 >>> 0 < 4194305 - !!a ? (a >>> 0) + 4294967296 * b : NaN;
          c >>>= 0;
          a = new Date(1e3 * a);
          I[c >>> 2 >>> 0] = a.getSeconds();
          I[c + 4 >>> 2 >>> 0] = a.getMinutes();
          I[c + 8 >>> 2 >>> 0] = a.getHours();
          I[c + 12 >>> 2 >>> 0] = a.getDate();
          I[c + 16 >>> 2 >>> 0] = a.getMonth();
          I[c + 20 >>> 2 >>> 0] = a.getFullYear() - 1900;
          I[c + 24 >>> 2 >>> 0] = a.getDay();
          I[c + 28 >>> 2 >>> 0] = (U(a.getFullYear()) ? wa : xa)[a.getMonth()] + a.getDate() - 1 | 0;
          I[c + 36 >>> 2 >>> 0] = -(60 * a.getTimezoneOffset());
          b = new Date(a.getFullYear(), 6, 1).getTimezoneOffset();
          var d = new Date(a.getFullYear(), 0, 1).getTimezoneOffset();
          I[c + 32 >>> 2 >>> 0] = (b != d && a.getTimezoneOffset() == Math.min(d, b)) | 0;
        }, p: function(a) {
          a >>>= 0;
          var b = new Date(I[a + 20 >>> 2 >>> 0] + 1900, I[a + 16 >>> 2 >>> 0], I[a + 12 >>> 2 >>> 0], I[a + 8 >>> 2 >>> 0], I[a + 4 >>> 2 >>> 0], I[a >>> 2 >>> 0], 0), c = I[a + 32 >>> 2 >>> 0], d = b.getTimezoneOffset(), g = new Date(b.getFullYear(), 6, 1).getTimezoneOffset(), h = new Date(b.getFullYear(), 0, 1).getTimezoneOffset(), m = Math.min(h, g);
          0 > c ? I[a + 32 >>> 2 >>> 0] = Number(g != h && m == d) : 0 < c != (m == d) && (g = Math.max(h, g), b.setTime(b.getTime() + 6e4 * ((0 < c ? m : g) - d)));
          I[a + 24 >>> 2 >>> 0] = b.getDay();
          I[a + 28 >>> 2 >>> 0] = (U(b.getFullYear()) ? wa : xa)[b.getMonth()] + b.getDate() - 1 | 0;
          I[a >>> 2 >>> 0] = b.getSeconds();
          I[a + 4 >>> 2 >>> 0] = b.getMinutes();
          I[a + 8 >>> 2 >>> 0] = b.getHours();
          I[a + 12 >>> 2 >>> 0] = b.getDate();
          I[a + 16 >>> 2 >>> 0] = b.getMonth();
          I[a + 20 >>> 2 >>> 0] = b.getYear();
          a = b.getTime();
          isNaN(a) ? (I[Ja() >>> 2 >>> 0] = 61, a = -1) : a /= 1e3;
          return Ka((Q = a, 1 <= +Math.abs(Q) ? 0 < Q ? +Math.floor(Q / 4294967296) >>> 0 : ~~+Math.ceil((Q - +(~~Q >>> 0)) / 4294967296) >>> 0 : 0)), a >>> 0;
        }, l: function() {
          return -52;
        }, m: function() {
        }, t: function(a, b, c) {
          function d(w) {
            return (w = w.toTimeString().match(/\(([A-Za-z ]+)\)$/)) ? w[1] : "GMT";
          }
          c >>>= 0;
          var g = (/* @__PURE__ */ new Date()).getFullYear(), h = new Date(g, 0, 1), m = new Date(g, 6, 1);
          g = h.getTimezoneOffset();
          var r = m.getTimezoneOffset();
          J[a >>> 0 >>> 2 >>> 0] = 60 * Math.max(g, r);
          I[b >>> 0 >>> 2 >>> 0] = Number(g != r);
          a = d(h);
          b = d(m);
          a = Ca(a);
          b = Ca(b);
          r < g ? (J[c >>> 2 >>> 0] = a, J[c + 4 >>> 2 >>> 0] = b) : (J[c >>> 2 >>> 0] = b, J[c + 4 >>> 2 >>> 0] = a);
        }, d: () => {
          E("");
        }, B: function(a, b, c) {
          a >>>= 0;
          b >>>= 0;
          c >>>= 0;
          V.length = 0;
          for (var d; d = H[b++ >>> 0]; ) {
            var g = 105 != d;
            g &= 112 != d;
            c += g && c % 8 ? 4 : 0;
            V.push(112 == d ? J[c >>> 2 >>> 0] : 105 == d ? I[c >>> 2 >>> 0] : ha[c >>> 3 >>> 0]);
            c += g ? 8 : 4;
          }
          return qa[a].apply(null, V);
        }, h: () => Date.now(), u: function() {
          return 4294901760;
        }, b: () => performance.now(), I: function(a, b, c) {
          b >>>= 0;
          return H.copyWithin(a >>> 0 >>> 0, b >>> 0, b + (c >>> 0) >>> 0);
        }, s: function(a) {
          a >>>= 0;
          var b = H.length;
          if (4294901760 < a)
            return false;
          for (var c = 1; 4 >= c; c *= 2) {
            var d = b * (1 + 0.2 / c);
            d = Math.min(d, a + 100663296);
            var g = Math;
            d = Math.max(a, d);
            a: {
              g = (g.min.call(g, 4294901760, d + (65536 - d % 65536) % 65536) - F.buffer.byteLength + 65535) / 65536;
              try {
                F.grow(g);
                ia();
                var h = 1;
                break a;
              } catch (m) {
              }
              h = void 0;
            }
            if (h)
              return true;
          }
          return false;
        }, C: function(a, b) {
          a >>>= 0;
          b >>>= 0;
          var c = 0;
          Da().forEach((d, g) => {
            var h = b + c;
            g = J[a + 4 * g >>> 2 >>> 0] = h;
            for (h = 0; h < d.length; ++h)
              G[g++ >>> 0 >>> 0] = d.charCodeAt(h);
            G[g >>> 0 >>> 0] = 0;
            c += d.length + 1;
          });
          return 0;
        }, D: function(a, b) {
          a >>>= 0;
          b >>>= 0;
          var c = Da();
          J[a >>> 2 >>> 0] = c.length;
          var d = 0;
          c.forEach((g) => d += g.length + 1);
          J[b >>> 2 >>> 0] = d;
          return 0;
        }, f: () => 52, j: function() {
          return 52;
        }, q: function() {
          return 70;
        }, i: function(a, b, c, d) {
          b >>>= 0;
          c >>>= 0;
          d >>>= 0;
          for (var g = 0, h = 0; h < c; h++) {
            var m = J[b >>> 2 >>> 0], r = J[b + 4 >>> 2 >>> 0];
            b += 8;
            for (var w = 0; w < r; w++) {
              var t = H[m + w >>> 0], u = Ea[a];
              0 === t || 10 === t ? ((1 === a ? ea : D)(va(u, 0)), u.length = 0) : u.push(t);
            }
            g += r;
          }
          J[d >>> 2 >>> 0] = g;
          return 0;
        }, r: Ia, c: function(a, b, c, d) {
          return Ia(a >>> 0, b >>> 0, c >>> 0, d >>> 0);
        } }, Y = function() {
          function a(c) {
            Y = c.exports;
            Y = Ma();
            F = Y.K;
            ia();
            L.unshift(Y.L);
            M--;
            0 == M && (null !== N && (clearInterval(N), N = null), O && (c = O, O = null, c()));
            return Y;
          }
          var b = { a: La };
          M++;
          if (e.instantiateWasm)
            try {
              return e.instantiateWasm(b, a);
            } catch (c) {
              D(`Module.instantiateWasm callback failed with error: ${c}`), l(c);
            }
          pa(b, function(c) {
            a(c.instance);
          }).catch(l);
          return {};
        }();
        e._OrtInit = (a, b) => (e._OrtInit = Y.M)(a, b);
        e._OrtGetLastError = (a, b) => (e._OrtGetLastError = Y.N)(a, b);
        e._OrtCreateSessionOptions = (a, b, c, d, g, h, m, r, w, t) => (e._OrtCreateSessionOptions = Y.O)(a, b, c, d, g, h, m, r, w, t);
        e._OrtAppendExecutionProvider = (a, b) => (e._OrtAppendExecutionProvider = Y.P)(a, b);
        e._OrtAddFreeDimensionOverride = (a, b, c) => (e._OrtAddFreeDimensionOverride = Y.Q)(a, b, c);
        e._OrtAddSessionConfigEntry = (a, b, c) => (e._OrtAddSessionConfigEntry = Y.R)(a, b, c);
        e._OrtReleaseSessionOptions = (a) => (e._OrtReleaseSessionOptions = Y.S)(a);
        e._OrtCreateSession = (a, b, c) => (e._OrtCreateSession = Y.T)(a, b, c);
        e._OrtReleaseSession = (a) => (e._OrtReleaseSession = Y.U)(a);
        e._OrtGetInputOutputCount = (a, b, c) => (e._OrtGetInputOutputCount = Y.V)(a, b, c);
        e._OrtGetInputName = (a, b) => (e._OrtGetInputName = Y.W)(a, b);
        e._OrtGetOutputName = (a, b) => (e._OrtGetOutputName = Y.X)(a, b);
        e._OrtFree = (a) => (e._OrtFree = Y.Y)(a);
        e._OrtCreateTensor = (a, b, c, d, g, h) => (e._OrtCreateTensor = Y.Z)(a, b, c, d, g, h);
        e._OrtGetTensorData = (a, b, c, d, g) => (e._OrtGetTensorData = Y._)(a, b, c, d, g);
        e._OrtReleaseTensor = (a) => (e._OrtReleaseTensor = Y.$)(a);
        e._OrtCreateRunOptions = (a, b, c, d) => (e._OrtCreateRunOptions = Y.aa)(a, b, c, d);
        e._OrtAddRunConfigEntry = (a, b, c) => (e._OrtAddRunConfigEntry = Y.ba)(a, b, c);
        e._OrtReleaseRunOptions = (a) => (e._OrtReleaseRunOptions = Y.ca)(a);
        e._OrtCreateBinding = (a) => (e._OrtCreateBinding = Y.da)(a);
        e._OrtBindInput = (a, b, c) => (e._OrtBindInput = Y.ea)(a, b, c);
        e._OrtBindOutput = (a, b, c, d) => (e._OrtBindOutput = Y.fa)(a, b, c, d);
        e._OrtClearBoundOutputs = (a) => (e._OrtClearBoundOutputs = Y.ga)(a);
        e._OrtReleaseBinding = (a) => (e._OrtReleaseBinding = Y.ha)(a);
        e._OrtRunWithBinding = (a, b, c, d, g) => (e._OrtRunWithBinding = Y.ia)(a, b, c, d, g);
        e._OrtRun = (a, b, c, d, g, h, m, r) => (e._OrtRun = Y.ja)(a, b, c, d, g, h, m, r);
        e._OrtEndProfiling = (a) => (e._OrtEndProfiling = Y.ka)(a);
        e._OrtTrainingLoadCheckpoint = (a, b) => (e._OrtTrainingLoadCheckpoint = Y.la)(a, b);
        e._OrtTrainingReleaseCheckpoint = (a) => (e._OrtTrainingReleaseCheckpoint = Y.ma)(a);
        e._OrtTrainingCreateSession = (a, b, c, d, g, h, m, r) => (e._OrtTrainingCreateSession = Y.na)(a, b, c, d, g, h, m, r);
        e._OrtTrainingLazyResetGrad = (a) => (e._OrtTrainingLazyResetGrad = Y.oa)(a);
        e._OrtTrainingRunTrainStep = (a, b, c, d, g, h) => (e._OrtTrainingRunTrainStep = Y.pa)(a, b, c, d, g, h);
        e._OrtTrainingOptimizerStep = (a, b) => (e._OrtTrainingOptimizerStep = Y.qa)(a, b);
        e._OrtTrainingEvalStep = (a, b, c, d, g, h) => (e._OrtTrainingEvalStep = Y.ra)(a, b, c, d, g, h);
        e._OrtTrainingGetParametersSize = (a, b, c) => (e._OrtTrainingGetParametersSize = Y.sa)(a, b, c);
        e._OrtTrainingCopyParametersToBuffer = (a, b, c, d) => (e._OrtTrainingCopyParametersToBuffer = Y.ta)(a, b, c, d);
        e._OrtTrainingCopyParametersFromBuffer = (a, b, c, d) => (e._OrtTrainingCopyParametersFromBuffer = Y.ua)(a, b, c, d);
        e._OrtTrainingGetModelInputOutputCount = (a, b, c, d) => (e._OrtTrainingGetModelInputOutputCount = Y.va)(a, b, c, d);
        e._OrtTrainingGetModelInputOutputName = (a, b, c, d) => (e._OrtTrainingGetModelInputOutputName = Y.wa)(a, b, c, d);
        e._OrtTrainingReleaseSession = (a) => (e._OrtTrainingReleaseSession = Y.xa)(a);
        var Ja = () => (Ja = Y.ya)(), Ba = e._malloc = (a) => (Ba = e._malloc = Y.za)(a);
        e._free = (a) => (e._free = Y.Aa)(a);
        var Ka = (a) => (Ka = Y.Ca)(a), Na = () => (Na = Y.Da)(), Oa = (a) => (Oa = Y.Ea)(a), Pa = (a) => (Pa = Y.Fa)(a);
        function Ma() {
          var a = Y;
          a = Object.assign({}, a);
          var b = (d) => () => d() >>> 0, c = (d) => (g) => d(g) >>> 0;
          a.ya = b(a.ya);
          a.za = c(a.za);
          a.Da = b(a.Da);
          a.Fa = c(a.Fa);
          return a;
        }
        e.stackAlloc = Pa;
        e.stackSave = Na;
        e.stackRestore = Oa;
        e.UTF8ToString = R;
        e.stringToUTF8 = (a, b, c) => T(a, H, b, c);
        e.lengthBytesUTF8 = S;
        var Z;
        O = function Qa() {
          Z || Ra();
          Z || (O = Qa);
        };
        function Ra() {
          if (!(0 < M)) {
            if (e.preRun)
              for ("function" == typeof e.preRun && (e.preRun = [e.preRun]); e.preRun.length; ) {
                var a = e.preRun.shift();
                K.unshift(a);
              }
            for (; 0 < K.length; )
              K.shift()(e);
            if (!(0 < M || Z || (Z = true, e.calledRun = true, fa))) {
              for (; 0 < L.length; )
                L.shift()(e);
              for (k(e); 0 < ja.length; )
                ja.shift()(e);
            }
          }
        }
        Ra();
        return moduleArg.ready;
      };
    })();
    if (typeof exports === "object" && typeof module2 === "object")
      module2.exports = ortWasm;
    else if (typeof define === "function" && define["amd"])
      define([], () => ortWasm);
  }
});

// nodejs-ignore:worker_threads
var require_worker_threads = __commonJS({
  "nodejs-ignore:worker_threads"() {
  }
});

// nodejs-ignore:perf_hooks
var require_perf_hooks = __commonJS({
  "nodejs-ignore:perf_hooks"() {
  }
});

// nodejs-ignore:os
var os_exports = {};
__export(os_exports, {
  cpus: () => cpus2
});
var cpus2;
var init_os = __esm({
  "nodejs-ignore:os"() {
    cpus2 = void 0;
  }
});

// web/lib/wasm/binding/ort-wasm-threaded.js
var require_ort_wasm_threaded = __commonJS({
  "web/lib/wasm/binding/ort-wasm-threaded.js"(exports, module2) {
    "use strict";
    var ortWasmThreaded = (() => {
      var _scriptDir = typeof document !== "undefined" && document.currentScript ? document.currentScript.src : void 0;
      if (typeof __filename !== "undefined")
        _scriptDir = _scriptDir || __filename;
      return function(moduleArg = {}) {
        function aa() {
          e.buffer != l.buffer && m();
          return l;
        }
        function n() {
          e.buffer != l.buffer && m();
          return ba;
        }
        function p() {
          e.buffer != l.buffer && m();
          return ca;
        }
        function r() {
          e.buffer != l.buffer && m();
          return da;
        }
        function ea() {
          e.buffer != l.buffer && m();
          return fa;
        }
        var v = moduleArg, ha, x;
        v.ready = new Promise((a, b) => {
          ha = a;
          x = b;
        });
        var ia = Object.assign({}, v), ja = "./this.program", z = (a, b) => {
          throw b;
        }, ka = "object" == typeof window, A = "function" == typeof importScripts, B = "object" == typeof process && "object" == typeof process.versions && "string" == typeof process.versions.node, D = v.ENVIRONMENT_IS_PTHREAD || false, E = "";
        function la(a) {
          return v.locateFile ? v.locateFile(a, E) : E + a;
        }
        var ma, G, H;
        if (B) {
          var fs = (init_fs(), __toCommonJS(fs_exports)), na = (init_path(), __toCommonJS(path_exports));
          E = A ? na.dirname(E) + "/" : __dirname + "/";
          ma = (b, c) => {
            b = I(b) ? new URL(b) : na.normalize(b);
            return fs.readFileSync(b, c ? void 0 : "utf8");
          };
          H = (b) => {
            b = ma(b, true);
            b.buffer || (b = new Uint8Array(b));
            return b;
          };
          G = (b, c, d, g = true) => {
            b = I(b) ? new URL(b) : na.normalize(b);
            fs.readFile(b, g ? void 0 : "utf8", (h, k) => {
              h ? d(h) : c(g ? k.buffer : k);
            });
          };
          !v.thisProgram && 1 < process.argv.length && (ja = process.argv[1].replace(/\\/g, "/"));
          process.argv.slice(2);
          z = (b, c) => {
            process.exitCode = b;
            throw c;
          };
          v.inspect = () => "[Emscripten Module object]";
          let a;
          try {
            a = require_worker_threads();
          } catch (b) {
            throw console.error('The "worker_threads" module is not supported in this node.js build - perhaps a newer version is needed?'), b;
          }
          global.Worker = a.Worker;
        } else if (ka || A)
          A ? E = self.location.href : "undefined" != typeof document && document.currentScript && (E = document.currentScript.src), typeof _scriptDir !== "undefined" && _scriptDir && (E = _scriptDir), 0 !== E.indexOf("blob:") ? E = E.substr(0, E.replace(/[?#].*/, "").lastIndexOf("/") + 1) : E = "", B || (ma = (a) => {
            var b = new XMLHttpRequest();
            b.open("GET", a, false);
            b.send(null);
            return b.responseText;
          }, A && (H = (a) => {
            var b = new XMLHttpRequest();
            b.open("GET", a, false);
            b.responseType = "arraybuffer";
            b.send(null);
            return new Uint8Array(b.response);
          }), G = (a, b, c) => {
            var d = new XMLHttpRequest();
            d.open("GET", a, true);
            d.responseType = "arraybuffer";
            d.onload = () => {
              200 == d.status || 0 == d.status && d.response ? b(d.response) : c();
            };
            d.onerror = c;
            d.send(null);
          });
        B && "undefined" == typeof performance && (global.performance = require_perf_hooks().performance);
        var oa = console.log.bind(console), pa = console.error.bind(console);
        B && (oa = (...a) => fs.writeSync(1, a.join(" ") + "\n"), pa = (...a) => fs.writeSync(2, a.join(" ") + "\n"));
        var qa = oa, J = pa;
        Object.assign(v, ia);
        ia = null;
        "object" != typeof WebAssembly && ra("no native wasm support detected");
        var e, sa, K = false, L, l, ba, ca, da, fa;
        function m() {
          var a = e.buffer;
          v.HEAP8 = l = new Int8Array(a);
          v.HEAP16 = new Int16Array(a);
          v.HEAPU8 = ba = new Uint8Array(a);
          v.HEAPU16 = new Uint16Array(a);
          v.HEAP32 = ca = new Int32Array(a);
          v.HEAPU32 = da = new Uint32Array(a);
          v.HEAPF32 = new Float32Array(a);
          v.HEAPF64 = fa = new Float64Array(a);
        }
        var ta = 16777216;
        if (D)
          e = v.wasmMemory;
        else if (v.wasmMemory)
          e = v.wasmMemory;
        else if (e = new WebAssembly.Memory({ initial: ta / 65536, maximum: 65536, shared: true }), !(e.buffer instanceof SharedArrayBuffer))
          throw J("requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag"), B && J("(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and/or recent version)"), Error("bad memory");
        m();
        ta = e.buffer.byteLength;
        var ua = [], va = [], wa = [], M = 0, xa = null, N = null;
        function ya() {
          M--;
          if (0 == M && (null !== xa && (clearInterval(xa), xa = null), N)) {
            var a = N;
            N = null;
            a();
          }
        }
        function ra(a) {
          a = "Aborted(" + a + ")";
          J(a);
          K = true;
          L = 1;
          a = new WebAssembly.RuntimeError(a + ". Build with -sASSERTIONS for more info.");
          x(a);
          throw a;
        }
        var za = (a) => a.startsWith("data:application/octet-stream;base64,"), I = (a) => a.startsWith("file://"), O;
        O = "ort-wasm-threaded.wasm";
        za(O) || (O = la(O));
        function Aa(a) {
          if (H)
            return H(a);
          throw "both async and sync fetching of the wasm failed";
        }
        function Ba(a) {
          if (ka || A) {
            if ("function" == typeof fetch && !I(a))
              return fetch(a, { credentials: "same-origin" }).then((b) => {
                if (!b.ok)
                  throw "failed to load wasm binary file at '" + a + "'";
                return b.arrayBuffer();
              }).catch(() => Aa(a));
            if (G)
              return new Promise((b, c) => {
                G(a, (d) => b(new Uint8Array(d)), c);
              });
          }
          return Promise.resolve().then(() => Aa(a));
        }
        function Ca(a, b, c) {
          return Ba(a).then((d) => WebAssembly.instantiate(d, b)).then((d) => d).then(c, (d) => {
            J(`failed to asynchronously prepare wasm: ${d}`);
            ra(d);
          });
        }
        function Da(a, b) {
          var c = O;
          return "function" != typeof WebAssembly.instantiateStreaming || za(c) || I(c) || B || "function" != typeof fetch ? Ca(c, a, b) : fetch(c, { credentials: "same-origin" }).then((d) => WebAssembly.instantiateStreaming(d, a).then(b, function(g) {
            J(`wasm streaming compile failed: ${g}`);
            J("falling back to ArrayBuffer instantiation");
            return Ca(c, a, b);
          }));
        }
        var P, Ea = { 922380: (a, b, c, d) => {
          if ("undefined" == typeof v || !v.cb)
            return 1;
          a = Q(a >>> 0);
          a.startsWith("./") && (a = a.substring(2));
          a = v.cb.get(a);
          if (!a)
            return 2;
          b >>>= 0;
          c >>>= 0;
          d >>>= 0;
          if (b + c > a.byteLength)
            return 3;
          try {
            return n().set(a.subarray(b, b + c), d >>> 0), 0;
          } catch {
            return 4;
          }
        } };
        function R(a) {
          this.name = "ExitStatus";
          this.message = `Program terminated with exit(${a})`;
          this.status = a;
        }
        var Fa = (a) => {
          a.terminate();
          a.onmessage = () => {
          };
        }, Ha = (a) => {
          0 == S.Pa.length && (Ga(), S.Ya(S.Pa[0]));
          var b = S.Pa.pop();
          if (!b)
            return 6;
          S.Qa.push(b);
          S.Ma[a.Oa] = b;
          b.Oa = a.Oa;
          var c = { cmd: "run", start_routine: a.kb, arg: a.hb, pthread_ptr: a.Oa };
          B && b.unref();
          b.postMessage(c, a.qb);
          return 0;
        }, T = 0, Ia = "undefined" != typeof TextDecoder ? new TextDecoder("utf8") : void 0, Ja = (a, b, c) => {
          b >>>= 0;
          var d = b + c;
          for (c = b; a[c] && !(c >= d); )
            ++c;
          if (16 < c - b && a.buffer && Ia)
            return Ia.decode(a.buffer instanceof SharedArrayBuffer ? a.slice(b, c) : a.subarray(b, c));
          for (d = ""; b < c; ) {
            var g = a[b++];
            if (g & 128) {
              var h = a[b++] & 63;
              if (192 == (g & 224))
                d += String.fromCharCode((g & 31) << 6 | h);
              else {
                var k = a[b++] & 63;
                g = 224 == (g & 240) ? (g & 15) << 12 | h << 6 | k : (g & 7) << 18 | h << 12 | k << 6 | a[b++] & 63;
                65536 > g ? d += String.fromCharCode(g) : (g -= 65536, d += String.fromCharCode(55296 | g >> 10, 56320 | g & 1023));
              }
            } else
              d += String.fromCharCode(g);
          }
          return d;
        }, Q = (a, b) => (a >>>= 0) ? Ja(n(), a, b) : "", La = (a) => {
          var b = Ka();
          a = a();
          U(b);
          return a;
        };
        function V(a, b) {
          var c = arguments.length - 2, d = arguments;
          return La(() => {
            for (var g = Ma(8 * c), h = g >>> 3, k = 0; k < c; k++) {
              var t = d[2 + k];
              ea()[h + k >>> 0] = t;
            }
            return Na(a, c, g, b);
          });
        }
        function Oa(a) {
          if (D)
            return V(0, 1, a);
          L = a;
          0 < T || (S.lb(), v.onExit?.(a), K = true);
          z(a, new R(a));
        }
        var Qa = (a) => {
          L = a;
          if (D)
            throw Pa(a), "unwind";
          Oa(a);
        };
        function Ra() {
          for (var a = v.numThreads; a--; )
            Ga();
          ua.unshift(() => {
            M++;
            Sa(() => ya());
          });
        }
        function Ga() {
          var a = la("ort-wasm-threaded.worker.js");
          a = new Worker(a);
          S.Pa.push(a);
        }
        function Sa(a) {
          D ? a() : Promise.all(S.Pa.map(S.Ya)).then(a);
        }
        var S = { Pa: [], Qa: [], bb: [], Ma: {}, Wa() {
          D ? (S.receiveObjectTransfer = S.jb, S.threadInitTLS = S.ab, S.setExitStatus = S.$a) : Ra();
        }, $a: (a) => L = a, tb: ["$terminateWorker"], lb: () => {
          for (var a of S.Qa)
            Fa(a);
          for (a of S.Pa)
            Fa(a);
          S.Pa = [];
          S.Qa = [];
          S.Ma = [];
        }, Za: (a) => {
          var b = a.Oa;
          delete S.Ma[b];
          S.Pa.push(a);
          S.Qa.splice(S.Qa.indexOf(a), 1);
          a.Oa = 0;
          Ta(b);
        }, jb() {
        }, ab() {
          S.bb.forEach((a) => a());
        }, Ya: (a) => new Promise((b) => {
          a.onmessage = (h) => {
            h = h.data;
            var k = h.cmd;
            if (h.targetThread && h.targetThread != W()) {
              var t = S.Ma[h.targetThread];
              t ? t.postMessage(h, h.transferList) : J(`Internal error! Worker sent a message "${k}" to target pthread ${h.targetThread}, but that thread no longer exists!`);
            } else if ("checkMailbox" === k)
              X();
            else if ("spawnThread" === k)
              Ha(h);
            else if ("cleanupThread" === k)
              S.Za(S.Ma[h.thread]);
            else if ("killThread" === k)
              h = h.thread, k = S.Ma[h], delete S.Ma[h], Fa(k), Ta(h), S.Qa.splice(S.Qa.indexOf(k), 1), k.Oa = 0;
            else if ("cancelThread" === k)
              S.Ma[h.thread].postMessage({ cmd: "cancel" });
            else if ("loaded" === k)
              a.loaded = true, B && !a.Oa && a.unref(), b(a);
            else if ("alert" === k)
              alert(`Thread ${h.threadId}: ${h.text}`);
            else if ("setimmediate" === h.target)
              a.postMessage(h);
            else if ("callHandler" === k)
              v[h.handler](...h.args);
            else
              k && J(`worker sent an unknown command ${k}`);
          };
          a.onerror = (h) => {
            J(`${"worker sent an error!"} ${h.filename}:${h.lineno}: ${h.message}`);
            throw h;
          };
          B && (a.on("message", (h) => a.onmessage({ data: h })), a.on("error", (h) => a.onerror(h)));
          var c = [], d = ["onExit"], g;
          for (g of d)
            v.hasOwnProperty(g) && c.push(g);
          a.postMessage({ cmd: "load", handlers: c, urlOrBlob: v.mainScriptUrlOrBlob || _scriptDir, wasmMemory: e, wasmModule: sa });
        }) };
        v.PThread = S;
        var Ua = (a) => {
          for (; 0 < a.length; )
            a.shift()(v);
        };
        v.establishStackSpace = () => {
          var a = W(), b = r()[a + 52 >>> 2 >>> 0];
          a = r()[a + 56 >>> 2 >>> 0];
          Va(b, b - a);
          U(b);
        };
        function Pa(a) {
          if (D)
            return V(1, 0, a);
          Qa(a);
        }
        var Wa = [], Xa;
        v.invokeEntryPoint = (a, b) => {
          var c = Wa[a];
          c || (a >= Wa.length && (Wa.length = a + 1), Wa[a] = c = Xa.get(a));
          a = c(b);
          0 < T ? S.$a(a) : Ya(a);
        };
        function Za(a) {
          this.Va = a - 24;
          this.gb = function(b) {
            r()[this.Va + 4 >>> 2 >>> 0] = b;
          };
          this.fb = function(b) {
            r()[this.Va + 8 >>> 2 >>> 0] = b;
          };
          this.Wa = function(b, c) {
            this.eb();
            this.gb(b);
            this.fb(c);
          };
          this.eb = function() {
            r()[this.Va + 16 >>> 2 >>> 0] = 0;
          };
        }
        var $a = 0, ab = 0;
        function bb(a, b, c, d) {
          return D ? V(2, 1, a, b, c, d) : cb(a, b, c, d);
        }
        function cb(a, b, c, d) {
          a >>>= 0;
          b >>>= 0;
          c >>>= 0;
          d >>>= 0;
          if ("undefined" == typeof SharedArrayBuffer)
            return J("Current environment does not support SharedArrayBuffer, pthreads are not available!"), 6;
          var g = [];
          if (D && 0 === g.length)
            return bb(a, b, c, d);
          a = { kb: c, Oa: a, hb: d, qb: g };
          return D ? (a.sb = "spawnThread", postMessage(a, g), 0) : Ha(a);
        }
        function db(a, b, c) {
          return D ? V(3, 1, a, b, c) : 0;
        }
        function eb(a, b) {
          if (D)
            return V(4, 1, a, b);
        }
        var fb = (a) => {
          for (var b = 0, c = 0; c < a.length; ++c) {
            var d = a.charCodeAt(c);
            127 >= d ? b++ : 2047 >= d ? b += 2 : 55296 <= d && 57343 >= d ? (b += 4, ++c) : b += 3;
          }
          return b;
        }, gb = (a, b, c, d) => {
          c >>>= 0;
          if (!(0 < d))
            return 0;
          var g = c;
          d = c + d - 1;
          for (var h = 0; h < a.length; ++h) {
            var k = a.charCodeAt(h);
            if (55296 <= k && 57343 >= k) {
              var t = a.charCodeAt(++h);
              k = 65536 + ((k & 1023) << 10) | t & 1023;
            }
            if (127 >= k) {
              if (c >= d)
                break;
              b[c++ >>> 0] = k;
            } else {
              if (2047 >= k) {
                if (c + 1 >= d)
                  break;
                b[c++ >>> 0] = 192 | k >> 6;
              } else {
                if (65535 >= k) {
                  if (c + 2 >= d)
                    break;
                  b[c++ >>> 0] = 224 | k >> 12;
                } else {
                  if (c + 3 >= d)
                    break;
                  b[c++ >>> 0] = 240 | k >> 18;
                  b[c++ >>> 0] = 128 | k >> 12 & 63;
                }
                b[c++ >>> 0] = 128 | k >> 6 & 63;
              }
              b[c++ >>> 0] = 128 | k & 63;
            }
          }
          b[c >>> 0] = 0;
          return c - g;
        }, hb = (a, b, c) => gb(a, n(), b, c);
        function ib(a, b) {
          if (D)
            return V(5, 1, a, b);
        }
        function jb(a, b, c) {
          if (D)
            return V(6, 1, a, b, c);
        }
        function kb(a, b, c) {
          return D ? V(7, 1, a, b, c) : 0;
        }
        function lb(a, b) {
          if (D)
            return V(8, 1, a, b);
        }
        function mb(a, b, c) {
          if (D)
            return V(9, 1, a, b, c);
        }
        function nb(a, b, c, d) {
          if (D)
            return V(10, 1, a, b, c, d);
        }
        function ob(a, b, c, d) {
          if (D)
            return V(11, 1, a, b, c, d);
        }
        function pb(a, b, c, d) {
          if (D)
            return V(12, 1, a, b, c, d);
        }
        function qb(a) {
          if (D)
            return V(13, 1, a);
        }
        function rb(a, b) {
          if (D)
            return V(14, 1, a, b);
        }
        function sb(a, b, c) {
          if (D)
            return V(15, 1, a, b, c);
        }
        function tb(a) {
          a >>>= 0;
          "function" === typeof Atomics.rb && (Atomics.rb(p(), a >>> 2, a).value.then(X), a += 128, Atomics.store(p(), a >>> 2, 1));
        }
        v.__emscripten_thread_mailbox_await = tb;
        var X = () => {
          var a = W();
          if (a && (tb(a), a = ub, !K))
            try {
              if (a(), !(0 < T))
                try {
                  D ? Ya(L) : Qa(L);
                } catch (b) {
                  b instanceof R || "unwind" == b || z(1, b);
                }
            } catch (b) {
              b instanceof R || "unwind" == b || z(1, b);
            }
        };
        v.checkMailbox = X;
        var vb = [], Y = (a) => 0 === a % 4 && (0 !== a % 100 || 0 === a % 400), wb = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335], xb = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];
        function yb(a, b, c, d, g, h, k, t) {
          return D ? V(16, 1, a, b, c, d, g, h, k, t) : -52;
        }
        function zb(a, b, c, d, g, h, k) {
          if (D)
            return V(17, 1, a, b, c, d, g, h, k);
        }
        var Bb = (a) => {
          var b = fb(a) + 1, c = Ab(b);
          c && hb(a, c, b);
          return c;
        }, Cb = [], Db = {}, Fb = () => {
          if (!Eb) {
            var a = { USER: "web_user", LOGNAME: "web_user", PATH: "/", PWD: "/", HOME: "/home/web_user", LANG: ("object" == typeof navigator && navigator.languages && navigator.languages[0] || "C").replace("-", "_") + ".UTF-8", _: ja || "./this.program" }, b;
            for (b in Db)
              void 0 === Db[b] ? delete a[b] : a[b] = Db[b];
            var c = [];
            for (b in a)
              c.push(`${b}=${a[b]}`);
            Eb = c;
          }
          return Eb;
        }, Eb;
        function Gb(a, b) {
          if (D)
            return V(18, 1, a, b);
          a >>>= 0;
          b >>>= 0;
          var c = 0;
          Fb().forEach((d, g) => {
            var h = b + c;
            g = r()[a + 4 * g >>> 2 >>> 0] = h;
            for (h = 0; h < d.length; ++h)
              aa()[g++ >>> 0 >>> 0] = d.charCodeAt(h);
            aa()[g >>> 0 >>> 0] = 0;
            c += d.length + 1;
          });
          return 0;
        }
        function Kb(a, b) {
          if (D)
            return V(19, 1, a, b);
          a >>>= 0;
          b >>>= 0;
          var c = Fb();
          r()[a >>> 2 >>> 0] = c.length;
          var d = 0;
          c.forEach((g) => d += g.length + 1);
          r()[b >>> 2 >>> 0] = d;
          return 0;
        }
        function Lb(a) {
          return D ? V(20, 1, a) : 52;
        }
        function Mb(a, b, c, d) {
          return D ? V(21, 1, a, b, c, d) : 52;
        }
        function Nb(a, b, c, d, g) {
          return D ? V(22, 1, a, b, c, d, g) : 70;
        }
        var Ob = [null, [], []];
        function Pb(a, b, c, d) {
          if (D)
            return V(23, 1, a, b, c, d);
          b >>>= 0;
          c >>>= 0;
          d >>>= 0;
          for (var g = 0, h = 0; h < c; h++) {
            var k = r()[b >>> 2 >>> 0], t = r()[b + 4 >>> 2 >>> 0];
            b += 8;
            for (var C = 0; C < t; C++) {
              var w = n()[k + C >>> 0], y = Ob[a];
              0 === w || 10 === w ? ((1 === a ? qa : J)(Ja(y, 0)), y.length = 0) : y.push(w);
            }
            g += t;
          }
          r()[d >>> 2 >>> 0] = g;
          return 0;
        }
        var Qb = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], Rb = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
        function Sb(a) {
          var b = Array(fb(a) + 1);
          gb(a, b, 0, b.length);
          return b;
        }
        var Tb = (a, b) => {
          aa().set(a, b >>> 0);
        };
        function Ub(a, b, c, d) {
          function g(f, q, u) {
            for (f = "number" == typeof f ? f.toString() : f || ""; f.length < q; )
              f = u[0] + f;
            return f;
          }
          function h(f, q) {
            return g(f, q, "0");
          }
          function k(f, q) {
            function u(Hb) {
              return 0 > Hb ? -1 : 0 < Hb ? 1 : 0;
            }
            var F;
            0 === (F = u(f.getFullYear() - q.getFullYear())) && 0 === (F = u(f.getMonth() - q.getMonth())) && (F = u(f.getDate() - q.getDate()));
            return F;
          }
          function t(f) {
            switch (f.getDay()) {
              case 0:
                return new Date(f.getFullYear() - 1, 11, 29);
              case 1:
                return f;
              case 2:
                return new Date(f.getFullYear(), 0, 3);
              case 3:
                return new Date(
                  f.getFullYear(),
                  0,
                  2
                );
              case 4:
                return new Date(f.getFullYear(), 0, 1);
              case 5:
                return new Date(f.getFullYear() - 1, 11, 31);
              case 6:
                return new Date(f.getFullYear() - 1, 11, 30);
            }
          }
          function C(f) {
            var q = f.Ra;
            for (f = new Date(new Date(f.Sa + 1900, 0, 1).getTime()); 0 < q; ) {
              var u = f.getMonth(), F = (Y(f.getFullYear()) ? Qb : Rb)[u];
              if (q > F - f.getDate())
                q -= F - f.getDate() + 1, f.setDate(1), 11 > u ? f.setMonth(u + 1) : (f.setMonth(0), f.setFullYear(f.getFullYear() + 1));
              else {
                f.setDate(f.getDate() + q);
                break;
              }
            }
            u = new Date(f.getFullYear() + 1, 0, 4);
            q = t(new Date(
              f.getFullYear(),
              0,
              4
            ));
            u = t(u);
            return 0 >= k(q, f) ? 0 >= k(u, f) ? f.getFullYear() + 1 : f.getFullYear() : f.getFullYear() - 1;
          }
          a >>>= 0;
          b >>>= 0;
          c >>>= 0;
          d >>>= 0;
          var w = r()[d + 40 >>> 2 >>> 0];
          d = { ob: p()[d >>> 2 >>> 0], nb: p()[d + 4 >>> 2 >>> 0], Ta: p()[d + 8 >>> 2 >>> 0], Xa: p()[d + 12 >>> 2 >>> 0], Ua: p()[d + 16 >>> 2 >>> 0], Sa: p()[d + 20 >>> 2 >>> 0], Na: p()[d + 24 >>> 2 >>> 0], Ra: p()[d + 28 >>> 2 >>> 0], ub: p()[d + 32 >>> 2 >>> 0], mb: p()[d + 36 >>> 2 >>> 0], pb: w ? Q(w) : "" };
          c = Q(c);
          w = {
            "%c": "%a %b %d %H:%M:%S %Y",
            "%D": "%m/%d/%y",
            "%F": "%Y-%m-%d",
            "%h": "%b",
            "%r": "%I:%M:%S %p",
            "%R": "%H:%M",
            "%T": "%H:%M:%S",
            "%x": "%m/%d/%y",
            "%X": "%H:%M:%S",
            "%Ec": "%c",
            "%EC": "%C",
            "%Ex": "%m/%d/%y",
            "%EX": "%H:%M:%S",
            "%Ey": "%y",
            "%EY": "%Y",
            "%Od": "%d",
            "%Oe": "%e",
            "%OH": "%H",
            "%OI": "%I",
            "%Om": "%m",
            "%OM": "%M",
            "%OS": "%S",
            "%Ou": "%u",
            "%OU": "%U",
            "%OV": "%V",
            "%Ow": "%w",
            "%OW": "%W",
            "%Oy": "%y"
          };
          for (var y in w)
            c = c.replace(new RegExp(y, "g"), w[y]);
          var Ib = "Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "), Jb = "January February March April May June July August September October November December".split(" ");
          w = {
            "%a": (f) => Ib[f.Na].substring(0, 3),
            "%A": (f) => Ib[f.Na],
            "%b": (f) => Jb[f.Ua].substring(0, 3),
            "%B": (f) => Jb[f.Ua],
            "%C": (f) => h((f.Sa + 1900) / 100 | 0, 2),
            "%d": (f) => h(f.Xa, 2),
            "%e": (f) => g(f.Xa, 2, " "),
            "%g": (f) => C(f).toString().substring(2),
            "%G": (f) => C(f),
            "%H": (f) => h(f.Ta, 2),
            "%I": (f) => {
              f = f.Ta;
              0 == f ? f = 12 : 12 < f && (f -= 12);
              return h(f, 2);
            },
            "%j": (f) => {
              for (var q = 0, u = 0; u <= f.Ua - 1; q += (Y(f.Sa + 1900) ? Qb : Rb)[u++])
                ;
              return h(f.Xa + q, 3);
            },
            "%m": (f) => h(f.Ua + 1, 2),
            "%M": (f) => h(f.nb, 2),
            "%n": () => "\n",
            "%p": (f) => 0 <= f.Ta && 12 > f.Ta ? "AM" : "PM",
            "%S": (f) => h(f.ob, 2),
            "%t": () => "	",
            "%u": (f) => f.Na || 7,
            "%U": (f) => h(Math.floor((f.Ra + 7 - f.Na) / 7), 2),
            "%V": (f) => {
              var q = Math.floor((f.Ra + 7 - (f.Na + 6) % 7) / 7);
              2 >= (f.Na + 371 - f.Ra - 2) % 7 && q++;
              if (q)
                53 == q && (u = (f.Na + 371 - f.Ra) % 7, 4 == u || 3 == u && Y(f.Sa) || (q = 1));
              else {
                q = 52;
                var u = (f.Na + 7 - f.Ra - 1) % 7;
                (4 == u || 5 == u && Y(f.Sa % 400 - 1)) && q++;
              }
              return h(q, 2);
            },
            "%w": (f) => f.Na,
            "%W": (f) => h(Math.floor((f.Ra + 7 - (f.Na + 6) % 7) / 7), 2),
            "%y": (f) => (f.Sa + 1900).toString().substring(2),
            "%Y": (f) => f.Sa + 1900,
            "%z": (f) => {
              f = f.mb;
              var q = 0 <= f;
              f = Math.abs(f) / 60;
              return (q ? "+" : "-") + String("0000" + (f / 60 * 100 + f % 60)).slice(-4);
            },
            "%Z": (f) => f.pb,
            "%%": () => "%"
          };
          c = c.replace(
            /%%/g,
            "\0\0"
          );
          for (y in w)
            c.includes(y) && (c = c.replace(new RegExp(y, "g"), w[y](d)));
          c = c.replace(/\0\0/g, "%");
          y = Sb(c);
          if (y.length > b)
            return 0;
          Tb(y, a);
          return y.length - 1;
        }
        S.Wa();
        var Vb = [Oa, Pa, bb, db, eb, ib, jb, kb, lb, mb, nb, ob, pb, qb, rb, sb, yb, zb, Gb, Kb, Lb, Mb, Nb, Pb], Zb = {
          b: function(a, b, c) {
            a >>>= 0;
            new Za(a).Wa(b >>> 0, c >>> 0);
            $a = a;
            ab++;
            throw $a;
          },
          L: function(a) {
            Wb(a >>> 0, !A, 1, !ka, 131072, false);
            S.ab();
          },
          j: function(a) {
            a >>>= 0;
            D ? postMessage({ cmd: "cleanupThread", thread: a }) : S.Za(S.Ma[a]);
          },
          H: cb,
          h: db,
          S: eb,
          D: ib,
          F: jb,
          T: kb,
          Q: lb,
          J: mb,
          P: nb,
          n: ob,
          E: pb,
          B: qb,
          R: rb,
          C: sb,
          p: () => 1,
          z: function(a, b) {
            a >>>= 0;
            a == b >>> 0 ? setTimeout(() => X()) : D ? postMessage({ targetThread: a, cmd: "checkMailbox" }) : (a = S.Ma[a]) && a.postMessage({ cmd: "checkMailbox" });
          },
          I: function(a, b, c, d) {
            b >>>= 0;
            vb.length = c;
            d = d >>> 0 >>> 3;
            for (var g = 0; g < c; g++)
              vb[g] = ea()[d + g >>> 0];
            a = 0 > a ? Ea[-a - 1] : Vb[a];
            S.ib = b;
            b = a.apply(null, vb);
            S.ib = 0;
            return b;
          },
          K: tb,
          o: function(a) {
            B && S.Ma[a >>> 0].ref();
          },
          s: function(a, b, c) {
            a = b + 2097152 >>> 0 < 4194305 - !!a ? (a >>> 0) + 4294967296 * b : NaN;
            c >>>= 0;
            a = new Date(1e3 * a);
            p()[c >>> 2 >>> 0] = a.getUTCSeconds();
            p()[c + 4 >>> 2 >>> 0] = a.getUTCMinutes();
            p()[c + 8 >>> 2 >>> 0] = a.getUTCHours();
            p()[c + 12 >>> 2 >>> 0] = a.getUTCDate();
            p()[c + 16 >>> 2 >>> 0] = a.getUTCMonth();
            p()[c + 20 >>> 2 >>> 0] = a.getUTCFullYear() - 1900;
            p()[c + 24 >>> 2 >>> 0] = a.getUTCDay();
            a = (a.getTime() - Date.UTC(a.getUTCFullYear(), 0, 1, 0, 0, 0, 0)) / 864e5 | 0;
            p()[c + 28 >>> 2 >>> 0] = a;
          },
          t: function(a, b, c) {
            a = b + 2097152 >>> 0 < 4194305 - !!a ? (a >>> 0) + 4294967296 * b : NaN;
            c >>>= 0;
            a = new Date(1e3 * a);
            p()[c >>> 2 >>> 0] = a.getSeconds();
            p()[c + 4 >>> 2 >>> 0] = a.getMinutes();
            p()[c + 8 >>> 2 >>> 0] = a.getHours();
            p()[c + 12 >>> 2 >>> 0] = a.getDate();
            p()[c + 16 >>> 2 >>> 0] = a.getMonth();
            p()[c + 20 >>> 2 >>> 0] = a.getFullYear() - 1900;
            p()[c + 24 >>> 2 >>> 0] = a.getDay();
            b = (Y(a.getFullYear()) ? wb : xb)[a.getMonth()] + a.getDate() - 1 | 0;
            p()[c + 28 >>> 2 >>> 0] = b;
            p()[c + 36 >>> 2 >>> 0] = -(60 * a.getTimezoneOffset());
            b = new Date(a.getFullYear(), 6, 1).getTimezoneOffset();
            var d = new Date(a.getFullYear(), 0, 1).getTimezoneOffset();
            a = (b != d && a.getTimezoneOffset() == Math.min(d, b)) | 0;
            p()[c + 32 >>> 2 >>> 0] = a;
          },
          u: function(a) {
            a >>>= 0;
            var b = new Date(p()[a + 20 >>> 2 >>> 0] + 1900, p()[a + 16 >>> 2 >>> 0], p()[a + 12 >>> 2 >>> 0], p()[a + 8 >>> 2 >>> 0], p()[a + 4 >>> 2 >>> 0], p()[a >>> 2 >>> 0], 0), c = p()[a + 32 >>> 2 >>> 0], d = b.getTimezoneOffset(), g = new Date(b.getFullYear(), 6, 1).getTimezoneOffset(), h = new Date(
              b.getFullYear(),
              0,
              1
            ).getTimezoneOffset(), k = Math.min(h, g);
            0 > c ? p()[a + 32 >>> 2 >>> 0] = Number(g != h && k == d) : 0 < c != (k == d) && (g = Math.max(h, g), b.setTime(b.getTime() + 6e4 * ((0 < c ? k : g) - d)));
            p()[a + 24 >>> 2 >>> 0] = b.getDay();
            c = (Y(b.getFullYear()) ? wb : xb)[b.getMonth()] + b.getDate() - 1 | 0;
            p()[a + 28 >>> 2 >>> 0] = c;
            p()[a >>> 2 >>> 0] = b.getSeconds();
            p()[a + 4 >>> 2 >>> 0] = b.getMinutes();
            p()[a + 8 >>> 2 >>> 0] = b.getHours();
            p()[a + 12 >>> 2 >>> 0] = b.getDate();
            p()[a + 16 >>> 2 >>> 0] = b.getMonth();
            p()[a + 20 >>> 2 >>> 0] = b.getYear();
            a = b.getTime();
            isNaN(a) ? (p()[Xb() >>> 2 >>> 0] = 61, a = -1) : a /= 1e3;
            return Yb((P = a, 1 <= +Math.abs(P) ? 0 < P ? +Math.floor(P / 4294967296) >>> 0 : ~~+Math.ceil((P - +(~~P >>> 0)) / 4294967296) >>> 0 : 0)), a >>> 0;
          },
          q: yb,
          r: zb,
          y: function(a, b, c) {
            function d(w) {
              return (w = w.toTimeString().match(/\(([A-Za-z ]+)\)$/)) ? w[1] : "GMT";
            }
            a >>>= 0;
            b >>>= 0;
            c >>>= 0;
            var g = (/* @__PURE__ */ new Date()).getFullYear(), h = new Date(g, 0, 1), k = new Date(g, 6, 1);
            g = h.getTimezoneOffset();
            var t = k.getTimezoneOffset(), C = Math.max(g, t);
            r()[a >>> 2 >>> 0] = 60 * C;
            p()[b >>> 2 >>> 0] = Number(g != t);
            a = d(h);
            b = d(k);
            a = Bb(a);
            b = Bb(b);
            t < g ? (r()[c >>> 2 >>> 0] = a, r()[c + 4 >>> 2 >>> 0] = b) : (r()[c >>> 2 >>> 0] = b, r()[c + 4 >>> 2 >>> 0] = a);
          },
          c: () => {
            ra("");
          },
          O: function(a, b, c) {
            a >>>= 0;
            b >>>= 0;
            c >>>= 0;
            Cb.length = 0;
            for (var d; d = n()[b++ >>> 0]; ) {
              var g = 105 != d;
              g &= 112 != d;
              c += g && c % 8 ? 4 : 0;
              Cb.push(112 == d ? r()[c >>> 2 >>> 0] : 105 == d ? p()[c >>> 2 >>> 0] : ea()[c >>> 3 >>> 0]);
              c += g ? 8 : 4;
            }
            return Ea[a].apply(null, Cb);
          },
          k: () => {
          },
          i: () => Date.now(),
          U: () => {
            T += 1;
            throw "unwind";
          },
          A: function() {
            return 4294901760;
          },
          e: () => performance.timeOrigin + performance.now(),
          f: () => B ? (init_os(), __toCommonJS(os_exports)).cpus().length : navigator.hardwareConcurrency,
          x: function(a) {
            a >>>= 0;
            var b = n().length;
            if (a <= b || 4294901760 < a)
              return false;
            for (var c = 1; 4 >= c; c *= 2) {
              var d = b * (1 + 0.2 / c);
              d = Math.min(d, a + 100663296);
              var g = Math;
              d = Math.max(a, d);
              a: {
                g = (g.min.call(g, 4294901760, d + (65536 - d % 65536) % 65536) - e.buffer.byteLength + 65535) / 65536;
                try {
                  e.grow(g);
                  m();
                  var h = 1;
                  break a;
                } catch (k) {
                }
                h = void 0;
              }
              if (h)
                return true;
            }
            return false;
          },
          M: Gb,
          N: Kb,
          G: Qa,
          g: Lb,
          m: Mb,
          v: Nb,
          l: Pb,
          a: e || v.wasmMemory,
          w: Ub,
          d: function(a, b, c, d) {
            return Ub(a >>> 0, b >>> 0, c >>> 0, d >>> 0);
          }
        }, Z = function() {
          function a(c, d) {
            Z = c.exports;
            Z = $b();
            S.bb.push(Z.za);
            Xa = Z.Aa;
            va.unshift(Z.V);
            sa = d;
            ya();
            return Z;
          }
          var b = { a: Zb };
          M++;
          if (v.instantiateWasm)
            try {
              return v.instantiateWasm(b, a);
            } catch (c) {
              J(`Module.instantiateWasm callback failed with error: ${c}`), x(c);
            }
          Da(b, function(c) {
            a(c.instance, c.module);
          }).catch(x);
          return {};
        }();
        v._OrtInit = (a, b) => (v._OrtInit = Z.W)(a, b);
        v._OrtGetLastError = (a, b) => (v._OrtGetLastError = Z.X)(a, b);
        v._OrtCreateSessionOptions = (a, b, c, d, g, h, k, t, C, w) => (v._OrtCreateSessionOptions = Z.Y)(a, b, c, d, g, h, k, t, C, w);
        v._OrtAppendExecutionProvider = (a, b) => (v._OrtAppendExecutionProvider = Z.Z)(a, b);
        v._OrtAddFreeDimensionOverride = (a, b, c) => (v._OrtAddFreeDimensionOverride = Z._)(a, b, c);
        v._OrtAddSessionConfigEntry = (a, b, c) => (v._OrtAddSessionConfigEntry = Z.$)(a, b, c);
        v._OrtReleaseSessionOptions = (a) => (v._OrtReleaseSessionOptions = Z.aa)(a);
        v._OrtCreateSession = (a, b, c) => (v._OrtCreateSession = Z.ba)(a, b, c);
        v._OrtReleaseSession = (a) => (v._OrtReleaseSession = Z.ca)(a);
        v._OrtGetInputOutputCount = (a, b, c) => (v._OrtGetInputOutputCount = Z.da)(a, b, c);
        v._OrtGetInputName = (a, b) => (v._OrtGetInputName = Z.ea)(a, b);
        v._OrtGetOutputName = (a, b) => (v._OrtGetOutputName = Z.fa)(a, b);
        v._OrtFree = (a) => (v._OrtFree = Z.ga)(a);
        v._OrtCreateTensor = (a, b, c, d, g, h) => (v._OrtCreateTensor = Z.ha)(a, b, c, d, g, h);
        v._OrtGetTensorData = (a, b, c, d, g) => (v._OrtGetTensorData = Z.ia)(a, b, c, d, g);
        v._OrtReleaseTensor = (a) => (v._OrtReleaseTensor = Z.ja)(a);
        v._OrtCreateRunOptions = (a, b, c, d) => (v._OrtCreateRunOptions = Z.ka)(a, b, c, d);
        v._OrtAddRunConfigEntry = (a, b, c) => (v._OrtAddRunConfigEntry = Z.la)(a, b, c);
        v._OrtReleaseRunOptions = (a) => (v._OrtReleaseRunOptions = Z.ma)(a);
        v._OrtCreateBinding = (a) => (v._OrtCreateBinding = Z.na)(a);
        v._OrtBindInput = (a, b, c) => (v._OrtBindInput = Z.oa)(a, b, c);
        v._OrtBindOutput = (a, b, c, d) => (v._OrtBindOutput = Z.pa)(a, b, c, d);
        v._OrtClearBoundOutputs = (a) => (v._OrtClearBoundOutputs = Z.qa)(a);
        v._OrtReleaseBinding = (a) => (v._OrtReleaseBinding = Z.ra)(a);
        v._OrtRunWithBinding = (a, b, c, d, g) => (v._OrtRunWithBinding = Z.sa)(a, b, c, d, g);
        v._OrtRun = (a, b, c, d, g, h, k, t) => (v._OrtRun = Z.ta)(a, b, c, d, g, h, k, t);
        v._OrtEndProfiling = (a) => (v._OrtEndProfiling = Z.ua)(a);
        var Xb = () => (Xb = Z.va)(), W = v._pthread_self = () => (W = v._pthread_self = Z.wa)(), Ab = v._malloc = (a) => (Ab = v._malloc = Z.xa)(a);
        v._free = (a) => (v._free = Z.ya)(a);
        v.__emscripten_tls_init = () => (v.__emscripten_tls_init = Z.za)();
        var Wb = v.__emscripten_thread_init = (a, b, c, d, g, h) => (Wb = v.__emscripten_thread_init = Z.Ba)(a, b, c, d, g, h);
        v.__emscripten_thread_crashed = () => (v.__emscripten_thread_crashed = Z.Ca)();
        var Na = (a, b, c, d) => (Na = Z.Da)(a, b, c, d), Ta = (a) => (Ta = Z.Ea)(a), Ya = v.__emscripten_thread_exit = (a) => (Ya = v.__emscripten_thread_exit = Z.Fa)(a), ub = () => (ub = Z.Ga)(), Yb = (a) => (Yb = Z.Ha)(a), Va = (a, b) => (Va = Z.Ia)(a, b), Ka = () => (Ka = Z.Ja)(), U = (a) => (U = Z.Ka)(a), Ma = (a) => (Ma = Z.La)(a);
        function $b() {
          var a = Z;
          a = Object.assign({}, a);
          var b = (d) => () => d() >>> 0, c = (d) => (g) => d(g) >>> 0;
          a.va = b(a.va);
          a.wa = b(a.wa);
          a.xa = c(a.xa);
          a.emscripten_main_runtime_thread_id = b(a.emscripten_main_runtime_thread_id);
          a.Ja = b(a.Ja);
          a.La = c(a.La);
          return a;
        }
        v.wasmMemory = e;
        v.stackAlloc = Ma;
        v.stackSave = Ka;
        v.stackRestore = U;
        v.keepRuntimeAlive = () => 0 < T;
        v.UTF8ToString = Q;
        v.stringToUTF8 = hb;
        v.lengthBytesUTF8 = fb;
        v.ExitStatus = R;
        v.PThread = S;
        var ac;
        N = function bc() {
          ac || cc();
          ac || (N = bc);
        };
        function cc() {
          if (!(0 < M))
            if (D)
              ha(v), D || Ua(va), startWorker(v);
            else {
              if (v.preRun)
                for ("function" == typeof v.preRun && (v.preRun = [v.preRun]); v.preRun.length; )
                  ua.unshift(v.preRun.shift());
              Ua(ua);
              0 < M || ac || (ac = true, v.calledRun = true, K || (D || Ua(va), ha(v), D || Ua(wa)));
            }
        }
        cc();
        return moduleArg.ready;
      };
    })();
    if (typeof exports === "object" && typeof module2 === "object")
      module2.exports = ortWasmThreaded;
    else if (typeof define === "function" && define["amd"])
      define([], () => ortWasmThreaded);
  }
});

// web/lib/wasm/binding/ort-wasm-threaded.worker.js
var require_ort_wasm_threaded_worker = __commonJS({
  "web/lib/wasm/binding/ort-wasm-threaded.worker.js"(exports, module2) {
    module2.exports = '"use strict";var Module={};var ENVIRONMENT_IS_NODE=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string";if(ENVIRONMENT_IS_NODE){var nodeWorkerThreads=require("worker_threads");var parentPort=nodeWorkerThreads.parentPort;parentPort.on("message",data=>onmessage({data:data}));var fs=require("fs");var vm=require("vm");Object.assign(global,{self:global,require:require,Module:Module,location:{href:__filename},Worker:nodeWorkerThreads.Worker,importScripts:f=>vm.runInThisContext(fs.readFileSync(f,"utf8"),{filename:f}),postMessage:msg=>parentPort.postMessage(msg),performance:global.performance||{now:Date.now}})}var initializedJS=false;function threadPrintErr(){var text=Array.prototype.slice.call(arguments).join(" ");if(ENVIRONMENT_IS_NODE){fs.writeSync(2,text+"\\n");return}console.error(text)}function threadAlert(){var text=Array.prototype.slice.call(arguments).join(" ");postMessage({cmd:"alert",text:text,threadId:Module["_pthread_self"]()})}var err=threadPrintErr;self.alert=threadAlert;Module["instantiateWasm"]=(info,receiveInstance)=>{var module=Module["wasmModule"];Module["wasmModule"]=null;var instance=new WebAssembly.Instance(module,info);return receiveInstance(instance)};self.onunhandledrejection=e=>{throw e.reason||e};function handleMessage(e){try{if(e.data.cmd==="load"){let messageQueue=[];self.onmessage=e=>messageQueue.push(e);self.startWorker=instance=>{Module=instance;postMessage({"cmd":"loaded"});for(let msg of messageQueue){handleMessage(msg)}self.onmessage=handleMessage};Module["wasmModule"]=e.data.wasmModule;for(const handler of e.data.handlers){Module[handler]=(...args)=>{postMessage({cmd:"callHandler",handler:handler,args:args})}}Module["wasmMemory"]=e.data.wasmMemory;Module["buffer"]=Module["wasmMemory"].buffer;Module["ENVIRONMENT_IS_PTHREAD"]=true;if(typeof e.data.urlOrBlob=="string"){importScripts(e.data.urlOrBlob)}else{var objectUrl=URL.createObjectURL(e.data.urlOrBlob);importScripts(objectUrl);URL.revokeObjectURL(objectUrl)}ortWasmThreaded(Module)}else if(e.data.cmd==="run"){Module["__emscripten_thread_init"](e.data.pthread_ptr,/*is_main=*/0,/*is_runtime=*/0,/*can_block=*/1);Module["__emscripten_thread_mailbox_await"](e.data.pthread_ptr);Module["establishStackSpace"]();Module["PThread"].receiveObjectTransfer(e.data);Module["PThread"].threadInitTLS();if(!initializedJS){initializedJS=true}try{Module["invokeEntryPoint"](e.data.start_routine,e.data.arg)}catch(ex){if(ex!="unwind"){throw ex}}}else if(e.data.cmd==="cancel"){if(Module["_pthread_self"]()){Module["__emscripten_thread_exit"](-1)}}else if(e.data.target==="setimmediate"){}else if(e.data.cmd==="checkMailbox"){if(initializedJS){Module["checkMailbox"]()}}else if(e.data.cmd){err(`worker.js received unknown command ${e.data.cmd}`);err(e.data)}}catch(ex){Module["__emscripten_thread_crashed"]?.();throw ex}}self.onmessage=handleMessage;\n';
  }
});

// web/lib/wasm/wasm-factory.ts
var ortWasmFactory, ortWasmFactoryThreaded, wasm, initialized, initializing, aborted, isMultiThreadSupported, isSimdSupported, getWasmFileName, initializeWebAssembly, getInstance;
var init_wasm_factory = __esm({
  "web/lib/wasm/wasm-factory.ts"() {
    "use strict";
    init_node_path();
    if (true) {
      ortWasmFactory = require_ort_training_wasm_simd();
    } else {
      ortWasmFactory = true ? null : null;
    }
    ortWasmFactoryThreaded = true ? true ? require_ort_wasm_threaded() : null : ortWasmFactory;
    initialized = false;
    initializing = false;
    aborted = false;
    isMultiThreadSupported = (numThreads) => {
      if (numThreads === 1) {
        return false;
      }
      if (typeof SharedArrayBuffer === "undefined") {
        if (typeof self !== "undefined" && !self.crossOriginIsolated) {
          console.warn(
            "env.wasm.numThreads is set to " + numThreads + ", but this will not work unless you enable crossOriginIsolated mode. See https://web.dev/cross-origin-isolation-guide/ for more info."
          );
        }
        return false;
      }
      if (typeof process !== "undefined" && process.versions && process.versions.node) {
        console.warn(
          "env.wasm.numThreads is set to " + numThreads + ", however, currently onnxruntime-web does not support multi-threads in Node.js. Please consider using onnxruntime-node for performance critical scenarios."
        );
      }
      try {
        if (typeof MessageChannel !== "undefined") {
          new MessageChannel().port1.postMessage(new SharedArrayBuffer(1));
        }
        return WebAssembly.validate(new Uint8Array([
          0,
          97,
          115,
          109,
          1,
          0,
          0,
          0,
          1,
          4,
          1,
          96,
          0,
          0,
          3,
          2,
          1,
          0,
          5,
          4,
          1,
          3,
          1,
          1,
          10,
          11,
          1,
          9,
          0,
          65,
          0,
          254,
          16,
          2,
          0,
          26,
          11
        ]));
      } catch (e) {
        return false;
      }
    };
    isSimdSupported = () => {
      try {
        return WebAssembly.validate(new Uint8Array([
          0,
          97,
          115,
          109,
          1,
          0,
          0,
          0,
          1,
          4,
          1,
          96,
          0,
          0,
          3,
          2,
          1,
          0,
          10,
          30,
          1,
          28,
          0,
          65,
          0,
          253,
          15,
          253,
          12,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          253,
          186,
          1,
          26,
          11
        ]));
      } catch (e) {
        return false;
      }
    };
    getWasmFileName = (useSimd, useThreads) => {
      if (useSimd) {
        if (true) {
          return "ort-training-wasm-simd.wasm";
        }
        return useThreads ? "ort-wasm-simd-threaded.wasm" : "ort-wasm-simd.wasm";
      } else {
        return useThreads ? "ort-wasm-threaded.wasm" : "ort-wasm.wasm";
      }
    };
    initializeWebAssembly = async (flags) => {
      if (initialized) {
        return Promise.resolve();
      }
      if (initializing) {
        throw new Error("multiple calls to 'initializeWebAssembly()' detected.");
      }
      if (aborted) {
        throw new Error("previous call to 'initializeWebAssembly()' failed.");
      }
      initializing = true;
      const timeout = flags.initTimeout;
      const numThreads = flags.numThreads;
      const simd = flags.simd;
      const useThreads = isMultiThreadSupported(numThreads);
      const useSimd = simd && isSimdSupported();
      const wasmPaths = flags.wasmPaths;
      const wasmPrefixOverride = typeof wasmPaths === "string" ? wasmPaths : void 0;
      const wasmFileName = getWasmFileName(useSimd, useThreads);
      const wasmPathOverride = typeof wasmPaths === "object" ? wasmPaths[wasmFileName] : void 0;
      let isTimeout = false;
      const tasks = [];
      if (timeout > 0) {
        tasks.push(new Promise((resolve) => {
          setTimeout(() => {
            isTimeout = true;
            resolve();
          }, timeout);
        }));
      }
      tasks.push(new Promise((resolve, reject) => {
        const factory = useThreads ? ortWasmFactoryThreaded : ortWasmFactory;
        const config = {
          locateFile: (fileName, scriptDirectory) => {
            if (useThreads && fileName.endsWith(".worker.js") && typeof Blob !== "undefined") {
              return URL.createObjectURL(new Blob(
                [
                  // This require() function is handled by esbuild plugin to load file content as string.
                  // eslint-disable-next-line @typescript-eslint/no-require-imports
                  require_ort_wasm_threaded_worker()
                ],
                { type: "text/javascript" }
              ));
            }
            if (fileName.endsWith(".wasm")) {
              if (wasmPathOverride) {
                return wasmPathOverride;
              }
              const prefix = wasmPrefixOverride ?? scriptDirectory;
              if (false) {
                if (wasmFileName === "ort-wasm-simd.wasm") {
                  return prefix + "ort-wasm-simd.jsep.wasm";
                } else if (wasmFileName === "ort-wasm-simd-threaded.wasm") {
                  return prefix + "ort-wasm-simd-threaded.jsep.wasm";
                }
              }
              return prefix + wasmFileName;
            }
            return scriptDirectory + fileName;
          }
        };
        if (useThreads) {
          config.numThreads = numThreads;
          if (typeof Blob === "undefined") {
            config.mainScriptUrlOrBlob = join(__dirname, "ort-wasm-threaded.js");
          } else {
            const scriptSourceCode = `var ortWasmThreaded=${factory.toString()};`;
            config.mainScriptUrlOrBlob = new Blob([scriptSourceCode], { type: "text/javascript" });
          }
        }
        factory(config).then(
          // wasm module initialized successfully
          (module2) => {
            initializing = false;
            initialized = true;
            wasm = module2;
            resolve();
          },
          // wasm module failed to initialize
          (what) => {
            initializing = false;
            aborted = true;
            reject(what);
          }
        );
      }));
      await Promise.race(tasks);
      if (isTimeout) {
        throw new Error(`WebAssembly backend initializing failed due to timeout: ${timeout}ms`);
      }
    };
    getInstance = () => {
      if (initialized && wasm) {
        return wasm;
      }
      throw new Error("WebAssembly is not initialized yet.");
    };
  }
});

// web/lib/wasm/wasm-utils.ts
var allocWasmString, iterateExtraOptions, checkLastError;
var init_wasm_utils = __esm({
  "web/lib/wasm/wasm-utils.ts"() {
    "use strict";
    init_wasm_factory();
    allocWasmString = (data, allocs) => {
      const wasm2 = getInstance();
      const dataLength = wasm2.lengthBytesUTF8(data) + 1;
      const dataOffset = wasm2._malloc(dataLength);
      wasm2.stringToUTF8(data, dataOffset, dataLength);
      allocs.push(dataOffset);
      return dataOffset;
    };
    iterateExtraOptions = (options, prefix, seen, handler) => {
      if (typeof options == "object" && options !== null) {
        if (seen.has(options)) {
          throw new Error("Circular reference in options");
        } else {
          seen.add(options);
        }
      }
      Object.entries(options).forEach(([key, value]) => {
        const name = prefix ? prefix + key : key;
        if (typeof value === "object") {
          iterateExtraOptions(value, name + ".", seen, handler);
        } else if (typeof value === "string" || typeof value === "number") {
          handler(name, value.toString());
        } else if (typeof value === "boolean") {
          handler(name, value ? "1" : "0");
        } else {
          throw new Error(`Can't handle extra config type: ${typeof value}`);
        }
      });
    };
    checkLastError = (message) => {
      const wasm2 = getInstance();
      const stack = wasm2.stackSave();
      try {
        const paramsOffset = wasm2.stackAlloc(8);
        wasm2._OrtGetLastError(paramsOffset, paramsOffset + 4);
        const errorCode = wasm2.HEAP32[paramsOffset / 4];
        const errorMessagePointer = wasm2.HEAPU32[paramsOffset / 4 + 1];
        const errorMessage = errorMessagePointer ? wasm2.UTF8ToString(errorMessagePointer) : "";
        throw new Error(`${message} ERROR_CODE: ${errorCode}, ERROR_MESSAGE: ${errorMessage}`);
      } finally {
        wasm2.stackRestore(stack);
      }
    };
  }
});

// web/lib/wasm/run-options.ts
var setRunOptions;
var init_run_options = __esm({
  "web/lib/wasm/run-options.ts"() {
    "use strict";
    init_wasm_factory();
    init_wasm_utils();
    setRunOptions = (options) => {
      const wasm2 = getInstance();
      let runOptionsHandle = 0;
      const allocs = [];
      const runOptions = options || {};
      try {
        if (options?.logSeverityLevel === void 0) {
          runOptions.logSeverityLevel = 2;
        } else if (typeof options.logSeverityLevel !== "number" || !Number.isInteger(options.logSeverityLevel) || options.logSeverityLevel < 0 || options.logSeverityLevel > 4) {
          throw new Error(`log serverity level is not valid: ${options.logSeverityLevel}`);
        }
        if (options?.logVerbosityLevel === void 0) {
          runOptions.logVerbosityLevel = 0;
        } else if (typeof options.logVerbosityLevel !== "number" || !Number.isInteger(options.logVerbosityLevel)) {
          throw new Error(`log verbosity level is not valid: ${options.logVerbosityLevel}`);
        }
        if (options?.terminate === void 0) {
          runOptions.terminate = false;
        }
        let tagDataOffset = 0;
        if (options?.tag !== void 0) {
          tagDataOffset = allocWasmString(options.tag, allocs);
        }
        runOptionsHandle = wasm2._OrtCreateRunOptions(
          runOptions.logSeverityLevel,
          runOptions.logVerbosityLevel,
          !!runOptions.terminate,
          tagDataOffset
        );
        if (runOptionsHandle === 0) {
          checkLastError("Can't create run options.");
        }
        if (options?.extra !== void 0) {
          iterateExtraOptions(options.extra, "", /* @__PURE__ */ new WeakSet(), (key, value) => {
            const keyDataOffset = allocWasmString(key, allocs);
            const valueDataOffset = allocWasmString(value, allocs);
            if (wasm2._OrtAddRunConfigEntry(runOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {
              checkLastError(`Can't set a run config entry: ${key} - ${value}.`);
            }
          });
        }
        return [runOptionsHandle, allocs];
      } catch (e) {
        if (runOptionsHandle !== 0) {
          wasm2._OrtReleaseRunOptions(runOptionsHandle);
        }
        allocs.forEach((alloc) => wasm2._free(alloc));
        throw e;
      }
    };
  }
});

// web/lib/wasm/session-options.ts
var getGraphOptimzationLevel, getExecutionMode, appendDefaultOptions, setExecutionProviders, setSessionOptions;
var init_session_options = __esm({
  "web/lib/wasm/session-options.ts"() {
    "use strict";
    init_wasm_factory();
    init_wasm_utils();
    getGraphOptimzationLevel = (graphOptimizationLevel) => {
      switch (graphOptimizationLevel) {
        case "disabled":
          return 0;
        case "basic":
          return 1;
        case "extended":
          return 2;
        case "all":
          return 99;
        default:
          throw new Error(`unsupported graph optimization level: ${graphOptimizationLevel}`);
      }
    };
    getExecutionMode = (executionMode) => {
      switch (executionMode) {
        case "sequential":
          return 0;
        case "parallel":
          return 1;
        default:
          throw new Error(`unsupported execution mode: ${executionMode}`);
      }
    };
    appendDefaultOptions = (options) => {
      if (!options.extra) {
        options.extra = {};
      }
      if (!options.extra.session) {
        options.extra.session = {};
      }
      const session = options.extra.session;
      if (!session.use_ort_model_bytes_directly) {
        session.use_ort_model_bytes_directly = "1";
      }
      if (options.executionProviders && options.executionProviders.some((ep) => (typeof ep === "string" ? ep : ep.name) === "webgpu")) {
        options.enableMemPattern = false;
      }
    };
    setExecutionProviders = (sessionOptionsHandle, executionProviders, allocs) => {
      for (const ep of executionProviders) {
        let epName = typeof ep === "string" ? ep : ep.name;
        switch (epName) {
          case "webnn":
            epName = "WEBNN";
            if (typeof ep !== "string") {
              const webnnOptions = ep;
              if (webnnOptions?.deviceType) {
                const keyDataOffset = allocWasmString("deviceType", allocs);
                const valueDataOffset = allocWasmString(webnnOptions.deviceType, allocs);
                if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {
                  checkLastError(`Can't set a session config entry: 'deviceType' - ${webnnOptions.deviceType}.`);
                }
              }
              if (webnnOptions?.numThreads) {
                let numThreads = webnnOptions.numThreads;
                if (typeof numThreads != "number" || !Number.isInteger(numThreads) || numThreads < 0) {
                  numThreads = 0;
                }
                const keyDataOffset = allocWasmString("numThreads", allocs);
                const valueDataOffset = allocWasmString(numThreads.toString(), allocs);
                if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {
                  checkLastError(`Can't set a session config entry: 'numThreads' - ${webnnOptions.numThreads}.`);
                }
              }
              if (webnnOptions?.powerPreference) {
                const keyDataOffset = allocWasmString("powerPreference", allocs);
                const valueDataOffset = allocWasmString(webnnOptions.powerPreference, allocs);
                if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {
                  checkLastError(
                    `Can't set a session config entry: 'powerPreference' - ${webnnOptions.powerPreference}.`
                  );
                }
              }
            }
            break;
          case "webgpu":
            epName = "JS";
            if (typeof ep !== "string") {
              const webgpuOptions = ep;
              if (webgpuOptions?.preferredLayout) {
                if (webgpuOptions.preferredLayout !== "NCHW" && webgpuOptions.preferredLayout !== "NHWC") {
                  throw new Error(`preferredLayout must be either 'NCHW' or 'NHWC': ${webgpuOptions.preferredLayout}`);
                }
                const keyDataOffset = allocWasmString("preferredLayout", allocs);
                const valueDataOffset = allocWasmString(webgpuOptions.preferredLayout, allocs);
                if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {
                  checkLastError(
                    `Can't set a session config entry: 'preferredLayout' - ${webgpuOptions.preferredLayout}.`
                  );
                }
              }
            }
            break;
          case "wasm":
          case "cpu":
            continue;
          default:
            throw new Error(`not supported execution provider: ${epName}`);
        }
        const epNameDataOffset = allocWasmString(epName, allocs);
        if (getInstance()._OrtAppendExecutionProvider(sessionOptionsHandle, epNameDataOffset) !== 0) {
          checkLastError(`Can't append execution provider: ${epName}.`);
        }
      }
    };
    setSessionOptions = (options) => {
      const wasm2 = getInstance();
      let sessionOptionsHandle = 0;
      const allocs = [];
      const sessionOptions = options || {};
      appendDefaultOptions(sessionOptions);
      try {
        const graphOptimizationLevel = getGraphOptimzationLevel(sessionOptions.graphOptimizationLevel ?? "all");
        const executionMode = getExecutionMode(sessionOptions.executionMode ?? "sequential");
        const logIdDataOffset = typeof sessionOptions.logId === "string" ? allocWasmString(sessionOptions.logId, allocs) : 0;
        const logSeverityLevel = sessionOptions.logSeverityLevel ?? 2;
        if (!Number.isInteger(logSeverityLevel) || logSeverityLevel < 0 || logSeverityLevel > 4) {
          throw new Error(`log serverity level is not valid: ${logSeverityLevel}`);
        }
        const logVerbosityLevel = sessionOptions.logVerbosityLevel ?? 0;
        if (!Number.isInteger(logVerbosityLevel) || logVerbosityLevel < 0 || logVerbosityLevel > 4) {
          throw new Error(`log verbosity level is not valid: ${logVerbosityLevel}`);
        }
        const optimizedModelFilePathOffset = typeof sessionOptions.optimizedModelFilePath === "string" ? allocWasmString(sessionOptions.optimizedModelFilePath, allocs) : 0;
        sessionOptionsHandle = wasm2._OrtCreateSessionOptions(
          graphOptimizationLevel,
          !!sessionOptions.enableCpuMemArena,
          !!sessionOptions.enableMemPattern,
          executionMode,
          !!sessionOptions.enableProfiling,
          0,
          logIdDataOffset,
          logSeverityLevel,
          logVerbosityLevel,
          optimizedModelFilePathOffset
        );
        if (sessionOptionsHandle === 0) {
          checkLastError("Can't create session options.");
        }
        if (sessionOptions.executionProviders) {
          setExecutionProviders(sessionOptionsHandle, sessionOptions.executionProviders, allocs);
        }
        if (sessionOptions.enableGraphCapture !== void 0) {
          if (typeof sessionOptions.enableGraphCapture !== "boolean") {
            throw new Error(`enableGraphCapture must be a boolean value: ${sessionOptions.enableGraphCapture}`);
          }
          const keyDataOffset = allocWasmString("enableGraphCapture", allocs);
          const valueDataOffset = allocWasmString(sessionOptions.enableGraphCapture.toString(), allocs);
          if (wasm2._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {
            checkLastError(
              `Can't set a session config entry: 'enableGraphCapture' - ${sessionOptions.enableGraphCapture}.`
            );
          }
        }
        if (sessionOptions.freeDimensionOverrides) {
          for (const [name, value] of Object.entries(sessionOptions.freeDimensionOverrides)) {
            if (typeof name !== "string") {
              throw new Error(`free dimension override name must be a string: ${name}`);
            }
            if (typeof value !== "number" || !Number.isInteger(value) || value < 0) {
              throw new Error(`free dimension override value must be a non-negative integer: ${value}`);
            }
            const nameOffset = allocWasmString(name, allocs);
            if (wasm2._OrtAddFreeDimensionOverride(sessionOptionsHandle, nameOffset, value) !== 0) {
              checkLastError(`Can't set a free dimension override: ${name} - ${value}.`);
            }
          }
        }
        if (sessionOptions.extra !== void 0) {
          iterateExtraOptions(sessionOptions.extra, "", /* @__PURE__ */ new WeakSet(), (key, value) => {
            const keyDataOffset = allocWasmString(key, allocs);
            const valueDataOffset = allocWasmString(value, allocs);
            if (wasm2._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {
              checkLastError(`Can't set a session config entry: ${key} - ${value}.`);
            }
          });
        }
        return [sessionOptionsHandle, allocs];
      } catch (e) {
        if (sessionOptionsHandle !== 0) {
          wasm2._OrtReleaseSessionOptions(sessionOptionsHandle);
        }
        allocs.forEach((alloc) => wasm2._free(alloc));
        throw e;
      }
    };
  }
});

// web/lib/wasm/wasm-common.ts
var tensorDataTypeStringToEnum, tensorDataTypeEnumToString, getTensorElementSize, tensorTypeToTypedArrayConstructor, logLevelStringToEnum, isGpuBufferSupportedType, dataLocationStringToEnum;
var init_wasm_common = __esm({
  "web/lib/wasm/wasm-common.ts"() {
    "use strict";
    tensorDataTypeStringToEnum = (type) => {
      switch (type) {
        case "int8":
          return 3 /* int8 */;
        case "uint8":
          return 2 /* uint8 */;
        case "bool":
          return 9 /* bool */;
        case "int16":
          return 5 /* int16 */;
        case "uint16":
          return 4 /* uint16 */;
        case "int32":
          return 6 /* int32 */;
        case "uint32":
          return 12 /* uint32 */;
        case "float16":
          return 10 /* float16 */;
        case "float32":
          return 1 /* float */;
        case "float64":
          return 11 /* double */;
        case "string":
          return 8 /* string */;
        case "int64":
          return 7 /* int64 */;
        case "uint64":
          return 13 /* uint64 */;
        default:
          throw new Error(`unsupported data type: ${type}`);
      }
    };
    tensorDataTypeEnumToString = (typeProto) => {
      switch (typeProto) {
        case 3 /* int8 */:
          return "int8";
        case 2 /* uint8 */:
          return "uint8";
        case 9 /* bool */:
          return "bool";
        case 5 /* int16 */:
          return "int16";
        case 4 /* uint16 */:
          return "uint16";
        case 6 /* int32 */:
          return "int32";
        case 12 /* uint32 */:
          return "uint32";
        case 10 /* float16 */:
          return "float16";
        case 1 /* float */:
          return "float32";
        case 11 /* double */:
          return "float64";
        case 8 /* string */:
          return "string";
        case 7 /* int64 */:
          return "int64";
        case 13 /* uint64 */:
          return "uint64";
        default:
          throw new Error(`unsupported data type: ${typeProto}`);
      }
    };
    getTensorElementSize = (dateType) => [void 0, 4, 1, 1, 2, 2, 4, 8, void 0, 1, 2, 8, 4, 8, void 0, void 0, void 0][dateType];
    tensorTypeToTypedArrayConstructor = (type) => {
      switch (type) {
        case "float16":
          return typeof Float16Array !== "undefined" && Float16Array.from ? Float16Array : Uint16Array;
        case "float32":
          return Float32Array;
        case "uint8":
          return Uint8Array;
        case "int8":
          return Int8Array;
        case "uint16":
          return Uint16Array;
        case "int16":
          return Int16Array;
        case "int32":
          return Int32Array;
        case "bool":
          return Uint8Array;
        case "float64":
          return Float64Array;
        case "uint32":
          return Uint32Array;
        case "int64":
          return BigInt64Array;
        case "uint64":
          return BigUint64Array;
        default:
          throw new Error(`unsupported type: ${type}`);
      }
    };
    logLevelStringToEnum = (logLevel) => {
      switch (logLevel) {
        case "verbose":
          return 0;
        case "info":
          return 1;
        case "warning":
          return 2;
        case "error":
          return 3;
        case "fatal":
          return 4;
        default:
          throw new Error(`unsupported logging level: ${logLevel}`);
      }
    };
    isGpuBufferSupportedType = (type) => type === "float32" || type === "float16" || type === "int32" || type === "int64" || type === "uint32" || type === "uint8" || type === "bool";
    dataLocationStringToEnum = (location) => {
      switch (location) {
        case "none":
          return 0;
        case "cpu":
          return 1;
        case "cpu-pinned":
          return 2;
        case "texture":
          return 3;
        case "gpu-buffer":
          return 4;
        default:
          throw new Error(`unsupported data location: ${location}`);
      }
    };
  }
});

// nodejs-ignore:node:fs/promises
var readFile2;
var init_promises = __esm({
  "nodejs-ignore:node:fs/promises"() {
    readFile2 = void 0;
  }
});

// web/lib/wasm/wasm-utils-load-file.ts
var loadFile;
var init_wasm_utils_load_file = __esm({
  "web/lib/wasm/wasm-utils-load-file.ts"() {
    "use strict";
    init_fs();
    init_promises();
    loadFile = async (file) => {
      if (typeof file === "string") {
        if (typeof process !== "undefined" && process.versions && process.versions.node) {
          try {
            return new Uint8Array(await readFile2(file));
          } catch (e) {
            if (e.code === "ERR_FS_FILE_TOO_LARGE") {
              const stream = createReadStream(file);
              const chunks = [];
              for await (const chunk of stream) {
                chunks.push(chunk);
              }
              return new Uint8Array(Buffer.concat(chunks));
            }
            throw e;
          }
        } else {
          const response = await fetch(file);
          if (!response.ok) {
            throw new Error(`failed to load external data file: ${file}`);
          }
          const contentLengthHeader = response.headers.get("Content-Length");
          const fileSize = contentLengthHeader ? parseInt(contentLengthHeader, 10) : 0;
          if (fileSize < 1073741824) {
            return new Uint8Array(await response.arrayBuffer());
          } else {
            if (!response.body) {
              throw new Error(`failed to load external data file: ${file}, no response body.`);
            }
            const reader = response.body.getReader();
            let buffer;
            try {
              buffer = new ArrayBuffer(fileSize);
            } catch (e) {
              if (e instanceof RangeError) {
                const pages = Math.ceil(fileSize / 65536);
                buffer = new WebAssembly.Memory({ initial: pages, maximum: pages }).buffer;
              } else {
                throw e;
              }
            }
            let offset = 0;
            while (true) {
              const { done, value } = await reader.read();
              if (done) {
                break;
              }
              const chunkSize = value.byteLength;
              const chunk = new Uint8Array(buffer, offset, chunkSize);
              chunk.set(value);
              offset += chunkSize;
            }
            return new Uint8Array(buffer, 0, fileSize);
          }
        }
      } else if (file instanceof Blob) {
        return new Uint8Array(await file.arrayBuffer());
      } else if (file instanceof Uint8Array) {
        return file;
      } else {
        return new Uint8Array(file);
      }
    };
  }
});

// web/lib/wasm/wasm-core-impl.ts
var initOrt, initRuntime, initEp, activeSessions, getSessionInputOutputCount, copyFromExternalBuffer, createSession, releaseSession, prepareInputOutputTensor, run, endProfiling, extractTransferableBuffers;
var init_wasm_core_impl = __esm({
  "web/lib/wasm/wasm-core-impl.ts"() {
    "use strict";
    init_run_options();
    init_session_options();
    init_wasm_common();
    init_wasm_factory();
    init_wasm_utils();
    init_wasm_utils_load_file();
    initOrt = (numThreads, loggingLevel) => {
      const errorCode = getInstance()._OrtInit(numThreads, loggingLevel);
      if (errorCode !== 0) {
        checkLastError("Can't initialize onnxruntime.");
      }
    };
    initRuntime = async (env3) => {
      initOrt(env3.wasm.numThreads, logLevelStringToEnum(env3.logLevel));
    };
    initEp = async (env3, epName) => {
      if (false) {
        if (typeof navigator === "undefined" || !navigator.gpu) {
          throw new Error("WebGPU is not supported in current environment");
        }
        const adapter = await navigator.gpu.requestAdapter();
        if (!adapter) {
          throw new Error(
            'Failed to get GPU adapter. You may need to enable flag "--enable-unsafe-webgpu" if you are using Chrome.'
          );
        }
        if (!env3.wasm.simd) {
          throw new Error(
            "Not supported for WebGPU=ON and SIMD=OFF. Please set `env.wasm.simd` to true when using `webgpu` EP"
          );
        }
        const initJsep = null.init;
        await initJsep(getInstance(), env3, adapter);
      }
    };
    activeSessions = /* @__PURE__ */ new Map();
    getSessionInputOutputCount = (sessionHandle) => {
      const wasm2 = getInstance();
      const stack = wasm2.stackSave();
      try {
        const dataOffset = wasm2.stackAlloc(8);
        const errorCode = wasm2._OrtGetInputOutputCount(sessionHandle, dataOffset, dataOffset + 4);
        if (errorCode !== 0) {
          checkLastError("Can't get session input/output count.");
        }
        return [wasm2.HEAP32[dataOffset / 4], wasm2.HEAP32[dataOffset / 4 + 1]];
      } finally {
        wasm2.stackRestore(stack);
      }
    };
    copyFromExternalBuffer = (model) => {
      const wasm2 = getInstance();
      const modelDataOffset = wasm2._malloc(model.byteLength);
      if (modelDataOffset === 0) {
        throw new Error(`Can't create a session. failed to allocate a buffer of size ${model.byteLength}.`);
      }
      wasm2.HEAPU8.set(model, modelDataOffset);
      return [modelDataOffset, model.byteLength];
    };
    createSession = async (modelData, options) => {
      let modelDataOffset, modelDataLength;
      const wasm2 = getInstance();
      if (Array.isArray(modelData)) {
        [modelDataOffset, modelDataLength] = modelData;
      } else if (modelData.buffer === wasm2.HEAPU8.buffer) {
        [modelDataOffset, modelDataLength] = [modelData.byteOffset, modelData.byteLength];
      } else {
        [modelDataOffset, modelDataLength] = copyFromExternalBuffer(modelData);
      }
      let sessionHandle = 0;
      let sessionOptionsHandle = 0;
      let ioBindingHandle = 0;
      let allocs = [];
      const inputNamesUTF8Encoded = [];
      const outputNamesUTF8Encoded = [];
      try {
        [sessionOptionsHandle, allocs] = setSessionOptions(options);
        if (options?.externalData && wasm2.mountExternalData) {
          const loadingPromises = [];
          for (const file of options.externalData) {
            const path = typeof file === "string" ? file : file.path;
            loadingPromises.push(loadFile(typeof file === "string" ? file : file.data).then((data) => {
              wasm2.mountExternalData(path, data);
            }));
          }
          await Promise.all(loadingPromises);
        }
        sessionHandle = await wasm2._OrtCreateSession(modelDataOffset, modelDataLength, sessionOptionsHandle);
        if (sessionHandle === 0) {
          checkLastError("Can't create a session.");
        }
        const [inputCount, outputCount] = getSessionInputOutputCount(sessionHandle);
        const enableGraphCapture = !!options?.enableGraphCapture;
        const inputNames = [];
        const outputNames = [];
        const outputPreferredLocations = [];
        for (let i = 0; i < inputCount; i++) {
          const name = wasm2._OrtGetInputName(sessionHandle, i);
          if (name === 0) {
            checkLastError("Can't get an input name.");
          }
          inputNamesUTF8Encoded.push(name);
          inputNames.push(wasm2.UTF8ToString(name));
        }
        for (let i = 0; i < outputCount; i++) {
          const name = wasm2._OrtGetOutputName(sessionHandle, i);
          if (name === 0) {
            checkLastError("Can't get an output name.");
          }
          outputNamesUTF8Encoded.push(name);
          const nameString = wasm2.UTF8ToString(name);
          outputNames.push(nameString);
          if (false) {
            if (enableGraphCapture && options?.preferredOutputLocation === void 0) {
              outputPreferredLocations.push("gpu-buffer");
              continue;
            }
            const location = typeof options?.preferredOutputLocation === "string" ? options.preferredOutputLocation : options?.preferredOutputLocation?.[nameString] ?? "cpu";
            if (location !== "cpu" && location !== "cpu-pinned" && location !== "gpu-buffer") {
              throw new Error(`Not supported preferred output location: ${location}.`);
            }
            if (enableGraphCapture && location !== "gpu-buffer") {
              throw new Error(`Not supported preferred output location: ${location}. Only 'gpu-buffer' location is supported when enableGraphCapture is true.`);
            }
            outputPreferredLocations.push(location);
          }
        }
        let bindingState = null;
        if (false) {
          ioBindingHandle = wasm2._OrtCreateBinding(sessionHandle);
          if (ioBindingHandle === 0) {
            checkLastError("Can't create IO binding.");
          }
          bindingState = {
            handle: ioBindingHandle,
            outputPreferredLocations,
            outputPreferredLocationsEncoded: outputPreferredLocations.map((l) => dataLocationStringToEnum(l))
          };
        }
        activeSessions.set(
          sessionHandle,
          [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded, bindingState, enableGraphCapture, false]
        );
        return [sessionHandle, inputNames, outputNames];
      } catch (e) {
        inputNamesUTF8Encoded.forEach((buf) => wasm2._OrtFree(buf));
        outputNamesUTF8Encoded.forEach((buf) => wasm2._OrtFree(buf));
        if (ioBindingHandle !== 0) {
          wasm2._OrtReleaseBinding(ioBindingHandle);
        }
        if (sessionHandle !== 0) {
          wasm2._OrtReleaseSession(sessionHandle);
        }
        throw e;
      } finally {
        wasm2._free(modelDataOffset);
        if (sessionOptionsHandle !== 0) {
          wasm2._OrtReleaseSessionOptions(sessionOptionsHandle);
        }
        allocs.forEach((alloc) => wasm2._free(alloc));
        wasm2.unmountExternalData?.();
      }
    };
    releaseSession = (sessionId) => {
      const wasm2 = getInstance();
      const session = activeSessions.get(sessionId);
      if (!session) {
        throw new Error(`cannot release session. invalid session id: ${sessionId}`);
      }
      const [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded, ioBindingState, enableGraphCapture] = session;
      if (ioBindingState) {
        if (enableGraphCapture) {
          wasm2._OrtClearBoundOutputs(ioBindingState.handle);
        }
        wasm2._OrtReleaseBinding(ioBindingState.handle);
      }
      wasm2.jsepOnReleaseSession?.(sessionId);
      inputNamesUTF8Encoded.forEach((buf) => wasm2._OrtFree(buf));
      outputNamesUTF8Encoded.forEach((buf) => wasm2._OrtFree(buf));
      wasm2._OrtReleaseSession(sessionHandle);
      activeSessions.delete(sessionId);
    };
    prepareInputOutputTensor = (tensor, tensorHandles, allocs, sessionId, index, enableGraphCapture = false) => {
      if (!tensor) {
        tensorHandles.push(0);
        return;
      }
      const wasm2 = getInstance();
      const dataType = tensor[0];
      const dims = tensor[1];
      const location = tensor[3];
      let rawData;
      let dataByteLength;
      if (dataType === "string" && location === "gpu-buffer") {
        throw new Error("String tensor is not supported on GPU.");
      }
      if (enableGraphCapture && location !== "gpu-buffer") {
        throw new Error(
          `External buffer must be provided for input/output index ${index} when enableGraphCapture is true.`
        );
      }
      if (location === "gpu-buffer") {
        const gpuBuffer = tensor[2].gpuBuffer;
        const elementSizeInBytes = getTensorElementSize(tensorDataTypeStringToEnum(dataType));
        dataByteLength = dims.reduce((a, b) => a * b, 1) * elementSizeInBytes;
        rawData = wasm2.jsepRegisterBuffer(sessionId, index, gpuBuffer, dataByteLength);
      } else {
        const data = tensor[2];
        if (Array.isArray(data)) {
          dataByteLength = 4 * data.length;
          rawData = wasm2._malloc(dataByteLength);
          allocs.push(rawData);
          let dataIndex = rawData / 4;
          for (let i = 0; i < data.length; i++) {
            if (typeof data[i] !== "string") {
              throw new TypeError(`tensor data at index ${i} is not a string`);
            }
            wasm2.HEAPU32[dataIndex++] = allocWasmString(data[i], allocs);
          }
        } else {
          dataByteLength = data.byteLength;
          rawData = wasm2._malloc(dataByteLength);
          allocs.push(rawData);
          wasm2.HEAPU8.set(new Uint8Array(data.buffer, data.byteOffset, dataByteLength), rawData);
        }
      }
      const stack = wasm2.stackSave();
      const dimsOffset = wasm2.stackAlloc(4 * dims.length);
      try {
        let dimIndex = dimsOffset / 4;
        dims.forEach((d) => wasm2.HEAP32[dimIndex++] = d);
        const tensor2 = wasm2._OrtCreateTensor(
          tensorDataTypeStringToEnum(dataType),
          rawData,
          dataByteLength,
          dimsOffset,
          dims.length,
          dataLocationStringToEnum(location)
        );
        if (tensor2 === 0) {
          checkLastError(`Can't create tensor for input/output. session=${sessionId}, index=${index}.`);
        }
        tensorHandles.push(tensor2);
      } finally {
        wasm2.stackRestore(stack);
      }
    };
    run = async (sessionId, inputIndices, inputTensors, outputIndices, outputTensors, options) => {
      const wasm2 = getInstance();
      const session = activeSessions.get(sessionId);
      if (!session) {
        throw new Error(`cannot run inference. invalid session id: ${sessionId}`);
      }
      const sessionHandle = session[0];
      const inputNamesUTF8Encoded = session[1];
      const outputNamesUTF8Encoded = session[2];
      const ioBindingState = session[3];
      const enableGraphCapture = session[4];
      const inputOutputBound = session[5];
      const inputCount = inputIndices.length;
      const outputCount = outputIndices.length;
      let runOptionsHandle = 0;
      let runOptionsAllocs = [];
      const inputTensorHandles = [];
      const outputTensorHandles = [];
      const inputOutputAllocs = [];
      const beforeRunStack = wasm2.stackSave();
      const inputValuesOffset = wasm2.stackAlloc(inputCount * 4);
      const inputNamesOffset = wasm2.stackAlloc(inputCount * 4);
      const outputValuesOffset = wasm2.stackAlloc(outputCount * 4);
      const outputNamesOffset = wasm2.stackAlloc(outputCount * 4);
      try {
        [runOptionsHandle, runOptionsAllocs] = setRunOptions(options);
        for (let i = 0; i < inputCount; i++) {
          prepareInputOutputTensor(
            inputTensors[i],
            inputTensorHandles,
            inputOutputAllocs,
            sessionId,
            inputIndices[i],
            enableGraphCapture
          );
        }
        for (let i = 0; i < outputCount; i++) {
          prepareInputOutputTensor(
            outputTensors[i],
            outputTensorHandles,
            inputOutputAllocs,
            sessionId,
            inputCount + outputIndices[i],
            enableGraphCapture
          );
        }
        let inputValuesIndex = inputValuesOffset / 4;
        let inputNamesIndex = inputNamesOffset / 4;
        let outputValuesIndex = outputValuesOffset / 4;
        let outputNamesIndex = outputNamesOffset / 4;
        for (let i = 0; i < inputCount; i++) {
          wasm2.HEAPU32[inputValuesIndex++] = inputTensorHandles[i];
          wasm2.HEAPU32[inputNamesIndex++] = inputNamesUTF8Encoded[inputIndices[i]];
        }
        for (let i = 0; i < outputCount; i++) {
          wasm2.HEAPU32[outputValuesIndex++] = outputTensorHandles[i];
          wasm2.HEAPU32[outputNamesIndex++] = outputNamesUTF8Encoded[outputIndices[i]];
        }
        if (false) {
          const { handle, outputPreferredLocations, outputPreferredLocationsEncoded } = ioBindingState;
          if (inputNamesUTF8Encoded.length !== inputCount) {
            throw new Error(`input count from feeds (${inputCount}) is expected to be always equal to model's input count (${inputNamesUTF8Encoded.length}).`);
          }
          for (let i = 0; i < inputCount; i++) {
            const index = inputIndices[i];
            const errorCode2 = await wasm2._OrtBindInput(handle, inputNamesUTF8Encoded[index], inputTensorHandles[i]);
            if (errorCode2 !== 0) {
              checkLastError(`Can't bind input[${i}] for session=${sessionId}.`);
            }
          }
          for (let i = 0; i < outputCount; i++) {
            const index = outputIndices[i];
            const location = outputTensors[i]?.[3];
            if (location) {
              const errorCode2 = wasm2._OrtBindOutput(handle, outputNamesUTF8Encoded[index], outputTensorHandles[i], 0);
              if (errorCode2 !== 0) {
                checkLastError(`Can't bind pre-allocated output[${i}] for session=${sessionId}.`);
              }
            } else {
              const errorCode2 = wasm2._OrtBindOutput(handle, outputNamesUTF8Encoded[index], 0, outputPreferredLocationsEncoded[index]);
              if (errorCode2 !== 0) {
                checkLastError(`Can't bind output[${i}] to ${outputPreferredLocations[i]} for session=${sessionId}.`);
              }
            }
          }
          activeSessions.set(
            sessionId,
            [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded, ioBindingState, enableGraphCapture, true]
          );
        }
        wasm2.jsepOnRunStart?.(sessionHandle);
        let errorCode;
        if (false) {
          errorCode = await wasm2._OrtRunWithBinding(
            sessionHandle,
            ioBindingState.handle,
            outputCount,
            outputValuesOffset,
            runOptionsHandle
          );
        } else {
          errorCode = await wasm2._OrtRun(
            sessionHandle,
            inputNamesOffset,
            inputValuesOffset,
            inputCount,
            outputNamesOffset,
            outputCount,
            outputValuesOffset,
            runOptionsHandle
          );
        }
        if (errorCode !== 0) {
          checkLastError("failed to call OrtRun().");
        }
        const output = [];
        for (let i = 0; i < outputCount; i++) {
          const tensor = wasm2.HEAPU32[outputValuesOffset / 4 + i];
          if (tensor === outputTensorHandles[i]) {
            output.push(outputTensors[i]);
            continue;
          }
          const beforeGetTensorDataStack = wasm2.stackSave();
          const tensorDataOffset = wasm2.stackAlloc(4 * 4);
          let keepOutputTensor = false;
          let type, dataOffset = 0;
          try {
            const errorCode2 = wasm2._OrtGetTensorData(
              tensor,
              tensorDataOffset,
              tensorDataOffset + 4,
              tensorDataOffset + 8,
              tensorDataOffset + 12
            );
            if (errorCode2 !== 0) {
              checkLastError(`Can't access output tensor data on index ${i}.`);
            }
            let tensorDataIndex = tensorDataOffset / 4;
            const dataType = wasm2.HEAPU32[tensorDataIndex++];
            dataOffset = wasm2.HEAPU32[tensorDataIndex++];
            const dimsOffset = wasm2.HEAPU32[tensorDataIndex++];
            const dimsLength = wasm2.HEAPU32[tensorDataIndex++];
            const dims = [];
            for (let i2 = 0; i2 < dimsLength; i2++) {
              dims.push(wasm2.HEAPU32[dimsOffset / 4 + i2]);
            }
            wasm2._OrtFree(dimsOffset);
            const size = dims.reduce((a, b) => a * b, 1);
            type = tensorDataTypeEnumToString(dataType);
            const preferredLocation = ioBindingState?.outputPreferredLocations[outputIndices[i]];
            if (type === "string") {
              if (preferredLocation === "gpu-buffer") {
                throw new Error("String tensor is not supported on GPU.");
              }
              const stringData = [];
              let dataIndex = dataOffset / 4;
              for (let i2 = 0; i2 < size; i2++) {
                const offset = wasm2.HEAPU32[dataIndex++];
                const maxBytesToRead = i2 === size - 1 ? void 0 : wasm2.HEAPU32[dataIndex] - offset;
                stringData.push(wasm2.UTF8ToString(offset, maxBytesToRead));
              }
              output.push([type, dims, stringData, "cpu"]);
            } else {
              if (preferredLocation === "gpu-buffer" && size > 0) {
                const gpuBuffer = wasm2.jsepGetBuffer(dataOffset);
                const elementSize = getTensorElementSize(dataType);
                if (elementSize === void 0 || !isGpuBufferSupportedType(type)) {
                  throw new Error(`Unsupported data type: ${type}`);
                }
                keepOutputTensor = true;
                output.push([
                  type,
                  dims,
                  {
                    gpuBuffer,
                    download: wasm2.jsepCreateDownloader(gpuBuffer, size * elementSize, type),
                    dispose: () => {
                      wasm2._OrtReleaseTensor(tensor);
                    }
                  },
                  "gpu-buffer"
                ]);
              } else {
                const typedArrayConstructor = tensorTypeToTypedArrayConstructor(type);
                const data = new typedArrayConstructor(size);
                new Uint8Array(data.buffer, data.byteOffset, data.byteLength).set(wasm2.HEAPU8.subarray(dataOffset, dataOffset + data.byteLength));
                output.push([type, dims, data, "cpu"]);
              }
            }
          } finally {
            wasm2.stackRestore(beforeGetTensorDataStack);
            if (type === "string" && dataOffset) {
              wasm2._free(dataOffset);
            }
            if (!keepOutputTensor) {
              wasm2._OrtReleaseTensor(tensor);
            }
          }
        }
        if (ioBindingState && !enableGraphCapture) {
          wasm2._OrtClearBoundOutputs(ioBindingState.handle);
          activeSessions.set(
            sessionId,
            [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded, ioBindingState, enableGraphCapture, false]
          );
        }
        return output;
      } finally {
        wasm2.stackRestore(beforeRunStack);
        inputTensorHandles.forEach((v) => wasm2._OrtReleaseTensor(v));
        outputTensorHandles.forEach((v) => wasm2._OrtReleaseTensor(v));
        inputOutputAllocs.forEach((p) => wasm2._free(p));
        if (runOptionsHandle !== 0) {
          wasm2._OrtReleaseRunOptions(runOptionsHandle);
        }
        runOptionsAllocs.forEach((p) => wasm2._free(p));
      }
    };
    endProfiling = (sessionId) => {
      const wasm2 = getInstance();
      const session = activeSessions.get(sessionId);
      if (!session) {
        throw new Error("invalid session id");
      }
      const sessionHandle = session[0];
      const profileFileName = wasm2._OrtEndProfiling(sessionHandle);
      if (profileFileName === 0) {
        checkLastError("Can't get an profile file name.");
      }
      wasm2._OrtFree(profileFileName);
    };
    extractTransferableBuffers = (tensors) => {
      const buffers = [];
      for (const tensor of tensors) {
        const data = tensor[2];
        if (!Array.isArray(data) && "buffer" in data) {
          buffers.push(data.buffer);
        }
      }
      return buffers;
    };
  }
});

// proxy-worker:./proxy-worker/main
var require_main = __commonJS({
  "proxy-worker:./proxy-worker/main"(exports, module2) {
    module2.exports = '/*!\n * ONNX Runtime Web v1.18.0\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n"use strict";\n(() => {\n  var __defProp = Object.defineProperty;\n  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;\n  var __getOwnPropNames = Object.getOwnPropertyNames;\n  var __hasOwnProp = Object.prototype.hasOwnProperty;\n  var __esm = (fn, res) => function __init() {\n    return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;\n  };\n  var __commonJS = (cb, mod) => function __require() {\n    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;\n  };\n  var __export = (target, all) => {\n    for (var name in all)\n      __defProp(target, name, { get: all[name], enumerable: true });\n  };\n  var __copyProps = (to, from, except, desc) => {\n    if (from && typeof from === "object" || typeof from === "function") {\n      for (let key of __getOwnPropNames(from))\n        if (!__hasOwnProp.call(to, key) && key !== except)\n          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n    }\n    return to;\n  };\n  var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);\n\n  // nodejs-ignore:fs\n  var fs_exports = {};\n  __export(fs_exports, {\n    createReadStream: () => createReadStream,\n    readFile: () => readFile,\n    readFileSync: () => readFileSync\n  });\n  var readFile, readFileSync, createReadStream;\n  var init_fs = __esm({\n    "nodejs-ignore:fs"() {\n      readFile = void 0;\n      readFileSync = void 0;\n      createReadStream = void 0;\n    }\n  });\n\n  // nodejs-ignore:path\n  var path_exports = {};\n  __export(path_exports, {\n    join: () => join2\n  });\n  var join2;\n  var init_path = __esm({\n    "nodejs-ignore:path"() {\n      join2 = void 0;\n    }\n  });\n\n  // web/lib/wasm/binding/ort-training-wasm-simd.js\n  var require_ort_training_wasm_simd = __commonJS({\n    "web/lib/wasm/binding/ort-training-wasm-simd.js"(exports, module) {\n      "use strict";\n      var ortWasm = (() => {\n        var _scriptDir = typeof document !== "undefined" && document.currentScript ? document.currentScript.src : void 0;\n        if (typeof __filename !== "undefined")\n          _scriptDir = _scriptDir || __filename;\n        return function(moduleArg = {}) {\n          var e = moduleArg, k, l;\n          e.ready = new Promise((a, b) => {\n            k = a;\n            l = b;\n          });\n          var aa = Object.assign({}, e), ba = "./this.program", ca = "object" == typeof window, q = "function" == typeof importScripts, da = "object" == typeof process && "object" == typeof process.versions && "string" == typeof process.versions.node, v = "", x, z, A;\n          if (da) {\n            var fs = (init_fs(), __toCommonJS(fs_exports)), B = (init_path(), __toCommonJS(path_exports));\n            v = q ? B.dirname(v) + "/" : __dirname + "/";\n            x = (a, b) => {\n              a = C(a) ? new URL(a) : B.normalize(a);\n              return fs.readFileSync(a, b ? void 0 : "utf8");\n            };\n            A = (a) => {\n              a = x(a, true);\n              a.buffer || (a = new Uint8Array(a));\n              return a;\n            };\n            z = (a, b, c, d = true) => {\n              a = C(a) ? new URL(a) : B.normalize(a);\n              fs.readFile(a, d ? void 0 : "utf8", (g, h) => {\n                g ? c(g) : b(d ? h.buffer : h);\n              });\n            };\n            !e.thisProgram && 1 < process.argv.length && (ba = process.argv[1].replace(/\\\\/g, "/"));\n            process.argv.slice(2);\n            e.inspect = () => "[Emscripten Module object]";\n          } else if (ca || q)\n            q ? v = self.location.href : "undefined" != typeof document && document.currentScript && (v = document.currentScript.src), _scriptDir && (v = _scriptDir), 0 !== v.indexOf("blob:") ? v = v.substr(0, v.replace(/[?#].*/, "").lastIndexOf("/") + 1) : v = "", x = (a) => {\n              var b = new XMLHttpRequest();\n              b.open("GET", a, false);\n              b.send(null);\n              return b.responseText;\n            }, q && (A = (a) => {\n              var b = new XMLHttpRequest();\n              b.open("GET", a, false);\n              b.responseType = "arraybuffer";\n              b.send(null);\n              return new Uint8Array(b.response);\n            }), z = (a, b, c) => {\n              var d = new XMLHttpRequest();\n              d.open("GET", a, true);\n              d.responseType = "arraybuffer";\n              d.onload = () => {\n                200 == d.status || 0 == d.status && d.response ? b(d.response) : c();\n              };\n              d.onerror = c;\n              d.send(null);\n            };\n          var ea = console.log.bind(console), D = console.error.bind(console);\n          Object.assign(e, aa);\n          aa = null;\n          "object" != typeof WebAssembly && E("no native wasm support detected");\n          var F, fa = false, G, H, I, J, ha;\n          function ia() {\n            var a = F.buffer;\n            e.HEAP8 = G = new Int8Array(a);\n            e.HEAP16 = new Int16Array(a);\n            e.HEAPU8 = H = new Uint8Array(a);\n            e.HEAPU16 = new Uint16Array(a);\n            e.HEAP32 = I = new Int32Array(a);\n            e.HEAPU32 = J = new Uint32Array(a);\n            e.HEAPF32 = new Float32Array(a);\n            e.HEAPF64 = ha = new Float64Array(a);\n          }\n          var K = [], L = [], ja = [], M = 0, N = null, O = null;\n          function E(a) {\n            a = "Aborted(" + a + ")";\n            D(a);\n            fa = true;\n            a = new WebAssembly.RuntimeError(a + ". Build with -sASSERTIONS for more info.");\n            l(a);\n            throw a;\n          }\n          var ka = (a) => a.startsWith("data:application/octet-stream;base64,"), C = (a) => a.startsWith("file://"), P;\n          P = "ort-training-wasm-simd.wasm";\n          if (!ka(P)) {\n            var la = P;\n            P = e.locateFile ? e.locateFile(la, v) : v + la;\n          }\n          function ma(a) {\n            if (A)\n              return A(a);\n            throw "both async and sync fetching of the wasm failed";\n          }\n          function na(a) {\n            if (ca || q) {\n              if ("function" == typeof fetch && !C(a))\n                return fetch(a, { credentials: "same-origin" }).then((b) => {\n                  if (!b.ok)\n                    throw "failed to load wasm binary file at \'" + a + "\'";\n                  return b.arrayBuffer();\n                }).catch(() => ma(a));\n              if (z)\n                return new Promise((b, c) => {\n                  z(a, (d) => b(new Uint8Array(d)), c);\n                });\n            }\n            return Promise.resolve().then(() => ma(a));\n          }\n          function oa(a, b, c) {\n            return na(a).then((d) => WebAssembly.instantiate(d, b)).then((d) => d).then(c, (d) => {\n              D(`failed to asynchronously prepare wasm: ${d}`);\n              E(d);\n            });\n          }\n          function pa(a, b) {\n            var c = P;\n            return "function" != typeof WebAssembly.instantiateStreaming || ka(c) || C(c) || da || "function" != typeof fetch ? oa(c, a, b) : fetch(c, { credentials: "same-origin" }).then((d) => WebAssembly.instantiateStreaming(d, a).then(b, function(g) {\n              D(`wasm streaming compile failed: ${g}`);\n              D("falling back to ArrayBuffer instantiation");\n              return oa(c, a, b);\n            }));\n          }\n          var Q, qa = { 993136: (a, b, c, d) => {\n            if ("undefined" == typeof e || !e.Qa)\n              return 1;\n            a = R(a >>> 0);\n            a.startsWith("./") && (a = a.substring(2));\n            a = e.Qa.get(a);\n            if (!a)\n              return 2;\n            b >>>= 0;\n            c >>>= 0;\n            if (b + c > a.byteLength)\n              return 3;\n            try {\n              return H.set(a.subarray(b, b + c), d >>> 0 >>> 0), 0;\n            } catch {\n              return 4;\n            }\n          } };\n          function ra(a) {\n            this.Ka = a - 24;\n            this.Pa = function(b) {\n              J[this.Ka + 4 >>> 2 >>> 0] = b;\n            };\n            this.Oa = function(b) {\n              J[this.Ka + 8 >>> 2 >>> 0] = b;\n            };\n            this.Ma = function(b, c) {\n              this.Na();\n              this.Pa(b);\n              this.Oa(c);\n            };\n            this.Na = function() {\n              J[this.Ka + 16 >>> 2 >>> 0] = 0;\n            };\n          }\n          var sa = 0, ta = 0, ua = "undefined" != typeof TextDecoder ? new TextDecoder("utf8") : void 0, va = (a, b, c) => {\n            b >>>= 0;\n            var d = b + c;\n            for (c = b; a[c] && !(c >= d); )\n              ++c;\n            if (16 < c - b && a.buffer && ua)\n              return ua.decode(a.subarray(b, c));\n            for (d = ""; b < c; ) {\n              var g = a[b++];\n              if (g & 128) {\n                var h = a[b++] & 63;\n                if (192 == (g & 224))\n                  d += String.fromCharCode((g & 31) << 6 | h);\n                else {\n                  var m = a[b++] & 63;\n                  g = 224 == (g & 240) ? (g & 15) << 12 | h << 6 | m : (g & 7) << 18 | h << 12 | m << 6 | a[b++] & 63;\n                  65536 > g ? d += String.fromCharCode(g) : (g -= 65536, d += String.fromCharCode(55296 | g >> 10, 56320 | g & 1023));\n                }\n              } else\n                d += String.fromCharCode(g);\n            }\n            return d;\n          }, R = (a, b) => (a >>>= 0) ? va(H, a, b) : "", S = (a) => {\n            for (var b = 0, c = 0; c < a.length; ++c) {\n              var d = a.charCodeAt(c);\n              127 >= d ? b++ : 2047 >= d ? b += 2 : 55296 <= d && 57343 >= d ? (b += 4, ++c) : b += 3;\n            }\n            return b;\n          }, T = (a, b, c, d) => {\n            c >>>= 0;\n            if (!(0 < d))\n              return 0;\n            var g = c;\n            d = c + d - 1;\n            for (var h = 0; h < a.length; ++h) {\n              var m = a.charCodeAt(h);\n              if (55296 <= m && 57343 >= m) {\n                var r = a.charCodeAt(++h);\n                m = 65536 + ((m & 1023) << 10) | r & 1023;\n              }\n              if (127 >= m) {\n                if (c >= d)\n                  break;\n                b[c++ >>> 0] = m;\n              } else {\n                if (2047 >= m) {\n                  if (c + 1 >= d)\n                    break;\n                  b[c++ >>> 0] = 192 | m >> 6;\n                } else {\n                  if (65535 >= m) {\n                    if (c + 2 >= d)\n                      break;\n                    b[c++ >>> 0] = 224 | m >> 12;\n                  } else {\n                    if (c + 3 >= d)\n                      break;\n                    b[c++ >>> 0] = 240 | m >> 18;\n                    b[c++ >>> 0] = 128 | m >> 12 & 63;\n                  }\n                  b[c++ >>> 0] = 128 | m >> 6 & 63;\n                }\n                b[c++ >>> 0] = 128 | m & 63;\n              }\n            }\n            b[c >>> 0] = 0;\n            return c - g;\n          }, U = (a) => 0 === a % 4 && (0 !== a % 100 || 0 === a % 400), wa = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335], xa = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334], Ca = (a) => {\n            var b = S(a) + 1, c = Ba(b);\n            c && T(a, H, c, b);\n            return c;\n          }, V = [], W = {}, Da = () => {\n            if (!X) {\n              var a = { USER: "web_user", LOGNAME: "web_user", PATH: "/", PWD: "/", HOME: "/home/web_user", LANG: ("object" == typeof navigator && navigator.languages && navigator.languages[0] || "C").replace(\n                "-",\n                "_"\n              ) + ".UTF-8", _: ba || "./this.program" }, b;\n              for (b in W)\n                void 0 === W[b] ? delete a[b] : a[b] = W[b];\n              var c = [];\n              for (b in a)\n                c.push(`${b}=${a[b]}`);\n              X = c;\n            }\n            return X;\n          }, X, Ea = [null, [], []], Fa = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], Ga = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n          function Ha(a) {\n            var b = Array(S(a) + 1);\n            T(a, b, 0, b.length);\n            return b;\n          }\n          function Ia(a, b, c, d) {\n            function g(f, n, p) {\n              for (f = "number" == typeof f ? f.toString() : f || ""; f.length < n; )\n                f = p[0] + f;\n              return f;\n            }\n            function h(f, n) {\n              return g(f, n, "0");\n            }\n            function m(f, n) {\n              function p(ya) {\n                return 0 > ya ? -1 : 0 < ya ? 1 : 0;\n              }\n              var y;\n              0 === (y = p(f.getFullYear() - n.getFullYear())) && 0 === (y = p(f.getMonth() - n.getMonth())) && (y = p(f.getDate() - n.getDate()));\n              return y;\n            }\n            function r(f) {\n              switch (f.getDay()) {\n                case 0:\n                  return new Date(f.getFullYear() - 1, 11, 29);\n                case 1:\n                  return f;\n                case 2:\n                  return new Date(f.getFullYear(), 0, 3);\n                case 3:\n                  return new Date(\n                    f.getFullYear(),\n                    0,\n                    2\n                  );\n                case 4:\n                  return new Date(f.getFullYear(), 0, 1);\n                case 5:\n                  return new Date(f.getFullYear() - 1, 11, 31);\n                case 6:\n                  return new Date(f.getFullYear() - 1, 11, 30);\n              }\n            }\n            function w(f) {\n              var n = f.Ga;\n              for (f = new Date(new Date(f.Ha + 1900, 0, 1).getTime()); 0 < n; ) {\n                var p = f.getMonth(), y = (U(f.getFullYear()) ? Fa : Ga)[p];\n                if (n > y - f.getDate())\n                  n -= y - f.getDate() + 1, f.setDate(1), 11 > p ? f.setMonth(p + 1) : (f.setMonth(0), f.setFullYear(f.getFullYear() + 1));\n                else {\n                  f.setDate(f.getDate() + n);\n                  break;\n                }\n              }\n              p = new Date(f.getFullYear() + 1, 0, 4);\n              n = r(new Date(\n                f.getFullYear(),\n                0,\n                4\n              ));\n              p = r(p);\n              return 0 >= m(n, f) ? 0 >= m(p, f) ? f.getFullYear() + 1 : f.getFullYear() : f.getFullYear() - 1;\n            }\n            a >>>= 0;\n            b >>>= 0;\n            c >>>= 0;\n            d >>>= 0;\n            var t = J[d + 40 >>> 2 >>> 0];\n            d = { Ta: I[d >>> 2 >>> 0], Sa: I[d + 4 >>> 2 >>> 0], Ia: I[d + 8 >>> 2 >>> 0], La: I[d + 12 >>> 2 >>> 0], Ja: I[d + 16 >>> 2 >>> 0], Ha: I[d + 20 >>> 2 >>> 0], Ba: I[d + 24 >>> 2 >>> 0], Ga: I[d + 28 >>> 2 >>> 0], Va: I[d + 32 >>> 2 >>> 0], Ra: I[d + 36 >>> 2 >>> 0], Ua: t ? R(t) : "" };\n            c = R(c);\n            t = {\n              "%c": "%a %b %d %H:%M:%S %Y",\n              "%D": "%m/%d/%y",\n              "%F": "%Y-%m-%d",\n              "%h": "%b",\n              "%r": "%I:%M:%S %p",\n              "%R": "%H:%M",\n              "%T": "%H:%M:%S",\n              "%x": "%m/%d/%y",\n              "%X": "%H:%M:%S",\n              "%Ec": "%c",\n              "%EC": "%C",\n              "%Ex": "%m/%d/%y",\n              "%EX": "%H:%M:%S",\n              "%Ey": "%y",\n              "%EY": "%Y",\n              "%Od": "%d",\n              "%Oe": "%e",\n              "%OH": "%H",\n              "%OI": "%I",\n              "%Om": "%m",\n              "%OM": "%M",\n              "%OS": "%S",\n              "%Ou": "%u",\n              "%OU": "%U",\n              "%OV": "%V",\n              "%Ow": "%w",\n              "%OW": "%W",\n              "%Oy": "%y"\n            };\n            for (var u in t)\n              c = c.replace(new RegExp(u, "g"), t[u]);\n            var za = "Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "), Aa = "January February March April May June July August September October November December".split(" ");\n            t = {\n              "%a": (f) => za[f.Ba].substring(0, 3),\n              "%A": (f) => za[f.Ba],\n              "%b": (f) => Aa[f.Ja].substring(0, 3),\n              "%B": (f) => Aa[f.Ja],\n              "%C": (f) => h((f.Ha + 1900) / 100 | 0, 2),\n              "%d": (f) => h(f.La, 2),\n              "%e": (f) => g(f.La, 2, " "),\n              "%g": (f) => w(f).toString().substring(2),\n              "%G": (f) => w(f),\n              "%H": (f) => h(f.Ia, 2),\n              "%I": (f) => {\n                f = f.Ia;\n                0 == f ? f = 12 : 12 < f && (f -= 12);\n                return h(f, 2);\n              },\n              "%j": (f) => {\n                for (var n = 0, p = 0; p <= f.Ja - 1; n += (U(f.Ha + 1900) ? Fa : Ga)[p++])\n                  ;\n                return h(f.La + n, 3);\n              },\n              "%m": (f) => h(f.Ja + 1, 2),\n              "%M": (f) => h(f.Sa, 2),\n              "%n": () => "\\n",\n              "%p": (f) => 0 <= f.Ia && 12 > f.Ia ? "AM" : "PM",\n              "%S": (f) => h(f.Ta, 2),\n              "%t": () => "	",\n              "%u": (f) => f.Ba || 7,\n              "%U": (f) => h(\n                Math.floor((f.Ga + 7 - f.Ba) / 7),\n                2\n              ),\n              "%V": (f) => {\n                var n = Math.floor((f.Ga + 7 - (f.Ba + 6) % 7) / 7);\n                2 >= (f.Ba + 371 - f.Ga - 2) % 7 && n++;\n                if (n)\n                  53 == n && (p = (f.Ba + 371 - f.Ga) % 7, 4 == p || 3 == p && U(f.Ha) || (n = 1));\n                else {\n                  n = 52;\n                  var p = (f.Ba + 7 - f.Ga - 1) % 7;\n                  (4 == p || 5 == p && U(f.Ha % 400 - 1)) && n++;\n                }\n                return h(n, 2);\n              },\n              "%w": (f) => f.Ba,\n              "%W": (f) => h(Math.floor((f.Ga + 7 - (f.Ba + 6) % 7) / 7), 2),\n              "%y": (f) => (f.Ha + 1900).toString().substring(2),\n              "%Y": (f) => f.Ha + 1900,\n              "%z": (f) => {\n                f = f.Ra;\n                var n = 0 <= f;\n                f = Math.abs(f) / 60;\n                return (n ? "+" : "-") + String("0000" + (f / 60 * 100 + f % 60)).slice(-4);\n              },\n              "%Z": (f) => f.Ua,\n              "%%": () => "%"\n            };\n            c = c.replace(/%%/g, "\\0\\0");\n            for (u in t)\n              c.includes(u) && (c = c.replace(new RegExp(u, "g"), t[u](d)));\n            c = c.replace(/\\0\\0/g, "%");\n            u = Ha(c);\n            if (u.length > b)\n              return 0;\n            G.set(u, a >>> 0);\n            return u.length - 1;\n          }\n          var La = { a: function(a, b, c) {\n            a >>>= 0;\n            new ra(a).Ma(b >>> 0, c >>> 0);\n            sa = a;\n            ta++;\n            throw sa;\n          }, e: function() {\n            return 0;\n          }, H: function() {\n          }, x: function() {\n          }, z: function() {\n          }, J: function() {\n            return 0;\n          }, F: function() {\n          }, A: function() {\n          }, E: function() {\n          }, g: function() {\n          }, y: function() {\n          }, v: function() {\n          }, G: function() {\n          }, w: function() {\n          }, k: () => 1, n: function(a, b, c) {\n            a = b + 2097152 >>> 0 < 4194305 - !!a ? (a >>> 0) + 4294967296 * b : NaN;\n            c >>>= 0;\n            a = new Date(1e3 * a);\n            I[c >>> 2 >>> 0] = a.getUTCSeconds();\n            I[c + 4 >>> 2 >>> 0] = a.getUTCMinutes();\n            I[c + 8 >>> 2 >>> 0] = a.getUTCHours();\n            I[c + 12 >>> 2 >>> 0] = a.getUTCDate();\n            I[c + 16 >>> 2 >>> 0] = a.getUTCMonth();\n            I[c + 20 >>> 2 >>> 0] = a.getUTCFullYear() - 1900;\n            I[c + 24 >>> 2 >>> 0] = a.getUTCDay();\n            I[c + 28 >>> 2 >>> 0] = (a.getTime() - Date.UTC(a.getUTCFullYear(), 0, 1, 0, 0, 0, 0)) / 864e5 | 0;\n          }, o: function(a, b, c) {\n            a = b + 2097152 >>> 0 < 4194305 - !!a ? (a >>> 0) + 4294967296 * b : NaN;\n            c >>>= 0;\n            a = new Date(1e3 * a);\n            I[c >>> 2 >>> 0] = a.getSeconds();\n            I[c + 4 >>> 2 >>> 0] = a.getMinutes();\n            I[c + 8 >>> 2 >>> 0] = a.getHours();\n            I[c + 12 >>> 2 >>> 0] = a.getDate();\n            I[c + 16 >>> 2 >>> 0] = a.getMonth();\n            I[c + 20 >>> 2 >>> 0] = a.getFullYear() - 1900;\n            I[c + 24 >>> 2 >>> 0] = a.getDay();\n            I[c + 28 >>> 2 >>> 0] = (U(a.getFullYear()) ? wa : xa)[a.getMonth()] + a.getDate() - 1 | 0;\n            I[c + 36 >>> 2 >>> 0] = -(60 * a.getTimezoneOffset());\n            b = new Date(a.getFullYear(), 6, 1).getTimezoneOffset();\n            var d = new Date(a.getFullYear(), 0, 1).getTimezoneOffset();\n            I[c + 32 >>> 2 >>> 0] = (b != d && a.getTimezoneOffset() == Math.min(d, b)) | 0;\n          }, p: function(a) {\n            a >>>= 0;\n            var b = new Date(I[a + 20 >>> 2 >>> 0] + 1900, I[a + 16 >>> 2 >>> 0], I[a + 12 >>> 2 >>> 0], I[a + 8 >>> 2 >>> 0], I[a + 4 >>> 2 >>> 0], I[a >>> 2 >>> 0], 0), c = I[a + 32 >>> 2 >>> 0], d = b.getTimezoneOffset(), g = new Date(b.getFullYear(), 6, 1).getTimezoneOffset(), h = new Date(b.getFullYear(), 0, 1).getTimezoneOffset(), m = Math.min(h, g);\n            0 > c ? I[a + 32 >>> 2 >>> 0] = Number(g != h && m == d) : 0 < c != (m == d) && (g = Math.max(h, g), b.setTime(b.getTime() + 6e4 * ((0 < c ? m : g) - d)));\n            I[a + 24 >>> 2 >>> 0] = b.getDay();\n            I[a + 28 >>> 2 >>> 0] = (U(b.getFullYear()) ? wa : xa)[b.getMonth()] + b.getDate() - 1 | 0;\n            I[a >>> 2 >>> 0] = b.getSeconds();\n            I[a + 4 >>> 2 >>> 0] = b.getMinutes();\n            I[a + 8 >>> 2 >>> 0] = b.getHours();\n            I[a + 12 >>> 2 >>> 0] = b.getDate();\n            I[a + 16 >>> 2 >>> 0] = b.getMonth();\n            I[a + 20 >>> 2 >>> 0] = b.getYear();\n            a = b.getTime();\n            isNaN(a) ? (I[Ja() >>> 2 >>> 0] = 61, a = -1) : a /= 1e3;\n            return Ka((Q = a, 1 <= +Math.abs(Q) ? 0 < Q ? +Math.floor(Q / 4294967296) >>> 0 : ~~+Math.ceil((Q - +(~~Q >>> 0)) / 4294967296) >>> 0 : 0)), a >>> 0;\n          }, l: function() {\n            return -52;\n          }, m: function() {\n          }, t: function(a, b, c) {\n            function d(w) {\n              return (w = w.toTimeString().match(/\\(([A-Za-z ]+)\\)$/)) ? w[1] : "GMT";\n            }\n            c >>>= 0;\n            var g = (/* @__PURE__ */ new Date()).getFullYear(), h = new Date(g, 0, 1), m = new Date(g, 6, 1);\n            g = h.getTimezoneOffset();\n            var r = m.getTimezoneOffset();\n            J[a >>> 0 >>> 2 >>> 0] = 60 * Math.max(g, r);\n            I[b >>> 0 >>> 2 >>> 0] = Number(g != r);\n            a = d(h);\n            b = d(m);\n            a = Ca(a);\n            b = Ca(b);\n            r < g ? (J[c >>> 2 >>> 0] = a, J[c + 4 >>> 2 >>> 0] = b) : (J[c >>> 2 >>> 0] = b, J[c + 4 >>> 2 >>> 0] = a);\n          }, d: () => {\n            E("");\n          }, B: function(a, b, c) {\n            a >>>= 0;\n            b >>>= 0;\n            c >>>= 0;\n            V.length = 0;\n            for (var d; d = H[b++ >>> 0]; ) {\n              var g = 105 != d;\n              g &= 112 != d;\n              c += g && c % 8 ? 4 : 0;\n              V.push(112 == d ? J[c >>> 2 >>> 0] : 105 == d ? I[c >>> 2 >>> 0] : ha[c >>> 3 >>> 0]);\n              c += g ? 8 : 4;\n            }\n            return qa[a].apply(null, V);\n          }, h: () => Date.now(), u: function() {\n            return 4294901760;\n          }, b: () => performance.now(), I: function(a, b, c) {\n            b >>>= 0;\n            return H.copyWithin(a >>> 0 >>> 0, b >>> 0, b + (c >>> 0) >>> 0);\n          }, s: function(a) {\n            a >>>= 0;\n            var b = H.length;\n            if (4294901760 < a)\n              return false;\n            for (var c = 1; 4 >= c; c *= 2) {\n              var d = b * (1 + 0.2 / c);\n              d = Math.min(d, a + 100663296);\n              var g = Math;\n              d = Math.max(a, d);\n              a: {\n                g = (g.min.call(g, 4294901760, d + (65536 - d % 65536) % 65536) - F.buffer.byteLength + 65535) / 65536;\n                try {\n                  F.grow(g);\n                  ia();\n                  var h = 1;\n                  break a;\n                } catch (m) {\n                }\n                h = void 0;\n              }\n              if (h)\n                return true;\n            }\n            return false;\n          }, C: function(a, b) {\n            a >>>= 0;\n            b >>>= 0;\n            var c = 0;\n            Da().forEach((d, g) => {\n              var h = b + c;\n              g = J[a + 4 * g >>> 2 >>> 0] = h;\n              for (h = 0; h < d.length; ++h)\n                G[g++ >>> 0 >>> 0] = d.charCodeAt(h);\n              G[g >>> 0 >>> 0] = 0;\n              c += d.length + 1;\n            });\n            return 0;\n          }, D: function(a, b) {\n            a >>>= 0;\n            b >>>= 0;\n            var c = Da();\n            J[a >>> 2 >>> 0] = c.length;\n            var d = 0;\n            c.forEach((g) => d += g.length + 1);\n            J[b >>> 2 >>> 0] = d;\n            return 0;\n          }, f: () => 52, j: function() {\n            return 52;\n          }, q: function() {\n            return 70;\n          }, i: function(a, b, c, d) {\n            b >>>= 0;\n            c >>>= 0;\n            d >>>= 0;\n            for (var g = 0, h = 0; h < c; h++) {\n              var m = J[b >>> 2 >>> 0], r = J[b + 4 >>> 2 >>> 0];\n              b += 8;\n              for (var w = 0; w < r; w++) {\n                var t = H[m + w >>> 0], u = Ea[a];\n                0 === t || 10 === t ? ((1 === a ? ea : D)(va(u, 0)), u.length = 0) : u.push(t);\n              }\n              g += r;\n            }\n            J[d >>> 2 >>> 0] = g;\n            return 0;\n          }, r: Ia, c: function(a, b, c, d) {\n            return Ia(a >>> 0, b >>> 0, c >>> 0, d >>> 0);\n          } }, Y = function() {\n            function a(c) {\n              Y = c.exports;\n              Y = Ma();\n              F = Y.K;\n              ia();\n              L.unshift(Y.L);\n              M--;\n              0 == M && (null !== N && (clearInterval(N), N = null), O && (c = O, O = null, c()));\n              return Y;\n            }\n            var b = { a: La };\n            M++;\n            if (e.instantiateWasm)\n              try {\n                return e.instantiateWasm(b, a);\n              } catch (c) {\n                D(`Module.instantiateWasm callback failed with error: ${c}`), l(c);\n              }\n            pa(b, function(c) {\n              a(c.instance);\n            }).catch(l);\n            return {};\n          }();\n          e._OrtInit = (a, b) => (e._OrtInit = Y.M)(a, b);\n          e._OrtGetLastError = (a, b) => (e._OrtGetLastError = Y.N)(a, b);\n          e._OrtCreateSessionOptions = (a, b, c, d, g, h, m, r, w, t) => (e._OrtCreateSessionOptions = Y.O)(a, b, c, d, g, h, m, r, w, t);\n          e._OrtAppendExecutionProvider = (a, b) => (e._OrtAppendExecutionProvider = Y.P)(a, b);\n          e._OrtAddFreeDimensionOverride = (a, b, c) => (e._OrtAddFreeDimensionOverride = Y.Q)(a, b, c);\n          e._OrtAddSessionConfigEntry = (a, b, c) => (e._OrtAddSessionConfigEntry = Y.R)(a, b, c);\n          e._OrtReleaseSessionOptions = (a) => (e._OrtReleaseSessionOptions = Y.S)(a);\n          e._OrtCreateSession = (a, b, c) => (e._OrtCreateSession = Y.T)(a, b, c);\n          e._OrtReleaseSession = (a) => (e._OrtReleaseSession = Y.U)(a);\n          e._OrtGetInputOutputCount = (a, b, c) => (e._OrtGetInputOutputCount = Y.V)(a, b, c);\n          e._OrtGetInputName = (a, b) => (e._OrtGetInputName = Y.W)(a, b);\n          e._OrtGetOutputName = (a, b) => (e._OrtGetOutputName = Y.X)(a, b);\n          e._OrtFree = (a) => (e._OrtFree = Y.Y)(a);\n          e._OrtCreateTensor = (a, b, c, d, g, h) => (e._OrtCreateTensor = Y.Z)(a, b, c, d, g, h);\n          e._OrtGetTensorData = (a, b, c, d, g) => (e._OrtGetTensorData = Y._)(a, b, c, d, g);\n          e._OrtReleaseTensor = (a) => (e._OrtReleaseTensor = Y.$)(a);\n          e._OrtCreateRunOptions = (a, b, c, d) => (e._OrtCreateRunOptions = Y.aa)(a, b, c, d);\n          e._OrtAddRunConfigEntry = (a, b, c) => (e._OrtAddRunConfigEntry = Y.ba)(a, b, c);\n          e._OrtReleaseRunOptions = (a) => (e._OrtReleaseRunOptions = Y.ca)(a);\n          e._OrtCreateBinding = (a) => (e._OrtCreateBinding = Y.da)(a);\n          e._OrtBindInput = (a, b, c) => (e._OrtBindInput = Y.ea)(a, b, c);\n          e._OrtBindOutput = (a, b, c, d) => (e._OrtBindOutput = Y.fa)(a, b, c, d);\n          e._OrtClearBoundOutputs = (a) => (e._OrtClearBoundOutputs = Y.ga)(a);\n          e._OrtReleaseBinding = (a) => (e._OrtReleaseBinding = Y.ha)(a);\n          e._OrtRunWithBinding = (a, b, c, d, g) => (e._OrtRunWithBinding = Y.ia)(a, b, c, d, g);\n          e._OrtRun = (a, b, c, d, g, h, m, r) => (e._OrtRun = Y.ja)(a, b, c, d, g, h, m, r);\n          e._OrtEndProfiling = (a) => (e._OrtEndProfiling = Y.ka)(a);\n          e._OrtTrainingLoadCheckpoint = (a, b) => (e._OrtTrainingLoadCheckpoint = Y.la)(a, b);\n          e._OrtTrainingReleaseCheckpoint = (a) => (e._OrtTrainingReleaseCheckpoint = Y.ma)(a);\n          e._OrtTrainingCreateSession = (a, b, c, d, g, h, m, r) => (e._OrtTrainingCreateSession = Y.na)(a, b, c, d, g, h, m, r);\n          e._OrtTrainingLazyResetGrad = (a) => (e._OrtTrainingLazyResetGrad = Y.oa)(a);\n          e._OrtTrainingRunTrainStep = (a, b, c, d, g, h) => (e._OrtTrainingRunTrainStep = Y.pa)(a, b, c, d, g, h);\n          e._OrtTrainingOptimizerStep = (a, b) => (e._OrtTrainingOptimizerStep = Y.qa)(a, b);\n          e._OrtTrainingEvalStep = (a, b, c, d, g, h) => (e._OrtTrainingEvalStep = Y.ra)(a, b, c, d, g, h);\n          e._OrtTrainingGetParametersSize = (a, b, c) => (e._OrtTrainingGetParametersSize = Y.sa)(a, b, c);\n          e._OrtTrainingCopyParametersToBuffer = (a, b, c, d) => (e._OrtTrainingCopyParametersToBuffer = Y.ta)(a, b, c, d);\n          e._OrtTrainingCopyParametersFromBuffer = (a, b, c, d) => (e._OrtTrainingCopyParametersFromBuffer = Y.ua)(a, b, c, d);\n          e._OrtTrainingGetModelInputOutputCount = (a, b, c, d) => (e._OrtTrainingGetModelInputOutputCount = Y.va)(a, b, c, d);\n          e._OrtTrainingGetModelInputOutputName = (a, b, c, d) => (e._OrtTrainingGetModelInputOutputName = Y.wa)(a, b, c, d);\n          e._OrtTrainingReleaseSession = (a) => (e._OrtTrainingReleaseSession = Y.xa)(a);\n          var Ja = () => (Ja = Y.ya)(), Ba = e._malloc = (a) => (Ba = e._malloc = Y.za)(a);\n          e._free = (a) => (e._free = Y.Aa)(a);\n          var Ka = (a) => (Ka = Y.Ca)(a), Na = () => (Na = Y.Da)(), Oa = (a) => (Oa = Y.Ea)(a), Pa = (a) => (Pa = Y.Fa)(a);\n          function Ma() {\n            var a = Y;\n            a = Object.assign({}, a);\n            var b = (d) => () => d() >>> 0, c = (d) => (g) => d(g) >>> 0;\n            a.ya = b(a.ya);\n            a.za = c(a.za);\n            a.Da = b(a.Da);\n            a.Fa = c(a.Fa);\n            return a;\n          }\n          e.stackAlloc = Pa;\n          e.stackSave = Na;\n          e.stackRestore = Oa;\n          e.UTF8ToString = R;\n          e.stringToUTF8 = (a, b, c) => T(a, H, b, c);\n          e.lengthBytesUTF8 = S;\n          var Z;\n          O = function Qa() {\n            Z || Ra();\n            Z || (O = Qa);\n          };\n          function Ra() {\n            if (!(0 < M)) {\n              if (e.preRun)\n                for ("function" == typeof e.preRun && (e.preRun = [e.preRun]); e.preRun.length; ) {\n                  var a = e.preRun.shift();\n                  K.unshift(a);\n                }\n              for (; 0 < K.length; )\n                K.shift()(e);\n              if (!(0 < M || Z || (Z = true, e.calledRun = true, fa))) {\n                for (; 0 < L.length; )\n                  L.shift()(e);\n                for (k(e); 0 < ja.length; )\n                  ja.shift()(e);\n              }\n            }\n          }\n          Ra();\n          return moduleArg.ready;\n        };\n      })();\n      if (typeof exports === "object" && typeof module === "object")\n        module.exports = ortWasm;\n      else if (typeof define === "function" && define["amd"])\n        define([], () => ortWasm);\n    }\n  });\n\n  // nodejs-ignore:worker_threads\n  var require_worker_threads = __commonJS({\n    "nodejs-ignore:worker_threads"() {\n    }\n  });\n\n  // nodejs-ignore:perf_hooks\n  var require_perf_hooks = __commonJS({\n    "nodejs-ignore:perf_hooks"() {\n    }\n  });\n\n  // nodejs-ignore:os\n  var os_exports = {};\n  __export(os_exports, {\n    cpus: () => cpus\n  });\n  var cpus;\n  var init_os = __esm({\n    "nodejs-ignore:os"() {\n      cpus = void 0;\n    }\n  });\n\n  // web/lib/wasm/binding/ort-wasm-threaded.js\n  var require_ort_wasm_threaded = __commonJS({\n    "web/lib/wasm/binding/ort-wasm-threaded.js"(exports, module) {\n      "use strict";\n      var ortWasmThreaded = (() => {\n        var _scriptDir = typeof document !== "undefined" && document.currentScript ? document.currentScript.src : void 0;\n        if (typeof __filename !== "undefined")\n          _scriptDir = _scriptDir || __filename;\n        return function(moduleArg = {}) {\n          function aa() {\n            e.buffer != l.buffer && m();\n            return l;\n          }\n          function n() {\n            e.buffer != l.buffer && m();\n            return ba;\n          }\n          function p() {\n            e.buffer != l.buffer && m();\n            return ca;\n          }\n          function r() {\n            e.buffer != l.buffer && m();\n            return da;\n          }\n          function ea() {\n            e.buffer != l.buffer && m();\n            return fa;\n          }\n          var v = moduleArg, ha, x;\n          v.ready = new Promise((a, b) => {\n            ha = a;\n            x = b;\n          });\n          var ia = Object.assign({}, v), ja = "./this.program", z = (a, b) => {\n            throw b;\n          }, ka = "object" == typeof window, A = "function" == typeof importScripts, B = "object" == typeof process && "object" == typeof process.versions && "string" == typeof process.versions.node, D = v.ENVIRONMENT_IS_PTHREAD || false, E = "";\n          function la(a) {\n            return v.locateFile ? v.locateFile(a, E) : E + a;\n          }\n          var ma, G, H;\n          if (B) {\n            var fs = (init_fs(), __toCommonJS(fs_exports)), na = (init_path(), __toCommonJS(path_exports));\n            E = A ? na.dirname(E) + "/" : __dirname + "/";\n            ma = (b, c) => {\n              b = I(b) ? new URL(b) : na.normalize(b);\n              return fs.readFileSync(b, c ? void 0 : "utf8");\n            };\n            H = (b) => {\n              b = ma(b, true);\n              b.buffer || (b = new Uint8Array(b));\n              return b;\n            };\n            G = (b, c, d, g = true) => {\n              b = I(b) ? new URL(b) : na.normalize(b);\n              fs.readFile(b, g ? void 0 : "utf8", (h, k) => {\n                h ? d(h) : c(g ? k.buffer : k);\n              });\n            };\n            !v.thisProgram && 1 < process.argv.length && (ja = process.argv[1].replace(/\\\\/g, "/"));\n            process.argv.slice(2);\n            z = (b, c) => {\n              process.exitCode = b;\n              throw c;\n            };\n            v.inspect = () => "[Emscripten Module object]";\n            let a;\n            try {\n              a = require_worker_threads();\n            } catch (b) {\n              throw console.error(\'The "worker_threads" module is not supported in this node.js build - perhaps a newer version is needed?\'), b;\n            }\n            global.Worker = a.Worker;\n          } else if (ka || A)\n            A ? E = self.location.href : "undefined" != typeof document && document.currentScript && (E = document.currentScript.src), typeof _scriptDir !== "undefined" && _scriptDir && (E = _scriptDir), 0 !== E.indexOf("blob:") ? E = E.substr(0, E.replace(/[?#].*/, "").lastIndexOf("/") + 1) : E = "", B || (ma = (a) => {\n              var b = new XMLHttpRequest();\n              b.open("GET", a, false);\n              b.send(null);\n              return b.responseText;\n            }, A && (H = (a) => {\n              var b = new XMLHttpRequest();\n              b.open("GET", a, false);\n              b.responseType = "arraybuffer";\n              b.send(null);\n              return new Uint8Array(b.response);\n            }), G = (a, b, c) => {\n              var d = new XMLHttpRequest();\n              d.open("GET", a, true);\n              d.responseType = "arraybuffer";\n              d.onload = () => {\n                200 == d.status || 0 == d.status && d.response ? b(d.response) : c();\n              };\n              d.onerror = c;\n              d.send(null);\n            });\n          B && "undefined" == typeof performance && (global.performance = require_perf_hooks().performance);\n          var oa = console.log.bind(console), pa = console.error.bind(console);\n          B && (oa = (...a) => fs.writeSync(1, a.join(" ") + "\\n"), pa = (...a) => fs.writeSync(2, a.join(" ") + "\\n"));\n          var qa = oa, J = pa;\n          Object.assign(v, ia);\n          ia = null;\n          "object" != typeof WebAssembly && ra("no native wasm support detected");\n          var e, sa, K = false, L, l, ba, ca, da, fa;\n          function m() {\n            var a = e.buffer;\n            v.HEAP8 = l = new Int8Array(a);\n            v.HEAP16 = new Int16Array(a);\n            v.HEAPU8 = ba = new Uint8Array(a);\n            v.HEAPU16 = new Uint16Array(a);\n            v.HEAP32 = ca = new Int32Array(a);\n            v.HEAPU32 = da = new Uint32Array(a);\n            v.HEAPF32 = new Float32Array(a);\n            v.HEAPF64 = fa = new Float64Array(a);\n          }\n          var ta = 16777216;\n          if (D)\n            e = v.wasmMemory;\n          else if (v.wasmMemory)\n            e = v.wasmMemory;\n          else if (e = new WebAssembly.Memory({ initial: ta / 65536, maximum: 65536, shared: true }), !(e.buffer instanceof SharedArrayBuffer))\n            throw J("requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag"), B && J("(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and/or recent version)"), Error("bad memory");\n          m();\n          ta = e.buffer.byteLength;\n          var ua = [], va = [], wa = [], M = 0, xa = null, N = null;\n          function ya() {\n            M--;\n            if (0 == M && (null !== xa && (clearInterval(xa), xa = null), N)) {\n              var a = N;\n              N = null;\n              a();\n            }\n          }\n          function ra(a) {\n            a = "Aborted(" + a + ")";\n            J(a);\n            K = true;\n            L = 1;\n            a = new WebAssembly.RuntimeError(a + ". Build with -sASSERTIONS for more info.");\n            x(a);\n            throw a;\n          }\n          var za = (a) => a.startsWith("data:application/octet-stream;base64,"), I = (a) => a.startsWith("file://"), O;\n          O = "ort-wasm-threaded.wasm";\n          za(O) || (O = la(O));\n          function Aa(a) {\n            if (H)\n              return H(a);\n            throw "both async and sync fetching of the wasm failed";\n          }\n          function Ba(a) {\n            if (ka || A) {\n              if ("function" == typeof fetch && !I(a))\n                return fetch(a, { credentials: "same-origin" }).then((b) => {\n                  if (!b.ok)\n                    throw "failed to load wasm binary file at \'" + a + "\'";\n                  return b.arrayBuffer();\n                }).catch(() => Aa(a));\n              if (G)\n                return new Promise((b, c) => {\n                  G(a, (d) => b(new Uint8Array(d)), c);\n                });\n            }\n            return Promise.resolve().then(() => Aa(a));\n          }\n          function Ca(a, b, c) {\n            return Ba(a).then((d) => WebAssembly.instantiate(d, b)).then((d) => d).then(c, (d) => {\n              J(`failed to asynchronously prepare wasm: ${d}`);\n              ra(d);\n            });\n          }\n          function Da(a, b) {\n            var c = O;\n            return "function" != typeof WebAssembly.instantiateStreaming || za(c) || I(c) || B || "function" != typeof fetch ? Ca(c, a, b) : fetch(c, { credentials: "same-origin" }).then((d) => WebAssembly.instantiateStreaming(d, a).then(b, function(g) {\n              J(`wasm streaming compile failed: ${g}`);\n              J("falling back to ArrayBuffer instantiation");\n              return Ca(c, a, b);\n            }));\n          }\n          var P, Ea = { 922380: (a, b, c, d) => {\n            if ("undefined" == typeof v || !v.cb)\n              return 1;\n            a = Q(a >>> 0);\n            a.startsWith("./") && (a = a.substring(2));\n            a = v.cb.get(a);\n            if (!a)\n              return 2;\n            b >>>= 0;\n            c >>>= 0;\n            d >>>= 0;\n            if (b + c > a.byteLength)\n              return 3;\n            try {\n              return n().set(a.subarray(b, b + c), d >>> 0), 0;\n            } catch {\n              return 4;\n            }\n          } };\n          function R(a) {\n            this.name = "ExitStatus";\n            this.message = `Program terminated with exit(${a})`;\n            this.status = a;\n          }\n          var Fa = (a) => {\n            a.terminate();\n            a.onmessage = () => {\n            };\n          }, Ha = (a) => {\n            0 == S.Pa.length && (Ga(), S.Ya(S.Pa[0]));\n            var b = S.Pa.pop();\n            if (!b)\n              return 6;\n            S.Qa.push(b);\n            S.Ma[a.Oa] = b;\n            b.Oa = a.Oa;\n            var c = { cmd: "run", start_routine: a.kb, arg: a.hb, pthread_ptr: a.Oa };\n            B && b.unref();\n            b.postMessage(c, a.qb);\n            return 0;\n          }, T = 0, Ia = "undefined" != typeof TextDecoder ? new TextDecoder("utf8") : void 0, Ja = (a, b, c) => {\n            b >>>= 0;\n            var d = b + c;\n            for (c = b; a[c] && !(c >= d); )\n              ++c;\n            if (16 < c - b && a.buffer && Ia)\n              return Ia.decode(a.buffer instanceof SharedArrayBuffer ? a.slice(b, c) : a.subarray(b, c));\n            for (d = ""; b < c; ) {\n              var g = a[b++];\n              if (g & 128) {\n                var h = a[b++] & 63;\n                if (192 == (g & 224))\n                  d += String.fromCharCode((g & 31) << 6 | h);\n                else {\n                  var k = a[b++] & 63;\n                  g = 224 == (g & 240) ? (g & 15) << 12 | h << 6 | k : (g & 7) << 18 | h << 12 | k << 6 | a[b++] & 63;\n                  65536 > g ? d += String.fromCharCode(g) : (g -= 65536, d += String.fromCharCode(55296 | g >> 10, 56320 | g & 1023));\n                }\n              } else\n                d += String.fromCharCode(g);\n            }\n            return d;\n          }, Q = (a, b) => (a >>>= 0) ? Ja(n(), a, b) : "", La = (a) => {\n            var b = Ka();\n            a = a();\n            U(b);\n            return a;\n          };\n          function V(a, b) {\n            var c = arguments.length - 2, d = arguments;\n            return La(() => {\n              for (var g = Ma(8 * c), h = g >>> 3, k = 0; k < c; k++) {\n                var t = d[2 + k];\n                ea()[h + k >>> 0] = t;\n              }\n              return Na(a, c, g, b);\n            });\n          }\n          function Oa(a) {\n            if (D)\n              return V(0, 1, a);\n            L = a;\n            0 < T || (S.lb(), v.onExit?.(a), K = true);\n            z(a, new R(a));\n          }\n          var Qa = (a) => {\n            L = a;\n            if (D)\n              throw Pa(a), "unwind";\n            Oa(a);\n          };\n          function Ra() {\n            for (var a = v.numThreads; a--; )\n              Ga();\n            ua.unshift(() => {\n              M++;\n              Sa(() => ya());\n            });\n          }\n          function Ga() {\n            var a = la("ort-wasm-threaded.worker.js");\n            a = new Worker(a);\n            S.Pa.push(a);\n          }\n          function Sa(a) {\n            D ? a() : Promise.all(S.Pa.map(S.Ya)).then(a);\n          }\n          var S = { Pa: [], Qa: [], bb: [], Ma: {}, Wa() {\n            D ? (S.receiveObjectTransfer = S.jb, S.threadInitTLS = S.ab, S.setExitStatus = S.$a) : Ra();\n          }, $a: (a) => L = a, tb: ["$terminateWorker"], lb: () => {\n            for (var a of S.Qa)\n              Fa(a);\n            for (a of S.Pa)\n              Fa(a);\n            S.Pa = [];\n            S.Qa = [];\n            S.Ma = [];\n          }, Za: (a) => {\n            var b = a.Oa;\n            delete S.Ma[b];\n            S.Pa.push(a);\n            S.Qa.splice(S.Qa.indexOf(a), 1);\n            a.Oa = 0;\n            Ta(b);\n          }, jb() {\n          }, ab() {\n            S.bb.forEach((a) => a());\n          }, Ya: (a) => new Promise((b) => {\n            a.onmessage = (h) => {\n              h = h.data;\n              var k = h.cmd;\n              if (h.targetThread && h.targetThread != W()) {\n                var t = S.Ma[h.targetThread];\n                t ? t.postMessage(h, h.transferList) : J(`Internal error! Worker sent a message "${k}" to target pthread ${h.targetThread}, but that thread no longer exists!`);\n              } else if ("checkMailbox" === k)\n                X();\n              else if ("spawnThread" === k)\n                Ha(h);\n              else if ("cleanupThread" === k)\n                S.Za(S.Ma[h.thread]);\n              else if ("killThread" === k)\n                h = h.thread, k = S.Ma[h], delete S.Ma[h], Fa(k), Ta(h), S.Qa.splice(S.Qa.indexOf(k), 1), k.Oa = 0;\n              else if ("cancelThread" === k)\n                S.Ma[h.thread].postMessage({ cmd: "cancel" });\n              else if ("loaded" === k)\n                a.loaded = true, B && !a.Oa && a.unref(), b(a);\n              else if ("alert" === k)\n                alert(`Thread ${h.threadId}: ${h.text}`);\n              else if ("setimmediate" === h.target)\n                a.postMessage(h);\n              else if ("callHandler" === k)\n                v[h.handler](...h.args);\n              else\n                k && J(`worker sent an unknown command ${k}`);\n            };\n            a.onerror = (h) => {\n              J(`${"worker sent an error!"} ${h.filename}:${h.lineno}: ${h.message}`);\n              throw h;\n            };\n            B && (a.on("message", (h) => a.onmessage({ data: h })), a.on("error", (h) => a.onerror(h)));\n            var c = [], d = ["onExit"], g;\n            for (g of d)\n              v.hasOwnProperty(g) && c.push(g);\n            a.postMessage({ cmd: "load", handlers: c, urlOrBlob: v.mainScriptUrlOrBlob || _scriptDir, wasmMemory: e, wasmModule: sa });\n          }) };\n          v.PThread = S;\n          var Ua = (a) => {\n            for (; 0 < a.length; )\n              a.shift()(v);\n          };\n          v.establishStackSpace = () => {\n            var a = W(), b = r()[a + 52 >>> 2 >>> 0];\n            a = r()[a + 56 >>> 2 >>> 0];\n            Va(b, b - a);\n            U(b);\n          };\n          function Pa(a) {\n            if (D)\n              return V(1, 0, a);\n            Qa(a);\n          }\n          var Wa = [], Xa;\n          v.invokeEntryPoint = (a, b) => {\n            var c = Wa[a];\n            c || (a >= Wa.length && (Wa.length = a + 1), Wa[a] = c = Xa.get(a));\n            a = c(b);\n            0 < T ? S.$a(a) : Ya(a);\n          };\n          function Za(a) {\n            this.Va = a - 24;\n            this.gb = function(b) {\n              r()[this.Va + 4 >>> 2 >>> 0] = b;\n            };\n            this.fb = function(b) {\n              r()[this.Va + 8 >>> 2 >>> 0] = b;\n            };\n            this.Wa = function(b, c) {\n              this.eb();\n              this.gb(b);\n              this.fb(c);\n            };\n            this.eb = function() {\n              r()[this.Va + 16 >>> 2 >>> 0] = 0;\n            };\n          }\n          var $a = 0, ab = 0;\n          function bb(a, b, c, d) {\n            return D ? V(2, 1, a, b, c, d) : cb(a, b, c, d);\n          }\n          function cb(a, b, c, d) {\n            a >>>= 0;\n            b >>>= 0;\n            c >>>= 0;\n            d >>>= 0;\n            if ("undefined" == typeof SharedArrayBuffer)\n              return J("Current environment does not support SharedArrayBuffer, pthreads are not available!"), 6;\n            var g = [];\n            if (D && 0 === g.length)\n              return bb(a, b, c, d);\n            a = { kb: c, Oa: a, hb: d, qb: g };\n            return D ? (a.sb = "spawnThread", postMessage(a, g), 0) : Ha(a);\n          }\n          function db(a, b, c) {\n            return D ? V(3, 1, a, b, c) : 0;\n          }\n          function eb(a, b) {\n            if (D)\n              return V(4, 1, a, b);\n          }\n          var fb = (a) => {\n            for (var b = 0, c = 0; c < a.length; ++c) {\n              var d = a.charCodeAt(c);\n              127 >= d ? b++ : 2047 >= d ? b += 2 : 55296 <= d && 57343 >= d ? (b += 4, ++c) : b += 3;\n            }\n            return b;\n          }, gb = (a, b, c, d) => {\n            c >>>= 0;\n            if (!(0 < d))\n              return 0;\n            var g = c;\n            d = c + d - 1;\n            for (var h = 0; h < a.length; ++h) {\n              var k = a.charCodeAt(h);\n              if (55296 <= k && 57343 >= k) {\n                var t = a.charCodeAt(++h);\n                k = 65536 + ((k & 1023) << 10) | t & 1023;\n              }\n              if (127 >= k) {\n                if (c >= d)\n                  break;\n                b[c++ >>> 0] = k;\n              } else {\n                if (2047 >= k) {\n                  if (c + 1 >= d)\n                    break;\n                  b[c++ >>> 0] = 192 | k >> 6;\n                } else {\n                  if (65535 >= k) {\n                    if (c + 2 >= d)\n                      break;\n                    b[c++ >>> 0] = 224 | k >> 12;\n                  } else {\n                    if (c + 3 >= d)\n                      break;\n                    b[c++ >>> 0] = 240 | k >> 18;\n                    b[c++ >>> 0] = 128 | k >> 12 & 63;\n                  }\n                  b[c++ >>> 0] = 128 | k >> 6 & 63;\n                }\n                b[c++ >>> 0] = 128 | k & 63;\n              }\n            }\n            b[c >>> 0] = 0;\n            return c - g;\n          }, hb = (a, b, c) => gb(a, n(), b, c);\n          function ib(a, b) {\n            if (D)\n              return V(5, 1, a, b);\n          }\n          function jb(a, b, c) {\n            if (D)\n              return V(6, 1, a, b, c);\n          }\n          function kb(a, b, c) {\n            return D ? V(7, 1, a, b, c) : 0;\n          }\n          function lb(a, b) {\n            if (D)\n              return V(8, 1, a, b);\n          }\n          function mb(a, b, c) {\n            if (D)\n              return V(9, 1, a, b, c);\n          }\n          function nb(a, b, c, d) {\n            if (D)\n              return V(10, 1, a, b, c, d);\n          }\n          function ob(a, b, c, d) {\n            if (D)\n              return V(11, 1, a, b, c, d);\n          }\n          function pb(a, b, c, d) {\n            if (D)\n              return V(12, 1, a, b, c, d);\n          }\n          function qb(a) {\n            if (D)\n              return V(13, 1, a);\n          }\n          function rb(a, b) {\n            if (D)\n              return V(14, 1, a, b);\n          }\n          function sb(a, b, c) {\n            if (D)\n              return V(15, 1, a, b, c);\n          }\n          function tb(a) {\n            a >>>= 0;\n            "function" === typeof Atomics.rb && (Atomics.rb(p(), a >>> 2, a).value.then(X), a += 128, Atomics.store(p(), a >>> 2, 1));\n          }\n          v.__emscripten_thread_mailbox_await = tb;\n          var X = () => {\n            var a = W();\n            if (a && (tb(a), a = ub, !K))\n              try {\n                if (a(), !(0 < T))\n                  try {\n                    D ? Ya(L) : Qa(L);\n                  } catch (b) {\n                    b instanceof R || "unwind" == b || z(1, b);\n                  }\n              } catch (b) {\n                b instanceof R || "unwind" == b || z(1, b);\n              }\n          };\n          v.checkMailbox = X;\n          var vb = [], Y = (a) => 0 === a % 4 && (0 !== a % 100 || 0 === a % 400), wb = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335], xb = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];\n          function yb(a, b, c, d, g, h, k, t) {\n            return D ? V(16, 1, a, b, c, d, g, h, k, t) : -52;\n          }\n          function zb(a, b, c, d, g, h, k) {\n            if (D)\n              return V(17, 1, a, b, c, d, g, h, k);\n          }\n          var Bb = (a) => {\n            var b = fb(a) + 1, c = Ab(b);\n            c && hb(a, c, b);\n            return c;\n          }, Cb = [], Db = {}, Fb = () => {\n            if (!Eb) {\n              var a = { USER: "web_user", LOGNAME: "web_user", PATH: "/", PWD: "/", HOME: "/home/web_user", LANG: ("object" == typeof navigator && navigator.languages && navigator.languages[0] || "C").replace("-", "_") + ".UTF-8", _: ja || "./this.program" }, b;\n              for (b in Db)\n                void 0 === Db[b] ? delete a[b] : a[b] = Db[b];\n              var c = [];\n              for (b in a)\n                c.push(`${b}=${a[b]}`);\n              Eb = c;\n            }\n            return Eb;\n          }, Eb;\n          function Gb(a, b) {\n            if (D)\n              return V(18, 1, a, b);\n            a >>>= 0;\n            b >>>= 0;\n            var c = 0;\n            Fb().forEach((d, g) => {\n              var h = b + c;\n              g = r()[a + 4 * g >>> 2 >>> 0] = h;\n              for (h = 0; h < d.length; ++h)\n                aa()[g++ >>> 0 >>> 0] = d.charCodeAt(h);\n              aa()[g >>> 0 >>> 0] = 0;\n              c += d.length + 1;\n            });\n            return 0;\n          }\n          function Kb(a, b) {\n            if (D)\n              return V(19, 1, a, b);\n            a >>>= 0;\n            b >>>= 0;\n            var c = Fb();\n            r()[a >>> 2 >>> 0] = c.length;\n            var d = 0;\n            c.forEach((g) => d += g.length + 1);\n            r()[b >>> 2 >>> 0] = d;\n            return 0;\n          }\n          function Lb(a) {\n            return D ? V(20, 1, a) : 52;\n          }\n          function Mb(a, b, c, d) {\n            return D ? V(21, 1, a, b, c, d) : 52;\n          }\n          function Nb(a, b, c, d, g) {\n            return D ? V(22, 1, a, b, c, d, g) : 70;\n          }\n          var Ob = [null, [], []];\n          function Pb(a, b, c, d) {\n            if (D)\n              return V(23, 1, a, b, c, d);\n            b >>>= 0;\n            c >>>= 0;\n            d >>>= 0;\n            for (var g = 0, h = 0; h < c; h++) {\n              var k = r()[b >>> 2 >>> 0], t = r()[b + 4 >>> 2 >>> 0];\n              b += 8;\n              for (var C = 0; C < t; C++) {\n                var w = n()[k + C >>> 0], y = Ob[a];\n                0 === w || 10 === w ? ((1 === a ? qa : J)(Ja(y, 0)), y.length = 0) : y.push(w);\n              }\n              g += t;\n            }\n            r()[d >>> 2 >>> 0] = g;\n            return 0;\n          }\n          var Qb = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], Rb = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n          function Sb(a) {\n            var b = Array(fb(a) + 1);\n            gb(a, b, 0, b.length);\n            return b;\n          }\n          var Tb = (a, b) => {\n            aa().set(a, b >>> 0);\n          };\n          function Ub(a, b, c, d) {\n            function g(f, q, u) {\n              for (f = "number" == typeof f ? f.toString() : f || ""; f.length < q; )\n                f = u[0] + f;\n              return f;\n            }\n            function h(f, q) {\n              return g(f, q, "0");\n            }\n            function k(f, q) {\n              function u(Hb) {\n                return 0 > Hb ? -1 : 0 < Hb ? 1 : 0;\n              }\n              var F;\n              0 === (F = u(f.getFullYear() - q.getFullYear())) && 0 === (F = u(f.getMonth() - q.getMonth())) && (F = u(f.getDate() - q.getDate()));\n              return F;\n            }\n            function t(f) {\n              switch (f.getDay()) {\n                case 0:\n                  return new Date(f.getFullYear() - 1, 11, 29);\n                case 1:\n                  return f;\n                case 2:\n                  return new Date(f.getFullYear(), 0, 3);\n                case 3:\n                  return new Date(\n                    f.getFullYear(),\n                    0,\n                    2\n                  );\n                case 4:\n                  return new Date(f.getFullYear(), 0, 1);\n                case 5:\n                  return new Date(f.getFullYear() - 1, 11, 31);\n                case 6:\n                  return new Date(f.getFullYear() - 1, 11, 30);\n              }\n            }\n            function C(f) {\n              var q = f.Ra;\n              for (f = new Date(new Date(f.Sa + 1900, 0, 1).getTime()); 0 < q; ) {\n                var u = f.getMonth(), F = (Y(f.getFullYear()) ? Qb : Rb)[u];\n                if (q > F - f.getDate())\n                  q -= F - f.getDate() + 1, f.setDate(1), 11 > u ? f.setMonth(u + 1) : (f.setMonth(0), f.setFullYear(f.getFullYear() + 1));\n                else {\n                  f.setDate(f.getDate() + q);\n                  break;\n                }\n              }\n              u = new Date(f.getFullYear() + 1, 0, 4);\n              q = t(new Date(\n                f.getFullYear(),\n                0,\n                4\n              ));\n              u = t(u);\n              return 0 >= k(q, f) ? 0 >= k(u, f) ? f.getFullYear() + 1 : f.getFullYear() : f.getFullYear() - 1;\n            }\n            a >>>= 0;\n            b >>>= 0;\n            c >>>= 0;\n            d >>>= 0;\n            var w = r()[d + 40 >>> 2 >>> 0];\n            d = { ob: p()[d >>> 2 >>> 0], nb: p()[d + 4 >>> 2 >>> 0], Ta: p()[d + 8 >>> 2 >>> 0], Xa: p()[d + 12 >>> 2 >>> 0], Ua: p()[d + 16 >>> 2 >>> 0], Sa: p()[d + 20 >>> 2 >>> 0], Na: p()[d + 24 >>> 2 >>> 0], Ra: p()[d + 28 >>> 2 >>> 0], ub: p()[d + 32 >>> 2 >>> 0], mb: p()[d + 36 >>> 2 >>> 0], pb: w ? Q(w) : "" };\n            c = Q(c);\n            w = {\n              "%c": "%a %b %d %H:%M:%S %Y",\n              "%D": "%m/%d/%y",\n              "%F": "%Y-%m-%d",\n              "%h": "%b",\n              "%r": "%I:%M:%S %p",\n              "%R": "%H:%M",\n              "%T": "%H:%M:%S",\n              "%x": "%m/%d/%y",\n              "%X": "%H:%M:%S",\n              "%Ec": "%c",\n              "%EC": "%C",\n              "%Ex": "%m/%d/%y",\n              "%EX": "%H:%M:%S",\n              "%Ey": "%y",\n              "%EY": "%Y",\n              "%Od": "%d",\n              "%Oe": "%e",\n              "%OH": "%H",\n              "%OI": "%I",\n              "%Om": "%m",\n              "%OM": "%M",\n              "%OS": "%S",\n              "%Ou": "%u",\n              "%OU": "%U",\n              "%OV": "%V",\n              "%Ow": "%w",\n              "%OW": "%W",\n              "%Oy": "%y"\n            };\n            for (var y in w)\n              c = c.replace(new RegExp(y, "g"), w[y]);\n            var Ib = "Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "), Jb = "January February March April May June July August September October November December".split(" ");\n            w = {\n              "%a": (f) => Ib[f.Na].substring(0, 3),\n              "%A": (f) => Ib[f.Na],\n              "%b": (f) => Jb[f.Ua].substring(0, 3),\n              "%B": (f) => Jb[f.Ua],\n              "%C": (f) => h((f.Sa + 1900) / 100 | 0, 2),\n              "%d": (f) => h(f.Xa, 2),\n              "%e": (f) => g(f.Xa, 2, " "),\n              "%g": (f) => C(f).toString().substring(2),\n              "%G": (f) => C(f),\n              "%H": (f) => h(f.Ta, 2),\n              "%I": (f) => {\n                f = f.Ta;\n                0 == f ? f = 12 : 12 < f && (f -= 12);\n                return h(f, 2);\n              },\n              "%j": (f) => {\n                for (var q = 0, u = 0; u <= f.Ua - 1; q += (Y(f.Sa + 1900) ? Qb : Rb)[u++])\n                  ;\n                return h(f.Xa + q, 3);\n              },\n              "%m": (f) => h(f.Ua + 1, 2),\n              "%M": (f) => h(f.nb, 2),\n              "%n": () => "\\n",\n              "%p": (f) => 0 <= f.Ta && 12 > f.Ta ? "AM" : "PM",\n              "%S": (f) => h(f.ob, 2),\n              "%t": () => "	",\n              "%u": (f) => f.Na || 7,\n              "%U": (f) => h(Math.floor((f.Ra + 7 - f.Na) / 7), 2),\n              "%V": (f) => {\n                var q = Math.floor((f.Ra + 7 - (f.Na + 6) % 7) / 7);\n                2 >= (f.Na + 371 - f.Ra - 2) % 7 && q++;\n                if (q)\n                  53 == q && (u = (f.Na + 371 - f.Ra) % 7, 4 == u || 3 == u && Y(f.Sa) || (q = 1));\n                else {\n                  q = 52;\n                  var u = (f.Na + 7 - f.Ra - 1) % 7;\n                  (4 == u || 5 == u && Y(f.Sa % 400 - 1)) && q++;\n                }\n                return h(q, 2);\n              },\n              "%w": (f) => f.Na,\n              "%W": (f) => h(Math.floor((f.Ra + 7 - (f.Na + 6) % 7) / 7), 2),\n              "%y": (f) => (f.Sa + 1900).toString().substring(2),\n              "%Y": (f) => f.Sa + 1900,\n              "%z": (f) => {\n                f = f.mb;\n                var q = 0 <= f;\n                f = Math.abs(f) / 60;\n                return (q ? "+" : "-") + String("0000" + (f / 60 * 100 + f % 60)).slice(-4);\n              },\n              "%Z": (f) => f.pb,\n              "%%": () => "%"\n            };\n            c = c.replace(\n              /%%/g,\n              "\\0\\0"\n            );\n            for (y in w)\n              c.includes(y) && (c = c.replace(new RegExp(y, "g"), w[y](d)));\n            c = c.replace(/\\0\\0/g, "%");\n            y = Sb(c);\n            if (y.length > b)\n              return 0;\n            Tb(y, a);\n            return y.length - 1;\n          }\n          S.Wa();\n          var Vb = [Oa, Pa, bb, db, eb, ib, jb, kb, lb, mb, nb, ob, pb, qb, rb, sb, yb, zb, Gb, Kb, Lb, Mb, Nb, Pb], Zb = {\n            b: function(a, b, c) {\n              a >>>= 0;\n              new Za(a).Wa(b >>> 0, c >>> 0);\n              $a = a;\n              ab++;\n              throw $a;\n            },\n            L: function(a) {\n              Wb(a >>> 0, !A, 1, !ka, 131072, false);\n              S.ab();\n            },\n            j: function(a) {\n              a >>>= 0;\n              D ? postMessage({ cmd: "cleanupThread", thread: a }) : S.Za(S.Ma[a]);\n            },\n            H: cb,\n            h: db,\n            S: eb,\n            D: ib,\n            F: jb,\n            T: kb,\n            Q: lb,\n            J: mb,\n            P: nb,\n            n: ob,\n            E: pb,\n            B: qb,\n            R: rb,\n            C: sb,\n            p: () => 1,\n            z: function(a, b) {\n              a >>>= 0;\n              a == b >>> 0 ? setTimeout(() => X()) : D ? postMessage({ targetThread: a, cmd: "checkMailbox" }) : (a = S.Ma[a]) && a.postMessage({ cmd: "checkMailbox" });\n            },\n            I: function(a, b, c, d) {\n              b >>>= 0;\n              vb.length = c;\n              d = d >>> 0 >>> 3;\n              for (var g = 0; g < c; g++)\n                vb[g] = ea()[d + g >>> 0];\n              a = 0 > a ? Ea[-a - 1] : Vb[a];\n              S.ib = b;\n              b = a.apply(null, vb);\n              S.ib = 0;\n              return b;\n            },\n            K: tb,\n            o: function(a) {\n              B && S.Ma[a >>> 0].ref();\n            },\n            s: function(a, b, c) {\n              a = b + 2097152 >>> 0 < 4194305 - !!a ? (a >>> 0) + 4294967296 * b : NaN;\n              c >>>= 0;\n              a = new Date(1e3 * a);\n              p()[c >>> 2 >>> 0] = a.getUTCSeconds();\n              p()[c + 4 >>> 2 >>> 0] = a.getUTCMinutes();\n              p()[c + 8 >>> 2 >>> 0] = a.getUTCHours();\n              p()[c + 12 >>> 2 >>> 0] = a.getUTCDate();\n              p()[c + 16 >>> 2 >>> 0] = a.getUTCMonth();\n              p()[c + 20 >>> 2 >>> 0] = a.getUTCFullYear() - 1900;\n              p()[c + 24 >>> 2 >>> 0] = a.getUTCDay();\n              a = (a.getTime() - Date.UTC(a.getUTCFullYear(), 0, 1, 0, 0, 0, 0)) / 864e5 | 0;\n              p()[c + 28 >>> 2 >>> 0] = a;\n            },\n            t: function(a, b, c) {\n              a = b + 2097152 >>> 0 < 4194305 - !!a ? (a >>> 0) + 4294967296 * b : NaN;\n              c >>>= 0;\n              a = new Date(1e3 * a);\n              p()[c >>> 2 >>> 0] = a.getSeconds();\n              p()[c + 4 >>> 2 >>> 0] = a.getMinutes();\n              p()[c + 8 >>> 2 >>> 0] = a.getHours();\n              p()[c + 12 >>> 2 >>> 0] = a.getDate();\n              p()[c + 16 >>> 2 >>> 0] = a.getMonth();\n              p()[c + 20 >>> 2 >>> 0] = a.getFullYear() - 1900;\n              p()[c + 24 >>> 2 >>> 0] = a.getDay();\n              b = (Y(a.getFullYear()) ? wb : xb)[a.getMonth()] + a.getDate() - 1 | 0;\n              p()[c + 28 >>> 2 >>> 0] = b;\n              p()[c + 36 >>> 2 >>> 0] = -(60 * a.getTimezoneOffset());\n              b = new Date(a.getFullYear(), 6, 1).getTimezoneOffset();\n              var d = new Date(a.getFullYear(), 0, 1).getTimezoneOffset();\n              a = (b != d && a.getTimezoneOffset() == Math.min(d, b)) | 0;\n              p()[c + 32 >>> 2 >>> 0] = a;\n            },\n            u: function(a) {\n              a >>>= 0;\n              var b = new Date(p()[a + 20 >>> 2 >>> 0] + 1900, p()[a + 16 >>> 2 >>> 0], p()[a + 12 >>> 2 >>> 0], p()[a + 8 >>> 2 >>> 0], p()[a + 4 >>> 2 >>> 0], p()[a >>> 2 >>> 0], 0), c = p()[a + 32 >>> 2 >>> 0], d = b.getTimezoneOffset(), g = new Date(b.getFullYear(), 6, 1).getTimezoneOffset(), h = new Date(\n                b.getFullYear(),\n                0,\n                1\n              ).getTimezoneOffset(), k = Math.min(h, g);\n              0 > c ? p()[a + 32 >>> 2 >>> 0] = Number(g != h && k == d) : 0 < c != (k == d) && (g = Math.max(h, g), b.setTime(b.getTime() + 6e4 * ((0 < c ? k : g) - d)));\n              p()[a + 24 >>> 2 >>> 0] = b.getDay();\n              c = (Y(b.getFullYear()) ? wb : xb)[b.getMonth()] + b.getDate() - 1 | 0;\n              p()[a + 28 >>> 2 >>> 0] = c;\n              p()[a >>> 2 >>> 0] = b.getSeconds();\n              p()[a + 4 >>> 2 >>> 0] = b.getMinutes();\n              p()[a + 8 >>> 2 >>> 0] = b.getHours();\n              p()[a + 12 >>> 2 >>> 0] = b.getDate();\n              p()[a + 16 >>> 2 >>> 0] = b.getMonth();\n              p()[a + 20 >>> 2 >>> 0] = b.getYear();\n              a = b.getTime();\n              isNaN(a) ? (p()[Xb() >>> 2 >>> 0] = 61, a = -1) : a /= 1e3;\n              return Yb((P = a, 1 <= +Math.abs(P) ? 0 < P ? +Math.floor(P / 4294967296) >>> 0 : ~~+Math.ceil((P - +(~~P >>> 0)) / 4294967296) >>> 0 : 0)), a >>> 0;\n            },\n            q: yb,\n            r: zb,\n            y: function(a, b, c) {\n              function d(w) {\n                return (w = w.toTimeString().match(/\\(([A-Za-z ]+)\\)$/)) ? w[1] : "GMT";\n              }\n              a >>>= 0;\n              b >>>= 0;\n              c >>>= 0;\n              var g = (/* @__PURE__ */ new Date()).getFullYear(), h = new Date(g, 0, 1), k = new Date(g, 6, 1);\n              g = h.getTimezoneOffset();\n              var t = k.getTimezoneOffset(), C = Math.max(g, t);\n              r()[a >>> 2 >>> 0] = 60 * C;\n              p()[b >>> 2 >>> 0] = Number(g != t);\n              a = d(h);\n              b = d(k);\n              a = Bb(a);\n              b = Bb(b);\n              t < g ? (r()[c >>> 2 >>> 0] = a, r()[c + 4 >>> 2 >>> 0] = b) : (r()[c >>> 2 >>> 0] = b, r()[c + 4 >>> 2 >>> 0] = a);\n            },\n            c: () => {\n              ra("");\n            },\n            O: function(a, b, c) {\n              a >>>= 0;\n              b >>>= 0;\n              c >>>= 0;\n              Cb.length = 0;\n              for (var d; d = n()[b++ >>> 0]; ) {\n                var g = 105 != d;\n                g &= 112 != d;\n                c += g && c % 8 ? 4 : 0;\n                Cb.push(112 == d ? r()[c >>> 2 >>> 0] : 105 == d ? p()[c >>> 2 >>> 0] : ea()[c >>> 3 >>> 0]);\n                c += g ? 8 : 4;\n              }\n              return Ea[a].apply(null, Cb);\n            },\n            k: () => {\n            },\n            i: () => Date.now(),\n            U: () => {\n              T += 1;\n              throw "unwind";\n            },\n            A: function() {\n              return 4294901760;\n            },\n            e: () => performance.timeOrigin + performance.now(),\n            f: () => B ? (init_os(), __toCommonJS(os_exports)).cpus().length : navigator.hardwareConcurrency,\n            x: function(a) {\n              a >>>= 0;\n              var b = n().length;\n              if (a <= b || 4294901760 < a)\n                return false;\n              for (var c = 1; 4 >= c; c *= 2) {\n                var d = b * (1 + 0.2 / c);\n                d = Math.min(d, a + 100663296);\n                var g = Math;\n                d = Math.max(a, d);\n                a: {\n                  g = (g.min.call(g, 4294901760, d + (65536 - d % 65536) % 65536) - e.buffer.byteLength + 65535) / 65536;\n                  try {\n                    e.grow(g);\n                    m();\n                    var h = 1;\n                    break a;\n                  } catch (k) {\n                  }\n                  h = void 0;\n                }\n                if (h)\n                  return true;\n              }\n              return false;\n            },\n            M: Gb,\n            N: Kb,\n            G: Qa,\n            g: Lb,\n            m: Mb,\n            v: Nb,\n            l: Pb,\n            a: e || v.wasmMemory,\n            w: Ub,\n            d: function(a, b, c, d) {\n              return Ub(a >>> 0, b >>> 0, c >>> 0, d >>> 0);\n            }\n          }, Z = function() {\n            function a(c, d) {\n              Z = c.exports;\n              Z = $b();\n              S.bb.push(Z.za);\n              Xa = Z.Aa;\n              va.unshift(Z.V);\n              sa = d;\n              ya();\n              return Z;\n            }\n            var b = { a: Zb };\n            M++;\n            if (v.instantiateWasm)\n              try {\n                return v.instantiateWasm(b, a);\n              } catch (c) {\n                J(`Module.instantiateWasm callback failed with error: ${c}`), x(c);\n              }\n            Da(b, function(c) {\n              a(c.instance, c.module);\n            }).catch(x);\n            return {};\n          }();\n          v._OrtInit = (a, b) => (v._OrtInit = Z.W)(a, b);\n          v._OrtGetLastError = (a, b) => (v._OrtGetLastError = Z.X)(a, b);\n          v._OrtCreateSessionOptions = (a, b, c, d, g, h, k, t, C, w) => (v._OrtCreateSessionOptions = Z.Y)(a, b, c, d, g, h, k, t, C, w);\n          v._OrtAppendExecutionProvider = (a, b) => (v._OrtAppendExecutionProvider = Z.Z)(a, b);\n          v._OrtAddFreeDimensionOverride = (a, b, c) => (v._OrtAddFreeDimensionOverride = Z._)(a, b, c);\n          v._OrtAddSessionConfigEntry = (a, b, c) => (v._OrtAddSessionConfigEntry = Z.$)(a, b, c);\n          v._OrtReleaseSessionOptions = (a) => (v._OrtReleaseSessionOptions = Z.aa)(a);\n          v._OrtCreateSession = (a, b, c) => (v._OrtCreateSession = Z.ba)(a, b, c);\n          v._OrtReleaseSession = (a) => (v._OrtReleaseSession = Z.ca)(a);\n          v._OrtGetInputOutputCount = (a, b, c) => (v._OrtGetInputOutputCount = Z.da)(a, b, c);\n          v._OrtGetInputName = (a, b) => (v._OrtGetInputName = Z.ea)(a, b);\n          v._OrtGetOutputName = (a, b) => (v._OrtGetOutputName = Z.fa)(a, b);\n          v._OrtFree = (a) => (v._OrtFree = Z.ga)(a);\n          v._OrtCreateTensor = (a, b, c, d, g, h) => (v._OrtCreateTensor = Z.ha)(a, b, c, d, g, h);\n          v._OrtGetTensorData = (a, b, c, d, g) => (v._OrtGetTensorData = Z.ia)(a, b, c, d, g);\n          v._OrtReleaseTensor = (a) => (v._OrtReleaseTensor = Z.ja)(a);\n          v._OrtCreateRunOptions = (a, b, c, d) => (v._OrtCreateRunOptions = Z.ka)(a, b, c, d);\n          v._OrtAddRunConfigEntry = (a, b, c) => (v._OrtAddRunConfigEntry = Z.la)(a, b, c);\n          v._OrtReleaseRunOptions = (a) => (v._OrtReleaseRunOptions = Z.ma)(a);\n          v._OrtCreateBinding = (a) => (v._OrtCreateBinding = Z.na)(a);\n          v._OrtBindInput = (a, b, c) => (v._OrtBindInput = Z.oa)(a, b, c);\n          v._OrtBindOutput = (a, b, c, d) => (v._OrtBindOutput = Z.pa)(a, b, c, d);\n          v._OrtClearBoundOutputs = (a) => (v._OrtClearBoundOutputs = Z.qa)(a);\n          v._OrtReleaseBinding = (a) => (v._OrtReleaseBinding = Z.ra)(a);\n          v._OrtRunWithBinding = (a, b, c, d, g) => (v._OrtRunWithBinding = Z.sa)(a, b, c, d, g);\n          v._OrtRun = (a, b, c, d, g, h, k, t) => (v._OrtRun = Z.ta)(a, b, c, d, g, h, k, t);\n          v._OrtEndProfiling = (a) => (v._OrtEndProfiling = Z.ua)(a);\n          var Xb = () => (Xb = Z.va)(), W = v._pthread_self = () => (W = v._pthread_self = Z.wa)(), Ab = v._malloc = (a) => (Ab = v._malloc = Z.xa)(a);\n          v._free = (a) => (v._free = Z.ya)(a);\n          v.__emscripten_tls_init = () => (v.__emscripten_tls_init = Z.za)();\n          var Wb = v.__emscripten_thread_init = (a, b, c, d, g, h) => (Wb = v.__emscripten_thread_init = Z.Ba)(a, b, c, d, g, h);\n          v.__emscripten_thread_crashed = () => (v.__emscripten_thread_crashed = Z.Ca)();\n          var Na = (a, b, c, d) => (Na = Z.Da)(a, b, c, d), Ta = (a) => (Ta = Z.Ea)(a), Ya = v.__emscripten_thread_exit = (a) => (Ya = v.__emscripten_thread_exit = Z.Fa)(a), ub = () => (ub = Z.Ga)(), Yb = (a) => (Yb = Z.Ha)(a), Va = (a, b) => (Va = Z.Ia)(a, b), Ka = () => (Ka = Z.Ja)(), U = (a) => (U = Z.Ka)(a), Ma = (a) => (Ma = Z.La)(a);\n          function $b() {\n            var a = Z;\n            a = Object.assign({}, a);\n            var b = (d) => () => d() >>> 0, c = (d) => (g) => d(g) >>> 0;\n            a.va = b(a.va);\n            a.wa = b(a.wa);\n            a.xa = c(a.xa);\n            a.emscripten_main_runtime_thread_id = b(a.emscripten_main_runtime_thread_id);\n            a.Ja = b(a.Ja);\n            a.La = c(a.La);\n            return a;\n          }\n          v.wasmMemory = e;\n          v.stackAlloc = Ma;\n          v.stackSave = Ka;\n          v.stackRestore = U;\n          v.keepRuntimeAlive = () => 0 < T;\n          v.UTF8ToString = Q;\n          v.stringToUTF8 = hb;\n          v.lengthBytesUTF8 = fb;\n          v.ExitStatus = R;\n          v.PThread = S;\n          var ac;\n          N = function bc() {\n            ac || cc();\n            ac || (N = bc);\n          };\n          function cc() {\n            if (!(0 < M))\n              if (D)\n                ha(v), D || Ua(va), startWorker(v);\n              else {\n                if (v.preRun)\n                  for ("function" == typeof v.preRun && (v.preRun = [v.preRun]); v.preRun.length; )\n                    ua.unshift(v.preRun.shift());\n                Ua(ua);\n                0 < M || ac || (ac = true, v.calledRun = true, K || (D || Ua(va), ha(v), D || Ua(wa)));\n              }\n          }\n          cc();\n          return moduleArg.ready;\n        };\n      })();\n      if (typeof exports === "object" && typeof module === "object")\n        module.exports = ortWasmThreaded;\n      else if (typeof define === "function" && define["amd"])\n        define([], () => ortWasmThreaded);\n    }\n  });\n\n  // web/lib/wasm/binding/ort-wasm-threaded.worker.js\n  var require_ort_wasm_threaded_worker = __commonJS({\n    "web/lib/wasm/binding/ort-wasm-threaded.worker.js"(exports, module) {\n      module.exports = \'"use strict";var Module={};var ENVIRONMENT_IS_NODE=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string";if(ENVIRONMENT_IS_NODE){var nodeWorkerThreads=require("worker_threads");var parentPort=nodeWorkerThreads.parentPort;parentPort.on("message",data=>onmessage({data:data}));var fs=require("fs");var vm=require("vm");Object.assign(global,{self:global,require:require,Module:Module,location:{href:__filename},Worker:nodeWorkerThreads.Worker,importScripts:f=>vm.runInThisContext(fs.readFileSync(f,"utf8"),{filename:f}),postMessage:msg=>parentPort.postMessage(msg),performance:global.performance||{now:Date.now}})}var initializedJS=false;function threadPrintErr(){var text=Array.prototype.slice.call(arguments).join(" ");if(ENVIRONMENT_IS_NODE){fs.writeSync(2,text+"\\\\n");return}console.error(text)}function threadAlert(){var text=Array.prototype.slice.call(arguments).join(" ");postMessage({cmd:"alert",text:text,threadId:Module["_pthread_self"]()})}var err=threadPrintErr;self.alert=threadAlert;Module["instantiateWasm"]=(info,receiveInstance)=>{var module=Module["wasmModule"];Module["wasmModule"]=null;var instance=new WebAssembly.Instance(module,info);return receiveInstance(instance)};self.onunhandledrejection=e=>{throw e.reason||e};function handleMessage(e){try{if(e.data.cmd==="load"){let messageQueue=[];self.onmessage=e=>messageQueue.push(e);self.startWorker=instance=>{Module=instance;postMessage({"cmd":"loaded"});for(let msg of messageQueue){handleMessage(msg)}self.onmessage=handleMessage};Module["wasmModule"]=e.data.wasmModule;for(const handler of e.data.handlers){Module[handler]=(...args)=>{postMessage({cmd:"callHandler",handler:handler,args:args})}}Module["wasmMemory"]=e.data.wasmMemory;Module["buffer"]=Module["wasmMemory"].buffer;Module["ENVIRONMENT_IS_PTHREAD"]=true;if(typeof e.data.urlOrBlob=="string"){importScripts(e.data.urlOrBlob)}else{var objectUrl=URL.createObjectURL(e.data.urlOrBlob);importScripts(objectUrl);URL.revokeObjectURL(objectUrl)}ortWasmThreaded(Module)}else if(e.data.cmd==="run"){Module["__emscripten_thread_init"](e.data.pthread_ptr,/*is_main=*/0,/*is_runtime=*/0,/*can_block=*/1);Module["__emscripten_thread_mailbox_await"](e.data.pthread_ptr);Module["establishStackSpace"]();Module["PThread"].receiveObjectTransfer(e.data);Module["PThread"].threadInitTLS();if(!initializedJS){initializedJS=true}try{Module["invokeEntryPoint"](e.data.start_routine,e.data.arg)}catch(ex){if(ex!="unwind"){throw ex}}}else if(e.data.cmd==="cancel"){if(Module["_pthread_self"]()){Module["__emscripten_thread_exit"](-1)}}else if(e.data.target==="setimmediate"){}else if(e.data.cmd==="checkMailbox"){if(initializedJS){Module["checkMailbox"]()}}else if(e.data.cmd){err(`worker.js received unknown command ${e.data.cmd}`);err(e.data)}}catch(ex){Module["__emscripten_thread_crashed"]?.();throw ex}}self.onmessage=handleMessage;\\n\';\n    }\n  });\n\n  // nodejs-ignore:node:path\n  var join = void 0;\n\n  // web/lib/wasm/wasm-factory.ts\n  var ortWasmFactory;\n  if (true) {\n    ortWasmFactory = require_ort_training_wasm_simd();\n  } else {\n    ortWasmFactory = true ? null : null;\n  }\n  var ortWasmFactoryThreaded = true ? true ? require_ort_wasm_threaded() : null : ortWasmFactory;\n  var wasm;\n  var initialized = false;\n  var initializing = false;\n  var aborted = false;\n  var isMultiThreadSupported = (numThreads) => {\n    if (numThreads === 1) {\n      return false;\n    }\n    if (typeof SharedArrayBuffer === "undefined") {\n      if (typeof self !== "undefined" && !self.crossOriginIsolated) {\n        console.warn(\n          "env.wasm.numThreads is set to " + numThreads + ", but this will not work unless you enable crossOriginIsolated mode. See https://web.dev/cross-origin-isolation-guide/ for more info."\n        );\n      }\n      return false;\n    }\n    if (typeof process !== "undefined" && process.versions && process.versions.node) {\n      console.warn(\n        "env.wasm.numThreads is set to " + numThreads + ", however, currently onnxruntime-web does not support multi-threads in Node.js. Please consider using onnxruntime-node for performance critical scenarios."\n      );\n    }\n    try {\n      if (typeof MessageChannel !== "undefined") {\n        new MessageChannel().port1.postMessage(new SharedArrayBuffer(1));\n      }\n      return WebAssembly.validate(new Uint8Array([\n        0,\n        97,\n        115,\n        109,\n        1,\n        0,\n        0,\n        0,\n        1,\n        4,\n        1,\n        96,\n        0,\n        0,\n        3,\n        2,\n        1,\n        0,\n        5,\n        4,\n        1,\n        3,\n        1,\n        1,\n        10,\n        11,\n        1,\n        9,\n        0,\n        65,\n        0,\n        254,\n        16,\n        2,\n        0,\n        26,\n        11\n      ]));\n    } catch (e) {\n      return false;\n    }\n  };\n  var isSimdSupported = () => {\n    try {\n      return WebAssembly.validate(new Uint8Array([\n        0,\n        97,\n        115,\n        109,\n        1,\n        0,\n        0,\n        0,\n        1,\n        4,\n        1,\n        96,\n        0,\n        0,\n        3,\n        2,\n        1,\n        0,\n        10,\n        30,\n        1,\n        28,\n        0,\n        65,\n        0,\n        253,\n        15,\n        253,\n        12,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        253,\n        186,\n        1,\n        26,\n        11\n      ]));\n    } catch (e) {\n      return false;\n    }\n  };\n  var getWasmFileName = (useSimd, useThreads) => {\n    if (useSimd) {\n      if (true) {\n        return "ort-training-wasm-simd.wasm";\n      }\n      return useThreads ? "ort-wasm-simd-threaded.wasm" : "ort-wasm-simd.wasm";\n    } else {\n      return useThreads ? "ort-wasm-threaded.wasm" : "ort-wasm.wasm";\n    }\n  };\n  var initializeWebAssembly = async (flags) => {\n    if (initialized) {\n      return Promise.resolve();\n    }\n    if (initializing) {\n      throw new Error("multiple calls to \'initializeWebAssembly()\' detected.");\n    }\n    if (aborted) {\n      throw new Error("previous call to \'initializeWebAssembly()\' failed.");\n    }\n    initializing = true;\n    const timeout = flags.initTimeout;\n    const numThreads = flags.numThreads;\n    const simd = flags.simd;\n    const useThreads = isMultiThreadSupported(numThreads);\n    const useSimd = simd && isSimdSupported();\n    const wasmPaths = flags.wasmPaths;\n    const wasmPrefixOverride = typeof wasmPaths === "string" ? wasmPaths : void 0;\n    const wasmFileName = getWasmFileName(useSimd, useThreads);\n    const wasmPathOverride = typeof wasmPaths === "object" ? wasmPaths[wasmFileName] : void 0;\n    let isTimeout = false;\n    const tasks = [];\n    if (timeout > 0) {\n      tasks.push(new Promise((resolve) => {\n        setTimeout(() => {\n          isTimeout = true;\n          resolve();\n        }, timeout);\n      }));\n    }\n    tasks.push(new Promise((resolve, reject) => {\n      const factory = useThreads ? ortWasmFactoryThreaded : ortWasmFactory;\n      const config = {\n        locateFile: (fileName, scriptDirectory) => {\n          if (useThreads && fileName.endsWith(".worker.js") && typeof Blob !== "undefined") {\n            return URL.createObjectURL(new Blob(\n              [\n                // This require() function is handled by esbuild plugin to load file content as string.\n                // eslint-disable-next-line @typescript-eslint/no-require-imports\n                require_ort_wasm_threaded_worker()\n              ],\n              { type: "text/javascript" }\n            ));\n          }\n          if (fileName.endsWith(".wasm")) {\n            if (wasmPathOverride) {\n              return wasmPathOverride;\n            }\n            const prefix = wasmPrefixOverride ?? scriptDirectory;\n            if (false) {\n              if (wasmFileName === "ort-wasm-simd.wasm") {\n                return prefix + "ort-wasm-simd.jsep.wasm";\n              } else if (wasmFileName === "ort-wasm-simd-threaded.wasm") {\n                return prefix + "ort-wasm-simd-threaded.jsep.wasm";\n              }\n            }\n            return prefix + wasmFileName;\n          }\n          return scriptDirectory + fileName;\n        }\n      };\n      if (useThreads) {\n        config.numThreads = numThreads;\n        if (typeof Blob === "undefined") {\n          config.mainScriptUrlOrBlob = join(__dirname, "ort-wasm-threaded.js");\n        } else {\n          const scriptSourceCode = `var ortWasmThreaded=${factory.toString()};`;\n          config.mainScriptUrlOrBlob = new Blob([scriptSourceCode], { type: "text/javascript" });\n        }\n      }\n      factory(config).then(\n        // wasm module initialized successfully\n        (module) => {\n          initializing = false;\n          initialized = true;\n          wasm = module;\n          resolve();\n        },\n        // wasm module failed to initialize\n        (what) => {\n          initializing = false;\n          aborted = true;\n          reject(what);\n        }\n      );\n    }));\n    await Promise.race(tasks);\n    if (isTimeout) {\n      throw new Error(`WebAssembly backend initializing failed due to timeout: ${timeout}ms`);\n    }\n  };\n  var getInstance = () => {\n    if (initialized && wasm) {\n      return wasm;\n    }\n    throw new Error("WebAssembly is not initialized yet.");\n  };\n\n  // web/lib/wasm/wasm-utils.ts\n  var allocWasmString = (data, allocs) => {\n    const wasm2 = getInstance();\n    const dataLength = wasm2.lengthBytesUTF8(data) + 1;\n    const dataOffset = wasm2._malloc(dataLength);\n    wasm2.stringToUTF8(data, dataOffset, dataLength);\n    allocs.push(dataOffset);\n    return dataOffset;\n  };\n  var iterateExtraOptions = (options, prefix, seen, handler) => {\n    if (typeof options == "object" && options !== null) {\n      if (seen.has(options)) {\n        throw new Error("Circular reference in options");\n      } else {\n        seen.add(options);\n      }\n    }\n    Object.entries(options).forEach(([key, value]) => {\n      const name = prefix ? prefix + key : key;\n      if (typeof value === "object") {\n        iterateExtraOptions(value, name + ".", seen, handler);\n      } else if (typeof value === "string" || typeof value === "number") {\n        handler(name, value.toString());\n      } else if (typeof value === "boolean") {\n        handler(name, value ? "1" : "0");\n      } else {\n        throw new Error(`Can\'t handle extra config type: ${typeof value}`);\n      }\n    });\n  };\n  var checkLastError = (message) => {\n    const wasm2 = getInstance();\n    const stack = wasm2.stackSave();\n    try {\n      const paramsOffset = wasm2.stackAlloc(8);\n      wasm2._OrtGetLastError(paramsOffset, paramsOffset + 4);\n      const errorCode = wasm2.HEAP32[paramsOffset / 4];\n      const errorMessagePointer = wasm2.HEAPU32[paramsOffset / 4 + 1];\n      const errorMessage = errorMessagePointer ? wasm2.UTF8ToString(errorMessagePointer) : "";\n      throw new Error(`${message} ERROR_CODE: ${errorCode}, ERROR_MESSAGE: ${errorMessage}`);\n    } finally {\n      wasm2.stackRestore(stack);\n    }\n  };\n\n  // web/lib/wasm/run-options.ts\n  var setRunOptions = (options) => {\n    const wasm2 = getInstance();\n    let runOptionsHandle = 0;\n    const allocs = [];\n    const runOptions = options || {};\n    try {\n      if (options?.logSeverityLevel === void 0) {\n        runOptions.logSeverityLevel = 2;\n      } else if (typeof options.logSeverityLevel !== "number" || !Number.isInteger(options.logSeverityLevel) || options.logSeverityLevel < 0 || options.logSeverityLevel > 4) {\n        throw new Error(`log serverity level is not valid: ${options.logSeverityLevel}`);\n      }\n      if (options?.logVerbosityLevel === void 0) {\n        runOptions.logVerbosityLevel = 0;\n      } else if (typeof options.logVerbosityLevel !== "number" || !Number.isInteger(options.logVerbosityLevel)) {\n        throw new Error(`log verbosity level is not valid: ${options.logVerbosityLevel}`);\n      }\n      if (options?.terminate === void 0) {\n        runOptions.terminate = false;\n      }\n      let tagDataOffset = 0;\n      if (options?.tag !== void 0) {\n        tagDataOffset = allocWasmString(options.tag, allocs);\n      }\n      runOptionsHandle = wasm2._OrtCreateRunOptions(\n        runOptions.logSeverityLevel,\n        runOptions.logVerbosityLevel,\n        !!runOptions.terminate,\n        tagDataOffset\n      );\n      if (runOptionsHandle === 0) {\n        checkLastError("Can\'t create run options.");\n      }\n      if (options?.extra !== void 0) {\n        iterateExtraOptions(options.extra, "", /* @__PURE__ */ new WeakSet(), (key, value) => {\n          const keyDataOffset = allocWasmString(key, allocs);\n          const valueDataOffset = allocWasmString(value, allocs);\n          if (wasm2._OrtAddRunConfigEntry(runOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n            checkLastError(`Can\'t set a run config entry: ${key} - ${value}.`);\n          }\n        });\n      }\n      return [runOptionsHandle, allocs];\n    } catch (e) {\n      if (runOptionsHandle !== 0) {\n        wasm2._OrtReleaseRunOptions(runOptionsHandle);\n      }\n      allocs.forEach((alloc) => wasm2._free(alloc));\n      throw e;\n    }\n  };\n\n  // web/lib/wasm/session-options.ts\n  var getGraphOptimzationLevel = (graphOptimizationLevel) => {\n    switch (graphOptimizationLevel) {\n      case "disabled":\n        return 0;\n      case "basic":\n        return 1;\n      case "extended":\n        return 2;\n      case "all":\n        return 99;\n      default:\n        throw new Error(`unsupported graph optimization level: ${graphOptimizationLevel}`);\n    }\n  };\n  var getExecutionMode = (executionMode) => {\n    switch (executionMode) {\n      case "sequential":\n        return 0;\n      case "parallel":\n        return 1;\n      default:\n        throw new Error(`unsupported execution mode: ${executionMode}`);\n    }\n  };\n  var appendDefaultOptions = (options) => {\n    if (!options.extra) {\n      options.extra = {};\n    }\n    if (!options.extra.session) {\n      options.extra.session = {};\n    }\n    const session = options.extra.session;\n    if (!session.use_ort_model_bytes_directly) {\n      session.use_ort_model_bytes_directly = "1";\n    }\n    if (options.executionProviders && options.executionProviders.some((ep) => (typeof ep === "string" ? ep : ep.name) === "webgpu")) {\n      options.enableMemPattern = false;\n    }\n  };\n  var setExecutionProviders = (sessionOptionsHandle, executionProviders, allocs) => {\n    for (const ep of executionProviders) {\n      let epName = typeof ep === "string" ? ep : ep.name;\n      switch (epName) {\n        case "webnn":\n          epName = "WEBNN";\n          if (typeof ep !== "string") {\n            const webnnOptions = ep;\n            if (webnnOptions?.deviceType) {\n              const keyDataOffset = allocWasmString("deviceType", allocs);\n              const valueDataOffset = allocWasmString(webnnOptions.deviceType, allocs);\n              if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n                checkLastError(`Can\'t set a session config entry: \'deviceType\' - ${webnnOptions.deviceType}.`);\n              }\n            }\n            if (webnnOptions?.numThreads) {\n              let numThreads = webnnOptions.numThreads;\n              if (typeof numThreads != "number" || !Number.isInteger(numThreads) || numThreads < 0) {\n                numThreads = 0;\n              }\n              const keyDataOffset = allocWasmString("numThreads", allocs);\n              const valueDataOffset = allocWasmString(numThreads.toString(), allocs);\n              if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n                checkLastError(`Can\'t set a session config entry: \'numThreads\' - ${webnnOptions.numThreads}.`);\n              }\n            }\n            if (webnnOptions?.powerPreference) {\n              const keyDataOffset = allocWasmString("powerPreference", allocs);\n              const valueDataOffset = allocWasmString(webnnOptions.powerPreference, allocs);\n              if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n                checkLastError(\n                  `Can\'t set a session config entry: \'powerPreference\' - ${webnnOptions.powerPreference}.`\n                );\n              }\n            }\n          }\n          break;\n        case "webgpu":\n          epName = "JS";\n          if (typeof ep !== "string") {\n            const webgpuOptions = ep;\n            if (webgpuOptions?.preferredLayout) {\n              if (webgpuOptions.preferredLayout !== "NCHW" && webgpuOptions.preferredLayout !== "NHWC") {\n                throw new Error(`preferredLayout must be either \'NCHW\' or \'NHWC\': ${webgpuOptions.preferredLayout}`);\n              }\n              const keyDataOffset = allocWasmString("preferredLayout", allocs);\n              const valueDataOffset = allocWasmString(webgpuOptions.preferredLayout, allocs);\n              if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n                checkLastError(\n                  `Can\'t set a session config entry: \'preferredLayout\' - ${webgpuOptions.preferredLayout}.`\n                );\n              }\n            }\n          }\n          break;\n        case "wasm":\n        case "cpu":\n          continue;\n        default:\n          throw new Error(`not supported execution provider: ${epName}`);\n      }\n      const epNameDataOffset = allocWasmString(epName, allocs);\n      if (getInstance()._OrtAppendExecutionProvider(sessionOptionsHandle, epNameDataOffset) !== 0) {\n        checkLastError(`Can\'t append execution provider: ${epName}.`);\n      }\n    }\n  };\n  var setSessionOptions = (options) => {\n    const wasm2 = getInstance();\n    let sessionOptionsHandle = 0;\n    const allocs = [];\n    const sessionOptions = options || {};\n    appendDefaultOptions(sessionOptions);\n    try {\n      const graphOptimizationLevel = getGraphOptimzationLevel(sessionOptions.graphOptimizationLevel ?? "all");\n      const executionMode = getExecutionMode(sessionOptions.executionMode ?? "sequential");\n      const logIdDataOffset = typeof sessionOptions.logId === "string" ? allocWasmString(sessionOptions.logId, allocs) : 0;\n      const logSeverityLevel = sessionOptions.logSeverityLevel ?? 2;\n      if (!Number.isInteger(logSeverityLevel) || logSeverityLevel < 0 || logSeverityLevel > 4) {\n        throw new Error(`log serverity level is not valid: ${logSeverityLevel}`);\n      }\n      const logVerbosityLevel = sessionOptions.logVerbosityLevel ?? 0;\n      if (!Number.isInteger(logVerbosityLevel) || logVerbosityLevel < 0 || logVerbosityLevel > 4) {\n        throw new Error(`log verbosity level is not valid: ${logVerbosityLevel}`);\n      }\n      const optimizedModelFilePathOffset = typeof sessionOptions.optimizedModelFilePath === "string" ? allocWasmString(sessionOptions.optimizedModelFilePath, allocs) : 0;\n      sessionOptionsHandle = wasm2._OrtCreateSessionOptions(\n        graphOptimizationLevel,\n        !!sessionOptions.enableCpuMemArena,\n        !!sessionOptions.enableMemPattern,\n        executionMode,\n        !!sessionOptions.enableProfiling,\n        0,\n        logIdDataOffset,\n        logSeverityLevel,\n        logVerbosityLevel,\n        optimizedModelFilePathOffset\n      );\n      if (sessionOptionsHandle === 0) {\n        checkLastError("Can\'t create session options.");\n      }\n      if (sessionOptions.executionProviders) {\n        setExecutionProviders(sessionOptionsHandle, sessionOptions.executionProviders, allocs);\n      }\n      if (sessionOptions.enableGraphCapture !== void 0) {\n        if (typeof sessionOptions.enableGraphCapture !== "boolean") {\n          throw new Error(`enableGraphCapture must be a boolean value: ${sessionOptions.enableGraphCapture}`);\n        }\n        const keyDataOffset = allocWasmString("enableGraphCapture", allocs);\n        const valueDataOffset = allocWasmString(sessionOptions.enableGraphCapture.toString(), allocs);\n        if (wasm2._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n          checkLastError(\n            `Can\'t set a session config entry: \'enableGraphCapture\' - ${sessionOptions.enableGraphCapture}.`\n          );\n        }\n      }\n      if (sessionOptions.freeDimensionOverrides) {\n        for (const [name, value] of Object.entries(sessionOptions.freeDimensionOverrides)) {\n          if (typeof name !== "string") {\n            throw new Error(`free dimension override name must be a string: ${name}`);\n          }\n          if (typeof value !== "number" || !Number.isInteger(value) || value < 0) {\n            throw new Error(`free dimension override value must be a non-negative integer: ${value}`);\n          }\n          const nameOffset = allocWasmString(name, allocs);\n          if (wasm2._OrtAddFreeDimensionOverride(sessionOptionsHandle, nameOffset, value) !== 0) {\n            checkLastError(`Can\'t set a free dimension override: ${name} - ${value}.`);\n          }\n        }\n      }\n      if (sessionOptions.extra !== void 0) {\n        iterateExtraOptions(sessionOptions.extra, "", /* @__PURE__ */ new WeakSet(), (key, value) => {\n          const keyDataOffset = allocWasmString(key, allocs);\n          const valueDataOffset = allocWasmString(value, allocs);\n          if (wasm2._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n            checkLastError(`Can\'t set a session config entry: ${key} - ${value}.`);\n          }\n        });\n      }\n      return [sessionOptionsHandle, allocs];\n    } catch (e) {\n      if (sessionOptionsHandle !== 0) {\n        wasm2._OrtReleaseSessionOptions(sessionOptionsHandle);\n      }\n      allocs.forEach((alloc) => wasm2._free(alloc));\n      throw e;\n    }\n  };\n\n  // web/lib/wasm/wasm-common.ts\n  var tensorDataTypeStringToEnum = (type) => {\n    switch (type) {\n      case "int8":\n        return 3 /* int8 */;\n      case "uint8":\n        return 2 /* uint8 */;\n      case "bool":\n        return 9 /* bool */;\n      case "int16":\n        return 5 /* int16 */;\n      case "uint16":\n        return 4 /* uint16 */;\n      case "int32":\n        return 6 /* int32 */;\n      case "uint32":\n        return 12 /* uint32 */;\n      case "float16":\n        return 10 /* float16 */;\n      case "float32":\n        return 1 /* float */;\n      case "float64":\n        return 11 /* double */;\n      case "string":\n        return 8 /* string */;\n      case "int64":\n        return 7 /* int64 */;\n      case "uint64":\n        return 13 /* uint64 */;\n      default:\n        throw new Error(`unsupported data type: ${type}`);\n    }\n  };\n  var tensorDataTypeEnumToString = (typeProto) => {\n    switch (typeProto) {\n      case 3 /* int8 */:\n        return "int8";\n      case 2 /* uint8 */:\n        return "uint8";\n      case 9 /* bool */:\n        return "bool";\n      case 5 /* int16 */:\n        return "int16";\n      case 4 /* uint16 */:\n        return "uint16";\n      case 6 /* int32 */:\n        return "int32";\n      case 12 /* uint32 */:\n        return "uint32";\n      case 10 /* float16 */:\n        return "float16";\n      case 1 /* float */:\n        return "float32";\n      case 11 /* double */:\n        return "float64";\n      case 8 /* string */:\n        return "string";\n      case 7 /* int64 */:\n        return "int64";\n      case 13 /* uint64 */:\n        return "uint64";\n      default:\n        throw new Error(`unsupported data type: ${typeProto}`);\n    }\n  };\n  var getTensorElementSize = (dateType) => [void 0, 4, 1, 1, 2, 2, 4, 8, void 0, 1, 2, 8, 4, 8, void 0, void 0, void 0][dateType];\n  var tensorTypeToTypedArrayConstructor = (type) => {\n    switch (type) {\n      case "float16":\n        return typeof Float16Array !== "undefined" && Float16Array.from ? Float16Array : Uint16Array;\n      case "float32":\n        return Float32Array;\n      case "uint8":\n        return Uint8Array;\n      case "int8":\n        return Int8Array;\n      case "uint16":\n        return Uint16Array;\n      case "int16":\n        return Int16Array;\n      case "int32":\n        return Int32Array;\n      case "bool":\n        return Uint8Array;\n      case "float64":\n        return Float64Array;\n      case "uint32":\n        return Uint32Array;\n      case "int64":\n        return BigInt64Array;\n      case "uint64":\n        return BigUint64Array;\n      default:\n        throw new Error(`unsupported type: ${type}`);\n    }\n  };\n  var logLevelStringToEnum = (logLevel) => {\n    switch (logLevel) {\n      case "verbose":\n        return 0;\n      case "info":\n        return 1;\n      case "warning":\n        return 2;\n      case "error":\n        return 3;\n      case "fatal":\n        return 4;\n      default:\n        throw new Error(`unsupported logging level: ${logLevel}`);\n    }\n  };\n  var isGpuBufferSupportedType = (type) => type === "float32" || type === "float16" || type === "int32" || type === "int64" || type === "uint32" || type === "uint8" || type === "bool";\n  var dataLocationStringToEnum = (location) => {\n    switch (location) {\n      case "none":\n        return 0;\n      case "cpu":\n        return 1;\n      case "cpu-pinned":\n        return 2;\n      case "texture":\n        return 3;\n      case "gpu-buffer":\n        return 4;\n      default:\n        throw new Error(`unsupported data location: ${location}`);\n    }\n  };\n\n  // web/lib/wasm/wasm-utils-load-file.ts\n  init_fs();\n\n  // nodejs-ignore:node:fs/promises\n  var readFile2 = void 0;\n\n  // web/lib/wasm/wasm-utils-load-file.ts\n  var loadFile = async (file) => {\n    if (typeof file === "string") {\n      if (typeof process !== "undefined" && process.versions && process.versions.node) {\n        try {\n          return new Uint8Array(await readFile2(file));\n        } catch (e) {\n          if (e.code === "ERR_FS_FILE_TOO_LARGE") {\n            const stream = createReadStream(file);\n            const chunks = [];\n            for await (const chunk of stream) {\n              chunks.push(chunk);\n            }\n            return new Uint8Array(Buffer.concat(chunks));\n          }\n          throw e;\n        }\n      } else {\n        const response = await fetch(file);\n        if (!response.ok) {\n          throw new Error(`failed to load external data file: ${file}`);\n        }\n        const contentLengthHeader = response.headers.get("Content-Length");\n        const fileSize = contentLengthHeader ? parseInt(contentLengthHeader, 10) : 0;\n        if (fileSize < 1073741824) {\n          return new Uint8Array(await response.arrayBuffer());\n        } else {\n          if (!response.body) {\n            throw new Error(`failed to load external data file: ${file}, no response body.`);\n          }\n          const reader = response.body.getReader();\n          let buffer;\n          try {\n            buffer = new ArrayBuffer(fileSize);\n          } catch (e) {\n            if (e instanceof RangeError) {\n              const pages = Math.ceil(fileSize / 65536);\n              buffer = new WebAssembly.Memory({ initial: pages, maximum: pages }).buffer;\n            } else {\n              throw e;\n            }\n          }\n          let offset = 0;\n          while (true) {\n            const { done, value } = await reader.read();\n            if (done) {\n              break;\n            }\n            const chunkSize = value.byteLength;\n            const chunk = new Uint8Array(buffer, offset, chunkSize);\n            chunk.set(value);\n            offset += chunkSize;\n          }\n          return new Uint8Array(buffer, 0, fileSize);\n        }\n      }\n    } else if (file instanceof Blob) {\n      return new Uint8Array(await file.arrayBuffer());\n    } else if (file instanceof Uint8Array) {\n      return file;\n    } else {\n      return new Uint8Array(file);\n    }\n  };\n\n  // web/lib/wasm/wasm-core-impl.ts\n  var initOrt = (numThreads, loggingLevel) => {\n    const errorCode = getInstance()._OrtInit(numThreads, loggingLevel);\n    if (errorCode !== 0) {\n      checkLastError("Can\'t initialize onnxruntime.");\n    }\n  };\n  var initRuntime = async (env) => {\n    initOrt(env.wasm.numThreads, logLevelStringToEnum(env.logLevel));\n  };\n  var initEp = async (env, epName) => {\n    if (false) {\n      if (typeof navigator === "undefined" || !navigator.gpu) {\n        throw new Error("WebGPU is not supported in current environment");\n      }\n      const adapter = await navigator.gpu.requestAdapter();\n      if (!adapter) {\n        throw new Error(\n          \'Failed to get GPU adapter. You may need to enable flag "--enable-unsafe-webgpu" if you are using Chrome.\'\n        );\n      }\n      if (!env.wasm.simd) {\n        throw new Error(\n          "Not supported for WebGPU=ON and SIMD=OFF. Please set `env.wasm.simd` to true when using `webgpu` EP"\n        );\n      }\n      const initJsep = null.init;\n      await initJsep(getInstance(), env, adapter);\n    }\n  };\n  var activeSessions = /* @__PURE__ */ new Map();\n  var getSessionInputOutputCount = (sessionHandle) => {\n    const wasm2 = getInstance();\n    const stack = wasm2.stackSave();\n    try {\n      const dataOffset = wasm2.stackAlloc(8);\n      const errorCode = wasm2._OrtGetInputOutputCount(sessionHandle, dataOffset, dataOffset + 4);\n      if (errorCode !== 0) {\n        checkLastError("Can\'t get session input/output count.");\n      }\n      return [wasm2.HEAP32[dataOffset / 4], wasm2.HEAP32[dataOffset / 4 + 1]];\n    } finally {\n      wasm2.stackRestore(stack);\n    }\n  };\n  var copyFromExternalBuffer = (model) => {\n    const wasm2 = getInstance();\n    const modelDataOffset = wasm2._malloc(model.byteLength);\n    if (modelDataOffset === 0) {\n      throw new Error(`Can\'t create a session. failed to allocate a buffer of size ${model.byteLength}.`);\n    }\n    wasm2.HEAPU8.set(model, modelDataOffset);\n    return [modelDataOffset, model.byteLength];\n  };\n  var createSession = async (modelData, options) => {\n    let modelDataOffset, modelDataLength;\n    const wasm2 = getInstance();\n    if (Array.isArray(modelData)) {\n      [modelDataOffset, modelDataLength] = modelData;\n    } else if (modelData.buffer === wasm2.HEAPU8.buffer) {\n      [modelDataOffset, modelDataLength] = [modelData.byteOffset, modelData.byteLength];\n    } else {\n      [modelDataOffset, modelDataLength] = copyFromExternalBuffer(modelData);\n    }\n    let sessionHandle = 0;\n    let sessionOptionsHandle = 0;\n    let ioBindingHandle = 0;\n    let allocs = [];\n    const inputNamesUTF8Encoded = [];\n    const outputNamesUTF8Encoded = [];\n    try {\n      [sessionOptionsHandle, allocs] = setSessionOptions(options);\n      if (options?.externalData && wasm2.mountExternalData) {\n        const loadingPromises = [];\n        for (const file of options.externalData) {\n          const path = typeof file === "string" ? file : file.path;\n          loadingPromises.push(loadFile(typeof file === "string" ? file : file.data).then((data) => {\n            wasm2.mountExternalData(path, data);\n          }));\n        }\n        await Promise.all(loadingPromises);\n      }\n      sessionHandle = await wasm2._OrtCreateSession(modelDataOffset, modelDataLength, sessionOptionsHandle);\n      if (sessionHandle === 0) {\n        checkLastError("Can\'t create a session.");\n      }\n      const [inputCount, outputCount] = getSessionInputOutputCount(sessionHandle);\n      const enableGraphCapture = !!options?.enableGraphCapture;\n      const inputNames = [];\n      const outputNames = [];\n      const outputPreferredLocations = [];\n      for (let i = 0; i < inputCount; i++) {\n        const name = wasm2._OrtGetInputName(sessionHandle, i);\n        if (name === 0) {\n          checkLastError("Can\'t get an input name.");\n        }\n        inputNamesUTF8Encoded.push(name);\n        inputNames.push(wasm2.UTF8ToString(name));\n      }\n      for (let i = 0; i < outputCount; i++) {\n        const name = wasm2._OrtGetOutputName(sessionHandle, i);\n        if (name === 0) {\n          checkLastError("Can\'t get an output name.");\n        }\n        outputNamesUTF8Encoded.push(name);\n        const nameString = wasm2.UTF8ToString(name);\n        outputNames.push(nameString);\n        if (false) {\n          if (enableGraphCapture && options?.preferredOutputLocation === void 0) {\n            outputPreferredLocations.push("gpu-buffer");\n            continue;\n          }\n          const location = typeof options?.preferredOutputLocation === "string" ? options.preferredOutputLocation : options?.preferredOutputLocation?.[nameString] ?? "cpu";\n          if (location !== "cpu" && location !== "cpu-pinned" && location !== "gpu-buffer") {\n            throw new Error(`Not supported preferred output location: ${location}.`);\n          }\n          if (enableGraphCapture && location !== "gpu-buffer") {\n            throw new Error(`Not supported preferred output location: ${location}. Only \'gpu-buffer\' location is supported when enableGraphCapture is true.`);\n          }\n          outputPreferredLocations.push(location);\n        }\n      }\n      let bindingState = null;\n      if (false) {\n        ioBindingHandle = wasm2._OrtCreateBinding(sessionHandle);\n        if (ioBindingHandle === 0) {\n          checkLastError("Can\'t create IO binding.");\n        }\n        bindingState = {\n          handle: ioBindingHandle,\n          outputPreferredLocations,\n          outputPreferredLocationsEncoded: outputPreferredLocations.map((l) => dataLocationStringToEnum(l))\n        };\n      }\n      activeSessions.set(\n        sessionHandle,\n        [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded, bindingState, enableGraphCapture, false]\n      );\n      return [sessionHandle, inputNames, outputNames];\n    } catch (e) {\n      inputNamesUTF8Encoded.forEach((buf) => wasm2._OrtFree(buf));\n      outputNamesUTF8Encoded.forEach((buf) => wasm2._OrtFree(buf));\n      if (ioBindingHandle !== 0) {\n        wasm2._OrtReleaseBinding(ioBindingHandle);\n      }\n      if (sessionHandle !== 0) {\n        wasm2._OrtReleaseSession(sessionHandle);\n      }\n      throw e;\n    } finally {\n      wasm2._free(modelDataOffset);\n      if (sessionOptionsHandle !== 0) {\n        wasm2._OrtReleaseSessionOptions(sessionOptionsHandle);\n      }\n      allocs.forEach((alloc) => wasm2._free(alloc));\n      wasm2.unmountExternalData?.();\n    }\n  };\n  var releaseSession = (sessionId) => {\n    const wasm2 = getInstance();\n    const session = activeSessions.get(sessionId);\n    if (!session) {\n      throw new Error(`cannot release session. invalid session id: ${sessionId}`);\n    }\n    const [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded, ioBindingState, enableGraphCapture] = session;\n    if (ioBindingState) {\n      if (enableGraphCapture) {\n        wasm2._OrtClearBoundOutputs(ioBindingState.handle);\n      }\n      wasm2._OrtReleaseBinding(ioBindingState.handle);\n    }\n    wasm2.jsepOnReleaseSession?.(sessionId);\n    inputNamesUTF8Encoded.forEach((buf) => wasm2._OrtFree(buf));\n    outputNamesUTF8Encoded.forEach((buf) => wasm2._OrtFree(buf));\n    wasm2._OrtReleaseSession(sessionHandle);\n    activeSessions.delete(sessionId);\n  };\n  var prepareInputOutputTensor = (tensor, tensorHandles, allocs, sessionId, index, enableGraphCapture = false) => {\n    if (!tensor) {\n      tensorHandles.push(0);\n      return;\n    }\n    const wasm2 = getInstance();\n    const dataType = tensor[0];\n    const dims = tensor[1];\n    const location = tensor[3];\n    let rawData;\n    let dataByteLength;\n    if (dataType === "string" && location === "gpu-buffer") {\n      throw new Error("String tensor is not supported on GPU.");\n    }\n    if (enableGraphCapture && location !== "gpu-buffer") {\n      throw new Error(\n        `External buffer must be provided for input/output index ${index} when enableGraphCapture is true.`\n      );\n    }\n    if (location === "gpu-buffer") {\n      const gpuBuffer = tensor[2].gpuBuffer;\n      const elementSizeInBytes = getTensorElementSize(tensorDataTypeStringToEnum(dataType));\n      dataByteLength = dims.reduce((a, b) => a * b, 1) * elementSizeInBytes;\n      rawData = wasm2.jsepRegisterBuffer(sessionId, index, gpuBuffer, dataByteLength);\n    } else {\n      const data = tensor[2];\n      if (Array.isArray(data)) {\n        dataByteLength = 4 * data.length;\n        rawData = wasm2._malloc(dataByteLength);\n        allocs.push(rawData);\n        let dataIndex = rawData / 4;\n        for (let i = 0; i < data.length; i++) {\n          if (typeof data[i] !== "string") {\n            throw new TypeError(`tensor data at index ${i} is not a string`);\n          }\n          wasm2.HEAPU32[dataIndex++] = allocWasmString(data[i], allocs);\n        }\n      } else {\n        dataByteLength = data.byteLength;\n        rawData = wasm2._malloc(dataByteLength);\n        allocs.push(rawData);\n        wasm2.HEAPU8.set(new Uint8Array(data.buffer, data.byteOffset, dataByteLength), rawData);\n      }\n    }\n    const stack = wasm2.stackSave();\n    const dimsOffset = wasm2.stackAlloc(4 * dims.length);\n    try {\n      let dimIndex = dimsOffset / 4;\n      dims.forEach((d) => wasm2.HEAP32[dimIndex++] = d);\n      const tensor2 = wasm2._OrtCreateTensor(\n        tensorDataTypeStringToEnum(dataType),\n        rawData,\n        dataByteLength,\n        dimsOffset,\n        dims.length,\n        dataLocationStringToEnum(location)\n      );\n      if (tensor2 === 0) {\n        checkLastError(`Can\'t create tensor for input/output. session=${sessionId}, index=${index}.`);\n      }\n      tensorHandles.push(tensor2);\n    } finally {\n      wasm2.stackRestore(stack);\n    }\n  };\n  var run = async (sessionId, inputIndices, inputTensors, outputIndices, outputTensors, options) => {\n    const wasm2 = getInstance();\n    const session = activeSessions.get(sessionId);\n    if (!session) {\n      throw new Error(`cannot run inference. invalid session id: ${sessionId}`);\n    }\n    const sessionHandle = session[0];\n    const inputNamesUTF8Encoded = session[1];\n    const outputNamesUTF8Encoded = session[2];\n    const ioBindingState = session[3];\n    const enableGraphCapture = session[4];\n    const inputOutputBound = session[5];\n    const inputCount = inputIndices.length;\n    const outputCount = outputIndices.length;\n    let runOptionsHandle = 0;\n    let runOptionsAllocs = [];\n    const inputTensorHandles = [];\n    const outputTensorHandles = [];\n    const inputOutputAllocs = [];\n    const beforeRunStack = wasm2.stackSave();\n    const inputValuesOffset = wasm2.stackAlloc(inputCount * 4);\n    const inputNamesOffset = wasm2.stackAlloc(inputCount * 4);\n    const outputValuesOffset = wasm2.stackAlloc(outputCount * 4);\n    const outputNamesOffset = wasm2.stackAlloc(outputCount * 4);\n    try {\n      [runOptionsHandle, runOptionsAllocs] = setRunOptions(options);\n      for (let i = 0; i < inputCount; i++) {\n        prepareInputOutputTensor(\n          inputTensors[i],\n          inputTensorHandles,\n          inputOutputAllocs,\n          sessionId,\n          inputIndices[i],\n          enableGraphCapture\n        );\n      }\n      for (let i = 0; i < outputCount; i++) {\n        prepareInputOutputTensor(\n          outputTensors[i],\n          outputTensorHandles,\n          inputOutputAllocs,\n          sessionId,\n          inputCount + outputIndices[i],\n          enableGraphCapture\n        );\n      }\n      let inputValuesIndex = inputValuesOffset / 4;\n      let inputNamesIndex = inputNamesOffset / 4;\n      let outputValuesIndex = outputValuesOffset / 4;\n      let outputNamesIndex = outputNamesOffset / 4;\n      for (let i = 0; i < inputCount; i++) {\n        wasm2.HEAPU32[inputValuesIndex++] = inputTensorHandles[i];\n        wasm2.HEAPU32[inputNamesIndex++] = inputNamesUTF8Encoded[inputIndices[i]];\n      }\n      for (let i = 0; i < outputCount; i++) {\n        wasm2.HEAPU32[outputValuesIndex++] = outputTensorHandles[i];\n        wasm2.HEAPU32[outputNamesIndex++] = outputNamesUTF8Encoded[outputIndices[i]];\n      }\n      if (false) {\n        const { handle, outputPreferredLocations, outputPreferredLocationsEncoded } = ioBindingState;\n        if (inputNamesUTF8Encoded.length !== inputCount) {\n          throw new Error(`input count from feeds (${inputCount}) is expected to be always equal to model\'s input count (${inputNamesUTF8Encoded.length}).`);\n        }\n        for (let i = 0; i < inputCount; i++) {\n          const index = inputIndices[i];\n          const errorCode2 = await wasm2._OrtBindInput(handle, inputNamesUTF8Encoded[index], inputTensorHandles[i]);\n          if (errorCode2 !== 0) {\n            checkLastError(`Can\'t bind input[${i}] for session=${sessionId}.`);\n          }\n        }\n        for (let i = 0; i < outputCount; i++) {\n          const index = outputIndices[i];\n          const location = outputTensors[i]?.[3];\n          if (location) {\n            const errorCode2 = wasm2._OrtBindOutput(handle, outputNamesUTF8Encoded[index], outputTensorHandles[i], 0);\n            if (errorCode2 !== 0) {\n              checkLastError(`Can\'t bind pre-allocated output[${i}] for session=${sessionId}.`);\n            }\n          } else {\n            const errorCode2 = wasm2._OrtBindOutput(handle, outputNamesUTF8Encoded[index], 0, outputPreferredLocationsEncoded[index]);\n            if (errorCode2 !== 0) {\n              checkLastError(`Can\'t bind output[${i}] to ${outputPreferredLocations[i]} for session=${sessionId}.`);\n            }\n          }\n        }\n        activeSessions.set(\n          sessionId,\n          [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded, ioBindingState, enableGraphCapture, true]\n        );\n      }\n      wasm2.jsepOnRunStart?.(sessionHandle);\n      let errorCode;\n      if (false) {\n        errorCode = await wasm2._OrtRunWithBinding(\n          sessionHandle,\n          ioBindingState.handle,\n          outputCount,\n          outputValuesOffset,\n          runOptionsHandle\n        );\n      } else {\n        errorCode = await wasm2._OrtRun(\n          sessionHandle,\n          inputNamesOffset,\n          inputValuesOffset,\n          inputCount,\n          outputNamesOffset,\n          outputCount,\n          outputValuesOffset,\n          runOptionsHandle\n        );\n      }\n      if (errorCode !== 0) {\n        checkLastError("failed to call OrtRun().");\n      }\n      const output = [];\n      for (let i = 0; i < outputCount; i++) {\n        const tensor = wasm2.HEAPU32[outputValuesOffset / 4 + i];\n        if (tensor === outputTensorHandles[i]) {\n          output.push(outputTensors[i]);\n          continue;\n        }\n        const beforeGetTensorDataStack = wasm2.stackSave();\n        const tensorDataOffset = wasm2.stackAlloc(4 * 4);\n        let keepOutputTensor = false;\n        let type, dataOffset = 0;\n        try {\n          const errorCode2 = wasm2._OrtGetTensorData(\n            tensor,\n            tensorDataOffset,\n            tensorDataOffset + 4,\n            tensorDataOffset + 8,\n            tensorDataOffset + 12\n          );\n          if (errorCode2 !== 0) {\n            checkLastError(`Can\'t access output tensor data on index ${i}.`);\n          }\n          let tensorDataIndex = tensorDataOffset / 4;\n          const dataType = wasm2.HEAPU32[tensorDataIndex++];\n          dataOffset = wasm2.HEAPU32[tensorDataIndex++];\n          const dimsOffset = wasm2.HEAPU32[tensorDataIndex++];\n          const dimsLength = wasm2.HEAPU32[tensorDataIndex++];\n          const dims = [];\n          for (let i2 = 0; i2 < dimsLength; i2++) {\n            dims.push(wasm2.HEAPU32[dimsOffset / 4 + i2]);\n          }\n          wasm2._OrtFree(dimsOffset);\n          const size = dims.reduce((a, b) => a * b, 1);\n          type = tensorDataTypeEnumToString(dataType);\n          const preferredLocation = ioBindingState?.outputPreferredLocations[outputIndices[i]];\n          if (type === "string") {\n            if (preferredLocation === "gpu-buffer") {\n              throw new Error("String tensor is not supported on GPU.");\n            }\n            const stringData = [];\n            let dataIndex = dataOffset / 4;\n            for (let i2 = 0; i2 < size; i2++) {\n              const offset = wasm2.HEAPU32[dataIndex++];\n              const maxBytesToRead = i2 === size - 1 ? void 0 : wasm2.HEAPU32[dataIndex] - offset;\n              stringData.push(wasm2.UTF8ToString(offset, maxBytesToRead));\n            }\n            output.push([type, dims, stringData, "cpu"]);\n          } else {\n            if (preferredLocation === "gpu-buffer" && size > 0) {\n              const gpuBuffer = wasm2.jsepGetBuffer(dataOffset);\n              const elementSize = getTensorElementSize(dataType);\n              if (elementSize === void 0 || !isGpuBufferSupportedType(type)) {\n                throw new Error(`Unsupported data type: ${type}`);\n              }\n              keepOutputTensor = true;\n              output.push([\n                type,\n                dims,\n                {\n                  gpuBuffer,\n                  download: wasm2.jsepCreateDownloader(gpuBuffer, size * elementSize, type),\n                  dispose: () => {\n                    wasm2._OrtReleaseTensor(tensor);\n                  }\n                },\n                "gpu-buffer"\n              ]);\n            } else {\n              const typedArrayConstructor = tensorTypeToTypedArrayConstructor(type);\n              const data = new typedArrayConstructor(size);\n              new Uint8Array(data.buffer, data.byteOffset, data.byteLength).set(wasm2.HEAPU8.subarray(dataOffset, dataOffset + data.byteLength));\n              output.push([type, dims, data, "cpu"]);\n            }\n          }\n        } finally {\n          wasm2.stackRestore(beforeGetTensorDataStack);\n          if (type === "string" && dataOffset) {\n            wasm2._free(dataOffset);\n          }\n          if (!keepOutputTensor) {\n            wasm2._OrtReleaseTensor(tensor);\n          }\n        }\n      }\n      if (ioBindingState && !enableGraphCapture) {\n        wasm2._OrtClearBoundOutputs(ioBindingState.handle);\n        activeSessions.set(\n          sessionId,\n          [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded, ioBindingState, enableGraphCapture, false]\n        );\n      }\n      return output;\n    } finally {\n      wasm2.stackRestore(beforeRunStack);\n      inputTensorHandles.forEach((v) => wasm2._OrtReleaseTensor(v));\n      outputTensorHandles.forEach((v) => wasm2._OrtReleaseTensor(v));\n      inputOutputAllocs.forEach((p) => wasm2._free(p));\n      if (runOptionsHandle !== 0) {\n        wasm2._OrtReleaseRunOptions(runOptionsHandle);\n      }\n      runOptionsAllocs.forEach((p) => wasm2._free(p));\n    }\n  };\n  var endProfiling = (sessionId) => {\n    const wasm2 = getInstance();\n    const session = activeSessions.get(sessionId);\n    if (!session) {\n      throw new Error("invalid session id");\n    }\n    const sessionHandle = session[0];\n    const profileFileName = wasm2._OrtEndProfiling(sessionHandle);\n    if (profileFileName === 0) {\n      checkLastError("Can\'t get an profile file name.");\n    }\n    wasm2._OrtFree(profileFileName);\n  };\n  var extractTransferableBuffers = (tensors) => {\n    const buffers = [];\n    for (const tensor of tensors) {\n      const data = tensor[2];\n      if (!Array.isArray(data) && "buffer" in data) {\n        buffers.push(data.buffer);\n      }\n    }\n    return buffers;\n  };\n\n  // web/lib/wasm/proxy-worker/main.ts\n  self.onmessage = (ev) => {\n    const { type, in: message } = ev.data;\n    try {\n      switch (type) {\n        case "init-wasm":\n          initializeWebAssembly(message.wasm).then(\n            () => {\n              initRuntime(message).then(\n                () => {\n                  postMessage({ type });\n                },\n                (err) => {\n                  postMessage({ type, err });\n                }\n              );\n            },\n            (err) => {\n              postMessage({ type, err });\n            }\n          );\n          break;\n        case "init-ep": {\n          const { epName, env } = message;\n          initEp(env, epName).then(\n            () => {\n              postMessage({ type });\n            },\n            (err) => {\n              postMessage({ type, err });\n            }\n          );\n          break;\n        }\n        case "copy-from": {\n          const { buffer } = message;\n          const bufferData = copyFromExternalBuffer(buffer);\n          postMessage({ type, out: bufferData });\n          break;\n        }\n        case "create": {\n          const { model, options } = message;\n          createSession(model, options).then(\n            (sessionMetadata) => {\n              postMessage({ type, out: sessionMetadata });\n            },\n            (err) => {\n              postMessage({ type, err });\n            }\n          );\n          break;\n        }\n        case "release":\n          releaseSession(message);\n          postMessage({ type });\n          break;\n        case "run": {\n          const { sessionId, inputIndices, inputs, outputIndices, options } = message;\n          run(sessionId, inputIndices, inputs, outputIndices, new Array(outputIndices.length).fill(null), options).then(\n            (outputs) => {\n              if (outputs.some((o) => o[3] !== "cpu")) {\n                postMessage({ type, err: "Proxy does not support non-cpu tensor location." });\n              } else {\n                postMessage(\n                  { type, out: outputs },\n                  extractTransferableBuffers([...inputs, ...outputs])\n                );\n              }\n            },\n            (err) => {\n              postMessage({ type, err });\n            }\n          );\n          break;\n        }\n        case "end-profiling":\n          endProfiling(message);\n          postMessage({ type });\n          break;\n        default:\n      }\n    } catch (err) {\n      postMessage({ type, err });\n    }\n  };\n})();\n//# sourceMappingURL=data:application/json;base64,\n';
  }
});

// web/lib/wasm/proxy-wrapper.ts
var isProxy, proxyWorker, initializing2, initialized2, aborted2, initWasmCallbacks, queuedCallbacks, enqueueCallbacks, ensureWorker, onProxyWorkerMessage, scriptSrc, initializeWebAssemblyAndOrtRuntime, initializeOrtEp, copyFromExternalBuffer2, createSession2, releaseSession2, run2, endProfiling2;
var init_proxy_wrapper = __esm({
  "web/lib/wasm/proxy-wrapper.ts"() {
    "use strict";
    init_esm();
    init_wasm_core_impl();
    init_wasm_factory();
    isProxy = () => !!env2.wasm.proxy && typeof document !== "undefined";
    initializing2 = false;
    initialized2 = false;
    aborted2 = false;
    queuedCallbacks = /* @__PURE__ */ new Map();
    enqueueCallbacks = (type, callbacks) => {
      const queue = queuedCallbacks.get(type);
      if (queue) {
        queue.push(callbacks);
      } else {
        queuedCallbacks.set(type, [callbacks]);
      }
    };
    ensureWorker = () => {
      if (initializing2 || !initialized2 || aborted2 || !proxyWorker) {
        throw new Error("worker not ready");
      }
    };
    onProxyWorkerMessage = (ev) => {
      switch (ev.data.type) {
        case "init-wasm":
          initializing2 = false;
          if (ev.data.err) {
            aborted2 = true;
            initWasmCallbacks[1](ev.data.err);
          } else {
            initialized2 = true;
            initWasmCallbacks[0]();
          }
          break;
        case "init-ep":
        case "copy-from":
        case "create":
        case "release":
        case "run":
        case "end-profiling": {
          const callbacks = queuedCallbacks.get(ev.data.type);
          if (ev.data.err) {
            callbacks.shift()[1](ev.data.err);
          } else {
            callbacks.shift()[0](ev.data.out);
          }
          break;
        }
        default:
      }
    };
    scriptSrc = typeof document !== "undefined" ? document?.currentScript?.src : void 0;
    initializeWebAssemblyAndOrtRuntime = async () => {
      if (initialized2) {
        return;
      }
      if (initializing2) {
        throw new Error("multiple calls to 'initWasm()' detected.");
      }
      if (aborted2) {
        throw new Error("previous call to 'initWasm()' failed.");
      }
      initializing2 = true;
      if (isProxy()) {
        if (env2.wasm.wasmPaths === void 0) {
          if (scriptSrc && scriptSrc.indexOf("blob:") !== 0) {
            env2.wasm.wasmPaths = scriptSrc.substr(0, +scriptSrc.lastIndexOf("/") + 1);
          }
        }
        return new Promise((resolve, reject) => {
          proxyWorker?.terminate();
          const workerUrl = URL.createObjectURL(new Blob(
            [
              // This require() function is handled by esbuild plugin to load file content as string.
              // eslint-disable-next-line @typescript-eslint/no-require-imports
              require_main()
            ],
            { type: "text/javascript" }
          ));
          proxyWorker = new Worker(workerUrl, { name: "ort-wasm-proxy-worker" });
          proxyWorker.onerror = (ev) => reject(ev);
          proxyWorker.onmessage = onProxyWorkerMessage;
          URL.revokeObjectURL(workerUrl);
          initWasmCallbacks = [resolve, reject];
          const message = { type: "init-wasm", in: env2 };
          proxyWorker.postMessage(message);
        });
      } else {
        try {
          await initializeWebAssembly(env2.wasm);
          await initRuntime(env2);
          initialized2 = true;
        } catch (e) {
          aborted2 = true;
          throw e;
        } finally {
          initializing2 = false;
        }
      }
    };
    initializeOrtEp = async (epName) => {
      if (isProxy()) {
        ensureWorker();
        return new Promise((resolve, reject) => {
          enqueueCallbacks("init-ep", [resolve, reject]);
          const message = { type: "init-ep", in: { epName, env: env2 } };
          proxyWorker.postMessage(message);
        });
      } else {
        await initEp(env2, epName);
      }
    };
    copyFromExternalBuffer2 = async (buffer) => {
      if (isProxy()) {
        ensureWorker();
        return new Promise((resolve, reject) => {
          enqueueCallbacks("copy-from", [resolve, reject]);
          const message = { type: "copy-from", in: { buffer } };
          proxyWorker.postMessage(message, [buffer.buffer]);
        });
      } else {
        return copyFromExternalBuffer(buffer);
      }
    };
    createSession2 = async (model, options) => {
      if (isProxy()) {
        if (options?.preferredOutputLocation) {
          throw new Error('session option "preferredOutputLocation" is not supported for proxy.');
        }
        ensureWorker();
        return new Promise((resolve, reject) => {
          enqueueCallbacks("create", [resolve, reject]);
          const message = { type: "create", in: { model, options } };
          const transferable = [];
          if (model instanceof Uint8Array) {
            transferable.push(model.buffer);
          }
          proxyWorker.postMessage(message, transferable);
        });
      } else {
        return createSession(model, options);
      }
    };
    releaseSession2 = async (sessionId) => {
      if (isProxy()) {
        ensureWorker();
        return new Promise((resolve, reject) => {
          enqueueCallbacks("release", [resolve, reject]);
          const message = { type: "release", in: sessionId };
          proxyWorker.postMessage(message);
        });
      } else {
        releaseSession(sessionId);
      }
    };
    run2 = async (sessionId, inputIndices, inputs, outputIndices, outputs, options) => {
      if (isProxy()) {
        if (inputs.some((t) => t[3] !== "cpu")) {
          throw new Error("input tensor on GPU is not supported for proxy.");
        }
        if (outputs.some((t) => t)) {
          throw new Error("pre-allocated output tensor is not supported for proxy.");
        }
        ensureWorker();
        return new Promise((resolve, reject) => {
          enqueueCallbacks("run", [resolve, reject]);
          const serializableInputs = inputs;
          const message = { type: "run", in: { sessionId, inputIndices, inputs: serializableInputs, outputIndices, options } };
          proxyWorker.postMessage(message, extractTransferableBuffers(serializableInputs));
        });
      } else {
        return run(sessionId, inputIndices, inputs, outputIndices, outputs, options);
      }
    };
    endProfiling2 = async (sessionId) => {
      if (isProxy()) {
        ensureWorker();
        return new Promise((resolve, reject) => {
          enqueueCallbacks("end-profiling", [resolve, reject]);
          const message = { type: "end-profiling", in: sessionId };
          proxyWorker.postMessage(message);
        });
      } else {
        endProfiling(sessionId);
      }
    };
  }
});

// web/lib/wasm/session-handler-inference.ts
var encodeTensorMetadata, decodeTensorMetadata, OnnxruntimeWebAssemblySessionHandler;
var init_session_handler_inference = __esm({
  "web/lib/wasm/session-handler-inference.ts"() {
    "use strict";
    init_esm();
    init_proxy_wrapper();
    init_wasm_common();
    init_wasm_utils_load_file();
    encodeTensorMetadata = (tensor, getName) => {
      switch (tensor.location) {
        case "cpu":
          return [tensor.type, tensor.dims, tensor.data, "cpu"];
        case "gpu-buffer":
          return [tensor.type, tensor.dims, { gpuBuffer: tensor.gpuBuffer }, "gpu-buffer"];
        default:
          throw new Error(`invalid data location: ${tensor.location} for ${getName()}`);
      }
    };
    decodeTensorMetadata = (tensor) => {
      switch (tensor[3]) {
        case "cpu":
          return new Tensor2(tensor[0], tensor[2], tensor[1]);
        case "gpu-buffer": {
          const dataType = tensor[0];
          if (!isGpuBufferSupportedType(dataType)) {
            throw new Error(`not supported data type: ${dataType} for deserializing GPU tensor`);
          }
          const { gpuBuffer, download, dispose } = tensor[2];
          return Tensor2.fromGpuBuffer(gpuBuffer, { dataType, dims: tensor[1], download, dispose });
        }
        default:
          throw new Error(`invalid data location: ${tensor[3]}`);
      }
    };
    OnnxruntimeWebAssemblySessionHandler = class {
      async fetchModelAndCopyToWasmMemory(path) {
        return copyFromExternalBuffer2(await loadFile(path));
      }
      async loadModel(pathOrBuffer, options) {
        TRACE_FUNC_BEGIN();
        let model;
        if (typeof pathOrBuffer === "string") {
          if (typeof process !== "undefined" && process.versions && process.versions.node) {
            model = await loadFile(pathOrBuffer);
          } else {
            model = await this.fetchModelAndCopyToWasmMemory(pathOrBuffer);
          }
        } else {
          model = pathOrBuffer;
        }
        [this.sessionId, this.inputNames, this.outputNames] = await createSession2(model, options);
        TRACE_FUNC_END();
      }
      async dispose() {
        return releaseSession2(this.sessionId);
      }
      async run(feeds, fetches, options) {
        TRACE_FUNC_BEGIN();
        const inputArray = [];
        const inputIndices = [];
        Object.entries(feeds).forEach((kvp) => {
          const name = kvp[0];
          const tensor = kvp[1];
          const index = this.inputNames.indexOf(name);
          if (index === -1) {
            throw new Error(`invalid input '${name}'`);
          }
          inputArray.push(tensor);
          inputIndices.push(index);
        });
        const outputArray = [];
        const outputIndices = [];
        Object.entries(fetches).forEach((kvp) => {
          const name = kvp[0];
          const tensor = kvp[1];
          const index = this.outputNames.indexOf(name);
          if (index === -1) {
            throw new Error(`invalid output '${name}'`);
          }
          outputArray.push(tensor);
          outputIndices.push(index);
        });
        const inputs = inputArray.map((t, i) => encodeTensorMetadata(t, () => `input "${this.inputNames[inputIndices[i]]}"`));
        const outputs = outputArray.map(
          (t, i) => t ? encodeTensorMetadata(t, () => `output "${this.outputNames[outputIndices[i]]}"`) : null
        );
        const results = await run2(this.sessionId, inputIndices, inputs, outputIndices, outputs, options);
        const resultMap = {};
        for (let i = 0; i < results.length; i++) {
          resultMap[this.outputNames[outputIndices[i]]] = outputArray[i] ?? decodeTensorMetadata(results[i]);
        }
        TRACE_FUNC_END();
        return resultMap;
      }
      startProfiling() {
      }
      endProfiling() {
        void endProfiling2(this.sessionId);
      }
    };
  }
});

// web/lib/backend-wasm.ts
var initializeFlags, OnnxruntimeWebAssemblyBackend;
var init_backend_wasm = __esm({
  "web/lib/backend-wasm.ts"() {
    "use strict";
    init_node_os();
    init_esm();
    init_proxy_wrapper();
    init_session_handler_inference();
    initializeFlags = () => {
      if (typeof env2.wasm.initTimeout !== "number" || env2.wasm.initTimeout < 0) {
        env2.wasm.initTimeout = 0;
      }
      if (typeof env2.wasm.simd !== "boolean") {
        env2.wasm.simd = true;
      }
      if (typeof env2.wasm.proxy !== "boolean") {
        env2.wasm.proxy = false;
      }
      if (typeof env2.wasm.trace !== "boolean") {
        env2.wasm.trace = false;
      }
      if (typeof env2.wasm.numThreads !== "number" || !Number.isInteger(env2.wasm.numThreads) || env2.wasm.numThreads <= 0) {
        if (typeof self !== "undefined" && !self.crossOriginIsolated || typeof process !== "undefined" && process.versions && process.versions.node) {
          env2.wasm.numThreads = 1;
        }
        const numCpuLogicalCores = typeof navigator === "undefined" ? cpus().length : navigator.hardwareConcurrency;
        env2.wasm.numThreads = Math.min(4, Math.ceil((numCpuLogicalCores || 1) / 2));
      }
    };
    OnnxruntimeWebAssemblyBackend = class {
      /**
       * This function initializes the WebAssembly backend.
       *
       * This function will be called only once for each backend name. It will be called the first time when
       * `ort.InferenceSession.create()` is called with a registered backend name.
       *
       * @param backendName - the registered backend name.
       */
      async init(backendName) {
        initializeFlags();
        await initializeWebAssemblyAndOrtRuntime();
        await initializeOrtEp(backendName);
      }
      async createInferenceSessionHandler(pathOrBuffer, options) {
        const handler = new OnnxruntimeWebAssemblySessionHandler();
        await handler.loadModel(pathOrBuffer, options);
        return Promise.resolve(handler);
      }
    };
  }
});

// web/lib/wasm/wasm-training-core-impl.ts
var NO_TRAIN_FUNCS_MSG, ifErrCodeCheckLastError, createCheckpointHandle, getModelInputOutputCount, getModelInputOutputNamesLoop, getModelInputOutputNames, createTrainingSessionHandle, createAndAllocateTensors, moveOutputToTensorMetadataArr, lazyResetGrad, runTrainStep, runOptimizerStep, runEvalStep, getParametersSize, getContiguousParameters, loadParametersBuffer, releaseTrainingSessionAndCheckpoint;
var init_wasm_training_core_impl = __esm({
  "web/lib/wasm/wasm-training-core-impl.ts"() {
    "use strict";
    init_run_options();
    init_session_options();
    init_wasm_common();
    init_wasm_core_impl();
    init_wasm_factory();
    init_wasm_utils();
    NO_TRAIN_FUNCS_MSG = "Built without training API's enabled. Use the onnxruntime-web/training import for training functionality, and make sure that all the correct artifacts are built & moved to the correct folder if using a custom build. Check https://onnxruntime.ai/docs/build/web.html for more information.";
    ifErrCodeCheckLastError = (errCode, message, checkNeqZero = true) => {
      if (checkNeqZero && errCode !== 0) {
        checkLastError(message);
      } else if (!checkNeqZero && errCode === 0) {
        checkLastError(message);
      }
    };
    createCheckpointHandle = (checkpointData) => {
      const wasm2 = getInstance();
      const [checkpointDataOffset, checkpointDataLength] = checkpointData;
      let checkpointHandle = 0;
      try {
        if (wasm2._OrtTrainingLoadCheckpoint) {
          checkpointHandle = wasm2._OrtTrainingLoadCheckpoint(checkpointDataOffset, checkpointDataLength);
        } else {
          throw new Error(NO_TRAIN_FUNCS_MSG);
        }
        ifErrCodeCheckLastError(checkpointHandle, "Error occurred when trying to create a CheckpointState", false);
        return checkpointHandle;
      } catch (e) {
        if (wasm2._OrtTrainingReleaseCheckpoint && checkpointHandle !== 0) {
          wasm2._OrtTrainingReleaseCheckpoint(checkpointHandle);
        }
        throw e;
      } finally {
        wasm2._OrtFree(checkpointData[0]);
      }
    };
    getModelInputOutputCount = (trainingSessionId, isEvalModel) => {
      const wasm2 = getInstance();
      const stack = wasm2.stackSave();
      try {
        const dataOffset = wasm2.stackAlloc(8);
        if (wasm2._OrtTrainingGetModelInputOutputCount) {
          const errorCode = wasm2._OrtTrainingGetModelInputOutputCount(trainingSessionId, dataOffset, dataOffset + 4, isEvalModel);
          ifErrCodeCheckLastError(errorCode, "Can't get session input/output count.");
          return [wasm2.HEAP32[dataOffset / 4], wasm2.HEAP32[dataOffset / 4 + 1]];
        } else {
          throw new Error(NO_TRAIN_FUNCS_MSG);
        }
      } finally {
        wasm2.stackRestore(stack);
      }
    };
    getModelInputOutputNamesLoop = (trainingSessionId, count, isInput, isEvalModel) => {
      const names = [];
      const wasm2 = getInstance();
      for (let i = 0; i < count; i++) {
        if (wasm2._OrtTrainingGetModelInputOutputName) {
          const name = wasm2._OrtTrainingGetModelInputOutputName(trainingSessionId, i, isInput, isEvalModel);
          ifErrCodeCheckLastError(name, `Can't get input or output name -- is input: ${isInput}, index ${i}`, false);
          names.push(wasm2.UTF8ToString(name));
          wasm2._free(name);
        } else {
          throw new Error(NO_TRAIN_FUNCS_MSG);
        }
      }
      return names;
    };
    getModelInputOutputNames = (trainingSessionId, isEvalModel) => {
      let inputNames = [];
      let outputNames = [];
      const [inputCount, outputCount] = getModelInputOutputCount(trainingSessionId, isEvalModel);
      inputNames = getModelInputOutputNamesLoop(trainingSessionId, inputCount, true, isEvalModel);
      outputNames = getModelInputOutputNamesLoop(trainingSessionId, outputCount, false, isEvalModel);
      return [inputNames, outputNames];
    };
    createTrainingSessionHandle = (checkpointHandle, trainModelData, evalModelData, optimizerModelData, options) => {
      const wasm2 = getInstance();
      let trainingSessionHandle = 0;
      let sessionOptionsHandle = 0;
      let allocs = [];
      try {
        [sessionOptionsHandle, allocs] = setSessionOptions(options);
        if (wasm2._OrtTrainingCreateSession) {
          trainingSessionHandle = wasm2._OrtTrainingCreateSession(
            sessionOptionsHandle,
            checkpointHandle,
            trainModelData[0],
            trainModelData[1],
            evalModelData[0],
            evalModelData[1],
            optimizerModelData[0],
            optimizerModelData[1]
          );
        } else {
          throw new Error(NO_TRAIN_FUNCS_MSG);
        }
        ifErrCodeCheckLastError(trainingSessionHandle, "Error occurred when trying to create a TrainingSession", false);
        return trainingSessionHandle;
      } catch (e) {
        if (wasm2._OrtTrainingReleaseSession && trainingSessionHandle !== 0) {
          wasm2._OrtTrainingReleaseSession(trainingSessionHandle);
        }
        throw e;
      } finally {
        wasm2._free(trainModelData[0]);
        wasm2._free(evalModelData[0]);
        wasm2._free(optimizerModelData[0]);
        if (sessionOptionsHandle !== 0) {
          wasm2._OrtReleaseSessionOptions(sessionOptionsHandle);
        }
        allocs.forEach((alloc) => wasm2._free(alloc));
      }
    };
    createAndAllocateTensors = (trainingSessionId, indices, tensors, tensorHandles, inputOutputAllocs, indexAdd) => {
      const count = indices.length;
      for (let i = 0; i < count; i++) {
        prepareInputOutputTensor(
          tensors[i],
          tensorHandles,
          inputOutputAllocs,
          trainingSessionId,
          indexAdd + indices[i]
        );
      }
      const wasm2 = getInstance();
      const valuesOffset = wasm2.stackAlloc(count * 4);
      let valuesIndex = valuesOffset / 4;
      for (let i = 0; i < count; i++) {
        wasm2.HEAPU32[valuesIndex++] = tensorHandles[i];
      }
      return valuesOffset;
    };
    moveOutputToTensorMetadataArr = (outputValuesOffset, outputCount, outputTensorHandles, outputTensors) => {
      const wasm2 = getInstance();
      const output = [];
      for (let i = 0; i < outputCount; i++) {
        const tensor = wasm2.HEAPU32[outputValuesOffset / 4 + i];
        if (tensor === outputTensorHandles[i]) {
          output.push(outputTensors[i]);
          continue;
        }
        const beforeGetTensorDataStack = wasm2.stackSave();
        const tensorDataOffset = wasm2.stackAlloc(4 * 4);
        let type, dataOffset = 0;
        try {
          const errorCode = wasm2._OrtGetTensorData(
            tensor,
            tensorDataOffset,
            tensorDataOffset + 4,
            tensorDataOffset + 8,
            tensorDataOffset + 12
          );
          ifErrCodeCheckLastError(errorCode, `Can't access output tensor data on index ${i}.`);
          let tensorDataIndex = tensorDataOffset / 4;
          const dataType = wasm2.HEAPU32[tensorDataIndex++];
          dataOffset = wasm2.HEAPU32[tensorDataIndex++];
          const dimsOffset = wasm2.HEAPU32[tensorDataIndex++];
          const dimsLength = wasm2.HEAPU32[tensorDataIndex++];
          const dims = [];
          for (let i2 = 0; i2 < dimsLength; i2++) {
            dims.push(wasm2.HEAPU32[dimsOffset / 4 + i2]);
          }
          wasm2._OrtFree(dimsOffset);
          const size = dims.reduce((a, b) => a * b, 1);
          type = tensorDataTypeEnumToString(dataType);
          if (type === "string") {
            const stringData = [];
            let dataIndex = dataOffset / 4;
            for (let i2 = 0; i2 < size; i2++) {
              const offset = wasm2.HEAPU32[dataIndex++];
              const maxBytesToRead = i2 === size - 1 ? void 0 : wasm2.HEAPU32[dataIndex] - offset;
              stringData.push(wasm2.UTF8ToString(offset, maxBytesToRead));
            }
            output.push([type, dims, stringData, "cpu"]);
          } else {
            const typedArrayConstructor = tensorTypeToTypedArrayConstructor(type);
            const data = new typedArrayConstructor(size);
            new Uint8Array(data.buffer, data.byteOffset, data.byteLength).set(wasm2.HEAPU8.subarray(dataOffset, dataOffset + data.byteLength));
            output.push([type, dims, data, "cpu"]);
          }
        } finally {
          wasm2.stackRestore(beforeGetTensorDataStack);
          if (type === "string" && dataOffset) {
            wasm2._free(dataOffset);
          }
          wasm2._OrtReleaseTensor(tensor);
        }
      }
      return output;
    };
    lazyResetGrad = async (trainingSessionId) => {
      const wasm2 = getInstance();
      if (wasm2._OrtTrainingLazyResetGrad) {
        const errorCode = wasm2._OrtTrainingLazyResetGrad(trainingSessionId);
        ifErrCodeCheckLastError(errorCode, "Can't call lazyResetGrad.");
      } else {
        throw new Error(NO_TRAIN_FUNCS_MSG);
      }
    };
    runTrainStep = async (trainingSessionId, inputIndices, inputTensors, outputIndices, outputTensors, options) => {
      const wasm2 = getInstance();
      const inputCount = inputIndices.length;
      const outputCount = outputIndices.length;
      let runOptionsHandle = 0;
      let runOptionsAllocs = [];
      const inputTensorHandles = [];
      const outputTensorHandles = [];
      const inputOutputAllocs = [];
      const beforeRunStack = wasm2.stackSave();
      try {
        [runOptionsHandle, runOptionsAllocs] = setRunOptions(options);
        const inputValuesOffset = createAndAllocateTensors(
          trainingSessionId,
          inputIndices,
          inputTensors,
          inputTensorHandles,
          inputOutputAllocs,
          0
        );
        const outputValuesOffset = createAndAllocateTensors(
          trainingSessionId,
          outputIndices,
          outputTensors,
          outputTensorHandles,
          inputOutputAllocs,
          inputCount
        );
        if (wasm2._OrtTrainingRunTrainStep) {
          const errorCode = wasm2._OrtTrainingRunTrainStep(
            trainingSessionId,
            inputValuesOffset,
            inputCount,
            outputValuesOffset,
            outputCount,
            runOptionsHandle
          );
          ifErrCodeCheckLastError(errorCode, "failed to call OrtTrainingRunTrainStep in the WebAssembly layer");
        } else {
          throw new Error(NO_TRAIN_FUNCS_MSG);
        }
        return moveOutputToTensorMetadataArr(outputValuesOffset, outputCount, outputTensorHandles, outputTensors);
      } finally {
        wasm2.stackRestore(beforeRunStack);
        inputTensorHandles.forEach((v) => wasm2._OrtReleaseTensor(v));
        outputTensorHandles.forEach((v) => wasm2._OrtReleaseTensor(v));
        inputOutputAllocs.forEach((p) => wasm2._free(p));
        if (runOptionsHandle !== 0) {
          wasm2._OrtReleaseRunOptions(runOptionsHandle);
        }
        runOptionsAllocs.forEach((p) => wasm2._free(p));
      }
    };
    runOptimizerStep = async (trainingSessionId, options) => {
      const wasm2 = getInstance();
      let runOptionsHandle = 0;
      let runOptionsAllocs = [];
      try {
        [runOptionsHandle, runOptionsAllocs] = setRunOptions(options);
        if (wasm2._OrtTrainingOptimizerStep) {
          const errCode = wasm2._OrtTrainingOptimizerStep(trainingSessionId, runOptionsHandle);
          ifErrCodeCheckLastError(errCode, "Failed to call OrtTrainingOptimizerStep in the WebAssembly layer");
        } else {
          throw new Error(NO_TRAIN_FUNCS_MSG);
        }
      } finally {
        if (runOptionsHandle !== 0) {
          wasm2._OrtReleaseRunOptions(runOptionsHandle);
        }
        runOptionsAllocs.forEach((p) => wasm2._free(p));
      }
    };
    runEvalStep = async (trainingSessionId, inputIndices, inputTensors, outputIndices, outputTensors, options) => {
      const wasm2 = getInstance();
      const inputCount = inputIndices.length;
      const outputCount = outputIndices.length;
      let runOptionsHandle = 0;
      let runOptionsAllocs = [];
      const inputTensorHandles = [];
      const outputTensorHandles = [];
      const inputOutputAllocs = [];
      const beforeRunStack = wasm2.stackSave();
      try {
        [runOptionsHandle, runOptionsAllocs] = setRunOptions(options);
        const inputValuesOffset = createAndAllocateTensors(
          trainingSessionId,
          inputIndices,
          inputTensors,
          inputTensorHandles,
          inputOutputAllocs,
          0
        );
        const outputValuesOffset = createAndAllocateTensors(
          trainingSessionId,
          outputIndices,
          outputTensors,
          outputTensorHandles,
          inputOutputAllocs,
          inputCount
        );
        if (wasm2._OrtTrainingEvalStep) {
          const errorCode = wasm2._OrtTrainingEvalStep(
            trainingSessionId,
            inputValuesOffset,
            inputCount,
            outputValuesOffset,
            outputCount,
            runOptionsHandle
          );
          ifErrCodeCheckLastError(errorCode, "failed to call OrtTrainingEvalStep in the WebAssembly layer");
        } else {
          throw new Error(NO_TRAIN_FUNCS_MSG);
        }
        return moveOutputToTensorMetadataArr(outputValuesOffset, outputCount, outputTensorHandles, outputTensors);
      } finally {
        wasm2.stackRestore(beforeRunStack);
        inputTensorHandles.forEach((v) => wasm2._OrtReleaseTensor(v));
        outputTensorHandles.forEach((v) => wasm2._OrtReleaseTensor(v));
        inputOutputAllocs.forEach((p) => wasm2._free(p));
        if (runOptionsHandle !== 0) {
          wasm2._OrtReleaseRunOptions(runOptionsHandle);
        }
        runOptionsAllocs.forEach((p) => wasm2._free(p));
      }
    };
    getParametersSize = (trainingSessionId, trainableOnly) => {
      const wasm2 = getInstance();
      const stack = wasm2.stackSave();
      try {
        const sizeOffset = wasm2.stackAlloc(4);
        if (wasm2._OrtTrainingGetParametersSize) {
          const errorCode = wasm2._OrtTrainingGetParametersSize(trainingSessionId, sizeOffset, trainableOnly);
          ifErrCodeCheckLastError(errorCode, "Can't get parameters size");
          return wasm2.HEAP32[sizeOffset / 4];
        } else {
          throw new Error(NO_TRAIN_FUNCS_MSG);
        }
      } finally {
        wasm2.stackRestore(stack);
      }
    };
    getContiguousParameters = async (trainingSessionId, trainableOnly) => {
      const wasm2 = getInstance();
      const stack = wasm2.stackSave();
      const tensorTypeAsString = "float32";
      const locationAsString = "cpu";
      const parametersSize = getParametersSize(trainingSessionId, trainableOnly);
      let tensor = 0;
      const paramsByteLength = 4 * parametersSize;
      const paramsOffset = wasm2._malloc(paramsByteLength);
      const dims = [parametersSize];
      const dimsOffset = wasm2.stackAlloc(4);
      const dimsIndex = dimsOffset / 4;
      wasm2.HEAP32[dimsIndex] = parametersSize;
      try {
        tensor = wasm2._OrtCreateTensor(
          tensorDataTypeStringToEnum(tensorTypeAsString),
          paramsOffset,
          paramsByteLength,
          dimsOffset,
          dims.length,
          dataLocationStringToEnum(locationAsString)
        );
        ifErrCodeCheckLastError(
          tensor,
          `Can't create tensor for getContiguousParameters. session=${trainingSessionId}.`,
          false
        );
        if (wasm2._OrtTrainingCopyParametersToBuffer) {
          const errCode = wasm2._OrtTrainingCopyParametersToBuffer(trainingSessionId, tensor, parametersSize, trainableOnly);
          ifErrCodeCheckLastError(errCode, "Can't get contiguous parameters.");
        } else {
          throw new Error(NO_TRAIN_FUNCS_MSG);
        }
        const typedArrayConstructor = tensorTypeToTypedArrayConstructor(tensorTypeAsString);
        const data = new typedArrayConstructor(parametersSize);
        const output = [];
        new Uint8Array(data.buffer, data.byteOffset, data.byteLength).set(wasm2.HEAPU8.subarray(paramsOffset, paramsOffset + paramsByteLength));
        output.push([tensorTypeAsString, dims, data, locationAsString]);
        if (output.length !== 1) {
          throw new Error(`something unexpected happened in the getContiguousParameters function. Expected output length of
     one, got ${output.length}`);
        } else {
          return output[0];
        }
      } finally {
        if (tensor !== 0) {
          wasm2._OrtReleaseTensor(tensor);
        }
        wasm2._free(paramsOffset);
        wasm2._free(dimsOffset);
        wasm2.stackRestore(stack);
      }
    };
    loadParametersBuffer = async (trainingSessionId, buffer, trainableOnly) => {
      const wasm2 = getInstance();
      const stack = wasm2.stackSave();
      const tensorTypeAsString = "float32";
      const locationAsString = "cpu";
      const bufferByteLength = buffer.length;
      const bufferCount = bufferByteLength / 4;
      const bufferOffset = wasm2._malloc(bufferByteLength);
      wasm2.HEAPU8.set(buffer, bufferOffset);
      const dimsOffset = wasm2.stackAlloc(4);
      wasm2.HEAP32[dimsOffset / 4] = bufferCount;
      const dimsLength = 1;
      let tensor = 0;
      try {
        tensor = wasm2._OrtCreateTensor(
          tensorDataTypeStringToEnum(tensorTypeAsString),
          bufferOffset,
          bufferByteLength,
          dimsOffset,
          dimsLength,
          dataLocationStringToEnum(locationAsString)
        );
        ifErrCodeCheckLastError(tensor, `Can't create tensor for input/output. session=${trainingSessionId}`, false);
        if (wasm2._OrtTrainingCopyParametersFromBuffer) {
          const errCode = wasm2._OrtTrainingCopyParametersFromBuffer(trainingSessionId, tensor, bufferCount, trainableOnly);
          ifErrCodeCheckLastError(errCode, "Can't copy buffer to parameters.");
        } else {
          throw new Error(NO_TRAIN_FUNCS_MSG);
        }
      } finally {
        if (tensor !== 0) {
          wasm2._OrtReleaseTensor(tensor);
        }
        wasm2.stackRestore(stack);
        wasm2._free(bufferOffset);
        wasm2._free(dimsOffset);
      }
    };
    releaseTrainingSessionAndCheckpoint = (checkpointId, sessionId) => {
      const wasm2 = getInstance();
      if (wasm2._OrtTrainingReleaseSession) {
        wasm2._OrtTrainingReleaseSession(sessionId);
      }
      if (wasm2._OrtTrainingReleaseCheckpoint) {
        wasm2._OrtTrainingReleaseCheckpoint(checkpointId);
      }
    };
  }
});

// web/lib/wasm/session-handler-training.ts
var OnnxruntimeWebAssemblyTrainingSessionHandler;
var init_session_handler_training = __esm({
  "web/lib/wasm/session-handler-training.ts"() {
    "use strict";
    init_session_handler_inference();
    init_wasm_core_impl();
    init_wasm_training_core_impl();
    OnnxruntimeWebAssemblyTrainingSessionHandler = class {
      constructor() {
        this.evalInputNames = [];
        this.evalOutputNames = [];
      }
      async uriOrBufferToHeap(uriOrBuffer) {
        let buffer;
        if (typeof uriOrBuffer === "string") {
          const response = await fetch(uriOrBuffer);
          const arrayBuffer = await response.arrayBuffer();
          buffer = new Uint8Array(arrayBuffer);
        } else {
          buffer = uriOrBuffer;
        }
        return copyFromExternalBuffer(buffer);
      }
      async createTrainingSession(checkpointStateUriOrBuffer, trainModelUriOrBuffer, evalModelUriOrBuffer, optimizerModelUriOrBuffer, options) {
        const checkpointData = await this.uriOrBufferToHeap(checkpointStateUriOrBuffer);
        const trainModelData = await this.uriOrBufferToHeap(trainModelUriOrBuffer);
        let evalModelData = [0, 0];
        let optimizerModelData = [0, 0];
        if (evalModelUriOrBuffer !== "") {
          evalModelData = await this.uriOrBufferToHeap(evalModelUriOrBuffer);
        }
        if (optimizerModelUriOrBuffer !== "") {
          optimizerModelData = await this.uriOrBufferToHeap(optimizerModelUriOrBuffer);
        }
        this.checkpointId = createCheckpointHandle(checkpointData);
        this.sessionId = createTrainingSessionHandle(this.checkpointId, trainModelData, evalModelData, optimizerModelData, options);
        [this.inputNames, this.outputNames] = getModelInputOutputNames(this.sessionId, false);
        if (evalModelUriOrBuffer !== "") {
          [this.evalInputNames, this.evalOutputNames] = getModelInputOutputNames(this.sessionId, true);
        }
      }
      /**
       * Helper method that converts a feeds or fetches datatype to two arrays, one of values and one that stores the
       * corresponding name as a number referring to the index in the list of names provided.
       *
       * @param feeds meant to match either SessionHandler.FeedsType or SessionHandler.FetchesType
       * @param names either inputNames or outputNames
       * @returns a tuple of a list of values and a list of indices.
       */
      convertMapIntoValuesArrayAndIndicesArray(feeds, names, mapFunc) {
        const values = [];
        const indices = [];
        Object.entries(feeds).forEach((kvp) => {
          const name = kvp[0];
          const tensor = kvp[1];
          const index = names.indexOf(name);
          if (index === -1) {
            throw new Error(`invalid input '${name}`);
          }
          values.push(tensor);
          indices.push(index);
        });
        const uList = values.map(mapFunc);
        return [values, indices, uList];
      }
      /**
       * Helper method that converts the TensorMetadata that the wasm-core functions return to the
       * SessionHandler.ReturnType. Any outputs in the provided outputArray that are falsy will be populated with the
       * corresponding result.
       *
       * @param results used to populate the resultMap if there is no value for that outputName already
       * @param outputArray used to populate the resultMap. If null or undefined, use the corresponding result from results
       * @param outputIndices specifies which outputName the corresponding value for outputArray refers to.
       * @returns a map of output names and OnnxValues.
       */
      convertTensorMetadataToReturnType(results, outputArray, outputIndices) {
        const resultMap = {};
        for (let i = 0; i < results.length; i++) {
          resultMap[this.outputNames[outputIndices[i]]] = outputArray[i] ?? decodeTensorMetadata(results[i]);
        }
        return resultMap;
      }
      async lazyResetGrad() {
        await lazyResetGrad(this.sessionId);
      }
      async runTrainStep(feeds, fetches, options) {
        const [, inputIndices, inputs] = this.convertMapIntoValuesArrayAndIndicesArray(
          feeds,
          this.inputNames,
          (t, i) => encodeTensorMetadata(t, () => `input "${this.inputNames[inputIndices[i]]}"`)
        );
        const [outputArray, outputIndices, outputs] = this.convertMapIntoValuesArrayAndIndicesArray(
          fetches,
          this.outputNames,
          (t, i) => t ? encodeTensorMetadata(t, () => `output "${this.outputNames[outputIndices[i]]}"`) : null
        );
        const results = await runTrainStep(this.sessionId, inputIndices, inputs, outputIndices, outputs, options);
        return this.convertTensorMetadataToReturnType(results, outputArray, outputIndices);
      }
      async runOptimizerStep(options) {
        await runOptimizerStep(this.sessionId, options);
      }
      async runEvalStep(feeds, fetches, options) {
        const [, inputIndices, inputs] = this.convertMapIntoValuesArrayAndIndicesArray(
          feeds,
          this.evalInputNames,
          (t, i) => encodeTensorMetadata(t, () => `input "${this.evalInputNames[inputIndices[i]]}"`)
        );
        const [outputArray, outputIndices, outputs] = this.convertMapIntoValuesArrayAndIndicesArray(
          fetches,
          this.evalOutputNames,
          (t, i) => t ? encodeTensorMetadata(t, () => `output "${this.evalOutputNames[outputIndices[i]]}"`) : null
        );
        const results = await runEvalStep(this.sessionId, inputIndices, inputs, outputIndices, outputs, options);
        return this.convertTensorMetadataToReturnType(results, outputArray, outputIndices);
      }
      async getParametersSize(trainableOnly) {
        return getParametersSize(this.sessionId, trainableOnly);
      }
      async loadParametersBuffer(array, trainableOnly) {
        await loadParametersBuffer(this.sessionId, array, trainableOnly);
      }
      async getContiguousParameters(trainableOnly) {
        const tensorResult = await getContiguousParameters(this.sessionId, trainableOnly);
        return decodeTensorMetadata(tensorResult);
      }
      async dispose() {
        return releaseTrainingSessionAndCheckpoint(this.checkpointId, this.sessionId);
      }
    };
  }
});

// web/lib/backend-wasm-training.ts
var backend_wasm_training_exports = {};
__export(backend_wasm_training_exports, {
  wasmBackend: () => wasmBackend
});
var OnnxruntimeTrainingWebAssemblyBackend, wasmBackend;
var init_backend_wasm_training = __esm({
  "web/lib/backend-wasm-training.ts"() {
    "use strict";
    init_backend_wasm();
    init_session_handler_training();
    OnnxruntimeTrainingWebAssemblyBackend = class extends OnnxruntimeWebAssemblyBackend {
      async createTrainingSessionHandler(checkpointStateUriOrBuffer, trainModelUriOrBuffer, evalModelUriOrBuffer, optimizerModelUriOrBuffer, options) {
        const handler = new OnnxruntimeWebAssemblyTrainingSessionHandler();
        await handler.createTrainingSession(
          checkpointStateUriOrBuffer,
          trainModelUriOrBuffer,
          evalModelUriOrBuffer,
          optimizerModelUriOrBuffer,
          options
        );
        return Promise.resolve(handler);
      }
    };
    wasmBackend = new OnnxruntimeTrainingWebAssemblyBackend();
  }
});

// web/lib/index.ts
var lib_exports = {};
__export(lib_exports, {
  InferenceSession: () => InferenceSession2,
  TRACE: () => TRACE,
  TRACE_FUNC_BEGIN: () => TRACE_FUNC_BEGIN,
  TRACE_FUNC_END: () => TRACE_FUNC_END,
  Tensor: () => Tensor2,
  TrainingSession: () => TrainingSession2,
  default: () => lib_default,
  env: () => env2,
  registerBackend: () => registerBackend
});
module.exports = __toCommonJS(lib_exports);
init_esm();
init_esm();
init_esm();

// web/lib/version.ts
var version2 = "1.18.0";

// web/lib/index.ts
var lib_default = esm_exports;
if (false) {
  const onnxjsBackend = null.onnxjsBackend;
  registerBackend("webgl", onnxjsBackend, -10);
}
if (true) {
  const wasmBackend2 = false ? null.wasmBackend : (init_backend_wasm_training(), __toCommonJS(backend_wasm_training_exports)).wasmBackend;
  if (false) {
    registerBackend("webgpu", wasmBackend2, 5);
    registerBackend("webnn", wasmBackend2, 5);
  }
  registerBackend("cpu", wasmBackend2, 10);
  registerBackend("wasm", wasmBackend2, 10);
}
Object.defineProperty(env2.versions, "web", { value: version2, enumerable: true });
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vbm9kZV9tb2R1bGVzL29ubnhydW50aW1lLWNvbW1vbi9saWIvYmFja2VuZC1pbXBsLnRzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy9vbm54cnVudGltZS1jb21tb24vbGliL2JhY2tlbmQudHMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzL29ubnhydW50aW1lLWNvbW1vbi9saWIvdmVyc2lvbi50cyIsICIuLi8uLi9ub2RlX21vZHVsZXMvb25ueHJ1bnRpbWUtY29tbW9uL2xpYi9lbnYtaW1wbC50cyIsICIuLi8uLi9ub2RlX21vZHVsZXMvb25ueHJ1bnRpbWUtY29tbW9uL2xpYi9lbnYudHMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzL29ubnhydW50aW1lLWNvbW1vbi9saWIvdGVuc29yLWNvbnZlcnNpb24taW1wbC50cyIsICIuLi8uLi9ub2RlX21vZHVsZXMvb25ueHJ1bnRpbWUtY29tbW9uL2xpYi90ZW5zb3ItZmFjdG9yeS1pbXBsLnRzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy9vbm54cnVudGltZS1jb21tb24vbGliL3RlbnNvci1pbXBsLXR5cGUtbWFwcGluZy50cyIsICIuLi8uLi9ub2RlX21vZHVsZXMvb25ueHJ1bnRpbWUtY29tbW9uL2xpYi90ZW5zb3ItdXRpbHMtaW1wbC50cyIsICIuLi8uLi9ub2RlX21vZHVsZXMvb25ueHJ1bnRpbWUtY29tbW9uL2xpYi90ZW5zb3ItaW1wbC50cyIsICIuLi8uLi9ub2RlX21vZHVsZXMvb25ueHJ1bnRpbWUtY29tbW9uL2xpYi90ZW5zb3IudHMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzL29ubnhydW50aW1lLWNvbW1vbi9saWIvdHJhY2UudHMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzL29ubnhydW50aW1lLWNvbW1vbi9saWIvaW5mZXJlbmNlLXNlc3Npb24taW1wbC50cyIsICIuLi8uLi9ub2RlX21vZHVsZXMvb25ueHJ1bnRpbWUtY29tbW9uL2xpYi9pbmZlcmVuY2Utc2Vzc2lvbi50cyIsICIuLi8uLi9ub2RlX21vZHVsZXMvb25ueHJ1bnRpbWUtY29tbW9uL2xpYi9vbm54LXZhbHVlLnRzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy9vbm54cnVudGltZS1jb21tb24vbGliL3RyYWluaW5nLXNlc3Npb24taW1wbC50cyIsICIuLi8uLi9ub2RlX21vZHVsZXMvb25ueHJ1bnRpbWUtY29tbW9uL2xpYi90cmFpbmluZy1zZXNzaW9uLnRzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy9vbm54cnVudGltZS1jb21tb24vbGliL2luZGV4LnRzIiwgIm5vZGVqcy1pZ25vcmU6bm9kZTpvcyIsICJub2RlanMtaWdub3JlOm5vZGU6cGF0aCIsICJub2RlanMtaWdub3JlOmZzIiwgIm5vZGVqcy1pZ25vcmU6cGF0aCIsICIuLi8uLi9saWIvd2FzbS9iaW5kaW5nL29ydC10cmFpbmluZy13YXNtLXNpbWQuanMiLCAibm9kZWpzLWlnbm9yZTp3b3JrZXJfdGhyZWFkcyIsICJub2RlanMtaWdub3JlOnBlcmZfaG9va3MiLCAibm9kZWpzLWlnbm9yZTpvcyIsICIuLi8uLi9saWIvd2FzbS9iaW5kaW5nL29ydC13YXNtLXRocmVhZGVkLmpzIiwgIi4uLy4uL2xpYi93YXNtL2JpbmRpbmcvb3J0LXdhc20tdGhyZWFkZWQud29ya2VyLmpzIiwgIi4uLy4uL2xpYi93YXNtL3dhc20tZmFjdG9yeS50cyIsICIuLi8uLi9saWIvd2FzbS93YXNtLXV0aWxzLnRzIiwgIi4uLy4uL2xpYi93YXNtL3J1bi1vcHRpb25zLnRzIiwgIi4uLy4uL2xpYi93YXNtL3Nlc3Npb24tb3B0aW9ucy50cyIsICIuLi8uLi9saWIvd2FzbS93YXNtLWNvbW1vbi50cyIsICJub2RlanMtaWdub3JlOm5vZGU6ZnMvcHJvbWlzZXMiLCAiLi4vLi4vbGliL3dhc20vd2FzbS11dGlscy1sb2FkLWZpbGUudHMiLCAiLi4vLi4vbGliL3dhc20vd2FzbS1jb3JlLWltcGwudHMiLCAicHJveHktd29ya2VyOi4vcHJveHktd29ya2VyL21haW4iLCAiLi4vLi4vbGliL3dhc20vcHJveHktd3JhcHBlci50cyIsICIuLi8uLi9saWIvd2FzbS9zZXNzaW9uLWhhbmRsZXItaW5mZXJlbmNlLnRzIiwgIi4uLy4uL2xpYi9iYWNrZW5kLXdhc20udHMiLCAiLi4vLi4vbGliL3dhc20vd2FzbS10cmFpbmluZy1jb3JlLWltcGwudHMiLCAiLi4vLi4vbGliL3dhc20vc2Vzc2lvbi1oYW5kbGVyLXRyYWluaW5nLnRzIiwgIi4uLy4uL2xpYi9iYWNrZW5kLXdhc20tdHJhaW5pbmcudHMiLCAiLi4vLi4vbGliL2luZGV4LnRzIiwgIi4uLy4uL2xpYi92ZXJzaW9uLnRzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cblxuaW1wb3J0IHtCYWNrZW5kfSBmcm9tICcuL2JhY2tlbmQuanMnO1xuXG5pbnRlcmZhY2UgQmFja2VuZEluZm8ge1xuICBiYWNrZW5kOiBCYWNrZW5kO1xuICBwcmlvcml0eTogbnVtYmVyO1xuXG4gIGluaXRQcm9taXNlPzogUHJvbWlzZTx2b2lkPjtcbiAgaW5pdGlhbGl6ZWQ/OiBib29sZWFuO1xuICBhYm9ydGVkPzogYm9vbGVhbjtcbn1cblxuY29uc3QgYmFja2VuZHM6IE1hcDxzdHJpbmcsIEJhY2tlbmRJbmZvPiA9IG5ldyBNYXAoKTtcbmNvbnN0IGJhY2tlbmRzU29ydGVkQnlQcmlvcml0eTogc3RyaW5nW10gPSBbXTtcblxuLyoqXG4gKiBSZWdpc3RlciBhIGJhY2tlbmQuXG4gKlxuICogQHBhcmFtIG5hbWUgLSB0aGUgbmFtZSBhcyBhIGtleSB0byBsb29rdXAgYXMgYW4gZXhlY3V0aW9uIHByb3ZpZGVyLlxuICogQHBhcmFtIGJhY2tlbmQgLSB0aGUgYmFja2VuZCBvYmplY3QuXG4gKiBAcGFyYW0gcHJpb3JpdHkgLSBhbiBpbnRlZ2VyIGluZGljYXRpbmcgdGhlIHByaW9yaXR5IG9mIHRoZSBiYWNrZW5kLiBIaWdoZXIgbnVtYmVyIG1lYW5zIGhpZ2hlciBwcmlvcml0eS4gaWYgcHJpb3JpdHlcbiAqIDwgMCwgaXQgd2lsbCBiZSBjb25zaWRlcmVkIGFzIGEgJ2JldGEnIHZlcnNpb24gYW5kIHdpbGwgbm90IGJlIHVzZWQgYXMgYSBmYWxsYmFjayBiYWNrZW5kIGJ5IGRlZmF1bHQuXG4gKlxuICogQGlnbm9yZVxuICovXG5leHBvcnQgY29uc3QgcmVnaXN0ZXJCYWNrZW5kID0gKG5hbWU6IHN0cmluZywgYmFja2VuZDogQmFja2VuZCwgcHJpb3JpdHk6IG51bWJlcik6IHZvaWQgPT4ge1xuICBpZiAoYmFja2VuZCAmJiB0eXBlb2YgYmFja2VuZC5pbml0ID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBiYWNrZW5kLmNyZWF0ZUluZmVyZW5jZVNlc3Npb25IYW5kbGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY29uc3QgY3VycmVudEJhY2tlbmQgPSBiYWNrZW5kcy5nZXQobmFtZSk7XG4gICAgaWYgKGN1cnJlbnRCYWNrZW5kID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGJhY2tlbmRzLnNldChuYW1lLCB7YmFja2VuZCwgcHJpb3JpdHl9KTtcbiAgICB9IGVsc2UgaWYgKGN1cnJlbnRCYWNrZW5kLnByaW9yaXR5ID4gcHJpb3JpdHkpIHtcbiAgICAgIC8vIHNhbWUgbmFtZSBpcyBhbHJlYWR5IHJlZ2lzdGVyZWQgd2l0aCBhIGhpZ2hlciBwcmlvcml0eS4gc2tpcCByZWdpc3RlcmF0aW9uLlxuICAgICAgcmV0dXJuO1xuICAgIH0gZWxzZSBpZiAoY3VycmVudEJhY2tlbmQucHJpb3JpdHkgPT09IHByaW9yaXR5KSB7XG4gICAgICBpZiAoY3VycmVudEJhY2tlbmQuYmFja2VuZCAhPT0gYmFja2VuZCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGNhbm5vdCByZWdpc3RlciBiYWNrZW5kIFwiJHtuYW1lfVwiIHVzaW5nIHByaW9yaXR5ICR7cHJpb3JpdHl9YCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHByaW9yaXR5ID49IDApIHtcbiAgICAgIGNvbnN0IGkgPSBiYWNrZW5kc1NvcnRlZEJ5UHJpb3JpdHkuaW5kZXhPZihuYW1lKTtcbiAgICAgIGlmIChpICE9PSAtMSkge1xuICAgICAgICBiYWNrZW5kc1NvcnRlZEJ5UHJpb3JpdHkuc3BsaWNlKGksIDEpO1xuICAgICAgfVxuXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJhY2tlbmRzU29ydGVkQnlQcmlvcml0eS5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoYmFja2VuZHMuZ2V0KGJhY2tlbmRzU29ydGVkQnlQcmlvcml0eVtpXSkhLnByaW9yaXR5IDw9IHByaW9yaXR5KSB7XG4gICAgICAgICAgYmFja2VuZHNTb3J0ZWRCeVByaW9yaXR5LnNwbGljZShpLCAwLCBuYW1lKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGJhY2tlbmRzU29ydGVkQnlQcmlvcml0eS5wdXNoKG5hbWUpO1xuICAgIH1cbiAgICByZXR1cm47XG4gIH1cblxuICB0aHJvdyBuZXcgVHlwZUVycm9yKCdub3QgYSB2YWxpZCBiYWNrZW5kJyk7XG59O1xuXG4vKipcbiAqIFJlc29sdmUgYmFja2VuZCBieSBzcGVjaWZpZWQgaGludHMuXG4gKlxuICogQHBhcmFtIGJhY2tlbmRIaW50cyAtIGEgbGlzdCBvZiBleGVjdXRpb24gcHJvdmlkZXIgbmFtZXMgdG8gbG9va3VwLiBJZiBvbWl0dGVkIHVzZSByZWdpc3RlcmVkIGJhY2tlbmRzIGFzIGxpc3QuXG4gKiBAcmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB0byB0aGUgYmFja2VuZC5cbiAqXG4gKiBAaWdub3JlXG4gKi9cbmV4cG9ydCBjb25zdCByZXNvbHZlQmFja2VuZCA9IGFzeW5jKGJhY2tlbmRIaW50czogcmVhZG9ubHkgc3RyaW5nW10pOiBQcm9taXNlPEJhY2tlbmQ+ID0+IHtcbiAgY29uc3QgYmFja2VuZE5hbWVzID0gYmFja2VuZEhpbnRzLmxlbmd0aCA9PT0gMCA/IGJhY2tlbmRzU29ydGVkQnlQcmlvcml0eSA6IGJhY2tlbmRIaW50cztcbiAgY29uc3QgZXJyb3JzID0gW107XG4gIGZvciAoY29uc3QgYmFja2VuZE5hbWUgb2YgYmFja2VuZE5hbWVzKSB7XG4gICAgY29uc3QgYmFja2VuZEluZm8gPSBiYWNrZW5kcy5nZXQoYmFja2VuZE5hbWUpO1xuICAgIGlmIChiYWNrZW5kSW5mbykge1xuICAgICAgaWYgKGJhY2tlbmRJbmZvLmluaXRpYWxpemVkKSB7XG4gICAgICAgIHJldHVybiBiYWNrZW5kSW5mby5iYWNrZW5kO1xuICAgICAgfSBlbHNlIGlmIChiYWNrZW5kSW5mby5hYm9ydGVkKSB7XG4gICAgICAgIGNvbnRpbnVlOyAgLy8gY3VycmVudCBiYWNrZW5kIGlzIHVuYXZhaWxhYmxlOyB0cnkgbmV4dFxuICAgICAgfVxuXG4gICAgICBjb25zdCBpc0luaXRpYWxpemluZyA9ICEhYmFja2VuZEluZm8uaW5pdFByb21pc2U7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoIWlzSW5pdGlhbGl6aW5nKSB7XG4gICAgICAgICAgYmFja2VuZEluZm8uaW5pdFByb21pc2UgPSBiYWNrZW5kSW5mby5iYWNrZW5kLmluaXQoYmFja2VuZE5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIGF3YWl0IGJhY2tlbmRJbmZvLmluaXRQcm9taXNlO1xuICAgICAgICBiYWNrZW5kSW5mby5pbml0aWFsaXplZCA9IHRydWU7XG4gICAgICAgIHJldHVybiBiYWNrZW5kSW5mby5iYWNrZW5kO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZiAoIWlzSW5pdGlhbGl6aW5nKSB7XG4gICAgICAgICAgZXJyb3JzLnB1c2goe25hbWU6IGJhY2tlbmROYW1lLCBlcnI6IGV9KTtcbiAgICAgICAgfVxuICAgICAgICBiYWNrZW5kSW5mby5hYm9ydGVkID0gdHJ1ZTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIGRlbGV0ZSBiYWNrZW5kSW5mby5pbml0UHJvbWlzZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB0aHJvdyBuZXcgRXJyb3IoYG5vIGF2YWlsYWJsZSBiYWNrZW5kIGZvdW5kLiBFUlI6ICR7ZXJyb3JzLm1hcChlID0+IGBbJHtlLm5hbWV9XSAke2UuZXJyfWApLmpvaW4oJywgJyl9YCk7XG59O1xuIiwgIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuXG5pbXBvcnQge0luZmVyZW5jZVNlc3Npb259IGZyb20gJy4vaW5mZXJlbmNlLXNlc3Npb24uanMnO1xuaW1wb3J0IHtPbm54VmFsdWV9IGZyb20gJy4vb25ueC12YWx1ZS5qcyc7XG5pbXBvcnQge1RyYWluaW5nU2Vzc2lvbn0gZnJvbSAnLi90cmFpbmluZy1zZXNzaW9uLmpzJztcblxuLyoqXG4gKiBAaWdub3JlXG4gKi9cbmV4cG9ydCBkZWNsYXJlIG5hbWVzcGFjZSBTZXNzaW9uSGFuZGxlciB7XG4gIHR5cGUgRmVlZHNUeXBlID0ge1tuYW1lOiBzdHJpbmddOiBPbm54VmFsdWV9O1xuICB0eXBlIEZldGNoZXNUeXBlID0ge1tuYW1lOiBzdHJpbmddOiBPbm54VmFsdWUgfCBudWxsfTtcbiAgdHlwZSBSZXR1cm5UeXBlID0ge1tuYW1lOiBzdHJpbmddOiBPbm54VmFsdWV9O1xufVxuXG4vKipcbiAqIFJlcHJlc2VudHMgc2hhcmVkIFNlc3Npb25IYW5kbGVyIGZ1bmN0aW9uYWxpdHlcbiAqXG4gKiBAaWdub3JlXG4gKi9cbmludGVyZmFjZSBTZXNzaW9uSGFuZGxlciB7XG4gIGRpc3Bvc2UoKTogUHJvbWlzZTx2b2lkPjtcblxuICByZWFkb25seSBpbnB1dE5hbWVzOiByZWFkb25seSBzdHJpbmdbXTtcbiAgcmVhZG9ubHkgb3V0cHV0TmFtZXM6IHJlYWRvbmx5IHN0cmluZ1tdO1xufVxuXG4vKipcbiAqIFJlcHJlc2VudCBhIGhhbmRsZXIgaW5zdGFuY2Ugb2YgYW4gaW5mZXJlbmNlIHNlc3Npb24uXG4gKlxuICogQGlnbm9yZVxuICovXG5leHBvcnQgaW50ZXJmYWNlIEluZmVyZW5jZVNlc3Npb25IYW5kbGVyIGV4dGVuZHMgU2Vzc2lvbkhhbmRsZXIge1xuICBzdGFydFByb2ZpbGluZygpOiB2b2lkO1xuICBlbmRQcm9maWxpbmcoKTogdm9pZDtcblxuICBydW4oZmVlZHM6IFNlc3Npb25IYW5kbGVyLkZlZWRzVHlwZSwgZmV0Y2hlczogU2Vzc2lvbkhhbmRsZXIuRmV0Y2hlc1R5cGUsXG4gICAgICBvcHRpb25zOiBJbmZlcmVuY2VTZXNzaW9uLlJ1bk9wdGlvbnMpOiBQcm9taXNlPFNlc3Npb25IYW5kbGVyLlJldHVyblR5cGU+O1xufVxuXG4vKipcbiAqIFJlcHJlc2VudCBhIGhhbmRsZXIgaW5zdGFuY2Ugb2YgYSB0cmFpbmluZyBpbmZlcmVuY2Ugc2Vzc2lvbi5cbiAqXG4gKiBAaWdub3JlXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVHJhaW5pbmdTZXNzaW9uSGFuZGxlciBleHRlbmRzIFNlc3Npb25IYW5kbGVyIHtcbiAgcmVhZG9ubHkgZXZhbElucHV0TmFtZXM6IHJlYWRvbmx5IHN0cmluZ1tdO1xuICByZWFkb25seSBldmFsT3V0cHV0TmFtZXM6IHJlYWRvbmx5IHN0cmluZ1tdO1xuXG4gIGxhenlSZXNldEdyYWQoKTogUHJvbWlzZTx2b2lkPjtcbiAgcnVuVHJhaW5TdGVwKFxuICAgICAgZmVlZHM6IFNlc3Npb25IYW5kbGVyLkZlZWRzVHlwZSwgZmV0Y2hlczogU2Vzc2lvbkhhbmRsZXIuRmV0Y2hlc1R5cGUsXG4gICAgICBvcHRpb25zOiBJbmZlcmVuY2VTZXNzaW9uLlJ1bk9wdGlvbnMpOiBQcm9taXNlPFNlc3Npb25IYW5kbGVyLlJldHVyblR5cGU+O1xuICBydW5PcHRpbWl6ZXJTdGVwKG9wdGlvbnM6IEluZmVyZW5jZVNlc3Npb24uUnVuT3B0aW9ucyk6IFByb21pc2U8dm9pZD47XG4gIHJ1bkV2YWxTdGVwKFxuICAgICAgZmVlZHM6IFNlc3Npb25IYW5kbGVyLkZlZWRzVHlwZSwgZmV0Y2hlczogU2Vzc2lvbkhhbmRsZXIuRmV0Y2hlc1R5cGUsXG4gICAgICBvcHRpb25zOiBJbmZlcmVuY2VTZXNzaW9uLlJ1bk9wdGlvbnMpOiBQcm9taXNlPFNlc3Npb25IYW5kbGVyLlJldHVyblR5cGU+O1xuXG4gIGdldFBhcmFtZXRlcnNTaXplKHRyYWluYWJsZU9ubHk6IGJvb2xlYW4pOiBQcm9taXNlPG51bWJlcj47XG4gIGxvYWRQYXJhbWV0ZXJzQnVmZmVyKGFycmF5OiBVaW50OEFycmF5LCB0cmFpbmFibGVPbmx5OiBib29sZWFuKTogUHJvbWlzZTx2b2lkPjtcbiAgZ2V0Q29udGlndW91c1BhcmFtZXRlcnModHJhaW5hYmxlT25seTogYm9vbGVhbik6IFByb21pc2U8T25ueFZhbHVlPjtcbn1cblxuLyoqXG4gKiBSZXByZXNlbnQgYSBiYWNrZW5kIHRoYXQgcHJvdmlkZXMgaW1wbGVtZW50YXRpb24gb2YgbW9kZWwgaW5mZXJlbmNpbmcuXG4gKlxuICogQGlnbm9yZVxuICovXG5leHBvcnQgaW50ZXJmYWNlIEJhY2tlbmQge1xuICAvKipcbiAgICogSW5pdGlhbGl6ZSB0aGUgYmFja2VuZCBhc3luY2hyb25vdXNseS4gU2hvdWxkIHRocm93IHdoZW4gZmFpbGVkLlxuICAgKi9cbiAgaW5pdChiYWNrZW5kTmFtZTogc3RyaW5nKTogUHJvbWlzZTx2b2lkPjtcblxuICBjcmVhdGVJbmZlcmVuY2VTZXNzaW9uSGFuZGxlcih1cmlPckJ1ZmZlcjogc3RyaW5nfFVpbnQ4QXJyYXksIG9wdGlvbnM/OiBJbmZlcmVuY2VTZXNzaW9uLlNlc3Npb25PcHRpb25zKTpcbiAgICAgIFByb21pc2U8SW5mZXJlbmNlU2Vzc2lvbkhhbmRsZXI+O1xuXG4gIGNyZWF0ZVRyYWluaW5nU2Vzc2lvbkhhbmRsZXI/XG4gICAgICAoY2hlY2twb2ludFN0YXRlVXJpT3JCdWZmZXI6IFRyYWluaW5nU2Vzc2lvbi5VUklvckJ1ZmZlciwgdHJhaW5Nb2RlbFVyaU9yQnVmZmVyOiBUcmFpbmluZ1Nlc3Npb24uVVJJb3JCdWZmZXIsXG4gICAgICAgZXZhbE1vZGVsVXJpT3JCdWZmZXI6IFRyYWluaW5nU2Vzc2lvbi5VUklvckJ1ZmZlciwgb3B0aW1pemVyTW9kZWxVcmlPckJ1ZmZlcjogVHJhaW5pbmdTZXNzaW9uLlVSSW9yQnVmZmVyLFxuICAgICAgIG9wdGlvbnM6IEluZmVyZW5jZVNlc3Npb24uU2Vzc2lvbk9wdGlvbnMpOiBQcm9taXNlPFRyYWluaW5nU2Vzc2lvbkhhbmRsZXI+O1xufVxuXG5leHBvcnQge3JlZ2lzdGVyQmFja2VuZH0gZnJvbSAnLi9iYWNrZW5kLWltcGwuanMnO1xuIiwgIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuXG4vLyBUaGlzIGZpbGUgaXMgZ2VuZXJhdGVkIGJ5IC9qcy9zY3JpcHRzL3VwZGF0ZS12ZXJzaW9uLnRzXG4vLyBEbyBub3QgbW9kaWZ5IGZpbGUgY29udGVudCBtYW51YWxseS5cblxuZXhwb3J0IGNvbnN0IHZlcnNpb24gPSAnMS4xOC4wJztcbiIsICIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cblxuaW1wb3J0IHtFbnZ9IGZyb20gJy4vZW52LmpzJztcbmltcG9ydCB7dmVyc2lvbn0gZnJvbSAnLi92ZXJzaW9uLmpzJztcblxudHlwZSBMb2dMZXZlbFR5cGUgPSBFbnZbJ2xvZ0xldmVsJ107XG5cbmxldCBsb2dMZXZlbFZhbHVlOiBSZXF1aXJlZDxMb2dMZXZlbFR5cGU+ID0gJ3dhcm5pbmcnO1xuXG5leHBvcnQgY29uc3QgZW52OiBFbnYgPSB7XG4gIHdhc206IHt9IGFzIEVudi5XZWJBc3NlbWJseUZsYWdzLFxuICB3ZWJnbDoge30gYXMgRW52LldlYkdMRmxhZ3MsXG4gIHdlYmdwdToge30gYXMgRW52LldlYkdwdUZsYWdzLFxuICB2ZXJzaW9uczoge2NvbW1vbjogdmVyc2lvbn0sXG5cbiAgc2V0IGxvZ0xldmVsKHZhbHVlOiBMb2dMZXZlbFR5cGUpIHtcbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJyB8fCBbJ3ZlcmJvc2UnLCAnaW5mbycsICd3YXJuaW5nJywgJ2Vycm9yJywgJ2ZhdGFsJ10uaW5kZXhPZih2YWx1ZSkgPT09IC0xKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuc3VwcG9ydGVkIGxvZ2dpbmcgbGV2ZWw6ICR7dmFsdWV9YCk7XG4gICAgfVxuICAgIGxvZ0xldmVsVmFsdWUgPSB2YWx1ZTtcbiAgfSxcbiAgZ2V0IGxvZ0xldmVsKCk6IFJlcXVpcmVkPExvZ0xldmVsVHlwZT4ge1xuICAgIHJldHVybiBsb2dMZXZlbFZhbHVlO1xuICB9LFxufTtcblxuLy8gc2V0IHByb3BlcnR5ICdsb2dMZXZlbCcgc28gdGhhdCB0aGV5IGNhbiBiZSBjb3JyZWN0bHkgdHJhbnNmZXJyZWQgdG8gd29ya2VyIGJ5IGBwb3N0TWVzc2FnZSgpYC5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShlbnYsICdsb2dMZXZlbCcsIHtlbnVtZXJhYmxlOiB0cnVlfSk7XG4iLCAiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5cbmltcG9ydCB7ZW52IGFzIGVudkltcGx9IGZyb20gJy4vZW52LWltcGwuanMnO1xuXG5leHBvcnQgZGVjbGFyZSBuYW1lc3BhY2UgRW52IHtcbiAgZXhwb3J0IHR5cGUgV2FzbVByZWZpeE9yRmlsZVBhdGhzID0gc3RyaW5nfHtcbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbmFtaW5nLWNvbnZlbnRpb24gKi9cbiAgICAnb3J0LXdhc20ud2FzbSc/OiBzdHJpbmc7XG4gICAgJ29ydC13YXNtLXRocmVhZGVkLndhc20nPzogc3RyaW5nO1xuICAgICdvcnQtd2FzbS1zaW1kLndhc20nPzogc3RyaW5nO1xuICAgICdvcnQtdHJhaW5pbmctd2FzbS1zaW1kLndhc20nPzogc3RyaW5nO1xuICAgICdvcnQtd2FzbS1zaW1kLXRocmVhZGVkLndhc20nPzogc3RyaW5nO1xuICAgIC8qIGVzbGludC1lbmFibGUgQHR5cGVzY3JpcHQtZXNsaW50L25hbWluZy1jb252ZW50aW9uICovXG4gIH07XG4gIGV4cG9ydCBpbnRlcmZhY2UgV2ViQXNzZW1ibHlGbGFncyB7XG4gICAgLyoqXG4gICAgICogc2V0IG9yIGdldCBudW1iZXIgb2YgdGhyZWFkKHMpLiBJZiBvbWl0dGVkIG9yIHNldCB0byAwLCBudW1iZXIgb2YgdGhyZWFkKHMpIHdpbGwgYmUgZGV0ZXJtaW5lZCBieSBzeXN0ZW0uIElmIHNldFxuICAgICAqIHRvIDEsIG5vIHdvcmtlciB0aHJlYWQgd2lsbCBiZSBzcGF3bmVkLlxuICAgICAqXG4gICAgICogVGhpcyBzZXR0aW5nIGlzIGF2YWlsYWJsZSBvbmx5IHdoZW4gV2ViQXNzZW1ibHkgbXVsdGl0aHJlYWQgZmVhdHVyZSBpcyBhdmFpbGFibGUgaW4gY3VycmVudCBjb250ZXh0LlxuICAgICAqXG4gICAgICogQGRlZmF1bHRWYWx1ZSBgMGBcbiAgICAgKi9cbiAgICBudW1UaHJlYWRzPzogbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICogc2V0IG9yIGdldCBhIGJvb2xlYW4gdmFsdWUgaW5kaWNhdGluZyB3aGV0aGVyIHRvIGVuYWJsZSBTSU1ELiBJZiBzZXQgdG8gZmFsc2UsIFNJTUQgd2lsbCBiZSBmb3JjZWx5IGRpc2FibGVkLlxuICAgICAqXG4gICAgICogVGhpcyBzZXR0aW5nIGlzIGF2YWlsYWJsZSBvbmx5IHdoZW4gV2ViQXNzZW1ibHkgU0lNRCBmZWF0dXJlIGlzIGF2YWlsYWJsZSBpbiBjdXJyZW50IGNvbnRleHQuXG4gICAgICpcbiAgICAgKiBAZGVmYXVsdFZhbHVlIGB0cnVlYFxuICAgICAqL1xuICAgIHNpbWQ/OiBib29sZWFuO1xuXG4gICAgLyoqXG4gICAgICogc2V0IG9yIGdldCBhIGJvb2xlYW4gdmFsdWUgaW5kaWNhdGluZyB3aGV0aGVyIHRvIGVuYWJsZSB0cmFjZS5cbiAgICAgKlxuICAgICAqIEBkZXByZWNhdGVkIFVzZSBgZW52LnRyYWNlYCBpbnN0ZWFkLiBJZiBgZW52LnRyYWNlYCBpcyBzZXQsIHRoaXMgcHJvcGVydHkgd2lsbCBiZSBpZ25vcmVkLlxuICAgICAqIEBkZWZhdWx0VmFsdWUgYGZhbHNlYFxuICAgICAqL1xuICAgIHRyYWNlPzogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICAqIFNldCBvciBnZXQgYSBudW1iZXIgc3BlY2lmeWluZyB0aGUgdGltZW91dCBmb3IgaW5pdGlhbGl6YXRpb24gb2YgV2ViQXNzZW1ibHkgYmFja2VuZCwgaW4gbWlsbGlzZWNvbmRzLiBBIHplcm9cbiAgICAgKiB2YWx1ZSBpbmRpY2F0ZXMgbm8gdGltZW91dCBpcyBzZXQuXG4gICAgICpcbiAgICAgKiBAZGVmYXVsdFZhbHVlIGAwYFxuICAgICAqL1xuICAgIGluaXRUaW1lb3V0PzogbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICogU2V0IGEgY3VzdG9tIFVSTCBwcmVmaXggdG8gdGhlIC53YXNtIGZpbGVzIG9yIGEgc2V0IG9mIG92ZXJyaWRlcyBmb3IgZWFjaCAud2FzbSBmaWxlLiBUaGUgb3ZlcnJpZGUgcGF0aCBzaG91bGQgYmVcbiAgICAgKiBhbiBhYnNvbHV0ZSBwYXRoLlxuICAgICAqL1xuICAgIHdhc21QYXRocz86IFdhc21QcmVmaXhPckZpbGVQYXRocztcblxuICAgIC8qKlxuICAgICAqIFNldCBvciBnZXQgYSBib29sZWFuIHZhbHVlIGluZGljYXRpbmcgd2hldGhlciB0byBwcm94eSB0aGUgZXhlY3V0aW9uIG9mIG1haW4gdGhyZWFkIHRvIGEgd29ya2VyIHRocmVhZC5cbiAgICAgKlxuICAgICAqIEBkZWZhdWx0VmFsdWUgYGZhbHNlYFxuICAgICAqL1xuICAgIHByb3h5PzogYm9vbGVhbjtcbiAgfVxuXG4gIGV4cG9ydCBpbnRlcmZhY2UgV2ViR0xGbGFncyB7XG4gICAgLyoqXG4gICAgICogU2V0IG9yIGdldCB0aGUgV2ViR0wgQ29udGV4dCBJRCAod2ViZ2wgb3Igd2ViZ2wyKS5cbiAgICAgKlxuICAgICAqIEBkZWZhdWx0VmFsdWUgYCd3ZWJnbDInYFxuICAgICAqL1xuICAgIGNvbnRleHRJZD86ICd3ZWJnbCd8J3dlYmdsMic7XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBXZWJHTCByZW5kZXJpbmcgY29udGV4dC5cbiAgICAgKi9cbiAgICByZWFkb25seSBjb250ZXh0OiBXZWJHTFJlbmRlcmluZ0NvbnRleHQ7XG4gICAgLyoqXG4gICAgICogU2V0IG9yIGdldCB0aGUgbWF4aW11bSBiYXRjaCBzaXplIGZvciBtYXRtdWwuIDAgbWVhbnMgdG8gZGlzYWJsZSBiYXRjaGluZy5cbiAgICAgKlxuICAgICAqIEBkZXByZWNhdGVkXG4gICAgICovXG4gICAgbWF0bXVsTWF4QmF0Y2hTaXplPzogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIFNldCBvciBnZXQgdGhlIHRleHR1cmUgY2FjaGUgbW9kZS5cbiAgICAgKlxuICAgICAqIEBkZWZhdWx0VmFsdWUgYCdmdWxsJ2BcbiAgICAgKi9cbiAgICB0ZXh0dXJlQ2FjaGVNb2RlPzogJ2luaXRpYWxpemVyT25seSd8J2Z1bGwnO1xuICAgIC8qKlxuICAgICAqIFNldCBvciBnZXQgdGhlIHBhY2tlZCB0ZXh0dXJlIG1vZGVcbiAgICAgKlxuICAgICAqIEBkZWZhdWx0VmFsdWUgYGZhbHNlYFxuICAgICAqL1xuICAgIHBhY2s/OiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIFNldCBvciBnZXQgd2hldGhlciBlbmFibGUgYXN5bmMgZG93bmxvYWQuXG4gICAgICpcbiAgICAgKiBAZGVmYXVsdFZhbHVlIGBmYWxzZWBcbiAgICAgKi9cbiAgICBhc3luYz86IGJvb2xlYW47XG4gIH1cblxuICBleHBvcnQgaW50ZXJmYWNlIFdlYkdwdVByb2ZpbGluZ0RhdGFWMVRlbnNvck1ldGFkYXRhIHtcbiAgICBkaW1zOiByZWFkb25seSBudW1iZXJbXTtcbiAgICBkYXRhVHlwZTogc3RyaW5nO1xuICB9XG4gIGV4cG9ydCBpbnRlcmZhY2UgV2ViR3B1UHJvZmlsaW5nRGF0YVYxIHtcbiAgICB2ZXJzaW9uOiAxO1xuICAgIGlucHV0c01ldGFkYXRhOiByZWFkb25seSBXZWJHcHVQcm9maWxpbmdEYXRhVjFUZW5zb3JNZXRhZGF0YVtdO1xuICAgIG91dHB1dHNNZXRhZGF0YTogcmVhZG9ubHkgV2ViR3B1UHJvZmlsaW5nRGF0YVYxVGVuc29yTWV0YWRhdGFbXTtcbiAgICBrZXJuZWxJZDogbnVtYmVyO1xuICAgIGtlcm5lbFR5cGU6IHN0cmluZztcbiAgICBrZXJuZWxOYW1lOiBzdHJpbmc7XG4gICAgcHJvZ3JhbU5hbWU6IHN0cmluZztcbiAgICBzdGFydFRpbWU6IG51bWJlcjtcbiAgICBlbmRUaW1lOiBudW1iZXI7XG4gIH1cblxuICBleHBvcnQgdHlwZSBXZWJHcHVQcm9maWxpbmdEYXRhID0gV2ViR3B1UHJvZmlsaW5nRGF0YVYxO1xuXG4gIGV4cG9ydCBpbnRlcmZhY2UgV2ViR3B1RmxhZ3Mge1xuICAgIC8qKlxuICAgICAqIFNldCBvciBnZXQgdGhlIHByb2ZpbGluZyBtb2RlLlxuICAgICAqXG4gICAgICogQGRlcHJlY2F0ZWQgVXNlIGBlbnYud2ViZ3B1LnByb2ZpbGluZy5tb2RlYCBpbnN0ZWFkLiBJZiBgZW52LndlYmdwdS5wcm9maWxpbmcubW9kZWAgaXMgc2V0LCB0aGlzIHByb3BlcnR5IHdpbGwgYmVcbiAgICAgKiBpZ25vcmVkLlxuICAgICAqL1xuICAgIHByb2ZpbGluZ01vZGU/OiAnb2ZmJ3wnZGVmYXVsdCc7XG4gICAgLyoqXG4gICAgICogU2V0IG9yIGdldCB0aGUgcHJvZmlsaW5nIGNvbmZpZ3VyYXRpb24uXG4gICAgICovXG4gICAgcHJvZmlsaW5nPzoge1xuICAgICAgLyoqXG4gICAgICAgKiBTZXQgb3IgZ2V0IHRoZSBwcm9maWxpbmcgbW9kZS5cbiAgICAgICAqXG4gICAgICAgKiBAZGVmYXVsdFZhbHVlIGAnb2ZmJ2BcbiAgICAgICAqL1xuICAgICAgbW9kZT86ICdvZmYnfCdkZWZhdWx0JztcblxuICAgICAgLyoqXG4gICAgICAgKiBTZXQgb3IgZ2V0IGEgY2FsbGJhY2sgZnVuY3Rpb24gd2hlbiBhIHByb2ZpbGluZyBkYXRhIGlzIHJlY2VpdmVkLiBJZiBub3Qgc2V0LCB0aGUgcHJvZmlsaW5nIGRhdGEgd2lsbCBiZVxuICAgICAgICogcHJpbnRlZCB0byBjb25zb2xlLlxuICAgICAgICovXG4gICAgICBvbmRhdGE/OiAoZGF0YTogV2ViR3B1UHJvZmlsaW5nRGF0YSkgPT4gdm9pZDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEdldCB0aGUgZGV2aWNlIGZvciBXZWJHUFUuXG4gICAgICpcbiAgICAgKiBXaGVuIHVzZSB3aXRoIFR5cGVTY3JpcHQsIHRoZSB0eXBlIG9mIHRoaXMgcHJvcGVydHkgaXMgYEdQVURldmljZWAgZGVmaW5lZCBpbiBcIkB3ZWJncHUvdHlwZXNcIi5cbiAgICAgKiBVc2UgYGNvbnN0IGRldmljZSA9IGVudi53ZWJncHUuZGV2aWNlIGFzIEdQVURldmljZTtgIGluIFR5cGVTY3JpcHQgdG8gYWNjZXNzIHRoaXMgcHJvcGVydHkgd2l0aCBjb3JyZWN0IHR5cGUuXG4gICAgICpcbiAgICAgKiBzZWUgY29tbWVudHMgb24ge0BsaW5rIEdwdUJ1ZmZlclR5cGV9IGZvciBtb3JlIGRldGFpbHMgYWJvdXQgd2h5IG5vdCB1c2UgdHlwZXMgZGVmaW5lZCBpbiBcIkB3ZWJncHUvdHlwZXNcIi5cbiAgICAgKi9cbiAgICByZWFkb25seSBkZXZpY2U6IHVua25vd247XG4gICAgLyoqXG4gICAgICogU2V0IG9yIGdldCB3aGV0aGVyIHZhbGlkYXRlIGlucHV0IGNvbnRlbnQuXG4gICAgICpcbiAgICAgKiBAZGVmYXVsdFZhbHVlIGBmYWxzZWBcbiAgICAgKi9cbiAgICB2YWxpZGF0ZUlucHV0Q29udGVudD86IGJvb2xlYW47XG4gIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBFbnYge1xuICAvKipcbiAgICogc2V0IHRoZSBzZXZlcml0eSBsZXZlbCBmb3IgbG9nZ2luZy5cbiAgICpcbiAgICogQGRlZmF1bHRWYWx1ZSBgJ3dhcm5pbmcnYFxuICAgKi9cbiAgbG9nTGV2ZWw/OiAndmVyYm9zZSd8J2luZm8nfCd3YXJuaW5nJ3wnZXJyb3InfCdmYXRhbCc7XG5cbiAgLyoqXG4gICAqIEluZGljYXRlIHdoZXRoZXIgcnVuIGluIGRlYnVnIG1vZGUuXG4gICAqXG4gICAqIEBkZWZhdWx0VmFsdWUgYGZhbHNlYFxuICAgKi9cbiAgZGVidWc/OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBzZXQgb3IgZ2V0IGEgYm9vbGVhbiB2YWx1ZSBpbmRpY2F0aW5nIHdoZXRoZXIgdG8gZW5hYmxlIHRyYWNlLlxuICAgKlxuICAgKiBAZGVmYXVsdFZhbHVlIGBmYWxzZWBcbiAgICovXG4gIHRyYWNlPzogYm9vbGVhbjtcblxuICAvKipcbiAgICogR2V0IHZlcnNpb24gb2YgdGhlIGN1cnJlbnQgcGFja2FnZS5cbiAgICovXG4gIHJlYWRvbmx5IHZlcnNpb25zOiB7XG4gICAgcmVhZG9ubHkgY29tbW9uOiBzdHJpbmc7XG4gICAgcmVhZG9ubHkgd2ViPzogc3RyaW5nO1xuICAgIHJlYWRvbmx5IG5vZGU/OiBzdHJpbmc7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uYW1pbmctY29udmVudGlvblxuICAgIHJlYWRvbmx5ICdyZWFjdC1uYXRpdmUnPzogc3RyaW5nO1xuICB9O1xuXG4gIC8qKlxuICAgKiBSZXByZXNlbnQgYSBzZXQgb2YgZmxhZ3MgZm9yIFdlYkFzc2VtYmx5XG4gICAqL1xuICByZWFkb25seSB3YXNtOiBFbnYuV2ViQXNzZW1ibHlGbGFncztcblxuICAvKipcbiAgICogUmVwcmVzZW50IGEgc2V0IG9mIGZsYWdzIGZvciBXZWJHTFxuICAgKi9cbiAgcmVhZG9ubHkgd2ViZ2w6IEVudi5XZWJHTEZsYWdzO1xuXG4gIC8qKlxuICAgKiBSZXByZXNlbnQgYSBzZXQgb2YgZmxhZ3MgZm9yIFdlYkdQVVxuICAgKi9cbiAgcmVhZG9ubHkgd2ViZ3B1OiBFbnYuV2ViR3B1RmxhZ3M7XG5cbiAgW25hbWU6IHN0cmluZ106IHVua25vd247XG59XG5cbi8qKlxuICogUmVwcmVzZW50IGEgc2V0IG9mIGZsYWdzIGFzIGEgZ2xvYmFsIHNpbmdsZXRvbi5cbiAqL1xuZXhwb3J0IGNvbnN0IGVudjogRW52ID0gZW52SW1wbDtcbiIsICIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cblxuaW1wb3J0IHtUZW5zb3JUb0RhdGFVcmxPcHRpb25zLCBUZW5zb3JUb0ltYWdlRGF0YU9wdGlvbnN9IGZyb20gJy4vdGVuc29yLWNvbnZlcnNpb24uanMnO1xuaW1wb3J0IHtUZW5zb3J9IGZyb20gJy4vdGVuc29yLmpzJztcblxuLyoqXG4gKiBpbXBsZW1lbnRhdGlvbiBvZiBUZW5zb3IudG9EYXRhVVJMKClcbiAqL1xuZXhwb3J0IGNvbnN0IHRlbnNvclRvRGF0YVVSTCA9ICh0ZW5zb3I6IFRlbnNvciwgb3B0aW9ucz86IFRlbnNvclRvRGF0YVVybE9wdGlvbnMpOiBzdHJpbmcgPT4ge1xuICBjb25zdCBjYW52YXMgPSB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJykgOiAobmV3IE9mZnNjcmVlbkNhbnZhcygxLCAxKSk7XG4gIGNhbnZhcy53aWR0aCA9IHRlbnNvci5kaW1zWzNdO1xuICBjYW52YXMuaGVpZ2h0ID0gdGVuc29yLmRpbXNbMl07XG4gIGNvbnN0IHBpeGVsczJEQ29udGV4dCA9XG4gICAgICBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKSBhcyAoQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEIHwgT2Zmc2NyZWVuQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEIHwgbnVsbCk7XG5cbiAgaWYgKHBpeGVsczJEQ29udGV4dCAhPSBudWxsKSB7XG4gICAgLy8gRGVmYXVsdCB2YWx1ZXMgZm9yIGhlaWdodCBhbmQgd2lkdGggJiBmb3JtYXRcbiAgICBsZXQgd2lkdGg6IG51bWJlcjtcbiAgICBsZXQgaGVpZ2h0OiBudW1iZXI7XG4gICAgaWYgKG9wdGlvbnM/LnRlbnNvckxheW91dCAhPT0gdW5kZWZpbmVkICYmIG9wdGlvbnMudGVuc29yTGF5b3V0ID09PSAnTkhXQycpIHtcbiAgICAgIHdpZHRoID0gdGVuc29yLmRpbXNbMl07XG4gICAgICBoZWlnaHQgPSB0ZW5zb3IuZGltc1szXTtcbiAgICB9IGVsc2UgeyAgLy8gRGVmYXVsdCBsYXlvdXQgaXMgTkNXSFxuICAgICAgd2lkdGggPSB0ZW5zb3IuZGltc1szXTtcbiAgICAgIGhlaWdodCA9IHRlbnNvci5kaW1zWzJdO1xuICAgIH1cblxuICAgIGNvbnN0IGlucHV0Zm9ybWF0ID0gb3B0aW9ucz8uZm9ybWF0ICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmZvcm1hdCA6ICdSR0InO1xuXG4gICAgY29uc3Qgbm9ybSA9IG9wdGlvbnM/Lm5vcm07XG4gICAgbGV0IG5vcm1NZWFuOiBbbnVtYmVyLCBudW1iZXIsIG51bWJlciwgbnVtYmVyXTtcbiAgICBsZXQgbm9ybUJpYXM6IFtudW1iZXIsIG51bWJlciwgbnVtYmVyLCBudW1iZXJdO1xuICAgIGlmIChub3JtID09PSB1bmRlZmluZWQgfHwgbm9ybS5tZWFuID09PSB1bmRlZmluZWQpIHtcbiAgICAgIG5vcm1NZWFuID0gWzI1NSwgMjU1LCAyNTUsIDI1NV07XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0eXBlb2YgKG5vcm0ubWVhbikgPT09ICdudW1iZXInKSB7XG4gICAgICAgIG5vcm1NZWFuID0gW25vcm0ubWVhbiwgbm9ybS5tZWFuLCBub3JtLm1lYW4sIG5vcm0ubWVhbl07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub3JtTWVhbiA9IFtub3JtLm1lYW5bMF0sIG5vcm0ubWVhblsxXSwgbm9ybS5tZWFuWzJdLCAwXTtcbiAgICAgICAgaWYgKG5vcm0ubWVhblszXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgbm9ybU1lYW5bM10gPSBub3JtLm1lYW5bM107XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG5vcm0gPT09IHVuZGVmaW5lZCB8fCBub3JtLmJpYXMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgbm9ybUJpYXMgPSBbMCwgMCwgMCwgMF07XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0eXBlb2YgKG5vcm0uYmlhcykgPT09ICdudW1iZXInKSB7XG4gICAgICAgIG5vcm1CaWFzID0gW25vcm0uYmlhcywgbm9ybS5iaWFzLCBub3JtLmJpYXMsIG5vcm0uYmlhc107XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub3JtQmlhcyA9IFtub3JtLmJpYXNbMF0sIG5vcm0uYmlhc1sxXSwgbm9ybS5iaWFzWzJdLCAwXTtcbiAgICAgICAgaWYgKG5vcm0uYmlhc1szXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgbm9ybUJpYXNbM10gPSBub3JtLmJpYXNbM107XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBzdHJpZGUgPSBoZWlnaHQgKiB3aWR0aDtcbiAgICAvLyBEZWZhdWx0IHBvaW50ZXIgYXNzaWdubWVudHNcbiAgICBsZXQgclRlbnNvclBvaW50ZXIgPSAwLCBnVGVuc29yUG9pbnRlciA9IHN0cmlkZSwgYlRlbnNvclBvaW50ZXIgPSBzdHJpZGUgKiAyLCBhVGVuc29yUG9pbnRlciA9IC0xO1xuXG4gICAgLy8gVXBkYXRpbmcgdGhlIHBvaW50ZXIgYXNzaWdubWVudHMgYmFzZWQgb24gdGhlIGlucHV0IGltYWdlIGZvcm1hdFxuICAgIGlmIChpbnB1dGZvcm1hdCA9PT0gJ1JHQkEnKSB7XG4gICAgICByVGVuc29yUG9pbnRlciA9IDA7XG4gICAgICBnVGVuc29yUG9pbnRlciA9IHN0cmlkZTtcbiAgICAgIGJUZW5zb3JQb2ludGVyID0gc3RyaWRlICogMjtcbiAgICAgIGFUZW5zb3JQb2ludGVyID0gc3RyaWRlICogMztcbiAgICB9IGVsc2UgaWYgKGlucHV0Zm9ybWF0ID09PSAnUkdCJykge1xuICAgICAgclRlbnNvclBvaW50ZXIgPSAwO1xuICAgICAgZ1RlbnNvclBvaW50ZXIgPSBzdHJpZGU7XG4gICAgICBiVGVuc29yUG9pbnRlciA9IHN0cmlkZSAqIDI7XG4gICAgfSBlbHNlIGlmIChpbnB1dGZvcm1hdCA9PT0gJ1JCRycpIHtcbiAgICAgIHJUZW5zb3JQb2ludGVyID0gMDtcbiAgICAgIGJUZW5zb3JQb2ludGVyID0gc3RyaWRlO1xuICAgICAgZ1RlbnNvclBvaW50ZXIgPSBzdHJpZGUgKiAyO1xuICAgIH1cblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaGVpZ2h0OyBpKyspIHtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgd2lkdGg7IGorKykge1xuICAgICAgICBjb25zdCBSID0gKCh0ZW5zb3IuZGF0YVtyVGVuc29yUG9pbnRlcisrXSBhcyBudW1iZXIpIC0gbm9ybUJpYXNbMF0pICogbm9ybU1lYW5bMF07ICAvLyBSIHZhbHVlXG4gICAgICAgIGNvbnN0IEcgPSAoKHRlbnNvci5kYXRhW2dUZW5zb3JQb2ludGVyKytdIGFzIG51bWJlcikgLSBub3JtQmlhc1sxXSkgKiBub3JtTWVhblsxXTsgIC8vIEcgdmFsdWVcbiAgICAgICAgY29uc3QgQiA9ICgodGVuc29yLmRhdGFbYlRlbnNvclBvaW50ZXIrK10gYXMgbnVtYmVyKSAtIG5vcm1CaWFzWzJdKSAqIG5vcm1NZWFuWzJdOyAgLy8gQiB2YWx1ZVxuICAgICAgICBjb25zdCBBID0gYVRlbnNvclBvaW50ZXIgPT09IC0xID9cbiAgICAgICAgICAgIDI1NSA6XG4gICAgICAgICAgICAoKHRlbnNvci5kYXRhW2FUZW5zb3JQb2ludGVyKytdIGFzIG51bWJlcikgLSBub3JtQmlhc1szXSkgKiBub3JtTWVhblszXTsgIC8vIEEgdmFsdWVcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9yZXN0cmljdC1wbHVzLW9wZXJhbmRzXG4gICAgICAgIHBpeGVsczJEQ29udGV4dC5maWxsU3R5bGUgPSAncmdiYSgnICsgUiArICcsJyArIEcgKyAnLCcgKyBCICsgJywnICsgQSArICcpJztcbiAgICAgICAgcGl4ZWxzMkRDb250ZXh0LmZpbGxSZWN0KGosIGksIDEsIDEpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoJ3RvRGF0YVVSTCcgaW4gY2FudmFzKSB7XG4gICAgICByZXR1cm4gY2FudmFzLnRvRGF0YVVSTCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3RvRGF0YVVSTCBpcyBub3Qgc3VwcG9ydGVkJyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcignQ2FuIG5vdCBhY2Nlc3MgaW1hZ2UgZGF0YScpO1xuICB9XG59O1xuXG4vKipcbiAqIGltcGxlbWVudGF0aW9uIG9mIFRlbnNvci50b0ltYWdlRGF0YSgpXG4gKi9cbmV4cG9ydCBjb25zdCB0ZW5zb3JUb0ltYWdlRGF0YSA9ICh0ZW5zb3I6IFRlbnNvciwgb3B0aW9ucz86IFRlbnNvclRvSW1hZ2VEYXRhT3B0aW9ucyk6IEltYWdlRGF0YSA9PiB7XG4gIGNvbnN0IHBpeGVsczJEQ29udGV4dCA9IHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgP1xuICAgICAgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJykuZ2V0Q29udGV4dCgnMmQnKSA6XG4gICAgICBuZXcgT2Zmc2NyZWVuQ2FudmFzKDEsIDEpLmdldENvbnRleHQoJzJkJykgYXMgT2Zmc2NyZWVuQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEO1xuICBsZXQgaW1hZ2U6IEltYWdlRGF0YTtcbiAgaWYgKHBpeGVsczJEQ29udGV4dCAhPSBudWxsKSB7XG4gICAgLy8gRGVmYXVsdCB2YWx1ZXMgZm9yIGhlaWdodCBhbmQgd2lkdGggJiBmb3JtYXRcbiAgICBsZXQgd2lkdGg6IG51bWJlcjtcbiAgICBsZXQgaGVpZ2h0OiBudW1iZXI7XG4gICAgbGV0IGNoYW5uZWxzOiBudW1iZXI7XG4gICAgaWYgKG9wdGlvbnM/LnRlbnNvckxheW91dCAhPT0gdW5kZWZpbmVkICYmIG9wdGlvbnMudGVuc29yTGF5b3V0ID09PSAnTkhXQycpIHtcbiAgICAgIHdpZHRoID0gdGVuc29yLmRpbXNbMl07XG4gICAgICBoZWlnaHQgPSB0ZW5zb3IuZGltc1sxXTtcbiAgICAgIGNoYW5uZWxzID0gdGVuc29yLmRpbXNbM107XG4gICAgfSBlbHNlIHsgIC8vIERlZmF1bHQgbGF5b3V0IGlzIE5DV0hcbiAgICAgIHdpZHRoID0gdGVuc29yLmRpbXNbM107XG4gICAgICBoZWlnaHQgPSB0ZW5zb3IuZGltc1syXTtcbiAgICAgIGNoYW5uZWxzID0gdGVuc29yLmRpbXNbMV07XG4gICAgfVxuICAgIGNvbnN0IGlucHV0Zm9ybWF0ID0gb3B0aW9ucyAhPT0gdW5kZWZpbmVkID8gKG9wdGlvbnMuZm9ybWF0ICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmZvcm1hdCA6ICdSR0InKSA6ICdSR0InO1xuXG4gICAgY29uc3Qgbm9ybSA9IG9wdGlvbnM/Lm5vcm07XG4gICAgbGV0IG5vcm1NZWFuOiBbbnVtYmVyLCBudW1iZXIsIG51bWJlciwgbnVtYmVyXTtcbiAgICBsZXQgbm9ybUJpYXM6IFtudW1iZXIsIG51bWJlciwgbnVtYmVyLCBudW1iZXJdO1xuICAgIGlmIChub3JtID09PSB1bmRlZmluZWQgfHwgbm9ybS5tZWFuID09PSB1bmRlZmluZWQpIHtcbiAgICAgIG5vcm1NZWFuID0gWzI1NSwgMjU1LCAyNTUsIDI1NV07XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0eXBlb2YgKG5vcm0ubWVhbikgPT09ICdudW1iZXInKSB7XG4gICAgICAgIG5vcm1NZWFuID0gW25vcm0ubWVhbiwgbm9ybS5tZWFuLCBub3JtLm1lYW4sIG5vcm0ubWVhbl07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub3JtTWVhbiA9IFtub3JtLm1lYW5bMF0sIG5vcm0ubWVhblsxXSwgbm9ybS5tZWFuWzJdLCAyNTVdO1xuICAgICAgICBpZiAobm9ybS5tZWFuWzNdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBub3JtTWVhblszXSA9IG5vcm0ubWVhblszXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAobm9ybSA9PT0gdW5kZWZpbmVkIHx8IG5vcm0uYmlhcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBub3JtQmlhcyA9IFswLCAwLCAwLCAwXTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHR5cGVvZiAobm9ybS5iaWFzKSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgbm9ybUJpYXMgPSBbbm9ybS5iaWFzLCBub3JtLmJpYXMsIG5vcm0uYmlhcywgbm9ybS5iaWFzXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5vcm1CaWFzID0gW25vcm0uYmlhc1swXSwgbm9ybS5iaWFzWzFdLCBub3JtLmJpYXNbMl0sIDBdO1xuICAgICAgICBpZiAobm9ybS5iaWFzWzNdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBub3JtQmlhc1szXSA9IG5vcm0uYmlhc1szXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHN0cmlkZSA9IGhlaWdodCAqIHdpZHRoO1xuICAgIGlmIChvcHRpb25zICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmIChvcHRpb25zLmZvcm1hdCAhPT0gdW5kZWZpbmVkICYmIChjaGFubmVscyA9PT0gNCAmJiBvcHRpb25zLmZvcm1hdCAhPT0gJ1JHQkEnKSB8fFxuICAgICAgICAgIChjaGFubmVscyA9PT0gMyAmJiAob3B0aW9ucy5mb3JtYXQgIT09ICdSR0InICYmIG9wdGlvbnMuZm9ybWF0ICE9PSAnQkdSJykpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVGVuc29yIGZvcm1hdCBkb2VzblxcJ3QgbWF0Y2ggaW5wdXQgdGVuc29yIGRpbXMnKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBEZWZhdWx0IHBvaW50ZXIgYXNzaWdubWVudHNcbiAgICBjb25zdCBzdGVwID0gNDtcbiAgICBsZXQgckltYWdlUG9pbnRlciA9IDAsIGdJbWFnZVBvaW50ZXIgPSAxLCBiSW1hZ2VQb2ludGVyID0gMiwgYUltYWdlUG9pbnRlciA9IDM7XG4gICAgbGV0IHJUZW5zb3JQb2ludGVyID0gMCwgZ1RlbnNvclBvaW50ZXIgPSBzdHJpZGUsIGJUZW5zb3JQb2ludGVyID0gc3RyaWRlICogMiwgYVRlbnNvclBvaW50ZXIgPSAtMTtcblxuICAgIC8vIFVwZGF0aW5nIHRoZSBwb2ludGVyIGFzc2lnbm1lbnRzIGJhc2VkIG9uIHRoZSBpbnB1dCBpbWFnZSBmb3JtYXRcbiAgICBpZiAoaW5wdXRmb3JtYXQgPT09ICdSR0JBJykge1xuICAgICAgclRlbnNvclBvaW50ZXIgPSAwO1xuICAgICAgZ1RlbnNvclBvaW50ZXIgPSBzdHJpZGU7XG4gICAgICBiVGVuc29yUG9pbnRlciA9IHN0cmlkZSAqIDI7XG4gICAgICBhVGVuc29yUG9pbnRlciA9IHN0cmlkZSAqIDM7XG4gICAgfSBlbHNlIGlmIChpbnB1dGZvcm1hdCA9PT0gJ1JHQicpIHtcbiAgICAgIHJUZW5zb3JQb2ludGVyID0gMDtcbiAgICAgIGdUZW5zb3JQb2ludGVyID0gc3RyaWRlO1xuICAgICAgYlRlbnNvclBvaW50ZXIgPSBzdHJpZGUgKiAyO1xuICAgIH0gZWxzZSBpZiAoaW5wdXRmb3JtYXQgPT09ICdSQkcnKSB7XG4gICAgICByVGVuc29yUG9pbnRlciA9IDA7XG4gICAgICBiVGVuc29yUG9pbnRlciA9IHN0cmlkZTtcbiAgICAgIGdUZW5zb3JQb2ludGVyID0gc3RyaWRlICogMjtcbiAgICB9XG5cbiAgICBpbWFnZSA9IHBpeGVsczJEQ29udGV4dC5jcmVhdGVJbWFnZURhdGEod2lkdGgsIGhlaWdodCk7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGhlaWdodCAqIHdpZHRoO1xuICAgICAgICAgckltYWdlUG9pbnRlciArPSBzdGVwLCBnSW1hZ2VQb2ludGVyICs9IHN0ZXAsIGJJbWFnZVBvaW50ZXIgKz0gc3RlcCwgYUltYWdlUG9pbnRlciArPSBzdGVwLCBpKyspIHtcbiAgICAgIGltYWdlLmRhdGFbckltYWdlUG9pbnRlcl0gPSAoKHRlbnNvci5kYXRhW3JUZW5zb3JQb2ludGVyKytdIGFzIG51bWJlcikgLSBub3JtQmlhc1swXSkgKiBub3JtTWVhblswXTsgIC8vIFIgdmFsdWVcbiAgICAgIGltYWdlLmRhdGFbZ0ltYWdlUG9pbnRlcl0gPSAoKHRlbnNvci5kYXRhW2dUZW5zb3JQb2ludGVyKytdIGFzIG51bWJlcikgLSBub3JtQmlhc1sxXSkgKiBub3JtTWVhblsxXTsgIC8vIEcgdmFsdWVcbiAgICAgIGltYWdlLmRhdGFbYkltYWdlUG9pbnRlcl0gPSAoKHRlbnNvci5kYXRhW2JUZW5zb3JQb2ludGVyKytdIGFzIG51bWJlcikgLSBub3JtQmlhc1syXSkgKiBub3JtTWVhblsyXTsgIC8vIEIgdmFsdWVcbiAgICAgIGltYWdlLmRhdGFbYUltYWdlUG9pbnRlcl0gPSBhVGVuc29yUG9pbnRlciA9PT0gLTEgP1xuICAgICAgICAgIDI1NSA6XG4gICAgICAgICAgKCh0ZW5zb3IuZGF0YVthVGVuc29yUG9pbnRlcisrXSBhcyBudW1iZXIpIC0gbm9ybUJpYXNbM10pICogbm9ybU1lYW5bM107ICAvLyBBIHZhbHVlXG4gICAgfVxuXG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdDYW4gbm90IGFjY2VzcyBpbWFnZSBkYXRhJyk7XG4gIH1cbiAgcmV0dXJuIGltYWdlO1xufTtcbiIsICIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cblxuaW1wb3J0IHtPcHRpb25zRGltZW5zaW9ucywgT3B0aW9uc0Zvcm1hdCwgT3B0aW9uc05vcm1hbGl6YXRpb25QYXJhbWV0ZXJzLCBPcHRpb25zVGVuc29yRm9ybWF0LCBPcHRpb25zVGVuc29yTGF5b3V0LCBUZW5zb3JGcm9tR3B1QnVmZmVyT3B0aW9ucywgVGVuc29yRnJvbUltYWdlQml0bWFwT3B0aW9ucywgVGVuc29yRnJvbUltYWdlRGF0YU9wdGlvbnMsIFRlbnNvckZyb21JbWFnZUVsZW1lbnRPcHRpb25zLCBUZW5zb3JGcm9tVGV4dHVyZU9wdGlvbnMsIFRlbnNvckZyb21VcmxPcHRpb25zfSBmcm9tICcuL3RlbnNvci1mYWN0b3J5LmpzJztcbmltcG9ydCB7VGVuc29yfSBmcm9tICcuL3RlbnNvci1pbXBsLmpzJztcbmltcG9ydCB7VGVuc29yIGFzIFRlbnNvckludGVyZmFjZX0gZnJvbSAnLi90ZW5zb3IuanMnO1xuXG5pbnRlcmZhY2UgQnVmZmVyVG9UZW5zb3JPcHRpb25zIGV4dGVuZHMgT3B0aW9uc0RpbWVuc2lvbnMsIE9wdGlvbnNUZW5zb3JMYXlvdXQsIE9wdGlvbnNOb3JtYWxpemF0aW9uUGFyYW1ldGVycyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPcHRpb25zRm9ybWF0LCBPcHRpb25zVGVuc29yRm9ybWF0IHt9XG5cbi8qKlxuICogQ3JlYXRlIGEgbmV3IHRlbnNvciBvYmplY3QgZnJvbSBpbWFnZSBvYmplY3RcbiAqXG4gKiBAcGFyYW0gYnVmZmVyIC0gRXh0cmFjdGVkIGltYWdlIGJ1ZmZlciBkYXRhIC0gYXNzdW1pbmcgUkdCQSBmb3JtYXRcbiAqIEBwYXJhbSBpbWFnZUZvcm1hdCAtIGlucHV0IGltYWdlIGNvbmZpZ3VyYXRpb24gLSByZXF1aXJlZCBjb25maWd1cmF0aW9ucyBoZWlnaHQsIHdpZHRoLCBmb3JtYXRcbiAqIEBwYXJhbSB0ZW5zb3JGb3JtYXQgLSBvdXRwdXQgdGVuc29yIGNvbmZpZ3VyYXRpb24gLSBEZWZhdWx0IGlzIFJHQiBmb3JtYXRcbiAqL1xuZXhwb3J0IGNvbnN0IGJ1ZmZlclRvVGVuc29yID0gKGJ1ZmZlcjogVWludDhDbGFtcGVkQXJyYXl8dW5kZWZpbmVkLCBvcHRpb25zOiBCdWZmZXJUb1RlbnNvck9wdGlvbnMpOiBUZW5zb3IgPT4ge1xuICBpZiAoYnVmZmVyID09PSB1bmRlZmluZWQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ltYWdlIGJ1ZmZlciBtdXN0IGJlIGRlZmluZWQnKTtcbiAgfVxuICBpZiAob3B0aW9ucy5oZWlnaHQgPT09IHVuZGVmaW5lZCB8fCBvcHRpb25zLndpZHRoID09PSB1bmRlZmluZWQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ltYWdlIGhlaWdodCBhbmQgd2lkdGggbXVzdCBiZSBkZWZpbmVkJyk7XG4gIH1cbiAgaWYgKG9wdGlvbnMudGVuc29yTGF5b3V0ID09PSAnTkhXQycpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ05IV0MgVGVuc29yIGxheW91dCBpcyBub3Qgc3VwcG9ydGVkIHlldCcpO1xuICB9XG5cbiAgY29uc3Qge2hlaWdodCwgd2lkdGh9ID0gb3B0aW9ucztcblxuICBjb25zdCBub3JtID0gb3B0aW9ucy5ub3JtID8/IHttZWFuOiAyNTUsIGJpYXM6IDB9O1xuICBsZXQgbm9ybU1lYW46IFtudW1iZXIsIG51bWJlciwgbnVtYmVyLCBudW1iZXJdO1xuICBsZXQgbm9ybUJpYXM6IFtudW1iZXIsIG51bWJlciwgbnVtYmVyLCBudW1iZXJdO1xuXG4gIGlmICh0eXBlb2YgKG5vcm0ubWVhbikgPT09ICdudW1iZXInKSB7XG4gICAgbm9ybU1lYW4gPSBbbm9ybS5tZWFuLCBub3JtLm1lYW4sIG5vcm0ubWVhbiwgbm9ybS5tZWFuXTtcbiAgfSBlbHNlIHtcbiAgICBub3JtTWVhbiA9IFtub3JtLm1lYW4hWzBdLCBub3JtLm1lYW4hWzFdLCBub3JtLm1lYW4hWzJdLCBub3JtLm1lYW4hWzNdID8/IDI1NV07XG4gIH1cblxuICBpZiAodHlwZW9mIChub3JtLmJpYXMpID09PSAnbnVtYmVyJykge1xuICAgIG5vcm1CaWFzID0gW25vcm0uYmlhcywgbm9ybS5iaWFzLCBub3JtLmJpYXMsIG5vcm0uYmlhc107XG4gIH0gZWxzZSB7XG4gICAgbm9ybUJpYXMgPSBbbm9ybS5iaWFzIVswXSwgbm9ybS5iaWFzIVsxXSwgbm9ybS5iaWFzIVsyXSwgbm9ybS5iaWFzIVszXSA/PyAwXTtcbiAgfVxuXG4gIGNvbnN0IGlucHV0Zm9ybWF0ID0gb3B0aW9ucy5mb3JtYXQgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMuZm9ybWF0IDogJ1JHQkEnO1xuICAvLyBkZWZhdWx0IHZhbHVlIGlzIFJHQkEgc2luY2UgaW1hZ2VkYXRhIGFuZCBIVE1MSW1hZ2VFbGVtZW50IHVzZXMgaXRcblxuICBjb25zdCBvdXRwdXRmb3JtYXQgPVxuICAgICAgb3B0aW9ucy50ZW5zb3JGb3JtYXQgIT09IHVuZGVmaW5lZCA/IChvcHRpb25zLnRlbnNvckZvcm1hdCAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy50ZW5zb3JGb3JtYXQgOiAnUkdCJykgOiAnUkdCJztcbiAgY29uc3Qgc3RyaWRlID0gaGVpZ2h0ICogd2lkdGg7XG4gIGNvbnN0IGZsb2F0MzJEYXRhID0gb3V0cHV0Zm9ybWF0ID09PSAnUkdCQScgPyBuZXcgRmxvYXQzMkFycmF5KHN0cmlkZSAqIDQpIDogbmV3IEZsb2F0MzJBcnJheShzdHJpZGUgKiAzKTtcblxuICAvLyBEZWZhdWx0IHBvaW50ZXIgYXNzaWdubWVudHNcbiAgbGV0IHN0ZXAgPSA0LCBySW1hZ2VQb2ludGVyID0gMCwgZ0ltYWdlUG9pbnRlciA9IDEsIGJJbWFnZVBvaW50ZXIgPSAyLCBhSW1hZ2VQb2ludGVyID0gMztcbiAgbGV0IHJUZW5zb3JQb2ludGVyID0gMCwgZ1RlbnNvclBvaW50ZXIgPSBzdHJpZGUsIGJUZW5zb3JQb2ludGVyID0gc3RyaWRlICogMiwgYVRlbnNvclBvaW50ZXIgPSAtMTtcblxuICAvLyBVcGRhdGluZyB0aGUgcG9pbnRlciBhc3NpZ25tZW50cyBiYXNlZCBvbiB0aGUgaW5wdXQgaW1hZ2UgZm9ybWF0XG4gIGlmIChpbnB1dGZvcm1hdCA9PT0gJ1JHQicpIHtcbiAgICBzdGVwID0gMztcbiAgICBySW1hZ2VQb2ludGVyID0gMDtcbiAgICBnSW1hZ2VQb2ludGVyID0gMTtcbiAgICBiSW1hZ2VQb2ludGVyID0gMjtcbiAgICBhSW1hZ2VQb2ludGVyID0gLTE7XG4gIH1cblxuICAvLyBVcGRhdGluZyB0aGUgcG9pbnRlciBhc3NpZ25tZW50cyBiYXNlZCBvbiB0aGUgb3V0cHV0IHRlbnNvciBmb3JtYXRcbiAgaWYgKG91dHB1dGZvcm1hdCA9PT0gJ1JHQkEnKSB7XG4gICAgYVRlbnNvclBvaW50ZXIgPSBzdHJpZGUgKiAzO1xuICB9IGVsc2UgaWYgKG91dHB1dGZvcm1hdCA9PT0gJ1JCRycpIHtcbiAgICByVGVuc29yUG9pbnRlciA9IDA7XG4gICAgYlRlbnNvclBvaW50ZXIgPSBzdHJpZGU7XG4gICAgZ1RlbnNvclBvaW50ZXIgPSBzdHJpZGUgKiAyO1xuICB9IGVsc2UgaWYgKG91dHB1dGZvcm1hdCA9PT0gJ0JHUicpIHtcbiAgICBiVGVuc29yUG9pbnRlciA9IDA7XG4gICAgZ1RlbnNvclBvaW50ZXIgPSBzdHJpZGU7XG4gICAgclRlbnNvclBvaW50ZXIgPSBzdHJpZGUgKiAyO1xuICB9XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHJpZGU7XG4gICAgICAgaSsrLCBySW1hZ2VQb2ludGVyICs9IHN0ZXAsIGJJbWFnZVBvaW50ZXIgKz0gc3RlcCwgZ0ltYWdlUG9pbnRlciArPSBzdGVwLCBhSW1hZ2VQb2ludGVyICs9IHN0ZXApIHtcbiAgICBmbG9hdDMyRGF0YVtyVGVuc29yUG9pbnRlcisrXSA9IChidWZmZXJbckltYWdlUG9pbnRlcl0gKyBub3JtQmlhc1swXSkgLyBub3JtTWVhblswXTtcbiAgICBmbG9hdDMyRGF0YVtnVGVuc29yUG9pbnRlcisrXSA9IChidWZmZXJbZ0ltYWdlUG9pbnRlcl0gKyBub3JtQmlhc1sxXSkgLyBub3JtTWVhblsxXTtcbiAgICBmbG9hdDMyRGF0YVtiVGVuc29yUG9pbnRlcisrXSA9IChidWZmZXJbYkltYWdlUG9pbnRlcl0gKyBub3JtQmlhc1syXSkgLyBub3JtTWVhblsyXTtcbiAgICBpZiAoYVRlbnNvclBvaW50ZXIgIT09IC0xICYmIGFJbWFnZVBvaW50ZXIgIT09IC0xKSB7XG4gICAgICBmbG9hdDMyRGF0YVthVGVuc29yUG9pbnRlcisrXSA9IChidWZmZXJbYUltYWdlUG9pbnRlcl0gKyBub3JtQmlhc1szXSkgLyBub3JtTWVhblszXTtcbiAgICB9XG4gIH1cblxuICAvLyBGbG9hdDMyQXJyYXkgLT4gb3J0LlRlbnNvclxuICBjb25zdCBvdXRwdXRUZW5zb3IgPSBvdXRwdXRmb3JtYXQgPT09ICdSR0JBJyA/IG5ldyBUZW5zb3IoJ2Zsb2F0MzInLCBmbG9hdDMyRGF0YSwgWzEsIDQsIGhlaWdodCwgd2lkdGhdKSA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFRlbnNvcignZmxvYXQzMicsIGZsb2F0MzJEYXRhLCBbMSwgMywgaGVpZ2h0LCB3aWR0aF0pO1xuICByZXR1cm4gb3V0cHV0VGVuc29yO1xufTtcblxuLyoqXG4gKiBpbXBsZW1lbnRhdGlvbiBvZiBUZW5zb3IuZnJvbUltYWdlKCkuXG4gKi9cbmV4cG9ydCBjb25zdCB0ZW5zb3JGcm9tSW1hZ2UgPSBhc3luYyhcbiAgICBpbWFnZTogSW1hZ2VEYXRhfEhUTUxJbWFnZUVsZW1lbnR8SW1hZ2VCaXRtYXB8c3RyaW5nLFxuICAgIG9wdGlvbnM/OiBUZW5zb3JGcm9tSW1hZ2VEYXRhT3B0aW9uc3xUZW5zb3JGcm9tSW1hZ2VFbGVtZW50T3B0aW9uc3xUZW5zb3JGcm9tSW1hZ2VCaXRtYXBPcHRpb25zfFxuICAgIFRlbnNvckZyb21VcmxPcHRpb25zKTogUHJvbWlzZTxUZW5zb3I+ID0+IHtcbiAgLy8gY2hlY2tpbmcgdGhlIHR5cGUgb2YgaW1hZ2Ugb2JqZWN0XG4gIGNvbnN0IGlzSFRNTEltYWdlRWxlID0gdHlwZW9mIChIVE1MSW1hZ2VFbGVtZW50KSAhPT0gJ3VuZGVmaW5lZCcgJiYgaW1hZ2UgaW5zdGFuY2VvZiBIVE1MSW1hZ2VFbGVtZW50O1xuICBjb25zdCBpc0ltYWdlRGF0YUVsZSA9IHR5cGVvZiAoSW1hZ2VEYXRhKSAhPT0gJ3VuZGVmaW5lZCcgJiYgaW1hZ2UgaW5zdGFuY2VvZiBJbWFnZURhdGE7XG4gIGNvbnN0IGlzSW1hZ2VCaXRtYXAgPSB0eXBlb2YgKEltYWdlQml0bWFwKSAhPT0gJ3VuZGVmaW5lZCcgJiYgaW1hZ2UgaW5zdGFuY2VvZiBJbWFnZUJpdG1hcDtcbiAgY29uc3QgaXNTdHJpbmcgPSB0eXBlb2YgaW1hZ2UgPT09ICdzdHJpbmcnO1xuXG4gIGxldCBkYXRhOiBVaW50OENsYW1wZWRBcnJheXx1bmRlZmluZWQ7XG4gIGxldCBidWZmZXJUb1RlbnNvck9wdGlvbnM6IEJ1ZmZlclRvVGVuc29yT3B0aW9ucyA9IG9wdGlvbnMgPz8ge307XG5cbiAgY29uc3QgY3JlYXRlQ2FudmFzID0gKCkgPT4ge1xuICAgIGlmICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgT2Zmc2NyZWVuQ2FudmFzICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgcmV0dXJuIG5ldyBPZmZzY3JlZW5DYW52YXMoMSwgMSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQ2FudmFzIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IGNyZWF0ZUNhbnZhc0NvbnRleHQgPSAoY2FudmFzOiBIVE1MQ2FudmFzRWxlbWVudHxPZmZzY3JlZW5DYW52YXMpID0+IHtcbiAgICBpZiAoY2FudmFzIGluc3RhbmNlb2YgSFRNTENhbnZhc0VsZW1lbnQpIHtcbiAgICAgIHJldHVybiBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICB9IGVsc2UgaWYgKGNhbnZhcyBpbnN0YW5jZW9mIE9mZnNjcmVlbkNhbnZhcykge1xuICAgICAgcmV0dXJuIGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpIGFzIE9mZnNjcmVlbkNhbnZhc1JlbmRlcmluZ0NvbnRleHQyRDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9O1xuICAvLyBmaWxsaW5nIGFuZCBjaGVja2luZyBpbWFnZSBjb25maWd1cmF0aW9uIG9wdGlvbnNcbiAgaWYgKGlzSFRNTEltYWdlRWxlKSB7XG4gICAgLy8gSFRNTEltYWdlRWxlbWVudCAtIGltYWdlIG9iamVjdCAtIGZvcm1hdCBpcyBSR0JBIGJ5IGRlZmF1bHRcbiAgICBjb25zdCBjYW52YXMgPSBjcmVhdGVDYW52YXMoKTtcbiAgICBjYW52YXMud2lkdGggPSBpbWFnZS53aWR0aDtcbiAgICBjYW52YXMuaGVpZ2h0ID0gaW1hZ2UuaGVpZ2h0O1xuICAgIGNvbnN0IHBpeGVsczJEQ29udGV4dCA9IGNyZWF0ZUNhbnZhc0NvbnRleHQoY2FudmFzKTtcblxuICAgIGlmIChwaXhlbHMyRENvbnRleHQgIT0gbnVsbCkge1xuICAgICAgbGV0IGhlaWdodCA9IGltYWdlLmhlaWdodDtcbiAgICAgIGxldCB3aWR0aCA9IGltYWdlLndpZHRoO1xuICAgICAgaWYgKG9wdGlvbnMgIT09IHVuZGVmaW5lZCAmJiBvcHRpb25zLnJlc2l6ZWRIZWlnaHQgIT09IHVuZGVmaW5lZCAmJiBvcHRpb25zLnJlc2l6ZWRXaWR0aCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGhlaWdodCA9IG9wdGlvbnMucmVzaXplZEhlaWdodDtcbiAgICAgICAgd2lkdGggPSBvcHRpb25zLnJlc2l6ZWRXaWR0aDtcbiAgICAgIH1cblxuICAgICAgaWYgKG9wdGlvbnMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBidWZmZXJUb1RlbnNvck9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICBpZiAob3B0aW9ucy50ZW5zb3JGb3JtYXQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW1hZ2UgaW5wdXQgY29uZmlnIGZvcm1hdCBtdXN0IGJlIFJHQkEgZm9yIEhUTUxJbWFnZUVsZW1lbnQnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBidWZmZXJUb1RlbnNvck9wdGlvbnMudGVuc29yRm9ybWF0ID0gJ1JHQkEnO1xuICAgICAgICB9XG4gICAgICAgIGJ1ZmZlclRvVGVuc29yT3B0aW9ucy5oZWlnaHQgPSBoZWlnaHQ7XG4gICAgICAgIGJ1ZmZlclRvVGVuc29yT3B0aW9ucy53aWR0aCA9IHdpZHRoO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYnVmZmVyVG9UZW5zb3JPcHRpb25zLnRlbnNvckZvcm1hdCA9ICdSR0JBJztcbiAgICAgICAgYnVmZmVyVG9UZW5zb3JPcHRpb25zLmhlaWdodCA9IGhlaWdodDtcbiAgICAgICAgYnVmZmVyVG9UZW5zb3JPcHRpb25zLndpZHRoID0gd2lkdGg7XG4gICAgICB9XG5cbiAgICAgIHBpeGVsczJEQ29udGV4dC5kcmF3SW1hZ2UoaW1hZ2UsIDAsIDApO1xuICAgICAgZGF0YSA9IHBpeGVsczJEQ29udGV4dC5nZXRJbWFnZURhdGEoMCwgMCwgd2lkdGgsIGhlaWdodCkuZGF0YTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW4gbm90IGFjY2VzcyBpbWFnZSBkYXRhJyk7XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzSW1hZ2VEYXRhRWxlKSB7XG4gICAgbGV0IGhlaWdodDogbnVtYmVyO1xuICAgIGxldCB3aWR0aDogbnVtYmVyO1xuXG4gICAgaWYgKG9wdGlvbnMgIT09IHVuZGVmaW5lZCAmJiBvcHRpb25zLnJlc2l6ZWRXaWR0aCAhPT0gdW5kZWZpbmVkICYmIG9wdGlvbnMucmVzaXplZEhlaWdodCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBoZWlnaHQgPSBvcHRpb25zLnJlc2l6ZWRIZWlnaHQ7XG4gICAgICB3aWR0aCA9IG9wdGlvbnMucmVzaXplZFdpZHRoO1xuICAgIH0gZWxzZSB7XG4gICAgICBoZWlnaHQgPSBpbWFnZS5oZWlnaHQ7XG4gICAgICB3aWR0aCA9IGltYWdlLndpZHRoO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGJ1ZmZlclRvVGVuc29yT3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgfVxuICAgIGJ1ZmZlclRvVGVuc29yT3B0aW9ucy5mb3JtYXQgPSAnUkdCQSc7XG4gICAgYnVmZmVyVG9UZW5zb3JPcHRpb25zLmhlaWdodCA9IGhlaWdodDtcbiAgICBidWZmZXJUb1RlbnNvck9wdGlvbnMud2lkdGggPSB3aWR0aDtcblxuICAgIGlmIChvcHRpb25zICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGNvbnN0IHRlbXBDYW52YXMgPSBjcmVhdGVDYW52YXMoKTtcblxuICAgICAgdGVtcENhbnZhcy53aWR0aCA9IHdpZHRoO1xuICAgICAgdGVtcENhbnZhcy5oZWlnaHQgPSBoZWlnaHQ7XG5cbiAgICAgIGNvbnN0IHBpeGVsczJEQ29udGV4dCA9IGNyZWF0ZUNhbnZhc0NvbnRleHQodGVtcENhbnZhcyk7XG5cbiAgICAgIGlmIChwaXhlbHMyRENvbnRleHQgIT0gbnVsbCkge1xuICAgICAgICBwaXhlbHMyRENvbnRleHQucHV0SW1hZ2VEYXRhKGltYWdlLCAwLCAwKTtcbiAgICAgICAgZGF0YSA9IHBpeGVsczJEQ29udGV4dC5nZXRJbWFnZURhdGEoMCwgMCwgd2lkdGgsIGhlaWdodCkuZGF0YTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQ2FuIG5vdCBhY2Nlc3MgaW1hZ2UgZGF0YScpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBkYXRhID0gaW1hZ2UuZGF0YTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNJbWFnZUJpdG1hcCkge1xuICAgIC8vIEltYWdlQml0bWFwIC0gaW1hZ2Ugb2JqZWN0IC0gZm9ybWF0IG11c3QgYmUgcHJvdmlkZWQgYnkgdXNlclxuICAgIGlmIChvcHRpb25zID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignUGxlYXNlIHByb3ZpZGUgaW1hZ2UgY29uZmlnIHdpdGggZm9ybWF0IGZvciBJbWFnZWJpdG1hcCcpO1xuICAgIH1cblxuICAgIGNvbnN0IGNhbnZhcyA9IGNyZWF0ZUNhbnZhcygpO1xuICAgIGNhbnZhcy53aWR0aCA9IGltYWdlLndpZHRoO1xuICAgIGNhbnZhcy5oZWlnaHQgPSBpbWFnZS5oZWlnaHQ7XG4gICAgY29uc3QgcGl4ZWxzMkRDb250ZXh0ID0gY3JlYXRlQ2FudmFzQ29udGV4dChjYW52YXMpO1xuXG4gICAgaWYgKHBpeGVsczJEQ29udGV4dCAhPSBudWxsKSB7XG4gICAgICBjb25zdCBoZWlnaHQgPSBpbWFnZS5oZWlnaHQ7XG4gICAgICBjb25zdCB3aWR0aCA9IGltYWdlLndpZHRoO1xuICAgICAgcGl4ZWxzMkRDb250ZXh0LmRyYXdJbWFnZShpbWFnZSwgMCwgMCwgd2lkdGgsIGhlaWdodCk7XG4gICAgICBkYXRhID0gcGl4ZWxzMkRDb250ZXh0LmdldEltYWdlRGF0YSgwLCAwLCB3aWR0aCwgaGVpZ2h0KS5kYXRhO1xuICAgICAgYnVmZmVyVG9UZW5zb3JPcHRpb25zLmhlaWdodCA9IGhlaWdodDtcbiAgICAgIGJ1ZmZlclRvVGVuc29yT3B0aW9ucy53aWR0aCA9IHdpZHRoO1xuICAgICAgcmV0dXJuIGJ1ZmZlclRvVGVuc29yKGRhdGEsIGJ1ZmZlclRvVGVuc29yT3B0aW9ucyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQ2FuIG5vdCBhY2Nlc3MgaW1hZ2UgZGF0YScpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc1N0cmluZykge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBjb25zdCBjYW52YXMgPSBjcmVhdGVDYW52YXMoKTtcbiAgICAgIGNvbnN0IGNvbnRleHQgPSBjcmVhdGVDYW52YXNDb250ZXh0KGNhbnZhcyk7XG4gICAgICBpZiAoIWltYWdlIHx8ICFjb250ZXh0KSB7XG4gICAgICAgIHJldHVybiByZWplY3QoKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IG5ld0ltYWdlID0gbmV3IEltYWdlKCk7XG4gICAgICBuZXdJbWFnZS5jcm9zc09yaWdpbiA9ICdBbm9ueW1vdXMnO1xuICAgICAgbmV3SW1hZ2Uuc3JjID0gaW1hZ2U7XG4gICAgICBuZXdJbWFnZS5vbmxvYWQgPSAoKSA9PiB7XG4gICAgICAgIGNhbnZhcy53aWR0aCA9IG5ld0ltYWdlLndpZHRoO1xuICAgICAgICBjYW52YXMuaGVpZ2h0ID0gbmV3SW1hZ2UuaGVpZ2h0O1xuICAgICAgICBjb250ZXh0LmRyYXdJbWFnZShuZXdJbWFnZSwgMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcbiAgICAgICAgY29uc3QgaW1nID0gY29udGV4dC5nZXRJbWFnZURhdGEoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcblxuICAgICAgICBidWZmZXJUb1RlbnNvck9wdGlvbnMuaGVpZ2h0ID0gY2FudmFzLmhlaWdodDtcbiAgICAgICAgYnVmZmVyVG9UZW5zb3JPcHRpb25zLndpZHRoID0gY2FudmFzLndpZHRoO1xuICAgICAgICByZXNvbHZlKGJ1ZmZlclRvVGVuc29yKGltZy5kYXRhLCBidWZmZXJUb1RlbnNvck9wdGlvbnMpKTtcbiAgICAgIH07XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnB1dCBkYXRhIHByb3ZpZGVkIGlzIG5vdCBzdXBwb3J0ZWQgLSBhYm9ydGVkIHRlbnNvciBjcmVhdGlvbicpO1xuICB9XG5cbiAgaWYgKGRhdGEgIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBidWZmZXJUb1RlbnNvcihkYXRhLCBidWZmZXJUb1RlbnNvck9wdGlvbnMpO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcignSW5wdXQgZGF0YSBwcm92aWRlZCBpcyBub3Qgc3VwcG9ydGVkIC0gYWJvcnRlZCB0ZW5zb3IgY3JlYXRpb24nKTtcbiAgfVxufTtcblxuLyoqXG4gKiBpbXBsZW1lbnRhdGlvbiBvZiBUZW5zb3IuZnJvbVRleHR1cmUoKS5cbiAqL1xuZXhwb3J0IGNvbnN0IHRlbnNvckZyb21UZXh0dXJlID0gPFQgZXh0ZW5kcyBUZW5zb3JJbnRlcmZhY2UuVGV4dHVyZURhdGFUeXBlcz4oXG4gICAgdGV4dHVyZTogVGVuc29ySW50ZXJmYWNlLlRleHR1cmVUeXBlLCBvcHRpb25zOiBUZW5zb3JGcm9tVGV4dHVyZU9wdGlvbnM8VD4pOiBUZW5zb3IgPT4ge1xuICBjb25zdCB7d2lkdGgsIGhlaWdodCwgZG93bmxvYWQsIGRpc3Bvc2V9ID0gb3B0aW9ucztcbiAgLy8gQWx3YXlzIGFzc3VtZSBSR0JBRjMyLiBUT0RPOiBzdXBwb3J0IGRpZmZlcmVudCB0ZXh0dXJlIGZvcm1hdFxuICBjb25zdCBkaW1zID0gWzEsIGhlaWdodCwgd2lkdGgsIDRdO1xuICByZXR1cm4gbmV3IFRlbnNvcih7bG9jYXRpb246ICd0ZXh0dXJlJywgdHlwZTogJ2Zsb2F0MzInLCB0ZXh0dXJlLCBkaW1zLCBkb3dubG9hZCwgZGlzcG9zZX0pO1xufTtcblxuLyoqXG4gKiBpbXBsZW1lbnRhdGlvbiBvZiBUZW5zb3IuZnJvbUdwdUJ1ZmZlcigpLlxuICovXG5leHBvcnQgY29uc3QgdGVuc29yRnJvbUdwdUJ1ZmZlciA9IDxUIGV4dGVuZHMgVGVuc29ySW50ZXJmYWNlLkdwdUJ1ZmZlckRhdGFUeXBlcz4oXG4gICAgZ3B1QnVmZmVyOiBUZW5zb3JJbnRlcmZhY2UuR3B1QnVmZmVyVHlwZSwgb3B0aW9uczogVGVuc29yRnJvbUdwdUJ1ZmZlck9wdGlvbnM8VD4pOiBUZW5zb3IgPT4ge1xuICBjb25zdCB7ZGF0YVR5cGUsIGRpbXMsIGRvd25sb2FkLCBkaXNwb3NlfSA9IG9wdGlvbnM7XG4gIHJldHVybiBuZXcgVGVuc29yKHtsb2NhdGlvbjogJ2dwdS1idWZmZXInLCB0eXBlOiBkYXRhVHlwZSA/PyAnZmxvYXQzMicsIGdwdUJ1ZmZlciwgZGltcywgZG93bmxvYWQsIGRpc3Bvc2V9KTtcbn07XG5cbi8qKlxuICogaW1wbGVtZW50YXRpb24gb2YgVGVuc29yLmZyb21QaW5uZWRCdWZmZXIoKS5cbiAqL1xuZXhwb3J0IGNvbnN0IHRlbnNvckZyb21QaW5uZWRCdWZmZXIgPSA8VCBleHRlbmRzIFRlbnNvckludGVyZmFjZS5DcHVQaW5uZWREYXRhVHlwZXM+KFxuICAgIHR5cGU6IFQsIGJ1ZmZlcjogVGVuc29ySW50ZXJmYWNlLkRhdGFUeXBlTWFwW1RdLCBkaW1zPzogcmVhZG9ubHkgbnVtYmVyW10pOiBUZW5zb3IgPT5cbiAgICBuZXcgVGVuc29yKHtsb2NhdGlvbjogJ2NwdS1waW5uZWQnLCB0eXBlLCBkYXRhOiBidWZmZXIsIGRpbXM6IGRpbXMgPz8gW2J1ZmZlci5sZW5ndGhdfSk7XG4iLCAiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5cbmltcG9ydCB7VGVuc29yfSBmcm9tICcuL3RlbnNvci5qcyc7XG5cbmV4cG9ydCB0eXBlIFN1cHBvcnRlZFR5cGVkQXJyYXlDb25zdHJ1Y3RvcnMgPSBGbG9hdDMyQXJyYXlDb25zdHJ1Y3RvcnxVaW50OEFycmF5Q29uc3RydWN0b3J8SW50OEFycmF5Q29uc3RydWN0b3J8XG4gICAgVWludDE2QXJyYXlDb25zdHJ1Y3RvcnxJbnQxNkFycmF5Q29uc3RydWN0b3J8SW50MzJBcnJheUNvbnN0cnVjdG9yfEJpZ0ludDY0QXJyYXlDb25zdHJ1Y3RvcnxVaW50OEFycmF5Q29uc3RydWN0b3J8XG4gICAgRmxvYXQ2NEFycmF5Q29uc3RydWN0b3J8VWludDMyQXJyYXlDb25zdHJ1Y3RvcnxCaWdVaW50NjRBcnJheUNvbnN0cnVjdG9yO1xuZXhwb3J0IHR5cGUgU3VwcG9ydGVkVHlwZWRBcnJheSA9IEluc3RhbmNlVHlwZTxTdXBwb3J0ZWRUeXBlZEFycmF5Q29uc3RydWN0b3JzPjtcblxuLy8gYSBydW50aW1lIG1hcCB0aGF0IG1hcHMgdHlwZSBzdHJpbmcgdG8gVHlwZWRBcnJheSBjb25zdHJ1Y3Rvci4gU2hvdWxkIG1hdGNoIFRlbnNvci5EYXRhVHlwZU1hcC5cbmV4cG9ydCBjb25zdCBOVU1FUklDX1RFTlNPUl9UWVBFX1RPX1RZUEVEQVJSQVlfTUFQID0gbmV3IE1hcDxzdHJpbmcsIFN1cHBvcnRlZFR5cGVkQXJyYXlDb25zdHJ1Y3RvcnM+KFtcbiAgWydmbG9hdDMyJywgRmxvYXQzMkFycmF5XSxcbiAgWyd1aW50OCcsIFVpbnQ4QXJyYXldLFxuICBbJ2ludDgnLCBJbnQ4QXJyYXldLFxuICBbJ3VpbnQxNicsIFVpbnQxNkFycmF5XSxcbiAgWydpbnQxNicsIEludDE2QXJyYXldLFxuICBbJ2ludDMyJywgSW50MzJBcnJheV0sXG4gIFsnYm9vbCcsIFVpbnQ4QXJyYXldLFxuICBbJ2Zsb2F0NjQnLCBGbG9hdDY0QXJyYXldLFxuICBbJ3VpbnQzMicsIFVpbnQzMkFycmF5XSxcbl0pO1xuXG4vLyBhIHJ1bnRpbWUgbWFwIHRoYXQgbWFwcyB0eXBlIHN0cmluZyB0byBUeXBlZEFycmF5IGNvbnN0cnVjdG9yLiBTaG91bGQgbWF0Y2ggVGVuc29yLkRhdGFUeXBlTWFwLlxuZXhwb3J0IGNvbnN0IE5VTUVSSUNfVEVOU09SX1RZUEVEQVJSQVlfVE9fVFlQRV9NQVAgPSBuZXcgTWFwPFN1cHBvcnRlZFR5cGVkQXJyYXlDb25zdHJ1Y3RvcnMsIFRlbnNvci5UeXBlPihbXG4gIFtGbG9hdDMyQXJyYXksICdmbG9hdDMyJ10sXG4gIFtVaW50OEFycmF5LCAndWludDgnXSxcbiAgW0ludDhBcnJheSwgJ2ludDgnXSxcbiAgW1VpbnQxNkFycmF5LCAndWludDE2J10sXG4gIFtJbnQxNkFycmF5LCAnaW50MTYnXSxcbiAgW0ludDMyQXJyYXksICdpbnQzMiddLFxuICBbRmxvYXQ2NEFycmF5LCAnZmxvYXQ2NCddLFxuICBbVWludDMyQXJyYXksICd1aW50MzInXSxcbl0pO1xuXG4vLyBhIGR1bW15IHR5cGUgZGVjbGFyYXRpb24gZm9yIEZsb2F0MTZBcnJheSBpbiBjYXNlIGFueSBwb2x5ZmlsbCBpcyBhdmFpbGFibGUuXG5kZWNsYXJlIGdsb2JhbCB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbmFtaW5nLWNvbnZlbnRpb24sIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgY29uc3QgRmxvYXQxNkFycmF5OiBhbnk7XG59XG5cbi8vIHRoZSBmb2xsb3dpbmcgY29kZSBhbGxvd3MgZGVsYXlpbmcgZXhlY3V0aW9uIG9mIEJpZ0ludC9GbG9hdDE2QXJyYXkgY2hlY2tpbmcuIFRoaXMgYWxsb3dzIGxhenkgaW5pdGlhbGl6YXRpb24gZm9yXG4vLyBOVU1FUklDX1RFTlNPUl9UWVBFX1RPX1RZUEVEQVJSQVlfTUFQIGFuZCBOVU1FUklDX1RFTlNPUl9UWVBFREFSUkFZX1RPX1RZUEVfTUFQLCB3aGljaCBhbGxvd3MgQmlnSW50L0Zsb2F0MTZBcnJheVxuLy8gcG9seWZpbGwgaWYgYXZhaWxhYmxlLlxubGV0IGlzVHlwZWRBcnJheUNoZWNrZWQgPSBmYWxzZTtcbmV4cG9ydCBjb25zdCBjaGVja1R5cGVkQXJyYXkgPSAoKSA9PiB7XG4gIGlmICghaXNUeXBlZEFycmF5Q2hlY2tlZCkge1xuICAgIGlzVHlwZWRBcnJheUNoZWNrZWQgPSB0cnVlO1xuICAgIGNvbnN0IGlzQmlnSW50NjRBcnJheUF2YWlsYWJsZSA9IHR5cGVvZiBCaWdJbnQ2NEFycmF5ICE9PSAndW5kZWZpbmVkJyAmJiBCaWdJbnQ2NEFycmF5LmZyb207XG4gICAgY29uc3QgaXNCaWdVaW50NjRBcnJheUF2YWlsYWJsZSA9IHR5cGVvZiBCaWdVaW50NjRBcnJheSAhPT0gJ3VuZGVmaW5lZCcgJiYgQmlnVWludDY0QXJyYXkuZnJvbTtcbiAgICBjb25zdCBpc0Zsb2F0MTZBcnJheUF2YWlsYWJsZSA9IHR5cGVvZiBGbG9hdDE2QXJyYXkgIT09ICd1bmRlZmluZWQnICYmIEZsb2F0MTZBcnJheS5mcm9tO1xuXG4gICAgaWYgKGlzQmlnSW50NjRBcnJheUF2YWlsYWJsZSkge1xuICAgICAgTlVNRVJJQ19URU5TT1JfVFlQRV9UT19UWVBFREFSUkFZX01BUC5zZXQoJ2ludDY0JywgQmlnSW50NjRBcnJheSk7XG4gICAgICBOVU1FUklDX1RFTlNPUl9UWVBFREFSUkFZX1RPX1RZUEVfTUFQLnNldChCaWdJbnQ2NEFycmF5LCAnaW50NjQnKTtcbiAgICB9XG4gICAgaWYgKGlzQmlnVWludDY0QXJyYXlBdmFpbGFibGUpIHtcbiAgICAgIE5VTUVSSUNfVEVOU09SX1RZUEVfVE9fVFlQRURBUlJBWV9NQVAuc2V0KCd1aW50NjQnLCBCaWdVaW50NjRBcnJheSk7XG4gICAgICBOVU1FUklDX1RFTlNPUl9UWVBFREFSUkFZX1RPX1RZUEVfTUFQLnNldChCaWdVaW50NjRBcnJheSwgJ3VpbnQ2NCcpO1xuICAgIH1cbiAgICBpZiAoaXNGbG9hdDE2QXJyYXlBdmFpbGFibGUpIHtcbiAgICAgIE5VTUVSSUNfVEVOU09SX1RZUEVfVE9fVFlQRURBUlJBWV9NQVAuc2V0KCdmbG9hdDE2JywgRmxvYXQxNkFycmF5KTtcbiAgICAgIE5VTUVSSUNfVEVOU09SX1RZUEVEQVJSQVlfVE9fVFlQRV9NQVAuc2V0KEZsb2F0MTZBcnJheSwgJ2Zsb2F0MTYnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gaWYgRmxvYXQxNkFycmF5IGlzIG5vdCBhdmFpbGFibGUsIHVzZSAnVWludDE2QXJyYXknIHRvIHN0b3JlIHRoZSBkYXRhLlxuICAgICAgTlVNRVJJQ19URU5TT1JfVFlQRV9UT19UWVBFREFSUkFZX01BUC5zZXQoJ2Zsb2F0MTYnLCBVaW50MTZBcnJheSk7XG4gICAgfVxuICB9XG59O1xuIiwgIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuXG5pbXBvcnQge0NwdVBpbm5lZENvbnN0cnVjdG9yUGFyYW1ldGVycywgR3B1QnVmZmVyQ29uc3RydWN0b3JQYXJhbWV0ZXJzLCBUZXh0dXJlQ29uc3RydWN0b3JQYXJhbWV0ZXJzfSBmcm9tICcuL3RlbnNvci1mYWN0b3J5LmpzJztcbmltcG9ydCB7VGVuc29yfSBmcm9tICcuL3RlbnNvci1pbXBsLmpzJztcblxuLyoqXG4gKiBjYWxjdWxhdGUgc2l6ZSBmcm9tIGRpbXMuXG4gKlxuICogQHBhcmFtIGRpbXMgdGhlIGRpbXMgYXJyYXkuIE1heSBiZSBhbiBpbGxlZ2FsIGlucHV0LlxuICovXG5leHBvcnQgY29uc3QgY2FsY3VsYXRlU2l6ZSA9IChkaW1zOiByZWFkb25seSB1bmtub3duW10pOiBudW1iZXIgPT4ge1xuICBsZXQgc2l6ZSA9IDE7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZGltcy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGRpbSA9IGRpbXNbaV07XG4gICAgaWYgKHR5cGVvZiBkaW0gIT09ICdudW1iZXInIHx8ICFOdW1iZXIuaXNTYWZlSW50ZWdlcihkaW0pKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBkaW1zWyR7aX1dIG11c3QgYmUgYW4gaW50ZWdlciwgZ290OiAke2RpbX1gKTtcbiAgICB9XG4gICAgaWYgKGRpbSA8IDApIHtcbiAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKGBkaW1zWyR7aX1dIG11c3QgYmUgYSBub24tbmVnYXRpdmUgaW50ZWdlciwgZ290OiAke2RpbX1gKTtcbiAgICB9XG4gICAgc2l6ZSAqPSBkaW07XG4gIH1cbiAgcmV0dXJuIHNpemU7XG59O1xuXG4vKipcbiAqIGltcGxlbWVudGF0aW9uIG9mIFRlbnNvci5yZXNoYXBlKClcbiAqL1xuZXhwb3J0IGNvbnN0IHRlbnNvclJlc2hhcGUgPSAodGVuc29yOiBUZW5zb3IsIGRpbXM6IHJlYWRvbmx5IG51bWJlcltdKTogVGVuc29yID0+IHtcbiAgc3dpdGNoICh0ZW5zb3IubG9jYXRpb24pIHtcbiAgICBjYXNlICdjcHUnOlxuICAgICAgcmV0dXJuIG5ldyBUZW5zb3IodGVuc29yLnR5cGUsIHRlbnNvci5kYXRhLCBkaW1zKTtcbiAgICBjYXNlICdjcHUtcGlubmVkJzpcbiAgICAgIHJldHVybiBuZXcgVGVuc29yKHtcbiAgICAgICAgbG9jYXRpb246ICdjcHUtcGlubmVkJyxcbiAgICAgICAgZGF0YTogdGVuc29yLmRhdGEgYXMgQ3B1UGlubmVkQ29uc3RydWN0b3JQYXJhbWV0ZXJzWydkYXRhJ10sXG4gICAgICAgIHR5cGU6IHRlbnNvci50eXBlIGFzIENwdVBpbm5lZENvbnN0cnVjdG9yUGFyYW1ldGVyc1sndHlwZSddLFxuICAgICAgICBkaW1zLFxuICAgICAgfSk7XG4gICAgY2FzZSAndGV4dHVyZSc6XG4gICAgICByZXR1cm4gbmV3IFRlbnNvcih7XG4gICAgICAgIGxvY2F0aW9uOiAndGV4dHVyZScsXG4gICAgICAgIHRleHR1cmU6IHRlbnNvci50ZXh0dXJlLFxuICAgICAgICB0eXBlOiB0ZW5zb3IudHlwZSBhcyBUZXh0dXJlQ29uc3RydWN0b3JQYXJhbWV0ZXJzWyd0eXBlJ10sXG4gICAgICAgIGRpbXMsXG4gICAgICB9KTtcbiAgICBjYXNlICdncHUtYnVmZmVyJzpcbiAgICAgIHJldHVybiBuZXcgVGVuc29yKHtcbiAgICAgICAgbG9jYXRpb246ICdncHUtYnVmZmVyJyxcbiAgICAgICAgZ3B1QnVmZmVyOiB0ZW5zb3IuZ3B1QnVmZmVyLFxuICAgICAgICB0eXBlOiB0ZW5zb3IudHlwZSBhcyBHcHVCdWZmZXJDb25zdHJ1Y3RvclBhcmFtZXRlcnNbJ3R5cGUnXSxcbiAgICAgICAgZGltcyxcbiAgICAgIH0pO1xuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYHRlbnNvclJlc2hhcGU6IHRlbnNvciBsb2NhdGlvbiAke3RlbnNvci5sb2NhdGlvbn0gaXMgbm90IHN1cHBvcnRlZGApO1xuICB9XG59O1xuIiwgIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuXG5pbXBvcnQge3RlbnNvclRvRGF0YVVSTCwgdGVuc29yVG9JbWFnZURhdGF9IGZyb20gJy4vdGVuc29yLWNvbnZlcnNpb24taW1wbC5qcyc7XG5pbXBvcnQge1RlbnNvclRvRGF0YVVybE9wdGlvbnMsIFRlbnNvclRvSW1hZ2VEYXRhT3B0aW9uc30gZnJvbSAnLi90ZW5zb3ItY29udmVyc2lvbi5qcyc7XG5pbXBvcnQge3RlbnNvckZyb21HcHVCdWZmZXIsIHRlbnNvckZyb21JbWFnZSwgdGVuc29yRnJvbVBpbm5lZEJ1ZmZlciwgdGVuc29yRnJvbVRleHR1cmV9IGZyb20gJy4vdGVuc29yLWZhY3RvcnktaW1wbC5qcyc7XG5pbXBvcnQge0NwdVBpbm5lZENvbnN0cnVjdG9yUGFyYW1ldGVycywgR3B1QnVmZmVyQ29uc3RydWN0b3JQYXJhbWV0ZXJzLCBUZW5zb3JGcm9tR3B1QnVmZmVyT3B0aW9ucywgVGVuc29yRnJvbUltYWdlQml0bWFwT3B0aW9ucywgVGVuc29yRnJvbUltYWdlRGF0YU9wdGlvbnMsIFRlbnNvckZyb21JbWFnZUVsZW1lbnRPcHRpb25zLCBUZW5zb3JGcm9tVGV4dHVyZU9wdGlvbnMsIFRlbnNvckZyb21VcmxPcHRpb25zLCBUZXh0dXJlQ29uc3RydWN0b3JQYXJhbWV0ZXJzfSBmcm9tICcuL3RlbnNvci1mYWN0b3J5LmpzJztcbmltcG9ydCB7Y2hlY2tUeXBlZEFycmF5LCBOVU1FUklDX1RFTlNPUl9UWVBFX1RPX1RZUEVEQVJSQVlfTUFQLCBOVU1FUklDX1RFTlNPUl9UWVBFREFSUkFZX1RPX1RZUEVfTUFQLCBTdXBwb3J0ZWRUeXBlZEFycmF5LCBTdXBwb3J0ZWRUeXBlZEFycmF5Q29uc3RydWN0b3JzfSBmcm9tICcuL3RlbnNvci1pbXBsLXR5cGUtbWFwcGluZy5qcyc7XG5pbXBvcnQge2NhbGN1bGF0ZVNpemUsIHRlbnNvclJlc2hhcGV9IGZyb20gJy4vdGVuc29yLXV0aWxzLWltcGwuanMnO1xuaW1wb3J0IHtUZW5zb3IgYXMgVGVuc29ySW50ZXJmYWNlfSBmcm9tICcuL3RlbnNvci5qcyc7XG5cbi8vIHR5cGUgYWxpYXNlcyBmb3IgdGhvc2UgZXhwb3J0ZWQgZnJvbSBUZW5zb3IgaW50ZXJmYWNlXG5cbnR5cGUgVGVuc29yVHlwZSA9IFRlbnNvckludGVyZmFjZS5UeXBlO1xudHlwZSBUZW5zb3JEYXRhVHlwZSA9IFRlbnNvckludGVyZmFjZS5EYXRhVHlwZTtcbnR5cGUgVGVuc29yRGF0YUxvY2F0aW9uID0gVGVuc29ySW50ZXJmYWNlLkRhdGFMb2NhdGlvbjtcbnR5cGUgVGVuc29yVGV4dHVyZVR5cGUgPSBUZW5zb3JJbnRlcmZhY2UuVGV4dHVyZVR5cGU7XG50eXBlIFRlbnNvckdwdUJ1ZmZlclR5cGUgPSBUZW5zb3JJbnRlcmZhY2UuR3B1QnVmZmVyVHlwZTtcblxuLyoqXG4gKiB0aGUgaW1wbGVtZW50YXRpb24gb2YgVGVuc29yIGludGVyZmFjZS5cbiAqXG4gKiBAaWdub3JlXG4gKi9cbmV4cG9ydCBjbGFzcyBUZW5zb3IgaW1wbGVtZW50cyBUZW5zb3JJbnRlcmZhY2Uge1xuICAvLyAjcmVnaW9uIGNvbnN0cnVjdG9yc1xuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3QgYSBuZXcgQ1BVIHRlbnNvciBvYmplY3QgZnJvbSB0aGUgZ2l2ZW4gdHlwZSwgZGF0YSBhbmQgZGltcy5cbiAgICovXG4gIGNvbnN0cnVjdG9yKFxuICAgICAgdHlwZTogVGVuc29yVHlwZSwgZGF0YTogVGVuc29yRGF0YVR5cGV8cmVhZG9ubHkgc3RyaW5nW118cmVhZG9ubHkgbnVtYmVyW118cmVhZG9ubHkgYm9vbGVhbltdLFxuICAgICAgZGltcz86IHJlYWRvbmx5IG51bWJlcltdKTtcbiAgLyoqXG4gICAqIENvbnN0cnVjdCBhIG5ldyBDUFUgdGVuc29yIG9iamVjdCBmcm9tIHRoZSBnaXZlbiBkYXRhIGFuZCBkaW1zLiBUeXBlIGlzIGluZmVycmVkIGZyb20gZGF0YS5cbiAgICovXG4gIGNvbnN0cnVjdG9yKGRhdGE6IFRlbnNvckRhdGFUeXBlfHJlYWRvbmx5IHN0cmluZ1tdfHJlYWRvbmx5IGJvb2xlYW5bXSwgZGltcz86IHJlYWRvbmx5IG51bWJlcltdKTtcbiAgLyoqXG4gICAqIENvbnN0cnVjdCBhIG5ldyB0ZW5zb3Igb2JqZWN0IGZyb20gdGhlIHBpbm5lZCBDUFUgZGF0YSB3aXRoIHRoZSBnaXZlbiB0eXBlIGFuZCBkaW1zLlxuICAgKlxuICAgKiBUZW5zb3IncyBsb2NhdGlvbiB3aWxsIGJlIHNldCB0byAnY3B1LXBpbm5lZCcuXG4gICAqXG4gICAqIEBwYXJhbSBwYXJhbXMgLSBTcGVjaWZ5IHRoZSBwYXJhbWV0ZXJzIHRvIGNvbnN0cnVjdCB0aGUgdGVuc29yLlxuICAgKi9cbiAgY29uc3RydWN0b3IocGFyYW1zOiBDcHVQaW5uZWRDb25zdHJ1Y3RvclBhcmFtZXRlcnMpO1xuICAvKipcbiAgICogQ29uc3RydWN0IGEgbmV3IHRlbnNvciBvYmplY3QgZnJvbSB0aGUgV2ViR0wgdGV4dHVyZSB3aXRoIHRoZSBnaXZlbiB0eXBlIGFuZCBkaW1zLlxuICAgKlxuICAgKiBUZW5zb3IncyBsb2NhdGlvbiB3aWxsIGJlIHNldCB0byAndGV4dHVyZScuXG4gICAqXG4gICAqIEBwYXJhbSBwYXJhbXMgLSBTcGVjaWZ5IHRoZSBwYXJhbWV0ZXJzIHRvIGNvbnN0cnVjdCB0aGUgdGVuc29yLlxuICAgKi9cbiAgY29uc3RydWN0b3IocGFyYW1zOiBUZXh0dXJlQ29uc3RydWN0b3JQYXJhbWV0ZXJzKTtcbiAgLyoqXG4gICAqIENvbnN0cnVjdCBhIG5ldyB0ZW5zb3Igb2JqZWN0IGZyb20gdGhlIFdlYkdQVSBidWZmZXIgd2l0aCB0aGUgZ2l2ZW4gdHlwZSBhbmQgZGltcy5cbiAgICpcbiAgICogVGVuc29yJ3MgbG9jYXRpb24gd2lsbCBiZSBzZXQgdG8gJ2dwdS1idWZmZXInLlxuICAgKlxuICAgKiBAcGFyYW0gcGFyYW1zIC0gU3BlY2lmeSB0aGUgcGFyYW1ldGVycyB0byBjb25zdHJ1Y3QgdGhlIHRlbnNvci5cbiAgICovXG4gIGNvbnN0cnVjdG9yKHBhcmFtczogR3B1QnVmZmVyQ29uc3RydWN0b3JQYXJhbWV0ZXJzKTtcblxuICAvKipcbiAgICogaW1wbGVtZW50YXRpb24uXG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICAgIGFyZzA6IFRlbnNvclR5cGV8VGVuc29yRGF0YVR5cGV8cmVhZG9ubHkgc3RyaW5nW118cmVhZG9ubHkgYm9vbGVhbltdfENwdVBpbm5lZENvbnN0cnVjdG9yUGFyYW1ldGVyc3xcbiAgICAgIFRleHR1cmVDb25zdHJ1Y3RvclBhcmFtZXRlcnN8R3B1QnVmZmVyQ29uc3RydWN0b3JQYXJhbWV0ZXJzLFxuICAgICAgYXJnMT86IFRlbnNvckRhdGFUeXBlfHJlYWRvbmx5IG51bWJlcltdfHJlYWRvbmx5IHN0cmluZ1tdfHJlYWRvbmx5IGJvb2xlYW5bXSwgYXJnMj86IHJlYWRvbmx5IG51bWJlcltdKSB7XG4gICAgLy8gcGVyZm9ybSBvbmUtdGltZSBjaGVjayBmb3IgQmlnSW50L0Zsb2F0MTZBcnJheSBzdXBwb3J0XG4gICAgY2hlY2tUeXBlZEFycmF5KCk7XG5cbiAgICBsZXQgdHlwZTogVGVuc29yVHlwZTtcbiAgICBsZXQgZGltczogcmVhZG9ubHkgbnVtYmVyW107XG5cbiAgICBpZiAodHlwZW9mIGFyZzAgPT09ICdvYmplY3QnICYmICdsb2NhdGlvbicgaW4gYXJnMCkge1xuICAgICAgLy9cbiAgICAgIC8vIGNvbnN0cnVjdGluZyB0ZW5zb3IgZnJvbSBzcGVjaWZpYyBsb2NhdGlvblxuICAgICAgLy9cbiAgICAgIHRoaXMuZGF0YUxvY2F0aW9uID0gYXJnMC5sb2NhdGlvbjtcbiAgICAgIHR5cGUgPSBhcmcwLnR5cGU7XG4gICAgICBkaW1zID0gYXJnMC5kaW1zO1xuICAgICAgc3dpdGNoIChhcmcwLmxvY2F0aW9uKSB7XG4gICAgICAgIGNhc2UgJ2NwdS1waW5uZWQnOiB7XG4gICAgICAgICAgY29uc3QgZXhwZWN0ZWRUeXBlZEFycmF5Q29uc3RydWN0b3IgPSBOVU1FUklDX1RFTlNPUl9UWVBFX1RPX1RZUEVEQVJSQVlfTUFQLmdldCh0eXBlKTtcbiAgICAgICAgICBpZiAoIWV4cGVjdGVkVHlwZWRBcnJheUNvbnN0cnVjdG9yKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGB1bnN1cHBvcnRlZCB0eXBlIFwiJHt0eXBlfVwiIHRvIGNyZWF0ZSB0ZW5zb3IgZnJvbSBwaW5uZWQgYnVmZmVyYCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghKGFyZzAuZGF0YSBpbnN0YW5jZW9mIGV4cGVjdGVkVHlwZWRBcnJheUNvbnN0cnVjdG9yKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgYnVmZmVyIHNob3VsZCBiZSBvZiB0eXBlICR7ZXhwZWN0ZWRUeXBlZEFycmF5Q29uc3RydWN0b3IubmFtZX1gKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5jcHVEYXRhID0gYXJnMC5kYXRhO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgJ3RleHR1cmUnOiB7XG4gICAgICAgICAgaWYgKHR5cGUgIT09ICdmbG9hdDMyJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgdW5zdXBwb3J0ZWQgdHlwZSBcIiR7dHlwZX1cIiB0byBjcmVhdGUgdGVuc29yIGZyb20gdGV4dHVyZWApO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLmdwdVRleHR1cmVEYXRhID0gYXJnMC50ZXh0dXJlO1xuICAgICAgICAgIHRoaXMuZG93bmxvYWRlciA9IGFyZzAuZG93bmxvYWQ7XG4gICAgICAgICAgdGhpcy5kaXNwb3NlciA9IGFyZzAuZGlzcG9zZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlICdncHUtYnVmZmVyJzoge1xuICAgICAgICAgIGlmICgodHlwZSAhPT0gJ2Zsb2F0MzInICYmIHR5cGUgIT09ICdmbG9hdDE2JyAmJiB0eXBlICE9PSAnaW50MzInICYmIHR5cGUgIT09ICdpbnQ2NCcgJiYgdHlwZSAhPT0gJ3VpbnQzMicgJiZcbiAgICAgICAgICAgICAgIHR5cGUgIT09ICd1aW50OCcgJiYgdHlwZSAhPT0gJ2Jvb2wnKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgdW5zdXBwb3J0ZWQgdHlwZSBcIiR7dHlwZX1cIiB0byBjcmVhdGUgdGVuc29yIGZyb20gZ3B1IGJ1ZmZlcmApO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLmdwdUJ1ZmZlckRhdGEgPSBhcmcwLmdwdUJ1ZmZlcjtcbiAgICAgICAgICB0aGlzLmRvd25sb2FkZXIgPSBhcmcwLmRvd25sb2FkO1xuICAgICAgICAgIHRoaXMuZGlzcG9zZXIgPSBhcmcwLmRpc3Bvc2U7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFRlbnNvciBjb25zdHJ1Y3RvcjogdW5zdXBwb3J0ZWQgbG9jYXRpb24gJyR7dGhpcy5kYXRhTG9jYXRpb259J2ApO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvL1xuICAgICAgLy8gY29uc3RydWN0aW5nIHRlbnNvciBvZiBsb2NhdGlvbiAnY3B1J1xuICAgICAgLy9cbiAgICAgIGxldCBkYXRhOiBUZW5zb3JEYXRhVHlwZTtcbiAgICAgIGxldCBtYXliZURpbXM6IHR5cGVvZiBhcmcxfHR5cGVvZiBhcmcyO1xuICAgICAgLy8gY2hlY2sgd2hldGhlciBhcmcwIGlzIHR5cGUgb3IgZGF0YVxuICAgICAgaWYgKHR5cGVvZiBhcmcwID09PSAnc3RyaW5nJykge1xuICAgICAgICAvL1xuICAgICAgICAvLyBPdmVycmlkZTogY29uc3RydWN0b3IodHlwZSwgZGF0YSwgLi4uKVxuICAgICAgICAvL1xuICAgICAgICB0eXBlID0gYXJnMDtcbiAgICAgICAgbWF5YmVEaW1zID0gYXJnMjtcbiAgICAgICAgaWYgKGFyZzAgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgLy8gc3RyaW5nIHRlbnNvclxuICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheShhcmcxKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQSBzdHJpbmcgdGVuc29yXFwncyBkYXRhIG11c3QgYmUgYSBzdHJpbmcgYXJyYXkuJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIHdlIGRvbid0IGNoZWNrIHdoZXRoZXIgZXZlcnkgZWxlbWVudCBpbiB0aGUgYXJyYXkgaXMgc3RyaW5nOyB0aGlzIGlzIHRvbyBzbG93LiB3ZSBhc3N1bWUgaXQncyBjb3JyZWN0IGFuZFxuICAgICAgICAgIC8vIGVycm9yIHdpbGwgYmUgcG9wdWxhdGVkIGF0IGluZmVyZW5jZVxuICAgICAgICAgIGRhdGEgPSBhcmcxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIG51bWVyaWMgdGVuc29yXG4gICAgICAgICAgY29uc3QgdHlwZWRBcnJheUNvbnN0cnVjdG9yID0gTlVNRVJJQ19URU5TT1JfVFlQRV9UT19UWVBFREFSUkFZX01BUC5nZXQoYXJnMCk7XG4gICAgICAgICAgaWYgKHR5cGVkQXJyYXlDb25zdHJ1Y3RvciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBVbnN1cHBvcnRlZCB0ZW5zb3IgdHlwZTogJHthcmcwfS5gKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoYXJnMSkpIHtcbiAgICAgICAgICAgIGlmIChhcmcwID09PSAnZmxvYXQxNicgJiYgdHlwZWRBcnJheUNvbnN0cnVjdG9yID09PSBVaW50MTZBcnJheSkge1xuICAgICAgICAgICAgICAvLyBXaGVuIG5vIEZsb2F0MTZBcnJheSBwb2x5ZmlsbCBpcyB1c2VkLCB3ZSBjYW5ub3QgY3JlYXRlICdmbG9hdDE2JyB0ZW5zb3IgZnJvbSBudW1iZXIgYXJyYXkuXG4gICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgIC8vIFRocm93IGVycm9yIGhlcmUgYmVjYXVzZSB3aGVuIHVzZXIgdHJ5IHRvIHVzZSBudW1iZXIgYXJyYXkgYXMgZGF0YSxcbiAgICAgICAgICAgICAgLy8gZS5nLiBuZXcgVGVuc29yKCdmbG9hdDE2JywgWzEsIDIsIDMsIDRdLCBkaW1zKSksIGl0IHdpbGwgYWN0dWFsbHkgY2FsbFxuICAgICAgICAgICAgICAvLyBVaW50MTZBcnJheS5mcm9tKGFyZzEpIHdoaWNoIGdlbmVyYXRlcyB3cm9uZyBkYXRhLlxuICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgICAgICAgICAgICAgJ0NyZWF0aW5nIGEgZmxvYXQxNiB0ZW5zb3IgZnJvbSBudW1iZXIgYXJyYXkgaXMgbm90IHN1cHBvcnRlZC4gUGxlYXNlIHVzZSBVaW50MTZBcnJheSBhcyBkYXRhLicpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChhcmcwID09PSAndWludDY0JyB8fCBhcmcwID09PSAnaW50NjQnKSB7XG4gICAgICAgICAgICAgIC8vIHVzZSAnYXMgYW55JyBoZXJlIGJlY2F1c2U6XG4gICAgICAgICAgICAgIC8vIDEuIFR5cGVTY3JpcHQncyBjaGVjayBvbiB0eXBlIG9mICdBcnJheS5pc0FycmF5KCknIGRvZXMgbm90IHdvcmsgd2l0aCByZWFkb25seSBhcnJheXMuXG4gICAgICAgICAgICAgIC8vIHNlZSBodHRwczovL2dpdGh1Yi5jb20vbWljcm9zb2Z0L1R5cGVTY3JpcHQvaXNzdWVzLzE3MDAyXG4gICAgICAgICAgICAgIC8vIDIuIFR5cGVTY3JpcHQncyBjaGVjayBvbiB1bmlvbiB0eXBlIG9mICcoQmlnSW50NjRBcnJheUNvbnN0cnVjdG9yfEJpZ1VpbnQ2NEFycmF5Q29uc3RydWN0b3IpLmZyb20oKSdcbiAgICAgICAgICAgICAgLy8gZG9lcyBub3QgYWNjZXB0IHBhcmFtZXRlciBtYXBGbi5cbiAgICAgICAgICAgICAgLy8gMy4gcGFyYW1ldGVycyBvZiAnU3VwcG9ydGVkVHlwZWRBcnJheUNvbnN0cnVjdG9ycy5mcm9tKCknIGRvZXMgbm90IG1hdGNoIHRoZSByZXF1aXJlbWVudCBvZiB0aGUgdW5pb25cbiAgICAgICAgICAgICAgLy8gdHlwZS5cblxuICAgICAgICAgICAgICAvLyBhc3N1bWUgJ2FyZzEnIGlzIG9mIHR5cGUgXCJyZWFkb25seSBudW1iZXJbXXxyZWFkb25seSBiaWdpbnRbXVwiIGhlcmUuXG5cbiAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgICAgICAgZGF0YSA9ICh0eXBlZEFycmF5Q29uc3RydWN0b3IgYXMgYW55KS5mcm9tKGFyZzEsIEJpZ0ludCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAvLyBhc3N1bWUgJ2FyZzEnIGlzIG9mIHR5cGUgXCJyZWFkb25seSBudW1iZXJbXVwiIGhlcmUuXG4gICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgICAgICAgIGRhdGEgPSAodHlwZWRBcnJheUNvbnN0cnVjdG9yIGFzIGFueSkuZnJvbShhcmcxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKGFyZzEgaW5zdGFuY2VvZiB0eXBlZEFycmF5Q29uc3RydWN0b3IpIHtcbiAgICAgICAgICAgIGRhdGEgPSBhcmcxO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBBICR7dHlwZX0gdGVuc29yJ3MgZGF0YSBtdXN0IGJlIHR5cGUgb2YgJHt0eXBlZEFycmF5Q29uc3RydWN0b3J9YCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvL1xuICAgICAgICAvLyBPdmVycmlkZTogY29uc3RydWN0b3IoZGF0YSwgLi4uKVxuICAgICAgICAvL1xuICAgICAgICBtYXliZURpbXMgPSBhcmcxO1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShhcmcwKSkge1xuICAgICAgICAgIC8vIG9ubHkgYm9vbGVhbltdIGFuZCBzdHJpbmdbXSBpcyBzdXBwb3J0ZWRcbiAgICAgICAgICBpZiAoYXJnMC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RlbnNvciB0eXBlIGNhbm5vdCBiZSBpbmZlcnJlZCBmcm9tIGFuIGVtcHR5IGFycmF5LicpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zdCBmaXJzdEVsZW1lbnRUeXBlID0gdHlwZW9mIGFyZzBbMF07XG4gICAgICAgICAgaWYgKGZpcnN0RWxlbWVudFR5cGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB0eXBlID0gJ3N0cmluZyc7XG4gICAgICAgICAgICBkYXRhID0gYXJnMDtcbiAgICAgICAgICB9IGVsc2UgaWYgKGZpcnN0RWxlbWVudFR5cGUgPT09ICdib29sZWFuJykge1xuICAgICAgICAgICAgdHlwZSA9ICdib29sJztcbiAgICAgICAgICAgIC8vICdhcmcwJyBpcyBvZiB0eXBlICdib29sZWFuW10nLiBVaW50OEFycmF5LmZyb20oYm9vbGVhbltdKSBhY3R1YWxseSB3b3JrcywgYnV0IHR5cGVzY3JpcHQgdGhpbmtzIHRoaXMgaXNcbiAgICAgICAgICAgIC8vIHdyb25nIHR5cGUuIFdlIHVzZSAnYXMgYW55JyB0byBtYWtlIGl0IGhhcHB5LlxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgICAgIGRhdGEgPSBVaW50OEFycmF5LmZyb20oYXJnMCBhcyBhbnlbXSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYEludmFsaWQgZWxlbWVudCB0eXBlIG9mIGRhdGEgYXJyYXk6ICR7Zmlyc3RFbGVtZW50VHlwZX0uYCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIGdldCB0ZW5zb3IgdHlwZSBmcm9tIFR5cGVkQXJyYXlcbiAgICAgICAgICBjb25zdCBtYXBwZWRUeXBlID1cbiAgICAgICAgICAgICAgTlVNRVJJQ19URU5TT1JfVFlQRURBUlJBWV9UT19UWVBFX01BUC5nZXQoYXJnMC5jb25zdHJ1Y3RvciBhcyBTdXBwb3J0ZWRUeXBlZEFycmF5Q29uc3RydWN0b3JzKTtcbiAgICAgICAgICBpZiAobWFwcGVkVHlwZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBVbnN1cHBvcnRlZCB0eXBlIGZvciB0ZW5zb3IgZGF0YTogJHthcmcwLmNvbnN0cnVjdG9yfS5gKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdHlwZSA9IG1hcHBlZFR5cGU7XG4gICAgICAgICAgZGF0YSA9IGFyZzAgYXMgU3VwcG9ydGVkVHlwZWRBcnJheTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyB0eXBlIGFuZCBkYXRhIGlzIHByb2Nlc3NlZCwgbm93IHByb2Nlc3NpbmcgZGltc1xuICAgICAgaWYgKG1heWJlRGltcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIC8vIGFzc3VtZSAxLUQgdGVuc29yIGlmIGRpbXMgb21pdHRlZFxuICAgICAgICBtYXliZURpbXMgPSBbZGF0YS5sZW5ndGhdO1xuICAgICAgfSBlbHNlIGlmICghQXJyYXkuaXNBcnJheShtYXliZURpbXMpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0EgdGVuc29yXFwncyBkaW1zIG11c3QgYmUgYSBudW1iZXIgYXJyYXknKTtcbiAgICAgIH1cbiAgICAgIGRpbXMgPSBtYXliZURpbXMgYXMgcmVhZG9ubHkgbnVtYmVyW107XG5cbiAgICAgIHRoaXMuY3B1RGF0YSA9IGRhdGE7XG4gICAgICB0aGlzLmRhdGFMb2NhdGlvbiA9ICdjcHUnO1xuICAgIH1cblxuICAgIC8vIHBlcmZvcm0gY2hlY2sgb24gZGltc1xuICAgIGNvbnN0IHNpemUgPSBjYWxjdWxhdGVTaXplKGRpbXMpO1xuICAgIC8vIGlmIGRhdGEgaXMgb24gQ1BVLCBjaGVjayB3aGV0aGVyIGRhdGEgbGVuZ3RoIG1hdGNoZXMgdGVuc29yIHNpemVcbiAgICBpZiAodGhpcy5jcHVEYXRhICYmIHNpemUgIT09IHRoaXMuY3B1RGF0YS5sZW5ndGgpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgVGVuc29yJ3Mgc2l6ZSgke3NpemV9KSBkb2VzIG5vdCBtYXRjaCBkYXRhIGxlbmd0aCgke3RoaXMuY3B1RGF0YS5sZW5ndGh9KS5gKTtcbiAgICB9XG5cbiAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgIHRoaXMuZGltcyA9IGRpbXM7XG4gICAgdGhpcy5zaXplID0gc2l6ZTtcbiAgfVxuICAvLyAjZW5kcmVnaW9uXG5cbiAgLy8gI3JlZ2lvbiBmYWN0b3J5XG4gIHN0YXRpYyBhc3luYyBmcm9tSW1hZ2UoXG4gICAgICBpbWFnZTogSW1hZ2VEYXRhfEhUTUxJbWFnZUVsZW1lbnR8SW1hZ2VCaXRtYXB8c3RyaW5nLFxuICAgICAgb3B0aW9ucz86IFRlbnNvckZyb21JbWFnZURhdGFPcHRpb25zfFRlbnNvckZyb21JbWFnZUVsZW1lbnRPcHRpb25zfFRlbnNvckZyb21JbWFnZUJpdG1hcE9wdGlvbnN8XG4gICAgICBUZW5zb3JGcm9tVXJsT3B0aW9ucyk6IFByb21pc2U8VGVuc29ySW50ZXJmYWNlPiB7XG4gICAgcmV0dXJuIHRlbnNvckZyb21JbWFnZShpbWFnZSwgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZnJvbVRleHR1cmU8VCBleHRlbmRzIFRlbnNvckludGVyZmFjZS5UZXh0dXJlRGF0YVR5cGVzPihcbiAgICAgIHRleHR1cmU6IFRlbnNvclRleHR1cmVUeXBlLCBvcHRpb25zOiBUZW5zb3JGcm9tVGV4dHVyZU9wdGlvbnM8VD4pOiBUZW5zb3JJbnRlcmZhY2Uge1xuICAgIHJldHVybiB0ZW5zb3JGcm9tVGV4dHVyZSh0ZXh0dXJlLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBmcm9tR3B1QnVmZmVyPFQgZXh0ZW5kcyBUZW5zb3JJbnRlcmZhY2UuR3B1QnVmZmVyRGF0YVR5cGVzPihcbiAgICAgIGdwdUJ1ZmZlcjogVGVuc29yR3B1QnVmZmVyVHlwZSwgb3B0aW9uczogVGVuc29yRnJvbUdwdUJ1ZmZlck9wdGlvbnM8VD4pOiBUZW5zb3JJbnRlcmZhY2Uge1xuICAgIHJldHVybiB0ZW5zb3JGcm9tR3B1QnVmZmVyKGdwdUJ1ZmZlciwgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZnJvbVBpbm5lZEJ1ZmZlcjxUIGV4dGVuZHMgVGVuc29ySW50ZXJmYWNlLkNwdVBpbm5lZERhdGFUeXBlcz4oXG4gICAgICB0eXBlOiBULCBidWZmZXI6IFRlbnNvckludGVyZmFjZS5EYXRhVHlwZU1hcFtUXSwgZGltcz86IHJlYWRvbmx5IG51bWJlcltdKTogVGVuc29yIHtcbiAgICByZXR1cm4gdGVuc29yRnJvbVBpbm5lZEJ1ZmZlcih0eXBlLCBidWZmZXIsIGRpbXMpO1xuICB9XG5cbiAgLy8gI2VuZHJlZ2lvblxuXG4gIC8vICNyZWdpb24gY29udmVyc2lvbnNcbiAgdG9EYXRhVVJMKG9wdGlvbnM/OiBUZW5zb3JUb0RhdGFVcmxPcHRpb25zKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGVuc29yVG9EYXRhVVJMKHRoaXMsIG9wdGlvbnMpO1xuICB9XG5cbiAgdG9JbWFnZURhdGEob3B0aW9ucz86IFRlbnNvclRvSW1hZ2VEYXRhT3B0aW9ucyk6IEltYWdlRGF0YSB7XG4gICAgcmV0dXJuIHRlbnNvclRvSW1hZ2VEYXRhKHRoaXMsIG9wdGlvbnMpO1xuICB9XG4gIC8vICNlbmRyZWdpb25cblxuICAvLyAjcmVnaW9uIHB1YmxpYyBmaWVsZHNcbiAgcmVhZG9ubHkgZGltczogcmVhZG9ubHkgbnVtYmVyW107XG4gIHJlYWRvbmx5IHR5cGU6IFRlbnNvclR5cGU7XG4gIHJlYWRvbmx5IHNpemU6IG51bWJlcjtcbiAgLy8gI2VuZHJlZ2lvblxuXG4gIC8vICNyZWdpb24gcHJpdmF0ZSBmaWVsZHNcblxuICAvKipcbiAgICogc3RvcmVzIHRoZSBsb2NhdGlvbiBvZiB0aGUgZGF0YS5cbiAgICovXG4gIHByaXZhdGUgZGF0YUxvY2F0aW9uOiBUZW5zb3JEYXRhTG9jYXRpb247XG5cbiAgLyoqXG4gICAqIHN0b3JlcyB0aGUgZGF0YSBvbiBDUFUsIGlmIGxvY2F0aW9uIGlzICdjcHUnIG9yICdjcHUtcGlubmVkJy4gb3RoZXJ3aXNlIGVtcHR5LlxuICAgKi9cbiAgcHJpdmF0ZSBjcHVEYXRhPzogVGVuc29yRGF0YVR5cGU7XG5cbiAgLyoqXG4gICAqIHN0b3JlcyB0aGUgdW5kZXJseWluZyB0ZXh0dXJlIHdoZW4gbG9jYXRpb24gaXMgJ3RleHR1cmUnLiBvdGhlcndpc2UgZW1wdHkuXG4gICAqL1xuICBwcml2YXRlIGdwdVRleHR1cmVEYXRhPzogVGVuc29yVGV4dHVyZVR5cGU7XG5cbiAgLyoqXG4gICAqIHN0b3JlcyB0aGUgdW5kZXJseWluZyBHUFUgYnVmZmVyIHdoZW4gbG9jYXRpb24gaXMgJ2dwdS1idWZmZXInLiBvdGhlcndpc2UgZW1wdHkuXG4gICAqL1xuICBwcml2YXRlIGdwdUJ1ZmZlckRhdGE/OiBUZW5zb3JHcHVCdWZmZXJUeXBlO1xuXG4gIC8qKlxuICAgKiBzdG9yZXMgYW4gb3B0aW9uYWwgZG93bmxvYWRlciBmdW5jdGlvbiB0byBkb3dubG9hZCBkYXRhIGZyb20gR1BVIHRvIENQVS5cbiAgICovXG4gIHByaXZhdGUgZG93bmxvYWRlcj8oKTogUHJvbWlzZTxUZW5zb3JEYXRhVHlwZT47XG5cbiAgLyoqXG4gICAqIGEgZmxhZyBpbmRpY2F0aW5nIHdoZXRoZXIgdGhlIGRhdGEgaXMgYmVpbmcgZG93bmxvYWRlZCBmcm9tIEdQVSB0byBDUFUuXG4gICAqL1xuICBwcml2YXRlIGlzRG93bmxvYWRpbmc/OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBzdG9yZXMgYW4gb3B0aW9uYWwgZGlzcG9zZXIgZnVuY3Rpb24gdG8gZGlzcG9zZSB0aGUgdW5kZXJseWluZyBkYXRhLlxuICAgKi9cbiAgcHJpdmF0ZSBkaXNwb3Nlcj8oKTogdm9pZDtcbiAgLy8gI2VuZHJlZ2lvblxuXG4gIC8vICNyZWdpb24gcHJvcGVydGllc1xuICBnZXQgZGF0YSgpOiBUZW5zb3JEYXRhVHlwZSB7XG4gICAgdGhpcy5lbnN1cmVWYWxpZCgpO1xuICAgIGlmICghdGhpcy5jcHVEYXRhKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgJ1RoZSBkYXRhIGlzIG5vdCBvbiBDUFUuIFVzZSBgZ2V0RGF0YSgpYCB0byBkb3dubG9hZCBHUFUgZGF0YSB0byBDUFUsICcgK1xuICAgICAgICAgICdvciB1c2UgYHRleHR1cmVgIG9yIGBncHVCdWZmZXJgIHByb3BlcnR5IHRvIGFjY2VzcyB0aGUgR1BVIGRhdGEgZGlyZWN0bHkuJyk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmNwdURhdGE7XG4gIH1cblxuICBnZXQgbG9jYXRpb24oKTogVGVuc29yRGF0YUxvY2F0aW9uIHtcbiAgICByZXR1cm4gdGhpcy5kYXRhTG9jYXRpb247XG4gIH1cblxuICBnZXQgdGV4dHVyZSgpOiBUZW5zb3JUZXh0dXJlVHlwZSB7XG4gICAgdGhpcy5lbnN1cmVWYWxpZCgpO1xuICAgIGlmICghdGhpcy5ncHVUZXh0dXJlRGF0YSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgZGF0YSBpcyBub3Qgc3RvcmVkIGFzIGEgV2ViR0wgdGV4dHVyZS4nKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuZ3B1VGV4dHVyZURhdGE7XG4gIH1cblxuICBnZXQgZ3B1QnVmZmVyKCk6IFRlbnNvckdwdUJ1ZmZlclR5cGUge1xuICAgIHRoaXMuZW5zdXJlVmFsaWQoKTtcbiAgICBpZiAoIXRoaXMuZ3B1QnVmZmVyRGF0YSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgZGF0YSBpcyBub3Qgc3RvcmVkIGFzIGEgV2ViR1BVIGJ1ZmZlci4nKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuZ3B1QnVmZmVyRGF0YTtcbiAgfVxuICAvLyAjZW5kcmVnaW9uXG5cbiAgLy8gI3JlZ2lvbiBtZXRob2RzXG5cbiAgYXN5bmMgZ2V0RGF0YShyZWxlYXNlRGF0YT86IGJvb2xlYW4pOiBQcm9taXNlPFRlbnNvckRhdGFUeXBlPiB7XG4gICAgdGhpcy5lbnN1cmVWYWxpZCgpO1xuICAgIHN3aXRjaCAodGhpcy5kYXRhTG9jYXRpb24pIHtcbiAgICAgIGNhc2UgJ2NwdSc6XG4gICAgICBjYXNlICdjcHUtcGlubmVkJzpcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YTtcbiAgICAgIGNhc2UgJ3RleHR1cmUnOlxuICAgICAgY2FzZSAnZ3B1LWJ1ZmZlcic6IHtcbiAgICAgICAgaWYgKCF0aGlzLmRvd25sb2FkZXIpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBjdXJyZW50IHRlbnNvciBpcyBub3QgY3JlYXRlZCB3aXRoIGEgc3BlY2lmaWVkIGRhdGEgZG93bmxvYWRlci4nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5pc0Rvd25sb2FkaW5nKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgY3VycmVudCB0ZW5zb3IgaXMgYmVpbmcgZG93bmxvYWRlZC4nKTtcbiAgICAgICAgfVxuICAgICAgICB0cnkge1xuICAgICAgICAgIHRoaXMuaXNEb3dubG9hZGluZyA9IHRydWU7XG4gICAgICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHRoaXMuZG93bmxvYWRlcigpO1xuICAgICAgICAgIHRoaXMuZG93bmxvYWRlciA9IHVuZGVmaW5lZDtcbiAgICAgICAgICB0aGlzLmRhdGFMb2NhdGlvbiA9ICdjcHUnO1xuICAgICAgICAgIHRoaXMuY3B1RGF0YSA9IGRhdGE7XG5cbiAgICAgICAgICBpZiAocmVsZWFzZURhdGEgJiYgdGhpcy5kaXNwb3Nlcikge1xuICAgICAgICAgICAgdGhpcy5kaXNwb3NlcigpO1xuICAgICAgICAgICAgdGhpcy5kaXNwb3NlciA9IHVuZGVmaW5lZDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gZGF0YTtcblxuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIHRoaXMuaXNEb3dubG9hZGluZyA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGNhbm5vdCBnZXQgZGF0YSBmcm9tIGxvY2F0aW9uOiAke3RoaXMuZGF0YUxvY2F0aW9ufWApO1xuICAgIH1cbiAgfVxuXG4gIGRpc3Bvc2UoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuaXNEb3dubG9hZGluZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgY3VycmVudCB0ZW5zb3IgaXMgYmVpbmcgZG93bmxvYWRlZC4nKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5kaXNwb3Nlcikge1xuICAgICAgdGhpcy5kaXNwb3NlcigpO1xuICAgICAgdGhpcy5kaXNwb3NlciA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgdGhpcy5jcHVEYXRhID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuZ3B1VGV4dHVyZURhdGEgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5ncHVCdWZmZXJEYXRhID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuZG93bmxvYWRlciA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmlzRG93bmxvYWRpbmcgPSB1bmRlZmluZWQ7XG5cbiAgICB0aGlzLmRhdGFMb2NhdGlvbiA9ICdub25lJztcbiAgfVxuXG4gIC8vICNlbmRyZWdpb25cblxuICAvLyAjcmVnaW9uIHRlbnNvciB1dGlsaXRpZXNcbiAgcHJpdmF0ZSBlbnN1cmVWYWxpZCgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5kYXRhTG9jYXRpb24gPT09ICdub25lJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgdGVuc29yIGlzIGRpc3Bvc2VkLicpO1xuICAgIH1cbiAgfVxuXG4gIHJlc2hhcGUoZGltczogcmVhZG9ubHkgbnVtYmVyW10pOiBUZW5zb3JJbnRlcmZhY2Uge1xuICAgIHRoaXMuZW5zdXJlVmFsaWQoKTtcbiAgICBpZiAodGhpcy5kb3dubG9hZGVyIHx8IHRoaXMuZGlzcG9zZXIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IHJlc2hhcGUgYSB0ZW5zb3IgdGhhdCBvd25zIEdQVSByZXNvdXJjZS4nKTtcbiAgICB9XG4gICAgcmV0dXJuIHRlbnNvclJlc2hhcGUodGhpcywgZGltcyk7XG4gIH1cbiAgLy8gI2VuZHJlZ2lvblxufVxuIiwgIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuXG5pbXBvcnQge1RlbnNvckZhY3Rvcnl9IGZyb20gJy4vdGVuc29yLWZhY3RvcnkuanMnO1xuaW1wb3J0IHtUZW5zb3IgYXMgVGVuc29ySW1wbH0gZnJvbSAnLi90ZW5zb3ItaW1wbC5qcyc7XG5pbXBvcnQge1R5cGVkVGVuc29yVXRpbHN9IGZyb20gJy4vdGVuc29yLXV0aWxzLmpzJztcblxuLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXJlZGVjbGFyZSAqL1xuXG4vKipcbiAqIHJlcHJlc2VudCBhIGJhc2ljIHRlbnNvciB3aXRoIHNwZWNpZmllZCBkaW1lbnNpb25zIGFuZCBkYXRhIHR5cGUuXG4gKi9cbmludGVyZmFjZSBUeXBlZFRlbnNvckJhc2U8VCBleHRlbmRzIFRlbnNvci5UeXBlPiB7XG4gIC8qKlxuICAgKiBHZXQgdGhlIGRpbWVuc2lvbnMgb2YgdGhlIHRlbnNvci5cbiAgICovXG4gIHJlYWRvbmx5IGRpbXM6IHJlYWRvbmx5IG51bWJlcltdO1xuICAvKipcbiAgICogR2V0IHRoZSBkYXRhIHR5cGUgb2YgdGhlIHRlbnNvci5cbiAgICovXG4gIHJlYWRvbmx5IHR5cGU6IFQ7XG4gIC8qKlxuICAgKiBHZXQgdGhlIGJ1ZmZlciBkYXRhIG9mIHRoZSB0ZW5zb3IuXG4gICAqXG4gICAqIElmIHRoZSBkYXRhIGlzIG5vdCBvbiBDUFUgKGVnLiBpdCdzIGluIHRoZSBmb3JtIG9mIFdlYkdMIHRleHR1cmUgb3IgV2ViR1BVIGJ1ZmZlciksIHRocm93IGVycm9yLlxuICAgKi9cbiAgcmVhZG9ubHkgZGF0YTogVGVuc29yLkRhdGFUeXBlTWFwW1RdO1xuICAvKipcbiAgICogR2V0IHRoZSBsb2NhdGlvbiBvZiB0aGUgZGF0YS5cbiAgICovXG4gIHJlYWRvbmx5IGxvY2F0aW9uOiBUZW5zb3IuRGF0YUxvY2F0aW9uO1xuICAvKipcbiAgICogR2V0IHRoZSBXZWJHTCB0ZXh0dXJlIHRoYXQgaG9sZHMgdGhlIHRlbnNvciBkYXRhLlxuICAgKlxuICAgKiBJZiB0aGUgZGF0YSBpcyBub3Qgb24gR1BVIGFzIFdlYkdMIHRleHR1cmUsIHRocm93IGVycm9yLlxuICAgKi9cbiAgcmVhZG9ubHkgdGV4dHVyZTogVGVuc29yLlRleHR1cmVUeXBlO1xuICAvKipcbiAgICogR2V0IHRoZSBXZWJHUFUgYnVmZmVyIHRoYXQgaG9sZHMgdGhlIHRlbnNvciBkYXRhLlxuICAgKlxuICAgKiBJZiB0aGUgZGF0YSBpcyBub3Qgb24gR1BVIGFzIFdlYkdQVSBidWZmZXIsIHRocm93IGVycm9yLlxuICAgKi9cbiAgcmVhZG9ubHkgZ3B1QnVmZmVyOiBUZW5zb3IuR3B1QnVmZmVyVHlwZTtcblxuICAvKipcbiAgICogR2V0IHRoZSBidWZmZXIgZGF0YSBvZiB0aGUgdGVuc29yLlxuICAgKlxuICAgKiBJZiB0aGUgZGF0YSBpcyBvbiBDUFUsIHJldHVybnMgdGhlIGRhdGEgaW1tZWRpYXRlbHkuXG4gICAqIElmIHRoZSBkYXRhIGlzIG9uIEdQVSwgZG93bmxvYWRzIHRoZSBkYXRhIGFuZCByZXR1cm5zIHRoZSBwcm9taXNlLlxuICAgKlxuICAgKiBAcGFyYW0gcmVsZWFzZURhdGEgLSB3aGV0aGVyIHJlbGVhc2UgdGhlIGRhdGEgb24gR1BVLiBJZ25vcmUgaWYgZGF0YSBpcyBhbHJlYWR5IG9uIENQVS5cbiAgICovXG4gIGdldERhdGEocmVsZWFzZURhdGE/OiBib29sZWFuKTogUHJvbWlzZTxUZW5zb3IuRGF0YVR5cGVNYXBbVF0+O1xuXG4gIC8qKlxuICAgKiBEaXNwb3NlIHRoZSB0ZW5zb3IgZGF0YS5cbiAgICpcbiAgICogSWYgdGhlIGRhdGEgaXMgb24gQ1BVLCByZW1vdmUgaXRzIGludGVybmFsIHJlZmVyZW5jZSB0byB0aGUgdW5kZXJseWluZyBkYXRhLlxuICAgKiBJZiB0aGUgZGF0YSBpcyBvbiBHUFUsIHJlbGVhc2UgdGhlIGRhdGEgb24gR1BVLlxuICAgKlxuICAgKiBBZnRlciBjYWxsaW5nIHRoaXMgZnVuY3Rpb24sIHRoZSB0ZW5zb3IgaXMgY29uc2lkZXJlZCBubyBsb25nZXIgdmFsaWQuIEl0cyBsb2NhdGlvbiB3aWxsIGJlIHNldCB0byAnbm9uZScuXG4gICAqL1xuICBkaXNwb3NlKCk6IHZvaWQ7XG59XG5cbmV4cG9ydCBkZWNsYXJlIG5hbWVzcGFjZSBUZW5zb3Ige1xuICBpbnRlcmZhY2UgRGF0YVR5cGVNYXAge1xuICAgIGZsb2F0MzI6IEZsb2F0MzJBcnJheTtcbiAgICB1aW50ODogVWludDhBcnJheTtcbiAgICBpbnQ4OiBJbnQ4QXJyYXk7XG4gICAgdWludDE2OiBVaW50MTZBcnJheTtcbiAgICBpbnQxNjogSW50MTZBcnJheTtcbiAgICBpbnQzMjogSW50MzJBcnJheTtcbiAgICBpbnQ2NDogQmlnSW50NjRBcnJheTtcbiAgICBzdHJpbmc6IHN0cmluZ1tdO1xuICAgIGJvb2w6IFVpbnQ4QXJyYXk7XG4gICAgZmxvYXQxNjogVWludDE2QXJyYXk7ICAvLyBLZWVwIHVzaW5nIFVpbnQxNkFycmF5IHVudGlsIHdlIGhhdmUgYSBjb25jcmV0ZSBzb2x1dGlvbiBmb3IgZmxvYXQgMTYuXG4gICAgZmxvYXQ2NDogRmxvYXQ2NEFycmF5O1xuICAgIHVpbnQzMjogVWludDMyQXJyYXk7XG4gICAgdWludDY0OiBCaWdVaW50NjRBcnJheTtcbiAgICAvLyBjb21wbGV4NjQ6IG5ldmVyO1xuICAgIC8vIGNvbXBsZXgxMjg6IG5ldmVyO1xuICAgIC8vIGJmbG9hdDE2OiBuZXZlcjtcbiAgfVxuXG4gIGludGVyZmFjZSBFbGVtZW50VHlwZU1hcCB7XG4gICAgZmxvYXQzMjogbnVtYmVyO1xuICAgIHVpbnQ4OiBudW1iZXI7XG4gICAgaW50ODogbnVtYmVyO1xuICAgIHVpbnQxNjogbnVtYmVyO1xuICAgIGludDE2OiBudW1iZXI7XG4gICAgaW50MzI6IG51bWJlcjtcbiAgICBpbnQ2NDogYmlnaW50O1xuICAgIHN0cmluZzogc3RyaW5nO1xuICAgIGJvb2w6IGJvb2xlYW47XG4gICAgZmxvYXQxNjogbnVtYmVyOyAgLy8gS2VlcCB1c2luZyBVaW50MTZBcnJheSB1bnRpbCB3ZSBoYXZlIGEgY29uY3JldGUgc29sdXRpb24gZm9yIGZsb2F0IDE2LlxuICAgIGZsb2F0NjQ6IG51bWJlcjtcbiAgICB1aW50MzI6IG51bWJlcjtcbiAgICB1aW50NjQ6IGJpZ2ludDtcbiAgICAvLyBjb21wbGV4NjQ6IG5ldmVyO1xuICAgIC8vIGNvbXBsZXgxMjg6IG5ldmVyO1xuICAgIC8vIGJmbG9hdDE2OiBuZXZlcjtcbiAgfVxuXG4gIHR5cGUgRGF0YVR5cGUgPSBEYXRhVHlwZU1hcFtUeXBlXTtcbiAgdHlwZSBFbGVtZW50VHlwZSA9IEVsZW1lbnRUeXBlTWFwW1R5cGVdO1xuXG4gIC8qKlxuICAgKiBzdXBwb3J0ZWQgZGF0YSB0eXBlcyBmb3IgY29uc3RydWN0aW5nIGEgdGVuc29yIGZyb20gYSBwaW5uZWQgQ1BVIGJ1ZmZlclxuICAgKi9cbiAgZXhwb3J0IHR5cGUgQ3B1UGlubmVkRGF0YVR5cGVzID0gRXhjbHVkZTxUZW5zb3IuVHlwZSwgJ3N0cmluZyc+O1xuXG4gIC8qKlxuICAgKiB0eXBlIGFsaWFzIGZvciBXZWJHTCB0ZXh0dXJlXG4gICAqL1xuICBleHBvcnQgdHlwZSBUZXh0dXJlVHlwZSA9IFdlYkdMVGV4dHVyZTtcblxuICAvKipcbiAgICogc3VwcG9ydGVkIGRhdGEgdHlwZXMgZm9yIGNvbnN0cnVjdGluZyBhIHRlbnNvciBmcm9tIGEgV2ViR0wgdGV4dHVyZVxuICAgKi9cbiAgZXhwb3J0IHR5cGUgVGV4dHVyZURhdGFUeXBlcyA9ICdmbG9hdDMyJztcblxuICAvKipcbiAgICogdHlwZSBhbGlhcyBmb3IgV2ViR1BVIGJ1ZmZlclxuICAgKlxuICAgKiBUaGUgcmVhc29uIHdoeSB3ZSBkb24ndCB1c2UgdHlwZSBcIkdQVUJ1ZmZlclwiIGRlZmluZWQgaW4gd2ViZ3B1LmQudHMgZnJvbSBAd2ViZ3B1L3R5cGVzIGlzIGJlY2F1c2UgXCJAd2ViZ3B1L3R5cGVzXCJcbiAgICogcmVxdWlyZXMgXCJAdHlwZXMvZG9tLXdlYmNvZGVjc1wiIGFzIHBlZXIgZGVwZW5kZW5jeSB3aGVuIHVzaW5nIFR5cGVTY3JpcHQgPCB2NS4xIGFuZCBpdHMgdmVyc2lvbiBuZWVkIHRvIGJlIGNob3NlblxuICAgKiBjYXJlZnVsbHkgYWNjb3JkaW5nIHRvIHRoZSBUeXBlU2NyaXB0IHZlcnNpb24gYmVpbmcgdXNlZC4gVGhpcyBtZWFucyBzbyBmYXIgdGhlcmUgaXMgbm90IGEgd2F5IHRvIGtlZXAgZXZlcnlcbiAgICogVHlwZVNjcmlwdCB2ZXJzaW9uIGhhcHB5LiBJdCB0dXJucyBvdXQgdGhhdCB3ZSB3aWxsIGVhc2lseSBicm9rZSB1c2VycyBvbiBzb21lIFR5cGVTY3JpcHQgdmVyc2lvbi5cbiAgICpcbiAgICogZm9yIG1vcmUgaW5mbyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2dwdXdlYi90eXBlcy9pc3N1ZXMvMTI3XG4gICAqL1xuICBleHBvcnQgdHlwZSBHcHVCdWZmZXJUeXBlID0ge3NpemU6IG51bWJlcjsgbWFwU3RhdGU6ICd1bm1hcHBlZCcgfCAncGVuZGluZycgfCAnbWFwcGVkJ307XG5cbiAgLyoqXG4gICAqIHN1cHBvcnRlZCBkYXRhIHR5cGVzIGZvciBjb25zdHJ1Y3RpbmcgYSB0ZW5zb3IgZnJvbSBhIFdlYkdQVSBidWZmZXJcbiAgICovXG4gIGV4cG9ydCB0eXBlIEdwdUJ1ZmZlckRhdGFUeXBlcyA9ICdmbG9hdDMyJ3wnZmxvYXQxNid8J2ludDMyJ3wnaW50NjQnfCd1aW50MzInfCd1aW50OCd8J2Jvb2wnO1xuXG4gIC8qKlxuICAgKiByZXByZXNlbnQgd2hlcmUgdGhlIHRlbnNvciBkYXRhIGlzIHN0b3JlZFxuICAgKi9cbiAgZXhwb3J0IHR5cGUgRGF0YUxvY2F0aW9uID0gJ25vbmUnfCdjcHUnfCdjcHUtcGlubmVkJ3wndGV4dHVyZSd8J2dwdS1idWZmZXInO1xuXG4gIC8qKlxuICAgKiByZXByZXNlbnQgdGhlIGRhdGEgdHlwZSBvZiBhIHRlbnNvclxuICAgKi9cbiAgZXhwb3J0IHR5cGUgVHlwZSA9IGtleW9mIERhdGFUeXBlTWFwO1xufVxuXG4vKipcbiAqIFJlcHJlc2VudCBtdWx0aS1kaW1lbnNpb25hbCBhcnJheXMgdG8gZmVlZCB0byBvciBmZXRjaCBmcm9tIG1vZGVsIGluZmVyZW5jaW5nLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFR5cGVkVGVuc29yPFQgZXh0ZW5kcyBUZW5zb3IuVHlwZT4gZXh0ZW5kcyBUeXBlZFRlbnNvckJhc2U8VD4sIFR5cGVkVGVuc29yVXRpbHM8VD4ge31cbi8qKlxuICogUmVwcmVzZW50IG11bHRpLWRpbWVuc2lvbmFsIGFycmF5cyB0byBmZWVkIHRvIG9yIGZldGNoIGZyb20gbW9kZWwgaW5mZXJlbmNpbmcuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVGVuc29yIGV4dGVuZHMgVHlwZWRUZW5zb3JCYXNlPFRlbnNvci5UeXBlPiwgVHlwZWRUZW5zb3JVdGlsczxUZW5zb3IuVHlwZT4ge31cblxuLyoqXG4gKiB0eXBlIFRlbnNvckNvbnN0cnVjdG9yIGRlZmluZXMgdGhlIGNvbnN0cnVjdG9ycyBvZiAnVGVuc29yJyB0byBjcmVhdGUgQ1BVIHRlbnNvciBpbnN0YW5jZXMuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVGVuc29yQ29uc3RydWN0b3Ige1xuICAvLyAjcmVnaW9uIENQVSB0ZW5zb3IgLSBzcGVjaWZ5IGVsZW1lbnQgdHlwZVxuICAvKipcbiAgICogQ29uc3RydWN0IGEgbmV3IHN0cmluZyB0ZW5zb3Igb2JqZWN0IGZyb20gdGhlIGdpdmVuIHR5cGUsIGRhdGEgYW5kIGRpbXMuXG4gICAqXG4gICAqIEBwYXJhbSB0eXBlIC0gU3BlY2lmeSB0aGUgZWxlbWVudCB0eXBlLlxuICAgKiBAcGFyYW0gZGF0YSAtIFNwZWNpZnkgdGhlIENQVSB0ZW5zb3IgZGF0YS5cbiAgICogQHBhcmFtIGRpbXMgLSBTcGVjaWZ5IHRoZSBkaW1lbnNpb24gb2YgdGhlIHRlbnNvci4gSWYgb21pdHRlZCwgYSAxLUQgdGVuc29yIGlzIGFzc3VtZWQuXG4gICAqL1xuICBuZXcodHlwZTogJ3N0cmluZycsIGRhdGE6IFRlbnNvci5EYXRhVHlwZU1hcFsnc3RyaW5nJ118cmVhZG9ubHkgc3RyaW5nW10sXG4gICAgICBkaW1zPzogcmVhZG9ubHkgbnVtYmVyW10pOiBUeXBlZFRlbnNvcjwnc3RyaW5nJz47XG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdCBhIG5ldyBib29sIHRlbnNvciBvYmplY3QgZnJvbSB0aGUgZ2l2ZW4gdHlwZSwgZGF0YSBhbmQgZGltcy5cbiAgICpcbiAgICogQHBhcmFtIHR5cGUgLSBTcGVjaWZ5IHRoZSBlbGVtZW50IHR5cGUuXG4gICAqIEBwYXJhbSBkYXRhIC0gU3BlY2lmeSB0aGUgQ1BVIHRlbnNvciBkYXRhLlxuICAgKiBAcGFyYW0gZGltcyAtIFNwZWNpZnkgdGhlIGRpbWVuc2lvbiBvZiB0aGUgdGVuc29yLiBJZiBvbWl0dGVkLCBhIDEtRCB0ZW5zb3IgaXMgYXNzdW1lZC5cbiAgICovXG4gIG5ldyh0eXBlOiAnYm9vbCcsIGRhdGE6IFRlbnNvci5EYXRhVHlwZU1hcFsnYm9vbCddfHJlYWRvbmx5IGJvb2xlYW5bXSwgZGltcz86IHJlYWRvbmx5IG51bWJlcltdKTogVHlwZWRUZW5zb3I8J2Jvb2wnPjtcblxuICAvKipcbiAgICogQ29uc3RydWN0IGEgbmV3IDY0LWJpdCBpbnRlZ2VyIHR5cGVkIHRlbnNvciBvYmplY3QgZnJvbSB0aGUgZ2l2ZW4gdHlwZSwgZGF0YSBhbmQgZGltcy5cbiAgICpcbiAgICogQHBhcmFtIHR5cGUgLSBTcGVjaWZ5IHRoZSBlbGVtZW50IHR5cGUuXG4gICAqIEBwYXJhbSBkYXRhIC0gU3BlY2lmeSB0aGUgQ1BVIHRlbnNvciBkYXRhLlxuICAgKiBAcGFyYW0gZGltcyAtIFNwZWNpZnkgdGhlIGRpbWVuc2lvbiBvZiB0aGUgdGVuc29yLiBJZiBvbWl0dGVkLCBhIDEtRCB0ZW5zb3IgaXMgYXNzdW1lZC5cbiAgICovXG4gIG5ldzxUIGV4dGVuZHMgJ3VpbnQ2NCd8J2ludDY0Jz4oXG4gICAgICB0eXBlOiBULCBkYXRhOiBUZW5zb3IuRGF0YVR5cGVNYXBbVF18cmVhZG9ubHkgYmlnaW50W118cmVhZG9ubHkgbnVtYmVyW10sXG4gICAgICBkaW1zPzogcmVhZG9ubHkgbnVtYmVyW10pOiBUeXBlZFRlbnNvcjxUPjtcblxuICAvKipcbiAgICogQ29uc3RydWN0IGEgbmV3IG51bWVyaWMgdGVuc29yIG9iamVjdCBmcm9tIHRoZSBnaXZlbiB0eXBlLCBkYXRhIGFuZCBkaW1zLlxuICAgKlxuICAgKiBAcGFyYW0gdHlwZSAtIFNwZWNpZnkgdGhlIGVsZW1lbnQgdHlwZS5cbiAgICogQHBhcmFtIGRhdGEgLSBTcGVjaWZ5IHRoZSBDUFUgdGVuc29yIGRhdGEuXG4gICAqIEBwYXJhbSBkaW1zIC0gU3BlY2lmeSB0aGUgZGltZW5zaW9uIG9mIHRoZSB0ZW5zb3IuIElmIG9taXR0ZWQsIGEgMS1EIHRlbnNvciBpcyBhc3N1bWVkLlxuICAgKi9cbiAgbmV3PFQgZXh0ZW5kcyBFeGNsdWRlPFRlbnNvci5UeXBlLCAnc3RyaW5nJ3wnYm9vbCd8J3VpbnQ2NCd8J2ludDY0Jz4+KFxuICAgICAgdHlwZTogVCwgZGF0YTogVGVuc29yLkRhdGFUeXBlTWFwW1RdfHJlYWRvbmx5IG51bWJlcltdLCBkaW1zPzogcmVhZG9ubHkgbnVtYmVyW10pOiBUeXBlZFRlbnNvcjxUPjtcbiAgLy8gI2VuZHJlZ2lvblxuXG4gIC8vICNyZWdpb24gQ1BVIHRlbnNvciAtIGluZmVyIGVsZW1lbnQgdHlwZXNcblxuICAvKipcbiAgICogQ29uc3RydWN0IGEgbmV3IGZsb2F0MzIgdGVuc29yIG9iamVjdCBmcm9tIHRoZSBnaXZlbiBkYXRhIGFuZCBkaW1zLlxuICAgKlxuICAgKiBAcGFyYW0gZGF0YSAtIFNwZWNpZnkgdGhlIENQVSB0ZW5zb3IgZGF0YS5cbiAgICogQHBhcmFtIGRpbXMgLSBTcGVjaWZ5IHRoZSBkaW1lbnNpb24gb2YgdGhlIHRlbnNvci4gSWYgb21pdHRlZCwgYSAxLUQgdGVuc29yIGlzIGFzc3VtZWQuXG4gICAqL1xuICBuZXcoZGF0YTogRmxvYXQzMkFycmF5LCBkaW1zPzogcmVhZG9ubHkgbnVtYmVyW10pOiBUeXBlZFRlbnNvcjwnZmxvYXQzMic+O1xuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3QgYSBuZXcgaW50OCB0ZW5zb3Igb2JqZWN0IGZyb20gdGhlIGdpdmVuIGRhdGEgYW5kIGRpbXMuXG4gICAqXG4gICAqIEBwYXJhbSBkYXRhIC0gU3BlY2lmeSB0aGUgQ1BVIHRlbnNvciBkYXRhLlxuICAgKiBAcGFyYW0gZGltcyAtIFNwZWNpZnkgdGhlIGRpbWVuc2lvbiBvZiB0aGUgdGVuc29yLiBJZiBvbWl0dGVkLCBhIDEtRCB0ZW5zb3IgaXMgYXNzdW1lZC5cbiAgICovXG4gIG5ldyhkYXRhOiBJbnQ4QXJyYXksIGRpbXM/OiByZWFkb25seSBudW1iZXJbXSk6IFR5cGVkVGVuc29yPCdpbnQ4Jz47XG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdCBhIG5ldyB1aW50OCB0ZW5zb3Igb2JqZWN0IGZyb20gdGhlIGdpdmVuIGRhdGEgYW5kIGRpbXMuXG4gICAqXG4gICAqIEBwYXJhbSBkYXRhIC0gU3BlY2lmeSB0aGUgQ1BVIHRlbnNvciBkYXRhLlxuICAgKiBAcGFyYW0gZGltcyAtIFNwZWNpZnkgdGhlIGRpbWVuc2lvbiBvZiB0aGUgdGVuc29yLiBJZiBvbWl0dGVkLCBhIDEtRCB0ZW5zb3IgaXMgYXNzdW1lZC5cbiAgICovXG4gIG5ldyhkYXRhOiBVaW50OEFycmF5LCBkaW1zPzogcmVhZG9ubHkgbnVtYmVyW10pOiBUeXBlZFRlbnNvcjwndWludDgnPjtcblxuICAvKipcbiAgICogQ29uc3RydWN0IGEgbmV3IHVpbnQxNiB0ZW5zb3Igb2JqZWN0IGZyb20gdGhlIGdpdmVuIGRhdGEgYW5kIGRpbXMuXG4gICAqXG4gICAqIEBwYXJhbSBkYXRhIC0gU3BlY2lmeSB0aGUgQ1BVIHRlbnNvciBkYXRhLlxuICAgKiBAcGFyYW0gZGltcyAtIFNwZWNpZnkgdGhlIGRpbWVuc2lvbiBvZiB0aGUgdGVuc29yLiBJZiBvbWl0dGVkLCBhIDEtRCB0ZW5zb3IgaXMgYXNzdW1lZC5cbiAgICovXG4gIG5ldyhkYXRhOiBVaW50MTZBcnJheSwgZGltcz86IHJlYWRvbmx5IG51bWJlcltdKTogVHlwZWRUZW5zb3I8J3VpbnQxNic+O1xuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3QgYSBuZXcgaW50MTYgdGVuc29yIG9iamVjdCBmcm9tIHRoZSBnaXZlbiBkYXRhIGFuZCBkaW1zLlxuICAgKlxuICAgKiBAcGFyYW0gZGF0YSAtIFNwZWNpZnkgdGhlIENQVSB0ZW5zb3IgZGF0YS5cbiAgICogQHBhcmFtIGRpbXMgLSBTcGVjaWZ5IHRoZSBkaW1lbnNpb24gb2YgdGhlIHRlbnNvci4gSWYgb21pdHRlZCwgYSAxLUQgdGVuc29yIGlzIGFzc3VtZWQuXG4gICAqL1xuICBuZXcoZGF0YTogSW50MTZBcnJheSwgZGltcz86IHJlYWRvbmx5IG51bWJlcltdKTogVHlwZWRUZW5zb3I8J2ludDE2Jz47XG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdCBhIG5ldyBpbnQzMiB0ZW5zb3Igb2JqZWN0IGZyb20gdGhlIGdpdmVuIGRhdGEgYW5kIGRpbXMuXG4gICAqXG4gICAqIEBwYXJhbSBkYXRhIC0gU3BlY2lmeSB0aGUgQ1BVIHRlbnNvciBkYXRhLlxuICAgKiBAcGFyYW0gZGltcyAtIFNwZWNpZnkgdGhlIGRpbWVuc2lvbiBvZiB0aGUgdGVuc29yLiBJZiBvbWl0dGVkLCBhIDEtRCB0ZW5zb3IgaXMgYXNzdW1lZC5cbiAgICovXG4gIG5ldyhkYXRhOiBJbnQzMkFycmF5LCBkaW1zPzogcmVhZG9ubHkgbnVtYmVyW10pOiBUeXBlZFRlbnNvcjwnaW50MzInPjtcblxuICAvKipcbiAgICogQ29uc3RydWN0IGEgbmV3IGludDY0IHRlbnNvciBvYmplY3QgZnJvbSB0aGUgZ2l2ZW4gZGF0YSBhbmQgZGltcy5cbiAgICpcbiAgICogQHBhcmFtIGRhdGEgLSBTcGVjaWZ5IHRoZSBDUFUgdGVuc29yIGRhdGEuXG4gICAqIEBwYXJhbSBkaW1zIC0gU3BlY2lmeSB0aGUgZGltZW5zaW9uIG9mIHRoZSB0ZW5zb3IuIElmIG9taXR0ZWQsIGEgMS1EIHRlbnNvciBpcyBhc3N1bWVkLlxuICAgKi9cbiAgbmV3KGRhdGE6IEJpZ0ludDY0QXJyYXksIGRpbXM/OiByZWFkb25seSBudW1iZXJbXSk6IFR5cGVkVGVuc29yPCdpbnQ2NCc+O1xuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3QgYSBuZXcgc3RyaW5nIHRlbnNvciBvYmplY3QgZnJvbSB0aGUgZ2l2ZW4gZGF0YSBhbmQgZGltcy5cbiAgICpcbiAgICogQHBhcmFtIGRhdGEgLSBTcGVjaWZ5IHRoZSBDUFUgdGVuc29yIGRhdGEuXG4gICAqIEBwYXJhbSBkaW1zIC0gU3BlY2lmeSB0aGUgZGltZW5zaW9uIG9mIHRoZSB0ZW5zb3IuIElmIG9taXR0ZWQsIGEgMS1EIHRlbnNvciBpcyBhc3N1bWVkLlxuICAgKi9cbiAgbmV3KGRhdGE6IHJlYWRvbmx5IHN0cmluZ1tdLCBkaW1zPzogcmVhZG9ubHkgbnVtYmVyW10pOiBUeXBlZFRlbnNvcjwnc3RyaW5nJz47XG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdCBhIG5ldyBib29sIHRlbnNvciBvYmplY3QgZnJvbSB0aGUgZ2l2ZW4gZGF0YSBhbmQgZGltcy5cbiAgICpcbiAgICogQHBhcmFtIGRhdGEgLSBTcGVjaWZ5IHRoZSBDUFUgdGVuc29yIGRhdGEuXG4gICAqIEBwYXJhbSBkaW1zIC0gU3BlY2lmeSB0aGUgZGltZW5zaW9uIG9mIHRoZSB0ZW5zb3IuIElmIG9taXR0ZWQsIGEgMS1EIHRlbnNvciBpcyBhc3N1bWVkLlxuICAgKi9cbiAgbmV3KGRhdGE6IHJlYWRvbmx5IGJvb2xlYW5bXSwgZGltcz86IHJlYWRvbmx5IG51bWJlcltdKTogVHlwZWRUZW5zb3I8J2Jvb2wnPjtcblxuICAvKipcbiAgICogQ29uc3RydWN0IGEgbmV3IGZsb2F0NjQgdGVuc29yIG9iamVjdCBmcm9tIHRoZSBnaXZlbiBkYXRhIGFuZCBkaW1zLlxuICAgKlxuICAgKiBAcGFyYW0gZGF0YSAtIFNwZWNpZnkgdGhlIENQVSB0ZW5zb3IgZGF0YS5cbiAgICogQHBhcmFtIGRpbXMgLSBTcGVjaWZ5IHRoZSBkaW1lbnNpb24gb2YgdGhlIHRlbnNvci4gSWYgb21pdHRlZCwgYSAxLUQgdGVuc29yIGlzIGFzc3VtZWQuXG4gICAqL1xuICBuZXcoZGF0YTogRmxvYXQ2NEFycmF5LCBkaW1zPzogcmVhZG9ubHkgbnVtYmVyW10pOiBUeXBlZFRlbnNvcjwnZmxvYXQ2NCc+O1xuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3QgYSBuZXcgdWludDMyIHRlbnNvciBvYmplY3QgZnJvbSB0aGUgZ2l2ZW4gZGF0YSBhbmQgZGltcy5cbiAgICpcbiAgICogQHBhcmFtIGRhdGEgLSBTcGVjaWZ5IHRoZSBDUFUgdGVuc29yIGRhdGEuXG4gICAqIEBwYXJhbSBkaW1zIC0gU3BlY2lmeSB0aGUgZGltZW5zaW9uIG9mIHRoZSB0ZW5zb3IuIElmIG9taXR0ZWQsIGEgMS1EIHRlbnNvciBpcyBhc3N1bWVkLlxuICAgKi9cbiAgbmV3KGRhdGE6IFVpbnQzMkFycmF5LCBkaW1zPzogcmVhZG9ubHkgbnVtYmVyW10pOiBUeXBlZFRlbnNvcjwndWludDMyJz47XG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdCBhIG5ldyB1aW50NjQgdGVuc29yIG9iamVjdCBmcm9tIHRoZSBnaXZlbiBkYXRhIGFuZCBkaW1zLlxuICAgKlxuICAgKiBAcGFyYW0gZGF0YSAtIFNwZWNpZnkgdGhlIENQVSB0ZW5zb3IgZGF0YS5cbiAgICogQHBhcmFtIGRpbXMgLSBTcGVjaWZ5IHRoZSBkaW1lbnNpb24gb2YgdGhlIHRlbnNvci4gSWYgb21pdHRlZCwgYSAxLUQgdGVuc29yIGlzIGFzc3VtZWQuXG4gICAqL1xuICBuZXcoZGF0YTogQmlnVWludDY0QXJyYXksIGRpbXM/OiByZWFkb25seSBudW1iZXJbXSk6IFR5cGVkVGVuc29yPCd1aW50NjQnPjtcblxuICAvLyAjZW5kcmVnaW9uXG5cbiAgLy8gI3JlZ2lvbiBDUFUgdGVuc29yIC0gZmFsbCBiYWNrIHRvIG5vbi1nZW5lcmljIHRlbnNvciB0eXBlIGRlY2xhcmF0aW9uXG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdCBhIG5ldyB0ZW5zb3Igb2JqZWN0IGZyb20gdGhlIGdpdmVuIHR5cGUsIGRhdGEgYW5kIGRpbXMuXG4gICAqXG4gICAqIEBwYXJhbSB0eXBlIC0gU3BlY2lmeSB0aGUgZWxlbWVudCB0eXBlLlxuICAgKiBAcGFyYW0gZGF0YSAtIFNwZWNpZnkgdGhlIENQVSB0ZW5zb3IgZGF0YS5cbiAgICogQHBhcmFtIGRpbXMgLSBTcGVjaWZ5IHRoZSBkaW1lbnNpb24gb2YgdGhlIHRlbnNvci4gSWYgb21pdHRlZCwgYSAxLUQgdGVuc29yIGlzIGFzc3VtZWQuXG4gICAqL1xuICBuZXcodHlwZTogVGVuc29yLlR5cGUsIGRhdGE6IFRlbnNvci5EYXRhVHlwZXxyZWFkb25seSBudW1iZXJbXXxyZWFkb25seSBzdHJpbmdbXXxyZWFkb25seSBiaWdpbnRbXXxyZWFkb25seSBib29sZWFuW10sXG4gICAgICBkaW1zPzogcmVhZG9ubHkgbnVtYmVyW10pOiBUZW5zb3I7XG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdCBhIG5ldyB0ZW5zb3Igb2JqZWN0IGZyb20gdGhlIGdpdmVuIGRhdGEgYW5kIGRpbXMuXG4gICAqXG4gICAqIEBwYXJhbSBkYXRhIC0gU3BlY2lmeSB0aGUgQ1BVIHRlbnNvciBkYXRhLlxuICAgKiBAcGFyYW0gZGltcyAtIFNwZWNpZnkgdGhlIGRpbWVuc2lvbiBvZiB0aGUgdGVuc29yLiBJZiBvbWl0dGVkLCBhIDEtRCB0ZW5zb3IgaXMgYXNzdW1lZC5cbiAgICovXG4gIG5ldyhkYXRhOiBUZW5zb3IuRGF0YVR5cGUsIGRpbXM/OiByZWFkb25seSBudW1iZXJbXSk6IFRlbnNvcjtcbiAgLy8gI2VuZHJlZ2lvblxufVxuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25hbWluZy1jb252ZW50aW9uXG5leHBvcnQgY29uc3QgVGVuc29yID0gVGVuc29ySW1wbCBhcyAoVGVuc29yQ29uc3RydWN0b3IgJiBUZW5zb3JGYWN0b3J5KTtcbiIsICIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cblxuaW1wb3J0IHtlbnZ9IGZyb20gJy4vZW52LWltcGwuanMnO1xuXG5leHBvcnQgY29uc3QgVFJBQ0UgPSAoZGV2aWNlVHlwZTogc3RyaW5nLCBsYWJlbDogc3RyaW5nKSA9PiB7XG4gIGlmICh0eXBlb2YgZW52LnRyYWNlID09PSAndW5kZWZpbmVkJyA/ICFlbnYud2FzbS50cmFjZSA6ICFlbnYudHJhY2UpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgY29uc29sZS50aW1lU3RhbXAoYCR7ZGV2aWNlVHlwZX06Ok9SVDo6JHtsYWJlbH1gKTtcbn07XG5cbmNvbnN0IFRSQUNFX0ZVTkMgPSAobXNnOiBzdHJpbmcsIGV4dHJhTXNnPzogc3RyaW5nKSA9PiB7XG4gIGNvbnN0IHN0YWNrID0gbmV3IEVycm9yKCkuc3RhY2s/LnNwbGl0KC9cXHJcXG58XFxyfFxcbi9nKSB8fCBbXTtcbiAgbGV0IGhhc1RyYWNlRnVuYyA9IGZhbHNlO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHN0YWNrLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGhhc1RyYWNlRnVuYyAmJiAhc3RhY2tbaV0uaW5jbHVkZXMoJ1RSQUNFX0ZVTkMnKSkge1xuICAgICAgbGV0IGxhYmVsID0gYEZVTkNfJHttc2d9Ojoke3N0YWNrW2ldLnRyaW0oKS5zcGxpdCgnICcpWzFdfWA7XG4gICAgICBpZiAoZXh0cmFNc2cpIHtcbiAgICAgICAgbGFiZWwgKz0gYDo6JHtleHRyYU1zZ31gO1xuICAgICAgfVxuICAgICAgVFJBQ0UoJ0NQVScsIGxhYmVsKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHN0YWNrW2ldLmluY2x1ZGVzKCdUUkFDRV9GVU5DJykpIHtcbiAgICAgIGhhc1RyYWNlRnVuYyA9IHRydWU7XG4gICAgfVxuICB9XG59O1xuXG5leHBvcnQgY29uc3QgVFJBQ0VfRlVOQ19CRUdJTiA9IChleHRyYU1zZz86IHN0cmluZykgPT4ge1xuICBpZiAodHlwZW9mIGVudi50cmFjZSA9PT0gJ3VuZGVmaW5lZCcgPyAhZW52Lndhc20udHJhY2UgOiAhZW52LnRyYWNlKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIFRSQUNFX0ZVTkMoJ0JFR0lOJywgZXh0cmFNc2cpO1xufTtcblxuZXhwb3J0IGNvbnN0IFRSQUNFX0ZVTkNfRU5EID0gKGV4dHJhTXNnPzogc3RyaW5nKSA9PiB7XG4gIGlmICh0eXBlb2YgZW52LnRyYWNlID09PSAndW5kZWZpbmVkJyA/ICFlbnYud2FzbS50cmFjZSA6ICFlbnYudHJhY2UpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgVFJBQ0VfRlVOQygnRU5EJywgZXh0cmFNc2cpO1xufTtcbiIsICIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cblxuaW1wb3J0IHtyZXNvbHZlQmFja2VuZH0gZnJvbSAnLi9iYWNrZW5kLWltcGwuanMnO1xuaW1wb3J0IHtJbmZlcmVuY2VTZXNzaW9uSGFuZGxlcn0gZnJvbSAnLi9iYWNrZW5kLmpzJztcbmltcG9ydCB7SW5mZXJlbmNlU2Vzc2lvbiBhcyBJbmZlcmVuY2VTZXNzaW9uSW50ZXJmYWNlfSBmcm9tICcuL2luZmVyZW5jZS1zZXNzaW9uLmpzJztcbmltcG9ydCB7T25ueFZhbHVlfSBmcm9tICcuL29ubngtdmFsdWUuanMnO1xuaW1wb3J0IHtUZW5zb3J9IGZyb20gJy4vdGVuc29yLmpzJztcbmltcG9ydCB7VFJBQ0VfRlVOQ19CRUdJTiwgVFJBQ0VfRlVOQ19FTkR9IGZyb20gJy4vdHJhY2UuanMnO1xuXG50eXBlIFNlc3Npb25PcHRpb25zID0gSW5mZXJlbmNlU2Vzc2lvbkludGVyZmFjZS5TZXNzaW9uT3B0aW9ucztcbnR5cGUgUnVuT3B0aW9ucyA9IEluZmVyZW5jZVNlc3Npb25JbnRlcmZhY2UuUnVuT3B0aW9ucztcbnR5cGUgRmVlZHNUeXBlID0gSW5mZXJlbmNlU2Vzc2lvbkludGVyZmFjZS5GZWVkc1R5cGU7XG50eXBlIEZldGNoZXNUeXBlID0gSW5mZXJlbmNlU2Vzc2lvbkludGVyZmFjZS5GZXRjaGVzVHlwZTtcbnR5cGUgUmV0dXJuVHlwZSA9IEluZmVyZW5jZVNlc3Npb25JbnRlcmZhY2UuUmV0dXJuVHlwZTtcblxuZXhwb3J0IGNsYXNzIEluZmVyZW5jZVNlc3Npb24gaW1wbGVtZW50cyBJbmZlcmVuY2VTZXNzaW9uSW50ZXJmYWNlIHtcbiAgcHJpdmF0ZSBjb25zdHJ1Y3RvcihoYW5kbGVyOiBJbmZlcmVuY2VTZXNzaW9uSGFuZGxlcikge1xuICAgIHRoaXMuaGFuZGxlciA9IGhhbmRsZXI7XG4gIH1cbiAgcnVuKGZlZWRzOiBGZWVkc1R5cGUsIG9wdGlvbnM/OiBSdW5PcHRpb25zKTogUHJvbWlzZTxSZXR1cm5UeXBlPjtcbiAgcnVuKGZlZWRzOiBGZWVkc1R5cGUsIGZldGNoZXM6IEZldGNoZXNUeXBlLCBvcHRpb25zPzogUnVuT3B0aW9ucyk6IFByb21pc2U8UmV0dXJuVHlwZT47XG4gIGFzeW5jIHJ1bihmZWVkczogRmVlZHNUeXBlLCBhcmcxPzogRmV0Y2hlc1R5cGV8UnVuT3B0aW9ucywgYXJnMj86IFJ1bk9wdGlvbnMpOiBQcm9taXNlPFJldHVyblR5cGU+IHtcbiAgICBUUkFDRV9GVU5DX0JFR0lOKCk7XG4gICAgY29uc3QgZmV0Y2hlczoge1tuYW1lOiBzdHJpbmddOiBPbm54VmFsdWV8bnVsbH0gPSB7fTtcbiAgICBsZXQgb3B0aW9uczogUnVuT3B0aW9ucyA9IHt9O1xuICAgIC8vIGNoZWNrIGlucHV0c1xuICAgIGlmICh0eXBlb2YgZmVlZHMgIT09ICdvYmplY3QnIHx8IGZlZWRzID09PSBudWxsIHx8IGZlZWRzIGluc3RhbmNlb2YgVGVuc29yIHx8IEFycmF5LmlzQXJyYXkoZmVlZHMpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgICAgICdcXCdmZWVkc1xcJyBtdXN0IGJlIGFuIG9iamVjdCB0aGF0IHVzZSBpbnB1dCBuYW1lcyBhcyBrZXlzIGFuZCBPbm54VmFsdWUgYXMgY29ycmVzcG9uZGluZyB2YWx1ZXMuJyk7XG4gICAgfVxuXG4gICAgbGV0IGlzRmV0Y2hlc0VtcHR5ID0gdHJ1ZTtcbiAgICAvLyBkZXRlcm1pbmUgd2hpY2ggb3ZlcnJpZGUgaXMgYmVpbmcgdXNlZFxuICAgIGlmICh0eXBlb2YgYXJnMSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIGlmIChhcmcxID09PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1VuZXhwZWN0ZWQgYXJndW1lbnRbMV06IGNhbm5vdCBiZSBudWxsLicpO1xuICAgICAgfVxuICAgICAgaWYgKGFyZzEgaW5zdGFuY2VvZiBUZW5zb3IpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXFwnZmV0Y2hlc1xcJyBjYW5ub3QgYmUgYSBUZW5zb3InKTtcbiAgICAgIH1cblxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoYXJnMSkpIHtcbiAgICAgICAgaWYgKGFyZzEubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXFwnZmV0Y2hlc1xcJyBjYW5ub3QgYmUgYW4gZW1wdHkgYXJyYXkuJyk7XG4gICAgICAgIH1cbiAgICAgICAgaXNGZXRjaGVzRW1wdHkgPSBmYWxzZTtcbiAgICAgICAgLy8gb3V0cHV0IG5hbWVzXG4gICAgICAgIGZvciAoY29uc3QgbmFtZSBvZiBhcmcxKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBuYW1lICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXFwnZmV0Y2hlc1xcJyBtdXN0IGJlIGEgc3RyaW5nIGFycmF5IG9yIGFuIG9iamVjdC4nKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHRoaXMub3V0cHV0TmFtZXMuaW5kZXhPZihuYW1lKSA9PT0gLTEpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKGAnZmV0Y2hlcycgY29udGFpbnMgaW52YWxpZCBvdXRwdXQgbmFtZTogJHtuYW1lfS5gKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZmV0Y2hlc1tuYW1lXSA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIGFyZzIgPT09ICdvYmplY3QnICYmIGFyZzIgIT09IG51bGwpIHtcbiAgICAgICAgICBvcHRpb25zID0gYXJnMjtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgYXJnMiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcXCdvcHRpb25zXFwnIG11c3QgYmUgYW4gb2JqZWN0LicpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBkZWNpZGUgd2hldGhlciBhcmcxIGlzIGZldGNoZXMgb3Igb3B0aW9uc1xuICAgICAgICAvLyBpZiBhbnkgb3V0cHV0IG5hbWUgaXMgcHJlc2VudCBhbmQgaXRzIHZhbHVlIGlzIHZhbGlkIE9ubnhWYWx1ZSwgd2UgY29uc2lkZXIgaXQgZmV0Y2hlc1xuICAgICAgICBsZXQgaXNGZXRjaGVzID0gZmFsc2U7XG4gICAgICAgIGNvbnN0IGFyZzFLZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoYXJnMSk7XG4gICAgICAgIGZvciAoY29uc3QgbmFtZSBvZiB0aGlzLm91dHB1dE5hbWVzKSB7XG4gICAgICAgICAgaWYgKGFyZzFLZXlzLmluZGV4T2YobmFtZSkgIT09IC0xKSB7XG4gICAgICAgICAgICBjb25zdCB2ID0gKGFyZzEgYXMgSW5mZXJlbmNlU2Vzc2lvbkludGVyZmFjZS5OdWxsYWJsZU9ubnhWYWx1ZU1hcFR5cGUpW25hbWVdO1xuICAgICAgICAgICAgaWYgKHYgPT09IG51bGwgfHwgdiBpbnN0YW5jZW9mIFRlbnNvcikge1xuICAgICAgICAgICAgICBpc0ZldGNoZXMgPSB0cnVlO1xuICAgICAgICAgICAgICBpc0ZldGNoZXNFbXB0eSA9IGZhbHNlO1xuICAgICAgICAgICAgICBmZXRjaGVzW25hbWVdID0gdjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNGZXRjaGVzKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBhcmcyID09PSAnb2JqZWN0JyAmJiBhcmcyICE9PSBudWxsKSB7XG4gICAgICAgICAgICBvcHRpb25zID0gYXJnMjtcbiAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBhcmcyICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXFwnb3B0aW9uc1xcJyBtdXN0IGJlIGFuIG9iamVjdC4nKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb3B0aW9ucyA9IGFyZzEgYXMgUnVuT3B0aW9ucztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodHlwZW9mIGFyZzEgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmV4cGVjdGVkIGFyZ3VtZW50WzFdOiBtdXN0IGJlIFxcJ2ZldGNoZXNcXCcgb3IgXFwnb3B0aW9uc1xcJy4nKTtcbiAgICB9XG5cbiAgICAvLyBjaGVjayBpZiBhbGwgaW5wdXRzIGFyZSBpbiBmZWVkXG4gICAgZm9yIChjb25zdCBuYW1lIG9mIHRoaXMuaW5wdXROYW1lcykge1xuICAgICAgaWYgKHR5cGVvZiBmZWVkc1tuYW1lXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBpbnB1dCAnJHtuYW1lfScgaXMgbWlzc2luZyBpbiAnZmVlZHMnLmApO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIGlmIG5vIGZldGNoZXMgaXMgc3BlY2lmaWVkLCB3ZSB1c2UgdGhlIGZ1bGwgb3V0cHV0IG5hbWVzIGxpc3RcbiAgICBpZiAoaXNGZXRjaGVzRW1wdHkpIHtcbiAgICAgIGZvciAoY29uc3QgbmFtZSBvZiB0aGlzLm91dHB1dE5hbWVzKSB7XG4gICAgICAgIGZldGNoZXNbbmFtZV0gPSBudWxsO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIGZlZWRzLCBmZXRjaGVzIGFuZCBvcHRpb25zIGFyZSBwcmVwYXJlZFxuXG4gICAgY29uc3QgcmVzdWx0cyA9IGF3YWl0IHRoaXMuaGFuZGxlci5ydW4oZmVlZHMsIGZldGNoZXMsIG9wdGlvbnMpO1xuICAgIGNvbnN0IHJldHVyblZhbHVlOiB7W25hbWU6IHN0cmluZ106IE9ubnhWYWx1ZX0gPSB7fTtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiByZXN1bHRzKSB7XG4gICAgICBpZiAoT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwocmVzdWx0cywga2V5KSkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSByZXN1bHRzW2tleV07XG4gICAgICAgIGlmIChyZXN1bHQgaW5zdGFuY2VvZiBUZW5zb3IpIHtcbiAgICAgICAgICByZXR1cm5WYWx1ZVtrZXldID0gcmVzdWx0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVyblZhbHVlW2tleV0gPSBuZXcgVGVuc29yKHJlc3VsdC50eXBlLCByZXN1bHQuZGF0YSwgcmVzdWx0LmRpbXMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIFRSQUNFX0ZVTkNfRU5EKCk7XG4gICAgcmV0dXJuIHJldHVyblZhbHVlO1xuICB9XG5cbiAgYXN5bmMgcmVsZWFzZSgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm4gdGhpcy5oYW5kbGVyLmRpc3Bvc2UoKTtcbiAgfVxuXG4gIHN0YXRpYyBjcmVhdGUocGF0aDogc3RyaW5nLCBvcHRpb25zPzogU2Vzc2lvbk9wdGlvbnMpOiBQcm9taXNlPEluZmVyZW5jZVNlc3Npb25JbnRlcmZhY2U+O1xuICBzdGF0aWMgY3JlYXRlKGJ1ZmZlcjogQXJyYXlCdWZmZXJMaWtlLCBvcHRpb25zPzogU2Vzc2lvbk9wdGlvbnMpOiBQcm9taXNlPEluZmVyZW5jZVNlc3Npb25JbnRlcmZhY2U+O1xuICBzdGF0aWMgY3JlYXRlKGJ1ZmZlcjogQXJyYXlCdWZmZXJMaWtlLCBieXRlT2Zmc2V0OiBudW1iZXIsIGJ5dGVMZW5ndGg/OiBudW1iZXIsIG9wdGlvbnM/OiBTZXNzaW9uT3B0aW9ucyk6XG4gICAgICBQcm9taXNlPEluZmVyZW5jZVNlc3Npb25JbnRlcmZhY2U+O1xuICBzdGF0aWMgY3JlYXRlKGJ1ZmZlcjogVWludDhBcnJheSwgb3B0aW9ucz86IFNlc3Npb25PcHRpb25zKTogUHJvbWlzZTxJbmZlcmVuY2VTZXNzaW9uSW50ZXJmYWNlPjtcbiAgc3RhdGljIGFzeW5jIGNyZWF0ZShcbiAgICAgIGFyZzA6IHN0cmluZ3xBcnJheUJ1ZmZlckxpa2V8VWludDhBcnJheSwgYXJnMT86IFNlc3Npb25PcHRpb25zfG51bWJlciwgYXJnMj86IG51bWJlcixcbiAgICAgIGFyZzM/OiBTZXNzaW9uT3B0aW9ucyk6IFByb21pc2U8SW5mZXJlbmNlU2Vzc2lvbkludGVyZmFjZT4ge1xuICAgIFRSQUNFX0ZVTkNfQkVHSU4oKTtcbiAgICAvLyBlaXRoZXIgbG9hZCBmcm9tIGEgZmlsZSBvciBidWZmZXJcbiAgICBsZXQgZmlsZVBhdGhPclVpbnQ4QXJyYXk6IHN0cmluZ3xVaW50OEFycmF5O1xuICAgIGxldCBvcHRpb25zOiBTZXNzaW9uT3B0aW9ucyA9IHt9O1xuXG4gICAgaWYgKHR5cGVvZiBhcmcwID09PSAnc3RyaW5nJykge1xuICAgICAgZmlsZVBhdGhPclVpbnQ4QXJyYXkgPSBhcmcwO1xuICAgICAgaWYgKHR5cGVvZiBhcmcxID09PSAnb2JqZWN0JyAmJiBhcmcxICE9PSBudWxsKSB7XG4gICAgICAgIG9wdGlvbnMgPSBhcmcxO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgYXJnMSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXFwnb3B0aW9uc1xcJyBtdXN0IGJlIGFuIG9iamVjdC4nKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGFyZzAgaW5zdGFuY2VvZiBVaW50OEFycmF5KSB7XG4gICAgICBmaWxlUGF0aE9yVWludDhBcnJheSA9IGFyZzA7XG4gICAgICBpZiAodHlwZW9mIGFyZzEgPT09ICdvYmplY3QnICYmIGFyZzEgIT09IG51bGwpIHtcbiAgICAgICAgb3B0aW9ucyA9IGFyZzE7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBhcmcxICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcXCdvcHRpb25zXFwnIG11c3QgYmUgYW4gb2JqZWN0LicpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoXG4gICAgICAgIGFyZzAgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlciB8fFxuICAgICAgICAodHlwZW9mIFNoYXJlZEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJyAmJiBhcmcwIGluc3RhbmNlb2YgU2hhcmVkQXJyYXlCdWZmZXIpKSB7XG4gICAgICBjb25zdCBidWZmZXIgPSBhcmcwO1xuICAgICAgbGV0IGJ5dGVPZmZzZXQgPSAwO1xuICAgICAgbGV0IGJ5dGVMZW5ndGggPSBhcmcwLmJ5dGVMZW5ndGg7XG4gICAgICBpZiAodHlwZW9mIGFyZzEgPT09ICdvYmplY3QnICYmIGFyZzEgIT09IG51bGwpIHtcbiAgICAgICAgb3B0aW9ucyA9IGFyZzE7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBhcmcxID09PSAnbnVtYmVyJykge1xuICAgICAgICBieXRlT2Zmc2V0ID0gYXJnMTtcbiAgICAgICAgaWYgKCFOdW1iZXIuaXNTYWZlSW50ZWdlcihieXRlT2Zmc2V0KSkge1xuICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcXCdieXRlT2Zmc2V0XFwnIG11c3QgYmUgYW4gaW50ZWdlci4nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYnl0ZU9mZnNldCA8IDAgfHwgYnl0ZU9mZnNldCA+PSBidWZmZXIuYnl0ZUxlbmd0aCkge1xuICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKGAnYnl0ZU9mZnNldCcgaXMgb3V0IG9mIHJhbmdlIFswLCAke2J1ZmZlci5ieXRlTGVuZ3RofSkuYCk7XG4gICAgICAgIH1cbiAgICAgICAgYnl0ZUxlbmd0aCA9IGFyZzAuYnl0ZUxlbmd0aCAtIGJ5dGVPZmZzZXQ7XG4gICAgICAgIGlmICh0eXBlb2YgYXJnMiA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICBieXRlTGVuZ3RoID0gYXJnMjtcbiAgICAgICAgICBpZiAoIU51bWJlci5pc1NhZmVJbnRlZ2VyKGJ5dGVMZW5ndGgpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXFwnYnl0ZUxlbmd0aFxcJyBtdXN0IGJlIGFuIGludGVnZXIuJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChieXRlTGVuZ3RoIDw9IDAgfHwgYnl0ZU9mZnNldCArIGJ5dGVMZW5ndGggPiBidWZmZXIuYnl0ZUxlbmd0aCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoYCdieXRlTGVuZ3RoJyBpcyBvdXQgb2YgcmFuZ2UgKDAsICR7YnVmZmVyLmJ5dGVMZW5ndGggLSBieXRlT2Zmc2V0fV0uYCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh0eXBlb2YgYXJnMyA9PT0gJ29iamVjdCcgJiYgYXJnMyAhPT0gbnVsbCkge1xuICAgICAgICAgICAgb3B0aW9ucyA9IGFyZzM7XG4gICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgYXJnMyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1xcJ29wdGlvbnNcXCcgbXVzdCBiZSBhbiBvYmplY3QuJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBhcmcyICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1xcJ2J5dGVMZW5ndGhcXCcgbXVzdCBiZSBhIG51bWJlci4nKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgYXJnMSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXFwnb3B0aW9uc1xcJyBtdXN0IGJlIGFuIG9iamVjdC4nKTtcbiAgICAgIH1cbiAgICAgIGZpbGVQYXRoT3JVaW50OEFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYnVmZmVyLCBieXRlT2Zmc2V0LCBieXRlTGVuZ3RoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5leHBlY3RlZCBhcmd1bWVudFswXTogbXVzdCBiZSBcXCdwYXRoXFwnIG9yIFxcJ2J1ZmZlclxcJy4nKTtcbiAgICB9XG5cbiAgICAvLyBnZXQgYmFja2VuZCBoaW50c1xuICAgIGNvbnN0IGVwcyA9IG9wdGlvbnMuZXhlY3V0aW9uUHJvdmlkZXJzIHx8IFtdO1xuICAgIGNvbnN0IGJhY2tlbmRIaW50cyA9IGVwcy5tYXAoaSA9PiB0eXBlb2YgaSA9PT0gJ3N0cmluZycgPyBpIDogaS5uYW1lKTtcbiAgICBjb25zdCBiYWNrZW5kID0gYXdhaXQgcmVzb2x2ZUJhY2tlbmQoYmFja2VuZEhpbnRzKTtcbiAgICBjb25zdCBoYW5kbGVyID0gYXdhaXQgYmFja2VuZC5jcmVhdGVJbmZlcmVuY2VTZXNzaW9uSGFuZGxlcihmaWxlUGF0aE9yVWludDhBcnJheSwgb3B0aW9ucyk7XG4gICAgVFJBQ0VfRlVOQ19FTkQoKTtcbiAgICByZXR1cm4gbmV3IEluZmVyZW5jZVNlc3Npb24oaGFuZGxlcik7XG4gIH1cblxuICBzdGFydFByb2ZpbGluZygpOiB2b2lkIHtcbiAgICB0aGlzLmhhbmRsZXIuc3RhcnRQcm9maWxpbmcoKTtcbiAgfVxuICBlbmRQcm9maWxpbmcoKTogdm9pZCB7XG4gICAgdGhpcy5oYW5kbGVyLmVuZFByb2ZpbGluZygpO1xuICB9XG5cbiAgZ2V0IGlucHV0TmFtZXMoKTogcmVhZG9ubHkgc3RyaW5nW10ge1xuICAgIHJldHVybiB0aGlzLmhhbmRsZXIuaW5wdXROYW1lcztcbiAgfVxuICBnZXQgb3V0cHV0TmFtZXMoKTogcmVhZG9ubHkgc3RyaW5nW10ge1xuICAgIHJldHVybiB0aGlzLmhhbmRsZXIub3V0cHV0TmFtZXM7XG4gIH1cblxuICBwcml2YXRlIGhhbmRsZXI6IEluZmVyZW5jZVNlc3Npb25IYW5kbGVyO1xufVxuIiwgIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuXG5pbXBvcnQge0luZmVyZW5jZVNlc3Npb24gYXMgSW5mZXJlbmNlU2Vzc2lvbkltcGx9IGZyb20gJy4vaW5mZXJlbmNlLXNlc3Npb24taW1wbC5qcyc7XG5pbXBvcnQge09ubnhNb2RlbE9wdGlvbnN9IGZyb20gJy4vb25ueC1tb2RlbC5qcyc7XG5pbXBvcnQge09ubnhWYWx1ZSwgT25ueFZhbHVlRGF0YUxvY2F0aW9ufSBmcm9tICcuL29ubngtdmFsdWUuanMnO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tcmVkZWNsYXJlICovXG5cbmV4cG9ydCBkZWNsYXJlIG5hbWVzcGFjZSBJbmZlcmVuY2VTZXNzaW9uIHtcbiAgLy8gI3JlZ2lvbiBpbnB1dC9vdXRwdXQgdHlwZXNcblxuICB0eXBlIE9ubnhWYWx1ZU1hcFR5cGUgPSB7cmVhZG9ubHkgW25hbWU6IHN0cmluZ106IE9ubnhWYWx1ZX07XG4gIHR5cGUgTnVsbGFibGVPbm54VmFsdWVNYXBUeXBlID0ge3JlYWRvbmx5IFtuYW1lOiBzdHJpbmddOiBPbm54VmFsdWUgfCBudWxsfTtcblxuICAvKipcbiAgICogQSBmZWVkcyAobW9kZWwgaW5wdXRzKSBpcyBhbiBvYmplY3QgdGhhdCB1c2VzIGlucHV0IG5hbWVzIGFzIGtleXMgYW5kIE9ubnhWYWx1ZSBhcyBjb3JyZXNwb25kaW5nIHZhbHVlcy5cbiAgICovXG4gIHR5cGUgRmVlZHNUeXBlID0gT25ueFZhbHVlTWFwVHlwZTtcblxuICAvKipcbiAgICogQSBmZXRjaGVzIChtb2RlbCBvdXRwdXRzKSBjb3VsZCBiZSBvbmUgb2YgdGhlIGZvbGxvd2luZzpcbiAgICpcbiAgICogLSBPbWl0dGVkLiBVc2UgbW9kZWwncyBvdXRwdXQgbmFtZXMgZGVmaW5pdGlvbi5cbiAgICogLSBBbiBhcnJheSBvZiBzdHJpbmcgaW5kaWNhdGluZyB0aGUgb3V0cHV0IG5hbWVzLlxuICAgKiAtIEFuIG9iamVjdCB0aGF0IHVzZSBvdXRwdXQgbmFtZXMgYXMga2V5cyBhbmQgT25ueFZhbHVlIG9yIG51bGwgYXMgY29ycmVzcG9uZGluZyB2YWx1ZXMuXG4gICAqXG4gICAqIEByZW1hcmtcbiAgICogZGlmZmVyZW50IGZyb20gaW5wdXQgYXJndW1lbnQsIGluIG91dHB1dCwgT25ueFZhbHVlIGlzIG9wdGlvbmFsLiBJZiBhbiBPbm54VmFsdWUgaXMgcHJlc2VudCBpdCB3aWxsIGJlXG4gICAqIHVzZWQgYXMgYSBwcmUtYWxsb2NhdGVkIHZhbHVlIGJ5IHRoZSBpbmZlcmVuY2UgZW5naW5lOyBpZiBvbWl0dGVkLCBpbmZlcmVuY2UgZW5naW5lIHdpbGwgYWxsb2NhdGUgYnVmZmVyXG4gICAqIGludGVybmFsbHkuXG4gICAqL1xuICB0eXBlIEZldGNoZXNUeXBlID0gcmVhZG9ubHkgc3RyaW5nW118TnVsbGFibGVPbm54VmFsdWVNYXBUeXBlO1xuXG4gIC8qKlxuICAgKiBBIGluZmVyZW5jaW5nIHJldHVybiB0eXBlIGlzIGFuIG9iamVjdCB0aGF0IHVzZXMgb3V0cHV0IG5hbWVzIGFzIGtleXMgYW5kIE9ubnhWYWx1ZSBhcyBjb3JyZXNwb25kaW5nIHZhbHVlcy5cbiAgICovXG4gIHR5cGUgUmV0dXJuVHlwZSA9IE9ubnhWYWx1ZU1hcFR5cGU7XG5cbiAgLy8gI2VuZHJlZ2lvblxuXG4gIC8vICNyZWdpb24gc2Vzc2lvbiBvcHRpb25zXG5cbiAgLyoqXG4gICAqIEEgc2V0IG9mIGNvbmZpZ3VyYXRpb25zIGZvciBzZXNzaW9uIGJlaGF2aW9yLlxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBTZXNzaW9uT3B0aW9ucyBleHRlbmRzIE9ubnhNb2RlbE9wdGlvbnMge1xuICAgIC8qKlxuICAgICAqIEFuIGFycmF5IG9mIGV4ZWN1dGlvbiBwcm92aWRlciBvcHRpb25zLlxuICAgICAqXG4gICAgICogQW4gZXhlY3V0aW9uIHByb3ZpZGVyIG9wdGlvbiBjYW4gYmUgYSBzdHJpbmcgaW5kaWNhdGluZyB0aGUgbmFtZSBvZiB0aGUgZXhlY3V0aW9uIHByb3ZpZGVyLFxuICAgICAqIG9yIGFuIG9iamVjdCBvZiBjb3JyZXNwb25kaW5nIHR5cGUuXG4gICAgICovXG4gICAgZXhlY3V0aW9uUHJvdmlkZXJzPzogcmVhZG9ubHkgRXhlY3V0aW9uUHJvdmlkZXJDb25maWdbXTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBpbnRyYSBPUCB0aHJlYWRzIG51bWJlci5cbiAgICAgKlxuICAgICAqIFRoaXMgc2V0dGluZyBpcyBhdmFpbGFibGUgb25seSBpbiBPTk5YUnVudGltZSAoTm9kZS5qcyBiaW5kaW5nIGFuZCByZWFjdC1uYXRpdmUpLlxuICAgICAqL1xuICAgIGludHJhT3BOdW1UaHJlYWRzPzogbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGludGVyIE9QIHRocmVhZHMgbnVtYmVyLlxuICAgICAqXG4gICAgICogVGhpcyBzZXR0aW5nIGlzIGF2YWlsYWJsZSBvbmx5IGluIE9OTlhSdW50aW1lIChOb2RlLmpzIGJpbmRpbmcgYW5kIHJlYWN0LW5hdGl2ZSkuXG4gICAgICovXG4gICAgaW50ZXJPcE51bVRocmVhZHM/OiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgZnJlZSBkaW1lbnNpb24gb3ZlcnJpZGUuXG4gICAgICpcbiAgICAgKiBUaGlzIHNldHRpbmcgaXMgYXZhaWxhYmxlIG9ubHkgaW4gT05OWFJ1bnRpbWUgKE5vZGUuanMgYmluZGluZyBhbmQgcmVhY3QtbmF0aXZlKSBvciBXZWJBc3NlbWJseSBiYWNrZW5kXG4gICAgICovXG4gICAgZnJlZURpbWVuc2lvbk92ZXJyaWRlcz86IHtyZWFkb25seSBbZGltZW5zaW9uTmFtZTogc3RyaW5nXTogbnVtYmVyfTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBvcHRpbWl6YXRpb24gbGV2ZWwuXG4gICAgICpcbiAgICAgKiBUaGlzIHNldHRpbmcgaXMgYXZhaWxhYmxlIG9ubHkgaW4gT05OWFJ1bnRpbWUgKE5vZGUuanMgYmluZGluZyBhbmQgcmVhY3QtbmF0aXZlKSBvciBXZWJBc3NlbWJseSBiYWNrZW5kXG4gICAgICovXG4gICAgZ3JhcGhPcHRpbWl6YXRpb25MZXZlbD86ICdkaXNhYmxlZCd8J2Jhc2ljJ3wnZXh0ZW5kZWQnfCdhbGwnO1xuXG4gICAgLyoqXG4gICAgICogV2hldGhlciBlbmFibGUgQ1BVIG1lbW9yeSBhcmVuYS5cbiAgICAgKlxuICAgICAqIFRoaXMgc2V0dGluZyBpcyBhdmFpbGFibGUgb25seSBpbiBPTk5YUnVudGltZSAoTm9kZS5qcyBiaW5kaW5nIGFuZCByZWFjdC1uYXRpdmUpIG9yIFdlYkFzc2VtYmx5IGJhY2tlbmRcbiAgICAgKi9cbiAgICBlbmFibGVDcHVNZW1BcmVuYT86IGJvb2xlYW47XG5cbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIGVuYWJsZSBtZW1vcnkgcGF0dGVybi5cbiAgICAgKlxuICAgICAqIFRoaXMgc2V0dGluZyBpcyBhdmFpbGFibGUgb25seSBpbiBPTk5YUnVudGltZSAoTm9kZS5qcyBiaW5kaW5nIGFuZCByZWFjdC1uYXRpdmUpIG9yIFdlYkFzc2VtYmx5IGJhY2tlbmRcbiAgICAgKi9cbiAgICBlbmFibGVNZW1QYXR0ZXJuPzogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICAqIEV4ZWN1dGlvbiBtb2RlLlxuICAgICAqXG4gICAgICogVGhpcyBzZXR0aW5nIGlzIGF2YWlsYWJsZSBvbmx5IGluIE9OTlhSdW50aW1lIChOb2RlLmpzIGJpbmRpbmcgYW5kIHJlYWN0LW5hdGl2ZSkgb3IgV2ViQXNzZW1ibHkgYmFja2VuZFxuICAgICAqL1xuICAgIGV4ZWN1dGlvbk1vZGU/OiAnc2VxdWVudGlhbCd8J3BhcmFsbGVsJztcblxuICAgIC8qKlxuICAgICAqIE9wdGltaXplZCBtb2RlbCBmaWxlIHBhdGguXG4gICAgICpcbiAgICAgKiBJZiB0aGlzIHNldHRpbmcgaXMgc3BlY2lmaWVkLCB0aGUgb3B0aW1pemVkIG1vZGVsIHdpbGwgYmUgZHVtcGVkLiBJbiBicm93c2VyLCBhIGJsb2Igd2lsbCBiZSBjcmVhdGVkXG4gICAgICogd2l0aCBhIHBvcC11cCB3aW5kb3cuXG4gICAgICovXG4gICAgb3B0aW1pemVkTW9kZWxGaWxlUGF0aD86IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgZW5hYmxlIHByb2ZpbGluZy5cbiAgICAgKlxuICAgICAqIFRoaXMgc2V0dGluZyBpcyBhIHBsYWNlaG9sZGVyIGZvciBhIGZ1dHVyZSB1c2UuXG4gICAgICovXG4gICAgZW5hYmxlUHJvZmlsaW5nPzogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICAqIEZpbGUgcHJlZml4IGZvciBwcm9maWxpbmcuXG4gICAgICpcbiAgICAgKiBUaGlzIHNldHRpbmcgaXMgYSBwbGFjZWhvbGRlciBmb3IgYSBmdXR1cmUgdXNlLlxuICAgICAqL1xuICAgIHByb2ZpbGVGaWxlUHJlZml4Pzogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogTG9nIElELlxuICAgICAqXG4gICAgICogVGhpcyBzZXR0aW5nIGlzIGF2YWlsYWJsZSBvbmx5IGluIE9OTlhSdW50aW1lIChOb2RlLmpzIGJpbmRpbmcgYW5kIHJlYWN0LW5hdGl2ZSkgb3IgV2ViQXNzZW1ibHkgYmFja2VuZFxuICAgICAqL1xuICAgIGxvZ0lkPzogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogTG9nIHNldmVyaXR5IGxldmVsLiBTZWVcbiAgICAgKiBodHRwczovL2dpdGh1Yi5jb20vbWljcm9zb2Z0L29ubnhydW50aW1lL2Jsb2IvbWFpbi9pbmNsdWRlL29ubnhydW50aW1lL2NvcmUvY29tbW9uL2xvZ2dpbmcvc2V2ZXJpdHkuaFxuICAgICAqXG4gICAgICogVGhpcyBzZXR0aW5nIGlzIGF2YWlsYWJsZSBvbmx5IGluIE9OTlhSdW50aW1lIChOb2RlLmpzIGJpbmRpbmcgYW5kIHJlYWN0LW5hdGl2ZSkgb3IgV2ViQXNzZW1ibHkgYmFja2VuZFxuICAgICAqL1xuICAgIGxvZ1NldmVyaXR5TGV2ZWw/OiAwfDF8MnwzfDQ7XG5cbiAgICAvKipcbiAgICAgKiBMb2cgdmVyYm9zaXR5IGxldmVsLlxuICAgICAqXG4gICAgICogVGhpcyBzZXR0aW5nIGlzIGF2YWlsYWJsZSBvbmx5IGluIFdlYkFzc2VtYmx5IGJhY2tlbmQuIFdpbGwgc3VwcG9ydCBOb2RlLmpzIGJpbmRpbmcgYW5kIHJlYWN0LW5hdGl2ZSBsYXRlclxuICAgICAqL1xuICAgIGxvZ1ZlcmJvc2l0eUxldmVsPzogbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICogU3BlY2lmeSBzdHJpbmcgYXMgYSBwcmVmZXJyZWQgZGF0YSBsb2NhdGlvbiBmb3IgYWxsIG91dHB1dHMsIG9yIGFuIG9iamVjdCB0aGF0IHVzZSBvdXRwdXQgbmFtZXMgYXMga2V5cyBhbmQgYVxuICAgICAqIHByZWZlcnJlZCBkYXRhIGxvY2F0aW9uIGFzIGNvcnJlc3BvbmRpbmcgdmFsdWVzLlxuICAgICAqXG4gICAgICogVGhpcyBzZXR0aW5nIGlzIGF2YWlsYWJsZSBvbmx5IGluIE9OTlhSdW50aW1lIFdlYiBmb3IgV2ViR0wgYW5kIFdlYkdQVSBFUC5cbiAgICAgKi9cbiAgICBwcmVmZXJyZWRPdXRwdXRMb2NhdGlvbj86IE9ubnhWYWx1ZURhdGFMb2NhdGlvbnx7cmVhZG9ubHkgW291dHB1dE5hbWU6IHN0cmluZ106IE9ubnhWYWx1ZURhdGFMb2NhdGlvbn07XG5cbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIGVuYWJsZSBncmFwaCBjYXB0dXJlLlxuICAgICAqIFRoaXMgc2V0dGluZyBpcyBhdmFpbGFibGUgb25seSBpbiBPTk5YUnVudGltZSBXZWIgZm9yIFdlYkdQVSBFUC5cbiAgICAgKi9cbiAgICBlbmFibGVHcmFwaENhcHR1cmU/OiBib29sZWFuO1xuXG4gICAgLyoqXG4gICAgICogU3RvcmUgY29uZmlndXJhdGlvbnMgZm9yIGEgc2Vzc2lvbi4gU2VlXG4gICAgICogaHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC9vbm54cnVudGltZS9ibG9iL21haW4vaW5jbHVkZS9vbm54cnVudGltZS9jb3JlL3Nlc3Npb24vXG4gICAgICogb25ueHJ1bnRpbWVfc2Vzc2lvbl9vcHRpb25zX2NvbmZpZ19rZXlzLmhcbiAgICAgKlxuICAgICAqIFRoaXMgc2V0dGluZyBpcyBhdmFpbGFibGUgb25seSBpbiBXZWJBc3NlbWJseSBiYWNrZW5kLiBXaWxsIHN1cHBvcnQgTm9kZS5qcyBiaW5kaW5nIGFuZCByZWFjdC1uYXRpdmUgbGF0ZXJcbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogYGBganNcbiAgICAgKiBleHRyYToge1xuICAgICAqICAgc2Vzc2lvbjoge1xuICAgICAqICAgICBzZXRfZGVub3JtYWxfYXNfemVybzogXCIxXCIsXG4gICAgICogICAgIGRpc2FibGVfcHJlcGFja2luZzogXCIxXCJcbiAgICAgKiAgIH0sXG4gICAgICogICBvcHRpbWl6YXRpb246IHtcbiAgICAgKiAgICAgZW5hYmxlX2dlbHVfYXBwcm94aW1hdGlvbjogXCIxXCJcbiAgICAgKiAgIH1cbiAgICAgKiB9XG4gICAgICogYGBgXG4gICAgICovXG4gICAgZXh0cmE/OiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPjtcbiAgfVxuXG4gIC8vICNyZWdpb24gZXhlY3V0aW9uIHByb3ZpZGVyc1xuXG4gIC8vIEN1cnJlbnRseSwgd2UgaGF2ZSB0aGUgZm9sbG93aW5nIGJhY2tlbmRzIHRvIHN1cHBvcnQgZXhlY3V0aW9uIHByb3ZpZGVyczpcbiAgLy8gQmFja2VuZCBOb2RlLmpzIGJpbmRpbmc6IHN1cHBvcnRzICdjcHUnIGFuZCAnY3VkYScuXG4gIC8vIEJhY2tlbmQgV2ViQXNzZW1ibHk6IHN1cHBvcnRzICdjcHUnLCAnd2FzbScsICd3ZWJncHUnIGFuZCAnd2Vibm4nLlxuICAvLyBCYWNrZW5kIE9OTlguanM6IHN1cHBvcnRzICd3ZWJnbCcuXG4gIC8vIEJhY2tlbmQgUmVhY3QgTmF0aXZlOiBzdXBwb3J0cyAnY3B1JywgJ3hubnBhY2snLCAnY29yZW1sJyAoaU9TKSwgJ25uYXBpJyAoQW5kcm9pZCkuXG4gIGludGVyZmFjZSBFeGVjdXRpb25Qcm92aWRlck9wdGlvbk1hcCB7XG4gICAgY3B1OiBDcHVFeGVjdXRpb25Qcm92aWRlck9wdGlvbjtcbiAgICBjb3JlbWw6IENvcmVNbEV4ZWN1dGlvblByb3ZpZGVyT3B0aW9uO1xuICAgIGN1ZGE6IEN1ZGFFeGVjdXRpb25Qcm92aWRlck9wdGlvbjtcbiAgICBkbWw6IERtbEV4ZWN1dGlvblByb3ZpZGVyT3B0aW9uO1xuICAgIHRlbnNvcnJ0OiBUZW5zb3JSdEV4ZWN1dGlvblByb3ZpZGVyT3B0aW9uO1xuICAgIHdhc206IFdlYkFzc2VtYmx5RXhlY3V0aW9uUHJvdmlkZXJPcHRpb247XG4gICAgd2ViZ2w6IFdlYkdMRXhlY3V0aW9uUHJvdmlkZXJPcHRpb247XG4gICAgeG5ucGFjazogWG5ucGFja0V4ZWN1dGlvblByb3ZpZGVyT3B0aW9uO1xuICAgIHdlYmdwdTogV2ViR3B1RXhlY3V0aW9uUHJvdmlkZXJPcHRpb247XG4gICAgd2Vibm46IFdlYk5ORXhlY3V0aW9uUHJvdmlkZXJPcHRpb247XG4gICAgbm5hcGk6IE5uYXBpRXhlY3V0aW9uUHJvdmlkZXJPcHRpb247XG4gIH1cblxuICB0eXBlIEV4ZWN1dGlvblByb3ZpZGVyTmFtZSA9IGtleW9mIEV4ZWN1dGlvblByb3ZpZGVyT3B0aW9uTWFwO1xuICB0eXBlIEV4ZWN1dGlvblByb3ZpZGVyQ29uZmlnID1cbiAgICAgIEV4ZWN1dGlvblByb3ZpZGVyT3B0aW9uTWFwW0V4ZWN1dGlvblByb3ZpZGVyTmFtZV18RXhlY3V0aW9uUHJvdmlkZXJPcHRpb258RXhlY3V0aW9uUHJvdmlkZXJOYW1lfHN0cmluZztcblxuICBleHBvcnQgaW50ZXJmYWNlIEV4ZWN1dGlvblByb3ZpZGVyT3B0aW9uIHtcbiAgICByZWFkb25seSBuYW1lOiBzdHJpbmc7XG4gIH1cbiAgZXhwb3J0IGludGVyZmFjZSBDcHVFeGVjdXRpb25Qcm92aWRlck9wdGlvbiBleHRlbmRzIEV4ZWN1dGlvblByb3ZpZGVyT3B0aW9uIHtcbiAgICByZWFkb25seSBuYW1lOiAnY3B1JztcbiAgICB1c2VBcmVuYT86IGJvb2xlYW47XG4gIH1cbiAgZXhwb3J0IGludGVyZmFjZSBDdWRhRXhlY3V0aW9uUHJvdmlkZXJPcHRpb24gZXh0ZW5kcyBFeGVjdXRpb25Qcm92aWRlck9wdGlvbiB7XG4gICAgcmVhZG9ubHkgbmFtZTogJ2N1ZGEnO1xuICAgIGRldmljZUlkPzogbnVtYmVyO1xuICB9XG4gIGV4cG9ydCBpbnRlcmZhY2UgQ29yZU1sRXhlY3V0aW9uUHJvdmlkZXJPcHRpb24gZXh0ZW5kcyBFeGVjdXRpb25Qcm92aWRlck9wdGlvbiB7XG4gICAgcmVhZG9ubHkgbmFtZTogJ2NvcmVtbCc7XG4gICAgY29yZU1sRmxhZ3M/OiBudW1iZXI7XG4gIH1cbiAgZXhwb3J0IGludGVyZmFjZSBEbWxFeGVjdXRpb25Qcm92aWRlck9wdGlvbiBleHRlbmRzIEV4ZWN1dGlvblByb3ZpZGVyT3B0aW9uIHtcbiAgICByZWFkb25seSBuYW1lOiAnZG1sJztcbiAgICBkZXZpY2VJZD86IG51bWJlcjtcbiAgfVxuICBleHBvcnQgaW50ZXJmYWNlIFRlbnNvclJ0RXhlY3V0aW9uUHJvdmlkZXJPcHRpb24gZXh0ZW5kcyBFeGVjdXRpb25Qcm92aWRlck9wdGlvbiB7XG4gICAgcmVhZG9ubHkgbmFtZTogJ3RlbnNvcnJ0JztcbiAgICBkZXZpY2VJZD86IG51bWJlcjtcbiAgfVxuICBleHBvcnQgaW50ZXJmYWNlIFdlYkFzc2VtYmx5RXhlY3V0aW9uUHJvdmlkZXJPcHRpb24gZXh0ZW5kcyBFeGVjdXRpb25Qcm92aWRlck9wdGlvbiB7XG4gICAgcmVhZG9ubHkgbmFtZTogJ3dhc20nO1xuICB9XG4gIGV4cG9ydCBpbnRlcmZhY2UgV2ViR0xFeGVjdXRpb25Qcm92aWRlck9wdGlvbiBleHRlbmRzIEV4ZWN1dGlvblByb3ZpZGVyT3B0aW9uIHtcbiAgICByZWFkb25seSBuYW1lOiAnd2ViZ2wnO1xuICAgIC8vIFRPRE86IGFkZCBmbGFnc1xuICB9XG4gIGV4cG9ydCBpbnRlcmZhY2UgWG5ucGFja0V4ZWN1dGlvblByb3ZpZGVyT3B0aW9uIGV4dGVuZHMgRXhlY3V0aW9uUHJvdmlkZXJPcHRpb24ge1xuICAgIHJlYWRvbmx5IG5hbWU6ICd4bm5wYWNrJztcbiAgfVxuICBleHBvcnQgaW50ZXJmYWNlIFdlYkdwdUV4ZWN1dGlvblByb3ZpZGVyT3B0aW9uIGV4dGVuZHMgRXhlY3V0aW9uUHJvdmlkZXJPcHRpb24ge1xuICAgIHJlYWRvbmx5IG5hbWU6ICd3ZWJncHUnO1xuICAgIHByZWZlcnJlZExheW91dD86ICdOQ0hXJ3wnTkhXQyc7XG4gIH1cbiAgZXhwb3J0IGludGVyZmFjZSBXZWJOTkV4ZWN1dGlvblByb3ZpZGVyT3B0aW9uIGV4dGVuZHMgRXhlY3V0aW9uUHJvdmlkZXJPcHRpb24ge1xuICAgIHJlYWRvbmx5IG5hbWU6ICd3ZWJubic7XG4gICAgZGV2aWNlVHlwZT86ICdjcHUnfCdncHUnO1xuICAgIG51bVRocmVhZHM/OiBudW1iZXI7XG4gICAgcG93ZXJQcmVmZXJlbmNlPzogJ2RlZmF1bHQnfCdsb3ctcG93ZXInfCdoaWdoLXBlcmZvcm1hbmNlJztcbiAgfVxuICBleHBvcnQgaW50ZXJmYWNlIENvcmVNTEV4ZWN1dGlvblByb3ZpZGVyT3B0aW9uIGV4dGVuZHMgRXhlY3V0aW9uUHJvdmlkZXJPcHRpb24ge1xuICAgIHJlYWRvbmx5IG5hbWU6ICdjb3JlbWwnO1xuICAgIHVzZUNQVU9ubHk/OiBib29sZWFuO1xuICAgIGVuYWJsZU9uU3ViZ3JhcGg/OiBib29sZWFuO1xuICAgIG9ubHlFbmFibGVEZXZpY2VXaXRoQU5FPzogYm9vbGVhbjtcbiAgfVxuICBleHBvcnQgaW50ZXJmYWNlIE5uYXBpRXhlY3V0aW9uUHJvdmlkZXJPcHRpb24gZXh0ZW5kcyBFeGVjdXRpb25Qcm92aWRlck9wdGlvbiB7XG4gICAgcmVhZG9ubHkgbmFtZTogJ25uYXBpJztcbiAgICB1c2VGUDE2PzogYm9vbGVhbjtcbiAgICB1c2VOQ0hXPzogYm9vbGVhbjtcbiAgICBjcHVEaXNhYmxlZD86IGJvb2xlYW47XG4gICAgY3B1T25seT86IGJvb2xlYW47XG4gIH1cbiAgLy8gI2VuZHJlZ2lvblxuXG4gIC8vICNlbmRyZWdpb25cblxuICAvLyAjcmVnaW9uIHJ1biBvcHRpb25zXG5cbiAgLyoqXG4gICAqIEEgc2V0IG9mIGNvbmZpZ3VyYXRpb25zIGZvciBpbmZlcmVuY2UgcnVuIGJlaGF2aW9yXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIFJ1bk9wdGlvbnMge1xuICAgIC8qKlxuICAgICAqIExvZyBzZXZlcml0eSBsZXZlbC4gU2VlXG4gICAgICogaHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC9vbm54cnVudGltZS9ibG9iL21haW4vaW5jbHVkZS9vbm54cnVudGltZS9jb3JlL2NvbW1vbi9sb2dnaW5nL3NldmVyaXR5LmhcbiAgICAgKlxuICAgICAqIFRoaXMgc2V0dGluZyBpcyBhdmFpbGFibGUgb25seSBpbiBPTk5YUnVudGltZSAoTm9kZS5qcyBiaW5kaW5nIGFuZCByZWFjdC1uYXRpdmUpIG9yIFdlYkFzc2VtYmx5IGJhY2tlbmRcbiAgICAgKi9cbiAgICBsb2dTZXZlcml0eUxldmVsPzogMHwxfDJ8M3w0O1xuXG4gICAgLyoqXG4gICAgICogTG9nIHZlcmJvc2l0eSBsZXZlbC5cbiAgICAgKlxuICAgICAqIFRoaXMgc2V0dGluZyBpcyBhdmFpbGFibGUgb25seSBpbiBXZWJBc3NlbWJseSBiYWNrZW5kLiBXaWxsIHN1cHBvcnQgTm9kZS5qcyBiaW5kaW5nIGFuZCByZWFjdC1uYXRpdmUgbGF0ZXJcbiAgICAgKi9cbiAgICBsb2dWZXJib3NpdHlMZXZlbD86IG51bWJlcjtcblxuICAgIC8qKlxuICAgICAqIFRlcm1pbmF0ZSBhbGwgaW5jb21wbGV0ZSBPcnRSdW4gY2FsbHMgYXMgc29vbiBhcyBwb3NzaWJsZSBpZiB0cnVlXG4gICAgICpcbiAgICAgKiBUaGlzIHNldHRpbmcgaXMgYXZhaWxhYmxlIG9ubHkgaW4gV2ViQXNzZW1ibHkgYmFja2VuZC4gV2lsbCBzdXBwb3J0IE5vZGUuanMgYmluZGluZyBhbmQgcmVhY3QtbmF0aXZlIGxhdGVyXG4gICAgICovXG4gICAgdGVybWluYXRlPzogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICAqIEEgdGFnIGZvciB0aGUgUnVuKCkgY2FsbHMgdXNpbmcgdGhpc1xuICAgICAqXG4gICAgICogVGhpcyBzZXR0aW5nIGlzIGF2YWlsYWJsZSBvbmx5IGluIE9OTlhSdW50aW1lIChOb2RlLmpzIGJpbmRpbmcgYW5kIHJlYWN0LW5hdGl2ZSkgb3IgV2ViQXNzZW1ibHkgYmFja2VuZFxuICAgICAqL1xuICAgIHRhZz86IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFNldCBhIHNpbmdsZSBydW4gY29uZmlndXJhdGlvbiBlbnRyeS4gU2VlXG4gICAgICogaHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC9vbm54cnVudGltZS9ibG9iL21haW4vaW5jbHVkZS9vbm54cnVudGltZS9jb3JlL3Nlc3Npb24vXG4gICAgICogb25ueHJ1bnRpbWVfcnVuX29wdGlvbnNfY29uZmlnX2tleXMuaFxuICAgICAqXG4gICAgICogVGhpcyBzZXR0aW5nIGlzIGF2YWlsYWJsZSBvbmx5IGluIFdlYkFzc2VtYmx5IGJhY2tlbmQuIFdpbGwgc3VwcG9ydCBOb2RlLmpzIGJpbmRpbmcgYW5kIHJlYWN0LW5hdGl2ZSBsYXRlclxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGBgYGpzXG4gICAgICogZXh0cmE6IHtcbiAgICAgKiAgIG1lbW9yeToge1xuICAgICAqICAgICBlbmFibGVfbWVtb3J5X2FyZW5hX3Nocmlua2FnZTogXCIxXCIsXG4gICAgICogICB9XG4gICAgICogfVxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIGV4dHJhPzogUmVjb3JkPHN0cmluZywgdW5rbm93bj47XG4gIH1cblxuICAvLyAjZW5kcmVnaW9uXG5cbiAgLy8gI3JlZ2lvbiB2YWx1ZSBtZXRhZGF0YVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZW1wdHktaW50ZXJmYWNlXG4gIGludGVyZmFjZSBWYWx1ZU1ldGFkYXRhIHtcbiAgICAvLyBUQkRcbiAgfVxuXG4gIC8vICNlbmRyZWdpb25cbn1cblxuLyoqXG4gKiBSZXByZXNlbnQgYSBydW50aW1lIGluc3RhbmNlIG9mIGFuIE9OTlggbW9kZWwuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSW5mZXJlbmNlU2Vzc2lvbiB7XG4gIC8vICNyZWdpb24gcnVuKClcblxuICAvKipcbiAgICogRXhlY3V0ZSB0aGUgbW9kZWwgYXN5bmNocm9ub3VzbHkgd2l0aCB0aGUgZ2l2ZW4gZmVlZHMgYW5kIG9wdGlvbnMuXG4gICAqXG4gICAqIEBwYXJhbSBmZWVkcyAtIFJlcHJlc2VudGF0aW9uIG9mIHRoZSBtb2RlbCBpbnB1dC4gU2VlIHR5cGUgZGVzY3JpcHRpb24gb2YgYEluZmVyZW5jZVNlc3Npb24uSW5wdXRUeXBlYCBmb3IgZGV0YWlsLlxuICAgKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbmFsLiBBIHNldCBvZiBvcHRpb25zIHRoYXQgY29udHJvbHMgdGhlIGJlaGF2aW9yIG9mIG1vZGVsIGluZmVyZW5jZS5cbiAgICogQHJldHVybnMgQSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gYSBtYXAsIHdoaWNoIHVzZXMgb3V0cHV0IG5hbWVzIGFzIGtleXMgYW5kIE9ubnhWYWx1ZSBhcyBjb3JyZXNwb25kaW5nIHZhbHVlcy5cbiAgICovXG4gIHJ1bihmZWVkczogSW5mZXJlbmNlU2Vzc2lvbi5GZWVkc1R5cGUsIG9wdGlvbnM/OiBJbmZlcmVuY2VTZXNzaW9uLlJ1bk9wdGlvbnMpOiBQcm9taXNlPEluZmVyZW5jZVNlc3Npb24uUmV0dXJuVHlwZT47XG5cbiAgLyoqXG4gICAqIEV4ZWN1dGUgdGhlIG1vZGVsIGFzeW5jaHJvbm91c2x5IHdpdGggdGhlIGdpdmVuIGZlZWRzLCBmZXRjaGVzIGFuZCBvcHRpb25zLlxuICAgKlxuICAgKiBAcGFyYW0gZmVlZHMgLSBSZXByZXNlbnRhdGlvbiBvZiB0aGUgbW9kZWwgaW5wdXQuIFNlZSB0eXBlIGRlc2NyaXB0aW9uIG9mIGBJbmZlcmVuY2VTZXNzaW9uLklucHV0VHlwZWAgZm9yIGRldGFpbC5cbiAgICogQHBhcmFtIGZldGNoZXMgLSBSZXByZXNlbnRhdGlvbiBvZiB0aGUgbW9kZWwgb3V0cHV0LiBTZWUgdHlwZSBkZXNjcmlwdGlvbiBvZiBgSW5mZXJlbmNlU2Vzc2lvbi5PdXRwdXRUeXBlYCBmb3JcbiAgICogZGV0YWlsLlxuICAgKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbmFsLiBBIHNldCBvZiBvcHRpb25zIHRoYXQgY29udHJvbHMgdGhlIGJlaGF2aW9yIG9mIG1vZGVsIGluZmVyZW5jZS5cbiAgICogQHJldHVybnMgQSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gYSBtYXAsIHdoaWNoIHVzZXMgb3V0cHV0IG5hbWVzIGFzIGtleXMgYW5kIE9ubnhWYWx1ZSBhcyBjb3JyZXNwb25kaW5nIHZhbHVlcy5cbiAgICovXG4gIHJ1bihmZWVkczogSW5mZXJlbmNlU2Vzc2lvbi5GZWVkc1R5cGUsIGZldGNoZXM6IEluZmVyZW5jZVNlc3Npb24uRmV0Y2hlc1R5cGUsXG4gICAgICBvcHRpb25zPzogSW5mZXJlbmNlU2Vzc2lvbi5SdW5PcHRpb25zKTogUHJvbWlzZTxJbmZlcmVuY2VTZXNzaW9uLlJldHVyblR5cGU+O1xuXG4gIC8vICNlbmRyZWdpb25cblxuICAvLyAjcmVnaW9uIHJlbGVhc2UoKVxuXG4gIC8qKlxuICAgKiBSZWxlYXNlIHRoZSBpbmZlcmVuY2Ugc2Vzc2lvbiBhbmQgdGhlIHVuZGVybHlpbmcgcmVzb3VyY2VzLlxuICAgKi9cbiAgcmVsZWFzZSgpOiBQcm9taXNlPHZvaWQ+O1xuXG4gIC8vICNlbmRyZWdpb25cblxuICAvLyAjcmVnaW9uIHByb2ZpbGluZ1xuXG4gIC8qKlxuICAgKiBTdGFydCBwcm9maWxpbmcuXG4gICAqL1xuICBzdGFydFByb2ZpbGluZygpOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBFbmQgcHJvZmlsaW5nLlxuICAgKi9cbiAgZW5kUHJvZmlsaW5nKCk6IHZvaWQ7XG5cbiAgLy8gI2VuZHJlZ2lvblxuXG4gIC8vICNyZWdpb24gbWV0YWRhdGFcblxuICAvKipcbiAgICogR2V0IGlucHV0IG5hbWVzIG9mIHRoZSBsb2FkZWQgbW9kZWwuXG4gICAqL1xuICByZWFkb25seSBpbnB1dE5hbWVzOiByZWFkb25seSBzdHJpbmdbXTtcblxuICAvKipcbiAgICogR2V0IG91dHB1dCBuYW1lcyBvZiB0aGUgbG9hZGVkIG1vZGVsLlxuICAgKi9cbiAgcmVhZG9ubHkgb3V0cHV0TmFtZXM6IHJlYWRvbmx5IHN0cmluZ1tdO1xuXG4gIC8vIC8qKlxuICAvLyAgKiBHZXQgaW5wdXQgbWV0YWRhdGEgb2YgdGhlIGxvYWRlZCBtb2RlbC5cbiAgLy8gICovXG4gIC8vIHJlYWRvbmx5IGlucHV0TWV0YWRhdGE6IFJlYWRvbmx5QXJyYXk8UmVhZG9ubHk8SW5mZXJlbmNlU2Vzc2lvbi5WYWx1ZU1ldGFkYXRhPj47XG5cbiAgLy8gLyoqXG4gIC8vICAqIEdldCBvdXRwdXQgbWV0YWRhdGEgb2YgdGhlIGxvYWRlZCBtb2RlbC5cbiAgLy8gICovXG4gIC8vIHJlYWRvbmx5IG91dHB1dE1ldGFkYXRhOiBSZWFkb25seUFycmF5PFJlYWRvbmx5PEluZmVyZW5jZVNlc3Npb24uVmFsdWVNZXRhZGF0YT4+O1xuXG4gIC8vICNlbmRyZWdpb25cbn1cblxuZXhwb3J0IGludGVyZmFjZSBJbmZlcmVuY2VTZXNzaW9uRmFjdG9yeSB7XG4gIC8vICNyZWdpb24gY3JlYXRlKClcblxuICAvKipcbiAgICogQ3JlYXRlIGEgbmV3IGluZmVyZW5jZSBzZXNzaW9uIGFuZCBsb2FkIG1vZGVsIGFzeW5jaHJvbm91c2x5IGZyb20gYW4gT05OWCBtb2RlbCBmaWxlLlxuICAgKlxuICAgKiBAcGFyYW0gdXJpIC0gVGhlIFVSSSBvciBmaWxlIHBhdGggb2YgdGhlIG1vZGVsIHRvIGxvYWQuXG4gICAqIEBwYXJhbSBvcHRpb25zIC0gc3BlY2lmeSBjb25maWd1cmF0aW9uIGZvciBjcmVhdGluZyBhIG5ldyBpbmZlcmVuY2Ugc2Vzc2lvbi5cbiAgICogQHJldHVybnMgQSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gYW4gSW5mZXJlbmNlU2Vzc2lvbiBvYmplY3QuXG4gICAqL1xuICBjcmVhdGUodXJpOiBzdHJpbmcsIG9wdGlvbnM/OiBJbmZlcmVuY2VTZXNzaW9uLlNlc3Npb25PcHRpb25zKTogUHJvbWlzZTxJbmZlcmVuY2VTZXNzaW9uPjtcblxuICAvKipcbiAgICogQ3JlYXRlIGEgbmV3IGluZmVyZW5jZSBzZXNzaW9uIGFuZCBsb2FkIG1vZGVsIGFzeW5jaHJvbm91c2x5IGZyb20gYW4gYXJyYXkgYnVmZXIuXG4gICAqXG4gICAqIEBwYXJhbSBidWZmZXIgLSBBbiBBcnJheUJ1ZmZlciByZXByZXNlbnRhdGlvbiBvZiBhbiBPTk5YIG1vZGVsLlxuICAgKiBAcGFyYW0gb3B0aW9ucyAtIHNwZWNpZnkgY29uZmlndXJhdGlvbiBmb3IgY3JlYXRpbmcgYSBuZXcgaW5mZXJlbmNlIHNlc3Npb24uXG4gICAqIEByZXR1cm5zIEEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHRvIGFuIEluZmVyZW5jZVNlc3Npb24gb2JqZWN0LlxuICAgKi9cbiAgY3JlYXRlKGJ1ZmZlcjogQXJyYXlCdWZmZXJMaWtlLCBvcHRpb25zPzogSW5mZXJlbmNlU2Vzc2lvbi5TZXNzaW9uT3B0aW9ucyk6IFByb21pc2U8SW5mZXJlbmNlU2Vzc2lvbj47XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIG5ldyBpbmZlcmVuY2Ugc2Vzc2lvbiBhbmQgbG9hZCBtb2RlbCBhc3luY2hyb25vdXNseSBmcm9tIHNlZ21lbnQgb2YgYW4gYXJyYXkgYnVmZXIuXG4gICAqXG4gICAqIEBwYXJhbSBidWZmZXIgLSBBbiBBcnJheUJ1ZmZlciByZXByZXNlbnRhdGlvbiBvZiBhbiBPTk5YIG1vZGVsLlxuICAgKiBAcGFyYW0gYnl0ZU9mZnNldCAtIFRoZSBiZWdpbm5pbmcgb2YgdGhlIHNwZWNpZmllZCBwb3J0aW9uIG9mIHRoZSBhcnJheSBidWZmZXIuXG4gICAqIEBwYXJhbSBieXRlTGVuZ3RoIC0gVGhlIGxlbmd0aCBpbiBieXRlcyBvZiB0aGUgYXJyYXkgYnVmZmVyLlxuICAgKiBAcGFyYW0gb3B0aW9ucyAtIHNwZWNpZnkgY29uZmlndXJhdGlvbiBmb3IgY3JlYXRpbmcgYSBuZXcgaW5mZXJlbmNlIHNlc3Npb24uXG4gICAqIEByZXR1cm5zIEEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHRvIGFuIEluZmVyZW5jZVNlc3Npb24gb2JqZWN0LlxuICAgKi9cbiAgY3JlYXRlKGJ1ZmZlcjogQXJyYXlCdWZmZXJMaWtlLCBieXRlT2Zmc2V0OiBudW1iZXIsIGJ5dGVMZW5ndGg/OiBudW1iZXIsIG9wdGlvbnM/OiBJbmZlcmVuY2VTZXNzaW9uLlNlc3Npb25PcHRpb25zKTpcbiAgICAgIFByb21pc2U8SW5mZXJlbmNlU2Vzc2lvbj47XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIG5ldyBpbmZlcmVuY2Ugc2Vzc2lvbiBhbmQgbG9hZCBtb2RlbCBhc3luY2hyb25vdXNseSBmcm9tIGEgVWludDhBcnJheS5cbiAgICpcbiAgICogQHBhcmFtIGJ1ZmZlciAtIEEgVWludDhBcnJheSByZXByZXNlbnRhdGlvbiBvZiBhbiBPTk5YIG1vZGVsLlxuICAgKiBAcGFyYW0gb3B0aW9ucyAtIHNwZWNpZnkgY29uZmlndXJhdGlvbiBmb3IgY3JlYXRpbmcgYSBuZXcgaW5mZXJlbmNlIHNlc3Npb24uXG4gICAqIEByZXR1cm5zIEEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHRvIGFuIEluZmVyZW5jZVNlc3Npb24gb2JqZWN0LlxuICAgKi9cbiAgY3JlYXRlKGJ1ZmZlcjogVWludDhBcnJheSwgb3B0aW9ucz86IEluZmVyZW5jZVNlc3Npb24uU2Vzc2lvbk9wdGlvbnMpOiBQcm9taXNlPEluZmVyZW5jZVNlc3Npb24+O1xuXG4gIC8vICNlbmRyZWdpb25cbn1cblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uYW1pbmctY29udmVudGlvblxuZXhwb3J0IGNvbnN0IEluZmVyZW5jZVNlc3Npb246IEluZmVyZW5jZVNlc3Npb25GYWN0b3J5ID0gSW5mZXJlbmNlU2Vzc2lvbkltcGw7XG4iLCAiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5cbmltcG9ydCB7VGVuc29yfSBmcm9tICcuL3RlbnNvci5qcyc7XG5cbnR5cGUgTm9uVGVuc29yVHlwZSA9IG5ldmVyO1xuXG4vKipcbiAqIFR5cGUgT25ueFZhbHVlIFJlcHJlc2VudHMgYm90aCB0ZW5zb3JzIGFuZCBub24tdGVuc29ycyB2YWx1ZSBmb3IgbW9kZWwncyBpbnB1dHMvb3V0cHV0cy5cbiAqXG4gKiBOT1RFOiBjdXJyZW50bHkgbm90IHN1cHBvcnQgbm9uLXRlbnNvclxuICovXG5leHBvcnQgdHlwZSBPbm54VmFsdWUgPSBUZW5zb3J8Tm9uVGVuc29yVHlwZTtcblxuLyoqXG4gKiBUeXBlIE9ubnhWYWx1ZURhdGFMb2NhdGlvbiByZXByZXNlbnRzIHRoZSBsb2NhdGlvbiBvZiB0aGUgZGF0YSBvZiBhbiBPbm54VmFsdWUuXG4gKi9cbmV4cG9ydCB0eXBlIE9ubnhWYWx1ZURhdGFMb2NhdGlvbiA9IFRlbnNvci5EYXRhTG9jYXRpb247XG4iLCAiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5cbmltcG9ydCB7cmVzb2x2ZUJhY2tlbmR9IGZyb20gJy4vYmFja2VuZC1pbXBsLmpzJztcbmltcG9ydCB7U2Vzc2lvbkhhbmRsZXIsIFRyYWluaW5nU2Vzc2lvbkhhbmRsZXJ9IGZyb20gJy4vYmFja2VuZC5qcyc7XG5pbXBvcnQge0luZmVyZW5jZVNlc3Npb24gYXMgSW5mZXJlbmNlU2Vzc2lvbn0gZnJvbSAnLi9pbmZlcmVuY2Utc2Vzc2lvbi5qcyc7XG5pbXBvcnQge09ubnhWYWx1ZX0gZnJvbSAnLi9vbm54LXZhbHVlLmpzJztcbmltcG9ydCB7VGVuc29yfSBmcm9tICcuL3RlbnNvci5qcyc7XG5pbXBvcnQge1RyYWluaW5nU2Vzc2lvbiBhcyBUcmFpbmluZ1Nlc3Npb25JbnRlcmZhY2UsIFRyYWluaW5nU2Vzc2lvbkNyZWF0ZU9wdGlvbnN9IGZyb20gJy4vdHJhaW5pbmctc2Vzc2lvbi5qcyc7XG5cbnR5cGUgU2Vzc2lvbk9wdGlvbnMgPSBJbmZlcmVuY2VTZXNzaW9uLlNlc3Npb25PcHRpb25zO1xudHlwZSBGZWVkc1R5cGUgPSBJbmZlcmVuY2VTZXNzaW9uLkZlZWRzVHlwZTtcbnR5cGUgRmV0Y2hlc1R5cGUgPSBJbmZlcmVuY2VTZXNzaW9uLkZldGNoZXNUeXBlO1xudHlwZSBSZXR1cm5UeXBlID0gSW5mZXJlbmNlU2Vzc2lvbi5SZXR1cm5UeXBlO1xudHlwZSBSdW5PcHRpb25zID0gSW5mZXJlbmNlU2Vzc2lvbi5SdW5PcHRpb25zO1xuXG5jb25zdCBub0JhY2tlbmRFcnJNc2c6IHN0cmluZyA9ICdUcmFpbmluZyBiYWNrZW5kIGNvdWxkIG5vdCBiZSByZXNvbHZlZC4gJyArXG4gICAgJ01ha2Ugc3VyZSB5b3VcXCdyZSB1c2luZyB0aGUgY29ycmVjdCBjb25maWd1cmF0aW9uICYgV2ViQXNzZW1ibHkgZmlsZXMuJztcblxuZXhwb3J0IGNsYXNzIFRyYWluaW5nU2Vzc2lvbiBpbXBsZW1lbnRzIFRyYWluaW5nU2Vzc2lvbkludGVyZmFjZSB7XG4gIHByaXZhdGUgY29uc3RydWN0b3IoaGFuZGxlcjogVHJhaW5pbmdTZXNzaW9uSGFuZGxlciwgaGFzT3B0aW1pemVyTW9kZWw6IGJvb2xlYW4sIGhhc0V2YWxNb2RlbDogYm9vbGVhbikge1xuICAgIHRoaXMuaGFuZGxlciA9IGhhbmRsZXI7XG4gICAgdGhpcy5oYXNPcHRpbWl6ZXJNb2RlbCA9IGhhc09wdGltaXplck1vZGVsO1xuICAgIHRoaXMuaGFzRXZhbE1vZGVsID0gaGFzRXZhbE1vZGVsO1xuICB9XG4gIHByaXZhdGUgaGFuZGxlcjogVHJhaW5pbmdTZXNzaW9uSGFuZGxlcjtcbiAgcHJpdmF0ZSBoYXNPcHRpbWl6ZXJNb2RlbDogYm9vbGVhbjtcbiAgcHJpdmF0ZSBoYXNFdmFsTW9kZWw6IGJvb2xlYW47XG5cbiAgZ2V0IHRyYWluaW5nSW5wdXROYW1lcygpOiByZWFkb25seSBzdHJpbmdbXSB7XG4gICAgcmV0dXJuIHRoaXMuaGFuZGxlci5pbnB1dE5hbWVzO1xuICB9XG4gIGdldCB0cmFpbmluZ091dHB1dE5hbWVzKCk6IHJlYWRvbmx5IHN0cmluZ1tdIHtcbiAgICByZXR1cm4gdGhpcy5oYW5kbGVyLm91dHB1dE5hbWVzO1xuICB9XG5cbiAgZ2V0IGV2YWxJbnB1dE5hbWVzKCk6IHJlYWRvbmx5IHN0cmluZ1tdIHtcbiAgICBpZiAodGhpcy5oYXNFdmFsTW9kZWwpIHtcbiAgICAgIHJldHVybiB0aGlzLmhhbmRsZXIuZXZhbElucHV0TmFtZXM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVGhpcyB0cmFpbmluZyBzZXNzaW9uIGhhcyBubyBldmFsTW9kZWwgbG9hZGVkLicpO1xuICAgIH1cbiAgfVxuICBnZXQgZXZhbE91dHB1dE5hbWVzKCk6IHJlYWRvbmx5IHN0cmluZ1tdIHtcbiAgICBpZiAodGhpcy5oYXNFdmFsTW9kZWwpIHtcbiAgICAgIHJldHVybiB0aGlzLmhhbmRsZXIuZXZhbE91dHB1dE5hbWVzO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoaXMgdHJhaW5pbmcgc2Vzc2lvbiBoYXMgbm8gZXZhbE1vZGVsIGxvYWRlZC4nKTtcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgYXN5bmMgY3JlYXRlKHRyYWluaW5nT3B0aW9uczogVHJhaW5pbmdTZXNzaW9uQ3JlYXRlT3B0aW9ucywgc2Vzc2lvbk9wdGlvbnM/OiBTZXNzaW9uT3B0aW9ucyk6XG4gICAgICBQcm9taXNlPFRyYWluaW5nU2Vzc2lvbj4ge1xuICAgIGNvbnN0IGV2YWxNb2RlbDogc3RyaW5nfFVpbnQ4QXJyYXkgPSB0cmFpbmluZ09wdGlvbnMuZXZhbE1vZGVsIHx8ICcnO1xuICAgIGNvbnN0IG9wdGltaXplck1vZGVsOiBzdHJpbmd8VWludDhBcnJheSA9IHRyYWluaW5nT3B0aW9ucy5vcHRpbWl6ZXJNb2RlbCB8fCAnJztcbiAgICBjb25zdCBvcHRpb25zOiBTZXNzaW9uT3B0aW9ucyA9IHNlc3Npb25PcHRpb25zIHx8IHt9O1xuXG4gICAgLy8gZ2V0IGJhY2tlbmQgaGludHNcbiAgICBjb25zdCBlcHMgPSBvcHRpb25zLmV4ZWN1dGlvblByb3ZpZGVycyB8fCBbXTtcbiAgICBjb25zdCBiYWNrZW5kSGludHMgPSBlcHMubWFwKGkgPT4gdHlwZW9mIGkgPT09ICdzdHJpbmcnID8gaSA6IGkubmFtZSk7XG4gICAgY29uc3QgYmFja2VuZCA9IGF3YWl0IHJlc29sdmVCYWNrZW5kKGJhY2tlbmRIaW50cyk7XG4gICAgaWYgKGJhY2tlbmQuY3JlYXRlVHJhaW5pbmdTZXNzaW9uSGFuZGxlcikge1xuICAgICAgY29uc3QgaGFuZGxlciA9IGF3YWl0IGJhY2tlbmQuY3JlYXRlVHJhaW5pbmdTZXNzaW9uSGFuZGxlcihcbiAgICAgICAgICB0cmFpbmluZ09wdGlvbnMuY2hlY2twb2ludFN0YXRlLCB0cmFpbmluZ09wdGlvbnMudHJhaW5Nb2RlbCwgZXZhbE1vZGVsLCBvcHRpbWl6ZXJNb2RlbCwgb3B0aW9ucyk7XG4gICAgICByZXR1cm4gbmV3IFRyYWluaW5nU2Vzc2lvbihoYW5kbGVyLCAhIXRyYWluaW5nT3B0aW9ucy5vcHRpbWl6ZXJNb2RlbCwgISF0cmFpbmluZ09wdGlvbnMuZXZhbE1vZGVsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKG5vQmFja2VuZEVyck1zZyk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEhlbHBlciBmdW5jdGlvbiBmb3IgcnVuVHJhaW5TdGVwIGFuZCBmdXR1cmUgcnVuU3RlcCBtZXRob2RzIHRoYXQgaGFuZGxlcyB0aGUgdHlwZS1uYXJyb3dpbmcgY29udmVyc2lvbiBmcm9tXG4gICAqIHRoZSBnaXZlbiBwYXJhbWV0ZXJzIHRvIFNlc3Npb25IYW5kbGVyLkZldGNoZXNUeXBlIGFuZCBSdW5PcHRpb25zLlxuICAgKlxuICAgKiBAcGFyYW0gaW5wdXROYW1lcyB0aGUgZmVlZHMgb2JqZWN0IGlzIGNoZWNrZWQgdGhhdCB0aGV5IGNvbnRhaW4gYWxsIGlucHV0IG5hbWVzIGluIHRoZSBwcm92aWRlZCBsaXN0IG9mIGlucHV0XG4gICAqIG5hbWVzLlxuICAgKiBAcGFyYW0gb3V0cHV0TmFtZXMgdGhlIGZldGNoZXMgb2JqZWN0IGlzIGNoZWNrZWQgdGhhdCB0aGVpciBrZXlzIG1hdGNoIHVwIHdpdGggdmFsaWQgbmFtZXMgaW4gdGhlIGxpc3Qgb2Ygb3V0cHV0XG4gICAqIG5hbWVzLlxuICAgKiBAcGFyYW0gZmVlZHMgdGhlIHJlcXVpcmVkIGlucHV0XG4gICAqIEBwYXJhbSBhcmcxIG5hcnJvd2VkICYgY29udmVydGVkIGludG8gdGhlIFNlc3Npb25IYW5kbGVyLkZldGNoZXNUeXBlIG9yIFJ1bk9wdGlvbnMgb2JqZWN0XG4gICAqIEBwYXJhbSBhcmcyIG9wdGlvbmFsIFJ1bk9wdGlvbnMgb2JqZWN0LlxuICAgKiBAcmV0dXJuc1xuICAgKi9cbiAgdHlwZU5hcnJvd2luZ0ZvclJ1blN0ZXAoXG4gICAgICBpbnB1dE5hbWVzOiByZWFkb25seSBzdHJpbmdbXSwgb3V0cHV0TmFtZXM6IHJlYWRvbmx5IHN0cmluZ1tdLCBmZWVkczogRmVlZHNUeXBlLCBhcmcxPzogRmV0Y2hlc1R5cGV8UnVuT3B0aW9ucyxcbiAgICAgIGFyZzI/OiBSdW5PcHRpb25zKTogW1Nlc3Npb25IYW5kbGVyLkZldGNoZXNUeXBlLCBSdW5PcHRpb25zXSB7XG4gICAgY29uc3QgZmV0Y2hlczoge1tuYW1lOiBzdHJpbmddOiBPbm54VmFsdWV8bnVsbH0gPSB7fTtcbiAgICBsZXQgb3B0aW9uczogUnVuT3B0aW9ucyA9IHt9O1xuICAgIC8vIGNoZWNrIGlucHV0c1xuICAgIGlmICh0eXBlb2YgZmVlZHMgIT09ICdvYmplY3QnIHx8IGZlZWRzID09PSBudWxsIHx8IGZlZWRzIGluc3RhbmNlb2YgVGVuc29yIHx8IEFycmF5LmlzQXJyYXkoZmVlZHMpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgICAgICdcXCdmZWVkc1xcJyBtdXN0IGJlIGFuIG9iamVjdCB0aGF0IHVzZSBpbnB1dCBuYW1lcyBhcyBrZXlzIGFuZCBPbm54VmFsdWUgYXMgY29ycmVzcG9uZGluZyB2YWx1ZXMuJyk7XG4gICAgfVxuXG4gICAgbGV0IGlzRmV0Y2hlc0VtcHR5ID0gdHJ1ZTtcbiAgICAvLyBkZXRlcm1pbmUgd2hpY2ggb3ZlcnJpZGUgaXMgYmVpbmcgdXNlZFxuICAgIGlmICh0eXBlb2YgYXJnMSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIGlmIChhcmcxID09PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1VuZXhwZWN0ZWQgYXJndW1lbnRbMV06IGNhbm5vdCBiZSBudWxsLicpO1xuICAgICAgfVxuICAgICAgaWYgKGFyZzEgaW5zdGFuY2VvZiBUZW5zb3IpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXFwnZmV0Y2hlc1xcJyBjYW5ub3QgYmUgYSBUZW5zb3InKTtcbiAgICAgIH1cblxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoYXJnMSkpIHtcbiAgICAgICAgaWYgKGFyZzEubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXFwnZmV0Y2hlc1xcJyBjYW5ub3QgYmUgYW4gZW1wdHkgYXJyYXkuJyk7XG4gICAgICAgIH1cbiAgICAgICAgaXNGZXRjaGVzRW1wdHkgPSBmYWxzZTtcbiAgICAgICAgLy8gb3V0cHV0IG5hbWVzXG4gICAgICAgIGZvciAoY29uc3QgbmFtZSBvZiBhcmcxKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBuYW1lICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXFwnZmV0Y2hlc1xcJyBtdXN0IGJlIGEgc3RyaW5nIGFycmF5IG9yIGFuIG9iamVjdC4nKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKG91dHB1dE5hbWVzLmluZGV4T2YobmFtZSkgPT09IC0xKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihgJ2ZldGNoZXMnIGNvbnRhaW5zIGludmFsaWQgb3V0cHV0IG5hbWU6ICR7bmFtZX0uYCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZldGNoZXNbbmFtZV0gPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBhcmcyID09PSAnb2JqZWN0JyAmJiBhcmcyICE9PSBudWxsKSB7XG4gICAgICAgICAgb3B0aW9ucyA9IGFyZzI7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGFyZzIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXFwnb3B0aW9uc1xcJyBtdXN0IGJlIGFuIG9iamVjdC4nKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gZGVjaWRlIHdoZXRoZXIgYXJnMSBpcyBmZXRjaGVzIG9yIG9wdGlvbnNcbiAgICAgICAgLy8gaWYgYW55IG91dHB1dCBuYW1lIGlzIHByZXNlbnQgYW5kIGl0cyB2YWx1ZSBpcyB2YWxpZCBPbm54VmFsdWUsIHdlIGNvbnNpZGVyIGl0IGZldGNoZXNcbiAgICAgICAgbGV0IGlzRmV0Y2hlcyA9IGZhbHNlO1xuICAgICAgICBjb25zdCBhcmcxS2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGFyZzEpO1xuICAgICAgICBmb3IgKGNvbnN0IG5hbWUgb2Ygb3V0cHV0TmFtZXMpIHtcbiAgICAgICAgICBpZiAoYXJnMUtleXMuaW5kZXhPZihuYW1lKSAhPT0gLTEpIHtcbiAgICAgICAgICAgIGNvbnN0IHYgPSAoYXJnMSBhcyBJbmZlcmVuY2VTZXNzaW9uLk51bGxhYmxlT25ueFZhbHVlTWFwVHlwZSlbbmFtZV07XG4gICAgICAgICAgICBpZiAodiA9PT0gbnVsbCB8fCB2IGluc3RhbmNlb2YgVGVuc29yKSB7XG4gICAgICAgICAgICAgIGlzRmV0Y2hlcyA9IHRydWU7XG4gICAgICAgICAgICAgIGlzRmV0Y2hlc0VtcHR5ID0gZmFsc2U7XG4gICAgICAgICAgICAgIGZldGNoZXNbbmFtZV0gPSB2O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc0ZldGNoZXMpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIGFyZzIgPT09ICdvYmplY3QnICYmIGFyZzIgIT09IG51bGwpIHtcbiAgICAgICAgICAgIG9wdGlvbnMgPSBhcmcyO1xuICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGFyZzIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcXCdvcHRpb25zXFwnIG11c3QgYmUgYW4gb2JqZWN0LicpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvcHRpb25zID0gYXJnMSBhcyBSdW5PcHRpb25zO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgYXJnMSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1VuZXhwZWN0ZWQgYXJndW1lbnRbMV06IG11c3QgYmUgXFwnZmV0Y2hlc1xcJyBvciBcXCdvcHRpb25zXFwnLicpO1xuICAgIH1cblxuICAgIC8vIGNoZWNrIGlmIGFsbCBpbnB1dHMgYXJlIGluIGZlZWRcbiAgICBmb3IgKGNvbnN0IG5hbWUgb2YgaW5wdXROYW1lcykge1xuICAgICAgaWYgKHR5cGVvZiBmZWVkc1tuYW1lXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBpbnB1dCAnJHtuYW1lfScgaXMgbWlzc2luZyBpbiAnZmVlZHMnLmApO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIGlmIG5vIGZldGNoZXMgaXMgc3BlY2lmaWVkLCB3ZSB1c2UgdGhlIGZ1bGwgb3V0cHV0IG5hbWVzIGxpc3RcbiAgICBpZiAoaXNGZXRjaGVzRW1wdHkpIHtcbiAgICAgIGZvciAoY29uc3QgbmFtZSBvZiBvdXRwdXROYW1lcykge1xuICAgICAgICBmZXRjaGVzW25hbWVdID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gW2ZldGNoZXMsIG9wdGlvbnNdO1xuICB9XG5cbiAgLyoqXG4gICAqIEhlbHBlciBtZXRob2QgZm9yIHJ1blRyYWluU3RlcCBhbmQgYW55IG90aGVyIHJ1blN0ZXAgbWV0aG9kcy4gVGFrZXMgdGhlIFJldHVyblR5cGUgcmVzdWx0IGZyb20gdGhlIFNlc3Npb25IYW5kbGVyXG4gICAqIGFuZCBjaGFuZ2VzIGl0IGludG8gYSBtYXAgb2YgVGVuc29ycy5cbiAgICpcbiAgICogQHBhcmFtIHJlc3VsdHNcbiAgICogQHJldHVybnNcbiAgICovXG4gIGNvbnZlcnRIYW5kbGVyUmV0dXJuVHlwZVRvTWFwT2ZUZW5zb3JzKHJlc3VsdHM6IFNlc3Npb25IYW5kbGVyLlJldHVyblR5cGUpOiBSZXR1cm5UeXBlIHtcbiAgICBjb25zdCByZXR1cm5WYWx1ZToge1tuYW1lOiBzdHJpbmddOiBPbm54VmFsdWV9ID0ge307XG4gICAgZm9yIChjb25zdCBrZXkgaW4gcmVzdWx0cykge1xuICAgICAgaWYgKE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKHJlc3VsdHMsIGtleSkpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gcmVzdWx0c1trZXldO1xuICAgICAgICBpZiAocmVzdWx0IGluc3RhbmNlb2YgVGVuc29yKSB7XG4gICAgICAgICAgcmV0dXJuVmFsdWVba2V5XSA9IHJlc3VsdDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm5WYWx1ZVtrZXldID0gbmV3IFRlbnNvcihyZXN1bHQudHlwZSwgcmVzdWx0LmRhdGEsIHJlc3VsdC5kaW1zKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmV0dXJuVmFsdWU7XG4gIH1cblxuICBhc3luYyBsYXp5UmVzZXRHcmFkKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIGF3YWl0IHRoaXMuaGFuZGxlci5sYXp5UmVzZXRHcmFkKCk7XG4gIH1cblxuICBydW5UcmFpblN0ZXAoZmVlZHM6IEZlZWRzVHlwZSwgb3B0aW9ucz86IFJ1bk9wdGlvbnMpOiBQcm9taXNlPFJldHVyblR5cGU+O1xuICBydW5UcmFpblN0ZXAoZmVlZHM6IEZlZWRzVHlwZSwgZmV0Y2hlczogRmV0Y2hlc1R5cGUsIG9wdGlvbnM/OiBSdW5PcHRpb25zKTogUHJvbWlzZTxSZXR1cm5UeXBlPjtcbiAgYXN5bmMgcnVuVHJhaW5TdGVwKGZlZWRzOiBGZWVkc1R5cGUsIGFyZzE/OiBGZXRjaGVzVHlwZXxSdW5PcHRpb25zLCBhcmcyPzogUnVuT3B0aW9ucyk6IFByb21pc2U8UmV0dXJuVHlwZT4ge1xuICAgIGNvbnN0IFtmZXRjaGVzLCBvcHRpb25zXSA9XG4gICAgICAgIHRoaXMudHlwZU5hcnJvd2luZ0ZvclJ1blN0ZXAodGhpcy50cmFpbmluZ0lucHV0TmFtZXMsIHRoaXMudHJhaW5pbmdPdXRwdXROYW1lcywgZmVlZHMsIGFyZzEsIGFyZzIpO1xuICAgIGNvbnN0IHJlc3VsdHMgPSBhd2FpdCB0aGlzLmhhbmRsZXIucnVuVHJhaW5TdGVwKGZlZWRzLCBmZXRjaGVzLCBvcHRpb25zKTtcbiAgICByZXR1cm4gdGhpcy5jb252ZXJ0SGFuZGxlclJldHVyblR5cGVUb01hcE9mVGVuc29ycyhyZXN1bHRzKTtcbiAgfVxuXG4gIGFzeW5jIHJ1bk9wdGltaXplclN0ZXAob3B0aW9ucz86IEluZmVyZW5jZVNlc3Npb24uUnVuT3B0aW9uc3x1bmRlZmluZWQpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBpZiAodGhpcy5oYXNPcHRpbWl6ZXJNb2RlbCkge1xuICAgICAgYXdhaXQgdGhpcy5oYW5kbGVyLnJ1bk9wdGltaXplclN0ZXAob3B0aW9ucyB8fCB7fSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVGhpcyBUcmFpbmluZ1Nlc3Npb24gaGFzIG5vIE9wdGltaXplck1vZGVsIGxvYWRlZC4nKTtcbiAgICB9XG4gIH1cblxuICBydW5FdmFsU3RlcChmZWVkczogRmVlZHNUeXBlLCBvcHRpb25zPzogUnVuT3B0aW9uc3x1bmRlZmluZWQpOiBQcm9taXNlPFJldHVyblR5cGU+O1xuICBydW5FdmFsU3RlcChmZWVkczogRmVlZHNUeXBlLCBmZXRjaGVzOiBGZXRjaGVzVHlwZSwgb3B0aW9ucz86IFJ1bk9wdGlvbnN8dW5kZWZpbmVkKTogUHJvbWlzZTxSZXR1cm5UeXBlPjtcbiAgYXN5bmMgcnVuRXZhbFN0ZXAoZmVlZHM6IEZlZWRzVHlwZSwgYXJnMT86IEZldGNoZXNUeXBlfFJ1bk9wdGlvbnMsIGFyZzI/OiBSdW5PcHRpb25zKTogUHJvbWlzZTxSZXR1cm5UeXBlPiB7XG4gICAgaWYgKHRoaXMuaGFzRXZhbE1vZGVsKSB7XG4gICAgICBjb25zdCBbZmV0Y2hlcywgb3B0aW9uc10gPVxuICAgICAgICAgIHRoaXMudHlwZU5hcnJvd2luZ0ZvclJ1blN0ZXAodGhpcy5ldmFsSW5wdXROYW1lcywgdGhpcy5ldmFsT3V0cHV0TmFtZXMsIGZlZWRzLCBhcmcxLCBhcmcyKTtcbiAgICAgIGNvbnN0IHJlc3VsdHMgPSBhd2FpdCB0aGlzLmhhbmRsZXIucnVuRXZhbFN0ZXAoZmVlZHMsIGZldGNoZXMsIG9wdGlvbnMpO1xuICAgICAgcmV0dXJuIHRoaXMuY29udmVydEhhbmRsZXJSZXR1cm5UeXBlVG9NYXBPZlRlbnNvcnMocmVzdWx0cyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVGhpcyBUcmFpbmluZ1Nlc3Npb24gaGFzIG5vIEV2YWxNb2RlbCBsb2FkZWQuJyk7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgZ2V0UGFyYW1ldGVyc1NpemUodHJhaW5hYmxlT25seSA9IHRydWUpOiBQcm9taXNlPG51bWJlcj4ge1xuICAgIHJldHVybiB0aGlzLmhhbmRsZXIuZ2V0UGFyYW1ldGVyc1NpemUodHJhaW5hYmxlT25seSk7XG4gIH1cblxuICBhc3luYyBsb2FkUGFyYW1ldGVyc0J1ZmZlcihhcnJheTogVWludDhBcnJheSwgdHJhaW5hYmxlT25seSA9IHRydWUpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBjb25zdCBwYXJhbXNTaXplID0gYXdhaXQgdGhpcy5nZXRQYXJhbWV0ZXJzU2l6ZSh0cmFpbmFibGVPbmx5KTtcbiAgICAvLyBjaGVja2luZyB0aGF0IHRoZSBzaXplIG9mIHRoZSBVaW50OEFycmF5IGlzIGVxdWl2YWxlbnQgdG8gdGhlIGJ5dGUgbGVuZ3RoIG9mIGEgRmxvYXQzMkFycmF5IG9mIHRoZSBudW1iZXJcbiAgICAvLyBvZiBwYXJhbWV0ZXJzXG4gICAgaWYgKGFycmF5Lmxlbmd0aCAhPT0gNCAqIHBhcmFtc1NpemUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAnU2l6ZSBvZiB0aGUgYnVmZmVyIHBhc3NlZCBpbnRvIGxvYWRQYXJhbWV0ZXJzQnVmZmVyIG11c3QgbWF0Y2ggdGhlIG51bWJlciBvZiBwYXJhbWV0ZXJzIGluICcgK1xuICAgICAgICAgICd0aGUgbW9kZWwuIFBsZWFzZSB1c2UgZ2V0UGFyYW1ldGVyc1NpemUgbWV0aG9kIHRvIGNoZWNrLicpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5oYW5kbGVyLmxvYWRQYXJhbWV0ZXJzQnVmZmVyKGFycmF5LCB0cmFpbmFibGVPbmx5KTtcbiAgfVxuXG4gIGFzeW5jIGdldENvbnRpZ3VvdXNQYXJhbWV0ZXJzKHRyYWluYWJsZU9ubHkgPSB0cnVlKTogUHJvbWlzZTxPbm54VmFsdWU+IHtcbiAgICByZXR1cm4gdGhpcy5oYW5kbGVyLmdldENvbnRpZ3VvdXNQYXJhbWV0ZXJzKHRyYWluYWJsZU9ubHkpO1xuICB9XG5cbiAgYXN5bmMgcmVsZWFzZSgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm4gdGhpcy5oYW5kbGVyLmRpc3Bvc2UoKTtcbiAgfVxufVxuIiwgIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuXG5pbXBvcnQge0luZmVyZW5jZVNlc3Npb259IGZyb20gJy4vaW5mZXJlbmNlLXNlc3Npb24uanMnO1xuaW1wb3J0IHtPbm54VmFsdWV9IGZyb20gJy4vb25ueC12YWx1ZS5qcyc7XG5pbXBvcnQge1RyYWluaW5nU2Vzc2lvbiBhcyBUcmFpbmluZ1Nlc3Npb25JbXBsfSBmcm9tICcuL3RyYWluaW5nLXNlc3Npb24taW1wbC5qcyc7XG5cbi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby1yZWRlY2xhcmUgKi9cblxuZXhwb3J0IGRlY2xhcmUgbmFtZXNwYWNlIFRyYWluaW5nU2Vzc2lvbiB7XG4gIC8qKlxuICAgKiBFaXRoZXIgVVJJIGZpbGUgcGF0aCAoc3RyaW5nKSBvciBVaW50OEFycmF5IGNvbnRhaW5pbmcgbW9kZWwgb3IgY2hlY2twb2ludCBpbmZvcm1hdGlvbi5cbiAgICovXG4gIHR5cGUgVVJJb3JCdWZmZXIgPSBzdHJpbmd8VWludDhBcnJheTtcbn1cblxuLyoqXG4gKiBSZXByZXNlbnQgYSBydW50aW1lIGluc3RhbmNlIG9mIGFuIE9OTlggdHJhaW5pbmcgc2Vzc2lvbixcbiAqIHdoaWNoIGNvbnRhaW5zIGEgbW9kZWwgdGhhdCBjYW4gYmUgdHJhaW5lZCwgYW5kLCBvcHRpb25hbGx5LFxuICogYW4gZXZhbCBhbmQgb3B0aW1pemVyIG1vZGVsLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFRyYWluaW5nU2Vzc2lvbiB7XG4gIC8vICNyZWdpb24gcnVuKClcblxuICAvKipcbiAgICogTGF6aWx5IHJlc2V0cyB0aGUgZ3JhZGllbnRzIG9mIGFsbCB0cmFpbmFibGUgcGFyYW1ldGVycyB0byB6ZXJvLiBTaG91bGQgaGFwcGVuIGFmdGVyIHRoZSBpbnZvY2F0aW9uIG9mXG4gICAqIHJ1bk9wdGltaXplclN0ZXAuXG4gICAqL1xuICBsYXp5UmVzZXRHcmFkKCk6IFByb21pc2U8dm9pZD47XG5cbiAgLyoqXG4gICAqIFJ1biBUcmFpblN0ZXAgYXN5bmNocm9ub3VzbHkgd2l0aCB0aGUgZ2l2ZW4gZmVlZHMgYW5kIG9wdGlvbnMuXG4gICAqXG4gICAqIEBwYXJhbSBmZWVkcyAtIFJlcHJlc2VudGF0aW9uIG9mIHRoZSBtb2RlbCBpbnB1dC4gU2VlIHR5cGUgZGVzY3JpcHRpb24gb2YgYEluZmVyZW5jZVNlc3Npb24uSW5wdXRUeXBlYCBmb3JcbiAgIGRldGFpbC5cbiAgICogQHBhcmFtIG9wdGlvbnMgLSBPcHRpb25hbC4gQSBzZXQgb2Ygb3B0aW9ucyB0aGF0IGNvbnRyb2xzIHRoZSBiZWhhdmlvciBvZiBtb2RlbCB0cmFpbmluZy5cbiAgICogQHJldHVybnMgQSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gYSBtYXAsIHdoaWNoIHVzZXMgb3V0cHV0IG5hbWVzIGFzIGtleXMgYW5kIE9ubnhWYWx1ZSBhcyBjb3JyZXNwb25kaW5nIHZhbHVlcy5cbiAgICovXG4gIHJ1blRyYWluU3RlcChmZWVkczogSW5mZXJlbmNlU2Vzc2lvbi5GZWVkc1R5cGUsIG9wdGlvbnM/OiBJbmZlcmVuY2VTZXNzaW9uLlJ1bk9wdGlvbnMpOlxuICAgICAgUHJvbWlzZTxJbmZlcmVuY2VTZXNzaW9uLlJldHVyblR5cGU+O1xuXG4gIC8qKlxuICAgKiBSdW4gYSBzaW5nbGUgdHJhaW4gc3RlcCB3aXRoIHRoZSBnaXZlbiBpbnB1dHMgYW5kIG9wdGlvbnMuXG4gICAqXG4gICAqIEBwYXJhbSBmZWVkcyAtIFJlcHJlc2VudGF0aW9uIG9mIHRoZSBtb2RlbCBpbnB1dC5cbiAgICogQHBhcmFtIGZldGNoZXMgLSBSZXByZXNlbnRhdGlvbiBvZiB0aGUgbW9kZWwgb3V0cHV0LlxuICAgKiBkZXRhaWwuXG4gICAqIEBwYXJhbSBvcHRpb25zIC0gT3B0aW9uYWwuIEEgc2V0IG9mIG9wdGlvbnMgdGhhdCBjb250cm9scyB0aGUgYmVoYXZpb3Igb2YgbW9kZWwgdHJhaW5pbmcuXG4gICAqIEByZXR1cm5zIEEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHRvIGEgbWFwLCB3aGljaCB1c2VzIG91dHB1dCBuYW1lcyBhcyBrZXlzIGFuZCBPbm54VmFsdWUgYXMgY29ycmVzcG9uZGluZ1xuICAgdmFsdWVzLlxuICAgKi9cbiAgcnVuVHJhaW5TdGVwKFxuICAgICAgZmVlZHM6IEluZmVyZW5jZVNlc3Npb24uRmVlZHNUeXBlLCBmZXRjaGVzOiBJbmZlcmVuY2VTZXNzaW9uLkZldGNoZXNUeXBlLFxuICAgICAgb3B0aW9ucz86IEluZmVyZW5jZVNlc3Npb24uUnVuT3B0aW9ucyk6IFByb21pc2U8SW5mZXJlbmNlU2Vzc2lvbi5SZXR1cm5UeXBlPjtcblxuICAvKipcbiAgICogUnVucyBhIHNpbmdsZSBvcHRpbWl6ZXIgc3RlcCwgd2hpY2ggcGVyZm9ybXMgd2VpZ2h0IHVwZGF0ZXMgZm9yIHRoZSB0cmFpbmFibGUgcGFyYW1ldGVycyB1c2luZyB0aGUgb3B0aW1pemVyIG1vZGVsLlxuICAgKlxuICAgKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbmFsLiBBIHNldCBvZiBvcHRpb25zIHRoYXQgY29udHJvbHMgdGhlIGJlaGF2aW9yIG9mIG1vZGVsIG9wdGltaXppbmcuXG4gICAqL1xuICBydW5PcHRpbWl6ZXJTdGVwKG9wdGlvbnM/OiBJbmZlcmVuY2VTZXNzaW9uLlJ1bk9wdGlvbnMpOiBQcm9taXNlPHZvaWQ+O1xuXG4gIC8qKlxuICAgKiBSdW4gYSBzaW5nbGUgZXZhbCBzdGVwIHdpdGggdGhlIGdpdmVuIGlucHV0cyBhbmQgb3B0aW9ucyB1c2luZyB0aGUgZXZhbCBtb2RlbC5cbiAgICpcbiAgICogQHBhcmFtIGZlZWRzIC0gUmVwcmVzZW50YXRpb24gb2YgdGhlIG1vZGVsIGlucHV0LlxuICAgKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbmFsLiBBIHNldCBvZiBvcHRpb25zIHRoYXQgY29udHJvbHMgdGhlIGJlaGF2aW9yIG9mIG1vZGVsIGV2YWwgc3RlcC5cbiAgICogQHJldHVybnMgQSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gYSBtYXAsIHdoaWNoIHVzZXMgb3V0cHV0IG5hbWVzIGFzIGtleXMgYW5kIE9ubnhWYWx1ZSBhcyBjb3JyZXNwb25kaW5nXG4gICB2YWx1ZXMuXG4gICAqL1xuICBydW5FdmFsU3RlcChmZWVkczogSW5mZXJlbmNlU2Vzc2lvbi5GZWVkc1R5cGUsIG9wdGlvbnM/OiBJbmZlcmVuY2VTZXNzaW9uLlJ1bk9wdGlvbnMpOlxuICAgICAgUHJvbWlzZTxJbmZlcmVuY2VTZXNzaW9uLlJldHVyblR5cGU+O1xuXG4gIC8qKlxuICAgKiBSdW4gYSBzaW5nbGUgZXZhbCBzdGVwIHdpdGggdGhlIGdpdmVuIGlucHV0cyBhbmQgb3B0aW9ucyB1c2luZyB0aGUgZXZhbCBtb2RlbC5cbiAgICpcbiAgICogQHBhcmFtIGZlZWRzIC0gUmVwcmVzZW50YXRpb24gb2YgdGhlIG1vZGVsIGlucHV0LlxuICAgKiBAcGFyYW0gZmV0Y2hlcyAtIFJlcHJlc2VudGF0aW9uIG9mIHRoZSBtb2RlbCBvdXRwdXQuXG4gICAqIGRldGFpbC5cbiAgICogQHBhcmFtIG9wdGlvbnMgLSBPcHRpb25hbC4gQSBzZXQgb2Ygb3B0aW9ucyB0aGF0IGNvbnRyb2xzIHRoZSBiZWhhdmlvciBvZiBtb2RlbCBldmFsIHN0ZXAuXG4gICAqIEByZXR1cm5zIEEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHRvIGEgbWFwLCB3aGljaCB1c2VzIG91dHB1dCBuYW1lcyBhcyBrZXlzIGFuZCBPbm54VmFsdWUgYXMgY29ycmVzcG9uZGluZ1xuICAgdmFsdWVzLlxuICAgKi9cbiAgcnVuRXZhbFN0ZXAoXG4gICAgICBmZWVkczogSW5mZXJlbmNlU2Vzc2lvbi5GZWVkc1R5cGUsIGZldGNoZXM6IEluZmVyZW5jZVNlc3Npb24uRmV0Y2hlc1R5cGUsXG4gICAgICBvcHRpb25zPzogSW5mZXJlbmNlU2Vzc2lvbi5SdW5PcHRpb25zKTogUHJvbWlzZTxJbmZlcmVuY2VTZXNzaW9uLlJldHVyblR5cGU+O1xuXG4gIC8vICNlbmRyZWdpb25cblxuICAvLyAjcmVnaW9uIGNvcHkgcGFyYW1ldGVyc1xuXG4gIC8qKlxuICAgKiBSZXRyaWV2ZXMgdGhlIHNpemUgb2YgYWxsIHBhcmFtZXRlcnMgZm9yIHRoZSB0cmFpbmluZyBzdGF0ZS4gQ2FsY3VsYXRlcyB0aGUgdG90YWwgbnVtYmVyIG9mIHByaW1pdGl2ZSAoZGF0YXR5cGUgb2ZcbiAgICogdGhlIHBhcmFtZXRlcnMpIGVsZW1lbnRzIG9mIGFsbCB0aGUgcGFyYW1ldGVycyBpbiB0aGUgdHJhaW5pbmcgc3RhdGUuXG4gICAqXG4gICAqIEBwYXJhbSB0cmFpbmFibGVPbmx5IC0gV2hlbiBzZXQgdG8gdHJ1ZSwgdGhlIHNpemUgaXMgY2FsY3VsYXRlZCBmb3IgdHJhaW5hYmxlIHBhcmFtcyBvbmx5LiBEZWZhdWx0IHZhbHVlIGlzIHRydWUuXG4gICAqL1xuICBnZXRQYXJhbWV0ZXJzU2l6ZSh0cmFpbmFibGVPbmx5OiBib29sZWFuKTogUHJvbWlzZTxudW1iZXI+O1xuXG4gIC8qKlxuICAgKiBDb3BpZXMgcGFyYW1ldGVyIHZhbHVlcyBmcm9tIHRoZSBnaXZlbiBhcnJheSB0byB0aGUgdHJhaW5pbmcgc3RhdGUuIEN1cnJlbnRseSwgb25seSBzdXBwb3J0aW5nIG1vZGVscyB3aXRoXG4gICAqIHBhcmFtZXRlcnMgb2YgdHlwZSBGbG9hdDMyLlxuICAgKlxuICAgKiBAcGFyYW0gYnVmZmVyIC0gRmxvYXQzMiBidWZmZXIgY29udGFpbmluZyBwYXJhbWV0ZXJzIGNvbnZlcnRlZCB0byBhIFVpbnQ4QXJyYXkuXG4gICAqIEBwYXJhbSB0cmFpbmFibGVPbmx5IC0gVHJ1ZSBpZiB0cmFpbmFibGUgcGFyYW1ldGVycyBvbmx5IHRvIGJlIG1vZGlmaWVkLCBmYWxzZSBvdGhlcndpc2UuIERlZmF1bHQgdmFsdWUgaXMgdHJ1ZS5cbiAgICovXG4gIGxvYWRQYXJhbWV0ZXJzQnVmZmVyKGFycmF5OiBVaW50OEFycmF5LCB0cmFpbmFibGVPbmx5OiBib29sZWFuKTogUHJvbWlzZTx2b2lkPjtcblxuICAvKipcbiAgICogQ29waWVzIHRoZSBtb2RlbCBwYXJhbWV0ZXJzIHRvIGEgY29udGlndW91cyBidWZmZXIuIFVzdWFsbHkgdXNlZCBpbiB0aGUgY29udGV4dCBvZiBGZWRlcmF0ZWQgTGVhcm5pbmcuXG4gICAqIEN1cnJlbnRseSwgb25seSBzdXBwb3J0aW5nIG1vZGVscyB3aXRoIHBhcmFtZXRlcnMgb2YgdHlwZSBGbG9hdDMyLlxuICAgKlxuICAgKiBAcGFyYW0gdHJhaW5hYmxlT25seSAtIFdoZW4gc2V0IHRvIHRydWUsIG9ubHkgdHJhaW5hYmxlIHBhcmFtZXRlcnMgYXJlIGNvcGllZC4gVHJhaW5hYmxlIHBhcmFtZXRlcnMgYXJlIHBhcmFtZXRlcnNcbiAgICogZm9yIHdoaWNoIHJlcXVpcmVzX2dyYWQgaXMgc2V0IHRvIHRydWUuIERlZmF1bHQgdmFsdWUgaXMgdHJ1ZS5cbiAgICogQHJldHVybnMgQSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gYSBGbG9hdDMyIE9ubnhWYWx1ZSBvZiB0aGUgcmVxdWVzdGVkIHBhcmFtZXRlcnMuXG4gICAqL1xuICBnZXRDb250aWd1b3VzUGFyYW1ldGVycyh0cmFpbmFibGVPbmx5OiBib29sZWFuKTogUHJvbWlzZTxPbm54VmFsdWU+O1xuICAvLyAjZW5kcmVnaW9uXG5cbiAgLy8gI3JlZ2lvbiByZWxlYXNlKClcblxuICAvKipcbiAgICogUmVsZWFzZSB0aGUgaW5mZXJlbmNlIHNlc3Npb24gYW5kIHRoZSB1bmRlcmx5aW5nIHJlc291cmNlcy5cbiAgICovXG4gIHJlbGVhc2UoKTogUHJvbWlzZTx2b2lkPjtcbiAgLy8gI2VuZHJlZ2lvblxuXG4gIC8vICNyZWdpb24gbWV0YWRhdGFcblxuICAvKipcbiAgICogR2V0IGlucHV0IG5hbWVzIG9mIHRoZSBsb2FkZWQgdHJhaW5pbmcgbW9kZWwuXG4gICAqL1xuICByZWFkb25seSB0cmFpbmluZ0lucHV0TmFtZXM6IHJlYWRvbmx5IHN0cmluZ1tdO1xuXG4gIC8qKlxuICAgKiBHZXQgb3V0cHV0IG5hbWVzIG9mIHRoZSBsb2FkZWQgdHJhaW5pbmcgbW9kZWwuXG4gICAqL1xuICByZWFkb25seSB0cmFpbmluZ091dHB1dE5hbWVzOiByZWFkb25seSBzdHJpbmdbXTtcblxuICAvKipcbiAgICogR2V0IGlucHV0IG5hbWVzIG9mIHRoZSBsb2FkZWQgZXZhbCBtb2RlbC4gSXMgYW4gZW1wdHkgYXJyYXkgaWYgbm8gZXZhbCBtb2RlbCBpcyBsb2FkZWQuXG4gICAqL1xuICByZWFkb25seSBldmFsSW5wdXROYW1lczogcmVhZG9ubHkgc3RyaW5nW107XG5cbiAgLyoqXG4gICAqIEdldCBvdXRwdXQgbmFtZXMgb2YgdGhlIGxvYWRlZCBldmFsIG1vZGVsLiBJcyBhbiBlbXB0eSBhcnJheSBpZiBubyBldmFsIG1vZGVsIGlzIGxvYWRlZC5cbiAgICovXG4gIHJlYWRvbmx5IGV2YWxPdXRwdXROYW1lczogcmVhZG9ubHkgc3RyaW5nW107XG5cbiAgLy8gI2VuZHJlZ2lvblxufVxuXG4vKipcbiAqIFJlcHJlc2VudHMgdGhlIG9wdGlvbmFsIHBhcmFtZXRlcnMgdGhhdCBjYW4gYmUgcGFzc2VkIGludG8gdGhlIFRyYWluaW5nU2Vzc2lvbkZhY3RvcnkuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVHJhaW5pbmdTZXNzaW9uQ3JlYXRlT3B0aW9ucyB7XG4gIC8qKlxuICAgKiBVUkkgb3IgYnVmZmVyIGZvciBhIC5ja3B0IGZpbGUgdGhhdCBjb250YWlucyB0aGUgY2hlY2twb2ludCBmb3IgdGhlIHRyYWluaW5nIG1vZGVsLlxuICAgKi9cbiAgY2hlY2twb2ludFN0YXRlOiBUcmFpbmluZ1Nlc3Npb24uVVJJb3JCdWZmZXI7XG4gIC8qKlxuICAgKiBVUkkgb3IgYnVmZmVyIGZvciB0aGUgLm9ubnggdHJhaW5pbmcgZmlsZS5cbiAgICovXG4gIHRyYWluTW9kZWw6IFRyYWluaW5nU2Vzc2lvbi5VUklvckJ1ZmZlcjtcbiAgLyoqXG4gICAqIE9wdGlvbmFsLiBVUkkgb3IgYnVmZmVyIGZvciB0aGUgLm9ubnggb3B0aW1pemVyIG1vZGVsIGZpbGUuXG4gICAqL1xuICBvcHRpbWl6ZXJNb2RlbD86IFRyYWluaW5nU2Vzc2lvbi5VUklvckJ1ZmZlcjtcbiAgLyoqXG4gICAqIE9wdGlvbmFsLiBVUkkgb3IgYnVmZmVyIGZvciB0aGUgLm9ubnggZXZhbCBtb2RlbCBmaWxlLlxuICAgKi9cbiAgZXZhbE1vZGVsPzogVHJhaW5pbmdTZXNzaW9uLlVSSW9yQnVmZmVyO1xufVxuXG4vKipcbiAqIERlZmluZXMgbWV0aG9kIG92ZXJsb2FkIHBvc3NpYmlsaXRpZXMgZm9yIGNyZWF0aW5nIGEgVHJhaW5pbmdTZXNzaW9uLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFRyYWluaW5nU2Vzc2lvbkZhY3Rvcnkge1xuICAvLyAjcmVnaW9uIGNyZWF0ZSgpXG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgVHJhaW5pbmdTZXNzaW9uIGFuZCBhc3luY2hyb25vdXNseSBsb2FkcyBhbnkgbW9kZWxzIHBhc3NlZCBpbiB0aHJvdWdoIHRyYWluaW5nT3B0aW9uc1xuICAgKlxuICAgKiBAcGFyYW0gdHJhaW5pbmdPcHRpb25zIHNwZWNpZnkgbW9kZWxzIGFuZCBjaGVja3BvaW50cyB0byBsb2FkIGludG8gdGhlIFRyYWluaW5nIFNlc3Npb25cbiAgICogQHBhcmFtIHNlc3Npb25PcHRpb25zIHNwZWNpZnkgY29uZmlndXJhdGlvbiBmb3IgdHJhaW5pbmcgc2Vzc2lvbiBiZWhhdmlvclxuICAgKlxuICAgKiBAcmV0dXJucyBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gYSBUcmFpbmluZ1Nlc3Npb24gb2JqZWN0XG4gICAqL1xuICBjcmVhdGUodHJhaW5pbmdPcHRpb25zOiBUcmFpbmluZ1Nlc3Npb25DcmVhdGVPcHRpb25zLCBzZXNzaW9uT3B0aW9ucz86IEluZmVyZW5jZVNlc3Npb24uU2Vzc2lvbk9wdGlvbnMpOlxuICAgICAgUHJvbWlzZTxUcmFpbmluZ1Nlc3Npb24+O1xuXG4gIC8vICNlbmRyZWdpb25cbn1cblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uYW1pbmctY29udmVudGlvblxuZXhwb3J0IGNvbnN0IFRyYWluaW5nU2Vzc2lvbjogVHJhaW5pbmdTZXNzaW9uRmFjdG9yeSA9IFRyYWluaW5nU2Vzc2lvbkltcGw7XG4iLCAiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5cbi8qKlxuICogIyBPTk5YIFJ1bnRpbWUgSmF2YVNjcmlwdCBBUElcbiAqXG4gKiBPTk5YIFJ1bnRpbWUgSmF2YVNjcmlwdCBBUEkgaXMgYSB1bmlmaWVkIEFQSSBmb3IgYWxsIEphdmFTY3JpcHQgdXNhZ2VzLCBpbmNsdWRpbmcgdGhlIGZvbGxvd2luZyBOUE0gcGFja2FnZXM6XG4gKlxuICogLSBbb25ueHJ1bnRpbWUtbm9kZV0oaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2Uvb25ueHJ1bnRpbWUtbm9kZSlcbiAqIC0gW29ubnhydW50aW1lLXdlYl0oaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2Uvb25ueHJ1bnRpbWUtd2ViKVxuICogLSBbb25ueHJ1bnRpbWUtcmVhY3QtbmF0aXZlXShodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9vbm54cnVudGltZS1yZWFjdC1uYXRpdmUpXG4gKlxuICogU2VlIGFsc286XG4gKiAtIFtHZXQgU3RhcnRlZF0oaHR0cHM6Ly9vbm54cnVudGltZS5haS9kb2NzL2dldC1zdGFydGVkL3dpdGgtamF2YXNjcmlwdC5odG1sKVxuICogLSBbSW5mZXJlbmNlIGV4YW1wbGVzXShodHRwczovL2dpdGh1Yi5jb20vbWljcm9zb2Z0L29ubnhydW50aW1lLWluZmVyZW5jZS1leGFtcGxlcy90cmVlL21haW4vanMpXG4gKlxuICogQHBhY2thZ2VEb2N1bWVudGF0aW9uXG4gKi9cblxuZXhwb3J0ICogZnJvbSAnLi9iYWNrZW5kLmpzJztcbmV4cG9ydCAqIGZyb20gJy4vZW52LmpzJztcbmV4cG9ydCAqIGZyb20gJy4vaW5mZXJlbmNlLXNlc3Npb24uanMnO1xuZXhwb3J0ICogZnJvbSAnLi90ZW5zb3IuanMnO1xuZXhwb3J0ICogZnJvbSAnLi90cmFjZS5qcyc7XG5leHBvcnQgKiBmcm9tICcuL29ubngtdmFsdWUuanMnO1xuZXhwb3J0ICogZnJvbSAnLi90cmFpbmluZy1zZXNzaW9uLmpzJztcbiIsICJleHBvcnQgY29uc3QgY3B1cyA9IHVuZGVmaW5lZDsiLCAiZXhwb3J0IGNvbnN0IGpvaW4gPSB1bmRlZmluZWQ7IiwgImV4cG9ydCBjb25zdCByZWFkRmlsZSA9IHVuZGVmaW5lZDtleHBvcnQgY29uc3QgcmVhZEZpbGVTeW5jID0gdW5kZWZpbmVkO2V4cG9ydCBjb25zdCBjcmVhdGVSZWFkU3RyZWFtID0gdW5kZWZpbmVkOyIsICJleHBvcnQgY29uc3Qgam9pbiA9IHVuZGVmaW5lZDsiLCAiXG52YXIgb3J0V2FzbSA9ICgoKSA9PiB7XG4gIHZhciBfc2NyaXB0RGlyID0gdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyAmJiBkb2N1bWVudC5jdXJyZW50U2NyaXB0ID8gZG9jdW1lbnQuY3VycmVudFNjcmlwdC5zcmMgOiB1bmRlZmluZWQ7XG4gIGlmICh0eXBlb2YgX19maWxlbmFtZSAhPT0gJ3VuZGVmaW5lZCcpIF9zY3JpcHREaXIgPSBfc2NyaXB0RGlyIHx8IF9fZmlsZW5hbWU7XG4gIHJldHVybiAoXG5mdW5jdGlvbihtb2R1bGVBcmcgPSB7fSkge1xuXG52YXIgZT1tb2R1bGVBcmcsayxsO2UucmVhZHk9bmV3IFByb21pc2UoKGEsYik9PntrPWE7bD1ifSk7dmFyIGFhPU9iamVjdC5hc3NpZ24oe30sZSksYmE9XCIuL3RoaXMucHJvZ3JhbVwiLGNhPVwib2JqZWN0XCI9PXR5cGVvZiB3aW5kb3cscT1cImZ1bmN0aW9uXCI9PXR5cGVvZiBpbXBvcnRTY3JpcHRzLGRhPVwib2JqZWN0XCI9PXR5cGVvZiBwcm9jZXNzJiZcIm9iamVjdFwiPT10eXBlb2YgcHJvY2Vzcy52ZXJzaW9ucyYmXCJzdHJpbmdcIj09dHlwZW9mIHByb2Nlc3MudmVyc2lvbnMubm9kZSx2PVwiXCIseCx6LEE7XG5pZihkYSl7dmFyIGZzPXJlcXVpcmUoXCJmc1wiKSxCPXJlcXVpcmUoXCJwYXRoXCIpO3Y9cT9CLmRpcm5hbWUodikrXCIvXCI6X19kaXJuYW1lK1wiL1wiO3g9KGEsYik9PnthPUMoYSk/bmV3IFVSTChhKTpCLm5vcm1hbGl6ZShhKTtyZXR1cm4gZnMucmVhZEZpbGVTeW5jKGEsYj92b2lkIDA6XCJ1dGY4XCIpfTtBPWE9PnthPXgoYSwhMCk7YS5idWZmZXJ8fChhPW5ldyBVaW50OEFycmF5KGEpKTtyZXR1cm4gYX07ej0oYSxiLGMsZD0hMCk9PnthPUMoYSk/bmV3IFVSTChhKTpCLm5vcm1hbGl6ZShhKTtmcy5yZWFkRmlsZShhLGQ/dm9pZCAwOlwidXRmOFwiLChnLGgpPT57Zz9jKGcpOmIoZD9oLmJ1ZmZlcjpoKX0pfTshZS50aGlzUHJvZ3JhbSYmMTxwcm9jZXNzLmFyZ3YubGVuZ3RoJiYoYmE9cHJvY2Vzcy5hcmd2WzFdLnJlcGxhY2UoL1xcXFwvZyxcIi9cIikpO3Byb2Nlc3MuYXJndi5zbGljZSgyKTtlLmluc3BlY3Q9KCk9PlwiW0Vtc2NyaXB0ZW4gTW9kdWxlIG9iamVjdF1cIn1lbHNlIGlmKGNhfHxxKXE/dj1cbnNlbGYubG9jYXRpb24uaHJlZjpcInVuZGVmaW5lZFwiIT10eXBlb2YgZG9jdW1lbnQmJmRvY3VtZW50LmN1cnJlbnRTY3JpcHQmJih2PWRvY3VtZW50LmN1cnJlbnRTY3JpcHQuc3JjKSxfc2NyaXB0RGlyJiYodj1fc2NyaXB0RGlyKSwwIT09di5pbmRleE9mKFwiYmxvYjpcIik/dj12LnN1YnN0cigwLHYucmVwbGFjZSgvWz8jXS4qLyxcIlwiKS5sYXN0SW5kZXhPZihcIi9cIikrMSk6dj1cIlwiLHg9YT0+e3ZhciBiPW5ldyBYTUxIdHRwUmVxdWVzdDtiLm9wZW4oXCJHRVRcIixhLCExKTtiLnNlbmQobnVsbCk7cmV0dXJuIGIucmVzcG9uc2VUZXh0fSxxJiYoQT1hPT57dmFyIGI9bmV3IFhNTEh0dHBSZXF1ZXN0O2Iub3BlbihcIkdFVFwiLGEsITEpO2IucmVzcG9uc2VUeXBlPVwiYXJyYXlidWZmZXJcIjtiLnNlbmQobnVsbCk7cmV0dXJuIG5ldyBVaW50OEFycmF5KGIucmVzcG9uc2UpfSksej0oYSxiLGMpPT57dmFyIGQ9bmV3IFhNTEh0dHBSZXF1ZXN0O2Qub3BlbihcIkdFVFwiLGEsITApO2QucmVzcG9uc2VUeXBlPVxuXCJhcnJheWJ1ZmZlclwiO2Qub25sb2FkPSgpPT57MjAwPT1kLnN0YXR1c3x8MD09ZC5zdGF0dXMmJmQucmVzcG9uc2U/YihkLnJlc3BvbnNlKTpjKCl9O2Qub25lcnJvcj1jO2Quc2VuZChudWxsKX07dmFyIGVhPWNvbnNvbGUubG9nLmJpbmQoY29uc29sZSksRD1jb25zb2xlLmVycm9yLmJpbmQoY29uc29sZSk7T2JqZWN0LmFzc2lnbihlLGFhKTthYT1udWxsO1wib2JqZWN0XCIhPXR5cGVvZiBXZWJBc3NlbWJseSYmRShcIm5vIG5hdGl2ZSB3YXNtIHN1cHBvcnQgZGV0ZWN0ZWRcIik7dmFyIEYsZmE9ITEsRyxILEksSixoYTtcbmZ1bmN0aW9uIGlhKCl7dmFyIGE9Ri5idWZmZXI7ZS5IRUFQOD1HPW5ldyBJbnQ4QXJyYXkoYSk7ZS5IRUFQMTY9bmV3IEludDE2QXJyYXkoYSk7ZS5IRUFQVTg9SD1uZXcgVWludDhBcnJheShhKTtlLkhFQVBVMTY9bmV3IFVpbnQxNkFycmF5KGEpO2UuSEVBUDMyPUk9bmV3IEludDMyQXJyYXkoYSk7ZS5IRUFQVTMyPUo9bmV3IFVpbnQzMkFycmF5KGEpO2UuSEVBUEYzMj1uZXcgRmxvYXQzMkFycmF5KGEpO2UuSEVBUEY2ND1oYT1uZXcgRmxvYXQ2NEFycmF5KGEpfXZhciBLPVtdLEw9W10samE9W10sTT0wLE49bnVsbCxPPW51bGw7ZnVuY3Rpb24gRShhKXthPVwiQWJvcnRlZChcIithK1wiKVwiO0QoYSk7ZmE9ITA7YT1uZXcgV2ViQXNzZW1ibHkuUnVudGltZUVycm9yKGErXCIuIEJ1aWxkIHdpdGggLXNBU1NFUlRJT05TIGZvciBtb3JlIGluZm8uXCIpO2woYSk7dGhyb3cgYTt9XG52YXIga2E9YT0+YS5zdGFydHNXaXRoKFwiZGF0YTphcHBsaWNhdGlvbi9vY3RldC1zdHJlYW07YmFzZTY0LFwiKSxDPWE9PmEuc3RhcnRzV2l0aChcImZpbGU6Ly9cIiksUDtQPVwib3J0LXRyYWluaW5nLXdhc20tc2ltZC53YXNtXCI7aWYoIWthKFApKXt2YXIgbGE9UDtQPWUubG9jYXRlRmlsZT9lLmxvY2F0ZUZpbGUobGEsdik6ditsYX1mdW5jdGlvbiBtYShhKXtpZihBKXJldHVybiBBKGEpO3Rocm93XCJib3RoIGFzeW5jIGFuZCBzeW5jIGZldGNoaW5nIG9mIHRoZSB3YXNtIGZhaWxlZFwiO31cbmZ1bmN0aW9uIG5hKGEpe2lmKGNhfHxxKXtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBmZXRjaCYmIUMoYSkpcmV0dXJuIGZldGNoKGEse2NyZWRlbnRpYWxzOlwic2FtZS1vcmlnaW5cIn0pLnRoZW4oYj0+e2lmKCFiLm9rKXRocm93XCJmYWlsZWQgdG8gbG9hZCB3YXNtIGJpbmFyeSBmaWxlIGF0ICdcIithK1wiJ1wiO3JldHVybiBiLmFycmF5QnVmZmVyKCl9KS5jYXRjaCgoKT0+bWEoYSkpO2lmKHopcmV0dXJuIG5ldyBQcm9taXNlKChiLGMpPT57eihhLGQ9PmIobmV3IFVpbnQ4QXJyYXkoZCkpLGMpfSl9cmV0dXJuIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCk9Pm1hKGEpKX1mdW5jdGlvbiBvYShhLGIsYyl7cmV0dXJuIG5hKGEpLnRoZW4oZD0+V2ViQXNzZW1ibHkuaW5zdGFudGlhdGUoZCxiKSkudGhlbihkPT5kKS50aGVuKGMsZD0+e0QoYGZhaWxlZCB0byBhc3luY2hyb25vdXNseSBwcmVwYXJlIHdhc206ICR7ZH1gKTtFKGQpfSl9XG5mdW5jdGlvbiBwYShhLGIpe3ZhciBjPVA7cmV0dXJuXCJmdW5jdGlvblwiIT10eXBlb2YgV2ViQXNzZW1ibHkuaW5zdGFudGlhdGVTdHJlYW1pbmd8fGthKGMpfHxDKGMpfHxkYXx8XCJmdW5jdGlvblwiIT10eXBlb2YgZmV0Y2g/b2EoYyxhLGIpOmZldGNoKGMse2NyZWRlbnRpYWxzOlwic2FtZS1vcmlnaW5cIn0pLnRoZW4oZD0+V2ViQXNzZW1ibHkuaW5zdGFudGlhdGVTdHJlYW1pbmcoZCxhKS50aGVuKGIsZnVuY3Rpb24oZyl7RChgd2FzbSBzdHJlYW1pbmcgY29tcGlsZSBmYWlsZWQ6ICR7Z31gKTtEKFwiZmFsbGluZyBiYWNrIHRvIEFycmF5QnVmZmVyIGluc3RhbnRpYXRpb25cIik7cmV0dXJuIG9hKGMsYSxiKX0pKX1cbnZhciBRLHFhPXs5OTMxMzY6KGEsYixjLGQpPT57aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIGV8fCFlLlFhKXJldHVybiAxO2E9UihhPj4+MCk7YS5zdGFydHNXaXRoKFwiLi9cIikmJihhPWEuc3Vic3RyaW5nKDIpKTthPWUuUWEuZ2V0KGEpO2lmKCFhKXJldHVybiAyO2I+Pj49MDtjPj4+PTA7aWYoYitjPmEuYnl0ZUxlbmd0aClyZXR1cm4gMzt0cnl7cmV0dXJuIEguc2V0KGEuc3ViYXJyYXkoYixiK2MpLGQ+Pj4wPj4+MCksMH1jYXRjaHtyZXR1cm4gNH19fTtmdW5jdGlvbiByYShhKXt0aGlzLkthPWEtMjQ7dGhpcy5QYT1mdW5jdGlvbihiKXtKW3RoaXMuS2ErND4+PjI+Pj4wXT1ifTt0aGlzLk9hPWZ1bmN0aW9uKGIpe0pbdGhpcy5LYSs4Pj4+Mj4+PjBdPWJ9O3RoaXMuTWE9ZnVuY3Rpb24oYixjKXt0aGlzLk5hKCk7dGhpcy5QYShiKTt0aGlzLk9hKGMpfTt0aGlzLk5hPWZ1bmN0aW9uKCl7Slt0aGlzLkthKzE2Pj4+Mj4+PjBdPTB9fVxudmFyIHNhPTAsdGE9MCx1YT1cInVuZGVmaW5lZFwiIT10eXBlb2YgVGV4dERlY29kZXI/bmV3IFRleHREZWNvZGVyKFwidXRmOFwiKTp2b2lkIDAsdmE9KGEsYixjKT0+e2I+Pj49MDt2YXIgZD1iK2M7Zm9yKGM9YjthW2NdJiYhKGM+PWQpOykrK2M7aWYoMTY8Yy1iJiZhLmJ1ZmZlciYmdWEpcmV0dXJuIHVhLmRlY29kZShhLnN1YmFycmF5KGIsYykpO2ZvcihkPVwiXCI7YjxjOyl7dmFyIGc9YVtiKytdO2lmKGcmMTI4KXt2YXIgaD1hW2IrK10mNjM7aWYoMTkyPT0oZyYyMjQpKWQrPVN0cmluZy5mcm9tQ2hhckNvZGUoKGcmMzEpPDw2fGgpO2Vsc2V7dmFyIG09YVtiKytdJjYzO2c9MjI0PT0oZyYyNDApPyhnJjE1KTw8MTJ8aDw8NnxtOihnJjcpPDwxOHxoPDwxMnxtPDw2fGFbYisrXSY2Mzs2NTUzNj5nP2QrPVN0cmluZy5mcm9tQ2hhckNvZGUoZyk6KGctPTY1NTM2LGQrPVN0cmluZy5mcm9tQ2hhckNvZGUoNTUyOTZ8Zz4+MTAsNTYzMjB8ZyYxMDIzKSl9fWVsc2UgZCs9U3RyaW5nLmZyb21DaGFyQ29kZShnKX1yZXR1cm4gZH0sXG5SPShhLGIpPT4oYT4+Pj0wKT92YShILGEsYik6XCJcIixTPWE9Pntmb3IodmFyIGI9MCxjPTA7YzxhLmxlbmd0aDsrK2Mpe3ZhciBkPWEuY2hhckNvZGVBdChjKTsxMjc+PWQ/YisrOjIwNDc+PWQ/Yis9Mjo1NTI5Njw9ZCYmNTczNDM+PWQ/KGIrPTQsKytjKTpiKz0zfXJldHVybiBifSxUPShhLGIsYyxkKT0+e2M+Pj49MDtpZighKDA8ZCkpcmV0dXJuIDA7dmFyIGc9YztkPWMrZC0xO2Zvcih2YXIgaD0wO2g8YS5sZW5ndGg7KytoKXt2YXIgbT1hLmNoYXJDb2RlQXQoaCk7aWYoNTUyOTY8PW0mJjU3MzQzPj1tKXt2YXIgcj1hLmNoYXJDb2RlQXQoKytoKTttPTY1NTM2KygobSYxMDIzKTw8MTApfHImMTAyM31pZigxMjc+PW0pe2lmKGM+PWQpYnJlYWs7YltjKys+Pj4wXT1tfWVsc2V7aWYoMjA0Nz49bSl7aWYoYysxPj1kKWJyZWFrO2JbYysrPj4+MF09MTkyfG0+PjZ9ZWxzZXtpZig2NTUzNT49bSl7aWYoYysyPj1kKWJyZWFrO2JbYysrPj4+MF09MjI0fG0+PjEyfWVsc2V7aWYoYyszPj1cbmQpYnJlYWs7YltjKys+Pj4wXT0yNDB8bT4+MTg7YltjKys+Pj4wXT0xMjh8bT4+MTImNjN9YltjKys+Pj4wXT0xMjh8bT4+NiY2M31iW2MrKz4+PjBdPTEyOHxtJjYzfX1iW2M+Pj4wXT0wO3JldHVybiBjLWd9LFU9YT0+MD09PWElNCYmKDAhPT1hJTEwMHx8MD09PWElNDAwKSx3YT1bMCwzMSw2MCw5MSwxMjEsMTUyLDE4MiwyMTMsMjQ0LDI3NCwzMDUsMzM1XSx4YT1bMCwzMSw1OSw5MCwxMjAsMTUxLDE4MSwyMTIsMjQzLDI3MywzMDQsMzM0XSxDYT1hPT57dmFyIGI9UyhhKSsxLGM9QmEoYik7YyYmVChhLEgsYyxiKTtyZXR1cm4gY30sVj1bXSxXPXt9LERhPSgpPT57aWYoIVgpe3ZhciBhPXtVU0VSOlwid2ViX3VzZXJcIixMT0dOQU1FOlwid2ViX3VzZXJcIixQQVRIOlwiL1wiLFBXRDpcIi9cIixIT01FOlwiL2hvbWUvd2ViX3VzZXJcIixMQU5HOihcIm9iamVjdFwiPT10eXBlb2YgbmF2aWdhdG9yJiZuYXZpZ2F0b3IubGFuZ3VhZ2VzJiZuYXZpZ2F0b3IubGFuZ3VhZ2VzWzBdfHxcIkNcIikucmVwbGFjZShcIi1cIixcblwiX1wiKStcIi5VVEYtOFwiLF86YmF8fFwiLi90aGlzLnByb2dyYW1cIn0sYjtmb3IoYiBpbiBXKXZvaWQgMD09PVdbYl0/ZGVsZXRlIGFbYl06YVtiXT1XW2JdO3ZhciBjPVtdO2ZvcihiIGluIGEpYy5wdXNoKGAke2J9PSR7YVtiXX1gKTtYPWN9cmV0dXJuIFh9LFgsRWE9W251bGwsW10sW11dLEZhPVszMSwyOSwzMSwzMCwzMSwzMCwzMSwzMSwzMCwzMSwzMCwzMV0sR2E9WzMxLDI4LDMxLDMwLDMxLDMwLDMxLDMxLDMwLDMxLDMwLDMxXTtmdW5jdGlvbiBIYShhKXt2YXIgYj1BcnJheShTKGEpKzEpO1QoYSxiLDAsYi5sZW5ndGgpO3JldHVybiBifVxuZnVuY3Rpb24gSWEoYSxiLGMsZCl7ZnVuY3Rpb24gZyhmLG4scCl7Zm9yKGY9XCJudW1iZXJcIj09dHlwZW9mIGY/Zi50b1N0cmluZygpOmZ8fFwiXCI7Zi5sZW5ndGg8bjspZj1wWzBdK2Y7cmV0dXJuIGZ9ZnVuY3Rpb24gaChmLG4pe3JldHVybiBnKGYsbixcIjBcIil9ZnVuY3Rpb24gbShmLG4pe2Z1bmN0aW9uIHAoeWEpe3JldHVybiAwPnlhPy0xOjA8eWE/MTowfXZhciB5OzA9PT0oeT1wKGYuZ2V0RnVsbFllYXIoKS1uLmdldEZ1bGxZZWFyKCkpKSYmMD09PSh5PXAoZi5nZXRNb250aCgpLW4uZ2V0TW9udGgoKSkpJiYoeT1wKGYuZ2V0RGF0ZSgpLW4uZ2V0RGF0ZSgpKSk7cmV0dXJuIHl9ZnVuY3Rpb24gcihmKXtzd2l0Y2goZi5nZXREYXkoKSl7Y2FzZSAwOnJldHVybiBuZXcgRGF0ZShmLmdldEZ1bGxZZWFyKCktMSwxMSwyOSk7Y2FzZSAxOnJldHVybiBmO2Nhc2UgMjpyZXR1cm4gbmV3IERhdGUoZi5nZXRGdWxsWWVhcigpLDAsMyk7Y2FzZSAzOnJldHVybiBuZXcgRGF0ZShmLmdldEZ1bGxZZWFyKCksXG4wLDIpO2Nhc2UgNDpyZXR1cm4gbmV3IERhdGUoZi5nZXRGdWxsWWVhcigpLDAsMSk7Y2FzZSA1OnJldHVybiBuZXcgRGF0ZShmLmdldEZ1bGxZZWFyKCktMSwxMSwzMSk7Y2FzZSA2OnJldHVybiBuZXcgRGF0ZShmLmdldEZ1bGxZZWFyKCktMSwxMSwzMCl9fWZ1bmN0aW9uIHcoZil7dmFyIG49Zi5HYTtmb3IoZj1uZXcgRGF0ZSgobmV3IERhdGUoZi5IYSsxOTAwLDAsMSkpLmdldFRpbWUoKSk7MDxuOyl7dmFyIHA9Zi5nZXRNb250aCgpLHk9KFUoZi5nZXRGdWxsWWVhcigpKT9GYTpHYSlbcF07aWYobj55LWYuZ2V0RGF0ZSgpKW4tPXktZi5nZXREYXRlKCkrMSxmLnNldERhdGUoMSksMTE+cD9mLnNldE1vbnRoKHArMSk6KGYuc2V0TW9udGgoMCksZi5zZXRGdWxsWWVhcihmLmdldEZ1bGxZZWFyKCkrMSkpO2Vsc2V7Zi5zZXREYXRlKGYuZ2V0RGF0ZSgpK24pO2JyZWFrfX1wPW5ldyBEYXRlKGYuZ2V0RnVsbFllYXIoKSsxLDAsNCk7bj1yKG5ldyBEYXRlKGYuZ2V0RnVsbFllYXIoKSxcbjAsNCkpO3A9cihwKTtyZXR1cm4gMD49bShuLGYpPzA+PW0ocCxmKT9mLmdldEZ1bGxZZWFyKCkrMTpmLmdldEZ1bGxZZWFyKCk6Zi5nZXRGdWxsWWVhcigpLTF9YT4+Pj0wO2I+Pj49MDtjPj4+PTA7ZD4+Pj0wO3ZhciB0PUpbZCs0MD4+PjI+Pj4wXTtkPXtUYTpJW2Q+Pj4yPj4+MF0sU2E6SVtkKzQ+Pj4yPj4+MF0sSWE6SVtkKzg+Pj4yPj4+MF0sTGE6SVtkKzEyPj4+Mj4+PjBdLEphOklbZCsxNj4+PjI+Pj4wXSxIYTpJW2QrMjA+Pj4yPj4+MF0sQmE6SVtkKzI0Pj4+Mj4+PjBdLEdhOklbZCsyOD4+PjI+Pj4wXSxWYTpJW2QrMzI+Pj4yPj4+MF0sUmE6SVtkKzM2Pj4+Mj4+PjBdLFVhOnQ/Uih0KTpcIlwifTtjPVIoYyk7dD17XCIlY1wiOlwiJWEgJWIgJWQgJUg6JU06JVMgJVlcIixcIiVEXCI6XCIlbS8lZC8leVwiLFwiJUZcIjpcIiVZLSVtLSVkXCIsXCIlaFwiOlwiJWJcIixcIiVyXCI6XCIlSTolTTolUyAlcFwiLFwiJVJcIjpcIiVIOiVNXCIsXCIlVFwiOlwiJUg6JU06JVNcIixcIiV4XCI6XCIlbS8lZC8leVwiLFwiJVhcIjpcIiVIOiVNOiVTXCIsXG5cIiVFY1wiOlwiJWNcIixcIiVFQ1wiOlwiJUNcIixcIiVFeFwiOlwiJW0vJWQvJXlcIixcIiVFWFwiOlwiJUg6JU06JVNcIixcIiVFeVwiOlwiJXlcIixcIiVFWVwiOlwiJVlcIixcIiVPZFwiOlwiJWRcIixcIiVPZVwiOlwiJWVcIixcIiVPSFwiOlwiJUhcIixcIiVPSVwiOlwiJUlcIixcIiVPbVwiOlwiJW1cIixcIiVPTVwiOlwiJU1cIixcIiVPU1wiOlwiJVNcIixcIiVPdVwiOlwiJXVcIixcIiVPVVwiOlwiJVVcIixcIiVPVlwiOlwiJVZcIixcIiVPd1wiOlwiJXdcIixcIiVPV1wiOlwiJVdcIixcIiVPeVwiOlwiJXlcIn07Zm9yKHZhciB1IGluIHQpYz1jLnJlcGxhY2UobmV3IFJlZ0V4cCh1LFwiZ1wiKSx0W3VdKTt2YXIgemE9XCJTdW5kYXkgTW9uZGF5IFR1ZXNkYXkgV2VkbmVzZGF5IFRodXJzZGF5IEZyaWRheSBTYXR1cmRheVwiLnNwbGl0KFwiIFwiKSxBYT1cIkphbnVhcnkgRmVicnVhcnkgTWFyY2ggQXByaWwgTWF5IEp1bmUgSnVseSBBdWd1c3QgU2VwdGVtYmVyIE9jdG9iZXIgTm92ZW1iZXIgRGVjZW1iZXJcIi5zcGxpdChcIiBcIik7dD17XCIlYVwiOmY9PnphW2YuQmFdLnN1YnN0cmluZygwLDMpLFwiJUFcIjpmPT56YVtmLkJhXSxcblwiJWJcIjpmPT5BYVtmLkphXS5zdWJzdHJpbmcoMCwzKSxcIiVCXCI6Zj0+QWFbZi5KYV0sXCIlQ1wiOmY9PmgoKGYuSGErMTkwMCkvMTAwfDAsMiksXCIlZFwiOmY9PmgoZi5MYSwyKSxcIiVlXCI6Zj0+ZyhmLkxhLDIsXCIgXCIpLFwiJWdcIjpmPT53KGYpLnRvU3RyaW5nKCkuc3Vic3RyaW5nKDIpLFwiJUdcIjpmPT53KGYpLFwiJUhcIjpmPT5oKGYuSWEsMiksXCIlSVwiOmY9PntmPWYuSWE7MD09Zj9mPTEyOjEyPGYmJihmLT0xMik7cmV0dXJuIGgoZiwyKX0sXCIlalwiOmY9Pntmb3IodmFyIG49MCxwPTA7cDw9Zi5KYS0xO24rPShVKGYuSGErMTkwMCk/RmE6R2EpW3ArK10pO3JldHVybiBoKGYuTGErbiwzKX0sXCIlbVwiOmY9PmgoZi5KYSsxLDIpLFwiJU1cIjpmPT5oKGYuU2EsMiksXCIlblwiOigpPT5cIlxcblwiLFwiJXBcIjpmPT4wPD1mLklhJiYxMj5mLklhP1wiQU1cIjpcIlBNXCIsXCIlU1wiOmY9PmgoZi5UYSwyKSxcIiV0XCI6KCk9PlwiXFx0XCIsXCIldVwiOmY9PmYuQmF8fDcsXCIlVVwiOmY9PmgoTWF0aC5mbG9vcigoZi5HYSs3LWYuQmEpLzcpLFxuMiksXCIlVlwiOmY9Pnt2YXIgbj1NYXRoLmZsb29yKChmLkdhKzctKGYuQmErNiklNykvNyk7Mj49KGYuQmErMzcxLWYuR2EtMiklNyYmbisrO2lmKG4pNTM9PW4mJihwPShmLkJhKzM3MS1mLkdhKSU3LDQ9PXB8fDM9PXAmJlUoZi5IYSl8fChuPTEpKTtlbHNle249NTI7dmFyIHA9KGYuQmErNy1mLkdhLTEpJTc7KDQ9PXB8fDU9PXAmJlUoZi5IYSU0MDAtMSkpJiZuKyt9cmV0dXJuIGgobiwyKX0sXCIld1wiOmY9PmYuQmEsXCIlV1wiOmY9PmgoTWF0aC5mbG9vcigoZi5HYSs3LShmLkJhKzYpJTcpLzcpLDIpLFwiJXlcIjpmPT4oZi5IYSsxOTAwKS50b1N0cmluZygpLnN1YnN0cmluZygyKSxcIiVZXCI6Zj0+Zi5IYSsxOTAwLFwiJXpcIjpmPT57Zj1mLlJhO3ZhciBuPTA8PWY7Zj1NYXRoLmFicyhmKS82MDtyZXR1cm4obj9cIitcIjpcIi1cIikrU3RyaW5nKFwiMDAwMFwiKyhmLzYwKjEwMCtmJTYwKSkuc2xpY2UoLTQpfSxcIiVaXCI6Zj0+Zi5VYSxcIiUlXCI6KCk9PlwiJVwifTtjPWMucmVwbGFjZSgvJSUvZyxcIlxceDAwXFx4MDBcIik7XG5mb3IodSBpbiB0KWMuaW5jbHVkZXModSkmJihjPWMucmVwbGFjZShuZXcgUmVnRXhwKHUsXCJnXCIpLHRbdV0oZCkpKTtjPWMucmVwbGFjZSgvXFwwXFwwL2csXCIlXCIpO3U9SGEoYyk7aWYodS5sZW5ndGg+YilyZXR1cm4gMDtHLnNldCh1LGE+Pj4wKTtyZXR1cm4gdS5sZW5ndGgtMX1cbnZhciBMYT17YTpmdW5jdGlvbihhLGIsYyl7YT4+Pj0wOyhuZXcgcmEoYSkpLk1hKGI+Pj4wLGM+Pj4wKTtzYT1hO3RhKys7dGhyb3cgc2E7fSxlOmZ1bmN0aW9uKCl7cmV0dXJuIDB9LEg6ZnVuY3Rpb24oKXt9LHg6ZnVuY3Rpb24oKXt9LHo6ZnVuY3Rpb24oKXt9LEo6ZnVuY3Rpb24oKXtyZXR1cm4gMH0sRjpmdW5jdGlvbigpe30sQTpmdW5jdGlvbigpe30sRTpmdW5jdGlvbigpe30sZzpmdW5jdGlvbigpe30seTpmdW5jdGlvbigpe30sdjpmdW5jdGlvbigpe30sRzpmdW5jdGlvbigpe30sdzpmdW5jdGlvbigpe30sazooKT0+MSxuOmZ1bmN0aW9uKGEsYixjKXthPWIrMjA5NzE1Mj4+PjA8NDE5NDMwNS0hIWE/KGE+Pj4wKSs0Mjk0OTY3Mjk2KmI6TmFOO2M+Pj49MDthPW5ldyBEYXRlKDFFMyphKTtJW2M+Pj4yPj4+MF09YS5nZXRVVENTZWNvbmRzKCk7SVtjKzQ+Pj4yPj4+MF09YS5nZXRVVENNaW51dGVzKCk7SVtjKzg+Pj4yPj4+MF09YS5nZXRVVENIb3VycygpO0lbYysxMj4+PlxuMj4+PjBdPWEuZ2V0VVRDRGF0ZSgpO0lbYysxNj4+PjI+Pj4wXT1hLmdldFVUQ01vbnRoKCk7SVtjKzIwPj4+Mj4+PjBdPWEuZ2V0VVRDRnVsbFllYXIoKS0xOTAwO0lbYysyND4+PjI+Pj4wXT1hLmdldFVUQ0RheSgpO0lbYysyOD4+PjI+Pj4wXT0oYS5nZXRUaW1lKCktRGF0ZS5VVEMoYS5nZXRVVENGdWxsWWVhcigpLDAsMSwwLDAsMCwwKSkvODY0RTV8MH0sbzpmdW5jdGlvbihhLGIsYyl7YT1iKzIwOTcxNTI+Pj4wPDQxOTQzMDUtISFhPyhhPj4+MCkrNDI5NDk2NzI5NipiOk5hTjtjPj4+PTA7YT1uZXcgRGF0ZSgxRTMqYSk7SVtjPj4+Mj4+PjBdPWEuZ2V0U2Vjb25kcygpO0lbYys0Pj4+Mj4+PjBdPWEuZ2V0TWludXRlcygpO0lbYys4Pj4+Mj4+PjBdPWEuZ2V0SG91cnMoKTtJW2MrMTI+Pj4yPj4+MF09YS5nZXREYXRlKCk7SVtjKzE2Pj4+Mj4+PjBdPWEuZ2V0TW9udGgoKTtJW2MrMjA+Pj4yPj4+MF09YS5nZXRGdWxsWWVhcigpLTE5MDA7SVtjKzI0Pj4+Mj4+PjBdPWEuZ2V0RGF5KCk7XG5JW2MrMjg+Pj4yPj4+MF09KFUoYS5nZXRGdWxsWWVhcigpKT93YTp4YSlbYS5nZXRNb250aCgpXSthLmdldERhdGUoKS0xfDA7SVtjKzM2Pj4+Mj4+PjBdPS0oNjAqYS5nZXRUaW1lem9uZU9mZnNldCgpKTtiPShuZXcgRGF0ZShhLmdldEZ1bGxZZWFyKCksNiwxKSkuZ2V0VGltZXpvbmVPZmZzZXQoKTt2YXIgZD0obmV3IERhdGUoYS5nZXRGdWxsWWVhcigpLDAsMSkpLmdldFRpbWV6b25lT2Zmc2V0KCk7SVtjKzMyPj4+Mj4+PjBdPShiIT1kJiZhLmdldFRpbWV6b25lT2Zmc2V0KCk9PU1hdGgubWluKGQsYikpfDB9LHA6ZnVuY3Rpb24oYSl7YT4+Pj0wO3ZhciBiPW5ldyBEYXRlKElbYSsyMD4+PjI+Pj4wXSsxOTAwLElbYSsxNj4+PjI+Pj4wXSxJW2ErMTI+Pj4yPj4+MF0sSVthKzg+Pj4yPj4+MF0sSVthKzQ+Pj4yPj4+MF0sSVthPj4+Mj4+PjBdLDApLGM9SVthKzMyPj4+Mj4+PjBdLGQ9Yi5nZXRUaW1lem9uZU9mZnNldCgpLGc9KG5ldyBEYXRlKGIuZ2V0RnVsbFllYXIoKSw2LDEpKS5nZXRUaW1lem9uZU9mZnNldCgpLFxuaD0obmV3IERhdGUoYi5nZXRGdWxsWWVhcigpLDAsMSkpLmdldFRpbWV6b25lT2Zmc2V0KCksbT1NYXRoLm1pbihoLGcpOzA+Yz9JW2ErMzI+Pj4yPj4+MF09TnVtYmVyKGchPWgmJm09PWQpOjA8YyE9KG09PWQpJiYoZz1NYXRoLm1heChoLGcpLGIuc2V0VGltZShiLmdldFRpbWUoKSs2RTQqKCgwPGM/bTpnKS1kKSkpO0lbYSsyND4+PjI+Pj4wXT1iLmdldERheSgpO0lbYSsyOD4+PjI+Pj4wXT0oVShiLmdldEZ1bGxZZWFyKCkpP3dhOnhhKVtiLmdldE1vbnRoKCldK2IuZ2V0RGF0ZSgpLTF8MDtJW2E+Pj4yPj4+MF09Yi5nZXRTZWNvbmRzKCk7SVthKzQ+Pj4yPj4+MF09Yi5nZXRNaW51dGVzKCk7SVthKzg+Pj4yPj4+MF09Yi5nZXRIb3VycygpO0lbYSsxMj4+PjI+Pj4wXT1iLmdldERhdGUoKTtJW2ErMTY+Pj4yPj4+MF09Yi5nZXRNb250aCgpO0lbYSsyMD4+PjI+Pj4wXT1iLmdldFllYXIoKTthPWIuZ2V0VGltZSgpO2lzTmFOKGEpPyhJW0phKCk+Pj4yPj4+MF09NjEsYT0tMSk6XG5hLz0xRTM7cmV0dXJuIEthKChRPWEsMTw9K01hdGguYWJzKFEpPzA8UT8rTWF0aC5mbG9vcihRLzQyOTQ5NjcyOTYpPj4+MDp+fitNYXRoLmNlaWwoKFEtKyh+flE+Pj4wKSkvNDI5NDk2NzI5Nik+Pj4wOjApKSxhPj4+MH0sbDpmdW5jdGlvbigpe3JldHVybi01Mn0sbTpmdW5jdGlvbigpe30sdDpmdW5jdGlvbihhLGIsYyl7ZnVuY3Rpb24gZCh3KXtyZXR1cm4odz13LnRvVGltZVN0cmluZygpLm1hdGNoKC9cXCgoW0EtWmEteiBdKylcXCkkLykpP3dbMV06XCJHTVRcIn1jPj4+PTA7dmFyIGc9KG5ldyBEYXRlKS5nZXRGdWxsWWVhcigpLGg9bmV3IERhdGUoZywwLDEpLG09bmV3IERhdGUoZyw2LDEpO2c9aC5nZXRUaW1lem9uZU9mZnNldCgpO3ZhciByPW0uZ2V0VGltZXpvbmVPZmZzZXQoKTtKW2E+Pj4wPj4+Mj4+PjBdPTYwKk1hdGgubWF4KGcscik7SVtiPj4+MD4+PjI+Pj4wXT1OdW1iZXIoZyE9cik7YT1kKGgpO2I9ZChtKTthPUNhKGEpO2I9Q2EoYik7cjxnPyhKW2M+Pj4yPj4+MF09XG5hLEpbYys0Pj4+Mj4+PjBdPWIpOihKW2M+Pj4yPj4+MF09YixKW2MrND4+PjI+Pj4wXT1hKX0sZDooKT0+e0UoXCJcIil9LEI6ZnVuY3Rpb24oYSxiLGMpe2E+Pj49MDtiPj4+PTA7Yz4+Pj0wO1YubGVuZ3RoPTA7Zm9yKHZhciBkO2Q9SFtiKys+Pj4wXTspe3ZhciBnPTEwNSE9ZDtnJj0xMTIhPWQ7Yys9ZyYmYyU4PzQ6MDtWLnB1c2goMTEyPT1kP0pbYz4+PjI+Pj4wXToxMDU9PWQ/SVtjPj4+Mj4+PjBdOmhhW2M+Pj4zPj4+MF0pO2MrPWc/ODo0fXJldHVybiBxYVthXS5hcHBseShudWxsLFYpfSxoOigpPT5EYXRlLm5vdygpLHU6ZnVuY3Rpb24oKXtyZXR1cm4gNDI5NDkwMTc2MH0sYjooKT0+cGVyZm9ybWFuY2Uubm93KCksSTpmdW5jdGlvbihhLGIsYyl7Yj4+Pj0wO3JldHVybiBILmNvcHlXaXRoaW4oYT4+PjA+Pj4wLGI+Pj4wLGIrKGM+Pj4wKT4+PjApfSxzOmZ1bmN0aW9uKGEpe2E+Pj49MDt2YXIgYj1ILmxlbmd0aDtpZig0Mjk0OTAxNzYwPGEpcmV0dXJuITE7Zm9yKHZhciBjPVxuMTs0Pj1jO2MqPTIpe3ZhciBkPWIqKDErLjIvYyk7ZD1NYXRoLm1pbihkLGErMTAwNjYzMjk2KTt2YXIgZz1NYXRoO2Q9TWF0aC5tYXgoYSxkKTthOntnPShnLm1pbi5jYWxsKGcsNDI5NDkwMTc2MCxkKyg2NTUzNi1kJTY1NTM2KSU2NTUzNiktRi5idWZmZXIuYnl0ZUxlbmd0aCs2NTUzNSkvNjU1MzY7dHJ5e0YuZ3JvdyhnKTtpYSgpO3ZhciBoPTE7YnJlYWsgYX1jYXRjaChtKXt9aD12b2lkIDB9aWYoaClyZXR1cm4hMH1yZXR1cm4hMX0sQzpmdW5jdGlvbihhLGIpe2E+Pj49MDtiPj4+PTA7dmFyIGM9MDtEYSgpLmZvckVhY2goKGQsZyk9Pnt2YXIgaD1iK2M7Zz1KW2ErNCpnPj4+Mj4+PjBdPWg7Zm9yKGg9MDtoPGQubGVuZ3RoOysraClHW2crKz4+PjA+Pj4wXT1kLmNoYXJDb2RlQXQoaCk7R1tnPj4+MD4+PjBdPTA7Yys9ZC5sZW5ndGgrMX0pO3JldHVybiAwfSxEOmZ1bmN0aW9uKGEsYil7YT4+Pj0wO2I+Pj49MDt2YXIgYz1EYSgpO0pbYT4+PjI+Pj4wXT1jLmxlbmd0aDt2YXIgZD1cbjA7Yy5mb3JFYWNoKGc9PmQrPWcubGVuZ3RoKzEpO0pbYj4+PjI+Pj4wXT1kO3JldHVybiAwfSxmOigpPT41MixqOmZ1bmN0aW9uKCl7cmV0dXJuIDUyfSxxOmZ1bmN0aW9uKCl7cmV0dXJuIDcwfSxpOmZ1bmN0aW9uKGEsYixjLGQpe2I+Pj49MDtjPj4+PTA7ZD4+Pj0wO2Zvcih2YXIgZz0wLGg9MDtoPGM7aCsrKXt2YXIgbT1KW2I+Pj4yPj4+MF0scj1KW2IrND4+PjI+Pj4wXTtiKz04O2Zvcih2YXIgdz0wO3c8cjt3Kyspe3ZhciB0PUhbbSt3Pj4+MF0sdT1FYVthXTswPT09dHx8MTA9PT10PygoMT09PWE/ZWE6RCkodmEodSwwKSksdS5sZW5ndGg9MCk6dS5wdXNoKHQpfWcrPXJ9SltkPj4+Mj4+PjBdPWc7cmV0dXJuIDB9LHI6SWEsYzpmdW5jdGlvbihhLGIsYyxkKXtyZXR1cm4gSWEoYT4+PjAsYj4+PjAsYz4+PjAsZD4+PjApfX0sWT1mdW5jdGlvbigpe2Z1bmN0aW9uIGEoYyl7WT1jLmV4cG9ydHM7WT1NYSgpO0Y9WS5LO2lhKCk7TC51bnNoaWZ0KFkuTCk7TS0tOzA9PU0mJihudWxsIT09XG5OJiYoY2xlYXJJbnRlcnZhbChOKSxOPW51bGwpLE8mJihjPU8sTz1udWxsLGMoKSkpO3JldHVybiBZfXZhciBiPXthOkxhfTtNKys7aWYoZS5pbnN0YW50aWF0ZVdhc20pdHJ5e3JldHVybiBlLmluc3RhbnRpYXRlV2FzbShiLGEpfWNhdGNoKGMpe0QoYE1vZHVsZS5pbnN0YW50aWF0ZVdhc20gY2FsbGJhY2sgZmFpbGVkIHdpdGggZXJyb3I6ICR7Y31gKSxsKGMpfXBhKGIsZnVuY3Rpb24oYyl7YShjLmluc3RhbmNlKX0pLmNhdGNoKGwpO3JldHVybnt9fSgpO2UuX09ydEluaXQ9KGEsYik9PihlLl9PcnRJbml0PVkuTSkoYSxiKTtlLl9PcnRHZXRMYXN0RXJyb3I9KGEsYik9PihlLl9PcnRHZXRMYXN0RXJyb3I9WS5OKShhLGIpO2UuX09ydENyZWF0ZVNlc3Npb25PcHRpb25zPShhLGIsYyxkLGcsaCxtLHIsdyx0KT0+KGUuX09ydENyZWF0ZVNlc3Npb25PcHRpb25zPVkuTykoYSxiLGMsZCxnLGgsbSxyLHcsdCk7XG5lLl9PcnRBcHBlbmRFeGVjdXRpb25Qcm92aWRlcj0oYSxiKT0+KGUuX09ydEFwcGVuZEV4ZWN1dGlvblByb3ZpZGVyPVkuUCkoYSxiKTtlLl9PcnRBZGRGcmVlRGltZW5zaW9uT3ZlcnJpZGU9KGEsYixjKT0+KGUuX09ydEFkZEZyZWVEaW1lbnNpb25PdmVycmlkZT1ZLlEpKGEsYixjKTtlLl9PcnRBZGRTZXNzaW9uQ29uZmlnRW50cnk9KGEsYixjKT0+KGUuX09ydEFkZFNlc3Npb25Db25maWdFbnRyeT1ZLlIpKGEsYixjKTtlLl9PcnRSZWxlYXNlU2Vzc2lvbk9wdGlvbnM9YT0+KGUuX09ydFJlbGVhc2VTZXNzaW9uT3B0aW9ucz1ZLlMpKGEpO2UuX09ydENyZWF0ZVNlc3Npb249KGEsYixjKT0+KGUuX09ydENyZWF0ZVNlc3Npb249WS5UKShhLGIsYyk7ZS5fT3J0UmVsZWFzZVNlc3Npb249YT0+KGUuX09ydFJlbGVhc2VTZXNzaW9uPVkuVSkoYSk7ZS5fT3J0R2V0SW5wdXRPdXRwdXRDb3VudD0oYSxiLGMpPT4oZS5fT3J0R2V0SW5wdXRPdXRwdXRDb3VudD1ZLlYpKGEsYixjKTtcbmUuX09ydEdldElucHV0TmFtZT0oYSxiKT0+KGUuX09ydEdldElucHV0TmFtZT1ZLlcpKGEsYik7ZS5fT3J0R2V0T3V0cHV0TmFtZT0oYSxiKT0+KGUuX09ydEdldE91dHB1dE5hbWU9WS5YKShhLGIpO2UuX09ydEZyZWU9YT0+KGUuX09ydEZyZWU9WS5ZKShhKTtlLl9PcnRDcmVhdGVUZW5zb3I9KGEsYixjLGQsZyxoKT0+KGUuX09ydENyZWF0ZVRlbnNvcj1ZLlopKGEsYixjLGQsZyxoKTtlLl9PcnRHZXRUZW5zb3JEYXRhPShhLGIsYyxkLGcpPT4oZS5fT3J0R2V0VGVuc29yRGF0YT1ZLl8pKGEsYixjLGQsZyk7ZS5fT3J0UmVsZWFzZVRlbnNvcj1hPT4oZS5fT3J0UmVsZWFzZVRlbnNvcj1ZLiQpKGEpO2UuX09ydENyZWF0ZVJ1bk9wdGlvbnM9KGEsYixjLGQpPT4oZS5fT3J0Q3JlYXRlUnVuT3B0aW9ucz1ZLmFhKShhLGIsYyxkKTtlLl9PcnRBZGRSdW5Db25maWdFbnRyeT0oYSxiLGMpPT4oZS5fT3J0QWRkUnVuQ29uZmlnRW50cnk9WS5iYSkoYSxiLGMpO1xuZS5fT3J0UmVsZWFzZVJ1bk9wdGlvbnM9YT0+KGUuX09ydFJlbGVhc2VSdW5PcHRpb25zPVkuY2EpKGEpO2UuX09ydENyZWF0ZUJpbmRpbmc9YT0+KGUuX09ydENyZWF0ZUJpbmRpbmc9WS5kYSkoYSk7ZS5fT3J0QmluZElucHV0PShhLGIsYyk9PihlLl9PcnRCaW5kSW5wdXQ9WS5lYSkoYSxiLGMpO2UuX09ydEJpbmRPdXRwdXQ9KGEsYixjLGQpPT4oZS5fT3J0QmluZE91dHB1dD1ZLmZhKShhLGIsYyxkKTtlLl9PcnRDbGVhckJvdW5kT3V0cHV0cz1hPT4oZS5fT3J0Q2xlYXJCb3VuZE91dHB1dHM9WS5nYSkoYSk7ZS5fT3J0UmVsZWFzZUJpbmRpbmc9YT0+KGUuX09ydFJlbGVhc2VCaW5kaW5nPVkuaGEpKGEpO2UuX09ydFJ1bldpdGhCaW5kaW5nPShhLGIsYyxkLGcpPT4oZS5fT3J0UnVuV2l0aEJpbmRpbmc9WS5pYSkoYSxiLGMsZCxnKTtlLl9PcnRSdW49KGEsYixjLGQsZyxoLG0scik9PihlLl9PcnRSdW49WS5qYSkoYSxiLGMsZCxnLGgsbSxyKTtcbmUuX09ydEVuZFByb2ZpbGluZz1hPT4oZS5fT3J0RW5kUHJvZmlsaW5nPVkua2EpKGEpO2UuX09ydFRyYWluaW5nTG9hZENoZWNrcG9pbnQ9KGEsYik9PihlLl9PcnRUcmFpbmluZ0xvYWRDaGVja3BvaW50PVkubGEpKGEsYik7ZS5fT3J0VHJhaW5pbmdSZWxlYXNlQ2hlY2twb2ludD1hPT4oZS5fT3J0VHJhaW5pbmdSZWxlYXNlQ2hlY2twb2ludD1ZLm1hKShhKTtlLl9PcnRUcmFpbmluZ0NyZWF0ZVNlc3Npb249KGEsYixjLGQsZyxoLG0scik9PihlLl9PcnRUcmFpbmluZ0NyZWF0ZVNlc3Npb249WS5uYSkoYSxiLGMsZCxnLGgsbSxyKTtlLl9PcnRUcmFpbmluZ0xhenlSZXNldEdyYWQ9YT0+KGUuX09ydFRyYWluaW5nTGF6eVJlc2V0R3JhZD1ZLm9hKShhKTtlLl9PcnRUcmFpbmluZ1J1blRyYWluU3RlcD0oYSxiLGMsZCxnLGgpPT4oZS5fT3J0VHJhaW5pbmdSdW5UcmFpblN0ZXA9WS5wYSkoYSxiLGMsZCxnLGgpO1xuZS5fT3J0VHJhaW5pbmdPcHRpbWl6ZXJTdGVwPShhLGIpPT4oZS5fT3J0VHJhaW5pbmdPcHRpbWl6ZXJTdGVwPVkucWEpKGEsYik7ZS5fT3J0VHJhaW5pbmdFdmFsU3RlcD0oYSxiLGMsZCxnLGgpPT4oZS5fT3J0VHJhaW5pbmdFdmFsU3RlcD1ZLnJhKShhLGIsYyxkLGcsaCk7ZS5fT3J0VHJhaW5pbmdHZXRQYXJhbWV0ZXJzU2l6ZT0oYSxiLGMpPT4oZS5fT3J0VHJhaW5pbmdHZXRQYXJhbWV0ZXJzU2l6ZT1ZLnNhKShhLGIsYyk7ZS5fT3J0VHJhaW5pbmdDb3B5UGFyYW1ldGVyc1RvQnVmZmVyPShhLGIsYyxkKT0+KGUuX09ydFRyYWluaW5nQ29weVBhcmFtZXRlcnNUb0J1ZmZlcj1ZLnRhKShhLGIsYyxkKTtlLl9PcnRUcmFpbmluZ0NvcHlQYXJhbWV0ZXJzRnJvbUJ1ZmZlcj0oYSxiLGMsZCk9PihlLl9PcnRUcmFpbmluZ0NvcHlQYXJhbWV0ZXJzRnJvbUJ1ZmZlcj1ZLnVhKShhLGIsYyxkKTtcbmUuX09ydFRyYWluaW5nR2V0TW9kZWxJbnB1dE91dHB1dENvdW50PShhLGIsYyxkKT0+KGUuX09ydFRyYWluaW5nR2V0TW9kZWxJbnB1dE91dHB1dENvdW50PVkudmEpKGEsYixjLGQpO2UuX09ydFRyYWluaW5nR2V0TW9kZWxJbnB1dE91dHB1dE5hbWU9KGEsYixjLGQpPT4oZS5fT3J0VHJhaW5pbmdHZXRNb2RlbElucHV0T3V0cHV0TmFtZT1ZLndhKShhLGIsYyxkKTtlLl9PcnRUcmFpbmluZ1JlbGVhc2VTZXNzaW9uPWE9PihlLl9PcnRUcmFpbmluZ1JlbGVhc2VTZXNzaW9uPVkueGEpKGEpO3ZhciBKYT0oKT0+KEphPVkueWEpKCksQmE9ZS5fbWFsbG9jPWE9PihCYT1lLl9tYWxsb2M9WS56YSkoYSk7ZS5fZnJlZT1hPT4oZS5fZnJlZT1ZLkFhKShhKTt2YXIgS2E9YT0+KEthPVkuQ2EpKGEpLE5hPSgpPT4oTmE9WS5EYSkoKSxPYT1hPT4oT2E9WS5FYSkoYSksUGE9YT0+KFBhPVkuRmEpKGEpO1xuZnVuY3Rpb24gTWEoKXt2YXIgYT1ZO2E9T2JqZWN0LmFzc2lnbih7fSxhKTt2YXIgYj1kPT4oKT0+ZCgpPj4+MCxjPWQ9Pmc9PmQoZyk+Pj4wO2EueWE9YihhLnlhKTthLnphPWMoYS56YSk7YS5EYT1iKGEuRGEpO2EuRmE9YyhhLkZhKTtyZXR1cm4gYX1lLnN0YWNrQWxsb2M9UGE7ZS5zdGFja1NhdmU9TmE7ZS5zdGFja1Jlc3RvcmU9T2E7ZS5VVEY4VG9TdHJpbmc9UjtlLnN0cmluZ1RvVVRGOD0oYSxiLGMpPT5UKGEsSCxiLGMpO2UubGVuZ3RoQnl0ZXNVVEY4PVM7dmFyIFo7Tz1mdW5jdGlvbiBRYSgpe1p8fFJhKCk7Wnx8KE89UWEpfTtcbmZ1bmN0aW9uIFJhKCl7aWYoISgwPE0pKXtpZihlLnByZVJ1bilmb3IoXCJmdW5jdGlvblwiPT10eXBlb2YgZS5wcmVSdW4mJihlLnByZVJ1bj1bZS5wcmVSdW5dKTtlLnByZVJ1bi5sZW5ndGg7KXt2YXIgYT1lLnByZVJ1bi5zaGlmdCgpO0sudW5zaGlmdChhKX1mb3IoOzA8Sy5sZW5ndGg7KUsuc2hpZnQoKShlKTtpZighKDA8TXx8Wnx8KFo9ITAsZS5jYWxsZWRSdW49ITAsZmEpKSl7Zm9yKDswPEwubGVuZ3RoOylMLnNoaWZ0KCkoZSk7Zm9yKGsoZSk7MDxqYS5sZW5ndGg7KWphLnNoaWZ0KCkoZSl9fX1SYSgpO1xuXG5cbiAgcmV0dXJuIG1vZHVsZUFyZy5yZWFkeVxufVxuKTtcbn0pKCk7XG47XG5pZiAodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuICBtb2R1bGUuZXhwb3J0cyA9IG9ydFdhc207XG5lbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZVsnYW1kJ10pXG4gIGRlZmluZShbXSwgKCkgPT4gb3J0V2FzbSk7XG4iLCAiIiwgIiIsICJleHBvcnQgY29uc3QgY3B1cyA9IHVuZGVmaW5lZDsiLCAiXG52YXIgb3J0V2FzbVRocmVhZGVkID0gKCgpID0+IHtcbiAgdmFyIF9zY3JpcHREaXIgPSB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnICYmIGRvY3VtZW50LmN1cnJlbnRTY3JpcHQgPyBkb2N1bWVudC5jdXJyZW50U2NyaXB0LnNyYyA6IHVuZGVmaW5lZDtcbiAgaWYgKHR5cGVvZiBfX2ZpbGVuYW1lICE9PSAndW5kZWZpbmVkJykgX3NjcmlwdERpciA9IF9zY3JpcHREaXIgfHwgX19maWxlbmFtZTtcbiAgcmV0dXJuIChcbmZ1bmN0aW9uKG1vZHVsZUFyZyA9IHt9KSB7XG5cbmZ1bmN0aW9uIGFhKCl7ZS5idWZmZXIhPWwuYnVmZmVyJiZtKCk7cmV0dXJuIGx9ZnVuY3Rpb24gbigpe2UuYnVmZmVyIT1sLmJ1ZmZlciYmbSgpO3JldHVybiBiYX1mdW5jdGlvbiBwKCl7ZS5idWZmZXIhPWwuYnVmZmVyJiZtKCk7cmV0dXJuIGNhfWZ1bmN0aW9uIHIoKXtlLmJ1ZmZlciE9bC5idWZmZXImJm0oKTtyZXR1cm4gZGF9ZnVuY3Rpb24gZWEoKXtlLmJ1ZmZlciE9bC5idWZmZXImJm0oKTtyZXR1cm4gZmF9dmFyIHY9bW9kdWxlQXJnLGhhLHg7di5yZWFkeT1uZXcgUHJvbWlzZSgoYSxiKT0+e2hhPWE7eD1ifSk7XG52YXIgaWE9T2JqZWN0LmFzc2lnbih7fSx2KSxqYT1cIi4vdGhpcy5wcm9ncmFtXCIsej0oYSxiKT0+e3Rocm93IGI7fSxrYT1cIm9iamVjdFwiPT10eXBlb2Ygd2luZG93LEE9XCJmdW5jdGlvblwiPT10eXBlb2YgaW1wb3J0U2NyaXB0cyxCPVwib2JqZWN0XCI9PXR5cGVvZiBwcm9jZXNzJiZcIm9iamVjdFwiPT10eXBlb2YgcHJvY2Vzcy52ZXJzaW9ucyYmXCJzdHJpbmdcIj09dHlwZW9mIHByb2Nlc3MudmVyc2lvbnMubm9kZSxEPXYuRU5WSVJPTk1FTlRfSVNfUFRIUkVBRHx8ITEsRT1cIlwiO2Z1bmN0aW9uIGxhKGEpe3JldHVybiB2LmxvY2F0ZUZpbGU/di5sb2NhdGVGaWxlKGEsRSk6RSthfXZhciBtYSxHLEg7XG5pZihCKXt2YXIgZnM9cmVxdWlyZShcImZzXCIpLG5hPXJlcXVpcmUoXCJwYXRoXCIpO0U9QT9uYS5kaXJuYW1lKEUpK1wiL1wiOl9fZGlybmFtZStcIi9cIjttYT0oYixjKT0+e2I9SShiKT9uZXcgVVJMKGIpOm5hLm5vcm1hbGl6ZShiKTtyZXR1cm4gZnMucmVhZEZpbGVTeW5jKGIsYz92b2lkIDA6XCJ1dGY4XCIpfTtIPWI9PntiPW1hKGIsITApO2IuYnVmZmVyfHwoYj1uZXcgVWludDhBcnJheShiKSk7cmV0dXJuIGJ9O0c9KGIsYyxkLGc9ITApPT57Yj1JKGIpP25ldyBVUkwoYik6bmEubm9ybWFsaXplKGIpO2ZzLnJlYWRGaWxlKGIsZz92b2lkIDA6XCJ1dGY4XCIsKGgsayk9PntoP2QoaCk6YyhnP2suYnVmZmVyOmspfSl9OyF2LnRoaXNQcm9ncmFtJiYxPHByb2Nlc3MuYXJndi5sZW5ndGgmJihqYT1wcm9jZXNzLmFyZ3ZbMV0ucmVwbGFjZSgvXFxcXC9nLFwiL1wiKSk7cHJvY2Vzcy5hcmd2LnNsaWNlKDIpO3o9KGIsYyk9Pntwcm9jZXNzLmV4aXRDb2RlPWI7dGhyb3cgYzt9O3YuaW5zcGVjdD0oKT0+XCJbRW1zY3JpcHRlbiBNb2R1bGUgb2JqZWN0XVwiO1xubGV0IGE7dHJ5e2E9cmVxdWlyZShcIndvcmtlcl90aHJlYWRzXCIpfWNhdGNoKGIpe3Rocm93IGNvbnNvbGUuZXJyb3IoJ1RoZSBcIndvcmtlcl90aHJlYWRzXCIgbW9kdWxlIGlzIG5vdCBzdXBwb3J0ZWQgaW4gdGhpcyBub2RlLmpzIGJ1aWxkIC0gcGVyaGFwcyBhIG5ld2VyIHZlcnNpb24gaXMgbmVlZGVkPycpLGI7fWdsb2JhbC5Xb3JrZXI9YS5Xb3JrZXJ9ZWxzZSBpZihrYXx8QSlBP0U9c2VsZi5sb2NhdGlvbi5ocmVmOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBkb2N1bWVudCYmZG9jdW1lbnQuY3VycmVudFNjcmlwdCYmKEU9ZG9jdW1lbnQuY3VycmVudFNjcmlwdC5zcmMpLCh0eXBlb2YgX3NjcmlwdERpciAhPT0gXCJ1bmRlZmluZWRcIiAmJiBfc2NyaXB0RGlyKSYmKEU9X3NjcmlwdERpciksMCE9PUUuaW5kZXhPZihcImJsb2I6XCIpP0U9RS5zdWJzdHIoMCxFLnJlcGxhY2UoL1s/I10uKi8sXCJcIikubGFzdEluZGV4T2YoXCIvXCIpKzEpOkU9XCJcIixCfHwobWE9YT0+e3ZhciBiPW5ldyBYTUxIdHRwUmVxdWVzdDtiLm9wZW4oXCJHRVRcIixhLCExKTtiLnNlbmQobnVsbCk7XG5yZXR1cm4gYi5yZXNwb25zZVRleHR9LEEmJihIPWE9Pnt2YXIgYj1uZXcgWE1MSHR0cFJlcXVlc3Q7Yi5vcGVuKFwiR0VUXCIsYSwhMSk7Yi5yZXNwb25zZVR5cGU9XCJhcnJheWJ1ZmZlclwiO2Iuc2VuZChudWxsKTtyZXR1cm4gbmV3IFVpbnQ4QXJyYXkoYi5yZXNwb25zZSl9KSxHPShhLGIsYyk9Pnt2YXIgZD1uZXcgWE1MSHR0cFJlcXVlc3Q7ZC5vcGVuKFwiR0VUXCIsYSwhMCk7ZC5yZXNwb25zZVR5cGU9XCJhcnJheWJ1ZmZlclwiO2Qub25sb2FkPSgpPT57MjAwPT1kLnN0YXR1c3x8MD09ZC5zdGF0dXMmJmQucmVzcG9uc2U/YihkLnJlc3BvbnNlKTpjKCl9O2Qub25lcnJvcj1jO2Quc2VuZChudWxsKX0pO0ImJlwidW5kZWZpbmVkXCI9PXR5cGVvZiBwZXJmb3JtYW5jZSYmKGdsb2JhbC5wZXJmb3JtYW5jZT1yZXF1aXJlKFwicGVyZl9ob29rc1wiKS5wZXJmb3JtYW5jZSk7dmFyIG9hPWNvbnNvbGUubG9nLmJpbmQoY29uc29sZSkscGE9Y29uc29sZS5lcnJvci5iaW5kKGNvbnNvbGUpO1xuQiYmKG9hPSguLi5hKT0+ZnMud3JpdGVTeW5jKDEsYS5qb2luKFwiIFwiKStcIlxcblwiKSxwYT0oLi4uYSk9PmZzLndyaXRlU3luYygyLGEuam9pbihcIiBcIikrXCJcXG5cIikpO3ZhciBxYT1vYSxKPXBhO09iamVjdC5hc3NpZ24odixpYSk7aWE9bnVsbDtcIm9iamVjdFwiIT10eXBlb2YgV2ViQXNzZW1ibHkmJnJhKFwibm8gbmF0aXZlIHdhc20gc3VwcG9ydCBkZXRlY3RlZFwiKTt2YXIgZSxzYSxLPSExLEwsbCxiYSxjYSxkYSxmYTtmdW5jdGlvbiBtKCl7dmFyIGE9ZS5idWZmZXI7di5IRUFQOD1sPW5ldyBJbnQ4QXJyYXkoYSk7di5IRUFQMTY9bmV3IEludDE2QXJyYXkoYSk7di5IRUFQVTg9YmE9bmV3IFVpbnQ4QXJyYXkoYSk7di5IRUFQVTE2PW5ldyBVaW50MTZBcnJheShhKTt2LkhFQVAzMj1jYT1uZXcgSW50MzJBcnJheShhKTt2LkhFQVBVMzI9ZGE9bmV3IFVpbnQzMkFycmF5KGEpO3YuSEVBUEYzMj1uZXcgRmxvYXQzMkFycmF5KGEpO3YuSEVBUEY2ND1mYT1uZXcgRmxvYXQ2NEFycmF5KGEpfVxudmFyIHRhPTE2Nzc3MjE2O1xuaWYoRCllPXYud2FzbU1lbW9yeTtlbHNlIGlmKHYud2FzbU1lbW9yeSllPXYud2FzbU1lbW9yeTtlbHNlIGlmKGU9bmV3IFdlYkFzc2VtYmx5Lk1lbW9yeSh7aW5pdGlhbDp0YS82NTUzNixtYXhpbXVtOjY1NTM2LHNoYXJlZDohMH0pLCEoZS5idWZmZXIgaW5zdGFuY2VvZiBTaGFyZWRBcnJheUJ1ZmZlcikpdGhyb3cgSihcInJlcXVlc3RlZCBhIHNoYXJlZCBXZWJBc3NlbWJseS5NZW1vcnkgYnV0IHRoZSByZXR1cm5lZCBidWZmZXIgaXMgbm90IGEgU2hhcmVkQXJyYXlCdWZmZXIsIGluZGljYXRpbmcgdGhhdCB3aGlsZSB0aGUgYnJvd3NlciBoYXMgU2hhcmVkQXJyYXlCdWZmZXIgaXQgZG9lcyBub3QgaGF2ZSBXZWJBc3NlbWJseSB0aHJlYWRzIHN1cHBvcnQgLSB5b3UgbWF5IG5lZWQgdG8gc2V0IGEgZmxhZ1wiKSxCJiZKKFwiKG9uIG5vZGUgeW91IG1heSBuZWVkOiAtLWV4cGVyaW1lbnRhbC13YXNtLXRocmVhZHMgLS1leHBlcmltZW50YWwtd2FzbS1idWxrLW1lbW9yeSBhbmQvb3IgcmVjZW50IHZlcnNpb24pXCIpLEVycm9yKFwiYmFkIG1lbW9yeVwiKTtcbm0oKTt0YT1lLmJ1ZmZlci5ieXRlTGVuZ3RoO3ZhciB1YT1bXSx2YT1bXSx3YT1bXSxNPTAseGE9bnVsbCxOPW51bGw7ZnVuY3Rpb24geWEoKXtNLS07aWYoMD09TSYmKG51bGwhPT14YSYmKGNsZWFySW50ZXJ2YWwoeGEpLHhhPW51bGwpLE4pKXt2YXIgYT1OO049bnVsbDthKCl9fWZ1bmN0aW9uIHJhKGEpe2E9XCJBYm9ydGVkKFwiK2ErXCIpXCI7SihhKTtLPSEwO0w9MTthPW5ldyBXZWJBc3NlbWJseS5SdW50aW1lRXJyb3IoYStcIi4gQnVpbGQgd2l0aCAtc0FTU0VSVElPTlMgZm9yIG1vcmUgaW5mby5cIik7eChhKTt0aHJvdyBhO312YXIgemE9YT0+YS5zdGFydHNXaXRoKFwiZGF0YTphcHBsaWNhdGlvbi9vY3RldC1zdHJlYW07YmFzZTY0LFwiKSxJPWE9PmEuc3RhcnRzV2l0aChcImZpbGU6Ly9cIiksTztPPVwib3J0LXdhc20tdGhyZWFkZWQud2FzbVwiO3phKE8pfHwoTz1sYShPKSk7XG5mdW5jdGlvbiBBYShhKXtpZihIKXJldHVybiBIKGEpO3Rocm93XCJib3RoIGFzeW5jIGFuZCBzeW5jIGZldGNoaW5nIG9mIHRoZSB3YXNtIGZhaWxlZFwiO31mdW5jdGlvbiBCYShhKXtpZihrYXx8QSl7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgZmV0Y2gmJiFJKGEpKXJldHVybiBmZXRjaChhLHtjcmVkZW50aWFsczpcInNhbWUtb3JpZ2luXCJ9KS50aGVuKGI9PntpZighYi5vayl0aHJvd1wiZmFpbGVkIHRvIGxvYWQgd2FzbSBiaW5hcnkgZmlsZSBhdCAnXCIrYStcIidcIjtyZXR1cm4gYi5hcnJheUJ1ZmZlcigpfSkuY2F0Y2goKCk9PkFhKGEpKTtpZihHKXJldHVybiBuZXcgUHJvbWlzZSgoYixjKT0+e0coYSxkPT5iKG5ldyBVaW50OEFycmF5KGQpKSxjKX0pfXJldHVybiBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpPT5BYShhKSl9XG5mdW5jdGlvbiBDYShhLGIsYyl7cmV0dXJuIEJhKGEpLnRoZW4oZD0+V2ViQXNzZW1ibHkuaW5zdGFudGlhdGUoZCxiKSkudGhlbihkPT5kKS50aGVuKGMsZD0+e0ooYGZhaWxlZCB0byBhc3luY2hyb25vdXNseSBwcmVwYXJlIHdhc206ICR7ZH1gKTtyYShkKX0pfWZ1bmN0aW9uIERhKGEsYil7dmFyIGM9TztyZXR1cm5cImZ1bmN0aW9uXCIhPXR5cGVvZiBXZWJBc3NlbWJseS5pbnN0YW50aWF0ZVN0cmVhbWluZ3x8emEoYyl8fEkoYyl8fEJ8fFwiZnVuY3Rpb25cIiE9dHlwZW9mIGZldGNoP0NhKGMsYSxiKTpmZXRjaChjLHtjcmVkZW50aWFsczpcInNhbWUtb3JpZ2luXCJ9KS50aGVuKGQ9PldlYkFzc2VtYmx5Lmluc3RhbnRpYXRlU3RyZWFtaW5nKGQsYSkudGhlbihiLGZ1bmN0aW9uKGcpe0ooYHdhc20gc3RyZWFtaW5nIGNvbXBpbGUgZmFpbGVkOiAke2d9YCk7SihcImZhbGxpbmcgYmFjayB0byBBcnJheUJ1ZmZlciBpbnN0YW50aWF0aW9uXCIpO3JldHVybiBDYShjLGEsYil9KSl9XG52YXIgUCxFYT17OTIyMzgwOihhLGIsYyxkKT0+e2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiB2fHwhdi5jYilyZXR1cm4gMTthPVEoYT4+PjApO2Euc3RhcnRzV2l0aChcIi4vXCIpJiYoYT1hLnN1YnN0cmluZygyKSk7YT12LmNiLmdldChhKTtpZighYSlyZXR1cm4gMjtiPj4+PTA7Yz4+Pj0wO2Q+Pj49MDtpZihiK2M+YS5ieXRlTGVuZ3RoKXJldHVybiAzO3RyeXtyZXR1cm4gbigpLnNldChhLnN1YmFycmF5KGIsYitjKSxkPj4+MCksMH1jYXRjaHtyZXR1cm4gNH19fTtmdW5jdGlvbiBSKGEpe3RoaXMubmFtZT1cIkV4aXRTdGF0dXNcIjt0aGlzLm1lc3NhZ2U9YFByb2dyYW0gdGVybWluYXRlZCB3aXRoIGV4aXQoJHthfSlgO3RoaXMuc3RhdHVzPWF9XG52YXIgRmE9YT0+e2EudGVybWluYXRlKCk7YS5vbm1lc3NhZ2U9KCk9Pnt9fSxIYT1hPT57MD09Uy5QYS5sZW5ndGgmJihHYSgpLFMuWWEoUy5QYVswXSkpO3ZhciBiPVMuUGEucG9wKCk7aWYoIWIpcmV0dXJuIDY7Uy5RYS5wdXNoKGIpO1MuTWFbYS5PYV09YjtiLk9hPWEuT2E7dmFyIGM9e2NtZDpcInJ1blwiLHN0YXJ0X3JvdXRpbmU6YS5rYixhcmc6YS5oYixwdGhyZWFkX3B0cjphLk9hfTtCJiZiLnVucmVmKCk7Yi5wb3N0TWVzc2FnZShjLGEucWIpO3JldHVybiAwfSxUPTAsSWE9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFRleHREZWNvZGVyP25ldyBUZXh0RGVjb2RlcihcInV0ZjhcIik6dm9pZCAwLEphPShhLGIsYyk9PntiPj4+PTA7dmFyIGQ9YitjO2ZvcihjPWI7YVtjXSYmIShjPj1kKTspKytjO2lmKDE2PGMtYiYmYS5idWZmZXImJklhKXJldHVybiBJYS5kZWNvZGUoYS5idWZmZXIgaW5zdGFuY2VvZiBTaGFyZWRBcnJheUJ1ZmZlcj9hLnNsaWNlKGIsYyk6YS5zdWJhcnJheShiLGMpKTtcbmZvcihkPVwiXCI7YjxjOyl7dmFyIGc9YVtiKytdO2lmKGcmMTI4KXt2YXIgaD1hW2IrK10mNjM7aWYoMTkyPT0oZyYyMjQpKWQrPVN0cmluZy5mcm9tQ2hhckNvZGUoKGcmMzEpPDw2fGgpO2Vsc2V7dmFyIGs9YVtiKytdJjYzO2c9MjI0PT0oZyYyNDApPyhnJjE1KTw8MTJ8aDw8NnxrOihnJjcpPDwxOHxoPDwxMnxrPDw2fGFbYisrXSY2Mzs2NTUzNj5nP2QrPVN0cmluZy5mcm9tQ2hhckNvZGUoZyk6KGctPTY1NTM2LGQrPVN0cmluZy5mcm9tQ2hhckNvZGUoNTUyOTZ8Zz4+MTAsNTYzMjB8ZyYxMDIzKSl9fWVsc2UgZCs9U3RyaW5nLmZyb21DaGFyQ29kZShnKX1yZXR1cm4gZH0sUT0oYSxiKT0+KGE+Pj49MCk/SmEobigpLGEsYik6XCJcIixMYT1hPT57dmFyIGI9S2EoKTthPWEoKTtVKGIpO3JldHVybiBhfTtcbmZ1bmN0aW9uIFYoYSxiKXt2YXIgYz1hcmd1bWVudHMubGVuZ3RoLTIsZD1hcmd1bWVudHM7cmV0dXJuIExhKCgpPT57Zm9yKHZhciBnPU1hKDgqYyksaD1nPj4+MyxrPTA7azxjO2srKyl7dmFyIHQ9ZFsyK2tdO2VhKClbaCtrPj4+MF09dH1yZXR1cm4gTmEoYSxjLGcsYil9KX1mdW5jdGlvbiBPYShhKXtpZihEKXJldHVybiBWKDAsMSxhKTtMPWE7MDxUfHwoUy5sYigpLHYub25FeGl0Py4oYSksSz0hMCk7eihhLG5ldyBSKGEpKX12YXIgUWE9YT0+e0w9YTtpZihEKXRocm93IFBhKGEpLFwidW53aW5kXCI7T2EoYSl9O2Z1bmN0aW9uIFJhKCl7Zm9yKHZhciBhPXYubnVtVGhyZWFkczthLS07KUdhKCk7dWEudW5zaGlmdCgoKT0+e00rKztTYSgoKT0+eWEoKSl9KX1mdW5jdGlvbiBHYSgpe3ZhciBhPWxhKFwib3J0LXdhc20tdGhyZWFkZWQud29ya2VyLmpzXCIpO2E9bmV3IFdvcmtlcihhKTtTLlBhLnB1c2goYSl9XG5mdW5jdGlvbiBTYShhKXtEP2EoKTpQcm9taXNlLmFsbChTLlBhLm1hcChTLllhKSkudGhlbihhKX1cbnZhciBTPXtQYTpbXSxRYTpbXSxiYjpbXSxNYTp7fSxXYSgpe0Q/KFMucmVjZWl2ZU9iamVjdFRyYW5zZmVyPVMuamIsUy50aHJlYWRJbml0VExTPVMuYWIsUy5zZXRFeGl0U3RhdHVzPVMuJGEpOlJhKCl9LCRhOmE9Pkw9YSx0YjpbXCIkdGVybWluYXRlV29ya2VyXCJdLGxiOigpPT57Zm9yKHZhciBhIG9mIFMuUWEpRmEoYSk7Zm9yKGEgb2YgUy5QYSlGYShhKTtTLlBhPVtdO1MuUWE9W107Uy5NYT1bXX0sWmE6YT0+e3ZhciBiPWEuT2E7ZGVsZXRlIFMuTWFbYl07Uy5QYS5wdXNoKGEpO1MuUWEuc3BsaWNlKFMuUWEuaW5kZXhPZihhKSwxKTthLk9hPTA7VGEoYil9LGpiKCl7fSxhYigpe1MuYmIuZm9yRWFjaChhPT5hKCkpfSxZYTphPT5uZXcgUHJvbWlzZShiPT57YS5vbm1lc3NhZ2U9aD0+e2g9aC5kYXRhO3ZhciBrPWguY21kO2lmKGgudGFyZ2V0VGhyZWFkJiZoLnRhcmdldFRocmVhZCE9VygpKXt2YXIgdD1TLk1hW2gudGFyZ2V0VGhyZWFkXTt0P3QucG9zdE1lc3NhZ2UoaCxoLnRyYW5zZmVyTGlzdCk6XG5KKGBJbnRlcm5hbCBlcnJvciEgV29ya2VyIHNlbnQgYSBtZXNzYWdlIFwiJHtrfVwiIHRvIHRhcmdldCBwdGhyZWFkICR7aC50YXJnZXRUaHJlYWR9LCBidXQgdGhhdCB0aHJlYWQgbm8gbG9uZ2VyIGV4aXN0cyFgKX1lbHNlIGlmKFwiY2hlY2tNYWlsYm94XCI9PT1rKVgoKTtlbHNlIGlmKFwic3Bhd25UaHJlYWRcIj09PWspSGEoaCk7ZWxzZSBpZihcImNsZWFudXBUaHJlYWRcIj09PWspUy5aYShTLk1hW2gudGhyZWFkXSk7ZWxzZSBpZihcImtpbGxUaHJlYWRcIj09PWspaD1oLnRocmVhZCxrPVMuTWFbaF0sZGVsZXRlIFMuTWFbaF0sRmEoayksVGEoaCksUy5RYS5zcGxpY2UoUy5RYS5pbmRleE9mKGspLDEpLGsuT2E9MDtlbHNlIGlmKFwiY2FuY2VsVGhyZWFkXCI9PT1rKVMuTWFbaC50aHJlYWRdLnBvc3RNZXNzYWdlKHtjbWQ6XCJjYW5jZWxcIn0pO2Vsc2UgaWYoXCJsb2FkZWRcIj09PWspYS5sb2FkZWQ9ITAsQiYmIWEuT2EmJmEudW5yZWYoKSxiKGEpO2Vsc2UgaWYoXCJhbGVydFwiPT09aylhbGVydChgVGhyZWFkICR7aC50aHJlYWRJZH06ICR7aC50ZXh0fWApO1xuZWxzZSBpZihcInNldGltbWVkaWF0ZVwiPT09aC50YXJnZXQpYS5wb3N0TWVzc2FnZShoKTtlbHNlIGlmKFwiY2FsbEhhbmRsZXJcIj09PWspdltoLmhhbmRsZXJdKC4uLmguYXJncyk7ZWxzZSBrJiZKKGB3b3JrZXIgc2VudCBhbiB1bmtub3duIGNvbW1hbmQgJHtrfWApfTthLm9uZXJyb3I9aD0+e0ooYCR7XCJ3b3JrZXIgc2VudCBhbiBlcnJvciFcIn0gJHtoLmZpbGVuYW1lfToke2gubGluZW5vfTogJHtoLm1lc3NhZ2V9YCk7dGhyb3cgaDt9O0ImJihhLm9uKFwibWVzc2FnZVwiLGg9PmEub25tZXNzYWdlKHtkYXRhOmh9KSksYS5vbihcImVycm9yXCIsaD0+YS5vbmVycm9yKGgpKSk7dmFyIGM9W10sZD1bXCJvbkV4aXRcIl0sZztmb3IoZyBvZiBkKXYuaGFzT3duUHJvcGVydHkoZykmJmMucHVzaChnKTthLnBvc3RNZXNzYWdlKHtjbWQ6XCJsb2FkXCIsaGFuZGxlcnM6Yyx1cmxPckJsb2I6di5tYWluU2NyaXB0VXJsT3JCbG9ifHxfc2NyaXB0RGlyLHdhc21NZW1vcnk6ZSx3YXNtTW9kdWxlOnNhfSl9KX07XG52LlBUaHJlYWQ9Uzt2YXIgVWE9YT0+e2Zvcig7MDxhLmxlbmd0aDspYS5zaGlmdCgpKHYpfTt2LmVzdGFibGlzaFN0YWNrU3BhY2U9KCk9Pnt2YXIgYT1XKCksYj1yKClbYSs1Mj4+PjI+Pj4wXTthPXIoKVthKzU2Pj4+Mj4+PjBdO1ZhKGIsYi1hKTtVKGIpfTtmdW5jdGlvbiBQYShhKXtpZihEKXJldHVybiBWKDEsMCxhKTtRYShhKX12YXIgV2E9W10sWGE7di5pbnZva2VFbnRyeVBvaW50PShhLGIpPT57dmFyIGM9V2FbYV07Y3x8KGE+PVdhLmxlbmd0aCYmKFdhLmxlbmd0aD1hKzEpLFdhW2FdPWM9WGEuZ2V0KGEpKTthPWMoYik7MDxUP1MuJGEoYSk6WWEoYSl9O1xuZnVuY3Rpb24gWmEoYSl7dGhpcy5WYT1hLTI0O3RoaXMuZ2I9ZnVuY3Rpb24oYil7cigpW3RoaXMuVmErND4+PjI+Pj4wXT1ifTt0aGlzLmZiPWZ1bmN0aW9uKGIpe3IoKVt0aGlzLlZhKzg+Pj4yPj4+MF09Yn07dGhpcy5XYT1mdW5jdGlvbihiLGMpe3RoaXMuZWIoKTt0aGlzLmdiKGIpO3RoaXMuZmIoYyl9O3RoaXMuZWI9ZnVuY3Rpb24oKXtyKClbdGhpcy5WYSsxNj4+PjI+Pj4wXT0wfX12YXIgJGE9MCxhYj0wO2Z1bmN0aW9uIGJiKGEsYixjLGQpe3JldHVybiBEP1YoMiwxLGEsYixjLGQpOmNiKGEsYixjLGQpfVxuZnVuY3Rpb24gY2IoYSxiLGMsZCl7YT4+Pj0wO2I+Pj49MDtjPj4+PTA7ZD4+Pj0wO2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBTaGFyZWRBcnJheUJ1ZmZlcilyZXR1cm4gSihcIkN1cnJlbnQgZW52aXJvbm1lbnQgZG9lcyBub3Qgc3VwcG9ydCBTaGFyZWRBcnJheUJ1ZmZlciwgcHRocmVhZHMgYXJlIG5vdCBhdmFpbGFibGUhXCIpLDY7dmFyIGc9W107aWYoRCYmMD09PWcubGVuZ3RoKXJldHVybiBiYihhLGIsYyxkKTthPXtrYjpjLE9hOmEsaGI6ZCxxYjpnfTtyZXR1cm4gRD8oYS5zYj1cInNwYXduVGhyZWFkXCIscG9zdE1lc3NhZ2UoYSxnKSwwKTpIYShhKX1mdW5jdGlvbiBkYihhLGIsYyl7cmV0dXJuIEQ/VigzLDEsYSxiLGMpOjB9ZnVuY3Rpb24gZWIoYSxiKXtpZihEKXJldHVybiBWKDQsMSxhLGIpfVxudmFyIGZiPWE9Pntmb3IodmFyIGI9MCxjPTA7YzxhLmxlbmd0aDsrK2Mpe3ZhciBkPWEuY2hhckNvZGVBdChjKTsxMjc+PWQ/YisrOjIwNDc+PWQ/Yis9Mjo1NTI5Njw9ZCYmNTczNDM+PWQ/KGIrPTQsKytjKTpiKz0zfXJldHVybiBifSxnYj0oYSxiLGMsZCk9PntjPj4+PTA7aWYoISgwPGQpKXJldHVybiAwO3ZhciBnPWM7ZD1jK2QtMTtmb3IodmFyIGg9MDtoPGEubGVuZ3RoOysraCl7dmFyIGs9YS5jaGFyQ29kZUF0KGgpO2lmKDU1Mjk2PD1rJiY1NzM0Mz49ayl7dmFyIHQ9YS5jaGFyQ29kZUF0KCsraCk7az02NTUzNisoKGsmMTAyMyk8PDEwKXx0JjEwMjN9aWYoMTI3Pj1rKXtpZihjPj1kKWJyZWFrO2JbYysrPj4+MF09a31lbHNle2lmKDIwNDc+PWspe2lmKGMrMT49ZClicmVhaztiW2MrKz4+PjBdPTE5MnxrPj42fWVsc2V7aWYoNjU1MzU+PWspe2lmKGMrMj49ZClicmVhaztiW2MrKz4+PjBdPTIyNHxrPj4xMn1lbHNle2lmKGMrMz49ZClicmVhaztiW2MrKz4+PjBdPTI0MHxrPj5cbjE4O2JbYysrPj4+MF09MTI4fGs+PjEyJjYzfWJbYysrPj4+MF09MTI4fGs+PjYmNjN9YltjKys+Pj4wXT0xMjh8ayY2M319YltjPj4+MF09MDtyZXR1cm4gYy1nfSxoYj0oYSxiLGMpPT5nYihhLG4oKSxiLGMpO2Z1bmN0aW9uIGliKGEsYil7aWYoRClyZXR1cm4gVig1LDEsYSxiKX1mdW5jdGlvbiBqYihhLGIsYyl7aWYoRClyZXR1cm4gVig2LDEsYSxiLGMpfWZ1bmN0aW9uIGtiKGEsYixjKXtyZXR1cm4gRD9WKDcsMSxhLGIsYyk6MH1mdW5jdGlvbiBsYihhLGIpe2lmKEQpcmV0dXJuIFYoOCwxLGEsYil9ZnVuY3Rpb24gbWIoYSxiLGMpe2lmKEQpcmV0dXJuIFYoOSwxLGEsYixjKX1mdW5jdGlvbiBuYihhLGIsYyxkKXtpZihEKXJldHVybiBWKDEwLDEsYSxiLGMsZCl9ZnVuY3Rpb24gb2IoYSxiLGMsZCl7aWYoRClyZXR1cm4gVigxMSwxLGEsYixjLGQpfWZ1bmN0aW9uIHBiKGEsYixjLGQpe2lmKEQpcmV0dXJuIFYoMTIsMSxhLGIsYyxkKX1cbmZ1bmN0aW9uIHFiKGEpe2lmKEQpcmV0dXJuIFYoMTMsMSxhKX1mdW5jdGlvbiByYihhLGIpe2lmKEQpcmV0dXJuIFYoMTQsMSxhLGIpfWZ1bmN0aW9uIHNiKGEsYixjKXtpZihEKXJldHVybiBWKDE1LDEsYSxiLGMpfWZ1bmN0aW9uIHRiKGEpe2E+Pj49MDtcImZ1bmN0aW9uXCI9PT10eXBlb2YgQXRvbWljcy5yYiYmKEF0b21pY3MucmIocCgpLGE+Pj4yLGEpLnZhbHVlLnRoZW4oWCksYSs9MTI4LEF0b21pY3Muc3RvcmUocCgpLGE+Pj4yLDEpKX12Ll9fZW1zY3JpcHRlbl90aHJlYWRfbWFpbGJveF9hd2FpdD10Yjt2YXIgWD0oKT0+e3ZhciBhPVcoKTtpZihhJiYodGIoYSksYT11YiwhSykpdHJ5e2lmKGEoKSwhKDA8VCkpdHJ5e0Q/WWEoTCk6UWEoTCl9Y2F0Y2goYil7YiBpbnN0YW5jZW9mIFJ8fFwidW53aW5kXCI9PWJ8fHooMSxiKX19Y2F0Y2goYil7YiBpbnN0YW5jZW9mIFJ8fFwidW53aW5kXCI9PWJ8fHooMSxiKX19O3YuY2hlY2tNYWlsYm94PVg7XG52YXIgdmI9W10sWT1hPT4wPT09YSU0JiYoMCE9PWElMTAwfHwwPT09YSU0MDApLHdiPVswLDMxLDYwLDkxLDEyMSwxNTIsMTgyLDIxMywyNDQsMjc0LDMwNSwzMzVdLHhiPVswLDMxLDU5LDkwLDEyMCwxNTEsMTgxLDIxMiwyNDMsMjczLDMwNCwzMzRdO2Z1bmN0aW9uIHliKGEsYixjLGQsZyxoLGssdCl7cmV0dXJuIEQ/VigxNiwxLGEsYixjLGQsZyxoLGssdCk6LTUyfWZ1bmN0aW9uIHpiKGEsYixjLGQsZyxoLGspe2lmKEQpcmV0dXJuIFYoMTcsMSxhLGIsYyxkLGcsaCxrKX1cbnZhciBCYj1hPT57dmFyIGI9ZmIoYSkrMSxjPUFiKGIpO2MmJmhiKGEsYyxiKTtyZXR1cm4gY30sQ2I9W10sRGI9e30sRmI9KCk9PntpZighRWIpe3ZhciBhPXtVU0VSOlwid2ViX3VzZXJcIixMT0dOQU1FOlwid2ViX3VzZXJcIixQQVRIOlwiL1wiLFBXRDpcIi9cIixIT01FOlwiL2hvbWUvd2ViX3VzZXJcIixMQU5HOihcIm9iamVjdFwiPT10eXBlb2YgbmF2aWdhdG9yJiZuYXZpZ2F0b3IubGFuZ3VhZ2VzJiZuYXZpZ2F0b3IubGFuZ3VhZ2VzWzBdfHxcIkNcIikucmVwbGFjZShcIi1cIixcIl9cIikrXCIuVVRGLThcIixfOmphfHxcIi4vdGhpcy5wcm9ncmFtXCJ9LGI7Zm9yKGIgaW4gRGIpdm9pZCAwPT09RGJbYl0/ZGVsZXRlIGFbYl06YVtiXT1EYltiXTt2YXIgYz1bXTtmb3IoYiBpbiBhKWMucHVzaChgJHtifT0ke2FbYl19YCk7RWI9Y31yZXR1cm4gRWJ9LEViO1xuZnVuY3Rpb24gR2IoYSxiKXtpZihEKXJldHVybiBWKDE4LDEsYSxiKTthPj4+PTA7Yj4+Pj0wO3ZhciBjPTA7RmIoKS5mb3JFYWNoKChkLGcpPT57dmFyIGg9YitjO2c9cigpW2ErNCpnPj4+Mj4+PjBdPWg7Zm9yKGg9MDtoPGQubGVuZ3RoOysraClhYSgpW2crKz4+PjA+Pj4wXT1kLmNoYXJDb2RlQXQoaCk7YWEoKVtnPj4+MD4+PjBdPTA7Yys9ZC5sZW5ndGgrMX0pO3JldHVybiAwfWZ1bmN0aW9uIEtiKGEsYil7aWYoRClyZXR1cm4gVigxOSwxLGEsYik7YT4+Pj0wO2I+Pj49MDt2YXIgYz1GYigpO3IoKVthPj4+Mj4+PjBdPWMubGVuZ3RoO3ZhciBkPTA7Yy5mb3JFYWNoKGc9PmQrPWcubGVuZ3RoKzEpO3IoKVtiPj4+Mj4+PjBdPWQ7cmV0dXJuIDB9ZnVuY3Rpb24gTGIoYSl7cmV0dXJuIEQ/VigyMCwxLGEpOjUyfWZ1bmN0aW9uIE1iKGEsYixjLGQpe3JldHVybiBEP1YoMjEsMSxhLGIsYyxkKTo1Mn1cbmZ1bmN0aW9uIE5iKGEsYixjLGQsZyl7cmV0dXJuIEQ/VigyMiwxLGEsYixjLGQsZyk6NzB9dmFyIE9iPVtudWxsLFtdLFtdXTtmdW5jdGlvbiBQYihhLGIsYyxkKXtpZihEKXJldHVybiBWKDIzLDEsYSxiLGMsZCk7Yj4+Pj0wO2M+Pj49MDtkPj4+PTA7Zm9yKHZhciBnPTAsaD0wO2g8YztoKyspe3ZhciBrPXIoKVtiPj4+Mj4+PjBdLHQ9cigpW2IrND4+PjI+Pj4wXTtiKz04O2Zvcih2YXIgQz0wO0M8dDtDKyspe3ZhciB3PW4oKVtrK0M+Pj4wXSx5PU9iW2FdOzA9PT13fHwxMD09PXc/KCgxPT09YT9xYTpKKShKYSh5LDApKSx5Lmxlbmd0aD0wKTp5LnB1c2godyl9Zys9dH1yKClbZD4+PjI+Pj4wXT1nO3JldHVybiAwfXZhciBRYj1bMzEsMjksMzEsMzAsMzEsMzAsMzEsMzEsMzAsMzEsMzAsMzFdLFJiPVszMSwyOCwzMSwzMCwzMSwzMCwzMSwzMSwzMCwzMSwzMCwzMV07XG5mdW5jdGlvbiBTYihhKXt2YXIgYj1BcnJheShmYihhKSsxKTtnYihhLGIsMCxiLmxlbmd0aCk7cmV0dXJuIGJ9dmFyIFRiPShhLGIpPT57YWEoKS5zZXQoYSxiPj4+MCl9O1xuZnVuY3Rpb24gVWIoYSxiLGMsZCl7ZnVuY3Rpb24gZyhmLHEsdSl7Zm9yKGY9XCJudW1iZXJcIj09dHlwZW9mIGY/Zi50b1N0cmluZygpOmZ8fFwiXCI7Zi5sZW5ndGg8cTspZj11WzBdK2Y7cmV0dXJuIGZ9ZnVuY3Rpb24gaChmLHEpe3JldHVybiBnKGYscSxcIjBcIil9ZnVuY3Rpb24gayhmLHEpe2Z1bmN0aW9uIHUoSGIpe3JldHVybiAwPkhiPy0xOjA8SGI/MTowfXZhciBGOzA9PT0oRj11KGYuZ2V0RnVsbFllYXIoKS1xLmdldEZ1bGxZZWFyKCkpKSYmMD09PShGPXUoZi5nZXRNb250aCgpLXEuZ2V0TW9udGgoKSkpJiYoRj11KGYuZ2V0RGF0ZSgpLXEuZ2V0RGF0ZSgpKSk7cmV0dXJuIEZ9ZnVuY3Rpb24gdChmKXtzd2l0Y2goZi5nZXREYXkoKSl7Y2FzZSAwOnJldHVybiBuZXcgRGF0ZShmLmdldEZ1bGxZZWFyKCktMSwxMSwyOSk7Y2FzZSAxOnJldHVybiBmO2Nhc2UgMjpyZXR1cm4gbmV3IERhdGUoZi5nZXRGdWxsWWVhcigpLDAsMyk7Y2FzZSAzOnJldHVybiBuZXcgRGF0ZShmLmdldEZ1bGxZZWFyKCksXG4wLDIpO2Nhc2UgNDpyZXR1cm4gbmV3IERhdGUoZi5nZXRGdWxsWWVhcigpLDAsMSk7Y2FzZSA1OnJldHVybiBuZXcgRGF0ZShmLmdldEZ1bGxZZWFyKCktMSwxMSwzMSk7Y2FzZSA2OnJldHVybiBuZXcgRGF0ZShmLmdldEZ1bGxZZWFyKCktMSwxMSwzMCl9fWZ1bmN0aW9uIEMoZil7dmFyIHE9Zi5SYTtmb3IoZj1uZXcgRGF0ZSgobmV3IERhdGUoZi5TYSsxOTAwLDAsMSkpLmdldFRpbWUoKSk7MDxxOyl7dmFyIHU9Zi5nZXRNb250aCgpLEY9KFkoZi5nZXRGdWxsWWVhcigpKT9RYjpSYilbdV07aWYocT5GLWYuZ2V0RGF0ZSgpKXEtPUYtZi5nZXREYXRlKCkrMSxmLnNldERhdGUoMSksMTE+dT9mLnNldE1vbnRoKHUrMSk6KGYuc2V0TW9udGgoMCksZi5zZXRGdWxsWWVhcihmLmdldEZ1bGxZZWFyKCkrMSkpO2Vsc2V7Zi5zZXREYXRlKGYuZ2V0RGF0ZSgpK3EpO2JyZWFrfX11PW5ldyBEYXRlKGYuZ2V0RnVsbFllYXIoKSsxLDAsNCk7cT10KG5ldyBEYXRlKGYuZ2V0RnVsbFllYXIoKSxcbjAsNCkpO3U9dCh1KTtyZXR1cm4gMD49ayhxLGYpPzA+PWsodSxmKT9mLmdldEZ1bGxZZWFyKCkrMTpmLmdldEZ1bGxZZWFyKCk6Zi5nZXRGdWxsWWVhcigpLTF9YT4+Pj0wO2I+Pj49MDtjPj4+PTA7ZD4+Pj0wO3ZhciB3PXIoKVtkKzQwPj4+Mj4+PjBdO2Q9e29iOnAoKVtkPj4+Mj4+PjBdLG5iOnAoKVtkKzQ+Pj4yPj4+MF0sVGE6cCgpW2QrOD4+PjI+Pj4wXSxYYTpwKClbZCsxMj4+PjI+Pj4wXSxVYTpwKClbZCsxNj4+PjI+Pj4wXSxTYTpwKClbZCsyMD4+PjI+Pj4wXSxOYTpwKClbZCsyND4+PjI+Pj4wXSxSYTpwKClbZCsyOD4+PjI+Pj4wXSx1YjpwKClbZCszMj4+PjI+Pj4wXSxtYjpwKClbZCszNj4+PjI+Pj4wXSxwYjp3P1Eodyk6XCJcIn07Yz1RKGMpO3c9e1wiJWNcIjpcIiVhICViICVkICVIOiVNOiVTICVZXCIsXCIlRFwiOlwiJW0vJWQvJXlcIixcIiVGXCI6XCIlWS0lbS0lZFwiLFwiJWhcIjpcIiViXCIsXCIlclwiOlwiJUk6JU06JVMgJXBcIixcIiVSXCI6XCIlSDolTVwiLFwiJVRcIjpcIiVIOiVNOiVTXCIsXCIleFwiOlwiJW0vJWQvJXlcIixcblwiJVhcIjpcIiVIOiVNOiVTXCIsXCIlRWNcIjpcIiVjXCIsXCIlRUNcIjpcIiVDXCIsXCIlRXhcIjpcIiVtLyVkLyV5XCIsXCIlRVhcIjpcIiVIOiVNOiVTXCIsXCIlRXlcIjpcIiV5XCIsXCIlRVlcIjpcIiVZXCIsXCIlT2RcIjpcIiVkXCIsXCIlT2VcIjpcIiVlXCIsXCIlT0hcIjpcIiVIXCIsXCIlT0lcIjpcIiVJXCIsXCIlT21cIjpcIiVtXCIsXCIlT01cIjpcIiVNXCIsXCIlT1NcIjpcIiVTXCIsXCIlT3VcIjpcIiV1XCIsXCIlT1VcIjpcIiVVXCIsXCIlT1ZcIjpcIiVWXCIsXCIlT3dcIjpcIiV3XCIsXCIlT1dcIjpcIiVXXCIsXCIlT3lcIjpcIiV5XCJ9O2Zvcih2YXIgeSBpbiB3KWM9Yy5yZXBsYWNlKG5ldyBSZWdFeHAoeSxcImdcIiksd1t5XSk7dmFyIEliPVwiU3VuZGF5IE1vbmRheSBUdWVzZGF5IFdlZG5lc2RheSBUaHVyc2RheSBGcmlkYXkgU2F0dXJkYXlcIi5zcGxpdChcIiBcIiksSmI9XCJKYW51YXJ5IEZlYnJ1YXJ5IE1hcmNoIEFwcmlsIE1heSBKdW5lIEp1bHkgQXVndXN0IFNlcHRlbWJlciBPY3RvYmVyIE5vdmVtYmVyIERlY2VtYmVyXCIuc3BsaXQoXCIgXCIpO3c9e1wiJWFcIjpmPT5JYltmLk5hXS5zdWJzdHJpbmcoMCwzKSxcblwiJUFcIjpmPT5JYltmLk5hXSxcIiViXCI6Zj0+SmJbZi5VYV0uc3Vic3RyaW5nKDAsMyksXCIlQlwiOmY9PkpiW2YuVWFdLFwiJUNcIjpmPT5oKChmLlNhKzE5MDApLzEwMHwwLDIpLFwiJWRcIjpmPT5oKGYuWGEsMiksXCIlZVwiOmY9PmcoZi5YYSwyLFwiIFwiKSxcIiVnXCI6Zj0+QyhmKS50b1N0cmluZygpLnN1YnN0cmluZygyKSxcIiVHXCI6Zj0+QyhmKSxcIiVIXCI6Zj0+aChmLlRhLDIpLFwiJUlcIjpmPT57Zj1mLlRhOzA9PWY/Zj0xMjoxMjxmJiYoZi09MTIpO3JldHVybiBoKGYsMil9LFwiJWpcIjpmPT57Zm9yKHZhciBxPTAsdT0wO3U8PWYuVWEtMTtxKz0oWShmLlNhKzE5MDApP1FiOlJiKVt1KytdKTtyZXR1cm4gaChmLlhhK3EsMyl9LFwiJW1cIjpmPT5oKGYuVWErMSwyKSxcIiVNXCI6Zj0+aChmLm5iLDIpLFwiJW5cIjooKT0+XCJcXG5cIixcIiVwXCI6Zj0+MDw9Zi5UYSYmMTI+Zi5UYT9cIkFNXCI6XCJQTVwiLFwiJVNcIjpmPT5oKGYub2IsMiksXCIldFwiOigpPT5cIlxcdFwiLFwiJXVcIjpmPT5mLk5hfHw3LFwiJVVcIjpmPT5oKE1hdGguZmxvb3IoKGYuUmErXG43LWYuTmEpLzcpLDIpLFwiJVZcIjpmPT57dmFyIHE9TWF0aC5mbG9vcigoZi5SYSs3LShmLk5hKzYpJTcpLzcpOzI+PShmLk5hKzM3MS1mLlJhLTIpJTcmJnErKztpZihxKTUzPT1xJiYodT0oZi5OYSszNzEtZi5SYSklNyw0PT11fHwzPT11JiZZKGYuU2EpfHwocT0xKSk7ZWxzZXtxPTUyO3ZhciB1PShmLk5hKzctZi5SYS0xKSU3Oyg0PT11fHw1PT11JiZZKGYuU2ElNDAwLTEpKSYmcSsrfXJldHVybiBoKHEsMil9LFwiJXdcIjpmPT5mLk5hLFwiJVdcIjpmPT5oKE1hdGguZmxvb3IoKGYuUmErNy0oZi5OYSs2KSU3KS83KSwyKSxcIiV5XCI6Zj0+KGYuU2ErMTkwMCkudG9TdHJpbmcoKS5zdWJzdHJpbmcoMiksXCIlWVwiOmY9PmYuU2ErMTkwMCxcIiV6XCI6Zj0+e2Y9Zi5tYjt2YXIgcT0wPD1mO2Y9TWF0aC5hYnMoZikvNjA7cmV0dXJuKHE/XCIrXCI6XCItXCIpK1N0cmluZyhcIjAwMDBcIisoZi82MCoxMDArZiU2MCkpLnNsaWNlKC00KX0sXCIlWlwiOmY9PmYucGIsXCIlJVwiOigpPT5cIiVcIn07Yz1jLnJlcGxhY2UoLyUlL2csXG5cIlxceDAwXFx4MDBcIik7Zm9yKHkgaW4gdyljLmluY2x1ZGVzKHkpJiYoYz1jLnJlcGxhY2UobmV3IFJlZ0V4cCh5LFwiZ1wiKSx3W3ldKGQpKSk7Yz1jLnJlcGxhY2UoL1xcMFxcMC9nLFwiJVwiKTt5PVNiKGMpO2lmKHkubGVuZ3RoPmIpcmV0dXJuIDA7VGIoeSxhKTtyZXR1cm4geS5sZW5ndGgtMX1TLldhKCk7XG52YXIgVmI9W09hLFBhLGJiLGRiLGViLGliLGpiLGtiLGxiLG1iLG5iLG9iLHBiLHFiLHJiLHNiLHliLHpiLEdiLEtiLExiLE1iLE5iLFBiXSxaYj17YjpmdW5jdGlvbihhLGIsYyl7YT4+Pj0wOyhuZXcgWmEoYSkpLldhKGI+Pj4wLGM+Pj4wKTskYT1hO2FiKys7dGhyb3cgJGE7fSxMOmZ1bmN0aW9uKGEpe1diKGE+Pj4wLCFBLDEsIWthLDEzMTA3MiwhMSk7Uy5hYigpfSxqOmZ1bmN0aW9uKGEpe2E+Pj49MDtEP3Bvc3RNZXNzYWdlKHtjbWQ6XCJjbGVhbnVwVGhyZWFkXCIsdGhyZWFkOmF9KTpTLlphKFMuTWFbYV0pfSxIOmNiLGg6ZGIsUzplYixEOmliLEY6amIsVDprYixROmxiLEo6bWIsUDpuYixuOm9iLEU6cGIsQjpxYixSOnJiLEM6c2IscDooKT0+MSx6OmZ1bmN0aW9uKGEsYil7YT4+Pj0wO2E9PWI+Pj4wP3NldFRpbWVvdXQoKCk9PlgoKSk6RD9wb3N0TWVzc2FnZSh7dGFyZ2V0VGhyZWFkOmEsY21kOlwiY2hlY2tNYWlsYm94XCJ9KTooYT1TLk1hW2FdKSYmYS5wb3N0TWVzc2FnZSh7Y21kOlwiY2hlY2tNYWlsYm94XCJ9KX0sXG5JOmZ1bmN0aW9uKGEsYixjLGQpe2I+Pj49MDt2Yi5sZW5ndGg9YztkPWQ+Pj4wPj4+Mztmb3IodmFyIGc9MDtnPGM7ZysrKXZiW2ddPWVhKClbZCtnPj4+MF07YT0wPmE/RWFbLWEtMV06VmJbYV07Uy5pYj1iO2I9YS5hcHBseShudWxsLHZiKTtTLmliPTA7cmV0dXJuIGJ9LEs6dGIsbzpmdW5jdGlvbihhKXtCJiZTLk1hW2E+Pj4wXS5yZWYoKX0sczpmdW5jdGlvbihhLGIsYyl7YT1iKzIwOTcxNTI+Pj4wPDQxOTQzMDUtISFhPyhhPj4+MCkrNDI5NDk2NzI5NipiOk5hTjtjPj4+PTA7YT1uZXcgRGF0ZSgxRTMqYSk7cCgpW2M+Pj4yPj4+MF09YS5nZXRVVENTZWNvbmRzKCk7cCgpW2MrND4+PjI+Pj4wXT1hLmdldFVUQ01pbnV0ZXMoKTtwKClbYys4Pj4+Mj4+PjBdPWEuZ2V0VVRDSG91cnMoKTtwKClbYysxMj4+PjI+Pj4wXT1hLmdldFVUQ0RhdGUoKTtwKClbYysxNj4+PjI+Pj4wXT1hLmdldFVUQ01vbnRoKCk7cCgpW2MrMjA+Pj4yPj4+MF09YS5nZXRVVENGdWxsWWVhcigpLTE5MDA7XG5wKClbYysyND4+PjI+Pj4wXT1hLmdldFVUQ0RheSgpO2E9KGEuZ2V0VGltZSgpLURhdGUuVVRDKGEuZ2V0VVRDRnVsbFllYXIoKSwwLDEsMCwwLDAsMCkpLzg2NEU1fDA7cCgpW2MrMjg+Pj4yPj4+MF09YX0sdDpmdW5jdGlvbihhLGIsYyl7YT1iKzIwOTcxNTI+Pj4wPDQxOTQzMDUtISFhPyhhPj4+MCkrNDI5NDk2NzI5NipiOk5hTjtjPj4+PTA7YT1uZXcgRGF0ZSgxRTMqYSk7cCgpW2M+Pj4yPj4+MF09YS5nZXRTZWNvbmRzKCk7cCgpW2MrND4+PjI+Pj4wXT1hLmdldE1pbnV0ZXMoKTtwKClbYys4Pj4+Mj4+PjBdPWEuZ2V0SG91cnMoKTtwKClbYysxMj4+PjI+Pj4wXT1hLmdldERhdGUoKTtwKClbYysxNj4+PjI+Pj4wXT1hLmdldE1vbnRoKCk7cCgpW2MrMjA+Pj4yPj4+MF09YS5nZXRGdWxsWWVhcigpLTE5MDA7cCgpW2MrMjQ+Pj4yPj4+MF09YS5nZXREYXkoKTtiPShZKGEuZ2V0RnVsbFllYXIoKSk/d2I6eGIpW2EuZ2V0TW9udGgoKV0rYS5nZXREYXRlKCktMXwwO3AoKVtjKzI4Pj4+XG4yPj4+MF09YjtwKClbYyszNj4+PjI+Pj4wXT0tKDYwKmEuZ2V0VGltZXpvbmVPZmZzZXQoKSk7Yj0obmV3IERhdGUoYS5nZXRGdWxsWWVhcigpLDYsMSkpLmdldFRpbWV6b25lT2Zmc2V0KCk7dmFyIGQ9KG5ldyBEYXRlKGEuZ2V0RnVsbFllYXIoKSwwLDEpKS5nZXRUaW1lem9uZU9mZnNldCgpO2E9KGIhPWQmJmEuZ2V0VGltZXpvbmVPZmZzZXQoKT09TWF0aC5taW4oZCxiKSl8MDtwKClbYyszMj4+PjI+Pj4wXT1hfSx1OmZ1bmN0aW9uKGEpe2E+Pj49MDt2YXIgYj1uZXcgRGF0ZShwKClbYSsyMD4+PjI+Pj4wXSsxOTAwLHAoKVthKzE2Pj4+Mj4+PjBdLHAoKVthKzEyPj4+Mj4+PjBdLHAoKVthKzg+Pj4yPj4+MF0scCgpW2ErND4+PjI+Pj4wXSxwKClbYT4+PjI+Pj4wXSwwKSxjPXAoKVthKzMyPj4+Mj4+PjBdLGQ9Yi5nZXRUaW1lem9uZU9mZnNldCgpLGc9KG5ldyBEYXRlKGIuZ2V0RnVsbFllYXIoKSw2LDEpKS5nZXRUaW1lem9uZU9mZnNldCgpLGg9KG5ldyBEYXRlKGIuZ2V0RnVsbFllYXIoKSxcbjAsMSkpLmdldFRpbWV6b25lT2Zmc2V0KCksaz1NYXRoLm1pbihoLGcpOzA+Yz9wKClbYSszMj4+PjI+Pj4wXT1OdW1iZXIoZyE9aCYmaz09ZCk6MDxjIT0oaz09ZCkmJihnPU1hdGgubWF4KGgsZyksYi5zZXRUaW1lKGIuZ2V0VGltZSgpKzZFNCooKDA8Yz9rOmcpLWQpKSk7cCgpW2ErMjQ+Pj4yPj4+MF09Yi5nZXREYXkoKTtjPShZKGIuZ2V0RnVsbFllYXIoKSk/d2I6eGIpW2IuZ2V0TW9udGgoKV0rYi5nZXREYXRlKCktMXwwO3AoKVthKzI4Pj4+Mj4+PjBdPWM7cCgpW2E+Pj4yPj4+MF09Yi5nZXRTZWNvbmRzKCk7cCgpW2ErND4+PjI+Pj4wXT1iLmdldE1pbnV0ZXMoKTtwKClbYSs4Pj4+Mj4+PjBdPWIuZ2V0SG91cnMoKTtwKClbYSsxMj4+PjI+Pj4wXT1iLmdldERhdGUoKTtwKClbYSsxNj4+PjI+Pj4wXT1iLmdldE1vbnRoKCk7cCgpW2ErMjA+Pj4yPj4+MF09Yi5nZXRZZWFyKCk7YT1iLmdldFRpbWUoKTtpc05hTihhKT8ocCgpW1hiKCk+Pj4yPj4+MF09NjEsYT0tMSk6YS89MUUzO1xucmV0dXJuIFliKChQPWEsMTw9K01hdGguYWJzKFApPzA8UD8rTWF0aC5mbG9vcihQLzQyOTQ5NjcyOTYpPj4+MDp+fitNYXRoLmNlaWwoKFAtKyh+flA+Pj4wKSkvNDI5NDk2NzI5Nik+Pj4wOjApKSxhPj4+MH0scTp5YixyOnpiLHk6ZnVuY3Rpb24oYSxiLGMpe2Z1bmN0aW9uIGQodyl7cmV0dXJuKHc9dy50b1RpbWVTdHJpbmcoKS5tYXRjaCgvXFwoKFtBLVphLXogXSspXFwpJC8pKT93WzFdOlwiR01UXCJ9YT4+Pj0wO2I+Pj49MDtjPj4+PTA7dmFyIGc9KG5ldyBEYXRlKS5nZXRGdWxsWWVhcigpLGg9bmV3IERhdGUoZywwLDEpLGs9bmV3IERhdGUoZyw2LDEpO2c9aC5nZXRUaW1lem9uZU9mZnNldCgpO3ZhciB0PWsuZ2V0VGltZXpvbmVPZmZzZXQoKSxDPU1hdGgubWF4KGcsdCk7cigpW2E+Pj4yPj4+MF09NjAqQztwKClbYj4+PjI+Pj4wXT1OdW1iZXIoZyE9dCk7YT1kKGgpO2I9ZChrKTthPUJiKGEpO2I9QmIoYik7dDxnPyhyKClbYz4+PjI+Pj4wXT1hLHIoKVtjKzQ+Pj4yPj4+MF09Yik6XG4ocigpW2M+Pj4yPj4+MF09YixyKClbYys0Pj4+Mj4+PjBdPWEpfSxjOigpPT57cmEoXCJcIil9LE86ZnVuY3Rpb24oYSxiLGMpe2E+Pj49MDtiPj4+PTA7Yz4+Pj0wO0NiLmxlbmd0aD0wO2Zvcih2YXIgZDtkPW4oKVtiKys+Pj4wXTspe3ZhciBnPTEwNSE9ZDtnJj0xMTIhPWQ7Yys9ZyYmYyU4PzQ6MDtDYi5wdXNoKDExMj09ZD9yKClbYz4+PjI+Pj4wXToxMDU9PWQ/cCgpW2M+Pj4yPj4+MF06ZWEoKVtjPj4+Mz4+PjBdKTtjKz1nPzg6NH1yZXR1cm4gRWFbYV0uYXBwbHkobnVsbCxDYil9LGs6KCk9Pnt9LGk6KCk9PkRhdGUubm93KCksVTooKT0+e1QrPTE7dGhyb3dcInVud2luZFwiO30sQTpmdW5jdGlvbigpe3JldHVybiA0Mjk0OTAxNzYwfSxlOigpPT5wZXJmb3JtYW5jZS50aW1lT3JpZ2luK3BlcmZvcm1hbmNlLm5vdygpLGY6KCk9PkI/cmVxdWlyZShcIm9zXCIpLmNwdXMoKS5sZW5ndGg6bmF2aWdhdG9yLmhhcmR3YXJlQ29uY3VycmVuY3kseDpmdW5jdGlvbihhKXthPj4+PTA7dmFyIGI9XG5uKCkubGVuZ3RoO2lmKGE8PWJ8fDQyOTQ5MDE3NjA8YSlyZXR1cm4hMTtmb3IodmFyIGM9MTs0Pj1jO2MqPTIpe3ZhciBkPWIqKDErLjIvYyk7ZD1NYXRoLm1pbihkLGErMTAwNjYzMjk2KTt2YXIgZz1NYXRoO2Q9TWF0aC5tYXgoYSxkKTthOntnPShnLm1pbi5jYWxsKGcsNDI5NDkwMTc2MCxkKyg2NTUzNi1kJTY1NTM2KSU2NTUzNiktZS5idWZmZXIuYnl0ZUxlbmd0aCs2NTUzNSkvNjU1MzY7dHJ5e2UuZ3JvdyhnKTttKCk7dmFyIGg9MTticmVhayBhfWNhdGNoKGspe31oPXZvaWQgMH1pZihoKXJldHVybiEwfXJldHVybiExfSxNOkdiLE46S2IsRzpRYSxnOkxiLG06TWIsdjpOYixsOlBiLGE6ZXx8di53YXNtTWVtb3J5LHc6VWIsZDpmdW5jdGlvbihhLGIsYyxkKXtyZXR1cm4gVWIoYT4+PjAsYj4+PjAsYz4+PjAsZD4+PjApfX0sWj1mdW5jdGlvbigpe2Z1bmN0aW9uIGEoYyxkKXtaPWMuZXhwb3J0cztaPSRiKCk7Uy5iYi5wdXNoKFouemEpO1hhPVouQWE7dmEudW5zaGlmdChaLlYpO1xuc2E9ZDt5YSgpO3JldHVybiBafXZhciBiPXthOlpifTtNKys7aWYodi5pbnN0YW50aWF0ZVdhc20pdHJ5e3JldHVybiB2Lmluc3RhbnRpYXRlV2FzbShiLGEpfWNhdGNoKGMpe0ooYE1vZHVsZS5pbnN0YW50aWF0ZVdhc20gY2FsbGJhY2sgZmFpbGVkIHdpdGggZXJyb3I6ICR7Y31gKSx4KGMpfURhKGIsZnVuY3Rpb24oYyl7YShjLmluc3RhbmNlLGMubW9kdWxlKX0pLmNhdGNoKHgpO3JldHVybnt9fSgpO3YuX09ydEluaXQ9KGEsYik9Pih2Ll9PcnRJbml0PVouVykoYSxiKTt2Ll9PcnRHZXRMYXN0RXJyb3I9KGEsYik9Pih2Ll9PcnRHZXRMYXN0RXJyb3I9Wi5YKShhLGIpO3YuX09ydENyZWF0ZVNlc3Npb25PcHRpb25zPShhLGIsYyxkLGcsaCxrLHQsQyx3KT0+KHYuX09ydENyZWF0ZVNlc3Npb25PcHRpb25zPVouWSkoYSxiLGMsZCxnLGgsayx0LEMsdyk7XG52Ll9PcnRBcHBlbmRFeGVjdXRpb25Qcm92aWRlcj0oYSxiKT0+KHYuX09ydEFwcGVuZEV4ZWN1dGlvblByb3ZpZGVyPVouWikoYSxiKTt2Ll9PcnRBZGRGcmVlRGltZW5zaW9uT3ZlcnJpZGU9KGEsYixjKT0+KHYuX09ydEFkZEZyZWVEaW1lbnNpb25PdmVycmlkZT1aLl8pKGEsYixjKTt2Ll9PcnRBZGRTZXNzaW9uQ29uZmlnRW50cnk9KGEsYixjKT0+KHYuX09ydEFkZFNlc3Npb25Db25maWdFbnRyeT1aLiQpKGEsYixjKTt2Ll9PcnRSZWxlYXNlU2Vzc2lvbk9wdGlvbnM9YT0+KHYuX09ydFJlbGVhc2VTZXNzaW9uT3B0aW9ucz1aLmFhKShhKTt2Ll9PcnRDcmVhdGVTZXNzaW9uPShhLGIsYyk9Pih2Ll9PcnRDcmVhdGVTZXNzaW9uPVouYmEpKGEsYixjKTt2Ll9PcnRSZWxlYXNlU2Vzc2lvbj1hPT4odi5fT3J0UmVsZWFzZVNlc3Npb249Wi5jYSkoYSk7di5fT3J0R2V0SW5wdXRPdXRwdXRDb3VudD0oYSxiLGMpPT4odi5fT3J0R2V0SW5wdXRPdXRwdXRDb3VudD1aLmRhKShhLGIsYyk7XG52Ll9PcnRHZXRJbnB1dE5hbWU9KGEsYik9Pih2Ll9PcnRHZXRJbnB1dE5hbWU9Wi5lYSkoYSxiKTt2Ll9PcnRHZXRPdXRwdXROYW1lPShhLGIpPT4odi5fT3J0R2V0T3V0cHV0TmFtZT1aLmZhKShhLGIpO3YuX09ydEZyZWU9YT0+KHYuX09ydEZyZWU9Wi5nYSkoYSk7di5fT3J0Q3JlYXRlVGVuc29yPShhLGIsYyxkLGcsaCk9Pih2Ll9PcnRDcmVhdGVUZW5zb3I9Wi5oYSkoYSxiLGMsZCxnLGgpO3YuX09ydEdldFRlbnNvckRhdGE9KGEsYixjLGQsZyk9Pih2Ll9PcnRHZXRUZW5zb3JEYXRhPVouaWEpKGEsYixjLGQsZyk7di5fT3J0UmVsZWFzZVRlbnNvcj1hPT4odi5fT3J0UmVsZWFzZVRlbnNvcj1aLmphKShhKTt2Ll9PcnRDcmVhdGVSdW5PcHRpb25zPShhLGIsYyxkKT0+KHYuX09ydENyZWF0ZVJ1bk9wdGlvbnM9Wi5rYSkoYSxiLGMsZCk7di5fT3J0QWRkUnVuQ29uZmlnRW50cnk9KGEsYixjKT0+KHYuX09ydEFkZFJ1bkNvbmZpZ0VudHJ5PVoubGEpKGEsYixjKTtcbnYuX09ydFJlbGVhc2VSdW5PcHRpb25zPWE9Pih2Ll9PcnRSZWxlYXNlUnVuT3B0aW9ucz1aLm1hKShhKTt2Ll9PcnRDcmVhdGVCaW5kaW5nPWE9Pih2Ll9PcnRDcmVhdGVCaW5kaW5nPVoubmEpKGEpO3YuX09ydEJpbmRJbnB1dD0oYSxiLGMpPT4odi5fT3J0QmluZElucHV0PVoub2EpKGEsYixjKTt2Ll9PcnRCaW5kT3V0cHV0PShhLGIsYyxkKT0+KHYuX09ydEJpbmRPdXRwdXQ9Wi5wYSkoYSxiLGMsZCk7di5fT3J0Q2xlYXJCb3VuZE91dHB1dHM9YT0+KHYuX09ydENsZWFyQm91bmRPdXRwdXRzPVoucWEpKGEpO3YuX09ydFJlbGVhc2VCaW5kaW5nPWE9Pih2Ll9PcnRSZWxlYXNlQmluZGluZz1aLnJhKShhKTt2Ll9PcnRSdW5XaXRoQmluZGluZz0oYSxiLGMsZCxnKT0+KHYuX09ydFJ1bldpdGhCaW5kaW5nPVouc2EpKGEsYixjLGQsZyk7di5fT3J0UnVuPShhLGIsYyxkLGcsaCxrLHQpPT4odi5fT3J0UnVuPVoudGEpKGEsYixjLGQsZyxoLGssdCk7XG52Ll9PcnRFbmRQcm9maWxpbmc9YT0+KHYuX09ydEVuZFByb2ZpbGluZz1aLnVhKShhKTt2YXIgWGI9KCk9PihYYj1aLnZhKSgpLFc9di5fcHRocmVhZF9zZWxmPSgpPT4oVz12Ll9wdGhyZWFkX3NlbGY9Wi53YSkoKSxBYj12Ll9tYWxsb2M9YT0+KEFiPXYuX21hbGxvYz1aLnhhKShhKTt2Ll9mcmVlPWE9Pih2Ll9mcmVlPVoueWEpKGEpO3YuX19lbXNjcmlwdGVuX3Rsc19pbml0PSgpPT4odi5fX2Vtc2NyaXB0ZW5fdGxzX2luaXQ9Wi56YSkoKTt2YXIgV2I9di5fX2Vtc2NyaXB0ZW5fdGhyZWFkX2luaXQ9KGEsYixjLGQsZyxoKT0+KFdiPXYuX19lbXNjcmlwdGVuX3RocmVhZF9pbml0PVouQmEpKGEsYixjLGQsZyxoKTt2Ll9fZW1zY3JpcHRlbl90aHJlYWRfY3Jhc2hlZD0oKT0+KHYuX19lbXNjcmlwdGVuX3RocmVhZF9jcmFzaGVkPVouQ2EpKCk7XG52YXIgTmE9KGEsYixjLGQpPT4oTmE9Wi5EYSkoYSxiLGMsZCksVGE9YT0+KFRhPVouRWEpKGEpLFlhPXYuX19lbXNjcmlwdGVuX3RocmVhZF9leGl0PWE9PihZYT12Ll9fZW1zY3JpcHRlbl90aHJlYWRfZXhpdD1aLkZhKShhKSx1Yj0oKT0+KHViPVouR2EpKCksWWI9YT0+KFliPVouSGEpKGEpLFZhPShhLGIpPT4oVmE9Wi5JYSkoYSxiKSxLYT0oKT0+KEthPVouSmEpKCksVT1hPT4oVT1aLkthKShhKSxNYT1hPT4oTWE9Wi5MYSkoYSk7ZnVuY3Rpb24gJGIoKXt2YXIgYT1aO2E9T2JqZWN0LmFzc2lnbih7fSxhKTt2YXIgYj1kPT4oKT0+ZCgpPj4+MCxjPWQ9Pmc9PmQoZyk+Pj4wO2EudmE9YihhLnZhKTthLndhPWIoYS53YSk7YS54YT1jKGEueGEpO2EuZW1zY3JpcHRlbl9tYWluX3J1bnRpbWVfdGhyZWFkX2lkPWIoYS5lbXNjcmlwdGVuX21haW5fcnVudGltZV90aHJlYWRfaWQpO2EuSmE9YihhLkphKTthLkxhPWMoYS5MYSk7cmV0dXJuIGF9di53YXNtTWVtb3J5PWU7XG52LnN0YWNrQWxsb2M9TWE7di5zdGFja1NhdmU9S2E7di5zdGFja1Jlc3RvcmU9VTt2LmtlZXBSdW50aW1lQWxpdmU9KCk9PjA8VDt2LlVURjhUb1N0cmluZz1RO3Yuc3RyaW5nVG9VVEY4PWhiO3YubGVuZ3RoQnl0ZXNVVEY4PWZiO3YuRXhpdFN0YXR1cz1SO3YuUFRocmVhZD1TO3ZhciBhYztOPWZ1bmN0aW9uIGJjKCl7YWN8fGNjKCk7YWN8fChOPWJjKX07ZnVuY3Rpb24gY2MoKXtpZighKDA8TSkpaWYoRCloYSh2KSxEfHxVYSh2YSksc3RhcnRXb3JrZXIodik7ZWxzZXtpZih2LnByZVJ1bilmb3IoXCJmdW5jdGlvblwiPT10eXBlb2Ygdi5wcmVSdW4mJih2LnByZVJ1bj1bdi5wcmVSdW5dKTt2LnByZVJ1bi5sZW5ndGg7KXVhLnVuc2hpZnQodi5wcmVSdW4uc2hpZnQoKSk7VWEodWEpOzA8TXx8YWN8fChhYz0hMCx2LmNhbGxlZFJ1bj0hMCxLfHwoRHx8VWEodmEpLGhhKHYpLER8fFVhKHdhKSkpfX1jYygpO1xuXG5cbiAgcmV0dXJuIG1vZHVsZUFyZy5yZWFkeVxufVxuKTtcbn0pKCk7XG47XG5pZiAodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuICBtb2R1bGUuZXhwb3J0cyA9IG9ydFdhc21UaHJlYWRlZDtcbmVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lWydhbWQnXSlcbiAgZGVmaW5lKFtdLCAoKSA9PiBvcnRXYXNtVGhyZWFkZWQpO1xuIiwgIlwidXNlIHN0cmljdFwiO3ZhciBNb2R1bGU9e307dmFyIEVOVklST05NRU5UX0lTX05PREU9dHlwZW9mIHByb2Nlc3M9PVwib2JqZWN0XCImJnR5cGVvZiBwcm9jZXNzLnZlcnNpb25zPT1cIm9iamVjdFwiJiZ0eXBlb2YgcHJvY2Vzcy52ZXJzaW9ucy5ub2RlPT1cInN0cmluZ1wiO2lmKEVOVklST05NRU5UX0lTX05PREUpe3ZhciBub2RlV29ya2VyVGhyZWFkcz1yZXF1aXJlKFwid29ya2VyX3RocmVhZHNcIik7dmFyIHBhcmVudFBvcnQ9bm9kZVdvcmtlclRocmVhZHMucGFyZW50UG9ydDtwYXJlbnRQb3J0Lm9uKFwibWVzc2FnZVwiLGRhdGE9Pm9ubWVzc2FnZSh7ZGF0YTpkYXRhfSkpO3ZhciBmcz1yZXF1aXJlKFwiZnNcIik7dmFyIHZtPXJlcXVpcmUoXCJ2bVwiKTtPYmplY3QuYXNzaWduKGdsb2JhbCx7c2VsZjpnbG9iYWwscmVxdWlyZTpyZXF1aXJlLE1vZHVsZTpNb2R1bGUsbG9jYXRpb246e2hyZWY6X19maWxlbmFtZX0sV29ya2VyOm5vZGVXb3JrZXJUaHJlYWRzLldvcmtlcixpbXBvcnRTY3JpcHRzOmY9PnZtLnJ1bkluVGhpc0NvbnRleHQoZnMucmVhZEZpbGVTeW5jKGYsXCJ1dGY4XCIpLHtmaWxlbmFtZTpmfSkscG9zdE1lc3NhZ2U6bXNnPT5wYXJlbnRQb3J0LnBvc3RNZXNzYWdlKG1zZykscGVyZm9ybWFuY2U6Z2xvYmFsLnBlcmZvcm1hbmNlfHx7bm93OkRhdGUubm93fX0pfXZhciBpbml0aWFsaXplZEpTPWZhbHNlO2Z1bmN0aW9uIHRocmVhZFByaW50RXJyKCl7dmFyIHRleHQ9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKS5qb2luKFwiIFwiKTtpZihFTlZJUk9OTUVOVF9JU19OT0RFKXtmcy53cml0ZVN5bmMoMix0ZXh0K1wiXFxuXCIpO3JldHVybn1jb25zb2xlLmVycm9yKHRleHQpfWZ1bmN0aW9uIHRocmVhZEFsZXJ0KCl7dmFyIHRleHQ9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKS5qb2luKFwiIFwiKTtwb3N0TWVzc2FnZSh7Y21kOlwiYWxlcnRcIix0ZXh0OnRleHQsdGhyZWFkSWQ6TW9kdWxlW1wiX3B0aHJlYWRfc2VsZlwiXSgpfSl9dmFyIGVycj10aHJlYWRQcmludEVycjtzZWxmLmFsZXJ0PXRocmVhZEFsZXJ0O01vZHVsZVtcImluc3RhbnRpYXRlV2FzbVwiXT0oaW5mbyxyZWNlaXZlSW5zdGFuY2UpPT57dmFyIG1vZHVsZT1Nb2R1bGVbXCJ3YXNtTW9kdWxlXCJdO01vZHVsZVtcIndhc21Nb2R1bGVcIl09bnVsbDt2YXIgaW5zdGFuY2U9bmV3IFdlYkFzc2VtYmx5Lkluc3RhbmNlKG1vZHVsZSxpbmZvKTtyZXR1cm4gcmVjZWl2ZUluc3RhbmNlKGluc3RhbmNlKX07c2VsZi5vbnVuaGFuZGxlZHJlamVjdGlvbj1lPT57dGhyb3cgZS5yZWFzb258fGV9O2Z1bmN0aW9uIGhhbmRsZU1lc3NhZ2UoZSl7dHJ5e2lmKGUuZGF0YS5jbWQ9PT1cImxvYWRcIil7bGV0IG1lc3NhZ2VRdWV1ZT1bXTtzZWxmLm9ubWVzc2FnZT1lPT5tZXNzYWdlUXVldWUucHVzaChlKTtzZWxmLnN0YXJ0V29ya2VyPWluc3RhbmNlPT57TW9kdWxlPWluc3RhbmNlO3Bvc3RNZXNzYWdlKHtcImNtZFwiOlwibG9hZGVkXCJ9KTtmb3IobGV0IG1zZyBvZiBtZXNzYWdlUXVldWUpe2hhbmRsZU1lc3NhZ2UobXNnKX1zZWxmLm9ubWVzc2FnZT1oYW5kbGVNZXNzYWdlfTtNb2R1bGVbXCJ3YXNtTW9kdWxlXCJdPWUuZGF0YS53YXNtTW9kdWxlO2Zvcihjb25zdCBoYW5kbGVyIG9mIGUuZGF0YS5oYW5kbGVycyl7TW9kdWxlW2hhbmRsZXJdPSguLi5hcmdzKT0+e3Bvc3RNZXNzYWdlKHtjbWQ6XCJjYWxsSGFuZGxlclwiLGhhbmRsZXI6aGFuZGxlcixhcmdzOmFyZ3N9KX19TW9kdWxlW1wid2FzbU1lbW9yeVwiXT1lLmRhdGEud2FzbU1lbW9yeTtNb2R1bGVbXCJidWZmZXJcIl09TW9kdWxlW1wid2FzbU1lbW9yeVwiXS5idWZmZXI7TW9kdWxlW1wiRU5WSVJPTk1FTlRfSVNfUFRIUkVBRFwiXT10cnVlO2lmKHR5cGVvZiBlLmRhdGEudXJsT3JCbG9iPT1cInN0cmluZ1wiKXtpbXBvcnRTY3JpcHRzKGUuZGF0YS51cmxPckJsb2IpfWVsc2V7dmFyIG9iamVjdFVybD1VUkwuY3JlYXRlT2JqZWN0VVJMKGUuZGF0YS51cmxPckJsb2IpO2ltcG9ydFNjcmlwdHMob2JqZWN0VXJsKTtVUkwucmV2b2tlT2JqZWN0VVJMKG9iamVjdFVybCl9b3J0V2FzbVRocmVhZGVkKE1vZHVsZSl9ZWxzZSBpZihlLmRhdGEuY21kPT09XCJydW5cIil7TW9kdWxlW1wiX19lbXNjcmlwdGVuX3RocmVhZF9pbml0XCJdKGUuZGF0YS5wdGhyZWFkX3B0ciwvKmlzX21haW49Ki8wLC8qaXNfcnVudGltZT0qLzAsLypjYW5fYmxvY2s9Ki8xKTtNb2R1bGVbXCJfX2Vtc2NyaXB0ZW5fdGhyZWFkX21haWxib3hfYXdhaXRcIl0oZS5kYXRhLnB0aHJlYWRfcHRyKTtNb2R1bGVbXCJlc3RhYmxpc2hTdGFja1NwYWNlXCJdKCk7TW9kdWxlW1wiUFRocmVhZFwiXS5yZWNlaXZlT2JqZWN0VHJhbnNmZXIoZS5kYXRhKTtNb2R1bGVbXCJQVGhyZWFkXCJdLnRocmVhZEluaXRUTFMoKTtpZighaW5pdGlhbGl6ZWRKUyl7aW5pdGlhbGl6ZWRKUz10cnVlfXRyeXtNb2R1bGVbXCJpbnZva2VFbnRyeVBvaW50XCJdKGUuZGF0YS5zdGFydF9yb3V0aW5lLGUuZGF0YS5hcmcpfWNhdGNoKGV4KXtpZihleCE9XCJ1bndpbmRcIil7dGhyb3cgZXh9fX1lbHNlIGlmKGUuZGF0YS5jbWQ9PT1cImNhbmNlbFwiKXtpZihNb2R1bGVbXCJfcHRocmVhZF9zZWxmXCJdKCkpe01vZHVsZVtcIl9fZW1zY3JpcHRlbl90aHJlYWRfZXhpdFwiXSgtMSl9fWVsc2UgaWYoZS5kYXRhLnRhcmdldD09PVwic2V0aW1tZWRpYXRlXCIpe31lbHNlIGlmKGUuZGF0YS5jbWQ9PT1cImNoZWNrTWFpbGJveFwiKXtpZihpbml0aWFsaXplZEpTKXtNb2R1bGVbXCJjaGVja01haWxib3hcIl0oKX19ZWxzZSBpZihlLmRhdGEuY21kKXtlcnIoYHdvcmtlci5qcyByZWNlaXZlZCB1bmtub3duIGNvbW1hbmQgJHtlLmRhdGEuY21kfWApO2VycihlLmRhdGEpfX1jYXRjaChleCl7TW9kdWxlW1wiX19lbXNjcmlwdGVuX3RocmVhZF9jcmFzaGVkXCJdPy4oKTt0aHJvdyBleH19c2VsZi5vbm1lc3NhZ2U9aGFuZGxlTWVzc2FnZTtcbiIsICIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cblxuaW1wb3J0ICogYXMgcGF0aCBmcm9tICdub2RlOnBhdGgnO1xuaW1wb3J0IHtFbnZ9IGZyb20gJ29ubnhydW50aW1lLWNvbW1vbic7XG5cbmltcG9ydCB7T3J0V2FzbU1vZHVsZX0gZnJvbSAnLi9iaW5kaW5nL29ydC13YXNtJztcbmltcG9ydCB7T3J0V2FzbVRocmVhZGVkTW9kdWxlfSBmcm9tICcuL2JpbmRpbmcvb3J0LXdhc20tdGhyZWFkZWQnO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tcmVxdWlyZS1pbXBvcnRzICovXG5sZXQgb3J0V2FzbUZhY3Rvcnk6IEVtc2NyaXB0ZW5Nb2R1bGVGYWN0b3J5PE9ydFdhc21Nb2R1bGU+O1xuXG5pZiAoIUJVSUxEX0RFRlMuRElTQUJMRV9UUkFJTklORykge1xuICBvcnRXYXNtRmFjdG9yeSA9IHJlcXVpcmUoJy4vYmluZGluZy9vcnQtdHJhaW5pbmctd2FzbS1zaW1kLmpzJyk7XG59IGVsc2Uge1xuICBvcnRXYXNtRmFjdG9yeSA9XG4gICAgICBCVUlMRF9ERUZTLkRJU0FCTEVfV0VCR1BVID8gcmVxdWlyZSgnLi9iaW5kaW5nL29ydC13YXNtLmpzJykgOiByZXF1aXJlKCcuL2JpbmRpbmcvb3J0LXdhc20tc2ltZC5qc2VwLmpzJyk7XG59XG5cbmNvbnN0IG9ydFdhc21GYWN0b3J5VGhyZWFkZWQ6IEVtc2NyaXB0ZW5Nb2R1bGVGYWN0b3J5PE9ydFdhc21Nb2R1bGU+ID0gIUJVSUxEX0RFRlMuRElTQUJMRV9XQVNNX1RIUkVBRCA/XG4gICAgKEJVSUxEX0RFRlMuRElTQUJMRV9XRUJHUFUgPyByZXF1aXJlKCcuL2JpbmRpbmcvb3J0LXdhc20tdGhyZWFkZWQuanMnKSA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1aXJlKCcuL2JpbmRpbmcvb3J0LXdhc20tc2ltZC10aHJlYWRlZC5qc2VwLmpzJykpIDpcbiAgICBvcnRXYXNtRmFjdG9yeTtcbi8qIGVzbGludC1lbmFibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXJlcXVpcmUtaW1wb3J0cyAqL1xuXG5sZXQgd2FzbTogT3J0V2FzbU1vZHVsZXx1bmRlZmluZWQ7XG5sZXQgaW5pdGlhbGl6ZWQgPSBmYWxzZTtcbmxldCBpbml0aWFsaXppbmcgPSBmYWxzZTtcbmxldCBhYm9ydGVkID0gZmFsc2U7XG5cbmNvbnN0IGlzTXVsdGlUaHJlYWRTdXBwb3J0ZWQgPSAobnVtVGhyZWFkczogbnVtYmVyKTogYm9vbGVhbiA9PiB7XG4gIC8vIFdlYkFzc2VtYmx5IHRocmVhZHMgYXJlIHNldCB0byAxIChzaW5nbGUgdGhyZWFkKS5cbiAgaWYgKG51bVRocmVhZHMgPT09IDEpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvLyBJZiAnU2hhcmVkQXJyYXlCdWZmZXInIGlzIG5vdCBhdmFpbGFibGUsIFdlYkFzc2VtYmx5IHRocmVhZHMgd2lsbCBub3Qgd29yay5cbiAgaWYgKHR5cGVvZiBTaGFyZWRBcnJheUJ1ZmZlciA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBpZiAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnICYmICFzZWxmLmNyb3NzT3JpZ2luSXNvbGF0ZWQpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgJ2Vudi53YXNtLm51bVRocmVhZHMgaXMgc2V0IHRvICcgKyBudW1UaHJlYWRzICtcbiAgICAgICAgICAnLCBidXQgdGhpcyB3aWxsIG5vdCB3b3JrIHVubGVzcyB5b3UgZW5hYmxlIGNyb3NzT3JpZ2luSXNvbGF0ZWQgbW9kZS4gJyArXG4gICAgICAgICAgJ1NlZSBodHRwczovL3dlYi5kZXYvY3Jvc3Mtb3JpZ2luLWlzb2xhdGlvbi1ndWlkZS8gZm9yIG1vcmUgaW5mby4nKTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLy8gb25ueHJ1bnRpbWUtd2ViIGRvZXMgbm90IHN1cHBvcnQgbXVsdGktdGhyZWFkcyBpbiBOb2RlLmpzLlxuICBpZiAodHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmIHByb2Nlc3MudmVyc2lvbnMgJiYgcHJvY2Vzcy52ZXJzaW9ucy5ub2RlKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICdlbnYud2FzbS5udW1UaHJlYWRzIGlzIHNldCB0byAnICsgbnVtVGhyZWFkcyArXG4gICAgICAgICcsIGhvd2V2ZXIsIGN1cnJlbnRseSBvbm54cnVudGltZS13ZWIgZG9lcyBub3Qgc3VwcG9ydCBtdWx0aS10aHJlYWRzIGluIE5vZGUuanMuICcgK1xuICAgICAgICAnUGxlYXNlIGNvbnNpZGVyIHVzaW5nIG9ubnhydW50aW1lLW5vZGUgZm9yIHBlcmZvcm1hbmNlIGNyaXRpY2FsIHNjZW5hcmlvcy4nKTtcbiAgfVxuXG4gIHRyeSB7XG4gICAgLy8gVGVzdCBmb3IgdHJhbnNmZXJhYmlsaXR5IG9mIFNBQnMgKGZvciBicm93c2Vycy4gbmVlZGVkIGZvciBGaXJlZm94KVxuICAgIC8vIGh0dHBzOi8vZ3JvdXBzLmdvb2dsZS5jb20vZm9ydW0vIyFtc2cvbW96aWxsYS5kZXYucGxhdGZvcm0vSUhrQlpsSEVUcEEvZHdzTU5jaFdFUUFKXG4gICAgaWYgKHR5cGVvZiBNZXNzYWdlQ2hhbm5lbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIG5ldyBNZXNzYWdlQ2hhbm5lbCgpLnBvcnQxLnBvc3RNZXNzYWdlKG5ldyBTaGFyZWRBcnJheUJ1ZmZlcigxKSk7XG4gICAgfVxuXG4gICAgLy8gVGVzdCBmb3IgV2ViQXNzZW1ibHkgdGhyZWFkcyBjYXBhYmlsaXR5IChmb3IgYm90aCBicm93c2VycyBhbmQgTm9kZS5qcylcbiAgICAvLyBUaGlzIHR5cGVkIGFycmF5IGlzIGEgV2ViQXNzZW1ibHkgcHJvZ3JhbSBjb250YWluaW5nIHRocmVhZGVkIGluc3RydWN0aW9ucy5cbiAgICByZXR1cm4gV2ViQXNzZW1ibHkudmFsaWRhdGUobmV3IFVpbnQ4QXJyYXkoW1xuICAgICAgMCwgOTcsIDExNSwgMTA5LCAxLCAwLCAgMCwgIDAsIDEsIDQsIDEsICA5NiwgMCwgICAwLCAgMywgMiwgMSwgIDAsIDUsXG4gICAgICA0LCAxLCAgMywgICAxLCAgIDEsIDEwLCAxMSwgMSwgOSwgMCwgNjUsIDAsICAyNTQsIDE2LCAyLCAwLCAyNiwgMTFcbiAgICBdKSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn07XG5cbmNvbnN0IGlzU2ltZFN1cHBvcnRlZCA9ICgpOiBib29sZWFuID0+IHtcbiAgdHJ5IHtcbiAgICAvLyBUZXN0IGZvciBXZWJBc3NlbWJseSBTSU1EIGNhcGFiaWxpdHkgKGZvciBib3RoIGJyb3dzZXJzIGFuZCBOb2RlLmpzKVxuICAgIC8vIFRoaXMgdHlwZWQgYXJyYXkgaXMgYSBXZWJBc3NlbWJseSBwcm9ncmFtIGNvbnRhaW5pbmcgU0lNRCBpbnN0cnVjdGlvbnMuXG5cbiAgICAvLyBUaGUgYmluYXJ5IGRhdGEgaXMgZ2VuZXJhdGVkIGZyb20gdGhlIGZvbGxvd2luZyBjb2RlIGJ5IHdhdDJ3YXNtOlxuICAgIC8vXG4gICAgLy8gKG1vZHVsZVxuICAgIC8vICAgKHR5cGUgJHQwIChmdW5jKSlcbiAgICAvLyAgIChmdW5jICRmMCAodHlwZSAkdDApXG4gICAgLy8gICAgIChkcm9wXG4gICAgLy8gICAgICAgKGkzMng0LmRvdF9pMTZ4OF9zXG4gICAgLy8gICAgICAgICAoaTh4MTYuc3BsYXRcbiAgICAvLyAgICAgICAgICAgKGkzMi5jb25zdCAwKSlcbiAgICAvLyAgICAgICAgICh2MTI4LmNvbnN0IGkzMng0IDB4MDAwMDAwMDAgMHgwMDAwMDAwMCAweDAwMDAwMDAwIDB4MDAwMDAwMDApKSkpKVxuXG4gICAgcmV0dXJuIFdlYkFzc2VtYmx5LnZhbGlkYXRlKG5ldyBVaW50OEFycmF5KFtcbiAgICAgIDAsICAgOTcsIDExNSwgMTA5LCAxLCAwLCAwLCAwLCAxLCA0LCAxLCA5NiwgMCwgMCwgMywgMiwgMSwgMCwgMTAsIDMwLCAxLCAgIDI4LCAgMCwgNjUsIDAsXG4gICAgICAyNTMsIDE1LCAyNTMsIDEyLCAgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgIDAsIDAsIDAsIDAsIDAsIDAsIDAsICAwLCAgMjUzLCAxODYsIDEsIDI2LCAxMVxuICAgIF0pKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufTtcblxuY29uc3QgZ2V0V2FzbUZpbGVOYW1lID0gKHVzZVNpbWQ6IGJvb2xlYW4sIHVzZVRocmVhZHM6IGJvb2xlYW4pID0+IHtcbiAgaWYgKHVzZVNpbWQpIHtcbiAgICBpZiAoIUJVSUxEX0RFRlMuRElTQUJMRV9UUkFJTklORykge1xuICAgICAgcmV0dXJuICdvcnQtdHJhaW5pbmctd2FzbS1zaW1kLndhc20nO1xuICAgIH1cbiAgICByZXR1cm4gdXNlVGhyZWFkcyA/ICdvcnQtd2FzbS1zaW1kLXRocmVhZGVkLndhc20nIDogJ29ydC13YXNtLXNpbWQud2FzbSc7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHVzZVRocmVhZHMgPyAnb3J0LXdhc20tdGhyZWFkZWQud2FzbScgOiAnb3J0LXdhc20ud2FzbSc7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBpbml0aWFsaXplV2ViQXNzZW1ibHkgPSBhc3luYyhmbGFnczogRW52LldlYkFzc2VtYmx5RmxhZ3MpOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgaWYgKGluaXRpYWxpemVkKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICB9XG4gIGlmIChpbml0aWFsaXppbmcpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ211bHRpcGxlIGNhbGxzIHRvIFxcJ2luaXRpYWxpemVXZWJBc3NlbWJseSgpXFwnIGRldGVjdGVkLicpO1xuICB9XG4gIGlmIChhYm9ydGVkKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcmV2aW91cyBjYWxsIHRvIFxcJ2luaXRpYWxpemVXZWJBc3NlbWJseSgpXFwnIGZhaWxlZC4nKTtcbiAgfVxuXG4gIGluaXRpYWxpemluZyA9IHRydWU7XG5cbiAgLy8gd2FzbSBmbGFncyBhcmUgYWxyZWFkeSBpbml0aWFsaXplZFxuICBjb25zdCB0aW1lb3V0ID0gZmxhZ3MuaW5pdFRpbWVvdXQhO1xuICBjb25zdCBudW1UaHJlYWRzID0gZmxhZ3MubnVtVGhyZWFkcyE7XG4gIGNvbnN0IHNpbWQgPSBmbGFncy5zaW1kITtcblxuICBjb25zdCB1c2VUaHJlYWRzID0gaXNNdWx0aVRocmVhZFN1cHBvcnRlZChudW1UaHJlYWRzKTtcbiAgY29uc3QgdXNlU2ltZCA9IHNpbWQgJiYgaXNTaW1kU3VwcG9ydGVkKCk7XG5cbiAgY29uc3Qgd2FzbVBhdGhzID0gZmxhZ3Mud2FzbVBhdGhzO1xuICBjb25zdCB3YXNtUHJlZml4T3ZlcnJpZGUgPSB0eXBlb2Ygd2FzbVBhdGhzID09PSAnc3RyaW5nJyA/IHdhc21QYXRocyA6IHVuZGVmaW5lZDtcbiAgY29uc3Qgd2FzbUZpbGVOYW1lID0gZ2V0V2FzbUZpbGVOYW1lKHVzZVNpbWQsIHVzZVRocmVhZHMpO1xuICBjb25zdCB3YXNtUGF0aE92ZXJyaWRlID0gdHlwZW9mIHdhc21QYXRocyA9PT0gJ29iamVjdCcgPyB3YXNtUGF0aHNbd2FzbUZpbGVOYW1lXSA6IHVuZGVmaW5lZDtcblxuICBsZXQgaXNUaW1lb3V0ID0gZmFsc2U7XG5cbiAgY29uc3QgdGFza3M6IEFycmF5PFByb21pc2U8dm9pZD4+ID0gW107XG5cbiAgLy8gcHJvbWlzZSBmb3IgdGltZW91dFxuICBpZiAodGltZW91dCA+IDApIHtcbiAgICB0YXNrcy5wdXNoKG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgaXNUaW1lb3V0ID0gdHJ1ZTtcbiAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgfSwgdGltZW91dCk7XG4gICAgfSkpO1xuICB9XG5cbiAgLy8gcHJvbWlzZSBmb3IgbW9kdWxlIGluaXRpYWxpemF0aW9uXG4gIHRhc2tzLnB1c2gobmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGNvbnN0IGZhY3RvcnkgPSB1c2VUaHJlYWRzID8gb3J0V2FzbUZhY3RvcnlUaHJlYWRlZCA6IG9ydFdhc21GYWN0b3J5O1xuICAgIGNvbnN0IGNvbmZpZzogUGFydGlhbDxPcnRXYXNtTW9kdWxlPiA9IHtcbiAgICAgIGxvY2F0ZUZpbGU6IChmaWxlTmFtZTogc3RyaW5nLCBzY3JpcHREaXJlY3Rvcnk6IHN0cmluZykgPT4ge1xuICAgICAgICBpZiAoIUJVSUxEX0RFRlMuRElTQUJMRV9XQVNNX1RIUkVBRCAmJiB1c2VUaHJlYWRzICYmIGZpbGVOYW1lLmVuZHNXaXRoKCcud29ya2VyLmpzJykgJiZcbiAgICAgICAgICAgIHR5cGVvZiBCbG9iICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIHJldHVybiBVUkwuY3JlYXRlT2JqZWN0VVJMKG5ldyBCbG9iKFxuICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgLy8gVGhpcyByZXF1aXJlKCkgZnVuY3Rpb24gaXMgaGFuZGxlZCBieSBlc2J1aWxkIHBsdWdpbiB0byBsb2FkIGZpbGUgY29udGVudCBhcyBzdHJpbmcuXG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1yZXF1aXJlLWltcG9ydHNcbiAgICAgICAgICAgICAgICByZXF1aXJlKCcuL2JpbmRpbmcvb3J0LXdhc20tdGhyZWFkZWQud29ya2VyLmpzJylcbiAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAge3R5cGU6ICd0ZXh0L2phdmFzY3JpcHQnfSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGZpbGVOYW1lLmVuZHNXaXRoKCcud2FzbScpKSB7XG4gICAgICAgICAgaWYgKHdhc21QYXRoT3ZlcnJpZGUpIHtcbiAgICAgICAgICAgIHJldHVybiB3YXNtUGF0aE92ZXJyaWRlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnN0IHByZWZpeCA9IHdhc21QcmVmaXhPdmVycmlkZSA/PyBzY3JpcHREaXJlY3Rvcnk7XG5cbiAgICAgICAgICBpZiAoIUJVSUxEX0RFRlMuRElTQUJMRV9XRUJHUFUpIHtcbiAgICAgICAgICAgIGlmICh3YXNtRmlsZU5hbWUgPT09ICdvcnQtd2FzbS1zaW1kLndhc20nKSB7XG4gICAgICAgICAgICAgIHJldHVybiBwcmVmaXggKyAnb3J0LXdhc20tc2ltZC5qc2VwLndhc20nO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh3YXNtRmlsZU5hbWUgPT09ICdvcnQtd2FzbS1zaW1kLXRocmVhZGVkLndhc20nKSB7XG4gICAgICAgICAgICAgIHJldHVybiBwcmVmaXggKyAnb3J0LXdhc20tc2ltZC10aHJlYWRlZC5qc2VwLndhc20nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBwcmVmaXggKyB3YXNtRmlsZU5hbWU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gc2NyaXB0RGlyZWN0b3J5ICsgZmlsZU5hbWU7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGlmICghQlVJTERfREVGUy5ESVNBQkxFX1dBU01fVEhSRUFEICYmIHVzZVRocmVhZHMpIHtcbiAgICAgIGNvbmZpZy5udW1UaHJlYWRzID0gbnVtVGhyZWFkcztcbiAgICAgIGlmICh0eXBlb2YgQmxvYiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgY29uZmlnLm1haW5TY3JpcHRVcmxPckJsb2IgPSBwYXRoLmpvaW4oX19kaXJuYW1lLCAnb3J0LXdhc20tdGhyZWFkZWQuanMnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IHNjcmlwdFNvdXJjZUNvZGUgPSBgdmFyIG9ydFdhc21UaHJlYWRlZD0ke2ZhY3RvcnkudG9TdHJpbmcoKX07YDtcbiAgICAgICAgY29uZmlnLm1haW5TY3JpcHRVcmxPckJsb2IgPSBuZXcgQmxvYihbc2NyaXB0U291cmNlQ29kZV0sIHt0eXBlOiAndGV4dC9qYXZhc2NyaXB0J30pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZhY3RvcnkoY29uZmlnKS50aGVuKFxuICAgICAgICAvLyB3YXNtIG1vZHVsZSBpbml0aWFsaXplZCBzdWNjZXNzZnVsbHlcbiAgICAgICAgbW9kdWxlID0+IHtcbiAgICAgICAgICBpbml0aWFsaXppbmcgPSBmYWxzZTtcbiAgICAgICAgICBpbml0aWFsaXplZCA9IHRydWU7XG4gICAgICAgICAgd2FzbSA9IG1vZHVsZTtcbiAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgIH0sXG4gICAgICAgIC8vIHdhc20gbW9kdWxlIGZhaWxlZCB0byBpbml0aWFsaXplXG4gICAgICAgICh3aGF0KSA9PiB7XG4gICAgICAgICAgaW5pdGlhbGl6aW5nID0gZmFsc2U7XG4gICAgICAgICAgYWJvcnRlZCA9IHRydWU7XG4gICAgICAgICAgcmVqZWN0KHdoYXQpO1xuICAgICAgICB9KTtcbiAgfSkpO1xuXG4gIGF3YWl0IFByb21pc2UucmFjZSh0YXNrcyk7XG5cbiAgaWYgKGlzVGltZW91dCkge1xuICAgIHRocm93IG5ldyBFcnJvcihgV2ViQXNzZW1ibHkgYmFja2VuZCBpbml0aWFsaXppbmcgZmFpbGVkIGR1ZSB0byB0aW1lb3V0OiAke3RpbWVvdXR9bXNgKTtcbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IGdldEluc3RhbmNlID0gKCk6IE9ydFdhc21Nb2R1bGUgPT4ge1xuICBpZiAoaW5pdGlhbGl6ZWQgJiYgd2FzbSkge1xuICAgIHJldHVybiB3YXNtO1xuICB9XG5cbiAgdGhyb3cgbmV3IEVycm9yKCdXZWJBc3NlbWJseSBpcyBub3QgaW5pdGlhbGl6ZWQgeWV0LicpO1xufTtcblxuZXhwb3J0IGNvbnN0IGRpc3Bvc2UgPSAoKTogdm9pZCA9PiB7XG4gIGlmIChpbml0aWFsaXplZCAmJiAhaW5pdGlhbGl6aW5nICYmICFhYm9ydGVkKSB7XG4gICAgaW5pdGlhbGl6aW5nID0gdHJ1ZTtcblxuICAgICh3YXNtIGFzIE9ydFdhc21UaHJlYWRlZE1vZHVsZSkuUFRocmVhZD8udGVybWluYXRlQWxsVGhyZWFkcygpO1xuICAgIHdhc20gPSB1bmRlZmluZWQ7XG5cbiAgICBpbml0aWFsaXppbmcgPSBmYWxzZTtcbiAgICBpbml0aWFsaXplZCA9IGZhbHNlO1xuICAgIGFib3J0ZWQgPSB0cnVlO1xuICB9XG59O1xuIiwgIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuXG5pbXBvcnQge2dldEluc3RhbmNlfSBmcm9tICcuL3dhc20tZmFjdG9yeSc7XG5cbmV4cG9ydCBjb25zdCBhbGxvY1dhc21TdHJpbmcgPSAoZGF0YTogc3RyaW5nLCBhbGxvY3M6IG51bWJlcltdKTogbnVtYmVyID0+IHtcbiAgY29uc3Qgd2FzbSA9IGdldEluc3RhbmNlKCk7XG5cbiAgY29uc3QgZGF0YUxlbmd0aCA9IHdhc20ubGVuZ3RoQnl0ZXNVVEY4KGRhdGEpICsgMTtcbiAgY29uc3QgZGF0YU9mZnNldCA9IHdhc20uX21hbGxvYyhkYXRhTGVuZ3RoKTtcbiAgd2FzbS5zdHJpbmdUb1VURjgoZGF0YSwgZGF0YU9mZnNldCwgZGF0YUxlbmd0aCk7XG4gIGFsbG9jcy5wdXNoKGRhdGFPZmZzZXQpO1xuXG4gIHJldHVybiBkYXRhT2Zmc2V0O1xufTtcblxuaW50ZXJmYWNlIEV4dHJhT3B0aW9uc0hhbmRsZXIge1xuICAobmFtZTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nKTogdm9pZDtcbn1cblxuZXhwb3J0IGNvbnN0IGl0ZXJhdGVFeHRyYU9wdGlvbnMgPVxuICAgIChvcHRpb25zOiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPiwgcHJlZml4OiBzdHJpbmcsIHNlZW46IFdlYWtTZXQ8UmVjb3JkPHN0cmluZywgdW5rbm93bj4+LFxuICAgICBoYW5kbGVyOiBFeHRyYU9wdGlvbnNIYW5kbGVyKTogdm9pZCA9PiB7XG4gICAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT0gJ29iamVjdCcgJiYgb3B0aW9ucyAhPT0gbnVsbCkge1xuICAgICAgICBpZiAoc2Vlbi5oYXMob3B0aW9ucykpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NpcmN1bGFyIHJlZmVyZW5jZSBpbiBvcHRpb25zJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2Vlbi5hZGQob3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgT2JqZWN0LmVudHJpZXMob3B0aW9ucykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgIGNvbnN0IG5hbWUgPSAocHJlZml4KSA/IHByZWZpeCArIGtleSA6IGtleTtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICBpdGVyYXRlRXh0cmFPcHRpb25zKHZhbHVlIGFzIFJlY29yZDxzdHJpbmcsIHVua25vd24+LCBuYW1lICsgJy4nLCBzZWVuLCBoYW5kbGVyKTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICBoYW5kbGVyKG5hbWUsIHZhbHVlLnRvU3RyaW5nKCkpO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgaGFuZGxlcihuYW1lLCAodmFsdWUpID8gJzEnIDogJzAnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENhbid0IGhhbmRsZSBleHRyYSBjb25maWcgdHlwZTogJHt0eXBlb2YgdmFsdWV9YCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG5cbi8qKlxuICogY2hlY2sgd2ViIGFzc2VtYmx5IEFQSSdzIGxhc3QgZXJyb3IgYW5kIHRocm93IGVycm9yIGlmIGFueSBlcnJvciBvY2N1cnJlZC5cbiAqIEBwYXJhbSBtZXNzYWdlIGEgbWVzc2FnZSB1c2VkIHdoZW4gYW4gZXJyb3Igb2NjdXJyZWQuXG4gKi9cbmV4cG9ydCBjb25zdCBjaGVja0xhc3RFcnJvciA9IChtZXNzYWdlOiBzdHJpbmcpOiB2b2lkID0+IHtcbiAgY29uc3Qgd2FzbSA9IGdldEluc3RhbmNlKCk7XG5cbiAgY29uc3Qgc3RhY2sgPSB3YXNtLnN0YWNrU2F2ZSgpO1xuICB0cnkge1xuICAgIGNvbnN0IHBhcmFtc09mZnNldCA9IHdhc20uc3RhY2tBbGxvYyg4KTtcbiAgICB3YXNtLl9PcnRHZXRMYXN0RXJyb3IocGFyYW1zT2Zmc2V0LCBwYXJhbXNPZmZzZXQgKyA0KTtcbiAgICBjb25zdCBlcnJvckNvZGUgPSB3YXNtLkhFQVAzMltwYXJhbXNPZmZzZXQgLyA0XTtcbiAgICBjb25zdCBlcnJvck1lc3NhZ2VQb2ludGVyID0gd2FzbS5IRUFQVTMyW3BhcmFtc09mZnNldCAvIDQgKyAxXTtcbiAgICBjb25zdCBlcnJvck1lc3NhZ2UgPSBlcnJvck1lc3NhZ2VQb2ludGVyID8gd2FzbS5VVEY4VG9TdHJpbmcoZXJyb3JNZXNzYWdlUG9pbnRlcikgOiAnJztcbiAgICB0aHJvdyBuZXcgRXJyb3IoYCR7bWVzc2FnZX0gRVJST1JfQ09ERTogJHtlcnJvckNvZGV9LCBFUlJPUl9NRVNTQUdFOiAke2Vycm9yTWVzc2FnZX1gKTtcbiAgfSBmaW5hbGx5IHtcbiAgICB3YXNtLnN0YWNrUmVzdG9yZShzdGFjayk7XG4gIH1cbn07XG4iLCAiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5cbmltcG9ydCB7SW5mZXJlbmNlU2Vzc2lvbn0gZnJvbSAnb25ueHJ1bnRpbWUtY29tbW9uJztcblxuaW1wb3J0IHtnZXRJbnN0YW5jZX0gZnJvbSAnLi93YXNtLWZhY3RvcnknO1xuaW1wb3J0IHthbGxvY1dhc21TdHJpbmcsIGNoZWNrTGFzdEVycm9yLCBpdGVyYXRlRXh0cmFPcHRpb25zfSBmcm9tICcuL3dhc20tdXRpbHMnO1xuXG5leHBvcnQgY29uc3Qgc2V0UnVuT3B0aW9ucyA9IChvcHRpb25zOiBJbmZlcmVuY2VTZXNzaW9uLlJ1bk9wdGlvbnMpOiBbbnVtYmVyLCBudW1iZXJbXV0gPT4ge1xuICBjb25zdCB3YXNtID0gZ2V0SW5zdGFuY2UoKTtcbiAgbGV0IHJ1bk9wdGlvbnNIYW5kbGUgPSAwO1xuICBjb25zdCBhbGxvY3M6IG51bWJlcltdID0gW107XG5cbiAgY29uc3QgcnVuT3B0aW9uczogSW5mZXJlbmNlU2Vzc2lvbi5SdW5PcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICB0cnkge1xuICAgIGlmIChvcHRpb25zPy5sb2dTZXZlcml0eUxldmVsID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJ1bk9wdGlvbnMubG9nU2V2ZXJpdHlMZXZlbCA9IDI7ICAvLyBEZWZhdWx0IHRvIHdhcm5pbmdcbiAgICB9IGVsc2UgaWYgKFxuICAgICAgICB0eXBlb2Ygb3B0aW9ucy5sb2dTZXZlcml0eUxldmVsICE9PSAnbnVtYmVyJyB8fCAhTnVtYmVyLmlzSW50ZWdlcihvcHRpb25zLmxvZ1NldmVyaXR5TGV2ZWwpIHx8XG4gICAgICAgIG9wdGlvbnMubG9nU2V2ZXJpdHlMZXZlbCA8IDAgfHwgb3B0aW9ucy5sb2dTZXZlcml0eUxldmVsID4gNCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBsb2cgc2VydmVyaXR5IGxldmVsIGlzIG5vdCB2YWxpZDogJHtvcHRpb25zLmxvZ1NldmVyaXR5TGV2ZWx9YCk7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnM/LmxvZ1ZlcmJvc2l0eUxldmVsID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJ1bk9wdGlvbnMubG9nVmVyYm9zaXR5TGV2ZWwgPSAwOyAgLy8gRGVmYXVsdCB0byAwXG4gICAgfSBlbHNlIGlmICh0eXBlb2Ygb3B0aW9ucy5sb2dWZXJib3NpdHlMZXZlbCAhPT0gJ251bWJlcicgfHwgIU51bWJlci5pc0ludGVnZXIob3B0aW9ucy5sb2dWZXJib3NpdHlMZXZlbCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgbG9nIHZlcmJvc2l0eSBsZXZlbCBpcyBub3QgdmFsaWQ6ICR7b3B0aW9ucy5sb2dWZXJib3NpdHlMZXZlbH1gKTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucz8udGVybWluYXRlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJ1bk9wdGlvbnMudGVybWluYXRlID0gZmFsc2U7XG4gICAgfVxuXG4gICAgbGV0IHRhZ0RhdGFPZmZzZXQgPSAwO1xuICAgIGlmIChvcHRpb25zPy50YWcgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGFnRGF0YU9mZnNldCA9IGFsbG9jV2FzbVN0cmluZyhvcHRpb25zLnRhZywgYWxsb2NzKTtcbiAgICB9XG5cbiAgICBydW5PcHRpb25zSGFuZGxlID0gd2FzbS5fT3J0Q3JlYXRlUnVuT3B0aW9ucyhcbiAgICAgICAgcnVuT3B0aW9ucy5sb2dTZXZlcml0eUxldmVsISwgcnVuT3B0aW9ucy5sb2dWZXJib3NpdHlMZXZlbCEsICEhcnVuT3B0aW9ucy50ZXJtaW5hdGUhLCB0YWdEYXRhT2Zmc2V0KTtcbiAgICBpZiAocnVuT3B0aW9uc0hhbmRsZSA9PT0gMCkge1xuICAgICAgY2hlY2tMYXN0RXJyb3IoJ0NhblxcJ3QgY3JlYXRlIHJ1biBvcHRpb25zLicpO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zPy5leHRyYSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpdGVyYXRlRXh0cmFPcHRpb25zKG9wdGlvbnMuZXh0cmEsICcnLCBuZXcgV2Vha1NldDxSZWNvcmQ8c3RyaW5nLCB1bmtub3duPj4oKSwgKGtleSwgdmFsdWUpID0+IHtcbiAgICAgICAgY29uc3Qga2V5RGF0YU9mZnNldCA9IGFsbG9jV2FzbVN0cmluZyhrZXksIGFsbG9jcyk7XG4gICAgICAgIGNvbnN0IHZhbHVlRGF0YU9mZnNldCA9IGFsbG9jV2FzbVN0cmluZyh2YWx1ZSwgYWxsb2NzKTtcblxuICAgICAgICBpZiAod2FzbS5fT3J0QWRkUnVuQ29uZmlnRW50cnkocnVuT3B0aW9uc0hhbmRsZSwga2V5RGF0YU9mZnNldCwgdmFsdWVEYXRhT2Zmc2V0KSAhPT0gMCkge1xuICAgICAgICAgIGNoZWNrTGFzdEVycm9yKGBDYW4ndCBzZXQgYSBydW4gY29uZmlnIGVudHJ5OiAke2tleX0gLSAke3ZhbHVlfS5gKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIFtydW5PcHRpb25zSGFuZGxlLCBhbGxvY3NdO1xuICB9IGNhdGNoIChlKSB7XG4gICAgaWYgKHJ1bk9wdGlvbnNIYW5kbGUgIT09IDApIHtcbiAgICAgIHdhc20uX09ydFJlbGVhc2VSdW5PcHRpb25zKHJ1bk9wdGlvbnNIYW5kbGUpO1xuICAgIH1cbiAgICBhbGxvY3MuZm9yRWFjaChhbGxvYyA9PiB3YXNtLl9mcmVlKGFsbG9jKSk7XG4gICAgdGhyb3cgZTtcbiAgfVxufTtcbiIsICIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cblxuaW1wb3J0IHtJbmZlcmVuY2VTZXNzaW9ufSBmcm9tICdvbm54cnVudGltZS1jb21tb24nO1xuXG5pbXBvcnQge2dldEluc3RhbmNlfSBmcm9tICcuL3dhc20tZmFjdG9yeSc7XG5pbXBvcnQge2FsbG9jV2FzbVN0cmluZywgY2hlY2tMYXN0RXJyb3IsIGl0ZXJhdGVFeHRyYU9wdGlvbnN9IGZyb20gJy4vd2FzbS11dGlscyc7XG5cbmNvbnN0IGdldEdyYXBoT3B0aW16YXRpb25MZXZlbCA9IChncmFwaE9wdGltaXphdGlvbkxldmVsOiBzdHJpbmd8dW5rbm93bik6IG51bWJlciA9PiB7XG4gIHN3aXRjaCAoZ3JhcGhPcHRpbWl6YXRpb25MZXZlbCkge1xuICAgIGNhc2UgJ2Rpc2FibGVkJzpcbiAgICAgIHJldHVybiAwO1xuICAgIGNhc2UgJ2Jhc2ljJzpcbiAgICAgIHJldHVybiAxO1xuICAgIGNhc2UgJ2V4dGVuZGVkJzpcbiAgICAgIHJldHVybiAyO1xuICAgIGNhc2UgJ2FsbCc6XG4gICAgICByZXR1cm4gOTk7XG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBFcnJvcihgdW5zdXBwb3J0ZWQgZ3JhcGggb3B0aW1pemF0aW9uIGxldmVsOiAke2dyYXBoT3B0aW1pemF0aW9uTGV2ZWx9YCk7XG4gIH1cbn07XG5cbmNvbnN0IGdldEV4ZWN1dGlvbk1vZGUgPSAoZXhlY3V0aW9uTW9kZTogJ3NlcXVlbnRpYWwnfCdwYXJhbGxlbCcpOiBudW1iZXIgPT4ge1xuICBzd2l0Y2ggKGV4ZWN1dGlvbk1vZGUpIHtcbiAgICBjYXNlICdzZXF1ZW50aWFsJzpcbiAgICAgIHJldHVybiAwO1xuICAgIGNhc2UgJ3BhcmFsbGVsJzpcbiAgICAgIHJldHVybiAxO1xuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYHVuc3VwcG9ydGVkIGV4ZWN1dGlvbiBtb2RlOiAke2V4ZWN1dGlvbk1vZGV9YCk7XG4gIH1cbn07XG5cbmNvbnN0IGFwcGVuZERlZmF1bHRPcHRpb25zID0gKG9wdGlvbnM6IEluZmVyZW5jZVNlc3Npb24uU2Vzc2lvbk9wdGlvbnMpOiB2b2lkID0+IHtcbiAgaWYgKCFvcHRpb25zLmV4dHJhKSB7XG4gICAgb3B0aW9ucy5leHRyYSA9IHt9O1xuICB9XG4gIGlmICghb3B0aW9ucy5leHRyYS5zZXNzaW9uKSB7XG4gICAgb3B0aW9ucy5leHRyYS5zZXNzaW9uID0ge307XG4gIH1cbiAgY29uc3Qgc2Vzc2lvbiA9IG9wdGlvbnMuZXh0cmEuc2Vzc2lvbiBhcyBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+O1xuICBpZiAoIXNlc3Npb24udXNlX29ydF9tb2RlbF9ieXRlc19kaXJlY3RseSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjYW1lbGNhc2VcbiAgICBzZXNzaW9uLnVzZV9vcnRfbW9kZWxfYnl0ZXNfZGlyZWN0bHkgPSAnMSc7XG4gIH1cblxuICAvLyBpZiB1c2luZyBKU0VQIHdpdGggV2ViR1BVLCBhbHdheXMgZGlzYWJsZSBtZW1vcnkgcGF0dGVyblxuICBpZiAob3B0aW9ucy5leGVjdXRpb25Qcm92aWRlcnMgJiZcbiAgICAgIG9wdGlvbnMuZXhlY3V0aW9uUHJvdmlkZXJzLnNvbWUoZXAgPT4gKHR5cGVvZiBlcCA9PT0gJ3N0cmluZycgPyBlcCA6IGVwLm5hbWUpID09PSAnd2ViZ3B1JykpIHtcbiAgICBvcHRpb25zLmVuYWJsZU1lbVBhdHRlcm4gPSBmYWxzZTtcbiAgfVxufTtcblxuY29uc3Qgc2V0RXhlY3V0aW9uUHJvdmlkZXJzID1cbiAgICAoc2Vzc2lvbk9wdGlvbnNIYW5kbGU6IG51bWJlciwgZXhlY3V0aW9uUHJvdmlkZXJzOiByZWFkb25seSBJbmZlcmVuY2VTZXNzaW9uLkV4ZWN1dGlvblByb3ZpZGVyQ29uZmlnW10sXG4gICAgIGFsbG9jczogbnVtYmVyW10pOiB2b2lkID0+IHtcbiAgICAgIGZvciAoY29uc3QgZXAgb2YgZXhlY3V0aW9uUHJvdmlkZXJzKSB7XG4gICAgICAgIGxldCBlcE5hbWUgPSB0eXBlb2YgZXAgPT09ICdzdHJpbmcnID8gZXAgOiBlcC5uYW1lO1xuXG4gICAgICAgIC8vIGNoZWNrIEVQIG5hbWVcbiAgICAgICAgc3dpdGNoIChlcE5hbWUpIHtcbiAgICAgICAgICBjYXNlICd3ZWJubic6XG4gICAgICAgICAgICBlcE5hbWUgPSAnV0VCTk4nO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBlcCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgY29uc3Qgd2Vibm5PcHRpb25zID0gZXAgYXMgSW5mZXJlbmNlU2Vzc2lvbi5XZWJOTkV4ZWN1dGlvblByb3ZpZGVyT3B0aW9uO1xuICAgICAgICAgICAgICBpZiAod2Vibm5PcHRpb25zPy5kZXZpY2VUeXBlKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qga2V5RGF0YU9mZnNldCA9IGFsbG9jV2FzbVN0cmluZygnZGV2aWNlVHlwZScsIGFsbG9jcyk7XG4gICAgICAgICAgICAgICAgY29uc3QgdmFsdWVEYXRhT2Zmc2V0ID0gYWxsb2NXYXNtU3RyaW5nKHdlYm5uT3B0aW9ucy5kZXZpY2VUeXBlLCBhbGxvY3MpO1xuICAgICAgICAgICAgICAgIGlmIChnZXRJbnN0YW5jZSgpLl9PcnRBZGRTZXNzaW9uQ29uZmlnRW50cnkoc2Vzc2lvbk9wdGlvbnNIYW5kbGUsIGtleURhdGFPZmZzZXQsIHZhbHVlRGF0YU9mZnNldCkgIT09XG4gICAgICAgICAgICAgICAgICAgIDApIHtcbiAgICAgICAgICAgICAgICAgIGNoZWNrTGFzdEVycm9yKGBDYW4ndCBzZXQgYSBzZXNzaW9uIGNvbmZpZyBlbnRyeTogJ2RldmljZVR5cGUnIC0gJHt3ZWJubk9wdGlvbnMuZGV2aWNlVHlwZX0uYCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmICh3ZWJubk9wdGlvbnM/Lm51bVRocmVhZHMpIHtcbiAgICAgICAgICAgICAgICBsZXQgbnVtVGhyZWFkcyA9IHdlYm5uT3B0aW9ucy5udW1UaHJlYWRzO1xuICAgICAgICAgICAgICAgIC8vIEp1c3QgaWdub3JlIGludmFsaWQgd2Vibm5PcHRpb25zLm51bVRocmVhZHMuXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBudW1UaHJlYWRzICE9ICdudW1iZXInIHx8ICFOdW1iZXIuaXNJbnRlZ2VyKG51bVRocmVhZHMpIHx8IG51bVRocmVhZHMgPCAwKSB7XG4gICAgICAgICAgICAgICAgICBudW1UaHJlYWRzID0gMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3Qga2V5RGF0YU9mZnNldCA9IGFsbG9jV2FzbVN0cmluZygnbnVtVGhyZWFkcycsIGFsbG9jcyk7XG4gICAgICAgICAgICAgICAgY29uc3QgdmFsdWVEYXRhT2Zmc2V0ID0gYWxsb2NXYXNtU3RyaW5nKG51bVRocmVhZHMudG9TdHJpbmcoKSwgYWxsb2NzKTtcbiAgICAgICAgICAgICAgICBpZiAoZ2V0SW5zdGFuY2UoKS5fT3J0QWRkU2Vzc2lvbkNvbmZpZ0VudHJ5KHNlc3Npb25PcHRpb25zSGFuZGxlLCBrZXlEYXRhT2Zmc2V0LCB2YWx1ZURhdGFPZmZzZXQpICE9PVxuICAgICAgICAgICAgICAgICAgICAwKSB7XG4gICAgICAgICAgICAgICAgICBjaGVja0xhc3RFcnJvcihgQ2FuJ3Qgc2V0IGEgc2Vzc2lvbiBjb25maWcgZW50cnk6ICdudW1UaHJlYWRzJyAtICR7d2Vibm5PcHRpb25zLm51bVRocmVhZHN9LmApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAod2Vibm5PcHRpb25zPy5wb3dlclByZWZlcmVuY2UpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBrZXlEYXRhT2Zmc2V0ID0gYWxsb2NXYXNtU3RyaW5nKCdwb3dlclByZWZlcmVuY2UnLCBhbGxvY3MpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlRGF0YU9mZnNldCA9IGFsbG9jV2FzbVN0cmluZyh3ZWJubk9wdGlvbnMucG93ZXJQcmVmZXJlbmNlLCBhbGxvY3MpO1xuICAgICAgICAgICAgICAgIGlmIChnZXRJbnN0YW5jZSgpLl9PcnRBZGRTZXNzaW9uQ29uZmlnRW50cnkoc2Vzc2lvbk9wdGlvbnNIYW5kbGUsIGtleURhdGFPZmZzZXQsIHZhbHVlRGF0YU9mZnNldCkgIT09XG4gICAgICAgICAgICAgICAgICAgIDApIHtcbiAgICAgICAgICAgICAgICAgIGNoZWNrTGFzdEVycm9yKFxuICAgICAgICAgICAgICAgICAgICAgIGBDYW4ndCBzZXQgYSBzZXNzaW9uIGNvbmZpZyBlbnRyeTogJ3Bvd2VyUHJlZmVyZW5jZScgLSAke3dlYm5uT3B0aW9ucy5wb3dlclByZWZlcmVuY2V9LmApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnd2ViZ3B1JzpcbiAgICAgICAgICAgIGVwTmFtZSA9ICdKUyc7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGVwICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICBjb25zdCB3ZWJncHVPcHRpb25zID0gZXAgYXMgSW5mZXJlbmNlU2Vzc2lvbi5XZWJHcHVFeGVjdXRpb25Qcm92aWRlck9wdGlvbjtcbiAgICAgICAgICAgICAgaWYgKHdlYmdwdU9wdGlvbnM/LnByZWZlcnJlZExheW91dCkge1xuICAgICAgICAgICAgICAgIGlmICh3ZWJncHVPcHRpb25zLnByZWZlcnJlZExheW91dCAhPT0gJ05DSFcnICYmIHdlYmdwdU9wdGlvbnMucHJlZmVycmVkTGF5b3V0ICE9PSAnTkhXQycpIHtcbiAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgcHJlZmVycmVkTGF5b3V0IG11c3QgYmUgZWl0aGVyICdOQ0hXJyBvciAnTkhXQyc6ICR7d2ViZ3B1T3B0aW9ucy5wcmVmZXJyZWRMYXlvdXR9YCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IGtleURhdGFPZmZzZXQgPSBhbGxvY1dhc21TdHJpbmcoJ3ByZWZlcnJlZExheW91dCcsIGFsbG9jcyk7XG4gICAgICAgICAgICAgICAgY29uc3QgdmFsdWVEYXRhT2Zmc2V0ID0gYWxsb2NXYXNtU3RyaW5nKHdlYmdwdU9wdGlvbnMucHJlZmVycmVkTGF5b3V0LCBhbGxvY3MpO1xuICAgICAgICAgICAgICAgIGlmIChnZXRJbnN0YW5jZSgpLl9PcnRBZGRTZXNzaW9uQ29uZmlnRW50cnkoc2Vzc2lvbk9wdGlvbnNIYW5kbGUsIGtleURhdGFPZmZzZXQsIHZhbHVlRGF0YU9mZnNldCkgIT09XG4gICAgICAgICAgICAgICAgICAgIDApIHtcbiAgICAgICAgICAgICAgICAgIGNoZWNrTGFzdEVycm9yKFxuICAgICAgICAgICAgICAgICAgICAgIGBDYW4ndCBzZXQgYSBzZXNzaW9uIGNvbmZpZyBlbnRyeTogJ3ByZWZlcnJlZExheW91dCcgLSAke3dlYmdwdU9wdGlvbnMucHJlZmVycmVkTGF5b3V0fS5gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ3dhc20nOlxuICAgICAgICAgIGNhc2UgJ2NwdSc6XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBub3Qgc3VwcG9ydGVkIGV4ZWN1dGlvbiBwcm92aWRlcjogJHtlcE5hbWV9YCk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBlcE5hbWVEYXRhT2Zmc2V0ID0gYWxsb2NXYXNtU3RyaW5nKGVwTmFtZSwgYWxsb2NzKTtcbiAgICAgICAgaWYgKGdldEluc3RhbmNlKCkuX09ydEFwcGVuZEV4ZWN1dGlvblByb3ZpZGVyKHNlc3Npb25PcHRpb25zSGFuZGxlLCBlcE5hbWVEYXRhT2Zmc2V0KSAhPT0gMCkge1xuICAgICAgICAgIGNoZWNrTGFzdEVycm9yKGBDYW4ndCBhcHBlbmQgZXhlY3V0aW9uIHByb3ZpZGVyOiAke2VwTmFtZX0uYCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG5leHBvcnQgY29uc3Qgc2V0U2Vzc2lvbk9wdGlvbnMgPSAob3B0aW9ucz86IEluZmVyZW5jZVNlc3Npb24uU2Vzc2lvbk9wdGlvbnMpOiBbbnVtYmVyLCBudW1iZXJbXV0gPT4ge1xuICBjb25zdCB3YXNtID0gZ2V0SW5zdGFuY2UoKTtcbiAgbGV0IHNlc3Npb25PcHRpb25zSGFuZGxlID0gMDtcbiAgY29uc3QgYWxsb2NzOiBudW1iZXJbXSA9IFtdO1xuXG4gIGNvbnN0IHNlc3Npb25PcHRpb25zOiBJbmZlcmVuY2VTZXNzaW9uLlNlc3Npb25PcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgYXBwZW5kRGVmYXVsdE9wdGlvbnMoc2Vzc2lvbk9wdGlvbnMpO1xuXG4gIHRyeSB7XG4gICAgY29uc3QgZ3JhcGhPcHRpbWl6YXRpb25MZXZlbCA9IGdldEdyYXBoT3B0aW16YXRpb25MZXZlbChzZXNzaW9uT3B0aW9ucy5ncmFwaE9wdGltaXphdGlvbkxldmVsID8/ICdhbGwnKTtcbiAgICBjb25zdCBleGVjdXRpb25Nb2RlID0gZ2V0RXhlY3V0aW9uTW9kZShzZXNzaW9uT3B0aW9ucy5leGVjdXRpb25Nb2RlID8/ICdzZXF1ZW50aWFsJyk7XG4gICAgY29uc3QgbG9nSWREYXRhT2Zmc2V0ID1cbiAgICAgICAgdHlwZW9mIHNlc3Npb25PcHRpb25zLmxvZ0lkID09PSAnc3RyaW5nJyA/IGFsbG9jV2FzbVN0cmluZyhzZXNzaW9uT3B0aW9ucy5sb2dJZCwgYWxsb2NzKSA6IDA7XG5cbiAgICBjb25zdCBsb2dTZXZlcml0eUxldmVsID0gc2Vzc2lvbk9wdGlvbnMubG9nU2V2ZXJpdHlMZXZlbCA/PyAyOyAgLy8gRGVmYXVsdCB0byAyIC0gd2FybmluZ1xuICAgIGlmICghTnVtYmVyLmlzSW50ZWdlcihsb2dTZXZlcml0eUxldmVsKSB8fCBsb2dTZXZlcml0eUxldmVsIDwgMCB8fCBsb2dTZXZlcml0eUxldmVsID4gNCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBsb2cgc2VydmVyaXR5IGxldmVsIGlzIG5vdCB2YWxpZDogJHtsb2dTZXZlcml0eUxldmVsfWApO1xuICAgIH1cblxuICAgIGNvbnN0IGxvZ1ZlcmJvc2l0eUxldmVsID0gc2Vzc2lvbk9wdGlvbnMubG9nVmVyYm9zaXR5TGV2ZWwgPz8gMDsgIC8vIERlZmF1bHQgdG8gMCAtIHZlcmJvc2VcbiAgICBpZiAoIU51bWJlci5pc0ludGVnZXIobG9nVmVyYm9zaXR5TGV2ZWwpIHx8IGxvZ1ZlcmJvc2l0eUxldmVsIDwgMCB8fCBsb2dWZXJib3NpdHlMZXZlbCA+IDQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgbG9nIHZlcmJvc2l0eSBsZXZlbCBpcyBub3QgdmFsaWQ6ICR7bG9nVmVyYm9zaXR5TGV2ZWx9YCk7XG4gICAgfVxuXG4gICAgY29uc3Qgb3B0aW1pemVkTW9kZWxGaWxlUGF0aE9mZnNldCA9IHR5cGVvZiBzZXNzaW9uT3B0aW9ucy5vcHRpbWl6ZWRNb2RlbEZpbGVQYXRoID09PSAnc3RyaW5nJyA/XG4gICAgICAgIGFsbG9jV2FzbVN0cmluZyhzZXNzaW9uT3B0aW9ucy5vcHRpbWl6ZWRNb2RlbEZpbGVQYXRoLCBhbGxvY3MpIDpcbiAgICAgICAgMDtcblxuICAgIHNlc3Npb25PcHRpb25zSGFuZGxlID0gd2FzbS5fT3J0Q3JlYXRlU2Vzc2lvbk9wdGlvbnMoXG4gICAgICAgIGdyYXBoT3B0aW1pemF0aW9uTGV2ZWwsICEhc2Vzc2lvbk9wdGlvbnMuZW5hYmxlQ3B1TWVtQXJlbmEsICEhc2Vzc2lvbk9wdGlvbnMuZW5hYmxlTWVtUGF0dGVybiwgZXhlY3V0aW9uTW9kZSxcbiAgICAgICAgISFzZXNzaW9uT3B0aW9ucy5lbmFibGVQcm9maWxpbmcsIDAsIGxvZ0lkRGF0YU9mZnNldCwgbG9nU2V2ZXJpdHlMZXZlbCwgbG9nVmVyYm9zaXR5TGV2ZWwsXG4gICAgICAgIG9wdGltaXplZE1vZGVsRmlsZVBhdGhPZmZzZXQpO1xuICAgIGlmIChzZXNzaW9uT3B0aW9uc0hhbmRsZSA9PT0gMCkge1xuICAgICAgY2hlY2tMYXN0RXJyb3IoJ0NhblxcJ3QgY3JlYXRlIHNlc3Npb24gb3B0aW9ucy4nKTtcbiAgICB9XG5cbiAgICBpZiAoc2Vzc2lvbk9wdGlvbnMuZXhlY3V0aW9uUHJvdmlkZXJzKSB7XG4gICAgICBzZXRFeGVjdXRpb25Qcm92aWRlcnMoc2Vzc2lvbk9wdGlvbnNIYW5kbGUsIHNlc3Npb25PcHRpb25zLmV4ZWN1dGlvblByb3ZpZGVycywgYWxsb2NzKTtcbiAgICB9XG5cbiAgICBpZiAoc2Vzc2lvbk9wdGlvbnMuZW5hYmxlR3JhcGhDYXB0dXJlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmICh0eXBlb2Ygc2Vzc2lvbk9wdGlvbnMuZW5hYmxlR3JhcGhDYXB0dXJlICE9PSAnYm9vbGVhbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBlbmFibGVHcmFwaENhcHR1cmUgbXVzdCBiZSBhIGJvb2xlYW4gdmFsdWU6ICR7c2Vzc2lvbk9wdGlvbnMuZW5hYmxlR3JhcGhDYXB0dXJlfWApO1xuICAgICAgfVxuICAgICAgY29uc3Qga2V5RGF0YU9mZnNldCA9IGFsbG9jV2FzbVN0cmluZygnZW5hYmxlR3JhcGhDYXB0dXJlJywgYWxsb2NzKTtcbiAgICAgIGNvbnN0IHZhbHVlRGF0YU9mZnNldCA9IGFsbG9jV2FzbVN0cmluZyhzZXNzaW9uT3B0aW9ucy5lbmFibGVHcmFwaENhcHR1cmUudG9TdHJpbmcoKSwgYWxsb2NzKTtcbiAgICAgIGlmICh3YXNtLl9PcnRBZGRTZXNzaW9uQ29uZmlnRW50cnkoc2Vzc2lvbk9wdGlvbnNIYW5kbGUsIGtleURhdGFPZmZzZXQsIHZhbHVlRGF0YU9mZnNldCkgIT09IDApIHtcbiAgICAgICAgY2hlY2tMYXN0RXJyb3IoXG4gICAgICAgICAgICBgQ2FuJ3Qgc2V0IGEgc2Vzc2lvbiBjb25maWcgZW50cnk6ICdlbmFibGVHcmFwaENhcHR1cmUnIC0gJHtzZXNzaW9uT3B0aW9ucy5lbmFibGVHcmFwaENhcHR1cmV9LmApO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChzZXNzaW9uT3B0aW9ucy5mcmVlRGltZW5zaW9uT3ZlcnJpZGVzKSB7XG4gICAgICBmb3IgKGNvbnN0IFtuYW1lLCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMoc2Vzc2lvbk9wdGlvbnMuZnJlZURpbWVuc2lvbk92ZXJyaWRlcykpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBuYW1lICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgZnJlZSBkaW1lbnNpb24gb3ZlcnJpZGUgbmFtZSBtdXN0IGJlIGEgc3RyaW5nOiAke25hbWV9YCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ251bWJlcicgfHwgIU51bWJlci5pc0ludGVnZXIodmFsdWUpIHx8IHZhbHVlIDwgMCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgZnJlZSBkaW1lbnNpb24gb3ZlcnJpZGUgdmFsdWUgbXVzdCBiZSBhIG5vbi1uZWdhdGl2ZSBpbnRlZ2VyOiAke3ZhbHVlfWApO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG5hbWVPZmZzZXQgPSBhbGxvY1dhc21TdHJpbmcobmFtZSwgYWxsb2NzKTtcbiAgICAgICAgaWYgKHdhc20uX09ydEFkZEZyZWVEaW1lbnNpb25PdmVycmlkZShzZXNzaW9uT3B0aW9uc0hhbmRsZSwgbmFtZU9mZnNldCwgdmFsdWUpICE9PSAwKSB7XG4gICAgICAgICAgY2hlY2tMYXN0RXJyb3IoYENhbid0IHNldCBhIGZyZWUgZGltZW5zaW9uIG92ZXJyaWRlOiAke25hbWV9IC0gJHt2YWx1ZX0uYCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoc2Vzc2lvbk9wdGlvbnMuZXh0cmEgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaXRlcmF0ZUV4dHJhT3B0aW9ucyhzZXNzaW9uT3B0aW9ucy5leHRyYSwgJycsIG5ldyBXZWFrU2V0PFJlY29yZDxzdHJpbmcsIHVua25vd24+PigpLCAoa2V5LCB2YWx1ZSkgPT4ge1xuICAgICAgICBjb25zdCBrZXlEYXRhT2Zmc2V0ID0gYWxsb2NXYXNtU3RyaW5nKGtleSwgYWxsb2NzKTtcbiAgICAgICAgY29uc3QgdmFsdWVEYXRhT2Zmc2V0ID0gYWxsb2NXYXNtU3RyaW5nKHZhbHVlLCBhbGxvY3MpO1xuXG4gICAgICAgIGlmICh3YXNtLl9PcnRBZGRTZXNzaW9uQ29uZmlnRW50cnkoc2Vzc2lvbk9wdGlvbnNIYW5kbGUsIGtleURhdGFPZmZzZXQsIHZhbHVlRGF0YU9mZnNldCkgIT09IDApIHtcbiAgICAgICAgICBjaGVja0xhc3RFcnJvcihgQ2FuJ3Qgc2V0IGEgc2Vzc2lvbiBjb25maWcgZW50cnk6ICR7a2V5fSAtICR7dmFsdWV9LmApO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gW3Nlc3Npb25PcHRpb25zSGFuZGxlLCBhbGxvY3NdO1xuICB9IGNhdGNoIChlKSB7XG4gICAgaWYgKHNlc3Npb25PcHRpb25zSGFuZGxlICE9PSAwKSB7XG4gICAgICB3YXNtLl9PcnRSZWxlYXNlU2Vzc2lvbk9wdGlvbnMoc2Vzc2lvbk9wdGlvbnNIYW5kbGUpO1xuICAgIH1cbiAgICBhbGxvY3MuZm9yRWFjaChhbGxvYyA9PiB3YXNtLl9mcmVlKGFsbG9jKSk7XG4gICAgdGhyb3cgZTtcbiAgfVxufTtcbiIsICIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cblxuaW1wb3J0IHtUZW5zb3J9IGZyb20gJ29ubnhydW50aW1lLWNvbW1vbic7XG5cbi8vIGEgZHVtbXkgdHlwZSBkZWNsYXJhdGlvbiBmb3IgRmxvYXQxNkFycmF5IGluIGNhc2UgYW55IHBvbHlmaWxsIGlzIGF2YWlsYWJsZS5cbmRlY2xhcmUgZ2xvYmFsIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uYW1pbmctY29udmVudGlvbiwgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICBjb25zdCBGbG9hdDE2QXJyYXk6IGFueTtcbn1cblxuLy8gVGhpcyBmaWxlIGluY2x1ZGVzIGNvbW1vbiBkZWZpbml0aW9ucy4gVGhleSBkbyBOT1QgaGF2ZSBkZXBlbmRlbmN5IG9uIHRoZSBXZWJBc3NlbWJseSBpbnN0YW5jZS5cblxuLyoqXG4gKiBDb3BpZWQgZnJvbSBPTk5YIGRlZmluaXRpb24uIFVzZSB0aGlzIHRvIGRyb3AgZGVwZW5kZW5jeSAnb25ueF9wcm90bycgdG8gZGVjcmVhc2UgY29tcGlsZWQgLmpzIGZpbGUgc2l6ZS5cbiAqL1xuZXhwb3J0IGNvbnN0IGVudW0gRGF0YVR5cGUge1xuICB1bmRlZmluZWQgPSAwLFxuICBmbG9hdCA9IDEsXG4gIHVpbnQ4ID0gMixcbiAgaW50OCA9IDMsXG4gIHVpbnQxNiA9IDQsXG4gIGludDE2ID0gNSxcbiAgaW50MzIgPSA2LFxuICBpbnQ2NCA9IDcsXG4gIHN0cmluZyA9IDgsXG4gIGJvb2wgPSA5LFxuICBmbG9hdDE2ID0gMTAsXG4gIGRvdWJsZSA9IDExLFxuICB1aW50MzIgPSAxMixcbiAgdWludDY0ID0gMTMsXG4gIGNvbXBsZXg2NCA9IDE0LFxuICBjb21wbGV4MTI4ID0gMTUsXG4gIGJmbG9hdDE2ID0gMTZcbn1cblxuLyoqXG4gKiBNYXAgc3RyaW5nIHRlbnNvciBkYXRhIHRvIGVudW0gdmFsdWVcbiAqL1xuZXhwb3J0IGNvbnN0IHRlbnNvckRhdGFUeXBlU3RyaW5nVG9FbnVtID0gKHR5cGU6IHN0cmluZyk6IERhdGFUeXBlID0+IHtcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSAnaW50OCc6XG4gICAgICByZXR1cm4gRGF0YVR5cGUuaW50ODtcbiAgICBjYXNlICd1aW50OCc6XG4gICAgICByZXR1cm4gRGF0YVR5cGUudWludDg7XG4gICAgY2FzZSAnYm9vbCc6XG4gICAgICByZXR1cm4gRGF0YVR5cGUuYm9vbDtcbiAgICBjYXNlICdpbnQxNic6XG4gICAgICByZXR1cm4gRGF0YVR5cGUuaW50MTY7XG4gICAgY2FzZSAndWludDE2JzpcbiAgICAgIHJldHVybiBEYXRhVHlwZS51aW50MTY7XG4gICAgY2FzZSAnaW50MzInOlxuICAgICAgcmV0dXJuIERhdGFUeXBlLmludDMyO1xuICAgIGNhc2UgJ3VpbnQzMic6XG4gICAgICByZXR1cm4gRGF0YVR5cGUudWludDMyO1xuICAgIGNhc2UgJ2Zsb2F0MTYnOlxuICAgICAgcmV0dXJuIERhdGFUeXBlLmZsb2F0MTY7XG4gICAgY2FzZSAnZmxvYXQzMic6XG4gICAgICByZXR1cm4gRGF0YVR5cGUuZmxvYXQ7XG4gICAgY2FzZSAnZmxvYXQ2NCc6XG4gICAgICByZXR1cm4gRGF0YVR5cGUuZG91YmxlO1xuICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICByZXR1cm4gRGF0YVR5cGUuc3RyaW5nO1xuICAgIGNhc2UgJ2ludDY0JzpcbiAgICAgIHJldHVybiBEYXRhVHlwZS5pbnQ2NDtcbiAgICBjYXNlICd1aW50NjQnOlxuICAgICAgcmV0dXJuIERhdGFUeXBlLnVpbnQ2NDtcblxuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYHVuc3VwcG9ydGVkIGRhdGEgdHlwZTogJHt0eXBlfWApO1xuICB9XG59O1xuXG4vKipcbiAqIE1hcCBlbnVtIHZhbHVlIHRvIHN0cmluZyB0ZW5zb3IgZGF0YVxuICovXG5leHBvcnQgY29uc3QgdGVuc29yRGF0YVR5cGVFbnVtVG9TdHJpbmcgPSAodHlwZVByb3RvOiBEYXRhVHlwZSk6IFRlbnNvci5UeXBlID0+IHtcbiAgc3dpdGNoICh0eXBlUHJvdG8pIHtcbiAgICBjYXNlIERhdGFUeXBlLmludDg6XG4gICAgICByZXR1cm4gJ2ludDgnO1xuICAgIGNhc2UgRGF0YVR5cGUudWludDg6XG4gICAgICByZXR1cm4gJ3VpbnQ4JztcbiAgICBjYXNlIERhdGFUeXBlLmJvb2w6XG4gICAgICByZXR1cm4gJ2Jvb2wnO1xuICAgIGNhc2UgRGF0YVR5cGUuaW50MTY6XG4gICAgICByZXR1cm4gJ2ludDE2JztcbiAgICBjYXNlIERhdGFUeXBlLnVpbnQxNjpcbiAgICAgIHJldHVybiAndWludDE2JztcbiAgICBjYXNlIERhdGFUeXBlLmludDMyOlxuICAgICAgcmV0dXJuICdpbnQzMic7XG4gICAgY2FzZSBEYXRhVHlwZS51aW50MzI6XG4gICAgICByZXR1cm4gJ3VpbnQzMic7XG4gICAgY2FzZSBEYXRhVHlwZS5mbG9hdDE2OlxuICAgICAgcmV0dXJuICdmbG9hdDE2JztcbiAgICBjYXNlIERhdGFUeXBlLmZsb2F0OlxuICAgICAgcmV0dXJuICdmbG9hdDMyJztcbiAgICBjYXNlIERhdGFUeXBlLmRvdWJsZTpcbiAgICAgIHJldHVybiAnZmxvYXQ2NCc7XG4gICAgY2FzZSBEYXRhVHlwZS5zdHJpbmc6XG4gICAgICByZXR1cm4gJ3N0cmluZyc7XG4gICAgY2FzZSBEYXRhVHlwZS5pbnQ2NDpcbiAgICAgIHJldHVybiAnaW50NjQnO1xuICAgIGNhc2UgRGF0YVR5cGUudWludDY0OlxuICAgICAgcmV0dXJuICd1aW50NjQnO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBFcnJvcihgdW5zdXBwb3J0ZWQgZGF0YSB0eXBlOiAke3R5cGVQcm90b31gKTtcbiAgfVxufTtcblxuLyoqXG4gKiBnZXQgdGVuc29yIGVsZW1lbnQgc2l6ZSBpbiBieXRlcyBieSB0aGUgZ2l2ZW4gZGF0YSB0eXBlXG4gKiBAcmV0dXJucyBzaXplIGluIGludGVnZXIgb3IgdW5kZWZpbmVkIGlmIHRoZSBkYXRhIHR5cGUgaXMgbm90IHN1cHBvcnRlZFxuICovXG5leHBvcnQgY29uc3QgZ2V0VGVuc29yRWxlbWVudFNpemUgPSAoZGF0ZVR5cGU6IG51bWJlcik6IG51bWJlcnxcbiAgICB1bmRlZmluZWQgPT4gW3VuZGVmaW5lZCwgNCwgMSwgMSwgMiwgMiwgNCwgOCwgdW5kZWZpbmVkLCAxLCAyLCA4LCA0LCA4LCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkXVtkYXRlVHlwZV07XG5cbi8qKlxuICogZ2V0IHR5cGVkIGFycmF5IGNvbnN0cnVjdG9yIGJ5IHRoZSBnaXZlbiB0ZW5zb3IgdHlwZVxuICovXG5leHBvcnQgY29uc3QgdGVuc29yVHlwZVRvVHlwZWRBcnJheUNvbnN0cnVjdG9yID0gKHR5cGU6IFRlbnNvci5UeXBlKTogRmxvYXQzMkFycmF5Q29uc3RydWN0b3J8VWludDhBcnJheUNvbnN0cnVjdG9yfFxuICAgIEludDhBcnJheUNvbnN0cnVjdG9yfFVpbnQxNkFycmF5Q29uc3RydWN0b3J8SW50MTZBcnJheUNvbnN0cnVjdG9yfEludDMyQXJyYXlDb25zdHJ1Y3RvcnxCaWdJbnQ2NEFycmF5Q29uc3RydWN0b3J8XG4gICAgVWludDhBcnJheUNvbnN0cnVjdG9yfEZsb2F0NjRBcnJheUNvbnN0cnVjdG9yfFVpbnQzMkFycmF5Q29uc3RydWN0b3J8QmlnVWludDY0QXJyYXlDb25zdHJ1Y3RvciA9PiB7XG4gICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgY2FzZSAnZmxvYXQxNic6XG4gICAgICAgICAgLy8gYWxsb3cgRmxvYXQxNkFycmF5IHBvbHlmaWxsLlxuICAgICAgICAgIHJldHVybiB0eXBlb2YgRmxvYXQxNkFycmF5ICE9PSAndW5kZWZpbmVkJyAmJiBGbG9hdDE2QXJyYXkuZnJvbSA/IEZsb2F0MTZBcnJheSA6IFVpbnQxNkFycmF5O1xuICAgICAgICBjYXNlICdmbG9hdDMyJzpcbiAgICAgICAgICByZXR1cm4gRmxvYXQzMkFycmF5O1xuICAgICAgICBjYXNlICd1aW50OCc6XG4gICAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXk7XG4gICAgICAgIGNhc2UgJ2ludDgnOlxuICAgICAgICAgIHJldHVybiBJbnQ4QXJyYXk7XG4gICAgICAgIGNhc2UgJ3VpbnQxNic6XG4gICAgICAgICAgcmV0dXJuIFVpbnQxNkFycmF5O1xuICAgICAgICBjYXNlICdpbnQxNic6XG4gICAgICAgICAgcmV0dXJuIEludDE2QXJyYXk7XG4gICAgICAgIGNhc2UgJ2ludDMyJzpcbiAgICAgICAgICByZXR1cm4gSW50MzJBcnJheTtcbiAgICAgICAgY2FzZSAnYm9vbCc6XG4gICAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXk7XG4gICAgICAgIGNhc2UgJ2Zsb2F0NjQnOlxuICAgICAgICAgIHJldHVybiBGbG9hdDY0QXJyYXk7XG4gICAgICAgIGNhc2UgJ3VpbnQzMic6XG4gICAgICAgICAgcmV0dXJuIFVpbnQzMkFycmF5O1xuICAgICAgICBjYXNlICdpbnQ2NCc6XG4gICAgICAgICAgcmV0dXJuIEJpZ0ludDY0QXJyYXk7XG4gICAgICAgIGNhc2UgJ3VpbnQ2NCc6XG4gICAgICAgICAgcmV0dXJuIEJpZ1VpbnQ2NEFycmF5O1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgdW5zdXBwb3J0ZWQgdHlwZTogJHt0eXBlfWApO1xuICAgICAgfVxuICAgIH07XG5cbi8qKlxuICogTWFwIHN0cmluZyBsb2cgbGV2ZWwgdG8gaW50ZWdlciB2YWx1ZVxuICovXG5leHBvcnQgY29uc3QgbG9nTGV2ZWxTdHJpbmdUb0VudW0gPSAobG9nTGV2ZWw/OiAndmVyYm9zZSd8J2luZm8nfCd3YXJuaW5nJ3wnZXJyb3InfCdmYXRhbCcpOiBudW1iZXIgPT4ge1xuICBzd2l0Y2ggKGxvZ0xldmVsKSB7XG4gICAgY2FzZSAndmVyYm9zZSc6XG4gICAgICByZXR1cm4gMDtcbiAgICBjYXNlICdpbmZvJzpcbiAgICAgIHJldHVybiAxO1xuICAgIGNhc2UgJ3dhcm5pbmcnOlxuICAgICAgcmV0dXJuIDI7XG4gICAgY2FzZSAnZXJyb3InOlxuICAgICAgcmV0dXJuIDM7XG4gICAgY2FzZSAnZmF0YWwnOlxuICAgICAgcmV0dXJuIDQ7XG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBFcnJvcihgdW5zdXBwb3J0ZWQgbG9nZ2luZyBsZXZlbDogJHtsb2dMZXZlbH1gKTtcbiAgfVxufTtcblxuLyoqXG4gKiBDaGVjayB3aGV0aGVyIHRoZSBnaXZlbiB0ZW5zb3IgdHlwZSBpcyBzdXBwb3J0ZWQgYnkgR1BVIGJ1ZmZlclxuICovXG5leHBvcnQgY29uc3QgaXNHcHVCdWZmZXJTdXBwb3J0ZWRUeXBlID0gKHR5cGU6IFRlbnNvci5UeXBlKTogdHlwZSBpcyBUZW5zb3IuR3B1QnVmZmVyRGF0YVR5cGVzID0+IHR5cGUgPT09ICdmbG9hdDMyJyB8fFxuICAgIHR5cGUgPT09ICdmbG9hdDE2JyB8fCB0eXBlID09PSAnaW50MzInIHx8IHR5cGUgPT09ICdpbnQ2NCcgfHwgdHlwZSA9PT0gJ3VpbnQzMicgfHwgdHlwZSA9PT0gJ3VpbnQ4JyB8fFxuICAgIHR5cGUgPT09ICdib29sJztcblxuLyoqXG4gKiBNYXAgc3RyaW5nIGRhdGEgbG9jYXRpb24gdG8gaW50ZWdlciB2YWx1ZVxuICovXG5leHBvcnQgY29uc3QgZGF0YUxvY2F0aW9uU3RyaW5nVG9FbnVtID0gKGxvY2F0aW9uOiBUZW5zb3IuRGF0YUxvY2F0aW9uKTogbnVtYmVyID0+IHtcbiAgc3dpdGNoIChsb2NhdGlvbikge1xuICAgIGNhc2UgJ25vbmUnOlxuICAgICAgcmV0dXJuIDA7XG4gICAgY2FzZSAnY3B1JzpcbiAgICAgIHJldHVybiAxO1xuICAgIGNhc2UgJ2NwdS1waW5uZWQnOlxuICAgICAgcmV0dXJuIDI7XG4gICAgY2FzZSAndGV4dHVyZSc6XG4gICAgICByZXR1cm4gMztcbiAgICBjYXNlICdncHUtYnVmZmVyJzpcbiAgICAgIHJldHVybiA0O1xuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYHVuc3VwcG9ydGVkIGRhdGEgbG9jYXRpb246ICR7bG9jYXRpb259YCk7XG4gIH1cbn07XG5cbi8qKlxuICogTWFwIGludGVnZXIgZGF0YSBsb2NhdGlvbiB0byBzdHJpbmcgdmFsdWVcbiAqL1xuZXhwb3J0IGNvbnN0IGRhdGFMb2NhdGlvbkVudW1Ub1N0cmluZyA9IChsb2NhdGlvbjogbnVtYmVyKTogVGVuc29yLkRhdGFMb2NhdGlvbnx1bmRlZmluZWQgPT5cbiAgICAoWydub25lJywgJ2NwdScsICdjcHUtcGlubmVkJywgJ3RleHR1cmUnLCAnZ3B1LWJ1ZmZlciddIGFzIGNvbnN0KVtsb2NhdGlvbl07XG4iLCAiZXhwb3J0IGNvbnN0IHJlYWRGaWxlID0gdW5kZWZpbmVkO2V4cG9ydCBjb25zdCByZWFkRmlsZVN5bmMgPSB1bmRlZmluZWQ7ZXhwb3J0IGNvbnN0IGNyZWF0ZVJlYWRTdHJlYW0gPSB1bmRlZmluZWQ7IiwgIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuXG5pbXBvcnQgKiBhcyBmcyBmcm9tICdmcyc7XG5pbXBvcnQge3JlYWRGaWxlfSBmcm9tICdub2RlOmZzL3Byb21pc2VzJztcblxuLyoqXG4gKiBMb2FkIGEgZmlsZSBpbnRvIGEgVWludDhBcnJheS5cbiAqXG4gKiBAcGFyYW0gZmlsZSAtIHRoZSBmaWxlIHRvIGxvYWQuIENhbiBiZSBhIFVSTC9wYXRoLCBhIEJsb2IsIGFuIEFycmF5QnVmZmVyLCBvciBhIFVpbnQ4QXJyYXkuXG4gKiBAcmV0dXJucyBhIFVpbnQ4QXJyYXkgY29udGFpbmluZyB0aGUgZmlsZSBkYXRhLlxuICovXG5leHBvcnQgY29uc3QgbG9hZEZpbGUgPSBhc3luYyhmaWxlOiBzdHJpbmd8QmxvYnxBcnJheUJ1ZmZlckxpa2V8VWludDhBcnJheSk6IFByb21pc2U8VWludDhBcnJheT4gPT4ge1xuICBpZiAodHlwZW9mIGZpbGUgPT09ICdzdHJpbmcnKSB7XG4gICAgaWYgKHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiBwcm9jZXNzLnZlcnNpb25zICYmIHByb2Nlc3MudmVyc2lvbnMubm9kZSkge1xuICAgICAgLy8gbG9hZCBmaWxlIGludG8gQXJyYXlCdWZmZXIgaW4gTm9kZS5qc1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KGF3YWl0IHJlYWRGaWxlKGZpbGUpKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKGUuY29kZSA9PT0gJ0VSUl9GU19GSUxFX1RPT19MQVJHRScpIHtcbiAgICAgICAgICAvLyBmaWxlIGlzIHRvbyBsYXJnZSwgdXNlIGZzLmNyZWF0ZVJlYWRTdHJlYW0gaW5zdGVhZFxuICAgICAgICAgIGNvbnN0IHN0cmVhbSA9IGZzLmNyZWF0ZVJlYWRTdHJlYW0oZmlsZSk7XG4gICAgICAgICAgY29uc3QgY2h1bmtzOiBVaW50OEFycmF5W10gPSBbXTtcbiAgICAgICAgICBmb3IgYXdhaXQgKGNvbnN0IGNodW5rIG9mIHN0cmVhbSkge1xuICAgICAgICAgICAgY2h1bmtzLnB1c2goY2h1bmspO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoQnVmZmVyLmNvbmNhdChjaHVua3MpKTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBsb2FkIGZpbGUgaW50byBBcnJheUJ1ZmZlciBpbiBicm93c2Vyc1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChmaWxlKTtcbiAgICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBmYWlsZWQgdG8gbG9hZCBleHRlcm5hbCBkYXRhIGZpbGU6ICR7ZmlsZX1gKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGNvbnRlbnRMZW5ndGhIZWFkZXIgPSByZXNwb25zZS5oZWFkZXJzLmdldCgnQ29udGVudC1MZW5ndGgnKTtcbiAgICAgIGNvbnN0IGZpbGVTaXplID0gY29udGVudExlbmd0aEhlYWRlciA/IHBhcnNlSW50KGNvbnRlbnRMZW5ndGhIZWFkZXIsIDEwKSA6IDA7XG4gICAgICBpZiAoZmlsZVNpemUgPCAxMDczNzQxODI0IC8qIDFHQiAqLykge1xuICAgICAgICAvLyB3aGVuIENvbnRlbnQtTGVuZ3RoIGhlYWRlciBpcyBub3Qgc2V0LCB3ZSBjYW5ub3QgZGV0ZXJtaW5lIHRoZSBmaWxlIHNpemUuIFdlIGFzc3VtZSBpdCBpcyBzbWFsbCBlbm91Z2ggdG9cbiAgICAgICAgLy8gbG9hZCBpbnRvIG1lbW9yeS5cbiAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KGF3YWl0IHJlc3BvbnNlLmFycmF5QnVmZmVyKCkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gZmlsZSBpcyB0b28gbGFyZ2UsIHVzZSBzdHJlYW0gaW5zdGVhZFxuICAgICAgICBpZiAoIXJlc3BvbnNlLmJvZHkpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGZhaWxlZCB0byBsb2FkIGV4dGVybmFsIGRhdGEgZmlsZTogJHtmaWxlfSwgbm8gcmVzcG9uc2UgYm9keS5gKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZWFkZXIgPSByZXNwb25zZS5ib2R5LmdldFJlYWRlcigpO1xuXG4gICAgICAgIGxldCBidWZmZXI7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgLy8gdHJ5IHRvIGNyZWF0ZSBBcnJheUJ1ZmZlciBkaXJlY3RseVxuICAgICAgICAgIGJ1ZmZlciA9IG5ldyBBcnJheUJ1ZmZlcihmaWxlU2l6ZSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICBpZiAoZSBpbnN0YW5jZW9mIFJhbmdlRXJyb3IpIHtcbiAgICAgICAgICAgIC8vIHVzZSBXZWJBc3NlbWJseSBNZW1vcnkgdG8gYWxsb2NhdGUgbGFyZ2VyIEFycmF5QnVmZmVyXG4gICAgICAgICAgICBjb25zdCBwYWdlcyA9IE1hdGguY2VpbChmaWxlU2l6ZSAvIDY1NTM2KTtcbiAgICAgICAgICAgIGJ1ZmZlciA9IG5ldyBXZWJBc3NlbWJseS5NZW1vcnkoe2luaXRpYWw6IHBhZ2VzLCBtYXhpbXVtOiBwYWdlc30pLmJ1ZmZlcjtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgb2Zmc2V0ID0gMDtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnN0YW50LWNvbmRpdGlvblxuICAgICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICAgIGNvbnN0IHtkb25lLCB2YWx1ZX0gPSBhd2FpdCByZWFkZXIucmVhZCgpO1xuICAgICAgICAgIGlmIChkb25lKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3QgY2h1bmtTaXplID0gdmFsdWUuYnl0ZUxlbmd0aDtcbiAgICAgICAgICBjb25zdCBjaHVuayA9IG5ldyBVaW50OEFycmF5KGJ1ZmZlciwgb2Zmc2V0LCBjaHVua1NpemUpO1xuICAgICAgICAgIGNodW5rLnNldCh2YWx1ZSk7XG4gICAgICAgICAgb2Zmc2V0ICs9IGNodW5rU2l6ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoYnVmZmVyLCAwLCBmaWxlU2l6ZSk7XG4gICAgICB9XG4gICAgfVxuXG4gIH0gZWxzZSBpZiAoZmlsZSBpbnN0YW5jZW9mIEJsb2IpIHtcbiAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoYXdhaXQgZmlsZS5hcnJheUJ1ZmZlcigpKTtcbiAgfSBlbHNlIGlmIChmaWxlIGluc3RhbmNlb2YgVWludDhBcnJheSkge1xuICAgIHJldHVybiBmaWxlO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBuZXcgVWludDhBcnJheShmaWxlKTtcbiAgfVxufTtcbiIsICIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cblxuaW1wb3J0IHtFbnYsIEluZmVyZW5jZVNlc3Npb24sIFRlbnNvcn0gZnJvbSAnb25ueHJ1bnRpbWUtY29tbW9uJztcblxuaW1wb3J0IHtTZXJpYWxpemFibGVJbnRlcm5hbEJ1ZmZlciwgU2VyaWFsaXphYmxlU2Vzc2lvbk1ldGFkYXRhLCBTZXJpYWxpemFibGVUZW5zb3JNZXRhZGF0YSwgVGVuc29yTWV0YWRhdGF9IGZyb20gJy4vcHJveHktbWVzc2FnZXMnO1xuaW1wb3J0IHtzZXRSdW5PcHRpb25zfSBmcm9tICcuL3J1bi1vcHRpb25zJztcbmltcG9ydCB7c2V0U2Vzc2lvbk9wdGlvbnN9IGZyb20gJy4vc2Vzc2lvbi1vcHRpb25zJztcbmltcG9ydCB7ZGF0YUxvY2F0aW9uU3RyaW5nVG9FbnVtLCBnZXRUZW5zb3JFbGVtZW50U2l6ZSwgaXNHcHVCdWZmZXJTdXBwb3J0ZWRUeXBlLCBsb2dMZXZlbFN0cmluZ1RvRW51bSwgdGVuc29yRGF0YVR5cGVFbnVtVG9TdHJpbmcsIHRlbnNvckRhdGFUeXBlU3RyaW5nVG9FbnVtLCB0ZW5zb3JUeXBlVG9UeXBlZEFycmF5Q29uc3RydWN0b3J9IGZyb20gJy4vd2FzbS1jb21tb24nO1xuaW1wb3J0IHtnZXRJbnN0YW5jZX0gZnJvbSAnLi93YXNtLWZhY3RvcnknO1xuaW1wb3J0IHthbGxvY1dhc21TdHJpbmcsIGNoZWNrTGFzdEVycm9yfSBmcm9tICcuL3dhc20tdXRpbHMnO1xuaW1wb3J0IHtsb2FkRmlsZX0gZnJvbSAnLi93YXNtLXV0aWxzLWxvYWQtZmlsZSc7XG5cbi8vICNyZWdpb24gSW5pdGlhbGl6YXRpb25zXG5cbi8qKlxuICogVGhlcmUgYXJlIDQgZGlmZmVyZW50IFwiaW5pdGlhbGl6YXRpb25cIiBzdGVwcyBmb3IgT1JULiBUaGV5IGhhcHBlbiBpbiBkaWZmZXJlbnQgcGxhY2VzIGFuZCBkaWZmZXJlbnQgdGltZS5cbiAqXG4gKiAxLiBKYXZhU2NyaXB0IGluaXRpYWxpemF0aW9uIGZvciBvbm54cnVudGltZS1jb21tb24gYW5kIG9ubnhydW50aW1lLXdlYi5cbiAqICAgIFRoaXMgaXMgdGhlIGZpcnN0IGluaXRpYWxpemF0aW9uIHN0ZXAuIEluIHRoaXMgc3RlcCwgb25ueHJ1bnRpbWUtd2ViIGNhbGxzIG9ubnhydW50aW1lLWNvbW1vbidzIHJlZ2lzdGVyQmFja2VuZCgpXG4gKiBmdW5jdGlvbiBtdWx0aXBsZSB0aW1lcyB0byByZWdpc3RlciBhbGwgdGhlIGF2YWlsYWJsZSBiYWNrZW5kcy4gVGhlIGJhY2tlbmQgcmVnaXN0cmF0aW9uIGlzIHZlcnkgZmFzdC4gSXQgb25seVxuICogcmVnaXN0ZXJzIHRoZSBiYWNrZW5kIG5hbWUgd2l0aCB0aGUgdW5pbml0aWFsaXplZCBiYWNrZW5kIG9iamVjdC4gTm8gaGVhdnkgaW5pdGlhbGl6YXRpb24gaXMgZG9uZSBpbiB0aGlzIHN0ZXAuXG4gKiAgICBSZWZlciB0byB3ZWIvbGliL2luZGV4LnRzIGZvciB0aGUgYmFja2VuZCByZWdpc3RyYXRpb24uXG4gKlxuICogMi4gV2ViQXNzZW1ibHkgYXJ0aWZhY3QgaW5pdGlhbGl6YXRpb24uXG4gKiAgICBUaGlzIGhhcHBlbnMgd2hlbiBhbnkgcmVnaXN0ZXJlZCB3YXNtIGJhY2tlbmQgaXMgdXNlZCBmb3IgdGhlIGZpcnN0IHRpbWUgKGllLiBgb3J0LkluZmVyZW5jZVNlc3Npb24uY3JlYXRlKClgIG9yXG4gKiBgb3J0LlRyYWluaW5nU2Vzc2lvbi5jcmVhdGUoKWAgaXMgY2FsbGVkKS4gSW4gdGhpcyBzdGVwLCBvbm54cnVudGltZS13ZWIgZG9lcyB0aGUgZm9sbG93aW5nczpcbiAqICAgICAtIGNyZWF0ZSBhIHByb3h5IHdvcmtlciBhbmQgbWFrZSBzdXJlIHRoZSBwcm94eSB3b3JrZXIgaXMgcmVhZHkgdG8gcmVjZWl2ZSBtZXNzYWdlcywgaWYgcHJveHkgaXMgZW5hYmxlZC5cbiAqICAgICAtIHBlcmZvcm0gZmVhdHVyZSBkZXRlY3Rpb24sIGxvY2F0ZSBjb3JyZWN0IFdlYkFzc2VtYmx5IGFydGlmYWN0IHBhdGggYW5kIGNhbGwgdGhlIEVtc2NyaXB0ZW4gZ2VuZXJhdGVkXG4gKiBKYXZhU2NyaXB0IGNvZGUgdG8gaW5pdGlhbGl6ZSB0aGUgV2ViQXNzZW1ibHkgcnVudGltZS5cbiAqICAgICAgICAgLSBpZiBwcm94eSBpcyBlbmFibGVkLCB0aGlzIHN0ZXAgaGFwcGVucyBpbiB0aGUgcHJveHkgd29ya2VyIHVzaW5nIG1lc3NhZ2UgJ2luaXQtd2FzbScuXG4gKiAgICAgICAgIC0gZG93bmxvYWRpbmcgdGhlICdvcnQtd2FzbXsuLi59Lndhc20nIGZpbGUgaXMgZG9uZSBpbiB0aGlzIHN0ZXAuXG4gKiAgICAgICAgIC0gaWYgbXVsdGktdGhyZWFkIGlzIGVuYWJsZWQsIG9uZSBvciBtb3JlIHdlYndvcmtlciB3aWxsIGJlIGNyZWF0ZWQgdG8gaW5pdGlhbGl6ZSB0aGUgUFRocmVhZCB0aHJlYWRwb29sLlxuICpcbiAqIDMuIE9SVCBlbnZpcm9ubWVudCBpbml0aWFsaXphdGlvbi5cbiAqICAgIFRoaXMgaGFwcGVucyBhZnRlciBzdGVwIDIuIEluIHRoaXMgc3RlcCwgb25ueHJ1bnRpbWUtd2ViIHBlcmZvcm1zIE9OTlggUnVudGltZSBlbnZpcm9ubWVudCBpbml0aWFsaXphdGlvbi5cbiAqIEZ1bmN0aW9uIGBfT3J0SW5pdCgpYCBpcyBjYWxsZWQgaW4gdGhpcyBzdGVwLlxuICogICAgIC0gaWYgcHJveHkgaXMgZW5hYmxlZCwgdGhpcyBzdGVwIGhhcHBlbnMgaW4gdGhlIHByb3h5IHdvcmtlciB1c2luZyBtZXNzYWdlICdpbml0LW9ydCcuXG4gKiAgICAgLSBsb2dnaW5nIGxldmVsIChvcnQuZW52LmxvZ0xldmVsKSBhbmQgdGhyZWFkIG51bWJlciAob3J0LmVudi53YXNtLm51bVRocmVhZHMpIGFyZSBzZXQgaW4gdGhpcyBzdGVwLlxuICpcbiAqIDQuIFNlc3Npb24gaW5pdGlhbGl6YXRpb24uXG4gKiAgICBUaGlzIGhhcHBlbnMgd2hlbiBgb3J0LkluZmVyZW5jZVNlc3Npb24uY3JlYXRlKClgIG9yIGBvcnQuVHJhaW5pbmdTZXNzaW9uLmNyZWF0ZSgpYCBpcyBjYWxsZWQuIFVubGlrZSB0aGUgZmlyc3QgM1xuICogc3RlcHMgKHRoZXkgb25seSBjYWxsZWQgb25jZSksIHRoaXMgc3RlcCB3aWxsIGJlIGRvbmUgZm9yIGVhY2ggc2Vzc2lvbi4gSW4gdGhpcyBzdGVwLCBvbm54cnVudGltZS13ZWIgZG9lcyB0aGVcbiAqIGZvbGxvd2luZ3M6XG4gKiAgICBJZiB0aGUgcGFyYW1ldGVyIGlzIGEgVVJMOlxuICogICAgLSBkb3dubG9hZCB0aGUgbW9kZWwgZGF0YSBmcm9tIHRoZSBVUkwuXG4gKiAgICAtIGNvcHkgdGhlIG1vZGVsIGRhdGEgdG8gdGhlIFdBU00gaGVhcC4gKHByb3h5OiAnY29weS1mcm9tJylcbiAqICAgIC0gZGVyZWZlcmVuY2UgdGhlIG1vZGVsIGJ1ZmZlci4gVGhpcyBzdGVwIGFsbG93cyB0aGUgb3JpZ2luYWwgQXJyYXlCdWZmZXIgdG8gYmUgZ2FyYmFnZSBjb2xsZWN0ZWQuXG4gKiAgICAtIGNhbGwgYF9PcnRDcmVhdGVTZXNzaW9uKClgIHRvIGNyZWF0ZSB0aGUgc2Vzc2lvbi4gKHByb3h5OiAnY3JlYXRlJylcbiAqXG4gKiAgICBJZiB0aGUgcGFyYW1ldGVyIGlzIGEgVWludDhBcnJheSBvYmplY3Q6XG4gKiAgICAtIGNvcHkgdGhlIG1vZGVsIGRhdGEgdG8gdGhlIFdBU00gaGVhcC4gKHByb3h5OiAnY29weS1mcm9tJylcbiAqICAgIC0gY2FsbCBgX09ydENyZWF0ZVNlc3Npb24oKWAgdG8gY3JlYXRlIHRoZSBzZXNzaW9uLiAocHJveHk6ICdjcmVhdGUnKVxuICpcbiAqXG4gKi9cblxuLyoqXG4gKiBpbml0aWFsaXplIE9SVCBlbnZpcm9ubWVudC5cbiAqXG4gKiBAcGFyYW0gbnVtVGhyZWFkcyBTZXRHbG9iYWxJbnRyYU9wTnVtVGhyZWFkcyhudW1UaHJlYWRzKVxuICogQHBhcmFtIGxvZ2dpbmdMZXZlbCBDcmVhdGVFbnYoc3RhdGljX2Nhc3Q8T3J0TG9nZ2luZ0xldmVsPihsb2dnaW5nX2xldmVsKSlcbiAqL1xuY29uc3QgaW5pdE9ydCA9IChudW1UaHJlYWRzOiBudW1iZXIsIGxvZ2dpbmdMZXZlbDogbnVtYmVyKTogdm9pZCA9PiB7XG4gIGNvbnN0IGVycm9yQ29kZSA9IGdldEluc3RhbmNlKCkuX09ydEluaXQobnVtVGhyZWFkcywgbG9nZ2luZ0xldmVsKTtcbiAgaWYgKGVycm9yQ29kZSAhPT0gMCkge1xuICAgIGNoZWNrTGFzdEVycm9yKCdDYW5cXCd0IGluaXRpYWxpemUgb25ueHJ1bnRpbWUuJyk7XG4gIH1cbn07XG5cbi8qKlxuICogaW50aWFsaXplIHJ1bnRpbWUgZW52aXJvbm1lbnQuXG4gKiBAcGFyYW0gZW52IHBhc3NlZCBpbiB0aGUgZW52aXJvbm1lbnQgY29uZmlnIG9iamVjdC5cbiAqL1xuZXhwb3J0IGNvbnN0IGluaXRSdW50aW1lID0gYXN5bmMoZW52OiBFbnYpOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgLy8gaW5pdCBPUlRcbiAgaW5pdE9ydChlbnYud2FzbS5udW1UaHJlYWRzISwgbG9nTGV2ZWxTdHJpbmdUb0VudW0oZW52LmxvZ0xldmVsKSk7XG59O1xuXG4vKipcbiAqIHBlcmZvcm0gRVAgc3BlY2lmaWMgaW5pdGlhbGl6YXRpb24uXG4gKlxuICogQHBhcmFtIGVudlxuICogQHBhcmFtIGVwTmFtZVxuICovXG5leHBvcnQgY29uc3QgaW5pdEVwID0gYXN5bmMoZW52OiBFbnYsIGVwTmFtZTogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiA9PiB7XG4gIGlmICghQlVJTERfREVGUy5ESVNBQkxFX1dFQkdQVSAmJiAoZXBOYW1lID09PSAnd2ViZ3B1JyB8fCBlcE5hbWUgPT09ICd3ZWJubicpKSB7XG4gICAgLy8gcGVyZm9ybSBXZWJHUFUgYXZhaWxhYmlsaXR5IGNoZWNrXG4gICAgaWYgKHR5cGVvZiBuYXZpZ2F0b3IgPT09ICd1bmRlZmluZWQnIHx8ICFuYXZpZ2F0b3IuZ3B1KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1dlYkdQVSBpcyBub3Qgc3VwcG9ydGVkIGluIGN1cnJlbnQgZW52aXJvbm1lbnQnKTtcbiAgICB9XG4gICAgY29uc3QgYWRhcHRlciA9IGF3YWl0IG5hdmlnYXRvci5ncHUucmVxdWVzdEFkYXB0ZXIoKTtcbiAgICBpZiAoIWFkYXB0ZXIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAnRmFpbGVkIHRvIGdldCBHUFUgYWRhcHRlci4gWW91IG1heSBuZWVkIHRvIGVuYWJsZSBmbGFnIFwiLS1lbmFibGUtdW5zYWZlLXdlYmdwdVwiIGlmIHlvdSBhcmUgdXNpbmcgQ2hyb21lLicpO1xuICAgIH1cblxuICAgIGlmICghZW52Lndhc20uc2ltZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICdOb3Qgc3VwcG9ydGVkIGZvciBXZWJHUFU9T04gYW5kIFNJTUQ9T0ZGLiBQbGVhc2Ugc2V0IGBlbnYud2FzbS5zaW1kYCB0byB0cnVlIHdoZW4gdXNpbmcgYHdlYmdwdWAgRVAnKTtcbiAgICB9XG5cbiAgICAvLyBpbml0IEpTRVAgaWYgYXZhaWxhYmxlXG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXJlcXVpcmUtaW1wb3J0cywgQHR5cGVzY3JpcHQtZXNsaW50L25vLXZhci1yZXF1aXJlc1xuICAgIGNvbnN0IGluaXRKc2VwID0gcmVxdWlyZSgnLi9qc2VwL2luaXQnKS5pbml0O1xuICAgIGF3YWl0IGluaXRKc2VwKGdldEluc3RhbmNlKCksIGVudiwgYWRhcHRlcik7XG4gIH1cbn07XG5cbi8vICNlbmRyZWdpb24gSW5pdGlhbGl6YXRpb25zXG5cbi8qKlxuICogdmFsaWQgZGF0YSBsb2NhdGlvbnMgZm9yIGlucHV0L291dHB1dCB0ZW5zb3JzLlxuICovXG50eXBlIFN1cHBvcnRlZFRlbnNvckRhdGFMb2NhdGlvbkZvcklucHV0T3V0cHV0ID0gJ2NwdSd8J2NwdS1waW5uZWQnfCdncHUtYnVmZmVyJztcblxudHlwZSBJT0JpbmRpbmdTdGF0ZSA9IHtcbiAgLyoqXG4gICAqIHRoZSBoYW5kbGUgb2YgSU8gYmluZGluZy5cbiAgICovXG4gIHJlYWRvbmx5IGhhbmRsZTogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiB0aGUgcHJlZmVycmVkIGxvY2F0aW9uIGZvciBlYWNoIG91dHB1dCB0ZW5zb3IuXG4gICAqXG4gICAqIHZhbHVlIGlzIG9uZSBvZiAnY3B1JywgJ2NwdS1waW5uZWQnLCAnZ3B1LWJ1ZmZlcicuXG4gICAqL1xuICByZWFkb25seSBvdXRwdXRQcmVmZXJyZWRMb2NhdGlvbnM6IHJlYWRvbmx5IFN1cHBvcnRlZFRlbnNvckRhdGFMb2NhdGlvbkZvcklucHV0T3V0cHV0W107XG5cbiAgLyoqXG4gICAqIGVudW0gdmFsdWUgb2YgdGhlIHByZWZlcnJlZCBsb2NhdGlvbiBmb3IgZWFjaCBvdXRwdXQgdGVuc29yLlxuICAgKi9cbiAgcmVhZG9ubHkgb3V0cHV0UHJlZmVycmVkTG9jYXRpb25zRW5jb2RlZDogcmVhZG9ubHkgbnVtYmVyW107XG59O1xuXG4vKipcbiAqICB0dXBsZSBlbGVtZW50cyBhcmU6IEluZmVyZW5jZVNlc3Npb24gSUQ7IGlucHV0TmFtZXNVVEY4RW5jb2RlZDsgb3V0cHV0TmFtZXNVVEY4RW5jb2RlZDsgYmluZGluZ1N0YXRlXG4gKi9cbnR5cGUgU2Vzc2lvbk1ldGFkYXRhID0gW1xuICBpbmZlcmVuY2VTZXNzaW9uSWQ6IG51bWJlciwgaW5wdXROYW1lc1VURjhFbmNvZGVkOiBudW1iZXJbXSwgb3V0cHV0TmFtZXNVVEY4RW5jb2RlZDogbnVtYmVyW10sXG4gIGJpbmRpbmdTdGF0ZTogSU9CaW5kaW5nU3RhdGV8bnVsbCwgZW5hYmxlR3JhcGhDYXB0dXJlOiBib29sZWFuLCBpbnB1dE91dHB1dEJvdW5kOiBib29sZWFuXG5dO1xuXG5jb25zdCBhY3RpdmVTZXNzaW9ucyA9IG5ldyBNYXA8bnVtYmVyLCBTZXNzaW9uTWV0YWRhdGE+KCk7XG5cbi8qKlxuICogZ2V0IHRoZSBpbnB1dC9vdXRwdXQgY291bnQgb2YgdGhlIHNlc3Npb24uXG4gKiBAcGFyYW0gc2Vzc2lvbkhhbmRsZSB0aGUgaGFuZGxlIHJlcHJlc2VudGluZyB0aGUgc2Vzc2lvbi4gc2hvdWxkIGJlIG5vbi16ZXJvLlxuICogQHJldHVybnMgYSB0dXBsZSBpbmNsdWRpbmcgMiBudW1iZXJzLCByZXByZXNlbnRpbmcgdGhlIGlucHV0IGNvdW50IGFuZCBvdXRwdXQgY291bnQuXG4gKi9cbmNvbnN0IGdldFNlc3Npb25JbnB1dE91dHB1dENvdW50ID0gKHNlc3Npb25IYW5kbGU6IG51bWJlcik6IFtudW1iZXIsIG51bWJlcl0gPT4ge1xuICBjb25zdCB3YXNtID0gZ2V0SW5zdGFuY2UoKTtcbiAgY29uc3Qgc3RhY2sgPSB3YXNtLnN0YWNrU2F2ZSgpO1xuICB0cnkge1xuICAgIGNvbnN0IGRhdGFPZmZzZXQgPSB3YXNtLnN0YWNrQWxsb2MoOCk7XG4gICAgY29uc3QgZXJyb3JDb2RlID0gd2FzbS5fT3J0R2V0SW5wdXRPdXRwdXRDb3VudChzZXNzaW9uSGFuZGxlLCBkYXRhT2Zmc2V0LCBkYXRhT2Zmc2V0ICsgNCk7XG4gICAgaWYgKGVycm9yQ29kZSAhPT0gMCkge1xuICAgICAgY2hlY2tMYXN0RXJyb3IoJ0NhblxcJ3QgZ2V0IHNlc3Npb24gaW5wdXQvb3V0cHV0IGNvdW50LicpO1xuICAgIH1cbiAgICByZXR1cm4gW3dhc20uSEVBUDMyW2RhdGFPZmZzZXQgLyA0XSwgd2FzbS5IRUFQMzJbZGF0YU9mZnNldCAvIDQgKyAxXV07XG4gIH0gZmluYWxseSB7XG4gICAgd2FzbS5zdGFja1Jlc3RvcmUoc3RhY2spO1xuICB9XG59O1xuXG4vKipcbiAqIGFsbG9jYXRlIHRoZSBtZW1vcnkgYW5kIG1lbWNweSB0aGUgZXh0ZXJuYWwgYnVmZmVyLlxuICpcbiAqIEBwYXJhbSBtb2RlbCAtIHRoZSBleHRlcm5hbCBidWZmZXIgY29udGFpbmluZyB0aGUgbW9kZWwgZGF0YS4gTXVzdCBub3QgYmUgdGhlIHNhbWUgYnVmZmVyIGFzIHRoZSBXQVNNIGhlYXAuXG4gKiBAcmV0dXJucyBhIDItZWxlbWVudHMgdHVwbGUgLSB0aGUgcG9pbnRlciBhbmQgc2l6ZSBvZiB0aGUgYWxsb2NhdGVkIGJ1ZmZlclxuICovXG5leHBvcnQgY29uc3QgY29weUZyb21FeHRlcm5hbEJ1ZmZlciA9IChtb2RlbDogVWludDhBcnJheSk6IFtudW1iZXIsIG51bWJlcl0gPT4ge1xuICBjb25zdCB3YXNtID0gZ2V0SW5zdGFuY2UoKTtcbiAgY29uc3QgbW9kZWxEYXRhT2Zmc2V0ID0gd2FzbS5fbWFsbG9jKG1vZGVsLmJ5dGVMZW5ndGgpO1xuICBpZiAobW9kZWxEYXRhT2Zmc2V0ID09PSAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBDYW4ndCBjcmVhdGUgYSBzZXNzaW9uLiBmYWlsZWQgdG8gYWxsb2NhdGUgYSBidWZmZXIgb2Ygc2l6ZSAke21vZGVsLmJ5dGVMZW5ndGh9LmApO1xuICB9XG4gIHdhc20uSEVBUFU4LnNldChtb2RlbCwgbW9kZWxEYXRhT2Zmc2V0KTtcbiAgcmV0dXJuIFttb2RlbERhdGFPZmZzZXQsIG1vZGVsLmJ5dGVMZW5ndGhdO1xufTtcblxuLyoqXG4gKiBjcmVhdGUgYW4gaW5mZXJlbmNlIHNlc3Npb24gZnJvbSBhIG1vZGVsIGRhdGEgYnVmZmVyLlxuICpcbiAqIEBwYXJhbSBtb2RlbERhdGEgLSBlaXRoZXIgYSBVaW50OEFycmF5IG9iamVjdCByZXByZXNlbnRpbmcgdGhlIG1vZGVsIGRhdGEsIG9yIGEgMi1lbGVtZW50cyB0dXBsZSBjb250YWluaW5nIHRoZVxuICogICAgIHBvaW50ZXIgYW5kIHNpemUgb2YgdGhlIG1vZGVsIGRhdGEgYnVmZmVyLlxuICogQHBhcmFtIG9wdGlvbnMgYW4gb3B0aW9uYWwgc2Vzc2lvbiBvcHRpb25zIG9iamVjdC5cbiAqIEByZXR1cm5zIGEgMy1lbGVtZW50cyB0dXBsZSBjb250YWluaW5nIFtzZXNzaW9uIGhhbmRsZSwgaW5wdXQgbmFtZXMsIG91dHB1dCBuYW1lc11cbiAqL1xuZXhwb3J0IGNvbnN0IGNyZWF0ZVNlc3Npb24gPSBhc3luYyhcbiAgICBtb2RlbERhdGE6IFVpbnQ4QXJyYXl8U2VyaWFsaXphYmxlSW50ZXJuYWxCdWZmZXIsXG4gICAgb3B0aW9ucz86IEluZmVyZW5jZVNlc3Npb24uU2Vzc2lvbk9wdGlvbnMpOiBQcm9taXNlPFNlcmlhbGl6YWJsZVNlc3Npb25NZXRhZGF0YT4gPT4ge1xuICBsZXQgbW9kZWxEYXRhT2Zmc2V0OiBudW1iZXIsIG1vZGVsRGF0YUxlbmd0aDogbnVtYmVyO1xuICBjb25zdCB3YXNtID0gZ2V0SW5zdGFuY2UoKTtcblxuICBpZiAoQXJyYXkuaXNBcnJheShtb2RlbERhdGEpKSB7XG4gICAgLy8gaWYgbW9kZWwgZGF0YSBpcyBhbiBhcnJheSwgaXQgbXVzdCBiZSBhIDItZWxlbWVudHMgdHVwbGUgY29udGFpbmluZyB0aGUgcG9pbnRlciBhbmQgc2l6ZSBvZiB0aGUgbW9kZWwgZGF0YVxuICAgIFttb2RlbERhdGFPZmZzZXQsIG1vZGVsRGF0YUxlbmd0aF0gPSBtb2RlbERhdGE7XG4gIH0gZWxzZSBpZiAobW9kZWxEYXRhLmJ1ZmZlciA9PT0gd2FzbS5IRUFQVTguYnVmZmVyKSB7XG4gICAgLy8gaWYgbW9kZWwgZGF0YSB1c2VzIHRoZSBzYW1lIGJ1ZmZlciBhcyB0aGUgV0FTTSBoZWFwLCB3ZSBkb24ndCBuZWVkIHRvIGNvcHkgaXQuXG4gICAgW21vZGVsRGF0YU9mZnNldCwgbW9kZWxEYXRhTGVuZ3RoXSA9IFttb2RlbERhdGEuYnl0ZU9mZnNldCwgbW9kZWxEYXRhLmJ5dGVMZW5ndGhdO1xuICB9IGVsc2Uge1xuICAgIC8vIG90aGVyd2lzZSwgY29weSB0aGUgbW9kZWwgZGF0YSB0byB0aGUgV0FTTSBoZWFwLlxuICAgIFttb2RlbERhdGFPZmZzZXQsIG1vZGVsRGF0YUxlbmd0aF0gPSBjb3B5RnJvbUV4dGVybmFsQnVmZmVyKG1vZGVsRGF0YSk7XG4gIH1cblxuICBsZXQgc2Vzc2lvbkhhbmRsZSA9IDA7XG4gIGxldCBzZXNzaW9uT3B0aW9uc0hhbmRsZSA9IDA7XG4gIGxldCBpb0JpbmRpbmdIYW5kbGUgPSAwO1xuICBsZXQgYWxsb2NzOiBudW1iZXJbXSA9IFtdO1xuICBjb25zdCBpbnB1dE5hbWVzVVRGOEVuY29kZWQgPSBbXTtcbiAgY29uc3Qgb3V0cHV0TmFtZXNVVEY4RW5jb2RlZCA9IFtdO1xuXG4gIHRyeSB7XG4gICAgW3Nlc3Npb25PcHRpb25zSGFuZGxlLCBhbGxvY3NdID0gc2V0U2Vzc2lvbk9wdGlvbnMob3B0aW9ucyk7XG5cbiAgICBpZiAob3B0aW9ucz8uZXh0ZXJuYWxEYXRhICYmIHdhc20ubW91bnRFeHRlcm5hbERhdGEpIHtcbiAgICAgIGNvbnN0IGxvYWRpbmdQcm9taXNlcyA9IFtdO1xuICAgICAgZm9yIChjb25zdCBmaWxlIG9mIG9wdGlvbnMuZXh0ZXJuYWxEYXRhKSB7XG4gICAgICAgIGNvbnN0IHBhdGggPSB0eXBlb2YgZmlsZSA9PT0gJ3N0cmluZycgPyBmaWxlIDogZmlsZS5wYXRoO1xuICAgICAgICBsb2FkaW5nUHJvbWlzZXMucHVzaChsb2FkRmlsZSh0eXBlb2YgZmlsZSA9PT0gJ3N0cmluZycgPyBmaWxlIDogZmlsZS5kYXRhKS50aGVuKGRhdGEgPT4ge1xuICAgICAgICAgIHdhc20ubW91bnRFeHRlcm5hbERhdGEhKHBhdGgsIGRhdGEpO1xuICAgICAgICB9KSk7XG4gICAgICB9XG5cbiAgICAgIC8vIHdhaXQgZm9yIGFsbCBleHRlcm5hbCBkYXRhIGZpbGVzIHRvIGJlIGxvYWRlZFxuICAgICAgYXdhaXQgUHJvbWlzZS5hbGwobG9hZGluZ1Byb21pc2VzKTtcbiAgICB9XG5cbiAgICBzZXNzaW9uSGFuZGxlID0gYXdhaXQgd2FzbS5fT3J0Q3JlYXRlU2Vzc2lvbihtb2RlbERhdGFPZmZzZXQsIG1vZGVsRGF0YUxlbmd0aCwgc2Vzc2lvbk9wdGlvbnNIYW5kbGUpO1xuICAgIGlmIChzZXNzaW9uSGFuZGxlID09PSAwKSB7XG4gICAgICBjaGVja0xhc3RFcnJvcignQ2FuXFwndCBjcmVhdGUgYSBzZXNzaW9uLicpO1xuICAgIH1cblxuICAgIGNvbnN0IFtpbnB1dENvdW50LCBvdXRwdXRDb3VudF0gPSBnZXRTZXNzaW9uSW5wdXRPdXRwdXRDb3VudChzZXNzaW9uSGFuZGxlKTtcblxuICAgIGNvbnN0IGVuYWJsZUdyYXBoQ2FwdHVyZSA9ICEhb3B0aW9ucz8uZW5hYmxlR3JhcGhDYXB0dXJlO1xuXG4gICAgY29uc3QgaW5wdXROYW1lcyA9IFtdO1xuICAgIGNvbnN0IG91dHB1dE5hbWVzID0gW107XG4gICAgY29uc3Qgb3V0cHV0UHJlZmVycmVkTG9jYXRpb25zOiBTdXBwb3J0ZWRUZW5zb3JEYXRhTG9jYXRpb25Gb3JJbnB1dE91dHB1dFtdID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbnB1dENvdW50OyBpKyspIHtcbiAgICAgIGNvbnN0IG5hbWUgPSB3YXNtLl9PcnRHZXRJbnB1dE5hbWUoc2Vzc2lvbkhhbmRsZSwgaSk7XG4gICAgICBpZiAobmFtZSA9PT0gMCkge1xuICAgICAgICBjaGVja0xhc3RFcnJvcignQ2FuXFwndCBnZXQgYW4gaW5wdXQgbmFtZS4nKTtcbiAgICAgIH1cbiAgICAgIGlucHV0TmFtZXNVVEY4RW5jb2RlZC5wdXNoKG5hbWUpO1xuICAgICAgaW5wdXROYW1lcy5wdXNoKHdhc20uVVRGOFRvU3RyaW5nKG5hbWUpKTtcbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvdXRwdXRDb3VudDsgaSsrKSB7XG4gICAgICBjb25zdCBuYW1lID0gd2FzbS5fT3J0R2V0T3V0cHV0TmFtZShzZXNzaW9uSGFuZGxlLCBpKTtcbiAgICAgIGlmIChuYW1lID09PSAwKSB7XG4gICAgICAgIGNoZWNrTGFzdEVycm9yKCdDYW5cXCd0IGdldCBhbiBvdXRwdXQgbmFtZS4nKTtcbiAgICAgIH1cbiAgICAgIG91dHB1dE5hbWVzVVRGOEVuY29kZWQucHVzaChuYW1lKTtcbiAgICAgIGNvbnN0IG5hbWVTdHJpbmcgPSB3YXNtLlVURjhUb1N0cmluZyhuYW1lKTtcbiAgICAgIG91dHB1dE5hbWVzLnB1c2gobmFtZVN0cmluZyk7XG5cbiAgICAgIGlmICghQlVJTERfREVGUy5ESVNBQkxFX1dFQkdQVSkge1xuICAgICAgICBpZiAoZW5hYmxlR3JhcGhDYXB0dXJlICYmIG9wdGlvbnM/LnByZWZlcnJlZE91dHB1dExvY2F0aW9uID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBvdXRwdXRQcmVmZXJyZWRMb2NhdGlvbnMucHVzaCgnZ3B1LWJ1ZmZlcicpO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGxvY2F0aW9uID0gdHlwZW9mIG9wdGlvbnM/LnByZWZlcnJlZE91dHB1dExvY2F0aW9uID09PSAnc3RyaW5nJyA/XG4gICAgICAgICAgICBvcHRpb25zLnByZWZlcnJlZE91dHB1dExvY2F0aW9uIDpcbiAgICAgICAgICAgIG9wdGlvbnM/LnByZWZlcnJlZE91dHB1dExvY2F0aW9uPy5bbmFtZVN0cmluZ10gPz8gJ2NwdSc7XG4gICAgICAgIGlmIChsb2NhdGlvbiAhPT0gJ2NwdScgJiYgbG9jYXRpb24gIT09ICdjcHUtcGlubmVkJyAmJiBsb2NhdGlvbiAhPT0gJ2dwdS1idWZmZXInKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBOb3Qgc3VwcG9ydGVkIHByZWZlcnJlZCBvdXRwdXQgbG9jYXRpb246ICR7bG9jYXRpb259LmApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlbmFibGVHcmFwaENhcHR1cmUgJiYgbG9jYXRpb24gIT09ICdncHUtYnVmZmVyJykge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgTm90IHN1cHBvcnRlZCBwcmVmZXJyZWQgb3V0cHV0IGxvY2F0aW9uOiAke1xuICAgICAgICAgICAgICBsb2NhdGlvbn0uIE9ubHkgJ2dwdS1idWZmZXInIGxvY2F0aW9uIGlzIHN1cHBvcnRlZCB3aGVuIGVuYWJsZUdyYXBoQ2FwdHVyZSBpcyB0cnVlLmApO1xuICAgICAgICB9XG4gICAgICAgIG91dHB1dFByZWZlcnJlZExvY2F0aW9ucy5wdXNoKGxvY2F0aW9uKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyB1c2UgSU8gYmluZGluZyBvbmx5IHdoZW4gYXQgbGVhc3Qgb25lIG91dHB1dCBpcyBwcmVmZmVyZWQgdG8gYmUgb24gR1BVLlxuICAgIGxldCBiaW5kaW5nU3RhdGU6IElPQmluZGluZ1N0YXRlfG51bGwgPSBudWxsO1xuICAgIGlmICghQlVJTERfREVGUy5ESVNBQkxFX1dFQkdQVSAmJiBvdXRwdXRQcmVmZXJyZWRMb2NhdGlvbnMuc29tZShsID0+IGwgPT09ICdncHUtYnVmZmVyJykpIHtcbiAgICAgIGlvQmluZGluZ0hhbmRsZSA9IHdhc20uX09ydENyZWF0ZUJpbmRpbmcoc2Vzc2lvbkhhbmRsZSk7XG4gICAgICBpZiAoaW9CaW5kaW5nSGFuZGxlID09PSAwKSB7XG4gICAgICAgIGNoZWNrTGFzdEVycm9yKCdDYW5cXCd0IGNyZWF0ZSBJTyBiaW5kaW5nLicpO1xuICAgICAgfVxuXG4gICAgICBiaW5kaW5nU3RhdGUgPSB7XG4gICAgICAgIGhhbmRsZTogaW9CaW5kaW5nSGFuZGxlLFxuICAgICAgICBvdXRwdXRQcmVmZXJyZWRMb2NhdGlvbnMsXG4gICAgICAgIG91dHB1dFByZWZlcnJlZExvY2F0aW9uc0VuY29kZWQ6IG91dHB1dFByZWZlcnJlZExvY2F0aW9ucy5tYXAobCA9PiBkYXRhTG9jYXRpb25TdHJpbmdUb0VudW0obCkpLFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBhY3RpdmVTZXNzaW9ucy5zZXQoXG4gICAgICAgIHNlc3Npb25IYW5kbGUsXG4gICAgICAgIFtzZXNzaW9uSGFuZGxlLCBpbnB1dE5hbWVzVVRGOEVuY29kZWQsIG91dHB1dE5hbWVzVVRGOEVuY29kZWQsIGJpbmRpbmdTdGF0ZSwgZW5hYmxlR3JhcGhDYXB0dXJlLCBmYWxzZV0pO1xuICAgIHJldHVybiBbc2Vzc2lvbkhhbmRsZSwgaW5wdXROYW1lcywgb3V0cHV0TmFtZXNdO1xuICB9IGNhdGNoIChlKSB7XG4gICAgaW5wdXROYW1lc1VURjhFbmNvZGVkLmZvckVhY2goYnVmID0+IHdhc20uX09ydEZyZWUoYnVmKSk7XG4gICAgb3V0cHV0TmFtZXNVVEY4RW5jb2RlZC5mb3JFYWNoKGJ1ZiA9PiB3YXNtLl9PcnRGcmVlKGJ1ZikpO1xuXG4gICAgaWYgKGlvQmluZGluZ0hhbmRsZSAhPT0gMCkge1xuICAgICAgd2FzbS5fT3J0UmVsZWFzZUJpbmRpbmcoaW9CaW5kaW5nSGFuZGxlKTtcbiAgICB9XG5cbiAgICBpZiAoc2Vzc2lvbkhhbmRsZSAhPT0gMCkge1xuICAgICAgd2FzbS5fT3J0UmVsZWFzZVNlc3Npb24oc2Vzc2lvbkhhbmRsZSk7XG4gICAgfVxuICAgIHRocm93IGU7XG4gIH0gZmluYWxseSB7XG4gICAgd2FzbS5fZnJlZShtb2RlbERhdGFPZmZzZXQpO1xuICAgIGlmIChzZXNzaW9uT3B0aW9uc0hhbmRsZSAhPT0gMCkge1xuICAgICAgd2FzbS5fT3J0UmVsZWFzZVNlc3Npb25PcHRpb25zKHNlc3Npb25PcHRpb25zSGFuZGxlKTtcbiAgICB9XG4gICAgYWxsb2NzLmZvckVhY2goYWxsb2MgPT4gd2FzbS5fZnJlZShhbGxvYykpO1xuXG4gICAgLy8gdW5tb3VudCBleHRlcm5hbCBkYXRhIGlmIG5lY2Vzc2FyeVxuICAgIHdhc20udW5tb3VudEV4dGVybmFsRGF0YT8uKCk7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCByZWxlYXNlU2Vzc2lvbiA9IChzZXNzaW9uSWQ6IG51bWJlcik6IHZvaWQgPT4ge1xuICBjb25zdCB3YXNtID0gZ2V0SW5zdGFuY2UoKTtcbiAgY29uc3Qgc2Vzc2lvbiA9IGFjdGl2ZVNlc3Npb25zLmdldChzZXNzaW9uSWQpO1xuICBpZiAoIXNlc3Npb24pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYGNhbm5vdCByZWxlYXNlIHNlc3Npb24uIGludmFsaWQgc2Vzc2lvbiBpZDogJHtzZXNzaW9uSWR9YCk7XG4gIH1cbiAgY29uc3QgW3Nlc3Npb25IYW5kbGUsIGlucHV0TmFtZXNVVEY4RW5jb2RlZCwgb3V0cHV0TmFtZXNVVEY4RW5jb2RlZCwgaW9CaW5kaW5nU3RhdGUsIGVuYWJsZUdyYXBoQ2FwdHVyZV0gPSBzZXNzaW9uO1xuXG4gIGlmIChpb0JpbmRpbmdTdGF0ZSkge1xuICAgIGlmIChlbmFibGVHcmFwaENhcHR1cmUpIHtcbiAgICAgIHdhc20uX09ydENsZWFyQm91bmRPdXRwdXRzKGlvQmluZGluZ1N0YXRlLmhhbmRsZSk7XG4gICAgfVxuICAgIHdhc20uX09ydFJlbGVhc2VCaW5kaW5nKGlvQmluZGluZ1N0YXRlLmhhbmRsZSk7XG4gIH1cblxuICB3YXNtLmpzZXBPblJlbGVhc2VTZXNzaW9uPy4oc2Vzc2lvbklkKTtcblxuICBpbnB1dE5hbWVzVVRGOEVuY29kZWQuZm9yRWFjaChidWYgPT4gd2FzbS5fT3J0RnJlZShidWYpKTtcbiAgb3V0cHV0TmFtZXNVVEY4RW5jb2RlZC5mb3JFYWNoKGJ1ZiA9PiB3YXNtLl9PcnRGcmVlKGJ1ZikpO1xuICB3YXNtLl9PcnRSZWxlYXNlU2Vzc2lvbihzZXNzaW9uSGFuZGxlKTtcbiAgYWN0aXZlU2Vzc2lvbnMuZGVsZXRlKHNlc3Npb25JZCk7XG59O1xuXG5leHBvcnQgY29uc3QgcHJlcGFyZUlucHV0T3V0cHV0VGVuc29yID1cbiAgICAodGVuc29yOiBUZW5zb3JNZXRhZGF0YXxudWxsLCB0ZW5zb3JIYW5kbGVzOiBudW1iZXJbXSwgYWxsb2NzOiBudW1iZXJbXSwgc2Vzc2lvbklkOiBudW1iZXIsIGluZGV4OiBudW1iZXIsXG4gICAgIGVuYWJsZUdyYXBoQ2FwdHVyZSA9IGZhbHNlKTogdm9pZCA9PiB7XG4gICAgICBpZiAoIXRlbnNvcikge1xuICAgICAgICB0ZW5zb3JIYW5kbGVzLnB1c2goMCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY29uc3Qgd2FzbSA9IGdldEluc3RhbmNlKCk7XG5cbiAgICAgIGNvbnN0IGRhdGFUeXBlID0gdGVuc29yWzBdO1xuICAgICAgY29uc3QgZGltcyA9IHRlbnNvclsxXTtcbiAgICAgIGNvbnN0IGxvY2F0aW9uID0gdGVuc29yWzNdO1xuXG4gICAgICBsZXQgcmF3RGF0YTogbnVtYmVyO1xuICAgICAgbGV0IGRhdGFCeXRlTGVuZ3RoOiBudW1iZXI7XG5cbiAgICAgIGlmIChkYXRhVHlwZSA9PT0gJ3N0cmluZycgJiYgbG9jYXRpb24gPT09ICdncHUtYnVmZmVyJykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1N0cmluZyB0ZW5zb3IgaXMgbm90IHN1cHBvcnRlZCBvbiBHUFUuJyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChlbmFibGVHcmFwaENhcHR1cmUgJiYgbG9jYXRpb24gIT09ICdncHUtYnVmZmVyJykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICBgRXh0ZXJuYWwgYnVmZmVyIG11c3QgYmUgcHJvdmlkZWQgZm9yIGlucHV0L291dHB1dCBpbmRleCAke2luZGV4fSB3aGVuIGVuYWJsZUdyYXBoQ2FwdHVyZSBpcyB0cnVlLmApO1xuICAgICAgfVxuXG4gICAgICBpZiAobG9jYXRpb24gPT09ICdncHUtYnVmZmVyJykge1xuICAgICAgICBjb25zdCBncHVCdWZmZXIgPSB0ZW5zb3JbMl0uZ3B1QnVmZmVyIGFzIEdQVUJ1ZmZlcjtcbiAgICAgICAgY29uc3QgZWxlbWVudFNpemVJbkJ5dGVzID0gZ2V0VGVuc29yRWxlbWVudFNpemUodGVuc29yRGF0YVR5cGVTdHJpbmdUb0VudW0oZGF0YVR5cGUpKSE7XG4gICAgICAgIGRhdGFCeXRlTGVuZ3RoID0gZGltcy5yZWR1Y2UoKGEsIGIpID0+IGEgKiBiLCAxKSAqIGVsZW1lbnRTaXplSW5CeXRlcztcbiAgICAgICAgcmF3RGF0YSA9IHdhc20uanNlcFJlZ2lzdGVyQnVmZmVyKHNlc3Npb25JZCwgaW5kZXgsIGdwdUJ1ZmZlciwgZGF0YUJ5dGVMZW5ndGgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgZGF0YSA9IHRlbnNvclsyXTtcblxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShkYXRhKSkge1xuICAgICAgICAgIC8vIHN0cmluZyB0ZW5zb3JcbiAgICAgICAgICBkYXRhQnl0ZUxlbmd0aCA9IDQgKiBkYXRhLmxlbmd0aDtcbiAgICAgICAgICByYXdEYXRhID0gd2FzbS5fbWFsbG9jKGRhdGFCeXRlTGVuZ3RoKTtcbiAgICAgICAgICBhbGxvY3MucHVzaChyYXdEYXRhKTtcbiAgICAgICAgICBsZXQgZGF0YUluZGV4ID0gcmF3RGF0YSAvIDQ7XG4gICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGRhdGFbaV0gIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYHRlbnNvciBkYXRhIGF0IGluZGV4ICR7aX0gaXMgbm90IGEgc3RyaW5nYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB3YXNtLkhFQVBVMzJbZGF0YUluZGV4KytdID0gYWxsb2NXYXNtU3RyaW5nKGRhdGFbaV0sIGFsbG9jcyk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRhdGFCeXRlTGVuZ3RoID0gZGF0YS5ieXRlTGVuZ3RoO1xuICAgICAgICAgIHJhd0RhdGEgPSB3YXNtLl9tYWxsb2MoZGF0YUJ5dGVMZW5ndGgpO1xuICAgICAgICAgIGFsbG9jcy5wdXNoKHJhd0RhdGEpO1xuICAgICAgICAgIHdhc20uSEVBUFU4LnNldChuZXcgVWludDhBcnJheShkYXRhLmJ1ZmZlciwgZGF0YS5ieXRlT2Zmc2V0LCBkYXRhQnl0ZUxlbmd0aCksIHJhd0RhdGEpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHN0YWNrID0gd2FzbS5zdGFja1NhdmUoKTtcbiAgICAgIGNvbnN0IGRpbXNPZmZzZXQgPSB3YXNtLnN0YWNrQWxsb2MoNCAqIGRpbXMubGVuZ3RoKTtcbiAgICAgIHRyeSB7XG4gICAgICAgIGxldCBkaW1JbmRleCA9IGRpbXNPZmZzZXQgLyA0O1xuICAgICAgICBkaW1zLmZvckVhY2goZCA9PiB3YXNtLkhFQVAzMltkaW1JbmRleCsrXSA9IGQpO1xuICAgICAgICBjb25zdCB0ZW5zb3IgPSB3YXNtLl9PcnRDcmVhdGVUZW5zb3IoXG4gICAgICAgICAgICB0ZW5zb3JEYXRhVHlwZVN0cmluZ1RvRW51bShkYXRhVHlwZSksIHJhd0RhdGEsIGRhdGFCeXRlTGVuZ3RoLCBkaW1zT2Zmc2V0LCBkaW1zLmxlbmd0aCxcbiAgICAgICAgICAgIGRhdGFMb2NhdGlvblN0cmluZ1RvRW51bShsb2NhdGlvbikpO1xuICAgICAgICBpZiAodGVuc29yID09PSAwKSB7XG4gICAgICAgICAgY2hlY2tMYXN0RXJyb3IoYENhbid0IGNyZWF0ZSB0ZW5zb3IgZm9yIGlucHV0L291dHB1dC4gc2Vzc2lvbj0ke3Nlc3Npb25JZH0sIGluZGV4PSR7aW5kZXh9LmApO1xuICAgICAgICB9XG4gICAgICAgIHRlbnNvckhhbmRsZXMucHVzaCh0ZW5zb3IpO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgd2FzbS5zdGFja1Jlc3RvcmUoc3RhY2spO1xuICAgICAgfVxuICAgIH07XG5cbi8qKlxuICogcGVyZm9ybSBpbmZlcmVuY2UgcnVuXG4gKi9cbmV4cG9ydCBjb25zdCBydW4gPSBhc3luYyhcbiAgICBzZXNzaW9uSWQ6IG51bWJlciwgaW5wdXRJbmRpY2VzOiBudW1iZXJbXSwgaW5wdXRUZW5zb3JzOiBUZW5zb3JNZXRhZGF0YVtdLCBvdXRwdXRJbmRpY2VzOiBudW1iZXJbXSxcbiAgICBvdXRwdXRUZW5zb3JzOiBBcnJheTxUZW5zb3JNZXRhZGF0YXxudWxsPiwgb3B0aW9uczogSW5mZXJlbmNlU2Vzc2lvbi5SdW5PcHRpb25zKTogUHJvbWlzZTxUZW5zb3JNZXRhZGF0YVtdPiA9PiB7XG4gIGNvbnN0IHdhc20gPSBnZXRJbnN0YW5jZSgpO1xuICBjb25zdCBzZXNzaW9uID0gYWN0aXZlU2Vzc2lvbnMuZ2V0KHNlc3Npb25JZCk7XG4gIGlmICghc2Vzc2lvbikge1xuICAgIHRocm93IG5ldyBFcnJvcihgY2Fubm90IHJ1biBpbmZlcmVuY2UuIGludmFsaWQgc2Vzc2lvbiBpZDogJHtzZXNzaW9uSWR9YCk7XG4gIH1cbiAgY29uc3Qgc2Vzc2lvbkhhbmRsZSA9IHNlc3Npb25bMF07XG4gIGNvbnN0IGlucHV0TmFtZXNVVEY4RW5jb2RlZCA9IHNlc3Npb25bMV07XG4gIGNvbnN0IG91dHB1dE5hbWVzVVRGOEVuY29kZWQgPSBzZXNzaW9uWzJdO1xuICBjb25zdCBpb0JpbmRpbmdTdGF0ZSA9IHNlc3Npb25bM107XG4gIGNvbnN0IGVuYWJsZUdyYXBoQ2FwdHVyZSA9IHNlc3Npb25bNF07XG4gIGNvbnN0IGlucHV0T3V0cHV0Qm91bmQgPSBzZXNzaW9uWzVdO1xuXG4gIGNvbnN0IGlucHV0Q291bnQgPSBpbnB1dEluZGljZXMubGVuZ3RoO1xuICBjb25zdCBvdXRwdXRDb3VudCA9IG91dHB1dEluZGljZXMubGVuZ3RoO1xuXG4gIGxldCBydW5PcHRpb25zSGFuZGxlID0gMDtcbiAgbGV0IHJ1bk9wdGlvbnNBbGxvY3M6IG51bWJlcltdID0gW107XG5cbiAgY29uc3QgaW5wdXRUZW5zb3JIYW5kbGVzOiBudW1iZXJbXSA9IFtdO1xuICBjb25zdCBvdXRwdXRUZW5zb3JIYW5kbGVzOiBudW1iZXJbXSA9IFtdO1xuICBjb25zdCBpbnB1dE91dHB1dEFsbG9jczogbnVtYmVyW10gPSBbXTtcblxuICBjb25zdCBiZWZvcmVSdW5TdGFjayA9IHdhc20uc3RhY2tTYXZlKCk7XG4gIGNvbnN0IGlucHV0VmFsdWVzT2Zmc2V0ID0gd2FzbS5zdGFja0FsbG9jKGlucHV0Q291bnQgKiA0KTtcbiAgY29uc3QgaW5wdXROYW1lc09mZnNldCA9IHdhc20uc3RhY2tBbGxvYyhpbnB1dENvdW50ICogNCk7XG4gIGNvbnN0IG91dHB1dFZhbHVlc09mZnNldCA9IHdhc20uc3RhY2tBbGxvYyhvdXRwdXRDb3VudCAqIDQpO1xuICBjb25zdCBvdXRwdXROYW1lc09mZnNldCA9IHdhc20uc3RhY2tBbGxvYyhvdXRwdXRDb3VudCAqIDQpO1xuXG4gIHRyeSB7XG4gICAgW3J1bk9wdGlvbnNIYW5kbGUsIHJ1bk9wdGlvbnNBbGxvY3NdID0gc2V0UnVuT3B0aW9ucyhvcHRpb25zKTtcblxuICAgIC8vIGNyZWF0ZSBpbnB1dCB0ZW5zb3JzXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbnB1dENvdW50OyBpKyspIHtcbiAgICAgIHByZXBhcmVJbnB1dE91dHB1dFRlbnNvcihcbiAgICAgICAgICBpbnB1dFRlbnNvcnNbaV0sIGlucHV0VGVuc29ySGFuZGxlcywgaW5wdXRPdXRwdXRBbGxvY3MsIHNlc3Npb25JZCwgaW5wdXRJbmRpY2VzW2ldLCBlbmFibGVHcmFwaENhcHR1cmUpO1xuICAgIH1cblxuICAgIC8vIGNyZWF0ZSBvdXRwdXQgdGVuc29yc1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb3V0cHV0Q291bnQ7IGkrKykge1xuICAgICAgcHJlcGFyZUlucHV0T3V0cHV0VGVuc29yKFxuICAgICAgICAgIG91dHB1dFRlbnNvcnNbaV0sIG91dHB1dFRlbnNvckhhbmRsZXMsIGlucHV0T3V0cHV0QWxsb2NzLCBzZXNzaW9uSWQsIGlucHV0Q291bnQgKyBvdXRwdXRJbmRpY2VzW2ldLFxuICAgICAgICAgIGVuYWJsZUdyYXBoQ2FwdHVyZSk7XG4gICAgfVxuXG4gICAgbGV0IGlucHV0VmFsdWVzSW5kZXggPSBpbnB1dFZhbHVlc09mZnNldCAvIDQ7XG4gICAgbGV0IGlucHV0TmFtZXNJbmRleCA9IGlucHV0TmFtZXNPZmZzZXQgLyA0O1xuICAgIGxldCBvdXRwdXRWYWx1ZXNJbmRleCA9IG91dHB1dFZhbHVlc09mZnNldCAvIDQ7XG4gICAgbGV0IG91dHB1dE5hbWVzSW5kZXggPSBvdXRwdXROYW1lc09mZnNldCAvIDQ7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbnB1dENvdW50OyBpKyspIHtcbiAgICAgIHdhc20uSEVBUFUzMltpbnB1dFZhbHVlc0luZGV4KytdID0gaW5wdXRUZW5zb3JIYW5kbGVzW2ldO1xuICAgICAgd2FzbS5IRUFQVTMyW2lucHV0TmFtZXNJbmRleCsrXSA9IGlucHV0TmFtZXNVVEY4RW5jb2RlZFtpbnB1dEluZGljZXNbaV1dO1xuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG91dHB1dENvdW50OyBpKyspIHtcbiAgICAgIHdhc20uSEVBUFUzMltvdXRwdXRWYWx1ZXNJbmRleCsrXSA9IG91dHB1dFRlbnNvckhhbmRsZXNbaV07XG4gICAgICB3YXNtLkhFQVBVMzJbb3V0cHV0TmFtZXNJbmRleCsrXSA9IG91dHB1dE5hbWVzVVRGOEVuY29kZWRbb3V0cHV0SW5kaWNlc1tpXV07XG4gICAgfVxuXG4gICAgaWYgKCFCVUlMRF9ERUZTLkRJU0FCTEVfV0VCR1BVICYmIGlvQmluZGluZ1N0YXRlICYmICFpbnB1dE91dHB1dEJvdW5kKSB7XG4gICAgICBjb25zdCB7aGFuZGxlLCBvdXRwdXRQcmVmZXJyZWRMb2NhdGlvbnMsIG91dHB1dFByZWZlcnJlZExvY2F0aW9uc0VuY29kZWR9ID0gaW9CaW5kaW5nU3RhdGU7XG5cbiAgICAgIGlmIChpbnB1dE5hbWVzVVRGOEVuY29kZWQubGVuZ3RoICE9PSBpbnB1dENvdW50KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgaW5wdXQgY291bnQgZnJvbSBmZWVkcyAoJHtcbiAgICAgICAgICAgIGlucHV0Q291bnR9KSBpcyBleHBlY3RlZCB0byBiZSBhbHdheXMgZXF1YWwgdG8gbW9kZWwncyBpbnB1dCBjb3VudCAoJHtpbnB1dE5hbWVzVVRGOEVuY29kZWQubGVuZ3RofSkuYCk7XG4gICAgICB9XG5cbiAgICAgIC8vIHByb2Nlc3MgaW5wdXRzXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGlucHV0Q291bnQ7IGkrKykge1xuICAgICAgICBjb25zdCBpbmRleCA9IGlucHV0SW5kaWNlc1tpXTtcbiAgICAgICAgY29uc3QgZXJyb3JDb2RlID0gYXdhaXQgd2FzbS5fT3J0QmluZElucHV0KGhhbmRsZSwgaW5wdXROYW1lc1VURjhFbmNvZGVkW2luZGV4XSwgaW5wdXRUZW5zb3JIYW5kbGVzW2ldKTtcbiAgICAgICAgaWYgKGVycm9yQ29kZSAhPT0gMCkge1xuICAgICAgICAgIGNoZWNrTGFzdEVycm9yKGBDYW4ndCBiaW5kIGlucHV0WyR7aX1dIGZvciBzZXNzaW9uPSR7c2Vzc2lvbklkfS5gKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBwcm9jZXNzIHByZS1hbGxvY2F0ZWQgb3V0cHV0c1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvdXRwdXRDb3VudDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gb3V0cHV0SW5kaWNlc1tpXTtcbiAgICAgICAgY29uc3QgbG9jYXRpb24gPSBvdXRwdXRUZW5zb3JzW2ldPy5bM107ICAvLyB1bmRlZmluZWQgbWVhbnMgb3V0cHV0IGlzIG5vdCBwcmUtYWxsb2NhdGVkLlxuXG4gICAgICAgIGlmIChsb2NhdGlvbikge1xuICAgICAgICAgIC8vIG91dHB1dCBpcyBwcmUtYWxsb2NhdGVkLiBiaW5kIHRoZSB0ZW5zb3IuXG4gICAgICAgICAgY29uc3QgZXJyb3JDb2RlID0gd2FzbS5fT3J0QmluZE91dHB1dChoYW5kbGUsIG91dHB1dE5hbWVzVVRGOEVuY29kZWRbaW5kZXhdLCBvdXRwdXRUZW5zb3JIYW5kbGVzW2ldLCAwKTtcbiAgICAgICAgICBpZiAoZXJyb3JDb2RlICE9PSAwKSB7XG4gICAgICAgICAgICBjaGVja0xhc3RFcnJvcihgQ2FuJ3QgYmluZCBwcmUtYWxsb2NhdGVkIG91dHB1dFske2l9XSBmb3Igc2Vzc2lvbj0ke3Nlc3Npb25JZH0uYCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIG91dHB1dCBpcyBub3QgcHJlLWFsbG9jYXRlZC4gcmVzZXQgcHJlZmVycmVkIGxvY2F0aW9uLlxuICAgICAgICAgIGNvbnN0IGVycm9yQ29kZSA9XG4gICAgICAgICAgICAgIHdhc20uX09ydEJpbmRPdXRwdXQoaGFuZGxlLCBvdXRwdXROYW1lc1VURjhFbmNvZGVkW2luZGV4XSwgMCwgb3V0cHV0UHJlZmVycmVkTG9jYXRpb25zRW5jb2RlZFtpbmRleF0pO1xuICAgICAgICAgIGlmIChlcnJvckNvZGUgIT09IDApIHtcbiAgICAgICAgICAgIGNoZWNrTGFzdEVycm9yKGBDYW4ndCBiaW5kIG91dHB1dFske2l9XSB0byAke291dHB1dFByZWZlcnJlZExvY2F0aW9uc1tpXX0gZm9yIHNlc3Npb249JHtzZXNzaW9uSWR9LmApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgYWN0aXZlU2Vzc2lvbnMuc2V0KFxuICAgICAgICAgIHNlc3Npb25JZCxcbiAgICAgICAgICBbc2Vzc2lvbkhhbmRsZSwgaW5wdXROYW1lc1VURjhFbmNvZGVkLCBvdXRwdXROYW1lc1VURjhFbmNvZGVkLCBpb0JpbmRpbmdTdGF0ZSwgZW5hYmxlR3JhcGhDYXB0dXJlLCB0cnVlXSk7XG4gICAgfVxuXG4gICAgd2FzbS5qc2VwT25SdW5TdGFydD8uKHNlc3Npb25IYW5kbGUpO1xuICAgIGxldCBlcnJvckNvZGU6IG51bWJlcjtcbiAgICBpZiAoIUJVSUxEX0RFRlMuRElTQUJMRV9XRUJHUFUgJiYgaW9CaW5kaW5nU3RhdGUpIHtcbiAgICAgIGVycm9yQ29kZSA9IGF3YWl0IHdhc20uX09ydFJ1bldpdGhCaW5kaW5nKFxuICAgICAgICAgIHNlc3Npb25IYW5kbGUsIGlvQmluZGluZ1N0YXRlLmhhbmRsZSwgb3V0cHV0Q291bnQsIG91dHB1dFZhbHVlc09mZnNldCwgcnVuT3B0aW9uc0hhbmRsZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVycm9yQ29kZSA9IGF3YWl0IHdhc20uX09ydFJ1bihcbiAgICAgICAgICBzZXNzaW9uSGFuZGxlLCBpbnB1dE5hbWVzT2Zmc2V0LCBpbnB1dFZhbHVlc09mZnNldCwgaW5wdXRDb3VudCwgb3V0cHV0TmFtZXNPZmZzZXQsIG91dHB1dENvdW50LFxuICAgICAgICAgIG91dHB1dFZhbHVlc09mZnNldCwgcnVuT3B0aW9uc0hhbmRsZSk7XG4gICAgfVxuXG4gICAgaWYgKGVycm9yQ29kZSAhPT0gMCkge1xuICAgICAgY2hlY2tMYXN0RXJyb3IoJ2ZhaWxlZCB0byBjYWxsIE9ydFJ1bigpLicpO1xuICAgIH1cblxuICAgIGNvbnN0IG91dHB1dDogVGVuc29yTWV0YWRhdGFbXSA9IFtdO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvdXRwdXRDb3VudDsgaSsrKSB7XG4gICAgICBjb25zdCB0ZW5zb3IgPSB3YXNtLkhFQVBVMzJbb3V0cHV0VmFsdWVzT2Zmc2V0IC8gNCArIGldO1xuICAgICAgaWYgKHRlbnNvciA9PT0gb3V0cHV0VGVuc29ySGFuZGxlc1tpXSkge1xuICAgICAgICAvLyBvdXRwdXQgdGVuc29yIGlzIHByZS1hbGxvY2F0ZWQuIG5vIG5lZWQgdG8gY29weSBkYXRhLlxuICAgICAgICBvdXRwdXQucHVzaChvdXRwdXRUZW5zb3JzW2ldISk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBiZWZvcmVHZXRUZW5zb3JEYXRhU3RhY2sgPSB3YXNtLnN0YWNrU2F2ZSgpO1xuICAgICAgLy8gc3RhY2sgYWxsb2NhdGUgNCBwb2ludGVyIHZhbHVlXG4gICAgICBjb25zdCB0ZW5zb3JEYXRhT2Zmc2V0ID0gd2FzbS5zdGFja0FsbG9jKDQgKiA0KTtcblxuICAgICAgbGV0IGtlZXBPdXRwdXRUZW5zb3IgPSBmYWxzZTtcbiAgICAgIGxldCB0eXBlOiBUZW5zb3IuVHlwZXx1bmRlZmluZWQsIGRhdGFPZmZzZXQgPSAwO1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgZXJyb3JDb2RlID0gd2FzbS5fT3J0R2V0VGVuc29yRGF0YShcbiAgICAgICAgICAgIHRlbnNvciwgdGVuc29yRGF0YU9mZnNldCwgdGVuc29yRGF0YU9mZnNldCArIDQsIHRlbnNvckRhdGFPZmZzZXQgKyA4LCB0ZW5zb3JEYXRhT2Zmc2V0ICsgMTIpO1xuICAgICAgICBpZiAoZXJyb3JDb2RlICE9PSAwKSB7XG4gICAgICAgICAgY2hlY2tMYXN0RXJyb3IoYENhbid0IGFjY2VzcyBvdXRwdXQgdGVuc29yIGRhdGEgb24gaW5kZXggJHtpfS5gKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgdGVuc29yRGF0YUluZGV4ID0gdGVuc29yRGF0YU9mZnNldCAvIDQ7XG4gICAgICAgIGNvbnN0IGRhdGFUeXBlID0gd2FzbS5IRUFQVTMyW3RlbnNvckRhdGFJbmRleCsrXTtcbiAgICAgICAgZGF0YU9mZnNldCA9IHdhc20uSEVBUFUzMlt0ZW5zb3JEYXRhSW5kZXgrK107XG4gICAgICAgIGNvbnN0IGRpbXNPZmZzZXQgPSB3YXNtLkhFQVBVMzJbdGVuc29yRGF0YUluZGV4KytdO1xuICAgICAgICBjb25zdCBkaW1zTGVuZ3RoID0gd2FzbS5IRUFQVTMyW3RlbnNvckRhdGFJbmRleCsrXTtcbiAgICAgICAgY29uc3QgZGltcyA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRpbXNMZW5ndGg7IGkrKykge1xuICAgICAgICAgIGRpbXMucHVzaCh3YXNtLkhFQVBVMzJbZGltc09mZnNldCAvIDQgKyBpXSk7XG4gICAgICAgIH1cbiAgICAgICAgd2FzbS5fT3J0RnJlZShkaW1zT2Zmc2V0KTtcblxuICAgICAgICBjb25zdCBzaXplID0gZGltcy5yZWR1Y2UoKGEsIGIpID0+IGEgKiBiLCAxKTtcbiAgICAgICAgdHlwZSA9IHRlbnNvckRhdGFUeXBlRW51bVRvU3RyaW5nKGRhdGFUeXBlKTtcblxuICAgICAgICBjb25zdCBwcmVmZXJyZWRMb2NhdGlvbiA9IGlvQmluZGluZ1N0YXRlPy5vdXRwdXRQcmVmZXJyZWRMb2NhdGlvbnNbb3V0cHV0SW5kaWNlc1tpXV07XG5cbiAgICAgICAgaWYgKHR5cGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgaWYgKHByZWZlcnJlZExvY2F0aW9uID09PSAnZ3B1LWJ1ZmZlcicpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignU3RyaW5nIHRlbnNvciBpcyBub3Qgc3VwcG9ydGVkIG9uIEdQVS4nKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3Qgc3RyaW5nRGF0YTogc3RyaW5nW10gPSBbXTtcbiAgICAgICAgICBsZXQgZGF0YUluZGV4ID0gZGF0YU9mZnNldCAvIDQ7XG4gICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzaXplOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IG9mZnNldCA9IHdhc20uSEVBUFUzMltkYXRhSW5kZXgrK107XG4gICAgICAgICAgICBjb25zdCBtYXhCeXRlc1RvUmVhZCA9IGkgPT09IHNpemUgLSAxID8gdW5kZWZpbmVkIDogd2FzbS5IRUFQVTMyW2RhdGFJbmRleF0gLSBvZmZzZXQ7XG4gICAgICAgICAgICBzdHJpbmdEYXRhLnB1c2god2FzbS5VVEY4VG9TdHJpbmcob2Zmc2V0LCBtYXhCeXRlc1RvUmVhZCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBvdXRwdXQucHVzaChbdHlwZSwgZGltcywgc3RyaW5nRGF0YSwgJ2NwdSddKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBJZiBhIGNlcnRhaW4gb3V0cHV0J3MgcHJlZmVycmVkIGxvY2F0aW9uIGlzIEdQVSBidXQgdGhlIHRlbnNvciBpcyBlbXB0eSwgd2Ugc3RpbGwgbmVlZCB0byBjcmVhdGUgYSBDUFVcbiAgICAgICAgICAvLyB0ZW5zb3IgZm9yIGl0LiBUaGVyZSBpcyBubyBtYXBwaW5nIEdQVSBidWZmZXIgZm9yIGFuIGVtcHR5IHRlbnNvci5cbiAgICAgICAgICBpZiAocHJlZmVycmVkTG9jYXRpb24gPT09ICdncHUtYnVmZmVyJyAmJiBzaXplID4gMCkge1xuICAgICAgICAgICAgY29uc3QgZ3B1QnVmZmVyID0gd2FzbS5qc2VwR2V0QnVmZmVyKGRhdGFPZmZzZXQpO1xuICAgICAgICAgICAgY29uc3QgZWxlbWVudFNpemUgPSBnZXRUZW5zb3JFbGVtZW50U2l6ZShkYXRhVHlwZSk7XG4gICAgICAgICAgICBpZiAoZWxlbWVudFNpemUgPT09IHVuZGVmaW5lZCB8fCAhaXNHcHVCdWZmZXJTdXBwb3J0ZWRUeXBlKHR5cGUpKSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5zdXBwb3J0ZWQgZGF0YSB0eXBlOiAke3R5cGV9YCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGRvIG5vdCByZWxlYXNlIHRoZSB0ZW5zb3IgcmlnaHQgbm93LiBpdCB3aWxsIGJlIHJlbGVhc2VkIHdoZW4gdXNlciBjYWxscyB0ZW5zb3IuZGlzcG9zZSgpLlxuICAgICAgICAgICAga2VlcE91dHB1dFRlbnNvciA9IHRydWU7XG5cbiAgICAgICAgICAgIG91dHB1dC5wdXNoKFtcbiAgICAgICAgICAgICAgdHlwZSwgZGltcywge1xuICAgICAgICAgICAgICAgIGdwdUJ1ZmZlcixcbiAgICAgICAgICAgICAgICBkb3dubG9hZDogd2FzbS5qc2VwQ3JlYXRlRG93bmxvYWRlcihncHVCdWZmZXIsIHNpemUgKiBlbGVtZW50U2l6ZSwgdHlwZSksXG4gICAgICAgICAgICAgICAgZGlzcG9zZTogKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgd2FzbS5fT3J0UmVsZWFzZVRlbnNvcih0ZW5zb3IpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgJ2dwdS1idWZmZXInXG4gICAgICAgICAgICBdKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgdHlwZWRBcnJheUNvbnN0cnVjdG9yID0gdGVuc29yVHlwZVRvVHlwZWRBcnJheUNvbnN0cnVjdG9yKHR5cGUpO1xuICAgICAgICAgICAgY29uc3QgZGF0YSA9IG5ldyB0eXBlZEFycmF5Q29uc3RydWN0b3Ioc2l6ZSk7XG4gICAgICAgICAgICBuZXcgVWludDhBcnJheShkYXRhLmJ1ZmZlciwgZGF0YS5ieXRlT2Zmc2V0LCBkYXRhLmJ5dGVMZW5ndGgpXG4gICAgICAgICAgICAgICAgLnNldCh3YXNtLkhFQVBVOC5zdWJhcnJheShkYXRhT2Zmc2V0LCBkYXRhT2Zmc2V0ICsgZGF0YS5ieXRlTGVuZ3RoKSk7XG4gICAgICAgICAgICBvdXRwdXQucHVzaChbdHlwZSwgZGltcywgZGF0YSwgJ2NwdSddKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIHdhc20uc3RhY2tSZXN0b3JlKGJlZm9yZUdldFRlbnNvckRhdGFTdGFjayk7XG4gICAgICAgIGlmICh0eXBlID09PSAnc3RyaW5nJyAmJiBkYXRhT2Zmc2V0KSB7XG4gICAgICAgICAgd2FzbS5fZnJlZShkYXRhT2Zmc2V0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWtlZXBPdXRwdXRUZW5zb3IpIHtcbiAgICAgICAgICB3YXNtLl9PcnRSZWxlYXNlVGVuc29yKHRlbnNvcik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoaW9CaW5kaW5nU3RhdGUgJiYgIWVuYWJsZUdyYXBoQ2FwdHVyZSkge1xuICAgICAgd2FzbS5fT3J0Q2xlYXJCb3VuZE91dHB1dHMoaW9CaW5kaW5nU3RhdGUuaGFuZGxlKTtcbiAgICAgIGFjdGl2ZVNlc3Npb25zLnNldChcbiAgICAgICAgICBzZXNzaW9uSWQsXG4gICAgICAgICAgW3Nlc3Npb25IYW5kbGUsIGlucHV0TmFtZXNVVEY4RW5jb2RlZCwgb3V0cHV0TmFtZXNVVEY4RW5jb2RlZCwgaW9CaW5kaW5nU3RhdGUsIGVuYWJsZUdyYXBoQ2FwdHVyZSwgZmFsc2VdKTtcbiAgICB9XG4gICAgcmV0dXJuIG91dHB1dDtcbiAgfSBmaW5hbGx5IHtcbiAgICB3YXNtLnN0YWNrUmVzdG9yZShiZWZvcmVSdW5TdGFjayk7XG5cbiAgICBpbnB1dFRlbnNvckhhbmRsZXMuZm9yRWFjaCh2ID0+IHdhc20uX09ydFJlbGVhc2VUZW5zb3IodikpO1xuICAgIG91dHB1dFRlbnNvckhhbmRsZXMuZm9yRWFjaCh2ID0+IHdhc20uX09ydFJlbGVhc2VUZW5zb3IodikpO1xuICAgIGlucHV0T3V0cHV0QWxsb2NzLmZvckVhY2gocCA9PiB3YXNtLl9mcmVlKHApKTtcblxuICAgIGlmIChydW5PcHRpb25zSGFuZGxlICE9PSAwKSB7XG4gICAgICB3YXNtLl9PcnRSZWxlYXNlUnVuT3B0aW9ucyhydW5PcHRpb25zSGFuZGxlKTtcbiAgICB9XG4gICAgcnVuT3B0aW9uc0FsbG9jcy5mb3JFYWNoKHAgPT4gd2FzbS5fZnJlZShwKSk7XG4gIH1cbn07XG5cbi8qKlxuICogZW5kIHByb2ZpbGluZ1xuICovXG5leHBvcnQgY29uc3QgZW5kUHJvZmlsaW5nID0gKHNlc3Npb25JZDogbnVtYmVyKTogdm9pZCA9PiB7XG4gIGNvbnN0IHdhc20gPSBnZXRJbnN0YW5jZSgpO1xuICBjb25zdCBzZXNzaW9uID0gYWN0aXZlU2Vzc2lvbnMuZ2V0KHNlc3Npb25JZCk7XG4gIGlmICghc2Vzc2lvbikge1xuICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBzZXNzaW9uIGlkJyk7XG4gIH1cbiAgY29uc3Qgc2Vzc2lvbkhhbmRsZSA9IHNlc3Npb25bMF07XG5cbiAgLy8gcHJvZmlsZSBmaWxlIG5hbWUgaXMgbm90IHVzZWQgeWV0LCBidXQgaXQgbXVzdCBiZSBmcmVlZC5cbiAgY29uc3QgcHJvZmlsZUZpbGVOYW1lID0gd2FzbS5fT3J0RW5kUHJvZmlsaW5nKHNlc3Npb25IYW5kbGUpO1xuICBpZiAocHJvZmlsZUZpbGVOYW1lID09PSAwKSB7XG4gICAgY2hlY2tMYXN0RXJyb3IoJ0NhblxcJ3QgZ2V0IGFuIHByb2ZpbGUgZmlsZSBuYW1lLicpO1xuICB9XG4gIHdhc20uX09ydEZyZWUocHJvZmlsZUZpbGVOYW1lKTtcbn07XG5cbmV4cG9ydCBjb25zdCBleHRyYWN0VHJhbnNmZXJhYmxlQnVmZmVycyA9ICh0ZW5zb3JzOiByZWFkb25seSBTZXJpYWxpemFibGVUZW5zb3JNZXRhZGF0YVtdKTogQXJyYXlCdWZmZXJMaWtlW10gPT4ge1xuICBjb25zdCBidWZmZXJzOiBBcnJheUJ1ZmZlckxpa2VbXSA9IFtdO1xuICBmb3IgKGNvbnN0IHRlbnNvciBvZiB0ZW5zb3JzKSB7XG4gICAgY29uc3QgZGF0YSA9IHRlbnNvclsyXTtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoZGF0YSkgJiYgJ2J1ZmZlcicgaW4gZGF0YSkge1xuICAgICAgYnVmZmVycy5wdXNoKGRhdGEuYnVmZmVyKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGJ1ZmZlcnM7XG59O1xuIiwgIi8qIVxuICogT05OWCBSdW50aW1lIFdlYiB2MS4xOC4wXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbiAqL1xuXCJ1c2Ugc3RyaWN0XCI7XG4oKCkgPT4ge1xuICB2YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuICB2YXIgX19nZXRPd25Qcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG4gIHZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xuICB2YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbiAgdmFyIF9fZXNtID0gKGZuLCByZXMpID0+IGZ1bmN0aW9uIF9faW5pdCgpIHtcbiAgICByZXR1cm4gZm4gJiYgKHJlcyA9ICgwLCBmbltfX2dldE93blByb3BOYW1lcyhmbilbMF1dKShmbiA9IDApKSwgcmVzO1xuICB9O1xuICB2YXIgX19jb21tb25KUyA9IChjYiwgbW9kKSA9PiBmdW5jdGlvbiBfX3JlcXVpcmUoKSB7XG4gICAgcmV0dXJuIG1vZCB8fCAoMCwgY2JbX19nZXRPd25Qcm9wTmFtZXMoY2IpWzBdXSkoKG1vZCA9IHsgZXhwb3J0czoge30gfSkuZXhwb3J0cywgbW9kKSwgbW9kLmV4cG9ydHM7XG4gIH07XG4gIHZhciBfX2V4cG9ydCA9ICh0YXJnZXQsIGFsbCkgPT4ge1xuICAgIGZvciAodmFyIG5hbWUgaW4gYWxsKVxuICAgICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbiAgfTtcbiAgdmFyIF9fY29weVByb3BzID0gKHRvLCBmcm9tLCBleGNlcHQsIGRlc2MpID0+IHtcbiAgICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMoZnJvbSkpXG4gICAgICAgIGlmICghX19oYXNPd25Qcm9wLmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICAgIH1cbiAgICByZXR1cm4gdG87XG4gIH07XG4gIHZhciBfX3RvQ29tbW9uSlMgPSAobW9kKSA9PiBfX2NvcHlQcm9wcyhfX2RlZlByb3Aoe30sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pLCBtb2QpO1xuXG4gIC8vIG5vZGVqcy1pZ25vcmU6ZnNcbiAgdmFyIGZzX2V4cG9ydHMgPSB7fTtcbiAgX19leHBvcnQoZnNfZXhwb3J0cywge1xuICAgIGNyZWF0ZVJlYWRTdHJlYW06ICgpID0+IGNyZWF0ZVJlYWRTdHJlYW0sXG4gICAgcmVhZEZpbGU6ICgpID0+IHJlYWRGaWxlLFxuICAgIHJlYWRGaWxlU3luYzogKCkgPT4gcmVhZEZpbGVTeW5jXG4gIH0pO1xuICB2YXIgcmVhZEZpbGUsIHJlYWRGaWxlU3luYywgY3JlYXRlUmVhZFN0cmVhbTtcbiAgdmFyIGluaXRfZnMgPSBfX2VzbSh7XG4gICAgXCJub2RlanMtaWdub3JlOmZzXCIoKSB7XG4gICAgICByZWFkRmlsZSA9IHZvaWQgMDtcbiAgICAgIHJlYWRGaWxlU3luYyA9IHZvaWQgMDtcbiAgICAgIGNyZWF0ZVJlYWRTdHJlYW0gPSB2b2lkIDA7XG4gICAgfVxuICB9KTtcblxuICAvLyBub2RlanMtaWdub3JlOnBhdGhcbiAgdmFyIHBhdGhfZXhwb3J0cyA9IHt9O1xuICBfX2V4cG9ydChwYXRoX2V4cG9ydHMsIHtcbiAgICBqb2luOiAoKSA9PiBqb2luMlxuICB9KTtcbiAgdmFyIGpvaW4yO1xuICB2YXIgaW5pdF9wYXRoID0gX19lc20oe1xuICAgIFwibm9kZWpzLWlnbm9yZTpwYXRoXCIoKSB7XG4gICAgICBqb2luMiA9IHZvaWQgMDtcbiAgICB9XG4gIH0pO1xuXG4gIC8vIHdlYi9saWIvd2FzbS9iaW5kaW5nL29ydC10cmFpbmluZy13YXNtLXNpbWQuanNcbiAgdmFyIHJlcXVpcmVfb3J0X3RyYWluaW5nX3dhc21fc2ltZCA9IF9fY29tbW9uSlMoe1xuICAgIFwid2ViL2xpYi93YXNtL2JpbmRpbmcvb3J0LXRyYWluaW5nLXdhc20tc2ltZC5qc1wiKGV4cG9ydHMsIG1vZHVsZSkge1xuICAgICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgICB2YXIgb3J0V2FzbSA9ICgoKSA9PiB7XG4gICAgICAgIHZhciBfc2NyaXB0RGlyID0gdHlwZW9mIGRvY3VtZW50ICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50LmN1cnJlbnRTY3JpcHQgPyBkb2N1bWVudC5jdXJyZW50U2NyaXB0LnNyYyA6IHZvaWQgMDtcbiAgICAgICAgaWYgKHR5cGVvZiBfX2ZpbGVuYW1lICE9PSBcInVuZGVmaW5lZFwiKVxuICAgICAgICAgIF9zY3JpcHREaXIgPSBfc2NyaXB0RGlyIHx8IF9fZmlsZW5hbWU7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbihtb2R1bGVBcmcgPSB7fSkge1xuICAgICAgICAgIHZhciBlID0gbW9kdWxlQXJnLCBrLCBsO1xuICAgICAgICAgIGUucmVhZHkgPSBuZXcgUHJvbWlzZSgoYSwgYikgPT4ge1xuICAgICAgICAgICAgayA9IGE7XG4gICAgICAgICAgICBsID0gYjtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICB2YXIgYWEgPSBPYmplY3QuYXNzaWduKHt9LCBlKSwgYmEgPSBcIi4vdGhpcy5wcm9ncmFtXCIsIGNhID0gXCJvYmplY3RcIiA9PSB0eXBlb2Ygd2luZG93LCBxID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBpbXBvcnRTY3JpcHRzLCBkYSA9IFwib2JqZWN0XCIgPT0gdHlwZW9mIHByb2Nlc3MgJiYgXCJvYmplY3RcIiA9PSB0eXBlb2YgcHJvY2Vzcy52ZXJzaW9ucyAmJiBcInN0cmluZ1wiID09IHR5cGVvZiBwcm9jZXNzLnZlcnNpb25zLm5vZGUsIHYgPSBcIlwiLCB4LCB6LCBBO1xuICAgICAgICAgIGlmIChkYSkge1xuICAgICAgICAgICAgdmFyIGZzID0gKGluaXRfZnMoKSwgX190b0NvbW1vbkpTKGZzX2V4cG9ydHMpKSwgQiA9IChpbml0X3BhdGgoKSwgX190b0NvbW1vbkpTKHBhdGhfZXhwb3J0cykpO1xuICAgICAgICAgICAgdiA9IHEgPyBCLmRpcm5hbWUodikgKyBcIi9cIiA6IF9fZGlybmFtZSArIFwiL1wiO1xuICAgICAgICAgICAgeCA9IChhLCBiKSA9PiB7XG4gICAgICAgICAgICAgIGEgPSBDKGEpID8gbmV3IFVSTChhKSA6IEIubm9ybWFsaXplKGEpO1xuICAgICAgICAgICAgICByZXR1cm4gZnMucmVhZEZpbGVTeW5jKGEsIGIgPyB2b2lkIDAgOiBcInV0ZjhcIik7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgQSA9IChhKSA9PiB7XG4gICAgICAgICAgICAgIGEgPSB4KGEsIHRydWUpO1xuICAgICAgICAgICAgICBhLmJ1ZmZlciB8fCAoYSA9IG5ldyBVaW50OEFycmF5KGEpKTtcbiAgICAgICAgICAgICAgcmV0dXJuIGE7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgeiA9IChhLCBiLCBjLCBkID0gdHJ1ZSkgPT4ge1xuICAgICAgICAgICAgICBhID0gQyhhKSA/IG5ldyBVUkwoYSkgOiBCLm5vcm1hbGl6ZShhKTtcbiAgICAgICAgICAgICAgZnMucmVhZEZpbGUoYSwgZCA/IHZvaWQgMCA6IFwidXRmOFwiLCAoZywgaCkgPT4ge1xuICAgICAgICAgICAgICAgIGcgPyBjKGcpIDogYihkID8gaC5idWZmZXIgOiBoKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgIWUudGhpc1Byb2dyYW0gJiYgMSA8IHByb2Nlc3MuYXJndi5sZW5ndGggJiYgKGJhID0gcHJvY2Vzcy5hcmd2WzFdLnJlcGxhY2UoL1xcXFwvZywgXCIvXCIpKTtcbiAgICAgICAgICAgIHByb2Nlc3MuYXJndi5zbGljZSgyKTtcbiAgICAgICAgICAgIGUuaW5zcGVjdCA9ICgpID0+IFwiW0Vtc2NyaXB0ZW4gTW9kdWxlIG9iamVjdF1cIjtcbiAgICAgICAgICB9IGVsc2UgaWYgKGNhIHx8IHEpXG4gICAgICAgICAgICBxID8gdiA9IHNlbGYubG9jYXRpb24uaHJlZiA6IFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIGRvY3VtZW50ICYmIGRvY3VtZW50LmN1cnJlbnRTY3JpcHQgJiYgKHYgPSBkb2N1bWVudC5jdXJyZW50U2NyaXB0LnNyYyksIF9zY3JpcHREaXIgJiYgKHYgPSBfc2NyaXB0RGlyKSwgMCAhPT0gdi5pbmRleE9mKFwiYmxvYjpcIikgPyB2ID0gdi5zdWJzdHIoMCwgdi5yZXBsYWNlKC9bPyNdLiovLCBcIlwiKS5sYXN0SW5kZXhPZihcIi9cIikgKyAxKSA6IHYgPSBcIlwiLCB4ID0gKGEpID0+IHtcbiAgICAgICAgICAgICAgdmFyIGIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICAgICAgICAgICAgYi5vcGVuKFwiR0VUXCIsIGEsIGZhbHNlKTtcbiAgICAgICAgICAgICAgYi5zZW5kKG51bGwpO1xuICAgICAgICAgICAgICByZXR1cm4gYi5yZXNwb25zZVRleHQ7XG4gICAgICAgICAgICB9LCBxICYmIChBID0gKGEpID0+IHtcbiAgICAgICAgICAgICAgdmFyIGIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICAgICAgICAgICAgYi5vcGVuKFwiR0VUXCIsIGEsIGZhbHNlKTtcbiAgICAgICAgICAgICAgYi5yZXNwb25zZVR5cGUgPSBcImFycmF5YnVmZmVyXCI7XG4gICAgICAgICAgICAgIGIuc2VuZChudWxsKTtcbiAgICAgICAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KGIucmVzcG9uc2UpO1xuICAgICAgICAgICAgfSksIHogPSAoYSwgYiwgYykgPT4ge1xuICAgICAgICAgICAgICB2YXIgZCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgICAgICAgICAgICBkLm9wZW4oXCJHRVRcIiwgYSwgdHJ1ZSk7XG4gICAgICAgICAgICAgIGQucmVzcG9uc2VUeXBlID0gXCJhcnJheWJ1ZmZlclwiO1xuICAgICAgICAgICAgICBkLm9ubG9hZCA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICAyMDAgPT0gZC5zdGF0dXMgfHwgMCA9PSBkLnN0YXR1cyAmJiBkLnJlc3BvbnNlID8gYihkLnJlc3BvbnNlKSA6IGMoKTtcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgZC5vbmVycm9yID0gYztcbiAgICAgICAgICAgICAgZC5zZW5kKG51bGwpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICB2YXIgZWEgPSBjb25zb2xlLmxvZy5iaW5kKGNvbnNvbGUpLCBEID0gY29uc29sZS5lcnJvci5iaW5kKGNvbnNvbGUpO1xuICAgICAgICAgIE9iamVjdC5hc3NpZ24oZSwgYWEpO1xuICAgICAgICAgIGFhID0gbnVsbDtcbiAgICAgICAgICBcIm9iamVjdFwiICE9IHR5cGVvZiBXZWJBc3NlbWJseSAmJiBFKFwibm8gbmF0aXZlIHdhc20gc3VwcG9ydCBkZXRlY3RlZFwiKTtcbiAgICAgICAgICB2YXIgRiwgZmEgPSBmYWxzZSwgRywgSCwgSSwgSiwgaGE7XG4gICAgICAgICAgZnVuY3Rpb24gaWEoKSB7XG4gICAgICAgICAgICB2YXIgYSA9IEYuYnVmZmVyO1xuICAgICAgICAgICAgZS5IRUFQOCA9IEcgPSBuZXcgSW50OEFycmF5KGEpO1xuICAgICAgICAgICAgZS5IRUFQMTYgPSBuZXcgSW50MTZBcnJheShhKTtcbiAgICAgICAgICAgIGUuSEVBUFU4ID0gSCA9IG5ldyBVaW50OEFycmF5KGEpO1xuICAgICAgICAgICAgZS5IRUFQVTE2ID0gbmV3IFVpbnQxNkFycmF5KGEpO1xuICAgICAgICAgICAgZS5IRUFQMzIgPSBJID0gbmV3IEludDMyQXJyYXkoYSk7XG4gICAgICAgICAgICBlLkhFQVBVMzIgPSBKID0gbmV3IFVpbnQzMkFycmF5KGEpO1xuICAgICAgICAgICAgZS5IRUFQRjMyID0gbmV3IEZsb2F0MzJBcnJheShhKTtcbiAgICAgICAgICAgIGUuSEVBUEY2NCA9IGhhID0gbmV3IEZsb2F0NjRBcnJheShhKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIEsgPSBbXSwgTCA9IFtdLCBqYSA9IFtdLCBNID0gMCwgTiA9IG51bGwsIE8gPSBudWxsO1xuICAgICAgICAgIGZ1bmN0aW9uIEUoYSkge1xuICAgICAgICAgICAgYSA9IFwiQWJvcnRlZChcIiArIGEgKyBcIilcIjtcbiAgICAgICAgICAgIEQoYSk7XG4gICAgICAgICAgICBmYSA9IHRydWU7XG4gICAgICAgICAgICBhID0gbmV3IFdlYkFzc2VtYmx5LlJ1bnRpbWVFcnJvcihhICsgXCIuIEJ1aWxkIHdpdGggLXNBU1NFUlRJT05TIGZvciBtb3JlIGluZm8uXCIpO1xuICAgICAgICAgICAgbChhKTtcbiAgICAgICAgICAgIHRocm93IGE7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBrYSA9IChhKSA9PiBhLnN0YXJ0c1dpdGgoXCJkYXRhOmFwcGxpY2F0aW9uL29jdGV0LXN0cmVhbTtiYXNlNjQsXCIpLCBDID0gKGEpID0+IGEuc3RhcnRzV2l0aChcImZpbGU6Ly9cIiksIFA7XG4gICAgICAgICAgUCA9IFwib3J0LXRyYWluaW5nLXdhc20tc2ltZC53YXNtXCI7XG4gICAgICAgICAgaWYgKCFrYShQKSkge1xuICAgICAgICAgICAgdmFyIGxhID0gUDtcbiAgICAgICAgICAgIFAgPSBlLmxvY2F0ZUZpbGUgPyBlLmxvY2F0ZUZpbGUobGEsIHYpIDogdiArIGxhO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmdW5jdGlvbiBtYShhKSB7XG4gICAgICAgICAgICBpZiAoQSlcbiAgICAgICAgICAgICAgcmV0dXJuIEEoYSk7XG4gICAgICAgICAgICB0aHJvdyBcImJvdGggYXN5bmMgYW5kIHN5bmMgZmV0Y2hpbmcgb2YgdGhlIHdhc20gZmFpbGVkXCI7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIG5hKGEpIHtcbiAgICAgICAgICAgIGlmIChjYSB8fCBxKSB7XG4gICAgICAgICAgICAgIGlmIChcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGZldGNoICYmICFDKGEpKVxuICAgICAgICAgICAgICAgIHJldHVybiBmZXRjaChhLCB7IGNyZWRlbnRpYWxzOiBcInNhbWUtb3JpZ2luXCIgfSkudGhlbigoYikgPT4ge1xuICAgICAgICAgICAgICAgICAgaWYgKCFiLm9rKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBcImZhaWxlZCB0byBsb2FkIHdhc20gYmluYXJ5IGZpbGUgYXQgJ1wiICsgYSArIFwiJ1wiO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGIuYXJyYXlCdWZmZXIoKTtcbiAgICAgICAgICAgICAgICB9KS5jYXRjaCgoKSA9PiBtYShhKSk7XG4gICAgICAgICAgICAgIGlmICh6KVxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgoYiwgYykgPT4ge1xuICAgICAgICAgICAgICAgICAgeihhLCAoZCkgPT4gYihuZXcgVWludDhBcnJheShkKSksIGMpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4gbWEoYSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmdW5jdGlvbiBvYShhLCBiLCBjKSB7XG4gICAgICAgICAgICByZXR1cm4gbmEoYSkudGhlbigoZCkgPT4gV2ViQXNzZW1ibHkuaW5zdGFudGlhdGUoZCwgYikpLnRoZW4oKGQpID0+IGQpLnRoZW4oYywgKGQpID0+IHtcbiAgICAgICAgICAgICAgRChgZmFpbGVkIHRvIGFzeW5jaHJvbm91c2x5IHByZXBhcmUgd2FzbTogJHtkfWApO1xuICAgICAgICAgICAgICBFKGQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIHBhKGEsIGIpIHtcbiAgICAgICAgICAgIHZhciBjID0gUDtcbiAgICAgICAgICAgIHJldHVybiBcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIFdlYkFzc2VtYmx5Lmluc3RhbnRpYXRlU3RyZWFtaW5nIHx8IGthKGMpIHx8IEMoYykgfHwgZGEgfHwgXCJmdW5jdGlvblwiICE9IHR5cGVvZiBmZXRjaCA/IG9hKGMsIGEsIGIpIDogZmV0Y2goYywgeyBjcmVkZW50aWFsczogXCJzYW1lLW9yaWdpblwiIH0pLnRoZW4oKGQpID0+IFdlYkFzc2VtYmx5Lmluc3RhbnRpYXRlU3RyZWFtaW5nKGQsIGEpLnRoZW4oYiwgZnVuY3Rpb24oZykge1xuICAgICAgICAgICAgICBEKGB3YXNtIHN0cmVhbWluZyBjb21waWxlIGZhaWxlZDogJHtnfWApO1xuICAgICAgICAgICAgICBEKFwiZmFsbGluZyBiYWNrIHRvIEFycmF5QnVmZmVyIGluc3RhbnRpYXRpb25cIik7XG4gICAgICAgICAgICAgIHJldHVybiBvYShjLCBhLCBiKTtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIFEsIHFhID0geyA5OTMxMzY6IChhLCBiLCBjLCBkKSA9PiB7XG4gICAgICAgICAgICBpZiAoXCJ1bmRlZmluZWRcIiA9PSB0eXBlb2YgZSB8fCAhZS5RYSlcbiAgICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgICAgICBhID0gUihhID4+PiAwKTtcbiAgICAgICAgICAgIGEuc3RhcnRzV2l0aChcIi4vXCIpICYmIChhID0gYS5zdWJzdHJpbmcoMikpO1xuICAgICAgICAgICAgYSA9IGUuUWEuZ2V0KGEpO1xuICAgICAgICAgICAgaWYgKCFhKVxuICAgICAgICAgICAgICByZXR1cm4gMjtcbiAgICAgICAgICAgIGIgPj4+PSAwO1xuICAgICAgICAgICAgYyA+Pj49IDA7XG4gICAgICAgICAgICBpZiAoYiArIGMgPiBhLmJ5dGVMZW5ndGgpXG4gICAgICAgICAgICAgIHJldHVybiAzO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgcmV0dXJuIEguc2V0KGEuc3ViYXJyYXkoYiwgYiArIGMpLCBkID4+PiAwID4+PiAwKSwgMDtcbiAgICAgICAgICAgIH0gY2F0Y2gge1xuICAgICAgICAgICAgICByZXR1cm4gNDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IH07XG4gICAgICAgICAgZnVuY3Rpb24gcmEoYSkge1xuICAgICAgICAgICAgdGhpcy5LYSA9IGEgLSAyNDtcbiAgICAgICAgICAgIHRoaXMuUGEgPSBmdW5jdGlvbihiKSB7XG4gICAgICAgICAgICAgIEpbdGhpcy5LYSArIDQgPj4+IDIgPj4+IDBdID0gYjtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLk9hID0gZnVuY3Rpb24oYikge1xuICAgICAgICAgICAgICBKW3RoaXMuS2EgKyA4ID4+PiAyID4+PiAwXSA9IGI7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy5NYSA9IGZ1bmN0aW9uKGIsIGMpIHtcbiAgICAgICAgICAgICAgdGhpcy5OYSgpO1xuICAgICAgICAgICAgICB0aGlzLlBhKGIpO1xuICAgICAgICAgICAgICB0aGlzLk9hKGMpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMuTmEgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgSlt0aGlzLkthICsgMTYgPj4+IDIgPj4+IDBdID0gMDtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBzYSA9IDAsIHRhID0gMCwgdWEgPSBcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBUZXh0RGVjb2RlciA/IG5ldyBUZXh0RGVjb2RlcihcInV0ZjhcIikgOiB2b2lkIDAsIHZhID0gKGEsIGIsIGMpID0+IHtcbiAgICAgICAgICAgIGIgPj4+PSAwO1xuICAgICAgICAgICAgdmFyIGQgPSBiICsgYztcbiAgICAgICAgICAgIGZvciAoYyA9IGI7IGFbY10gJiYgIShjID49IGQpOyApXG4gICAgICAgICAgICAgICsrYztcbiAgICAgICAgICAgIGlmICgxNiA8IGMgLSBiICYmIGEuYnVmZmVyICYmIHVhKVxuICAgICAgICAgICAgICByZXR1cm4gdWEuZGVjb2RlKGEuc3ViYXJyYXkoYiwgYykpO1xuICAgICAgICAgICAgZm9yIChkID0gXCJcIjsgYiA8IGM7ICkge1xuICAgICAgICAgICAgICB2YXIgZyA9IGFbYisrXTtcbiAgICAgICAgICAgICAgaWYgKGcgJiAxMjgpIHtcbiAgICAgICAgICAgICAgICB2YXIgaCA9IGFbYisrXSAmIDYzO1xuICAgICAgICAgICAgICAgIGlmICgxOTIgPT0gKGcgJiAyMjQpKVxuICAgICAgICAgICAgICAgICAgZCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKChnICYgMzEpIDw8IDYgfCBoKTtcbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHZhciBtID0gYVtiKytdICYgNjM7XG4gICAgICAgICAgICAgICAgICBnID0gMjI0ID09IChnICYgMjQwKSA/IChnICYgMTUpIDw8IDEyIHwgaCA8PCA2IHwgbSA6IChnICYgNykgPDwgMTggfCBoIDw8IDEyIHwgbSA8PCA2IHwgYVtiKytdICYgNjM7XG4gICAgICAgICAgICAgICAgICA2NTUzNiA+IGcgPyBkICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoZykgOiAoZyAtPSA2NTUzNiwgZCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDU1Mjk2IHwgZyA+PiAxMCwgNTYzMjAgfCBnICYgMTAyMykpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICAgICAgZCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGQ7XG4gICAgICAgICAgfSwgUiA9IChhLCBiKSA9PiAoYSA+Pj49IDApID8gdmEoSCwgYSwgYikgOiBcIlwiLCBTID0gKGEpID0+IHtcbiAgICAgICAgICAgIGZvciAodmFyIGIgPSAwLCBjID0gMDsgYyA8IGEubGVuZ3RoOyArK2MpIHtcbiAgICAgICAgICAgICAgdmFyIGQgPSBhLmNoYXJDb2RlQXQoYyk7XG4gICAgICAgICAgICAgIDEyNyA+PSBkID8gYisrIDogMjA0NyA+PSBkID8gYiArPSAyIDogNTUyOTYgPD0gZCAmJiA1NzM0MyA+PSBkID8gKGIgKz0gNCwgKytjKSA6IGIgKz0gMztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBiO1xuICAgICAgICAgIH0sIFQgPSAoYSwgYiwgYywgZCkgPT4ge1xuICAgICAgICAgICAgYyA+Pj49IDA7XG4gICAgICAgICAgICBpZiAoISgwIDwgZCkpXG4gICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgdmFyIGcgPSBjO1xuICAgICAgICAgICAgZCA9IGMgKyBkIC0gMTtcbiAgICAgICAgICAgIGZvciAodmFyIGggPSAwOyBoIDwgYS5sZW5ndGg7ICsraCkge1xuICAgICAgICAgICAgICB2YXIgbSA9IGEuY2hhckNvZGVBdChoKTtcbiAgICAgICAgICAgICAgaWYgKDU1Mjk2IDw9IG0gJiYgNTczNDMgPj0gbSkge1xuICAgICAgICAgICAgICAgIHZhciByID0gYS5jaGFyQ29kZUF0KCsraCk7XG4gICAgICAgICAgICAgICAgbSA9IDY1NTM2ICsgKChtICYgMTAyMykgPDwgMTApIHwgciAmIDEwMjM7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKDEyNyA+PSBtKSB7XG4gICAgICAgICAgICAgICAgaWYgKGMgPj0gZClcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGJbYysrID4+PiAwXSA9IG07XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKDIwNDcgPj0gbSkge1xuICAgICAgICAgICAgICAgICAgaWYgKGMgKyAxID49IGQpXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgYltjKysgPj4+IDBdID0gMTkyIHwgbSA+PiA2O1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBpZiAoNjU1MzUgPj0gbSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoYyArIDIgPj0gZClcbiAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgYltjKysgPj4+IDBdID0gMjI0IHwgbSA+PiAxMjtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjICsgMyA+PSBkKVxuICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBiW2MrKyA+Pj4gMF0gPSAyNDAgfCBtID4+IDE4O1xuICAgICAgICAgICAgICAgICAgICBiW2MrKyA+Pj4gMF0gPSAxMjggfCBtID4+IDEyICYgNjM7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBiW2MrKyA+Pj4gMF0gPSAxMjggfCBtID4+IDYgJiA2MztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYltjKysgPj4+IDBdID0gMTI4IHwgbSAmIDYzO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBiW2MgPj4+IDBdID0gMDtcbiAgICAgICAgICAgIHJldHVybiBjIC0gZztcbiAgICAgICAgICB9LCBVID0gKGEpID0+IDAgPT09IGEgJSA0ICYmICgwICE9PSBhICUgMTAwIHx8IDAgPT09IGEgJSA0MDApLCB3YSA9IFswLCAzMSwgNjAsIDkxLCAxMjEsIDE1MiwgMTgyLCAyMTMsIDI0NCwgMjc0LCAzMDUsIDMzNV0sIHhhID0gWzAsIDMxLCA1OSwgOTAsIDEyMCwgMTUxLCAxODEsIDIxMiwgMjQzLCAyNzMsIDMwNCwgMzM0XSwgQ2EgPSAoYSkgPT4ge1xuICAgICAgICAgICAgdmFyIGIgPSBTKGEpICsgMSwgYyA9IEJhKGIpO1xuICAgICAgICAgICAgYyAmJiBUKGEsIEgsIGMsIGIpO1xuICAgICAgICAgICAgcmV0dXJuIGM7XG4gICAgICAgICAgfSwgViA9IFtdLCBXID0ge30sIERhID0gKCkgPT4ge1xuICAgICAgICAgICAgaWYgKCFYKSB7XG4gICAgICAgICAgICAgIHZhciBhID0geyBVU0VSOiBcIndlYl91c2VyXCIsIExPR05BTUU6IFwid2ViX3VzZXJcIiwgUEFUSDogXCIvXCIsIFBXRDogXCIvXCIsIEhPTUU6IFwiL2hvbWUvd2ViX3VzZXJcIiwgTEFORzogKFwib2JqZWN0XCIgPT0gdHlwZW9mIG5hdmlnYXRvciAmJiBuYXZpZ2F0b3IubGFuZ3VhZ2VzICYmIG5hdmlnYXRvci5sYW5ndWFnZXNbMF0gfHwgXCJDXCIpLnJlcGxhY2UoXG4gICAgICAgICAgICAgICAgXCItXCIsXG4gICAgICAgICAgICAgICAgXCJfXCJcbiAgICAgICAgICAgICAgKSArIFwiLlVURi04XCIsIF86IGJhIHx8IFwiLi90aGlzLnByb2dyYW1cIiB9LCBiO1xuICAgICAgICAgICAgICBmb3IgKGIgaW4gVylcbiAgICAgICAgICAgICAgICB2b2lkIDAgPT09IFdbYl0gPyBkZWxldGUgYVtiXSA6IGFbYl0gPSBXW2JdO1xuICAgICAgICAgICAgICB2YXIgYyA9IFtdO1xuICAgICAgICAgICAgICBmb3IgKGIgaW4gYSlcbiAgICAgICAgICAgICAgICBjLnB1c2goYCR7Yn09JHthW2JdfWApO1xuICAgICAgICAgICAgICBYID0gYztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBYO1xuICAgICAgICAgIH0sIFgsIEVhID0gW251bGwsIFtdLCBbXV0sIEZhID0gWzMxLCAyOSwgMzEsIDMwLCAzMSwgMzAsIDMxLCAzMSwgMzAsIDMxLCAzMCwgMzFdLCBHYSA9IFszMSwgMjgsIDMxLCAzMCwgMzEsIDMwLCAzMSwgMzEsIDMwLCAzMSwgMzAsIDMxXTtcbiAgICAgICAgICBmdW5jdGlvbiBIYShhKSB7XG4gICAgICAgICAgICB2YXIgYiA9IEFycmF5KFMoYSkgKyAxKTtcbiAgICAgICAgICAgIFQoYSwgYiwgMCwgYi5sZW5ndGgpO1xuICAgICAgICAgICAgcmV0dXJuIGI7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIElhKGEsIGIsIGMsIGQpIHtcbiAgICAgICAgICAgIGZ1bmN0aW9uIGcoZiwgbiwgcCkge1xuICAgICAgICAgICAgICBmb3IgKGYgPSBcIm51bWJlclwiID09IHR5cGVvZiBmID8gZi50b1N0cmluZygpIDogZiB8fCBcIlwiOyBmLmxlbmd0aCA8IG47IClcbiAgICAgICAgICAgICAgICBmID0gcFswXSArIGY7XG4gICAgICAgICAgICAgIHJldHVybiBmO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gaChmLCBuKSB7XG4gICAgICAgICAgICAgIHJldHVybiBnKGYsIG4sIFwiMFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIG0oZiwgbikge1xuICAgICAgICAgICAgICBmdW5jdGlvbiBwKHlhKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDAgPiB5YSA/IC0xIDogMCA8IHlhID8gMSA6IDA7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgdmFyIHk7XG4gICAgICAgICAgICAgIDAgPT09ICh5ID0gcChmLmdldEZ1bGxZZWFyKCkgLSBuLmdldEZ1bGxZZWFyKCkpKSAmJiAwID09PSAoeSA9IHAoZi5nZXRNb250aCgpIC0gbi5nZXRNb250aCgpKSkgJiYgKHkgPSBwKGYuZ2V0RGF0ZSgpIC0gbi5nZXREYXRlKCkpKTtcbiAgICAgICAgICAgICAgcmV0dXJuIHk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiByKGYpIHtcbiAgICAgICAgICAgICAgc3dpdGNoIChmLmdldERheSgpKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKGYuZ2V0RnVsbFllYXIoKSAtIDEsIDExLCAyOSk7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgcmV0dXJuIGY7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKGYuZ2V0RnVsbFllYXIoKSwgMCwgMyk7XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKFxuICAgICAgICAgICAgICAgICAgICBmLmdldEZ1bGxZZWFyKCksXG4gICAgICAgICAgICAgICAgICAgIDAsXG4gICAgICAgICAgICAgICAgICAgIDJcbiAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKGYuZ2V0RnVsbFllYXIoKSwgMCwgMSk7XG4gICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKGYuZ2V0RnVsbFllYXIoKSAtIDEsIDExLCAzMSk7XG4gICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKGYuZ2V0RnVsbFllYXIoKSAtIDEsIDExLCAzMCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIHcoZikge1xuICAgICAgICAgICAgICB2YXIgbiA9IGYuR2E7XG4gICAgICAgICAgICAgIGZvciAoZiA9IG5ldyBEYXRlKG5ldyBEYXRlKGYuSGEgKyAxOTAwLCAwLCAxKS5nZXRUaW1lKCkpOyAwIDwgbjsgKSB7XG4gICAgICAgICAgICAgICAgdmFyIHAgPSBmLmdldE1vbnRoKCksIHkgPSAoVShmLmdldEZ1bGxZZWFyKCkpID8gRmEgOiBHYSlbcF07XG4gICAgICAgICAgICAgICAgaWYgKG4gPiB5IC0gZi5nZXREYXRlKCkpXG4gICAgICAgICAgICAgICAgICBuIC09IHkgLSBmLmdldERhdGUoKSArIDEsIGYuc2V0RGF0ZSgxKSwgMTEgPiBwID8gZi5zZXRNb250aChwICsgMSkgOiAoZi5zZXRNb250aCgwKSwgZi5zZXRGdWxsWWVhcihmLmdldEZ1bGxZZWFyKCkgKyAxKSk7XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICBmLnNldERhdGUoZi5nZXREYXRlKCkgKyBuKTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBwID0gbmV3IERhdGUoZi5nZXRGdWxsWWVhcigpICsgMSwgMCwgNCk7XG4gICAgICAgICAgICAgIG4gPSByKG5ldyBEYXRlKFxuICAgICAgICAgICAgICAgIGYuZ2V0RnVsbFllYXIoKSxcbiAgICAgICAgICAgICAgICAwLFxuICAgICAgICAgICAgICAgIDRcbiAgICAgICAgICAgICAgKSk7XG4gICAgICAgICAgICAgIHAgPSByKHApO1xuICAgICAgICAgICAgICByZXR1cm4gMCA+PSBtKG4sIGYpID8gMCA+PSBtKHAsIGYpID8gZi5nZXRGdWxsWWVhcigpICsgMSA6IGYuZ2V0RnVsbFllYXIoKSA6IGYuZ2V0RnVsbFllYXIoKSAtIDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhID4+Pj0gMDtcbiAgICAgICAgICAgIGIgPj4+PSAwO1xuICAgICAgICAgICAgYyA+Pj49IDA7XG4gICAgICAgICAgICBkID4+Pj0gMDtcbiAgICAgICAgICAgIHZhciB0ID0gSltkICsgNDAgPj4+IDIgPj4+IDBdO1xuICAgICAgICAgICAgZCA9IHsgVGE6IElbZCA+Pj4gMiA+Pj4gMF0sIFNhOiBJW2QgKyA0ID4+PiAyID4+PiAwXSwgSWE6IElbZCArIDggPj4+IDIgPj4+IDBdLCBMYTogSVtkICsgMTIgPj4+IDIgPj4+IDBdLCBKYTogSVtkICsgMTYgPj4+IDIgPj4+IDBdLCBIYTogSVtkICsgMjAgPj4+IDIgPj4+IDBdLCBCYTogSVtkICsgMjQgPj4+IDIgPj4+IDBdLCBHYTogSVtkICsgMjggPj4+IDIgPj4+IDBdLCBWYTogSVtkICsgMzIgPj4+IDIgPj4+IDBdLCBSYTogSVtkICsgMzYgPj4+IDIgPj4+IDBdLCBVYTogdCA/IFIodCkgOiBcIlwiIH07XG4gICAgICAgICAgICBjID0gUihjKTtcbiAgICAgICAgICAgIHQgPSB7XG4gICAgICAgICAgICAgIFwiJWNcIjogXCIlYSAlYiAlZCAlSDolTTolUyAlWVwiLFxuICAgICAgICAgICAgICBcIiVEXCI6IFwiJW0vJWQvJXlcIixcbiAgICAgICAgICAgICAgXCIlRlwiOiBcIiVZLSVtLSVkXCIsXG4gICAgICAgICAgICAgIFwiJWhcIjogXCIlYlwiLFxuICAgICAgICAgICAgICBcIiVyXCI6IFwiJUk6JU06JVMgJXBcIixcbiAgICAgICAgICAgICAgXCIlUlwiOiBcIiVIOiVNXCIsXG4gICAgICAgICAgICAgIFwiJVRcIjogXCIlSDolTTolU1wiLFxuICAgICAgICAgICAgICBcIiV4XCI6IFwiJW0vJWQvJXlcIixcbiAgICAgICAgICAgICAgXCIlWFwiOiBcIiVIOiVNOiVTXCIsXG4gICAgICAgICAgICAgIFwiJUVjXCI6IFwiJWNcIixcbiAgICAgICAgICAgICAgXCIlRUNcIjogXCIlQ1wiLFxuICAgICAgICAgICAgICBcIiVFeFwiOiBcIiVtLyVkLyV5XCIsXG4gICAgICAgICAgICAgIFwiJUVYXCI6IFwiJUg6JU06JVNcIixcbiAgICAgICAgICAgICAgXCIlRXlcIjogXCIleVwiLFxuICAgICAgICAgICAgICBcIiVFWVwiOiBcIiVZXCIsXG4gICAgICAgICAgICAgIFwiJU9kXCI6IFwiJWRcIixcbiAgICAgICAgICAgICAgXCIlT2VcIjogXCIlZVwiLFxuICAgICAgICAgICAgICBcIiVPSFwiOiBcIiVIXCIsXG4gICAgICAgICAgICAgIFwiJU9JXCI6IFwiJUlcIixcbiAgICAgICAgICAgICAgXCIlT21cIjogXCIlbVwiLFxuICAgICAgICAgICAgICBcIiVPTVwiOiBcIiVNXCIsXG4gICAgICAgICAgICAgIFwiJU9TXCI6IFwiJVNcIixcbiAgICAgICAgICAgICAgXCIlT3VcIjogXCIldVwiLFxuICAgICAgICAgICAgICBcIiVPVVwiOiBcIiVVXCIsXG4gICAgICAgICAgICAgIFwiJU9WXCI6IFwiJVZcIixcbiAgICAgICAgICAgICAgXCIlT3dcIjogXCIld1wiLFxuICAgICAgICAgICAgICBcIiVPV1wiOiBcIiVXXCIsXG4gICAgICAgICAgICAgIFwiJU95XCI6IFwiJXlcIlxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGZvciAodmFyIHUgaW4gdClcbiAgICAgICAgICAgICAgYyA9IGMucmVwbGFjZShuZXcgUmVnRXhwKHUsIFwiZ1wiKSwgdFt1XSk7XG4gICAgICAgICAgICB2YXIgemEgPSBcIlN1bmRheSBNb25kYXkgVHVlc2RheSBXZWRuZXNkYXkgVGh1cnNkYXkgRnJpZGF5IFNhdHVyZGF5XCIuc3BsaXQoXCIgXCIpLCBBYSA9IFwiSmFudWFyeSBGZWJydWFyeSBNYXJjaCBBcHJpbCBNYXkgSnVuZSBKdWx5IEF1Z3VzdCBTZXB0ZW1iZXIgT2N0b2JlciBOb3ZlbWJlciBEZWNlbWJlclwiLnNwbGl0KFwiIFwiKTtcbiAgICAgICAgICAgIHQgPSB7XG4gICAgICAgICAgICAgIFwiJWFcIjogKGYpID0+IHphW2YuQmFdLnN1YnN0cmluZygwLCAzKSxcbiAgICAgICAgICAgICAgXCIlQVwiOiAoZikgPT4gemFbZi5CYV0sXG4gICAgICAgICAgICAgIFwiJWJcIjogKGYpID0+IEFhW2YuSmFdLnN1YnN0cmluZygwLCAzKSxcbiAgICAgICAgICAgICAgXCIlQlwiOiAoZikgPT4gQWFbZi5KYV0sXG4gICAgICAgICAgICAgIFwiJUNcIjogKGYpID0+IGgoKGYuSGEgKyAxOTAwKSAvIDEwMCB8IDAsIDIpLFxuICAgICAgICAgICAgICBcIiVkXCI6IChmKSA9PiBoKGYuTGEsIDIpLFxuICAgICAgICAgICAgICBcIiVlXCI6IChmKSA9PiBnKGYuTGEsIDIsIFwiIFwiKSxcbiAgICAgICAgICAgICAgXCIlZ1wiOiAoZikgPT4gdyhmKS50b1N0cmluZygpLnN1YnN0cmluZygyKSxcbiAgICAgICAgICAgICAgXCIlR1wiOiAoZikgPT4gdyhmKSxcbiAgICAgICAgICAgICAgXCIlSFwiOiAoZikgPT4gaChmLklhLCAyKSxcbiAgICAgICAgICAgICAgXCIlSVwiOiAoZikgPT4ge1xuICAgICAgICAgICAgICAgIGYgPSBmLklhO1xuICAgICAgICAgICAgICAgIDAgPT0gZiA/IGYgPSAxMiA6IDEyIDwgZiAmJiAoZiAtPSAxMik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGgoZiwgMik7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIFwiJWpcIjogKGYpID0+IHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBuID0gMCwgcCA9IDA7IHAgPD0gZi5KYSAtIDE7IG4gKz0gKFUoZi5IYSArIDE5MDApID8gRmEgOiBHYSlbcCsrXSlcbiAgICAgICAgICAgICAgICAgIDtcbiAgICAgICAgICAgICAgICByZXR1cm4gaChmLkxhICsgbiwgMyk7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIFwiJW1cIjogKGYpID0+IGgoZi5KYSArIDEsIDIpLFxuICAgICAgICAgICAgICBcIiVNXCI6IChmKSA9PiBoKGYuU2EsIDIpLFxuICAgICAgICAgICAgICBcIiVuXCI6ICgpID0+IFwiXFxuXCIsXG4gICAgICAgICAgICAgIFwiJXBcIjogKGYpID0+IDAgPD0gZi5JYSAmJiAxMiA+IGYuSWEgPyBcIkFNXCIgOiBcIlBNXCIsXG4gICAgICAgICAgICAgIFwiJVNcIjogKGYpID0+IGgoZi5UYSwgMiksXG4gICAgICAgICAgICAgIFwiJXRcIjogKCkgPT4gXCJcdFwiLFxuICAgICAgICAgICAgICBcIiV1XCI6IChmKSA9PiBmLkJhIHx8IDcsXG4gICAgICAgICAgICAgIFwiJVVcIjogKGYpID0+IGgoXG4gICAgICAgICAgICAgICAgTWF0aC5mbG9vcigoZi5HYSArIDcgLSBmLkJhKSAvIDcpLFxuICAgICAgICAgICAgICAgIDJcbiAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgXCIlVlwiOiAoZikgPT4ge1xuICAgICAgICAgICAgICAgIHZhciBuID0gTWF0aC5mbG9vcigoZi5HYSArIDcgLSAoZi5CYSArIDYpICUgNykgLyA3KTtcbiAgICAgICAgICAgICAgICAyID49IChmLkJhICsgMzcxIC0gZi5HYSAtIDIpICUgNyAmJiBuKys7XG4gICAgICAgICAgICAgICAgaWYgKG4pXG4gICAgICAgICAgICAgICAgICA1MyA9PSBuICYmIChwID0gKGYuQmEgKyAzNzEgLSBmLkdhKSAlIDcsIDQgPT0gcCB8fCAzID09IHAgJiYgVShmLkhhKSB8fCAobiA9IDEpKTtcbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIG4gPSA1MjtcbiAgICAgICAgICAgICAgICAgIHZhciBwID0gKGYuQmEgKyA3IC0gZi5HYSAtIDEpICUgNztcbiAgICAgICAgICAgICAgICAgICg0ID09IHAgfHwgNSA9PSBwICYmIFUoZi5IYSAlIDQwMCAtIDEpKSAmJiBuKys7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBoKG4sIDIpO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBcIiV3XCI6IChmKSA9PiBmLkJhLFxuICAgICAgICAgICAgICBcIiVXXCI6IChmKSA9PiBoKE1hdGguZmxvb3IoKGYuR2EgKyA3IC0gKGYuQmEgKyA2KSAlIDcpIC8gNyksIDIpLFxuICAgICAgICAgICAgICBcIiV5XCI6IChmKSA9PiAoZi5IYSArIDE5MDApLnRvU3RyaW5nKCkuc3Vic3RyaW5nKDIpLFxuICAgICAgICAgICAgICBcIiVZXCI6IChmKSA9PiBmLkhhICsgMTkwMCxcbiAgICAgICAgICAgICAgXCIlelwiOiAoZikgPT4ge1xuICAgICAgICAgICAgICAgIGYgPSBmLlJhO1xuICAgICAgICAgICAgICAgIHZhciBuID0gMCA8PSBmO1xuICAgICAgICAgICAgICAgIGYgPSBNYXRoLmFicyhmKSAvIDYwO1xuICAgICAgICAgICAgICAgIHJldHVybiAobiA/IFwiK1wiIDogXCItXCIpICsgU3RyaW5nKFwiMDAwMFwiICsgKGYgLyA2MCAqIDEwMCArIGYgJSA2MCkpLnNsaWNlKC00KTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgXCIlWlwiOiAoZikgPT4gZi5VYSxcbiAgICAgICAgICAgICAgXCIlJVwiOiAoKSA9PiBcIiVcIlxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGMgPSBjLnJlcGxhY2UoLyUlL2csIFwiXFwwXFwwXCIpO1xuICAgICAgICAgICAgZm9yICh1IGluIHQpXG4gICAgICAgICAgICAgIGMuaW5jbHVkZXModSkgJiYgKGMgPSBjLnJlcGxhY2UobmV3IFJlZ0V4cCh1LCBcImdcIiksIHRbdV0oZCkpKTtcbiAgICAgICAgICAgIGMgPSBjLnJlcGxhY2UoL1xcMFxcMC9nLCBcIiVcIik7XG4gICAgICAgICAgICB1ID0gSGEoYyk7XG4gICAgICAgICAgICBpZiAodS5sZW5ndGggPiBiKVxuICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgIEcuc2V0KHUsIGEgPj4+IDApO1xuICAgICAgICAgICAgcmV0dXJuIHUubGVuZ3RoIC0gMTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIExhID0geyBhOiBmdW5jdGlvbihhLCBiLCBjKSB7XG4gICAgICAgICAgICBhID4+Pj0gMDtcbiAgICAgICAgICAgIG5ldyByYShhKS5NYShiID4+PiAwLCBjID4+PiAwKTtcbiAgICAgICAgICAgIHNhID0gYTtcbiAgICAgICAgICAgIHRhKys7XG4gICAgICAgICAgICB0aHJvdyBzYTtcbiAgICAgICAgICB9LCBlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgIH0sIEg6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIH0sIHg6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIH0sIHo6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIH0sIEo6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgfSwgRjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgfSwgQTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgfSwgRTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgfSwgZzogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgfSwgeTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgfSwgdjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgfSwgRzogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgfSwgdzogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgfSwgazogKCkgPT4gMSwgbjogZnVuY3Rpb24oYSwgYiwgYykge1xuICAgICAgICAgICAgYSA9IGIgKyAyMDk3MTUyID4+PiAwIDwgNDE5NDMwNSAtICEhYSA/IChhID4+PiAwKSArIDQyOTQ5NjcyOTYgKiBiIDogTmFOO1xuICAgICAgICAgICAgYyA+Pj49IDA7XG4gICAgICAgICAgICBhID0gbmV3IERhdGUoMWUzICogYSk7XG4gICAgICAgICAgICBJW2MgPj4+IDIgPj4+IDBdID0gYS5nZXRVVENTZWNvbmRzKCk7XG4gICAgICAgICAgICBJW2MgKyA0ID4+PiAyID4+PiAwXSA9IGEuZ2V0VVRDTWludXRlcygpO1xuICAgICAgICAgICAgSVtjICsgOCA+Pj4gMiA+Pj4gMF0gPSBhLmdldFVUQ0hvdXJzKCk7XG4gICAgICAgICAgICBJW2MgKyAxMiA+Pj4gMiA+Pj4gMF0gPSBhLmdldFVUQ0RhdGUoKTtcbiAgICAgICAgICAgIElbYyArIDE2ID4+PiAyID4+PiAwXSA9IGEuZ2V0VVRDTW9udGgoKTtcbiAgICAgICAgICAgIElbYyArIDIwID4+PiAyID4+PiAwXSA9IGEuZ2V0VVRDRnVsbFllYXIoKSAtIDE5MDA7XG4gICAgICAgICAgICBJW2MgKyAyNCA+Pj4gMiA+Pj4gMF0gPSBhLmdldFVUQ0RheSgpO1xuICAgICAgICAgICAgSVtjICsgMjggPj4+IDIgPj4+IDBdID0gKGEuZ2V0VGltZSgpIC0gRGF0ZS5VVEMoYS5nZXRVVENGdWxsWWVhcigpLCAwLCAxLCAwLCAwLCAwLCAwKSkgLyA4NjRlNSB8IDA7XG4gICAgICAgICAgfSwgbzogZnVuY3Rpb24oYSwgYiwgYykge1xuICAgICAgICAgICAgYSA9IGIgKyAyMDk3MTUyID4+PiAwIDwgNDE5NDMwNSAtICEhYSA/IChhID4+PiAwKSArIDQyOTQ5NjcyOTYgKiBiIDogTmFOO1xuICAgICAgICAgICAgYyA+Pj49IDA7XG4gICAgICAgICAgICBhID0gbmV3IERhdGUoMWUzICogYSk7XG4gICAgICAgICAgICBJW2MgPj4+IDIgPj4+IDBdID0gYS5nZXRTZWNvbmRzKCk7XG4gICAgICAgICAgICBJW2MgKyA0ID4+PiAyID4+PiAwXSA9IGEuZ2V0TWludXRlcygpO1xuICAgICAgICAgICAgSVtjICsgOCA+Pj4gMiA+Pj4gMF0gPSBhLmdldEhvdXJzKCk7XG4gICAgICAgICAgICBJW2MgKyAxMiA+Pj4gMiA+Pj4gMF0gPSBhLmdldERhdGUoKTtcbiAgICAgICAgICAgIElbYyArIDE2ID4+PiAyID4+PiAwXSA9IGEuZ2V0TW9udGgoKTtcbiAgICAgICAgICAgIElbYyArIDIwID4+PiAyID4+PiAwXSA9IGEuZ2V0RnVsbFllYXIoKSAtIDE5MDA7XG4gICAgICAgICAgICBJW2MgKyAyNCA+Pj4gMiA+Pj4gMF0gPSBhLmdldERheSgpO1xuICAgICAgICAgICAgSVtjICsgMjggPj4+IDIgPj4+IDBdID0gKFUoYS5nZXRGdWxsWWVhcigpKSA/IHdhIDogeGEpW2EuZ2V0TW9udGgoKV0gKyBhLmdldERhdGUoKSAtIDEgfCAwO1xuICAgICAgICAgICAgSVtjICsgMzYgPj4+IDIgPj4+IDBdID0gLSg2MCAqIGEuZ2V0VGltZXpvbmVPZmZzZXQoKSk7XG4gICAgICAgICAgICBiID0gbmV3IERhdGUoYS5nZXRGdWxsWWVhcigpLCA2LCAxKS5nZXRUaW1lem9uZU9mZnNldCgpO1xuICAgICAgICAgICAgdmFyIGQgPSBuZXcgRGF0ZShhLmdldEZ1bGxZZWFyKCksIDAsIDEpLmdldFRpbWV6b25lT2Zmc2V0KCk7XG4gICAgICAgICAgICBJW2MgKyAzMiA+Pj4gMiA+Pj4gMF0gPSAoYiAhPSBkICYmIGEuZ2V0VGltZXpvbmVPZmZzZXQoKSA9PSBNYXRoLm1pbihkLCBiKSkgfCAwO1xuICAgICAgICAgIH0sIHA6IGZ1bmN0aW9uKGEpIHtcbiAgICAgICAgICAgIGEgPj4+PSAwO1xuICAgICAgICAgICAgdmFyIGIgPSBuZXcgRGF0ZShJW2EgKyAyMCA+Pj4gMiA+Pj4gMF0gKyAxOTAwLCBJW2EgKyAxNiA+Pj4gMiA+Pj4gMF0sIElbYSArIDEyID4+PiAyID4+PiAwXSwgSVthICsgOCA+Pj4gMiA+Pj4gMF0sIElbYSArIDQgPj4+IDIgPj4+IDBdLCBJW2EgPj4+IDIgPj4+IDBdLCAwKSwgYyA9IElbYSArIDMyID4+PiAyID4+PiAwXSwgZCA9IGIuZ2V0VGltZXpvbmVPZmZzZXQoKSwgZyA9IG5ldyBEYXRlKGIuZ2V0RnVsbFllYXIoKSwgNiwgMSkuZ2V0VGltZXpvbmVPZmZzZXQoKSwgaCA9IG5ldyBEYXRlKGIuZ2V0RnVsbFllYXIoKSwgMCwgMSkuZ2V0VGltZXpvbmVPZmZzZXQoKSwgbSA9IE1hdGgubWluKGgsIGcpO1xuICAgICAgICAgICAgMCA+IGMgPyBJW2EgKyAzMiA+Pj4gMiA+Pj4gMF0gPSBOdW1iZXIoZyAhPSBoICYmIG0gPT0gZCkgOiAwIDwgYyAhPSAobSA9PSBkKSAmJiAoZyA9IE1hdGgubWF4KGgsIGcpLCBiLnNldFRpbWUoYi5nZXRUaW1lKCkgKyA2ZTQgKiAoKDAgPCBjID8gbSA6IGcpIC0gZCkpKTtcbiAgICAgICAgICAgIElbYSArIDI0ID4+PiAyID4+PiAwXSA9IGIuZ2V0RGF5KCk7XG4gICAgICAgICAgICBJW2EgKyAyOCA+Pj4gMiA+Pj4gMF0gPSAoVShiLmdldEZ1bGxZZWFyKCkpID8gd2EgOiB4YSlbYi5nZXRNb250aCgpXSArIGIuZ2V0RGF0ZSgpIC0gMSB8IDA7XG4gICAgICAgICAgICBJW2EgPj4+IDIgPj4+IDBdID0gYi5nZXRTZWNvbmRzKCk7XG4gICAgICAgICAgICBJW2EgKyA0ID4+PiAyID4+PiAwXSA9IGIuZ2V0TWludXRlcygpO1xuICAgICAgICAgICAgSVthICsgOCA+Pj4gMiA+Pj4gMF0gPSBiLmdldEhvdXJzKCk7XG4gICAgICAgICAgICBJW2EgKyAxMiA+Pj4gMiA+Pj4gMF0gPSBiLmdldERhdGUoKTtcbiAgICAgICAgICAgIElbYSArIDE2ID4+PiAyID4+PiAwXSA9IGIuZ2V0TW9udGgoKTtcbiAgICAgICAgICAgIElbYSArIDIwID4+PiAyID4+PiAwXSA9IGIuZ2V0WWVhcigpO1xuICAgICAgICAgICAgYSA9IGIuZ2V0VGltZSgpO1xuICAgICAgICAgICAgaXNOYU4oYSkgPyAoSVtKYSgpID4+PiAyID4+PiAwXSA9IDYxLCBhID0gLTEpIDogYSAvPSAxZTM7XG4gICAgICAgICAgICByZXR1cm4gS2EoKFEgPSBhLCAxIDw9ICtNYXRoLmFicyhRKSA/IDAgPCBRID8gK01hdGguZmxvb3IoUSAvIDQyOTQ5NjcyOTYpID4+PiAwIDogfn4rTWF0aC5jZWlsKChRIC0gKyh+flEgPj4+IDApKSAvIDQyOTQ5NjcyOTYpID4+PiAwIDogMCkpLCBhID4+PiAwO1xuICAgICAgICAgIH0sIGw6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIC01MjtcbiAgICAgICAgICB9LCBtOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICB9LCB0OiBmdW5jdGlvbihhLCBiLCBjKSB7XG4gICAgICAgICAgICBmdW5jdGlvbiBkKHcpIHtcbiAgICAgICAgICAgICAgcmV0dXJuICh3ID0gdy50b1RpbWVTdHJpbmcoKS5tYXRjaCgvXFwoKFtBLVphLXogXSspXFwpJC8pKSA/IHdbMV0gOiBcIkdNVFwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYyA+Pj49IDA7XG4gICAgICAgICAgICB2YXIgZyA9ICgvKiBAX19QVVJFX18gKi8gbmV3IERhdGUoKSkuZ2V0RnVsbFllYXIoKSwgaCA9IG5ldyBEYXRlKGcsIDAsIDEpLCBtID0gbmV3IERhdGUoZywgNiwgMSk7XG4gICAgICAgICAgICBnID0gaC5nZXRUaW1lem9uZU9mZnNldCgpO1xuICAgICAgICAgICAgdmFyIHIgPSBtLmdldFRpbWV6b25lT2Zmc2V0KCk7XG4gICAgICAgICAgICBKW2EgPj4+IDAgPj4+IDIgPj4+IDBdID0gNjAgKiBNYXRoLm1heChnLCByKTtcbiAgICAgICAgICAgIElbYiA+Pj4gMCA+Pj4gMiA+Pj4gMF0gPSBOdW1iZXIoZyAhPSByKTtcbiAgICAgICAgICAgIGEgPSBkKGgpO1xuICAgICAgICAgICAgYiA9IGQobSk7XG4gICAgICAgICAgICBhID0gQ2EoYSk7XG4gICAgICAgICAgICBiID0gQ2EoYik7XG4gICAgICAgICAgICByIDwgZyA/IChKW2MgPj4+IDIgPj4+IDBdID0gYSwgSltjICsgNCA+Pj4gMiA+Pj4gMF0gPSBiKSA6IChKW2MgPj4+IDIgPj4+IDBdID0gYiwgSltjICsgNCA+Pj4gMiA+Pj4gMF0gPSBhKTtcbiAgICAgICAgICB9LCBkOiAoKSA9PiB7XG4gICAgICAgICAgICBFKFwiXCIpO1xuICAgICAgICAgIH0sIEI6IGZ1bmN0aW9uKGEsIGIsIGMpIHtcbiAgICAgICAgICAgIGEgPj4+PSAwO1xuICAgICAgICAgICAgYiA+Pj49IDA7XG4gICAgICAgICAgICBjID4+Pj0gMDtcbiAgICAgICAgICAgIFYubGVuZ3RoID0gMDtcbiAgICAgICAgICAgIGZvciAodmFyIGQ7IGQgPSBIW2IrKyA+Pj4gMF07ICkge1xuICAgICAgICAgICAgICB2YXIgZyA9IDEwNSAhPSBkO1xuICAgICAgICAgICAgICBnICY9IDExMiAhPSBkO1xuICAgICAgICAgICAgICBjICs9IGcgJiYgYyAlIDggPyA0IDogMDtcbiAgICAgICAgICAgICAgVi5wdXNoKDExMiA9PSBkID8gSltjID4+PiAyID4+PiAwXSA6IDEwNSA9PSBkID8gSVtjID4+PiAyID4+PiAwXSA6IGhhW2MgPj4+IDMgPj4+IDBdKTtcbiAgICAgICAgICAgICAgYyArPSBnID8gOCA6IDQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcWFbYV0uYXBwbHkobnVsbCwgVik7XG4gICAgICAgICAgfSwgaDogKCkgPT4gRGF0ZS5ub3coKSwgdTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gNDI5NDkwMTc2MDtcbiAgICAgICAgICB9LCBiOiAoKSA9PiBwZXJmb3JtYW5jZS5ub3coKSwgSTogZnVuY3Rpb24oYSwgYiwgYykge1xuICAgICAgICAgICAgYiA+Pj49IDA7XG4gICAgICAgICAgICByZXR1cm4gSC5jb3B5V2l0aGluKGEgPj4+IDAgPj4+IDAsIGIgPj4+IDAsIGIgKyAoYyA+Pj4gMCkgPj4+IDApO1xuICAgICAgICAgIH0sIHM6IGZ1bmN0aW9uKGEpIHtcbiAgICAgICAgICAgIGEgPj4+PSAwO1xuICAgICAgICAgICAgdmFyIGIgPSBILmxlbmd0aDtcbiAgICAgICAgICAgIGlmICg0Mjk0OTAxNzYwIDwgYSlcbiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgZm9yICh2YXIgYyA9IDE7IDQgPj0gYzsgYyAqPSAyKSB7XG4gICAgICAgICAgICAgIHZhciBkID0gYiAqICgxICsgMC4yIC8gYyk7XG4gICAgICAgICAgICAgIGQgPSBNYXRoLm1pbihkLCBhICsgMTAwNjYzMjk2KTtcbiAgICAgICAgICAgICAgdmFyIGcgPSBNYXRoO1xuICAgICAgICAgICAgICBkID0gTWF0aC5tYXgoYSwgZCk7XG4gICAgICAgICAgICAgIGE6IHtcbiAgICAgICAgICAgICAgICBnID0gKGcubWluLmNhbGwoZywgNDI5NDkwMTc2MCwgZCArICg2NTUzNiAtIGQgJSA2NTUzNikgJSA2NTUzNikgLSBGLmJ1ZmZlci5ieXRlTGVuZ3RoICsgNjU1MzUpIC8gNjU1MzY7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgIEYuZ3JvdyhnKTtcbiAgICAgICAgICAgICAgICAgIGlhKCk7XG4gICAgICAgICAgICAgICAgICB2YXIgaCA9IDE7XG4gICAgICAgICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKG0pIHtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaCA9IHZvaWQgMDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAoaClcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9LCBDOiBmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgICBhID4+Pj0gMDtcbiAgICAgICAgICAgIGIgPj4+PSAwO1xuICAgICAgICAgICAgdmFyIGMgPSAwO1xuICAgICAgICAgICAgRGEoKS5mb3JFYWNoKChkLCBnKSA9PiB7XG4gICAgICAgICAgICAgIHZhciBoID0gYiArIGM7XG4gICAgICAgICAgICAgIGcgPSBKW2EgKyA0ICogZyA+Pj4gMiA+Pj4gMF0gPSBoO1xuICAgICAgICAgICAgICBmb3IgKGggPSAwOyBoIDwgZC5sZW5ndGg7ICsraClcbiAgICAgICAgICAgICAgICBHW2crKyA+Pj4gMCA+Pj4gMF0gPSBkLmNoYXJDb2RlQXQoaCk7XG4gICAgICAgICAgICAgIEdbZyA+Pj4gMCA+Pj4gMF0gPSAwO1xuICAgICAgICAgICAgICBjICs9IGQubGVuZ3RoICsgMTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgfSwgRDogZnVuY3Rpb24oYSwgYikge1xuICAgICAgICAgICAgYSA+Pj49IDA7XG4gICAgICAgICAgICBiID4+Pj0gMDtcbiAgICAgICAgICAgIHZhciBjID0gRGEoKTtcbiAgICAgICAgICAgIEpbYSA+Pj4gMiA+Pj4gMF0gPSBjLmxlbmd0aDtcbiAgICAgICAgICAgIHZhciBkID0gMDtcbiAgICAgICAgICAgIGMuZm9yRWFjaCgoZykgPT4gZCArPSBnLmxlbmd0aCArIDEpO1xuICAgICAgICAgICAgSltiID4+PiAyID4+PiAwXSA9IGQ7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICB9LCBmOiAoKSA9PiA1MiwgajogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gNTI7XG4gICAgICAgICAgfSwgcTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gNzA7XG4gICAgICAgICAgfSwgaTogZnVuY3Rpb24oYSwgYiwgYywgZCkge1xuICAgICAgICAgICAgYiA+Pj49IDA7XG4gICAgICAgICAgICBjID4+Pj0gMDtcbiAgICAgICAgICAgIGQgPj4+PSAwO1xuICAgICAgICAgICAgZm9yICh2YXIgZyA9IDAsIGggPSAwOyBoIDwgYzsgaCsrKSB7XG4gICAgICAgICAgICAgIHZhciBtID0gSltiID4+PiAyID4+PiAwXSwgciA9IEpbYiArIDQgPj4+IDIgPj4+IDBdO1xuICAgICAgICAgICAgICBiICs9IDg7XG4gICAgICAgICAgICAgIGZvciAodmFyIHcgPSAwOyB3IDwgcjsgdysrKSB7XG4gICAgICAgICAgICAgICAgdmFyIHQgPSBIW20gKyB3ID4+PiAwXSwgdSA9IEVhW2FdO1xuICAgICAgICAgICAgICAgIDAgPT09IHQgfHwgMTAgPT09IHQgPyAoKDEgPT09IGEgPyBlYSA6IEQpKHZhKHUsIDApKSwgdS5sZW5ndGggPSAwKSA6IHUucHVzaCh0KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBnICs9IHI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBKW2QgPj4+IDIgPj4+IDBdID0gZztcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgIH0sIHI6IElhLCBjOiBmdW5jdGlvbihhLCBiLCBjLCBkKSB7XG4gICAgICAgICAgICByZXR1cm4gSWEoYSA+Pj4gMCwgYiA+Pj4gMCwgYyA+Pj4gMCwgZCA+Pj4gMCk7XG4gICAgICAgICAgfSB9LCBZID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBmdW5jdGlvbiBhKGMpIHtcbiAgICAgICAgICAgICAgWSA9IGMuZXhwb3J0cztcbiAgICAgICAgICAgICAgWSA9IE1hKCk7XG4gICAgICAgICAgICAgIEYgPSBZLks7XG4gICAgICAgICAgICAgIGlhKCk7XG4gICAgICAgICAgICAgIEwudW5zaGlmdChZLkwpO1xuICAgICAgICAgICAgICBNLS07XG4gICAgICAgICAgICAgIDAgPT0gTSAmJiAobnVsbCAhPT0gTiAmJiAoY2xlYXJJbnRlcnZhbChOKSwgTiA9IG51bGwpLCBPICYmIChjID0gTywgTyA9IG51bGwsIGMoKSkpO1xuICAgICAgICAgICAgICByZXR1cm4gWTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBiID0geyBhOiBMYSB9O1xuICAgICAgICAgICAgTSsrO1xuICAgICAgICAgICAgaWYgKGUuaW5zdGFudGlhdGVXYXNtKVxuICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlLmluc3RhbnRpYXRlV2FzbShiLCBhKTtcbiAgICAgICAgICAgICAgfSBjYXRjaCAoYykge1xuICAgICAgICAgICAgICAgIEQoYE1vZHVsZS5pbnN0YW50aWF0ZVdhc20gY2FsbGJhY2sgZmFpbGVkIHdpdGggZXJyb3I6ICR7Y31gKSwgbChjKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgcGEoYiwgZnVuY3Rpb24oYykge1xuICAgICAgICAgICAgICBhKGMuaW5zdGFuY2UpO1xuICAgICAgICAgICAgfSkuY2F0Y2gobCk7XG4gICAgICAgICAgICByZXR1cm4ge307XG4gICAgICAgICAgfSgpO1xuICAgICAgICAgIGUuX09ydEluaXQgPSAoYSwgYikgPT4gKGUuX09ydEluaXQgPSBZLk0pKGEsIGIpO1xuICAgICAgICAgIGUuX09ydEdldExhc3RFcnJvciA9IChhLCBiKSA9PiAoZS5fT3J0R2V0TGFzdEVycm9yID0gWS5OKShhLCBiKTtcbiAgICAgICAgICBlLl9PcnRDcmVhdGVTZXNzaW9uT3B0aW9ucyA9IChhLCBiLCBjLCBkLCBnLCBoLCBtLCByLCB3LCB0KSA9PiAoZS5fT3J0Q3JlYXRlU2Vzc2lvbk9wdGlvbnMgPSBZLk8pKGEsIGIsIGMsIGQsIGcsIGgsIG0sIHIsIHcsIHQpO1xuICAgICAgICAgIGUuX09ydEFwcGVuZEV4ZWN1dGlvblByb3ZpZGVyID0gKGEsIGIpID0+IChlLl9PcnRBcHBlbmRFeGVjdXRpb25Qcm92aWRlciA9IFkuUCkoYSwgYik7XG4gICAgICAgICAgZS5fT3J0QWRkRnJlZURpbWVuc2lvbk92ZXJyaWRlID0gKGEsIGIsIGMpID0+IChlLl9PcnRBZGRGcmVlRGltZW5zaW9uT3ZlcnJpZGUgPSBZLlEpKGEsIGIsIGMpO1xuICAgICAgICAgIGUuX09ydEFkZFNlc3Npb25Db25maWdFbnRyeSA9IChhLCBiLCBjKSA9PiAoZS5fT3J0QWRkU2Vzc2lvbkNvbmZpZ0VudHJ5ID0gWS5SKShhLCBiLCBjKTtcbiAgICAgICAgICBlLl9PcnRSZWxlYXNlU2Vzc2lvbk9wdGlvbnMgPSAoYSkgPT4gKGUuX09ydFJlbGVhc2VTZXNzaW9uT3B0aW9ucyA9IFkuUykoYSk7XG4gICAgICAgICAgZS5fT3J0Q3JlYXRlU2Vzc2lvbiA9IChhLCBiLCBjKSA9PiAoZS5fT3J0Q3JlYXRlU2Vzc2lvbiA9IFkuVCkoYSwgYiwgYyk7XG4gICAgICAgICAgZS5fT3J0UmVsZWFzZVNlc3Npb24gPSAoYSkgPT4gKGUuX09ydFJlbGVhc2VTZXNzaW9uID0gWS5VKShhKTtcbiAgICAgICAgICBlLl9PcnRHZXRJbnB1dE91dHB1dENvdW50ID0gKGEsIGIsIGMpID0+IChlLl9PcnRHZXRJbnB1dE91dHB1dENvdW50ID0gWS5WKShhLCBiLCBjKTtcbiAgICAgICAgICBlLl9PcnRHZXRJbnB1dE5hbWUgPSAoYSwgYikgPT4gKGUuX09ydEdldElucHV0TmFtZSA9IFkuVykoYSwgYik7XG4gICAgICAgICAgZS5fT3J0R2V0T3V0cHV0TmFtZSA9IChhLCBiKSA9PiAoZS5fT3J0R2V0T3V0cHV0TmFtZSA9IFkuWCkoYSwgYik7XG4gICAgICAgICAgZS5fT3J0RnJlZSA9IChhKSA9PiAoZS5fT3J0RnJlZSA9IFkuWSkoYSk7XG4gICAgICAgICAgZS5fT3J0Q3JlYXRlVGVuc29yID0gKGEsIGIsIGMsIGQsIGcsIGgpID0+IChlLl9PcnRDcmVhdGVUZW5zb3IgPSBZLlopKGEsIGIsIGMsIGQsIGcsIGgpO1xuICAgICAgICAgIGUuX09ydEdldFRlbnNvckRhdGEgPSAoYSwgYiwgYywgZCwgZykgPT4gKGUuX09ydEdldFRlbnNvckRhdGEgPSBZLl8pKGEsIGIsIGMsIGQsIGcpO1xuICAgICAgICAgIGUuX09ydFJlbGVhc2VUZW5zb3IgPSAoYSkgPT4gKGUuX09ydFJlbGVhc2VUZW5zb3IgPSBZLiQpKGEpO1xuICAgICAgICAgIGUuX09ydENyZWF0ZVJ1bk9wdGlvbnMgPSAoYSwgYiwgYywgZCkgPT4gKGUuX09ydENyZWF0ZVJ1bk9wdGlvbnMgPSBZLmFhKShhLCBiLCBjLCBkKTtcbiAgICAgICAgICBlLl9PcnRBZGRSdW5Db25maWdFbnRyeSA9IChhLCBiLCBjKSA9PiAoZS5fT3J0QWRkUnVuQ29uZmlnRW50cnkgPSBZLmJhKShhLCBiLCBjKTtcbiAgICAgICAgICBlLl9PcnRSZWxlYXNlUnVuT3B0aW9ucyA9IChhKSA9PiAoZS5fT3J0UmVsZWFzZVJ1bk9wdGlvbnMgPSBZLmNhKShhKTtcbiAgICAgICAgICBlLl9PcnRDcmVhdGVCaW5kaW5nID0gKGEpID0+IChlLl9PcnRDcmVhdGVCaW5kaW5nID0gWS5kYSkoYSk7XG4gICAgICAgICAgZS5fT3J0QmluZElucHV0ID0gKGEsIGIsIGMpID0+IChlLl9PcnRCaW5kSW5wdXQgPSBZLmVhKShhLCBiLCBjKTtcbiAgICAgICAgICBlLl9PcnRCaW5kT3V0cHV0ID0gKGEsIGIsIGMsIGQpID0+IChlLl9PcnRCaW5kT3V0cHV0ID0gWS5mYSkoYSwgYiwgYywgZCk7XG4gICAgICAgICAgZS5fT3J0Q2xlYXJCb3VuZE91dHB1dHMgPSAoYSkgPT4gKGUuX09ydENsZWFyQm91bmRPdXRwdXRzID0gWS5nYSkoYSk7XG4gICAgICAgICAgZS5fT3J0UmVsZWFzZUJpbmRpbmcgPSAoYSkgPT4gKGUuX09ydFJlbGVhc2VCaW5kaW5nID0gWS5oYSkoYSk7XG4gICAgICAgICAgZS5fT3J0UnVuV2l0aEJpbmRpbmcgPSAoYSwgYiwgYywgZCwgZykgPT4gKGUuX09ydFJ1bldpdGhCaW5kaW5nID0gWS5pYSkoYSwgYiwgYywgZCwgZyk7XG4gICAgICAgICAgZS5fT3J0UnVuID0gKGEsIGIsIGMsIGQsIGcsIGgsIG0sIHIpID0+IChlLl9PcnRSdW4gPSBZLmphKShhLCBiLCBjLCBkLCBnLCBoLCBtLCByKTtcbiAgICAgICAgICBlLl9PcnRFbmRQcm9maWxpbmcgPSAoYSkgPT4gKGUuX09ydEVuZFByb2ZpbGluZyA9IFkua2EpKGEpO1xuICAgICAgICAgIGUuX09ydFRyYWluaW5nTG9hZENoZWNrcG9pbnQgPSAoYSwgYikgPT4gKGUuX09ydFRyYWluaW5nTG9hZENoZWNrcG9pbnQgPSBZLmxhKShhLCBiKTtcbiAgICAgICAgICBlLl9PcnRUcmFpbmluZ1JlbGVhc2VDaGVja3BvaW50ID0gKGEpID0+IChlLl9PcnRUcmFpbmluZ1JlbGVhc2VDaGVja3BvaW50ID0gWS5tYSkoYSk7XG4gICAgICAgICAgZS5fT3J0VHJhaW5pbmdDcmVhdGVTZXNzaW9uID0gKGEsIGIsIGMsIGQsIGcsIGgsIG0sIHIpID0+IChlLl9PcnRUcmFpbmluZ0NyZWF0ZVNlc3Npb24gPSBZLm5hKShhLCBiLCBjLCBkLCBnLCBoLCBtLCByKTtcbiAgICAgICAgICBlLl9PcnRUcmFpbmluZ0xhenlSZXNldEdyYWQgPSAoYSkgPT4gKGUuX09ydFRyYWluaW5nTGF6eVJlc2V0R3JhZCA9IFkub2EpKGEpO1xuICAgICAgICAgIGUuX09ydFRyYWluaW5nUnVuVHJhaW5TdGVwID0gKGEsIGIsIGMsIGQsIGcsIGgpID0+IChlLl9PcnRUcmFpbmluZ1J1blRyYWluU3RlcCA9IFkucGEpKGEsIGIsIGMsIGQsIGcsIGgpO1xuICAgICAgICAgIGUuX09ydFRyYWluaW5nT3B0aW1pemVyU3RlcCA9IChhLCBiKSA9PiAoZS5fT3J0VHJhaW5pbmdPcHRpbWl6ZXJTdGVwID0gWS5xYSkoYSwgYik7XG4gICAgICAgICAgZS5fT3J0VHJhaW5pbmdFdmFsU3RlcCA9IChhLCBiLCBjLCBkLCBnLCBoKSA9PiAoZS5fT3J0VHJhaW5pbmdFdmFsU3RlcCA9IFkucmEpKGEsIGIsIGMsIGQsIGcsIGgpO1xuICAgICAgICAgIGUuX09ydFRyYWluaW5nR2V0UGFyYW1ldGVyc1NpemUgPSAoYSwgYiwgYykgPT4gKGUuX09ydFRyYWluaW5nR2V0UGFyYW1ldGVyc1NpemUgPSBZLnNhKShhLCBiLCBjKTtcbiAgICAgICAgICBlLl9PcnRUcmFpbmluZ0NvcHlQYXJhbWV0ZXJzVG9CdWZmZXIgPSAoYSwgYiwgYywgZCkgPT4gKGUuX09ydFRyYWluaW5nQ29weVBhcmFtZXRlcnNUb0J1ZmZlciA9IFkudGEpKGEsIGIsIGMsIGQpO1xuICAgICAgICAgIGUuX09ydFRyYWluaW5nQ29weVBhcmFtZXRlcnNGcm9tQnVmZmVyID0gKGEsIGIsIGMsIGQpID0+IChlLl9PcnRUcmFpbmluZ0NvcHlQYXJhbWV0ZXJzRnJvbUJ1ZmZlciA9IFkudWEpKGEsIGIsIGMsIGQpO1xuICAgICAgICAgIGUuX09ydFRyYWluaW5nR2V0TW9kZWxJbnB1dE91dHB1dENvdW50ID0gKGEsIGIsIGMsIGQpID0+IChlLl9PcnRUcmFpbmluZ0dldE1vZGVsSW5wdXRPdXRwdXRDb3VudCA9IFkudmEpKGEsIGIsIGMsIGQpO1xuICAgICAgICAgIGUuX09ydFRyYWluaW5nR2V0TW9kZWxJbnB1dE91dHB1dE5hbWUgPSAoYSwgYiwgYywgZCkgPT4gKGUuX09ydFRyYWluaW5nR2V0TW9kZWxJbnB1dE91dHB1dE5hbWUgPSBZLndhKShhLCBiLCBjLCBkKTtcbiAgICAgICAgICBlLl9PcnRUcmFpbmluZ1JlbGVhc2VTZXNzaW9uID0gKGEpID0+IChlLl9PcnRUcmFpbmluZ1JlbGVhc2VTZXNzaW9uID0gWS54YSkoYSk7XG4gICAgICAgICAgdmFyIEphID0gKCkgPT4gKEphID0gWS55YSkoKSwgQmEgPSBlLl9tYWxsb2MgPSAoYSkgPT4gKEJhID0gZS5fbWFsbG9jID0gWS56YSkoYSk7XG4gICAgICAgICAgZS5fZnJlZSA9IChhKSA9PiAoZS5fZnJlZSA9IFkuQWEpKGEpO1xuICAgICAgICAgIHZhciBLYSA9IChhKSA9PiAoS2EgPSBZLkNhKShhKSwgTmEgPSAoKSA9PiAoTmEgPSBZLkRhKSgpLCBPYSA9IChhKSA9PiAoT2EgPSBZLkVhKShhKSwgUGEgPSAoYSkgPT4gKFBhID0gWS5GYSkoYSk7XG4gICAgICAgICAgZnVuY3Rpb24gTWEoKSB7XG4gICAgICAgICAgICB2YXIgYSA9IFk7XG4gICAgICAgICAgICBhID0gT2JqZWN0LmFzc2lnbih7fSwgYSk7XG4gICAgICAgICAgICB2YXIgYiA9IChkKSA9PiAoKSA9PiBkKCkgPj4+IDAsIGMgPSAoZCkgPT4gKGcpID0+IGQoZykgPj4+IDA7XG4gICAgICAgICAgICBhLnlhID0gYihhLnlhKTtcbiAgICAgICAgICAgIGEuemEgPSBjKGEuemEpO1xuICAgICAgICAgICAgYS5EYSA9IGIoYS5EYSk7XG4gICAgICAgICAgICBhLkZhID0gYyhhLkZhKTtcbiAgICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlLnN0YWNrQWxsb2MgPSBQYTtcbiAgICAgICAgICBlLnN0YWNrU2F2ZSA9IE5hO1xuICAgICAgICAgIGUuc3RhY2tSZXN0b3JlID0gT2E7XG4gICAgICAgICAgZS5VVEY4VG9TdHJpbmcgPSBSO1xuICAgICAgICAgIGUuc3RyaW5nVG9VVEY4ID0gKGEsIGIsIGMpID0+IFQoYSwgSCwgYiwgYyk7XG4gICAgICAgICAgZS5sZW5ndGhCeXRlc1VURjggPSBTO1xuICAgICAgICAgIHZhciBaO1xuICAgICAgICAgIE8gPSBmdW5jdGlvbiBRYSgpIHtcbiAgICAgICAgICAgIFogfHwgUmEoKTtcbiAgICAgICAgICAgIFogfHwgKE8gPSBRYSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgICBmdW5jdGlvbiBSYSgpIHtcbiAgICAgICAgICAgIGlmICghKDAgPCBNKSkge1xuICAgICAgICAgICAgICBpZiAoZS5wcmVSdW4pXG4gICAgICAgICAgICAgICAgZm9yIChcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGUucHJlUnVuICYmIChlLnByZVJ1biA9IFtlLnByZVJ1bl0pOyBlLnByZVJ1bi5sZW5ndGg7ICkge1xuICAgICAgICAgICAgICAgICAgdmFyIGEgPSBlLnByZVJ1bi5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgSy51bnNoaWZ0KGEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgZm9yICg7IDAgPCBLLmxlbmd0aDsgKVxuICAgICAgICAgICAgICAgIEsuc2hpZnQoKShlKTtcbiAgICAgICAgICAgICAgaWYgKCEoMCA8IE0gfHwgWiB8fCAoWiA9IHRydWUsIGUuY2FsbGVkUnVuID0gdHJ1ZSwgZmEpKSkge1xuICAgICAgICAgICAgICAgIGZvciAoOyAwIDwgTC5sZW5ndGg7IClcbiAgICAgICAgICAgICAgICAgIEwuc2hpZnQoKShlKTtcbiAgICAgICAgICAgICAgICBmb3IgKGsoZSk7IDAgPCBqYS5sZW5ndGg7IClcbiAgICAgICAgICAgICAgICAgIGphLnNoaWZ0KCkoZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgUmEoKTtcbiAgICAgICAgICByZXR1cm4gbW9kdWxlQXJnLnJlYWR5O1xuICAgICAgICB9O1xuICAgICAgfSkoKTtcbiAgICAgIGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiKVxuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IG9ydFdhc207XG4gICAgICBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lW1wiYW1kXCJdKVxuICAgICAgICBkZWZpbmUoW10sICgpID0+IG9ydFdhc20pO1xuICAgIH1cbiAgfSk7XG5cbiAgLy8gbm9kZWpzLWlnbm9yZTp3b3JrZXJfdGhyZWFkc1xuICB2YXIgcmVxdWlyZV93b3JrZXJfdGhyZWFkcyA9IF9fY29tbW9uSlMoe1xuICAgIFwibm9kZWpzLWlnbm9yZTp3b3JrZXJfdGhyZWFkc1wiKCkge1xuICAgIH1cbiAgfSk7XG5cbiAgLy8gbm9kZWpzLWlnbm9yZTpwZXJmX2hvb2tzXG4gIHZhciByZXF1aXJlX3BlcmZfaG9va3MgPSBfX2NvbW1vbkpTKHtcbiAgICBcIm5vZGVqcy1pZ25vcmU6cGVyZl9ob29rc1wiKCkge1xuICAgIH1cbiAgfSk7XG5cbiAgLy8gbm9kZWpzLWlnbm9yZTpvc1xuICB2YXIgb3NfZXhwb3J0cyA9IHt9O1xuICBfX2V4cG9ydChvc19leHBvcnRzLCB7XG4gICAgY3B1czogKCkgPT4gY3B1c1xuICB9KTtcbiAgdmFyIGNwdXM7XG4gIHZhciBpbml0X29zID0gX19lc20oe1xuICAgIFwibm9kZWpzLWlnbm9yZTpvc1wiKCkge1xuICAgICAgY3B1cyA9IHZvaWQgMDtcbiAgICB9XG4gIH0pO1xuXG4gIC8vIHdlYi9saWIvd2FzbS9iaW5kaW5nL29ydC13YXNtLXRocmVhZGVkLmpzXG4gIHZhciByZXF1aXJlX29ydF93YXNtX3RocmVhZGVkID0gX19jb21tb25KUyh7XG4gICAgXCJ3ZWIvbGliL3dhc20vYmluZGluZy9vcnQtd2FzbS10aHJlYWRlZC5qc1wiKGV4cG9ydHMsIG1vZHVsZSkge1xuICAgICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgICB2YXIgb3J0V2FzbVRocmVhZGVkID0gKCgpID0+IHtcbiAgICAgICAgdmFyIF9zY3JpcHREaXIgPSB0eXBlb2YgZG9jdW1lbnQgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnQuY3VycmVudFNjcmlwdCA/IGRvY3VtZW50LmN1cnJlbnRTY3JpcHQuc3JjIDogdm9pZCAwO1xuICAgICAgICBpZiAodHlwZW9mIF9fZmlsZW5hbWUgIT09IFwidW5kZWZpbmVkXCIpXG4gICAgICAgICAgX3NjcmlwdERpciA9IF9zY3JpcHREaXIgfHwgX19maWxlbmFtZTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKG1vZHVsZUFyZyA9IHt9KSB7XG4gICAgICAgICAgZnVuY3Rpb24gYWEoKSB7XG4gICAgICAgICAgICBlLmJ1ZmZlciAhPSBsLmJ1ZmZlciAmJiBtKCk7XG4gICAgICAgICAgICByZXR1cm4gbDtcbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24gbigpIHtcbiAgICAgICAgICAgIGUuYnVmZmVyICE9IGwuYnVmZmVyICYmIG0oKTtcbiAgICAgICAgICAgIHJldHVybiBiYTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24gcCgpIHtcbiAgICAgICAgICAgIGUuYnVmZmVyICE9IGwuYnVmZmVyICYmIG0oKTtcbiAgICAgICAgICAgIHJldHVybiBjYTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24gcigpIHtcbiAgICAgICAgICAgIGUuYnVmZmVyICE9IGwuYnVmZmVyICYmIG0oKTtcbiAgICAgICAgICAgIHJldHVybiBkYTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24gZWEoKSB7XG4gICAgICAgICAgICBlLmJ1ZmZlciAhPSBsLmJ1ZmZlciAmJiBtKCk7XG4gICAgICAgICAgICByZXR1cm4gZmE7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciB2ID0gbW9kdWxlQXJnLCBoYSwgeDtcbiAgICAgICAgICB2LnJlYWR5ID0gbmV3IFByb21pc2UoKGEsIGIpID0+IHtcbiAgICAgICAgICAgIGhhID0gYTtcbiAgICAgICAgICAgIHggPSBiO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHZhciBpYSA9IE9iamVjdC5hc3NpZ24oe30sIHYpLCBqYSA9IFwiLi90aGlzLnByb2dyYW1cIiwgeiA9IChhLCBiKSA9PiB7XG4gICAgICAgICAgICB0aHJvdyBiO1xuICAgICAgICAgIH0sIGthID0gXCJvYmplY3RcIiA9PSB0eXBlb2Ygd2luZG93LCBBID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBpbXBvcnRTY3JpcHRzLCBCID0gXCJvYmplY3RcIiA9PSB0eXBlb2YgcHJvY2VzcyAmJiBcIm9iamVjdFwiID09IHR5cGVvZiBwcm9jZXNzLnZlcnNpb25zICYmIFwic3RyaW5nXCIgPT0gdHlwZW9mIHByb2Nlc3MudmVyc2lvbnMubm9kZSwgRCA9IHYuRU5WSVJPTk1FTlRfSVNfUFRIUkVBRCB8fCBmYWxzZSwgRSA9IFwiXCI7XG4gICAgICAgICAgZnVuY3Rpb24gbGEoYSkge1xuICAgICAgICAgICAgcmV0dXJuIHYubG9jYXRlRmlsZSA/IHYubG9jYXRlRmlsZShhLCBFKSA6IEUgKyBhO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgbWEsIEcsIEg7XG4gICAgICAgICAgaWYgKEIpIHtcbiAgICAgICAgICAgIHZhciBmcyA9IChpbml0X2ZzKCksIF9fdG9Db21tb25KUyhmc19leHBvcnRzKSksIG5hID0gKGluaXRfcGF0aCgpLCBfX3RvQ29tbW9uSlMocGF0aF9leHBvcnRzKSk7XG4gICAgICAgICAgICBFID0gQSA/IG5hLmRpcm5hbWUoRSkgKyBcIi9cIiA6IF9fZGlybmFtZSArIFwiL1wiO1xuICAgICAgICAgICAgbWEgPSAoYiwgYykgPT4ge1xuICAgICAgICAgICAgICBiID0gSShiKSA/IG5ldyBVUkwoYikgOiBuYS5ub3JtYWxpemUoYik7XG4gICAgICAgICAgICAgIHJldHVybiBmcy5yZWFkRmlsZVN5bmMoYiwgYyA/IHZvaWQgMCA6IFwidXRmOFwiKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBIID0gKGIpID0+IHtcbiAgICAgICAgICAgICAgYiA9IG1hKGIsIHRydWUpO1xuICAgICAgICAgICAgICBiLmJ1ZmZlciB8fCAoYiA9IG5ldyBVaW50OEFycmF5KGIpKTtcbiAgICAgICAgICAgICAgcmV0dXJuIGI7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgRyA9IChiLCBjLCBkLCBnID0gdHJ1ZSkgPT4ge1xuICAgICAgICAgICAgICBiID0gSShiKSA/IG5ldyBVUkwoYikgOiBuYS5ub3JtYWxpemUoYik7XG4gICAgICAgICAgICAgIGZzLnJlYWRGaWxlKGIsIGcgPyB2b2lkIDAgOiBcInV0ZjhcIiwgKGgsIGspID0+IHtcbiAgICAgICAgICAgICAgICBoID8gZChoKSA6IGMoZyA/IGsuYnVmZmVyIDogayk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICF2LnRoaXNQcm9ncmFtICYmIDEgPCBwcm9jZXNzLmFyZ3YubGVuZ3RoICYmIChqYSA9IHByb2Nlc3MuYXJndlsxXS5yZXBsYWNlKC9cXFxcL2csIFwiL1wiKSk7XG4gICAgICAgICAgICBwcm9jZXNzLmFyZ3Yuc2xpY2UoMik7XG4gICAgICAgICAgICB6ID0gKGIsIGMpID0+IHtcbiAgICAgICAgICAgICAgcHJvY2Vzcy5leGl0Q29kZSA9IGI7XG4gICAgICAgICAgICAgIHRocm93IGM7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdi5pbnNwZWN0ID0gKCkgPT4gXCJbRW1zY3JpcHRlbiBNb2R1bGUgb2JqZWN0XVwiO1xuICAgICAgICAgICAgbGV0IGE7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBhID0gcmVxdWlyZV93b3JrZXJfdGhyZWFkcygpO1xuICAgICAgICAgICAgfSBjYXRjaCAoYikge1xuICAgICAgICAgICAgICB0aHJvdyBjb25zb2xlLmVycm9yKCdUaGUgXCJ3b3JrZXJfdGhyZWFkc1wiIG1vZHVsZSBpcyBub3Qgc3VwcG9ydGVkIGluIHRoaXMgbm9kZS5qcyBidWlsZCAtIHBlcmhhcHMgYSBuZXdlciB2ZXJzaW9uIGlzIG5lZWRlZD8nKSwgYjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGdsb2JhbC5Xb3JrZXIgPSBhLldvcmtlcjtcbiAgICAgICAgICB9IGVsc2UgaWYgKGthIHx8IEEpXG4gICAgICAgICAgICBBID8gRSA9IHNlbGYubG9jYXRpb24uaHJlZiA6IFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIGRvY3VtZW50ICYmIGRvY3VtZW50LmN1cnJlbnRTY3JpcHQgJiYgKEUgPSBkb2N1bWVudC5jdXJyZW50U2NyaXB0LnNyYyksIHR5cGVvZiBfc2NyaXB0RGlyICE9PSBcInVuZGVmaW5lZFwiICYmIF9zY3JpcHREaXIgJiYgKEUgPSBfc2NyaXB0RGlyKSwgMCAhPT0gRS5pbmRleE9mKFwiYmxvYjpcIikgPyBFID0gRS5zdWJzdHIoMCwgRS5yZXBsYWNlKC9bPyNdLiovLCBcIlwiKS5sYXN0SW5kZXhPZihcIi9cIikgKyAxKSA6IEUgPSBcIlwiLCBCIHx8IChtYSA9IChhKSA9PiB7XG4gICAgICAgICAgICAgIHZhciBiID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgICAgICAgICAgIGIub3BlbihcIkdFVFwiLCBhLCBmYWxzZSk7XG4gICAgICAgICAgICAgIGIuc2VuZChudWxsKTtcbiAgICAgICAgICAgICAgcmV0dXJuIGIucmVzcG9uc2VUZXh0O1xuICAgICAgICAgICAgfSwgQSAmJiAoSCA9IChhKSA9PiB7XG4gICAgICAgICAgICAgIHZhciBiID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgICAgICAgICAgIGIub3BlbihcIkdFVFwiLCBhLCBmYWxzZSk7XG4gICAgICAgICAgICAgIGIucmVzcG9uc2VUeXBlID0gXCJhcnJheWJ1ZmZlclwiO1xuICAgICAgICAgICAgICBiLnNlbmQobnVsbCk7XG4gICAgICAgICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShiLnJlc3BvbnNlKTtcbiAgICAgICAgICAgIH0pLCBHID0gKGEsIGIsIGMpID0+IHtcbiAgICAgICAgICAgICAgdmFyIGQgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICAgICAgICAgICAgZC5vcGVuKFwiR0VUXCIsIGEsIHRydWUpO1xuICAgICAgICAgICAgICBkLnJlc3BvbnNlVHlwZSA9IFwiYXJyYXlidWZmZXJcIjtcbiAgICAgICAgICAgICAgZC5vbmxvYWQgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgMjAwID09IGQuc3RhdHVzIHx8IDAgPT0gZC5zdGF0dXMgJiYgZC5yZXNwb25zZSA/IGIoZC5yZXNwb25zZSkgOiBjKCk7XG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgIGQub25lcnJvciA9IGM7XG4gICAgICAgICAgICAgIGQuc2VuZChudWxsKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIEIgJiYgXCJ1bmRlZmluZWRcIiA9PSB0eXBlb2YgcGVyZm9ybWFuY2UgJiYgKGdsb2JhbC5wZXJmb3JtYW5jZSA9IHJlcXVpcmVfcGVyZl9ob29rcygpLnBlcmZvcm1hbmNlKTtcbiAgICAgICAgICB2YXIgb2EgPSBjb25zb2xlLmxvZy5iaW5kKGNvbnNvbGUpLCBwYSA9IGNvbnNvbGUuZXJyb3IuYmluZChjb25zb2xlKTtcbiAgICAgICAgICBCICYmIChvYSA9ICguLi5hKSA9PiBmcy53cml0ZVN5bmMoMSwgYS5qb2luKFwiIFwiKSArIFwiXFxuXCIpLCBwYSA9ICguLi5hKSA9PiBmcy53cml0ZVN5bmMoMiwgYS5qb2luKFwiIFwiKSArIFwiXFxuXCIpKTtcbiAgICAgICAgICB2YXIgcWEgPSBvYSwgSiA9IHBhO1xuICAgICAgICAgIE9iamVjdC5hc3NpZ24odiwgaWEpO1xuICAgICAgICAgIGlhID0gbnVsbDtcbiAgICAgICAgICBcIm9iamVjdFwiICE9IHR5cGVvZiBXZWJBc3NlbWJseSAmJiByYShcIm5vIG5hdGl2ZSB3YXNtIHN1cHBvcnQgZGV0ZWN0ZWRcIik7XG4gICAgICAgICAgdmFyIGUsIHNhLCBLID0gZmFsc2UsIEwsIGwsIGJhLCBjYSwgZGEsIGZhO1xuICAgICAgICAgIGZ1bmN0aW9uIG0oKSB7XG4gICAgICAgICAgICB2YXIgYSA9IGUuYnVmZmVyO1xuICAgICAgICAgICAgdi5IRUFQOCA9IGwgPSBuZXcgSW50OEFycmF5KGEpO1xuICAgICAgICAgICAgdi5IRUFQMTYgPSBuZXcgSW50MTZBcnJheShhKTtcbiAgICAgICAgICAgIHYuSEVBUFU4ID0gYmEgPSBuZXcgVWludDhBcnJheShhKTtcbiAgICAgICAgICAgIHYuSEVBUFUxNiA9IG5ldyBVaW50MTZBcnJheShhKTtcbiAgICAgICAgICAgIHYuSEVBUDMyID0gY2EgPSBuZXcgSW50MzJBcnJheShhKTtcbiAgICAgICAgICAgIHYuSEVBUFUzMiA9IGRhID0gbmV3IFVpbnQzMkFycmF5KGEpO1xuICAgICAgICAgICAgdi5IRUFQRjMyID0gbmV3IEZsb2F0MzJBcnJheShhKTtcbiAgICAgICAgICAgIHYuSEVBUEY2NCA9IGZhID0gbmV3IEZsb2F0NjRBcnJheShhKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIHRhID0gMTY3NzcyMTY7XG4gICAgICAgICAgaWYgKEQpXG4gICAgICAgICAgICBlID0gdi53YXNtTWVtb3J5O1xuICAgICAgICAgIGVsc2UgaWYgKHYud2FzbU1lbW9yeSlcbiAgICAgICAgICAgIGUgPSB2Lndhc21NZW1vcnk7XG4gICAgICAgICAgZWxzZSBpZiAoZSA9IG5ldyBXZWJBc3NlbWJseS5NZW1vcnkoeyBpbml0aWFsOiB0YSAvIDY1NTM2LCBtYXhpbXVtOiA2NTUzNiwgc2hhcmVkOiB0cnVlIH0pLCAhKGUuYnVmZmVyIGluc3RhbmNlb2YgU2hhcmVkQXJyYXlCdWZmZXIpKVxuICAgICAgICAgICAgdGhyb3cgSihcInJlcXVlc3RlZCBhIHNoYXJlZCBXZWJBc3NlbWJseS5NZW1vcnkgYnV0IHRoZSByZXR1cm5lZCBidWZmZXIgaXMgbm90IGEgU2hhcmVkQXJyYXlCdWZmZXIsIGluZGljYXRpbmcgdGhhdCB3aGlsZSB0aGUgYnJvd3NlciBoYXMgU2hhcmVkQXJyYXlCdWZmZXIgaXQgZG9lcyBub3QgaGF2ZSBXZWJBc3NlbWJseSB0aHJlYWRzIHN1cHBvcnQgLSB5b3UgbWF5IG5lZWQgdG8gc2V0IGEgZmxhZ1wiKSwgQiAmJiBKKFwiKG9uIG5vZGUgeW91IG1heSBuZWVkOiAtLWV4cGVyaW1lbnRhbC13YXNtLXRocmVhZHMgLS1leHBlcmltZW50YWwtd2FzbS1idWxrLW1lbW9yeSBhbmQvb3IgcmVjZW50IHZlcnNpb24pXCIpLCBFcnJvcihcImJhZCBtZW1vcnlcIik7XG4gICAgICAgICAgbSgpO1xuICAgICAgICAgIHRhID0gZS5idWZmZXIuYnl0ZUxlbmd0aDtcbiAgICAgICAgICB2YXIgdWEgPSBbXSwgdmEgPSBbXSwgd2EgPSBbXSwgTSA9IDAsIHhhID0gbnVsbCwgTiA9IG51bGw7XG4gICAgICAgICAgZnVuY3Rpb24geWEoKSB7XG4gICAgICAgICAgICBNLS07XG4gICAgICAgICAgICBpZiAoMCA9PSBNICYmIChudWxsICE9PSB4YSAmJiAoY2xlYXJJbnRlcnZhbCh4YSksIHhhID0gbnVsbCksIE4pKSB7XG4gICAgICAgICAgICAgIHZhciBhID0gTjtcbiAgICAgICAgICAgICAgTiA9IG51bGw7XG4gICAgICAgICAgICAgIGEoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24gcmEoYSkge1xuICAgICAgICAgICAgYSA9IFwiQWJvcnRlZChcIiArIGEgKyBcIilcIjtcbiAgICAgICAgICAgIEooYSk7XG4gICAgICAgICAgICBLID0gdHJ1ZTtcbiAgICAgICAgICAgIEwgPSAxO1xuICAgICAgICAgICAgYSA9IG5ldyBXZWJBc3NlbWJseS5SdW50aW1lRXJyb3IoYSArIFwiLiBCdWlsZCB3aXRoIC1zQVNTRVJUSU9OUyBmb3IgbW9yZSBpbmZvLlwiKTtcbiAgICAgICAgICAgIHgoYSk7XG4gICAgICAgICAgICB0aHJvdyBhO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgemEgPSAoYSkgPT4gYS5zdGFydHNXaXRoKFwiZGF0YTphcHBsaWNhdGlvbi9vY3RldC1zdHJlYW07YmFzZTY0LFwiKSwgSSA9IChhKSA9PiBhLnN0YXJ0c1dpdGgoXCJmaWxlOi8vXCIpLCBPO1xuICAgICAgICAgIE8gPSBcIm9ydC13YXNtLXRocmVhZGVkLndhc21cIjtcbiAgICAgICAgICB6YShPKSB8fCAoTyA9IGxhKE8pKTtcbiAgICAgICAgICBmdW5jdGlvbiBBYShhKSB7XG4gICAgICAgICAgICBpZiAoSClcbiAgICAgICAgICAgICAgcmV0dXJuIEgoYSk7XG4gICAgICAgICAgICB0aHJvdyBcImJvdGggYXN5bmMgYW5kIHN5bmMgZmV0Y2hpbmcgb2YgdGhlIHdhc20gZmFpbGVkXCI7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIEJhKGEpIHtcbiAgICAgICAgICAgIGlmIChrYSB8fCBBKSB7XG4gICAgICAgICAgICAgIGlmIChcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGZldGNoICYmICFJKGEpKVxuICAgICAgICAgICAgICAgIHJldHVybiBmZXRjaChhLCB7IGNyZWRlbnRpYWxzOiBcInNhbWUtb3JpZ2luXCIgfSkudGhlbigoYikgPT4ge1xuICAgICAgICAgICAgICAgICAgaWYgKCFiLm9rKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBcImZhaWxlZCB0byBsb2FkIHdhc20gYmluYXJ5IGZpbGUgYXQgJ1wiICsgYSArIFwiJ1wiO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGIuYXJyYXlCdWZmZXIoKTtcbiAgICAgICAgICAgICAgICB9KS5jYXRjaCgoKSA9PiBBYShhKSk7XG4gICAgICAgICAgICAgIGlmIChHKVxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgoYiwgYykgPT4ge1xuICAgICAgICAgICAgICAgICAgRyhhLCAoZCkgPT4gYihuZXcgVWludDhBcnJheShkKSksIGMpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4gQWEoYSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmdW5jdGlvbiBDYShhLCBiLCBjKSB7XG4gICAgICAgICAgICByZXR1cm4gQmEoYSkudGhlbigoZCkgPT4gV2ViQXNzZW1ibHkuaW5zdGFudGlhdGUoZCwgYikpLnRoZW4oKGQpID0+IGQpLnRoZW4oYywgKGQpID0+IHtcbiAgICAgICAgICAgICAgSihgZmFpbGVkIHRvIGFzeW5jaHJvbm91c2x5IHByZXBhcmUgd2FzbTogJHtkfWApO1xuICAgICAgICAgICAgICByYShkKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmdW5jdGlvbiBEYShhLCBiKSB7XG4gICAgICAgICAgICB2YXIgYyA9IE87XG4gICAgICAgICAgICByZXR1cm4gXCJmdW5jdGlvblwiICE9IHR5cGVvZiBXZWJBc3NlbWJseS5pbnN0YW50aWF0ZVN0cmVhbWluZyB8fCB6YShjKSB8fCBJKGMpIHx8IEIgfHwgXCJmdW5jdGlvblwiICE9IHR5cGVvZiBmZXRjaCA/IENhKGMsIGEsIGIpIDogZmV0Y2goYywgeyBjcmVkZW50aWFsczogXCJzYW1lLW9yaWdpblwiIH0pLnRoZW4oKGQpID0+IFdlYkFzc2VtYmx5Lmluc3RhbnRpYXRlU3RyZWFtaW5nKGQsIGEpLnRoZW4oYiwgZnVuY3Rpb24oZykge1xuICAgICAgICAgICAgICBKKGB3YXNtIHN0cmVhbWluZyBjb21waWxlIGZhaWxlZDogJHtnfWApO1xuICAgICAgICAgICAgICBKKFwiZmFsbGluZyBiYWNrIHRvIEFycmF5QnVmZmVyIGluc3RhbnRpYXRpb25cIik7XG4gICAgICAgICAgICAgIHJldHVybiBDYShjLCBhLCBiKTtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIFAsIEVhID0geyA5MjIzODA6IChhLCBiLCBjLCBkKSA9PiB7XG4gICAgICAgICAgICBpZiAoXCJ1bmRlZmluZWRcIiA9PSB0eXBlb2YgdiB8fCAhdi5jYilcbiAgICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgICAgICBhID0gUShhID4+PiAwKTtcbiAgICAgICAgICAgIGEuc3RhcnRzV2l0aChcIi4vXCIpICYmIChhID0gYS5zdWJzdHJpbmcoMikpO1xuICAgICAgICAgICAgYSA9IHYuY2IuZ2V0KGEpO1xuICAgICAgICAgICAgaWYgKCFhKVxuICAgICAgICAgICAgICByZXR1cm4gMjtcbiAgICAgICAgICAgIGIgPj4+PSAwO1xuICAgICAgICAgICAgYyA+Pj49IDA7XG4gICAgICAgICAgICBkID4+Pj0gMDtcbiAgICAgICAgICAgIGlmIChiICsgYyA+IGEuYnl0ZUxlbmd0aClcbiAgICAgICAgICAgICAgcmV0dXJuIDM7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICByZXR1cm4gbigpLnNldChhLnN1YmFycmF5KGIsIGIgKyBjKSwgZCA+Pj4gMCksIDA7XG4gICAgICAgICAgICB9IGNhdGNoIHtcbiAgICAgICAgICAgICAgcmV0dXJuIDQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSB9O1xuICAgICAgICAgIGZ1bmN0aW9uIFIoYSkge1xuICAgICAgICAgICAgdGhpcy5uYW1lID0gXCJFeGl0U3RhdHVzXCI7XG4gICAgICAgICAgICB0aGlzLm1lc3NhZ2UgPSBgUHJvZ3JhbSB0ZXJtaW5hdGVkIHdpdGggZXhpdCgke2F9KWA7XG4gICAgICAgICAgICB0aGlzLnN0YXR1cyA9IGE7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBGYSA9IChhKSA9PiB7XG4gICAgICAgICAgICBhLnRlcm1pbmF0ZSgpO1xuICAgICAgICAgICAgYS5vbm1lc3NhZ2UgPSAoKSA9PiB7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH0sIEhhID0gKGEpID0+IHtcbiAgICAgICAgICAgIDAgPT0gUy5QYS5sZW5ndGggJiYgKEdhKCksIFMuWWEoUy5QYVswXSkpO1xuICAgICAgICAgICAgdmFyIGIgPSBTLlBhLnBvcCgpO1xuICAgICAgICAgICAgaWYgKCFiKVxuICAgICAgICAgICAgICByZXR1cm4gNjtcbiAgICAgICAgICAgIFMuUWEucHVzaChiKTtcbiAgICAgICAgICAgIFMuTWFbYS5PYV0gPSBiO1xuICAgICAgICAgICAgYi5PYSA9IGEuT2E7XG4gICAgICAgICAgICB2YXIgYyA9IHsgY21kOiBcInJ1blwiLCBzdGFydF9yb3V0aW5lOiBhLmtiLCBhcmc6IGEuaGIsIHB0aHJlYWRfcHRyOiBhLk9hIH07XG4gICAgICAgICAgICBCICYmIGIudW5yZWYoKTtcbiAgICAgICAgICAgIGIucG9zdE1lc3NhZ2UoYywgYS5xYik7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICB9LCBUID0gMCwgSWEgPSBcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBUZXh0RGVjb2RlciA/IG5ldyBUZXh0RGVjb2RlcihcInV0ZjhcIikgOiB2b2lkIDAsIEphID0gKGEsIGIsIGMpID0+IHtcbiAgICAgICAgICAgIGIgPj4+PSAwO1xuICAgICAgICAgICAgdmFyIGQgPSBiICsgYztcbiAgICAgICAgICAgIGZvciAoYyA9IGI7IGFbY10gJiYgIShjID49IGQpOyApXG4gICAgICAgICAgICAgICsrYztcbiAgICAgICAgICAgIGlmICgxNiA8IGMgLSBiICYmIGEuYnVmZmVyICYmIElhKVxuICAgICAgICAgICAgICByZXR1cm4gSWEuZGVjb2RlKGEuYnVmZmVyIGluc3RhbmNlb2YgU2hhcmVkQXJyYXlCdWZmZXIgPyBhLnNsaWNlKGIsIGMpIDogYS5zdWJhcnJheShiLCBjKSk7XG4gICAgICAgICAgICBmb3IgKGQgPSBcIlwiOyBiIDwgYzsgKSB7XG4gICAgICAgICAgICAgIHZhciBnID0gYVtiKytdO1xuICAgICAgICAgICAgICBpZiAoZyAmIDEyOCkge1xuICAgICAgICAgICAgICAgIHZhciBoID0gYVtiKytdICYgNjM7XG4gICAgICAgICAgICAgICAgaWYgKDE5MiA9PSAoZyAmIDIyNCkpXG4gICAgICAgICAgICAgICAgICBkICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoKGcgJiAzMSkgPDwgNiB8IGgpO1xuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgdmFyIGsgPSBhW2IrK10gJiA2MztcbiAgICAgICAgICAgICAgICAgIGcgPSAyMjQgPT0gKGcgJiAyNDApID8gKGcgJiAxNSkgPDwgMTIgfCBoIDw8IDYgfCBrIDogKGcgJiA3KSA8PCAxOCB8IGggPDwgMTIgfCBrIDw8IDYgfCBhW2IrK10gJiA2MztcbiAgICAgICAgICAgICAgICAgIDY1NTM2ID4gZyA/IGQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShnKSA6IChnIC09IDY1NTM2LCBkICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoNTUyOTYgfCBnID4+IDEwLCA1NjMyMCB8IGcgJiAxMDIzKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgICAgICBkICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZDtcbiAgICAgICAgICB9LCBRID0gKGEsIGIpID0+IChhID4+Pj0gMCkgPyBKYShuKCksIGEsIGIpIDogXCJcIiwgTGEgPSAoYSkgPT4ge1xuICAgICAgICAgICAgdmFyIGIgPSBLYSgpO1xuICAgICAgICAgICAgYSA9IGEoKTtcbiAgICAgICAgICAgIFUoYik7XG4gICAgICAgICAgICByZXR1cm4gYTtcbiAgICAgICAgICB9O1xuICAgICAgICAgIGZ1bmN0aW9uIFYoYSwgYikge1xuICAgICAgICAgICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoIC0gMiwgZCA9IGFyZ3VtZW50cztcbiAgICAgICAgICAgIHJldHVybiBMYSgoKSA9PiB7XG4gICAgICAgICAgICAgIGZvciAodmFyIGcgPSBNYSg4ICogYyksIGggPSBnID4+PiAzLCBrID0gMDsgayA8IGM7IGsrKykge1xuICAgICAgICAgICAgICAgIHZhciB0ID0gZFsyICsga107XG4gICAgICAgICAgICAgICAgZWEoKVtoICsgayA+Pj4gMF0gPSB0O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiBOYShhLCBjLCBnLCBiKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmdW5jdGlvbiBPYShhKSB7XG4gICAgICAgICAgICBpZiAoRClcbiAgICAgICAgICAgICAgcmV0dXJuIFYoMCwgMSwgYSk7XG4gICAgICAgICAgICBMID0gYTtcbiAgICAgICAgICAgIDAgPCBUIHx8IChTLmxiKCksIHYub25FeGl0Py4oYSksIEsgPSB0cnVlKTtcbiAgICAgICAgICAgIHooYSwgbmV3IFIoYSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgUWEgPSAoYSkgPT4ge1xuICAgICAgICAgICAgTCA9IGE7XG4gICAgICAgICAgICBpZiAoRClcbiAgICAgICAgICAgICAgdGhyb3cgUGEoYSksIFwidW53aW5kXCI7XG4gICAgICAgICAgICBPYShhKTtcbiAgICAgICAgICB9O1xuICAgICAgICAgIGZ1bmN0aW9uIFJhKCkge1xuICAgICAgICAgICAgZm9yICh2YXIgYSA9IHYubnVtVGhyZWFkczsgYS0tOyApXG4gICAgICAgICAgICAgIEdhKCk7XG4gICAgICAgICAgICB1YS51bnNoaWZ0KCgpID0+IHtcbiAgICAgICAgICAgICAgTSsrO1xuICAgICAgICAgICAgICBTYSgoKSA9PiB5YSgpKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmdW5jdGlvbiBHYSgpIHtcbiAgICAgICAgICAgIHZhciBhID0gbGEoXCJvcnQtd2FzbS10aHJlYWRlZC53b3JrZXIuanNcIik7XG4gICAgICAgICAgICBhID0gbmV3IFdvcmtlcihhKTtcbiAgICAgICAgICAgIFMuUGEucHVzaChhKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24gU2EoYSkge1xuICAgICAgICAgICAgRCA/IGEoKSA6IFByb21pc2UuYWxsKFMuUGEubWFwKFMuWWEpKS50aGVuKGEpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgUyA9IHsgUGE6IFtdLCBRYTogW10sIGJiOiBbXSwgTWE6IHt9LCBXYSgpIHtcbiAgICAgICAgICAgIEQgPyAoUy5yZWNlaXZlT2JqZWN0VHJhbnNmZXIgPSBTLmpiLCBTLnRocmVhZEluaXRUTFMgPSBTLmFiLCBTLnNldEV4aXRTdGF0dXMgPSBTLiRhKSA6IFJhKCk7XG4gICAgICAgICAgfSwgJGE6IChhKSA9PiBMID0gYSwgdGI6IFtcIiR0ZXJtaW5hdGVXb3JrZXJcIl0sIGxiOiAoKSA9PiB7XG4gICAgICAgICAgICBmb3IgKHZhciBhIG9mIFMuUWEpXG4gICAgICAgICAgICAgIEZhKGEpO1xuICAgICAgICAgICAgZm9yIChhIG9mIFMuUGEpXG4gICAgICAgICAgICAgIEZhKGEpO1xuICAgICAgICAgICAgUy5QYSA9IFtdO1xuICAgICAgICAgICAgUy5RYSA9IFtdO1xuICAgICAgICAgICAgUy5NYSA9IFtdO1xuICAgICAgICAgIH0sIFphOiAoYSkgPT4ge1xuICAgICAgICAgICAgdmFyIGIgPSBhLk9hO1xuICAgICAgICAgICAgZGVsZXRlIFMuTWFbYl07XG4gICAgICAgICAgICBTLlBhLnB1c2goYSk7XG4gICAgICAgICAgICBTLlFhLnNwbGljZShTLlFhLmluZGV4T2YoYSksIDEpO1xuICAgICAgICAgICAgYS5PYSA9IDA7XG4gICAgICAgICAgICBUYShiKTtcbiAgICAgICAgICB9LCBqYigpIHtcbiAgICAgICAgICB9LCBhYigpIHtcbiAgICAgICAgICAgIFMuYmIuZm9yRWFjaCgoYSkgPT4gYSgpKTtcbiAgICAgICAgICB9LCBZYTogKGEpID0+IG5ldyBQcm9taXNlKChiKSA9PiB7XG4gICAgICAgICAgICBhLm9ubWVzc2FnZSA9IChoKSA9PiB7XG4gICAgICAgICAgICAgIGggPSBoLmRhdGE7XG4gICAgICAgICAgICAgIHZhciBrID0gaC5jbWQ7XG4gICAgICAgICAgICAgIGlmIChoLnRhcmdldFRocmVhZCAmJiBoLnRhcmdldFRocmVhZCAhPSBXKCkpIHtcbiAgICAgICAgICAgICAgICB2YXIgdCA9IFMuTWFbaC50YXJnZXRUaHJlYWRdO1xuICAgICAgICAgICAgICAgIHQgPyB0LnBvc3RNZXNzYWdlKGgsIGgudHJhbnNmZXJMaXN0KSA6IEooYEludGVybmFsIGVycm9yISBXb3JrZXIgc2VudCBhIG1lc3NhZ2UgXCIke2t9XCIgdG8gdGFyZ2V0IHB0aHJlYWQgJHtoLnRhcmdldFRocmVhZH0sIGJ1dCB0aGF0IHRocmVhZCBubyBsb25nZXIgZXhpc3RzIWApO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKFwiY2hlY2tNYWlsYm94XCIgPT09IGspXG4gICAgICAgICAgICAgICAgWCgpO1xuICAgICAgICAgICAgICBlbHNlIGlmIChcInNwYXduVGhyZWFkXCIgPT09IGspXG4gICAgICAgICAgICAgICAgSGEoaCk7XG4gICAgICAgICAgICAgIGVsc2UgaWYgKFwiY2xlYW51cFRocmVhZFwiID09PSBrKVxuICAgICAgICAgICAgICAgIFMuWmEoUy5NYVtoLnRocmVhZF0pO1xuICAgICAgICAgICAgICBlbHNlIGlmIChcImtpbGxUaHJlYWRcIiA9PT0gaylcbiAgICAgICAgICAgICAgICBoID0gaC50aHJlYWQsIGsgPSBTLk1hW2hdLCBkZWxldGUgUy5NYVtoXSwgRmEoayksIFRhKGgpLCBTLlFhLnNwbGljZShTLlFhLmluZGV4T2YoayksIDEpLCBrLk9hID0gMDtcbiAgICAgICAgICAgICAgZWxzZSBpZiAoXCJjYW5jZWxUaHJlYWRcIiA9PT0gaylcbiAgICAgICAgICAgICAgICBTLk1hW2gudGhyZWFkXS5wb3N0TWVzc2FnZSh7IGNtZDogXCJjYW5jZWxcIiB9KTtcbiAgICAgICAgICAgICAgZWxzZSBpZiAoXCJsb2FkZWRcIiA9PT0gaylcbiAgICAgICAgICAgICAgICBhLmxvYWRlZCA9IHRydWUsIEIgJiYgIWEuT2EgJiYgYS51bnJlZigpLCBiKGEpO1xuICAgICAgICAgICAgICBlbHNlIGlmIChcImFsZXJ0XCIgPT09IGspXG4gICAgICAgICAgICAgICAgYWxlcnQoYFRocmVhZCAke2gudGhyZWFkSWR9OiAke2gudGV4dH1gKTtcbiAgICAgICAgICAgICAgZWxzZSBpZiAoXCJzZXRpbW1lZGlhdGVcIiA9PT0gaC50YXJnZXQpXG4gICAgICAgICAgICAgICAgYS5wb3N0TWVzc2FnZShoKTtcbiAgICAgICAgICAgICAgZWxzZSBpZiAoXCJjYWxsSGFuZGxlclwiID09PSBrKVxuICAgICAgICAgICAgICAgIHZbaC5oYW5kbGVyXSguLi5oLmFyZ3MpO1xuICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgayAmJiBKKGB3b3JrZXIgc2VudCBhbiB1bmtub3duIGNvbW1hbmQgJHtrfWApO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGEub25lcnJvciA9IChoKSA9PiB7XG4gICAgICAgICAgICAgIEooYCR7XCJ3b3JrZXIgc2VudCBhbiBlcnJvciFcIn0gJHtoLmZpbGVuYW1lfToke2gubGluZW5vfTogJHtoLm1lc3NhZ2V9YCk7XG4gICAgICAgICAgICAgIHRocm93IGg7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgQiAmJiAoYS5vbihcIm1lc3NhZ2VcIiwgKGgpID0+IGEub25tZXNzYWdlKHsgZGF0YTogaCB9KSksIGEub24oXCJlcnJvclwiLCAoaCkgPT4gYS5vbmVycm9yKGgpKSk7XG4gICAgICAgICAgICB2YXIgYyA9IFtdLCBkID0gW1wib25FeGl0XCJdLCBnO1xuICAgICAgICAgICAgZm9yIChnIG9mIGQpXG4gICAgICAgICAgICAgIHYuaGFzT3duUHJvcGVydHkoZykgJiYgYy5wdXNoKGcpO1xuICAgICAgICAgICAgYS5wb3N0TWVzc2FnZSh7IGNtZDogXCJsb2FkXCIsIGhhbmRsZXJzOiBjLCB1cmxPckJsb2I6IHYubWFpblNjcmlwdFVybE9yQmxvYiB8fCBfc2NyaXB0RGlyLCB3YXNtTWVtb3J5OiBlLCB3YXNtTW9kdWxlOiBzYSB9KTtcbiAgICAgICAgICB9KSB9O1xuICAgICAgICAgIHYuUFRocmVhZCA9IFM7XG4gICAgICAgICAgdmFyIFVhID0gKGEpID0+IHtcbiAgICAgICAgICAgIGZvciAoOyAwIDwgYS5sZW5ndGg7IClcbiAgICAgICAgICAgICAgYS5zaGlmdCgpKHYpO1xuICAgICAgICAgIH07XG4gICAgICAgICAgdi5lc3RhYmxpc2hTdGFja1NwYWNlID0gKCkgPT4ge1xuICAgICAgICAgICAgdmFyIGEgPSBXKCksIGIgPSByKClbYSArIDUyID4+PiAyID4+PiAwXTtcbiAgICAgICAgICAgIGEgPSByKClbYSArIDU2ID4+PiAyID4+PiAwXTtcbiAgICAgICAgICAgIFZhKGIsIGIgLSBhKTtcbiAgICAgICAgICAgIFUoYik7XG4gICAgICAgICAgfTtcbiAgICAgICAgICBmdW5jdGlvbiBQYShhKSB7XG4gICAgICAgICAgICBpZiAoRClcbiAgICAgICAgICAgICAgcmV0dXJuIFYoMSwgMCwgYSk7XG4gICAgICAgICAgICBRYShhKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIFdhID0gW10sIFhhO1xuICAgICAgICAgIHYuaW52b2tlRW50cnlQb2ludCA9IChhLCBiKSA9PiB7XG4gICAgICAgICAgICB2YXIgYyA9IFdhW2FdO1xuICAgICAgICAgICAgYyB8fCAoYSA+PSBXYS5sZW5ndGggJiYgKFdhLmxlbmd0aCA9IGEgKyAxKSwgV2FbYV0gPSBjID0gWGEuZ2V0KGEpKTtcbiAgICAgICAgICAgIGEgPSBjKGIpO1xuICAgICAgICAgICAgMCA8IFQgPyBTLiRhKGEpIDogWWEoYSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgICBmdW5jdGlvbiBaYShhKSB7XG4gICAgICAgICAgICB0aGlzLlZhID0gYSAtIDI0O1xuICAgICAgICAgICAgdGhpcy5nYiA9IGZ1bmN0aW9uKGIpIHtcbiAgICAgICAgICAgICAgcigpW3RoaXMuVmEgKyA0ID4+PiAyID4+PiAwXSA9IGI7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy5mYiA9IGZ1bmN0aW9uKGIpIHtcbiAgICAgICAgICAgICAgcigpW3RoaXMuVmEgKyA4ID4+PiAyID4+PiAwXSA9IGI7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy5XYSA9IGZ1bmN0aW9uKGIsIGMpIHtcbiAgICAgICAgICAgICAgdGhpcy5lYigpO1xuICAgICAgICAgICAgICB0aGlzLmdiKGIpO1xuICAgICAgICAgICAgICB0aGlzLmZiKGMpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMuZWIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgcigpW3RoaXMuVmEgKyAxNiA+Pj4gMiA+Pj4gMF0gPSAwO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyICRhID0gMCwgYWIgPSAwO1xuICAgICAgICAgIGZ1bmN0aW9uIGJiKGEsIGIsIGMsIGQpIHtcbiAgICAgICAgICAgIHJldHVybiBEID8gVigyLCAxLCBhLCBiLCBjLCBkKSA6IGNiKGEsIGIsIGMsIGQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmdW5jdGlvbiBjYihhLCBiLCBjLCBkKSB7XG4gICAgICAgICAgICBhID4+Pj0gMDtcbiAgICAgICAgICAgIGIgPj4+PSAwO1xuICAgICAgICAgICAgYyA+Pj49IDA7XG4gICAgICAgICAgICBkID4+Pj0gMDtcbiAgICAgICAgICAgIGlmIChcInVuZGVmaW5lZFwiID09IHR5cGVvZiBTaGFyZWRBcnJheUJ1ZmZlcilcbiAgICAgICAgICAgICAgcmV0dXJuIEooXCJDdXJyZW50IGVudmlyb25tZW50IGRvZXMgbm90IHN1cHBvcnQgU2hhcmVkQXJyYXlCdWZmZXIsIHB0aHJlYWRzIGFyZSBub3QgYXZhaWxhYmxlIVwiKSwgNjtcbiAgICAgICAgICAgIHZhciBnID0gW107XG4gICAgICAgICAgICBpZiAoRCAmJiAwID09PSBnLmxlbmd0aClcbiAgICAgICAgICAgICAgcmV0dXJuIGJiKGEsIGIsIGMsIGQpO1xuICAgICAgICAgICAgYSA9IHsga2I6IGMsIE9hOiBhLCBoYjogZCwgcWI6IGcgfTtcbiAgICAgICAgICAgIHJldHVybiBEID8gKGEuc2IgPSBcInNwYXduVGhyZWFkXCIsIHBvc3RNZXNzYWdlKGEsIGcpLCAwKSA6IEhhKGEpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmdW5jdGlvbiBkYihhLCBiLCBjKSB7XG4gICAgICAgICAgICByZXR1cm4gRCA/IFYoMywgMSwgYSwgYiwgYykgOiAwO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmdW5jdGlvbiBlYihhLCBiKSB7XG4gICAgICAgICAgICBpZiAoRClcbiAgICAgICAgICAgICAgcmV0dXJuIFYoNCwgMSwgYSwgYik7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBmYiA9IChhKSA9PiB7XG4gICAgICAgICAgICBmb3IgKHZhciBiID0gMCwgYyA9IDA7IGMgPCBhLmxlbmd0aDsgKytjKSB7XG4gICAgICAgICAgICAgIHZhciBkID0gYS5jaGFyQ29kZUF0KGMpO1xuICAgICAgICAgICAgICAxMjcgPj0gZCA/IGIrKyA6IDIwNDcgPj0gZCA/IGIgKz0gMiA6IDU1Mjk2IDw9IGQgJiYgNTczNDMgPj0gZCA/IChiICs9IDQsICsrYykgOiBiICs9IDM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYjtcbiAgICAgICAgICB9LCBnYiA9IChhLCBiLCBjLCBkKSA9PiB7XG4gICAgICAgICAgICBjID4+Pj0gMDtcbiAgICAgICAgICAgIGlmICghKDAgPCBkKSlcbiAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICB2YXIgZyA9IGM7XG4gICAgICAgICAgICBkID0gYyArIGQgLSAxO1xuICAgICAgICAgICAgZm9yICh2YXIgaCA9IDA7IGggPCBhLmxlbmd0aDsgKytoKSB7XG4gICAgICAgICAgICAgIHZhciBrID0gYS5jaGFyQ29kZUF0KGgpO1xuICAgICAgICAgICAgICBpZiAoNTUyOTYgPD0gayAmJiA1NzM0MyA+PSBrKSB7XG4gICAgICAgICAgICAgICAgdmFyIHQgPSBhLmNoYXJDb2RlQXQoKytoKTtcbiAgICAgICAgICAgICAgICBrID0gNjU1MzYgKyAoKGsgJiAxMDIzKSA8PCAxMCkgfCB0ICYgMTAyMztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAoMTI3ID49IGspIHtcbiAgICAgICAgICAgICAgICBpZiAoYyA+PSBkKVxuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgYltjKysgPj4+IDBdID0gaztcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoMjA0NyA+PSBrKSB7XG4gICAgICAgICAgICAgICAgICBpZiAoYyArIDEgPj0gZClcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICBiW2MrKyA+Pj4gMF0gPSAxOTIgfCBrID4+IDY7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIGlmICg2NTUzNSA+PSBrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjICsgMiA+PSBkKVxuICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBiW2MrKyA+Pj4gMF0gPSAyMjQgfCBrID4+IDEyO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGMgKyAzID49IGQpXG4gICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGJbYysrID4+PiAwXSA9IDI0MCB8IGsgPj4gMTg7XG4gICAgICAgICAgICAgICAgICAgIGJbYysrID4+PiAwXSA9IDEyOCB8IGsgPj4gMTIgJiA2MztcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGJbYysrID4+PiAwXSA9IDEyOCB8IGsgPj4gNiAmIDYzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBiW2MrKyA+Pj4gMF0gPSAxMjggfCBrICYgNjM7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJbYyA+Pj4gMF0gPSAwO1xuICAgICAgICAgICAgcmV0dXJuIGMgLSBnO1xuICAgICAgICAgIH0sIGhiID0gKGEsIGIsIGMpID0+IGdiKGEsIG4oKSwgYiwgYyk7XG4gICAgICAgICAgZnVuY3Rpb24gaWIoYSwgYikge1xuICAgICAgICAgICAgaWYgKEQpXG4gICAgICAgICAgICAgIHJldHVybiBWKDUsIDEsIGEsIGIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmdW5jdGlvbiBqYihhLCBiLCBjKSB7XG4gICAgICAgICAgICBpZiAoRClcbiAgICAgICAgICAgICAgcmV0dXJuIFYoNiwgMSwgYSwgYiwgYyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIGtiKGEsIGIsIGMpIHtcbiAgICAgICAgICAgIHJldHVybiBEID8gVig3LCAxLCBhLCBiLCBjKSA6IDA7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIGxiKGEsIGIpIHtcbiAgICAgICAgICAgIGlmIChEKVxuICAgICAgICAgICAgICByZXR1cm4gVig4LCAxLCBhLCBiKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24gbWIoYSwgYiwgYykge1xuICAgICAgICAgICAgaWYgKEQpXG4gICAgICAgICAgICAgIHJldHVybiBWKDksIDEsIGEsIGIsIGMpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmdW5jdGlvbiBuYihhLCBiLCBjLCBkKSB7XG4gICAgICAgICAgICBpZiAoRClcbiAgICAgICAgICAgICAgcmV0dXJuIFYoMTAsIDEsIGEsIGIsIGMsIGQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmdW5jdGlvbiBvYihhLCBiLCBjLCBkKSB7XG4gICAgICAgICAgICBpZiAoRClcbiAgICAgICAgICAgICAgcmV0dXJuIFYoMTEsIDEsIGEsIGIsIGMsIGQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmdW5jdGlvbiBwYihhLCBiLCBjLCBkKSB7XG4gICAgICAgICAgICBpZiAoRClcbiAgICAgICAgICAgICAgcmV0dXJuIFYoMTIsIDEsIGEsIGIsIGMsIGQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmdW5jdGlvbiBxYihhKSB7XG4gICAgICAgICAgICBpZiAoRClcbiAgICAgICAgICAgICAgcmV0dXJuIFYoMTMsIDEsIGEpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmdW5jdGlvbiByYihhLCBiKSB7XG4gICAgICAgICAgICBpZiAoRClcbiAgICAgICAgICAgICAgcmV0dXJuIFYoMTQsIDEsIGEsIGIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmdW5jdGlvbiBzYihhLCBiLCBjKSB7XG4gICAgICAgICAgICBpZiAoRClcbiAgICAgICAgICAgICAgcmV0dXJuIFYoMTUsIDEsIGEsIGIsIGMpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmdW5jdGlvbiB0YihhKSB7XG4gICAgICAgICAgICBhID4+Pj0gMDtcbiAgICAgICAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIEF0b21pY3MucmIgJiYgKEF0b21pY3MucmIocCgpLCBhID4+PiAyLCBhKS52YWx1ZS50aGVuKFgpLCBhICs9IDEyOCwgQXRvbWljcy5zdG9yZShwKCksIGEgPj4+IDIsIDEpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdi5fX2Vtc2NyaXB0ZW5fdGhyZWFkX21haWxib3hfYXdhaXQgPSB0YjtcbiAgICAgICAgICB2YXIgWCA9ICgpID0+IHtcbiAgICAgICAgICAgIHZhciBhID0gVygpO1xuICAgICAgICAgICAgaWYgKGEgJiYgKHRiKGEpLCBhID0gdWIsICFLKSlcbiAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpZiAoYSgpLCAhKDAgPCBUKSlcbiAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIEQgPyBZYShMKSA6IFFhKEwpO1xuICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoYikge1xuICAgICAgICAgICAgICAgICAgICBiIGluc3RhbmNlb2YgUiB8fCBcInVud2luZFwiID09IGIgfHwgeigxLCBiKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBjYXRjaCAoYikge1xuICAgICAgICAgICAgICAgIGIgaW5zdGFuY2VvZiBSIHx8IFwidW53aW5kXCIgPT0gYiB8fCB6KDEsIGIpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgfTtcbiAgICAgICAgICB2LmNoZWNrTWFpbGJveCA9IFg7XG4gICAgICAgICAgdmFyIHZiID0gW10sIFkgPSAoYSkgPT4gMCA9PT0gYSAlIDQgJiYgKDAgIT09IGEgJSAxMDAgfHwgMCA9PT0gYSAlIDQwMCksIHdiID0gWzAsIDMxLCA2MCwgOTEsIDEyMSwgMTUyLCAxODIsIDIxMywgMjQ0LCAyNzQsIDMwNSwgMzM1XSwgeGIgPSBbMCwgMzEsIDU5LCA5MCwgMTIwLCAxNTEsIDE4MSwgMjEyLCAyNDMsIDI3MywgMzA0LCAzMzRdO1xuICAgICAgICAgIGZ1bmN0aW9uIHliKGEsIGIsIGMsIGQsIGcsIGgsIGssIHQpIHtcbiAgICAgICAgICAgIHJldHVybiBEID8gVigxNiwgMSwgYSwgYiwgYywgZCwgZywgaCwgaywgdCkgOiAtNTI7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIHpiKGEsIGIsIGMsIGQsIGcsIGgsIGspIHtcbiAgICAgICAgICAgIGlmIChEKVxuICAgICAgICAgICAgICByZXR1cm4gVigxNywgMSwgYSwgYiwgYywgZCwgZywgaCwgayk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBCYiA9IChhKSA9PiB7XG4gICAgICAgICAgICB2YXIgYiA9IGZiKGEpICsgMSwgYyA9IEFiKGIpO1xuICAgICAgICAgICAgYyAmJiBoYihhLCBjLCBiKTtcbiAgICAgICAgICAgIHJldHVybiBjO1xuICAgICAgICAgIH0sIENiID0gW10sIERiID0ge30sIEZiID0gKCkgPT4ge1xuICAgICAgICAgICAgaWYgKCFFYikge1xuICAgICAgICAgICAgICB2YXIgYSA9IHsgVVNFUjogXCJ3ZWJfdXNlclwiLCBMT0dOQU1FOiBcIndlYl91c2VyXCIsIFBBVEg6IFwiL1wiLCBQV0Q6IFwiL1wiLCBIT01FOiBcIi9ob21lL3dlYl91c2VyXCIsIExBTkc6IChcIm9iamVjdFwiID09IHR5cGVvZiBuYXZpZ2F0b3IgJiYgbmF2aWdhdG9yLmxhbmd1YWdlcyAmJiBuYXZpZ2F0b3IubGFuZ3VhZ2VzWzBdIHx8IFwiQ1wiKS5yZXBsYWNlKFwiLVwiLCBcIl9cIikgKyBcIi5VVEYtOFwiLCBfOiBqYSB8fCBcIi4vdGhpcy5wcm9ncmFtXCIgfSwgYjtcbiAgICAgICAgICAgICAgZm9yIChiIGluIERiKVxuICAgICAgICAgICAgICAgIHZvaWQgMCA9PT0gRGJbYl0gPyBkZWxldGUgYVtiXSA6IGFbYl0gPSBEYltiXTtcbiAgICAgICAgICAgICAgdmFyIGMgPSBbXTtcbiAgICAgICAgICAgICAgZm9yIChiIGluIGEpXG4gICAgICAgICAgICAgICAgYy5wdXNoKGAke2J9PSR7YVtiXX1gKTtcbiAgICAgICAgICAgICAgRWIgPSBjO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIEViO1xuICAgICAgICAgIH0sIEViO1xuICAgICAgICAgIGZ1bmN0aW9uIEdiKGEsIGIpIHtcbiAgICAgICAgICAgIGlmIChEKVxuICAgICAgICAgICAgICByZXR1cm4gVigxOCwgMSwgYSwgYik7XG4gICAgICAgICAgICBhID4+Pj0gMDtcbiAgICAgICAgICAgIGIgPj4+PSAwO1xuICAgICAgICAgICAgdmFyIGMgPSAwO1xuICAgICAgICAgICAgRmIoKS5mb3JFYWNoKChkLCBnKSA9PiB7XG4gICAgICAgICAgICAgIHZhciBoID0gYiArIGM7XG4gICAgICAgICAgICAgIGcgPSByKClbYSArIDQgKiBnID4+PiAyID4+PiAwXSA9IGg7XG4gICAgICAgICAgICAgIGZvciAoaCA9IDA7IGggPCBkLmxlbmd0aDsgKytoKVxuICAgICAgICAgICAgICAgIGFhKClbZysrID4+PiAwID4+PiAwXSA9IGQuY2hhckNvZGVBdChoKTtcbiAgICAgICAgICAgICAgYWEoKVtnID4+PiAwID4+PiAwXSA9IDA7XG4gICAgICAgICAgICAgIGMgKz0gZC5sZW5ndGggKyAxO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24gS2IoYSwgYikge1xuICAgICAgICAgICAgaWYgKEQpXG4gICAgICAgICAgICAgIHJldHVybiBWKDE5LCAxLCBhLCBiKTtcbiAgICAgICAgICAgIGEgPj4+PSAwO1xuICAgICAgICAgICAgYiA+Pj49IDA7XG4gICAgICAgICAgICB2YXIgYyA9IEZiKCk7XG4gICAgICAgICAgICByKClbYSA+Pj4gMiA+Pj4gMF0gPSBjLmxlbmd0aDtcbiAgICAgICAgICAgIHZhciBkID0gMDtcbiAgICAgICAgICAgIGMuZm9yRWFjaCgoZykgPT4gZCArPSBnLmxlbmd0aCArIDEpO1xuICAgICAgICAgICAgcigpW2IgPj4+IDIgPj4+IDBdID0gZDtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmdW5jdGlvbiBMYihhKSB7XG4gICAgICAgICAgICByZXR1cm4gRCA/IFYoMjAsIDEsIGEpIDogNTI7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIE1iKGEsIGIsIGMsIGQpIHtcbiAgICAgICAgICAgIHJldHVybiBEID8gVigyMSwgMSwgYSwgYiwgYywgZCkgOiA1MjtcbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24gTmIoYSwgYiwgYywgZCwgZykge1xuICAgICAgICAgICAgcmV0dXJuIEQgPyBWKDIyLCAxLCBhLCBiLCBjLCBkLCBnKSA6IDcwO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgT2IgPSBbbnVsbCwgW10sIFtdXTtcbiAgICAgICAgICBmdW5jdGlvbiBQYihhLCBiLCBjLCBkKSB7XG4gICAgICAgICAgICBpZiAoRClcbiAgICAgICAgICAgICAgcmV0dXJuIFYoMjMsIDEsIGEsIGIsIGMsIGQpO1xuICAgICAgICAgICAgYiA+Pj49IDA7XG4gICAgICAgICAgICBjID4+Pj0gMDtcbiAgICAgICAgICAgIGQgPj4+PSAwO1xuICAgICAgICAgICAgZm9yICh2YXIgZyA9IDAsIGggPSAwOyBoIDwgYzsgaCsrKSB7XG4gICAgICAgICAgICAgIHZhciBrID0gcigpW2IgPj4+IDIgPj4+IDBdLCB0ID0gcigpW2IgKyA0ID4+PiAyID4+PiAwXTtcbiAgICAgICAgICAgICAgYiArPSA4O1xuICAgICAgICAgICAgICBmb3IgKHZhciBDID0gMDsgQyA8IHQ7IEMrKykge1xuICAgICAgICAgICAgICAgIHZhciB3ID0gbigpW2sgKyBDID4+PiAwXSwgeSA9IE9iW2FdO1xuICAgICAgICAgICAgICAgIDAgPT09IHcgfHwgMTAgPT09IHcgPyAoKDEgPT09IGEgPyBxYSA6IEopKEphKHksIDApKSwgeS5sZW5ndGggPSAwKSA6IHkucHVzaCh3KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBnICs9IHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByKClbZCA+Pj4gMiA+Pj4gMF0gPSBnO1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBRYiA9IFszMSwgMjksIDMxLCAzMCwgMzEsIDMwLCAzMSwgMzEsIDMwLCAzMSwgMzAsIDMxXSwgUmIgPSBbMzEsIDI4LCAzMSwgMzAsIDMxLCAzMCwgMzEsIDMxLCAzMCwgMzEsIDMwLCAzMV07XG4gICAgICAgICAgZnVuY3Rpb24gU2IoYSkge1xuICAgICAgICAgICAgdmFyIGIgPSBBcnJheShmYihhKSArIDEpO1xuICAgICAgICAgICAgZ2IoYSwgYiwgMCwgYi5sZW5ndGgpO1xuICAgICAgICAgICAgcmV0dXJuIGI7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBUYiA9IChhLCBiKSA9PiB7XG4gICAgICAgICAgICBhYSgpLnNldChhLCBiID4+PiAwKTtcbiAgICAgICAgICB9O1xuICAgICAgICAgIGZ1bmN0aW9uIFViKGEsIGIsIGMsIGQpIHtcbiAgICAgICAgICAgIGZ1bmN0aW9uIGcoZiwgcSwgdSkge1xuICAgICAgICAgICAgICBmb3IgKGYgPSBcIm51bWJlclwiID09IHR5cGVvZiBmID8gZi50b1N0cmluZygpIDogZiB8fCBcIlwiOyBmLmxlbmd0aCA8IHE7IClcbiAgICAgICAgICAgICAgICBmID0gdVswXSArIGY7XG4gICAgICAgICAgICAgIHJldHVybiBmO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gaChmLCBxKSB7XG4gICAgICAgICAgICAgIHJldHVybiBnKGYsIHEsIFwiMFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGsoZiwgcSkge1xuICAgICAgICAgICAgICBmdW5jdGlvbiB1KEhiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDAgPiBIYiA/IC0xIDogMCA8IEhiID8gMSA6IDA7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgdmFyIEY7XG4gICAgICAgICAgICAgIDAgPT09IChGID0gdShmLmdldEZ1bGxZZWFyKCkgLSBxLmdldEZ1bGxZZWFyKCkpKSAmJiAwID09PSAoRiA9IHUoZi5nZXRNb250aCgpIC0gcS5nZXRNb250aCgpKSkgJiYgKEYgPSB1KGYuZ2V0RGF0ZSgpIC0gcS5nZXREYXRlKCkpKTtcbiAgICAgICAgICAgICAgcmV0dXJuIEY7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiB0KGYpIHtcbiAgICAgICAgICAgICAgc3dpdGNoIChmLmdldERheSgpKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKGYuZ2V0RnVsbFllYXIoKSAtIDEsIDExLCAyOSk7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgcmV0dXJuIGY7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKGYuZ2V0RnVsbFllYXIoKSwgMCwgMyk7XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKFxuICAgICAgICAgICAgICAgICAgICBmLmdldEZ1bGxZZWFyKCksXG4gICAgICAgICAgICAgICAgICAgIDAsXG4gICAgICAgICAgICAgICAgICAgIDJcbiAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKGYuZ2V0RnVsbFllYXIoKSwgMCwgMSk7XG4gICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKGYuZ2V0RnVsbFllYXIoKSAtIDEsIDExLCAzMSk7XG4gICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKGYuZ2V0RnVsbFllYXIoKSAtIDEsIDExLCAzMCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIEMoZikge1xuICAgICAgICAgICAgICB2YXIgcSA9IGYuUmE7XG4gICAgICAgICAgICAgIGZvciAoZiA9IG5ldyBEYXRlKG5ldyBEYXRlKGYuU2EgKyAxOTAwLCAwLCAxKS5nZXRUaW1lKCkpOyAwIDwgcTsgKSB7XG4gICAgICAgICAgICAgICAgdmFyIHUgPSBmLmdldE1vbnRoKCksIEYgPSAoWShmLmdldEZ1bGxZZWFyKCkpID8gUWIgOiBSYilbdV07XG4gICAgICAgICAgICAgICAgaWYgKHEgPiBGIC0gZi5nZXREYXRlKCkpXG4gICAgICAgICAgICAgICAgICBxIC09IEYgLSBmLmdldERhdGUoKSArIDEsIGYuc2V0RGF0ZSgxKSwgMTEgPiB1ID8gZi5zZXRNb250aCh1ICsgMSkgOiAoZi5zZXRNb250aCgwKSwgZi5zZXRGdWxsWWVhcihmLmdldEZ1bGxZZWFyKCkgKyAxKSk7XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICBmLnNldERhdGUoZi5nZXREYXRlKCkgKyBxKTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB1ID0gbmV3IERhdGUoZi5nZXRGdWxsWWVhcigpICsgMSwgMCwgNCk7XG4gICAgICAgICAgICAgIHEgPSB0KG5ldyBEYXRlKFxuICAgICAgICAgICAgICAgIGYuZ2V0RnVsbFllYXIoKSxcbiAgICAgICAgICAgICAgICAwLFxuICAgICAgICAgICAgICAgIDRcbiAgICAgICAgICAgICAgKSk7XG4gICAgICAgICAgICAgIHUgPSB0KHUpO1xuICAgICAgICAgICAgICByZXR1cm4gMCA+PSBrKHEsIGYpID8gMCA+PSBrKHUsIGYpID8gZi5nZXRGdWxsWWVhcigpICsgMSA6IGYuZ2V0RnVsbFllYXIoKSA6IGYuZ2V0RnVsbFllYXIoKSAtIDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhID4+Pj0gMDtcbiAgICAgICAgICAgIGIgPj4+PSAwO1xuICAgICAgICAgICAgYyA+Pj49IDA7XG4gICAgICAgICAgICBkID4+Pj0gMDtcbiAgICAgICAgICAgIHZhciB3ID0gcigpW2QgKyA0MCA+Pj4gMiA+Pj4gMF07XG4gICAgICAgICAgICBkID0geyBvYjogcCgpW2QgPj4+IDIgPj4+IDBdLCBuYjogcCgpW2QgKyA0ID4+PiAyID4+PiAwXSwgVGE6IHAoKVtkICsgOCA+Pj4gMiA+Pj4gMF0sIFhhOiBwKClbZCArIDEyID4+PiAyID4+PiAwXSwgVWE6IHAoKVtkICsgMTYgPj4+IDIgPj4+IDBdLCBTYTogcCgpW2QgKyAyMCA+Pj4gMiA+Pj4gMF0sIE5hOiBwKClbZCArIDI0ID4+PiAyID4+PiAwXSwgUmE6IHAoKVtkICsgMjggPj4+IDIgPj4+IDBdLCB1YjogcCgpW2QgKyAzMiA+Pj4gMiA+Pj4gMF0sIG1iOiBwKClbZCArIDM2ID4+PiAyID4+PiAwXSwgcGI6IHcgPyBRKHcpIDogXCJcIiB9O1xuICAgICAgICAgICAgYyA9IFEoYyk7XG4gICAgICAgICAgICB3ID0ge1xuICAgICAgICAgICAgICBcIiVjXCI6IFwiJWEgJWIgJWQgJUg6JU06JVMgJVlcIixcbiAgICAgICAgICAgICAgXCIlRFwiOiBcIiVtLyVkLyV5XCIsXG4gICAgICAgICAgICAgIFwiJUZcIjogXCIlWS0lbS0lZFwiLFxuICAgICAgICAgICAgICBcIiVoXCI6IFwiJWJcIixcbiAgICAgICAgICAgICAgXCIlclwiOiBcIiVJOiVNOiVTICVwXCIsXG4gICAgICAgICAgICAgIFwiJVJcIjogXCIlSDolTVwiLFxuICAgICAgICAgICAgICBcIiVUXCI6IFwiJUg6JU06JVNcIixcbiAgICAgICAgICAgICAgXCIleFwiOiBcIiVtLyVkLyV5XCIsXG4gICAgICAgICAgICAgIFwiJVhcIjogXCIlSDolTTolU1wiLFxuICAgICAgICAgICAgICBcIiVFY1wiOiBcIiVjXCIsXG4gICAgICAgICAgICAgIFwiJUVDXCI6IFwiJUNcIixcbiAgICAgICAgICAgICAgXCIlRXhcIjogXCIlbS8lZC8leVwiLFxuICAgICAgICAgICAgICBcIiVFWFwiOiBcIiVIOiVNOiVTXCIsXG4gICAgICAgICAgICAgIFwiJUV5XCI6IFwiJXlcIixcbiAgICAgICAgICAgICAgXCIlRVlcIjogXCIlWVwiLFxuICAgICAgICAgICAgICBcIiVPZFwiOiBcIiVkXCIsXG4gICAgICAgICAgICAgIFwiJU9lXCI6IFwiJWVcIixcbiAgICAgICAgICAgICAgXCIlT0hcIjogXCIlSFwiLFxuICAgICAgICAgICAgICBcIiVPSVwiOiBcIiVJXCIsXG4gICAgICAgICAgICAgIFwiJU9tXCI6IFwiJW1cIixcbiAgICAgICAgICAgICAgXCIlT01cIjogXCIlTVwiLFxuICAgICAgICAgICAgICBcIiVPU1wiOiBcIiVTXCIsXG4gICAgICAgICAgICAgIFwiJU91XCI6IFwiJXVcIixcbiAgICAgICAgICAgICAgXCIlT1VcIjogXCIlVVwiLFxuICAgICAgICAgICAgICBcIiVPVlwiOiBcIiVWXCIsXG4gICAgICAgICAgICAgIFwiJU93XCI6IFwiJXdcIixcbiAgICAgICAgICAgICAgXCIlT1dcIjogXCIlV1wiLFxuICAgICAgICAgICAgICBcIiVPeVwiOiBcIiV5XCJcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBmb3IgKHZhciB5IGluIHcpXG4gICAgICAgICAgICAgIGMgPSBjLnJlcGxhY2UobmV3IFJlZ0V4cCh5LCBcImdcIiksIHdbeV0pO1xuICAgICAgICAgICAgdmFyIEliID0gXCJTdW5kYXkgTW9uZGF5IFR1ZXNkYXkgV2VkbmVzZGF5IFRodXJzZGF5IEZyaWRheSBTYXR1cmRheVwiLnNwbGl0KFwiIFwiKSwgSmIgPSBcIkphbnVhcnkgRmVicnVhcnkgTWFyY2ggQXByaWwgTWF5IEp1bmUgSnVseSBBdWd1c3QgU2VwdGVtYmVyIE9jdG9iZXIgTm92ZW1iZXIgRGVjZW1iZXJcIi5zcGxpdChcIiBcIik7XG4gICAgICAgICAgICB3ID0ge1xuICAgICAgICAgICAgICBcIiVhXCI6IChmKSA9PiBJYltmLk5hXS5zdWJzdHJpbmcoMCwgMyksXG4gICAgICAgICAgICAgIFwiJUFcIjogKGYpID0+IEliW2YuTmFdLFxuICAgICAgICAgICAgICBcIiViXCI6IChmKSA9PiBKYltmLlVhXS5zdWJzdHJpbmcoMCwgMyksXG4gICAgICAgICAgICAgIFwiJUJcIjogKGYpID0+IEpiW2YuVWFdLFxuICAgICAgICAgICAgICBcIiVDXCI6IChmKSA9PiBoKChmLlNhICsgMTkwMCkgLyAxMDAgfCAwLCAyKSxcbiAgICAgICAgICAgICAgXCIlZFwiOiAoZikgPT4gaChmLlhhLCAyKSxcbiAgICAgICAgICAgICAgXCIlZVwiOiAoZikgPT4gZyhmLlhhLCAyLCBcIiBcIiksXG4gICAgICAgICAgICAgIFwiJWdcIjogKGYpID0+IEMoZikudG9TdHJpbmcoKS5zdWJzdHJpbmcoMiksXG4gICAgICAgICAgICAgIFwiJUdcIjogKGYpID0+IEMoZiksXG4gICAgICAgICAgICAgIFwiJUhcIjogKGYpID0+IGgoZi5UYSwgMiksXG4gICAgICAgICAgICAgIFwiJUlcIjogKGYpID0+IHtcbiAgICAgICAgICAgICAgICBmID0gZi5UYTtcbiAgICAgICAgICAgICAgICAwID09IGYgPyBmID0gMTIgOiAxMiA8IGYgJiYgKGYgLT0gMTIpO1xuICAgICAgICAgICAgICAgIHJldHVybiBoKGYsIDIpO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBcIiVqXCI6IChmKSA9PiB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgcSA9IDAsIHUgPSAwOyB1IDw9IGYuVWEgLSAxOyBxICs9IChZKGYuU2EgKyAxOTAwKSA/IFFiIDogUmIpW3UrK10pXG4gICAgICAgICAgICAgICAgICA7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGgoZi5YYSArIHEsIDMpO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBcIiVtXCI6IChmKSA9PiBoKGYuVWEgKyAxLCAyKSxcbiAgICAgICAgICAgICAgXCIlTVwiOiAoZikgPT4gaChmLm5iLCAyKSxcbiAgICAgICAgICAgICAgXCIlblwiOiAoKSA9PiBcIlxcblwiLFxuICAgICAgICAgICAgICBcIiVwXCI6IChmKSA9PiAwIDw9IGYuVGEgJiYgMTIgPiBmLlRhID8gXCJBTVwiIDogXCJQTVwiLFxuICAgICAgICAgICAgICBcIiVTXCI6IChmKSA9PiBoKGYub2IsIDIpLFxuICAgICAgICAgICAgICBcIiV0XCI6ICgpID0+IFwiXHRcIixcbiAgICAgICAgICAgICAgXCIldVwiOiAoZikgPT4gZi5OYSB8fCA3LFxuICAgICAgICAgICAgICBcIiVVXCI6IChmKSA9PiBoKE1hdGguZmxvb3IoKGYuUmEgKyA3IC0gZi5OYSkgLyA3KSwgMiksXG4gICAgICAgICAgICAgIFwiJVZcIjogKGYpID0+IHtcbiAgICAgICAgICAgICAgICB2YXIgcSA9IE1hdGguZmxvb3IoKGYuUmEgKyA3IC0gKGYuTmEgKyA2KSAlIDcpIC8gNyk7XG4gICAgICAgICAgICAgICAgMiA+PSAoZi5OYSArIDM3MSAtIGYuUmEgLSAyKSAlIDcgJiYgcSsrO1xuICAgICAgICAgICAgICAgIGlmIChxKVxuICAgICAgICAgICAgICAgICAgNTMgPT0gcSAmJiAodSA9IChmLk5hICsgMzcxIC0gZi5SYSkgJSA3LCA0ID09IHUgfHwgMyA9PSB1ICYmIFkoZi5TYSkgfHwgKHEgPSAxKSk7XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICBxID0gNTI7XG4gICAgICAgICAgICAgICAgICB2YXIgdSA9IChmLk5hICsgNyAtIGYuUmEgLSAxKSAlIDc7XG4gICAgICAgICAgICAgICAgICAoNCA9PSB1IHx8IDUgPT0gdSAmJiBZKGYuU2EgJSA0MDAgLSAxKSkgJiYgcSsrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gaChxLCAyKTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgXCIld1wiOiAoZikgPT4gZi5OYSxcbiAgICAgICAgICAgICAgXCIlV1wiOiAoZikgPT4gaChNYXRoLmZsb29yKChmLlJhICsgNyAtIChmLk5hICsgNikgJSA3KSAvIDcpLCAyKSxcbiAgICAgICAgICAgICAgXCIleVwiOiAoZikgPT4gKGYuU2EgKyAxOTAwKS50b1N0cmluZygpLnN1YnN0cmluZygyKSxcbiAgICAgICAgICAgICAgXCIlWVwiOiAoZikgPT4gZi5TYSArIDE5MDAsXG4gICAgICAgICAgICAgIFwiJXpcIjogKGYpID0+IHtcbiAgICAgICAgICAgICAgICBmID0gZi5tYjtcbiAgICAgICAgICAgICAgICB2YXIgcSA9IDAgPD0gZjtcbiAgICAgICAgICAgICAgICBmID0gTWF0aC5hYnMoZikgLyA2MDtcbiAgICAgICAgICAgICAgICByZXR1cm4gKHEgPyBcIitcIiA6IFwiLVwiKSArIFN0cmluZyhcIjAwMDBcIiArIChmIC8gNjAgKiAxMDAgKyBmICUgNjApKS5zbGljZSgtNCk7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIFwiJVpcIjogKGYpID0+IGYucGIsXG4gICAgICAgICAgICAgIFwiJSVcIjogKCkgPT4gXCIlXCJcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjID0gYy5yZXBsYWNlKFxuICAgICAgICAgICAgICAvJSUvZyxcbiAgICAgICAgICAgICAgXCJcXDBcXDBcIlxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGZvciAoeSBpbiB3KVxuICAgICAgICAgICAgICBjLmluY2x1ZGVzKHkpICYmIChjID0gYy5yZXBsYWNlKG5ldyBSZWdFeHAoeSwgXCJnXCIpLCB3W3ldKGQpKSk7XG4gICAgICAgICAgICBjID0gYy5yZXBsYWNlKC9cXDBcXDAvZywgXCIlXCIpO1xuICAgICAgICAgICAgeSA9IFNiKGMpO1xuICAgICAgICAgICAgaWYgKHkubGVuZ3RoID4gYilcbiAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICBUYih5LCBhKTtcbiAgICAgICAgICAgIHJldHVybiB5Lmxlbmd0aCAtIDE7XG4gICAgICAgICAgfVxuICAgICAgICAgIFMuV2EoKTtcbiAgICAgICAgICB2YXIgVmIgPSBbT2EsIFBhLCBiYiwgZGIsIGViLCBpYiwgamIsIGtiLCBsYiwgbWIsIG5iLCBvYiwgcGIsIHFiLCByYiwgc2IsIHliLCB6YiwgR2IsIEtiLCBMYiwgTWIsIE5iLCBQYl0sIFpiID0ge1xuICAgICAgICAgICAgYjogZnVuY3Rpb24oYSwgYiwgYykge1xuICAgICAgICAgICAgICBhID4+Pj0gMDtcbiAgICAgICAgICAgICAgbmV3IFphKGEpLldhKGIgPj4+IDAsIGMgPj4+IDApO1xuICAgICAgICAgICAgICAkYSA9IGE7XG4gICAgICAgICAgICAgIGFiKys7XG4gICAgICAgICAgICAgIHRocm93ICRhO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIEw6IGZ1bmN0aW9uKGEpIHtcbiAgICAgICAgICAgICAgV2IoYSA+Pj4gMCwgIUEsIDEsICFrYSwgMTMxMDcyLCBmYWxzZSk7XG4gICAgICAgICAgICAgIFMuYWIoKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBqOiBmdW5jdGlvbihhKSB7XG4gICAgICAgICAgICAgIGEgPj4+PSAwO1xuICAgICAgICAgICAgICBEID8gcG9zdE1lc3NhZ2UoeyBjbWQ6IFwiY2xlYW51cFRocmVhZFwiLCB0aHJlYWQ6IGEgfSkgOiBTLlphKFMuTWFbYV0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIEg6IGNiLFxuICAgICAgICAgICAgaDogZGIsXG4gICAgICAgICAgICBTOiBlYixcbiAgICAgICAgICAgIEQ6IGliLFxuICAgICAgICAgICAgRjogamIsXG4gICAgICAgICAgICBUOiBrYixcbiAgICAgICAgICAgIFE6IGxiLFxuICAgICAgICAgICAgSjogbWIsXG4gICAgICAgICAgICBQOiBuYixcbiAgICAgICAgICAgIG46IG9iLFxuICAgICAgICAgICAgRTogcGIsXG4gICAgICAgICAgICBCOiBxYixcbiAgICAgICAgICAgIFI6IHJiLFxuICAgICAgICAgICAgQzogc2IsXG4gICAgICAgICAgICBwOiAoKSA9PiAxLFxuICAgICAgICAgICAgejogZnVuY3Rpb24oYSwgYikge1xuICAgICAgICAgICAgICBhID4+Pj0gMDtcbiAgICAgICAgICAgICAgYSA9PSBiID4+PiAwID8gc2V0VGltZW91dCgoKSA9PiBYKCkpIDogRCA/IHBvc3RNZXNzYWdlKHsgdGFyZ2V0VGhyZWFkOiBhLCBjbWQ6IFwiY2hlY2tNYWlsYm94XCIgfSkgOiAoYSA9IFMuTWFbYV0pICYmIGEucG9zdE1lc3NhZ2UoeyBjbWQ6IFwiY2hlY2tNYWlsYm94XCIgfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgSTogZnVuY3Rpb24oYSwgYiwgYywgZCkge1xuICAgICAgICAgICAgICBiID4+Pj0gMDtcbiAgICAgICAgICAgICAgdmIubGVuZ3RoID0gYztcbiAgICAgICAgICAgICAgZCA9IGQgPj4+IDAgPj4+IDM7XG4gICAgICAgICAgICAgIGZvciAodmFyIGcgPSAwOyBnIDwgYzsgZysrKVxuICAgICAgICAgICAgICAgIHZiW2ddID0gZWEoKVtkICsgZyA+Pj4gMF07XG4gICAgICAgICAgICAgIGEgPSAwID4gYSA/IEVhWy1hIC0gMV0gOiBWYlthXTtcbiAgICAgICAgICAgICAgUy5pYiA9IGI7XG4gICAgICAgICAgICAgIGIgPSBhLmFwcGx5KG51bGwsIHZiKTtcbiAgICAgICAgICAgICAgUy5pYiA9IDA7XG4gICAgICAgICAgICAgIHJldHVybiBiO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIEs6IHRiLFxuICAgICAgICAgICAgbzogZnVuY3Rpb24oYSkge1xuICAgICAgICAgICAgICBCICYmIFMuTWFbYSA+Pj4gMF0ucmVmKCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgczogZnVuY3Rpb24oYSwgYiwgYykge1xuICAgICAgICAgICAgICBhID0gYiArIDIwOTcxNTIgPj4+IDAgPCA0MTk0MzA1IC0gISFhID8gKGEgPj4+IDApICsgNDI5NDk2NzI5NiAqIGIgOiBOYU47XG4gICAgICAgICAgICAgIGMgPj4+PSAwO1xuICAgICAgICAgICAgICBhID0gbmV3IERhdGUoMWUzICogYSk7XG4gICAgICAgICAgICAgIHAoKVtjID4+PiAyID4+PiAwXSA9IGEuZ2V0VVRDU2Vjb25kcygpO1xuICAgICAgICAgICAgICBwKClbYyArIDQgPj4+IDIgPj4+IDBdID0gYS5nZXRVVENNaW51dGVzKCk7XG4gICAgICAgICAgICAgIHAoKVtjICsgOCA+Pj4gMiA+Pj4gMF0gPSBhLmdldFVUQ0hvdXJzKCk7XG4gICAgICAgICAgICAgIHAoKVtjICsgMTIgPj4+IDIgPj4+IDBdID0gYS5nZXRVVENEYXRlKCk7XG4gICAgICAgICAgICAgIHAoKVtjICsgMTYgPj4+IDIgPj4+IDBdID0gYS5nZXRVVENNb250aCgpO1xuICAgICAgICAgICAgICBwKClbYyArIDIwID4+PiAyID4+PiAwXSA9IGEuZ2V0VVRDRnVsbFllYXIoKSAtIDE5MDA7XG4gICAgICAgICAgICAgIHAoKVtjICsgMjQgPj4+IDIgPj4+IDBdID0gYS5nZXRVVENEYXkoKTtcbiAgICAgICAgICAgICAgYSA9IChhLmdldFRpbWUoKSAtIERhdGUuVVRDKGEuZ2V0VVRDRnVsbFllYXIoKSwgMCwgMSwgMCwgMCwgMCwgMCkpIC8gODY0ZTUgfCAwO1xuICAgICAgICAgICAgICBwKClbYyArIDI4ID4+PiAyID4+PiAwXSA9IGE7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdDogZnVuY3Rpb24oYSwgYiwgYykge1xuICAgICAgICAgICAgICBhID0gYiArIDIwOTcxNTIgPj4+IDAgPCA0MTk0MzA1IC0gISFhID8gKGEgPj4+IDApICsgNDI5NDk2NzI5NiAqIGIgOiBOYU47XG4gICAgICAgICAgICAgIGMgPj4+PSAwO1xuICAgICAgICAgICAgICBhID0gbmV3IERhdGUoMWUzICogYSk7XG4gICAgICAgICAgICAgIHAoKVtjID4+PiAyID4+PiAwXSA9IGEuZ2V0U2Vjb25kcygpO1xuICAgICAgICAgICAgICBwKClbYyArIDQgPj4+IDIgPj4+IDBdID0gYS5nZXRNaW51dGVzKCk7XG4gICAgICAgICAgICAgIHAoKVtjICsgOCA+Pj4gMiA+Pj4gMF0gPSBhLmdldEhvdXJzKCk7XG4gICAgICAgICAgICAgIHAoKVtjICsgMTIgPj4+IDIgPj4+IDBdID0gYS5nZXREYXRlKCk7XG4gICAgICAgICAgICAgIHAoKVtjICsgMTYgPj4+IDIgPj4+IDBdID0gYS5nZXRNb250aCgpO1xuICAgICAgICAgICAgICBwKClbYyArIDIwID4+PiAyID4+PiAwXSA9IGEuZ2V0RnVsbFllYXIoKSAtIDE5MDA7XG4gICAgICAgICAgICAgIHAoKVtjICsgMjQgPj4+IDIgPj4+IDBdID0gYS5nZXREYXkoKTtcbiAgICAgICAgICAgICAgYiA9IChZKGEuZ2V0RnVsbFllYXIoKSkgPyB3YiA6IHhiKVthLmdldE1vbnRoKCldICsgYS5nZXREYXRlKCkgLSAxIHwgMDtcbiAgICAgICAgICAgICAgcCgpW2MgKyAyOCA+Pj4gMiA+Pj4gMF0gPSBiO1xuICAgICAgICAgICAgICBwKClbYyArIDM2ID4+PiAyID4+PiAwXSA9IC0oNjAgKiBhLmdldFRpbWV6b25lT2Zmc2V0KCkpO1xuICAgICAgICAgICAgICBiID0gbmV3IERhdGUoYS5nZXRGdWxsWWVhcigpLCA2LCAxKS5nZXRUaW1lem9uZU9mZnNldCgpO1xuICAgICAgICAgICAgICB2YXIgZCA9IG5ldyBEYXRlKGEuZ2V0RnVsbFllYXIoKSwgMCwgMSkuZ2V0VGltZXpvbmVPZmZzZXQoKTtcbiAgICAgICAgICAgICAgYSA9IChiICE9IGQgJiYgYS5nZXRUaW1lem9uZU9mZnNldCgpID09IE1hdGgubWluKGQsIGIpKSB8IDA7XG4gICAgICAgICAgICAgIHAoKVtjICsgMzIgPj4+IDIgPj4+IDBdID0gYTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB1OiBmdW5jdGlvbihhKSB7XG4gICAgICAgICAgICAgIGEgPj4+PSAwO1xuICAgICAgICAgICAgICB2YXIgYiA9IG5ldyBEYXRlKHAoKVthICsgMjAgPj4+IDIgPj4+IDBdICsgMTkwMCwgcCgpW2EgKyAxNiA+Pj4gMiA+Pj4gMF0sIHAoKVthICsgMTIgPj4+IDIgPj4+IDBdLCBwKClbYSArIDggPj4+IDIgPj4+IDBdLCBwKClbYSArIDQgPj4+IDIgPj4+IDBdLCBwKClbYSA+Pj4gMiA+Pj4gMF0sIDApLCBjID0gcCgpW2EgKyAzMiA+Pj4gMiA+Pj4gMF0sIGQgPSBiLmdldFRpbWV6b25lT2Zmc2V0KCksIGcgPSBuZXcgRGF0ZShiLmdldEZ1bGxZZWFyKCksIDYsIDEpLmdldFRpbWV6b25lT2Zmc2V0KCksIGggPSBuZXcgRGF0ZShcbiAgICAgICAgICAgICAgICBiLmdldEZ1bGxZZWFyKCksXG4gICAgICAgICAgICAgICAgMCxcbiAgICAgICAgICAgICAgICAxXG4gICAgICAgICAgICAgICkuZ2V0VGltZXpvbmVPZmZzZXQoKSwgayA9IE1hdGgubWluKGgsIGcpO1xuICAgICAgICAgICAgICAwID4gYyA/IHAoKVthICsgMzIgPj4+IDIgPj4+IDBdID0gTnVtYmVyKGcgIT0gaCAmJiBrID09IGQpIDogMCA8IGMgIT0gKGsgPT0gZCkgJiYgKGcgPSBNYXRoLm1heChoLCBnKSwgYi5zZXRUaW1lKGIuZ2V0VGltZSgpICsgNmU0ICogKCgwIDwgYyA/IGsgOiBnKSAtIGQpKSk7XG4gICAgICAgICAgICAgIHAoKVthICsgMjQgPj4+IDIgPj4+IDBdID0gYi5nZXREYXkoKTtcbiAgICAgICAgICAgICAgYyA9IChZKGIuZ2V0RnVsbFllYXIoKSkgPyB3YiA6IHhiKVtiLmdldE1vbnRoKCldICsgYi5nZXREYXRlKCkgLSAxIHwgMDtcbiAgICAgICAgICAgICAgcCgpW2EgKyAyOCA+Pj4gMiA+Pj4gMF0gPSBjO1xuICAgICAgICAgICAgICBwKClbYSA+Pj4gMiA+Pj4gMF0gPSBiLmdldFNlY29uZHMoKTtcbiAgICAgICAgICAgICAgcCgpW2EgKyA0ID4+PiAyID4+PiAwXSA9IGIuZ2V0TWludXRlcygpO1xuICAgICAgICAgICAgICBwKClbYSArIDggPj4+IDIgPj4+IDBdID0gYi5nZXRIb3VycygpO1xuICAgICAgICAgICAgICBwKClbYSArIDEyID4+PiAyID4+PiAwXSA9IGIuZ2V0RGF0ZSgpO1xuICAgICAgICAgICAgICBwKClbYSArIDE2ID4+PiAyID4+PiAwXSA9IGIuZ2V0TW9udGgoKTtcbiAgICAgICAgICAgICAgcCgpW2EgKyAyMCA+Pj4gMiA+Pj4gMF0gPSBiLmdldFllYXIoKTtcbiAgICAgICAgICAgICAgYSA9IGIuZ2V0VGltZSgpO1xuICAgICAgICAgICAgICBpc05hTihhKSA/IChwKClbWGIoKSA+Pj4gMiA+Pj4gMF0gPSA2MSwgYSA9IC0xKSA6IGEgLz0gMWUzO1xuICAgICAgICAgICAgICByZXR1cm4gWWIoKFAgPSBhLCAxIDw9ICtNYXRoLmFicyhQKSA/IDAgPCBQID8gK01hdGguZmxvb3IoUCAvIDQyOTQ5NjcyOTYpID4+PiAwIDogfn4rTWF0aC5jZWlsKChQIC0gKyh+flAgPj4+IDApKSAvIDQyOTQ5NjcyOTYpID4+PiAwIDogMCkpLCBhID4+PiAwO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHE6IHliLFxuICAgICAgICAgICAgcjogemIsXG4gICAgICAgICAgICB5OiBmdW5jdGlvbihhLCBiLCBjKSB7XG4gICAgICAgICAgICAgIGZ1bmN0aW9uIGQodykge1xuICAgICAgICAgICAgICAgIHJldHVybiAodyA9IHcudG9UaW1lU3RyaW5nKCkubWF0Y2goL1xcKChbQS1aYS16IF0rKVxcKSQvKSkgPyB3WzFdIDogXCJHTVRcIjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBhID4+Pj0gMDtcbiAgICAgICAgICAgICAgYiA+Pj49IDA7XG4gICAgICAgICAgICAgIGMgPj4+PSAwO1xuICAgICAgICAgICAgICB2YXIgZyA9ICgvKiBAX19QVVJFX18gKi8gbmV3IERhdGUoKSkuZ2V0RnVsbFllYXIoKSwgaCA9IG5ldyBEYXRlKGcsIDAsIDEpLCBrID0gbmV3IERhdGUoZywgNiwgMSk7XG4gICAgICAgICAgICAgIGcgPSBoLmdldFRpbWV6b25lT2Zmc2V0KCk7XG4gICAgICAgICAgICAgIHZhciB0ID0gay5nZXRUaW1lem9uZU9mZnNldCgpLCBDID0gTWF0aC5tYXgoZywgdCk7XG4gICAgICAgICAgICAgIHIoKVthID4+PiAyID4+PiAwXSA9IDYwICogQztcbiAgICAgICAgICAgICAgcCgpW2IgPj4+IDIgPj4+IDBdID0gTnVtYmVyKGcgIT0gdCk7XG4gICAgICAgICAgICAgIGEgPSBkKGgpO1xuICAgICAgICAgICAgICBiID0gZChrKTtcbiAgICAgICAgICAgICAgYSA9IEJiKGEpO1xuICAgICAgICAgICAgICBiID0gQmIoYik7XG4gICAgICAgICAgICAgIHQgPCBnID8gKHIoKVtjID4+PiAyID4+PiAwXSA9IGEsIHIoKVtjICsgNCA+Pj4gMiA+Pj4gMF0gPSBiKSA6IChyKClbYyA+Pj4gMiA+Pj4gMF0gPSBiLCByKClbYyArIDQgPj4+IDIgPj4+IDBdID0gYSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYzogKCkgPT4ge1xuICAgICAgICAgICAgICByYShcIlwiKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBPOiBmdW5jdGlvbihhLCBiLCBjKSB7XG4gICAgICAgICAgICAgIGEgPj4+PSAwO1xuICAgICAgICAgICAgICBiID4+Pj0gMDtcbiAgICAgICAgICAgICAgYyA+Pj49IDA7XG4gICAgICAgICAgICAgIENiLmxlbmd0aCA9IDA7XG4gICAgICAgICAgICAgIGZvciAodmFyIGQ7IGQgPSBuKClbYisrID4+PiAwXTsgKSB7XG4gICAgICAgICAgICAgICAgdmFyIGcgPSAxMDUgIT0gZDtcbiAgICAgICAgICAgICAgICBnICY9IDExMiAhPSBkO1xuICAgICAgICAgICAgICAgIGMgKz0gZyAmJiBjICUgOCA/IDQgOiAwO1xuICAgICAgICAgICAgICAgIENiLnB1c2goMTEyID09IGQgPyByKClbYyA+Pj4gMiA+Pj4gMF0gOiAxMDUgPT0gZCA/IHAoKVtjID4+PiAyID4+PiAwXSA6IGVhKClbYyA+Pj4gMyA+Pj4gMF0pO1xuICAgICAgICAgICAgICAgIGMgKz0gZyA/IDggOiA0O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiBFYVthXS5hcHBseShudWxsLCBDYik7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgazogKCkgPT4ge1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGk6ICgpID0+IERhdGUubm93KCksXG4gICAgICAgICAgICBVOiAoKSA9PiB7XG4gICAgICAgICAgICAgIFQgKz0gMTtcbiAgICAgICAgICAgICAgdGhyb3cgXCJ1bndpbmRcIjtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBBOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIDQyOTQ5MDE3NjA7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZTogKCkgPT4gcGVyZm9ybWFuY2UudGltZU9yaWdpbiArIHBlcmZvcm1hbmNlLm5vdygpLFxuICAgICAgICAgICAgZjogKCkgPT4gQiA/IChpbml0X29zKCksIF9fdG9Db21tb25KUyhvc19leHBvcnRzKSkuY3B1cygpLmxlbmd0aCA6IG5hdmlnYXRvci5oYXJkd2FyZUNvbmN1cnJlbmN5LFxuICAgICAgICAgICAgeDogZnVuY3Rpb24oYSkge1xuICAgICAgICAgICAgICBhID4+Pj0gMDtcbiAgICAgICAgICAgICAgdmFyIGIgPSBuKCkubGVuZ3RoO1xuICAgICAgICAgICAgICBpZiAoYSA8PSBiIHx8IDQyOTQ5MDE3NjAgPCBhKVxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgZm9yICh2YXIgYyA9IDE7IDQgPj0gYzsgYyAqPSAyKSB7XG4gICAgICAgICAgICAgICAgdmFyIGQgPSBiICogKDEgKyAwLjIgLyBjKTtcbiAgICAgICAgICAgICAgICBkID0gTWF0aC5taW4oZCwgYSArIDEwMDY2MzI5Nik7XG4gICAgICAgICAgICAgICAgdmFyIGcgPSBNYXRoO1xuICAgICAgICAgICAgICAgIGQgPSBNYXRoLm1heChhLCBkKTtcbiAgICAgICAgICAgICAgICBhOiB7XG4gICAgICAgICAgICAgICAgICBnID0gKGcubWluLmNhbGwoZywgNDI5NDkwMTc2MCwgZCArICg2NTUzNiAtIGQgJSA2NTUzNikgJSA2NTUzNikgLSBlLmJ1ZmZlci5ieXRlTGVuZ3RoICsgNjU1MzUpIC8gNjU1MzY7XG4gICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBlLmdyb3coZyk7XG4gICAgICAgICAgICAgICAgICAgIG0oKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGggPSAxO1xuICAgICAgICAgICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoaykge1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgaCA9IHZvaWQgMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGgpXG4gICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgTTogR2IsXG4gICAgICAgICAgICBOOiBLYixcbiAgICAgICAgICAgIEc6IFFhLFxuICAgICAgICAgICAgZzogTGIsXG4gICAgICAgICAgICBtOiBNYixcbiAgICAgICAgICAgIHY6IE5iLFxuICAgICAgICAgICAgbDogUGIsXG4gICAgICAgICAgICBhOiBlIHx8IHYud2FzbU1lbW9yeSxcbiAgICAgICAgICAgIHc6IFViLFxuICAgICAgICAgICAgZDogZnVuY3Rpb24oYSwgYiwgYywgZCkge1xuICAgICAgICAgICAgICByZXR1cm4gVWIoYSA+Pj4gMCwgYiA+Pj4gMCwgYyA+Pj4gMCwgZCA+Pj4gMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSwgWiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgZnVuY3Rpb24gYShjLCBkKSB7XG4gICAgICAgICAgICAgIFogPSBjLmV4cG9ydHM7XG4gICAgICAgICAgICAgIFogPSAkYigpO1xuICAgICAgICAgICAgICBTLmJiLnB1c2goWi56YSk7XG4gICAgICAgICAgICAgIFhhID0gWi5BYTtcbiAgICAgICAgICAgICAgdmEudW5zaGlmdChaLlYpO1xuICAgICAgICAgICAgICBzYSA9IGQ7XG4gICAgICAgICAgICAgIHlhKCk7XG4gICAgICAgICAgICAgIHJldHVybiBaO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGIgPSB7IGE6IFpiIH07XG4gICAgICAgICAgICBNKys7XG4gICAgICAgICAgICBpZiAodi5pbnN0YW50aWF0ZVdhc20pXG4gICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHYuaW5zdGFudGlhdGVXYXNtKGIsIGEpO1xuICAgICAgICAgICAgICB9IGNhdGNoIChjKSB7XG4gICAgICAgICAgICAgICAgSihgTW9kdWxlLmluc3RhbnRpYXRlV2FzbSBjYWxsYmFjayBmYWlsZWQgd2l0aCBlcnJvcjogJHtjfWApLCB4KGMpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBEYShiLCBmdW5jdGlvbihjKSB7XG4gICAgICAgICAgICAgIGEoYy5pbnN0YW5jZSwgYy5tb2R1bGUpO1xuICAgICAgICAgICAgfSkuY2F0Y2goeCk7XG4gICAgICAgICAgICByZXR1cm4ge307XG4gICAgICAgICAgfSgpO1xuICAgICAgICAgIHYuX09ydEluaXQgPSAoYSwgYikgPT4gKHYuX09ydEluaXQgPSBaLlcpKGEsIGIpO1xuICAgICAgICAgIHYuX09ydEdldExhc3RFcnJvciA9IChhLCBiKSA9PiAodi5fT3J0R2V0TGFzdEVycm9yID0gWi5YKShhLCBiKTtcbiAgICAgICAgICB2Ll9PcnRDcmVhdGVTZXNzaW9uT3B0aW9ucyA9IChhLCBiLCBjLCBkLCBnLCBoLCBrLCB0LCBDLCB3KSA9PiAodi5fT3J0Q3JlYXRlU2Vzc2lvbk9wdGlvbnMgPSBaLlkpKGEsIGIsIGMsIGQsIGcsIGgsIGssIHQsIEMsIHcpO1xuICAgICAgICAgIHYuX09ydEFwcGVuZEV4ZWN1dGlvblByb3ZpZGVyID0gKGEsIGIpID0+ICh2Ll9PcnRBcHBlbmRFeGVjdXRpb25Qcm92aWRlciA9IFouWikoYSwgYik7XG4gICAgICAgICAgdi5fT3J0QWRkRnJlZURpbWVuc2lvbk92ZXJyaWRlID0gKGEsIGIsIGMpID0+ICh2Ll9PcnRBZGRGcmVlRGltZW5zaW9uT3ZlcnJpZGUgPSBaLl8pKGEsIGIsIGMpO1xuICAgICAgICAgIHYuX09ydEFkZFNlc3Npb25Db25maWdFbnRyeSA9IChhLCBiLCBjKSA9PiAodi5fT3J0QWRkU2Vzc2lvbkNvbmZpZ0VudHJ5ID0gWi4kKShhLCBiLCBjKTtcbiAgICAgICAgICB2Ll9PcnRSZWxlYXNlU2Vzc2lvbk9wdGlvbnMgPSAoYSkgPT4gKHYuX09ydFJlbGVhc2VTZXNzaW9uT3B0aW9ucyA9IFouYWEpKGEpO1xuICAgICAgICAgIHYuX09ydENyZWF0ZVNlc3Npb24gPSAoYSwgYiwgYykgPT4gKHYuX09ydENyZWF0ZVNlc3Npb24gPSBaLmJhKShhLCBiLCBjKTtcbiAgICAgICAgICB2Ll9PcnRSZWxlYXNlU2Vzc2lvbiA9IChhKSA9PiAodi5fT3J0UmVsZWFzZVNlc3Npb24gPSBaLmNhKShhKTtcbiAgICAgICAgICB2Ll9PcnRHZXRJbnB1dE91dHB1dENvdW50ID0gKGEsIGIsIGMpID0+ICh2Ll9PcnRHZXRJbnB1dE91dHB1dENvdW50ID0gWi5kYSkoYSwgYiwgYyk7XG4gICAgICAgICAgdi5fT3J0R2V0SW5wdXROYW1lID0gKGEsIGIpID0+ICh2Ll9PcnRHZXRJbnB1dE5hbWUgPSBaLmVhKShhLCBiKTtcbiAgICAgICAgICB2Ll9PcnRHZXRPdXRwdXROYW1lID0gKGEsIGIpID0+ICh2Ll9PcnRHZXRPdXRwdXROYW1lID0gWi5mYSkoYSwgYik7XG4gICAgICAgICAgdi5fT3J0RnJlZSA9IChhKSA9PiAodi5fT3J0RnJlZSA9IFouZ2EpKGEpO1xuICAgICAgICAgIHYuX09ydENyZWF0ZVRlbnNvciA9IChhLCBiLCBjLCBkLCBnLCBoKSA9PiAodi5fT3J0Q3JlYXRlVGVuc29yID0gWi5oYSkoYSwgYiwgYywgZCwgZywgaCk7XG4gICAgICAgICAgdi5fT3J0R2V0VGVuc29yRGF0YSA9IChhLCBiLCBjLCBkLCBnKSA9PiAodi5fT3J0R2V0VGVuc29yRGF0YSA9IFouaWEpKGEsIGIsIGMsIGQsIGcpO1xuICAgICAgICAgIHYuX09ydFJlbGVhc2VUZW5zb3IgPSAoYSkgPT4gKHYuX09ydFJlbGVhc2VUZW5zb3IgPSBaLmphKShhKTtcbiAgICAgICAgICB2Ll9PcnRDcmVhdGVSdW5PcHRpb25zID0gKGEsIGIsIGMsIGQpID0+ICh2Ll9PcnRDcmVhdGVSdW5PcHRpb25zID0gWi5rYSkoYSwgYiwgYywgZCk7XG4gICAgICAgICAgdi5fT3J0QWRkUnVuQ29uZmlnRW50cnkgPSAoYSwgYiwgYykgPT4gKHYuX09ydEFkZFJ1bkNvbmZpZ0VudHJ5ID0gWi5sYSkoYSwgYiwgYyk7XG4gICAgICAgICAgdi5fT3J0UmVsZWFzZVJ1bk9wdGlvbnMgPSAoYSkgPT4gKHYuX09ydFJlbGVhc2VSdW5PcHRpb25zID0gWi5tYSkoYSk7XG4gICAgICAgICAgdi5fT3J0Q3JlYXRlQmluZGluZyA9IChhKSA9PiAodi5fT3J0Q3JlYXRlQmluZGluZyA9IFoubmEpKGEpO1xuICAgICAgICAgIHYuX09ydEJpbmRJbnB1dCA9IChhLCBiLCBjKSA9PiAodi5fT3J0QmluZElucHV0ID0gWi5vYSkoYSwgYiwgYyk7XG4gICAgICAgICAgdi5fT3J0QmluZE91dHB1dCA9IChhLCBiLCBjLCBkKSA9PiAodi5fT3J0QmluZE91dHB1dCA9IFoucGEpKGEsIGIsIGMsIGQpO1xuICAgICAgICAgIHYuX09ydENsZWFyQm91bmRPdXRwdXRzID0gKGEpID0+ICh2Ll9PcnRDbGVhckJvdW5kT3V0cHV0cyA9IFoucWEpKGEpO1xuICAgICAgICAgIHYuX09ydFJlbGVhc2VCaW5kaW5nID0gKGEpID0+ICh2Ll9PcnRSZWxlYXNlQmluZGluZyA9IFoucmEpKGEpO1xuICAgICAgICAgIHYuX09ydFJ1bldpdGhCaW5kaW5nID0gKGEsIGIsIGMsIGQsIGcpID0+ICh2Ll9PcnRSdW5XaXRoQmluZGluZyA9IFouc2EpKGEsIGIsIGMsIGQsIGcpO1xuICAgICAgICAgIHYuX09ydFJ1biA9IChhLCBiLCBjLCBkLCBnLCBoLCBrLCB0KSA9PiAodi5fT3J0UnVuID0gWi50YSkoYSwgYiwgYywgZCwgZywgaCwgaywgdCk7XG4gICAgICAgICAgdi5fT3J0RW5kUHJvZmlsaW5nID0gKGEpID0+ICh2Ll9PcnRFbmRQcm9maWxpbmcgPSBaLnVhKShhKTtcbiAgICAgICAgICB2YXIgWGIgPSAoKSA9PiAoWGIgPSBaLnZhKSgpLCBXID0gdi5fcHRocmVhZF9zZWxmID0gKCkgPT4gKFcgPSB2Ll9wdGhyZWFkX3NlbGYgPSBaLndhKSgpLCBBYiA9IHYuX21hbGxvYyA9IChhKSA9PiAoQWIgPSB2Ll9tYWxsb2MgPSBaLnhhKShhKTtcbiAgICAgICAgICB2Ll9mcmVlID0gKGEpID0+ICh2Ll9mcmVlID0gWi55YSkoYSk7XG4gICAgICAgICAgdi5fX2Vtc2NyaXB0ZW5fdGxzX2luaXQgPSAoKSA9PiAodi5fX2Vtc2NyaXB0ZW5fdGxzX2luaXQgPSBaLnphKSgpO1xuICAgICAgICAgIHZhciBXYiA9IHYuX19lbXNjcmlwdGVuX3RocmVhZF9pbml0ID0gKGEsIGIsIGMsIGQsIGcsIGgpID0+IChXYiA9IHYuX19lbXNjcmlwdGVuX3RocmVhZF9pbml0ID0gWi5CYSkoYSwgYiwgYywgZCwgZywgaCk7XG4gICAgICAgICAgdi5fX2Vtc2NyaXB0ZW5fdGhyZWFkX2NyYXNoZWQgPSAoKSA9PiAodi5fX2Vtc2NyaXB0ZW5fdGhyZWFkX2NyYXNoZWQgPSBaLkNhKSgpO1xuICAgICAgICAgIHZhciBOYSA9IChhLCBiLCBjLCBkKSA9PiAoTmEgPSBaLkRhKShhLCBiLCBjLCBkKSwgVGEgPSAoYSkgPT4gKFRhID0gWi5FYSkoYSksIFlhID0gdi5fX2Vtc2NyaXB0ZW5fdGhyZWFkX2V4aXQgPSAoYSkgPT4gKFlhID0gdi5fX2Vtc2NyaXB0ZW5fdGhyZWFkX2V4aXQgPSBaLkZhKShhKSwgdWIgPSAoKSA9PiAodWIgPSBaLkdhKSgpLCBZYiA9IChhKSA9PiAoWWIgPSBaLkhhKShhKSwgVmEgPSAoYSwgYikgPT4gKFZhID0gWi5JYSkoYSwgYiksIEthID0gKCkgPT4gKEthID0gWi5KYSkoKSwgVSA9IChhKSA9PiAoVSA9IFouS2EpKGEpLCBNYSA9IChhKSA9PiAoTWEgPSBaLkxhKShhKTtcbiAgICAgICAgICBmdW5jdGlvbiAkYigpIHtcbiAgICAgICAgICAgIHZhciBhID0gWjtcbiAgICAgICAgICAgIGEgPSBPYmplY3QuYXNzaWduKHt9LCBhKTtcbiAgICAgICAgICAgIHZhciBiID0gKGQpID0+ICgpID0+IGQoKSA+Pj4gMCwgYyA9IChkKSA9PiAoZykgPT4gZChnKSA+Pj4gMDtcbiAgICAgICAgICAgIGEudmEgPSBiKGEudmEpO1xuICAgICAgICAgICAgYS53YSA9IGIoYS53YSk7XG4gICAgICAgICAgICBhLnhhID0gYyhhLnhhKTtcbiAgICAgICAgICAgIGEuZW1zY3JpcHRlbl9tYWluX3J1bnRpbWVfdGhyZWFkX2lkID0gYihhLmVtc2NyaXB0ZW5fbWFpbl9ydW50aW1lX3RocmVhZF9pZCk7XG4gICAgICAgICAgICBhLkphID0gYihhLkphKTtcbiAgICAgICAgICAgIGEuTGEgPSBjKGEuTGEpO1xuICAgICAgICAgICAgcmV0dXJuIGE7XG4gICAgICAgICAgfVxuICAgICAgICAgIHYud2FzbU1lbW9yeSA9IGU7XG4gICAgICAgICAgdi5zdGFja0FsbG9jID0gTWE7XG4gICAgICAgICAgdi5zdGFja1NhdmUgPSBLYTtcbiAgICAgICAgICB2LnN0YWNrUmVzdG9yZSA9IFU7XG4gICAgICAgICAgdi5rZWVwUnVudGltZUFsaXZlID0gKCkgPT4gMCA8IFQ7XG4gICAgICAgICAgdi5VVEY4VG9TdHJpbmcgPSBRO1xuICAgICAgICAgIHYuc3RyaW5nVG9VVEY4ID0gaGI7XG4gICAgICAgICAgdi5sZW5ndGhCeXRlc1VURjggPSBmYjtcbiAgICAgICAgICB2LkV4aXRTdGF0dXMgPSBSO1xuICAgICAgICAgIHYuUFRocmVhZCA9IFM7XG4gICAgICAgICAgdmFyIGFjO1xuICAgICAgICAgIE4gPSBmdW5jdGlvbiBiYygpIHtcbiAgICAgICAgICAgIGFjIHx8IGNjKCk7XG4gICAgICAgICAgICBhYyB8fCAoTiA9IGJjKTtcbiAgICAgICAgICB9O1xuICAgICAgICAgIGZ1bmN0aW9uIGNjKCkge1xuICAgICAgICAgICAgaWYgKCEoMCA8IE0pKVxuICAgICAgICAgICAgICBpZiAoRClcbiAgICAgICAgICAgICAgICBoYSh2KSwgRCB8fCBVYSh2YSksIHN0YXJ0V29ya2VyKHYpO1xuICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAodi5wcmVSdW4pXG4gICAgICAgICAgICAgICAgICBmb3IgKFwiZnVuY3Rpb25cIiA9PSB0eXBlb2Ygdi5wcmVSdW4gJiYgKHYucHJlUnVuID0gW3YucHJlUnVuXSk7IHYucHJlUnVuLmxlbmd0aDsgKVxuICAgICAgICAgICAgICAgICAgICB1YS51bnNoaWZ0KHYucHJlUnVuLnNoaWZ0KCkpO1xuICAgICAgICAgICAgICAgIFVhKHVhKTtcbiAgICAgICAgICAgICAgICAwIDwgTSB8fCBhYyB8fCAoYWMgPSB0cnVlLCB2LmNhbGxlZFJ1biA9IHRydWUsIEsgfHwgKEQgfHwgVWEodmEpLCBoYSh2KSwgRCB8fCBVYSh3YSkpKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBjYygpO1xuICAgICAgICAgIHJldHVybiBtb2R1bGVBcmcucmVhZHk7XG4gICAgICAgIH07XG4gICAgICB9KSgpO1xuICAgICAgaWYgKHR5cGVvZiBleHBvcnRzID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCIpXG4gICAgICAgIG1vZHVsZS5leHBvcnRzID0gb3J0V2FzbVRocmVhZGVkO1xuICAgICAgZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZVtcImFtZFwiXSlcbiAgICAgICAgZGVmaW5lKFtdLCAoKSA9PiBvcnRXYXNtVGhyZWFkZWQpO1xuICAgIH1cbiAgfSk7XG5cbiAgLy8gd2ViL2xpYi93YXNtL2JpbmRpbmcvb3J0LXdhc20tdGhyZWFkZWQud29ya2VyLmpzXG4gIHZhciByZXF1aXJlX29ydF93YXNtX3RocmVhZGVkX3dvcmtlciA9IF9fY29tbW9uSlMoe1xuICAgIFwid2ViL2xpYi93YXNtL2JpbmRpbmcvb3J0LXdhc20tdGhyZWFkZWQud29ya2VyLmpzXCIoZXhwb3J0cywgbW9kdWxlKSB7XG4gICAgICBtb2R1bGUuZXhwb3J0cyA9ICdcInVzZSBzdHJpY3RcIjt2YXIgTW9kdWxlPXt9O3ZhciBFTlZJUk9OTUVOVF9JU19OT0RFPXR5cGVvZiBwcm9jZXNzPT1cIm9iamVjdFwiJiZ0eXBlb2YgcHJvY2Vzcy52ZXJzaW9ucz09XCJvYmplY3RcIiYmdHlwZW9mIHByb2Nlc3MudmVyc2lvbnMubm9kZT09XCJzdHJpbmdcIjtpZihFTlZJUk9OTUVOVF9JU19OT0RFKXt2YXIgbm9kZVdvcmtlclRocmVhZHM9cmVxdWlyZShcIndvcmtlcl90aHJlYWRzXCIpO3ZhciBwYXJlbnRQb3J0PW5vZGVXb3JrZXJUaHJlYWRzLnBhcmVudFBvcnQ7cGFyZW50UG9ydC5vbihcIm1lc3NhZ2VcIixkYXRhPT5vbm1lc3NhZ2Uoe2RhdGE6ZGF0YX0pKTt2YXIgZnM9cmVxdWlyZShcImZzXCIpO3ZhciB2bT1yZXF1aXJlKFwidm1cIik7T2JqZWN0LmFzc2lnbihnbG9iYWwse3NlbGY6Z2xvYmFsLHJlcXVpcmU6cmVxdWlyZSxNb2R1bGU6TW9kdWxlLGxvY2F0aW9uOntocmVmOl9fZmlsZW5hbWV9LFdvcmtlcjpub2RlV29ya2VyVGhyZWFkcy5Xb3JrZXIsaW1wb3J0U2NyaXB0czpmPT52bS5ydW5JblRoaXNDb250ZXh0KGZzLnJlYWRGaWxlU3luYyhmLFwidXRmOFwiKSx7ZmlsZW5hbWU6Zn0pLHBvc3RNZXNzYWdlOm1zZz0+cGFyZW50UG9ydC5wb3N0TWVzc2FnZShtc2cpLHBlcmZvcm1hbmNlOmdsb2JhbC5wZXJmb3JtYW5jZXx8e25vdzpEYXRlLm5vd319KX12YXIgaW5pdGlhbGl6ZWRKUz1mYWxzZTtmdW5jdGlvbiB0aHJlYWRQcmludEVycigpe3ZhciB0ZXh0PUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cykuam9pbihcIiBcIik7aWYoRU5WSVJPTk1FTlRfSVNfTk9ERSl7ZnMud3JpdGVTeW5jKDIsdGV4dCtcIlxcXFxuXCIpO3JldHVybn1jb25zb2xlLmVycm9yKHRleHQpfWZ1bmN0aW9uIHRocmVhZEFsZXJ0KCl7dmFyIHRleHQ9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKS5qb2luKFwiIFwiKTtwb3N0TWVzc2FnZSh7Y21kOlwiYWxlcnRcIix0ZXh0OnRleHQsdGhyZWFkSWQ6TW9kdWxlW1wiX3B0aHJlYWRfc2VsZlwiXSgpfSl9dmFyIGVycj10aHJlYWRQcmludEVycjtzZWxmLmFsZXJ0PXRocmVhZEFsZXJ0O01vZHVsZVtcImluc3RhbnRpYXRlV2FzbVwiXT0oaW5mbyxyZWNlaXZlSW5zdGFuY2UpPT57dmFyIG1vZHVsZT1Nb2R1bGVbXCJ3YXNtTW9kdWxlXCJdO01vZHVsZVtcIndhc21Nb2R1bGVcIl09bnVsbDt2YXIgaW5zdGFuY2U9bmV3IFdlYkFzc2VtYmx5Lkluc3RhbmNlKG1vZHVsZSxpbmZvKTtyZXR1cm4gcmVjZWl2ZUluc3RhbmNlKGluc3RhbmNlKX07c2VsZi5vbnVuaGFuZGxlZHJlamVjdGlvbj1lPT57dGhyb3cgZS5yZWFzb258fGV9O2Z1bmN0aW9uIGhhbmRsZU1lc3NhZ2UoZSl7dHJ5e2lmKGUuZGF0YS5jbWQ9PT1cImxvYWRcIil7bGV0IG1lc3NhZ2VRdWV1ZT1bXTtzZWxmLm9ubWVzc2FnZT1lPT5tZXNzYWdlUXVldWUucHVzaChlKTtzZWxmLnN0YXJ0V29ya2VyPWluc3RhbmNlPT57TW9kdWxlPWluc3RhbmNlO3Bvc3RNZXNzYWdlKHtcImNtZFwiOlwibG9hZGVkXCJ9KTtmb3IobGV0IG1zZyBvZiBtZXNzYWdlUXVldWUpe2hhbmRsZU1lc3NhZ2UobXNnKX1zZWxmLm9ubWVzc2FnZT1oYW5kbGVNZXNzYWdlfTtNb2R1bGVbXCJ3YXNtTW9kdWxlXCJdPWUuZGF0YS53YXNtTW9kdWxlO2Zvcihjb25zdCBoYW5kbGVyIG9mIGUuZGF0YS5oYW5kbGVycyl7TW9kdWxlW2hhbmRsZXJdPSguLi5hcmdzKT0+e3Bvc3RNZXNzYWdlKHtjbWQ6XCJjYWxsSGFuZGxlclwiLGhhbmRsZXI6aGFuZGxlcixhcmdzOmFyZ3N9KX19TW9kdWxlW1wid2FzbU1lbW9yeVwiXT1lLmRhdGEud2FzbU1lbW9yeTtNb2R1bGVbXCJidWZmZXJcIl09TW9kdWxlW1wid2FzbU1lbW9yeVwiXS5idWZmZXI7TW9kdWxlW1wiRU5WSVJPTk1FTlRfSVNfUFRIUkVBRFwiXT10cnVlO2lmKHR5cGVvZiBlLmRhdGEudXJsT3JCbG9iPT1cInN0cmluZ1wiKXtpbXBvcnRTY3JpcHRzKGUuZGF0YS51cmxPckJsb2IpfWVsc2V7dmFyIG9iamVjdFVybD1VUkwuY3JlYXRlT2JqZWN0VVJMKGUuZGF0YS51cmxPckJsb2IpO2ltcG9ydFNjcmlwdHMob2JqZWN0VXJsKTtVUkwucmV2b2tlT2JqZWN0VVJMKG9iamVjdFVybCl9b3J0V2FzbVRocmVhZGVkKE1vZHVsZSl9ZWxzZSBpZihlLmRhdGEuY21kPT09XCJydW5cIil7TW9kdWxlW1wiX19lbXNjcmlwdGVuX3RocmVhZF9pbml0XCJdKGUuZGF0YS5wdGhyZWFkX3B0ciwvKmlzX21haW49Ki8wLC8qaXNfcnVudGltZT0qLzAsLypjYW5fYmxvY2s9Ki8xKTtNb2R1bGVbXCJfX2Vtc2NyaXB0ZW5fdGhyZWFkX21haWxib3hfYXdhaXRcIl0oZS5kYXRhLnB0aHJlYWRfcHRyKTtNb2R1bGVbXCJlc3RhYmxpc2hTdGFja1NwYWNlXCJdKCk7TW9kdWxlW1wiUFRocmVhZFwiXS5yZWNlaXZlT2JqZWN0VHJhbnNmZXIoZS5kYXRhKTtNb2R1bGVbXCJQVGhyZWFkXCJdLnRocmVhZEluaXRUTFMoKTtpZighaW5pdGlhbGl6ZWRKUyl7aW5pdGlhbGl6ZWRKUz10cnVlfXRyeXtNb2R1bGVbXCJpbnZva2VFbnRyeVBvaW50XCJdKGUuZGF0YS5zdGFydF9yb3V0aW5lLGUuZGF0YS5hcmcpfWNhdGNoKGV4KXtpZihleCE9XCJ1bndpbmRcIil7dGhyb3cgZXh9fX1lbHNlIGlmKGUuZGF0YS5jbWQ9PT1cImNhbmNlbFwiKXtpZihNb2R1bGVbXCJfcHRocmVhZF9zZWxmXCJdKCkpe01vZHVsZVtcIl9fZW1zY3JpcHRlbl90aHJlYWRfZXhpdFwiXSgtMSl9fWVsc2UgaWYoZS5kYXRhLnRhcmdldD09PVwic2V0aW1tZWRpYXRlXCIpe31lbHNlIGlmKGUuZGF0YS5jbWQ9PT1cImNoZWNrTWFpbGJveFwiKXtpZihpbml0aWFsaXplZEpTKXtNb2R1bGVbXCJjaGVja01haWxib3hcIl0oKX19ZWxzZSBpZihlLmRhdGEuY21kKXtlcnIoYHdvcmtlci5qcyByZWNlaXZlZCB1bmtub3duIGNvbW1hbmQgJHtlLmRhdGEuY21kfWApO2VycihlLmRhdGEpfX1jYXRjaChleCl7TW9kdWxlW1wiX19lbXNjcmlwdGVuX3RocmVhZF9jcmFzaGVkXCJdPy4oKTt0aHJvdyBleH19c2VsZi5vbm1lc3NhZ2U9aGFuZGxlTWVzc2FnZTtcXG4nO1xuICAgIH1cbiAgfSk7XG5cbiAgLy8gbm9kZWpzLWlnbm9yZTpub2RlOnBhdGhcbiAgdmFyIGpvaW4gPSB2b2lkIDA7XG5cbiAgLy8gd2ViL2xpYi93YXNtL3dhc20tZmFjdG9yeS50c1xuICB2YXIgb3J0V2FzbUZhY3Rvcnk7XG4gIGlmICh0cnVlKSB7XG4gICAgb3J0V2FzbUZhY3RvcnkgPSByZXF1aXJlX29ydF90cmFpbmluZ193YXNtX3NpbWQoKTtcbiAgfSBlbHNlIHtcbiAgICBvcnRXYXNtRmFjdG9yeSA9IHRydWUgPyBudWxsIDogbnVsbDtcbiAgfVxuICB2YXIgb3J0V2FzbUZhY3RvcnlUaHJlYWRlZCA9IHRydWUgPyB0cnVlID8gcmVxdWlyZV9vcnRfd2FzbV90aHJlYWRlZCgpIDogbnVsbCA6IG9ydFdhc21GYWN0b3J5O1xuICB2YXIgd2FzbTtcbiAgdmFyIGluaXRpYWxpemVkID0gZmFsc2U7XG4gIHZhciBpbml0aWFsaXppbmcgPSBmYWxzZTtcbiAgdmFyIGFib3J0ZWQgPSBmYWxzZTtcbiAgdmFyIGlzTXVsdGlUaHJlYWRTdXBwb3J0ZWQgPSAobnVtVGhyZWFkcykgPT4ge1xuICAgIGlmIChudW1UaHJlYWRzID09PSAxKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgU2hhcmVkQXJyYXlCdWZmZXIgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIGlmICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiAmJiAhc2VsZi5jcm9zc09yaWdpbklzb2xhdGVkKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICBcImVudi53YXNtLm51bVRocmVhZHMgaXMgc2V0IHRvIFwiICsgbnVtVGhyZWFkcyArIFwiLCBidXQgdGhpcyB3aWxsIG5vdCB3b3JrIHVubGVzcyB5b3UgZW5hYmxlIGNyb3NzT3JpZ2luSXNvbGF0ZWQgbW9kZS4gU2VlIGh0dHBzOi8vd2ViLmRldi9jcm9zcy1vcmlnaW4taXNvbGF0aW9uLWd1aWRlLyBmb3IgbW9yZSBpbmZvLlwiXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgcHJvY2VzcyAhPT0gXCJ1bmRlZmluZWRcIiAmJiBwcm9jZXNzLnZlcnNpb25zICYmIHByb2Nlc3MudmVyc2lvbnMubm9kZSkge1xuICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICBcImVudi53YXNtLm51bVRocmVhZHMgaXMgc2V0IHRvIFwiICsgbnVtVGhyZWFkcyArIFwiLCBob3dldmVyLCBjdXJyZW50bHkgb25ueHJ1bnRpbWUtd2ViIGRvZXMgbm90IHN1cHBvcnQgbXVsdGktdGhyZWFkcyBpbiBOb2RlLmpzLiBQbGVhc2UgY29uc2lkZXIgdXNpbmcgb25ueHJ1bnRpbWUtbm9kZSBmb3IgcGVyZm9ybWFuY2UgY3JpdGljYWwgc2NlbmFyaW9zLlwiXG4gICAgICApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgaWYgKHR5cGVvZiBNZXNzYWdlQ2hhbm5lbCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBuZXcgTWVzc2FnZUNoYW5uZWwoKS5wb3J0MS5wb3N0TWVzc2FnZShuZXcgU2hhcmVkQXJyYXlCdWZmZXIoMSkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIFdlYkFzc2VtYmx5LnZhbGlkYXRlKG5ldyBVaW50OEFycmF5KFtcbiAgICAgICAgMCxcbiAgICAgICAgOTcsXG4gICAgICAgIDExNSxcbiAgICAgICAgMTA5LFxuICAgICAgICAxLFxuICAgICAgICAwLFxuICAgICAgICAwLFxuICAgICAgICAwLFxuICAgICAgICAxLFxuICAgICAgICA0LFxuICAgICAgICAxLFxuICAgICAgICA5NixcbiAgICAgICAgMCxcbiAgICAgICAgMCxcbiAgICAgICAgMyxcbiAgICAgICAgMixcbiAgICAgICAgMSxcbiAgICAgICAgMCxcbiAgICAgICAgNSxcbiAgICAgICAgNCxcbiAgICAgICAgMSxcbiAgICAgICAgMyxcbiAgICAgICAgMSxcbiAgICAgICAgMSxcbiAgICAgICAgMTAsXG4gICAgICAgIDExLFxuICAgICAgICAxLFxuICAgICAgICA5LFxuICAgICAgICAwLFxuICAgICAgICA2NSxcbiAgICAgICAgMCxcbiAgICAgICAgMjU0LFxuICAgICAgICAxNixcbiAgICAgICAgMixcbiAgICAgICAgMCxcbiAgICAgICAgMjYsXG4gICAgICAgIDExXG4gICAgICBdKSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfTtcbiAgdmFyIGlzU2ltZFN1cHBvcnRlZCA9ICgpID0+IHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIFdlYkFzc2VtYmx5LnZhbGlkYXRlKG5ldyBVaW50OEFycmF5KFtcbiAgICAgICAgMCxcbiAgICAgICAgOTcsXG4gICAgICAgIDExNSxcbiAgICAgICAgMTA5LFxuICAgICAgICAxLFxuICAgICAgICAwLFxuICAgICAgICAwLFxuICAgICAgICAwLFxuICAgICAgICAxLFxuICAgICAgICA0LFxuICAgICAgICAxLFxuICAgICAgICA5NixcbiAgICAgICAgMCxcbiAgICAgICAgMCxcbiAgICAgICAgMyxcbiAgICAgICAgMixcbiAgICAgICAgMSxcbiAgICAgICAgMCxcbiAgICAgICAgMTAsXG4gICAgICAgIDMwLFxuICAgICAgICAxLFxuICAgICAgICAyOCxcbiAgICAgICAgMCxcbiAgICAgICAgNjUsXG4gICAgICAgIDAsXG4gICAgICAgIDI1MyxcbiAgICAgICAgMTUsXG4gICAgICAgIDI1MyxcbiAgICAgICAgMTIsXG4gICAgICAgIDAsXG4gICAgICAgIDAsXG4gICAgICAgIDAsXG4gICAgICAgIDAsXG4gICAgICAgIDAsXG4gICAgICAgIDAsXG4gICAgICAgIDAsXG4gICAgICAgIDAsXG4gICAgICAgIDAsXG4gICAgICAgIDAsXG4gICAgICAgIDAsXG4gICAgICAgIDAsXG4gICAgICAgIDAsXG4gICAgICAgIDAsXG4gICAgICAgIDAsXG4gICAgICAgIDAsXG4gICAgICAgIDI1MyxcbiAgICAgICAgMTg2LFxuICAgICAgICAxLFxuICAgICAgICAyNixcbiAgICAgICAgMTFcbiAgICAgIF0pKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9O1xuICB2YXIgZ2V0V2FzbUZpbGVOYW1lID0gKHVzZVNpbWQsIHVzZVRocmVhZHMpID0+IHtcbiAgICBpZiAodXNlU2ltZCkge1xuICAgICAgaWYgKHRydWUpIHtcbiAgICAgICAgcmV0dXJuIFwib3J0LXRyYWluaW5nLXdhc20tc2ltZC53YXNtXCI7XG4gICAgICB9XG4gICAgICByZXR1cm4gdXNlVGhyZWFkcyA/IFwib3J0LXdhc20tc2ltZC10aHJlYWRlZC53YXNtXCIgOiBcIm9ydC13YXNtLXNpbWQud2FzbVwiO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdXNlVGhyZWFkcyA/IFwib3J0LXdhc20tdGhyZWFkZWQud2FzbVwiIDogXCJvcnQtd2FzbS53YXNtXCI7XG4gICAgfVxuICB9O1xuICB2YXIgaW5pdGlhbGl6ZVdlYkFzc2VtYmx5ID0gYXN5bmMgKGZsYWdzKSA9PiB7XG4gICAgaWYgKGluaXRpYWxpemVkKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxuICAgIGlmIChpbml0aWFsaXppbmcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIm11bHRpcGxlIGNhbGxzIHRvICdpbml0aWFsaXplV2ViQXNzZW1ibHkoKScgZGV0ZWN0ZWQuXCIpO1xuICAgIH1cbiAgICBpZiAoYWJvcnRlZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwicHJldmlvdXMgY2FsbCB0byAnaW5pdGlhbGl6ZVdlYkFzc2VtYmx5KCknIGZhaWxlZC5cIik7XG4gICAgfVxuICAgIGluaXRpYWxpemluZyA9IHRydWU7XG4gICAgY29uc3QgdGltZW91dCA9IGZsYWdzLmluaXRUaW1lb3V0O1xuICAgIGNvbnN0IG51bVRocmVhZHMgPSBmbGFncy5udW1UaHJlYWRzO1xuICAgIGNvbnN0IHNpbWQgPSBmbGFncy5zaW1kO1xuICAgIGNvbnN0IHVzZVRocmVhZHMgPSBpc011bHRpVGhyZWFkU3VwcG9ydGVkKG51bVRocmVhZHMpO1xuICAgIGNvbnN0IHVzZVNpbWQgPSBzaW1kICYmIGlzU2ltZFN1cHBvcnRlZCgpO1xuICAgIGNvbnN0IHdhc21QYXRocyA9IGZsYWdzLndhc21QYXRocztcbiAgICBjb25zdCB3YXNtUHJlZml4T3ZlcnJpZGUgPSB0eXBlb2Ygd2FzbVBhdGhzID09PSBcInN0cmluZ1wiID8gd2FzbVBhdGhzIDogdm9pZCAwO1xuICAgIGNvbnN0IHdhc21GaWxlTmFtZSA9IGdldFdhc21GaWxlTmFtZSh1c2VTaW1kLCB1c2VUaHJlYWRzKTtcbiAgICBjb25zdCB3YXNtUGF0aE92ZXJyaWRlID0gdHlwZW9mIHdhc21QYXRocyA9PT0gXCJvYmplY3RcIiA/IHdhc21QYXRoc1t3YXNtRmlsZU5hbWVdIDogdm9pZCAwO1xuICAgIGxldCBpc1RpbWVvdXQgPSBmYWxzZTtcbiAgICBjb25zdCB0YXNrcyA9IFtdO1xuICAgIGlmICh0aW1lb3V0ID4gMCkge1xuICAgICAgdGFza3MucHVzaChuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICBpc1RpbWVvdXQgPSB0cnVlO1xuICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgfSwgdGltZW91dCk7XG4gICAgICB9KSk7XG4gICAgfVxuICAgIHRhc2tzLnB1c2gobmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgY29uc3QgZmFjdG9yeSA9IHVzZVRocmVhZHMgPyBvcnRXYXNtRmFjdG9yeVRocmVhZGVkIDogb3J0V2FzbUZhY3Rvcnk7XG4gICAgICBjb25zdCBjb25maWcgPSB7XG4gICAgICAgIGxvY2F0ZUZpbGU6IChmaWxlTmFtZSwgc2NyaXB0RGlyZWN0b3J5KSA9PiB7XG4gICAgICAgICAgaWYgKHVzZVRocmVhZHMgJiYgZmlsZU5hbWUuZW5kc1dpdGgoXCIud29ya2VyLmpzXCIpICYmIHR5cGVvZiBCbG9iICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICByZXR1cm4gVVJMLmNyZWF0ZU9iamVjdFVSTChuZXcgQmxvYihcbiAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgIC8vIFRoaXMgcmVxdWlyZSgpIGZ1bmN0aW9uIGlzIGhhbmRsZWQgYnkgZXNidWlsZCBwbHVnaW4gdG8gbG9hZCBmaWxlIGNvbnRlbnQgYXMgc3RyaW5nLlxuICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tcmVxdWlyZS1pbXBvcnRzXG4gICAgICAgICAgICAgICAgcmVxdWlyZV9vcnRfd2FzbV90aHJlYWRlZF93b3JrZXIoKVxuICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICB7IHR5cGU6IFwidGV4dC9qYXZhc2NyaXB0XCIgfVxuICAgICAgICAgICAgKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChmaWxlTmFtZS5lbmRzV2l0aChcIi53YXNtXCIpKSB7XG4gICAgICAgICAgICBpZiAod2FzbVBhdGhPdmVycmlkZSkge1xuICAgICAgICAgICAgICByZXR1cm4gd2FzbVBhdGhPdmVycmlkZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHByZWZpeCA9IHdhc21QcmVmaXhPdmVycmlkZSA/PyBzY3JpcHREaXJlY3Rvcnk7XG4gICAgICAgICAgICBpZiAoZmFsc2UpIHtcbiAgICAgICAgICAgICAgaWYgKHdhc21GaWxlTmFtZSA9PT0gXCJvcnQtd2FzbS1zaW1kLndhc21cIikge1xuICAgICAgICAgICAgICAgIHJldHVybiBwcmVmaXggKyBcIm9ydC13YXNtLXNpbWQuanNlcC53YXNtXCI7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAod2FzbUZpbGVOYW1lID09PSBcIm9ydC13YXNtLXNpbWQtdGhyZWFkZWQud2FzbVwiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHByZWZpeCArIFwib3J0LXdhc20tc2ltZC10aHJlYWRlZC5qc2VwLndhc21cIjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHByZWZpeCArIHdhc21GaWxlTmFtZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHNjcmlwdERpcmVjdG9yeSArIGZpbGVOYW1lO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgaWYgKHVzZVRocmVhZHMpIHtcbiAgICAgICAgY29uZmlnLm51bVRocmVhZHMgPSBudW1UaHJlYWRzO1xuICAgICAgICBpZiAodHlwZW9mIEJsb2IgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICBjb25maWcubWFpblNjcmlwdFVybE9yQmxvYiA9IGpvaW4oX19kaXJuYW1lLCBcIm9ydC13YXNtLXRocmVhZGVkLmpzXCIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnN0IHNjcmlwdFNvdXJjZUNvZGUgPSBgdmFyIG9ydFdhc21UaHJlYWRlZD0ke2ZhY3RvcnkudG9TdHJpbmcoKX07YDtcbiAgICAgICAgICBjb25maWcubWFpblNjcmlwdFVybE9yQmxvYiA9IG5ldyBCbG9iKFtzY3JpcHRTb3VyY2VDb2RlXSwgeyB0eXBlOiBcInRleHQvamF2YXNjcmlwdFwiIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBmYWN0b3J5KGNvbmZpZykudGhlbihcbiAgICAgICAgLy8gd2FzbSBtb2R1bGUgaW5pdGlhbGl6ZWQgc3VjY2Vzc2Z1bGx5XG4gICAgICAgIChtb2R1bGUpID0+IHtcbiAgICAgICAgICBpbml0aWFsaXppbmcgPSBmYWxzZTtcbiAgICAgICAgICBpbml0aWFsaXplZCA9IHRydWU7XG4gICAgICAgICAgd2FzbSA9IG1vZHVsZTtcbiAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgIH0sXG4gICAgICAgIC8vIHdhc20gbW9kdWxlIGZhaWxlZCB0byBpbml0aWFsaXplXG4gICAgICAgICh3aGF0KSA9PiB7XG4gICAgICAgICAgaW5pdGlhbGl6aW5nID0gZmFsc2U7XG4gICAgICAgICAgYWJvcnRlZCA9IHRydWU7XG4gICAgICAgICAgcmVqZWN0KHdoYXQpO1xuICAgICAgICB9XG4gICAgICApO1xuICAgIH0pKTtcbiAgICBhd2FpdCBQcm9taXNlLnJhY2UodGFza3MpO1xuICAgIGlmIChpc1RpbWVvdXQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgV2ViQXNzZW1ibHkgYmFja2VuZCBpbml0aWFsaXppbmcgZmFpbGVkIGR1ZSB0byB0aW1lb3V0OiAke3RpbWVvdXR9bXNgKTtcbiAgICB9XG4gIH07XG4gIHZhciBnZXRJbnN0YW5jZSA9ICgpID0+IHtcbiAgICBpZiAoaW5pdGlhbGl6ZWQgJiYgd2FzbSkge1xuICAgICAgcmV0dXJuIHdhc207XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihcIldlYkFzc2VtYmx5IGlzIG5vdCBpbml0aWFsaXplZCB5ZXQuXCIpO1xuICB9O1xuXG4gIC8vIHdlYi9saWIvd2FzbS93YXNtLXV0aWxzLnRzXG4gIHZhciBhbGxvY1dhc21TdHJpbmcgPSAoZGF0YSwgYWxsb2NzKSA9PiB7XG4gICAgY29uc3Qgd2FzbTIgPSBnZXRJbnN0YW5jZSgpO1xuICAgIGNvbnN0IGRhdGFMZW5ndGggPSB3YXNtMi5sZW5ndGhCeXRlc1VURjgoZGF0YSkgKyAxO1xuICAgIGNvbnN0IGRhdGFPZmZzZXQgPSB3YXNtMi5fbWFsbG9jKGRhdGFMZW5ndGgpO1xuICAgIHdhc20yLnN0cmluZ1RvVVRGOChkYXRhLCBkYXRhT2Zmc2V0LCBkYXRhTGVuZ3RoKTtcbiAgICBhbGxvY3MucHVzaChkYXRhT2Zmc2V0KTtcbiAgICByZXR1cm4gZGF0YU9mZnNldDtcbiAgfTtcbiAgdmFyIGl0ZXJhdGVFeHRyYU9wdGlvbnMgPSAob3B0aW9ucywgcHJlZml4LCBzZWVuLCBoYW5kbGVyKSA9PiB7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zID09IFwib2JqZWN0XCIgJiYgb3B0aW9ucyAhPT0gbnVsbCkge1xuICAgICAgaWYgKHNlZW4uaGFzKG9wdGlvbnMpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNpcmN1bGFyIHJlZmVyZW5jZSBpbiBvcHRpb25zXCIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2Vlbi5hZGQob3B0aW9ucyk7XG4gICAgICB9XG4gICAgfVxuICAgIE9iamVjdC5lbnRyaWVzKG9wdGlvbnMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgY29uc3QgbmFtZSA9IHByZWZpeCA/IHByZWZpeCArIGtleSA6IGtleTtcbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgaXRlcmF0ZUV4dHJhT3B0aW9ucyh2YWx1ZSwgbmFtZSArIFwiLlwiLCBzZWVuLCBoYW5kbGVyKTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiIHx8IHR5cGVvZiB2YWx1ZSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICBoYW5kbGVyKG5hbWUsIHZhbHVlLnRvU3RyaW5nKCkpO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09IFwiYm9vbGVhblwiKSB7XG4gICAgICAgIGhhbmRsZXIobmFtZSwgdmFsdWUgPyBcIjFcIiA6IFwiMFwiKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgQ2FuJ3QgaGFuZGxlIGV4dHJhIGNvbmZpZyB0eXBlOiAke3R5cGVvZiB2YWx1ZX1gKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcbiAgdmFyIGNoZWNrTGFzdEVycm9yID0gKG1lc3NhZ2UpID0+IHtcbiAgICBjb25zdCB3YXNtMiA9IGdldEluc3RhbmNlKCk7XG4gICAgY29uc3Qgc3RhY2sgPSB3YXNtMi5zdGFja1NhdmUoKTtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcGFyYW1zT2Zmc2V0ID0gd2FzbTIuc3RhY2tBbGxvYyg4KTtcbiAgICAgIHdhc20yLl9PcnRHZXRMYXN0RXJyb3IocGFyYW1zT2Zmc2V0LCBwYXJhbXNPZmZzZXQgKyA0KTtcbiAgICAgIGNvbnN0IGVycm9yQ29kZSA9IHdhc20yLkhFQVAzMltwYXJhbXNPZmZzZXQgLyA0XTtcbiAgICAgIGNvbnN0IGVycm9yTWVzc2FnZVBvaW50ZXIgPSB3YXNtMi5IRUFQVTMyW3BhcmFtc09mZnNldCAvIDQgKyAxXTtcbiAgICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9IGVycm9yTWVzc2FnZVBvaW50ZXIgPyB3YXNtMi5VVEY4VG9TdHJpbmcoZXJyb3JNZXNzYWdlUG9pbnRlcikgOiBcIlwiO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGAke21lc3NhZ2V9IEVSUk9SX0NPREU6ICR7ZXJyb3JDb2RlfSwgRVJST1JfTUVTU0FHRTogJHtlcnJvck1lc3NhZ2V9YCk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHdhc20yLnN0YWNrUmVzdG9yZShzdGFjayk7XG4gICAgfVxuICB9O1xuXG4gIC8vIHdlYi9saWIvd2FzbS9ydW4tb3B0aW9ucy50c1xuICB2YXIgc2V0UnVuT3B0aW9ucyA9IChvcHRpb25zKSA9PiB7XG4gICAgY29uc3Qgd2FzbTIgPSBnZXRJbnN0YW5jZSgpO1xuICAgIGxldCBydW5PcHRpb25zSGFuZGxlID0gMDtcbiAgICBjb25zdCBhbGxvY3MgPSBbXTtcbiAgICBjb25zdCBydW5PcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICB0cnkge1xuICAgICAgaWYgKG9wdGlvbnM/LmxvZ1NldmVyaXR5TGV2ZWwgPT09IHZvaWQgMCkge1xuICAgICAgICBydW5PcHRpb25zLmxvZ1NldmVyaXR5TGV2ZWwgPSAyO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygb3B0aW9ucy5sb2dTZXZlcml0eUxldmVsICE9PSBcIm51bWJlclwiIHx8ICFOdW1iZXIuaXNJbnRlZ2VyKG9wdGlvbnMubG9nU2V2ZXJpdHlMZXZlbCkgfHwgb3B0aW9ucy5sb2dTZXZlcml0eUxldmVsIDwgMCB8fCBvcHRpb25zLmxvZ1NldmVyaXR5TGV2ZWwgPiA0KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgbG9nIHNlcnZlcml0eSBsZXZlbCBpcyBub3QgdmFsaWQ6ICR7b3B0aW9ucy5sb2dTZXZlcml0eUxldmVsfWApO1xuICAgICAgfVxuICAgICAgaWYgKG9wdGlvbnM/LmxvZ1ZlcmJvc2l0eUxldmVsID09PSB2b2lkIDApIHtcbiAgICAgICAgcnVuT3B0aW9ucy5sb2dWZXJib3NpdHlMZXZlbCA9IDA7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBvcHRpb25zLmxvZ1ZlcmJvc2l0eUxldmVsICE9PSBcIm51bWJlclwiIHx8ICFOdW1iZXIuaXNJbnRlZ2VyKG9wdGlvbnMubG9nVmVyYm9zaXR5TGV2ZWwpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgbG9nIHZlcmJvc2l0eSBsZXZlbCBpcyBub3QgdmFsaWQ6ICR7b3B0aW9ucy5sb2dWZXJib3NpdHlMZXZlbH1gKTtcbiAgICAgIH1cbiAgICAgIGlmIChvcHRpb25zPy50ZXJtaW5hdGUgPT09IHZvaWQgMCkge1xuICAgICAgICBydW5PcHRpb25zLnRlcm1pbmF0ZSA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgbGV0IHRhZ0RhdGFPZmZzZXQgPSAwO1xuICAgICAgaWYgKG9wdGlvbnM/LnRhZyAhPT0gdm9pZCAwKSB7XG4gICAgICAgIHRhZ0RhdGFPZmZzZXQgPSBhbGxvY1dhc21TdHJpbmcob3B0aW9ucy50YWcsIGFsbG9jcyk7XG4gICAgICB9XG4gICAgICBydW5PcHRpb25zSGFuZGxlID0gd2FzbTIuX09ydENyZWF0ZVJ1bk9wdGlvbnMoXG4gICAgICAgIHJ1bk9wdGlvbnMubG9nU2V2ZXJpdHlMZXZlbCxcbiAgICAgICAgcnVuT3B0aW9ucy5sb2dWZXJib3NpdHlMZXZlbCxcbiAgICAgICAgISFydW5PcHRpb25zLnRlcm1pbmF0ZSxcbiAgICAgICAgdGFnRGF0YU9mZnNldFxuICAgICAgKTtcbiAgICAgIGlmIChydW5PcHRpb25zSGFuZGxlID09PSAwKSB7XG4gICAgICAgIGNoZWNrTGFzdEVycm9yKFwiQ2FuJ3QgY3JlYXRlIHJ1biBvcHRpb25zLlwiKTtcbiAgICAgIH1cbiAgICAgIGlmIChvcHRpb25zPy5leHRyYSAhPT0gdm9pZCAwKSB7XG4gICAgICAgIGl0ZXJhdGVFeHRyYU9wdGlvbnMob3B0aW9ucy5leHRyYSwgXCJcIiwgLyogQF9fUFVSRV9fICovIG5ldyBXZWFrU2V0KCksIChrZXksIHZhbHVlKSA9PiB7XG4gICAgICAgICAgY29uc3Qga2V5RGF0YU9mZnNldCA9IGFsbG9jV2FzbVN0cmluZyhrZXksIGFsbG9jcyk7XG4gICAgICAgICAgY29uc3QgdmFsdWVEYXRhT2Zmc2V0ID0gYWxsb2NXYXNtU3RyaW5nKHZhbHVlLCBhbGxvY3MpO1xuICAgICAgICAgIGlmICh3YXNtMi5fT3J0QWRkUnVuQ29uZmlnRW50cnkocnVuT3B0aW9uc0hhbmRsZSwga2V5RGF0YU9mZnNldCwgdmFsdWVEYXRhT2Zmc2V0KSAhPT0gMCkge1xuICAgICAgICAgICAgY2hlY2tMYXN0RXJyb3IoYENhbid0IHNldCBhIHJ1biBjb25maWcgZW50cnk6ICR7a2V5fSAtICR7dmFsdWV9LmApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gW3J1bk9wdGlvbnNIYW5kbGUsIGFsbG9jc107XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaWYgKHJ1bk9wdGlvbnNIYW5kbGUgIT09IDApIHtcbiAgICAgICAgd2FzbTIuX09ydFJlbGVhc2VSdW5PcHRpb25zKHJ1bk9wdGlvbnNIYW5kbGUpO1xuICAgICAgfVxuICAgICAgYWxsb2NzLmZvckVhY2goKGFsbG9jKSA9PiB3YXNtMi5fZnJlZShhbGxvYykpO1xuICAgICAgdGhyb3cgZTtcbiAgICB9XG4gIH07XG5cbiAgLy8gd2ViL2xpYi93YXNtL3Nlc3Npb24tb3B0aW9ucy50c1xuICB2YXIgZ2V0R3JhcGhPcHRpbXphdGlvbkxldmVsID0gKGdyYXBoT3B0aW1pemF0aW9uTGV2ZWwpID0+IHtcbiAgICBzd2l0Y2ggKGdyYXBoT3B0aW1pemF0aW9uTGV2ZWwpIHtcbiAgICAgIGNhc2UgXCJkaXNhYmxlZFwiOlxuICAgICAgICByZXR1cm4gMDtcbiAgICAgIGNhc2UgXCJiYXNpY1wiOlxuICAgICAgICByZXR1cm4gMTtcbiAgICAgIGNhc2UgXCJleHRlbmRlZFwiOlxuICAgICAgICByZXR1cm4gMjtcbiAgICAgIGNhc2UgXCJhbGxcIjpcbiAgICAgICAgcmV0dXJuIDk5O1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGB1bnN1cHBvcnRlZCBncmFwaCBvcHRpbWl6YXRpb24gbGV2ZWw6ICR7Z3JhcGhPcHRpbWl6YXRpb25MZXZlbH1gKTtcbiAgICB9XG4gIH07XG4gIHZhciBnZXRFeGVjdXRpb25Nb2RlID0gKGV4ZWN1dGlvbk1vZGUpID0+IHtcbiAgICBzd2l0Y2ggKGV4ZWN1dGlvbk1vZGUpIHtcbiAgICAgIGNhc2UgXCJzZXF1ZW50aWFsXCI6XG4gICAgICAgIHJldHVybiAwO1xuICAgICAgY2FzZSBcInBhcmFsbGVsXCI6XG4gICAgICAgIHJldHVybiAxO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGB1bnN1cHBvcnRlZCBleGVjdXRpb24gbW9kZTogJHtleGVjdXRpb25Nb2RlfWApO1xuICAgIH1cbiAgfTtcbiAgdmFyIGFwcGVuZERlZmF1bHRPcHRpb25zID0gKG9wdGlvbnMpID0+IHtcbiAgICBpZiAoIW9wdGlvbnMuZXh0cmEpIHtcbiAgICAgIG9wdGlvbnMuZXh0cmEgPSB7fTtcbiAgICB9XG4gICAgaWYgKCFvcHRpb25zLmV4dHJhLnNlc3Npb24pIHtcbiAgICAgIG9wdGlvbnMuZXh0cmEuc2Vzc2lvbiA9IHt9O1xuICAgIH1cbiAgICBjb25zdCBzZXNzaW9uID0gb3B0aW9ucy5leHRyYS5zZXNzaW9uO1xuICAgIGlmICghc2Vzc2lvbi51c2Vfb3J0X21vZGVsX2J5dGVzX2RpcmVjdGx5KSB7XG4gICAgICBzZXNzaW9uLnVzZV9vcnRfbW9kZWxfYnl0ZXNfZGlyZWN0bHkgPSBcIjFcIjtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMuZXhlY3V0aW9uUHJvdmlkZXJzICYmIG9wdGlvbnMuZXhlY3V0aW9uUHJvdmlkZXJzLnNvbWUoKGVwKSA9PiAodHlwZW9mIGVwID09PSBcInN0cmluZ1wiID8gZXAgOiBlcC5uYW1lKSA9PT0gXCJ3ZWJncHVcIikpIHtcbiAgICAgIG9wdGlvbnMuZW5hYmxlTWVtUGF0dGVybiA9IGZhbHNlO1xuICAgIH1cbiAgfTtcbiAgdmFyIHNldEV4ZWN1dGlvblByb3ZpZGVycyA9IChzZXNzaW9uT3B0aW9uc0hhbmRsZSwgZXhlY3V0aW9uUHJvdmlkZXJzLCBhbGxvY3MpID0+IHtcbiAgICBmb3IgKGNvbnN0IGVwIG9mIGV4ZWN1dGlvblByb3ZpZGVycykge1xuICAgICAgbGV0IGVwTmFtZSA9IHR5cGVvZiBlcCA9PT0gXCJzdHJpbmdcIiA/IGVwIDogZXAubmFtZTtcbiAgICAgIHN3aXRjaCAoZXBOYW1lKSB7XG4gICAgICAgIGNhc2UgXCJ3ZWJublwiOlxuICAgICAgICAgIGVwTmFtZSA9IFwiV0VCTk5cIjtcbiAgICAgICAgICBpZiAodHlwZW9mIGVwICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICBjb25zdCB3ZWJubk9wdGlvbnMgPSBlcDtcbiAgICAgICAgICAgIGlmICh3ZWJubk9wdGlvbnM/LmRldmljZVR5cGUpIHtcbiAgICAgICAgICAgICAgY29uc3Qga2V5RGF0YU9mZnNldCA9IGFsbG9jV2FzbVN0cmluZyhcImRldmljZVR5cGVcIiwgYWxsb2NzKTtcbiAgICAgICAgICAgICAgY29uc3QgdmFsdWVEYXRhT2Zmc2V0ID0gYWxsb2NXYXNtU3RyaW5nKHdlYm5uT3B0aW9ucy5kZXZpY2VUeXBlLCBhbGxvY3MpO1xuICAgICAgICAgICAgICBpZiAoZ2V0SW5zdGFuY2UoKS5fT3J0QWRkU2Vzc2lvbkNvbmZpZ0VudHJ5KHNlc3Npb25PcHRpb25zSGFuZGxlLCBrZXlEYXRhT2Zmc2V0LCB2YWx1ZURhdGFPZmZzZXQpICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgY2hlY2tMYXN0RXJyb3IoYENhbid0IHNldCBhIHNlc3Npb24gY29uZmlnIGVudHJ5OiAnZGV2aWNlVHlwZScgLSAke3dlYm5uT3B0aW9ucy5kZXZpY2VUeXBlfS5gKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHdlYm5uT3B0aW9ucz8ubnVtVGhyZWFkcykge1xuICAgICAgICAgICAgICBsZXQgbnVtVGhyZWFkcyA9IHdlYm5uT3B0aW9ucy5udW1UaHJlYWRzO1xuICAgICAgICAgICAgICBpZiAodHlwZW9mIG51bVRocmVhZHMgIT0gXCJudW1iZXJcIiB8fCAhTnVtYmVyLmlzSW50ZWdlcihudW1UaHJlYWRzKSB8fCBudW1UaHJlYWRzIDwgMCkge1xuICAgICAgICAgICAgICAgIG51bVRocmVhZHMgPSAwO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGNvbnN0IGtleURhdGFPZmZzZXQgPSBhbGxvY1dhc21TdHJpbmcoXCJudW1UaHJlYWRzXCIsIGFsbG9jcyk7XG4gICAgICAgICAgICAgIGNvbnN0IHZhbHVlRGF0YU9mZnNldCA9IGFsbG9jV2FzbVN0cmluZyhudW1UaHJlYWRzLnRvU3RyaW5nKCksIGFsbG9jcyk7XG4gICAgICAgICAgICAgIGlmIChnZXRJbnN0YW5jZSgpLl9PcnRBZGRTZXNzaW9uQ29uZmlnRW50cnkoc2Vzc2lvbk9wdGlvbnNIYW5kbGUsIGtleURhdGFPZmZzZXQsIHZhbHVlRGF0YU9mZnNldCkgIT09IDApIHtcbiAgICAgICAgICAgICAgICBjaGVja0xhc3RFcnJvcihgQ2FuJ3Qgc2V0IGEgc2Vzc2lvbiBjb25maWcgZW50cnk6ICdudW1UaHJlYWRzJyAtICR7d2Vibm5PcHRpb25zLm51bVRocmVhZHN9LmApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAod2Vibm5PcHRpb25zPy5wb3dlclByZWZlcmVuY2UpIHtcbiAgICAgICAgICAgICAgY29uc3Qga2V5RGF0YU9mZnNldCA9IGFsbG9jV2FzbVN0cmluZyhcInBvd2VyUHJlZmVyZW5jZVwiLCBhbGxvY3MpO1xuICAgICAgICAgICAgICBjb25zdCB2YWx1ZURhdGFPZmZzZXQgPSBhbGxvY1dhc21TdHJpbmcod2Vibm5PcHRpb25zLnBvd2VyUHJlZmVyZW5jZSwgYWxsb2NzKTtcbiAgICAgICAgICAgICAgaWYgKGdldEluc3RhbmNlKCkuX09ydEFkZFNlc3Npb25Db25maWdFbnRyeShzZXNzaW9uT3B0aW9uc0hhbmRsZSwga2V5RGF0YU9mZnNldCwgdmFsdWVEYXRhT2Zmc2V0KSAhPT0gMCkge1xuICAgICAgICAgICAgICAgIGNoZWNrTGFzdEVycm9yKFxuICAgICAgICAgICAgICAgICAgYENhbid0IHNldCBhIHNlc3Npb24gY29uZmlnIGVudHJ5OiAncG93ZXJQcmVmZXJlbmNlJyAtICR7d2Vibm5PcHRpb25zLnBvd2VyUHJlZmVyZW5jZX0uYFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJ3ZWJncHVcIjpcbiAgICAgICAgICBlcE5hbWUgPSBcIkpTXCI7XG4gICAgICAgICAgaWYgKHR5cGVvZiBlcCAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgY29uc3Qgd2ViZ3B1T3B0aW9ucyA9IGVwO1xuICAgICAgICAgICAgaWYgKHdlYmdwdU9wdGlvbnM/LnByZWZlcnJlZExheW91dCkge1xuICAgICAgICAgICAgICBpZiAod2ViZ3B1T3B0aW9ucy5wcmVmZXJyZWRMYXlvdXQgIT09IFwiTkNIV1wiICYmIHdlYmdwdU9wdGlvbnMucHJlZmVycmVkTGF5b3V0ICE9PSBcIk5IV0NcIikge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgcHJlZmVycmVkTGF5b3V0IG11c3QgYmUgZWl0aGVyICdOQ0hXJyBvciAnTkhXQyc6ICR7d2ViZ3B1T3B0aW9ucy5wcmVmZXJyZWRMYXlvdXR9YCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgY29uc3Qga2V5RGF0YU9mZnNldCA9IGFsbG9jV2FzbVN0cmluZyhcInByZWZlcnJlZExheW91dFwiLCBhbGxvY3MpO1xuICAgICAgICAgICAgICBjb25zdCB2YWx1ZURhdGFPZmZzZXQgPSBhbGxvY1dhc21TdHJpbmcod2ViZ3B1T3B0aW9ucy5wcmVmZXJyZWRMYXlvdXQsIGFsbG9jcyk7XG4gICAgICAgICAgICAgIGlmIChnZXRJbnN0YW5jZSgpLl9PcnRBZGRTZXNzaW9uQ29uZmlnRW50cnkoc2Vzc2lvbk9wdGlvbnNIYW5kbGUsIGtleURhdGFPZmZzZXQsIHZhbHVlRGF0YU9mZnNldCkgIT09IDApIHtcbiAgICAgICAgICAgICAgICBjaGVja0xhc3RFcnJvcihcbiAgICAgICAgICAgICAgICAgIGBDYW4ndCBzZXQgYSBzZXNzaW9uIGNvbmZpZyBlbnRyeTogJ3ByZWZlcnJlZExheW91dCcgLSAke3dlYmdwdU9wdGlvbnMucHJlZmVycmVkTGF5b3V0fS5gXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcIndhc21cIjpcbiAgICAgICAgY2FzZSBcImNwdVwiOlxuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgbm90IHN1cHBvcnRlZCBleGVjdXRpb24gcHJvdmlkZXI6ICR7ZXBOYW1lfWApO1xuICAgICAgfVxuICAgICAgY29uc3QgZXBOYW1lRGF0YU9mZnNldCA9IGFsbG9jV2FzbVN0cmluZyhlcE5hbWUsIGFsbG9jcyk7XG4gICAgICBpZiAoZ2V0SW5zdGFuY2UoKS5fT3J0QXBwZW5kRXhlY3V0aW9uUHJvdmlkZXIoc2Vzc2lvbk9wdGlvbnNIYW5kbGUsIGVwTmFtZURhdGFPZmZzZXQpICE9PSAwKSB7XG4gICAgICAgIGNoZWNrTGFzdEVycm9yKGBDYW4ndCBhcHBlbmQgZXhlY3V0aW9uIHByb3ZpZGVyOiAke2VwTmFtZX0uYCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuICB2YXIgc2V0U2Vzc2lvbk9wdGlvbnMgPSAob3B0aW9ucykgPT4ge1xuICAgIGNvbnN0IHdhc20yID0gZ2V0SW5zdGFuY2UoKTtcbiAgICBsZXQgc2Vzc2lvbk9wdGlvbnNIYW5kbGUgPSAwO1xuICAgIGNvbnN0IGFsbG9jcyA9IFtdO1xuICAgIGNvbnN0IHNlc3Npb25PcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICBhcHBlbmREZWZhdWx0T3B0aW9ucyhzZXNzaW9uT3B0aW9ucyk7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGdyYXBoT3B0aW1pemF0aW9uTGV2ZWwgPSBnZXRHcmFwaE9wdGltemF0aW9uTGV2ZWwoc2Vzc2lvbk9wdGlvbnMuZ3JhcGhPcHRpbWl6YXRpb25MZXZlbCA/PyBcImFsbFwiKTtcbiAgICAgIGNvbnN0IGV4ZWN1dGlvbk1vZGUgPSBnZXRFeGVjdXRpb25Nb2RlKHNlc3Npb25PcHRpb25zLmV4ZWN1dGlvbk1vZGUgPz8gXCJzZXF1ZW50aWFsXCIpO1xuICAgICAgY29uc3QgbG9nSWREYXRhT2Zmc2V0ID0gdHlwZW9mIHNlc3Npb25PcHRpb25zLmxvZ0lkID09PSBcInN0cmluZ1wiID8gYWxsb2NXYXNtU3RyaW5nKHNlc3Npb25PcHRpb25zLmxvZ0lkLCBhbGxvY3MpIDogMDtcbiAgICAgIGNvbnN0IGxvZ1NldmVyaXR5TGV2ZWwgPSBzZXNzaW9uT3B0aW9ucy5sb2dTZXZlcml0eUxldmVsID8/IDI7XG4gICAgICBpZiAoIU51bWJlci5pc0ludGVnZXIobG9nU2V2ZXJpdHlMZXZlbCkgfHwgbG9nU2V2ZXJpdHlMZXZlbCA8IDAgfHwgbG9nU2V2ZXJpdHlMZXZlbCA+IDQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBsb2cgc2VydmVyaXR5IGxldmVsIGlzIG5vdCB2YWxpZDogJHtsb2dTZXZlcml0eUxldmVsfWApO1xuICAgICAgfVxuICAgICAgY29uc3QgbG9nVmVyYm9zaXR5TGV2ZWwgPSBzZXNzaW9uT3B0aW9ucy5sb2dWZXJib3NpdHlMZXZlbCA/PyAwO1xuICAgICAgaWYgKCFOdW1iZXIuaXNJbnRlZ2VyKGxvZ1ZlcmJvc2l0eUxldmVsKSB8fCBsb2dWZXJib3NpdHlMZXZlbCA8IDAgfHwgbG9nVmVyYm9zaXR5TGV2ZWwgPiA0KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgbG9nIHZlcmJvc2l0eSBsZXZlbCBpcyBub3QgdmFsaWQ6ICR7bG9nVmVyYm9zaXR5TGV2ZWx9YCk7XG4gICAgICB9XG4gICAgICBjb25zdCBvcHRpbWl6ZWRNb2RlbEZpbGVQYXRoT2Zmc2V0ID0gdHlwZW9mIHNlc3Npb25PcHRpb25zLm9wdGltaXplZE1vZGVsRmlsZVBhdGggPT09IFwic3RyaW5nXCIgPyBhbGxvY1dhc21TdHJpbmcoc2Vzc2lvbk9wdGlvbnMub3B0aW1pemVkTW9kZWxGaWxlUGF0aCwgYWxsb2NzKSA6IDA7XG4gICAgICBzZXNzaW9uT3B0aW9uc0hhbmRsZSA9IHdhc20yLl9PcnRDcmVhdGVTZXNzaW9uT3B0aW9ucyhcbiAgICAgICAgZ3JhcGhPcHRpbWl6YXRpb25MZXZlbCxcbiAgICAgICAgISFzZXNzaW9uT3B0aW9ucy5lbmFibGVDcHVNZW1BcmVuYSxcbiAgICAgICAgISFzZXNzaW9uT3B0aW9ucy5lbmFibGVNZW1QYXR0ZXJuLFxuICAgICAgICBleGVjdXRpb25Nb2RlLFxuICAgICAgICAhIXNlc3Npb25PcHRpb25zLmVuYWJsZVByb2ZpbGluZyxcbiAgICAgICAgMCxcbiAgICAgICAgbG9nSWREYXRhT2Zmc2V0LFxuICAgICAgICBsb2dTZXZlcml0eUxldmVsLFxuICAgICAgICBsb2dWZXJib3NpdHlMZXZlbCxcbiAgICAgICAgb3B0aW1pemVkTW9kZWxGaWxlUGF0aE9mZnNldFxuICAgICAgKTtcbiAgICAgIGlmIChzZXNzaW9uT3B0aW9uc0hhbmRsZSA9PT0gMCkge1xuICAgICAgICBjaGVja0xhc3RFcnJvcihcIkNhbid0IGNyZWF0ZSBzZXNzaW9uIG9wdGlvbnMuXCIpO1xuICAgICAgfVxuICAgICAgaWYgKHNlc3Npb25PcHRpb25zLmV4ZWN1dGlvblByb3ZpZGVycykge1xuICAgICAgICBzZXRFeGVjdXRpb25Qcm92aWRlcnMoc2Vzc2lvbk9wdGlvbnNIYW5kbGUsIHNlc3Npb25PcHRpb25zLmV4ZWN1dGlvblByb3ZpZGVycywgYWxsb2NzKTtcbiAgICAgIH1cbiAgICAgIGlmIChzZXNzaW9uT3B0aW9ucy5lbmFibGVHcmFwaENhcHR1cmUgIT09IHZvaWQgMCkge1xuICAgICAgICBpZiAodHlwZW9mIHNlc3Npb25PcHRpb25zLmVuYWJsZUdyYXBoQ2FwdHVyZSAhPT0gXCJib29sZWFuXCIpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGVuYWJsZUdyYXBoQ2FwdHVyZSBtdXN0IGJlIGEgYm9vbGVhbiB2YWx1ZTogJHtzZXNzaW9uT3B0aW9ucy5lbmFibGVHcmFwaENhcHR1cmV9YCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qga2V5RGF0YU9mZnNldCA9IGFsbG9jV2FzbVN0cmluZyhcImVuYWJsZUdyYXBoQ2FwdHVyZVwiLCBhbGxvY3MpO1xuICAgICAgICBjb25zdCB2YWx1ZURhdGFPZmZzZXQgPSBhbGxvY1dhc21TdHJpbmcoc2Vzc2lvbk9wdGlvbnMuZW5hYmxlR3JhcGhDYXB0dXJlLnRvU3RyaW5nKCksIGFsbG9jcyk7XG4gICAgICAgIGlmICh3YXNtMi5fT3J0QWRkU2Vzc2lvbkNvbmZpZ0VudHJ5KHNlc3Npb25PcHRpb25zSGFuZGxlLCBrZXlEYXRhT2Zmc2V0LCB2YWx1ZURhdGFPZmZzZXQpICE9PSAwKSB7XG4gICAgICAgICAgY2hlY2tMYXN0RXJyb3IoXG4gICAgICAgICAgICBgQ2FuJ3Qgc2V0IGEgc2Vzc2lvbiBjb25maWcgZW50cnk6ICdlbmFibGVHcmFwaENhcHR1cmUnIC0gJHtzZXNzaW9uT3B0aW9ucy5lbmFibGVHcmFwaENhcHR1cmV9LmBcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoc2Vzc2lvbk9wdGlvbnMuZnJlZURpbWVuc2lvbk92ZXJyaWRlcykge1xuICAgICAgICBmb3IgKGNvbnN0IFtuYW1lLCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMoc2Vzc2lvbk9wdGlvbnMuZnJlZURpbWVuc2lvbk92ZXJyaWRlcykpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIG5hbWUgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgZnJlZSBkaW1lbnNpb24gb3ZlcnJpZGUgbmFtZSBtdXN0IGJlIGEgc3RyaW5nOiAke25hbWV9YCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09IFwibnVtYmVyXCIgfHwgIU51bWJlci5pc0ludGVnZXIodmFsdWUpIHx8IHZhbHVlIDwgMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBmcmVlIGRpbWVuc2lvbiBvdmVycmlkZSB2YWx1ZSBtdXN0IGJlIGEgbm9uLW5lZ2F0aXZlIGludGVnZXI6ICR7dmFsdWV9YCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnN0IG5hbWVPZmZzZXQgPSBhbGxvY1dhc21TdHJpbmcobmFtZSwgYWxsb2NzKTtcbiAgICAgICAgICBpZiAod2FzbTIuX09ydEFkZEZyZWVEaW1lbnNpb25PdmVycmlkZShzZXNzaW9uT3B0aW9uc0hhbmRsZSwgbmFtZU9mZnNldCwgdmFsdWUpICE9PSAwKSB7XG4gICAgICAgICAgICBjaGVja0xhc3RFcnJvcihgQ2FuJ3Qgc2V0IGEgZnJlZSBkaW1lbnNpb24gb3ZlcnJpZGU6ICR7bmFtZX0gLSAke3ZhbHVlfS5gKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChzZXNzaW9uT3B0aW9ucy5leHRyYSAhPT0gdm9pZCAwKSB7XG4gICAgICAgIGl0ZXJhdGVFeHRyYU9wdGlvbnMoc2Vzc2lvbk9wdGlvbnMuZXh0cmEsIFwiXCIsIC8qIEBfX1BVUkVfXyAqLyBuZXcgV2Vha1NldCgpLCAoa2V5LCB2YWx1ZSkgPT4ge1xuICAgICAgICAgIGNvbnN0IGtleURhdGFPZmZzZXQgPSBhbGxvY1dhc21TdHJpbmcoa2V5LCBhbGxvY3MpO1xuICAgICAgICAgIGNvbnN0IHZhbHVlRGF0YU9mZnNldCA9IGFsbG9jV2FzbVN0cmluZyh2YWx1ZSwgYWxsb2NzKTtcbiAgICAgICAgICBpZiAod2FzbTIuX09ydEFkZFNlc3Npb25Db25maWdFbnRyeShzZXNzaW9uT3B0aW9uc0hhbmRsZSwga2V5RGF0YU9mZnNldCwgdmFsdWVEYXRhT2Zmc2V0KSAhPT0gMCkge1xuICAgICAgICAgICAgY2hlY2tMYXN0RXJyb3IoYENhbid0IHNldCBhIHNlc3Npb24gY29uZmlnIGVudHJ5OiAke2tleX0gLSAke3ZhbHVlfS5gKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIFtzZXNzaW9uT3B0aW9uc0hhbmRsZSwgYWxsb2NzXTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBpZiAoc2Vzc2lvbk9wdGlvbnNIYW5kbGUgIT09IDApIHtcbiAgICAgICAgd2FzbTIuX09ydFJlbGVhc2VTZXNzaW9uT3B0aW9ucyhzZXNzaW9uT3B0aW9uc0hhbmRsZSk7XG4gICAgICB9XG4gICAgICBhbGxvY3MuZm9yRWFjaCgoYWxsb2MpID0+IHdhc20yLl9mcmVlKGFsbG9jKSk7XG4gICAgICB0aHJvdyBlO1xuICAgIH1cbiAgfTtcblxuICAvLyB3ZWIvbGliL3dhc20vd2FzbS1jb21tb24udHNcbiAgdmFyIHRlbnNvckRhdGFUeXBlU3RyaW5nVG9FbnVtID0gKHR5cGUpID0+IHtcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgXCJpbnQ4XCI6XG4gICAgICAgIHJldHVybiAzIC8qIGludDggKi87XG4gICAgICBjYXNlIFwidWludDhcIjpcbiAgICAgICAgcmV0dXJuIDIgLyogdWludDggKi87XG4gICAgICBjYXNlIFwiYm9vbFwiOlxuICAgICAgICByZXR1cm4gOSAvKiBib29sICovO1xuICAgICAgY2FzZSBcImludDE2XCI6XG4gICAgICAgIHJldHVybiA1IC8qIGludDE2ICovO1xuICAgICAgY2FzZSBcInVpbnQxNlwiOlxuICAgICAgICByZXR1cm4gNCAvKiB1aW50MTYgKi87XG4gICAgICBjYXNlIFwiaW50MzJcIjpcbiAgICAgICAgcmV0dXJuIDYgLyogaW50MzIgKi87XG4gICAgICBjYXNlIFwidWludDMyXCI6XG4gICAgICAgIHJldHVybiAxMiAvKiB1aW50MzIgKi87XG4gICAgICBjYXNlIFwiZmxvYXQxNlwiOlxuICAgICAgICByZXR1cm4gMTAgLyogZmxvYXQxNiAqLztcbiAgICAgIGNhc2UgXCJmbG9hdDMyXCI6XG4gICAgICAgIHJldHVybiAxIC8qIGZsb2F0ICovO1xuICAgICAgY2FzZSBcImZsb2F0NjRcIjpcbiAgICAgICAgcmV0dXJuIDExIC8qIGRvdWJsZSAqLztcbiAgICAgIGNhc2UgXCJzdHJpbmdcIjpcbiAgICAgICAgcmV0dXJuIDggLyogc3RyaW5nICovO1xuICAgICAgY2FzZSBcImludDY0XCI6XG4gICAgICAgIHJldHVybiA3IC8qIGludDY0ICovO1xuICAgICAgY2FzZSBcInVpbnQ2NFwiOlxuICAgICAgICByZXR1cm4gMTMgLyogdWludDY0ICovO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGB1bnN1cHBvcnRlZCBkYXRhIHR5cGU6ICR7dHlwZX1gKTtcbiAgICB9XG4gIH07XG4gIHZhciB0ZW5zb3JEYXRhVHlwZUVudW1Ub1N0cmluZyA9ICh0eXBlUHJvdG8pID0+IHtcbiAgICBzd2l0Y2ggKHR5cGVQcm90bykge1xuICAgICAgY2FzZSAzIC8qIGludDggKi86XG4gICAgICAgIHJldHVybiBcImludDhcIjtcbiAgICAgIGNhc2UgMiAvKiB1aW50OCAqLzpcbiAgICAgICAgcmV0dXJuIFwidWludDhcIjtcbiAgICAgIGNhc2UgOSAvKiBib29sICovOlxuICAgICAgICByZXR1cm4gXCJib29sXCI7XG4gICAgICBjYXNlIDUgLyogaW50MTYgKi86XG4gICAgICAgIHJldHVybiBcImludDE2XCI7XG4gICAgICBjYXNlIDQgLyogdWludDE2ICovOlxuICAgICAgICByZXR1cm4gXCJ1aW50MTZcIjtcbiAgICAgIGNhc2UgNiAvKiBpbnQzMiAqLzpcbiAgICAgICAgcmV0dXJuIFwiaW50MzJcIjtcbiAgICAgIGNhc2UgMTIgLyogdWludDMyICovOlxuICAgICAgICByZXR1cm4gXCJ1aW50MzJcIjtcbiAgICAgIGNhc2UgMTAgLyogZmxvYXQxNiAqLzpcbiAgICAgICAgcmV0dXJuIFwiZmxvYXQxNlwiO1xuICAgICAgY2FzZSAxIC8qIGZsb2F0ICovOlxuICAgICAgICByZXR1cm4gXCJmbG9hdDMyXCI7XG4gICAgICBjYXNlIDExIC8qIGRvdWJsZSAqLzpcbiAgICAgICAgcmV0dXJuIFwiZmxvYXQ2NFwiO1xuICAgICAgY2FzZSA4IC8qIHN0cmluZyAqLzpcbiAgICAgICAgcmV0dXJuIFwic3RyaW5nXCI7XG4gICAgICBjYXNlIDcgLyogaW50NjQgKi86XG4gICAgICAgIHJldHVybiBcImludDY0XCI7XG4gICAgICBjYXNlIDEzIC8qIHVpbnQ2NCAqLzpcbiAgICAgICAgcmV0dXJuIFwidWludDY0XCI7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYHVuc3VwcG9ydGVkIGRhdGEgdHlwZTogJHt0eXBlUHJvdG99YCk7XG4gICAgfVxuICB9O1xuICB2YXIgZ2V0VGVuc29yRWxlbWVudFNpemUgPSAoZGF0ZVR5cGUpID0+IFt2b2lkIDAsIDQsIDEsIDEsIDIsIDIsIDQsIDgsIHZvaWQgMCwgMSwgMiwgOCwgNCwgOCwgdm9pZCAwLCB2b2lkIDAsIHZvaWQgMF1bZGF0ZVR5cGVdO1xuICB2YXIgdGVuc29yVHlwZVRvVHlwZWRBcnJheUNvbnN0cnVjdG9yID0gKHR5cGUpID0+IHtcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgXCJmbG9hdDE2XCI6XG4gICAgICAgIHJldHVybiB0eXBlb2YgRmxvYXQxNkFycmF5ICE9PSBcInVuZGVmaW5lZFwiICYmIEZsb2F0MTZBcnJheS5mcm9tID8gRmxvYXQxNkFycmF5IDogVWludDE2QXJyYXk7XG4gICAgICBjYXNlIFwiZmxvYXQzMlwiOlxuICAgICAgICByZXR1cm4gRmxvYXQzMkFycmF5O1xuICAgICAgY2FzZSBcInVpbnQ4XCI6XG4gICAgICAgIHJldHVybiBVaW50OEFycmF5O1xuICAgICAgY2FzZSBcImludDhcIjpcbiAgICAgICAgcmV0dXJuIEludDhBcnJheTtcbiAgICAgIGNhc2UgXCJ1aW50MTZcIjpcbiAgICAgICAgcmV0dXJuIFVpbnQxNkFycmF5O1xuICAgICAgY2FzZSBcImludDE2XCI6XG4gICAgICAgIHJldHVybiBJbnQxNkFycmF5O1xuICAgICAgY2FzZSBcImludDMyXCI6XG4gICAgICAgIHJldHVybiBJbnQzMkFycmF5O1xuICAgICAgY2FzZSBcImJvb2xcIjpcbiAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXk7XG4gICAgICBjYXNlIFwiZmxvYXQ2NFwiOlxuICAgICAgICByZXR1cm4gRmxvYXQ2NEFycmF5O1xuICAgICAgY2FzZSBcInVpbnQzMlwiOlxuICAgICAgICByZXR1cm4gVWludDMyQXJyYXk7XG4gICAgICBjYXNlIFwiaW50NjRcIjpcbiAgICAgICAgcmV0dXJuIEJpZ0ludDY0QXJyYXk7XG4gICAgICBjYXNlIFwidWludDY0XCI6XG4gICAgICAgIHJldHVybiBCaWdVaW50NjRBcnJheTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgdW5zdXBwb3J0ZWQgdHlwZTogJHt0eXBlfWApO1xuICAgIH1cbiAgfTtcbiAgdmFyIGxvZ0xldmVsU3RyaW5nVG9FbnVtID0gKGxvZ0xldmVsKSA9PiB7XG4gICAgc3dpdGNoIChsb2dMZXZlbCkge1xuICAgICAgY2FzZSBcInZlcmJvc2VcIjpcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICBjYXNlIFwiaW5mb1wiOlxuICAgICAgICByZXR1cm4gMTtcbiAgICAgIGNhc2UgXCJ3YXJuaW5nXCI6XG4gICAgICAgIHJldHVybiAyO1xuICAgICAgY2FzZSBcImVycm9yXCI6XG4gICAgICAgIHJldHVybiAzO1xuICAgICAgY2FzZSBcImZhdGFsXCI6XG4gICAgICAgIHJldHVybiA0O1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGB1bnN1cHBvcnRlZCBsb2dnaW5nIGxldmVsOiAke2xvZ0xldmVsfWApO1xuICAgIH1cbiAgfTtcbiAgdmFyIGlzR3B1QnVmZmVyU3VwcG9ydGVkVHlwZSA9ICh0eXBlKSA9PiB0eXBlID09PSBcImZsb2F0MzJcIiB8fCB0eXBlID09PSBcImZsb2F0MTZcIiB8fCB0eXBlID09PSBcImludDMyXCIgfHwgdHlwZSA9PT0gXCJpbnQ2NFwiIHx8IHR5cGUgPT09IFwidWludDMyXCIgfHwgdHlwZSA9PT0gXCJ1aW50OFwiIHx8IHR5cGUgPT09IFwiYm9vbFwiO1xuICB2YXIgZGF0YUxvY2F0aW9uU3RyaW5nVG9FbnVtID0gKGxvY2F0aW9uKSA9PiB7XG4gICAgc3dpdGNoIChsb2NhdGlvbikge1xuICAgICAgY2FzZSBcIm5vbmVcIjpcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICBjYXNlIFwiY3B1XCI6XG4gICAgICAgIHJldHVybiAxO1xuICAgICAgY2FzZSBcImNwdS1waW5uZWRcIjpcbiAgICAgICAgcmV0dXJuIDI7XG4gICAgICBjYXNlIFwidGV4dHVyZVwiOlxuICAgICAgICByZXR1cm4gMztcbiAgICAgIGNhc2UgXCJncHUtYnVmZmVyXCI6XG4gICAgICAgIHJldHVybiA0O1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGB1bnN1cHBvcnRlZCBkYXRhIGxvY2F0aW9uOiAke2xvY2F0aW9ufWApO1xuICAgIH1cbiAgfTtcblxuICAvLyB3ZWIvbGliL3dhc20vd2FzbS11dGlscy1sb2FkLWZpbGUudHNcbiAgaW5pdF9mcygpO1xuXG4gIC8vIG5vZGVqcy1pZ25vcmU6bm9kZTpmcy9wcm9taXNlc1xuICB2YXIgcmVhZEZpbGUyID0gdm9pZCAwO1xuXG4gIC8vIHdlYi9saWIvd2FzbS93YXNtLXV0aWxzLWxvYWQtZmlsZS50c1xuICB2YXIgbG9hZEZpbGUgPSBhc3luYyAoZmlsZSkgPT4ge1xuICAgIGlmICh0eXBlb2YgZmlsZSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgaWYgKHR5cGVvZiBwcm9jZXNzICE9PSBcInVuZGVmaW5lZFwiICYmIHByb2Nlc3MudmVyc2lvbnMgJiYgcHJvY2Vzcy52ZXJzaW9ucy5ub2RlKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KGF3YWl0IHJlYWRGaWxlMihmaWxlKSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICBpZiAoZS5jb2RlID09PSBcIkVSUl9GU19GSUxFX1RPT19MQVJHRVwiKSB7XG4gICAgICAgICAgICBjb25zdCBzdHJlYW0gPSBjcmVhdGVSZWFkU3RyZWFtKGZpbGUpO1xuICAgICAgICAgICAgY29uc3QgY2h1bmtzID0gW107XG4gICAgICAgICAgICBmb3IgYXdhaXQgKGNvbnN0IGNodW5rIG9mIHN0cmVhbSkge1xuICAgICAgICAgICAgICBjaHVua3MucHVzaChjaHVuayk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoQnVmZmVyLmNvbmNhdChjaHVua3MpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChmaWxlKTtcbiAgICAgICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgZmFpbGVkIHRvIGxvYWQgZXh0ZXJuYWwgZGF0YSBmaWxlOiAke2ZpbGV9YCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY29udGVudExlbmd0aEhlYWRlciA9IHJlc3BvbnNlLmhlYWRlcnMuZ2V0KFwiQ29udGVudC1MZW5ndGhcIik7XG4gICAgICAgIGNvbnN0IGZpbGVTaXplID0gY29udGVudExlbmd0aEhlYWRlciA/IHBhcnNlSW50KGNvbnRlbnRMZW5ndGhIZWFkZXIsIDEwKSA6IDA7XG4gICAgICAgIGlmIChmaWxlU2l6ZSA8IDEwNzM3NDE4MjQpIHtcbiAgICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoYXdhaXQgcmVzcG9uc2UuYXJyYXlCdWZmZXIoKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKCFyZXNwb25zZS5ib2R5KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGZhaWxlZCB0byBsb2FkIGV4dGVybmFsIGRhdGEgZmlsZTogJHtmaWxlfSwgbm8gcmVzcG9uc2UgYm9keS5gKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3QgcmVhZGVyID0gcmVzcG9uc2UuYm9keS5nZXRSZWFkZXIoKTtcbiAgICAgICAgICBsZXQgYnVmZmVyO1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBidWZmZXIgPSBuZXcgQXJyYXlCdWZmZXIoZmlsZVNpemUpO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGlmIChlIGluc3RhbmNlb2YgUmFuZ2VFcnJvcikge1xuICAgICAgICAgICAgICBjb25zdCBwYWdlcyA9IE1hdGguY2VpbChmaWxlU2l6ZSAvIDY1NTM2KTtcbiAgICAgICAgICAgICAgYnVmZmVyID0gbmV3IFdlYkFzc2VtYmx5Lk1lbW9yeSh7IGluaXRpYWw6IHBhZ2VzLCBtYXhpbXVtOiBwYWdlcyB9KS5idWZmZXI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBsZXQgb2Zmc2V0ID0gMDtcbiAgICAgICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICAgICAgY29uc3QgeyBkb25lLCB2YWx1ZSB9ID0gYXdhaXQgcmVhZGVyLnJlYWQoKTtcbiAgICAgICAgICAgIGlmIChkb25lKSB7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgY2h1bmtTaXplID0gdmFsdWUuYnl0ZUxlbmd0aDtcbiAgICAgICAgICAgIGNvbnN0IGNodW5rID0gbmV3IFVpbnQ4QXJyYXkoYnVmZmVyLCBvZmZzZXQsIGNodW5rU2l6ZSk7XG4gICAgICAgICAgICBjaHVuay5zZXQodmFsdWUpO1xuICAgICAgICAgICAgb2Zmc2V0ICs9IGNodW5rU2l6ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KGJ1ZmZlciwgMCwgZmlsZVNpemUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChmaWxlIGluc3RhbmNlb2YgQmxvYikge1xuICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KGF3YWl0IGZpbGUuYXJyYXlCdWZmZXIoKSk7XG4gICAgfSBlbHNlIGlmIChmaWxlIGluc3RhbmNlb2YgVWludDhBcnJheSkge1xuICAgICAgcmV0dXJuIGZpbGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShmaWxlKTtcbiAgICB9XG4gIH07XG5cbiAgLy8gd2ViL2xpYi93YXNtL3dhc20tY29yZS1pbXBsLnRzXG4gIHZhciBpbml0T3J0ID0gKG51bVRocmVhZHMsIGxvZ2dpbmdMZXZlbCkgPT4ge1xuICAgIGNvbnN0IGVycm9yQ29kZSA9IGdldEluc3RhbmNlKCkuX09ydEluaXQobnVtVGhyZWFkcywgbG9nZ2luZ0xldmVsKTtcbiAgICBpZiAoZXJyb3JDb2RlICE9PSAwKSB7XG4gICAgICBjaGVja0xhc3RFcnJvcihcIkNhbid0IGluaXRpYWxpemUgb25ueHJ1bnRpbWUuXCIpO1xuICAgIH1cbiAgfTtcbiAgdmFyIGluaXRSdW50aW1lID0gYXN5bmMgKGVudikgPT4ge1xuICAgIGluaXRPcnQoZW52Lndhc20ubnVtVGhyZWFkcywgbG9nTGV2ZWxTdHJpbmdUb0VudW0oZW52LmxvZ0xldmVsKSk7XG4gIH07XG4gIHZhciBpbml0RXAgPSBhc3luYyAoZW52LCBlcE5hbWUpID0+IHtcbiAgICBpZiAoZmFsc2UpIHtcbiAgICAgIGlmICh0eXBlb2YgbmF2aWdhdG9yID09PSBcInVuZGVmaW5lZFwiIHx8ICFuYXZpZ2F0b3IuZ3B1KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIldlYkdQVSBpcyBub3Qgc3VwcG9ydGVkIGluIGN1cnJlbnQgZW52aXJvbm1lbnRcIik7XG4gICAgICB9XG4gICAgICBjb25zdCBhZGFwdGVyID0gYXdhaXQgbmF2aWdhdG9yLmdwdS5yZXF1ZXN0QWRhcHRlcigpO1xuICAgICAgaWYgKCFhZGFwdGVyKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAnRmFpbGVkIHRvIGdldCBHUFUgYWRhcHRlci4gWW91IG1heSBuZWVkIHRvIGVuYWJsZSBmbGFnIFwiLS1lbmFibGUtdW5zYWZlLXdlYmdwdVwiIGlmIHlvdSBhcmUgdXNpbmcgQ2hyb21lLidcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmICghZW52Lndhc20uc2ltZCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgXCJOb3Qgc3VwcG9ydGVkIGZvciBXZWJHUFU9T04gYW5kIFNJTUQ9T0ZGLiBQbGVhc2Ugc2V0IGBlbnYud2FzbS5zaW1kYCB0byB0cnVlIHdoZW4gdXNpbmcgYHdlYmdwdWAgRVBcIlxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgY29uc3QgaW5pdEpzZXAgPSBudWxsLmluaXQ7XG4gICAgICBhd2FpdCBpbml0SnNlcChnZXRJbnN0YW5jZSgpLCBlbnYsIGFkYXB0ZXIpO1xuICAgIH1cbiAgfTtcbiAgdmFyIGFjdGl2ZVNlc3Npb25zID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKTtcbiAgdmFyIGdldFNlc3Npb25JbnB1dE91dHB1dENvdW50ID0gKHNlc3Npb25IYW5kbGUpID0+IHtcbiAgICBjb25zdCB3YXNtMiA9IGdldEluc3RhbmNlKCk7XG4gICAgY29uc3Qgc3RhY2sgPSB3YXNtMi5zdGFja1NhdmUoKTtcbiAgICB0cnkge1xuICAgICAgY29uc3QgZGF0YU9mZnNldCA9IHdhc20yLnN0YWNrQWxsb2MoOCk7XG4gICAgICBjb25zdCBlcnJvckNvZGUgPSB3YXNtMi5fT3J0R2V0SW5wdXRPdXRwdXRDb3VudChzZXNzaW9uSGFuZGxlLCBkYXRhT2Zmc2V0LCBkYXRhT2Zmc2V0ICsgNCk7XG4gICAgICBpZiAoZXJyb3JDb2RlICE9PSAwKSB7XG4gICAgICAgIGNoZWNrTGFzdEVycm9yKFwiQ2FuJ3QgZ2V0IHNlc3Npb24gaW5wdXQvb3V0cHV0IGNvdW50LlwiKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBbd2FzbTIuSEVBUDMyW2RhdGFPZmZzZXQgLyA0XSwgd2FzbTIuSEVBUDMyW2RhdGFPZmZzZXQgLyA0ICsgMV1dO1xuICAgIH0gZmluYWxseSB7XG4gICAgICB3YXNtMi5zdGFja1Jlc3RvcmUoc3RhY2spO1xuICAgIH1cbiAgfTtcbiAgdmFyIGNvcHlGcm9tRXh0ZXJuYWxCdWZmZXIgPSAobW9kZWwpID0+IHtcbiAgICBjb25zdCB3YXNtMiA9IGdldEluc3RhbmNlKCk7XG4gICAgY29uc3QgbW9kZWxEYXRhT2Zmc2V0ID0gd2FzbTIuX21hbGxvYyhtb2RlbC5ieXRlTGVuZ3RoKTtcbiAgICBpZiAobW9kZWxEYXRhT2Zmc2V0ID09PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYENhbid0IGNyZWF0ZSBhIHNlc3Npb24uIGZhaWxlZCB0byBhbGxvY2F0ZSBhIGJ1ZmZlciBvZiBzaXplICR7bW9kZWwuYnl0ZUxlbmd0aH0uYCk7XG4gICAgfVxuICAgIHdhc20yLkhFQVBVOC5zZXQobW9kZWwsIG1vZGVsRGF0YU9mZnNldCk7XG4gICAgcmV0dXJuIFttb2RlbERhdGFPZmZzZXQsIG1vZGVsLmJ5dGVMZW5ndGhdO1xuICB9O1xuICB2YXIgY3JlYXRlU2Vzc2lvbiA9IGFzeW5jIChtb2RlbERhdGEsIG9wdGlvbnMpID0+IHtcbiAgICBsZXQgbW9kZWxEYXRhT2Zmc2V0LCBtb2RlbERhdGFMZW5ndGg7XG4gICAgY29uc3Qgd2FzbTIgPSBnZXRJbnN0YW5jZSgpO1xuICAgIGlmIChBcnJheS5pc0FycmF5KG1vZGVsRGF0YSkpIHtcbiAgICAgIFttb2RlbERhdGFPZmZzZXQsIG1vZGVsRGF0YUxlbmd0aF0gPSBtb2RlbERhdGE7XG4gICAgfSBlbHNlIGlmIChtb2RlbERhdGEuYnVmZmVyID09PSB3YXNtMi5IRUFQVTguYnVmZmVyKSB7XG4gICAgICBbbW9kZWxEYXRhT2Zmc2V0LCBtb2RlbERhdGFMZW5ndGhdID0gW21vZGVsRGF0YS5ieXRlT2Zmc2V0LCBtb2RlbERhdGEuYnl0ZUxlbmd0aF07XG4gICAgfSBlbHNlIHtcbiAgICAgIFttb2RlbERhdGFPZmZzZXQsIG1vZGVsRGF0YUxlbmd0aF0gPSBjb3B5RnJvbUV4dGVybmFsQnVmZmVyKG1vZGVsRGF0YSk7XG4gICAgfVxuICAgIGxldCBzZXNzaW9uSGFuZGxlID0gMDtcbiAgICBsZXQgc2Vzc2lvbk9wdGlvbnNIYW5kbGUgPSAwO1xuICAgIGxldCBpb0JpbmRpbmdIYW5kbGUgPSAwO1xuICAgIGxldCBhbGxvY3MgPSBbXTtcbiAgICBjb25zdCBpbnB1dE5hbWVzVVRGOEVuY29kZWQgPSBbXTtcbiAgICBjb25zdCBvdXRwdXROYW1lc1VURjhFbmNvZGVkID0gW107XG4gICAgdHJ5IHtcbiAgICAgIFtzZXNzaW9uT3B0aW9uc0hhbmRsZSwgYWxsb2NzXSA9IHNldFNlc3Npb25PcHRpb25zKG9wdGlvbnMpO1xuICAgICAgaWYgKG9wdGlvbnM/LmV4dGVybmFsRGF0YSAmJiB3YXNtMi5tb3VudEV4dGVybmFsRGF0YSkge1xuICAgICAgICBjb25zdCBsb2FkaW5nUHJvbWlzZXMgPSBbXTtcbiAgICAgICAgZm9yIChjb25zdCBmaWxlIG9mIG9wdGlvbnMuZXh0ZXJuYWxEYXRhKSB7XG4gICAgICAgICAgY29uc3QgcGF0aCA9IHR5cGVvZiBmaWxlID09PSBcInN0cmluZ1wiID8gZmlsZSA6IGZpbGUucGF0aDtcbiAgICAgICAgICBsb2FkaW5nUHJvbWlzZXMucHVzaChsb2FkRmlsZSh0eXBlb2YgZmlsZSA9PT0gXCJzdHJpbmdcIiA/IGZpbGUgOiBmaWxlLmRhdGEpLnRoZW4oKGRhdGEpID0+IHtcbiAgICAgICAgICAgIHdhc20yLm1vdW50RXh0ZXJuYWxEYXRhKHBhdGgsIGRhdGEpO1xuICAgICAgICAgIH0pKTtcbiAgICAgICAgfVxuICAgICAgICBhd2FpdCBQcm9taXNlLmFsbChsb2FkaW5nUHJvbWlzZXMpO1xuICAgICAgfVxuICAgICAgc2Vzc2lvbkhhbmRsZSA9IGF3YWl0IHdhc20yLl9PcnRDcmVhdGVTZXNzaW9uKG1vZGVsRGF0YU9mZnNldCwgbW9kZWxEYXRhTGVuZ3RoLCBzZXNzaW9uT3B0aW9uc0hhbmRsZSk7XG4gICAgICBpZiAoc2Vzc2lvbkhhbmRsZSA9PT0gMCkge1xuICAgICAgICBjaGVja0xhc3RFcnJvcihcIkNhbid0IGNyZWF0ZSBhIHNlc3Npb24uXCIpO1xuICAgICAgfVxuICAgICAgY29uc3QgW2lucHV0Q291bnQsIG91dHB1dENvdW50XSA9IGdldFNlc3Npb25JbnB1dE91dHB1dENvdW50KHNlc3Npb25IYW5kbGUpO1xuICAgICAgY29uc3QgZW5hYmxlR3JhcGhDYXB0dXJlID0gISFvcHRpb25zPy5lbmFibGVHcmFwaENhcHR1cmU7XG4gICAgICBjb25zdCBpbnB1dE5hbWVzID0gW107XG4gICAgICBjb25zdCBvdXRwdXROYW1lcyA9IFtdO1xuICAgICAgY29uc3Qgb3V0cHV0UHJlZmVycmVkTG9jYXRpb25zID0gW107XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGlucHV0Q291bnQ7IGkrKykge1xuICAgICAgICBjb25zdCBuYW1lID0gd2FzbTIuX09ydEdldElucHV0TmFtZShzZXNzaW9uSGFuZGxlLCBpKTtcbiAgICAgICAgaWYgKG5hbWUgPT09IDApIHtcbiAgICAgICAgICBjaGVja0xhc3RFcnJvcihcIkNhbid0IGdldCBhbiBpbnB1dCBuYW1lLlwiKTtcbiAgICAgICAgfVxuICAgICAgICBpbnB1dE5hbWVzVVRGOEVuY29kZWQucHVzaChuYW1lKTtcbiAgICAgICAgaW5wdXROYW1lcy5wdXNoKHdhc20yLlVURjhUb1N0cmluZyhuYW1lKSk7XG4gICAgICB9XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG91dHB1dENvdW50OyBpKyspIHtcbiAgICAgICAgY29uc3QgbmFtZSA9IHdhc20yLl9PcnRHZXRPdXRwdXROYW1lKHNlc3Npb25IYW5kbGUsIGkpO1xuICAgICAgICBpZiAobmFtZSA9PT0gMCkge1xuICAgICAgICAgIGNoZWNrTGFzdEVycm9yKFwiQ2FuJ3QgZ2V0IGFuIG91dHB1dCBuYW1lLlwiKTtcbiAgICAgICAgfVxuICAgICAgICBvdXRwdXROYW1lc1VURjhFbmNvZGVkLnB1c2gobmFtZSk7XG4gICAgICAgIGNvbnN0IG5hbWVTdHJpbmcgPSB3YXNtMi5VVEY4VG9TdHJpbmcobmFtZSk7XG4gICAgICAgIG91dHB1dE5hbWVzLnB1c2gobmFtZVN0cmluZyk7XG4gICAgICAgIGlmIChmYWxzZSkge1xuICAgICAgICAgIGlmIChlbmFibGVHcmFwaENhcHR1cmUgJiYgb3B0aW9ucz8ucHJlZmVycmVkT3V0cHV0TG9jYXRpb24gPT09IHZvaWQgMCkge1xuICAgICAgICAgICAgb3V0cHV0UHJlZmVycmVkTG9jYXRpb25zLnB1c2goXCJncHUtYnVmZmVyXCIpO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnN0IGxvY2F0aW9uID0gdHlwZW9mIG9wdGlvbnM/LnByZWZlcnJlZE91dHB1dExvY2F0aW9uID09PSBcInN0cmluZ1wiID8gb3B0aW9ucy5wcmVmZXJyZWRPdXRwdXRMb2NhdGlvbiA6IG9wdGlvbnM/LnByZWZlcnJlZE91dHB1dExvY2F0aW9uPy5bbmFtZVN0cmluZ10gPz8gXCJjcHVcIjtcbiAgICAgICAgICBpZiAobG9jYXRpb24gIT09IFwiY3B1XCIgJiYgbG9jYXRpb24gIT09IFwiY3B1LXBpbm5lZFwiICYmIGxvY2F0aW9uICE9PSBcImdwdS1idWZmZXJcIikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBOb3Qgc3VwcG9ydGVkIHByZWZlcnJlZCBvdXRwdXQgbG9jYXRpb246ICR7bG9jYXRpb259LmApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoZW5hYmxlR3JhcGhDYXB0dXJlICYmIGxvY2F0aW9uICE9PSBcImdwdS1idWZmZXJcIikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBOb3Qgc3VwcG9ydGVkIHByZWZlcnJlZCBvdXRwdXQgbG9jYXRpb246ICR7bG9jYXRpb259LiBPbmx5ICdncHUtYnVmZmVyJyBsb2NhdGlvbiBpcyBzdXBwb3J0ZWQgd2hlbiBlbmFibGVHcmFwaENhcHR1cmUgaXMgdHJ1ZS5gKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgb3V0cHV0UHJlZmVycmVkTG9jYXRpb25zLnB1c2gobG9jYXRpb24pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBsZXQgYmluZGluZ1N0YXRlID0gbnVsbDtcbiAgICAgIGlmIChmYWxzZSkge1xuICAgICAgICBpb0JpbmRpbmdIYW5kbGUgPSB3YXNtMi5fT3J0Q3JlYXRlQmluZGluZyhzZXNzaW9uSGFuZGxlKTtcbiAgICAgICAgaWYgKGlvQmluZGluZ0hhbmRsZSA9PT0gMCkge1xuICAgICAgICAgIGNoZWNrTGFzdEVycm9yKFwiQ2FuJ3QgY3JlYXRlIElPIGJpbmRpbmcuXCIpO1xuICAgICAgICB9XG4gICAgICAgIGJpbmRpbmdTdGF0ZSA9IHtcbiAgICAgICAgICBoYW5kbGU6IGlvQmluZGluZ0hhbmRsZSxcbiAgICAgICAgICBvdXRwdXRQcmVmZXJyZWRMb2NhdGlvbnMsXG4gICAgICAgICAgb3V0cHV0UHJlZmVycmVkTG9jYXRpb25zRW5jb2RlZDogb3V0cHV0UHJlZmVycmVkTG9jYXRpb25zLm1hcCgobCkgPT4gZGF0YUxvY2F0aW9uU3RyaW5nVG9FbnVtKGwpKVxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgYWN0aXZlU2Vzc2lvbnMuc2V0KFxuICAgICAgICBzZXNzaW9uSGFuZGxlLFxuICAgICAgICBbc2Vzc2lvbkhhbmRsZSwgaW5wdXROYW1lc1VURjhFbmNvZGVkLCBvdXRwdXROYW1lc1VURjhFbmNvZGVkLCBiaW5kaW5nU3RhdGUsIGVuYWJsZUdyYXBoQ2FwdHVyZSwgZmFsc2VdXG4gICAgICApO1xuICAgICAgcmV0dXJuIFtzZXNzaW9uSGFuZGxlLCBpbnB1dE5hbWVzLCBvdXRwdXROYW1lc107XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaW5wdXROYW1lc1VURjhFbmNvZGVkLmZvckVhY2goKGJ1ZikgPT4gd2FzbTIuX09ydEZyZWUoYnVmKSk7XG4gICAgICBvdXRwdXROYW1lc1VURjhFbmNvZGVkLmZvckVhY2goKGJ1ZikgPT4gd2FzbTIuX09ydEZyZWUoYnVmKSk7XG4gICAgICBpZiAoaW9CaW5kaW5nSGFuZGxlICE9PSAwKSB7XG4gICAgICAgIHdhc20yLl9PcnRSZWxlYXNlQmluZGluZyhpb0JpbmRpbmdIYW5kbGUpO1xuICAgICAgfVxuICAgICAgaWYgKHNlc3Npb25IYW5kbGUgIT09IDApIHtcbiAgICAgICAgd2FzbTIuX09ydFJlbGVhc2VTZXNzaW9uKHNlc3Npb25IYW5kbGUpO1xuICAgICAgfVxuICAgICAgdGhyb3cgZTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgd2FzbTIuX2ZyZWUobW9kZWxEYXRhT2Zmc2V0KTtcbiAgICAgIGlmIChzZXNzaW9uT3B0aW9uc0hhbmRsZSAhPT0gMCkge1xuICAgICAgICB3YXNtMi5fT3J0UmVsZWFzZVNlc3Npb25PcHRpb25zKHNlc3Npb25PcHRpb25zSGFuZGxlKTtcbiAgICAgIH1cbiAgICAgIGFsbG9jcy5mb3JFYWNoKChhbGxvYykgPT4gd2FzbTIuX2ZyZWUoYWxsb2MpKTtcbiAgICAgIHdhc20yLnVubW91bnRFeHRlcm5hbERhdGE/LigpO1xuICAgIH1cbiAgfTtcbiAgdmFyIHJlbGVhc2VTZXNzaW9uID0gKHNlc3Npb25JZCkgPT4ge1xuICAgIGNvbnN0IHdhc20yID0gZ2V0SW5zdGFuY2UoKTtcbiAgICBjb25zdCBzZXNzaW9uID0gYWN0aXZlU2Vzc2lvbnMuZ2V0KHNlc3Npb25JZCk7XG4gICAgaWYgKCFzZXNzaW9uKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYGNhbm5vdCByZWxlYXNlIHNlc3Npb24uIGludmFsaWQgc2Vzc2lvbiBpZDogJHtzZXNzaW9uSWR9YCk7XG4gICAgfVxuICAgIGNvbnN0IFtzZXNzaW9uSGFuZGxlLCBpbnB1dE5hbWVzVVRGOEVuY29kZWQsIG91dHB1dE5hbWVzVVRGOEVuY29kZWQsIGlvQmluZGluZ1N0YXRlLCBlbmFibGVHcmFwaENhcHR1cmVdID0gc2Vzc2lvbjtcbiAgICBpZiAoaW9CaW5kaW5nU3RhdGUpIHtcbiAgICAgIGlmIChlbmFibGVHcmFwaENhcHR1cmUpIHtcbiAgICAgICAgd2FzbTIuX09ydENsZWFyQm91bmRPdXRwdXRzKGlvQmluZGluZ1N0YXRlLmhhbmRsZSk7XG4gICAgICB9XG4gICAgICB3YXNtMi5fT3J0UmVsZWFzZUJpbmRpbmcoaW9CaW5kaW5nU3RhdGUuaGFuZGxlKTtcbiAgICB9XG4gICAgd2FzbTIuanNlcE9uUmVsZWFzZVNlc3Npb24/LihzZXNzaW9uSWQpO1xuICAgIGlucHV0TmFtZXNVVEY4RW5jb2RlZC5mb3JFYWNoKChidWYpID0+IHdhc20yLl9PcnRGcmVlKGJ1ZikpO1xuICAgIG91dHB1dE5hbWVzVVRGOEVuY29kZWQuZm9yRWFjaCgoYnVmKSA9PiB3YXNtMi5fT3J0RnJlZShidWYpKTtcbiAgICB3YXNtMi5fT3J0UmVsZWFzZVNlc3Npb24oc2Vzc2lvbkhhbmRsZSk7XG4gICAgYWN0aXZlU2Vzc2lvbnMuZGVsZXRlKHNlc3Npb25JZCk7XG4gIH07XG4gIHZhciBwcmVwYXJlSW5wdXRPdXRwdXRUZW5zb3IgPSAodGVuc29yLCB0ZW5zb3JIYW5kbGVzLCBhbGxvY3MsIHNlc3Npb25JZCwgaW5kZXgsIGVuYWJsZUdyYXBoQ2FwdHVyZSA9IGZhbHNlKSA9PiB7XG4gICAgaWYgKCF0ZW5zb3IpIHtcbiAgICAgIHRlbnNvckhhbmRsZXMucHVzaCgwKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3Qgd2FzbTIgPSBnZXRJbnN0YW5jZSgpO1xuICAgIGNvbnN0IGRhdGFUeXBlID0gdGVuc29yWzBdO1xuICAgIGNvbnN0IGRpbXMgPSB0ZW5zb3JbMV07XG4gICAgY29uc3QgbG9jYXRpb24gPSB0ZW5zb3JbM107XG4gICAgbGV0IHJhd0RhdGE7XG4gICAgbGV0IGRhdGFCeXRlTGVuZ3RoO1xuICAgIGlmIChkYXRhVHlwZSA9PT0gXCJzdHJpbmdcIiAmJiBsb2NhdGlvbiA9PT0gXCJncHUtYnVmZmVyXCIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlN0cmluZyB0ZW5zb3IgaXMgbm90IHN1cHBvcnRlZCBvbiBHUFUuXCIpO1xuICAgIH1cbiAgICBpZiAoZW5hYmxlR3JhcGhDYXB0dXJlICYmIGxvY2F0aW9uICE9PSBcImdwdS1idWZmZXJcIikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgRXh0ZXJuYWwgYnVmZmVyIG11c3QgYmUgcHJvdmlkZWQgZm9yIGlucHV0L291dHB1dCBpbmRleCAke2luZGV4fSB3aGVuIGVuYWJsZUdyYXBoQ2FwdHVyZSBpcyB0cnVlLmBcbiAgICAgICk7XG4gICAgfVxuICAgIGlmIChsb2NhdGlvbiA9PT0gXCJncHUtYnVmZmVyXCIpIHtcbiAgICAgIGNvbnN0IGdwdUJ1ZmZlciA9IHRlbnNvclsyXS5ncHVCdWZmZXI7XG4gICAgICBjb25zdCBlbGVtZW50U2l6ZUluQnl0ZXMgPSBnZXRUZW5zb3JFbGVtZW50U2l6ZSh0ZW5zb3JEYXRhVHlwZVN0cmluZ1RvRW51bShkYXRhVHlwZSkpO1xuICAgICAgZGF0YUJ5dGVMZW5ndGggPSBkaW1zLnJlZHVjZSgoYSwgYikgPT4gYSAqIGIsIDEpICogZWxlbWVudFNpemVJbkJ5dGVzO1xuICAgICAgcmF3RGF0YSA9IHdhc20yLmpzZXBSZWdpc3RlckJ1ZmZlcihzZXNzaW9uSWQsIGluZGV4LCBncHVCdWZmZXIsIGRhdGFCeXRlTGVuZ3RoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgZGF0YSA9IHRlbnNvclsyXTtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KGRhdGEpKSB7XG4gICAgICAgIGRhdGFCeXRlTGVuZ3RoID0gNCAqIGRhdGEubGVuZ3RoO1xuICAgICAgICByYXdEYXRhID0gd2FzbTIuX21hbGxvYyhkYXRhQnl0ZUxlbmd0aCk7XG4gICAgICAgIGFsbG9jcy5wdXNoKHJhd0RhdGEpO1xuICAgICAgICBsZXQgZGF0YUluZGV4ID0gcmF3RGF0YSAvIDQ7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGlmICh0eXBlb2YgZGF0YVtpXSAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgdGVuc29yIGRhdGEgYXQgaW5kZXggJHtpfSBpcyBub3QgYSBzdHJpbmdgKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgd2FzbTIuSEVBUFUzMltkYXRhSW5kZXgrK10gPSBhbGxvY1dhc21TdHJpbmcoZGF0YVtpXSwgYWxsb2NzKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGF0YUJ5dGVMZW5ndGggPSBkYXRhLmJ5dGVMZW5ndGg7XG4gICAgICAgIHJhd0RhdGEgPSB3YXNtMi5fbWFsbG9jKGRhdGFCeXRlTGVuZ3RoKTtcbiAgICAgICAgYWxsb2NzLnB1c2gocmF3RGF0YSk7XG4gICAgICAgIHdhc20yLkhFQVBVOC5zZXQobmV3IFVpbnQ4QXJyYXkoZGF0YS5idWZmZXIsIGRhdGEuYnl0ZU9mZnNldCwgZGF0YUJ5dGVMZW5ndGgpLCByYXdEYXRhKTtcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3Qgc3RhY2sgPSB3YXNtMi5zdGFja1NhdmUoKTtcbiAgICBjb25zdCBkaW1zT2Zmc2V0ID0gd2FzbTIuc3RhY2tBbGxvYyg0ICogZGltcy5sZW5ndGgpO1xuICAgIHRyeSB7XG4gICAgICBsZXQgZGltSW5kZXggPSBkaW1zT2Zmc2V0IC8gNDtcbiAgICAgIGRpbXMuZm9yRWFjaCgoZCkgPT4gd2FzbTIuSEVBUDMyW2RpbUluZGV4KytdID0gZCk7XG4gICAgICBjb25zdCB0ZW5zb3IyID0gd2FzbTIuX09ydENyZWF0ZVRlbnNvcihcbiAgICAgICAgdGVuc29yRGF0YVR5cGVTdHJpbmdUb0VudW0oZGF0YVR5cGUpLFxuICAgICAgICByYXdEYXRhLFxuICAgICAgICBkYXRhQnl0ZUxlbmd0aCxcbiAgICAgICAgZGltc09mZnNldCxcbiAgICAgICAgZGltcy5sZW5ndGgsXG4gICAgICAgIGRhdGFMb2NhdGlvblN0cmluZ1RvRW51bShsb2NhdGlvbilcbiAgICAgICk7XG4gICAgICBpZiAodGVuc29yMiA9PT0gMCkge1xuICAgICAgICBjaGVja0xhc3RFcnJvcihgQ2FuJ3QgY3JlYXRlIHRlbnNvciBmb3IgaW5wdXQvb3V0cHV0LiBzZXNzaW9uPSR7c2Vzc2lvbklkfSwgaW5kZXg9JHtpbmRleH0uYCk7XG4gICAgICB9XG4gICAgICB0ZW5zb3JIYW5kbGVzLnB1c2godGVuc29yMik7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHdhc20yLnN0YWNrUmVzdG9yZShzdGFjayk7XG4gICAgfVxuICB9O1xuICB2YXIgcnVuID0gYXN5bmMgKHNlc3Npb25JZCwgaW5wdXRJbmRpY2VzLCBpbnB1dFRlbnNvcnMsIG91dHB1dEluZGljZXMsIG91dHB1dFRlbnNvcnMsIG9wdGlvbnMpID0+IHtcbiAgICBjb25zdCB3YXNtMiA9IGdldEluc3RhbmNlKCk7XG4gICAgY29uc3Qgc2Vzc2lvbiA9IGFjdGl2ZVNlc3Npb25zLmdldChzZXNzaW9uSWQpO1xuICAgIGlmICghc2Vzc2lvbikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBjYW5ub3QgcnVuIGluZmVyZW5jZS4gaW52YWxpZCBzZXNzaW9uIGlkOiAke3Nlc3Npb25JZH1gKTtcbiAgICB9XG4gICAgY29uc3Qgc2Vzc2lvbkhhbmRsZSA9IHNlc3Npb25bMF07XG4gICAgY29uc3QgaW5wdXROYW1lc1VURjhFbmNvZGVkID0gc2Vzc2lvblsxXTtcbiAgICBjb25zdCBvdXRwdXROYW1lc1VURjhFbmNvZGVkID0gc2Vzc2lvblsyXTtcbiAgICBjb25zdCBpb0JpbmRpbmdTdGF0ZSA9IHNlc3Npb25bM107XG4gICAgY29uc3QgZW5hYmxlR3JhcGhDYXB0dXJlID0gc2Vzc2lvbls0XTtcbiAgICBjb25zdCBpbnB1dE91dHB1dEJvdW5kID0gc2Vzc2lvbls1XTtcbiAgICBjb25zdCBpbnB1dENvdW50ID0gaW5wdXRJbmRpY2VzLmxlbmd0aDtcbiAgICBjb25zdCBvdXRwdXRDb3VudCA9IG91dHB1dEluZGljZXMubGVuZ3RoO1xuICAgIGxldCBydW5PcHRpb25zSGFuZGxlID0gMDtcbiAgICBsZXQgcnVuT3B0aW9uc0FsbG9jcyA9IFtdO1xuICAgIGNvbnN0IGlucHV0VGVuc29ySGFuZGxlcyA9IFtdO1xuICAgIGNvbnN0IG91dHB1dFRlbnNvckhhbmRsZXMgPSBbXTtcbiAgICBjb25zdCBpbnB1dE91dHB1dEFsbG9jcyA9IFtdO1xuICAgIGNvbnN0IGJlZm9yZVJ1blN0YWNrID0gd2FzbTIuc3RhY2tTYXZlKCk7XG4gICAgY29uc3QgaW5wdXRWYWx1ZXNPZmZzZXQgPSB3YXNtMi5zdGFja0FsbG9jKGlucHV0Q291bnQgKiA0KTtcbiAgICBjb25zdCBpbnB1dE5hbWVzT2Zmc2V0ID0gd2FzbTIuc3RhY2tBbGxvYyhpbnB1dENvdW50ICogNCk7XG4gICAgY29uc3Qgb3V0cHV0VmFsdWVzT2Zmc2V0ID0gd2FzbTIuc3RhY2tBbGxvYyhvdXRwdXRDb3VudCAqIDQpO1xuICAgIGNvbnN0IG91dHB1dE5hbWVzT2Zmc2V0ID0gd2FzbTIuc3RhY2tBbGxvYyhvdXRwdXRDb3VudCAqIDQpO1xuICAgIHRyeSB7XG4gICAgICBbcnVuT3B0aW9uc0hhbmRsZSwgcnVuT3B0aW9uc0FsbG9jc10gPSBzZXRSdW5PcHRpb25zKG9wdGlvbnMpO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbnB1dENvdW50OyBpKyspIHtcbiAgICAgICAgcHJlcGFyZUlucHV0T3V0cHV0VGVuc29yKFxuICAgICAgICAgIGlucHV0VGVuc29yc1tpXSxcbiAgICAgICAgICBpbnB1dFRlbnNvckhhbmRsZXMsXG4gICAgICAgICAgaW5wdXRPdXRwdXRBbGxvY3MsXG4gICAgICAgICAgc2Vzc2lvbklkLFxuICAgICAgICAgIGlucHV0SW5kaWNlc1tpXSxcbiAgICAgICAgICBlbmFibGVHcmFwaENhcHR1cmVcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb3V0cHV0Q291bnQ7IGkrKykge1xuICAgICAgICBwcmVwYXJlSW5wdXRPdXRwdXRUZW5zb3IoXG4gICAgICAgICAgb3V0cHV0VGVuc29yc1tpXSxcbiAgICAgICAgICBvdXRwdXRUZW5zb3JIYW5kbGVzLFxuICAgICAgICAgIGlucHV0T3V0cHV0QWxsb2NzLFxuICAgICAgICAgIHNlc3Npb25JZCxcbiAgICAgICAgICBpbnB1dENvdW50ICsgb3V0cHV0SW5kaWNlc1tpXSxcbiAgICAgICAgICBlbmFibGVHcmFwaENhcHR1cmVcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGxldCBpbnB1dFZhbHVlc0luZGV4ID0gaW5wdXRWYWx1ZXNPZmZzZXQgLyA0O1xuICAgICAgbGV0IGlucHV0TmFtZXNJbmRleCA9IGlucHV0TmFtZXNPZmZzZXQgLyA0O1xuICAgICAgbGV0IG91dHB1dFZhbHVlc0luZGV4ID0gb3V0cHV0VmFsdWVzT2Zmc2V0IC8gNDtcbiAgICAgIGxldCBvdXRwdXROYW1lc0luZGV4ID0gb3V0cHV0TmFtZXNPZmZzZXQgLyA0O1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbnB1dENvdW50OyBpKyspIHtcbiAgICAgICAgd2FzbTIuSEVBUFUzMltpbnB1dFZhbHVlc0luZGV4KytdID0gaW5wdXRUZW5zb3JIYW5kbGVzW2ldO1xuICAgICAgICB3YXNtMi5IRUFQVTMyW2lucHV0TmFtZXNJbmRleCsrXSA9IGlucHV0TmFtZXNVVEY4RW5jb2RlZFtpbnB1dEluZGljZXNbaV1dO1xuICAgICAgfVxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvdXRwdXRDb3VudDsgaSsrKSB7XG4gICAgICAgIHdhc20yLkhFQVBVMzJbb3V0cHV0VmFsdWVzSW5kZXgrK10gPSBvdXRwdXRUZW5zb3JIYW5kbGVzW2ldO1xuICAgICAgICB3YXNtMi5IRUFQVTMyW291dHB1dE5hbWVzSW5kZXgrK10gPSBvdXRwdXROYW1lc1VURjhFbmNvZGVkW291dHB1dEluZGljZXNbaV1dO1xuICAgICAgfVxuICAgICAgaWYgKGZhbHNlKSB7XG4gICAgICAgIGNvbnN0IHsgaGFuZGxlLCBvdXRwdXRQcmVmZXJyZWRMb2NhdGlvbnMsIG91dHB1dFByZWZlcnJlZExvY2F0aW9uc0VuY29kZWQgfSA9IGlvQmluZGluZ1N0YXRlO1xuICAgICAgICBpZiAoaW5wdXROYW1lc1VURjhFbmNvZGVkLmxlbmd0aCAhPT0gaW5wdXRDb3VudCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgaW5wdXQgY291bnQgZnJvbSBmZWVkcyAoJHtpbnB1dENvdW50fSkgaXMgZXhwZWN0ZWQgdG8gYmUgYWx3YXlzIGVxdWFsIHRvIG1vZGVsJ3MgaW5wdXQgY291bnQgKCR7aW5wdXROYW1lc1VURjhFbmNvZGVkLmxlbmd0aH0pLmApO1xuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaW5wdXRDb3VudDsgaSsrKSB7XG4gICAgICAgICAgY29uc3QgaW5kZXggPSBpbnB1dEluZGljZXNbaV07XG4gICAgICAgICAgY29uc3QgZXJyb3JDb2RlMiA9IGF3YWl0IHdhc20yLl9PcnRCaW5kSW5wdXQoaGFuZGxlLCBpbnB1dE5hbWVzVVRGOEVuY29kZWRbaW5kZXhdLCBpbnB1dFRlbnNvckhhbmRsZXNbaV0pO1xuICAgICAgICAgIGlmIChlcnJvckNvZGUyICE9PSAwKSB7XG4gICAgICAgICAgICBjaGVja0xhc3RFcnJvcihgQ2FuJ3QgYmluZCBpbnB1dFske2l9XSBmb3Igc2Vzc2lvbj0ke3Nlc3Npb25JZH0uYCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb3V0cHV0Q291bnQ7IGkrKykge1xuICAgICAgICAgIGNvbnN0IGluZGV4ID0gb3V0cHV0SW5kaWNlc1tpXTtcbiAgICAgICAgICBjb25zdCBsb2NhdGlvbiA9IG91dHB1dFRlbnNvcnNbaV0/LlszXTtcbiAgICAgICAgICBpZiAobG9jYXRpb24pIHtcbiAgICAgICAgICAgIGNvbnN0IGVycm9yQ29kZTIgPSB3YXNtMi5fT3J0QmluZE91dHB1dChoYW5kbGUsIG91dHB1dE5hbWVzVVRGOEVuY29kZWRbaW5kZXhdLCBvdXRwdXRUZW5zb3JIYW5kbGVzW2ldLCAwKTtcbiAgICAgICAgICAgIGlmIChlcnJvckNvZGUyICE9PSAwKSB7XG4gICAgICAgICAgICAgIGNoZWNrTGFzdEVycm9yKGBDYW4ndCBiaW5kIHByZS1hbGxvY2F0ZWQgb3V0cHV0WyR7aX1dIGZvciBzZXNzaW9uPSR7c2Vzc2lvbklkfS5gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgZXJyb3JDb2RlMiA9IHdhc20yLl9PcnRCaW5kT3V0cHV0KGhhbmRsZSwgb3V0cHV0TmFtZXNVVEY4RW5jb2RlZFtpbmRleF0sIDAsIG91dHB1dFByZWZlcnJlZExvY2F0aW9uc0VuY29kZWRbaW5kZXhdKTtcbiAgICAgICAgICAgIGlmIChlcnJvckNvZGUyICE9PSAwKSB7XG4gICAgICAgICAgICAgIGNoZWNrTGFzdEVycm9yKGBDYW4ndCBiaW5kIG91dHB1dFske2l9XSB0byAke291dHB1dFByZWZlcnJlZExvY2F0aW9uc1tpXX0gZm9yIHNlc3Npb249JHtzZXNzaW9uSWR9LmApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBhY3RpdmVTZXNzaW9ucy5zZXQoXG4gICAgICAgICAgc2Vzc2lvbklkLFxuICAgICAgICAgIFtzZXNzaW9uSGFuZGxlLCBpbnB1dE5hbWVzVVRGOEVuY29kZWQsIG91dHB1dE5hbWVzVVRGOEVuY29kZWQsIGlvQmluZGluZ1N0YXRlLCBlbmFibGVHcmFwaENhcHR1cmUsIHRydWVdXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICB3YXNtMi5qc2VwT25SdW5TdGFydD8uKHNlc3Npb25IYW5kbGUpO1xuICAgICAgbGV0IGVycm9yQ29kZTtcbiAgICAgIGlmIChmYWxzZSkge1xuICAgICAgICBlcnJvckNvZGUgPSBhd2FpdCB3YXNtMi5fT3J0UnVuV2l0aEJpbmRpbmcoXG4gICAgICAgICAgc2Vzc2lvbkhhbmRsZSxcbiAgICAgICAgICBpb0JpbmRpbmdTdGF0ZS5oYW5kbGUsXG4gICAgICAgICAgb3V0cHV0Q291bnQsXG4gICAgICAgICAgb3V0cHV0VmFsdWVzT2Zmc2V0LFxuICAgICAgICAgIHJ1bk9wdGlvbnNIYW5kbGVcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVycm9yQ29kZSA9IGF3YWl0IHdhc20yLl9PcnRSdW4oXG4gICAgICAgICAgc2Vzc2lvbkhhbmRsZSxcbiAgICAgICAgICBpbnB1dE5hbWVzT2Zmc2V0LFxuICAgICAgICAgIGlucHV0VmFsdWVzT2Zmc2V0LFxuICAgICAgICAgIGlucHV0Q291bnQsXG4gICAgICAgICAgb3V0cHV0TmFtZXNPZmZzZXQsXG4gICAgICAgICAgb3V0cHV0Q291bnQsXG4gICAgICAgICAgb3V0cHV0VmFsdWVzT2Zmc2V0LFxuICAgICAgICAgIHJ1bk9wdGlvbnNIYW5kbGVcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmIChlcnJvckNvZGUgIT09IDApIHtcbiAgICAgICAgY2hlY2tMYXN0RXJyb3IoXCJmYWlsZWQgdG8gY2FsbCBPcnRSdW4oKS5cIik7XG4gICAgICB9XG4gICAgICBjb25zdCBvdXRwdXQgPSBbXTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb3V0cHV0Q291bnQ7IGkrKykge1xuICAgICAgICBjb25zdCB0ZW5zb3IgPSB3YXNtMi5IRUFQVTMyW291dHB1dFZhbHVlc09mZnNldCAvIDQgKyBpXTtcbiAgICAgICAgaWYgKHRlbnNvciA9PT0gb3V0cHV0VGVuc29ySGFuZGxlc1tpXSkge1xuICAgICAgICAgIG91dHB1dC5wdXNoKG91dHB1dFRlbnNvcnNbaV0pO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGJlZm9yZUdldFRlbnNvckRhdGFTdGFjayA9IHdhc20yLnN0YWNrU2F2ZSgpO1xuICAgICAgICBjb25zdCB0ZW5zb3JEYXRhT2Zmc2V0ID0gd2FzbTIuc3RhY2tBbGxvYyg0ICogNCk7XG4gICAgICAgIGxldCBrZWVwT3V0cHV0VGVuc29yID0gZmFsc2U7XG4gICAgICAgIGxldCB0eXBlLCBkYXRhT2Zmc2V0ID0gMDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjb25zdCBlcnJvckNvZGUyID0gd2FzbTIuX09ydEdldFRlbnNvckRhdGEoXG4gICAgICAgICAgICB0ZW5zb3IsXG4gICAgICAgICAgICB0ZW5zb3JEYXRhT2Zmc2V0LFxuICAgICAgICAgICAgdGVuc29yRGF0YU9mZnNldCArIDQsXG4gICAgICAgICAgICB0ZW5zb3JEYXRhT2Zmc2V0ICsgOCxcbiAgICAgICAgICAgIHRlbnNvckRhdGFPZmZzZXQgKyAxMlxuICAgICAgICAgICk7XG4gICAgICAgICAgaWYgKGVycm9yQ29kZTIgIT09IDApIHtcbiAgICAgICAgICAgIGNoZWNrTGFzdEVycm9yKGBDYW4ndCBhY2Nlc3Mgb3V0cHV0IHRlbnNvciBkYXRhIG9uIGluZGV4ICR7aX0uYCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGxldCB0ZW5zb3JEYXRhSW5kZXggPSB0ZW5zb3JEYXRhT2Zmc2V0IC8gNDtcbiAgICAgICAgICBjb25zdCBkYXRhVHlwZSA9IHdhc20yLkhFQVBVMzJbdGVuc29yRGF0YUluZGV4KytdO1xuICAgICAgICAgIGRhdGFPZmZzZXQgPSB3YXNtMi5IRUFQVTMyW3RlbnNvckRhdGFJbmRleCsrXTtcbiAgICAgICAgICBjb25zdCBkaW1zT2Zmc2V0ID0gd2FzbTIuSEVBUFUzMlt0ZW5zb3JEYXRhSW5kZXgrK107XG4gICAgICAgICAgY29uc3QgZGltc0xlbmd0aCA9IHdhc20yLkhFQVBVMzJbdGVuc29yRGF0YUluZGV4KytdO1xuICAgICAgICAgIGNvbnN0IGRpbXMgPSBbXTtcbiAgICAgICAgICBmb3IgKGxldCBpMiA9IDA7IGkyIDwgZGltc0xlbmd0aDsgaTIrKykge1xuICAgICAgICAgICAgZGltcy5wdXNoKHdhc20yLkhFQVBVMzJbZGltc09mZnNldCAvIDQgKyBpMl0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICB3YXNtMi5fT3J0RnJlZShkaW1zT2Zmc2V0KTtcbiAgICAgICAgICBjb25zdCBzaXplID0gZGltcy5yZWR1Y2UoKGEsIGIpID0+IGEgKiBiLCAxKTtcbiAgICAgICAgICB0eXBlID0gdGVuc29yRGF0YVR5cGVFbnVtVG9TdHJpbmcoZGF0YVR5cGUpO1xuICAgICAgICAgIGNvbnN0IHByZWZlcnJlZExvY2F0aW9uID0gaW9CaW5kaW5nU3RhdGU/Lm91dHB1dFByZWZlcnJlZExvY2F0aW9uc1tvdXRwdXRJbmRpY2VzW2ldXTtcbiAgICAgICAgICBpZiAodHlwZSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgaWYgKHByZWZlcnJlZExvY2F0aW9uID09PSBcImdwdS1idWZmZXJcIikge1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJTdHJpbmcgdGVuc29yIGlzIG5vdCBzdXBwb3J0ZWQgb24gR1BVLlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHN0cmluZ0RhdGEgPSBbXTtcbiAgICAgICAgICAgIGxldCBkYXRhSW5kZXggPSBkYXRhT2Zmc2V0IC8gNDtcbiAgICAgICAgICAgIGZvciAobGV0IGkyID0gMDsgaTIgPCBzaXplOyBpMisrKSB7XG4gICAgICAgICAgICAgIGNvbnN0IG9mZnNldCA9IHdhc20yLkhFQVBVMzJbZGF0YUluZGV4KytdO1xuICAgICAgICAgICAgICBjb25zdCBtYXhCeXRlc1RvUmVhZCA9IGkyID09PSBzaXplIC0gMSA/IHZvaWQgMCA6IHdhc20yLkhFQVBVMzJbZGF0YUluZGV4XSAtIG9mZnNldDtcbiAgICAgICAgICAgICAgc3RyaW5nRGF0YS5wdXNoKHdhc20yLlVURjhUb1N0cmluZyhvZmZzZXQsIG1heEJ5dGVzVG9SZWFkKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvdXRwdXQucHVzaChbdHlwZSwgZGltcywgc3RyaW5nRGF0YSwgXCJjcHVcIl0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAocHJlZmVycmVkTG9jYXRpb24gPT09IFwiZ3B1LWJ1ZmZlclwiICYmIHNpemUgPiAwKSB7XG4gICAgICAgICAgICAgIGNvbnN0IGdwdUJ1ZmZlciA9IHdhc20yLmpzZXBHZXRCdWZmZXIoZGF0YU9mZnNldCk7XG4gICAgICAgICAgICAgIGNvbnN0IGVsZW1lbnRTaXplID0gZ2V0VGVuc29yRWxlbWVudFNpemUoZGF0YVR5cGUpO1xuICAgICAgICAgICAgICBpZiAoZWxlbWVudFNpemUgPT09IHZvaWQgMCB8fCAhaXNHcHVCdWZmZXJTdXBwb3J0ZWRUeXBlKHR5cGUpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbnN1cHBvcnRlZCBkYXRhIHR5cGU6ICR7dHlwZX1gKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBrZWVwT3V0cHV0VGVuc29yID0gdHJ1ZTtcbiAgICAgICAgICAgICAgb3V0cHV0LnB1c2goW1xuICAgICAgICAgICAgICAgIHR5cGUsXG4gICAgICAgICAgICAgICAgZGltcyxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBncHVCdWZmZXIsXG4gICAgICAgICAgICAgICAgICBkb3dubG9hZDogd2FzbTIuanNlcENyZWF0ZURvd25sb2FkZXIoZ3B1QnVmZmVyLCBzaXplICogZWxlbWVudFNpemUsIHR5cGUpLFxuICAgICAgICAgICAgICAgICAgZGlzcG9zZTogKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB3YXNtMi5fT3J0UmVsZWFzZVRlbnNvcih0ZW5zb3IpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXCJncHUtYnVmZmVyXCJcbiAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBjb25zdCB0eXBlZEFycmF5Q29uc3RydWN0b3IgPSB0ZW5zb3JUeXBlVG9UeXBlZEFycmF5Q29uc3RydWN0b3IodHlwZSk7XG4gICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBuZXcgdHlwZWRBcnJheUNvbnN0cnVjdG9yKHNpemUpO1xuICAgICAgICAgICAgICBuZXcgVWludDhBcnJheShkYXRhLmJ1ZmZlciwgZGF0YS5ieXRlT2Zmc2V0LCBkYXRhLmJ5dGVMZW5ndGgpLnNldCh3YXNtMi5IRUFQVTguc3ViYXJyYXkoZGF0YU9mZnNldCwgZGF0YU9mZnNldCArIGRhdGEuYnl0ZUxlbmd0aCkpO1xuICAgICAgICAgICAgICBvdXRwdXQucHVzaChbdHlwZSwgZGltcywgZGF0YSwgXCJjcHVcIl0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICB3YXNtMi5zdGFja1Jlc3RvcmUoYmVmb3JlR2V0VGVuc29yRGF0YVN0YWNrKTtcbiAgICAgICAgICBpZiAodHlwZSA9PT0gXCJzdHJpbmdcIiAmJiBkYXRhT2Zmc2V0KSB7XG4gICAgICAgICAgICB3YXNtMi5fZnJlZShkYXRhT2Zmc2V0KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCFrZWVwT3V0cHV0VGVuc29yKSB7XG4gICAgICAgICAgICB3YXNtMi5fT3J0UmVsZWFzZVRlbnNvcih0ZW5zb3IpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGlvQmluZGluZ1N0YXRlICYmICFlbmFibGVHcmFwaENhcHR1cmUpIHtcbiAgICAgICAgd2FzbTIuX09ydENsZWFyQm91bmRPdXRwdXRzKGlvQmluZGluZ1N0YXRlLmhhbmRsZSk7XG4gICAgICAgIGFjdGl2ZVNlc3Npb25zLnNldChcbiAgICAgICAgICBzZXNzaW9uSWQsXG4gICAgICAgICAgW3Nlc3Npb25IYW5kbGUsIGlucHV0TmFtZXNVVEY4RW5jb2RlZCwgb3V0cHV0TmFtZXNVVEY4RW5jb2RlZCwgaW9CaW5kaW5nU3RhdGUsIGVuYWJsZUdyYXBoQ2FwdHVyZSwgZmFsc2VdXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICByZXR1cm4gb3V0cHV0O1xuICAgIH0gZmluYWxseSB7XG4gICAgICB3YXNtMi5zdGFja1Jlc3RvcmUoYmVmb3JlUnVuU3RhY2spO1xuICAgICAgaW5wdXRUZW5zb3JIYW5kbGVzLmZvckVhY2goKHYpID0+IHdhc20yLl9PcnRSZWxlYXNlVGVuc29yKHYpKTtcbiAgICAgIG91dHB1dFRlbnNvckhhbmRsZXMuZm9yRWFjaCgodikgPT4gd2FzbTIuX09ydFJlbGVhc2VUZW5zb3IodikpO1xuICAgICAgaW5wdXRPdXRwdXRBbGxvY3MuZm9yRWFjaCgocCkgPT4gd2FzbTIuX2ZyZWUocCkpO1xuICAgICAgaWYgKHJ1bk9wdGlvbnNIYW5kbGUgIT09IDApIHtcbiAgICAgICAgd2FzbTIuX09ydFJlbGVhc2VSdW5PcHRpb25zKHJ1bk9wdGlvbnNIYW5kbGUpO1xuICAgICAgfVxuICAgICAgcnVuT3B0aW9uc0FsbG9jcy5mb3JFYWNoKChwKSA9PiB3YXNtMi5fZnJlZShwKSk7XG4gICAgfVxuICB9O1xuICB2YXIgZW5kUHJvZmlsaW5nID0gKHNlc3Npb25JZCkgPT4ge1xuICAgIGNvbnN0IHdhc20yID0gZ2V0SW5zdGFuY2UoKTtcbiAgICBjb25zdCBzZXNzaW9uID0gYWN0aXZlU2Vzc2lvbnMuZ2V0KHNlc3Npb25JZCk7XG4gICAgaWYgKCFzZXNzaW9uKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIHNlc3Npb24gaWRcIik7XG4gICAgfVxuICAgIGNvbnN0IHNlc3Npb25IYW5kbGUgPSBzZXNzaW9uWzBdO1xuICAgIGNvbnN0IHByb2ZpbGVGaWxlTmFtZSA9IHdhc20yLl9PcnRFbmRQcm9maWxpbmcoc2Vzc2lvbkhhbmRsZSk7XG4gICAgaWYgKHByb2ZpbGVGaWxlTmFtZSA9PT0gMCkge1xuICAgICAgY2hlY2tMYXN0RXJyb3IoXCJDYW4ndCBnZXQgYW4gcHJvZmlsZSBmaWxlIG5hbWUuXCIpO1xuICAgIH1cbiAgICB3YXNtMi5fT3J0RnJlZShwcm9maWxlRmlsZU5hbWUpO1xuICB9O1xuICB2YXIgZXh0cmFjdFRyYW5zZmVyYWJsZUJ1ZmZlcnMgPSAodGVuc29ycykgPT4ge1xuICAgIGNvbnN0IGJ1ZmZlcnMgPSBbXTtcbiAgICBmb3IgKGNvbnN0IHRlbnNvciBvZiB0ZW5zb3JzKSB7XG4gICAgICBjb25zdCBkYXRhID0gdGVuc29yWzJdO1xuICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGRhdGEpICYmIFwiYnVmZmVyXCIgaW4gZGF0YSkge1xuICAgICAgICBidWZmZXJzLnB1c2goZGF0YS5idWZmZXIpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYnVmZmVycztcbiAgfTtcblxuICAvLyB3ZWIvbGliL3dhc20vcHJveHktd29ya2VyL21haW4udHNcbiAgc2VsZi5vbm1lc3NhZ2UgPSAoZXYpID0+IHtcbiAgICBjb25zdCB7IHR5cGUsIGluOiBtZXNzYWdlIH0gPSBldi5kYXRhO1xuICAgIHRyeSB7XG4gICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgY2FzZSBcImluaXQtd2FzbVwiOlxuICAgICAgICAgIGluaXRpYWxpemVXZWJBc3NlbWJseShtZXNzYWdlLndhc20pLnRoZW4oXG4gICAgICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgICAgIGluaXRSdW50aW1lKG1lc3NhZ2UpLnRoZW4oXG4gICAgICAgICAgICAgICAgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgcG9zdE1lc3NhZ2UoeyB0eXBlIH0pO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgKGVycikgPT4ge1xuICAgICAgICAgICAgICAgICAgcG9zdE1lc3NhZ2UoeyB0eXBlLCBlcnIgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIChlcnIpID0+IHtcbiAgICAgICAgICAgICAgcG9zdE1lc3NhZ2UoeyB0eXBlLCBlcnIgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcImluaXQtZXBcIjoge1xuICAgICAgICAgIGNvbnN0IHsgZXBOYW1lLCBlbnYgfSA9IG1lc3NhZ2U7XG4gICAgICAgICAgaW5pdEVwKGVudiwgZXBOYW1lKS50aGVuKFxuICAgICAgICAgICAgKCkgPT4ge1xuICAgICAgICAgICAgICBwb3N0TWVzc2FnZSh7IHR5cGUgfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgKGVycikgPT4ge1xuICAgICAgICAgICAgICBwb3N0TWVzc2FnZSh7IHR5cGUsIGVyciB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICApO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgXCJjb3B5LWZyb21cIjoge1xuICAgICAgICAgIGNvbnN0IHsgYnVmZmVyIH0gPSBtZXNzYWdlO1xuICAgICAgICAgIGNvbnN0IGJ1ZmZlckRhdGEgPSBjb3B5RnJvbUV4dGVybmFsQnVmZmVyKGJ1ZmZlcik7XG4gICAgICAgICAgcG9zdE1lc3NhZ2UoeyB0eXBlLCBvdXQ6IGJ1ZmZlckRhdGEgfSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBcImNyZWF0ZVwiOiB7XG4gICAgICAgICAgY29uc3QgeyBtb2RlbCwgb3B0aW9ucyB9ID0gbWVzc2FnZTtcbiAgICAgICAgICBjcmVhdGVTZXNzaW9uKG1vZGVsLCBvcHRpb25zKS50aGVuKFxuICAgICAgICAgICAgKHNlc3Npb25NZXRhZGF0YSkgPT4ge1xuICAgICAgICAgICAgICBwb3N0TWVzc2FnZSh7IHR5cGUsIG91dDogc2Vzc2lvbk1ldGFkYXRhIH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIChlcnIpID0+IHtcbiAgICAgICAgICAgICAgcG9zdE1lc3NhZ2UoeyB0eXBlLCBlcnIgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFwicmVsZWFzZVwiOlxuICAgICAgICAgIHJlbGVhc2VTZXNzaW9uKG1lc3NhZ2UpO1xuICAgICAgICAgIHBvc3RNZXNzYWdlKHsgdHlwZSB9KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcInJ1blwiOiB7XG4gICAgICAgICAgY29uc3QgeyBzZXNzaW9uSWQsIGlucHV0SW5kaWNlcywgaW5wdXRzLCBvdXRwdXRJbmRpY2VzLCBvcHRpb25zIH0gPSBtZXNzYWdlO1xuICAgICAgICAgIHJ1bihzZXNzaW9uSWQsIGlucHV0SW5kaWNlcywgaW5wdXRzLCBvdXRwdXRJbmRpY2VzLCBuZXcgQXJyYXkob3V0cHV0SW5kaWNlcy5sZW5ndGgpLmZpbGwobnVsbCksIG9wdGlvbnMpLnRoZW4oXG4gICAgICAgICAgICAob3V0cHV0cykgPT4ge1xuICAgICAgICAgICAgICBpZiAob3V0cHV0cy5zb21lKChvKSA9PiBvWzNdICE9PSBcImNwdVwiKSkge1xuICAgICAgICAgICAgICAgIHBvc3RNZXNzYWdlKHsgdHlwZSwgZXJyOiBcIlByb3h5IGRvZXMgbm90IHN1cHBvcnQgbm9uLWNwdSB0ZW5zb3IgbG9jYXRpb24uXCIgfSk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcG9zdE1lc3NhZ2UoXG4gICAgICAgICAgICAgICAgICB7IHR5cGUsIG91dDogb3V0cHV0cyB9LFxuICAgICAgICAgICAgICAgICAgZXh0cmFjdFRyYW5zZmVyYWJsZUJ1ZmZlcnMoWy4uLmlucHV0cywgLi4ub3V0cHV0c10pXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIChlcnIpID0+IHtcbiAgICAgICAgICAgICAgcG9zdE1lc3NhZ2UoeyB0eXBlLCBlcnIgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFwiZW5kLXByb2ZpbGluZ1wiOlxuICAgICAgICAgIGVuZFByb2ZpbGluZyhtZXNzYWdlKTtcbiAgICAgICAgICBwb3N0TWVzc2FnZSh7IHR5cGUgfSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBwb3N0TWVzc2FnZSh7IHR5cGUsIGVyciB9KTtcbiAgICB9XG4gIH07XG59KSgpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxld29nSUNKMlpYSnphVzl1SWpvZ015d0tJQ0FpYzI5MWNtTmxjeUk2SUZzaWJtOWtaV3B6TFdsbmJtOXlaVHBtY3lJc0lDSnViMlJsYW5NdGFXZHViM0psT25CaGRHZ2lMQ0FpTGk0dkxpNHZiR2xpTDNkaGMyMHZZbWx1WkdsdVp5OXZjblF0ZEhKaGFXNXBibWN0ZDJGemJTMXphVzFrTG1weklpd2dJbTV2WkdWcWN5MXBaMjV2Y21VNmQyOXlhMlZ5WDNSb2NtVmhaSE1pTENBaWJtOWtaV3B6TFdsbmJtOXlaVHB3WlhKbVgyaHZiMnR6SWl3Z0ltNXZaR1ZxY3kxcFoyNXZjbVU2YjNNaUxDQWlMaTR2TGk0dmJHbGlMM2RoYzIwdlltbHVaR2x1Wnk5dmNuUXRkMkZ6YlMxMGFISmxZV1JsWkM1cWN5SXNJQ0l1TGk4dUxpOXNhV0l2ZDJGemJTOWlhVzVrYVc1bkwyOXlkQzEzWVhOdExYUm9jbVZoWkdWa0xuZHZjbXRsY2k1cWN5SXNJQ0p1YjJSbGFuTXRhV2R1YjNKbE9tNXZaR1U2Y0dGMGFDSXNJQ0l1TGk4dUxpOXNhV0l2ZDJGemJTOTNZWE50TFdaaFkzUnZjbmt1ZEhNaUxDQWlMaTR2TGk0dmJHbGlMM2RoYzIwdmQyRnpiUzExZEdsc2N5NTBjeUlzSUNJdUxpOHVMaTlzYVdJdmQyRnpiUzl5ZFc0dGIzQjBhVzl1Y3k1MGN5SXNJQ0l1TGk4dUxpOXNhV0l2ZDJGemJTOXpaWE56YVc5dUxXOXdkR2x2Ym5NdWRITWlMQ0FpTGk0dkxpNHZiR2xpTDNkaGMyMHZkMkZ6YlMxamIyMXRiMjR1ZEhNaUxDQWlMaTR2TGk0dmJHbGlMM2RoYzIwdmQyRnpiUzExZEdsc2N5MXNiMkZrTFdacGJHVXVkSE1pTENBaWJtOWtaV3B6TFdsbmJtOXlaVHB1YjJSbE9tWnpMM0J5YjIxcGMyVnpJaXdnSWk0dUx5NHVMMnhwWWk5M1lYTnRMM2RoYzIwdFkyOXlaUzFwYlhCc0xuUnpJaXdnSWk0dUx5NHVMMnhwWWk5M1lYTnRMM0J5YjNoNUxYZHZjbXRsY2k5dFlXbHVMblJ6SWwwc0NpQWdJbk52ZFhKalpYTkRiMjUwWlc1MElqb2dXeUpsZUhCdmNuUWdZMjl1YzNRZ2NtVmhaRVpwYkdVZ1BTQjFibVJsWm1sdVpXUTdaWGh3YjNKMElHTnZibk4wSUhKbFlXUkdhV3hsVTNsdVl5QTlJSFZ1WkdWbWFXNWxaRHRsZUhCdmNuUWdZMjl1YzNRZ1kzSmxZWFJsVW1WaFpGTjBjbVZoYlNBOUlIVnVaR1ZtYVc1bFpEc2lMQ0FpWlhod2IzSjBJR052Ym5OMElHcHZhVzRnUFNCMWJtUmxabWx1WldRN0lpd2dJbHh1ZG1GeUlHOXlkRmRoYzIwZ1BTQW9LQ2tnUFQ0Z2UxeHVJQ0IyWVhJZ1gzTmpjbWx3ZEVScGNpQTlJSFI1Y0dWdlppQmtiMk4xYldWdWRDQWhQVDBnSjNWdVpHVm1hVzVsWkNjZ0ppWWdaRzlqZFcxbGJuUXVZM1Z5Y21WdWRGTmpjbWx3ZENBL0lHUnZZM1Z0Wlc1MExtTjFjbkpsYm5SVFkzSnBjSFF1YzNKaklEb2dkVzVrWldacGJtVmtPMXh1SUNCcFppQW9kSGx3Wlc5bUlGOWZabWxzWlc1aGJXVWdJVDA5SUNkMWJtUmxabWx1WldRbktTQmZjMk55YVhCMFJHbHlJRDBnWDNOamNtbHdkRVJwY2lCOGZDQmZYMlpwYkdWdVlXMWxPMXh1SUNCeVpYUjFjbTRnS0Z4dVpuVnVZM1JwYjI0b2JXOWtkV3hsUVhKbklEMGdlMzBwSUh0Y2JseHVkbUZ5SUdVOWJXOWtkV3hsUVhKbkxHc3NiRHRsTG5KbFlXUjVQVzVsZHlCUWNtOXRhWE5sS0NoaExHSXBQVDU3YXoxaE8ydzlZbjBwTzNaaGNpQmhZVDFQWW1wbFkzUXVZWE56YVdkdUtIdDlMR1VwTEdKaFBWd2lMaTkwYUdsekxuQnliMmR5WVcxY0lpeGpZVDFjSW05aWFtVmpkRndpUFQxMGVYQmxiMllnZDJsdVpHOTNMSEU5WENKbWRXNWpkR2x2Ymx3aVBUMTBlWEJsYjJZZ2FXMXdiM0owVTJOeWFYQjBjeXhrWVQxY0ltOWlhbVZqZEZ3aVBUMTBlWEJsYjJZZ2NISnZZMlZ6Y3lZbVhDSnZZbXBsWTNSY0lqMDlkSGx3Wlc5bUlIQnliMk5sYzNNdWRtVnljMmx2Ym5NbUpsd2ljM1J5YVc1blhDSTlQWFI1Y0dWdlppQndjbTlqWlhOekxuWmxjbk5wYjI1ekxtNXZaR1VzZGoxY0lsd2lMSGdzZWl4Qk8xeHVhV1lvWkdFcGUzWmhjaUJtY3oxeVpYRjFhWEpsS0Z3aVpuTmNJaWtzUWoxeVpYRjFhWEpsS0Z3aWNHRjBhRndpS1R0MlBYRS9RaTVrYVhKdVlXMWxLSFlwSzF3aUwxd2lPbDlmWkdseWJtRnRaU3RjSWk5Y0lqdDRQU2hoTEdJcFBUNTdZVDFES0dFcFAyNWxkeUJWVWt3b1lTazZRaTV1YjNKdFlXeHBlbVVvWVNrN2NtVjBkWEp1SUdaekxuSmxZV1JHYVd4bFUzbHVZeWhoTEdJL2RtOXBaQ0F3T2x3aWRYUm1PRndpS1gwN1FUMWhQVDU3WVQxNEtHRXNJVEFwTzJFdVluVm1abVZ5Zkh3b1lUMXVaWGNnVldsdWREaEJjbkpoZVNoaEtTazdjbVYwZFhKdUlHRjlPM285S0dFc1lpeGpMR1E5SVRBcFBUNTdZVDFES0dFcFAyNWxkeUJWVWt3b1lTazZRaTV1YjNKdFlXeHBlbVVvWVNrN1puTXVjbVZoWkVacGJHVW9ZU3hrUDNadmFXUWdNRHBjSW5WMFpqaGNJaXdvWnl4b0tUMCtlMmMvWXlobktUcGlLR1EvYUM1aWRXWm1aWEk2YUNsOUtYMDdJV1V1ZEdocGMxQnliMmR5WVcwbUpqRThjSEp2WTJWemN5NWhjbWQyTG14bGJtZDBhQ1ltS0dKaFBYQnliMk5sYzNNdVlYSm5kbHN4WFM1eVpYQnNZV05sS0M5Y1hGeGNMMmNzWENJdlhDSXBLVHR3Y205alpYTnpMbUZ5WjNZdWMyeHBZMlVvTWlrN1pTNXBibk53WldOMFBTZ3BQVDVjSWx0RmJYTmpjbWx3ZEdWdUlFMXZaSFZzWlNCdlltcGxZM1JkWENKOVpXeHpaU0JwWmloallYeDhjU2x4UDNZOVhHNXpaV3htTG14dlkyRjBhVzl1TG1oeVpXWTZYQ0oxYm1SbFptbHVaV1JjSWlFOWRIbHdaVzltSUdSdlkzVnRaVzUwSmlaa2IyTjFiV1Z1ZEM1amRYSnlaVzUwVTJOeWFYQjBKaVlvZGoxa2IyTjFiV1Z1ZEM1amRYSnlaVzUwVTJOeWFYQjBMbk55WXlrc1gzTmpjbWx3ZEVScGNpWW1LSFk5WDNOamNtbHdkRVJwY2lrc01DRTlQWFl1YVc1a1pYaFBaaWhjSW1Kc2IySTZYQ0lwUDNZOWRpNXpkV0p6ZEhJb01DeDJMbkpsY0d4aFkyVW9MMXMvSTEwdUtpOHNYQ0pjSWlrdWJHRnpkRWx1WkdWNFQyWW9YQ0l2WENJcEt6RXBPblk5WENKY0lpeDRQV0U5UG50MllYSWdZajF1WlhjZ1dFMU1TSFIwY0ZKbGNYVmxjM1E3WWk1dmNHVnVLRndpUjBWVVhDSXNZU3doTVNrN1lpNXpaVzVrS0c1MWJHd3BPM0psZEhWeWJpQmlMbkpsYzNCdmJuTmxWR1Y0ZEgwc2NTWW1LRUU5WVQwK2UzWmhjaUJpUFc1bGR5QllUVXhJZEhSd1VtVnhkV1Z6ZER0aUxtOXdaVzRvWENKSFJWUmNJaXhoTENFeEtUdGlMbkpsYzNCdmJuTmxWSGx3WlQxY0ltRnljbUY1WW5WbVptVnlYQ0k3WWk1elpXNWtLRzUxYkd3cE8zSmxkSFZ5YmlCdVpYY2dWV2x1ZERoQmNuSmhlU2hpTG5KbGMzQnZibk5sS1gwcExIbzlLR0VzWWl4aktUMCtlM1poY2lCa1BXNWxkeUJZVFV4SWRIUndVbVZ4ZFdWemREdGtMbTl3Wlc0b1hDSkhSVlJjSWl4aExDRXdLVHRrTG5KbGMzQnZibk5sVkhsd1pUMWNibHdpWVhKeVlYbGlkV1ptWlhKY0lqdGtMbTl1Ykc5aFpEMG9LVDArZXpJd01EMDlaQzV6ZEdGMGRYTjhmREE5UFdRdWMzUmhkSFZ6Smlaa0xuSmxjM0J2Ym5ObFAySW9aQzV5WlhOd2IyNXpaU2s2WXlncGZUdGtMbTl1WlhKeWIzSTlZenRrTG5ObGJtUW9iblZzYkNsOU8zWmhjaUJsWVQxamIyNXpiMnhsTG14dlp5NWlhVzVrS0dOdmJuTnZiR1VwTEVROVkyOXVjMjlzWlM1bGNuSnZjaTVpYVc1a0tHTnZibk52YkdVcE8wOWlhbVZqZEM1aGMzTnBaMjRvWlN4aFlTazdZV0U5Ym5Wc2JEdGNJbTlpYW1WamRGd2lJVDEwZVhCbGIyWWdWMlZpUVhOelpXMWliSGttSmtVb1hDSnVieUJ1WVhScGRtVWdkMkZ6YlNCemRYQndiM0owSUdSbGRHVmpkR1ZrWENJcE8zWmhjaUJHTEdaaFBTRXhMRWNzU0N4SkxFb3NhR0U3WEc1bWRXNWpkR2x2YmlCcFlTZ3BlM1poY2lCaFBVWXVZblZtWm1WeU8yVXVTRVZCVURnOVJ6MXVaWGNnU1c1ME9FRnljbUY1S0dFcE8yVXVTRVZCVURFMlBXNWxkeUJKYm5ReE5rRnljbUY1S0dFcE8yVXVTRVZCVUZVNFBVZzlibVYzSUZWcGJuUTRRWEp5WVhrb1lTazdaUzVJUlVGUVZURTJQVzVsZHlCVmFXNTBNVFpCY25KaGVTaGhLVHRsTGtoRlFWQXpNajFKUFc1bGR5QkpiblF6TWtGeWNtRjVLR0VwTzJVdVNFVkJVRlV6TWoxS1BXNWxkeUJWYVc1ME16SkJjbkpoZVNoaEtUdGxMa2hGUVZCR016STlibVYzSUVac2IyRjBNekpCY25KaGVTaGhLVHRsTGtoRlFWQkdOalE5YUdFOWJtVjNJRVpzYjJGME5qUkJjbkpoZVNoaEtYMTJZWElnU3oxYlhTeE1QVnRkTEdwaFBWdGRMRTA5TUN4T1BXNTFiR3dzVHoxdWRXeHNPMloxYm1OMGFXOXVJRVVvWVNsN1lUMWNJa0ZpYjNKMFpXUW9YQ0lyWVN0Y0lpbGNJanRFS0dFcE8yWmhQU0V3TzJFOWJtVjNJRmRsWWtGemMyVnRZbXg1TGxKMWJuUnBiV1ZGY25KdmNpaGhLMXdpTGlCQ2RXbHNaQ0IzYVhSb0lDMXpRVk5UUlZKVVNVOU9VeUJtYjNJZ2JXOXlaU0JwYm1adkxsd2lLVHRzS0dFcE8zUm9jbTkzSUdFN2ZWeHVkbUZ5SUd0aFBXRTlQbUV1YzNSaGNuUnpWMmwwYUNoY0ltUmhkR0U2WVhCd2JHbGpZWFJwYjI0dmIyTjBaWFF0YzNSeVpXRnRPMkpoYzJVMk5DeGNJaWtzUXoxaFBUNWhMbk4wWVhKMGMxZHBkR2dvWENKbWFXeGxPaTh2WENJcExGQTdVRDFjSW05eWRDMTBjbUZwYm1sdVp5MTNZWE50TFhOcGJXUXVkMkZ6YlZ3aU8ybG1LQ0ZyWVNoUUtTbDdkbUZ5SUd4aFBWQTdVRDFsTG14dlkyRjBaVVpwYkdVL1pTNXNiMk5oZEdWR2FXeGxLR3hoTEhZcE9uWXJiR0Y5Wm5WdVkzUnBiMjRnYldFb1lTbDdhV1lvUVNseVpYUjFjbTRnUVNoaEtUdDBhSEp2ZDF3aVltOTBhQ0JoYzNsdVl5QmhibVFnYzNsdVl5Qm1aWFJqYUdsdVp5QnZaaUIwYUdVZ2QyRnpiU0JtWVdsc1pXUmNJanQ5WEc1bWRXNWpkR2x2YmlCdVlTaGhLWHRwWmloallYeDhjU2w3YVdZb1hDSm1kVzVqZEdsdmJsd2lQVDEwZVhCbGIyWWdabVYwWTJnbUppRkRLR0VwS1hKbGRIVnliaUJtWlhSamFDaGhMSHRqY21Wa1pXNTBhV0ZzY3pwY0luTmhiV1V0YjNKcFoybHVYQ0o5S1M1MGFHVnVLR0k5UG50cFppZ2hZaTV2YXlsMGFISnZkMXdpWm1GcGJHVmtJSFJ2SUd4dllXUWdkMkZ6YlNCaWFXNWhjbmtnWm1sc1pTQmhkQ0FuWENJcllTdGNJaWRjSWp0eVpYUjFjbTRnWWk1aGNuSmhlVUoxWm1abGNpZ3BmU2t1WTJGMFkyZ29LQ2s5UG0xaEtHRXBLVHRwWmloNktYSmxkSFZ5YmlCdVpYY2dVSEp2YldselpTZ29ZaXhqS1QwK2Uzb29ZU3hrUFQ1aUtHNWxkeUJWYVc1ME9FRnljbUY1S0dRcEtTeGpLWDBwZlhKbGRIVnliaUJRY205dGFYTmxMbkpsYzI5c2RtVW9LUzUwYUdWdUtDZ3BQVDV0WVNoaEtTbDlablZ1WTNScGIyNGdiMkVvWVN4aUxHTXBlM0psZEhWeWJpQnVZU2hoS1M1MGFHVnVLR1E5UGxkbFlrRnpjMlZ0WW14NUxtbHVjM1JoYm5ScFlYUmxLR1FzWWlrcExuUm9aVzRvWkQwK1pDa3VkR2hsYmloakxHUTlQbnRFS0dCbVlXbHNaV1FnZEc4Z1lYTjVibU5vY205dWIzVnpiSGtnY0hKbGNHRnlaU0IzWVhOdE9pQWtlMlI5WUNrN1JTaGtLWDBwZlZ4dVpuVnVZM1JwYjI0Z2NHRW9ZU3hpS1h0MllYSWdZejFRTzNKbGRIVnlibHdpWm5WdVkzUnBiMjVjSWlFOWRIbHdaVzltSUZkbFlrRnpjMlZ0WW14NUxtbHVjM1JoYm5ScFlYUmxVM1J5WldGdGFXNW5mSHhyWVNoaktYeDhReWhqS1h4OFpHRjhmRndpWm5WdVkzUnBiMjVjSWlFOWRIbHdaVzltSUdabGRHTm9QMjloS0dNc1lTeGlLVHBtWlhSamFDaGpMSHRqY21Wa1pXNTBhV0ZzY3pwY0luTmhiV1V0YjNKcFoybHVYQ0o5S1M1MGFHVnVLR1E5UGxkbFlrRnpjMlZ0WW14NUxtbHVjM1JoYm5ScFlYUmxVM1J5WldGdGFXNW5LR1FzWVNrdWRHaGxiaWhpTEdaMWJtTjBhVzl1S0djcGUwUW9ZSGRoYzIwZ2MzUnlaV0Z0YVc1bklHTnZiWEJwYkdVZ1ptRnBiR1ZrT2lBa2UyZDlZQ2s3UkNoY0ltWmhiR3hwYm1jZ1ltRmpheUIwYnlCQmNuSmhlVUoxWm1abGNpQnBibk4wWVc1MGFXRjBhVzl1WENJcE8zSmxkSFZ5YmlCdllTaGpMR0VzWWlsOUtTbDlYRzUyWVhJZ1VTeHhZVDE3T1Rrek1UTTJPaWhoTEdJc1l5eGtLVDArZTJsbUtGd2lkVzVrWldacGJtVmtYQ0k5UFhSNWNHVnZaaUJsZkh3aFpTNVJZU2x5WlhSMWNtNGdNVHRoUFZJb1lUNCtQakFwTzJFdWMzUmhjblJ6VjJsMGFDaGNJaTR2WENJcEppWW9ZVDFoTG5OMVluTjBjbWx1WnlneUtTazdZVDFsTGxGaExtZGxkQ2hoS1R0cFppZ2hZU2x5WlhSMWNtNGdNanRpUGo0K1BUQTdZejQrUGowd08ybG1LR0lyWXo1aExtSjVkR1ZNWlc1bmRHZ3BjbVYwZFhKdUlETTdkSEo1ZTNKbGRIVnliaUJJTG5ObGRDaGhMbk4xWW1GeWNtRjVLR0lzWWl0aktTeGtQajQrTUQ0K1BqQXBMREI5WTJGMFkyaDdjbVYwZFhKdUlEUjlmWDA3Wm5WdVkzUnBiMjRnY21Fb1lTbDdkR2hwY3k1TFlUMWhMVEkwTzNSb2FYTXVVR0U5Wm5WdVkzUnBiMjRvWWlsN1NsdDBhR2x6TGt0aEt6UStQajR5UGo0K01GMDlZbjA3ZEdocGN5NVBZVDFtZFc1amRHbHZiaWhpS1h0S1czUm9hWE11UzJFck9ENCtQakkrUGo0d1hUMWlmVHQwYUdsekxrMWhQV1oxYm1OMGFXOXVLR0lzWXlsN2RHaHBjeTVPWVNncE8zUm9hWE11VUdFb1lpazdkR2hwY3k1UFlTaGpLWDA3ZEdocGN5NU9ZVDFtZFc1amRHbHZiaWdwZTBwYmRHaHBjeTVMWVNzeE5qNCtQakkrUGo0d1hUMHdmWDFjYm5aaGNpQnpZVDB3TEhSaFBUQXNkV0U5WENKMWJtUmxabWx1WldSY0lpRTlkSGx3Wlc5bUlGUmxlSFJFWldOdlpHVnlQMjVsZHlCVVpYaDBSR1ZqYjJSbGNpaGNJblYwWmpoY0lpazZkbTlwWkNBd0xIWmhQU2hoTEdJc1l5azlQbnRpUGo0K1BUQTdkbUZ5SUdROVlpdGpPMlp2Y2loalBXSTdZVnRqWFNZbUlTaGpQajFrS1RzcEt5dGpPMmxtS0RFMlBHTXRZaVltWVM1aWRXWm1aWEltSm5WaEtYSmxkSFZ5YmlCMVlTNWtaV052WkdVb1lTNXpkV0poY25KaGVTaGlMR01wS1R0bWIzSW9aRDFjSWx3aU8ySThZenNwZTNaaGNpQm5QV0ZiWWlzclhUdHBaaWhuSmpFeU9DbDdkbUZ5SUdnOVlWdGlLeXRkSmpZek8ybG1LREU1TWowOUtHY21NakkwS1Nsa0t6MVRkSEpwYm1jdVpuSnZiVU5vWVhKRGIyUmxLQ2huSmpNeEtUdzhObnhvS1R0bGJITmxlM1poY2lCdFBXRmJZaXNyWFNZMk16dG5QVEl5TkQwOUtHY21NalF3S1Q4b1p5WXhOU2s4UERFeWZHZzhQRFo4YlRvb1p5WTNLVHc4TVRoOGFEdzhNVEo4YlR3OE5ueGhXMklySzEwbU5qTTdOalUxTXpZK1p6OWtLejFUZEhKcGJtY3Vabkp2YlVOb1lYSkRiMlJsS0djcE9paG5MVDAyTlRVek5peGtLejFUZEhKcGJtY3Vabkp2YlVOb1lYSkRiMlJsS0RVMU1qazJmR2MrUGpFd0xEVTJNekl3ZkdjbU1UQXlNeWtwZlgxbGJITmxJR1FyUFZOMGNtbHVaeTVtY205dFEyaGhja052WkdVb1p5bDljbVYwZFhKdUlHUjlMRnh1VWowb1lTeGlLVDArS0dFK1BqNDlNQ2svZG1Fb1NDeGhMR0lwT2x3aVhDSXNVejFoUFQ1N1ptOXlLSFpoY2lCaVBUQXNZejB3TzJNOFlTNXNaVzVuZEdnN0t5dGpLWHQyWVhJZ1pEMWhMbU5vWVhKRGIyUmxRWFFvWXlrN01USTNQajFrUDJJckt6b3lNRFEzUGoxa1AySXJQVEk2TlRVeU9UWThQV1FtSmpVM016UXpQajFrUHloaUt6MDBMQ3NyWXlrNllpczlNMzF5WlhSMWNtNGdZbjBzVkQwb1lTeGlMR01zWkNrOVBudGpQajQrUFRBN2FXWW9JU2d3UEdRcEtYSmxkSFZ5YmlBd08zWmhjaUJuUFdNN1pEMWpLMlF0TVR0bWIzSW9kbUZ5SUdnOU1EdG9QR0V1YkdWdVozUm9PeXNyYUNsN2RtRnlJRzA5WVM1amFHRnlRMjlrWlVGMEtHZ3BPMmxtS0RVMU1qazJQRDF0SmlZMU56TTBNejQ5YlNsN2RtRnlJSEk5WVM1amFHRnlRMjlrWlVGMEtDc3JhQ2s3YlQwMk5UVXpOaXNvS0cwbU1UQXlNeWs4UERFd0tYeHlKakV3TWpOOWFXWW9NVEkzUGoxdEtYdHBaaWhqUGoxa0tXSnlaV0ZyTzJKYll5c3JQajQrTUYwOWJYMWxiSE5sZTJsbUtESXdORGMrUFcwcGUybG1LR01yTVQ0OVpDbGljbVZoYXp0aVcyTXJLejQrUGpCZFBURTVNbnh0UGo0MmZXVnNjMlY3YVdZb05qVTFNelUrUFcwcGUybG1LR01yTWo0OVpDbGljbVZoYXp0aVcyTXJLejQrUGpCZFBUSXlOSHh0UGo0eE1uMWxiSE5sZTJsbUtHTXJNejQ5WEc1a0tXSnlaV0ZyTzJKYll5c3JQajQrTUYwOU1qUXdmRzArUGpFNE8ySmJZeXNyUGo0K01GMDlNVEk0ZkcwK1BqRXlKall6ZldKYll5c3JQajQrTUYwOU1USTRmRzArUGpZbU5qTjlZbHRqS3lzK1BqNHdYVDB4TWpoOGJTWTJNMzE5WWx0alBqNCtNRjA5TUR0eVpYUjFjbTRnWXkxbmZTeFZQV0U5UGpBOVBUMWhKVFFtSmlnd0lUMDlZU1V4TURCOGZEQTlQVDFoSlRRd01Da3NkMkU5V3pBc016RXNOakFzT1RFc01USXhMREUxTWl3eE9ESXNNakV6TERJME5Dd3lOelFzTXpBMUxETXpOVjBzZUdFOVd6QXNNekVzTlRrc09UQXNNVEl3TERFMU1Td3hPREVzTWpFeUxESTBNeXd5TnpNc016QTBMRE16TkYwc1EyRTlZVDArZTNaaGNpQmlQVk1vWVNrck1TeGpQVUpoS0dJcE8yTW1KbFFvWVN4SUxHTXNZaWs3Y21WMGRYSnVJR045TEZZOVcxMHNWejE3ZlN4RVlUMG9LVDArZTJsbUtDRllLWHQyWVhJZ1lUMTdWVk5GVWpwY0luZGxZbDkxYzJWeVhDSXNURTlIVGtGTlJUcGNJbmRsWWw5MWMyVnlYQ0lzVUVGVVNEcGNJaTljSWl4UVYwUTZYQ0l2WENJc1NFOU5SVHBjSWk5b2IyMWxMM2RsWWw5MWMyVnlYQ0lzVEVGT1J6b29YQ0p2WW1wbFkzUmNJajA5ZEhsd1pXOW1JRzVoZG1sbllYUnZjaVltYm1GMmFXZGhkRzl5TG14aGJtZDFZV2RsY3lZbWJtRjJhV2RoZEc5eUxteGhibWQxWVdkbGMxc3dYWHg4WENKRFhDSXBMbkpsY0d4aFkyVW9YQ0l0WENJc1hHNWNJbDljSWlrclhDSXVWVlJHTFRoY0lpeGZPbUpoZkh4Y0lpNHZkR2hwY3k1d2NtOW5jbUZ0WENKOUxHSTdabTl5S0dJZ2FXNGdWeWwyYjJsa0lEQTlQVDFYVzJKZFAyUmxiR1YwWlNCaFcySmRPbUZiWWwwOVYxdGlYVHQyWVhJZ1l6MWJYVHRtYjNJb1lpQnBiaUJoS1dNdWNIVnphQ2hnSkh0aWZUMGtlMkZiWWwxOVlDazdXRDFqZlhKbGRIVnliaUJZZlN4WUxFVmhQVnR1ZFd4c0xGdGRMRnRkWFN4R1lUMWJNekVzTWprc016RXNNekFzTXpFc016QXNNekVzTXpFc016QXNNekVzTXpBc016RmRMRWRoUFZzek1Td3lPQ3d6TVN3ek1Dd3pNU3d6TUN3ek1Td3pNU3d6TUN3ek1Td3pNQ3d6TVYwN1puVnVZM1JwYjI0Z1NHRW9ZU2w3ZG1GeUlHSTlRWEp5WVhrb1V5aGhLU3N4S1R0VUtHRXNZaXd3TEdJdWJHVnVaM1JvS1R0eVpYUjFjbTRnWW4xY2JtWjFibU4wYVc5dUlFbGhLR0VzWWl4akxHUXBlMloxYm1OMGFXOXVJR2NvWml4dUxIQXBlMlp2Y2lobVBWd2liblZ0WW1WeVhDSTlQWFI1Y0dWdlppQm1QMll1ZEc5VGRISnBibWNvS1RwbWZIeGNJbHdpTzJZdWJHVnVaM1JvUEc0N0tXWTljRnN3WFN0bU8zSmxkSFZ5YmlCbWZXWjFibU4wYVc5dUlHZ29aaXh1S1h0eVpYUjFjbTRnWnlobUxHNHNYQ0l3WENJcGZXWjFibU4wYVc5dUlHMG9aaXh1S1h0bWRXNWpkR2x2YmlCd0tIbGhLWHR5WlhSMWNtNGdNRDU1WVQ4dE1Ub3dQSGxoUHpFNk1IMTJZWElnZVRzd1BUMDlLSGs5Y0NobUxtZGxkRVoxYkd4WlpXRnlLQ2t0Ymk1blpYUkdkV3hzV1dWaGNpZ3BLU2ttSmpBOVBUMG9lVDF3S0dZdVoyVjBUVzl1ZEdnb0tTMXVMbWRsZEUxdmJuUm9LQ2twS1NZbUtIazljQ2htTG1kbGRFUmhkR1VvS1MxdUxtZGxkRVJoZEdVb0tTa3BPM0psZEhWeWJpQjVmV1oxYm1OMGFXOXVJSElvWmlsN2MzZHBkR05vS0dZdVoyVjBSR0Y1S0NrcGUyTmhjMlVnTURweVpYUjFjbTRnYm1WM0lFUmhkR1VvWmk1blpYUkdkV3hzV1dWaGNpZ3BMVEVzTVRFc01qa3BPMk5oYzJVZ01UcHlaWFIxY200Z1pqdGpZWE5sSURJNmNtVjBkWEp1SUc1bGR5QkVZWFJsS0dZdVoyVjBSblZzYkZsbFlYSW9LU3d3TERNcE8yTmhjMlVnTXpweVpYUjFjbTRnYm1WM0lFUmhkR1VvWmk1blpYUkdkV3hzV1dWaGNpZ3BMRnh1TUN3eUtUdGpZWE5sSURRNmNtVjBkWEp1SUc1bGR5QkVZWFJsS0dZdVoyVjBSblZzYkZsbFlYSW9LU3d3TERFcE8yTmhjMlVnTlRweVpYUjFjbTRnYm1WM0lFUmhkR1VvWmk1blpYUkdkV3hzV1dWaGNpZ3BMVEVzTVRFc016RXBPMk5oYzJVZ05qcHlaWFIxY200Z2JtVjNJRVJoZEdVb1ppNW5aWFJHZFd4c1dXVmhjaWdwTFRFc01URXNNekFwZlgxbWRXNWpkR2x2YmlCM0tHWXBlM1poY2lCdVBXWXVSMkU3Wm05eUtHWTlibVYzSUVSaGRHVW9LRzVsZHlCRVlYUmxLR1l1U0dFck1Ua3dNQ3d3TERFcEtTNW5aWFJVYVcxbEtDa3BPekE4YmpzcGUzWmhjaUJ3UFdZdVoyVjBUVzl1ZEdnb0tTeDVQU2hWS0dZdVoyVjBSblZzYkZsbFlYSW9LU2svUm1FNlIyRXBXM0JkTzJsbUtHNCtlUzFtTG1kbGRFUmhkR1VvS1NsdUxUMTVMV1l1WjJWMFJHRjBaU2dwS3pFc1ppNXpaWFJFWVhSbEtERXBMREV4UG5BL1ppNXpaWFJOYjI1MGFDaHdLekVwT2lobUxuTmxkRTF2Ym5Sb0tEQXBMR1l1YzJWMFJuVnNiRmxsWVhJb1ppNW5aWFJHZFd4c1dXVmhjaWdwS3pFcEtUdGxiSE5sZTJZdWMyVjBSR0YwWlNobUxtZGxkRVJoZEdVb0tTdHVLVHRpY21WaGEzMTljRDF1WlhjZ1JHRjBaU2htTG1kbGRFWjFiR3haWldGeUtDa3JNU3d3TERRcE8yNDljaWh1WlhjZ1JHRjBaU2htTG1kbGRFWjFiR3haWldGeUtDa3NYRzR3TERRcEtUdHdQWElvY0NrN2NtVjBkWEp1SURBK1BXMG9iaXhtS1Q4d1BqMXRLSEFzWmlrL1ppNW5aWFJHZFd4c1dXVmhjaWdwS3pFNlppNW5aWFJHZFd4c1dXVmhjaWdwT21ZdVoyVjBSblZzYkZsbFlYSW9LUzB4ZldFK1BqNDlNRHRpUGo0K1BUQTdZejQrUGowd08yUStQajQ5TUR0MllYSWdkRDFLVzJRck5EQStQajR5UGo0K01GMDdaRDE3VkdFNlNWdGtQajQrTWo0K1BqQmRMRk5oT2tsYlpDczBQajQrTWo0K1BqQmRMRWxoT2tsYlpDczRQajQrTWo0K1BqQmRMRXhoT2tsYlpDc3hNajQrUGpJK1BqNHdYU3hLWVRwSlcyUXJNVFkrUGo0eVBqNCtNRjBzU0dFNlNWdGtLekl3UGo0K01qNCtQakJkTEVKaE9rbGJaQ3N5TkQ0K1BqSStQajR3WFN4SFlUcEpXMlFyTWpnK1BqNHlQajQrTUYwc1ZtRTZTVnRrS3pNeVBqNCtNajQrUGpCZExGSmhPa2xiWkNzek5qNCtQakkrUGo0d1hTeFZZVHAwUDFJb2RDazZYQ0pjSW4wN1l6MVNLR01wTzNROWUxd2lKV05jSWpwY0lpVmhJQ1ZpSUNWa0lDVklPaVZOT2lWVElDVlpYQ0lzWENJbFJGd2lPbHdpSlcwdkpXUXZKWGxjSWl4Y0lpVkdYQ0k2WENJbFdTMGxiUzBsWkZ3aUxGd2lKV2hjSWpwY0lpVmlYQ0lzWENJbGNsd2lPbHdpSlVrNkpVMDZKVk1nSlhCY0lpeGNJaVZTWENJNlhDSWxTRG9sVFZ3aUxGd2lKVlJjSWpwY0lpVklPaVZOT2lWVFhDSXNYQ0lsZUZ3aU9sd2lKVzB2SldRdkpYbGNJaXhjSWlWWVhDSTZYQ0lsU0RvbFRUb2xVMXdpTEZ4dVhDSWxSV05jSWpwY0lpVmpYQ0lzWENJbFJVTmNJanBjSWlWRFhDSXNYQ0lsUlhoY0lqcGNJaVZ0THlWa0x5VjVYQ0lzWENJbFJWaGNJanBjSWlWSU9pVk5PaVZUWENJc1hDSWxSWGxjSWpwY0lpVjVYQ0lzWENJbFJWbGNJanBjSWlWWlhDSXNYQ0lsVDJSY0lqcGNJaVZrWENJc1hDSWxUMlZjSWpwY0lpVmxYQ0lzWENJbFQwaGNJanBjSWlWSVhDSXNYQ0lsVDBsY0lqcGNJaVZKWENJc1hDSWxUMjFjSWpwY0lpVnRYQ0lzWENJbFQwMWNJanBjSWlWTlhDSXNYQ0lsVDFOY0lqcGNJaVZUWENJc1hDSWxUM1ZjSWpwY0lpVjFYQ0lzWENJbFQxVmNJanBjSWlWVlhDSXNYQ0lsVDFaY0lqcGNJaVZXWENJc1hDSWxUM2RjSWpwY0lpVjNYQ0lzWENJbFQxZGNJanBjSWlWWFhDSXNYQ0lsVDNsY0lqcGNJaVY1WENKOU8yWnZjaWgyWVhJZ2RTQnBiaUIwS1dNOVl5NXlaWEJzWVdObEtHNWxkeUJTWldkRmVIQW9kU3hjSW1kY0lpa3NkRnQxWFNrN2RtRnlJSHBoUFZ3aVUzVnVaR0Y1SUUxdmJtUmhlU0JVZFdWelpHRjVJRmRsWkc1bGMyUmhlU0JVYUhWeWMyUmhlU0JHY21sa1lYa2dVMkYwZFhKa1lYbGNJaTV6Y0d4cGRDaGNJaUJjSWlrc1FXRTlYQ0pLWVc1MVlYSjVJRVpsWW5KMVlYSjVJRTFoY21Ob0lFRndjbWxzSUUxaGVTQktkVzVsSUVwMWJIa2dRWFZuZFhOMElGTmxjSFJsYldKbGNpQlBZM1J2WW1WeUlFNXZkbVZ0WW1WeUlFUmxZMlZ0WW1WeVhDSXVjM0JzYVhRb1hDSWdYQ0lwTzNROWUxd2lKV0ZjSWpwbVBUNTZZVnRtTGtKaFhTNXpkV0p6ZEhKcGJtY29NQ3d6S1N4Y0lpVkJYQ0k2WmowK2VtRmJaaTVDWVYwc1hHNWNJaVZpWENJNlpqMCtRV0ZiWmk1S1lWMHVjM1ZpYzNSeWFXNW5LREFzTXlrc1hDSWxRbHdpT21ZOVBrRmhXMll1U21GZExGd2lKVU5jSWpwbVBUNW9LQ2htTGtoaEt6RTVNREFwTHpFd01Id3dMRElwTEZ3aUpXUmNJanBtUFQ1b0tHWXVUR0VzTWlrc1hDSWxaVndpT21ZOVBtY29aaTVNWVN3eUxGd2lJRndpS1N4Y0lpVm5YQ0k2WmowK2R5aG1LUzUwYjFOMGNtbHVaeWdwTG5OMVluTjBjbWx1WnlneUtTeGNJaVZIWENJNlpqMCtkeWhtS1N4Y0lpVklYQ0k2WmowK2FDaG1Ma2xoTERJcExGd2lKVWxjSWpwbVBUNTdaajFtTGtsaE96QTlQV1kvWmoweE1qb3hNanhtSmlZb1ppMDlNVElwTzNKbGRIVnliaUJvS0dZc01pbDlMRndpSldwY0lqcG1QVDU3Wm05eUtIWmhjaUJ1UFRBc2NEMHdPM0E4UFdZdVNtRXRNVHR1S3owb1ZTaG1Ma2hoS3pFNU1EQXBQMFpoT2tkaEtWdHdLeXRkS1R0eVpYUjFjbTRnYUNobUxreGhLMjRzTXlsOUxGd2lKVzFjSWpwbVBUNW9LR1l1U21Fck1Td3lLU3hjSWlWTlhDSTZaajArYUNobUxsTmhMRElwTEZ3aUpXNWNJam9vS1QwK1hDSmNYRzVjSWl4Y0lpVndYQ0k2WmowK01EdzlaaTVKWVNZbU1USStaaTVKWVQ5Y0lrRk5YQ0k2WENKUVRWd2lMRndpSlZOY0lqcG1QVDVvS0dZdVZHRXNNaWtzWENJbGRGd2lPaWdwUFQ1Y0lseGNkRndpTEZ3aUpYVmNJanBtUFQ1bUxrSmhmSHczTEZ3aUpWVmNJanBtUFQ1b0tFMWhkR2d1Wm14dmIzSW9LR1l1UjJFck55MW1Ma0poS1M4M0tTeGNiaklwTEZ3aUpWWmNJanBtUFQ1N2RtRnlJRzQ5VFdGMGFDNW1iRzl2Y2lnb1ppNUhZU3MzTFNobUxrSmhLellwSlRjcEx6Y3BPekkrUFNobUxrSmhLek0zTVMxbUxrZGhMVElwSlRjbUptNHJLenRwWmlodUtUVXpQVDF1SmlZb2NEMG9aaTVDWVNzek56RXRaaTVIWVNrbE55dzBQVDF3Zkh3elBUMXdKaVpWS0dZdVNHRXBmSHdvYmoweEtTazdaV3h6Wlh0dVBUVXlPM1poY2lCd1BTaG1Ma0poS3pjdFppNUhZUzB4S1NVM095ZzBQVDF3Zkh3MVBUMXdKaVpWS0dZdVNHRWxOREF3TFRFcEtTWW1iaXNyZlhKbGRIVnliaUJvS0c0c01pbDlMRndpSlhkY0lqcG1QVDVtTGtKaExGd2lKVmRjSWpwbVBUNW9LRTFoZEdndVpteHZiM0lvS0dZdVIyRXJOeTBvWmk1Q1lTczJLU1UzS1M4M0tTd3lLU3hjSWlWNVhDSTZaajArS0dZdVNHRXJNVGt3TUNrdWRHOVRkSEpwYm1jb0tTNXpkV0p6ZEhKcGJtY29NaWtzWENJbFdWd2lPbVk5UG1ZdVNHRXJNVGt3TUN4Y0lpVjZYQ0k2WmowK2UyWTlaaTVTWVR0MllYSWdiajB3UEQxbU8yWTlUV0YwYUM1aFluTW9aaWt2TmpBN2NtVjBkWEp1S0c0L1hDSXJYQ0k2WENJdFhDSXBLMU4wY21sdVp5aGNJakF3TURCY0lpc29aaTgyTUNveE1EQXJaaVUyTUNrcExuTnNhV05sS0MwMEtYMHNYQ0lsV2x3aU9tWTlQbVl1VldFc1hDSWxKVndpT2lncFBUNWNJaVZjSW4wN1l6MWpMbkpsY0d4aFkyVW9MeVVsTDJjc1hDSmNYSGd3TUZ4Y2VEQXdYQ0lwTzF4dVptOXlLSFVnYVc0Z2RDbGpMbWx1WTJ4MVpHVnpLSFVwSmlZb1l6MWpMbkpsY0d4aFkyVW9ibVYzSUZKbFowVjRjQ2gxTEZ3aVoxd2lLU3gwVzNWZEtHUXBLU2s3WXoxakxuSmxjR3hoWTJVb0wxeGNNRnhjTUM5bkxGd2lKVndpS1R0MVBVaGhLR01wTzJsbUtIVXViR1Z1WjNSb1BtSXBjbVYwZFhKdUlEQTdSeTV6WlhRb2RTeGhQajQrTUNrN2NtVjBkWEp1SUhVdWJHVnVaM1JvTFRGOVhHNTJZWElnVEdFOWUyRTZablZ1WTNScGIyNG9ZU3hpTEdNcGUyRStQajQ5TURzb2JtVjNJSEpoS0dFcEtTNU5ZU2hpUGo0K01DeGpQajQrTUNrN2MyRTlZVHQwWVNzck8zUm9jbTkzSUhOaE8zMHNaVHBtZFc1amRHbHZiaWdwZTNKbGRIVnliaUF3ZlN4SU9tWjFibU4wYVc5dUtDbDdmU3g0T21aMWJtTjBhVzl1S0NsN2ZTeDZPbVoxYm1OMGFXOXVLQ2w3ZlN4S09tWjFibU4wYVc5dUtDbDdjbVYwZFhKdUlEQjlMRVk2Wm5WdVkzUnBiMjRvS1h0OUxFRTZablZ1WTNScGIyNG9LWHQ5TEVVNlpuVnVZM1JwYjI0b0tYdDlMR2M2Wm5WdVkzUnBiMjRvS1h0OUxIazZablZ1WTNScGIyNG9LWHQ5TEhZNlpuVnVZM1JwYjI0b0tYdDlMRWM2Wm5WdVkzUnBiMjRvS1h0OUxIYzZablZ1WTNScGIyNG9LWHQ5TEdzNktDazlQakVzYmpwbWRXNWpkR2x2YmloaExHSXNZeWw3WVQxaUt6SXdPVGN4TlRJK1BqNHdQRFF4T1RRek1EVXRJU0ZoUHloaFBqNCtNQ2tyTkRJNU5EazJOekk1TmlwaU9rNWhUanRqUGo0K1BUQTdZVDF1WlhjZ1JHRjBaU2d4UlRNcVlTazdTVnRqUGo0K01qNCtQakJkUFdFdVoyVjBWVlJEVTJWamIyNWtjeWdwTzBsYll5czBQajQrTWo0K1BqQmRQV0V1WjJWMFZWUkRUV2x1ZFhSbGN5Z3BPMGxiWXlzNFBqNCtNajQrUGpCZFBXRXVaMlYwVlZSRFNHOTFjbk1vS1R0SlcyTXJNVEkrUGo1Y2JqSStQajR3WFQxaExtZGxkRlZVUTBSaGRHVW9LVHRKVzJNck1UWStQajR5UGo0K01GMDlZUzVuWlhSVlZFTk5iMjUwYUNncE8wbGJZeXN5TUQ0K1BqSStQajR3WFQxaExtZGxkRlZVUTBaMWJHeFpaV0Z5S0NrdE1Ua3dNRHRKVzJNck1qUStQajR5UGo0K01GMDlZUzVuWlhSVlZFTkVZWGtvS1R0SlcyTXJNamcrUGo0eVBqNCtNRjA5S0dFdVoyVjBWR2x0WlNncExVUmhkR1V1VlZSREtHRXVaMlYwVlZSRFJuVnNiRmxsWVhJb0tTd3dMREVzTUN3d0xEQXNNQ2twTHpnMk5FVTFmREI5TEc4NlpuVnVZM1JwYjI0b1lTeGlMR01wZTJFOVlpc3lNRGszTVRVeVBqNCtNRHcwTVRrME16QTFMU0VoWVQ4b1lUNCtQakFwS3pReU9UUTVOamN5T1RZcVlqcE9ZVTQ3WXo0K1BqMHdPMkU5Ym1WM0lFUmhkR1VvTVVVekttRXBPMGxiWXo0K1BqSStQajR3WFQxaExtZGxkRk5sWTI5dVpITW9LVHRKVzJNck5ENCtQakkrUGo0d1hUMWhMbWRsZEUxcGJuVjBaWE1vS1R0SlcyTXJPRDQrUGpJK1BqNHdYVDFoTG1kbGRFaHZkWEp6S0NrN1NWdGpLekV5UGo0K01qNCtQakJkUFdFdVoyVjBSR0YwWlNncE8wbGJZeXN4Tmo0K1BqSStQajR3WFQxaExtZGxkRTF2Ym5Sb0tDazdTVnRqS3pJd1BqNCtNajQrUGpCZFBXRXVaMlYwUm5Wc2JGbGxZWElvS1MweE9UQXdPMGxiWXlzeU5ENCtQakkrUGo0d1hUMWhMbWRsZEVSaGVTZ3BPMXh1U1Z0akt6STRQajQrTWo0K1BqQmRQU2hWS0dFdVoyVjBSblZzYkZsbFlYSW9LU2svZDJFNmVHRXBXMkV1WjJWMFRXOXVkR2dvS1YwcllTNW5aWFJFWVhSbEtDa3RNWHd3TzBsYll5c3pOajQrUGpJK1BqNHdYVDB0S0RZd0ttRXVaMlYwVkdsdFpYcHZibVZQWm1aelpYUW9LU2s3WWowb2JtVjNJRVJoZEdVb1lTNW5aWFJHZFd4c1dXVmhjaWdwTERZc01Ta3BMbWRsZEZScGJXVjZiMjVsVDJabWMyVjBLQ2s3ZG1GeUlHUTlLRzVsZHlCRVlYUmxLR0V1WjJWMFJuVnNiRmxsWVhJb0tTd3dMREVwS1M1blpYUlVhVzFsZW05dVpVOW1abk5sZENncE8wbGJZeXN6TWo0K1BqSStQajR3WFQwb1lpRTlaQ1ltWVM1blpYUlVhVzFsZW05dVpVOW1abk5sZENncFBUMU5ZWFJvTG0xcGJpaGtMR0lwS1h3d2ZTeHdPbVoxYm1OMGFXOXVLR0VwZTJFK1BqNDlNRHQyWVhJZ1lqMXVaWGNnUkdGMFpTaEpXMkVyTWpBK1BqNHlQajQrTUYwck1Ua3dNQ3hKVzJFck1UWStQajR5UGo0K01GMHNTVnRoS3pFeVBqNCtNajQrUGpCZExFbGJZU3M0UGo0K01qNCtQakJkTEVsYllTczBQajQrTWo0K1BqQmRMRWxiWVQ0K1BqSStQajR3WFN3d0tTeGpQVWxiWVNzek1qNCtQakkrUGo0d1hTeGtQV0l1WjJWMFZHbHRaWHB2Ym1WUFptWnpaWFFvS1N4blBTaHVaWGNnUkdGMFpTaGlMbWRsZEVaMWJHeFpaV0Z5S0Nrc05pd3hLU2t1WjJWMFZHbHRaWHB2Ym1WUFptWnpaWFFvS1N4Y2JtZzlLRzVsZHlCRVlYUmxLR0l1WjJWMFJuVnNiRmxsWVhJb0tTd3dMREVwS1M1blpYUlVhVzFsZW05dVpVOW1abk5sZENncExHMDlUV0YwYUM1dGFXNG9hQ3huS1Rzd1BtTS9TVnRoS3pNeVBqNCtNajQrUGpCZFBVNTFiV0psY2lobklUMW9KaVp0UFQxa0tUb3dQR01oUFNodFBUMWtLU1ltS0djOVRXRjBhQzV0WVhnb2FDeG5LU3hpTG5ObGRGUnBiV1VvWWk1blpYUlVhVzFsS0Nrck5rVTBLaWdvTUR4alAyMDZaeWt0WkNrcEtUdEpXMkVyTWpRK1BqNHlQajQrTUYwOVlpNW5aWFJFWVhrb0tUdEpXMkVyTWpnK1BqNHlQajQrTUYwOUtGVW9ZaTVuWlhSR2RXeHNXV1ZoY2lncEtUOTNZVHA0WVNsYllpNW5aWFJOYjI1MGFDZ3BYU3RpTG1kbGRFUmhkR1VvS1MweGZEQTdTVnRoUGo0K01qNCtQakJkUFdJdVoyVjBVMlZqYjI1a2N5Z3BPMGxiWVNzMFBqNCtNajQrUGpCZFBXSXVaMlYwVFdsdWRYUmxjeWdwTzBsYllTczRQajQrTWo0K1BqQmRQV0l1WjJWMFNHOTFjbk1vS1R0SlcyRXJNVEkrUGo0eVBqNCtNRjA5WWk1blpYUkVZWFJsS0NrN1NWdGhLekUyUGo0K01qNCtQakJkUFdJdVoyVjBUVzl1ZEdnb0tUdEpXMkVyTWpBK1BqNHlQajQrTUYwOVlpNW5aWFJaWldGeUtDazdZVDFpTG1kbGRGUnBiV1VvS1R0cGMwNWhUaWhoS1Q4b1NWdEtZU2dwUGo0K01qNCtQakJkUFRZeExHRTlMVEVwT2x4dVlTODlNVVV6TzNKbGRIVnliaUJMWVNnb1VUMWhMREU4UFN0TllYUm9MbUZpY3loUktUOHdQRkUvSzAxaGRHZ3VabXh2YjNJb1VTODBNamswT1RZM01qazJLVDQrUGpBNmZuNHJUV0YwYUM1alpXbHNLQ2hSTFNzb2ZuNVJQajQrTUNrcEx6UXlPVFE1TmpjeU9UWXBQajQrTURvd0tTa3NZVDQrUGpCOUxHdzZablZ1WTNScGIyNG9LWHR5WlhSMWNtNHROVEo5TEcwNlpuVnVZM1JwYjI0b0tYdDlMSFE2Wm5WdVkzUnBiMjRvWVN4aUxHTXBlMloxYm1OMGFXOXVJR1FvZHlsN2NtVjBkWEp1S0hjOWR5NTBiMVJwYldWVGRISnBibWNvS1M1dFlYUmphQ2d2WEZ3b0tGdEJMVnBoTFhvZ1hTc3BYRndwSkM4cEtUOTNXekZkT2x3aVIwMVVYQ0o5WXo0K1BqMHdPM1poY2lCblBTaHVaWGNnUkdGMFpTa3VaMlYwUm5Wc2JGbGxZWElvS1N4b1BXNWxkeUJFWVhSbEtHY3NNQ3d4S1N4dFBXNWxkeUJFWVhSbEtHY3NOaXd4S1R0blBXZ3VaMlYwVkdsdFpYcHZibVZQWm1aelpYUW9LVHQyWVhJZ2NqMXRMbWRsZEZScGJXVjZiMjVsVDJabWMyVjBLQ2s3U2x0aFBqNCtNRDQrUGpJK1BqNHdYVDAyTUNwTllYUm9MbTFoZUNobkxISXBPMGxiWWo0K1BqQStQajR5UGo0K01GMDlUblZ0WW1WeUtHY2hQWElwTzJFOVpDaG9LVHRpUFdRb2JTazdZVDFEWVNoaEtUdGlQVU5oS0dJcE8zSThaejhvU2x0alBqNCtNajQrUGpCZFBWeHVZU3hLVzJNck5ENCtQakkrUGo0d1hUMWlLVG9vU2x0alBqNCtNajQrUGpCZFBXSXNTbHRqS3pRK1BqNHlQajQrTUYwOVlTbDlMR1E2S0NrOVBudEZLRndpWENJcGZTeENPbVoxYm1OMGFXOXVLR0VzWWl4aktYdGhQajQrUFRBN1lqNCtQajB3TzJNK1BqNDlNRHRXTG14bGJtZDBhRDB3TzJadmNpaDJZWElnWkR0a1BVaGJZaXNyUGo0K01GMDdLWHQyWVhJZ1p6MHhNRFVoUFdRN1p5WTlNVEV5SVQxa08yTXJQV2NtSm1NbE9EODBPakE3Vmk1d2RYTm9LREV4TWowOVpEOUtXMk0rUGo0eVBqNCtNRjA2TVRBMVBUMWtQMGxiWXo0K1BqSStQajR3WFRwb1lWdGpQajQrTXo0K1BqQmRLVHRqS3oxblB6ZzZOSDF5WlhSMWNtNGdjV0ZiWVYwdVlYQndiSGtvYm5Wc2JDeFdLWDBzYURvb0tUMCtSR0YwWlM1dWIzY29LU3gxT21aMWJtTjBhVzl1S0NsN2NtVjBkWEp1SURReU9UUTVNREUzTmpCOUxHSTZLQ2s5UG5CbGNtWnZjbTFoYm1ObExtNXZkeWdwTEVrNlpuVnVZM1JwYjI0b1lTeGlMR01wZTJJK1BqNDlNRHR5WlhSMWNtNGdTQzVqYjNCNVYybDBhR2x1S0dFK1BqNHdQajQrTUN4aVBqNCtNQ3hpS3loalBqNCtNQ2srUGo0d0tYMHNjenBtZFc1amRHbHZiaWhoS1h0aFBqNCtQVEE3ZG1GeUlHSTlTQzVzWlc1bmRHZzdhV1lvTkRJNU5Ea3dNVGMyTUR4aEtYSmxkSFZ5YmlFeE8yWnZjaWgyWVhJZ1l6MWNiakU3TkQ0OVl6dGpLajB5S1h0MllYSWdaRDFpS2lneEt5NHlMMk1wTzJROVRXRjBhQzV0YVc0b1pDeGhLekV3TURZMk16STVOaWs3ZG1GeUlHYzlUV0YwYUR0a1BVMWhkR2d1YldGNEtHRXNaQ2s3WVRwN1p6MG9aeTV0YVc0dVkyRnNiQ2huTERReU9UUTVNREUzTmpBc1pDc29OalUxTXpZdFpDVTJOVFV6TmlrbE5qVTFNellwTFVZdVluVm1abVZ5TG1KNWRHVk1aVzVuZEdnck5qVTFNelVwTHpZMU5UTTJPM1J5ZVh0R0xtZHliM2NvWnlrN2FXRW9LVHQyWVhJZ2FEMHhPMkp5WldGcklHRjlZMkYwWTJnb2JTbDdmV2c5ZG05cFpDQXdmV2xtS0dncGNtVjBkWEp1SVRCOWNtVjBkWEp1SVRGOUxFTTZablZ1WTNScGIyNG9ZU3hpS1h0aFBqNCtQVEE3WWo0K1BqMHdPM1poY2lCalBUQTdSR0VvS1M1bWIzSkZZV05vS0Noa0xHY3BQVDU3ZG1GeUlHZzlZaXRqTzJjOVNsdGhLelFxWno0K1BqSStQajR3WFQxb08yWnZjaWhvUFRBN2FEeGtMbXhsYm1kMGFEc3JLMmdwUjF0bkt5cytQajR3UGo0K01GMDlaQzVqYUdGeVEyOWtaVUYwS0dncE8wZGJaejQrUGpBK1BqNHdYVDB3TzJNclBXUXViR1Z1WjNSb0t6RjlLVHR5WlhSMWNtNGdNSDBzUkRwbWRXNWpkR2x2YmloaExHSXBlMkUrUGo0OU1EdGlQajQrUFRBN2RtRnlJR005UkdFb0tUdEtXMkUrUGo0eVBqNCtNRjA5WXk1c1pXNW5kR2c3ZG1GeUlHUTlYRzR3TzJNdVptOXlSV0ZqYUNoblBUNWtLejFuTG14bGJtZDBhQ3N4S1R0S1cySStQajR5UGo0K01GMDlaRHR5WlhSMWNtNGdNSDBzWmpvb0tUMCtOVElzYWpwbWRXNWpkR2x2YmlncGUzSmxkSFZ5YmlBMU1uMHNjVHBtZFc1amRHbHZiaWdwZTNKbGRIVnliaUEzTUgwc2FUcG1kVzVqZEdsdmJpaGhMR0lzWXl4a0tYdGlQajQrUFRBN1l6NCtQajB3TzJRK1BqNDlNRHRtYjNJb2RtRnlJR2M5TUN4b1BUQTdhRHhqTzJnckt5bDdkbUZ5SUcwOVNsdGlQajQrTWo0K1BqQmRMSEk5U2x0aUt6UStQajR5UGo0K01GMDdZaXM5T0R0bWIzSW9kbUZ5SUhjOU1EdDNQSEk3ZHlzcktYdDJZWElnZEQxSVcyMHJkejQrUGpCZExIVTlSV0ZiWVYwN01EMDlQWFI4ZkRFd1BUMDlkRDhvS0RFOVBUMWhQMlZoT2tRcEtIWmhLSFVzTUNrcExIVXViR1Z1WjNSb1BUQXBPblV1Y0hWemFDaDBLWDFuS3oxeWZVcGJaRDQrUGpJK1BqNHdYVDFuTzNKbGRIVnliaUF3ZlN4eU9rbGhMR002Wm5WdVkzUnBiMjRvWVN4aUxHTXNaQ2w3Y21WMGRYSnVJRWxoS0dFK1BqNHdMR0krUGo0d0xHTStQajR3TEdRK1BqNHdLWDE5TEZrOVpuVnVZM1JwYjI0b0tYdG1kVzVqZEdsdmJpQmhLR01wZTFrOVl5NWxlSEJ2Y25Sek8xazlUV0VvS1R0R1BWa3VTenRwWVNncE8wd3VkVzV6YUdsbWRDaFpMa3dwTzAwdExUc3dQVDFOSmlZb2JuVnNiQ0U5UFZ4dVRpWW1LR05zWldGeVNXNTBaWEoyWVd3b1Rpa3NUajF1ZFd4c0tTeFBKaVlvWXoxUExFODliblZzYkN4aktDa3BLVHR5WlhSMWNtNGdXWDEyWVhJZ1lqMTdZVHBNWVgwN1RTc3JPMmxtS0dVdWFXNXpkR0Z1ZEdsaGRHVlhZWE50S1hSeWVYdHlaWFIxY200Z1pTNXBibk4wWVc1MGFXRjBaVmRoYzIwb1lpeGhLWDFqWVhSamFDaGpLWHRFS0dCTmIyUjFiR1V1YVc1emRHRnVkR2xoZEdWWFlYTnRJR05oYkd4aVlXTnJJR1poYVd4bFpDQjNhWFJvSUdWeWNtOXlPaUFrZTJOOVlDa3NiQ2hqS1gxd1lTaGlMR1oxYm1OMGFXOXVLR01wZTJFb1l5NXBibk4wWVc1alpTbDlLUzVqWVhSamFDaHNLVHR5WlhSMWNtNTdmWDBvS1R0bExsOVBjblJKYm1sMFBTaGhMR0lwUFQ0b1pTNWZUM0owU1c1cGREMVpMazBwS0dFc1lpazdaUzVmVDNKMFIyVjBUR0Z6ZEVWeWNtOXlQU2hoTEdJcFBUNG9aUzVmVDNKMFIyVjBUR0Z6ZEVWeWNtOXlQVmt1VGlrb1lTeGlLVHRsTGw5UGNuUkRjbVZoZEdWVFpYTnphVzl1VDNCMGFXOXVjejBvWVN4aUxHTXNaQ3huTEdnc2JTeHlMSGNzZENrOVBpaGxMbDlQY25SRGNtVmhkR1ZUWlhOemFXOXVUM0IwYVc5dWN6MVpMazhwS0dFc1lpeGpMR1FzWnl4b0xHMHNjaXgzTEhRcE8xeHVaUzVmVDNKMFFYQndaVzVrUlhobFkzVjBhVzl1VUhKdmRtbGtaWEk5S0dFc1lpazlQaWhsTGw5UGNuUkJjSEJsYm1SRmVHVmpkWFJwYjI1UWNtOTJhV1JsY2oxWkxsQXBLR0VzWWlrN1pTNWZUM0owUVdSa1JuSmxaVVJwYldWdWMybHZiazkyWlhKeWFXUmxQU2hoTEdJc1l5azlQaWhsTGw5UGNuUkJaR1JHY21WbFJHbHRaVzV6YVc5dVQzWmxjbkpwWkdVOVdTNVJLU2hoTEdJc1l5azdaUzVmVDNKMFFXUmtVMlZ6YzJsdmJrTnZibVpwWjBWdWRISjVQU2hoTEdJc1l5azlQaWhsTGw5UGNuUkJaR1JUWlhOemFXOXVRMjl1Wm1sblJXNTBjbms5V1M1U0tTaGhMR0lzWXlrN1pTNWZUM0owVW1Wc1pXRnpaVk5sYzNOcGIyNVBjSFJwYjI1elBXRTlQaWhsTGw5UGNuUlNaV3hsWVhObFUyVnpjMmx2Yms5d2RHbHZibk05V1M1VEtTaGhLVHRsTGw5UGNuUkRjbVZoZEdWVFpYTnphVzl1UFNoaExHSXNZeWs5UGlobExsOVBjblJEY21WaGRHVlRaWE56YVc5dVBWa3VWQ2tvWVN4aUxHTXBPMlV1WDA5eWRGSmxiR1ZoYzJWVFpYTnphVzl1UFdFOVBpaGxMbDlQY25SU1pXeGxZWE5sVTJWemMybHZiajFaTGxVcEtHRXBPMlV1WDA5eWRFZGxkRWx1Y0hWMFQzVjBjSFYwUTI5MWJuUTlLR0VzWWl4aktUMCtLR1V1WDA5eWRFZGxkRWx1Y0hWMFQzVjBjSFYwUTI5MWJuUTlXUzVXS1NoaExHSXNZeWs3WEc1bExsOVBjblJIWlhSSmJuQjFkRTVoYldVOUtHRXNZaWs5UGlobExsOVBjblJIWlhSSmJuQjFkRTVoYldVOVdTNVhLU2hoTEdJcE8yVXVYMDl5ZEVkbGRFOTFkSEIxZEU1aGJXVTlLR0VzWWlrOVBpaGxMbDlQY25SSFpYUlBkWFJ3ZFhST1lXMWxQVmt1V0Nrb1lTeGlLVHRsTGw5UGNuUkdjbVZsUFdFOVBpaGxMbDlQY25SR2NtVmxQVmt1V1Nrb1lTazdaUzVmVDNKMFEzSmxZWFJsVkdWdWMyOXlQU2hoTEdJc1l5eGtMR2NzYUNrOVBpaGxMbDlQY25SRGNtVmhkR1ZVWlc1emIzSTlXUzVhS1NoaExHSXNZeXhrTEdjc2FDazdaUzVmVDNKMFIyVjBWR1Z1YzI5eVJHRjBZVDBvWVN4aUxHTXNaQ3huS1QwK0tHVXVYMDl5ZEVkbGRGUmxibk52Y2tSaGRHRTlXUzVmS1NoaExHSXNZeXhrTEdjcE8yVXVYMDl5ZEZKbGJHVmhjMlZVWlc1emIzSTlZVDArS0dVdVgwOXlkRkpsYkdWaGMyVlVaVzV6YjNJOVdTNGtLU2hoS1R0bExsOVBjblJEY21WaGRHVlNkVzVQY0hScGIyNXpQU2hoTEdJc1l5eGtLVDArS0dVdVgwOXlkRU55WldGMFpWSjFiazl3ZEdsdmJuTTlXUzVoWVNrb1lTeGlMR01zWkNrN1pTNWZUM0owUVdSa1VuVnVRMjl1Wm1sblJXNTBjbms5S0dFc1lpeGpLVDArS0dVdVgwOXlkRUZrWkZKMWJrTnZibVpwWjBWdWRISjVQVmt1WW1FcEtHRXNZaXhqS1R0Y2JtVXVYMDl5ZEZKbGJHVmhjMlZTZFc1UGNIUnBiMjV6UFdFOVBpaGxMbDlQY25SU1pXeGxZWE5sVW5WdVQzQjBhVzl1Y3oxWkxtTmhLU2hoS1R0bExsOVBjblJEY21WaGRHVkNhVzVrYVc1blBXRTlQaWhsTGw5UGNuUkRjbVZoZEdWQ2FXNWthVzVuUFZrdVpHRXBLR0VwTzJVdVgwOXlkRUpwYm1SSmJuQjFkRDBvWVN4aUxHTXBQVDRvWlM1ZlQzSjBRbWx1WkVsdWNIVjBQVmt1WldFcEtHRXNZaXhqS1R0bExsOVBjblJDYVc1a1QzVjBjSFYwUFNoaExHSXNZeXhrS1QwK0tHVXVYMDl5ZEVKcGJtUlBkWFJ3ZFhROVdTNW1ZU2tvWVN4aUxHTXNaQ2s3WlM1ZlQzSjBRMnhsWVhKQ2IzVnVaRTkxZEhCMWRITTlZVDArS0dVdVgwOXlkRU5zWldGeVFtOTFibVJQZFhSd2RYUnpQVmt1WjJFcEtHRXBPMlV1WDA5eWRGSmxiR1ZoYzJWQ2FXNWthVzVuUFdFOVBpaGxMbDlQY25SU1pXeGxZWE5sUW1sdVpHbHVaejFaTG1oaEtTaGhLVHRsTGw5UGNuUlNkVzVYYVhSb1FtbHVaR2x1Wnowb1lTeGlMR01zWkN4bktUMCtLR1V1WDA5eWRGSjFibGRwZEdoQ2FXNWthVzVuUFZrdWFXRXBLR0VzWWl4akxHUXNaeWs3WlM1ZlQzSjBVblZ1UFNoaExHSXNZeXhrTEdjc2FDeHRMSElwUFQ0b1pTNWZUM0owVW5WdVBWa3VhbUVwS0dFc1lpeGpMR1FzWnl4b0xHMHNjaWs3WEc1bExsOVBjblJGYm1SUWNtOW1hV3hwYm1jOVlUMCtLR1V1WDA5eWRFVnVaRkJ5YjJacGJHbHVaejFaTG10aEtTaGhLVHRsTGw5UGNuUlVjbUZwYm1sdVoweHZZV1JEYUdWamEzQnZhVzUwUFNoaExHSXBQVDRvWlM1ZlQzSjBWSEpoYVc1cGJtZE1iMkZrUTJobFkydHdiMmx1ZEQxWkxteGhLU2hoTEdJcE8yVXVYMDl5ZEZSeVlXbHVhVzVuVW1Wc1pXRnpaVU5vWldOcmNHOXBiblE5WVQwK0tHVXVYMDl5ZEZSeVlXbHVhVzVuVW1Wc1pXRnpaVU5vWldOcmNHOXBiblE5V1M1dFlTa29ZU2s3WlM1ZlQzSjBWSEpoYVc1cGJtZERjbVZoZEdWVFpYTnphVzl1UFNoaExHSXNZeXhrTEdjc2FDeHRMSElwUFQ0b1pTNWZUM0owVkhKaGFXNXBibWREY21WaGRHVlRaWE56YVc5dVBWa3VibUVwS0dFc1lpeGpMR1FzWnl4b0xHMHNjaWs3WlM1ZlQzSjBWSEpoYVc1cGJtZE1ZWHA1VW1WelpYUkhjbUZrUFdFOVBpaGxMbDlQY25SVWNtRnBibWx1WjB4aGVubFNaWE5sZEVkeVlXUTlXUzV2WVNrb1lTazdaUzVmVDNKMFZISmhhVzVwYm1kU2RXNVVjbUZwYmxOMFpYQTlLR0VzWWl4akxHUXNaeXhvS1QwK0tHVXVYMDl5ZEZSeVlXbHVhVzVuVW5WdVZISmhhVzVUZEdWd1BWa3VjR0VwS0dFc1lpeGpMR1FzWnl4b0tUdGNibVV1WDA5eWRGUnlZV2x1YVc1blQzQjBhVzFwZW1WeVUzUmxjRDBvWVN4aUtUMCtLR1V1WDA5eWRGUnlZV2x1YVc1blQzQjBhVzFwZW1WeVUzUmxjRDFaTG5GaEtTaGhMR0lwTzJVdVgwOXlkRlJ5WVdsdWFXNW5SWFpoYkZOMFpYQTlLR0VzWWl4akxHUXNaeXhvS1QwK0tHVXVYMDl5ZEZSeVlXbHVhVzVuUlhaaGJGTjBaWEE5V1M1eVlTa29ZU3hpTEdNc1pDeG5MR2dwTzJVdVgwOXlkRlJ5WVdsdWFXNW5SMlYwVUdGeVlXMWxkR1Z5YzFOcGVtVTlLR0VzWWl4aktUMCtLR1V1WDA5eWRGUnlZV2x1YVc1blIyVjBVR0Z5WVcxbGRHVnljMU5wZW1VOVdTNXpZU2tvWVN4aUxHTXBPMlV1WDA5eWRGUnlZV2x1YVc1blEyOXdlVkJoY21GdFpYUmxjbk5VYjBKMVptWmxjajBvWVN4aUxHTXNaQ2s5UGlobExsOVBjblJVY21GcGJtbHVaME52Y0hsUVlYSmhiV1YwWlhKelZHOUNkV1ptWlhJOVdTNTBZU2tvWVN4aUxHTXNaQ2s3WlM1ZlQzSjBWSEpoYVc1cGJtZERiM0I1VUdGeVlXMWxkR1Z5YzBaeWIyMUNkV1ptWlhJOUtHRXNZaXhqTEdRcFBUNG9aUzVmVDNKMFZISmhhVzVwYm1kRGIzQjVVR0Z5WVcxbGRHVnljMFp5YjIxQ2RXWm1aWEk5V1M1MVlTa29ZU3hpTEdNc1pDazdYRzVsTGw5UGNuUlVjbUZwYm1sdVowZGxkRTF2WkdWc1NXNXdkWFJQZFhSd2RYUkRiM1Z1ZEQwb1lTeGlMR01zWkNrOVBpaGxMbDlQY25SVWNtRnBibWx1WjBkbGRFMXZaR1ZzU1c1d2RYUlBkWFJ3ZFhSRGIzVnVkRDFaTG5aaEtTaGhMR0lzWXl4a0tUdGxMbDlQY25SVWNtRnBibWx1WjBkbGRFMXZaR1ZzU1c1d2RYUlBkWFJ3ZFhST1lXMWxQU2hoTEdJc1l5eGtLVDArS0dVdVgwOXlkRlJ5WVdsdWFXNW5SMlYwVFc5a1pXeEpibkIxZEU5MWRIQjFkRTVoYldVOVdTNTNZU2tvWVN4aUxHTXNaQ2s3WlM1ZlQzSjBWSEpoYVc1cGJtZFNaV3hsWVhObFUyVnpjMmx2YmoxaFBUNG9aUzVmVDNKMFZISmhhVzVwYm1kU1pXeGxZWE5sVTJWemMybHZiajFaTG5oaEtTaGhLVHQyWVhJZ1NtRTlLQ2s5UGloS1lUMVpMbmxoS1NncExFSmhQV1V1WDIxaGJHeHZZejFoUFQ0b1FtRTlaUzVmYldGc2JHOWpQVmt1ZW1FcEtHRXBPMlV1WDJaeVpXVTlZVDArS0dVdVgyWnlaV1U5V1M1QllTa29ZU2s3ZG1GeUlFdGhQV0U5UGloTFlUMVpMa05oS1NoaEtTeE9ZVDBvS1QwK0tFNWhQVmt1UkdFcEtDa3NUMkU5WVQwK0tFOWhQVmt1UldFcEtHRXBMRkJoUFdFOVBpaFFZVDFaTGtaaEtTaGhLVHRjYm1aMWJtTjBhVzl1SUUxaEtDbDdkbUZ5SUdFOVdUdGhQVTlpYW1WamRDNWhjM05wWjI0b2UzMHNZU2s3ZG1GeUlHSTlaRDArS0NrOVBtUW9LVDQrUGpBc1l6MWtQVDVuUFQ1a0tHY3BQajQrTUR0aExubGhQV0lvWVM1NVlTazdZUzU2WVQxaktHRXVlbUVwTzJFdVJHRTlZaWhoTGtSaEtUdGhMa1poUFdNb1lTNUdZU2s3Y21WMGRYSnVJR0Y5WlM1emRHRmphMEZzYkc5alBWQmhPMlV1YzNSaFkydFRZWFpsUFU1aE8yVXVjM1JoWTJ0U1pYTjBiM0psUFU5aE8yVXVWVlJHT0ZSdlUzUnlhVzVuUFZJN1pTNXpkSEpwYm1kVWIxVlVSamc5S0dFc1lpeGpLVDArVkNoaExFZ3NZaXhqS1R0bExteGxibWQwYUVKNWRHVnpWVlJHT0QxVE8zWmhjaUJhTzA4OVpuVnVZM1JwYjI0Z1VXRW9LWHRhZkh4U1lTZ3BPMXA4ZkNoUFBWRmhLWDA3WEc1bWRXNWpkR2x2YmlCU1lTZ3BlMmxtS0NFb01EeE5LU2w3YVdZb1pTNXdjbVZTZFc0cFptOXlLRndpWm5WdVkzUnBiMjVjSWowOWRIbHdaVzltSUdVdWNISmxVblZ1SmlZb1pTNXdjbVZTZFc0OVcyVXVjSEpsVW5WdVhTazdaUzV3Y21WU2RXNHViR1Z1WjNSb095bDdkbUZ5SUdFOVpTNXdjbVZTZFc0dWMyaHBablFvS1R0TExuVnVjMmhwWm5Rb1lTbDlabTl5S0Rzd1BFc3ViR1Z1WjNSb095bExMbk5vYVdaMEtDa29aU2s3YVdZb0lTZ3dQRTE4ZkZwOGZDaGFQU0V3TEdVdVkyRnNiR1ZrVW5WdVBTRXdMR1poS1NrcGUyWnZjaWc3TUR4TUxteGxibWQwYURzcFRDNXphR2xtZENncEtHVXBPMlp2Y2locktHVXBPekE4YW1FdWJHVnVaM1JvT3lscVlTNXphR2xtZENncEtHVXBmWDE5VW1Fb0tUdGNibHh1WEc0Z0lISmxkSFZ5YmlCdGIyUjFiR1ZCY21jdWNtVmhaSGxjYm4xY2JpazdYRzU5S1NncE8xeHVPMXh1YVdZZ0tIUjVjR1Z2WmlCbGVIQnZjblJ6SUQwOVBTQW5iMkpxWldOMEp5QW1KaUIwZVhCbGIyWWdiVzlrZFd4bElEMDlQU0FuYjJKcVpXTjBKeWxjYmlBZ2JXOWtkV3hsTG1WNGNHOXlkSE1nUFNCdmNuUlhZWE50TzF4dVpXeHpaU0JwWmlBb2RIbHdaVzltSUdSbFptbHVaU0E5UFQwZ0oyWjFibU4wYVc5dUp5QW1KaUJrWldacGJtVmJKMkZ0WkNkZEtWeHVJQ0JrWldacGJtVW9XMTBzSUNncElEMCtJRzl5ZEZkaGMyMHBPMXh1SWl3Z0lpSXNJQ0lpTENBaVpYaHdiM0owSUdOdmJuTjBJR053ZFhNZ1BTQjFibVJsWm1sdVpXUTdJaXdnSWx4dWRtRnlJRzl5ZEZkaGMyMVVhSEpsWVdSbFpDQTlJQ2dvS1NBOVBpQjdYRzRnSUhaaGNpQmZjMk55YVhCMFJHbHlJRDBnZEhsd1pXOW1JR1J2WTNWdFpXNTBJQ0U5UFNBbmRXNWtaV1pwYm1Wa0p5QW1KaUJrYjJOMWJXVnVkQzVqZFhKeVpXNTBVMk55YVhCMElEOGdaRzlqZFcxbGJuUXVZM1Z5Y21WdWRGTmpjbWx3ZEM1emNtTWdPaUIxYm1SbFptbHVaV1E3WEc0Z0lHbG1JQ2gwZVhCbGIyWWdYMTltYVd4bGJtRnRaU0FoUFQwZ0ozVnVaR1ZtYVc1bFpDY3BJRjl6WTNKcGNIUkVhWElnUFNCZmMyTnlhWEIwUkdseUlIeDhJRjlmWm1sc1pXNWhiV1U3WEc0Z0lISmxkSFZ5YmlBb1hHNW1kVzVqZEdsdmJpaHRiMlIxYkdWQmNtY2dQU0I3ZlNrZ2UxeHVYRzVtZFc1amRHbHZiaUJoWVNncGUyVXVZblZtWm1WeUlUMXNMbUoxWm1abGNpWW1iU2dwTzNKbGRIVnliaUJzZldaMWJtTjBhVzl1SUc0b0tYdGxMbUoxWm1abGNpRTliQzVpZFdabVpYSW1KbTBvS1R0eVpYUjFjbTRnWW1GOVpuVnVZM1JwYjI0Z2NDZ3BlMlV1WW5WbVptVnlJVDFzTG1KMVptWmxjaVltYlNncE8zSmxkSFZ5YmlCallYMW1kVzVqZEdsdmJpQnlLQ2w3WlM1aWRXWm1aWEloUFd3dVluVm1abVZ5SmladEtDazdjbVYwZFhKdUlHUmhmV1oxYm1OMGFXOXVJR1ZoS0NsN1pTNWlkV1ptWlhJaFBXd3VZblZtWm1WeUppWnRLQ2s3Y21WMGRYSnVJR1poZlhaaGNpQjJQVzF2WkhWc1pVRnlaeXhvWVN4NE8zWXVjbVZoWkhrOWJtVjNJRkJ5YjIxcGMyVW9LR0VzWWlrOVBudG9ZVDFoTzNnOVluMHBPMXh1ZG1GeUlHbGhQVTlpYW1WamRDNWhjM05wWjI0b2UzMHNkaWtzYW1FOVhDSXVMM1JvYVhNdWNISnZaM0poYlZ3aUxIbzlLR0VzWWlrOVBudDBhSEp2ZHlCaU8zMHNhMkU5WENKdlltcGxZM1JjSWowOWRIbHdaVzltSUhkcGJtUnZkeXhCUFZ3aVpuVnVZM1JwYjI1Y0lqMDlkSGx3Wlc5bUlHbHRjRzl5ZEZOamNtbHdkSE1zUWoxY0ltOWlhbVZqZEZ3aVBUMTBlWEJsYjJZZ2NISnZZMlZ6Y3lZbVhDSnZZbXBsWTNSY0lqMDlkSGx3Wlc5bUlIQnliMk5sYzNNdWRtVnljMmx2Ym5NbUpsd2ljM1J5YVc1blhDSTlQWFI1Y0dWdlppQndjbTlqWlhOekxuWmxjbk5wYjI1ekxtNXZaR1VzUkQxMkxrVk9Wa2xTVDA1TlJVNVVYMGxUWDFCVVNGSkZRVVI4ZkNFeExFVTlYQ0pjSWp0bWRXNWpkR2x2YmlCc1lTaGhLWHR5WlhSMWNtNGdkaTVzYjJOaGRHVkdhV3hsUDNZdWJHOWpZWFJsUm1sc1pTaGhMRVVwT2tVcllYMTJZWElnYldFc1J5eElPMXh1YVdZb1FpbDdkbUZ5SUdaelBYSmxjWFZwY21Vb1hDSm1jMXdpS1N4dVlUMXlaWEYxYVhKbEtGd2ljR0YwYUZ3aUtUdEZQVUUvYm1FdVpHbHlibUZ0WlNoRktTdGNJaTljSWpwZlgyUnBjbTVoYldVclhDSXZYQ0k3YldFOUtHSXNZeWs5UG50aVBVa29ZaWsvYm1WM0lGVlNUQ2hpS1RwdVlTNXViM0p0WVd4cGVtVW9ZaWs3Y21WMGRYSnVJR1p6TG5KbFlXUkdhV3hsVTNsdVl5aGlMR00vZG05cFpDQXdPbHdpZFhSbU9Gd2lLWDA3U0QxaVBUNTdZajF0WVNoaUxDRXdLVHRpTG1KMVptWmxjbng4S0dJOWJtVjNJRlZwYm5RNFFYSnlZWGtvWWlrcE8zSmxkSFZ5YmlCaWZUdEhQU2hpTEdNc1pDeG5QU0V3S1QwK2UySTlTU2hpS1Q5dVpYY2dWVkpNS0dJcE9tNWhMbTV2Y20xaGJHbDZaU2hpS1R0bWN5NXlaV0ZrUm1sc1pTaGlMR2MvZG05cFpDQXdPbHdpZFhSbU9Gd2lMQ2hvTEdzcFBUNTdhRDlrS0dncE9tTW9aejlyTG1KMVptWmxjanByS1gwcGZUc2hkaTUwYUdselVISnZaM0poYlNZbU1UeHdjbTlqWlhOekxtRnlaM1l1YkdWdVozUm9KaVlvYW1FOWNISnZZMlZ6Y3k1aGNtZDJXekZkTG5KbGNHeGhZMlVvTDF4Y1hGd3ZaeXhjSWk5Y0lpa3BPM0J5YjJObGMzTXVZWEpuZGk1emJHbGpaU2d5S1R0NlBTaGlMR01wUFQ1N2NISnZZMlZ6Y3k1bGVHbDBRMjlrWlQxaU8zUm9jbTkzSUdNN2ZUdDJMbWx1YzNCbFkzUTlLQ2s5UGx3aVcwVnRjMk55YVhCMFpXNGdUVzlrZFd4bElHOWlhbVZqZEYxY0lqdGNibXhsZENCaE8zUnllWHRoUFhKbGNYVnBjbVVvWENKM2IzSnJaWEpmZEdoeVpXRmtjMXdpS1gxallYUmphQ2hpS1h0MGFISnZkeUJqYjI1emIyeGxMbVZ5Y205eUtDZFVhR1VnWENKM2IzSnJaWEpmZEdoeVpXRmtjMXdpSUcxdlpIVnNaU0JwY3lCdWIzUWdjM1Z3Y0c5eWRHVmtJR2x1SUhSb2FYTWdibTlrWlM1cWN5QmlkV2xzWkNBdElIQmxjbWhoY0hNZ1lTQnVaWGRsY2lCMlpYSnphVzl1SUdseklHNWxaV1JsWkQ4bktTeGlPMzFuYkc5aVlXd3VWMjl5YTJWeVBXRXVWMjl5YTJWeWZXVnNjMlVnYVdZb2EyRjhmRUVwUVQ5RlBYTmxiR1l1Ykc5allYUnBiMjR1YUhKbFpqcGNJblZ1WkdWbWFXNWxaRndpSVQxMGVYQmxiMllnWkc5amRXMWxiblFtSm1SdlkzVnRaVzUwTG1OMWNuSmxiblJUWTNKcGNIUW1KaWhGUFdSdlkzVnRaVzUwTG1OMWNuSmxiblJUWTNKcGNIUXVjM0pqS1N3b2RIbHdaVzltSUY5elkzSnBjSFJFYVhJZ0lUMDlJRndpZFc1a1pXWnBibVZrWENJZ0ppWWdYM05qY21sd2RFUnBjaWttSmloRlBWOXpZM0pwY0hSRWFYSXBMREFoUFQxRkxtbHVaR1Y0VDJZb1hDSmliRzlpT2x3aUtUOUZQVVV1YzNWaWMzUnlLREFzUlM1eVpYQnNZV05sS0M5YlB5TmRMaW92TEZ3aVhDSXBMbXhoYzNSSmJtUmxlRTltS0Z3aUwxd2lLU3N4S1RwRlBWd2lYQ0lzUW54OEtHMWhQV0U5UG50MllYSWdZajF1WlhjZ1dFMU1TSFIwY0ZKbGNYVmxjM1E3WWk1dmNHVnVLRndpUjBWVVhDSXNZU3doTVNrN1lpNXpaVzVrS0c1MWJHd3BPMXh1Y21WMGRYSnVJR0l1Y21WemNHOXVjMlZVWlhoMGZTeEJKaVlvU0QxaFBUNTdkbUZ5SUdJOWJtVjNJRmhOVEVoMGRIQlNaWEYxWlhOME8ySXViM0JsYmloY0lrZEZWRndpTEdFc0lURXBPMkl1Y21WemNHOXVjMlZVZVhCbFBWd2lZWEp5WVhsaWRXWm1aWEpjSWp0aUxuTmxibVFvYm5Wc2JDazdjbVYwZFhKdUlHNWxkeUJWYVc1ME9FRnljbUY1S0dJdWNtVnpjRzl1YzJVcGZTa3NSejBvWVN4aUxHTXBQVDU3ZG1GeUlHUTlibVYzSUZoTlRFaDBkSEJTWlhGMVpYTjBPMlF1YjNCbGJpaGNJa2RGVkZ3aUxHRXNJVEFwTzJRdWNtVnpjRzl1YzJWVWVYQmxQVndpWVhKeVlYbGlkV1ptWlhKY0lqdGtMbTl1Ykc5aFpEMG9LVDArZXpJd01EMDlaQzV6ZEdGMGRYTjhmREE5UFdRdWMzUmhkSFZ6Smlaa0xuSmxjM0J2Ym5ObFAySW9aQzV5WlhOd2IyNXpaU2s2WXlncGZUdGtMbTl1WlhKeWIzSTlZenRrTG5ObGJtUW9iblZzYkNsOUtUdENKaVpjSW5WdVpHVm1hVzVsWkZ3aVBUMTBlWEJsYjJZZ2NHVnlabTl5YldGdVkyVW1KaWhuYkc5aVlXd3VjR1Z5Wm05eWJXRnVZMlU5Y21WeGRXbHlaU2hjSW5CbGNtWmZhRzl2YTNOY0lpa3VjR1Z5Wm05eWJXRnVZMlVwTzNaaGNpQnZZVDFqYjI1emIyeGxMbXh2Wnk1aWFXNWtLR052Ym5OdmJHVXBMSEJoUFdOdmJuTnZiR1V1WlhKeWIzSXVZbWx1WkNoamIyNXpiMnhsS1R0Y2JrSW1KaWh2WVQwb0xpNHVZU2s5UG1aekxuZHlhWFJsVTNsdVl5Z3hMR0V1YW05cGJpaGNJaUJjSWlrclhDSmNYRzVjSWlrc2NHRTlLQzR1TG1FcFBUNW1jeTUzY21sMFpWTjVibU1vTWl4aExtcHZhVzRvWENJZ1hDSXBLMXdpWEZ4dVhDSXBLVHQyWVhJZ2NXRTliMkVzU2oxd1lUdFBZbXBsWTNRdVlYTnphV2R1S0hZc2FXRXBPMmxoUFc1MWJHdzdYQ0p2WW1wbFkzUmNJaUU5ZEhsd1pXOW1JRmRsWWtGemMyVnRZbXg1SmlaeVlTaGNJbTV2SUc1aGRHbDJaU0IzWVhOdElITjFjSEJ2Y25RZ1pHVjBaV04wWldSY0lpazdkbUZ5SUdVc2MyRXNTejBoTVN4TUxHd3NZbUVzWTJFc1pHRXNabUU3Wm5WdVkzUnBiMjRnYlNncGUzWmhjaUJoUFdVdVluVm1abVZ5TzNZdVNFVkJVRGc5YkQxdVpYY2dTVzUwT0VGeWNtRjVLR0VwTzNZdVNFVkJVREUyUFc1bGR5QkpiblF4TmtGeWNtRjVLR0VwTzNZdVNFVkJVRlU0UFdKaFBXNWxkeUJWYVc1ME9FRnljbUY1S0dFcE8zWXVTRVZCVUZVeE5qMXVaWGNnVldsdWRERTJRWEp5WVhrb1lTazdkaTVJUlVGUU16STlZMkU5Ym1WM0lFbHVkRE15UVhKeVlYa29ZU2s3ZGk1SVJVRlFWVE15UFdSaFBXNWxkeUJWYVc1ME16SkJjbkpoZVNoaEtUdDJMa2hGUVZCR016STlibVYzSUVac2IyRjBNekpCY25KaGVTaGhLVHQyTGtoRlFWQkdOalE5Wm1FOWJtVjNJRVpzYjJGME5qUkJjbkpoZVNoaEtYMWNiblpoY2lCMFlUMHhOamMzTnpJeE5qdGNibWxtS0VRcFpUMTJMbmRoYzIxTlpXMXZjbms3Wld4elpTQnBaaWgyTG5kaGMyMU5aVzF2Y25rcFpUMTJMbmRoYzIxTlpXMXZjbms3Wld4elpTQnBaaWhsUFc1bGR5QlhaV0pCYzNObGJXSnNlUzVOWlcxdmNua29lMmx1YVhScFlXdzZkR0V2TmpVMU16WXNiV0Y0YVcxMWJUbzJOVFV6Tml4emFHRnlaV1E2SVRCOUtTd2hLR1V1WW5WbVptVnlJR2x1YzNSaGJtTmxiMllnVTJoaGNtVmtRWEp5WVhsQ2RXWm1aWElwS1hSb2NtOTNJRW9vWENKeVpYRjFaWE4wWldRZ1lTQnphR0Z5WldRZ1YyVmlRWE56WlcxaWJIa3VUV1Z0YjNKNUlHSjFkQ0IwYUdVZ2NtVjBkWEp1WldRZ1luVm1abVZ5SUdseklHNXZkQ0JoSUZOb1lYSmxaRUZ5Y21GNVFuVm1abVZ5TENCcGJtUnBZMkYwYVc1bklIUm9ZWFFnZDJocGJHVWdkR2hsSUdKeWIzZHpaWElnYUdGeklGTm9ZWEpsWkVGeWNtRjVRblZtWm1WeUlHbDBJR1J2WlhNZ2JtOTBJR2hoZG1VZ1YyVmlRWE56WlcxaWJIa2dkR2h5WldGa2N5QnpkWEJ3YjNKMElDMGdlVzkxSUcxaGVTQnVaV1ZrSUhSdklITmxkQ0JoSUdac1lXZGNJaWtzUWlZbVNpaGNJaWh2YmlCdWIyUmxJSGx2ZFNCdFlYa2dibVZsWkRvZ0xTMWxlSEJsY21sdFpXNTBZV3d0ZDJGemJTMTBhSEpsWVdSeklDMHRaWGh3WlhKcGJXVnVkR0ZzTFhkaGMyMHRZblZzYXkxdFpXMXZjbmtnWVc1a0wyOXlJSEpsWTJWdWRDQjJaWEp6YVc5dUtWd2lLU3hGY25KdmNpaGNJbUpoWkNCdFpXMXZjbmxjSWlrN1hHNXRLQ2s3ZEdFOVpTNWlkV1ptWlhJdVlubDBaVXhsYm1kMGFEdDJZWElnZFdFOVcxMHNkbUU5VzEwc2QyRTlXMTBzVFQwd0xIaGhQVzUxYkd3c1RqMXVkV3hzTzJaMWJtTjBhVzl1SUhsaEtDbDdUUzB0TzJsbUtEQTlQVTBtSmlodWRXeHNJVDA5ZUdFbUppaGpiR1ZoY2tsdWRHVnlkbUZzS0hoaEtTeDRZVDF1ZFd4c0tTeE9LU2w3ZG1GeUlHRTlUanRPUFc1MWJHdzdZU2dwZlgxbWRXNWpkR2x2YmlCeVlTaGhLWHRoUFZ3aVFXSnZjblJsWkNoY0lpdGhLMXdpS1Z3aU8wb29ZU2s3U3owaE1EdE1QVEU3WVQxdVpYY2dWMlZpUVhOelpXMWliSGt1VW5WdWRHbHRaVVZ5Y205eUtHRXJYQ0l1SUVKMWFXeGtJSGRwZEdnZ0xYTkJVMU5GVWxSSlQwNVRJR1p2Y2lCdGIzSmxJR2x1Wm04dVhDSXBPM2dvWVNrN2RHaHliM2NnWVR0OWRtRnlJSHBoUFdFOVBtRXVjM1JoY25SelYybDBhQ2hjSW1SaGRHRTZZWEJ3YkdsallYUnBiMjR2YjJOMFpYUXRjM1J5WldGdE8ySmhjMlUyTkN4Y0lpa3NTVDFoUFQ1aExuTjBZWEowYzFkcGRHZ29YQ0ptYVd4bE9pOHZYQ0lwTEU4N1R6MWNJbTl5ZEMxM1lYTnRMWFJvY21WaFpHVmtMbmRoYzIxY0lqdDZZU2hQS1h4OEtFODliR0VvVHlrcE8xeHVablZ1WTNScGIyNGdRV0VvWVNsN2FXWW9TQ2x5WlhSMWNtNGdTQ2hoS1R0MGFISnZkMXdpWW05MGFDQmhjM2x1WXlCaGJtUWdjM2x1WXlCbVpYUmphR2x1WnlCdlppQjBhR1VnZDJGemJTQm1ZV2xzWldSY0lqdDlablZ1WTNScGIyNGdRbUVvWVNsN2FXWW9hMkY4ZkVFcGUybG1LRndpWm5WdVkzUnBiMjVjSWowOWRIbHdaVzltSUdabGRHTm9KaVloU1NoaEtTbHlaWFIxY200Z1ptVjBZMmdvWVN4N1kzSmxaR1Z1ZEdsaGJITTZYQ0p6WVcxbExXOXlhV2RwYmx3aWZTa3VkR2hsYmloaVBUNTdhV1lvSVdJdWIyc3BkR2h5YjNkY0ltWmhhV3hsWkNCMGJ5QnNiMkZrSUhkaGMyMGdZbWx1WVhKNUlHWnBiR1VnWVhRZ0oxd2lLMkVyWENJblhDSTdjbVYwZFhKdUlHSXVZWEp5WVhsQ2RXWm1aWElvS1gwcExtTmhkR05vS0NncFBUNUJZU2hoS1NrN2FXWW9SeWx5WlhSMWNtNGdibVYzSUZCeWIyMXBjMlVvS0dJc1l5azlQbnRIS0dFc1pEMCtZaWh1WlhjZ1ZXbHVkRGhCY25KaGVTaGtLU2tzWXlsOUtYMXlaWFIxY200Z1VISnZiV2x6WlM1eVpYTnZiSFpsS0NrdWRHaGxiaWdvS1QwK1FXRW9ZU2twZlZ4dVpuVnVZM1JwYjI0Z1EyRW9ZU3hpTEdNcGUzSmxkSFZ5YmlCQ1lTaGhLUzUwYUdWdUtHUTlQbGRsWWtGemMyVnRZbXg1TG1sdWMzUmhiblJwWVhSbEtHUXNZaWtwTG5Sb1pXNG9aRDArWkNrdWRHaGxiaWhqTEdROVBudEtLR0JtWVdsc1pXUWdkRzhnWVhONWJtTm9jbTl1YjNWemJIa2djSEpsY0dGeVpTQjNZWE50T2lBa2UyUjlZQ2s3Y21Fb1pDbDlLWDFtZFc1amRHbHZiaUJFWVNoaExHSXBlM1poY2lCalBVODdjbVYwZFhKdVhDSm1kVzVqZEdsdmJsd2lJVDEwZVhCbGIyWWdWMlZpUVhOelpXMWliSGt1YVc1emRHRnVkR2xoZEdWVGRISmxZVzFwYm1kOGZIcGhLR01wZkh4SktHTXBmSHhDZkh4Y0ltWjFibU4wYVc5dVhDSWhQWFI1Y0dWdlppQm1aWFJqYUQ5RFlTaGpMR0VzWWlrNlptVjBZMmdvWXl4N1kzSmxaR1Z1ZEdsaGJITTZYQ0p6WVcxbExXOXlhV2RwYmx3aWZTa3VkR2hsYmloa1BUNVhaV0pCYzNObGJXSnNlUzVwYm5OMFlXNTBhV0YwWlZOMGNtVmhiV2x1Wnloa0xHRXBMblJvWlc0b1lpeG1kVzVqZEdsdmJpaG5LWHRLS0dCM1lYTnRJSE4wY21WaGJXbHVaeUJqYjIxd2FXeGxJR1poYVd4bFpEb2dKSHRuZldBcE8wb29YQ0ptWVd4c2FXNW5JR0poWTJzZ2RHOGdRWEp5WVhsQ2RXWm1aWElnYVc1emRHRnVkR2xoZEdsdmJsd2lLVHR5WlhSMWNtNGdRMkVvWXl4aExHSXBmU2twZlZ4dWRtRnlJRkFzUldFOWV6a3lNak00TURvb1lTeGlMR01zWkNrOVBudHBaaWhjSW5WdVpHVm1hVzVsWkZ3aVBUMTBlWEJsYjJZZ2RueDhJWFl1WTJJcGNtVjBkWEp1SURFN1lUMVJLR0UrUGo0d0tUdGhMbk4wWVhKMGMxZHBkR2dvWENJdUwxd2lLU1ltS0dFOVlTNXpkV0p6ZEhKcGJtY29NaWtwTzJFOWRpNWpZaTVuWlhRb1lTazdhV1lvSVdFcGNtVjBkWEp1SURJN1lqNCtQajB3TzJNK1BqNDlNRHRrUGo0K1BUQTdhV1lvWWl0alBtRXVZbmwwWlV4bGJtZDBhQ2x5WlhSMWNtNGdNenQwY25sN2NtVjBkWEp1SUc0b0tTNXpaWFFvWVM1emRXSmhjbkpoZVNoaUxHSXJZeWtzWkQ0K1BqQXBMREI5WTJGMFkyaDdjbVYwZFhKdUlEUjlmWDA3Wm5WdVkzUnBiMjRnVWloaEtYdDBhR2x6TG01aGJXVTlYQ0pGZUdsMFUzUmhkSFZ6WENJN2RHaHBjeTV0WlhOellXZGxQV0JRY205bmNtRnRJSFJsY20xcGJtRjBaV1FnZDJsMGFDQmxlR2wwS0NSN1lYMHBZRHQwYUdsekxuTjBZWFIxY3oxaGZWeHVkbUZ5SUVaaFBXRTlQbnRoTG5SbGNtMXBibUYwWlNncE8yRXViMjV0WlhOellXZGxQU2dwUFQ1N2ZYMHNTR0U5WVQwK2V6QTlQVk11VUdFdWJHVnVaM1JvSmlZb1IyRW9LU3hUTGxsaEtGTXVVR0ZiTUYwcEtUdDJZWElnWWoxVExsQmhMbkJ2Y0NncE8ybG1LQ0ZpS1hKbGRIVnliaUEyTzFNdVVXRXVjSFZ6YUNoaUtUdFRMazFoVzJFdVQyRmRQV0k3WWk1UFlUMWhMazloTzNaaGNpQmpQWHRqYldRNlhDSnlkVzVjSWl4emRHRnlkRjl5YjNWMGFXNWxPbUV1YTJJc1lYSm5PbUV1YUdJc2NIUm9jbVZoWkY5d2RISTZZUzVQWVgwN1FpWW1ZaTUxYm5KbFppZ3BPMkl1Y0c5emRFMWxjM05oWjJVb1l5eGhMbkZpS1R0eVpYUjFjbTRnTUgwc1ZEMHdMRWxoUFZ3aWRXNWtaV1pwYm1Wa1hDSWhQWFI1Y0dWdlppQlVaWGgwUkdWamIyUmxjajl1WlhjZ1ZHVjRkRVJsWTI5a1pYSW9YQ0oxZEdZNFhDSXBPblp2YVdRZ01DeEtZVDBvWVN4aUxHTXBQVDU3WWo0K1BqMHdPM1poY2lCa1BXSXJZenRtYjNJb1l6MWlPMkZiWTEwbUppRW9ZejQ5WkNrN0tTc3JZenRwWmlneE5qeGpMV0ltSm1FdVluVm1abVZ5SmlaSllTbHlaWFIxY200Z1NXRXVaR1ZqYjJSbEtHRXVZblZtWm1WeUlHbHVjM1JoYm1ObGIyWWdVMmhoY21Wa1FYSnlZWGxDZFdabVpYSS9ZUzV6YkdsalpTaGlMR01wT21FdWMzVmlZWEp5WVhrb1lpeGpLU2s3WEc1bWIzSW9aRDFjSWx3aU8ySThZenNwZTNaaGNpQm5QV0ZiWWlzclhUdHBaaWhuSmpFeU9DbDdkbUZ5SUdnOVlWdGlLeXRkSmpZek8ybG1LREU1TWowOUtHY21NakkwS1Nsa0t6MVRkSEpwYm1jdVpuSnZiVU5vWVhKRGIyUmxLQ2huSmpNeEtUdzhObnhvS1R0bGJITmxlM1poY2lCclBXRmJZaXNyWFNZMk16dG5QVEl5TkQwOUtHY21NalF3S1Q4b1p5WXhOU2s4UERFeWZHZzhQRFo4YXpvb1p5WTNLVHc4TVRoOGFEdzhNVEo4YXp3OE5ueGhXMklySzEwbU5qTTdOalUxTXpZK1p6OWtLejFUZEhKcGJtY3Vabkp2YlVOb1lYSkRiMlJsS0djcE9paG5MVDAyTlRVek5peGtLejFUZEhKcGJtY3Vabkp2YlVOb1lYSkRiMlJsS0RVMU1qazJmR2MrUGpFd0xEVTJNekl3ZkdjbU1UQXlNeWtwZlgxbGJITmxJR1FyUFZOMGNtbHVaeTVtY205dFEyaGhja052WkdVb1p5bDljbVYwZFhKdUlHUjlMRkU5S0dFc1lpazlQaWhoUGo0K1BUQXBQMHBoS0c0b0tTeGhMR0lwT2x3aVhDSXNUR0U5WVQwK2UzWmhjaUJpUFV0aEtDazdZVDFoS0NrN1ZTaGlLVHR5WlhSMWNtNGdZWDA3WEc1bWRXNWpkR2x2YmlCV0tHRXNZaWw3ZG1GeUlHTTlZWEpuZFcxbGJuUnpMbXhsYm1kMGFDMHlMR1E5WVhKbmRXMWxiblJ6TzNKbGRIVnliaUJNWVNnb0tUMCtlMlp2Y2loMllYSWdaejFOWVNnNEttTXBMR2c5Wno0K1BqTXNhejB3TzJzOFl6dHJLeXNwZTNaaGNpQjBQV1JiTWl0clhUdGxZU2dwVzJncmF6NCtQakJkUFhSOWNtVjBkWEp1SUU1aEtHRXNZeXhuTEdJcGZTbDlablZ1WTNScGIyNGdUMkVvWVNsN2FXWW9SQ2x5WlhSMWNtNGdWaWd3TERFc1lTazdURDFoT3pBOFZIeDhLRk11YkdJb0tTeDJMbTl1UlhocGREOHVLR0VwTEVzOUlUQXBPM29vWVN4dVpYY2dVaWhoS1NsOWRtRnlJRkZoUFdFOVBudE1QV0U3YVdZb1JDbDBhSEp2ZHlCUVlTaGhLU3hjSW5WdWQybHVaRndpTzA5aEtHRXBmVHRtZFc1amRHbHZiaUJTWVNncGUyWnZjaWgyWVhJZ1lUMTJMbTUxYlZSb2NtVmhaSE03WVMwdE95bEhZU2dwTzNWaExuVnVjMmhwWm5Rb0tDazlQbnROS3lzN1UyRW9LQ2s5UG5saEtDa3BmU2w5Wm5WdVkzUnBiMjRnUjJFb0tYdDJZWElnWVQxc1lTaGNJbTl5ZEMxM1lYTnRMWFJvY21WaFpHVmtMbmR2Y210bGNpNXFjMXdpS1R0aFBXNWxkeUJYYjNKclpYSW9ZU2s3VXk1UVlTNXdkWE5vS0dFcGZWeHVablZ1WTNScGIyNGdVMkVvWVNsN1JEOWhLQ2s2VUhKdmJXbHpaUzVoYkd3b1V5NVFZUzV0WVhBb1V5NVpZU2twTG5Sb1pXNG9ZU2w5WEc1MllYSWdVejE3VUdFNlcxMHNVV0U2VzEwc1ltSTZXMTBzVFdFNmUzMHNWMkVvS1h0RVB5aFRMbkpsWTJWcGRtVlBZbXBsWTNSVWNtRnVjMlpsY2oxVExtcGlMRk11ZEdoeVpXRmtTVzVwZEZSTVV6MVRMbUZpTEZNdWMyVjBSWGhwZEZOMFlYUjFjejFUTGlSaEtUcFNZU2dwZlN3a1lUcGhQVDVNUFdFc2RHSTZXMXdpSkhSbGNtMXBibUYwWlZkdmNtdGxjbHdpWFN4c1lqb29LVDArZTJadmNpaDJZWElnWVNCdlppQlRMbEZoS1VaaEtHRXBPMlp2Y2loaElHOW1JRk11VUdFcFJtRW9ZU2s3VXk1UVlUMWJYVHRUTGxGaFBWdGRPMU11VFdFOVcxMTlMRnBoT21FOVBudDJZWElnWWoxaExrOWhPMlJsYkdWMFpTQlRMazFoVzJKZE8xTXVVR0V1Y0hWemFDaGhLVHRUTGxGaExuTndiR2xqWlNoVExsRmhMbWx1WkdWNFQyWW9ZU2tzTVNrN1lTNVBZVDB3TzFSaEtHSXBmU3hxWWlncGUzMHNZV0lvS1h0VExtSmlMbVp2Y2tWaFkyZ29ZVDArWVNncEtYMHNXV0U2WVQwK2JtVjNJRkJ5YjIxcGMyVW9ZajArZTJFdWIyNXRaWE56WVdkbFBXZzlQbnRvUFdndVpHRjBZVHQyWVhJZ2F6MW9MbU50WkR0cFppaG9MblJoY21kbGRGUm9jbVZoWkNZbWFDNTBZWEpuWlhSVWFISmxZV1FoUFZjb0tTbDdkbUZ5SUhROVV5NU5ZVnRvTG5SaGNtZGxkRlJvY21WaFpGMDdkRDkwTG5CdmMzUk5aWE56WVdkbEtHZ3NhQzUwY21GdWMyWmxja3hwYzNRcE9seHVTaWhnU1c1MFpYSnVZV3dnWlhKeWIzSWhJRmR2Y210bGNpQnpaVzUwSUdFZ2JXVnpjMkZuWlNCY0lpUjdhMzFjSWlCMGJ5QjBZWEpuWlhRZ2NIUm9jbVZoWkNBa2UyZ3VkR0Z5WjJWMFZHaHlaV0ZrZlN3Z1luVjBJSFJvWVhRZ2RHaHlaV0ZrSUc1dklHeHZibWRsY2lCbGVHbHpkSE1oWUNsOVpXeHpaU0JwWmloY0ltTm9aV05yVFdGcGJHSnZlRndpUFQwOWF5bFlLQ2s3Wld4elpTQnBaaWhjSW5Od1lYZHVWR2h5WldGa1hDSTlQVDFyS1VoaEtHZ3BPMlZzYzJVZ2FXWW9YQ0pqYkdWaGJuVndWR2h5WldGa1hDSTlQVDFyS1ZNdVdtRW9VeTVOWVZ0b0xuUm9jbVZoWkYwcE8yVnNjMlVnYVdZb1hDSnJhV3hzVkdoeVpXRmtYQ0k5UFQxcktXZzlhQzUwYUhKbFlXUXNhejFUTGsxaFcyaGRMR1JsYkdWMFpTQlRMazFoVzJoZExFWmhLR3NwTEZSaEtHZ3BMRk11VVdFdWMzQnNhV05sS0ZNdVVXRXVhVzVrWlhoUFppaHJLU3d4S1N4ckxrOWhQVEE3Wld4elpTQnBaaWhjSW1OaGJtTmxiRlJvY21WaFpGd2lQVDA5YXlsVExrMWhXMmd1ZEdoeVpXRmtYUzV3YjNOMFRXVnpjMkZuWlNoN1kyMWtPbHdpWTJGdVkyVnNYQ0o5S1R0bGJITmxJR2xtS0Z3aWJHOWhaR1ZrWENJOVBUMXJLV0V1Ykc5aFpHVmtQU0V3TEVJbUppRmhMazloSmlaaExuVnVjbVZtS0Nrc1lpaGhLVHRsYkhObElHbG1LRndpWVd4bGNuUmNJajA5UFdzcFlXeGxjblFvWUZSb2NtVmhaQ0FrZTJndWRHaHlaV0ZrU1dSOU9pQWtlMmd1ZEdWNGRIMWdLVHRjYm1Wc2MyVWdhV1lvWENKelpYUnBiVzFsWkdsaGRHVmNJajA5UFdndWRHRnlaMlYwS1dFdWNHOXpkRTFsYzNOaFoyVW9hQ2s3Wld4elpTQnBaaWhjSW1OaGJHeElZVzVrYkdWeVhDSTlQVDFyS1haYmFDNW9ZVzVrYkdWeVhTZ3VMaTVvTG1GeVozTXBPMlZzYzJVZ2F5WW1TaWhnZDI5eWEyVnlJSE5sYm5RZ1lXNGdkVzVyYm05M2JpQmpiMjF0WVc1a0lDUjdhMzFnS1gwN1lTNXZibVZ5Y205eVBXZzlQbnRLS0dBa2Uxd2lkMjl5YTJWeUlITmxiblFnWVc0Z1pYSnliM0loWENKOUlDUjdhQzVtYVd4bGJtRnRaWDA2Skh0b0xteHBibVZ1YjMwNklDUjdhQzV0WlhOellXZGxmV0FwTzNSb2NtOTNJR2c3ZlR0Q0ppWW9ZUzV2YmloY0ltMWxjM05oWjJWY0lpeG9QVDVoTG05dWJXVnpjMkZuWlNoN1pHRjBZVHBvZlNrcExHRXViMjRvWENKbGNuSnZjbHdpTEdnOVBtRXViMjVsY25KdmNpaG9LU2twTzNaaGNpQmpQVnRkTEdROVcxd2liMjVGZUdsMFhDSmRMR2M3Wm05eUtHY2diMllnWkNsMkxtaGhjMDkzYmxCeWIzQmxjblI1S0djcEppWmpMbkIxYzJnb1p5azdZUzV3YjNOMFRXVnpjMkZuWlNoN1kyMWtPbHdpYkc5aFpGd2lMR2hoYm1Sc1pYSnpPbU1zZFhKc1QzSkNiRzlpT25ZdWJXRnBibE5qY21sd2RGVnliRTl5UW14dllueDhYM05qY21sd2RFUnBjaXgzWVhOdFRXVnRiM0o1T21Vc2QyRnpiVTF2WkhWc1pUcHpZWDBwZlNsOU8xeHVkaTVRVkdoeVpXRmtQVk03ZG1GeUlGVmhQV0U5UG50bWIzSW9PekE4WVM1c1pXNW5kR2c3S1dFdWMyaHBablFvS1NoMktYMDdkaTVsYzNSaFlteHBjMmhUZEdGamExTndZV05sUFNncFBUNTdkbUZ5SUdFOVZ5Z3BMR0k5Y2lncFcyRXJOVEkrUGo0eVBqNCtNRjA3WVQxeUtDbGJZU3MxTmo0K1BqSStQajR3WFR0V1lTaGlMR0l0WVNrN1ZTaGlLWDA3Wm5WdVkzUnBiMjRnVUdFb1lTbDdhV1lvUkNseVpYUjFjbTRnVmlneExEQXNZU2s3VVdFb1lTbDlkbUZ5SUZkaFBWdGRMRmhoTzNZdWFXNTJiMnRsUlc1MGNubFFiMmx1ZEQwb1lTeGlLVDArZTNaaGNpQmpQVmRoVzJGZE8yTjhmQ2hoUGoxWFlTNXNaVzVuZEdnbUppaFhZUzVzWlc1bmRHZzlZU3N4S1N4WFlWdGhYVDFqUFZoaExtZGxkQ2hoS1NrN1lUMWpLR0lwT3pBOFZEOVRMaVJoS0dFcE9sbGhLR0VwZlR0Y2JtWjFibU4wYVc5dUlGcGhLR0VwZTNSb2FYTXVWbUU5WVMweU5EdDBhR2x6TG1kaVBXWjFibU4wYVc5dUtHSXBlM0lvS1Z0MGFHbHpMbFpoS3pRK1BqNHlQajQrTUYwOVluMDdkR2hwY3k1bVlqMW1kVzVqZEdsdmJpaGlLWHR5S0NsYmRHaHBjeTVXWVNzNFBqNCtNajQrUGpCZFBXSjlPM1JvYVhNdVYyRTlablZ1WTNScGIyNG9ZaXhqS1h0MGFHbHpMbVZpS0NrN2RHaHBjeTVuWWloaUtUdDBhR2x6TG1aaUtHTXBmVHQwYUdsekxtVmlQV1oxYm1OMGFXOXVLQ2w3Y2lncFczUm9hWE11Vm1Fck1UWStQajR5UGo0K01GMDlNSDE5ZG1GeUlDUmhQVEFzWVdJOU1EdG1kVzVqZEdsdmJpQmlZaWhoTEdJc1l5eGtLWHR5WlhSMWNtNGdSRDlXS0RJc01TeGhMR0lzWXl4a0tUcGpZaWhoTEdJc1l5eGtLWDFjYm1aMWJtTjBhVzl1SUdOaUtHRXNZaXhqTEdRcGUyRStQajQ5TUR0aVBqNCtQVEE3WXo0K1BqMHdPMlErUGo0OU1EdHBaaWhjSW5WdVpHVm1hVzVsWkZ3aVBUMTBlWEJsYjJZZ1UyaGhjbVZrUVhKeVlYbENkV1ptWlhJcGNtVjBkWEp1SUVvb1hDSkRkWEp5Wlc1MElHVnVkbWx5YjI1dFpXNTBJR1J2WlhNZ2JtOTBJSE4xY0hCdmNuUWdVMmhoY21Wa1FYSnlZWGxDZFdabVpYSXNJSEIwYUhKbFlXUnpJR0Z5WlNCdWIzUWdZWFpoYVd4aFlteGxJVndpS1N3Mk8zWmhjaUJuUFZ0ZE8ybG1LRVFtSmpBOVBUMW5MbXhsYm1kMGFDbHlaWFIxY200Z1ltSW9ZU3hpTEdNc1pDazdZVDE3YTJJNll5eFBZVHBoTEdoaU9tUXNjV0k2WjMwN2NtVjBkWEp1SUVRL0tHRXVjMkk5WENKemNHRjNibFJvY21WaFpGd2lMSEJ2YzNSTlpYTnpZV2RsS0dFc1p5a3NNQ2s2U0dFb1lTbDlablZ1WTNScGIyNGdaR0lvWVN4aUxHTXBlM0psZEhWeWJpQkVQMVlvTXl3eExHRXNZaXhqS1Rvd2ZXWjFibU4wYVc5dUlHVmlLR0VzWWlsN2FXWW9SQ2x5WlhSMWNtNGdWaWcwTERFc1lTeGlLWDFjYm5aaGNpQm1ZajFoUFQ1N1ptOXlLSFpoY2lCaVBUQXNZejB3TzJNOFlTNXNaVzVuZEdnN0t5dGpLWHQyWVhJZ1pEMWhMbU5vWVhKRGIyUmxRWFFvWXlrN01USTNQajFrUDJJckt6b3lNRFEzUGoxa1AySXJQVEk2TlRVeU9UWThQV1FtSmpVM016UXpQajFrUHloaUt6MDBMQ3NyWXlrNllpczlNMzF5WlhSMWNtNGdZbjBzWjJJOUtHRXNZaXhqTEdRcFBUNTdZejQrUGowd08ybG1LQ0VvTUR4a0tTbHlaWFIxY200Z01EdDJZWElnWnoxak8yUTlZeXRrTFRFN1ptOXlLSFpoY2lCb1BUQTdhRHhoTG14bGJtZDBhRHNySzJncGUzWmhjaUJyUFdFdVkyaGhja052WkdWQmRDaG9LVHRwWmlnMU5USTVOanc5YXlZbU5UY3pORE0rUFdzcGUzWmhjaUIwUFdFdVkyaGhja052WkdWQmRDZ3JLMmdwTzJzOU5qVTFNellyS0NockpqRXdNak1wUER3eE1DbDhkQ1l4TURJemZXbG1LREV5Tno0OWF5bDdhV1lvWXo0OVpDbGljbVZoYXp0aVcyTXJLejQrUGpCZFBXdDlaV3h6Wlh0cFppZ3lNRFEzUGoxcktYdHBaaWhqS3pFK1BXUXBZbkpsWVdzN1lsdGpLeXMrUGo0d1hUMHhPVEo4YXo0K05uMWxiSE5sZTJsbUtEWTFOVE0xUGoxcktYdHBaaWhqS3pJK1BXUXBZbkpsWVdzN1lsdGpLeXMrUGo0d1hUMHlNalI4YXo0K01USjlaV3h6Wlh0cFppaGpLek0rUFdRcFluSmxZV3M3WWx0akt5cytQajR3WFQweU5EQjhhejQrWEc0eE9EdGlXMk1yS3o0K1BqQmRQVEV5T0h4clBqNHhNaVkyTTMxaVcyTXJLejQrUGpCZFBURXlPSHhyUGo0MkpqWXpmV0piWXlzclBqNCtNRjA5TVRJNGZHc21Oak45ZldKYll6NCtQakJkUFRBN2NtVjBkWEp1SUdNdFozMHNhR0k5S0dFc1lpeGpLVDArWjJJb1lTeHVLQ2tzWWl4aktUdG1kVzVqZEdsdmJpQnBZaWhoTEdJcGUybG1LRVFwY21WMGRYSnVJRllvTlN3eExHRXNZaWw5Wm5WdVkzUnBiMjRnYW1Jb1lTeGlMR01wZTJsbUtFUXBjbVYwZFhKdUlGWW9OaXd4TEdFc1lpeGpLWDFtZFc1amRHbHZiaUJyWWloaExHSXNZeWw3Y21WMGRYSnVJRVEvVmlnM0xERXNZU3hpTEdNcE9qQjlablZ1WTNScGIyNGdiR0lvWVN4aUtYdHBaaWhFS1hKbGRIVnliaUJXS0Rnc01TeGhMR0lwZldaMWJtTjBhVzl1SUcxaUtHRXNZaXhqS1h0cFppaEVLWEpsZEhWeWJpQldLRGtzTVN4aExHSXNZeWw5Wm5WdVkzUnBiMjRnYm1Jb1lTeGlMR01zWkNsN2FXWW9SQ2x5WlhSMWNtNGdWaWd4TUN3eExHRXNZaXhqTEdRcGZXWjFibU4wYVc5dUlHOWlLR0VzWWl4akxHUXBlMmxtS0VRcGNtVjBkWEp1SUZZb01URXNNU3hoTEdJc1l5eGtLWDFtZFc1amRHbHZiaUJ3WWloaExHSXNZeXhrS1h0cFppaEVLWEpsZEhWeWJpQldLREV5TERFc1lTeGlMR01zWkNsOVhHNW1kVzVqZEdsdmJpQnhZaWhoS1h0cFppaEVLWEpsZEhWeWJpQldLREV6TERFc1lTbDlablZ1WTNScGIyNGdjbUlvWVN4aUtYdHBaaWhFS1hKbGRIVnliaUJXS0RFMExERXNZU3hpS1gxbWRXNWpkR2x2YmlCellpaGhMR0lzWXlsN2FXWW9SQ2x5WlhSMWNtNGdWaWd4TlN3eExHRXNZaXhqS1gxbWRXNWpkR2x2YmlCMFlpaGhLWHRoUGo0K1BUQTdYQ0ptZFc1amRHbHZibHdpUFQwOWRIbHdaVzltSUVGMGIyMXBZM011Y21JbUppaEJkRzl0YVdOekxuSmlLSEFvS1N4aFBqNCtNaXhoS1M1MllXeDFaUzUwYUdWdUtGZ3BMR0VyUFRFeU9DeEJkRzl0YVdOekxuTjBiM0psS0hBb0tTeGhQajQrTWl3eEtTbDlkaTVmWDJWdGMyTnlhWEIwWlc1ZmRHaHlaV0ZrWDIxaGFXeGliM2hmWVhkaGFYUTlkR0k3ZG1GeUlGZzlLQ2s5UG50MllYSWdZVDFYS0NrN2FXWW9ZU1ltS0hSaUtHRXBMR0U5ZFdJc0lVc3BLWFJ5ZVh0cFppaGhLQ2tzSVNnd1BGUXBLWFJ5ZVh0RVAxbGhLRXdwT2xGaEtFd3BmV05oZEdOb0tHSXBlMklnYVc1emRHRnVZMlZ2WmlCU2ZIeGNJblZ1ZDJsdVpGd2lQVDFpZkh4NktERXNZaWw5ZldOaGRHTm9LR0lwZTJJZ2FXNXpkR0Z1WTJWdlppQlNmSHhjSW5WdWQybHVaRndpUFQxaWZIeDZLREVzWWlsOWZUdDJMbU5vWldOclRXRnBiR0p2ZUQxWU8xeHVkbUZ5SUhaaVBWdGRMRms5WVQwK01EMDlQV0VsTkNZbUtEQWhQVDFoSlRFd01IeDhNRDA5UFdFbE5EQXdLU3gzWWoxYk1Dd3pNU3cyTUN3NU1Td3hNakVzTVRVeUxERTRNaXd5TVRNc01qUTBMREkzTkN3ek1EVXNNek0xWFN4NFlqMWJNQ3d6TVN3MU9TdzVNQ3d4TWpBc01UVXhMREU0TVN3eU1USXNNalF6TERJM015d3pNRFFzTXpNMFhUdG1kVzVqZEdsdmJpQjVZaWhoTEdJc1l5eGtMR2NzYUN4ckxIUXBlM0psZEhWeWJpQkVQMVlvTVRZc01TeGhMR0lzWXl4a0xHY3NhQ3hyTEhRcE9pMDFNbjFtZFc1amRHbHZiaUI2WWloaExHSXNZeXhrTEdjc2FDeHJLWHRwWmloRUtYSmxkSFZ5YmlCV0tERTNMREVzWVN4aUxHTXNaQ3huTEdnc2F5bDlYRzUyWVhJZ1FtSTlZVDArZTNaaGNpQmlQV1ppS0dFcEt6RXNZejFCWWloaUtUdGpKaVpvWWloaExHTXNZaWs3Y21WMGRYSnVJR045TEVOaVBWdGRMRVJpUFh0OUxFWmlQU2dwUFQ1N2FXWW9JVVZpS1h0MllYSWdZVDE3VlZORlVqcGNJbmRsWWw5MWMyVnlYQ0lzVEU5SFRrRk5SVHBjSW5kbFlsOTFjMlZ5WENJc1VFRlVTRHBjSWk5Y0lpeFFWMFE2WENJdlhDSXNTRTlOUlRwY0lpOW9iMjFsTDNkbFlsOTFjMlZ5WENJc1RFRk9Sem9vWENKdlltcGxZM1JjSWowOWRIbHdaVzltSUc1aGRtbG5ZWFJ2Y2lZbWJtRjJhV2RoZEc5eUxteGhibWQxWVdkbGN5WW1ibUYyYVdkaGRHOXlMbXhoYm1kMVlXZGxjMXN3WFh4OFhDSkRYQ0lwTG5KbGNHeGhZMlVvWENJdFhDSXNYQ0pmWENJcEsxd2lMbFZVUmkwNFhDSXNYenBxWVh4OFhDSXVMM1JvYVhNdWNISnZaM0poYlZ3aWZTeGlPMlp2Y2loaUlHbHVJRVJpS1hadmFXUWdNRDA5UFVSaVcySmRQMlJsYkdWMFpTQmhXMkpkT21GYllsMDlSR0piWWwwN2RtRnlJR005VzEwN1ptOXlLR0lnYVc0Z1lTbGpMbkIxYzJnb1lDUjdZbjA5Skh0aFcySmRmV0FwTzBWaVBXTjljbVYwZFhKdUlFVmlmU3hGWWp0Y2JtWjFibU4wYVc5dUlFZGlLR0VzWWlsN2FXWW9SQ2x5WlhSMWNtNGdWaWd4T0N3eExHRXNZaWs3WVQ0K1BqMHdPMkkrUGo0OU1EdDJZWElnWXowd08wWmlLQ2t1Wm05eVJXRmphQ2dvWkN4bktUMCtlM1poY2lCb1BXSXJZenRuUFhJb0tWdGhLelFxWno0K1BqSStQajR3WFQxb08yWnZjaWhvUFRBN2FEeGtMbXhsYm1kMGFEc3JLMmdwWVdFb0tWdG5LeXMrUGo0d1BqNCtNRjA5WkM1amFHRnlRMjlrWlVGMEtHZ3BPMkZoS0NsYlp6NCtQakErUGo0d1hUMHdPMk1yUFdRdWJHVnVaM1JvS3pGOUtUdHlaWFIxY200Z01IMW1kVzVqZEdsdmJpQkxZaWhoTEdJcGUybG1LRVFwY21WMGRYSnVJRllvTVRrc01TeGhMR0lwTzJFK1BqNDlNRHRpUGo0K1BUQTdkbUZ5SUdNOVJtSW9LVHR5S0NsYllUNCtQakkrUGo0d1hUMWpMbXhsYm1kMGFEdDJZWElnWkQwd08yTXVabTl5UldGamFDaG5QVDVrS3oxbkxteGxibWQwYUNzeEtUdHlLQ2xiWWo0K1BqSStQajR3WFQxa08zSmxkSFZ5YmlBd2ZXWjFibU4wYVc5dUlFeGlLR0VwZTNKbGRIVnliaUJFUDFZb01qQXNNU3hoS1RvMU1uMW1kVzVqZEdsdmJpQk5ZaWhoTEdJc1l5eGtLWHR5WlhSMWNtNGdSRDlXS0RJeExERXNZU3hpTEdNc1pDazZOVEo5WEc1bWRXNWpkR2x2YmlCT1lpaGhMR0lzWXl4a0xHY3BlM0psZEhWeWJpQkVQMVlvTWpJc01TeGhMR0lzWXl4a0xHY3BPamN3ZlhaaGNpQlBZajFiYm5Wc2JDeGJYU3hiWFYwN1puVnVZM1JwYjI0Z1VHSW9ZU3hpTEdNc1pDbDdhV1lvUkNseVpYUjFjbTRnVmlneU15d3hMR0VzWWl4akxHUXBPMkkrUGo0OU1EdGpQajQrUFRBN1pENCtQajB3TzJadmNpaDJZWElnWnowd0xHZzlNRHRvUEdNN2FDc3JLWHQyWVhJZ2F6MXlLQ2xiWWo0K1BqSStQajR3WFN4MFBYSW9LVnRpS3pRK1BqNHlQajQrTUYwN1lpczlPRHRtYjNJb2RtRnlJRU05TUR0RFBIUTdReXNyS1h0MllYSWdkejF1S0NsYmF5dERQajQrTUYwc2VUMVBZbHRoWFRzd1BUMDlkM3g4TVRBOVBUMTNQeWdvTVQwOVBXRS9jV0U2U2lrb1NtRW9lU3d3S1Nrc2VTNXNaVzVuZEdnOU1DazZlUzV3ZFhOb0tIY3BmV2NyUFhSOWNpZ3BXMlErUGo0eVBqNCtNRjA5Wnp0eVpYUjFjbTRnTUgxMllYSWdVV0k5V3pNeExESTVMRE14TERNd0xETXhMRE13TERNeExETXhMRE13TERNeExETXdMRE14WFN4U1lqMWJNekVzTWpnc016RXNNekFzTXpFc016QXNNekVzTXpFc016QXNNekVzTXpBc016RmRPMXh1Wm5WdVkzUnBiMjRnVTJJb1lTbDdkbUZ5SUdJOVFYSnlZWGtvWm1Jb1lTa3JNU2s3WjJJb1lTeGlMREFzWWk1c1pXNW5kR2dwTzNKbGRIVnliaUJpZlhaaGNpQlVZajBvWVN4aUtUMCtlMkZoS0NrdWMyVjBLR0VzWWo0K1BqQXBmVHRjYm1aMWJtTjBhVzl1SUZWaUtHRXNZaXhqTEdRcGUyWjFibU4wYVc5dUlHY29aaXh4TEhVcGUyWnZjaWhtUFZ3aWJuVnRZbVZ5WENJOVBYUjVjR1Z2WmlCbVAyWXVkRzlUZEhKcGJtY29LVHBtZkh4Y0lsd2lPMll1YkdWdVozUm9QSEU3S1dZOWRWc3dYU3RtTzNKbGRIVnliaUJtZldaMWJtTjBhVzl1SUdnb1ppeHhLWHR5WlhSMWNtNGdaeWhtTEhFc1hDSXdYQ0lwZldaMWJtTjBhVzl1SUdzb1ppeHhLWHRtZFc1amRHbHZiaUIxS0VoaUtYdHlaWFIxY200Z01ENUlZajh0TVRvd1BFaGlQekU2TUgxMllYSWdSanN3UFQwOUtFWTlkU2htTG1kbGRFWjFiR3haWldGeUtDa3RjUzVuWlhSR2RXeHNXV1ZoY2lncEtTa21KakE5UFQwb1JqMTFLR1l1WjJWMFRXOXVkR2dvS1MxeExtZGxkRTF2Ym5Sb0tDa3BLU1ltS0VZOWRTaG1MbWRsZEVSaGRHVW9LUzF4TG1kbGRFUmhkR1VvS1NrcE8zSmxkSFZ5YmlCR2ZXWjFibU4wYVc5dUlIUW9aaWw3YzNkcGRHTm9LR1l1WjJWMFJHRjVLQ2twZTJOaGMyVWdNRHB5WlhSMWNtNGdibVYzSUVSaGRHVW9aaTVuWlhSR2RXeHNXV1ZoY2lncExURXNNVEVzTWprcE8yTmhjMlVnTVRweVpYUjFjbTRnWmp0allYTmxJREk2Y21WMGRYSnVJRzVsZHlCRVlYUmxLR1l1WjJWMFJuVnNiRmxsWVhJb0tTd3dMRE1wTzJOaGMyVWdNenB5WlhSMWNtNGdibVYzSUVSaGRHVW9aaTVuWlhSR2RXeHNXV1ZoY2lncExGeHVNQ3d5S1R0allYTmxJRFE2Y21WMGRYSnVJRzVsZHlCRVlYUmxLR1l1WjJWMFJuVnNiRmxsWVhJb0tTd3dMREVwTzJOaGMyVWdOVHB5WlhSMWNtNGdibVYzSUVSaGRHVW9aaTVuWlhSR2RXeHNXV1ZoY2lncExURXNNVEVzTXpFcE8yTmhjMlVnTmpweVpYUjFjbTRnYm1WM0lFUmhkR1VvWmk1blpYUkdkV3hzV1dWaGNpZ3BMVEVzTVRFc016QXBmWDFtZFc1amRHbHZiaUJES0dZcGUzWmhjaUJ4UFdZdVVtRTdabTl5S0dZOWJtVjNJRVJoZEdVb0tHNWxkeUJFWVhSbEtHWXVVMkVyTVRrd01Dd3dMREVwS1M1blpYUlVhVzFsS0NrcE96QThjVHNwZTNaaGNpQjFQV1l1WjJWMFRXOXVkR2dvS1N4R1BTaFpLR1l1WjJWMFJuVnNiRmxsWVhJb0tTay9VV0k2VW1JcFczVmRPMmxtS0hFK1JpMW1MbWRsZEVSaGRHVW9LU2x4TFQxR0xXWXVaMlYwUkdGMFpTZ3BLekVzWmk1elpYUkVZWFJsS0RFcExERXhQblUvWmk1elpYUk5iMjUwYUNoMUt6RXBPaWhtTG5ObGRFMXZiblJvS0RBcExHWXVjMlYwUm5Wc2JGbGxZWElvWmk1blpYUkdkV3hzV1dWaGNpZ3BLekVwS1R0bGJITmxlMll1YzJWMFJHRjBaU2htTG1kbGRFUmhkR1VvS1N0eEtUdGljbVZoYTMxOWRUMXVaWGNnUkdGMFpTaG1MbWRsZEVaMWJHeFpaV0Z5S0Nrck1Td3dMRFFwTzNFOWRDaHVaWGNnUkdGMFpTaG1MbWRsZEVaMWJHeFpaV0Z5S0Nrc1hHNHdMRFFwS1R0MVBYUW9kU2s3Y21WMGRYSnVJREErUFdzb2NTeG1LVDh3UGoxcktIVXNaaWsvWmk1blpYUkdkV3hzV1dWaGNpZ3BLekU2Wmk1blpYUkdkV3hzV1dWaGNpZ3BPbVl1WjJWMFJuVnNiRmxsWVhJb0tTMHhmV0UrUGo0OU1EdGlQajQrUFRBN1l6NCtQajB3TzJRK1BqNDlNRHQyWVhJZ2R6MXlLQ2xiWkNzME1ENCtQakkrUGo0d1hUdGtQWHR2WWpwd0tDbGJaRDQrUGpJK1BqNHdYU3h1WWpwd0tDbGJaQ3MwUGo0K01qNCtQakJkTEZSaE9uQW9LVnRrS3pnK1BqNHlQajQrTUYwc1dHRTZjQ2dwVzJRck1USStQajR5UGo0K01GMHNWV0U2Y0NncFcyUXJNVFkrUGo0eVBqNCtNRjBzVTJFNmNDZ3BXMlFyTWpBK1BqNHlQajQrTUYwc1RtRTZjQ2dwVzJRck1qUStQajR5UGo0K01GMHNVbUU2Y0NncFcyUXJNamcrUGo0eVBqNCtNRjBzZFdJNmNDZ3BXMlFyTXpJK1BqNHlQajQrTUYwc2JXSTZjQ2dwVzJRck16WStQajR5UGo0K01GMHNjR0k2ZHo5UktIY3BPbHdpWENKOU8yTTlVU2hqS1R0M1BYdGNJaVZqWENJNlhDSWxZU0FsWWlBbFpDQWxTRG9sVFRvbFV5QWxXVndpTEZ3aUpVUmNJanBjSWlWdEx5VmtMeVY1WENJc1hDSWxSbHdpT2x3aUpWa3RKVzB0SldSY0lpeGNJaVZvWENJNlhDSWxZbHdpTEZ3aUpYSmNJanBjSWlWSk9pVk5PaVZUSUNWd1hDSXNYQ0lsVWx3aU9sd2lKVWc2SlUxY0lpeGNJaVZVWENJNlhDSWxTRG9sVFRvbFUxd2lMRndpSlhoY0lqcGNJaVZ0THlWa0x5VjVYQ0lzWEc1Y0lpVllYQ0k2WENJbFNEb2xUVG9sVTF3aUxGd2lKVVZqWENJNlhDSWxZMXdpTEZ3aUpVVkRYQ0k2WENJbFExd2lMRndpSlVWNFhDSTZYQ0lsYlM4bFpDOGxlVndpTEZ3aUpVVllYQ0k2WENJbFNEb2xUVG9sVTF3aUxGd2lKVVY1WENJNlhDSWxlVndpTEZ3aUpVVlpYQ0k2WENJbFdWd2lMRndpSlU5a1hDSTZYQ0lsWkZ3aUxGd2lKVTlsWENJNlhDSWxaVndpTEZ3aUpVOUlYQ0k2WENJbFNGd2lMRndpSlU5SlhDSTZYQ0lsU1Z3aUxGd2lKVTl0WENJNlhDSWxiVndpTEZ3aUpVOU5YQ0k2WENJbFRWd2lMRndpSlU5VFhDSTZYQ0lsVTF3aUxGd2lKVTkxWENJNlhDSWxkVndpTEZ3aUpVOVZYQ0k2WENJbFZWd2lMRndpSlU5V1hDSTZYQ0lsVmx3aUxGd2lKVTkzWENJNlhDSWxkMXdpTEZ3aUpVOVhYQ0k2WENJbFYxd2lMRndpSlU5NVhDSTZYQ0lsZVZ3aWZUdG1iM0lvZG1GeUlIa2dhVzRnZHlsalBXTXVjbVZ3YkdGalpTaHVaWGNnVW1WblJYaHdLSGtzWENKblhDSXBMSGRiZVYwcE8zWmhjaUJKWWoxY0lsTjFibVJoZVNCTmIyNWtZWGtnVkhWbGMyUmhlU0JYWldSdVpYTmtZWGtnVkdoMWNuTmtZWGtnUm5KcFpHRjVJRk5oZEhWeVpHRjVYQ0l1YzNCc2FYUW9YQ0lnWENJcExFcGlQVndpU21GdWRXRnllU0JHWldKeWRXRnllU0JOWVhKamFDQkJjSEpwYkNCTllYa2dTblZ1WlNCS2RXeDVJRUYxWjNWemRDQlRaWEIwWlcxaVpYSWdUMk4wYjJKbGNpQk9iM1psYldKbGNpQkVaV05sYldKbGNsd2lMbk53YkdsMEtGd2lJRndpS1R0M1BYdGNJaVZoWENJNlpqMCtTV0piWmk1T1lWMHVjM1ZpYzNSeWFXNW5LREFzTXlrc1hHNWNJaVZCWENJNlpqMCtTV0piWmk1T1lWMHNYQ0lsWWx3aU9tWTlQa3BpVzJZdVZXRmRMbk4xWW5OMGNtbHVaeWd3TERNcExGd2lKVUpjSWpwbVBUNUtZbHRtTGxWaFhTeGNJaVZEWENJNlpqMCthQ2dvWmk1VFlTc3hPVEF3S1M4eE1EQjhNQ3d5S1N4Y0lpVmtYQ0k2WmowK2FDaG1MbGhoTERJcExGd2lKV1ZjSWpwbVBUNW5LR1l1V0dFc01peGNJaUJjSWlrc1hDSWxaMXdpT21ZOVBrTW9aaWt1ZEc5VGRISnBibWNvS1M1emRXSnpkSEpwYm1jb01pa3NYQ0lsUjF3aU9tWTlQa01vWmlrc1hDSWxTRndpT21ZOVBtZ29aaTVVWVN3eUtTeGNJaVZKWENJNlpqMCtlMlk5Wmk1VVlUc3dQVDFtUDJZOU1USTZNVEk4WmlZbUtHWXRQVEV5S1R0eVpYUjFjbTRnYUNobUxESXBmU3hjSWlWcVhDSTZaajArZTJadmNpaDJZWElnY1Qwd0xIVTlNRHQxUEQxbUxsVmhMVEU3Y1NzOUtGa29aaTVUWVNzeE9UQXdLVDlSWWpwU1lpbGJkU3NyWFNrN2NtVjBkWEp1SUdnb1ppNVlZU3R4TERNcGZTeGNJaVZ0WENJNlpqMCthQ2htTGxWaEt6RXNNaWtzWENJbFRWd2lPbVk5UG1nb1ppNXVZaXd5S1N4Y0lpVnVYQ0k2S0NrOVBsd2lYRnh1WENJc1hDSWxjRndpT21ZOVBqQThQV1l1VkdFbUpqRXlQbVl1VkdFL1hDSkJUVndpT2x3aVVFMWNJaXhjSWlWVFhDSTZaajArYUNobUxtOWlMRElwTEZ3aUpYUmNJam9vS1QwK1hDSmNYSFJjSWl4Y0lpVjFYQ0k2WmowK1ppNU9ZWHg4Tnl4Y0lpVlZYQ0k2WmowK2FDaE5ZWFJvTG1ac2IyOXlLQ2htTGxKaEsxeHVOeTFtTGs1aEtTODNLU3d5S1N4Y0lpVldYQ0k2WmowK2UzWmhjaUJ4UFUxaGRHZ3VabXh2YjNJb0tHWXVVbUVyTnkwb1ppNU9ZU3MyS1NVM0tTODNLVHN5UGowb1ppNU9ZU3N6TnpFdFppNVNZUzB5S1NVM0ppWnhLeXM3YVdZb2NTazFNejA5Y1NZbUtIVTlLR1l1VG1Fck16Y3hMV1l1VW1FcEpUY3NORDA5ZFh4OE16MDlkU1ltV1NobUxsTmhLWHg4S0hFOU1Ta3BPMlZzYzJWN2NUMDFNanQyWVhJZ2RUMG9aaTVPWVNzM0xXWXVVbUV0TVNrbE56c29ORDA5ZFh4OE5UMDlkU1ltV1NobUxsTmhKVFF3TUMweEtTa21KbkVySzMxeVpYUjFjbTRnYUNoeExESXBmU3hjSWlWM1hDSTZaajArWmk1T1lTeGNJaVZYWENJNlpqMCthQ2hOWVhSb0xtWnNiMjl5S0NobUxsSmhLemN0S0dZdVRtRXJOaWtsTnlrdk55a3NNaWtzWENJbGVWd2lPbVk5UGlobUxsTmhLekU1TURBcExuUnZVM1J5YVc1bktDa3VjM1ZpYzNSeWFXNW5LRElwTEZ3aUpWbGNJanBtUFQ1bUxsTmhLekU1TURBc1hDSWxlbHdpT21ZOVBudG1QV1l1YldJN2RtRnlJSEU5TUR3OVpqdG1QVTFoZEdndVlXSnpLR1lwTHpZd08zSmxkSFZ5YmloeFAxd2lLMXdpT2x3aUxWd2lLU3RUZEhKcGJtY29YQ0l3TURBd1hDSXJLR1l2TmpBcU1UQXdLMllsTmpBcEtTNXpiR2xqWlNndE5DbDlMRndpSlZwY0lqcG1QVDVtTG5CaUxGd2lKU1ZjSWpvb0tUMCtYQ0lsWENKOU8yTTlZeTV5WlhCc1lXTmxLQzhsSlM5bkxGeHVYQ0pjWEhnd01GeGNlREF3WENJcE8yWnZjaWg1SUdsdUlIY3BZeTVwYm1Oc2RXUmxjeWg1S1NZbUtHTTlZeTV5WlhCc1lXTmxLRzVsZHlCU1pXZEZlSEFvZVN4Y0ltZGNJaWtzZDF0NVhTaGtLU2twTzJNOVl5NXlaWEJzWVdObEtDOWNYREJjWERBdlp5eGNJaVZjSWlrN2VUMVRZaWhqS1R0cFppaDVMbXhsYm1kMGFENWlLWEpsZEhWeWJpQXdPMVJpS0hrc1lTazdjbVYwZFhKdUlIa3ViR1Z1WjNSb0xURjlVeTVYWVNncE8xeHVkbUZ5SUZaaVBWdFBZU3hRWVN4aVlpeGtZaXhsWWl4cFlpeHFZaXhyWWl4c1lpeHRZaXh1WWl4dllpeHdZaXh4WWl4eVlpeHpZaXg1WWl4NllpeEhZaXhMWWl4TVlpeE5ZaXhPWWl4UVlsMHNXbUk5ZTJJNlpuVnVZM1JwYjI0b1lTeGlMR01wZTJFK1BqNDlNRHNvYm1WM0lGcGhLR0VwS1M1WFlTaGlQajQrTUN4alBqNCtNQ2s3SkdFOVlUdGhZaXNyTzNSb2NtOTNJQ1JoTzMwc1REcG1kVzVqZEdsdmJpaGhLWHRYWWloaFBqNCtNQ3doUVN3eExDRnJZU3d4TXpFd056SXNJVEVwTzFNdVlXSW9LWDBzYWpwbWRXNWpkR2x2YmloaEtYdGhQajQrUFRBN1JEOXdiM04wVFdWemMyRm5aU2g3WTIxa09sd2lZMnhsWVc1MWNGUm9jbVZoWkZ3aUxIUm9jbVZoWkRwaGZTazZVeTVhWVNoVExrMWhXMkZkS1gwc1NEcGpZaXhvT21SaUxGTTZaV0lzUkRwcFlpeEdPbXBpTEZRNmEySXNVVHBzWWl4S09tMWlMRkE2Ym1Jc2JqcHZZaXhGT25CaUxFSTZjV0lzVWpweVlpeERPbk5pTEhBNktDazlQakVzZWpwbWRXNWpkR2x2YmloaExHSXBlMkUrUGo0OU1EdGhQVDFpUGo0K01EOXpaWFJVYVcxbGIzVjBLQ2dwUFQ1WUtDa3BPa1EvY0c5emRFMWxjM05oWjJVb2UzUmhjbWRsZEZSb2NtVmhaRHBoTEdOdFpEcGNJbU5vWldOclRXRnBiR0p2ZUZ3aWZTazZLR0U5VXk1TllWdGhYU2ttSm1FdWNHOXpkRTFsYzNOaFoyVW9lMk50WkRwY0ltTm9aV05yVFdGcGJHSnZlRndpZlNsOUxGeHVTVHBtZFc1amRHbHZiaWhoTEdJc1l5eGtLWHRpUGo0K1BUQTdkbUl1YkdWdVozUm9QV003WkQxa1BqNCtNRDQrUGpNN1ptOXlLSFpoY2lCblBUQTdaenhqTzJjckt5bDJZbHRuWFQxbFlTZ3BXMlFyWno0K1BqQmRPMkU5TUQ1aFAwVmhXeTFoTFRGZE9sWmlXMkZkTzFNdWFXSTlZanRpUFdFdVlYQndiSGtvYm5Wc2JDeDJZaWs3VXk1cFlqMHdPM0psZEhWeWJpQmlmU3hMT25SaUxHODZablZ1WTNScGIyNG9ZU2w3UWlZbVV5NU5ZVnRoUGo0K01GMHVjbVZtS0NsOUxITTZablZ1WTNScGIyNG9ZU3hpTEdNcGUyRTlZaXN5TURrM01UVXlQajQrTUR3ME1UazBNekExTFNFaFlUOG9ZVDQrUGpBcEt6UXlPVFE1TmpjeU9UWXFZanBPWVU0N1l6NCtQajB3TzJFOWJtVjNJRVJoZEdVb01VVXpLbUVwTzNBb0tWdGpQajQrTWo0K1BqQmRQV0V1WjJWMFZWUkRVMlZqYjI1a2N5Z3BPM0FvS1Z0akt6UStQajR5UGo0K01GMDlZUzVuWlhSVlZFTk5hVzUxZEdWektDazdjQ2dwVzJNck9ENCtQakkrUGo0d1hUMWhMbWRsZEZWVVEwaHZkWEp6S0NrN2NDZ3BXMk1yTVRJK1BqNHlQajQrTUYwOVlTNW5aWFJWVkVORVlYUmxLQ2s3Y0NncFcyTXJNVFkrUGo0eVBqNCtNRjA5WVM1blpYUlZWRU5OYjI1MGFDZ3BPM0FvS1Z0akt6SXdQajQrTWo0K1BqQmRQV0V1WjJWMFZWUkRSblZzYkZsbFlYSW9LUzB4T1RBd08xeHVjQ2dwVzJNck1qUStQajR5UGo0K01GMDlZUzVuWlhSVlZFTkVZWGtvS1R0aFBTaGhMbWRsZEZScGJXVW9LUzFFWVhSbExsVlVReWhoTG1kbGRGVlVRMFoxYkd4WlpXRnlLQ2tzTUN3eExEQXNNQ3d3TERBcEtTODROalJGTlh3d08zQW9LVnRqS3pJNFBqNCtNajQrUGpCZFBXRjlMSFE2Wm5WdVkzUnBiMjRvWVN4aUxHTXBlMkU5WWlzeU1EazNNVFV5UGo0K01EdzBNVGswTXpBMUxTRWhZVDhvWVQ0K1BqQXBLelF5T1RRNU5qY3lPVFlxWWpwT1lVNDdZejQrUGowd08yRTlibVYzSUVSaGRHVW9NVVV6S21FcE8zQW9LVnRqUGo0K01qNCtQakJkUFdFdVoyVjBVMlZqYjI1a2N5Z3BPM0FvS1Z0akt6UStQajR5UGo0K01GMDlZUzVuWlhSTmFXNTFkR1Z6S0NrN2NDZ3BXMk1yT0Q0K1BqSStQajR3WFQxaExtZGxkRWh2ZFhKektDazdjQ2dwVzJNck1USStQajR5UGo0K01GMDlZUzVuWlhSRVlYUmxLQ2s3Y0NncFcyTXJNVFkrUGo0eVBqNCtNRjA5WVM1blpYUk5iMjUwYUNncE8zQW9LVnRqS3pJd1BqNCtNajQrUGpCZFBXRXVaMlYwUm5Wc2JGbGxZWElvS1MweE9UQXdPM0FvS1Z0akt6STBQajQrTWo0K1BqQmRQV0V1WjJWMFJHRjVLQ2s3WWowb1dTaGhMbWRsZEVaMWJHeFpaV0Z5S0NrcFAzZGlPbmhpS1Z0aExtZGxkRTF2Ym5Sb0tDbGRLMkV1WjJWMFJHRjBaU2dwTFRGOE1EdHdLQ2xiWXlzeU9ENCtQbHh1TWo0K1BqQmRQV0k3Y0NncFcyTXJNelkrUGo0eVBqNCtNRjA5TFNnMk1DcGhMbWRsZEZScGJXVjZiMjVsVDJabWMyVjBLQ2twTzJJOUtHNWxkeUJFWVhSbEtHRXVaMlYwUm5Wc2JGbGxZWElvS1N3MkxERXBLUzVuWlhSVWFXMWxlbTl1WlU5bVpuTmxkQ2dwTzNaaGNpQmtQU2h1WlhjZ1JHRjBaU2hoTG1kbGRFWjFiR3haWldGeUtDa3NNQ3d4S1NrdVoyVjBWR2x0WlhwdmJtVlBabVp6WlhRb0tUdGhQU2hpSVQxa0ppWmhMbWRsZEZScGJXVjZiMjVsVDJabWMyVjBLQ2s5UFUxaGRHZ3ViV2x1S0dRc1lpa3BmREE3Y0NncFcyTXJNekkrUGo0eVBqNCtNRjA5WVgwc2RUcG1kVzVqZEdsdmJpaGhLWHRoUGo0K1BUQTdkbUZ5SUdJOWJtVjNJRVJoZEdVb2NDZ3BXMkVyTWpBK1BqNHlQajQrTUYwck1Ua3dNQ3h3S0NsYllTc3hOajQrUGpJK1BqNHdYU3h3S0NsYllTc3hNajQrUGpJK1BqNHdYU3h3S0NsYllTczRQajQrTWo0K1BqQmRMSEFvS1Z0aEt6UStQajR5UGo0K01GMHNjQ2dwVzJFK1BqNHlQajQrTUYwc01Da3NZejF3S0NsYllTc3pNajQrUGpJK1BqNHdYU3hrUFdJdVoyVjBWR2x0WlhwdmJtVlBabVp6WlhRb0tTeG5QU2h1WlhjZ1JHRjBaU2hpTG1kbGRFWjFiR3haWldGeUtDa3NOaXd4S1NrdVoyVjBWR2x0WlhwdmJtVlBabVp6WlhRb0tTeG9QU2h1WlhjZ1JHRjBaU2hpTG1kbGRFWjFiR3haWldGeUtDa3NYRzR3TERFcEtTNW5aWFJVYVcxbGVtOXVaVTltWm5ObGRDZ3BMR3M5VFdGMGFDNXRhVzRvYUN4bktUc3dQbU0vY0NncFcyRXJNekkrUGo0eVBqNCtNRjA5VG5WdFltVnlLR2NoUFdnbUptczlQV1FwT2pBOFl5RTlLR3M5UFdRcEppWW9aejFOWVhSb0xtMWhlQ2hvTEdjcExHSXVjMlYwVkdsdFpTaGlMbWRsZEZScGJXVW9LU3MyUlRRcUtDZ3dQR00vYXpwbktTMWtLU2twTzNBb0tWdGhLekkwUGo0K01qNCtQakJkUFdJdVoyVjBSR0Y1S0NrN1l6MG9XU2hpTG1kbGRFWjFiR3haWldGeUtDa3BQM2RpT25oaUtWdGlMbWRsZEUxdmJuUm9LQ2xkSzJJdVoyVjBSR0YwWlNncExURjhNRHR3S0NsYllTc3lPRDQrUGpJK1BqNHdYVDFqTzNBb0tWdGhQajQrTWo0K1BqQmRQV0l1WjJWMFUyVmpiMjVrY3lncE8zQW9LVnRoS3pRK1BqNHlQajQrTUYwOVlpNW5aWFJOYVc1MWRHVnpLQ2s3Y0NncFcyRXJPRDQrUGpJK1BqNHdYVDFpTG1kbGRFaHZkWEp6S0NrN2NDZ3BXMkVyTVRJK1BqNHlQajQrTUYwOVlpNW5aWFJFWVhSbEtDazdjQ2dwVzJFck1UWStQajR5UGo0K01GMDlZaTVuWlhSTmIyNTBhQ2dwTzNBb0tWdGhLekl3UGo0K01qNCtQakJkUFdJdVoyVjBXV1ZoY2lncE8yRTlZaTVuWlhSVWFXMWxLQ2s3YVhOT1lVNG9ZU2svS0hBb0tWdFlZaWdwUGo0K01qNCtQakJkUFRZeExHRTlMVEVwT21FdlBURkZNenRjYm5KbGRIVnliaUJaWWlnb1VEMWhMREU4UFN0TllYUm9MbUZpY3loUUtUOHdQRkEvSzAxaGRHZ3VabXh2YjNJb1VDODBNamswT1RZM01qazJLVDQrUGpBNmZuNHJUV0YwYUM1alpXbHNLQ2hRTFNzb2ZuNVFQajQrTUNrcEx6UXlPVFE1TmpjeU9UWXBQajQrTURvd0tTa3NZVDQrUGpCOUxIRTZlV0lzY2pwNllpeDVPbVoxYm1OMGFXOXVLR0VzWWl4aktYdG1kVzVqZEdsdmJpQmtLSGNwZTNKbGRIVnliaWgzUFhjdWRHOVVhVzFsVTNSeWFXNW5LQ2t1YldGMFkyZ29MMXhjS0NoYlFTMWFZUzE2SUYwcktWeGNLU1F2S1NrL2Qxc3hYVHBjSWtkTlZGd2lmV0UrUGo0OU1EdGlQajQrUFRBN1l6NCtQajB3TzNaaGNpQm5QU2h1WlhjZ1JHRjBaU2t1WjJWMFJuVnNiRmxsWVhJb0tTeG9QVzVsZHlCRVlYUmxLR2NzTUN3eEtTeHJQVzVsZHlCRVlYUmxLR2NzTml3eEtUdG5QV2d1WjJWMFZHbHRaWHB2Ym1WUFptWnpaWFFvS1R0MllYSWdkRDFyTG1kbGRGUnBiV1Y2YjI1bFQyWm1jMlYwS0Nrc1F6MU5ZWFJvTG0xaGVDaG5MSFFwTzNJb0tWdGhQajQrTWo0K1BqQmRQVFl3S2tNN2NDZ3BXMkkrUGo0eVBqNCtNRjA5VG5WdFltVnlLR2NoUFhRcE8yRTlaQ2hvS1R0aVBXUW9heWs3WVQxQ1lpaGhLVHRpUFVKaUtHSXBPM1E4Wno4b2NpZ3BXMk0rUGo0eVBqNCtNRjA5WVN4eUtDbGJZeXMwUGo0K01qNCtQakJkUFdJcE9seHVLSElvS1Z0alBqNCtNajQrUGpCZFBXSXNjaWdwVzJNck5ENCtQakkrUGo0d1hUMWhLWDBzWXpvb0tUMCtlM0poS0Z3aVhDSXBmU3hQT21aMWJtTjBhVzl1S0dFc1lpeGpLWHRoUGo0K1BUQTdZajQrUGowd08yTStQajQ5TUR0RFlpNXNaVzVuZEdnOU1EdG1iM0lvZG1GeUlHUTdaRDF1S0NsYllpc3JQajQrTUYwN0tYdDJZWElnWnoweE1EVWhQV1E3WnlZOU1URXlJVDFrTzJNclBXY21KbU1sT0Q4ME9qQTdRMkl1Y0hWemFDZ3hNVEk5UFdRL2NpZ3BXMk0rUGo0eVBqNCtNRjA2TVRBMVBUMWtQM0FvS1Z0alBqNCtNajQrUGpCZE9tVmhLQ2xiWXo0K1BqTStQajR3WFNrN1l5czlaejg0T2pSOWNtVjBkWEp1SUVWaFcyRmRMbUZ3Y0d4NUtHNTFiR3dzUTJJcGZTeHJPaWdwUFQ1N2ZTeHBPaWdwUFQ1RVlYUmxMbTV2ZHlncExGVTZLQ2s5UG50VUt6MHhPM1JvY205M1hDSjFibmRwYm1SY0lqdDlMRUU2Wm5WdVkzUnBiMjRvS1h0eVpYUjFjbTRnTkRJNU5Ea3dNVGMyTUgwc1pUb29LVDArY0dWeVptOXliV0Z1WTJVdWRHbHRaVTl5YVdkcGJpdHdaWEptYjNKdFlXNWpaUzV1YjNjb0tTeG1PaWdwUFQ1Q1AzSmxjWFZwY21Vb1hDSnZjMXdpS1M1amNIVnpLQ2t1YkdWdVozUm9PbTVoZG1sbllYUnZjaTVvWVhKa2QyRnlaVU52Ym1OMWNuSmxibU41TEhnNlpuVnVZM1JwYjI0b1lTbDdZVDQrUGowd08zWmhjaUJpUFZ4dWJpZ3BMbXhsYm1kMGFEdHBaaWhoUEQxaWZIdzBNamswT1RBeE56WXdQR0VwY21WMGRYSnVJVEU3Wm05eUtIWmhjaUJqUFRFN05ENDlZenRqS2oweUtYdDJZWElnWkQxaUtpZ3hLeTR5TDJNcE8yUTlUV0YwYUM1dGFXNG9aQ3hoS3pFd01EWTJNekk1TmlrN2RtRnlJR2M5VFdGMGFEdGtQVTFoZEdndWJXRjRLR0VzWkNrN1lUcDdaejBvWnk1dGFXNHVZMkZzYkNobkxEUXlPVFE1TURFM05qQXNaQ3NvTmpVMU16WXRaQ1UyTlRVek5pa2xOalUxTXpZcExXVXVZblZtWm1WeUxtSjVkR1ZNWlc1bmRHZ3JOalUxTXpVcEx6WTFOVE0yTzNSeWVYdGxMbWR5YjNjb1p5azdiU2dwTzNaaGNpQm9QVEU3WW5KbFlXc2dZWDFqWVhSamFDaHJLWHQ5YUQxMmIybGtJREI5YVdZb2FDbHlaWFIxY200aE1IMXlaWFIxY200aE1YMHNUVHBIWWl4T09rdGlMRWM2VVdFc1p6cE1ZaXh0T2sxaUxIWTZUbUlzYkRwUVlpeGhPbVY4ZkhZdWQyRnpiVTFsYlc5eWVTeDNPbFZpTEdRNlpuVnVZM1JwYjI0b1lTeGlMR01zWkNsN2NtVjBkWEp1SUZWaUtHRStQajR3TEdJK1BqNHdMR00rUGo0d0xHUStQajR3S1gxOUxGbzlablZ1WTNScGIyNG9LWHRtZFc1amRHbHZiaUJoS0dNc1pDbDdXajFqTG1WNGNHOXlkSE03V2owa1lpZ3BPMU11WW1JdWNIVnphQ2hhTG5waEtUdFlZVDFhTGtGaE8zWmhMblZ1YzJocFpuUW9XaTVXS1R0Y2JuTmhQV1E3ZVdFb0tUdHlaWFIxY200Z1duMTJZWElnWWoxN1lUcGFZbjA3VFNzck8ybG1LSFl1YVc1emRHRnVkR2xoZEdWWFlYTnRLWFJ5ZVh0eVpYUjFjbTRnZGk1cGJuTjBZVzUwYVdGMFpWZGhjMjBvWWl4aEtYMWpZWFJqYUNoaktYdEtLR0JOYjJSMWJHVXVhVzV6ZEdGdWRHbGhkR1ZYWVhOdElHTmhiR3hpWVdOcklHWmhhV3hsWkNCM2FYUm9JR1Z5Y205eU9pQWtlMk45WUNrc2VDaGpLWDFFWVNoaUxHWjFibU4wYVc5dUtHTXBlMkVvWXk1cGJuTjBZVzVqWlN4akxtMXZaSFZzWlNsOUtTNWpZWFJqYUNoNEtUdHlaWFIxY201N2ZYMG9LVHQyTGw5UGNuUkpibWwwUFNoaExHSXBQVDRvZGk1ZlQzSjBTVzVwZEQxYUxsY3BLR0VzWWlrN2RpNWZUM0owUjJWMFRHRnpkRVZ5Y205eVBTaGhMR0lwUFQ0b2RpNWZUM0owUjJWMFRHRnpkRVZ5Y205eVBWb3VXQ2tvWVN4aUtUdDJMbDlQY25SRGNtVmhkR1ZUWlhOemFXOXVUM0IwYVc5dWN6MG9ZU3hpTEdNc1pDeG5MR2dzYXl4MExFTXNkeWs5UGloMkxsOVBjblJEY21WaGRHVlRaWE56YVc5dVQzQjBhVzl1Y3oxYUxsa3BLR0VzWWl4akxHUXNaeXhvTEdzc2RDeERMSGNwTzF4dWRpNWZUM0owUVhCd1pXNWtSWGhsWTNWMGFXOXVVSEp2ZG1sa1pYSTlLR0VzWWlrOVBpaDJMbDlQY25SQmNIQmxibVJGZUdWamRYUnBiMjVRY205MmFXUmxjajFhTGxvcEtHRXNZaWs3ZGk1ZlQzSjBRV1JrUm5KbFpVUnBiV1Z1YzJsdmJrOTJaWEp5YVdSbFBTaGhMR0lzWXlrOVBpaDJMbDlQY25SQlpHUkdjbVZsUkdsdFpXNXphVzl1VDNabGNuSnBaR1U5V2k1ZktTaGhMR0lzWXlrN2RpNWZUM0owUVdSa1UyVnpjMmx2YmtOdmJtWnBaMFZ1ZEhKNVBTaGhMR0lzWXlrOVBpaDJMbDlQY25SQlpHUlRaWE56YVc5dVEyOXVabWxuUlc1MGNuazlXaTRrS1NoaExHSXNZeWs3ZGk1ZlQzSjBVbVZzWldGelpWTmxjM05wYjI1UGNIUnBiMjV6UFdFOVBpaDJMbDlQY25SU1pXeGxZWE5sVTJWemMybHZiazl3ZEdsdmJuTTlXaTVoWVNrb1lTazdkaTVmVDNKMFEzSmxZWFJsVTJWemMybHZiajBvWVN4aUxHTXBQVDRvZGk1ZlQzSjBRM0psWVhSbFUyVnpjMmx2YmoxYUxtSmhLU2hoTEdJc1l5azdkaTVmVDNKMFVtVnNaV0Z6WlZObGMzTnBiMjQ5WVQwK0tIWXVYMDl5ZEZKbGJHVmhjMlZUWlhOemFXOXVQVm91WTJFcEtHRXBPM1l1WDA5eWRFZGxkRWx1Y0hWMFQzVjBjSFYwUTI5MWJuUTlLR0VzWWl4aktUMCtLSFl1WDA5eWRFZGxkRWx1Y0hWMFQzVjBjSFYwUTI5MWJuUTlXaTVrWVNrb1lTeGlMR01wTzF4dWRpNWZUM0owUjJWMFNXNXdkWFJPWVcxbFBTaGhMR0lwUFQ0b2RpNWZUM0owUjJWMFNXNXdkWFJPWVcxbFBWb3VaV0VwS0dFc1lpazdkaTVmVDNKMFIyVjBUM1YwY0hWMFRtRnRaVDBvWVN4aUtUMCtLSFl1WDA5eWRFZGxkRTkxZEhCMWRFNWhiV1U5V2k1bVlTa29ZU3hpS1R0MkxsOVBjblJHY21WbFBXRTlQaWgyTGw5UGNuUkdjbVZsUFZvdVoyRXBLR0VwTzNZdVgwOXlkRU55WldGMFpWUmxibk52Y2owb1lTeGlMR01zWkN4bkxHZ3BQVDRvZGk1ZlQzSjBRM0psWVhSbFZHVnVjMjl5UFZvdWFHRXBLR0VzWWl4akxHUXNaeXhvS1R0MkxsOVBjblJIWlhSVVpXNXpiM0pFWVhSaFBTaGhMR0lzWXl4a0xHY3BQVDRvZGk1ZlQzSjBSMlYwVkdWdWMyOXlSR0YwWVQxYUxtbGhLU2hoTEdJc1l5eGtMR2NwTzNZdVgwOXlkRkpsYkdWaGMyVlVaVzV6YjNJOVlUMCtLSFl1WDA5eWRGSmxiR1ZoYzJWVVpXNXpiM0k5V2k1cVlTa29ZU2s3ZGk1ZlQzSjBRM0psWVhSbFVuVnVUM0IwYVc5dWN6MG9ZU3hpTEdNc1pDazlQaWgyTGw5UGNuUkRjbVZoZEdWU2RXNVBjSFJwYjI1elBWb3VhMkVwS0dFc1lpeGpMR1FwTzNZdVgwOXlkRUZrWkZKMWJrTnZibVpwWjBWdWRISjVQU2hoTEdJc1l5azlQaWgyTGw5UGNuUkJaR1JTZFc1RGIyNW1hV2RGYm5SeWVUMWFMbXhoS1NoaExHSXNZeWs3WEc1MkxsOVBjblJTWld4bFlYTmxVblZ1VDNCMGFXOXVjejFoUFQ0b2RpNWZUM0owVW1Wc1pXRnpaVkoxYms5d2RHbHZibk05V2k1dFlTa29ZU2s3ZGk1ZlQzSjBRM0psWVhSbFFtbHVaR2x1WnoxaFBUNG9kaTVmVDNKMFEzSmxZWFJsUW1sdVpHbHVaejFhTG01aEtTaGhLVHQyTGw5UGNuUkNhVzVrU1c1d2RYUTlLR0VzWWl4aktUMCtLSFl1WDA5eWRFSnBibVJKYm5CMWREMWFMbTloS1NoaExHSXNZeWs3ZGk1ZlQzSjBRbWx1WkU5MWRIQjFkRDBvWVN4aUxHTXNaQ2s5UGloMkxsOVBjblJDYVc1a1QzVjBjSFYwUFZvdWNHRXBLR0VzWWl4akxHUXBPM1l1WDA5eWRFTnNaV0Z5UW05MWJtUlBkWFJ3ZFhSelBXRTlQaWgyTGw5UGNuUkRiR1ZoY2tKdmRXNWtUM1YwY0hWMGN6MWFMbkZoS1NoaEtUdDJMbDlQY25SU1pXeGxZWE5sUW1sdVpHbHVaejFoUFQ0b2RpNWZUM0owVW1Wc1pXRnpaVUpwYm1ScGJtYzlXaTV5WVNrb1lTazdkaTVmVDNKMFVuVnVWMmwwYUVKcGJtUnBibWM5S0dFc1lpeGpMR1FzWnlrOVBpaDJMbDlQY25SU2RXNVhhWFJvUW1sdVpHbHVaejFhTG5OaEtTaGhMR0lzWXl4a0xHY3BPM1l1WDA5eWRGSjFiajBvWVN4aUxHTXNaQ3huTEdnc2F5eDBLVDArS0hZdVgwOXlkRkoxYmoxYUxuUmhLU2hoTEdJc1l5eGtMR2NzYUN4ckxIUXBPMXh1ZGk1ZlQzSjBSVzVrVUhKdlptbHNhVzVuUFdFOVBpaDJMbDlQY25SRmJtUlFjbTltYVd4cGJtYzlXaTUxWVNrb1lTazdkbUZ5SUZoaVBTZ3BQVDRvV0dJOVdpNTJZU2tvS1N4WFBYWXVYM0IwYUhKbFlXUmZjMlZzWmowb0tUMCtLRmM5ZGk1ZmNIUm9jbVZoWkY5elpXeG1QVm91ZDJFcEtDa3NRV0k5ZGk1ZmJXRnNiRzlqUFdFOVBpaEJZajEyTGw5dFlXeHNiMk05V2k1NFlTa29ZU2s3ZGk1ZlpuSmxaVDFoUFQ0b2RpNWZabkpsWlQxYUxubGhLU2hoS1R0MkxsOWZaVzF6WTNKcGNIUmxibDkwYkhOZmFXNXBkRDBvS1QwK0tIWXVYMTlsYlhOamNtbHdkR1Z1WDNSc2MxOXBibWwwUFZvdWVtRXBLQ2s3ZG1GeUlGZGlQWFl1WDE5bGJYTmpjbWx3ZEdWdVgzUm9jbVZoWkY5cGJtbDBQU2hoTEdJc1l5eGtMR2NzYUNrOVBpaFhZajEyTGw5ZlpXMXpZM0pwY0hSbGJsOTBhSEpsWVdSZmFXNXBkRDFhTGtKaEtTaGhMR0lzWXl4a0xHY3NhQ2s3ZGk1ZlgyVnRjMk55YVhCMFpXNWZkR2h5WldGa1gyTnlZWE5vWldROUtDazlQaWgyTGw5ZlpXMXpZM0pwY0hSbGJsOTBhSEpsWVdSZlkzSmhjMmhsWkQxYUxrTmhLU2dwTzF4dWRtRnlJRTVoUFNoaExHSXNZeXhrS1QwK0tFNWhQVm91UkdFcEtHRXNZaXhqTEdRcExGUmhQV0U5UGloVVlUMWFMa1ZoS1NoaEtTeFpZVDEyTGw5ZlpXMXpZM0pwY0hSbGJsOTBhSEpsWVdSZlpYaHBkRDFoUFQ0b1dXRTlkaTVmWDJWdGMyTnlhWEIwWlc1ZmRHaHlaV0ZrWDJWNGFYUTlXaTVHWVNrb1lTa3NkV0k5S0NrOVBpaDFZajFhTGtkaEtTZ3BMRmxpUFdFOVBpaFpZajFhTGtoaEtTaGhLU3hXWVQwb1lTeGlLVDArS0ZaaFBWb3VTV0VwS0dFc1lpa3NTMkU5S0NrOVBpaExZVDFhTGtwaEtTZ3BMRlU5WVQwK0tGVTlXaTVMWVNrb1lTa3NUV0U5WVQwK0tFMWhQVm91VEdFcEtHRXBPMloxYm1OMGFXOXVJQ1JpS0NsN2RtRnlJR0U5V2p0aFBVOWlhbVZqZEM1aGMzTnBaMjRvZTMwc1lTazdkbUZ5SUdJOVpEMCtLQ2s5UG1Rb0tUNCtQakFzWXoxa1BUNW5QVDVrS0djcFBqNCtNRHRoTG5aaFBXSW9ZUzUyWVNrN1lTNTNZVDFpS0dFdWQyRXBPMkV1ZUdFOVl5aGhMbmhoS1R0aExtVnRjMk55YVhCMFpXNWZiV0ZwYmw5eWRXNTBhVzFsWDNSb2NtVmhaRjlwWkQxaUtHRXVaVzF6WTNKcGNIUmxibDl0WVdsdVgzSjFiblJwYldWZmRHaHlaV0ZrWDJsa0tUdGhMa3BoUFdJb1lTNUtZU2s3WVM1TVlUMWpLR0V1VEdFcE8zSmxkSFZ5YmlCaGZYWXVkMkZ6YlUxbGJXOXllVDFsTzF4dWRpNXpkR0ZqYTBGc2JHOWpQVTFoTzNZdWMzUmhZMnRUWVhabFBVdGhPM1l1YzNSaFkydFNaWE4wYjNKbFBWVTdkaTVyWldWd1VuVnVkR2x0WlVGc2FYWmxQU2dwUFQ0d1BGUTdkaTVWVkVZNFZHOVRkSEpwYm1jOVVUdDJMbk4wY21sdVoxUnZWVlJHT0Qxb1lqdDJMbXhsYm1kMGFFSjVkR1Z6VlZSR09EMW1ZanQyTGtWNGFYUlRkR0YwZFhNOVVqdDJMbEJVYUhKbFlXUTlVenQyWVhJZ1lXTTdUajFtZFc1amRHbHZiaUJpWXlncGUyRmpmSHhqWXlncE8yRmpmSHdvVGoxaVl5bDlPMloxYm1OMGFXOXVJR05qS0NsN2FXWW9JU2d3UEUwcEtXbG1LRVFwYUdFb2Rpa3NSSHg4VldFb2RtRXBMSE4wWVhKMFYyOXlhMlZ5S0hZcE8yVnNjMlY3YVdZb2RpNXdjbVZTZFc0cFptOXlLRndpWm5WdVkzUnBiMjVjSWowOWRIbHdaVzltSUhZdWNISmxVblZ1SmlZb2RpNXdjbVZTZFc0OVczWXVjSEpsVW5WdVhTazdkaTV3Y21WU2RXNHViR1Z1WjNSb095bDFZUzUxYm5Ob2FXWjBLSFl1Y0hKbFVuVnVMbk5vYVdaMEtDa3BPMVZoS0hWaEtUc3dQRTE4ZkdGamZId29ZV005SVRBc2RpNWpZV3hzWldSU2RXNDlJVEFzUzN4OEtFUjhmRlZoS0haaEtTeG9ZU2gyS1N4RWZIeFZZU2gzWVNrcEtYMTlZMk1vS1R0Y2JseHVYRzRnSUhKbGRIVnliaUJ0YjJSMWJHVkJjbWN1Y21WaFpIbGNibjFjYmlrN1hHNTlLU2dwTzF4dU8xeHVhV1lnS0hSNWNHVnZaaUJsZUhCdmNuUnpJRDA5UFNBbmIySnFaV04wSnlBbUppQjBlWEJsYjJZZ2JXOWtkV3hsSUQwOVBTQW5iMkpxWldOMEp5bGNiaUFnYlc5a2RXeGxMbVY0Y0c5eWRITWdQU0J2Y25SWFlYTnRWR2h5WldGa1pXUTdYRzVsYkhObElHbG1JQ2gwZVhCbGIyWWdaR1ZtYVc1bElEMDlQU0FuWm5WdVkzUnBiMjRuSUNZbUlHUmxabWx1WlZzbllXMWtKMTBwWEc0Z0lHUmxabWx1WlNoYlhTd2dLQ2tnUFQ0Z2IzSjBWMkZ6YlZSb2NtVmhaR1ZrS1R0Y2JpSXNJQ0pjSW5WelpTQnpkSEpwWTNSY0lqdDJZWElnVFc5a2RXeGxQWHQ5TzNaaGNpQkZUbFpKVWs5T1RVVk9WRjlKVTE5T1QwUkZQWFI1Y0dWdlppQndjbTlqWlhOelBUMWNJbTlpYW1WamRGd2lKaVowZVhCbGIyWWdjSEp2WTJWemN5NTJaWEp6YVc5dWN6MDlYQ0p2WW1wbFkzUmNJaVltZEhsd1pXOW1JSEJ5YjJObGMzTXVkbVZ5YzJsdmJuTXVibTlrWlQwOVhDSnpkSEpwYm1kY0lqdHBaaWhGVGxaSlVrOU9UVVZPVkY5SlUxOU9UMFJGS1h0MllYSWdibTlrWlZkdmNtdGxjbFJvY21WaFpITTljbVZ4ZFdseVpTaGNJbmR2Y210bGNsOTBhSEpsWVdSelhDSXBPM1poY2lCd1lYSmxiblJRYjNKMFBXNXZaR1ZYYjNKclpYSlVhSEpsWVdSekxuQmhjbVZ1ZEZCdmNuUTdjR0Z5Wlc1MFVHOXlkQzV2YmloY0ltMWxjM05oWjJWY0lpeGtZWFJoUFQ1dmJtMWxjM05oWjJVb2UyUmhkR0U2WkdGMFlYMHBLVHQyWVhJZ1puTTljbVZ4ZFdseVpTaGNJbVp6WENJcE8zWmhjaUIyYlQxeVpYRjFhWEpsS0Z3aWRtMWNJaWs3VDJKcVpXTjBMbUZ6YzJsbmJpaG5iRzlpWVd3c2UzTmxiR1k2WjJ4dlltRnNMSEpsY1hWcGNtVTZjbVZ4ZFdseVpTeE5iMlIxYkdVNlRXOWtkV3hsTEd4dlkyRjBhVzl1T250b2NtVm1PbDlmWm1sc1pXNWhiV1Y5TEZkdmNtdGxjanB1YjJSbFYyOXlhMlZ5VkdoeVpXRmtjeTVYYjNKclpYSXNhVzF3YjNKMFUyTnlhWEIwY3pwbVBUNTJiUzV5ZFc1SmJsUm9hWE5EYjI1MFpYaDBLR1p6TG5KbFlXUkdhV3hsVTNsdVl5aG1MRndpZFhSbU9Gd2lLU3g3Wm1sc1pXNWhiV1U2Wm4wcExIQnZjM1JOWlhOellXZGxPbTF6WnowK2NHRnlaVzUwVUc5eWRDNXdiM04wVFdWemMyRm5aU2h0YzJjcExIQmxjbVp2Y20xaGJtTmxPbWRzYjJKaGJDNXdaWEptYjNKdFlXNWpaWHg4ZTI1dmR6cEVZWFJsTG01dmQzMTlLWDEyWVhJZ2FXNXBkR2xoYkdsNlpXUktVejFtWVd4elpUdG1kVzVqZEdsdmJpQjBhSEpsWVdSUWNtbHVkRVZ5Y2lncGUzWmhjaUIwWlhoMFBVRnljbUY1TG5CeWIzUnZkSGx3WlM1emJHbGpaUzVqWVd4c0tHRnlaM1Z0Wlc1MGN5a3VhbTlwYmloY0lpQmNJaWs3YVdZb1JVNVdTVkpQVGsxRlRsUmZTVk5mVGs5RVJTbDdabk11ZDNKcGRHVlRlVzVqS0RJc2RHVjRkQ3RjSWx4Y2Jsd2lLVHR5WlhSMWNtNTlZMjl1YzI5c1pTNWxjbkp2Y2loMFpYaDBLWDFtZFc1amRHbHZiaUIwYUhKbFlXUkJiR1Z5ZENncGUzWmhjaUIwWlhoMFBVRnljbUY1TG5CeWIzUnZkSGx3WlM1emJHbGpaUzVqWVd4c0tHRnlaM1Z0Wlc1MGN5a3VhbTlwYmloY0lpQmNJaWs3Y0c5emRFMWxjM05oWjJVb2UyTnRaRHBjSW1Gc1pYSjBYQ0lzZEdWNGREcDBaWGgwTEhSb2NtVmhaRWxrT2sxdlpIVnNaVnRjSWw5d2RHaHlaV0ZrWDNObGJHWmNJbDBvS1gwcGZYWmhjaUJsY25JOWRHaHlaV0ZrVUhKcGJuUkZjbkk3YzJWc1ppNWhiR1Z5ZEQxMGFISmxZV1JCYkdWeWREdE5iMlIxYkdWYlhDSnBibk4wWVc1MGFXRjBaVmRoYzIxY0lsMDlLR2x1Wm04c2NtVmpaV2wyWlVsdWMzUmhibU5sS1QwK2UzWmhjaUJ0YjJSMWJHVTlUVzlrZFd4bFcxd2lkMkZ6YlUxdlpIVnNaVndpWFR0TmIyUjFiR1ZiWENKM1lYTnRUVzlrZFd4bFhDSmRQVzUxYkd3N2RtRnlJR2x1YzNSaGJtTmxQVzVsZHlCWFpXSkJjM05sYldKc2VTNUpibk4wWVc1alpTaHRiMlIxYkdVc2FXNW1ieWs3Y21WMGRYSnVJSEpsWTJWcGRtVkpibk4wWVc1alpTaHBibk4wWVc1alpTbDlPM05sYkdZdWIyNTFibWhoYm1Sc1pXUnlaV3BsWTNScGIyNDlaVDArZTNSb2NtOTNJR1V1Y21WaGMyOXVmSHhsZlR0bWRXNWpkR2x2YmlCb1lXNWtiR1ZOWlhOellXZGxLR1VwZTNSeWVYdHBaaWhsTG1SaGRHRXVZMjFrUFQwOVhDSnNiMkZrWENJcGUyeGxkQ0J0WlhOellXZGxVWFZsZFdVOVcxMDdjMlZzWmk1dmJtMWxjM05oWjJVOVpUMCtiV1Z6YzJGblpWRjFaWFZsTG5CMWMyZ29aU2s3YzJWc1ppNXpkR0Z5ZEZkdmNtdGxjajFwYm5OMFlXNWpaVDArZTAxdlpIVnNaVDFwYm5OMFlXNWpaVHR3YjNOMFRXVnpjMkZuWlNoN1hDSmpiV1JjSWpwY0lteHZZV1JsWkZ3aWZTazdabTl5S0d4bGRDQnRjMmNnYjJZZ2JXVnpjMkZuWlZGMVpYVmxLWHRvWVc1a2JHVk5aWE56WVdkbEtHMXpaeWw5YzJWc1ppNXZibTFsYzNOaFoyVTlhR0Z1Wkd4bFRXVnpjMkZuWlgwN1RXOWtkV3hsVzF3aWQyRnpiVTF2WkhWc1pWd2lYVDFsTG1SaGRHRXVkMkZ6YlUxdlpIVnNaVHRtYjNJb1kyOXVjM1FnYUdGdVpHeGxjaUJ2WmlCbExtUmhkR0V1YUdGdVpHeGxjbk1wZTAxdlpIVnNaVnRvWVc1a2JHVnlYVDBvTGk0dVlYSm5jeWs5UG50d2IzTjBUV1Z6YzJGblpTaDdZMjFrT2x3aVkyRnNiRWhoYm1Sc1pYSmNJaXhvWVc1a2JHVnlPbWhoYm1Sc1pYSXNZWEpuY3pwaGNtZHpmU2w5ZlUxdlpIVnNaVnRjSW5kaGMyMU5aVzF2Y25sY0lsMDlaUzVrWVhSaExuZGhjMjFOWlcxdmNuazdUVzlrZFd4bFcxd2lZblZtWm1WeVhDSmRQVTF2WkhWc1pWdGNJbmRoYzIxTlpXMXZjbmxjSWwwdVluVm1abVZ5TzAxdlpIVnNaVnRjSWtWT1ZrbFNUMDVOUlU1VVgwbFRYMUJVU0ZKRlFVUmNJbDA5ZEhKMVpUdHBaaWgwZVhCbGIyWWdaUzVrWVhSaExuVnliRTl5UW14dllqMDlYQ0p6ZEhKcGJtZGNJaWw3YVcxd2IzSjBVMk55YVhCMGN5aGxMbVJoZEdFdWRYSnNUM0pDYkc5aUtYMWxiSE5sZTNaaGNpQnZZbXBsWTNSVmNtdzlWVkpNTG1OeVpXRjBaVTlpYW1WamRGVlNUQ2hsTG1SaGRHRXVkWEpzVDNKQ2JHOWlLVHRwYlhCdmNuUlRZM0pwY0hSektHOWlhbVZqZEZWeWJDazdWVkpNTG5KbGRtOXJaVTlpYW1WamRGVlNUQ2h2WW1wbFkzUlZjbXdwZlc5eWRGZGhjMjFVYUhKbFlXUmxaQ2hOYjJSMWJHVXBmV1ZzYzJVZ2FXWW9aUzVrWVhSaExtTnRaRDA5UFZ3aWNuVnVYQ0lwZTAxdlpIVnNaVnRjSWw5ZlpXMXpZM0pwY0hSbGJsOTBhSEpsWVdSZmFXNXBkRndpWFNobExtUmhkR0V1Y0hSb2NtVmhaRjl3ZEhJc0x5cHBjMTl0WVdsdVBTb3ZNQ3d2S21selgzSjFiblJwYldVOUtpOHdMQzhxWTJGdVgySnNiMk5yUFNvdk1TazdUVzlrZFd4bFcxd2lYMTlsYlhOamNtbHdkR1Z1WDNSb2NtVmhaRjl0WVdsc1ltOTRYMkYzWVdsMFhDSmRLR1V1WkdGMFlTNXdkR2h5WldGa1gzQjBjaWs3VFc5a2RXeGxXMXdpWlhOMFlXSnNhWE5vVTNSaFkydFRjR0ZqWlZ3aVhTZ3BPMDF2WkhWc1pWdGNJbEJVYUhKbFlXUmNJbDB1Y21WalpXbDJaVTlpYW1WamRGUnlZVzV6Wm1WeUtHVXVaR0YwWVNrN1RXOWtkV3hsVzF3aVVGUm9jbVZoWkZ3aVhTNTBhSEpsWVdSSmJtbDBWRXhUS0NrN2FXWW9JV2x1YVhScFlXeHBlbVZrU2xNcGUybHVhWFJwWVd4cGVtVmtTbE05ZEhKMVpYMTBjbmw3VFc5a2RXeGxXMXdpYVc1MmIydGxSVzUwY25sUWIybHVkRndpWFNobExtUmhkR0V1YzNSaGNuUmZjbTkxZEdsdVpTeGxMbVJoZEdFdVlYSm5LWDFqWVhSamFDaGxlQ2w3YVdZb1pYZ2hQVndpZFc1M2FXNWtYQ0lwZTNSb2NtOTNJR1Y0ZlgxOVpXeHpaU0JwWmlobExtUmhkR0V1WTIxa1BUMDlYQ0pqWVc1alpXeGNJaWw3YVdZb1RXOWtkV3hsVzF3aVgzQjBhSEpsWVdSZmMyVnNabHdpWFNncEtYdE5iMlIxYkdWYlhDSmZYMlZ0YzJOeWFYQjBaVzVmZEdoeVpXRmtYMlY0YVhSY0lsMG9MVEVwZlgxbGJITmxJR2xtS0dVdVpHRjBZUzUwWVhKblpYUTlQVDFjSW5ObGRHbHRiV1ZrYVdGMFpWd2lLWHQ5Wld4elpTQnBaaWhsTG1SaGRHRXVZMjFrUFQwOVhDSmphR1ZqYTAxaGFXeGliM2hjSWlsN2FXWW9hVzVwZEdsaGJHbDZaV1JLVXlsN1RXOWtkV3hsVzF3aVkyaGxZMnROWVdsc1ltOTRYQ0pkS0NsOWZXVnNjMlVnYVdZb1pTNWtZWFJoTG1OdFpDbDdaWEp5S0dCM2IzSnJaWEl1YW5NZ2NtVmpaV2wyWldRZ2RXNXJibTkzYmlCamIyMXRZVzVrSUNSN1pTNWtZWFJoTG1OdFpIMWdLVHRsY25Jb1pTNWtZWFJoS1gxOVkyRjBZMmdvWlhncGUwMXZaSFZzWlZ0Y0lsOWZaVzF6WTNKcGNIUmxibDkwYUhKbFlXUmZZM0poYzJobFpGd2lYVDh1S0NrN2RHaHliM2NnWlhoOWZYTmxiR1l1YjI1dFpYTnpZV2RsUFdoaGJtUnNaVTFsYzNOaFoyVTdYRzRpTENBaVpYaHdiM0owSUdOdmJuTjBJR3B2YVc0Z1BTQjFibVJsWm1sdVpXUTdJaXdnSWk4dklFTnZjSGx5YVdkb2RDQW9ZeWtnVFdsamNtOXpiMlowSUVOdmNuQnZjbUYwYVc5dUxpQkJiR3dnY21sbmFIUnpJSEpsYzJWeWRtVmtMbHh1THk4Z1RHbGpaVzV6WldRZ2RXNWtaWElnZEdobElFMUpWQ0JNYVdObGJuTmxMbHh1WEc1cGJYQnZjblFnS2lCaGN5QndZWFJvSUdaeWIyMGdKMjV2WkdVNmNHRjBhQ2M3WEc1cGJYQnZjblFnZTBWdWRuMGdabkp2YlNBbmIyNXVlSEoxYm5ScGJXVXRZMjl0Ylc5dUp6dGNibHh1YVcxd2IzSjBJSHRQY25SWFlYTnRUVzlrZFd4bGZTQm1jbTl0SUNjdUwySnBibVJwYm1jdmIzSjBMWGRoYzIwbk8xeHVhVzF3YjNKMElIdFBjblJYWVhOdFZHaHlaV0ZrWldSTmIyUjFiR1Y5SUdaeWIyMGdKeTR2WW1sdVpHbHVaeTl2Y25RdGQyRnpiUzEwYUhKbFlXUmxaQ2M3WEc1Y2JpOHFJR1Z6YkdsdWRDMWthWE5oWW14bElFQjBlWEJsYzJOeWFYQjBMV1Z6YkdsdWRDOXVieTF5WlhGMWFYSmxMV2x0Y0c5eWRITWdLaTljYm14bGRDQnZjblJYWVhOdFJtRmpkRzl5ZVRvZ1JXMXpZM0pwY0hSbGJrMXZaSFZzWlVaaFkzUnZjbms4VDNKMFYyRnpiVTF2WkhWc1pUNDdYRzVjYm1sbUlDZ2hRbFZKVEVSZlJFVkdVeTVFU1ZOQlFreEZYMVJTUVVsT1NVNUhLU0I3WEc0Z0lHOXlkRmRoYzIxR1lXTjBiM0o1SUQwZ2NtVnhkV2x5WlNnbkxpOWlhVzVrYVc1bkwyOXlkQzEwY21GcGJtbHVaeTEzWVhOdExYTnBiV1F1YW5NbktUdGNibjBnWld4elpTQjdYRzRnSUc5eWRGZGhjMjFHWVdOMGIzSjVJRDFjYmlBZ0lDQWdJRUpWU1V4RVgwUkZSbE11UkVsVFFVSk1SVjlYUlVKSFVGVWdQeUJ5WlhGMWFYSmxLQ2N1TDJKcGJtUnBibWN2YjNKMExYZGhjMjB1YW5NbktTQTZJSEpsY1hWcGNtVW9KeTR2WW1sdVpHbHVaeTl2Y25RdGQyRnpiUzF6YVcxa0xtcHpaWEF1YW5NbktUdGNibjFjYmx4dVkyOXVjM1FnYjNKMFYyRnpiVVpoWTNSdmNubFVhSEpsWVdSbFpEb2dSVzF6WTNKcGNIUmxiazF2WkhWc1pVWmhZM1J2Y25rOFQzSjBWMkZ6YlUxdlpIVnNaVDRnUFNBaFFsVkpURVJmUkVWR1V5NUVTVk5CUWt4RlgxZEJVMDFmVkVoU1JVRkVJRDljYmlBZ0lDQW9RbFZKVEVSZlJFVkdVeTVFU1ZOQlFreEZYMWRGUWtkUVZTQS9JSEpsY1hWcGNtVW9KeTR2WW1sdVpHbHVaeTl2Y25RdGQyRnpiUzEwYUhKbFlXUmxaQzVxY3ljcElEcGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxjWFZwY21Vb0p5NHZZbWx1WkdsdVp5OXZjblF0ZDJGemJTMXphVzFrTFhSb2NtVmhaR1ZrTG1welpYQXVhbk1uS1NrZ09seHVJQ0FnSUc5eWRGZGhjMjFHWVdOMGIzSjVPMXh1THlvZ1pYTnNhVzUwTFdWdVlXSnNaU0JBZEhsd1pYTmpjbWx3ZEMxbGMyeHBiblF2Ym04dGNtVnhkV2x5WlMxcGJYQnZjblJ6SUNvdlhHNWNibXhsZENCM1lYTnRPaUJQY25SWFlYTnRUVzlrZFd4bGZIVnVaR1ZtYVc1bFpEdGNibXhsZENCcGJtbDBhV0ZzYVhwbFpDQTlJR1poYkhObE8xeHViR1YwSUdsdWFYUnBZV3hwZW1sdVp5QTlJR1poYkhObE8xeHViR1YwSUdGaWIzSjBaV1FnUFNCbVlXeHpaVHRjYmx4dVkyOXVjM1FnYVhOTmRXeDBhVlJvY21WaFpGTjFjSEJ2Y25SbFpDQTlJQ2h1ZFcxVWFISmxZV1J6T2lCdWRXMWlaWElwT2lCaWIyOXNaV0Z1SUQwK0lIdGNiaUFnTHk4Z1YyVmlRWE56WlcxaWJIa2dkR2h5WldGa2N5QmhjbVVnYzJWMElIUnZJREVnS0hOcGJtZHNaU0IwYUhKbFlXUXBMbHh1SUNCcFppQW9iblZ0VkdoeVpXRmtjeUE5UFQwZ01Ta2dlMXh1SUNBZ0lISmxkSFZ5YmlCbVlXeHpaVHRjYmlBZ2ZWeHVYRzRnSUM4dklFbG1JQ2RUYUdGeVpXUkJjbkpoZVVKMVptWmxjaWNnYVhNZ2JtOTBJR0YyWVdsc1lXSnNaU3dnVjJWaVFYTnpaVzFpYkhrZ2RHaHlaV0ZrY3lCM2FXeHNJRzV2ZENCM2IzSnJMbHh1SUNCcFppQW9kSGx3Wlc5bUlGTm9ZWEpsWkVGeWNtRjVRblZtWm1WeUlEMDlQU0FuZFc1a1pXWnBibVZrSnlrZ2UxeHVJQ0FnSUdsbUlDaDBlWEJsYjJZZ2MyVnNaaUFoUFQwZ0ozVnVaR1ZtYVc1bFpDY2dKaVlnSVhObGJHWXVZM0p2YzNOUGNtbG5hVzVKYzI5c1lYUmxaQ2tnZTF4dUlDQWdJQ0FnTHk4Z1pYTnNhVzUwTFdScGMyRmliR1V0Ym1WNGRDMXNhVzVsSUc1dkxXTnZibk52YkdWY2JpQWdJQ0FnSUdOdmJuTnZiR1V1ZDJGeWJpaGNiaUFnSUNBZ0lDQWdJQ0FuWlc1MkxuZGhjMjB1Ym5WdFZHaHlaV0ZrY3lCcGN5QnpaWFFnZEc4Z0p5QXJJRzUxYlZSb2NtVmhaSE1nSzF4dUlDQWdJQ0FnSUNBZ0lDY3NJR0oxZENCMGFHbHpJSGRwYkd3Z2JtOTBJSGR2Y21zZ2RXNXNaWE56SUhsdmRTQmxibUZpYkdVZ1kzSnZjM05QY21sbmFXNUpjMjlzWVhSbFpDQnRiMlJsTGlBbklDdGNiaUFnSUNBZ0lDQWdJQ0FuVTJWbElHaDBkSEJ6T2k4dmQyVmlMbVJsZGk5amNtOXpjeTF2Y21sbmFXNHRhWE52YkdGMGFXOXVMV2QxYVdSbEx5Qm1iM0lnYlc5eVpTQnBibVp2TGljcE8xeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdabUZzYzJVN1hHNGdJSDFjYmx4dUlDQXZMeUJ2Ym01NGNuVnVkR2x0WlMxM1pXSWdaRzlsY3lCdWIzUWdjM1Z3Y0c5eWRDQnRkV3gwYVMxMGFISmxZV1J6SUdsdUlFNXZaR1V1YW5NdVhHNGdJR2xtSUNoMGVYQmxiMllnY0hKdlkyVnpjeUFoUFQwZ0ozVnVaR1ZtYVc1bFpDY2dKaVlnY0hKdlkyVnpjeTUyWlhKemFXOXVjeUFtSmlCd2NtOWpaWE56TG5abGNuTnBiMjV6TG01dlpHVXBJSHRjYmlBZ0lDQXZMeUJsYzJ4cGJuUXRaR2x6WVdKc1pTMXVaWGgwTFd4cGJtVWdibTh0WTI5dWMyOXNaVnh1SUNBZ0lHTnZibk52YkdVdWQyRnliaWhjYmlBZ0lDQWdJQ0FnSjJWdWRpNTNZWE50TG01MWJWUm9jbVZoWkhNZ2FYTWdjMlYwSUhSdklDY2dLeUJ1ZFcxVWFISmxZV1J6SUN0Y2JpQWdJQ0FnSUNBZ0p5d2dhRzkzWlhabGNpd2dZM1Z5Y21WdWRHeDVJRzl1Ym5oeWRXNTBhVzFsTFhkbFlpQmtiMlZ6SUc1dmRDQnpkWEJ3YjNKMElHMTFiSFJwTFhSb2NtVmhaSE1nYVc0Z1RtOWtaUzVxY3k0Z0p5QXJYRzRnSUNBZ0lDQWdJQ2RRYkdWaGMyVWdZMjl1YzJsa1pYSWdkWE5wYm1jZ2IyNXVlSEoxYm5ScGJXVXRibTlrWlNCbWIzSWdjR1Z5Wm05eWJXRnVZMlVnWTNKcGRHbGpZV3dnYzJObGJtRnlhVzl6TGljcE8xeHVJQ0I5WEc1Y2JpQWdkSEo1SUh0Y2JpQWdJQ0F2THlCVVpYTjBJR1p2Y2lCMGNtRnVjMlpsY21GaWFXeHBkSGtnYjJZZ1UwRkNjeUFvWm05eUlHSnliM2R6WlhKekxpQnVaV1ZrWldRZ1ptOXlJRVpwY21WbWIzZ3BYRzRnSUNBZ0x5OGdhSFIwY0hNNkx5OW5jbTkxY0hNdVoyOXZaMnhsTG1OdmJTOW1iM0oxYlM4aklXMXpaeTl0YjNwcGJHeGhMbVJsZGk1d2JHRjBabTl5YlM5SlNHdENXbXhJUlZSd1FTOWtkM05OVG1Ob1YwVlJRVXBjYmlBZ0lDQnBaaUFvZEhsd1pXOW1JRTFsYzNOaFoyVkRhR0Z1Ym1Wc0lDRTlQU0FuZFc1a1pXWnBibVZrSnlrZ2UxeHVJQ0FnSUNBZ2JtVjNJRTFsYzNOaFoyVkRhR0Z1Ym1Wc0tDa3VjRzl5ZERFdWNHOXpkRTFsYzNOaFoyVW9ibVYzSUZOb1lYSmxaRUZ5Y21GNVFuVm1abVZ5S0RFcEtUdGNiaUFnSUNCOVhHNWNiaUFnSUNBdkx5QlVaWE4wSUdadmNpQlhaV0pCYzNObGJXSnNlU0IwYUhKbFlXUnpJR05oY0dGaWFXeHBkSGtnS0dadmNpQmliM1JvSUdKeWIzZHpaWEp6SUdGdVpDQk9iMlJsTG1wektWeHVJQ0FnSUM4dklGUm9hWE1nZEhsd1pXUWdZWEp5WVhrZ2FYTWdZU0JYWldKQmMzTmxiV0pzZVNCd2NtOW5jbUZ0SUdOdmJuUmhhVzVwYm1jZ2RHaHlaV0ZrWldRZ2FXNXpkSEoxWTNScGIyNXpMbHh1SUNBZ0lISmxkSFZ5YmlCWFpXSkJjM05sYldKc2VTNTJZV3hwWkdGMFpTaHVaWGNnVldsdWREaEJjbkpoZVNoYlhHNGdJQ0FnSUNBd0xDQTVOeXdnTVRFMUxDQXhNRGtzSURFc0lEQXNJQ0F3TENBZ01Dd2dNU3dnTkN3Z01Td2dJRGsyTENBd0xDQWdJREFzSUNBekxDQXlMQ0F4TENBZ01Dd2dOU3hjYmlBZ0lDQWdJRFFzSURFc0lDQXpMQ0FnSURFc0lDQWdNU3dnTVRBc0lERXhMQ0F4TENBNUxDQXdMQ0EyTlN3Z01Dd2dJREkxTkN3Z01UWXNJRElzSURBc0lESTJMQ0F4TVZ4dUlDQWdJRjBwS1R0Y2JpQWdmU0JqWVhSamFDQW9aU2tnZTF4dUlDQWdJSEpsZEhWeWJpQm1ZV3h6WlR0Y2JpQWdmVnh1ZlR0Y2JseHVZMjl1YzNRZ2FYTlRhVzFrVTNWd2NHOXlkR1ZrSUQwZ0tDazZJR0p2YjJ4bFlXNGdQVDRnZTF4dUlDQjBjbmtnZTF4dUlDQWdJQzh2SUZSbGMzUWdabTl5SUZkbFlrRnpjMlZ0WW14NUlGTkpUVVFnWTJGd1lXSnBiR2wwZVNBb1ptOXlJR0p2ZEdnZ1luSnZkM05sY25NZ1lXNWtJRTV2WkdVdWFuTXBYRzRnSUNBZ0x5OGdWR2hwY3lCMGVYQmxaQ0JoY25KaGVTQnBjeUJoSUZkbFlrRnpjMlZ0WW14NUlIQnliMmR5WVcwZ1kyOXVkR0ZwYm1sdVp5QlRTVTFFSUdsdWMzUnlkV04wYVc5dWN5NWNibHh1SUNBZ0lDOHZJRlJvWlNCaWFXNWhjbmtnWkdGMFlTQnBjeUJuWlc1bGNtRjBaV1FnWm5KdmJTQjBhR1VnWm05c2JHOTNhVzVuSUdOdlpHVWdZbmtnZDJGME1uZGhjMjA2WEc0Z0lDQWdMeTljYmlBZ0lDQXZMeUFvYlc5a2RXeGxYRzRnSUNBZ0x5OGdJQ0FvZEhsd1pTQWtkREFnS0daMWJtTXBLVnh1SUNBZ0lDOHZJQ0FnS0daMWJtTWdKR1l3SUNoMGVYQmxJQ1IwTUNsY2JpQWdJQ0F2THlBZ0lDQWdLR1J5YjNCY2JpQWdJQ0F2THlBZ0lDQWdJQ0FvYVRNeWVEUXVaRzkwWDJreE5uZzRYM05jYmlBZ0lDQXZMeUFnSUNBZ0lDQWdJQ2hwT0hneE5pNXpjR3hoZEZ4dUlDQWdJQzh2SUNBZ0lDQWdJQ0FnSUNBb2FUTXlMbU52Ym5OMElEQXBLVnh1SUNBZ0lDOHZJQ0FnSUNBZ0lDQWdLSFl4TWpndVkyOXVjM1FnYVRNeWVEUWdNSGd3TURBd01EQXdNQ0F3ZURBd01EQXdNREF3SURCNE1EQXdNREF3TURBZ01IZ3dNREF3TURBd01Da3BLU2twWEc1Y2JpQWdJQ0J5WlhSMWNtNGdWMlZpUVhOelpXMWliSGt1ZG1Gc2FXUmhkR1VvYm1WM0lGVnBiblE0UVhKeVlYa29XMXh1SUNBZ0lDQWdNQ3dnSUNBNU55d2dNVEUxTENBeE1Ea3NJREVzSURBc0lEQXNJREFzSURFc0lEUXNJREVzSURrMkxDQXdMQ0F3TENBekxDQXlMQ0F4TENBd0xDQXhNQ3dnTXpBc0lERXNJQ0FnTWpnc0lDQXdMQ0EyTlN3Z01DeGNiaUFnSUNBZ0lESTFNeXdnTVRVc0lESTFNeXdnTVRJc0lDQXdMQ0F3TENBd0xDQXdMQ0F3TENBd0xDQXdMQ0F3TENBZ01Dd2dNQ3dnTUN3Z01Dd2dNQ3dnTUN3Z01Dd2dJREFzSUNBeU5UTXNJREU0Tml3Z01Td2dNallzSURFeFhHNGdJQ0FnWFNrcE8xeHVJQ0I5SUdOaGRHTm9JQ2hsS1NCN1hHNGdJQ0FnY21WMGRYSnVJR1poYkhObE8xeHVJQ0I5WEc1OU8xeHVYRzVqYjI1emRDQm5aWFJYWVhOdFJtbHNaVTVoYldVZ1BTQW9kWE5sVTJsdFpEb2dZbTl2YkdWaGJpd2dkWE5sVkdoeVpXRmtjem9nWW05dmJHVmhiaWtnUFQ0Z2UxeHVJQ0JwWmlBb2RYTmxVMmx0WkNrZ2UxeHVJQ0FnSUdsbUlDZ2hRbFZKVEVSZlJFVkdVeTVFU1ZOQlFreEZYMVJTUVVsT1NVNUhLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdKMjl5ZEMxMGNtRnBibWx1WnkxM1lYTnRMWE5wYldRdWQyRnpiU2M3WEc0Z0lDQWdmVnh1SUNBZ0lISmxkSFZ5YmlCMWMyVlVhSEpsWVdSeklEOGdKMjl5ZEMxM1lYTnRMWE5wYldRdGRHaHlaV0ZrWldRdWQyRnpiU2NnT2lBbmIzSjBMWGRoYzIwdGMybHRaQzUzWVhOdEp6dGNiaUFnZlNCbGJITmxJSHRjYmlBZ0lDQnlaWFIxY200Z2RYTmxWR2h5WldGa2N5QS9JQ2R2Y25RdGQyRnpiUzEwYUhKbFlXUmxaQzUzWVhOdEp5QTZJQ2R2Y25RdGQyRnpiUzUzWVhOdEp6dGNiaUFnZlZ4dWZUdGNibHh1Wlhod2IzSjBJR052Ym5OMElHbHVhWFJwWVd4cGVtVlhaV0pCYzNObGJXSnNlU0E5SUdGemVXNWpLR1pzWVdkek9pQkZibll1VjJWaVFYTnpaVzFpYkhsR2JHRm5jeWs2SUZCeWIyMXBjMlU4ZG05cFpENGdQVDRnZTF4dUlDQnBaaUFvYVc1cGRHbGhiR2w2WldRcElIdGNiaUFnSUNCeVpYUjFjbTRnVUhKdmJXbHpaUzV5WlhOdmJIWmxLQ2s3WEc0Z0lIMWNiaUFnYVdZZ0tHbHVhWFJwWVd4cGVtbHVaeWtnZTF4dUlDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpZ25iWFZzZEdsd2JHVWdZMkZzYkhNZ2RHOGdYRnduYVc1cGRHbGhiR2w2WlZkbFlrRnpjMlZ0WW14NUtDbGNYQ2NnWkdWMFpXTjBaV1F1SnlrN1hHNGdJSDFjYmlBZ2FXWWdLR0ZpYjNKMFpXUXBJSHRjYmlBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb0ozQnlaWFpwYjNWeklHTmhiR3dnZEc4Z1hGd25hVzVwZEdsaGJHbDZaVmRsWWtGemMyVnRZbXg1S0NsY1hDY2dabUZwYkdWa0xpY3BPMXh1SUNCOVhHNWNiaUFnYVc1cGRHbGhiR2w2YVc1bklEMGdkSEoxWlR0Y2JseHVJQ0F2THlCM1lYTnRJR1pzWVdkeklHRnlaU0JoYkhKbFlXUjVJR2x1YVhScFlXeHBlbVZrWEc0Z0lHTnZibk4wSUhScGJXVnZkWFFnUFNCbWJHRm5jeTVwYm1sMFZHbHRaVzkxZENFN1hHNGdJR052Ym5OMElHNTFiVlJvY21WaFpITWdQU0JtYkdGbmN5NXVkVzFVYUhKbFlXUnpJVHRjYmlBZ1kyOXVjM1FnYzJsdFpDQTlJR1pzWVdkekxuTnBiV1FoTzF4dVhHNGdJR052Ym5OMElIVnpaVlJvY21WaFpITWdQU0JwYzAxMWJIUnBWR2h5WldGa1UzVndjRzl5ZEdWa0tHNTFiVlJvY21WaFpITXBPMXh1SUNCamIyNXpkQ0IxYzJWVGFXMWtJRDBnYzJsdFpDQW1KaUJwYzFOcGJXUlRkWEJ3YjNKMFpXUW9LVHRjYmx4dUlDQmpiMjV6ZENCM1lYTnRVR0YwYUhNZ1BTQm1iR0ZuY3k1M1lYTnRVR0YwYUhNN1hHNGdJR052Ym5OMElIZGhjMjFRY21WbWFYaFBkbVZ5Y21sa1pTQTlJSFI1Y0dWdlppQjNZWE50VUdGMGFITWdQVDA5SUNkemRISnBibWNuSUQ4Z2QyRnpiVkJoZEdoeklEb2dkVzVrWldacGJtVmtPMXh1SUNCamIyNXpkQ0IzWVhOdFJtbHNaVTVoYldVZ1BTQm5aWFJYWVhOdFJtbHNaVTVoYldVb2RYTmxVMmx0WkN3Z2RYTmxWR2h5WldGa2N5azdYRzRnSUdOdmJuTjBJSGRoYzIxUVlYUm9UM1psY25KcFpHVWdQU0IwZVhCbGIyWWdkMkZ6YlZCaGRHaHpJRDA5UFNBbmIySnFaV04wSnlBL0lIZGhjMjFRWVhSb2MxdDNZWE50Um1sc1pVNWhiV1ZkSURvZ2RXNWtaV1pwYm1Wa08xeHVYRzRnSUd4bGRDQnBjMVJwYldWdmRYUWdQU0JtWVd4elpUdGNibHh1SUNCamIyNXpkQ0IwWVhOcmN6b2dRWEp5WVhrOFVISnZiV2x6WlR4MmIybGtQajRnUFNCYlhUdGNibHh1SUNBdkx5QndjbTl0YVhObElHWnZjaUIwYVcxbGIzVjBYRzRnSUdsbUlDaDBhVzFsYjNWMElENGdNQ2tnZTF4dUlDQWdJSFJoYzJ0ekxuQjFjMmdvYm1WM0lGQnliMjFwYzJVb0tISmxjMjlzZG1VcElEMCtJSHRjYmlBZ0lDQWdJSE5sZEZScGJXVnZkWFFvS0NrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0JwYzFScGJXVnZkWFFnUFNCMGNuVmxPMXh1SUNBZ0lDQWdJQ0J5WlhOdmJIWmxLQ2s3WEc0Z0lDQWdJQ0I5TENCMGFXMWxiM1YwS1R0Y2JpQWdJQ0I5S1NrN1hHNGdJSDFjYmx4dUlDQXZMeUJ3Y205dGFYTmxJR1p2Y2lCdGIyUjFiR1VnYVc1cGRHbGhiR2w2WVhScGIyNWNiaUFnZEdGemEzTXVjSFZ6YUNodVpYY2dVSEp2YldselpTZ29jbVZ6YjJ4MlpTd2djbVZxWldOMEtTQTlQaUI3WEc0Z0lDQWdZMjl1YzNRZ1ptRmpkRzl5ZVNBOUlIVnpaVlJvY21WaFpITWdQeUJ2Y25SWFlYTnRSbUZqZEc5eWVWUm9jbVZoWkdWa0lEb2diM0owVjJGemJVWmhZM1J2Y25rN1hHNGdJQ0FnWTI5dWMzUWdZMjl1Wm1sbk9pQlFZWEowYVdGc1BFOXlkRmRoYzIxTmIyUjFiR1UrSUQwZ2UxeHVJQ0FnSUNBZ2JHOWpZWFJsUm1sc1pUb2dLR1pwYkdWT1lXMWxPaUJ6ZEhKcGJtY3NJSE5qY21sd2RFUnBjbVZqZEc5eWVUb2djM1J5YVc1bktTQTlQaUI3WEc0Z0lDQWdJQ0FnSUdsbUlDZ2hRbFZKVEVSZlJFVkdVeTVFU1ZOQlFreEZYMWRCVTAxZlZFaFNSVUZFSUNZbUlIVnpaVlJvY21WaFpITWdKaVlnWm1sc1pVNWhiV1V1Wlc1a2MxZHBkR2dvSnk1M2IzSnJaWEl1YW5NbktTQW1KbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RIbHdaVzltSUVKc2IySWdJVDA5SUNkMWJtUmxabWx1WldRbktTQjdYRzRnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRlZTVEM1amNtVmhkR1ZQWW1wbFkzUlZVa3dvYm1WM0lFSnNiMklvWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJRnRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCVWFHbHpJSEpsY1hWcGNtVW9LU0JtZFc1amRHbHZiaUJwY3lCb1lXNWtiR1ZrSUdKNUlHVnpZblZwYkdRZ2NHeDFaMmx1SUhSdklHeHZZV1FnWm1sc1pTQmpiMjUwWlc1MElHRnpJSE4wY21sdVp5NWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJsYzJ4cGJuUXRaR2x6WVdKc1pTMXVaWGgwTFd4cGJtVWdRSFI1Y0dWelkzSnBjSFF0WlhOc2FXNTBMMjV2TFhKbGNYVnBjbVV0YVcxd2IzSjBjMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsY1hWcGNtVW9KeTR2WW1sdVpHbHVaeTl2Y25RdGQyRnpiUzEwYUhKbFlXUmxaQzUzYjNKclpYSXVhbk1uS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JkTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0I3ZEhsd1pUb2dKM1JsZUhRdmFtRjJZWE5qY21sd2RDZDlLU2s3WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQnBaaUFvWm1sc1pVNWhiV1V1Wlc1a2MxZHBkR2dvSnk1M1lYTnRKeWtwSUh0Y2JpQWdJQ0FnSUNBZ0lDQnBaaUFvZDJGemJWQmhkR2hQZG1WeWNtbGtaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIZGhjMjFRWVhSb1QzWmxjbkpwWkdVN1hHNGdJQ0FnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUNBZ1kyOXVjM1FnY0hKbFptbDRJRDBnZDJGemJWQnlaV1pwZUU5MlpYSnlhV1JsSUQ4L0lITmpjbWx3ZEVScGNtVmpkRzl5ZVR0Y2JseHVJQ0FnSUNBZ0lDQWdJR2xtSUNnaFFsVkpURVJmUkVWR1V5NUVTVk5CUWt4RlgxZEZRa2RRVlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIZGhjMjFHYVd4bFRtRnRaU0E5UFQwZ0oyOXlkQzEzWVhOdExYTnBiV1F1ZDJGemJTY3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIQnlaV1pwZUNBcklDZHZjblF0ZDJGemJTMXphVzFrTG1welpYQXVkMkZ6YlNjN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0hkaGMyMUdhV3hsVG1GdFpTQTlQVDBnSjI5eWRDMTNZWE50TFhOcGJXUXRkR2h5WldGa1pXUXVkMkZ6YlNjcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhCeVpXWnBlQ0FySUNkdmNuUXRkMkZ6YlMxemFXMWtMWFJvY21WaFpHVmtMbXB6WlhBdWQyRnpiU2M3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIQnlaV1pwZUNBcklIZGhjMjFHYVd4bFRtRnRaVHRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCelkzSnBjSFJFYVhKbFkzUnZjbmtnS3lCbWFXeGxUbUZ0WlR0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5TzF4dVhHNGdJQ0FnYVdZZ0tDRkNWVWxNUkY5RVJVWlRMa1JKVTBGQ1RFVmZWMEZUVFY5VVNGSkZRVVFnSmlZZ2RYTmxWR2h5WldGa2N5a2dlMXh1SUNBZ0lDQWdZMjl1Wm1sbkxtNTFiVlJvY21WaFpITWdQU0J1ZFcxVWFISmxZV1J6TzF4dUlDQWdJQ0FnYVdZZ0tIUjVjR1Z2WmlCQ2JHOWlJRDA5UFNBbmRXNWtaV1pwYm1Wa0p5a2dlMXh1SUNBZ0lDQWdJQ0JqYjI1bWFXY3ViV0ZwYmxOamNtbHdkRlZ5YkU5eVFteHZZaUE5SUhCaGRHZ3VhbTlwYmloZlgyUnBjbTVoYldVc0lDZHZjblF0ZDJGemJTMTBhSEpsWVdSbFpDNXFjeWNwTzF4dUlDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdjMk55YVhCMFUyOTFjbU5sUTI5a1pTQTlJR0IyWVhJZ2IzSjBWMkZ6YlZSb2NtVmhaR1ZrUFNSN1ptRmpkRzl5ZVM1MGIxTjBjbWx1WnlncGZUdGdPMXh1SUNBZ0lDQWdJQ0JqYjI1bWFXY3ViV0ZwYmxOamNtbHdkRlZ5YkU5eVFteHZZaUE5SUc1bGR5QkNiRzlpS0Z0elkzSnBjSFJUYjNWeVkyVkRiMlJsWFN3Z2UzUjVjR1U2SUNkMFpYaDBMMnBoZG1GelkzSnBjSFFuZlNrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dVhHNGdJQ0FnWm1GamRHOXllU2hqYjI1bWFXY3BMblJvWlc0b1hHNGdJQ0FnSUNBZ0lDOHZJSGRoYzIwZ2JXOWtkV3hsSUdsdWFYUnBZV3hwZW1Wa0lITjFZMk5sYzNObWRXeHNlVnh1SUNBZ0lDQWdJQ0J0YjJSMWJHVWdQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lHbHVhWFJwWVd4cGVtbHVaeUE5SUdaaGJITmxPMXh1SUNBZ0lDQWdJQ0FnSUdsdWFYUnBZV3hwZW1Wa0lEMGdkSEoxWlR0Y2JpQWdJQ0FnSUNBZ0lDQjNZWE50SUQwZ2JXOWtkV3hsTzF4dUlDQWdJQ0FnSUNBZ0lISmxjMjlzZG1Vb0tUdGNiaUFnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnTHk4Z2QyRnpiU0J0YjJSMWJHVWdabUZwYkdWa0lIUnZJR2x1YVhScFlXeHBlbVZjYmlBZ0lDQWdJQ0FnS0hkb1lYUXBJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQnBibWwwYVdGc2FYcHBibWNnUFNCbVlXeHpaVHRjYmlBZ0lDQWdJQ0FnSUNCaFltOXlkR1ZrSUQwZ2RISjFaVHRjYmlBZ0lDQWdJQ0FnSUNCeVpXcGxZM1FvZDJoaGRDazdYRzRnSUNBZ0lDQWdJSDBwTzF4dUlDQjlLU2s3WEc1Y2JpQWdZWGRoYVhRZ1VISnZiV2x6WlM1eVlXTmxLSFJoYzJ0ektUdGNibHh1SUNCcFppQW9hWE5VYVcxbGIzVjBLU0I3WEc0Z0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtHQlhaV0pCYzNObGJXSnNlU0JpWVdOclpXNWtJR2x1YVhScFlXeHBlbWx1WnlCbVlXbHNaV1FnWkhWbElIUnZJSFJwYldWdmRYUTZJQ1I3ZEdsdFpXOTFkSDF0YzJBcE8xeHVJQ0I5WEc1OU8xeHVYRzVsZUhCdmNuUWdZMjl1YzNRZ1oyVjBTVzV6ZEdGdVkyVWdQU0FvS1RvZ1QzSjBWMkZ6YlUxdlpIVnNaU0E5UGlCN1hHNGdJR2xtSUNocGJtbDBhV0ZzYVhwbFpDQW1KaUIzWVhOdEtTQjdYRzRnSUNBZ2NtVjBkWEp1SUhkaGMyMDdYRzRnSUgxY2JseHVJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9KMWRsWWtGemMyVnRZbXg1SUdseklHNXZkQ0JwYm1sMGFXRnNhWHBsWkNCNVpYUXVKeWs3WEc1OU8xeHVYRzVsZUhCdmNuUWdZMjl1YzNRZ1pHbHpjRzl6WlNBOUlDZ3BPaUIyYjJsa0lEMCtJSHRjYmlBZ2FXWWdLR2x1YVhScFlXeHBlbVZrSUNZbUlDRnBibWwwYVdGc2FYcHBibWNnSmlZZ0lXRmliM0owWldRcElIdGNiaUFnSUNCcGJtbDBhV0ZzYVhwcGJtY2dQU0IwY25WbE8xeHVYRzRnSUNBZ0tIZGhjMjBnWVhNZ1QzSjBWMkZ6YlZSb2NtVmhaR1ZrVFc5a2RXeGxLUzVRVkdoeVpXRmtQeTUwWlhKdGFXNWhkR1ZCYkd4VWFISmxZV1J6S0NrN1hHNGdJQ0FnZDJGemJTQTlJSFZ1WkdWbWFXNWxaRHRjYmx4dUlDQWdJR2x1YVhScFlXeHBlbWx1WnlBOUlHWmhiSE5sTzF4dUlDQWdJR2x1YVhScFlXeHBlbVZrSUQwZ1ptRnNjMlU3WEc0Z0lDQWdZV0p2Y25SbFpDQTlJSFJ5ZFdVN1hHNGdJSDFjYm4wN1hHNGlMQ0FpTHk4Z1EyOXdlWEpwWjJoMElDaGpLU0JOYVdOeWIzTnZablFnUTI5eWNHOXlZWFJwYjI0dUlFRnNiQ0J5YVdkb2RITWdjbVZ6WlhKMlpXUXVYRzR2THlCTWFXTmxibk5sWkNCMWJtUmxjaUIwYUdVZ1RVbFVJRXhwWTJWdWMyVXVYRzVjYm1sdGNHOXlkQ0I3WjJWMFNXNXpkR0Z1WTJWOUlHWnliMjBnSnk0dmQyRnpiUzFtWVdOMGIzSjVKenRjYmx4dVpYaHdiM0owSUdOdmJuTjBJR0ZzYkc5alYyRnpiVk4wY21sdVp5QTlJQ2hrWVhSaE9pQnpkSEpwYm1jc0lHRnNiRzlqY3pvZ2JuVnRZbVZ5VzEwcE9pQnVkVzFpWlhJZ1BUNGdlMXh1SUNCamIyNXpkQ0IzWVhOdElEMGdaMlYwU1c1emRHRnVZMlVvS1R0Y2JseHVJQ0JqYjI1emRDQmtZWFJoVEdWdVozUm9JRDBnZDJGemJTNXNaVzVuZEdoQ2VYUmxjMVZVUmpnb1pHRjBZU2tnS3lBeE8xeHVJQ0JqYjI1emRDQmtZWFJoVDJabWMyVjBJRDBnZDJGemJTNWZiV0ZzYkc5aktHUmhkR0ZNWlc1bmRHZ3BPMXh1SUNCM1lYTnRMbk4wY21sdVoxUnZWVlJHT0Noa1lYUmhMQ0JrWVhSaFQyWm1jMlYwTENCa1lYUmhUR1Z1WjNSb0tUdGNiaUFnWVd4c2IyTnpMbkIxYzJnb1pHRjBZVTltWm5ObGRDazdYRzVjYmlBZ2NtVjBkWEp1SUdSaGRHRlBabVp6WlhRN1hHNTlPMXh1WEc1cGJuUmxjbVpoWTJVZ1JYaDBjbUZQY0hScGIyNXpTR0Z1Wkd4bGNpQjdYRzRnSUNodVlXMWxPaUJ6ZEhKcGJtY3NJSFpoYkhWbE9pQnpkSEpwYm1jcE9pQjJiMmxrTzF4dWZWeHVYRzVsZUhCdmNuUWdZMjl1YzNRZ2FYUmxjbUYwWlVWNGRISmhUM0IwYVc5dWN5QTlYRzRnSUNBZ0tHOXdkR2x2Ym5NNklGSmxZMjl5WkR4emRISnBibWNzSUhWdWEyNXZkMjQrTENCd2NtVm1hWGc2SUhOMGNtbHVaeXdnYzJWbGJqb2dWMlZoYTFObGREeFNaV052Y21ROGMzUnlhVzVuTENCMWJtdHViM2R1UGo0c1hHNGdJQ0FnSUdoaGJtUnNaWEk2SUVWNGRISmhUM0IwYVc5dWMwaGhibVJzWlhJcE9pQjJiMmxrSUQwK0lIdGNiaUFnSUNBZ0lHbG1JQ2gwZVhCbGIyWWdiM0IwYVc5dWN5QTlQU0FuYjJKcVpXTjBKeUFtSmlCdmNIUnBiMjV6SUNFOVBTQnVkV3hzS1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2h6WldWdUxtaGhjeWh2Y0hScGIyNXpLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2lnblEybHlZM1ZzWVhJZ2NtVm1aWEpsYm1ObElHbHVJRzl3ZEdsdmJuTW5LVHRjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNCelpXVnVMbUZrWkNodmNIUnBiMjV6S1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQlBZbXBsWTNRdVpXNTBjbWxsY3lodmNIUnBiMjV6S1M1bWIzSkZZV05vS0NoYmEyVjVMQ0IyWVd4MVpWMHBJRDArSUh0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnYm1GdFpTQTlJQ2h3Y21WbWFYZ3BJRDhnY0hKbFptbDRJQ3NnYTJWNUlEb2dhMlY1TzF4dUlDQWdJQ0FnSUNCcFppQW9kSGx3Wlc5bUlIWmhiSFZsSUQwOVBTQW5iMkpxWldOMEp5a2dlMXh1SUNBZ0lDQWdJQ0FnSUdsMFpYSmhkR1ZGZUhSeVlVOXdkR2x2Ym5Nb2RtRnNkV1VnWVhNZ1VtVmpiM0prUEhOMGNtbHVaeXdnZFc1cmJtOTNiajRzSUc1aGJXVWdLeUFuTGljc0lITmxaVzRzSUdoaGJtUnNaWElwTzF4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tIUjVjR1Z2WmlCMllXeDFaU0E5UFQwZ0ozTjBjbWx1WnljZ2ZId2dkSGx3Wlc5bUlIWmhiSFZsSUQwOVBTQW5iblZ0WW1WeUp5a2dlMXh1SUNBZ0lDQWdJQ0FnSUdoaGJtUnNaWElvYm1GdFpTd2dkbUZzZFdVdWRHOVRkSEpwYm1jb0tTazdYRzRnSUNBZ0lDQWdJSDBnWld4elpTQnBaaUFvZEhsd1pXOW1JSFpoYkhWbElEMDlQU0FuWW05dmJHVmhiaWNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQm9ZVzVrYkdWeUtHNWhiV1VzSUNoMllXeDFaU2tnUHlBbk1TY2dPaUFuTUNjcE8xeHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpaGdRMkZ1SjNRZ2FHRnVaR3hsSUdWNGRISmhJR052Ym1acFp5QjBlWEJsT2lBa2UzUjVjR1Z2WmlCMllXeDFaWDFnS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZTazdYRzRnSUNBZ2ZUdGNibHh1THlvcVhHNGdLaUJqYUdWamF5QjNaV0lnWVhOelpXMWliSGtnUVZCSkozTWdiR0Z6ZENCbGNuSnZjaUJoYm1RZ2RHaHliM2NnWlhKeWIzSWdhV1lnWVc1NUlHVnljbTl5SUc5alkzVnljbVZrTGx4dUlDb2dRSEJoY21GdElHMWxjM05oWjJVZ1lTQnRaWE56WVdkbElIVnpaV1FnZDJobGJpQmhiaUJsY25KdmNpQnZZMk4xY25KbFpDNWNiaUFxTDF4dVpYaHdiM0owSUdOdmJuTjBJR05vWldOclRHRnpkRVZ5Y205eUlEMGdLRzFsYzNOaFoyVTZJSE4wY21sdVp5azZJSFp2YVdRZ1BUNGdlMXh1SUNCamIyNXpkQ0IzWVhOdElEMGdaMlYwU1c1emRHRnVZMlVvS1R0Y2JseHVJQ0JqYjI1emRDQnpkR0ZqYXlBOUlIZGhjMjB1YzNSaFkydFRZWFpsS0NrN1hHNGdJSFJ5ZVNCN1hHNGdJQ0FnWTI5dWMzUWdjR0Z5WVcxelQyWm1jMlYwSUQwZ2QyRnpiUzV6ZEdGamEwRnNiRzlqS0RncE8xeHVJQ0FnSUhkaGMyMHVYMDl5ZEVkbGRFeGhjM1JGY25KdmNpaHdZWEpoYlhOUFptWnpaWFFzSUhCaGNtRnRjMDltWm5ObGRDQXJJRFFwTzF4dUlDQWdJR052Ym5OMElHVnljbTl5UTI5a1pTQTlJSGRoYzIwdVNFVkJVRE15VzNCaGNtRnRjMDltWm5ObGRDQXZJRFJkTzF4dUlDQWdJR052Ym5OMElHVnljbTl5VFdWemMyRm5aVkJ2YVc1MFpYSWdQU0IzWVhOdExraEZRVkJWTXpKYmNHRnlZVzF6VDJabWMyVjBJQzhnTkNBcklERmRPMXh1SUNBZ0lHTnZibk4wSUdWeWNtOXlUV1Z6YzJGblpTQTlJR1Z5Y205eVRXVnpjMkZuWlZCdmFXNTBaWElnUHlCM1lYTnRMbFZVUmpoVWIxTjBjbWx1WnlobGNuSnZjazFsYzNOaFoyVlFiMmx1ZEdWeUtTQTZJQ2NuTzF4dUlDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpaGdKSHR0WlhOellXZGxmU0JGVWxKUFVsOURUMFJGT2lBa2UyVnljbTl5UTI5a1pYMHNJRVZTVWs5U1gwMUZVMU5CUjBVNklDUjdaWEp5YjNKTlpYTnpZV2RsZldBcE8xeHVJQ0I5SUdacGJtRnNiSGtnZTF4dUlDQWdJSGRoYzIwdWMzUmhZMnRTWlhOMGIzSmxLSE4wWVdOcktUdGNiaUFnZlZ4dWZUdGNiaUlzSUNJdkx5QkRiM0I1Y21sbmFIUWdLR01wSUUxcFkzSnZjMjltZENCRGIzSndiM0poZEdsdmJpNGdRV3hzSUhKcFoyaDBjeUJ5WlhObGNuWmxaQzVjYmk4dklFeHBZMlZ1YzJWa0lIVnVaR1Z5SUhSb1pTQk5TVlFnVEdsalpXNXpaUzVjYmx4dWFXMXdiM0owSUh0SmJtWmxjbVZ1WTJWVFpYTnphVzl1ZlNCbWNtOXRJQ2R2Ym01NGNuVnVkR2x0WlMxamIyMXRiMjRuTzF4dVhHNXBiWEJ2Y25RZ2UyZGxkRWx1YzNSaGJtTmxmU0JtY205dElDY3VMM2RoYzIwdFptRmpkRzl5ZVNjN1hHNXBiWEJ2Y25RZ2UyRnNiRzlqVjJGemJWTjBjbWx1Wnl3Z1kyaGxZMnRNWVhOMFJYSnliM0lzSUdsMFpYSmhkR1ZGZUhSeVlVOXdkR2x2Ym5OOUlHWnliMjBnSnk0dmQyRnpiUzExZEdsc2N5YzdYRzVjYm1WNGNHOXlkQ0JqYjI1emRDQnpaWFJTZFc1UGNIUnBiMjV6SUQwZ0tHOXdkR2x2Ym5NNklFbHVabVZ5Wlc1alpWTmxjM05wYjI0dVVuVnVUM0IwYVc5dWN5azZJRnR1ZFcxaVpYSXNJRzUxYldKbGNsdGRYU0E5UGlCN1hHNGdJR052Ym5OMElIZGhjMjBnUFNCblpYUkpibk4wWVc1alpTZ3BPMXh1SUNCc1pYUWdjblZ1VDNCMGFXOXVjMGhoYm1Sc1pTQTlJREE3WEc0Z0lHTnZibk4wSUdGc2JHOWpjem9nYm5WdFltVnlXMTBnUFNCYlhUdGNibHh1SUNCamIyNXpkQ0J5ZFc1UGNIUnBiMjV6T2lCSmJtWmxjbVZ1WTJWVFpYTnphVzl1TGxKMWJrOXdkR2x2Ym5NZ1BTQnZjSFJwYjI1eklIeDhJSHQ5TzF4dVhHNGdJSFJ5ZVNCN1hHNGdJQ0FnYVdZZ0tHOXdkR2x2Ym5NL0xteHZaMU5sZG1WeWFYUjVUR1YyWld3Z1BUMDlJSFZ1WkdWbWFXNWxaQ2tnZTF4dUlDQWdJQ0FnY25WdVQzQjBhVzl1Y3k1c2IyZFRaWFpsY21sMGVVeGxkbVZzSUQwZ01qc2dJQzh2SUVSbFptRjFiSFFnZEc4Z2QyRnlibWx1WjF4dUlDQWdJSDBnWld4elpTQnBaaUFvWEc0Z0lDQWdJQ0FnSUhSNWNHVnZaaUJ2Y0hScGIyNXpMbXh2WjFObGRtVnlhWFI1VEdWMlpXd2dJVDA5SUNkdWRXMWlaWEluSUh4OElDRk9kVzFpWlhJdWFYTkpiblJsWjJWeUtHOXdkR2x2Ym5NdWJHOW5VMlYyWlhKcGRIbE1aWFpsYkNrZ2ZIeGNiaUFnSUNBZ0lDQWdiM0IwYVc5dWN5NXNiMmRUWlhabGNtbDBlVXhsZG1Wc0lEd2dNQ0I4ZkNCdmNIUnBiMjV6TG14dloxTmxkbVZ5YVhSNVRHVjJaV3dnUGlBMEtTQjdYRzRnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb1lHeHZaeUJ6WlhKMlpYSnBkSGtnYkdWMlpXd2dhWE1nYm05MElIWmhiR2xrT2lBa2UyOXdkR2x2Ym5NdWJHOW5VMlYyWlhKcGRIbE1aWFpsYkgxZ0tUdGNiaUFnSUNCOVhHNWNiaUFnSUNCcFppQW9iM0IwYVc5dWN6OHViRzluVm1WeVltOXphWFI1VEdWMlpXd2dQVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHVJQ0FnSUNBZ2NuVnVUM0IwYVc5dWN5NXNiMmRXWlhKaWIzTnBkSGxNWlhabGJDQTlJREE3SUNBdkx5QkVaV1poZFd4MElIUnZJREJjYmlBZ0lDQjlJR1ZzYzJVZ2FXWWdLSFI1Y0dWdlppQnZjSFJwYjI1ekxteHZaMVpsY21KdmMybDBlVXhsZG1Wc0lDRTlQU0FuYm5WdFltVnlKeUI4ZkNBaFRuVnRZbVZ5TG1selNXNTBaV2RsY2lodmNIUnBiMjV6TG14dloxWmxjbUp2YzJsMGVVeGxkbVZzS1NrZ2UxeHVJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0dCc2IyY2dkbVZ5WW05emFYUjVJR3hsZG1Wc0lHbHpJRzV2ZENCMllXeHBaRG9nSkh0dmNIUnBiMjV6TG14dloxWmxjbUp2YzJsMGVVeGxkbVZzZldBcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUdsbUlDaHZjSFJwYjI1elB5NTBaWEp0YVc1aGRHVWdQVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHVJQ0FnSUNBZ2NuVnVUM0IwYVc5dWN5NTBaWEp0YVc1aGRHVWdQU0JtWVd4elpUdGNiaUFnSUNCOVhHNWNiaUFnSUNCc1pYUWdkR0ZuUkdGMFlVOW1abk5sZENBOUlEQTdYRzRnSUNBZ2FXWWdLRzl3ZEdsdmJuTS9MblJoWnlBaFBUMGdkVzVrWldacGJtVmtLU0I3WEc0Z0lDQWdJQ0IwWVdkRVlYUmhUMlptYzJWMElEMGdZV3hzYjJOWFlYTnRVM1J5YVc1bktHOXdkR2x2Ym5NdWRHRm5MQ0JoYkd4dlkzTXBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lISjFiazl3ZEdsdmJuTklZVzVrYkdVZ1BTQjNZWE50TGw5UGNuUkRjbVZoZEdWU2RXNVBjSFJwYjI1ektGeHVJQ0FnSUNBZ0lDQnlkVzVQY0hScGIyNXpMbXh2WjFObGRtVnlhWFI1VEdWMlpXd2hMQ0J5ZFc1UGNIUnBiMjV6TG14dloxWmxjbUp2YzJsMGVVeGxkbVZzSVN3Z0lTRnlkVzVQY0hScGIyNXpMblJsY20xcGJtRjBaU0VzSUhSaFowUmhkR0ZQWm1aelpYUXBPMXh1SUNBZ0lHbG1JQ2h5ZFc1UGNIUnBiMjV6U0dGdVpHeGxJRDA5UFNBd0tTQjdYRzRnSUNBZ0lDQmphR1ZqYTB4aGMzUkZjbkp2Y2lnblEyRnVYRnduZENCamNtVmhkR1VnY25WdUlHOXdkR2x2Ym5NdUp5azdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2FXWWdLRzl3ZEdsdmJuTS9MbVY0ZEhKaElDRTlQU0IxYm1SbFptbHVaV1FwSUh0Y2JpQWdJQ0FnSUdsMFpYSmhkR1ZGZUhSeVlVOXdkR2x2Ym5Nb2IzQjBhVzl1Y3k1bGVIUnlZU3dnSnljc0lHNWxkeUJYWldGclUyVjBQRkpsWTI5eVpEeHpkSEpwYm1jc0lIVnVhMjV2ZDI0K1BpZ3BMQ0FvYTJWNUxDQjJZV3gxWlNrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQnJaWGxFWVhSaFQyWm1jMlYwSUQwZ1lXeHNiMk5YWVhOdFUzUnlhVzVuS0d0bGVTd2dZV3hzYjJOektUdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2RtRnNkV1ZFWVhSaFQyWm1jMlYwSUQwZ1lXeHNiMk5YWVhOdFUzUnlhVzVuS0haaGJIVmxMQ0JoYkd4dlkzTXBPMXh1WEc0Z0lDQWdJQ0FnSUdsbUlDaDNZWE50TGw5UGNuUkJaR1JTZFc1RGIyNW1hV2RGYm5SeWVTaHlkVzVQY0hScGIyNXpTR0Z1Wkd4bExDQnJaWGxFWVhSaFQyWm1jMlYwTENCMllXeDFaVVJoZEdGUFptWnpaWFFwSUNFOVBTQXdLU0I3WEc0Z0lDQWdJQ0FnSUNBZ1kyaGxZMnRNWVhOMFJYSnliM0lvWUVOaGJpZDBJSE5sZENCaElISjFiaUJqYjI1bWFXY2daVzUwY25rNklDUjdhMlY1ZlNBdElDUjdkbUZzZFdWOUxtQXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5S1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0J5WlhSMWNtNGdXM0oxYms5d2RHbHZibk5JWVc1a2JHVXNJR0ZzYkc5amMxMDdYRzRnSUgwZ1kyRjBZMmdnS0dVcElIdGNiaUFnSUNCcFppQW9jblZ1VDNCMGFXOXVjMGhoYm1Sc1pTQWhQVDBnTUNrZ2UxeHVJQ0FnSUNBZ2QyRnpiUzVmVDNKMFVtVnNaV0Z6WlZKMWJrOXdkR2x2Ym5Nb2NuVnVUM0IwYVc5dWMwaGhibVJzWlNrN1hHNGdJQ0FnZlZ4dUlDQWdJR0ZzYkc5amN5NW1iM0pGWVdOb0tHRnNiRzlqSUQwK0lIZGhjMjB1WDJaeVpXVW9ZV3hzYjJNcEtUdGNiaUFnSUNCMGFISnZkeUJsTzF4dUlDQjlYRzU5TzF4dUlpd2dJaTh2SUVOdmNIbHlhV2RvZENBb1l5a2dUV2xqY205emIyWjBJRU52Y25CdmNtRjBhVzl1TGlCQmJHd2djbWxuYUhSeklISmxjMlZ5ZG1Wa0xseHVMeThnVEdsalpXNXpaV1FnZFc1a1pYSWdkR2hsSUUxSlZDQk1hV05sYm5ObExseHVYRzVwYlhCdmNuUWdlMGx1Wm1WeVpXNWpaVk5sYzNOcGIyNTlJR1p5YjIwZ0oyOXVibmh5ZFc1MGFXMWxMV052YlcxdmJpYzdYRzVjYm1sdGNHOXlkQ0I3WjJWMFNXNXpkR0Z1WTJWOUlHWnliMjBnSnk0dmQyRnpiUzFtWVdOMGIzSjVKenRjYm1sdGNHOXlkQ0I3WVd4c2IyTlhZWE50VTNSeWFXNW5MQ0JqYUdWamEweGhjM1JGY25KdmNpd2dhWFJsY21GMFpVVjRkSEpoVDNCMGFXOXVjMzBnWm5KdmJTQW5MaTkzWVhOdExYVjBhV3h6Snp0Y2JseHVZMjl1YzNRZ1oyVjBSM0poY0doUGNIUnBiWHBoZEdsdmJreGxkbVZzSUQwZ0tHZHlZWEJvVDNCMGFXMXBlbUYwYVc5dVRHVjJaV3c2SUhOMGNtbHVaM3gxYm10dWIzZHVLVG9nYm5WdFltVnlJRDArSUh0Y2JpQWdjM2RwZEdOb0lDaG5jbUZ3YUU5d2RHbHRhWHBoZEdsdmJreGxkbVZzS1NCN1hHNGdJQ0FnWTJGelpTQW5aR2x6WVdKc1pXUW5PbHh1SUNBZ0lDQWdjbVYwZFhKdUlEQTdYRzRnSUNBZ1kyRnpaU0FuWW1GemFXTW5PbHh1SUNBZ0lDQWdjbVYwZFhKdUlERTdYRzRnSUNBZ1kyRnpaU0FuWlhoMFpXNWtaV1FuT2x4dUlDQWdJQ0FnY21WMGRYSnVJREk3WEc0Z0lDQWdZMkZ6WlNBbllXeHNKenBjYmlBZ0lDQWdJSEpsZEhWeWJpQTVPVHRjYmlBZ0lDQmtaV1poZFd4ME9seHVJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0dCMWJuTjFjSEJ2Y25SbFpDQm5jbUZ3YUNCdmNIUnBiV2w2WVhScGIyNGdiR1YyWld3NklDUjdaM0poY0doUGNIUnBiV2w2WVhScGIyNU1aWFpsYkgxZ0tUdGNiaUFnZlZ4dWZUdGNibHh1WTI5dWMzUWdaMlYwUlhobFkzVjBhVzl1VFc5a1pTQTlJQ2hsZUdWamRYUnBiMjVOYjJSbE9pQW5jMlZ4ZFdWdWRHbGhiQ2Q4SjNCaGNtRnNiR1ZzSnlrNklHNTFiV0psY2lBOVBpQjdYRzRnSUhOM2FYUmphQ0FvWlhobFkzVjBhVzl1VFc5a1pTa2dlMXh1SUNBZ0lHTmhjMlVnSjNObGNYVmxiblJwWVd3bk9seHVJQ0FnSUNBZ2NtVjBkWEp1SURBN1hHNGdJQ0FnWTJGelpTQW5jR0Z5WVd4c1pXd25PbHh1SUNBZ0lDQWdjbVYwZFhKdUlERTdYRzRnSUNBZ1pHVm1ZWFZzZERwY2JpQWdJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWhnZFc1emRYQndiM0owWldRZ1pYaGxZM1YwYVc5dUlHMXZaR1U2SUNSN1pYaGxZM1YwYVc5dVRXOWtaWDFnS1R0Y2JpQWdmVnh1ZlR0Y2JseHVZMjl1YzNRZ1lYQndaVzVrUkdWbVlYVnNkRTl3ZEdsdmJuTWdQU0FvYjNCMGFXOXVjem9nU1c1bVpYSmxibU5sVTJWemMybHZiaTVUWlhOemFXOXVUM0IwYVc5dWN5azZJSFp2YVdRZ1BUNGdlMXh1SUNCcFppQW9JVzl3ZEdsdmJuTXVaWGgwY21FcElIdGNiaUFnSUNCdmNIUnBiMjV6TG1WNGRISmhJRDBnZTMwN1hHNGdJSDFjYmlBZ2FXWWdLQ0Z2Y0hScGIyNXpMbVY0ZEhKaExuTmxjM05wYjI0cElIdGNiaUFnSUNCdmNIUnBiMjV6TG1WNGRISmhMbk5sYzNOcGIyNGdQU0I3ZlR0Y2JpQWdmVnh1SUNCamIyNXpkQ0J6WlhOemFXOXVJRDBnYjNCMGFXOXVjeTVsZUhSeVlTNXpaWE56YVc5dUlHRnpJRkpsWTI5eVpEeHpkSEpwYm1jc0lITjBjbWx1Wno0N1hHNGdJR2xtSUNnaGMyVnpjMmx2Ymk1MWMyVmZiM0owWDIxdlpHVnNYMko1ZEdWelgyUnBjbVZqZEd4NUtTQjdYRzRnSUNBZ0x5OGdaWE5zYVc1MExXUnBjMkZpYkdVdGJtVjRkQzFzYVc1bElHTmhiV1ZzWTJGelpWeHVJQ0FnSUhObGMzTnBiMjR1ZFhObFgyOXlkRjl0YjJSbGJGOWllWFJsYzE5a2FYSmxZM1JzZVNBOUlDY3hKenRjYmlBZ2ZWeHVYRzRnSUM4dklHbG1JSFZ6YVc1bklFcFRSVkFnZDJsMGFDQlhaV0pIVUZVc0lHRnNkMkY1Y3lCa2FYTmhZbXhsSUcxbGJXOXllU0J3WVhSMFpYSnVYRzRnSUdsbUlDaHZjSFJwYjI1ekxtVjRaV04xZEdsdmJsQnliM1pwWkdWeWN5QW1KbHh1SUNBZ0lDQWdiM0IwYVc5dWN5NWxlR1ZqZFhScGIyNVFjbTkyYVdSbGNuTXVjMjl0WlNobGNDQTlQaUFvZEhsd1pXOW1JR1Z3SUQwOVBTQW5jM1J5YVc1bkp5QS9JR1Z3SURvZ1pYQXVibUZ0WlNrZ1BUMDlJQ2QzWldKbmNIVW5LU2tnZTF4dUlDQWdJRzl3ZEdsdmJuTXVaVzVoWW14bFRXVnRVR0YwZEdWeWJpQTlJR1poYkhObE8xeHVJQ0I5WEc1OU8xeHVYRzVqYjI1emRDQnpaWFJGZUdWamRYUnBiMjVRY205MmFXUmxjbk1nUFZ4dUlDQWdJQ2h6WlhOemFXOXVUM0IwYVc5dWMwaGhibVJzWlRvZ2JuVnRZbVZ5TENCbGVHVmpkWFJwYjI1UWNtOTJhV1JsY25NNklISmxZV1J2Ym14NUlFbHVabVZ5Wlc1alpWTmxjM05wYjI0dVJYaGxZM1YwYVc5dVVISnZkbWxrWlhKRGIyNW1hV2RiWFN4Y2JpQWdJQ0FnWVd4c2IyTnpPaUJ1ZFcxaVpYSmJYU2s2SUhadmFXUWdQVDRnZTF4dUlDQWdJQ0FnWm05eUlDaGpiMjV6ZENCbGNDQnZaaUJsZUdWamRYUnBiMjVRY205MmFXUmxjbk1wSUh0Y2JpQWdJQ0FnSUNBZ2JHVjBJR1Z3VG1GdFpTQTlJSFI1Y0dWdlppQmxjQ0E5UFQwZ0ozTjBjbWx1WnljZ1B5QmxjQ0E2SUdWd0xtNWhiV1U3WEc1Y2JpQWdJQ0FnSUNBZ0x5OGdZMmhsWTJzZ1JWQWdibUZ0WlZ4dUlDQWdJQ0FnSUNCemQybDBZMmdnS0dWd1RtRnRaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lHTmhjMlVnSjNkbFltNXVKenBjYmlBZ0lDQWdJQ0FnSUNBZ0lHVndUbUZ0WlNBOUlDZFhSVUpPVGljN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RIbHdaVzltSUdWd0lDRTlQU0FuYzNSeWFXNW5KeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQjNaV0p1Yms5d2RHbHZibk1nUFNCbGNDQmhjeUJKYm1abGNtVnVZMlZUWlhOemFXOXVMbGRsWWs1T1JYaGxZM1YwYVc5dVVISnZkbWxrWlhKUGNIUnBiMjQ3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoM1pXSnViazl3ZEdsdmJuTS9MbVJsZG1salpWUjVjR1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0JyWlhsRVlYUmhUMlptYzJWMElEMGdZV3hzYjJOWFlYTnRVM1J5YVc1bktDZGtaWFpwWTJWVWVYQmxKeXdnWVd4c2IyTnpLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQjJZV3gxWlVSaGRHRlBabVp6WlhRZ1BTQmhiR3h2WTFkaGMyMVRkSEpwYm1jb2QyVmlibTVQY0hScGIyNXpMbVJsZG1salpWUjVjR1VzSUdGc2JHOWpjeWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHZGxkRWx1YzNSaGJtTmxLQ2t1WDA5eWRFRmtaRk5sYzNOcGIyNURiMjVtYVdkRmJuUnllU2h6WlhOemFXOXVUM0IwYVc5dWMwaGhibVJzWlN3Z2EyVjVSR0YwWVU5bVpuTmxkQ3dnZG1Gc2RXVkVZWFJoVDJabWMyVjBLU0FoUFQxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdNQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyaGxZMnRNWVhOMFJYSnliM0lvWUVOaGJpZDBJSE5sZENCaElITmxjM05wYjI0Z1kyOXVabWxuSUdWdWRISjVPaUFuWkdWMmFXTmxWSGx3WlNjZ0xTQWtlM2RsWW01dVQzQjBhVzl1Y3k1a1pYWnBZMlZVZVhCbGZTNWdLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hkbFltNXVUM0IwYVc5dWN6OHViblZ0VkdoeVpXRmtjeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQnVkVzFVYUhKbFlXUnpJRDBnZDJWaWJtNVBjSFJwYjI1ekxtNTFiVlJvY21WaFpITTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnU25WemRDQnBaMjV2Y21VZ2FXNTJZV3hwWkNCM1pXSnViazl3ZEdsdmJuTXViblZ0VkdoeVpXRmtjeTVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RIbHdaVzltSUc1MWJWUm9jbVZoWkhNZ0lUMGdKMjUxYldKbGNpY2dmSHdnSVU1MWJXSmxjaTVwYzBsdWRHVm5aWElvYm5WdFZHaHlaV0ZrY3lrZ2ZId2diblZ0VkdoeVpXRmtjeUE4SURBcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzUxYlZSb2NtVmhaSE1nUFNBd08xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCclpYbEVZWFJoVDJabWMyVjBJRDBnWVd4c2IyTlhZWE50VTNSeWFXNW5LQ2R1ZFcxVWFISmxZV1J6Snl3Z1lXeHNiMk56S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0IyWVd4MVpVUmhkR0ZQWm1aelpYUWdQU0JoYkd4dlkxZGhjMjFUZEhKcGJtY29iblZ0VkdoeVpXRmtjeTUwYjFOMGNtbHVaeWdwTENCaGJHeHZZM01wTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaG5aWFJKYm5OMFlXNWpaU2dwTGw5UGNuUkJaR1JUWlhOemFXOXVRMjl1Wm1sblJXNTBjbmtvYzJWemMybHZiazl3ZEdsdmJuTklZVzVrYkdVc0lHdGxlVVJoZEdGUFptWnpaWFFzSUhaaGJIVmxSR0YwWVU5bVpuTmxkQ2tnSVQwOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJREFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTm9aV05yVEdGemRFVnljbTl5S0dCRFlXNG5kQ0J6WlhRZ1lTQnpaWE56YVc5dUlHTnZibVpwWnlCbGJuUnllVG9nSjI1MWJWUm9jbVZoWkhNbklDMGdKSHQzWldKdWJrOXdkR2x2Ym5NdWJuVnRWR2h5WldGa2MzMHVZQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoM1pXSnViazl3ZEdsdmJuTS9MbkJ2ZDJWeVVISmxabVZ5Wlc1alpTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElHdGxlVVJoZEdGUFptWnpaWFFnUFNCaGJHeHZZMWRoYzIxVGRISnBibWNvSjNCdmQyVnlVSEpsWm1WeVpXNWpaU2NzSUdGc2JHOWpjeWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdkbUZzZFdWRVlYUmhUMlptYzJWMElEMGdZV3hzYjJOWFlYTnRVM1J5YVc1bktIZGxZbTV1VDNCMGFXOXVjeTV3YjNkbGNsQnlaV1psY21WdVkyVXNJR0ZzYkc5amN5azdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dkbGRFbHVjM1JoYm1ObEtDa3VYMDl5ZEVGa1pGTmxjM05wYjI1RGIyNW1hV2RGYm5SeWVTaHpaWE56YVc5dVQzQjBhVzl1YzBoaGJtUnNaU3dnYTJWNVJHRjBZVTltWm5ObGRDd2dkbUZzZFdWRVlYUmhUMlptYzJWMEtTQWhQVDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ01Da2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJobFkydE1ZWE4wUlhKeWIzSW9YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1lFTmhiaWQwSUhObGRDQmhJSE5sYzNOcGIyNGdZMjl1Wm1sbklHVnVkSEo1T2lBbmNHOTNaWEpRY21WbVpYSmxibU5sSnlBdElDUjdkMlZpYm01UGNIUnBiMjV6TG5CdmQyVnlVSEpsWm1WeVpXNWpaWDB1WUNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXp0Y2JpQWdJQ0FnSUNBZ0lDQmpZWE5sSUNkM1pXSm5jSFVuT2x4dUlDQWdJQ0FnSUNBZ0lDQWdaWEJPWVcxbElEMGdKMHBUSnp0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoMGVYQmxiMllnWlhBZ0lUMDlJQ2R6ZEhKcGJtY25LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElIZGxZbWR3ZFU5d2RHbHZibk1nUFNCbGNDQmhjeUJKYm1abGNtVnVZMlZUWlhOemFXOXVMbGRsWWtkd2RVVjRaV04xZEdsdmJsQnliM1pwWkdWeVQzQjBhVzl1TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2QyVmlaM0IxVDNCMGFXOXVjejh1Y0hKbFptVnljbVZrVEdGNWIzVjBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIZGxZbWR3ZFU5d2RHbHZibk11Y0hKbFptVnljbVZrVEdGNWIzVjBJQ0U5UFNBblRrTklWeWNnSmlZZ2QyVmlaM0IxVDNCMGFXOXVjeTV3Y21WbVpYSnlaV1JNWVhsdmRYUWdJVDA5SUNkT1NGZERKeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0dCd2NtVm1aWEp5WldSTVlYbHZkWFFnYlhWemRDQmlaU0JsYVhSb1pYSWdKMDVEU0ZjbklHOXlJQ2RPU0ZkREp6b2dKSHQzWldKbmNIVlBjSFJwYjI1ekxuQnlaV1psY25KbFpFeGhlVzkxZEgxZ0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2EyVjVSR0YwWVU5bVpuTmxkQ0E5SUdGc2JHOWpWMkZ6YlZOMGNtbHVaeWduY0hKbFptVnljbVZrVEdGNWIzVjBKeXdnWVd4c2IyTnpLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQjJZV3gxWlVSaGRHRlBabVp6WlhRZ1BTQmhiR3h2WTFkaGMyMVRkSEpwYm1jb2QyVmlaM0IxVDNCMGFXOXVjeTV3Y21WbVpYSnlaV1JNWVhsdmRYUXNJR0ZzYkc5amN5azdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dkbGRFbHVjM1JoYm1ObEtDa3VYMDl5ZEVGa1pGTmxjM05wYjI1RGIyNW1hV2RGYm5SeWVTaHpaWE56YVc5dVQzQjBhVzl1YzBoaGJtUnNaU3dnYTJWNVJHRjBZVTltWm5ObGRDd2dkbUZzZFdWRVlYUmhUMlptYzJWMEtTQWhQVDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ01Da2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJobFkydE1ZWE4wUlhKeWIzSW9YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1lFTmhiaWQwSUhObGRDQmhJSE5sYzNOcGIyNGdZMjl1Wm1sbklHVnVkSEo1T2lBbmNISmxabVZ5Y21Wa1RHRjViM1YwSnlBdElDUjdkMlZpWjNCMVQzQjBhVzl1Y3k1d2NtVm1aWEp5WldSTVlYbHZkWFI5TG1BcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN1hHNGdJQ0FnSUNBZ0lDQWdZMkZ6WlNBbmQyRnpiU2M2WEc0Z0lDQWdJQ0FnSUNBZ1kyRnpaU0FuWTNCMUp6cGNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuUnBiblZsTzF4dUlDQWdJQ0FnSUNBZ0lHUmxabUYxYkhRNlhHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9ZRzV2ZENCemRYQndiM0owWldRZ1pYaGxZM1YwYVc5dUlIQnliM1pwWkdWeU9pQWtlMlZ3VG1GdFpYMWdLVHRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lHTnZibk4wSUdWd1RtRnRaVVJoZEdGUFptWnpaWFFnUFNCaGJHeHZZMWRoYzIxVGRISnBibWNvWlhCT1lXMWxMQ0JoYkd4dlkzTXBPMXh1SUNBZ0lDQWdJQ0JwWmlBb1oyVjBTVzV6ZEdGdVkyVW9LUzVmVDNKMFFYQndaVzVrUlhobFkzVjBhVzl1VUhKdmRtbGtaWElvYzJWemMybHZiazl3ZEdsdmJuTklZVzVrYkdVc0lHVndUbUZ0WlVSaGRHRlBabVp6WlhRcElDRTlQU0F3S1NCN1hHNGdJQ0FnSUNBZ0lDQWdZMmhsWTJ0TVlYTjBSWEp5YjNJb1lFTmhiaWQwSUdGd2NHVnVaQ0JsZUdWamRYUnBiMjRnY0hKdmRtbGtaWEk2SUNSN1pYQk9ZVzFsZlM1Z0tUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmVnh1SUNBZ0lIMDdYRzVjYm1WNGNHOXlkQ0JqYjI1emRDQnpaWFJUWlhOemFXOXVUM0IwYVc5dWN5QTlJQ2h2Y0hScGIyNXpQem9nU1c1bVpYSmxibU5sVTJWemMybHZiaTVUWlhOemFXOXVUM0IwYVc5dWN5azZJRnR1ZFcxaVpYSXNJRzUxYldKbGNsdGRYU0E5UGlCN1hHNGdJR052Ym5OMElIZGhjMjBnUFNCblpYUkpibk4wWVc1alpTZ3BPMXh1SUNCc1pYUWdjMlZ6YzJsdmJrOXdkR2x2Ym5OSVlXNWtiR1VnUFNBd08xeHVJQ0JqYjI1emRDQmhiR3h2WTNNNklHNTFiV0psY2x0ZElEMGdXMTA3WEc1Y2JpQWdZMjl1YzNRZ2MyVnpjMmx2Yms5d2RHbHZibk02SUVsdVptVnlaVzVqWlZObGMzTnBiMjR1VTJWemMybHZiazl3ZEdsdmJuTWdQU0J2Y0hScGIyNXpJSHg4SUh0OU8xeHVJQ0JoY0hCbGJtUkVaV1poZFd4MFQzQjBhVzl1Y3loelpYTnphVzl1VDNCMGFXOXVjeWs3WEc1Y2JpQWdkSEo1SUh0Y2JpQWdJQ0JqYjI1emRDQm5jbUZ3YUU5d2RHbHRhWHBoZEdsdmJreGxkbVZzSUQwZ1oyVjBSM0poY0doUGNIUnBiWHBoZEdsdmJreGxkbVZzS0hObGMzTnBiMjVQY0hScGIyNXpMbWR5WVhCb1QzQjBhVzFwZW1GMGFXOXVUR1YyWld3Z1B6OGdKMkZzYkNjcE8xeHVJQ0FnSUdOdmJuTjBJR1Y0WldOMWRHbHZiazF2WkdVZ1BTQm5aWFJGZUdWamRYUnBiMjVOYjJSbEtITmxjM05wYjI1UGNIUnBiMjV6TG1WNFpXTjFkR2x2YmsxdlpHVWdQejhnSjNObGNYVmxiblJwWVd3bktUdGNiaUFnSUNCamIyNXpkQ0JzYjJkSlpFUmhkR0ZQWm1aelpYUWdQVnh1SUNBZ0lDQWdJQ0IwZVhCbGIyWWdjMlZ6YzJsdmJrOXdkR2x2Ym5NdWJHOW5TV1FnUFQwOUlDZHpkSEpwYm1jbklEOGdZV3hzYjJOWFlYTnRVM1J5YVc1bktITmxjM05wYjI1UGNIUnBiMjV6TG14dlowbGtMQ0JoYkd4dlkzTXBJRG9nTUR0Y2JseHVJQ0FnSUdOdmJuTjBJR3h2WjFObGRtVnlhWFI1VEdWMlpXd2dQU0J6WlhOemFXOXVUM0IwYVc5dWN5NXNiMmRUWlhabGNtbDBlVXhsZG1Wc0lEOC9JREk3SUNBdkx5QkVaV1poZFd4MElIUnZJRElnTFNCM1lYSnVhVzVuWEc0Z0lDQWdhV1lnS0NGT2RXMWlaWEl1YVhOSmJuUmxaMlZ5S0d4dloxTmxkbVZ5YVhSNVRHVjJaV3dwSUh4OElHeHZaMU5sZG1WeWFYUjVUR1YyWld3Z1BDQXdJSHg4SUd4dloxTmxkbVZ5YVhSNVRHVjJaV3dnUGlBMEtTQjdYRzRnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb1lHeHZaeUJ6WlhKMlpYSnBkSGtnYkdWMlpXd2dhWE1nYm05MElIWmhiR2xrT2lBa2UyeHZaMU5sZG1WeWFYUjVUR1YyWld4OVlDazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1kyOXVjM1FnYkc5blZtVnlZbTl6YVhSNVRHVjJaV3dnUFNCelpYTnphVzl1VDNCMGFXOXVjeTVzYjJkV1pYSmliM05wZEhsTVpYWmxiQ0EvUHlBd095QWdMeThnUkdWbVlYVnNkQ0IwYnlBd0lDMGdkbVZ5WW05elpWeHVJQ0FnSUdsbUlDZ2hUblZ0WW1WeUxtbHpTVzUwWldkbGNpaHNiMmRXWlhKaWIzTnBkSGxNWlhabGJDa2dmSHdnYkc5blZtVnlZbTl6YVhSNVRHVjJaV3dnUENBd0lIeDhJR3h2WjFabGNtSnZjMmwwZVV4bGRtVnNJRDRnTkNrZ2UxeHVJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0dCc2IyY2dkbVZ5WW05emFYUjVJR3hsZG1Wc0lHbHpJRzV2ZENCMllXeHBaRG9nSkh0c2IyZFdaWEppYjNOcGRIbE1aWFpsYkgxZ0tUdGNiaUFnSUNCOVhHNWNiaUFnSUNCamIyNXpkQ0J2Y0hScGJXbDZaV1JOYjJSbGJFWnBiR1ZRWVhSb1QyWm1jMlYwSUQwZ2RIbHdaVzltSUhObGMzTnBiMjVQY0hScGIyNXpMbTl3ZEdsdGFYcGxaRTF2WkdWc1JtbHNaVkJoZEdnZ1BUMDlJQ2R6ZEhKcGJtY25JRDljYmlBZ0lDQWdJQ0FnWVd4c2IyTlhZWE50VTNSeWFXNW5LSE5sYzNOcGIyNVBjSFJwYjI1ekxtOXdkR2x0YVhwbFpFMXZaR1ZzUm1sc1pWQmhkR2dzSUdGc2JHOWpjeWtnT2x4dUlDQWdJQ0FnSUNBd08xeHVYRzRnSUNBZ2MyVnpjMmx2Yms5d2RHbHZibk5JWVc1a2JHVWdQU0IzWVhOdExsOVBjblJEY21WaGRHVlRaWE56YVc5dVQzQjBhVzl1Y3loY2JpQWdJQ0FnSUNBZ1ozSmhjR2hQY0hScGJXbDZZWFJwYjI1TVpYWmxiQ3dnSVNGelpYTnphVzl1VDNCMGFXOXVjeTVsYm1GaWJHVkRjSFZOWlcxQmNtVnVZU3dnSVNGelpYTnphVzl1VDNCMGFXOXVjeTVsYm1GaWJHVk5aVzFRWVhSMFpYSnVMQ0JsZUdWamRYUnBiMjVOYjJSbExGeHVJQ0FnSUNBZ0lDQWhJWE5sYzNOcGIyNVBjSFJwYjI1ekxtVnVZV0pzWlZCeWIyWnBiR2x1Wnl3Z01Dd2diRzluU1dSRVlYUmhUMlptYzJWMExDQnNiMmRUWlhabGNtbDBlVXhsZG1Wc0xDQnNiMmRXWlhKaWIzTnBkSGxNWlhabGJDeGNiaUFnSUNBZ0lDQWdiM0IwYVcxcGVtVmtUVzlrWld4R2FXeGxVR0YwYUU5bVpuTmxkQ2s3WEc0Z0lDQWdhV1lnS0hObGMzTnBiMjVQY0hScGIyNXpTR0Z1Wkd4bElEMDlQU0F3S1NCN1hHNGdJQ0FnSUNCamFHVmphMHhoYzNSRmNuSnZjaWduUTJGdVhGd25kQ0JqY21WaGRHVWdjMlZ6YzJsdmJpQnZjSFJwYjI1ekxpY3BPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHbG1JQ2h6WlhOemFXOXVUM0IwYVc5dWN5NWxlR1ZqZFhScGIyNVFjbTkyYVdSbGNuTXBJSHRjYmlBZ0lDQWdJSE5sZEVWNFpXTjFkR2x2YmxCeWIzWnBaR1Z5Y3loelpYTnphVzl1VDNCMGFXOXVjMGhoYm1Sc1pTd2djMlZ6YzJsdmJrOXdkR2x2Ym5NdVpYaGxZM1YwYVc5dVVISnZkbWxrWlhKekxDQmhiR3h2WTNNcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUdsbUlDaHpaWE56YVc5dVQzQjBhVzl1Y3k1bGJtRmliR1ZIY21Gd2FFTmhjSFIxY21VZ0lUMDlJSFZ1WkdWbWFXNWxaQ2tnZTF4dUlDQWdJQ0FnYVdZZ0tIUjVjR1Z2WmlCelpYTnphVzl1VDNCMGFXOXVjeTVsYm1GaWJHVkhjbUZ3YUVOaGNIUjFjbVVnSVQwOUlDZGliMjlzWldGdUp5a2dlMXh1SUNBZ0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9ZR1Z1WVdKc1pVZHlZWEJvUTJGd2RIVnlaU0J0ZFhOMElHSmxJR0VnWW05dmJHVmhiaUIyWVd4MVpUb2dKSHR6WlhOemFXOXVUM0IwYVc5dWN5NWxibUZpYkdWSGNtRndhRU5oY0hSMWNtVjlZQ2s3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0JqYjI1emRDQnJaWGxFWVhSaFQyWm1jMlYwSUQwZ1lXeHNiMk5YWVhOdFUzUnlhVzVuS0NkbGJtRmliR1ZIY21Gd2FFTmhjSFIxY21VbkxDQmhiR3h2WTNNcE8xeHVJQ0FnSUNBZ1kyOXVjM1FnZG1Gc2RXVkVZWFJoVDJabWMyVjBJRDBnWVd4c2IyTlhZWE50VTNSeWFXNW5LSE5sYzNOcGIyNVBjSFJwYjI1ekxtVnVZV0pzWlVkeVlYQm9RMkZ3ZEhWeVpTNTBiMU4wY21sdVp5Z3BMQ0JoYkd4dlkzTXBPMXh1SUNBZ0lDQWdhV1lnS0hkaGMyMHVYMDl5ZEVGa1pGTmxjM05wYjI1RGIyNW1hV2RGYm5SeWVTaHpaWE56YVc5dVQzQjBhVzl1YzBoaGJtUnNaU3dnYTJWNVJHRjBZVTltWm5ObGRDd2dkbUZzZFdWRVlYUmhUMlptYzJWMEtTQWhQVDBnTUNrZ2UxeHVJQ0FnSUNBZ0lDQmphR1ZqYTB4aGMzUkZjbkp2Y2loY2JpQWdJQ0FnSUNBZ0lDQWdJR0JEWVc0bmRDQnpaWFFnWVNCelpYTnphVzl1SUdOdmJtWnBaeUJsYm5SeWVUb2dKMlZ1WVdKc1pVZHlZWEJvUTJGd2RIVnlaU2NnTFNBa2UzTmxjM05wYjI1UGNIUnBiMjV6TG1WdVlXSnNaVWR5WVhCb1EyRndkSFZ5WlgwdVlDazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2FXWWdLSE5sYzNOcGIyNVBjSFJwYjI1ekxtWnlaV1ZFYVcxbGJuTnBiMjVQZG1WeWNtbGtaWE1wSUh0Y2JpQWdJQ0FnSUdadmNpQW9ZMjl1YzNRZ1cyNWhiV1VzSUhaaGJIVmxYU0J2WmlCUFltcGxZM1F1Wlc1MGNtbGxjeWh6WlhOemFXOXVUM0IwYVc5dWN5NW1jbVZsUkdsdFpXNXphVzl1VDNabGNuSnBaR1Z6S1NrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvZEhsd1pXOW1JRzVoYldVZ0lUMDlJQ2R6ZEhKcGJtY25LU0I3WEc0Z0lDQWdJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0dCbWNtVmxJR1JwYldWdWMybHZiaUJ2ZG1WeWNtbGtaU0J1WVcxbElHMTFjM1FnWW1VZ1lTQnpkSEpwYm1jNklDUjdibUZ0WlgxZ0tUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JwWmlBb2RIbHdaVzltSUhaaGJIVmxJQ0U5UFNBbmJuVnRZbVZ5SnlCOGZDQWhUblZ0WW1WeUxtbHpTVzUwWldkbGNpaDJZV3gxWlNrZ2ZId2dkbUZzZFdVZ1BDQXdLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0dCbWNtVmxJR1JwYldWdWMybHZiaUJ2ZG1WeWNtbGtaU0IyWVd4MVpTQnRkWE4wSUdKbElHRWdibTl1TFc1bFoyRjBhWFpsSUdsdWRHVm5aWEk2SUNSN2RtRnNkV1Y5WUNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2JtRnRaVTltWm5ObGRDQTlJR0ZzYkc5alYyRnpiVk4wY21sdVp5aHVZVzFsTENCaGJHeHZZM01wTzF4dUlDQWdJQ0FnSUNCcFppQW9kMkZ6YlM1ZlQzSjBRV1JrUm5KbFpVUnBiV1Z1YzJsdmJrOTJaWEp5YVdSbEtITmxjM05wYjI1UGNIUnBiMjV6U0dGdVpHeGxMQ0J1WVcxbFQyWm1jMlYwTENCMllXeDFaU2tnSVQwOUlEQXBJSHRjYmlBZ0lDQWdJQ0FnSUNCamFHVmphMHhoYzNSRmNuSnZjaWhnUTJGdUozUWdjMlYwSUdFZ1puSmxaU0JrYVcxbGJuTnBiMjRnYjNabGNuSnBaR1U2SUNSN2JtRnRaWDBnTFNBa2UzWmhiSFZsZlM1Z0tUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNibHh1SUNBZ0lHbG1JQ2h6WlhOemFXOXVUM0IwYVc5dWN5NWxlSFJ5WVNBaFBUMGdkVzVrWldacGJtVmtLU0I3WEc0Z0lDQWdJQ0JwZEdWeVlYUmxSWGgwY21GUGNIUnBiMjV6S0hObGMzTnBiMjVQY0hScGIyNXpMbVY0ZEhKaExDQW5KeXdnYm1WM0lGZGxZV3RUWlhROFVtVmpiM0prUEhOMGNtbHVaeXdnZFc1cmJtOTNiajQrS0Nrc0lDaHJaWGtzSUhaaGJIVmxLU0E5UGlCN1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUd0bGVVUmhkR0ZQWm1aelpYUWdQU0JoYkd4dlkxZGhjMjFUZEhKcGJtY29hMlY1TENCaGJHeHZZM01wTzF4dUlDQWdJQ0FnSUNCamIyNXpkQ0IyWVd4MVpVUmhkR0ZQWm1aelpYUWdQU0JoYkd4dlkxZGhjMjFUZEhKcGJtY29kbUZzZFdVc0lHRnNiRzlqY3lrN1hHNWNiaUFnSUNBZ0lDQWdhV1lnS0hkaGMyMHVYMDl5ZEVGa1pGTmxjM05wYjI1RGIyNW1hV2RGYm5SeWVTaHpaWE56YVc5dVQzQjBhVzl1YzBoaGJtUnNaU3dnYTJWNVJHRjBZVTltWm5ObGRDd2dkbUZzZFdWRVlYUmhUMlptYzJWMEtTQWhQVDBnTUNrZ2UxeHVJQ0FnSUNBZ0lDQWdJR05vWldOclRHRnpkRVZ5Y205eUtHQkRZVzRuZENCelpYUWdZU0J6WlhOemFXOXVJR052Ym1acFp5QmxiblJ5ZVRvZ0pIdHJaWGw5SUMwZ0pIdDJZV3gxWlgwdVlDazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDBwTzF4dUlDQWdJSDFjYmx4dUlDQWdJSEpsZEhWeWJpQmJjMlZ6YzJsdmJrOXdkR2x2Ym5OSVlXNWtiR1VzSUdGc2JHOWpjMTA3WEc0Z0lIMGdZMkYwWTJnZ0tHVXBJSHRjYmlBZ0lDQnBaaUFvYzJWemMybHZiazl3ZEdsdmJuTklZVzVrYkdVZ0lUMDlJREFwSUh0Y2JpQWdJQ0FnSUhkaGMyMHVYMDl5ZEZKbGJHVmhjMlZUWlhOemFXOXVUM0IwYVc5dWN5aHpaWE56YVc5dVQzQjBhVzl1YzBoaGJtUnNaU2s3WEc0Z0lDQWdmVnh1SUNBZ0lHRnNiRzlqY3k1bWIzSkZZV05vS0dGc2JHOWpJRDArSUhkaGMyMHVYMlp5WldVb1lXeHNiMk1wS1R0Y2JpQWdJQ0IwYUhKdmR5QmxPMXh1SUNCOVhHNTlPMXh1SWl3Z0lpOHZJRU52Y0hseWFXZG9kQ0FvWXlrZ1RXbGpjbTl6YjJaMElFTnZjbkJ2Y21GMGFXOXVMaUJCYkd3Z2NtbG5hSFJ6SUhKbGMyVnlkbVZrTGx4dUx5OGdUR2xqWlc1elpXUWdkVzVrWlhJZ2RHaGxJRTFKVkNCTWFXTmxibk5sTGx4dVhHNXBiWEJ2Y25RZ2UxUmxibk52Y24wZ1puSnZiU0FuYjI1dWVISjFiblJwYldVdFkyOXRiVzl1Snp0Y2JseHVMeThnWVNCa2RXMXRlU0IwZVhCbElHUmxZMnhoY21GMGFXOXVJR1p2Y2lCR2JHOWhkREUyUVhKeVlYa2dhVzRnWTJGelpTQmhibmtnY0c5c2VXWnBiR3dnYVhNZ1lYWmhhV3hoWW14bExseHVaR1ZqYkdGeVpTQm5iRzlpWVd3Z2UxeHVJQ0F2THlCbGMyeHBiblF0WkdsellXSnNaUzF1WlhoMExXeHBibVVnUUhSNWNHVnpZM0pwY0hRdFpYTnNhVzUwTDI1aGJXbHVaeTFqYjI1MlpXNTBhVzl1TENCQWRIbHdaWE5qY21sd2RDMWxjMnhwYm5RdmJtOHRaWGh3YkdsamFYUXRZVzU1WEc0Z0lHTnZibk4wSUVac2IyRjBNVFpCY25KaGVUb2dZVzU1TzF4dWZWeHVYRzR2THlCVWFHbHpJR1pwYkdVZ2FXNWpiSFZrWlhNZ1kyOXRiVzl1SUdSbFptbHVhWFJwYjI1ekxpQlVhR1Y1SUdSdklFNVBWQ0JvWVhabElHUmxjR1Z1WkdWdVkza2diMjRnZEdobElGZGxZa0Z6YzJWdFlteDVJR2x1YzNSaGJtTmxMbHh1WEc0dktpcGNiaUFxSUVOdmNHbGxaQ0JtY205dElFOU9UbGdnWkdWbWFXNXBkR2x2Ymk0Z1ZYTmxJSFJvYVhNZ2RHOGdaSEp2Y0NCa1pYQmxibVJsYm1ONUlDZHZibTU0WDNCeWIzUnZKeUIwYnlCa1pXTnlaV0Z6WlNCamIyMXdhV3hsWkNBdWFuTWdabWxzWlNCemFYcGxMbHh1SUNvdlhHNWxlSEJ2Y25RZ1kyOXVjM1FnWlc1MWJTQkVZWFJoVkhsd1pTQjdYRzRnSUhWdVpHVm1hVzVsWkNBOUlEQXNYRzRnSUdac2IyRjBJRDBnTVN4Y2JpQWdkV2x1ZERnZ1BTQXlMRnh1SUNCcGJuUTRJRDBnTXl4Y2JpQWdkV2x1ZERFMklEMGdOQ3hjYmlBZ2FXNTBNVFlnUFNBMUxGeHVJQ0JwYm5Rek1pQTlJRFlzWEc0Z0lHbHVkRFkwSUQwZ055eGNiaUFnYzNSeWFXNW5JRDBnT0N4Y2JpQWdZbTl2YkNBOUlEa3NYRzRnSUdac2IyRjBNVFlnUFNBeE1DeGNiaUFnWkc5MVlteGxJRDBnTVRFc1hHNGdJSFZwYm5Rek1pQTlJREV5TEZ4dUlDQjFhVzUwTmpRZ1BTQXhNeXhjYmlBZ1kyOXRjR3hsZURZMElEMGdNVFFzWEc0Z0lHTnZiWEJzWlhneE1qZ2dQU0F4TlN4Y2JpQWdZbVpzYjJGME1UWWdQU0F4Tmx4dWZWeHVYRzR2S2lwY2JpQXFJRTFoY0NCemRISnBibWNnZEdWdWMyOXlJR1JoZEdFZ2RHOGdaVzUxYlNCMllXeDFaVnh1SUNvdlhHNWxlSEJ2Y25RZ1kyOXVjM1FnZEdWdWMyOXlSR0YwWVZSNWNHVlRkSEpwYm1kVWIwVnVkVzBnUFNBb2RIbHdaVG9nYzNSeWFXNW5LVG9nUkdGMFlWUjVjR1VnUFQ0Z2UxeHVJQ0J6ZDJsMFkyZ2dLSFI1Y0dVcElIdGNiaUFnSUNCallYTmxJQ2RwYm5RNEp6cGNiaUFnSUNBZ0lISmxkSFZ5YmlCRVlYUmhWSGx3WlM1cGJuUTRPMXh1SUNBZ0lHTmhjMlVnSjNWcGJuUTRKenBjYmlBZ0lDQWdJSEpsZEhWeWJpQkVZWFJoVkhsd1pTNTFhVzUwT0R0Y2JpQWdJQ0JqWVhObElDZGliMjlzSnpwY2JpQWdJQ0FnSUhKbGRIVnliaUJFWVhSaFZIbHdaUzVpYjI5c08xeHVJQ0FnSUdOaGMyVWdKMmx1ZERFMkp6cGNiaUFnSUNBZ0lISmxkSFZ5YmlCRVlYUmhWSGx3WlM1cGJuUXhOanRjYmlBZ0lDQmpZWE5sSUNkMWFXNTBNVFluT2x4dUlDQWdJQ0FnY21WMGRYSnVJRVJoZEdGVWVYQmxMblZwYm5ReE5qdGNiaUFnSUNCallYTmxJQ2RwYm5Rek1pYzZYRzRnSUNBZ0lDQnlaWFIxY200Z1JHRjBZVlI1Y0dVdWFXNTBNekk3WEc0Z0lDQWdZMkZ6WlNBbmRXbHVkRE15SnpwY2JpQWdJQ0FnSUhKbGRIVnliaUJFWVhSaFZIbHdaUzUxYVc1ME16STdYRzRnSUNBZ1kyRnpaU0FuWm14dllYUXhOaWM2WEc0Z0lDQWdJQ0J5WlhSMWNtNGdSR0YwWVZSNWNHVXVabXh2WVhReE5qdGNiaUFnSUNCallYTmxJQ2RtYkc5aGRETXlKenBjYmlBZ0lDQWdJSEpsZEhWeWJpQkVZWFJoVkhsd1pTNW1iRzloZER0Y2JpQWdJQ0JqWVhObElDZG1iRzloZERZMEp6cGNiaUFnSUNBZ0lISmxkSFZ5YmlCRVlYUmhWSGx3WlM1a2IzVmliR1U3WEc0Z0lDQWdZMkZ6WlNBbmMzUnlhVzVuSnpwY2JpQWdJQ0FnSUhKbGRIVnliaUJFWVhSaFZIbHdaUzV6ZEhKcGJtYzdYRzRnSUNBZ1kyRnpaU0FuYVc1ME5qUW5PbHh1SUNBZ0lDQWdjbVYwZFhKdUlFUmhkR0ZVZVhCbExtbHVkRFkwTzF4dUlDQWdJR05oYzJVZ0ozVnBiblEyTkNjNlhHNGdJQ0FnSUNCeVpYUjFjbTRnUkdGMFlWUjVjR1V1ZFdsdWREWTBPMXh1WEc0Z0lDQWdaR1ZtWVhWc2REcGNiaUFnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2loZ2RXNXpkWEJ3YjNKMFpXUWdaR0YwWVNCMGVYQmxPaUFrZTNSNWNHVjlZQ2s3WEc0Z0lIMWNibjA3WEc1Y2JpOHFLbHh1SUNvZ1RXRndJR1Z1ZFcwZ2RtRnNkV1VnZEc4Z2MzUnlhVzVuSUhSbGJuTnZjaUJrWVhSaFhHNGdLaTljYm1WNGNHOXlkQ0JqYjI1emRDQjBaVzV6YjNKRVlYUmhWSGx3WlVWdWRXMVViMU4wY21sdVp5QTlJQ2gwZVhCbFVISnZkRzg2SUVSaGRHRlVlWEJsS1RvZ1ZHVnVjMjl5TGxSNWNHVWdQVDRnZTF4dUlDQnpkMmwwWTJnZ0tIUjVjR1ZRY205MGJ5a2dlMXh1SUNBZ0lHTmhjMlVnUkdGMFlWUjVjR1V1YVc1ME9EcGNiaUFnSUNBZ0lISmxkSFZ5YmlBbmFXNTBPQ2M3WEc0Z0lDQWdZMkZ6WlNCRVlYUmhWSGx3WlM1MWFXNTBPRHBjYmlBZ0lDQWdJSEpsZEhWeWJpQW5kV2x1ZERnbk8xeHVJQ0FnSUdOaGMyVWdSR0YwWVZSNWNHVXVZbTl2YkRwY2JpQWdJQ0FnSUhKbGRIVnliaUFuWW05dmJDYzdYRzRnSUNBZ1kyRnpaU0JFWVhSaFZIbHdaUzVwYm5ReE5qcGNiaUFnSUNBZ0lISmxkSFZ5YmlBbmFXNTBNVFluTzF4dUlDQWdJR05oYzJVZ1JHRjBZVlI1Y0dVdWRXbHVkREUyT2x4dUlDQWdJQ0FnY21WMGRYSnVJQ2QxYVc1ME1UWW5PMXh1SUNBZ0lHTmhjMlVnUkdGMFlWUjVjR1V1YVc1ME16STZYRzRnSUNBZ0lDQnlaWFIxY200Z0oybHVkRE15Snp0Y2JpQWdJQ0JqWVhObElFUmhkR0ZVZVhCbExuVnBiblF6TWpwY2JpQWdJQ0FnSUhKbGRIVnliaUFuZFdsdWRETXlKenRjYmlBZ0lDQmpZWE5sSUVSaGRHRlVlWEJsTG1ac2IyRjBNVFk2WEc0Z0lDQWdJQ0J5WlhSMWNtNGdKMlpzYjJGME1UWW5PMXh1SUNBZ0lHTmhjMlVnUkdGMFlWUjVjR1V1Wm14dllYUTZYRzRnSUNBZ0lDQnlaWFIxY200Z0oyWnNiMkYwTXpJbk8xeHVJQ0FnSUdOaGMyVWdSR0YwWVZSNWNHVXVaRzkxWW14bE9seHVJQ0FnSUNBZ2NtVjBkWEp1SUNkbWJHOWhkRFkwSnp0Y2JpQWdJQ0JqWVhObElFUmhkR0ZVZVhCbExuTjBjbWx1WnpwY2JpQWdJQ0FnSUhKbGRIVnliaUFuYzNSeWFXNW5KenRjYmlBZ0lDQmpZWE5sSUVSaGRHRlVlWEJsTG1sdWREWTBPbHh1SUNBZ0lDQWdjbVYwZFhKdUlDZHBiblEyTkNjN1hHNGdJQ0FnWTJGelpTQkVZWFJoVkhsd1pTNTFhVzUwTmpRNlhHNGdJQ0FnSUNCeVpYUjFjbTRnSjNWcGJuUTJOQ2M3WEc1Y2JpQWdJQ0JrWldaaGRXeDBPbHh1SUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtHQjFibk4xY0hCdmNuUmxaQ0JrWVhSaElIUjVjR1U2SUNSN2RIbHdaVkJ5YjNSdmZXQXBPMXh1SUNCOVhHNTlPMXh1WEc0dktpcGNiaUFxSUdkbGRDQjBaVzV6YjNJZ1pXeGxiV1Z1ZENCemFYcGxJR2x1SUdKNWRHVnpJR0o1SUhSb1pTQm5hWFpsYmlCa1lYUmhJSFI1Y0dWY2JpQXFJRUJ5WlhSMWNtNXpJSE5wZW1VZ2FXNGdhVzUwWldkbGNpQnZjaUIxYm1SbFptbHVaV1FnYVdZZ2RHaGxJR1JoZEdFZ2RIbHdaU0JwY3lCdWIzUWdjM1Z3Y0c5eWRHVmtYRzRnS2k5Y2JtVjRjRzl5ZENCamIyNXpkQ0JuWlhSVVpXNXpiM0pGYkdWdFpXNTBVMmw2WlNBOUlDaGtZWFJsVkhsd1pUb2diblZ0WW1WeUtUb2diblZ0WW1WeWZGeHVJQ0FnSUhWdVpHVm1hVzVsWkNBOVBpQmJkVzVrWldacGJtVmtMQ0EwTENBeExDQXhMQ0F5TENBeUxDQTBMQ0E0TENCMWJtUmxabWx1WldRc0lERXNJRElzSURnc0lEUXNJRGdzSUhWdVpHVm1hVzVsWkN3Z2RXNWtaV1pwYm1Wa0xDQjFibVJsWm1sdVpXUmRXMlJoZEdWVWVYQmxYVHRjYmx4dUx5b3FYRzRnS2lCblpYUWdkSGx3WldRZ1lYSnlZWGtnWTI5dWMzUnlkV04wYjNJZ1lua2dkR2hsSUdkcGRtVnVJSFJsYm5OdmNpQjBlWEJsWEc0Z0tpOWNibVY0Y0c5eWRDQmpiMjV6ZENCMFpXNXpiM0pVZVhCbFZHOVVlWEJsWkVGeWNtRjVRMjl1YzNSeWRXTjBiM0lnUFNBb2RIbHdaVG9nVkdWdWMyOXlMbFI1Y0dVcE9pQkdiRzloZERNeVFYSnlZWGxEYjI1emRISjFZM1J2Y254VmFXNTBPRUZ5Y21GNVEyOXVjM1J5ZFdOMGIzSjhYRzRnSUNBZ1NXNTBPRUZ5Y21GNVEyOXVjM1J5ZFdOMGIzSjhWV2x1ZERFMlFYSnlZWGxEYjI1emRISjFZM1J2Y254SmJuUXhOa0Z5Y21GNVEyOXVjM1J5ZFdOMGIzSjhTVzUwTXpKQmNuSmhlVU52Ym5OMGNuVmpkRzl5ZkVKcFowbHVkRFkwUVhKeVlYbERiMjV6ZEhKMVkzUnZjbnhjYmlBZ0lDQlZhVzUwT0VGeWNtRjVRMjl1YzNSeWRXTjBiM0o4Um14dllYUTJORUZ5Y21GNVEyOXVjM1J5ZFdOMGIzSjhWV2x1ZERNeVFYSnlZWGxEYjI1emRISjFZM1J2Y254Q2FXZFZhVzUwTmpSQmNuSmhlVU52Ym5OMGNuVmpkRzl5SUQwK0lIdGNiaUFnSUNBZ0lITjNhWFJqYUNBb2RIbHdaU2tnZTF4dUlDQWdJQ0FnSUNCallYTmxJQ2RtYkc5aGRERTJKenBjYmlBZ0lDQWdJQ0FnSUNBdkx5QmhiR3h2ZHlCR2JHOWhkREUyUVhKeVlYa2djRzlzZVdacGJHd3VYRzRnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFI1Y0dWdlppQkdiRzloZERFMlFYSnlZWGtnSVQwOUlDZDFibVJsWm1sdVpXUW5JQ1ltSUVac2IyRjBNVFpCY25KaGVTNW1jbTl0SUQ4Z1JteHZZWFF4TmtGeWNtRjVJRG9nVldsdWRERTJRWEp5WVhrN1hHNGdJQ0FnSUNBZ0lHTmhjMlVnSjJac2IyRjBNekluT2x4dUlDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCR2JHOWhkRE15UVhKeVlYazdYRzRnSUNBZ0lDQWdJR05oYzJVZ0ozVnBiblE0SnpwY2JpQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1ZXbHVkRGhCY25KaGVUdGNiaUFnSUNBZ0lDQWdZMkZ6WlNBbmFXNTBPQ2M2WEc0Z0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUVsdWREaEJjbkpoZVR0Y2JpQWdJQ0FnSUNBZ1kyRnpaU0FuZFdsdWRERTJKenBjYmlBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnVldsdWRERTJRWEp5WVhrN1hHNGdJQ0FnSUNBZ0lHTmhjMlVnSjJsdWRERTJKenBjYmlBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnU1c1ME1UWkJjbkpoZVR0Y2JpQWdJQ0FnSUNBZ1kyRnpaU0FuYVc1ME16SW5PbHh1SUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJKYm5Rek1rRnljbUY1TzF4dUlDQWdJQ0FnSUNCallYTmxJQ2RpYjI5c0p6cGNiaUFnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdWV2x1ZERoQmNuSmhlVHRjYmlBZ0lDQWdJQ0FnWTJGelpTQW5abXh2WVhRMk5DYzZYRzRnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRVpzYjJGME5qUkJjbkpoZVR0Y2JpQWdJQ0FnSUNBZ1kyRnpaU0FuZFdsdWRETXlKenBjYmlBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnVldsdWRETXlRWEp5WVhrN1hHNGdJQ0FnSUNBZ0lHTmhjMlVnSjJsdWREWTBKenBjYmlBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnUW1sblNXNTBOalJCY25KaGVUdGNiaUFnSUNBZ0lDQWdZMkZ6WlNBbmRXbHVkRFkwSnpwY2JpQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1FtbG5WV2x1ZERZMFFYSnlZWGs3WEc0Z0lDQWdJQ0FnSUdSbFptRjFiSFE2WEc0Z0lDQWdJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0dCMWJuTjFjSEJ2Y25SbFpDQjBlWEJsT2lBa2UzUjVjR1Y5WUNrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlR0Y2JseHVMeW9xWEc0Z0tpQk5ZWEFnYzNSeWFXNW5JR3h2WnlCc1pYWmxiQ0IwYnlCcGJuUmxaMlZ5SUhaaGJIVmxYRzRnS2k5Y2JtVjRjRzl5ZENCamIyNXpkQ0JzYjJkTVpYWmxiRk4wY21sdVoxUnZSVzUxYlNBOUlDaHNiMmRNWlhabGJEODZJQ2QyWlhKaWIzTmxKM3duYVc1bWJ5ZDhKM2RoY201cGJtY25mQ2RsY25KdmNpZDhKMlpoZEdGc0p5azZJRzUxYldKbGNpQTlQaUI3WEc0Z0lITjNhWFJqYUNBb2JHOW5UR1YyWld3cElIdGNiaUFnSUNCallYTmxJQ2QyWlhKaWIzTmxKenBjYmlBZ0lDQWdJSEpsZEhWeWJpQXdPMXh1SUNBZ0lHTmhjMlVnSjJsdVptOG5PbHh1SUNBZ0lDQWdjbVYwZFhKdUlERTdYRzRnSUNBZ1kyRnpaU0FuZDJGeWJtbHVaeWM2WEc0Z0lDQWdJQ0J5WlhSMWNtNGdNanRjYmlBZ0lDQmpZWE5sSUNkbGNuSnZjaWM2WEc0Z0lDQWdJQ0J5WlhSMWNtNGdNenRjYmlBZ0lDQmpZWE5sSUNkbVlYUmhiQ2M2WEc0Z0lDQWdJQ0J5WlhSMWNtNGdORHRjYmlBZ0lDQmtaV1poZFd4ME9seHVJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0dCMWJuTjFjSEJ2Y25SbFpDQnNiMmRuYVc1bklHeGxkbVZzT2lBa2UyeHZaMHhsZG1Wc2ZXQXBPMXh1SUNCOVhHNTlPMXh1WEc0dktpcGNiaUFxSUVOb1pXTnJJSGRvWlhSb1pYSWdkR2hsSUdkcGRtVnVJSFJsYm5OdmNpQjBlWEJsSUdseklITjFjSEJ2Y25SbFpDQmllU0JIVUZVZ1luVm1abVZ5WEc0Z0tpOWNibVY0Y0c5eWRDQmpiMjV6ZENCcGMwZHdkVUoxWm1abGNsTjFjSEJ2Y25SbFpGUjVjR1VnUFNBb2RIbHdaVG9nVkdWdWMyOXlMbFI1Y0dVcE9pQjBlWEJsSUdseklGUmxibk52Y2k1SGNIVkNkV1ptWlhKRVlYUmhWSGx3WlhNZ1BUNGdkSGx3WlNBOVBUMGdKMlpzYjJGME16SW5JSHg4WEc0Z0lDQWdkSGx3WlNBOVBUMGdKMlpzYjJGME1UWW5JSHg4SUhSNWNHVWdQVDA5SUNkcGJuUXpNaWNnZkh3Z2RIbHdaU0E5UFQwZ0oybHVkRFkwSnlCOGZDQjBlWEJsSUQwOVBTQW5kV2x1ZERNeUp5QjhmQ0IwZVhCbElEMDlQU0FuZFdsdWREZ25JSHg4WEc0Z0lDQWdkSGx3WlNBOVBUMGdKMkp2YjJ3bk8xeHVYRzR2S2lwY2JpQXFJRTFoY0NCemRISnBibWNnWkdGMFlTQnNiMk5oZEdsdmJpQjBieUJwYm5SbFoyVnlJSFpoYkhWbFhHNGdLaTljYm1WNGNHOXlkQ0JqYjI1emRDQmtZWFJoVEc5allYUnBiMjVUZEhKcGJtZFViMFZ1ZFcwZ1BTQW9iRzlqWVhScGIyNDZJRlJsYm5OdmNpNUVZWFJoVEc5allYUnBiMjRwT2lCdWRXMWlaWElnUFQ0Z2UxeHVJQ0J6ZDJsMFkyZ2dLR3h2WTJGMGFXOXVLU0I3WEc0Z0lDQWdZMkZ6WlNBbmJtOXVaU2M2WEc0Z0lDQWdJQ0J5WlhSMWNtNGdNRHRjYmlBZ0lDQmpZWE5sSUNkamNIVW5PbHh1SUNBZ0lDQWdjbVYwZFhKdUlERTdYRzRnSUNBZ1kyRnpaU0FuWTNCMUxYQnBibTVsWkNjNlhHNGdJQ0FnSUNCeVpYUjFjbTRnTWp0Y2JpQWdJQ0JqWVhObElDZDBaWGgwZFhKbEp6cGNiaUFnSUNBZ0lISmxkSFZ5YmlBek8xeHVJQ0FnSUdOaGMyVWdKMmR3ZFMxaWRXWm1aWEluT2x4dUlDQWdJQ0FnY21WMGRYSnVJRFE3WEc0Z0lDQWdaR1ZtWVhWc2REcGNiaUFnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2loZ2RXNXpkWEJ3YjNKMFpXUWdaR0YwWVNCc2IyTmhkR2x2YmpvZ0pIdHNiMk5oZEdsdmJuMWdLVHRjYmlBZ2ZWeHVmVHRjYmx4dUx5b3FYRzRnS2lCTllYQWdhVzUwWldkbGNpQmtZWFJoSUd4dlkyRjBhVzl1SUhSdklITjBjbWx1WnlCMllXeDFaVnh1SUNvdlhHNWxlSEJ2Y25RZ1kyOXVjM1FnWkdGMFlVeHZZMkYwYVc5dVJXNTFiVlJ2VTNSeWFXNW5JRDBnS0d4dlkyRjBhVzl1T2lCdWRXMWlaWElwT2lCVVpXNXpiM0l1UkdGMFlVeHZZMkYwYVc5dWZIVnVaR1ZtYVc1bFpDQTlQbHh1SUNBZ0lDaGJKMjV2Ym1VbkxDQW5ZM0IxSnl3Z0oyTndkUzF3YVc1dVpXUW5MQ0FuZEdWNGRIVnlaU2NzSUNkbmNIVXRZblZtWm1WeUoxMGdZWE1nWTI5dWMzUXBXMnh2WTJGMGFXOXVYVHRjYmlJc0lDSXZMeUJEYjNCNWNtbG5hSFFnS0dNcElFMXBZM0p2YzI5bWRDQkRiM0p3YjNKaGRHbHZiaTRnUVd4c0lISnBaMmgwY3lCeVpYTmxjblpsWkM1Y2JpOHZJRXhwWTJWdWMyVmtJSFZ1WkdWeUlIUm9aU0JOU1ZRZ1RHbGpaVzV6WlM1Y2JseHVhVzF3YjNKMElDb2dZWE1nWm5NZ1puSnZiU0FuWm5Nbk8xeHVhVzF3YjNKMElIdHlaV0ZrUm1sc1pYMGdabkp2YlNBbmJtOWtaVHBtY3k5d2NtOXRhWE5sY3ljN1hHNWNiaThxS2x4dUlDb2dURzloWkNCaElHWnBiR1VnYVc1MGJ5QmhJRlZwYm5RNFFYSnlZWGt1WEc0Z0tseHVJQ29nUUhCaGNtRnRJR1pwYkdVZ0xTQjBhR1VnWm1sc1pTQjBieUJzYjJGa0xpQkRZVzRnWW1VZ1lTQlZVa3d2Y0dGMGFDd2dZU0JDYkc5aUxDQmhiaUJCY25KaGVVSjFabVpsY2l3Z2IzSWdZU0JWYVc1ME9FRnljbUY1TGx4dUlDb2dRSEpsZEhWeWJuTWdZU0JWYVc1ME9FRnljbUY1SUdOdmJuUmhhVzVwYm1jZ2RHaGxJR1pwYkdVZ1pHRjBZUzVjYmlBcUwxeHVaWGh3YjNKMElHTnZibk4wSUd4dllXUkdhV3hsSUQwZ1lYTjVibU1vWm1sc1pUb2djM1J5YVc1bmZFSnNiMko4UVhKeVlYbENkV1ptWlhKTWFXdGxmRlZwYm5RNFFYSnlZWGtwT2lCUWNtOXRhWE5sUEZWcGJuUTRRWEp5WVhrK0lEMCtJSHRjYmlBZ2FXWWdLSFI1Y0dWdlppQm1hV3hsSUQwOVBTQW5jM1J5YVc1bkp5a2dlMXh1SUNBZ0lHbG1JQ2gwZVhCbGIyWWdjSEp2WTJWemN5QWhQVDBnSjNWdVpHVm1hVzVsWkNjZ0ppWWdjSEp2WTJWemN5NTJaWEp6YVc5dWN5QW1KaUJ3Y205alpYTnpMblpsY25OcGIyNXpMbTV2WkdVcElIdGNiaUFnSUNBZ0lDOHZJR3h2WVdRZ1ptbHNaU0JwYm5SdklFRnljbUY1UW5WbVptVnlJR2x1SUU1dlpHVXVhbk5jYmlBZ0lDQWdJSFJ5ZVNCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCdVpYY2dWV2x1ZERoQmNuSmhlU2hoZDJGcGRDQnlaV0ZrUm1sc1pTaG1hV3hsS1NrN1hHNGdJQ0FnSUNCOUlHTmhkR05vSUNobEtTQjdYRzRnSUNBZ0lDQWdJR2xtSUNobExtTnZaR1VnUFQwOUlDZEZVbEpmUmxOZlJrbE1SVjlVVDA5ZlRFRlNSMFVuS1NCN1hHNGdJQ0FnSUNBZ0lDQWdMeThnWm1sc1pTQnBjeUIwYjI4Z2JHRnlaMlVzSUhWelpTQm1jeTVqY21WaGRHVlNaV0ZrVTNSeVpXRnRJR2x1YzNSbFlXUmNiaUFnSUNBZ0lDQWdJQ0JqYjI1emRDQnpkSEpsWVcwZ1BTQm1jeTVqY21WaGRHVlNaV0ZrVTNSeVpXRnRLR1pwYkdVcE8xeHVJQ0FnSUNBZ0lDQWdJR052Ym5OMElHTm9kVzVyY3pvZ1ZXbHVkRGhCY25KaGVWdGRJRDBnVzEwN1hHNGdJQ0FnSUNBZ0lDQWdabTl5SUdGM1lXbDBJQ2hqYjI1emRDQmphSFZ1YXlCdlppQnpkSEpsWVcwcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOb2RXNXJjeTV3ZFhOb0tHTm9kVzVyS1R0Y2JpQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRzVsZHlCVmFXNTBPRUZ5Y21GNUtFSjFabVpsY2k1amIyNWpZWFFvWTJoMWJtdHpLU2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2RHaHliM2NnWlR0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdMeThnYkc5aFpDQm1hV3hsSUdsdWRHOGdRWEp5WVhsQ2RXWm1aWElnYVc0Z1luSnZkM05sY25OY2JpQWdJQ0FnSUdOdmJuTjBJSEpsYzNCdmJuTmxJRDBnWVhkaGFYUWdabVYwWTJnb1ptbHNaU2s3WEc0Z0lDQWdJQ0JwWmlBb0lYSmxjM0J2Ym5ObExtOXJLU0I3WEc0Z0lDQWdJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWhnWm1GcGJHVmtJSFJ2SUd4dllXUWdaWGgwWlhKdVlXd2daR0YwWVNCbWFXeGxPaUFrZTJacGJHVjlZQ2s3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0JqYjI1emRDQmpiMjUwWlc1MFRHVnVaM1JvU0dWaFpHVnlJRDBnY21WemNHOXVjMlV1YUdWaFpHVnljeTVuWlhRb0owTnZiblJsYm5RdFRHVnVaM1JvSnlrN1hHNGdJQ0FnSUNCamIyNXpkQ0JtYVd4bFUybDZaU0E5SUdOdmJuUmxiblJNWlc1bmRHaElaV0ZrWlhJZ1B5QndZWEp6WlVsdWRDaGpiMjUwWlc1MFRHVnVaM1JvU0dWaFpHVnlMQ0F4TUNrZ09pQXdPMXh1SUNBZ0lDQWdhV1lnS0dacGJHVlRhWHBsSUR3Z01UQTNNemMwTVRneU5DQXZLaUF4UjBJZ0tpOHBJSHRjYmlBZ0lDQWdJQ0FnTHk4Z2QyaGxiaUJEYjI1MFpXNTBMVXhsYm1kMGFDQm9aV0ZrWlhJZ2FYTWdibTkwSUhObGRDd2dkMlVnWTJGdWJtOTBJR1JsZEdWeWJXbHVaU0IwYUdVZ1ptbHNaU0J6YVhwbExpQlhaU0JoYzNOMWJXVWdhWFFnYVhNZ2MyMWhiR3dnWlc1dmRXZG9JSFJ2WEc0Z0lDQWdJQ0FnSUM4dklHeHZZV1FnYVc1MGJ5QnRaVzF2Y25rdVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCdVpYY2dWV2x1ZERoQmNuSmhlU2hoZDJGcGRDQnlaWE53YjI1elpTNWhjbkpoZVVKMVptWmxjaWdwS1R0Y2JpQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUM4dklHWnBiR1VnYVhNZ2RHOXZJR3hoY21kbExDQjFjMlVnYzNSeVpXRnRJR2x1YzNSbFlXUmNiaUFnSUNBZ0lDQWdhV1lnS0NGeVpYTndiMjV6WlM1aWIyUjVLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0dCbVlXbHNaV1FnZEc4Z2JHOWhaQ0JsZUhSbGNtNWhiQ0JrWVhSaElHWnBiR1U2SUNSN1ptbHNaWDBzSUc1dklISmxjM0J2Ym5ObElHSnZaSGt1WUNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2NtVmhaR1Z5SUQwZ2NtVnpjRzl1YzJVdVltOWtlUzVuWlhSU1pXRmtaWElvS1R0Y2JseHVJQ0FnSUNBZ0lDQnNaWFFnWW5WbVptVnlPMXh1SUNBZ0lDQWdJQ0IwY25rZ2UxeHVJQ0FnSUNBZ0lDQWdJQzh2SUhSeWVTQjBieUJqY21WaGRHVWdRWEp5WVhsQ2RXWm1aWElnWkdseVpXTjBiSGxjYmlBZ0lDQWdJQ0FnSUNCaWRXWm1aWElnUFNCdVpYY2dRWEp5WVhsQ2RXWm1aWElvWm1sc1pWTnBlbVVwTzF4dUlDQWdJQ0FnSUNCOUlHTmhkR05vSUNobEtTQjdYRzRnSUNBZ0lDQWdJQ0FnYVdZZ0tHVWdhVzV6ZEdGdVkyVnZaaUJTWVc1blpVVnljbTl5S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCMWMyVWdWMlZpUVhOelpXMWliSGtnVFdWdGIzSjVJSFJ2SUdGc2JHOWpZWFJsSUd4aGNtZGxjaUJCY25KaGVVSjFabVpsY2x4dUlDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2NHRm5aWE1nUFNCTllYUm9MbU5sYVd3b1ptbHNaVk5wZW1VZ0x5QTJOVFV6TmlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JpZFdabVpYSWdQU0J1WlhjZ1YyVmlRWE56WlcxaWJIa3VUV1Z0YjNKNUtIdHBibWwwYVdGc09pQndZV2RsY3l3Z2JXRjRhVzExYlRvZ2NHRm5aWE45S1M1aWRXWm1aWEk3WEc0Z0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvY205M0lHVTdYRzRnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdiR1YwSUc5bVpuTmxkQ0E5SURBN1hHNGdJQ0FnSUNBZ0lDOHZJR1Z6YkdsdWRDMWthWE5oWW14bExXNWxlSFF0YkdsdVpTQnVieTFqYjI1emRHRnVkQzFqYjI1a2FYUnBiMjVjYmlBZ0lDQWdJQ0FnZDJocGJHVWdLSFJ5ZFdVcElIdGNiaUFnSUNBZ0lDQWdJQ0JqYjI1emRDQjdaRzl1WlN3Z2RtRnNkV1Y5SUQwZ1lYZGhhWFFnY21WaFpHVnlMbkpsWVdRb0tUdGNiaUFnSUNBZ0lDQWdJQ0JwWmlBb1pHOXVaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN1hHNGdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUdOdmJuTjBJR05vZFc1clUybDZaU0E5SUhaaGJIVmxMbUo1ZEdWTVpXNW5kR2c3WEc0Z0lDQWdJQ0FnSUNBZ1kyOXVjM1FnWTJoMWJtc2dQU0J1WlhjZ1ZXbHVkRGhCY25KaGVTaGlkV1ptWlhJc0lHOW1abk5sZEN3Z1kyaDFibXRUYVhwbEtUdGNiaUFnSUNBZ0lDQWdJQ0JqYUhWdWF5NXpaWFFvZG1Gc2RXVXBPMXh1SUNBZ0lDQWdJQ0FnSUc5bVpuTmxkQ0FyUFNCamFIVnVhMU5wZW1VN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHNWxkeUJWYVc1ME9FRnljbUY1S0dKMVptWmxjaXdnTUN3Z1ptbHNaVk5wZW1VcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0I5SUdWc2MyVWdhV1lnS0dacGJHVWdhVzV6ZEdGdVkyVnZaaUJDYkc5aUtTQjdYRzRnSUNBZ2NtVjBkWEp1SUc1bGR5QlZhVzUwT0VGeWNtRjVLR0YzWVdsMElHWnBiR1V1WVhKeVlYbENkV1ptWlhJb0tTazdYRzRnSUgwZ1pXeHpaU0JwWmlBb1ptbHNaU0JwYm5OMFlXNWpaVzltSUZWcGJuUTRRWEp5WVhrcElIdGNiaUFnSUNCeVpYUjFjbTRnWm1sc1pUdGNiaUFnZlNCbGJITmxJSHRjYmlBZ0lDQnlaWFIxY200Z2JtVjNJRlZwYm5RNFFYSnlZWGtvWm1sc1pTazdYRzRnSUgxY2JuMDdYRzRpTENBaVpYaHdiM0owSUdOdmJuTjBJSEpsWVdSR2FXeGxJRDBnZFc1a1pXWnBibVZrTzJWNGNHOXlkQ0JqYjI1emRDQnlaV0ZrUm1sc1pWTjVibU1nUFNCMWJtUmxabWx1WldRN1pYaHdiM0owSUdOdmJuTjBJR055WldGMFpWSmxZV1JUZEhKbFlXMGdQU0IxYm1SbFptbHVaV1E3SWl3Z0lpOHZJRU52Y0hseWFXZG9kQ0FvWXlrZ1RXbGpjbTl6YjJaMElFTnZjbkJ2Y21GMGFXOXVMaUJCYkd3Z2NtbG5hSFJ6SUhKbGMyVnlkbVZrTGx4dUx5OGdUR2xqWlc1elpXUWdkVzVrWlhJZ2RHaGxJRTFKVkNCTWFXTmxibk5sTGx4dVhHNXBiWEJ2Y25RZ2UwVnVkaXdnU1c1bVpYSmxibU5sVTJWemMybHZiaXdnVkdWdWMyOXlmU0JtY205dElDZHZibTU0Y25WdWRHbHRaUzFqYjIxdGIyNG5PMXh1WEc1cGJYQnZjblFnZTFObGNtbGhiR2w2WVdKc1pVbHVkR1Z5Ym1Gc1FuVm1abVZ5TENCVFpYSnBZV3hwZW1GaWJHVlRaWE56YVc5dVRXVjBZV1JoZEdFc0lGTmxjbWxoYkdsNllXSnNaVlJsYm5OdmNrMWxkR0ZrWVhSaExDQlVaVzV6YjNKTlpYUmhaR0YwWVgwZ1puSnZiU0FuTGk5d2NtOTRlUzF0WlhOellXZGxjeWM3WEc1cGJYQnZjblFnZTNObGRGSjFiazl3ZEdsdmJuTjlJR1p5YjIwZ0p5NHZjblZ1TFc5d2RHbHZibk1uTzF4dWFXMXdiM0owSUh0elpYUlRaWE56YVc5dVQzQjBhVzl1YzMwZ1puSnZiU0FuTGk5elpYTnphVzl1TFc5d2RHbHZibk1uTzF4dWFXMXdiM0owSUh0a1lYUmhURzlqWVhScGIyNVRkSEpwYm1kVWIwVnVkVzBzSUdkbGRGUmxibk52Y2tWc1pXMWxiblJUYVhwbExDQnBjMGR3ZFVKMVptWmxjbE4xY0hCdmNuUmxaRlI1Y0dVc0lHeHZaMHhsZG1Wc1UzUnlhVzVuVkc5RmJuVnRMQ0IwWlc1emIzSkVZWFJoVkhsd1pVVnVkVzFVYjFOMGNtbHVaeXdnZEdWdWMyOXlSR0YwWVZSNWNHVlRkSEpwYm1kVWIwVnVkVzBzSUhSbGJuTnZjbFI1Y0dWVWIxUjVjR1ZrUVhKeVlYbERiMjV6ZEhKMVkzUnZjbjBnWm5KdmJTQW5MaTkzWVhOdExXTnZiVzF2YmljN1hHNXBiWEJ2Y25RZ2UyZGxkRWx1YzNSaGJtTmxmU0JtY205dElDY3VMM2RoYzIwdFptRmpkRzl5ZVNjN1hHNXBiWEJ2Y25RZ2UyRnNiRzlqVjJGemJWTjBjbWx1Wnl3Z1kyaGxZMnRNWVhOMFJYSnliM0o5SUdaeWIyMGdKeTR2ZDJGemJTMTFkR2xzY3ljN1hHNXBiWEJ2Y25RZ2UyeHZZV1JHYVd4bGZTQm1jbTl0SUNjdUwzZGhjMjB0ZFhScGJITXRiRzloWkMxbWFXeGxKenRjYmx4dUx5OGdJM0psWjJsdmJpQkpibWwwYVdGc2FYcGhkR2x2Ym5OY2JseHVMeW9xWEc0Z0tpQlVhR1Z5WlNCaGNtVWdOQ0JrYVdabVpYSmxiblFnWENKcGJtbDBhV0ZzYVhwaGRHbHZibHdpSUhOMFpYQnpJR1p2Y2lCUFVsUXVJRlJvWlhrZ2FHRndjR1Z1SUdsdUlHUnBabVpsY21WdWRDQndiR0ZqWlhNZ1lXNWtJR1JwWm1abGNtVnVkQ0IwYVcxbExseHVJQ3BjYmlBcUlERXVJRXBoZG1GVFkzSnBjSFFnYVc1cGRHbGhiR2w2WVhScGIyNGdabTl5SUc5dWJuaHlkVzUwYVcxbExXTnZiVzF2YmlCaGJtUWdiMjV1ZUhKMWJuUnBiV1V0ZDJWaUxseHVJQ29nSUNBZ1ZHaHBjeUJwY3lCMGFHVWdabWx5YzNRZ2FXNXBkR2xoYkdsNllYUnBiMjRnYzNSbGNDNGdTVzRnZEdocGN5QnpkR1Z3TENCdmJtNTRjblZ1ZEdsdFpTMTNaV0lnWTJGc2JITWdiMjV1ZUhKMWJuUnBiV1V0WTI5dGJXOXVKM01nY21WbmFYTjBaWEpDWVdOclpXNWtLQ2xjYmlBcUlHWjFibU4wYVc5dUlHMTFiSFJwY0d4bElIUnBiV1Z6SUhSdklISmxaMmx6ZEdWeUlHRnNiQ0IwYUdVZ1lYWmhhV3hoWW14bElHSmhZMnRsYm1SekxpQlVhR1VnWW1GamEyVnVaQ0J5WldkcGMzUnlZWFJwYjI0Z2FYTWdkbVZ5ZVNCbVlYTjBMaUJKZENCdmJteDVYRzRnS2lCeVpXZHBjM1JsY25NZ2RHaGxJR0poWTJ0bGJtUWdibUZ0WlNCM2FYUm9JSFJvWlNCMWJtbHVhWFJwWVd4cGVtVmtJR0poWTJ0bGJtUWdiMkpxWldOMExpQk9ieUJvWldGMmVTQnBibWwwYVdGc2FYcGhkR2x2YmlCcGN5QmtiMjVsSUdsdUlIUm9hWE1nYzNSbGNDNWNiaUFxSUNBZ0lGSmxabVZ5SUhSdklIZGxZaTlzYVdJdmFXNWtaWGd1ZEhNZ1ptOXlJSFJvWlNCaVlXTnJaVzVrSUhKbFoybHpkSEpoZEdsdmJpNWNiaUFxWEc0Z0tpQXlMaUJYWldKQmMzTmxiV0pzZVNCaGNuUnBabUZqZENCcGJtbDBhV0ZzYVhwaGRHbHZiaTVjYmlBcUlDQWdJRlJvYVhNZ2FHRndjR1Z1Y3lCM2FHVnVJR0Z1ZVNCeVpXZHBjM1JsY21Wa0lIZGhjMjBnWW1GamEyVnVaQ0JwY3lCMWMyVmtJR1p2Y2lCMGFHVWdabWx5YzNRZ2RHbHRaU0FvYVdVdUlHQnZjblF1U1c1bVpYSmxibU5sVTJWemMybHZiaTVqY21WaGRHVW9LV0FnYjNKY2JpQXFJR0J2Y25RdVZISmhhVzVwYm1kVFpYTnphVzl1TG1OeVpXRjBaU2dwWUNCcGN5QmpZV3hzWldRcExpQkpiaUIwYUdseklITjBaWEFzSUc5dWJuaHlkVzUwYVcxbExYZGxZaUJrYjJWeklIUm9aU0JtYjJ4c2IzZHBibWR6T2x4dUlDb2dJQ0FnSUMwZ1kzSmxZWFJsSUdFZ2NISnZlSGtnZDI5eWEyVnlJR0Z1WkNCdFlXdGxJSE4xY21VZ2RHaGxJSEJ5YjNoNUlIZHZjbXRsY2lCcGN5QnlaV0ZrZVNCMGJ5QnlaV05sYVhabElHMWxjM05oWjJWekxDQnBaaUJ3Y205NGVTQnBjeUJsYm1GaWJHVmtMbHh1SUNvZ0lDQWdJQzBnY0dWeVptOXliU0JtWldGMGRYSmxJR1JsZEdWamRHbHZiaXdnYkc5allYUmxJR052Y25KbFkzUWdWMlZpUVhOelpXMWliSGtnWVhKMGFXWmhZM1FnY0dGMGFDQmhibVFnWTJGc2JDQjBhR1VnUlcxelkzSnBjSFJsYmlCblpXNWxjbUYwWldSY2JpQXFJRXBoZG1GVFkzSnBjSFFnWTI5a1pTQjBieUJwYm1sMGFXRnNhWHBsSUhSb1pTQlhaV0pCYzNObGJXSnNlU0J5ZFc1MGFXMWxMbHh1SUNvZ0lDQWdJQ0FnSUNBdElHbG1JSEJ5YjNoNUlHbHpJR1Z1WVdKc1pXUXNJSFJvYVhNZ2MzUmxjQ0JvWVhCd1pXNXpJR2x1SUhSb1pTQndjbTk0ZVNCM2IzSnJaWElnZFhOcGJtY2diV1Z6YzJGblpTQW5hVzVwZEMxM1lYTnRKeTVjYmlBcUlDQWdJQ0FnSUNBZ0xTQmtiM2R1Ykc5aFpHbHVaeUIwYUdVZ0oyOXlkQzEzWVhOdGV5NHVMbjB1ZDJGemJTY2dabWxzWlNCcGN5QmtiMjVsSUdsdUlIUm9hWE1nYzNSbGNDNWNiaUFxSUNBZ0lDQWdJQ0FnTFNCcFppQnRkV3gwYVMxMGFISmxZV1FnYVhNZ1pXNWhZbXhsWkN3Z2IyNWxJRzl5SUcxdmNtVWdkMlZpZDI5eWEyVnlJSGRwYkd3Z1ltVWdZM0psWVhSbFpDQjBieUJwYm1sMGFXRnNhWHBsSUhSb1pTQlFWR2h5WldGa0lIUm9jbVZoWkhCdmIyd3VYRzRnS2x4dUlDb2dNeTRnVDFKVUlHVnVkbWx5YjI1dFpXNTBJR2x1YVhScFlXeHBlbUYwYVc5dUxseHVJQ29nSUNBZ1ZHaHBjeUJvWVhCd1pXNXpJR0ZtZEdWeUlITjBaWEFnTWk0Z1NXNGdkR2hwY3lCemRHVndMQ0J2Ym01NGNuVnVkR2x0WlMxM1pXSWdjR1Z5Wm05eWJYTWdUMDVPV0NCU2RXNTBhVzFsSUdWdWRtbHliMjV0Wlc1MElHbHVhWFJwWVd4cGVtRjBhVzl1TGx4dUlDb2dSblZ1WTNScGIyNGdZRjlQY25SSmJtbDBLQ2xnSUdseklHTmhiR3hsWkNCcGJpQjBhR2x6SUhOMFpYQXVYRzRnS2lBZ0lDQWdMU0JwWmlCd2NtOTRlU0JwY3lCbGJtRmliR1ZrTENCMGFHbHpJSE4wWlhBZ2FHRndjR1Z1Y3lCcGJpQjBhR1VnY0hKdmVIa2dkMjl5YTJWeUlIVnphVzVuSUcxbGMzTmhaMlVnSjJsdWFYUXRiM0owSnk1Y2JpQXFJQ0FnSUNBdElHeHZaMmRwYm1jZ2JHVjJaV3dnS0c5eWRDNWxibll1Ykc5blRHVjJaV3dwSUdGdVpDQjBhSEpsWVdRZ2JuVnRZbVZ5SUNodmNuUXVaVzUyTG5kaGMyMHViblZ0VkdoeVpXRmtjeWtnWVhKbElITmxkQ0JwYmlCMGFHbHpJSE4wWlhBdVhHNGdLbHh1SUNvZ05DNGdVMlZ6YzJsdmJpQnBibWwwYVdGc2FYcGhkR2x2Ymk1Y2JpQXFJQ0FnSUZSb2FYTWdhR0Z3Y0dWdWN5QjNhR1Z1SUdCdmNuUXVTVzVtWlhKbGJtTmxVMlZ6YzJsdmJpNWpjbVZoZEdVb0tXQWdiM0lnWUc5eWRDNVVjbUZwYm1sdVoxTmxjM05wYjI0dVkzSmxZWFJsS0NsZ0lHbHpJR05oYkd4bFpDNGdWVzVzYVd0bElIUm9aU0JtYVhKemRDQXpYRzRnS2lCemRHVndjeUFvZEdobGVTQnZibXg1SUdOaGJHeGxaQ0J2Ym1ObEtTd2dkR2hwY3lCemRHVndJSGRwYkd3Z1ltVWdaRzl1WlNCbWIzSWdaV0ZqYUNCelpYTnphVzl1TGlCSmJpQjBhR2x6SUhOMFpYQXNJRzl1Ym5oeWRXNTBhVzFsTFhkbFlpQmtiMlZ6SUhSb1pWeHVJQ29nWm05c2JHOTNhVzVuY3pwY2JpQXFJQ0FnSUVsbUlIUm9aU0J3WVhKaGJXVjBaWElnYVhNZ1lTQlZVa3c2WEc0Z0tpQWdJQ0F0SUdSdmQyNXNiMkZrSUhSb1pTQnRiMlJsYkNCa1lYUmhJR1p5YjIwZ2RHaGxJRlZTVEM1Y2JpQXFJQ0FnSUMwZ1kyOXdlU0IwYUdVZ2JXOWtaV3dnWkdGMFlTQjBieUIwYUdVZ1YwRlRUU0JvWldGd0xpQW9jSEp2ZUhrNklDZGpiM0I1TFdaeWIyMG5LVnh1SUNvZ0lDQWdMU0JrWlhKbFptVnlaVzVqWlNCMGFHVWdiVzlrWld3Z1luVm1abVZ5TGlCVWFHbHpJSE4wWlhBZ1lXeHNiM2R6SUhSb1pTQnZjbWxuYVc1aGJDQkJjbkpoZVVKMVptWmxjaUIwYnlCaVpTQm5ZWEppWVdkbElHTnZiR3hsWTNSbFpDNWNiaUFxSUNBZ0lDMGdZMkZzYkNCZ1gwOXlkRU55WldGMFpWTmxjM05wYjI0b0tXQWdkRzhnWTNKbFlYUmxJSFJvWlNCelpYTnphVzl1TGlBb2NISnZlSGs2SUNkamNtVmhkR1VuS1Z4dUlDcGNiaUFxSUNBZ0lFbG1JSFJvWlNCd1lYSmhiV1YwWlhJZ2FYTWdZU0JWYVc1ME9FRnljbUY1SUc5aWFtVmpkRHBjYmlBcUlDQWdJQzBnWTI5d2VTQjBhR1VnYlc5a1pXd2daR0YwWVNCMGJ5QjBhR1VnVjBGVFRTQm9aV0Z3TGlBb2NISnZlSGs2SUNkamIzQjVMV1p5YjIwbktWeHVJQ29nSUNBZ0xTQmpZV3hzSUdCZlQzSjBRM0psWVhSbFUyVnpjMmx2YmlncFlDQjBieUJqY21WaGRHVWdkR2hsSUhObGMzTnBiMjR1SUNod2NtOTRlVG9nSjJOeVpXRjBaU2NwWEc0Z0tseHVJQ3BjYmlBcUwxeHVYRzR2S2lwY2JpQXFJR2x1YVhScFlXeHBlbVVnVDFKVUlHVnVkbWx5YjI1dFpXNTBMbHh1SUNwY2JpQXFJRUJ3WVhKaGJTQnVkVzFVYUhKbFlXUnpJRk5sZEVkc2IySmhiRWx1ZEhKaFQzQk9kVzFVYUhKbFlXUnpLRzUxYlZSb2NtVmhaSE1wWEc0Z0tpQkFjR0Z5WVcwZ2JHOW5aMmx1WjB4bGRtVnNJRU55WldGMFpVVnVkaWh6ZEdGMGFXTmZZMkZ6ZER4UGNuUk1iMmRuYVc1blRHVjJaV3crS0d4dloyZHBibWRmYkdWMlpXd3BLVnh1SUNvdlhHNWpiMjV6ZENCcGJtbDBUM0owSUQwZ0tHNTFiVlJvY21WaFpITTZJRzUxYldKbGNpd2diRzluWjJsdVoweGxkbVZzT2lCdWRXMWlaWElwT2lCMmIybGtJRDArSUh0Y2JpQWdZMjl1YzNRZ1pYSnliM0pEYjJSbElEMGdaMlYwU1c1emRHRnVZMlVvS1M1ZlQzSjBTVzVwZENodWRXMVVhSEpsWVdSekxDQnNiMmRuYVc1blRHVjJaV3dwTzF4dUlDQnBaaUFvWlhKeWIzSkRiMlJsSUNFOVBTQXdLU0I3WEc0Z0lDQWdZMmhsWTJ0TVlYTjBSWEp5YjNJb0owTmhibHhjSjNRZ2FXNXBkR2xoYkdsNlpTQnZibTU0Y25WdWRHbHRaUzRuS1R0Y2JpQWdmVnh1ZlR0Y2JseHVMeW9xWEc0Z0tpQnBiblJwWVd4cGVtVWdjblZ1ZEdsdFpTQmxiblpwY205dWJXVnVkQzVjYmlBcUlFQndZWEpoYlNCbGJuWWdjR0Z6YzJWa0lHbHVJSFJvWlNCbGJuWnBjbTl1YldWdWRDQmpiMjVtYVdjZ2IySnFaV04wTGx4dUlDb3ZYRzVsZUhCdmNuUWdZMjl1YzNRZ2FXNXBkRkoxYm5ScGJXVWdQU0JoYzNsdVl5aGxiblk2SUVWdWRpazZJRkJ5YjIxcGMyVThkbTlwWkQ0Z1BUNGdlMXh1SUNBdkx5QnBibWwwSUU5U1ZGeHVJQ0JwYm1sMFQzSjBLR1Z1ZGk1M1lYTnRMbTUxYlZSb2NtVmhaSE1oTENCc2IyZE1aWFpsYkZOMGNtbHVaMVJ2Ulc1MWJTaGxibll1Ykc5blRHVjJaV3dwS1R0Y2JuMDdYRzVjYmk4cUtseHVJQ29nY0dWeVptOXliU0JGVUNCemNHVmphV1pwWXlCcGJtbDBhV0ZzYVhwaGRHbHZiaTVjYmlBcVhHNGdLaUJBY0dGeVlXMGdaVzUyWEc0Z0tpQkFjR0Z5WVcwZ1pYQk9ZVzFsWEc0Z0tpOWNibVY0Y0c5eWRDQmpiMjV6ZENCcGJtbDBSWEFnUFNCaGMzbHVZeWhsYm5ZNklFVnVkaXdnWlhCT1lXMWxPaUJ6ZEhKcGJtY3BPaUJRY205dGFYTmxQSFp2YVdRK0lEMCtJSHRjYmlBZ2FXWWdLQ0ZDVlVsTVJGOUVSVVpUTGtSSlUwRkNURVZmVjBWQ1IxQlZJQ1ltSUNobGNFNWhiV1VnUFQwOUlDZDNaV0puY0hVbklIeDhJR1Z3VG1GdFpTQTlQVDBnSjNkbFltNXVKeWtwSUh0Y2JpQWdJQ0F2THlCd1pYSm1iM0p0SUZkbFlrZFFWU0JoZG1GcGJHRmlhV3hwZEhrZ1kyaGxZMnRjYmlBZ0lDQnBaaUFvZEhsd1pXOW1JRzVoZG1sbllYUnZjaUE5UFQwZ0ozVnVaR1ZtYVc1bFpDY2dmSHdnSVc1aGRtbG5ZWFJ2Y2k1bmNIVXBJSHRjYmlBZ0lDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpZ25WMlZpUjFCVklHbHpJRzV2ZENCemRYQndiM0owWldRZ2FXNGdZM1Z5Y21WdWRDQmxiblpwY205dWJXVnVkQ2NwTzF4dUlDQWdJSDFjYmlBZ0lDQmpiMjV6ZENCaFpHRndkR1Z5SUQwZ1lYZGhhWFFnYm1GMmFXZGhkRzl5TG1kd2RTNXlaWEYxWlhOMFFXUmhjSFJsY2lncE8xeHVJQ0FnSUdsbUlDZ2hZV1JoY0hSbGNpa2dlMXh1SUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtGeHVJQ0FnSUNBZ0lDQWdJQ2RHWVdsc1pXUWdkRzhnWjJWMElFZFFWU0JoWkdGd2RHVnlMaUJaYjNVZ2JXRjVJRzVsWldRZ2RHOGdaVzVoWW14bElHWnNZV2NnWENJdExXVnVZV0pzWlMxMWJuTmhabVV0ZDJWaVozQjFYQ0lnYVdZZ2VXOTFJR0Z5WlNCMWMybHVaeUJEYUhKdmJXVXVKeWs3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdhV1lnS0NGbGJuWXVkMkZ6YlM1emFXMWtLU0I3WEc0Z0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9YRzRnSUNBZ0lDQWdJQ0FnSjA1dmRDQnpkWEJ3YjNKMFpXUWdabTl5SUZkbFlrZFFWVDFQVGlCaGJtUWdVMGxOUkQxUFJrWXVJRkJzWldGelpTQnpaWFFnWUdWdWRpNTNZWE50TG5OcGJXUmdJSFJ2SUhSeWRXVWdkMmhsYmlCMWMybHVaeUJnZDJWaVozQjFZQ0JGVUNjcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4dklHbHVhWFFnU2xORlVDQnBaaUJoZG1GcGJHRmliR1ZjYmx4dUlDQWdJQzh2SUdWemJHbHVkQzFrYVhOaFlteGxMVzVsZUhRdGJHbHVaU0JBZEhsd1pYTmpjbWx3ZEMxbGMyeHBiblF2Ym04dGNtVnhkV2x5WlMxcGJYQnZjblJ6TENCQWRIbHdaWE5qY21sd2RDMWxjMnhwYm5RdmJtOHRkbUZ5TFhKbGNYVnBjbVZ6WEc0Z0lDQWdZMjl1YzNRZ2FXNXBkRXB6WlhBZ1BTQnlaWEYxYVhKbEtDY3VMMnB6WlhBdmFXNXBkQ2NwTG1sdWFYUTdYRzRnSUNBZ1lYZGhhWFFnYVc1cGRFcHpaWEFvWjJWMFNXNXpkR0Z1WTJVb0tTd2daVzUyTENCaFpHRndkR1Z5S1R0Y2JpQWdmVnh1ZlR0Y2JseHVMeThnSTJWdVpISmxaMmx2YmlCSmJtbDBhV0ZzYVhwaGRHbHZibk5jYmx4dUx5b3FYRzRnS2lCMllXeHBaQ0JrWVhSaElHeHZZMkYwYVc5dWN5Qm1iM0lnYVc1d2RYUXZiM1YwY0hWMElIUmxibk52Y25NdVhHNGdLaTljYm5SNWNHVWdVM1Z3Y0c5eWRHVmtWR1Z1YzI5eVJHRjBZVXh2WTJGMGFXOXVSbTl5U1c1d2RYUlBkWFJ3ZFhRZ1BTQW5ZM0IxSjN3blkzQjFMWEJwYm01bFpDZDhKMmR3ZFMxaWRXWm1aWEluTzF4dVhHNTBlWEJsSUVsUFFtbHVaR2x1WjFOMFlYUmxJRDBnZTF4dUlDQXZLaXBjYmlBZ0lDb2dkR2hsSUdoaGJtUnNaU0J2WmlCSlR5QmlhVzVrYVc1bkxseHVJQ0FnS2k5Y2JpQWdjbVZoWkc5dWJIa2dhR0Z1Wkd4bE9pQnVkVzFpWlhJN1hHNWNiaUFnTHlvcVhHNGdJQ0FxSUhSb1pTQndjbVZtWlhKeVpXUWdiRzlqWVhScGIyNGdabTl5SUdWaFkyZ2diM1YwY0hWMElIUmxibk52Y2k1Y2JpQWdJQ3BjYmlBZ0lDb2dkbUZzZFdVZ2FYTWdiMjVsSUc5bUlDZGpjSFVuTENBblkzQjFMWEJwYm01bFpDY3NJQ2RuY0hVdFluVm1abVZ5Snk1Y2JpQWdJQ292WEc0Z0lISmxZV1J2Ym14NUlHOTFkSEIxZEZCeVpXWmxjbkpsWkV4dlkyRjBhVzl1Y3pvZ2NtVmhaRzl1YkhrZ1UzVndjRzl5ZEdWa1ZHVnVjMjl5UkdGMFlVeHZZMkYwYVc5dVJtOXlTVzV3ZFhSUGRYUndkWFJiWFR0Y2JseHVJQ0F2S2lwY2JpQWdJQ29nWlc1MWJTQjJZV3gxWlNCdlppQjBhR1VnY0hKbFptVnljbVZrSUd4dlkyRjBhVzl1SUdadmNpQmxZV05vSUc5MWRIQjFkQ0IwWlc1emIzSXVYRzRnSUNBcUwxeHVJQ0J5WldGa2IyNXNlU0J2ZFhSd2RYUlFjbVZtWlhKeVpXUk1iMk5oZEdsdmJuTkZibU52WkdWa09pQnlaV0ZrYjI1c2VTQnVkVzFpWlhKYlhUdGNibjA3WEc1Y2JpOHFLbHh1SUNvZ0lIUjFjR3hsSUdWc1pXMWxiblJ6SUdGeVpUb2dTVzVtWlhKbGJtTmxVMlZ6YzJsdmJpQkpSRHNnYVc1d2RYUk9ZVzFsYzFWVVJqaEZibU52WkdWa095QnZkWFJ3ZFhST1lXMWxjMVZVUmpoRmJtTnZaR1ZrT3lCaWFXNWthVzVuVTNSaGRHVmNiaUFxTDF4dWRIbHdaU0JUWlhOemFXOXVUV1YwWVdSaGRHRWdQU0JiWEc0Z0lHbHVabVZ5Wlc1alpWTmxjM05wYjI1SlpEb2diblZ0WW1WeUxDQnBibkIxZEU1aGJXVnpWVlJHT0VWdVkyOWtaV1E2SUc1MWJXSmxjbHRkTENCdmRYUndkWFJPWVcxbGMxVlVSamhGYm1OdlpHVmtPaUJ1ZFcxaVpYSmJYU3hjYmlBZ1ltbHVaR2x1WjFOMFlYUmxPaUJKVDBKcGJtUnBibWRUZEdGMFpYeHVkV3hzTENCbGJtRmliR1ZIY21Gd2FFTmhjSFIxY21VNklHSnZiMnhsWVc0c0lHbHVjSFYwVDNWMGNIVjBRbTkxYm1RNklHSnZiMnhsWVc1Y2JsMDdYRzVjYm1OdmJuTjBJR0ZqZEdsMlpWTmxjM05wYjI1eklEMGdibVYzSUUxaGNEeHVkVzFpWlhJc0lGTmxjM05wYjI1TlpYUmhaR0YwWVQ0b0tUdGNibHh1THlvcVhHNGdLaUJuWlhRZ2RHaGxJR2x1Y0hWMEwyOTFkSEIxZENCamIzVnVkQ0J2WmlCMGFHVWdjMlZ6YzJsdmJpNWNiaUFxSUVCd1lYSmhiU0J6WlhOemFXOXVTR0Z1Wkd4bElIUm9aU0JvWVc1a2JHVWdjbVZ3Y21WelpXNTBhVzVuSUhSb1pTQnpaWE56YVc5dUxpQnphRzkxYkdRZ1ltVWdibTl1TFhwbGNtOHVYRzRnS2lCQWNtVjBkWEp1Y3lCaElIUjFjR3hsSUdsdVkyeDFaR2x1WnlBeUlHNTFiV0psY25Nc0lISmxjSEpsYzJWdWRHbHVaeUIwYUdVZ2FXNXdkWFFnWTI5MWJuUWdZVzVrSUc5MWRIQjFkQ0JqYjNWdWRDNWNiaUFxTDF4dVkyOXVjM1FnWjJWMFUyVnpjMmx2YmtsdWNIVjBUM1YwY0hWMFEyOTFiblFnUFNBb2MyVnpjMmx2YmtoaGJtUnNaVG9nYm5WdFltVnlLVG9nVzI1MWJXSmxjaXdnYm5WdFltVnlYU0E5UGlCN1hHNGdJR052Ym5OMElIZGhjMjBnUFNCblpYUkpibk4wWVc1alpTZ3BPMXh1SUNCamIyNXpkQ0J6ZEdGamF5QTlJSGRoYzIwdWMzUmhZMnRUWVhabEtDazdYRzRnSUhSeWVTQjdYRzRnSUNBZ1kyOXVjM1FnWkdGMFlVOW1abk5sZENBOUlIZGhjMjB1YzNSaFkydEJiR3h2WXlnNEtUdGNiaUFnSUNCamIyNXpkQ0JsY25KdmNrTnZaR1VnUFNCM1lYTnRMbDlQY25SSFpYUkpibkIxZEU5MWRIQjFkRU52ZFc1MEtITmxjM05wYjI1SVlXNWtiR1VzSUdSaGRHRlBabVp6WlhRc0lHUmhkR0ZQWm1aelpYUWdLeUEwS1R0Y2JpQWdJQ0JwWmlBb1pYSnliM0pEYjJSbElDRTlQU0F3S1NCN1hHNGdJQ0FnSUNCamFHVmphMHhoYzNSRmNuSnZjaWduUTJGdVhGd25kQ0JuWlhRZ2MyVnpjMmx2YmlCcGJuQjFkQzl2ZFhSd2RYUWdZMjkxYm5RdUp5azdYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUJiZDJGemJTNUlSVUZRTXpKYlpHRjBZVTltWm5ObGRDQXZJRFJkTENCM1lYTnRMa2hGUVZBek1sdGtZWFJoVDJabWMyVjBJQzhnTkNBcklERmRYVHRjYmlBZ2ZTQm1hVzVoYkd4NUlIdGNiaUFnSUNCM1lYTnRMbk4wWVdOclVtVnpkRzl5WlNoemRHRmpheWs3WEc0Z0lIMWNibjA3WEc1Y2JpOHFLbHh1SUNvZ1lXeHNiMk5oZEdVZ2RHaGxJRzFsYlc5eWVTQmhibVFnYldWdFkzQjVJSFJvWlNCbGVIUmxjbTVoYkNCaWRXWm1aWEl1WEc0Z0tseHVJQ29nUUhCaGNtRnRJRzF2WkdWc0lDMGdkR2hsSUdWNGRHVnlibUZzSUdKMVptWmxjaUJqYjI1MFlXbHVhVzVuSUhSb1pTQnRiMlJsYkNCa1lYUmhMaUJOZFhOMElHNXZkQ0JpWlNCMGFHVWdjMkZ0WlNCaWRXWm1aWElnWVhNZ2RHaGxJRmRCVTAwZ2FHVmhjQzVjYmlBcUlFQnlaWFIxY201eklHRWdNaTFsYkdWdFpXNTBjeUIwZFhCc1pTQXRJSFJvWlNCd2IybHVkR1Z5SUdGdVpDQnphWHBsSUc5bUlIUm9aU0JoYkd4dlkyRjBaV1FnWW5WbVptVnlYRzRnS2k5Y2JtVjRjRzl5ZENCamIyNXpkQ0JqYjNCNVJuSnZiVVY0ZEdWeWJtRnNRblZtWm1WeUlEMGdLRzF2WkdWc09pQlZhVzUwT0VGeWNtRjVLVG9nVzI1MWJXSmxjaXdnYm5WdFltVnlYU0E5UGlCN1hHNGdJR052Ym5OMElIZGhjMjBnUFNCblpYUkpibk4wWVc1alpTZ3BPMXh1SUNCamIyNXpkQ0J0YjJSbGJFUmhkR0ZQWm1aelpYUWdQU0IzWVhOdExsOXRZV3hzYjJNb2JXOWtaV3d1WW5sMFpVeGxibWQwYUNrN1hHNGdJR2xtSUNodGIyUmxiRVJoZEdGUFptWnpaWFFnUFQwOUlEQXBJSHRjYmlBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb1lFTmhiaWQwSUdOeVpXRjBaU0JoSUhObGMzTnBiMjR1SUdaaGFXeGxaQ0IwYnlCaGJHeHZZMkYwWlNCaElHSjFabVpsY2lCdlppQnphWHBsSUNSN2JXOWtaV3d1WW5sMFpVeGxibWQwYUgwdVlDazdYRzRnSUgxY2JpQWdkMkZ6YlM1SVJVRlFWVGd1YzJWMEtHMXZaR1ZzTENCdGIyUmxiRVJoZEdGUFptWnpaWFFwTzF4dUlDQnlaWFIxY200Z1cyMXZaR1ZzUkdGMFlVOW1abk5sZEN3Z2JXOWtaV3d1WW5sMFpVeGxibWQwYUYwN1hHNTlPMXh1WEc0dktpcGNiaUFxSUdOeVpXRjBaU0JoYmlCcGJtWmxjbVZ1WTJVZ2MyVnpjMmx2YmlCbWNtOXRJR0VnYlc5a1pXd2daR0YwWVNCaWRXWm1aWEl1WEc0Z0tseHVJQ29nUUhCaGNtRnRJRzF2WkdWc1JHRjBZU0F0SUdWcGRHaGxjaUJoSUZWcGJuUTRRWEp5WVhrZ2IySnFaV04wSUhKbGNISmxjMlZ1ZEdsdVp5QjBhR1VnYlc5a1pXd2daR0YwWVN3Z2IzSWdZU0F5TFdWc1pXMWxiblJ6SUhSMWNHeGxJR052Ym5SaGFXNXBibWNnZEdobFhHNGdLaUFnSUNBZ2NHOXBiblJsY2lCaGJtUWdjMmw2WlNCdlppQjBhR1VnYlc5a1pXd2daR0YwWVNCaWRXWm1aWEl1WEc0Z0tpQkFjR0Z5WVcwZ2IzQjBhVzl1Y3lCaGJpQnZjSFJwYjI1aGJDQnpaWE56YVc5dUlHOXdkR2x2Ym5NZ2IySnFaV04wTGx4dUlDb2dRSEpsZEhWeWJuTWdZU0F6TFdWc1pXMWxiblJ6SUhSMWNHeGxJR052Ym5SaGFXNXBibWNnVzNObGMzTnBiMjRnYUdGdVpHeGxMQ0JwYm5CMWRDQnVZVzFsY3l3Z2IzVjBjSFYwSUc1aGJXVnpYVnh1SUNvdlhHNWxlSEJ2Y25RZ1kyOXVjM1FnWTNKbFlYUmxVMlZ6YzJsdmJpQTlJR0Z6ZVc1aktGeHVJQ0FnSUcxdlpHVnNSR0YwWVRvZ1ZXbHVkRGhCY25KaGVYeFRaWEpwWVd4cGVtRmliR1ZKYm5SbGNtNWhiRUoxWm1abGNpeGNiaUFnSUNCdmNIUnBiMjV6UHpvZ1NXNW1aWEpsYm1ObFUyVnpjMmx2Ymk1VFpYTnphVzl1VDNCMGFXOXVjeWs2SUZCeWIyMXBjMlU4VTJWeWFXRnNhWHBoWW14bFUyVnpjMmx2YmsxbGRHRmtZWFJoUGlBOVBpQjdYRzRnSUd4bGRDQnRiMlJsYkVSaGRHRlBabVp6WlhRNklHNTFiV0psY2l3Z2JXOWtaV3hFWVhSaFRHVnVaM1JvT2lCdWRXMWlaWEk3WEc0Z0lHTnZibk4wSUhkaGMyMGdQU0JuWlhSSmJuTjBZVzVqWlNncE8xeHVYRzRnSUdsbUlDaEJjbkpoZVM1cGMwRnljbUY1S0cxdlpHVnNSR0YwWVNrcElIdGNiaUFnSUNBdkx5QnBaaUJ0YjJSbGJDQmtZWFJoSUdseklHRnVJR0Z5Y21GNUxDQnBkQ0J0ZFhOMElHSmxJR0VnTWkxbGJHVnRaVzUwY3lCMGRYQnNaU0JqYjI1MFlXbHVhVzVuSUhSb1pTQndiMmx1ZEdWeUlHRnVaQ0J6YVhwbElHOW1JSFJvWlNCdGIyUmxiQ0JrWVhSaFhHNGdJQ0FnVzIxdlpHVnNSR0YwWVU5bVpuTmxkQ3dnYlc5a1pXeEVZWFJoVEdWdVozUm9YU0E5SUcxdlpHVnNSR0YwWVR0Y2JpQWdmU0JsYkhObElHbG1JQ2h0YjJSbGJFUmhkR0V1WW5WbVptVnlJRDA5UFNCM1lYTnRMa2hGUVZCVk9DNWlkV1ptWlhJcElIdGNiaUFnSUNBdkx5QnBaaUJ0YjJSbGJDQmtZWFJoSUhWelpYTWdkR2hsSUhOaGJXVWdZblZtWm1WeUlHRnpJSFJvWlNCWFFWTk5JR2hsWVhBc0lIZGxJR1J2YmlkMElHNWxaV1FnZEc4Z1kyOXdlU0JwZEM1Y2JpQWdJQ0JiYlc5a1pXeEVZWFJoVDJabWMyVjBMQ0J0YjJSbGJFUmhkR0ZNWlc1bmRHaGRJRDBnVzIxdlpHVnNSR0YwWVM1aWVYUmxUMlptYzJWMExDQnRiMlJsYkVSaGRHRXVZbmwwWlV4bGJtZDBhRjA3WEc0Z0lIMGdaV3h6WlNCN1hHNGdJQ0FnTHk4Z2IzUm9aWEozYVhObExDQmpiM0I1SUhSb1pTQnRiMlJsYkNCa1lYUmhJSFJ2SUhSb1pTQlhRVk5OSUdobFlYQXVYRzRnSUNBZ1cyMXZaR1ZzUkdGMFlVOW1abk5sZEN3Z2JXOWtaV3hFWVhSaFRHVnVaM1JvWFNBOUlHTnZjSGxHY205dFJYaDBaWEp1WVd4Q2RXWm1aWElvYlc5a1pXeEVZWFJoS1R0Y2JpQWdmVnh1WEc0Z0lHeGxkQ0J6WlhOemFXOXVTR0Z1Wkd4bElEMGdNRHRjYmlBZ2JHVjBJSE5sYzNOcGIyNVBjSFJwYjI1elNHRnVaR3hsSUQwZ01EdGNiaUFnYkdWMElHbHZRbWx1WkdsdVowaGhibVJzWlNBOUlEQTdYRzRnSUd4bGRDQmhiR3h2WTNNNklHNTFiV0psY2x0ZElEMGdXMTA3WEc0Z0lHTnZibk4wSUdsdWNIVjBUbUZ0WlhOVlZFWTRSVzVqYjJSbFpDQTlJRnRkTzF4dUlDQmpiMjV6ZENCdmRYUndkWFJPWVcxbGMxVlVSamhGYm1OdlpHVmtJRDBnVzEwN1hHNWNiaUFnZEhKNUlIdGNiaUFnSUNCYmMyVnpjMmx2Yms5d2RHbHZibk5JWVc1a2JHVXNJR0ZzYkc5amMxMGdQU0J6WlhSVFpYTnphVzl1VDNCMGFXOXVjeWh2Y0hScGIyNXpLVHRjYmx4dUlDQWdJR2xtSUNodmNIUnBiMjV6UHk1bGVIUmxjbTVoYkVSaGRHRWdKaVlnZDJGemJTNXRiM1Z1ZEVWNGRHVnlibUZzUkdGMFlTa2dlMXh1SUNBZ0lDQWdZMjl1YzNRZ2JHOWhaR2x1WjFCeWIyMXBjMlZ6SUQwZ1cxMDdYRzRnSUNBZ0lDQm1iM0lnS0dOdmJuTjBJR1pwYkdVZ2IyWWdiM0IwYVc5dWN5NWxlSFJsY201aGJFUmhkR0VwSUh0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnY0dGMGFDQTlJSFI1Y0dWdlppQm1hV3hsSUQwOVBTQW5jM1J5YVc1bkp5QS9JR1pwYkdVZ09pQm1hV3hsTG5CaGRHZzdYRzRnSUNBZ0lDQWdJR3h2WVdScGJtZFFjbTl0YVhObGN5NXdkWE5vS0d4dllXUkdhV3hsS0hSNWNHVnZaaUJtYVd4bElEMDlQU0FuYzNSeWFXNW5KeUEvSUdacGJHVWdPaUJtYVd4bExtUmhkR0VwTG5Sb1pXNG9aR0YwWVNBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnZDJGemJTNXRiM1Z1ZEVWNGRHVnlibUZzUkdGMFlTRW9jR0YwYUN3Z1pHRjBZU2s3WEc0Z0lDQWdJQ0FnSUgwcEtUdGNiaUFnSUNBZ0lIMWNibHh1SUNBZ0lDQWdMeThnZDJGcGRDQm1iM0lnWVd4c0lHVjRkR1Z5Ym1Gc0lHUmhkR0VnWm1sc1pYTWdkRzhnWW1VZ2JHOWhaR1ZrWEc0Z0lDQWdJQ0JoZDJGcGRDQlFjbTl0YVhObExtRnNiQ2hzYjJGa2FXNW5VSEp2YldselpYTXBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lITmxjM05wYjI1SVlXNWtiR1VnUFNCaGQyRnBkQ0IzWVhOdExsOVBjblJEY21WaGRHVlRaWE56YVc5dUtHMXZaR1ZzUkdGMFlVOW1abk5sZEN3Z2JXOWtaV3hFWVhSaFRHVnVaM1JvTENCelpYTnphVzl1VDNCMGFXOXVjMGhoYm1Sc1pTazdYRzRnSUNBZ2FXWWdLSE5sYzNOcGIyNUlZVzVrYkdVZ1BUMDlJREFwSUh0Y2JpQWdJQ0FnSUdOb1pXTnJUR0Z6ZEVWeWNtOXlLQ2REWVc1Y1hDZDBJR055WldGMFpTQmhJSE5sYzNOcGIyNHVKeWs3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdZMjl1YzNRZ1cybHVjSFYwUTI5MWJuUXNJRzkxZEhCMWRFTnZkVzUwWFNBOUlHZGxkRk5sYzNOcGIyNUpibkIxZEU5MWRIQjFkRU52ZFc1MEtITmxjM05wYjI1SVlXNWtiR1VwTzF4dVhHNGdJQ0FnWTI5dWMzUWdaVzVoWW14bFIzSmhjR2hEWVhCMGRYSmxJRDBnSVNGdmNIUnBiMjV6UHk1bGJtRmliR1ZIY21Gd2FFTmhjSFIxY21VN1hHNWNiaUFnSUNCamIyNXpkQ0JwYm5CMWRFNWhiV1Z6SUQwZ1cxMDdYRzRnSUNBZ1kyOXVjM1FnYjNWMGNIVjBUbUZ0WlhNZ1BTQmJYVHRjYmlBZ0lDQmpiMjV6ZENCdmRYUndkWFJRY21WbVpYSnlaV1JNYjJOaGRHbHZibk02SUZOMWNIQnZjblJsWkZSbGJuTnZja1JoZEdGTWIyTmhkR2x2YmtadmNrbHVjSFYwVDNWMGNIVjBXMTBnUFNCYlhUdGNiaUFnSUNCbWIzSWdLR3hsZENCcElEMGdNRHNnYVNBOElHbHVjSFYwUTI5MWJuUTdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ1kyOXVjM1FnYm1GdFpTQTlJSGRoYzIwdVgwOXlkRWRsZEVsdWNIVjBUbUZ0WlNoelpYTnphVzl1U0dGdVpHeGxMQ0JwS1R0Y2JpQWdJQ0FnSUdsbUlDaHVZVzFsSUQwOVBTQXdLU0I3WEc0Z0lDQWdJQ0FnSUdOb1pXTnJUR0Z6ZEVWeWNtOXlLQ2REWVc1Y1hDZDBJR2RsZENCaGJpQnBibkIxZENCdVlXMWxMaWNwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnYVc1d2RYUk9ZVzFsYzFWVVJqaEZibU52WkdWa0xuQjFjMmdvYm1GdFpTazdYRzRnSUNBZ0lDQnBibkIxZEU1aGJXVnpMbkIxYzJnb2QyRnpiUzVWVkVZNFZHOVRkSEpwYm1jb2JtRnRaU2twTzF4dUlDQWdJSDFjYmlBZ0lDQm1iM0lnS0d4bGRDQnBJRDBnTURzZ2FTQThJRzkxZEhCMWRFTnZkVzUwT3lCcEt5c3BJSHRjYmlBZ0lDQWdJR052Ym5OMElHNWhiV1VnUFNCM1lYTnRMbDlQY25SSFpYUlBkWFJ3ZFhST1lXMWxLSE5sYzNOcGIyNUlZVzVrYkdVc0lHa3BPMXh1SUNBZ0lDQWdhV1lnS0c1aGJXVWdQVDA5SURBcElIdGNiaUFnSUNBZ0lDQWdZMmhsWTJ0TVlYTjBSWEp5YjNJb0owTmhibHhjSjNRZ1oyVjBJR0Z1SUc5MWRIQjFkQ0J1WVcxbExpY3BPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdiM1YwY0hWMFRtRnRaWE5WVkVZNFJXNWpiMlJsWkM1d2RYTm9LRzVoYldVcE8xeHVJQ0FnSUNBZ1kyOXVjM1FnYm1GdFpWTjBjbWx1WnlBOUlIZGhjMjB1VlZSR09GUnZVM1J5YVc1bktHNWhiV1VwTzF4dUlDQWdJQ0FnYjNWMGNIVjBUbUZ0WlhNdWNIVnphQ2h1WVcxbFUzUnlhVzVuS1R0Y2JseHVJQ0FnSUNBZ2FXWWdLQ0ZDVlVsTVJGOUVSVVpUTGtSSlUwRkNURVZmVjBWQ1IxQlZLU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaGxibUZpYkdWSGNtRndhRU5oY0hSMWNtVWdKaVlnYjNCMGFXOXVjejh1Y0hKbFptVnljbVZrVDNWMGNIVjBURzlqWVhScGIyNGdQVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJRzkxZEhCMWRGQnlaV1psY25KbFpFeHZZMkYwYVc5dWN5NXdkWE5vS0NkbmNIVXRZblZtWm1WeUp5azdYRzRnSUNBZ0lDQWdJQ0FnWTI5dWRHbHVkV1U3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ1kyOXVjM1FnYkc5allYUnBiMjRnUFNCMGVYQmxiMllnYjNCMGFXOXVjejh1Y0hKbFptVnljbVZrVDNWMGNIVjBURzlqWVhScGIyNGdQVDA5SUNkemRISnBibWNuSUQ5Y2JpQWdJQ0FnSUNBZ0lDQWdJRzl3ZEdsdmJuTXVjSEpsWm1WeWNtVmtUM1YwY0hWMFRHOWpZWFJwYjI0Z09seHVJQ0FnSUNBZ0lDQWdJQ0FnYjNCMGFXOXVjejh1Y0hKbFptVnljbVZrVDNWMGNIVjBURzlqWVhScGIyNC9MbHR1WVcxbFUzUnlhVzVuWFNBL1B5QW5ZM0IxSnp0Y2JpQWdJQ0FnSUNBZ2FXWWdLR3h2WTJGMGFXOXVJQ0U5UFNBblkzQjFKeUFtSmlCc2IyTmhkR2x2YmlBaFBUMGdKMk53ZFMxd2FXNXVaV1FuSUNZbUlHeHZZMkYwYVc5dUlDRTlQU0FuWjNCMUxXSjFabVpsY2ljcElIdGNiaUFnSUNBZ0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9ZRTV2ZENCemRYQndiM0owWldRZ2NISmxabVZ5Y21Wa0lHOTFkSEIxZENCc2IyTmhkR2x2YmpvZ0pIdHNiMk5oZEdsdmJuMHVZQ2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2FXWWdLR1Z1WVdKc1pVZHlZWEJvUTJGd2RIVnlaU0FtSmlCc2IyTmhkR2x2YmlBaFBUMGdKMmR3ZFMxaWRXWm1aWEluS1NCN1hHNGdJQ0FnSUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtHQk9iM1FnYzNWd2NHOXlkR1ZrSUhCeVpXWmxjbkpsWkNCdmRYUndkWFFnYkc5allYUnBiMjQ2SUNSN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUd4dlkyRjBhVzl1ZlM0Z1QyNXNlU0FuWjNCMUxXSjFabVpsY2ljZ2JHOWpZWFJwYjI0Z2FYTWdjM1Z3Y0c5eWRHVmtJSGRvWlc0Z1pXNWhZbXhsUjNKaGNHaERZWEIwZFhKbElHbHpJSFJ5ZFdVdVlDazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnYjNWMGNIVjBVSEpsWm1WeWNtVmtURzlqWVhScGIyNXpMbkIxYzJnb2JHOWpZWFJwYjI0cE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUM4dklIVnpaU0JKVHlCaWFXNWthVzVuSUc5dWJIa2dkMmhsYmlCaGRDQnNaV0Z6ZENCdmJtVWdiM1YwY0hWMElHbHpJSEJ5WldabVpYSmxaQ0IwYnlCaVpTQnZiaUJIVUZVdVhHNGdJQ0FnYkdWMElHSnBibVJwYm1kVGRHRjBaVG9nU1U5Q2FXNWthVzVuVTNSaGRHVjhiblZzYkNBOUlHNTFiR3c3WEc0Z0lDQWdhV1lnS0NGQ1ZVbE1SRjlFUlVaVExrUkpVMEZDVEVWZlYwVkNSMUJWSUNZbUlHOTFkSEIxZEZCeVpXWmxjbkpsWkV4dlkyRjBhVzl1Y3k1emIyMWxLR3dnUFQ0Z2JDQTlQVDBnSjJkd2RTMWlkV1ptWlhJbktTa2dlMXh1SUNBZ0lDQWdhVzlDYVc1a2FXNW5TR0Z1Wkd4bElEMGdkMkZ6YlM1ZlQzSjBRM0psWVhSbFFtbHVaR2x1WnloelpYTnphVzl1U0dGdVpHeGxLVHRjYmlBZ0lDQWdJR2xtSUNocGIwSnBibVJwYm1kSVlXNWtiR1VnUFQwOUlEQXBJSHRjYmlBZ0lDQWdJQ0FnWTJobFkydE1ZWE4wUlhKeWIzSW9KME5oYmx4Y0ozUWdZM0psWVhSbElFbFBJR0pwYm1ScGJtY3VKeWs3WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUdKcGJtUnBibWRUZEdGMFpTQTlJSHRjYmlBZ0lDQWdJQ0FnYUdGdVpHeGxPaUJwYjBKcGJtUnBibWRJWVc1a2JHVXNYRzRnSUNBZ0lDQWdJRzkxZEhCMWRGQnlaV1psY25KbFpFeHZZMkYwYVc5dWN5eGNiaUFnSUNBZ0lDQWdiM1YwY0hWMFVISmxabVZ5Y21Wa1RHOWpZWFJwYjI1elJXNWpiMlJsWkRvZ2IzVjBjSFYwVUhKbFptVnljbVZrVEc5allYUnBiMjV6TG0xaGNDaHNJRDArSUdSaGRHRk1iMk5oZEdsdmJsTjBjbWx1WjFSdlJXNTFiU2hzS1Nrc1hHNGdJQ0FnSUNCOU8xeHVJQ0FnSUgxY2JseHVJQ0FnSUdGamRHbDJaVk5sYzNOcGIyNXpMbk5sZENoY2JpQWdJQ0FnSUNBZ2MyVnpjMmx2YmtoaGJtUnNaU3hjYmlBZ0lDQWdJQ0FnVzNObGMzTnBiMjVJWVc1a2JHVXNJR2x1Y0hWMFRtRnRaWE5WVkVZNFJXNWpiMlJsWkN3Z2IzVjBjSFYwVG1GdFpYTlZWRVk0Ulc1amIyUmxaQ3dnWW1sdVpHbHVaMU4wWVhSbExDQmxibUZpYkdWSGNtRndhRU5oY0hSMWNtVXNJR1poYkhObFhTazdYRzRnSUNBZ2NtVjBkWEp1SUZ0elpYTnphVzl1U0dGdVpHeGxMQ0JwYm5CMWRFNWhiV1Z6TENCdmRYUndkWFJPWVcxbGMxMDdYRzRnSUgwZ1kyRjBZMmdnS0dVcElIdGNiaUFnSUNCcGJuQjFkRTVoYldWelZWUkdPRVZ1WTI5a1pXUXVabTl5UldGamFDaGlkV1lnUFQ0Z2QyRnpiUzVmVDNKMFJuSmxaU2hpZFdZcEtUdGNiaUFnSUNCdmRYUndkWFJPWVcxbGMxVlVSamhGYm1OdlpHVmtMbVp2Y2tWaFkyZ29ZblZtSUQwK0lIZGhjMjB1WDA5eWRFWnlaV1VvWW5WbUtTazdYRzVjYmlBZ0lDQnBaaUFvYVc5Q2FXNWthVzVuU0dGdVpHeGxJQ0U5UFNBd0tTQjdYRzRnSUNBZ0lDQjNZWE50TGw5UGNuUlNaV3hsWVhObFFtbHVaR2x1WnlocGIwSnBibVJwYm1kSVlXNWtiR1VwTzF4dUlDQWdJSDFjYmx4dUlDQWdJR2xtSUNoelpYTnphVzl1U0dGdVpHeGxJQ0U5UFNBd0tTQjdYRzRnSUNBZ0lDQjNZWE50TGw5UGNuUlNaV3hsWVhObFUyVnpjMmx2YmloelpYTnphVzl1U0dGdVpHeGxLVHRjYmlBZ0lDQjlYRzRnSUNBZ2RHaHliM2NnWlR0Y2JpQWdmU0JtYVc1aGJHeDVJSHRjYmlBZ0lDQjNZWE50TGw5bWNtVmxLRzF2WkdWc1JHRjBZVTltWm5ObGRDazdYRzRnSUNBZ2FXWWdLSE5sYzNOcGIyNVBjSFJwYjI1elNHRnVaR3hsSUNFOVBTQXdLU0I3WEc0Z0lDQWdJQ0IzWVhOdExsOVBjblJTWld4bFlYTmxVMlZ6YzJsdmJrOXdkR2x2Ym5Nb2MyVnpjMmx2Yms5d2RHbHZibk5JWVc1a2JHVXBPMXh1SUNBZ0lIMWNiaUFnSUNCaGJHeHZZM011Wm05eVJXRmphQ2hoYkd4dll5QTlQaUIzWVhOdExsOW1jbVZsS0dGc2JHOWpLU2s3WEc1Y2JpQWdJQ0F2THlCMWJtMXZkVzUwSUdWNGRHVnlibUZzSUdSaGRHRWdhV1lnYm1WalpYTnpZWEo1WEc0Z0lDQWdkMkZ6YlM1MWJtMXZkVzUwUlhoMFpYSnVZV3hFWVhSaFB5NG9LVHRjYmlBZ2ZWeHVmVHRjYmx4dVpYaHdiM0owSUdOdmJuTjBJSEpsYkdWaGMyVlRaWE56YVc5dUlEMGdLSE5sYzNOcGIyNUpaRG9nYm5WdFltVnlLVG9nZG05cFpDQTlQaUI3WEc0Z0lHTnZibk4wSUhkaGMyMGdQU0JuWlhSSmJuTjBZVzVqWlNncE8xeHVJQ0JqYjI1emRDQnpaWE56YVc5dUlEMGdZV04wYVhabFUyVnpjMmx2Ym5NdVoyVjBLSE5sYzNOcGIyNUpaQ2s3WEc0Z0lHbG1JQ2doYzJWemMybHZiaWtnZTF4dUlDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpaGdZMkZ1Ym05MElISmxiR1ZoYzJVZ2MyVnpjMmx2Ymk0Z2FXNTJZV3hwWkNCelpYTnphVzl1SUdsa09pQWtlM05sYzNOcGIyNUpaSDFnS1R0Y2JpQWdmVnh1SUNCamIyNXpkQ0JiYzJWemMybHZia2hoYm1Sc1pTd2dhVzV3ZFhST1lXMWxjMVZVUmpoRmJtTnZaR1ZrTENCdmRYUndkWFJPWVcxbGMxVlVSamhGYm1OdlpHVmtMQ0JwYjBKcGJtUnBibWRUZEdGMFpTd2daVzVoWW14bFIzSmhjR2hEWVhCMGRYSmxYU0E5SUhObGMzTnBiMjQ3WEc1Y2JpQWdhV1lnS0dsdlFtbHVaR2x1WjFOMFlYUmxLU0I3WEc0Z0lDQWdhV1lnS0dWdVlXSnNaVWR5WVhCb1EyRndkSFZ5WlNrZ2UxeHVJQ0FnSUNBZ2QyRnpiUzVmVDNKMFEyeGxZWEpDYjNWdVpFOTFkSEIxZEhNb2FXOUNhVzVrYVc1blUzUmhkR1V1YUdGdVpHeGxLVHRjYmlBZ0lDQjlYRzRnSUNBZ2QyRnpiUzVmVDNKMFVtVnNaV0Z6WlVKcGJtUnBibWNvYVc5Q2FXNWthVzVuVTNSaGRHVXVhR0Z1Wkd4bEtUdGNiaUFnZlZ4dVhHNGdJSGRoYzIwdWFuTmxjRTl1VW1Wc1pXRnpaVk5sYzNOcGIyNC9MaWh6WlhOemFXOXVTV1FwTzF4dVhHNGdJR2x1Y0hWMFRtRnRaWE5WVkVZNFJXNWpiMlJsWkM1bWIzSkZZV05vS0dKMVppQTlQaUIzWVhOdExsOVBjblJHY21WbEtHSjFaaWtwTzF4dUlDQnZkWFJ3ZFhST1lXMWxjMVZVUmpoRmJtTnZaR1ZrTG1admNrVmhZMmdvWW5WbUlEMCtJSGRoYzIwdVgwOXlkRVp5WldVb1luVm1LU2s3WEc0Z0lIZGhjMjB1WDA5eWRGSmxiR1ZoYzJWVFpYTnphVzl1S0hObGMzTnBiMjVJWVc1a2JHVXBPMXh1SUNCaFkzUnBkbVZUWlhOemFXOXVjeTVrWld4bGRHVW9jMlZ6YzJsdmJrbGtLVHRjYm4wN1hHNWNibVY0Y0c5eWRDQmpiMjV6ZENCd2NtVndZWEpsU1c1d2RYUlBkWFJ3ZFhSVVpXNXpiM0lnUFZ4dUlDQWdJQ2gwWlc1emIzSTZJRlJsYm5OdmNrMWxkR0ZrWVhSaGZHNTFiR3dzSUhSbGJuTnZja2hoYm1Sc1pYTTZJRzUxYldKbGNsdGRMQ0JoYkd4dlkzTTZJRzUxYldKbGNsdGRMQ0J6WlhOemFXOXVTV1E2SUc1MWJXSmxjaXdnYVc1a1pYZzZJRzUxYldKbGNpeGNiaUFnSUNBZ1pXNWhZbXhsUjNKaGNHaERZWEIwZFhKbElEMGdabUZzYzJVcE9pQjJiMmxrSUQwK0lIdGNiaUFnSUNBZ0lHbG1JQ2doZEdWdWMyOXlLU0I3WEc0Z0lDQWdJQ0FnSUhSbGJuTnZja2hoYm1Sc1pYTXVjSFZ6YUNnd0tUdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQmpiMjV6ZENCM1lYTnRJRDBnWjJWMFNXNXpkR0Z1WTJVb0tUdGNibHh1SUNBZ0lDQWdZMjl1YzNRZ1pHRjBZVlI1Y0dVZ1BTQjBaVzV6YjNKYk1GMDdYRzRnSUNBZ0lDQmpiMjV6ZENCa2FXMXpJRDBnZEdWdWMyOXlXekZkTzF4dUlDQWdJQ0FnWTI5dWMzUWdiRzlqWVhScGIyNGdQU0IwWlc1emIzSmJNMTA3WEc1Y2JpQWdJQ0FnSUd4bGRDQnlZWGRFWVhSaE9pQnVkVzFpWlhJN1hHNGdJQ0FnSUNCc1pYUWdaR0YwWVVKNWRHVk1aVzVuZEdnNklHNTFiV0psY2p0Y2JseHVJQ0FnSUNBZ2FXWWdLR1JoZEdGVWVYQmxJRDA5UFNBbmMzUnlhVzVuSnlBbUppQnNiMk5oZEdsdmJpQTlQVDBnSjJkd2RTMWlkV1ptWlhJbktTQjdYRzRnSUNBZ0lDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpZ25VM1J5YVc1bklIUmxibk52Y2lCcGN5QnViM1FnYzNWd2NHOXlkR1ZrSUc5dUlFZFFWUzRuS1R0Y2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ2FXWWdLR1Z1WVdKc1pVZHlZWEJvUTJGd2RIVnlaU0FtSmlCc2IyTmhkR2x2YmlBaFBUMGdKMmR3ZFMxaWRXWm1aWEluS1NCN1hHNGdJQ0FnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2loY2JpQWdJQ0FnSUNBZ0lDQWdJR0JGZUhSbGNtNWhiQ0JpZFdabVpYSWdiWFZ6ZENCaVpTQndjbTkyYVdSbFpDQm1iM0lnYVc1d2RYUXZiM1YwY0hWMElHbHVaR1Y0SUNSN2FXNWtaWGg5SUhkb1pXNGdaVzVoWW14bFIzSmhjR2hEWVhCMGRYSmxJR2x6SUhSeWRXVXVZQ2s3WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUdsbUlDaHNiMk5oZEdsdmJpQTlQVDBnSjJkd2RTMWlkV1ptWlhJbktTQjdYRzRnSUNBZ0lDQWdJR052Ym5OMElHZHdkVUoxWm1abGNpQTlJSFJsYm5OdmNsc3lYUzVuY0hWQ2RXWm1aWElnWVhNZ1IxQlZRblZtWm1WeU8xeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCbGJHVnRaVzUwVTJsNlpVbHVRbmwwWlhNZ1BTQm5aWFJVWlc1emIzSkZiR1Z0Wlc1MFUybDZaU2gwWlc1emIzSkVZWFJoVkhsd1pWTjBjbWx1WjFSdlJXNTFiU2hrWVhSaFZIbHdaU2twSVR0Y2JpQWdJQ0FnSUNBZ1pHRjBZVUo1ZEdWTVpXNW5kR2dnUFNCa2FXMXpMbkpsWkhWalpTZ29ZU3dnWWlrZ1BUNGdZU0FxSUdJc0lERXBJQ29nWld4bGJXVnVkRk5wZW1WSmJrSjVkR1Z6TzF4dUlDQWdJQ0FnSUNCeVlYZEVZWFJoSUQwZ2QyRnpiUzVxYzJWd1VtVm5hWE4wWlhKQ2RXWm1aWElvYzJWemMybHZia2xrTENCcGJtUmxlQ3dnWjNCMVFuVm1abVZ5TENCa1lYUmhRbmwwWlV4bGJtZDBhQ2s3WEc0Z0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQmtZWFJoSUQwZ2RHVnVjMjl5V3pKZE8xeHVYRzRnSUNBZ0lDQWdJR2xtSUNoQmNuSmhlUzVwYzBGeWNtRjVLR1JoZEdFcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnTHk4Z2MzUnlhVzVuSUhSbGJuTnZjbHh1SUNBZ0lDQWdJQ0FnSUdSaGRHRkNlWFJsVEdWdVozUm9JRDBnTkNBcUlHUmhkR0V1YkdWdVozUm9PMXh1SUNBZ0lDQWdJQ0FnSUhKaGQwUmhkR0VnUFNCM1lYTnRMbDl0WVd4c2IyTW9aR0YwWVVKNWRHVk1aVzVuZEdncE8xeHVJQ0FnSUNBZ0lDQWdJR0ZzYkc5amN5NXdkWE5vS0hKaGQwUmhkR0VwTzF4dUlDQWdJQ0FnSUNBZ0lHeGxkQ0JrWVhSaFNXNWtaWGdnUFNCeVlYZEVZWFJoSUM4Z05EdGNiaUFnSUNBZ0lDQWdJQ0JtYjNJZ0tHeGxkQ0JwSUQwZ01Ec2dhU0E4SUdSaGRHRXViR1Z1WjNSb095QnBLeXNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoMGVYQmxiMllnWkdGMFlWdHBYU0FoUFQwZ0ozTjBjbWx1WnljcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHliM2NnYm1WM0lGUjVjR1ZGY25KdmNpaGdkR1Z1YzI5eUlHUmhkR0VnWVhRZ2FXNWtaWGdnSkh0cGZTQnBjeUJ1YjNRZ1lTQnpkSEpwYm1kZ0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSGRoYzIwdVNFVkJVRlV6TWx0a1lYUmhTVzVrWlhncksxMGdQU0JoYkd4dlkxZGhjMjFUZEhKcGJtY29aR0YwWVZ0cFhTd2dZV3hzYjJOektUdGNiaUFnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ1pHRjBZVUo1ZEdWTVpXNW5kR2dnUFNCa1lYUmhMbUo1ZEdWTVpXNW5kR2c3WEc0Z0lDQWdJQ0FnSUNBZ2NtRjNSR0YwWVNBOUlIZGhjMjB1WDIxaGJHeHZZeWhrWVhSaFFubDBaVXhsYm1kMGFDazdYRzRnSUNBZ0lDQWdJQ0FnWVd4c2IyTnpMbkIxYzJnb2NtRjNSR0YwWVNrN1hHNGdJQ0FnSUNBZ0lDQWdkMkZ6YlM1SVJVRlFWVGd1YzJWMEtHNWxkeUJWYVc1ME9FRnljbUY1S0dSaGRHRXVZblZtWm1WeUxDQmtZWFJoTG1KNWRHVlBabVp6WlhRc0lHUmhkR0ZDZVhSbFRHVnVaM1JvS1N3Z2NtRjNSR0YwWVNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMWNibHh1SUNBZ0lDQWdZMjl1YzNRZ2MzUmhZMnNnUFNCM1lYTnRMbk4wWVdOclUyRjJaU2dwTzF4dUlDQWdJQ0FnWTI5dWMzUWdaR2x0YzA5bVpuTmxkQ0E5SUhkaGMyMHVjM1JoWTJ0QmJHeHZZeWcwSUNvZ1pHbHRjeTVzWlc1bmRHZ3BPMXh1SUNBZ0lDQWdkSEo1SUh0Y2JpQWdJQ0FnSUNBZ2JHVjBJR1JwYlVsdVpHVjRJRDBnWkdsdGMwOW1abk5sZENBdklEUTdYRzRnSUNBZ0lDQWdJR1JwYlhNdVptOXlSV0ZqYUNoa0lEMCtJSGRoYzIwdVNFVkJVRE15VzJScGJVbHVaR1Y0S3l0ZElEMGdaQ2s3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJSFJsYm5OdmNpQTlJSGRoYzIwdVgwOXlkRU55WldGMFpWUmxibk52Y2loY2JpQWdJQ0FnSUNBZ0lDQWdJSFJsYm5OdmNrUmhkR0ZVZVhCbFUzUnlhVzVuVkc5RmJuVnRLR1JoZEdGVWVYQmxLU3dnY21GM1JHRjBZU3dnWkdGMFlVSjVkR1ZNWlc1bmRHZ3NJR1JwYlhOUFptWnpaWFFzSUdScGJYTXViR1Z1WjNSb0xGeHVJQ0FnSUNBZ0lDQWdJQ0FnWkdGMFlVeHZZMkYwYVc5dVUzUnlhVzVuVkc5RmJuVnRLR3h2WTJGMGFXOXVLU2s3WEc0Z0lDQWdJQ0FnSUdsbUlDaDBaVzV6YjNJZ1BUMDlJREFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQmphR1ZqYTB4aGMzUkZjbkp2Y2loZ1EyRnVKM1FnWTNKbFlYUmxJSFJsYm5OdmNpQm1iM0lnYVc1d2RYUXZiM1YwY0hWMExpQnpaWE56YVc5dVBTUjdjMlZ6YzJsdmJrbGtmU3dnYVc1a1pYZzlKSHRwYm1SbGVIMHVZQ2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2RHVnVjMjl5U0dGdVpHeGxjeTV3ZFhOb0tIUmxibk52Y2lrN1hHNGdJQ0FnSUNCOUlHWnBibUZzYkhrZ2UxeHVJQ0FnSUNBZ0lDQjNZWE50TG5OMFlXTnJVbVZ6ZEc5eVpTaHpkR0ZqYXlrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlR0Y2JseHVMeW9xWEc0Z0tpQndaWEptYjNKdElHbHVabVZ5Wlc1alpTQnlkVzVjYmlBcUwxeHVaWGh3YjNKMElHTnZibk4wSUhKMWJpQTlJR0Z6ZVc1aktGeHVJQ0FnSUhObGMzTnBiMjVKWkRvZ2JuVnRZbVZ5TENCcGJuQjFkRWx1WkdsalpYTTZJRzUxYldKbGNsdGRMQ0JwYm5CMWRGUmxibk52Y25NNklGUmxibk52Y2sxbGRHRmtZWFJoVzEwc0lHOTFkSEIxZEVsdVpHbGpaWE02SUc1MWJXSmxjbHRkTEZ4dUlDQWdJRzkxZEhCMWRGUmxibk52Y25NNklFRnljbUY1UEZSbGJuTnZjazFsZEdGa1lYUmhmRzUxYkd3K0xDQnZjSFJwYjI1ek9pQkpibVpsY21WdVkyVlRaWE56YVc5dUxsSjFiazl3ZEdsdmJuTXBPaUJRY205dGFYTmxQRlJsYm5OdmNrMWxkR0ZrWVhSaFcxMCtJRDArSUh0Y2JpQWdZMjl1YzNRZ2QyRnpiU0E5SUdkbGRFbHVjM1JoYm1ObEtDazdYRzRnSUdOdmJuTjBJSE5sYzNOcGIyNGdQU0JoWTNScGRtVlRaWE56YVc5dWN5NW5aWFFvYzJWemMybHZia2xrS1R0Y2JpQWdhV1lnS0NGelpYTnphVzl1S1NCN1hHNGdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLR0JqWVc1dWIzUWdjblZ1SUdsdVptVnlaVzVqWlM0Z2FXNTJZV3hwWkNCelpYTnphVzl1SUdsa09pQWtlM05sYzNOcGIyNUpaSDFnS1R0Y2JpQWdmVnh1SUNCamIyNXpkQ0J6WlhOemFXOXVTR0Z1Wkd4bElEMGdjMlZ6YzJsdmJsc3dYVHRjYmlBZ1kyOXVjM1FnYVc1d2RYUk9ZVzFsYzFWVVJqaEZibU52WkdWa0lEMGdjMlZ6YzJsdmJsc3hYVHRjYmlBZ1kyOXVjM1FnYjNWMGNIVjBUbUZ0WlhOVlZFWTRSVzVqYjJSbFpDQTlJSE5sYzNOcGIyNWJNbDA3WEc0Z0lHTnZibk4wSUdsdlFtbHVaR2x1WjFOMFlYUmxJRDBnYzJWemMybHZibHN6WFR0Y2JpQWdZMjl1YzNRZ1pXNWhZbXhsUjNKaGNHaERZWEIwZFhKbElEMGdjMlZ6YzJsdmJsczBYVHRjYmlBZ1kyOXVjM1FnYVc1d2RYUlBkWFJ3ZFhSQ2IzVnVaQ0E5SUhObGMzTnBiMjViTlYwN1hHNWNiaUFnWTI5dWMzUWdhVzV3ZFhSRGIzVnVkQ0E5SUdsdWNIVjBTVzVrYVdObGN5NXNaVzVuZEdnN1hHNGdJR052Ym5OMElHOTFkSEIxZEVOdmRXNTBJRDBnYjNWMGNIVjBTVzVrYVdObGN5NXNaVzVuZEdnN1hHNWNiaUFnYkdWMElISjFiazl3ZEdsdmJuTklZVzVrYkdVZ1BTQXdPMXh1SUNCc1pYUWdjblZ1VDNCMGFXOXVjMEZzYkc5amN6b2diblZ0WW1WeVcxMGdQU0JiWFR0Y2JseHVJQ0JqYjI1emRDQnBibkIxZEZSbGJuTnZja2hoYm1Sc1pYTTZJRzUxYldKbGNsdGRJRDBnVzEwN1hHNGdJR052Ym5OMElHOTFkSEIxZEZSbGJuTnZja2hoYm1Sc1pYTTZJRzUxYldKbGNsdGRJRDBnVzEwN1hHNGdJR052Ym5OMElHbHVjSFYwVDNWMGNIVjBRV3hzYjJOek9pQnVkVzFpWlhKYlhTQTlJRnRkTzF4dVhHNGdJR052Ym5OMElHSmxabTl5WlZKMWJsTjBZV05ySUQwZ2QyRnpiUzV6ZEdGamExTmhkbVVvS1R0Y2JpQWdZMjl1YzNRZ2FXNXdkWFJXWVd4MVpYTlBabVp6WlhRZ1BTQjNZWE50TG5OMFlXTnJRV3hzYjJNb2FXNXdkWFJEYjNWdWRDQXFJRFFwTzF4dUlDQmpiMjV6ZENCcGJuQjFkRTVoYldWelQyWm1jMlYwSUQwZ2QyRnpiUzV6ZEdGamEwRnNiRzlqS0dsdWNIVjBRMjkxYm5RZ0tpQTBLVHRjYmlBZ1kyOXVjM1FnYjNWMGNIVjBWbUZzZFdWelQyWm1jMlYwSUQwZ2QyRnpiUzV6ZEdGamEwRnNiRzlqS0c5MWRIQjFkRU52ZFc1MElDb2dOQ2s3WEc0Z0lHTnZibk4wSUc5MWRIQjFkRTVoYldWelQyWm1jMlYwSUQwZ2QyRnpiUzV6ZEdGamEwRnNiRzlqS0c5MWRIQjFkRU52ZFc1MElDb2dOQ2s3WEc1Y2JpQWdkSEo1SUh0Y2JpQWdJQ0JiY25WdVQzQjBhVzl1YzBoaGJtUnNaU3dnY25WdVQzQjBhVzl1YzBGc2JHOWpjMTBnUFNCelpYUlNkVzVQY0hScGIyNXpLRzl3ZEdsdmJuTXBPMXh1WEc0Z0lDQWdMeThnWTNKbFlYUmxJR2x1Y0hWMElIUmxibk52Y25OY2JpQWdJQ0JtYjNJZ0tHeGxkQ0JwSUQwZ01Ec2dhU0E4SUdsdWNIVjBRMjkxYm5RN0lHa3JLeWtnZTF4dUlDQWdJQ0FnY0hKbGNHRnlaVWx1Y0hWMFQzVjBjSFYwVkdWdWMyOXlLRnh1SUNBZ0lDQWdJQ0FnSUdsdWNIVjBWR1Z1YzI5eWMxdHBYU3dnYVc1d2RYUlVaVzV6YjNKSVlXNWtiR1Z6TENCcGJuQjFkRTkxZEhCMWRFRnNiRzlqY3l3Z2MyVnpjMmx2Ymtsa0xDQnBibkIxZEVsdVpHbGpaWE5iYVYwc0lHVnVZV0pzWlVkeVlYQm9RMkZ3ZEhWeVpTazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5OGdZM0psWVhSbElHOTFkSEIxZENCMFpXNXpiM0p6WEc0Z0lDQWdabTl5SUNoc1pYUWdhU0E5SURBN0lHa2dQQ0J2ZFhSd2RYUkRiM1Z1ZERzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0J3Y21Wd1lYSmxTVzV3ZFhSUGRYUndkWFJVWlc1emIzSW9YRzRnSUNBZ0lDQWdJQ0FnYjNWMGNIVjBWR1Z1YzI5eWMxdHBYU3dnYjNWMGNIVjBWR1Z1YzI5eVNHRnVaR3hsY3l3Z2FXNXdkWFJQZFhSd2RYUkJiR3h2WTNNc0lITmxjM05wYjI1SlpDd2dhVzV3ZFhSRGIzVnVkQ0FySUc5MWRIQjFkRWx1WkdsalpYTmJhVjBzWEc0Z0lDQWdJQ0FnSUNBZ1pXNWhZbXhsUjNKaGNHaERZWEIwZFhKbEtUdGNiaUFnSUNCOVhHNWNiaUFnSUNCc1pYUWdhVzV3ZFhSV1lXeDFaWE5KYm1SbGVDQTlJR2x1Y0hWMFZtRnNkV1Z6VDJabWMyVjBJQzhnTkR0Y2JpQWdJQ0JzWlhRZ2FXNXdkWFJPWVcxbGMwbHVaR1Y0SUQwZ2FXNXdkWFJPWVcxbGMwOW1abk5sZENBdklEUTdYRzRnSUNBZ2JHVjBJRzkxZEhCMWRGWmhiSFZsYzBsdVpHVjRJRDBnYjNWMGNIVjBWbUZzZFdWelQyWm1jMlYwSUM4Z05EdGNiaUFnSUNCc1pYUWdiM1YwY0hWMFRtRnRaWE5KYm1SbGVDQTlJRzkxZEhCMWRFNWhiV1Z6VDJabWMyVjBJQzhnTkR0Y2JpQWdJQ0JtYjNJZ0tHeGxkQ0JwSUQwZ01Ec2dhU0E4SUdsdWNIVjBRMjkxYm5RN0lHa3JLeWtnZTF4dUlDQWdJQ0FnZDJGemJTNUlSVUZRVlRNeVcybHVjSFYwVm1Gc2RXVnpTVzVrWlhncksxMGdQU0JwYm5CMWRGUmxibk52Y2toaGJtUnNaWE5iYVYwN1hHNGdJQ0FnSUNCM1lYTnRMa2hGUVZCVk16SmJhVzV3ZFhST1lXMWxjMGx1WkdWNEt5dGRJRDBnYVc1d2RYUk9ZVzFsYzFWVVJqaEZibU52WkdWa1cybHVjSFYwU1c1a2FXTmxjMXRwWFYwN1hHNGdJQ0FnZlZ4dUlDQWdJR1p2Y2lBb2JHVjBJR2tnUFNBd095QnBJRHdnYjNWMGNIVjBRMjkxYm5RN0lHa3JLeWtnZTF4dUlDQWdJQ0FnZDJGemJTNUlSVUZRVlRNeVcyOTFkSEIxZEZaaGJIVmxjMGx1WkdWNEt5dGRJRDBnYjNWMGNIVjBWR1Z1YzI5eVNHRnVaR3hsYzF0cFhUdGNiaUFnSUNBZ0lIZGhjMjB1U0VWQlVGVXpNbHR2ZFhSd2RYUk9ZVzFsYzBsdVpHVjRLeXRkSUQwZ2IzVjBjSFYwVG1GdFpYTlZWRVk0Ulc1amIyUmxaRnR2ZFhSd2RYUkpibVJwWTJWelcybGRYVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnBaaUFvSVVKVlNVeEVYMFJGUmxNdVJFbFRRVUpNUlY5WFJVSkhVRlVnSmlZZ2FXOUNhVzVrYVc1blUzUmhkR1VnSmlZZ0lXbHVjSFYwVDNWMGNIVjBRbTkxYm1RcElIdGNiaUFnSUNBZ0lHTnZibk4wSUh0b1lXNWtiR1VzSUc5MWRIQjFkRkJ5WldabGNuSmxaRXh2WTJGMGFXOXVjeXdnYjNWMGNIVjBVSEpsWm1WeWNtVmtURzlqWVhScGIyNXpSVzVqYjJSbFpIMGdQU0JwYjBKcGJtUnBibWRUZEdGMFpUdGNibHh1SUNBZ0lDQWdhV1lnS0dsdWNIVjBUbUZ0WlhOVlZFWTRSVzVqYjJSbFpDNXNaVzVuZEdnZ0lUMDlJR2x1Y0hWMFEyOTFiblFwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0dCcGJuQjFkQ0JqYjNWdWRDQm1jbTl0SUdabFpXUnpJQ2drZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhVzV3ZFhSRGIzVnVkSDBwSUdseklHVjRjR1ZqZEdWa0lIUnZJR0psSUdGc2QyRjVjeUJsY1hWaGJDQjBieUJ0YjJSbGJDZHpJR2x1Y0hWMElHTnZkVzUwSUNna2UybHVjSFYwVG1GdFpYTlZWRVk0Ulc1amIyUmxaQzVzWlc1bmRHaDlLUzVnS1R0Y2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0x5OGdjSEp2WTJWemN5QnBibkIxZEhOY2JpQWdJQ0FnSUdadmNpQW9iR1YwSUdrZ1BTQXdPeUJwSUR3Z2FXNXdkWFJEYjNWdWREc2dhU3NyS1NCN1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUdsdVpHVjRJRDBnYVc1d2RYUkpibVJwWTJWelcybGRPMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQmxjbkp2Y2tOdlpHVWdQU0JoZDJGcGRDQjNZWE50TGw5UGNuUkNhVzVrU1c1d2RYUW9hR0Z1Wkd4bExDQnBibkIxZEU1aGJXVnpWVlJHT0VWdVkyOWtaV1JiYVc1a1pYaGRMQ0JwYm5CMWRGUmxibk52Y2toaGJtUnNaWE5iYVYwcE8xeHVJQ0FnSUNBZ0lDQnBaaUFvWlhKeWIzSkRiMlJsSUNFOVBTQXdLU0I3WEc0Z0lDQWdJQ0FnSUNBZ1kyaGxZMnRNWVhOMFJYSnliM0lvWUVOaGJpZDBJR0pwYm1RZ2FXNXdkWFJiSkh0cGZWMGdabTl5SUhObGMzTnBiMjQ5Skh0elpYTnphVzl1U1dSOUxtQXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUM4dklIQnliMk5sYzNNZ2NISmxMV0ZzYkc5allYUmxaQ0J2ZFhSd2RYUnpYRzRnSUNBZ0lDQm1iM0lnS0d4bGRDQnBJRDBnTURzZ2FTQThJRzkxZEhCMWRFTnZkVzUwT3lCcEt5c3BJSHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdhVzVrWlhnZ1BTQnZkWFJ3ZFhSSmJtUnBZMlZ6VzJsZE8xeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCc2IyTmhkR2x2YmlBOUlHOTFkSEIxZEZSbGJuTnZjbk5iYVYwL0xsc3pYVHNnSUM4dklIVnVaR1ZtYVc1bFpDQnRaV0Z1Y3lCdmRYUndkWFFnYVhNZ2JtOTBJSEJ5WlMxaGJHeHZZMkYwWldRdVhHNWNiaUFnSUNBZ0lDQWdhV1lnS0d4dlkyRjBhVzl1S1NCN1hHNGdJQ0FnSUNBZ0lDQWdMeThnYjNWMGNIVjBJR2x6SUhCeVpTMWhiR3h2WTJGMFpXUXVJR0pwYm1RZ2RHaGxJSFJsYm5OdmNpNWNiaUFnSUNBZ0lDQWdJQ0JqYjI1emRDQmxjbkp2Y2tOdlpHVWdQU0IzWVhOdExsOVBjblJDYVc1a1QzVjBjSFYwS0doaGJtUnNaU3dnYjNWMGNIVjBUbUZ0WlhOVlZFWTRSVzVqYjJSbFpGdHBibVJsZUYwc0lHOTFkSEIxZEZSbGJuTnZja2hoYm1Sc1pYTmJhVjBzSURBcE8xeHVJQ0FnSUNBZ0lDQWdJR2xtSUNobGNuSnZja052WkdVZ0lUMDlJREFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR05vWldOclRHRnpkRVZ5Y205eUtHQkRZVzRuZENCaWFXNWtJSEJ5WlMxaGJHeHZZMkYwWldRZ2IzVjBjSFYwV3lSN2FYMWRJR1p2Y2lCelpYTnphVzl1UFNSN2MyVnpjMmx2Ymtsa2ZTNWdLVHRjYmlBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdMeThnYjNWMGNIVjBJR2x6SUc1dmRDQndjbVV0WVd4c2IyTmhkR1ZrTGlCeVpYTmxkQ0J3Y21WbVpYSnlaV1FnYkc5allYUnBiMjR1WEc0Z0lDQWdJQ0FnSUNBZ1kyOXVjM1FnWlhKeWIzSkRiMlJsSUQxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnZDJGemJTNWZUM0owUW1sdVpFOTFkSEIxZENob1lXNWtiR1VzSUc5MWRIQjFkRTVoYldWelZWUkdPRVZ1WTI5a1pXUmJhVzVrWlhoZExDQXdMQ0J2ZFhSd2RYUlFjbVZtWlhKeVpXUk1iMk5oZEdsdmJuTkZibU52WkdWa1cybHVaR1Y0WFNrN1hHNGdJQ0FnSUNBZ0lDQWdhV1lnS0dWeWNtOXlRMjlrWlNBaFBUMGdNQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZMmhsWTJ0TVlYTjBSWEp5YjNJb1lFTmhiaWQwSUdKcGJtUWdiM1YwY0hWMFd5UjdhWDFkSUhSdklDUjdiM1YwY0hWMFVISmxabVZ5Y21Wa1RHOWpZWFJwYjI1elcybGRmU0JtYjNJZ2MyVnpjMmx2Ymowa2UzTmxjM05wYjI1SlpIMHVZQ2s3WEc0Z0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQmhZM1JwZG1WVFpYTnphVzl1Y3k1elpYUW9YRzRnSUNBZ0lDQWdJQ0FnYzJWemMybHZia2xrTEZ4dUlDQWdJQ0FnSUNBZ0lGdHpaWE56YVc5dVNHRnVaR3hsTENCcGJuQjFkRTVoYldWelZWUkdPRVZ1WTI5a1pXUXNJRzkxZEhCMWRFNWhiV1Z6VlZSR09FVnVZMjlrWldRc0lHbHZRbWx1WkdsdVoxTjBZWFJsTENCbGJtRmliR1ZIY21Gd2FFTmhjSFIxY21Vc0lIUnlkV1ZkS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0IzWVhOdExtcHpaWEJQYmxKMWJsTjBZWEowUHk0b2MyVnpjMmx2YmtoaGJtUnNaU2s3WEc0Z0lDQWdiR1YwSUdWeWNtOXlRMjlrWlRvZ2JuVnRZbVZ5TzF4dUlDQWdJR2xtSUNnaFFsVkpURVJmUkVWR1V5NUVTVk5CUWt4RlgxZEZRa2RRVlNBbUppQnBiMEpwYm1ScGJtZFRkR0YwWlNrZ2UxeHVJQ0FnSUNBZ1pYSnliM0pEYjJSbElEMGdZWGRoYVhRZ2QyRnpiUzVmVDNKMFVuVnVWMmwwYUVKcGJtUnBibWNvWEc0Z0lDQWdJQ0FnSUNBZ2MyVnpjMmx2YmtoaGJtUnNaU3dnYVc5Q2FXNWthVzVuVTNSaGRHVXVhR0Z1Wkd4bExDQnZkWFJ3ZFhSRGIzVnVkQ3dnYjNWMGNIVjBWbUZzZFdWelQyWm1jMlYwTENCeWRXNVBjSFJwYjI1elNHRnVaR3hsS1R0Y2JpQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdaWEp5YjNKRGIyUmxJRDBnWVhkaGFYUWdkMkZ6YlM1ZlQzSjBVblZ1S0Z4dUlDQWdJQ0FnSUNBZ0lITmxjM05wYjI1SVlXNWtiR1VzSUdsdWNIVjBUbUZ0WlhOUFptWnpaWFFzSUdsdWNIVjBWbUZzZFdWelQyWm1jMlYwTENCcGJuQjFkRU52ZFc1MExDQnZkWFJ3ZFhST1lXMWxjMDltWm5ObGRDd2diM1YwY0hWMFEyOTFiblFzWEc0Z0lDQWdJQ0FnSUNBZ2IzVjBjSFYwVm1Gc2RXVnpUMlptYzJWMExDQnlkVzVQY0hScGIyNXpTR0Z1Wkd4bEtUdGNiaUFnSUNCOVhHNWNiaUFnSUNCcFppQW9aWEp5YjNKRGIyUmxJQ0U5UFNBd0tTQjdYRzRnSUNBZ0lDQmphR1ZqYTB4aGMzUkZjbkp2Y2lnblptRnBiR1ZrSUhSdklHTmhiR3dnVDNKMFVuVnVLQ2t1SnlrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnWTI5dWMzUWdiM1YwY0hWME9pQlVaVzV6YjNKTlpYUmhaR0YwWVZ0ZElEMGdXMTA3WEc1Y2JpQWdJQ0JtYjNJZ0tHeGxkQ0JwSUQwZ01Ec2dhU0E4SUc5MWRIQjFkRU52ZFc1ME95QnBLeXNwSUh0Y2JpQWdJQ0FnSUdOdmJuTjBJSFJsYm5OdmNpQTlJSGRoYzIwdVNFVkJVRlV6TWx0dmRYUndkWFJXWVd4MVpYTlBabVp6WlhRZ0x5QTBJQ3NnYVYwN1hHNGdJQ0FnSUNCcFppQW9kR1Z1YzI5eUlEMDlQU0J2ZFhSd2RYUlVaVzV6YjNKSVlXNWtiR1Z6VzJsZEtTQjdYRzRnSUNBZ0lDQWdJQzh2SUc5MWRIQjFkQ0IwWlc1emIzSWdhWE1nY0hKbExXRnNiRzlqWVhSbFpDNGdibThnYm1WbFpDQjBieUJqYjNCNUlHUmhkR0V1WEc0Z0lDQWdJQ0FnSUc5MWRIQjFkQzV3ZFhOb0tHOTFkSEIxZEZSbGJuTnZjbk5iYVYwaEtUdGNiaUFnSUNBZ0lDQWdZMjl1ZEdsdWRXVTdYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJR052Ym5OMElHSmxabTl5WlVkbGRGUmxibk52Y2tSaGRHRlRkR0ZqYXlBOUlIZGhjMjB1YzNSaFkydFRZWFpsS0NrN1hHNGdJQ0FnSUNBdkx5QnpkR0ZqYXlCaGJHeHZZMkYwWlNBMElIQnZhVzUwWlhJZ2RtRnNkV1ZjYmlBZ0lDQWdJR052Ym5OMElIUmxibk52Y2tSaGRHRlBabVp6WlhRZ1BTQjNZWE50TG5OMFlXTnJRV3hzYjJNb05DQXFJRFFwTzF4dVhHNGdJQ0FnSUNCc1pYUWdhMlZsY0U5MWRIQjFkRlJsYm5OdmNpQTlJR1poYkhObE8xeHVJQ0FnSUNBZ2JHVjBJSFI1Y0dVNklGUmxibk52Y2k1VWVYQmxmSFZ1WkdWbWFXNWxaQ3dnWkdGMFlVOW1abk5sZENBOUlEQTdYRzRnSUNBZ0lDQjBjbmtnZTF4dUlDQWdJQ0FnSUNCamIyNXpkQ0JsY25KdmNrTnZaR1VnUFNCM1lYTnRMbDlQY25SSFpYUlVaVzV6YjNKRVlYUmhLRnh1SUNBZ0lDQWdJQ0FnSUNBZ2RHVnVjMjl5TENCMFpXNXpiM0pFWVhSaFQyWm1jMlYwTENCMFpXNXpiM0pFWVhSaFQyWm1jMlYwSUNzZ05Dd2dkR1Z1YzI5eVJHRjBZVTltWm5ObGRDQXJJRGdzSUhSbGJuTnZja1JoZEdGUFptWnpaWFFnS3lBeE1pazdYRzRnSUNBZ0lDQWdJR2xtSUNobGNuSnZja052WkdVZ0lUMDlJREFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQmphR1ZqYTB4aGMzUkZjbkp2Y2loZ1EyRnVKM1FnWVdOalpYTnpJRzkxZEhCMWRDQjBaVzV6YjNJZ1pHRjBZU0J2YmlCcGJtUmxlQ0FrZTJsOUxtQXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUd4bGRDQjBaVzV6YjNKRVlYUmhTVzVrWlhnZ1BTQjBaVzV6YjNKRVlYUmhUMlptYzJWMElDOGdORHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdaR0YwWVZSNWNHVWdQU0IzWVhOdExraEZRVkJWTXpKYmRHVnVjMjl5UkdGMFlVbHVaR1Y0S3l0ZE8xeHVJQ0FnSUNBZ0lDQmtZWFJoVDJabWMyVjBJRDBnZDJGemJTNUlSVUZRVlRNeVczUmxibk52Y2tSaGRHRkpibVJsZUNzclhUdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ1pHbHRjMDltWm5ObGRDQTlJSGRoYzIwdVNFVkJVRlV6TWx0MFpXNXpiM0pFWVhSaFNXNWtaWGdySzEwN1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUdScGJYTk1aVzVuZEdnZ1BTQjNZWE50TGtoRlFWQlZNekpiZEdWdWMyOXlSR0YwWVVsdVpHVjRLeXRkTzF4dUlDQWdJQ0FnSUNCamIyNXpkQ0JrYVcxeklEMGdXMTA3WEc0Z0lDQWdJQ0FnSUdadmNpQW9iR1YwSUdrZ1BTQXdPeUJwSUR3Z1pHbHRjMHhsYm1kMGFEc2dhU3NyS1NCN1hHNGdJQ0FnSUNBZ0lDQWdaR2x0Y3k1d2RYTm9LSGRoYzIwdVNFVkJVRlV6TWx0a2FXMXpUMlptYzJWMElDOGdOQ0FySUdsZEtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0IzWVhOdExsOVBjblJHY21WbEtHUnBiWE5QWm1aelpYUXBPMXh1WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJSE5wZW1VZ1BTQmthVzF6TG5KbFpIVmpaU2dvWVN3Z1lpa2dQVDRnWVNBcUlHSXNJREVwTzF4dUlDQWdJQ0FnSUNCMGVYQmxJRDBnZEdWdWMyOXlSR0YwWVZSNWNHVkZiblZ0Vkc5VGRISnBibWNvWkdGMFlWUjVjR1VwTzF4dVhHNGdJQ0FnSUNBZ0lHTnZibk4wSUhCeVpXWmxjbkpsWkV4dlkyRjBhVzl1SUQwZ2FXOUNhVzVrYVc1blUzUmhkR1UvTG05MWRIQjFkRkJ5WldabGNuSmxaRXh2WTJGMGFXOXVjMXR2ZFhSd2RYUkpibVJwWTJWelcybGRYVHRjYmx4dUlDQWdJQ0FnSUNCcFppQW9kSGx3WlNBOVBUMGdKM04wY21sdVp5Y3BJSHRjYmlBZ0lDQWdJQ0FnSUNCcFppQW9jSEpsWm1WeWNtVmtURzlqWVhScGIyNGdQVDA5SUNkbmNIVXRZblZtWm1WeUp5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0NkVGRISnBibWNnZEdWdWMyOXlJR2x6SUc1dmRDQnpkWEJ3YjNKMFpXUWdiMjRnUjFCVkxpY3BPMXh1SUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCemRISnBibWRFWVhSaE9pQnpkSEpwYm1kYlhTQTlJRnRkTzF4dUlDQWdJQ0FnSUNBZ0lHeGxkQ0JrWVhSaFNXNWtaWGdnUFNCa1lYUmhUMlptYzJWMElDOGdORHRjYmlBZ0lDQWdJQ0FnSUNCbWIzSWdLR3hsZENCcElEMGdNRHNnYVNBOElITnBlbVU3SUdrckt5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnYjJabWMyVjBJRDBnZDJGemJTNUlSVUZRVlRNeVcyUmhkR0ZKYm1SbGVDc3JYVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUcxaGVFSjVkR1Z6Vkc5U1pXRmtJRDBnYVNBOVBUMGdjMmw2WlNBdElERWdQeUIxYm1SbFptbHVaV1FnT2lCM1lYTnRMa2hGUVZCVk16SmJaR0YwWVVsdVpHVjRYU0F0SUc5bVpuTmxkRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lITjBjbWx1WjBSaGRHRXVjSFZ6YUNoM1lYTnRMbFZVUmpoVWIxTjBjbWx1WnlodlptWnpaWFFzSUcxaGVFSjVkR1Z6Vkc5U1pXRmtLU2s3WEc0Z0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJRzkxZEhCMWRDNXdkWE5vS0Z0MGVYQmxMQ0JrYVcxekxDQnpkSEpwYm1kRVlYUmhMQ0FuWTNCMUoxMHBPMXh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUM4dklFbG1JR0VnWTJWeWRHRnBiaUJ2ZFhSd2RYUW5jeUJ3Y21WbVpYSnlaV1FnYkc5allYUnBiMjRnYVhNZ1IxQlZJR0oxZENCMGFHVWdkR1Z1YzI5eUlHbHpJR1Z0Y0hSNUxDQjNaU0J6ZEdsc2JDQnVaV1ZrSUhSdklHTnlaV0YwWlNCaElFTlFWVnh1SUNBZ0lDQWdJQ0FnSUM4dklIUmxibk52Y2lCbWIzSWdhWFF1SUZSb1pYSmxJR2x6SUc1dklHMWhjSEJwYm1jZ1IxQlZJR0oxWm1abGNpQm1iM0lnWVc0Z1pXMXdkSGtnZEdWdWMyOXlMbHh1SUNBZ0lDQWdJQ0FnSUdsbUlDaHdjbVZtWlhKeVpXUk1iMk5oZEdsdmJpQTlQVDBnSjJkd2RTMWlkV1ptWlhJbklDWW1JSE5wZW1VZ1BpQXdLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCbmNIVkNkV1ptWlhJZ1BTQjNZWE50TG1welpYQkhaWFJDZFdabVpYSW9aR0YwWVU5bVpuTmxkQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCbGJHVnRaVzUwVTJsNlpTQTlJR2RsZEZSbGJuTnZja1ZzWlcxbGJuUlRhWHBsS0dSaGRHRlVlWEJsS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNobGJHVnRaVzUwVTJsNlpTQTlQVDBnZFc1a1pXWnBibVZrSUh4OElDRnBjMGR3ZFVKMVptWmxjbE4xY0hCdmNuUmxaRlI1Y0dVb2RIbHdaU2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLR0JWYm5OMWNIQnZjblJsWkNCa1lYUmhJSFI1Y0dVNklDUjdkSGx3WlgxZ0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1pHOGdibTkwSUhKbGJHVmhjMlVnZEdobElIUmxibk52Y2lCeWFXZG9kQ0J1YjNjdUlHbDBJSGRwYkd3Z1ltVWdjbVZzWldGelpXUWdkMmhsYmlCMWMyVnlJR05oYkd4eklIUmxibk52Y2k1a2FYTndiM05sS0NrdVhHNGdJQ0FnSUNBZ0lDQWdJQ0JyWldWd1QzVjBjSFYwVkdWdWMyOXlJRDBnZEhKMVpUdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ2IzVjBjSFYwTG5CMWMyZ29XMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQjBlWEJsTENCa2FXMXpMQ0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWjNCMVFuVm1abVZ5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdSdmQyNXNiMkZrT2lCM1lYTnRMbXB6WlhCRGNtVmhkR1ZFYjNkdWJHOWhaR1Z5S0dkd2RVSjFabVpsY2l3Z2MybDZaU0FxSUdWc1pXMWxiblJUYVhwbExDQjBlWEJsS1N4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCa2FYTndiM05sT2lBb0tTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCM1lYTnRMbDlQY25SU1pXeGxZWE5sVkdWdWMyOXlLSFJsYm5OdmNpazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQW5aM0IxTFdKMVptWmxjaWRjYmlBZ0lDQWdJQ0FnSUNBZ0lGMHBPMXh1SUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCMGVYQmxaRUZ5Y21GNVEyOXVjM1J5ZFdOMGIzSWdQU0IwWlc1emIzSlVlWEJsVkc5VWVYQmxaRUZ5Y21GNVEyOXVjM1J5ZFdOMGIzSW9kSGx3WlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQmtZWFJoSUQwZ2JtVjNJSFI1Y0dWa1FYSnlZWGxEYjI1emRISjFZM1J2Y2loemFYcGxLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHNWxkeUJWYVc1ME9FRnljbUY1S0dSaGRHRXVZblZtWm1WeUxDQmtZWFJoTG1KNWRHVlBabVp6WlhRc0lHUmhkR0V1WW5sMFpVeGxibWQwYUNsY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdWMyVjBLSGRoYzIwdVNFVkJVRlU0TG5OMVltRnljbUY1S0dSaGRHRlBabVp6WlhRc0lHUmhkR0ZQWm1aelpYUWdLeUJrWVhSaExtSjVkR1ZNWlc1bmRHZ3BLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHOTFkSEIxZEM1d2RYTm9LRnQwZVhCbExDQmthVzF6TENCa1lYUmhMQ0FuWTNCMUoxMHBPMXh1SUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZTQm1hVzVoYkd4NUlIdGNiaUFnSUNBZ0lDQWdkMkZ6YlM1emRHRmphMUpsYzNSdmNtVW9ZbVZtYjNKbFIyVjBWR1Z1YzI5eVJHRjBZVk4wWVdOcktUdGNiaUFnSUNBZ0lDQWdhV1lnS0hSNWNHVWdQVDA5SUNkemRISnBibWNuSUNZbUlHUmhkR0ZQWm1aelpYUXBJSHRjYmlBZ0lDQWdJQ0FnSUNCM1lYTnRMbDltY21WbEtHUmhkR0ZQWm1aelpYUXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdsbUlDZ2hhMlZsY0U5MWRIQjFkRlJsYm5OdmNpa2dlMXh1SUNBZ0lDQWdJQ0FnSUhkaGMyMHVYMDl5ZEZKbGJHVmhjMlZVWlc1emIzSW9kR1Z1YzI5eUtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNibHh1SUNBZ0lHbG1JQ2hwYjBKcGJtUnBibWRUZEdGMFpTQW1KaUFoWlc1aFlteGxSM0poY0doRFlYQjBkWEpsS1NCN1hHNGdJQ0FnSUNCM1lYTnRMbDlQY25SRGJHVmhja0p2ZFc1a1QzVjBjSFYwY3locGIwSnBibVJwYm1kVGRHRjBaUzVvWVc1a2JHVXBPMXh1SUNBZ0lDQWdZV04wYVhabFUyVnpjMmx2Ym5NdWMyVjBLRnh1SUNBZ0lDQWdJQ0FnSUhObGMzTnBiMjVKWkN4Y2JpQWdJQ0FnSUNBZ0lDQmJjMlZ6YzJsdmJraGhibVJzWlN3Z2FXNXdkWFJPWVcxbGMxVlVSamhGYm1OdlpHVmtMQ0J2ZFhSd2RYUk9ZVzFsYzFWVVJqaEZibU52WkdWa0xDQnBiMEpwYm1ScGJtZFRkR0YwWlN3Z1pXNWhZbXhsUjNKaGNHaERZWEIwZFhKbExDQm1ZV3h6WlYwcE8xeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdiM1YwY0hWME8xeHVJQ0I5SUdacGJtRnNiSGtnZTF4dUlDQWdJSGRoYzIwdWMzUmhZMnRTWlhOMGIzSmxLR0psWm05eVpWSjFibE4wWVdOcktUdGNibHh1SUNBZ0lHbHVjSFYwVkdWdWMyOXlTR0Z1Wkd4bGN5NW1iM0pGWVdOb0tIWWdQVDRnZDJGemJTNWZUM0owVW1Wc1pXRnpaVlJsYm5OdmNpaDJLU2s3WEc0Z0lDQWdiM1YwY0hWMFZHVnVjMjl5U0dGdVpHeGxjeTVtYjNKRllXTm9LSFlnUFQ0Z2QyRnpiUzVmVDNKMFVtVnNaV0Z6WlZSbGJuTnZjaWgyS1NrN1hHNGdJQ0FnYVc1d2RYUlBkWFJ3ZFhSQmJHeHZZM011Wm05eVJXRmphQ2h3SUQwK0lIZGhjMjB1WDJaeVpXVW9jQ2twTzF4dVhHNGdJQ0FnYVdZZ0tISjFiazl3ZEdsdmJuTklZVzVrYkdVZ0lUMDlJREFwSUh0Y2JpQWdJQ0FnSUhkaGMyMHVYMDl5ZEZKbGJHVmhjMlZTZFc1UGNIUnBiMjV6S0hKMWJrOXdkR2x2Ym5OSVlXNWtiR1VwTzF4dUlDQWdJSDFjYmlBZ0lDQnlkVzVQY0hScGIyNXpRV3hzYjJOekxtWnZja1ZoWTJnb2NDQTlQaUIzWVhOdExsOW1jbVZsS0hBcEtUdGNiaUFnZlZ4dWZUdGNibHh1THlvcVhHNGdLaUJsYm1RZ2NISnZabWxzYVc1blhHNGdLaTljYm1WNGNHOXlkQ0JqYjI1emRDQmxibVJRY205bWFXeHBibWNnUFNBb2MyVnpjMmx2Ymtsa09pQnVkVzFpWlhJcE9pQjJiMmxrSUQwK0lIdGNiaUFnWTI5dWMzUWdkMkZ6YlNBOUlHZGxkRWx1YzNSaGJtTmxLQ2s3WEc0Z0lHTnZibk4wSUhObGMzTnBiMjRnUFNCaFkzUnBkbVZUWlhOemFXOXVjeTVuWlhRb2MyVnpjMmx2Ymtsa0tUdGNiaUFnYVdZZ0tDRnpaWE56YVc5dUtTQjdYRzRnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0NkcGJuWmhiR2xrSUhObGMzTnBiMjRnYVdRbktUdGNiaUFnZlZ4dUlDQmpiMjV6ZENCelpYTnphVzl1U0dGdVpHeGxJRDBnYzJWemMybHZibHN3WFR0Y2JseHVJQ0F2THlCd2NtOW1hV3hsSUdacGJHVWdibUZ0WlNCcGN5QnViM1FnZFhObFpDQjVaWFFzSUdKMWRDQnBkQ0J0ZFhOMElHSmxJR1p5WldWa0xseHVJQ0JqYjI1emRDQndjbTltYVd4bFJtbHNaVTVoYldVZ1BTQjNZWE50TGw5UGNuUkZibVJRY205bWFXeHBibWNvYzJWemMybHZia2hoYm1Sc1pTazdYRzRnSUdsbUlDaHdjbTltYVd4bFJtbHNaVTVoYldVZ1BUMDlJREFwSUh0Y2JpQWdJQ0JqYUdWamEweGhjM1JGY25KdmNpZ25RMkZ1WEZ3bmRDQm5aWFFnWVc0Z2NISnZabWxzWlNCbWFXeGxJRzVoYldVdUp5azdYRzRnSUgxY2JpQWdkMkZ6YlM1ZlQzSjBSbkpsWlNod2NtOW1hV3hsUm1sc1pVNWhiV1VwTzF4dWZUdGNibHh1Wlhod2IzSjBJR052Ym5OMElHVjRkSEpoWTNSVWNtRnVjMlpsY21GaWJHVkNkV1ptWlhKeklEMGdLSFJsYm5OdmNuTTZJSEpsWVdSdmJteDVJRk5sY21saGJHbDZZV0pzWlZSbGJuTnZjazFsZEdGa1lYUmhXMTBwT2lCQmNuSmhlVUoxWm1abGNreHBhMlZiWFNBOVBpQjdYRzRnSUdOdmJuTjBJR0oxWm1abGNuTTZJRUZ5Y21GNVFuVm1abVZ5VEdsclpWdGRJRDBnVzEwN1hHNGdJR1p2Y2lBb1kyOXVjM1FnZEdWdWMyOXlJRzltSUhSbGJuTnZjbk1wSUh0Y2JpQWdJQ0JqYjI1emRDQmtZWFJoSUQwZ2RHVnVjMjl5V3pKZE8xeHVJQ0FnSUdsbUlDZ2hRWEp5WVhrdWFYTkJjbkpoZVNoa1lYUmhLU0FtSmlBblluVm1abVZ5SnlCcGJpQmtZWFJoS1NCN1hHNGdJQ0FnSUNCaWRXWm1aWEp6TG5CMWMyZ29aR0YwWVM1aWRXWm1aWElwTzF4dUlDQWdJSDFjYmlBZ2ZWeHVJQ0J5WlhSMWNtNGdZblZtWm1WeWN6dGNibjA3WEc0aUxDQWlMeThnUTI5d2VYSnBaMmgwSUNoaktTQk5hV055YjNOdlpuUWdRMjl5Y0c5eVlYUnBiMjR1SUVGc2JDQnlhV2RvZEhNZ2NtVnpaWEoyWldRdVhHNHZMeUJNYVdObGJuTmxaQ0IxYm1SbGNpQjBhR1VnVFVsVUlFeHBZMlZ1YzJVdVhHNWNiaTh2THlBOGNtVm1aWEpsYm1ObElHeHBZajFjSW5kbFluZHZjbXRsY2x3aUlDOCtYRzVjYmk4dlhHNHZMeUFxSUhSNWNHVWdhR0ZqYXlCbWIzSWdYQ0pJVkUxTVNXMWhaMlZGYkdWdFpXNTBYQ0pjYmk4dlhHNHZMeUJwYmlCMGVYQmxjMk55YVhCMExDQjBhR1VnZEhsd1pTQnZaaUJjSWtoVVRVeEpiV0ZuWlVWc1pXMWxiblJjSWlCcGN5QmtaV1pwYm1Wa0lHbHVJR3hwWWk1a2IyMHVaQzUwY3l3Z2QyaHBZMmdnYVhNZ1kyOXVabXhwWTNRZ2QybDBhQ0JzYVdJdWQyVmlkMjl5YTJWeUxtUXVkSE11WEc0dkx5QjNhR1Z1SUhkbElIVnpaU0IzWldKM2IzSnJaWElzSUhSb1pTQnNhV0l1ZDJWaWQyOXlhMlZ5TG1RdWRITWdkMmxzYkNCaVpTQjFjMlZrTENCM2FHbGphQ0JrYjJWeklHNXZkQ0JvWVhabElFaFVUVXhKYldGblpVVnNaVzFsYm5RZ1pHVm1hVzVsWkM1Y2JpOHZYRzR2THlCM1pTQjNhV3hzSUdkbGRDQjBhR1VnWm05c2JHOTNhVzVuSUdWeWNtOXljeUJqYjIxd2JHRnBibWx1WnlCMGFHRjBJRWhVVFV4SmJXRm5aVVZzWlcxbGJuUWdhWE1nYm05MElHUmxabWx1WldRNlhHNHZMMXh1THk4Z1BUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQxY2JpOHZYRzR2THlBdUxpOWpiMjF0YjI0dlpHbHpkQzlqYW5NdmRHVnVjMjl5TFdaaFkzUnZjbmt1WkM1MGN6b3hPRGM2TWprZ0xTQmxjbkp2Y2lCVVV6STFOVEk2SUVOaGJtNXZkQ0JtYVc1a0lHNWhiV1VnSjBoVVRVeEpiV0ZuWlVWc1pXMWxiblFuTGlCRWFXUWdlVzkxSUcxbFlXNWNiaTh2SUNkSVZFMU1URWxGYkdWdFpXNTBKejljYmk4dlhHNHZMeUF4T0RjZ0lDQWdJR1p5YjIxSmJXRm5aU2hwYldGblpVVnNaVzFsYm5RNklFaFVUVXhKYldGblpVVnNaVzFsYm5Rc0lHOXdkR2x2Ym5NL09pQlVaVzV6YjNKR2NtOXRTVzFoWjJWRmJHVnRaVzUwVDNCMGFXOXVjeWs2WEc0dkx5QlFjbTl0YVhObFBGUjVjR1ZrVkdWdWMyOXlQQ2RtYkc5aGRETXlKejRnZkNCVWVYQmxaRlJsYm5OdmNqd25kV2x1ZERnblBqNDdYRzR2THlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDUrZm41K2ZuNStmbjUrZm41K2ZuNWNiaTh2WEc0dkx5QnViMlJsWDIxdlpIVnNaWE12UUhkbFltZHdkUzkwZVhCbGN5OWthWE4wTDJsdVpHVjRMbVF1ZEhNNk9ETTZOeUF0SUdWeWNtOXlJRlJUTWpVMU1qb2dRMkZ1Ym05MElHWnBibVFnYm1GdFpTQW5TRlJOVEVsdFlXZGxSV3hsYldWdWRDY3VJRVJwWkNCNWIzVWdiV1ZoYmx4dUx5OGdKMGhVVFV4TVNVVnNaVzFsYm5RblAxeHVMeTljYmk4dklEZ3pJQ0FnSUNCOElFaFVUVXhKYldGblpVVnNaVzFsYm5SY2JpOHZJQ0FnSUNBZ0lDQWdJSDUrZm41K2ZuNStmbjUrZm41K2ZuNWNiaTh2WEc0dkx5QTlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBWeHVMeTljYmk4dklHQklWRTFNU1cxaFoyVkZiR1Z0Wlc1MFlDQnBjeUJ2Ym14NUlIVnpaV1FnYVc0Z2RIbHdaU0JrWldOc1lYSmhkR2x2YmlCaGJtUWdibTkwSUdsdUlISmxZV3dnWTI5a1pTNGdVMjhnZDJVZ1pHVm1hVzVsSUdsMElHRnpJR0IxYm10dWIzZHVZQ0JvWlhKbElIUnZYRzR2THlCaWVYQmhjM01nZEdobElIUjVjR1VnWTJobFkyc3VYRzR2TDF4dVpHVmpiR0Z5WlNCbmJHOWlZV3dnZTF4dUlDQjBlWEJsSUVoVVRVeEpiV0ZuWlVWc1pXMWxiblFnUFNCMWJtdHViM2R1TzF4dWZWeHVYRzVwYlhCdmNuUWdlMDl5ZEZkaGMyMU5aWE56WVdkbExDQlRaWEpwWVd4cGVtRmliR1ZVWlc1emIzSk5aWFJoWkdGMFlYMGdabkp2YlNBbkxpNHZjSEp2ZUhrdGJXVnpjMkZuWlhNbk8xeHVhVzF3YjNKMElIdGpjbVZoZEdWVFpYTnphVzl1TENCamIzQjVSbkp2YlVWNGRHVnlibUZzUW5WbVptVnlMQ0JsYm1SUWNtOW1hV3hwYm1jc0lHVjRkSEpoWTNSVWNtRnVjMlpsY21GaWJHVkNkV1ptWlhKekxDQnBibWwwUlhBc0lHbHVhWFJTZFc1MGFXMWxMQ0J5Wld4bFlYTmxVMlZ6YzJsdmJpd2djblZ1ZlNCbWNtOXRJQ2N1TGk5M1lYTnRMV052Y21VdGFXMXdiQ2M3WEc1cGJYQnZjblFnZTJsdWFYUnBZV3hwZW1WWFpXSkJjM05sYldKc2VYMGdabkp2YlNBbkxpNHZkMkZ6YlMxbVlXTjBiM0o1Snp0Y2JseHVjMlZzWmk1dmJtMWxjM05oWjJVZ1BTQW9aWFk2SUUxbGMzTmhaMlZGZG1WdWREeFBjblJYWVhOdFRXVnpjMkZuWlQ0cE9pQjJiMmxrSUQwK0lIdGNiaUFnWTI5dWMzUWdlM1I1Y0dVc0lHbHVJRG9nYldWemMyRm5aWDBnUFNCbGRpNWtZWFJoTzF4dUlDQjBjbmtnZTF4dUlDQWdJSE4zYVhSamFDQW9kSGx3WlNrZ2UxeHVJQ0FnSUNBZ1kyRnpaU0FuYVc1cGRDMTNZWE50SnpwY2JpQWdJQ0FnSUNBZ2FXNXBkR2xoYkdsNlpWZGxZa0Z6YzJWdFlteDVLRzFsYzNOaFoyVWhMbmRoYzIwcFhHNGdJQ0FnSUNBZ0lDQWdJQ0F1ZEdobGJpaGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW9LU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBibWwwVW5WdWRHbHRaU2h0WlhOellXZGxJU2t1ZEdobGJpaGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBb0tTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J3YjNOMFRXVnpjMkZuWlNoN2RIbHdaWDBwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaWEp5SUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIQnZjM1JOWlhOellXZGxLSHQwZVhCbExDQmxjbko5S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHVnljaUE5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQndiM04wVFdWemMyRm5aU2g3ZEhsd1pTd2daWEp5ZlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQWdJR0p5WldGck8xeHVJQ0FnSUNBZ1kyRnpaU0FuYVc1cGRDMWxjQ2M2SUh0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnZTJWd1RtRnRaU3dnWlc1MmZTQTlJRzFsYzNOaFoyVWhPMXh1SUNBZ0lDQWdJQ0JwYm1sMFJYQW9aVzUyTENCbGNFNWhiV1VwWEc0Z0lDQWdJQ0FnSUNBZ0lDQXVkR2hsYmloY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBb0tTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCd2IzTjBUV1Z6YzJGblpTaDdkSGx3WlgwcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaWEp5SUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEJ2YzNSTlpYTnpZV2RsS0h0MGVYQmxMQ0JsY25KOUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJQ0FnWW5KbFlXczdYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQmpZWE5sSUNkamIzQjVMV1p5YjIwbk9pQjdYRzRnSUNBZ0lDQWdJR052Ym5OMElIdGlkV1ptWlhKOUlEMGdiV1Z6YzJGblpTRTdYRzRnSUNBZ0lDQWdJR052Ym5OMElHSjFabVpsY2tSaGRHRWdQU0JqYjNCNVJuSnZiVVY0ZEdWeWJtRnNRblZtWm1WeUtHSjFabVpsY2lrN1hHNGdJQ0FnSUNBZ0lIQnZjM1JOWlhOellXZGxLSHQwZVhCbExDQnZkWFE2SUdKMVptWmxja1JoZEdGOUlHRnpJRTl5ZEZkaGMyMU5aWE56WVdkbEtUdGNiaUFnSUNBZ0lDQWdZbkpsWVdzN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCallYTmxJQ2RqY21WaGRHVW5PaUI3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJSHR0YjJSbGJDd2diM0IwYVc5dWMzMGdQU0J0WlhOellXZGxJVHRjYmlBZ0lDQWdJQ0FnWTNKbFlYUmxVMlZ6YzJsdmJpaHRiMlJsYkN3Z2IzQjBhVzl1Y3lsY2JpQWdJQ0FnSUNBZ0lDQWdJQzUwYUdWdUtGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITmxjM05wYjI1TlpYUmhaR0YwWVNBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J3YjNOMFRXVnpjMkZuWlNoN2RIbHdaU3dnYjNWME9pQnpaWE56YVc5dVRXVjBZV1JoZEdGOUlHRnpJRTl5ZEZkaGMyMU5aWE56WVdkbEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1Z5Y2lBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J3YjNOMFRXVnpjMkZuWlNoN2RIbHdaU3dnWlhKeWZTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0FnSUdKeVpXRnJPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdZMkZ6WlNBbmNtVnNaV0Z6WlNjNlhHNGdJQ0FnSUNBZ0lISmxiR1ZoYzJWVFpYTnphVzl1S0cxbGMzTmhaMlVoS1R0Y2JpQWdJQ0FnSUNBZ2NHOXpkRTFsYzNOaFoyVW9lM1I1Y0dWOUtUdGNiaUFnSUNBZ0lDQWdZbkpsWVdzN1hHNGdJQ0FnSUNCallYTmxJQ2R5ZFc0bk9pQjdYRzRnSUNBZ0lDQWdJR052Ym5OMElIdHpaWE56YVc5dVNXUXNJR2x1Y0hWMFNXNWthV05sY3l3Z2FXNXdkWFJ6TENCdmRYUndkWFJKYm1ScFkyVnpMQ0J2Y0hScGIyNXpmU0E5SUcxbGMzTmhaMlVoTzF4dUlDQWdJQ0FnSUNCeWRXNG9jMlZ6YzJsdmJrbGtMQ0JwYm5CMWRFbHVaR2xqWlhNc0lHbHVjSFYwY3l3Z2IzVjBjSFYwU1c1a2FXTmxjeXdnYm1WM0lFRnljbUY1S0c5MWRIQjFkRWx1WkdsalpYTXViR1Z1WjNSb0tTNW1hV3hzS0c1MWJHd3BMQ0J2Y0hScGIyNXpLVnh1SUNBZ0lDQWdJQ0FnSUNBZ0xuUm9aVzRvWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYjNWMGNIVjBjeUE5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYjNWMGNIVjBjeTV6YjIxbEtHOGdQVDRnYjFzelhTQWhQVDBnSjJOd2RTY3BLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIQnZjM1JOWlhOellXZGxLSHQwZVhCbExDQmxjbkk2SUNkUWNtOTRlU0JrYjJWeklHNXZkQ0J6ZFhCd2IzSjBJRzV2YmkxamNIVWdkR1Z1YzI5eUlHeHZZMkYwYVc5dUxpZDlLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIQnZjM1JOWlhOellXZGxLRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdlM1I1Y0dVc0lHOTFkRG9nYjNWMGNIVjBjMzBnWVhNZ1QzSjBWMkZ6YlUxbGMzTmhaMlVzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JsZUhSeVlXTjBWSEpoYm5ObVpYSmhZbXhsUW5WbVptVnljeWhiTGk0dWFXNXdkWFJ6TENBdUxpNXZkWFJ3ZFhSelhTQmhjeUJUWlhKcFlXeHBlbUZpYkdWVVpXNXpiM0pOWlhSaFpHRjBZVnRkS1NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JsY25JZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY0c5emRFMWxjM05oWjJVb2UzUjVjR1VzSUdWeWNuMHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnSUNCaWNtVmhhenRjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJR05oYzJVZ0oyVnVaQzF3Y205bWFXeHBibWNuT2x4dUlDQWdJQ0FnSUNCbGJtUlFjbTltYVd4cGJtY29iV1Z6YzJGblpTRXBPMXh1SUNBZ0lDQWdJQ0J3YjNOMFRXVnpjMkZuWlNoN2RIbHdaWDBwTzF4dUlDQWdJQ0FnSUNCaWNtVmhhenRjYmlBZ0lDQWdJR1JsWm1GMWJIUTZYRzRnSUNBZ2ZWeHVJQ0I5SUdOaGRHTm9JQ2hsY25JcElIdGNiaUFnSUNCd2IzTjBUV1Z6YzJGblpTaDdkSGx3WlN3Z1pYSnlmU0JoY3lCUGNuUlhZWE50VFdWemMyRm5aU2s3WEc0Z0lIMWNibjA3WEc0aVhTd0tJQ0FpYldGd2NHbHVaM01pT2lBaU96czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJMRTFCUVdFc1ZVRkJhME1zWTBGQmMwTTdRVUZCY2tZN1FVRkJRVHRCUVVGUExFMUJRVTBzVjBGQlZ6dEJRVUZwUWl4TlFVRk5MR1ZCUVdVN1FVRkJhVUlzVFVGQlRTeHRRa0ZCYlVJN1FVRkJRVHRCUVVGQk96czdRVU5CZUVjN1FVRkJRVHRCUVVGQkxHZENRVUZCUVR0QlFVRkJPMEZCUVVFc1RVRkJZVUU3UVVGQllqdEJRVUZCTzBGQlFVOHNUVUZCVFVFc1VVRkJUenRCUVVGQk8wRkJRVUU3T3p0QlEwRndRanRCUVVGQk8wRkJRVUU3UVVGRFFTeFZRVUZKTEZkQlFWY3NUVUZCVFR0QlFVTnVRaXhaUVVGSkxHRkJRV0VzVDBGQlR5eGhRVUZoTEdWQlFXVXNVMEZCVXl4blFrRkJaMElzVTBGQlV5eGpRVUZqTEUxQlFVMDdRVUZETVVjc1dVRkJTU3hQUVVGUExHVkJRV1U3UVVGQllTeDFRa0ZCWVN4alFVRmpPMEZCUTJ4RkxHVkJRMFlzVTBGQlV5eFpRVUZaTEVOQlFVTXNSMEZCUnp0QlFVVjZRaXhqUVVGSkxFbEJRVVVzVjBGQlZTeEhRVUZGTzBGQlFVVXNXVUZCUlN4UlFVRk5MRWxCUVVrc1VVRkJVU3hEUVVGRExFZEJRVVVzVFVGQlNUdEJRVUZETEdkQ1FVRkZPMEZCUVVVc1owSkJRVVU3UVVGQlFTeFZRVUZETEVOQlFVTTdRVUZCUlN4alFVRkpMRXRCUVVjc1QwRkJUeXhQUVVGUExFTkJRVU1zUjBGQlJTeERRVUZETEVkQlFVVXNTMEZCUnl4clFrRkJhVUlzUzBGQlJ5eFpRVUZWTEU5QlFVOHNVVUZCVHl4SlFVRkZMR05CUVZrc1QwRkJUeXhsUVVGakxFdEJRVWNzV1VGQlZTeFBRVUZQTEZkQlFWTXNXVUZCVlN4UFFVRlBMRkZCUVZFc1dVRkJWU3haUVVGVkxFOUJRVThzVVVGQlVTeFRRVUZUTEUxQlFVc3NTVUZCUlN4SlFVRkhMRWRCUVVVc1IwRkJSVHRCUVVOMlVpeGpRVUZITEVsQlFVYzdRVUZCUXl4blFrRkJTU3hMUVVGSExIVkRRVUZqTEVsQlFVVTdRVUZCWjBJc1owSkJRVVVzU1VGQlJTeEZRVUZGTEZGQlFWRXNRMEZCUXl4SlFVRkZMRTFCUVVrc1dVRkJWVHRCUVVGSkxHZENRVUZGTEVOQlFVTXNSMEZCUlN4TlFVRkpPMEZCUVVNc2EwSkJRVVVzUlVGQlJTeERRVUZETEVsQlFVVXNTVUZCU1N4SlFVRkpMRU5CUVVNc1NVRkJSU3hGUVVGRkxGVkJRVlVzUTBGQlF6dEJRVUZGTEhGQ1FVRlBMRWRCUVVjc1lVRkJZU3hIUVVGRkxFbEJRVVVzVTBGQlR5eE5RVUZOTzBGQlFVRXNXVUZCUXp0QlFVRkZMR2RDUVVGRkxFOUJRVWM3UVVGQlF5eHJRa0ZCUlN4RlFVRkZMRWRCUVVVc1NVRkJSVHRCUVVGRkxHZENRVUZGTEZkQlFWTXNTVUZCUlN4SlFVRkpMRmRCUVZjc1EwRkJRenRCUVVGSExIRkNRVUZQTzBGQlFVRXNXVUZCUXp0QlFVRkZMR2RDUVVGRkxFTkJRVU1zUjBGQlJTeEhRVUZGTEVkQlFVVXNTVUZCUlN4VFFVRkxPMEZCUVVNc2EwSkJRVVVzUlVGQlJTeERRVUZETEVsQlFVVXNTVUZCU1N4SlFVRkpMRU5CUVVNc1NVRkJSU3hGUVVGRkxGVkJRVlVzUTBGQlF6dEJRVUZGTEdsQ1FVRkhMRk5CUVZNc1IwRkJSU3hKUVVGRkxGTkJRVThzVVVGQlR5eERRVUZETEVkQlFVVXNUVUZCU1R0QlFVRkRMRzlDUVVGRkxFVkJRVVVzUTBGQlF5eEpRVUZGTEVWQlFVVXNTVUZCUlN4RlFVRkZMRk5CUVU4c1EwRkJRenRCUVVGQkxHTkJRVU1zUTBGQlF6dEJRVUZCTEZsQlFVTTdRVUZCUlN4aFFVRkRMRVZCUVVVc1pVRkJZU3hKUVVGRkxGRkJRVkVzUzBGQlN5eFhRVUZUTEV0QlFVY3NVVUZCVVN4TFFVRkxMRU5CUVVNc1JVRkJSU3hSUVVGUkxFOUJRVTBzUjBGQlJ6dEJRVUZITEc5Q1FVRlJMRXRCUVVzc1RVRkJUU3hEUVVGRE8wRkJRVVVzWTBGQlJTeFZRVUZSTEUxQlFVazdRVUZCUVN4VlFVRTBRaXhYUVVGVExFMUJRVWs3UVVGQlJTeG5Ra0ZCUlN4SlFVTnVaaXhMUVVGTExGTkJRVk1zVDBGQlN5eGxRVUZoTEU5QlFVOHNXVUZCVlN4VFFVRlRMR3RDUVVGblFpeEpRVUZGTEZOQlFWTXNZMEZCWXl4TlFVRkxMR1ZCUVdFc1NVRkJSU3hoUVVGWkxFMUJRVWtzUlVGQlJTeFJRVUZSTEU5QlFVOHNTVUZCUlN4SlFVRkZMRVZCUVVVc1QwRkJUeXhIUVVGRkxFVkJRVVVzVVVGQlVTeFZRVUZUTEVWQlFVVXNSVUZCUlN4WlFVRlpMRWRCUVVjc1NVRkJSU3hEUVVGRExFbEJRVVVzU1VGQlJTeEpRVUZITEVsQlFVVXNUMEZCUnp0QlFVRkRMR3RDUVVGSkxFbEJRVVVzU1VGQlNUdEJRVUZsTEdkQ1FVRkZMRXRCUVVzc1QwRkJUU3hIUVVGRkxFdEJRVVU3UVVGQlJTeG5Ra0ZCUlN4TFFVRkxMRWxCUVVrN1FVRkJSU3h4UWtGQlR5eEZRVUZGTzBGQlFVRXNXVUZCV1N4SFFVRkZMRTFCUVVrc1NVRkJSU3hQUVVGSE8wRkJRVU1zYTBKQlFVa3NTVUZCUlN4SlFVRkpPMEZCUVdVc1owSkJRVVVzUzBGQlN5eFBRVUZOTEVkQlFVVXNTMEZCUlR0QlFVRkZMR2RDUVVGRkxHVkJRV0U3UVVGQll5eG5Ra0ZCUlN4TFFVRkxMRWxCUVVrN1FVRkJSU3h4UWtGQlR5eEpRVUZKTEZkQlFWY3NSVUZCUlN4UlFVRlJPMEZCUVVFc1dVRkJReXhKUVVGSExFbEJRVVVzUTBGQlF5eEhRVUZGTEVkQlFVVXNUVUZCU1R0QlFVRkRMR3RDUVVGSkxFbEJRVVVzU1VGQlNUdEJRVUZsTEdkQ1FVRkZMRXRCUVVzc1QwRkJUU3hIUVVGRkxFbEJRVVU3UVVGQlJTeG5Ra0ZCUlN4bFFVTXpaVHRCUVVGakxHZENRVUZGTEZOQlFVOHNUVUZCU1R0QlFVRkRMSFZDUVVGTExFVkJRVVVzVlVGQlVTeExRVUZITEVWQlFVVXNWVUZCVVN4RlFVRkZMRmRCUVZNc1JVRkJSU3hGUVVGRkxGRkJRVkVzU1VGQlJTeEZRVUZGTzBGQlFVRXNZMEZCUXp0QlFVRkZMR2RDUVVGRkxGVkJRVkU3UVVGQlJTeG5Ra0ZCUlN4TFFVRkxMRWxCUVVrN1FVRkJRU3haUVVGRE8wRkJRVVVzWTBGQlNTeExRVUZITEZGQlFWRXNTVUZCU1N4TFFVRkxMRTlCUVU4c1IwRkJSU3hKUVVGRkxGRkJRVkVzVFVGQlRTeExRVUZMTEU5QlFVODdRVUZCUlN4cFFrRkJUeXhQUVVGUExFZEJRVVVzUlVGQlJUdEJRVUZGTEdWQlFVYzdRVUZCU3l4elFrRkJWU3hQUVVGUExHVkJRV0VzUlVGQlJTeHBRMEZCYVVNN1FVRkJSU3hqUVVGSkxFZEJRVVVzUzBGQlJ5eFBRVUZITEVkQlFVVXNSMEZCUlN4SFFVRkZMRWRCUVVVN1FVRkRiRk1zYlVKQlFWTXNTMEZCU1R0QlFVRkRMR2RDUVVGSkxFbEJRVVVzUlVGQlJUdEJRVUZQTEdOQlFVVXNVVUZCVFN4SlFVRkZMRWxCUVVrc1ZVRkJWU3hEUVVGRE8wRkJRVVVzWTBGQlJTeFRRVUZQTEVsQlFVa3NWMEZCVnl4RFFVRkRPMEZCUVVVc1kwRkJSU3hUUVVGUExFbEJRVVVzU1VGQlNTeFhRVUZYTEVOQlFVTTdRVUZCUlN4alFVRkZMRlZCUVZFc1NVRkJTU3haUVVGWkxFTkJRVU03UVVGQlJTeGpRVUZGTEZOQlFVOHNTVUZCUlN4SlFVRkpMRmRCUVZjc1EwRkJRenRCUVVGRkxHTkJRVVVzVlVGQlVTeEpRVUZGTEVsQlFVa3NXVUZCV1N4RFFVRkRPMEZCUVVVc1kwRkJSU3hWUVVGUkxFbEJRVWtzWVVGQllTeERRVUZETzBGQlFVVXNZMEZCUlN4VlFVRlJMRXRCUVVjc1NVRkJTU3hoUVVGaExFTkJRVU03UVVGQlFTeFZRVUZETzBGQlFVTXNZMEZCU1N4SlFVRkZMRU5CUVVNc1IwRkJSU3hKUVVGRkxFTkJRVU1zUjBGQlJTeExRVUZITEVOQlFVTXNSMEZCUlN4SlFVRkZMRWRCUVVVc1NVRkJSU3hOUVVGTExFbEJRVVU3UVVGQlN5eHRRa0ZCVXl4RlFVRkZMRWRCUVVVN1FVRkJReXhuUWtGQlJTeGhRVUZYTEVsQlFVVTdRVUZCU1N4alFVRkZMRU5CUVVNN1FVRkJSU3hwUWtGQlJ6dEJRVUZITEdkQ1FVRkZMRWxCUVVrc1dVRkJXU3hoUVVGaExFbEJRVVVzTUVOQlFUQkRPMEZCUVVVc1kwRkJSU3hEUVVGRE8wRkJRVVVzYTBKQlFVMDdRVUZCUVN4VlFVRkZPMEZCUTNCaUxHTkJRVWtzUzBGQlJ5eFBRVUZITEVWQlFVVXNWMEZCVnl4MVEwRkJkVU1zUjBGQlJTeEpRVUZGTEU5QlFVY3NSVUZCUlN4WFFVRlhMRk5CUVZNc1IwRkJSVHRCUVVGRkxHTkJRVVU3UVVGQk9FSXNZMEZCUnl4RFFVRkRMRWRCUVVjc1EwRkJReXhIUVVGRk8wRkJRVU1zWjBKQlFVa3NTMEZCUnp0QlFVRkZMR2RDUVVGRkxFVkJRVVVzWVVGQlZ5eEZRVUZGTEZkQlFWY3NTVUZCUnl4RFFVRkRMRWxCUVVVc1NVRkJSVHRCUVVGQkxGVkJRVVU3UVVGQlF5eHRRa0ZCVXl4SFFVRkhMRWRCUVVVN1FVRkJReXhuUWtGQlJ6dEJRVUZGTEhGQ1FVRlBMRVZCUVVVc1EwRkJRenRCUVVGRkxHdENRVUZMTzBGQlFVRXNWVUZCYTBRN1FVRkRhbElzYlVKQlFWTXNSMEZCUnl4SFFVRkZPMEZCUVVNc1owSkJRVWNzVFVGQlNTeEhRVUZGTzBGQlFVTXNhMEpCUVVjc1kwRkJXU3hQUVVGUExGTkJRVThzUTBGQlF5eEZRVUZGTEVOQlFVTTdRVUZCUlN4MVFrRkJUeXhOUVVGTkxFZEJRVVVzUlVGQlF5eGhRVUZaTEdOQlFXRXNRMEZCUXl4RlFVRkZMRXRCUVVzc1QwRkJSenRCUVVGRExITkNRVUZITEVOQlFVTXNSVUZCUlR0QlFVRkhMREJDUVVGTExIbERRVUYxUXl4SlFVRkZPMEZCUVVrc2VVSkJRVThzUlVGQlJTeFpRVUZaTzBGQlFVRXNaMEpCUVVNc1EwRkJReXhGUVVGRkxFMUJRVTBzVFVGQlNTeEhRVUZITEVOQlFVTXNRMEZCUXp0QlFVRkZMR3RDUVVGSE8wRkJRVVVzZFVKQlFVOHNTVUZCU1N4UlFVRlJMRU5CUVVNc1IwRkJSU3hOUVVGSk8wRkJRVU1zYjBKQlFVVXNSMEZCUlN4UFFVRkhMRVZCUVVVc1NVRkJTU3hYUVVGWExFTkJRVU1zUTBGQlF5eEhRVUZGTEVOQlFVTTdRVUZCUVN4blFrRkJReXhEUVVGRE8wRkJRVUVzV1VGQlF6dEJRVUZETEcxQ1FVRlBMRkZCUVZFc1VVRkJVU3hGUVVGRkxFdEJRVXNzVFVGQlNTeEhRVUZITEVOQlFVTXNRMEZCUXp0QlFVRkJMRlZCUVVNN1FVRkJReXh0UWtGQlV5eEhRVUZITEVkQlFVVXNSMEZCUlN4SFFVRkZPMEZCUVVNc2JVSkJRVThzUjBGQlJ5eERRVUZETEVWQlFVVXNTMEZCU3l4UFFVRkhMRmxCUVZrc1dVRkJXU3hIUVVGRkxFTkJRVU1zUTBGQlF5eEZRVUZGTEV0QlFVc3NUMEZCUnl4RFFVRkRMRVZCUVVVc1MwRkJTeXhIUVVGRkxFOUJRVWM3UVVGQlF5eG5Ra0ZCUlN3d1EwRkJNRU1zUTBGQlF5eEZRVUZGTzBGQlFVVXNaMEpCUVVVc1EwRkJRenRCUVVGQkxGbEJRVU1zUTBGQlF6dEJRVUZCTEZWQlFVTTdRVUZEYm1Rc2JVSkJRVk1zUjBGQlJ5eEhRVUZGTEVkQlFVVTdRVUZCUXl4blFrRkJTU3hKUVVGRk8wRkJRVVVzYlVKQlFVMHNZMEZCV1N4UFFVRlBMRmxCUVZrc2QwSkJRWE5DTEVkQlFVY3NRMEZCUXl4TFFVRkhMRVZCUVVVc1EwRkJReXhMUVVGSExFMUJRVWtzWTBGQldTeFBRVUZQTEZGQlFVMHNSMEZCUnl4SFFVRkZMRWRCUVVVc1EwRkJReXhKUVVGRkxFMUJRVTBzUjBGQlJTeEZRVUZETEdGQlFWa3NZMEZCWVN4RFFVRkRMRVZCUVVVc1MwRkJTeXhQUVVGSExGbEJRVmtzY1VKQlFYRkNMRWRCUVVVc1EwRkJReXhGUVVGRkxFdEJRVXNzUjBGQlJTeFRRVUZUTEVkQlFVVTdRVUZCUXl4blFrRkJSU3hyUTBGQmEwTXNRMEZCUXl4RlFVRkZPMEZCUVVVc1owSkJRVVVzTWtOQlFUSkRPMEZCUVVVc2NVSkJRVThzUjBGQlJ5eEhRVUZGTEVkQlFVVXNRMEZCUXp0QlFVRkJMRmxCUVVNc1EwRkJReXhEUVVGRE8wRkJRVUVzVlVGQlF6dEJRVU42Vml4alFVRkpMRWRCUVVVc1MwRkJSeXhGUVVGRExGRkJRVThzUTBGQlF5eEhRVUZGTEVkQlFVVXNSMEZCUlN4TlFVRkpPMEZCUVVNc1owSkJRVWNzWlVGQllTeFBRVUZQTEV0QlFVY3NRMEZCUXl4RlFVRkZPMEZCUVVjc2NVSkJRVTg3UVVGQlJTeG5Ra0ZCUlN4RlFVRkZMRTFCUVVrc1EwRkJRenRCUVVGRkxHTkJRVVVzVjBGQlZ5eEpRVUZKTEUxQlFVa3NTVUZCUlN4RlFVRkZMRlZCUVZVc1EwRkJRenRCUVVGSExHZENRVUZGTEVWQlFVVXNSMEZCUnl4SlFVRkpMRU5CUVVNN1FVRkJSU3huUWtGQlJ5eERRVUZETzBGQlFVVXNjVUpCUVU4N1FVRkJSU3h0UWtGQlN6dEJRVUZGTEcxQ1FVRkxPMEZCUVVVc1owSkJRVWNzU1VGQlJTeEpRVUZGTEVWQlFVVTdRVUZCVnl4eFFrRkJUenRCUVVGRkxHZENRVUZITzBGQlFVTXNjVUpCUVU4c1JVRkJSU3hKUVVGSkxFVkJRVVVzVTBGQlV5eEhRVUZGTEVsQlFVVXNRMEZCUXl4SFFVRkZMRTFCUVVrc1RVRkJTU3hEUVVGRExFZEJRVVU3UVVGQlFTeFpRVUZETEZGQlFVMDdRVUZCUXl4eFFrRkJUenRCUVVGQkxGbEJRVU03UVVGQlFTeFZRVUZETEVWQlFVTTdRVUZCUlN4dFFrRkJVeXhIUVVGSExFZEJRVVU3UVVGQlF5eHBRa0ZCU3l4TFFVRkhMRWxCUVVVN1FVRkJSeXhwUWtGQlN5eExRVUZITEZOQlFWTXNSMEZCUlR0QlFVRkRMR2RDUVVGRkxFdEJRVXNzUzBGQlJ5eE5RVUZKTEUxQlFVa3NRMEZCUXl4SlFVRkZPMEZCUVVFc1dVRkJRenRCUVVGRkxHbENRVUZMTEV0QlFVY3NVMEZCVXl4SFFVRkZPMEZCUVVNc1owSkJRVVVzUzBGQlN5eExRVUZITEUxQlFVa3NUVUZCU1N4RFFVRkRMRWxCUVVVN1FVRkJRU3haUVVGRE8wRkJRVVVzYVVKQlFVc3NTMEZCUnl4VFFVRlRMRWRCUVVVc1IwRkJSVHRCUVVGRExHMUNRVUZMTEVkQlFVYzdRVUZCUlN4dFFrRkJTeXhIUVVGSExFTkJRVU03UVVGQlJTeHRRa0ZCU3l4SFFVRkhMRU5CUVVNN1FVRkJRU3haUVVGRE8wRkJRVVVzYVVKQlFVc3NTMEZCUnl4WFFVRlZPMEZCUVVNc1owSkJRVVVzUzBGQlN5eExRVUZITEU5QlFVc3NUVUZCU1N4RFFVRkRMRWxCUVVVN1FVRkJRU3haUVVGRE8wRkJRVUVzVlVGQlF6dEJRVU40WkN4alFVRkpMRXRCUVVjc1IwRkJSU3hMUVVGSExFZEJRVVVzUzBGQlJ5eGxRVUZoTEU5QlFVOHNZMEZCV1N4SlFVRkpMRmxCUVZrc1RVRkJUU3hKUVVGRkxGRkJRVThzUzBGQlJ5eERRVUZETEVkQlFVVXNSMEZCUlN4TlFVRkpPMEZCUVVNc2JVSkJRVXM3UVVGQlJTeG5Ra0ZCU1N4SlFVRkZMRWxCUVVVN1FVRkJSU3hwUWtGQlNTeEpRVUZGTEVkQlFVVXNSVUZCUlN4RFFVRkRMRXRCUVVjc1JVRkJSU3hMUVVGSE8wRkJRVWtzWjBKQlFVVTdRVUZCUlN4blFrRkJSeXhMUVVGSExFbEJRVVVzUzBGQlJ5eEZRVUZGTEZWQlFWRTdRVUZCUnl4eFFrRkJUeXhIUVVGSExFOUJRVThzUlVGQlJTeFRRVUZUTEVkQlFVVXNRMEZCUXl4RFFVRkRPMEZCUVVVc2FVSkJRVWtzU1VGQlJTeEpRVUZITEVsQlFVVXNTMEZCUnp0QlFVRkRMR3RDUVVGSkxFbEJRVVVzUlVGQlJTeEhRVUZITzBGQlFVVXNhMEpCUVVjc1NVRkJSU3hMUVVGSk8wRkJRVU1zYjBKQlFVa3NTVUZCUlN4RlFVRkZMRWRCUVVjc1NVRkJSVHRCUVVGSExHOUNRVUZITEZGQlFVMHNTVUZCUlR0QlFVRkxMSFZDUVVGSExFOUJRVThzWTBGQll5eEpRVUZGTEU5QlFVc3NTVUZCUlN4RFFVRkRPMEZCUVVFc2NVSkJRVTA3UVVGQlF5eHpRa0ZCU1N4SlFVRkZMRVZCUVVVc1IwRkJSeXhKUVVGRk8wRkJRVWNzYzBKQlFVVXNVVUZCVFN4SlFVRkZMRkZCUVUwc1NVRkJSU3hQUVVGTExFdEJRVWNzUzBGQlJ5eEpRVUZGTEV0QlFVY3NTVUZCUlN4TlFVRkpMRXRCUVVjc1MwRkJSeXhMUVVGSExFdEJRVWNzU1VGQlJTeEZRVUZGTEVkQlFVY3NTVUZCUlR0QlFVRkhMREJDUVVGTkxFbEJRVVVzUzBGQlJ5eFBRVUZQTEdGQlFXRXNRMEZCUXl4TFFVRkhMRXRCUVVjc1QwRkJUU3hMUVVGSExFOUJRVThzWVVGQllTeFJRVUZOTEV0QlFVY3NTVUZCUnl4UlFVRk5MRWxCUVVVc1NVRkJTVHRCUVVGQkxHZENRVUZGTzBGQlFVRXNZMEZCUXp0QlFVRk5MSEZDUVVGSExFOUJRVThzWVVGQllTeERRVUZETzBGQlFVRXNXVUZCUXp0QlFVRkRMRzFDUVVGUE8wRkJRVUVzVlVGQlF5eEhRVU40WjBJc1NVRkJSU3hEUVVGRExFZEJRVVVzVDBGQlN5eFBRVUZMTEV0QlFVY3NSMEZCUnl4SFFVRkZMRWRCUVVVc1EwRkJReXhKUVVGRkxFbEJRVWNzU1VGQlJTeFBRVUZITzBGQlFVTXNjVUpCUVZFc1NVRkJSU3hIUVVGRkxFbEJRVVVzUjBGQlJTeEpRVUZGTEVWQlFVVXNVVUZCVHl4RlFVRkZMRWRCUVVVN1FVRkJReXhyUWtGQlNTeEpRVUZGTEVWQlFVVXNWMEZCVnl4RFFVRkRPMEZCUVVVc2NVSkJRVXNzU1VGQlJTeE5RVUZKTEZGQlFVMHNTVUZCUlN4TFFVRkhMRWxCUVVVc1UwRkJUeXhMUVVGSExGTkJRVThzUzBGQlJ5eExRVUZITEVkQlFVVXNSVUZCUlN4TFFVRkhMRXRCUVVjN1FVRkJRU3haUVVGRE8wRkJRVU1zYlVKQlFVODdRVUZCUVN4VlFVRkRMRWRCUVVVc1NVRkJSU3hEUVVGRExFZEJRVVVzUjBGQlJTeEhRVUZGTEUxQlFVazdRVUZCUXl4dFFrRkJTenRCUVVGRkxHZENRVUZITEVWQlFVVXNTVUZCUlR0QlFVRkhMSEZDUVVGUE8wRkJRVVVzWjBKQlFVa3NTVUZCUlR0QlFVRkZMR2RDUVVGRkxFbEJRVVVzU1VGQlJUdEJRVUZGTEhGQ1FVRlJMRWxCUVVVc1IwRkJSU3hKUVVGRkxFVkJRVVVzVVVGQlR5eEZRVUZGTEVkQlFVVTdRVUZCUXl4clFrRkJTU3hKUVVGRkxFVkJRVVVzVjBGQlZ5eERRVUZETzBGQlFVVXNhMEpCUVVjc1UwRkJUeXhMUVVGSExGTkJRVThzUjBGQlJUdEJRVUZETEc5Q1FVRkpMRWxCUVVVc1JVRkJSU3hYUVVGWExFVkJRVVVzUTBGQlF6dEJRVUZGTEc5Q1FVRkZMRlZCUVZFc1NVRkJSU3hUUVVGUExFMUJRVWtzU1VGQlJUdEJRVUZCTEdOQlFVazdRVUZCUXl4clFrRkJSeXhQUVVGTExFZEJRVVU3UVVGQlF5eHZRa0ZCUnl4TFFVRkhPMEZCUVVVN1FVRkJUU3hyUWtGQlJTeFJRVUZOTEVOQlFVTXNTVUZCUlR0QlFVRkJMR05CUVVNc1QwRkJTenRCUVVGRExHOUNRVUZITEZGQlFVMHNSMEZCUlR0QlFVRkRMSE5DUVVGSExFbEJRVVVzUzBGQlJ6dEJRVUZGTzBGQlFVMHNiMEpCUVVVc1VVRkJUU3hEUVVGRExFbEJRVVVzVFVGQlNTeExRVUZITzBGQlFVRXNaMEpCUVVNc1QwRkJTenRCUVVGRExITkNRVUZITEZOQlFVOHNSMEZCUlR0QlFVRkRMSGRDUVVGSExFbEJRVVVzUzBGQlJ6dEJRVUZGTzBGQlFVMHNjMEpCUVVVc1VVRkJUU3hEUVVGRExFbEJRVVVzVFVGQlNTeExRVUZITzBGQlFVRXNhMEpCUVVVc1QwRkJTenRCUVVGRExIZENRVUZITEVsQlFVVXNTMEZEYm1ZN1FVRkJSVHRCUVVGTkxITkNRVUZGTEZGQlFVMHNRMEZCUXl4SlFVRkZMRTFCUVVrc1MwRkJSenRCUVVGSExITkNRVUZGTEZGQlFVMHNRMEZCUXl4SlFVRkZMRTFCUVVrc1MwRkJSeXhMUVVGSE8wRkJRVUVzYTBKQlFVVTdRVUZCUXl4dlFrRkJSU3hSUVVGTkxFTkJRVU1zU1VGQlJTeE5RVUZKTEV0QlFVY3NTVUZCUlR0QlFVRkJMR2RDUVVGRk8wRkJRVU1zYTBKQlFVVXNVVUZCVFN4RFFVRkRMRWxCUVVVc1RVRkJTU3hKUVVGRk8wRkJRVUVzWTBGQlJUdEJRVUZCTEZsQlFVTTdRVUZCUXl4alFVRkZMRTFCUVVrc1EwRkJReXhKUVVGRk8wRkJRVVVzYlVKQlFVOHNTVUZCUlR0QlFVRkJMRlZCUVVNc1IwRkJSU3hKUVVGRkxFOUJRVWNzVFVGQlNTeEpRVUZGTEUxQlFVa3NUVUZCU1N4SlFVRkZMRTlCUVVzc1RVRkJTU3hKUVVGRkxFMUJRVXNzUzBGQlJ5eERRVUZETEVkQlFVVXNTVUZCUnl4SlFVRkhMRWxCUVVjc1MwRkJTU3hMUVVGSkxFdEJRVWtzUzBGQlNTeExRVUZKTEV0QlFVa3NTMEZCU1N4SFFVRkhMRWRCUVVVc1MwRkJSeXhEUVVGRExFZEJRVVVzU1VGQlJ5eEpRVUZITEVsQlFVY3NTMEZCU1N4TFFVRkpMRXRCUVVrc1MwRkJTU3hMUVVGSkxFdEJRVWtzUzBGQlNTeEhRVUZITEVkQlFVVXNTMEZCUnl4UFFVRkhPMEZCUVVNc1owSkJRVWtzU1VGQlJTeEZRVUZGTEVOQlFVTXNTVUZCUlN4SFFVRkZMRWxCUVVVc1IwRkJSeXhEUVVGRE8wRkJRVVVzYVVKQlFVY3NSVUZCUlN4SFFVRkZMRWRCUVVVc1IwRkJSU3hEUVVGRE8wRkJRVVVzYlVKQlFVODdRVUZCUVN4VlFVRkRMRWRCUVVVc1NVRkJSU3hEUVVGRExFZEJRVVVzU1VGQlJTeERRVUZETEVkQlFVVXNTMEZCUnl4TlFVRkpPMEZCUVVNc1owSkJRVWNzUTBGQlF5eEhRVUZGTzBGQlFVTXNhMEpCUVVrc1NVRkJSU3hGUVVGRExFMUJRVXNzV1VGQlZ5eFRRVUZSTEZsQlFWY3NUVUZCU3l4TFFVRkpMRXRCUVVrc1MwRkJTU3hOUVVGTExHdENRVUZwUWl4UFFVRk5MRmxCUVZVc1QwRkJUeXhoUVVGWExGVkJRVlVzWVVGQlZ5eFZRVUZWTEZWQlFWVXNRMEZCUXl4TFFVRkhMRXRCUVVzN1FVRkJRU3huUWtGQlVUdEJRVUZCTEdkQ1FVTjJaanRCUVVGQkxHTkJRVWNzU1VGQlJTeFZRVUZUTEVkQlFVVXNUVUZCU1N4cFFrRkJaMElzUjBGQlJUdEJRVUZGTEcxQ1FVRkpMRXRCUVVzN1FVRkJSU3d5UWtGQlV5eEZRVUZGTEVOQlFVTXNTVUZCUlN4UFFVRlBMRVZCUVVVc1EwRkJReXhKUVVGRkxFVkJRVVVzUTBGQlF5eEpRVUZGTEVWQlFVVXNRMEZCUXp0QlFVRkZMR3RDUVVGSkxFbEJRVVVzUTBGQlF6dEJRVUZGTEcxQ1FVRkpMRXRCUVVzN1FVRkJSU3hyUWtGQlJTeExRVUZMTEVkQlFVY3NRMEZCUXl4SlFVRkpMRVZCUVVVc1EwRkJReXhEUVVGRExFVkJRVVU3UVVGQlJTeHJRa0ZCUlR0QlFVRkJMRmxCUVVNN1FVRkJReXh0UWtGQlR6dEJRVUZCTEZWQlFVTXNSMEZCUlN4SFFVRkZMRXRCUVVjc1EwRkJReXhOUVVGTExFTkJRVU1zUjBGQlJTeERRVUZETEVOQlFVTXNSMEZCUlN4TFFVRkhMRU5CUVVNc1NVRkJSeXhKUVVGSExFbEJRVWNzU1VGQlJ5eEpRVUZITEVsQlFVY3NTVUZCUnl4SlFVRkhMRWxCUVVjc1NVRkJSeXhKUVVGSExFVkJRVVVzUjBGQlJTeExRVUZITEVOQlFVTXNTVUZCUnl4SlFVRkhMRWxCUVVjc1NVRkJSeXhKUVVGSExFbEJRVWNzU1VGQlJ5eEpRVUZITEVsQlFVY3NTVUZCUnl4SlFVRkhMRVZCUVVVN1FVRkJSU3h0UWtGQlV5eEhRVUZITEVkQlFVVTdRVUZCUXl4blFrRkJTU3hKUVVGRkxFMUJRVTBzUlVGQlJTeERRVUZETEVsQlFVVXNRMEZCUXp0QlFVRkZMR05CUVVVc1IwRkJSU3hIUVVGRkxFZEJRVVVzUlVGQlJTeE5RVUZOTzBGQlFVVXNiVUpCUVU4N1FVRkJRU3hWUVVGRE8wRkJRMnBVTEcxQ1FVRlRMRWRCUVVjc1IwRkJSU3hIUVVGRkxFZEJRVVVzUjBGQlJUdEJRVUZETEhGQ1FVRlRMRVZCUVVVc1IwRkJSU3hIUVVGRkxFZEJRVVU3UVVGQlF5eHRRa0ZCU1N4SlFVRkZMRmxCUVZVc1QwRkJUeXhKUVVGRkxFVkJRVVVzVTBGQlV5eEpRVUZGTEV0QlFVY3NTVUZCUnl4RlFVRkZMRk5CUVU4N1FVRkJSeXh2UWtGQlJTeEZRVUZGTEVOQlFVTXNTVUZCUlR0QlFVRkZMSEZDUVVGUE8wRkJRVUVzV1VGQlF6dEJRVUZETEhGQ1FVRlRMRVZCUVVVc1IwRkJSU3hIUVVGRk8wRkJRVU1zY1VKQlFVOHNSVUZCUlN4SFFVRkZMRWRCUVVVc1IwRkJSenRCUVVGQkxGbEJRVU03UVVGQlF5eHhRa0ZCVXl4RlFVRkZMRWRCUVVVc1IwRkJSVHRCUVVGRExIVkNRVUZUTEVWQlFVVXNTVUZCUnp0QlFVRkRMSFZDUVVGUExFbEJRVVVzUzBGQlJ5eExRVUZITEVsQlFVVXNTMEZCUnl4SlFVRkZPMEZCUVVFc1kwRkJRenRCUVVGRExHdENRVUZKTzBGQlFVVXNjVUpCUVVzc1NVRkJSU3hGUVVGRkxFVkJRVVVzV1VGQldTeEpRVUZGTEVWQlFVVXNXVUZCV1N4RFFVRkRMRTFCUVVrc1QwRkJTeXhKUVVGRkxFVkJRVVVzUlVGQlJTeFRRVUZUTEVsQlFVVXNSVUZCUlN4VFFVRlRMRU5CUVVNc1QwRkJTeXhKUVVGRkxFVkJRVVVzUlVGQlJTeFJRVUZSTEVsQlFVVXNSVUZCUlN4UlFVRlJMRU5CUVVNN1FVRkJSeXh4UWtGQlR6dEJRVUZCTEZsQlFVTTdRVUZCUXl4eFFrRkJVeXhGUVVGRkxFZEJRVVU3UVVGQlF5eHpRa0ZCVHl4RlFVRkZMRTlCUVU4c1IwRkJSVHRCUVVGQkxHZENRVUZETEV0QlFVczdRVUZCUlN4NVFrRkJUeXhKUVVGSkxFdEJRVXNzUlVGQlJTeFpRVUZaTEVsQlFVVXNSMEZCUlN4SlFVRkhMRVZCUVVVN1FVRkJRU3huUWtGQlJTeExRVUZMTzBGQlFVVXNlVUpCUVU4N1FVRkJRU3huUWtGQlJTeExRVUZMTzBGQlFVVXNlVUpCUVU4c1NVRkJTU3hMUVVGTExFVkJRVVVzV1VGQldTeEhRVUZGTEVkQlFVVXNRMEZCUXp0QlFVRkJMR2RDUVVGRkxFdEJRVXM3UVVGQlJTeDVRa0ZCVHl4SlFVRkpPMEZCUVVFc2IwSkJRVXNzUlVGQlJTeFpRVUZaTzBGQlFVRXNiMEpCUXpWbU8wRkJRVUVzYjBKQlFVVTdRVUZCUVN4clFrRkJRenRCUVVGQkxHZENRVUZGTEV0QlFVczdRVUZCUlN4NVFrRkJUeXhKUVVGSkxFdEJRVXNzUlVGQlJTeFpRVUZaTEVkQlFVVXNSMEZCUlN4RFFVRkRPMEZCUVVFc1owSkJRVVVzUzBGQlN6dEJRVUZGTEhsQ1FVRlBMRWxCUVVrc1MwRkJTeXhGUVVGRkxGbEJRVmtzU1VGQlJTeEhRVUZGTEVsQlFVY3NSVUZCUlR0QlFVRkJMR2RDUVVGRkxFdEJRVXM3UVVGQlJTeDVRa0ZCVHl4SlFVRkpMRXRCUVVzc1JVRkJSU3haUVVGWkxFbEJRVVVzUjBGQlJTeEpRVUZITEVWQlFVVTdRVUZCUVN4alFVRkRPMEZCUVVFc1dVRkJRenRCUVVGRExIRkNRVUZUTEVWQlFVVXNSMEZCUlR0QlFVRkRMR3RDUVVGSkxFbEJRVVVzUlVGQlJUdEJRVUZITEcxQ1FVRkpMRWxCUVVVc1NVRkJTU3hMUVVGTkxFbEJRVWtzUzBGQlN5eEZRVUZGTEV0QlFVY3NUVUZCU3l4SFFVRkZMRU5CUVVNc1JVRkJSeXhSUVVGUkxFTkJRVU1zUjBGQlJTeEpRVUZGTEV0QlFVYzdRVUZCUXl4dlFrRkJTU3hKUVVGRkxFVkJRVVVzVTBGQlV5eEhRVUZGTEV0QlFVY3NSVUZCUlN4RlFVRkZMRmxCUVZrc1EwRkJReXhKUVVGRkxFdEJRVWNzU1VGQlNTeERRVUZETzBGQlFVVXNiMEpCUVVjc1NVRkJSU3hKUVVGRkxFVkJRVVVzVVVGQlVUdEJRVUZGTEhWQ1FVRkhMRWxCUVVVc1JVRkJSU3hSUVVGUkxFbEJRVVVzUjBGQlJTeEZRVUZGTEZGQlFWRXNRMEZCUXl4SFFVRkZMRXRCUVVjc1NVRkJSU3hGUVVGRkxGTkJRVk1zU1VGQlJTeERRVUZETEV0QlFVY3NSVUZCUlN4VFFVRlRMRU5CUVVNc1IwRkJSU3hGUVVGRkxGbEJRVmtzUlVGQlJTeFpRVUZaTEVsQlFVVXNRMEZCUXp0QlFVRkJMSEZDUVVGUE8wRkJRVU1zYjBKQlFVVXNVVUZCVVN4RlFVRkZMRkZCUVZFc1NVRkJSU3hEUVVGRE8wRkJRVVU3UVVGQlFTeG5Ra0ZCU3p0QlFVRkJMR05CUVVNN1FVRkJReXhyUWtGQlJTeEpRVUZKTEV0QlFVc3NSVUZCUlN4WlFVRlpMRWxCUVVVc1IwRkJSU3hIUVVGRkxFTkJRVU03UVVGQlJTeHJRa0ZCUlN4RlFVRkZMRWxCUVVrN1FVRkJRU3huUWtGQlN5eEZRVUZGTEZsQlFWazdRVUZCUVN4blFrRkRibVk3UVVGQlFTeG5Ra0ZCUlR0QlFVRkJMR05CUVVNc1EwRkJRenRCUVVGRkxHdENRVUZGTEVWQlFVVXNRMEZCUXp0QlFVRkZMSEZDUVVGUExFdEJRVWNzUlVGQlJTeEhRVUZGTEVOQlFVTXNTVUZCUlN4TFFVRkhMRVZCUVVVc1IwRkJSU3hEUVVGRExFbEJRVVVzUlVGQlJTeFpRVUZaTEVsQlFVVXNTVUZCUlN4RlFVRkZMRmxCUVZrc1NVRkJSU3hGUVVGRkxGbEJRVmtzU1VGQlJUdEJRVUZCTEZsQlFVTTdRVUZCUXl4dFFrRkJTenRCUVVGRkxHMUNRVUZMTzBGQlFVVXNiVUpCUVVzN1FVRkJSU3h0UWtGQlN6dEJRVUZGTEdkQ1FVRkpMRWxCUVVVc1JVRkJSU3hKUVVGRkxFOUJRVXNzVFVGQlNTeERRVUZETzBGQlFVVXNaMEpCUVVVc1JVRkJReXhKUVVGSExFVkJRVVVzVFVGQlNTeE5RVUZKTEVOQlFVTXNSMEZCUlN4SlFVRkhMRVZCUVVVc1NVRkJSU3hOUVVGSkxFMUJRVWtzUTBGQlF5eEhRVUZGTEVsQlFVY3NSVUZCUlN4SlFVRkZMRTFCUVVrc1RVRkJTU3hEUVVGRExFZEJRVVVzU1VGQlJ5eEZRVUZGTEVsQlFVVXNUMEZCU3l4TlFVRkpMRU5CUVVNc1IwRkJSU3hKUVVGSExFVkJRVVVzU1VGQlJTeFBRVUZMTEUxQlFVa3NRMEZCUXl4SFFVRkZMRWxCUVVjc1JVRkJSU3hKUVVGRkxFOUJRVXNzVFVGQlNTeERRVUZETEVkQlFVVXNTVUZCUnl4RlFVRkZMRWxCUVVVc1QwRkJTeXhOUVVGSkxFTkJRVU1zUjBGQlJTeEpRVUZITEVWQlFVVXNTVUZCUlN4UFFVRkxMRTFCUVVrc1EwRkJReXhIUVVGRkxFbEJRVWNzUlVGQlJTeEpRVUZGTEU5QlFVc3NUVUZCU1N4RFFVRkRMRWRCUVVVc1NVRkJSeXhGUVVGRkxFbEJRVVVzVDBGQlN5eE5RVUZKTEVOQlFVTXNSMEZCUlN4SlFVRkhMRWxCUVVVc1JVRkJSU3hEUVVGRExFbEJRVVVzUjBGQlJUdEJRVUZGTEdkQ1FVRkZMRVZCUVVVc1EwRkJRenRCUVVGRkxHZENRVUZGTzBGQlFVRXNZMEZCUXl4TlFVRkxPMEZCUVVFc1kwRkJkVUlzVFVGQlN6dEJRVUZCTEdOQlFWY3NUVUZCU3p0QlFVRkJMR05CUVZjc1RVRkJTenRCUVVGQkxHTkJRVXNzVFVGQlN6dEJRVUZCTEdOQlFXTXNUVUZCU3p0QlFVRkJMR05CUVZFc1RVRkJTenRCUVVGQkxHTkJRVmNzVFVGQlN6dEJRVUZCTEdOQlFWY3NUVUZCU3p0QlFVRkJMR05CUXpkbExFOUJRVTA3UVVGQlFTeGpRVUZMTEU5QlFVMDdRVUZCUVN4alFVRkxMRTlCUVUwN1FVRkJRU3hqUVVGWExFOUJRVTA3UVVGQlFTeGpRVUZYTEU5QlFVMDdRVUZCUVN4alFVRkxMRTlCUVUwN1FVRkJRU3hqUVVGTExFOUJRVTA3UVVGQlFTeGpRVUZMTEU5QlFVMDdRVUZCUVN4alFVRkxMRTlCUVUwN1FVRkJRU3hqUVVGTExFOUJRVTA3UVVGQlFTeGpRVUZMTEU5QlFVMDdRVUZCUVN4alFVRkxMRTlCUVUwN1FVRkJRU3hqUVVGTExFOUJRVTA3UVVGQlFTeGpRVUZMTEU5QlFVMDdRVUZCUVN4alFVRkxMRTlCUVUwN1FVRkJRU3hqUVVGTExFOUJRVTA3UVVGQlFTeGpRVUZMTEU5QlFVMDdRVUZCUVN4alFVRkxMRTlCUVUwN1FVRkJRU3hqUVVGTExFOUJRVTA3UVVGQlFTeFpRVUZKTzBGQlFVVXNjVUpCUVZFc1MwRkJTenRCUVVGRkxHdENRVUZGTEVWQlFVVXNVVUZCVVN4SlFVRkpMRTlCUVU4c1IwRkJSU3hIUVVGSExFZEJRVVVzUlVGQlJTeERRVUZETEVOQlFVTTdRVUZCUlN4blFrRkJTU3hMUVVGSExESkVRVUV5UkN4TlFVRk5MRWRCUVVjc1IwRkJSU3hMUVVGSExIZEdRVUYzUml4TlFVRk5MRWRCUVVjN1FVRkJSU3huUWtGQlJUdEJRVUZCTEdOQlFVTXNUVUZCU3l4UFFVRkhMRWRCUVVjc1JVRkJSU3hGUVVGRkxFVkJRVVVzVlVGQlZTeEhRVUZGTEVOQlFVTTdRVUZCUVN4alFVRkZMRTFCUVVzc1QwRkJSeXhIUVVGSExFVkJRVVVzUlVGQlJUdEJRVUZCTEdOQlEzUm1MRTFCUVVzc1QwRkJSeXhIUVVGSExFVkJRVVVzUlVGQlJTeEZRVUZGTEZWQlFWVXNSMEZCUlN4RFFVRkRPMEZCUVVFc1kwRkJSU3hOUVVGTExFOUJRVWNzUjBGQlJ5eEZRVUZGTEVWQlFVVTdRVUZCUVN4alFVRkZMRTFCUVVzc1QwRkJSeXhIUVVGSExFVkJRVVVzUzBGQlJ5eFJRVUZOTEUxQlFVa3NSMEZCUlN4RFFVRkRPMEZCUVVFc1kwRkJSU3hOUVVGTExFOUJRVWNzUlVGQlJTeEZRVUZGTEVsQlFVY3NRMEZCUXp0QlFVRkJMR05CUVVVc1RVRkJTeXhQUVVGSExFVkJRVVVzUlVGQlJTeEpRVUZITEVkQlFVVXNSMEZCUnp0QlFVRkJMR05CUVVVc1RVRkJTeXhQUVVGSExFVkJRVVVzUTBGQlF5eEZRVUZGTEZOQlFWTXNSVUZCUlN4VlFVRlZMRU5CUVVNN1FVRkJRU3hqUVVGRkxFMUJRVXNzVDBGQlJ5eEZRVUZGTEVOQlFVTTdRVUZCUVN4alFVRkZMRTFCUVVzc1QwRkJSeXhGUVVGRkxFVkJRVVVzU1VGQlJ5eERRVUZETzBGQlFVRXNZMEZCUlN4TlFVRkxMRTlCUVVjN1FVRkJReXh2UWtGQlJTeEZRVUZGTzBGQlFVY3NjVUpCUVVjc1NVRkJSU3hKUVVGRkxFdEJRVWNzUzBGQlJ5eE5RVUZKTEV0QlFVYzdRVUZCU1N4MVFrRkJUeXhGUVVGRkxFZEJRVVVzUTBGQlF6dEJRVUZCTEdOQlFVTTdRVUZCUVN4alFVRkZMRTFCUVVzc1QwRkJSenRCUVVGRExIbENRVUZSTEVsQlFVVXNSMEZCUlN4SlFVRkZMRWRCUVVVc1MwRkJSeXhGUVVGRkxFdEJRVWNzUjBGQlJTeE5RVUZKTEVWQlFVVXNSVUZCUlN4TFFVRkhMRWxCUVVrc1NVRkJSU3hMUVVGSExFbEJRVWtzUjBGQlJ6dEJRVUZGTzBGQlFVTXNkVUpCUVU4c1JVRkJSU3hGUVVGRkxFdEJRVWNzUjBGQlJTeERRVUZETzBGQlFVRXNZMEZCUXp0QlFVRkJMR05CUVVVc1RVRkJTeXhQUVVGSExFVkJRVVVzUlVGQlJTeExRVUZITEVkQlFVVXNRMEZCUXp0QlFVRkJMR05CUVVVc1RVRkJTeXhQUVVGSExFVkJRVVVzUlVGQlJTeEpRVUZITEVOQlFVTTdRVUZCUVN4alFVRkZMRTFCUVVzc1RVRkJTVHRCUVVGQkxHTkJRVXNzVFVGQlN5eFBRVUZITEV0QlFVY3NSVUZCUlN4TlFVRkpMRXRCUVVjc1JVRkJSU3hMUVVGSExFOUJRVXM3UVVGQlFTeGpRVUZMTEUxQlFVc3NUMEZCUnl4RlFVRkZMRVZCUVVVc1NVRkJSeXhEUVVGRE8wRkJRVUVzWTBGQlJTeE5RVUZMTEUxQlFVazdRVUZCUVN4alFVRkxMRTFCUVVzc1QwRkJSeXhGUVVGRkxFMUJRVWs3UVVGQlFTeGpRVUZGTEUxQlFVc3NUMEZCUnp0QlFVRkJMR2RDUVVGRkxFdEJRVXNzVDBGQlR5eEZRVUZGTEV0QlFVY3NTVUZCUlN4RlFVRkZMRTFCUVVrc1EwRkJRenRCUVVGQkxHZENRVU51Wmp0QlFVRkJMR05CUVVNN1FVRkJRU3hqUVVGRkxFMUJRVXNzVDBGQlJ6dEJRVUZETEc5Q1FVRkpMRWxCUVVVc1MwRkJTeXhQUVVGUExFVkJRVVVzUzBGQlJ5eExRVUZITEVWQlFVVXNTMEZCUnl4TFFVRkhMRXRCUVVjc1EwRkJRenRCUVVGRkxITkNRVUZKTEVWQlFVVXNTMEZCUnl4TlFVRkpMRVZCUVVVc1MwRkJSeXhMUVVGSExFdEJRVWM3UVVGQlNTeHZRa0ZCUnp0QlFVRkZMSGRDUVVGSkxFMUJRVWtzUzBGQlJ5eEZRVUZGTEV0QlFVY3NUVUZCU1N4RlFVRkZMRTFCUVVrc1IwRkJSU3hMUVVGSExFdEJRVWNzUzBGQlJ5eExRVUZITEVWQlFVVXNSVUZCUlN4RlFVRkZMRTFCUVVrc1NVRkJSVHRCUVVGQkxIRkNRVUZSTzBGQlFVTXNjMEpCUVVVN1FVRkJSeXh6UWtGQlNTeExRVUZITEVWQlFVVXNTMEZCUnl4SlFVRkZMRVZCUVVVc1MwRkJSeXhMUVVGSE8wRkJRVVVzYlVKQlFVTXNTMEZCUnl4TFFVRkhMRXRCUVVjc1MwRkJSeXhGUVVGRkxFVkJRVVVzUzBGQlJ5eE5RVUZKTEVOQlFVTXNUVUZCU1R0QlFVRkJMR2RDUVVGSE8wRkJRVU1zZFVKQlFVOHNSVUZCUlN4SFFVRkZMRU5CUVVNN1FVRkJRU3hqUVVGRE8wRkJRVUVzWTBGQlJTeE5RVUZMTEU5QlFVY3NSVUZCUlR0QlFVRkJMR05CUVVjc1RVRkJTeXhQUVVGSExFVkJRVVVzUzBGQlN5eFBRVUZQTEVWQlFVVXNTMEZCUnl4TFFVRkhMRVZCUVVVc1MwRkJSeXhMUVVGSExFdEJRVWNzUTBGQlF5eEhRVUZGTEVOQlFVTTdRVUZCUVN4alFVRkZMRTFCUVVzc1VVRkJTU3hGUVVGRkxFdEJRVWNzVFVGQlRTeFRRVUZUTEVWQlFVVXNWVUZCVlN4RFFVRkRPMEZCUVVFc1kwRkJSU3hOUVVGTExFOUJRVWNzUlVGQlJTeExRVUZITzBGQlFVRXNZMEZCU3l4TlFVRkxMRTlCUVVjN1FVRkJReXh2UWtGQlJTeEZRVUZGTzBGQlFVY3NiMEpCUVVrc1NVRkJSU3hMUVVGSE8wRkJRVVVzYjBKQlFVVXNTMEZCU3l4SlFVRkpMRU5CUVVNc1NVRkJSVHRCUVVGSExIZENRVUZQTEVsQlFVVXNUVUZCU1N4UFFVRkxMRTlCUVU4c1ZVRkJVU3hKUVVGRkxFdEJRVWNzVFVGQlNTeEpRVUZGTEVkQlFVY3NSVUZCUlN4TlFVRk5MRVZCUVVVN1FVRkJRU3hqUVVGRE8wRkJRVUVzWTBGQlJTeE5RVUZMTEU5QlFVY3NSVUZCUlR0QlFVRkJMR05CUVVjc1RVRkJTeXhOUVVGSk8wRkJRVUVzV1VGQlJ6dEJRVUZGTEdkQ1FVRkZMRVZCUVVVc1VVRkJVU3hQUVVGTkxFMUJRVlU3UVVGRGVHWXNhVUpCUVVrc1MwRkJTenRCUVVGRkxHZENRVUZGTEZOQlFWTXNRMEZCUXl4TlFVRkpMRWxCUVVVc1JVRkJSU3hSUVVGUkxFbEJRVWtzVDBGQlR5eEhRVUZGTEVkQlFVY3NSMEZCUlN4RlFVRkZMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVU03UVVGQlJ5eG5Ra0ZCUlN4RlFVRkZMRkZCUVZFc1UwRkJVU3hIUVVGSE8wRkJRVVVzWjBKQlFVVXNSMEZCUnl4RFFVRkRPMEZCUVVVc1owSkJRVWNzUlVGQlJTeFRRVUZQTzBGQlFVVXNjVUpCUVU4N1FVRkJSU3hqUVVGRkxFbEJRVWtzUjBGQlJTeE5RVUZKTEVOQlFVTTdRVUZCUlN4dFFrRkJUeXhGUVVGRkxGTkJRVTg3UVVGQlFTeFZRVUZETzBGQlF6TktMR05CUVVrc1MwRkJSeXhGUVVGRExFZEJRVVVzVTBGQlV5eEhRVUZGTEVkQlFVVXNSMEZCUlR0QlFVRkRMRzFDUVVGTE8wRkJRVVVzV1VGQlF5eEpRVUZKTEVkQlFVY3NRMEZCUXl4RlFVRkhMRWRCUVVjc1RVRkJTU3hIUVVGRkxFMUJRVWtzUTBGQlF6dEJRVUZGTEdsQ1FVRkhPMEZCUVVVN1FVRkJTeXhyUWtGQlRUdEJRVUZCTEZWQlFVY3NSMEZCUlN4SFFVRkZMRmRCUVZVN1FVRkJReXh0UWtGQlR6dEJRVUZCTEZWQlFVTXNSMEZCUlN4SFFVRkZMRmRCUVZVN1FVRkJRU3hWUVVGRExFZEJRVVVzUjBGQlJTeFhRVUZWTzBGQlFVRXNWVUZCUXl4SFFVRkZMRWRCUVVVc1YwRkJWVHRCUVVGQkxGVkJRVU1zUjBGQlJTeEhRVUZGTEZkQlFWVTdRVUZCUXl4dFFrRkJUenRCUVVGQkxGVkJRVU1zUjBGQlJTeEhRVUZGTEZkQlFWVTdRVUZCUVN4VlFVRkRMRWRCUVVVc1IwRkJSU3hYUVVGVk8wRkJRVUVzVlVGQlF5eEhRVUZGTEVkQlFVVXNWMEZCVlR0QlFVRkJMRlZCUVVNc1IwRkJSU3hIUVVGRkxGZEJRVlU3UVVGQlFTeFZRVUZETEVkQlFVVXNSMEZCUlN4WFFVRlZPMEZCUVVFc1ZVRkJReXhIUVVGRkxFZEJRVVVzVjBGQlZUdEJRVUZCTEZWQlFVTXNSMEZCUlN4SFFVRkZMRmRCUVZVN1FVRkJRU3hWUVVGRExFZEJRVVVzUjBGQlJTeFhRVUZWTzBGQlFVRXNWVUZCUXl4SFFVRkZMRWRCUVVVc1RVRkJTU3hIUVVGRkxFZEJRVVVzVTBGQlV5eEhRVUZGTEVkQlFVVXNSMEZCUlR0QlFVRkRMR2RDUVVGRkxFbEJRVVVzV1VGQlZTeEpRVUZGTEZWQlFWRXNRMEZCUXl4RFFVRkRMRXRCUVVjc1RVRkJTU3hMUVVGSExHRkJRVmNzU1VGQlJUdEJRVUZKTEcxQ1FVRkxPMEZCUVVVc1owSkJRVVVzU1VGQlNTeExRVUZMTEUxQlFVa3NRMEZCUXp0QlFVRkZMR05CUVVVc1RVRkJTU3hOUVVGSkxFTkJRVU1zU1VGQlJTeEZRVUZGTEdOQlFXTTdRVUZCUlN4alFVRkZMRWxCUVVVc1RVRkJTU3hOUVVGSkxFTkJRVU1zU1VGQlJTeEZRVUZGTEdOQlFXTTdRVUZCUlN4alFVRkZMRWxCUVVVc1RVRkJTU3hOUVVGSkxFTkJRVU1zU1VGQlJTeEZRVUZGTEZsQlFWazdRVUZCUlN4alFVRkZMRWxCUVVVc1QwRkRhR1lzVFVGQlNTeERRVUZETEVsQlFVVXNSVUZCUlN4WFFVRlhPMEZCUVVVc1kwRkJSU3hKUVVGRkxFOUJRVXNzVFVGQlNTeERRVUZETEVsQlFVVXNSVUZCUlN4WlFVRlpPMEZCUVVVc1kwRkJSU3hKUVVGRkxFOUJRVXNzVFVGQlNTeERRVUZETEVsQlFVVXNSVUZCUlN4bFFVRmxMRWxCUVVVN1FVRkJTeXhqUVVGRkxFbEJRVVVzVDBGQlN5eE5RVUZKTEVOQlFVTXNTVUZCUlN4RlFVRkZMRlZCUVZVN1FVRkJSU3hqUVVGRkxFbEJRVVVzVDBGQlN5eE5RVUZKTEVOQlFVTXNTMEZCUnl4RlFVRkZMRkZCUVZFc1NVRkJSU3hMUVVGTExFbEJRVWtzUlVGQlJTeGxRVUZsTEVkQlFVVXNSMEZCUlN4SFFVRkZMRWRCUVVVc1IwRkJSU3hIUVVGRkxFTkJRVU1zUzBGQlJ5eFJRVUZOTzBGQlFVRXNWVUZCUXl4SFFVRkZMRWRCUVVVc1UwRkJVeXhIUVVGRkxFZEJRVVVzUjBGQlJUdEJRVUZETEdkQ1FVRkZMRWxCUVVVc1dVRkJWU3hKUVVGRkxGVkJRVkVzUTBGQlF5eERRVUZETEV0QlFVY3NUVUZCU1N4TFFVRkhMR0ZCUVZjc1NVRkJSVHRCUVVGSkxHMUNRVUZMTzBGQlFVVXNaMEpCUVVVc1NVRkJTU3hMUVVGTExFMUJRVWtzUTBGQlF6dEJRVUZGTEdOQlFVVXNUVUZCU1N4TlFVRkpMRU5CUVVNc1NVRkJSU3hGUVVGRkxGZEJRVmM3UVVGQlJTeGpRVUZGTEVsQlFVVXNUVUZCU1N4TlFVRkpMRU5CUVVNc1NVRkJSU3hGUVVGRkxGZEJRVmM3UVVGQlJTeGpRVUZGTEVsQlFVVXNUVUZCU1N4TlFVRkpMRU5CUVVNc1NVRkJSU3hGUVVGRkxGTkJRVk03UVVGQlJTeGpRVUZGTEVsQlFVVXNUMEZCU3l4TlFVRkpMRU5CUVVNc1NVRkJSU3hGUVVGRkxGRkJRVkU3UVVGQlJTeGpRVUZGTEVsQlFVVXNUMEZCU3l4TlFVRkpMRU5CUVVNc1NVRkJSU3hGUVVGRkxGTkJRVk03UVVGQlJTeGpRVUZGTEVsQlFVVXNUMEZCU3l4TlFVRkpMRU5CUVVNc1NVRkJSU3hGUVVGRkxGbEJRVmtzU1VGQlJUdEJRVUZMTEdOQlFVVXNTVUZCUlN4UFFVRkxMRTFCUVVrc1EwRkJReXhKUVVGRkxFVkJRVVVzVDBGQlR6dEJRVU42Wml4alFVRkZMRWxCUVVVc1QwRkJTeXhOUVVGSkxFTkJRVU1zUzBGQlJ5eEZRVUZGTEVWQlFVVXNXVUZCV1N4RFFVRkRMRWxCUVVVc1MwRkJSeXhKUVVGSkxFVkJRVVVzVTBGQlV5eERRVUZETEVsQlFVVXNSVUZCUlN4UlFVRlJMRWxCUVVVc1NVRkJSVHRCUVVGRkxHTkJRVVVzU1VGQlJTeFBRVUZMTEUxQlFVa3NRMEZCUXl4SlFVRkZMRVZCUVVVc1MwRkJSeXhGUVVGRkxHdENRVUZyUWp0QlFVRkhMR2RDUVVGSExFbEJRVWtzUzBGQlN5eEZRVUZGTEZsQlFWa3NSMEZCUlN4SFFVRkZMRU5CUVVNc1JVRkJSeXhyUWtGQmEwSTdRVUZCUlN4blFrRkJTU3hKUVVGSExFbEJRVWtzUzBGQlN5eEZRVUZGTEZsQlFWa3NSMEZCUlN4SFFVRkZMRU5CUVVNc1JVRkJSeXhyUWtGQmEwSTdRVUZCUlN4alFVRkZMRWxCUVVVc1QwRkJTeXhOUVVGSkxFTkJRVU1zUzBGQlJ5eExRVUZITEV0QlFVY3NSVUZCUlN4clFrRkJhMElzUzBGQlJ5eExRVUZMTEVsQlFVa3NSMEZCUlN4RFFVRkRMRXRCUVVjN1FVRkJRU3hWUVVGRExFZEJRVVVzUjBGQlJTeFRRVUZUTEVkQlFVVTdRVUZCUXl4dFFrRkJTenRCUVVGRkxHZENRVUZKTEVsQlFVVXNTVUZCU1N4TFFVRkxMRVZCUVVVc1NVRkJSU3hQUVVGTExFMUJRVWtzUTBGQlF5eEpRVUZGTEUxQlFVc3NSVUZCUlN4SlFVRkZMRTlCUVVzc1RVRkJTU3hEUVVGRExFZEJRVVVzUlVGQlJTeEpRVUZGTEU5QlFVc3NUVUZCU1N4RFFVRkRMRWRCUVVVc1JVRkJSU3hKUVVGRkxFMUJRVWtzVFVGQlNTeERRVUZETEVkQlFVVXNSVUZCUlN4SlFVRkZMRTFCUVVrc1RVRkJTU3hEUVVGRExFZEJRVVVzUlVGQlJTeE5RVUZKTEUxQlFVa3NRMEZCUXl4SFFVRkZMRU5CUVVNc1IwRkJSU3hKUVVGRkxFVkJRVVVzU1VGQlJTeFBRVUZMTEUxQlFVa3NRMEZCUXl4SFFVRkZMRWxCUVVVc1JVRkJSU3hyUWtGQmEwSXNSMEZCUlN4SlFVRkhMRWxCUVVrc1MwRkJTeXhGUVVGRkxGbEJRVmtzUjBGQlJTeEhRVUZGTEVOQlFVTXNSVUZCUnl4clFrRkJhMElzUjBGRE1XZENMRWxCUVVjc1NVRkJTU3hMUVVGTExFVkJRVVVzV1VGQldTeEhRVUZGTEVkQlFVVXNRMEZCUXl4RlFVRkhMR3RDUVVGclFpeEhRVUZGTEVsQlFVVXNTMEZCU3l4SlFVRkpMRWRCUVVVc1EwRkJRenRCUVVGRkxHZENRVUZGTEVsQlFVVXNSVUZCUlN4SlFVRkZMRTlCUVVzc1RVRkJTU3hEUVVGRExFbEJRVVVzVDBGQlR5eExRVUZITEV0QlFVY3NTMEZCUnl4RFFVRkRMRWxCUVVVc1NVRkJSU3hOUVVGSkxFdEJRVWNzVDBGQlN5eEpRVUZGTEV0QlFVc3NTVUZCU1N4SFFVRkZMRU5CUVVNc1IwRkJSU3hGUVVGRkxGRkJRVkVzUlVGQlJTeFJRVUZSTEVsQlFVVXNVVUZCVFN4SlFVRkZMRWxCUVVVc1NVRkJSU3hMUVVGSExFVkJRVVU3UVVGQlJ5eGpRVUZGTEVsQlFVVXNUMEZCU3l4TlFVRkpMRU5CUVVNc1NVRkJSU3hGUVVGRkxFOUJRVTg3UVVGQlJTeGpRVUZGTEVsQlFVVXNUMEZCU3l4TlFVRkpMRU5CUVVNc1MwRkJSeXhGUVVGRkxFVkJRVVVzV1VGQldTeERRVUZETEVsQlFVVXNTMEZCUnl4SlFVRkpMRVZCUVVVc1UwRkJVeXhEUVVGRExFbEJRVVVzUlVGQlJTeFJRVUZSTEVsQlFVVXNTVUZCUlR0QlFVRkZMR05CUVVVc1RVRkJTU3hOUVVGSkxFTkJRVU1zU1VGQlJTeEZRVUZGTEZkQlFWYzdRVUZCUlN4alFVRkZMRWxCUVVVc1RVRkJTU3hOUVVGSkxFTkJRVU1zU1VGQlJTeEZRVUZGTEZkQlFWYzdRVUZCUlN4alFVRkZMRWxCUVVVc1RVRkJTU3hOUVVGSkxFTkJRVU1zU1VGQlJTeEZRVUZGTEZOQlFWTTdRVUZCUlN4alFVRkZMRWxCUVVVc1QwRkJTeXhOUVVGSkxFTkJRVU1zU1VGQlJTeEZRVUZGTEZGQlFWRTdRVUZCUlN4alFVRkZMRWxCUVVVc1QwRkJTeXhOUVVGSkxFTkJRVU1zU1VGQlJTeEZRVUZGTEZOQlFWTTdRVUZCUlN4alFVRkZMRWxCUVVVc1QwRkJTeXhOUVVGSkxFTkJRVU1zU1VGQlJTeEZRVUZGTEZGQlFWRTdRVUZCUlN4blFrRkJSU3hGUVVGRkxGRkJRVkU3UVVGQlJTeHJRa0ZCVFN4RFFVRkRMRXRCUVVjc1JVRkJSU3hIUVVGSExFMUJRVWtzVFVGQlNTeERRVUZETEVsQlFVVXNTVUZCUnl4SlFVRkZMRTFCUTJwbUxFdEJRVWM3UVVGQlNTeHRRa0ZCVHl4SlFVRkpMRWxCUVVVc1IwRkJSU3hMUVVGSExFTkJRVU1zUzBGQlN5eEpRVUZKTEVOQlFVTXNTVUZCUlN4SlFVRkZMRWxCUVVVc1EwRkJReXhMUVVGTExFMUJRVTBzU1VGQlJTeFZRVUZWTEUxQlFVa3NTVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJReXhMUVVGTExFMUJRVTBzU1VGQlJTeEZRVUZGTEVOQlFVTXNRMEZCUXl4TlFVRkpMRTFCUVVrc1ZVRkJWU3hOUVVGSkxFbEJRVVVzUlVGQlJTeEhRVUZGTEUxQlFVazdRVUZCUVN4VlFVRkRMRWRCUVVVc1IwRkJSU3hYUVVGVk8wRkJRVU1zYlVKQlFVMDdRVUZCUVN4VlFVRkhMRWRCUVVVc1IwRkJSU3hYUVVGVk8wRkJRVUVzVlVGQlF5eEhRVUZGTEVkQlFVVXNVMEZCVXl4SFFVRkZMRWRCUVVVc1IwRkJSVHRCUVVGRExIRkNRVUZUTEVWQlFVVXNSMEZCUlR0QlFVRkRMSE5DUVVGUExFbEJRVVVzUlVGQlJTeGhRVUZoTEVWQlFVVXNUVUZCVFN4dFFrRkJiVUlzUzBGQlJ5eEZRVUZGTEVOQlFVTXNTVUZCUlR0QlFVRkJMRmxCUVVzN1FVRkJReXh0UWtGQlN6dEJRVUZGTEdkQ1FVRkpMRXRCUVVjc2IwSkJRVWtzVVVGQlRTeFpRVUZaTEVkQlFVVXNTVUZCUlN4SlFVRkpMRXRCUVVzc1IwRkJSU3hIUVVGRkxFTkJRVU1zUjBGQlJTeEpRVUZGTEVsQlFVa3NTMEZCU3l4SFFVRkZMRWRCUVVVc1EwRkJRenRCUVVGRkxHZENRVUZGTEVWQlFVVXNhMEpCUVd0Q08wRkJRVVVzWjBKQlFVa3NTVUZCUlN4RlFVRkZMR3RDUVVGclFqdEJRVUZGTEdOQlFVVXNUVUZCU1N4TlFVRkpMRTFCUVVrc1EwRkJReXhKUVVGRkxFdEJRVWNzUzBGQlN5eEpRVUZKTEVkQlFVVXNRMEZCUXp0QlFVRkZMR05CUVVVc1RVRkJTU3hOUVVGSkxFMUJRVWtzUTBGQlF5eEpRVUZGTEU5QlFVOHNTMEZCUnl4RFFVRkRPMEZCUVVVc1owSkJRVVVzUlVGQlJTeERRVUZETzBGQlFVVXNaMEpCUVVVc1JVRkJSU3hEUVVGRE8wRkJRVVVzWjBKQlFVVXNSMEZCUnl4RFFVRkRPMEZCUVVVc1owSkJRVVVzUjBGQlJ5eERRVUZETzBGQlFVVXNaMEpCUVVVc1MwRkJSeXhGUVVGRkxFMUJRVWtzVFVGQlNTeERRVUZETEVsQlEyNW1MRWRCUVVVc1JVRkJSU3hKUVVGRkxFMUJRVWtzVFVGQlNTeERRVUZETEVsQlFVVXNUVUZCU1N4RlFVRkZMRTFCUVVrc1RVRkJTU3hEUVVGRExFbEJRVVVzUjBGQlJTeEZRVUZGTEVsQlFVVXNUVUZCU1N4TlFVRkpMRU5CUVVNc1NVRkJSVHRCUVVGQkxGVkJRVVVzUjBGQlJTeEhRVUZGTEUxQlFVazdRVUZCUXl4alFVRkZMRVZCUVVVN1FVRkJRU3hWUVVGRExFZEJRVVVzUjBGQlJTeFRRVUZUTEVkQlFVVXNSMEZCUlN4SFFVRkZPMEZCUVVNc2JVSkJRVXM3UVVGQlJTeHRRa0ZCU3p0QlFVRkZMRzFDUVVGTE8wRkJRVVVzWTBGQlJTeFRRVUZQTzBGQlFVVXNjVUpCUVZFc1IwRkJSU3hKUVVGRkxFVkJRVVVzVVVGQlRTeERRVUZETEV0QlFVYzdRVUZCUXl4clFrRkJTU3hKUVVGRkxFOUJRVXM3UVVGQlJTeHRRa0ZCUnl4UFFVRkxPMEZCUVVVc2JVSkJRVWNzUzBGQlJ5eEpRVUZGTEVsQlFVVXNTVUZCUlR0QlFVRkZMR2RDUVVGRkxFdEJRVXNzVDBGQlN5eEpRVUZGTEVWQlFVVXNUVUZCU1N4TlFVRkpMRU5CUVVNc1NVRkJSU3hQUVVGTExFbEJRVVVzUlVGQlJTeE5RVUZKTEUxQlFVa3NRMEZCUXl4SlFVRkZMRWRCUVVjc1RVRkJTU3hOUVVGSkxFTkJRVU1zUTBGQlF6dEJRVUZGTEcxQ1FVRkhMRWxCUVVVc1NVRkJSVHRCUVVGQkxGbEJRVU03UVVGQlF5eHRRa0ZCVHl4SFFVRkhMRU5CUVVNc1JVRkJSU3hOUVVGTkxFMUJRVXNzUTBGQlF6dEJRVUZCTEZWQlFVTXNSMEZCUlN4SFFVRkZMRTFCUVVrc1MwRkJTeXhKUVVGSkxFZEJRVVVzUjBGQlJTeFhRVUZWTzBGQlFVTXNiVUpCUVU4N1FVRkJRU3hWUVVGVkxFZEJRVVVzUjBGQlJTeE5RVUZKTEZsQlFWa3NTVUZCU1N4SFFVRkZMRWRCUVVVc1UwRkJVeXhIUVVGRkxFZEJRVVVzUjBGQlJUdEJRVUZETEcxQ1FVRkxPMEZCUVVVc2JVSkJRVThzUlVGQlJTeFhRVUZYTEUxQlFVa3NUVUZCU1N4SFFVRkZMRTFCUVVrc1IwRkJSU3hMUVVGSExFMUJRVWtzVDBGQlN5eERRVUZETzBGQlFVRXNWVUZCUXl4SFFVRkZMRWRCUVVVc1UwRkJVeXhIUVVGRk8wRkJRVU1zYlVKQlFVczdRVUZCUlN4blFrRkJTU3hKUVVGRkxFVkJRVVU3UVVGQlR5eG5Ra0ZCUnl4aFFVRlhPMEZCUVVVc2NVSkJRVTA3UVVGQlJ5eHhRa0ZCVVN4SlFVTnVaaXhIUVVGRkxFdEJRVWNzUjBGQlJTeExRVUZITEVkQlFVVTdRVUZCUXl4clFrRkJTU3hKUVVGRkxFdEJRVWNzU1VGQlJTeE5RVUZITzBGQlFVY3NhMEpCUVVVc1MwRkJTeXhKUVVGSkxFZEJRVVVzU1VGQlJTeFRRVUZUTzBGQlFVVXNhMEpCUVVrc1NVRkJSVHRCUVVGTExHdENRVUZGTEV0QlFVc3NTVUZCU1N4SFFVRkZMRU5CUVVNN1FVRkJSU3hwUWtGQlJUdEJRVUZETEhGQ1FVRkhMRVZCUVVVc1NVRkJTU3hMUVVGTExFZEJRVVVzV1VGQlZ5eExRVUZITEZGQlFVMHNTVUZCUlN4VFFVRlBMRXRCUVVzc1NVRkJSU3hGUVVGRkxFOUJRVThzWVVGQlZ5eFRRVUZQTzBGQlFVMHNiMEpCUVVjN1FVRkJReXh2UWtGQlJTeExRVUZMTEVOQlFVTTdRVUZCUlN4eFFrRkJSenRCUVVGRkxITkNRVUZKTEVsQlFVVTdRVUZCUlN4M1FrRkJUVHRCUVVGQkxHZENRVUZETEZOQlFVOHNSMEZCUlR0QlFVRkJMR2RDUVVGRE8wRkJRVU1zYjBKQlFVVTdRVUZCUVN4alFVRk5PMEZCUVVNc2EwSkJRVWM3UVVGQlJTeDFRa0ZCVFR0QlFVRkJMRmxCUVVVN1FVRkJReXh0UWtGQlRUdEJRVUZCTEZWQlFVVXNSMEZCUlN4SFFVRkZMRk5CUVZNc1IwRkJSU3hIUVVGRk8wRkJRVU1zYlVKQlFVczdRVUZCUlN4dFFrRkJTenRCUVVGRkxHZENRVUZKTEVsQlFVVTdRVUZCUlN4bFFVRkhMRVZCUVVVc1VVRkJVU3hEUVVGRExFZEJRVVVzVFVGQlNUdEJRVUZETEd0Q1FVRkpMRWxCUVVVc1NVRkJSVHRCUVVGRkxHdENRVUZGTEVWQlFVVXNTVUZCUlN4SlFVRkZMRTFCUVVrc1RVRkJTU3hEUVVGRExFbEJRVVU3UVVGQlJTeHRRa0ZCU1N4SlFVRkZMRWRCUVVVc1NVRkJSU3hGUVVGRkxGRkJRVThzUlVGQlJUdEJRVUZGTEd0Q1FVRkZMRkZCUVUwc1RVRkJTU3hEUVVGRExFbEJRVVVzUlVGQlJTeFhRVUZYTEVOQlFVTTdRVUZCUlN4blFrRkJSU3hOUVVGSkxFMUJRVWtzUTBGQlF5eEpRVUZGTzBGQlFVVXNiVUpCUVVjc1JVRkJSU3hUUVVGUE8wRkJRVUVzV1VGQlF5eERRVUZETzBGQlFVVXNiVUpCUVU4N1FVRkJRU3hWUVVGRExFZEJRVVVzUjBGQlJTeFRRVUZUTEVkQlFVVXNSMEZCUlR0QlFVRkRMRzFDUVVGTE8wRkJRVVVzYlVKQlFVczdRVUZCUlN4blFrRkJTU3hKUVVGRkxFZEJRVWM3UVVGQlJTeGpRVUZGTEUxQlFVa3NUVUZCU1N4RFFVRkRMRWxCUVVVc1JVRkJSVHRCUVVGUExHZENRVUZKTEVsQlEzSm1PMEZCUVVVc1kwRkJSU3hSUVVGUkxFOUJRVWNzUzBGQlJ5eEZRVUZGTEZOQlFVOHNRMEZCUXp0QlFVRkZMR05CUVVVc1RVRkJTU3hOUVVGSkxFTkJRVU1zU1VGQlJUdEJRVUZGTEcxQ1FVRlBPMEZCUVVFc1ZVRkJReXhIUVVGRkxFZEJRVVVzVFVGQlNTeEpRVUZITEVkQlFVVXNWMEZCVlR0QlFVRkRMRzFDUVVGUE8wRkJRVUVzVlVGQlJTeEhRVUZGTEVkQlFVVXNWMEZCVlR0QlFVRkRMRzFDUVVGUE8wRkJRVUVzVlVGQlJTeEhRVUZGTEVkQlFVVXNVMEZCVXl4SFFVRkZMRWRCUVVVc1IwRkJSU3hIUVVGRk8wRkJRVU1zYlVKQlFVczdRVUZCUlN4dFFrRkJTenRCUVVGRkxHMUNRVUZMTzBGQlFVVXNjVUpCUVZFc1NVRkJSU3hIUVVGRkxFbEJRVVVzUjBGQlJTeEpRVUZGTEVkQlFVVXNTMEZCU1R0QlFVRkRMR3RDUVVGSkxFbEJRVVVzUlVGQlJTeE5RVUZKTEUxQlFVa3NRMEZCUXl4SFFVRkZMRWxCUVVVc1JVRkJSU3hKUVVGRkxFMUJRVWtzVFVGQlNTeERRVUZETzBGQlFVVXNiVUpCUVVjN1FVRkJSU3gxUWtGQlVTeEpRVUZGTEVkQlFVVXNTVUZCUlN4SFFVRkZMRXRCUVVrN1FVRkJReXh2UWtGQlNTeEpRVUZGTEVWQlFVVXNTVUZCUlN4TlFVRkpMRU5CUVVNc1IwRkJSU3hKUVVGRkxFZEJRVWNzUTBGQlF6dEJRVUZGTEhOQ1FVRkpMRXRCUVVjc1QwRkJTeXhOUVVGSkxFMUJRVWtzU1VGQlJTeExRVUZITEVkQlFVY3NSMEZCUnl4SFFVRkZMRU5CUVVNc1EwRkJReXhIUVVGRkxFVkJRVVVzVTBGQlR5eExRVUZITEVWQlFVVXNTMEZCU3l4RFFVRkRPMEZCUVVFc1kwRkJRenRCUVVGRExHMUNRVUZITzBGQlFVRXNXVUZCUXp0QlFVRkRMR05CUVVVc1RVRkJTU3hOUVVGSkxFTkJRVU1zU1VGQlJUdEJRVUZGTEcxQ1FVRlBPMEZCUVVFc1ZVRkJReXhIUVVGRkxFZEJRVVVzU1VGQlJ5eEhRVUZGTEZOQlFWTXNSMEZCUlN4SFFVRkZMRWRCUVVVc1IwRkJSVHRCUVVGRExHMUNRVUZQTEVkQlFVY3NUVUZCU1N4SFFVRkZMRTFCUVVrc1IwRkJSU3hOUVVGSkxFZEJRVVVzVFVGQlNTeERRVUZETzBGQlFVRXNWVUZCUXl4RlFVRkRMRWRCUVVVc1NVRkJSU3hYUVVGVk8wRkJRVU1zY1VKQlFWTXNSVUZCUlN4SFFVRkZPMEZCUVVNc2EwSkJRVVVzUlVGQlJUdEJRVUZSTEd0Q1FVRkZMRWRCUVVjN1FVRkJSU3hyUWtGQlJTeEZRVUZGTzBGQlFVVXNhVUpCUVVjN1FVRkJSU3huUWtGQlJTeFJRVUZSTEVWQlFVVXNRMEZCUXp0QlFVRkZPMEZCUVVrc2JVSkJRVWNzVFVGQlNTeFRRVU51Wml4TlFVRkpMR05CUVdNc1EwRkJReXhIUVVGRkxFbEJRVVVzVDBGQlRTeE5RVUZKTEVsQlFVVXNSMEZCUlN4SlFVRkZMRTFCUVVzc1JVRkJSVHRCUVVGSkxIRkNRVUZQTzBGQlFVRXNXVUZCUXp0QlFVRkRMR2RDUVVGSkxFbEJRVVVzUlVGQlF5eEhRVUZGTEVkQlFVVTdRVUZCUlR0QlFVRkpMR2RDUVVGSExFVkJRVVU3UVVGQlowSXNhMEpCUVVjN1FVRkJReXgxUWtGQlR5eEZRVUZGTEdkQ1FVRm5RaXhIUVVGRkxFTkJRVU03UVVGQlFTeGpRVUZETEZOQlFVOHNSMEZCUlR0QlFVRkRMR3RDUVVGRkxITkVRVUZ6UkN4RFFVRkRMRVZCUVVVc1IwRkJSU3hGUVVGRkxFTkJRVU03UVVGQlFTeGpRVUZETzBGQlFVTXNaVUZCUnl4SFFVRkZMRk5CUVZNc1IwRkJSVHRCUVVGRExHZENRVUZGTEVWQlFVVXNVVUZCVVR0QlFVRkJMRmxCUVVNc1EwRkJReXhGUVVGRkxFMUJRVTBzUTBGQlF6dEJRVUZGTEcxQ1FVRk5MRU5CUVVNN1FVRkJRU3hWUVVGRExFVkJRVVU3UVVGQlJTeFpRVUZGTEZkQlFWTXNRMEZCUXl4SFFVRkZMRTlCUVVzc1JVRkJSU3hYUVVGVExFVkJRVVVzUjBGQlJ5eEhRVUZGTEVOQlFVTTdRVUZCUlN4WlFVRkZMRzFDUVVGcFFpeERRVUZETEVkQlFVVXNUMEZCU3l4RlFVRkZMRzFDUVVGcFFpeEZRVUZGTEVkQlFVY3NSMEZCUlN4RFFVRkRPMEZCUVVVc1dVRkJSU3d5UWtGQmVVSXNRMEZCUXl4SFFVRkZMRWRCUVVVc1IwRkJSU3hIUVVGRkxFZEJRVVVzUjBGQlJTeEhRVUZGTEVkQlFVVXNSMEZCUlN4UFFVRkxMRVZCUVVVc01rSkJRWGxDTEVWQlFVVXNSMEZCUnl4SFFVRkZMRWRCUVVVc1IwRkJSU3hIUVVGRkxFZEJRVVVzUjBGQlJTeEhRVUZGTEVkQlFVVXNSMEZCUlN4RFFVRkRPMEZCUXpGakxGbEJRVVVzT0VKQlFUUkNMRU5CUVVNc1IwRkJSU3hQUVVGTExFVkJRVVVzT0VKQlFUUkNMRVZCUVVVc1IwRkJSeXhIUVVGRkxFTkJRVU03UVVGQlJTeFpRVUZGTEN0Q1FVRTJRaXhEUVVGRExFZEJRVVVzUjBGQlJTeFBRVUZMTEVWQlFVVXNLMEpCUVRaQ0xFVkJRVVVzUjBGQlJ5eEhRVUZGTEVkQlFVVXNRMEZCUXp0QlFVRkZMRmxCUVVVc05FSkJRVEJDTEVOQlFVTXNSMEZCUlN4SFFVRkZMRTlCUVVzc1JVRkJSU3cwUWtGQk1FSXNSVUZCUlN4SFFVRkhMRWRCUVVVc1IwRkJSU3hEUVVGRE8wRkJRVVVzV1VGQlJTdzBRa0ZCTUVJc1VVRkJTU3hGUVVGRkxEUkNRVUV3UWl4RlFVRkZMRWRCUVVjc1EwRkJRenRCUVVGRkxGbEJRVVVzYjBKQlFXdENMRU5CUVVNc1IwRkJSU3hIUVVGRkxFOUJRVXNzUlVGQlJTeHZRa0ZCYTBJc1JVRkJSU3hIUVVGSExFZEJRVVVzUjBGQlJTeERRVUZETzBGQlFVVXNXVUZCUlN4eFFrRkJiVUlzVVVGQlNTeEZRVUZGTEhGQ1FVRnRRaXhGUVVGRkxFZEJRVWNzUTBGQlF6dEJRVUZGTEZsQlFVVXNNRUpCUVhkQ0xFTkJRVU1zUjBGQlJTeEhRVUZGTEU5QlFVc3NSVUZCUlN3d1FrRkJkMElzUlVGQlJTeEhRVUZITEVkQlFVVXNSMEZCUlN4RFFVRkRPMEZCUTJobUxGbEJRVVVzYlVKQlFXbENMRU5CUVVNc1IwRkJSU3hQUVVGTExFVkJRVVVzYlVKQlFXbENMRVZCUVVVc1IwRkJSeXhIUVVGRkxFTkJRVU03UVVGQlJTeFpRVUZGTEc5Q1FVRnJRaXhEUVVGRExFZEJRVVVzVDBGQlN5eEZRVUZGTEc5Q1FVRnJRaXhGUVVGRkxFZEJRVWNzUjBGQlJTeERRVUZETzBGQlFVVXNXVUZCUlN4WFFVRlRMRkZCUVVrc1JVRkJSU3hYUVVGVExFVkJRVVVzUjBGQlJ5eERRVUZETzBGQlFVVXNXVUZCUlN4dFFrRkJhVUlzUTBGQlF5eEhRVUZGTEVkQlFVVXNSMEZCUlN4SFFVRkZMRWRCUVVVc1QwRkJTeXhGUVVGRkxHMUNRVUZwUWl4RlFVRkZMRWRCUVVjc1IwRkJSU3hIUVVGRkxFZEJRVVVzUjBGQlJTeEhRVUZGTEVOQlFVTTdRVUZCUlN4WlFVRkZMRzlDUVVGclFpeERRVUZETEVkQlFVVXNSMEZCUlN4SFFVRkZMRWRCUVVVc1QwRkJTeXhGUVVGRkxHOUNRVUZyUWl4RlFVRkZMRWRCUVVjc1IwRkJSU3hIUVVGRkxFZEJRVVVzUjBGQlJTeERRVUZETzBGQlFVVXNXVUZCUlN4dlFrRkJhMElzVVVGQlNTeEZRVUZGTEc5Q1FVRnJRaXhGUVVGRkxFZEJRVWNzUTBGQlF6dEJRVUZGTEZsQlFVVXNkVUpCUVhGQ0xFTkJRVU1zUjBGQlJTeEhRVUZGTEVkQlFVVXNUMEZCU3l4RlFVRkZMSFZDUVVGeFFpeEZRVUZGTEVsQlFVa3NSMEZCUlN4SFFVRkZMRWRCUVVVc1EwRkJRenRCUVVGRkxGbEJRVVVzZDBKQlFYTkNMRU5CUVVNc1IwRkJSU3hIUVVGRkxFOUJRVXNzUlVGQlJTeDNRa0ZCYzBJc1JVRkJSU3hKUVVGSkxFZEJRVVVzUjBGQlJTeERRVUZETzBGQlEzQmxMRmxCUVVVc2QwSkJRWE5DTEZGQlFVa3NSVUZCUlN4M1FrRkJjMElzUlVGQlJTeEpRVUZKTEVOQlFVTTdRVUZCUlN4WlFVRkZMRzlDUVVGclFpeFJRVUZKTEVWQlFVVXNiMEpCUVd0Q0xFVkJRVVVzU1VGQlNTeERRVUZETzBGQlFVVXNXVUZCUlN4blFrRkJZeXhEUVVGRExFZEJRVVVzUjBGQlJTeFBRVUZMTEVWQlFVVXNaMEpCUVdNc1JVRkJSU3hKUVVGSkxFZEJRVVVzUjBGQlJTeERRVUZETzBGQlFVVXNXVUZCUlN4cFFrRkJaU3hEUVVGRExFZEJRVVVzUjBGQlJTeEhRVUZGTEU5QlFVc3NSVUZCUlN4cFFrRkJaU3hGUVVGRkxFbEJRVWtzUjBGQlJTeEhRVUZGTEVkQlFVVXNRMEZCUXp0QlFVRkZMRmxCUVVVc2QwSkJRWE5DTEZGQlFVa3NSVUZCUlN4M1FrRkJjMElzUlVGQlJTeEpRVUZKTEVOQlFVTTdRVUZCUlN4WlFVRkZMSEZDUVVGdFFpeFJRVUZKTEVWQlFVVXNjVUpCUVcxQ0xFVkJRVVVzU1VGQlNTeERRVUZETzBGQlFVVXNXVUZCUlN4eFFrRkJiVUlzUTBGQlF5eEhRVUZGTEVkQlFVVXNSMEZCUlN4SFFVRkZMRTlCUVVzc1JVRkJSU3h4UWtGQmJVSXNSVUZCUlN4SlFVRkpMRWRCUVVVc1IwRkJSU3hIUVVGRkxFZEJRVVVzUTBGQlF6dEJRVUZGTEZsQlFVVXNWVUZCVVN4RFFVRkRMRWRCUVVVc1IwRkJSU3hIUVVGRkxFZEJRVVVzUjBGQlJTeEhRVUZGTEVkQlFVVXNUMEZCU3l4RlFVRkZMRlZCUVZFc1JVRkJSU3hKUVVGSkxFZEJRVVVzUjBGQlJTeEhRVUZGTEVkQlFVVXNSMEZCUlN4SFFVRkZMRWRCUVVVc1EwRkJRenRCUVVOb1pTeFpRVUZGTEcxQ1FVRnBRaXhSUVVGSkxFVkJRVVVzYlVKQlFXbENMRVZCUVVVc1NVRkJTU3hEUVVGRE8wRkJRVVVzV1VGQlJTdzJRa0ZCTWtJc1EwRkJReXhIUVVGRkxFOUJRVXNzUlVGQlJTdzJRa0ZCTWtJc1JVRkJSU3hKUVVGSkxFZEJRVVVzUTBGQlF6dEJRVUZGTEZsQlFVVXNaME5CUVRoQ0xGRkJRVWtzUlVGQlJTeG5RMEZCT0VJc1JVRkJSU3hKUVVGSkxFTkJRVU03UVVGQlJTeFpRVUZGTERSQ1FVRXdRaXhEUVVGRExFZEJRVVVzUjBGQlJTeEhRVUZGTEVkQlFVVXNSMEZCUlN4SFFVRkZMRWRCUVVVc1QwRkJTeXhGUVVGRkxEUkNRVUV3UWl4RlFVRkZMRWxCUVVrc1IwRkJSU3hIUVVGRkxFZEJRVVVzUjBGQlJTeEhRVUZGTEVkQlFVVXNSMEZCUlN4RFFVRkRPMEZCUVVVc1dVRkJSU3cwUWtGQk1FSXNVVUZCU1N4RlFVRkZMRFJDUVVFd1FpeEZRVUZGTEVsQlFVa3NRMEZCUXp0QlFVRkZMRmxCUVVVc01rSkJRWGxDTEVOQlFVTXNSMEZCUlN4SFFVRkZMRWRCUVVVc1IwRkJSU3hIUVVGRkxFOUJRVXNzUlVGQlJTd3lRa0ZCZVVJc1JVRkJSU3hKUVVGSkxFZEJRVVVzUjBGQlJTeEhRVUZGTEVkQlFVVXNSMEZCUlN4RFFVRkRPMEZCUXpWakxGbEJRVVVzTkVKQlFUQkNMRU5CUVVNc1IwRkJSU3hQUVVGTExFVkJRVVVzTkVKQlFUQkNMRVZCUVVVc1NVRkJTU3hIUVVGRkxFTkJRVU03UVVGQlJTeFpRVUZGTEhWQ1FVRnhRaXhEUVVGRExFZEJRVVVzUjBGQlJTeEhRVUZGTEVkQlFVVXNSMEZCUlN4UFFVRkxMRVZCUVVVc2RVSkJRWEZDTEVWQlFVVXNTVUZCU1N4SFFVRkZMRWRCUVVVc1IwRkJSU3hIUVVGRkxFZEJRVVVzUTBGQlF6dEJRVUZGTEZsQlFVVXNaME5CUVRoQ0xFTkJRVU1zUjBGQlJTeEhRVUZGTEU5QlFVc3NSVUZCUlN4blEwRkJPRUlzUlVGQlJTeEpRVUZKTEVkQlFVVXNSMEZCUlN4RFFVRkRPMEZCUVVVc1dVRkJSU3h4UTBGQmJVTXNRMEZCUXl4SFFVRkZMRWRCUVVVc1IwRkJSU3hQUVVGTExFVkJRVVVzY1VOQlFXMURMRVZCUVVVc1NVRkJTU3hIUVVGRkxFZEJRVVVzUjBGQlJTeERRVUZETzBGQlFVVXNXVUZCUlN4MVEwRkJjVU1zUTBGQlF5eEhRVUZGTEVkQlFVVXNSMEZCUlN4UFFVRkxMRVZCUVVVc2RVTkJRWEZETEVWQlFVVXNTVUZCU1N4SFFVRkZMRWRCUVVVc1IwRkJSU3hEUVVGRE8wRkJReTlpTEZsQlFVVXNkVU5CUVhGRExFTkJRVU1zUjBGQlJTeEhRVUZGTEVkQlFVVXNUMEZCU3l4RlFVRkZMSFZEUVVGeFF5eEZRVUZGTEVsQlFVa3NSMEZCUlN4SFFVRkZMRWRCUVVVc1EwRkJRenRCUVVGRkxGbEJRVVVzYzBOQlFXOURMRU5CUVVNc1IwRkJSU3hIUVVGRkxFZEJRVVVzVDBGQlN5eEZRVUZGTEhORFFVRnZReXhGUVVGRkxFbEJRVWtzUjBGQlJTeEhRVUZGTEVkQlFVVXNRMEZCUXp0QlFVRkZMRmxCUVVVc05rSkJRVEpDTEZGQlFVa3NSVUZCUlN3MlFrRkJNa0lzUlVGQlJTeEpRVUZKTEVOQlFVTTdRVUZCUlN4alFVRkpMRXRCUVVjc1QwRkJTeXhMUVVGSExFVkJRVVVzU1VGQlNTeEhRVUZGTEV0QlFVY3NSVUZCUlN4VlFVRlJMRkZCUVVrc1MwRkJSeXhGUVVGRkxGVkJRVkVzUlVGQlJTeEpRVUZKTEVOQlFVTTdRVUZCUlN4WlFVRkZMRkZCUVUwc1VVRkJTU3hGUVVGRkxGRkJRVTBzUlVGQlJTeEpRVUZKTEVOQlFVTTdRVUZCUlN4alFVRkpMRXRCUVVjc1VVRkJTU3hMUVVGSExFVkJRVVVzU1VGQlNTeERRVUZETEVkQlFVVXNTMEZCUnl4UFFVRkxMRXRCUVVjc1JVRkJSU3hKUVVGSkxFZEJRVVVzUzBGQlJ5eFJRVUZKTEV0QlFVY3NSVUZCUlN4SlFVRkpMRU5CUVVNc1IwRkJSU3hMUVVGSExGRkJRVWtzUzBGQlJ5eEZRVUZGTEVsQlFVa3NRMEZCUXp0QlFVTm9ZeXh0UWtGQlV5eExRVUZKTzBGQlFVTXNaMEpCUVVrc1NVRkJSVHRCUVVGRkxHZENRVUZGTEU5QlFVOHNUMEZCVHl4RFFVRkRMRWRCUVVVc1EwRkJRenRCUVVGRkxHZENRVUZKTEVsQlFVVXNUMEZCUnl4TlFVRkpMRVZCUVVVc1RVRkJTU3hIUVVGRkxFbEJRVVVzVDBGQlJ5eFBRVUZITEVWQlFVVXNRMEZCUXl4TlFVRkpPMEZCUVVVc1kwRkJSU3hMUVVGSExFVkJRVVVzUlVGQlJTeEZRVUZGTzBGQlFVVXNZMEZCUlN4TFFVRkhMRVZCUVVVc1JVRkJSU3hGUVVGRk8wRkJRVVVzWTBGQlJTeExRVUZITEVWQlFVVXNSVUZCUlN4RlFVRkZPMEZCUVVVc1kwRkJSU3hMUVVGSExFVkJRVVVzUlVGQlJTeEZRVUZGTzBGQlFVVXNiVUpCUVU4N1FVRkJRU3hWUVVGRE8wRkJRVU1zV1VGQlJTeGhRVUZYTzBGQlFVY3NXVUZCUlN4WlFVRlZPMEZCUVVjc1dVRkJSU3hsUVVGaE8wRkJRVWNzV1VGQlJTeGxRVUZoTzBGQlFVVXNXVUZCUlN4bFFVRmhMRU5CUVVNc1IwRkJSU3hIUVVGRkxFMUJRVWtzUlVGQlJTeEhRVUZGTEVkQlFVVXNSMEZCUlN4RFFVRkRPMEZCUVVVc1dVRkJSU3hyUWtGQlowSTdRVUZCUlN4alFVRkpPMEZCUVVVc1kwRkJSU3hUUVVGVExFdEJRVWs3UVVGQlF5eHBRa0ZCUnl4SFFVRkhPMEZCUVVVc2EwSkJRVWtzU1VGQlJUdEJRVUZCTEZWQlFVYzdRVUZETDFNc2JVSkJRVk1zUzBGQlNUdEJRVUZETEdkQ1FVRkhMRVZCUVVVc1NVRkJSU3hKUVVGSE8wRkJRVU1zYTBKQlFVY3NSVUZCUlR0QlFVRlBMSEZDUVVGSkxHTkJRVmtzVDBGQlR5eEZRVUZGTEZkQlFWTXNSVUZCUlN4VFFVRlBMRU5CUVVNc1JVRkJSU3hOUVVGTkxFbEJRVWNzUlVGQlJTeFBRVUZQTEZWQlFWRTdRVUZCUXl4elFrRkJTU3hKUVVGRkxFVkJRVVVzVDBGQlR5eE5RVUZOTzBGQlFVVXNiMEpCUVVVc1VVRkJVU3hEUVVGRE8wRkJRVUVzWjBKQlFVTTdRVUZCUXl4eFFrRkJTeXhKUVVGRkxFVkJRVVU3UVVGQlVTeHJRa0ZCUlN4TlFVRk5MRVZCUVVVc1EwRkJRenRCUVVGRkxHdENRVUZITEVWQlFVVXNTVUZCUlN4TFFVRkhMRTFCUVVrc1NVRkJSU3hOUVVGSExFVkJRVVVzV1VGQlZTeE5RVUZITEUxQlFVczdRVUZCUXl4MVFrRkJTeXhKUVVGRkxFVkJRVVU3UVVGQlVTeHZRa0ZCUlN4TlFVRk5MRVZCUVVVc1EwRkJRenRCUVVGRkxIRkNRVUZKTEVWQlFVVXNRMEZCUXl4SFFVRkZMRWxCUVVVc1IwRkJSenRCUVVGUkxIRkNRVUZITEUxQlFVMHNSVUZCUlN4RFFVRkRPMEZCUVVFc1kwRkJRenRCUVVGQkxGbEJRVU03UVVGQlFTeFZRVUZETzBGQlFVTXNZVUZCUnp0QlFVYzNVaXhwUWtGQlR5eFZRVUZWTzBGQlFVRXNVVUZEYmtJN1FVRkJRU3hOUVVWQkxFZEJRVWM3UVVGRlNDeFZRVUZKTEU5QlFVOHNXVUZCV1N4WlFVRlpMRTlCUVU4c1YwRkJWenRCUVVOdVJDeGxRVUZQTEZWQlFWVTdRVUZCUVN4bFFVTldMRTlCUVU4c1YwRkJWeXhqUVVGakxFOUJRVThzUzBGQlN6dEJRVU51UkN4bFFVRlBMRU5CUVVNc1IwRkJSeXhOUVVGTkxFOUJRVTg3UVVGQlFUdEJRVUZCT3pzN1FVTjBSREZDTzBGQlFVRTdRVUZCUVR0QlFVRkJPenM3UVVOQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVRzN08wRkRRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVN4TlFVRmhPMEZCUVdJN1FVRkJRVHRCUVVGUExFMUJRVTBzVDBGQlR6dEJRVUZCTzBGQlFVRTdPenRCUTBGd1FqdEJRVUZCTzBGQlFVRTdRVUZEUVN4VlFVRkpMRzFDUVVGdFFpeE5RVUZOTzBGQlF6TkNMRmxCUVVrc1lVRkJZU3hQUVVGUExHRkJRV0VzWlVGQlpTeFRRVUZUTEdkQ1FVRm5RaXhUUVVGVExHTkJRV01zVFVGQlRUdEJRVU14Unl4WlFVRkpMRTlCUVU4c1pVRkJaVHRCUVVGaExIVkNRVUZoTEdOQlFXTTdRVUZEYkVVc1pVRkRSaXhUUVVGVExGbEJRVmtzUTBGQlF5eEhRVUZITzBGQlJYcENMRzFDUVVGVExFdEJRVWs3UVVGQlF5eGpRVUZGTEZWQlFWRXNSVUZCUlN4VlFVRlJMRVZCUVVVN1FVRkJSU3h0UWtGQlR6dEJRVUZCTEZWQlFVTTdRVUZCUXl4dFFrRkJVeXhKUVVGSE8wRkJRVU1zWTBGQlJTeFZRVUZSTEVWQlFVVXNWVUZCVVN4RlFVRkZPMEZCUVVVc2JVSkJRVTg3UVVGQlFTeFZRVUZGTzBGQlFVTXNiVUpCUVZNc1NVRkJSenRCUVVGRExHTkJRVVVzVlVGQlVTeEZRVUZGTEZWQlFWRXNSVUZCUlR0QlFVRkZMRzFDUVVGUE8wRkJRVUVzVlVGQlJUdEJRVUZETEcxQ1FVRlRMRWxCUVVjN1FVRkJReXhqUVVGRkxGVkJRVkVzUlVGQlJTeFZRVUZSTEVWQlFVVTdRVUZCUlN4dFFrRkJUenRCUVVGQkxGVkJRVVU3UVVGQlF5eHRRa0ZCVXl4TFFVRkpPMEZCUVVNc1kwRkJSU3hWUVVGUkxFVkJRVVVzVlVGQlVTeEZRVUZGTzBGQlFVVXNiVUpCUVU4N1FVRkJRU3hWUVVGRk8wRkJRVU1zWTBGQlNTeEpRVUZGTEZkQlFWVXNTVUZCUnp0QlFVRkZMRmxCUVVVc1VVRkJUU3hKUVVGSkxGRkJRVkVzUTBGQlF5eEhRVUZGTEUxQlFVazdRVUZCUXl4cFFrRkJSenRCUVVGRkxHZENRVUZGTzBGQlFVRXNWVUZCUXl4RFFVRkRPMEZCUTNSVExHTkJRVWtzUzBGQlJ5eFBRVUZQTEU5QlFVOHNRMEZCUXl4SFFVRkZMRU5CUVVNc1IwRkJSU3hMUVVGSExHdENRVUZwUWl4SlFVRkZMRU5CUVVNc1IwRkJSU3hOUVVGSk8wRkJRVU1zYTBKQlFVMDdRVUZCUVN4VlFVRkZMRWRCUVVVc1MwRkJSeXhaUVVGVkxFOUJRVThzVVVGQlR5eEpRVUZGTEdOQlFWa3NUMEZCVHl4bFFVRmpMRWxCUVVVc1dVRkJWU3hQUVVGUExGZEJRVk1zV1VGQlZTeFBRVUZQTEZGQlFWRXNXVUZCVlN4WlFVRlZMRTlCUVU4c1VVRkJVU3hUUVVGVExFMUJRVXNzU1VGQlJTeEZRVUZGTERCQ1FVRjNRaXhQUVVGSExFbEJRVVU3UVVGQlJ5eHRRa0ZCVXl4SFFVRkhMRWRCUVVVN1FVRkJReXh0UWtGQlR5eEZRVUZGTEdGQlFWY3NSVUZCUlN4WFFVRlhMRWRCUVVVc1EwRkJReXhKUVVGRkxFbEJRVVU3UVVGQlFTeFZRVUZETzBGQlFVTXNZMEZCU1N4SlFVRkhMRWRCUVVVN1FVRkROMVVzWTBGQlJ5eEhRVUZGTzBGQlFVTXNaMEpCUVVrc1MwRkJSeXgxUTBGQll5eExRVUZITzBGQlFXZENMR2RDUVVGRkxFbEJRVVVzUjBGQlJ5eFJRVUZSTEVOQlFVTXNTVUZCUlN4TlFVRkpMRmxCUVZVN1FVRkJTU3hwUWtGQlJ5eERRVUZETEVkQlFVVXNUVUZCU1R0QlFVRkRMR3RDUVVGRkxFVkJRVVVzUTBGQlF5eEpRVUZGTEVsQlFVa3NTVUZCU1N4RFFVRkRMRWxCUVVVc1IwRkJSeXhWUVVGVkxFTkJRVU03UVVGQlJTeHhRa0ZCVHl4SFFVRkhMR0ZCUVdFc1IwRkJSU3hKUVVGRkxGTkJRVThzVFVGQlRUdEJRVUZCTEZsQlFVTTdRVUZCUlN4blFrRkJSU3hQUVVGSE8wRkJRVU1zYTBKQlFVVXNSMEZCUnl4SFFVRkZMRWxCUVVVN1FVRkJSU3huUWtGQlJTeFhRVUZUTEVsQlFVVXNTVUZCU1N4WFFVRlhMRU5CUVVNN1FVRkJSeXh4UWtGQlR6dEJRVUZCTEZsQlFVTTdRVUZCUlN4blFrRkJSU3hEUVVGRExFZEJRVVVzUjBGQlJTeEhRVUZGTEVsQlFVVXNVMEZCU3p0QlFVRkRMR3RDUVVGRkxFVkJRVVVzUTBGQlF5eEpRVUZGTEVsQlFVa3NTVUZCU1N4RFFVRkRMRWxCUVVVc1IwRkJSeXhWUVVGVkxFTkJRVU03UVVGQlJTeHBRa0ZCUnl4VFFVRlRMRWRCUVVVc1NVRkJSU3hUUVVGUExGRkJRVThzUTBGQlF5eEhRVUZGTEUxQlFVazdRVUZCUXl4dlFrRkJSU3hGUVVGRkxFTkJRVU1zU1VGQlJTeEZRVUZGTEVsQlFVVXNSVUZCUlN4VFFVRlBMRU5CUVVNN1FVRkJRU3hqUVVGRExFTkJRVU03UVVGQlFTeFpRVUZETzBGQlFVVXNZVUZCUXl4RlFVRkZMR1ZCUVdFc1NVRkJSU3hSUVVGUkxFdEJRVXNzVjBGQlV5eExRVUZITEZGQlFWRXNTMEZCU3l4RFFVRkRMRVZCUVVVc1VVRkJVU3hQUVVGTkxFZEJRVWM3UVVGQlJ5eHZRa0ZCVVN4TFFVRkxMRTFCUVUwc1EwRkJRenRCUVVGRkxHZENRVUZGTEVOQlFVTXNSMEZCUlN4TlFVRkpPMEZCUVVNc2MwSkJRVkVzVjBGQlV6dEJRVUZGTEc5Q1FVRk5PMEZCUVVFc1dVRkJSVHRCUVVGRkxHTkJRVVVzVlVGQlVTeE5RVUZKTzBGQlEyeG1MR2RDUVVGSk8wRkJRVVVzWjBKQlFVYzdRVUZCUXl4clFrRkJSVHRCUVVGQkxGbEJRWGxDTEZOQlFVOHNSMEZCUlR0QlFVRkRMRzlDUVVGTkxGRkJRVkVzVFVGQlRTeDVSMEZCZVVjc1IwRkJSVHRCUVVGQkxGbEJRVVU3UVVGQlF5eHRRa0ZCVHl4VFFVRlBMRVZCUVVVN1FVRkJRU3hWUVVGTkxGZEJRVk1zVFVGQlNUdEJRVUZGTEdkQ1FVRkZMRWxCUVVVc1MwRkJTeXhUUVVGVExFOUJRVXNzWlVGQllTeFBRVUZQTEZsQlFWVXNVMEZCVXl4clFrRkJaMElzU1VGQlJTeFRRVUZUTEdOQlFXTXNUVUZCVFN4UFFVRlBMR1ZCUVdVc1pVRkJaU3hsUVVGakxFbEJRVVVzWVVGQldTeE5RVUZKTEVWQlFVVXNVVUZCVVN4UFFVRlBMRWxCUVVVc1NVRkJSU3hGUVVGRkxFOUJRVThzUjBGQlJTeEZRVUZGTEZGQlFWRXNWVUZCVXl4RlFVRkZMRVZCUVVVc1dVRkJXU3hIUVVGSExFbEJRVVVzUTBGQlF5eEpRVUZGTEVsQlFVVXNTVUZCUnl4TlFVRkpMRXRCUVVjc1QwRkJSenRCUVVGRExHdENRVUZKTEVsQlFVVXNTVUZCU1R0QlFVRmxMR2RDUVVGRkxFdEJRVXNzVDBGQlRTeEhRVUZGTEV0QlFVVTdRVUZCUlN4blFrRkJSU3hMUVVGTExFbEJRVWs3UVVGRE1XaENMSEZDUVVGUExFVkJRVVU3UVVGQlFTeFpRVUZaTEVkQlFVVXNUVUZCU1N4SlFVRkZMRTlCUVVjN1FVRkJReXhyUWtGQlNTeEpRVUZGTEVsQlFVazdRVUZCWlN4blFrRkJSU3hMUVVGTExFOUJRVTBzUjBGQlJTeExRVUZGTzBGQlFVVXNaMEpCUVVVc1pVRkJZVHRCUVVGakxHZENRVUZGTEV0QlFVc3NTVUZCU1R0QlFVRkZMSEZDUVVGUExFbEJRVWtzVjBGQlZ5eEZRVUZGTEZGQlFWRTdRVUZCUVN4WlFVRkRMRWxCUVVjc1NVRkJSU3hEUVVGRExFZEJRVVVzUjBGQlJTeE5RVUZKTzBGQlFVTXNhMEpCUVVrc1NVRkJSU3hKUVVGSk8wRkJRV1VzWjBKQlFVVXNTMEZCU3l4UFFVRk5MRWRCUVVVc1NVRkJSVHRCUVVGRkxHZENRVUZGTEdWQlFXRTdRVUZCWXl4blFrRkJSU3hUUVVGUExFMUJRVWs3UVVGQlF5eDFRa0ZCU3l4RlFVRkZMRlZCUVZFc1MwRkJSeXhGUVVGRkxGVkJRVkVzUlVGQlJTeFhRVUZUTEVWQlFVVXNSVUZCUlN4UlFVRlJMRWxCUVVVc1JVRkJSVHRCUVVGQkxHTkJRVU03UVVGQlJTeG5Ra0ZCUlN4VlFVRlJPMEZCUVVVc1owSkJRVVVzUzBGQlN5eEpRVUZKTzBGQlFVRXNXVUZCUXp0QlFVRkhMR1ZCUVVjc1pVRkJZU3hQUVVGUExHZENRVUZqTEU5QlFVOHNZMEZCV1N4eFFrRkJjMEk3UVVGQllTeGpRVUZKTEV0QlFVY3NVVUZCVVN4SlFVRkpMRXRCUVVzc1QwRkJUeXhIUVVGRkxFdEJRVWNzVVVGQlVTeE5RVUZOTEV0QlFVc3NUMEZCVHp0QlFVTTFaU3huUWtGQlNTeExRVUZITEVsQlFVa3NUVUZCU1N4SFFVRkhMRlZCUVZVc1IwRkJSU3hGUVVGRkxFdEJRVXNzUjBGQlJ5eEpRVUZGTEVsQlFVa3NSMEZCUlN4TFFVRkhMRWxCUVVrc1RVRkJTU3hIUVVGSExGVkJRVlVzUjBGQlJTeEZRVUZGTEV0QlFVc3NSMEZCUnl4SlFVRkZMRWxCUVVrN1FVRkJSeXhqUVVGSkxFdEJRVWNzU1VGQlJ5eEpRVUZGTzBGQlFVY3NhVUpCUVU4c1QwRkJUeXhIUVVGRkxFVkJRVVU3UVVGQlJTeGxRVUZITzBGQlFVc3NjMEpCUVZVc1QwRkJUeXhsUVVGaExFZEJRVWNzYVVOQlFXbERPMEZCUVVVc1kwRkJTU3hIUVVGRkxFbEJRVWNzU1VGQlJTeFBRVUZITEVkQlFVVXNSMEZCUlN4SlFVRkhMRWxCUVVjc1NVRkJSenRCUVVGSExHMUNRVUZUTEVsQlFVYzdRVUZCUXl4blFrRkJTU3hKUVVGRkxFVkJRVVU3UVVGQlR5eGpRVUZGTEZGQlFVMHNTVUZCUlN4SlFVRkpMRlZCUVZVc1EwRkJRenRCUVVGRkxHTkJRVVVzVTBGQlR5eEpRVUZKTEZkQlFWY3NRMEZCUXp0QlFVRkZMR05CUVVVc1UwRkJUeXhMUVVGSExFbEJRVWtzVjBGQlZ5eERRVUZETzBGQlFVVXNZMEZCUlN4VlFVRlJMRWxCUVVrc1dVRkJXU3hEUVVGRE8wRkJRVVVzWTBGQlJTeFRRVUZQTEV0QlFVY3NTVUZCU1N4WFFVRlhMRU5CUVVNN1FVRkJSU3hqUVVGRkxGVkJRVkVzUzBGQlJ5eEpRVUZKTEZsQlFWa3NRMEZCUXp0QlFVRkZMR05CUVVVc1ZVRkJVU3hKUVVGSkxHRkJRV0VzUTBGQlF6dEJRVUZGTEdOQlFVVXNWVUZCVVN4TFFVRkhMRWxCUVVrc1lVRkJZU3hEUVVGRE8wRkJRVUVzVlVGQlF6dEJRVU51Wml4alFVRkpMRXRCUVVjN1FVRkRVQ3hqUVVGSE8wRkJRVVVzWjBKQlFVVXNSVUZCUlR0QlFVRkJMRzFDUVVGdFFpeEZRVUZGTzBGQlFWY3NaMEpCUVVVc1JVRkJSVHRCUVVGQkxHMUNRVUZ0UWl4SlFVRkZMRWxCUVVrc1dVRkJXU3hQUVVGUExFVkJRVU1zVTBGQlVTeExRVUZITEU5QlFVMHNVMEZCVVN4UFFVRk5MRkZCUVU4c1MwRkJSU3hEUVVGRExFZEJRVVVzUlVGQlJTeEZRVUZGTEd0Q1FVRnJRanRCUVVGdFFpeHJRa0ZCVFN4RlFVRkZMRFpPUVVFMlRpeEhRVUZGTEV0QlFVY3NSVUZCUlN3eVIwRkJNa2NzUjBGQlJTeE5RVUZOTEZsQlFWazdRVUZEZW1oQ0xGbEJRVVU3UVVGQlJTeGxRVUZITEVWQlFVVXNUMEZCVHp0QlFVRlhMR05CUVVrc1MwRkJSeXhEUVVGRExFZEJRVVVzUzBGQlJ5eERRVUZETEVkQlFVVXNTMEZCUnl4RFFVRkRMRWRCUVVVc1NVRkJSU3hIUVVGRkxFdEJRVWNzVFVGQlN5eEpRVUZGTzBGQlFVc3NiVUpCUVZNc1MwRkJTVHRCUVVGRE8wRkJRVWtzWjBKQlFVY3NTMEZCUnl4TlFVRkpMRk5CUVU4c1QwRkJTeXhqUVVGakxFVkJRVVVzUjBGQlJTeExRVUZITEU5QlFVMHNTVUZCUnp0QlFVRkRMR3RDUVVGSkxFbEJRVVU3UVVGQlJTeHJRa0ZCUlR0QlFVRkxMR2RDUVVGRk8wRkJRVUVzV1VGQlF6dEJRVUZCTEZWQlFVTTdRVUZCUXl4dFFrRkJVeXhIUVVGSExFZEJRVVU3UVVGQlF5eG5Ra0ZCUlN4aFFVRlhMRWxCUVVVN1FVRkJTU3hqUVVGRkxFTkJRVU03UVVGQlJTeG5Ra0ZCUlR0QlFVRkhMR2RDUVVGRk8wRkJRVVVzWjBKQlFVVXNTVUZCU1N4WlFVRlpMR0ZCUVdFc1NVRkJSU3d3UTBGQk1FTTdRVUZCUlN4alFVRkZMRU5CUVVNN1FVRkJSU3hyUWtGQlRUdEJRVUZCTEZWQlFVVTdRVUZCUXl4alFVRkpMRXRCUVVjc1QwRkJSeXhGUVVGRkxGZEJRVmNzZFVOQlFYVkRMRWRCUVVVc1NVRkJSU3hQUVVGSExFVkJRVVVzVjBGQlZ5eFRRVUZUTEVkQlFVVTdRVUZCUlN4alFVRkZPMEZCUVhsQ0xHRkJRVWNzUTBGQlF5eE5RVUZKTEVsQlFVVXNSMEZCUnl4RFFVRkRPMEZCUTJ4aUxHMUNRVUZUTEVkQlFVY3NSMEZCUlR0QlFVRkRMR2RDUVVGSE8wRkJRVVVzY1VKQlFVOHNSVUZCUlN4RFFVRkRPMEZCUVVVc2EwSkJRVXM3UVVGQlFTeFZRVUZyUkR0QlFVRkRMRzFDUVVGVExFZEJRVWNzUjBGQlJUdEJRVUZETEdkQ1FVRkhMRTFCUVVrc1IwRkJSVHRCUVVGRExHdENRVUZITEdOQlFWa3NUMEZCVHl4VFFVRlBMRU5CUVVNc1JVRkJSU3hEUVVGRE8wRkJRVVVzZFVKQlFVOHNUVUZCVFN4SFFVRkZMRVZCUVVNc1lVRkJXU3hqUVVGaExFTkJRVU1zUlVGQlJTeExRVUZMTEU5QlFVYzdRVUZCUXl4elFrRkJSeXhEUVVGRExFVkJRVVU3UVVGQlJ5d3dRa0ZCU3l4NVEwRkJkVU1zU1VGQlJUdEJRVUZKTEhsQ1FVRlBMRVZCUVVVc1dVRkJXVHRCUVVGQkxHZENRVUZETEVOQlFVTXNSVUZCUlN4TlFVRk5MRTFCUVVrc1IwRkJSeXhEUVVGRExFTkJRVU03UVVGQlJTeHJRa0ZCUnp0QlFVRkZMSFZDUVVGUExFbEJRVWtzVVVGQlVTeERRVUZETEVkQlFVVXNUVUZCU1R0QlFVRkRMRzlDUVVGRkxFZEJRVVVzVDBGQlJ5eEZRVUZGTEVsQlFVa3NWMEZCVnl4RFFVRkRMRU5CUVVNc1IwRkJSU3hEUVVGRE8wRkJRVUVzWjBKQlFVTXNRMEZCUXp0QlFVRkJMRmxCUVVNN1FVRkJReXh0UWtGQlR5eFJRVUZSTEZGQlFWRXNSVUZCUlN4TFFVRkxMRTFCUVVrc1IwRkJSeXhEUVVGRExFTkJRVU03UVVGQlFTeFZRVUZETzBGQlEzWmFMRzFDUVVGVExFZEJRVWNzUjBGQlJTeEhRVUZGTEVkQlFVVTdRVUZCUXl4dFFrRkJUeXhIUVVGSExFTkJRVU1zUlVGQlJTeExRVUZMTEU5QlFVY3NXVUZCV1N4WlFVRlpMRWRCUVVVc1EwRkJReXhEUVVGRExFVkJRVVVzUzBGQlN5eFBRVUZITEVOQlFVTXNSVUZCUlN4TFFVRkxMRWRCUVVVc1QwRkJSenRCUVVGRExHZENRVUZGTERCRFFVRXdReXhEUVVGRExFVkJRVVU3UVVGQlJTeHBRa0ZCUnl4RFFVRkRPMEZCUVVFc1dVRkJReXhEUVVGRE8wRkJRVUVzVlVGQlF6dEJRVUZETEcxQ1FVRlRMRWRCUVVjc1IwRkJSU3hIUVVGRk8wRkJRVU1zWjBKQlFVa3NTVUZCUlR0QlFVRkZMRzFDUVVGTkxHTkJRVmtzVDBGQlR5eFpRVUZaTEhkQ1FVRnpRaXhIUVVGSExFTkJRVU1zUzBGQlJ5eEZRVUZGTEVOQlFVTXNTMEZCUnl4TFFVRkhMR05CUVZrc1QwRkJUeXhSUVVGTkxFZEJRVWNzUjBGQlJTeEhRVUZGTEVOQlFVTXNTVUZCUlN4TlFVRk5MRWRCUVVVc1JVRkJReXhoUVVGWkxHTkJRV0VzUTBGQlF5eEZRVUZGTEV0QlFVc3NUMEZCUnl4WlFVRlpMSEZDUVVGeFFpeEhRVUZGTEVOQlFVTXNSVUZCUlN4TFFVRkxMRWRCUVVVc1UwRkJVeXhIUVVGRk8wRkJRVU1zWjBKQlFVVXNhME5CUVd0RExFTkJRVU1zUlVGQlJUdEJRVUZGTEdkQ1FVRkZMREpEUVVFeVF6dEJRVUZGTEhGQ1FVRlBMRWRCUVVjc1IwRkJSU3hIUVVGRkxFTkJRVU03UVVGQlFTeFpRVUZETEVOQlFVTXNRMEZCUXp0QlFVRkJMRlZCUVVNN1FVRkROMlVzWTBGQlNTeEhRVUZGTEV0QlFVY3NSVUZCUXl4UlFVRlBMRU5CUVVNc1IwRkJSU3hIUVVGRkxFZEJRVVVzVFVGQlNUdEJRVUZETEdkQ1FVRkhMR1ZCUVdFc1QwRkJUeXhMUVVGSExFTkJRVU1zUlVGQlJUdEJRVUZITEhGQ1FVRlBPMEZCUVVVc1owSkJRVVVzUlVGQlJTeE5RVUZKTEVOQlFVTTdRVUZCUlN4alFVRkZMRmRCUVZjc1NVRkJTU3hOUVVGSkxFbEJRVVVzUlVGQlJTeFZRVUZWTEVOQlFVTTdRVUZCUnl4blFrRkJSU3hGUVVGRkxFZEJRVWNzU1VGQlNTeERRVUZETzBGQlFVVXNaMEpCUVVjc1EwRkJRenRCUVVGRkxIRkNRVUZQTzBGQlFVVXNiVUpCUVVzN1FVRkJSU3h0UWtGQlN6dEJRVUZGTEcxQ1FVRkxPMEZCUVVVc1owSkJRVWNzU1VGQlJTeEpRVUZGTEVWQlFVVTdRVUZCVnl4eFFrRkJUenRCUVVGRkxHZENRVUZITzBGQlFVTXNjVUpCUVU4c1JVRkJSU3hGUVVGRkxFbEJRVWtzUlVGQlJTeFRRVUZUTEVkQlFVVXNTVUZCUlN4RFFVRkRMRWRCUVVVc1RVRkJTU3hEUVVGRExFZEJRVVU3UVVGQlFTeFpRVUZETEZGQlFVMDdRVUZCUXl4eFFrRkJUenRCUVVGQkxGbEJRVU03UVVGQlFTeFZRVUZETEVWQlFVTTdRVUZCUlN4dFFrRkJVeXhGUVVGRkxFZEJRVVU3UVVGQlF5eHBRa0ZCU3l4UFFVRkxPMEZCUVdFc2FVSkJRVXNzVlVGQlVTeG5RMEZCWjBNc1EwRkJRenRCUVVGSkxHbENRVUZMTEZOQlFVODdRVUZCUVN4VlFVRkRPMEZCUXpOWExHTkJRVWtzUzBGQlJ5eFBRVUZITzBGQlFVTXNZMEZCUlN4VlFVRlZPMEZCUVVVc1kwRkJSU3haUVVGVkxFMUJRVWs3UVVGQlFTeFpRVUZETzBGQlFVRXNWVUZCUXl4SFFVRkZMRXRCUVVjc1QwRkJSenRCUVVGRExHbENRVUZITEVWQlFVVXNSMEZCUnl4WFFVRlRMRWRCUVVjc1IwRkJSU3hGUVVGRkxFZEJRVWNzUlVGQlJTeEhRVUZITEVOQlFVTXNRMEZCUXp0QlFVRkhMR2RDUVVGSkxFbEJRVVVzUlVGQlJTeEhRVUZITEVsQlFVazdRVUZCUlN4blFrRkJSeXhEUVVGRE8wRkJRVVVzY1VKQlFVODdRVUZCUlN4alFVRkZMRWRCUVVjc1MwRkJTeXhEUVVGRE8wRkJRVVVzWTBGQlJTeEhRVUZITEVWQlFVVXNSVUZCUlN4SlFVRkZPMEZCUVVVc1kwRkJSU3hMUVVGSExFVkJRVVU3UVVGQlJ5eG5Ra0ZCU1N4SlFVRkZMRVZCUVVNc1MwRkJTU3hQUVVGTkxHVkJRV01zUlVGQlJTeEpRVUZITEV0QlFVa3NSVUZCUlN4SlFVRkhMR0ZCUVZrc1JVRkJSU3hIUVVGRk8wRkJRVVVzYVVKQlFVY3NSVUZCUlN4TlFVRk5PMEZCUVVVc1kwRkJSU3haUVVGWkxFZEJRVVVzUlVGQlJTeEZRVUZGTzBGQlFVVXNiVUpCUVU4N1FVRkJRU3hWUVVGRExFZEJRVVVzU1VGQlJTeEhRVUZGTEV0QlFVY3NaVUZCWVN4UFFVRlBMR05CUVZrc1NVRkJTU3haUVVGWkxFMUJRVTBzU1VGQlJTeFJRVUZQTEV0QlFVY3NRMEZCUXl4SFFVRkZMRWRCUVVVc1RVRkJTVHRCUVVGRExHMUNRVUZMTzBGQlFVVXNaMEpCUVVrc1NVRkJSU3hKUVVGRk8wRkJRVVVzYVVKQlFVa3NTVUZCUlN4SFFVRkZMRVZCUVVVc1EwRkJReXhMUVVGSExFVkJRVVVzUzBGQlJ6dEJRVUZKTEdkQ1FVRkZPMEZCUVVVc1owSkJRVWNzUzBGQlJ5eEpRVUZGTEV0QlFVY3NSVUZCUlN4VlFVRlJPMEZCUVVjc2NVSkJRVThzUjBGQlJ5eFBRVUZQTEVWQlFVVXNhMEpCUVd0Q0xHOUNRVUZyUWl4RlFVRkZMRTFCUVUwc1IwRkJSU3hEUVVGRExFbEJRVVVzUlVGQlJTeFRRVUZUTEVkQlFVVXNRMEZCUXl4RFFVRkRPMEZCUTI1bUxHbENRVUZKTEVsQlFVVXNTVUZCUnl4SlFVRkZMRXRCUVVjN1FVRkJReXhyUWtGQlNTeEpRVUZGTEVWQlFVVXNSMEZCUnp0QlFVRkZMR3RDUVVGSExFbEJRVVVzUzBGQlNUdEJRVUZETEc5Q1FVRkpMRWxCUVVVc1JVRkJSU3hIUVVGSExFbEJRVVU3UVVGQlJ5eHZRa0ZCUnl4UlFVRk5MRWxCUVVVN1FVRkJTeXgxUWtGQlJ5eFBRVUZQTEdOQlFXTXNTVUZCUlN4UFFVRkxMRWxCUVVVc1EwRkJRenRCUVVGQkxIRkNRVUZOTzBGQlFVTXNjMEpCUVVrc1NVRkJSU3hGUVVGRkxFZEJRVWNzU1VGQlJUdEJRVUZITEhOQ1FVRkZMRkZCUVUwc1NVRkJSU3hSUVVGTkxFbEJRVVVzVDBGQlN5eExRVUZITEV0QlFVY3NTVUZCUlN4TFFVRkhMRWxCUVVVc1RVRkJTU3hMUVVGSExFdEJRVWNzUzBGQlJ5eExRVUZITEVsQlFVVXNSVUZCUlN4SFFVRkhMRWxCUVVVN1FVRkJSeXd3UWtGQlRTeEpRVUZGTEV0QlFVY3NUMEZCVHl4aFFVRmhMRU5CUVVNc1MwRkJSeXhMUVVGSExFOUJRVTBzUzBGQlJ5eFBRVUZQTEdGQlFXRXNVVUZCVFN4TFFVRkhMRWxCUVVjc1VVRkJUU3hKUVVGRkxFbEJRVWs3UVVGQlFTeG5Ra0ZCUlR0QlFVRkJMR05CUVVNN1FVRkJUU3h4UWtGQlJ5eFBRVUZQTEdGQlFXRXNRMEZCUXp0QlFVRkJMRmxCUVVNN1FVRkJReXh0UWtGQlR6dEJRVUZCTEZWQlFVTXNSMEZCUlN4SlFVRkZMRU5CUVVNc1IwRkJSU3hQUVVGTExFOUJRVXNzUzBGQlJ5eEhRVUZITEVWQlFVVXNSMEZCUlN4SFFVRkZMRU5CUVVNc1NVRkJSU3hKUVVGSExFdEJRVWNzVDBGQlJ6dEJRVUZETEdkQ1FVRkpMRWxCUVVVc1IwRkJSenRCUVVGRkxHZENRVUZGTEVWQlFVVTdRVUZCUlN4alFVRkZMRU5CUVVNN1FVRkJSU3h0UWtGQlR6dEJRVUZCTEZWQlFVTTdRVUZETjFrc2JVSkJRVk1zUlVGQlJTeEhRVUZGTEVkQlFVVTdRVUZCUXl4blFrRkJTU3hKUVVGRkxGVkJRVlVzVTBGQlR5eEhRVUZGTEVsQlFVVTdRVUZCVlN4dFFrRkJUeXhIUVVGSExFMUJRVWs3UVVGQlF5eDFRa0ZCVVN4SlFVRkZMRWRCUVVjc1NVRkJSU3hEUVVGRExFZEJRVVVzU1VGQlJTeE5RVUZKTEVkQlFVVXNTVUZCUlN4SFFVRkZMRWxCUVVVc1IwRkJSU3hMUVVGSk8wRkJRVU1zYjBKQlFVa3NTVUZCUlN4RlFVRkZMRWxCUVVVc1EwRkJRenRCUVVGRkxHMUNRVUZITEVWQlFVVXNTVUZCUlN4TlFVRkpMRU5CUVVNc1NVRkJSVHRCUVVGQkxHTkJRVU03UVVGQlF5eHhRa0ZCVHl4SFFVRkhMRWRCUVVVc1IwRkJSU3hIUVVGRkxFTkJRVU03UVVGQlFTeFpRVUZETEVOQlFVTTdRVUZCUVN4VlFVRkRPMEZCUVVNc2JVSkJRVk1zUjBGQlJ5eEhRVUZGTzBGQlFVTXNaMEpCUVVjN1FVRkJSU3h4UWtGQlR5eEZRVUZGTEVkQlFVVXNSMEZCUlN4RFFVRkRPMEZCUVVVc1owSkJRVVU3UVVGQlJTeG5Ra0ZCUlN4TlFVRkpMRVZCUVVVc1IwRkJSeXhIUVVGRkxFVkJRVVVzVTBGQlV5eERRVUZETEVkQlFVVXNTVUZCUlR0QlFVRkpMR05CUVVVc1IwRkJSU3hKUVVGSkxFVkJRVVVzUTBGQlF5eERRVUZETzBGQlFVRXNWVUZCUXp0QlFVRkRMR05CUVVrc1MwRkJSeXhQUVVGSE8wRkJRVU1zWjBKQlFVVTdRVUZCUlN4blFrRkJSenRCUVVGRkxHOUNRVUZOTEVkQlFVY3NRMEZCUXl4SFFVRkZPMEZCUVZNc1pVRkJSeXhEUVVGRE8wRkJRVUVzVlVGQlF6dEJRVUZGTEcxQ1FVRlRMRXRCUVVrN1FVRkJReXh4UWtGQlVTeEpRVUZGTEVWQlFVVXNXVUZCVnp0QlFVRkxMR2xDUVVGSE8wRkJRVVVzWlVGQlJ5eFJRVUZSTEUxQlFVazdRVUZCUXp0QlFVRkpMR2xDUVVGSExFMUJRVWtzUjBGQlJ5eERRVUZETzBGQlFVRXNXVUZCUXl4RFFVRkRPMEZCUVVFc1ZVRkJRenRCUVVGRExHMUNRVUZUTEV0QlFVazdRVUZCUXl4blFrRkJTU3hKUVVGRkxFZEJRVWNzTmtKQlFUWkNPMEZCUVVVc1owSkJRVVVzU1VGQlNTeFBRVUZQTEVOQlFVTTdRVUZCUlN4alFVRkZMRWRCUVVjc1MwRkJTeXhEUVVGRE8wRkJRVUVzVlVGQlF6dEJRVU40WXl4dFFrRkJVeXhIUVVGSExFZEJRVVU3UVVGQlF5eG5Ra0ZCUlN4RlFVRkZMRWxCUVVVc1VVRkJVU3hKUVVGSkxFVkJRVVVzUjBGQlJ5eEpRVUZKTEVWQlFVVXNSVUZCUlN4RFFVRkRMRVZCUVVVc1MwRkJTeXhEUVVGRE8wRkJRVUVzVlVGQlF6dEJRVU40UkN4alFVRkpMRWxCUVVVc1JVRkJReXhKUVVGSExFTkJRVU1zUjBGQlJTeEpRVUZITEVOQlFVTXNSMEZCUlN4SlFVRkhMRU5CUVVNc1IwRkJSU3hKUVVGSExFTkJRVU1zUjBGQlJTeExRVUZKTzBGQlFVTXNhVUpCUVVjc1JVRkJSU3gzUWtGQmMwSXNSVUZCUlN4SlFVRkhMRVZCUVVVc1owSkJRV01zUlVGQlJTeEpRVUZITEVWQlFVVXNaMEpCUVdNc1JVRkJSU3hOUVVGSkxFZEJRVWM3UVVGQlFTeFZRVUZETEVkQlFVVXNTVUZCUnl4UFFVRkhMRWxCUVVVc1IwRkJSU3hKUVVGSExFTkJRVU1zYTBKQlFXdENMRWRCUVVVc1NVRkJSeXhOUVVGSk8wRkJRVU1zY1VKQlFWRXNTMEZCU3l4RlFVRkZPMEZCUVVjc2FVSkJRVWNzUTBGQlF6dEJRVUZGTEdsQ1FVRkpMRXRCUVVzc1JVRkJSVHRCUVVGSExHbENRVUZITEVOQlFVTTdRVUZCUlN4alFVRkZMRXRCUVVjc1EwRkJRenRCUVVGRkxHTkJRVVVzUzBGQlJ5eERRVUZETzBGQlFVVXNZMEZCUlN4TFFVRkhMRU5CUVVNN1FVRkJRU3hWUVVGRExFZEJRVVVzU1VGQlJ5eFBRVUZITzBGQlFVTXNaMEpCUVVrc1NVRkJSU3hGUVVGRk8wRkJRVWNzYlVKQlFVOHNSVUZCUlN4SFFVRkhMRU5CUVVNN1FVRkJSU3hqUVVGRkxFZEJRVWNzUzBGQlN5eERRVUZETzBGQlFVVXNZMEZCUlN4SFFVRkhMRTlCUVU4c1JVRkJSU3hIUVVGSExGRkJRVkVzUTBGQlF5eEhRVUZGTEVOQlFVTTdRVUZCUlN4alFVRkZMRXRCUVVjN1FVRkJSU3hsUVVGSExFTkJRVU03UVVGQlFTeFZRVUZETEVkQlFVVXNTMEZCU1R0QlFVRkJMRlZCUVVNc1IwRkJSU3hMUVVGSk8wRkJRVU1zWTBGQlJTeEhRVUZITEZGQlFWRXNUMEZCUnl4RlFVRkZMRU5CUVVNN1FVRkJRU3hWUVVGRExFZEJRVVVzU1VGQlJ5eFBRVUZITEVsQlFVa3NVVUZCVVN4UFFVRkhPMEZCUVVNc1kwRkJSU3haUVVGVkxFOUJRVWM3UVVGQlF5eHJRa0ZCUlN4RlFVRkZPMEZCUVVzc2EwSkJRVWtzU1VGQlJTeEZRVUZGTzBGQlFVa3NhMEpCUVVjc1JVRkJSU3huUWtGQll5eEZRVUZGTEdkQ1FVRmpMRVZCUVVVc1IwRkJSVHRCUVVGRExHOUNRVUZKTEVsQlFVVXNSVUZCUlN4SFFVRkhMRVZCUVVVc1dVRkJXVHRCUVVGRkxHOUNRVUZGTEVWQlFVVXNXVUZCV1N4SFFVRkZMRVZCUVVVc1dVRkJXU3hKUVVNdlppeEZRVUZGTERCRFFVRXdReXhEUVVGRExIVkNRVUYxUWl4RlFVRkZMRmxCUVZrc2NVTkJRWEZETzBGQlFVRXNZMEZCUXl4WFFVRlRMRzFDUVVGcFFqdEJRVUZGTEd0Q1FVRkZPMEZCUVVFc2RVSkJRVlVzYTBKQlFXZENPMEZCUVVVc2JVSkJRVWNzUTBGQlF6dEJRVUZCTEhWQ1FVRlZMRzlDUVVGclFqdEJRVUZGTEd0Q1FVRkZMRWRCUVVjc1JVRkJSU3hIUVVGSExFVkJRVVVzVFVGQlRTeERRVUZETzBGQlFVRXNkVUpCUVZVc2FVSkJRV1U3UVVGQlJTeHZRa0ZCUlN4RlFVRkZMRkZCUVU4c1NVRkJSU3hGUVVGRkxFZEJRVWNzUTBGQlF5eEhRVUZGTEU5QlFVOHNSVUZCUlN4SFFVRkhMRU5CUVVNc1IwRkJSU3hIUVVGSExFTkJRVU1zUjBGQlJTeEhRVUZITEVOQlFVTXNSMEZCUlN4RlFVRkZMRWRCUVVjc1QwRkJUeXhGUVVGRkxFZEJRVWNzVVVGQlVTeERRVUZETEVkQlFVVXNRMEZCUXl4SFFVRkZMRVZCUVVVc1MwRkJSenRCUVVGQkxIVkNRVUZWTEcxQ1FVRnBRanRCUVVGRkxHdENRVUZGTEVkQlFVY3NSVUZCUlN4TlFVRk5MRVZCUVVVc1dVRkJXU3hGUVVGRExFdEJRVWtzVTBGQlVTeERRVUZETzBGQlFVRXNkVUpCUVZVc1lVRkJWenRCUVVGRkxHdENRVUZGTEZOQlFVOHNUVUZCUnl4TFFVRkhMRU5CUVVNc1JVRkJSU3hOUVVGSkxFVkJRVVVzVFVGQlRTeEhRVUZGTEVWQlFVVXNRMEZCUXp0QlFVRkJMSFZDUVVGVkxGbEJRVlU3UVVGQlJTeHpRa0ZCVFN4VlFVRlZMRVZCUVVVc1VVRkJVU3hMUVVGTExFVkJRVVVzU1VGQlNTeEZRVUZGTzBGQlFVRXNkVUpCUXpOblFpeHRRa0ZCYVVJc1JVRkJSVHRCUVVGUExHdENRVUZGTEZsQlFWa3NRMEZCUXp0QlFVRkJMSFZDUVVGVkxHdENRVUZuUWp0QlFVRkZMR3RDUVVGRkxFVkJRVVVzVDBGQlR5eEZRVUZGTEVkQlFVY3NSVUZCUlN4SlFVRkpPMEZCUVVFN1FVRkJUeXh4UWtGQlJ5eEZRVUZGTEd0RFFVRnJReXhEUVVGRExFVkJRVVU3UVVGQlFTeFpRVUZETzBGQlFVVXNZMEZCUlN4VlFVRlJMRTlCUVVjN1FVRkJReXhuUWtGQlJTeEhRVUZITEhWQ1FVRjFRaXhKUVVGSkxFVkJRVVVzVVVGQlVTeEpRVUZKTEVWQlFVVXNUVUZCVFN4TFFVRkxMRVZCUVVVc1QwRkJUeXhGUVVGRk8wRkJRVVVzYjBKQlFVMDdRVUZCUVN4WlFVRkZPMEZCUVVVc2EwSkJRVWtzUlVGQlJTeEhRVUZITEZkQlFWVXNUMEZCUnl4RlFVRkZMRlZCUVZVc1JVRkJReXhOUVVGTExFVkJRVU1zUTBGQlF5eERRVUZETEVkQlFVVXNSVUZCUlN4SFFVRkhMRk5CUVZFc1QwRkJSeXhGUVVGRkxGRkJRVkVzUTBGQlF5eERRVUZETzBGQlFVY3NaMEpCUVVrc1NVRkJSU3hEUVVGRExFZEJRVVVzU1VGQlJTeERRVUZETEZGQlFWRXNSMEZCUlR0QlFVRkZMR2xDUVVGSkxFdEJRVXM3UVVGQlJTeG5Ra0ZCUlN4bFFVRmxMRU5CUVVNc1MwRkJSeXhGUVVGRkxFdEJRVXNzUTBGQlF6dEJRVUZGTEdOQlFVVXNXVUZCV1N4RlFVRkRMRXRCUVVrc1VVRkJUeXhWUVVGVExFZEJRVVVzVjBGQlZTeEZRVUZGTEhWQ1FVRnhRaXhaUVVGWExGbEJRVmNzUjBGQlJTeFpRVUZYTEVkQlFVVXNRMEZCUXp0QlFVRkJMRlZCUVVNc1EwRkJReXhGUVVGRE8wRkJRM0JtTEZsQlFVVXNWVUZCVVR0QlFVRkZMR05CUVVrc1MwRkJSeXhQUVVGSE8wRkJRVU1zYlVKQlFVc3NTVUZCUlN4RlFVRkZPMEZCUVZFc1owSkJRVVVzVFVGQlRTeEZRVUZGTEVOQlFVTTdRVUZCUVN4VlFVRkRPMEZCUVVVc1dVRkJSU3h6UWtGQmIwSXNUVUZCU1R0QlFVRkRMR2RDUVVGSkxFbEJRVVVzUlVGQlJTeEhRVUZGTEVsQlFVVXNSVUZCUlN4RlFVRkZMRWxCUVVVc1QwRkJTeXhOUVVGSkxFTkJRVU03UVVGQlJTeG5Ra0ZCUlN4RlFVRkZMRVZCUVVVc1NVRkJSU3hQUVVGTExFMUJRVWtzUTBGQlF6dEJRVUZGTEdWQlFVY3NSMEZCUlN4SlFVRkZMRU5CUVVNN1FVRkJSU3hqUVVGRkxFTkJRVU03UVVGQlFTeFZRVUZETzBGQlFVVXNiVUpCUVZNc1IwRkJSeXhIUVVGRk8wRkJRVU1zWjBKQlFVYzdRVUZCUlN4eFFrRkJUeXhGUVVGRkxFZEJRVVVzUjBGQlJTeERRVUZETzBGQlFVVXNaVUZCUnl4RFFVRkRPMEZCUVVFc1ZVRkJRenRCUVVGRExHTkJRVWtzUzBGQlJ5eERRVUZETEVkQlFVVTdRVUZCUnl4WlFVRkZMRzFDUVVGcFFpeERRVUZETEVkQlFVVXNUVUZCU1R0QlFVRkRMR2RDUVVGSkxFbEJRVVVzUjBGQlJ5eERRVUZETzBGQlFVVXNhMEpCUVVrc1MwRkJSeXhIUVVGSExGZEJRVk1zUjBGQlJ5eFRRVUZQTEVsQlFVVXNTVUZCUnl4SFFVRkhMRU5CUVVNc1NVRkJSU3hKUVVGRkxFZEJRVWNzU1VGQlNTeERRVUZETzBGQlFVY3NaMEpCUVVVc1JVRkJSU3hEUVVGRE8wRkJRVVVzWjBKQlFVVXNTVUZCUlN4RlFVRkZMRWRCUVVjc1EwRkJReXhKUVVGRkxFZEJRVWNzUTBGQlF6dEJRVUZCTEZWQlFVTTdRVUZET1ZRc2JVSkJRVk1zUjBGQlJ5eEhRVUZGTzBGQlFVTXNhVUpCUVVzc1MwRkJSeXhKUVVGRk8wRkJRVWNzYVVKQlFVc3NTMEZCUnl4VFFVRlRMRWRCUVVVN1FVRkJReXhuUWtGQlJTeEZRVUZGTEV0QlFVc3NTMEZCUnl4TlFVRkpMRTFCUVVrc1EwRkJReXhKUVVGRk8wRkJRVUVzV1VGQlF6dEJRVUZGTEdsQ1FVRkxMRXRCUVVjc1UwRkJVeXhIUVVGRk8wRkJRVU1zWjBKQlFVVXNSVUZCUlN4TFFVRkxMRXRCUVVjc1RVRkJTU3hOUVVGSkxFTkJRVU1zU1VGQlJUdEJRVUZCTEZsQlFVTTdRVUZCUlN4cFFrRkJTeXhMUVVGSExGTkJRVk1zUjBGQlJTeEhRVUZGTzBGQlFVTXNiVUpCUVVzc1IwRkJSenRCUVVGRkxHMUNRVUZMTEVkQlFVY3NRMEZCUXp0QlFVRkZMRzFDUVVGTExFZEJRVWNzUTBGQlF6dEJRVUZCTEZsQlFVTTdRVUZCUlN4cFFrRkJTeXhMUVVGSExGZEJRVlU3UVVGQlF5eG5Ra0ZCUlN4RlFVRkZMRXRCUVVzc1MwRkJSeXhQUVVGTExFMUJRVWtzUTBGQlF5eEpRVUZGTzBGQlFVRXNXVUZCUXp0QlFVRkJMRlZCUVVNN1FVRkJReXhqUVVGSkxFdEJRVWNzUjBGQlJTeExRVUZITzBGQlFVVXNiVUpCUVZNc1IwRkJSeXhIUVVGRkxFZEJRVVVzUjBGQlJTeEhRVUZGTzBGQlFVTXNiVUpCUVU4c1NVRkJSU3hGUVVGRkxFZEJRVVVzUjBGQlJTeEhRVUZGTEVkQlFVVXNSMEZCUlN4RFFVRkRMRWxCUVVVc1IwRkJSeXhIUVVGRkxFZEJRVVVzUjBGQlJTeERRVUZETzBGQlFVRXNWVUZCUXp0QlFVTnVVeXh0UWtGQlV5eEhRVUZITEVkQlFVVXNSMEZCUlN4SFFVRkZMRWRCUVVVN1FVRkJReXh0UWtGQlN6dEJRVUZGTEcxQ1FVRkxPMEZCUVVVc2JVSkJRVXM3UVVGQlJTeHRRa0ZCU3p0QlFVRkZMR2RDUVVGSExHVkJRV0VzVDBGQlR6dEJRVUZyUWl4eFFrRkJUeXhGUVVGRkxIRkdRVUZ4Uml4SFFVRkZPMEZCUVVVc1owSkJRVWtzU1VGQlJTeERRVUZETzBGQlFVVXNaMEpCUVVjc1MwRkJSeXhOUVVGSkxFVkJRVVU3UVVGQlR5eHhRa0ZCVHl4SFFVRkhMRWRCUVVVc1IwRkJSU3hIUVVGRkxFTkJRVU03UVVGQlJTeG5Ra0ZCUlN4RlFVRkRMRWxCUVVjc1IwRkJSU3hKUVVGSExFZEJRVVVzU1VGQlJ5eEhRVUZGTEVsQlFVY3NSVUZCUXp0QlFVRkZMRzFDUVVGUExFdEJRVWNzUlVGQlJTeExRVUZITEdWQlFXTXNXVUZCV1N4SFFVRkZMRU5CUVVNc1IwRkJSU3hMUVVGSExFZEJRVWNzUTBGQlF6dEJRVUZCTEZWQlFVTTdRVUZCUXl4dFFrRkJVeXhIUVVGSExFZEJRVVVzUjBGQlJTeEhRVUZGTzBGQlFVTXNiVUpCUVU4c1NVRkJSU3hGUVVGRkxFZEJRVVVzUjBGQlJTeEhRVUZGTEVkQlFVVXNRMEZCUXl4SlFVRkZPMEZCUVVFc1ZVRkJRenRCUVVGRExHMUNRVUZUTEVkQlFVY3NSMEZCUlN4SFFVRkZPMEZCUVVNc1owSkJRVWM3UVVGQlJTeHhRa0ZCVHl4RlFVRkZMRWRCUVVVc1IwRkJSU3hIUVVGRkxFTkJRVU03UVVGQlFTeFZRVUZETzBGQlF6VlpMR05CUVVrc1MwRkJSeXhQUVVGSE8wRkJRVU1zY1VKQlFWRXNTVUZCUlN4SFFVRkZMRWxCUVVVc1IwRkJSU3hKUVVGRkxFVkJRVVVzVVVGQlR5eEZRVUZGTEVkQlFVVTdRVUZCUXl4clFrRkJTU3hKUVVGRkxFVkJRVVVzVjBGQlZ5eERRVUZETzBGQlFVVXNjVUpCUVVzc1NVRkJSU3hOUVVGSkxGRkJRVTBzU1VGQlJTeExRVUZITEVsQlFVVXNVMEZCVHl4TFFVRkhMRk5CUVU4c1MwRkJSeXhMUVVGSExFZEJRVVVzUlVGQlJTeExRVUZITEV0QlFVYzdRVUZCUVN4WlFVRkRPMEZCUVVNc2JVSkJRVTg3UVVGQlFTeFZRVUZETEVkQlFVVXNTMEZCUnl4RFFVRkRMRWRCUVVVc1IwRkJSU3hIUVVGRkxFMUJRVWs3UVVGQlF5eHRRa0ZCU3p0QlFVRkZMR2RDUVVGSExFVkJRVVVzU1VGQlJUdEJRVUZITEhGQ1FVRlBPMEZCUVVVc1owSkJRVWtzU1VGQlJUdEJRVUZGTEdkQ1FVRkZMRWxCUVVVc1NVRkJSVHRCUVVGRkxIRkNRVUZSTEVsQlFVVXNSMEZCUlN4SlFVRkZMRVZCUVVVc1VVRkJUeXhGUVVGRkxFZEJRVVU3UVVGQlF5eHJRa0ZCU1N4SlFVRkZMRVZCUVVVc1YwRkJWeXhEUVVGRE8wRkJRVVVzYTBKQlFVY3NVMEZCVHl4TFFVRkhMRk5CUVU4c1IwRkJSVHRCUVVGRExHOUNRVUZKTEVsQlFVVXNSVUZCUlN4WFFVRlhMRVZCUVVVc1EwRkJRenRCUVVGRkxHOUNRVUZGTEZWQlFWRXNTVUZCUlN4VFFVRlBMRTFCUVVrc1NVRkJSVHRCUVVGQkxHTkJRVWs3UVVGQlF5eHJRa0ZCUnl4UFFVRkxMRWRCUVVVN1FVRkJReXh2UWtGQlJ5eExRVUZITzBGQlFVVTdRVUZCVFN4clFrRkJSU3hSUVVGTkxFTkJRVU1zU1VGQlJUdEJRVUZCTEdOQlFVTXNUMEZCU3p0QlFVRkRMRzlDUVVGSExGRkJRVTBzUjBGQlJUdEJRVUZETEhOQ1FVRkhMRWxCUVVVc1MwRkJSenRCUVVGRk8wRkJRVTBzYjBKQlFVVXNVVUZCVFN4RFFVRkRMRWxCUVVVc1RVRkJTU3hMUVVGSE8wRkJRVUVzWjBKQlFVTXNUMEZCU3p0QlFVRkRMSE5DUVVGSExGTkJRVThzUjBGQlJUdEJRVUZETEhkQ1FVRkhMRWxCUVVVc1MwRkJSenRCUVVGRk8wRkJRVTBzYzBKQlFVVXNVVUZCVFN4RFFVRkRMRWxCUVVVc1RVRkJTU3hMUVVGSE8wRkJRVUVzYTBKQlFVVXNUMEZCU3p0QlFVRkRMSGRDUVVGSExFbEJRVVVzUzBGQlJ6dEJRVUZGTzBGQlFVMHNjMEpCUVVVc1VVRkJUU3hEUVVGRExFbEJRVVVzVFVGQlNTeExRVU53Wmp0QlFVRkhMSE5DUVVGRkxGRkJRVTBzUTBGQlF5eEpRVUZGTEUxQlFVa3NTMEZCUnl4TFFVRkhPMEZCUVVFc2EwSkJRVVU3UVVGQlF5eHZRa0ZCUlN4UlFVRk5MRU5CUVVNc1NVRkJSU3hOUVVGSkxFdEJRVWNzU1VGQlJUdEJRVUZCTEdkQ1FVRkZPMEZCUVVNc2EwSkJRVVVzVVVGQlRTeERRVUZETEVsQlFVVXNUVUZCU1N4SlFVRkZPMEZCUVVFc1kwRkJSVHRCUVVGQkxGbEJRVU03UVVGQlF5eGpRVUZGTEUxQlFVa3NRMEZCUXl4SlFVRkZPMEZCUVVVc2JVSkJRVThzU1VGQlJUdEJRVUZCTEZWQlFVTXNSMEZCUlN4TFFVRkhMRU5CUVVNc1IwRkJSU3hIUVVGRkxFMUJRVWtzUjBGQlJ5eEhRVUZGTEVWQlFVVXNSMEZCUlN4SFFVRkZMRU5CUVVNN1FVRkJSU3h0UWtGQlV5eEhRVUZITEVkQlFVVXNSMEZCUlR0QlFVRkRMR2RDUVVGSE8wRkJRVVVzY1VKQlFVOHNSVUZCUlN4SFFVRkZMRWRCUVVVc1IwRkJSU3hEUVVGRE8wRkJRVUVzVlVGQlF6dEJRVUZETEcxQ1FVRlRMRWRCUVVjc1IwRkJSU3hIUVVGRkxFZEJRVVU3UVVGQlF5eG5Ra0ZCUnp0QlFVRkZMSEZDUVVGUExFVkJRVVVzUjBGQlJTeEhRVUZGTEVkQlFVVXNSMEZCUlN4RFFVRkRPMEZCUVVFc1ZVRkJRenRCUVVGRExHMUNRVUZUTEVkQlFVY3NSMEZCUlN4SFFVRkZMRWRCUVVVN1FVRkJReXh0UWtGQlR5eEpRVUZGTEVWQlFVVXNSMEZCUlN4SFFVRkZMRWRCUVVVc1IwRkJSU3hEUVVGRExFbEJRVVU3UVVGQlFTeFZRVUZETzBGQlFVTXNiVUpCUVZNc1IwRkJSeXhIUVVGRkxFZEJRVVU3UVVGQlF5eG5Ra0ZCUnp0QlFVRkZMSEZDUVVGUExFVkJRVVVzUjBGQlJTeEhRVUZGTEVkQlFVVXNRMEZCUXp0QlFVRkJMRlZCUVVNN1FVRkJReXh0UWtGQlV5eEhRVUZITEVkQlFVVXNSMEZCUlN4SFFVRkZPMEZCUVVNc1owSkJRVWM3UVVGQlJTeHhRa0ZCVHl4RlFVRkZMRWRCUVVVc1IwRkJSU3hIUVVGRkxFZEJRVVVzUTBGQlF6dEJRVUZCTEZWQlFVTTdRVUZCUXl4dFFrRkJVeXhIUVVGSExFZEJRVVVzUjBGQlJTeEhRVUZGTEVkQlFVVTdRVUZCUXl4blFrRkJSenRCUVVGRkxIRkNRVUZQTEVWQlFVVXNTVUZCUnl4SFFVRkZMRWRCUVVVc1IwRkJSU3hIUVVGRkxFTkJRVU03UVVGQlFTeFZRVUZETzBGQlFVTXNiVUpCUVZNc1IwRkJSeXhIUVVGRkxFZEJRVVVzUjBGQlJTeEhRVUZGTzBGQlFVTXNaMEpCUVVjN1FVRkJSU3h4UWtGQlR5eEZRVUZGTEVsQlFVY3NSMEZCUlN4SFFVRkZMRWRCUVVVc1IwRkJSU3hEUVVGRE8wRkJRVUVzVlVGQlF6dEJRVUZETEcxQ1FVRlRMRWRCUVVjc1IwRkJSU3hIUVVGRkxFZEJRVVVzUjBGQlJUdEJRVUZETEdkQ1FVRkhPMEZCUVVVc2NVSkJRVThzUlVGQlJTeEpRVUZITEVkQlFVVXNSMEZCUlN4SFFVRkZMRWRCUVVVc1EwRkJRenRCUVVGQkxGVkJRVU03UVVGRE4yUXNiVUpCUVZNc1IwRkJSeXhIUVVGRk8wRkJRVU1zWjBKQlFVYzdRVUZCUlN4eFFrRkJUeXhGUVVGRkxFbEJRVWNzUjBGQlJTeERRVUZETzBGQlFVRXNWVUZCUXp0QlFVRkRMRzFDUVVGVExFZEJRVWNzUjBGQlJTeEhRVUZGTzBGQlFVTXNaMEpCUVVjN1FVRkJSU3h4UWtGQlR5eEZRVUZGTEVsQlFVY3NSMEZCUlN4SFFVRkZMRU5CUVVNN1FVRkJRU3hWUVVGRE8wRkJRVU1zYlVKQlFWTXNSMEZCUnl4SFFVRkZMRWRCUVVVc1IwRkJSVHRCUVVGRExHZENRVUZITzBGQlFVVXNjVUpCUVU4c1JVRkJSU3hKUVVGSExFZEJRVVVzUjBGQlJTeEhRVUZGTEVOQlFVTTdRVUZCUVN4VlFVRkRPMEZCUVVNc2JVSkJRVk1zUjBGQlJ5eEhRVUZGTzBGQlFVTXNiVUpCUVVzN1FVRkJSU3d5UWtGQllTeFBRVUZQTEZGQlFWRXNUMEZCU3l4UlFVRlJMRWRCUVVjc1JVRkJSU3hIUVVGRkxFMUJRVWtzUjBGQlJTeERRVUZETEVWQlFVVXNUVUZCVFN4TFFVRkxMRU5CUVVNc1IwRkJSU3hMUVVGSExFdEJRVWtzVVVGQlVTeE5RVUZOTEVWQlFVVXNSMEZCUlN4TlFVRkpMRWRCUVVVc1EwRkJRenRCUVVGQkxGVkJRVVU3UVVGQlF5eFpRVUZGTEc5RFFVRnJRenRCUVVGSExHTkJRVWtzU1VGQlJTeE5RVUZKTzBGQlFVTXNaMEpCUVVrc1NVRkJSU3hGUVVGRk8wRkJRVVVzWjBKQlFVY3NUVUZCU1N4SFFVRkhMRU5CUVVNc1IwRkJSU3hKUVVGRkxFbEJRVWNzUTBGQlF6dEJRVUZITEd0Q1FVRkhPMEZCUVVNc2IwSkJRVWNzUlVGQlJTeEhRVUZGTEVWQlFVVXNTVUZCUlR0QlFVRkhMSE5DUVVGSE8wRkJRVU1zZDBKQlFVVXNSMEZCUnl4RFFVRkRMRWxCUVVVc1IwRkJSeXhEUVVGRE8wRkJRVUVzYTBKQlFVTXNVMEZCVHl4SFFVRkZPMEZCUVVNc2FVTkJRV0VzUzBGQlJ5eFpRVUZWTEV0QlFVY3NSVUZCUlN4SFFVRkZMRU5CUVVNN1FVRkJRU3hyUWtGQlF6dEJRVUZCTEdOQlFVTXNVMEZCVHl4SFFVRkZPMEZCUVVNc05rSkJRV0VzUzBGQlJ5eFpRVUZWTEV0QlFVY3NSVUZCUlN4SFFVRkZMRU5CUVVNN1FVRkJRU3hqUVVGRE8wRkJRVUVzVlVGQlF6dEJRVUZGTEZsQlFVVXNaVUZCWVR0QlFVTTNaQ3hqUVVGSkxFdEJRVWNzUTBGQlF5eEhRVUZGTEVsQlFVVXNUMEZCUnl4TlFVRkpMRWxCUVVVc1RVRkJTU3hOUVVGSkxFbEJRVVVzVDBGQlN5eE5RVUZKTEVsQlFVVXNUVUZCU3l4TFFVRkhMRU5CUVVNc1IwRkJSU3hKUVVGSExFbEJRVWNzU1VGQlJ5eExRVUZKTEV0QlFVa3NTMEZCU1N4TFFVRkpMRXRCUVVrc1MwRkJTU3hMUVVGSkxFZEJRVWNzUjBGQlJTeExRVUZITEVOQlFVTXNSMEZCUlN4SlFVRkhMRWxCUVVjc1NVRkJSeXhMUVVGSkxFdEJRVWtzUzBGQlNTeExRVUZKTEV0QlFVa3NTMEZCU1N4TFFVRkpMRWRCUVVjN1FVRkJSU3h0UWtGQlV5eEhRVUZITEVkQlFVVXNSMEZCUlN4SFFVRkZMRWRCUVVVc1IwRkJSU3hIUVVGRkxFZEJRVVVzUjBGQlJUdEJRVUZETEcxQ1FVRlBMRWxCUVVVc1JVRkJSU3hKUVVGSExFZEJRVVVzUjBGQlJTeEhRVUZGTEVkQlFVVXNSMEZCUlN4SFFVRkZMRWRCUVVVc1IwRkJSU3hEUVVGRExFbEJRVVU3UVVGQlFTeFZRVUZITzBGQlFVTXNiVUpCUVZNc1IwRkJSeXhIUVVGRkxFZEJRVVVzUjBGQlJTeEhRVUZGTEVkQlFVVXNSMEZCUlN4SFFVRkZPMEZCUVVNc1owSkJRVWM3UVVGQlJTeHhRa0ZCVHl4RlFVRkZMRWxCUVVjc1IwRkJSU3hIUVVGRkxFZEJRVVVzUjBGQlJTeEhRVUZGTEVkQlFVVXNSMEZCUlN4RFFVRkRPMEZCUVVFc1ZVRkJRenRCUVVNM1VTeGpRVUZKTEV0QlFVY3NUMEZCUnp0QlFVRkRMR2RDUVVGSkxFbEJRVVVzUjBGQlJ5eERRVUZETEVsQlFVVXNSMEZCUlN4SlFVRkZMRWRCUVVjc1EwRkJRenRCUVVGRkxHbENRVUZITEVkQlFVY3NSMEZCUlN4SFFVRkZMRU5CUVVNN1FVRkJSU3h0UWtGQlR6dEJRVUZCTEZWQlFVTXNSMEZCUlN4TFFVRkhMRU5CUVVNc1IwRkJSU3hMUVVGSExFTkJRVU1zUjBGQlJTeExRVUZITEUxQlFVazdRVUZCUXl4blFrRkJSeXhEUVVGRExFbEJRVWM3UVVGQlF5eHJRa0ZCU1N4SlFVRkZMRVZCUVVNc1RVRkJTeXhaUVVGWExGTkJRVkVzV1VGQlZ5eE5RVUZMTEV0QlFVa3NTMEZCU1N4TFFVRkpMRTFCUVVzc2EwSkJRV2xDTEU5QlFVMHNXVUZCVlN4UFFVRlBMR0ZCUVZjc1ZVRkJWU3hoUVVGWExGVkJRVlVzVlVGQlZTeERRVUZETEV0QlFVY3NTMEZCU3l4UlFVRlJMRXRCUVVrc1IwRkJSeXhKUVVGRkxGVkJRVk1zUjBGQlJTeE5RVUZKTEdsQ1FVRm5RaXhIUVVGRk8wRkJRVVVzYlVKQlFVa3NTMEZCU3p0QlFVRkhMREpDUVVGVExFZEJRVWNzUTBGQlF5eEpRVUZGTEU5QlFVOHNSVUZCUlN4RFFVRkRMRWxCUVVVc1JVRkJSU3hEUVVGRExFbEJRVVVzUjBGQlJ5eERRVUZETzBGQlFVVXNhMEpCUVVrc1NVRkJSU3hEUVVGRE8wRkJRVVVzYlVKQlFVa3NTMEZCU3p0QlFVRkZMR3RDUVVGRkxFdEJRVXNzUjBGQlJ5eERRVUZETEVsQlFVa3NSVUZCUlN4RFFVRkRMRU5CUVVNc1JVRkJSVHRCUVVGRkxHMUNRVUZITzBGQlFVRXNXVUZCUXp0QlFVRkRMRzFDUVVGUE8wRkJRVUVzVlVGQlJTeEhRVUZGTzBGQlF6RmFMRzFDUVVGVExFZEJRVWNzUjBGQlJTeEhRVUZGTzBGQlFVTXNaMEpCUVVjN1FVRkJSU3h4UWtGQlR5eEZRVUZGTEVsQlFVY3NSMEZCUlN4SFFVRkZMRU5CUVVNN1FVRkJSU3h0UWtGQlN6dEJRVUZGTEcxQ1FVRkxPMEZCUVVVc1owSkJRVWtzU1VGQlJUdEJRVUZGTEdWQlFVY3NSVUZCUlN4UlFVRlJMRU5CUVVNc1IwRkJSU3hOUVVGSk8wRkJRVU1zYTBKQlFVa3NTVUZCUlN4SlFVRkZPMEZCUVVVc2EwSkJRVVVzUlVGQlJTeEZRVUZGTEVsQlFVVXNTVUZCUlN4TlFVRkpMRTFCUVVrc1EwRkJReXhKUVVGRk8wRkJRVVVzYlVKQlFVa3NTVUZCUlN4SFFVRkZMRWxCUVVVc1JVRkJSU3hSUVVGUExFVkJRVVU3UVVGQlJTeHRRa0ZCUnl4RlFVRkZMRkZCUVUwc1RVRkJTU3hEUVVGRExFbEJRVVVzUlVGQlJTeFhRVUZYTEVOQlFVTTdRVUZCUlN4cFFrRkJSeXhGUVVGRkxFMUJRVWtzVFVGQlNTeERRVUZETEVsQlFVVTdRVUZCUlN4dFFrRkJSeXhGUVVGRkxGTkJRVTg3UVVGQlFTeFpRVUZETEVOQlFVTTdRVUZCUlN4dFFrRkJUenRCUVVGQkxGVkJRVU03UVVGQlF5eHRRa0ZCVXl4SFFVRkhMRWRCUVVVc1IwRkJSVHRCUVVGRExHZENRVUZITzBGQlFVVXNjVUpCUVU4c1JVRkJSU3hKUVVGSExFZEJRVVVzUjBGQlJTeERRVUZETzBGQlFVVXNiVUpCUVVzN1FVRkJSU3h0UWtGQlN6dEJRVUZGTEdkQ1FVRkpMRWxCUVVVc1IwRkJSenRCUVVGRkxHTkJRVVVzUlVGQlJTeE5RVUZKTEUxQlFVa3NRMEZCUXl4SlFVRkZMRVZCUVVVN1FVRkJUeXhuUWtGQlNTeEpRVUZGTzBGQlFVVXNZMEZCUlN4UlFVRlJMRTlCUVVjc1MwRkJSeXhGUVVGRkxGTkJRVThzUTBGQlF6dEJRVUZGTEdOQlFVVXNSVUZCUlN4TlFVRkpMRTFCUVVrc1EwRkJReXhKUVVGRk8wRkJRVVVzYlVKQlFVODdRVUZCUVN4VlFVRkRPMEZCUVVNc2JVSkJRVk1zUjBGQlJ5eEhRVUZGTzBGQlFVTXNiVUpCUVU4c1NVRkJSU3hGUVVGRkxFbEJRVWNzUjBGQlJTeERRVUZETEVsQlFVVTdRVUZCUVN4VlFVRkZPMEZCUVVNc2JVSkJRVk1zUjBGQlJ5eEhRVUZGTEVkQlFVVXNSMEZCUlN4SFFVRkZPMEZCUVVNc2JVSkJRVThzU1VGQlJTeEZRVUZGTEVsQlFVY3NSMEZCUlN4SFFVRkZMRWRCUVVVc1IwRkJSU3hEUVVGRExFbEJRVVU3UVVGQlFTeFZRVUZGTzBGQlEzUmpMRzFDUVVGVExFZEJRVWNzUjBGQlJTeEhRVUZGTEVkQlFVVXNSMEZCUlN4SFFVRkZPMEZCUVVNc2JVSkJRVThzU1VGQlJTeEZRVUZGTEVsQlFVY3NSMEZCUlN4SFFVRkZMRWRCUVVVc1IwRkJSU3hIUVVGRkxFTkJRVU1zU1VGQlJUdEJRVUZCTEZWQlFVVTdRVUZCUXl4alFVRkpMRXRCUVVjc1EwRkJReXhOUVVGTExFTkJRVU1zUjBGQlJTeERRVUZETEVOQlFVTTdRVUZCUlN4dFFrRkJVeXhIUVVGSExFZEJRVVVzUjBGQlJTeEhRVUZGTEVkQlFVVTdRVUZCUXl4blFrRkJSenRCUVVGRkxIRkNRVUZQTEVWQlFVVXNTVUZCUnl4SFFVRkZMRWRCUVVVc1IwRkJSU3hIUVVGRkxFTkJRVU03UVVGQlJTeHRRa0ZCU3p0QlFVRkZMRzFDUVVGTE8wRkJRVVVzYlVKQlFVczdRVUZCUlN4eFFrRkJVU3hKUVVGRkxFZEJRVVVzU1VGQlJTeEhRVUZGTEVsQlFVVXNSMEZCUlN4TFFVRkpPMEZCUVVNc2EwSkJRVWtzU1VGQlJTeEZRVUZGTEVWQlFVVXNUVUZCU1N4TlFVRkpMRU5CUVVNc1IwRkJSU3hKUVVGRkxFVkJRVVVzUlVGQlJTeEpRVUZGTEUxQlFVa3NUVUZCU1N4RFFVRkRPMEZCUVVVc2JVSkJRVWM3UVVGQlJTeDFRa0ZCVVN4SlFVRkZMRWRCUVVVc1NVRkJSU3hIUVVGRkxFdEJRVWs3UVVGQlF5eHZRa0ZCU1N4SlFVRkZMRVZCUVVVc1JVRkJSU3hKUVVGRkxFMUJRVWtzUTBGQlF5eEhRVUZGTEVsQlFVVXNSMEZCUnl4RFFVRkRPMEZCUVVVc2MwSkJRVWtzUzBGQlJ5eFBRVUZMTEUxQlFVa3NUVUZCU1N4SlFVRkZMRXRCUVVjc1IwRkJSeXhIUVVGSExFZEJRVVVzUTBGQlF5eERRVUZETEVkQlFVVXNSVUZCUlN4VFFVRlBMRXRCUVVjc1JVRkJSU3hMUVVGTExFTkJRVU03UVVGQlFTeGpRVUZETzBGQlFVTXNiVUpCUVVjN1FVRkJRU3haUVVGRE8wRkJRVU1zWTBGQlJTeEZRVUZGTEUxQlFVa3NUVUZCU1N4RFFVRkRMRWxCUVVVN1FVRkJSU3h0UWtGQlR6dEJRVUZCTEZWQlFVTTdRVUZCUXl4alFVRkpMRXRCUVVjc1EwRkJReXhKUVVGSExFbEJRVWNzU1VGQlJ5eEpRVUZITEVsQlFVY3NTVUZCUnl4SlFVRkhMRWxCUVVjc1NVRkJSeXhKUVVGSExFbEJRVWNzUlVGQlJTeEhRVUZGTEV0QlFVY3NRMEZCUXl4SlFVRkhMRWxCUVVjc1NVRkJSeXhKUVVGSExFbEJRVWNzU1VGQlJ5eEpRVUZITEVsQlFVY3NTVUZCUnl4SlFVRkhMRWxCUVVjc1JVRkJSVHRCUVVOdVlpeHRRa0ZCVXl4SFFVRkhMRWRCUVVVN1FVRkJReXhuUWtGQlNTeEpRVUZGTEUxQlFVMHNSMEZCUnl4RFFVRkRMRWxCUVVVc1EwRkJRenRCUVVGRkxHVkJRVWNzUjBGQlJTeEhRVUZGTEVkQlFVVXNSVUZCUlN4TlFVRk5PMEZCUVVVc2JVSkJRVTg3UVVGQlFTeFZRVUZETzBGQlFVTXNZMEZCU1N4TFFVRkhMRU5CUVVNc1IwRkJSU3hOUVVGSk8wRkJRVU1zWlVGQlJ5eEZRVUZGTEVsQlFVa3NSMEZCUlN4TlFVRkpMRU5CUVVNN1FVRkJRU3hWUVVGRE8wRkJRMmhITEcxQ1FVRlRMRWRCUVVjc1IwRkJSU3hIUVVGRkxFZEJRVVVzUjBGQlJUdEJRVUZETEhGQ1FVRlRMRVZCUVVVc1IwRkJSU3hIUVVGRkxFZEJRVVU3UVVGQlF5eHRRa0ZCU1N4SlFVRkZMRmxCUVZVc1QwRkJUeXhKUVVGRkxFVkJRVVVzVTBGQlV5eEpRVUZGTEV0QlFVY3NTVUZCUnl4RlFVRkZMRk5CUVU4N1FVRkJSeXh2UWtGQlJTeEZRVUZGTEVOQlFVTXNTVUZCUlR0QlFVRkZMSEZDUVVGUE8wRkJRVUVzV1VGQlF6dEJRVUZETEhGQ1FVRlRMRVZCUVVVc1IwRkJSU3hIUVVGRk8wRkJRVU1zY1VKQlFVOHNSVUZCUlN4SFFVRkZMRWRCUVVVc1IwRkJSenRCUVVGQkxGbEJRVU03UVVGQlF5eHhRa0ZCVXl4RlFVRkZMRWRCUVVVc1IwRkJSVHRCUVVGRExIVkNRVUZUTEVWQlFVVXNTVUZCUnp0QlFVRkRMSFZDUVVGUExFbEJRVVVzUzBGQlJ5eExRVUZITEVsQlFVVXNTMEZCUnl4SlFVRkZPMEZCUVVFc1kwRkJRenRCUVVGRExHdENRVUZKTzBGQlFVVXNjVUpCUVVzc1NVRkJSU3hGUVVGRkxFVkJRVVVzV1VGQldTeEpRVUZGTEVWQlFVVXNXVUZCV1N4RFFVRkRMRTFCUVVrc1QwRkJTeXhKUVVGRkxFVkJRVVVzUlVGQlJTeFRRVUZUTEVsQlFVVXNSVUZCUlN4VFFVRlRMRU5CUVVNc1QwRkJTeXhKUVVGRkxFVkJRVVVzUlVGQlJTeFJRVUZSTEVsQlFVVXNSVUZCUlN4UlFVRlJMRU5CUVVNN1FVRkJSeXh4UWtGQlR6dEJRVUZCTEZsQlFVTTdRVUZCUXl4eFFrRkJVeXhGUVVGRkxFZEJRVVU3UVVGQlF5eHpRa0ZCVHl4RlFVRkZMRTlCUVU4c1IwRkJSVHRCUVVGQkxHZENRVUZETEV0QlFVczdRVUZCUlN4NVFrRkJUeXhKUVVGSkxFdEJRVXNzUlVGQlJTeFpRVUZaTEVsQlFVVXNSMEZCUlN4SlFVRkhMRVZCUVVVN1FVRkJRU3huUWtGQlJTeExRVUZMTzBGQlFVVXNlVUpCUVU4N1FVRkJRU3huUWtGQlJTeExRVUZMTzBGQlFVVXNlVUpCUVU4c1NVRkJTU3hMUVVGTExFVkJRVVVzV1VGQldTeEhRVUZGTEVkQlFVVXNRMEZCUXp0QlFVRkJMR2RDUVVGRkxFdEJRVXM3UVVGQlJTeDVRa0ZCVHl4SlFVRkpPMEZCUVVFc2IwSkJRVXNzUlVGQlJTeFpRVUZaTzBGQlFVRXNiMEpCUXpWbU8wRkJRVUVzYjBKQlFVVTdRVUZCUVN4clFrRkJRenRCUVVGQkxHZENRVUZGTEV0QlFVczdRVUZCUlN4NVFrRkJUeXhKUVVGSkxFdEJRVXNzUlVGQlJTeFpRVUZaTEVkQlFVVXNSMEZCUlN4RFFVRkRPMEZCUVVFc1owSkJRVVVzUzBGQlN6dEJRVUZGTEhsQ1FVRlBMRWxCUVVrc1MwRkJTeXhGUVVGRkxGbEJRVmtzU1VGQlJTeEhRVUZGTEVsQlFVY3NSVUZCUlR0QlFVRkJMR2RDUVVGRkxFdEJRVXM3UVVGQlJTeDVRa0ZCVHl4SlFVRkpMRXRCUVVzc1JVRkJSU3haUVVGWkxFbEJRVVVzUjBGQlJTeEpRVUZITEVWQlFVVTdRVUZCUVN4alFVRkRPMEZCUVVFc1dVRkJRenRCUVVGRExIRkNRVUZUTEVWQlFVVXNSMEZCUlR0QlFVRkRMR3RDUVVGSkxFbEJRVVVzUlVGQlJUdEJRVUZITEcxQ1FVRkpMRWxCUVVVc1NVRkJTU3hMUVVGTkxFbEJRVWtzUzBGQlN5eEZRVUZGTEV0QlFVY3NUVUZCU3l4SFFVRkZMRU5CUVVNc1JVRkJSeXhSUVVGUkxFTkJRVU1zUjBGQlJTeEpRVUZGTEV0QlFVYzdRVUZCUXl4dlFrRkJTU3hKUVVGRkxFVkJRVVVzVTBGQlV5eEhRVUZGTEV0QlFVY3NSVUZCUlN4RlFVRkZMRmxCUVZrc1EwRkJReXhKUVVGRkxFdEJRVWNzU1VGQlNTeERRVUZETzBGQlFVVXNiMEpCUVVjc1NVRkJSU3hKUVVGRkxFVkJRVVVzVVVGQlVUdEJRVUZGTEhWQ1FVRkhMRWxCUVVVc1JVRkJSU3hSUVVGUkxFbEJRVVVzUjBGQlJTeEZRVUZGTEZGQlFWRXNRMEZCUXl4SFFVRkZMRXRCUVVjc1NVRkJSU3hGUVVGRkxGTkJRVk1zU1VGQlJTeERRVUZETEV0QlFVY3NSVUZCUlN4VFFVRlRMRU5CUVVNc1IwRkJSU3hGUVVGRkxGbEJRVmtzUlVGQlJTeFpRVUZaTEVsQlFVVXNRMEZCUXp0QlFVRkJMSEZDUVVGUE8wRkJRVU1zYjBKQlFVVXNVVUZCVVN4RlFVRkZMRkZCUVZFc1NVRkJSU3hEUVVGRE8wRkJRVVU3UVVGQlFTeG5Ra0ZCU3p0QlFVRkJMR05CUVVNN1FVRkJReXhyUWtGQlJTeEpRVUZKTEV0QlFVc3NSVUZCUlN4WlFVRlpMRWxCUVVVc1IwRkJSU3hIUVVGRkxFTkJRVU03UVVGQlJTeHJRa0ZCUlN4RlFVRkZMRWxCUVVrN1FVRkJRU3huUWtGQlN5eEZRVUZGTEZsQlFWazdRVUZCUVN4blFrRkRibVk3UVVGQlFTeG5Ra0ZCUlR0QlFVRkJMR05CUVVNc1EwRkJRenRCUVVGRkxHdENRVUZGTEVWQlFVVXNRMEZCUXp0QlFVRkZMSEZDUVVGUExFdEJRVWNzUlVGQlJTeEhRVUZGTEVOQlFVTXNTVUZCUlN4TFFVRkhMRVZCUVVVc1IwRkJSU3hEUVVGRExFbEJRVVVzUlVGQlJTeFpRVUZaTEVsQlFVVXNTVUZCUlN4RlFVRkZMRmxCUVZrc1NVRkJSU3hGUVVGRkxGbEJRVmtzU1VGQlJUdEJRVUZCTEZsQlFVTTdRVUZCUXl4dFFrRkJTenRCUVVGRkxHMUNRVUZMTzBGQlFVVXNiVUpCUVVzN1FVRkJSU3h0UWtGQlN6dEJRVUZGTEdkQ1FVRkpMRWxCUVVVc1JVRkJSU3hGUVVGRkxFbEJRVVVzVDBGQlN5eE5RVUZKTEVOQlFVTTdRVUZCUlN4blFrRkJSU3hGUVVGRExFbEJRVWNzUlVGQlJTeEZRVUZGTEUxQlFVa3NUVUZCU1N4RFFVRkRMRWRCUVVVc1NVRkJSeXhGUVVGRkxFVkJRVVVzU1VGQlJTeE5RVUZKTEUxQlFVa3NRMEZCUXl4SFFVRkZMRWxCUVVjc1JVRkJSU3hGUVVGRkxFbEJRVVVzVFVGQlNTeE5RVUZKTEVOQlFVTXNSMEZCUlN4SlFVRkhMRVZCUVVVc1JVRkJSU3hKUVVGRkxFOUJRVXNzVFVGQlNTeERRVUZETEVkQlFVVXNTVUZCUnl4RlFVRkZMRVZCUVVVc1NVRkJSU3hQUVVGTExFMUJRVWtzUTBGQlF5eEhRVUZGTEVsQlFVY3NSVUZCUlN4RlFVRkZMRWxCUVVVc1QwRkJTeXhOUVVGSkxFTkJRVU1zUjBGQlJTeEpRVUZITEVWQlFVVXNSVUZCUlN4SlFVRkZMRTlCUVVzc1RVRkJTU3hEUVVGRExFZEJRVVVzU1VGQlJ5eEZRVUZGTEVWQlFVVXNTVUZCUlN4UFFVRkxMRTFCUVVrc1EwRkJReXhIUVVGRkxFbEJRVWNzUlVGQlJTeEZRVUZGTEVsQlFVVXNUMEZCU3l4TlFVRkpMRU5CUVVNc1IwRkJSU3hKUVVGSExFVkJRVVVzUlVGQlJTeEpRVUZGTEU5QlFVc3NUVUZCU1N4RFFVRkRMRWRCUVVVc1NVRkJSeXhKUVVGRkxFVkJRVVVzUTBGQlF5eEpRVUZGTEVkQlFVVTdRVUZCUlN4blFrRkJSU3hGUVVGRkxFTkJRVU03UVVGQlJTeG5Ra0ZCUlR0QlFVRkJMR05CUVVNc1RVRkJTenRCUVVGQkxHTkJRWFZDTEUxQlFVczdRVUZCUVN4alFVRlhMRTFCUVVzN1FVRkJRU3hqUVVGWExFMUJRVXM3UVVGQlFTeGpRVUZMTEUxQlFVczdRVUZCUVN4alFVRmpMRTFCUVVzN1FVRkJRU3hqUVVGUkxFMUJRVXM3UVVGQlFTeGpRVUZYTEUxQlFVczdRVUZCUVN4alFVTnVaaXhOUVVGTE8wRkJRVUVzWTBGQlZ5eFBRVUZOTzBGQlFVRXNZMEZCU3l4UFFVRk5PMEZCUVVFc1kwRkJTeXhQUVVGTk8wRkJRVUVzWTBGQlZ5eFBRVUZOTzBGQlFVRXNZMEZCVnl4UFFVRk5PMEZCUVVFc1kwRkJTeXhQUVVGTk8wRkJRVUVzWTBGQlN5eFBRVUZOTzBGQlFVRXNZMEZCU3l4UFFVRk5PMEZCUVVFc1kwRkJTeXhQUVVGTk8wRkJRVUVzWTBGQlN5eFBRVUZOTzBGQlFVRXNZMEZCU3l4UFFVRk5PMEZCUVVFc1kwRkJTeXhQUVVGTk8wRkJRVUVzWTBGQlN5eFBRVUZOTzBGQlFVRXNZMEZCU3l4UFFVRk5PMEZCUVVFc1kwRkJTeXhQUVVGTk8wRkJRVUVzWTBGQlN5eFBRVUZOTzBGQlFVRXNZMEZCU3l4UFFVRk5PMEZCUVVFc1kwRkJTeXhQUVVGTk8wRkJRVUVzWTBGQlN5eFBRVUZOTzBGQlFVRXNXVUZCU1R0QlFVRkZMSEZDUVVGUkxFdEJRVXM3UVVGQlJTeHJRa0ZCUlN4RlFVRkZMRkZCUVZFc1NVRkJTU3hQUVVGUExFZEJRVVVzUjBGQlJ5eEhRVUZGTEVWQlFVVXNRMEZCUXl4RFFVRkRPMEZCUVVVc1owSkJRVWtzUzBGQlJ5d3lSRUZCTWtRc1RVRkJUU3hIUVVGSExFZEJRVVVzUzBGQlJ5eDNSa0ZCZDBZc1RVRkJUU3hIUVVGSE8wRkJRVVVzWjBKQlFVVTdRVUZCUVN4alFVRkRMRTFCUVVzc1QwRkJSeXhIUVVGSExFVkJRVVVzUlVGQlJTeEZRVUZGTEZWQlFWVXNSMEZCUlN4RFFVRkRPMEZCUVVFc1kwRkRjbVlzVFVGQlN5eFBRVUZITEVkQlFVY3NSVUZCUlN4RlFVRkZPMEZCUVVFc1kwRkJSU3hOUVVGTExFOUJRVWNzUjBGQlJ5eEZRVUZGTEVWQlFVVXNSVUZCUlN4VlFVRlZMRWRCUVVVc1EwRkJRenRCUVVGQkxHTkJRVVVzVFVGQlN5eFBRVUZITEVkQlFVY3NSVUZCUlN4RlFVRkZPMEZCUVVFc1kwRkJSU3hOUVVGTExFOUJRVWNzUjBGQlJ5eEZRVUZGTEV0QlFVY3NVVUZCVFN4TlFVRkpMRWRCUVVVc1EwRkJRenRCUVVGQkxHTkJRVVVzVFVGQlN5eFBRVUZITEVWQlFVVXNSVUZCUlN4SlFVRkhMRU5CUVVNN1FVRkJRU3hqUVVGRkxFMUJRVXNzVDBGQlJ5eEZRVUZGTEVWQlFVVXNTVUZCUnl4SFFVRkZMRWRCUVVjN1FVRkJRU3hqUVVGRkxFMUJRVXNzVDBGQlJ5eEZRVUZGTEVOQlFVTXNSVUZCUlN4VFFVRlRMRVZCUVVVc1ZVRkJWU3hEUVVGRE8wRkJRVUVzWTBGQlJTeE5RVUZMTEU5QlFVY3NSVUZCUlN4RFFVRkRPMEZCUVVFc1kwRkJSU3hOUVVGTExFOUJRVWNzUlVGQlJTeEZRVUZGTEVsQlFVY3NRMEZCUXp0QlFVRkJMR05CUVVVc1RVRkJTeXhQUVVGSE8wRkJRVU1zYjBKQlFVVXNSVUZCUlR0QlFVRkhMSEZDUVVGSExFbEJRVVVzU1VGQlJTeExRVUZITEV0QlFVY3NUVUZCU1N4TFFVRkhPMEZCUVVrc2RVSkJRVThzUlVGQlJTeEhRVUZGTEVOQlFVTTdRVUZCUVN4alFVRkRPMEZCUVVFc1kwRkJSU3hOUVVGTExFOUJRVWM3UVVGQlF5eDVRa0ZCVVN4SlFVRkZMRWRCUVVVc1NVRkJSU3hIUVVGRkxFdEJRVWNzUlVGQlJTeExRVUZITEVkQlFVVXNUVUZCU1N4RlFVRkZMRVZCUVVVc1MwRkJSeXhKUVVGSkxFbEJRVVVzUzBGQlJ5eEpRVUZKTEVkQlFVYzdRVUZCUlR0QlFVRkRMSFZDUVVGUExFVkJRVVVzUlVGQlJTeExRVUZITEVkQlFVVXNRMEZCUXp0QlFVRkJMR05CUVVNN1FVRkJRU3hqUVVGRkxFMUJRVXNzVDBGQlJ5eEZRVUZGTEVWQlFVVXNTMEZCUnl4SFFVRkZMRU5CUVVNN1FVRkJRU3hqUVVGRkxFMUJRVXNzVDBGQlJ5eEZRVUZGTEVWQlFVVXNTVUZCUnl4RFFVRkRPMEZCUVVFc1kwRkJSU3hOUVVGTExFMUJRVWs3UVVGQlFTeGpRVUZMTEUxQlFVc3NUMEZCUnl4TFFVRkhMRVZCUVVVc1RVRkJTU3hMUVVGSExFVkJRVVVzUzBGQlJ5eFBRVUZMTzBGQlFVRXNZMEZCU3l4TlFVRkxMRTlCUVVjc1JVRkJSU3hGUVVGRkxFbEJRVWNzUTBGQlF6dEJRVUZCTEdOQlFVVXNUVUZCU3l4TlFVRkpPMEZCUVVFc1kwRkJTeXhOUVVGTExFOUJRVWNzUlVGQlJTeE5RVUZKTzBGQlFVRXNZMEZCUlN4TlFVRkxMRTlCUVVjc1JVRkJSU3hMUVVGTExFOUJRVThzUlVGQlJTeExRVU40Wml4SlFVRkZMRVZCUVVVc1RVRkJTU3hEUVVGRExFZEJRVVVzUTBGQlF6dEJRVUZCTEdOQlFVVXNUVUZCU3l4UFFVRkhPMEZCUVVNc2IwSkJRVWtzU1VGQlJTeExRVUZMTEU5QlFVOHNSVUZCUlN4TFFVRkhMRXRCUVVjc1JVRkJSU3hMUVVGSExFdEJRVWNzUzBGQlJ5eERRVUZETzBGQlFVVXNjMEpCUVVrc1JVRkJSU3hMUVVGSExFMUJRVWtzUlVGQlJTeExRVUZITEV0QlFVY3NTMEZCUnp0QlFVRkpMRzlDUVVGSE8wRkJRVVVzZDBKQlFVa3NUVUZCU1N4TFFVRkhMRVZCUVVVc1MwRkJSeXhOUVVGSkxFVkJRVVVzVFVGQlNTeEhRVUZGTEV0QlFVY3NTMEZCUnl4TFFVRkhMRXRCUVVjc1JVRkJSU3hGUVVGRkxFVkJRVVVzVFVGQlNTeEpRVUZGTzBGQlFVRXNjVUpCUVZFN1FVRkJReXh6UWtGQlJUdEJRVUZITEhOQ1FVRkpMRXRCUVVjc1JVRkJSU3hMUVVGSExFbEJRVVVzUlVGQlJTeExRVUZITEV0QlFVYzdRVUZCUlN4dFFrRkJReXhMUVVGSExFdEJRVWNzUzBGQlJ5eExRVUZITEVWQlFVVXNSVUZCUlN4TFFVRkhMRTFCUVVrc1EwRkJReXhOUVVGSk8wRkJRVUVzWjBKQlFVYzdRVUZCUXl4MVFrRkJUeXhGUVVGRkxFZEJRVVVzUTBGQlF6dEJRVUZCTEdOQlFVTTdRVUZCUVN4alFVRkZMRTFCUVVzc1QwRkJSeXhGUVVGRk8wRkJRVUVzWTBGQlJ5eE5RVUZMTEU5QlFVY3NSVUZCUlN4TFFVRkxMRTlCUVU4c1JVRkJSU3hMUVVGSExFdEJRVWNzUlVGQlJTeExRVUZITEV0QlFVY3NTMEZCUnl4RFFVRkRMRWRCUVVVc1EwRkJRenRCUVVGQkxHTkJRVVVzVFVGQlN5eFJRVUZKTEVWQlFVVXNTMEZCUnl4TlFVRk5MRk5CUVZNc1JVRkJSU3hWUVVGVkxFTkJRVU03UVVGQlFTeGpRVUZGTEUxQlFVc3NUMEZCUnl4RlFVRkZMRXRCUVVjN1FVRkJRU3hqUVVGTExFMUJRVXNzVDBGQlJ6dEJRVUZETEc5Q1FVRkZMRVZCUVVVN1FVRkJSeXh2UWtGQlNTeEpRVUZGTEV0QlFVYzdRVUZCUlN4dlFrRkJSU3hMUVVGTExFbEJRVWtzUTBGQlF5eEpRVUZGTzBGQlFVY3NkMEpCUVU4c1NVRkJSU3hOUVVGSkxFOUJRVXNzVDBGQlR5eFZRVUZSTEVsQlFVVXNTMEZCUnl4TlFVRkpMRWxCUVVVc1IwRkJSeXhGUVVGRkxFMUJRVTBzUlVGQlJUdEJRVUZCTEdOQlFVTTdRVUZCUVN4alFVRkZMRTFCUVVzc1QwRkJSeXhGUVVGRk8wRkJRVUVzWTBGQlJ5eE5RVUZMTEUxQlFVazdRVUZCUVN4WlFVRkhPMEZCUVVVc1owSkJRVVVzUlVGQlJUdEJRVUZCTEdOQlFWRTdRVUZCUVN4alFVTnVaanRCUVVGQkxGbEJRVlU3UVVGQlJTeHBRa0ZCU1N4TFFVRkxPMEZCUVVVc1owSkJRVVVzVTBGQlV5eERRVUZETEUxQlFVa3NTVUZCUlN4RlFVRkZMRkZCUVZFc1NVRkJTU3hQUVVGUExFZEJRVVVzUjBGQlJ5eEhRVUZGTEVWQlFVVXNRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJRenRCUVVGSExHZENRVUZGTEVWQlFVVXNVVUZCVVN4VFFVRlJMRWRCUVVjN1FVRkJSU3huUWtGQlJTeEhRVUZITEVOQlFVTTdRVUZCUlN4blFrRkJSeXhGUVVGRkxGTkJRVTg3UVVGQlJTeHhRa0ZCVHp0QlFVRkZMR1ZCUVVjc1IwRkJSU3hEUVVGRE8wRkJRVVVzYlVKQlFVOHNSVUZCUlN4VFFVRlBPMEZCUVVFc1ZVRkJRenRCUVVGRExGbEJRVVVzUjBGQlJ6dEJRVU4wU3l4alFVRkpMRXRCUVVjc1EwRkJReXhKUVVGSExFbEJRVWNzU1VGQlJ5eEpRVUZITEVsQlFVY3NTVUZCUnl4SlFVRkhMRWxCUVVjc1NVRkJSeXhKUVVGSExFbEJRVWNzU1VGQlJ5eEpRVUZITEVsQlFVY3NTVUZCUnl4SlFVRkhMRWxCUVVjc1NVRkJSeXhKUVVGSExFbEJRVWNzU1VGQlJ5eEpRVUZITEVsQlFVY3NSVUZCUlN4SFFVRkZMRXRCUVVjN1FVRkJRU3haUVVGRExFZEJRVVVzVTBGQlV5eEhRVUZGTEVkQlFVVXNSMEZCUlR0QlFVRkRMSEZDUVVGTE8wRkJRVVVzWTBGQlF5eEpRVUZKTEVkQlFVY3NRMEZCUXl4RlFVRkhMRWRCUVVjc1RVRkJTU3hIUVVGRkxFMUJRVWtzUTBGQlF6dEJRVUZGTEcxQ1FVRkhPMEZCUVVVN1FVRkJTeXh2UWtGQlRUdEJRVUZCTEZsQlFVYzdRVUZCUVN4WlFVRkZMRWRCUVVVc1UwRkJVeXhIUVVGRk8wRkJRVU1zYVVKQlFVY3NUVUZCU1N4SFFVRkZMRU5CUVVNc1IwRkJSU3hIUVVGRkxFTkJRVU1zU1VGQlJ5eFJRVUZQTEV0QlFVVTdRVUZCUlN4blFrRkJSU3hIUVVGSE8wRkJRVUVzV1VGQlF6dEJRVUZCTEZsQlFVVXNSMEZCUlN4VFFVRlRMRWRCUVVVN1FVRkJReXh4UWtGQlN6dEJRVUZGTEd0Q1FVRkZMRmxCUVZrc1JVRkJReXhMUVVGSkxHbENRVUZuUWl4UlFVRlBMRVZCUVVNc1EwRkJReXhKUVVGRkxFVkJRVVVzUjBGQlJ5eEZRVUZGTEVkQlFVY3NRMEZCUXl4RFFVRkRPMEZCUVVFc1dVRkJRenRCUVVGQkxGbEJRVVVzUjBGQlJUdEJRVUZCTEZsQlFVY3NSMEZCUlR0QlFVRkJMRmxCUVVjc1IwRkJSVHRCUVVGQkxGbEJRVWNzUjBGQlJUdEJRVUZCTEZsQlFVY3NSMEZCUlR0QlFVRkJMRmxCUVVjc1IwRkJSVHRCUVVGQkxGbEJRVWNzUjBGQlJUdEJRVUZCTEZsQlFVY3NSMEZCUlR0QlFVRkJMRmxCUVVjc1IwRkJSVHRCUVVGQkxGbEJRVWNzUjBGQlJUdEJRVUZCTEZsQlFVY3NSMEZCUlR0QlFVRkJMRmxCUVVjc1IwRkJSVHRCUVVGQkxGbEJRVWNzUjBGQlJUdEJRVUZCTEZsQlFVY3NSMEZCUlR0QlFVRkJMRmxCUVVjc1IwRkJSU3hOUVVGSk8wRkJRVUVzV1VGQlJTeEhRVUZGTEZOQlFWTXNSMEZCUlN4SFFVRkZPMEZCUVVNc2NVSkJRVXM3UVVGQlJTeHRRa0ZCUnl4TlFVRkpMRWxCUVVVc1YwRkJWeXhOUVVGSkxFVkJRVVVzUTBGQlF5eEpRVUZGTEVsQlFVVXNXVUZCV1N4RlFVRkRMR05CUVdFc1IwRkJSU3hMUVVGSkxHVkJRV01zUTBGQlF5eExRVUZITEVsQlFVVXNSVUZCUlN4SFFVRkhMRU5CUVVNc1RVRkJTU3hGUVVGRkxGbEJRVmtzUlVGQlF5eExRVUZKTEdWQlFXTXNRMEZCUXp0QlFVRkJMRmxCUVVNN1FVRkJRU3haUVVONlowSXNSMEZCUlN4VFFVRlRMRWRCUVVVc1IwRkJSU3hIUVVGRkxFZEJRVVU3UVVGQlF5eHhRa0ZCU3p0QlFVRkZMR2xDUVVGSExGTkJRVTg3UVVGQlJTeHJRa0ZCUlN4TlFVRkpMRTFCUVVrN1FVRkJSU3gxUWtGQlVTeEpRVUZGTEVkQlFVVXNTVUZCUlN4SFFVRkZPMEZCUVVrc2JVSkJRVWNzUTBGQlF5eEpRVUZGTEVkQlFVY3NSVUZCUlN4SlFVRkZMRTFCUVVrc1EwRkJRenRCUVVGRkxHdENRVUZGTEVsQlFVVXNTVUZCUlN4SFFVRkhMRU5CUVVNc1NVRkJSU3hEUVVGRExFbEJRVVVzUjBGQlJ5eERRVUZETzBGQlFVVXNaMEpCUVVVc1MwRkJSenRCUVVGRkxHdENRVUZGTEVWQlFVVXNUVUZCVFN4TlFVRkxMRVZCUVVVN1FVRkJSU3huUWtGQlJTeExRVUZITzBGQlFVVXNjVUpCUVU4N1FVRkJRU3haUVVGRE8wRkJRVUVzV1VGQlJTeEhRVUZGTzBGQlFVRXNXVUZCUnl4SFFVRkZMRk5CUVZNc1IwRkJSVHRCUVVGRExHMUNRVUZITEVWQlFVVXNSMEZCUnl4TlFVRkpMRU5CUVVNc1JVRkJSU3hKUVVGSk8wRkJRVUVzV1VGQlF6dEJRVUZCTEZsQlFVVXNSMEZCUlN4VFFVRlRMRWRCUVVVc1IwRkJSU3hIUVVGRk8wRkJRVU1zYTBKQlFVVXNTVUZCUlN4WlFVRlZMRWxCUVVVc1ZVRkJVU3hEUVVGRExFTkJRVU1zUzBGQlJ5eE5RVUZKTEV0QlFVY3NZVUZCVnl4SlFVRkZPMEZCUVVrc2NVSkJRVXM3UVVGQlJTeHJRa0ZCUlN4SlFVRkpMRXRCUVVzc1RVRkJTU3hEUVVGRE8wRkJRVVVzWjBKQlFVVXNSVUZCUlN4TlFVRkpMRTFCUVVrc1EwRkJReXhKUVVGRkxFVkJRVVVzWTBGQll6dEJRVUZGTEdkQ1FVRkZMRVZCUVVVc1NVRkJSU3hOUVVGSkxFMUJRVWtzUTBGQlF5eEpRVUZGTEVWQlFVVXNZMEZCWXp0QlFVRkZMR2RDUVVGRkxFVkJRVVVzU1VGQlJTeE5RVUZKTEUxQlFVa3NRMEZCUXl4SlFVRkZMRVZCUVVVc1dVRkJXVHRCUVVGRkxHZENRVUZGTEVWQlFVVXNTVUZCUlN4UFFVRkxMRTFCUVVrc1EwRkJReXhKUVVGRkxFVkJRVVVzVjBGQlZ6dEJRVUZGTEdkQ1FVRkZMRVZCUVVVc1NVRkJSU3hQUVVGTExFMUJRVWtzUTBGQlF5eEpRVUZGTEVWQlFVVXNXVUZCV1R0QlFVRkZMR2RDUVVGRkxFVkJRVVVzU1VGQlJTeFBRVUZMTEUxQlFVa3NRMEZCUXl4SlFVRkZMRVZCUVVVc1pVRkJaU3hKUVVGRk8wRkJRMnBtTEdkQ1FVRkZMRVZCUVVVc1NVRkJSU3hQUVVGTExFMUJRVWtzUTBGQlF5eEpRVUZGTEVWQlFVVXNWVUZCVlR0QlFVRkZMRzFDUVVGSExFVkJRVVVzVVVGQlVTeEpRVUZGTEV0QlFVc3NTVUZCU1N4RlFVRkZMR1ZCUVdVc1IwRkJSU3hIUVVGRkxFZEJRVVVzUjBGQlJTeEhRVUZGTEVkQlFVVXNRMEZCUXl4TFFVRkhMRkZCUVUwN1FVRkJSU3huUWtGQlJTeEZRVUZGTEVsQlFVVXNUMEZCU3l4TlFVRkpMRU5CUVVNc1NVRkJSVHRCUVVGQkxGbEJRVU03UVVGQlFTeFpRVUZGTEVkQlFVVXNVMEZCVXl4SFFVRkZMRWRCUVVVc1IwRkJSVHRCUVVGRExHdENRVUZGTEVsQlFVVXNXVUZCVlN4SlFVRkZMRlZCUVZFc1EwRkJReXhEUVVGRExFdEJRVWNzVFVGQlNTeExRVUZITEdGQlFWY3NTVUZCUlR0QlFVRkpMSEZDUVVGTE8wRkJRVVVzYTBKQlFVVXNTVUZCU1N4TFFVRkxMRTFCUVVrc1EwRkJRenRCUVVGRkxHZENRVUZGTEVWQlFVVXNUVUZCU1N4TlFVRkpMRU5CUVVNc1NVRkJSU3hGUVVGRkxGZEJRVmM3UVVGQlJTeG5Ra0ZCUlN4RlFVRkZMRWxCUVVVc1RVRkJTU3hOUVVGSkxFTkJRVU1zU1VGQlJTeEZRVUZGTEZkQlFWYzdRVUZCUlN4blFrRkJSU3hGUVVGRkxFbEJRVVVzVFVGQlNTeE5RVUZKTEVOQlFVTXNTVUZCUlN4RlFVRkZMRk5CUVZNN1FVRkJSU3huUWtGQlJTeEZRVUZGTEVsQlFVVXNUMEZCU3l4TlFVRkpMRU5CUVVNc1NVRkJSU3hGUVVGRkxGRkJRVkU3UVVGQlJTeG5Ra0ZCUlN4RlFVRkZMRWxCUVVVc1QwRkJTeXhOUVVGSkxFTkJRVU1zU1VGQlJTeEZRVUZGTEZOQlFWTTdRVUZCUlN4blFrRkJSU3hGUVVGRkxFbEJRVVVzVDBGQlN5eE5RVUZKTEVOQlFVTXNTVUZCUlN4RlFVRkZMRmxCUVZrc1NVRkJSVHRCUVVGTExHZENRVUZGTEVWQlFVVXNTVUZCUlN4UFFVRkxMRTFCUVVrc1EwRkJReXhKUVVGRkxFVkJRVVVzVDBGQlR6dEJRVUZGTEcxQ1FVRkhMRVZCUVVVc1JVRkJSU3haUVVGWkxFTkJRVU1zU1VGQlJTeExRVUZITEVsQlFVa3NSVUZCUlN4VFFVRlRMRU5CUVVNc1NVRkJSU3hGUVVGRkxGRkJRVkVzU1VGQlJTeEpRVUZGTzBGQlFVVXNaMEpCUVVVc1JVRkJSU3hKUVVGRkxFOUJRM0JtTEUxQlFVa3NRMEZCUXl4SlFVRkZPMEZCUVVVc1owSkJRVVVzUlVGQlJTeEpRVUZGTEU5QlFVc3NUVUZCU1N4RFFVRkRMRWxCUVVVc1JVRkJSU3hMUVVGSExFVkJRVVVzYTBKQlFXdENPMEZCUVVjc2EwSkJRVWNzU1VGQlNTeExRVUZMTEVWQlFVVXNXVUZCV1N4SFFVRkZMRWRCUVVVc1EwRkJReXhGUVVGSExHdENRVUZyUWp0QlFVRkZMR3RDUVVGSkxFbEJRVWNzU1VGQlNTeExRVUZMTEVWQlFVVXNXVUZCV1N4SFFVRkZMRWRCUVVVc1EwRkJReXhGUVVGSExHdENRVUZyUWp0QlFVRkZMRzFDUVVGSExFdEJRVWNzUzBGQlJ5eEZRVUZGTEd0Q1FVRnJRaXhMUVVGSExFdEJRVXNzU1VGQlNTeEhRVUZGTEVOQlFVTXNTMEZCUnp0QlFVRkZMR2RDUVVGRkxFVkJRVVVzU1VGQlJTeFBRVUZMTEUxQlFVa3NRMEZCUXl4SlFVRkZPMEZCUVVFc1dVRkJRenRCUVVGQkxGbEJRVVVzUjBGQlJTeFRRVUZUTEVkQlFVVTdRVUZCUXl4eFFrRkJTenRCUVVGRkxHdENRVUZKTEVsQlFVVXNTVUZCU1N4TFFVRkxMRVZCUVVVc1JVRkJSU3hKUVVGRkxFOUJRVXNzVFVGQlNTeERRVUZETEVsQlFVVXNUVUZCU3l4RlFVRkZMRVZCUVVVc1NVRkJSU3hQUVVGTExFMUJRVWtzUTBGQlF5eEhRVUZGTEVWQlFVVXNSVUZCUlN4SlFVRkZMRTlCUVVzc1RVRkJTU3hEUVVGRExFZEJRVVVzUlVGQlJTeEZRVUZGTEVsQlFVVXNUVUZCU1N4TlFVRkpMRU5CUVVNc1IwRkJSU3hGUVVGRkxFVkJRVVVzU1VGQlJTeE5RVUZKTEUxQlFVa3NRMEZCUXl4SFFVRkZMRVZCUVVVc1JVRkJSU3hOUVVGSkxFMUJRVWtzUTBGQlF5eEhRVUZGTEVOQlFVTXNSMEZCUlN4SlFVRkZMRVZCUVVVc1JVRkJSU3hKUVVGRkxFOUJRVXNzVFVGQlNTeERRVUZETEVkQlFVVXNTVUZCUlN4RlFVRkZMR3RDUVVGclFpeEhRVUZGTEVsQlFVY3NTVUZCU1N4TFFVRkxMRVZCUVVVc1dVRkJXU3hIUVVGRkxFZEJRVVVzUTBGQlF5eEZRVUZITEd0Q1FVRnJRaXhIUVVGRkxFbEJRVWNzU1VGQlNUdEJRVUZCTEdkQ1FVRkxMRVZCUVVVc1dVRkJXVHRCUVVGQkxHZENRVU0xWmp0QlFVRkJMR2RDUVVGRk8wRkJRVUVzWTBGQlF5eEZRVUZITEd0Q1FVRnJRaXhIUVVGRkxFbEJRVVVzUzBGQlN5eEpRVUZKTEVkQlFVVXNRMEZCUXp0QlFVRkZMR3RDUVVGRkxFbEJRVVVzUlVGQlJTeEZRVUZGTEVsQlFVVXNUMEZCU3l4TlFVRkpMRU5CUVVNc1NVRkJSU3hQUVVGUExFdEJRVWNzUzBGQlJ5eExRVUZITEVOQlFVTXNTVUZCUlN4SlFVRkZMRTFCUVVrc1MwRkJSeXhQUVVGTExFbEJRVVVzUzBGQlN5eEpRVUZKTEVkQlFVVXNRMEZCUXl4SFFVRkZMRVZCUVVVc1VVRkJVU3hGUVVGRkxGRkJRVkVzU1VGQlJTeFJRVUZOTEVsQlFVVXNTVUZCUlN4SlFVRkZMRXRCUVVjc1JVRkJSVHRCUVVGSExHZENRVUZGTEVWQlFVVXNTVUZCUlN4UFFVRkxMRTFCUVVrc1EwRkJReXhKUVVGRkxFVkJRVVVzVDBGQlR6dEJRVUZGTEcxQ1FVRkhMRVZCUVVVc1JVRkJSU3haUVVGWkxFTkJRVU1zU1VGQlJTeExRVUZITEVsQlFVa3NSVUZCUlN4VFFVRlRMRU5CUVVNc1NVRkJSU3hGUVVGRkxGRkJRVkVzU1VGQlJTeEpRVUZGTzBGQlFVVXNaMEpCUVVVc1JVRkJSU3hKUVVGRkxFOUJRVXNzVFVGQlNTeERRVUZETEVsQlFVVTdRVUZCUlN4blFrRkJSU3hGUVVGRkxFMUJRVWtzVFVGQlNTeERRVUZETEVsQlFVVXNSVUZCUlN4WFFVRlhPMEZCUVVVc1owSkJRVVVzUlVGQlJTeEpRVUZGTEUxQlFVa3NUVUZCU1N4RFFVRkRMRWxCUVVVc1JVRkJSU3hYUVVGWE8wRkJRVVVzWjBKQlFVVXNSVUZCUlN4SlFVRkZMRTFCUVVrc1RVRkJTU3hEUVVGRExFbEJRVVVzUlVGQlJTeFRRVUZUTzBGQlFVVXNaMEpCUVVVc1JVRkJSU3hKUVVGRkxFOUJRVXNzVFVGQlNTeERRVUZETEVsQlFVVXNSVUZCUlN4UlFVRlJPMEZCUVVVc1owSkJRVVVzUlVGQlJTeEpRVUZGTEU5QlFVc3NUVUZCU1N4RFFVRkRMRWxCUVVVc1JVRkJSU3hUUVVGVE8wRkJRVVVzWjBKQlFVVXNSVUZCUlN4SlFVRkZMRTlCUVVzc1RVRkJTU3hEUVVGRExFbEJRVVVzUlVGQlJTeFJRVUZSTzBGQlFVVXNhMEpCUVVVc1JVRkJSU3hSUVVGUk8wRkJRVVVzYjBKQlFVMHNRMEZCUXl4TFFVRkhMRVZCUVVVc1JVRkJSU3hIUVVGSExFMUJRVWtzVFVGQlNTeERRVUZETEVsQlFVVXNTVUZCUnl4SlFVRkZMRTFCUVVrc1MwRkJSenRCUVVOd1ppeHhRa0ZCVHl4SlFVRkpMRWxCUVVVc1IwRkJSU3hMUVVGSExFTkJRVU1zUzBGQlN5eEpRVUZKTEVOQlFVTXNTVUZCUlN4SlFVRkZMRWxCUVVVc1EwRkJReXhMUVVGTExFMUJRVTBzU1VGQlJTeFZRVUZWTEUxQlFVa3NTVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJReXhMUVVGTExFMUJRVTBzU1VGQlJTeEZRVUZGTEVOQlFVTXNRMEZCUXl4TlFVRkpMRTFCUVVrc1ZVRkJWU3hOUVVGSkxFbEJRVVVzUlVGQlJTeEhRVUZGTEUxQlFVazdRVUZCUVN4WlFVRkRPMEZCUVVFc1dVRkJSU3hIUVVGRk8wRkJRVUVzV1VGQlJ5eEhRVUZGTzBGQlFVRXNXVUZCUnl4SFFVRkZMRk5CUVZNc1IwRkJSU3hIUVVGRkxFZEJRVVU3UVVGQlF5eDFRa0ZCVXl4RlFVRkZMRWRCUVVVN1FVRkJReXgzUWtGQlR5eEpRVUZGTEVWQlFVVXNZVUZCWVN4RlFVRkZMRTFCUVUwc2JVSkJRVzFDTEV0QlFVY3NSVUZCUlN4RFFVRkRMRWxCUVVVN1FVRkJRU3hqUVVGTE8wRkJRVU1zY1VKQlFVczdRVUZCUlN4eFFrRkJTenRCUVVGRkxIRkNRVUZMTzBGQlFVVXNhMEpCUVVrc1MwRkJSeXh2UWtGQlNTeFJRVUZOTEZsQlFWa3NSMEZCUlN4SlFVRkZMRWxCUVVrc1MwRkJTeXhIUVVGRkxFZEJRVVVzUTBGQlF5eEhRVUZGTEVsQlFVVXNTVUZCU1N4TFFVRkxMRWRCUVVVc1IwRkJSU3hEUVVGRE8wRkJRVVVzYTBKQlFVVXNSVUZCUlN4clFrRkJhMEk3UVVGQlJTeHJRa0ZCU1N4SlFVRkZMRVZCUVVVc2EwSkJRV3RDTEVkQlFVVXNTVUZCUlN4TFFVRkxMRWxCUVVrc1IwRkJSU3hEUVVGRE8wRkJRVVVzWjBKQlFVVXNSVUZCUlN4TlFVRkpMRTFCUVVrc1EwRkJReXhKUVVGRkxFdEJRVWM3UVVGQlJTeG5Ra0ZCUlN4RlFVRkZMRTFCUVVrc1RVRkJTU3hEUVVGRExFbEJRVVVzVDBGQlR5eExRVUZITEVOQlFVTTdRVUZCUlN4clFrRkJSU3hGUVVGRkxFTkJRVU03UVVGQlJTeHJRa0ZCUlN4RlFVRkZMRU5CUVVNN1FVRkJSU3hyUWtGQlJTeEhRVUZITEVOQlFVTTdRVUZCUlN4clFrRkJSU3hIUVVGSExFTkJRVU03UVVGQlJTeHJRa0ZCUlN4TFFVRkhMRVZCUVVVc1JVRkJSU3hOUVVGSkxFMUJRVWtzUTBGQlF5eEpRVUZGTEVkQlFVVXNSVUZCUlN4RlFVRkZMRWxCUVVVc1RVRkJTU3hOUVVGSkxFTkJRVU1zU1VGQlJTeE5RVU51Wml4RlFVRkZMRVZCUVVVc1RVRkJTU3hOUVVGSkxFTkJRVU1zU1VGQlJTeEhRVUZGTEVWQlFVVXNSVUZCUlN4SlFVRkZMRTFCUVVrc1RVRkJTU3hEUVVGRExFbEJRVVU3UVVGQlFTeFpRVUZGTzBGQlFVRXNXVUZCUlN4SFFVRkZMRTFCUVVrN1FVRkJReXhwUWtGQlJ5eEZRVUZGTzBGQlFVRXNXVUZCUXp0QlFVRkJMRmxCUVVVc1IwRkJSU3hUUVVGVExFZEJRVVVzUjBGQlJTeEhRVUZGTzBGQlFVTXNjVUpCUVVzN1FVRkJSU3h4UWtGQlN6dEJRVUZGTEhGQ1FVRkxPMEZCUVVVc2FVSkJRVWNzVTBGQlR6dEJRVUZGTEhWQ1FVRlJMRWRCUVVVc1NVRkJSU3hGUVVGRkxFVkJRVVVzVVVGQlRTeERRVUZETEV0QlFVYzdRVUZCUXl4dlFrRkJTU3hKUVVGRkxFOUJRVXM3UVVGQlJTeHhRa0ZCUnl4UFFVRkxPMEZCUVVVc2NVSkJRVWNzUzBGQlJ5eEpRVUZGTEVsQlFVVXNTVUZCUlR0QlFVRkZMRzFDUVVGSExFdEJRVXNzVDBGQlN5eEpRVUZGTEVWQlFVVXNSVUZCUlN4TlFVRkpMRTFCUVVrc1EwRkJReXhKUVVGRkxFOUJRVXNzU1VGQlJTeEZRVUZGTEVWQlFVVXNUVUZCU1N4TlFVRkpMRU5CUVVNc1NVRkJSU3hIUVVGSExFVkJRVVVzVFVGQlNTeE5RVUZKTEVOQlFVTXNRMEZCUXp0QlFVRkZMSEZDUVVGSExFbEJRVVVzU1VGQlJUdEJRVUZCTEdOQlFVTTdRVUZCUXl4eFFrRkJUeXhIUVVGSExFTkJRVU1zUlVGQlJTeE5RVUZOTEUxQlFVc3NSVUZCUlR0QlFVRkJMRmxCUVVNN1FVRkJRU3haUVVGRkxFZEJRVVVzVFVGQlNUdEJRVUZCTEZsQlFVTTdRVUZCUVN4WlFVRkZMRWRCUVVVc1RVRkJTU3hMUVVGTExFbEJRVWs3UVVGQlFTeFpRVUZGTEVkQlFVVXNUVUZCU1R0QlFVRkRMRzFDUVVGSE8wRkJRVVVzYjBKQlFVczdRVUZCUVN4WlFVRlRPMEZCUVVFc1dVRkJSU3hIUVVGRkxGZEJRVlU3UVVGQlF5eHhRa0ZCVHp0QlFVRkJMRmxCUVZVN1FVRkJRU3haUVVGRkxFZEJRVVVzVFVGQlNTeFpRVUZaTEdGQlFWY3NXVUZCV1N4SlFVRkpPMEZCUVVFc1dVRkJSU3hIUVVGRkxFMUJRVWtzU1VGQlJTeHpRMEZCWXl4TFFVRkxMRVZCUVVVc1UwRkJUeXhWUVVGVk8wRkJRVUVzV1VGQmIwSXNSMEZCUlN4VFFVRlRMRWRCUVVVN1FVRkJReXh4UWtGQlN6dEJRVUZGTEd0Q1FVRkpMRWxCUTNCbUxFVkJRVVVzUlVGQlJUdEJRVUZQTEd0Q1FVRkhMRXRCUVVjc1MwRkJSeXhoUVVGWE8wRkJRVVVzZFVKQlFVMDdRVUZCUnl4MVFrRkJVU3hKUVVGRkxFZEJRVVVzUzBGQlJ5eEhRVUZGTEV0QlFVY3NSMEZCUlR0QlFVRkRMRzlDUVVGSkxFbEJRVVVzUzBGQlJ5eEpRVUZGTEUxQlFVYzdRVUZCUnl4dlFrRkJSU3hMUVVGTExFbEJRVWtzUjBGQlJTeEpRVUZGTEZOQlFWTTdRVUZCUlN4dlFrRkJTU3hKUVVGRk8wRkJRVXNzYjBKQlFVVXNTMEZCU3l4SlFVRkpMRWRCUVVVc1EwRkJRenRCUVVGRkxHMUNRVUZGTzBGQlFVTXNkVUpCUVVjc1JVRkJSU3hKUVVGSkxFdEJRVXNzUjBGQlJTeFpRVUZYTEV0QlFVY3NVVUZCVFN4SlFVRkZMRk5CUVU4c1MwRkJTeXhKUVVGRkxFVkJRVVVzVDBGQlR5eGhRVUZYTEZOQlFVODdRVUZCVFN4elFrRkJSenRCUVVGRExITkNRVUZGTEV0QlFVc3NRMEZCUXp0QlFVRkZMSE5DUVVGRk8wRkJRVVVzZDBKQlFVa3NTVUZCUlR0QlFVRkZMREJDUVVGTk8wRkJRVUVzYTBKQlFVTXNVMEZCVHl4SFFVRkZPMEZCUVVFc2EwSkJRVU03UVVGQlF5eHpRa0ZCUlR0QlFVRkJMR2RDUVVGTk8wRkJRVU1zYjBKQlFVYzdRVUZCUlN4NVFrRkJUVHRCUVVGQkxHTkJRVVU3UVVGQlF5eHhRa0ZCVFR0QlFVRkJMRmxCUVVVN1FVRkJRU3haUVVGRkxFZEJRVVU3UVVGQlFTeFpRVUZITEVkQlFVVTdRVUZCUVN4WlFVRkhMRWRCUVVVN1FVRkJRU3haUVVGSExFZEJRVVU3UVVGQlFTeFpRVUZITEVkQlFVVTdRVUZCUVN4WlFVRkhMRWRCUVVVN1FVRkJRU3haUVVGSExFZEJRVVU3UVVGQlFTeFpRVUZITEVkQlFVVXNTMEZCUnl4RlFVRkZPMEZCUVVFc1dVRkJWeXhIUVVGRk8wRkJRVUVzV1VGQlJ5eEhRVUZGTEZOQlFWTXNSMEZCUlN4SFFVRkZMRWRCUVVVc1IwRkJSVHRCUVVGRExIRkNRVUZQTEVkQlFVY3NUVUZCU1N4SFFVRkZMRTFCUVVrc1IwRkJSU3hOUVVGSkxFZEJRVVVzVFVGQlNTeERRVUZETzBGQlFVRXNXVUZCUXp0QlFVRkJMRlZCUVVNc1IwRkJSU3hKUVVGRkxGZEJRVlU3UVVGQlF5eHhRa0ZCVXl4RlFVRkZMRWRCUVVVc1IwRkJSVHRCUVVGRExHdENRVUZGTEVWQlFVVTdRVUZCVVN4clFrRkJSU3hIUVVGSE8wRkJRVVVzWjBKQlFVVXNSMEZCUnl4TFFVRkxMRVZCUVVVc1JVRkJSVHRCUVVGRkxHMUNRVUZITEVWQlFVVTdRVUZCUnl4cFFrRkJSeXhSUVVGUkxFVkJRVVVzUTBGQlF6dEJRVU55Wml4dFFrRkJSenRCUVVGRkxHbENRVUZITzBGQlFVVXNjVUpCUVU4N1FVRkJRU3haUVVGRE8wRkJRVU1zWjBKQlFVa3NTVUZCUlN4RlFVRkRMRWRCUVVVc1IwRkJSVHRCUVVGRk8wRkJRVWtzWjBKQlFVY3NSVUZCUlR0QlFVRm5RaXhyUWtGQlJ6dEJRVUZETEhWQ1FVRlBMRVZCUVVVc1owSkJRV2RDTEVkQlFVVXNRMEZCUXp0QlFVRkJMR05CUVVNc1UwRkJUeXhIUVVGRk8wRkJRVU1zYTBKQlFVVXNjMFJCUVhORUxFTkJRVU1zUlVGQlJTeEhRVUZGTEVWQlFVVXNRMEZCUXp0QlFVRkJMR05CUVVNN1FVRkJReXhsUVVGSExFZEJRVVVzVTBGQlV5eEhRVUZGTzBGQlFVTXNaMEpCUVVVc1JVRkJSU3hWUVVGVExFVkJRVVVzVFVGQlRUdEJRVUZCTEZsQlFVTXNRMEZCUXl4RlFVRkZMRTFCUVUwc1EwRkJRenRCUVVGRkxHMUNRVUZOTEVOQlFVTTdRVUZCUVN4VlFVRkRMRVZCUVVVN1FVRkJSU3haUVVGRkxGZEJRVk1zUTBGQlF5eEhRVUZGTEU5QlFVc3NSVUZCUlN4WFFVRlRMRVZCUVVVc1IwRkJSeXhIUVVGRkxFTkJRVU03UVVGQlJTeFpRVUZGTEcxQ1FVRnBRaXhEUVVGRExFZEJRVVVzVDBGQlN5eEZRVUZGTEcxQ1FVRnBRaXhGUVVGRkxFZEJRVWNzUjBGQlJTeERRVUZETzBGQlFVVXNXVUZCUlN3eVFrRkJlVUlzUTBGQlF5eEhRVUZGTEVkQlFVVXNSMEZCUlN4SFFVRkZMRWRCUVVVc1IwRkJSU3hIUVVGRkxFZEJRVVVzUjBGQlJTeFBRVUZMTEVWQlFVVXNNa0pCUVhsQ0xFVkJRVVVzUjBGQlJ5eEhRVUZGTEVkQlFVVXNSMEZCUlN4SFFVRkZMRWRCUVVVc1IwRkJSU3hIUVVGRkxFZEJRVVVzUjBGQlJTeERRVUZETzBGQlF6TmhMRmxCUVVVc09FSkJRVFJDTEVOQlFVTXNSMEZCUlN4UFFVRkxMRVZCUVVVc09FSkJRVFJDTEVWQlFVVXNSMEZCUnl4SFFVRkZMRU5CUVVNN1FVRkJSU3haUVVGRkxDdENRVUUyUWl4RFFVRkRMRWRCUVVVc1IwRkJSU3hQUVVGTExFVkJRVVVzSzBKQlFUWkNMRVZCUVVVc1IwRkJSeXhIUVVGRkxFZEJRVVVzUTBGQlF6dEJRVUZGTEZsQlFVVXNORUpCUVRCQ0xFTkJRVU1zUjBGQlJTeEhRVUZGTEU5QlFVc3NSVUZCUlN3MFFrRkJNRUlzUlVGQlJTeEhRVUZITEVkQlFVVXNSMEZCUlN4RFFVRkRPMEZCUVVVc1dVRkJSU3cwUWtGQk1FSXNVVUZCU1N4RlFVRkZMRFJDUVVFd1FpeEZRVUZGTEVsQlFVa3NRMEZCUXp0QlFVRkZMRmxCUVVVc2IwSkJRV3RDTEVOQlFVTXNSMEZCUlN4SFFVRkZMRTlCUVVzc1JVRkJSU3h2UWtGQmEwSXNSVUZCUlN4SlFVRkpMRWRCUVVVc1IwRkJSU3hEUVVGRE8wRkJRVVVzV1VGQlJTeHhRa0ZCYlVJc1VVRkJTU3hGUVVGRkxIRkNRVUZ0UWl4RlFVRkZMRWxCUVVrc1EwRkJRenRCUVVGRkxGbEJRVVVzTUVKQlFYZENMRU5CUVVNc1IwRkJSU3hIUVVGRkxFOUJRVXNzUlVGQlJTd3dRa0ZCZDBJc1JVRkJSU3hKUVVGSkxFZEJRVVVzUjBGQlJTeERRVUZETzBGQlEzQm1MRmxCUVVVc2JVSkJRV2xDTEVOQlFVTXNSMEZCUlN4UFFVRkxMRVZCUVVVc2JVSkJRV2xDTEVWQlFVVXNTVUZCU1N4SFFVRkZMRU5CUVVNN1FVRkJSU3haUVVGRkxHOUNRVUZyUWl4RFFVRkRMRWRCUVVVc1QwRkJTeXhGUVVGRkxHOUNRVUZyUWl4RlFVRkZMRWxCUVVrc1IwRkJSU3hEUVVGRE8wRkJRVVVzV1VGQlJTeFhRVUZUTEZGQlFVa3NSVUZCUlN4WFFVRlRMRVZCUVVVc1NVRkJTU3hEUVVGRE8wRkJRVVVzV1VGQlJTeHRRa0ZCYVVJc1EwRkJReXhIUVVGRkxFZEJRVVVzUjBGQlJTeEhRVUZGTEVkQlFVVXNUMEZCU3l4RlFVRkZMRzFDUVVGcFFpeEZRVUZGTEVsQlFVa3NSMEZCUlN4SFFVRkZMRWRCUVVVc1IwRkJSU3hIUVVGRkxFTkJRVU03UVVGQlJTeFpRVUZGTEc5Q1FVRnJRaXhEUVVGRExFZEJRVVVzUjBGQlJTeEhRVUZGTEVkQlFVVXNUMEZCU3l4RlFVRkZMRzlDUVVGclFpeEZRVUZGTEVsQlFVa3NSMEZCUlN4SFFVRkZMRWRCUVVVc1IwRkJSU3hEUVVGRE8wRkJRVVVzV1VGQlJTeHZRa0ZCYTBJc1VVRkJTU3hGUVVGRkxHOUNRVUZyUWl4RlFVRkZMRWxCUVVrc1EwRkJRenRCUVVGRkxGbEJRVVVzZFVKQlFYRkNMRU5CUVVNc1IwRkJSU3hIUVVGRkxFZEJRVVVzVDBGQlN5eEZRVUZGTEhWQ1FVRnhRaXhGUVVGRkxFbEJRVWtzUjBGQlJTeEhRVUZGTEVkQlFVVXNRMEZCUXp0QlFVRkZMRmxCUVVVc2QwSkJRWE5DTEVOQlFVTXNSMEZCUlN4SFFVRkZMRTlCUVVzc1JVRkJSU3gzUWtGQmMwSXNSVUZCUlN4SlFVRkpMRWRCUVVVc1IwRkJSU3hEUVVGRE8wRkJRekZsTEZsQlFVVXNkMEpCUVhOQ0xGRkJRVWtzUlVGQlJTeDNRa0ZCYzBJc1JVRkJSU3hKUVVGSkxFTkJRVU03UVVGQlJTeFpRVUZGTEc5Q1FVRnJRaXhSUVVGSkxFVkJRVVVzYjBKQlFXdENMRVZCUVVVc1NVRkJTU3hEUVVGRE8wRkJRVVVzV1VGQlJTeG5Ra0ZCWXl4RFFVRkRMRWRCUVVVc1IwRkJSU3hQUVVGTExFVkJRVVVzWjBKQlFXTXNSVUZCUlN4SlFVRkpMRWRCUVVVc1IwRkJSU3hEUVVGRE8wRkJRVVVzV1VGQlJTeHBRa0ZCWlN4RFFVRkRMRWRCUVVVc1IwRkJSU3hIUVVGRkxFOUJRVXNzUlVGQlJTeHBRa0ZCWlN4RlFVRkZMRWxCUVVrc1IwRkJSU3hIUVVGRkxFZEJRVVVzUTBGQlF6dEJRVUZGTEZsQlFVVXNkMEpCUVhOQ0xGRkJRVWtzUlVGQlJTeDNRa0ZCYzBJc1JVRkJSU3hKUVVGSkxFTkJRVU03UVVGQlJTeFpRVUZGTEhGQ1FVRnRRaXhSUVVGSkxFVkJRVVVzY1VKQlFXMUNMRVZCUVVVc1NVRkJTU3hEUVVGRE8wRkJRVVVzV1VGQlJTeHhRa0ZCYlVJc1EwRkJReXhIUVVGRkxFZEJRVVVzUjBGQlJTeEhRVUZGTEU5QlFVc3NSVUZCUlN4eFFrRkJiVUlzUlVGQlJTeEpRVUZKTEVkQlFVVXNSMEZCUlN4SFFVRkZMRWRCUVVVc1EwRkJRenRCUVVGRkxGbEJRVVVzVlVGQlVTeERRVUZETEVkQlFVVXNSMEZCUlN4SFFVRkZMRWRCUVVVc1IwRkJSU3hIUVVGRkxFZEJRVVVzVDBGQlN5eEZRVUZGTEZWQlFWRXNSVUZCUlN4SlFVRkpMRWRCUVVVc1IwRkJSU3hIUVVGRkxFZEJRVVVzUjBGQlJTeEhRVUZGTEVkQlFVVXNRMEZCUXp0QlFVTm9aU3haUVVGRkxHMUNRVUZwUWl4UlFVRkpMRVZCUVVVc2JVSkJRV2xDTEVWQlFVVXNTVUZCU1N4RFFVRkRPMEZCUVVVc1kwRkJTU3hMUVVGSExFOUJRVXNzUzBGQlJ5eEZRVUZGTEVsQlFVa3NSMEZCUlN4SlFVRkZMRVZCUVVVc1owSkJRV01zVDBGQlN5eEpRVUZGTEVWQlFVVXNaMEpCUVdNc1JVRkJSU3hKUVVGSkxFZEJRVVVzUzBGQlJ5eEZRVUZGTEZWQlFWRXNVVUZCU1N4TFFVRkhMRVZCUVVVc1ZVRkJVU3hGUVVGRkxFbEJRVWtzUTBGQlF6dEJRVUZGTEZsQlFVVXNVVUZCVFN4UlFVRkpMRVZCUVVVc1VVRkJUU3hGUVVGRkxFbEJRVWtzUTBGQlF6dEJRVUZGTEZsQlFVVXNkMEpCUVhOQ0xFOUJRVXNzUlVGQlJTeDNRa0ZCYzBJc1JVRkJSU3hKUVVGSk8wRkJRVVVzWTBGQlNTeExRVUZITEVWQlFVVXNNa0pCUVhsQ0xFTkJRVU1zUjBGQlJTeEhRVUZGTEVkQlFVVXNSMEZCUlN4SFFVRkZMRTlCUVVzc1MwRkJSeXhGUVVGRkxESkNRVUY1UWl4RlFVRkZMRWxCUVVrc1IwRkJSU3hIUVVGRkxFZEJRVVVzUjBGQlJTeEhRVUZGTEVOQlFVTTdRVUZCUlN4WlFVRkZMRGhDUVVFMFFpeFBRVUZMTEVWQlFVVXNPRUpCUVRSQ0xFVkJRVVVzU1VGQlNUdEJRVU4wWVN4alFVRkpMRXRCUVVjc1EwRkJReXhIUVVGRkxFZEJRVVVzUjBGQlJTeFBRVUZMTEV0QlFVY3NSVUZCUlN4SlFVRkpMRWRCUVVVc1IwRkJSU3hIUVVGRkxFTkJRVU1zUjBGQlJTeExRVUZITEZGQlFVa3NTMEZCUnl4RlFVRkZMRWxCUVVrc1EwRkJReXhIUVVGRkxFdEJRVWNzUlVGQlJTd3lRa0ZCZVVJc1VVRkJTU3hMUVVGSExFVkJRVVVzTWtKQlFYbENMRVZCUVVVc1NVRkJTU3hEUVVGRExFZEJRVVVzUzBGQlJ5eFBRVUZMTEV0QlFVY3NSVUZCUlN4SlFVRkpMRWRCUVVVc1MwRkJSeXhSUVVGSkxFdEJRVWNzUlVGQlJTeEpRVUZKTEVOQlFVTXNSMEZCUlN4TFFVRkhMRU5CUVVNc1IwRkJSU3hQUVVGTExFdEJRVWNzUlVGQlJTeEpRVUZKTEVkQlFVVXNRMEZCUXl4SFFVRkZMRXRCUVVjc1QwRkJTeXhMUVVGSExFVkJRVVVzU1VGQlNTeEhRVUZGTEVsQlFVVXNVVUZCU1N4SlFVRkZMRVZCUVVVc1NVRkJTU3hEUVVGRExFZEJRVVVzUzBGQlJ5eFJRVUZKTEV0QlFVY3NSVUZCUlN4SlFVRkpMRU5CUVVNN1FVRkJSU3h0UWtGQlV5eExRVUZKTzBGQlFVTXNaMEpCUVVrc1NVRkJSVHRCUVVGRkxHZENRVUZGTEU5QlFVOHNUMEZCVHl4RFFVRkRMRWRCUVVVc1EwRkJRenRCUVVGRkxHZENRVUZKTEVsQlFVVXNUMEZCUnl4TlFVRkpMRVZCUVVVc1RVRkJTU3hIUVVGRkxFbEJRVVVzVDBGQlJ5eFBRVUZITEVWQlFVVXNRMEZCUXl4TlFVRkpPMEZCUVVVc1kwRkJSU3hMUVVGSExFVkJRVVVzUlVGQlJTeEZRVUZGTzBGQlFVVXNZMEZCUlN4TFFVRkhMRVZCUVVVc1JVRkJSU3hGUVVGRk8wRkJRVVVzWTBGQlJTeExRVUZITEVWQlFVVXNSVUZCUlN4RlFVRkZPMEZCUVVVc1kwRkJSU3h2UTBGQmEwTXNSVUZCUlN4RlFVRkZMR2xEUVVGcFF6dEJRVUZGTEdOQlFVVXNTMEZCUnl4RlFVRkZMRVZCUVVVc1JVRkJSVHRCUVVGRkxHTkJRVVVzUzBGQlJ5eEZRVUZGTEVWQlFVVXNSVUZCUlR0QlFVRkZMRzFDUVVGUE8wRkJRVUVzVlVGQlF6dEJRVUZETEZsQlFVVXNZVUZCVnp0QlFVTXpaU3haUVVGRkxHRkJRVmM3UVVGQlJ5eFpRVUZGTEZsQlFWVTdRVUZCUnl4WlFVRkZMR1ZCUVdFN1FVRkJSU3haUVVGRkxHMUNRVUZwUWl4TlFVRkpMRWxCUVVVN1FVRkJSU3haUVVGRkxHVkJRV0U3UVVGQlJTeFpRVUZGTEdWQlFXRTdRVUZCUnl4WlFVRkZMR3RDUVVGblFqdEJRVUZITEZsQlFVVXNZVUZCVnp0QlFVRkZMRmxCUVVVc1ZVRkJVVHRCUVVGRkxHTkJRVWs3UVVGQlJ5eGpRVUZGTEZOQlFWTXNTMEZCU1R0QlFVRkRMR3RDUVVGSkxFZEJRVWM3UVVGQlJTeHRRa0ZCU3l4SlFVRkZPMEZCUVVFc1ZVRkJSenRCUVVGRkxHMUNRVUZUTEV0QlFVazdRVUZCUXl4blFrRkJSeXhGUVVGRkxFbEJRVVU3UVVGQlJ5eHJRa0ZCUnp0QlFVRkZMRzFDUVVGSExFTkJRVU1zUjBGQlJTeExRVUZITEVkQlFVY3NSVUZCUlN4SFFVRkZMRmxCUVZrc1EwRkJRenRCUVVGQkxHMUNRVUZOTzBGQlFVTXNiMEpCUVVjc1JVRkJSVHRCUVVGUExIVkNRVUZKTEdOQlFWa3NUMEZCVHl4RlFVRkZMRmRCUVZNc1JVRkJSU3hUUVVGUExFTkJRVU1zUlVGQlJTeE5RVUZOTEVsQlFVY3NSVUZCUlN4UFFVRlBPMEZCUVZFc2RVSkJRVWNzVVVGQlVTeEZRVUZGTEU5QlFVOHNUVUZCVFN4RFFVRkRPMEZCUVVVc2JVSkJRVWNzUlVGQlJUdEJRVUZGTEc5Q1FVRkZMRXRCUVVjc1QwRkJTeXhMUVVGSExFMUJRVWNzUlVGQlJTeFpRVUZWTEUxQlFVY3NUVUZCU1N4TFFVRkhMRWRCUVVjc1JVRkJSU3hIUVVGRkxFZEJRVWNzUTBGQlF5eEhRVUZGTEV0QlFVY3NSMEZCUnl4RlFVRkZPMEZCUVVFc1kwRkJSenRCUVVGQkxGVkJRVU03UVVGQlF5eGhRVUZITzBGQlIzQmpMR2xDUVVGUExGVkJRVlU3UVVGQlFTeFJRVU51UWp0QlFVRkJMRTFCUlVFc1IwRkJSenRCUVVWSUxGVkJRVWtzVDBGQlR5eFpRVUZaTEZsQlFWa3NUMEZCVHl4WFFVRlhPMEZCUTI1RUxHVkJRVThzVlVGQlZUdEJRVUZCTEdWQlExWXNUMEZCVHl4WFFVRlhMR05CUVdNc1QwRkJUeXhMUVVGTE8wRkJRMjVFTEdWQlFVOHNRMEZCUXl4SFFVRkhMRTFCUVUwc1pVRkJaVHRCUVVGQk8wRkJRVUU3T3p0QlEzSkZiRU03UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVRzN08wRkRRVThzVFVGQlRTeFBRVUZQT3pzN1FVTlZjRUlzVFVGQlNUdEJRVVZLTEUxQlFVa3NUVUZCT0VJN1FVRkRhRU1zY1VKQlFXbENPMEZCUVVFc1JVRkRia0lzVDBGQlR6dEJRVU5NTEhGQ1FVTkpMRTlCUVRSQ0xFOUJRVzFETzBGQlFVRXNSVUZEY2tVN1FVRkZRU3hOUVVGTkxIbENRVUZwUlN4UFFVTnNSU3hQUVVFMFFpdzRRa0ZEUVN4UFFVTTNRanRCUVVkS0xFMUJRVWs3UVVGRFNpeE5RVUZKTEdOQlFXTTdRVUZEYkVJc1RVRkJTU3hsUVVGbE8wRkJRMjVDTEUxQlFVa3NWVUZCVlR0QlFVVmtMRTFCUVUwc2VVSkJRWGxDTEVOQlFVTXNaVUZCWjBNN1FVRkZPVVFzVVVGQlNTeGxRVUZsTEVkQlFVYzdRVUZEY0VJc1lVRkJUenRCUVVGQkxFbEJRMVE3UVVGSFFTeFJRVUZKTEU5QlFVOHNjMEpCUVhOQ0xHRkJRV0U3UVVGRE5VTXNWVUZCU1N4UFFVRlBMRk5CUVZNc1pVRkJaU3hEUVVGRExFdEJRVXNzY1VKQlFYRkNPMEZCUlRWRUxHZENRVUZSTzBGQlFVRXNWVUZEU2l4dFEwRkJiVU1zWVVGRGJrTTdRVUZCUVN4UlFVTnJSVHRCUVVGQkxFMUJRM2hGTzBGQlEwRXNZVUZCVHp0QlFVRkJMRWxCUTFRN1FVRkhRU3hSUVVGSkxFOUJRVThzV1VGQldTeGxRVUZsTEZGQlFWRXNXVUZCV1N4UlFVRlJMRk5CUVZNc1RVRkJUVHRCUVVVdlJTeGpRVUZSTzBGQlFVRXNVVUZEU2l4dFEwRkJiVU1zWVVGRGJrTTdRVUZCUVN4TlFVTTBSVHRCUVVGQkxFbEJRMnhHTzBGQlJVRXNVVUZCU1R0QlFVZEdMRlZCUVVrc1QwRkJUeXh0UWtGQmJVSXNZVUZCWVR0QlFVTjZReXhaUVVGSkxHVkJRV1VzUlVGQlJTeE5RVUZOTEZsQlFWa3NTVUZCU1N4clFrRkJhMElzUTBGQlF5eERRVUZETzBGQlFVRXNUVUZEYWtVN1FVRkpRU3hoUVVGUExGbEJRVmtzVTBGQlV5eEpRVUZKTEZkQlFWYzdRVUZCUVN4UlFVTjZRenRCUVVGQkxGRkJRVWM3UVVGQlFTeFJRVUZKTzBGQlFVRXNVVUZCU3p0QlFVRkJMRkZCUVVzN1FVRkJRU3hSUVVGSE8wRkJRVUVzVVVGQlNUdEJRVUZCTEZGQlFVazdRVUZCUVN4UlFVRkhPMEZCUVVFc1VVRkJSenRCUVVGQkxGRkJRVWM3UVVGQlFTeFJRVUZKTzBGQlFVRXNVVUZCU1R0QlFVRkJMRkZCUVVzN1FVRkJRU3hSUVVGSk8wRkJRVUVzVVVGQlJ6dEJRVUZCTEZGQlFVYzdRVUZCUVN4UlFVRkpPMEZCUVVFc1VVRkJSenRCUVVGQkxGRkJRMjVGTzBGQlFVRXNVVUZCUnp0QlFVRkJMRkZCUVVrN1FVRkJRU3hSUVVGTE8wRkJRVUVzVVVGQlN6dEJRVUZCTEZGQlFVYzdRVUZCUVN4UlFVRkpPMEZCUVVFc1VVRkJTVHRCUVVGQkxGRkJRVWM3UVVGQlFTeFJRVUZITzBGQlFVRXNVVUZCUnp0QlFVRkJMRkZCUVVrN1FVRkJRU3hSUVVGSk8wRkJRVUVzVVVGQlN6dEJRVUZCTEZGQlFVazdRVUZCUVN4UlFVRkhPMEZCUVVFc1VVRkJSenRCUVVGQkxGRkJRVWs3UVVGQlFTeE5RVU5zUlN4RFFVRkRMRU5CUVVNN1FVRkJRU3hKUVVOS0xGTkJRVk1zUjBGQlJ6dEJRVU5XTEdGQlFVODdRVUZCUVN4SlFVTlVPMEZCUVVFc1JVRkRSanRCUVVWQkxFMUJRVTBzYTBKQlFXdENMRTFCUVdVN1FVRkRja01zVVVGQlNUdEJRV1ZHTEdGQlFVOHNXVUZCV1N4VFFVRlRMRWxCUVVrc1YwRkJWenRCUVVGQkxGRkJRM3BETzBGQlFVRXNVVUZCU3p0QlFVRkJMRkZCUVVrN1FVRkJRU3hSUVVGTE8wRkJRVUVzVVVGQlN6dEJRVUZCTEZGQlFVYzdRVUZCUVN4UlFVRkhPMEZCUVVFc1VVRkJSenRCUVVGQkxGRkJRVWM3UVVGQlFTeFJRVUZITzBGQlFVRXNVVUZCUnp0QlFVRkJMRkZCUVVjN1FVRkJRU3hSUVVGSk8wRkJRVUVzVVVGQlJ6dEJRVUZCTEZGQlFVYzdRVUZCUVN4UlFVRkhPMEZCUVVFc1VVRkJSenRCUVVGQkxGRkJRVWM3UVVGQlFTeFJRVUZITzBGQlFVRXNVVUZCU1R0QlFVRkJMRkZCUVVrN1FVRkJRU3hSUVVGTE8wRkJRVUVzVVVGQlN6dEJRVUZCTEZGQlFVYzdRVUZCUVN4UlFVRkpPMEZCUVVFc1VVRkRka1k3UVVGQlFTeFJRVUZMTzBGQlFVRXNVVUZCU1R0QlFVRkJMRkZCUVVzN1FVRkJRU3hSUVVGTE8wRkJRVUVzVVVGQlJ6dEJRVUZCTEZGQlFVYzdRVUZCUVN4UlFVRkhPMEZCUVVFc1VVRkJSenRCUVVGQkxGRkJRVWM3UVVGQlFTeFJRVUZITzBGQlFVRXNVVUZCUnp0QlFVRkJMRkZCUVVrN1FVRkJRU3hSUVVGSE8wRkJRVUVzVVVGQlJ6dEJRVUZCTEZGQlFVYzdRVUZCUVN4UlFVRkhPMEZCUVVFc1VVRkJSenRCUVVGQkxGRkJRVWM3UVVGQlFTeFJRVUZKTzBGQlFVRXNVVUZCU1R0QlFVRkJMRkZCUVVzN1FVRkJRU3hSUVVGTE8wRkJRVUVzVVVGQlJ6dEJRVUZCTEZGQlFVazdRVUZCUVN4TlFVTjZSaXhEUVVGRExFTkJRVU03UVVGQlFTeEpRVU5LTEZOQlFWTXNSMEZCUnp0QlFVTldMR0ZCUVU4N1FVRkJRU3hKUVVOVU8wRkJRVUVzUlVGRFJqdEJRVVZCTEUxQlFVMHNhMEpCUVd0Q0xFTkJRVU1zVTBGQmEwSXNaVUZCZDBJN1FVRkRha1VzVVVGQlNTeFRRVUZUTzBGQlExZ3NWVUZCU1N4TlFVRTRRanRCUVVOb1F5eGxRVUZQTzBGQlFVRXNUVUZEVkR0QlFVTkJMR0ZCUVU4c1lVRkJZU3huUTBGQlowTTdRVUZCUVN4SlFVTjBSQ3hQUVVGUE8wRkJRMHdzWVVGQlR5eGhRVUZoTERKQ1FVRXlRanRCUVVGQkxFbEJRMnBFTzBGQlFVRXNSVUZEUmp0QlFVVlBMRTFCUVUwc2QwSkJRWGRDTEU5QlFVMHNWVUZCSzBNN1FVRkRlRVlzVVVGQlNTeGhRVUZoTzBGQlEyWXNZVUZCVHl4UlFVRlJMRkZCUVZFN1FVRkJRU3hKUVVONlFqdEJRVU5CTEZGQlFVa3NZMEZCWXp0QlFVTm9RaXhaUVVGTkxFbEJRVWtzVFVGQlRTeDFSRUZCZVVRN1FVRkJRU3hKUVVNelJUdEJRVU5CTEZGQlFVa3NVMEZCVXp0QlFVTllMRmxCUVUwc1NVRkJTU3hOUVVGTkxHOUVRVUZ6UkR0QlFVRkJMRWxCUTNoRk8wRkJSVUVzYlVKQlFXVTdRVUZIWml4VlFVRk5MRlZCUVZVc1RVRkJUVHRCUVVOMFFpeFZRVUZOTEdGQlFXRXNUVUZCVFR0QlFVTjZRaXhWUVVGTkxFOUJRVThzVFVGQlRUdEJRVVZ1UWl4VlFVRk5MR0ZCUVdFc2RVSkJRWFZDTEZWQlFWVTdRVUZEY0VRc1ZVRkJUU3hWUVVGVkxGRkJRVkVzWjBKQlFXZENPMEZCUlhoRExGVkJRVTBzV1VGQldTeE5RVUZOTzBGQlEzaENMRlZCUVUwc2NVSkJRWEZDTEU5QlFVOHNZMEZCWXl4WFFVRlhMRmxCUVZrN1FVRkRka1VzVlVGQlRTeGxRVUZsTEdkQ1FVRm5RaXhUUVVGVExGVkJRVlU3UVVGRGVFUXNWVUZCVFN4dFFrRkJiVUlzVDBGQlR5eGpRVUZqTEZkQlFWY3NWVUZCVlN4WlFVRlpMRWxCUVVrN1FVRkZia1lzVVVGQlNTeFpRVUZaTzBGQlJXaENMRlZCUVUwc1VVRkJPRUlzUTBGQlF6dEJRVWR5UXl4UlFVRkpMRlZCUVZVc1IwRkJSenRCUVVObUxGbEJRVTBzUzBGQlN5eEpRVUZKTEZGQlFWRXNRMEZCUXl4WlFVRlpPMEZCUTJ4RExHMUNRVUZYTEUxQlFVMDdRVUZEWml4elFrRkJXVHRCUVVOYUxHdENRVUZSTzBGQlFVRXNVVUZEVml4SFFVRkhMRTlCUVU4N1FVRkJRU3hOUVVOYUxFTkJRVU1zUTBGQlF6dEJRVUZCTEVsQlEwbzdRVUZIUVN4VlFVRk5MRXRCUVVzc1NVRkJTU3hSUVVGUkxFTkJRVU1zVTBGQlV5eFhRVUZYTzBGQlF6RkRMRmxCUVUwc1ZVRkJWU3hoUVVGaExIbENRVUY1UWp0QlFVTjBSQ3haUVVGTkxGTkJRV2xETzBGQlFVRXNVVUZEY2tNc1dVRkJXU3hEUVVGRExGVkJRV3RDTEc5Q1FVRTBRanRCUVVONlJDeGpRVUYxUXl4alFVRmpMRk5CUVZNc1UwRkJVeXhaUVVGWkxFdEJReTlGTEU5QlFVOHNVMEZCVXl4aFFVRmhPMEZCUXk5Q0xHMUNRVUZQTEVsQlFVa3NaMEpCUVdkQ0xFbEJRVWs3UVVGQlFTeGpRVU16UWp0QlFVRkJPMEZCUVVFN1FVRkJRU3huUWtGSFJUdEJRVUZCTEdOQlEwWTdRVUZCUVN4alFVTkJMRVZCUVVNc1RVRkJUU3hyUWtGQmFVSTdRVUZCUVN4WlFVRkRMRU5CUVVNN1FVRkJRU3hWUVVOb1F6dEJRVVZCTEdOQlFVa3NVMEZCVXl4VFFVRlRMRTlCUVU4c1IwRkJSenRCUVVNNVFpeG5Ra0ZCU1N4clFrRkJhMEk3UVVGRGNFSXNjVUpCUVU4N1FVRkJRU3haUVVOVU8wRkJSVUVzYTBKQlFVMHNVMEZCVXl4elFrRkJjMEk3UVVGRmNrTXNaMEpCUVVrc1QwRkJORUk3UVVGRE9VSXNhMEpCUVVrc2FVSkJRV2xDTEhOQ1FVRnpRanRCUVVONlF5eDFRa0ZCVHl4VFFVRlRPMEZCUVVFc1kwRkRiRUlzVjBGQlZ5eHBRa0ZCYVVJc0swSkJRU3RDTzBGQlEzcEVMSFZDUVVGUExGTkJRVk03UVVGQlFTeGpRVU5zUWp0QlFVRkJMRmxCUTBZN1FVRkZRU3h0UWtGQlR5eFRRVUZUTzBGQlFVRXNWVUZEYkVJN1FVRkZRU3hwUWtGQlR5eHJRa0ZCYTBJN1FVRkJRU3hSUVVNelFqdEJRVUZCTEUxQlEwWTdRVUZGUVN4VlFVRjFReXhaUVVGWk8wRkJRMnBFTEdWQlFVOHNZVUZCWVR0QlFVTndRaXhaUVVGSkxFOUJRVThzVTBGQlV5eGhRVUZoTzBGQlF5OUNMR2xDUVVGUExITkNRVUV5UWl4TFFVRkxMRmRCUVZjc2MwSkJRWE5DTzBGQlFVRXNVVUZETVVVc1QwRkJUenRCUVVOTUxHZENRVUZOTEcxQ1FVRnRRaXgxUWtGQmRVSXNVVUZCVVN4VFFVRlRMRU5CUVVNN1FVRkRiRVVzYVVKQlFVOHNjMEpCUVhOQ0xFbEJRVWtzUzBGQlN5eERRVUZETEdkQ1FVRm5RaXhIUVVGSExFVkJRVU1zVFVGQlRTeHJRa0ZCYVVJc1EwRkJRenRCUVVGQkxGRkJRM0pHTzBGQlFVRXNUVUZEUmp0QlFVVkJMR05CUVZFc1RVRkJUU3hGUVVGRk8wRkJRVUU3UVVGQlFTeFJRVVZhTEZsQlFWVTdRVUZEVWl4NVFrRkJaVHRCUVVObUxIZENRVUZqTzBGQlEyUXNhVUpCUVU4N1FVRkRVQ3hyUWtGQlVUdEJRVUZCTEZGQlExWTdRVUZCUVR0QlFVRkJMRkZCUlVFc1EwRkJReXhUUVVGVE8wRkJRMUlzZVVKQlFXVTdRVUZEWml4dlFrRkJWVHRCUVVOV0xHbENRVUZQTEVsQlFVazdRVUZCUVN4UlFVTmlPMEZCUVVFc1RVRkJRenRCUVVGQkxFbEJRMUFzUTBGQlF5eERRVUZETzBGQlJVWXNWVUZCVFN4UlFVRlJMRXRCUVVzc1MwRkJTenRCUVVWNFFpeFJRVUZKTEZkQlFWYzdRVUZEWWl4WlFVRk5MRWxCUVVrc1RVRkJUU3d5UkVGQk1rUXNUMEZCVHl4SlFVRkpPMEZCUVVFc1NVRkRlRVk3UVVGQlFTeEZRVU5HTzBGQlJVOHNUVUZCVFN4alFVRmpMRTFCUVhGQ08wRkJRemxETEZGQlFVa3NaVUZCWlN4TlFVRk5PMEZCUTNaQ0xHRkJRVTg3UVVGQlFTeEpRVU5VTzBGQlJVRXNWVUZCVFN4SlFVRkpMRTFCUVUwc2NVTkJRWEZETzBGQlFVRXNSVUZEZGtRN096dEJReTlPVHl4TlFVRk5MR3RDUVVGclFpeERRVUZETEUxQlFXTXNWMEZCTmtJN1FVRkRla1VzVlVGQlRVTXNVVUZCVHl4WlFVRlpPMEZCUlhwQ0xGVkJRVTBzWVVGQllVRXNUVUZCU3l4blFrRkJaMElzU1VGQlNTeEpRVUZKTzBGQlEyaEVMRlZCUVUwc1lVRkJZVUVzVFVGQlN5eFJRVUZSTEZWQlFWVTdRVUZETVVNc1NVRkJRVUVzVFVGQlN5eGhRVUZoTEUxQlFVMHNXVUZCV1N4VlFVRlZPMEZCUXpsRExGZEJRVThzUzBGQlN5eFZRVUZWTzBGQlJYUkNMRmRCUVU4N1FVRkJRU3hGUVVOVU8wRkJUVThzVFVGQlRTeHpRa0ZEVkN4RFFVRkRMRk5CUVd0RExGRkJRV2RDTEUxQlEyeEVMRmxCUVhWRE8wRkJRM1JETEZGQlFVa3NUMEZCVHl4WFFVRlhMRmxCUVZrc1dVRkJXU3hOUVVGTk8wRkJRMnhFTEZWQlFVa3NTMEZCU3l4SlFVRkpMRTlCUVU4c1IwRkJSenRCUVVOeVFpeGpRVUZOTEVsQlFVa3NUVUZCVFN3clFrRkJLMEk3UVVGQlFTeE5RVU5xUkN4UFFVRlBPMEZCUTB3c1lVRkJTeXhKUVVGSkxFOUJRVTg3UVVGQlFTeE5RVU5zUWp0QlFVRkJMRWxCUTBZN1FVRkZRU3hYUVVGUExGRkJRVkVzVDBGQlR5eEZRVUZGTEZGQlFWRXNRMEZCUXl4RFFVRkRMRXRCUVVzc1MwRkJTeXhOUVVGTk8wRkJRMmhFTEZsQlFVMHNUMEZCVVN4VFFVRlZMRk5CUVZNc1RVRkJUVHRCUVVOMlF5eFZRVUZKTEU5QlFVOHNWVUZCVlN4VlFVRlZPMEZCUXpkQ0xEUkNRVUZ2UWl4UFFVRnJReXhQUVVGUExFdEJRVXNzVFVGQlRTeFBRVUZQTzBGQlFVRXNUVUZEYWtZc1YwRkJWeXhQUVVGUExGVkJRVlVzV1VGQldTeFBRVUZQTEZWQlFWVXNWVUZCVlR0QlFVTnFSU3huUWtGQlVTeE5RVUZOTEUxQlFVMHNVMEZCVXl4RFFVRkRPMEZCUVVFc1RVRkRhRU1zVjBGQlZ5eFBRVUZQTEZWQlFWVXNWMEZCVnp0QlFVTnlReXhuUWtGQlVTeE5RVUZQTEZGQlFWTXNUVUZCVFN4SFFVRkhPMEZCUVVFc1RVRkRia01zVDBGQlR6dEJRVU5NTEdOQlFVMHNTVUZCU1N4TlFVRk5MRzFEUVVGdFF5eFBRVUZQTEV0QlFVc3NSVUZCUlR0QlFVRkJMRTFCUTI1Rk8wRkJRVUVzU1VGRFJpeERRVUZETzBGQlFVRXNSVUZEU0R0QlFVMUhMRTFCUVUwc2FVSkJRV2xDTEVOQlFVTXNXVUZCTUVJN1FVRkRka1FzVlVGQlRVRXNVVUZCVHl4WlFVRlpPMEZCUlhwQ0xGVkJRVTBzVVVGQlVVRXNUVUZCU3l4VlFVRlZPMEZCUXpkQ0xGRkJRVWs3UVVGRFJpeFpRVUZOTEdWQlFXVkJMRTFCUVVzc1YwRkJWeXhEUVVGRE8wRkJRM1JETEUxQlFVRkJMRTFCUVVzc2FVSkJRV2xDTEdOQlFXTXNaVUZCWlN4RFFVRkRPMEZCUTNCRUxGbEJRVTBzV1VGQldVRXNUVUZCU3l4UFFVRlBMR1ZCUVdVc1EwRkJRenRCUVVNNVF5eFpRVUZOTEhOQ1FVRnpRa0VzVFVGQlN5eFJRVUZSTEdWQlFXVXNTVUZCU1N4RFFVRkRPMEZCUXpkRUxGbEJRVTBzWlVGQlpTeHpRa0ZCYzBKQkxFMUJRVXNzWVVGQllTeHRRa0ZCYlVJc1NVRkJTVHRCUVVOd1JpeFpRVUZOTEVsQlFVa3NUVUZCVFN4SFFVRkhMRTlCUVU4c1owSkJRV2RDTEZOQlFWTXNiMEpCUVc5Q0xGbEJRVmtzUlVGQlJUdEJRVUZCTEVsQlEzWkdMRlZCUVVVN1FVRkRRU3hOUVVGQlFTeE5RVUZMTEdGQlFXRXNTMEZCU3p0QlFVRkJMRWxCUTNwQ08wRkJRVUVzUlVGRFJqczdPMEZEZGtSUExFMUJRVTBzWjBKQlFXZENMRU5CUVVNc1dVRkJOa1E3UVVGRGVrWXNWVUZCVFVNc1VVRkJUeXhaUVVGWk8wRkJRM3BDTEZGQlFVa3NiVUpCUVcxQ08wRkJRM1pDTEZWQlFVMHNVMEZCYlVJc1EwRkJRenRCUVVVeFFpeFZRVUZOTEdGQlFUQkRMRmRCUVZjc1EwRkJRenRCUVVVMVJDeFJRVUZKTzBGQlEwWXNWVUZCU1N4VFFVRlRMSEZDUVVGeFFpeFJRVUZYTzBGQlF6TkRMRzFDUVVGWExHMUNRVUZ0UWp0QlFVRkJMRTFCUTJoRExGZEJRMGtzVDBGQlR5eFJRVUZSTEhGQ1FVRnhRaXhaUVVGWkxFTkJRVU1zVDBGQlR5eFZRVUZWTEZGQlFWRXNaMEpCUVdkQ0xFdEJRekZHTEZGQlFWRXNiVUpCUVcxQ0xFdEJRVXNzVVVGQlVTeHRRa0ZCYlVJc1IwRkJSenRCUVVOb1JTeGpRVUZOTEVsQlFVa3NUVUZCVFN4eFEwRkJjVU1zVVVGQlVTeG5Ra0ZCWjBJc1JVRkJSVHRCUVVGQkxFMUJRMnBHTzBGQlJVRXNWVUZCU1N4VFFVRlRMSE5DUVVGelFpeFJRVUZYTzBGQlF6VkRMRzFDUVVGWExHOUNRVUZ2UWp0QlFVRkJMRTFCUTJwRExGZEJRVmNzVDBGQlR5eFJRVUZSTEhOQ1FVRnpRaXhaUVVGWkxFTkJRVU1zVDBGQlR5eFZRVUZWTEZGQlFWRXNhVUpCUVdsQ0xFZEJRVWM3UVVGRGVFY3NZMEZCVFN4SlFVRkpMRTFCUVUwc2NVTkJRWEZETEZGQlFWRXNhVUpCUVdsQ0xFVkJRVVU3UVVGQlFTeE5RVU5zUmp0QlFVVkJMRlZCUVVrc1UwRkJVeXhqUVVGakxGRkJRVmM3UVVGRGNFTXNiVUpCUVZjc1dVRkJXVHRCUVVGQkxFMUJRM3BDTzBGQlJVRXNWVUZCU1N4blFrRkJaMEk3UVVGRGNFSXNWVUZCU1N4VFFVRlRMRkZCUVZFc1VVRkJWenRCUVVNNVFpeDNRa0ZCWjBJc1owSkJRV2RDTEZGQlFWRXNTMEZCU3l4TlFVRk5PMEZCUVVFc1RVRkRja1E3UVVGRlFTeDVRa0ZCYlVKQkxFMUJRVXM3UVVGQlFTeFJRVU53UWl4WFFVRlhPMEZCUVVFc1VVRkJiVUlzVjBGQlZ6dEJRVUZCTEZGQlFXOUNMRU5CUVVNc1EwRkJReXhYUVVGWE8wRkJRVUVzVVVGQldUdEJRVUZCTEUxQlFXRTdRVUZEZGtjc1ZVRkJTU3h4UWtGQmNVSXNSMEZCUnp0QlFVTXhRaXgxUWtGQlpTd3lRa0ZCTkVJN1FVRkJRU3hOUVVNM1F6dEJRVVZCTEZWQlFVa3NVMEZCVXl4VlFVRlZMRkZCUVZjN1FVRkRhRU1zTkVKQlFXOUNMRkZCUVZFc1QwRkJUeXhKUVVGSkxHOUNRVUZKTEZGQlFXbERMRWRCUVVjc1EwRkJReXhMUVVGTExGVkJRVlU3UVVGRE4wWXNaMEpCUVUwc1owSkJRV2RDTEdkQ1FVRm5RaXhMUVVGTExFMUJRVTA3UVVGRGFrUXNaMEpCUVUwc2EwSkJRV3RDTEdkQ1FVRm5RaXhQUVVGUExFMUJRVTA3UVVGRmNrUXNZMEZCU1VFc1RVRkJTeXh6UWtGQmMwSXNhMEpCUVd0Q0xHVkJRV1VzWlVGQlpTeE5RVUZOTEVkQlFVYzdRVUZEZEVZc01rSkJRV1VzYVVOQlFXbERMRWRCUVVjc1RVRkJUU3hMUVVGTExFZEJRVWM3UVVGQlFTeFZRVU51UlR0QlFVRkJMRkZCUTBZc1EwRkJRenRCUVVGQkxFMUJRMGc3UVVGRlFTeGhRVUZQTEVOQlFVTXNhMEpCUVd0Q0xFMUJRVTA3UVVGQlFTeEpRVU5zUXl4VFFVRlRMRWRCUVVjN1FVRkRWaXhWUVVGSkxIRkNRVUZ4UWl4SFFVRkhPMEZCUXpGQ0xGRkJRVUZCTEUxQlFVc3NjMEpCUVhOQ0xHZENRVUZuUWp0QlFVRkJMRTFCUXpkRE8wRkJRMEVzWVVGQlR5eFJRVUZSTEZkQlFWTkJMRTFCUVVzc1RVRkJUU3hMUVVGTExFTkJRVU03UVVGRGVrTXNXVUZCVFR0QlFVRkJMRWxCUTFJN1FVRkJRU3hGUVVOR096czdRVU40UkVFc1RVRkJUU3d5UWtGQk1rSXNRMEZCUXl3eVFrRkJiVVE3UVVGRGJrWXNXVUZCVVN4M1FrRkJkMEk3UVVGQlFTeE5RVU01UWl4TFFVRkxPMEZCUTBnc1pVRkJUenRCUVVGQkxFMUJRMVFzUzBGQlN6dEJRVU5JTEdWQlFVODdRVUZCUVN4TlFVTlVMRXRCUVVzN1FVRkRTQ3hsUVVGUE8wRkJRVUVzVFVGRFZDeExRVUZMTzBGQlEwZ3NaVUZCVHp0QlFVRkJMRTFCUTFRN1FVRkRSU3hqUVVGTkxFbEJRVWtzVFVGQlRTeDVRMEZCZVVNc2MwSkJRWE5DTEVWQlFVVTdRVUZCUVN4SlFVTnlSanRCUVVGQkxFVkJRMFk3UVVGRlFTeE5RVUZOTEcxQ1FVRnRRaXhEUVVGRExHdENRVUZ0UkR0QlFVTXpSU3haUVVGUkxHVkJRV1U3UVVGQlFTeE5RVU55UWl4TFFVRkxPMEZCUTBnc1pVRkJUenRCUVVGQkxFMUJRMVFzUzBGQlN6dEJRVU5JTEdWQlFVODdRVUZCUVN4TlFVTlVPMEZCUTBVc1kwRkJUU3hKUVVGSkxFMUJRVTBzSzBKQlFTdENMR0ZCUVdFc1JVRkJSVHRCUVVGQkxFbEJRMnhGTzBGQlFVRXNSVUZEUmp0QlFVVkJMRTFCUVUwc2RVSkJRWFZDTEVOQlFVTXNXVUZCYlVRN1FVRkRMMFVzVVVGQlNTeERRVUZETEZGQlFWRXNUMEZCVHp0QlFVTnNRaXhqUVVGUkxGRkJRVkVzUTBGQlF6dEJRVUZCTEVsQlEyNUNPMEZCUTBFc1VVRkJTU3hEUVVGRExGRkJRVkVzVFVGQlRTeFRRVUZUTzBGQlF6RkNMR05CUVZFc1RVRkJUU3hWUVVGVkxFTkJRVU03UVVGQlFTeEpRVU16UWp0QlFVTkJMRlZCUVUwc1ZVRkJWU3hSUVVGUkxFMUJRVTA3UVVGRE9VSXNVVUZCU1N4RFFVRkRMRkZCUVZFc09FSkJRVGhDTzBGQlJYcERMR05CUVZFc0swSkJRU3RDTzBGQlFVRXNTVUZEZWtNN1FVRkhRU3hSUVVGSkxGRkJRVkVzYzBKQlExSXNVVUZCVVN4dFFrRkJiVUlzUzBGQlN5eFRRVUZQTEU5QlFVOHNUMEZCVHl4WFFVRlhMRXRCUVVzc1IwRkJSeXhWUVVGVkxGRkJRVkVzUjBGQlJ6dEJRVU12Uml4alFVRlJMRzFDUVVGdFFqdEJRVUZCTEVsQlF6ZENPMEZCUVVFc1JVRkRSanRCUVVWQkxFMUJRVTBzZDBKQlEwWXNRMEZCUXl4elFrRkJPRUlzYjBKQlF6bENMRmRCUVRKQ08wRkJRekZDTEdWQlFWY3NUVUZCVFN4dlFrRkJiMEk3UVVGRGJrTXNWVUZCU1N4VFFVRlRMRTlCUVU4c1QwRkJUeXhYUVVGWExFdEJRVXNzUjBGQlJ6dEJRVWM1UXl4alFVRlJMRkZCUVZFN1FVRkJRU3hSUVVOa0xFdEJRVXM3UVVGRFNDeHRRa0ZCVXp0QlFVTlVMR05CUVVrc1QwRkJUeXhQUVVGUExGVkJRVlU3UVVGRE1VSXNhMEpCUVUwc1pVRkJaVHRCUVVOeVFpeG5Ra0ZCU1N4alFVRmpMRmxCUVZrN1FVRkROVUlzYjBKQlFVMHNaMEpCUVdkQ0xHZENRVUZuUWl4alFVRmpMRTFCUVUwN1FVRkRNVVFzYjBKQlFVMHNhMEpCUVd0Q0xHZENRVUZuUWl4aFFVRmhMRmxCUVZrc1RVRkJUVHRCUVVOMlJTeHJRa0ZCU1N4WlFVRlpMRVZCUVVVc01FSkJRVEJDTEhOQ1FVRnpRaXhsUVVGbExHVkJRV1VzVFVGRE5VWXNSMEZCUnp0QlFVTk1MQ3RDUVVGbExHOUVRVUZ2UkN4aFFVRmhMRlZCUVZVc1IwRkJSenRCUVVGQkxHTkJReTlHTzBGQlFVRXNXVUZEUmp0QlFVTkJMR2RDUVVGSkxHTkJRV01zV1VGQldUdEJRVU0xUWl4clFrRkJTU3hoUVVGaExHRkJRV0U3UVVGRk9VSXNhMEpCUVVrc1QwRkJUeXhqUVVGakxGbEJRVmtzUTBGQlF5eFBRVUZQTEZWQlFWVXNWVUZCVlN4TFFVRkxMR0ZCUVdFc1IwRkJSenRCUVVOd1JpdzJRa0ZCWVR0QlFVRkJMR05CUTJZN1FVRkRRU3h2UWtGQlRTeG5Ra0ZCWjBJc1owSkJRV2RDTEdOQlFXTXNUVUZCVFR0QlFVTXhSQ3h2UWtGQlRTeHJRa0ZCYTBJc1owSkJRV2RDTEZkQlFWY3NVMEZCVXl4SFFVRkhMRTFCUVUwN1FVRkRja1VzYTBKQlFVa3NXVUZCV1N4RlFVRkZMREJDUVVFd1FpeHpRa0ZCYzBJc1pVRkJaU3hsUVVGbExFMUJRelZHTEVkQlFVYzdRVUZEVEN3clFrRkJaU3h2UkVGQmIwUXNZVUZCWVN4VlFVRlZMRWRCUVVjN1FVRkJRU3hqUVVNdlJqdEJRVUZCTEZsQlEwWTdRVUZEUVN4blFrRkJTU3hqUVVGakxHbENRVUZwUWp0QlFVTnFReXh2UWtGQlRTeG5Ra0ZCWjBJc1owSkJRV2RDTEcxQ1FVRnRRaXhOUVVGTk8wRkJReTlFTEc5Q1FVRk5MR3RDUVVGclFpeG5Ra0ZCWjBJc1lVRkJZU3hwUWtGQmFVSXNUVUZCVFR0QlFVTTFSU3hyUWtGQlNTeFpRVUZaTEVWQlFVVXNNRUpCUVRCQ0xITkNRVUZ6UWl4bFFVRmxMR1ZCUVdVc1RVRkROVVlzUjBGQlJ6dEJRVU5NTzBGQlFVRXNhMEpCUTBrc2VVUkJRWGxFTEdGQlFXRXNaVUZCWlR0QlFVRkJMR2RDUVVGSE8wRkJRVUVzWTBGRE9VWTdRVUZCUVN4WlFVTkdPMEZCUVVFc1ZVRkRSanRCUVVOQk8wRkJRVUVzVVVGRFJpeExRVUZMTzBGQlEwZ3NiVUpCUVZNN1FVRkRWQ3hqUVVGSkxFOUJRVThzVDBGQlR5eFZRVUZWTzBGQlF6RkNMR3RDUVVGTkxHZENRVUZuUWp0QlFVTjBRaXhuUWtGQlNTeGxRVUZsTEdsQ1FVRnBRanRCUVVOc1F5eHJRa0ZCU1N4alFVRmpMRzlDUVVGdlFpeFZRVUZWTEdOQlFXTXNiMEpCUVc5Q0xGRkJRVkU3UVVGRGVFWXNjMEpCUVUwc1NVRkJTU3hOUVVGTkxHOUVRVUZ2UkN4alFVRmpMR1ZCUVdVc1JVRkJSVHRCUVVGQkxHTkJRM0pITzBGQlEwRXNiMEpCUVUwc1owSkJRV2RDTEdkQ1FVRm5RaXh0UWtGQmJVSXNUVUZCVFR0QlFVTXZSQ3h2UWtGQlRTeHJRa0ZCYTBJc1owSkJRV2RDTEdOQlFXTXNhVUpCUVdsQ0xFMUJRVTA3UVVGRE4wVXNhMEpCUVVrc1dVRkJXU3hGUVVGRkxEQkNRVUV3UWl4elFrRkJjMElzWlVGQlpTeGxRVUZsTEUxQlF6VkdMRWRCUVVjN1FVRkRURHRCUVVGQkxHdENRVU5KTEhsRVFVRjVSQ3hqUVVGakxHVkJRV1U3UVVGQlFTeG5Ra0ZCUnp0QlFVRkJMR05CUXk5R08wRkJRVUVzV1VGRFJqdEJRVUZCTEZWQlEwWTdRVUZEUVR0QlFVRkJMRkZCUTBZc1MwRkJTenRCUVVGQkxGRkJRMHdzUzBGQlN6dEJRVU5JTzBGQlFVRXNVVUZEUmp0QlFVTkZMR2RDUVVGTkxFbEJRVWtzVFVGQlRTeHhRMEZCY1VNc1RVRkJUU3hGUVVGRk8wRkJRVUVzVFVGRGFrVTdRVUZGUVN4WlFVRk5MRzFDUVVGdFFpeG5Ra0ZCWjBJc1VVRkJVU3hOUVVGTk8wRkJRM1pFTEZWQlFVa3NXVUZCV1N4RlFVRkZMRFJDUVVFMFFpeHpRa0ZCYzBJc1owSkJRV2RDTEUxQlFVMHNSMEZCUnp0QlFVTXpSaXgxUWtGQlpTeHZRMEZCYjBNc1RVRkJUU3hIUVVGSE8wRkJRVUVzVFVGRE9VUTdRVUZCUVN4SlFVTkdPMEZCUVVFc1JVRkRSanRCUVVWSExFMUJRVTBzYjBKQlFXOUNMRU5CUVVNc1dVRkJhMFU3UVVGRGJFY3NWVUZCVFVNc1VVRkJUeXhaUVVGWk8wRkJRM3BDTEZGQlFVa3NkVUpCUVhWQ08wRkJRek5DTEZWQlFVMHNVMEZCYlVJc1EwRkJRenRCUVVVeFFpeFZRVUZOTEdsQ1FVRnJSQ3hYUVVGWExFTkJRVU03UVVGRGNFVXNlVUpCUVhGQ0xHTkJRV003UVVGRmJrTXNVVUZCU1R0QlFVTkdMRmxCUVUwc2VVSkJRWGxDTEhsQ1FVRjVRaXhsUVVGbExEQkNRVUV3UWl4TFFVRkxPMEZCUTNSSExGbEJRVTBzWjBKQlFXZENMR2xDUVVGcFFpeGxRVUZsTEdsQ1FVRnBRaXhaUVVGWk8wRkJRMjVHTEZsQlFVMHNhMEpCUTBZc1QwRkJUeXhsUVVGbExGVkJRVlVzVjBGQlZ5eG5Ra0ZCWjBJc1pVRkJaU3hQUVVGUExFMUJRVTBzU1VGQlNUdEJRVVV2Uml4WlFVRk5MRzFDUVVGdFFpeGxRVUZsTEc5Q1FVRnZRanRCUVVNMVJDeFZRVUZKTEVOQlFVTXNUMEZCVHl4VlFVRlZMR2RDUVVGblFpeExRVUZMTEcxQ1FVRnRRaXhMUVVGTExHMUNRVUZ0UWl4SFFVRkhPMEZCUTNaR0xHTkJRVTBzU1VGQlNTeE5RVUZOTEhGRFFVRnhReXhuUWtGQlowSXNSVUZCUlR0QlFVRkJMRTFCUTNwRk8wRkJSVUVzV1VGQlRTeHZRa0ZCYjBJc1pVRkJaU3h4UWtGQmNVSTdRVUZET1VRc1ZVRkJTU3hEUVVGRExFOUJRVThzVlVGQlZTeHBRa0ZCYVVJc1MwRkJTeXh2UWtGQmIwSXNTMEZCU3l4dlFrRkJiMElzUjBGQlJ6dEJRVU14Uml4alFVRk5MRWxCUVVrc1RVRkJUU3h4UTBGQmNVTXNhVUpCUVdsQ0xFVkJRVVU3UVVGQlFTeE5RVU14UlR0QlFVVkJMRmxCUVUwc0swSkJRU3RDTEU5QlFVOHNaVUZCWlN3eVFrRkJNa0lzVjBGRGJFWXNaMEpCUVdkQ0xHVkJRV1VzZDBKQlFYZENMRTFCUVUwc1NVRkROMFE3UVVGRlNpdzJRa0ZCZFVKQkxFMUJRVXM3UVVGQlFTeFJRVU40UWp0QlFVRkJMRkZCUVhkQ0xFTkJRVU1zUTBGQlF5eGxRVUZsTzBGQlFVRXNVVUZCYlVJc1EwRkJReXhEUVVGRExHVkJRV1U3UVVGQlFTeFJRVUZyUWp0QlFVRkJMRkZCUXk5R0xFTkJRVU1zUTBGQlF5eGxRVUZsTzBGQlFVRXNVVUZCYVVJN1FVRkJRU3hSUVVGSE8wRkJRVUVzVVVGQmFVSTdRVUZCUVN4UlFVRnJRanRCUVVGQkxGRkJRM2hGTzBGQlFVRXNUVUZCTkVJN1FVRkRhRU1zVlVGQlNTeDVRa0ZCZVVJc1IwRkJSenRCUVVNNVFpeDFRa0ZCWlN3clFrRkJaME03UVVGQlFTeE5RVU5xUkR0QlFVVkJMRlZCUVVrc1pVRkJaU3h2UWtGQmIwSTdRVUZEY2tNc09FSkJRWE5DTEhOQ1FVRnpRaXhsUVVGbExHOUNRVUZ2UWl4TlFVRk5PMEZCUVVFc1RVRkRka1k3UVVGRlFTeFZRVUZKTEdWQlFXVXNkVUpCUVhWQ0xGRkJRVmM3UVVGRGJrUXNXVUZCU1N4UFFVRlBMR1ZCUVdVc2RVSkJRWFZDTEZkQlFWYzdRVUZETVVRc1owSkJRVTBzU1VGQlNTeE5RVUZOTEN0RFFVRXJReXhsUVVGbExHdENRVUZyUWl4RlFVRkZPMEZCUVVFc1VVRkRjRWM3UVVGRFFTeGpRVUZOTEdkQ1FVRm5RaXhuUWtGQlowSXNjMEpCUVhOQ0xFMUJRVTA3UVVGRGJFVXNZMEZCVFN4clFrRkJhMElzWjBKQlFXZENMR1ZCUVdVc2JVSkJRVzFDTEZOQlFWTXNSMEZCUnl4TlFVRk5PMEZCUXpWR0xGbEJRVWxCTEUxQlFVc3NNRUpCUVRCQ0xITkNRVUZ6UWl4bFFVRmxMR1ZCUVdVc1RVRkJUU3hIUVVGSE8wRkJRemxHTzBGQlFVRXNXVUZEU1N3MFJFRkJORVFzWlVGQlpTeHJRa0ZCYTBJN1FVRkJRU3hWUVVGSE8wRkJRVUVzVVVGRGRFYzdRVUZCUVN4TlFVTkdPMEZCUlVFc1ZVRkJTU3hsUVVGbExIZENRVUYzUWp0QlFVTjZReXh0UWtGQlZ5eERRVUZETEUxQlFVMHNTMEZCU3l4TFFVRkxMRTlCUVU4c1VVRkJVU3hsUVVGbExITkNRVUZ6UWl4SFFVRkhPMEZCUTJwR0xHTkJRVWtzVDBGQlR5eFRRVUZUTEZWQlFWVTdRVUZETlVJc2EwSkJRVTBzU1VGQlNTeE5RVUZOTEd0RVFVRnJSQ3hKUVVGSkxFVkJRVVU3UVVGQlFTeFZRVU14UlR0QlFVTkJMR05CUVVrc1QwRkJUeXhWUVVGVkxGbEJRVmtzUTBGQlF5eFBRVUZQTEZWQlFWVXNTMEZCU3l4TFFVRkxMRkZCUVZFc1IwRkJSenRCUVVOMFJTeHJRa0ZCVFN4SlFVRkpMRTFCUVUwc2FVVkJRV2xGTEV0QlFVc3NSVUZCUlR0QlFVRkJMRlZCUXpGR08wRkJRMEVzWjBKQlFVMHNZVUZCWVN4blFrRkJaMElzVFVGQlRTeE5RVUZOTzBGQlF5OURMR05CUVVsQkxFMUJRVXNzTmtKQlFUWkNMSE5DUVVGelFpeFpRVUZaTEV0QlFVc3NUVUZCVFN4SFFVRkhPMEZCUTNCR0xESkNRVUZsTEhkRFFVRjNReXhKUVVGSkxFMUJRVTBzUzBGQlN5eEhRVUZITzBGQlFVRXNWVUZETTBVN1FVRkJRU3hSUVVOR08wRkJRVUVzVFVGRFJqdEJRVVZCTEZWQlFVa3NaVUZCWlN4VlFVRlZMRkZCUVZjN1FVRkRkRU1zTkVKQlFXOUNMR1ZCUVdVc1QwRkJUeXhKUVVGSkxHOUNRVUZKTEZGQlFXbERMRWRCUVVjc1EwRkJReXhMUVVGTExGVkJRVlU3UVVGRGNFY3NaMEpCUVUwc1owSkJRV2RDTEdkQ1FVRm5RaXhMUVVGTExFMUJRVTA3UVVGRGFrUXNaMEpCUVUwc2EwSkJRV3RDTEdkQ1FVRm5RaXhQUVVGUExFMUJRVTA3UVVGRmNrUXNZMEZCU1VFc1RVRkJTeXd3UWtGQk1FSXNjMEpCUVhOQ0xHVkJRV1VzWlVGQlpTeE5RVUZOTEVkQlFVYzdRVUZET1VZc01rSkJRV1VzY1VOQlFYRkRMRWRCUVVjc1RVRkJUU3hMUVVGTExFZEJRVWM3UVVGQlFTeFZRVU4yUlR0QlFVRkJMRkZCUTBZc1EwRkJRenRCUVVGQkxFMUJRMGc3UVVGRlFTeGhRVUZQTEVOQlFVTXNjMEpCUVhOQ0xFMUJRVTA3UVVGQlFTeEpRVU4wUXl4VFFVRlRMRWRCUVVjN1FVRkRWaXhWUVVGSkxIbENRVUY1UWl4SFFVRkhPMEZCUXpsQ0xGRkJRVUZCTEUxQlFVc3NNRUpCUVRCQ0xHOUNRVUZ2UWp0QlFVRkJMRTFCUTNKRU8wRkJRMEVzWVVGQlR5eFJRVUZSTEZkQlFWTkJMRTFCUVVzc1RVRkJUU3hMUVVGTExFTkJRVU03UVVGRGVrTXNXVUZCVFR0QlFVRkJMRWxCUTFJN1FVRkJRU3hGUVVOR096czdRVU5xVEU4c1RVRkJUU3cyUWtGQk5rSXNRMEZCUXl4VFFVRXlRanRCUVVOd1JTeFpRVUZSTEUxQlFVMDdRVUZCUVN4TlFVTmFMRXRCUVVzN1FVRkRTQ3hsUVVGUE8wRkJRVUVzVFVGRFZDeExRVUZMTzBGQlEwZ3NaVUZCVHp0QlFVRkJMRTFCUTFRc1MwRkJTenRCUVVOSUxHVkJRVTg3UVVGQlFTeE5RVU5VTEV0QlFVczdRVUZEU0N4bFFVRlBPMEZCUVVFc1RVRkRWQ3hMUVVGTE8wRkJRMGdzWlVGQlR6dEJRVUZCTEUxQlExUXNTMEZCU3p0QlFVTklMR1ZCUVU4N1FVRkJRU3hOUVVOVUxFdEJRVXM3UVVGRFNDeGxRVUZQTzBGQlFVRXNUVUZEVkN4TFFVRkxPMEZCUTBnc1pVRkJUenRCUVVGQkxFMUJRMVFzUzBGQlN6dEJRVU5JTEdWQlFVODdRVUZCUVN4TlFVTlVMRXRCUVVzN1FVRkRTQ3hsUVVGUE8wRkJRVUVzVFVGRFZDeExRVUZMTzBGQlEwZ3NaVUZCVHp0QlFVRkJMRTFCUTFRc1MwRkJTenRCUVVOSUxHVkJRVTg3UVVGQlFTeE5RVU5VTEV0QlFVczdRVUZEU0N4bFFVRlBPMEZCUVVFc1RVRkZWRHRCUVVORkxHTkJRVTBzU1VGQlNTeE5RVUZOTERCQ1FVRXdRaXhKUVVGSkxFVkJRVVU3UVVGQlFTeEpRVU53UkR0QlFVRkJMRVZCUTBZN1FVRkxUeXhOUVVGTkxEWkNRVUUyUWl4RFFVRkRMR05CUVhGRE8wRkJRemxGTEZsQlFWRXNWMEZCVnp0QlFVRkJMRTFCUTJwQ0xFdEJRVXM3UVVGRFNDeGxRVUZQTzBGQlFVRXNUVUZEVkN4TFFVRkxPMEZCUTBnc1pVRkJUenRCUVVGQkxFMUJRMVFzUzBGQlN6dEJRVU5JTEdWQlFVODdRVUZCUVN4TlFVTlVMRXRCUVVzN1FVRkRTQ3hsUVVGUE8wRkJRVUVzVFVGRFZDeExRVUZMTzBGQlEwZ3NaVUZCVHp0QlFVRkJMRTFCUTFRc1MwRkJTenRCUVVOSUxHVkJRVTg3UVVGQlFTeE5RVU5VTEV0QlFVczdRVUZEU0N4bFFVRlBPMEZCUVVFc1RVRkRWQ3hMUVVGTE8wRkJRMGdzWlVGQlR6dEJRVUZCTEUxQlExUXNTMEZCU3p0QlFVTklMR1ZCUVU4N1FVRkJRU3hOUVVOVUxFdEJRVXM3UVVGRFNDeGxRVUZQTzBGQlFVRXNUVUZEVkN4TFFVRkxPMEZCUTBnc1pVRkJUenRCUVVGQkxFMUJRMVFzUzBGQlN6dEJRVU5JTEdWQlFVODdRVUZCUVN4TlFVTlVMRXRCUVVzN1FVRkRTQ3hsUVVGUE8wRkJRVUVzVFVGRlZEdEJRVU5GTEdOQlFVMHNTVUZCU1N4TlFVRk5MREJDUVVFd1FpeFRRVUZUTEVWQlFVVTdRVUZCUVN4SlFVTjZSRHRCUVVGQkxFVkJRMFk3UVVGTlR5eE5RVUZOTEhWQ1FVRjFRaXhEUVVGRExHRkJRM0JDTEVOQlFVTXNVVUZCVnl4SFFVRkhMRWRCUVVjc1IwRkJSeXhIUVVGSExFZEJRVWNzUjBGQlJ5eEhRVUZITEZGQlFWY3NSMEZCUnl4SFFVRkhMRWRCUVVjc1IwRkJSeXhIUVVGSExGRkJRVmNzVVVGQlZ5eE5RVUZUTEVWQlFVVXNVVUZCVVR0QlFVczVSeXhOUVVGTkxHOURRVUZ2UXl4RFFVRkRMRk5CUlc5RU8wRkJRMmhITEZsQlFWRXNUVUZCVFR0QlFVRkJMRTFCUTFvc1MwRkJTenRCUVVWSUxHVkJRVThzVDBGQlR5eHBRa0ZCYVVJc1pVRkJaU3hoUVVGaExFOUJRVThzWlVGQlpUdEJRVUZCTEUxQlEyNUdMRXRCUVVzN1FVRkRTQ3hsUVVGUE8wRkJRVUVzVFVGRFZDeExRVUZMTzBGQlEwZ3NaVUZCVHp0QlFVRkJMRTFCUTFRc1MwRkJTenRCUVVOSUxHVkJRVTg3UVVGQlFTeE5RVU5VTEV0QlFVczdRVUZEU0N4bFFVRlBPMEZCUVVFc1RVRkRWQ3hMUVVGTE8wRkJRMGdzWlVGQlR6dEJRVUZCTEUxQlExUXNTMEZCU3p0QlFVTklMR1ZCUVU4N1FVRkJRU3hOUVVOVUxFdEJRVXM3UVVGRFNDeGxRVUZQTzBGQlFVRXNUVUZEVkN4TFFVRkxPMEZCUTBnc1pVRkJUenRCUVVGQkxFMUJRMVFzUzBGQlN6dEJRVU5JTEdWQlFVODdRVUZCUVN4TlFVTlVMRXRCUVVzN1FVRkRTQ3hsUVVGUE8wRkJRVUVzVFVGRFZDeExRVUZMTzBGQlEwZ3NaVUZCVHp0QlFVRkJMRTFCUTFRN1FVRkRSU3hqUVVGTkxFbEJRVWtzVFVGQlRTeHhRa0ZCY1VJc1NVRkJTU3hGUVVGRk8wRkJRVUVzU1VGREwwTTdRVUZCUVN4RlFVTkdPMEZCUzBjc1RVRkJUU3gxUWtGQmRVSXNRMEZCUXl4aFFVRnJSVHRCUVVOeVJ5eFpRVUZSTEZWQlFWVTdRVUZCUVN4TlFVTm9RaXhMUVVGTE8wRkJRMGdzWlVGQlR6dEJRVUZCTEUxQlExUXNTMEZCU3p0QlFVTklMR1ZCUVU4N1FVRkJRU3hOUVVOVUxFdEJRVXM3UVVGRFNDeGxRVUZQTzBGQlFVRXNUVUZEVkN4TFFVRkxPMEZCUTBnc1pVRkJUenRCUVVGQkxFMUJRMVFzUzBGQlN6dEJRVU5JTEdWQlFVODdRVUZCUVN4TlFVTlVPMEZCUTBVc1kwRkJUU3hKUVVGSkxFMUJRVTBzT0VKQlFUaENMRkZCUVZFc1JVRkJSVHRCUVVGQkxFbEJRelZFTzBGQlFVRXNSVUZEUmp0QlFVdFBMRTFCUVUwc01rSkJRVEpDTEVOQlFVTXNVMEZCZVVRc1UwRkJVeXhoUVVOMlJ5eFRRVUZUTEdGQlFXRXNVMEZCVXl4WFFVRlhMRk5CUVZNc1YwRkJWeXhUUVVGVExGbEJRVmtzVTBGQlV5eFhRVU0xUml4VFFVRlRPMEZCUzA0c1RVRkJUU3d5UWtGQk1rSXNRMEZCUXl4aFFVRXdRenRCUVVOcVJpeFpRVUZSTEZWQlFWVTdRVUZCUVN4TlFVTm9RaXhMUVVGTE8wRkJRMGdzWlVGQlR6dEJRVUZCTEUxQlExUXNTMEZCU3p0QlFVTklMR1ZCUVU4N1FVRkJRU3hOUVVOVUxFdEJRVXM3UVVGRFNDeGxRVUZQTzBGQlFVRXNUVUZEVkN4TFFVRkxPMEZCUTBnc1pVRkJUenRCUVVGQkxFMUJRMVFzUzBGQlN6dEJRVU5JTEdWQlFVODdRVUZCUVN4TlFVTlVPMEZCUTBVc1kwRkJUU3hKUVVGSkxFMUJRVTBzT0VKQlFUaENMRkZCUVZFc1JVRkJSVHRCUVVGQkxFbEJRelZFTzBGQlFVRXNSVUZEUmpzN08wRkRjRTFCT3pzN1FVTklUeXhOUVVGTlF5eFpRVUZYT3pzN1FVUlpha0lzVFVGQlRTeFhRVUZYTEU5QlFVMHNVMEZCYzBVN1FVRkRiRWNzVVVGQlNTeFBRVUZQTEZOQlFWTXNWVUZCVlR0QlFVTTFRaXhWUVVGSkxFOUJRVThzV1VGQldTeGxRVUZsTEZGQlFWRXNXVUZCV1N4UlFVRlJMRk5CUVZNc1RVRkJUVHRCUVVVdlJTeFpRVUZKTzBGQlEwWXNhVUpCUVU4c1NVRkJTU3hYUVVGWExFMUJRVTFETEZWQlFWTXNTVUZCU1N4RFFVRkRPMEZCUVVFc1VVRkROVU1zVTBGQlV5eEhRVUZITzBGQlExWXNZMEZCU1N4RlFVRkZMRk5CUVZNc2VVSkJRWGxDTzBGQlJYUkRMR3RDUVVGTkxGTkJRVmtzYVVKQlFXbENMRWxCUVVrN1FVRkRka01zYTBKQlFVMHNVMEZCZFVJc1EwRkJRenRCUVVNNVFpdzJRa0ZCYVVJc1UwRkJVeXhSUVVGUk8wRkJRMmhETEhGQ1FVRlBMRXRCUVVzc1MwRkJTenRCUVVGQkxGbEJRMjVDTzBGQlEwRXNiVUpCUVU4c1NVRkJTU3hYUVVGWExFOUJRVThzVDBGQlR5eE5RVUZOTEVOQlFVTTdRVUZCUVN4VlFVTTNRenRCUVVOQkxHZENRVUZOTzBGQlFVRXNVVUZEVWp0QlFVRkJMRTFCUTBZc1QwRkJUenRCUVVWTUxHTkJRVTBzVjBGQlZ5eE5RVUZOTEUxQlFVMHNTVUZCU1R0QlFVTnFReXhaUVVGSkxFTkJRVU1zVTBGQlV5eEpRVUZKTzBGQlEyaENMR2RDUVVGTkxFbEJRVWtzVFVGQlRTeHpRMEZCYzBNc1NVRkJTU3hGUVVGRk8wRkJRVUVzVVVGRE9VUTdRVUZEUVN4alFVRk5MSE5DUVVGelFpeFRRVUZUTEZGQlFWRXNTVUZCU1N4blFrRkJaMEk3UVVGRGFrVXNZMEZCVFN4WFFVRlhMSE5DUVVGelFpeFRRVUZUTEhGQ1FVRnhRaXhGUVVGRkxFbEJRVWs3UVVGRE0wVXNXVUZCU1N4WFFVRlhMRmxCUVhOQ08wRkJSMjVETEdsQ1FVRlBMRWxCUVVrc1YwRkJWeXhOUVVGTkxGTkJRVk1zV1VGQldTeERRVUZETzBGQlFVRXNVVUZEY0VRc1QwRkJUenRCUVVWTUxHTkJRVWtzUTBGQlF5eFRRVUZUTEUxQlFVMDdRVUZEYkVJc2EwSkJRVTBzU1VGQlNTeE5RVUZOTEhORFFVRnpReXhKUVVGSkxIRkNRVUZ4UWp0QlFVRkJMRlZCUTJwR08wRkJRMEVzWjBKQlFVMHNVMEZCVXl4VFFVRlRMRXRCUVVzc1ZVRkJWVHRCUVVWMlF5eGpRVUZKTzBGQlEwb3NZMEZCU1R0QlFVVkdMSEZDUVVGVExFbEJRVWtzV1VGQldTeFJRVUZSTzBGQlFVRXNWVUZEYmtNc1UwRkJVeXhIUVVGSE8wRkJRMVlzWjBKQlFVa3NZVUZCWVN4WlFVRlpPMEZCUlROQ0xHOUNRVUZOTEZGQlFWRXNTMEZCU3l4TFFVRkxMRmRCUVZjc1MwRkJTenRCUVVONFF5eDFRa0ZCVXl4SlFVRkpMRmxCUVZrc1QwRkJUeXhGUVVGRExGTkJRVk1zVDBGQlR5eFRRVUZUTEUxQlFVc3NRMEZCUXl4RlFVRkZPMEZCUVVFc1dVRkRjRVVzVDBGQlR6dEJRVU5NTEc5Q1FVRk5PMEZCUVVFc1dVRkRVanRCUVVGQkxGVkJRMFk3UVVGRlFTeGpRVUZKTEZOQlFWTTdRVUZGWWl4cFFrRkJUeXhOUVVGTk8wRkJRMWdzYTBKQlFVMHNSVUZCUXl4TlFVRk5MRTFCUVVzc1NVRkJTU3hOUVVGTkxFOUJRVThzUzBGQlN6dEJRVU40UXl4blFrRkJTU3hOUVVGTk8wRkJRMUk3UVVGQlFTeFpRVU5HTzBGQlEwRXNhMEpCUVUwc1dVRkJXU3hOUVVGTk8wRkJRM2hDTEd0Q1FVRk5MRkZCUVZFc1NVRkJTU3hYUVVGWExGRkJRVkVzVVVGQlVTeFRRVUZUTzBGQlEzUkVMR3RDUVVGTkxFbEJRVWtzUzBGQlN6dEJRVU5tTEhOQ1FVRlZPMEZCUVVFc1ZVRkRXanRCUVVOQkxHbENRVUZQTEVsQlFVa3NWMEZCVnl4UlFVRlJMRWRCUVVjc1VVRkJVVHRCUVVGQkxGRkJRek5ETzBGQlFVRXNUVUZEUmp0QlFVRkJMRWxCUlVZc1YwRkJWeXhuUWtGQlowSXNUVUZCVFR0QlFVTXZRaXhoUVVGUExFbEJRVWtzVjBGQlZ5eE5RVUZOTEV0QlFVc3NXVUZCV1N4RFFVRkRPMEZCUVVFc1NVRkRhRVFzVjBGQlZ5eG5Ra0ZCWjBJc1dVRkJXVHRCUVVOeVF5eGhRVUZQTzBGQlFVRXNTVUZEVkN4UFFVRlBPMEZCUTB3c1lVRkJUeXhKUVVGSkxGZEJRVmNzU1VGQlNUdEJRVUZCTEVsQlF6VkNPMEZCUVVFc1JVRkRSanM3TzBGRmRrSkJMRTFCUVUwc1ZVRkJWU3hEUVVGRExGbEJRVzlDTEdsQ1FVRXJRanRCUVVOc1JTeFZRVUZOTEZsQlFWa3NXVUZCV1N4RlFVRkZMRk5CUVZNc1dVRkJXU3haUVVGWk8wRkJRMnBGTEZGQlFVa3NZMEZCWXl4SFFVRkhPMEZCUTI1Q0xIRkNRVUZsTEN0Q1FVRm5RenRCUVVGQkxFbEJRMnBFTzBGQlFVRXNSVUZEUmp0QlFVMVBMRTFCUVUwc1kwRkJZeXhQUVVGTkxGRkJRVFJDTzBGQlJUTkVMRmxCUVZFc1NVRkJTU3hMUVVGTExGbEJRV0VzY1VKQlFYRkNMRWxCUVVrc1VVRkJVU3hEUVVGRE8wRkJRVUVzUlVGRGJFVTdRVUZSVHl4TlFVRk5MRk5CUVZNc1QwRkJUU3hMUVVGVkxGZEJRV3RETzBGQlEzUkZMRkZCUVVrc1QwRkJNa1U3UVVGRk4wVXNWVUZCU1N4UFFVRlBMR05CUVdNc1pVRkJaU3hEUVVGRExGVkJRVlVzUzBGQlN6dEJRVU4wUkN4alFVRk5MRWxCUVVrc1RVRkJUU3huUkVGQlowUTdRVUZCUVN4TlFVTnNSVHRCUVVOQkxGbEJRVTBzVlVGQlZTeE5RVUZOTEZWQlFWVXNTVUZCU1N4bFFVRmxPMEZCUTI1RUxGVkJRVWtzUTBGQlF5eFRRVUZUTzBGQlExb3NZMEZCVFN4SlFVRkpPMEZCUVVFc1ZVRkRUanRCUVVGQkxGRkJRVEJITzBGQlFVRXNUVUZEYUVnN1FVRkZRU3hWUVVGSkxFTkJRVU1zU1VGQlNTeExRVUZMTEUxQlFVMDdRVUZEYkVJc1kwRkJUU3hKUVVGSk8wRkJRVUVzVlVGRFRqdEJRVUZCTEZGQlFYRkhPMEZCUVVFc1RVRkRNMGM3UVVGTFFTeFpRVUZOTEZkQlFWY3NTMEZCZFVJN1FVRkRlRU1zV1VGQlRTeFRRVUZUTEZsQlFWa3NSMEZCUnl4TFFVRkxMRTlCUVU4N1FVRkJRU3hKUVVNMVF6dEJRVUZCTEVWQlEwWTdRVUZ2UTBFc1RVRkJUU3hwUWtGQmFVSXNiMEpCUVVrc1NVRkJOa0k3UVVGUGVFUXNUVUZCVFN3MlFrRkJOa0lzUTBGQlF5eHJRa0ZCTkVNN1FVRkRPVVVzVlVGQlRVTXNVVUZCVHl4WlFVRlpPMEZCUTNwQ0xGVkJRVTBzVVVGQlVVRXNUVUZCU3l4VlFVRlZPMEZCUXpkQ0xGRkJRVWs3UVVGRFJpeFpRVUZOTEdGQlFXRkJMRTFCUVVzc1YwRkJWeXhEUVVGRE8wRkJRM0JETEZsQlFVMHNXVUZCV1VFc1RVRkJTeXgzUWtGQmQwSXNaVUZCWlN4WlFVRlpMR0ZCUVdFc1EwRkJRenRCUVVONFJpeFZRVUZKTEdOQlFXTXNSMEZCUnp0QlFVTnVRaXgxUWtGQlpTeDFRMEZCZDBNN1FVRkJRU3hOUVVONlJEdEJRVU5CTEdGQlFVOHNRMEZCUTBFc1RVRkJTeXhQUVVGUExHRkJRV0VzUTBGQlF5eEhRVUZIUVN4TlFVRkxMRTlCUVU4c1lVRkJZU3hKUVVGSkxFTkJRVU1zUTBGQlF6dEJRVUZCTEVsQlEzUkZMRlZCUVVVN1FVRkRRU3hOUVVGQlFTeE5RVUZMTEdGQlFXRXNTMEZCU3p0QlFVRkJMRWxCUTNwQ08wRkJRVUVzUlVGRFJqdEJRVkZQTEUxQlFVMHNlVUpCUVhsQ0xFTkJRVU1zVlVGQmQwTTdRVUZETjBVc1ZVRkJUVUVzVVVGQlR5eFpRVUZaTzBGQlEzcENMRlZCUVUwc2EwSkJRV3RDUVN4TlFVRkxMRkZCUVZFc1RVRkJUU3hWUVVGVk8wRkJRM0pFTEZGQlFVa3NiMEpCUVc5Q0xFZEJRVWM3UVVGRGVrSXNXVUZCVFN4SlFVRkpMRTFCUVUwc0swUkJRU3RFTEUxQlFVMHNWVUZCVlN4SFFVRkhPMEZCUVVFc1NVRkRjRWM3UVVGRFFTeEpRVUZCUVN4TlFVRkxMRTlCUVU4c1NVRkJTU3hQUVVGUExHVkJRV1U3UVVGRGRFTXNWMEZCVHl4RFFVRkRMR2xDUVVGcFFpeE5RVUZOTEZWQlFWVTdRVUZCUVN4RlFVTXpRenRCUVZWUExFMUJRVTBzWjBKQlFXZENMRTlCUTNwQ0xGZEJRMEVzV1VGQmIwWTdRVUZEZEVZc1VVRkJTU3hwUWtGQmVVSTdRVUZETjBJc1ZVRkJUVUVzVVVGQlR5eFpRVUZaTzBGQlJYcENMRkZCUVVrc1RVRkJUU3hSUVVGUkxGTkJRVk1zUjBGQlJ6dEJRVVUxUWl4UFFVRkRMR2xDUVVGcFFpeGxRVUZsTEVsQlFVazdRVUZCUVN4SlFVTjJReXhYUVVGWExGVkJRVlVzVjBGQlYwRXNUVUZCU3l4UFFVRlBMRkZCUVZFN1FVRkZiRVFzVDBGQlF5eHBRa0ZCYVVJc1pVRkJaU3hKUVVGSkxFTkJRVU1zVlVGQlZTeFpRVUZaTEZWQlFWVXNWVUZCVlR0QlFVRkJMRWxCUTJ4R0xFOUJRVTg3UVVGRlRDeFBRVUZETEdsQ1FVRnBRaXhsUVVGbExFbEJRVWtzZFVKQlFYVkNMRk5CUVZNN1FVRkJRU3hKUVVOMlJUdEJRVVZCTEZGQlFVa3NaMEpCUVdkQ08wRkJRM0JDTEZGQlFVa3NkVUpCUVhWQ08wRkJRek5DTEZGQlFVa3NhMEpCUVd0Q08wRkJRM1JDTEZGQlFVa3NVMEZCYlVJc1EwRkJRenRCUVVONFFpeFZRVUZOTEhkQ1FVRjNRaXhEUVVGRE8wRkJReTlDTEZWQlFVMHNlVUpCUVhsQ0xFTkJRVU03UVVGRmFFTXNVVUZCU1R0QlFVTkdMRTlCUVVNc2MwSkJRWE5DTEUxQlFVMHNTVUZCU1N4clFrRkJhMElzVDBGQlR6dEJRVVV4UkN4VlFVRkpMRk5CUVZNc1owSkJRV2RDUVN4TlFVRkxMRzFDUVVGdFFqdEJRVU51UkN4alFVRk5MR3RDUVVGclFpeERRVUZETzBGQlEzcENMRzFDUVVGWExGRkJRVkVzVVVGQlVTeGpRVUZqTzBGQlEzWkRMR2RDUVVGTkxFOUJRVThzVDBGQlR5eFRRVUZUTEZkQlFWY3NUMEZCVHl4TFFVRkxPMEZCUTNCRUxEQkNRVUZuUWl4TFFVRkxMRk5CUVZNc1QwRkJUeXhUUVVGVExGZEJRVmNzVDBGQlR5eExRVUZMTEVsQlFVa3NSVUZCUlN4TFFVRkxMRlZCUVZFN1FVRkRkRVlzV1VGQlFVRXNUVUZCU3l4clFrRkJiVUlzVFVGQlRTeEpRVUZKTzBGQlFVRXNWVUZEY0VNc1EwRkJReXhEUVVGRE8wRkJRVUVzVVVGRFNqdEJRVWRCTEdOQlFVMHNVVUZCVVN4SlFVRkpMR1ZCUVdVN1FVRkJRU3hOUVVOdVF6dEJRVVZCTEhOQ1FVRm5RaXhOUVVGTlFTeE5RVUZMTEd0Q1FVRnJRaXhwUWtGQmFVSXNhVUpCUVdsQ0xHOUNRVUZ2UWp0QlFVTnVSeXhWUVVGSkxHdENRVUZyUWl4SFFVRkhPMEZCUTNaQ0xIVkNRVUZsTEhsQ1FVRXdRanRCUVVGQkxFMUJRek5ETzBGQlJVRXNXVUZCVFN4RFFVRkRMRmxCUVZrc1YwRkJWeXhKUVVGSkxESkNRVUV5UWl4aFFVRmhPMEZCUlRGRkxGbEJRVTBzY1VKQlFYRkNMRU5CUVVNc1EwRkJReXhUUVVGVE8wRkJSWFJETEZsQlFVMHNZVUZCWVN4RFFVRkRPMEZCUTNCQ0xGbEJRVTBzWTBGQll5eERRVUZETzBGQlEzSkNMRmxCUVUwc01rSkJRWGRGTEVOQlFVTTdRVUZETDBVc1pVRkJVeXhKUVVGSkxFZEJRVWNzU1VGQlNTeFpRVUZaTEV0QlFVczdRVUZEYmtNc1kwRkJUU3hQUVVGUFFTeE5RVUZMTEdsQ1FVRnBRaXhsUVVGbExFTkJRVU03UVVGRGJrUXNXVUZCU1N4VFFVRlRMRWRCUVVjN1FVRkRaQ3g1UWtGQlpTd3dRa0ZCTWtJN1FVRkJRU3hSUVVNMVF6dEJRVU5CTERoQ1FVRnpRaXhMUVVGTExFbEJRVWs3UVVGREwwSXNiVUpCUVZjc1MwRkJTMEVzVFVGQlN5eGhRVUZoTEVsQlFVa3NRMEZCUXp0QlFVRkJMRTFCUTNwRE8wRkJRMEVzWlVGQlV5eEpRVUZKTEVkQlFVY3NTVUZCU1N4aFFVRmhMRXRCUVVzN1FVRkRjRU1zWTBGQlRTeFBRVUZQUVN4TlFVRkxMR3RDUVVGclFpeGxRVUZsTEVOQlFVTTdRVUZEY0VRc1dVRkJTU3hUUVVGVExFZEJRVWM3UVVGRFpDeDVRa0ZCWlN3eVFrRkJORUk3UVVGQlFTeFJRVU0zUXp0QlFVTkJMQ3RDUVVGMVFpeExRVUZMTEVsQlFVazdRVUZEYUVNc1kwRkJUU3hoUVVGaFFTeE5RVUZMTEdGQlFXRXNTVUZCU1R0QlFVTjZReXh2UWtGQldTeExRVUZMTEZWQlFWVTdRVUZGTTBJc1dVRkJTU3hQUVVFMFFqdEJRVU01UWl4alFVRkpMSE5DUVVGelFpeFRRVUZUTERSQ1FVRTBRaXhSUVVGWE8wRkJRM2hGTEhGRFFVRjVRaXhMUVVGTExGbEJRVms3UVVGRE1VTTdRVUZCUVN4VlFVTkdPMEZCUTBFc1owSkJRVTBzVjBGQlZ5eFBRVUZQTEZOQlFWTXNORUpCUVRSQ0xGZEJRM3BFTEZGQlFWRXNNRUpCUTFJc1UwRkJVeXd3UWtGQk1FSXNWVUZCVlN4TFFVRkxPMEZCUTNSRUxHTkJRVWtzWVVGQllTeFRRVUZUTEdGQlFXRXNaMEpCUVdkQ0xHRkJRV0VzWTBGQll6dEJRVU5vUml4clFrRkJUU3hKUVVGSkxFMUJRVTBzTkVOQlFUUkRMRkZCUVZFc1IwRkJSenRCUVVGQkxGVkJRM3BGTzBGQlEwRXNZMEZCU1N4elFrRkJjMElzWVVGQllTeGpRVUZqTzBGQlEyNUVMR3RDUVVGTkxFbEJRVWtzVFVGQlRTdzBRMEZEV2l4UlFVRlJMRFJGUVVFMFJUdEJRVUZCTEZWQlF6RkdPMEZCUTBFc2JVTkJRWGxDTEV0QlFVc3NVVUZCVVR0QlFVRkJMRkZCUTNoRE8wRkJRVUVzVFVGRFJqdEJRVWRCTEZWQlFVa3NaVUZCYjBNN1FVRkRlRU1zVlVGQlNTeFBRVUZ6Ump0QlFVTjRSaXd3UWtGQmEwSkJMRTFCUVVzc2EwSkJRV3RDTEdGQlFXRTdRVUZEZEVRc1dVRkJTU3h2UWtGQmIwSXNSMEZCUnp0QlFVTjZRaXg1UWtGQlpTd3dRa0ZCTWtJN1FVRkJRU3hSUVVNMVF6dEJRVVZCTEhWQ1FVRmxPMEZCUVVFc1ZVRkRZaXhSUVVGUk8wRkJRVUVzVlVGRFVqdEJRVUZCTEZWQlEwRXNhVU5CUVdsRExIbENRVUY1UWl4SlFVRkpMRTlCUVVzc2VVSkJRWGxDTEVOQlFVTXNRMEZCUXp0QlFVRkJMRkZCUTJoSE8wRkJRVUVzVFVGRFJqdEJRVVZCTEhGQ1FVRmxPMEZCUVVFc1VVRkRXRHRCUVVGQkxGRkJRMEVzUTBGQlF5eGxRVUZsTEhWQ1FVRjFRaXgzUWtGQmQwSXNZMEZCWXl4dlFrRkJiMElzUzBGQlN6dEJRVUZCTEUxQlFVTTdRVUZETTBjc1lVRkJUeXhEUVVGRExHVkJRV1VzV1VGQldTeFhRVUZYTzBGQlFVRXNTVUZEYUVRc1UwRkJVeXhIUVVGSE8wRkJRMVlzTkVKQlFYTkNMRkZCUVZFc1UwRkJUMEVzVFVGQlN5eFRRVUZUTEVkQlFVY3NRMEZCUXp0QlFVTjJSQ3cyUWtGQmRVSXNVVUZCVVN4VFFVRlBRU3hOUVVGTExGTkJRVk1zUjBGQlJ5eERRVUZETzBGQlJYaEVMRlZCUVVrc2IwSkJRVzlDTEVkQlFVYzdRVUZEZWtJc1VVRkJRVUVzVFVGQlN5eHRRa0ZCYlVJc1pVRkJaVHRCUVVGQkxFMUJRM3BETzBGQlJVRXNWVUZCU1N4clFrRkJhMElzUjBGQlJ6dEJRVU4yUWl4UlFVRkJRU3hOUVVGTExHMUNRVUZ0UWl4aFFVRmhPMEZCUVVFc1RVRkRka003UVVGRFFTeFpRVUZOTzBGQlFVRXNTVUZEVWl4VlFVRkZPMEZCUTBFc1RVRkJRVUVzVFVGQlN5eE5RVUZOTEdWQlFXVTdRVUZETVVJc1ZVRkJTU3g1UWtGQmVVSXNSMEZCUnp0QlFVTTVRaXhSUVVGQlFTeE5RVUZMTERCQ1FVRXdRaXh2UWtGQmIwSTdRVUZCUVN4TlFVTnlSRHRCUVVOQkxHRkJRVThzVVVGQlVTeFhRVUZUUVN4TlFVRkxMRTFCUVUwc1MwRkJTeXhEUVVGRE8wRkJSM3BETEUxQlFVRkJMRTFCUVVzc2MwSkJRWE5DTzBGQlFVRXNTVUZETjBJN1FVRkJRU3hGUVVOR08wRkJSVThzVFVGQlRTeHBRa0ZCYVVJc1EwRkJReXhqUVVFMFFqdEJRVU42UkN4VlFVRk5RU3hSUVVGUExGbEJRVms3UVVGRGVrSXNWVUZCVFN4VlFVRlZMR1ZCUVdVc1NVRkJTU3hUUVVGVE8wRkJRelZETEZGQlFVa3NRMEZCUXl4VFFVRlRPMEZCUTFvc1dVRkJUU3hKUVVGSkxFMUJRVTBzSzBOQlFTdERMRk5CUVZNc1JVRkJSVHRCUVVGQkxFbEJRelZGTzBGQlEwRXNWVUZCVFN4RFFVRkRMR1ZCUVdVc2RVSkJRWFZDTEhkQ1FVRjNRaXhuUWtGQlowSXNhMEpCUVd0Q0xFbEJRVWs3UVVGRk0wY3NVVUZCU1N4blFrRkJaMEk3UVVGRGJFSXNWVUZCU1N4dlFrRkJiMEk3UVVGRGRFSXNVVUZCUVVFc1RVRkJTeXh6UWtGQmMwSXNaVUZCWlN4TlFVRk5PMEZCUVVFc1RVRkRiRVE3UVVGRFFTeE5RVUZCUVN4TlFVRkxMRzFDUVVGdFFpeGxRVUZsTEUxQlFVMDdRVUZCUVN4SlFVTXZRenRCUVVWQkxFbEJRVUZCTEUxQlFVc3NkVUpCUVhWQ0xGTkJRVk03UVVGRmNrTXNNRUpCUVhOQ0xGRkJRVkVzVTBGQlQwRXNUVUZCU3l4VFFVRlRMRWRCUVVjc1EwRkJRenRCUVVOMlJDd3lRa0ZCZFVJc1VVRkJVU3hUUVVGUFFTeE5RVUZMTEZOQlFWTXNSMEZCUnl4RFFVRkRPMEZCUTNoRUxFbEJRVUZCTEUxQlFVc3NiVUpCUVcxQ0xHRkJRV0U3UVVGRGNrTXNiVUpCUVdVc1QwRkJUeXhUUVVGVE8wRkJRVUVzUlVGRGFrTTdRVUZGVHl4TlFVRk5MREpDUVVOVUxFTkJRVU1zVVVGQk5rSXNaVUZCZVVJc1VVRkJhMElzVjBGQmJVSXNUMEZETTBZc2NVSkJRWEZDTEZWQlFXZENPMEZCUTNCRExGRkJRVWtzUTBGQlF5eFJRVUZSTzBGQlExZ3NiMEpCUVdNc1MwRkJTeXhEUVVGRE8wRkJRM0JDTzBGQlFVRXNTVUZEUmp0QlFVVkJMRlZCUVUxQkxGRkJRVThzV1VGQldUdEJRVVY2UWl4VlFVRk5MRmRCUVZjc1QwRkJUeXhEUVVGRE8wRkJRM3BDTEZWQlFVMHNUMEZCVHl4UFFVRlBMRU5CUVVNN1FVRkRja0lzVlVGQlRTeFhRVUZYTEU5QlFVOHNRMEZCUXp0QlFVVjZRaXhSUVVGSk8wRkJRMG9zVVVGQlNUdEJRVVZLTEZGQlFVa3NZVUZCWVN4WlFVRlpMR0ZCUVdFc1kwRkJZenRCUVVOMFJDeFpRVUZOTEVsQlFVa3NUVUZCVFN4M1EwRkJkME03UVVGQlFTeEpRVU14UkR0QlFVVkJMRkZCUVVrc2MwSkJRWE5DTEdGQlFXRXNZMEZCWXp0QlFVTnVSQ3haUVVGTkxFbEJRVWs3UVVGQlFTeFJRVU5PTERKRVFVRXlSQ3hMUVVGTE8wRkJRVUVzVFVGQmJVTTdRVUZCUVN4SlFVTjZSenRCUVVWQkxGRkJRVWtzWVVGQllTeGpRVUZqTzBGQlF6ZENMRmxCUVUwc1dVRkJXU3hQUVVGUExFTkJRVU1zUlVGQlJUdEJRVU0xUWl4WlFVRk5MSEZDUVVGeFFpeHhRa0ZCY1VJc01rSkJRVEpDTEZGQlFWRXNRMEZCUXp0QlFVTndSaXgxUWtGQmFVSXNTMEZCU3l4UFFVRlBMRU5CUVVNc1IwRkJSeXhOUVVGTkxFbEJRVWtzUjBGQlJ5eERRVUZETEVsQlFVazdRVUZEYmtRc1owSkJRVlZCTEUxQlFVc3NiVUpCUVcxQ0xGZEJRVmNzVDBGQlR5eFhRVUZYTEdOQlFXTTdRVUZCUVN4SlFVTXZSU3hQUVVGUE8wRkJRMHdzV1VGQlRTeFBRVUZQTEU5QlFVOHNRMEZCUXp0QlFVVnlRaXhWUVVGSkxFMUJRVTBzVVVGQlVTeEpRVUZKTEVkQlFVYzdRVUZGZGtJc2VVSkJRV2xDTEVsQlFVa3NTMEZCU3p0QlFVTXhRaXhyUWtGQlZVRXNUVUZCU3l4UlFVRlJMR05CUVdNN1FVRkRja01zWlVGQlR5eExRVUZMTEU5QlFVODdRVUZEYmtJc1dVRkJTU3haUVVGWkxGVkJRVlU3UVVGRE1VSXNhVUpCUVZNc1NVRkJTU3hIUVVGSExFbEJRVWtzUzBGQlN5eFJRVUZSTEV0QlFVczdRVUZEY0VNc1kwRkJTU3hQUVVGUExFdEJRVXNzUTBGQlF5eE5RVUZOTEZWQlFWVTdRVUZETDBJc2EwSkJRVTBzU1VGQlNTeFZRVUZWTEhkQ1FVRjNRaXhEUVVGRExHdENRVUZyUWp0QlFVRkJMRlZCUTJwRk8wRkJRMEVzVlVGQlFVRXNUVUZCU3l4UlFVRlJMRmRCUVZjc1NVRkJTU3huUWtGQlowSXNTMEZCU3l4RFFVRkRMRWRCUVVjc1RVRkJUVHRCUVVGQkxGRkJRemRFTzBGQlFVRXNUVUZEUml4UFFVRlBPMEZCUTB3c2VVSkJRV2xDTEV0QlFVczdRVUZEZEVJc2EwSkJRVlZCTEUxQlFVc3NVVUZCVVN4alFVRmpPMEZCUTNKRExHVkJRVThzUzBGQlN5eFBRVUZQTzBGQlEyNUNMRkZCUVVGQkxFMUJRVXNzVDBGQlR5eEpRVUZKTEVsQlFVa3NWMEZCVnl4TFFVRkxMRkZCUVZFc1MwRkJTeXhaUVVGWkxHTkJRV01zUjBGQlJ5eFBRVUZQTzBGQlFVRXNUVUZEZGtZN1FVRkJRU3hKUVVOR08wRkJSVUVzVlVGQlRTeFJRVUZSUVN4TlFVRkxMRlZCUVZVN1FVRkROMElzVlVGQlRTeGhRVUZoUVN4TlFVRkxMRmRCUVZjc1NVRkJTU3hMUVVGTExFMUJRVTA3UVVGRGJFUXNVVUZCU1R0QlFVTkdMRlZCUVVrc1YwRkJWeXhoUVVGaE8wRkJRelZDTEZkQlFVc3NVVUZCVVN4UFFVRkxRU3hOUVVGTExFOUJRVThzVlVGQlZTeEpRVUZKTEVOQlFVTTdRVUZETjBNc1dVRkJUVU1zVlVGQlUwUXNUVUZCU3p0QlFVRkJMRkZCUTJoQ0xESkNRVUV5UWl4UlFVRlJPMEZCUVVFc1VVRkJSenRCUVVGQkxGRkJRVk03UVVGQlFTeFJRVUZuUWp0QlFVRkJMRkZCUVZrc1MwRkJTenRCUVVGQkxGRkJRMmhHTEhsQ1FVRjVRaXhSUVVGUk8wRkJRVUVzVFVGQlF6dEJRVU4wUXl4VlFVRkpReXhaUVVGWExFZEJRVWM3UVVGRGFFSXNkVUpCUVdVc2FVUkJRV2xFTEZOQlFWTXNWMEZCVnl4TFFVRkxMRWRCUVVjN1FVRkJRU3hOUVVNNVJqdEJRVU5CTEc5Q1FVRmpMRXRCUVV0QkxFOUJRVTA3UVVGQlFTeEpRVU16UWl4VlFVRkZPMEZCUTBFc1RVRkJRVVFzVFVGQlN5eGhRVUZoTEV0QlFVczdRVUZCUVN4SlFVTjZRanRCUVVGQkxFVkJRMFk3UVVGTFJ5eE5RVUZOTEUxQlFVMHNUMEZEWml4WFFVRnRRaXhqUVVGM1FpeGpRVUZuUXl4bFFVTXpSU3hsUVVFeVF5eFpRVUZ2UlR0QlFVTnFTQ3hWUVVGTlFTeFJRVUZQTEZsQlFWazdRVUZEZWtJc1ZVRkJUU3hWUVVGVkxHVkJRV1VzU1VGQlNTeFRRVUZUTzBGQlF6VkRMRkZCUVVrc1EwRkJReXhUUVVGVE8wRkJRMW9zV1VGQlRTeEpRVUZKTEUxQlFVMHNOa05CUVRaRExGTkJRVk1zUlVGQlJUdEJRVUZCTEVsQlF6RkZPMEZCUTBFc1ZVRkJUU3huUWtGQlowSXNVVUZCVVN4RFFVRkRPMEZCUXk5Q0xGVkJRVTBzZDBKQlFYZENMRkZCUVZFc1EwRkJRenRCUVVOMlF5eFZRVUZOTEhsQ1FVRjVRaXhSUVVGUkxFTkJRVU03UVVGRGVFTXNWVUZCVFN4cFFrRkJhVUlzVVVGQlVTeERRVUZETzBGQlEyaERMRlZCUVUwc2NVSkJRWEZDTEZGQlFWRXNRMEZCUXp0QlFVTndReXhWUVVGTkxHMUNRVUZ0UWl4UlFVRlJMRU5CUVVNN1FVRkZiRU1zVlVGQlRTeGhRVUZoTEdGQlFXRTdRVUZEYUVNc1ZVRkJUU3hqUVVGakxHTkJRV003UVVGRmJFTXNVVUZCU1N4dFFrRkJiVUk3UVVGRGRrSXNVVUZCU1N4dFFrRkJOa0lzUTBGQlF6dEJRVVZzUXl4VlFVRk5MSEZDUVVFclFpeERRVUZETzBGQlEzUkRMRlZCUVUwc2MwSkJRV2RETEVOQlFVTTdRVUZEZGtNc1ZVRkJUU3h2UWtGQk9FSXNRMEZCUXp0QlFVVnlReXhWUVVGTkxHbENRVUZwUWtFc1RVRkJTeXhWUVVGVk8wRkJRM1JETEZWQlFVMHNiMEpCUVc5Q1FTeE5RVUZMTEZkQlFWY3NZVUZCWVN4RFFVRkRPMEZCUTNoRUxGVkJRVTBzYlVKQlFXMUNRU3hOUVVGTExGZEJRVmNzWVVGQllTeERRVUZETzBGQlEzWkVMRlZCUVUwc2NVSkJRWEZDUVN4TlFVRkxMRmRCUVZjc1kwRkJZeXhEUVVGRE8wRkJRekZFTEZWQlFVMHNiMEpCUVc5Q1FTeE5RVUZMTEZkQlFWY3NZMEZCWXl4RFFVRkRPMEZCUlhwRUxGRkJRVWs3UVVGRFJpeFBRVUZETEd0Q1FVRnJRaXhuUWtGQlowSXNTVUZCU1N4alFVRmpMRTlCUVU4N1FVRkhOVVFzWlVGQlV5eEpRVUZKTEVkQlFVY3NTVUZCU1N4WlFVRlpMRXRCUVVzN1FVRkRia003UVVGQlFTeFZRVU5KTEdGQlFXRXNRMEZCUXp0QlFVRkJMRlZCUVVjN1FVRkJRU3hWUVVGdlFqdEJRVUZCTEZWQlFXMUNPMEZCUVVFc1ZVRkJWeXhoUVVGaExFTkJRVU03UVVGQlFTeFZRVUZITzBGQlFVRXNVVUZCYTBJN1FVRkJRU3hOUVVNMVJ6dEJRVWRCTEdWQlFWTXNTVUZCU1N4SFFVRkhMRWxCUVVrc1lVRkJZU3hMUVVGTE8wRkJRM0JETzBGQlFVRXNWVUZEU1N4alFVRmpMRU5CUVVNN1FVRkJRU3hWUVVGSE8wRkJRVUVzVlVGQmNVSTdRVUZCUVN4VlFVRnRRanRCUVVGQkxGVkJRVmNzWVVGQllTeGpRVUZqTEVOQlFVTTdRVUZCUVN4VlFVTnFSenRCUVVGQkxGRkJRV3RDTzBGQlFVRXNUVUZEZUVJN1FVRkZRU3hWUVVGSkxHMUNRVUZ0UWl4dlFrRkJiMEk3UVVGRE0wTXNWVUZCU1N4clFrRkJhMElzYlVKQlFXMUNPMEZCUTNwRExGVkJRVWtzYjBKQlFXOUNMSEZDUVVGeFFqdEJRVU0zUXl4VlFVRkpMRzFDUVVGdFFpeHZRa0ZCYjBJN1FVRkRNME1zWlVGQlV5eEpRVUZKTEVkQlFVY3NTVUZCU1N4WlFVRlpMRXRCUVVzN1FVRkRia01zVVVGQlFVRXNUVUZCU3l4UlFVRlJMR3RDUVVGclFpeEpRVUZKTEcxQ1FVRnRRaXhEUVVGRE8wRkJRM1pFTEZGQlFVRkJMRTFCUVVzc1VVRkJVU3hwUWtGQmFVSXNTVUZCU1N4elFrRkJjMElzWVVGQllTeERRVUZETEVOQlFVTTdRVUZCUVN4TlFVTjZSVHRCUVVOQkxHVkJRVk1zU1VGQlNTeEhRVUZITEVsQlFVa3NZVUZCWVN4TFFVRkxPMEZCUTNCRExGRkJRVUZCTEUxQlFVc3NVVUZCVVN4dFFrRkJiVUlzU1VGQlNTeHZRa0ZCYjBJc1EwRkJRenRCUVVONlJDeFJRVUZCUVN4TlFVRkxMRkZCUVZFc2EwSkJRV3RDTEVsQlFVa3NkVUpCUVhWQ0xHTkJRV01zUTBGQlF5eERRVUZETzBGQlFVRXNUVUZETlVVN1FVRkZRU3hWUVVGSkxFOUJRVzFGTzBGQlEzSkZMR05CUVUwc1JVRkJReXhSUVVGUkxEQkNRVUV3UWl4blEwRkJLMElzU1VGQlNUdEJRVVUxUlN4WlFVRkpMSE5DUVVGelFpeFhRVUZYTEZsQlFWazdRVUZETDBNc1owSkJRVTBzU1VGQlNTeE5RVUZOTERKQ1FVTmFMRlZCUVZVc05FUkJRVFJFTEhOQ1FVRnpRaXhOUVVGTkxFbEJRVWs3UVVGQlFTeFJRVU0xUnp0QlFVZEJMR2xDUVVGVExFbEJRVWtzUjBGQlJ5eEpRVUZKTEZsQlFWa3NTMEZCU3p0QlFVTnVReXhuUWtGQlRTeFJRVUZSTEdGQlFXRXNRMEZCUXp0QlFVTTFRaXhuUWtGQlRVVXNZVUZCV1N4TlFVRk5SaXhOUVVGTExHTkJRV01zVVVGQlVTeHpRa0ZCYzBJc1MwRkJTeXhIUVVGSExHMUNRVUZ0UWl4RFFVRkRMRU5CUVVNN1FVRkRkRWNzWTBGQlNVVXNaVUZCWXl4SFFVRkhPMEZCUTI1Q0xESkNRVUZsTEc5Q1FVRnZRaXhEUVVGRExHbENRVUZwUWl4VFFVRlRMRWRCUVVjN1FVRkJRU3hWUVVOdVJUdEJRVUZCTEZGQlEwWTdRVUZIUVN4cFFrRkJVeXhKUVVGSkxFZEJRVWNzU1VGQlNTeGhRVUZoTEV0QlFVczdRVUZEY0VNc1owSkJRVTBzVVVGQlVTeGpRVUZqTEVOQlFVTTdRVUZETjBJc1owSkJRVTBzVjBGQlZ5eGpRVUZqTEVOQlFVTXNTVUZCU1N4RFFVRkRPMEZCUlhKRExHTkJRVWtzVlVGQlZUdEJRVVZhTEd0Q1FVRk5RU3hoUVVGWlJpeE5RVUZMTEdWQlFXVXNVVUZCVVN4MVFrRkJkVUlzUzBGQlN5eEhRVUZITEc5Q1FVRnZRaXhEUVVGRExFZEJRVWNzUTBGQlF6dEJRVU4wUnl4blFrRkJTVVVzWlVGQll5eEhRVUZITzBGQlEyNUNMRFpDUVVGbExHMURRVUZ0UXl4RFFVRkRMR2xDUVVGcFFpeFRRVUZUTEVkQlFVYzdRVUZCUVN4WlFVTnNSanRCUVVGQkxGVkJRMFlzVDBGQlR6dEJRVVZNTEd0Q1FVRk5RU3hoUVVOR1JpeE5RVUZMTEdWQlFXVXNVVUZCVVN4MVFrRkJkVUlzUzBGQlN5eEhRVUZITEVkQlFVY3NaME5CUVdkRExFdEJRVXNzUTBGQlF6dEJRVU40Unl4blFrRkJTVVVzWlVGQll5eEhRVUZITzBGQlEyNUNMRFpDUVVGbExIRkNRVUZ4UWl4RFFVRkRMRkZCUVZFc2VVSkJRWGxDTEVOQlFVTXNRMEZCUXl4blFrRkJaMElzVTBGQlV5eEhRVUZITzBGQlFVRXNXVUZEZEVjN1FVRkJRU3hWUVVOR08wRkJRVUVzVVVGRFJqdEJRVU5CTEhWQ1FVRmxPMEZCUVVFc1ZVRkRXRHRCUVVGQkxGVkJRMEVzUTBGQlF5eGxRVUZsTEhWQ1FVRjFRaXgzUWtGQmQwSXNaMEpCUVdkQ0xHOUNRVUZ2UWl4SlFVRkpPMEZCUVVFc1VVRkJRenRCUVVGQkxFMUJRemxITzBGQlJVRXNUVUZCUVVZc1RVRkJTeXhwUWtGQmFVSXNZVUZCWVR0QlFVTnVReXhWUVVGSk8wRkJRMG9zVlVGQlNTeFBRVUU0UXp0QlFVTm9SQ3h2UWtGQldTeE5RVUZOUVN4TlFVRkxPMEZCUVVFc1ZVRkRia0k3UVVGQlFTeFZRVUZsTEdWQlFXVTdRVUZCUVN4VlFVRlJPMEZCUVVFc1ZVRkJZVHRCUVVGQkxGVkJRVzlDTzBGQlFVRXNVVUZCWjBJN1FVRkJRU3hOUVVNM1JpeFBRVUZQTzBGQlEwd3NiMEpCUVZrc1RVRkJUVUVzVFVGQlN6dEJRVUZCTEZWQlEyNUNPMEZCUVVFc1ZVRkJaVHRCUVVGQkxGVkJRV3RDTzBGQlFVRXNWVUZCYlVJN1FVRkJRU3hWUVVGWk8wRkJRVUVzVlVGQmJVSTdRVUZCUVN4VlFVTnVSanRCUVVGQkxGVkJRVzlDTzBGQlFVRXNVVUZCWjBJN1FVRkJRU3hOUVVNeFF6dEJRVVZCTEZWQlFVa3NZMEZCWXl4SFFVRkhPMEZCUTI1Q0xIVkNRVUZsTERCQ1FVRXdRanRCUVVGQkxFMUJRek5ETzBGQlJVRXNXVUZCVFN4VFFVRXlRaXhEUVVGRE8wRkJSV3hETEdWQlFWTXNTVUZCU1N4SFFVRkhMRWxCUVVrc1lVRkJZU3hMUVVGTE8wRkJRM0JETEdOQlFVMHNVMEZCVTBFc1RVRkJTeXhSUVVGUkxIRkNRVUZ4UWl4SlFVRkpMRU5CUVVNN1FVRkRkRVFzV1VGQlNTeFhRVUZYTEc5Q1FVRnZRaXhEUVVGRExFZEJRVWM3UVVGRmNrTXNhVUpCUVU4c1MwRkJTeXhqUVVGakxFTkJRVU1zUTBGQlJUdEJRVU0zUWp0QlFVRkJMRkZCUTBZN1FVRkZRU3hqUVVGTkxESkNRVUV5UWtFc1RVRkJTeXhWUVVGVk8wRkJSV2hFTEdOQlFVMHNiVUpCUVcxQ1FTeE5RVUZMTEZkQlFWY3NTVUZCU1N4RFFVRkRPMEZCUlRsRExGbEJRVWtzYlVKQlFXMUNPMEZCUTNaQ0xGbEJRVWtzVFVGQk5rSXNZVUZCWVR0QlFVTTVReXhaUVVGSk8wRkJRMFlzWjBKQlFVMUZMR0ZCUVZsR0xFMUJRVXM3UVVGQlFTeFpRVU51UWp0QlFVRkJMRmxCUVZFN1FVRkJRU3haUVVGclFpeHRRa0ZCYlVJN1FVRkJRU3haUVVGSExHMUNRVUZ0UWp0QlFVRkJMRmxCUVVjc2JVSkJRVzFDTzBGQlFVRXNWVUZCUlR0QlFVTXZSaXhqUVVGSlJTeGxRVUZqTEVkQlFVYzdRVUZEYmtJc01rSkJRV1VzTkVOQlFUUkRMRU5CUVVNc1IwRkJSenRCUVVGQkxGVkJRMnBGTzBGQlEwRXNZMEZCU1N4clFrRkJhMElzYlVKQlFXMUNPMEZCUTNwRExHZENRVUZOTEZkQlFWZEdMRTFCUVVzc1VVRkJVU3hwUWtGQmFVSTdRVUZETDBNc2RVSkJRV0ZCTEUxQlFVc3NVVUZCVVN4cFFrRkJhVUk3UVVGRE0wTXNaMEpCUVUwc1lVRkJZVUVzVFVGQlN5eFJRVUZSTEdsQ1FVRnBRanRCUVVOcVJDeG5Ra0ZCVFN4aFFVRmhRU3hOUVVGTExGRkJRVkVzYVVKQlFXbENPMEZCUTJwRUxHZENRVUZOTEU5QlFVOHNRMEZCUXp0QlFVTmtMRzFDUVVGVFJ5eExRVUZKTEVkQlFVZEJMRXRCUVVrc1dVRkJXVUVzVFVGQlN6dEJRVU51UXl4cFFrRkJTeXhMUVVGTFNDeE5RVUZMTEZGQlFWRXNZVUZCWVN4SlFVRkpSeXhGUVVGRExFTkJRVU03UVVGQlFTeFZRVU0xUXp0QlFVTkJMRlZCUVVGSUxFMUJRVXNzVTBGQlV5eFZRVUZWTzBGQlJYaENMR2RDUVVGTkxFOUJRVThzUzBGQlN5eFBRVUZQTEVOQlFVTXNSMEZCUnl4TlFVRk5MRWxCUVVrc1IwRkJSeXhEUVVGRE8wRkJRek5ETEdsQ1FVRlBMREpDUVVFeVFpeFJRVUZSTzBGQlJURkRMR2RDUVVGTkxHOUNRVUZ2UWl4blFrRkJaMElzZVVKQlFYbENMR05CUVdNc1EwRkJReXhEUVVGRE8wRkJSVzVHTEdOQlFVa3NVMEZCVXl4VlFVRlZPMEZCUTNKQ0xHZENRVUZKTEhOQ1FVRnpRaXhqUVVGak8wRkJRM1JETEc5Q1FVRk5MRWxCUVVrc1RVRkJUU3gzUTBGQmQwTTdRVUZCUVN4WlFVTXhSRHRCUVVOQkxHdENRVUZOTEdGQlFYVkNMRU5CUVVNN1FVRkRPVUlzWjBKQlFVa3NXVUZCV1N4aFFVRmhPMEZCUXpkQ0xIRkNRVUZUUnl4TFFVRkpMRWRCUVVkQkxFdEJRVWtzVFVGQlRVRXNUVUZCU3p0QlFVTTNRaXh2UWtGQlRTeFRRVUZUU0N4TlFVRkxMRkZCUVZFc1YwRkJWenRCUVVOMlF5eHZRa0ZCVFN4cFFrRkJhVUpITEU5QlFVMHNUMEZCVHl4SlFVRkpMRk5CUVZsSUxFMUJRVXNzVVVGQlVTeFRRVUZUTEVsQlFVazdRVUZET1VVc2VVSkJRVmNzUzBGQlMwRXNUVUZCU3l4aFFVRmhMRkZCUVZFc1kwRkJZeXhEUVVGRE8wRkJRVUVzV1VGRE0wUTdRVUZEUVN4dFFrRkJUeXhMUVVGTExFTkJRVU1zVFVGQlRTeE5RVUZOTEZsQlFWa3NTMEZCU3l4RFFVRkRPMEZCUVVFc1ZVRkROME1zVDBGQlR6dEJRVWRNTEdkQ1FVRkpMSE5DUVVGelFpeG5Ra0ZCWjBJc1QwRkJUeXhIUVVGSE8wRkJRMnhFTEc5Q1FVRk5MRmxCUVZsQkxFMUJRVXNzWTBGQll5eFZRVUZWTzBGQlF5OURMRzlDUVVGTkxHTkJRV01zY1VKQlFYRkNMRkZCUVZFN1FVRkRha1FzYTBKQlFVa3NaMEpCUVdkQ0xGVkJRV0VzUTBGQlF5eDVRa0ZCZVVJc1NVRkJTU3hIUVVGSE8wRkJRMmhGTEhOQ1FVRk5MRWxCUVVrc1RVRkJUU3d3UWtGQk1FSXNTVUZCU1N4RlFVRkZPMEZCUVVFc1kwRkRiRVE3UVVGSFFTeHBRMEZCYlVJN1FVRkZia0lzY1VKQlFVOHNTMEZCU3p0QlFVRkJMR2RDUVVOV08wRkJRVUVzWjBKQlFVMDdRVUZCUVN4blFrRkJUVHRCUVVGQkxHdENRVU5XTzBGQlFVRXNhMEpCUTBFc1ZVRkJWVUVzVFVGQlN5eHhRa0ZCY1VJc1YwRkJWeXhQUVVGUExHRkJRV0VzU1VGQlNUdEJRVUZCTEd0Q1FVTjJSU3hUUVVGVExFMUJRVTA3UVVGRFlpeHZRa0ZCUVVFc1RVRkJTeXhyUWtGQmEwSXNUVUZCVFR0QlFVRkJMR3RDUVVNdlFqdEJRVUZCTEdkQ1FVTkdPMEZCUVVFc1owSkJRMEU3UVVGQlFTeGpRVU5HTEVOQlFVTTdRVUZCUVN4WlFVTklMRTlCUVU4N1FVRkRUQ3h2UWtGQlRTeDNRa0ZCZDBJc2EwTkJRV3RETEVsQlFVazdRVUZEY0VVc2IwSkJRVTBzVDBGQlR5eEpRVUZKTEhOQ1FVRnpRaXhKUVVGSk8wRkJRek5ETEd0Q1FVRkpMRmRCUVZjc1MwRkJTeXhSUVVGUkxFdEJRVXNzV1VGQldTeExRVUZMTEZWQlFWVXNSVUZEZGtRc1NVRkJTVUVzVFVGQlN5eFBRVUZQTEZOQlFWTXNXVUZCV1N4aFFVRmhMRXRCUVVzc1ZVRkJWU3hEUVVGRE8wRkJRM1pGTEhGQ1FVRlBMRXRCUVVzc1EwRkJReXhOUVVGTkxFMUJRVTBzVFVGQlRTeExRVUZMTEVOQlFVTTdRVUZCUVN4WlFVTjJRenRCUVVGQkxGVkJRMFk3UVVGQlFTeFJRVU5HTEZWQlFVVTdRVUZEUVN4VlFVRkJRU3hOUVVGTExHRkJRV0VzZDBKQlFYZENPMEZCUXpGRExHTkJRVWtzVTBGQlV5eFpRVUZaTEZsQlFWazdRVUZEYmtNc1dVRkJRVUVzVFVGQlN5eE5RVUZOTEZWQlFWVTdRVUZCUVN4VlFVTjJRanRCUVVOQkxHTkJRVWtzUTBGQlF5eHJRa0ZCYTBJN1FVRkRja0lzV1VGQlFVRXNUVUZCU3l4clFrRkJhMElzVFVGQlRUdEJRVUZCTEZWQlF5OUNPMEZCUVVFc1VVRkRSanRCUVVGQkxFMUJRMFk3UVVGRlFTeFZRVUZKTEd0Q1FVRnJRaXhEUVVGRExHOUNRVUZ2UWp0QlFVTjZReXhSUVVGQlFTeE5RVUZMTEhOQ1FVRnpRaXhsUVVGbExFMUJRVTA3UVVGRGFFUXNkVUpCUVdVN1FVRkJRU3hWUVVOWU8wRkJRVUVzVlVGRFFTeERRVUZETEdWQlFXVXNkVUpCUVhWQ0xIZENRVUYzUWl4blFrRkJaMElzYjBKQlFXOUNMRXRCUVVzN1FVRkJRU3hSUVVGRE8wRkJRVUVzVFVGREwwYzdRVUZEUVN4aFFVRlBPMEZCUVVFc1NVRkRWQ3hWUVVGRk8wRkJRMEVzVFVGQlFVRXNUVUZCU3l4aFFVRmhMR05CUVdNN1FVRkZhRU1zZVVKQlFXMUNMRkZCUVZFc1QwRkJTMEVzVFVGQlN5eHJRa0ZCYTBJc1EwRkJReXhEUVVGRE8wRkJRM3BFTERCQ1FVRnZRaXhSUVVGUkxFOUJRVXRCTEUxQlFVc3NhMEpCUVd0Q0xFTkJRVU1zUTBGQlF6dEJRVU14UkN4M1FrRkJhMElzVVVGQlVTeFBRVUZMUVN4TlFVRkxMRTFCUVUwc1EwRkJReXhEUVVGRE8wRkJSVFZETEZWQlFVa3NjVUpCUVhGQ0xFZEJRVWM3UVVGRE1VSXNVVUZCUVVFc1RVRkJTeXh6UWtGQmMwSXNaMEpCUVdkQ08wRkJRVUVzVFVGRE4wTTdRVUZEUVN4MVFrRkJhVUlzVVVGQlVTeFBRVUZMUVN4TlFVRkxMRTFCUVUwc1EwRkJReXhEUVVGRE8wRkJRVUVzU1VGRE4wTTdRVUZCUVN4RlFVTkdPMEZCUzA4c1RVRkJUU3hsUVVGbExFTkJRVU1zWTBGQk5FSTdRVUZEZGtRc1ZVRkJUVUVzVVVGQlR5eFpRVUZaTzBGQlEzcENMRlZCUVUwc1ZVRkJWU3hsUVVGbExFbEJRVWtzVTBGQlV6dEJRVU0xUXl4UlFVRkpMRU5CUVVNc1UwRkJVenRCUVVOYUxGbEJRVTBzU1VGQlNTeE5RVUZOTEc5Q1FVRnZRanRCUVVGQkxFbEJRM1JETzBGQlEwRXNWVUZCVFN4blFrRkJaMElzVVVGQlVTeERRVUZETzBGQlJ5OUNMRlZCUVUwc2EwSkJRV3RDUVN4TlFVRkxMR2xDUVVGcFFpeGhRVUZoTzBGQlF6TkVMRkZCUVVrc2IwSkJRVzlDTEVkQlFVYzdRVUZEZWtJc2NVSkJRV1VzYVVOQlFXdERPMEZCUVVFc1NVRkRia1E3UVVGRFFTeEpRVUZCUVN4TlFVRkxMRk5CUVZNc1pVRkJaVHRCUVVGQkxFVkJReTlDTzBGQlJVOHNUVUZCVFN3MlFrRkJOa0lzUTBGQlF5eFpRVUZ6UlR0QlFVTXZSeXhWUVVGTkxGVkJRVFpDTEVOQlFVTTdRVUZEY0VNc1pVRkJWeXhWUVVGVkxGTkJRVk03UVVGRE5VSXNXVUZCVFN4UFFVRlBMRTlCUVU4c1EwRkJRenRCUVVOeVFpeFZRVUZKTEVOQlFVTXNUVUZCVFN4UlFVRlJMRWxCUVVrc1MwRkJTeXhaUVVGWkxFMUJRVTA3UVVGRE5VTXNaMEpCUVZFc1MwRkJTeXhMUVVGTExFMUJRVTA3UVVGQlFTeE5RVU14UWp0QlFVRkJMRWxCUTBZN1FVRkRRU3hYUVVGUE8wRkJRVUVzUlVGRFZEczdPMEZETTI1Q1FTeFBRVUZMTEZsQlFWa3NRMEZCUXl4UFFVRXlRenRCUVVNelJDeFZRVUZOTEVWQlFVTXNUVUZCVFN4SlFVRkxMRkZCUVU4c1NVRkJTU3hIUVVGSE8wRkJRMmhETEZGQlFVazdRVUZEUml4alFVRlJMRTFCUVUwN1FVRkJRU3hSUVVOYUxFdEJRVXM3UVVGRFNDeG5RMEZCYzBJc1VVRkJVeXhKUVVGSkxFVkJRemxDTzBGQlFVRXNXVUZEUnl4TlFVRk5PMEZCUTBvc01FSkJRVmtzVDBGQlVTeEZRVUZGTzBGQlFVRXNaMEpCUTJ4Q0xFMUJRVTA3UVVGRFNpdzRRa0ZCV1N4RlFVRkRMRXRCUVVrc1EwRkJRenRCUVVGQkxHZENRVU53UWp0QlFVRkJMR2RDUVVOQkxGTkJRVTg3UVVGRFRDdzRRa0ZCV1N4RlFVRkRMRTFCUVUwc1NVRkJSeXhEUVVGRE8wRkJRVUVzWjBKQlEzcENPMEZCUVVFc1kwRkJRenRCUVVGQkxGbEJRMUE3UVVGQlFTeFpRVU5CTEZOQlFVODdRVUZEVEN3d1FrRkJXU3hGUVVGRExFMUJRVTBzU1VGQlJ5eERRVUZETzBGQlFVRXNXVUZEZWtJN1FVRkJRU3hWUVVGRE8wRkJRMVE3UVVGQlFTeFJRVU5HTEV0QlFVc3NWMEZCVnp0QlFVTmtMR2RDUVVGTkxFVkJRVU1zVVVGQlVTeEpRVUZITEVsQlFVazdRVUZEZEVJc2FVSkJRVThzUzBGQlN5eE5RVUZOTEVWQlEySTdRVUZCUVN4WlFVTkhMRTFCUVUwN1FVRkRTaXd3UWtGQldTeEZRVUZETEV0QlFVa3NRMEZCUXp0QlFVRkJMRmxCUTNCQ08wRkJRVUVzV1VGRFFTeFRRVUZQTzBGQlEwd3NNRUpCUVZrc1JVRkJReXhOUVVGTkxFbEJRVWNzUTBGQlF6dEJRVUZCTEZsQlEzcENPMEZCUVVFc1ZVRkJRenRCUVVOVU8wRkJRVUVzVVVGRFJqdEJRVUZCTEZGQlEwRXNTMEZCU3l4aFFVRmhPMEZCUTJoQ0xHZENRVUZOTEVWQlFVTXNUMEZCVFN4SlFVRkpPMEZCUTJwQ0xHZENRVUZOTEdGQlFXRXNkVUpCUVhWQ0xFMUJRVTA3UVVGRGFFUXNjMEpCUVZrc1JVRkJReXhOUVVGTkxFdEJRVXNzVjBGQlZTeERRVUZ0UWp0QlFVTnlSRHRCUVVGQkxGRkJRMFk3UVVGQlFTeFJRVU5CTEV0QlFVc3NWVUZCVlR0QlFVTmlMR2RDUVVGTkxFVkJRVU1zVDBGQlR5eFJRVUZQTEVsQlFVazdRVUZEZWtJc2QwSkJRV01zVDBGQlR5eFBRVUZQTEVWQlEzWkNPMEZCUVVFc1dVRkRSeXh4UWtGQmJVSTdRVUZEYWtJc01FSkJRVmtzUlVGQlF5eE5RVUZOTEV0QlFVc3NaMEpCUVdVc1EwRkJiVUk3UVVGQlFTeFpRVU0xUkR0QlFVRkJMRmxCUTBFc1UwRkJUenRCUVVOTUxEQkNRVUZaTEVWQlFVTXNUVUZCVFN4SlFVRkhMRU5CUVVNN1FVRkJRU3haUVVONlFqdEJRVUZCTEZWQlFVTTdRVUZEVkR0QlFVRkJMRkZCUTBZN1FVRkJRU3hSUVVOQkxFdEJRVXM3UVVGRFNDeDVRa0ZCWlN4UFFVRlJPMEZCUTNaQ0xITkNRVUZaTEVWQlFVTXNTMEZCU1N4RFFVRkRPMEZCUTJ4Q08wRkJRVUVzVVVGRFJpeExRVUZMTEU5QlFVODdRVUZEVml4blFrRkJUU3hGUVVGRExGZEJRVmNzWTBGQll5eFJRVUZSTEdWQlFXVXNVVUZCVHl4SlFVRkpPMEZCUTJ4RkxHTkJRVWtzVjBGQlZ5eGpRVUZqTEZGQlFWRXNaVUZCWlN4SlFVRkpMRTFCUVUwc1kwRkJZeXhOUVVGTkxFVkJRVVVzUzBGQlN5eEpRVUZKTEVkQlFVY3NUMEZCVHl4RlFVTnNSenRCUVVGQkxGbEJRMGNzWVVGQlZ6dEJRVU5VTEd0Q1FVRkpMRkZCUVZFc1MwRkJTeXhQUVVGTExFVkJRVVVzUTBGQlF5eE5RVUZOTEV0QlFVc3NSMEZCUnp0QlFVTnlReXcwUWtGQldTeEZRVUZETEUxQlFVMHNTMEZCU3l4clJFRkJhVVFzUTBGQlF6dEJRVUZCTEdOQlF6VkZMRTlCUVU4N1FVRkRURHRCUVVGQkxHdENRVU5KTEVWQlFVTXNUVUZCVFN4TFFVRkxMRkZCUVU4N1FVRkJRU3hyUWtGRGJrSXNNa0pCUVRKQ0xFTkJRVU1zUjBGQlJ5eFJRVUZSTEVkQlFVY3NUMEZCVHl4RFFVRnBRenRCUVVGQkxHZENRVUZETzBGQlFVRXNZMEZEZWtZN1FVRkJRU3haUVVOR08wRkJRVUVzV1VGRFFTeFRRVUZQTzBGQlEwd3NNRUpCUVZrc1JVRkJReXhOUVVGTkxFbEJRVWNzUTBGQlF6dEJRVUZCTEZsQlEzcENPMEZCUVVFc1ZVRkJRenRCUVVOVU8wRkJRVUVzVVVGRFJqdEJRVUZCTEZGQlEwRXNTMEZCU3p0QlFVTklMSFZDUVVGaExFOUJRVkU3UVVGRGNrSXNjMEpCUVZrc1JVRkJReXhMUVVGSkxFTkJRVU03UVVGRGJFSTdRVUZCUVN4UlFVTkdPMEZCUVVFc1RVRkRSanRCUVVGQkxFbEJRMFlzVTBGQlV5eExRVUZMTzBGQlExb3NhMEpCUVZrc1JVRkJReXhOUVVGTkxFbEJRVWNzUTBGQmJVSTdRVUZCUVN4SlFVTXpRenRCUVVGQkxFVkJRMFk3SWl3S0lDQWlibUZ0WlhNaU9pQmJJbXB2YVc0aUxDQWlkMkZ6YlNJc0lDSjNZWE50SWl3Z0luZGhjMjBpTENBaWNtVmhaRVpwYkdVaUxDQWljbVZoWkVacGJHVWlMQ0FpZDJGemJTSXNJQ0owWlc1emIzSWlMQ0FpWlhKeWIzSkRiMlJsSWl3Z0lta2lYUXA5Q2c9PVxuIiwgIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuXG5pbXBvcnQge2VudiwgSW5mZXJlbmNlU2Vzc2lvbn0gZnJvbSAnb25ueHJ1bnRpbWUtY29tbW9uJztcblxuaW1wb3J0IHtPcnRXYXNtTWVzc2FnZSwgU2VyaWFsaXphYmxlSW50ZXJuYWxCdWZmZXIsIFNlcmlhbGl6YWJsZVNlc3Npb25NZXRhZGF0YSwgU2VyaWFsaXphYmxlVGVuc29yTWV0YWRhdGEsIFRlbnNvck1ldGFkYXRhfSBmcm9tICcuL3Byb3h5LW1lc3NhZ2VzJztcbmltcG9ydCAqIGFzIGNvcmUgZnJvbSAnLi93YXNtLWNvcmUtaW1wbCc7XG5pbXBvcnQge2luaXRpYWxpemVXZWJBc3NlbWJseX0gZnJvbSAnLi93YXNtLWZhY3RvcnknO1xuXG5jb25zdCBpc1Byb3h5ID0gKCk6IGJvb2xlYW4gPT4gISFlbnYud2FzbS5wcm94eSAmJiB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnO1xubGV0IHByb3h5V29ya2VyOiBXb3JrZXJ8dW5kZWZpbmVkO1xubGV0IGluaXRpYWxpemluZyA9IGZhbHNlO1xubGV0IGluaXRpYWxpemVkID0gZmFsc2U7XG5sZXQgYWJvcnRlZCA9IGZhbHNlO1xuXG50eXBlIFByb21pc2VDYWxsYmFja3M8VCA9IHZvaWQ+ID0gW3Jlc29sdmU6IChyZXN1bHQ6IFQpID0+IHZvaWQsIHJlamVjdDogKHJlYXNvbjogdW5rbm93bikgPT4gdm9pZF07XG5sZXQgaW5pdFdhc21DYWxsYmFja3M6IFByb21pc2VDYWxsYmFja3M7XG5jb25zdCBxdWV1ZWRDYWxsYmFja3M6IE1hcDxPcnRXYXNtTWVzc2FnZVsndHlwZSddLCBBcnJheTxQcm9taXNlQ2FsbGJhY2tzPHVua25vd24+Pj4gPSBuZXcgTWFwKCk7XG5cbmNvbnN0IGVucXVldWVDYWxsYmFja3MgPSAodHlwZTogT3J0V2FzbU1lc3NhZ2VbJ3R5cGUnXSwgY2FsbGJhY2tzOiBQcm9taXNlQ2FsbGJhY2tzPHVua25vd24+KTogdm9pZCA9PiB7XG4gIGNvbnN0IHF1ZXVlID0gcXVldWVkQ2FsbGJhY2tzLmdldCh0eXBlKTtcbiAgaWYgKHF1ZXVlKSB7XG4gICAgcXVldWUucHVzaChjYWxsYmFja3MpO1xuICB9IGVsc2Uge1xuICAgIHF1ZXVlZENhbGxiYWNrcy5zZXQodHlwZSwgW2NhbGxiYWNrc10pO1xuICB9XG59O1xuXG5jb25zdCBlbnN1cmVXb3JrZXIgPSAoKTogdm9pZCA9PiB7XG4gIGlmIChpbml0aWFsaXppbmcgfHwgIWluaXRpYWxpemVkIHx8IGFib3J0ZWQgfHwgIXByb3h5V29ya2VyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCd3b3JrZXIgbm90IHJlYWR5Jyk7XG4gIH1cbn07XG5cbmNvbnN0IG9uUHJveHlXb3JrZXJNZXNzYWdlID0gKGV2OiBNZXNzYWdlRXZlbnQ8T3J0V2FzbU1lc3NhZ2U+KTogdm9pZCA9PiB7XG4gIHN3aXRjaCAoZXYuZGF0YS50eXBlKSB7XG4gICAgY2FzZSAnaW5pdC13YXNtJzpcbiAgICAgIGluaXRpYWxpemluZyA9IGZhbHNlO1xuICAgICAgaWYgKGV2LmRhdGEuZXJyKSB7XG4gICAgICAgIGFib3J0ZWQgPSB0cnVlO1xuICAgICAgICBpbml0V2FzbUNhbGxiYWNrc1sxXShldi5kYXRhLmVycik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpbml0aWFsaXplZCA9IHRydWU7XG4gICAgICAgIGluaXRXYXNtQ2FsbGJhY2tzWzBdKCk7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlICdpbml0LWVwJzpcbiAgICBjYXNlICdjb3B5LWZyb20nOlxuICAgIGNhc2UgJ2NyZWF0ZSc6XG4gICAgY2FzZSAncmVsZWFzZSc6XG4gICAgY2FzZSAncnVuJzpcbiAgICBjYXNlICdlbmQtcHJvZmlsaW5nJzoge1xuICAgICAgY29uc3QgY2FsbGJhY2tzID0gcXVldWVkQ2FsbGJhY2tzLmdldChldi5kYXRhLnR5cGUpITtcbiAgICAgIGlmIChldi5kYXRhLmVycikge1xuICAgICAgICBjYWxsYmFja3Muc2hpZnQoKSFbMV0oZXYuZGF0YS5lcnIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FsbGJhY2tzLnNoaWZ0KCkhWzBdKGV2LmRhdGEub3V0ISk7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgZGVmYXVsdDpcbiAgfVxufTtcblxuY29uc3Qgc2NyaXB0U3JjID0gdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyA/IChkb2N1bWVudD8uY3VycmVudFNjcmlwdCBhcyBIVE1MU2NyaXB0RWxlbWVudCk/LnNyYyA6IHVuZGVmaW5lZDtcblxuZXhwb3J0IGNvbnN0IGluaXRpYWxpemVXZWJBc3NlbWJseUFuZE9ydFJ1bnRpbWUgPSBhc3luYygpOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgaWYgKGluaXRpYWxpemVkKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChpbml0aWFsaXppbmcpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ211bHRpcGxlIGNhbGxzIHRvIFxcJ2luaXRXYXNtKClcXCcgZGV0ZWN0ZWQuJyk7XG4gIH1cbiAgaWYgKGFib3J0ZWQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3ByZXZpb3VzIGNhbGwgdG8gXFwnaW5pdFdhc20oKVxcJyBmYWlsZWQuJyk7XG4gIH1cblxuICBpbml0aWFsaXppbmcgPSB0cnVlO1xuXG4gIGlmICghQlVJTERfREVGUy5ESVNBQkxFX1dBU01fUFJPWFkgJiYgaXNQcm94eSgpKSB7XG4gICAgLy8gb3ZlcndyaXRlIHdhc20gZmlsZXBhdGhzXG4gICAgaWYgKGVudi53YXNtLndhc21QYXRocyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAoc2NyaXB0U3JjICYmIHNjcmlwdFNyYy5pbmRleE9mKCdibG9iOicpICE9PSAwKSB7XG4gICAgICAgIGVudi53YXNtLndhc21QYXRocyA9IHNjcmlwdFNyYy5zdWJzdHIoMCwgKyhzY3JpcHRTcmMpLmxhc3RJbmRleE9mKCcvJykgKyAxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2U8dm9pZD4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgcHJveHlXb3JrZXI/LnRlcm1pbmF0ZSgpO1xuXG4gICAgICBjb25zdCB3b3JrZXJVcmwgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKG5ldyBCbG9iKFxuICAgICAgICAgIFtcbiAgICAgICAgICAgIC8vIFRoaXMgcmVxdWlyZSgpIGZ1bmN0aW9uIGlzIGhhbmRsZWQgYnkgZXNidWlsZCBwbHVnaW4gdG8gbG9hZCBmaWxlIGNvbnRlbnQgYXMgc3RyaW5nLlxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1yZXF1aXJlLWltcG9ydHNcbiAgICAgICAgICAgIHJlcXVpcmUoJy4vcHJveHktd29ya2VyL21haW4nKVxuICAgICAgICAgIF0sXG4gICAgICAgICAge3R5cGU6ICd0ZXh0L2phdmFzY3JpcHQnfSkpO1xuICAgICAgcHJveHlXb3JrZXIgPSBuZXcgV29ya2VyKHdvcmtlclVybCwge25hbWU6ICdvcnQtd2FzbS1wcm94eS13b3JrZXInfSk7XG4gICAgICBwcm94eVdvcmtlci5vbmVycm9yID0gKGV2OiBFcnJvckV2ZW50KSA9PiByZWplY3QoZXYpO1xuICAgICAgcHJveHlXb3JrZXIub25tZXNzYWdlID0gb25Qcm94eVdvcmtlck1lc3NhZ2U7XG4gICAgICBVUkwucmV2b2tlT2JqZWN0VVJMKHdvcmtlclVybCk7XG4gICAgICBpbml0V2FzbUNhbGxiYWNrcyA9IFtyZXNvbHZlLCByZWplY3RdO1xuICAgICAgY29uc3QgbWVzc2FnZTogT3J0V2FzbU1lc3NhZ2UgPSB7dHlwZTogJ2luaXQtd2FzbScsIGluIDogZW52fTtcbiAgICAgIHByb3h5V29ya2VyLnBvc3RNZXNzYWdlKG1lc3NhZ2UpO1xuICAgIH0pO1xuXG4gIH0gZWxzZSB7XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IGluaXRpYWxpemVXZWJBc3NlbWJseShlbnYud2FzbSk7XG4gICAgICBhd2FpdCBjb3JlLmluaXRSdW50aW1lKGVudik7XG4gICAgICBpbml0aWFsaXplZCA9IHRydWU7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgYWJvcnRlZCA9IHRydWU7XG4gICAgICB0aHJvdyBlO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpbml0aWFsaXppbmcgPSBmYWxzZTtcbiAgICB9XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBpbml0aWFsaXplT3J0RXAgPSBhc3luYyhlcE5hbWU6IHN0cmluZyk6IFByb21pc2U8dm9pZD4gPT4ge1xuICBpZiAoIUJVSUxEX0RFRlMuRElTQUJMRV9XQVNNX1BST1hZICYmIGlzUHJveHkoKSkge1xuICAgIGVuc3VyZVdvcmtlcigpO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZTx2b2lkPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBlbnF1ZXVlQ2FsbGJhY2tzKCdpbml0LWVwJywgW3Jlc29sdmUsIHJlamVjdF0pO1xuICAgICAgY29uc3QgbWVzc2FnZTogT3J0V2FzbU1lc3NhZ2UgPSB7dHlwZTogJ2luaXQtZXAnLCBpbiA6IHtlcE5hbWUsIGVudn19O1xuICAgICAgcHJveHlXb3JrZXIhLnBvc3RNZXNzYWdlKG1lc3NhZ2UpO1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIGF3YWl0IGNvcmUuaW5pdEVwKGVudiwgZXBOYW1lKTtcbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IGNvcHlGcm9tRXh0ZXJuYWxCdWZmZXIgPSBhc3luYyhidWZmZXI6IFVpbnQ4QXJyYXkpOiBQcm9taXNlPFNlcmlhbGl6YWJsZUludGVybmFsQnVmZmVyPiA9PiB7XG4gIGlmICghQlVJTERfREVGUy5ESVNBQkxFX1dBU01fUFJPWFkgJiYgaXNQcm94eSgpKSB7XG4gICAgZW5zdXJlV29ya2VyKCk7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlPFNlcmlhbGl6YWJsZUludGVybmFsQnVmZmVyPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBlbnF1ZXVlQ2FsbGJhY2tzKCdjb3B5LWZyb20nLCBbcmVzb2x2ZSwgcmVqZWN0XSk7XG4gICAgICBjb25zdCBtZXNzYWdlOiBPcnRXYXNtTWVzc2FnZSA9IHt0eXBlOiAnY29weS1mcm9tJywgaW4gOiB7YnVmZmVyfX07XG4gICAgICBwcm94eVdvcmtlciEucG9zdE1lc3NhZ2UobWVzc2FnZSwgW2J1ZmZlci5idWZmZXJdKTtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gY29yZS5jb3B5RnJvbUV4dGVybmFsQnVmZmVyKGJ1ZmZlcik7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBjcmVhdGVTZXNzaW9uID1cbiAgICBhc3luYyhtb2RlbDogU2VyaWFsaXphYmxlSW50ZXJuYWxCdWZmZXJ8VWludDhBcnJheSwgb3B0aW9ucz86IEluZmVyZW5jZVNlc3Npb24uU2Vzc2lvbk9wdGlvbnMpOlxuICAgICAgICBQcm9taXNlPFNlcmlhbGl6YWJsZVNlc3Npb25NZXRhZGF0YT4gPT4ge1xuICAgICAgICAgIGlmICghQlVJTERfREVGUy5ESVNBQkxFX1dBU01fUFJPWFkgJiYgaXNQcm94eSgpKSB7XG4gICAgICAgICAgICAvLyBjaGVjayB1bnN1cHBvcnRlZCBvcHRpb25zXG4gICAgICAgICAgICBpZiAob3B0aW9ucz8ucHJlZmVycmVkT3V0cHV0TG9jYXRpb24pIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdzZXNzaW9uIG9wdGlvbiBcInByZWZlcnJlZE91dHB1dExvY2F0aW9uXCIgaXMgbm90IHN1cHBvcnRlZCBmb3IgcHJveHkuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbnN1cmVXb3JrZXIoKTtcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZTxTZXJpYWxpemFibGVTZXNzaW9uTWV0YWRhdGE+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgICAgZW5xdWV1ZUNhbGxiYWNrcygnY3JlYXRlJywgW3Jlc29sdmUsIHJlamVjdF0pO1xuICAgICAgICAgICAgICBjb25zdCBtZXNzYWdlOiBPcnRXYXNtTWVzc2FnZSA9IHt0eXBlOiAnY3JlYXRlJywgaW4gOiB7bW9kZWwsIG9wdGlvbnN9fTtcbiAgICAgICAgICAgICAgY29uc3QgdHJhbnNmZXJhYmxlOiBUcmFuc2ZlcmFibGVbXSA9IFtdO1xuICAgICAgICAgICAgICBpZiAobW9kZWwgaW5zdGFuY2VvZiBVaW50OEFycmF5KSB7XG4gICAgICAgICAgICAgICAgdHJhbnNmZXJhYmxlLnB1c2gobW9kZWwuYnVmZmVyKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBwcm94eVdvcmtlciEucG9zdE1lc3NhZ2UobWVzc2FnZSwgdHJhbnNmZXJhYmxlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gY29yZS5jcmVhdGVTZXNzaW9uKG1vZGVsLCBvcHRpb25zKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG5cbmV4cG9ydCBjb25zdCByZWxlYXNlU2Vzc2lvbiA9IGFzeW5jKHNlc3Npb25JZDogbnVtYmVyKTogUHJvbWlzZTx2b2lkPiA9PiB7XG4gIGlmICghQlVJTERfREVGUy5ESVNBQkxFX1dBU01fUFJPWFkgJiYgaXNQcm94eSgpKSB7XG4gICAgZW5zdXJlV29ya2VyKCk7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlPHZvaWQ+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGVucXVldWVDYWxsYmFja3MoJ3JlbGVhc2UnLCBbcmVzb2x2ZSwgcmVqZWN0XSk7XG4gICAgICBjb25zdCBtZXNzYWdlOiBPcnRXYXNtTWVzc2FnZSA9IHt0eXBlOiAncmVsZWFzZScsIGluIDogc2Vzc2lvbklkfTtcbiAgICAgIHByb3h5V29ya2VyIS5wb3N0TWVzc2FnZShtZXNzYWdlKTtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBjb3JlLnJlbGVhc2VTZXNzaW9uKHNlc3Npb25JZCk7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBydW4gPSBhc3luYyhcbiAgICBzZXNzaW9uSWQ6IG51bWJlciwgaW5wdXRJbmRpY2VzOiBudW1iZXJbXSwgaW5wdXRzOiBUZW5zb3JNZXRhZGF0YVtdLCBvdXRwdXRJbmRpY2VzOiBudW1iZXJbXSxcbiAgICBvdXRwdXRzOiBBcnJheTxUZW5zb3JNZXRhZGF0YXxudWxsPiwgb3B0aW9uczogSW5mZXJlbmNlU2Vzc2lvbi5SdW5PcHRpb25zKTogUHJvbWlzZTxUZW5zb3JNZXRhZGF0YVtdPiA9PiB7XG4gIGlmICghQlVJTERfREVGUy5ESVNBQkxFX1dBU01fUFJPWFkgJiYgaXNQcm94eSgpKSB7XG4gICAgLy8gY2hlY2sgaW5wdXRzIGxvY2F0aW9uXG4gICAgaWYgKGlucHV0cy5zb21lKHQgPT4gdFszXSAhPT0gJ2NwdScpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2lucHV0IHRlbnNvciBvbiBHUFUgaXMgbm90IHN1cHBvcnRlZCBmb3IgcHJveHkuJyk7XG4gICAgfVxuICAgIC8vIGNoZWNrIG91dHB1dHMgbG9jYXRpb25cbiAgICBpZiAob3V0cHV0cy5zb21lKHQgPT4gdCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcigncHJlLWFsbG9jYXRlZCBvdXRwdXQgdGVuc29yIGlzIG5vdCBzdXBwb3J0ZWQgZm9yIHByb3h5LicpO1xuICAgIH1cbiAgICBlbnN1cmVXb3JrZXIoKTtcbiAgICByZXR1cm4gbmV3IFByb21pc2U8U2VyaWFsaXphYmxlVGVuc29yTWV0YWRhdGFbXT4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgZW5xdWV1ZUNhbGxiYWNrcygncnVuJywgW3Jlc29sdmUsIHJlamVjdF0pO1xuICAgICAgY29uc3Qgc2VyaWFsaXphYmxlSW5wdXRzID0gaW5wdXRzIGFzIFNlcmlhbGl6YWJsZVRlbnNvck1ldGFkYXRhW107ICAvLyBldmVyeSBpbnB1dCBpcyBvbiBDUFUuXG4gICAgICBjb25zdCBtZXNzYWdlOiBPcnRXYXNtTWVzc2FnZSA9XG4gICAgICAgICAge3R5cGU6ICdydW4nLCBpbiA6IHtzZXNzaW9uSWQsIGlucHV0SW5kaWNlcywgaW5wdXRzOiBzZXJpYWxpemFibGVJbnB1dHMsIG91dHB1dEluZGljZXMsIG9wdGlvbnN9fTtcbiAgICAgIHByb3h5V29ya2VyIS5wb3N0TWVzc2FnZShtZXNzYWdlLCBjb3JlLmV4dHJhY3RUcmFuc2ZlcmFibGVCdWZmZXJzKHNlcmlhbGl6YWJsZUlucHV0cykpO1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBjb3JlLnJ1bihzZXNzaW9uSWQsIGlucHV0SW5kaWNlcywgaW5wdXRzLCBvdXRwdXRJbmRpY2VzLCBvdXRwdXRzLCBvcHRpb25zKTtcbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IGVuZFByb2ZpbGluZyA9IGFzeW5jKHNlc3Npb25JZDogbnVtYmVyKTogUHJvbWlzZTx2b2lkPiA9PiB7XG4gIGlmICghQlVJTERfREVGUy5ESVNBQkxFX1dBU01fUFJPWFkgJiYgaXNQcm94eSgpKSB7XG4gICAgZW5zdXJlV29ya2VyKCk7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlPHZvaWQ+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGVucXVldWVDYWxsYmFja3MoJ2VuZC1wcm9maWxpbmcnLCBbcmVzb2x2ZSwgcmVqZWN0XSk7XG4gICAgICBjb25zdCBtZXNzYWdlOiBPcnRXYXNtTWVzc2FnZSA9IHt0eXBlOiAnZW5kLXByb2ZpbGluZycsIGluIDogc2Vzc2lvbklkfTtcbiAgICAgIHByb3h5V29ya2VyIS5wb3N0TWVzc2FnZShtZXNzYWdlKTtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBjb3JlLmVuZFByb2ZpbGluZyhzZXNzaW9uSWQpO1xuICB9XG59O1xuIiwgIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuXG5pbXBvcnQge0luZmVyZW5jZVNlc3Npb24sIEluZmVyZW5jZVNlc3Npb25IYW5kbGVyLCBTZXNzaW9uSGFuZGxlciwgVGVuc29yLCBUUkFDRV9GVU5DX0JFR0lOLCBUUkFDRV9GVU5DX0VORH0gZnJvbSAnb25ueHJ1bnRpbWUtY29tbW9uJztcblxuaW1wb3J0IHtTZXJpYWxpemFibGVJbnRlcm5hbEJ1ZmZlciwgVGVuc29yTWV0YWRhdGF9IGZyb20gJy4vcHJveHktbWVzc2FnZXMnO1xuaW1wb3J0IHtjb3B5RnJvbUV4dGVybmFsQnVmZmVyLCBjcmVhdGVTZXNzaW9uLCBlbmRQcm9maWxpbmcsIHJlbGVhc2VTZXNzaW9uLCBydW59IGZyb20gJy4vcHJveHktd3JhcHBlcic7XG5pbXBvcnQge2lzR3B1QnVmZmVyU3VwcG9ydGVkVHlwZX0gZnJvbSAnLi93YXNtLWNvbW1vbic7XG5pbXBvcnQge2xvYWRGaWxlfSBmcm9tICcuL3dhc20tdXRpbHMtbG9hZC1maWxlJztcblxuZXhwb3J0IGNvbnN0IGVuY29kZVRlbnNvck1ldGFkYXRhID0gKHRlbnNvcjogVGVuc29yLCBnZXROYW1lOiAoKSA9PiBzdHJpbmcpOiBUZW5zb3JNZXRhZGF0YSA9PiB7XG4gIHN3aXRjaCAodGVuc29yLmxvY2F0aW9uKSB7XG4gICAgY2FzZSAnY3B1JzpcbiAgICAgIHJldHVybiBbdGVuc29yLnR5cGUsIHRlbnNvci5kaW1zLCB0ZW5zb3IuZGF0YSwgJ2NwdSddO1xuICAgIGNhc2UgJ2dwdS1idWZmZXInOlxuICAgICAgcmV0dXJuIFt0ZW5zb3IudHlwZSwgdGVuc29yLmRpbXMsIHtncHVCdWZmZXI6IHRlbnNvci5ncHVCdWZmZXJ9LCAnZ3B1LWJ1ZmZlciddO1xuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYGludmFsaWQgZGF0YSBsb2NhdGlvbjogJHt0ZW5zb3IubG9jYXRpb259IGZvciAke2dldE5hbWUoKX1gKTtcbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IGRlY29kZVRlbnNvck1ldGFkYXRhID0gKHRlbnNvcjogVGVuc29yTWV0YWRhdGEpOiBUZW5zb3IgPT4ge1xuICBzd2l0Y2ggKHRlbnNvclszXSkge1xuICAgIGNhc2UgJ2NwdSc6XG4gICAgICByZXR1cm4gbmV3IFRlbnNvcih0ZW5zb3JbMF0sIHRlbnNvclsyXSwgdGVuc29yWzFdKTtcbiAgICBjYXNlICdncHUtYnVmZmVyJzoge1xuICAgICAgY29uc3QgZGF0YVR5cGUgPSB0ZW5zb3JbMF07XG4gICAgICBpZiAoIWlzR3B1QnVmZmVyU3VwcG9ydGVkVHlwZShkYXRhVHlwZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBub3Qgc3VwcG9ydGVkIGRhdGEgdHlwZTogJHtkYXRhVHlwZX0gZm9yIGRlc2VyaWFsaXppbmcgR1BVIHRlbnNvcmApO1xuICAgICAgfVxuICAgICAgY29uc3Qge2dwdUJ1ZmZlciwgZG93bmxvYWQsIGRpc3Bvc2V9ID0gdGVuc29yWzJdO1xuICAgICAgcmV0dXJuIFRlbnNvci5mcm9tR3B1QnVmZmVyKGdwdUJ1ZmZlciwge2RhdGFUeXBlLCBkaW1zOiB0ZW5zb3JbMV0sIGRvd25sb2FkLCBkaXNwb3NlfSk7XG4gICAgfVxuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYGludmFsaWQgZGF0YSBsb2NhdGlvbjogJHt0ZW5zb3JbM119YCk7XG4gIH1cbn07XG5cbmV4cG9ydCBjbGFzcyBPbm54cnVudGltZVdlYkFzc2VtYmx5U2Vzc2lvbkhhbmRsZXIgaW1wbGVtZW50cyBJbmZlcmVuY2VTZXNzaW9uSGFuZGxlciB7XG4gIHByaXZhdGUgc2Vzc2lvbklkOiBudW1iZXI7XG5cbiAgaW5wdXROYW1lczogc3RyaW5nW107XG4gIG91dHB1dE5hbWVzOiBzdHJpbmdbXTtcblxuICBhc3luYyBmZXRjaE1vZGVsQW5kQ29weVRvV2FzbU1lbW9yeShwYXRoOiBzdHJpbmcpOiBQcm9taXNlPFNlcmlhbGl6YWJsZUludGVybmFsQnVmZmVyPiB7XG4gICAgLy8gZmV0Y2ggbW9kZWwgZnJvbSB1cmwgYW5kIG1vdmUgdG8gd2FzbSBoZWFwLlxuICAgIHJldHVybiBjb3B5RnJvbUV4dGVybmFsQnVmZmVyKGF3YWl0IGxvYWRGaWxlKHBhdGgpKTtcbiAgfVxuXG4gIGFzeW5jIGxvYWRNb2RlbChwYXRoT3JCdWZmZXI6IHN0cmluZ3xVaW50OEFycmF5LCBvcHRpb25zPzogSW5mZXJlbmNlU2Vzc2lvbi5TZXNzaW9uT3B0aW9ucyk6IFByb21pc2U8dm9pZD4ge1xuICAgIFRSQUNFX0ZVTkNfQkVHSU4oKTtcbiAgICBsZXQgbW9kZWw6IFBhcmFtZXRlcnM8dHlwZW9mIGNyZWF0ZVNlc3Npb24+WzBdO1xuXG4gICAgaWYgKHR5cGVvZiBwYXRoT3JCdWZmZXIgPT09ICdzdHJpbmcnKSB7XG4gICAgICBpZiAodHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmIHByb2Nlc3MudmVyc2lvbnMgJiYgcHJvY2Vzcy52ZXJzaW9ucy5ub2RlKSB7XG4gICAgICAgIC8vIG5vZGVcbiAgICAgICAgbW9kZWwgPSBhd2FpdCBsb2FkRmlsZShwYXRoT3JCdWZmZXIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gYnJvd3NlclxuICAgICAgICAvLyBmZXRjaCBtb2RlbCBhbmQgY29weSB0byB3YXNtIGhlYXAuXG4gICAgICAgIG1vZGVsID0gYXdhaXQgdGhpcy5mZXRjaE1vZGVsQW5kQ29weVRvV2FzbU1lbW9yeShwYXRoT3JCdWZmZXIpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBtb2RlbCA9IHBhdGhPckJ1ZmZlcjtcbiAgICB9XG5cbiAgICBbdGhpcy5zZXNzaW9uSWQsIHRoaXMuaW5wdXROYW1lcywgdGhpcy5vdXRwdXROYW1lc10gPSBhd2FpdCBjcmVhdGVTZXNzaW9uKG1vZGVsLCBvcHRpb25zKTtcbiAgICBUUkFDRV9GVU5DX0VORCgpO1xuICB9XG5cbiAgYXN5bmMgZGlzcG9zZSgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm4gcmVsZWFzZVNlc3Npb24odGhpcy5zZXNzaW9uSWQpO1xuICB9XG5cbiAgYXN5bmMgcnVuKGZlZWRzOiBTZXNzaW9uSGFuZGxlci5GZWVkc1R5cGUsIGZldGNoZXM6IFNlc3Npb25IYW5kbGVyLkZldGNoZXNUeXBlLCBvcHRpb25zOiBJbmZlcmVuY2VTZXNzaW9uLlJ1bk9wdGlvbnMpOlxuICAgICAgUHJvbWlzZTxTZXNzaW9uSGFuZGxlci5SZXR1cm5UeXBlPiB7XG4gICAgVFJBQ0VfRlVOQ19CRUdJTigpO1xuICAgIGNvbnN0IGlucHV0QXJyYXk6IFRlbnNvcltdID0gW107XG4gICAgY29uc3QgaW5wdXRJbmRpY2VzOiBudW1iZXJbXSA9IFtdO1xuICAgIE9iamVjdC5lbnRyaWVzKGZlZWRzKS5mb3JFYWNoKGt2cCA9PiB7XG4gICAgICBjb25zdCBuYW1lID0ga3ZwWzBdO1xuICAgICAgY29uc3QgdGVuc29yID0ga3ZwWzFdO1xuICAgICAgY29uc3QgaW5kZXggPSB0aGlzLmlucHV0TmFtZXMuaW5kZXhPZihuYW1lKTtcbiAgICAgIGlmIChpbmRleCA9PT0gLTEpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBpbnZhbGlkIGlucHV0ICcke25hbWV9J2ApO1xuICAgICAgfVxuICAgICAgaW5wdXRBcnJheS5wdXNoKHRlbnNvcik7XG4gICAgICBpbnB1dEluZGljZXMucHVzaChpbmRleCk7XG4gICAgfSk7XG5cbiAgICBjb25zdCBvdXRwdXRBcnJheTogQXJyYXk8VGVuc29yfG51bGw+ID0gW107XG4gICAgY29uc3Qgb3V0cHV0SW5kaWNlczogbnVtYmVyW10gPSBbXTtcbiAgICBPYmplY3QuZW50cmllcyhmZXRjaGVzKS5mb3JFYWNoKGt2cCA9PiB7XG4gICAgICBjb25zdCBuYW1lID0ga3ZwWzBdO1xuICAgICAgY29uc3QgdGVuc29yID0ga3ZwWzFdO1xuICAgICAgY29uc3QgaW5kZXggPSB0aGlzLm91dHB1dE5hbWVzLmluZGV4T2YobmFtZSk7XG4gICAgICBpZiAoaW5kZXggPT09IC0xKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgaW52YWxpZCBvdXRwdXQgJyR7bmFtZX0nYCk7XG4gICAgICB9XG4gICAgICBvdXRwdXRBcnJheS5wdXNoKHRlbnNvcik7XG4gICAgICBvdXRwdXRJbmRpY2VzLnB1c2goaW5kZXgpO1xuICAgIH0pO1xuXG4gICAgY29uc3QgaW5wdXRzID1cbiAgICAgICAgaW5wdXRBcnJheS5tYXAoKHQsIGkpID0+IGVuY29kZVRlbnNvck1ldGFkYXRhKHQsICgpID0+IGBpbnB1dCBcIiR7dGhpcy5pbnB1dE5hbWVzW2lucHV0SW5kaWNlc1tpXV19XCJgKSk7XG4gICAgY29uc3Qgb3V0cHV0cyA9IG91dHB1dEFycmF5Lm1hcChcbiAgICAgICAgKHQsIGkpID0+IHQgPyBlbmNvZGVUZW5zb3JNZXRhZGF0YSh0LCAoKSA9PiBgb3V0cHV0IFwiJHt0aGlzLm91dHB1dE5hbWVzW291dHB1dEluZGljZXNbaV1dfVwiYCkgOiBudWxsKTtcblxuICAgIGNvbnN0IHJlc3VsdHMgPSBhd2FpdCBydW4odGhpcy5zZXNzaW9uSWQsIGlucHV0SW5kaWNlcywgaW5wdXRzLCBvdXRwdXRJbmRpY2VzLCBvdXRwdXRzLCBvcHRpb25zKTtcblxuICAgIGNvbnN0IHJlc3VsdE1hcDogU2Vzc2lvbkhhbmRsZXIuUmV0dXJuVHlwZSA9IHt9O1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmVzdWx0cy5sZW5ndGg7IGkrKykge1xuICAgICAgcmVzdWx0TWFwW3RoaXMub3V0cHV0TmFtZXNbb3V0cHV0SW5kaWNlc1tpXV1dID0gb3V0cHV0QXJyYXlbaV0gPz8gZGVjb2RlVGVuc29yTWV0YWRhdGEocmVzdWx0c1tpXSk7XG4gICAgfVxuICAgIFRSQUNFX0ZVTkNfRU5EKCk7XG4gICAgcmV0dXJuIHJlc3VsdE1hcDtcbiAgfVxuXG4gIHN0YXJ0UHJvZmlsaW5nKCk6IHZvaWQge1xuICAgIC8vIFRPRE86IGltcGxlbWVudCBwcm9maWxpbmdcbiAgfVxuXG4gIGVuZFByb2ZpbGluZygpOiB2b2lkIHtcbiAgICB2b2lkIGVuZFByb2ZpbGluZyh0aGlzLnNlc3Npb25JZCk7XG4gIH1cbn1cbiIsICIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cblxuaW1wb3J0IHtjcHVzfSBmcm9tICdub2RlOm9zJztcbmltcG9ydCB7QmFja2VuZCwgZW52LCBJbmZlcmVuY2VTZXNzaW9uLCBJbmZlcmVuY2VTZXNzaW9uSGFuZGxlcn0gZnJvbSAnb25ueHJ1bnRpbWUtY29tbW9uJztcblxuaW1wb3J0IHtpbml0aWFsaXplT3J0RXAsIGluaXRpYWxpemVXZWJBc3NlbWJseUFuZE9ydFJ1bnRpbWV9IGZyb20gJy4vd2FzbS9wcm94eS13cmFwcGVyJztcbmltcG9ydCB7T25ueHJ1bnRpbWVXZWJBc3NlbWJseVNlc3Npb25IYW5kbGVyfSBmcm9tICcuL3dhc20vc2Vzc2lvbi1oYW5kbGVyLWluZmVyZW5jZSc7XG5cbi8qKlxuICogVGhpcyBmdW5jdGlvbiBpbml0aWFsaXplcyBhbGwgZmxhZ3MgZm9yIFdlYkFzc2VtYmx5LlxuICpcbiAqIFRob3NlIGZsYWdzIGFyZSBhY2Nlc3NpYmxlIGZyb20gYG9ydC5lbnYud2FzbWAuIFVzZXJzIGFyZSBhbGxvdyB0byBzZXQgdGhvc2UgZmxhZ3MgYmVmb3JlIHRoZSBmaXJzdCBpbmZlcmVuY2Ugc2Vzc2lvblxuICogYmVpbmcgY3JlYXRlZCwgdG8gb3ZlcnJpZGUgZGVmYXVsdCB2YWx1ZS5cbiAqL1xuZXhwb3J0IGNvbnN0IGluaXRpYWxpemVGbGFncyA9ICgpOiB2b2lkID0+IHtcbiAgaWYgKHR5cGVvZiBlbnYud2FzbS5pbml0VGltZW91dCAhPT0gJ251bWJlcicgfHwgZW52Lndhc20uaW5pdFRpbWVvdXQgPCAwKSB7XG4gICAgZW52Lndhc20uaW5pdFRpbWVvdXQgPSAwO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBlbnYud2FzbS5zaW1kICE9PSAnYm9vbGVhbicpIHtcbiAgICBlbnYud2FzbS5zaW1kID0gdHJ1ZTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgZW52Lndhc20ucHJveHkgIT09ICdib29sZWFuJykge1xuICAgIGVudi53YXNtLnByb3h5ID0gZmFsc2U7XG4gIH1cblxuICBpZiAodHlwZW9mIGVudi53YXNtLnRyYWNlICE9PSAnYm9vbGVhbicpIHtcbiAgICBlbnYud2FzbS50cmFjZSA9IGZhbHNlO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBlbnYud2FzbS5udW1UaHJlYWRzICE9PSAnbnVtYmVyJyB8fCAhTnVtYmVyLmlzSW50ZWdlcihlbnYud2FzbS5udW1UaHJlYWRzKSB8fCBlbnYud2FzbS5udW1UaHJlYWRzIDw9IDApIHtcbiAgICAvLyBXZWI6IHdoZW4gY3Jvc3NPcmlnaW5Jc29sYXRlZCBpcyBmYWxzZSwgU2hhcmVkQXJyYXlCdWZmZXIgaXMgbm90IGF2YWlsYWJsZSBzbyBXZWJBc3NlbWJseSB0aHJlYWRzIHdpbGwgbm90IHdvcmsuXG4gICAgLy8gTm9kZS5qczogb25ueHJ1bnRpbWUtd2ViIGRvZXMgbm90IHN1cHBvcnQgbXVsdGktdGhyZWFkcyBpbiBOb2RlLmpzLlxuICAgIGlmICgodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnICYmICFzZWxmLmNyb3NzT3JpZ2luSXNvbGF0ZWQpIHx8XG4gICAgICAgICh0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgcHJvY2Vzcy52ZXJzaW9ucyAmJiBwcm9jZXNzLnZlcnNpb25zLm5vZGUpKSB7XG4gICAgICBlbnYud2FzbS5udW1UaHJlYWRzID0gMTtcbiAgICB9XG4gICAgY29uc3QgbnVtQ3B1TG9naWNhbENvcmVzID0gdHlwZW9mIG5hdmlnYXRvciA9PT0gJ3VuZGVmaW5lZCcgPyBjcHVzKCkubGVuZ3RoIDogbmF2aWdhdG9yLmhhcmR3YXJlQ29uY3VycmVuY3k7XG4gICAgZW52Lndhc20ubnVtVGhyZWFkcyA9IE1hdGgubWluKDQsIE1hdGguY2VpbCgobnVtQ3B1TG9naWNhbENvcmVzIHx8IDEpIC8gMikpO1xuICB9XG59O1xuXG5leHBvcnQgY2xhc3MgT25ueHJ1bnRpbWVXZWJBc3NlbWJseUJhY2tlbmQgaW1wbGVtZW50cyBCYWNrZW5kIHtcbiAgLyoqXG4gICAqIFRoaXMgZnVuY3Rpb24gaW5pdGlhbGl6ZXMgdGhlIFdlYkFzc2VtYmx5IGJhY2tlbmQuXG4gICAqXG4gICAqIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBjYWxsZWQgb25seSBvbmNlIGZvciBlYWNoIGJhY2tlbmQgbmFtZS4gSXQgd2lsbCBiZSBjYWxsZWQgdGhlIGZpcnN0IHRpbWUgd2hlblxuICAgKiBgb3J0LkluZmVyZW5jZVNlc3Npb24uY3JlYXRlKClgIGlzIGNhbGxlZCB3aXRoIGEgcmVnaXN0ZXJlZCBiYWNrZW5kIG5hbWUuXG4gICAqXG4gICAqIEBwYXJhbSBiYWNrZW5kTmFtZSAtIHRoZSByZWdpc3RlcmVkIGJhY2tlbmQgbmFtZS5cbiAgICovXG4gIGFzeW5jIGluaXQoYmFja2VuZE5hbWU6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgIC8vIHBvcHVsYXRlIHdhc20gZmxhZ3NcbiAgICBpbml0aWFsaXplRmxhZ3MoKTtcblxuICAgIC8vIGluaXQgd2FzbVxuICAgIGF3YWl0IGluaXRpYWxpemVXZWJBc3NlbWJseUFuZE9ydFJ1bnRpbWUoKTtcblxuICAgIC8vIHBlcmZvcm1lIEVQIHNwZWNpZmljIGluaXRpYWxpemF0aW9uXG4gICAgYXdhaXQgaW5pdGlhbGl6ZU9ydEVwKGJhY2tlbmROYW1lKTtcbiAgfVxuICBjcmVhdGVJbmZlcmVuY2VTZXNzaW9uSGFuZGxlcihwYXRoOiBzdHJpbmcsIG9wdGlvbnM/OiBJbmZlcmVuY2VTZXNzaW9uLlNlc3Npb25PcHRpb25zKTpcbiAgICAgIFByb21pc2U8SW5mZXJlbmNlU2Vzc2lvbkhhbmRsZXI+O1xuICBjcmVhdGVJbmZlcmVuY2VTZXNzaW9uSGFuZGxlcihidWZmZXI6IFVpbnQ4QXJyYXksIG9wdGlvbnM/OiBJbmZlcmVuY2VTZXNzaW9uLlNlc3Npb25PcHRpb25zKTpcbiAgICAgIFByb21pc2U8SW5mZXJlbmNlU2Vzc2lvbkhhbmRsZXI+O1xuICBhc3luYyBjcmVhdGVJbmZlcmVuY2VTZXNzaW9uSGFuZGxlcihwYXRoT3JCdWZmZXI6IHN0cmluZ3xVaW50OEFycmF5LCBvcHRpb25zPzogSW5mZXJlbmNlU2Vzc2lvbi5TZXNzaW9uT3B0aW9ucyk6XG4gICAgICBQcm9taXNlPEluZmVyZW5jZVNlc3Npb25IYW5kbGVyPiB7XG4gICAgY29uc3QgaGFuZGxlciA9IG5ldyBPbm54cnVudGltZVdlYkFzc2VtYmx5U2Vzc2lvbkhhbmRsZXIoKTtcbiAgICBhd2FpdCBoYW5kbGVyLmxvYWRNb2RlbChwYXRoT3JCdWZmZXIsIG9wdGlvbnMpO1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoaGFuZGxlcik7XG4gIH1cbn1cbiIsICIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cblxuaW1wb3J0IHtJbmZlcmVuY2VTZXNzaW9uLCBUZW5zb3J9IGZyb20gJ29ubnhydW50aW1lLWNvbW1vbic7XG5cbmltcG9ydCB7U2VyaWFsaXphYmxlSW50ZXJuYWxCdWZmZXIsIFRlbnNvck1ldGFkYXRhfSBmcm9tICcuL3Byb3h5LW1lc3NhZ2VzJztcbmltcG9ydCB7c2V0UnVuT3B0aW9uc30gZnJvbSAnLi9ydW4tb3B0aW9ucyc7XG5pbXBvcnQge3NldFNlc3Npb25PcHRpb25zfSBmcm9tICcuL3Nlc3Npb24tb3B0aW9ucyc7XG5pbXBvcnQge2RhdGFMb2NhdGlvblN0cmluZ1RvRW51bSwgdGVuc29yRGF0YVR5cGVFbnVtVG9TdHJpbmcsIHRlbnNvckRhdGFUeXBlU3RyaW5nVG9FbnVtLCB0ZW5zb3JUeXBlVG9UeXBlZEFycmF5Q29uc3RydWN0b3J9IGZyb20gJy4vd2FzbS1jb21tb24nO1xuaW1wb3J0IHtwcmVwYXJlSW5wdXRPdXRwdXRUZW5zb3J9IGZyb20gJy4vd2FzbS1jb3JlLWltcGwnO1xuaW1wb3J0IHtnZXRJbnN0YW5jZX0gZnJvbSAnLi93YXNtLWZhY3RvcnknO1xuaW1wb3J0IHtjaGVja0xhc3RFcnJvcn0gZnJvbSAnLi93YXNtLXV0aWxzJztcblxuY29uc3QgTk9fVFJBSU5fRlVOQ1NfTVNHID1cbiAgICAnQnVpbHQgd2l0aG91dCB0cmFpbmluZyBBUElcXCdzIGVuYWJsZWQuIFVzZSB0aGUgb25ueHJ1bnRpbWUtd2ViL3RyYWluaW5nIGltcG9ydCBmb3IgdHJhaW5pbmcgJyArXG4gICAgJ2Z1bmN0aW9uYWxpdHksIGFuZCBtYWtlIHN1cmUgdGhhdCBhbGwgdGhlIGNvcnJlY3QgYXJ0aWZhY3RzIGFyZSBidWlsdCAmIG1vdmVkIHRvIHRoZSBjb3JyZWN0IGZvbGRlciBpZiAnICtcbiAgICAndXNpbmcgYSBjdXN0b20gYnVpbGQuIENoZWNrIGh0dHBzOi8vb25ueHJ1bnRpbWUuYWkvZG9jcy9idWlsZC93ZWIuaHRtbCBmb3IgbW9yZSBpbmZvcm1hdGlvbi4nO1xuXG4vKipcbiAqIFJ1bnMgdGhlIGNoZWNrTGFzdEVycm9yIGZ1bmN0aW9uIHdoaWNoIHdpbGwgdGhyb3cgYW4gZXJyb3IsIGlmIHRoZSBwcm92aWRlZCBlcnJvciBjb2RlIG1hdGNoZXMgdGhlIHNwZWNpZmllZFxuICogcGF0dGVybiBmb3IgYW4gZXJyb3IgY29kZS5cbiAqIEBwYXJhbSBlcnJDb2RlIG51bWJlciB0byBldmFsdWF0ZWQgZm9yIGlmIGl0J3MgYW4gZXJyb3JcbiAqIEBwYXJhbSBtZXNzYWdlIG1lc3NhZ2UgdG8gcGFzcyBpbnRvIGNoZWNrTGFzdEVycm9yXG4gKiBAcGFyYW0gY2hlY2tOZXFaZXJvIHdoZW4gdHJ1ZSwgdHJlYXRzIG5vdCBlcXVhbCB0byB6ZXJvIGFzIGFuIGVycm9yLlxuICogICAgICAgICAgICAgICAgICAgICBXaGVuIGZhbHNlLCB0cmVhdHMgZXF1YWwgdG8gemVybyBhcyBhbiBlcnJvci5cbiAqL1xuY29uc3QgaWZFcnJDb2RlQ2hlY2tMYXN0RXJyb3IgPSAoZXJyQ29kZTogbnVtYmVyLCBtZXNzYWdlOiBzdHJpbmcsIGNoZWNrTmVxWmVybyA9IHRydWUpID0+IHtcbiAgaWYgKGNoZWNrTmVxWmVybyAmJiBlcnJDb2RlICE9PSAwKSB7XG4gICAgY2hlY2tMYXN0RXJyb3IobWVzc2FnZSk7XG4gIH0gZWxzZSBpZiAoIWNoZWNrTmVxWmVybyAmJiBlcnJDb2RlID09PSAwKSB7XG4gICAgY2hlY2tMYXN0RXJyb3IobWVzc2FnZSk7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBjcmVhdGVDaGVja3BvaW50SGFuZGxlID0gKGNoZWNrcG9pbnREYXRhOiBTZXJpYWxpemFibGVJbnRlcm5hbEJ1ZmZlcik6IG51bWJlciA9PiB7XG4gIGNvbnN0IHdhc20gPSBnZXRJbnN0YW5jZSgpO1xuXG4gIGNvbnN0IFtjaGVja3BvaW50RGF0YU9mZnNldCwgY2hlY2twb2ludERhdGFMZW5ndGhdID0gY2hlY2twb2ludERhdGE7XG4gIGxldCBjaGVja3BvaW50SGFuZGxlID0gMDtcblxuICB0cnkge1xuICAgIGlmICh3YXNtLl9PcnRUcmFpbmluZ0xvYWRDaGVja3BvaW50KSB7XG4gICAgICBjaGVja3BvaW50SGFuZGxlID0gd2FzbS5fT3J0VHJhaW5pbmdMb2FkQ2hlY2twb2ludChjaGVja3BvaW50RGF0YU9mZnNldCwgY2hlY2twb2ludERhdGFMZW5ndGgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoTk9fVFJBSU5fRlVOQ1NfTVNHKTtcbiAgICB9XG5cbiAgICBpZkVyckNvZGVDaGVja0xhc3RFcnJvcihjaGVja3BvaW50SGFuZGxlLCAnRXJyb3Igb2NjdXJyZWQgd2hlbiB0cnlpbmcgdG8gY3JlYXRlIGEgQ2hlY2twb2ludFN0YXRlJywgZmFsc2UpO1xuICAgIHJldHVybiBjaGVja3BvaW50SGFuZGxlO1xuICB9IGNhdGNoIChlKSB7XG4gICAgaWYgKHdhc20uX09ydFRyYWluaW5nUmVsZWFzZUNoZWNrcG9pbnQgJiYgY2hlY2twb2ludEhhbmRsZSAhPT0gMCkge1xuICAgICAgd2FzbS5fT3J0VHJhaW5pbmdSZWxlYXNlQ2hlY2twb2ludChjaGVja3BvaW50SGFuZGxlKTtcbiAgICB9XG4gICAgdGhyb3cgZTtcbiAgfSBmaW5hbGx5IHtcbiAgICAvLyBmcmVlIGJ1ZmZlciBmcm9tIHdhc20gaGVhcFxuICAgIHdhc20uX09ydEZyZWUoY2hlY2twb2ludERhdGFbMF0pO1xuICB9XG59O1xuXG5jb25zdCBnZXRNb2RlbElucHV0T3V0cHV0Q291bnQgPSAodHJhaW5pbmdTZXNzaW9uSWQ6IG51bWJlciwgaXNFdmFsTW9kZWw6IGJvb2xlYW4pOiBbbnVtYmVyLCBudW1iZXJdID0+IHtcbiAgY29uc3Qgd2FzbSA9IGdldEluc3RhbmNlKCk7XG4gIGNvbnN0IHN0YWNrID0gd2FzbS5zdGFja1NhdmUoKTtcbiAgdHJ5IHtcbiAgICBjb25zdCBkYXRhT2Zmc2V0ID0gd2FzbS5zdGFja0FsbG9jKDgpO1xuICAgIGlmICh3YXNtLl9PcnRUcmFpbmluZ0dldE1vZGVsSW5wdXRPdXRwdXRDb3VudCkge1xuICAgICAgY29uc3QgZXJyb3JDb2RlID1cbiAgICAgICAgICB3YXNtLl9PcnRUcmFpbmluZ0dldE1vZGVsSW5wdXRPdXRwdXRDb3VudCh0cmFpbmluZ1Nlc3Npb25JZCwgZGF0YU9mZnNldCwgZGF0YU9mZnNldCArIDQsIGlzRXZhbE1vZGVsKTtcbiAgICAgIGlmRXJyQ29kZUNoZWNrTGFzdEVycm9yKGVycm9yQ29kZSwgJ0NhblxcJ3QgZ2V0IHNlc3Npb24gaW5wdXQvb3V0cHV0IGNvdW50LicpO1xuICAgICAgcmV0dXJuIFt3YXNtLkhFQVAzMltkYXRhT2Zmc2V0IC8gNF0sIHdhc20uSEVBUDMyW2RhdGFPZmZzZXQgLyA0ICsgMV1dO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoTk9fVFJBSU5fRlVOQ1NfTVNHKTtcbiAgICB9XG4gIH0gZmluYWxseSB7XG4gICAgd2FzbS5zdGFja1Jlc3RvcmUoc3RhY2spO1xuICB9XG59O1xuXG5jb25zdCBnZXRNb2RlbElucHV0T3V0cHV0TmFtZXNMb29wID1cbiAgICAodHJhaW5pbmdTZXNzaW9uSWQ6IG51bWJlciwgY291bnQ6IG51bWJlciwgaXNJbnB1dDogYm9vbGVhbiwgaXNFdmFsTW9kZWw6IGJvb2xlYW4pOiBzdHJpbmdbXSA9PiB7XG4gICAgICBjb25zdCBuYW1lcyA9IFtdO1xuICAgICAgY29uc3Qgd2FzbSA9IGdldEluc3RhbmNlKCk7XG5cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xuICAgICAgICBpZiAod2FzbS5fT3J0VHJhaW5pbmdHZXRNb2RlbElucHV0T3V0cHV0TmFtZSkge1xuICAgICAgICAgIGNvbnN0IG5hbWUgPSB3YXNtLl9PcnRUcmFpbmluZ0dldE1vZGVsSW5wdXRPdXRwdXROYW1lKHRyYWluaW5nU2Vzc2lvbklkLCBpLCBpc0lucHV0LCBpc0V2YWxNb2RlbCk7XG4gICAgICAgICAgaWZFcnJDb2RlQ2hlY2tMYXN0RXJyb3IobmFtZSwgYENhbid0IGdldCBpbnB1dCBvciBvdXRwdXQgbmFtZSAtLSBpcyBpbnB1dDogJHtpc0lucHV0fSwgaW5kZXggJHtpfWAsIGZhbHNlKTtcblxuICAgICAgICAgIG5hbWVzLnB1c2god2FzbS5VVEY4VG9TdHJpbmcobmFtZSkpO1xuICAgICAgICAgIHdhc20uX2ZyZWUobmFtZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKE5PX1RSQUlOX0ZVTkNTX01TRyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBuYW1lcztcbiAgICB9O1xuXG5leHBvcnQgY29uc3QgZ2V0TW9kZWxJbnB1dE91dHB1dE5hbWVzID0gKHRyYWluaW5nU2Vzc2lvbklkOiBudW1iZXIsIGlzRXZhbE1vZGVsOiBib29sZWFuKTogW3N0cmluZ1tdLCBzdHJpbmdbXV0gPT4ge1xuICBsZXQgaW5wdXROYW1lczogc3RyaW5nW10gPSBbXTtcbiAgbGV0IG91dHB1dE5hbWVzOiBzdHJpbmdbXSA9IFtdO1xuXG4gIGNvbnN0IFtpbnB1dENvdW50LCBvdXRwdXRDb3VudF0gPSBnZXRNb2RlbElucHV0T3V0cHV0Q291bnQodHJhaW5pbmdTZXNzaW9uSWQsIGlzRXZhbE1vZGVsKTtcblxuICBpbnB1dE5hbWVzID0gZ2V0TW9kZWxJbnB1dE91dHB1dE5hbWVzTG9vcCh0cmFpbmluZ1Nlc3Npb25JZCwgaW5wdXRDb3VudCwgdHJ1ZSwgaXNFdmFsTW9kZWwpO1xuICBvdXRwdXROYW1lcyA9IGdldE1vZGVsSW5wdXRPdXRwdXROYW1lc0xvb3AodHJhaW5pbmdTZXNzaW9uSWQsIG91dHB1dENvdW50LCBmYWxzZSwgaXNFdmFsTW9kZWwpO1xuXG4gIHJldHVybiBbaW5wdXROYW1lcywgb3V0cHV0TmFtZXNdO1xufTtcblxuZXhwb3J0IGNvbnN0IGNyZWF0ZVRyYWluaW5nU2Vzc2lvbkhhbmRsZSA9XG4gICAgKGNoZWNrcG9pbnRIYW5kbGU6IG51bWJlciwgdHJhaW5Nb2RlbERhdGE6IFNlcmlhbGl6YWJsZUludGVybmFsQnVmZmVyLCBldmFsTW9kZWxEYXRhOiBTZXJpYWxpemFibGVJbnRlcm5hbEJ1ZmZlcixcbiAgICAgb3B0aW1pemVyTW9kZWxEYXRhOiBTZXJpYWxpemFibGVJbnRlcm5hbEJ1ZmZlciwgb3B0aW9uczogSW5mZXJlbmNlU2Vzc2lvbi5TZXNzaW9uT3B0aW9ucyk6IG51bWJlciA9PiB7XG4gICAgICBjb25zdCB3YXNtID0gZ2V0SW5zdGFuY2UoKTtcblxuICAgICAgbGV0IHRyYWluaW5nU2Vzc2lvbkhhbmRsZSA9IDA7XG4gICAgICBsZXQgc2Vzc2lvbk9wdGlvbnNIYW5kbGUgPSAwO1xuICAgICAgbGV0IGFsbG9jczogbnVtYmVyW10gPSBbXTtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgW3Nlc3Npb25PcHRpb25zSGFuZGxlLCBhbGxvY3NdID0gc2V0U2Vzc2lvbk9wdGlvbnMob3B0aW9ucyk7XG4gICAgICAgIGlmICh3YXNtLl9PcnRUcmFpbmluZ0NyZWF0ZVNlc3Npb24pIHtcbiAgICAgICAgICB0cmFpbmluZ1Nlc3Npb25IYW5kbGUgPSB3YXNtLl9PcnRUcmFpbmluZ0NyZWF0ZVNlc3Npb24oXG4gICAgICAgICAgICAgIHNlc3Npb25PcHRpb25zSGFuZGxlLCBjaGVja3BvaW50SGFuZGxlLCB0cmFpbk1vZGVsRGF0YVswXSwgdHJhaW5Nb2RlbERhdGFbMV0sIGV2YWxNb2RlbERhdGFbMF0sXG4gICAgICAgICAgICAgIGV2YWxNb2RlbERhdGFbMV0sIG9wdGltaXplck1vZGVsRGF0YVswXSwgb3B0aW1pemVyTW9kZWxEYXRhWzFdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoTk9fVFJBSU5fRlVOQ1NfTVNHKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmRXJyQ29kZUNoZWNrTGFzdEVycm9yKHRyYWluaW5nU2Vzc2lvbkhhbmRsZSwgJ0Vycm9yIG9jY3VycmVkIHdoZW4gdHJ5aW5nIHRvIGNyZWF0ZSBhIFRyYWluaW5nU2Vzc2lvbicsIGZhbHNlKTtcbiAgICAgICAgcmV0dXJuIHRyYWluaW5nU2Vzc2lvbkhhbmRsZTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKHdhc20uX09ydFRyYWluaW5nUmVsZWFzZVNlc3Npb24gJiYgdHJhaW5pbmdTZXNzaW9uSGFuZGxlICE9PSAwKSB7XG4gICAgICAgICAgd2FzbS5fT3J0VHJhaW5pbmdSZWxlYXNlU2Vzc2lvbih0cmFpbmluZ1Nlc3Npb25IYW5kbGUpO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IGU7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICB3YXNtLl9mcmVlKHRyYWluTW9kZWxEYXRhWzBdKTtcbiAgICAgICAgd2FzbS5fZnJlZShldmFsTW9kZWxEYXRhWzBdKTtcbiAgICAgICAgd2FzbS5fZnJlZShvcHRpbWl6ZXJNb2RlbERhdGFbMF0pO1xuXG4gICAgICAgIGlmIChzZXNzaW9uT3B0aW9uc0hhbmRsZSAhPT0gMCkge1xuICAgICAgICAgIHdhc20uX09ydFJlbGVhc2VTZXNzaW9uT3B0aW9ucyhzZXNzaW9uT3B0aW9uc0hhbmRsZSk7XG4gICAgICAgIH1cbiAgICAgICAgYWxsb2NzLmZvckVhY2goYWxsb2MgPT4gd2FzbS5fZnJlZShhbGxvYykpO1xuICAgICAgfVxuICAgIH07XG5cbi8qKlxuICogUHJlcGFyZXMgaW5wdXQgYW5kIG91dHB1dCB0ZW5zb3JzIGJ5IGNyZWF0aW5nIHRoZSB0ZW5zb3JzIGluIHRoZSBXQVNNIHNpZGUgdGhlbiBjcmVhdGVzIGEgbGlzdCBvZiB0aGUgaGFuZGxlcyBvZiB0aGVcbiAqIFdBU00gdGVuc29ycy5cbiAqXG4gKiBAcGFyYW0gdHJhaW5pbmdTZXNzaW9uSWRcbiAqIEBwYXJhbSBpbmRpY2VzIGZvciBlYWNoIHRlbnNvciwgdGhlIGluZGV4IG9mIHRoZSBpbnB1dCBvciBvdXRwdXQgbmFtZSB0aGF0IHRoZSB0ZW5zb3IgY29ycmVzcG9uZHMgd2l0aFxuICogQHBhcmFtIHRlbnNvcnMgbGlzdCBvZiBUZW5zb3JNZXRhRGF0YVxuICogQHBhcmFtIHRlbnNvckhhbmRsZXMgc2hvdWxkIHBhc3MgaW4gYW4gZW1wdHkgbGlzdCBvZiBudW1iZXJzOyBtb2RpZmllZCBpbi1wbGFjZSBieSB0aGlzIG1ldGhvZCAmIHN0b3JlcyB0aGUgcmVzdWx0aW5nXG4gKiAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVzIG9mIHRoZSBhbGxvY2F0ZWQgdGVuc29ycyBvbiB0aGUgaGVhcFxuICogQHBhcmFtIGlucHV0T3V0cHV0QWxsb2NzIG1vZGlmaWVkIGluLXBsYWNlIGJ5IHRoaXMgbWV0aG9kXG4gKiBAcGFyYW0gaW5kZXhBZGQgY29uc3RhbnQgdG8gYWRkIHRvIHRoZSBpbmRleCB0aGF0IGlzIHBhc3NlZCB0byBwcmVwYXJlSW5wdXRPdXRwdXRUZW5zb3JcbiAqL1xuY29uc3QgY3JlYXRlQW5kQWxsb2NhdGVUZW5zb3JzID1cbiAgICAodHJhaW5pbmdTZXNzaW9uSWQ6IG51bWJlciwgaW5kaWNlczogbnVtYmVyW10sIHRlbnNvcnM6IEFycmF5PFRlbnNvck1ldGFkYXRhfG51bGw+LCB0ZW5zb3JIYW5kbGVzOiBudW1iZXJbXSxcbiAgICAgaW5wdXRPdXRwdXRBbGxvY3M6IG51bWJlcltdLCBpbmRleEFkZDogbnVtYmVyKSA9PiB7XG4gICAgICBjb25zdCBjb3VudCA9IGluZGljZXMubGVuZ3RoO1xuXG4gICAgICAvLyBjcmVhdGVzIHRoZSB0ZW5zb3JzXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcbiAgICAgICAgcHJlcGFyZUlucHV0T3V0cHV0VGVuc29yKFxuICAgICAgICAgICAgdGVuc29yc1tpXSwgdGVuc29ySGFuZGxlcywgaW5wdXRPdXRwdXRBbGxvY3MsIHRyYWluaW5nU2Vzc2lvbklkLCBpbmRleEFkZCArIGluZGljZXNbaV0pO1xuICAgICAgfVxuXG4gICAgICAvLyBtb3ZlcyB0byBoZWFwXG4gICAgICBjb25zdCB3YXNtID0gZ2V0SW5zdGFuY2UoKTtcbiAgICAgIGNvbnN0IHZhbHVlc09mZnNldCA9IHdhc20uc3RhY2tBbGxvYyhjb3VudCAqIDQpO1xuICAgICAgbGV0IHZhbHVlc0luZGV4ID0gdmFsdWVzT2Zmc2V0IC8gNDtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xuICAgICAgICB3YXNtLkhFQVBVMzJbdmFsdWVzSW5kZXgrK10gPSB0ZW5zb3JIYW5kbGVzW2ldO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdmFsdWVzT2Zmc2V0O1xuICAgIH07XG5cbi8qKlxuICogUmV0cmlldmVzIHRoZSBpbmZvcm1hdGlvbiBmcm9tIHRoZSBvdXRwdXQgdGVuc29yIGhhbmRsZXMsIGNvcGllcyB0byBhbiBhcnJheSwgYW5kIGZyZWVzIHRoZSBXQVNNIGluZm9ybWF0aW9uXG4gKiBhc3NvY2lhdGVkIHdpdGggdGhlIHRlbnNvciBoYW5kbGUuXG4gKlxuICogQHBhcmFtIG91dHB1dFZhbHVlc09mZnNldFxuICogQHBhcmFtIG91dHB1dENvdW50XG4gKiBAcmV0dXJucyBsaXN0IG9mIFRlbnNvck1ldGFkYXRhIHJldHJpZXZlZCBmcm9tIHRoZSBvdXRwdXQgaGFuZGxlcy5cbiAqL1xuY29uc3QgbW92ZU91dHB1dFRvVGVuc29yTWV0YWRhdGFBcnIgPVxuICAgIChvdXRwdXRWYWx1ZXNPZmZzZXQ6IG51bWJlciwgb3V0cHV0Q291bnQ6IG51bWJlciwgb3V0cHV0VGVuc29ySGFuZGxlczogbnVtYmVyW10sXG4gICAgIG91dHB1dFRlbnNvcnM6IEFycmF5PFRlbnNvck1ldGFkYXRhfG51bGw+KSA9PiB7XG4gICAgICBjb25zdCB3YXNtID0gZ2V0SW5zdGFuY2UoKTtcbiAgICAgIGNvbnN0IG91dHB1dDogVGVuc29yTWV0YWRhdGFbXSA9IFtdO1xuXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG91dHB1dENvdW50OyBpKyspIHtcbiAgICAgICAgY29uc3QgdGVuc29yID0gd2FzbS5IRUFQVTMyW291dHB1dFZhbHVlc09mZnNldCAvIDQgKyBpXTtcbiAgICAgICAgaWYgKHRlbnNvciA9PT0gb3V0cHV0VGVuc29ySGFuZGxlc1tpXSkge1xuICAgICAgICAgIC8vIG91dHB1dCB0ZW5zb3IgaXMgcHJlLWFsbG9jYXRlZC4gbm8gbmVlZCB0byBjb3B5IGRhdGEuXG4gICAgICAgICAgb3V0cHV0LnB1c2gob3V0cHV0VGVuc29yc1tpXSEpO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgYmVmb3JlR2V0VGVuc29yRGF0YVN0YWNrID0gd2FzbS5zdGFja1NhdmUoKTtcbiAgICAgICAgLy8gc3RhY2sgYWxsb2NhdGUgNCBwb2ludGVyIHZhbHVlXG4gICAgICAgIGNvbnN0IHRlbnNvckRhdGFPZmZzZXQgPSB3YXNtLnN0YWNrQWxsb2MoNCAqIDQpO1xuXG4gICAgICAgIGxldCB0eXBlOiBUZW5zb3IuVHlwZXx1bmRlZmluZWQsIGRhdGFPZmZzZXQgPSAwO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNvbnN0IGVycm9yQ29kZSA9IHdhc20uX09ydEdldFRlbnNvckRhdGEoXG4gICAgICAgICAgICAgIHRlbnNvciwgdGVuc29yRGF0YU9mZnNldCwgdGVuc29yRGF0YU9mZnNldCArIDQsIHRlbnNvckRhdGFPZmZzZXQgKyA4LCB0ZW5zb3JEYXRhT2Zmc2V0ICsgMTIpO1xuICAgICAgICAgIGlmRXJyQ29kZUNoZWNrTGFzdEVycm9yKGVycm9yQ29kZSwgYENhbid0IGFjY2VzcyBvdXRwdXQgdGVuc29yIGRhdGEgb24gaW5kZXggJHtpfS5gKTtcblxuICAgICAgICAgIGxldCB0ZW5zb3JEYXRhSW5kZXggPSB0ZW5zb3JEYXRhT2Zmc2V0IC8gNDtcbiAgICAgICAgICBjb25zdCBkYXRhVHlwZSA9IHdhc20uSEVBUFUzMlt0ZW5zb3JEYXRhSW5kZXgrK107XG4gICAgICAgICAgZGF0YU9mZnNldCA9IHdhc20uSEVBUFUzMlt0ZW5zb3JEYXRhSW5kZXgrK107XG4gICAgICAgICAgY29uc3QgZGltc09mZnNldCA9IHdhc20uSEVBUFUzMlt0ZW5zb3JEYXRhSW5kZXgrK107XG4gICAgICAgICAgY29uc3QgZGltc0xlbmd0aCA9IHdhc20uSEVBUFUzMlt0ZW5zb3JEYXRhSW5kZXgrK107XG4gICAgICAgICAgY29uc3QgZGltcyA9IFtdO1xuICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGltc0xlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBkaW1zLnB1c2god2FzbS5IRUFQVTMyW2RpbXNPZmZzZXQgLyA0ICsgaV0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICB3YXNtLl9PcnRGcmVlKGRpbXNPZmZzZXQpO1xuXG4gICAgICAgICAgY29uc3Qgc2l6ZSA9IGRpbXMucmVkdWNlKChhLCBiKSA9PiBhICogYiwgMSk7XG4gICAgICAgICAgdHlwZSA9IHRlbnNvckRhdGFUeXBlRW51bVRvU3RyaW5nKGRhdGFUeXBlKTtcblxuICAgICAgICAgIGlmICh0eXBlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgY29uc3Qgc3RyaW5nRGF0YTogc3RyaW5nW10gPSBbXTtcbiAgICAgICAgICAgIGxldCBkYXRhSW5kZXggPSBkYXRhT2Zmc2V0IC8gNDtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2l6ZTsgaSsrKSB7XG4gICAgICAgICAgICAgIGNvbnN0IG9mZnNldCA9IHdhc20uSEVBUFUzMltkYXRhSW5kZXgrK107XG4gICAgICAgICAgICAgIGNvbnN0IG1heEJ5dGVzVG9SZWFkID0gaSA9PT0gc2l6ZSAtIDEgPyB1bmRlZmluZWQgOiB3YXNtLkhFQVBVMzJbZGF0YUluZGV4XSAtIG9mZnNldDtcbiAgICAgICAgICAgICAgc3RyaW5nRGF0YS5wdXNoKHdhc20uVVRGOFRvU3RyaW5nKG9mZnNldCwgbWF4Qnl0ZXNUb1JlYWQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG91dHB1dC5wdXNoKFt0eXBlLCBkaW1zLCBzdHJpbmdEYXRhLCAnY3B1J10pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCB0eXBlZEFycmF5Q29uc3RydWN0b3IgPSB0ZW5zb3JUeXBlVG9UeXBlZEFycmF5Q29uc3RydWN0b3IodHlwZSk7XG4gICAgICAgICAgICBjb25zdCBkYXRhID0gbmV3IHR5cGVkQXJyYXlDb25zdHJ1Y3RvcihzaXplKTtcbiAgICAgICAgICAgIG5ldyBVaW50OEFycmF5KGRhdGEuYnVmZmVyLCBkYXRhLmJ5dGVPZmZzZXQsIGRhdGEuYnl0ZUxlbmd0aClcbiAgICAgICAgICAgICAgICAuc2V0KHdhc20uSEVBUFU4LnN1YmFycmF5KGRhdGFPZmZzZXQsIGRhdGFPZmZzZXQgKyBkYXRhLmJ5dGVMZW5ndGgpKTtcbiAgICAgICAgICAgIG91dHB1dC5wdXNoKFt0eXBlLCBkaW1zLCBkYXRhLCAnY3B1J10pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICB3YXNtLnN0YWNrUmVzdG9yZShiZWZvcmVHZXRUZW5zb3JEYXRhU3RhY2spO1xuICAgICAgICAgIGlmICh0eXBlID09PSAnc3RyaW5nJyAmJiBkYXRhT2Zmc2V0KSB7XG4gICAgICAgICAgICB3YXNtLl9mcmVlKGRhdGFPZmZzZXQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB3YXNtLl9PcnRSZWxlYXNlVGVuc29yKHRlbnNvcik7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICB9O1xuXG5leHBvcnQgY29uc3QgbGF6eVJlc2V0R3JhZCA9IGFzeW5jKHRyYWluaW5nU2Vzc2lvbklkOiBudW1iZXIpOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgY29uc3Qgd2FzbSA9IGdldEluc3RhbmNlKCk7XG5cbiAgaWYgKHdhc20uX09ydFRyYWluaW5nTGF6eVJlc2V0R3JhZCkge1xuICAgIGNvbnN0IGVycm9yQ29kZSA9IHdhc20uX09ydFRyYWluaW5nTGF6eVJlc2V0R3JhZCh0cmFpbmluZ1Nlc3Npb25JZCk7XG4gICAgaWZFcnJDb2RlQ2hlY2tMYXN0RXJyb3IoZXJyb3JDb2RlLCAnQ2FuXFwndCBjYWxsIGxhenlSZXNldEdyYWQuJyk7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKE5PX1RSQUlOX0ZVTkNTX01TRyk7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBydW5UcmFpblN0ZXAgPSBhc3luYyhcbiAgICB0cmFpbmluZ1Nlc3Npb25JZDogbnVtYmVyLCBpbnB1dEluZGljZXM6IG51bWJlcltdLCBpbnB1dFRlbnNvcnM6IFRlbnNvck1ldGFkYXRhW10sIG91dHB1dEluZGljZXM6IG51bWJlcltdLFxuICAgIG91dHB1dFRlbnNvcnM6IEFycmF5PFRlbnNvck1ldGFkYXRhfG51bGw+LCBvcHRpb25zOiBJbmZlcmVuY2VTZXNzaW9uLlJ1bk9wdGlvbnMpOiBQcm9taXNlPFRlbnNvck1ldGFkYXRhW10+ID0+IHtcbiAgY29uc3Qgd2FzbSA9IGdldEluc3RhbmNlKCk7XG5cbiAgY29uc3QgaW5wdXRDb3VudCA9IGlucHV0SW5kaWNlcy5sZW5ndGg7XG4gIGNvbnN0IG91dHB1dENvdW50ID0gb3V0cHV0SW5kaWNlcy5sZW5ndGg7XG5cbiAgbGV0IHJ1bk9wdGlvbnNIYW5kbGUgPSAwO1xuICBsZXQgcnVuT3B0aW9uc0FsbG9jczogbnVtYmVyW10gPSBbXTtcblxuICBjb25zdCBpbnB1dFRlbnNvckhhbmRsZXM6IG51bWJlcltdID0gW107XG4gIGNvbnN0IG91dHB1dFRlbnNvckhhbmRsZXM6IG51bWJlcltdID0gW107XG4gIGNvbnN0IGlucHV0T3V0cHV0QWxsb2NzOiBudW1iZXJbXSA9IFtdO1xuXG4gIGNvbnN0IGJlZm9yZVJ1blN0YWNrID0gd2FzbS5zdGFja1NhdmUoKTtcblxuICB0cnkge1xuICAgIC8vIHByZXBhcmUgcGFyYW1ldGVycyBieSBtb3ZpbmcgdGhlbSB0byBoZWFwXG4gICAgW3J1bk9wdGlvbnNIYW5kbGUsIHJ1bk9wdGlvbnNBbGxvY3NdID0gc2V0UnVuT3B0aW9ucyhvcHRpb25zKTtcblxuICAgIC8vIGhhbmRsZSBpbnB1dHMgLS0geW91IGRvbid0IHdhbnQgYW55dGhpbmcgYWRkZWQgdG8gdGhlIGluZGV4XG4gICAgY29uc3QgaW5wdXRWYWx1ZXNPZmZzZXQgPSBjcmVhdGVBbmRBbGxvY2F0ZVRlbnNvcnMoXG4gICAgICAgIHRyYWluaW5nU2Vzc2lvbklkLCBpbnB1dEluZGljZXMsIGlucHV0VGVuc29ycywgaW5wdXRUZW5zb3JIYW5kbGVzLCBpbnB1dE91dHB1dEFsbG9jcywgMCk7XG4gICAgLy8gaGFuZGxlIG91dHB1dHNcbiAgICAvLyB5b3Ugd2FudCBpbnB1dENvdW50IHRvIGJlIGFkZGVkIHRvIHRoZSBpbmRleCBvZiBldmVyeSBvdXRwdXQgdGVuc29yIHBhc3NlZCB0byBwcmVwYXJlSW5wdXRPdXRwdXRUZW5zb3JcbiAgICBjb25zdCBvdXRwdXRWYWx1ZXNPZmZzZXQgPSBjcmVhdGVBbmRBbGxvY2F0ZVRlbnNvcnMoXG4gICAgICAgIHRyYWluaW5nU2Vzc2lvbklkLCBvdXRwdXRJbmRpY2VzLCBvdXRwdXRUZW5zb3JzLCBvdXRwdXRUZW5zb3JIYW5kbGVzLCBpbnB1dE91dHB1dEFsbG9jcywgaW5wdXRDb3VudCk7XG5cbiAgICBpZiAod2FzbS5fT3J0VHJhaW5pbmdSdW5UcmFpblN0ZXApIHtcbiAgICAgIGNvbnN0IGVycm9yQ29kZSA9IHdhc20uX09ydFRyYWluaW5nUnVuVHJhaW5TdGVwKFxuICAgICAgICAgIHRyYWluaW5nU2Vzc2lvbklkLCBpbnB1dFZhbHVlc09mZnNldCwgaW5wdXRDb3VudCwgb3V0cHV0VmFsdWVzT2Zmc2V0LCBvdXRwdXRDb3VudCwgcnVuT3B0aW9uc0hhbmRsZSk7XG4gICAgICBpZkVyckNvZGVDaGVja0xhc3RFcnJvcihlcnJvckNvZGUsICdmYWlsZWQgdG8gY2FsbCBPcnRUcmFpbmluZ1J1blRyYWluU3RlcCBpbiB0aGUgV2ViQXNzZW1ibHkgbGF5ZXInKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKE5PX1RSQUlOX0ZVTkNTX01TRyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1vdmVPdXRwdXRUb1RlbnNvck1ldGFkYXRhQXJyKG91dHB1dFZhbHVlc09mZnNldCwgb3V0cHV0Q291bnQsIG91dHB1dFRlbnNvckhhbmRsZXMsIG91dHB1dFRlbnNvcnMpO1xuICB9IGZpbmFsbHkge1xuICAgIHdhc20uc3RhY2tSZXN0b3JlKGJlZm9yZVJ1blN0YWNrKTtcblxuICAgIGlucHV0VGVuc29ySGFuZGxlcy5mb3JFYWNoKHYgPT4gd2FzbS5fT3J0UmVsZWFzZVRlbnNvcih2KSk7XG4gICAgb3V0cHV0VGVuc29ySGFuZGxlcy5mb3JFYWNoKHYgPT4gd2FzbS5fT3J0UmVsZWFzZVRlbnNvcih2KSk7XG4gICAgaW5wdXRPdXRwdXRBbGxvY3MuZm9yRWFjaChwID0+IHdhc20uX2ZyZWUocCkpO1xuXG4gICAgaWYgKHJ1bk9wdGlvbnNIYW5kbGUgIT09IDApIHtcbiAgICAgIHdhc20uX09ydFJlbGVhc2VSdW5PcHRpb25zKHJ1bk9wdGlvbnNIYW5kbGUpO1xuICAgIH1cbiAgICBydW5PcHRpb25zQWxsb2NzLmZvckVhY2gocCA9PiB3YXNtLl9mcmVlKHApKTtcbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IHJ1bk9wdGltaXplclN0ZXAgPVxuICAgIGFzeW5jKHRyYWluaW5nU2Vzc2lvbklkOiBudW1iZXIsIG9wdGlvbnM6IEluZmVyZW5jZVNlc3Npb24uUnVuT3B0aW9ucyk6IFByb21pc2U8dm9pZD4gPT4ge1xuICBjb25zdCB3YXNtID0gZ2V0SW5zdGFuY2UoKTtcblxuICBsZXQgcnVuT3B0aW9uc0hhbmRsZSA9IDA7XG4gIGxldCBydW5PcHRpb25zQWxsb2NzOiBudW1iZXJbXSA9IFtdO1xuXG4gIHRyeSB7XG4gICAgW3J1bk9wdGlvbnNIYW5kbGUsIHJ1bk9wdGlvbnNBbGxvY3NdID0gc2V0UnVuT3B0aW9ucyhvcHRpb25zKTtcblxuICAgIGlmICh3YXNtLl9PcnRUcmFpbmluZ09wdGltaXplclN0ZXApIHtcbiAgICAgIGNvbnN0IGVyckNvZGUgPSB3YXNtLl9PcnRUcmFpbmluZ09wdGltaXplclN0ZXAodHJhaW5pbmdTZXNzaW9uSWQsIHJ1bk9wdGlvbnNIYW5kbGUpO1xuICAgICAgaWZFcnJDb2RlQ2hlY2tMYXN0RXJyb3IoZXJyQ29kZSwgJ0ZhaWxlZCB0byBjYWxsIE9ydFRyYWluaW5nT3B0aW1pemVyU3RlcCBpbiB0aGUgV2ViQXNzZW1ibHkgbGF5ZXInKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKE5PX1RSQUlOX0ZVTkNTX01TRyk7XG4gICAgfVxuICB9IGZpbmFsbHkge1xuICAgIGlmIChydW5PcHRpb25zSGFuZGxlICE9PSAwKSB7XG4gICAgICB3YXNtLl9PcnRSZWxlYXNlUnVuT3B0aW9ucyhydW5PcHRpb25zSGFuZGxlKTtcbiAgICB9XG4gICAgcnVuT3B0aW9uc0FsbG9jcy5mb3JFYWNoKHAgPT4gd2FzbS5fZnJlZShwKSk7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBydW5FdmFsU3RlcCA9IGFzeW5jKFxuICAgIHRyYWluaW5nU2Vzc2lvbklkOiBudW1iZXIsIGlucHV0SW5kaWNlczogbnVtYmVyW10sIGlucHV0VGVuc29yczogVGVuc29yTWV0YWRhdGFbXSwgb3V0cHV0SW5kaWNlczogbnVtYmVyW10sXG4gICAgb3V0cHV0VGVuc29yczogQXJyYXk8VGVuc29yTWV0YWRhdGF8bnVsbD4sIG9wdGlvbnM6IEluZmVyZW5jZVNlc3Npb24uUnVuT3B0aW9ucyk6IFByb21pc2U8VGVuc29yTWV0YWRhdGFbXT4gPT4ge1xuICBjb25zdCB3YXNtID0gZ2V0SW5zdGFuY2UoKTtcblxuICBjb25zdCBpbnB1dENvdW50ID0gaW5wdXRJbmRpY2VzLmxlbmd0aDtcbiAgY29uc3Qgb3V0cHV0Q291bnQgPSBvdXRwdXRJbmRpY2VzLmxlbmd0aDtcblxuICBsZXQgcnVuT3B0aW9uc0hhbmRsZSA9IDA7XG4gIGxldCBydW5PcHRpb25zQWxsb2NzOiBudW1iZXJbXSA9IFtdO1xuXG4gIGNvbnN0IGlucHV0VGVuc29ySGFuZGxlczogbnVtYmVyW10gPSBbXTtcbiAgY29uc3Qgb3V0cHV0VGVuc29ySGFuZGxlczogbnVtYmVyW10gPSBbXTtcbiAgY29uc3QgaW5wdXRPdXRwdXRBbGxvY3M6IG51bWJlcltdID0gW107XG5cbiAgY29uc3QgYmVmb3JlUnVuU3RhY2sgPSB3YXNtLnN0YWNrU2F2ZSgpO1xuXG4gIHRyeSB7XG4gICAgLy8gcHJlcGFyZSBwYXJhbWV0ZXJzIGJ5IG1vdmluZyB0aGVtIHRvIGhlYXBcbiAgICBbcnVuT3B0aW9uc0hhbmRsZSwgcnVuT3B0aW9uc0FsbG9jc10gPSBzZXRSdW5PcHRpb25zKG9wdGlvbnMpO1xuXG4gICAgLy8gaGFuZGxlIGlucHV0cyAtLSB5b3UgZG9uJ3Qgd2FudCBhbnl0aGluZyBhZGRlZCB0byB0aGUgaW5kZXhcbiAgICBjb25zdCBpbnB1dFZhbHVlc09mZnNldCA9IGNyZWF0ZUFuZEFsbG9jYXRlVGVuc29ycyhcbiAgICAgICAgdHJhaW5pbmdTZXNzaW9uSWQsIGlucHV0SW5kaWNlcywgaW5wdXRUZW5zb3JzLCBpbnB1dFRlbnNvckhhbmRsZXMsIGlucHV0T3V0cHV0QWxsb2NzLCAwKTtcbiAgICAvLyBoYW5kbGUgb3V0cHV0c1xuICAgIC8vIHlvdSB3YW50IGlucHV0Q291bnQgdG8gYmUgYWRkZWQgdG8gdGhlIGluZGV4IG9mIGV2ZXJ5IG91dHB1dCB0ZW5zb3IgcGFzc2VkIHRvIHByZXBhcmVJbnB1dE91dHB1dFRlbnNvclxuICAgIGNvbnN0IG91dHB1dFZhbHVlc09mZnNldCA9IGNyZWF0ZUFuZEFsbG9jYXRlVGVuc29ycyhcbiAgICAgICAgdHJhaW5pbmdTZXNzaW9uSWQsIG91dHB1dEluZGljZXMsIG91dHB1dFRlbnNvcnMsIG91dHB1dFRlbnNvckhhbmRsZXMsIGlucHV0T3V0cHV0QWxsb2NzLCBpbnB1dENvdW50KTtcblxuICAgIGlmICh3YXNtLl9PcnRUcmFpbmluZ0V2YWxTdGVwKSB7XG4gICAgICBjb25zdCBlcnJvckNvZGUgPSB3YXNtLl9PcnRUcmFpbmluZ0V2YWxTdGVwKFxuICAgICAgICAgIHRyYWluaW5nU2Vzc2lvbklkLCBpbnB1dFZhbHVlc09mZnNldCwgaW5wdXRDb3VudCwgb3V0cHV0VmFsdWVzT2Zmc2V0LCBvdXRwdXRDb3VudCwgcnVuT3B0aW9uc0hhbmRsZSk7XG5cbiAgICAgIGlmRXJyQ29kZUNoZWNrTGFzdEVycm9yKGVycm9yQ29kZSwgJ2ZhaWxlZCB0byBjYWxsIE9ydFRyYWluaW5nRXZhbFN0ZXAgaW4gdGhlIFdlYkFzc2VtYmx5IGxheWVyJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihOT19UUkFJTl9GVU5DU19NU0cpO1xuICAgIH1cblxuICAgIHJldHVybiBtb3ZlT3V0cHV0VG9UZW5zb3JNZXRhZGF0YUFycihvdXRwdXRWYWx1ZXNPZmZzZXQsIG91dHB1dENvdW50LCBvdXRwdXRUZW5zb3JIYW5kbGVzLCBvdXRwdXRUZW5zb3JzKTtcbiAgfSBmaW5hbGx5IHtcbiAgICB3YXNtLnN0YWNrUmVzdG9yZShiZWZvcmVSdW5TdGFjayk7XG5cbiAgICBpbnB1dFRlbnNvckhhbmRsZXMuZm9yRWFjaCh2ID0+IHdhc20uX09ydFJlbGVhc2VUZW5zb3IodikpO1xuICAgIG91dHB1dFRlbnNvckhhbmRsZXMuZm9yRWFjaCh2ID0+IHdhc20uX09ydFJlbGVhc2VUZW5zb3IodikpO1xuICAgIGlucHV0T3V0cHV0QWxsb2NzLmZvckVhY2gocCA9PiB3YXNtLl9mcmVlKHApKTtcblxuICAgIGlmIChydW5PcHRpb25zSGFuZGxlICE9PSAwKSB7XG4gICAgICB3YXNtLl9PcnRSZWxlYXNlUnVuT3B0aW9ucyhydW5PcHRpb25zSGFuZGxlKTtcbiAgICB9XG4gICAgcnVuT3B0aW9uc0FsbG9jcy5mb3JFYWNoKHAgPT4gd2FzbS5fZnJlZShwKSk7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBnZXRQYXJhbWV0ZXJzU2l6ZSA9ICh0cmFpbmluZ1Nlc3Npb25JZDogbnVtYmVyLCB0cmFpbmFibGVPbmx5OiBib29sZWFuKTogbnVtYmVyID0+IHtcbiAgY29uc3Qgd2FzbSA9IGdldEluc3RhbmNlKCk7XG4gIGNvbnN0IHN0YWNrID0gd2FzbS5zdGFja1NhdmUoKTtcblxuICB0cnkge1xuICAgIGNvbnN0IHNpemVPZmZzZXQgPSB3YXNtLnN0YWNrQWxsb2MoNCk7XG4gICAgaWYgKHdhc20uX09ydFRyYWluaW5nR2V0UGFyYW1ldGVyc1NpemUpIHtcbiAgICAgIGNvbnN0IGVycm9yQ29kZSA9IHdhc20uX09ydFRyYWluaW5nR2V0UGFyYW1ldGVyc1NpemUodHJhaW5pbmdTZXNzaW9uSWQsIHNpemVPZmZzZXQsIHRyYWluYWJsZU9ubHkpO1xuICAgICAgaWZFcnJDb2RlQ2hlY2tMYXN0RXJyb3IoZXJyb3JDb2RlLCAnQ2FuXFwndCBnZXQgcGFyYW1ldGVycyBzaXplJyk7XG5cbiAgICAgIHJldHVybiB3YXNtLkhFQVAzMltzaXplT2Zmc2V0IC8gNF07XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihOT19UUkFJTl9GVU5DU19NU0cpO1xuICAgIH1cbiAgfSBmaW5hbGx5IHtcbiAgICB3YXNtLnN0YWNrUmVzdG9yZShzdGFjayk7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBnZXRDb250aWd1b3VzUGFyYW1ldGVycyA9XG4gICAgYXN5bmModHJhaW5pbmdTZXNzaW9uSWQ6IG51bWJlciwgdHJhaW5hYmxlT25seTogYm9vbGVhbik6IFByb21pc2U8VGVuc29yTWV0YWRhdGE+ID0+IHtcbiAgY29uc3Qgd2FzbSA9IGdldEluc3RhbmNlKCk7XG4gIGNvbnN0IHN0YWNrID0gd2FzbS5zdGFja1NhdmUoKTtcblxuICBjb25zdCB0ZW5zb3JUeXBlQXNTdHJpbmcgPSAnZmxvYXQzMic7XG4gIGNvbnN0IGxvY2F0aW9uQXNTdHJpbmcgPSAnY3B1JztcblxuICBjb25zdCBwYXJhbWV0ZXJzU2l6ZSA9IGdldFBhcmFtZXRlcnNTaXplKHRyYWluaW5nU2Vzc2lvbklkLCB0cmFpbmFibGVPbmx5KTtcbiAgbGV0IHRlbnNvciA9IDA7XG5cbiAgLy8gYWxsb2NhdGVzIGEgYnVmZmVyIG9mIHRoZSBjb3JyZWN0IHNpemUgb24gdGhlIFdBU00gaGVhcFxuICBjb25zdCBwYXJhbXNCeXRlTGVuZ3RoID0gNCAqIHBhcmFtZXRlcnNTaXplO1xuICBjb25zdCBwYXJhbXNPZmZzZXQgPSB3YXNtLl9tYWxsb2MocGFyYW1zQnl0ZUxlbmd0aCk7XG5cbiAgLy8gaGFuZGxlcyB0aGUgZGltZW5zaW9ucy1yZWxhdGVkIGNyZWF0ZVRlbnNvciBwYXJhbWV0ZXJzXG4gIGNvbnN0IGRpbXMgPSBbcGFyYW1ldGVyc1NpemVdO1xuXG4gIGNvbnN0IGRpbXNPZmZzZXQgPSB3YXNtLnN0YWNrQWxsb2MoNCk7XG4gIGNvbnN0IGRpbXNJbmRleCA9IGRpbXNPZmZzZXQgLyA0O1xuICB3YXNtLkhFQVAzMltkaW1zSW5kZXhdID0gcGFyYW1ldGVyc1NpemU7XG5cbiAgdHJ5IHtcbiAgICAvLyB3cmFwcyBhbGxvY2F0ZWQgYXJyYXkgaW4gYSB0ZW5zb3JcbiAgICB0ZW5zb3IgPSB3YXNtLl9PcnRDcmVhdGVUZW5zb3IoXG4gICAgICAgIHRlbnNvckRhdGFUeXBlU3RyaW5nVG9FbnVtKHRlbnNvclR5cGVBc1N0cmluZyksIHBhcmFtc09mZnNldCwgcGFyYW1zQnl0ZUxlbmd0aCwgZGltc09mZnNldCwgZGltcy5sZW5ndGgsXG4gICAgICAgIGRhdGFMb2NhdGlvblN0cmluZ1RvRW51bShsb2NhdGlvbkFzU3RyaW5nKSk7XG4gICAgaWZFcnJDb2RlQ2hlY2tMYXN0RXJyb3IoXG4gICAgICAgIHRlbnNvciwgYENhbid0IGNyZWF0ZSB0ZW5zb3IgZm9yIGdldENvbnRpZ3VvdXNQYXJhbWV0ZXJzLiBzZXNzaW9uPSR7dHJhaW5pbmdTZXNzaW9uSWR9LmAsIGZhbHNlKTtcblxuICAgIGlmICh3YXNtLl9PcnRUcmFpbmluZ0NvcHlQYXJhbWV0ZXJzVG9CdWZmZXIpIHtcbiAgICAgIGNvbnN0IGVyckNvZGUgPSB3YXNtLl9PcnRUcmFpbmluZ0NvcHlQYXJhbWV0ZXJzVG9CdWZmZXIodHJhaW5pbmdTZXNzaW9uSWQsIHRlbnNvciwgcGFyYW1ldGVyc1NpemUsIHRyYWluYWJsZU9ubHkpO1xuICAgICAgaWZFcnJDb2RlQ2hlY2tMYXN0RXJyb3IoZXJyQ29kZSwgJ0NhblxcJ3QgZ2V0IGNvbnRpZ3VvdXMgcGFyYW1ldGVycy4nKTtcblxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoTk9fVFJBSU5fRlVOQ1NfTVNHKTtcbiAgICB9XG5cbiAgICAvLyBjb3BpZXMgZnJvbSBXQVNNIG1lbW9yeSB0byBhIEphdmFTY3JpcHQgdHlwZWQgYXJyYXksIHdoaWNoIGlzIHRoZW4gcHV0IGludG8gYSBUZW5zb3JNZXRhZGF0YSBvYmplY3RcbiAgICBjb25zdCB0eXBlZEFycmF5Q29uc3RydWN0b3IgPSB0ZW5zb3JUeXBlVG9UeXBlZEFycmF5Q29uc3RydWN0b3IodGVuc29yVHlwZUFzU3RyaW5nKTtcbiAgICBjb25zdCBkYXRhID0gbmV3IHR5cGVkQXJyYXlDb25zdHJ1Y3RvcihwYXJhbWV0ZXJzU2l6ZSk7XG4gICAgY29uc3Qgb3V0cHV0OiBUZW5zb3JNZXRhZGF0YVtdID0gW107XG4gICAgbmV3IFVpbnQ4QXJyYXkoZGF0YS5idWZmZXIsIGRhdGEuYnl0ZU9mZnNldCwgZGF0YS5ieXRlTGVuZ3RoKVxuICAgICAgICAuc2V0KHdhc20uSEVBUFU4LnN1YmFycmF5KHBhcmFtc09mZnNldCwgcGFyYW1zT2Zmc2V0ICsgcGFyYW1zQnl0ZUxlbmd0aCkpO1xuICAgIG91dHB1dC5wdXNoKFt0ZW5zb3JUeXBlQXNTdHJpbmcsIGRpbXMsIGRhdGEsIGxvY2F0aW9uQXNTdHJpbmddKTtcbiAgICBpZiAob3V0cHV0Lmxlbmd0aCAhPT0gMSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBzb21ldGhpbmcgdW5leHBlY3RlZCBoYXBwZW5lZCBpbiB0aGUgZ2V0Q29udGlndW91c1BhcmFtZXRlcnMgZnVuY3Rpb24uIEV4cGVjdGVkIG91dHB1dCBsZW5ndGggb2ZcbiAgICAgb25lLCBnb3QgJHtvdXRwdXQubGVuZ3RofWApO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gb3V0cHV0WzBdO1xuICAgIH1cbiAgfSBmaW5hbGx5IHtcbiAgICBpZiAodGVuc29yICE9PSAwKSB7XG4gICAgICB3YXNtLl9PcnRSZWxlYXNlVGVuc29yKHRlbnNvcik7XG4gICAgfVxuICAgIHdhc20uX2ZyZWUocGFyYW1zT2Zmc2V0KTtcbiAgICB3YXNtLl9mcmVlKGRpbXNPZmZzZXQpO1xuICAgIHdhc20uc3RhY2tSZXN0b3JlKHN0YWNrKTtcbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IGxvYWRQYXJhbWV0ZXJzQnVmZmVyID1cbiAgICBhc3luYyh0cmFpbmluZ1Nlc3Npb25JZDogbnVtYmVyLCBidWZmZXI6IFVpbnQ4QXJyYXksIHRyYWluYWJsZU9ubHk6IGJvb2xlYW4pOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgY29uc3Qgd2FzbSA9IGdldEluc3RhbmNlKCk7XG4gIGNvbnN0IHN0YWNrID0gd2FzbS5zdGFja1NhdmUoKTtcblxuICBjb25zdCB0ZW5zb3JUeXBlQXNTdHJpbmcgPSAnZmxvYXQzMic7XG4gIGNvbnN0IGxvY2F0aW9uQXNTdHJpbmcgPSAnY3B1JztcblxuICAvLyBhbGxvY2F0ZXMgJiBjb3BpZXMgSmF2YVNjcmlwdCBidWZmZXIgdG8gV0FTTSBoZWFwXG4gIGNvbnN0IGJ1ZmZlckJ5dGVMZW5ndGggPSBidWZmZXIubGVuZ3RoO1xuICBjb25zdCBidWZmZXJDb3VudCA9IGJ1ZmZlckJ5dGVMZW5ndGggLyA0O1xuICBjb25zdCBidWZmZXJPZmZzZXQgPSB3YXNtLl9tYWxsb2MoYnVmZmVyQnl0ZUxlbmd0aCk7XG4gIHdhc20uSEVBUFU4LnNldChidWZmZXIsIGJ1ZmZlck9mZnNldCk7XG5cbiAgLy8gYWxsb2NhdGVzIGFuZCBoYW5kbGVzIG1vdmluZyBkaW1lbnNpb25zIGluZm9ybWF0aW9uIHRvIFdBU00gbWVtb3J5XG4gIGNvbnN0IGRpbXNPZmZzZXQgPSB3YXNtLnN0YWNrQWxsb2MoNCk7XG4gIHdhc20uSEVBUDMyW2RpbXNPZmZzZXQgLyA0XSA9IGJ1ZmZlckNvdW50O1xuICBjb25zdCBkaW1zTGVuZ3RoID0gMTtcbiAgbGV0IHRlbnNvciA9IDA7XG5cbiAgdHJ5IHtcbiAgICB0ZW5zb3IgPSB3YXNtLl9PcnRDcmVhdGVUZW5zb3IoXG4gICAgICAgIHRlbnNvckRhdGFUeXBlU3RyaW5nVG9FbnVtKHRlbnNvclR5cGVBc1N0cmluZyksIGJ1ZmZlck9mZnNldCwgYnVmZmVyQnl0ZUxlbmd0aCwgZGltc09mZnNldCwgZGltc0xlbmd0aCxcbiAgICAgICAgZGF0YUxvY2F0aW9uU3RyaW5nVG9FbnVtKGxvY2F0aW9uQXNTdHJpbmcpKTtcbiAgICBpZkVyckNvZGVDaGVja0xhc3RFcnJvcih0ZW5zb3IsIGBDYW4ndCBjcmVhdGUgdGVuc29yIGZvciBpbnB1dC9vdXRwdXQuIHNlc3Npb249JHt0cmFpbmluZ1Nlc3Npb25JZH1gLCBmYWxzZSk7XG5cbiAgICBpZiAod2FzbS5fT3J0VHJhaW5pbmdDb3B5UGFyYW1ldGVyc0Zyb21CdWZmZXIpIHtcbiAgICAgIGNvbnN0IGVyckNvZGUgPSB3YXNtLl9PcnRUcmFpbmluZ0NvcHlQYXJhbWV0ZXJzRnJvbUJ1ZmZlcih0cmFpbmluZ1Nlc3Npb25JZCwgdGVuc29yLCBidWZmZXJDb3VudCwgdHJhaW5hYmxlT25seSk7XG4gICAgICBpZkVyckNvZGVDaGVja0xhc3RFcnJvcihlcnJDb2RlLCAnQ2FuXFwndCBjb3B5IGJ1ZmZlciB0byBwYXJhbWV0ZXJzLicpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoTk9fVFJBSU5fRlVOQ1NfTVNHKTtcbiAgICB9XG4gIH0gZmluYWxseSB7XG4gICAgaWYgKHRlbnNvciAhPT0gMCkge1xuICAgICAgd2FzbS5fT3J0UmVsZWFzZVRlbnNvcih0ZW5zb3IpO1xuICAgIH1cbiAgICB3YXNtLnN0YWNrUmVzdG9yZShzdGFjayk7XG4gICAgd2FzbS5fZnJlZShidWZmZXJPZmZzZXQpO1xuICAgIHdhc20uX2ZyZWUoZGltc09mZnNldCk7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCByZWxlYXNlVHJhaW5pbmdTZXNzaW9uQW5kQ2hlY2twb2ludCA9IChjaGVja3BvaW50SWQ6IG51bWJlciwgc2Vzc2lvbklkOiBudW1iZXIpOiB2b2lkID0+IHtcbiAgY29uc3Qgd2FzbSA9IGdldEluc3RhbmNlKCk7XG5cbiAgaWYgKHdhc20uX09ydFRyYWluaW5nUmVsZWFzZVNlc3Npb24pIHtcbiAgICB3YXNtLl9PcnRUcmFpbmluZ1JlbGVhc2VTZXNzaW9uKHNlc3Npb25JZCk7XG4gIH1cbiAgaWYgKHdhc20uX09ydFRyYWluaW5nUmVsZWFzZUNoZWNrcG9pbnQpIHtcbiAgICB3YXNtLl9PcnRUcmFpbmluZ1JlbGVhc2VDaGVja3BvaW50KGNoZWNrcG9pbnRJZCk7XG4gIH1cbn07XG4iLCAiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5cbmltcG9ydCB7SW5mZXJlbmNlU2Vzc2lvbiwgT25ueFZhbHVlLCBTZXNzaW9uSGFuZGxlciwgVGVuc29yLCBUcmFpbmluZ1Nlc3Npb25IYW5kbGVyfSBmcm9tICdvbm54cnVudGltZS1jb21tb24nO1xuXG5pbXBvcnQge1NlcmlhbGl6YWJsZUludGVybmFsQnVmZmVyLCBUZW5zb3JNZXRhZGF0YX0gZnJvbSAnLi9wcm94eS1tZXNzYWdlcyc7XG5pbXBvcnQge2RlY29kZVRlbnNvck1ldGFkYXRhLCBlbmNvZGVUZW5zb3JNZXRhZGF0YX0gZnJvbSAnLi9zZXNzaW9uLWhhbmRsZXItaW5mZXJlbmNlJztcbmltcG9ydCB7Y29weUZyb21FeHRlcm5hbEJ1ZmZlcn0gZnJvbSAnLi93YXNtLWNvcmUtaW1wbCc7XG5pbXBvcnQge2NyZWF0ZUNoZWNrcG9pbnRIYW5kbGUsIGNyZWF0ZVRyYWluaW5nU2Vzc2lvbkhhbmRsZSwgZ2V0Q29udGlndW91c1BhcmFtZXRlcnMsIGdldE1vZGVsSW5wdXRPdXRwdXROYW1lcywgZ2V0UGFyYW1ldGVyc1NpemUsIGxhenlSZXNldEdyYWQsIGxvYWRQYXJhbWV0ZXJzQnVmZmVyLCByZWxlYXNlVHJhaW5pbmdTZXNzaW9uQW5kQ2hlY2twb2ludCwgcnVuRXZhbFN0ZXAsIHJ1bk9wdGltaXplclN0ZXAsIHJ1blRyYWluU3RlcH0gZnJvbSAnLi93YXNtLXRyYWluaW5nLWNvcmUtaW1wbCc7XG5cbmV4cG9ydCBjbGFzcyBPbm54cnVudGltZVdlYkFzc2VtYmx5VHJhaW5pbmdTZXNzaW9uSGFuZGxlciBpbXBsZW1lbnRzIFRyYWluaW5nU2Vzc2lvbkhhbmRsZXIge1xuICBwcml2YXRlIHNlc3Npb25JZDogbnVtYmVyO1xuICBwcml2YXRlIGNoZWNrcG9pbnRJZDogbnVtYmVyO1xuXG4gIGlucHV0TmFtZXM6IHN0cmluZ1tdO1xuICBvdXRwdXROYW1lczogc3RyaW5nW107XG5cbiAgZXZhbElucHV0TmFtZXM6IHN0cmluZ1tdID0gW107XG4gIGV2YWxPdXRwdXROYW1lczogc3RyaW5nW10gPSBbXTtcblxuICBhc3luYyB1cmlPckJ1ZmZlclRvSGVhcCh1cmlPckJ1ZmZlcjogc3RyaW5nfFVpbnQ4QXJyYXkpOiBQcm9taXNlPFNlcmlhbGl6YWJsZUludGVybmFsQnVmZmVyPiB7XG4gICAgbGV0IGJ1ZmZlcjogVWludDhBcnJheTtcbiAgICBpZiAodHlwZW9mIHVyaU9yQnVmZmVyID09PSAnc3RyaW5nJykge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCh1cmlPckJ1ZmZlcik7XG4gICAgICBjb25zdCBhcnJheUJ1ZmZlciA9IGF3YWl0IHJlc3BvbnNlLmFycmF5QnVmZmVyKCk7XG4gICAgICBidWZmZXIgPSBuZXcgVWludDhBcnJheShhcnJheUJ1ZmZlcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGJ1ZmZlciA9IHVyaU9yQnVmZmVyO1xuICAgIH1cbiAgICByZXR1cm4gY29weUZyb21FeHRlcm5hbEJ1ZmZlcihidWZmZXIpO1xuICB9XG5cbiAgYXN5bmMgY3JlYXRlVHJhaW5pbmdTZXNzaW9uKFxuICAgICAgY2hlY2twb2ludFN0YXRlVXJpT3JCdWZmZXI6IHN0cmluZ3xVaW50OEFycmF5LCB0cmFpbk1vZGVsVXJpT3JCdWZmZXI6IHN0cmluZ3xVaW50OEFycmF5LFxuICAgICAgZXZhbE1vZGVsVXJpT3JCdWZmZXI6IHN0cmluZ3xVaW50OEFycmF5LCBvcHRpbWl6ZXJNb2RlbFVyaU9yQnVmZmVyOiBzdHJpbmd8VWludDhBcnJheSxcbiAgICAgIG9wdGlvbnM6IEluZmVyZW5jZVNlc3Npb24uU2Vzc2lvbk9wdGlvbnMpIHtcbiAgICBjb25zdCBjaGVja3BvaW50RGF0YTogU2VyaWFsaXphYmxlSW50ZXJuYWxCdWZmZXIgPSBhd2FpdCB0aGlzLnVyaU9yQnVmZmVyVG9IZWFwKGNoZWNrcG9pbnRTdGF0ZVVyaU9yQnVmZmVyKTtcbiAgICBjb25zdCB0cmFpbk1vZGVsRGF0YTogU2VyaWFsaXphYmxlSW50ZXJuYWxCdWZmZXIgPSBhd2FpdCB0aGlzLnVyaU9yQnVmZmVyVG9IZWFwKHRyYWluTW9kZWxVcmlPckJ1ZmZlcik7XG4gICAgLy8gMCBpcyBzdXBwb3NlZCB0byBiZSB0aGUgbnVsbHB0clxuICAgIGxldCBldmFsTW9kZWxEYXRhOiBTZXJpYWxpemFibGVJbnRlcm5hbEJ1ZmZlciA9IFswLCAwXTtcbiAgICBsZXQgb3B0aW1pemVyTW9kZWxEYXRhOiBTZXJpYWxpemFibGVJbnRlcm5hbEJ1ZmZlciA9IFswLCAwXTtcblxuICAgIGlmIChldmFsTW9kZWxVcmlPckJ1ZmZlciAhPT0gJycpIHtcbiAgICAgIGV2YWxNb2RlbERhdGEgPSBhd2FpdCB0aGlzLnVyaU9yQnVmZmVyVG9IZWFwKGV2YWxNb2RlbFVyaU9yQnVmZmVyKTtcbiAgICB9XG4gICAgaWYgKG9wdGltaXplck1vZGVsVXJpT3JCdWZmZXIgIT09ICcnKSB7XG4gICAgICBvcHRpbWl6ZXJNb2RlbERhdGEgPSBhd2FpdCB0aGlzLnVyaU9yQnVmZmVyVG9IZWFwKG9wdGltaXplck1vZGVsVXJpT3JCdWZmZXIpO1xuICAgIH1cblxuICAgIHRoaXMuY2hlY2twb2ludElkID0gY3JlYXRlQ2hlY2twb2ludEhhbmRsZShjaGVja3BvaW50RGF0YSk7XG4gICAgdGhpcy5zZXNzaW9uSWQgPVxuICAgICAgICBjcmVhdGVUcmFpbmluZ1Nlc3Npb25IYW5kbGUodGhpcy5jaGVja3BvaW50SWQsIHRyYWluTW9kZWxEYXRhLCBldmFsTW9kZWxEYXRhLCBvcHRpbWl6ZXJNb2RlbERhdGEsIG9wdGlvbnMpO1xuICAgIFt0aGlzLmlucHV0TmFtZXMsIHRoaXMub3V0cHV0TmFtZXNdID0gZ2V0TW9kZWxJbnB1dE91dHB1dE5hbWVzKHRoaXMuc2Vzc2lvbklkLCBmYWxzZSk7XG4gICAgaWYgKGV2YWxNb2RlbFVyaU9yQnVmZmVyICE9PSAnJykge1xuICAgICAgW3RoaXMuZXZhbElucHV0TmFtZXMsIHRoaXMuZXZhbE91dHB1dE5hbWVzXSA9IGdldE1vZGVsSW5wdXRPdXRwdXROYW1lcyh0aGlzLnNlc3Npb25JZCwgdHJ1ZSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEhlbHBlciBtZXRob2QgdGhhdCBjb252ZXJ0cyBhIGZlZWRzIG9yIGZldGNoZXMgZGF0YXR5cGUgdG8gdHdvIGFycmF5cywgb25lIG9mIHZhbHVlcyBhbmQgb25lIHRoYXQgc3RvcmVzIHRoZVxuICAgKiBjb3JyZXNwb25kaW5nIG5hbWUgYXMgYSBudW1iZXIgcmVmZXJyaW5nIHRvIHRoZSBpbmRleCBpbiB0aGUgbGlzdCBvZiBuYW1lcyBwcm92aWRlZC5cbiAgICpcbiAgICogQHBhcmFtIGZlZWRzIG1lYW50IHRvIG1hdGNoIGVpdGhlciBTZXNzaW9uSGFuZGxlci5GZWVkc1R5cGUgb3IgU2Vzc2lvbkhhbmRsZXIuRmV0Y2hlc1R5cGVcbiAgICogQHBhcmFtIG5hbWVzIGVpdGhlciBpbnB1dE5hbWVzIG9yIG91dHB1dE5hbWVzXG4gICAqIEByZXR1cm5zIGEgdHVwbGUgb2YgYSBsaXN0IG9mIHZhbHVlcyBhbmQgYSBsaXN0IG9mIGluZGljZXMuXG4gICAqL1xuICBjb252ZXJ0TWFwSW50b1ZhbHVlc0FycmF5QW5kSW5kaWNlc0FycmF5PFQsIFU+KFxuICAgICAgZmVlZHM6IHtbbmFtZTogc3RyaW5nXTogVH0sIG5hbWVzOiBzdHJpbmdbXSwgbWFwRnVuYzogKHZhbDogVCwgaW5kZXg6IG51bWJlcikgPT4gVSk6IFtUW10sIG51bWJlcltdLCBVW11dIHtcbiAgICBjb25zdCB2YWx1ZXM6IFRbXSA9IFtdO1xuICAgIGNvbnN0IGluZGljZXM6IG51bWJlcltdID0gW107XG4gICAgT2JqZWN0LmVudHJpZXMoZmVlZHMpLmZvckVhY2goa3ZwID0+IHtcbiAgICAgIGNvbnN0IG5hbWUgPSBrdnBbMF07XG4gICAgICBjb25zdCB0ZW5zb3IgPSBrdnBbMV07XG4gICAgICBjb25zdCBpbmRleCA9IG5hbWVzLmluZGV4T2YobmFtZSk7XG4gICAgICBpZiAoaW5kZXggPT09IC0xKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgaW52YWxpZCBpbnB1dCAnJHtuYW1lfWApO1xuICAgICAgfVxuICAgICAgdmFsdWVzLnB1c2godGVuc29yKTtcbiAgICAgIGluZGljZXMucHVzaChpbmRleCk7XG4gICAgfSk7XG5cbiAgICBjb25zdCB1TGlzdCA9IHZhbHVlcy5tYXAobWFwRnVuYyk7XG4gICAgcmV0dXJuIFt2YWx1ZXMsIGluZGljZXMsIHVMaXN0XTtcbiAgfVxuXG4gIC8qKlxuICAgKiBIZWxwZXIgbWV0aG9kIHRoYXQgY29udmVydHMgdGhlIFRlbnNvck1ldGFkYXRhIHRoYXQgdGhlIHdhc20tY29yZSBmdW5jdGlvbnMgcmV0dXJuIHRvIHRoZVxuICAgKiBTZXNzaW9uSGFuZGxlci5SZXR1cm5UeXBlLiBBbnkgb3V0cHV0cyBpbiB0aGUgcHJvdmlkZWQgb3V0cHV0QXJyYXkgdGhhdCBhcmUgZmFsc3kgd2lsbCBiZSBwb3B1bGF0ZWQgd2l0aCB0aGVcbiAgICogY29ycmVzcG9uZGluZyByZXN1bHQuXG4gICAqXG4gICAqIEBwYXJhbSByZXN1bHRzIHVzZWQgdG8gcG9wdWxhdGUgdGhlIHJlc3VsdE1hcCBpZiB0aGVyZSBpcyBubyB2YWx1ZSBmb3IgdGhhdCBvdXRwdXROYW1lIGFscmVhZHlcbiAgICogQHBhcmFtIG91dHB1dEFycmF5IHVzZWQgdG8gcG9wdWxhdGUgdGhlIHJlc3VsdE1hcC4gSWYgbnVsbCBvciB1bmRlZmluZWQsIHVzZSB0aGUgY29ycmVzcG9uZGluZyByZXN1bHQgZnJvbSByZXN1bHRzXG4gICAqIEBwYXJhbSBvdXRwdXRJbmRpY2VzIHNwZWNpZmllcyB3aGljaCBvdXRwdXROYW1lIHRoZSBjb3JyZXNwb25kaW5nIHZhbHVlIGZvciBvdXRwdXRBcnJheSByZWZlcnMgdG8uXG4gICAqIEByZXR1cm5zIGEgbWFwIG9mIG91dHB1dCBuYW1lcyBhbmQgT25ueFZhbHVlcy5cbiAgICovXG4gIGNvbnZlcnRUZW5zb3JNZXRhZGF0YVRvUmV0dXJuVHlwZShcbiAgICAgIHJlc3VsdHM6IFRlbnNvck1ldGFkYXRhW10sIG91dHB1dEFycmF5OiBBcnJheTxUZW5zb3J8bnVsbD4sIG91dHB1dEluZGljZXM6IG51bWJlcltdKTogU2Vzc2lvbkhhbmRsZXIuUmV0dXJuVHlwZSB7XG4gICAgY29uc3QgcmVzdWx0TWFwOiBTZXNzaW9uSGFuZGxlci5SZXR1cm5UeXBlID0ge307XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCByZXN1bHRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICByZXN1bHRNYXBbdGhpcy5vdXRwdXROYW1lc1tvdXRwdXRJbmRpY2VzW2ldXV0gPSBvdXRwdXRBcnJheVtpXSA/PyBkZWNvZGVUZW5zb3JNZXRhZGF0YShyZXN1bHRzW2ldKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdE1hcDtcbiAgfVxuXG4gIGFzeW5jIGxhenlSZXNldEdyYWQoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgYXdhaXQgbGF6eVJlc2V0R3JhZCh0aGlzLnNlc3Npb25JZCk7XG4gIH1cblxuICBhc3luYyBydW5UcmFpblN0ZXAoXG4gICAgICBmZWVkczogU2Vzc2lvbkhhbmRsZXIuRmVlZHNUeXBlLCBmZXRjaGVzOiBTZXNzaW9uSGFuZGxlci5GZXRjaGVzVHlwZSxcbiAgICAgIG9wdGlvbnM6IEluZmVyZW5jZVNlc3Npb24uUnVuT3B0aW9ucyk6IFByb21pc2U8U2Vzc2lvbkhhbmRsZXIuUmV0dXJuVHlwZT4ge1xuICAgIGNvbnN0IFssIGlucHV0SW5kaWNlcywgaW5wdXRzXSA9IHRoaXMuY29udmVydE1hcEludG9WYWx1ZXNBcnJheUFuZEluZGljZXNBcnJheTxUZW5zb3IsIFRlbnNvck1ldGFkYXRhPihcbiAgICAgICAgZmVlZHMsIHRoaXMuaW5wdXROYW1lcyxcbiAgICAgICAgKHQsIGkpOiBUZW5zb3JNZXRhZGF0YSA9PiBlbmNvZGVUZW5zb3JNZXRhZGF0YSh0LCAoKSA9PiBgaW5wdXQgXCIke3RoaXMuaW5wdXROYW1lc1tpbnB1dEluZGljZXNbaV1dfVwiYCkpO1xuXG4gICAgY29uc3QgW291dHB1dEFycmF5LCBvdXRwdXRJbmRpY2VzLCBvdXRwdXRzXSA9XG4gICAgICAgIHRoaXMuY29udmVydE1hcEludG9WYWx1ZXNBcnJheUFuZEluZGljZXNBcnJheTxUZW5zb3J8bnVsbCwgVGVuc29yTWV0YWRhdGF8bnVsbD4oXG4gICAgICAgICAgICBmZXRjaGVzLCB0aGlzLm91dHB1dE5hbWVzLFxuICAgICAgICAgICAgKHQsIGkpOiBUZW5zb3JNZXRhZGF0YXxudWxsID0+XG4gICAgICAgICAgICAgICAgdCA/IGVuY29kZVRlbnNvck1ldGFkYXRhKHQsICgpID0+IGBvdXRwdXQgXCIke3RoaXMub3V0cHV0TmFtZXNbb3V0cHV0SW5kaWNlc1tpXV19XCJgKSA6IG51bGwpO1xuXG4gICAgY29uc3QgcmVzdWx0cyA9IGF3YWl0IHJ1blRyYWluU3RlcCh0aGlzLnNlc3Npb25JZCwgaW5wdXRJbmRpY2VzLCBpbnB1dHMsIG91dHB1dEluZGljZXMsIG91dHB1dHMsIG9wdGlvbnMpO1xuICAgIHJldHVybiB0aGlzLmNvbnZlcnRUZW5zb3JNZXRhZGF0YVRvUmV0dXJuVHlwZShyZXN1bHRzLCBvdXRwdXRBcnJheSwgb3V0cHV0SW5kaWNlcyk7XG4gIH1cblxuICBhc3luYyBydW5PcHRpbWl6ZXJTdGVwKG9wdGlvbnM6IEluZmVyZW5jZVNlc3Npb24uUnVuT3B0aW9ucyk6IFByb21pc2U8dm9pZD4ge1xuICAgIGF3YWl0IHJ1bk9wdGltaXplclN0ZXAodGhpcy5zZXNzaW9uSWQsIG9wdGlvbnMpO1xuICB9XG5cbiAgYXN5bmMgcnVuRXZhbFN0ZXAoXG4gICAgICBmZWVkczogU2Vzc2lvbkhhbmRsZXIuRmVlZHNUeXBlLCBmZXRjaGVzOiBTZXNzaW9uSGFuZGxlci5GZXRjaGVzVHlwZSxcbiAgICAgIG9wdGlvbnM6IEluZmVyZW5jZVNlc3Npb24uUnVuT3B0aW9ucyk6IFByb21pc2U8U2Vzc2lvbkhhbmRsZXIuUmV0dXJuVHlwZT4ge1xuICAgIGNvbnN0IFssIGlucHV0SW5kaWNlcywgaW5wdXRzXSA9IHRoaXMuY29udmVydE1hcEludG9WYWx1ZXNBcnJheUFuZEluZGljZXNBcnJheTxUZW5zb3IsIFRlbnNvck1ldGFkYXRhPihcbiAgICAgICAgZmVlZHMsIHRoaXMuZXZhbElucHV0TmFtZXMsXG4gICAgICAgICh0LCBpKTogVGVuc29yTWV0YWRhdGEgPT4gZW5jb2RlVGVuc29yTWV0YWRhdGEodCwgKCkgPT4gYGlucHV0IFwiJHt0aGlzLmV2YWxJbnB1dE5hbWVzW2lucHV0SW5kaWNlc1tpXV19XCJgKSk7XG5cbiAgICBjb25zdCBbb3V0cHV0QXJyYXksIG91dHB1dEluZGljZXMsIG91dHB1dHNdID1cbiAgICAgICAgdGhpcy5jb252ZXJ0TWFwSW50b1ZhbHVlc0FycmF5QW5kSW5kaWNlc0FycmF5PFRlbnNvcnxudWxsLCBUZW5zb3JNZXRhZGF0YXxudWxsPihcbiAgICAgICAgICAgIGZldGNoZXMsIHRoaXMuZXZhbE91dHB1dE5hbWVzLFxuICAgICAgICAgICAgKHQsIGkpOiBUZW5zb3JNZXRhZGF0YXxudWxsID0+XG4gICAgICAgICAgICAgICAgdCA/IGVuY29kZVRlbnNvck1ldGFkYXRhKHQsICgpID0+IGBvdXRwdXQgXCIke3RoaXMuZXZhbE91dHB1dE5hbWVzW291dHB1dEluZGljZXNbaV1dfVwiYCkgOiBudWxsKTtcblxuICAgIGNvbnN0IHJlc3VsdHMgPSBhd2FpdCBydW5FdmFsU3RlcCh0aGlzLnNlc3Npb25JZCwgaW5wdXRJbmRpY2VzLCBpbnB1dHMsIG91dHB1dEluZGljZXMsIG91dHB1dHMsIG9wdGlvbnMpO1xuICAgIHJldHVybiB0aGlzLmNvbnZlcnRUZW5zb3JNZXRhZGF0YVRvUmV0dXJuVHlwZShyZXN1bHRzLCBvdXRwdXRBcnJheSwgb3V0cHV0SW5kaWNlcyk7XG4gIH1cblxuICBhc3luYyBnZXRQYXJhbWV0ZXJzU2l6ZSh0cmFpbmFibGVPbmx5OiBib29sZWFuKTogUHJvbWlzZTxudW1iZXI+IHtcbiAgICByZXR1cm4gZ2V0UGFyYW1ldGVyc1NpemUodGhpcy5zZXNzaW9uSWQsIHRyYWluYWJsZU9ubHkpO1xuICB9XG5cbiAgYXN5bmMgbG9hZFBhcmFtZXRlcnNCdWZmZXIoYXJyYXk6IFVpbnQ4QXJyYXksIHRyYWluYWJsZU9ubHk6IGJvb2xlYW4pOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBhd2FpdCBsb2FkUGFyYW1ldGVyc0J1ZmZlcih0aGlzLnNlc3Npb25JZCwgYXJyYXksIHRyYWluYWJsZU9ubHkpO1xuICB9XG4gIGFzeW5jIGdldENvbnRpZ3VvdXNQYXJhbWV0ZXJzKHRyYWluYWJsZU9ubHk6IGJvb2xlYW4pOiBQcm9taXNlPE9ubnhWYWx1ZT4ge1xuICAgIGNvbnN0IHRlbnNvclJlc3VsdCA9IGF3YWl0IGdldENvbnRpZ3VvdXNQYXJhbWV0ZXJzKHRoaXMuc2Vzc2lvbklkLCB0cmFpbmFibGVPbmx5KTtcbiAgICByZXR1cm4gZGVjb2RlVGVuc29yTWV0YWRhdGEodGVuc29yUmVzdWx0KTtcbiAgfVxuXG4gIGFzeW5jIGRpc3Bvc2UoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgcmV0dXJuIHJlbGVhc2VUcmFpbmluZ1Nlc3Npb25BbmRDaGVja3BvaW50KHRoaXMuY2hlY2twb2ludElkLCB0aGlzLnNlc3Npb25JZCk7XG4gIH1cbn1cbiIsICIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cblxuaW1wb3J0IHtJbmZlcmVuY2VTZXNzaW9uLCBUcmFpbmluZ1Nlc3Npb25IYW5kbGVyfSBmcm9tICdvbm54cnVudGltZS1jb21tb24nO1xuXG5pbXBvcnQge09ubnhydW50aW1lV2ViQXNzZW1ibHlCYWNrZW5kfSBmcm9tICcuL2JhY2tlbmQtd2FzbSc7XG5pbXBvcnQge09ubnhydW50aW1lV2ViQXNzZW1ibHlUcmFpbmluZ1Nlc3Npb25IYW5kbGVyfSBmcm9tICcuL3dhc20vc2Vzc2lvbi1oYW5kbGVyLXRyYWluaW5nJztcblxuY2xhc3MgT25ueHJ1bnRpbWVUcmFpbmluZ1dlYkFzc2VtYmx5QmFja2VuZCBleHRlbmRzIE9ubnhydW50aW1lV2ViQXNzZW1ibHlCYWNrZW5kIHtcbiAgYXN5bmMgY3JlYXRlVHJhaW5pbmdTZXNzaW9uSGFuZGxlcihcbiAgICAgIGNoZWNrcG9pbnRTdGF0ZVVyaU9yQnVmZmVyOiBzdHJpbmd8VWludDhBcnJheSwgdHJhaW5Nb2RlbFVyaU9yQnVmZmVyOiBzdHJpbmd8VWludDhBcnJheSxcbiAgICAgIGV2YWxNb2RlbFVyaU9yQnVmZmVyOiBzdHJpbmd8VWludDhBcnJheSwgb3B0aW1pemVyTW9kZWxVcmlPckJ1ZmZlcjogc3RyaW5nfFVpbnQ4QXJyYXksXG4gICAgICBvcHRpb25zOiBJbmZlcmVuY2VTZXNzaW9uLlNlc3Npb25PcHRpb25zKTogUHJvbWlzZTxUcmFpbmluZ1Nlc3Npb25IYW5kbGVyPiB7XG4gICAgY29uc3QgaGFuZGxlciA9IG5ldyBPbm54cnVudGltZVdlYkFzc2VtYmx5VHJhaW5pbmdTZXNzaW9uSGFuZGxlcigpO1xuICAgIGF3YWl0IGhhbmRsZXIuY3JlYXRlVHJhaW5pbmdTZXNzaW9uKFxuICAgICAgICBjaGVja3BvaW50U3RhdGVVcmlPckJ1ZmZlciwgdHJhaW5Nb2RlbFVyaU9yQnVmZmVyLCBldmFsTW9kZWxVcmlPckJ1ZmZlciwgb3B0aW1pemVyTW9kZWxVcmlPckJ1ZmZlciwgb3B0aW9ucyk7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShoYW5kbGVyKTtcbiAgfVxufVxuXG5leHBvcnQgY29uc3Qgd2FzbUJhY2tlbmQgPSBuZXcgT25ueHJ1bnRpbWVUcmFpbmluZ1dlYkFzc2VtYmx5QmFja2VuZCgpO1xuIiwgIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuXG4vKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdmFyLXJlcXVpcmVzLCBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tcmVxdWlyZS1pbXBvcnRzICovXG4vLyBXZSB1c2UgXCJyZXF1aXJlXCIgaW5zdGVhZCBvZiBcImltcG9ydFwiIGhlcmUgYmVjYXVzZSBpbXBvcnQgc3RhdGVtZW50IG11c3QgYmUgcHV0IGluIHRvcCBsZXZlbC4gT3VyIGN1cnJlbnQgY29kZSBkb2VzXG4vLyBub3QgYWxsb3cgYnVuZGxlciB0byB0cmVlLXNoYWtpbmcgY29kZSBhcyBleHBlY3RlZCBiZWNhdXNlIHNvbWUgY29kZXMgYXJlIHRyZWF0ZWQgYXMgaGF2aW5nIHNpZGUgZWZmZWN0cy5cbi8vIFNvIHdlIGltcG9ydCBjb2RlIGluc2lkZSB0aGUgaWYtY2xhdXNlIHRvIGFsbG93IGJ1bmRsZXIgcmVtb3ZlIHRoZSBjb2RlIHNhZmVseS5cblxuZXhwb3J0ICogZnJvbSAnb25ueHJ1bnRpbWUtY29tbW9uJztcbmltcG9ydCAqIGFzIG9ydCBmcm9tICdvbm54cnVudGltZS1jb21tb24nO1xuZXhwb3J0IGRlZmF1bHQgb3J0O1xuXG5pbXBvcnQge3JlZ2lzdGVyQmFja2VuZCwgZW52fSBmcm9tICdvbm54cnVudGltZS1jb21tb24nO1xuaW1wb3J0IHt2ZXJzaW9ufSBmcm9tICcuL3ZlcnNpb24nO1xuXG5pZiAoIUJVSUxEX0RFRlMuRElTQUJMRV9XRUJHTCkge1xuICBjb25zdCBvbm54anNCYWNrZW5kID0gcmVxdWlyZSgnLi9iYWNrZW5kLW9ubnhqcycpLm9ubnhqc0JhY2tlbmQ7XG4gIHJlZ2lzdGVyQmFja2VuZCgnd2ViZ2wnLCBvbm54anNCYWNrZW5kLCAtMTApO1xufVxuXG5pZiAoIUJVSUxEX0RFRlMuRElTQUJMRV9XQVNNKSB7XG4gIGNvbnN0IHdhc21CYWNrZW5kID0gQlVJTERfREVGUy5ESVNBQkxFX1RSQUlOSU5HID8gcmVxdWlyZSgnLi9iYWNrZW5kLXdhc20taW5mZXJlbmNlJykud2FzbUJhY2tlbmQgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVpcmUoJy4vYmFja2VuZC13YXNtLXRyYWluaW5nJykud2FzbUJhY2tlbmQ7XG4gIGlmICghQlVJTERfREVGUy5ESVNBQkxFX1dFQkdQVSkge1xuICAgIHJlZ2lzdGVyQmFja2VuZCgnd2ViZ3B1Jywgd2FzbUJhY2tlbmQsIDUpO1xuICAgIHJlZ2lzdGVyQmFja2VuZCgnd2Vibm4nLCB3YXNtQmFja2VuZCwgNSk7XG4gIH1cbiAgcmVnaXN0ZXJCYWNrZW5kKCdjcHUnLCB3YXNtQmFja2VuZCwgMTApO1xuICByZWdpc3RlckJhY2tlbmQoJ3dhc20nLCB3YXNtQmFja2VuZCwgMTApO1xufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZW52LnZlcnNpb25zLCAnd2ViJywge3ZhbHVlOiB2ZXJzaW9uLCBlbnVtZXJhYmxlOiB0cnVlfSk7XG4iLCAiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5cbi8vIFRoaXMgZmlsZSBpcyBnZW5lcmF0ZWQgYnkgL2pzL3NjcmlwdHMvdXBkYXRlLXZlcnNpb24udHNcbi8vIERvIG5vdCBtb2RpZnkgZmlsZSBjb250ZW50IG1hbnVhbGx5LlxuXG5leHBvcnQgY29uc3QgdmVyc2lvbiA9ICcxLjE4LjAnO1xuIl0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLElBY00sVUFDQSwwQkFZTyxpQkEwQ0E7QUFyRWI7O0FBY0EsSUFBTSxXQUFxQyxvQkFBSSxJQUFHO0FBQ2xELElBQU0sMkJBQXFDLENBQUE7QUFZcEMsSUFBTSxrQkFBa0IsQ0FBQyxNQUFjLFNBQWtCLGFBQTBCO0FBQ3hGLFVBQUksV0FBVyxPQUFPLFFBQVEsU0FBUyxjQUFjLE9BQU8sUUFBUSxrQ0FBa0MsWUFBWTtBQUNoSCxjQUFNLGlCQUFpQixTQUFTLElBQUksSUFBSTtBQUN4QyxZQUFJLG1CQUFtQixRQUFXO0FBQ2hDLG1CQUFTLElBQUksTUFBTSxFQUFDLFNBQVMsU0FBUSxDQUFDO21CQUM3QixlQUFlLFdBQVcsVUFBVTtBQUU3QzttQkFDUyxlQUFlLGFBQWEsVUFBVTtBQUMvQyxjQUFJLGVBQWUsWUFBWSxTQUFTO0FBQ3RDLGtCQUFNLElBQUksTUFBTSw0QkFBNEIsSUFBSSxvQkFBb0IsUUFBUSxFQUFFOzs7QUFJbEYsWUFBSSxZQUFZLEdBQUc7QUFDakIsZ0JBQU0sSUFBSSx5QkFBeUIsUUFBUSxJQUFJO0FBQy9DLGNBQUksTUFBTSxJQUFJO0FBQ1oscUNBQXlCLE9BQU8sR0FBRyxDQUFDOztBQUd0QyxtQkFBU0EsS0FBSSxHQUFHQSxLQUFJLHlCQUF5QixRQUFRQSxNQUFLO0FBQ3hELGdCQUFJLFNBQVMsSUFBSSx5QkFBeUJBLEVBQUMsQ0FB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QyxpQkFBTztBQUFBLFFBQUMsR0FBRSxHQUFFLEtBQUcsQ0FBQyxNQUFLLENBQUMsR0FBRSxDQUFDLENBQUMsR0FBRSxLQUFHLENBQUMsSUFBRyxJQUFHLElBQUcsSUFBRyxJQUFHLElBQUcsSUFBRyxJQUFHLElBQUcsSUFBRyxJQUFHLEVBQUUsR0FBRSxLQUFHLENBQUMsSUFBRyxJQUFHLElBQUcsSUFBRyxJQUFHLElBQUcsSUFBRyxJQUFHLElBQUcsSUFBRyxJQUFHLEVBQUU7QUFBRSxpQkFBUyxHQUFHLEdBQUU7QUFBQyxjQUFJLElBQUUsTUFBTSxFQUFFLENBQUMsSUFBRSxDQUFDO0FBQUUsWUFBRSxHQUFFLEdBQUUsR0FBRSxFQUFFLE1BQU07QUFBRSxpQkFBTztBQUFBLFFBQUM7QUFDalQsaUJBQVMsR0FBRyxHQUFFLEdBQUUsR0FBRSxHQUFFO0FBQUMsbUJBQVMsRUFBRSxHQUFFLEdBQUUsR0FBRTtBQUFDLGlCQUFJLElBQUUsWUFBVSxPQUFPLElBQUUsRUFBRSxTQUFTLElBQUUsS0FBRyxJQUFHLEVBQUUsU0FBTztBQUFHLGtCQUFFLEVBQUUsQ0FBQyxJQUFFO0FBQUUsbUJBQU87QUFBQSxVQUFDO0FBQUMsbUJBQVMsRUFBRSxHQUFFLEdBQUU7QUFBQyxtQkFBTyxFQUFFLEdBQUUsR0FBRSxHQUFHO0FBQUEsVUFBQztBQUFDLG1CQUFTLEVBQUUsR0FBRSxHQUFFO0FBQUMscUJBQVMsRUFBRSxJQUFHO0FBQUMscUJBQU8sSUFBRSxLQUFHLEtBQUcsSUFBRSxLQUFHLElBQUU7QUFBQSxZQUFDO0FBQUMsZ0JBQUk7QUFBRSxtQkFBSyxJQUFFLEVBQUUsRUFBRSxZQUFZLElBQUUsRUFBRSxZQUFZLENBQUMsTUFBSSxPQUFLLElBQUUsRUFBRSxFQUFFLFNBQVMsSUFBRSxFQUFFLFNBQVMsQ0FBQyxPQUFLLElBQUUsRUFBRSxFQUFFLFFBQVEsSUFBRSxFQUFFLFFBQVEsQ0FBQztBQUFHLG1CQUFPO0FBQUEsVUFBQztBQUFDLG1CQUFTLEVBQUUsR0FBRTtBQUFDLG9CQUFPLEVBQUUsT0FBTyxHQUFFO0FBQUEsY0FBQyxLQUFLO0FBQUUsdUJBQU8sSUFBSSxLQUFLLEVBQUUsWUFBWSxJQUFFLEdBQUUsSUFBRyxFQUFFO0FBQUEsY0FBRSxLQUFLO0FBQUUsdUJBQU87QUFBQSxjQUFFLEtBQUs7QUFBRSx1QkFBTyxJQUFJLEtBQUssRUFBRSxZQUFZLEdBQUUsR0FBRSxDQUFDO0FBQUEsY0FBRSxLQUFLO0FBQUUsdUJBQU8sSUFBSTtBQUFBLGtCQUFLLEVBQUUsWUFBWTtBQUFBLGtCQUM1ZjtBQUFBLGtCQUFFO0FBQUEsZ0JBQUM7QUFBQSxjQUFFLEtBQUs7QUFBRSx1QkFBTyxJQUFJLEtBQUssRUFBRSxZQUFZLEdBQUUsR0FBRSxDQUFDO0FBQUEsY0FBRSxLQUFLO0FBQUUsdUJBQU8sSUFBSSxLQUFLLEVBQUUsWUFBWSxJQUFFLEdBQUUsSUFBRyxFQUFFO0FBQUEsY0FBRSxLQUFLO0FBQUUsdUJBQU8sSUFBSSxLQUFLLEVBQUUsWUFBWSxJQUFFLEdBQUUsSUFBRyxFQUFFO0FBQUEsWUFBQztBQUFBLFVBQUM7QUFBQyxtQkFBUyxFQUFFLEdBQUU7QUFBQyxnQkFBSSxJQUFFLEVBQUU7QUFBRyxpQkFBSSxJQUFFLElBQUksS0FBTSxJQUFJLEtBQUssRUFBRSxLQUFHLE1BQUssR0FBRSxDQUFDLEVBQUcsUUFBUSxDQUFDLEdBQUUsSUFBRSxLQUFHO0FBQUMsa0JBQUksSUFBRSxFQUFFLFNBQVMsR0FBRSxLQUFHLEVBQUUsRUFBRSxZQUFZLENBQUMsSUFBRSxLQUFHLElBQUksQ0FBQztBQUFFLGtCQUFHLElBQUUsSUFBRSxFQUFFLFFBQVE7QUFBRSxxQkFBRyxJQUFFLEVBQUUsUUFBUSxJQUFFLEdBQUUsRUFBRSxRQUFRLENBQUMsR0FBRSxLQUFHLElBQUUsRUFBRSxTQUFTLElBQUUsQ0FBQyxLQUFHLEVBQUUsU0FBUyxDQUFDLEdBQUUsRUFBRSxZQUFZLEVBQUUsWUFBWSxJQUFFLENBQUM7QUFBQSxtQkFBTztBQUFDLGtCQUFFLFFBQVEsRUFBRSxRQUFRLElBQUUsQ0FBQztBQUFFO0FBQUEsY0FBSztBQUFBLFlBQUM7QUFBQyxnQkFBRSxJQUFJLEtBQUssRUFBRSxZQUFZLElBQUUsR0FBRSxHQUFFLENBQUM7QUFBRSxnQkFBRSxFQUFFLElBQUk7QUFBQSxjQUFLLEVBQUUsWUFBWTtBQUFBLGNBQ25mO0FBQUEsY0FBRTtBQUFBLFlBQUMsQ0FBQztBQUFFLGdCQUFFLEVBQUUsQ0FBQztBQUFFLG1CQUFPLEtBQUcsRUFBRSxHQUFFLENBQUMsSUFBRSxLQUFHLEVBQUUsR0FBRSxDQUFDLElBQUUsRUFBRSxZQUFZLElBQUUsSUFBRSxFQUFFLFlBQVksSUFBRSxFQUFFLFlBQVksSUFBRTtBQUFBLFVBQUM7QUFBQyxpQkFBSztBQUFFLGlCQUFLO0FBQUUsaUJBQUs7QUFBRSxpQkFBSztBQUFFLGNBQUksSUFBRSxFQUFFLElBQUUsT0FBSyxNQUFJLENBQUM7QUFBRSxjQUFFLEVBQUMsSUFBRyxFQUFFLE1BQUksTUFBSSxDQUFDLEdBQUUsSUFBRyxFQUFFLElBQUUsTUFBSSxNQUFJLENBQUMsR0FBRSxJQUFHLEVBQUUsSUFBRSxNQUFJLE1BQUksQ0FBQyxHQUFFLElBQUcsRUFBRSxJQUFFLE9BQUssTUFBSSxDQUFDLEdBQUUsSUFBRyxFQUFFLElBQUUsT0FBSyxNQUFJLENBQUMsR0FBRSxJQUFHLEVBQUUsSUFBRSxPQUFLLE1BQUksQ0FBQyxHQUFFLElBQUcsRUFBRSxJQUFFLE9BQUssTUFBSSxDQUFDLEdBQUUsSUFBRyxFQUFFLElBQUUsT0FBSyxNQUFJLENBQUMsR0FBRSxJQUFHLEVBQUUsSUFBRSxPQUFLLE1BQUksQ0FBQyxHQUFFLElBQUcsRUFBRSxJQUFFLE9BQUssTUFBSSxDQUFDLEdBQUUsSUFBRyxJQUFFLEVBQUUsQ0FBQyxJQUFFLEdBQUU7QUFBRSxjQUFFLEVBQUUsQ0FBQztBQUFFLGNBQUU7QUFBQSxZQUFDLE1BQUs7QUFBQSxZQUF1QixNQUFLO0FBQUEsWUFBVyxNQUFLO0FBQUEsWUFBVyxNQUFLO0FBQUEsWUFBSyxNQUFLO0FBQUEsWUFBYyxNQUFLO0FBQUEsWUFBUSxNQUFLO0FBQUEsWUFBVyxNQUFLO0FBQUEsWUFBVyxNQUFLO0FBQUEsWUFDN2UsT0FBTTtBQUFBLFlBQUssT0FBTTtBQUFBLFlBQUssT0FBTTtBQUFBLFlBQVcsT0FBTTtBQUFBLFlBQVcsT0FBTTtBQUFBLFlBQUssT0FBTTtBQUFBLFlBQUssT0FBTTtBQUFBLFlBQUssT0FBTTtBQUFBLFlBQUssT0FBTTtBQUFBLFlBQUssT0FBTTtBQUFBLFlBQUssT0FBTTtBQUFBLFlBQUssT0FBTTtBQUFBLFlBQUssT0FBTTtBQUFBLFlBQUssT0FBTTtBQUFBLFlBQUssT0FBTTtBQUFBLFlBQUssT0FBTTtBQUFBLFlBQUssT0FBTTtBQUFBLFlBQUssT0FBTTtBQUFBLFlBQUssT0FBTTtBQUFBLFVBQUk7QUFBRSxtQkFBUSxLQUFLO0FBQUUsZ0JBQUUsRUFBRSxRQUFRLElBQUksT0FBTyxHQUFFLEdBQUcsR0FBRSxFQUFFLENBQUMsQ0FBQztBQUFFLGNBQUksS0FBRywyREFBMkQsTUFBTSxHQUFHLEdBQUUsS0FBRyx3RkFBd0YsTUFBTSxHQUFHO0FBQUUsY0FBRTtBQUFBLFlBQUMsTUFBSyxPQUFHLEdBQUcsRUFBRSxFQUFFLEVBQUUsVUFBVSxHQUFFLENBQUM7QUFBQSxZQUFFLE1BQUssT0FBRyxHQUFHLEVBQUUsRUFBRTtBQUFBLFlBQ3RmLE1BQUssT0FBRyxHQUFHLEVBQUUsRUFBRSxFQUFFLFVBQVUsR0FBRSxDQUFDO0FBQUEsWUFBRSxNQUFLLE9BQUcsR0FBRyxFQUFFLEVBQUU7QUFBQSxZQUFFLE1BQUssT0FBRyxHQUFHLEVBQUUsS0FBRyxRQUFNLE1BQUksR0FBRSxDQUFDO0FBQUEsWUFBRSxNQUFLLE9BQUcsRUFBRSxFQUFFLElBQUcsQ0FBQztBQUFBLFlBQUUsTUFBSyxPQUFHLEVBQUUsRUFBRSxJQUFHLEdBQUUsR0FBRztBQUFBLFlBQUUsTUFBSyxPQUFHLEVBQUUsQ0FBQyxFQUFFLFNBQVMsRUFBRSxVQUFVLENBQUM7QUFBQSxZQUFFLE1BQUssT0FBRyxFQUFFLENBQUM7QUFBQSxZQUFFLE1BQUssT0FBRyxFQUFFLEVBQUUsSUFBRyxD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QUUsVUFBQyxJQUFJLEdBQUcsQ0FBQyxFQUFHLEdBQUcsTUFBSSxHQUFFLE1BQUksQ0FBQztBQUFFLGVBQUc7QUFBRTtBQUFLLGdCQUFNO0FBQUEsUUFBRyxHQUFFLEdBQUUsV0FBVTtBQUFDLGlCQUFPO0FBQUEsUUFBQyxHQUFFLEdBQUUsV0FBVTtBQUFBLFFBQUMsR0FBRSxHQUFFLFdBQVU7QUFBQSxRQUFDLEdBQUUsR0FBRSxXQUFVO0FBQUEsUUFBQyxHQUFFLEdBQUUsV0FBVTtBQUFDLGlCQUFPO0FBQUEsUUFBQyxHQUFFLEdBQUUsV0FBVTtBQUFBLFFBQUMsR0FBRSxHQUFFLFdBQVU7QUFBQSxRQUFDLEdBQUUsR0FBRSxXQUFVO0FBQUEsUUFBQyxHQUFFLEdBQUUsV0FBVTtBQUFBLFFBQUMsR0FBRSxHQUFFLFdBQVU7QUFBQSxRQUFDLEdBQUUsR0FBRSxXQUFVO0FBQUEsUUFBQyxHQUFFLEdBQUUsV0FBVTtBQUFBLFFBQUMsR0FBRSxHQUFFLFdBQVU7QUFBQSxRQUFDLEdBQUUsR0FBRSxNQUFJLEdBQUUsR0FBRSxTQUFTLEdBQUUsR0FBRSxHQUFFO0FBQUMsY0FBRSxJQUFFLFlBQVUsSUFBRSxVQUFRLENBQUMsQ0FBQyxLQUFHLE1BQUksS0FBRyxhQUFXLElBQUU7QUFBSSxpQkFBSztBQUFFLGNBQUUsSUFBSSxLQUFLLE1BQUksQ0FBQztBQUFFLFlBQUUsTUFBSSxNQUFJLENBQUMsSUFBRSxFQUFFLGNBQWM7QUFBRSxZQUFFLElBQUUsTUFBSSxNQUFJLENBQUMsSUFBRSxFQUFFLGNBQWM7QUFBRSxZQUFFLElBQUUsTUFBSSxNQUFJLENBQUMsSUFBRSxFQUFFLFlBQVk7QUFBRSxZQUFFLElBQUUsT0FDaGYsTUFBSSxDQUFDLElBQUUsRUFBRSxXQUFXO0FBQUUsWUFBRSxJQUFFLE9BQUssTUFBSSxDQUFDLElBQUUsRUFBRSxZQUFZO0FBQUUsWUFBRSxJQUFFLE9BQUssTUFBSSxDQUFDLElBQUUsRUFBRSxlQUFlLElBQUU7QUFBSyxZQUFFLElBQUUsT0FBSyxNQUFJLENBQUMsSUFBRSxFQUFFLFVB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QUFFLE1BQUksTUFBSSxDQUFDLElBQUU7QUFBRSxpQkFBTztBQUFBLFFBQUM7QUFBQyxpQkFBUyxHQUFHLEdBQUU7QUFBQyxpQkFBTyxJQUFFLEVBQUUsSUFBRyxHQUFFLENBQUMsSUFBRTtBQUFBLFFBQUU7QUFBQyxpQkFBUyxHQUFHLEdBQUUsR0FBRSxHQUFFLEdBQUU7QUFBQyxpQkFBTyxJQUFFLEVBQUUsSUFBRyxHQUFFLEdBQUUsR0FBRSxHQUFFLENBQUMsSUFBRTtBQUFBLFFBQUU7QUFDdGMsaUJBQVMsR0FBRyxHQUFFLEdBQUUsR0FBRSxHQUFFLEdBQUU7QUFBQyxpQkFBTyxJQUFFLEVBQUUsSUFBRyxHQUFFLEdBQUUsR0FBRSxHQUFFLEdBQUUsQ0FBQyxJQUFFO0FBQUEsUUFBRTtBQUFDLFlBQUksS0FBRyxDQUFDLE1BQUssQ0FBQyxHQUFFLENBQUMsQ0FBQztBQUFFLGlCQUFTLEdBQUcsR0FBRSxHQUFFLEdBQUUsR0FBRTtBQUFDLGNBQUc7QUFBRSxtQkFBTyxFQUFFLElBQUcsR0FBRSxHQUFFLEdBQUUsR0FBRSxDQUFDO0FBQUUsaUJBQUs7QUFBRSxpQkFBSztBQUFFLGlCQUFLO0FBQUUsbUJBQVEsSUFBRSxHQUFFLElBQUUsR0FBRSxJQUFFLEdBQUUsS0FBSTtBQUFDLGdCQUFJLElBQUUsRUFBRSxFQUFFLE1BQUksTUFBSSxDQUFDLEdBQUUsSUFBRSxFQUFFLEVBQUUsSUFBRSxNQUFJLE1BQUksQ0FBQztBQUFFLGlCQUFHO0FBQUUscUJBQVEsSUFBRSxHQUFFLElBQUUsR0FBRSxLQUFJO0FBQUMsa0JBQUksSUFBRSxFQUFFLEVBQUUsSUFBRSxNQUFJLENBQUMsR0FBRSxJQUFFLEdBQUcsQ0FBQztBQUFFLG9CQUFJLEtBQUcsT0FBSyxNQUFJLE1BQUksSUFBRSxLQUFHLEdBQUcsR0FBRyxHQUFFLENBQUMsQ0FBQyxHQUFFLEVBQUUsU0FBTyxLQUFHLEVBQUUsS0FBSyxDQUFDO0FBQUEsWUFBQztBQUFDLGlCQUFHO0FBQUEsVUFBQztBQUFDLFlBQUUsRUFBRSxNQUFJLE1BQUksQ0FBQyxJQUFFO0FBQUUsaUJBQU87QUFBQSxRQUFDO0FBQUMsWUFBSSxLQUFHLENBQUMsSUFBRyxJQUFHLElBQUcsSUFBRyxJQUFHLElBQUcsSUFBRyxJQUFHLElBQUcsSUFBRyxJQUFHLEVBQUUsR0FBRSxLQUFHLENBQUMsSUFBRyxJQUFHLElBQUcsSUFBRyxJQUFHLElBQUcsSUFBRyxJQUFHLElBQUcsSUFBRyxJQUFHLEVBQUU7QUFDbmIsaUJBQVMsR0FBRyxHQUFFO0FBQUMsY0FBSSxJQUFFLE1BQU0sR0FBRyxDQUFDLElBQUUsQ0FBQztBQUFFLGFBQUcsR0FBRSxHQUFFLEdBQUUsRUFBRSxNQUFNO0FBQUUsaUJBQU87QUFBQSxRQUFDO0FBQUMsWUFBSSxLQUFHLENBQUMsR0FBRSxNQUFJO0FBQUMsYUFBRyxFQUFFLElBQUksR0FBRSxNQUFJLENBQUM7QUFBQSxRQUFDO0FBQ2hHLGlCQUFTLEdBQUcsR0FBRSxHQUFFLEdBQUUsR0FBRTtBQUFDLG1CQUFTLEVBQUUsR0FBRSxHQUFFLEdBQUU7QUFBQyxpQkFBSSxJQUFFLFlBQVUsT0FBTyxJQUFFLEVBQUUsU0FBUyxJQUFFLEtBQUcsSUFBRyxFQUFFLFNBQU87QUFBRyxrQkFBRSxFQUFFLENBQUMsSUFBRTtBQUFFLG1CQUFPO0FBQUEsVUFBQztBQUFDLG1CQUFTLEVBQUUsR0FBRSxHQUFFO0FBQUMsbUJBQU8sRUFBRSxHQUFFLEdBQUUsR0FBRztBQUFBLFVBQUM7QUFBQyxtQkFBUyxFQUFFLEdBQUUsR0FBRTtBQUFDLHFCQUFTLEVBQUUsSUFBRztBQUFDLHFCQUFPLElBQUUsS0FBRyxLQUFHLElBQUUsS0FBRyxJQUFFO0FBQUEsWUFBQztBQUFDLGdCQUFJO0FBQUUsbUJBQUssSUFBRSxFQUFFLEVBQUUsWUFBWSxJQUFFLEVBQUUsWUFBWSxDQUFDLE1BQUksT0FBSyxJQUFFLEVBQUUsRUFBRSxTQUFTLElBQUUsRUFBRSxTQUFTLENBQUMsT0FBSyxJQUFFLEVBQUUsRUFBRSxRQUFRLElBQUUsRUFBRSxRQUFRLENBQUM7QUFBRyxtQkFBTztBQUFBLFVBQUM7QUFBQyxtQkFBUyxFQUFFLEdBQUU7QUFBQyxvQkFBTyxFQUFFLE9BQU8sR0FBRTtBQUFBLGNBQUMsS0FBSztBQUFFLHVCQUFPLElBQUksS0FBSyxFQUFFLFlBQVksSUFBRSxHQUFFLElBQUcsRUFBRTtBQUFBLGNBQUUsS0FBSztBQUFFLHVCQUFPO0FBQUEsY0FBRSxLQUFLO0FBQUUsdUJBQU8sSUFBSSxLQUFLLEVBQUUsWUFBWSxHQUFFLEdBQUUsQ0FBQztBQUFBLGNBQUUsS0FBSztBQUFFLHVCQUFPLElBQUk7QUFBQSxrQkFBSyxFQUFFLFlBQVk7QUFBQSxrQkFDNWY7QUFBQSxrQkFBRTtBQUFBLGdCQUFDO0FBQUEsY0FBRSxLQUFLO0FBQUUsdUJBQU8sSUFBSSxLQUFLLEVBQUUsWUFBWSxHQUFFLEdBQUUsQ0FBQztBQUFBLGNBQUUsS0FBSztBQUFFLHVCQUFPLElBQUksS0FBSyxFQUFFLFlBQVksSUFBRSxHQUFFLElBQUcsRUFBRTtBQUFBLGNBQUUsS0FBSztBQUFFLHVCQUFPLElBQUksS0FBSyxFQUFFLFlBQVksSUFBRSxHQUFFLElBQUcsRUFBRTtBQUFBLFlBQUM7QUFBQSxVQUFDO0FBQUMsbUJBQVMsRUFBRSxHQUFFO0FBQUMsZ0JBQUksSUFBRSxFQUFFO0FBQUcsaUJBQUksSUFBRSxJQUFJLEtBQU0sSUFBSSxLQUFLLEVBQUUsS0FBRyxNQUFLLEdBQUUsQ0FBQyxFQUFHLFFBQVEsQ0FBQyxHQUFFLElBQUUsS0FBRztBQUFDLGtCQUFJLElBQUUsRUFBRSxTQUFTLEdBQUUsS0FBRyxFQUFFLEVBQUUsWUFBWSxDQUFDLElBQUUsS0FBRyxJQUFJLENBQUM7QUFBRSxrQkFBRyxJQUFFLElBQUUsRUFBRSxRQUFRO0FBQUUscUJBQUcsSUFBRSxFQUFFLFFBQVEsSUFBRSxHQUFFLEVBQUUsUUFBUSxDQUFDLEdBQUUsS0FBRyxJQUFFLEVBQUUsU0FBUyxJQUFFLENBQUMsS0FBRyxFQUFFLFNBQVMsQ0FBQyxHQUFFLEVBQUUsWUFBWSxFQUFFLFlBQVksSUFBRSxDQUFDO0FBQUEsbUJBQU87QUFBQyxrQkFBRSxR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RSxDQUFDLEVBQUUsU0FBUyxFQUFFLFVBQVUsQ0FBQztBQUFBLFlBQUUsTUFBSyxPQUFHLEVBQUUsQ0FBQztBQUFBLFlBQUUsTUFBSyxPQUFHLEVBQUUsRUFBRSxJQUFHLENBQUM7QUFBQSxZQUFFLE1BQUssT0FBRztBQUFDLGtCQUFFLEVBQUU7QUFBRyxtQkFBRyxJQUFFLElBQUUsS0FBRyxLQUFHLE1BQUksS0FBRztBQUFJLHFCQUFPLEVBQUUsR0FBRSxDQUFDO0FBQUEsWUFBQztBQUFBLFlBQUUsTUFBSyxPQUFHO0FBQUMsdUJBQVEsSUFBRSxHQUFFLElBQUUsR0FBRSxLQUFHLEVBQUUsS0FBRyxHQUFFLE1BQUksRUFBRSxFQUFFLEtBQUcsSUFBSSxJQUFFLEtBQUcsSUFBSSxHQUFHO0FBQUU7QUFBQyxxQkFBTyxFQUFFLEVBQUUsS0FBRyxHQUFFLENBQUM7QUFBQSxZQUFDO0FBQUEsWUFBRSxNQUFLLE9BQUcsRUFBRSxFQUFFLEtBQUcsR0FBRSxDQUFDO0FBQUEsWUFBRSxNQUFLLE9BQUcsRUFBRSxFQUFFLElBQUcsQ0FBQztBQUFBLFlBQUUsTUFBSyxNQUFJO0FBQUEsWUFBSyxNQUFLLE9BQUcsS0FBRyxFQUFFLE1BQUksS0FBRyxFQUFFLEtBQUcsT0FBSztBQUFBLFlBQUssTUFBSyxPQUFHLEVBQUUsRUFBRSxJQUFHLENBQUM7QUFBQSxZQUFFLE1BQUssTUFBSTtBQUFBLFlBQUssTUFBSyxPQUFHLEVBQUUsTUFBSTtBQUFBLFlBQUUsTUFBSyxPQUFHLEVBQUUsS0FBSyxPQUFPLEVBQUUsS0FDeGYsSUFBRSxFQUFFLE1BQUksQ0FBQyxHQUFFLENBQUM7QUFBQSxZQUFFLE1BQUssT0FBRztBQUFDLGtCQUFJLElBQUUsS0FBSyxPQUFPLEVBQUUsS0FBRyxLQUFHLEVBQUUsS0FBRyxLQUFHLEtBQUcsQ0FBQztBQUFFLG9CQUFJLEVBQUUsS0FBRyxNQUFJLEVBQUUsS0FBRyxLQUFHLEtBQUc7QUFBSSxrQkFBRztBQUFFLHNCQUFJLE1BQUksS0FBRyxFQUFFLEtBQUcsTUFBSSxFQUFFLE1BQUksR0FB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O0FBQUEsVUFBSztBQUFBLFVBQUs7QUFBQSxVQUFHO0FBQUEsVUFBSTtBQUFBLFVBQUk7QUFBQSxVQUFHO0FBQUEsVUFBRztBQUFBLFVBQUc7QUFBQSxVQUFJO0FBQUEsVUFBSTtBQUFBLFVBQUs7QUFBQSxVQUFJO0FBQUEsVUFBRztBQUFBLFVBQUc7QUFBQSxVQUFJO0FBQUEsVUFBRztBQUFBLFVBQ25FO0FBQUEsVUFBRztBQUFBLFVBQUk7QUFBQSxVQUFLO0FBQUEsVUFBSztBQUFBLFVBQUc7QUFBQSxVQUFJO0FBQUEsVUFBSTtBQUFBLFVBQUc7QUFBQSxVQUFHO0FBQUEsVUFBRztBQUFBLFVBQUk7QUFBQSxVQUFJO0FBQUEsVUFBSztBQUFBLFVBQUk7QUFBQSxVQUFHO0FBQUEsVUFBRztBQUFBLFVBQUk7QUFBQSxRQUNsRSxDQUFDLENBQUM7QUFBQSxNQUNKLFNBQVMsR0FBRztBQUNWLGVBQU87QUFBQSxNQUNUO0FBQUEsSUFDRjtBQUVBLElBQU0sa0JBQWtCLE1BQWU7QUFDckMsVUFBSTtBQWVGLGVBQU8sWUFBWSxTQUFTLElBQUksV0FBVztBQUFBLFVBQ3pDO0FBQUEsVUFBSztBQUFBLFVBQUk7QUFBQSxVQUFLO0FBQUEsVUFBSztBQUFBLFVBQUc7QUFBQSxVQUFHO0FBQUEsVUFBRztBQUFBLFVBQUc7QUFBQSxVQUFHO0FBQUEsVUFBRztBQUFBLFVBQUc7QUFBQSxVQUFJO0FBQUEsVUFBRztBQUFBLFVBQUc7QUFBQSxVQUFHO0FBQUEsVUFBRztBQUFBLFVBQUc7QUFBQSxVQUFHO0FBQUEsVUFBSTtBQUFBLFVBQUk7QUFBQSxVQUFLO0FBQUEsVUFBSztBQUFBLFVBQUc7QUFBQSxVQUFJO0FBQUEsVUFDdkY7QUFBQSxVQUFLO0FBQUEsVUFBSTtBQUFBLFVBQUs7QUFBQSxVQUFLO0FBQUEsVUFBRztBQUFBLFVBQUc7QUFBQSxVQUFHO0FBQUEsVUFBRztBQUFBLFVBQUc7QUFBQSxVQUFHO0FBQUEsVUFBRztBQUFBLFVBQUk7QUFBQSxVQUFHO0FBQUEsVUFBRztBQUFBLFVBQUc7QUFBQSxVQUFHO0FB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RixNQUFJLE9BQTRCO0FBQzlCLG9CQUFnQixVQUFVQSxjQUFhLENBQUM7QUFDeEMsb0JBQWdCLFNBQVNBLGNBQWEsQ0FBQztBQUFBLEVBQ3pDO0FBQ0Esa0JBQWdCLE9BQU9BLGNBQWEsRUFBRTtBQUN0QyxrQkFBZ0IsUUFBUUEsY0FBYSxFQUFFO0FBQ3pDO0FBRUEsT0FBTyxlQUFlQyxLQUFJLFVBQVUsT0FBTyxFQUFDLE9BQU9DLFVBQVMsWUFBWSxLQUFJLENBQUM7IiwKICAibmFtZXMiOiBbImkiLCAiZW52IiwgIlRlbnNvciIsICJUZW5zb3IiLCAiSW5mZXJlbmNlU2Vzc2lvbiIsICJUZW5zb3IiLCAiVHJhaW5pbmdTZXNzaW9uIiwgIkluZmVyZW5jZVNlc3Npb24iLCAiVGVuc29yIiwgIlRyYWluaW5nU2Vzc2lvbiIsICJlbnYiLCAiam9pbiIsICJtb2R1bGUiLCAiY3B1cyIsICJtb2R1bGUiLCAibW9kdWxlIiwgIm1vZHVsZSIsICJ3YXNtIiwgIndhc20iLCAid2FzbSIsICJyZWFkRmlsZSIsICJyZWFkRmlsZSIsICJlbnYiLCAid2FzbSIsICJ0ZW5zb3IiLCAiZXJyb3JDb2RlIiwgImkiLCAibW9kdWxlIiwgImluaXRpYWxpemluZyIsICJpbml0aWFsaXplZCIsICJhYm9ydGVkIiwgImNvcHlGcm9tRXh0ZXJuYWxCdWZmZXIiLCAiY3JlYXRlU2Vzc2lvbiIsICJyZWxlYXNlU2Vzc2lvbiIsICJydW4iLCAiZW5kUHJvZmlsaW5nIiwgImVudiIsICJUZW5zb3IiLCAiY29weUZyb21FeHRlcm5hbEJ1ZmZlciIsICJjcmVhdGVTZXNzaW9uIiwgInJlbGVhc2VTZXNzaW9uIiwgInJ1biIsICJlbmRQcm9maWxpbmciLCAiZW52IiwgIndhc20iLCAiaSIsICJJbmZlcmVuY2VTZXNzaW9uIiwgIlRlbnNvciIsICJUcmFpbmluZ1Nlc3Npb24iLCAiZW52IiwgInZlcnNpb24iLCAid2FzbUJhY2tlbmQiLCAiZW52IiwgInZlcnNpb24iXQp9Cg==
