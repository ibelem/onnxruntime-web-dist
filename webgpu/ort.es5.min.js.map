{"version":3,"file":"ort.es5.min.js","mappings":";;;;;CAAA,SAA2CA,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,IACQ,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,GAAIH,GACe,iBAAZC,QACdA,QAAa,IAAID,IAEjBD,EAAU,IAAIC,GACf,CATD,CASGK,MAAM,WACT,O,kiDCJA,cACA,UAEA,0BAqBA,QAnBQ,YAAAC,KAAN,W,oFAEM,YAAAC,8BAAN,SAAoCC,EAAiCC,G,uGAM7DC,EAAU,IAAI,EAAAC,QAAQF,GAGA,iBAAjBD,EAAP,MACF,GAAME,EAAQE,UAAUJ,I,cAAxB,S,aAEA,SAAME,EAAQE,UAAUJ,I,OAAxB,S,iBAGF,MAAO,CAAP,EAAO,IAAI,EAAAK,qBAAqBH,I,QAEpC,EArBA,GAuBa,EAAAI,cAAgB,IAAIC,C,ghDC7BjC,cACA,UAEA,UACA,UAQa,EAAAC,gBAAkB,WAa7B,IAZoC,iBAAzB,EAAAC,IAAIC,KAAKC,aAA4B,EAAAF,IAAIC,KAAKC,YAAc,KACrE,EAAAF,IAAIC,KAAKC,YAAc,GAGI,kBAAlB,EAAAF,IAAIC,KAAKE,OAClB,EAAAH,IAAIC,KAAKE,MAAO,GAGY,kBAAnB,EAAAH,IAAIC,KAAKG,QAClB,EAAAJ,IAAIC,KAAKG,OAAQ,GAGgB,iBAAxB,EAAAJ,IAAIC,KAAKI,aAA4BC,OAAOC,UAAU,EAAAP,IAAIC,KAAKI,aAAe,EAAAL,IAAIC,KAAKI,YAAc,EAAG,CACjH,IAAMG,EAA0C,oBAAdC,WAA4B,IAAAC,QAAOC,OAASF,UAAUG,oBACxF,EAAAZ,IAAIC,KAAKI,WAAaQ,KAAKC,IAAI,EAAGD,KAAKE,MAAMP,GAAsB,GAAK,G,CAE5E,EAEA,8BAkBA,QAjBQ,YAAAnB,KAAN,W,0FAKE,OAHA,IAAAU,mBAGA,IAAM,IAAAiB,kC,cAAN,S,YAMI,YAAA1B,8BAAN,SAAoCC,EAAiCC,G,gGAGnE,UADMyB,EAAU,IAAI,EAAAC,sCACNvB,UAAUJ,EAAcC,I,OACtC,OADA,SACO,CAAP,EAAO2B,QAAQC,QAAQH,I,QAE3B,EAlBA,GAoBa,EAAAI,YAAc,IAAIC,C,ygBC9C/B,aACA,cACA,UAGQzB,EAAgB,uBACtB,IAAA0B,iBAAgB,QAAS1B,GAAgB,IAIzC,IAAMwB,EAAc,qBAIpB,IAAAE,iBAAgB,MAAOF,EAAa,KACpC,IAAAE,iBAAgB,OAAQF,EAAa,KACrC,IAAAE,iBAAgB,UAAWF,EAAa,IACxC,IAAAE,iBAAgB,QAASF,EAAa,GAGxCG,OAAOC,eAAe,EAAAzB,IAAI0B,SAAU,MAAO,CAACC,MAAO,EAAAC,QAASC,YAAY,G,wHCzBxE,iBACE,WAAYC,GACVN,OAAOO,OAAOC,KAAMF,EACtB,CAUF,OAPE,sBAAW,uBAAQ,C,IAAnB,sBAKE,OAJKE,KAAKC,YACRD,KAAKC,UACDT,OAAOU,oBAAoBF,MAAMG,OAAOC,KAAI,SAAAC,GAAQ,gBAAI,EAAiCA,GAArC,IAA8CC,KAAK,MAEtGN,KAAKC,SACd,E,gCACF,EAbA,GAmBa,EAAAM,4BAA8B,SAAoCT,GAC3E,WAAIU,EAA0BV,EAA9B,C,6aClBJ,cACA,UACA,UACA,UAEOW,EAAS,EAAAC,YAAYC,aAAaC,IAqBzC,aACE,WAAYC,G,QAEV,GADAb,KAAKc,YAAc,IAAIC,IACnBF,QAAiD,C,IACnD,IAAmB,QAAAA,GAAU,8BAAE,CAA1B,IAAMG,EAAI,QACTA,aAAgB,EAAAC,KAAKC,eACvBlB,KAAKc,YAAYK,IAAIH,EAAKX,KAAM,CAACe,EAAUC,SAASL,GAAOI,EAAUE,QAAQN,KACpEA,aAAgBP,EAAOW,WAChCpB,KAAKc,YAAYK,IAAIH,EAAKX,OAAS,CAACe,EAAUC,SAASL,GAAOI,EAAUE,QAAQN,I,mGAGpF,GAAIhB,KAAKc,YAAYS,KAAOV,EAAWlC,OACrC,MAAM,IAAI6C,MAAM,6B,CAGtB,CAiOF,OA/NE,YAAAL,IAAA,SAAIM,EAAaC,EAA0B/B,GACzCK,KAAKc,YAAYK,IAAIM,EAAK,CAAC9B,EAAO+B,GACpC,EACA,YAAAC,OAAA,SAAOF,GACLzB,KAAKc,YAAYa,OAAOF,EAC1B,EACA,YAAAG,SAAA,SAASH,EAAaI,GACpB,OAAO7B,KAAK8B,IAAIL,EAAK,QAASI,EAChC,EAEA,YAAAE,OAAA,SAAON,EAAaI,GAClB,OAAO7B,KAAK8B,IAAIL,EAAK,MAAOI,EAC9B,EAEA,YAAAG,UAAA,SAAUP,EAAaI,GACrB,OAAO7B,KAAK8B,IAAIL,EAAK,SAAUI,EACjC,EAEA,YAAAI,UAAA,SAAUR,EAAaI,GACrB,OAAO7B,KAAK8B,IAAIL,EAAK,SAAUI,EACjC,EAEA,YAAAK,UAAA,SAAUT,EAAaI,GACrB,OAAO7B,KAAK8B,IAAIL,EAAK,SAAUI,EACjC,EAEA,YAAAM,QAAA,SAAQV,EAAaI,GACnB,OAAO7B,KAAK8B,IAAIL,EAAK,OAAQI,EAC/B,EAEA,YAAAO,WAAA,SAAWX,EAAaI,GACtB,OAAO7B,KAAK8B,IAAIL,EAAK,UAAWI,EAClC,EAEA,YAAAQ,WAAA,SAAWZ,EAAaI,GACtB,OAAO7B,KAAK8B,IAAIL,EAAK,UAAWI,EAClC,EAEQ,YAAAC,IAAR,SACIL,EAAaC,EAA0BG,GACzC,IAAMS,EAAetC,KAAKc,YAAYgB,IAAIL,GAC1C,QAAqBc,IAAjBD,EAA4B,CAC9B,QAAqBC,IAAjBV,EACF,OAAOA,EAET,MAAM,IAAIL,MAAM,wCAAiCC,G,CAEnD,GAAIa,EAAa,KAAOZ,EACtB,MAAM,IAAIF,MAAM,kCAA2BE,EAAI,oBAAYY,EAAa,KAE1E,OAAOA,EAAa,EACtB,EAEe,EAAAhB,QAAf,SAAuBN,GACrB,IAAMU,EAAOV,aAAgB,EAAAC,KAAKC,eAAiB,EAAOQ,KAAQV,EAA0BU,OAC5F,OAAQA,GACN,KAAK,EAAAT,KAAKC,eAAesB,cAAcC,MACrC,MAAO,QACT,KAAK,EAAAxB,KAAKC,eAAesB,cAAcE,IACrC,MAAO,MACT,KAAK,EAAAzB,KAAKC,eAAesB,cAAcG,OACrC,MAAO,SACT,KAAK,EAAA1B,KAAKC,eAAesB,cAAcI,OACrC,MAAO,SACT,KAAK,EAAA3B,KAAKC,eAAesB,cAAcK,OACrC,MAAO,SACT,KAAK,EAAA5B,KAAKC,eAAesB,cAAcM,KACrC,MAAO,OACT,KAAK,EAAA7B,KAAKC,eAAesB,cAAcO,QACrC,MAAO,UACT,KAAK,EAAA9B,KAAKC,eAAesB,cAAcQ,QACrC,MAAO,UACT,QACE,MAAM,IAAIxB,MAAM,+CAAwC,EAAAP,KAAKC,eAAesB,cAAcd,KAEhG,EAEe,EAAAL,SAAf,SAAwBL,GACtB,IAAMiC,EAAWjC,aAAgB,EAAAC,KAAKC,eAAiBF,EAAKU,KAAQV,EAA0BU,OAC9F,GAAIuB,IAAa,EAAAhC,KAAKC,eAAesB,cAAcU,OAASD,IAAa,EAAAhC,KAAKC,eAAesB,cAAcW,OACzG,MAAM,IAAI3B,MAAM,wCAGlB,IAAM7B,EAAQK,KAAKoD,gBAAgBpC,GAGnC,GAAIiC,IAAa,EAAAhC,KAAKC,eAAesB,cAAcE,KAAO,EAAAW,SAASC,OAAO3D,GACxE,OAAO,EAAA0D,SAASE,aAAa5D,GAI/B,GAAIsD,IAAa,EAAAhC,KAAKC,eAAesB,cAAcM,KAAM,CAIvD,IAHA,IAAMU,EAAO7D,EACP8D,EAAwB,IAAIC,MAAcF,EAAI7E,QAE3CgF,EAAI,EAAGA,EAAIH,EAAI7E,OAAQgF,IAAK,CACnC,IAAMC,EAAYJ,EAAIG,GACtBF,EAAYE,GAAK,EAAAN,SAASE,aAAaK,E,CAGzC,OAAOH,C,CAIT,GAAIR,IAAa,EAAAhC,KAAKC,eAAesB,cAAcI,OACjD,OAAO5B,aAAgB,EAAAC,KAAKC,eAAiB,EAAA2C,OAAOC,UAAUnE,GACjB,EAAAkE,OAAOE,cAAcpE,GAIpE,GAAIsD,IAAa,EAAAhC,KAAKC,eAAesB,cAAcQ,QAAS,CAC1D,GAAIhC,aAAgB,EAAAC,KAAKC,eAEvB,OADqBvB,EACDS,KAAI,SAAAT,GAAS,SAAAkE,OAAOC,UAAUnE,EAAjB,IAC5B,GAAIqB,aAAgBP,EAAOW,UAEhC,OADqBzB,EACDS,KAAI,SAAAT,GAAS,SAAAkE,OAAOE,cAAcpE,EAArB,G,CAKrC,GAAIsD,IAAa,EAAAhC,KAAKC,eAAesB,cAAcG,QAG7C3B,aAAgB,EAAAC,KAAKC,eAAgB,CACvC,IAAM8C,EAAarE,EACnB,OAAO,IAAAsE,kBAAiBD,E,CAK5B,OAAIf,IAAa,EAAAhC,KAAKC,eAAesB,cAAcO,SAG7C/B,aAAgB,EAAAC,KAAKC,eACHvB,EACDS,IAAI,EAAA6D,kBAIpBtE,CACT,EAEe,EAAAyD,gBAAf,SAA+BpC,GAC7B,OAAOA,aAAiB,EAAAC,KAAmB,eAAIjB,KAAKkE,8BAA8BlD,GACnChB,KAAKmE,6BAA6BnD,EACnF,EAEe,EAAAkD,8BAAf,SAA6ClD,GAC3C,OAAQA,EAAKU,MACX,KAAK,EAAAT,KAAKC,eAAesB,cAAcC,MACrC,OAAOzB,EAAKoD,EACd,KAAK,EAAAnD,KAAKC,eAAesB,cAAcE,IACrC,OAAO1B,EAAK2C,EACd,KAAK,EAAA1C,KAAKC,eAAesB,cAAcG,OACrC,OAAO3B,EAAKqD,EACd,KAAK,EAAApD,KAAKC,eAAesB,cAAcI,OACrC,OAAO5B,EAAKsD,EACd,KAAK,EAAArD,KAAKC,eAAesB,cAAcU,MACrC,OAAOlC,EAAKuD,EACd,KAAK,EAAAtD,KAAKC,eAAesB,cAAcK,OACrC,OAAO7B,EAAKwD,OACd,KAAK,EAAAvD,KAAKC,eAAesB,cAAcM,KACrC,OAAO9B,EAAKyD,KACd,KAAK,EAAAxD,KAAKC,eAAesB,cAAcO,QACrC,OAAO/B,EAAK0D,QACd,KAAK,EAAAzD,KAAKC,eAAesB,cAAcQ,QACrC,OAAOhC,EAAK2D,QACd,KAAK,EAAA1D,KAAKC,eAAesB,cAAcW,OACrC,OAAOnC,EAAK4D,OACd,QACE,MAAM,IAAIpD,MAAM,sCAA+B,EAAAP,KAAKC,eAAesB,cAAcxB,EAAKU,QAE5F,EAEe,EAAAyC,6BAAf,SAA4CnD,GAC1C,OAAQA,EAAKU,QACX,KAAKjB,EAAO+B,cAAcC,MACxB,OAAOzB,EAAKoD,IACd,KAAK3D,EAAO+B,cAAcE,IACxB,OAAO1B,EAAK2C,IACd,KAAKlD,EAAO+B,cAAcG,OACxB,OAAO3B,EAAKqD,IACd,KAAK5D,EAAO+B,cAAcI,OACxB,OAAO5B,EAAKsD,IACd,KAAK7D,EAAO+B,cAAcU,MACxB,OAAOlC,EAAKuD,IACd,KAAK9D,EAAO+B,cAAcK,OACxB,OAAO7B,EAAK6D,cACd,KAAKpE,EAAO+B,cAAcM,KAExB,IADA,IAAM2B,EAAO,GACJd,EAAI,EAAGA,EAAI3C,EAAK8D,aAAcnB,IACrCc,EAAKM,KAAK/D,EAAKyD,KAAKd,IAEtB,OAAOc,EAET,KAAKhE,EAAO+B,cAAcO,QACxB,IAAM2B,EAAU,GAChB,IAASf,EAAI,EAAGA,EAAI3C,EAAKgE,gBAAiBrB,IACxCe,EAAQK,KAAK/D,EAAK0D,QAAQf,IAE5B,OAAOe,EAET,KAAKjE,EAAO+B,cAAcQ,QACxB,IAAM2B,EAAU,GAChB,IAAShB,EAAI,EAAGA,EAAI3C,EAAKiE,gBAAiBtB,IACxCgB,EAAQI,KAAK/D,EAAK2D,QAAQhB,IAE5B,OAAOgB,EAST,QACE,MAAM,IAAInD,MAAM,sCAA+Bf,EAAO+B,cAAcxB,EAAKU,UAE/E,EAGF,EAhPA,GAAa,EAAAN,UAAAA,C,40DC5Bb,cA0EM8D,EAAsC,IAAInE,IAgChD,SAAeoE,EAAeC,G,gHAGW,KAFjCC,EAAa,EAAAC,SAEGF,KAeLG,EAf+CF,EAAWD,GAqBvE,eAJEI,EAAID,IAIuC,mBAAjBC,EAAEC,YAC9B,yBAA0BD,GAAuC,mBAA3BA,EAAEE,sBACxC,YAAaF,GAA0B,mBAAdA,EAAEG,UAtBvB,EAAUN,EAAWD,GAEP,iBADhB/H,EAAO,EAAQoI,eACa,SAAUpI,EACjC,GAAMA,GADX,OAHF,M,OAIAA,EAAO,S,iBAET,GAAIA,EAEF,OADA6H,EAAc/D,IAAIiE,EAAa,GACxB,CAAP,EAAO,G,iBAIX,MAAO,CAAP,OAAO7C,GAGT,IAAmBgD,EAEXC,C,OAlDK,EAAAF,QAAqC,CAChDM,MAAO,IAAI,EAAAC,cAOb,0BAAsBC,EAAeC,G,uHAC9BA,EAAD,MACK,CAAP,EAAOD,EAAe,CAAC,W,OAEjBE,EAAwB,iBAATD,EAAoB,CAACA,GAAQA,E,wCAExB,IAAAC,GAAK,W,sCAApBZ,EAAW,SACda,EAAQf,EAAcpD,IAAIsD,IAEvB,CAAP,EAAOa,GAGO,GAAMd,EAAeC,K,OACrC,GADM,EAAU,SAEd,MAAO,CAAP,EAAO,G,kMAKb,MAAM,IAAI5D,MAAM,+B,kHCvGlB,cAGA,UAGA,UAEA,UAOA,0BA2EA,QAxEE,sBAAI,wBAAS,C,IAAb,WACE,OAAO,EAAAxD,IAAI4H,MAAMM,SACnB,E,IACA,SAAcvG,GACZ,EAAA3B,IAAI4H,MAAMM,UAAYvG,CACxB,E,gCAEA,sBAAI,iCAAkB,C,IAAtB,WACE,OAAO,EAAA3B,IAAI4H,MAAMO,kBACnB,E,IACA,SAAuBxG,GACrB,EAAA3B,IAAI4H,MAAMO,mBAAqBxG,CACjC,E,gCAEA,sBAAI,+BAAgB,C,IAApB,WACE,OAAO,EAAA3B,IAAI4H,MAAMQ,gBACnB,E,IACA,SAAqBzG,GACnB,EAAA3B,IAAI4H,MAAMQ,iBAAmBzG,CAC/B,E,gCAEA,sBAAI,mBAAI,C,IAAR,WACE,OAAO,EAAA3B,IAAI4H,MAAMS,IACnB,E,IACA,SAAS1G,GACP,EAAA3B,IAAI4H,MAAMS,KAAO1G,CACnB,E,gCAEA,sBAAI,oBAAK,C,IAAT,WACE,OAAO,EAAA3B,IAAI4H,MAAMU,KACnB,E,IACA,SAAU3G,GACR,EAAA3B,IAAI4H,MAAMU,MAAQ3G,CACpB,E,gCAEA,YAAA8F,WAAA,WACE,IAwBE,OAvBAzF,KAAKuG,WAAY,IAAAC,oBAAmBxG,KAAKkG,WACF,iBAA5BlG,KAAKmG,qBACdnG,KAAKmG,mBAAqB,IAES,iBAA1BnG,KAAKoG,mBACdpG,KAAKoG,iBAAmB,QAED,kBAAdpG,KAAKqG,OACdrG,KAAKqG,MAAO,GAEY,kBAAfrG,KAAKsG,QACdtG,KAAKsG,OAAQ,GAGf,EAAAG,OAAOC,WAAW,EAAA1I,KAElBwB,OAAOC,eAAe,EAAAzB,IAAI4H,MAAO,UAAW,CAACjG,MAAOK,KAAKuG,UAAUI,KAEnE,EAAAF,OAAOG,QACH,eACA,uCAAgC5G,KAAKuG,UAAS,qCAC1CvG,KAAKmG,mBAAkB,+BAAuBnG,KAAKoG,iBAAgB,mBAAWpG,KAAKqG,KAAI,oBACvFrG,KAAKsG,MAAK,OACX,C,CACP,MAAOO,GAEP,OADA,EAAAJ,OAAOK,QAAQ,eAAgB,6CAAsCD,KAC9D,C,CAEX,EACA,YAAAnB,qBAAA,SAAqBqB,GACnB,OAAO,IAAI,EAAAC,oBAAoBhH,KAAM+G,EACvC,EACA,YAAApB,QAAA,WACE3F,KAAKuG,UAAUZ,SACjB,EACF,EA3EA,GAAa,EAAAE,aAAAA,C,6lCCfb,cAEA,UACA,UACA,UAEA,SAMA,cAGE,WAAYkB,G,OACV,YAAMA,IAAQ,IAChB,CAqyCF,OA1yCmC,OAMjC,YAAAE,aAAA,WACE,OAAO,EAAP,eACKjH,KAAKkH,kBACLlH,KAAKmH,kBACLnH,KAAKoH,SACLpH,KAAKqH,aAELrH,KAAKsH,sBACLtH,KAAKuH,6BACLvH,KAAKwH,2BAEZ,EACA,YAAAC,eAAA,WACE,MAAO,CAAC,CACV,EAKU,YAAAP,eAAV,WAEE,MAAO,CACLA,eAAgB,IAAI,EAAAQ,eAAe,uBAFpB,iBAGA,iOAQnB,EAMU,YAAAP,eAAV,WAEE,MAAO,CACLA,eAAgB,IAAI,EAAAO,eAAe,sBAFpB,iBAGD,4NAQlB,EAMU,YAAAF,yBAAV,WACE,IAAMG,EAAe3H,KAAK+G,QAAQa,oBAClC,OAAID,EAAaE,SACR7H,KAAK8H,+BAA+BH,GAEpC3H,KAAK+H,iCAAiCJ,EAEjD,EAKU,YAAAG,+BAAV,SAAyCH,GACvC,IAAMK,EAAWL,EAAaM,cACxBC,EAAc,CAACP,EAAaQ,MAAOR,EAAaS,QAChDC,EAA2C,CAAC,EAC5CC,EAAW,kBACjB,OAAQN,EAASrJ,QACf,KAAK,EACH0J,EAAOC,GAAYtI,KAAKuI,wBACxB,MACF,KAAK,EACHF,EAAOC,GAAYtI,KAAKwI,wBAAwBR,EAAsBE,GACtE,MACF,KAAK,EACHG,EAAOC,GAAYtI,KAAKyI,wBAAwBT,EAA8BE,GAC9E,MACF,KAAK,EACHG,EAAOC,GACHtI,KAAK0I,wBAAwBV,EAAsCE,GACvE,MACF,QACEG,EAAOC,GAAYtI,KAAK2I,wBAAwBX,EAAUE,GAE9D,IAAMU,GAAO,IAAAC,SAAQ7I,KAAK+G,QAAQR,UAAU3G,SAGtCkJ,EAA4B,sDAE5BF,EAAKG,OAAM,0BAKjB,OADAV,EAAkC,oBAAI,IAAI,EAAAX,eAAeoB,GAClDT,CACT,EAKU,YAAAN,iCAAV,SAA2CJ,GACzC,IAAMK,EAAWL,EAAaM,cACxBC,EAAc,CAACP,EAAaQ,MAAOR,EAAaS,QAChDC,EAA2C,CAAC,EAC5CC,EAAW,kBACjB,OAAQN,EAASrJ,QACf,KAAK,EACH0J,EAAOC,GAAYtI,KAAKuI,wBACxB,MACF,KAAK,EACHF,EAAOC,GAAYtI,KAAKgJ,0BAA0BhB,EAAsBE,GACxE,MACF,KAAK,EACHG,EAAOC,GACHtI,KAAKiJ,0BAA0BjB,EAA8BE,GACjE,MACF,KAAK,EACHG,EAAOC,GACHtI,KAAKkJ,0BAA0BlB,EAAsCE,GACzE,MACF,KAAK,EACHG,EAAOC,GAAYtI,KAAKmJ,0BACpBnB,EAA8CE,GAClD,MACF,KAAK,EACHG,EAAOC,GAAYtI,KAAKoJ,0BACpBpB,EAAsDE,GAC1D,MACF,KAAK,EACHG,EAAOC,GAAYtI,KAAKqJ,0BACpBrB,EAA8DE,GAClE,MACF,QACE,MAAM,IAAI1G,MAAM,6CAAsCwG,EAASrJ,SAEnE,IAAMiK,GAAO,IAAAC,SAAQ7I,KAAK+G,QAAQR,UAAU3G,SAGtC0J,EAAyB,2DAEvBV,EAAKG,OAAM,2CAKnB,OADAV,EAA+B,iBAAI,IAAI,EAAAX,eAAe4B,GAC/CjB,CACT,EAKU,YAAAE,sBAAV,WACE,OAAO,IAAI,EAAAb,eAAe,oEAK5B,EAKU,YAAAc,wBAAV,SAAkCe,EAAiBC,GACjD,IAAMC,EAAiBD,EACnBE,EAAS,GACb,OAA0B,IAAtBD,EAAe,IACjBC,EAAS,wFAE4BD,EAAe,GAAE,+BAG/C,IAAI,EAAA/B,eAAegC,IAGF,IAAtBD,EAAe,IACjBC,EAAS,wFAE4BD,EAAe,GAAE,+BAG/C,IAAI,EAAA/B,eAAegC,KAG5BA,EAAS,oIAG2BD,EAAe,GAAE,aAAKA,EAAe,GAAE,mDAC1CA,EAAe,GAAE,sCAG3C,IAAI,EAAA/B,eAAegC,GAC5B,EAKU,YAAAjB,wBAAV,SAAkCc,EAAyBC,GACzD,IAAIE,EAAS,GACb,GAAI,EAAAC,UAAUC,YAAYL,EAAOC,GAM/B,OALAE,EAAS,8FAEkCF,EAAS,GAAE,aAAKA,EAAS,GAAE,0BAG/D,IAAI,EAAA9B,eAAegC,GAG5B,IAAMD,EAAiBD,EAEjBK,EAAqBhL,KAAKE,KAAKwK,EAAM,GAAK,GAyBhD,OAdAG,EAAS,qIAG0BD,EAAe,GAAE,aAAKA,EAAe,GAAE,qDAEzCA,EAAe,GAAE,kHAGtBI,EAAkB,kDACjBA,EAAkB,0DAKxC,IAAI,EAAAnC,eAAegC,EAC5B,EAKU,YAAAhB,wBAAV,SAAkCa,EAAiCC,GACjE,IAAMC,EAAiB,CAACD,EAAS,GAAIA,EAAS,IACxCK,EAAqBhL,KAAKE,KAAKwK,EAAM,GAAK,GAC1CO,EAAgBD,EAAqBhL,KAAKE,KAAKwK,EAAM,GAAK,GAC1DG,EAAS,qIAGoBD,EAAe,GAAE,aAAKA,EAAe,GAAE,mDACzCA,EAAe,GAAE,uDAE1BK,EAAa,qCAChBA,EAAa,qGAGND,EAAkB,kDACjBA,EAAkB,6DAK/C,OAAO,IAAI,EAAAnC,eAAegC,EAC5B,EAKU,YAAAf,wBAAV,SAAkCY,EAA0BC,GAS1D,IARA,IAAMC,EAAiB,CAACD,EAAS,GAAIA,EAAS,IAExCK,EAAqBhL,KAAKE,KAAKwK,EAAMA,EAAM5K,OAAS,GAAK,GACzDmL,EAAgBD,EAAqBhL,KAAKE,KAAKwK,EAAMA,EAAM5K,OAAS,GAAK,GAC3EoL,EAAiBD,EACjBE,EAAU,GACVC,EAAS,UAEJC,EAAI,EAAGA,EAAIX,EAAM5K,OAAS,EAAGuL,IACpCH,GAAkBR,EAAMA,EAAM5K,OAASuL,EAAI,GAC3CF,EAAU,uBACHE,EAAC,sBAAcH,EAAc,8BACxBG,EAAC,cAAMH,EAAc,WAC/BC,EACFC,EAAS,WAAIC,EAAC,MAAOD,EAEvB,IAAMP,EAAS,sBACPH,EAAM5K,OAAM,mHAEa8K,EAAe,GAAE,aAAKA,EAAe,GAAE,iDACzCA,EAAe,GAAE,qCAE1CO,EAAO,uCAESF,EAAa,mCAChBA,EAAa,iGAGND,EAAkB,gDACjBA,EAAkB,oCAE5BN,EAAM5K,OAAM,YAAIsL,EAAM,qBAGvC,OAAO,IAAI,EAAAvC,eAAegC,EAC5B,EAKU,YAAAV,0BAAV,SAAoCO,EAAiBC,GACnD,IAAME,EAAS,mIAGoBF,EAAS,GAAE,aAAKA,EAAS,GAAE,8CAClCA,EAAS,GAAE,qCAGvC,OAAO,IAAI,EAAA9B,eAAegC,EAC5B,EAKU,YAAAT,0BAAV,SAAoCM,EAAyBC,GAC3D,IAAME,EAAS,qIAGoBF,EAAS,GAAE,aAAKA,EAAS,GAAE,mDAC7BA,EAAS,GAAE,qDACpBD,EAAM,GAAE,4CACJA,EAAM,GAAE,uDAIpC,OAAO,IAAI,EAAA7B,eAAegC,EAC5B,EAKU,YAAAR,0BAAV,SAAoCK,EAAiCC,GACnE,IAAIE,EACES,EAAOZ,EAAM5K,OAEfyL,EAAU,KACVD,EAAO,IACTC,EAAU,KAGZA,EAAU,IAAI1G,MAAMyG,EAAO,IACnBA,EAAO,GAAKZ,EAAMY,EAAO,GACjC,IAAK,IAAIxG,EAAIwG,EAAO,EAAGxG,GAAK,IAAKA,EAC/ByG,EAAQzG,GAAKyG,EAAQzG,EAAI,GAAK4F,EAAM5F,EAAI,GAE1C,IAAM0G,EAAkB,CAAC,IAAK,IAAK,KAC7BC,EACFF,EACKhK,KAAI,SAACmK,EAAQ5G,GACZ,IAAM6G,EAAQ,cAAOH,EAAgB1G,GAAE,sBAAc4G,GAC/CE,EAAQ9G,IAAMyG,EAAQzL,OAAS,EACjC,cAAO0L,EAAgB1G,EAAI,GAAE,sBAAc0G,EAAgB1G,GAAE,cAAM4G,GACnE,mBAAYF,EAAgB1G,GAAE,cAAM4G,GACxC,MAAO,UAAGC,EAAK,aAAKC,EAAK,IAC3B,IACCnK,KAAK,IAWd,OATAoJ,EAAS,qIAG0BF,EAAS,GAAE,aAAKA,EAAS,GAAE,mDAC7BA,EAAS,GAAE,qCACpCc,EAAsB,yDAIvB,IAAI,EAAA5C,eAAegC,EAC5B,EAKU,YAAAP,0BAAV,SAAoCI,EAAyCC,GAE3E,IAAIE,EACES,EAAOZ,EAAM5K,OAEfyL,EAAU,KACVD,EAAO,IACTC,EAAU,KAGZA,EAAU,IAAI1G,MAAMyG,EAAO,IACnBA,EAAO,GAAKZ,EAAMY,EAAO,GACjC,IAAK,IAAIxG,EAAIwG,EAAO,EAAGxG,GAAK,IAAKA,EAC/ByG,EAAQzG,GAAKyG,EAAQzG,EAAI,GAAK4F,EAAM5F,EAAI,GAE1C,IAAM0G,EAAkB,CAAC,IAAK,IAAK,IAAK,MAClCC,EACFF,EACKhK,KAAI,SAACmK,EAAQ5G,GACZ,IAAM6G,EAAQ,cAAOH,EAAgB1G,GAAE,sBAAc4G,GAC/CE,EAAQ9G,IAAMyG,EAAQzL,OAAS,EACjC,cAAO0L,EAAgB1G,EAAI,GAAE,sBAAc0G,EAAgB1G,GAAE,cAAM4G,GACnE,mBAAYF,EAAgB1G,GAAE,cAAM4G,GACxC,MAAO,UAAGC,EAAK,aAAKC,EAAK,IAC3B,IACCnK,KAAK,IAWd,OATAoJ,EAAS,mIAG0BF,EAAS,GAAE,aAAKA,EAAS,GAAE,mDAC7BA,EAAS,GAAE,qCACpCc,EAAsB,6DAIvB,IAAI,EAAA5C,eAAegC,EAC5B,EAKU,YAAAN,0BAAV,SAAoCG,EAAiDC,GAEnF,IAAIE,EACES,EAAOZ,EAAM5K,OAEfyL,EAAU,KACVD,EAAO,IACTC,EAAU,KAGZA,EAAU,IAAI1G,MAAMyG,EAAO,IACnBA,EAAO,GAAKZ,EAAMY,EAAO,GACjC,IAAK,IAAIxG,EAAIwG,EAAO,EAAGxG,GAAK,IAAKA,EAC/ByG,EAAQzG,GAAKyG,EAAQzG,EAAI,GAAK4F,EAAM5F,EAAI,GAE1C,IAAM0G,EAAkB,CAAC,IAAK,IAAK,IAAK,KAAM,MACxCC,EACFF,EACKhK,KAAI,SAACmK,EAAQ5G,GACZ,IAAM6G,EAAQ,cAAOH,EAAgB1G,GAAE,sBAAc4G,GAC/CE,EAAQ9G,IAAMyG,EAAQzL,OAAS,EACjC,cAAO0L,EAAgB1G,EAAI,GAAE,sBAAc0G,EAAgB1G,GAAE,cAAM4G,GACnE,mBAAYF,EAAgB1G,GAAE,cAAM4G,GACxC,MAAO,UAAGC,EAAK,aAAKC,EAAK,IAC3B,IACCnK,KAAK,IAWd,OATAoJ,EAAS,mIAG0BF,EAAS,GAAE,aAAKA,EAAS,GAAE,mDAC7BA,EAAS,GAAE,qCACpCc,EAAsB,iEAIvB,IAAI,EAAA5C,eAAegC,EAC5B,EAKU,YAAAL,0BAAV,SAAoCE,EAAyDC,GAG3F,IAAIE,EACES,EAAOZ,EAAM5K,OAEfyL,EAAU,KACVD,EAAO,IACTC,EAAU,KAGZA,EAAU,IAAI1G,MAAMyG,EAAO,IACnBA,EAAO,GAAKZ,EAAMY,EAAO,GACjC,IAAK,IAAIxG,EAAIwG,EAAO,EAAGxG,GAAK,IAAKA,EAC/ByG,EAAQzG,GAAKyG,EAAQzG,EAAI,GAAK4F,EAAM5F,EAAI,GAE1C,IAAM0G,EAAkB,CAAC,IAAK,IAAK,IAAK,KAAM,KAAM,MAC9CC,EACFF,EACKhK,KAAI,SAACmK,EAAQ5G,GACZ,IAAM6G,EAAQ,cAAOH,EAAgB1G,GAAE,sBAAc4G,GAC/CE,EAAQ9G,IAAMyG,EAAQzL,OAAS,EACjC,cAAO0L,EAAgB1G,EAAI,GAAE,sBAAc0G,EAAgB1G,GAAE,cAAM4G,GACnE,mBAAYF,EAAgB1G,GAAE,cAAM4G,GACxC,MAAO,UAAGC,EAAK,aAAKC,EAAK,IAC3B,IACCnK,KAAK,IAWd,OATAoJ,EAAS,gIAGyBF,EAAS,GAAE,aAAKA,EAAS,GAAE,kDAC7BA,EAAS,GAAE,oCACpCc,EAAsB,kEAItB,IAAI,EAAA5C,eAAegC,EAC5B,EAKU,YAAApC,mBAAV,WACE,IAAMe,EAA2C,CAAC,EAC9CC,EAAW,aACfD,EAAOC,GAAY,IAAI,EAAAZ,eAAe,yWAUtCW,EADAC,EAAW,kBACQ,IAAI,EAAAZ,eAAe,6RAStCW,EADAC,EAAW,kBACQ,IAAI,EAAAZ,eAAe,6VAStCW,EADAC,EAAW,kBACQ,IAAI,EAAAZ,eAAe,kZAUtCY,EAAW,gBACX,IAAMM,GAAO,IAAAC,SAAQ7I,KAAK+G,QAAQR,UAAU3G,SAK5C,OAJAyI,EAAOC,GAAY,IAAI,EAAAZ,eAAe,iGAErBkB,EAAK8B,UAAS,uCAExBrC,CACT,EAKU,YAAAd,0BAAV,sBACQc,EAA2C,CAAC,EAC5CV,EAAe3H,KAAK+G,QAAQa,oBAsBlC,OArBA5H,KAAK+G,QAAQ4D,YAAYC,WAAWC,SAAQ,SAACC,EAAanH,GACxD,IAAMoH,EAAc,EAAKhE,QAAQiE,oBAAoBrH,GAC/C2E,GAAW,IAAA2C,4CAA2CH,GACxDC,EAAYlD,SACdQ,EAAOC,GAAY,EAAK4C,0BAA0B5C,EAAUwC,EAAaC,GAEzE1C,EAAOC,GAAY,EAAK6C,4BAA4B7C,EAAUwC,EAAaC,GAG7E,IAAMK,GAAmB,IAAAC,uDAAsDP,GAC3EC,EAAY9C,cAActJ,QAAUgJ,EAAaM,cAActJ,SAC7DoM,EAAYlD,SACdQ,EAAO+C,GACH,EAAKE,+BAA+BF,EAAkBL,EAAapD,EAAcmD,GAErFzC,EAAO+C,GACH,EAAKG,iCAAiCH,EAAkBL,EAAapD,EAAcmD,GAG7F,IAEOzC,CACT,EAKU,YAAAiD,+BAAV,SACIhD,EAAkByC,EAA4BpD,EAA6BtH,GAC7E,IAYImL,EAZEC,EAAUV,EAAY9C,cACtBD,EAAWL,EAAaM,cACxByD,EAAUrL,EACVsL,GAAiB,IAAAV,4CAA2CS,GAE5DE,EAASH,EAAQ9M,OACjBkN,EAAU7D,EAASrJ,OAEnBmN,EAAgB,EAAAC,cAAcC,iBAAiBP,EAASzD,GAExDtG,GAAO,IAAAuK,mBAAkBJ,GACzBK,EAAWL,EAAUD,EAErBO,GAAS,IAAAC,iBAGbZ,EADa,IAAXI,EACc,GACPC,EAAU,GAAKC,EAAcnN,QAAU,EAChC,cAEAmN,EAAc1L,KAAI,SAAAiM,GAAK,uBAAUF,EAAOE,EAAIH,GAAS,QAA9B,IAAuC5L,KAAK,MAErF,IAAIgM,EAEFA,EADET,EAAU,GAAKD,EAAS,EACF,SAEAH,EAAQrL,KAAI,SAACiE,EAAGV,GAAM,uBAAUwI,EAAOxI,EAAIuI,GAArB,IAAkC5L,KAAK,MAGvF,IAAIyI,EAAS,sBAEPwD,EAA2B,IADlB,EAAAC,UAAUjL,KAAKkK,GAGxBgB,EAA6B,IADnB,EAAAD,UAAUjL,KAAKyG,GAG/B,GAAe,IAAX4D,GAAiBW,GAAkBE,GAIhC,GAAIF,IAAkBE,EAEzB1D,EADc,IAAZ8C,EACO,2EAIA,yDAIN,GAAIC,EAAcnN,OAAQ,CAC/B,IAAM+N,EAAOd,EAAS,EAChBe,EAAOf,EAAS,EAElBE,EAAcc,QAAQF,IAAS,GAAKZ,EAAcc,QAAQD,IAAS,EACrE5D,EAAS,8BACA+C,EAAcc,QAAQF,IAAS,EACxC3D,EAAS,2EAEA+C,EAAcc,QAAQD,IAAS,IACxC5D,EAAS,+C,OAvBXA,EAAS,iEA2BX,IAAM8D,EAAsB,yCACDV,EAAON,EAAU,GAAE,6BACjCM,EAAON,EAAU,GAAE,qBAAaM,EAAON,EAAU,GAAE,6BACnDM,EAAON,EAAU,GAAE,uBAE1BnC,EAAS,uBACNpB,EAAQ,yBACX5G,EAAI,iDACJmL,EAAmB,qBACnBrB,EAAa,wCACMG,EAAc,YAAIW,EAAqB,uBAC1DvD,EAAM,mBAGZ,OAAO,IAAI,EAAArB,eAAegC,EAAQ,CAAC,+BACrC,EAKU,YAAA6B,iCAAV,SACIjD,EAAkByC,EAA4BpD,EAA6BtH,GAC7E,IAAM6H,EAAc,CAACP,EAAaQ,MAAOR,EAAaS,QAChD0E,EAAa,CAAC/B,EAAY5C,MAAO4C,EAAY3C,QAC7CwD,EAASb,EAAY9C,cAActJ,OACnCkN,EAAUlE,EAAaM,cAActJ,OACrC8M,EAAUV,EAAY9C,cACtBD,EAAWL,EAAaM,cACxB0D,GAAiB,IAAAV,4CAA2C5K,GAElE,GAAIuL,IAAWC,GAAW,EAAAlC,UAAUC,YAAYkD,EAAY5E,GAAc,CACxE,IAAM,EAAS,4BACHI,EAAQ,kDACSjI,EAAI,wCAGjC,OAAO,IAAI,EAAAqH,eAAe,EAAQ,CAAC,6B,CAGrC,IAGI8D,EAHE9J,GAAO,IAAAuK,mBAAkBJ,GACzBC,EAAgB,EAAAC,cAAcC,iBAAiBP,EAASzD,GACxDkE,EAAWL,EAAUD,EAErBO,GAAS,IAAAC,iBAGbZ,EADa,IAAXI,EACc,GACPC,EAAU,GAAKC,EAAcnN,QAAU,EAChC,cAEAmN,EAAc1L,KAAI,SAAAiM,GAAK,uBAAUF,EAAOE,EAAIH,GAAS,QAA9B,IAAuC5L,KAAK,MAErF,IAAIgM,EAEFA,EADET,EAAU,GAAKD,EAAS,EACF,SAEAb,EAAY9C,cAAc7H,KAAI,SAACiE,EAAGV,GAAM,uBAAUwI,EAAOxI,EAAIuI,GAArB,IAAkC5L,KAAK,MAEzG,IAAMoJ,EAAS,0BACHpB,EAAQ,2BACZ5G,EAAI,mDACJ8J,EAAa,8BACNG,EAAc,YAAIW,EAAqB,yBAGtD,OAAO,IAAI,EAAA5E,eAAegC,EAAQ,CAAC,+BACrC,EAKU,YAAAwB,0BAAV,SAAoC5C,EAAkBjI,EAAc0K,GAClE,OAAQA,EAAY9C,cAActJ,QAChC,KAAK,EACH,OAAOqB,KAAK+M,uBAAuBzE,EAAUjI,GAC/C,KAAK,EACH,OAAOL,KAAKgN,mBAAmB1E,EAAUjI,EAAM0K,GACjD,KAAK,EACH,OAAO/K,KAAKiN,mBAAmB3E,EAAUjI,EAAM0K,GACjD,KAAK,EACH,OAAO/K,KAAKkN,mBAAmB5E,EAAUjI,EAAM0K,GACjD,QACE,OAAO/K,KAAKmN,mBAAmB7E,EAAUjI,EAAM0K,GAErD,EAKU,YAAAI,4BAAV,SAAsC7C,EAAkBjI,EAAc0K,GACpE,IAAMxB,EAAQwB,EAAY9C,cAC1B,OAAQsB,EAAM5K,QACZ,KAAK,EACH,OAAOqB,KAAKoN,yBAAyB9E,EAAUjI,EAAM0K,GACvD,KAAK,EACH,OAAO/K,KAAKqN,qBAAqB/E,EAAUjI,EAAM0K,GACnD,KAAK,EACH,OAAO/K,KAAKsN,qBAAqBhF,EAAUjI,EAAM0K,GACnD,KAAK,EACH,OAAO/K,KAAKuN,qBAAqBjF,EAAUjI,EAAM0K,GACnD,KAAK,EACH,OAAO/K,KAAKwN,qBAAqBlF,EAAUjI,EAAM0K,GACnD,KAAK,EACH,OAAO/K,KAAKyN,qBAAqBnF,EAAUjI,EAAM0K,GACnD,KAAK,EACH,OAAO/K,KAAK0N,qBAAqBpF,EAAUjI,EAAM0K,GACnD,QAEE,MAAM,IAAIvJ,MAAM,gCAAyB+H,EAAM5K,OAAM,OAE3D,EAKU,YAAAoO,uBAAV,SAAiCzE,EAAkBjI,GACjD,IAAMuI,GAAO,IAAAC,SAAQ7I,KAAK+G,QAAQR,UAAU3G,SACtC8J,EAAS,2BACFpB,EAAQ,oCACJM,EAAK8B,UAAS,YAAIrK,EAAI,qCAGvC,OAAO,IAAI,EAAAqH,eAAegC,EAC5B,EAKU,YAAAsD,mBAAV,SAA6B1E,EAAkBjI,EAAc0K,GAC3D,IAAMvB,EAAW,CAACuB,EAAY5C,MAAO4C,EAAY3C,QAC3CqB,EAAiB,CAACD,EAAS,GAAIA,EAAS,IACxCZ,GAAO,IAAAC,SAAQ7I,KAAK+G,QAAQR,UAAU3G,SAOtC8J,EALgB,eAAQpB,EAAQ,iEAElCmB,EAAe,GAAE,aAAKA,EAAe,GAAE,mCAChCb,EAAK8B,UAAS,YAAIrK,EAAI,iBAGjC,OAAO,IAAI,EAAAqH,eAAegC,EAAQ,CAAC,8BACrC,EAKU,YAAAuD,mBAAV,SAA6B3E,EAAkBjI,EAAc0K,GAC3D,IAAMxB,EAAQwB,EAAY9C,cACpBuB,EAAW,CAACuB,EAAY5C,MAAO4C,EAAY3C,QAC3CQ,GAAO,IAAAC,SAAQ7I,KAAK+G,QAAQR,UAAU3G,SACtC+N,EAAUnE,EAAS,GACnBoE,EAAUpE,EAAS,GAEzB,GAAgB,MAAZA,GAAoB,EAAAG,UAAUC,YAAYL,EAAOC,GAAW,CAC9D,IAAM,EAAgB,eAAQlB,EAAQ,oFACSsF,EAAO,eAAOD,EAAO,gCACzD/E,EAAK8B,UAAS,YAAIrK,EAAI,mBAGjC,OAAO,IAAI,EAAAqH,eAAe,E,CAE5B,IAAM+B,EAAiBD,EACjBqE,EAAehP,KAAKE,KAAKwK,EAAM,GAAK,GAKpCG,EAJgB,eAAQpB,EAAQ,gEACTmB,EAAe,GAAE,aAAKA,EAAe,GAAE,aAAKoE,EAAY,sCAC1EjF,EAAK8B,UAAS,YAAIrK,EAAI,iBAGjC,OAAO,IAAI,EAAAqH,eAAegC,EAAQ,CAAC,8BACrC,EAKU,YAAAwD,mBAAV,SAA6B5E,EAAkBjI,EAAc0K,GAC3D,IAAMxB,EAAQwB,EAAY9C,cACpBuB,EAAW,CAACuB,EAAY5C,MAAO4C,EAAY3C,QAC3CqB,EAAiB,CAACD,EAAS,GAAIA,EAAS,IACxCZ,GAAO,IAAAC,SAAQ7I,KAAK+G,QAAQR,UAAU3G,SAE5C,GAAiB,IAAb2J,EAAM,GAAU,CAClB,IAAMuE,EAAgBvE,EAAMwE,MAAM,GAE5BC,GAAgB,IAAAC,mBAAkB1E,EAAOuE,GAGzCI,EAAgCC,KAAKC,MAAMD,KAAKE,UAAUtD,IAChEmD,EAAejG,cAAgB+F,EAC/B,IAAMM,EAAiBtO,KAAKkL,0BAA0B5C,EAAUjI,EAAM6N,GAKhE,EAJgB,UAAGI,EAAeC,YAAW,wBAC5CjG,EAAQ,uDACJA,EAAQ,aAAI,IAAAkG,mBAPR,CAAC,IAAK,MAAO,OAFX,CAAC,EAAG,IASqC,gBAG1D,OAAO,IAAI,EAAA9G,eAAe,EAAQ4G,EAAeG,a,CAEnD,IAAMd,EAAUlE,EAAe,GACzBmE,EAAUnE,EAAe,GAEzBoE,EAAehP,KAAKE,KAAKwK,EAAM,GAAK,GACpCO,EAAgB+D,EAAehP,KAAKE,KAAKwK,EAAM,GAAK,GAMpDG,EAJgB,eAAQpB,EAAQ,iFAEhCsF,EAAO,aAAKD,EAAO,aAAK7D,EAAa,aAAK+D,EAAY,yCACjDjF,EAAK8B,UAAS,YAAIrK,EAAI,WAEjC,OAAO,IAAI,EAAAqH,eAAegC,EAAQ,CAAC,8BACrC,EAIU,YAAAyD,mBAAV,SAA6B7E,EAAkBjI,EAAc0K,GAa3D,IAZA,IAAMxB,EAAQwB,EAAY9C,cACpBkC,EAAOZ,EAAM5K,OACb6K,EAAW,CAACuB,EAAY5C,MAAO4C,EAAY3C,QAC3CQ,GAAO,IAAAC,SAAQ7I,KAAK+G,QAAQR,UAAU3G,SAEtC6J,EAAiB,CAACD,EAAS,GAAIA,EAAS,IACxCmE,EAAUlE,EAAe,GACzBmE,EAAUnE,EAAe,GACzBoE,EAAehP,KAAKE,KAAKwK,EAAMY,EAAO,GAAK,GAC7CL,EAAgB+D,EAAehP,KAAKE,KAAKwK,EAAMY,EAAO,GAAK,GAC3DuE,EAAS,0BACTC,EAAQ,cAAO7E,EAAa,0BAAkB+D,EAAY,gBACrD3D,EAAI,EAAGA,EAAIC,EAAO,EAAGD,IAC5BwE,EAAS,eAAQxE,EAAC,MAAOwE,EACzB5E,GAAiBP,EAAMY,EAAOD,EAAI,GAClCyE,EAAQ,WAAIzE,EAAC,cAAMJ,EAAa,OAAQ6E,EAE1C,IAOMjF,EAPgB,eAAQpB,EAAQ,YAAIoG,EAAM,kCAChCC,EAAK,uCACEf,EAAO,8CACAA,EAAO,iEACYA,EAAO,aAAKD,EAAO,4BACzD/E,EAAK8B,UAAS,YAAIrK,EAAI,iBAGjC,OAAO,IAAI,EAAAqH,eAAegC,EAC5B,EAKU,YAAA0D,yBAAV,SAAmC9E,EAAkBjI,EAAc0K,GAC3D,QAAqB,CAACA,EAAY5C,MAAO4C,EAAY3C,QAAO,GAA3DuF,EAAO,KAAEC,EAAO,KACvB,GAAgB,IAAZD,GAA6B,IAAZC,EAAe,CAClC,IAAM,EAAS,4BACHtF,EAAQ,kDACSjI,EAAI,qCAGjC,OAAO,IAAI,EAAAqH,eAAe,EAAQ,CAAC,6B,CAGrC,IAAMgC,EAAS,0BACHpB,EAAQ,sCACDjI,EAAI,wCAAgCsN,EAAO,aAAKC,EAAO,8CAC7CD,EAAO,aAAKC,EAAO,oBAAYvN,EAAI,8CACnCA,EAAI,6BAGjC,OAAO,IAAI,EAAAqH,eACPgC,EAAQ,CAAC,yBAA0B,4BAA6B,8BACtE,EAKU,YAAA2D,qBAAV,SAA+B/E,EAAkBjI,EAAc0K,GAC7D,IAAM6D,EAAQ7D,EAAY5C,MACpB0G,EAAQ9D,EAAY3C,OAE1B,GAAc,IAAVyG,GAAyB,IAAVD,EAAa,CAC9B,IAAM,EAAS,0BACLtG,EAAQ,yDACSjI,EAAI,iCAG/B,OAAO,IAAI,EAAAqH,eAAe,EAAQ,CAAC,6B,CAGrC,GAAc,IAAVmH,EAAa,CACf,IAAM,EAAS,4BACHvG,EAAQ,4EAC0BsG,EAAK,uDACtBvO,EAAI,iCAGjC,OAAO,IAAI,EAAAqH,eAAe,EAAQ,CAAC,6B,CAErC,GAAc,IAAVkH,EAAa,CACf,IAAM,EAAS,4BACHtG,EAAQ,iFAC+BuG,EAAK,kDAC3BxO,EAAI,iCAGjC,OAAO,IAAI,EAAAqH,eAAe,EAAQ,CAAC,6B,CAErC,IAAMgC,EAAS,0BACHpB,EAAQ,yDACSsG,EAAK,aAAKC,EAAK,qDACfxO,EAAI,6BAGjC,OAAO,IAAI,EAAAqH,eAAegC,EAAQ,CAAC,yBAA0B,6BAC/D,EAMU,YAAA4D,qBAAV,SAA+BhF,EAAkBjI,EAAc0K,GAC7D,IAAMxB,EAAQwB,EAAY9C,cAGpBuB,EAAW,CAACuB,EAAY3C,OAAQ2C,EAAY5C,OAElD,GAAgB,MAAZqB,GAAoB,EAAAG,UAAUC,YAAYL,EAAOC,GAAW,CAC9D,IAAM,EAAUA,EAAS,GACnB,EAAUA,EAAS,GACnB,EAAS,4BACHlB,EAAQ,wFAC+B,EAAO,eAAO,EAAO,kDAC3CjI,EAAI,iCAGjC,OAAO,IAAI,EAAAqH,eAAe,EAAQ,CAAC,6B,CAG/B,OAAuB,IAAAoH,cAAavF,GAAnCwF,EAAQ,WAAEC,EAAQ,WACnBlB,EAAgBiB,EACtB,GAAIjB,EAAcnP,OAAS4K,EAAM5K,OAAQ,CACvC,IAAMqP,GAAgB,IAAAC,mBAAkB1E,EAAOuE,GAEzCI,EAAgCC,KAAKC,MAAMD,KAAKE,UAAUtD,IAChEmD,EAAejG,cAAgB+F,EAE/B,IACM,EAAS,sBACThO,KAAKmL,4BAA4B7C,EAAUjI,EAAM6N,GAAgBK,YAAW,6BACtEjG,EAAQ,oDACLA,EAAQ,aAAI,IAAAkG,mBAJZ,CAAC,MAAO,OAI8BQ,GAAS,6BAG9D,OAAO,IAAI,EAAAtH,eAAe,EAAQ,CAAC,6B,CAGrC,IAAMiG,EAAUnE,EAAS,GACnBoE,EAAUpE,EAAS,GACzB,GAAgB,IAAZoE,EAAe,CACjB,IAAM,EAAS,4BACHtF,EAAQ,wDACDjI,EAAI,wCAAgCsN,EAAO,aAAKC,EAAO,mEAC1BvN,EAAI,mBAAWkJ,EAAM,GAAE,sEAC3BoE,EAAO,kDACtBtN,EAAI,iCAGjC,OAAO,IAAI,EAAAqH,eAAe,EAAQ,CAAC,4BAA6B,8B,CAGlE,GAAgB,IAAZiG,EAAe,CACjB,IAAM,EAAS,4BACHrF,EAAQ,wDACDjI,EAAI,wCAAgCsN,EAAO,aAAKC,EAAO,mEAC1BvN,EAAI,mBAAWkJ,EAAM,GAAE,iEAChCqE,EAAO,uDACjBvN,EAAI,iCAGjC,OAAO,IAAI,EAAAqH,eAAe,EAAQ,CAAC,4BAA6B,8B,CAGlE,IAAMgC,EAAS,0BACHpB,EAAQ,6DACMiB,EAAM,GAAE,mDACLoE,EAAO,aAAKC,EAAO,qDACnBvN,EAAI,6BAGjC,OAAO,IAAI,EAAAqH,eACPgC,EAAQ,CAAC,yBAA0B,4BAA6B,8BACtE,EAMU,YAAA6D,qBAAV,SAA+BjF,EAAkBjI,EAAc0K,GAC7D,IAAMxB,EAAQwB,EAAY9C,cACpBgH,EAAU1F,EAAM,GAAKA,EAAM,GAC3B2F,EAAU3F,EAAM,GAEhB,GAAuB,IAAAuF,cAAavF,GAAnCwF,EAAQ,WAAEC,EAAQ,WACnBlB,EAAgBiB,EACtB,GAAIjB,EAAcnP,OAAS4K,EAAM5K,OAAQ,CACvC,IAAMqP,GAAgB,IAAAC,mBAAkB1E,EAAOuE,GAGzCI,EAAgCC,KAAKC,MAAMD,KAAKE,UAAUtD,IAChEmD,EAAejG,cAAgB+F,EAC/B,IAAMmB,EAAUnP,KAAKmL,4BAA4B7C,EAAUjI,EAAM6N,GAE3DkB,EAAUJ,EAASK,UACnB,EAAS,sBACTF,EAAQZ,YAAW,6BACbjG,EAAQ,+DACLA,EAAQ,aAAI,IAAAkG,mBAVZ,CAAC,QAAS,MAAO,OAUqBY,GAAQ,6BAG7D,OAAO,IAAI,EAAA1H,eAAe,EAAQyH,EAAQV,a,CAG5C,IAAMd,EAAU5C,EAAY5C,MACtByF,EAAU7C,EAAY3C,OACtBsB,EAAS,4BACDpB,EAAQ,6JAEQ2G,EAAO,oBAAYC,EAAO,qDACzBvB,EAAO,aAAKC,EAAO,uDACnBvN,EAAI,+BAGnC,OAAO,IAAI,EAAAqH,eACPgC,EAAQ,CAAC,yBAA0B,4BAA6B,8BACtE,EAMU,YAAA8D,qBAAV,SAA+BlF,EAAkBjI,EAAc0K,GAC7D,IAAMxB,EAAQwB,EAAY9C,cACpBqH,EAAU/F,EAAM,GAChB2F,EAAU3F,EAAM,GAAK+F,EACrBL,EAAU1F,EAAM,GAAK2F,EAsBrBvB,EAAU5C,EAAY5C,MACtByF,EAAU7C,EAAY3C,OACtBsB,EAAS,0BACHpB,EAAQ,oFACM2G,EAAO,oBAAYC,EAAO,sCAC/BI,EAAO,qDACC3B,EAAO,aAAKC,EAAO,qDACnBvN,EAAI,6BAGjC,OAAO,IAAI,EAAAqH,eAAegC,EAAQ,CAAC,yBAA0B,6BAC/D,EAKU,YAAA+D,qBAAV,SAA+BnF,EAAkBjI,EAAc0K,GAC7D,IAAMxB,EAAQwB,EAAY9C,cACpBsH,EAAUhG,EAAM,GAChB+F,EAAU/F,EAAM,GAAKgG,EACrBL,EAAU3F,EAAM,GAAK+F,EACrBL,EAAU1F,EAAM,GAAK2F,EAErB,GAAuB,IAAAJ,cAAavF,GAAnCwF,EAAQ,WAAEC,EAAQ,WACzB,GAAID,EAASpQ,OAAS4K,EAAM5K,OAAQ,CAClC,IAAMqP,GAAgB,IAAAC,mBAAkB1E,EAAOwF,GAGzCb,EAAgCC,KAAKC,MAAMD,KAAKE,UAAUtD,IAChEmD,EAAejG,cAAgB+F,EAE/B,IAAM,EAAS,sBACThO,KAAKmL,4BAA4B7C,EAAUjI,EAAM6N,GAAgBK,YAAW,6BACtEjG,EAAQ,uFACLA,EAAQ,aAAI,IAAAkG,mBARZ,CAAC,MAAO,MAAO,QAAS,SAAU,UAQIQ,GAAS,6BAG9D,OAAO,IAAI,EAAAtH,eAAe,EAAQ,CAAC,4BAA6B,0B,CAGlE,IAAMiG,EAAU5C,EAAY5C,MACtByF,EAAU7C,EAAY3C,OACtBsB,EAAS,0BACHpB,EAAQ,gGACM2G,EAAO,oBAAYC,EAAO,sBAAcI,EAAO,kCACxDC,EAAO,sDACK5B,EAAO,aAAKC,EAAO,qDACnBvN,EAAI,6BAGjC,OAAO,IAAI,EAAAqH,eAAegC,EAAQ,CAAC,4BAA6B,0BAClE,EAKU,YAAAgE,qBAAV,SAA+BpF,EAAkBjI,EAAc0K,GAC7D,IAAMxB,EAAQwB,EAAY9C,cACpBuH,EAAUjG,EAAM,GAChBgG,EAAUhG,EAAM,GAAKiG,EACrBF,EAAU/F,EAAM,GAAKgG,EACrBL,EAAU3F,EAAM,GAAK+F,EACrBL,EAAU1F,EAAM,GAAK2F,EAErB,GAAuB,IAAAJ,cAAavF,GAAnCwF,EAAQ,WAAEC,EAAQ,WACzB,GAAID,EAASpQ,OAAS4K,EAAM5K,OAAQ,CAClC,IAAMqP,GAAgB,IAAAC,mBAAkB1E,EAAOwF,GAGzCb,EAAgCC,KAAKC,MAAMD,KAAKE,UAAUtD,IAChEmD,EAAejG,cAAgB+F,EAE/B,IAAM,EAAS,wBACPhO,KAAKmL,4BAA4B7C,EAAUjI,EAAM6N,GAAgBK,YAAW,+BACtEjG,EAAQ,oHAELA,EAAQ,aAAI,IAAAkG,mBATd,CAAC,MAAO,MAAO,QAAS,SAAU,SAAU,UASJQ,GAAS,iCAGhE,OAAO,IAAI,EAAAtH,eAAe,EAAQ,CAAC,4BAA6B,0B,CAGlE,IAAMiG,EAAU5C,EAAY5C,MACtByF,EAAU7C,EAAY3C,OACtBsB,EAAS,4BACDpB,EAAQ,2HAEM2G,EAAO,oBAAYC,EAAO,sBAAcI,EAAO,oCACxDC,EAAO,uBAAeC,EAAO,wDACjB7B,EAAO,aAAKC,EAAO,uDACnBvN,EAAI,iCAGnC,OAAO,IAAI,EAAAqH,eACPgC,EAAQ,CAAC,yBAA0B,4BAA6B,8BACtE,EAQU,YAAAtC,MAAV,WAQE,IAPA,IAAM2B,EAAS/I,KAAK+G,QAAQa,oBACtBuC,EAAOpB,EAAOQ,MAAM5K,OACpByL,EAAUrB,EAAOqB,QACjBqF,EAAS1G,EAAOZ,MAChBuH,EAAS3G,EAAOX,OAEhBuH,EAAe,GACZhM,EAAI,EAAGA,EAAIwG,EAAO,IAAKxG,EAC9BgM,EAAa5K,KAAK,sBACZpB,EAAC,wBAAgByG,EAAQzG,GAAE,MACjCgM,EAAa5K,KAAK,gCACFpB,EAAC,eAAOyG,EAAQzG,GAAE,MAEpCgM,EAAa5K,KAAK,sBACVoF,EAAO,EAAC,gBAChB,IAAMyF,EAAO,uDAC4BzF,EAAI,gEACAsF,EAAM,aAAKC,EAAM,uBACxDC,EAAarP,KAAK,IAAG,6DAEU6J,EAAI,yBACnCwF,EAAarP,KAAK,IAAG,mBAG3B,MAAO,CAAC8G,MAAO,IAAI,EAAAM,eAAekI,EAAM,CAAC,+BAC3C,EAOU,YAAAvI,UAAV,sBACQgB,EAA2C,CAAC,EAclD,OAbArI,KAAK+G,QAAQ4D,YAAYC,WAAWC,SAAQ,SAACxK,EAAMsD,GACjD,IAAMkM,EAAS,EAAK9I,QAAQiE,oBAAoBrH,GAE1CwG,GADQ0F,EAAO5H,cAActJ,OAAS,EAAIkR,EAAO5H,cAAgB4H,EAAOtG,OAC3D5K,OACf2J,EAAW,WAAIjI,GACnBgI,EAAOC,GAAY,IAAI,EAAAZ,eACnB,EAAKoI,mBAAmBzP,EAAM8J,EAAM0F,EAAO1H,MAAO0H,EAAOzH,QAAQ,GACjE,CAAC,oCAA6BE,GAAY,6BAA8B,8BAE5ED,EADAC,GAAsB,MACH,IAAI,EAAAZ,eACnB,EAAKoI,mBAAmBzP,EAAM8J,EAAM0F,EAAO1H,MAAO0H,EAAOzH,QAAQ,GACjE,CAAC,oCAA6BE,GAAY,6BAA8B,6BAC9E,IACOD,CACT,EAQU,YAAAyH,mBAAV,SAA6BC,EAAiB5F,EAAchC,EAAeC,EAAgB4H,GAEzF,IAAI3P,EAAO,WAAI0P,GACXC,IACF3P,GAAc,MAEhB,IAAMuI,GAAO,IAAAC,SAAQ7I,KAAK+G,QAAQR,UAAU3G,SAC5C,MAAO,0BACKS,EAAI,kBAAU8J,EAAI,uDACM9J,EAAI,gEACK8H,EAAK,aAAKC,EAAM,uDACvBQ,EAAK8B,UAAS,YAAIqF,EAAO,4DAIjE,EASU,YAAAE,mBAAV,SAA6BF,EAAiB5F,EAAchC,EAAeC,EAAgB4H,GAEzF,IAAI3P,EAAO,WAAI0P,EAAO,SAClBC,IACF3P,GAAc,MAEhB,IAAMuI,GAAO,IAAAC,SAAQ7I,KAAK+G,QAAQR,UAAU3G,SAC5C,MAAO,yBACIS,EAAI,kBAAU8J,EAAI,wDACQ4F,EAAO,gEACC5H,EAAK,aAAKC,EAAM,gCAC9CQ,EAAK8B,UAAS,YAAIqF,EAAO,kCAG1C,EACF,EA1yCA,CAAmC,EAAAG,SAAtB,EAAAC,cAAAA,C,kCCRb,IAAYC,E,oKAAAA,EAAA,EAAAA,eAAA,EAAAA,aAAY,KACtB,6BACA,+BAaW,EAAAC,YACX,SACW9J,EAAgCoE,EAAiCK,EACjEpD,GADA,KAAArB,UAAAA,EAAgC,KAAAoE,YAAAA,EAAiC,KAAAK,oBAAAA,EACjE,KAAApD,oBAAAA,CAAqC,EAE5B,EAAAsI,QACpB,SAAmBnJ,GAAA,KAAAA,QAAAA,CAAuB,EAM/B,EAAAW,eACX,SAAmB6G,EAA4BE,GAA5B,KAAAF,YAAAA,EAA4B,KAAAE,aAAAA,CAA0B,EAK3E,iBAGE,WAAmBpO,EAAckO,EAAsBE,GAApC,KAAApO,KAAAA,EAEfL,KAAKyO,aADHA,GAGkB,GAGlBF,IACFvO,KAAKuO,YAAcA,EAEvB,CAMF,OALE,YAAA+B,cAAA,SAAcC,GACRA,GACFvQ,KAAKyO,aAAa1J,KAAKwL,EAE3B,EACF,EAnBA,GAAa,EAAAC,mBAAAA,EAsBb,8BA0DA,QAzDS,EAAAC,mBAAP,SAA0BC,GACxB,IAAKA,GAA0B,IAAjBA,EAAM/R,OAClB,MAAO,GAGT,GAAqB,IAAjB+R,EAAM/R,OACR,OAAO+R,EAGT,IAAMC,EAAa,IAAIC,IACjBC,EAAmB,IAAID,IACvBvI,EAAS,IAAI3E,MAGnB,OADA1D,KAAK8Q,mBAAmBJ,EAAOC,EAAYE,EAAkBxI,GACtDA,CACT,EAEe,EAAAyI,mBAAf,SACIC,EAAkCJ,EAAyBE,EAC3DxI,GACF,IAAK,IAAI1E,EAAI,EAAGA,EAAIoN,EAAWpS,SAAUgF,EACvC3D,KAAKgR,YAAYD,EAAWpN,GAAIgN,EAAYE,EAAkBxI,EAElE,EAEe,EAAA2I,YAAf,SACIlU,EAA0B6T,EAAyBE,EAA+BxI,GAEpF,GAAKvL,IAAQ+T,EAAiBI,IAAInU,EAAKuD,MAAvC,CAKA,GAAIsQ,EAAWM,IAAInU,EAAKuD,MACtB,MAAM,IAAImB,MAAM,oFAIlBmP,EAAWO,IAAIpU,EAAKuD,MAGpB,IAAMoO,EAAe3R,EAAK2R,aAC1B,GAAIA,GAAgBA,EAAa9P,OAAS,EACxC,IAAK,IAAIgF,EAAI,EAAGA,EAAI8K,EAAa9P,SAAUgF,EACzC3D,KAAKgR,YAAYvC,EAAa9K,GAAIgN,EAAYE,EAAkBxI,GAKpEA,EAAOtD,KAAKjI,GAGZ+T,EAAiBK,IAAIpU,EAAKuD,MAG1BsQ,EAAWhP,OAAO7E,EAAKuD,K,CACzB,EACF,EA1DA,GAAa,EAAA8Q,4BAAAA,C,kzBC3Db,cAMA,cACE,WAAYpK,G,OACV,YAAMA,IAAQ,IAChB,CAsFF,OAzFqC,OAInC,YAAAE,aAAA,WACE,OAAO,EAAP,KAAWjH,KAAKoR,iBAAoBpR,KAAKqR,gBAC3C,EACA,YAAA5J,eAAA,WACE,MAAO,CAAC,CACV,EACU,YAAA2J,cAAV,WACE,MAAO,CACLE,OAAQ,IAAI,EAAA5J,eAAe,iGAK/B,EACU,YAAA2J,cAAV,WACE,MAAO,CACLE,OAAQ,IAAI,EAAA7J,eAAe,oFAK/B,EAKU,YAAA8J,YAAV,WACE,IAAMC,EAAaC,EAAgBC,iBAAmB,uBAAyB,GAC/E,MAAO,CACLL,OAAQ,IAAI,EAAA5J,eAAe,ymBAYvB+J,EAAU,mHAMlB,EAKU,YAAAG,YAAV,WACE,IAAMH,EAAaC,EAAgBC,iBAAmB,uBAAyB,GAC/E,MAAO,CACLJ,OAAQ,IAAI,EAAA7J,eAAe,8JAGrB+J,EAAU,sYASpB,EAKO,EAAAE,eAAP,WACE,IAAMzH,EAAI,IAAI2H,YAAY,GACpBC,EAAI,IAAIC,YAAY7H,GACpB8H,EAAI,IAAIC,WAAW/H,GAEzB,GADA4H,EAAE,GAAK,WACM,MAATE,EAAE,GACJ,OAAO,EAET,GAAa,MAATA,EAAE,GACJ,OAAO,EAET,MAAM,IAAIxQ,MAAM,qBAClB,EACF,EAzFA,CAAqC,EAAA0O,SAAxB,EAAAwB,gBAAAA,C,mzBCNb,cACA,UAOA,cACE,WAAY3K,G,OACV,YAAMA,IAAQ,IAChB,CA8BF,OAjCsC,OAIpC,YAAAE,aAAA,WACE,OAAO,EAAP,KAAWjH,KAAKkS,gBAAmBlS,KAAKmS,kBAC1C,EACA,YAAA1K,eAAA,WACE,MAAO,CAAC,CACV,EACU,YAAAyK,aAAV,WACE,IAAMtJ,GAAO,IAAAC,SAAQ7I,KAAK+G,QAAQR,UAAU3G,SAC5C,MAAO,CACLsS,aAAc,IAAI,EAAAxK,eACd,kEAEIkB,EAAKG,OAAM,0CAGf,CAAC,oBAET,EACU,YAAAoJ,gBAAV,WACE,MAAO,CACLA,gBAAiB,IAAI,EAAAzK,eACjB,wGAKA,CAAC,oBAET,EACF,EAjCA,CAAsC,EAAAwI,SAAzB,EAAAkC,iBAAAA,C,2GCRb,IAAMC,EAAwB,qFAK9B,0BAA+BC,GAG7B,IAFA,IACIC,EADEC,EAAiG,CAAC,EAEhD,QAAhDD,EAAQF,EAAsBI,KAAKH,KAAmB,CAC5D,IAAM5D,EAAS6D,EAAM,GACDG,MAAM,KACNtS,KAAI,SAAAiE,GACH,IAAMsO,EAAStO,EAAEuO,OAAOF,MAAM,KAC9B,OAAIC,GAA4B,IAAlBA,EAAOhU,OACZ,CAAC+C,KAAMiR,EAAO,GAAItS,KAAMsS,EAAO,IAEjC,IACT,IACCE,QAAO,SAAAC,GAAK,OAAM,OAANA,CAAA,IAChCN,EAAWD,EAAM,IAAM,CAAC7D,OAAM,EAAEkB,KAAM2C,EAAM,G,CAE9C,IAAK,IAAM,KAAQC,EAGjB,IAFA,IAAMO,EArBc,6DAqBgBC,QAAQ,WAAY,GAClDC,EAAQ,IAAIC,OAAOH,EAAa,M,aAEpC,IAAMrR,EAAO6Q,EAAM,GACbY,EAAWZ,EAAM,GACjB7D,EAAS6D,EAAM,GAAGG,MAAM,KACxBU,EAAW,EAAS,UAAG1R,EAAI,YAAIyR,EAAQ,KAAM,GAC/CE,EAAkBb,EAAW,GAAM5C,KACnC0D,EAAiB,GACrBd,EAAW,GAAM9D,OAAO7D,SAAQ,SAACiI,EAAGnP,GAC9BmP,IACFQ,GAAkB,UAAGR,EAAEpR,KAAI,YAAIoR,EAAEzS,KAAI,cAAMqO,EAAO/K,GAAE,OAExD,IAEA0P,GADAA,EAAU,UAAGC,EAAc,cAAMD,IACfL,QAAQ,SAAU,UAAGG,EAAQ,QAC/C,IAAMI,EAAc,kBAClBH,EAAQ,8BAENC,EAAO,qBAGXf,EAASA,EAAOU,QAAQT,EAAM,GAAIgB,E,EApBI,QAAhChB,EAAQU,EAAMR,KAAKH,K,IAwB7B,OADAA,EAASA,EAAOU,QAAQX,EAAuB,GAEjD,C,obCjDA,cACA,UACA,UACA,UAYA,aAKE,WACI9L,EAAyBoE,EAA0BK,EACnDpD,GAFJ,WAHS,KAAA4L,KAAkC,CAAC,EACnC,KAAAC,8BAA6E,CAAC,EAKrFzT,KAAK+G,QAAU,IAAI,EAAAsJ,YAAY9J,EAAWoE,EAAaK,EAAqBpD,GAG5EpI,OAAOkU,KAAK,EAAAC,cAAc9I,SAAQ,SAACxK,GACjC,IAAMuT,EAAM,IAAI,EAAAD,aAAatT,GAAM,EAAK0G,SACxC,EAAKyM,KAAKnT,GAAQuT,CACpB,IAGA,IAAMxT,EAAMJ,KAAKyT,8BACjB,IAAK,IAAMI,KAAW7T,KAAKwT,KAAM,CAC/B,IACMM,EADM9T,KAAKwT,KAAKK,GACI5M,eAC1B,IAAK,IAAMkI,KAAW2E,EAAe,CACnC,IAAMrS,EAAMoS,EAAU,IAAM1E,EACxB4E,OAAW,EACX3T,EAAIqB,IACNsS,EAAc3T,EAAIqB,IACN8M,YAAcuF,EAAc3E,GAASZ,aAEjDwF,EAAc,IAAI,EAAAvD,mBAAmB/O,EAAKqS,EAAc3E,GAASZ,aACjEnO,EAAIqB,GAAOsS,GAEb,IAAMtF,EAAeqF,EAAc3E,GAASV,aAC5C,GAAIA,EACF,IAAK,IAAI9K,EAAI,EAAGA,EAAI8K,EAAa9P,SAAUgF,EACzC,GAAKvD,EAAIqO,EAAa9K,IAKpBoQ,EAAYzD,cAAclQ,EAAIqO,EAAa9K,SALlB,CACzB,IAAM4M,EAAO,IAAI,EAAAC,mBAAmB/B,EAAa9K,IACjDvD,EAAIqO,EAAa9K,IAAM4M,EACvBwD,EAAYzD,cAAcC,E,GAQtC,CAmEF,OAjEE,YAAAyD,WAAA,WACE,IAAMrJ,EAAc3K,KAAK+G,QAAQ4D,YAC7BjB,EAASiB,EAAYsJ,aAWzB,OARKjU,KAAK+G,QAAQ4D,YAAYuJ,UAC5BxK,EAAS,UAAGA,EAAM,oBAChB,IAAAyK,0BAAyBnU,KAAK+G,QAAQR,UAAU3G,QAASI,KAAK+G,QAAQa,oBAAoB2B,MAAM5K,UAGpG+K,GAAS,IAAA0K,gBAAe1K,GAGjB,WAAG,IAAA2K,uBAAsBrU,KAAK+G,QAAQR,UAAU3G,SAAQ,iBAC7DI,KAAKsU,YAAY3J,EAAYC,WAAYD,EAAY4J,WAAU,iBAC/DvU,KAAKwU,WAAW9K,GAAO,iBACvBA,EACJ,EAEU,YAAA8K,WAAV,SAAqBlC,GACnB,IAAMmC,EAAmBzU,KAAK0U,kCAAkCpC,GAEhE,GAAgC,IAA5BmC,EAAiB9V,OACnB,MAAO,GAIT,IADA,IAAIgW,EAAW,GACNhR,EAAI,EAAGA,EAAI8Q,EAAiB9V,SAAUgF,EAAG,CAChD,IAAI8Q,EAAiB9Q,GAAG4K,YAGtB,MAAM,IAAI/M,MAAM,qDAA8CiT,EAAiB9Q,GAAGtD,OAFlFsU,GAAYF,EAAiB9Q,GAAG4K,YAAc,I,CAMlD,OAAOoG,CACT,EACQ,YAAAD,kCAAR,SAA0CpC,GAA1C,WACQ5B,EAA8B,GASpC,OAPAlR,OAAOkU,KAAK1T,KAAKyT,+BAA+B5I,SAAQ,SAAA+J,GACtD,IAAMzF,EAAUyF,EAAgBlC,MAAM,KAAK,IACV,IAA7BJ,EAAO1F,QAAQuC,IACjBuB,EAAM3L,KAAK,EAAK0O,8BAA8BmB,GAElD,IAEO,EAAAzD,4BAA4BV,mBAAmBC,EACxD,EAEU,YAAA4D,YAAV,SAAsBO,EAAqBN,G,YACnCO,EAAyB,GAC/B,GAAID,E,IACF,IAAsB,QAAAA,GAAQ,8BAAE,CAA3B,IAAME,EAAO,QAChBD,EAAa/P,KAAK,4BAAqBgQ,EAAO,K,mGAGlD,GAAIR,E,IACF,IAAuB,QAAAA,GAAS,8BAAE,CAA7B,IAAMpB,EAAQ,QACjB2B,EAAa/P,KACT,kBAAWoO,EAASzR,KAAI,YAAIyR,EAAS9S,MAAI,OAAG8S,EAAS6B,YAAc,WAAI7B,EAAS6B,YAAW,KAAM,GAAE,K,mGAG3G,OAAOF,EAAaxU,KAAK,KAC3B,EACF,EAhHA,GAAa,EAAA2U,iBAAAA,C,2GCfb,cAEA,UACA,UACA,UACA,UAEa,EAAAtB,aAAwE,CACnF,SAAY,EAAAjC,gBACZ,UAAa,EAAAU,iBACb,IAAO,EAAA8C,WACP,WAAc,EAAAC,kBACd,YAAe,EAAAhF,c,ozBCZjB,cAMA,cACE,WAAYpJ,G,OACV,YAAMA,IAAQ,IAChB,CAyJF,OA5JuC,OAIrC,YAAAE,aAAA,WACE,OAAO,EAAP,WACKjH,KAAKoV,cACLpV,KAAKqV,oBACLrV,KAAKsV,mBACLtV,KAAKuV,mBACLvV,KAAKwV,mBAEZ,EACA,YAAA/N,eAAA,WACE,MAAO,CAAC,CACV,EACU,YAAA2N,WAAV,sBACQK,EAAazV,KAAK+G,QAAQa,oBAAoB2B,MAAM5K,OACpD0J,EAA2C,CAAC,EAqBlD,OApBArI,KAAK+G,QAAQ4D,YAAYC,WAAWC,SAAQ,SAACxK,EAAMsD,GACjD,IAAM4F,EAAQ,EAAKxC,QAAQiE,oBAAoBrH,GAAGsE,cAClD,GAAIsB,EAAM5K,QAAU8W,EAAY,CAK9B,IAJA,IAAMtL,EAAOZ,EAAM5K,OACb+W,EAAYD,EAAatL,EACzB7B,EAAW,uBAAgBjI,GAC7BsV,EAAQ,GACH,EAAI,EAAG,EAAIxL,IAAQ,EAC1BwL,GAAS,kCACK,EAAC,6CAAqCD,EAAY,EAAC,eAAOnM,EAAM,GAAE,sBAGlF,IAAMqG,EAAO,yBACNtH,EAAQ,gCAAwBmN,EAAU,kCAA0BtL,EAAI,2BAC3EwL,EAAK,yBAGTtN,EAAOC,GAAY,IAAI,EAAAZ,eAAekI,E,CAE1C,IACOvH,CACT,EACU,YAAAgN,iBAAV,sBACQI,EAAazV,KAAK+G,QAAQa,oBAAoB2B,MAAM5K,OACpD0J,EAA2C,CAAC,EAuBlD,OAtBArI,KAAK+G,QAAQ4D,YAAYC,WAAWC,SAAQ,SAACxK,EAAMsD,GACjD,IAAM4F,EAAQ,EAAKxC,QAAQiE,oBAAoBrH,GAAG4F,MAClD,KAAMA,EAAM5K,OAAS,GAAK4K,EAAM5K,OAAS8W,GAAa,CAKpD,IAJA,IAAMtL,EAAOZ,EAAM5K,OACb+W,EAAYD,EAAatL,EACzB7B,EAAW,6BAAsBjI,GACnCsV,EAAQ,GACH,EAAI,EAAG,EAAIxL,EAAO,IAAK,EAC9BwL,GAAS,kCACK,EAAC,6CAAqCD,EAAY,EAAC,eAAOnM,EAAM,GAAE,sBAGlF,IAAMqG,EAAO,yBACNtH,EAAQ,+BAAuBmN,EAAU,kCAA0BtL,EAAI,2BAC1EwL,EAAK,mCACOxL,EAAO,EAAC,8BAAsBsL,EAAa,EAAC,qCAC5CtL,EAAO,EAAC,8BAAsBsL,EAAa,EAAC,2BAG5DpN,EAAOC,GAAY,IAAI,EAAAZ,eAAekI,E,CAE1C,IACOvH,CACT,EACU,YAAAkN,gBAAV,sBACQlN,EAA2C,CAAC,EAWlD,OAVArI,KAAK+G,QAAQ4D,YAAYC,WAAWC,SAAQ,SAACxK,EAAMsD,GACjD,IAAM4F,EAAQ,EAAKxC,QAAQiE,oBAAoBrH,GAAG4F,MAC5Ca,EAAU,EAAKrD,QAAQiE,oBAAoBrH,GAAGyG,QAC9CD,EAAOZ,EAAM5K,OACf2J,EAAW,0BAAmBjI,GAClCgI,EAAOC,GAAY,IAAI,EAAAZ,eAAeyN,EAAkBS,oBAAoBtN,EAAU6B,EAAMC,IAC5F9B,EAAW,0BAAmBjI,EAAI,MAClCgI,EAAOC,GACH,IAAI,EAAAZ,eAAeyN,EAAkBS,oBAAoBtN,EAAU6B,EAAMC,EAAQ2D,QAAQsB,WAC/F,IACOhH,CACT,EACO,EAAAuN,oBAAP,SAA2BvV,EAAc8J,EAAcC,GAErD,IADA,IAAIuL,EAAQ,GACHhS,EAAIwG,EAAO,EAAGxG,GAAK,IAAKA,EAC/BgS,GAAS,sCACahS,EAAC,eAAOyG,EAAQzG,GAAE,eAG1C,MAAO,sBACCtD,EAAI,wBAAgB8J,EAAI,kDAE1BwL,EAAK,4CAIb,EACU,YAAAL,gBAAV,sBACQjN,EAA2C,CAAC,EAWlD,OAVArI,KAAK+G,QAAQ4D,YAAYC,WAAWC,SAAQ,SAACxK,EAAMsD,GACjD,IAAM4F,EAAQ,EAAKxC,QAAQiE,oBAAoBrH,GAAG4F,MAC5Ca,EAAU,EAAKrD,QAAQiE,oBAAoBrH,GAAGyG,QAC9CD,EAAOZ,EAAM5K,OACf2J,EAAW,0BAAmBjI,GAClCgI,EAAOC,GAAY,IAAI,EAAAZ,eAAeyN,EAAkBU,sBAAsBvN,EAAU6B,EAAMC,IAC9F9B,EAAW,0BAAmBjI,EAAI,MAClCgI,EAAOC,GACH,IAAI,EAAAZ,eAAeyN,EAAkBU,sBAAsBvN,EAAU6B,EAAMC,EAAQ2D,QAAQsB,WACjG,IACOhH,CACT,EACO,EAAAwN,sBAAP,SAA6BxV,EAAc8J,EAAcC,GAEvD,IADA,IAAMuF,EAAe,GACZhM,EAAI,EAAGA,EAAIwG,EAAO,IAAKxG,EAC9BgM,EAAa5K,KAAK,0BACRpB,EAAC,wBAAgByG,EAAQzG,GAAE,MACrCgM,EAAa5K,KAAK,sCACIpB,EAAC,eAAOyG,EAAQzG,GAAE,MAI1C,OAFAgM,EAAa5K,KAAK,0BACNoF,EAAO,EAAC,gBACb,uBACE9J,EAAI,wCAAgC8J,EAAI,yBAC3CwF,EAAarP,KAAK,IAAG,oBAG7B,EACU,YAAAkV,iBAAV,sBACQnN,EAA2C,CAAC,EA0BlD,OAzBArI,KAAK+G,QAAQ4D,YAAYC,WAAWC,SAAQ,SAACxK,EAAMsD,GAKjD,IAJA,IAAM4F,EAAQ,EAAKxC,QAAQiE,oBAAoBrH,GAAG4F,MAC5CY,EAAOZ,EAAM5K,OACb2J,EAAW,2BAAoBjI,GACjCyV,EAAY,GACP,EAAI,EAAG,EAAI3L,IAAQ,EAC1B2L,GAAa,0BACL,EAAC,eAAOvM,EAAM,GAAE,KAE1B,IAAMqG,EAAO,yBACJtH,EAAQ,sCAA8B6B,EAAI,qCACnCA,EAAI,yBACd2L,EAAS,oCACG3L,EAAI,uOAUtB9B,EAAOC,GAAY,IAAI,EAAAZ,eAAekI,EACxC,IACOvH,CACT,EACF,EA5JA,CAAuC,EAAA6H,SAA1B,EAAAiF,kBAAAA,C,+KCOb,IAAMY,EAAoB,CACxBnW,QAAS,GACTE,UAAW,YACXkW,cAAe,UACfC,YAAa,UACbvL,UAAW,YACX3B,OAAQ,eACRmN,kBAAmB,IAEfC,EAAoB,CACxBvW,QAAS,kBACTE,UAAW,KACXkW,cAAe,MACfC,YAAa,KACbvL,UAAW,UACX3B,OAAQ,cACRmN,kBAAmB,yBAGrB,SAAgBrN,EAAQjJ,GACtB,OAAmB,IAAZA,EAAgBmW,EAAcI,CACvC,CAFA,YAIA,iCAAsCvW,GACpC,IAAMgJ,EAAOC,EAAQjJ,GACrB,MAAO,UAAGgJ,EAAKhJ,QAAO,iDAEhBgJ,EAAK9I,UAAS,kCACd8I,EAAK9I,UAAS,wCAEd8I,EAAKoN,cAAa,6IAO1B,EAEA,iCAAsCpW,GACpC,IAAMgJ,EAAOC,EAAQjJ,GACrB,MAAO,UAAGgJ,EAAKhJ,QAAO,uGAIlBgJ,EAAKqN,YAAW,iCAChBrN,EAAKsN,kBAAiB,qZA4B5B,EAEA,oCAAyCtW,EAAcwW,GACrD,IAAMxN,EAAOC,EAAQjJ,GACrB,MAAO,6CAESwW,EAAiB,8FAG7BxN,EAAKG,OAAM,sBAGjB,C,6yBCnGA,cAOA,cACE,WAAYhC,G,OACV,YAAMA,IAAQ,IAChB,CAmGF,OAtGgC,OAI9B,YAAAU,eAAA,WACE,MAAO,CAAC,CACV,EACA,YAAAR,aAAA,WACE,OAAO,EAAP,SAAWjH,KAAKqW,sBAAyBrW,KAAKsW,WAActW,KAAKuW,cAAiBvW,KAAKwW,aACzF,EACU,YAAAH,mBAAV,WACE,IACMlM,EADenK,KAAK+G,QAAQa,oBACR2B,MAAM5K,OAC1B8X,EAAmC,CAACvF,IAAK,KAAMwF,IAAK,KAAMC,IAAK,KAAMC,IAAK,MAC1EvO,EAA2C,CAAC,EAClD,IAAK,IAAM,KAAQoO,EAAQ,CAGzB,IAFA,IAAMI,EAAQ,UAAG,EAAI,OACjBC,EAAkB,GACbnT,EAAI,EAAGA,EAAIwG,IAAQxG,EAC1BmT,GAAmB,2BACVnT,EAAC,aAAK8S,EAAO,GAAK,gBAAQ9S,EAAC,kBAGtC,IAAMiM,EAAO,yBACJiH,EAAK,oBAAY1M,EAAI,2BAAmBA,EAAI,2BAC/C2M,EAAe,yBAGrBzO,EAAOwO,GAAS,IAAI,EAAAnP,eAAekI,E,CAGrC,OAAOvH,CACT,EACU,YAAAiO,QAAV,WAIE,IAHA,IACMnM,EADenK,KAAK+G,QAAQa,oBACR2B,MAAM5K,OAC5BmY,EAAkB,GACbnT,EAAI,EAAGA,EAAIwG,IAAQxG,EAC1BmT,GAAmB,yBACVnT,EAAC,mBAAWA,EAAC,gBAGxB,IAAMiM,EAAO,uCACYzF,EAAI,2BAAmBA,EAAI,yBAC9C2M,EAAe,qBAGrB,MAAO,CAACR,QAAS,IAAI,EAAA5O,eAAekI,GACtC,EAEU,YAAA2G,WAAV,WASE,IARA,IACMpM,EADenK,KAAK+G,QAAQa,oBACR2B,MAAM5K,OAC5BgX,EAAQ,sDAEKxL,EAAI,2EAIZxG,EAAI,EAAGA,EAAIwG,EAAO,IAAKxG,EAC9BgS,GAAS,sCACahS,EAAC,4BACbA,EAAC,4BAGbgS,GAAS,wCAEGxL,EAAO,EAAC,wBAEpB,IAAMyF,EAAO,4CACiBzF,EAAI,+CAC5BwL,EAAK,uBAGX,MAAO,CAACY,WAAY,IAAI,EAAA7O,eAAekI,GACzC,EACU,YAAA4G,WAAV,WASE,IARA,IACMrM,EADenK,KAAK+G,QAAQa,oBACR2B,MAAM5K,OAC5BgX,EAAQ,uDAEMxL,EAAI,wEAIbxG,EAAI,EAAGA,EAAIwG,EAAO,IAAKxG,EAC9BgS,GAAS,sCACahS,EAAC,mCACNA,EAAC,cAGpBgS,GAAS,+CAEUxL,EAAO,EAAC,gBAE3B,IAAMyF,EAAO,uCACYzF,EAAI,oCACvBwL,EAAK,mBAGX,MAAO,CAACa,WAAY,IAAI,EAAA9O,eAAekI,GACzC,EACF,EAtGA,CAAgC,EAAAM,SAAnB,EAAAgF,WAAAA,C,6uDCNb,cACA,UACA,UAEA,OACA,UACA,UACA,SAGA,UACA,UAeA,aAGE,WAAmBzX,GAAA,KAAAA,QAAAA,EACjBuC,KAAK+W,uBAAyB,IAAIhW,IAClCf,KAAKgX,yBAA2B,IAAIjW,GACtC,CAsRF,OAjRE,YAAAkW,+BAAA,SAA+B1N,EAA0B2N,GACvD,OAAO,IAAAD,gCAA+BjX,KAAKvC,QAAQ0Z,eAAgB5N,EAAO2N,EAC5E,EAEA,YAAAE,eAAA,SAAeC,EAAwCC,GACrD,GAAIA,EAAO3Y,OAAS0Y,EAAQzM,WAAWjM,OACrC,MAAM,IAAI6C,MAAM,0CAAmC6V,EAAQzM,WAAWjM,OAAM,MAE9E,GAAI0Y,EAAQzM,WAAWjM,SAAW0Y,EAAQE,WAAW5Y,OACnD,MAAM,IAAI6C,MAAM,+CAKlB,IADA,IAAMgW,EAAmC,GAChC7T,EAAI,EAAGA,EAAI0T,EAAQzM,WAAWjM,SAAUgF,EAC/C6T,EAAkB7T,GAAK3D,KAAKyX,uBAAuBH,EAAO3T,GAAI0T,EAAQE,WAAW5T,IAGnF,IAAMlC,EAzCN,SAACkJ,EAA4C6M,GAC3C,IAAMF,EACFE,EAAkBpX,KAAI,SAAAsX,GAAW,gBAAGA,EAAQzP,cAAc3H,KAAK,KAAI,YAAIoX,EAAQvP,MAAK,YAAIuP,EAAQtP,OAA/D,IAC5B9H,KAAK,KACVmB,EAAMkJ,EAAYtK,KAKtB,OAJIsK,EAAYgN,YACdlW,GAAO,IAAMkJ,EAAYgN,UAAY,KAEvClW,EAAO,IAAM6V,CAEf,CA+BYM,CAAwBP,EAASG,GACzCK,EAAW7X,KAAKvC,QAAQqa,eAAeC,YAAYtW,GACjDkJ,EAAckN,EAChBA,EAASlN,YACsC,mBAAtC0M,EAA8BvV,IAAsBuV,EAA8BvV,MAC9BuV,EAG3DzP,GAAsB,IAAAoQ,oCACxBhY,KAAKvC,QAAQ0Z,eAAgBxM,EAAY5B,OAAOkP,KAAMtN,EAAY5B,OAAOmO,aACvEgB,EAAoBlY,KAAKmY,kBAAkBvQ,EAAqB+C,EAAY5B,OAAOrH,MAQzF,OANKmW,IACHA,EAAW7X,KAAKvC,QAAQqa,eAAeM,MAAMzN,EAAa6M,EAAmBU,GAC7ElY,KAAKvC,QAAQqa,eAAeO,YAAY5W,EAAKoW,IAG/C7X,KAAKsY,WAAWT,EAAUL,EAAmBU,GACtCA,CACT,EAEA,YAAAK,IAAA,SAAIlB,EAA4BC,GAE9B,OAD0BtX,KAAKoX,eAAeC,EAASC,GAC9BkB,MAC3B,EAEQ,YAAAF,WAAR,SAAmBT,EAAoBP,EAAuBvO,GAE5D,IAAK,IAAIpF,EAAI,EAAGA,EAAI2T,EAAO3Y,SAAUgF,EACnC,KAAM2T,EAAO3T,GAAGkE,WAAcgQ,EAASlN,YAAY4M,WAAW5T,KAAO,EAAA8U,YAAYC,QAC/E,MAAM,IAAIlX,MAAM,gBAASmC,EAAC,mCAK9B,KAAMoF,EAAOlB,WAAcgQ,EAASlN,YAAY5B,OAAOmO,cAAgB,EAAAuB,YAAYC,QACjF,MAAM,IAAIlX,MAAM,uCAGlBxB,KAAKvC,QAAQqa,eAAeS,IAAIV,EAAUP,EAAQvO,EACpD,EAaQ,YAAA0O,uBAAR,SAA+Be,EAAgBtB,GAC7C,IAAIyB,EAAK3Y,KAAK4Y,eAAeJ,EAAOK,OAAQ3B,IAAgB,EAAAuB,YAAYC,QAExE,IAAKC,IAEHA,EAAK3Y,KAAK4Y,eAAeJ,EAAOK,OAAQ3B,IAAgB,EAAAuB,YAAYC,SAElE,OAAIxB,IAAgB,EAAAuB,YAAYC,OACvB1Y,KAAKqG,KAAKsS,GAEV3Y,KAAK8Y,OAAOH,GAKzB,IAAKA,EAAI,CACP,IAAM9I,GAAS,IAAAmI,oCAAmChY,KAAKvC,QAAQ0Z,eAAgBqB,EAAOP,KAAMf,GAE5F,GAAIA,IAAgB,EAAAuB,YAAYM,oBAAqB,CACnD,IAEMxP,EAAQiP,EAAOP,KACrB,GAAqB,IAAjB1O,EAAM5K,OAAc,CAQtB,IAAMqa,EAAsB,CAACzP,EAAM,GAAI1K,KAAKE,KAAMwK,EAAM,GAAKA,EAAM,GAAKA,EAAM,GAV/D,IAWT0P,GACF,IAAAjB,oCAAmChY,KAAKvC,QAAQ0Z,eAAgB6B,EAAqB9B,GACrFgC,EAASV,EAAOW,WACpB,GAAI5P,EAAM,GAAKA,EAAM,GAAKA,EAAM,GAdjB,GAcmC,EAAG,CACnD,IAAM6P,EAAiB7P,EAAM,GACvB8P,EAAa9P,EAAM,GAAKA,EAAM,GAAKA,EAAM,GACzC+P,EAjBO,EAiBMza,KAAKE,KAlBd,EAkBmBsa,EAjBhB,GAmBbH,EAAS,IAAIK,aADGH,EAAiBE,GAEjC,IAAK,IAAIlV,EAAI,EAAGA,EAAIgV,IAAkBhV,EAAG,CACvC,IAAMoV,EAAYpV,EAAIiV,EAChBI,EAAYrV,EAAIkV,EAAalV,EAvB3B,EAuBuCiV,EAC/CH,EAAO/X,IAAIqX,EAAOW,WAAWO,SAASF,EAAWA,EAAYH,GAAaI,E,EAG9E,OAAOzZ,KAAKmY,kBAAkBc,EAAgBT,EAAO9W,KAAMwX,EAAQV,EAAQ,E,EAI/E,GAAItB,IAAgB,EAAAuB,YAAYC,OAAQ,CACtC,IAAMiB,GACF,IAAAC,8BAA6B5Z,KAAKvC,QAAQ0Z,eAAgBqB,EAAOP,KAAM,EAAG,GAAI,CAAC4B,WAAW,IACxFC,EAAsB9Z,KAAKmY,kBAC7BwB,EAAuBnB,EAAO9W,KAAM8W,EAAOW,WAAYX,EAAQ,GACnEG,EAAK3Y,KAAKqG,KAAKyT,E,MAEfnB,EAAK3Y,KAAKmY,kBAAkBtI,EAAQ2I,EAAO9W,KAAM8W,EAAOW,WAAYX,EAAQ,E,CAGhF,OAAOG,CACT,EAWA,YAAAoB,sCAAA,SACIlK,EAAuBmK,EAA2BC,EAAyBzB,GAC7E,OAAOxY,KAAKmY,kBAAkBtI,EAAQmK,EAAUC,EAAMzB,EAAQ,EAChE,EAEQ,YAAAL,kBAAR,SACItI,EAAuBmK,EAA2BC,EAA0BzB,EAC5E0B,GACF,EAAAzT,OAAOG,QAAQ,mBAAoB,wCAAiCuH,KAAKE,UAAUwB,GAAO,MAC1F,IAAM6H,EAAU1X,KAAKvC,QAAQ0c,eAAeC,wBAAwBJ,EAAUnK,EAAQoK,EAAMC,GAC5F,OAAOla,KAAKqa,6BAA6BxK,EAAQmK,EAAUtC,EAASc,EACtE,EAEA,YAAA8B,gBAAA,SAAgBC,EAAeC,GAC7B,IAAMC,EAAUza,KAAKyX,uBAAuB8C,EAAO,EAAA9B,YAAYiC,UACzDC,EAAkC,CACtCC,SAAUH,EAAQG,SAClBxS,OAAQqS,EAAQrS,OAChBD,MAAOsS,EAAQtS,MAEfoB,MAA+B,IAAxBiR,EAAa7b,OAAe6b,EAAe,CAAC,GACnDpQ,QAAS,EAAAoC,UAAUqO,eAAeL,GAClCvS,cAAeuS,GAGjB,OADuBxa,KAAKqa,6BAA6BM,EAAkBJ,EAAM7Y,KAAM+Y,EAAQ/C,SACzEc,MACxB,EAEA,YAAAsC,cAAA,SAAcP,EAAeC,GAC3B,IAAMC,EAAUza,KAAKyX,uBAAuB8C,EAAO,EAAA9B,YAAYC,QAG/D,IAAI,IAAAqC,gBAAeR,EAAMtC,KAAMuC,GAAe,CAC5C,IAAMG,EAAkC,CACtCC,SAAUH,EAAQG,SAClBxS,OAAQqS,EAAQrS,OAChBD,MAAOsS,EAAQtS,MAEfoB,MAA+B,IAAxBiR,EAAa7b,OAAe6b,EAAe,CAAC,GACnDpQ,QAAS,EAAAoC,UAAUqO,eAAeL,GAClCvS,cAAeuS,EACf3S,UAAU,GAGZ,OADuB7H,KAAKqa,6BAA6BM,EAAkBJ,EAAM7Y,KAAM+Y,EAAQ/C,SACzEc,M,CAGxB,IAAMwC,GAAqB,IAAAC,eAAcV,EAAMtC,MACzCiD,GAAsB,IAAAD,eAAcT,GAEpCW,EAAsBnb,KAAK8a,cAAcP,EAAOS,GAChDI,EAAuBpb,KAAKuY,KAC9B,IAAA8C,wCAAuCrb,KAAMmb,EAAqBD,GAAsB,CAACC,IAE7F,OADqBnb,KAAK8a,cAAcM,EAAsBZ,EAEhE,EAEA,YAAAc,KAAA,SAAKf,EAAe7Y,GAClB,IAAM+Y,EAAUza,KAAKyX,uBAAuB8C,EAAO,EAAA9B,YAAYiC,UAE/D,OADuB1a,KAAKqa,6BAA6BI,EAA0B/Y,EAAM+Y,EAAQ/C,SAC3Ec,MACxB,EAEQ,YAAA6B,6BAAR,SACIxK,EAAuBmK,EAA2BtC,EAAuBc,EAAiB+C,GAD9F,WAEQC,EAAW,OACZ3L,GAAM,CACT2I,OAAQA,GACJ,IAAI,EAAA3U,OACIgM,EAAO5H,cAAe+R,GAAU,SAACyB,GAAmB,SAAKC,YAAYF,EAAjB,IACpD,SAAOC,GAAc,gEAAK,SAAAzb,KAAK2b,iBAAiBH,G,cAAcjZ,EAAWgZ,GACrF7D,QAAO,IAGT,OADA1X,KAAK4b,eAAeJ,EAAYhD,OAAOK,OAAQ2C,EAAa3L,EAAOhI,UAC5D2T,CACT,EAEQ,YAAA5C,eAAR,SAAuB2C,EAAqB1T,GAC1C,YAD0C,IAAAA,IAAAA,GAAA,GACnC7H,KAAKvC,QAAQoe,cAAcN,GAAYvb,KAAKvC,QAAQmb,eAAe2C,EAAU1T,GAChFA,EAA0C7H,KAAK+W,uBAAuBjV,IAAIyZ,GAChCvb,KAAKgX,yBAAyBlV,IAAIyZ,EAClF,EACA,YAAAK,eAAA,SAAeL,EAAqB5C,EAAiB9Q,QAAA,IAAAA,IAAAA,GAAA,GAC/C7H,KAAKvC,QAAQoe,cAAcN,GAC7Bvb,KAAKvC,QAAQme,eAAeL,EAAU5C,EAAI9Q,IAEzCA,EAAW7H,KAAK+W,uBAAyB/W,KAAKgX,0BAA0B7V,IAAIoa,EAAU5C,EAE3F,EACA,YAAAmD,sBAAA,SAAsBtD,EAAgB3Q,GACpC,YADoC,IAAAA,IAAAA,GAAA,KAC3B7H,KAAK4Y,eAAeJ,EAAOK,OAAQhR,EAC9C,EAEA,YAAAlC,QAAA,sBACE3F,KAAKvC,QAAQ0c,eAAe4B,sBAC5B/b,KAAK+W,uBAAuBlM,SAAQ,SAAA8N,GAAM,SAAKlb,QAAQ0c,eAAe6B,eAAerD,EAA3C,IAC1C3Y,KAAK+W,uBAAyB,IAAIhW,IAClCf,KAAKgX,yBAAyBnM,SAAQ,SAAA8N,GAAM,SAAKlb,QAAQ0c,eAAe6B,eAAerD,EAA3C,IAC5C3Y,KAAKgX,yBAA2B,IAAIjW,GACtC,EAEA,YAAA2a,YAAA,SAAYF,GACV,OAAIA,EAAY3T,SACP7H,KAAK0b,YAAY1b,KAAK8Y,OAAO0C,IAEjCxb,KAAKvC,QAAQ6H,QAAQiB,UAAU0V,2BAG7Bjc,KAAKvC,QAAQ0c,eAAeuB,YAAYF,EAAaA,EAAYhD,OAAO9W,KAAM8Z,EAAYZ,UAFxF5a,KAAKvC,QAAQ0c,eAAe+B,yBAAwB,IAAAC,eAAcnc,KAAMwb,GAGnF,EAEM,YAAAG,iBAAN,SAAuBH,G,mEACrB,OAAIA,EAAY3T,SACP,CAAP,EAAO7H,KAAK2b,iBAAiB3b,KAAK8Y,OAAO0C,KAEtCxb,KAAKvC,QAAQ6H,QAAQiB,UAAU0V,2BAG7B,CAAP,EAAOjc,KAAKvC,QAAQ0c,eAAewB,iBAAiBH,EAAaA,EAAYhD,OAAO9W,KAAM8Z,EAAYZ,WAF7F,CAAP,EAAO5a,KAAKvC,QAAQ0c,eAAe+B,yBAAwB,IAAAC,eAAcnc,KAAMwb,I,QAKnF,YAAAnV,KAAA,SAAKkU,GAEH,OAD0Bva,KAAKoX,gBAAe,IAAAgF,6BAA4Bpc,KAAMua,EAAM/B,QAAS,CAAC+B,EAAM/B,QAExG,EAEA,YAAAM,OAAA,SAAOyB,GAEL,OAD0Bva,KAAKoX,gBAAe,IAAAiF,+BAA8Brc,KAAMua,EAAM/B,QAAS,CAAC+B,EAAM/B,QAE1G,EACF,EA5RA,GAAa,EAAA8D,sBAAAA,C,6vBCzBb,cACA,aACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,SACA,UACA,SACA,SACA,UACA,UACA,UACA,UACA,aACA,UACA,UAEa,EAAAC,uBAAuD,CAClE,CAAC,MAAO,GAAI,KAAMC,EAASC,KAC3B,CAAC,OAAQ,GAAI,KAAMD,EAASE,MAC5B,CAAC,MAAO,GAAI,KAAMC,EAAUzL,KAC5B,CAAC,MAAO,GAAI,KAAMyL,EAAUC,KAC5B,CAAC,OAAQ,GAAI,KAAMJ,EAASK,MAC5B,CAAC,OAAQ,GAAI,KAAML,EAASM,MAE5B,CAAC,cAAe,GAAI,KAAM,EAAAC,YAAa,EAAAC,4BACvC,CAAC,qBAAsB,GAAI,KAAM,EAAAC,mBAAoB,EAAAC,mCACrD,CAAC,OAAQ,GAAI,KAAM,EAAA5B,KAAM,EAAA6B,qBACzB,CAAC,OAAQ,GAAI,KAAMX,EAASzd,MAC5B,CAAC,OAAQ,GAAI,OAAQyd,EAASY,KAAMZ,EAASa,qBAC7C,CAAC,OAAQ,GAAI,MAAOb,EAASc,SAC7B,CAAC,SAAU,GAAI,KAAM,EAAAC,OAAQ,EAAAC,uBAC7B,CAAC,OAAQ,GAAI,KAAM,EAAAC,KAAM,EAAAC,qBACzB,CAAC,gBAAiB,GAAI,KAAM,EAAAC,cAAe,EAAAC,8BAC3C,CAAC,MAAO,GAAI,KAAMpB,EAASqB,KAC3B,CAAC,MAAO,GAAI,KAAMlB,EAAU/F,KAC5B,CAAC,UAAW,GAAI,KAAM4F,EAASsB,UAC/B,CAAC,eAAgB,GAAI,KAAM,EAAAC,aAAc,EAAAC,6BACzC,CAAC,QAAS,GAAI,KAAMrB,EAAUsB,OAC9B,CAAC,MAAO,GAAI,KAAMzB,EAAS0B,IAAK1B,EAAS2B,oBACzC,CAAC,MAAO,GAAI,KAAM3B,EAAS4B,KAC3B,CAAC,UAAW,GAAI,KAAM,EAAAC,QAAS,EAAAC,wBAC/B,CAAC,QAAS,GAAI,KAAM9B,EAAS+B,OAC7B,CAAC,YAAa,gBAAiB,KAAM,EAAAd,KAAM,EAAAC,qBAC3C,CAAC,SAAU,GAAI,KAAM,EAAAc,OAAQ,EAAAC,uBAC7B,CAAC,OAAQ,GAAI,OAAQ,EAAAC,KAAM,EAAAC,uBAC3B,CAAC,OAAQ,GAAI,MAAO,EAAAD,KAAM,EAAAE,wBAC1B,CAAC,oBAAqB,GAAI,KAAM,EAAAC,kBAAmB,EAAAC,kCACnD,CAAC,gBAAiB,GAAI,KAAM,EAAAC,eAC5B,CAAC,UAAW,GAAI,KAAMpC,EAAUqC,SAChC,CAAC,WAAY,GAAI,KAAMxC,EAASsB,UAChC,CAAC,cAAe,GAAI,KAAM,EAAAmB,YAAa,EAAAC,4BACvC,CAAC,wBAAyB,GAAI,KAAM,EAAAC,sBAAuB,EAAAC,sCAC3D,CAAC,YAAa,GAAI,KAAM5C,EAAS6C,UAAW7C,EAAS8C,0BACrD,CAAC,OAAQ,GAAI,KAAM3C,EAAU4C,MAC7B,CAAC,MAAO,GAAI,KAAM,EAAAC,IAAK,EAAAC,oBACvB,CAAC,MAAO,GAAI,KAAMjD,EAASkD,KAC3B,CAAC,SAAU,GAAI,KAAM,EAAAC,OAAQ,EAAAC,uBAE7B,CAAC,UAAW,GAAI,KAAM,EAAAC,QAAS,EAAAC,wBAC/B,CAAC,MAAO,GAAI,KAAMnD,EAAUhG,KAC5B,CAAC,MAAO,GAAI,KAAM6F,EAASuD,KAC3B,CAAC,MAAO,GAAI,KAAMvD,EAASwD,KAC3B,CAAC,KAAM,GAAI,KAAMrD,EAAUsD,IAC3B,CAAC,MAAO,GAAI,OAAQ,EAAAC,MAAO,EAAAC,sBAC3B,CAAC,MAAO,GAAI,MAAO,EAAAC,OAAQ,EAAAC,uBAC3B,CAAC,MAAO,GAAI,KAAM1D,EAAU2D,KAC5B,CAAC,QAAS,GAAI,KAAM3D,EAAU4D,OAC9B,CAAC,eAAgB,GAAI,KAAM,EAAAC,aAAc,EAAAC,uBACzC,CAAC,YAAa,GAAI,KAAM,EAAAC,UAAW,EAAAD,uBACnC,CAAC,aAAc,GAAI,KAAM,EAAAE,WAAY,EAAAF,uBACrC,CAAC,YAAa,GAAI,KAAM,EAAAG,UAAW,EAAAH,uBACnC,CAAC,aAAc,GAAI,KAAM,EAAAI,WAAY,EAAAJ,uBACrC,CAAC,YAAa,GAAI,OAAQ,EAAAK,UAAW,EAAAL,uBACrC,CAAC,kBAAmB,GAAI,KAAM,EAAAM,mBAAoB,EAAAN,uBAClD,CAAC,OAAQ,GAAI,KAAMjE,EAASwE,MAC5B,CAAC,UAAW,GAAI,KAAM,EAAAC,SACtB,CAAC,SAAU,GAAI,KAAM,EAAAC,OAAQ,EAAAC,0BAC7B,CAAC,SAAU,GAAI,MAAO,EAAAD,OAAQ,EAAAE,0BAC9B,CAAC,QAAS,GAAI,KAAM,EAAA7X,OACpB,CAAC,UAAW,GAAI,KAAMiT,EAAS6E,SAC/B,CAAC,MAAO,GAAI,KAAM7E,EAAS8E,KAC3B,CAAC,QAAS,GAAI,MAAO,EAAAC,UACrB,CAAC,QAAS,GAAI,MAAO,EAAAxT,MAAO,EAAAyT,sBAE5B,CAAC,UAAW,GAAI,OAAQ,EAAAC,QAAS,EAAAC,wBACjC,CAAC,UAAW,GAAI,MAAO,EAAAC,WAAY,EAAAC,2BAKnC,CAAC,QAAS,GAAI,OAAQ,EAAAlP,MAAO,EAAAmP,sBAC7B,CAAC,OAAQ,GAAI,KAAMrF,EAASsF,MAC5B,CAAC,UAAW,GAAI,OAAQ,EAAAC,QAAS,EAAAC,wBACjC,CAAC,UAAW,GAAI,MAAO,EAAAC,YACvB,CAAC,MAAO,GAAI,KAAMtF,EAAUjG,KAC5B,CAAC,MAAO,GAAI,KAAM,EAAAwL,KAClB,CAAC,MAAO,GAAI,KAAM1F,EAAS2F,KAC3B,CAAC,OAAQ,GAAI,KAAM3F,EAAS4F,MAC5B,CAAC,OAAQ,GAAI,KAAM,EAAAC,MACnB,CAAC,YAAa,GAAI,KAAM,EAAArS,UAAW,EAAAsS,0BACnC,CAAC,WAAY,GAAI,MAAO,EAAAC,SAAU,EAAAC,2BAClC,CAAC,WAAY,GAAI,IAAK,EAAAD,SAAU,EAAAE,2BAChC,CAAC,YAAa,GAAI,OAAQ,EAAAC,UAAW,EAAAC,0BACrC,CAAC,YAAa,GAAI,MAAO,EAAAC,cACzB,CAAC,MAAO,GAAI,KAAMjG,EAAUkG,K,2qBCzH9B,cAIA,UAEA,UAQMC,EAAoC,CACxCziB,KAAM,qBACNuK,WAAY,CAAC,IAAK,QAAS,IAAK,OAAQ,YACxC2M,WACI,CAAC,EAAAkB,YAAYiC,SAAU,EAAAjC,YAAYiC,SAAU,EAAAjC,YAAYiC,SAAU,EAAAjC,YAAYiC,SAAU,EAAAjC,YAAYiC,WAG9F,EAAAuC,mBACT,SAAC8F,EAAyCzL,EAAkBzW,GAS1D,OARAmiB,EAAe1L,GAQR,CAPQyL,EAAiBxK,IAAI,EAAD,KAE1BuK,GAAiC,CACpCnL,UAAW9W,EAAWoiB,SACtBnhB,IAAK,WAAM,OAAAohB,EAAoCH,EAAkBzL,EAAQzW,EAA9D,IAEbyW,GAEN,EAES,EAAA4F,kCACT,SAAC3M,GACC,IAAM4S,EAAU5S,EAAK1P,WAAWe,SAAS,UAAW,MAC9CwhB,EAAW7S,EAAK1P,WAAWe,SAAS,WAAY,IAChDyhB,EAAU9S,EAAK1P,WAAWkB,OAAO,UAAW,GAClD,OAAO,IAAAxB,6BAA4B,CAAC4iB,QAAO,EAAEC,SAAQ,EAAEC,QAAO,GAChE,EAEJ,IAAMH,EACF,SAACH,EAAyCzL,EAAkBzW,GAEtD,IAAM+H,GAAO,IAAAC,SAAQka,EAAiBtlB,QAAQ6H,QAAQiB,UAAU3G,SAC1DuK,EAAOmN,EAAO,GAAGW,KAAKtZ,OACtB,IACFokB,EAAiB9L,+BAA+BK,EAAO,GAAGW,KAAM,EAAAQ,YAAYiC,UAAS,GADlF4I,EAAU,KAAEC,EAAW,KAExBtP,EAAe,gCACT9J,EAAI,wEACuBmZ,EAAU,aAAKC,EAAW,iDACvC3a,EAAK8B,UAAS,iEACf9B,EAAK8B,UAAS,oEACV9B,EAAK8B,UAAS,iEACrB9B,EAAK8B,UAAS,gGAEsB7J,EAAWsiB,QAAO,kBAE5E,OAAO,EAAP,KACKL,GAAiC,CACpC/Z,OAAQ,CAACkP,KAAMX,EAAO,GAAGW,KAAMvW,KAAM4V,EAAO,GAAG5V,KAAMwV,YAAa,EAAAuB,YAAYiC,UAC9EzG,aAAY,GAEhB,EAEF+O,EAAiB,SAAC1L,GACtB,IAAKA,GAA4B,IAAlBA,EAAO3Y,OACpB,MAAM,IAAI6C,MAAM,yCAGlB,IAAMgiB,EAAIlM,EAAO,GACXmM,EAAQnM,EAAO,GACfoM,EAAIpM,EAAO,GACXqM,EAAOrM,EAAO,GACdsM,EAAOtM,EAAO,GAIpB,GAAIkM,EAAEvL,KAAKtZ,OAAS,GAA2B,IAAtB8kB,EAAMxL,KAAKtZ,QAAkC,IAAlB+kB,EAAEzL,KAAKtZ,QAAqC,IAArBglB,EAAK1L,KAAKtZ,QAC5D,IAArBilB,EAAK3L,KAAKtZ,OACZ,MAAM,IAAI6C,MAAM,wBAElB,GAAIiiB,EAAMxL,KAAK,KAAOuL,EAAEvL,KAAK,IAAMyL,EAAEzL,KAAK,KAAOuL,EAAEvL,KAAK,IAAM0L,EAAK1L,KAAK,KAAOuL,EAAEvL,KAAK,IAClF2L,EAAK3L,KAAK,KAAOuL,EAAEvL,KAAK,GAC1B,MAAM,IAAIzW,MAAM,wBAElB,GAAgB,YAAXgiB,EAAE9hB,MAAiC,YAAX8hB,EAAE9hB,MAAuC,YAAf+hB,EAAM/hB,MAAqC,YAAf+hB,EAAM/hB,MACzE,YAAXgiB,EAAEhiB,MAAiC,YAAXgiB,EAAEhiB,MAAsC,YAAdiiB,EAAKjiB,MAAoC,YAAdiiB,EAAKjiB,MACpE,YAAdkiB,EAAKliB,MAAoC,YAAdkiB,EAAKliB,KACnC,MAAM,IAAIF,MAAM,8BAEpB,C,4SC3FA,cACA,UACA,UAEA,UAEA,SAAgBqiB,IACd,IAAMxjB,EAAO,OASb,MAAO,CAACuP,KARK,oBACLvP,EAAI,gEAGLA,EAAI,sDAIGA,KAAI,EAAEqB,KAAM,EAAA0O,aAAa0T,WACzC,CACA,SAAgBC,IACd,IAAM1jB,EAAO,OASb,MAAO,CAACuP,KARK,oBACLvP,EAAI,gEAGLA,EAAI,sDAIGA,KAAI,EAAEqB,KAAM,EAAA0O,aAAa0T,WACzC,CACA,SAAgBE,IACd,IAAM3jB,EAAO,OASb,MAAO,CAACuP,KARK,oBACLvP,EAAI,gEAGLA,EAAI,sDAIGA,KAAI,EAAEqB,KAAM,EAAA0O,aAAa0T,WACzC,CACA,SAAgBG,IACd,IAAM5jB,EAAO,OASb,MAAO,CAACuP,KARK,oBACLvP,EAAI,gEAGLA,EAAI,sDAIGA,KAAI,EAAEqB,KAAM,EAAA0O,aAAa0T,WACzC,CACA,SAAgBI,IACd,IAAM7jB,EAAO,SASb,MAAO,CAACuP,KARK,oBACLvP,EAAI,wEAGLA,EAAI,kEAIGA,KAAI,EAAEqB,KAAM,EAAA0O,aAAa0T,WACzC,CACA,SAAgBK,IACd,IAAM9jB,EAAO,WAYb,MAAO,CAACuP,KAXK,oBACLvP,EAAI,uEAGLA,EAAI,+HAOGA,KAAI,EAAEqB,KAAM,EAAA0O,aAAa0T,WACzC,CACA,SAAgBM,IACd,IAAM/jB,EAAO,QAYb,MAAO,CAACuP,KAXK,oBACLvP,EAAI,uEAGLA,EAAI,6JAOGA,KAAI,EAAEqB,KAAM,EAAA0O,aAAa0T,WACzC,CACA,SAAgBO,IACd,IAAMhkB,EAAO,OAcb,MAAO,CAACuP,KAbK,oBACLvP,EAAI,sFAGLA,EAAI,uNASGA,KAAI,EAAEqB,KAAM,EAAA0O,aAAa0T,WACzC,CACA,SAAgBQ,IACd,IAAMjkB,EAAO,MAcb,MAAO,CAACuP,KAbK,oBACLvP,EAAI,sFAGLA,EAAI,uNASGA,KAAI,EAAEqB,KAAM,EAAA0O,aAAa0T,WACzC,CACA,SAAgBS,IACd,IAAMlkB,EAAO,OAcb,MAAO,CAACuP,KAbK,oBACLvP,EAAI,sFAGLA,EAAI,uNASGA,KAAI,EAAEqB,KAAM,EAAA0O,aAAa0T,WACzC,CACA,SAAgBU,IACd,OAoBF,SAA2B3N,GACzB,IAAMxW,EAAO,UAAGwW,EAAK,KASrB,MAAO,CAACjH,KARK,oBACLvP,EAAI,4CACDwW,EAAK,gCAETxW,EAAI,4CACAwW,EAAK,sBAGFxW,KAAI,EAAEqB,KAAM,EAAA0O,aAAa0T,WACzC,CA/BSW,CAAkB,MAC3B,CACA,SAAgBC,IACd,IAAMrkB,EAAO,SAcb,MAAO,CAACuP,KAbK,oBACLvP,EAAI,6EAGLA,EAAI,wNASGA,KAAI,EAAEqB,KAAM,EAAA0O,aAAa0T,WACzC,CAhKA,YAYA,YAYA,YAYA,YAYA,cAYA,gBAeA,aAeA,YAiBA,WAiBA,YAiBA,YAGA,cA+BA,IAAMa,EACF,SAAC1lB,EAAgCqY,EAAkBsN,EAClDC,EAAoD5B,QAApD,IAAA4B,IAAAA,EAAoCvN,EAAO,GAAG5V,MAC7C,IAAMwV,EAAcjY,EAAQxB,QAAQ4I,KAAO,EAAAoS,YAAYC,OAAS,EAAAD,YAAYiC,SAC5E,MAAO,CACLra,KAAMukB,EAASvkB,KACfuK,WAAY,CAAC,IAAK,KAClB2M,WAAY,CAACL,EAAaA,GAC1BS,UAAWsL,EACXnhB,IAAK,WAAM,OAAAgjB,EAAwB7lB,EAASqY,EAAQsN,EAAUC,EAAnD,EAEf,EAEEC,EACF,SAAC7lB,EAAgCqY,EAAkBsN,EAClDC,QAAA,IAAAA,IAAAA,EAAoCvN,EAAO,GAAG5V,MAC7C,IAAMwV,EAAcjY,EAAQxB,QAAQ4I,KAAO,EAAAoS,YAAYC,OAAS,EAAAD,YAAYiC,SACtEqK,GAAe,EAAAvY,UAAUwY,SAAS1N,EAAO,GAAGW,KAAMX,EAAO,GAAGW,MAC9DgN,EAAc3N,EAAO,GAAGW,KAEtBiN,EAAmBjmB,EAAQxB,QAAQ4I,KAEzC,GAAI0e,EAAa,CACf,IAAMI,EAAkB,EAAApZ,cAAcqZ,UAAU9N,EAAO,GAAGW,KAAMX,EAAO,GAAGW,MAAM,GAChF,IAAKkN,EACH,MAAM,IAAI3jB,MAAM,gDAGlB,IAAMiU,GADNwP,EAAcE,GACiBxmB,OACzB0mB,EAAkC,IAA1B/N,EAAO,GAAGW,KAAKtZ,OAAe2Y,EAAO,GAAGW,KAAKtZ,OAAS,EAC9D2mB,EAAkC,IAA1BhO,EAAO,GAAGW,KAAKtZ,OAAe2Y,EAAO,GAAGW,KAAKtZ,OAAS,EAC9D4mB,EAAmC,IAA1BjO,EAAO,GAAGW,KAAKtZ,OAAe,qCAAuC,mBAC9E6mB,EAAmC,IAA1BlO,EAAO,GAAGW,KAAKtZ,OAAe,qCAAuC,mBAE9E,GAAO,IAAAkK,SAAQ5J,EAAQxB,QAAQ6H,QAAQiB,UAAU3G,SACjD,EAAeslB,EAAmB,kBACxCN,EAAShV,KAAI,kIAIGgV,EAASvkB,KAAI,4BAC3B,EAAK0I,OAAM,uBAE2B,kBACxC6b,EAAShV,KAAI,6CACa6F,EAAU,sCACrB4P,EAAK,oCACLC,EAAK,uBAClBC,EAAM,qBACNC,EAAM,4BACCZ,EAASvkB,KAAI,0CAGtB,MAAO,CACLA,KAAMukB,EAASvkB,KACfuK,WAAY,CAAC,IAAK,KAClB2M,WAAY,CAACL,EAAaA,GAC1BnO,OAAQ,CAACkP,KAAMgN,EAAavjB,KAAMmjB,EAAkB3N,YAAW,GAC/DjD,aAAY,EACZC,QAASgR,E,CAGb,IAAMtc,GAAO,IAAAC,SAAQ5J,EAAQxB,QAAQ6H,QAAQiB,UAAU3G,SACjDqU,EAAe,gBACrB2Q,EAAShV,KAAI,gDAEDhH,EAAK8B,UAAS,4CACd9B,EAAK8B,UAAS,gDACVka,EAASvkB,KAAI,4BAC3BuI,EAAKG,OAAM,2BAIb,MAAO,CACL1I,KAAMukB,EAASvkB,KACfuK,WAAY,CAAC,IAAK,KAClB2M,WAAY,CAACL,EAAaA,GAC1BnO,OAAQ,CAACkP,KAAMX,EAAO,GAAGW,KAAMvW,KAAMmjB,EAAkB3N,YAAW,GAClEjD,aAAY,EACZC,SAAS,EAEb,EAES,EAAAhD,IAAM,SAACjS,EAAgCqY,GACpC,OAACrY,EAAQsZ,IAAIoM,EAA8B1lB,EAASqY,EAAQuM,KAAYvM,GAAxE,EAEH,EAAAsF,IAAM,SAAC3d,EAAgCqY,GACpC,OAACrY,EAAQsZ,IAAIoM,EAA8B1lB,EAASqY,EAAQ+M,IAAW,QAAS/M,GAAhF,EAEH,EAAAV,IAAM,SAAC3X,EAAgCqY,GACpC,OAACrY,EAAQsZ,IAAIoM,EAA8B1lB,EAASqY,EAAQyM,KAAYzM,GAAxE,EAEH,EAAA2G,MAAQ,SAAChf,EAAgCqY,GACtC,OAACrY,EAAQsZ,IAAIoM,EAA8B1lB,EAASqY,EAAQ4M,IAAa,QAAS5M,GAAlF,EAEH,EAAA0H,QAAU,SAAC/f,EAAgCqY,GACxC,OAACrY,EAAQsZ,IAAIoM,EAA8B1lB,EAASqY,EAAQ6M,IAAe,QAAS7M,GAApF,EAEH,EAAAiI,KAAO,SAACtgB,EAAgCqY,GACrC,OAACrY,EAAQsZ,IAAIoM,EAA8B1lB,EAASqY,EAAQ8M,IAAY,QAAS9M,GAAjF,EAEH,EAAAX,IAAM,SAAC1X,EAAgCqY,GACpC,OAACrY,EAAQsZ,IAAIoM,EAA8B1lB,EAASqY,EAAQ0M,KAAY1M,GAAxE,EAEH,EAAA2I,GAAK,SAAChhB,EAAgCqY,GACnC,OAACrY,EAAQsZ,IAAIoM,EAA8B1lB,EAASqY,EAAQgN,IAAU,QAAShN,GAA/E,EAEH,EAAAgJ,IAAM,SAACrhB,EAAgCqY,GACpC,OAACrY,EAAQsZ,IAAIoM,EAA8B1lB,EAASqY,EAAQkN,KAAYlN,GAAxE,EAEH,EAAAiJ,MAAQ,SAACthB,EAAgCqY,GACtC,OAACrY,EAAQsZ,IAAIoM,EAA8B1lB,EAASqY,EAAQoN,KAAcpN,GAA1E,EAEH,EAAAZ,IAAM,SAACzX,EAAgCqY,GACpC,OAACrY,EAAQsZ,IAAIoM,EAA8B1lB,EAASqY,EAAQ2M,KAAY3M,GAAxE,EAEH,EAAAuL,IAAM,SAAC5jB,EAAgCqY,GACpC,OAACrY,EAAQsZ,IAAIoM,EAA8B1lB,EAASqY,EAAQiN,IAAW,QAASjN,GAAhF,C,yHCxShB,cAGa,EAAAgE,KACT,SAACrc,EAAgCqY,EAAkBmO,GAEjD,OADAzC,EAAe1L,GACR,CAACrY,EAAQqc,KAAKhE,EAAO,GAAImO,GAClC,EAES,EAAAtI,oBAA+D,SAAC5M,GACzE,SAAAmV,UAAUC,wBAAwBpV,EAAK1P,WAAWkB,OAAO,MAAzD,EAEJ,IAAMihB,EAAiB,SAAC1L,GACtB,IAAKA,GAA4B,IAAlBA,EAAO3Y,OACpB,MAAM,IAAI6C,MAAM,0BAGlB,GAAuB,WAAnB8V,EAAO,GAAG5V,KACZ,MAAM,IAAIF,MAAM,sBAEpB,C,2WCtBA,cAEA,UACA,SAGA,UAoHa,EAAAokB,oCACT,SAAC3mB,EAAgCqY,EAAkBzW,GACjD,IApHqCglB,EAAoBlO,EAoHnDmO,GApH+BD,EAoHcvO,EAAO3Y,OApHDgZ,EAoHS9W,EAAWoiB,SApHE,CACnF5iB,KAAM,kBACNuK,WAAYlH,MAAMqiB,KAAK,CAACpnB,OAAQknB,IAAa,SAAC/S,EAAGnP,GAAM,iBAAIA,EAAJ,IACvD4T,WAAY7T,MAAMmiB,GAAYG,KAAK,EAAAvN,YAAYC,QAC/Cf,UAAS,IAiHL,OAAO,EAAP,KAAWmO,GAAQ,CAAEhkB,IAAK,WAAM,OA7GlC,SAAC7C,EAAgC6mB,EAA2BxO,EAAkB2O,GAC5E,IAAMC,EAAa5O,EAAO,GAAGW,KAAKlK,QAClC,GAAIkY,GAAQC,EAAWvnB,QAAUsnB,GAAS,EAAIC,EAAWvnB,OACvD,MAAM,IAAI6C,MAAM,gEAEdykB,EAAO,IACTA,EAAOC,EAAWvnB,OAASsnB,GAK7B,IADA,IAAMhB,EAAciB,EAAWnY,MAAM,GAC5BpK,EAAI,EAAGA,EAAI2T,EAAO3Y,OAAQgF,IAEjC,IADA,IAAMwiB,EAAa7O,EAAO3T,GAAGsU,KAAKlK,QACzBqY,EAAY,EAAGA,EAAYF,EAAWvnB,OAAQynB,IAErD,GAAIA,IAAcH,EAChBhB,EAAYgB,IAASE,EAAWC,QAG7B,GAAIF,EAAWE,KAAeD,EAAWC,GAC5C,MAAM,IAAI5kB,MAAM,oCAKtB,IAAM2I,EAAO8a,EAAYtmB,OACnBsL,GAAS,IAAAoc,aAAY,SAAUlc,GAC/Bmc,GAAQ,IAAAra,mBAAkB9B,GAC1Boc,GAAgB,IAAAC,qBAEhBC,EAASnP,EAAOlX,KAAI,SAAAuD,GAAK,OAAAA,EAAEsU,IAAF,IACzB2C,GAAW,IAAAxO,eAAcjC,GACzBuc,EAAoB,IAAIhjB,MAAM+iB,EAAO9nB,OAAS,GAGpD,IADA+nB,EAAQ,GAAKD,EAAO,GAAGR,GACdtiB,EAAI,EAAGA,EAAI+iB,EAAQ/nB,OAAQgF,IAClC+iB,EAAQ/iB,GAAK+iB,EAAQ/iB,EAAI,GAAK8iB,EAAO9iB,GAAGsiB,GAG1C,IAAMU,EAAU/L,EAASqL,GACnBW,EAAehM,EAAS7M,OAAO,GAC/B8Y,EAAcjM,EAASta,OAEzBwmB,EAAkB,cAAOH,EAAO,cAAMD,EAAQ,GAAE,8DAEtCG,EAAW,mBAAWD,EAAatmB,OAAM,kBAEvD,IAASqD,EAAI,EAAGA,EAAI+iB,EAAQ/nB,OAAQgF,IAAK,CACvC,IAAM,EAAQ+iB,EAAQ/iB,EAAI,GAC1BmjB,GAAmB,4BACTH,EAAO,cAAMD,EAAQ/iB,GAAE,gBAAQgjB,EAAO,eAAOD,EAAQ/iB,EAAI,GAAE,sEAEvDA,EAAC,YAAIojB,EAA0BnM,EAAU+L,EAAS,GAAM,oCACvDI,EAA0BH,EAAcD,EAAS,GAAM,qB,CAGxE,IAAMK,EAAYN,EAAQ/nB,OACpBsoB,EAAQP,EAAQA,EAAQ/nB,OAAS,GACvCmoB,GAAmB,8DAELE,EAAS,YAAID,EAA0BnM,EAAU+L,EAASM,GAAM,kCAC/DF,EAA0BH,EAAcD,EAASM,GAAM,OAEtE,IAAMre,GAAO,IAAAC,SAAQ5J,EAAQxB,QAAQ6H,QAAQiB,UAAU3G,SAEjDqU,EAAe,sBACfsS,EAAa,sCACE3L,EAASxa,KAAI,SAAA8mB,GAAK,aAASA,CAAT,IAAW,4BAC1CJ,EAAe,iEAIfR,EAAK,0EACgB1L,EAASzQ,EAAO,GAAE,iCAChCyQ,EAASzQ,EAAO,GAAE,qBAAayQ,EAASzQ,EAAO,GAAE,iCACjDyQ,EAASzQ,EAAO,GAAE,kEAEGF,EAAM,0CAElCA,EAAOE,EAAO,GAAE,cAAMF,EAAOE,EAAO,GAAE,kCAClCF,EAAOE,EAAO,GAAE,cAAM8a,EAAY9a,EAAO,GAAE,kDACzBF,EAAM,4CAG5BA,EAAOE,EAAO,GAAE,cAAMF,EAAOE,EAAO,GAAE,kCAClCF,EAAOE,EAAO,GAAE,cAAM8a,EAAY9a,EAAO,GAAE,kDACzBF,EAAM,4CAG5BA,EAAOE,EAAO,GAAE,cAAMF,EAAOE,EAAO,GAAE,kCAClCF,EAAOE,EAAO,GAAE,cAAM8a,EAAY9a,EAAO,GAAE,gCAC3CF,EAAOE,EAAO,GAAE,cAAM8a,EAAY9a,EAAO,GAAE,kDACzBF,EAAM,0CAE5BrB,EAAKG,OAAM,qCAInB,OAAO,EAAP,KACK+c,GAAQ,CACX/c,OAAQ,CAACkP,KAAMgN,EAAavjB,KAAM4V,EAAO,GAAG5V,KAAMwV,YAAa,EAAAuB,YAAYC,QAC3EzE,aAAY,EACZC,SAAS,GAEb,CAKkCiT,CAA8BloB,EAAS6mB,EAAUxO,EAAQzW,EAAWolB,KAApE,GAClC,EAEJ,IAAMc,EAA4B,SAACnM,EAAoB+L,EAAiBM,GACtE,IAAMG,EAAaxM,EAAShO,QAAQ+Z,GAQpC,OAPY/L,EAASxa,KAAI,SAAC4R,EAAGqV,GAC3B,OAAIA,IAAQD,EACH,UAAGpV,EAAC,cAAMiV,GAEVjV,CAEX,IACW1R,MACb,C,uqBC3IA,cAKA,UAEA,UAMa,EAAAid,OACT,SAACwF,EAAyCzL,EAAkBzW,GAE1D,OADAmiB,EAAe1L,GACXyL,EAAiBtlB,QAAQ4I,MAAQiR,EAAO,GAAGW,KAAKtZ,OAAS,EAGpD,CADHokB,EAAiBxK,KAAI,IAAAqN,qCAAoC7C,EAAkBzL,EAAQzW,GAAayW,IAK7F,CADHyL,EAAiBxK,IAAI+O,EAAsCvE,EAAkBzL,EAAQzW,GAAayW,GAG1G,EAEJ,IAwEMgQ,EACF,SAACroB,EAAgCqY,EAAkBzW,GACjD,IA1EuCglB,EAAoBlO,EA0ErDmO,GA1EiCD,EA0EcvO,EAAO3Y,OA1EDgZ,EA0ES9W,EAAWoiB,SA1EE,CACrF5iB,KAAM,SACNuK,WAAYlH,MAAMqiB,KAAK,CAACpnB,OAAQknB,IAAa,SAAC/S,EAAGnP,GAAM,iBAAIA,EAAJ,IACvD4T,WAAY7T,MAAMmiB,GAAYG,KAAK,EAAAvN,YAAYiC,UAC/C/C,UAAS,IAuEL,OAAO,EAAP,KAAWmO,GAAQ,CAAEhkB,IAAK,WAAM,OAnElC,SAAC7C,EAAgC6mB,EAA2BxO,EAAkB2O,GAC5E,IAAMC,EAAa5O,EAAO,GAAGW,KAAKlK,QAClC,GAAIkY,GAAQC,EAAWvnB,QAAUsnB,GAAS,EAAIC,EAAWvnB,OACvD,MAAM,IAAI6C,MAAM,gEAEdykB,EAAO,IACTA,EAAOC,EAAWvnB,OAASsnB,GAK7B,IADA,IAAMhB,EAAciB,EAAWnY,MAAM,GAC5BpK,EAAI,EAAGA,EAAI2T,EAAO3Y,OAAQgF,IAEjC,IADA,IAAMwiB,EAAa7O,EAAO3T,GAAGsU,KAAKlK,QACzBqY,EAAY,EAAGA,EAAYF,EAAWvnB,OAAQynB,IAErD,GAAIA,IAAcH,EAChBhB,EAAYgB,IAASE,EAAWC,QAG7B,GAAIF,EAAWE,KAAeD,EAAWC,GAC5C,MAAM,IAAI5kB,MAAM,oCAKtB,IAAM2I,EAAO8a,EAAYtmB,OAEnB4oB,EAAmB,IAAI7jB,MAAc4T,EAAO3Y,QAC9C6oB,EAAc,EAClB,IAAS7jB,EAAI,EAAGA,EAAI4jB,EAAiB5oB,SAAUgF,EAC7C6jB,GAAelQ,EAAO3T,GAAGsU,KAAKgO,GAC9BsB,EAAiB5jB,GAAK6jB,EAGxB,IAAIC,EAGFA,EADEnQ,EAAO3Y,OAAS,EACsB+oB,EAA4CH,GAE5CI,EAA4CJ,GAGtF,IAAMK,EAAoCC,EAAqCvQ,EAAO3Y,OAAQwL,GACxF2d,EAA0CC,EAA2CR,GACrFtT,EAAe,oBACjB2T,EAAiC,qBACjCE,EAAuC,qBACvCL,EAAqC,+CACXtd,EAAI,kFAC2B8b,EAAI,yEAGjDA,EAAI,uBAAeA,EAAI,oKAKvC,OAAO,EAAP,KACKH,GAAQ,CACX/c,OAAQ,CAACkP,KAAMgN,EAAavjB,KAAM4V,EAAO,GAAG5V,KAAMwV,YAAa,EAAAuB,YAAYiC,UAC3EzG,aAAY,GAEhB,CAKkC+T,CAAgC/oB,EAAS6mB,EAAUxO,EAAQzW,EAAWolB,KAAtE,GAClC,EAEEyB,EAA8C,SAACH,GACnD,IAAMU,EAAaV,EAAiBnnB,KAAI,SAACmB,EAAMoC,GAAM,yBAAYpC,EAAI,qBAAaoC,EAAC,OAA9B,IAErD,MAAO,6DACDskB,EAAW3nB,KAAK,IAAG,UAE3B,EAGMqnB,EAA8C,SAACJ,GACjD,OAAAG,EAA4CH,EAA5C,EAEEM,EAAuC,SAACK,EAAyBC,GAErE,IADA,IAAMC,EAAsB,CAAC,0EAAmED,EAAU,SACjGxkB,EAAI,EAAGA,EAAIukB,IAAmBvkB,EAC3B,IAANA,EACFykB,EAAUrjB,KACN,KACA,8BAAuBpB,EAAC,wBAAgBA,EAAC,iBACpCA,IAAMukB,EAAkB,EACjCE,EAAUrjB,KACN,KACA,0BAAmBpB,EAAC,iBAExBykB,EAAUrjB,KACN,KACA,mCAA4BpB,EAAC,wBAAgBA,EAAC,iBAMtD,OAHAykB,EAAUrjB,KACN,OAEGqjB,EAAU9nB,KAAK,KACxB,EAEMynB,EAA6C,SAACR,GAElD,IADA,IAAMa,EAAsB,CAAC,sDACpBzkB,EAAI,EAAGA,EAAI4jB,EAAiB5oB,SAAUgF,EACnC,IAANA,EACFykB,EAAUrjB,KACN,KACA,uBAAgBpB,EAAC,sBAAc4jB,EAAiB5jB,GAAE,QAC7CA,IAAM4jB,EAAiB5oB,OAAS,EACzCypB,EAAUrjB,KACN,KACA,wBAAiBwiB,EAAiB5jB,GAAE,QAExCykB,EAAUrjB,KACN,KACA,4BAAqBpB,EAAC,sBAAc4jB,EAAiB5jB,GAAE,QAO/D,OAJAykB,EAAUrjB,KACN,OAGGqjB,EAAU9nB,KAAK,KACxB,EAEa,EAAAkd,sBAAkE,SAACjN,GAC5E,WAAAhQ,6BAA4B,CAAC0lB,KAAM1V,EAAK1P,WAAWkB,OAAO,SAA1D,EAEJ,IAAMihB,EAAiB,SAAC1L,G,QACtB,IAAKA,GAAUA,EAAO3Y,OAAS,EAC7B,MAAM,IAAI6C,MAAM,kBAGlB,IAAM6mB,EAAY/Q,EAAO,GAAG5V,KACtB4mB,EAAsBhR,EAAO,GAAGW,KAAKtZ,OAG3C,GAAkB,WAAd0pB,EACF,MAAM,IAAI7mB,MAAM,sC,IAGlB,IAAoB,QAAA8V,GAAM,8BAAE,CAAvB,IAAMiD,EAAK,QAEd,GAAIA,EAAM7Y,OAAS2mB,EACjB,MAAM,IAAI7mB,MAAM,oCAIlB,GAAI+Y,EAAMtC,KAAKtZ,SAAW2pB,EACxB,MAAM,IAAI9mB,MAAM,2C,mGAGtB,C,kXC/LA,cAEA,UAEA,UAEA,UACA,UAyEa,EAAA+mB,2CACT,SAACxF,EAAyCzL,EAA2BzW,GAE/D,IA1EwC2nB,EAAkB7Q,EA0EpDmO,GA1EkC0C,EA0EkBlR,EAAO3Y,OAAS,EA1EhBgZ,EA0EmB9W,EAAWoiB,SA1ES,CACzG5iB,KAAM,cACNuK,WAAY4d,EAAU,CAAC,IAAK,IAAK,QAAU,CAAC,IAAK,KACjDjR,WAAYiR,EAAU,CAAC,EAAA/P,YAAYiC,SAAU,EAAAjC,YAAYiC,SAAU,EAAAjC,YAAYiC,UACzD,CAAC,EAAAjC,YAAYiC,SAAU,EAAAjC,YAAYiC,UACzD/C,UAAS,IAsED,OAAO,EAAP,KACKmO,GAAQ,CACXhkB,IAAK,WAAM,OApEnB,SAACihB,EAAyCzL,EAA2BwO,EACpEjlB,GACC,IACM4nB,EADUnR,EAAO3Y,OAAS,EACF,oCAAsC,GAC9D+pB,EAASpR,EAAO,GAAGW,KAAKlK,QACxB4a,EAASrR,EAAO,GAAGW,KAAKlK,QACxB6a,EAAyBD,EAAO,GAAK9nB,EAAWgoB,MACtD,EAAApiB,OAAOG,QACH,cACA,kBAAW/F,EAAWioB,QAAO,uBAAejoB,EAAWkoB,UAAS,mBAAWloB,EAAWgoB,MAAK,yBACvFhoB,EAAWmoB,YAAW,kBAAUnoB,EAAWooB,KAAI,qBAAapoB,EAAWuJ,UAC/E,IAAM6a,GACF,IAAAiE,sBAAqBR,EAAQC,EAAQ9nB,EAAWkoB,UAAWloB,EAAWooB,KAAMpoB,EAAWuJ,SACrFxB,GAAO,IAAAC,SAAQka,EAAiBtlB,QAAQ6H,QAAQiB,UAAU3G,SAC1D,GAAwC,IAAAupB,sBAAqBtoB,GAA5DuoB,EAAkB,qBAAEC,EAAe,kBAEpCpV,EAAe,0CACKpT,EAAWuJ,QAAQ,GAAE,aAAKvJ,EAAWuJ,QAAQ,GAAE,0CAClDvJ,EAAWooB,KAAK,GAAE,aAAKpoB,EAAWooB,KAAK,GAAE,iBAClEG,EAAkB,2NAMgBR,EAAsB,kFAGhBD,EAAO,GAAE,mEACdA,EAAO,GAAE,iEACRA,EAAO,GAAE,yEACD9nB,EAAWkoB,UAAU,GAAE,sDAE/BL,EAAO,GAAE,wFAITC,EAAO,GAAE,wEACD9nB,EAAWkoB,UAAU,GAAE,oDAC/BL,EAAO,GAAE,oQAU3CD,EAAW,iBACXY,EAAe,iBACfzgB,EAAKG,OAAM,sCAGX,OAAO,EAAP,KACK+c,GAAQ,CACX/c,OAAQ,CAACkP,KAAMgN,EAAavjB,KAAM4V,EAAO,GAAG5V,KAAMwV,YAAa,EAAAuB,YAAYiC,UAC3EzG,aAAY,EACZC,SAAS,GAEb,CAQmBoV,CAAqCvG,EAAkBzL,EAAQwO,EAAUjlB,EAAzE,GAEf,C,mICrFR,cACA,UACA,UAEa,EAAA0oB,sBACT,SAACxG,EAAyCzL,EAA2BzW,GACnE,IAAM2oB,EAASlS,EAAO,GAAGW,KACnBwR,EAASnS,EAAO,GAAGW,KACnBgN,GACF,IAAAiE,sBAAqBM,EAAQC,EAAQ5oB,EAAWkoB,UAAWloB,EAAWooB,KAAMpoB,EAAWuJ,SACrFsf,EAAY3G,EAAiBjI,cAAcxD,EAAO,GAAI,CAACkS,EAAO,GAAIA,EAAO,GAAKA,EAAO,KACrFG,EAAY5G,EAAiBjI,cAAcxD,EAAO,GAAI,CAACmS,EAAO,GAAIA,EAAO,KAEzEG,EAAetS,EAAO3Y,OAAS,EAAI,CAACgrB,EAAWD,EAAWpS,EAAO,IAAM,CAACqS,EAAWD,GACnFG,EAAe9G,EAAiBxK,KAClC,IAAAuR,qCAAoC/G,EAAkB6G,EAAc/oB,GAAa+oB,GACrF,OAAO7G,EAAiBjI,cAAc+O,EAAc5E,EACtD,EAES,EAAA8E,aACT,SAAChH,EAAyCzL,EAA2BzW,GACnE,IAAM2oB,EAASlS,EAAO,GAAGW,KACnBwR,EAASnS,EAAO,GAAGW,KACnBgN,GACF,IAAAiE,sBAAqBM,EAAQC,EAAQ5oB,EAAWkoB,UAAWloB,EAAWooB,KAAMpoB,EAAWuJ,SAGrF4f,EAAejH,EAAiBxK,KAClC,IAAA0R,qCAAoClH,EAAkBzL,EAAO,GAAIA,EAAO,GAAI2N,EAAapkB,GACzF,CAACyW,EAAO,KAGN4S,EAAiBnH,EAAiBjI,cAAcxD,EAAO,GAAI,CAACmS,EAAO,GAAIA,EAAO,GAAKA,EAAO,GAAKA,EAAO,KAGtGG,EACiB,IAAlBtS,EAAO3Y,OAAgB,CAACurB,EAAgBF,EAAc1S,EAAO,IAAM,CAAC4S,EAAgBF,GACnFH,EAAe9G,EAAiBxK,KAClC,IAAAuR,qCAAoC/G,EAAkB6G,EAAc/oB,GAAa+oB,GAIrF,OADuB7G,EAAiBjI,cAAc+O,EAAc5E,EAEtE,C,63BC9CJ,cAKA,UAEA,UAGA,UAEMkF,EACF,SAACC,EAAe7f,EAAgB8f,EAAaC,EAAgBC,EAAkBC,GAC3E,OAACJ,EAAQ,GAAK7f,EAAS8f,GAAOC,EAAS,GAAKC,EAAW,EAAIC,CAA3D,EAEFC,EAAoB,SAACC,EAAkB5B,EAAiBG,EAAgB0B,EAAcC,GAC1F,IAAMC,EAAWhsB,KAAK0f,MAAMmM,EAAW,GACvB,eAAZ5B,GACFG,EAAK0B,GAAQE,EACb5B,EAAK2B,GAAQF,EAAWG,GACH,eAAZ/B,IACTG,EAAK0B,GAAQD,EAAWG,EACxB5B,EAAK2B,GAAQC,EAEjB,EAwBa,EAAAlN,cACT,SAACoF,EAAoCzL,EAAkBzW,GAErD,OADAmiB,EAAe1L,EAAQzW,GAChBiqB,EAAgB/H,EAAkBzL,EAAQzW,EACnD,EAEJ,IAAMiqB,EACF,SAAC/H,EAAyCzL,EAAkBzW,GAC1D,IAAMkqB,EAAqBC,EAAmCnqB,EAAYyW,GAC1E,MAAO,CAAC2T,EAAwBlI,EAAkBzL,EAAQyT,GAC5D,EAgFEE,EACF,SAAClI,EAAyCzL,EAA2BzW,GAI/D,OAFekiB,EAAiBxK,IAbtC,SAACwK,EAAyCzL,EAA2BzW,GAE/D,IAtEkC2nB,EAAkB7Q,EAsE9CmO,GAtE4B0C,EAsEkBlR,EAAO3Y,OAAS,EAtEhBgZ,EAsEmB9W,EAAWoiB,SAtER,CAClF5iB,KAAM,gBACNuK,WAAY4d,EAAU,CAAC,IAAK,IAAK,KAAO,CAAC,IAAK,KAC9CjR,WAAYiR,EAAU,CAAC,EAAA/P,YAAYiC,SAAU,EAAAjC,YAAYiC,SAAU,EAAAjC,YAAYiC,UACzD,CAAC,EAAAjC,YAAYiC,SAAU,EAAAjC,YAAYiC,UACzD/C,UAAS,IAkED,OAAO,EAAP,KACKmO,GAAQ,CACXhkB,IAAK,WAAM,OAhEnB,SAACihB,EAAyCzL,EAA2BwO,EACpEjlB,GACC,IACMqqB,EADU5T,EAAO3Y,OAAS,EACJ,uBAAyB,MAC/C+pB,EAASpR,EAAO,GAAGW,KACnB0Q,EAASrR,EAAO,GAAGW,KACnB2Q,EAAyBD,EAAO,GAChCwC,EAAwBxC,EAAO,GAAK9nB,EAAWgoB,MAC/C5D,EAAc,EAAH,CAAI3N,EAAO,GAAGW,KAAK,GAAIX,EAAO,GAAGW,KAAK,GAAKpX,EAAWgoB,OAAK,EAAKhoB,EAAWokB,cAAW,GACjGrc,GAAO,IAAAC,SAAQka,EAAiBtlB,QAAQ6H,QAAQiB,UAAU3G,SAC1D,GAAwC,IAAAupB,sBAAqBtoB,GAA5DuoB,EAAkB,qBAAEC,EAAe,kBAEpCpV,EAAe,0CACKpT,EAAWuJ,QAAQ,GAAE,aAAKvJ,EAAWuJ,QAAQ,GAAE,0CAClDvJ,EAAWooB,KAAK,GAAE,aAAKpoB,EAAWooB,KAAK,GAAE,iBAClEG,EAAkB,+MAQgBR,EAAsB,gEACRA,EAAsB,kCAEtDsC,EAAS,kEACyBC,EAAqB,wEACpCA,EAAqB,kEACxBxC,EAAO,GAAE,6DACPA,EAAO,GAAE,8DACR9nB,EAAWkoB,UAAU,GAAE,qBAAaloB,EAAWkoB,UAAU,GAAE,8LAKxDL,EAAO,GAAE,wDACTA,EAAO,GAAE,+PAS7CW,EAAe,iBACfzgB,EAAKG,OAAM,sCAGX,OAAO,EAAP,KACK+c,GAAQ,CACX/c,OAAQ,CAACkP,KAAMgN,EAAavjB,KAAM4V,EAAO,GAAG5V,KAAMwV,YAAa,EAAAuB,YAAYiC,UAC3EzG,aAAY,EACZC,SAAS,GAEb,CAQmBkX,CAAuCrI,EAAkBzL,EAAQwO,EAAUjlB,EAA3E,GAEf,CAOMwqB,CAA6CtI,EAAkBzL,EAAQzW,GAAayW,EAE1F,EAEF0T,EAAqC,SAAoCnqB,EAAeyW,GAC5F,IAAM0R,EAAcnoB,EAAWmoB,YAAYjb,QAE3C,GAAsC,IAAlClN,EAAWmoB,YAAYrqB,OACzB,IAAK,IAAIgF,EAAI,EAAGA,EAAI2T,EAAO,GAAGW,KAAKtZ,SAAUgF,EAC3CqlB,EAAYjkB,KAAKuS,EAAO,GAAGW,KAAKtU,IAIpC,IAAMslB,EAAOpoB,EAAWooB,KAAKlb,QACvBkX,EAAcpkB,EAAWokB,YAAYlX,SAjIzC,SAACmY,EAA+B8C,EAAgCD,EAA8BD,EAC7FG,EAAgB7e,EAA4BkhB,EAAkCrG,GAG7E,IAFA,IAAMsG,EAAcrF,EAAWvnB,OAAS,EAClC6sB,EAAqC,IAAvBvG,EAAYtmB,OACvBgF,EAAI,EAAGA,EAAI4nB,IAAe5nB,EAAG,CACpC,IAAM6mB,EAAUgB,EAActF,EAAWviB,EAAI,GAAKyG,EAAQzG,GAAKshB,EAAYthB,GACrE+mB,EAAWP,EAAgBjE,EAAWviB,EAAI,GAAIyG,EAAQzG,GAAIslB,EAAKtlB,GAAIqlB,EAAYrlB,GAAIolB,EAAUplB,GAAI6mB,GACvGC,EAAkBC,EAAU5B,EAASG,EAAMtlB,EAAGA,EAAI4nB,GAC9CC,GACFvG,EAAYlgB,KACRqF,EAAQzG,IAAMuiB,EAAWviB,EAAI,GAAK,GAAK2nB,EAAc3nB,IAAMqlB,EAAYrlB,GAAK,GAAKolB,EAAUplB,GAAK,EAChGslB,EAAKtlB,GAAKslB,EAAKtlB,EAAI4nB,G,CAG7B,CAuHFE,CAHmBnU,EAAO,GAAGW,KAIb+Q,EAAanoB,EAAWkoB,UAAWloB,EAAWioB,QAASG,EAAMpoB,EAAWuJ,QACpFvJ,EAAWyqB,cAAerG,GAG9B,IAAMyG,EAAmBlsB,OAAOO,OAAO,CAAC,EAAGc,GAE3C,OADArB,OAAOO,OAAO2rB,EAAe,CAAC1C,YAAW,EAAEC,KAAI,EAAEhE,YAAW,EAAEhC,SAAUpiB,EAAWoiB,WAC5EyI,CACT,EAEa,EAAA9N,6BACT,SAACrN,GACC,IAAM1P,EAAa0P,EAAK1P,WAClB8qB,GAAuB,IAAAC,mCAAkC/qB,GAEzDioB,EAAUjoB,EAAWmB,UAAU,WAAY,UAC3C+mB,EAAYloB,EAAWsB,QAAQ,YAAa,CAAC,EAAG,IAChD0mB,EAAQhoB,EAAWkB,OAAO,QAAS,GACnCinB,EAAcnoB,EAAWsB,QAAQ,eAAgB,IACjDmpB,EAAgBzqB,EAAWsB,QAAQ,iBAAkB,CAAC,EAAG,IACzD8iB,EAAcpkB,EAAWsB,QAAQ,eAAgB,IACjD8mB,EAAOpoB,EAAWsB,QAAQ,OAAQ,CAAC,EAAG,EAAG,EAAG,IAC5CiI,EAAUvJ,EAAWsB,QAAQ,UAAW,CAAC,EAAG,IAElD,OAAO,IAAA5B,6BAA2B,GAC7BuoB,QAAO,EAAEC,UAAS,EAAEF,MAAK,EAAEG,YAAW,EAAEsC,cAAa,EAAErG,YAAW,EAAEgE,KAAI,EAAE7e,QAAO,GAAKuhB,GAC7F,EAEJ,IAAM3I,EAAiB,SAAC1L,EAAkBzW,GAGxC,IAAKyW,GAA6B,IAAlBA,EAAO3Y,QAAkC,IAAlB2Y,EAAO3Y,OAC5C,MAAM,IAAI6C,MAAM,+BAIlB,GAA8B,IAA1B8V,EAAO,GAAGW,KAAKtZ,QAA0C,IAA1B2Y,EAAO,GAAGW,KAAKtZ,OAChD,MAAM,IAAI6C,MAAM,6CAMlB,GAFoB8V,EAAO,GAAGW,KAAK,KACXX,EAAO,GAAGW,KAAK,GAErC,MAAM,IAAIzW,MAAM,qDAGlB,IAAMqqB,EAAcvU,EAAO,GAAGW,KAAK,GAAKpX,EAAWgoB,MAGnD,GAAsB,IAAlBvR,EAAO3Y,SAA2C,IAA1B2Y,EAAO,GAAGW,KAAKtZ,QAAgB2Y,EAAO,GAAGW,KAAK,KAAO4T,GAC/E,MAAM,IAAIrqB,MAAM,gBAGlB,IAAM+pB,EAAcjU,EAAO,GAAGW,KAAKtZ,OAAS,EAE5C,GAAIkC,EAAWkoB,UAAUpqB,SAAW4sB,EAClC,MAAM,IAAI/pB,MAAM,8BAAuB+pB,EAAW,MAIpD,GAAI1qB,EAAWuJ,QAAQzL,SAAW4sB,EAChC,MAAM,IAAI/pB,MAAM,4BAAqB+pB,EAAW,MAIlD,GAAI1qB,EAAWooB,KAAKtqB,SAAyB,EAAd4sB,EAC7B,MAAM,IAAI/pB,MAAM,yBAAgC,EAAd+pB,EAAe,MAInD,GAAI1qB,EAAWyqB,cAAc3sB,SAAW4sB,EACtC,MAAM,IAAI/pB,MAAM,mCAA4B+pB,EAAW,MAKzD,GAAsC,IAAlC1qB,EAAWmoB,YAAYrqB,QAAgBkC,EAAWmoB,YAAYrqB,SAAW2Y,EAAO,GAAGW,KAAKtZ,OAAS,EACnG,MAAM,IAAI6C,MAAM,wBAIlB,GAAsC,IAAlCX,EAAWokB,YAAYtmB,QAAgBkC,EAAWokB,YAAYtmB,SAAW2Y,EAAO,GAAGW,KAAKtZ,OAAS,EACnG,MAAM,IAAI6C,MAAM,wBAIlB,GAAuB,YAAnB8V,EAAO,GAAG5V,MAAyC,YAAnB4V,EAAO,GAAG5V,KAC5C,MAAM,IAAIF,MAAM,mDAGlB,GAAsB,IAAlB8V,EAAO3Y,QAAmC,YAAnB2Y,EAAO,GAAG5V,KACnC,MAAM,IAAIF,MAAM,mDAEpB,C,k4BC/PA,cAKA,UAGA,UACA,UACA,UACA,UACA,UACA,UAGa,EAAA0nB,qBACT,SAAChD,EAA+B8C,EAAgCD,EAC/D+C,EAA+B1hB,G,MACxB2hB,EAAY7F,EAAW,GACvB8F,EAAoB9F,EAAWnY,MAAM,GACrCwd,EAAcS,EAAkBrtB,OAChCstB,EAAcjD,EAAY,GAE1BkD,EADqBlD,EAAYjb,MAAM,GACC3N,KAAI,SAAC0S,EAAGnP,GAAM,OAAAmP,GAAKA,EAAI,IAAMiW,EAAUplB,GAAK,EAA9B,IAEtDwoB,EAD2BH,EAAkB5rB,KAAI,SAAC0S,EAAGnP,GAAM,OAAAmP,EAAIgZ,EAAWnoB,GAAKmoB,EAAWnoB,EAAI4nB,EAAnC,IAEpCnrB,KAAI,SAAC0S,EAAGnP,GAAM,OAAA9E,KAAK0f,OAAOzL,EAAIoZ,EAAmBvoB,GAAKyG,EAAQzG,IAAMyG,EAAQzG,GAA9D,IAE3C,OADoB,GAACooB,EAAWE,IAAa1O,OAAM,eAAI4O,IAAkB,GAE3E,EAWS,EAAA1O,KACT,SAACsF,EAAoCzL,EAAkBzW,GAErD,OADAmiB,EAAe1L,EAAQzW,GAChBurB,EAAOrJ,EAAkBzL,EAAQzW,EAC1C,EAEJ,IAAMurB,EACF,SAACrJ,EAAyCzL,EAAkBzW,GAC1D,IAAMkqB,EAAqBsB,EAA0BxrB,EAAYyW,GAC3DgV,EAAWvJ,EAAiBtlB,QAAQ4I,KACpCkmB,EAAoD,IAAtCxB,EAAmB/B,YAAY,IAAkD,IAAtC+B,EAAmB/B,YAAY,GAC9F,OAAI+B,EAAmBlC,MAAQ,EAGtB,CAFQ9F,EAAiBxK,KAC5B,IAAAgQ,4CAA2CxF,EAAkBzL,EAAQyT,GAAqBzT,IAErFiV,GAAeD,EACjB,CAACE,EAAwBzJ,EAAkBzL,EAAQyT,IACjDuB,GAAsC,IAA1BhV,EAAO,GAAGW,KAAKtZ,QAAsC,IAAtB2Y,EAAO,GAAGW,KAAK,KAAasU,EACzE,EAAC,IAAAxC,cAAahH,EAAkBzL,EAAQyT,IAExC,CAAC0B,EAAe1J,EAAkBzL,EAAQyT,GAErD,EAEEyB,EACF,SAACzJ,EAAyCzL,EAA2BzW,GACnE,IAAM2oB,EAASlS,EAAO,GAAGW,KACnBwR,EAASnS,EAAO,GAAGW,KACnBgN,GACF,IAAAiE,sBAAqBM,EAAQC,EAAQ5oB,EAAWkoB,UAAWloB,EAAWooB,KAAMpoB,EAAWuJ,SACrFsf,EAAY3G,EAAiBzI,gBAAgBhD,EAAO,GAAI,CAACkS,EAAO,GAAIA,EAAO,GAAKA,EAAO,KACvFG,EAAY5G,EAAiBzI,gBAAgBhD,EAAO,GAAI,CAACmS,EAAO,GAAIA,EAAO,KAE3EG,EAAetS,EAAO3Y,OAAS,EAAI,CAACgrB,EAAWD,EAAWpS,EAAO,IAAM,CAACqS,EAAWD,GACnFG,EAAe9G,EAAiBxK,KAAI,IAAAmU,+BAA8B9C,EAAc/oB,GAAa+oB,GACnG,OAAO7G,EAAiBzI,gBAAgBuP,EAAc5E,EACxD,EAEEwH,EACF,SAAC1J,EAAyCzL,EAA2BzW,GACnE,IAAM2oB,EAASlS,EAAO,GAAGW,KACnBwR,EAASnS,EAAO,GAAGW,KACnBgN,GACF,IAAAiE,sBAAqBM,EAAQC,EAAQ5oB,EAAWkoB,UAAWloB,EAAWooB,KAAMpoB,EAAWuJ,SACrFuiB,EAAU5J,EAAiBxK,KAC7B,IAAAqU,+BAA8B7J,EAAkBzL,EAAO,GAAIA,EAAO,GAAI2N,EAAapkB,GAAa,CAACyW,EAAO,KAEtGuV,EAAqC,IAAlBvV,EAAO3Y,OAAe,CAACguB,EAASrV,EAAO,GAAIA,EAAO,IAAM,CAACqV,EAASrV,EAAO,IAGlG,OAFeyL,EAAiBxK,KAC5B,IAAAuU,mCAAkC/J,EAAkBzL,EAAQ2N,EAAapkB,GAAagsB,EAE5F,EAEER,EAA4B,SAA2BxrB,EAAeyW,GAC1E,IAAM0R,EAAcnoB,EAAWmoB,YAAYjb,QAE3C,GAAsC,IAAlClN,EAAWmoB,YAAYrqB,OACzB,IAAK,IAAIgF,EAAI,EAAGA,EAAI2T,EAAO,GAAGW,KAAKtZ,SAAUgF,EAC3CqlB,EAAYjkB,KAAKuS,EAAO,GAAGW,KAAKtU,IAGpC,IAAMslB,EAAOpoB,EAAWooB,KAAKlb,QAC7B,EAAAgf,aAAaC,yBACT1V,EAAO,GAAGW,KAAMpX,EAAWuJ,QAASvJ,EAAWkoB,UAAWC,EAAaC,EAAMpoB,EAAWioB,SAG5F,IAAM4C,EAAmBlsB,OAAOO,OAAO,CAAC,EAAGc,GAE3C,OADArB,OAAOO,OAAO2rB,EAAe,CAAC1C,YAAW,EAAEC,KAAI,EAAEhG,SAAUpiB,EAAWoiB,WAC/DyI,CACT,EAEa,EAAAhO,oBAA8D,SAACnN,GAC1E,IAAM1P,EAAa0P,EAAK1P,WAClB8qB,GAAuB,IAAAC,mCAAkC/qB,GAEzDioB,EAAUjoB,EAAWmB,UAAU,WAAY,UAC3C+mB,EAAYloB,EAAWsB,QAAQ,YAAa,CAAC,EAAG,IAChD0mB,EAAQhoB,EAAWkB,OAAO,QAAS,GACnCinB,EAAcnoB,EAAWsB,QAAQ,eAAgB,IACjD8mB,EAAOpoB,EAAWsB,QAAQ,OAAQ,CAAC,EAAG,EAAG,EAAG,IAC5CiI,EAAUvJ,EAAWsB,QAAQ,UAAW,CAAC,EAAG,IAElD,OAAO,IAAA5B,6BAA2B,GAAEuoB,QAAO,EAAEC,UAAS,EAAEF,MAAK,EAAEG,YAAW,EAAEC,KAAI,EAAE7e,QAAO,GAAKuhB,GAChG,EAEA,IAAM3I,EAAiB,SAAC1L,EAAkBzW,GAGxC,IAAKyW,GAA6B,IAAlBA,EAAO3Y,QAAkC,IAAlB2Y,EAAO3Y,OAC5C,MAAM,IAAI6C,MAAM,+BAIlB,GAA8B,IAA1B8V,EAAO,GAAGW,KAAKtZ,QAA0C,IAA1B2Y,EAAO,GAAGW,KAAKtZ,OAChD,MAAM,IAAI6C,MAAM,6CAMlB,GAFoB8V,EAAO,GAAGW,KAAK,KACXX,EAAO,GAAGW,KAAK,GAAKpX,EAAWgoB,MAErD,MAAM,IAAIrnB,MAAM,qDAIlB,GAAsB,IAAlB8V,EAAO3Y,SAA2C,IAA1B2Y,EAAO,GAAGW,KAAKtZ,QAAgB2Y,EAAO,GAAGW,KAAK,KAAOX,EAAO,GAAGW,KAAK,IAC9F,MAAM,IAAIzW,MAAM,gBAGlB,IAAM+pB,EAAcjU,EAAO,GAAGW,KAAKtZ,OAAS,EAE5C,GAAIkC,EAAWkoB,UAAUpqB,SAAW4sB,EAClC,MAAM,IAAI/pB,MAAM,8BAAuB+pB,EAAW,MAIpD,GAAI1qB,EAAWuJ,QAAQzL,SAAW4sB,EAChC,MAAM,IAAI/pB,MAAM,4BAAqB+pB,EAAW,MAIlD,GAAI1qB,EAAWooB,KAAKtqB,SAAyB,EAAd4sB,EAC7B,MAAM,IAAI/pB,MAAM,yBAAgC,EAAd+pB,EAAe,MAKnD,GAAsC,IAAlC1qB,EAAWmoB,YAAYrqB,QAAgBkC,EAAWmoB,YAAYrqB,SAAW2Y,EAAO,GAAGW,KAAKtZ,OAAS,EACnG,MAAM,IAAI6C,MAAM,wBAIlB,GAAuB,YAAnB8V,EAAO,GAAG5V,MAAyC,YAAnB4V,EAAO,GAAG5V,KAC5C,MAAM,IAAIF,MAAM,0CAGlB,GAAsB,IAAlB8V,EAAO3Y,QAAmC,YAAnB2Y,EAAO,GAAG5V,KACnC,MAAM,IAAIF,MAAM,0CAEpB,C,0bC/KA,cAOa,EAAAuc,aACT,SAACgF,EAAyCzL,EAAkBzW,GAC1DmiB,EAAe1L,GACf,IAAM2V,EAAYpsB,EAAWosB,UACvBC,EAAeD,EAAYA,EAC3BE,EAAoC,QAApBtsB,EAAWusB,KAAiB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GACjFC,EAAwC,QAApBxsB,EAAWusB,KACjC,CACE9V,EAAO,GAAGW,KAAK,GAAIgV,EAAWA,EAAW3V,EAAO,GAAGW,KAAK,GAAKiV,EAAc5V,EAAO,GAAGW,KAAK,GAC1FX,EAAO,GAAGW,KAAK,IAEjB,CACEX,EAAO,GAAGW,KAAK,GAAIX,EAAO,GAAGW,KAAK,GAAKiV,EAAcD,EAAWA,EAAW3V,EAAO,GAAGW,KAAK,GAC1FX,EAAO,GAAGW,KAAK,IASfqV,EAAsBvK,EAAiBzI,gBAAgBhD,EAAO,GAAI+V,GAGlEE,EAA2C,CAACC,KAAML,EAAelK,SAAU,UAAGkK,IAC7EM,EAAD,GAAoB,IAAAzd,WAAU+S,EAAkB,CAACuK,GAAsBC,GAAoB,GAA3E,GAGhBG,EAAqB,CACzBpW,EAAO,GAAGW,KAAK,GAAIX,EAAO,GAAGW,KAAK,GAAKiV,EAAc5V,EAAO,GAAGW,KAAK,GAAKgV,EACzE3V,EAAO,GAAGW,KAAK,GAAKgV,GAGtB,MAAO,CADQlK,EAAiBzI,gBAAgBmT,EAAiBC,GAEnE,EAES,EAAA1P,4BACT,SAACzN,GAEC,IAAM0c,EAAY1c,EAAK1P,WAAWkB,OAAO,aACzC,GAAIkrB,EAAY,EACd,MAAM,IAAIzrB,MAAM,4CAAqCyrB,EAAS,sBAEhE,IAAMG,EAAO7c,EAAK1P,WAAWmB,UAAU,OAAQ,OAC/C,GAAa,QAATorB,GAA2B,QAATA,EACpB,MAAM,IAAI5rB,MAAM,6BAAsB4rB,EAAI,sBAE5C,MAAO,CAACA,KAAI,EAAEH,UAAS,EACzB,EAEJ,IAAMjK,EAAiB,SAAC1L,GACtB,GAAsB,IAAlBA,EAAO3Y,OACT,MAAM,IAAI6C,MAAM,gDAAyC8V,EAAO3Y,SAKlE,GAAuB,WAAnB2Y,EAAO,GAAG5V,MAA+C,IAA1B4V,EAAO,GAAGW,KAAKtZ,OAChD,MAAM,IAAIgvB,UAAU,oDAExB,C,spBCxEA,cACA,UAEA,UAEA,UACA,UA2Da,EAAAb,kCACT,SAAC/J,EAAyCzL,EAA2B2N,EACpEpkB,GACC,IAAMilB,EA5D4B,SAAC0C,EAAkB3nB,GAA6C,OACtGR,KAAM,iBACNuK,WAAY4d,EAAU,CAAC,SAAU,IAAK,KAAO,CAAC,SAAU,KACxDjR,WAAYiR,EAAU,CAAC,EAAA/P,YAAYiC,SAAU,EAAAjC,YAAYM,oBAAqB,EAAAN,YAAYiC,UACpE,CAAC,EAAAjC,YAAYiC,SAAU,EAAAjC,YAAYM,qBACzDkK,SAAUpiB,EAAW+sB,mBALiF,CA4DjFC,CAAgCvW,EAAO3Y,OAAS,EAAGkC,GACpE,OAAO,EAAP,KACKilB,GAAQ,CACXhkB,IAAK,WAAM,OAtDf,SAACihB,EAAyC+C,EAA2BxO,EACpE2N,EAAuBpkB,GACtB,IAAM2oB,EAASlS,EAAO,GAAGW,KACnBwR,EAASnS,EAAO,GAAGW,KACnBe,EAAsB,CAACyQ,EAAO,GAAI5qB,KAAKE,KAAMyqB,EAAO,GAAKC,EAAO,GAAKA,EAAO,GAAM,IAClFqE,GAAc,IAAAC,qBAAoBvE,EAAQC,EAAQxE,GAClD,IACFlC,EAAiB9L,+BAA+B+B,EAAqB,EAAAP,YAAYM,qBAAoB,GADlGiV,EAAM,KAAEC,EAAO,KAGhBC,EAAgB,EAAA1hB,UAAUqO,eAAeiT,GACzC,IACF/K,EAAiB9L,+BAA+B6W,EAAa,EAAArV,YAAYM,qBAAoB,GAD1FoV,EAAW,KAAEC,EAAY,KAE1BjkB,EAAO8a,EAAYtmB,OAEnB0vB,EAAa/W,EAAO3Y,OAAS,EAAK,MAAQ,QAC1C2vB,EAAYzvB,KAAKE,KAAKyqB,EAAO,GAAKC,EAAO,GAAKA,EAAO,GAAK,GAC1D,GAAwC,IAAAN,sBAAqBtoB,GAA5DuoB,EAAkB,qBAAEC,EAAe,kBACpCzgB,GAAO,IAAAC,SAAQka,EAAiBtlB,QAAQ6H,QAAQiB,UAAU3G,SAC1DqU,EAAe,YACzBmV,EAAkB,uCACQjf,EAAI,wLAOG+jB,EAAc,GAAE,0BAAkBA,EAAc,GAAE,0BAC3EA,EAAc,GAAE,gDACUlV,EAAoB,GAAE,8BACxCqV,EAAS,oCACHC,EAAS,0EACsBH,EAAW,aAAKC,EAAY,oEAC5BJ,EAAM,aAAKC,EAAO,gCACtDrlB,EAAK8B,UAAS,mCAA2B9B,EAAK8B,UAAS,iFAItE2e,EAAe,wBAGb,OAAO,EAAP,KACKvD,GAAQ,CACX/c,OAAQ,CAACkP,KAAMgN,EAAavjB,KAAM4V,EAAO,GAAG5V,KAAMwV,YAAa,EAAAuB,YAAYiC,UAC3EzG,aAAY,GAEhB,CAQesa,CAA4BxL,EAAkB+C,EAAUxO,EAAQ2N,EAAapkB,EAA7E,GAEf,C,+HCvEJ,cAGa,EAAAwd,QACT,SAAC0E,EAAyCzL,EAAkB2O,GAC1DjD,EAAe1L,EAAQ2O,GAEvB,IAAMuI,EAAa,EAAAhiB,UAAUiiB,aAAanX,EAAO,GAAGW,KAAMgO,GAC1D,MAAO,CAAClD,EAAiBzI,gBAAgBhD,EAAO,GAAIkX,GACtD,EAES,EAAAlQ,uBAAyD,SAAC/N,GACnE,OAAAA,EAAK1P,WAAWkB,OAAO,OAAQ,EAA/B,EAEJ,IAAMihB,EAAiB,SAAC1L,EAAkB2O,GACxC,IAAK3O,GAA4B,IAAlBA,EAAO3Y,OACpB,MAAM,IAAI6C,MAAM,6BAGlB,IAAMktB,EAAIpX,EAAO,GAAGW,KAAKtZ,OACzB,GAAU,IAAN+vB,EACF,MAAM,IAAIltB,MAAM,mCAGlB,GAAIykB,GAAQyI,GAAKzI,EAAOyI,EACtB,MAAM,IAAIltB,MAAM,gBAIlB,GAAuB,WAAnB8V,EAAO,GAAG5V,KACZ,MAAM,IAAIF,MAAM,kCAEpB,C,wcClCA,cAGA,UASA,gCAAqCX,GACnC,IAAI8tB,EACJ,OAAQ9tB,EAAW+tB,YACjB,IAAK,OACHD,GAAO,IAAAE,YACP,MACF,IAAK,UACHF,GAAO,IAAAG,eACP,MACF,IAAK,OACHH,GAAO,IAAAI,UAASluB,EAAWmuB,QAAUnuB,EAAWouB,SAChD,MAEF,QACE,MAAO,CAAC7F,mBAAoB,GAAIC,gBAAiB,IAGrD,IAAM6F,EAAiBP,EAAKtuB,KAG5B,MAAO,CAAC+oB,mBAFmBuF,EAAK/e,KAEJyZ,gBADJ,kBAAW6F,EAAc,aAEnD,EAEa,EAAAtD,kCAAoC,SAAC/qB,GAChD,IAAM+tB,EAAa/tB,EAAWmB,UAAU,aAAc,IAEtD,GAAmB,SAAf4sB,EAAuB,CACnB,QAAqB/tB,EAAWqB,UAAU,oBAAqB,CAAC,EAAAitB,SAAU,EAAAC,WAAU,GAAnFJ,EAAO,KAAEC,EAAO,KACvB,MAAO,CAACL,WAAU,EAAEK,QAAO,EAAED,QAAO,EAAEpB,mBAAoB,UAAGgB,EAAU,YAAII,EAAO,YAAIC,G,CAExF,MAAO,CAACL,WAAU,EAAEhB,mBAAoBgB,EAC1C,C,sWC5CA,cAEA,UAEA,UAEA,UAMa,EAAApQ,OACT,SAACuE,EAAyCzL,EAAkBzW,GAG1D,OAFAmiB,EAAe1L,EAAQzW,EAAWolB,MAE3B,CADQlD,EAAiBxK,IAAI8W,EAA8BtM,EAAkBzL,EAAQzW,GAAayW,GAE3G,EAES,EAAAmH,sBAAkE,SAAClO,GAC5E,WAAAhQ,6BAA4B,CAAC0lB,KAAM1V,EAAK1P,WAAWkB,OAAO,OAAQ,IAAlE,EAEJ,IAAMutB,EAAwB,CAC5BjvB,KAAM,SACNuK,WAAY,CAAC,IAAK,KAClB2M,WAAY,CAAC,EAAAkB,YAAYiC,SAAU,EAAAjC,YAAYiC,WAmD3C2U,EACF,SAACpwB,EAAgCqY,EAAkBzW,GACjD,IAAMilB,EAAW,EAAH,KAAOwJ,GAAqB,CAAE3X,UAAW9W,EAAWoiB,WAClE,OAAO,EAAP,KAAW6C,GAAQ,CAAEhkB,IAAK,WAAM,OAlDlC,SAAC7C,EAAgC6mB,EAA2BxO,EAAkB2O,GAC5E,IAAMC,EAAa5O,EAAO,GAAGW,KAAKlK,QAC5BwhB,EAAiBjY,EAAO,GAAGW,KAAKlK,QAChCkX,EAAc,IAAIvhB,MAAMwiB,EAAWvnB,OAAS4wB,EAAe5wB,OAAS,GAE1EsnB,EAAO,EAAAzZ,UAAUgjB,cAAcvJ,EAAMC,EAAWvnB,QAEhD,IADA,IAAM8wB,EAAyB,GACtB9rB,EAAI,EAAGA,EAAIshB,EAAYtmB,OAAQgF,IAMlCA,EAAIsiB,GACNhB,EAAYthB,GAAKuiB,EAAWviB,GAC5B8rB,EAAa1qB,KAAK,mBAAYpB,EAAC,yBAAiBA,EAAC,QAE7CA,EAAIsiB,EAAOsJ,EAAe5wB,QAC5BsmB,EAAYthB,GAAK4rB,EAAe5rB,EAAIsiB,GACpCwJ,EAAa1qB,KAAK,uBAAgBpB,EAAIsiB,EAAI,yBAAiBtiB,EAAC,SAE5DshB,EAAYthB,GAAKuiB,EAAWviB,EAAI4rB,EAAe5wB,OAAS,GACxD8wB,EAAa1qB,KAAK,mBAAYpB,EAAI4rB,EAAe5wB,OAAS,EAAC,yBAAiBgF,EAAC,QAKnF,IAAM+rB,EAAQzK,EAAYtmB,QAAU,EAC9BgxB,EAAQzJ,EAAWvnB,OACnBixB,EAASL,EAAe5wB,QAAU,EAClCsV,EAAe,8CACSyb,EAAK,sCAClBC,EAAK,wCACDC,EAAM,qDAEvBH,EAAanvB,KAAK,cAAa,wEAEtB2lB,EAAI,+BAAuBC,EAAWD,GAAK,kDAGxD,OAAO,EAAP,KACKH,GAAQ,CACX/c,OAAQ,CAACkP,KAAMgN,EAAavjB,KAAM4V,EAAO,GAAG5V,KAAMwV,YAAa,EAAAuB,YAAYiC,UAC3EzG,aAAY,GAEhB,CAKkC4b,CAAwB5wB,EAAS6mB,EAAUxO,EAAQzW,EAAWolB,KAA9D,GAClC,EAEEjD,EAAiB,SAAC1L,EAAkB2O,GACxC,IAAK3O,GAA4B,IAAlBA,EAAO3Y,OACpB,MAAM,IAAI6C,MAAM,6BAElB,IAAM2mB,EAAa7Q,EAAO,GAAGW,KAAKtZ,OAClC,GAAIwpB,EAAa,EACf,MAAM,IAAI3mB,MAAM,wBAElB,GAAIykB,GAAQkC,GAAclC,EAAOkC,EAAa,EAC5C,MAAM,IAAI3mB,MAAM,iBAElB,IAA8C,IAA1C,EAAAsuB,aAAaljB,QAAQ0K,EAAO,GAAG5V,MACjC,MAAM,IAAIF,MAAM,sBAElB,GAAuB,UAAnB8V,EAAO,GAAG5V,MAAuC,UAAnB4V,EAAO,GAAG5V,KAC1C,MAAM,IAAIF,MAAM,qBAEpB,C,0qBCnGA,cAIA,UAEA,UAUa,EAAAkd,KACT,SAACqE,EAAyCzL,EAAkBzW,GAG1D,OAFAmiB,EAAe1L,EAAQzW,GAEhB,CADQkiB,EAAiBxK,IAAIwX,EAA4BzY,EAAQzW,GAAayW,GAEvF,EAEJ,IAAM0Y,EAAsB,SAACzf,EAAkB0f,GAC7C,IAAMC,EAAiD,IAAxC3f,EAAK1P,WAAWkB,OAAO,SAAU,GAC1CouB,EAAiD,IAAxC5f,EAAK1P,WAAWkB,OAAO,SAAU,GAC1CquB,EAAQ7f,EAAK1P,WAAWe,SAAS,QAAS,GAC1CyuB,EAAO9f,EAAK1P,WAAWe,SAAS,OAAQ,GAC9C,OAAO,IAAArB,6BAA4B,CAAC2vB,OAAM,EAAEC,OAAM,EAAEC,MAAK,EAAEC,KAAI,EAAEJ,YAAW,GAC9E,EAEa,EAAAtR,sBAAgE,SAACpO,GAC1E,OAAAyf,EAAoBzf,GAAM,EAA1B,EAES,EAAAqO,uBAAiE,SAACrO,GAC3E,OAAAyf,EAAoBzf,GAAM,EAA1B,EAEJ,IAAMwf,EAA8B,SAACzY,EAAkBzW,GACrD,IAAMilB,EAAW,CACfzlB,KAAM,OACNuK,WAA8B,IAAlB0M,EAAO3Y,OAAe,CAAC,IAAK,IAAK,KAAO,CAAC,IAAK,KAC1D4Y,WAA8B,IAAlBD,EAAO3Y,OAAe,CAAC,EAAA8Z,YAAYiC,SAAU,EAAAjC,YAAYiC,SAAU,EAAAjC,YAAYiC,UACzD,CAAC,EAAAjC,YAAYiC,SAAU,EAAAjC,YAAYiC,UACrEjZ,IAAKZ,EAAWoiB,UAGlB,OAAO,EAAP,KAAW6C,GAAQ,CAAEhkB,IAAK,WAAM,OAAAwuB,EAAsBxK,EAAUxO,EAAQzW,EAAxC,GAClC,EAEMyvB,EACF,SAACxK,EAA2BxO,EAAkBzW,GAC5C,IAAM0vB,EAASjZ,EAAO,GAAGW,KAAKlK,QACxByiB,EAASlZ,EAAO,GAAGW,KAAKlK,QACxB,IAAS,EAAA0iB,SAASC,qBACpBH,EAAQ1vB,EAAWqvB,OAAQM,EAAQ3vB,EAAWsvB,OAA0B,IAAlB7Y,EAAO3Y,OAAe2Y,EAAO,GAAGW,UAAO1V,GAAU,GACrG0iB,EAAc,CAFZ,KAAG,MAGX,IAAKA,EACH,MAAM,IAAIzjB,MAAM,uCAElB,IAAI8sB,EAAYiC,EAAOA,EAAO5xB,OAAS,GACnCgyB,EAAO,GACP9vB,EAAWqvB,SACb5B,EAAYiC,EAAO,IAEjB1vB,EAAWqvB,QAAUrvB,EAAWsvB,OAClCQ,EAAO,8BACE9vB,EAAWqvB,SAAWrvB,EAAWsvB,OAC1CQ,EAAO,6BACG9vB,EAAWqvB,QAAUrvB,EAAWsvB,OAC1CQ,EAAO,4BACG9vB,EAAWqvB,QAAWrvB,EAAWsvB,SAC3CQ,EAAO,2BAET,IAAMxmB,EAAO8a,EAAYtmB,OACnBiyB,EAA6B,IAAlBtZ,EAAO3Y,OAAe,gBAAS2Y,EAAO,GAAGW,KAAKtZ,OAAM,MAAO,GACtEkyB,EAA+B,IAAlBvZ,EAAO3Y,OAAe,8BAAgC,GACnEmyB,EAA+B,IAAlBxZ,EAAO3Y,OAAe,yBAA2B,GAC9DsV,EAAe,4CACO9J,EAAI,iCACpBA,EAAI,+BACJA,EAAI,yBACVymB,EAAQ,yFAIRC,EAAU,uEAGMvC,EAAS,qCACnBnkB,EAAO,EAAC,mCACRA,EAAO,EAAC,iCACVwmB,EAAI,wEAIRG,EAAU,sCAGhB,OAAO,EAAP,KACKhL,GAAQ,CACX/c,OAAQ,CAACkP,KAAMgN,EAAavjB,KAAM4V,EAAO,GAAG5V,KAAMwV,YAAa,EAAAuB,YAAYiC,UAC3EnG,UAAW,CACT,CAAClU,KAAM,QAASqB,KAAM,QAASuY,KAAMpZ,EAAWuvB,OAAQ,CAAC/vB,KAAM,OAAQqB,KAAM,QAASuY,KAAMpZ,EAAWwvB,OAEzGpc,aAAY,GAEhB,EAEE+O,EAAiB,SAAC1L,EAAkBzW,GACxC,IAAKyW,EACH,MAAM,IAAI9V,MAAM,oBAElB,GAAIX,EAAWovB,cAAgB3Y,EAAO3Y,OAAS,GAAK2Y,EAAO3Y,OAAS,GAClE,MAAM,IAAI6C,MAAM,uBAElB,IAAKX,EAAWovB,aAAiC,IAAlB3Y,EAAO3Y,OACpC,MAAM,IAAI6C,MAAM,0BAIlB,GAAsB,IAAlB8V,EAAO3Y,QAA0C,IAA1B2Y,EAAO,GAAGW,KAAKtZ,QAA0C,IAA1B2Y,EAAO,GAAGW,KAAKtZ,OACvE,MAAM,IAAI6C,MAAM,4BAGlB,GAAwB,YAAnB8V,EAAO,GAAG5V,MAAyC,YAAnB4V,EAAO,GAAG5V,MACvB,YAAnB4V,EAAO,GAAG5V,MAAyC,YAAnB4V,EAAO,GAAG5V,MACxB,IAAlB4V,EAAO3Y,QAAmC,YAAnB2Y,EAAO,GAAG5V,MAAyC,YAAnB4V,EAAO,GAAG5V,KACpE,MAAM,IAAIF,MAAM,uBAGlB,GAAK8V,EAAO,GAAG5V,OAAS4V,EAAO,GAAG5V,MAA4B,IAAlB4V,EAAO3Y,QAAgB2Y,EAAO,GAAG5V,OAAS4V,EAAO,GAAG5V,KAC9F,MAAM,IAAIF,MAAM,6BAEpB,C,2WCpIA,cAEA,UAGA,UA0Ea,EAAAyoB,oCACT,SAAClH,EAAyCmE,EAAW6J,EAAW9L,EAC/DpkB,GACC,IA3EqC8W,EA2E/BmO,GA3E+BnO,EA2Ec9W,EAAWoiB,SA3EH,CAC/D5iB,KAAM,kBACNuK,WAAY,CAAC,KACb2M,WAAY,CAAC,EAAAkB,YAAYC,QACzBf,UAAS,IAwEL,OAAO,EAAP,KACKmO,GAAQ,CACXhkB,IAAK,WAAM,OAtEf,SAACihB,EAAyC+C,EAA2BoB,EAAW6J,EAC/E9L,EAAgCpkB,GAY/B,IAXA,IAAM2oB,EAAStC,EAAEjP,KACX+Y,EAASD,EAAE9Y,KAGX9N,EAAO8a,EAAYtmB,OACnBmvB,EAAc,CAACkD,EAAO,GAAKA,EAAO,GAAKA,EAAO,GAAI/L,EAAY,GAAKA,EAAY,IAC/EgM,EAAaD,EAAO,GAAKA,EAAO,GAChCzK,GAAgB,IAAAC,qBAChB5d,GAAO,IAAAC,SAAQka,EAAiBtlB,QAAQ6H,QAAQiB,UAAU3G,SAC5DsxB,EAAW,GAENC,EAAM,EAAGA,GAAO,EAAGA,IAC1B,IAAK,IAAIC,EAAM,EAAGA,GAAO,EAAGA,IAC1BF,GAAY,4CACYE,EAAG,uCACVD,EAAG,4CAEArD,EAAY,GAAE,qBAAaA,EAAY,GAAE,0DAC3B7I,EAAY9a,EAAO,GAAE,gBAAQtJ,EAAWuJ,QAAQ,GAAE,+BAC5EvJ,EAAWooB,KAAK,GAAE,2CACLpoB,EAAWkoB,UAAU,GAAE,yBAAiBkI,EAAU,eAAOD,EAAO,GAAE,uCAEzExH,EApBH,GAoBiB,sEACOvE,EAAY9a,EAAO,GAAE,eAAOtJ,EAAWuJ,QAAQ,GAAE,iCAC1EvJ,EAAWooB,KAAK,GAAE,6CACLpoB,EAAWkoB,UAAU,GAAE,6BAAqBkI,EAAU,cAAMD,EAAO,GAAE,yCAE5ExH,EAxBL,GAwBmB,oEAECyH,EAAU,0FAEhB,EAANE,EAAUC,EAAG,+LAWpC,IAAMnd,EAAe,kBACnBsS,EAAa,kNAOT2K,EAAQ,uBACRtoB,EAAKG,OAAM,qCAGjB,OAAO,EAAP,KACK+c,GAAQ,CACX/c,OAAQ,CAACkP,KAAM6V,EAAapsB,KAAMwlB,EAAExlB,KAAMwV,YAAa,EAAAuB,YAAYC,QACnEzE,aAAY,EACZC,SAAS,GAEb,CAQemd,CAA8BtO,EAAkB+C,EAAUoB,EAAG6J,EAAG9L,EAAapkB,EAA7E,GAEf,C,2XCtFJ,cAwEa,EAAA+rB,8BACT,SAAC7J,EAAyCmE,EAAW6J,EAAW9L,EAC/DpkB,GACC,IAvE+B8W,EAuEzBmO,GAvEyBnO,EAuEc9W,EAAWoiB,SAvEH,CACzD5iB,KAAM,SACNuK,WAAY,CAAC,KACb2M,WAAY,CAAC,EAAAkB,YAAYiC,UACzB/C,UAAS,IAoEL,OAAO,EAAP,KACKmO,GAAQ,CACXhkB,IAAK,WAAM,OAlEf,SAACihB,EAAyC+C,EAA2BoB,EAAW6J,EAC/E9L,EAAgCpkB,GAC/B,IAAM2oB,EAAStC,EAAEjP,KACX+Y,EAASD,EAAE9Y,KAEX9N,EAAO8a,EAAYtmB,OACnB2yB,GAAa,IAAAvD,qBAAoBvE,EAAQwH,EAAQ/L,EAAa,GAE9DhR,EAAe,mCACFuV,EAAO,GAAE,qCACTA,EAAO,GAAE,qCACTA,EAAO,GAAE,qCACT3oB,EAAWmoB,YAAY,GAAE,qCACzBnoB,EAAWmoB,YAAY,GAAE,4CAClBnoB,EAAWkoB,UAAU,GAAE,4CACvBloB,EAAWkoB,UAAU,GAAE,0CACzBloB,EAAWuJ,QAAQ,GAAE,0CACrBvJ,EAAWuJ,QAAQ,GAAE,uCACxBvJ,EAAWooB,KAAK,GAAE,uCAClBpoB,EAAWooB,KAAK,GAAE,8JAIV9e,EAAI,2nBAajBqf,EAAO7qB,OAAM,8XAiB7B,OAAO,EAAP,KACKmnB,GAAQ,CACX/c,OAAQ,CAACkP,KAAMqZ,EAAY5vB,KAAMwlB,EAAExlB,KAAMwV,YAAa,EAAAuB,YAAYM,qBAClE9E,aAAY,GAEhB,CAQesd,CAAwBxO,EAAkB+C,EAAUoB,EAAG6J,EAAG9L,EAAapkB,EAAvE,GAEf,EAGS,EAAAktB,oBACT,SAAC7H,EAA+B8C,EAAgC/D,EAAgCrK,GAExF,YAFwF,IAAAA,IAAAA,EAAA,GAExF,CAACqK,EAAY,GAAIA,EAAY,GAAIA,EAAY,GAC5CpmB,KAAKE,KAAKmnB,EAAW,GAAK8C,EAAY,GAAKA,EAAY,GAAKpO,GAD7D,C,gXCxFZ,cAKA,UAOa,EAAAqE,YACT,SAAC8D,EAAyCzL,EAAkBzW,GAI1D,OAHAmiB,EAAe1L,GAGR,CADHyL,EAAiBxK,IAAIiZ,EAAmCzO,EAAkBzL,EAAQzW,GAAayW,GAErG,EAES,EAAA4H,2BACT,SAAC3O,GACC,IAAMkT,EAAQlT,EAAK1P,WAAWe,SAAS,SACjC6vB,EAAOlhB,EAAK1P,WAAWqB,UAAU,QACvC,OAAO,IAAA3B,6BAA4B,CAACkjB,MAAK,EAAEgO,KAAI,GACjD,EAEJ,IAAMC,EAA6B,CACjCrxB,KAAM,cACNuK,WAAY,CAAC,KACb2M,WAAY,CAAC,EAAAkB,YAAYiC,WAyBrB8W,EACF,SAACvyB,EAAgCqY,EAAkBzW,GACjD,IAAMilB,EAAW,EAAH,KAAO4L,GAA0B,CAAE/Z,UAAW9W,EAAWoiB,WACvE,OAAO,EAAP,KAAW6C,GAAQ,CAAEhkB,IAAK,WAAM,OAxBlC,SAAC7C,EAAgC6mB,EAA2BxO,EAAkBzW,GAExE,IAAMokB,EAAc3N,EAAO,GAAGW,KAAKlK,QAC7B5D,EAAO8a,EAAYtmB,OACnBgzB,EAAgBC,EAAoB/wB,EAAW4wB,KAAK9yB,QACpDsV,EAAe,kBACvB0d,EAAa,6CACaxnB,EAAI,kFAG5B,OAAO,EAAP,KACK2b,GAAQ,CACX/c,OAAQ,CAACkP,KAAMgN,EAAavjB,KAAM4V,EAAO,GAAG5V,KAAMwV,YAAa,EAAAuB,YAAYiC,UAC3EnG,UAAW,CACT,CAAClU,KAAM,OAAQqB,KAAM,QAASsT,YAAanU,EAAW4wB,KAAK9yB,OAAQsb,KAAMpZ,EAAW4wB,MACpF,CAACpxB,KAAM,QAASqB,KAAM,QAASuY,KAAMpZ,EAAW4iB,QAElDxP,aAAY,GAEhB,CAK8B4d,CAA6B5yB,EAAS6mB,EAAUxO,EAAQzW,EAAxD,GAClC,EAEE+wB,EAAsB,SAACE,GAE3B,IADA,IAAM1J,EAAsB,CAAC,mCAA4B0J,EAAW,sBAC3DnuB,EAAI,EAAGA,EAAImuB,IAAenuB,EACvB,IAANA,EACFykB,EAAUrjB,KACN,KACA,yBAAkBpB,EAAC,2BAAmBA,EAAC,SAClCA,IAAMmuB,EAAc,EAC7B1J,EAAUrjB,KACN,KACA,6BAAsBpB,EAAC,SAE3BykB,EAAUrjB,KACN,KACA,8BAAuBpB,EAAC,2BAAmBA,EAAC,SAMpD,OAHAykB,EAAUrjB,KACN,OAEGqjB,EAAU9nB,KAAK,KACxB,EAEM0iB,EAAiB,SAAC1L,GACtB,IAAKA,GAA4B,IAAlBA,EAAO3Y,OACpB,MAAM,IAAI6C,MAAM,iCAElB,GAA8B,IAA1B8V,EAAO,GAAGW,KAAKtZ,OACjB,MAAM,IAAI6C,MAAM,wBAElB,GAAuB,YAAnB8V,EAAO,GAAG5V,MAAyC,YAAnB4V,EAAO,GAAG5V,KAC5C,MAAM,IAAIF,MAAM,sBAEpB,C,irBC3FA,cAEA,UAEa,EAAA2d,sBACT,SAAC4D,EAAyCzL,EAAkB6L,GAC1DH,EAAe1L,GAEf,IAAMya,EAAkBhP,EAAiBxK,IAAIyZ,EAAuC1a,EAAO,IAAKA,GAIhG,MAAO,CAHQyL,EAAiBxK,IAC5B0Z,EAAqClP,EAAkBzL,EAAO,GAAI6L,EAAS4O,EAAgB9Z,MAC3F,CAACX,EAAO,GAAIya,EAAiBza,EAAO,GAAIA,EAAO,KAErD,EAES,EAAA8H,qCAAuE,SAAC7O,GACjF,OAAAA,EAAK1P,WAAWe,SAAS,UAAW,KAApC,EAEJ,IAAMswB,EAAiC,CACrC7xB,KAAM,wCACNuK,WAAY,CAAC,KACb2M,WAAY,CAAC,EAAAkB,YAAYiC,WA8CrBsX,EAAyC,SAACzX,GAAqC,cAChF2X,GAA8B,CACjCpwB,IAAK,WAAM,OA7C4B,SAACgkB,EAA2BvL,GACnE,IAAM4X,EAAQ5X,EAAMtC,KAAKlK,QACnB4Y,EAAUwL,EAAM,GAChBC,EAAcD,EAAM,GAAKA,EAAM,GAC/BlN,EAAc,CAACkN,EAAM,GAAIxL,GAEzB1S,EAAe,8MAOIke,EAAM,GAAE,uEAENA,EAAM,GAAE,8JAMDC,EAAW,6DAEpBD,EAAM,GAAE,uEAENA,EAAM,GAAE,kMAORC,EAAW,oCAItC,OAAO,EAAP,KACKtM,GAAQ,CACX/c,OAAQ,CAACkP,KAAMgN,EAAavjB,KAAM6Y,EAAM7Y,KAAMwV,YAAa,EAAAuB,YAAYM,qBACvE9E,aAAY,GAEhB,CAIaoe,CAAiCH,EAAgC3X,EAAjE,GAFwE,EAK/E+X,EAA+B,CACnCjyB,KAAM,sCACNuK,WAAY,CAAC,IAAK,kBAAmB,QAAS,KAC9C2M,WAAY,CAAC,EAAAkB,YAAYiC,SAAU,EAAAjC,YAAYM,oBAAqB,EAAAN,YAAYiC,SAAU,EAAAjC,YAAYiC,WAwClGuX,EACF,SAAClP,EAAyCxI,EAAe4I,EAAiBoP,GAEpE,IAAMzM,EAAW,EAAH,KAAOwM,GAA4B,CAAE3a,UAAW,UAAGwL,KACjE,OAAO,EAAP,KACK2C,GAAQ,CACXhkB,IAAK,WAAM,OA1CnB,SAACihB,EAAyC+C,EAA2BvL,EAAe4I,EACnFoP,GACC,IAAM3pB,GAAO,IAAAC,SAAQka,EAAiBtlB,QAAQ6H,QAAQiB,UAAU3G,SAC1D,IACFmjB,EAAiB9L,+BAA+Bsb,EAAsB,EAAA9Z,YAAYM,qBAAoB,GADnGyZ,EAAY,KAAEC,EAAa,KAE5B,IAAgD,CAACD,EAAe,EAAGC,GAAc,GAAhFC,EAAoB,KAAEC,EAAqB,KAC5C1e,EAAe,iKAGoBye,EAAoB,aAAKC,EAAqB,8BAC5E/pB,EAAK8B,UAAS,4fAkBzB,OAAO,EAAP,KACKob,GAAQ,CACX/c,OAAQ,CAACkP,KAAMsC,EAAMtC,KAAMvW,KAAM6Y,EAAM7Y,KAAMwV,YAAa,EAAAuB,YAAYiC,UACtEnG,UAAW,CAAC,CAAClU,KAAM,UAAWqB,KAAM,QAASuY,KAAMkJ,IACnDlP,aAAY,GAEhB,CAQmB2e,CAA+B7P,EAAkB+C,EAAUvL,EAAO4I,EAASoP,EAA3E,GAEf,EAEFvP,EAAiB,SAAC1L,GACtB,IAAKA,GAA4B,IAAlBA,EAAO3Y,OACpB,MAAM,IAAI6C,MAAM,4CAGlB,IAAMgiB,EAAIlM,EAAO,GACXmM,EAAQnM,EAAO,GACfoM,EAAIpM,EAAO,GAIjB,GAAIkM,EAAEvL,KAAKtZ,OAAS,GAA2B,IAAtB8kB,EAAMxL,KAAKtZ,QAAkC,IAAlB+kB,EAAEzL,KAAKtZ,OACzD,MAAM,IAAI6C,MAAM,wBAElB,GAAIiiB,EAAMxL,KAAK,KAAOuL,EAAEvL,KAAK,IAAMyL,EAAEzL,KAAK,KAAOuL,EAAEvL,KAAK,GACtD,MAAM,IAAIzW,MAAM,gCAElB,GAAgB,YAAXgiB,EAAE9hB,MAAiC,YAAX8hB,EAAE9hB,MAAuC,YAAf+hB,EAAM/hB,MAAqC,YAAf+hB,EAAM/hB,MACzE,YAAXgiB,EAAEhiB,MAAiC,YAAXgiB,EAAEhiB,KAC7B,MAAM,IAAIF,MAAM,uBAElB,GAA8B,IAA1B8V,EAAO,GAAGW,KAAKtZ,OACjB,MAAM,IAAI6C,MAAM,gCAEpB,C,6XCxJA,cAKA,UASa,EAAAge,IACT,SAACuD,EAAyCzL,EAAkBzW,GAO1D,OANAmiB,EAAe1L,GAMR,CAACyL,EAAiBxK,IAAIsa,EAA2Bvb,EAAQzW,GAAayW,GAE/E,EAES,EAAAmI,mBAA4D,SAAClP,GACxE,IAAM6f,EAAQ7f,EAAK1P,WAAWe,SAAS,QAAS,MAC1CyuB,EAAO9f,EAAK1P,WAAWe,SAAS,OAAQ,KACxC6vB,EAAOlhB,EAAK1P,WAAWe,SAAS,OAAQ,GACxCL,EAAOgP,EAAK1P,WAAWkB,OAAO,QAEpC,OAAO,IAAAxB,6BAA4B,CAAC6vB,MAAK,EAAEC,KAAI,EAAEoB,KAAI,EAAElwB,KAAI,GAC7D,EAEA,IAAMuxB,EAAqB,CACzBzyB,KAAM,MACNuK,WAAY,CAAC,KACb2M,WAAY,CAAC,EAAAkB,YAAYiC,WAoC3B,SAAgBmY,EAA2Bvb,EAAkBzW,GAC3D,OAAO,EAAP,KAAWiyB,GAAkB,CAAEnb,UAAW9W,EAAWoiB,SAAUnhB,IAAK,WAAM,OAlC5E,SAA8BwV,EAAkBzW,GAC9C,IAAMkyB,EAAIzb,EAAO,GAAGW,KAAK,GACnB9N,EAAOmN,EAAO,GAAGW,KAAKtZ,OACtBonB,GAAQlnB,KAAK0f,OAAO1d,EAAWU,KAAO,GAAK,GAC3CkkB,EAAK5mB,KAAKE,MAAM8B,EAAWU,KAAO,GAAK,GACvC6uB,EAAQ,gBAASvvB,EAAWuvB,MAAK,qBAAavvB,EAAWU,KAAI,KAC7DkwB,EAAO,gBAAS5wB,EAAW4wB,KAAI,KAC/BpB,EAAO,gBAASxvB,EAAWwvB,KAAI,KAE/Bpc,EAAe,0CACS9J,EAAI,sIAKb4b,EAAI,kBAAUN,EAAE,6EAETsN,EAAC,oKAMNtB,EAAI,cAAMrB,EAAK,0BAAkBC,EAAI,aAE5D,OAAO,EAAP,KACKyC,GAAkB,CACrBnb,UAAW9W,EAAWoiB,SACtBla,OAAQ,CAACkP,KAAMX,EAAO,GAAGW,KAAMvW,KAAM4V,EAAO,GAAG5V,KAAMwV,YAAa,EAAAuB,YAAYiC,UAC9EzG,aAAY,GAEhB,CAG4E+e,CAAqB1b,EAAQzW,EAA7B,GAC5E,CAFA,+BAIA,IAAMmiB,EAAiB,SAAC1L,GACtB,IAAKA,GAA4B,IAAlBA,EAAO3Y,OACpB,MAAM,IAAI6C,MAAM,yBAElB,GAA8B,IAA1B8V,EAAO,GAAGW,KAAKtZ,OACjB,MAAM,IAAI6C,MAAM,2DAElB,GAAuB,YAAnB8V,EAAO,GAAG5V,KACZ,MAAM,IAAIF,MAAM,6BAEpB,C,2WCvFA,cACA,UAEA,UACA,SAEA,UACA,UAyEa,EAAAsoB,oCACT,SAAC/G,EAAyCzL,EACzCqU,GACC,IA1EqCnD,EAAkB7Q,EA0EjDmO,GA1E+B0C,EA0EclR,EAAO3Y,OAAS,EA1EZgZ,EA0EegU,EAAqBiC,mBA1Ed,CACjFvtB,KAAM,kBACNuK,WAAY4d,EAAU,CAAC,IAAK,IAAK,QAAU,CAAC,IAAK,KACjDjR,WAAYiR,EAAU,CAAC,EAAA/P,YAAYC,OAAQ,EAAAD,YAAYC,OAAQ,EAAAD,YAAYC,QACrD,CAAC,EAAAD,YAAYC,OAAQ,EAAAD,YAAYC,QACvDf,UAAS,IAsEL,OAAO,EAAP,KACKmO,GAAQ,CACXhkB,IAAK,WAAM,OApEf,SAACihB,EAAyC+C,EAA2BxO,EACpEqU,GACC,IAAMnD,EAAUlR,EAAO3Y,OAAS,EAC1B8pB,EAAcD,EAAU,+BAAiC,GACzD+H,EAASjZ,EAAO,GAAGW,KACnBuY,EAASlZ,EAAO,GAAGW,KACnBgN,EAAc,EAAAlZ,cAAcqZ,UAAUmL,EAAQC,GAAQ,GACtDzL,GAAe,EAAAvY,UAAUwY,SAAS1N,EAAO,GAAGW,KAAMX,EAAO,GAAGW,MAElE,IAAKgN,EACH,MAAM,IAAIzjB,MAAM,yCAElB,IAAM8sB,EAAYiC,EAAOA,EAAO5xB,OAAS,GACnCs0B,EAAiBp0B,KAAKE,KAAKuvB,EAAY,GACvCjJ,EAAQkL,EAAO5xB,OACf2mB,EAAQkL,EAAO7xB,OAEfiK,GAAO,IAAAC,SAAQka,EAAiBtlB,QAAQ6H,QAAQiB,UAAU3G,SAC1DszB,GAAiB,IAAAjnB,mBAAkBgZ,EAAYtmB,QAC/CkN,EAAUoZ,EAAYtmB,OACtBw0B,GAAgB,IAAA/mB,iBAChB,GAAwC,IAAA+c,sBAAqBwC,GAA5DvC,EAAkB,qBAAEC,EAAe,kBAEpC+J,EACF5K,EAAU,WAAG,IAAA6K,kBAAiBH,EAAgBC,EAAe7b,EAAO,GAAGW,KAAMgN,GAAa,IAAU,GAElGqO,EACFvO,EAAc,UA6CxB,SACImO,EAAwBC,EAAkC7b,EAAkBtP,GAC9E,IAAIurB,EAAyB,GACzBC,EAAyB,GAEvBC,EAAWnc,EAAO,GAAGW,KACrByb,EAAWpc,EAAO,GAAGW,KAErB0b,EAAUF,EAAS90B,OACnBi1B,EAAUF,EAAS/0B,OAEnBkN,EAAU7D,EAASrJ,OACnBk1B,EAAYhoB,EAAU8nB,EACtBG,EAAYjoB,EAAU+nB,GAE5BL,EAAyBE,EAASrzB,KAAI,SAACiE,EAAGV,GAAM,uBAAUwvB,EAAcxvB,EAAIkwB,GAA5B,KACzBF,EAAU,GAAK,MACtCJ,EAAuBjzB,KAAK,OAC5BkzB,EAAyBE,EAAStzB,KAAI,SAACiE,EAAGV,GAAM,uBAAUwvB,EAAcxvB,EAAImwB,GAA5B,KACzBF,EAAU,GAAK,MACtCJ,EAAuBlzB,KAAK,MAE5B,IAAMyzB,EAAiB,EAAAhoB,cAAcC,iBAAiBynB,EAAUzrB,GAC1DgsB,EAAiB,EAAAjoB,cAAcC,iBAAiB0nB,EAAU1rB,GAE1DisB,EAAiBF,EAAe3zB,KAAI,SAAAiM,GAAK,uBAAU8mB,EAAc9mB,EAAIwnB,GAAU,QAAtC,IAA+CvzB,KAAK,MAC7F4zB,EAAiBF,EAAe5zB,KAAI,SAAAiM,GAAK,uBAAU8mB,EAAc9mB,EAAIynB,GAAU,QAAtC,IAA+CxzB,KAAK,MAC7F6zB,EAAiB,+BAAwBhB,EAActnB,EAAU,GAAE,uBAChEsnB,EAActnB,EAAU,GAAE,qBAAasnB,EAActnB,EAAU,GAAE,uBACjEsnB,EAActnB,EAAU,GAAE,eAmBnC,MAjBoC,mDAElCqnB,EAAc,2CACdiB,EAAc,eACdF,EAAc,uCACUV,EAAsB,kFAK9CL,EAAc,2CACdiB,EAAc,eACdD,EAAc,uCACUV,EAAsB,+BAKlD,CA9F2BY,CAAyBlB,EAAgBC,EAAe7b,EAAQ2N,IAAiB,GAEhGoP,EAA2BtP,EAAc,2BAA6B,eA8FlF,SAAcoO,EAAyBhpB,GAErC,IADA,IAAImqB,EAAM,GACD3wB,EAAI,EAAGA,EAAIwG,EAAO,EAAGxG,IAC5B2wB,GAAO,aAAMnB,EAAcxvB,GAAE,MAI/B,OAFA2wB,GAAO,aAAMnB,EAAchpB,EAAO,GAAE,MAChC,MAEN,CAtG0FoqB,CAAKpB,EAAe9N,GAAM,KACxGmP,EAA2BzP,EAAc,2BAA6B,eAuGlF,SAAcoO,EAAyBhpB,GAErC,IADA,IAAImqB,EAAM,GACD3wB,EAAI,EAAGA,EAAIwG,EAAO,EAAGxG,IAC5B2wB,GAAO,aAAMnB,EAAcxvB,GAAE,MAI/B,OAFA2wB,EAAO,QACH,aAAMnB,EAAchpB,EAAO,GAEjC,CA/G0FsqB,CAAKtB,EAAe7N,GAAM,KACxGoP,EAAyB3P,EAAc,GAAK,UAAGmO,EAAc,gEACzBC,EAActnB,EAAU,GAAE,gBAAQsnB,EAActnB,EAAU,GAAE,4BAC7FsnB,EAActnB,EAAU,GAAE,gBAAQsnB,EAActnB,EAAU,GAAE,uBAE/DoI,EAAe,wBACbqf,EAAiC,yBACjCF,EAAuB,yBACvBhK,EAAkB,sDAEhBsL,EAAsB,sFAGFzB,EAAc,8CACvBoB,EAAwB,uCACxBG,EAAwB,yIAKnC/L,EAAW,2BACXY,EAAe,2BACfzgB,EAAKG,OAAM,4BAErB,OAAO,EAAP,KACK+c,GAAQ,CACX/c,OAAQ,CAACkP,KAAMgN,EAAavjB,KAAM4V,EAAO,GAAG5V,KAAMwV,YAAa,EAAAuB,YAAYC,QAC3EzE,aAAY,EACZC,SAAS,GAEb,CAQeygB,CAA8B5R,EAAkB+C,EAAUxO,EAAQqU,EAAlE,GAEf,C,yZCtFJ,cAEA,UACA,SAEA,UACA,UAEa,EAAAhM,OACT,SAACoD,EAAyCzL,EAAkBzW,GAG1D,OAFAmiB,EAAe1L,GAEXyL,EAAiBtlB,QAAQ4I,KACpB,CAAC0c,EAAiBxK,KACrB,IAAAuR,qCAAoC/G,EAAkBzL,EAAQzW,GAAayW,IAExE,CAACyL,EAAiBxK,IAAImU,EAA8BpV,EAAQzW,GAAayW,GAEpF,EAES,EAAAsI,sBACT,SAACrP,GAAmD,WAAAqb,mCAAkCrb,EAAK1P,WAAvC,EAExD,IAAM+zB,EAA8B,SAACpM,EAAkB7Q,GAAsB,OAC3EtX,KAAM,SACNuK,WAAY4d,EAAU,CAAC,IAAK,IAAK,QAAU,CAAC,IAAK,KACjDjR,WAAYiR,EAAU,CAAC,EAAA/P,YAAYiC,SAAU,EAAAjC,YAAYiC,SAAU,EAAAjC,YAAYiC,UACzD,CAAC,EAAAjC,YAAYiC,SAAU,EAAAjC,YAAYiC,UACzD/C,UAAS,EALkE,EAuD7E,SAAgB+U,EACZpV,EAAkBqU,GACpB,IAAM7F,EAAW8O,EAA4Btd,EAAO3Y,OAAS,EAAGgtB,EAAqBiC,oBACrF,OAAO,EAAP,KAAW9H,GAAQ,CAAEhkB,IAAK,WAAM,OAlDlC,SACIgkB,EAA2BxO,EAAkBqU,GAC/C,IAAM4E,EAASjZ,EAAO,GAAGW,KACnBuY,EAASlZ,EAAO,GAAGW,KACnBgN,EAAc,EAAAlZ,cAAcqZ,UAAUmL,EAAQC,GAAQ,GAC5D,IAAKvL,EACH,MAAM,IAAIzjB,MAAM,yCAElB,IAAM0xB,GAAiB,IAAAjnB,mBAAkBgZ,EAAYtmB,QAC/Cw0B,GAAgB,IAAA/mB,iBAChB,GAAwC,IAAA+c,sBAAqBwC,GAA5DvC,EAAkB,qBAAEC,EAAe,kBAEpCb,EAAUlR,EAAO3Y,OAAS,EAC1B8pB,EAAcD,EAAU,+BAAiC,GACzD4K,EACF5K,EAAU,UAAG6K,EAAiBH,EAAgBC,EAAe7b,EAAO,GAAGW,KAAMgN,GAAa,IAAW,GAEnG9a,EAAO8a,EAAYtmB,OACnBk2B,EAAQtE,EAAO5xB,OACfm2B,EAAQtE,EAAO7xB,OACf2vB,EAAYiC,EAAOA,EAAO5xB,OAAS,GACnCsV,EAAe,gBACjBmV,EAAkB,iBAClBgK,EAAuB,2CACGjpB,EAAI,+BACpB0qB,EAAK,6BACLC,EAAK,qJAKKxG,EAAS,mCACnBuG,EAAQ,EAAC,iCACTC,EAAQ,EAAC,2EAGfrM,EAAW,qBACXY,EAAe,kCAGvB,OAAO,EAAP,KACKvD,GAAQ,CACX/c,OAAQ,CAACkP,KAAMgN,EAAavjB,KAAM4V,EAAO,GAAG5V,KAAMwV,YAAa,EAAAuB,YAAYiC,UAC3EzG,aAAY,GAEhB,CAKkC8gB,CAAwBjP,EAAUxO,EAAQqU,EAA1C,GAClC,CAJA,kCAMA,IAAM3I,EAAiB,SAAC1L,GACtB,IAAKA,GAA4B,IAAlBA,EAAO3Y,OACpB,MAAM,IAAI6C,MAAM,6BAGlB,GAAI8V,EAAO,GAAGW,KAAKX,EAAO,GAAGW,KAAKtZ,OAAS,KAAO2Y,EAAO,GAAGW,KAAKX,EAAO,GAAGW,KAAKtZ,OAAS,GACvF,MAAM,IAAI6C,MAAM,oCAGlB,GAAwB,YAAnB8V,EAAO,GAAG5V,MAAyC,YAAnB4V,EAAO,GAAG5V,MACvB,YAAnB4V,EAAO,GAAG5V,MAAyC,YAAnB4V,EAAO,GAAG5V,KAC7C,MAAM,IAAIF,MAAM,+BAGlB,GAAI8V,EAAO,GAAG5V,OAAS4V,EAAO,GAAG5V,KAC/B,MAAM,IAAIF,MAAM,4BAEpB,EAEA,SAAgB6xB,EACZH,EAAwBC,EAAkC1nB,EAA4BzD,EACtFH,GACF,IAAIyE,EACEV,EAASH,EAAQ9M,OACjBkN,EAAU7D,EAASrJ,OACnBuN,EAAWL,EAAUD,EAEzBU,EADET,EAAU,GAAKD,EAAS,EACF,SAEAH,EAAQrL,KAAI,SAACiE,EAAGV,GAAM,uBAAUwvB,EAAcxvB,EAAIuI,GAA5B,IAAyC5L,KAAK,MAE9F,IACMkL,EADgB,EAAAO,cAAcC,iBAAiBP,EAASzD,GAC1B5H,KAAI,SAAAiM,GAAK,uBAAU8mB,EAAc9mB,EAAIH,GAAS,QAArC,IAA8C5L,KAAK,MAG5FyI,EAAS,uCAkBb,OAnBiC,IADlB,EAAAyD,UAAUjL,KAAKkK,KAI5B1C,EAAS,uBAEoBlB,EAAW,yCAExCqrB,EAAc,2CACd1nB,EAAa,0CACcc,EAAqB,wBACzCvD,EAAM,QAE2B,0CAExCmqB,EAAc,2CACd1nB,EAAa,mCAKjB,CAnCA,oB,gWCzGA,cAEA,UACA,SAEA,UAEMwpB,EAAsB,CAC1B30B,KAAM,OACNuK,WAAY,CAAC,KACb2M,WAAY,CAAC,EAAAkB,YAAYwc,mBA+Cd,EAAA7Y,4BAA8B,SAACnd,EAAgCsb,GACxE,cAAKya,GAAmB,CAAElzB,IAAK,WAAM,OA7CX,SAAC7C,EAAgCsb,GAC7D,IAuGgBpQ,EAAc8N,EAAgBvL,EAAcC,EAvGtD/D,GAAO,IAAAC,SAAQ5J,EAAQxB,QAAQ6H,QAAQiB,UAAU3G,SACjDsmB,EAAa3L,EAAMtC,KAEnBid,EAAYhP,EAAWvnB,OAEvB8W,EAAa8E,EAAMtC,KAAKtZ,OAExBu0B,GAAiB,IAAAjnB,mBAAkBwJ,GACnCmF,GAAW,IAAAyL,aAAY,KAAM5Q,GAC7B0f,GA8FUhrB,EA9FOsL,EA8FOwC,EA9FK2C,EA8FWlO,EA9FDwZ,EAAWA,EAAWvnB,OAAS,GA8FhBgO,EA9FoBuZ,EAAWA,EAAWvnB,OAAS,GA+FlG,IAATwL,GAAuB,IAATA,EACT,GAIO,wBACJ8N,EAAK9N,EAAO,GAAE,0BACd8N,EAAK9N,EAAO,GAAE,4BACZ8N,EAAK9N,EAAO,GAAE,gCACd8N,EAAK9N,EAAO,GAAE,0CACJwC,EAAI,sCACJD,EAAI,YAhGtB0oB,EA8BR,SAAiCjrB,EAAcZ,EAA0B0O,GACvE,GAAa,IAAT9N,EACF,MAAO,QAET,GAAa,IAATA,EACF,MAAO,eAAQZ,EAAM,IAIvB,IADA,IAAI8rB,EAAO,GACF1xB,EAAIwG,EAAO,EAAGxG,EAAIwG,EAAMxG,IAC/B0xB,GAAQ,UAAGpd,EAAKtU,GAAE,eAAO4F,EAAM5F,EAAIwG,EAAO,IACtCxG,EAAIwG,EAAO,IACbkrB,GAAQ,MAIZ,OAAOA,CACT,CA/C+BC,CAAwB7f,EAPnC,IAAdyf,EACgB,CAAC,EAAG,GACC,IAAdA,EACS,CAAChP,EAAW,GAAI,GAEhB,CAACA,EAAWzQ,EAAa,GAAIyQ,EAAWzQ,EAAa,IAESmF,GAC5E7R,EAmDR,SAAmBQ,EAA0B0O,GAC3C,IAAM9N,EAAOZ,EAAM5K,OAEnB,GAAa,IAATwL,EACF,MAAO,kBAGT,GAAa,IAATA,EACF,MAAO,2CACaZ,EAAM,GAAE,2CAI9B,IAIIgsB,EAAI,GACR,GAAIprB,EAAO,EACT,IAAK,IAAIxG,EAAI,EAAGA,EAAIwG,EAAO,IAAKxG,EAC9B4xB,GAAQ,UAAGtd,EAAKtU,GAAE,KAGtB,MAAO,eAAQ4xB,GAAC,OAVA,OAUU,2CACEA,GAAC,OATb,SASuB,2CACXA,GAAC,OAXb,SAWuB,oDACFA,GAAC,OAVtB,WAUgC,IAClD,CA9EiBC,CAAUtP,EAAYtL,GAE/B3G,EAAe,6CAEXif,EAAc,oDAEXkC,EAAoB,4BACrBxsB,EAAKG,OAAM,wDAEXosB,EAAK,2BAELvsB,EAAKG,OAAM,mBAAWA,EAAM,sCAIxC,OAAO,EAAP,KACKisB,GAAmB,CACtB9gB,SAAS,EACTnL,OAAQ,CAACkP,KAAMsC,EAAMtC,KAAMvW,KAAM6Y,EAAM7Y,KAAMwV,YAAa,EAAAuB,YAAYC,QACtEzE,aAAY,GAEhB,CAGyCwhB,CAAsBx2B,EAASsb,EAA/B,GAArC,C,+IC3DJ,aAEA,SAAgBmb,EAAer1B,EAAc8J,GAC3C,OAAO,IAAAiC,eAAcjC,GAAM/J,KAAI,SAAAiM,GAAK,gBAAGhM,EAAI,YAAIgM,EAAX,GACtC,CAFA,mBAIA,uBAA4BhM,EAAc8J,GACxC,OAAa,IAATA,EACK,CAAC9J,GAEHq1B,EAAer1B,EAAM8J,EAC9B,EAEA,+BACE,MAAO,mXAaT,C,krBC3BA,cAIA,UACA,UAEA,UAQMwrB,EAAqB,CACzBt1B,KAAM,MACNuK,WAAY,CAAC,KACb2M,WAAY,CAAC,EAAAkB,YAAYiC,WAGd,EAAAwF,MACT,SAAC6C,EAAyCzL,EAAkBzW,GAS1D,OARA+0B,EAAiBte,GAQV,CAPQyL,EAAiBxK,IAAI,EAAD,KAE1Bod,GAAkB,CACrBhe,UAAW9W,EAAWoiB,SACtBnhB,IAAK,WAAM,OAAA+zB,EAAqB9S,EAAkBzL,EAAO,GAAIzW,EAAlD,IAEbyW,GAEN,EAES,EAAA6I,qBAA8D,SAAC5P,GAC1E,IAAM6c,EAAO7c,EAAK1P,WAAWmB,UAAU,OAAQ,YACzCrC,EAAQ4Q,EAAK1P,WAAWe,SAAS,QAAS,GAC1CqnB,EAAO1Y,EAAK1P,WAAWsB,QAAQ,QACrC,OAAO,IAAA5B,6BAA4B,CAAC6sB,KAAI,EAAEztB,MAAK,EAAEspB,KAAI,GACvD,EAEa,EAAA7I,OACT,SAAC2C,EAAyCzL,EAAkB8V,GAC1D0I,EAAkBxe,GAClB,IAAMye,EAAaC,EAAgCjT,EAAkBzL,EAAQ8V,GAC7E,OAAO,IAAAlN,OAAM6C,EAAkB,CAACzL,EAAO,IAAKye,EAC9C,EAES,EAAA1V,sBAAwD,SAAC9P,GAClE,OAAAA,EAAK1P,WAAWmB,UAAU,OAAQ,WAAlC,EAEJ,IAAMg0B,EACF,SAACjT,EAAyCzL,EAAkB8V,GAC1D,IAAKrK,EAAiBtlB,QAAQoe,cAAcvE,EAAO,GAAGuB,SACjDvB,EAAO3Y,QAAU,IAAMokB,EAAiBtlB,QAAQoe,cAAcvE,EAAO,GAAGuB,QAC3E,MAAM,IAAIrX,MAAM,0CAGlB,IAAMynB,EAAOvlB,MAAMqiB,KAAKzO,EAAO,GAAG2e,aAC5Bt2B,EAAS2X,EAAO3Y,QAAU,EAAK2Y,EAAO,GAAG4e,UAAU,GAAK,EAE9D,OAAO,IAAA31B,6BAA4B,CAAC6sB,KAAI,EAAEnE,KAAI,EAAEtpB,MAAK,GACvD,EAEEk2B,EACF,SAAC9S,EAAyCxI,EAAe1Z,GACvD,IAAMokB,EAAc,EAAAzY,UAAU2pB,SAAS5b,EAAMtC,KAAKlK,QAASlN,EAAWooB,MAChE9e,EAAO8a,EAAYtmB,OACnBy3B,EAAcC,EAAetT,EAAkBxI,EAAO1Z,GACtDoT,EAAe,kBACnBmiB,EAAW,qCACOjsB,EAAI,0DAGxB,MAAO,CACL9J,KAAM,MACNuK,WAAY,CAAC,KACb2M,WAAY,CAAC,EAAAkB,YAAYiC,UACzB3R,OAAQ,CAACkP,KAAMgN,EAAavjB,KAAM6Y,EAAM7Y,KAAMwV,YAAa,EAAAuB,YAAYiC,UACvEzG,aAAY,EAEhB,EAEE2hB,EAAmB,SAACte,GACxB,IAAKA,GAA4B,IAAlBA,EAAO3Y,OACpB,MAAM,IAAI6C,MAAM,wBAElB,GAAuB,YAAnB8V,EAAO,GAAG5V,MAAyC,YAAnB4V,EAAO,GAAG5V,KAC5C,MAAM,IAAIF,MAAM,sBAEpB,EAEMs0B,EAAoB,SAACxe,GACzB,IAAKA,GAA6B,IAAlBA,EAAO3Y,QAAkC,IAAlB2Y,EAAO3Y,OAC5C,MAAM,IAAI6C,MAAM,8BAElB,GAAuB,UAAnB8V,EAAO,GAAG5V,KACZ,MAAM,IAAIF,MAAM,uBAElB,GAAI8V,EAAO3Y,QAAU,GAAwB,WAAnB2Y,EAAO,GAAG5V,KAClC,MAAM,IAAIF,MAAM,sBAEpB,EAEM60B,EAAiB,SAACtT,EAAyCxI,EAAe1Z,GAC9E,IAAM+H,GAAO,IAAAC,SAAQka,EAAiBtlB,QAAQ6H,QAAQiB,UAAU3G,SAC1D,IAAkBmjB,EAAiB9L,+BAA+BsD,EAAMtC,KAAM,EAAAQ,YAAYiC,UAAS,GAAlGvS,EAAK,KAAEC,EAAM,KACdgC,EAAU,EAAAoC,UAAUqO,eAAeN,EAAMtC,MAE/C,OAAQpX,EAAWusB,MACjB,IAAK,WACH,OAAOkJ,EAAe1tB,EAAM2R,EAAMtC,KAAM7N,EAASjC,EAAOC,EAAQvH,EAAWooB,KAAMpoB,EAAWlB,OAC9F,IAAK,UACH,OAAO42B,EAAc3tB,EAAM2R,EAAMtC,KAAM7N,EAASjC,EAAOC,EAAQvH,EAAWooB,MAC5E,IAAK,OACH,OAAOuN,EAAW5tB,EAAM2R,EAAMtC,KAAM7N,EAASjC,EAAOC,EAAQvH,EAAWooB,MACzE,QACE,MAAM,IAAIznB,MAAM,gBAEtB,EAEM80B,EACF,SAAC1tB,EAAYW,EAA0Ba,EAA4BjC,EAAeC,EAAgB6gB,EACjGtpB,GAGC,IAFA,IAAMwK,EAAOZ,EAAM5K,OACfgX,EAAQ,GACHhS,EAAIwG,EAAO,EAAGxG,GAAK,IAAKA,EAC/BgS,GAAS,0BACDhS,EAAC,eAAOslB,EAAKtlB,GAAE,qEAEZ4F,EAAM5F,GAAE,qDACHyG,EAAQzG,GAAE,eAG5B,MAAO,mCACYwG,EAAI,sDACUxK,EAAK,oEAGlCgW,EAAK,0DACgCxN,EAAK,aAAKC,EAAM,qDACvBQ,EAAK8B,UAAS,wDAIlD,EAEE6rB,EACF,SAAC3tB,EAAYW,EAA0Ba,EAA4BjC,EAAeC,EAAgB6gB,GAK5F,IAHA,IAAM9e,EAAOZ,EAAM5K,OAEfgX,EAAQ,GACHhS,EAAIwG,EAAO,EAAGxG,GAAK,IAAKA,EAC/BgS,GAAS,0BACLhS,EAAC,eAAOslB,EAAKtlB,GAAE,qFAGD,GAAK4F,EAAM5F,GAAK,GAAE,sFAE5B4F,EAAM5F,GAAE,kEAEJyG,EAAQzG,GAAE,eAGxB,MAAO,mCACQwG,EAAI,sEAGnBwL,EAAK,0DACgCxN,EAAK,aAAKC,EAAM,qDACvBQ,EAAK8B,UAAS,wDAI9C,EAEF8rB,EACF,SAAC5tB,EAAYW,EAA0Ba,EAA4BjC,EAAeC,EAAgB6gB,GAK5F,IAHA,IAAM9e,EAAOZ,EAAM5K,OAEfgX,EAAQ,GACHhS,EAAIwG,EAAO,EAAGxG,GAAK,IAAKA,EAC/BgS,GAAS,0BACLhS,EAAC,eAAOslB,EAAKtlB,GAAE,2DAEZ4F,EAAM5F,GAAE,iBAAS4F,EAAM5F,GAAK,EAAC,oCACxByG,EAAQzG,GAAE,aAGxB,MAAO,mCACQwG,EAAI,sEAGnBwL,EAAK,0DACgCxN,EAAK,aAAKC,EAAM,qDACvBQ,EAAK8B,UAAS,wDAI9C,C,uwBCzMR,cAIA,UAEA,UAWa,EAAAqS,YACT,SAACgG,EAAyCzL,EAAkBzW,GAC1DmiB,EAAe1L,GACf,IAAMwO,EACF,CAACzlB,KAAM,cAAeuK,WAAY,CAAC,KAAM2M,WAAY,CAAC,EAAAkB,YAAYiC,UAAW/C,UAAW9W,EAAWoiB,UAGvG,MAAO,CAFQF,EAAiBxK,IAAI,EAAD,KAC3BuN,GAAQ,CAAEhkB,IAAK,WAAM,OAAA20B,EAA6Bnf,EAAQwO,GAAU,EAAOjlB,EAAtD,IAAoEyW,GAEnG,EAES,EAAA0F,2BACT,SAACzM,GACC,IAAMuY,EAAUvY,EAAK1P,WAAWmB,UAAU,WAAY,UAChD00B,EAAWnmB,EAAK1P,WAAWkB,OAAO,YAAa,GAC/C40B,EAAsE,IAAnDpmB,EAAK1P,WAAWkB,OAAO,oBAAqB,GAC/DinB,EAAczY,EAAK1P,WAAWsB,QAAQ,gBACtCiI,EAAUmG,EAAK1P,WAAWsB,QAAQ,UAAW,IAC7C8mB,EAAO1Y,EAAK1P,WAAWsB,QAAQ,OAAQ,IAG7C,GAAiB,IAAbu0B,EACF,MAAM,IAAIl1B,MAAM,0EAGlB,OAAO,IAAAjB,6BAA4B,CAACuoB,QAAO,EAAE4N,SAAQ,EAAEC,gBAAe,EAAE3N,YAAW,EAAE5e,QAAO,EAAE6e,KAAI,GACpG,EAEJ,IAAMwN,EACF,SAACnf,EAAkBwO,EAA2B8Q,EAA2B/1B,GAE7D,QACFg2B,EAAwCvf,EAAQzW,EAAY+1B,GAAiB,GAD1E7L,EAAkB,KAAE9F,EAAW,KAEhCgM,EAAa,EAAAzkB,UAAUjL,KAAKwpB,EAAmB/B,aAEjD8N,EAAM,GACN/L,EAAmB4L,gBACrBG,GAAO,yBAAkB7F,EAAU,MAEnC6F,GAAO,yBAAkB7F,EAAU,YAErC,IAAM8F,EAAcC,EAAoB1f,EAAO,GAAGW,KAAM8S,EAP5C,kBAOqE+L,EAAK,OAChF7iB,EAAe,oBACrB8iB,EAAW,YAEX,OAAO,EAAP,KACKjR,GAAQ,CACX/c,OAAQ,CAACkP,KAAMgN,EAAavjB,KAAM4V,EAAO,GAAG5V,KAAMwV,YAAa,EAAAuB,YAAYiC,UAC3EzG,aAAY,GAEhB,EAEK,EAAA4K,kBACT,SAACkE,EAAyCzL,EAAkBzW,GAC1DmiB,EAAe1L,GACf,IAAMwO,EAAW,CACfzlB,KAAM,oBACNuK,WAAY,CAAC,KACb2M,WAAY,CAAC,EAAAkB,YAAYiC,UACzB/C,UAAW,UAAG9W,EAAW81B,kBAI3B,MAAO,CAFQ5T,EAAiBxK,IAAI,EAAD,KAC3BuN,GAAQ,CAAEhkB,IAAK,WAAM,OAAA20B,EAA6Bnf,EAAQwO,GAAU,EAAMjlB,EAArD,IAAmEyW,GAElG,EAES,EAAAwH,iCACT,SAACvO,GACC,IAAMomB,EAAsE,IAAnDpmB,EAAK1P,WAAWkB,OAAO,oBAAqB,GACrE,OAAO,IAAAxB,6BACH,CAACuoB,QAAS,GAAI4N,SAAU,EAAGC,gBAAe,EAAE3N,YAAa,GAAI5e,QAAS,GAAI6e,KAAM,IACtF,EAOS,EAAApJ,QACT,SAACkD,EAAyCzL,EAAkBzW,GAC1DmiB,EAAe1L,GACf,IAAMwO,EACF,CAACzlB,KAAM,UAAWuK,WAAY,CAAC,KAAM2M,WAAY,CAAC,EAAAkB,YAAYiC,UAAW/C,UAAW9W,EAAWoiB,UAGnG,MAAO,CAFQF,EAAiBxK,IAAI,EAAD,KAC3BuN,GAAQ,CAAEhkB,IAAK,WAAM,OAAAm1B,EAAyB3f,EAAQwO,GAAU,EAAOjlB,EAAlD,IAAgEyW,GAE/F,EAES,EAAAwI,uBACT,SAACvP,GACC,IAAMuY,EAAUvY,EAAK1P,WAAWmB,UAAU,WAAY,UAChD00B,EAAWnmB,EAAK1P,WAAWkB,OAAO,YAAa,GAC/CinB,EAAczY,EAAK1P,WAAWsB,QAAQ,gBACtCiI,EAAUmG,EAAK1P,WAAWsB,QAAQ,UAAW,IAC7C8mB,EAAO1Y,EAAK1P,WAAWsB,QAAQ,OAAQ,IACvC+0B,EAAe3mB,EAAK1P,WAAWkB,OAAO,gBAAiB,GACvDgnB,EAAYxY,EAAK1P,WAAWsB,QAAQ,YAAa,IAGvD,GAAqB,IAAjB+0B,EACF,MAAM,IAAI11B,MAAM,+DAElB,GAAiB,IAAbk1B,EACF,MAAM,IAAIl1B,MAAM,sEAGlB,OAAO,IAAAjB,6BACH,CAACuoB,QAAO,EAAE4N,SAAQ,EAAEC,iBAAiB,EAAO3N,YAAW,EAAE5e,QAAO,EAAE6e,KAAI,EAAEiO,aAAY,EAAEnO,UAAS,GACrG,EAEJ,IAAMkO,EACF,SAAC3f,EAAkBwO,EAA2B8Q,EAA2B/1B,GAE7D,QACFg2B,EAAwCvf,EAAQzW,EAAY+1B,GAAiB,GAD1E7L,EAAkB,KAAE9F,EAAW,KAMhC8R,EAAcC,EAAoB1f,EAAO,GAAGW,KAAM8S,EAJ5C,2CAGA,GAC0E,QAChF9W,EAAe,kBACvB8iB,EAAW,UAET,OAAO,EAAP,KACKjR,GAAQ,CACX/c,OAAQ,CAACkP,KAAMgN,EAAavjB,KAAM4V,EAAO,GAAG5V,KAAMwV,YAAa,EAAAuB,YAAYiC,UAC3EzG,aAAY,GAEhB,EAEF4iB,EACF,SAACvf,EAAkBzW,EAAqD+1B,GAElE,IAAM1Q,EAAa5O,EAAO,GAAGW,KAAKlK,QAC5BopB,EAAe33B,OAAO43B,eAAeC,KAAKx2B,EAAY,aACtDmoB,EAAcnoB,EAAWmoB,YAAYjb,QACrC3D,EAAUvJ,EAAWuJ,QAAQ2D,QAC7Bgb,EAAsBoO,EAAgBt2B,EAAiCkoB,UAAUhb,QAAU,GAC3Fkb,EAAOpoB,EAAWooB,KAAKlb,QAC7B,EAAAgf,aAAauK,qBAAqBV,EAAkB1Q,EAAY8C,EAAa5e,EAAS2e,EAAWE,GAEjG,IAAMhE,EAAc,EAAA8H,aAAawK,uBAC7BX,EAAkB1Q,EAAY9b,EAAS2e,EAAWC,EAAaC,EAAMpoB,EAAWioB,SAE9E4C,EAAgBlsB,OAAOO,OAAO,CAAC,EAAGc,GAMxC,OALIs2B,EACF33B,OAAOO,OAAO2rB,EAAe,CAAC1C,YAAW,EAAE5e,QAAO,EAAE6e,KAAI,EAAEF,UAAS,EAAE9F,SAAUpiB,EAAWoiB,WAE1FzjB,OAAOO,OAAO2rB,EAAe,CAAC1C,YAAW,EAAE5e,QAAO,EAAE6e,KAAI,EAAEhG,SAAUpiB,EAAWoiB,WAE1E,CAACyI,EAAezG,EACzB,EAEFuS,EAA0B,CAC9B1O,QAAS,GACT4N,SAAU,EACVC,iBAAiB,EACjB3N,YAAa,GACb5e,QAAS,GACT6e,KAAM,GACNiO,aAAc,EACdnO,UAAW,GACX9F,SAAU,IAGNwU,EAAwB,CAC5Bp3B,KAAM,gBACNuK,WAAY,CAAC,KACb2M,WAAY,CAAC,EAAAkB,YAAYiC,WAGd,EAAAqE,cAAgB,SAACgE,EAAyCzL,GAQrE,OAPA0L,EAAe1L,GAOR,CANQyL,EAAiBxK,IAAI,EAAD,KAE1Bkf,GAAqB,CACxB31B,IAAK,WAAM,OAAAm1B,EAAyB3f,EAAQmgB,GAAuB,EAAMD,EAA9D,IAEblgB,GAEN,EAEA,IAAM0L,EAAiB,SAAC1L,GACtB,IAAKA,GAA4B,IAAlBA,EAAO3Y,OACpB,MAAM,IAAI6C,MAAM,8BAElB,GAAuB,YAAnB8V,EAAO,GAAG5V,MAAyC,YAAnB4V,EAAO,GAAG5V,KAC5C,MAAM,IAAIF,MAAM,sBAEpB,EAEMw1B,EACF,SAACU,EAA8B72B,EAAmC82B,EAAab,EAAac,GAEtF,IAAMztB,EAAOutB,EAAU/4B,OACvB,GAAIkC,EAAWmoB,YAAYrqB,QAAU,EAAG,CACtC,IAKIk5B,EALEC,EAAKj3B,EAAWmoB,YAAYnoB,EAAWmoB,YAAYrqB,OAAS,GAC5Do5B,EAAKl3B,EAAWuJ,QAAQvJ,EAAWuJ,QAAQzL,OAAS,GACpDq5B,EAAUn3B,EAAWooB,KAAKpoB,EAAWooB,KAAKtqB,OAAS,EAAI,GACvDs5B,EAAQp3B,EAAWooB,KAAKpoB,EAAWooB,KAAKtqB,OAAS,GACjDu5B,EAAOR,EAAUvtB,EAAO,GAE1BguB,EAAQ,GACRC,EAAW,GAmBf,GAjBEP,EADEG,EAAUC,IAAU,EACd,0CACUH,EAAE,mCAClB3tB,EAAI,2BAAmBA,EAAI,mBAAW4tB,EAAE,cAAMC,EAAO,oCACjD7tB,EAAI,0BAAkBA,EAAI,oBAAY+tB,EAAI,0FAIhDP,EAAG,iBAGK,0CACUG,EAAE,mCAClB3tB,EAAI,2BAAmBA,EAAI,mBAAW4tB,EAAE,cAAMC,EAAO,8BACvDL,EAAG,iBAIiC,IAAlC92B,EAAWmoB,YAAYrqB,OAAc,CACvC,IAAM05B,EAAKx3B,EAAWmoB,YAAYnoB,EAAWmoB,YAAYrqB,OAAS,GAC5D25B,EAAKz3B,EAAWuJ,QAAQvJ,EAAWuJ,QAAQzL,OAAS,GACpD45B,EAAU13B,EAAWooB,KAAKpoB,EAAWooB,KAAKtqB,OAAS,EAAI,GACvD65B,EAAQ33B,EAAWooB,KAAKpoB,EAAWooB,KAAKtqB,OAAS,GACjD85B,EAAOf,EAAUvtB,EAAO,GAE5BguB,EADEI,EAAUC,IAAU,EACd,4CACUH,EAAE,qCAClBluB,EAAI,2BAAmBA,EAAI,mBAAWmuB,EAAE,cAAMC,EAAO,sCACjDpuB,EAAI,0BAAkBA,EAAI,oBAAYsuB,EAAI,sCACxCX,EAAE,6DAKF,4CACUO,EAAE,qCAClBluB,EAAI,2BAAmBA,EAAI,mBAAWmuB,EAAE,cAAMC,EAAO,uBAGzDH,EAAW,yB,CAmBb,MAdoB,8CACIjuB,EAAI,iCACtBA,EAAI,yEAGIytB,EAAK,gDAEnBO,EAAK,uBACLN,EAAK,uBACLO,EAAQ,uBACRtB,EAAG,+C,CAMH,IAUI4B,EAVEzH,EAAa,EAAAzkB,UAAUjL,KAAKV,EAAWmoB,aACvC2P,EAAgB,EAAAnsB,UAAUqO,eAAeha,EAAWmoB,aACpD4P,EAAcD,EAAch6B,OAC5Bk6B,EAAWh4B,EAAWooB,KAAKtqB,OAC3Bm6B,EAA0BxjB,EAAgBsjB,GAC1CG,EAAgBC,EAAUtB,EAAW,aACrCuB,EAAWD,EAAUn4B,EAAWooB,KAAM,QACtCiQ,EAAoBF,EAAUL,EAAe,iBAC7CQ,EAAcH,EAAUn4B,EAAWuJ,QAAS,WAmDlD,OA/CEsuB,EAHc73B,EAAWooB,KAAKmQ,QAAO,SAAClX,EAAKmX,GAAQ,OAAAnX,EAAMmX,CAAN,IAGzC,2MAQV1B,EAAG,iBAGO,mCAEZA,EAAG,cAGiB,oBACtBmB,EAAuB,+CACG3uB,EAAI,iCACtBA,EAAI,oEAECyuB,EAAW,kCACbC,EAAQ,uCACH1uB,EAAI,2CACAyuB,EAAW,qCACjBA,EAAW,yBACvBK,EAAQ,uBACRF,EAAa,uBACbI,EAAW,uBACXD,EAAiB,uCAEHtB,EAAK,mGAGC3G,EAAU,kIAGf9mB,EAAI,cAAMyuB,EAAW,iBAASzuB,EAAI,mEACbA,EAAI,cAAMyuB,EAAW,2CACtCzuB,EAAI,cAAMyuB,EAAW,2CACpCF,EAAO,oCAEX5B,EAAG,iDAOP,EAEFkC,EAAY,SAACM,EAA0BC,GAE3C,IADA,IAAI5jB,EAAQ,GACHhS,EAAI,EAAGA,EAAI21B,EAAM36B,OAAQgF,IAChCgS,GAAS,kBACL4jB,EAAS,YAAI51B,EAAC,eAAO21B,EAAM31B,GAAE,WAGnC,OAAOgS,CACT,EAEML,EAAkB,SAACnL,GAAyB,yDACTA,EAAI,8BAAsBA,EAAI,iCAC7DA,EAAI,mEAGYA,EAAI,+HAIhBA,EAAI,uBATgC,C,+bCjWlD,cAEA,UAEA,UAEA,UAUMivB,EACF,SAACrW,EAAyCzL,EAAkBzW,EAA8BR,EACzFm5B,GACCxW,EAAe1L,GAEf,IAAMmiB,EAAwB,CAC5Bp5B,KAAI,EACJuK,WAAY,CAAC,KACb2M,WAAY,CAAC,EAAAkB,YAAYiC,WAW3B,MAAO,CARQqI,EAAiBxK,IAAI,EAAD,KAE1BkhB,GAAqB,CACxB9hB,UAAW9W,EAAWoiB,SACtBnhB,IAAK,WACD,OAAA43B,EAAwB3W,EAAkBzL,EAAQzW,EAAYR,EAAMm5B,EAAUC,EAA9E,IAENniB,GAEN,EAES,EAAAmJ,sBAAkE,SAAClQ,GAC9E,IAAMopB,EAAOppB,EAAK1P,WAAWsB,QAAQ,OAAQ,IACvCy3B,EAAqD,IAA1CrpB,EAAK1P,WAAWkB,OAAO,WAAY,GACpD,OAAO,IAAAxB,6BAA4B,CAACo5B,KAAI,EAAEC,SAAQ,GACpD,EAEA,IAAMF,EACF,SAACz6B,EAAgCqY,EAAkBzW,EAA8BR,EAAcm5B,EAC9FC,GAUC,IATA,IAAMxU,EAAwB,GACxB4U,EAAQviB,EAAO,GAAGW,KAAKtZ,QAAU,EAEjCm7B,EAAU,GAEVH,EAAO,EAAAntB,UAAUutB,cAAcl5B,EAAW84B,KAAMriB,EAAO,GAAGW,KAAKtZ,QAC/Dq7B,EAAMR,EAASliB,EAAQqiB,GACzBM,EAAYD,EAAI,GAEXE,EAAI,EAAGA,EAAI5iB,EAAO,GAAGW,KAAKtZ,OAAQu7B,IAErCP,EAAK/sB,QAAQstB,IAAM,GAAqB,IAAhBP,EAAKh7B,QAC3BkC,EAAW+4B,UACb3U,EAAYlgB,KAAK,GAInBk1B,EAAY,+BACDC,EAAC,kBAAUA,EAAC,cAAM5iB,EAAO,GAAGW,KAAKiiB,GAAE,cAAMA,EAAC,uCACxCA,EAAC,gBAAQA,EAAC,0BACnBD,EAAS,mBAGbH,EAAQ/0B,KAAK,mBAAYm1B,EAAC,yBAAiBjV,EAAYtmB,OAAM,OAE7DsmB,EAAYlgB,KAAKuS,EAAO,GAAGW,KAAKiiB,KAIpC,IAAMC,EAAQlV,EAAYtmB,QAAU,EAE9BsV,EAAe,8CACSkmB,EAAK,4FAElBN,EAAK,qDAClBC,EAAQx5B,KAAK,MAAK,qBAClB05B,EAAI,GAAE,0DACNC,EAAS,qBACTD,EAAI,GAAE,+EAIV,OAAO,EAAP,KACKP,GAAqB,CACxB1wB,OAAQ,CAACkP,KAAMgN,EAAavjB,KAAM4V,EAAO,GAAG5V,KAAMwV,YAAa,EAAAuB,YAAYiC,UAC3EzG,aAAY,GAEhB,EAEE+O,EAAiB,SAAC1L,GAEtB,IAAKA,GAA4B,IAAlBA,EAAO3Y,OACpB,MAAM,IAAI6C,MAAM,+BAGlB,IAA8C,IAA1C,EAAAsuB,aAAaljB,QAAQ0K,EAAO,GAAG5V,MACjC,MAAM,IAAIF,MAAM,sBAEpB,EAEa,EAAAsf,UACT,SAACiC,EAAyCzL,EAAkBzW,GAE1D,OAAOu4B,EAAOrW,EAAkBzL,EAAQzW,EAAY,aADzB,WAAgB,OAAC,eAAgB,yBAA0B,GAA3C,GAE7C,EAES,EAAA8f,WACT,SAACoC,EAAyCzL,EAAkBzW,GAW1D,OAAOu4B,EAAOrW,EAAkBzL,EAAQzW,EAAY,cAVzB,SAACyW,EAAkBqiB,GAE5C,IADA,IAAIp4B,EAAO,EACF24B,EAAI,EAAGA,EAAI5iB,EAAO,GAAGW,KAAKtZ,OAAQu7B,KACrCP,EAAK/sB,QAAQstB,IAAM,GAAqB,IAAhBP,EAAKh7B,UAC/B4C,GAAQ+V,EAAO,GAAGW,KAAKiiB,IAI3B,MAAO,CAAC,eAAgB,yBAA0B,mBAAY34B,EAAI,MACpE,GAEF,EAES,EAAAmf,UACT,SAACqC,EAAyCzL,EAAkBzW,GAW1D,OAAOu4B,EAAOrW,EAAkBzL,EAAQzW,EAAY,aAVzB,SAACyW,EAAkBqiB,GAE5C,IADA,IAAMS,EAAU,GACPF,EAAI,EAAGA,EAAI5iB,EAAO,GAAGW,KAAKtZ,OAAQu7B,KACrCP,EAAK/sB,QAAQstB,IAAM,GAAqB,IAAhBP,EAAKh7B,SAC/By7B,EAAQr1B,KAAK,mBAAYm1B,EAAC,WAI9B,MAAO,CAAC,UAAGE,EAAQ95B,KAAK,MAAK,2BAA2B,oCAAqC,GAC/F,GAEF,EAES,EAAAsgB,UACT,SAACmC,EAAyCzL,EAAkBzW,GAW1D,OAAOu4B,EAAOrW,EAAkBzL,EAAQzW,EAAY,aAVzB,SAACyW,EAAkBqiB,GAE5C,IADA,IAAMS,EAAU,GACPF,EAAI,EAAGA,EAAI5iB,EAAO,GAAGW,KAAKtZ,OAAQu7B,KACrCP,EAAK/sB,QAAQstB,IAAM,GAAqB,IAAhBP,EAAKh7B,SAC/By7B,EAAQr1B,KAAK,mBAAYm1B,EAAC,WAI9B,MAAO,CAAC,UAAGE,EAAQ95B,KAAK,MAAK,2BAA2B,oCAAqC,GAC/F,GAEF,EAES,EAAAugB,WACT,SAACkC,EAAyCzL,EAAkBzW,GAE1D,OAAOu4B,EAAOrW,EAAkBzL,EAAQzW,EAAY,cADzB,WAAgB,OAAC,eAAgB,yBAA0B,GAA3C,GAE7C,EAES,EAAA2f,aACT,SAACuC,EAAyCzL,EAAkBzW,GAE1D,OAAOu4B,EAAOrW,EAAkBzL,EAAQzW,EAAY,gBADzB,WAAgB,OAAC,eAAgB,yBAA0B,sBAA3C,GAE7C,EAES,EAAAkgB,mBACT,SAACgC,EAAyCzL,EAAkBzW,GAE1D,OAAOu4B,EAAOrW,EAAkBzL,EAAQzW,EAAY,sBADzB,WAAgB,OAAC,wBAAyB,oCAAqC,GAA/D,GAE7C,C,+YC7KJ,cACA,UAEA,UAEA,UAyEa,EAAAwa,uCACT,SAACpc,EAAgCo7B,EAAiBC,GAChD,IAAMxU,EAzEiC,SAACwU,GAC1C,OAAEj6B,KAAM,mBAAoBkX,WAAY,CAAC,EAAAkB,YAAYC,QAAS9N,WAAY,CAAC,KAAM+M,UAAW,UAAG2iB,GAA/F,CAwEmBC,CAAqCD,GACtD,OAAO,EAAP,KAAWxU,GAAQ,CAAEhkB,IAAK,WAAM,OAtElC,SAAC7C,EAAgCo7B,EAAiBvU,EAA2BwU,GAMvE,IAJA,IAAME,EAAeH,EAAQpiB,KACvBiD,EAAsBof,EAExBG,EAAW,GACN92B,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,IAAI+2B,EAAe,GACnB,OAAQ/2B,GACN,KAAK,EACH+2B,EAAe,qBACf,MACF,KAAK,EACHA,EAAe,4CACf,MACF,KAAK,EACHA,EAAe,4CACf,MACF,KAAK,EACHA,EAAe,8CACf,MACF,QACE,MAAM,IAAIl5B,MAGdi5B,GAAY,oBACdC,EAAY,qBACZ/2B,EAAI,EAAI,sDAAwD,GAAE,qPAMzDA,EAAC,wFAEVA,EAAI,EAAI,IAAM,GAAE,W,CAGhB,IAwEsB4F,EACxBa,EACAH,EACA0E,EACArE,EA5EQ1B,GAAO,IAAAC,SAAQ5J,EAAQxB,QAAQ6H,QAAQiB,UAAU3G,SAEjDqU,EAAe,mBAsEC1K,EArEDixB,EAsEvBpwB,EAAU,EAAAoC,UAAUqO,eAAetR,GACnCU,EAAS,CAAC,IAAK,IAAK,KACpB0E,EAAQ,QACRrE,EAAyBF,EACKhK,KAAI,SAACmK,EAAQ5G,GACZ,IAAM6G,EAAQ,cAAOP,EAAOtG,GAAE,cAAMgL,EAAK,cAAMpE,GACzCE,EAAQ9G,IAAMyG,EAAQzL,OAAS,EACjC,cAAOsL,EAAOtG,EAAI,GAAE,cAAMgL,EAAK,cAAM1E,EAAOtG,GAAE,cAAM4G,GACpD,mBAAYN,EAAOtG,GAAE,cAAM4G,GAC/B,MAAO,UAAGC,EAAK,aAAKC,EAAK,IAC3B,IACCnK,KAAK,IAElC,2EAEDgK,EAAsB,8CArFc,mBA2F5C,SAAiCf,GAC/B,IAAMa,EAAU,EAAAoC,UAAUqO,eAAetR,GAEzC,MAAO,sGAGea,EAAQ,GAAE,yBAAiBA,EAAQ,GAAE,sBAG7D,CAnGQuwB,CAAwBzf,GAAoB,oBAC5C,IAAAsL,qBAAmB,iKAQNtL,EAAoB,GAAE,iCACtBA,EAAoB,GAAE,wBAEjCuf,EAAQ,qBACR7xB,EAAKG,OAAM,6BAIX,OAAO,EAAP,KACK+c,GAAQ,CACX/c,OAAQ,CAACkP,KAAMiD,EAAqBxZ,KAAM24B,EAAQ34B,KAAMwV,YAAa,EAAAuB,YAAYC,QACjFzE,aAAY,EACZC,SAAS,GAEb,CAK8B0mB,CAAiC37B,EAASo7B,EAASvU,EAAUwU,EAA7D,GAClC,EAEJ,yBAA8B/wB,GAC5B,GAAqB,IAAjBA,EAAM5K,OACR,MAAO,CAAC,EAAG,EAAG,GAIhB,IADA,IAAIk8B,EAAQ,EACHl3B,EAAI,EAAGA,EAAI4F,EAAM5K,OAAS,IAAKgF,EACtCk3B,GAAStxB,EAAM5F,GAEjB,MAAO,CAACk3B,EAAOtxB,EAAM5K,OAAS,EAAI4K,EAAMA,EAAM5K,OAAS,GAAK,EAAG4K,EAAMA,EAAM5K,OAAS,GACtF,EAaA,0BAA+BsZ,EAAyBuC,GAWtD,OAToB,IAAhBvC,EAAKtZ,QAAwC,IAAxB6b,EAAa7b,SAE3BsZ,EAAKtZ,OAAS,GAAK6b,EAAa7b,OAAS,EACjCsZ,EAAKA,EAAKtZ,OAAS,KAAO6b,EAAaA,EAAa7b,OAAS,GAE7DsZ,EAAKA,EAAKtZ,OAAS,KAAO6b,EAAaA,EAAa7b,OAAS,IAC1EsZ,EAAKA,EAAKtZ,OAAS,KAAO6b,EAAaA,EAAa7b,OAAS,GAIrE,C,sGCvHA,cAGa,EAAAsiB,QAAU,SAAChiB,EAAgCqY,GACtD,IAAMkD,EAAe,EAAAhO,UAAUsuB,sBAAsBxjB,EAAO,GAAGW,KAAMX,EAAO,GAAG2e,aAC/E,OAAIh3B,EAAQxB,QAAQ4I,KACX,CAACpH,EAAQ6b,cAAcxD,EAAO,GAAIkD,IAElC,CAACvb,EAAQqb,gBAAgBhD,EAAO,GAAIkD,GAE/C,C,irBCRA,cAEA,UACA,SAEA,UACA,UAEMugB,EAAwB,CAC5B16B,KAAM,SACNuK,WAAY,CAAC,KACb2M,WAAY,CAAC,EAAAkB,YAAYC,SAGd,EAAAwI,OACT,SAAC6B,EAAyCzL,EAAkBzW,GAS1D,OARA,IAAAmiB,gBAAe1L,EAAQzW,GAQhB,CAPQkiB,EAAiBxK,IAAI,EAAD,KAE1BwiB,GAAqB,CACxBpjB,UAAW9W,EAAWoiB,SACtBnhB,IAAK,WAAM,OAAAk5B,EAA8BjY,EAAkBzL,EAAQzW,EAAxD,IAEbyW,GAEN,EAES,EAAA6J,yBACT,SAAC5Q,GAAyC,WAAA0qB,yBAAwB1qB,EAAM,GAA9B,EAEjC,EAAA6Q,yBACT,SAAC7Q,GAAyC,WAAA0qB,yBAAwB1qB,EAAM,GAA9B,EAE9C,IAAMyqB,EACF,SAACjY,EAAyCzL,EAAkBzW,GAC1D,IAAM+H,GAAO,IAAAC,SAAQka,EAAiBtlB,QAAQ6H,QAAQiB,UAAU3G,SAC1D,IAAwBs7B,EAAc5jB,EAAQzW,GAAW,GAAxDs6B,EAAM,KAAElW,EAAW,KAI1B,GADIkW,EAAOC,OAAM,SAAC/2B,GAAc,OAAM,IAANA,CAAA,KAAmD,uBAAvCxD,EAAWw6B,wBAErD,OAAO,EAAP,KACKN,GAAqB,CACxBhyB,OAAQ,CAACkP,KAAMgN,EAAavjB,KAAM4V,EAAO,GAAG5V,KAAMwV,YAAa,EAAAuB,YAAYC,QAC3ExE,SAAS,EACTD,aAAc,sDACOrL,EAAK8B,UAAS,gDACvB9B,EAAKG,OAAM,8BAK3B,IAAMuyB,EAAMrW,EAAYtmB,OACxB,GAAI28B,EAAM,EACR,MAAM,IAAI95B,MAAM,yDAAkD85B,IAGpE,IAAMC,EAAetW,EAAYqW,EAAM,GACjCE,EAAcvW,EAAYqW,EAAM,GAEhCpV,EAAa5O,EAAO,GAAGW,KAC7B,GAAIqjB,IAAQpV,EAAWvnB,OACrB,MAAM,IAAI6C,MAAM,8CAAuC0kB,EAAWvnB,OAAM,qBAAa28B,IAEvF,IAAMG,EAAcvV,EAAWoV,EAAM,GAC/BI,EAAaxV,EAAWoV,EAAM,GAE9BK,EAAeR,EAAOG,EAAM,GAC5BM,EAAcT,EAAOG,EAAM,GAE7BO,EAAqB,GAEzB,GAAwB,WAApBh7B,EAAWusB,KAEb,MAAM,IAAI5rB,MAAM,kDAA2CX,EAAWusB,KAAI,MAE5E,OAAQvsB,EAAWw6B,yBACjB,IAAK,aACHQ,EAAqB,mKAKrB,MACF,IAAK,aACHA,EAAqB,iLAKrB,MACF,IAAK,qBACHA,EAAqB,iMAIDL,EAAW,gGACXD,EAAY,gGACZC,EAAW,gGACXD,EAAY,iIAIhC,MACF,IAAK,gBACHM,EAAqB,qHAEeL,EAAW,qBAAaD,EAAY,qBAAaC,EAAW,kDAC5ED,EAAY,oEACKG,EAAU,qBAAaD,EAAW,qBAAaC,EAAU,kDAC1ED,EAAW,+KAK/B,MACF,QAEE,MAAM,IAAIj6B,MAAM,qGACSX,EAAWw6B,wBAAuB,MAG/D,IAAMnI,GAAiB,IAAAjnB,mBAAkBqvB,GACnC/U,GAAgB,IAAAC,qBAChBvS,EAAe,kDACawnB,EAAW,eAAOC,EAAU,+DACpBC,EAAY,oBAAYC,EAAW,oBAAYD,EAAY,oBACjGC,EAAW,4BACPrV,EAAa,yBACbsV,EAAkB,wMAKd3I,EAAc,68BAiBWqI,EAAe,EAAC,uDAChBC,EAAc,EAAC,8rEAsCxC5yB,EAAKG,OAAM,+CAGvB,OAAO,EAAP,KACKgyB,GAAqB,CACxBhyB,OAAQ,CAACkP,KAAMgN,EAAavjB,KAAM4V,EAAO,GAAG5V,KAAMwV,YAAa,EAAAuB,YAAYC,QAC3ExE,SAAS,EACTD,aAAY,GAEhB,EAGEinB,EAAgB,SAAC5jB,EAAkBzW,GACvC,IAIIi7B,EAHE3J,EADI7a,EAAO,GACDW,KAEZkjB,EAASt6B,EAAWs6B,OAExB,GAAsB,IAAlBA,EAAOx8B,OAAc,CACvB,IAAMo9B,EAAezkB,EAAOzW,EAAWm7B,gBACvC,GAAID,GAAsC,IAAtBA,EAAax6B,KAAY,CAC3C,GAAI+V,EAAOzW,EAAWo7B,eACpB,MAAM,IAAIz6B,MAAM,0DAElB25B,EAASe,EAAgBH,EAAcl7B,EAAWusB,KAAMvsB,EAAWs7B,S,KAC9D,CACL,IAAMC,EAAc9kB,EAAOzW,EAAWo7B,eACtC,IAAKG,GAAoC,IAArBA,EAAY76B,KAC9B,MAAM,IAAIC,MAAM,qDAGlBs6B,EAAcp4B,MAAMqiB,KAAKqW,EAAYnG,aACrCkF,EAASkB,EAA8BP,EAAa3J,EAAOtxB,EAAWusB,KAAMvsB,EAAWs7B,S,OAGzF,GAAI7kB,EAAOzW,EAAWo7B,eACpB,MAAM,IAAIz6B,MAAM,0DAIpB,IAAM86B,EAAQR,GAAgB3J,EAAM/xB,KAAI,SAACk7B,EAAK33B,GAAM,OAAA9E,KAAK0f,MAAM+c,EAAMH,EAAOx3B,GAAxB,IAEpD,MAAO,CAACw3B,EAAQmB,EAClB,EAEMJ,EAAkB,SAACzY,EAAe2J,EAAc+O,GACpD,IAAMhB,EAASz3B,MAAMqiB,KAAKtC,EAAMyS,WAEhC,OADA,IAAAqG,kBAAiBpB,EAAQ/N,EAAM+O,GACxBhB,CACT,EAEMkB,EACF,SAACC,EAA0BnK,EAA0B/E,EAAc+O,GAIjE,IAHA,IAAMx9B,EAASwzB,EAAMxzB,OACfw8B,EAAS,IAAIz3B,MAAc/E,GAExBgF,EAAI,EAAG64B,EAAM79B,EAAQgF,EAAI64B,EAAK74B,IACrC,GAAiB,IAAbwuB,EAAMxuB,GAAU,CAClB,GAAiB,IAAb24B,EAAM34B,GACR,MAAM,IAAInC,MAAM,0DAElB25B,EAAOx3B,GAAK,C,MAEZw3B,EAAOx3B,GAAK24B,EAAM34B,GAAKwuB,EAAMxuB,GAIjC,OADA,IAAA44B,kBAAiBpB,EAAQ/N,EAAM+O,GACxBhB,CACT,C,mGCrQJ,cAGa,EAAA5xB,MAAQ,SAACwZ,EAAyCzL,GAE7D,OADA0L,EAAe1L,GACR,CAAC,IAAI,EAAAzT,OAAO,CAACyT,EAAO,GAAGW,KAAKtZ,QAAS,aAAS4D,OAAWA,EAAW,IAAIk6B,WAAWnlB,EAAO,GAAGW,OACtG,EAEA,IAAM+K,EAAiB,SAAC1L,GACtB,IAAKA,GAA4B,IAAlBA,EAAO3Y,OACpB,MAAM,IAAI6C,MAAM,0BAEpB,C,+WCZA,cAEA,UAEA,UAEA,UAQMk7B,EAAuB,CAC3Br8B,KAAM,QACNuK,WAAY,CAAC,KACb2M,WAAY,CAAC,EAAAkB,YAAYiC,WAGd,EAAA3M,MACT,SAACgV,EAAyCzL,EAAkBzW,GAS1D,OARAmiB,EAAe1L,GAQR,CAPQyL,EAAiBxK,IAAI,EAAD,KAE1BmkB,GAAoB,CACvB/kB,UAAW9W,EAAWoiB,SACtBnhB,IAAK,WAAM,OAAA66B,EAAuB5Z,EAAkBzL,EAAO,GAAIzW,EAApD,IAEbyW,GAEN,EAES,EAAAkK,qBAAgE,SAACjR,GAC5E,IAAMqsB,EAASrsB,EAAK1P,WAAWsB,QAAQ,UACjC06B,EAAOtsB,EAAK1P,WAAWsB,QAAQ,QAC/Bw3B,EAAOppB,EAAK1P,WAAWsB,QAAQ,OAAQ,IAC7C,OAAO,IAAA5B,6BAA4B,CAACq8B,OAAM,EAAEC,KAAI,EAAElD,KAAI,GACxD,EAEA,IAAMgD,EACF,SAAC5Z,EAAyCxI,EAAe1Z,GAmBvD,IAlBA,IAAM84B,EAAmC,IAA3B94B,EAAW84B,KAAKh7B,OAAgB4b,EAAMtC,KAAKlK,MAAM,GAAG3N,KAAI,SAAC08B,EAAKn5B,GAAM,OAAAA,CAAA,IAAK9C,EAAW84B,KAC5FoD,EAAiB,EAAAvwB,UAAUutB,cAAcJ,EAAMpf,EAAMtC,KAAKtZ,QAC1Di+B,EAAS/7B,EAAW+7B,OAAOx8B,KAAI,SAACw3B,EAAOj0B,GAC3C,OAAIi0B,EAAQrd,EAAMtC,KAAK8kB,EAAep5B,IAAM,EACnC4W,EAAMtC,KAAK8kB,EAAep5B,IAE5B,EAAA6I,UAAUgjB,cAAcoI,EAAOrd,EAAMtC,KAAK8kB,EAAep5B,IAClE,IACMk5B,EAAOh8B,EAAWg8B,KAAKz8B,KAAI,SAACo8B,EAAK74B,GACrC,OAAI64B,EAAMjiB,EAAMtC,KAAK8kB,EAAep5B,IAAM,EACjC4W,EAAMtC,KAAK8kB,EAAep5B,IAE5B,EAAA6I,UAAUgjB,cAAcgN,EAAKjiB,EAAMtC,KAAK8kB,EAAep5B,IAChE,IAEMshB,EAAc1K,EAAMtC,KAAKlK,QAEzBivB,EAAqB,GAClBr5B,EAAI,EAAGA,EAAIo5B,EAAep+B,OAAQgF,IACzCshB,EAAY8X,EAAep5B,IAAMk5B,EAAKl5B,GAAKi5B,EAAOj5B,GAC9Ci5B,EAAOj5B,GAAK,GACdq5B,EAASj4B,KAAK,oBAAag4B,EAAep5B,GAAE,gBAAQi5B,EAAOj5B,GAAE,MAIjE,IAAMwG,EAAO8a,EAAYtmB,OACnBsV,EAAe,8CACS9J,EAAI,yBAC9B6yB,EAAS18B,KAAK,YAAW,4CAG7B,OAAO,EAAP,KACKo8B,GAAoB,CACvB3zB,OAAQ,CAACkP,KAAMgN,EAAavjB,KAAM6Y,EAAM7Y,KAAMwV,YAAa,EAAAuB,YAAYiC,UACvEzG,aAAY,GAEhB,EAEE+O,EAAiB,SAAC1L,GACtB,IAAKA,GAA4B,IAAlBA,EAAO3Y,OACpB,MAAM,IAAI6C,MAAM,2BAElB,IAA8C,IAA1C,EAAAsuB,aAAaljB,QAAQ0K,EAAO,GAAG5V,MACjC,MAAM,IAAIF,MAAM,sBAEpB,EAEa,EAAA+f,SAAW,SAACwB,EAAyCzL,GAChE2lB,EAAkB3lB,GAClB,IAAMzW,EAAaq8B,EAAkCna,EAAkBzL,GAQvE,MAAO,CAPQyL,EAAiBxK,IAAI,EAAD,KAE1BmkB,GAAoB,CACvB/kB,UAAW9W,EAAWoiB,SACtBnhB,IAAK,WAAM,OAAA66B,EAAuB5Z,EAAkBzL,EAAO,GAAIzW,EAApD,IAEb,CAACyW,EAAO,KAEd,EAEA,IAAM4lB,EACF,SAACna,EAAyCzL,GACxC,IAAKyL,EAAiBtlB,QAAQoe,cAAcvE,EAAO,GAAGuB,UACjDkK,EAAiBtlB,QAAQoe,cAAcvE,EAAO,GAAGuB,SACjDvB,EAAO3Y,QAAU,IAAMokB,EAAiBtlB,QAAQoe,cAAcvE,EAAO,GAAGuB,SACxEvB,EAAO3Y,QAAU,IAAMokB,EAAiBtlB,QAAQoe,cAAcvE,EAAO,GAAGuB,QAC3E,MAAM,IAAIrX,MAAM,4CAGlB,GAAI8V,EAAO3Y,QAAU,GAAK2Y,EAAO,GAAG2e,YAAYkH,MAAK,SAACx5B,GAAc,OAAM,IAANA,CAAA,IAClE,MAAM,IAAInC,MAAM,oDAGlB,IAAMo7B,EAASl5B,MAAMqiB,KAAKzO,EAAO,GAAG2e,aAC9B4G,EAAOn5B,MAAMqiB,KAAKzO,EAAO,GAAG2e,aAC5B0D,EAAOriB,EAAO3Y,QAAU,EAAI+E,MAAMqiB,KAAKzO,EAAO,GAAG2e,aAAe,GAEtE,MAAO,CAAC2G,OAAM,EAAEC,KAAI,EAAElD,KAAI,EAAE1W,SADX,UAAG0W,EAAI,YAAIiD,EAAM,YAAIC,GAExC,EAEEI,EAAoB,SAAC3lB,GACzB,IAAKA,GAAUA,EAAO3Y,OAAS,GAAK2Y,EAAO3Y,OAAS,EAClD,MAAM,IAAI6C,MAAM,yBAElB,GAAuB,UAAnB8V,EAAO,GAAG5V,MAA8C,IAA1B4V,EAAO,GAAGW,KAAKtZ,OAC/C,MAAM,IAAI6C,MAAM,uBAElB,GAAuB,UAAnB8V,EAAO,GAAG5V,MAA8C,IAA1B4V,EAAO,GAAGW,KAAKtZ,OAC/C,MAAM,IAAI6C,MAAM,uBAElB,GAAI8V,EAAO3Y,QAAU,IAAyB,UAAnB2Y,EAAO,GAAG5V,MAA8C,IAA1B4V,EAAO,GAAGW,KAAKtZ,QACtE,MAAM,IAAI6C,MAAM,uBAElB,GAAI8V,EAAO3Y,QAAU,IAAyB,UAAnB2Y,EAAO,GAAG5V,MAA8C,IAA1B4V,EAAO,GAAGW,KAAKtZ,QACtE,MAAM,IAAI6C,MAAM,sBAEpB,C,6rBC1IA,cAIA,UACA,UAEA,UAEA,UAMM47B,EAAmC,CACvC/8B,KAAM,oBACNuK,WAAY,CAAC,KACb2M,WAAY,CAAC,EAAAkB,YAAYiC,WAGrB2iB,EAAqC,CACzCh9B,KAAM,sBACNuK,WAAY,CAAC,IAAK,OAClB2M,WAAY,CAAC,EAAAkB,YAAYiC,SAAU,EAAAjC,YAAYiC,WAG3C4iB,EAAyB,CAC7Bj9B,KAAM,UACNuK,WAAY,CAAC,IAAK,MAAO,QACzB2M,WAAY,CAAC,EAAAkB,YAAYiC,SAAU,EAAAjC,YAAYiC,SAAU,EAAAjC,YAAYiC,WAG1D,EAAA+G,QACT,SAACsB,EAAyCzL,EAAkBzW,GAC1DmiB,EAAe1L,GAEf,IAAM4O,EAAa5O,EAAO,GAAGW,KAAKlK,QAC5BkY,EAAO,EAAAzZ,UAAUgjB,cAAc3uB,EAAWolB,KAAMC,EAAWvnB,QAC3D4+B,EAAkB,EAAA/wB,UAAUgxB,gBAAgBtX,EAAYD,GACxDwX,EAAe,EAAAjxB,UAAUkxB,kBAAkBxX,EAAYD,GAG7D,OADe0X,EAAe5a,EAAkBzL,EAAQzW,EAAY08B,EAAiBE,EAEvF,EAES,EAAA/b,uBACT,SAACnR,GAAwC,WAAAhQ,6BAA4B,CAAC0lB,KAAM1V,EAAK1P,WAAWkB,OAAO,OAAQ,IAAlE,EAEhC,EAAA6f,0BACT,SAACrR,GAAwC,WAAAhQ,6BAA4B,CAAC0lB,KAAM1V,EAAK1P,WAAWkB,OAAO,QAAS,IAAnE,EAQhC,EAAA4f,WACT,SAACoB,EAAyCzL,EAAkBzW,GAC1DmiB,EAAe1L,GAEf,IAQIsmB,EARE1X,EAAa5O,EAAO,GAAGW,KAAKlK,QAC5BkY,EAAO,EAAAzZ,UAAUgjB,cAAc3uB,EAAWolB,KAAMC,EAAWvnB,QAC3DwL,EAAO+b,EAAWvnB,OAElBk/B,EAAuB5X,IAAS9b,EAAO,EACvC2zB,EAAiC,GACnCtQ,EAAiB,GACjBuQ,EAA6B,GAG7BF,KACFrQ,EAAO9pB,MAAMqiB,KAAK,CAACpnB,OAAQwL,IAAO/J,KAAI,SAAC49B,EAAGr6B,GAAM,OAAAA,CAAA,KAG3CsiB,GAAQ9b,EAAO,EACpBqjB,EAAKrjB,EAAO,GAAK8b,EAEjBuH,EAAKptB,KAAI,SAAA69B,GAAK,OAAAH,EAAqB/4B,KAAKmhB,EAAW+X,GAArC,IAEdL,GAAqB,IAAAr9B,6BAA4B,CAACitB,KAAI,IACtDuQ,GAAmB,IAAA/tB,WAAU+S,EAAkBzL,EAAQsmB,IAGzD,IAAML,EAAkBM,EAAsB,EAAArxB,UAAUgxB,gBAAgBM,EAAsB3zB,EAAO,GACvD,EAAAqC,UAAUgxB,gBAAgBtX,EAAY/b,EAAO,GACrFszB,EAAeI,EAAsB,EAAArxB,UAAUkxB,kBAAkBI,EAAsB3zB,EAAO,GACzD,EAAAqC,UAAUkxB,kBAAkBxX,EAAY/b,EAAO,GAEpFpB,EAAS40B,EACX5a,EAAkB8a,EAAsBE,EAAmBzmB,EAAQzW,EAAY08B,EAAiBE,GAEpG,OAAII,GACqB,IAAA7tB,WAAU+S,EAAkBha,EAAQ60B,GAGpD70B,CAEX,EAEJ,IAAM40B,EACF,SAAC5a,EAAyCzL,EAAkBzW,EAA+B08B,EAC1FE,GACC,IAAMS,EACFC,EAA4Bpb,EAAkBzL,EAAO,GAAIimB,EAAiBE,EAAc,CAACF,IACvFa,EAAMrb,EAAiBxK,IAAI,EAAD,KACxB6kB,GAAgC,CAAEzlB,UAAW9W,EAAWoiB,SAAUnhB,IAAK,WAAM,OAAAo8B,CAAA,IACjF5mB,GAEE+mB,EAA0BC,EAC5Bvb,EAAkBzL,EAAO,GAAIimB,EAAiBE,EAAcS,EAAsBn1B,OAAOkP,KACzF,CAACslB,IACC9Z,EAAQV,EAAiBxK,IAAI,EAAD,KAC1B8kB,GAAkC,CAAE1lB,UAAW9W,EAAWoiB,SAAUnhB,IAAK,WAAM,OAAAu8B,CAAA,IACnF,CAAC/mB,EAAO,GAAI8mB,IAEVG,EAAqBC,EACvBzb,EAAkBzL,EAAO,GAAIimB,EAAiBE,EAAcS,EAAsBn1B,OAAOkP,KACzFomB,EAAwBt1B,OAAOkP,MAInC,MAAO,CAHQ8K,EAAiBxK,IAAI,EAAD,KAC3B+kB,GAAsB,CAAE3lB,UAAW9W,EAAWoiB,SAAUnhB,IAAK,WAAM,OAAAy8B,CAAA,IACvE,CAACjnB,EAAO,GAAI8mB,EAAK3a,IAEvB,EAKE0a,EACF,SAACpb,EAAyCxI,EAAegjB,EAAyBE,EACjFxY,GACO,QACFlC,EAAiB9L,+BAA+BsD,EAAMtC,KAAM,EAAAQ,YAAYiC,UAAS,GAD9E8X,EAAY,KAAEC,EAAa,KAE5BtoB,EAAO8a,EAAYtmB,OAEzB,GAAI4+B,EAAkB,GAAKE,EAAe,EACxC,MAAM,IAAIj8B,MAAM,8EAGlB,GAA2B,IAAvByjB,EAAYtmB,OACd,MAAM,IAAI6C,MAAM,4CAGlB,GAAIyjB,EAAY,KAAOsY,EACrB,MAAM,IAAI/7B,MAAM,4DAGlB,IAAMoH,GAAO,IAAAC,SAAQka,EAAiBtlB,QAAQ6H,QAAQiB,UAAU3G,SAC1DqU,EAAe,oCACD9J,EAAI,6EACwBszB,EAAY,oDAE5B70B,EAAK8B,UAAS,wDAAgD8nB,EAAY,sBACtGC,EAAa,yCACEgL,EAAY,wEAEO70B,EAAK8B,UAAS,yEAC5C8nB,EAAY,aAAKC,EAAa,0GAOtC,OAAO,EAAP,KACK2K,GAAgC,CACnCr0B,OAAQ,CAACkP,KAAMgN,EAAavjB,KAAM6Y,EAAM7Y,KAAMwV,YAAa,EAAAuB,YAAYiC,UACvEzG,aAAY,GAEhB,EAKEqqB,EACF,SAACvb,EAAyCxI,EAAegjB,EAAyBE,EACjFgB,EAA4CxZ,GACrC,QACFlC,EAAiB9L,+BAA+BsD,EAAMtC,KAAM,EAAAQ,YAAYiC,UAAS,GAD9E8X,EAAY,KAAEC,EAAa,KAE5BtoB,EAAO8a,EAAYtmB,OAEzB,GAAI4+B,EAAkB,GAAKE,EAAe,EACxC,MAAM,IAAIj8B,MAAM,8EAGlB,GAA2B,IAAvByjB,EAAYtmB,OACd,MAAM,IAAI6C,MAAM,4CAGlB,GAAIyjB,EAAY,KAAOsY,EACrB,MAAM,IAAI/7B,MAAM,4DAGlB,GAAuC,IAAnCi9B,EAAwB9/B,OAC1B,MAAM,IAAI6C,MAAM,0DAGlB,GAAIi9B,EAAwB,KAAOlB,EACjC,MAAM,IAAI/7B,MAAM,0EAGlB,IAAMoH,GAAO,IAAAC,SAAQka,EAAiBtlB,QAAQ6H,QAAQiB,UAAU3G,SAC1DqU,EAAe,oCACD9J,EAAI,6EACwBszB,EAAY,6GAIzCA,EAAY,2EAEU70B,EAAK8B,UAAS,yEAC/C8nB,EAAY,aAAKC,EAAa,kEAKtC,OAAO,EAAP,KACK4K,GAAkC,CACrCt0B,OAAQ,CAACkP,KAAMgN,EAAavjB,KAAM6Y,EAAM7Y,KAAMwV,YAAa,EAAAuB,YAAYiC,UACvEzG,aAAY,GAEhB,EAEEuqB,EACF,SAACzb,EAAyCxI,EAAegjB,EAAyBE,EACjFgB,EAA4CC,GACrC,QACF3b,EAAiB9L,+BAA+BsD,EAAMtC,KAAM,EAAAQ,YAAYiC,UAAS,GAD9E8X,EAAY,KAAEC,EAAa,KAE5BtoB,EAAOoQ,EAAMtC,KAAKtZ,OAExB,GAAI4+B,EAAkB,GAAKE,EAAe,EACxC,MAAM,IAAIj8B,MAAM,8EAGlB,GAAuC,IAAnCi9B,EAAwB9/B,QAAsD,IAAtC+/B,EAA2B//B,OACrE,MAAM,IAAI6C,MAAM,0DAGlB,GAAIi9B,EAAwB,KAAOlB,GAAmBmB,EAA2B,KAAOnB,EACtF,MAAM,IAAI/7B,MAAM,0EAGlB,IAAMyS,EAAe,oCACD9J,EAAI,0KAGiBqoB,EAAY,aAAKC,EAAa,0IAIrCgL,EAAY,uTAY9C,OAAO,EAAP,KACKH,GAAsB,CACzBv0B,OAAQ,CAACkP,KAAMsC,EAAMtC,KAAMvW,KAAM6Y,EAAM7Y,KAAMwV,YAAa,EAAAuB,YAAYiC,UACtEzG,aAAY,GAEhB,EAEE+O,EAAiB,SAAC1L,GACtB,IAAKA,GAA4B,IAAlBA,EAAO3Y,OACpB,MAAM,IAAI6C,MAAM,6BAGlB,GAAuB,YAAnB8V,EAAO,GAAG5V,MAAyC,YAAnB4V,EAAO,GAAG5V,KAC5C,MAAM,IAAIF,MAAM,qBAEpB,C,gpBCtRA,cAIA,UAEA,UAQMm9B,EAAuB,CAC3Bt+B,KAAM,QACNuK,WAAY,CAAC,KACb2M,WAAY,CAAC,EAAAkB,YAAYiC,WAGd,EAAAhI,MACT,SAACqQ,EAAyCzL,EAAkBzW,GAC1DmiB,EAAe1L,GAKf,IAHA,IAAM2O,EAAO,EAAAzZ,UAAUgjB,cAAc3uB,EAAWolB,KAAM3O,EAAO,GAAGW,KAAKtZ,QAC/DigC,EAAQC,EAAgB9b,EAAkBzL,EAAQ2O,EAAMplB,GACxDkI,EAAmB,G,WAChBpF,GACPoF,EAAOhE,KAAKge,EAAiBxK,IAAI,EAAD,KAEvBomB,GAAoB,CACvBhnB,UAAW,UAAG9W,EAAWoiB,SAAQ,YAAItf,GACrC7B,IAAK,WAAM,OAAAg9B,EAAuB/b,EAAkBzL,EAAO,GAAIzW,EAAYolB,EAAMtiB,EAAtE,IAEb2T,G,EAPG3T,EAAI,EAAGA,EAAIi7B,IAASj7B,E,EAApBA,GAUT,OAAOoF,CACT,EAES,EAAA8Y,qBAAgE,SAACtR,GAC5E,IAAM0V,EAAO1V,EAAK1P,WAAWkB,OAAO,OAAQ,GACtC2Q,EAAQnC,EAAK1P,WAAWsB,QAAQ,QAAS,IACzC48B,EAAaxuB,EAAKyuB,QAAQrgC,OAChC,OAAO,IAAA4B,6BAA4B,CAAC0lB,KAAI,EAAEvT,MAAK,EAAEqsB,WAAU,GAC7D,EAEA,IAAMF,EACF,SAAC9b,EAAyCzL,EAAkB2O,EAAcplB,GAExE,OADM,EAAc,EAAAo+B,UAAUC,WAAW5nB,EAAO,GAAGW,KAAMgO,EAAMplB,EAAW6R,MAAO7R,EAAWk+B,YAAW,GAAvF,GACDpgC,MACjB,EAEEmgC,EACF,SAAC/b,EAAyCxI,EAAe1Z,EAA6BolB,EAActX,GAExF,QAAoB,EAAAswB,UAAUC,WAAW3kB,EAAMtC,KAAMgO,EAAMplB,EAAW6R,MAAO7R,EAAWk+B,YAAW,GAAlGtY,EAAM,KACP0Y,EADgB,KACCxwB,GACjBsW,EAAcwB,EAAO9X,GACrBxE,EAAO8a,EAAYtmB,OACnBsV,EAAe,4CACG9J,EAAI,iCACpB8b,EAAI,gBAAQkZ,EAAM,iDAI1B,OAAO,EAAP,KACKR,GAAoB,CACvBhnB,UAAW,UAAG9W,EAAWoiB,SAAQ,YAAItU,GACrC5F,OAAQ,CAACkP,KAAMgN,EAAavjB,KAAM6Y,EAAM7Y,KAAMwV,YAAa,EAAAuB,YAAYiC,UACvEzG,aAAY,GAEhB,EAEF+O,EAAiB,SAAC1L,GACtB,IAAKA,GAA4B,IAAlBA,EAAO3Y,OACpB,MAAM,IAAI6C,MAAM,6BAGlB,GAAuB,SAAnB8V,EAAO,GAAG5V,MAAsC,UAAnB4V,EAAO,GAAG5V,MAAuC,UAAnB4V,EAAO,GAAG5V,MAClD,WAAnB4V,EAAO,GAAG5V,MAAwC,UAAnB4V,EAAO,GAAG5V,MAAuC,WAAnB4V,EAAO,GAAG5V,MACpD,YAAnB4V,EAAO,GAAG5V,MAAyC,YAAnB4V,EAAO,GAAG5V,MAAyC,SAAnB4V,EAAO,GAAG5V,KAC5E,MAAM,IAAIF,MAAM,sBAEpB,C,4ICjFA,cAGa,EAAAugB,QACT,SAACgB,EAAyCzL,EAAkBqiB,GAC1D3W,EAAe1L,GACf,IAAM2N,EAAc,EAAAzY,UAAUsC,aAAawI,EAAO,GAAGW,KAAM0hB,GAE3D,MAAO,CADQ5W,EAAiBzI,gBAAgBhD,EAAO,GAAI2N,GAE7D,EAES,EAAAhD,WAAa,SAACc,EAAyCzL,GAElE,OADA8nB,EAAkB9nB,IACX,IAAAyK,SAAQgB,EAAkB,CAACzL,EAAO,IAAK5T,MAAMqiB,KAAKzO,EAAO,GAAG2e,aACrE,EAEa,EAAAjU,uBAA2D,SAACzR,GACrE,OAAAA,EAAK1P,WAAWsB,QAAQ,OAAxB,EAEJ,IAAM6gB,EAAiB,SAAC1L,GACtB,IAAKA,GAA4B,IAAlBA,EAAO3Y,OACpB,MAAM,IAAI6C,MAAM,6BAGlB,GAAuB,WAAnB8V,EAAO,GAAG5V,KACZ,MAAM,IAAIF,MAAM,8BAEpB,EAEM49B,EAAoB,SAAC9nB,GACzB,IAAKA,GAA4B,IAAlBA,EAAO3Y,OACpB,MAAM,IAAI6C,MAAM,8BAGlB,GAAuB,UAAnB8V,EAAO,GAAG5V,KACZ,MAAM,IAAIF,MAAM,sBAEpB,C,2UCvCA,cAEA,UAEa,EAAA0gB,IAAM,SAACa,EAAyCzL,GAC3D0L,EAAe1L,GAEf,IAAM+nB,EAAqB,CACzBh/B,KAAM,MACNuK,WAAY0M,EAAOlX,KAAI,SAAC0S,EAAGnP,GAAM,iBAAIA,EAAJ,IACjC4T,WAAY,IAAI7T,MAAM4T,EAAO3Y,QAAQqnB,KAAK,EAAAvN,YAAYiC,WAKxD,MAAO,CAFQqI,EAAiBxK,IAAI,EAAD,KAC3B8mB,GAAkB,CAAEv9B,IAAK,WAAM,OAAAw9B,EAAqBvc,EAAkBzL,EAAQ+nB,EAA/C,IAAqE/nB,GAE9G,EAEA,IAAMgoB,EACF,SAACvc,EAAyCzL,EAAkB+nB,GAC1D,IAAMz2B,GAAO,IAAAC,SAAQka,EAAiBtlB,QAAQ6H,QAAQiB,UAAU3G,SAC1DqlB,EAAc3N,EAAO,GAAGW,KAAKlK,QAC7BwxB,EAAUjoB,EAAOlX,KAAI,SAAC0S,EAAGnP,GAAM,gBAAGiF,EAAK8B,UAAS,aAAK/G,EAAC,cAAvB,IAAsCrD,KAAK,OAC1E2T,EAAe,uDAEHsrB,EAAO,sBACrB32B,EAAKG,OAAM,6BAGf,OAAO,EAAP,KACKs2B,GAAkB,CACrBt2B,OAAQ,CAACkP,KAAMgN,EAAavjB,KAAM4V,EAAO,GAAG5V,KAAMwV,YAAa,EAAAuB,YAAYiC,UAC3ExG,SAAS,EACTD,aAAY,GAEhB,EAEE+O,EAAiB,SAAC1L,GACtB,IAAKA,GAA4B,IAAlBA,EAAO3Y,OACpB,MAAM,IAAI6C,MAAM,wBAIlB,IADA,IAAM7C,EAAS2Y,EAAO,GAAGW,KAAKtZ,OACrBgF,EAAI,EAAGA,EAAI2T,EAAO3Y,OAAQgF,IAAK,CACtC,GAAIhF,IAAW2Y,EAAO3T,GAAGsU,KAAKtZ,OAC5B,MAAM,IAAI6C,MAAM,gCAGlB,IAAK,IAAIg+B,EAAI,EAAGA,EAAI7gC,EAAQ6gC,IAC1B,GAAIloB,EAAO,GAAGW,KAAKunB,KAAOloB,EAAO3T,GAAGsU,KAAKunB,GACvC,MAAM,IAAIh+B,MAAM,gC,CAKtB,GAAuB,YAAnB8V,EAAO,GAAG5V,MAAyC,YAAnB4V,EAAO,GAAG5V,KAC5C,MAAM,IAAIF,MAAM,uBAElB,IAASmC,EAAI,EAAGA,EAAI2T,EAAO3Y,OAAQgF,IACjC,GAAI2T,EAAO,GAAG5V,OAAS4V,EAAO3T,GAAGjC,KAC/B,MAAM,IAAIF,MAAM,+BAGtB,C,4UChEA,cAGA,UAEa,EAAA6gB,KAAO,SAACU,EAAyCzL,GAC5D0L,EAAe1L,GAEf,IAAMmoB,EAAsB,CAC1Bp/B,KAAM,OACNuK,WAAY,CAAC,KACb2M,WAAY,CAAC,EAAAkB,YAAYiC,WAM3B,MAAO,CAHQqI,EAAiBxK,IAAI,EAAD,KAC3BknB,GAAmB,CAAE39B,IAAK,WAAM,OAAA49B,EAAsB3c,EAAkBzL,EAAQmoB,EAAhD,IACpCnoB,GAEN,EAEA,IAAMooB,EACF,SAACzgC,EAAgCqY,EAAkBmoB,GAKjD,IAJA,IAAMvZ,EAAa5O,EAAO,GAAGW,KAAKlK,QAC5BkX,EAAc,IAAIvhB,MAAMwiB,EAAWvnB,QAEnCghC,EAAoB,GACjBh8B,EAAI,EAAGA,EAAIuiB,EAAWvnB,OAAQgF,IACrCshB,EAAYthB,GAAKuiB,EAAWviB,GAAK2T,EAAO,GAAG6B,WAAWxV,GACtDg8B,EAAQ56B,KAAK,mBAAYpB,EAAC,uCAA+BA,EAAC,eAAOuiB,EAAWviB,GAAE,SAGhF,IAAMwG,EAAO8a,EAAYtmB,OACnBsV,EAAe,8CACS9J,EAAI,sCACjBA,EAAI,uBACjBw1B,EAAQr/B,KAAK,MAAK,iDAItB,OAAO,EAAP,KACKm/B,GAAmB,CACtB12B,OAAQ,CAACkP,KAAMgN,EAAavjB,KAAM4V,EAAO,GAAG5V,KAAMwV,YAAa,EAAAuB,YAAYiC,UAC3EzG,aAAY,GAEhB,EAEE+O,EAAiB,SAAC1L,GACtB,IAAKA,GAA4B,IAAlBA,EAAO3Y,OACpB,MAAM,IAAI6C,MAAM,0BAElB,GAA8B,IAA1B8V,EAAO,GAAGW,KAAKtZ,OACjB,MAAM,IAAI6C,MAAM,4CAElB,GAAI8V,EAAO,GAAGW,KAAK,KAAOX,EAAO,GAAGW,KAAKtZ,OACvC,MAAM,IAAI6C,MAAM,wBAElB,IAA8C,IAA1C,EAAAsuB,aAAaljB,QAAQ0K,EAAO,GAAG5V,MACjC,MAAM,IAAIF,MAAM,uBAElB,GAAuB,UAAnB8V,EAAO,GAAG5V,MAAuC,UAAnB4V,EAAO,GAAG5V,KAC1C,MAAM,IAAIF,MAAM,uBAEpB,C,q3BC9DA,cAIA,UAEA,UAMMo+B,EAA2B,CAC/Bv/B,KAAM,YACNuK,WAAY,CAAC,KACb2M,WAAY,CAAC,EAAAkB,YAAYiC,WAGd,EAAA1K,UACT,SAAC+S,EAAyCzL,EAAkBzW,GAS1D,OARAmiB,EAAe1L,GAQR,CAPQyL,EAAiBxK,IAAI,EAAD,KAE1BqnB,GAAwB,CAC3BjoB,UAAW9W,EAAWoiB,SACtBnhB,IAAK,WAAM,OAAA+9B,EAA2B9c,EAAkBzL,EAAO,GAAIzW,EAAW2sB,KAAnE,IAEblW,GAEN,EAES,EAAAgL,yBACT,SAAC/R,GAA0C,WAAAhQ,6BAA4B,CAACitB,KAAMjd,EAAK1P,WAAWsB,QAAQ,OAAQ,KAAnE,EAE/C,IAAM09B,EACF,SAAC9c,EAAyCxI,EAAeiT,GACvD,IAAMtH,EAAa3L,EAAMtC,KACzBuV,EAAOsS,EAAgB5Z,EAAYsH,GACnC,IAAMuS,EAAsBC,EAAe9Z,EAAYsH,GACjDrjB,EAAO+b,EAAWvnB,OAIlBsV,EAAe,kBACnBgsB,EAAoB,OAAQzS,EAAMrjB,GAAK,6CACbA,EAAI,+BACtBA,EAAI,iEAId,OAAO,EAAP,KACKy1B,GAAwB,CAC3B72B,OAAQ,CAACkP,KAAM8nB,EAAqBr+B,KAAM6Y,EAAM7Y,KAAMwV,YAAa,EAAAuB,YAAYiC,UAC/EzG,aAAY,GAEhB,EAEE6rB,EAAkB,SAAC5Z,EAA+BsH,GAItD,OAHIA,GAAQA,EAAK7uB,SAAWunB,EAAWvnB,SACrC6uB,EAAO,OAAKtH,EAAWxS,SAAO,GAAErE,WAE3Bme,CACT,EAEMwS,EAAiB,SAAC9Z,EAA+BsH,GAErD,OADAA,EAAOsS,EAAgB5Z,EAAYsH,GAC5B,EAAAhhB,UAAU0zB,gBAAgBha,EAAYsH,EAC/C,EAEMyS,EAAsB,SAAC5/B,EAAcmtB,EAAgBrjB,GACzD,IAAMg2B,EAAc,GACpBA,EAAYp7B,KAAK,eAAQ1E,EAAI,sBAAc8J,EAAI,sBAAcA,EAAI,SACjE,IAAK,IAAIxG,EAAI,EAAGA,EAAIwG,IAAQxG,EAC1Bw8B,EAAYp7B,KAAK,cAAOyoB,EAAK7pB,GAAE,iBAASA,EAAC,OAG3C,OADAw8B,EAAYp7B,KAAK,OACVo7B,EAAY7/B,KAAK,KAC1B,EAEM0iB,EAAiB,SAAC1L,GACtB,IAAKA,GAA4B,IAAlBA,EAAO3Y,OACpB,MAAM,IAAI6C,MAAM,+BAGlB,GAAuB,YAAnB8V,EAAO,GAAG5V,MAAyC,YAAnB4V,EAAO,GAAG5V,KAC5C,MAAM,IAAIF,MAAM,+BAEpB,C,4GCvFA,cAEA,UAEa,EAAA2a,cAAgB,SAAC4G,EAAyCxI,GACrE,IAAM0K,EAAc1K,EAAMhR,MACpBX,GAAO,IAAAC,SAAQka,EAAiBtlB,QAAQ6H,QAAQiB,UAAU3G,SAI1DqU,EAAe,ipCA6CDrL,EAAK8B,UAAS,mCAC5B9B,EAAKG,OAAM,mCAEX4B,EAAc,CAClBtK,KAAM,cACNkX,WAAY,CAAC,EAAAkB,YAAYiC,UACzB9P,WAAY,CAAC,KACb7B,OAAQ,CAACkP,KAAMgN,EAAavjB,KAAM6Y,EAAM/B,OAAO9W,KAAMwV,YAAa,EAAAuB,YAAY2nB,sBAC9EnsB,aAAY,EACZC,SAAS,GAEX,OAAO6O,EAAiB3L,eAAezM,EAAa,CAAC4P,EAAM/B,QAC7D,C,uxBCnEA,cAGA,UACA,UACA,UAEA,UAEA,SAAgB6nB,IACd,OAAOC,EAAiB,MAC1B,CACA,SAAgBC,IACd,OAAOD,EAAiB,OAC1B,CACA,SAAgBE,IACd,OAAOF,EAAiB,OAC1B,CACA,SAAgBG,IACd,OAAOH,EAAiB,OAC1B,CACA,SAAgBI,IACd,OAAOJ,EAAiB,OAC1B,CACA,SAAgBK,IACd,OAAOL,EAAiB,MAC1B,CACA,SAAgBM,EAAQxQ,GACtB,IAAM/vB,EAAO,MAWb,MAAO,CAACuP,KAVK,wCACewgB,EAAK,yBAEzB/vB,EAAI,uFAGLA,EAAI,wCACKA,EAAI,mBAAWA,EAAI,mBAAWA,EAAI,mBAAWA,EAAI,qBAGnDA,KAAI,EAAEqB,KAAM,EAAA0O,aAAa0T,WACzC,CACA,SAAgB+c,IACd,OAAOP,EAAiB,MAC1B,CACA,SAAgBQ,IACd,OAAOR,EAAiB,QAC1B,CACA,SAAgBvR,EAASjwB,EAAas/B,GACpC,IAAM/9B,EAAO,OAYb,MAAO,CAACuP,KAXK,sCACa9Q,EAAG,yCACHs/B,EAAG,yBAErB/9B,EAAI,qEAGLA,EAAI,wDAIGA,KAAI,EAAEqB,KAAM,EAAA0O,aAAa0T,WACzC,CACA,SAAgBid,IACd,IAAM1gC,EAAO,YASb,MAAO,CAACuP,KARK,oBACLvP,EAAI,oDAGLA,EAAI,uCAIGA,KAAI,EAAEqB,KAAM,EAAA0O,aAAa0T,WACzC,CACA,SAAgBkd,EAAc5Q,GAC5B,IAAM/vB,EAAO,YAWb,MAAO,CAACuP,KAVK,wCACewgB,EAAK,yBAEzB/vB,EAAI,0EAGLA,EAAI,wCACKA,EAAI,mBAAWA,EAAI,mBAAWA,EAAI,mBAAWA,EAAI,qBAGnDA,KAAI,EAAEqB,KAAM,EAAA0O,aAAa0T,WACzC,CACA,SAAgBmd,IACd,OAAOX,EAAiB,MAC1B,CACA,SAAgBY,IACd,IAAM7gC,EAAO,MASb,MAAO,CAACuP,KARK,oBACLvP,EAAI,qDAGLA,EAAI,wCAIGA,KAAI,EAAEqB,KAAM,EAAA0O,aAAa0T,WACzC,CACA,SAAgBqd,IACd,IAAM9gC,EAAO,MAeb,MAAO,CAACuP,KAdK,oBACLvP,EAAI,qEAGLA,EAAI,oDAGJA,EAAI,uGAGHA,EAAI,oEAIEA,KAAI,EAAEqB,KAAM,EAAA0O,aAAa0T,WACzC,CACA,SAAgBsd,IACd,OAAOd,EAAiB,MAC1B,CACA,SAAgBzR,IACd,IAAMxuB,EAAO,OASb,MAAO,CAACuP,KARK,oBACLvP,EAAI,gEAGLA,EAAI,mDAIGA,KAAI,EAAEqB,KAAM,EAAA0O,aAAa0T,WACzC,CACA,SAAgBgL,IACd,IAAMzuB,EAAO,UASb,MAAO,CAACuP,KARK,oBACLvP,EAAI,wEAGLA,EAAI,2DAIGA,KAAI,EAAEqB,KAAM,EAAA0O,aAAa0T,WACzC,CACA,SAAgBud,IACd,OAAOf,EAAiB,OAC1B,CACA,SAAgBgB,IACd,OAAOhB,EAAiB,MAC1B,CACA,SAAgBiB,IACd,IAAMlhC,EAAO,OAab,MAAO,CAACuP,KAZK,oBACLvP,EAAI,wHAKLA,EAAI,2GAMGA,KAAI,EAAEqB,KAAM,EAAA0O,aAAa0T,WACzC,CACA,SAASwc,EAAiBjgC,GASxB,MAAO,CAACuP,KARK,oBACLvP,EAAI,oCACDA,EAAI,6BAERA,EAAI,mCACAA,EAAI,iBAGDA,KAAI,EAAEqB,KAAM,EAAA0O,aAAa0T,WACzC,CA3KA,YAGA,aAGA,aAGA,aAGA,aAGA,YAGA,YAcA,YAGA,cAGA,aAeA,iBAYA,kBAcA,YAGA,YAYA,YAkBA,YAGA,aAYA,gBAYA,aAGA,YAGA,aAgCA,IAoBM0d,EACF,SAACviC,EAAgCsb,EAAeqK,EAA6B3B,GAEvE,IAAM/L,EAAcjY,EAAQxB,QAAQ4I,KAAO,EAAAoS,YAAYC,OAAS,EAAAD,YAAYiC,SACtEoL,EAAW,CAACzlB,KAAMukB,EAASvkB,KAAMkX,WAAY,CAACL,GAActM,WAAY,CAAC,KAAM+M,UAAWsL,GAChG,OAAO,EAAP,KAAW6C,GAAQ,CAAEhkB,IAAK,WAAM,OAxBtC,SAAC7C,EAAgC6mB,EAA2BvL,EAAeqK,GAErE,IAAM1N,EAAcjY,EAAQxB,QAAQ4I,KAAO,EAAAoS,YAAYC,OAAS,EAAAD,YAAYiC,SACtE9R,GAAO,IAAAC,SAAQ5J,EAAQxB,QAAQ6H,QAAQiB,UAAU3G,SACvD,OAAO,EAAP,KACKkmB,GAAQ,CACX/c,OAAQ,CAACkP,KAAMsC,EAAMtC,KAAMvW,KAAM6Y,EAAM7Y,KAAMwV,YAAW,GACxDjD,aAAc,iBACnB2Q,EAAShV,KAAI,iDAEFhH,EAAK8B,UAAS,uCACnBka,EAASvkB,KAAI,yBACjBuI,EAAKG,OAAM,wBAGRmL,SAAS,GAEb,CAOkCutB,CAA6BxiC,EAAS6mB,EAAUvL,EAAOqK,EAAvD,GAClC,EAEK,EAAAnI,IAAM,SAACxd,EAAgCqY,GACpC,OAACrY,EAAQsZ,IAAIipB,EAAmCviC,EAASqY,EAAO,GAAI+oB,KAAY/oB,GAAhF,EAEH,EAAAoF,KAAO,SAACzd,EAAgCqY,GACrC,OAACrY,EAAQsZ,IAAIipB,EAAmCviC,EAASqY,EAAO,GAAIipB,KAAajpB,GAAjF,EAEH,EAAAuF,KAAO,SAAC5d,EAAgCqY,GACrC,OAACrY,EAAQsZ,IAAIipB,EAAmCviC,EAASqY,EAAO,GAAIkpB,KAAalpB,GAAjF,EAEH,EAAAwF,KAAO,SAAC7d,EAAgCqY,GACrC,OAACrY,EAAQsZ,IAAIipB,EAAmCviC,EAASqY,EAAO,GAAImpB,KAAanpB,GAAjF,EAOH,EAAA8F,KACT,SAACne,EAAgCqY,EAAkBzW,GAAyC,OAAC5B,EAAQsZ,IACjGipB,EACIviC,EAASqY,EAAO,GAAIyX,EAASluB,EAAW/B,IAAK+B,EAAWu9B,KAAMv9B,EAAWoiB,UAC7E3L,GAHwF,EAKnF,EAAA+F,oBAAsB,SAAC9M,GAAqC,WAAAhQ,6BACrE,CAACzB,IAAKyR,EAAK1P,WAAWe,SAAS,MAAO,EAAAutB,UAAWiP,IAAK7tB,EAAK1P,WAAWe,SAAS,MAAO,EAAAwtB,WADjB,EAG5D,EAAA9R,QAAU,SAACre,EAAgCqY,GACtD,IAAMzW,EAAa6gC,EAAiCziC,EAASqY,GAC7D,OAAO,IAAA8F,MAAKne,EAAS,CAACqY,EAAO,IAAKzW,EACpC,EAEA,IAAM6gC,EAAmC,SAACziC,EAAgCqY,GACxE,GAAIA,EAAO3Y,QAAU,KACfM,EAAQxB,QAAQoe,cAAcvE,EAAO,GAAGuB,UAAY5Z,EAAQxB,QAAQoe,cAAcvE,EAAO,GAAGuB,SAChG,MAAM,IAAIrX,MAAM,2CAGlB,IAAM1C,EAAOwY,EAAO3Y,QAAU,EAAK2Y,EAAO,GAAG6B,WAAW,GAAK,EAAAgW,SACvDiP,EAAO9mB,EAAO3Y,QAAU,EAAK2Y,EAAO,GAAG6B,WAAW,GAAK,EAAAiW,SAC7D,OAAO,IAAA7uB,6BAA4B,CAACzB,IAAG,EAAEs/B,IAAG,GAC9C,EAEa,EAAAr/B,KAAO,SAACE,EAAgCqY,GACrC,OAACrY,EAAQsZ,IAAIipB,EAAmCviC,EAASqY,EAAO,GAAIopB,KAAappB,GAAjF,EAEH,EAAAuG,IAAM,SAAC5e,EAAgCqY,GACpC,OAACrY,EAAQsZ,IAAIipB,EAAmCviC,EAASqY,EAAO,GAAIqpB,KAAYrpB,GAAhF,EAMH,EAAA4G,IACT,SAACjf,EAAgCqY,EAAkBzW,GAAwC,OAAC5B,EAAQsZ,IAChGipB,EAAmCviC,EAASqY,EAAO,GAAIspB,EAAQ//B,EAAWuvB,OAAQvvB,EAAWoiB,UAC7F3L,GAFuF,EAIlF,EAAA6G,mBAAqB,SAAC5N,GAC/B,WAAAhQ,6BAA4B,CAAC6vB,MAAO7f,EAAK1P,WAAWe,SAAS,QAAS,IAAtE,EAES,EAAAwc,IAAM,SAACnf,EAAgCqY,GACpC,OAACrY,EAAQsZ,IAAIipB,EAAmCviC,EAASqY,EAAO,GAAIupB,KAAYvpB,GAAhF,EAEH,EAAAiH,MAAQ,SAACtf,EAAgCqY,GACtC,OAACrY,EAAQsZ,IAAIipB,EAAmCviC,EAASqY,EAAO,GAAIwpB,KAAcxpB,GAAlF,EAEH,EAAAwG,SAAW,SAAC7e,EAAgCqY,GACzC,OAACrY,EAAQsZ,IAAIipB,EAAmCviC,EAASqY,EAAO,GAAIypB,KAAiBzpB,GAArF,EAMH,EAAA+H,UACT,SAACpgB,EAAgCqY,EAAkBzW,GAA8C,OAAC5B,EAAQsZ,IACtGipB,EAAmCviC,EAASqY,EAAO,GAAI0pB,EAAcngC,EAAWuvB,OAAQvvB,EAAWoiB,UACnG3L,GAF6F,EAIxF,EAAAgI,yBAA2B,SAAC/O,GACrC,WAAAhQ,6BAA4B,CAAC6vB,MAAO7f,EAAK1P,WAAWe,SAAS,QAAS,MAAtE,EAES,EAAA8d,IAAM,SAACzgB,EAAgCqY,GACpC,OAACrY,EAAQsZ,IAAIipB,EAAmCviC,EAASqY,EAAO,GAAI2pB,KAAY3pB,GAAhF,EAEH,EAAAyI,IAAM,SAAC9gB,EAAgCqY,GACpC,OAACrY,EAAQsZ,IAAIipB,EAAmCviC,EAASqY,EAAO,GAAI4pB,KAAY5pB,GAAhF,EAEH,EAAA0I,IAAM,SAAC/gB,EAAgCqY,GACpC,OAACrY,EAAQsZ,IAAIipB,EAAmCviC,EAASqY,EAAO,GAAI6pB,KAAY7pB,GAAhF,EAEH,EAAA0J,KAAO,SAAC/hB,EAAgCqY,GACrC,OAACrY,EAAQsZ,IAAIipB,EAAmCviC,EAASqY,EAAO,GAAIuX,KAAavX,GAAjF,EAEH,EAAA+J,QAAU,SAACpiB,EAAgCqY,GACxC,OAACrY,EAAQsZ,IAAIipB,EAAmCviC,EAASqY,EAAO,GAAIwX,KAAgBxX,GAApF,EAEH,EAAAgK,IAAM,SAACriB,EAAgCqY,GACpC,OAACrY,EAAQsZ,IAAIipB,EAAmCviC,EAASqY,EAAO,GAAI8pB,KAAY9pB,GAAhF,EAEH,EAAAwK,KAAO,SAAC7iB,EAAgCqY,GACrC,OAACrY,EAAQsZ,IAAIipB,EAAmCviC,EAASqY,EAAO,GAAI+pB,KAAa/pB,GAAjF,EAEH,EAAA6K,IAAM,SAACljB,EAAgCqY,GACpC,OAACrY,EAAQsZ,IAAIipB,EAAmCviC,EAASqY,EAAO,GAAIgqB,KAAYhqB,GAAhF,EAEH,EAAA8K,KAAO,SAACnjB,EAAgCqY,GACrC,OAACrY,EAAQsZ,IAAIipB,EAAmCviC,EAASqY,EAAO,GAAIiqB,KAAajqB,GAAjF,C,8XC/ThB,cAEA,UACA,SAEA,UAEMqqB,EAAwB,CAC5BthC,KAAM,SACNuK,WAAY,CAAC,KACb2M,WAAY,CAAC,EAAAkB,YAAYC,SAGd,EAAAkpB,wBAA0B,SAAC3iC,EAAgCsb,GACtE,IAAMpQ,EAAOoQ,EAAMtC,KAAKtZ,OAElBic,GAAW,IAAAyL,aAAY,KAAMlc,GAC7B03B,EAAYjnB,EAAS7M,OAAO,GAC5BmlB,GAAiB,IAAAjnB,mBAAkB9B,GACnCoc,GAAgB,IAAAC,qBAEhBsb,EADkC,IAAtBvnB,EAAMtC,KAAKtZ,OACG,GA0BlC,SAAyBwL,EAAc8N,GACrC,GAAa,IAAT9N,EACF,MAAO,KAIT,IADA,IAAIF,EAAS,GACJtG,EAAI,EAAGA,EAAIwG,EAAMxG,IACxBsG,GAAUgO,EAAKtU,GACXA,EAAIwG,EAAO,IACbF,GAAU,KAGd,OAAOA,CACT,CAvCuC83B,CAAgB53B,EAAMyQ,GACrD3Q,EAASE,GAAQ,EAAI,KAAO,eAAQ03B,EAAUvhC,KAAK,KAAI,KACvDsI,GAAO,IAAAC,SAAQ5J,EAAQxB,QAAQ6H,QAAQiB,UAAU3G,SACjDqU,EAAe,gBACjBsS,EAAa,sCAEX2M,EAAc,mJAGW4O,EAAY,wBAEpCl5B,EAAKG,OAAM,2CAAmCkB,EAAM,6BAI3D,OAAO,EAAP,KACK03B,GAAqB,CACxBztB,SAAS,EACTnL,OAAQ,CAACkP,KAAMsC,EAAMtC,KAAMvW,KAAM6Y,EAAM7Y,KAAMwV,YAAa,EAAAuB,YAAYiC,UACtEzG,aAAY,GAEhB,EAEa,EAAAoI,8BAAgC,SAACpd,EAAgCsb,GAC1E,cAAKonB,GAAqB,CAAE7/B,IAAK,WAAM,WAAA8/B,yBAAwB3iC,EAASsb,EAAjC,GAAvC,C,kJC3CJ,cAGa,EAAAmI,UACT,SAACK,EAAyCzL,EAAkBqiB,GAC1D3W,EAAe1L,GACf,IAAM2N,EAAc,EAAAzY,UAAUw1B,eAAe1qB,EAAO,GAAGW,KAAM0hB,GAE7D,MAAO,CADQ5W,EAAiBzI,gBAAgBhD,EAAO,GAAI2N,GAE7D,EAES,EAAArC,aAAe,SAACG,EAAyCzL,GAEpE,OADA8nB,EAAkB9nB,IACX,IAAAoL,WAAUK,EAAkB,CAACzL,EAAO,IAAK5T,MAAMqiB,KAAKzO,EAAO,GAAG2e,aACvE,EAEa,EAAAtT,yBAA6D,SAACpS,GACvE,OAAAA,EAAK1P,WAAWsB,QAAQ,OAAxB,EAEJ,IAAM6gB,EAAiB,SAAC1L,GACtB,IAAKA,GAA4B,IAAlBA,EAAO3Y,OACpB,MAAM,IAAI6C,MAAM,+BAGlB,GAAuB,WAAnB8V,EAAO,GAAG5V,KACZ,MAAM,IAAIF,MAAM,8BAEpB,EAEM49B,EAAoB,SAAC9nB,GACzB,IAAKA,GAA4B,IAAlBA,EAAO3Y,OACpB,MAAM,IAAI6C,MAAM,gCAGlB,GAAuB,UAAnB8V,EAAO,GAAG5V,KACZ,MAAM,IAAIF,MAAM,sBAEpB,C,ojCCxCA,cAIA,UAEA,UAoBMygC,EAA0B,CAC9B5hC,KAAM,WACNuK,WAAY,CAAC,KACb2M,WAAY,CAAC,EAAAkB,YAAYiC,WAGd,EAAA6H,SACT,SAACQ,EAAyCzL,EAAkBzW,GAS1D,OARA,IAAAmiB,gBAAe1L,EAAQzW,GAQhB,CAPQkiB,EAAiBxK,IAAI,EAAD,KAE1B0pB,GAAuB,CAC1BtqB,UAAW9W,EAAWoiB,SACtBnhB,IAAK,WAAM,OAAAogC,EAA0Bnf,EAAkBzL,EAAQzW,EAApD,IAEbyW,GAEN,EAES,EAAAkL,0BACT,SAACjS,GAAyC,WAAA0qB,yBAAwB1qB,EAAM,EAA9B,EAEjC,EAAAkS,0BACT,SAAClS,GAAyC,WAAA0qB,yBAAwB1qB,EAAM,EAA9B,EAEjC,EAAA0qB,wBAA0B,SAAC1qB,EAAkB4xB,GACxD,IAAMhG,EAAYgG,GAAS,GAGrB/U,EAAO7c,EAAK1P,WAAWmB,UAAU,OAAQ,WAC/C,GAAa,YAATorB,GAA+B,WAATA,IAAsB+U,EAAQ,IAAe,UAAT/U,GAC5D,MAAM,IAAI5rB,MAAM,6BAAsB4rB,IAGxC,IAAI+N,EAAmB,GACnBgH,EAAQ,IACVhH,EAAS5qB,EAAK1P,WAAWqB,UAAU,WACnC,IAAAq6B,kBAAiBpB,EAAQ/N,EAAM+O,IAGjC,IAAMiG,EAAqB7xB,EAAK1P,WAAWe,SAAS,sBAAuB,GAErEy5B,EACF8G,EAAQ,GAAK5xB,EAAK1P,WAAWmB,UAAU,iCAAkC,cAAgB,aAC7F,IAE4C,IAFxC,CACE,aAAc,qBAAsB,uBAAwB,gBAAiB,qBAAsB,cACnG4K,QAAQyuB,GACZ,MAAM,IAAI75B,MAAM,qCAA8B65B,EAAuB,uBAEvE,IAAMgH,EAA4C,uBAA5BhH,EAChBiH,EAAmBD,EAEnBE,EACQ,YAATnV,GAAsB+U,GAAS,GAAM5xB,EAAK1P,WAAWmB,UAAU,eAAgB,sBAAwB,GAC5G,IAA+F,IAA3F,CAAC,qBAAsB,oBAAqB,QAAS,OAAQ,IAAI4K,QAAQ21B,GAC3E,MAAM,IAAI/gC,MAAM,wBAAiB+gC,EAAW,uBAG9C,IAAMC,EAAoBjyB,EAAK1P,WAAWe,SAAS,iBAAkB,KAC/D6gC,EAAkE,IAAjDlyB,EAAK1P,WAAWkB,OAAO,kBAAmB,GACjE,GAAI0gC,GAA2B,UAATrV,EACpB,MAAM,IAAI5rB,MAAM,4DAGlB,IAAMkhC,EACDP,EAAQ,IAAuB,YAAT/U,GAAkD,eAA5BiO,GAA4D,UAAhBkH,EAEzFI,EAAc,EACd3G,EAAiB,EACjBC,EAAgB,EAgBpB,OAdIkG,EAAQ,GAEN5xB,EAAK+G,OAAO3Y,OAAS,GACvBgkC,EAAc,EACd3G,EAAiB,EACjBC,EAAgB,IAEhBD,EAAiB,EACjBC,EAAgB,GAEC,IAAVkG,IACTnG,EAAiB,IAGZ,IAAAz7B,6BAA4B,CACjC4hC,MAAK,EACLhG,SAAQ,EACR/O,KAAI,EACJ+N,OAAM,EACNiH,mBAAkB,EAClB/G,wBAAuB,EACvBiH,iBAAgB,EAChBD,aAAY,EACZE,YAAW,EACXC,kBAAiB,EACjBC,eAAc,EACdC,yBAAwB,EACxBC,YAAW,EACX3G,eAAc,EACdC,cAAa,GAEjB,EAEA,IAAMiG,EACF,SAACnf,EAAyCzL,EAAkBzW,GAgB1D,IAfA,IAAM+H,GAAO,IAAAC,SAAQka,EAAiBtlB,QAAQ6H,QAAQiB,UAAU3G,SAC1D,IACFmjB,EAAiB9L,+BAA+BK,EAAO,GAAGW,KAAM,EAAAQ,YAAYiC,UAAS,GADlFghB,EAAU,KAAED,EAAW,KAGxBxW,EAAc3N,EAAO,GAAGW,KAAK7X,KAAI,SAACk7B,EAAK33B,GAAM,OAAA9E,KAAK0f,MAAM+c,EAAMz6B,EAAWs6B,OAAOx3B,GAAnC,IAC7C,IACFof,EAAiB9L,+BAA+BgO,EAAa,EAAAxM,YAAYiC,UAAS,GAD/E8gB,EAAW,KAAED,EAAY,KAE1BD,EAAMrW,EAAYtmB,OAElBikC,EAAgB,IAAIl/B,MAAc43B,GAClCuH,EAAe,IAAIn/B,MAAc43B,GACnCwH,EAAuB,qCACNxH,EAAG,uCACJA,EAAG,cAEdjvB,EAAIivB,EAAM,EAAGjvB,GAAK,EAAGA,IAC5Bu2B,EAAcv2B,GAAMA,IAAMivB,EAAM,EAAK,EAAIsH,EAAcv2B,EAAI,GAAK4Y,EAAY5Y,EAAI,GAChFw2B,EAAax2B,GAAMA,IAAMivB,EAAM,EAAK,EAAIuH,EAAax2B,EAAI,GAAKiL,EAAO,GAAGW,KAAK5L,EAAI,GAEjFy2B,GAAwB,mCACPz2B,EAAC,eAAOu2B,EAAcv2B,GAAE,oCACzBA,EAAC,eAAOw2B,EAAax2B,GAAE,eAGzC,IAAM02B,EAAwB,gGAEUrH,EAAU,aAAKD,EAAW,qDAChC7yB,EAAK8B,UAAS,yDAK1CuJ,EAAmC,YAApBpT,EAAWusB,KAE5B,gBACJ2V,EAAqB,2CACKzH,EAAG,gGAEkBE,EAAW,aAAKD,EAAY,uBAEzEuH,EAAoB,8DAGIxH,EAAG,+YAejB,IAARA,EAEI,gBACRyH,EAAqB,iIAG0BvH,EAAW,aAAKD,EAAY,uBAEzEuH,EAAoB,ykCA2BQxrB,EAAO,GAAGW,KAAK,GAAE,+sBAuBvC,gBACR8qB,EAAqB,iIAG0BvH,EAAW,aAAKD,EAAY,uBAEzEuH,EAAoB,8vBAoBQxrB,EAAO,GAAGW,KAAK,GAAE,+sBAsB/C,OAAO,EAAP,KACKgqB,GAAuB,CAC1Bl5B,OAAQ,CAACkP,KAAMgN,EAAavjB,KAAM4V,EAAO,GAAG5V,KAAMwV,YAAa,EAAAuB,YAAYiC,UAC3EzG,aAAY,EACZM,UAAW,CAAC,CACVlU,KAAM,SACNqB,KAAM,MACNsT,YAAanU,EAAWs6B,OAAOx8B,OAC/Bsb,KAAMpZ,EAAWs6B,OAAO/6B,KAAI,SAAA8mB,GAAK,OAAAroB,KAAKE,KAAKmoB,EAAV,OAGvC,EAES,EAAAlE,eAAiB,SAAC1L,EAAkBxX,GAC/C,IAAKwX,GAAWxX,EAAUqiC,MAAQ,GAAuB,IAAlB7qB,EAAO3Y,QACzCmB,EAAUqiC,OAAS,GAAKriC,EAAUqiC,MAAQ,IAAwB,IAAlB7qB,EAAO3Y,QACvDmB,EAAUqiC,OAAS,IAAM7qB,EAAO3Y,OAAS,EAC5C,MAAM,IAAI6C,MAAM,mBAGlB,GAAI1B,EAAUq7B,OAAOx8B,OAAS,GAAK2Y,EAAO,GAAGW,KAAKtZ,SAAWmB,EAAUq7B,OAAOx8B,OAC5E,MAAM,IAAI6C,MAAM,wBAGlB,GAAuB,WAAnB8V,EAAO,GAAG5V,KACZ,MAAM,IAAIF,MAAM,8BAEpB,EAEa,EAAA+6B,iBAAmB,SAACpB,EAAkB/N,EAAc+O,G,YAC/D,GAAKA,E,IAOH,IAAoB,QAAAhB,GAAM,8BACxB,GADc,SACD,EACX,MAAM,IAAI35B,MAAM,wC,2GARpB,IAAoB,QAAA25B,GAAM,8BACxB,GADc,QACF,EACV,MAAM,IAAI35B,MAAM,oD,kGAUtB,KAAa,WAAT4rB,GAA8B,UAATA,GACD,IAAlB+N,EAAOx8B,QAAmC,IAAlBw8B,EAAOx8B,QAA8B,IAAdw8B,EAAO,IAA0B,IAAdA,EAAO,IAC3E,MAAM,IAAI35B,MAAM,sLAEL26B,EAAW,SAAW,WAAU,cAGjD,C,upBC1VA,cAEA,UAEA,UACA,UAcA,aAKE,WACW6G,EAAqCz8B,EACrC08B,GADA,KAAAD,SAAAA,EAAqC,KAAAz8B,UAAAA,EACrC,KAAA08B,sBAAAA,EACTjjC,KAAKkjC,KAAO,IAAIniC,IAChBf,KAAKmjC,iBAAkB,CACzB,CAoJF,OAnJE,YAAAprB,YAAA,SAAYtW,GACV,OAAOzB,KAAKkjC,KAAKphC,IAAIL,EACvB,EACA,YAAA4W,YAAA,SAAY5W,EAAcoW,GACxB7X,KAAKkjC,KAAK/hC,IAAIM,EAAKoW,EACrB,EACA,YAAAU,IAAA,SAAI6qB,EAAyB9rB,EAAuBvO,GAApD,I,EAAA,OACE/I,KAAKgjC,SAASK,MAAM,KAAM,6BAAoD,QAA9B,EAAAD,EAAcz4B,YAAYtK,YAAI,QAAI,mBAAoB,W,MAC9FsG,EAAK,EAAKJ,UAAUI,GACpB0Q,EAAU+rB,EAAc/rB,QAC9B1Q,EAAG28B,WAAWjsB,GACd,IACE,EAAKksB,WAAWx6B,GACX,EAAKo6B,iBACR,EAAKK,eAAeJ,EAAcK,iBAEpC,EAAKC,aAAaN,EAAcO,iBAAqD,QAAnC,EAAAP,EAAcz4B,YAAY4J,iBAAS,QAAI,GAAI+C,E,CAC7F,MAAOssB,GAEP,MADA,EAAAn9B,OAAOo9B,MAAM,iBAAkBT,EAAcz4B,YAAYsJ,cACnD2vB,C,CAER,EAAKZ,SAASK,MAAM,UAAW,oBAAoB,WACjD,EAAK98B,UAAUu9B,MACjB,GACF,GAAG9jC,KAAKuG,UACV,EACA,YAAAZ,QAAA,sBACM3F,KAAK+jC,cACP/jC,KAAKuG,UAAUy9B,aAAahkC,KAAK+jC,cAEnC/jC,KAAKkjC,KAAKr4B,SAAQ,SAAAiH,GAAK,SAAKvL,UAAU09B,cAAcnyB,EAAEuF,QAA/B,GACzB,EACA,YAAAe,MAAA,SAAMzN,EAA0BK,EAAsCpD,GAAtE,WACE,OAAO5H,KAAKgjC,SAASK,MAAM,UAAW,wBAAwB,WAC5D,IAAMa,EAAe,IAAI,EAAAjvB,iBAAiB,EAAK1O,UAAWoE,EAAaK,EAAqBpD,GACtFu8B,EAAaD,EAAalwB,aAC1BqD,EAAU,EAAK+sB,QAAQD,GAQ7B,MAPiB,CACfx5B,YAAW,EACX0M,QAAO,EACPssB,iBAAkB,EAAKU,oBACnBhtB,EAAS6sB,EAAan9B,QAAQ4D,YAAYC,WAAYs5B,EAAan9B,QAAQ4D,YAAY4J,WAC3FkvB,gBAAiB,EAAKa,mBAAmBjtB,GAG7C,GACF,EACU,YAAA+sB,QAAV,SAAkBG,GAChB,IAAKvkC,KAAK+jC,aAAc,CACtB,EAAAt9B,OAAOG,QAAQ,kBAAmB,0DAClC,IAAM49B,GAAqB,IAAAC,uBAAsBzkC,KAAKuG,UAAU3G,SAChEI,KAAK+jC,aAAe/jC,KAAKuG,UAAUm+B,cAAcF,EAAoBxkC,KAAKuG,UAAUI,GAAGg+B,c,CAErF,EAAA3mC,IAAI4mC,OACN,EAAAn+B,OAAOG,QAAQ,kBAAmB,uBACtC29B,EAAgB,OAGd,IAAMM,EAAa7kC,KAAKuG,UAAUm+B,cAAcH,EAAkBvkC,KAAKuG,UAAUI,GAAGm+B,iBAC9EztB,EAAUrX,KAAKuG,UAAUw+B,cAAc/kC,KAAK+jC,aAAcc,GAEhE,OADA7kC,KAAKuG,UAAUy9B,aAAaa,GACrBxtB,CACT,EACA,YAAAksB,WAAA,SAAW5qB,GACT,IAAMxQ,EAAQwQ,EAAGxQ,MACXC,EAASuQ,EAAGvQ,OAClB,EAAA3B,OAAOG,QACH,kBACA,qDAA8CuB,EAAK,YAAIC,EAAM,mBAAWuQ,EAAGpP,MAAK,kBAAUoP,EAAGH,OAAO9W,OACxG1B,KAAKuG,UAAUy+B,kBAAkBrsB,EAAGjB,QAASvP,EAAOC,EACtD,EACA,YAAAo7B,eAAA,SAAeC,GACb,IAAMwB,EAAiBxB,EAAgByB,SACjCC,EAAqB1B,EAAgB2B,aAC3CplC,KAAKuG,UAAU8+B,oBAAoBJ,EAAgBE,GACnDnlC,KAAKmjC,iBAAkB,CACzB,EACA,YAAAO,aAAA,SAAaC,EAA6CpvB,EAA8B+wB,G,UAEhF3+B,EAAK3G,KAAKuG,UAAUI,GACtB4+B,EAAkB,E,WACV,EAAM7jC,EAAM,EAAUsT,GAChC,IAAMrV,EAA4C,QAApC,EAAA4U,EAAUixB,MAAK,SAAA1yB,GAAK,OAAAA,EAAEzS,OAAS,CAAX,WAAgB,eAAE4Z,KACpD,GAAa,cAATvY,IAAyB/B,EAC3B,MAAM,IAAI6B,MAAM,oBAAa,EAAI,iDAEnC,OAAQE,GACN,IAAK,YACH,EAAK+jC,YAAYH,EAASC,GAAkB,EAAUA,GACtDA,IACA,MACF,IAAK,QACCvwB,EACFrO,EAAG++B,WAAW,EAAU/lC,GAExBgH,EAAGg/B,UAAU,EAAUhmC,GAEzB,MACF,IAAK,MACCqV,EACFrO,EAAGi/B,WAAW,EAAUjmC,GAExBgH,EAAGk/B,UAAU,EAAUlmC,GAEzB,MACF,QACE,MAAM,IAAI6B,MAAM,mCAA4BE,I,aAzBlD,IAAkD,QAAAiiC,GAAgB,+BAAvD,c,EAAK,OAAM,OAAU,WAAa,c,mGA4B/C,EACA,YAAA8B,YAAA,SAAY9sB,EAAiBmtB,EAAqCZ,GAChEllC,KAAKuG,UAAUw/B,qBAAqBptB,EAAGjB,QAASwtB,EAAUY,EAC5D,EACA,YAAAxB,mBAAA,SAAmBjtB,GACjB,MAAO,CACL6tB,SAAUllC,KAAKgmC,kBAAkB3uB,EAAS,YAC1C+tB,aAAcplC,KAAKgmC,kBAAkB3uB,EAAS,gBAElD,EACA,YAAAgtB,oBAAA,SAAoBhtB,EAAuBxC,EAAqBN,G,YAExDovB,EAA8C,GACpD,GAAI9uB,E,IACF,IAAsB,QAAAA,GAAQ,8BAAE,CAA3B,IAAME,EAAO,QAChB4uB,EAAiB5+B,KAAK,CAAC1E,KAAM0U,EAASrT,KAAM,YAAaukC,SAAUjmC,KAAKkmC,mBAAmB7uB,EAAStC,I,mGAGxG,GAAIR,E,IACF,IAAuB,QAAAA,GAAS,8BAAE,CAA7B,IAAMpB,EAAQ,QACjBwwB,EAAiB5+B,KAAK,EAAD,KAAKoO,GAAQ,CAAE8yB,SAAUjmC,KAAKkmC,mBAAmB7uB,EAASlE,EAAS9S,Q,mGAG5F,OAAOsjC,CACT,EACA,YAAAuC,mBAAA,SAAmB7uB,EAAuBhX,GACxC,IACM8lC,EADKnmC,KAAKuG,UAAUI,GACLu/B,mBAAmB7uB,EAAShX,GACjD,GAAkB,OAAd8lC,EACF,MAAM,IAAI3kC,MAAM,kBAAWnB,EAAI,gBAEjC,OAAO8lC,CACT,EACA,YAAAH,kBAAA,SAAkB3uB,EAAuBhX,GAGvC,OAFWL,KAAKuG,UAAUI,GACWq/B,kBAAkB3uB,EAAShX,EAElE,EACF,EA9JA,GAAa,EAAA+lC,eAAAA,C,kHCjBb,cAEA,UAKA,UACA,UACA,UACA,UACA,UAGA,aAWE,WAA4B9gC,EAAuCyB,GAAvC,KAAAzB,QAAAA,EAAuC,KAAAyB,QAAAA,EACjE/G,KAAKmX,eAAiB,IAAI,EAAAkvB,sBAAsB/gC,EAAQiB,UAAU+/B,gBAClEtmC,KAAK8X,eAAiB,IAAI,EAAAsuB,eAAepmC,KAAK+G,QAAQi8B,SAAU19B,EAAQiB,UAAWvG,KAAKmX,gBACxFnX,KAAKma,eAAiB,IAAI,EAAAosB,eACtBjhC,EAAQiB,UAAWvG,KAAKmX,eAAgBnX,KAAK+G,QAAQi8B,SACrD,CAACwD,cAA4C,SAA7BlhC,EAAQc,mBAC5BpG,KAAK+W,uBAAyB,IAAIhW,IAClCf,KAAKgX,yBAA2B,IAAIjW,IACpCf,KAAKqG,KAAOf,EAAQe,KACpBrG,KAAKymC,eAAiB,IAAI1lC,IAC1Bf,KAAK0mC,eAAiB,IAAI3lC,GAC5B,CA0CF,OAxCE,YAAA4lC,uBAAA,WACE,OAAO,IAAI,EAAArqB,sBAAsBtc,KACnC,EACA,YAAA4mC,mBAAA,SAAmBC,GACjB,IAAMC,EAAeD,EAAME,YAAYl0B,QAAO,SAAAC,GAAK,OAAY,IAAZA,EAAEiT,MAAejT,EAAE0F,MAAnB,IAA2BpY,KAAI,SAAA0S,GAAK,OAAAA,EAAE0F,OAAQK,MAAV,IACvF7Y,KAAK8mC,aAAe,IAAIl2B,IAAIk2B,EAC9B,EACA,YAAAjrB,cAAA,SAAcN,GACZ,QAAOvb,KAAK8mC,cAAe9mC,KAAK8mC,aAAa71B,IAAIsK,EACnD,EACA,YAAAyrB,eAAA,SAAezrB,GACbvb,KAAK8mC,aAAa51B,IAAIqK,EACxB,EACA,YAAA3C,eAAA,SAAe2C,EAAqB1T,GAClC,OAAIA,EACK7H,KAAK+W,uBAAuBjV,IAAIyZ,GAEhCvb,KAAKgX,yBAAyBlV,IAAIyZ,EAE7C,EACA,YAAAK,eAAA,SAAeL,EAAqBC,EAA0B3T,QAAA,IAAAA,IAAAA,GAAA,GAC5D,EAAApB,OAAOG,QAAQ,sBAAuB,iCAClCiB,EACF7H,KAAK+W,uBAAuB5V,IAAIoa,EAAUC,GAE1Cxb,KAAKgX,yBAAyB7V,IAAIoa,EAAUC,EAEhD,EACA,YAAA7V,QAAA,sBACE3F,KAAK8X,eAAenS,UACpB3F,KAAKma,eAAe4B,sBACpB/b,KAAK+W,uBAAuBlM,SAAQ,SAAA8N,GAAM,SAAKwB,eAAe6B,eAAerD,GAAI,EAAvC,IAC1C3Y,KAAK+W,uBAAyB,IAAIhW,IAClCf,KAAKgX,yBAAyBnM,SAAQ,SAAA8N,GAAM,SAAKwB,eAAe6B,eAAerD,GAAI,EAAvC,IAC5C3Y,KAAKgX,yBAA2B,IAAIjW,GACtC,EACA,YAAA3B,QAAA,SAAQmR,EAAkB02B,EAA0BJ,GAClD,IAAMK,GAAK,IAAAC,iBAAgB52B,EAAM02B,EAAQ,EAAA1qB,wBACzC,MAAO,CAAC6qB,KAAMF,EAAGG,OAAQtgC,QAASmgC,EAAGI,OAASJ,EAAGI,OAAO/2B,EAAMs2B,GAASt2B,EACzE,EACF,EAhEA,GAAa,EAAAvJ,oBAAAA,C,8JChBb,cAqCA,aAKE,WAAYL,EAA4BiU,GACtC,QADsC,IAAAA,IAAAA,EAAA,GACrB,IAAbA,EACF5a,KAAKunC,eAAiB5gC,EAAG6gC,KACzBxnC,KAAKynC,OAAS9gC,EAAG+gC,IACjB1nC,KAAKkX,YAAcvQ,EAAGlE,MACtBzC,KAAKoyB,YAAcxX,MACd,IAAiB,IAAbA,EAMT,MAAM,IAAIpZ,MAAM,sCAA+BoZ,IAL/C5a,KAAKunC,eAAiB5gC,EAAGghC,QACzB3nC,KAAKynC,OAAS9gC,EAAGihC,KACjB5nC,KAAKkX,YAAcvQ,EAAGlE,MACtBzC,KAAKoyB,YAAcxX,C,CAIvB,CA6BF,OA5BE,YAAAtJ,OAAA,SAAOu2B,EAA4BC,GACjC,IAAIz/B,EACAqB,EAcJ,OAbIm+B,EAAIE,cAAgBxuB,eACtB,EAAA9S,OAAOK,QAAQ,UAAW,2DAC1B4C,EAAS,IAAI6P,aAAasuB,IAExBC,EAAc9nC,KAAKoyB,YAAcyV,EAAIlpC,QACvC,EAAA8H,OAAOK,QAAQ,UAAW,kDAC1B4C,EAASm+B,EACTx/B,EAASrI,KAAKgoC,SAASF,EAAc9nC,KAAKoyB,aAC1C1oB,EAAOmB,SAAQ,SAACiI,EAAGnP,GAAM,OAAA0E,EAAO1E,GAAKmP,CAAZ,KAGzBzK,EADAqB,EAASm+B,EAGJx/B,CACT,EACA,YAAA2/B,SAAA,SAASzmC,GACP,OAAO,IAAIgY,aAAoB,EAAPhY,EAC1B,EACA,YAAAgQ,OAAA,SAAO2H,EAA+B+uB,GACpC,OAAyB,IAArBjoC,KAAKoyB,YACelZ,EAAwBrG,QAAO,SAAClT,EAAOgP,GAAU,OAAAA,EAAQ,GAAM,CAAd,IAAiB+K,SAAS,EAAGuuB,GAG/F/uB,EAAOQ,SAAS,EAAGuuB,EAC5B,EACF,EAhDA,GAAa,EAAAC,sBAAAA,EAoDb,iBAKE,WAAYvhC,EAA2BiU,EAAc1D,GACnD,QADqC,IAAA0D,IAAAA,EAAA,GACpB,IAAbA,GAA+B,IAAbA,EACpB,MAAM,IAAIpZ,MAAM,sCAA+BoZ,IAEjD5a,KAAKunC,eAAiB5gC,EAAGihC,KACzB5nC,KAAKynC,OAAS9gC,EAAGihC,KACjB5nC,KAAKoyB,YAAcxX,EACnB5a,KAAKkX,YAAcA,GAAevQ,EAAGlE,KACvC,CAoBF,OAnBE,YAAA6O,OAAA,SAAOu2B,EAAmBC,GACxB,IAAIK,EAAON,EAMX,OALyB,IAArB7nC,KAAKoyB,cACP,EAAA3rB,OAAOG,QAAQ,UAAW,iCAC1BuhC,EAAOnoC,KAAKgoC,SAASF,GACrBD,EAAIh9B,SAAQ,SAACiI,EAAGnP,GAAM,OAAAwkC,EAAS,EAAJxkC,GAASmP,CAAd,KAEjBq1B,CACT,EACA,YAAAH,SAAA,SAASzmC,GACP,OAAO,IAAIgY,aAAoB,EAAPhY,EAC1B,EACA,YAAAgQ,OAAA,SAAO2H,EAA+B+uB,GACpC,OAAyB,IAArBjoC,KAAKoyB,YACelZ,EAAwBrG,QAAO,SAAClT,EAAOgP,GAAU,OAAAA,EAAQ,GAAM,CAAd,IAAiB+K,SAAS,EAAGuuB,GAG/F/uB,EAAOQ,SAAS,EAAGuuB,EAC5B,EACF,EAjCA,GAAa,EAAAG,qBAAAA,EAmCb,iBAKE,WAAYzhC,EAA2BiU,GACrC,QADqC,IAAAA,IAAAA,EAAA,GADvC,KAAAwX,YAAc,EAEK,IAAbxX,EACF5a,KAAKunC,eAAiB5gC,EAAG0hC,MACzBroC,KAAKynC,OAAS9gC,EAAG0hC,MACjBroC,KAAKkX,YAAcvQ,EAAG2hC,cACtBtoC,KAAKoyB,YAAcxX,MACd,IAAiB,IAAbA,EAMT,MAAM,IAAIpZ,MAAM,sCAA+BoZ,IAL/C5a,KAAKunC,eAAiB5gC,EAAGihC,KACzB5nC,KAAKynC,OAAS9gC,EAAGihC,KACjB5nC,KAAKkX,YAAcvQ,EAAG2hC,cACtBtoC,KAAKoyB,YAAcxX,C,CAIvB,CAaF,OAZE,YAAAtJ,OAAA,SAAOu2B,EAAiBU,GACtB,OAAO,IAAIt2B,WAAW41B,EAAI3uB,OAAQ2uB,EAAIW,WAAYX,EAAIY,WACxD,EACA,YAAAT,SAAA,SAASzmC,GACP,OAAO,IAAI0Q,WAAW1Q,EAAOvB,KAAKoyB,YACpC,EACA,YAAA7gB,OAAA,SAAO2H,EAA+B+uB,GACpC,GAAI/uB,aAAkBjH,WACpB,OAAOiH,EAAOQ,SAAS,EAAGuuB,GAE5B,MAAM,IAAIzmC,MAAM,8BAAuB0X,EAAO6uB,aAChD,EACF,EAhCA,GAAa,EAAAW,iBAAAA,C,+PC5Hb,cACA,UAmBA,aACE,WAAmBpC,GAAA,KAAAA,eAAAA,CAAyB,CAoC9C,OAnCE,YAAAqC,iBAAA,SAAiBp/B,EAA0Bq/B,GAEzC,GAAqB,IAAjBr/B,EAAM5K,OACR,MAAO,CAAC,EAAG,GAEb,IAAM2nC,EAAiBtmC,KAAKsmC,eAC5B,GAAIsC,QAA6BrmC,IAApBqmC,EAAMC,UAAyB,CAE1C,IAAMC,EAAQF,EAAMC,WAAat/B,EAAM5K,OAAS,EAAI4K,EAAMwE,MAAM66B,EAAMC,WAAWzP,QAAO,SAACtnB,EAAG5H,GAAM,OAAA4H,EAAI5H,CAAJ,IAC5F6+B,EAAQH,EAAMC,WAAa,EAAI,EAAIt/B,EAAMwE,MAAM,EAAG66B,EAAMC,WAAWzP,QAAO,SAACtnB,EAAG5H,GAAM,OAAA4H,EAAI5H,CAAJ,IAC1F,KAAI4+B,EAAQxC,GAAkByC,EAAQzC,GAOpC,MAAO,CAACwC,EAAOC,GAJf,EAAAtiC,OAAOG,QACH,gBACA,kEAA2D2C,EAAK,uBAAeq/B,EAAMC,W,CAS7F,IAJA,IAAMG,EAAYz/B,EAAM6vB,QAAO,SAACtnB,EAAG5H,GAAM,OAAA4H,EAAI5H,CAAJ,IAErC/B,EAAQtJ,KAAK0f,MAAM1f,KAAKijB,KAAKknB,IAE1B7gC,EAAQm+B,GAAkBn+B,EAAQ6gC,GACnCA,EAAY7gC,GAAU,EADwBA,KAMpD,GAAIA,GAASm+B,GAAkB0C,EAAY7gC,GAAU,EACnD,MAAM,IAAI3G,MAAM,kEAA2D+H,IAE7E,MAAO,CAACpB,EAAO6gC,EAAY7gC,EAC7B,EACF,EArCA,GAAa,EAAA8gC,+BAAAA,EAuCb,iBACE,WAAmB3C,GAAA,KAAAA,eAAAA,CAAyB,CAwF9C,OAvFE,YAAAqC,iBAAA,SAAiBp/B,EAA0Bq/B,GACzC,IAAMM,EAAKlpC,KAAKmpC,eAAe5/B,EAAOq/B,GAKtC,OAJIA,GAASA,EAAM/gC,WACjBqhC,EAAG,IAAM,EACTA,EAAG,IAAM,GAEPN,GAASA,EAAM/uB,UACV,CAACqvB,EAAG,GAAIA,EAAG,IAEbA,CACT,EAEA,YAAAC,eAAA,SAAe5/B,EAA0Bq/B,GACvC,IAAM/gC,EAAW+gC,GAASA,EAAM/gC,SAEhC,GAAqB,IAAjB0B,EAAM5K,OACR,OAAOkJ,EAAW,CAAC,EAAG,GAAK,CAAC,EAAG,GAEjC,IAAIy+B,EAAiBtmC,KAAKsmC,eAC1B,GAAIsC,QAA6BrmC,IAApBqmC,EAAMC,UAAyB,CAE1C,IAAMC,EAAQF,EAAMC,WAAat/B,EAAM5K,OAAS,EAAI4K,EAAMwE,MAAM66B,EAAMC,WAAWzP,QAAO,SAACtnB,EAAG5H,GAAM,OAAA4H,EAAI5H,CAAJ,IAC5F6+B,EAAQH,EAAMC,WAAa,EAAI,EAAIt/B,EAAMwE,MAAM,EAAG66B,EAAMC,WAAWzP,QAAO,SAACtnB,EAAG5H,GAAM,OAAA4H,EAAI5H,CAAJ,IAC1F,KAAI4+B,EAAQxC,GAAkByC,EAAQzC,GAOpC,MAAO,CAACwC,EAAOC,GAJf,EAAAtiC,OAAOG,QACH,gBACA,kEAA2D2C,EAAK,uBAAeq/B,EAAMC,W,CAK7F,IAAIO,EAAW7/B,EAAMwE,MAAM,GAoB3B,GAnBIlG,IACFy+B,GAAkC,EAYV,KALxB8C,EAAWA,EAAShpC,KAChB,SAACiM,EAAG1I,GAAM,OAAAA,GAAKylC,EAASzqC,OAAS,EAAKyqC,EAASzlC,GAAK,GAAM,EAAIylC,EAASzlC,GAAKylC,EAASzlC,GAAK,EAAKylC,EAASzlC,EAA9F,KAIDhF,SACXyqC,EAAW,CAAC,EAAGA,EAAS,MAKJ,IAApBA,EAASzqC,OAAc,CACzB,IAAM0qC,EAAgBv6B,EAAas6B,GACnCA,EAAWC,EAAct6B,Q,CAG3B,IAAMxN,EAAO+nC,EAAcF,GAC3B,OAAIA,EAASzqC,QAAU,GAAK4C,GAAQ+kC,EAC3B,CAAC,EAAG/kC,GACkB,IAApB6nC,EAASzqC,QAAgByqC,EAAS,IAAM9C,GAAkB8C,EAAS,IAAM9C,EAC3E8C,EACsB,IAApBA,EAASzqC,QAAgByqC,EAAS,GAAKA,EAAS,IAAM9C,GAAkB8C,EAAS,IAAM9C,EACzF,CAAC8C,EAAS,GAAKA,EAAS,GAAIA,EAAS,IACf,IAApBA,EAASzqC,QAAgByqC,EAAS,IAAM9C,GAAkB8C,EAAS,GAAKA,EAAS,IAAM9C,EACzF,CAAC8C,EAAS,GAAIA,EAAS,GAAKA,EAAS,IAEtB,IAApBA,EAASzqC,QAAgByqC,EAAS,GAAKA,EAAS,GAAKA,EAAS,IAAM9C,GACpE8C,EAAS,IAAM9C,EACV,CAAC8C,EAAS,GAAKA,EAAS,GAAKA,EAAS,GAAIA,EAAS,IAEpC,IAApBA,EAASzqC,QAAgByqC,EAAS,IAAM9C,GACxC8C,EAAS,GAAKA,EAAS,GAAKA,EAAS,IAAM9C,EACtC,CAAC8C,EAAS,GAAIA,EAAS,GAAKA,EAAS,GAAKA,EAAS,IAEtDvhC,EAMK0hC,EAAoBhoC,EAAO,GAAGnB,KAAI,SAAAiM,GAAK,OAAI,EAAJA,CAAA,IAEzCk9B,EAAoBhoC,EAE/B,EACF,EAzFA,GA2FA,SAAgBuN,EAAavF,EAAiB0c,GAM5C,IALA,IAAMlX,EAAqB,GACrBC,EAAqB,GACrBw6B,EAAuB,MAARvjB,GAAgBviB,MAAM+lC,QAAQxjB,IAAyB,IAAhBA,EAAKtnB,OAC3Dg7B,EAAgB,MAAR1T,GAAgBujB,EAAgB,KAAOE,EAAezjB,EAAM1c,GAAOpJ,OAC7Eq/B,EAAI,EACC77B,EAAI,EAAGA,EAAI4F,EAAM5K,SAAUgF,EAAG,CACrC,GAAY,MAARg2B,EAAc,CAChB,GAAIA,EAAK6F,KAAO77B,GAAkB,IAAb4F,EAAM5F,GACzB,MAAM,IAAInC,MAAM,6BAAsBmC,EAAC,2BAAmB4F,EAAM5F,GAAE,gBAEpD,MAAXg2B,EAAK6F,IAAc7F,EAAK6F,GAAK77B,IAAmB,IAAb4F,EAAM5F,KAC5CoL,EAAShK,KAAKwE,EAAM5F,IACpBqL,EAASjK,KAAKpB,IAEZg2B,EAAK6F,IAAM77B,GACb67B,G,CAGa,IAAbj2B,EAAM5F,KACRoL,EAAShK,KAAKwE,EAAM5F,IACpBqL,EAASjK,KAAKpB,G,CAGlB,MAAO,CAACoL,SAAQ,EAAEC,SAAQ,EAC5B,CAEA,SAAgB06B,EAAezjB,EAAuB1c,GACpD,IAAMY,EAAOZ,EAAM5K,OAkBnB,OAfAsnB,EAAe,MAARA,EAAe1c,EAAMnJ,KAAI,SAACiE,EAAGV,GAAM,OAAAA,CAAA,IAAM,GAAgB4Z,OAAO0I,IAGvE,IAAA0jB,QACI1jB,EAAKmV,OAAM,SAAAwO,GAAM,OAAAA,IAAOz/B,GAAQy/B,EAAKz/B,CAApB,KACjB,WAAM,4DAA+CA,EAAI,aAAKA,EAAI,UAC9D,mBAAY8b,EADV,KAIV,IAAA0jB,QACI1jB,EAAKmV,MAAMyO,IACX,WAAM,uDACF,mBAAY5jB,EADV,IAIHA,EAAK7lB,KAAI,SAAA0R,GAAK,OAAAA,EAAI,EAAI3H,EAAO2H,EAAIA,CAAnB,GACvB,CACA,SAAgB+3B,EAAM/3B,GACpB,OAAOA,EAAI,GAAM,CACnB,CACA,SAAgBw3B,EAAc//B,GAC5B,GAAqB,IAAjBA,EAAM5K,OAER,OAAO,EAGT,IADA,IAAI4C,EAAOgI,EAAM,GACR5F,EAAI,EAAGA,EAAI4F,EAAM5K,OAAQgF,IAChCpC,GAAQgI,EAAM5F,GAEhB,OAAOpC,CACT,CAQA,SAAgBgoC,EAAoBhoC,GAClC,IAAM4G,EAAQtJ,KAAKE,KAAKF,KAAKijB,KAAKvgB,IAClC,MAAO,CAAC4G,EAAOtJ,KAAKE,KAAKwC,EAAO4G,GAClC,CAnKa,EAAAk+B,sBAAAA,EA2Fb,iBA2BA,mBAqBA,UAGA,kBAWA,uBAA4B98B,GAC1B,GAAqB,IAAjBA,EAAM5K,OACR,MAAM6C,MAAM,wDAGd,MAAO,CAAC+H,EAAM5K,OAAS,EAAI4K,EAAMA,EAAM5K,OAAS,GAAK,EAAG4K,EAAMA,EAAM5K,OAAS,GAC/E,EACA,wBAIA,uBAA4B4K,EAAiBugC,GAC3C,YAD2C,IAAAA,IAAAA,EAAA,GACpCR,EAAc//B,EAAMwE,MAAM,EAAGxE,EAAM5K,OAASmrC,GACrD,C,kfCjOA,cAGA,UAEa,EAAA9xB,mCACT,SAACirB,EAA8C15B,EAC9C2N,GACC,IAAMyP,EAAWzP,IAAgB,EAAAuB,YAAYiC,UAAYxD,IAAgB,EAAAuB,YAAYwc,iBAAoB,EAAI,EACvGptB,EAAWqP,IAAgB,EAAAuB,YAAYC,OACvCmB,EAAa3C,IAAgB,EAAAuB,YAAYwc,kBAAoB/d,IAAgB,EAAAuB,YAAYC,OACzFmwB,EAAY3xB,IAAgB,EAAAuB,YAAYM,oBAAsBxP,EAAM5K,OAAS,OAAI4D,EACjF0F,EAAgBiP,IAAgB,EAAAuB,YAAYM,oBAC9CxP,EAAMnJ,KAAI,SAACiM,EAAG1I,GAAM,OAAAA,IAAM4F,EAAM5K,OAAS,EAAQ,EAAJ0N,EAAQA,CAAjC,SACpB9J,EACJ,OAAO,IAAAqX,8BACHqpB,EAAuB15B,EAAOod,EAAS1e,EAAe,CAACJ,SAAQ,EAAEgS,UAAS,EAAEgvB,UAAS,GAC3F,EAES,EAAA5xB,+BACT,SAACgsB,EAA8C15B,EAA0B2N,GAEnE,IAAMrH,GAAS,IAAAmI,oCAAmCirB,EAAuB15B,EAAO2N,GAChF,MAAO,CAACrH,EAAO1H,MAAO0H,EAAOzH,OAC/B,EAKK,EAAAwR,6BACT,SAACqpB,EAA8C15B,EAA0BqR,EACxE3S,EAAmC2gC,QADqC,IAAAhuB,IAAAA,EAAA,GAEvE,IAAM/S,KAAc+gC,IAASA,EAAM/gC,UAC7B,IAAkBo7B,EAAsB0F,iBAAiB9gC,GAAWI,GAAyBsB,EAAOq/B,GAAM,GAAzGzgC,EAAK,KAAEC,EAAM,KACd+B,EAAOZ,EAAM5K,OACforC,EAAexgC,EAAMwE,MAAM,GAI/B,GAHa,IAAT5D,IACF4/B,EAAe,CAAC,IAED,IAAbnvB,EAEF3S,EAAgBsB,OACX,GAAI1B,EAAU,CACnB,GAAiB,IAAb+S,EACF,MAAM,IAAIpZ,MAAM,sCAElByG,EAAgBsB,EACZY,EAAO,IACT4/B,EAAa5/B,EAAO,GAAKtL,KAAKE,KAAKgrC,EAAa5/B,EAAO,GAAK,IAE1DA,EAAO,IACT4/B,EAAa5/B,EAAO,GAAKtL,KAAKE,KAAKgrC,EAAa5/B,EAAO,GAAK,G,MAEzD,IAAKlC,EACV,MAAM,IAAIzG,MAAM,oDAElB,MAAO,CACL2G,MAAK,EACLC,OAAM,EACNwS,SAAQ,EACR/S,SAAQ,EACR0B,MAAOwgC,EACP3/B,QAAS,EAAAoC,UAAUqO,eAAekvB,GAClC9hC,cAAa,EACb+hC,WAAapB,GAASA,EAAM/uB,UAEhC,C,igDClEJ,cAsBA,aAME,WACWtT,EAAgC4Q,EAA8C6rB,EAC7EiH,GADD,KAAA1jC,UAAAA,EAAgC,KAAA4Q,eAAAA,EAA8C,KAAA6rB,SAAAA,EAC7E,KAAAiH,OAAAA,EAJK,KAAAC,YAAuE,IAAInpC,IAKtFkpC,EAAOzD,gBACTxmC,KAAKmqC,cAAgB,IAAIppC,IACzBf,KAAKoqC,aAAe,IAAIrpC,IACxBf,KAAKqqC,cAAgB,IAAItpC,IAE7B,CAoLF,OAnLE,YAAAqZ,wBAAA,SACIJ,EAA2BnK,EAAuBoK,EAA0BC,GAC9E,IAAMowB,EAAkBtqC,KAAKuqC,cAAcvwB,GAErCwwB,EAAUxqC,KAAKuG,UAAUkkC,WAAWH,EAAiBz6B,EAAO+K,UAAY,EAAGV,GACjF,GAAIrK,EAAOhI,UAAsB,IAAVqS,EACrB,MAAM,IAAI1Y,MAAM,mBAElB,IAGIC,EACA0oC,EAJEhiC,EAAQ0H,EAAO1H,MACfC,EAASyH,EAAOzH,OAItB,GAAIpI,KAAKiqC,OAAOzD,cAAe,CAC7B/kC,EAAM,UAAG0G,EAAK,YAAIC,EAAM,YAAIoiC,EAAQ/C,OAAM,YAAI+C,EAAQjD,eAAc,YAAIiD,EAAQtzB,cAChFizB,EAAgBnqC,KAAKmqC,cAAcroC,IAAIL,MAErC0oC,EAAgB,GAChBnqC,KAAKmqC,cAAchpC,IAAIM,EAAK0oC,IAG9B,IAAMC,EAAepqC,KAAKoqC,aAAatoC,IAAIL,GAC3C,GAAI2oC,GAAgBA,EAAazrC,OAAS,EAAG,CAC3C,IAAM,EAAUyrC,EAAaM,MAK7B,OAJAP,EAAcplC,KAAK,GACL,IAAVmV,GACFla,KAAKuG,UAAUokC,cAAc,EAASxiC,EAAOC,EAAQoiC,EAASxqC,KAAK4qC,cAAc5wB,EAAUC,IAEtF,C,EAIX,EAAAxT,OAAOG,QAAQ,iBAAkB,uCAAgCiJ,EAAO1H,MAAK,YAAI0H,EAAOzH,SACxF,IAAMsP,EAAU1X,KAAKuG,UAAUskC,gBAAgB1iC,EAAOC,EAAQoiC,EAASxqC,KAAK4qC,cAAc5wB,EAAUC,IAMpG,OAJIja,KAAKiqC,OAAOzD,gBACd2D,EAAeplC,KAAK2S,GACpB1X,KAAKqqC,cAAclpC,IAAIuW,EAASjW,IAE3BiW,CACT,EACA,YAAAgE,YAAA,SAAY/C,EAAiBqB,EAA2BY,GAAxD,WAIE,OAHKA,IACHA,EAAW,GAEN5a,KAAKgjC,SAASK,MAAM,UAAW,8BAA8B,WAClE,IAAM4E,EAAWtvB,EAAGpP,MAAM6vB,QAAO,SAACtnB,EAAG5H,GAAM,OAAA4H,EAAI5H,CAAJ,IAAS0Q,EAC9CX,EAAO,EAAK1T,UAAUmV,YACxB/C,EAAGjB,QAASiB,EAAGxQ,MAAOwQ,EAAGvQ,OAAQ6/B,EAAU,EAAKsC,cAAcvwB,GAAWY,GAC7E,OAAO,EAAKkwB,aAAa9wB,EAAUC,EACrC,GACF,EACM,YAAA0B,iBAAN,SAAuBhD,EAAiBqB,EAA2BY,G,kFAKjE,OAJM/B,EAASF,EAAGH,OAAOK,OACpB+B,IACHA,EAAW,GAET5a,KAAKkqC,YAAYj5B,IAAI4H,IACjB,EAAc7Y,KAAKkqC,YAAYpoC,IAAI+W,GAClC,CAAP,EAAO,IAAI1Z,SAA2B,SAAAC,GAAW,oBAAW,EAAX,EAAa2F,KAAK3F,EAAlB,MAE5C,CAAP,EAAOY,KAAKgjC,SAASK,MAAM,UAAW,mCAAmC,gD,8DAIvE,OAHArjC,KAAKkqC,YAAY/oC,IAAI0X,EAAQ,IACvBovB,EAAWtvB,EAAGpP,MAAM6vB,QAAO,SAACtnB,EAAG5H,GAAM,OAAA4H,EAAI5H,CAAJ,IAAS0Q,EAEpD,GAAM5a,KAAKuG,UAAUwkC,yB,OAOrB,OAPA,SACM9wB,EAAOja,KAAKuG,UAAUmV,YACxB/C,EAAGjB,QAASiB,EAAGxQ,MAAOwQ,EAAGvQ,OAAQ6/B,EAAUjoC,KAAKuqC,cAAcvwB,GAAWY,GACvEowB,EAAahrC,KAAK8qC,aAAa9wB,EAAUC,GACzCgxB,EAAcjrC,KAAKkqC,YAAYpoC,IAAI+W,GACzC7Y,KAAKkqC,YAAYvoC,OAAOkX,GACxBoyB,SAAAA,EAAapgC,SAAQ,SAAAzL,GAAW,OAAAA,EAAQ4rC,EAAR,IACzB,CAAP,EAAOA,G,kBAGX,YAAA9uB,wBAAA,SAAwBvD,GAAxB,WACE,OAAO3Y,KAAKgjC,SAASK,MAAM,UAAW,0CAA0C,WAC9E,IAAM4E,EAAWtvB,EAAGpP,MAAM6vB,QAAO,SAACtnB,EAAG5H,GAAM,OAAA4H,EAAI5H,CAAJ,IACrC+P,EAAO,EAAK1T,UAAUmV,YAAY/C,EAAGjB,QAASiB,EAAGxQ,MAAOwQ,EAAGvQ,OAAmB,EAAX6/B,EAAc,OAAQ,GAC/F,OAAO,IAAI1uB,aAAaU,EAAKf,OAAQe,EAAKuuB,WAAYP,EACxD,GACF,EACA,YAAAjsB,eAAA,SAAeR,EAA0B0vB,GACvC,IAAIzpC,EACJ,GAAIzB,KAAKiqC,OAAOzD,gBACd/kC,EAAMzB,KAAKqqC,cAAcvoC,IAAI0Z,EAAY9D,UAChC,CACHwzB,GACFlrC,KAAKqqC,cAAc1oC,OAAOF,GAE5B,IAAM0oC,EAAgBnqC,KAAKmqC,cAAcroC,IAAIL,GAC7C,GAAI0oC,EAAe,CACjB,IAAMx7B,EAAQw7B,EAAcv9B,QAAQ4O,EAAY9D,SAChD,IAAe,IAAX/I,EAAc,CAChBw7B,EAAcgB,OAAOx8B,EAAO,GAC5B,IAAIy7B,EAAepqC,KAAKoqC,aAAatoC,IAAIL,GACpC2oC,IACHA,EAAe,GACfpqC,KAAKoqC,aAAajpC,IAAIM,EAAK2oC,IAE7BA,EAAarlC,KAAKyW,EAAY9D,Q,GAMjCjW,IAAOypC,IACV,EAAAzkC,OAAOG,QAAQ,iBAAkB,mCAA4B4U,EAAYrT,MAAK,YAAIqT,EAAYpT,SAC9FpI,KAAKuG,UAAU2kC,cAAc1vB,EAAY9D,SAE7C,EACA,YAAAozB,aAAA,SAAa9wB,EAA2BC,GACtC,OAAQD,GACN,IAAK,QACH,OAAOC,aAAgBmxB,WAAanxB,EAAOmxB,WAAWrlB,KAAK9L,GAC7D,IAAK,QACH,OAAOA,aAAgBwiB,WAAaxiB,EAAOwiB,WAAW1W,KAAK9L,GAC7D,IAAK,OACH,OAAOA,aAAgBoxB,UAAYpxB,EAAOoxB,UAAUtlB,KAAK9L,GAC3D,IAAK,SACH,OAAOA,aAAgBqxB,YAAcrxB,EAAOqxB,YAAYvlB,KAAK9L,GAC/D,IAAK,SACH,OAAOA,aAAgBlI,YAAckI,EAAOlI,YAAYgU,KAAK9L,GAC/D,IAAK,QACL,IAAK,OACH,OAAOA,aAAgBhI,WAAagI,EAAOhI,WAAW8T,KAAK9L,GAC7D,IAAK,UACH,OAAOA,aAAgBV,aAAeU,EAAOV,aAAawM,KAAK9L,GACjE,IAAK,UACH,OAAOA,aAAgBsxB,aAAetxB,EAAOsxB,aAAaxlB,KAAK9L,GACjE,QACE,MAAM,IAAIzY,MAAM,0BAAmBwY,EAAQ,sBAEjD,EACA,YAAA4wB,cAAA,SAAc5wB,EAA2BC,GACvC,GAAKA,EAGL,OAAQA,aAAgBV,aAAgBU,EAAO,IAAIV,aAAaU,EAmBlE,EACA,YAAAswB,cAAA,SAAciB,GACZ,MAAO,OAgBT,EACA,YAAAzvB,oBAAA,WACE/b,KAAKuG,UAAUwV,qBACjB,EACF,EAlMA,GAAa,EAAAwqB,eAAAA,C,kCCgBb,IAAY9tB,E,uEAAAA,EAAA,EAAAA,cAAA,EAAAA,YAAW,KACrB,yBACA,2CACA,uBACA,mDACA,gD,+rDC3CF,cAOA,0BAA+BxQ,GAC7B,IAAMwjC,EAAMxjC,EAActJ,OAC1B,OAAOsJ,EAAc8F,MAAM,EAAG09B,EAAM,GAAGluB,OAAOtV,EAAcwjC,EAAM,GAAK,EACzE,EAEA,uBACIC,EAAwBC,EAAmCC,G,YAAnC,IAAAD,IAAAA,EAAA,SAAWE,GAAqB,W,4DAC1D,MAAO,CAAP,EAAO,IAAI1sC,SAAc,SAACC,EAAS0sC,GACjC,IAAIC,EAAW,EAETC,EAAQ,WACZ,GAAIN,IACFtsC,QADF,CAKA2sC,IAEA,IAAME,EAAcN,EAAQI,GAEV,MAAdH,GAAsBG,GAAYH,EACpCE,IAGFI,WAAWF,EAAOC,E,CACpB,EAEAD,GACF,I,QAOF,sDAA2DlhC,GAEzD,OADA,IAAA6+B,aAA8B,IAAhB7+B,GAAsD,IAAvBA,EAAYnM,QAAc,WAAM,+CACtE,MAAQmM,EAAYqhC,OAAO,GAAGC,cAAgBthC,EAAYiD,MAAM,EACzE,EAMA,iEAAsEjD,GAEpE,OADA,IAAA6+B,aAA8B,IAAhB7+B,GAAsD,IAAvBA,EAAYnM,QAAc,WAAM,+CACtE,MAAQmM,EAAYqhC,OAAO,GAAGC,cAAgBthC,EAAYiD,MAAM,GAAK,aAC9E,EAGA,6BAAkCmY,EAA+BpY,GAI/D,OAF8BK,KAAKC,MAAMD,KAAKE,UAAU6X,IACxCpY,CAElB,EAGA,6BAAkCY,EAAkBM,GAClD,OAAOA,EAAS5O,KAAI,SAAAiM,GAAK,OAAAqC,EAAOrC,EAAP,IAAW/L,KAAK,KAC3C,EAGA,6BAAkC6J,GAChC,GAAIA,GAAQ,EACV,MAAO,MACF,GAAa,IAATA,EACT,MAAO,QACF,GAAa,IAATA,EACT,MAAO,QACF,GAAa,IAATA,EACT,MAAO,QACF,GAAa,IAATA,EACT,MAAO,QACF,GAAa,IAATA,EACT,MAAO,QAEP,MAAM3I,MAAM,uBAAgB2I,EAAI,yBAEpC,EAEA,yBAA8BA,GAC5B,YAD4B,IAAAA,IAAAA,EAAA,GACrB,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,KAAK4D,MAAM,EAAG5D,EACjD,C,yIC1FA,cAEA,UAEMlE,EAA6C,CAAC,EAkDpD,SAAgBomC,EAAsBC,EAA2BpmC,GAC/D,IASIS,EACE4lC,EAV4C,CAChDnc,OAAO,EACPoc,OAAO,EACPC,WAAW,EACXC,SAAS,EACTC,uBAAuB,EACvBC,oBAAoB,EACpBC,8BAA8B,GAIhC,KAAK3mC,GAA2B,WAAdA,KAChBS,EAAK2lC,EAAOQ,WAAW,SAAUP,IAE/B,IACE,OAAO,IAAI,EAAAQ,aAAapmC,EAAI,E,CAC5B,MAAOi9B,GACP,EAAAn9B,OAAOK,QAAQ,mBAAoB,yEAAkE88B,G,CAI3G,KAAK19B,GAA2B,UAAdA,KAChBS,EAAK2lC,EAAOQ,WAAW,QAASP,IAAOD,EAAOQ,WAAW,qBAAsBP,IAE7E,IACE,OAAO,IAAI,EAAAQ,aAAapmC,EAAI,E,CAC5B,MAAOi9B,GACP,EAAAn9B,OAAOK,QACH,mBACA,gGAAyF88B,G,CAKnG,MAAM,IAAIpiC,MAAM,yBAClB,CA/EA,8BAAgBgF,EAAmBN,GACjC,IAAIa,EAOJ,GANMb,GAA2B,WAAdA,KAA2B,WAAYD,GAE7CC,GAA2B,UAAdA,KAA0B,UAAWD,KAC7Dc,EAAUd,EAAML,OAFhBmB,EAAUd,EAAM+mC,QAKbjmC,EACH,IAGEA,EAAUslC,EAkFhB,WACE,GAA+B,oBAApBY,gBACT,MAAM,IAAItf,UAAU,uEAEtB,OAAO,IAAIsf,gBAAgB,EAAG,EAChC,CAxF8BC,GACyBhnC,E,CACjD,MAAOW,GAGPE,EAAUslC,EAoEhB,WACE,GAAwB,oBAAbc,SACT,MAAM,IAAIxf,UAAU,sDAEtB,IAAM2e,EAA4Ba,SAASC,cAAc,UAGzD,OAFAd,EAAOnkC,MAAQ,EACfmkC,EAAOlkC,OAAS,EACTkkC,CACT,CA7EqBe,GACyBnnC,E,CAI5CA,EAAYA,GAAiC,IAApBa,EAAQnH,QAAgB,QAAU,SAC3D,IAAM+G,EAAKI,EAAQJ,GAInB,OAFAV,EAAMC,GAAaa,EAEfJ,EAAG2mC,wBACErnC,EAAMC,GACNM,EAAmBN,KAG5BS,EAAG4mC,QAAQ5mC,EAAG6mC,YACd7mC,EAAG4mC,QAAQ5mC,EAAG8mC,cACd9mC,EAAG4mC,QAAQ5mC,EAAG+mC,OACd/mC,EAAG4mC,QAAQ5mC,EAAGgnC,QACdhnC,EAAG4mC,QAAQ5mC,EAAGinC,qBACdjnC,EAAG4mC,QAAQ5mC,EAAGknC,iBACdlnC,EAAGmnC,OAAOnnC,EAAGonC,cACbpnC,EAAGmnC,OAAOnnC,EAAGqnC,WACbrnC,EAAGsnC,SAAStnC,EAAGunC,MAERnnC,EACT,EAEA,yB,0pECtDA,cAEA,aAEA,SAWA,SAAgBonC,EAAqB3qC,GAEnC,IADA,IAAIG,EAAI,EACDA,EAAIH,EAAI7E,QACE6E,EAAIG,OADIA,GAMzB,OAAOA,EAAI,CACb,CATA,yBAcA,iBAwCE,WAAYgD,EAA2B/G,GAF/B,KAAAwuC,kBAAmB,EAogBnB,KAAAC,YAA0B,GAjgBhCruC,KAAK2G,GAAKA,EACV3G,KAAKJ,QAAUA,EAEfI,KAAKsuC,gBACLtuC,KAAKuuC,aAAevuC,KAAKwuC,qBACzBxuC,KAAKyuC,YAAczuC,KAAK0uC,oBACxB1uC,KAAK2uC,sBACP,CAmhBF,OAjhBE,YAAA9D,gBAAA,SAAgB1iC,EAAeC,EAAgBoiC,EAAsBvwB,GACnE,IAAMtT,EAAK3G,KAAK2G,GAEV+Q,EAAU/Q,EAAGioC,gBAEnBjoC,EAAG8+B,YAAY9+B,EAAGkoC,WAAYn3B,GAC9B/Q,EAAGmoC,cAAcnoC,EAAGkoC,WAAYloC,EAAGooC,mBAAoBpoC,EAAGqoC,SAC1DroC,EAAGmoC,cAAcnoC,EAAGkoC,WAAYloC,EAAGsoC,mBAAoBtoC,EAAGqoC,SAC1DroC,EAAGmoC,cAAcnoC,EAAGkoC,WAAYloC,EAAGuoC,eAAgBvoC,EAAGwoC,eACtDxoC,EAAGmoC,cAAcnoC,EAAGkoC,WAAYloC,EAAGyoC,eAAgBzoC,EAAGwoC,eACtD,IAAMj2B,EAASe,EAAOuwB,EAAQl5B,OAAO2I,EAAM9R,EAAQC,GAAU,KAQ7D,OAPAzB,EAAG0oC,WACC1oC,EAAGkoC,WACH,EACArE,EAAQjD,eAAgBp/B,EAAOC,EAC/B,EACAoiC,EAAQ/C,OAAQ+C,EAAQtzB,YAAagC,GACzClZ,KAAKsvC,aACE53B,CACT,EACA,YAAAizB,cAAA,SACIjzB,EAAuBvP,EAAeC,EAAgBoiC,EAAsBvwB,GAC9E,IAAMtT,EAAK3G,KAAK2G,GAChBA,EAAG8+B,YAAY9+B,EAAGkoC,WAAYn3B,GAC9B,IAAMwB,EAASsxB,EAAQl5B,OAAO2I,EAAM9R,EAAQC,GAC5CzB,EAAG4oC,cACC5oC,EAAGkoC,WACH,EACA,EACA,EACA1mC,EAAOC,EAAQoiC,EAAQ/C,OAAQ+C,EAAQtzB,YAAagC,GACxDlZ,KAAKsvC,YACP,EACA,YAAAtK,kBAAA,SAAkBttB,EAAuBvP,EAAeC,GACtD,IAAMzB,EAAK3G,KAAK2G,GAEhBA,EAAG8+B,YAAY9+B,EAAGkoC,WAAYn3B,GAC9B/Q,EAAG6oC,gBAAgB7oC,EAAG8oC,YAAazvC,KAAKyuC,aACxC9nC,EAAG+oC,qBACC/oC,EAAG8oC,YAAa9oC,EAAGgpC,kBAAmBhpC,EAAGkoC,WAAYn3B,EACrD,GACJ1X,KAAKsvC,aACL3oC,EAAGipC,SAAS,EAAG,EAAGznC,EAAOC,GACzBzB,EAAGkpC,QAAQ,EAAG,EAAG1nC,EAAOC,EAC1B,EACA,YAAAsT,YAAA,SACIhE,EAAuBvP,EAAeC,EAAgB6/B,EAAkBjuB,EACxEY,GACF,IAAMjU,EAAK3G,KAAK2G,GACXiU,IACHA,EAAW,GAER5a,KAAKouC,kBACRpuC,KAAKglC,kBAAkBttB,EAASvP,EAAOC,GAEzC,IAAMoiC,EAAUxqC,KAAKyqC,WAAWzwB,EAAUY,GACpC1B,EAASsxB,EAAQxC,SAAS7/B,EAAQC,GAUxC,OARAzB,EAAG8+B,YAAY9+B,EAAGkoC,WAAYn3B,GAC9B/Q,EAAG+oC,qBACC/oC,EAAG8oC,YAAa9oC,EAAGgpC,kBAAmBhpC,EAAGkoC,WAAYn3B,EACrD,GAEJ/Q,EAAGmpC,WAAW,EAAG,EAAG3nC,EAAOC,EAAQzB,EAAGihC,KAAM4C,EAAQtzB,YAAagC,GACjElZ,KAAKsvC,aAEE9E,EAAQj5B,OAAO2H,EAAQ+uB,EAChC,EAEA,YAAA8H,mBAAA,WAEE,OAAO,CACT,EACA,YAAAC,iBAAA,WACE,IAAMrpC,EAAK3G,KAAK2G,GACVspC,EAAItpC,EAAGupC,aAAalwC,KAAK2G,GAAGwpC,gBAClC,MAAO,iBAAWF,EAAItpC,EAAGypC,SAC3B,EACA,YAAAC,kBAAA,WACE,OAAOrwC,KAAK2G,GAAGupC,aAAalwC,KAAK2G,GAAG2pC,mBACtC,EACA,YAAAC,sBAAA,WACE,OAAOvwC,KAAK2G,GAAGupC,aAAalwC,KAAK2G,GAAG6pC,oBACtC,EACA,YAAAnL,oBAAA,SAAoBJ,EAAwBE,GAC1C,IAAMx+B,EAAK3G,KAAK2G,GAChBA,EAAG8pC,oBAAoBxL,EAAgB,EAAGt+B,EAAGlE,OAAO,EAAO,GAAI,GAC/DkE,EAAG+pC,wBAAwBzL,IACC,IAAxBE,IACFx+B,EAAG8pC,oBAAoBtL,EAAoB,EAAGx+B,EAAGlE,OAAO,EAAO,GAAI,IACnEkE,EAAG+pC,wBAAwBvL,IAE7BnlC,KAAKsvC,YACP,EACA,YAAAvK,cAAA,SACIhB,EACAc,GAEF,IAAMl+B,EAAK3G,KAAK2G,GACV0Q,EAAU1Q,EAAGo+B,gBAMnB,OAHAp+B,EAAGgqC,aAAat5B,EAAS0sB,GACzBp9B,EAAGgqC,aAAat5B,EAASwtB,GACzBl+B,EAAGiqC,YAAYv5B,GACRA,CACT,EACA,YAAAqtB,cAAA,SAAczwB,EAAsB48B,GAClC,IAAMlqC,EAAK3G,KAAK2G,GACVmqC,EAASnqC,EAAGoqC,aAAaF,GAC/B,IAAKC,EACH,MAAM,IAAItvC,MAAM,iDAA0CqvC,IAK5D,GAFAlqC,EAAGsN,aAAa68B,EAAQ78B,GACxBtN,EAAG+9B,cAAcoM,IACwC,IAArDnqC,EAAGqqC,mBAAmBF,EAAQnqC,EAAGsqC,gBACnC,MAAM,IAAIzvC,MAAM,oCAA6BmF,EAAGuqC,iBAAiBJ,GAAO,6BAE5E78B,IAEE,OAAO68B,CACT,EACA,YAAA9M,aAAA,SAAa8M,GACX9wC,KAAK2G,GAAGq9B,aAAa8M,EACvB,EACA,YAAA/K,qBAAA,SAAqBruB,EAAuBwtB,EAAkBY,GAC5D,IAAMn/B,EAAK3G,KAAK2G,GAChBA,EAAGwqC,cAAcxqC,EAAGypC,SAAWlL,GAC/BllC,KAAKsvC,aACL3oC,EAAG8+B,YAAY9+B,EAAGkoC,WAAYn3B,GAC9B1X,KAAKsvC,aACL3oC,EAAGk/B,UAAUC,EAAeZ,GAC5BllC,KAAKsvC,YACP,EACA,YAAAxL,KAAA,WACE9jC,KAAK2G,GAAGyqC,WAAWpxC,KAAK2G,GAAG0qC,eAAgB,EAAG,GAC9CrxC,KAAKsvC,YACP,EACA,YAAAA,WAAA,WACE,GAAI,EAAAtxC,IAAI4mC,MAAO,CACb,IAAMj+B,EAAK3G,KAAK2G,GACVk9B,EAAQl9B,EAAG2qC,WACbC,EAAQ,GACZ,OAAQ1N,GACN,KAAMl9B,EAAW,SACf,OACF,KAAMA,EAAe,aACnB4qC,EAAQ,eACR,MACF,KAAM5qC,EAAgB,cACpB4qC,EAAQ,gBACR,MACF,KAAM5qC,EAAoB,kBACxB4qC,EAAQ,oBACR,MACF,KAAM5qC,EAAgC,8BACpC4qC,EAAQ,gCACR,MACF,KAAM5qC,EAAgB,cACpB4qC,EAAQ,gBACR,MACF,KAAM5qC,EAAqB,mBACzB4qC,EAAQ,qBACR,MACF,QACEA,EAAQ,+BAAwB1N,EAAM2N,SAAS,KAEnD,MAAM,IAAIhwC,MAAM+vC,E,CAEpB,EACA,YAAArG,cAAA,SAAcxzB,GACZ1X,KAAK2G,GAAGukC,cAAcxzB,EACxB,EACA,YAAAusB,cAAA,SAAc5sB,GACZrX,KAAK2G,GAAGs9B,cAAc5sB,EACxB,EACA,YAAAozB,WAAA,SAAWzwB,EAA4BY,EAAkBV,GACvD,QADuD,IAAAA,IAAAA,EAAA,GAClC,IAAjBla,KAAKJ,QACP,OAAO,IAAI6xC,EAAavJ,sBAAsBloC,KAAK2G,GAA8BiU,GAGnF,OAAQZ,GACN,IAAK,QACH,OAAc,IAAVE,GAAsCla,KAAK0xC,yBACtC,IAAID,EAAarJ,qBAAqBpoC,KAAK2G,GAAIiU,GAE/C,IAAI62B,EAAarJ,qBACpBpoC,KAAK2G,GAAIiU,EAAU5a,KAAK2xC,0BAA2BC,gBAE3D,IAAK,MACH,MAAM,IAAIpwC,MAAM,mBAClB,IAAK,OACH,OAAO,IAAIiwC,EAAa/I,iBAAiB1oC,KAAK2G,GAAIiU,GACpD,QACE,MAAM,IAAIpZ,MAAM,4BAAqBwY,IAE3C,EACA,YAAA+B,oBAAA,WAEE,IADA,IAAMpV,EAAK3G,KAAK2G,GACPkrC,EAAO,EAAGA,EAAO7xC,KAAK8xC,uBAAwBD,EACrDlrC,EAAGwqC,cAAcxqC,EAAGypC,SAAWyB,GAC/BlrC,EAAG8+B,YAAY9+B,EAAGkoC,WAAY,KAElC,EACA,YAAAlpC,QAAA,WACE,IAAI3F,KAAK+xC,SAAT,CAGA,IAAMprC,EAAK3G,KAAK2G,GAChBA,EAAG6oC,gBAAgB7oC,EAAG8oC,YAAa,MACnC9oC,EAAGqrC,kBAAkBhyC,KAAKyuC,aAC1B9nC,EAAGsrC,WAAWtrC,EAAGurC,aAAc,MAC/BvrC,EAAGwrC,aAAanyC,KAAKuuC,cACrB5nC,EAAGsrC,WAAWtrC,EAAGyrC,qBAAsB,MACvCzrC,EAAG0rC,SACHryC,KAAK+xC,UAAW,C,CAClB,EAEQ,YAAAO,sBAAR,WAEE,OAAO,IAAI/4B,aAAa,EACrB,EAAK,EAAM,EAAK,EAAK,GACrB,GAAM,EAAK,EAAK,EAAK,EACtB,EAAM,EAAM,EAAK,EAAK,EACtB,GAAO,EAAK,EAAK,EAAK,GAE1B,EACQ,YAAAi1B,mBAAR,WACE,IAAM7nC,EAAK3G,KAAK2G,GACVuS,EAASvS,EAAG4rC,eAClB,IAAKr5B,EACH,MAAM,IAAI1X,MAAM,gCAElB,IAAMgxC,EAAWxyC,KAAKsyC,wBAItB,OAHA3rC,EAAGsrC,WAAWtrC,EAAGurC,aAAch5B,GAC/BvS,EAAG8rC,WAAW9rC,EAAGurC,aAAcM,EAAU7rC,EAAG+rC,aAC5C1yC,KAAKsvC,aACEp2B,CACT,EACQ,YAAAw1B,kBAAR,WACE,IAAMiE,EAAK3yC,KAAK2G,GAAG+nC,oBACnB,IAAKiE,EACH,MAAM,IAAInxC,MAAM,mCAElB,OAAOmxC,CACT,EAEQ,YAAAhE,qBAAR,WACE,IAAMhoC,EAAK3G,KAAK2G,GAMhB,GAJA3G,KAAK4yC,sCAAwC5yC,KAAK6yC,2CAClD7yC,KAAK0xC,yBAA2B1xC,KAAK8yC,qBACrC9yC,KAAKic,2BAA6Bjc,KAAK+yC,uBAElB,IAAjB/yC,KAAKJ,UAAkBI,KAAK2xC,4BAA8B3xC,KAAK0xC,yBACjE,MAAM,IAAIlwC,MAAM,0DAGlBxB,KAAKgzC,kBAAoBhzC,KAAK0xC,0BAA4B1xC,KAAKizC,oBAG/DjzC,KAAKsmC,eAAiB3/B,EAAGupC,aAAavpC,EAAGusC,kBACzClzC,KAAK8xC,qBAAuBnrC,EAAGupC,aAAavpC,EAAGwsC,yBAM3CnzC,KAAKJ,OAMX,EACQ,YAAA0uC,cAAR,WACuB,IAAjBtuC,KAAKJ,SACPI,KAAKozC,0BAA4BpzC,KAAK2G,GAAG0sC,aAAa,0BACtDrzC,KAAKszC,kCAAoCtzC,KAAK2G,GAAG0sC,aAAa,qCAE9DrzC,KAAKuzC,sBAAwBvzC,KAAK2G,GAAG0sC,aAAa,qBAClDrzC,KAAK2xC,0BAA4B3xC,KAAK2G,GAAG0sC,aAAa,0BAE1D,EAEQ,YAAAR,yCAAR,WAGE,IAAMlsC,EAAK3G,KAAK2G,GACV+Q,EAAU/Q,EAAGioC,gBACnBjoC,EAAG8+B,YAAY9+B,EAAGkoC,WAAYn3B,GAE9B,IAAM6vB,EAAkC,IAAjBvnC,KAAKJ,QAAiB+G,EAAoCghC,QAAUhhC,EAAGihC,KAC9FjhC,EAAG0oC,WAAW1oC,EAAGkoC,WAAY,EAAGtH,EAAgB,EAAG,EAAG,EAAG5gC,EAAGihC,KAAMjhC,EAAGlE,MAAO,MAE5E,IAAM+wC,EAAc7sC,EAAG+nC,oBACvB/nC,EAAG6oC,gBAAgB7oC,EAAG8oC,YAAa+D,GAEnC7sC,EAAG+oC,qBAAqB/oC,EAAG8oC,YAAa9oC,EAAGgpC,kBAAmBhpC,EAAGkoC,WAAYn3B,EAAS,GAEtF,IAAM+7B,EAAa9sC,EAAG+sC,uBAAuB/sC,EAAG8oC,eAAiB9oC,EAAGgtC,qBAKpE,OAJAhtC,EAAG8+B,YAAY9+B,EAAGkoC,WAAY,MAC9BloC,EAAG6oC,gBAAgB7oC,EAAG8oC,YAAa,MACnC9oC,EAAGukC,cAAcxzB,GACjB/Q,EAAGqrC,kBAAkBwB,GACdC,CACT,EAEQ,YAAAX,mBAAR,WACE,GAAqB,IAAjB9yC,KAAKJ,SACP,IAAKI,KAAKozC,0BACR,OAAO,OAGT,IAAKpzC,KAAKuzC,sBACR,OAAO,EAGX,OAAOvzC,KAAK4yC,qCACd,EAEQ,YAAAG,qBAAR,WACE,GAAqB,IAAjB/yC,KAAKJ,SACP,IAAKI,KAAKozC,0BACR,OAAO,MAEJ,CACL,IAAKpzC,KAAKuzC,sBACR,OAAO,EAET,IAAKvzC,KAAK2G,GAAG0sC,aAAa,4BACxB,OAAO,C,CAGX,OAAOrzC,KAAK4yC,qCACd,EAKQ,YAAAK,kBAAR,WAIE,IAEIv7B,EACA87B,EACAzP,EACA6P,EACAv8B,EANE1Q,EAAK3G,KAAK2G,GAQhB,IACE+Q,EAAU/Q,EAAGioC,gBACb4E,EAAc7sC,EAAG+nC,oBACjB/nC,EAAG8+B,YAAY9+B,EAAGkoC,WAAYn3B,GAG9B,IAAM6vB,EAAkC,IAAjBvnC,KAAKJ,QAAiB+G,EAAoCghC,QAAUhhC,EAAGihC,KAS9F,OARAjhC,EAAG0oC,WAAW1oC,EAAGkoC,WAAY,EAAGtH,EAAgB,EAAG,EAAG,EAAG5gC,EAAGihC,KAAMjhC,EAAGlE,MAAO,MAE5EkE,EAAG6oC,gBAAgB7oC,EAAG8oC,YAAa+D,GACnC7sC,EAAG+oC,qBAAqB/oC,EAAG8oC,YAAa9oC,EAAGgpC,kBAAmBhpC,EAAGkoC,WAAYn3B,EAAS,GAEtF/Q,EAAGmnC,OAAOnnC,EAAG+mC,UAEb3J,EAAep9B,EAAGoqC,aAAapqC,EAAGg+B,kBAIlCh+B,EAAGsN,aAAa8vB,EAAc,iBAC9Bp9B,EAAG+9B,cAAcX,MAEjB6P,EAAiBjtC,EAAGoqC,aAAapqC,EAAGm+B,oBAIpCn+B,EAAGsN,aAAa2/B,EAAgB,8DAChCjtC,EAAG+9B,cAAckP,MAEjBv8B,EAAU1Q,EAAGo+B,mBAIbp+B,EAAGgqC,aAAat5B,EAAS0sB,GACzBp9B,EAAGgqC,aAAat5B,EAASu8B,GACzBjtC,EAAGiqC,YAAYv5B,GACf1Q,EAAG28B,WAAWjsB,GAEd1Q,EAAGyqC,WAAWzqC,EAAGktC,OAAQ,EAAG,GACrBltC,EAAG2qC,aAAe3qC,EAAGmtC,W,SAG5BntC,EAAG4mC,QAAQ5mC,EAAG+mC,OAEVr2B,GACF1Q,EAAGs9B,cAAc5sB,GAEf0sB,GACFp9B,EAAGq9B,aAAaD,GAEd6P,GACFjtC,EAAGq9B,aAAa4P,GAEdJ,IACF7sC,EAAG6oC,gBAAgB7oC,EAAG8oC,YAAa,MACnC9oC,EAAGqrC,kBAAkBwB,IAEnB97B,IACF/Q,EAAG8+B,YAAY9+B,EAAGkoC,WAAY,MAC9BloC,EAAGukC,cAAcxzB,G,CAGvB,EAEA,YAAAq8B,WAAA,WACE,GAAqB,IAAjB/zC,KAAKJ,SAAiBI,KAAKszC,kCAAmC,CAChE,IAAMU,EAAMh0C,KAAK2G,GACXstC,EAAMj0C,KAAKszC,kCAEXY,EAAQF,EAAIG,cAElB,OADAH,EAAII,WAAWH,EAAII,iBAAkBH,GAC9BA,C,CAGP,MAAM,IAAI1yC,MAAM,4CAEpB,EAEA,YAAA8yC,SAAA,WACE,GAAqB,IAAjBt0C,KAAKJ,UAAiBI,KAAKszC,kCAO7B,MAAM,IAAI9xC,MAAM,4CANhB,IAAMwyC,EAAMh0C,KAAK2G,GACXstC,EAAMj0C,KAAKszC,kCACjBU,EAAIO,SAASN,EAAII,iBAMrB,EAEA,YAAAG,uBAAA,SAAuBN,GACrB,IAAIO,EAAmBC,EACvB,GAAqB,IAAjB10C,KAAKJ,UAAiBI,KAAKszC,kCAQ7B,MAAM,IAAI9xC,MAAM,4CAPhB,IAAMwyC,EAAMh0C,KAAK2G,GACXstC,EAAMj0C,KAAKszC,kCASnB,OAPEmB,EAAYT,EAAIW,kBAAkBT,EAAOF,EAAIY,wBAC7CF,EAAWV,EAAI9D,aAAa+D,EAAIY,kBAM3BJ,IAAcC,CACvB,EAEA,YAAAI,eAAA,SAAeZ,GACb,IAAIa,EACJ,GAAqB,IAAjB/0C,KAAKJ,QAMP,MAAM,IAAI4B,MAAM,4CALhB,IAAMwyC,EAAMh0C,KAAK2G,GAQnB,OAPEouC,EAAcf,EAAIW,kBAAkBT,EAAOF,EAAIgB,cAC/ChB,EAAIiB,YAAYf,GAMXa,EAAc,GACvB,EAEM,YAAAG,uBAAN,SAA6BhB,G,qGAC3B,UAAM,IAAAiB,cAAY,WAAM,SAAKX,uBAAuBN,EAA5B,K,OACxB,OADA,SACO,CAAP,EAAOl0C,KAAK80C,eAAeZ,I,QAGhB,YAAAnJ,sBAAb,W,yEAEE,OADMqK,EAAep1C,KAAKq1C,YAAYr1C,KAAK2G,IACpC,CAAP,EAAO3G,KAAKs1C,UAAUF,G,QAGhB,YAAAC,YAAR,SAAoB1uC,GAClB,IACMqtC,EAAMrtC,EACNutC,EAAQF,EAAIuB,UAAUvB,EAAIwB,2BAA4B,GAU5D,OATA7uC,EAAG8uC,QASI,CAACvB,MAAK,EAAEwB,cARD,OAAVxB,EACc,WAAM,UAEN,WACd,IAAMyB,EAAS3B,EAAI4B,eAAe1B,EAAO,EAAG,GAC5C,OAAOyB,IAAW3B,EAAI6B,kBAAoBF,IAAW3B,EAAI8B,mBAC3D,EAGJ,EAEM,YAAAR,UAAN,SAAgBF,G,8EACd,MAAO,CAAP,EAAO,IAAIj2C,SAAc,SAAAC,GAClB,EAAK22C,eAAc,WAAM,OAAAX,EAAaM,eAAb,IAA8B,WAAM,OAAAt2C,GAAA,GACpE,I,QAKF,YAAA42C,UAAA,WAGE,IADA,IAAMrnC,EAAQw/B,EAAqBnuC,KAAKquC,YAAYjuC,KAAI,SAAA8mB,GAAK,OAAAA,EAAE+uB,QAAF,KACpDtyC,EAAI,EAAGA,GAAKgL,IAAShL,GAE5BuyC,EADoBl2C,KAAKquC,YAAY1qC,GAAE,aAGzC3D,KAAKquC,YAAcruC,KAAKquC,YAAYtgC,MAAMY,EAAQ,EACpD,EAEc,YAAAonC,cAAd,SAA4BE,EAAyBC,G,qGAEnD,OADAl2C,KAAKquC,YAAYtpC,KAAK,CAACkxC,SAAQ,EAAEC,UAAS,IACtCl2C,KAAKquC,YAAY1vC,OAAS,EAE5B,IAGF,IAAM,IAAAw2C,cAAY,WAGhB,OAFA,EAAKa,YAE8B,IAA5B,EAAK3H,YAAY1vC,MAC1B,K,cAJA,S,YAMJ,EAnkBA,GAAa,EAAAouC,aAAAA,C,00EC3Bb,cAIA,EACE,SAAmB7F,EAAqB32B,GAArB,KAAA22B,GAAAA,EAAqB,KAAA32B,KAAAA,CAAmB,EAG7D,aACE,WAAoBs2B,EAAc7M,EAAyBgJ,GAAvC,KAAA6D,MAAAA,EAAuC,KAAA7D,SAAAA,EACzDhjC,KAAKyF,WAAWu0B,EAClB,CA+IF,OA7IE,YAAAv0B,WAAA,SAAWu0B,GAAX,WACEh6B,KAAKgjC,SAASK,MAAM,UAAW,4BAA4B,WACzD,IAAMtyB,EAAa,EAAK81B,MAAMsP,WAC9B,GAAIplC,EAAWpS,SAAWq7B,EAAIr7B,OAC5B,MAAM,IAAI6C,MAAM,2CAGlB,EAAK40C,KAAOpc,EAAI55B,KAAI,SAAC8mC,EAAIvjC,GAAM,WAAI0yC,EAASnP,EAAIn2B,EAAWpN,GAA5B,IAC/B,EAAK2yC,QAGL,EAAKC,SAAW,GAChB,EAAKH,KAAKvrC,SAAQ,SAACq8B,EAAIvjC,G,QACjB6yC,GAAW,E,IACf,IAAoB,QAAAtP,EAAG32B,KAAK+G,QAAM,8BAAE,CAA/B,IAAMiD,EAAK,QACd,IACK,EAAKk8B,QAAQl8B,KACsC,IAAjD,EAAKssB,MAAM6P,kBAAkB9pC,QAAQ2N,GAC1C,CACAi8B,GAAW,EACX,K,oGAGAA,GACF,EAAKD,SAASxxC,KAAKpB,EAEvB,GACF,GACF,EAEA,YAAA2yC,MAAA,WACEt2C,KAAKy2C,QAAUz2C,KAAK6mC,MAAME,YAAY3mC,KAAI,SAAAuD,GAAK,OAAAA,EAAE6U,MAAF,GACjD,EAEM,YAAAm+B,QAAN,SAAcC,EAAgCC,G,8EAC5C,MAAO,CAAP,EAAO72C,KAAKgjC,SAASK,MAAM,UAAW,yBAAyB,gD,qFAS7D,GAPArjC,KAAKs2C,QAGCvzB,EAAmB6zB,EAAejQ,yBAGlCmQ,EAAc92C,KAAK6mC,MAAM6P,kBAC3BG,EAAYl4C,SAAWm4C,EAAYn4C,OACrC,MAAM,IAAI6C,MAAM,yFACZq1C,EAAYl4C,OAAM,sBAAcm4C,EAAYn4C,SAGlDk4C,EAAYhsC,SAAQ,SAAC0P,EAAO5W,GAC1B,IAAMgL,EAAQmoC,EAAYnzC,GAC1B,EAAK8yC,QAAQ9nC,GAAS4L,CACxB,IAGMw8B,EAAqB/2C,KAAKu2C,SAASxoC,MAAM,GAGzCipC,EAAch3C,KAAK6mC,MAAME,YACzBh2B,EAAa/Q,KAAK6mC,MAAMsP,WAE1Bc,EAAO,E,+EAOT,GALMC,EAAcH,EAASE,KACvBE,EAAS,EAAKf,KAAKc,GAGnBE,EAAYD,EAAO5mC,KAAK+G,OAAOlX,KAAI,SAAAuD,GAAK,SAAK8yC,QAAQ9yC,EAAb,KACR,IAAlCyzC,EAAUxqC,aAAQrK,GACpB,MAAM,IAAIf,MAAM,yCAAkC21C,EAAO5mC,OAUxC,OANb8mC,EAAeD,EACrB,EAAA3wC,OAAOG,QACH,WACA,oBAAauwC,EAAO5mC,KAAKlQ,KAAI,aACzBg3C,EAAaj3C,KAAI,SAACkE,EAAGX,GAAM,iBAAIwzC,EAAO5mC,KAAK+G,OAAO3T,GAAE,cAAMW,EAAE5C,KAAI,YAAI4C,EAAE2T,KAAK3X,KAAK,KAAI,IAAzD,IAA8DA,KAAK,MAAK,MAExF,GAAM,EAAK0iC,SAASK,MACnC,OAAQ8T,EAAO5mC,KAAKlQ,MAAM,2EAAY,SAAA82C,EAAOjQ,GAAGE,KAAKrkB,EAAkBs0B,EAAcF,EAAOjQ,GAAGngC,S,kBAGnG,IAJMuwC,EAAa,UAIJ34C,SAAWw4C,EAAO5mC,KAAKyuB,QAAQrgC,OAC5C,MAAM,IAAI6C,MAAM,uD,OAIlB81C,EAAWzsC,SAAQ,SAAC9B,EAAQpF,GAC1B,IAAM67B,EAAI2X,EAAO5mC,KAAKyuB,QAAQr7B,GAC9B,GAAI,EAAK8yC,QAAQjX,GACf,MAAM,IAAIh+B,MAAM,kBAAWg+B,EAAC,mCAA2B2X,EAAO5mC,KAAKlQ,OAErE,EAAKo2C,QAAQjX,GAAKz2B,CACpB,IAGMwuC,EAAkB,IAAI3mC,IAC5B0mC,EAAWzsC,SAAQ,SAAC9B,EAAQpF,G,YACpB67B,EAAI2X,EAAO5mC,KAAKyuB,QAAQr7B,G,IAC9B,IAAyC,kBAAAqzC,EAAYxX,GAAG/Z,KAAE,8BAAE,CAAvD,IAAM+xB,EAA0B,QAC7BC,EAAwB1mC,EAAWymC,GACrChB,GAAW,E,IACf,IAAgB,kBAAAiB,EAAsBngC,SAAM,8BAAE,CAAzC,IAAM4iB,EAAC,QACV,IAAK,EAAKuc,QAAQvc,GAAI,CACpBsc,GAAW,EACX,K,oGAGAA,GACFe,EAAgBrmC,IAAIsmC,E,mGAG1B,IACAT,EAAShyC,KAAI,MAAbgyC,EAAQ,OAASQ,IAAe,I,wCApD3BN,EAAOF,EAASp4C,O,QAAM,M,oCAuDvBoK,EAAmB,GAChBpF,EAAI,E,sBAAGA,EAAI3D,KAAK6mC,MAAM6Q,mBAAmB/4C,QAAM,YAGtD,GAFMg5C,EAAc33C,KAAK6mC,MAAM6Q,mBAAmB/zC,QAE7BpB,KADfq1C,EAAe53C,KAAKy2C,QAAQkB,IAEhC,MAAM,IAAIn2C,MAAM,2BAAoBm2C,EAAW,0B,OAE7B,IAAhBA,EAAA,MACF,GAAMC,EAAaC,W,cAAnB,S,aAGAD,EAAa39B,K,iBAEflR,EAAOhE,KAAK6yC,G,wBAZ4Cj0C,I,aAgB1D,OAFA,EAAA8C,OAAOG,QAAQ,WAAY,iCAC3Bmc,EAAiBpd,UACV,CAAP,EAAOoD,G,kBAOb,EAlJA,GAAa,EAAA+uC,cAAAA,C,yaCVb,cACA,UACA,UACA,UACA,UAEOr3C,EAAS,EAAAC,YAAYC,aAAaC,IAmE5B,EAAAm3C,MAAQ,CAInBhyB,KAAM,SAACiyB,EAA2CC,GAC9C,WAAIC,EAAUF,EAAYC,EAA1B,GAGN,iBACE,WAAYE,GACVn4C,KAAKo4C,WAAQ71C,EACbvC,KAAKq4C,IAAM,GACXr4C,KAAKwY,YAASjW,EACdvC,KAAK0B,UAAOa,EAER41C,IACFn4C,KAAK0B,KAAO,EAAAgkB,UAAU4yB,yBAAyBH,EAAUz2C,KAAM62C,YAEnE,CAYF,OATE,sBAAI,mBAAI,C,IAAR,WACE,OAAOv4C,KAAKo4C,KACd,E,gCAEA,sBAAI,iBAAE,C,IAAN,WACE,OAAOp4C,KAAKq4C,GACd,E,gCAGF,EAtBA,GAwBA,EACE,SAAYG,EAAyCn4C,GAC/Cm4C,aAAsB,EAAAv3C,KAAKw3C,WAC7Bz4C,KAAKK,KAAOm4C,EAAWn4C,KACvBL,KAAK04C,OAASF,EAAWE,OACzB14C,KAAKa,WAAa,IAAI,EAAAO,UAAUo3C,EAAW14C,YAClC04C,aAAsB/3C,EAAOk4C,OACtC34C,KAAKK,KAAOA,QAAAA,EAAQm4C,EAAWn4C,OAC/BL,KAAK04C,OAASF,EAAWE,SACzB14C,KAAKa,WAAa,IAAI,EAAAO,UAAU,EAAAskB,UAAUkzB,8BAA8BJ,KAG1Ex4C,KAAKsX,OAAS,GACdtX,KAAKg/B,QAAU,GACfh/B,KAAK64C,aAAc,CACrB,EAUF,aAWE,WAAYhS,EAAsCiS,GAChD,IAAKjS,EACH,MAAM,IAAIlZ,UAAU,kBAItB3tB,KAAK+4C,WAAWlS,GAGhB7mC,KAAKg5C,eAAeF,GAGpB94C,KAAKi5C,gBACP,CAyoBF,OAvoBE,YAAAvC,gBAAA,WACE,OAAO12C,KAAKk5C,gBACd,EAEA,YAAAC,cAAA,WACE,OAAOn5C,KAAKo5C,cACd,EAEA,YAAA1B,iBAAA,WACE,OAAO13C,KAAKq5C,iBACd,EAEA,YAAAC,eAAA,WACE,OAAOt5C,KAAKu5C,eACd,EAEA,YAAAxS,UAAA,WACE,OAAO/mC,KAAKw5C,QACd,EAEA,YAAArD,SAAA,WACE,OAAOn2C,KAAKy5C,MACd,EAEQ,YAAAV,WAAR,SAAmBlS,GAEjB,GAAIA,aAAiB,EAAA5lC,KAAKy4C,WACxB15C,KAAK25C,yBAAyB9S,OACzB,MAAIA,aAAiBpmC,EAAOs3C,OAGjC,MAAM,IAAIpqB,UAAU,gCAFpB3tB,KAAK45C,wBAAwB/S,E,CAIjC,EACQ,YAAA8S,yBAAR,SAAiC9S,G,4BACzBgT,EAAc,IAAI94C,IACxBf,KAAKw5C,SAAW,GAEhBx5C,KAAKk5C,iBAAmB,GACxBl5C,KAAKo5C,eAAiB,GAEtBp5C,KAAKq5C,kBAAoB,GACzBr5C,KAAKu5C,gBAAkB,GAEvBv5C,KAAKy5C,OAAS,GAEd,IAAMK,EAAe,IAAI/4C,IAGzB,IAAK8lC,EAAMtsB,MACT,MAAM,IAAI/Y,MAAM,uCAElB,IAAMu4C,EAAkB,G,IACxB,IAAgB,QAAAlT,EAAMtsB,OAAK,8BAAE,CAAxB,IAAM5W,EAAC,QACV,GAAIk2C,EAAY5oC,IAAItN,EAAEtD,MACpB,MAAM,IAAImB,MAAM,iCAA0BmC,EAAEtD,OAE9C,IAAM25C,EAAeh6C,KAAKw5C,SAASz0C,KAAK,IAAIk1C,EAAMt2C,IAAM,EACxDk2C,EAAY14C,IAAIwC,EAAEtD,KAAO25C,GACzBD,EAAgBh1C,KAAKpB,EAAEtD,K,mGAIzB,IAAKwmC,EAAMoR,YACT,MAAM,IAAIz2C,MAAM,6C,IAElB,IAAgB,QAAAqlC,EAAMoR,aAAW,8BAAE,CAAxBt0C,EAAC,QAAP,IACCgL,EAAQkrC,EAAY/3C,IAAI6B,EAAEtD,MAC9B,QAAckC,IAAVoM,EAAqB,CACvB,IAAMhP,EAAQ,IAAIs6C,EAClBt6C,EAAM+B,KAAO,CACX6H,MAAO,CAAC0O,KAAM,EAAAyN,UAAUw0B,oBAAoBv2C,EAAEsU,OAC9CsgC,WAAY,EAAA7yB,UAAUC,wBAAwBhiB,EAAEqW,WAElDrL,EAAQ3O,KAAKw5C,SAASz0C,KAAKpF,GAAS,EACpCk6C,EAAY14C,IAAIwC,EAAEtD,KAAOsO,E,CAE3B3O,KAAKw5C,SAAS7qC,GAAOypC,OAAS,EAC9Bp4C,KAAKw5C,SAAS7qC,GAAO6J,OAAS,EAAA3U,OAAOC,UAAUH,E,mGAIjD,IAASA,EAAI,EAAGA,EAAI3D,KAAKw5C,SAAS76C,OAAQgF,IACnC3D,KAAKw5C,SAAS71C,GAAG6U,SACpBxY,KAAKk5C,iBAAiBn0C,KAAKpB,GAC3B3D,KAAKo5C,eAAer0C,KAAKg1C,EAAgBp2C,KAK7C,IAAKkjC,EAAM99B,OACT,MAAM,IAAIvH,MAAM,wC,IAElB,IAAgB,QAAAqlC,EAAM99B,QAAM,8BAAE,CAC5B,GADSpF,EAAC,QACNk2C,EAAY5oC,IAAItN,EAAEtD,MACpB,MAAM,IAAImB,MAAM,kCAA2BmC,EAAEtD,OAEzC25C,EAAeh6C,KAAKw5C,SAASz0C,KAAK,IAAIk1C,EAAMt2C,IAAM,EACxDk2C,EAAY14C,IAAIwC,EAAEtD,KAAO25C,GACzBh6C,KAAKq5C,kBAAkBt0C,KAAKi1C,GAC5Bh6C,KAAKu5C,gBAAgBx0C,KAAKpB,EAAEtD,K,mGAI9B,IAAKwmC,EAAMt2B,KACT,MAAM,IAAI/O,MAAM,sC,IAElB,IAAwB,QAAAqlC,EAAMt2B,MAAI,8BAAE,CAClC,KADS4pC,EAAS,SACH95C,KAEb,IAAK,IAAI+5C,EAAO,GAAIA,IAAQ,CAC1B,IAAM,EAAO,kBAAWD,EAAUzB,OAAM,YAAI0B,GAC5C,IAAKN,EAAa7oC,IAAI,GAAO,CAC3BkpC,EAAU95C,KAAO,EACjB,K,EAKN,GAAIy5C,EAAa7oC,IAAIkpC,EAAU95C,MAC7B,MAAM,IAAImB,MAAM,gCAAyB24C,EAAU95C,OAE/C25C,EAAeh6C,KAAKy5C,OAAO10C,KAAK,IAAI4zC,EAAKwB,IAAc,EAC7DL,EAAa34C,IAAIg5C,EAAU95C,KAAM25C,E,mGAInC,IAASr2C,EAAI,EAAGA,EAAI3D,KAAKy5C,OAAO96C,OAAQgF,IAAK,CAC3C,IAAM4M,EAAOvQ,KAAKy5C,OAAO91C,GAEzB,KADMw2C,EAAYtT,EAAMt2B,KAAK5M,IACdoF,OACb,MAAM,IAAIvH,MAAM,mCAA4B24C,EAAU95C,O,IAExD,IAAqB,kBAAA85C,EAAUpxC,SAAM,8BAAE,CAAlC,IAAMA,EAAM,QAQf,QANyB,KADrBsxC,EAAYR,EAAY/3C,IAAIiH,MAE9BsxC,EAAYr6C,KAAKw5C,SAASz0C,KAAK,IAAIk1C,GAAW,EAC9CJ,EAAY14C,IAAI4H,EAAQsxC,IAE1B9pC,EAAKyuB,QAAQj6B,KAAKs1C,QAEqB93C,IAAnCvC,KAAKw5C,SAASa,GAAWjC,MAC3B,MAAM,IAAI52C,MAAM,mDAA4C64C,IAM9D,GAJAr6C,KAAKw5C,SAASa,GAAWjC,MAAQz0C,EAIR,aAArBw2C,EAAUzB,OAAuB,CACnC,IAAKyB,EAAUr6C,WAA4C,IAA/Bq6C,EAAUr6C,UAAUnB,SAAiBw7C,EAAUr6C,UAAU,GAAGwE,EACtF,MAAM,IAAI9C,MAAM,uFAElB,IAAK24C,EAAUpxC,QAAsC,IAA5BoxC,EAAUpxC,OAAOpK,OACxC,MAAM,IAAI6C,MAAM,4EAElB+O,EAAKyuB,QAAQ0L,MACbn6B,EAAKsoC,aAAc,EAEnB74C,KAAKw5C,SAASa,GAAWjC,OAAS,EAClCp4C,KAAKw5C,SAASa,GAAW7hC,OAAS,EAAA3U,OAAOC,UAAUq2C,EAAUr6C,UAAU,GAAGwE,E,qGAMhF,IAASX,EAAI,EAAGA,EAAI3D,KAAKy5C,OAAO96C,OAAQgF,IAAK,CAC3C,IACMw2C,EAEN,GAHM5pC,EAAOvQ,KAAKy5C,OAAO91C,KACnBw2C,EAAYtT,EAAMt2B,KAAK5M,IAEd4W,MACb,MAAM,IAAI/Y,MAAM,kCAA2B24C,EAAU95C,O,IAEvD,IAAoB,kBAAA85C,EAAU5/B,QAAK,8BAAE,CAAhC,IACG8/B,EADG9/B,EAAK,QAEd,QAAyB,KADnB8/B,EAAYR,EAAY/3C,IAAIyY,IACI,CAEpC,GAAc,KAAVA,IAA4C,IAA3B4/B,EAAU5/B,MAAM5b,QAA2C,IAA3Bw7C,EAAU5/B,MAAM5b,SAC5C,WAArBw7C,EAAUzB,OACZ,SAEF,MAAM,IAAIl3C,MAAM,8BAAuB+Y,EAAK,uBAAe4/B,EAAU95C,M,CAEvEkQ,EAAK+G,OAAOvS,KAAKs1C,GAEjBr6C,KAAKw5C,SAASa,GAAWhC,IAAItzC,KAAKpB,E,oGAItC,OAAO,CACT,EAEQ,YAAAi2C,wBAAR,SAAgC/S,G,UACxBgT,EAAc,IAAI94C,IACxBf,KAAKw5C,SAAW,GAEhBx5C,KAAKk5C,iBAAmB,GACxBl5C,KAAKo5C,eAAiB,GAEtBp5C,KAAKq5C,kBAAoB,GACzBr5C,KAAKu5C,gBAAkB,GAEvBv5C,KAAKy5C,OAAS,GAMd,IAJA,IAAMK,EAAe,IAAI/4C,IAGnBg5C,EAAkB,GACfp2C,EAAI,EAAGA,EAAIkjC,EAAMyT,eAAgB32C,IAAK,CAC7C,IAAM42C,EAAY1T,EAAMvvB,OAAO3T,GAC/B,GAAIk2C,EAAY5oC,IAAIspC,GAClB,MAAM,IAAI/4C,MAAM,iCAA0B+4C,IAG5C,IAAK,IAAI/a,EAAI,EAAGA,EAAIqH,EAAM2T,iBAAkBhb,IAC1C,IAAqB,QAAjB,EAAAqH,EAAM4T,SAASjb,UAAE,eAAEn/B,UAAWk6C,EAAW,CAC3C,IAAM56C,EAAQ,IAAIs6C,EAElB,IAD2C,QAAzB,EAAiB,QAAjB,EAAApT,EAAM4T,SAASjb,UAAE,eAAE99B,cAAM,eAAEg5C,eAC3Bj6C,EAAOk6C,cAAcC,YACrC,MAAM,IAAIp5C,MAAM,0CAMlB,IAJA,IAAM22C,EAAYtR,EAAM4T,SAASjb,GAAI99B,OAAQ/B,MAAM,IAAIc,EAAOo6C,oBACxDn5C,EAAO,EAAAgkB,UAAUC,wBAAwBwyB,EAAU2C,YACnDvxC,EAAQ4uC,EAAU5uC,QAClB0O,EAAO,GACJiiB,EAAI,EAAGA,EAAI3wB,EAAMwxC,YAAc7gB,IACtCjiB,EAAKlT,KAAK,EAAA1B,SAASE,aAAagG,EAAM+xB,IAAIpB,GAAIv6B,QAASq7C,aAEzDr7C,EAAM+B,KAAO,CAAC6H,MAAO,CAAC0O,KAAI,GAAGsgC,WAAY72C,GACzC,IAAMs4C,EAAeh6C,KAAKw5C,SAASz0C,KAAKpF,GAAS,EACjDk6C,EAAY14C,IAAIo5C,EAAWP,GAC3BD,EAAgBh1C,KAAKw1C,E,EAK3B,IAAS52C,EAAI,EAAGA,EAAIkjC,EAAMoU,qBAAsBt3C,IAAK,CACnD,IAAMs0C,EAAcpR,EAAMC,aAAanjC,GACnCgL,EAAQkrC,EAAY/3C,IAAIm2C,EAAY53C,aAC1BkC,IAAVoM,IACIhP,EAAQ,IAAIs6C,EACZhiC,EAAO,EAAAyN,UAAUw1B,wBAAwBjD,GACzCv2C,EAAO,EAAAgkB,UAAUC,wBAAwBsyB,EAAYj+B,YAC3Dra,EAAM+B,KAAO,CAAC6H,MAAO,CAAC0O,KAAI,GAAGsgC,WAAY72C,GACzCiN,EAAQ3O,KAAKw5C,SAASz0C,KAAKpF,GAAS,EACpCk6C,EAAY14C,IAAI82C,EAAY53C,OAASsO,IAEvC3O,KAAKw5C,SAAS7qC,GAAOypC,OAAS,EAC9Bp4C,KAAKw5C,SAAS7qC,GAAO6J,OAAS,EAAA3U,OAAOE,cAAck0C,E,CAIrD,IAASt0C,EAAI,EAAGA,EAAI3D,KAAKw5C,SAAS76C,OAAQgF,IACnC3D,KAAKw5C,SAAS71C,GAAG6U,SACpBxY,KAAKk5C,iBAAiBn0C,KAAKpB,GAC3B3D,KAAKo5C,eAAer0C,KAAKg1C,EAAgBp2C,KAK7C,IAASA,EAAI,EAAGA,EAAIkjC,EAAMsU,gBAAiBx3C,IAAK,CAC9C,IAAMy3C,EAAavU,EAAM7H,QAAQr7B,GACjC,GAAIk2C,EAAY5oC,IAAImqC,GAClB,MAAM,IAAI55C,MAAM,kCAA2B45C,IAEvCpB,EAAeh6C,KAAKw5C,SAASz0C,KAAK,IAAIk1C,GAAW,EACvDJ,EAAY14C,IAAIi6C,EAAYpB,GAC5Bh6C,KAAKq5C,kBAAkBt0C,KAAKi1C,GAC5Bh6C,KAAKu5C,gBAAgBx0C,KAAKq2C,E,CAI5B,IAAKvU,EAAMn2B,MACT,MAAM,IAAIlP,MAAM,sCAElB,IAASmC,EAAI,EAAGA,EAAIkjC,EAAMwU,cAAe13C,IAAK,CAC5C,IACI,GADEw2C,EAAYtT,EAAMn2B,MAAM/M,IACRtD,OACtB,IAAK,EAEH,IAAK,IAAI+5C,EAAO,EACd,EAAO,kBAAWD,EAAWzB,SAAQ,YAAI0B,GACpCN,EAAa7oC,IAAI,GAFJmpC,KAStB,GAAIN,EAAa7oC,IAAI,GACnB,MAAM,IAAIzP,MAAM,gCAAyB,IAErCw4C,EAAeh6C,KAAKy5C,OAAO10C,KAAK,IAAI4zC,EAAKwB,EAAY,IAAS,EACpEL,EAAa34C,IAAI,EAAM64C,E,CAIzB,IAASr2C,EAAI,EAAGA,EAAI3D,KAAKy5C,OAAO96C,OAAQgF,IAAK,CAC3C,IAAM4M,EAAOvQ,KAAKy5C,OAAO91C,GAEzB,GAAiB,OADXw2C,EAAYtT,EAAMn2B,MAAM/M,IAE5B,MAAM,IAAInC,MAAM,kCAA2BmC,IAE7C,GAAmC,KAA/Bw2C,aAAS,EAATA,EAAWgB,iBACb,MAAM,IAAI35C,MAAM,mCAA4B24C,EAAU95C,OAExD,IAASm/B,EAAI,EAAGA,GAAI2a,aAAS,EAATA,EAAWgB,iBAAiB3b,IAAK,CACnD,IAAMz2B,EAASoxC,aAAS,EAATA,EAAWnb,QAAQQ,GAQlC,QANyB,KADrB6a,EAAYR,EAAY/3C,IAAIiH,MAE9BsxC,EAAYr6C,KAAKw5C,SAASz0C,KAAK,IAAIk1C,GAAW,EAC9CJ,EAAY14C,IAAI4H,EAAQsxC,IAE1B9pC,EAAKyuB,QAAQj6B,KAAKs1C,QAEqB93C,IAAnCvC,KAAKw5C,SAASa,GAAWjC,MAC3B,MAAM,IAAI52C,MAAM,mDAA4C64C,IAM9D,GAJAr6C,KAAKw5C,SAASa,GAAWjC,MAAQz0C,EAIN,aAAvBw2C,EAAUzB,SAAyB,CACrC,GAAqC,IAAjCyB,EAAUmB,qBAA6BnB,EAAUt5C,WAAW,GAAIyD,IAClE,MAAM,IAAI9C,MAAM,uFAElB,GAAkC,IAA9B24C,EAAUgB,gBACZ,MAAM,IAAI35C,MAAM,4EAElB+O,EAAKyuB,QAAQ0L,MACbn6B,EAAKsoC,aAAc,EAEnB74C,KAAKw5C,SAASa,GAAWjC,OAAS,EAClCp4C,KAAKw5C,SAASa,GAAW7hC,OAAS,EAAA3U,OAAOE,cAAco2C,EAAUt5C,WAAW,GAAIyD,I,GAMtF,IAASX,EAAI,EAAGA,EAAI3D,KAAKy5C,OAAO96C,OAAQgF,IAAK,CAC3C,IACMw2C,EAEN,GAHM5pC,EAAOvQ,KAAKy5C,OAAO91C,GAGQ,KAF3Bw2C,EAAYtT,EAAMn2B,MAAM/M,IAEhB22C,eACZ,MAAM,IAAI94C,MAAM,kCAA2B24C,EAAU95C,OAEvD,IAASm/B,EAAI,EAAGA,EAAI2a,EAAUG,eAAiB9a,IAAK,CAClD,IACM6a,EADA9/B,EAAQ4/B,EAAU7iC,OAAOkoB,GAE/B,QAAyB,KADnB6a,EAAYR,EAAY/3C,IAAIyY,IAEhC,MAAM,IAAI/Y,MAAM,8BAAuB+Y,EAAK,uBAAe4/B,EAAW95C,SAExEkQ,EAAK+G,OAAOvS,KAAKs1C,GAEjBr6C,KAAKw5C,SAASa,GAAWhC,IAAItzC,KAAKpB,E,EAGxC,EAEQ,YAAAs1C,eAAR,sBAEQsC,EAAwB,IAAI3qC,IAClC5Q,KAAKk5C,iBAAiBruC,SAAQ,SAAAlH,GACf,EAAK61C,SAAS71C,GACtB00C,IAAIxtC,SAAQ,SAAA20B,GACf+b,EAASrqC,IAAIsuB,EACf,GACF,IAMA,IAHA,IAAMgc,EAAa93C,MAAMqiB,KAAKw1B,GACxBE,EAAa,IAAI/3C,MAAc1D,KAAKy5C,OAAO96C,QAAQqnB,KAAK,S,aAG5D,IAAM01B,EAAYF,EAAW9Q,MAEC,SAA1B+Q,EAAWC,GACbD,EAAWC,GAAa,SAGxBF,EAAWz2C,KAAK22C,GAChBD,EAAWC,GAAa,OAExB,EAAKjC,OAAOiC,GAAW1c,QAAQn0B,SAAQ,SAAC8wC,GACtC,IAAM1hC,EAAO,EAAKu/B,SAASmC,GAC3B,QAA2B,IAAhB1hC,EAAKzB,OACd,MAAM,IAAIhX,MAAM,0CAElB,GAAIyY,EAAKm+B,QAAUsD,EACjB,MAAM,IAAIl6C,MAAM,iFAElByY,EAAKo+B,IAAIxtC,SAAQ,SAAC+wC,GAEhB,GAAwC,SAApCH,EAAWG,GACb,MAAM,IAAIp6C,MAAM,yBAG2B,UAApCi6C,EAAWG,IAClBJ,EAAWz2C,KAAK62C,EAEpB,GACF,I,SA5BGJ,EAAW78C,OAAS,G,GA+B7B,EAEQ,YAAAq6C,eAAR,SAAuBF,GAErB94C,KAAK67C,yBACL77C,KAAK87C,wBACL97C,KAAK+7C,0BAEDjD,GACFA,EAAiBE,eAAeh5C,MAIlCA,KAAKg8C,eACP,EAQA,YAAAA,cAAA,WAUE,IAVF,WACM7c,EAAS,EAMP8c,EAAa,IAAIv4C,MAAc1D,KAAKy5C,OAAO96C,OAAQ,GACrDu9C,EAAgB,EAEXv4C,EAAI,EAAGA,EAAI3D,KAAKy5C,OAAO96C,OAAQgF,IAEtCs4C,EAAWt4C,GAAKu4C,EACZl8C,KAAKy5C,OAAO91C,GAAGk1C,aACbqD,IAAkBv4C,IACpB3D,KAAKy5C,OAAOyC,GAAiBl8C,KAAKy5C,OAAO91C,IAE3Cu4C,KAIAl8C,KAAKy5C,OAAO91C,GAAGq7B,QAAQn0B,SAAQ,SAAAsxC,GAC7B,EAAK3C,SAAS2C,GAAK/D,OAAS,CAC9B,IAQJ,IAHAp4C,KAAKy5C,OAAOtO,OAAO+Q,EAAel8C,KAAKy5C,OAAO96C,OAASu9C,GAG9Cv4C,EAAI,EAAGA,EAAI3D,KAAKw5C,SAAS76C,OAAQgF,IAAK,CAC7C,IAAMy4C,EAAcp8C,KAAKw5C,SAAS71C,QACRpB,IAAtB65C,EAAYhE,QAA8C,IAAvBgE,EAAYhE,QAAuC,IAAvBgE,EAAYhE,QAC7EgE,EAAYhE,MAAQ6D,EAAWG,EAAYhE,QAG7C,IAAK,IAAI5Y,EAAI,EAAGA,EAAI4c,EAAY/D,IAAI15C,OAAQ6gC,IAAK,CAC/C,KAAI4c,EAAY/D,IAAI7Y,IAAM,GAGxB,MAAM,IAAIh+B,MAAM,mCAFhB46C,EAAY/D,IAAI7Y,GAAKyc,EAAWG,EAAY/D,IAAI7Y,G,EAOtDL,EAAS,E,iBAEAx7B,GAEP,IAA+B,IAA3B,EAAK61C,SAAS71C,GAAGoiB,OAA+D,IAAhD,EAAKszB,kBAAkBzsC,QAAQjJ,EAAIw7B,G,OACrEA,IACA,EAAKqa,SAASrO,OAAOxnC,EAAG,GACxBA,I,EALKA,EAAC,WAQR,GAAIw7B,EAAS,EAAG,CACd,IAAI,GAAO,OAGmB58B,IAA1B,EAAKi3C,SAAS71C,GAAGoiB,OAAiD,IAA3B,EAAKyzB,SAAS71C,GAAGoiB,MAE7C,KADb,EAAM,EAAK0zB,OAAO,EAAKD,SAAS71C,GAAGoiB,MAAMiZ,QAAQpyB,QAAQjJ,EAAIw7B,MAE3D,EAAKsa,OAAO,EAAKD,SAAS71C,GAAGoiB,MAAMiZ,QAAQ,GAAOr7B,IAKvC,KADb,EAAM,EAAKu1C,iBAAiBtsC,QAAQjJ,EAAIw7B,MAEtC,EAAK+Z,iBAAiB,GAAOv1C,GAKjC,EAAK61C,SAAS71C,GAAG8hB,GAAG5a,SAAQ,SAAA0F,IAEb,KADb,EAAM,EAAKkpC,OAAOlpC,GAAM+G,OAAO1K,QAAQjJ,EAAIw7B,MAEzC,EAAKsa,OAAOlpC,GAAM+G,OAAO,GAAO3T,EAEpC,IACmC,IAA/B,EAAK61C,SAAS71C,GAAG8hB,GAAG9mB,SAGT,KADb,EAAM,EAAK06C,kBAAkBzsC,QAAQjJ,EAAIw7B,MAEvC,EAAKka,kBAAkB,GAAO11C,E,GApC7BA,C,SAAT,IAASA,EAAI,EAAGA,EAAI3D,KAAKw5C,SAAS76C,OAAQgF,I,EAAjCA,GAAAA,EAAI,CAyCf,EAOQ,YAAA04C,WAAR,SAAmBX,G,QACXnrC,EAAOvQ,KAAKy5C,OAAOiC,GACzB,GAAInrC,EAAKyuB,QAAQrgC,OAAS,EACxB,IAAK,IAAIgF,EAAI,EAAGA,EAAI4M,EAAKyuB,QAAQrgC,OAAQgF,IACvC,GAAI3D,KAAKw5C,SAASjpC,EAAKyuB,QAAQr7B,IAAI8hB,GAAG9mB,OAAS,EAC7C,MAAM,IAAI6C,MAAM,uFAMtB+O,EAAKsoC,aAAc,EACnB,IAAMyD,EAAkB/rC,EAAK+G,OAAO,GAC9BilC,EAAmBhsC,EAAKyuB,QAAQ,GAChCwd,EAAuBx8C,KAAKw5C,SAAS+C,GAAkB92B,GAG7D,IAAS9hB,EAAI,EAAGA,EAAI4M,EAAK+G,OAAO3Y,OAAQgF,IAAK,CAC3C,IAAM84C,EAAWz8C,KAAKw5C,SAASjpC,EAAK+G,OAAO3T,IAAI8hB,GAAG7Y,QAAQ8uC,GAE1D,IAAkB,IAAde,EACF,MAAM,IAAIj7C,MAAM,yEAElBxB,KAAKw5C,SAASjpC,EAAK+G,OAAO3T,IAAI8hB,GAAG0lB,OAAOsR,EAAU,E,CAIpDz8C,KAAKw5C,SAAS+C,GAAkBlE,IAAM,GAGtC,IAAM1pC,EAAQ3O,KAAKq5C,kBAAkBzsC,QAAQ2vC,GAM7C,IALe,IAAX5tC,IACF3O,KAAKq5C,kBAAkB1qC,GAAS2tC,GAI9BE,GAAwBA,EAAqB79C,OAAS,E,IACxD,IAAwB,QAAA69C,GAAoB,8BAAE,CAAzC,IAAM,EAAS,QACZE,EAAe18C,KAAKy5C,OAAO,GAAWniC,OAAO1K,QAAQ2vC,GAE3D,IAAsB,IAAlBG,EACF,MAAM,IAAIl7C,MAAM,4EAElBxB,KAAKy5C,OAAO,GAAWniC,OAAOolC,GAAgBJ,EAC9Ct8C,KAAKw5C,SAAS8C,GAAiB72B,GAAG1gB,KAAK,E,mGAG7C,EAEA,YAAA+2C,sBAAA,W,QACMJ,EAAY,E,IAChB,IAAmB,QAAA17C,KAAKy5C,QAAM,8BAAE,CAA3B,IAAMlpC,EAAI,QAEb,GAAoB,YAAhBA,EAAKmoC,OAAsB,CAE7B,GAA2B,IAAvBnoC,EAAK+G,OAAO3Y,OACd,MAAM,IAAI6C,MAAM,iDAElB,GAA4B,IAAxB+O,EAAKyuB,QAAQrgC,QAAwC,IAAxB4R,EAAKyuB,QAAQrgC,OAC5C,MAAM,IAAI6C,MAAM,wDAGlB,GAA4B,IAAxB+O,EAAKyuB,QAAQrgC,QAA8D,IAA9CqB,KAAKw5C,SAASjpC,EAAKyuB,QAAQ,IAAIqZ,IAAI15C,OAClE,MAAM,IAAI6C,MAAM,yEAElBxB,KAAKq8C,WAAWX,E,CAElBA,G,mGAEJ,EAEA,YAAAG,uBAAA,W,QACMH,EAAY,E,IAChB,IAAmB,QAAA17C,KAAKy5C,QAAM,8BAER,aAFP,QAEJf,QACP14C,KAAKq8C,WAAWX,GAElBA,G,kGAEJ,EAEA,YAAAiB,aAAA,SAAa1M,GACX,OAAQA,EAAEyI,QAER,IAAK,OACL,IAAK,UACL,IAAK,OACH,OAAO,EACT,QACE,OAAO,EAEb,EAEA,YAAAqD,wBAAA,W,YACE,IAAmB,QAAA/7C,KAAKy5C,QAAM,8BAAE,CAA3B,IAAMlpC,EAAI,QACb,GAAoB,SAAhBA,EAAKmoC,OAAmB,CAC1B,IAAMkE,EAAO58C,KAAKw5C,SAASjpC,EAAKyuB,QAAQ,IAAIqZ,IAC5C,GAAoB,IAAhBuE,EAAKj+C,QAAgBqB,KAAK28C,aAAa38C,KAAKy5C,OAAOmD,EAAK,KAAM,CAChE,IAAMC,EAAQ78C,KAAKy5C,OAAOmD,EAAK,IAC/B,GAAqB,SAAjBC,EAAMnE,OACR,GAA4B,IAAxBmE,EAAMvlC,OAAO3Y,OACf,IACE4R,EAAK1P,WAAWM,IACZ,oBAAqB,SACrB,CAAC07C,EAAMh8C,WAAWe,SAAS,OAAQi7C,EAAMh8C,WAAWe,SAAS,Q,CACjE,MAAOiF,GACP0J,EAAK1P,WAAWM,IAAI,oBAAqB,SAAU,CAAC,EAAAguB,SAAU,EAAAC,U,KAE3D,MACHytB,EAAMvlC,OAAO3Y,QAAU,QAA+C4D,IAA1CvC,KAAKw5C,SAASqD,EAAMvlC,OAAO,IAAIkB,aACjBjW,IAA1CvC,KAAKw5C,SAASqD,EAAMvlC,OAAO,IAAIkB,QAMjC,SALAjI,EAAK1P,WAAWM,IAAI,oBAAqB,SAAU,CACjDnB,KAAKw5C,SAASqD,EAAMvlC,OAAO,IAAIkB,OAAQ0d,UAAU,GAAIl2B,KAAKw5C,SAASqD,EAAMvlC,OAAO,IAAIkB,OAAQ0d,UAAU,I,CAO5G3lB,EAAK1P,WAAWM,IAAI,aAAc,SAAW07C,EAAY,QACzD78C,KAAKq8C,WAAWO,EAAK,G,qGAI7B,EACF,EAjqBA,E,4gDC5CA,8BAIA,QAHE,YAAAl9B,IAAA,SAAIo9B,EAA4BC,EAAkBC,GAElD,EACF,EAJA,GAKA,0BAsBA,QArBE,YAAAt9B,IAAA,SAAIu9B,EAA2BC,EAAiBC,GAE9CC,QAAQ19B,IAAI,UAAG1f,KAAKq9C,MAAMJ,GAAS,YAAIE,EAAW,QAAaA,EAAW,QAAa,IAAE,OAAGD,GAC9F,EAEQ,YAAAG,MAAR,SAAcJ,GACZ,OAAQA,GACN,IAAK,UACH,MAAO,gBACT,IAAK,OACH,MAAO,aACT,IAAK,UACH,MAAO,gBACT,IAAK,QACH,MAAO,gBACT,IAAK,QACH,MAAO,cACT,QACE,MAAM,IAAIz7C,MAAM,gCAAyBy7C,IAE/C,EACF,EAtBA,GAwBMK,EAAiB,CACrB12C,QAAS,IACT22C,KAAM,IACNz2C,QAAS,IACT+8B,MAAO,IACP2Z,MAAO,KAGHC,IAAmB,MAChB,KAAG,IAAIC,EACd,EAAU,QAAG,IAAIC,E,GAEbC,EAAwB,CAC5BC,SAAU,UACVC,gBAAiB,UACjBC,aAAa,EACbC,mBAAmB,GAEjBC,IAAiB,MAC2C,IAAKL,EAAgD,GAMrH,SAASl+B,EACLw+B,EAA8BC,EAAeC,EAAsBC,GACrE,QAAa97C,IAAT47C,EAEF,OAkB6BhB,EAlBEe,EAmB1B,CACLt3C,QAAS8Y,EAAI9Y,QAAQ03C,KAAK,KAAMnB,GAChCI,KAAM79B,EAAI69B,KAAKe,KAAK,KAAMnB,GAC1Br2C,QAAS4Y,EAAI5Y,QAAQw3C,KAAK,KAAMnB,GAChCtZ,MAAOnkB,EAAImkB,MAAMya,KAAK,KAAMnB,GAC5BK,MAAO99B,EAAI89B,MAAMc,KAAK,KAAMnB,IAvBvB,QAAa56C,IAAT67C,EAETG,EAAYL,EAAyBC,QAChC,GAAoB,iBAATC,QAA8B77C,IAAT87C,EAErCE,EAAYL,EAAyBC,QAChC,GAAoB,iBAATC,QAA8B77C,IAAT87C,EAErCE,EAAYL,EAAyBE,EAAM,EAAGD,OACzC,IAAoB,iBAATC,GAAqC,iBAATC,EAI5C,MAAM,IAAI1wB,UAAU,kBAFpB4wB,EAAYL,EAAyBE,EAAMC,EAAMF,E,CAMrD,IAAiChB,CAFjC,CAeA,SAASoB,EAAYtB,EAA2BC,EAAiBsB,EAAerB,GAC9E,IAAMlT,EAASgU,EAAkBd,GAAY,KAAOc,EAAkB,IAClEX,EAAeL,GAAYK,EAAerT,EAAO6T,mBAIjD7T,EAAO8T,cACTb,EAAU,WAAG,IAAIuB,MAAOC,cAAa,YAAIxB,IAGvCjT,EAAO+T,kBAIXP,EAAoBxT,EAAO4T,UAAUn+B,IAAIu9B,EAAUC,EAASC,GAC9D,EAGA,SAAUz9B,GA2BR,SAAgB42B,EAAMrM,GACpBgU,EAAoB,CAAC,EACrB98C,EAAI,GAAI8oC,GAAU,CAAC,EACrB,CACA,SAAgB9oC,EAAIg8C,EAAkBlT,GACpC,GAAiB,MAAbkT,EACF7G,EAAMrM,OACD,CACL,IAAM0U,EAAiBV,EAAkBd,IAAaS,EACtDK,EAAkBd,GAAY,CAC5BU,SAAU5T,EAAO4T,UAAYc,EAAed,SAC5CC,gBAAiB7T,EAAO6T,iBAAmBa,EAAeb,gBAC1DC,iBAAqCx7C,IAAvB0nC,EAAO8T,YAA6BY,EAAeZ,YAAc9T,EAAO8T,YACtFC,uBAAiDz7C,IAA7B0nC,EAAO+T,kBAAmCW,EAAeX,kBACf/T,EAAO+T,kB,CAK3E,CA3CgB,EAAAp3C,QAAhB,SAAwBs3C,EAAcC,GACpCz+B,EAAI,UAAWw+B,EAAMC,EACvB,EAGgB,EAAAZ,KAAhB,SAAqBW,EAAcC,GACjCz+B,EAAI,OAAQw+B,EAAMC,EACpB,EAGgB,EAAAr3C,QAAhB,SAAwBo3C,EAAcC,GACpCz+B,EAAI,UAAWw+B,EAAMC,EACvB,EAGgB,EAAAta,MAAhB,SAAsBqa,EAAcC,GAClCz+B,EAAI,QAASw+B,EAAMC,EACrB,EAGgB,EAAAX,MAAhB,SAAsBU,EAAcC,GAClCz+B,EAAI,QAASw+B,EAAMC,EACrB,EAEgB,EAAA7H,MAAK,EAIL,EAAAn1C,IAAG,EAiBH,EAAAuF,WAAhB,SAA2B1I,GACzB,IAAMisC,EAAwB,CAAC,EAC3BjsC,EAAI4gD,WACN3U,EAAO6T,gBAAkB9/C,EAAI4gD,UAE/Bz9C,EAAI,GAAI8oC,EACV,CACD,CAvDD,CAAUvqB,IAAAA,EAAG,KA0DA,EAAAjZ,OAAiBiZ,EAkB9B,iBACE,WACWy9B,EAAyC98C,EAAqBw+C,EAC7DC,EAAsDC,EAA2BC,GADlF,KAAA7B,SAAAA,EAAyC,KAAA98C,KAAAA,EAAqB,KAAAw+C,UAAAA,EAC7D,KAAAC,YAAAA,EAAsD,KAAAC,MAAAA,EAA2B,KAAAC,IAAAA,CAAqB,CAcpH,OAZQ,YAAAxiB,IAAN,W,mEACE,MAAO,CAAP,EAAOx8B,KAAK8+C,YAAY9+C,M,QAGpB,YAAAi/C,WAAN,W,mEACE,QAAiB18C,IAAbvC,KAAKg/C,UAAoCz8C,IAAfvC,KAAK++C,MACjC,MAAM,IAAIv9C,MAAM,wBAGhB,OADAxB,KAAKg/C,IAAI1K,WACF,CAAP,EAAOt0C,KAAKg/C,IAAI9J,uBAAuBl1C,KAAK++C,O,QAGlD,EAjBA,GAmBA,EACE,SACW5B,EAAyC98C,EAAqBw+C,EAA0BK,GAAxF,KAAA/B,SAAAA,EAAyC,KAAA98C,KAAAA,EAAqB,KAAAw+C,UAAAA,EAA0B,KAAAK,QAAAA,CAAkB,EAGvH,aAQE,WAAoBC,EAA0BC,EAAyBC,GA+H/D,KAAAC,UAAW,EASX,KAAAC,cAAgB,EAvItBv/C,KAAKs/C,UAAW,EAChBt/C,KAAKw/C,sBAAuCj9C,IAApB48C,EAAgC,IAAQA,EAChEn/C,KAAKy/C,qBAAqCl9C,IAAnB68C,EAA+B,GAAKA,EAC3Dp/C,KAAK0/C,kCAA+Dn9C,IAAhC88C,EAA4C,IAAOA,CACzF,CAoIF,OAhJS,EAAAM,OAAP,SAAc1V,GACZ,YAAe1nC,IAAX0nC,EACK,IAAIjqC,KAEN,IAAIA,KAAKiqC,EAAOkV,gBAAiBlV,EAAOmV,eAAgBnV,EAAOoV,4BACxE,EAUA,YAAAznB,MAAA,WACE53B,KAAKs/C,UAAW,EAChBt/C,KAAK4/C,cAAgB,GACrB5/C,KAAK6/C,YAAa,IAAAC,OAClB9/C,KAAKu/C,cAAgB,CACvB,EAGA,YAAAQ,KAAA,WAEE,IADA//C,KAAKs/C,UAAW,EACTt/C,KAAKu/C,cAAgBv/C,KAAK4/C,cAAcjhD,OAAQqB,KAAKu/C,gBAC1Dv/C,KAAKggD,YAAYhgD,KAAK4/C,cAAc5/C,KAAKu/C,eAE7C,EAMA,YAAAlc,MAAA,SAAS8Z,EAAkC98C,EAAcsuB,EAA4BqwB,GAArF,WAEQ3b,EAAQrjC,KAAKs/C,SAAWt/C,KAAKigD,MAAM9C,EAAU98C,EAAM2+C,QAAOz8C,EAC5D29C,GAAY,EAEV5rB,EAAM3F,IAGZ,GAAI2F,GAA2C,mBAA5BA,EAAmB6rB,KAEpC,OADAD,GAAY,EACL,IAAI/gD,SAAW,SAACC,EAAS0sC,GAC7BxX,EACI6rB,MACG,SAAMxgD,GAAK,qC,yDACL0jC,EACF,GAAMA,EAAM7G,OADV,M,OACF,S,wBAEFp9B,EAAQO,G,cAEV,SAAMygD,GAAM,qC,yDACN/c,EACF,GAAMA,EAAM7G,OADV,M,OACF,S,wBAEFsP,EAAOsU,G,aAEnB,IAEF,IAAKF,GAAa7c,EAAO,CACvB,IAAM,EAAWA,EAAM7G,MACvB,GAAI,GAAqC,mBAAlB,EAAS2jB,KAC9B,OAAO,IAAIhhD,SAAW,SAACC,EAAS0sC,GAC9B,EAAWqU,MACP,WACE/gD,EAAQk1B,EACV,IACA,SAAC8rB,GACCtU,EAAOsU,EACT,GACN,G,CAGJ,OAAO9rB,CACT,EAGA,YAAA2rB,MAAA,SAAM9C,EAAkC98C,EAAc2+C,GAAtD,WACE,IAAKh/C,KAAKs/C,SACR,MAAM,IAAI99C,MAAM,+BAElB,QAAYe,IAARy8C,EAAmB,CACrB,IAAMH,GAAY,IAAAiB,OAElB,OADA9/C,KAAKy1C,MAAMoJ,GACJ,IAAIwB,EAAMlD,EAAU98C,EAAMw+C,GAAW,SAAAh4C,GAAK,SAAKy5C,QAAQz5C,EAAb,G,CAEjD,IAAMk4C,EAAoBC,EAAIjL,aAC9B,OAAO,IAAIsM,EAAMlD,EAAU98C,EAAM,GAAG,SAAMwG,GAAC,gEAAI,SAAA7G,KAAKw8B,IAAI31B,G,SAAIk4C,EAAOC,EAEvE,EAGc,YAAAxiB,IAAd,SAAkB6G,G,gGACQ,SAAMA,EAAM4b,c,cAA9BC,EAAkB,SACpBl/C,KAAK4/C,cAAcjhD,OAASqB,KAAKw/C,mBACnCx/C,KAAK4/C,cAAc76C,KAAK,IAAIw7C,EAAYld,EAAM8Z,SAAU9Z,EAAMhjC,KAAMgjC,EAAMwb,UAAWK,IACrFl/C,KAAKy1C,MAAMyJ,I,YAIP,YAAAoB,QAAR,SAAgBjd,GACd,IAAM6b,GAAkB,IAAAY,OACpB9/C,KAAK4/C,cAAcjhD,OAASqB,KAAKw/C,mBACnCx/C,KAAK4/C,cAAc76C,KAAK,IAAIw7C,EAAYld,EAAM8Z,SAAU9Z,EAAMhjC,KAAMgjC,EAAMwb,UAAWK,IACrFl/C,KAAKy1C,MAAMyJ,GAEf,EAEQ,YAAAc,YAAR,SAAoB3c,GAClB,EAAA58B,OAAOG,QACH,mBAAYy8B,EAAM8Z,UAClB,WAAI9Z,EAAM6b,QAAU7b,EAAMwb,WAAW2B,QAAQ,GAAE,wBAAgBnd,EAAMhjC,KAAI,gBAAQgjC,EAAM6b,QAAQsB,QAAQ,IAC7G,EAEQ,YAAA/K,MAAR,SAAcgL,GACZ,GAAIzgD,KAAK4/C,cAAcjhD,OAASqB,KAAKu/C,eAAiBv/C,KAAKy/C,iBACvDgB,EAAczgD,KAAK6/C,YAAc7/C,KAAK0/C,6BAA8B,CAGtE,IAAK,IAAMgB,EAAkB1gD,KAAKu/C,cAAev/C,KAAKu/C,cAAgBmB,EAAkB1gD,KAAKy/C,iBACxFz/C,KAAKu/C,cAAgBv/C,KAAK4/C,cAAcjhD,OACxCqB,KAAKu/C,gBACRv/C,KAAKggD,YAAYhgD,KAAK4/C,cAAc5/C,KAAKu/C,gBAG3Cv/C,KAAK6/C,YAAa,IAAAC,M,CAEtB,EAEA,sBAAI,sBAAO,C,IAAX,WACE,OAAO9/C,KAAKs/C,QACd,E,gCAWF,EAjJA,GAAa,EAAAqB,SAAAA,EAsJA,EAAAb,IAA8B,oBAAhBc,aAA+BA,YAAYd,IAAO,WAAM,OAAAc,YAAYd,KAAZ,EAAoBrB,KAAKqB,G,oGC3b5G,cAEA,UAEA,UACA,UACA,UAEOr/C,EAAS,EAAAC,YAAYC,aAAaC,IAEzC,aAEE,aAAe,CAwDjB,OAtDE,YAAAigD,KAAA,SAAKC,EAAiBhI,EAAsCiI,GAC1D,IAAKA,EAEH,IAEE,YADA/gD,KAAKghD,mBAAmBF,EAAKhI,E,CAE7B,MAAOjyC,GACP,QAAoBtE,IAAhBw+C,EACF,MAAMl6C,C,CAKZ7G,KAAKihD,kBAAkBH,EAAKhI,EAC9B,EAEQ,YAAAkI,mBAAR,SAA2BF,EAAiBhI,GAC1C,IAAMoI,EAAa,EAAAjgD,KAAKkgD,WAAW5vC,OAAOuvC,GAE1C,GADkB,EAAAz9C,SAASE,aAAa29C,EAAWE,WACnC,EACd,MAAM,IAAI5/C,MAAM,8CAGlBxB,KAAKqhD,QACDH,EAAWI,YAAYlhD,KAAI,SAAAuD,GAAK,OAAE49C,OAAQ59C,EAAE49C,OAAkB3hD,QAAS,EAAAyD,SAASE,aAAaI,EAAE/D,SAA/D,IAEpCI,KAAKwhD,OAAS,EAAAzJ,MAAMhyB,KAAKm7B,EAAWra,MAAQiS,EAC9C,EAEQ,YAAAmI,kBAAR,SAA0BH,EAAiBhI,GACzC,IAAMnG,EAAK,IAAI,EAAA8O,YAAYC,WAAWZ,GAChCa,EAAWlhD,EAAOmhD,iBAAiBC,0BAA0BlP,GAAImP,QAEvE,GADkB,EAAAz+C,SAASE,aAAao+C,EAASP,aACjC,EACd,MAAM,IAAI5/C,MAAM,8CAElBxB,KAAKqhD,QAAU,GACf,IAAK,IAAI19C,EAAI,EAAGA,EAAIg+C,EAASI,oBAAqBp+C,IAAK,CACrD,IAAMq+C,EAAUL,EAASL,YAAY39C,GACrC3D,KAAKqhD,QAAQt8C,KAAK,CAACw8C,OAAQS,aAAO,EAAPA,EAAST,SAAoB3hD,QAAS,EAAAyD,SAASE,aAAay+C,EAAQpiD,Y,CAGjGI,KAAKwhD,OAAS,EAAAzJ,MAAMhyB,KAAK47B,EAAS9a,QAAUiS,EAC9C,EAGA,sBAAI,oBAAK,C,IAAT,WACE,OAAO94C,KAAKwhD,MACd,E,gCAGA,sBAAI,qBAAM,C,IAAV,WACE,OAAOxhD,KAAKqhD,OACd,E,gCACF,EA1DA,GAAa,EAAAY,MAAAA,C,mICEA,EAAAnyB,aACT,CAAC,UAAW,UAAW,QAAS,QAAS,OAAQ,SAAU,SAAU,SAC5D,EAAAoyB,UAAwC,CAAC,QAAS,QAAS,OAAQ,SAAU,SAAU,SACvF,EAAAC,YAA0C,CAAC,UAAW,U,uWC8BnE,SAASC,EAAcxiD,EAAiByiD,GACtC,GAAIA,EAASC,SAAS,KAAM,CAE1B,IAAMC,EAAajkD,OAAOkkD,SAASH,EAASI,UAAU,EAAGJ,EAAS1jD,OAAS,GAAI,IAC/E,OAAQ+jD,MAAMH,IAAeA,GAAc3iD,C,CACtC,GAAmC,IAA/ByiD,EAAS3vC,MAAM,KAAK/T,OAAc,CAE3C,IAAMgkD,EAAON,EAAS3vC,MAAM,KAEtBkwC,GADAL,EAAajkD,OAAOkkD,SAASG,EAAK,GAAI,IAC3BrkD,OAAOkkD,SAASG,EAAK,GAAI,KAC1C,OAAQD,MAAMH,KAAgBG,MAAME,IAAaL,GAAc3iD,GAAWA,GAAWgjD,C,CAGrF,OAAOtkD,OAAOkkD,SAASH,EAAU,MAAQziD,CAE7C,C,0EAvCA,2BAAgC2Q,EAAkB02B,EAA0B4b,G,gBAC1E,IAAmB,QAAAA,GAAK,8BAAE,CAArB,IAAMC,EAAI,QACPpK,EAASoK,EAAK,GACdvB,EAASuB,EAAK,GACdC,EAAkBD,EAAK,GACvBzb,EAASyb,EAAK,GACdxb,EAASwb,EAAK,GAEpB,GAAIvyC,EAAKmoC,SAAWA,E,IAClB,IAAoB,kBAAAzR,IAAM,8BAAE,CAAvB,IAAM9E,EAAK,QAEd,IAAIA,EAAMof,SAAWA,GAA4B,YAAjBpf,EAAMof,QAAmC,KAAXA,IACxDa,EAAcjgB,EAAMviC,QAASmjD,GAC/B,MAAO,CAAC1b,OAAM,EAAEC,OAAM,E,sMAOhC,MAAM,IAAI3Z,UAAU,mCAA4Bpd,EAAKmoC,OAAM,0BACvDzR,EAAO7mC,KAAI,SAAAe,GAAO,gBAAGA,EAAIogD,QAAU,UAAS,aAAKpgD,EAAIvB,QAAnC,IAA8CU,KAAK,OAC3E,C,0GC3CA,IAKiBI,EAAYC,EAAaC,EAC5B4B,EANd,UAKiB9B,EAAA,EAAAA,cAAA,EAAAA,YAAW,IAACC,EAAA,EAAAA,eAAA,EAAAA,aAAY,IAACC,EAAA,EAAAA,MAAA,EAAAA,IAAG,KAC/B4B,EAAA,EAAAA,gBAAA,EAAAA,cAAa,KACvB,2BACA,qBACA,iBACA,uBACA,uBACA,qBACA,uBACA,mBACA,yBACA,yBACA,wBACA,sCACA,wCAOJ,SAAiB9B,IAAY,SAAAC,IAAa,SAAAC,GACxC,IAAYoiD,KAAA,EAAAA,qBAAA,EAAAA,mBAAkB,KAAE,uBAAa,qBAAW,oBACzD,CAFyC,GAAApiD,MAAA,EAAAA,IAAG,IAE5C,CAF4B,GAAAD,eAAA,EAAAA,aAAY,IAExC,CAFD,CAAiB,EAAAD,cAAA,EAAAA,YAAW,KAO5B,SAAiBA,IAAY,SAAAC,IAAa,SAAAC,GACxC,IAAYqiD,KAAA,EAAAA,iBAAA,EAAAA,eAAc,KACxB,2BACA,qBACA,qBACA,mBACA,uBACA,qBACA,qBACA,qBACA,uBACA,mBACA,0BACA,wBACA,wBACA,wBACA,8BACA,gCACA,4BACA,oCACA,wCACA,gCACA,uCAEH,CAxByC,GAAAriD,MAAA,EAAAA,IAAG,IAwB5C,CAxB4B,GAAAD,eAAA,EAAAA,aAAY,IAwBxC,CAxBD,CAAiB,EAAAD,cAAA,EAAAA,YAAW,KA6B5B,SAAiBA,IAAY,SAAAC,IAAa,SAAAC,GACxC,IAAYsiD,KAAA,EAAAA,WAAA,EAAAA,SAAQ,KAAE,2BAAe,oBACtC,CAFyC,GAAAtiD,MAAA,EAAAA,IAAG,IAE5C,CAF4B,GAAAD,eAAA,EAAAA,aAAY,IAExC,CAFD,CAAiB,EAAAD,cAAA,EAAAA,YAAW,KAO5B,SAAiBA,IAAY,SAAAC,IAAa,SAAAC,GACxC,IAAY+5C,KAAA,EAAAA,gBAAA,EAAAA,cAAa,KAAE,iBAAU,iCAAiB,qCAAmB,0BAC1E,CAFyC,GAAA/5C,MAAA,EAAAA,IAAG,IAE5C,CAF4B,GAAAD,eAAA,EAAAA,aAAY,IAExC,CAFD,CAAiB,EAAAD,cAAA,EAAAA,YAAW,KAO5B,SAAiBA,IAAY,SAAAC,IAAa,SAAAC,GACxC,8BACE,KAAAuiD,GAAkC,KAElC,KAAAC,OAAS,CAqGX,QA/FE,YAAAC,OAAA,SAAO1/C,EAAWw/C,GAGhB,OAFAnjD,KAAKojD,OAASz/C,EACd3D,KAAKmjD,GAAKA,EACHnjD,IACT,EAOO,EAAAsjD,eAAP,SAAsBH,EAA4B59C,GAChD,OAAQA,GAAO,IAAIg+C,GAASF,OAAOF,EAAGK,UAAUL,EAAGje,YAAcie,EAAGje,WAAYie,EAClF,EAOO,EAAAM,2BAAP,SAAkCN,EAA4B59C,GAE5D,OADA49C,EAAGO,YAAYP,EAAGje,WAAa,EAAAuc,YAAYkC,qBACnCp+C,GAAO,IAAIg+C,GAASF,OAAOF,EAAGK,UAAUL,EAAGje,YAAcie,EAAGje,WAAYie,EAClF,EAOA,YAAA7nB,IAAA,SAAI3sB,EAAepJ,GACjB,IAAI45B,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,GAC5C,OAAOjkB,GAAU55B,GAAO,IAAI7E,EAAYC,aAAaC,IAAIijD,WACpCR,OAAOrjD,KAAKmjD,GAAIW,WAAW9jD,KAAKmjD,GAAIY,SAAS/jD,KAAKojD,OAASjkB,GAAkB,EAARxwB,GAAY3O,KAAKmjD,IAC3F,IAClB,EAKA,YAAApI,UAAA,WACE,IAAI5b,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,GAC5C,OAAOjkB,EAASn/B,KAAKmjD,GAAIa,aAAahkD,KAAKojD,OAASjkB,GAAU,CAChE,EAKO,EAAA8kB,WAAP,SAAkBC,GAChBA,EAAQC,YAAY,EACtB,EAMO,EAAAC,OAAP,SAAcF,EAA8BxuC,GAC1CwuC,EAAQG,eAAe,EAAG3uC,EAAW,EACvC,EAOO,EAAA4uC,gBAAP,SAAuBJ,EAA8BjqC,GACnDiqC,EAAQK,YAAY,EAAGtqC,EAAKtb,OAAQ,GACpC,IAAK,IAAIgF,EAAIsW,EAAKtb,OAAS,EAAGgF,GAAK,EAAGA,IACpCugD,EAAQM,UAAUvqC,EAAKtW,IAEzB,OAAOugD,EAAQO,WACjB,EAMO,EAAAC,eAAP,SAAsBR,EAA8BS,GAClDT,EAAQK,YAAY,EAAGI,EAAU,EACnC,EAMO,EAAAC,SAAP,SAAgBV,GAEd,OADaA,EAAQW,WAEvB,EAEO,EAAAC,YAAP,SAAmBZ,EAA8BxuC,GAG/C,OAFA6tC,EAAMU,WAAWC,GACjBX,EAAMa,OAAOF,EAASxuC,GACf6tC,EAAMqB,SAASV,EACxB,EACF,EAxGA,GAAa,EAAAX,MAAK,CAyGnB,CA1GyC,GAAA3iD,MAAA,EAAAA,IAAG,IA0G5C,CA1G4B,GAAAD,eAAA,EAAAA,aAAY,IA0GxC,CA1GD,CAAiB,EAAAD,cAAA,EAAAA,YAAW,KA8G5B,SAAiBA,IAAY,SAAAC,IAAa,SAAAC,GACxC,8BACE,KAAAuiD,GAAkC,KAElC,KAAAC,OAAS,CA6FX,QAvFE,YAAAC,OAAA,SAAO1/C,EAAWw/C,GAGhB,OAFAnjD,KAAKojD,OAASz/C,EACd3D,KAAKmjD,GAAKA,EACHnjD,IACT,EAOO,EAAA+kD,mBAAP,SAA0B5B,EAA4B59C,GACpD,OAAQA,GAAO,IAAIs+C,GAAaR,OAAOF,EAAGK,UAAUL,EAAGje,YAAcie,EAAGje,WAAYie,EACtF,EAOO,EAAA6B,+BAAP,SAAsC7B,EAA4B59C,GAEhE,OADA49C,EAAGO,YAAYP,EAAGje,WAAa,EAAAuc,YAAYkC,qBACnCp+C,GAAO,IAAIs+C,GAAaR,OAAOF,EAAGK,UAAUL,EAAGje,YAAcie,EAAGje,WAAYie,EACtF,EAMA,YAAAxjD,MAAA,SAAM4F,GACJ,IAAI45B,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,GAC5C,OAAOjkB,GAAU55B,GAAO,IAAI7E,EAAYC,aAAaC,IAAIqkD,gBACpC5B,OAAOrjD,KAAKmjD,GAAIW,WAAW9jD,KAAKojD,OAASjkB,GAASn/B,KAAKmjD,IAC5D,IAClB,EAQA,YAAA+B,WAAA,SAAWC,GACT,IAAIhmB,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,GAC5C,OAAOjkB,EAASn/B,KAAKmjD,GAAIiC,SAASplD,KAAKojD,OAASjkB,EAAQgmB,GAAoB,IAC9E,EAKO,EAAAE,eAAP,SAAsBnB,GACpBA,EAAQC,YAAY,EACtB,EAMO,EAAAmB,SAAP,SAAgBpB,EAA8BqB,GAC5CrB,EAAQG,eAAe,EAAGkB,EAAa,EACzC,EAMO,EAAAC,cAAP,SAAqBtB,EAA8BuB,GACjDvB,EAAQG,eAAe,EAAGoB,EAAkB,EAC9C,EAMO,EAAAC,aAAP,SAAoBxB,GAElB,OADaA,EAAQW,WAEvB,EAEO,EAAAc,gBAAP,SACIzB,EAA8BqB,EAC9BE,GAIF,OAHA5B,EAAUwB,eAAenB,GACzBL,EAAUyB,SAASpB,EAASqB,GAC5B1B,EAAU2B,cAActB,EAASuB,GAC1B5B,EAAU6B,aAAaxB,EAChC,EACF,EAhGA,GAAa,EAAAL,UAAS,CAiGvB,CAlGyC,GAAAjjD,MAAA,EAAAA,IAAG,IAkG5C,CAlG4B,GAAAD,eAAA,EAAAA,aAAY,IAkGxC,CAlGD,CAAiB,EAAAD,cAAA,EAAAA,YAAW,KAsG5B,SAAiBA,IAAY,SAAAC,IAAa,SAAAC,GACxC,8BACE,KAAAuiD,GAAkC,KAElC,KAAAC,OAAS,CA4GX,QAtGE,YAAAC,OAAA,SAAO1/C,EAAWw/C,GAGhB,OAFAnjD,KAAKojD,OAASz/C,EACd3D,KAAKmjD,GAAKA,EACHnjD,IACT,EAOO,EAAA4lD,wBAAP,SAA+BzC,EAA4B59C,GACzD,OAAQA,GAAO,IAAI0/C,GAAkB5B,OAAOF,EAAGK,UAAUL,EAAGje,YAAcie,EAAGje,WAAYie,EAC3F,EAOO,EAAA0C,oCAAP,SAA2C1C,EAA4B59C,GAErE,OADA49C,EAAGO,YAAYP,EAAGje,WAAa,EAAAuc,YAAYkC,qBACnCp+C,GAAO,IAAI0/C,GAAkB5B,OAAOF,EAAGK,UAAUL,EAAGje,YAAcie,EAAGje,WAAYie,EAC3F,EAKA,YAAA2C,QAAA,WACE,IAAI3mB,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,GAC5C,OAAOjkB,EAAkBn/B,KAAKmjD,GAAI4C,SAAS/lD,KAAKojD,OAASjkB,GACzCz+B,EAAYC,aAAaC,IAAIoiD,mBAAmBgD,OAClE,EAKA,YAAAhL,SAAA,WACE,IAAI7b,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,GAC5C,OAAOjkB,EAASn/B,KAAKmjD,GAAI8C,UAAUjmD,KAAKojD,OAASjkB,GAAUn/B,KAAKmjD,GAAI+C,WAAW,EAAG,EACpF,EAQA,YAAAC,SAAA,SAAShB,GACP,IAAIhmB,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,GAC5C,OAAOjkB,EAASn/B,KAAKmjD,GAAIiC,SAASplD,KAAKojD,OAASjkB,EAAQgmB,GAAoB,IAC9E,EAKO,EAAAiB,oBAAP,SAA2BlC,GACzBA,EAAQC,YAAY,EACtB,EAMO,EAAAkC,WAAP,SAAkBnC,EAA8B4B,GAC9C5B,EAAQoC,aAAa,EAAGR,EAASplD,EAAYC,aAAaC,IAAIoiD,mBAAmBgD,QACnF,EAMO,EAAAO,YAAP,SAAmBrC,EAA8BlJ,GAC/CkJ,EAAQsC,cAAc,EAAGxL,EAAUkJ,EAAQgC,WAAW,EAAG,GAC3D,EAMO,EAAAO,YAAP,SAAmBvC,EAA8BwC,GAC/CxC,EAAQG,eAAe,EAAGqC,EAAgB,EAC5C,EAMO,EAAAC,kBAAP,SAAyBzC,GAEvB,OADaA,EAAQW,WAEvB,EAEO,EAAA+B,qBAAP,SACI1C,EAA8B4B,EAC9B9K,EAA4B0L,GAK9B,OAJAzB,EAAemB,oBAAoBlC,GACnCe,EAAeoB,WAAWnC,EAAS4B,GACnCb,EAAesB,YAAYrC,EAASlJ,GACpCiK,EAAewB,YAAYvC,EAASwC,GAC7BzB,EAAe0B,kBAAkBzC,EAC1C,EACF,EA/GA,GAAa,EAAAe,eAAc,CAgH5B,CAjHyC,GAAArkD,MAAA,EAAAA,IAAG,IAiH5C,CAjH4B,GAAAD,eAAA,EAAAA,aAAY,IAiHxC,CAjHD,CAAiB,EAAAD,cAAA,EAAAA,YAAW,KAqH5B,SAAiBA,IAAY,SAAAC,IAAa,SAAAC,GACxC,8BACE,KAAAuiD,GAAkC,KAElC,KAAAC,OAAS,CA4FX,QAtFE,YAAAC,OAAA,SAAO1/C,EAAWw/C,GAGhB,OAFAnjD,KAAKojD,OAASz/C,EACd3D,KAAKmjD,GAAKA,EACHnjD,IACT,EAOO,EAAA6mD,4BAAP,SAAmC1D,EAA4B59C,GAC7D,OAAQA,GAAO,IAAIs1C,GAAsBwI,OAAOF,EAAGK,UAAUL,EAAGje,YAAcie,EAAGje,WAAYie,EAC/F,EAOO,EAAA2D,wCAAP,SAA+C3D,EAA4B59C,GAGzE,OADA49C,EAAGO,YAAYP,EAAGje,WAAa,EAAAuc,YAAYkC,qBACnCp+C,GAAO,IAAIs1C,GAAsBwI,OAAOF,EAAGK,UAAUL,EAAGje,YAAcie,EAAGje,WAAYie,EAC/F,EAKA,YAAArI,SAAA,WACE,IAAI3b,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,GAC5C,OAAOjkB,EAAkBn/B,KAAKmjD,GAAIK,UAAUxjD,KAAKojD,OAASjkB,GAC1Cz+B,EAAYC,aAAaC,IAAIqiD,eAAe8D,SAC9D,EAMA,YAAAx9C,MAAA,SAAMhE,GACJ,IAAI45B,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,GAC5C,OAAOjkB,GAAU55B,GAAO,IAAI7E,EAAYC,aAAaC,IAAI2iD,OACpCF,OAAOrjD,KAAKmjD,GAAIW,WAAW9jD,KAAKojD,OAASjkB,GAASn/B,KAAKmjD,IAC5D,IAClB,EAKO,EAAA6D,wBAAP,SAA+B9C,GAC7BA,EAAQC,YAAY,EACtB,EAMO,EAAA8C,YAAP,SAAmB/C,EAA8BpJ,GAC/CoJ,EAAQgD,cAAc,EAAGpM,EAAUp6C,EAAYC,aAAaC,IAAIqiD,eAAe8D,UACjF,EAMO,EAAAI,SAAP,SAAgBjD,EAA8BkD,GAC5ClD,EAAQG,eAAe,EAAG+C,EAAa,EACzC,EAMO,EAAAC,sBAAP,SAA6BnD,GAE3B,OADaA,EAAQW,WAEvB,EAEO,EAAAyC,yBAAP,SACIpD,EAA8BpJ,EAC9BsM,GAIF,OAHAvM,EAAmBmM,wBAAwB9C,GAC3CrJ,EAAmBoM,YAAY/C,EAASpJ,GACxCD,EAAmBsM,SAASjD,EAASkD,GAC9BvM,EAAmBwM,sBAAsBnD,EAClD,EACF,EA/FA,GAAa,EAAArJ,mBAAkB,CAgGhC,CAjGyC,GAAAj6C,MAAA,EAAAA,IAAG,IAiG5C,CAjG4B,GAAAD,eAAA,EAAAA,aAAY,IAiGxC,CAjGD,CAAiB,EAAAD,cAAA,EAAAA,YAAW,KAqG5B,SAAiBA,IAAY,SAAAC,IAAa,SAAAC,GACxC,8BACE,KAAAuiD,GAAkC,KAElC,KAAAC,OAAS,CA2FX,QArFE,YAAAC,OAAA,SAAO1/C,EAAWw/C,GAGhB,OAFAnjD,KAAKojD,OAASz/C,EACd3D,KAAKmjD,GAAKA,EACHnjD,IACT,EAOO,EAAAunD,iBAAP,SAAwBpE,EAA4B59C,GAClD,OAAQA,GAAO,IAAIiiD,GAAWnE,OAAOF,EAAGK,UAAUL,EAAGje,YAAcie,EAAGje,WAAYie,EACpF,EAOO,EAAAsE,6BAAP,SAAoCtE,EAA4B59C,GAE9D,OADA49C,EAAGO,YAAYP,EAAGje,WAAa,EAAAuc,YAAYkC,qBACnCp+C,GAAO,IAAIiiD,GAAWnE,OAAOF,EAAGK,UAAUL,EAAGje,YAAcie,EAAGje,WAAYie,EACpF,EAKA,YAAAuE,QAAA,WACE,IAAIvoB,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,GAC5C,OAAOjkB,EAAkBn/B,KAAKmjD,GAAIK,UAAUxjD,KAAKojD,OAASjkB,GAC1Cz+B,EAAYC,aAAaC,IAAIqiD,eAAe8D,SAC9D,EAMA,YAAArM,UAAA,SAAUn1C,GACR,IAAI45B,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,GAC5C,OAAOjkB,GAAU55B,GAAO,IAAI7E,EAAYC,aAAaC,IAAI+mD,UACpCtE,OAAOrjD,KAAKmjD,GAAIW,WAAW9jD,KAAKojD,OAASjkB,GAASn/B,KAAKmjD,IAC5D,IAClB,EAKO,EAAAyE,aAAP,SAAoB1D,GAClBA,EAAQC,YAAY,EACtB,EAMO,EAAA0D,WAAP,SAAkB3D,EAA8BwD,GAC9CxD,EAAQgD,cAAc,EAAGQ,EAAShnD,EAAYC,aAAaC,IAAIqiD,eAAe8D,UAChF,EAMO,EAAAe,aAAP,SAAoB5D,EAA8B6D,GAChD7D,EAAQG,eAAe,EAAG0D,EAAiB,EAC7C,EAMO,EAAAC,WAAP,SAAkB9D,GAEhB,OADaA,EAAQW,WAEvB,EAEO,EAAAoD,cAAP,SACI/D,EAA8BwD,EAC9BK,GAIF,OAHAP,EAAQI,aAAa1D,GACrBsD,EAAQK,WAAW3D,EAASwD,GAC5BF,EAAQM,aAAa5D,EAAS6D,GACvBP,EAAQQ,WAAW9D,EAC5B,EACF,EA9FA,GAAa,EAAAsD,QAAO,CA+FrB,CAhGyC,GAAA5mD,MAAA,EAAAA,IAAG,IAgG5C,CAhG4B,GAAAD,eAAA,EAAAA,aAAY,IAgGxC,CAhGD,CAAiB,EAAAD,cAAA,EAAAA,YAAW,KAoG5B,SAAiBA,IAAY,SAAAC,IAAa,SAAAC,GACxC,8BACE,KAAAuiD,GAAkC,KAElC,KAAAC,OAAS,CAuEX,QAjEE,YAAAC,OAAA,SAAO1/C,EAAWw/C,GAGhB,OAFAnjD,KAAKojD,OAASz/C,EACd3D,KAAKmjD,GAAKA,EACHnjD,IACT,EAOO,EAAAkoD,sBAAP,SAA6B/E,EAA4B59C,GACvD,OAAQA,GAAO,IAAI4iD,GAAgB9E,OAAOF,EAAGK,UAAUL,EAAGje,YAAcie,EAAGje,WAAYie,EACzF,EAOO,EAAAiF,kCAAP,SAAyCjF,EAA4B59C,GAEnE,OADA49C,EAAGO,YAAYP,EAAGje,WAAa,EAAAuc,YAAYkC,qBACnCp+C,GAAO,IAAI4iD,GAAgB9E,OAAOF,EAAGK,UAAUL,EAAGje,YAAcie,EAAGje,WAAYie,EACzF,EAMA,YAAArI,SAAA,SAASv1C,GACP,IAAI45B,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,GAC5C,OAAOjkB,GAAU55B,GAAO,IAAI7E,EAAYC,aAAaC,IAAI+mD,UACpCtE,OAAOrjD,KAAKmjD,GAAIW,WAAW9jD,KAAKojD,OAASjkB,GAASn/B,KAAKmjD,IAC5D,IAClB,EAKO,EAAAkF,kBAAP,SAAyBnE,GACvBA,EAAQC,YAAY,EACtB,EAMO,EAAA8C,YAAP,SAAmB/C,EAA8BoE,GAC/CpE,EAAQG,eAAe,EAAGiE,EAAgB,EAC5C,EAMO,EAAAC,gBAAP,SAAuBrE,GAErB,OADaA,EAAQW,WAEvB,EAEO,EAAA2D,mBAAP,SAA0BtE,EAA8BoE,GAGtD,OAFAH,EAAaE,kBAAkBnE,GAC/BiE,EAAalB,YAAY/C,EAASoE,GAC3BH,EAAaI,gBAAgBrE,EACtC,EACF,EA1EA,GAAa,EAAAiE,aAAY,CA2E1B,CA5EyC,GAAAvnD,MAAA,EAAAA,IAAG,IA4E5C,CA5E4B,GAAAD,eAAA,EAAAA,aAAY,IA4ExC,CA5ED,CAAiB,EAAAD,cAAA,EAAAA,YAAW,KAgF5B,SAAiBA,IAAY,SAAAC,IAAa,SAAAC,GACxC,8BACE,KAAAuiD,GAAkC,KAElC,KAAAC,OAAS,CAiDX,QA3CE,YAAAC,OAAA,SAAO1/C,EAAWw/C,GAGhB,OAFAnjD,KAAKojD,OAASz/C,EACd3D,KAAKmjD,GAAKA,EACHnjD,IACT,EAKA,YAAA07C,UAAA,WACE,OAAO17C,KAAKmjD,GAAIsF,WAAWzoD,KAAKojD,OAClC,EAKA,YAAAsF,YAAA,WACE,OAAO1oD,KAAKmjD,GAAIK,UAAUxjD,KAAKojD,OAAS,EAC1C,EAKA,YAAAuF,YAAA,WACE,OAAO3oD,KAAKmjD,GAAIK,UAAUxjD,KAAKojD,OAAS,EAC1C,EASO,EAAAwF,cAAP,SACI1E,EAA8B2E,EAAoBC,EAClDC,GAKF,OAJA7E,EAAQ8E,KAAK,EAAG,IAChB9E,EAAQ+E,WAAWF,GACnB7E,EAAQ+E,WAAWH,GACnB5E,EAAQ+E,WAAWJ,GACZ3E,EAAQ/kB,QACjB,EACF,EApDA,GAAa,EAAA+pB,QAAO,CAqDrB,CAtDyC,GAAAtoD,MAAA,EAAAA,IAAG,IAsD5C,CAtD4B,GAAAD,eAAA,EAAAA,aAAY,IAsDxC,CAtDD,CAAiB,EAAAD,cAAA,EAAAA,YAAW,KA0D5B,SAAiBA,IAAY,SAAAC,IAAa,SAAAC,GACxC,8BACE,KAAAuiD,GAAkC,KAElC,KAAAC,OAAS,CAgJX,QA1IE,YAAAC,OAAA,SAAO1/C,EAAWw/C,GAGhB,OAFAnjD,KAAKojD,OAASz/C,EACd3D,KAAKmjD,GAAKA,EACHnjD,IACT,EAOO,EAAAmpD,kBAAP,SAAyBhG,EAA4B59C,GACnD,OAAQA,GAAO,IAAI6jD,GAAY/F,OAAOF,EAAGK,UAAUL,EAAGje,YAAcie,EAAGje,WAAYie,EACrF,EAOO,EAAAkG,8BAAP,SAAqClG,EAA4B59C,GAE/D,OADA49C,EAAGO,YAAYP,EAAGje,WAAa,EAAAuc,YAAYkC,qBACnCp+C,GAAO,IAAI6jD,GAAY/F,OAAOF,EAAGK,UAAUL,EAAGje,YAAcie,EAAGje,WAAYie,EACrF,EAKA,YAAAzH,UAAA,WACE,IAAIvc,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,GAC5C,OAAOjkB,EAASn/B,KAAKmjD,GAAIsF,WAAWzoD,KAAKojD,OAASjkB,GAAU,CAC9D,EAOA,YAAAmqB,WAAA,SAAW36C,EAAepJ,GACxB,IAAI45B,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,GAC5C,OAAOjkB,GAAU55B,GAAO,IAAI7E,EAAYC,aAAaC,IAAIsoD,SACpC7F,OAAOrjD,KAAKmjD,GAAIY,SAAS/jD,KAAKojD,OAASjkB,GAAkB,GAARxwB,EAAY3O,KAAKmjD,IACvE,IAClB,EAKA,YAAAoG,iBAAA,WACE,IAAIpqB,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,GAC5C,OAAOjkB,EAASn/B,KAAKmjD,GAAIa,aAAahkD,KAAKojD,OAASjkB,GAAU,CAChE,EAOA,YAAAqqB,YAAA,SAAY76C,EAAepJ,GACzB,IAAI45B,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,GAC5C,OAAOjkB,GAAU55B,GAAO,IAAI7E,EAAYC,aAAaC,IAAIsoD,SACpC7F,OAAOrjD,KAAKmjD,GAAIY,SAAS/jD,KAAKojD,OAASjkB,GAAkB,GAARxwB,EAAY3O,KAAKmjD,IACvE,IAClB,EAKA,YAAAsG,kBAAA,WACE,IAAItqB,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,GAC5C,OAAOjkB,EAASn/B,KAAKmjD,GAAIa,aAAahkD,KAAKojD,OAASjkB,GAAU,CAChE,EAKO,EAAAuqB,cAAP,SAAqBxF,GACnBA,EAAQC,YAAY,EACtB,EAMO,EAAAwF,aAAP,SAAoBzF,EAA8BxI,GAChDwI,EAAQgD,cAAc,EAAGxL,EAAW,EACtC,EAMO,EAAAkO,cAAP,SAAqB1F,EAA8B2F,GACjD3F,EAAQG,eAAe,EAAGwF,EAAkB,EAC9C,EAMO,EAAAC,sBAAP,SAA6B5F,EAA8BS,GACzDT,EAAQK,YAAY,GAAII,EAAU,EACpC,EAMO,EAAAoF,eAAP,SAAsB7F,EAA8B8F,GAClD9F,EAAQG,eAAe,EAAG2F,EAAmB,EAC/C,EAMO,EAAAC,uBAAP,SAA8B/F,EAA8BS,GAC1DT,EAAQK,YAAY,GAAII,EAAU,EACpC,EAMO,EAAAuF,YAAP,SAAmBhG,GAEjB,OADaA,EAAQW,WAEvB,EAEO,EAAAsF,eAAP,SACIjG,EAA8BxI,EAAmBmO,EACjDG,GAKF,OAJAZ,EAASM,cAAcxF,GACvBkF,EAASO,aAAazF,EAASxI,GAC/B0N,EAASQ,cAAc1F,EAAS2F,GAChCT,EAASW,eAAe7F,EAAS8F,GAC1BZ,EAASc,YAAYhG,EAC9B,EACF,EAnJA,GAAa,EAAAkF,SAAQ,CAoJtB,CArJyC,GAAAxoD,MAAA,EAAAA,IAAG,IAqJ5C,CArJ4B,GAAAD,eAAA,EAAAA,aAAY,IAqJxC,CArJD,CAAiB,EAAAD,cAAA,EAAAA,YAAW,KAyJ5B,SAAiBA,IAAY,SAAAC,IAAa,SAAAC,GACxC,8BACE,KAAAuiD,GAAkC,KAElC,KAAAC,OAAS,CAodX,QA9cE,YAAAC,OAAA,SAAO1/C,EAAWw/C,GAGhB,OAFAnjD,KAAKojD,OAASz/C,EACd3D,KAAKmjD,GAAKA,EACHnjD,IACT,EAOO,EAAAoqD,cAAP,SAAqBjH,EAA4B59C,GAC/C,OAAQA,GAAO,IAAIozC,GAAQ0K,OAAOF,EAAGK,UAAUL,EAAGje,YAAcie,EAAGje,WAAYie,EACjF,EAOO,EAAAkH,0BAAP,SAAiClH,EAA4B59C,GAE3D,OADA49C,EAAGO,YAAYP,EAAGje,WAAa,EAAAuc,YAAYkC,qBACnCp+C,GAAO,IAAIozC,GAAQ0K,OAAOF,EAAGK,UAAUL,EAAGje,YAAcie,EAAGje,WAAYie,EACjF,EAQA,YAAA9iD,KAAA,SAAK8kD,GACH,IAAIhmB,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,GAC5C,OAAOjkB,EAASn/B,KAAKmjD,GAAIiC,SAASplD,KAAKojD,OAASjkB,EAAQgmB,GAAoB,IAC9E,EAQA,YAAAmF,UAAA,SAAUnF,GACR,IAAIhmB,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,GAC5C,OAAOjkB,EAASn/B,KAAKmjD,GAAIiC,SAASplD,KAAKojD,OAASjkB,EAAQgmB,GAAoB,IAC9E,EAQA,YAAA5D,OAAA,SAAO4D,GACL,IAAIhmB,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,GAC5C,OAAOjkB,EAASn/B,KAAKmjD,GAAIiC,SAASplD,KAAKojD,OAASjkB,EAAQgmB,GAAoB,IAC9E,EAKA,YAAAoF,aAAA,WACE,IAAIprB,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,IAC5C,OAAOjkB,EAASn/B,KAAKmjD,GAAIK,UAAUxjD,KAAKojD,OAASjkB,GAAU,CAC7D,EAKA,YAAAxwB,MAAA,WACE,IAAIwwB,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,IAC5C,OAAOjkB,EAASn/B,KAAKmjD,GAAIsF,WAAWzoD,KAAKojD,OAASjkB,GAAU,CAC9D,EAQA,YAAAuZ,OAAA,SAAOyM,GACL,IAAIhmB,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,IAC5C,OAAOjkB,EAASn/B,KAAKmjD,GAAIiC,SAASplD,KAAKojD,OAASjkB,EAAQgmB,GAAoB,IAC9E,EAKA,YAAAzjD,KAAA,WACE,IAAIy9B,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,IAC5C,OAAOjkB,EAAkBn/B,KAAKmjD,GAAIK,UAAUxjD,KAAKojD,OAASjkB,GAC1Cz+B,EAAYC,aAAaC,IAAIsiD,SAASsH,SACxD,EAQA,YAAAC,sBAAA,SAAsBtF,GACpB,IAAIhmB,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,IAC5C,OAAOjkB,EAASn/B,KAAKmjD,GAAIiC,SAASplD,KAAKojD,OAASjkB,EAAQgmB,GAAoB,IAC9E,EASA,YAAA7tC,OAAA,SAAO3I,EAAew2C,GACpB,IAAIhmB,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,IAC5C,OAAOjkB,EAASn/B,KAAKmjD,GAAIiC,SAASplD,KAAKmjD,GAAIY,SAAS/jD,KAAKojD,OAASjkB,GAAkB,EAARxwB,EAAWw2C,GAAoB,IAC7G,EAKA,YAAA7K,aAAA,WACE,IAAInb,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,IAC5C,OAAOjkB,EAASn/B,KAAKmjD,GAAIa,aAAahkD,KAAKojD,OAASjkB,GAAU,CAChE,EASA,YAAAH,QAAA,SAAQrwB,EAAew2C,GACrB,IAAIhmB,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,IAC5C,OAAOjkB,EAASn/B,KAAKmjD,GAAIiC,SAASplD,KAAKmjD,GAAIY,SAAS/jD,KAAKojD,OAASjkB,GAAkB,EAARxwB,EAAWw2C,GAAoB,IAC7G,EAKA,YAAAhK,cAAA,WACE,IAAIhc,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,IAC5C,OAAOjkB,EAASn/B,KAAKmjD,GAAIa,aAAahkD,KAAKojD,OAASjkB,GAAU,CAChE,EAOA,YAAAt+B,WAAA,SAAW8N,EAAepJ,GAExB,IAAI45B,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,IAC5C,OAAOjkB,GAAU55B,GAAO,IAAI7E,EAAYC,aAAaC,IAAIQ,WACpCiiD,OAAOrjD,KAAKmjD,GAAIW,WAAW9jD,KAAKmjD,GAAIY,SAAS/jD,KAAKojD,OAASjkB,GAAkB,EAARxwB,GAAY3O,KAAKmjD,IAC3F,IAClB,EAKA,YAAA7H,iBAAA,WACE,IAAInc,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,IAC5C,OAAOjkB,EAASn/B,KAAKmjD,GAAIa,aAAahkD,KAAKojD,OAASjkB,GAAU,CAChE,EAMA,YAAAurB,eAAA,SAAe/7C,GACb,IAAIwwB,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,IAC5C,OAAOjkB,EAASn/B,KAAKmjD,GAAIK,UAAUxjD,KAAKmjD,GAAIY,SAAS/jD,KAAKojD,OAASjkB,GAAkB,EAARxwB,GAAa,CAC5F,EAKA,YAAAg8C,qBAAA,WACE,IAAIxrB,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,IAC5C,OAAOjkB,EAASn/B,KAAKmjD,GAAIa,aAAahkD,KAAKojD,OAASjkB,GAAU,CAChE,EAKA,YAAAyrB,oBAAA,WACE,IAAIzrB,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,IAC5C,OAAOjkB,EACH,IAAI1C,WACAz8B,KAAKmjD,GAAI0H,QAAQ3xC,OAAQlZ,KAAKmjD,GAAI0H,QAAQriB,WAAaxoC,KAAKmjD,GAAIY,SAAS/jD,KAAKojD,OAASjkB,GACvFn/B,KAAKmjD,GAAIa,aAAahkD,KAAKojD,OAASjkB,IACxC,IACN,EASA,YAAA2rB,eAAA,SAAen8C,EAAew2C,GAC5B,IAAIhmB,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,IAC5C,OAAOjkB,EAASn/B,KAAKmjD,GAAIiC,SAASplD,KAAKmjD,GAAIY,SAAS/jD,KAAKojD,OAASjkB,GAAkB,EAARxwB,EAAWw2C,GAAoB,IAC7G,EAKA,YAAA4F,qBAAA,WACE,IAAI5rB,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,IAC5C,OAAOjkB,EAASn/B,KAAKmjD,GAAIa,aAAahkD,KAAKojD,OAASjkB,GAAU,CAChE,EAKO,EAAA6rB,UAAP,SAAiB9G,GACfA,EAAQC,YAAY,GACtB,EAMO,EAAA8G,QAAP,SAAe/G,EAA8BgH,GAC3ChH,EAAQG,eAAe,EAAG6G,EAAY,EACxC,EAMO,EAAAC,aAAP,SAAoBjH,EAA8BkH,GAChDlH,EAAQG,eAAe,EAAG+G,EAAiB,EAC7C,EAMO,EAAAC,UAAP,SAAiBnH,EAA8BoH,GAC7CpH,EAAQG,eAAe,EAAGiH,EAAc,EAC1C,EAMO,EAAAC,gBAAP,SAAuBrH,EAA8BqG,GACnDrG,EAAQgD,cAAc,EAAGqD,EAAc,EACzC,EAMO,EAAAiB,SAAP,SAAgBtH,EAA8Bv1C,GAC5Cu1C,EAAQgD,cAAc,EAAGv4C,EAAO,EAClC,EAMO,EAAA88C,UAAP,SAAiBvH,EAA8BwH,GAC7CxH,EAAQG,eAAe,EAAGqH,EAAc,EAC1C,EAMO,EAAAC,QAAP,SAAezH,EAA8BxiD,GAC3CwiD,EAAQgD,cAAc,EAAGxlD,EAAMhB,EAAYC,aAAaC,IAAIsiD,SAASsH,UACvE,EAMO,EAAAoB,yBAAP,SAAgC1H,EAA8B2H,GAC5D3H,EAAQG,eAAe,EAAGwH,EAA6B,EACzD,EAMO,EAAAC,UAAP,SAAiB5H,EAA8B6H,GAC7C7H,EAAQG,eAAe,EAAG0H,EAAc,EAC1C,EAOO,EAAAC,mBAAP,SAA0B9H,EAA8BjqC,GACtDiqC,EAAQK,YAAY,EAAGtqC,EAAKtb,OAAQ,GACpC,IAAK,IAAIgF,EAAIsW,EAAKtb,OAAS,EAAGgF,GAAK,EAAGA,IACpCugD,EAAQM,UAAUvqC,EAAKtW,IAEzB,OAAOugD,EAAQO,WACjB,EAMO,EAAAwH,kBAAP,SAAyB/H,EAA8BS,GACrDT,EAAQK,YAAY,EAAGI,EAAU,EACnC,EAMO,EAAAuH,WAAP,SAAkBhI,EAA8BiI,GAC9CjI,EAAQG,eAAe,EAAG8H,EAAe,EAC3C,EAOO,EAAAC,oBAAP,SAA2BlI,EAA8BjqC,GACvDiqC,EAAQK,YAAY,EAAGtqC,EAAKtb,OAAQ,GACpC,IAAK,IAAIgF,EAAIsW,EAAKtb,OAAS,EAAGgF,GAAK,EAAGA,IACpCugD,EAAQM,UAAUvqC,EAAKtW,IAEzB,OAAOugD,EAAQO,WACjB,EAMO,EAAA4H,mBAAP,SAA0BnI,EAA8BS,GACtDT,EAAQK,YAAY,EAAGI,EAAU,EACnC,EAMO,EAAA2H,cAAP,SAAqBpI,EAA8BqI,GACjDrI,EAAQG,eAAe,GAAIkI,EAAkB,EAC/C,EAOO,EAAAC,uBAAP,SAA8BtI,EAA8BjqC,GAC1DiqC,EAAQK,YAAY,EAAGtqC,EAAKtb,OAAQ,GACpC,IAAK,IAAIgF,EAAIsW,EAAKtb,OAAS,EAAGgF,GAAK,EAAGA,IACpCugD,EAAQM,UAAUvqC,EAAKtW,IAEzB,OAAOugD,EAAQO,WACjB,EAMO,EAAAgI,sBAAP,SAA6BvI,EAA8BS,GACzDT,EAAQK,YAAY,EAAGI,EAAU,EACnC,EAMO,EAAA+H,kBAAP,SAAyBxI,EAA8ByI,GACrDzI,EAAQG,eAAe,GAAIsI,EAAsB,EACnD,EAOO,EAAAC,2BAAP,SAAkC1I,EAA8BjqC,GAC9DiqC,EAAQK,YAAY,EAAGtqC,EAAKtb,OAAQ,GACpC,IAAK,IAAIgF,EAAIsW,EAAKtb,OAAS,EAAGgF,GAAK,EAAGA,IACpCugD,EAAQ2I,SAAS5yC,EAAKtW,IAExB,OAAOugD,EAAQO,WACjB,EAMO,EAAAqI,0BAAP,SAAiC5I,EAA8BS,GAC7DT,EAAQK,YAAY,EAAGI,EAAU,EACnC,EAMO,EAAAoI,kBAAP,SAAyB7I,EAA8B8I,GACrD9I,EAAQG,eAAe,GAAI2I,EAAsB,EACnD,EAOO,EAAAC,2BAAP,SAAkC/I,EAA8BjqC,GAC9DiqC,EAAQK,YAAY,EAAGtqC,EAAKtb,OAAQ,GACpC,IAAK,IAAIgF,EAAIsW,EAAKtb,OAAS,EAAGgF,GAAK,EAAGA,IACpCugD,EAAQM,UAAUvqC,EAAKtW,IAEzB,OAAOugD,EAAQO,WACjB,EAMO,EAAAyI,0BAAP,SAAiChJ,EAA8BS,GAC7DT,EAAQK,YAAY,EAAGI,EAAU,EACnC,EAMO,EAAAwI,QAAP,SAAejJ,GAEb,OADaA,EAAQW,WAEvB,EAEO,EAAAuI,WAAP,SACIlJ,EAA8BgH,EAAgCE,EAC9DE,EAAkCf,EAAsB57C,EAAe+8C,EACvEhqD,EAA6CmqD,EAC7CE,EAAkCI,EAAmCI,EACrEI,EAA0CK,GAe5C,OAdArU,EAAKqS,UAAU9G,GACfvL,EAAKsS,QAAQ/G,EAASgH,GACtBvS,EAAKwS,aAAajH,EAASkH,GAC3BzS,EAAK0S,UAAUnH,EAASoH,GACxB3S,EAAK4S,gBAAgBrH,EAASqG,GAC9B5R,EAAK6S,SAAStH,EAASv1C,GACvBgqC,EAAK8S,UAAUvH,EAASwH,GACxB/S,EAAKgT,QAAQzH,EAASxiD,GACtBi3C,EAAKiT,yBAAyB1H,EAAS2H,GACvClT,EAAKmT,UAAU5H,EAAS6H,GACxBpT,EAAKuT,WAAWhI,EAASiI,GACzBxT,EAAK2T,cAAcpI,EAASqI,GAC5B5T,EAAK+T,kBAAkBxI,EAASyI,GAChChU,EAAKoU,kBAAkB7I,EAAS8I,GACzBrU,EAAKwU,QAAQjJ,EACtB,EACF,EAvdA,GAAa,EAAAvL,KAAI,CAwdlB,CAzdyC,GAAA/3C,MAAA,EAAAA,IAAG,IAyd5C,CAzd4B,GAAAD,eAAA,EAAAA,aAAY,IAydxC,CAzdD,CAAiB,EAAAD,cAAA,EAAAA,YAAW,KA6d5B,SAAiBA,IAAY,SAAAC,IAAa,SAAAC,GACxC,8BACE,KAAAuiD,GAAkC,KAElC,KAAAC,OAAS,CAiHX,QA3GE,YAAAC,OAAA,SAAO1/C,EAAWw/C,GAGhB,OAFAnjD,KAAKojD,OAASz/C,EACd3D,KAAKmjD,GAAKA,EACHnjD,IACT,EAOO,EAAAqtD,mBAAP,SAA0BlK,EAA4B59C,GACpD,OAAQA,GAAO,IAAI+nD,GAAajK,OAAOF,EAAGK,UAAUL,EAAGje,YAAcie,EAAGje,WAAYie,EACtF,EAOO,EAAAoK,+BAAP,SAAsCpK,EAA4B59C,GAEhE,OADA49C,EAAGO,YAAYP,EAAGje,WAAa,EAAAuc,YAAYkC,qBACnCp+C,GAAO,IAAI+nD,GAAajK,OAAOF,EAAGK,UAAUL,EAAGje,YAAcie,EAAGje,WAAYie,EACtF,EAQA,YAAA9iD,KAAA,SAAK8kD,GACH,IAAIhmB,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,GAC5C,OAAOjkB,EAASn/B,KAAKmjD,GAAIiC,SAASplD,KAAKojD,OAASjkB,EAAQgmB,GAAoB,IAC9E,EAQA,YAAAmF,UAAA,SAAUnF,GACR,IAAIhmB,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,GAC5C,OAAOjkB,EAASn/B,KAAKmjD,GAAIiC,SAASplD,KAAKojD,OAASjkB,EAAQgmB,GAAoB,IAC9E,EAMA,YAAAzjD,KAAA,SAAK6D,GACH,IAAI45B,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,GAC5C,OAAOjkB,GAAU55B,GAAO,IAAI7E,EAAYC,aAAaC,IAAI+mD,UACpCtE,OAAOrjD,KAAKmjD,GAAIW,WAAW9jD,KAAKojD,OAASjkB,GAASn/B,KAAKmjD,IAC5D,IAClB,EAKO,EAAAqK,eAAP,SAAsBtJ,GACpBA,EAAQC,YAAY,EACtB,EAMO,EAAA8G,QAAP,SAAe/G,EAA8BgH,GAC3ChH,EAAQG,eAAe,EAAG6G,EAAY,EACxC,EAMO,EAAAC,aAAP,SAAoBjH,EAA8BkH,GAChDlH,EAAQG,eAAe,EAAG+G,EAAiB,EAC7C,EAMO,EAAAO,QAAP,SAAezH,EAA8BuJ,GAC3CvJ,EAAQG,eAAe,EAAGoJ,EAAY,EACxC,EAMO,EAAAC,aAAP,SAAoBxJ,GAElB,OADaA,EAAQW,WAEvB,EAEO,EAAA8I,gBAAP,SACIzJ,EAA8BgH,EAAgCE,EAC9DqC,GAKF,OAJAH,EAAUE,eAAetJ,GACzBoJ,EAAUrC,QAAQ/G,EAASgH,GAC3BoC,EAAUnC,aAAajH,EAASkH,GAChCkC,EAAU3B,QAAQzH,EAASuJ,GACpBH,EAAUI,aAAaxJ,EAChC,EACF,EApHA,GAAa,EAAAoJ,UAAS,CAqHvB,CAtHyC,GAAA1sD,MAAA,EAAAA,IAAG,IAsH5C,CAtH4B,GAAAD,eAAA,EAAAA,aAAY,IAsHxC,CAtHD,CAAiB,EAAAD,cAAA,EAAAA,YAAW,KA0H5B,SAAiBA,IAAY,SAAAC,IAAa,SAAAC,GACxC,8BACE,KAAAuiD,GAAkC,KAElC,KAAAC,OAAS,CA6GX,QAvGE,YAAAC,OAAA,SAAO1/C,EAAWw/C,GAGhB,OAFAnjD,KAAKojD,OAASz/C,EACd3D,KAAKmjD,GAAKA,EACHnjD,IACT,EAOO,EAAA4tD,kBAAP,SAAyBzK,EAA4B59C,GACnD,OAAQA,GAAO,IAAIoiD,GAAYtE,OAAOF,EAAGK,UAAUL,EAAGje,YAAcie,EAAGje,WAAYie,EACrF,EAOO,EAAA0K,8BAAP,SAAqC1K,EAA4B59C,GAE/D,OADA49C,EAAGO,YAAYP,EAAGje,WAAa,EAAAuc,YAAYkC,qBACnCp+C,GAAO,IAAIoiD,GAAYtE,OAAOF,EAAGK,UAAUL,EAAGje,YAAcie,EAAGje,WAAYie,EACrF,EAQA,YAAA+B,WAAA,SAAWC,GACT,IAAIhmB,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,GAC5C,OAAOjkB,EAASn/B,KAAKmjD,GAAIiC,SAASplD,KAAKojD,OAASjkB,EAAQgmB,GAAoB,IAC9E,EAKA,YAAAzK,UAAA,WACE,IAAIvb,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,GAC5C,OAAOjkB,EAAkBn/B,KAAKmjD,GAAI2K,UAAU9tD,KAAKojD,OAASjkB,GAC1Cz+B,EAAYC,aAAaC,IAAI+5C,cAAcoT,IAC7D,EAMA,YAAApuD,MAAA,SAAmC4F,GACjC,IAAI45B,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,GAC5C,OAAOjkB,EAASn/B,KAAKmjD,GAAI6K,QAAQzoD,EAAKvF,KAAKojD,OAASjkB,GAAU,IAChE,EAKO,EAAA8uB,cAAP,SAAqB/J,GACnBA,EAAQC,YAAY,EACtB,EAMO,EAAAqB,cAAP,SAAqBtB,EAA8BuB,GACjDvB,EAAQG,eAAe,EAAGoB,EAAkB,EAC9C,EAMO,EAAAqC,aAAP,SAAoB5D,EAA8BxJ,GAChDwJ,EAAQoC,aAAa,EAAG5L,EAAWh6C,EAAYC,aAAaC,IAAI+5C,cAAcoT,KAChF,EAMO,EAAAzI,SAAP,SAAgBpB,EAA8BqB,GAC5CrB,EAAQG,eAAe,EAAGkB,EAAa,EACzC,EAMO,EAAA2I,YAAP,SAAmBhK,GAEjB,OADaA,EAAQW,WAEvB,EAEO,EAAAsJ,eAAP,SACIjK,EAA8BuB,EAC9B/K,EAAuD6K,GAKzD,OAJAoC,EAASsG,cAAc/J,GACvByD,EAASnC,cAActB,EAASuB,GAChCkC,EAASG,aAAa5D,EAASxJ,GAC/BiN,EAASrC,SAASpB,EAASqB,GACpBoC,EAASuG,YAAYhK,EAC9B,EACF,EAhHA,GAAa,EAAAyD,SAAQ,CAiHtB,CAlHyC,GAAA/mD,MAAA,EAAAA,IAAG,IAkH5C,CAlH4B,GAAAD,eAAA,EAAAA,aAAY,IAkHxC,CAlHD,CAAiB,EAAAD,cAAA,EAAAA,YAAW,KAsH5B,SAAiBA,IAAY,SAAAC,IAAa,SAAAC,GACxC,8BACE,KAAAuiD,GAAkC,KAElC,KAAAC,OAAS,CAyFX,QAnFE,YAAAC,OAAA,SAAO1/C,EAAWw/C,GAGhB,OAFAnjD,KAAKojD,OAASz/C,EACd3D,KAAKmjD,GAAKA,EACHnjD,IACT,EAOO,EAAAouD,uBAAP,SAA8BjL,EAA4B59C,GACxD,OAAQA,GAAO,IAAI8oD,GAAiBhL,OAAOF,EAAGK,UAAUL,EAAGje,YAAcie,EAAGje,WAAYie,EAC1F,EAOO,EAAAmL,mCAAP,SAA0CnL,EAA4B59C,GAEpE,OADA49C,EAAGO,YAAYP,EAAGje,WAAa,EAAAuc,YAAYkC,qBACnCp+C,GAAO,IAAI8oD,GAAiBhL,OAAOF,EAAGK,UAAUL,EAAGje,YAAcie,EAAGje,WAAYie,EAC1F,EAQA,YAAA5B,OAAA,SAAO4D,GACL,IAAIhmB,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,GAC5C,OAAOjkB,EAASn/B,KAAKmjD,GAAIiC,SAASplD,KAAKojD,OAASjkB,EAAQgmB,GAAoB,IAC9E,EAKA,YAAAvlD,QAAA,WACE,IAAIu/B,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,GAC5C,OAAOjkB,EAASn/B,KAAKmjD,GAAI8C,UAAUjmD,KAAKojD,OAASjkB,GAAUn/B,KAAKmjD,GAAI+C,WAAW,EAAG,EACpF,EAKO,EAAAqI,mBAAP,SAA0BrK,GACxBA,EAAQC,YAAY,EACtB,EAMO,EAAAkH,UAAP,SAAiBnH,EAA8BoH,GAC7CpH,EAAQG,eAAe,EAAGiH,EAAc,EAC1C,EAMO,EAAAkD,WAAP,SAAkBtK,EAA8BtkD,GAC9CskD,EAAQsC,cAAc,EAAG5mD,EAASskD,EAAQgC,WAAW,EAAG,GAC1D,EAMO,EAAAuI,iBAAP,SAAwBvK,GAEtB,OADaA,EAAQW,WAEvB,EAEO,EAAA6J,oBAAP,SACIxK,EAA8BoH,EAAkC1rD,GAIlE,OAHAyuD,EAAcE,mBAAmBrK,GACjCmK,EAAchD,UAAUnH,EAASoH,GACjC+C,EAAcG,WAAWtK,EAAStkD,GAC3ByuD,EAAcI,iBAAiBvK,EACxC,EACF,EA5FA,GAAa,EAAAmK,cAAa,CA6F3B,CA9FyC,GAAAztD,MAAA,EAAAA,IAAG,IA8F5C,CA9F4B,GAAAD,eAAA,EAAAA,aAAY,IA8FxC,CA9FD,CAAiB,EAAAD,cAAA,EAAAA,YAAW,KAkG5B,SAAiBA,IAAY,SAAAC,IAAa,SAAAC,GACxC,8BACE,KAAAuiD,GAAkC,KAElC,KAAAC,OAAS,CA6QX,QAvQE,YAAAC,OAAA,SAAO1/C,EAAWw/C,GAGhB,OAFAnjD,KAAKojD,OAASz/C,EACd3D,KAAKmjD,GAAKA,EACHnjD,IACT,EAOO,EAAA2uD,gBAAP,SAAuBxL,EAA4B59C,GACjD,OAAQA,GAAO,IAAI1B,GAAUw/C,OAAOF,EAAGK,UAAUL,EAAGje,YAAcie,EAAGje,WAAYie,EACnF,EAOO,EAAAyL,4BAAP,SAAmCzL,EAA4B59C,GAE7D,OADA49C,EAAGO,YAAYP,EAAGje,WAAa,EAAAuc,YAAYkC,qBACnCp+C,GAAO,IAAI1B,GAAUw/C,OAAOF,EAAGK,UAAUL,EAAGje,YAAcie,EAAGje,WAAYie,EACnF,EAQA,YAAA9iD,KAAA,SAAK8kD,GACH,IAAIhmB,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,GAC5C,OAAOjkB,EAASn/B,KAAKmjD,GAAIiC,SAASplD,KAAKojD,OAASjkB,EAAQgmB,GAAoB,IAC9E,EAQA,YAAAmF,UAAA,SAAUnF,GACR,IAAIhmB,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,GAC5C,OAAOjkB,EAASn/B,KAAKmjD,GAAIiC,SAASplD,KAAKojD,OAASjkB,EAAQgmB,GAAoB,IAC9E,EAMA,YAAAltC,KAAA,SAAKtJ,GACH,IAAIwwB,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,GAC5C,OAAOjkB,EAASn/B,KAAKmjD,GAAI8C,UAAUjmD,KAAKmjD,GAAIY,SAAS/jD,KAAKojD,OAASjkB,GAAkB,EAARxwB,GAC7D3O,KAAKmjD,GAAI+C,WAAW,EAAG,EACzC,EAKA,YAAA2I,WAAA,WACE,IAAI1vB,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,GAC5C,OAAOjkB,EAASn/B,KAAKmjD,GAAIa,aAAahkD,KAAKojD,OAASjkB,GAAU,CAChE,EAKA,YAAAnlB,SAAA,WACE,IAAImlB,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,IAC5C,OAAOjkB,EAAkBn/B,KAAKmjD,GAAIK,UAAUxjD,KAAKojD,OAASjkB,GAC1Cz+B,EAAYC,aAAaC,IAAIqiD,eAAe8D,SAC9D,EAMA,YAAA+H,QAAA,SAAQngD,GACN,IAAIwwB,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,IAC5C,OAAOjkB,EAASn/B,KAAKmjD,GAAI2K,UAAU9tD,KAAKmjD,GAAIY,SAAS/jD,KAAKojD,OAASjkB,GAAUxwB,GAAS,CACxF,EAKA,YAAAogD,cAAA,WACE,IAAI5vB,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,IAC5C,OAAOjkB,EAASn/B,KAAKmjD,GAAIa,aAAahkD,KAAKojD,OAASjkB,GAAU,CAChE,EAKA,YAAA6vB,aAAA,WACE,IAAI7vB,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,IAC5C,OAAOjkB,EACH,IAAIltB,WACAjS,KAAKmjD,GAAI0H,QAAQ3xC,OAAQlZ,KAAKmjD,GAAI0H,QAAQriB,WAAaxoC,KAAKmjD,GAAIY,SAAS/jD,KAAKojD,OAASjkB,GACvFn/B,KAAKmjD,GAAIa,aAAahkD,KAAKojD,OAASjkB,IACxC,IACN,EASA,YAAA8vB,WAAA,SAAWtgD,EAAew2C,GACxB,IAAIhmB,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,IAC5C,OAAOjkB,EAASn/B,KAAKmjD,GAAIiC,SAASplD,KAAKmjD,GAAIY,SAAS/jD,KAAKojD,OAASjkB,GAAkB,EAARxwB,EAAWw2C,GAAoB,IAC7G,EAKA,YAAA+J,iBAAA,WACE,IAAI/vB,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,IAC5C,OAAOjkB,EAASn/B,KAAKmjD,GAAIa,aAAahkD,KAAKojD,OAASjkB,GAAU,CAChE,EAKO,EAAAgwB,YAAP,SAAmBjL,GACjBA,EAAQC,YAAY,EACtB,EAMO,EAAA8G,QAAP,SAAe/G,EAA8BgH,GAC3ChH,EAAQG,eAAe,EAAG6G,EAAY,EACxC,EAMO,EAAAC,aAAP,SAAoBjH,EAA8BkH,GAChDlH,EAAQG,eAAe,EAAG+G,EAAiB,EAC7C,EAMO,EAAAgE,QAAP,SAAelL,EAA8BmL,GAC3CnL,EAAQG,eAAe,EAAGgL,EAAY,EACxC,EAOO,EAAAC,iBAAP,SAAwBpL,EAA8BjqC,GACpDiqC,EAAQK,YAAY,EAAGtqC,EAAKtb,OAAQ,GACpC,IAAK,IAAIgF,EAAIsW,EAAKtb,OAAS,EAAGgF,GAAK,EAAGA,IACpCugD,EAAQqL,SAASt1C,EAAKtW,IAExB,OAAOugD,EAAQO,WACjB,EAMO,EAAA+K,gBAAP,SAAuBtL,EAA8BS,GACnDT,EAAQK,YAAY,EAAGI,EAAU,EACnC,EAMO,EAAA8K,YAAP,SAAmBvL,EAA8BlqC,GAC/CkqC,EAAQgD,cAAc,EAAGltC,EAAUtZ,EAAYC,aAAaC,IAAIqiD,eAAe8D,UACjF,EAMO,EAAA2I,WAAP,SAAkBxL,EAA8ByL,GAC9CzL,EAAQG,eAAe,EAAGsL,EAAe,EAC3C,EAOO,EAAAC,oBAAP,SAA2B1L,EAA8BjqC,GACvDiqC,EAAQK,YAAY,EAAGtqC,EAAKtb,OAAQ,GACpC,IAAK,IAAIgF,EAAIsW,EAAKtb,OAAS,EAAGgF,GAAK,EAAGA,IACpCugD,EAAQ2L,QAAQ51C,EAAKtW,IAEvB,OAAOugD,EAAQO,WACjB,EAMO,EAAAqL,mBAAP,SAA0B5L,EAA8BS,GACtDT,EAAQK,YAAY,EAAGI,EAAU,EACnC,EAMO,EAAAoL,cAAP,SAAqB7L,EAA8B8L,GACjD9L,EAAQG,eAAe,EAAG2L,EAAkB,EAC9C,EAOO,EAAAC,uBAAP,SAA8B/L,EAA8BjqC,GAC1DiqC,EAAQK,YAAY,EAAGtqC,EAAKtb,OAAQ,GACpC,IAAK,IAAIgF,EAAIsW,EAAKtb,OAAS,EAAGgF,GAAK,EAAGA,IACpCugD,EAAQM,UAAUvqC,EAAKtW,IAEzB,OAAOugD,EAAQO,WACjB,EAMO,EAAAyL,sBAAP,SAA6BhM,EAA8BS,GACzDT,EAAQK,YAAY,EAAGI,EAAU,EACnC,EAMO,EAAAwL,UAAP,SAAiBjM,GAEf,OADaA,EAAQW,WAEvB,EAEO,EAAAuL,aAAP,SACIlM,EAA8BgH,EAAgCE,EAC9DiE,EAAgCr1C,EAChC21C,EAAmCK,GAQrC,OAPAnsD,EAAOsrD,YAAYjL,GACnBrgD,EAAOonD,QAAQ/G,EAASgH,GACxBrnD,EAAOsnD,aAAajH,EAASkH,GAC7BvnD,EAAOurD,QAAQlL,EAASmL,GACxBxrD,EAAO4rD,YAAYvL,EAASlqC,GAC5BnW,EAAO6rD,WAAWxL,EAASyL,GAC3B9rD,EAAOksD,cAAc7L,EAAS8L,GACvBnsD,EAAOssD,UAAUjM,EAC1B,EACF,EAhRA,GAAa,EAAArgD,OAAM,CAiRpB,CAlRyC,GAAAjD,MAAA,EAAAA,IAAG,IAkR5C,CAlR4B,GAAAD,eAAA,EAAAA,aAAY,IAkRxC,CAlRD,CAAiB,EAAAD,cAAA,EAAAA,YAAW,KAsR5B,SAAiBA,IAAY,SAAAC,IAAa,SAAAC,GACxC,8BACE,KAAAuiD,GAAkC,KAElC,KAAAC,OAAS,CA6IX,QAvIE,YAAAC,OAAA,SAAO1/C,EAAWw/C,GAGhB,OAFAnjD,KAAKojD,OAASz/C,EACd3D,KAAKmjD,GAAKA,EACHnjD,IACT,EAOO,EAAAqwD,sBAAP,SAA6BlN,EAA4B59C,GACvD,OAAQA,GAAO,IAAI+qD,GAAgBjN,OAAOF,EAAGK,UAAUL,EAAGje,YAAcie,EAAGje,WAAYie,EACzF,EAOO,EAAAoN,kCAAP,SAAyCpN,EAA4B59C,GAEnE,OADA49C,EAAGO,YAAYP,EAAGje,WAAa,EAAAuc,YAAYkC,qBACnCp+C,GAAO,IAAI+qD,GAAgBjN,OAAOF,EAAGK,UAAUL,EAAGje,YAAcie,EAAGje,WAAYie,EACzF,EAMA,YAAAqN,OAAA,SAAOjrD,GACL,IAAI45B,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,GAC5C,OAAOjkB,GAAU55B,GAAO,IAAI7E,EAAYC,aAAaC,IAAIiD,QACpCw/C,OAAOrjD,KAAKmjD,GAAIW,WAAW9jD,KAAKojD,OAASjkB,GAASn/B,KAAKmjD,IAC5D,IAClB,EAMA,YAAAsN,QAAA,SAAQlrD,GACN,IAAI45B,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,GAC5C,OAAOjkB,GAAU55B,GAAO,IAAI7E,EAAYC,aAAaC,IAAIiD,QACpCw/C,OAAOrjD,KAAKmjD,GAAIW,WAAW9jD,KAAKojD,OAASjkB,GAASn/B,KAAKmjD,IAC5D,IAClB,EAMA,YAAAlrC,KAAA,SAAKtJ,GACH,IAAIwwB,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,GAC5C,OAAOjkB,EAASn/B,KAAKmjD,GAAI8C,UAAUjmD,KAAKmjD,GAAIY,SAAS/jD,KAAKojD,OAASjkB,GAAkB,EAARxwB,GAC7D3O,KAAKmjD,GAAI+C,WAAW,EAAG,EACzC,EAKA,YAAA2I,WAAA,WACE,IAAI1vB,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,GAC5C,OAAOjkB,EAASn/B,KAAKmjD,GAAIa,aAAahkD,KAAKojD,OAASjkB,GAAU,CAChE,EAKO,EAAAuxB,kBAAP,SAAyBxM,GACvBA,EAAQC,YAAY,EACtB,EAMO,EAAAwM,UAAP,SAAiBzM,EAA8B0M,GAC7C1M,EAAQG,eAAe,EAAGuM,EAAc,EAC1C,EAMO,EAAAC,WAAP,SAAkB3M,EAA8B4M,GAC9C5M,EAAQG,eAAe,EAAGyM,EAAe,EAC3C,EAMO,EAAA1B,QAAP,SAAelL,EAA8BmL,GAC3CnL,EAAQG,eAAe,EAAGgL,EAAY,EACxC,EAOO,EAAAC,iBAAP,SAAwBpL,EAA8BjqC,GACpDiqC,EAAQK,YAAY,EAAGtqC,EAAKtb,OAAQ,GACpC,IAAK,IAAIgF,EAAIsW,EAAKtb,OAAS,EAAGgF,GAAK,EAAGA,IACpCugD,EAAQqL,SAASt1C,EAAKtW,IAExB,OAAOugD,EAAQO,WACjB,EAMO,EAAA+K,gBAAP,SAAuBtL,EAA8BS,GACnDT,EAAQK,YAAY,EAAGI,EAAU,EACnC,EAMO,EAAAoM,gBAAP,SAAuB7M,GAErB,OADaA,EAAQW,WAEvB,EAEO,EAAAmM,mBAAP,SACI9M,EAA8B0M,EAAkCE,EAChEzB,GAKF,OAJAiB,EAAaI,kBAAkBxM,GAC/BoM,EAAaK,UAAUzM,EAAS0M,GAChCN,EAAaO,WAAW3M,EAAS4M,GACjCR,EAAalB,QAAQlL,EAASmL,GACvBiB,EAAaS,gBAAgB7M,EACtC,EACF,EAhJA,GAAa,EAAAoM,aAAY,CAiJ1B,CAlJyC,GAAA1vD,MAAA,EAAAA,IAAG,IAkJ5C,CAlJ4B,GAAAD,eAAA,EAAAA,aAAY,IAkJxC,CAlJD,CAAiB,EAAAD,cAAA,EAAAA,YAAW,KAsJ5B,SAAiBA,IAAY,SAAAC,IAAa,SAAAC,GACxC,8BACE,KAAAuiD,GAAkC,KAElC,KAAAC,OAAS,CAidX,QA3cE,YAAAC,OAAA,SAAO1/C,EAAWw/C,GAGhB,OAFAnjD,KAAKojD,OAASz/C,EACd3D,KAAKmjD,GAAKA,EACHnjD,IACT,EAOO,EAAAixD,mBAAP,SAA0B9N,EAA4B59C,GACpD,OAAQA,GAAO,IAAInE,GAAaiiD,OAAOF,EAAGK,UAAUL,EAAGje,YAAcie,EAAGje,WAAYie,EACtF,EAOO,EAAA+N,+BAAP,SAAsC/N,EAA4B59C,GAEhE,OADA49C,EAAGO,YAAYP,EAAGje,WAAa,EAAAuc,YAAYkC,qBACnCp+C,GAAO,IAAInE,GAAaiiD,OAAOF,EAAGK,UAAUL,EAAGje,YAAcie,EAAGje,WAAYie,EACtF,EAQA,YAAA9iD,KAAA,SAAK8kD,GACH,IAAIhmB,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,GAC5C,OAAOjkB,EAASn/B,KAAKmjD,GAAIiC,SAASplD,KAAKojD,OAASjkB,EAAQgmB,GAAoB,IAC9E,EAQA,YAAAmF,UAAA,SAAUnF,GACR,IAAIhmB,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,GAC5C,OAAOjkB,EAASn/B,KAAKmjD,GAAIiC,SAASplD,KAAKojD,OAASjkB,EAAQgmB,GAAoB,IAC9E,EAKA,YAAAzjD,KAAA,WACE,IAAIy9B,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,GAC5C,OAAOjkB,EAAkBn/B,KAAKmjD,GAAIK,UAAUxjD,KAAKojD,OAASjkB,GAC1Cz+B,EAAYC,aAAaC,IAAI4B,cAAcukD,SAC7D,EAKA,YAAA3iD,EAAA,WACE,IAAI+6B,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,IAC5C,OAAOjkB,EAASn/B,KAAKmjD,GAAIgO,YAAYnxD,KAAKojD,OAASjkB,GAAU,CAC/D,EAKA,YAAAx7B,EAAA,WACE,IAAIw7B,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,IAC5C,OAAOjkB,EAASn/B,KAAKmjD,GAAI8C,UAAUjmD,KAAKojD,OAASjkB,GAAUn/B,KAAKmjD,GAAI+C,WAAW,EAAG,EACpF,EAQA,YAAA7hD,EAAA,SAAE8gD,GACA,IAAIhmB,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,IAC5C,OAAOjkB,EAASn/B,KAAKmjD,GAAIiC,SAASplD,KAAKojD,OAASjkB,EAAQgmB,GAAoB,IAC9E,EAMA,YAAA7gD,EAAA,SAAEiB,GACA,IAAI45B,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,IAC5C,OAAOjkB,GAAU55B,GAAO,IAAI7E,EAAYC,aAAaC,IAAIiD,QACpCw/C,OAAOrjD,KAAKmjD,GAAIW,WAAW9jD,KAAKojD,OAASjkB,GAASn/B,KAAKmjD,IAC5D,IAClB,EAMA,YAAA5+C,EAAA,SAAEgB,GACA,IAAI45B,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,IAC5C,OAAOjkB,GAAU55B,GAAO,IAAI7E,EAAYC,aAAaC,IAAIm3C,OACpCsL,OAAOrjD,KAAKmjD,GAAIW,WAAW9jD,KAAKojD,OAASjkB,GAASn/B,KAAKmjD,IAC5D,IAClB,EAMA,YAAA3+C,OAAA,SAAOmK,GACL,IAAIwwB,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,IAC5C,OAAOjkB,EAASn/B,KAAKmjD,GAAIgO,YAAYnxD,KAAKmjD,GAAIY,SAAS/jD,KAAKojD,OAASjkB,GAAkB,EAARxwB,GAAa,CAC9F,EAKA,YAAAyiD,aAAA,WACE,IAAIjyB,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,IAC5C,OAAOjkB,EAASn/B,KAAKmjD,GAAIa,aAAahkD,KAAKojD,OAASjkB,GAAU,CAChE,EAKA,YAAAt6B,YAAA,WACE,IAAIs6B,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,IAC5C,OAAOjkB,EACH,IAAI5lB,aACAvZ,KAAKmjD,GAAI0H,QAAQ3xC,OAAQlZ,KAAKmjD,GAAI0H,QAAQriB,WAAaxoC,KAAKmjD,GAAIY,SAAS/jD,KAAKojD,OAASjkB,GACvFn/B,KAAKmjD,GAAIa,aAAahkD,KAAKojD,OAASjkB,IACxC,IACN,EAMA,YAAA16B,KAAA,SAAKkK,GACH,IAAIwwB,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,IAC5C,OAAOjkB,EAASn/B,KAAKmjD,GAAI8C,UAAUjmD,KAAKmjD,GAAIY,SAAS/jD,KAAKojD,OAASjkB,GAAkB,EAARxwB,GAC7D3O,KAAKmjD,GAAI+C,WAAW,EAAG,EACzC,EAKA,YAAAphD,WAAA,WACE,IAAIq6B,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,IAC5C,OAAOjkB,EAASn/B,KAAKmjD,GAAIa,aAAahkD,KAAKojD,OAASjkB,GAAU,CAChE,EASA,YAAAz6B,QAAA,SAAQiK,EAAew2C,GACrB,IAAIhmB,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,IAC5C,OAAOjkB,EAASn/B,KAAKmjD,GAAIiC,SAASplD,KAAKmjD,GAAIY,SAAS/jD,KAAKojD,OAASjkB,GAAkB,EAARxwB,EAAWw2C,GAAoB,IAC7G,EAKA,YAAAngD,cAAA,WACE,IAAIm6B,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,IAC5C,OAAOjkB,EAASn/B,KAAKmjD,GAAIa,aAAahkD,KAAKojD,OAASjkB,GAAU,CAChE,EAOA,YAAAx6B,QAAA,SAAQgK,EAAepJ,GACrB,IAAI45B,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,IAC5C,OAAOjkB,GAAU55B,GAAO,IAAI7E,EAAYC,aAAaC,IAAIiD,QACpCw/C,OAAOrjD,KAAKmjD,GAAIW,WAAW9jD,KAAKmjD,GAAIY,SAAS/jD,KAAKojD,OAASjkB,GAAkB,EAARxwB,GAAY3O,KAAKmjD,IAC3F,IAClB,EAKA,YAAAl+C,cAAA,WACE,IAAIk6B,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,IAC5C,OAAOjkB,EAASn/B,KAAKmjD,GAAIa,aAAahkD,KAAKojD,OAASjkB,GAAU,CAChE,EAOA,YAAAv6B,OAAA,SAAO+J,EAAepJ,GACpB,IAAI45B,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,IAC5C,OAAOjkB,GAAU55B,GAAO,IAAI7E,EAAYC,aAAaC,IAAIm3C,OACpCsL,OAAOrjD,KAAKmjD,GAAIW,WAAW9jD,KAAKmjD,GAAIY,SAAS/jD,KAAKojD,OAASjkB,GAAkB,EAARxwB,GAAY3O,KAAKmjD,IAC3F,IAClB,EAKA,YAAAkO,aAAA,WACE,IAAIlyB,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,IAC5C,OAAOjkB,EAASn/B,KAAKmjD,GAAIa,aAAahkD,KAAKojD,OAASjkB,GAAU,CAChE,EAKO,EAAAmyB,eAAP,SAAsBpN,GACpBA,EAAQC,YAAY,GACtB,EAMO,EAAA8G,QAAP,SAAe/G,EAA8BgH,GAC3ChH,EAAQG,eAAe,EAAG6G,EAAY,EACxC,EAMO,EAAAC,aAAP,SAAoBjH,EAA8BkH,GAChDlH,EAAQG,eAAe,EAAG+G,EAAiB,EAC7C,EAMO,EAAAO,QAAP,SAAezH,EAA8BxiD,GAC3CwiD,EAAQgD,cAAc,EAAGxlD,EAAMhB,EAAYC,aAAaC,IAAI4B,cAAcukD,UAC5E,EAMO,EAAAwK,KAAP,SAAYrN,EAA8B9/C,GACxC8/C,EAAQsN,gBAAgB,EAAGptD,EAAG,EAChC,EAMO,EAAAqtD,KAAP,SAAYvN,EAA8BvgD,GACxCugD,EAAQsC,cAAc,EAAG7iD,EAAGugD,EAAQgC,WAAW,EAAG,GACpD,EAMO,EAAAwL,KAAP,SAAYxN,EAA8ByN,GACxCzN,EAAQG,eAAe,EAAGsN,EAAS,EACrC,EAMO,EAAAC,KAAP,SAAY1N,EAA8B2N,GACxC3N,EAAQG,eAAe,EAAGwN,EAAS,EACrC,EAMO,EAAAC,KAAP,SAAY5N,EAA8B6N,GACxC7N,EAAQG,eAAe,EAAG0N,EAAS,EACrC,EAMO,EAAAC,UAAP,SAAiB9N,EAA8B+N,GAC7C/N,EAAQG,eAAe,EAAG4N,EAAc,EAC1C,EAOO,EAAAC,mBAAP,SAA0BhO,EAA8BjqC,GACtDiqC,EAAQK,YAAY,EAAGtqC,EAAKtb,OAAQ,GACpC,IAAK,IAAIgF,EAAIsW,EAAKtb,OAAS,EAAGgF,GAAK,EAAGA,IACpCugD,EAAQiO,WAAWl4C,EAAKtW,IAE1B,OAAOugD,EAAQO,WACjB,EAMO,EAAA2N,kBAAP,SAAyBlO,EAA8BS,GACrDT,EAAQK,YAAY,EAAGI,EAAU,EACnC,EAMO,EAAA0N,QAAP,SAAenO,EAA8BoO,GAC3CpO,EAAQG,eAAe,EAAGiO,EAAY,EACxC,EAOO,EAAAC,iBAAP,SAAwBrO,EAA8BjqC,GACpDiqC,EAAQK,YAAY,EAAGtqC,EAAKtb,OAAQ,GACpC,IAAK,IAAIgF,EAAIsW,EAAKtb,OAAS,EAAGgF,GAAK,EAAGA,IACpCugD,EAAQqL,SAASt1C,EAAKtW,IAExB,OAAOugD,EAAQO,WACjB,EAMO,EAAA+N,gBAAP,SAAuBtO,EAA8BS,GACnDT,EAAQK,YAAY,EAAGI,EAAU,EACnC,EAMO,EAAA8N,WAAP,SAAkBvO,EAA8BwO,GAC9CxO,EAAQG,eAAe,GAAIqO,EAAe,EAC5C,EAOO,EAAAC,oBAAP,SAA2BzO,EAA8BjqC,GACvDiqC,EAAQK,YAAY,EAAGtqC,EAAKtb,OAAQ,GACpC,IAAK,IAAIgF,EAAIsW,EAAKtb,OAAS,EAAGgF,GAAK,EAAGA,IACpCugD,EAAQM,UAAUvqC,EAAKtW,IAEzB,OAAOugD,EAAQO,WACjB,EAMO,EAAAmO,mBAAP,SAA0B1O,EAA8BS,GACtDT,EAAQK,YAAY,EAAGI,EAAU,EACnC,EAMO,EAAAkO,WAAP,SAAkB3O,EAA8B4O,GAC9C5O,EAAQG,eAAe,GAAIyO,EAAe,EAC5C,EAOO,EAAAC,oBAAP,SAA2B7O,EAA8BjqC,GACvDiqC,EAAQK,YAAY,EAAGtqC,EAAKtb,OAAQ,GACpC,IAAK,IAAIgF,EAAIsW,EAAKtb,OAAS,EAAGgF,GAAK,EAAGA,IACpCugD,EAAQM,UAAUvqC,EAAKtW,IAEzB,OAAOugD,EAAQO,WACjB,EAMO,EAAAuO,mBAAP,SAA0B9O,EAA8BS,GACtDT,EAAQK,YAAY,EAAGI,EAAU,EACnC,EAMO,EAAAsO,UAAP,SAAiB/O,EAA8BgP,GAC7ChP,EAAQG,eAAe,GAAI6O,EAAc,EAC3C,EAOO,EAAAC,mBAAP,SAA0BjP,EAA8BjqC,GACtDiqC,EAAQK,YAAY,EAAGtqC,EAAKtb,OAAQ,GACpC,IAAK,IAAIgF,EAAIsW,EAAKtb,OAAS,EAAGgF,GAAK,EAAGA,IACpCugD,EAAQM,UAAUvqC,EAAKtW,IAEzB,OAAOugD,EAAQO,WACjB,EAMO,EAAA2O,kBAAP,SAAyBlP,EAA8BS,GACrDT,EAAQK,YAAY,EAAGI,EAAU,EACnC,EAMO,EAAA0O,aAAP,SAAoBnP,GAElB,OADaA,EAAQW,WAEvB,EAEO,EAAAyO,gBAAP,SACIpP,EAA8BgH,EAAgCE,EAC9D1pD,EAAkD0C,EAAWT,EAAqBguD,EAClFE,EAA6BE,EAA6BE,EAC1DK,EAAgCI,EAAmCI,EACnEI,GAeF,OAdA9xD,EAAUkwD,eAAepN,GACzB9iD,EAAU6pD,QAAQ/G,EAASgH,GAC3B9pD,EAAU+pD,aAAajH,EAASkH,GAChChqD,EAAUuqD,QAAQzH,EAASxiD,GAC3BN,EAAUmwD,KAAKrN,EAAS9/C,GACxBhD,EAAUqwD,KAAKvN,EAASvgD,GACxBvC,EAAUswD,KAAKxN,EAASyN,GACxBvwD,EAAUwwD,KAAK1N,EAAS2N,GACxBzwD,EAAU0wD,KAAK5N,EAAS6N,GACxB3wD,EAAU4wD,UAAU9N,EAAS+N,GAC7B7wD,EAAUixD,QAAQnO,EAASoO,GAC3BlxD,EAAUqxD,WAAWvO,EAASwO,GAC9BtxD,EAAUyxD,WAAW3O,EAAS4O,GAC9B1xD,EAAU6xD,UAAU/O,EAASgP,GACtB9xD,EAAUiyD,aAAanP,EAChC,EACF,EApdA,GAAa,EAAA9iD,UAAS,CAqdvB,CAtdyC,GAAAR,MAAA,EAAAA,IAAG,IAsd5C,CAtd4B,GAAAD,eAAA,EAAAA,aAAY,IAsdxC,CAtdD,CAAiB,EAAAD,cAAA,EAAAA,YAAW,KA0d5B,SAAiBA,IAAY,SAAAC,IAAa,SAAAC,GACxC,8BACE,KAAAuiD,GAAkC,KAElC,KAAAC,OAAS,CAwaX,QAlaE,YAAAC,OAAA,SAAO1/C,EAAWw/C,GAGhB,OAFAnjD,KAAKojD,OAASz/C,EACd3D,KAAKmjD,GAAKA,EACHnjD,IACT,EAOO,EAAAuzD,eAAP,SAAsBpQ,EAA4B59C,GAChD,OAAQA,GAAO,IAAIwyC,GAASsL,OAAOF,EAAGK,UAAUL,EAAGje,YAAcie,EAAGje,WAAYie,EAClF,EAOO,EAAAqQ,2BAAP,SAAkCrQ,EAA4B59C,GAE5D,OADA49C,EAAGO,YAAYP,EAAGje,WAAa,EAAAuc,YAAYkC,qBACnCp+C,GAAO,IAAIwyC,GAASsL,OAAOF,EAAGK,UAAUL,EAAGje,YAAcie,EAAGje,WAAYie,EAClF,EAOA,YAAArc,aAAA,SAAan4B,EAAepJ,GAC1B,IAAI45B,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,GAC5C,OAAOjkB,GAAU55B,GAAO,IAAI7E,EAAYC,aAAaC,IAAIiD,QACpCw/C,OAAOrjD,KAAKmjD,GAAIW,WAAW9jD,KAAKmjD,GAAIY,SAAS/jD,KAAKojD,OAASjkB,GAAkB,EAARxwB,GAAY3O,KAAKmjD,IAC3F,IAClB,EAKA,YAAAlI,mBAAA,WACE,IAAI9b,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,GAC5C,OAAOjkB,EAASn/B,KAAKmjD,GAAIa,aAAahkD,KAAKojD,OAASjkB,GAAU,CAChE,EAOA,YAAAsb,SAAA,SAAS9rC,EAAepJ,GACtB,IAAI45B,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,GAC5C,OAAOjkB,GAAU55B,GAAO,IAAI7E,EAAYC,aAAaC,IAAI0sD,WACpCjK,OAAOrjD,KAAKmjD,GAAIW,WAAW9jD,KAAKmjD,GAAIY,SAAS/jD,KAAKojD,OAASjkB,GAAkB,EAARxwB,GAAY3O,KAAKmjD,IAC3F,IAClB,EAKA,YAAA3I,eAAA,WACE,IAAIrb,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,GAC5C,OAAOjkB,EAASn/B,KAAKmjD,GAAIa,aAAahkD,KAAKojD,OAASjkB,GAAU,CAChE,EAOA,YAAAzuB,MAAA,SAAM/B,EAAepJ,GACnB,IAAI45B,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,GAC5C,OAAOjkB,GAAU55B,GAAO,IAAI7E,EAAYC,aAAaC,IAAI+3C,MACpC0K,OAAOrjD,KAAKmjD,GAAIW,WAAW9jD,KAAKmjD,GAAIY,SAAS/jD,KAAKojD,OAASjkB,GAAkB,EAARxwB,GAAY3O,KAAKmjD,IAC3F,IAClB,EAKA,YAAA9H,YAAA,WACE,IAAIlc,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,GAC5C,OAAOjkB,EAASn/B,KAAKmjD,GAAIa,aAAahkD,KAAKojD,OAASjkB,GAAU,CAChE,EAKA,YAAAs0B,aAAA,WACE,IAAIt0B,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,IAC5C,OAAOjkB,EAASn/B,KAAKmjD,GAAIsF,WAAWzoD,KAAKojD,OAASjkB,GAAU,CAC9D,EAOA,YAAAu0B,UAAA,SAAU/kD,EAAepJ,GACvB,IAAI45B,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,IAC5C,OAAOjkB,GAAU55B,GAAO,IAAI7E,EAAYC,aAAaC,IAAIwoD,UACpC/F,OAAOrjD,KAAKmjD,GAAIW,WAAW9jD,KAAKmjD,GAAIY,SAAS/jD,KAAKojD,OAASjkB,GAAkB,EAARxwB,GAAY3O,KAAKmjD,IAC3F,IAClB,EAKA,YAAAwQ,gBAAA,WACE,IAAIx0B,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,IAC5C,OAAOjkB,EAASn/B,KAAKmjD,GAAIa,aAAahkD,KAAKojD,OAASjkB,GAAU,CAChE,EASA,YAAA7nB,OAAA,SAAO3I,EAAew2C,GACpB,IAAIhmB,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,IAC5C,OAAOjkB,EAASn/B,KAAKmjD,GAAIiC,SAASplD,KAAKmjD,GAAIY,SAAS/jD,KAAKojD,OAASjkB,GAAkB,EAARxwB,EAAWw2C,GAAoB,IAC7G,EAKA,YAAA7K,aAAA,WACE,IAAInb,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,IAC5C,OAAOjkB,EAASn/B,KAAKmjD,GAAIa,aAAahkD,KAAKojD,OAASjkB,GAAU,CAChE,EASA,YAAAH,QAAA,SAAQrwB,EAAew2C,GACrB,IAAIhmB,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,IAC5C,OAAOjkB,EAASn/B,KAAKmjD,GAAIiC,SAASplD,KAAKmjD,GAAIY,SAAS/jD,KAAKojD,OAASjkB,GAAkB,EAARxwB,EAAWw2C,GAAoB,IAC7G,EAKA,YAAAhK,cAAA,WACE,IAAIhc,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,IAC5C,OAAOjkB,EAASn/B,KAAKmjD,GAAIa,aAAahkD,KAAKojD,OAASjkB,GAAU,CAChE,EAOA,YAAAy0B,mBAAA,SAAmBjlD,EAAepJ,GAEhC,IAAI45B,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,IAC5C,OAAOjkB,GAAU55B,GAAO,IAAI7E,EAAYC,aAAaC,IAAI0vD,cACpCjN,OAAOrjD,KAAKmjD,GAAIW,WAAW9jD,KAAKmjD,GAAIY,SAAS/jD,KAAKojD,OAASjkB,GAAkB,EAARxwB,GAAY3O,KAAKmjD,IAC3F,IAClB,EAKA,YAAA0Q,yBAAA,WACE,IAAI10B,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,IAC5C,OAAOjkB,EAASn/B,KAAKmjD,GAAIa,aAAahkD,KAAKojD,OAASjkB,GAAU,CAChE,EAKO,EAAA20B,WAAP,SAAkB5P,GAChBA,EAAQC,YAAY,EACtB,EAMO,EAAA4P,gBAAP,SAAuB7P,EAA8B8P,GACnD9P,EAAQG,eAAe,EAAG2P,EAAoB,EAChD,EAOO,EAAAC,yBAAP,SAAgC/P,EAA8BjqC,GAC5DiqC,EAAQK,YAAY,EAAGtqC,EAAKtb,OAAQ,GACpC,IAAK,IAAIgF,EAAIsW,EAAKtb,OAAS,EAAGgF,GAAK,EAAGA,IACpCugD,EAAQM,UAAUvqC,EAAKtW,IAEzB,OAAOugD,EAAQO,WACjB,EAMO,EAAAyP,wBAAP,SAA+BhQ,EAA8BS,GAC3DT,EAAQK,YAAY,EAAGI,EAAU,EACnC,EAMO,EAAAwP,YAAP,SAAmBjQ,EAA8BkQ,GAC/ClQ,EAAQG,eAAe,EAAG+P,EAAgB,EAC5C,EAOO,EAAAC,qBAAP,SAA4BnQ,EAA8BjqC,GACxDiqC,EAAQK,YAAY,EAAGtqC,EAAKtb,OAAQ,GACpC,IAAK,IAAIgF,EAAIsW,EAAKtb,OAAS,EAAGgF,GAAK,EAAGA,IACpCugD,EAAQM,UAAUvqC,EAAKtW,IAEzB,OAAOugD,EAAQO,WACjB,EAMO,EAAA6P,oBAAP,SAA2BpQ,EAA8BS,GACvDT,EAAQK,YAAY,EAAGI,EAAU,EACnC,EAMO,EAAA4P,SAAP,SAAgBrQ,EAA8BsQ,GAC5CtQ,EAAQG,eAAe,EAAGmQ,EAAa,EACzC,EAOO,EAAAC,kBAAP,SAAyBvQ,EAA8BjqC,GACrDiqC,EAAQK,YAAY,EAAGtqC,EAAKtb,OAAQ,GACpC,IAAK,IAAIgF,EAAIsW,EAAKtb,OAAS,EAAGgF,GAAK,EAAGA,IACpCugD,EAAQM,UAAUvqC,EAAKtW,IAEzB,OAAOugD,EAAQO,WACjB,EAMO,EAAAiQ,iBAAP,SAAwBxQ,EAA8BS,GACpDT,EAAQK,YAAY,EAAGI,EAAU,EACnC,EAMO,EAAAgQ,gBAAP,SAAuBzQ,EAA8BuP,GACnDvP,EAAQgD,cAAc,EAAGuM,EAAc,EACzC,EAMO,EAAAmB,aAAP,SAAoB1Q,EAA8B2Q,GAChD3Q,EAAQG,eAAe,EAAGwQ,EAAiB,EAC7C,EAOO,EAAAC,sBAAP,SAA6B5Q,EAA8BjqC,GACzDiqC,EAAQK,YAAY,EAAGtqC,EAAKtb,OAAQ,GACpC,IAAK,IAAIgF,EAAIsW,EAAKtb,OAAS,EAAGgF,GAAK,EAAGA,IACpCugD,EAAQM,UAAUvqC,EAAKtW,IAEzB,OAAOugD,EAAQO,WACjB,EAMO,EAAAsQ,qBAAP,SAA4B7Q,EAA8BS,GACxDT,EAAQK,YAAY,EAAGI,EAAU,EACnC,EAMO,EAAAmH,UAAP,SAAiB5H,EAA8B6H,GAC7C7H,EAAQG,eAAe,EAAG0H,EAAc,EAC1C,EAOO,EAAAC,mBAAP,SAA0B9H,EAA8BjqC,GACtDiqC,EAAQK,YAAY,EAAGtqC,EAAKtb,OAAQ,GACpC,IAAK,IAAIgF,EAAIsW,EAAKtb,OAAS,EAAGgF,GAAK,EAAGA,IACpCugD,EAAQM,UAAUvqC,EAAKtW,IAEzB,OAAOugD,EAAQO,WACjB,EAMO,EAAAwH,kBAAP,SAAyB/H,EAA8BS,GACrDT,EAAQK,YAAY,EAAGI,EAAU,EACnC,EAMO,EAAAuH,WAAP,SAAkBhI,EAA8BiI,GAC9CjI,EAAQG,eAAe,EAAG8H,EAAe,EAC3C,EAOO,EAAAC,oBAAP,SAA2BlI,EAA8BjqC,GACvDiqC,EAAQK,YAAY,EAAGtqC,EAAKtb,OAAQ,GACpC,IAAK,IAAIgF,EAAIsW,EAAKtb,OAAS,EAAGgF,GAAK,EAAGA,IACpCugD,EAAQM,UAAUvqC,EAAKtW,IAEzB,OAAOugD,EAAQO,WACjB,EAMO,EAAA4H,mBAAP,SAA0BnI,EAA8BS,GACtDT,EAAQK,YAAY,EAAGI,EAAU,EACnC,EAMO,EAAAqQ,sBAAP,SAA6B9Q,EAA8B+Q,GACzD/Q,EAAQG,eAAe,EAAG4Q,EAA0B,EACtD,EAOO,EAAAC,+BAAP,SAAsChR,EAA8BjqC,GAElEiqC,EAAQK,YAAY,EAAGtqC,EAAKtb,OAAQ,GACpC,IAAK,IAAIgF,EAAIsW,EAAKtb,OAAS,EAAGgF,GAAK,EAAGA,IACpCugD,EAAQM,UAAUvqC,EAAKtW,IAEzB,OAAOugD,EAAQO,WACjB,EAMO,EAAA0Q,8BAAP,SAAqCjR,EAA8BS,GACjET,EAAQK,YAAY,EAAGI,EAAU,EACnC,EAMO,EAAAyQ,SAAP,SAAgBlR,GAEd,OADaA,EAAQW,WAEvB,EAEO,EAAAwQ,YAAP,SACInR,EAA8B8P,EAAwCI,EACtEI,EAAiCf,EAAsBoB,EACvD9I,EAAkCI,EAClC8I,GAUF,OATAld,EAAM+b,WAAW5P,GACjBnM,EAAMgc,gBAAgB7P,EAAS8P,GAC/Bjc,EAAMoc,YAAYjQ,EAASkQ,GAC3Brc,EAAMwc,SAASrQ,EAASsQ,GACxBzc,EAAM4c,gBAAgBzQ,EAASuP,GAC/B1b,EAAM6c,aAAa1Q,EAAS2Q,GAC5B9c,EAAM+T,UAAU5H,EAAS6H,GACzBhU,EAAMmU,WAAWhI,EAASiI,GAC1BpU,EAAMid,sBAAsB9Q,EAAS+Q,GAC9Bld,EAAMqd,SAASlR,EACxB,EACF,EA3aA,GAAa,EAAAnM,MAAK,CA4anB,CA7ayC,GAAAn3C,MAAA,EAAAA,IAAG,IA6a5C,CA7a4B,GAAAD,eAAA,EAAAA,aAAY,IA6axC,CA7aD,CAAiB,EAAAD,cAAA,EAAAA,YAAW,KAib5B,SAAiBA,IAAY,SAAAC,IAAa,SAAAC,GACxC,8BACE,KAAAuiD,GAAkC,KAElC,KAAAC,OAAS,CAoQX,QA9PE,YAAAC,OAAA,SAAO1/C,EAAWw/C,GAGhB,OAFAnjD,KAAKojD,OAASz/C,EACd3D,KAAKmjD,GAAKA,EACHnjD,IACT,EAOO,EAAAs1D,eAAP,SAAsBnS,EAA4B59C,GAChD,OAAQA,GAAO,IAAI08C,GAASoB,OAAOF,EAAGK,UAAUL,EAAGje,YAAcie,EAAGje,WAAYie,EAClF,EAOO,EAAAoS,2BAAP,SAAkCpS,EAA4B59C,GAE5D,OADA49C,EAAGO,YAAYP,EAAGje,WAAa,EAAAuc,YAAYkC,qBACnCp+C,GAAO,IAAI08C,GAASoB,OAAOF,EAAGK,UAAUL,EAAGje,YAAcie,EAAGje,WAAYie,EAClF,EAKA,YAAA/B,UAAA,WACE,IAAIjiB,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,GAC5C,OAAOjkB,EAASn/B,KAAKmjD,GAAI8C,UAAUjmD,KAAKojD,OAASjkB,GAAUn/B,KAAKmjD,GAAI+C,WAAW,EAAG,EACpF,EAOA,YAAA5E,YAAA,SAAY3yC,EAAepJ,GAEzB,IAAI45B,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,GAC5C,OAAOjkB,GAAU55B,GAAO,IAAI7E,EAAYC,aAAaC,IAAIytD,eACpChL,OAAOrjD,KAAKmjD,GAAIW,WAAW9jD,KAAKmjD,GAAIY,SAAS/jD,KAAKojD,OAASjkB,GAAkB,EAARxwB,GAAY3O,KAAKmjD,IAC3F,IAClB,EAKA,YAAApB,kBAAA,WACE,IAAI5iB,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,GAC5C,OAAOjkB,EAASn/B,KAAKmjD,GAAIa,aAAahkD,KAAKojD,OAASjkB,GAAU,CAChE,EAQA,YAAAq2B,aAAA,SAAarQ,GACX,IAAIhmB,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,GAC5C,OAAOjkB,EAASn/B,KAAKmjD,GAAIiC,SAASplD,KAAKojD,OAASjkB,EAAQgmB,GAAoB,IAC9E,EAQA,YAAAsQ,gBAAA,SAAgBtQ,GACd,IAAIhmB,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,IAC5C,OAAOjkB,EAASn/B,KAAKmjD,GAAIiC,SAASplD,KAAKojD,OAASjkB,EAAQgmB,GAAoB,IAC9E,EAQA,YAAA5D,OAAA,SAAO4D,GACL,IAAIhmB,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,IAC5C,OAAOjkB,EAASn/B,KAAKmjD,GAAIiC,SAASplD,KAAKojD,OAASjkB,EAAQgmB,GAAoB,IAC9E,EAKA,YAAAuQ,aAAA,WACE,IAAIv2B,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,IAC5C,OAAOjkB,EAASn/B,KAAKmjD,GAAI8C,UAAUjmD,KAAKojD,OAASjkB,GAAUn/B,KAAKmjD,GAAI+C,WAAW,EAAG,EACpF,EAQA,YAAAoE,UAAA,SAAUnF,GACR,IAAIhmB,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,IAC5C,OAAOjkB,EAASn/B,KAAKmjD,GAAIiC,SAASplD,KAAKojD,OAASjkB,EAAQgmB,GAAoB,IAC9E,EAMA,YAAAte,MAAA,SAAMthC,GACJ,IAAI45B,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,IAC5C,OAAOjkB,GAAU55B,GAAO,IAAI7E,EAAYC,aAAaC,IAAIm3C,OACpCsL,OAAOrjD,KAAKmjD,GAAIW,WAAW9jD,KAAKojD,OAASjkB,GAASn/B,KAAKmjD,IAC5D,IAClB,EAQA,YAAAwS,eAAA,SAAexQ,GACb,IAAIhmB,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,IAC5C,OAAOjkB,EAASn/B,KAAKmjD,GAAIiC,SAASplD,KAAKojD,OAASjkB,EAAQgmB,GAAoB,IAC9E,EAKO,EAAAyQ,WAAP,SAAkB1R,GAChBA,EAAQC,YAAY,EACtB,EAMO,EAAA0R,aAAP,SAAoB3R,EAA8B9C,GAChD8C,EAAQsC,cAAc,EAAGpF,EAAW8C,EAAQgC,WAAW,EAAG,GAC5D,EAMO,EAAA4P,eAAP,SAAsB5R,EAA8B6R,GAClD7R,EAAQG,eAAe,EAAG0R,EAAmB,EAC/C,EAOO,EAAAC,wBAAP,SAA+B9R,EAA8BjqC,GAC3DiqC,EAAQK,YAAY,EAAGtqC,EAAKtb,OAAQ,GACpC,IAAK,IAAIgF,EAAIsW,EAAKtb,OAAS,EAAGgF,GAAK,EAAGA,IACpCugD,EAAQM,UAAUvqC,EAAKtW,IAEzB,OAAOugD,EAAQO,WACjB,EAMO,EAAAwR,uBAAP,SAA8B/R,EAA8BS,GAC1DT,EAAQK,YAAY,EAAGI,EAAU,EACnC,EAMO,EAAAuR,gBAAP,SAAuBhS,EAA8BiS,GACnDjS,EAAQG,eAAe,EAAG8R,EAAoB,EAChD,EAMO,EAAAC,mBAAP,SAA0BlS,EAA8BmS,GACtDnS,EAAQG,eAAe,EAAGgS,EAAuB,EACnD,EAMO,EAAAhL,UAAP,SAAiBnH,EAA8BoH,GAC7CpH,EAAQG,eAAe,EAAGiH,EAAc,EAC1C,EAMO,EAAAgL,gBAAP,SAAuBpS,EAA8BwR,GACnDxR,EAAQsC,cAAc,EAAGkP,EAAcxR,EAAQgC,WAAW,EAAG,GAC/D,EAMO,EAAAiF,aAAP,SAAoBjH,EAA8BkH,GAChDlH,EAAQG,eAAe,EAAG+G,EAAiB,EAC7C,EAMO,EAAAmL,SAAP,SAAgBrS,EAA8BsS,GAC5CtS,EAAQG,eAAe,EAAGmS,EAAa,EACzC,EAMO,EAAAC,kBAAP,SAAyBvS,EAA8BwS,GACrDxS,EAAQG,eAAe,EAAGqS,EAAsB,EAClD,EAMO,EAAAC,SAAP,SAAgBzS,GAEd,OADaA,EAAQW,WAEvB,EAEO,EAAA+R,YAAP,SACI1S,EAA8B9C,EAA6B2U,EAC3DI,EAAwCE,EACxC/K,EAAkCoK,EAAgCtK,EAClEoL,EAAiCE,GAWnC,OAVAzU,EAAM2T,WAAW1R,GACjBjC,EAAM4T,aAAa3R,EAAS9C,GAC5Ba,EAAM6T,eAAe5R,EAAS6R,GAC9B9T,EAAMiU,gBAAgBhS,EAASiS,GAC/BlU,EAAMmU,mBAAmBlS,EAASmS,GAClCpU,EAAMoJ,UAAUnH,EAASoH,GACzBrJ,EAAMqU,gBAAgBpS,EAASwR,GAC/BzT,EAAMkJ,aAAajH,EAASkH,GAC5BnJ,EAAMsU,SAASrS,EAASsS,GACxBvU,EAAMwU,kBAAkBvS,EAASwS,GAC1BzU,EAAM0U,SAASzS,EACxB,EACF,EAvQA,GAAa,EAAAjC,MAAK,CAwQnB,CAzQyC,GAAArhD,MAAA,EAAAA,IAAG,IAyQ5C,CAzQ4B,GAAAD,eAAA,EAAAA,aAAY,IAyQxC,CAzQD,CAAiB,EAAAD,cAAA,EAAAA,YAAW,KA6Q5B,SAAiBA,IAAY,SAAAC,IAAa,SAAAC,GACxC,8BACE,KAAAuiD,GAAkC,KAElC,KAAAC,OAAS,CAiKX,QA3JE,YAAAC,OAAA,SAAO1/C,EAAWw/C,GAGhB,OAFAnjD,KAAKojD,OAASz/C,EACd3D,KAAKmjD,GAAKA,EACHnjD,IACT,EAOO,EAAA62D,2BAAP,SAAkC1T,EAA4B59C,GAC5D,OAAQA,GAAO,IAAIuxD,GAAqBzT,OAAOF,EAAGK,UAAUL,EAAGje,YAAcie,EAAGje,WAAYie,EAC9F,EAOO,EAAA4T,uCAAP,SAA8C5T,EAA4B59C,GAGxE,OADA49C,EAAGO,YAAYP,EAAGje,WAAa,EAAAuc,YAAYkC,qBACnCp+C,GAAO,IAAIuxD,GAAqBzT,OAAOF,EAAGK,UAAUL,EAAGje,YAAcie,EAAGje,WAAYie,EAC9F,EAMA,YAAA6T,YAAA,SAAYroD,GACV,IAAIwwB,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,GAC5C,OAAOjkB,EAASn/B,KAAKmjD,GAAIsF,WAAWzoD,KAAKmjD,GAAIY,SAAS/jD,KAAKojD,OAASjkB,GAAkB,EAARxwB,GAAa,CAC7F,EAKA,YAAAsoD,kBAAA,WACE,IAAI93B,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,GAC5C,OAAOjkB,EAASn/B,KAAKmjD,GAAIa,aAAahkD,KAAKojD,OAASjkB,GAAU,CAChE,EAKA,YAAA+3B,iBAAA,WACE,IAAI/3B,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,GAC5C,OAAOjkB,EACH,IAAIptB,YACA/R,KAAKmjD,GAAI0H,QAAQ3xC,OAAQlZ,KAAKmjD,GAAI0H,QAAQriB,WAAaxoC,KAAKmjD,GAAIY,SAAS/jD,KAAKojD,OAASjkB,GACvFn/B,KAAKmjD,GAAIa,aAAahkD,KAAKojD,OAASjkB,IACxC,IACN,EAMA,YAAAg4B,gBAAA,SAAgBxoD,GACd,IAAIwwB,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,GAC5C,OAAOjkB,EAASn/B,KAAKmjD,GAAIiU,WAAWp3D,KAAKmjD,GAAIY,SAAS/jD,KAAKojD,OAASjkB,GAAkB,EAARxwB,GAC9D3O,KAAKmjD,GAAI+C,WAAW,EAAG,EACzC,EAKA,YAAAmR,sBAAA,WACE,IAAIl4B,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,GAC5C,OAAOjkB,EAASn/B,KAAKmjD,GAAIa,aAAahkD,KAAKojD,OAASjkB,GAAU,CAChE,EAKO,EAAAm4B,uBAAP,SAA8BpT,GAC5BA,EAAQC,YAAY,EACtB,EAMO,EAAAoT,eAAP,SAAsBrT,EAA8BsT,GAClDtT,EAAQG,eAAe,EAAGmT,EAAmB,EAC/C,EAOO,EAAAC,wBAAP,SAA+BvT,EAA8BjqC,GAC3DiqC,EAAQK,YAAY,EAAGtqC,EAAKtb,OAAQ,GACpC,IAAK,IAAIgF,EAAIsW,EAAKtb,OAAS,EAAGgF,GAAK,EAAGA,IACpCugD,EAAQ2I,SAAS5yC,EAAKtW,IAExB,OAAOugD,EAAQO,WACjB,EAMO,EAAAiT,uBAAP,SAA8BxT,EAA8BS,GAC1DT,EAAQK,YAAY,EAAGI,EAAU,EACnC,EAMO,EAAAgT,mBAAP,SAA0BzT,EAA8B0T,GACtD1T,EAAQG,eAAe,EAAGuT,EAAuB,EACnD,EAOO,EAAAC,4BAAP,SAAmC3T,EAA8BjqC,GAC/DiqC,EAAQK,YAAY,EAAGtqC,EAAKtb,OAAQ,GACpC,IAAK,IAAIgF,EAAIsW,EAAKtb,OAAS,EAAGgF,GAAK,EAAGA,IACpCugD,EAAQqL,SAASt1C,EAAKtW,IAExB,OAAOugD,EAAQO,WACjB,EAMO,EAAAqT,2BAAP,SAAkC5T,EAA8BS,GAC9DT,EAAQK,YAAY,EAAGI,EAAU,EACnC,EAMO,EAAAoT,qBAAP,SAA4B7T,GAE1B,OADaA,EAAQW,WAEvB,EAEO,EAAAmT,wBAAP,SACI9T,EAA8BsT,EAC9BI,GAIF,OAHAd,EAAkBQ,uBAAuBpT,GACzC4S,EAAkBS,eAAerT,EAASsT,GAC1CV,EAAkBa,mBAAmBzT,EAAS0T,GACvCd,EAAkBiB,qBAAqB7T,EAChD,EACF,EApKA,GAAa,EAAA4S,kBAAiB,CAqK/B,CAtKyC,GAAAl2D,MAAA,EAAAA,IAAG,IAsK5C,CAtK4B,GAAAD,eAAA,EAAAA,aAAY,IAsKxC,CAtKD,CAAiB,EAAAD,cAAA,EAAAA,YAAW,KA0K5B,SAAiBA,IAAY,SAAAC,IAAa,SAAAC,GACxC,8BACE,KAAAuiD,GAAkC,KAElC,KAAAC,OAAS,CA+FX,QAzFE,YAAAC,OAAA,SAAO1/C,EAAWw/C,GAGhB,OAFAnjD,KAAKojD,OAASz/C,EACd3D,KAAKmjD,GAAKA,EACHnjD,IACT,EAOO,EAAAi4D,8BAAP,SAAqC9U,EAA4B59C,GAC/D,OAAQA,GAAO,IAAI2yD,GAAwB7U,OAAOF,EAAGK,UAAUL,EAAGje,YAAcie,EAAGje,WAAYie,EACjG,EAOO,EAAAgV,0CAAP,SAAiDhV,EAA4B59C,GAG3E,OADA49C,EAAGO,YAAYP,EAAGje,WAAa,EAAAuc,YAAYkC,qBACnCp+C,GAAO,IAAI2yD,GAAwB7U,OAAOF,EAAGK,UAAUL,EAAGje,YAAcie,EAAGje,WAAYie,EACjG,EAQA,YAAAiV,QAAA,SAAQjT,GACN,IAAIhmB,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,GAC5C,OAAOjkB,EAASn/B,KAAKmjD,GAAIiC,SAASplD,KAAKojD,OAASjkB,EAAQgmB,GAAoB,IAC9E,EAMA,YAAAkT,aAAA,SAAa9yD,GACX,IAAI45B,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,GAC5C,OAAOjkB,GAAU55B,GAAO,IAAI7E,EAAYC,aAAaC,IAAI03D,cACpCjV,OAAOrjD,KAAKmjD,GAAIW,WAAW9jD,KAAKojD,OAASjkB,GAASn/B,KAAKmjD,IAC5D,IAClB,EAKO,EAAAoV,0BAAP,SAAiCrU,GAC/BA,EAAQC,YAAY,EACtB,EAMO,EAAAqU,WAAP,SAAkBtU,EAA8BuU,GAC9CvU,EAAQG,eAAe,EAAGoU,EAAe,EAC3C,EAMO,EAAAC,gBAAP,SAAuBxU,EAA8ByU,GACnDzU,EAAQG,eAAe,EAAGsU,EAAoB,EAChD,EAMO,EAAAC,wBAAP,SAA+B1U,GAC7B,IAAI/kB,EAAS+kB,EAAQW,YAErB,OADAX,EAAQ2U,cAAc15B,EAAQ,GACvBA,CACT,EAEO,EAAA25B,2BAAP,SACI5U,EAA8BuU,EAC9BE,GAIF,OAHAT,EAAqBK,0BAA0BrU,GAC/CgU,EAAqBM,WAAWtU,EAASuU,GACzCP,EAAqBQ,gBAAgBxU,EAASyU,GACvCT,EAAqBU,wBAAwB1U,EACtD,EACF,EAlGA,GAAa,EAAAgU,qBAAoB,CAmGlC,CApGyC,GAAAt3D,MAAA,EAAAA,IAAG,IAoG5C,CApG4B,GAAAD,eAAA,EAAAA,aAAY,IAoGxC,CApGD,CAAiB,EAAAD,cAAA,EAAAA,YAAW,KAwG5B,SAAiBA,IAAY,SAAAC,IAAa,SAAAC,GACxC,8BACE,KAAAuiD,GAAkC,KAElC,KAAAC,OAAS,CA6HX,QAvHE,YAAAC,OAAA,SAAO1/C,EAAWw/C,GAGhB,OAFAnjD,KAAKojD,OAASz/C,EACd3D,KAAKmjD,GAAKA,EACHnjD,IACT,EAOO,EAAA+4D,sBAAP,SAA6B5V,EAA4B59C,GACvD,OAAQA,GAAO,IAAI+yD,GAAgBjV,OAAOF,EAAGK,UAAUL,EAAGje,YAAcie,EAAGje,WAAYie,EACzF,EAOO,EAAA6V,kCAAP,SAAyC7V,EAA4B59C,GAEnE,OADA49C,EAAGO,YAAYP,EAAGje,WAAa,EAAAuc,YAAYkC,qBACnCp+C,GAAO,IAAI+yD,GAAgBjV,OAAOF,EAAGK,UAAUL,EAAGje,YAAcie,EAAGje,WAAYie,EACzF,EAMA,YAAA8V,QAAA,SAAQ1zD,GACN,IAAI45B,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,GAC5C,OAAOjkB,GAAU55B,GAAO,IAAI7E,EAAYC,aAAaC,IAAIk2D,mBACpCzT,OAAOrjD,KAAKmjD,GAAIW,WAAW9jD,KAAKojD,OAASjkB,GAASn/B,KAAKmjD,IAC5D,IAClB,EAOA,YAAA+V,sBAAA,SAAsBvqD,EAAepJ,GAEnC,IAAI45B,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,GAC5C,OAAOjkB,GAAU55B,GAAO,IAAI7E,EAAYC,aAAaC,IAAIs3D,sBACpC7U,OAAOrjD,KAAKmjD,GAAIW,WAAW9jD,KAAKmjD,GAAIY,SAAS/jD,KAAKojD,OAASjkB,GAAkB,EAARxwB,GAAY3O,KAAKmjD,IAC3F,IAClB,EAKA,YAAAgW,4BAAA,WACE,IAAIh6B,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,GAC5C,OAAOjkB,EAASn/B,KAAKmjD,GAAIa,aAAahkD,KAAKojD,OAASjkB,GAAU,CAChE,EAKO,EAAAi6B,kBAAP,SAAyBlV,GACvBA,EAAQC,YAAY,EACtB,EAMO,EAAAkV,WAAP,SAAkBnV,EAA8BoV,GAC9CpV,EAAQG,eAAe,EAAGiV,EAAe,EAC3C,EAMO,EAAAC,yBAAP,SAAgCrV,EAA8BsV,GAC5DtV,EAAQG,eAAe,EAAGmV,EAA6B,EACzD,EAOO,EAAAC,kCAAP,SAAyCvV,EAA8BjqC,GAErEiqC,EAAQK,YAAY,EAAGtqC,EAAKtb,OAAQ,GACpC,IAAK,IAAIgF,EAAIsW,EAAKtb,OAAS,EAAGgF,GAAK,EAAGA,IACpCugD,EAAQM,UAAUvqC,EAAKtW,IAEzB,OAAOugD,EAAQO,WACjB,EAMO,EAAAiV,iCAAP,SAAwCxV,EAA8BS,GACpET,EAAQK,YAAY,EAAGI,EAAU,EACnC,EAMO,EAAAgV,gBAAP,SAAuBzV,GAErB,OADaA,EAAQW,WAEvB,EAEO,EAAA+U,mBAAP,SACI1V,EAA8BoV,EAC9BE,GAIF,OAHAlB,EAAac,kBAAkBlV,GAC/BoU,EAAae,WAAWnV,EAASoV,GACjChB,EAAaiB,yBAAyBrV,EAASsV,GACxClB,EAAaqB,gBAAgBzV,EACtC,EACF,EAhIA,GAAa,EAAAoU,aAAY,CAiI1B,CAlIyC,GAAA13D,MAAA,EAAAA,IAAG,IAkI5C,CAlI4B,GAAAD,eAAA,EAAAA,aAAY,IAkIxC,CAlID,CAAiB,EAAAD,cAAA,EAAAA,YAAW,KAsI5B,SAAiBA,IAAY,SAAAC,IAAa,SAAAC,GACxC,8BACE,KAAAuiD,GAAkC,KAElC,KAAAC,OAAS,CAyIX,QAnIE,YAAAC,OAAA,SAAO1/C,EAAWw/C,GAGhB,OAFAnjD,KAAKojD,OAASz/C,EACd3D,KAAKmjD,GAAKA,EACHnjD,IACT,EAOO,EAAA6hD,0BAAP,SAAiCsB,EAA4B59C,GAC3D,OAAQA,GAAO,IAAIq8C,GAAoByB,OAAOF,EAAGK,UAAUL,EAAGje,YAAcie,EAAGje,WAAYie,EAC7F,EAOO,EAAA0W,sCAAP,SAA6C1W,EAA4B59C,GAEvE,OADA49C,EAAGO,YAAYP,EAAGje,WAAa,EAAAuc,YAAYkC,qBACnCp+C,GAAO,IAAIq8C,GAAoByB,OAAOF,EAAGK,UAAUL,EAAGje,YAAcie,EAAGje,WAAYie,EAC7F,EAMO,EAAA2W,oBAAP,SAA2B3W,GACzB,OAAOA,EAAG4W,iBAAiB,OAC7B,EAQA,YAAAC,WAAA,SAAW7U,GACT,IAAIhmB,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,GAC5C,OAAOjkB,EAASn/B,KAAKmjD,GAAIiC,SAASplD,KAAKojD,OAASjkB,EAAQgmB,GAAoB,IAC9E,EAMA,YAAArD,MAAA,SAAMv8C,GACJ,IAAI45B,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,GAC5C,OAAOjkB,GAAU55B,GAAO,IAAI7E,EAAYC,aAAaC,IAAIqhD,OACpCoB,OAAOrjD,KAAKmjD,GAAIW,WAAW9jD,KAAKojD,OAASjkB,GAASn/B,KAAKmjD,IAC5D,IAClB,EAMA,YAAAkV,aAAA,SAAa9yD,GACX,IAAI45B,EAASn/B,KAAKmjD,GAAIS,SAAS5jD,KAAKojD,OAAQ,GAC5C,OAAOjkB,GAAU55B,GAAO,IAAI7E,EAAYC,aAAaC,IAAI03D,cACpCjV,OAAOrjD,KAAKmjD,GAAIW,WAAW9jD,KAAKojD,OAASjkB,GAASn/B,KAAKmjD,IAC5D,IAClB,EAKO,EAAA8W,sBAAP,SAA6B/V,GAC3BA,EAAQC,YAAY,EACtB,EAMO,EAAA+V,cAAP,SAAqBhW,EAA8BiW,GACjDjW,EAAQG,eAAe,EAAG8V,EAAkB,EAC9C,EAMO,EAAAC,SAAP,SAAgBlW,EAA8BmW,GAC5CnW,EAAQG,eAAe,EAAGgW,EAAa,EACzC,EAMO,EAAA3B,gBAAP,SAAuBxU,EAA8ByU,GACnDzU,EAAQG,eAAe,EAAGsU,EAAoB,EAChD,EAMO,EAAA2B,oBAAP,SAA2BpW,GAEzB,OADaA,EAAQW,WAEvB,EAMO,EAAA0V,6BAAP,SAAoCrW,EAA8B/kB,GAChE+kB,EAAQ7R,OAAOlT,EAAQ,OACzB,EAMO,EAAAq7B,yCAAP,SAAgDtW,EAA8B/kB,GAC5E+kB,EAAQ7R,OAAOlT,EAAQ,QAAQ,EACjC,EAEO,EAAAs7B,uBAAP,SACIvW,EAA8BiW,EAAsCE,EACpE1B,GAKF,OAJA/W,EAAiBqY,sBAAsB/V,GACvCtC,EAAiBsY,cAAchW,EAASiW,GACxCvY,EAAiBwY,SAASlW,EAASmW,GACnCzY,EAAiB8W,gBAAgBxU,EAASyU,GACnC/W,EAAiB0Y,oBAAoBpW,EAC9C,EACF,EA5IA,GAAa,EAAAtC,iBAAgB,CA6I9B,CA9IyC,GAAAhhD,MAAA,EAAAA,IAAG,IA8I5C,CA9I4B,GAAAD,eAAA,EAAAA,aAAY,IA8IxC,CA9ID,CAAiB,EAAAD,cAAA,EAAAA,YAAW,I,ugDC5oH5B,cAGA,UAEA,aACE,WAAoBjD,GAAA,KAAAA,QAAAA,EAClBuC,KAAK4K,WAAa5K,KAAKvC,QAAQmN,WAC/B5K,KAAK06D,YAAc16D,KAAKvC,QAAQi9D,WAClC,CAgCF,OA9BQ,YAAA/0D,QAAN,W,oFAGM,YAAA4S,IAAN,SACIoiD,EAAiCC,EACjCC,G,wGAEF,IAAW,KADLC,EAAW,IAAI/5D,IACF45D,EACbn7D,OAAO43B,eAAeC,KAAKsjC,EAAO,KAC9BI,EAAOJ,EAAM,GACnBG,EAAS35D,IACL,EACA,IAAI,SACA45D,EAAK9iD,KAAM8iD,EAAKr5D,UAA+Ba,OAAWA,EAC1Dw4D,EAAK9gD,QAGC,SAAMja,KAAKvC,QAAQ8a,IAAIuiD,I,OAKzC,OALME,EAAY,SACZjyD,EAAoC,CAAC,EAC3CiyD,EAAUnwD,SAAQ,SAAC2N,EAAQnY,GACzB0I,EAAO1I,GAAQ,IAAI,EAAAwD,OAAO2U,EAAO9W,KAAM8W,EAAOyB,KAAMzB,EAAOP,KAC7D,IACO,CAAP,EAAOlP,G,QAET,YAAAkyD,eAAA,WACEj7D,KAAKvC,QAAQw9D,gBACf,EACA,YAAAC,aAAA,WACEl7D,KAAKvC,QAAQy9D,cACf,EACF,EApCA,GAAa,EAAAt9D,qBAAAA,C,0/CCLb,cACA,UAEA,UACA,UAEA,UACA,UAiBA,aACE,WAAYqsC,QAAA,IAAAA,IAAAA,EAAA,IACVjqC,KAAKm7D,cAAe,EACpBn7D,KAAKoF,YAAc6kC,EAAO7kC,YAC1BpF,KAAKgjC,SAAW,EAAA2d,SAAShB,OAAO1V,EAAOjH,UACvChjC,KAAK+G,QAAU,CAACi8B,SAAUhjC,KAAKgjC,SAAUo4B,gBAAiB,GAAIC,eAAgB,GAChF,CAgOF,OA9NE,sBAAI,yBAAU,C,IAAd,WACE,OAAOr7D,KAAKs7D,OAAOz0B,MAAMsS,eAC3B,E,gCACA,sBAAI,0BAAW,C,IAAf,WACE,OAAOn5C,KAAKs7D,OAAOz0B,MAAMyS,gBAC3B,E,gCAEA,YAAA2hB,eAAA,WACEj7D,KAAKgjC,SAASpL,OAChB,EAEA,YAAAsjC,aAAA,WACEl7D,KAAKgjC,SAAS+c,MAChB,EAKM,YAAApiD,UAAN,SAAgB49D,EAAoC/yB,EAAqB7pC,G,qGACvE,SAAMqB,KAAKgjC,SAASK,MAAM,UAAW,qBAAqB,gD,8DAExC,UAAM,IAAAv9B,gBAAe9F,KAAKoF,c,cAApCE,EAAU,SAChBtF,KAAK42C,eAAiBtxC,EAAQI,qBAAqB1F,KAAK+G,SAExD/G,KAAKs7D,OAAS,IAAI,EAAArZ,MACC,iBAARsZ,EAAP,OACIxa,EAAcwa,EAAIjZ,SAAS,QACV,oBAAZkZ,SAA2BA,QAAQ97D,UAAY87D,QAAQ97D,SAAS6Q,KAE7D,IAAM,IAAAkrD,WAAU,EAAAC,SAAV,CAAoBH,IAFpC,O,cAEIza,EAAM,SACZ9gD,KAAKyF,WAAWq7C,EAAKC,G,aAGJ,SAAM4a,MAAMJ,I,OACjB,SADK,SACUK,e,OAArB9a,EAAM,SACZ9gD,KAAKyF,WAAW,IAAIwM,WAAW6uC,GAAMC,G,oCAE7BlvC,YAAYgqD,OAAON,GAM7Bv7D,KAAKyF,WAAW81D,IAJV/3D,EAAM,IAAIyO,WAAWspD,EAAK/yB,GAAc,EAAG7pC,GAAU48D,EAAI9yB,YAC/DzoC,KAAKyF,WAAWjC,I,oDArBpB,S,YA6BM,YAAAiC,WAAR,SAAmBq2D,EAA4B/a,GAA/C,WACE,GAAI/gD,KAAKm7D,aACP,MAAM,IAAI35D,MAAM,uBAGlBxB,KAAKgjC,SAASK,MAAM,UAAW,sBAAsB,WAEnD,IAAMyV,EACF,EAAKlC,eAAeoC,eAAiB,EAAKpC,oBAAsCr0C,EACpF,EAAK+4D,OAAOza,KAAKib,EAAgBhjB,EAAkBiI,GAG/C,EAAKnK,eAAehQ,oBACtB,EAAKgQ,eAAehQ,mBAAmB,EAAK00B,OAAOz0B,OAGrD,EAAKk1B,cAAc,EAAKT,OAAOz0B,OAG/B,EAAKm1B,eAAiB,IAAI,EAAAlkB,cAAc,EAAKwjB,OAAOz0B,MAAO,EAAKuP,KAAM,EAAKpT,SAC7E,IAEAhjC,KAAKm7D,cAAe,CACtB,EAEM,YAAA5iD,IAAN,SAAUjB,G,8EACR,IAAKtX,KAAKm7D,aACR,MAAM,IAAI35D,MAAM,+BAGlB,MAAO,CAAP,EAAOxB,KAAKgjC,SAASK,MAAM,UAAW,eAAe,gD,0DAG7B,OAFhBgU,EAAer3C,KAAKi8D,2BAA2B3kD,GAE/B,GAAMtX,KAAKg8D,eAAerlB,QAAQ32C,KAAK42C,eAAgBS,I,OAE7E,OAFM6kB,EAAgB,SAEf,CAAP,EAAOl8D,KAAKm8D,aAAaD,I,kBAIrB,YAAAD,2BAAR,SAAmC3kD,GACjC,IAAM8kD,EAAkBp8D,KAAKs7D,OAAOz0B,MAAMsS,gBAI1C,GAAIz1C,MAAM+lC,QAAQnyB,IAChB,GAAIA,EAAO3Y,SAAWy9D,EAAgBz9D,OACpC,MAAM,IAAI6C,MAAM,iDAA0C46D,EAAgBz9D,OAAM,oBAAY2Y,EAAO3Y,aAKlG,CACH,GAAI2Y,EAAO/V,OAAS66D,EAAgBz9D,OAClC,MAAM,IAAI6C,MAAM,6CAAsC46D,EAAgBz9D,OAAM,oBAAY2Y,EAAO/V,OAKjG,IAFA,IAAM86D,EAAe,IAAI34D,MAAc4T,EAAO/V,MAC1C+6D,EAAoB,EACf34D,EAAI,EAAGA,EAAIy4D,EAAgBz9D,SAAUgF,EAAG,CAC/C,IAAM6U,EAASlB,EAAOxV,IAAIs6D,EAAgBz4D,IAC1C,IAAK6U,EACH,MAAM,IAAIhX,MAAM,qCAA8BnB,KAAI,MAEpDg8D,EAAaC,KAAuB9jD,C,CAGtClB,EAAS+kD,C,CAKX,GAAKr8D,KAAK+G,QAAQq0D,iBAA2D,IAAxCp7D,KAAK+G,QAAQq0D,gBAAgBz8D,QAAiBqB,KAAK+G,QAAQs0D,gBACrD,IAAvCr7D,KAAK+G,QAAQs0D,eAAe18D,OAqB9BqB,KAAKu8D,wBAAwBv8D,KAAK+G,QAAQs0D,eAAgB/jD,GAAQ,OArBtB,CAC5C,IAAMklD,EAAoBx8D,KAAKs7D,OAAOz0B,MAAM6P,kBACtC+lB,EAAcz8D,KAAKs7D,OAAOz0B,MAAME,YAEhCs0B,EAAiB,IAAI33D,MAAyB84D,EAAkB79D,QAEtE,IAASgF,EAAI,EAAGA,EAAI64D,EAAkB79D,SAAUgF,EAAG,CACjD,IAAM+4D,EAAaD,EAAYD,EAAkB74D,IACjD03D,EAAe13D,GAAK+4D,EAAWh7D,KAAM6H,MAAM0O,KAI3CjY,KAAK+G,QAAQq0D,gBAAiBr2D,KAAK23D,EAAWh7D,KAAM62C,YACpDv4C,KAAK+G,QAAQs0D,eAAgBt2D,KAAKuS,EAAO3T,GAAGsU,K,CAG9CjY,KAAKu8D,wBAAwBlB,EAAgB/jD,GAAQ,E,CAWvD,OAFAtX,KAAK28D,yBAAyB38D,KAAK+G,QAAQq0D,gBAAkB9jD,GAEtDA,CACT,EAEQ,YAAAqlD,yBAAR,SAAiCvB,EAAoCwB,GACnE,IAAK,IAAIj5D,EAAI,EAAGA,EAAIi5D,EAAYj+D,OAAQgF,IAAK,CAC3C,IAAMk5D,EAAezB,EAAgBz3D,GAC/Bm5D,EAAaF,EAAYj5D,GAAGjC,KAClC,GAAIm7D,IAAiBC,EACnB,MAAM,IAAIt7D,MAAM,uBAAgBmC,EAAC,0CAAkCk5D,EAAY,qBAAaC,G,CAGlG,EAEQ,YAAAP,wBAAR,SACIlB,EAA0CuB,EAAuBG,GACnE,IAAK,IAAIp5D,EAAI,EAAGA,EAAIi5D,EAAYj+D,OAAQgF,IAAK,CAC3C,IAAMq5D,EAAe3B,EAAe13D,GAC9Bs5D,EAAaL,EAAYj5D,GAAGsU,KAClC,IAAKjY,KAAKk9D,kBAAkBF,EAAcC,EAAYF,GACpD,MAAM,IAAIv7D,MAAM,uBAAgBmC,EAAC,4CAAoCq5D,EAAa18D,KAAK,KAAI,uBACvF28D,EAAW38D,KAAK,KAAI,K,CAG9B,EAEQ,YAAA48D,kBAAR,SAA0BF,EAAiCC,EAA+BF,GAExF,GAAIC,EAAar+D,SAAWs+D,EAAWt+D,OACrC,OAAO,EAGT,IAAK,IAAIgF,EAAI,EAAGA,EAAIq5D,EAAar+D,SAAUgF,EACzC,GAAIq5D,EAAar5D,KAAOs5D,EAAWt5D,MAAQo5D,GAAwC,IAApBC,EAAar5D,IAE1E,OAAO,EAIX,OAAO,CACT,EAEQ,YAAAw4D,aAAR,SAAqBD,GACnB,IAAMiB,EAAmBn9D,KAAKs7D,OAAOz0B,MAAMyS,iBAC3C,GAAI4iB,EAAcv9D,SAAWw+D,EAAiBx+D,OAC5C,MAAM,IAAI6C,MAAM,uEAIlB,IADA,IAAMuH,EAAS,IAAIhI,IACV4C,EAAI,EAAGA,EAAIw5D,EAAiBx+D,SAAUgF,EAC7CoF,EAAO5H,IAAIg8D,EAAiBx5D,GAAIu4D,EAAcv4D,IAGhD,OAAOoF,CACT,EAEQ,YAAAgzD,cAAR,SAAsBl1B,GACpB,IAAMn2B,EAAQm2B,EAAMsP,WACpBn2C,KAAKo2C,KAAO,IAAI1yC,MAAMgN,EAAM/R,QAE5B,IAAK,IAAIgF,EAAI,EAAGA,EAAI+M,EAAM/R,OAAQgF,IAChC3D,KAAKo2C,KAAKzyC,GAAK3D,KAAK42C,eAAex3C,QAAQsR,EAAM/M,GAAI3D,KAAKs7D,OAAOr0B,OAAQJ,EAE7E,EAaF,EAtOA,GAAa,EAAAnpC,QAAAA,C,ykDCxBb,cACA,aAEA,UACA,UACA,UAEO+C,EAAS,EAAAC,YAAYC,aAAaC,IAkCzC,aA+GE,WAIoBqX,EAIAvW,EAA+B07D,EACvCC,EAA+Cp3D,EAIvC4S,QAAA,IAAAA,IAAAA,EAAe,EAAAykD,KAAK3d,UATpB,KAAA1nC,KAAAA,EAIA,KAAAvW,KAAAA,EAA+B,KAAA07D,aAAAA,EACvC,KAAAC,kBAAAA,EAA+C,KAAAp3D,MAAAA,EAIvC,KAAA4S,OAAAA,EAClB7Y,KAAKuB,KAAO,EAAAiL,UAAU+wD,wBAAwBtlD,GAC9C,IAAM1W,EAAOvB,KAAKuB,KACZi8D,OAA0Bj7D,IAAjB66D,QAAoD76D,IAAtB86D,QAA6C96D,IAAV0D,EAEhF,QAAc1D,IAAV0D,GACEA,EAAMtH,SAAW4C,EACnB,MAAM,IAAIk8D,WAAW,yCAIzB,GAAa,WAAT/7D,EAAmB,CACrB,UAAca,IAAV0D,GAAyBvC,MAAM+lC,QAAQxjC,IAAWA,EAAMm1B,OAAM,SAAAz3B,GAAK,MAAa,iBAANA,CAAP,KACrE,MAAM,IAAIgqB,UAAU,kCAGlB6vC,IACFx9D,KAAKiG,MAAQ,IAAIvC,MAAcnC,G,KAE5B,CACL,QAAcgB,IAAV0D,EAAqB,CACvB,IAAM8hC,EAAc21B,EAAoBh8D,GACxC,KAAMuE,aAAiB8hC,GACrB,MAAM,IAAIpa,UAAU,+BAAwBoa,EAAY1nC,M,CAI5D,GAAIm9D,EAAO,CACT,IAAM1c,EAAM,IAAIjvC,YAAYtQ,EA2JpC,SAAgBG,GACd,OAAQA,GACN,IAAK,OACL,IAAK,OACL,IAAK,QACH,OAAO,EACT,IAAK,QACL,IAAK,SACH,OAAO,EACT,IAAK,QACL,IAAK,SACL,IAAK,UACH,OAAO,EACT,IAAK,UACH,OAAO,EACT,QACE,MAAM,IAAIF,MAAM,4CAAqCE,IAE3D,CA7K2Ci8D,CAAOj8D,IAC1C1B,KAAKiG,MAoMb,SAAoB23D,EAAyBl8D,GAC3C,OAAO,IAAKg8D,EAAoBh8D,GAAzB,CAAgCk8D,EACzC,CAtMqBC,CAAW/c,EAAKp/C,E,EAGnC,CAqJF,OA7SE,sBAAI,mBAAI,C,IAAR,WACE,QAAmBa,IAAfvC,KAAKiG,MAAqB,CAC5B,IAAMgU,EAAOja,KAAKo9D,aAAcp9D,KAAK6Y,QACrC,GAAIoB,EAAKtb,SAAWqB,KAAKuB,KACvB,MAAM,IAAIC,MAAM,8FAElBxB,KAAKiG,MAAQgU,C,CAEf,OAAOja,KAAKiG,KACd,E,gCAKA,sBAAI,yBAAU,C,IAAd,WACE,GAAkB,WAAdjG,KAAK0B,KACP,MAAM,IAAIisB,UAAU,2BAGtB,OAAO3tB,KAAKia,IACd,E,gCAMA,sBAAI,0BAAW,C,IAAf,WACE,OAAQja,KAAK0B,MACX,IAAK,QACL,IAAK,OACL,IAAK,SACL,IAAK,QACL,IAAK,QACL,IAAK,SACL,IAAK,OACH,OAAO1B,KAAKia,KAEd,QACE,MAAM,IAAI0T,UAAU,8EAE1B,E,gCAKA,sBAAI,wBAAS,C,IAAb,WACE,OAAQ3tB,KAAK0B,MACX,IAAK,UACL,IAAK,UACH,OAAO1B,KAAKia,KAEd,QACE,MAAM,IAAI0T,UAAU,6CAE1B,E,gCAMA,sBAAI,yBAAU,C,IAAd,WACE,GAAkB,WAAd3tB,KAAK0B,KACP,OAAO1B,KAAKia,KAEd,MAAM,IAAI0T,UAAU,qCACtB,E,gCAKA,YAAA7rB,IAAA,SAAI2uD,GACF,OAAOzwD,KAAKia,KAAK,EAAAzN,UAAU+I,gBAAgBk7C,EAASzwD,KAAKoK,SAC3D,EAKA,YAAAjJ,IAAA,SAAIsvD,EAA4B9wD,GAC9BK,KAAKia,KAAK,EAAAzN,UAAU+I,gBAAgBk7C,EAASzwD,KAAKoK,UAAYzK,CAChE,EAKM,YAAAk4C,QAAN,W,4GACqBt1C,IAAfvC,KAAKiG,MAAL,OACF,EAAAjG,KAAa,GAAMA,KAAKq9D,kBAAmBr9D,KAAK6Y,U,OAAhD,EAAK5S,MAAQ,S,iBAEf,MAAO,CAAP,EAAOjG,KAAKiG,O,QAYd,sBAAI,sBAAO,C,IAAX,WAIE,OAHKjG,KAAK89D,WACR99D,KAAK89D,SAAW,EAAAtxD,UAAUqO,eAAe7a,KAAKiY,OAEzCjY,KAAK89D,QACd,E,gCAqDO,EAAAh6D,UAAP,SAAiBi6D,GACf,IAAKA,EACH,MAAM,IAAIv8D,MAAM,+CAElB,IAAME,EAAO,EAAAgkB,UAAUC,wBAAwBo4C,EAAY/jD,UAGrDra,EAAQ,IAAIkE,EAFL,EAAA6hB,UAAUw0B,oBAAoB6jB,EAAY9lD,MAExBvW,GAE/B,GAAa,WAATA,EAGFq8D,EAAY9O,WAAYpkD,SAAQ,SAACmzD,EAAKr6D,GACpChE,EAAMsa,KAAKtW,IAAK,IAAAM,kBAAiB+5D,EACnC,SAEK,GACHD,EAAYjP,SAAqD,iBAAnCiP,EAAYjP,QAAQrmB,YAClDs1B,EAAYjP,QAAQrmB,WAAa,EAAG,CAItC,IAAMw1B,EAAWt+D,EAAMsa,KACjBikD,EACF,IAAIC,SAASJ,EAAYjP,QAAQ51C,OAAQ6kD,EAAYjP,QAAQtmB,WAAYu1B,EAAYjP,QAAQrmB,YAC3F21B,EAAcC,EAAYN,EAAY/jD,UACtC,EAAS+jD,EAAYjP,QAAQrmB,WAAa21B,EAEhD,GAAIL,EAAYjP,QAAQrmB,WAAa21B,GAAgB,EACnD,MAAM,IAAI58D,MAAM,yBAElB,GAAIy8D,EAASt/D,SAAW,EACtB,MAAM,IAAI6C,MAAM,0BAGlB,IAAK,IAAImC,EAAI,EAAGA,EAAI,EAAQA,IAAK,CAC/B,IAAMssC,EAAIquB,EAAUJ,EAAYH,EAAY/jD,SAAWrW,EAAIy6D,GAC3DH,EAASt6D,GAAKssC,C,MAEX,CAEL,IAAI3W,OAAK,EACT,OAAQykC,EAAY/jD,UAClB,KAAK,EAAA/Y,KAAKs9D,YAAYC,SAAS/7D,MAC7B62B,EAAQykC,EAAY7nC,UACpB,MACF,KAAK,EAAAj1B,KAAKs9D,YAAYC,SAASC,MAC/B,KAAK,EAAAx9D,KAAKs9D,YAAYC,SAASE,MAC/B,KAAK,EAAAz9D,KAAKs9D,YAAYC,SAASG,OAC/B,KAAK,EAAA19D,KAAKs9D,YAAYC,SAASI,KAC/B,KAAK,EAAA39D,KAAKs9D,YAAYC,SAASK,MAC/B,KAAK,EAAA59D,KAAKs9D,YAAYC,SAASM,KAC7BxlC,EAAQykC,EAAYgB,UACpB,MACF,KAAK,EAAA99D,KAAKs9D,YAAYC,SAASQ,MAC7B1lC,EAAQykC,EAAYkB,UACpB,MACF,KAAK,EAAAh+D,KAAKs9D,YAAYC,SAASU,OAC7B5lC,EAAQykC,EAAYoB,WACpB,MACF,KAAK,EAAAl+D,KAAKs9D,YAAYC,SAASY,OAC/B,KAAK,EAAAn+D,KAAKs9D,YAAYC,SAASa,OAC7B/lC,EAAQykC,EAAYuB,WACpB,MACF,QAEE,MAAM,IAAI99D,MAAM,oBAGpB,GAAI83B,QACF,MAAM,IAAI93B,MAAM,oDAGlB,IAAMyY,EAAOta,EAAMsa,KACnB,GAAIA,EAAKtb,SAAW26B,EAAM36B,OACxB,MAAM,IAAI6C,MAAM,yBAGlB,IAASmC,EAAI,EAAGA,EAAI21B,EAAM36B,OAAQgF,IAAK,CACrC,IAAM47D,EAAUjmC,EAAM31B,GAClB,UAAKL,OAAOi8D,GACdtlD,EAAKtW,GAAKJ,EAAag8D,EAASxB,EAAY/jD,UAE5CC,EAAKtW,GAAK47D,C,EAKhB,OAAO5/D,CACT,EASO,EAAA6/D,SAAP,SAAgBvlD,EAA2ChC,EAAyBvW,GAClF,OAAO,IAAImC,EAAOoU,EAAMvW,OAAMa,OAAWA,EAAW0X,EACtD,EAEO,EAAAlW,cAAP,SAAqB07D,GACnB,IAAKA,EACH,MAAM,IAAIj+D,MAAM,+CAElB,IAAMyW,EAAO,EAAAyN,UAAUw1B,wBAAwBukB,GACzC/9D,EAAO,EAAAgkB,UAAUC,wBAAwB85C,EAAUzlD,YAEnDra,EAAQ,IAAIkE,EAAOoU,EAAMvW,GAE/B,GAAa,WAATA,EAGF,IAAK,IAAIiC,EAAI,EAAGA,EAAI87D,EAAUvQ,mBAAoBvrD,IAChDhE,EAAMsa,KAAKtW,GAAK87D,EAAUxQ,WAAWtrD,QAGlC,GACH87D,EAAUzQ,gBAAuD,iBAA9ByQ,EAAU1Q,iBAAgC0Q,EAAU1Q,gBAAkB,EAAG,CAI9G,IAAMkP,EAAWt+D,EAAMsa,KACjBikD,EAAa,IAAIC,SACnBsB,EAAUzQ,eAAgB91C,OAAQumD,EAAUzQ,eAAgBxmB,WAAYi3B,EAAU1Q,iBAChFqP,EAAcC,EAAYoB,EAAUzlD,YACpC,EAASylD,EAAU1Q,gBAAkBqP,EAE3C,GAAIqB,EAAU1Q,gBAAkBqP,GAAgB,EAC9C,MAAM,IAAI58D,MAAM,yBAElB,GAAIy8D,EAASt/D,SAAW,EACtB,MAAM,IAAI6C,MAAM,0BAGlB,IAASmC,EAAI,EAAGA,EAAI,EAAQA,IAAK,CAC/B,IAAMssC,EAAIquB,EAAUJ,EAAYuB,EAAUzlD,WAAYrW,EAAIy6D,GAC1DH,EAASt6D,GAAKssC,C,EAGlB,OAAOtwC,CACT,EACF,EAjTA,GAuUA,SAAS0+D,EAAY38D,GACnB,OAAQA,GACN,KAAK,EAAAT,KAAKs9D,YAAYC,SAASK,MAC/B,KAAK,EAAA59D,KAAKs9D,YAAYC,SAASI,KAC/B,KAAK,EAAA39D,KAAKs9D,YAAYC,SAASM,KAC7B,OAAO,EACT,KAAK,EAAA79D,KAAKs9D,YAAYC,SAASG,OAC/B,KAAK,EAAA19D,KAAKs9D,YAAYC,SAASE,MAC7B,OAAO,EACT,KAAK,EAAAz9D,KAAKs9D,YAAYC,SAAS/7D,MAC/B,KAAK,EAAAxB,KAAKs9D,YAAYC,SAASC,MAC/B,KAAK,EAAAx9D,KAAKs9D,YAAYC,SAASY,OAC7B,OAAO,EACT,KAAK,EAAAn+D,KAAKs9D,YAAYC,SAASQ,MAC/B,KAAK,EAAA/9D,KAAKs9D,YAAYC,SAASU,OAC/B,KAAK,EAAAj+D,KAAKs9D,YAAYC,SAASa,OAC7B,OAAO,EACT,QACE,MAAM,IAAI79D,MAAM,4CAAqC,EAAAP,KAAKs9D,YAAYC,SAAS98D,KAErF,CAMA,SAASg8D,EAAoBh8D,GAC3B,OAAQA,GACN,IAAK,OACL,IAAK,QACH,OAAOuQ,WACT,IAAK,OACH,OAAOo5B,UACT,IAAK,QACH,OAAOD,WACT,IAAK,SACH,OAAOE,YACT,IAAK,QACH,OAAO7O,WACT,IAAK,SACH,OAAO1qB,YACT,IAAK,QACH,OAAO2tD,cACT,IAAK,UACH,OAAOnmD,aACT,IAAK,UACH,OAAOgyB,aACT,QAEE,MAAM,IAAI/pC,MAAM,qBAEtB,CAGA,SAAS+B,EAAaI,EAASjC,GAE7B,GAAIA,IAAS,EAAAT,KAAKs9D,YAAYC,SAASQ,OAASt9D,IAASjB,EAAOwiD,eAAe+b,OAC7E,GAAIr7D,EAAEg8D,mBAAmB,aAAeh8D,EAAEi8D,UAAU,YAClD,MAAM,IAAIjyC,UAAU,8BAEjB,IACHjsB,IAAS,EAAAT,KAAKs9D,YAAYC,SAASY,QAAU19D,IAASjB,EAAOwiD,eAAemc,QAC5E19D,IAAS,EAAAT,KAAKs9D,YAAYC,SAASa,QAAU39D,IAASjB,EAAOwiD,eAAeoc,OAK9E,MAAM,IAAI1xC,UAAU,2BAAoB,EAAA1sB,KAAKs9D,YAAYC,SAAS98D,KAJlE,GAAIiC,EAAEg8D,mBAAmB,aAAeh8D,EAAEi8D,SAAS,GACjD,MAAM,IAAIjyC,UAAU,0B,CAMxB,OAAOhqB,EAAEk8D,UACX,CAGA,SAASvB,EAAUwB,EAAgBp+D,EAAuD8mC,GACxF,OAAQ9mC,GACN,KAAK,EAAAT,KAAKs9D,YAAYC,SAASM,KAC/B,KAAK,EAAA79D,KAAKs9D,YAAYC,SAASK,MAC7B,OAAOiB,EAAKC,SAASv3B,GACvB,KAAK,EAAAvnC,KAAKs9D,YAAYC,SAASI,KAC7B,OAAOkB,EAAKE,QAAQx3B,GACtB,KAAK,EAAAvnC,KAAKs9D,YAAYC,SAASG,OAC7B,OAAOmB,EAAKG,UAAUz3B,GAAY,GACpC,KAAK,EAAAvnC,KAAKs9D,YAAYC,SAASE,MAC7B,OAAOoB,EAAKI,SAAS13B,GAAY,GACnC,KAAK,EAAAvnC,KAAKs9D,YAAYC,SAAS/7D,MAC7B,OAAOq9D,EAAKK,WAAW33B,GAAY,GACrC,KAAK,EAAAvnC,KAAKs9D,YAAYC,SAASC,MAC7B,OAAOqB,EAAKM,SAAS53B,GAAY,GACnC,KAAK,EAAAvnC,KAAKs9D,YAAYC,SAASY,OAC7B,OAAOU,EAAKO,UAAU73B,GAAY,GACpC,KAAK,EAAAvnC,KAAKs9D,YAAYC,SAASQ,MAC7B,OAAOz7D,EACH,UAAK+8D,SAASR,EAAKO,UAAU73B,GAAY,GAAOs3B,EAAKO,UAAU73B,EAAa,GAAG,IAAO,GAAQ9mC,GACpG,KAAK,EAAAT,KAAKs9D,YAAYC,SAASU,OAC7B,OAAOY,EAAKS,WAAW/3B,GAAY,GACrC,KAAK,EAAAvnC,KAAKs9D,YAAYC,SAASa,OAC7B,OAAO97D,EACH,UAAK+8D,SAASR,EAAKO,UAAU73B,GAAY,GAAOs3B,EAAKO,UAAU73B,EAAa,GAAG,IAAO,GAAO9mC,GACnG,QACE,MAAM,IAAIF,MAAM,6CAAsC,EAAAP,KAAKs9D,YAAYC,SAAS98D,KAEtF,CA7aa,EAAAmC,OAAAA,C,+/BCzCb,cACA,aAIA,UACA,UAMA,4BAAiCyT,G,IAAkB,wDACjD,IAAKA,GAAUA,EAAO3Y,SAAW6hE,EAAmB7hE,OAClD,OAAO,EAET,IAAK,IAAIgF,EAAI,EAAGA,EAAI2T,EAAO3Y,OAAQgF,IACjC,IAAK2T,EAAO3T,GAAGsU,MAAQX,EAAO3T,GAAGsU,KAAKtZ,SAAW6hE,EAAmB78D,GAClE,OAAO,EAGX,OAAO,CACT,EAGA,kBAAuB88D,EAAeC,GACpC,IAAKD,EACH,MAAM,IAAIj/D,MAAqB,iBAARk/D,EAAmBA,EAAMA,IAEpD,EAEA,8BAsBA,QAfS,EAAA92D,YAAP,SACI+2D,EAEAC,GAEF,GAAID,EAAGhiE,SAAWiiE,EAAGjiE,OACnB,OAAO,EAET,IAAK,IAAIgF,EAAI,EAAGA,EAAIg9D,EAAGhiE,OAAQgF,IAC7B,GAAIg9D,EAAGh9D,KAAOi9D,EAAGj9D,GACf,OAAO,EAGX,OAAO,CACT,EACF,EAtBA,GAAa,EAAAgG,UAAAA,EAwBb,8BAkDA,QA3CS,EAAAk3D,sBAAP,SAA6BC,EAA0BC,GAYrD,MAAO,CAPqB,IAAjBD,EAAMniE,OAAgB,CAAC,EAAGmiE,EAAM,IAAMA,EAKrB,IAAjBC,EAAMpiE,OAAgB,CAACoiE,EAAM,GAAI,GAAKA,EAGnD,EASO,EAAAC,uBAAP,SAA8B/7C,EAAuBI,EAAeC,GAEpD,IAAVD,GAEFJ,EAAYkmB,OAAOlmB,EAAYtmB,OAAS,EAAG,GAG/B,IAAV2mB,GACFL,EAAYylB,KAEhB,EAQO,EAAAu2B,gBAAP,SAAuBnvD,EAAqB5H,GAC1C,OAAQ4H,EAAE,KAAO5H,EAAE,QAAM3H,EAAY,CAACuP,EAAE,GAAI5H,EAAE,GAChD,EACF,EAlDA,GAAa,EAAAg3D,WAAAA,EAoDb,8BA+LA,QAvLS,EAAA97C,UAAP,SAAiB+7C,EAA0BC,EAA0BC,G,WAAA,IAAAA,IAAAA,GAAA,GACnE,IAAMxsC,EAAQssC,EAAMxiE,OACdm2B,EAAQssC,EAAMziE,OACpB,GAAc,IAAVk2B,EACF,OAAOusC,EAET,GAAc,IAAVtsC,EACF,OAAOqsC,EAET,IAAMG,EAAQziE,KAAKu/B,IAAI+iC,EAAMxiE,OAAQyiE,EAAMziE,QACrC4iE,EAAQ,IAAI79D,MAAc49D,GAGhC,GAAID,EAAU,CACZ,GAAIxsC,EAAQ,GAAKC,EAAQ,EACvB,OAEF,IAAM0sC,EACFN,EAAWD,gBAAgB,CAACE,EAAMtsC,EAAQ,GAAIssC,EAAMtsC,EAAQ,IAAK,CAACusC,EAAMtsC,EAAQ,GAAIssC,EAAMtsC,EAAQ,KACtG,QAAqBvyB,IAAjBi/D,EACF,OAEF,IAAuCA,EAAY,GAAlDD,EAAMD,EAAQ,GAAE,KAAEC,EAAMD,EAAQ,GAAE,I,CAGrC,IAAK,IAAI39D,EAAI09D,EAAW,EAAI,EAAG19D,GAAK29D,EAAO39D,IAAK,CAC9C,IAAM89D,EAAO5sC,EAAQlxB,EAAI,EAAI,EAAIw9D,EAAMtsC,EAAQlxB,GACzC+9D,EAAO5sC,EAAQnxB,EAAI,EAAI,EAAIy9D,EAAMtsC,EAAQnxB,GAE/C,GAAI89D,IAASC,GAAQD,EAAO,GAAKC,EAAO,EACtC,OAEFH,EAAMD,EAAQ39D,GAAK9E,KAAKu/B,IAAIqjC,EAAMC,E,CAGpC,OAAOH,CACT,EAQO,EAAA5yD,MAAP,SAAagzD,EAAuCC,GAIlD,IAAMC,EAAkB,IAAIn+D,MAAMk+D,EAAcjjE,QAEhD,OADAoN,EAAc+1D,UAAUH,EAAoBC,EAAeC,GACpDA,CACT,EASO,EAAAC,UAAP,SAAiBH,EAAuCC,EAAkCC,GAKxF,IADA,IAAMnsD,EAAYisD,EAAmBhjE,OAASijE,EAAcjjE,OACnDgF,EAAI,EAAGA,EAAIi+D,EAAcjjE,OAAQgF,IACxCk+D,EAAgBl+D,GAAKg+D,EAAmBjsD,EAAY/R,GAAKi+D,EAAcj+D,EAE3E,EAUO,EAAAo+D,KAAP,SACIjwD,EAAW5H,EAAWg9B,EAA+D86B,EACrFC,GACF,IAAMh9C,EAAclZ,EAAcqZ,UAAUtT,EAAEmG,KAAM/N,EAAE+N,MAEtD,GAAIgN,EAAa,CACf,GAAI+8C,IAAYx1D,EAAUwY,SAASC,EAAanT,EAAEmG,MAEhD,OAGF,IAAM1W,EAAOiL,EAAUjL,KAAK0jB,GACtBjT,EAAIgwD,EAAUlwD,EAAI,IAAI,EAAAjO,OAAOohB,EAAag9C,GAAcnwD,EAAEpQ,MAGhE,GAA2B,IAAvBujB,EAAYtmB,OACdqT,EAAE7Q,IAAI,GAAI+lC,EAAGp1B,EAAEhQ,IAAI,IAAeoI,EAAEpI,IAAI,UAIrC,CACH,IAAMogE,EAAgB,IAAIx+D,MAAcuhB,EAAYtmB,QAC9CwjE,EAAmB,IAAIz+D,MAAMoO,EAAEmG,KAAKtZ,QACpCyjE,EAAmB,IAAI1+D,MAAMwG,EAAE+N,KAAKtZ,QACtC0jE,EAAsB,EACtBC,EAAsB,EACtBC,GAAY,EACZC,GAAY,EACM,IAAlB1wD,EAAEmG,KAAKtZ,SACT0jE,EAAOvwD,EAAEhQ,IAAI,IACbygE,GAAY,GAEQ,IAAlBr4D,EAAE+N,KAAKtZ,SACT2jE,EAAOp4D,EAAEpI,IAAI,IACb0gE,GAAY,GAGd,IADA,IAAIC,OAAI,EACC9+D,EAAI,EAAGA,EAAIpC,EAAMoC,IAAK,CAE7B8+D,EAAO9+D,EACP,IAAK,IAAI67B,EAAIva,EAAYtmB,OAAS,EAAG6gC,GAAK,EAAGA,IAC3C0iC,EAAc1iC,GAAKijC,EAAOx9C,EAAYua,GACtCijC,EAAO5jE,KAAK0f,MAAMkkD,EAAOx9C,EAAYua,IAGlC+iC,IAEHx2D,EAAc+1D,UAAUI,EAAepwD,EAAEmG,KAAMkqD,GAC/CE,EAAOvwD,EAAEhQ,IAAIqgE,IAEVK,IACHz2D,EAAc+1D,UAAUI,EAAeh4D,EAAE+N,KAAMmqD,GAC/CE,EAAOp4D,EAAEpI,IAAIsgE,IAGfpwD,EAAE7Q,IAAI+gE,EAAeh7B,EAAGm7B,EAAMC,G,EAIlC,OAAOtwD,C,CAIX,EAOO,EAAA0wD,iBAAP,SAAwBn5D,EAA0Bo5D,GAEhD,IAAMztC,EAAY3rB,EAAM5K,OAClBikE,EAAYD,EAAWhkE,OAC7B,GAAIu2B,EAAY0tC,EACd,OAAO,EAET,IAAK,IAAIj/D,EAAI,EAAGA,GAAKuxB,EAAWvxB,IAC9B,GAA6B,IAAzB4F,EAAM2rB,EAAYvxB,IAAY4F,EAAM2rB,EAAYvxB,KAAOg/D,EAAWC,EAAYj/D,GAChF,OAAO,EAGX,OAAO,CACT,EASO,EAAAqI,iBAAP,SAAwBka,EAA+BjB,GAGrD,IAFA,IAAMrZ,EAASsa,EAAWvnB,OACpBsZ,EAAiB,GACdtU,EAAI,EAAGA,EAAIiI,EAAQjI,IAAK,CAC/B,IAAM23B,EAAM1vB,EAAS,EAAIjI,EACnBmO,EAAIoU,EAAWoV,IAAQ,GACnBrW,EAAYA,EAAYtmB,OAAS,EAAIgF,IAAM,GAC7C,GAAW,IAANmO,GACXmG,EAAK4qD,QAAQvnC,E,CAGjB,OAAOrjB,CACT,EACF,EA/LA,GAAa,EAAAlM,cAAAA,EAmMb,2BACI+2D,EAAoCp5D,EAAoCq5D,EAAqBC,EAC7FC,GACF,GAAID,EAAc,GAAKA,GAAet5D,EAAO/K,OAC3C,MAAM,IAAI6C,MAAM,6BAElB,GAAIuhE,EAAc,GAAKA,GAAeD,EAAOnkE,OAC3C,MAAM,IAAI6C,MAAM,6BAElB,GAAIwhE,EAAcC,EAAYv5D,EAAO/K,OACnC,MAAM,IAAI6C,MAAM,kDAElB,GAAIuhE,EAAcE,EAAYH,EAAOnkE,OACnC,MAAM,IAAI6C,MAAM,4CAGlB,IAAK,IAAI29B,EAAS,EAAGA,EAAS8jC,EAAW9jC,IACvC2jC,EAAOC,EAAc5jC,GAAUz1B,EAAOs5D,EAAc7jC,EAExD,EAEA,8BA+CA,QA3CS,EAAAzO,qBAAP,SACIwyC,EAA8BC,EAAoBC,EAA+BC,EACjFC,GACF,GAAyB,IAArBJ,EAAUvkE,QAAsC,IAAtBykE,EAAWzkE,OACvC,MAAM,IAAI6C,MAAM,8BAGlB,IAAI+hE,EACAC,EACAC,EAEAN,GACFI,EAAIL,EAAU,GACdM,EAAIN,EAAU,KAEdK,EAAIL,EAAU,GACdM,EAAIN,EAAU,IAGhB,IAAIQ,GAAQ,EAUZ,GARIL,GACFI,EAAIL,EAAW,GACfM,EAAO,IAEPD,EAAIL,EAAW,GACfM,EAAO,GAGLN,EAAWM,KAAUF,EACvB,MAAM,IAAIhiE,MAAM,sBAGlB,GAAI+hE,GAAK,GAAKE,GAAK,GAAKD,GAAK,EAC3B,MAAM,IAAIhiE,MAAM,2BAGlB,GAAI8hE,IAAcv3D,EAAc22D,iBAAiBY,EAAW,CAACC,EAAGE,IAC9D,MAAM,IAAIjiE,MAAM,0CAGlB,MAAO,CAAC+hE,EAAGE,EAAGD,EAChB,EACF,EA/CA,GAAa,EAAA/yC,SAAAA,EAiDb,8BAgGA,QA/FS,EAAA9K,wBAAP,SAA+Bg+C,GAE7B,OAAQA,GACN,KAAK,EAAA1iE,KAAKs9D,YAAYC,SAASI,KAC7B,MAAO,OACT,KAAK,EAAA39D,KAAKs9D,YAAYC,SAASK,MAC7B,MAAO,QACT,KAAK,EAAA59D,KAAKs9D,YAAYC,SAASM,KAC7B,MAAO,OACT,KAAK,EAAA79D,KAAKs9D,YAAYC,SAASE,MAC7B,MAAO,QACT,KAAK,EAAAz9D,KAAKs9D,YAAYC,SAASG,OAC7B,MAAO,SACT,KAAK,EAAA19D,KAAKs9D,YAAYC,SAASC,MAC7B,MAAO,QACT,KAAK,EAAAx9D,KAAKs9D,YAAYC,SAASY,OAC7B,MAAO,SACT,KAAK,EAAAn+D,KAAKs9D,YAAYC,SAAS/7D,MAC7B,MAAO,UACT,KAAK,EAAAxB,KAAKs9D,YAAYC,SAASU,OAC7B,MAAO,UACT,KAAK,EAAAj+D,KAAKs9D,YAAYC,SAAS77D,OAC7B,MAAO,SAIT,KAAK,EAAA1B,KAAKs9D,YAAYC,SAASQ,MAC7B,MAAO,QACT,KAAK,EAAA/9D,KAAKs9D,YAAYC,SAASa,OAC7B,MAAO,SAET,QACE,MAAM,IAAI79D,MAAM,iCAA0B,EAAAP,KAAKs9D,YAAYC,SAASmF,KAE1E,EAEO,EAAAC,2BAAP,SAAkCliE,GAChC,OAAQA,GACN,IAAK,OACH,OAAO,EAAAT,KAAKs9D,YAAYC,SAASI,KACnC,IAAK,QACH,OAAO,EAAA39D,KAAKs9D,YAAYC,SAASK,MACnC,IAAK,OACH,OAAO,EAAA59D,KAAKs9D,YAAYC,SAASM,KACnC,IAAK,QACH,OAAO,EAAA79D,KAAKs9D,YAAYC,SAASE,MACnC,IAAK,SACH,OAAO,EAAAz9D,KAAKs9D,YAAYC,SAASG,OACnC,IAAK,QACH,OAAO,EAAA19D,KAAKs9D,YAAYC,SAASC,MACnC,IAAK,SACH,OAAO,EAAAx9D,KAAKs9D,YAAYC,SAASY,OACnC,IAAK,UACH,OAAO,EAAAn+D,KAAKs9D,YAAYC,SAAS/7D,MACnC,IAAK,UACH,OAAO,EAAAxB,KAAKs9D,YAAYC,SAASU,OACnC,IAAK,SACH,OAAO,EAAAj+D,KAAKs9D,YAAYC,SAAS77D,OACnC,IAAK,QACH,OAAO,EAAA1B,KAAKs9D,YAAYC,SAASQ,MACnC,IAAK,SACH,OAAO,EAAA/9D,KAAKs9D,YAAYC,SAASa,OAEnC,QACE,MAAM,IAAI79D,MAAM,iCAA0BE,IAEhD,EAEO,EAAAw4C,oBAAP,SAA2BjiC,GAEzB,OAAOA,EAAK7X,KAAI,SAAAiM,GAAK,iBAAK/I,OAAO+I,GAAKA,EAAEwzD,WAAaxzD,CAAhC,GACvB,EAEO,EAAAisC,yBAAP,SAAgCoC,GAC9B,MAAO,CACLnC,WAAY7yB,EAAUC,wBAAwB+0B,EAAUI,UACxDvxC,MAAO,CAAC0O,KAAMyN,EAAUw0B,oBAAoBQ,EAAUnxC,MAAO+xB,IAAKl7B,KAAI,SAAAiM,GAAK,OAAAA,EAAE2uC,QAAF,MAE/E,EAEO,EAAAE,wBAAP,SAA+B1iC,GAE7B,IADA,IAAMP,EAAO,GACJtU,EAAI,EAAGA,EAAI6U,EAAOq2C,aAAclrD,IACvCsU,EAAKlT,KAAK1B,EAASE,aAAaiV,EAAOP,KAAKtU,KAE9C,OAAOsU,CACT,EAEO,EAAA2gC,8BAAP,SAAqCroC,GAEnC,IADA,IAAM1P,EAAa,GACV8C,EAAI,EAAGA,EAAI4M,EAAK+qC,mBAAoB33C,IAC3C9C,EAAWkE,KAAKwL,EAAK1P,WAAW8C,IAElC,OAAO9C,CACT,EACF,EAhGA,GAAa,EAAA6kB,UAAAA,EAkGb,8BAeA,QAXS,EAAAniB,aAAP,SAAoB0sC,EAAiC4zB,GACnD,OAAI,UAAKvgE,OAAO2sC,GACPA,EAAE4vB,WACA5vB,aAAa,EAAAwR,YAAYqiB,KAC3B,UAAKC,UAAU,CAACC,IAAK/zB,EAAE+zB,IAAKC,KAAMh0B,EAAEg0B,KAAMJ,SAAUA,SAAAA,IAAoBhE,WAE1E5vB,CACT,EACO,EAAA3sC,OAAP,SAAc2sC,GACZ,OAAO,UAAK3sC,OAAO2sC,IAAMA,aAAa,EAAAwR,YAAYqiB,IACpD,EACF,EAfA,GAAa,EAAAzgE,SAAAA,EAiBb,8BA0UA,QAzUS,EAAA9B,KAAP,SAAY0W,GACV,OAAOzL,EAAU03D,0BAA0BjsD,EAAM,EAAGA,EAAKtZ,OAC3D,EAGO,EAAA++B,kBAAP,SAAyBzlB,EAAyBgO,GAChD,GAAIA,EAAO,GAAKA,EAAOhO,EAAKtZ,OAC1B,MAAM,IAAI6C,MAAM,+BAAwBykB,EAAI,gDAAwChO,EAAKtZ,OAAM,iBAEjG,OAAO6N,EAAU03D,0BAA0BjsD,EAAMgO,EAAMhO,EAAKtZ,OAC9D,EAGO,EAAA6+B,gBAAP,SAAuBvlB,EAAyBgO,GAC9C,GAAIA,EAAO,GAAKA,EAAOhO,EAAKtZ,OAC1B,MAAM,IAAI6C,MAAM,+BAAwBykB,EAAI,8CAAsChO,EAAKtZ,OAAM,iBAE/F,OAAO6N,EAAU03D,0BAA0BjsD,EAAM,EAAGgO,EACtD,EAEO,EAAAi+C,0BAAP,SAAiCjsD,EAAyB2f,EAAe4E,GAEvE,IADA,IAAIj7B,EAAO,EACFoC,EAAIi0B,EAAOj0B,EAAI64B,EAAK74B,IAAK,CAGhC,GAAIsU,EAAKtU,IAAM,EACb,MAAM,IAAInC,MAEN,sHAEND,GAAQ0W,EAAKtU,E,CAEf,OAAOpC,CACT,EAEO,EAAAsZ,eAAP,SAAsB5C,GACpB,IAAM9N,EAAO8N,EAAKtZ,OAClB,GAAa,IAATwL,EACF,MAAO,GACF,GAAa,IAATA,EACT,MAAO,CAAC,GAEV,IAAMC,EAAU,IAAI1G,MAAMyG,GAC1BC,EAAQD,EAAO,GAAK,EACpBC,EAAQD,EAAO,GAAK8N,EAAK9N,EAAO,GAChC,IAAK,IAAIxG,EAAIwG,EAAO,EAAGxG,GAAK,IAAKA,EAC/ByG,EAAQzG,GAAKyG,EAAQzG,EAAI,GAAKsU,EAAKtU,EAAI,GAEzC,OAAOyG,CACT,EAEO,EAAA4F,UAAP,SAAiBiI,GAEf,OADaA,EAAKlK,QACNsB,SACd,EAEO,EAAAkG,gBAAP,SAAuBk7C,EAA4BrmD,EAA4B6b,QAChE1jB,IAAT0jB,IACFA,EAAOwqC,EAAQ9xD,QAGjB,IADA,IAAIwgC,EAAS,EACJx7B,EAAI,EAAGA,EAAIsiB,IAAQtiB,EAC1Bw7B,GAAU/0B,EAAQzG,GAAK8sD,EAAQ9sD,GAEjC,OAAOw7B,CACT,EAEO,EAAA7pB,gBAAP,SAAuB6pB,EAAgB/0B,GACrC,IAAMD,EAAOC,EAAQzL,OACrB,GAAa,IAATwL,EACF,MAAO,GACF,GAAa,IAATA,EACT,MAAO,CAACg1B,EAAS/0B,EAAQ,IAG3B,IADA,IAAMqmD,EAAoB,IAAI/sD,MAAM0G,EAAQzL,QACnCgF,EAAI,EAAGA,EAAI8sD,EAAQ9xD,OAAS,IAAKgF,EACxC8sD,EAAQ9sD,GAAK9E,KAAK0f,MAAM4gB,EAAS/0B,EAAQzG,IACzCw7B,GAAUsxB,EAAQ9sD,GAAKyG,EAAQzG,GAGjC,OADA8sD,EAAQA,EAAQ9xD,OAAS,GAAKwgC,EACvBsxB,CACT,EAKO,EAAAjhC,cAAP,SAAqBvJ,EAAckC,GACjC,GAAIlC,GAAQkC,GAAclC,GAAQkC,EAChC,MAAM,IAAI3mB,MAAM,wCAElB,OAAOykB,EAAO,EAAIA,EAAOkC,EAAalC,CACxC,EAEO,EAAA8T,cAAP,SAAqBJ,EAAyBxR,GAA9C,WACE,OAAOwR,EAAKv5B,KAAI,SAAA8mB,GAAK,SAAKsI,cAActI,EAAGiB,EAAtB,GACvB,EAUO,EAAAg8C,eAAP,SAAsBx1D,EAAiBsJ,EAAyBmsD,GAC9D,GAAoB,IAAhBnsD,EAAKtZ,QAAiC,IAAjBgQ,EAAMhQ,OAC7B,MAAM,IAAI6C,MAAM,oDAElB,QAA0Be,IAAtB6hE,EACFA,EAAoBnsD,EAAKtZ,YAEzB,GAAIylE,GAAqB,GAAKA,EAAoBnsD,EAAKtZ,OACrD,MAAM,IAAI6C,MAAM,kCAIpB,IAAK,IAAI04B,EAAIkqC,EAAoB,EAAGlqC,GAAK,IACvCvrB,EAAMurB,OACFvrB,EAAMurB,GAAKjiB,EAAKiiB,OAFwBA,EAK5CvrB,EAAMurB,GAAK,CAEf,EAcO,EAAAY,sBAAP,SAA6BupC,EAAiCC,GAE5D,GAA0B,IAAtBA,EAAW3lE,OAAc,CAC3B,GAA4B,IAAxB0lE,EAAa1lE,QAAiD,IAAjC6N,EAAUjL,KAAK8iE,GAC9C,MAAO,GAEP,MAAM,IAAI7iE,MAAM,oC,CAQpB,IAJA,IAAM+iE,EAAQD,EAAW3lE,OACnB6b,EAAe,IAAI9W,MAAc6gE,GACnCC,GAAoB,EACpBC,EAAgB,EACX9gE,EAAI,EAAGA,EAAI4gE,EAAO5gE,IAAK,CAC9B,GAAI2gE,EAAW3gE,IAAM,EACnB,MAAM,IAAInC,MAAM,qDAElB,IAAuB,IAAnB8iE,EAAW3gE,GAAW,CACxB,IAA0B,IAAtB6gE,EACF,MAAM,IAAIhjE,MAAM,kDAElBgjE,EAAmB7gE,C,KACd,CACL,GAAsB,IAAlB2gE,EAAW3gE,GAAU,CACvB,GAAIA,GAAK0gE,EAAa1lE,OACpB,MAAM,IAAI6C,MAAM,gFAElBgZ,EAAa7W,GAAK0gE,EAAa1gE,E,MAE/B6W,EAAa7W,GAAK2gE,EAAW3gE,GAE/B8gE,GAAiBjqD,EAAa7W,E,EAIlC,IAAM+gE,EAAgBl4D,EAAUjL,KAAK8iE,GACrC,IAA0B,IAAtBG,EAAyB,CAC3B,GAAIE,EAAgBD,GAAkB,EACpC,MAAM,IAAIjjE,MAAM,oFACZ6iE,EAAY,4BAAoBC,EAAU,MAEhD9pD,EAAagqD,GAAoBE,EAAgBD,C,MAIjD,GAAIA,IAAkBC,EACpB,MAAM,IAAIljE,MAAM,2DAGpB,OAAOgZ,CACT,EAQO,EAAA0lB,gBAAP,SAAuBpuB,EAAsB0b,GAC3C,OAAIA,EACKA,EAAKptB,KAAI,SAAC0S,GAAM,OAAAhB,EAAEgB,EAAF,IAEhBhB,EAAE/D,QAAQsB,SAErB,EAOO,EAAA8mB,SAAP,SAAgBle,EAAyB0sD,GACvC,IAAMx6D,EAAO8N,EAAKtZ,OAClB,OAAOsZ,EAAK7X,KAAI,SAAC0S,EAAGnP,GAAM,OAAAmP,EAAI6xD,EAAIhhE,GAAKghE,EAAIhhE,EAAIwG,EAArB,GAC5B,EAOO,EAAA6a,SAAP,SAAgB4/C,EAA2BC,GACzC,OAAID,EAAOjmE,SAAWkmE,EAAOlmE,QAGtBimE,EAAOxpC,OAAM,SAACtoB,EAAGnP,GAAM,OAAAmP,IAAM+xD,EAAOlhE,EAAb,GAChC,EAMO,EAAA45D,wBAAP,SAA+BtlD,G,QAC7B,GAAIA,EAAKtZ,OAAS,EAChB,MAAM,IAAIgvB,UAAU,mDAEtB,IAAIpsB,EAAO,E,IACX,IAAgB,QAAA0W,GAAI,8BAAE,CAAjB,IAAMg4B,EAAC,QACV,IAAK3xC,OAAOC,UAAU0xC,GACpB,MAAM,IAAItiB,UAAU,yBAAkBsiB,EAAC,uBAEzC,GAAIA,EAAI,GAAKA,EAAI,WACf,MAAM,IAAItiB,UAAU,gCAAyBsiB,EAAC,oBAEhD1uC,GAAQ0uC,C,mGAEV,OAAO1uC,CACT,EAOO,EAAAktB,aAAP,SAAoBxW,EAAyBgO,GACvCA,EAAO,IACTA,GAAQhO,EAAKtZ,QAEf,IAAMmmE,EAAQ7sD,EAAKmhB,QAAO,SAAClS,EAAG69C,GAAM,OAAA79C,EAAI69C,CAAJ,GAAO,GACrCC,EAAQ/sD,EAAKlK,MAAMkY,GAAMmT,QAAO,SAAClS,EAAG69C,GAAM,OAAA79C,EAAI69C,CAAJ,GAAO,GAGvD,MAFmB,CAACD,EAAQE,EAAOA,EAGrC,EAOO,EAAAl2D,aAAP,SAAoBmJ,EAAyB0hB,GAC3C,IAAMnL,EAAa,IAAI9qB,MAGvBi2B,EAAOntB,EAAUutB,cAAcJ,EAAM1hB,EAAKtZ,QAE1C,IAAK,IAAIgF,EAAI,EAAGA,EAAIsU,EAAKtZ,OAAQgF,IAAK,CACpC,IAAMshE,EAAgBtrC,EAAK/sB,QAAQjJ,IAAM,EACzC,GAAIshE,GAA6B,IAAZhtD,EAAKtU,GACxB,MAAM,IAAInC,MAAM,6CAGG,IAAhBm4B,EAAKh7B,QAAgBsZ,EAAKtU,GAAK,GAAOg2B,EAAKh7B,OAAS,IAAMsmE,IAC7Dz2C,EAAWzpB,KAAKkT,EAAKtU,G,CAIzB,OAAO6qB,CACT,EAOO,EAAAwT,eAAP,SAAsB/pB,EAAyB0hB,GAC7C,IAAMnL,EAAa,IAAI9qB,MAAcuU,EAAKtZ,OAASg7B,EAAKh7B,QAGxD6vB,EAAWxI,KAAK,GAGhB,IAAK,IAAIriB,EAAI,EAAGA,EAAIg2B,EAAKh7B,OAAQgF,IAAK,CACpC,IAAMsiB,EAAOzZ,EAAUgjB,cAAcmK,EAAKh2B,GAAI6qB,EAAW7vB,QACzD,GAAIsnB,GAAQuI,EAAW7vB,OACrB,MAAM,IAAI6C,MAAM,mCAElB,GAAyB,IAArBgtB,EAAWvI,GACb,MAAM,IAAIzkB,MAAM,+BAGlBgtB,EAAWvI,GAAQ,C,CAIrB,IAAIi/C,EAAoB,EACxB,IAASvhE,EAAI,EAAGA,EAAI6qB,EAAW7vB,OAAQgF,IACf,IAAlB6qB,EAAW7qB,KACb6qB,EAAW7qB,GAAKsU,EAAKitD,MAMzB,GAAIA,IAAsBjtD,EAAKtZ,OAC7B,MAAM,IAAI6C,MAAM,qDAGlB,OAAOgtB,CACT,EACF,EA1UA,GAAa,EAAAhiB,UAAAA,EA6Ub,8BAwFA,QAtFS,EAAA24D,IAAP,SACIrC,EAAoCp5D,EAAoCq5D,EAAqBC,EAC7FC,GACF,GAAID,EAAc,GAAKA,GAAet5D,EAAO/K,OAC3C,MAAM,IAAI6C,MAAM,6BAElB,GAAIuhE,EAAc,GAAKA,GAAeD,EAAOnkE,OAC3C,MAAM,IAAI6C,MAAM,6BAElB,GAAIwhE,EAAcC,EAAYv5D,EAAO/K,OACnC,MAAM,IAAI6C,MAAM,kDAElB,GAAIuhE,EAAcE,EAAYH,EAAOnkE,OACnC,MAAM,IAAI6C,MAAM,4CAGlB,IAAK,IAAI29B,EAAS,EAAGA,EAAS8jC,EAAW9jC,IACvC2jC,EAAOC,EAAc5jC,IAAWtgC,KAAKyhB,IAAI5W,EAAOs5D,EAAc7jC,GAAS,EAE3E,EAGO,EAAAimC,KAAP,SACItC,EAAoCp5D,EAAoCq5D,EAAqBC,EAC7FC,EAAmB7yC,GACrB,GAAI4yC,EAAc,GAAKA,GAAet5D,EAAO/K,OAC3C,MAAM,IAAI6C,MAAM,6BAElB,GAAIuhE,EAAc,GAAKA,GAAeD,EAAOnkE,OAC3C,MAAM,IAAI6C,MAAM,6BAElB,GAAIwhE,EAAcC,EAAYv5D,EAAO/K,OACnC,MAAM,IAAI6C,MAAM,kDAElB,GAAIuhE,EAAcE,EAAYH,EAAOnkE,OACnC,MAAM,IAAI6C,MAAM,4CAGlB,IAAK,IAAI29B,EAAS,EAAGA,EAAS8jC,EAAW9jC,IACvC2jC,EAAOC,EAAc5jC,IAAY/O,EAAQ1mB,EAAOs5D,EAAc7jC,EAElE,EAGO,EAAAkmC,KAAP,SACIvC,EAAoCp5D,EAAoCq5D,EAAqBC,EAC7FC,EAAmB/4D,GACrB,GAAI84D,EAAc,GAAKA,GAAet5D,EAAO/K,OAC3C,MAAM,IAAI6C,MAAM,6BAElB,GAAIuhE,EAAc,GAAKA,GAAeD,EAAOnkE,OAC3C,MAAM,IAAI6C,MAAM,6BAElB,GAAIwhE,EAAcC,EAAYv5D,EAAO/K,OACnC,MAAM,IAAI6C,MAAM,kDAElB,GAAIuhE,EAAcE,EAAYH,EAAOnkE,OACnC,MAAM,IAAI6C,MAAM,4CAGlB,IAAK,IAAI29B,EAAS,EAAGA,EAAS8jC,EAAW9jC,IACvC2jC,EAAOC,EAAc5jC,GAAUtgC,KAAKyhB,IAAI5W,EAAOs5D,EAAc7jC,GAASj1B,EAE1E,EAGO,EAAAyM,IAAP,SACImsD,EAAoCp5D,EAAoCq5D,EAAqBC,EAC7FC,GACF,GAAID,EAAc,GAAKA,GAAet5D,EAAO/K,OAC3C,MAAM,IAAI6C,MAAM,6BAElB,GAAIuhE,EAAc,GAAKA,GAAeD,EAAOnkE,OAC3C,MAAM,IAAI6C,MAAM,6BAElB,GAAIwhE,EAAcC,EAAYv5D,EAAO/K,OACnC,MAAM,IAAI6C,MAAM,kDAElB,GAAIuhE,EAAcE,EAAYH,EAAOnkE,OACnC,MAAM,IAAI6C,MAAM,4CAGlB,IAAK,IAAI29B,EAAS,EAAGA,EAAS8jC,EAAW9jC,IACvC2jC,EAAOC,EAAc5jC,GAAWz1B,EAAOs5D,EAAc7jC,GAAU2jC,EAAOC,EAAc5jC,EAExF,EACF,EAxFA,GAAa,EAAAmmC,SAAAA,EA0Fb,8BAsCA,QA/BS,EAAApmC,WAAP,SAAkBjnB,EAAyBgO,EAAcvT,EAAiBqsB,GAExE,GAAqB,IAAjBrsB,EAAM/T,OAAc,CACtB,IAAKogC,EACH,MAAM,IAAIv9B,MAAM,8EAElBy9B,EAAUsmC,eAAettD,EAAKgO,GAAO8Y,EAAYrsB,E,CAKnD,IAFA,IAAM+T,EAAqB,GACrBC,EAAU,CAAC,GACR/iB,EAAI,EAAGA,EAAI+O,EAAM/T,SAAUgF,EAAG,CAC3B,IAANA,GACF+iB,EAAQ3hB,KAAK2hB,EAAQ/iB,EAAI,GAAK+O,EAAM/O,EAAI,IAE1C,IAAM4F,EAAQ0O,EAAKlK,QACnBxE,EAAM0c,GAAQvT,EAAM/O,GACpB8iB,EAAO1hB,KAAKwE,E,CAEd,MAAO,CAACkd,EAAQC,EAClB,EAEO,EAAA6+C,eAAP,SAAsBC,EAA8BzmC,EAAoBrsB,GAEtE,GAAI8yD,EAAuBzmC,GAAe,EACxC,MAAM,IAAIv9B,MAAM,4CAElB,IAAK,IAAImC,EAAI,EAAGA,EAAIo7B,IAAcp7B,EAChC+O,EAAM3N,KAAKygE,EAAuBzmC,EAEtC,EACF,EAtCA,GAAa,EAAAE,UAAAA,EAwCb,8BA4FA,QAlFS,EAAAwmC,WAAP,SACI3zD,EAAW6nB,EAAgB+rC,EAAmB/tC,EAC9Cb,GACF,IAAM7e,EAAOnG,EAAEmG,KAAKlK,MAAM,GAEN,IAAhB4rB,EAAKh7B,QACPsZ,EAAKpN,SAAQ,SAACwB,EAAG8vC,GAAQ,OAAAxiB,EAAK50B,KAAKo3C,EAAV,IAW3B,IARA,IAAM3tB,EAAam3C,EAAWC,gBAAgB3tD,EAAM0hB,GAAM,GAGpDp4B,EAAOiL,EAAUjL,KAAKitB,GACtBu2C,EAAI,IAAI,EAAAlhE,OAAO2qB,EAAY1c,EAAEpQ,MAC7B0I,EAAUoC,EAAUqO,eAAe2T,GACnCq3C,EAAer5D,EAAUqO,eAAe5C,GACxC6tD,EAAW,IAAIpiE,MAAMuU,EAAKtZ,QACvBgF,EAAI,EAAGA,EAAIpC,EAAMoC,IAAK,CAC7B,IAAM8sD,EAAUjkD,EAAU8I,gBAAgB3R,EAAGyG,GAE7C2B,EAAc+1D,UAAUrR,EAASx4C,EAAM6tD,GACvCf,EAAE5jE,IACEsvD,EACAkV,EAAWI,iBACPj0D,EAAEqH,WAAYwgB,EAAM1hB,EAAM,EAAGzL,EAAU+I,gBAAgBuwD,EAAUD,GAAeluC,EAAKb,G,CAG/F,OAAI4uC,EACKX,EAGA,IAAI,EAAAlhE,OACP8hE,EAAWC,gBAAgB3tD,EAAM0hB,EAAM+rC,GAAWX,EAAErjE,UAAMa,OAAWA,EAAWwiE,EAAE9qD,KAAM8qD,EAAElsD,OAElG,EAaO,EAAAktD,iBAAP,SACIxrD,EAA0Bof,EAAgB1hB,EAAgB+tD,EAAoBC,EAC9EtuC,EAA4Bb,GAC9B,IAAIxC,EAAM,EACV,GAAI0xC,GAAcrsC,EAAKh7B,OACrB,OAAOg5B,EAAIpd,EAAM0rD,IAInB,IAFA,IAAMhgD,EAAO0T,EAAKqsC,GACZE,EAAOjgD,GAAQhO,EAAKtZ,OAAS,EAAI6N,EAAUjL,KAAK0W,EAAKlK,MAAMkY,EAAO,IAC/DtiB,EAAI,EAAGA,EAAIsU,EAAKgO,GAAOtiB,IAC9B2wB,EAAY,IAAN3wB,EAAUgiE,EAAWI,iBAAiBxrD,EAAOof,EAAM1hB,EAAM+tD,EAAa,EAAGC,EAAKtuC,EAAKb,GACzEA,EAAIxC,EAAKqxC,EAAWI,iBAAiBxrD,EAAOof,EAAM1hB,EAAM+tD,EAAa,EAAGC,EAAKtuC,EAAKb,IAClGmvC,GAAOC,EAET,OAAO5xC,CACT,EASO,EAAAsxC,gBAAP,SAAuB3tD,EAAyB0hB,EAAyBC,GAEvE,IADA,IAAMpL,EAAavW,EAAKlK,QACfpK,EAAI,EAAGA,EAAIg2B,EAAKh7B,OAAQgF,IAE7B6qB,EAAWmL,EAAKh2B,IADdi2B,EACoB,EAEA,EAG1B,OAAOpL,EAAW3b,QAAO,SAAAyoB,GAAO,OAAQ,IAARA,CAAA,GAClC,EACF,EA5FA,GAAa,EAAAqqC,WAAAA,EA8Fb,8BAwMA,QA9LS,EAAAruC,qBAAP,SACIV,EAA2Bc,EAA8B1O,EAAuB5e,EAChF2e,EAAqBE,GACvB,IAAK2N,GAAoB5N,EAAYrqB,SAAW+4B,EAAU/4B,OAAS,EACjE,MAAM,IAAI6C,MAAM,sFAGlB,GAAIo1B,EAEF,IAAK,IAAI0E,EAAM,EAAGA,EAAM5D,EAAU/4B,OAAS,EAAG28B,IACxCA,GAAOtS,EAAYrqB,OACrBqqB,EAAYjkB,KAAK2yB,EAAU4D,EAAM,IAEjCtS,EAAYsS,GAAO5D,EAAU4D,EAAM,GAMzC,IAASA,EAAM,EAAGA,EAAMtS,EAAYrqB,OAAQ28B,IAC1C,GAAIA,EAAMlxB,EAAQzL,QAChB,GAAIyL,EAAQkxB,GAAO,EACjB,MAAM,IAAI95B,MAAM,qDAGlB4I,EAAQrF,KAAK,GAKjB,IAASu2B,EAAM,EAAGA,EAAMtS,EAAYrqB,OAAQ28B,IAC1C,GAAIA,EAAMvS,EAAUpqB,QAClB,GAAIoqB,EAAUuS,GAAO,EACnB,MAAM,IAAI95B,MAAM,uDAGlBunB,EAAUhkB,KAAK,GAKnB,IAASu2B,EAAM,EAAGA,EAA2B,EAArBtS,EAAYrqB,OAAY28B,IAC9C,GAAIA,EAAMrS,EAAKtqB,QACb,GAAIsqB,EAAKqS,GAAO,EACd,MAAM,IAAI95B,MAAM,iDAGlBynB,EAAKlkB,KAAK,GAKd,IAASu2B,EAAM,EAAGA,EAAMtS,EAAYrqB,OAAQ28B,IAAO,CACjD,GAAItS,EAAYsS,IAAQ,EACtB,MAAM,IAAI95B,MAAM,2CAGlB,GAAIynB,EAAKqS,IAAQtS,EAAYsS,IAAQrS,EAAKqS,EAAMtS,EAAYrqB,SAAWqqB,EAAYsS,GACjF,MAAM,IAAI95B,MAAM,qC,CAGtB,EAGO,EAAAwrB,yBAAP,SACI0K,EAA8BttB,EAA4B2e,EAC1DC,EAAgCC,EAAgBH,GAClD,GAAKA,EAAL,CAIA,GAAIG,EAAKtqB,SAAW,GAAK+4B,EAAU/4B,OAAS,GAC1C,MAAM,IAAI6C,MAAM,gEAGlB,GAAI4I,EAAQzL,SAAY+4B,EAAU/4B,OAAS,EACzC,MAAM,IAAI6C,MAAM,6DAGlB,GAAIwnB,EAAYrqB,SAAY+4B,EAAU/4B,OAAS,EAC7C,MAAM,IAAI6C,MAAM,mEAGlB,IAAK,IAAI85B,EAAM,EAAGA,EAAM5D,EAAU/4B,OAAS,EAAG28B,IAC5CvO,EAAao5C,wBACTzuC,EAAU4D,EAAM,GAAIlxB,EAAQkxB,GAAMvS,EAAUuS,GAAMtS,EAAYsS,GAAMrS,EAAMqS,EAAKA,EAAM5D,EAAU/4B,OAAS,EACxGmqB,E,CAER,EAaO,EAAAyO,uBAAP,SACIX,EAA2Bc,EAA8BttB,EAAmB2e,EAC5EC,EAAuBC,EAAgBH,GACzC,GAAI4O,EAAU/4B,QAAU,EACtB,MAAM,IAAI6C,MAAM,8CAIlB,IAAMgtB,EAAa,CAACkJ,EAAU,GAAIA,EAAU,IAI5C,OAFA3K,EAAaq5C,mBACTxvC,EAAkBc,EAAWlJ,EAAYpkB,EAAS2e,EAAWC,EAAaC,EAAMH,GAC7E0F,CACT,EAYO,EAAA63C,uBAAP,SACI3uC,EAA8B4uC,EAA+Bl8D,EAAmB2e,EAChFC,EAAuBC,EAAgBH,GACzC,GAAI4O,EAAU/4B,QAAU,GAAK2nE,EAAW3nE,QAAU,EAChD,MAAM,IAAI6C,MAAM,2DAIlB,IAAMgtB,EAAa,CAACkJ,EAAU,GAAI4uC,EAAW,IAG7C,OADAv5C,EAAaq5C,oBAAmB,EAAO1uC,EAAWlJ,EAAYpkB,EAAS2e,EAAWC,EAAaC,EAAMH,GAC9F0F,CACT,EAKe,EAAA43C,mBAAf,SACIxvC,EAA2Bc,EAA8BlJ,EAAsBpkB,EAC/E2e,EAA8BC,EAAgCC,EAAgBH,GAChF,GAAI8N,EACF,IAAK,IAAI0E,EAAM,EAAGA,EAAM5D,EAAU/4B,OAAS,EAAG28B,IAC5C9M,EAAWzpB,KAAK,QAGlB,IAASu2B,EAAM,EAAGA,EAAM5D,EAAU/4B,OAAS,EAAG28B,IAC5C9M,EAAWzpB,KAAKgoB,EAAao5C,wBACzBzuC,EAAU4D,EAAM,GAAIlxB,EAAQkxB,GAAMvS,EAAUuS,GAAMtS,EAAYsS,GAAMrS,EAAMqS,EAAKA,EAAM5D,EAAU/4B,OAAS,EACxGmqB,GAGV,EAIe,EAAAq9C,wBAAf,SACII,EAAgBh8D,EAAgBggB,EAAkBD,EAAgBrB,EAAgBu9C,EAClFC,EAAsB39C,GACxB,IAAM49C,EAAUn8C,GAAYD,EAAS,GAAK,EAC1C,IAAIxB,GAAuB,WAAZA,EAsBb,OAAOjqB,KAAK0f,OAAQgoD,EAASt9C,EAAKu9C,GAAgBv9C,EAAKw9C,GAAgBC,GAAWn8D,EAAU,GArB5F,OAAQue,GACN,IAAK,QAGH,OAFAG,EAAKu9C,GAAgB,EACrBv9C,EAAKw9C,GAAgB,EACd5nE,KAAK0f,OAAQgoD,EAASG,GAAWn8D,EAAU,GACpD,IAAK,aACL,IAAK,aACH,GAAiB,IAAbggB,EACF,MAAM,IAAI/oB,MAAM,uDAEhB,IACMmlE,IADoBJ,EAASh8D,EAAS,GAAKA,EACX,GAAKA,EAAS+f,EAASi8C,EAI7D,OAHAt9C,EAAKu9C,GACY,eAAZ19C,EAA4BjqB,KAAK0f,OAAOooD,EAAY,GAAK,GAAK9nE,KAAK0f,MAAMooD,EAAY,GAC1F19C,EAAKw9C,GAAgBE,EAAY19C,EAAKu9C,GAC/B3nE,KAAK0f,OAAQgoD,EAASI,EAAYr8C,GAAU/f,EAAU,GAEjE,QACE,MAAM,IAAI/I,MAAM,4BAKxB,EACF,EAxMA,GAAa,EAAAurB,aAAAA,EA0MA,EAAAoC,UAAY,qBACZ,EAAAC,SAAW,qBAExB,4BAAiClW,GAC/B,OAAO,IAAI0tD,aAAcr1D,OAAO2H,EAClC,C,oGChuCa,EAAAtZ,QAAU,Q,8mECDvB,cACA,SACA,UACA,UACA,UA2BA,0BAiBE,KAAAinE,gBAA+B,KAoC/B,KAAAC,eAAyC,KACzC,KAAAC,mBAAiD,KACjD,KAAAC,sBAAwB,EAExB,KAAAC,uBAAwB,EAUxB,KAAAC,2BAA4E,IAAInmE,GAsUlF,QAxWE,sBAAI,sCAAuB,C,IAA3B,WACE,GAA6B,OAAzBf,KAAK6mE,gBACP,MAAM,IAAIrlE,MAAM,2EAGlB,IAAIyY,EAAOja,KAAKmnE,iBAAiBrlE,IAAI9B,KAAK6mE,iBAM1C,OALK5sD,IACHA,EAAO,CAAC,EACRja,KAAKmnE,iBAAiBhmE,IAAInB,KAAK6mE,gBAAiB5sD,IAG3CA,CACT,E,gCAwBM,YAAAxU,WAAN,SAAiBzH,G,sGACf,IAAKS,UAAU2oE,IAEb,MAAM,IAAI5lE,MAAM,2CAGF,SAAM/C,UAAU2oE,IAAIC,kB,OACpC,KADMC,EAAU,UAEd,MAAM,IAAI9lE,MAAM,6CA4BJ,OAzBdxB,KAAKhC,IAAMA,EACLupE,EAAqC,GACrCC,EAAwC,CAC5CC,eAAgB,CACdC,+BAAgCJ,EAAQK,OAAOD,+BAC/CE,iCAAkCN,EAAQK,OAAOC,iCACjDC,4BAA6BP,EAAQK,OAAOE,4BAC5CC,cAAeR,EAAQK,OAAOG,cAC9BC,kCAAmCT,EAAQK,OAAOI,kCAClDC,yBAA0BV,EAAQK,OAAOK,yBACzCC,yBAA0BX,EAAQK,OAAOM,yBACzCC,yBAA0BZ,EAAQK,OAAOO,0BAE3CX,iBAAgB,GAIdD,EAAQa,SAASl3D,IAAI,mCACvBjR,KAAKinE,uBAAwB,EAC7BM,EAAiBxiE,KAAK,kCAEpBuiE,EAAQa,SAASl3D,IAAI,eACvBs2D,EAAiBxiE,KAAK,cAGxB,EAAA/E,KAAc,GAAMsnE,EAAQc,cAAcZ,I,cAA1C,EAAKa,OAAS,SACdroE,KAAKsoE,gBAAiB,IAAAC,sBAAqBvoE,MAC3CA,KAAK8X,eAAiB,IAAI,EAAAsuB,eAAepmC,MACzCA,KAAKi5D,QAAU,IAAIl4D,IACnBf,KAAKwoE,qBAAuB,IAAIznE,IAChCf,KAAKmnE,iBAAmB,IAAIpmE,KAG5B,IAAA0nE,iBAAgBzqE,EAAI4gD,WAAa5gD,EAAI4mC,OAIrC5kC,KAAKqoE,OAAOK,kBAAoB,SAAAC,GAC1BA,EAAG9kC,iBAAiB+kC,oBAEtBxrB,QAAQvZ,MAAM,0DAAmD8kC,EAAG9kC,MAAMglC,SAE9E,EAEI7oE,KAAKinE,wBACPjnE,KAAK8oE,kBAAoB9oE,KAAKqoE,OAAOU,eAAe,CAClDrnE,KAAM,YACNk9B,MAAO,KAIXp/B,OAAOC,eAAeO,KAAKhC,IAAIgrE,OAAQ,SAAU,CAACrpE,MAAOK,KAAKqoE,S,YAGhE,YAAA1iE,QAAA,WAKA,EAEA,YAAAsjE,kBAAA,WAIE,OAHKjpE,KAAK8mE,iBACR9mE,KAAK8mE,eAAiB9mE,KAAKqoE,OAAOa,wBAE7BlpE,KAAK8mE,cACd,EAEA,YAAAqC,sBAAA,WAIE,OAHKnpE,KAAK+mE,qBACR/mE,KAAK+mE,mBAAqB/mE,KAAKipE,oBAAoBG,oBAE9CppE,KAAK+mE,kBACd,EAEA,YAAAsC,eAAA,WACMrpE,KAAK+mE,qBACP/mE,KAAK+mE,mBAAmBvqC,MACxBx8B,KAAK+mE,mBAAqB,KAE9B,EAEA,YAAAtxB,MAAA,WACMz1C,KAAK8mE,iBACP9mE,KAAKqpE,iBACLrpE,KAAKqoE,OAAOiB,MAAMC,OAAO,CAACvpE,KAAKipE,oBAAoB52B,WACnDryC,KAAKsoE,eAAekB,wBACpBxpE,KAAK8mE,eAAiB,KACtB9mE,KAAKgnE,sBAAwB,EAEjC,EAcA,YAAAzuD,IAAA,SAAIlB,EAAwCC,EAA+B4qD,EACvEuH,EACAC,GACF,GAAIpyD,EAAO3Y,SAAW0Y,EAAQE,WAAW5Y,OACvC,MAAM,IAAI6C,MAAM,sCAA+B6V,EAAQE,WAAW5Y,OAAM,MAK1E,IADA,IAAMgrE,EAAwB,GACrBhmE,EAAI,EAAGA,EAAI2T,EAAO3Y,SAAUgF,EAAG,CAEtC,KADMimE,EAAU5pE,KAAKsoE,eAAexmE,IAAIwV,EAAO3T,GAAGsW,OAEhD,MAAM,IAAIzY,MAAM,iCAA0B8V,EAAO3T,GAAGsW,OAEtD0vD,EAAWhmE,GAAKimE,C,CAGlB,IAAMnoE,EAzNN,SAACkJ,EAA4C0sC,GAG3C,IAAMwyB,EAAaxyB,EAAaj3C,KAAI,SAAAoY,GAAU,gBAAGA,EAAOwB,SAAQ,YAAIxB,EAAOP,KAAK3X,KAAK,KAAvC,IAA+CA,KAAK,KAC9FmB,EAAMkJ,EAAYtK,KAKtB,OAJIsK,EAAYgN,YACdlW,GAAO,IAAMkJ,EAAYgN,UAAY,KAEvClW,EAAO,IAAMooE,CAEf,CA+MYjyD,CAAwBP,EAASC,GACzCO,EAAW7X,KAAK8X,eAAeC,YAAYtW,GACzCkJ,EAAckN,EAChBA,EAASlN,YACsC,mBAAtC0M,EAA8BvV,IAAsBuV,EAA8BvV,MAC9BuV,EAG3DyyD,EAAkD,IAAzB5H,EAAcvjE,OAAegM,EAAYq0B,QAAQ5+B,KAAI,SAAC49B,EAAGr6B,GAAM,OAAAA,CAAA,IAAKu+D,EACnG,GAAI4H,EAAuBnrE,SAAWgM,EAAYq0B,QAAQrgC,OACxD,MAAM,IAAI6C,MAAM,sBAAesoE,EAAuBnrE,OAAM,6BAAqBgM,EAAYq0B,QAAQrgC,OAAM,MAI7G,IAAMorE,EAAkC,GAClCC,EAAyB,GAC/B,IAASrmE,EAAI,EAAGA,EAAIgH,EAAYq0B,QAAQrgC,SAAUgF,EAAG,CAInD,IAAKrF,OAAOC,UAAUurE,EAAuBnmE,KAAOmmE,EAAuBnmE,IAAM,GAC7EmmE,EAAuBnmE,IAAMgH,EAAYq0B,QAAQrgC,OACnD,MAAM,IAAI6C,MAAM,gCAAyBsoE,EAAuBnmE,KAElE,IAAmC,IAA/BmmE,EAAuBnmE,GAA3B,CAGA,IAKMimE,EALAK,GAA6C,IAA/BH,EAAuBnmE,GACrCumE,GAA8C,IAA/BJ,EAAuBnmE,GACtCwmE,EAAcF,GAAeC,EAC/BR,EAAyB/+D,EAAYq0B,QAAQr7B,GAAGqW,SAAUrP,EAAYq0B,QAAQr7B,GAAGsU,MACjFwxD,EAAmBK,EAAuBnmE,GAAIgH,EAAYq0B,QAAQr7B,GAAGqW,SAAUrP,EAAYq0B,QAAQr7B,GAAGsU,MAE1G,KADM2xD,EAAU5pE,KAAKsoE,eAAexmE,IAAIqoE,EAAWlwD,OAEjD,MAAM,IAAIzY,MAAM,kCAA2B2oE,EAAWlwD,OAKxD,GAHIgwD,GACFjqE,KAAKoqE,cAAcrlE,KAAK6kE,GAEtBM,EAAc,CAChB,IAAIG,EAAiBrqE,KAAKwoE,qBAAqB1mE,IAAI9B,KAAK6mE,iBACnDwD,IACHA,EAAiB,GACjBrqE,KAAKwoE,qBAAqBrnE,IAAInB,KAAK6mE,gBAAkBwD,IAEvDA,EAAetlE,KAAK6kE,E,CAEtBG,EAAkBhlE,KAAKolE,GACvBH,EAAYjlE,KAAK6kE,E,EAGnB,IAAMU,EAA0BtqE,KAAK8X,eAAeyyD,2BAA2B5/D,EAAY6/D,cAAclzD,IAazG,OAXKO,IACHA,EAAW7X,KAAK8X,eAAeM,MAAMzN,EAAa2/D,GAClDtqE,KAAK8X,eAAeO,YAAY5W,EAAKoW,KAGvC,IAAA4yD,WACI,QACA,WAAM,sCAAyB9/D,EAAYtK,KAAI,kBAAUoB,EAAG,kBAAU6oE,EAAwB,GAAE,YAC5FA,EAAwB,GAAE,YAAIA,EAAwB,GADpD,IAEVtqE,KAAK8X,eAAeS,IAAIV,EAAUP,EAAQqyD,EAAYK,EAAaM,GAE5DP,CACT,EAEA,YAAAW,OAAA,SAAOC,EAAmB1wD,GACxBja,KAAKsoE,eAAeoC,OAAOC,EAAW1wD,EACxC,EAEA,YAAA2wD,OAAA,SAAO/iC,EAAagjC,GAClB7qE,KAAKsoE,eAAesC,OAAO/iC,EAAKgjC,EAClC,EAEM,YAAAC,SAAN,SAAeH,EAAmBI,G,0FAGhC,SAAM/qE,KAAKsoE,eAAewC,SAASH,EAAWI,I,cAA9C,S,YAGF,YAAAC,MAAA,SAAMzpE,GACJ,OAAOvB,KAAKsoE,eAAe3oB,OAAOp+C,GAAM0pE,EAC1C,EAEA,YAAAC,KAAA,SAAKC,GACH,OAAOnrE,KAAKsoE,eAAe8C,QAAQD,EACrC,EAEA,YAAAE,aAAA,SAAa3yB,EAAgB4yB,EAAkBxrE,EAAoByrE,GACjE,IAAMrkC,EAAK,EAAAskC,wBAAwB1pE,IAAI42C,GACvC,IAAKxR,EACH,MAAM,IAAI1lC,MAAM,kCAA2Bk3C,IAG7C14C,KAAKi5D,QAAQ93D,IAAImqE,EAAU,CAAC5yB,EAAQ6yB,EAAUrkC,EAAG,GAAI,CAACA,EAAG,GAAIpnC,IAC/D,EAEA,YAAA2rE,cAAA,SAAcH,G,QACNjB,EAAiBrqE,KAAKwoE,qBAAqB1mE,IAAIwpE,GACrD,GAAIjB,EAAgB,C,IAClB,IAAmB,QAAAA,GAAc,8BAAE,CAA9B,IAAMpwD,EAAI,QACbja,KAAKsoE,eAAe8C,QAAQnxD,EAAKgxD,G,mGAEnCjrE,KAAKwoE,qBAAqB7mE,OAAO2pE,E,CAGnCtrE,KAAKmnE,iBAAiBxlE,OAAO2pE,GAC7BtrE,KAAKi5D,QAAQt3D,OAAO2pE,EACtB,EAEA,YAAAI,cAAA,SAAcJ,EAAkBvkE,EAAyB4kE,G,QACjDrhD,EAAStqB,KAAKi5D,QAAQn3D,IAAIwpE,GAChC,IAAKhhD,EACH,MAAM,IAAI9oB,MAAM,8BAAuB8pE,IAEnC,QAA8ChhD,EAAM,GAAnDouB,EAAM,KAAE6yB,EAAQ,KAAEK,EAAW,KAAE/qE,EAAU,KAChD,GAA6B,OAAzBb,KAAK6mE,gBACP,MAAM,IAAIrlE,MAAM,mBAAYk3C,EAAM,aAAK6yB,EAAQ,8CAEjDvrE,KAAK6mE,gBAAkByE,EAGnBzqE,EAAW,KACbA,EAAW,GAAKA,EAAW,GAAGA,EAAW,IACzCA,EAAW,QAAK0B,IAGlB,IAAAkoE,WAAU,QAAQ,WAAM,+CAAkC/xB,EAAM,aAAK6yB,EAAQ,OAArD,IAExB,IAAMM,EAAgB7rE,KAAKhC,IAAI4mC,MAE/B5kC,KAAKoqE,cAAgB,GACrB,IAME,OALIyB,GACF7rE,KAAKqoE,OAAOyD,eAAe,cAG7BF,EAAY7kE,EAASlG,EAAW,IACzB,C,CACP,MAAOgG,GAEP,OADA8kE,EAAO5mE,KAAK5F,QAAQC,QAAQ,4BAAqBs5C,EAAM,aAAK6yB,EAAQ,qBAAa1kE,KAC1E,C,SAEHglE,GACFF,EAAO5mE,KAAK/E,KAAKqoE,OAAO0D,gBAAgB5rB,MACpC,SAAAvc,GAAO,OAAAA,EAAM,4CAAqC8U,EAAM,aAAK6yB,EAAQ,cAAM3nC,EAAIilC,SAAY,IAApF,K,IAGb,IAAmB,QAAA7oE,KAAKoqE,eAAa,8BAAE,CAAlC,IAAMnwD,EAAI,QACbja,KAAKsoE,eAAe8C,QAAQnxD,EAAKgxD,G,mGAEnCjrE,KAAKoqE,cAAgB,GACrBpqE,KAAK6mE,gBAAkB,I,CAE3B,EAGA,YAAAmF,eAAA,SAAeC,EAAmBt9D,EAAeuK,EAAmB3X,GAClE,IAAI2qE,EAA4BlsE,KAAKknE,2BAA2BplE,IAAImqE,GAC/DC,IACHA,EAA4B,IAAInrE,IAChCf,KAAKknE,2BAA2B/lE,IAAI8qE,EAAWC,IAGjD,IAAMC,EAAiBD,EAA0BpqE,IAAI6M,GAC/Cs8D,EAAKjrE,KAAKsoE,eAAe8D,uBAAuBlzD,EAAQ3X,EAAM4qE,aAAc,EAAdA,EAAiB,IAErF,OADAD,EAA0B/qE,IAAIwN,EAAO,CAACs8D,EAAI/xD,IACnC+xD,CACT,EACA,YAAAoB,kBAAA,SAAkBJ,GAAlB,WACQC,EAA4BlsE,KAAKknE,2BAA2BplE,IAAImqE,GAClEC,IACFA,EAA0BrhE,SAAQ,SAAAyhE,GAAc,SAAKhE,eAAeiE,yBAAyBD,EAAW,GAAxD,IAChDtsE,KAAKknE,2BAA2BvlE,OAAOsqE,GAE3C,EACA,YAAAO,UAAA,SAAU7B,GACR,IAAMf,EAAU5pE,KAAKsoE,eAAexmE,IAAI6oE,GACxC,IAAKf,EACH,MAAM,IAAIpoE,MAAM,kCAA2BmpE,IAE7C,OAAOf,EAAQ1wD,MACjB,EACA,YAAAuzD,iBAAA,SAAiBC,EAAsBnrE,EAAcG,GAArD,WAEE,OAAO,gD,wDACQ,UAAM,IAAAirE,iBAAgB3sE,KAAM0sE,EAAWnrE,I,OACpD,OADM0Y,EAAO,SACN,CAAP,GAAO,IAAA4jD,YAAW5jD,EAAKf,OAAQxX,I,OAEnC,EAEF,EAzYA,GAAa,EAAAkrE,cAAAA,C,u/CC9Bb,cAEA,UACA,UAEA,UAKA,aACE,WACY3vE,EAAuC+c,EAAkCC,EACjEhC,GADR,KAAAhb,OAAAA,EAAuC,KAAA+c,SAAAA,EAAkC,KAAAC,KAAAA,EACjE,KAAAhC,KAAAA,CAA0B,CAkChD,OAhCE,YAAA40D,gBAAA,WACE,GAAsB,IAAlB7sE,KAAKga,SACP,MAAM,IAAIxY,MAAM,qBAElB,IAAMsrE,EAAe,EAAAtgE,UAAUjL,KAAKvB,KAAKiY,MACzC,OAAwB,IAAjB60D,EAAqB,IAAIvzD,aACJ,IAAIA,aAAavZ,KAAK/C,OAAO8vE,MAAM7zD,OAAQlZ,KAAKia,KAAM6yD,EACpF,EAEA,YAAAE,iBAAA,WACE,GAAsB,IAAlBhtE,KAAKga,SACP,MAAM,IAAIxY,MAAM,qBAElB,IAAMsrE,EAAe,EAAAtgE,UAAUjL,KAAKvB,KAAKiY,MACzC,OAAwB,IAAjB60D,EAAqB,IAAIpN,cACJ,IAAIA,cAAc1/D,KAAK/C,OAAO8vE,MAAM7zD,OAAQlZ,KAAKia,KAAM6yD,EACrF,EAEA,YAAAG,cAAA,WACE,GAAsB,IAAlBjtE,KAAKga,SACP,MAAM,IAAIxY,MAAM,qBAElB,IAAMsrE,EAAe,EAAAtgE,UAAUjL,KAAKvB,KAAKiY,MACzC,OAAwB,IAAjB60D,EAAqB,IAAIrwC,WAAe,IAAIA,WAAWz8B,KAAK/C,OAAO8vE,MAAM7zD,OAAQlZ,KAAKia,KAAM6yD,EACrG,EAEA,YAAA7rD,QAAA,SAAQisD,GACN,GAAI,EAAA1gE,UAAUjL,KAAK2rE,KAAa,EAAA1gE,UAAUjL,KAAKvB,KAAKiY,MAClD,MAAM,IAAIzW,MAAM,qBAElB,OAAO,IAAI2rE,EAAentE,KAAK/C,OAAQ+C,KAAKga,SAAUha,KAAKia,KAAMizD,EACnE,EACF,EArCA,GAuCA,aAYE,WAAoBjwE,EAA+BqI,EAAwB8nE,GAAvD,KAAAnwE,OAAAA,EAA+B,KAAAqI,QAAAA,EAF3C,KAAA+nE,iBAAmB,EACnB,KAAAC,eAAiB,EAEvB,IAAMC,EAAUtwE,EAAOuwE,QAGnBnzB,EAAa+yB,GAAqB,EACtCptE,KAAKytE,gBAAkBF,EAAQlzB,KAC/B,IAAMx0B,EAAa0nD,EAAQlzB,KAC3Br6C,KAAK0tE,YAAcH,EAAQlzB,KAC3Br6C,KAAKqtE,iBAAmBE,EAAQlzB,KAChCr6C,KAAKstE,eAAiBC,EAAQlzB,KAG9B,IADA,IAAM/iC,EAAuB,GACpB3T,EAAI,EAAGA,EAAIkiB,EAAYliB,IAAK,CAKnC,IAJA,IAAMqW,EAAWuzD,EAAQlzB,KACnBpgC,EAAOszD,EAAQlzB,KACf/e,EAAMiyC,EAAQlzB,KACdpiC,EAAiB,GACd5L,EAAI,EAAGA,EAAIivB,EAAKjvB,IACvB4L,EAAKlT,KAAKwoE,EAAQlzB,MAEpB/iC,EAAOvS,KAAK,IAAIooE,EAAelwE,EAAQ+c,EAAUC,EAAMhC,G,CAEzDjY,KAAKsX,OAASA,CAChB,CAyCF,OAxEE,sBAAI,+BAAgB,C,IAApB,WACE,OAAOtX,KAAKsF,QAAQqoE,uBACtB,E,gCACA,sBAAI,+BAAgB,C,IAApB,WACE,OAAO3tE,KAAK/C,OAAO2wE,OAAOl0D,SAAS1Z,KAAKqtE,iBAAkBrtE,KAAKqtE,iBAAmBrtE,KAAKstE,eACzF,E,gCA4BA,YAAAO,QAAA,SAAQx2D,EAAwCy2D,GAAhD,I,MAAA,OAGQC,EACgF,QAAlF,EAA4B,QAA5B,EAAAD,aAAoB,EAApBA,EAAsBx2D,cAAM,eAAElX,KAAI,SAAAuD,GAAK,MAAa,iBAANA,EAAiB,EAAK2T,OAAO3T,GAAKA,CAAzC,WAA2C,QAAI3D,KAAKsX,OAEzF4qD,EAA6C,QAA7B,EAAA4L,aAAoB,EAApBA,EAAsB9uC,eAAO,QAAI,GAWvD,OAAOh/B,KAAKsF,QAAQiT,IAAIlB,EAAS02D,EAAc7L,GAVpB,SAACvzD,EAAeqL,EAAkB/B,GACzD,WAAIk1D,EAAe,EAAKlwE,OAAQ+c,EAAU,EAAKjR,OAAO4F,EAAOsJ,GAAOA,EAApE,IAC0B,SAAC+B,EAAkB/B,GAC/C,IAAMmmD,GAAc,IAAA4P,sBAAqBh0D,GACzC,IAAKokD,EACH,MAAM,IAAI58D,MAAM,iCAA0BwY,IAE5C,IAAMi0D,EAAa7P,EAAc,EAAA5xD,UAAUjL,KAAK0W,GAChD,OAAO,IAAIk1D,EAAe,EAAKlwE,OAAQ+c,EAAU,EAAK1U,QAAQgjE,eAAe3oB,OAAOsuB,GAAYhD,GAAIhzD,EACtG,GAEF,EAEA,YAAAlP,OAAA,SAAO4F,EAAesJ,GACpB,IAAMumC,EAAQx+C,KAAK/C,OAAOixE,YAC1B,IACE,IAAMj0D,EAAOja,KAAK/C,OAAOkxE,WAA+B,GAAnB,EAAIl2D,EAAKtZ,SAC1CwgC,EAASllB,GAAQ,EACrBja,KAAK/C,OAAOuwE,QAAQruC,KAAYlnB,EAAKtZ,OACrC,IAAK,IAAIgF,EAAI,EAAGA,EAAIsU,EAAKtZ,OAAQgF,IAC/B3D,KAAK/C,OAAOuwE,QAAQruC,KAAYlnB,EAAKtU,GAEvC,OAAO3D,KAAK/C,OAAOmxE,YAAYpuE,KAAKytE,gBAAiB9+D,EAAOsL,E,CAC5D,MAAOpT,GACP,MAAM,IAAIrF,MACN,6CAAsCmN,EAAK,wBAAgBsJ,EAAI,OAC/D,oGACA,iBAAUpR,G,SAEd7G,KAAK/C,OAAOoxE,aAAa7vB,E,CAE7B,EACF,EA5EA,GA8Ea,EAAAnhD,KAAO,SAAMJ,EAAuBe,GAAQ,0C,+DACjDX,EAAOJ,EAAOqxE,YACR7vE,UAAU2oE,IAAlB,YACF,IAAKppE,EAAIC,KAAKE,KACZ,MAAM,IAAIqD,MACN,qGAGN,UADM,EAAU,IAAI,EAAAorE,eACNnnE,WAAWzH,I,OAAzB,SAEAX,EAEI,GAGA,SAACkE,GAAiB,SAAQypE,MAAMzpE,EAAd,IAGlB,SAAC4pE,GAAgB,SAAQD,KAAKC,EAAb,IAGjB,SAACtjC,EAAagjC,EAAatpE,EAAcgtE,GACvC,QADuC,IAAAA,IAAAA,GAAA,GACnCA,GACF,IAAA9D,WAAU,WAAW,WAAM,+CAAkC5iC,EAAG,iBAASgjC,EAAG,kBAAUtpE,EAA3D,IAC3B,EAAQqpE,OAAO/iC,EAAKgjC,OACf,EACL,IAAAJ,WAAU,WAAW,WAAM,sDAAyC5iC,EAAG,uBAAegjC,EAAG,kBAAUtpE,EAAxE,IAC3B,IAAM0Y,EAAOhd,EAAO2wE,OAAOl0D,SAASmuB,EAAKA,EAAMtmC,GAC/C,EAAQmpE,OAAOG,EAAK5wD,E,CAExB,IAGA,SAAM0wD,EAAmB6D,EAAoBjtE,GAAY,0C,kDAMnD,OAJA,IAAAkpE,WACI,WACA,WAAM,qDAAwCE,EAAS,wBAAgB6D,EAAU,kBAAUjtE,EAArF,IAEV,GAAM,EAAQupE,SAASH,GAAW,WAAM,OAAA1tE,EAAO2wE,OAAOl0D,SAAS80D,EAAYA,EAAajtE,EAAhD,K,cAAxC,S,cAIN,SAAClB,EAAciqB,EAAgBxqB,GAAuB,SAAQurE,aAC1DhrE,EAAMiqB,EAAQxqB,EACd9B,EAAI4mC,OAAsC,YAA7B5mC,EAAIgrE,OAAOyF,cAA8BxxE,EAAOyxE,aAAazxE,EAAO0xE,iBAAiBrkD,IAC5C,UAAGA,GAHP,IAMtD,SAACA,GAAmB,SAAQmhD,cAAcnhD,EAAtB,IAGpB,SAACA,EAAgB8iD,EAA2BwB,EAAuBjD,IACjE,IAAAlB,WACI,WACA,WAAM,gDAAmCmE,EAAa,oBAAYtkD,EAAM,+BACpE8iD,EADE,IAEV,IAAMrmE,EAAU,IAAI8nE,EAAmB5xE,EAAQ,EAASmwE,GACxD,OAAO,EAAQ1B,cAAcphD,EAAQvjB,EAAS4kE,EAChD,I,+qBC3LR,IAcImD,EACAlqC,EAfJ,UAOMmqC,EAAiB,CAAC,IAAK,IAAK,IAAK,IAAK,KAU/B,EAAAtG,gBAAkB,SAACuG,EAA2BC,GACzDH,EAAiBE,EACjBpqC,EAAQqqC,CACV,EAKa,EAAAC,IAAM,SAACtwB,EAAoB8hB,GACtC,IAjBayO,EAAetG,EAiBtBuG,GAAe,IAAAC,sBAAqBzwB,GAEtCwwB,IADgB,IAAAC,sBAAqBP,KAlB5BK,EAoBLC,EApBoBvG,EAoBS,mBAARnI,EAAqBA,IAAQA,EAlB1DtjB,QAAQ19B,IAAI,WAAIqvD,EAAeI,GAAM,aAAI,IAAI1wB,MAAOC,cAAa,YAAImqB,IAoBvE,EAKa,EAAA4B,UAAwB,W,IAAC,sDAChC7lC,GACF,EAAAsqC,IAAG,oBAAII,IAAI,GAEf,C,wGCxCA,cAEa,EAAAzR,WAAa,SAACD,EAAyBl8D,GAE5C,YAAK,IAAA6tE,mCAAkC7tE,GAAvC,CAA8Ck8D,EAA9C,C,oeCJR,8BAUA,QAHS,EAAAqD,gBAAP,SAAuBnvD,EAAqB5H,GAC1C,OAAQ4H,EAAE,KAAO5H,EAAE,QAAM3H,EAAY,CAACuP,EAAE,GAAI5H,EAAE,GAChD,EACF,EAVA,GAAa,EAAAg3D,WAAAA,EAab,8BAiEA,QAzDS,EAAA97C,UAAP,SAAiB+7C,EAA0BC,EAA0BC,G,WAAA,IAAAA,IAAAA,GAAA,GACnE,IAAMxsC,EAAQssC,EAAMxiE,OACdm2B,EAAQssC,EAAMziE,OACpB,GAAc,IAAVk2B,EACF,OAAOusC,EAET,GAAc,IAAVtsC,EACF,OAAOqsC,EAET,IAAMG,EAAQziE,KAAKu/B,IAAI+iC,EAAMxiE,OAAQyiE,EAAMziE,QACrC4iE,EAAQ,IAAI79D,MAAc49D,GAGhC,GAAID,EAAU,CACZ,GAAIxsC,EAAQ,GAAKC,EAAQ,EACvB,OAEF,IAAM0sC,EACFN,EAAWD,gBAAgB,CAACE,EAAMtsC,EAAQ,GAAIssC,EAAMtsC,EAAQ,IAAK,CAACusC,EAAMtsC,EAAQ,GAAIssC,EAAMtsC,EAAQ,KACtG,QAAqBvyB,IAAjBi/D,EACF,OAEF,IAAuCA,EAAY,GAAlDD,EAAMD,EAAQ,GAAE,KAAEC,EAAMD,EAAQ,GAAE,I,CAGrC,IAAK,IAAI39D,EAAI09D,EAAW,EAAI,EAAG19D,GAAK29D,EAAO39D,IAAK,CAC9C,IAAM89D,EAAO5sC,EAAQlxB,EAAI,EAAI,EAAIw9D,EAAMtsC,EAAQlxB,GACzC+9D,EAAO5sC,EAAQnxB,EAAI,EAAI,EAAIy9D,EAAMtsC,EAAQnxB,GAE/C,GAAI89D,IAASC,GAAQD,EAAO,GAAKC,EAAO,EACtC,OAEFH,EAAMD,EAAQ39D,GAAK9E,KAAKu/B,IAAIqjC,EAAMC,E,CAGpC,OAAOH,CACT,EAOO,EAAAmB,iBAAP,SAAwBn5D,EAA0Bo5D,GAEhD,IAAMztC,EAAY3rB,EAAM5K,OAClBikE,EAAYD,EAAWhkE,OAC7B,GAAIu2B,EAAY0tC,EACd,OAAO,EAET,IAAK,IAAIj/D,EAAI,EAAGA,GAAKuxB,EAAWvxB,IAC9B,GAA6B,IAAzB4F,EAAM2rB,EAAYvxB,IAAY4F,EAAM2rB,EAAYvxB,KAAOg/D,EAAWC,EAAYj/D,GAChF,OAAO,EAGX,OAAO,CACT,EACF,EAjEA,GAAa,EAAAoI,cAAAA,EAoEb,8BA+GA,QA3GS,EAAAxK,KAAP,SAAY0W,GACV,OAAOzL,EAAU03D,0BAA0BjsD,EAAM,EAAGA,EAAKtZ,OAC3D,EAKO,EAAA++B,kBAAP,SAAyBzlB,EAAyBgO,GAChD,GAAIA,EAAO,GAAKA,EAAOhO,EAAKtZ,OAC1B,MAAM,IAAI6C,MAAM,+BAAwBykB,EAAI,gDAAwChO,EAAKtZ,OAAM,iBAEjG,OAAO6N,EAAU03D,0BAA0BjsD,EAAMgO,EAAMhO,EAAKtZ,OAC9D,EAKO,EAAA6+B,gBAAP,SAAuBvlB,EAAyBgO,GAC9C,GAAIA,EAAO,GAAKA,EAAOhO,EAAKtZ,OAC1B,MAAM,IAAI6C,MAAM,+BAAwBykB,EAAI,8CAAsChO,EAAKtZ,OAAM,iBAE/F,OAAO6N,EAAU03D,0BAA0BjsD,EAAM,EAAGgO,EACtD,EAKO,EAAAi+C,0BAAP,SAAiCjsD,EAAyB2f,EAAe4E,GAEvE,IADA,IAAIj7B,EAAO,EACFoC,EAAIi0B,EAAOj0B,EAAI64B,EAAK74B,IAAK,CAGhC,GAAIsU,EAAKtU,GAAK,EACZ,MAAM,IAAInC,MAEN,iHAEND,GAAQ0W,EAAKtU,E,CAEf,OAAOpC,CACT,EAEO,EAAAsZ,eAAP,SAAsB5C,GACpB,IAAM9N,EAAO8N,EAAKtZ,OAClB,GAAa,IAATwL,EACF,MAAO,GACF,GAAa,IAATA,EACT,MAAO,CAAC,GAEV,IAAMC,EAAU,IAAI1G,MAAMyG,GAC1BC,EAAQD,EAAO,GAAK,EACpBC,EAAQD,EAAO,GAAK8N,EAAK9N,EAAO,GAChC,IAAK,IAAIxG,EAAIwG,EAAO,EAAGxG,GAAK,IAAKA,EAC/ByG,EAAQzG,GAAKyG,EAAQzG,EAAI,GAAKsU,EAAKtU,EAAI,GAEzC,OAAOyG,CACT,EAKO,EAAAolB,cAAP,SAAqBvJ,EAAckC,GACjC,GAAIlC,GAAQkC,GAAclC,GAAQkC,EAChC,MAAM,IAAI3mB,MAAM,wCAElB,OAAOykB,EAAO,EAAIA,EAAOkC,EAAalC,CACxC,EAEO,EAAA8T,cAAP,SAAqBJ,EAAyBxR,GAA9C,WACE,OAAOwR,EAAKv5B,KAAI,SAAA8mB,GAAK,SAAKsI,cAActI,EAAGiB,QAAAA,EAAcwR,EAAKh7B,OAAzC,GACvB,EAQO,EAAAuhC,gBAAP,SAAuBpuB,EAAsB0b,GAC3C,OAAIA,EACKA,EAAKptB,KAAI,SAAC0S,GAAM,OAAAhB,EAAEgB,EAAF,IAEhBhB,EAAE/D,QAAQsB,SAErB,EAOO,EAAA8mB,SAAP,SAAgBle,EAAyB0sD,GACvC,IAAMx6D,EAAO8N,EAAKtZ,OAClB,OAAOsZ,EAAK7X,KAAI,SAAC0S,EAAGnP,GAAM,OAAAmP,EAAI6xD,EAAIhhE,GAAKghE,EAAIhhE,EAAIwG,EAArB,GAC5B,EAOO,EAAA6a,SAAP,SAAgB4/C,EAA2BC,GACzC,OAAID,EAAOjmE,SAAWkmE,EAAOlmE,QAGtBimE,EAAOxpC,OAAM,SAACtoB,EAAGnP,GAAM,OAAAmP,IAAM+xD,EAAOlhE,EAAb,GAChC,EACF,EA/GA,GAAa,EAAA6I,UAAAA,EAiHb,8BAwMA,QA9LS,EAAA8qB,qBAAP,SACIV,EAA2Bc,EAA8B1O,EAAuB5e,EAChF2e,EAAqBE,GACvB,IAAK2N,GAAoB5N,EAAYrqB,SAAW+4B,EAAU/4B,OAAS,EACjE,MAAM,IAAI6C,MAAM,sFAGlB,GAAIo1B,EAEF,IAAK,IAAI0E,EAAM,EAAGA,EAAM5D,EAAU/4B,OAAS,EAAG28B,IACxCA,GAAOtS,EAAYrqB,OACrBqqB,EAAYjkB,KAAK2yB,EAAU4D,EAAM,IAEjCtS,EAAYsS,GAAO5D,EAAU4D,EAAM,GAMzC,IAASA,EAAM,EAAGA,EAAMtS,EAAYrqB,OAAQ28B,IAC1C,GAAIA,EAAMlxB,EAAQzL,QAChB,GAAIyL,EAAQkxB,GAAO,EACjB,MAAM,IAAI95B,MAAM,qDAGlB4I,EAAQrF,KAAK,GAKjB,IAASu2B,EAAM,EAAGA,EAAMtS,EAAYrqB,OAAQ28B,IAC1C,GAAIA,EAAMvS,EAAUpqB,QAClB,GAAIoqB,EAAUuS,GAAO,EACnB,MAAM,IAAI95B,MAAM,uDAGlBunB,EAAUhkB,KAAK,GAKnB,IAASu2B,EAAM,EAAGA,EAA2B,EAArBtS,EAAYrqB,OAAY28B,IAC9C,GAAIA,EAAMrS,EAAKtqB,QACb,GAAIsqB,EAAKqS,GAAO,EACd,MAAM,IAAI95B,MAAM,iDAGlBynB,EAAKlkB,KAAK,GAKd,IAASu2B,EAAM,EAAGA,EAAMtS,EAAYrqB,OAAQ28B,IAAO,CACjD,GAAItS,EAAYsS,IAAQ,EACtB,MAAM,IAAI95B,MAAM,2CAGlB,GAAIynB,EAAKqS,IAAQtS,EAAYsS,IAAQrS,EAAKqS,EAAMtS,EAAYrqB,SAAWqqB,EAAYsS,GACjF,MAAM,IAAI95B,MAAM,qC,CAGtB,EAGO,EAAAwrB,yBAAP,SACI0K,EAA8BttB,EAA4B2e,EAC1DC,EAAgCC,EAAgBumD,EAAwB1mD,GAC1E,GAAKA,EAAL,CAIA,GAAIG,EAAKtqB,SAAW,GAAK+4B,EAAU/4B,OAAS,GAC1C,MAAM,IAAI6C,MAAM,gEAGlB,GAAI4I,EAAQzL,SAAY+4B,EAAU/4B,OAAS,EACzC,MAAM,IAAI6C,MAAM,6DAGlB,GAAIwnB,EAAYrqB,SAAY+4B,EAAU/4B,OAAS,EAC7C,MAAM,IAAI6C,MAAM,mEAGlB,IAAK,IAAI85B,EAAM,EAAGA,EAAM5D,EAAU/4B,OAAS,EAAG28B,IAC5CvO,EAAao5C,wBACTzuC,EAAU4D,GAAOk0C,EAAgB,EAAI,IAAKplE,EAAQkxB,GAAMvS,EAAUuS,GAAMtS,EAAYsS,GAAMrS,EAAMqS,EAChGA,EAAM5D,EAAU/4B,OAAS,EAAGmqB,E,CAEpC,EAaO,EAAAyO,uBAAP,SACIX,EAA2Bc,EAA8BttB,EAAmB2e,EAC5EC,EAAuBC,EAAgBH,GACzC,GAAI4O,EAAU/4B,QAAU,EACtB,MAAM,IAAI6C,MAAM,8CAIlB,IAAMgtB,EAAa,CAACkJ,EAAU,GAAIA,EAAU,IAI5C,OAFA3K,EAAaq5C,mBACTxvC,EAAkBc,EAAWlJ,EAAYpkB,EAAS2e,EAAWC,EAAaC,EAAMH,GAC7E0F,CACT,EAYO,EAAA63C,uBAAP,SACI3uC,EAA8B4uC,EAA+Bl8D,EAAmB2e,EAChFC,EAAuBC,EAAgBH,GACzC,GAAI4O,EAAU/4B,QAAU,GAAK2nE,EAAW3nE,QAAU,EAChD,MAAM,IAAI6C,MAAM,2DAIlB,IAAMgtB,EAAa,CAACkJ,EAAU,GAAI4uC,EAAW,IAG7C,OADAv5C,EAAaq5C,oBAAmB,EAAO1uC,EAAWlJ,EAAYpkB,EAAS2e,EAAWC,EAAaC,EAAMH,GAC9F0F,CACT,EAKe,EAAA43C,mBAAf,SACIxvC,EAA2Bc,EAA8BlJ,EAAsBpkB,EAC/E2e,EAA8BC,EAAgCC,EAAgBH,GAChF,GAAI8N,EACF,IAAK,IAAI0E,EAAM,EAAGA,EAAM5D,EAAU/4B,OAAS,EAAG28B,IAC5C9M,EAAWzpB,KAAK,QAGlB,IAASu2B,EAAM,EAAGA,EAAM5D,EAAU/4B,OAAS,EAAG28B,IAC5C9M,EAAWzpB,KAAKgoB,EAAao5C,wBACzBzuC,EAAU4D,EAAM,GAAIlxB,EAAQkxB,GAAMvS,EAAUuS,GAAMtS,EAAYsS,GAAMrS,EAAMqS,EAAKA,EAAM5D,EAAU/4B,OAAS,EACxGmqB,GAGV,EAIe,EAAAq9C,wBAAf,SACII,EAAgBh8D,EAAgBggB,EAAkBD,EAAgBrB,EAAgBu9C,EAClFC,EAAsB39C,GACxB,IAAM49C,EAAUn8C,GAAYD,EAAS,GAAK,EAC1C,IAAIxB,GAAuB,WAAZA,EAsBb,OAAOjqB,KAAK0f,OAAQgoD,EAASt9C,EAAKu9C,GAAgBv9C,EAAKw9C,GAAgBC,GAAWn8D,EAAU,GArB5F,OAAQue,GACN,IAAK,QAGH,OAFAG,EAAKu9C,GAAgB,EACrBv9C,EAAKw9C,GAAgB,EACd5nE,KAAK0f,OAAQgoD,EAASG,GAAWn8D,EAAU,GACpD,IAAK,aACL,IAAK,aACH,GAAiB,IAAbggB,EACF,MAAM,IAAI/oB,MAAM,uDAEhB,IACMmlE,IADoBJ,EAASh8D,EAAS,GAAKA,EACX,GAAKA,EAAS+f,EAASi8C,EAI7D,OAHAt9C,EAAKu9C,GACY,eAAZ19C,EAA4BjqB,KAAK0f,OAAOooD,EAAY,GAAK,GAAK9nE,KAAK0f,MAAMooD,EAAY,GAC1F19C,EAAKw9C,GAAgBE,EAAY19C,EAAKu9C,GAC/B3nE,KAAK0f,OAAQgoD,EAASI,EAAYr8C,GAAU/f,EAAU,GAEjE,QACE,MAAM,IAAI/I,MAAM,4BAKxB,EACF,EAxMA,GAAa,EAAAurB,aAAAA,EA0Mb,8BA+CA,QA3CS,EAAA2D,qBAAP,SACIwyC,EAA8BC,EAAoBC,EAA+BC,EACjFC,GACF,GAAyB,IAArBJ,EAAUvkE,QAAsC,IAAtBykE,EAAWzkE,OACvC,MAAM,IAAI6C,MAAM,8BAGlB,IAAI+hE,EACAC,EACAC,EAEAN,GACFI,EAAIL,EAAU,GACdM,EAAIN,EAAU,KAEdK,EAAIL,EAAU,GACdM,EAAIN,EAAU,IAGhB,IAAIQ,GAAQ,EAUZ,GARIL,GACFI,EAAIL,EAAW,GACfM,EAAO,IAEPD,EAAIL,EAAW,GACfM,EAAO,GAGLN,EAAWM,KAAUF,EACvB,MAAM,IAAIhiE,MAAM,sBAGlB,GAAI+hE,GAAK,GAAKE,GAAK,GAAKD,GAAK,EAC3B,MAAM,IAAIhiE,MAAM,2BAGlB,GAAI8hE,IAAcv3D,EAAc22D,iBAAiBY,EAAW,CAACC,EAAGE,IAC9D,MAAM,IAAIjiE,MAAM,0CAGlB,MAAO,CAAC+hE,EAAGE,EAAGD,EAChB,EACF,EA/CA,GAAa,EAAA/yC,SAAAA,EAkDA,EAAAtB,UAAY,qBACZ,EAAAC,SAAW,oB,uHCjcxB,iBACE,WAAYtvB,GACVN,OAAOO,OAAOC,KAAMF,EACtB,CAUF,OAPE,sBAAW,uBAAQ,C,IAAnB,sBAKE,OAJKE,KAAKC,YACRD,KAAKC,UACDT,OAAOU,oBAAoBF,MAAMG,OAAOC,KAAI,SAAAC,GAAQ,gBAAI,EAAiCA,GAArC,IAA8CC,KAAK,MAEtGN,KAAKC,SACd,E,gCACF,EAbA,GAsBa,EAAAM,4BAA8B,SAAoCT,GAC3E,WAAIU,EAA0BV,EAA9B,C,m2ECtBJ,cAEA,UAqEM2vE,EAA2B,SAACluE,GAAiB,OAAuB,GAAvB1C,KAAKE,KAAKwC,EAAO,GAAjB,EAE/CmuE,EAAO,EACLC,EAAqB,WAAM,OAAAD,GAAA,EAYpB,EAAA/C,gBACT,SAAMrnE,EAAwBonE,EAAsBkD,EAAsB7E,GAAkC,0C,gEAEhGkD,EAAawB,EAAyBG,GACtCC,EAAgBvqE,EAAQ+iE,OAAO91B,aAEjC,CAAChxC,KAAM0sE,EAAY/zD,MAAO41D,eAAeC,SAAWD,eAAeE,W,iBAUrE,O,sBARMlJ,EAAiBxhE,EAAQ2jE,oBAC/B3jE,EAAQ+jE,iBACRvC,EAAemJ,mBACXvD,EAA+B,EAAuBmD,EACtD,EAA4B5B,GAEhC3oE,EAAQmwC,QAER,GAAMo6B,EAAcK,SAASC,WAAWC,O,OAGxC,OAHA,SAEMxU,EAAciU,EAAcQ,iBAC9BtF,IAEIuF,EAAevF,KACR5pE,IAAI,IAAI8Q,WAAW2pD,EAAa,EAAGgU,IACzC,CAAP,EAAOU,IAIA,CAAP,EAAO,IAAIr+D,WAAW2pD,EAAY7tD,MAAM,EAAG6hE,K,cAG7CC,EAAcU,U,6BAI1B,iBAeE,WAAoBjrE,GAAA,KAAAA,QAAAA,EAClBtF,KAAKwwE,aAAe,IAAIzvE,IACxBf,KAAKywE,YAAc,IAAI1vE,IACvBf,KAAK0wE,2BAA6B,GAClC1wE,KAAK2wE,eAAiB,GACtB3wE,KAAK4wE,gBAAkB,IAAI7vE,GAC7B,CA4LF,OA1LE,YAAA2pE,OAAA,SAAOO,EAAehxD,GACpB,IAAM42D,EAAiB52D,EAAKf,OACtB43D,EAAY72D,EAAKuuB,WACjBuoC,EAAY92D,EAAKwuB,WACjBlnC,EAAOkuE,EAAyBsB,GAGhCC,EAAehxE,KAAKwwE,aAAa1uE,IAAImpE,GAC3C,IAAK+F,EACH,MAAM,IAAIxvE,MAAM,yCAElB,GAAIwvE,EAAapB,eAAiBmB,EAChC,MAAM,IAAIvvE,MAAM,gDAAyCwvE,EAAapB,aAAY,uBAAemB,IAInG,IAAME,EAAwBjxE,KAAKsF,QAAQ+iE,OAAO91B,aAE9C,CAAC2+B,kBAAkB,EAAM3vE,KAAI,EAAE2Y,MAAO41D,eAAeqB,UAAYrB,eAAesB,WAG9ExV,EAAcqV,EAAsBZ,iBAC1C,IAAIp+D,WAAW2pD,GAAaz6D,IAAI,IAAI8Q,WAAW4+D,EAAgBC,EAAWC,IAC1EE,EAAsBI,QAItB,IAAMvK,EAAiB9mE,KAAKsF,QAAQ2jE,oBACpCjpE,KAAKsF,QAAQ+jE,iBACbvC,EAAemJ,mBAAmBgB,EAAuB,EAAGD,EAAapH,QAAQ1wD,OAAQ,EAAG3X,IAE5F,IAAAkpE,WAAU,WAAW,WAAM,kDAAqCQ,EAAE,IAAvC,IAE3BjrE,KAAK0wE,2BAA2B3rE,KAAKksE,EACvC,EAEA,YAAArG,OAAA,SAAO0G,EAAqBC,GAE1B,IAAMC,EAAqBxxE,KAAKwwE,aAAa1uE,IAAIwvE,GACjD,IAAKE,EACH,MAAM,IAAIhwE,MAAM,6CAGlB,IAAMiwE,EAA0BzxE,KAAKwwE,aAAa1uE,IAAIyvE,GACtD,IAAKE,EACH,MAAM,IAAIjwE,MAAM,kDAElB,GAAIgwE,EAAmB5B,eAAiB6B,EAAwB7B,aAC9D,MAAM,IAAIpuE,MAAM,qDAElB,IAAMD,EAAOkuE,EAAyB+B,EAAmB5B,cAGnD9I,EAAiB9mE,KAAKsF,QAAQ2jE,oBACpCjpE,KAAKsF,QAAQ+jE,iBACbvC,EAAemJ,mBACXuB,EAAmB5H,QAAQ1wD,OAAQ,EAAGu4D,EAAwB7H,QAAQ1wD,OAAQ,EAAG3X,EACvF,EAEA,YAAA6qE,uBAAA,SAAuBlzD,EAAmB02D,EAAsBzD,GAC9D,IAAIlB,EACJ,GAAIkB,EAAgB,CAElB,QAAW5pE,KADX0oE,EAAKjrE,KAAK4wE,gBAAgB9uE,IAAIqqE,IAE5B,MAAM,IAAI3qE,MAAM,qCAElB,GAAI0X,IAAWizD,EAKb,OAJA,IAAA1B,WACI,WACA,WAAM,oEAAuDmF,EAAY,mBACrE3E,EAAE,8BADA,IAEHA,EAETjrE,KAAK4wE,gBAAgBjvE,OAAOwqE,E,MAE5BlB,EAAK0E,IAQP,OALA3vE,KAAKwwE,aAAarvE,IAAI8pE,EAAI,CAACrB,QAAS,CAACqB,GAAE,EAAEvpE,KAAM,EAAAgwE,YAAYC,QAASz4D,OAAM,GAAG02D,aAAY,IACzF5vE,KAAK4wE,gBAAgBzvE,IAAI+X,EAAQ+xD,IACjC,IAAAR,WACI,WACA,WAAM,oEAAuDmF,EAAY,mBAAW3E,EAAE,gBAAhF,IACHA,CACT,EAEA,YAAAsB,yBAAA,SAAyBrzD,GACvB,IAAM+xD,EAAKjrE,KAAK4wE,gBAAgB9uE,IAAIoX,QACzB3W,IAAP0oE,IACFjrE,KAAKwwE,aAAa7uE,OAAOspE,GACzBjrE,KAAK4wE,gBAAgBjvE,OAAOuX,IAC5B,IAAAuxD,WAAU,WAAW,WAAM,yEAA4DQ,EAA5D,IAE/B,EAGA,YAAAtrB,OAAA,SAAOp+C,EAAc2Y,QAAA,IAAAA,IAAAA,EAAQ41D,eAAe8B,QAAU9B,eAAesB,SAAWtB,eAAeC,UAC7F,IAEIrD,EAFEuB,EAAawB,EAAyBluE,GAK5C,IAAK2Y,EAAQ41D,eAAe8B,WAAa9B,eAAe8B,QAAS,CAC/D,IAAIC,EAAU7xE,KAAKywE,YAAY3uE,IAAImsE,GAC9B4D,IACHA,EAAU,GACV7xE,KAAKywE,YAAYtvE,IAAI8sE,EAAY4D,IAGjCnF,EADEmF,EAAQlzE,OAAS,EACPkzE,EAAQnnC,MAGR1qC,KAAKsF,QAAQ+iE,OAAO91B,aAAa,CAAChxC,KAAM0sE,EAAY/zD,MAAK,G,MAIvEwyD,EAAY1sE,KAAKsF,QAAQ+iE,OAAO91B,aAAa,CAAChxC,KAAM0sE,EAAY/zD,MAAK,IAGvE,IAAM0vD,EAAU,CAACqB,GAAI0E,IAAsBjuE,KAAM,EAAAgwE,YAAYC,QAASz4D,OAAQwzD,GAI9E,OAHA1sE,KAAKwwE,aAAarvE,IAAIyoE,EAAQqB,GAAI,CAACrB,QAAO,EAAEgG,aAAcruE,KAE1D,IAAAkpE,WAAU,WAAW,WAAM,oDAAuClpE,EAAI,mBAAWqoE,EAAQqB,GAA9D,IACpBrB,CACT,EAEA,YAAA9nE,IAAA,SAAImpE,G,MACF,OAAgC,QAAzB,EAAAjrE,KAAKwwE,aAAa1uE,IAAImpE,UAAG,eAAErB,OACpC,EAEA,YAAAwB,QAAA,SAAQH,GACN,IAAM6G,EAAa9xE,KAAKwwE,aAAa1uE,IAAImpE,GACzC,IAAK6G,EACH,MAAM,IAAItwE,MAAM,iCASlB,OANA,IAAAipE,WAAU,WAAW,WAAM,mDAAsCQ,EAAE,wBAAgB6G,EAAWlI,QAAQqB,GAA3E,IAE3BjrE,KAAKwwE,aAAa7uE,OAAOspE,GACzBjrE,KAAK2wE,eAAe5rE,KAAK+sE,EAAWlI,QAAQ1wD,QAGrC44D,EAAWlC,YACpB,EAEM,YAAA9E,SAAN,SAAeG,EAAeF,G,gGAE5B,KADM+G,EAAa9xE,KAAKwwE,aAAa1uE,IAAImpE,IAEvC,MAAM,IAAIzpE,MAAM,uBAGlB,UAAM,IAAAmrE,iBAAgB3sE,KAAKsF,QAASwsE,EAAWlI,QAAQ1wD,OAAQ44D,EAAWlC,aAAc7E,I,cAAxF,S,YAGF,YAAAvB,sBAAA,W,gBACE,IAAqB,QAAAxpE,KAAK0wE,4BAA0B,+BAAzCx3D,EAAM,SAERq3D,S,kGAETvwE,KAAK0wE,2BAA6B,G,IAClC,IAAqB,QAAA1wE,KAAK2wE,gBAAc,8BAAE,CAArC,IAAMz3D,MAAM,SAEHgB,MAAQ41D,eAAe8B,WAAa9B,eAAe8B,QAE7D5xE,KAAKywE,YAAY3uE,IAAIoX,EAAO3X,MAAOwD,KAAKmU,GAExCA,EAAOq3D,S,mGAGXvwE,KAAK2wE,eAAiB,EACxB,EAEA,YAAAhrE,QAAA,WACE3F,KAAKywE,YAAY5lE,SAAQ,SAACgnE,GACxBA,EAAQhnE,SAAQ,SAAAqO,GACdA,EAAOq3D,SACT,GACF,IAEAvwE,KAAKwwE,aAAa3lE,SAAQ,SAACknE,GACzBA,EAAQnI,QAAQ1wD,OAAOq3D,SACzB,IAEAvwE,KAAKwwE,aAAe,IAAIzvE,IACxBf,KAAKywE,YAAc,IAAI1vE,GACzB,EACF,EAjNA,GAmNa,EAAAwnE,qBAAuB,W,IAAC,sDACjC,WAAIyJ,EAAkB,WAAlBA,EAAkB,aAAI1C,IAAI,IAA9B,C,8vBC7UJ,cACA,UACA,UACA,YACA,SACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,aACA,QACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,aACA,UAOa,EAAA9D,wBAA+D,IAAIzqE,IAAI,CAClF,CAAC,MAAO,CAACyb,EAASC,MAClB,CAAC,OAAQ,CAACD,EAASE,OACnB,CAAC,QAAS,CAACF,EAASy1D,QACpB,CAAC,MAAO,CAACt1D,EAAUzL,MACnB,CAAC,SAAU,CAAC,EAAAghE,OAAQ,EAAAC,2BACpB,CAAC,SAAU,CAAC,EAAAC,OAAQ,EAAAD,2BACpB,CAAC,OAAQ,CAAC31D,EAASK,OACnB,CAAC,QAAS,CAACL,EAAS61D,QACpB,CAAC,OAAQ,CAAC71D,EAASM,OACnB,CAAC,QAAS,CAACN,EAAS81D,QAEpB,CAAC,cAAe,CAACC,EAAKx1D,YAAaw1D,EAAKv1D,6BACxC,CAAC,UAAW,CAAC,EAAAw1D,UACb,CAAC,gBAAiB,CAAC,EAAAC,gBACnB,CAAC,OAAQ,CAACj2D,EAASlB,KAAMkB,EAASW,sBAClC,CAAC,OAAQ,CAACX,EAASzd,OACnB,CAAC,UAAW,CAACyd,EAASk2D,UACtB,CAAC,OAAQ,CAACl2D,EAASY,OACnB,CAAC,SAAU,CAAC,EAAAG,OAAQ,EAAAC,wBACpB,CAAC,OAAQ,CAAC,EAAAC,KAAM,EAAAC,sBAChB,CAAC,gBAAiB,CAAC,EAAAC,cAAe,EAAAC,+BAClC,CAAC,MAAO,CAACpB,EAASqB,MAClB,CAAC,OAAQ,CAACrB,EAASm2D,OACnB,CAAC,MAAO,CAACh2D,EAAU/F,MACnB,CAAC,SAAU,CAAC,EAAAg8D,OAAQ,EAAAC,wBACpB,CAAC,MAAO,CAACr2D,EAAS0B,IAAK1B,EAASs2D,uBAChC,CAAC,QAAS,CAACn2D,EAAUsB,QACrB,CAAC,MAAO,CAACzB,EAASu2D,MAClB,CAAC,MAAO,CAACv2D,EAAS4B,MAClB,CAAC,SAAU,CAAC,EAAA40D,SACZ,CAAC,QAAS,CAACx2D,EAAS+B,QACpB,CAAC,SAAU,CAAC,EAAAC,OAAQ,EAAAC,wBACpB,CAAC,iBAAkB,CAAC,EAAAw0D,eAAgB,EAAAC,gCACpC,CAAC,OAAQ,CAAC12D,EAAS22D,OACnB,CAAC,OAAQ,CAAC,EAAAz0D,KAAM,EAAAsR,sBAChB,CAAC,oBAAqB,CAACuiD,EAAK1zD,kBAAmB0zD,EAAKzzD,mCACpD,CAAC,gBAAiB,CAACyzD,EAAKxzD,cAAewzD,EAAKa,+BAC5C,CAAC,UAAW,CAACz2D,EAAUqC,UACvB,CAAC,iBAAkB,CAACrC,EAAU02D,iBAC9B,CAAC,wBAAyB,CAAC,EAAAC,aAAc,EAAAC,8BACzC,CAAC,qBAAsB,CAAC,EAAAC,UAAW,EAAAC,2BACnC,CAAC,YAAa,CAACj3D,EAAS6C,UAAW7C,EAASs2D,uBAC5C,CAAC,OAAQ,CAACn2D,EAAU4C,OACpB,CAAC,cAAe,CAAC5C,EAAU+2D,cAC3B,CAAC,MAAO,CAACl3D,EAASkD,MAClB,CAAC,SAAU,CAAC,EAAAC,SAEZ,CAAC,UAAW,CAAC4yD,EAAK1yD,QAAS0yD,EAAKzyD,yBAChC,CAAC,MAAO,CAACnD,EAAUhG,MACnB,CAAC,MAAO,CAAC6F,EAASuD,MAClB,CAAC,MAAO,CAACvD,EAASwD,MAClB,CAAC,MAAO,CAAC,EAAA2kD,IAAK,EAAAgP,qBACd,CAAC,MAAO,CAACh3D,EAAU2D,MACnB,CAAC,QAAS,CAAC,EAAAszD,QACX,CAAC,aAAc,CAACp3D,EAASq3D,aACzB,CAAC,YAAa,CAAC,EAAAjzD,UAAW,EAAAH,wBAC1B,CAAC,aAAc,CAAC,EAAAE,WAAY,EAAAF,wBAC5B,CAAC,YAAa,CAAC,EAAAC,UAAW,EAAAD,wBAC1B,CAAC,YAAa,CAAC,EAAAK,UAAW,EAAAL,wBAC1B,CAAC,aAAc,CAAC,EAAAI,WAAY,EAAAJ,wBAC5B,CAAC,WAAY,CAAC,EAAAqzD,SAAU,EAAArzD,wBACxB,CAAC,WAAY,CAAC,EAAAszD,SAAU,EAAAtzD,wBACxB,CAAC,eAAgB,CAAC,EAAAD,aAAc,EAAAC,wBAChC,CAAC,kBAAmB,CAAC,EAAAuzD,gBAAiB,EAAAvzD,wBACtC,CAAC,kBAAmB,CAAC,EAAAwzD,gBAAiB,EAAAxzD,wBACtC,CAAC,OAAQ,CAACjE,EAASwE,OACnB,CAAC,SAAU,CAAC,EAAAE,OAAQ,EAAAgzD,wBACpB,CAAC,UAAW,CAAC13D,EAAS6E,UACtB,CAAC,MAAO,CAAC7E,EAAS8E,MAClB,CAAC,OAAQ,CAAC9E,EAAS23D,OACnB,CAAC,QAAS,CAAC,EAAApmE,MAAO,EAAAyT,uBAClB,CAAC,yBAA0B,CAAC,EAAA4yD,cAAe,EAAAC,+BAC3C,CAAC,QAAS,CAAC,EAAA3hE,MAAO,EAAAmP,uBAClB,CAAC,OAAQ,CAACrF,EAASsF,OACnB,CAAC,UAAW,CAAC,EAAAL,QAAS,EAAAC,yBACtB,CAAC,MAAO,CAAC/E,EAAUjG,MACnB,CAAC,MAAO,CAAC8F,EAAS2F,MAClB,CAAC,OAAQ,CAAC3F,EAAS4F,OACnB,CAAC,kBAAmB,CAAC5F,EAAS83D,gBAAiB93D,EAASs2D,uBACxD,CAAC,OAAQ,CAAC,EAAAzwD,OACV,CAAC,YAAa,CAAC,EAAArS,UAAW,EAAAsS,2BAC1B,CAAC,QAAS,CAAC,EAAAiyD,S,sJChGA,EAAAC,YAAc,SAACC,EAAmBz6D,GAC7C,OAAQy6D,GACN,KAAK,EACH,OAAOz6D,EACT,KAAK,EACH,MAAO,eAAQA,EAAQ,KACzB,KAAK,EACH,MAAO,eAAQA,EAAQ,KACzB,KAAK,EACH,MAAO,eAAQA,EAAQ,KACzB,QACE,MAAM,IAAIxY,MAAM,UAAGizE,EAAS,iCAElC,EAEa,EAAAC,oBACT,SAAC9lD,EAAyB+lD,EAAoCC,EAAiBC,GAC7E,YADwB,IAAAF,IAAAA,GAAA,QAAoC,IAAAC,IAAAA,GAAA,QAAiB,IAAAC,IAAAA,EAAA,GAMtE,EACT,EAES,EAAAC,sBAAwB,SAACtsD,EAAkBoG,GAAoC,wBACpFpG,EAAU,iDAAmD,GAAE,mBAC/DoG,EAAa,qCAAuC,GAAE,WAF8B,C,qWC3B5F,cAEA,UACA,UACA,UAGA,UACA,UACA,SA6Ha,EAAAmmD,8BACT,SAACz9D,EAA+BwO,EAA2BjlB,EAC1DokB,EAAgC+vD,EAAmBC,EAAmBC,EAAkB1sD,EACxF2sD,GACC,IAAMC,EAAuC,SAAtBv0E,EAAW4mC,OAC5B4tC,EAAaD,EAAiB99D,EAAO,GAAGW,KAAK,GAAKX,EAAO,GAAGW,KAAK,GACjE8T,EAAY9G,EAAY,GACxBqwD,EAAWF,EAAiBnwD,EAAY,GAAKA,EAAY,GACzDswD,EAAYH,EAAiBnwD,EAAY,GAAKA,EAAY,GAC1DgH,EAAcmpD,EAAiBnwD,EAAY,GAAKA,EAAY,GAE5DuwD,EAASJ,IAAmBC,EAAa,GAAM,GAAKA,EAAa,GAAM,IAAMppD,EAAc,GAAM,EAGjGwpD,EAAYL,EAAiBnpD,EAAcqpD,EAAWC,EACtDG,EAAYN,EAAiBE,EAAWC,EAAYtpD,EACpD0pD,EAA0C,CAAC,EAAG,EAAG,GACjDC,EAAoBZ,GAAa,EAAI,CAAC,EAAG,EAAG,GAAK,CAAC,EAAG,EAAG,GACxDa,EAAW,CACfh3E,KAAKE,KAAK02E,EAAYE,EAAc,GAAKC,EAAkB,IAC3D/2E,KAAKE,KAAK22E,EAAYC,EAAc,GAAKC,EAAkB,IAC3D/2E,KAAKE,KAAKgtB,EAAY4pD,EAAc,GAAKC,EAAkB,MAG7D,IAAAnL,WAAU,WAAW,WAAM,8CAAiCoL,EAAjC,IAE3B,IAAMC,EAAmBN,EAAUJ,GAAkBC,EAAa,GAAM,EAAI,EAAI,EAAKO,EAAkB,GAEjGG,EAAaJ,EAAc,GAAKC,EAAkB,GAClDI,EAAaL,EAAc,GAAKC,EAAkB,GAClDK,EAAYp3E,KAAKu/B,IAAIu3C,EAAc,GAAKG,EAAkBH,EAAc,IAExEO,EAAYlB,EAAYe,GAAe,EACvCI,EAAYlB,EAAYe,GAAe,EACvCI,EAAWlB,EAAWe,GAAc,EAEpCI,EAAeb,EAAS,CAACM,EAAkB,EAAG,GAAK,CAAC,EAAG,EAAG,GAC1DxxE,GAAI,IAAAgyE,6BAA4Bh/D,EAAO,GAAG0C,UAE1Cu8D,EAAgB,CACpB,4DAAqDf,GAA+B,IAArBM,EAAyB,eAAQxxE,EAAC,KAAMA,EAAC,MACxG,4DAAqDkxE,EAAS,eAAQlxE,EAAC,KAAMA,EAAC,OAE5EkyE,EAAmB,+DACwBhB,EAAS,eAAQlxE,EAAC,KAAMA,EAAC,4CAChDkxE,EAAS,eAAQlxE,EAAC,KAAMA,EAAC,yGAEsBkxE,EAAS,eAAQlxE,EAAC,KAAMA,EAAC,iIAEjEkxE,EAAS,MAAQ,GAAE,sBAUlD,OARIhtD,IACF+tD,EAAcxxE,KAAK,+DAAwDywE,EAAS,eAAQlxE,EAAC,KAAMA,EAAC,OACpGkyE,GAAoB,oEAC8BhB,EAAS,eAAQlxE,EAAC,KAAMA,EAAC,4CACpD8wE,EAAiB,IAAM,KAAG,OAAGI,EAAS,MAAQ,GAAE,kBAIlE,EAAP,KACK1vD,GAAQ,CACXkZ,QAAS,CAAC,CAAC/mB,KAAMgN,EAAajL,SAAU1C,EAAO,GAAG0C,SAAUy8D,YAAa,EAAA/E,YAAYC,UACrFnH,cAAe,WAAM,OAAEtjD,EAAG2uD,EAAS,GAAI9Q,EAAG8Q,EAAS,GAAIa,EAAGb,EAAS,GAA9C,EACrBc,gBAAiB,WAAM,0BACrB,EAAAC,cAAa,6SAIbL,EAAcj2E,KAAK,IAAG,wCACHi2E,EAAc53E,OAAM,oDACrC62E,EAAS,eAAQlxE,EAAC,KAAMA,EAAC,4CACNiyE,EAAc53E,OAAS,EAAC,8FAER2Y,EAAO,GAAGW,KAAK3X,KAAK,KAAI,4DACxBgX,EAAO,GAAGW,KAAK3X,KAAK,KAAI,8DACtB2kB,EAAY3kB,KAAK,KAAI,qEACd,EAAAkM,UAAUqO,eAAeoK,GAAalX,MAAM,EAAG,GAAGzN,KAAK,KAAI,gEAChEO,EAAWmoB,YAAY,GAAE,aAAKnoB,EAAWmoB,YAAY,GAAE,yDAC9DnoB,EAAWooB,KAAK,GAAE,aAAKpoB,EAAWooB,KAAK,GAAE,4DACtCpoB,EAAWuJ,QAAQ,GAAE,aAAKvJ,EAAWuJ,QAAQ,GAAE,8DAC7CvJ,EAAWkoB,UAAU,GAAE,aAAKloB,EAAWkoB,UAAU,GAAE,+CAClEisD,EAAS,8CACTC,EAAS,6CACVC,EAAQ,sBAC/BsB,EAAgB,qBA9MtB,SAACpB,EAAyBc,EAAoBC,EAAoBC,EAAmBS,EACpFjoD,EAAyBkoD,EAAmCC,EAAuBC,EACnFlB,EAAsB97D,QAF8D,IAAA68D,IAAAA,GAAA,QAC3D,IAAAC,IAAAA,GAAA,QAAmC,IAAAC,IAAAA,EAAA,QAAuB,IAAAC,IAAAA,EAAA,QACnF,IAAAlB,IAAAA,EAAA,QAAsB,IAAA97D,IAAAA,EAAA,OACrB,IAsBMi9D,EAAgB7B,EAAiB,6DAGA,6DAIjC8B,EAAkB9B,EAAiB,+GAOA,+GAQnC+B,EAAU/B,EAAiB,YAAc,YACzCgC,EAAShC,EAAiB,YAAc,YACxCjkD,EAAMikD,EAAiB,MAAQ,MAC/BhkD,EAAMgkD,EAAiB,MAAQ,MAC/BiC,EAAe,gEAENjC,EAAiB,cAAgB,cAAa,+BAChDjkD,EAAG,0CACHA,EAAG,0CAELC,EAAG,4DACHA,EAAG,6LAGJA,EAAG,8CACC,IAAAojD,aAAYuC,EAAmB/8D,GAAS,6JAG9Bm9D,EAAO,mCAA2BC,EAAM,sBAC9DH,EAAa,4EA/DK,SAACnB,GACnB,OAAQA,GACN,KAAK,EACH,MAAO,uBACT,KAAK,EACH,MAAO,yBAAkB97D,EAAQ,+CACnC,KAAK,EACH,MAAO,2BACT,QACE,MAAM,IAAIxY,MAAM,2BAAoBs0E,EAAgB,uBAE1D,CAsDEwB,CAAYP,GAAkB,gCAI1BQ,EAAUnC,EAAkBc,GAAaE,EAAW,kCACxCW,EAAiB,kBACnCM,GAC0D,kCACxCN,EAAiB,kEAEjCM,EAAY,gCAEP,IAAA7C,aAAYuC,EAAmB/8D,GAAS,UACbo8D,GAAYD,EAAY,kCACxCY,EAAiB,kBACnCM,GAC0D,kCACxCN,EAAiB,kEAEjCM,EAAY,gCAEP,IAAA7C,aAAYuC,EAAmB/8D,GAAS,UAEzCw9D,EAAU,UA5EI,SAAC1B,GACnB,OAAQA,GACN,KAAK,EACH,MAAO,qCACT,KAAK,EACH,MAAO,yCACT,QACE,MAAM,IAAIt0E,MAAM,2BAAoBs0E,EAAgB,uBAE1D,CAmEmB2B,CAAYT,IAEzBU,GAAU,IAAAlD,aAAYsB,EAAkB97D,GACxC29D,EACFvC,GAAiB,IAAAZ,aAAYuC,EAAmB/8D,IAAY,IAAAw6D,aAAYwC,EAAmBh9D,GACzF49D,EACFxC,GAAiB,IAAAZ,aAAYwC,EAAmBh9D,IAAY,IAAAw6D,aAAYuC,EAAmB/8D,GAsB/F,MArBiB,iBACjB,IAAA06D,qBAAoB9lD,EAAYkoD,EAAgD,IAArBhB,EAAwB,GAAE,oEAClC6B,EAAK,qBACtDvC,EAAiBmC,EAAUC,EAAO,6EAGeI,EAAK,qBACtDxC,EAAiBoC,EAAUD,EAAO,oFAGsBG,EAAO,wCAC7C5B,EAAgB,uHAInBV,EAAiB,cAAgB,cAAa,oBAC7D8B,EAAe,oBACf,IAAApC,uBAAsB+B,EAASjoD,GAAW,gGAK9C,CAwFQipD,CACIzC,EAAgBc,EAAWC,EAAWC,EAAU5tD,OAASjmB,GAAW,EAAO8zE,EAAa,GACxFA,EAAa,GAAIA,EAAa,GAAI/xE,GAAE,yBAExCkxE,GACI,IAAAsC,4BAA2BlC,EAAmBD,EAAerxE,OAAG/B,GAAY6yE,EAAgBa,IAC5F,IAAA8B,wBACInC,EAAmBD,EAAerxE,OAAG/B,GAAY6yE,EAAgBa,GAAW,OAAO1zE,EACnF4yE,GA/BW,GAiC3B,C,8WCtOJ,cAEA,UACA,UAGA,UACA,UACA,SA8Ha,EAAA6C,uCACT,SAAC1gE,EAA+BwO,EAA2BjlB,EAC1DokB,EAAgC+vD,EAAmBC,EAAmBC,EAAkB1sD,EACxF2sD,GACC,IAAMC,EAAuC,SAAtBv0E,EAAW4mC,OAC5B4tC,EAAaD,EAAiB99D,EAAO,GAAGW,KAAK,GAAKX,EAAO,GAAGW,KAAK,GACjE8T,EAAY9G,EAAY,GACxBqwD,EAAWF,EAAiBnwD,EAAY,GAAKA,EAAY,GACzDswD,EAAYH,EAAiBnwD,EAAY,GAAKA,EAAY,GAC1DgH,EAAcmpD,EAAiBnwD,EAAY,GAAKA,EAAY,GAC5DuwD,EACFJ,EAAiBC,EAAa,GAAM,GAAKppD,EAAc,GAAM,EAAIqpD,EAAW,GAAM,GAAKrpD,EAAc,GAAM,EAGzGwpD,EAAYL,EAAiBnpD,EAAcqpD,EAAWC,EACtDG,EAAYN,EAAiBE,EAAWC,EAAYtpD,EACpD0pD,EAA0CH,EAC5C,CAAC,EAAG,EAAG,GACP,CAAEC,GAAa,GAAKC,GAAa,EAAK,EAAI,GAAID,EAAY,GAAKC,GAAa,EAAI,EAAI,GAAI,GACtFE,EACFJ,EAAS,CAAC,EAAG,EAAG,GAAK,CAACC,GAAa,EAAI,EAAI,EAAGA,EAAY,GAAKC,GAAa,EAAI,EAAI,EAAG,GACrFG,EAAW,CACfh3E,KAAKE,KAAK02E,EAAYE,EAAc,GAAKC,EAAkB,IAC3D/2E,KAAKE,KAAK22E,EAAYC,EAAc,GAAKC,EAAkB,IAC3D/2E,KAAKE,KAAKgtB,EAAY4pD,EAAc,GAAKC,EAAkB,MAG7D,IAAAnL,WAAU,WAAW,WAAM,qDAAwCoL,EAAxC,IAE3B,IAAMC,EAAmBN,EAAS,EAAI,EAChCS,EAAYp3E,KAAKu/B,IAAIu3C,EAAc,GAAKG,EAAkBH,EAAc,IAGxEY,EAAgB,CACpB,4DAAqDf,EAAS,YAAc,MAAK,MACjF,2DAEEgB,EAAmB,GAQvB,OAPIhuD,IACF+tD,EAAcxxE,KAAK,+DAAwDywE,EAAS,YAAc,MAAK,OACvGgB,GAAoB,oEAC8BhB,EAAS,YAAc,MAAK,4CACvDJ,EAAiB,IAAM,KAAG,OAAGI,EAAS,MAAQ,GAAE,kBAGlE,EAAP,KACK1vD,GAAQ,CACXkZ,QAAS,CAAC,CAAC/mB,KAAMgN,EAAajL,SAAU1C,EAAO,GAAG0C,SAAUy8D,YAAa,EAAA/E,YAAYC,UACrFnH,cAAe,WAAM,OAAEtjD,EAAG2uD,EAAS,GAAI9Q,EAAG8Q,EAAS,GAAIa,EAAGb,EAAS,GAA9C,EACrBc,gBAAiB,WAAM,0BACrB,EAAAC,cAAa,qBACbL,EAAcj2E,KAAK,MAAK,wCACLi2E,EAAc53E,OAAM,oDACrC62E,EAAS,YAAc,MAAK,iEACYl+D,EAAO,GAAGW,KAAK3X,KAAK,KAAI,4DAC7BgX,EAAO,GAAGW,KAAK3X,KAAK,KAAI,4DACxBgX,EAAO,GAAGW,KAAK3X,KAAK,KAAI,8DACtB2kB,EAAY3kB,KAAK,KAAI,qEACd,EAAAkM,UAAUqO,eAAeoK,GAAalX,MAAM,EAAG,GAAGzN,KAAK,KAAI,gEAChEO,EAAWmoB,YAAYosD,EAAiB,EAAI,GAAE,aACrFv0E,EAAWmoB,YAAYosD,EAAiB,EAAI,GAAE,sGAG9Cv0E,EAAWkoB,UAAU,IAAM,EACvB,GACCloB,EAAWmoB,YAAYosD,EAAiB,EAAI,GAAK,IAAMv0E,EAAWkoB,UAAU,GAAK,GAAE,4BAExFloB,EAAWkoB,UAAU,IAAM,EACvB,GACCloB,EAAWmoB,YAAYosD,EAAiB,EAAI,GAAK,IAAMv0E,EAAWkoB,UAAU,GAAK,GAAE,6FAExFloB,EAAWooB,KAAK,GAAKpoB,EAAWooB,KAAK,GAAE,6FAEvCpoB,EAAWooB,KAAK,GAAKpoB,EAAWooB,KAAK,GAAE,gEACHpoB,EAAWuJ,QAAQ,GAAE,aAAKvJ,EAAWuJ,QAAQ,GAAE,8DAC9CvJ,EAAWkoB,UAAU,GAAE,aAAKloB,EAAWkoB,UAAU,GAAE,+CAClEisD,EAAS,8CACTC,EAAS,6CACVC,EAAQ,sBAC/BsB,EAAgB,qBA1MtB,SAACpB,EAAyByB,EAAiBjoD,EAAyBkoD,EACnEhB,QADyB,IAAAe,IAAAA,GAAA,QAA0C,IAAAC,IAAAA,GAAA,QACnE,IAAAhB,IAAAA,EAAA,GACC,IAAMp0E,GAAO,IAAA8yE,aAAYsB,EAAkB,OAoBrCmB,EAAgB7B,EAAiB,+DAGA,+DAIjC8B,EAAkB9B,EAAiB,+GAOA,+GAQnC+B,EAAU/B,EAAiB,iBAAmB,iBAC9CgC,EAAShC,EAAiB,iBAAmB,iBAC7CjkD,EAAMikD,EAAiB,MAAQ,MAC/BhkD,EAAMgkD,EAAiB,MAAQ,MAE/B6C,EAAe,mCACF7C,EAAiB,iBAAmB,iBAAgB,mCACtDA,EAAiB,cAAgB,cAAa,iCAChDjkD,EAAG,4CACHA,EAAG,4CAELC,EAAG,8DACHA,EAAG,uOAGY+lD,EAAO,mDACxBz1E,EAAI,4DAEa01E,EAAM,mDACvB11E,EAAI,gGAIH0vB,EAAG,iCACb6lD,EAAa,gEACgCnB,EAAgB,MAEzDoC,EAAU9C,EAAiB,oCACbU,EAAgB,sEAEhCmC,EAAY,mCAEPv2E,EAAI,UACoB,oCACbo0E,EAAgB,sEAEhCmC,EAAY,mCAEPv2E,EAAI,UAEP81E,EAAU,oCACI1B,EAAgB,qCACjBV,EAAiB,iBAAmB,iBAAgB,8KAInEA,EAAiB,oCACA,oCAAmC,gKAxFpC,SAACU,GACnB,OAAQA,GACN,KAAK,EACH,MAAO,iDACT,KAAK,EACH,MAAO,mhBAUT,QACE,MAAM,IAAIt0E,MAAM,2BAAoBs0E,EAAgB,uBAE1D,CAyEI2B,CAAY3B,GAAiB,mCAExBp0E,EAAI,kBAwBb,MApBiB,eACnB,IAAAgzE,qBAAoB9lD,EAAYkoD,EAAgD,IAArBhB,EAAwB,GAAE,kEAClCp0E,EAAI,mBACrD0zE,EAAiB8C,EAAUV,EAAO,yEAGe91E,EAAI,mBACrD0zE,EAAiBoC,EAAUU,EAAO,mFAGyBx2E,EAAI,sCAC7Co0E,EAAgB,iHAGjBV,EAAiB,cAAgB,cAAa,oBAC7D8B,EAAe,oBACf,IAAApC,uBAAsB+B,EAASjoD,GAAW,iEACIknD,EAAgB,yBAIlE,CAkFMqC,CAA6B/C,EAAgB5sD,OAASjmB,GAAW,EAAOuzE,GAAiB,qBAEvFN,GAAS,IAAAsC,4BACIlC,EAAmBD,EAAe,WAAOpzE,GAAY6yE,EAAgBa,IACzE,IAAA8B,wBACInC,EAAmBD,EAAe,WAAOpzE,GAAY6yE,EAAgBa,GAAW,OAChF1zE,EAAW4yE,GArCL,GAuC3B,C,i3BChOJ,cAEA,UACA,UACA,UAyNa,EAAAiD,iCACT,SAAC9gE,EAA+BwO,EAA2BjlB,EAC1Dw3E,GACC,IAAM7vD,EAAUlR,EAAO3Y,OAAS,EAE1BsmB,EAAcpkB,EAAWokB,YACzBqzD,EAAa,EAAA9rE,UAAUjL,KAAK0jB,GAM5B4wD,EAAW,CACfh3E,KAAKE,KAAKu5E,EAAa,IACvB,EACA,IAEF,IAAA7N,WAAU,WAAW,WAAM,oDAAuCoL,EAAvC,IAE3B,IAAM77D,GAAW,IAAAs8D,6BAA4Bh/D,EAAO,GAAG0C,UACvD,OAAO,EAAP,KACK8L,GAAQ,CACXkZ,QAAS,CAAC,CACR/mB,KAAMogE,EAA6BA,EAA2BpzD,GAAeA,EAC7EjL,SAAU1C,EAAO,GAAG0C,SACpBy8D,YAAa,EAAA/E,YAAYC,UAE3BnH,cAAe,WAAM,OAAEtjD,EAAG2uD,EAAS,GAAI9Q,EAAG8Q,EAAS,GAAIa,EAAGb,EAAS,GAA9C,EACrBc,gBAAiB,SAAC4B,GAA+B,OAjPrD,SAACA,EAA4BjhE,EAA+BzW,EAC3DokB,EAAgCuD,EAAkBgwD,EAA+BhD,EACjFx7D,QADiF,IAAAw7D,IAAAA,GAAA,GAEhF,IAAMJ,EAAuC,SAAtBv0E,EAAW4mC,OAC5BgxC,EAASrD,EAAiB,EAAI,EAC9BsD,EAAStD,EAAiB,EAAI,EAC9BuD,EAAavD,EAAiB,EAAI,EAClCkD,EAAa,EAAA9rE,UAAUjL,KAAK0jB,GAC5B2zD,EAAgBpD,EAAS,EAAI,EAC7B3sD,EAAQhoB,EAAWgoB,MACnBF,EAASrR,EAAO,GAAGW,KACnBkT,EAAwBxC,EAAO,GAAKE,EACpCD,EAAyBD,EAAO,GAElC6tD,EAAmB,2DACoBhB,EAAS,eAAQx7D,EAAQ,KAAMA,EAAQ,wCAC9Dw7D,EAAS,eAAQx7D,EAAQ,KAAMA,EAAQ,iBAEvDwO,IACFguD,GAAoB,gEAC0BhB,EAAS,eAAQx7D,EAAQ,KAAMA,EAAQ,wCAClEo7D,EAAiB,IAAM,KAAG,OAAGI,EAAS,MAAQ,GAAE,cAGrE,IAAMqD,EAAarD,EAAS,EAAI,EAC1BzkD,GAAI,IAAA+nD,eAAc,IAAKxhE,EAAO,GAAG0C,SAAU1C,EAAO,GAAGW,KAAM4gE,GAC3DE,GAAK,IAAAD,eAAc,KAAMxhE,EAAO,GAAG0C,SAAU1C,EAAO,GAAGW,KAAM4gE,GAC7DG,EAAiB,CAACD,EAAIhoD,GACxBvI,GACFwwD,EAAej0E,MAAK,IAAA+zE,eAAc,OAAQxhE,EAAO,GAAG0C,SAAU,CAACiL,EAAY0zD,IAAcE,IAE3F,IAAM9vE,GAAS,IAAAkwE,gBAAe,SAAU3hE,EAAO,GAAG0C,SAAUiL,EAAa4zD,GACnEK,EAAe,sCACAV,EAAuB,cAAgB,iBAAgB,4CAChEA,EAAuB,cAAgB,iBAAgB,4CACvDA,EAAuB,cAAgB,iBAAgB,cAAMI,EAAa,oCACpEJ,EAAuB,cAAgB,iBAAgB,mRAM7Cx+D,EAAQ,cAAM4+D,EAAa,2CAC/BA,EAAa,iDACb5+D,EAAQ,sHAGfA,EAAQ,0BAAkBA,EAAQ,mBAAWA,EAAQ,2GAExCA,EAAQ,uPAOnBA,EAAQ,0BAAkBA,EAAQ,mBAAWA,EAAQ,iDACpDA,EAAQ,gCAAwBA,EAAQ,mBAAWA,EAAQ,yPAO/CA,EAAQ,0JAINA,EAAQ,+XAUhB+W,EAAEjvB,IAAI,cAAe,cAAe,KAAM,MAAK,4CAC/CivB,EAAEjvB,IAAI,cAAe,cAAe,SAAU,MAAK,4CACnDivB,EAAEjvB,IAAI,cAAe,cAAe,SAAU,MAAK,4CACnDivB,EAAEjvB,IAAI,cAAe,cAAe,SAAU,MAAK,6CAEpDi3E,EAAGj3E,IAAI,QAAS,OAAQ,OAAQ,MAAK,gDAChCkY,EAAQ,2SAMhB++D,EAAGj3E,IAAI,QAAS,OAAQ,QAAS,MAAK,+DAEjBkY,EAAQ,mWAMd2+D,EAAU,gHAErB5nD,EAAEjvB,IAAI,cAAe,cAAe,KAAM,MAAK,4CAC/CivB,EAAEjvB,IAAI,cAAe,cAAe,SAAU,MAAK,4CACnDivB,EAAEjvB,IAAI,cAAe,cAAe,SAAU,MAAK,4CACnDivB,EAAEjvB,IAAI,cAAe,cAAe,SAAU,MAAK,6CAEpDi3E,EAAGj3E,IAAI,QAAS,OAAQ,OAAQ,MAAK,gDAChCkY,EAAQ,mdASZ+W,EAAEjvB,IAAI,cAAe,cAAe,KAAM,MAAK,4CAC/CivB,EAAEjvB,IAAI,cAAe,cAAe,SAAU,MAAK,4CACnDivB,EAAEjvB,IAAI,cAAe,cAAe,SAAU,MAAK,4CACnDivB,EAAEjvB,IAAI,cAAe,cAAe,SAAU,MAAK,6CAEpDi3E,EAAGj3E,IAAI,QAAS,OAAQ,QAAS,MAAK,gDACjCkY,EAAQ,0WAUT4+D,EAAa,8DACXpwD,EAAU,YAAc,MAAK,wBACtDzf,EAAO5H,IAAI,QAAS,IAAK,QAAS,KAAM,SAAQ,yBAGhDg4E,EAAc,0CACMpwE,EAAOuM,gBAAgB,cAAa,oCAC5CvM,EAAOqwE,WAAW,gBAAiB,GAAE,iCACxCrwE,EAAOqwE,WAAW,gBAAiBT,GAAW,gCAC/C5vE,EAAOqwE,WAAW,gBAAiBX,GAAO,gCAC1C1vE,EAAOqwE,WAAW,gBAAiBV,GAAO,qLAI/B9vD,EAAsB,yDACRA,EAAsB,6XAQ1C5O,EAAQ,yBAAiBA,EAAQ,mBAAWA,EAAQ,6HAEvCA,EAAQ,wBAAgBy+D,EAAM,qVAUzCz+D,EAAQ,yBAAiBA,EAAQ,mBAAWA,EAAQ,gIAEvCA,EAAQ,wBAAgB0+D,EAAM,uMAKzBvtD,EAAqB,uDACvBA,EAAqB,0DAEtDiqD,EAAiB2D,EAAGj3E,IAAI,QAAS,OAAQ,OAAQ,gBAChCi3E,EAAGj3E,IAAI,QAAS,eAAgB,OAAQ,QAAO,2CAC3CivB,EAAEjvB,IAAI,eAAgB,cAAe,cAAe,eAAc,mMAM/D0mB,EAAU,WAAa,MAAK,wBAClDzf,EAAOswE,YAAY,aAAc,SAAQ,eAG/C,MAAO,cACTd,EAAae,iBAAgB,MAA7Bf,EAAY,SAAqBS,IAAc,IAAEjwE,IAAM,mBACvDytE,EAAgB,sDACuBvxD,EAAY3kB,KAAK,KAAI,2DAClBgX,EAAO,GAAGW,KAAK3X,KAAK,KAAI,uDAC5BO,EAAWuJ,QAAQ,GAAE,aAAKvJ,EAAWuJ,QAAQ,GAAE,0DAC5CvJ,EAAWmoB,YAAYosD,EAAiB,EAAI,GAAE,aACjFv0E,EAAWmoB,YAAYosD,EAAiB,EAAI,GAAE,yDACZv0E,EAAWkoB,UAAU,GAAE,aAAKloB,EAAWkoB,UAAU,GAAE,4FAGrFloB,EAAWkoB,UAAU,IAAM,EACvB,GACCloB,EAAWmoB,YAAYosD,EAAiB,EAAI,GAAK,IAAMv0E,EAAWkoB,UAAU,GAAK,GAAE,wBAExFloB,EAAWkoB,UAAU,IAAM,EACvB,GACCloB,EAAWmoB,YAAYosD,EAAiB,EAAI,GAAK,IAAMv0E,EAAWkoB,UAAU,GAAK,GAAE,uFACxBloB,EAAWooB,KAAK,GAAKpoB,EAAWooB,KAAK,GAAE,yFACvCpoB,EAAWooB,KAAK,GAAKpoB,EAAWooB,KAAK,GAAE,sBAC3GsvD,EAAagB,YAAW,iBACxBhB,EAAaiB,sCAAsClB,GAAW,gBAChE9C,EAAS0D,EAAeC,EAAW,IACnC,CA8BqDM,CAC7ClB,EAAcjhE,EAAQzW,EAAYokB,EAAauD,EAAyB,IAAhBqtD,EAAS,IAA4B,IAAhBA,EAAS,IAAU,EAChG77D,EAF6C,GAIrD,C,0GC3PS,EAAA48D,cAAgB,uV,65BCC7B,cACA,UACA,UACA,UAEA,UA4Ca,EAAAkB,2BACT,SAACc,EAAyBc,EAAyCh4E,EAAci4E,EAChFC,EAAoB3D,EAAgB4D,EAAgBC,QADc,IAAAp4E,IAAAA,EAAA,YAClE,IAAAk4E,IAAAA,GAAA,QAAoB,IAAA3D,IAAAA,EAAA,SAAgB,IAAA4D,IAAAA,GAAA,QAAgB,IAAAC,IAAAA,EAAA,IACnD,IAAM/D,EAAa2D,EAAc,GAAKd,EAAc,GAC9C5C,EAAa0D,EAAc,GAAKd,EAAc,GAC9CmB,EAAaH,EAAa7D,EAAaE,EACvC+D,EAAaJ,EAAa3D,EAAYF,EACtCD,EAAmBiE,EAAaL,EAAc,GAC9CO,EAAgBhE,EAAYyD,EAAc,GAEhD,KAAQE,GAAmC,IAArB9D,GAA+C,IAArB8C,EAAc,MACrDgB,GAAoC,IAArB9D,GAA+C,IAArBA,IAC5CiE,EAAaL,EAAc,IAAO,GAAKzD,EAAYyD,EAAc,IAAO,GAA0B,IAArBd,EAAc,GAC/F,MAAM,IAAIp3E,MAAM,wBAAiBo4E,EAAU,sCACvC9D,EAAgB,iCAAyB8C,EAAc,GAAE,0DACjC9C,EAAgB,0CACrCiE,EAAU,iDAAyCL,EAAc,GAAE,uBACtEzD,EAAS,kDAA0CyD,EAAc,GAAE,0BACnEd,EAAc,GAAE,gBAEtB,MAAO,mDAC4B9C,EAAgB,YAAIp0E,EAAI,cAAMq4E,EAAajE,EAAgB,cAAMkE,EAAU,wDACzEt4E,EAAI,cAAMs0E,EAAa4C,EAAc,GAAE,cAAM3C,EAAS,sCAE1E2C,EAAc,GAAE,mCAChBA,EAAc,GAAE,uCACZ9C,EAAgB,gCACvBG,EAAS,yCAEFyD,EAAc,GAAE,aAAKA,EAAc,GAAE,aAAKA,EAAc,GAAE,sZAUrEG,EAAS,IAAM,kBAAiB,gBAC5CF,EAAY,6BAAsBA,EAAUrkE,gBAAgB,cAAa,KAAM,GAAE,yDACvCygE,EAAU,iCAErC8D,EAAS,UAAGh7E,KAAKE,KAAK+6E,EAAkB7D,IAAe,iCAAgC,6BACzF4D,EAAS,4BAAqBC,GAAoB,IAAG,sCAE9Cp4E,EAAI,8FAGEu4E,EAAa,yRA3FR,SAACjqE,EAAoB2pE,GACtD,OAAI3pE,EACK,uJAG6C2pE,EAAY,iBAAmB,GAAE,gBAI9E,kJAGqCA,EAAY,iBAAmB,GAAE,eAGjF,CAkFYO,CAA2BN,EAAYD,GAAU,gHAInBM,EAAa,+MAI7CN,EAAY,iBAAmB,GAAE,yaAUV,IAArB7D,EAAyB,GAAK,6DAA4D,yBAlGvE,SAAC8D,EAAqB9D,GACnD,OAAI8D,EACK,+NAIoB,IAArB9D,EAAyB,GAAK,8DAA6D,8OAKpE,IAArBA,EAAyB,GAAK,4CAA2C,eAG1E,yRAMsB,IAArBA,EAAyB,GAAK,0CAAyC,cAGnF,CA6EYqE,CAAuBP,EAAY9D,GAAiB,8MAU5D,EAEJ,IAAMsE,EAAyB,SAACpqE,EAAoB2pE,GAClD,OAAI3pE,EACK,gJAG8B2pE,EAAY,iBAAmB,GAAE,oBAI/D,gJAGsBA,EAAY,iBAAmB,GAAE,mBAGlE,EAOa,EAAA5B,uBACT,SAACa,EAAyBc,EAAyCh4E,EAAci4E,EAChFC,EAAoB3D,EAAgB4D,EAAgBC,EACpD3E,QAFkE,IAAAzzE,IAAAA,EAAA,YAClE,IAAAk4E,IAAAA,GAAA,QAAoB,IAAA3D,IAAAA,EAAA,SAAgB,IAAA4D,IAAAA,GAAA,QAAgB,IAAAC,IAAAA,EAAA,SACpD,IAAA3E,IAAAA,GAAA,GACC,IAAMY,EAAa6C,EAAc,GAAKc,EAAc,GAC9C1D,EAAa4C,EAAc,GAAKc,EAAc,GAC9CK,EAAaH,EAAa7D,EAAaE,EACvC+D,EAAaJ,EAAa3D,EAAYF,EAE5C,GAAMiE,EAAaN,EAAc,IAAO,GAAKK,EAAaL,EAAc,IAAO,GACzEzD,EAAYyD,EAAc,IAAO,EACrC,MAAM,IAAIl4E,MAAM,qBAAcw4E,EAAU,iDACpCN,EAAc,GAAE,wBAAgBK,EAAU,iDAC1CL,EAAc,GAAE,uBAAezD,EAAS,iDAAyCyD,EAAc,KAErG,IAAMW,EAAgBL,EAAaN,EAAc,GAC3CY,EAAgBP,EAAaL,EAAc,GAC3CO,EAAgBhE,EAAYyD,EAAc,GAC1Ca,EAAgBpF,EAClB,kIAGsCY,EAAU,4DACVC,EAAU,mMAKTgE,EAAU,mCAA2BN,EAAc,GAAE,iEACnDK,EAAU,mCAA2BL,EAAc,GAAE,0BAC5FU,EAAuBR,EAAYD,GAAU,gIAIR1D,EAAS,mCAA2ByD,EAAc,GAAE,qEAC9C1D,EAAU,mCAA2B0D,EAAc,GAAE,8IAGrEC,EAAY,iBAAmB,GAAE,gLAO5Cj4E,EAAI,iNAG2Bg4E,EAAc,GAAE,sIAI7DE,EAAa,2CAAoCF,EAAc,GAAE,MACpD,wCAAiCA,EAAc,GAAE,SAAO,6ZAUzBA,EAAc,GAAE,0JAEdA,EAAc,GAAE,0FAKlE,sPAMkC3D,EAAU,gDAEpBsE,EAAa,8CACbC,EAAa,8CACbL,EAAa,0KAITI,EAAa,+EACXC,EAAa,qIAG7CF,EAAuBR,EAAYD,GAAU,2GAKfM,EAAa,2TAMrBN,EAAY,iBAAmB,GAAE,wJAOvCj4E,EAAI,oSA/GI,SAACk4E,GAC7B,OAAAA,EAAa,gDAAkD,+CAA/D,CAqHIY,CAAwBZ,GAAW,2eAkBrC,MAAO,mDAC4Bl4E,EAAI,aAAKq4E,EAAU,cAAMC,EAAU,sDACnCt4E,EAAI,aAAKs0E,EAAU,cAAMC,EAAS,sCAClD2C,EAAc,GAAE,qCAChBA,EAAc,GAAE,kCACnB3C,EAAS,yCAEJyD,EAAc,GAAE,aAAKA,EAAc,GAAE,aAAKA,EAAc,GAAE,mNAInEG,EAAS,IAAM,kBAAiB,kBAC5CF,EAAY,6BAAsBA,EAAUrkE,gBAAgB,cAAa,KAAM,GAAE,gCAClEukE,EAAS,UAAGh7E,KAAKE,KAAK+6E,EAAkB7D,IAAe,iCAAgC,+BACzF4D,EAAS,4BAAqBC,GAAoB,IAAG,0CAE5Cp4E,EAAI,+UAQ1B64E,EAAa,UAGf,EAoFS,EAAAxlD,wBACT,SAACjP,EAA2BxO,EAA+BqU,EAC1D1G,EAAgCw1D,EAChCrF,QAAA,IAAAA,IAAAA,GAAA,GACC,IAAM7kD,EAASjZ,EAAO,GAAGW,KACnBuY,EAASlZ,EAAO,GAAGW,KAEnByiE,EAAanqD,EAAOxiB,MAAM,GAAI,GAC9B4sE,EAAanqD,EAAOziB,MAAM,GAAI,GAC9B6sE,EAAYH,EAAsBA,EAAoB1sE,MAAM,GAAI,GAAKkX,EAAYlX,MAAM,GAAI,GAC3F4rE,GAAY,IAAAb,eAAc,YAAaxhE,EAAO,GAAG0C,SAAU4gE,GAG3DrmE,EAAY,EAFC,IAAAukE,eAAc,aAAcxhE,EAAO,GAAG0C,SAAU0gE,IAChD,IAAA5B,eAAc,aAAcxhE,EAAO,GAAG0C,SAAU2gE,GACxBhB,GACrC5tD,EAAY,EAAAvf,UAAUjL,KAAKq5E,GAE3B5F,EAAYzkD,EAAOA,EAAO5xB,OAAS,GACnCu2E,EAAW3kD,EAAOA,EAAO5xB,OAAS,GAClCs2E,EAAYzkD,EAAOA,EAAO7xB,OAAS,GACnC62E,EAASN,EAAW,GAAM,GAAKD,EAAY,GAAM,EACjD,GAAwC,IAAA4F,sBAAqBlvD,GAA5DvC,EAAkB,qBAAEC,EAAe,kBAGpCusD,EAAoBZ,GAAa,EAAI,CAAC,EAAG,EAAG,GAAK,CAAC,EAAG,EAAG,GACxD0E,EAA0C,CAAC,EAAG,EAAG,GACjD7D,EAAW,CACfh3E,KAAKE,KAAKk2E,EAAYyE,EAAc,GAAK9D,EAAkB,IAC3D/2E,KAAKE,KAAKi2E,EAAY0E,EAAc,GAAK9D,EAAkB,IAC3D/2E,KAAKE,KAAKgtB,EAAY2tD,EAAc,GAAK9D,EAAkB,KAGvD57D,GAAW,IAAAs8D,6BAA4Bh/D,EAAO,GAAG0C,UACjD6+D,EAAarD,EAAS,EAAI,EAC1BsF,GAAI,IAAAhC,eAAc,IAAKxhE,EAAO,GAAG0C,SAAU,EAAF,OAAM0gE,IAAU,IAAE1F,EAAWE,EAAW2D,IAAa,GAAAA,GAC9Fn1D,GAAI,IAAAo1D,eAAc,IAAKxhE,EAAO,GAAG0C,SAAU,EAAF,OAAM2gE,IAAU,IAAEzF,EAAUD,EAAY4D,IAAa,GAAAA,GAC9F9vE,GACF,IAAAkwE,gBAAe,SAAU3hE,EAAO,GAAG0C,SAAU,CAAC+R,EAAWipD,EAAWC,EAAY4D,GAAaA,GACjGtkE,EAAUxP,KAAK+1E,GACfvmE,EAAUxP,KAAK2e,GACfnP,EAAUxP,KAAKgE,GACf,IAAMiwE,EAAiB,CAAC8B,EAAGp3D,GACrB8E,EAAUlR,EAAO3Y,OAAS,EAC1B63E,EA3HR,SAAC/B,EAAmBjsD,EAAkBa,EAAyB9U,EAC9D6gE,QAAA,IAAAA,IAAAA,GAAA,GACC,IAAM2F,EAAiBxmE,EAAU,GAC3BymE,EAAiBzmE,EAAU,GAC3B0mE,EAAgB1mE,EAAU,GAC1B2mE,EAAY3mE,EAAU,GACtB4mE,EAAY5mE,EAAU,GACtB0kE,EAAiB1kE,EAAU,GAC3B6mE,GAAiB,IAAApvE,kBAAiB+uE,EAAexxE,MAAO0xE,EAAc1xE,OACtE8xE,GAAiB,IAAArvE,kBAAiBgvE,EAAezxE,MAAO0xE,EAAc1xE,OACtEyQ,GAAW,IAAAs8D,6BAA4B/hE,EAAU,GAAG7S,KAAK8W,QAoE/D,MAvCe,4EAC6CyiE,EAAcv5E,KAAK+uD,QAAO,iBAClF,IAAA+jB,aAAYC,EAAWz6D,GAAS,kCACtB,IAAAw6D,aAAYC,EAAWz6D,GAAS,2CAC1By6D,EAAS,4EAhCT,WAIlB,IAHA,IAAMpvD,EAAQ61D,EAAU3xE,MAAM5K,OACxB28E,EAAYL,EAAc1xE,MAAM5K,OAClC48E,EAAS,wBAAiBL,EAAUx5E,KAAK+uD,QAAO,KAC3C9sD,EAAI0hB,EAAQ,EAAI,EAAGma,EAAI87C,EAAY,EAAG33E,GAAK,EAAGA,IAAK67B,IAC1D+7C,GAAU,qBAAc53E,EAAC,eAAO23E,EAAY,EAAI,uBAAgB97C,EAAC,KAAM,eAAc,KAOvF,OALA47C,EAAevwE,SAAQ,SAAAlH,GACrB43E,GAAU,qBAAc53E,EAAC,SAC3B,IACA43E,GAAU,qBAAcl2D,EAAQ,EAAC,sDACXA,EAAQ,EAAC,kBAEjC,CAsBIm2D,GAAa,6BACLN,EAAUO,aAAa,YAAW,qHAKcR,EAAcv5E,KAAK+uD,QAAO,iBAClF,IAAA+jB,aAAYC,EAAWz6D,GAAS,kCACtB,IAAAw6D,aAAYC,EAAWz6D,GAAS,2CAC1By6D,EAAS,4EA9BT,WAIlB,IAHA,IAAMnvD,EAAQ61D,EAAU5xE,MAAM5K,OACxB28E,EAAYL,EAAc1xE,MAAM5K,OAClC48E,EAAS,wBAAiBJ,EAAUz5E,KAAK+uD,QAAO,KAC3C9sD,EAAI2hB,EAAQ,EAAI,EAAGka,EAAI87C,EAAY,EAAG33E,GAAK,EAAGA,IAAK67B,IAC1D+7C,GAAU,qBAAc53E,EAAC,eAAO23E,EAAY,EAAI,uBAAgB97C,EAAC,KAAM,eAAc,KAOvF,OALA67C,EAAexwE,SAAQ,SAAAlH,GACrB43E,GAAU,qBAAc53E,EAAC,SAC3B,IACA43E,GAAU,qBAAcj2D,EAAQ,EAAC,sDACXA,EAAQ,EAAC,kBAEjC,CAoBIo2D,GAAa,6BACLP,EAAUM,aAAa,YAAW,iHAKS,IAAAjH,aAAYC,EAAWz6D,GAAS,wCACnEy6D,EAAS,yJAKzBjsD,EACI,0BAAmB4sD,EAAiB,cAAgB,WAAG,IAAAZ,aAAYC,EAAWz6D,GAAS,eAAa,KAChE,GAAE,qBAC1CqP,EAAe,qBACf4vD,EAAe0C,aAAa,oBAAqB,SAAQ,yBAK/D,CA4C2BC,CAAwB/C,EAAYrwD,EAASa,EAAiB9U,EAAW6gE,GAClG,GAAI5sD,EAAS,CACX,IAAMqzD,EAAiBzG,EAAiByD,EAAa,EACrDG,EAAej0E,MAAK,IAAA+zE,eAAc,OAAQxhE,EAAO,GAAG0C,SAAU1C,EAAO,GAAGW,KAAM4jE,G,CAahF,OAAO,EAAP,KACK/1D,GAAQ,CACXkZ,QAAS,CAAC,CAAC/mB,KAAMgN,EAAajL,SAAU1C,EAAO,GAAG0C,SAAUy8D,YAAa,EAAA/E,YAAYC,UACrFgF,gBAdsB,SAAC4B,GAA+B,2CACnCvD,EAAS,uCACTC,EAAS,sCACVC,EAAQ,gBAC9BqD,EAAae,iBAAgB,MAA7Bf,EAAY,SAAqBS,IAAc,IAAEjwE,IAAM,mBACvDytE,EAAgB,eAChBptD,EAAkB,eAEZosD,GAAS,IAAAsC,4BAA2BlC,EAAmB8D,EAAe1/D,EAAU2/D,IACvE,IAAA5B,wBAAuBnC,EAAmB8D,EAAe1/D,EAAU2/D,GAAU,gCAC3EA,EAAUvyC,OAV+B,EAetDojC,cAAe,WAAM,OAAEtjD,EAAG2uD,EAAS,GAAI9Q,EAAG8Q,EAAS,GAAIa,EAAGb,EAAS,GAA9C,GAEzB,C,kXC7dJ,aACA,UAEA,UAEM7yD,EAAiB,SAAC1L,GACtB,IAAKA,GAA4B,IAAlBA,EAAO3Y,QAAgB2Y,EAAO3Y,OAAS,EACpD,MAAM,IAAI6C,MAAM,0CAElB,GAA2B,IAAvB8V,EAAO,GAAG0C,SACZ,MAAM,IAAIxY,MAAM,sBAEpB,EAaMs6E,EACF,SAACxkE,EAA+BjX,EAAcQ,EAAiC24B,GAEzE,IAAMuiD,EACgB,IAAlBzkE,EAAO3Y,OAAekC,EARhC,SAACyW,EAA+BzW,GAC5B,WAAAN,6BACI,CAAC0lB,KAAMplB,EAAWolB,KAAM2T,SAAU/4B,EAAW+4B,SAAUoiD,gBAAiBn7E,EAAWm7E,iBADvF,CAOyCC,CAAoC3kE,EAAQzW,GAC7E8W,EAAYokE,EAAkB94D,SAAW3L,EAAOlX,KAAI,SAAA8mB,GAAK,OAAAA,EAAEjP,KAAKu5B,UAAP,IAAmBlxC,KAAK,KACjFwlB,EAA4B,CAACzlB,KAAI,EAAEkX,WAAY,CAAC,EAAAm6D,YAAYC,SAAUh6D,UAAS,GACrF,OAAO,EAAP,KACKmO,GAAQ,CACXhkB,IAAK,WAAM,WAAA43B,yBACP5T,EAAU,CAACxO,EAAO,IAAKkiB,EAAU,CAACuiD,EAAkB91D,MAAO,EAAgB81D,EAAkBniD,SADtF,GAGf,EAGK,EAAAw4C,OAAS,SAACrrE,EAAyBlG,GAC9CmiB,EAAejc,EAAQuQ,QAiBvBvQ,EAAQ8mE,QAAQiO,EAAiC/0E,EAAQuQ,OAAQ,SAAUzW,GAhB7C,SAAC0Z,EAAOxR,EAAQ4wB,GAE5C,IADA,IAAMS,EAAU,GACPF,EAAI,EAAGA,EAAI3f,EAAMhR,MAAM5K,OAAQu7B,KAClCP,EAAK/sB,QAAQstB,IAAM,GAAqB,IAAhBP,EAAKh7B,SAC/By7B,EAAQr1B,KAAK,uBAAgBm1B,EAAC,WAGlC,MAAO,CACL,UAAGE,EAAQ95B,KAAK,OAAS,sBAAeia,EAAM2hE,YAAY,eAAc,+BACxE,cAAO3hE,EAAM2hE,YAAY,eAAc,YAAIr7E,EAAWm7E,gBAAkB,EAAI,KAAO,IAAG,uCACzEzhE,EAAM2hE,YAAY,eAAc,qDAG7C,GAAInzE,EAAOswE,YAAY,aAAc,aAEzC,IACqG,CAAC/hE,OAAQ,CAAC,IACjH,EAEa,EAAA46D,OAAS,SAACnrE,EAAyBlG,GAC9CmiB,EAAejc,EAAQuQ,QAiBvBvQ,EAAQ8mE,QAAQiO,EAAiC/0E,EAAQuQ,OAAQ,SAAUzW,GAhB7C,SAAC0Z,EAAOxR,EAAQ4wB,GAE5C,IADA,IAAMS,EAAU,GACPF,EAAI,EAAGA,EAAI3f,EAAMhR,MAAM5K,OAAQu7B,KAClCP,EAAK/sB,QAAQstB,IAAM,GAAqB,IAAhBP,EAAKh7B,SAC/By7B,EAAQr1B,KAAK,uBAAgBm1B,EAAC,WAGlC,MAAO,CACL,UAAGE,EAAQ95B,KAAK,OAAS,sBAAeia,EAAM2hE,YAAY,eAAc,+BACxE,cAAO3hE,EAAM2hE,YAAY,eAAc,YAAIr7E,EAAWm7E,gBAAkB,EAAI,KAAO,IAAG,uCACzEzhE,EAAM2hE,YAAY,eAAc,qDAG7C,GAAInzE,EAAOswE,YAAY,aAAc,aAEzC,IACqG,CAAC/hE,OAAQ,CAAC,IACjH,EAEa,EAAA66D,yBAA2B,SAACtxE,GACrC,WAAAN,6BAA4BM,EAA5B,C,+UCxFJ,cACA,UAEA,UAoDa,EAAA2xE,QAAU,SAACzrE,IAlDD,SAACuQ,GACtB,GAA8B,IAA1BA,EAAO,GAAGW,KAAKtZ,OACjB,MAAM,IAAI6C,MAAM,kCAGlB,IAAK,CAAC,IAAK,IAAK,MAAM26E,SAAS7kE,EAAO,GAAGW,KAAK,IAC5C,MAAM,IAAIzW,MAAM,iDAGlB,GAA8B,IAA1B8V,EAAO,GAAGW,KAAKtZ,OACjB,MAAM,IAAI6C,MAAM,yCAGlB,GAAI8V,EAAO,GAAGW,KAAK,KAAOX,EAAO,GAAGW,KAAK,GACvC,MAAM,IAAIzW,MAAM,oDAEpB,CAmCEwhB,CAAejc,EAAQuQ,QACvB,IACMwO,EAAW,CACfzlB,KAAM,UACNkX,WAHiB7T,MAAMqD,EAAQuQ,OAAO3Y,QAAQqnB,KAAK,EAAA0rD,YAAYC,UAMjE5qE,EAAQ8mE,QAxCuB,SAAC/nD,EAA2BxO,GAC3D,IAAM2N,EAAc3N,EAAO,GAAGW,KAExB2C,EAAWtD,EAAO,GAAGW,KAAK,GAE1BqgE,EAAa,EAAA9rE,UAAUjL,KAAK0jB,GAAe,EAE3CjL,EAAW1C,EAAO,GAAG0C,SACrBO,GAAQ,IAAAu+D,eAAc,QAAS9+D,EAAUiL,EAAa,GACtDwM,GAAO,IAAAqnD,eAAc,OAAQ9+D,EAAU,CAACY,GAAW,GACnDwhE,GAAW,IAAAtD,eAAc,WAAY9+D,EAAUiL,EAAa,GAC5Dlc,GAAS,IAAAkwE,gBAAe,SAAUj/D,EAAUiL,EAAa,GAa/D,OAAO,EAAP,KACKa,GAAQ,CACXkZ,QAAS,CAAC,CAAC/mB,KAAMgN,EAAajL,SAAU1C,EAAO,GAAG0C,SAAUy8D,YAAa,EAAA/E,YAAYC,UACrFgF,gBAdsB,SAAC4B,GAA+B,qCACrC39D,EAAQ,qBACzB29D,EAAae,iBAAiB/+D,EAAOkX,EAAM2qD,EAAUrzE,GAAO,iBAE5DwvE,EAAagB,YAAW,iBACtBhB,EAAaiB,sCAAsClB,GAAW,6BAClD/9D,EAAM2hE,YAAY,cAAa,qBACvCzqD,EAAKyqD,YAAY,yBAAwB,cAAME,EAASF,YAAY,cAAa,kBACrFnzE,EAAOswE,YAAY,aAAc,SAAQ,QARW,EAetD7O,cAAe,WAAM,OAAEtjD,EAAGroB,KAAKE,KAAKu5E,EAAa,IAA5B,GAEzB,CAUkB+D,CAAyBv2D,EAAU/e,EAAQuQ,QAC7D,C,qVChEA,cACA,UAEA,UACA,UA0Da,EAAAm7D,cAAgB,SAAC1rE,IAxDP,SAACuQ,GACtB,GAA8B,IAA1BA,EAAO,GAAGW,KAAKtZ,OACjB,MAAM,IAAI6C,MAAM,kCAGlB,IAAK,CAAC,KAAM,KAAM,OAAO26E,SAAS7kE,EAAO,GAAGW,KAAK,IAC/C,MAAM,IAAIzW,MAAM,8CAGlB,GAA8B,IAA1B8V,EAAO,GAAGW,KAAKtZ,OACjB,MAAM,IAAI6C,MAAM,yCAGlB,GAAI8V,EAAO,GAAGW,KAAK,KAAOX,EAAO,GAAGW,KAAK,GACvC,MAAM,IAAIzW,MAAM,oDAEpB,CAyCEwhB,CAAejc,EAAQuQ,QAEvB,IAAMwO,EAAW,CACfzlB,KAAM,gBACNkX,WAAY,CAAC,EAAAm6D,YAAYC,QAAS,EAAAD,YAAYC,UAGhD5qE,EAAQ8mE,QA9C6B,SAAC/nD,EAA2BxO,GACjE,IAAM2N,EAAc3N,EAAO,GAAGW,KAAKlK,QACnCkX,EAAY,GAAKA,EAAY,GAAK,EAElC,IAAM1K,GAAQ,IAAAu+D,eAAc,QAASxhE,EAAO,GAAG0C,SAAU1C,EAAO,GAAGW,KAAM,GACnEwZ,GAAO,IAAAqnD,eAAc,OAAQxhE,EAAO,GAAG0C,SAAU,CAAC1C,EAAO,GAAGW,KAAK,IAAK,GACtElP,GAAS,IAAAkwE,gBAAe,SAAU3hE,EAAO,GAAG0C,SAAUiL,EAAa,GAEnEqzD,EAAa,EAAA9rE,UAAUjL,KAAK0jB,GAAe,EAsBjD,OAAO,EAAP,KACKa,GAAQ,CACXkZ,QAAS,CAAC,CAAC/mB,KAAMgN,EAAajL,SAAU1C,EAAO,GAAG0C,SAAUy8D,YAAa,EAAA/E,YAAYC,UACrFgF,gBAvBsB,SAAC4B,GAA+B,uEAEjCjhE,EAAO,GAAGW,KAAK,GAAK,EAAI,EAAC,mBAE9CsgE,EAAae,iBAAiB/+D,EAAOkX,EAAM1oB,GAAO,kBAElD,IAAAuzE,SAAQ,SAAQ,iBAEhB/D,EAAagB,YAAW,iBACtBhB,EAAaiB,sCAAsClB,GAAW,iZAQ9DvvE,EAAOswE,YAAY,aAAc,yBAAwB,QAjBL,EAwBtD7O,cAAe,WAAM,OAAEtjD,EAAGroB,KAAKE,KAAKu5E,EAAa,IAA5B,GAEzB,CAUkBiE,CAA+Bz2D,EAAU/e,EAAQuQ,QACnE,C,0ZCtEA,cACA,UAEA,UAiLMklE,EACF,SAACllE,EAA+BjX,EAAco8E,EAA8BC,EAC3Ez5D,EAAmB05D,GAClB,IAAM72D,EACgB,CAACzlB,KAAI,EAAEkX,WAAY,CAAC,EAAAm6D,YAAYC,QAAS,EAAAD,YAAYC,SAAUh6D,UAAWsL,GAChG,OAAO,EAAP,KACK6C,GAAQ,CACXhkB,IAAK,WAAM,OAxDf,SAACgkB,EAA2BhU,EAAe5H,EAAeuyE,EACzDC,EAAmCC,G,aAAA,IAAAA,IAAAA,EAAyB7qE,EAAEkI,UAC7D,IAAM+K,GAAe,EAAAvY,UAAUwY,SAASlT,EAAEmG,KAAM/N,EAAE+N,MAC9CgN,EAAcnT,EAAEmG,KAChBqgE,EAAa,EAAA9rE,UAAUjL,KAAKuQ,EAAEmG,MAE9B2kE,GAAY,EAIhB,GAAI73D,EAAa,CACf,IAAMI,EAAkB,EAAApZ,cAAcqZ,UAAUtT,EAAEmG,KAAM/N,EAAE+N,MAAM,GAChE,IAAKkN,EACH,MAAM,IAAI3jB,MAAM,gDAElByjB,EAAcE,EACdmzD,EAAa,EAAA9rE,UAAUjL,KAAK0jB,GAM5B,IALA,IAAM43D,EAA2C,IAA3B,EAAArwE,UAAUjL,KAAKuQ,EAAEmG,MACjC6kE,EAA2C,IAA3B,EAAAtwE,UAAUjL,KAAK2I,EAAE+N,MAGnC8kE,EAAkB,EACbp5E,EAAI,EAAGA,EAAIshB,EAAYtmB,OAAQgF,IAAK,CAC3C,IAAMq5E,EAAgC,QAAzB,EAAAlrE,EAAEmG,KAAKnG,EAAEmG,KAAKtZ,OAASgF,UAAE,QAAI,EAE1C,GAAIq5E,KADkC,QAAzB,EAAA9yE,EAAE+N,KAAK/N,EAAE+N,KAAKtZ,OAASgF,UAAE,QAAI,GAIxC,MAFAo5E,GAAmBC,C,EAKnBD,EAAkB,GAAM,GAAKF,GAAiBC,KAChDF,GAAY,E,MAIdA,GAAY,EAGd,OAAO,EAAP,KACK92D,GAAQ,CACX6wD,gBAAiB,SAAC4B,GAAiB,OA/JvC,SAACA,EAA4BzX,EAA0BC,EAA0Bkc,EAChFL,EAAoBM,EAAsBT,EAA8BU,EAAeC,EACvFC,EAAoBX,GACnB,IAGIY,EACAC,EAJEjF,EAAa,EAAA9rE,UAAUjL,KAAK07E,GAC5BO,EAAU3+E,KAAKE,KAAKu5E,EAAa,GAIf,iBAAbmE,EACTa,EAAmBC,EAAmB,SAACzrE,EAAG5H,GAAM,gBAAGuyE,EAAQ,aAAK3qE,EAAC,cAAM5H,EAAC,KAAxB,EACnB,mBAAbuyE,EAChBa,EAAmBC,EAAmBd,GAEtCa,EAAmBb,EAASgB,OAC5BF,EAAmBd,EAASiB,QAG9B,IA0BIC,EA1BAC,EAAgB,GACd70E,GAAS,IAAAkwE,gBAAe,aAAcoE,EAAYJ,EAAY,GAC9DnrE,GAAI,IAAAgnE,eAAc,QAASqE,EAAOrc,EAAO,GACzC52D,GAAI,IAAA4uE,eAAc,QAASsE,EAAOrc,EAAO,GAC/C,GAAImc,EAAa,CACf,IAAMW,EAAiB,SAAC5lE,GAGtB,IAFA,IAAM7N,EAAU,EAAAoC,UAAUqO,eAAe5C,GACnCyO,EAAoB,GACjB/iB,EAAIsU,EAAKtZ,OAAS,EAAGgF,GAAK,EAAGA,IAAK,CACzC,IAAM0jB,EAAMte,EAAOqwE,WAAW,gBAAiBz1E,EAAIs5E,EAAWt+E,OAASsZ,EAAKtZ,QAC5E+nB,EAAQ3hB,KAAK,UAAGqF,EAAQzG,GAAE,gBAAQ0jB,EAAG,cAAMpP,EAAKtU,GAAE,M,CAEpD,OAAO+iB,EAAQ/nB,OAAS,EAAI+nB,EAAQpmB,KAAK,KAAO,IAClD,EAEAs9E,EAAgB,oDACkB70E,EAAOrH,KAAK+uD,QAAO,0CACxCotB,EAAe/c,GAAM,qEAGA/3D,EAAOrH,KAAK+uD,QAAO,0CACxCotB,EAAe9c,GAAM,2B,CAMpC,GAAI6b,EACF,GAAIM,EAAa,CACf,IAAML,EAA0C,IAA1B,EAAArwE,UAAUjL,KAAKu/D,GAC/Bgc,EAA0C,IAA1B,EAAAtwE,UAAUjL,KAAKw/D,GAEnC4c,EADEd,GAAiBC,EACN/zE,EAAOswE,YAChB,aACAkE,EACIV,EAAgB,UAAG/qE,EAAEpQ,KAAK/B,MAAK,YAAImS,EAAEoqE,YAAY,KAAI,OAAQpqE,EAAEoqE,YAAY,cAC3EY,EAAgB,UAAG5yE,EAAExI,KAAK/B,MAAK,YAAIuK,EAAEgyE,YAAY,KAAI,OAAQhyE,EAAEgyE,YAAY,gBAEtE,4CACSnzE,EAAOuM,gBAAgB,mBAAkB,wIAI3DvM,EAAOswE,YACH,aAAckE,EAAiBzrE,EAAEoqE,YAAY,gBAAiBhyE,EAAEgyE,YAAY,kBAAiB,e,MAIvGyB,EAAa50E,EAAOswE,YAChB,aAAckE,EAAiBzrE,EAAEoqE,YAAY,cAAehyE,EAAEgyE,YAAY,oBAE3E,CACL,IAAKgB,EACH,MAAM,IAAI17E,MAAM,wFAGlB,IAAMs8E,EAAmB,SAACvC,EAAgBr0D,EAAW62D,QAAA,IAAAA,IAAAA,EAAA,IACnD,IAAMC,EAAc,sBAAe92D,EAAC,uBAAeA,EAAC,KAC9C+2D,EAAc,sBAAe/2D,EAAC,uBAAeA,EAAC,KACpD,MAAO,yCACcA,EAAC,cAAMne,EAAOuM,gBAAgB,4BAAqB4R,EAAC,MAAI,qCAC9DA,EAAC,uCAA+BA,EAAC,sCACjCA,EAAC,uCAA+BA,EAAC,qCAClCA,EAAC,qBAAaA,EAAC,yCACfA,EAAC,qBAAaA,EAAC,6CACXA,EAAC,qBAAaA,EAAC,6CACfA,EAAC,qBAAaA,EAAC,+BAC7Bq0D,EAAM,YAAIr0D,EAAC,eAAO62D,EAAQ,YAAIT,EAAiBU,EAAaC,GAAY,iBAE9E,EAEEN,EADiB,IAAfN,EACW,8DAETS,EAAiB,OAAQ,EAAG,OAAM,yBAClCA,EAAiB,OAAQ,EAAG,OAAM,yBAClCA,EAAiB,OAAQ,EAAG,OAAM,yBAClCA,EAAiB,OAAQ,EAAG,OAAM,2GAGzB,wBACTA,EAAiB,yBAA0B,GAAE,yBAC7CA,EAAiB,yBAA0B,GAAE,yBAC7CA,EAAiB,yBAA0B,GAAE,yBAC7CA,EAAiB,yBAA0B,GAAE,e,CAKrD,MAAO,oBACHvF,EAAae,iBAAiBxnE,EAAG5H,EAAGnB,GAAO,uBAE3C2zE,QAAAA,EAA4B,GAAE,qBAC9BkB,EAAa,uBAEbrF,EAAagB,YAAW,qBACxBhB,EAAaiB,sCAAsCgE,GAAQ,qBAC3DG,EAAU,YAEhB,CA4CuCO,CAC/B3F,EAAczmE,EAAEmG,KAAM/N,EAAE+N,KAAMgN,EAAa23D,EAAW73D,EAAa03D,EAAU3qE,EAAEkI,SAAU9P,EAAE8P,SAC3F2iE,EAAgBD,EAFe,EAGnC19C,QAAS,CAAC,CAAC/mB,KAAMgN,EAAajL,SAAU2iE,EAAgBlG,YAAa,EAAA/E,YAAYC,UACjFnH,cAAe,WAAM,OAAEtjD,EAAGroB,KAAKE,KAAKu5E,EAAa,GAA0B,GAAtD,GAEzB,CASe6F,CACPr4D,EAAUxO,EAAO,GAAIA,EAAO,GAAImlE,EAAUC,EAA0BC,EAD7D,GAGf,EAES,EAAAzrE,IAAM,SAACnK,GAClBA,EAAQ8mE,QAAQ2O,EAAgCz1E,EAAQuQ,OAAQ,OAAO,SAACxF,EAAG5H,GAAM,gBAAG4H,EAAC,YAAI5H,EAAR,IACnF,EAEa,EAAA0M,IAAM,SAAC7P,GAClBA,EAAQ8mE,QAAQ2O,EAAgCz1E,EAAQuQ,OAAQ,OAAO,SAACxF,EAAG5H,GAAM,gBAAG4H,EAAC,YAAI5H,EAAR,IACnF,EAEa,EAAA+T,MAAQ,SAAClX,GACpBA,EAAQ8mE,QAAQ2O,EACZz1E,EAAQuQ,OAAQ,QAAS,CAAEmmE,OAAQ,SAAC3rE,EAAG5H,GAAM,oBAAO4H,EAAC,aAAK5H,EAAC,IAAd,EAAmBwzE,OAAQ,SAAC5rE,EAAG5H,GAAM,0BAAa4H,EAAC,aAAK5H,EAAC,IAApB,QAClF3H,OAAWA,EAAW,GAC5B,EAEa,EAAAoU,IAAM,SAAC5P,GAClBA,EAAQ8mE,QAAQ2O,EAAgCz1E,EAAQuQ,OAAQ,OAAO,SAACxF,EAAG5H,GAAM,gBAAG4H,EAAC,YAAI5H,EAAR,IACnF,EAEa,EAAAoW,IAAM,SAACvZ,GAClB,IAAMrF,GAAO,IAAAo3E,eAAc,QAAS/xE,EAAQuQ,OAAO,GAAG0C,SAAUjT,EAAQuQ,OAAO,GAAGW,MAAMvW,KAAK/B,MACvFy+E,EAAoB,QAAT18E,EAAiB,QAAU,GAC5CqF,EAAQ8mE,QAAQ2O,EACZz1E,EAAQuQ,OAAQ,MAChB,CAAEmmE,OAAQ,SAAC3rE,EAAG5H,GAAM,2BAAc4H,EAAC,YAAI5H,EAAC,IAApB,EAAyBwzE,OAAQ,SAAC5rE,EAAG5H,GAAM,kCAAqB4H,EAAC,YAAI5H,EAAC,IAA3B,GAC/D,kCACkBxI,EAAI,iBAASA,EAAI,gBAAQA,EAAI,8BACpCA,EAAI,oCACJA,EAAI,wCACEA,EAAI,+DACVA,EAAI,gFAEUA,EAAI,qCAA6BA,EAAI,6BAAqBA,EAAI,YACnF08E,EAAQ,kFAEkB18E,EAAI,uBAAeA,EAAI,sBAAcA,EAAI,2EAEzDA,EAAI,8GAGxB,EAEa,EAAAgV,IAAM,SAAC3P,GAClBA,EAAQ8mE,QAAQ2O,EAAgCz1E,EAAQuQ,OAAQ,OAAO,SAACxF,EAAG5H,GAAM,gBAAG4H,EAAC,YAAI5H,EAAR,IACnF,EAEa,EAAA8U,QAAU,SAACjY,GACtBA,EAAQ8mE,QAAQ2O,EACZz1E,EAAQuQ,OAAQ,UAAW,CAAEmmE,OAAQ,SAAC3rE,EAAG5H,GAAM,oBAAO4H,EAAC,YAAI5H,EAAC,IAAb,EAAkBwzE,OAAQ,SAAC5rE,EAAG5H,GAAM,0BAAa4H,EAAC,YAAI5H,EAAC,IAAnB,QACnF3H,OAAWA,EAAW,GAC5B,EAEa,EAAAgd,KAAO,SAACxY,GACnBA,EAAQ8mE,QAAQ2O,EACZz1E,EAAQuQ,OAAQ,OAAQ,CAAEmmE,OAAQ,SAAC3rE,EAAG5H,GAAM,oBAAO4H,EAAC,YAAI5H,EAAC,IAAb,EAAkBwzE,OAAQ,SAAC5rE,EAAG5H,GAAM,0BAAa4H,EAAC,YAAI5H,EAAC,IAAnB,QAChF3H,OAAWA,EAAW,GAC5B,EAEa,EAAA8wE,eAAiB,SAACtsE,GAC7BA,EAAQ8mE,QAAQ2O,EACZz1E,EAAQuQ,OAAQ,iBAChB,CAAEmmE,OAAQ,SAAC3rE,EAAG5H,GAAM,oBAAO4H,EAAC,aAAK5H,EAAC,IAAd,EAAmBwzE,OAAQ,SAAC5rE,EAAG5H,GAAM,0BAAa4H,EAAC,aAAK5H,EAAC,IAApB,QAA2B3H,OAAWA,EAAS,GAE9G,EAEa,EAAAmxE,YAAc,SAAC3sE,GAC1BA,EAAQ8mE,QAAQ2O,EACZz1E,EAAQuQ,OAAQ,cAAe,CAAEmmE,OAAQ,SAAC3rE,EAAG5H,GAAM,oBAAO4H,EAAC,aAAK5H,EAAC,IAAd,EAAmBwzE,OAAQ,SAAC5rE,EAAG5H,GAAM,0BAAa4H,EAAC,aAAK5H,EAAC,IAApB,QACxF3H,OAAWA,EAAW,GAC5B,C,gPCrQA,cAYa,EAAA87E,eAAiB,GA2L9B,IAAMC,EAAoB,SAAC58E,EAAcm3E,GACvC,GAAmB,IAAfA,EACF,MAAM,IAAIr3E,MAAM,qDAIlB,OAAQE,GACN,KAAK,GACH,OAAOm3E,EAAa,EAAI,aAAMA,EAAU,SAAU,MACpD,KAAK,EACH,OAAOA,EAAa,EAAI,aAAMA,EAAU,SAAU,MACpD,KAAK,EACH,OAAOA,EAAa,EAAI,aAAMA,EAAU,SAAU,MACpD,KAAK,GACH,OAAOA,EAAa,EAAI,aAAMA,EAAU,SAAU,MACpD,KAAK,EACH,GAAIA,EAAa,EACf,MAAM,IAAIr3E,MAAM,8CAElB,MAAO,CAAC,YAAa,OACvB,KAAK,GACH,GAAIq3E,EAAa,EACf,MAAM,IAAIr3E,MAAM,8CAElB,MAAO,CAAC,YAAa,OACvB,KAAK,EACH,GAAmB,IAAfq3E,EACF,MAAM,IAAIr3E,MAAM,qBAElB,MAAO,CAAC,MAAO,cAEjB,QACE,MAAM,IAAIA,MAAM,6BAAsBE,IAE5C,EAEa,EAAA40E,4BAA8B,SAAC50E,EAAgBm3E,QAAA,IAAAA,IAAAA,EAAA,GAC1D,IAAM0F,EAAaD,EAAkB58E,EAAMm3E,GAC3C,MAA6B,iBAAf0F,EAA0BA,EAAaA,EAAW,EAClE,EAEa,EAAAC,0BAA4B,SAAC98E,EAAgBm3E,QAAA,IAAAA,IAAAA,EAAA,GACxD,IAAM0F,EAAaD,EAAkB58E,EAAMm3E,GAC3C,MAA6B,iBAAf0F,EAA0BA,EAAaA,EAAW,EAClE,EAYA,IAAME,EACF,SAACp+E,EAAck4C,EAAoBhvC,EAA0Bm1E,EAC5D7F,GAsBC,IArBA,IAAM1uE,EAAOZ,EAAM5K,OACbggF,EAAcx0E,EAAO,EAAI,MAAQA,GAAQ,EAAI,aAAMA,EAAI,SAAU,qBAAcA,EAAI,KACnFo0E,EAAaD,EAAkB/lC,EAAYsgC,GAC3Cn+B,EAAkC,iBAAf6jC,EAA0BA,EAAaA,EAAW,GACrEK,EAAoC,iBAAfL,EAA0BA,EAAaA,EAAW,GACvE78E,EAAO,CAAC+uD,QAASkuB,EAAah/E,MAAO+6C,EAAWq3B,QAAS6M,EAAapmE,OAAQ+/B,GAE9EsmC,EAAe,SAACvjD,GAA+B,MAAe,iBAARA,EAAmBA,EAAM,UAAGA,EAAG,IAAtC,EAE/CwjD,EAAqB,CACzBxpE,iBAAiB,EACjBC,iBAAiB,EACjBwpE,4BAA4B,EAC5B59E,KAAK,EACLw6E,cAAc,EACd75E,KAAK,EACL25E,cAAc,GAGVrxE,EAAU,EAAAoC,UAAUqO,eAAetR,GACrCy1E,EAAa,GACRr7E,EAAI,EAAGA,EAAIwG,EAAO,EAAGxG,IAC5Bq7E,GAAc,uBACTr7E,EAAC,wBAAgByG,EAAQzG,GAAE,2BAC1BA,EAAC,wBAAgByG,EAAQzG,GAAE,2BAC3BA,EAAC,kBAAUA,EAAC,gCACNA,EAAC,WAGfq7E,GAAc,kBAAW70E,EAAO,EAAC,gBAEjC,IAAM80E,EAAgC90E,EAAO,EAAI,GAAK,qBACjD9J,EAAI,4BAAoBqB,EAAK+uD,QAAO,gCAC5B/uD,EAAK+uD,QAAO,6CAEzBuuB,EAAU,8BASJt4D,EAAoB,GAC1B,GAAIvc,GAAQ,EACV,IAASxG,EAAIwG,EAAO,EAAGxG,GAAK,EAAGA,IAC7B+iB,EAAQ3hB,KAAK,UAAGqF,EAAQzG,GAAE,wBAAgBA,EAAC,OAI/C,IA0FQ+K,EACAuJ,EA3FFinE,EAAgC/0E,EAAO,EAAI,GAAK,qBACjD9J,EAAI,qBAAaqB,EAAK+uD,QAAO,kCAC3B/pC,EAAQpmB,KAAK,KAAI,UAQlB6+E,EAAoE,CAAC,EAoBrE1uB,EAAU,W,IAAC,sDACb,OAAS,IAATtmD,EAAa,KAAO,UAAGzI,EAAK+uD,QAAO,YAAIpzD,EAAK+C,IAAIy+E,GAAcv+E,KAAK,KAAI,IAAvE,EAkBE+4E,EAAc,SAACl6C,EAAuBx/B,GAAkB,kBAC5D,GAAI+B,EAAKqwE,UAAYrwE,EAAK/B,MACxB,MAAO,UAAGU,EAAI,YAAI8+B,EAAM,aAAKx/B,EAAK,KAC7B,GAAqB,cAAjB+B,EAAKqwE,SAA0C,QAAfrwE,EAAK/B,MAE9C,MAAO,UAAGU,EAAI,YAAI8+B,EAAM,2BAAmBx/B,EAAK,sCAA8BA,EAAK,WAC9E,GAAqB,cAAjB+B,EAAKqwE,SAA0C,QAAfrwE,EAAK/B,MAE9C,MAAO,UAAGU,EAAI,YAAI8+B,EAAM,2BAAmBx/B,EAAK,WAC3C,GAAqB,QAAjB+B,EAAKqwE,SAAoC,eAAfrwE,EAAK/B,MAExC,MAAO,UAAGU,EAAI,YAAI8+B,EAAM,sEAA8Dx/B,EAAK,OAE3F,MAAM,IAAI6B,MAAM,oDAA6CE,EAAKqwE,QAAO,2BAAmBrwE,EAAK/B,MAAK,QAEzG,CAf6D,IAiBxDu8E,EAAc,SAAC/8C,GAA0B,kBAC7C,GAAIz9B,EAAKqwE,UAAYrwE,EAAK/B,MACxB,MAAO,UAAGU,EAAI,YAAI8+B,EAAM,KACnB,GAAqB,cAAjBz9B,EAAKqwE,SAA0C,QAAfrwE,EAAK/B,MAE9C,MAAO,cAAOU,EAAI,YAAI8+B,EAAM,QACvB,GAAqB,cAAjBz9B,EAAKqwE,SAA0C,QAAfrwE,EAAK/B,MAE9C,MAAO,cAAOU,EAAI,YAAI8+B,EAAM,QACvB,GAAqB,QAAjBz9B,EAAKqwE,SAAoC,eAAfrwE,EAAK/B,MAExC,MAAO,0BAAmBU,EAAI,YAAI8+B,EAAM,4BAAoB9+B,EAAI,YAAI8+B,EAAM,8BAAsB9+B,EAAI,YAChG8+B,EAAM,gCAAwB9+B,EAAI,YAAI8+B,EAAM,qBAEhD,MAAM,IAAI39B,MAAM,oDAA6CE,EAAKqwE,QAAO,2BAAmBrwE,EAAK/B,MAAK,QAEzG,CAhB8C,IAkBzCy/E,EAA6Bj1E,EAAO,EAAI,GAAK,qBAC9C9J,EAAI,8BAAsBqB,EAAK+uD,QAAO,gBAAQ/V,EAAS,0BACrDwhC,EAAY,cAAO77E,EAAI,cAAY,UAGpCg/E,EAAoBl1E,EAAO,EAAI,IAC7BuE,EAASnF,EAAMnJ,KAAI,SAAC49B,EAAGr6B,GAAM,iBAAIA,EAAC,QAAL,IAAcrD,KAAK,MAChD2X,EAAO1O,EAAMnJ,KAAI,SAAC49B,EAAGr6B,GAAM,iBAAIA,EAAJ,IAASrD,KAAK,MACxC,qBACJD,EAAI,YAAIqO,EAAM,gBAAQgsC,EAAS,8BACzBr6C,EAAI,qBAAaowD,EAAQx4C,GAAK,YAiCnCqnE,EAA6Bn1E,EAAO,EAAI,GAAK,qBAC9C9J,EAAI,8BAAsBqB,EAAK+uD,QAAO,oBAAY/V,EAAS,oBAChE2+B,EAAY,cAAOh5E,EAAI,aAAa,SAAQ,SAGtCk/E,EAAoBp1E,EAAO,EAAI,GAAK,WACxC,IAAMuE,EAASnF,EAAMnJ,KAAI,SAAC49B,EAAGr6B,GAAM,iBAAIA,EAAC,QAAL,IAAcrD,KAAK,MAChD2X,EAAO1O,EAAMnJ,KAAI,SAAC49B,EAAGr6B,GAAM,iBAAIA,EAAJ,IAASrD,KAAK,MAC/C,MAAO,qBACJD,EAAI,YAAIqO,EAAM,oBAAYgsC,EAAS,wBACpCr6C,EAAI,qBAAaowD,EAAQx4C,GAAK,iBAEjC,CAPyC,GAoE1C,MAAO,CACLmvB,KA3BW,WACX,IAAMo4C,EAAQ,GAsBd,OArBIV,EAAmBxpE,iBACrBkqE,EAAMz6E,KAAKk6E,GAETH,EAAmBvpE,iBACrBiqE,EAAMz6E,KAAKm6E,GAETJ,EAAmBC,4BACrBv/E,OAAOgxD,OAAO2uB,GAA0Ct0E,SAAQ,SAAAu8B,GAAQ,OAAAo4C,EAAMz6E,KAAKqiC,EAAX,IAEtE03C,EAAmB39E,KACrBq+E,EAAMz6E,KAAKw6E,GAETT,EAAmBnD,cACrB6D,EAAMz6E,KAAKu6E,GAETR,EAAmBh9E,KACrB09E,EAAMz6E,KAAKs6E,GAETP,EAAmBrD,cACrB+D,EAAMz6E,KAAKq6E,GAENI,EAAMl/E,KAAK,KACpB,EAIEoB,KAAI,EACJ4T,gBAvNsB,SAACmqE,GAEvB,OADAX,EAAmBxpE,iBAAkB,EAC9BnL,EAAO,EAAIs1E,EAAY,cAAOp/E,EAAI,YAAIo/E,EAAS,IACxD,EAqNElqE,gBAvMsB,SAACmqE,GAEvB,OADAZ,EAAmBvpE,iBAAkB,EAC9BpL,EAAO,EAAIu1E,EAAa,cAAOr/E,EAAI,YAAIq/E,EAAU,IAC1D,EAqMEX,2BAlMiC,SAACW,EAAoB32E,GACtD+1E,EAAmBC,4BAA6B,EAChD,IAAMY,EAAU,UAAG52E,EAAO1I,KAAI,+BAAuBA,EAAI,UACzD,GAAIs/E,KAAWR,EACb,MAAO,UAAGQ,EAAO,YAAID,EAAU,KAGjC,IADA,IAAMh5D,EAAU,GACP/iB,EAAI4F,EAAM5K,OAAS,EAAGgF,GAAK,EAAGA,IAAK,CAC1C,IAAM0jB,EAAMte,EAAOqwE,WAAW,gBAAiBz1E,EAAIoF,EAAOQ,MAAM5K,OAAS4K,EAAM5K,QAC/E+nB,EAAQ3hB,KAAK,UAAGqF,EAAQzG,GAAE,gBAAQ0jB,EAAG,cAAM9d,EAAM5F,GAAE,M,CAOrD,OALAw7E,EAAyCQ,GACrC,aAAMA,EAAO,2BAAmB52E,EAAOrH,KAAK+uD,QAAO,2CACzC/pC,EAAQ/nB,OAAS,EAAI+nB,EAAQpmB,KAAK,KAAO,KAAI,mBAGpD,UAAGq/E,EAAO,YAAID,EAAU,IACjC,EAkLEjvB,QAAO,EACP2oB,WA9KiB,SAACsG,EAAoBr4D,GACtC,OAAIld,EAAO,EACF,UAAGu1E,GAEH,UAAGA,EAAU,YAAIr4D,EAAG,IAE/B,EAyKEu4D,WAvKiB,SAACF,EAAoBr4D,EAAoB1nB,GAC1D,OAAIwK,EAAO,EACF,UAAGu1E,EAAU,YAAI//E,EAAK,KAEtB,UAAG+/E,EAAU,YAAIr4D,EAAG,aAAK1nB,EAAK,IAEzC,EAkKEwB,IApEU,W,IAAC,sDACX,GAAI0+E,EAAgBlhF,SAAWwL,EAAO,EACpC,MAAM,IAAI3I,MAAM,iCAA0B2I,IAE5C,IAAMxK,EAAQkgF,EAAgB11E,GAC9B,GAAqB,iBAAVxK,EACT,MAAM,IAAI6B,MAAM,wBAGlB,IAAMs+E,EAAoBD,EAAgB9xE,MAAM,EAAG5D,GAAM/J,IAAIy+E,GAAcv+E,KAAK,KAEhF,OAAa,IAAT6J,EACKkvE,EAAY,KAAM15E,GACP,IAATwK,EACFkvE,EAAYyG,EAAkB,GAAIngF,IAEzCm/E,EAAmB39E,KAAM,EACzB29E,EAAmBnD,cAAe,EAClCmD,EAAmBvpE,iBAAkB,EAC9B,cAAOlV,EAAI,YAAIy/E,EAAiB,aAAKngF,EAAK,KAErD,EAgDE05E,YAAW,EACXsC,aA/CmB,SAAC+D,EAAoB//E,GACxC,OAAIwK,EAAO,EACFkvE,EAAYqG,EAAY//E,IAE/Bm/E,EAAmBnD,cAAe,EAClCmD,EAAmBvpE,iBAAkB,EAC9B,cAAOlV,EAAI,qBAAaq/E,EAAU,aAAK//E,EAAK,MAEvD,EAwCEmC,IAlHU,W,IAAC,sDACX,GAAI2uD,EAAQ9xD,SAAWwL,EACrB,MAAM,IAAI3I,MAAM,iCAA0B2I,IAG5C,IAAM21E,EAAoBrvB,EAAQrwD,IAAIy+E,GAAcv+E,KAAK,KAEzD,OAAa,IAAT6J,EACK+xE,EAAY,MACD,IAAT/xE,EACF+xE,EAAY4D,EAAkB,KAErChB,EAAmBh9E,KAAM,EACzBg9E,EAAmBrD,cAAe,EAClCqD,EAAmBvpE,iBAAkB,EAC9B,cAAOlV,EAAI,YAAIy/E,EAAiB,KAE3C,EAkGE5D,YAAW,EACXT,aAjGmB,SAACiE,GACpB,OAAIv1E,EAAO,EACF+xE,EAAYwD,IAEnBZ,EAAmBrD,cAAe,EAClCqD,EAAmBvpE,iBAAkB,EAC9B,cAAOlV,EAAI,qBAAaq/E,EAAU,KAE7C,EA2FExlE,MAAOwkE,EAAU,QAAU,SAC3Br+E,KAAI,EACJkJ,MAAK,EAET,EAWS,EAAAuvE,cACT,SAACz4E,EAAcqB,EAAc6H,EAA0BsvE,GACnD,YADmD,IAAAA,IAAAA,EAAA,GACnD4F,EAAoBp+E,EAAMqB,EAAM6H,GAAO,EAAMsvE,EAA7C,EAWK,EAAAI,eACT,SAAC54E,EAAcqB,EAAc6H,EAA0BsvE,GACnD,YADmD,IAAAA,IAAAA,EAAA,GACnD4F,EAAoBp+E,EAAMqB,EAAM6H,GAAO,EAAOsvE,EAA9C,EAuDR,iBACE,WAAoBvO,GAAA,KAAAA,wBAAAA,EA0CZ,KAAAyV,eAAkC,EA1C8B,CA+C1E,OA7CE,YAAAvG,sCAAA,SAAsCj4E,GAEpC,IAAMy+E,EAA6B,iBAATz+E,EAAoB,UAAGA,EAAI,KAAMA,EAC3D,MAAO,4BAAqBy+E,EAAU,gBACxC,EAEA,YAAAzG,UAAA,SAAUG,QAAA,IAAAA,IAAAA,EAAiD,EAAA2E,gBACzD,IAAM4B,EAA0C,iBAAlBvG,EAA6BA,EAAgBA,EAAc,GACnFwG,EAA0C,iBAAlBxG,EAA6B,EAAIA,EAAc,GACvEyG,EAA0C,iBAAlBzG,EAA6B,EAAIA,EAAc,GAEvElB,EAA2D,IAApCx4E,KAAKsqE,wBAAwB,IAAgD,IAApCtqE,KAAKsqE,wBAAwB,GAC7F8V,EAAY5H,EAAuB,gHAEA,2GAEnC6H,EAAsB7H,EACxB,gCACA,6CAAsCx4E,KAAKsqE,wBAAwB,GAAKtqE,KAAKsqE,wBAAwB,GAAE,2CAClFtqE,KAAKsqE,wBAAwB,GAAE,iCAChD2V,EAAiBC,EAAiBC,EAAc,oBAExD,MAAO,mCAA4BF,EAAc,aAAKC,EAAc,aAAKC,EAAc,wBAC/EC,EAAS,oBACfC,EAAmB,OAEvB,EAEA,YAAAC,gBAAA,SAAgBntE,EAAyBotE,GACvCvgF,KAAK+/E,eAAeh7E,KAAKoO,GACzB,IAAMqtE,EAA4B,UAAnBrtE,EAAS+G,MAAoB,OAAS,aAC/C0kE,EAAczrE,EAASzR,KAAKqwE,QAClC,MAAO,6BAAsBwO,EAAY,0BAAkBC,EAAM,aAAKrtE,EAAS9S,KAAI,mBAAWu+E,EAAW,KAC3G,EAEA,YAAAtF,iBAAA,W,IAAA,WAAiB,kDACf,IAAI31E,EAAI,EACR,OAAO4Q,EAAU1B,QAAO,SAAAC,GAAK,SAAAtG,UAAUjL,KAAKuR,EAAEvJ,OAAS,CAA1B,IAA6BnJ,KAAI,SAAA0S,GAAK,SAAKwtE,gBAAgBxtE,EAAGnP,IAAxB,IAA8BrD,KAAK,KACxG,EAIA,sBAAI,wCAAyB,C,IAA7B,WACE,OAAON,KAAK+/E,eAAe3/E,KAAI,SAAAuD,GAAK,OAAAA,EAAEyjC,MAAF,IAAU9mC,KAAK,KACrD,E,gCACF,EAhDA,GAkDa,EAAAmgF,mBAAqB,SAACjW,GAC/B,WAAIkW,EAAiBlW,EAArB,EAYS,EAAAx+D,iBAAmB,SAACP,EAA4BzD,GAG3D,IAFA,IAAM4D,EAASH,EAAQ9M,OACjBsZ,EAAiB,GACdtU,EAAI,EAAGA,EAAIiI,EAAQjI,IAAK,CAC/B,IAAM23B,EAAM1vB,EAAS,EAAIjI,EACnBmO,EAAIrG,EAAQ6vB,IAAQ,GAChBtzB,EAASA,EAASrJ,OAAS,EAAIgF,IAAM,GACvC,GAAW,IAANmO,GACXmG,EAAK4qD,QAAQvnC,E,CAGjB,OAAOrjB,CACT,C,+qCC7qBA,cACA,SACA,UAEA,UAoIa,EAAAsF,OAAS,SAACxW,EAAyBlG,IA9HzB,SAACyW,G,QACtB,IAAKA,GAAUA,EAAO3Y,OAAS,EAC7B,MAAM,IAAI6C,MAAM,kBAGlB,IAAM6mB,EAAY/Q,EAAO,GAAG0C,SACtBsO,EAAsBhR,EAAO,GAAGW,KAAKtZ,O,IAE3C,IAAoB,QAAA2Y,GAAM,8BAAE,CAAvB,IAAMiD,EAAK,QAEd,GAAIA,EAAMP,WAAaqO,EACrB,MAAM,IAAI7mB,MAAM,oCAIlB,GAAI+Y,EAAMtC,KAAKtZ,SAAW2pB,EACxB,MAAM,IAAI9mB,MAAM,2C,mGAGtB,CA4GEwhB,CAAejc,EAAQuQ,QACvBvQ,EAAQ8mE,QAPN,SAACv2D,EAA+BzW,GAC9B,IArG+BglB,EAAoBlO,EAqG7CmO,GArGyBD,EAqGcvO,EAAO3Y,OArGDgZ,EAqGS9W,EAAWoiB,SApGzE,CAAE5iB,KAAM,SAAUkX,WAAY7T,MAAMmiB,GAAYG,KAAK,EAAA0rD,YAAYC,SAAUh6D,UAAS,IAqGlF,OAAO,EAAP,KAAWmO,GAAQ,CAAEhkB,IAAK,WAAM,OArElC,SAACgkB,EAA2BxO,EAA+B2O,GACzD,IAAMC,EAAa5O,EAAO,GAAGW,KAAKlK,QAClC,GAAIkY,GAAQC,EAAWvnB,QAAUsnB,GAAS,EAAIC,EAAWvnB,OACvD,MAAM,IAAI6C,MAAM,gEAMlB,IAJA,IAAMm/E,EAAgB16D,EAAO,EAAKC,EAAWvnB,OAASsnB,EAAOA,EAGvDhB,EAAciB,EAAWnY,MAAM,GAC5BpK,EAAI,EAAGA,EAAI2T,EAAO3Y,OAAQgF,IAEjC,IADA,IAAMwiB,EAAa7O,EAAO3T,GAAGsU,KAAKlK,QACzBqY,EAAY,EAAGA,EAAYF,EAAWvnB,OAAQynB,IAErD,GAAIA,IAAcu6D,EAChB17D,EAAY07D,IAAiBx6D,EAAWC,QAGrC,GAAIF,EAAWE,KAAeD,EAAWC,GAC5C,MAAM,IAAI5kB,MAAM,oCAKtB,IAAM82E,EAAa,EAAA9rE,UAAUjL,KAAK0jB,GAE5BsC,EAAmB,IAAI7jB,MAAc4T,EAAO3Y,QAC5CiiF,EAAY,IAAIl9E,MAAqB4T,EAAO3Y,QAC5Cqb,EAAW1C,EAAO,GAAG0C,SAEvBwN,EAAc,EAClB,IAAS7jB,EAAI,EAAGA,EAAI2T,EAAO3Y,SAAUgF,EACnC6jB,GAAelQ,EAAO3T,GAAGsU,KAAK0oE,GAC9Bp5D,EAAiB5jB,GAAK6jB,EAEtBo5D,EAAUj9E,IAAK,IAAAm1E,eAAc,eAAQn1E,GAAKqW,EAAU1C,EAAO3T,GAAGsU,MAGhE,IAAMlP,GAAS,IAAAkwE,gBAAe,SAAUj/D,EAAUiL,GAE5C47D,EAAc93E,EAAOqwE,WAAW,UAAWuH,GAmBjD,OAAO,EAAP,KACK76D,GAAQ,CACXkZ,QAAS,CAAC,CAAC/mB,KAAMgN,EAAajL,SAAU1C,EAAO,GAAG0C,SAAUy8D,YAAa,EAAA/E,YAAYC,UACrFgF,gBArBsB,SAAC4B,GAA+B,oBAC1DA,EAAae,iBAAgB,MAA7Bf,EAAY,SAAqBqI,IAAS,IAAE73E,IAAM,yDAEdwe,EAAiB5oB,OAAM,aAAK4oB,EAAiBnnB,KAAI,SAAAuD,GAAK,gBAAGA,EAAC,IAAJ,IAASrD,KAAK,KAAI,kBAzE/E4nB,EA0ELX,EAAiB5oB,OA1EwB,yFAErCupB,EAAe,mHAKlCA,EAAe,YAmEwB,iBAEhDqwD,EAAagB,YAAW,iBACtBhB,EAAaiB,sCAAsClB,GAAW,iCAEhDvvE,EAAOuM,gBAAgB,cAAa,yDAEburE,EAAW,kDAE9CA,EAAW,gEAzEM,SAACvpE,EAAkCvO,GAI1D,IAHA,IAAMmf,EAAkB5Q,EAAO3Y,OAEzBypB,EAAsB,GACnBzkB,EAAI,EAAGA,EAAIukB,IAAmBvkB,EAAG,CACxC,IAAMm9E,EAAgB/3E,EAAOswE,YAAY,aAAc/hE,EAAO3T,GAAG83E,aAAa,YACtD,IAApBvzD,EACFE,EAAUrjB,KAAK+7E,GACA,IAANn9E,EACTykB,EAAUrjB,KAAK,4BAAqBpB,EAAC,gBAAQm9E,EAAa,OACjDn9E,IAAMukB,EAAkB,EACjCE,EAAUrjB,KAAK,iBAAU+7E,EAAa,OAEtC14D,EAAUrjB,KAAK,iCAA0BpB,EAAC,eAAOm9E,EAAa,M,CAGlE,OAAO14D,EAAU9nB,KAAK,KACxB,CA2DMygF,CAAiBH,EAAW73E,GAAO,SAtFT,IAACmf,CAsE6B,EAsBtDsiD,cAAe,WAAM,OAAEtjD,EAAGroB,KAAKE,KAAKu5E,EAAa,IAA5B,GAEzB,CAKkC0I,CAAwBl7D,EAAUxO,EAAQzW,EAAWolB,KAArD,GAClC,CAIcg7D,CAA8Bl6E,EAAQuQ,OAAQzW,GAChE,EAEa,EAAA2c,sBAAwB,SAAC3c,GAClC,WAAAN,6BAA4B,CAAC0lB,KAAMplB,EAAWolB,MAA9C,C,m3BC9IJ,cACA,UAEA,UACA,UACA,UA+Fa,EAAAi7D,mCACT,SAAC5pE,EAA+BzW,EAC/Bw3E,GACC,IAhGoC7vD,EAAkB7Q,EAgGhDmO,GAhG8B0C,EAgGclR,EAAO3Y,OAAS,EAhGZgZ,EAgGe9W,EAAWoiB,SAhGa,CACjG5iB,KAAM,cACNkX,WAAYiR,EAAU,CAAC,EAAAkpD,YAAYC,QAAS,EAAAD,YAAYC,QAAS,EAAAD,YAAYC,SACvD,CAAC,EAAAD,YAAYC,QAAS,EAAAD,YAAYC,SACxDh6D,UAAS,IA6FL,OAAO,EAAP,KACKmO,GAAQ,CACXhkB,IAAK,WAAM,OA3Ff,SAACwV,EAA+BwO,EAA2BjlB,EAC1Dw3E,GACC,IAAM7vD,EAAUlR,EAAO3Y,OAAS,EAC1B8pB,EAAcD,EAAU,8BAAgC,GACxDE,EAASpR,EAAO,GAAGW,KACnB0Q,EAASrR,EAAO,GAAGW,KACnB2Q,EAAyBD,EAAO,GAAK9nB,EAAWgoB,MAEhD,GAAwC,IAAAgyD,sBAAqBh6E,GAA5DuoB,EAAkB,qBAAEC,EAAe,kBAEpCmmD,EAAsC,SAAtB3uE,EAAW4mC,OAC3BxiB,GAAc,IAAAiE,sBAChBR,EAAQC,EAAQ9nB,EAAWkoB,UAAWloB,EAAWooB,KAAMpoB,EAAWuJ,QAASolE,GACzE8I,EAAa,EAAA9rE,UAAUjL,KAAK0jB,GAE5Blc,GAAS,IAAAkwE,gBAAe,SAAU3hE,EAAO,GAAG0C,SAAUiL,GACtDiC,GAAI,IAAA4xD,eAAc,IAAKxhE,EAAO,GAAG0C,SAAU0O,GAC3CqI,GAAI,IAAA+nD,eAAc,IAAKxhE,EAAO,GAAG0C,SAAU2O,GAC3Ci4D,EAAY,CAAC15D,EAAG6J,GAmDtB,OAlDIvI,GACFo4D,EAAU77E,MAAK,IAAA+zE,eAAc,IAAKxhE,EAAO,GAAG0C,SAAU1C,EAAO,GAAGW,OAiD3D,EAAP,KACK6N,GAAQ,CACXkZ,QAAS,CAAC,CACR/mB,KAAMogE,EAA6BA,EAA2BpzD,GAAeA,EAC7EjL,SAAU1C,EAAO,GAAG0C,SACpBy8D,YAAa,EAAA/E,YAAYC,UAE3BgF,gBArDsB,SAAC4B,GAA+B,oDAC1B13E,EAAWuJ,QAAQ,GAAE,cAAMvJ,EAAWuJ,QAAQ,GAAE,+CACnDvJ,EAAWooB,KAAK,GAAE,cAAMpoB,EAAWooB,KAAK,GAAE,oBAEvEsvD,EAAae,iBAAgB,MAA7Bf,EAAY,SAAqBqI,IAAS,IAAE73E,IAAM,qBAElDqgB,EAAkB,iBAElBmvD,EAAagB,YAAW,iBACtBhB,EAAaiB,sCAAsClB,GAAW,uCAE1CvvE,EAAOuM,gBAAgB,cAAa,kGAEhBk6D,EAAgB,EAAI,EAAC,sEACVA,EAAgB,EAAI,EAAC,4BACpEA,EAAgB,EAAI,EAAC,0EACY5mD,EAAsB,gCAEhD7f,EAAOrH,KAAK/B,MAAK,cAAMoJ,EAAOrH,KAAK/B,MAAK,iEACPgpB,EAAO,GAAE,oEACpBA,EAAO,GAAE,wEACFA,EAAO,GAAE,0EACP9nB,EAAWkoB,UAAU,GAAE,wDAE9BL,EAAO8mD,EAAgB,EAAI,GAAE,+FAIxB7mD,EAAO,GAAE,yEACP9nB,EAAWkoB,UAAU,GAAE,sDAC9BL,EAAO8mD,EAAgB,EAAI,GAAE,4EAK5DA,EAAgBtoD,EAAEplB,IAAI,QAAS,UAAW,SAAU,iBACpColB,EAAEplB,IAAI,QAAS,gBAAiB,UAAW,UAAS,mCACvDivB,EAAEjvB,IAAI,iBAAkB,aAAc,UAAW,UAAS,4EAK3E2mB,EAAW,iBACXY,EAAe,iBACftgB,EAAOswE,YAAY,aAAc,SAAQ,QA5Ce,EAsDtD7O,cAAe,WAAM,OAAEtjD,EAAGroB,KAAKE,KAAKu5E,EAAa,IAA5B,GAEzB,CAYe6I,CAA6B7pE,EAAQwO,EAAUjlB,EAAYw3E,EAA3D,GAEf,C,oXC5GJ,aACA,UAEA,UAEA,UACA,UACA,UAEMluD,EACF,SAACC,EAAe7f,EAAgB8f,EAAaC,EAAgBC,EAAkBC,GAC3E,OAACJ,EAAQ,GAAK7f,EAAS8f,GAAOC,EAAS,GAAKC,EAAW,EAAIC,CAA3D,EAEFC,EAAoB,SAACC,EAAkB5B,EAAiBG,EAAgB0B,EAAcC,GAC1F,IAAMC,EAAWhsB,KAAK0f,MAAMmM,EAAW,GACvB,eAAZ5B,GACFG,EAAK0B,GAAQE,EACb5B,EAAK2B,GAAQF,EAAWG,GACH,eAAZ/B,IACTG,EAAK0B,GAAQD,EAAWG,EACxB5B,EAAK2B,GAAQC,EAEjB,EAoCMG,EACF,SAAoCnqB,EAAeyW,GACjD,IAAM0R,EAAcnoB,EAAWmoB,YAAYjb,QAE3C,GAAsC,IAAlClN,EAAWmoB,YAAYrqB,QAAsE,IAAtDkC,EAAWmoB,YAAYoQ,QAAO,SAACtnB,EAAG5H,GAAM,OAAA4H,EAAI5H,CAAJ,GAAO,GAAU,CAClG8e,EAAYrqB,OAAS,EACrB,IAAK,IAAIgF,EAAI,EAAGA,EAAI2T,EAAO,GAAGW,KAAKtZ,SAAUgF,EAC3CqlB,EAAYjkB,KAAKuS,EAAO,GAAGW,KAAKtU,G,CAGpC,IAAMyxE,EAAuC,SAAtBv0E,EAAW4mC,OAClCze,EAAYmiB,OAAO,EAAG,EAAG7zB,EAAO,GAAGW,KAAK,IACxC+Q,EAAYmiB,OAAOiqC,EAAiB,EAAI,EAAG,EAAG99D,EAAO,GAAGW,KAAK,IAE7D,IAAMgR,EAAOpoB,EAAWooB,KAAKlb,QACvBkX,EAAcpkB,EAAWokB,YAAYlX,QACrCud,EAAgBzqB,EAAWyqB,cAAcvd,QACzCmY,EAAa5O,EAAO,GAAGW,KACzB8Q,EAAYloB,EAAWkoB,UAAUhb,QACrC,GAA6C,IAAzCgb,EAAUqQ,QAAO,SAACtnB,EAAG5H,GAAM,OAAA4H,EAAI5H,CAAJ,GAAO,GAAU,CAC9C,IAAMqhB,EAAcjU,EAAO,GAAGW,KAAKtZ,OAAS,EAC5CoqB,EAAY,IAAIrlB,MAAM6nB,GAAavF,KAAK,E,CAE1C,IAAI5b,EAAUvJ,EAAWuJ,QAAQ2D,QACU,IAAvC3D,EAAQgvB,QAAO,SAACtnB,EAAG5H,GAAM,OAAA4H,EAAI5H,CAAJ,GAAO,KAC5BqhB,EAAcjU,EAAO,GAAGW,KAAKtZ,OAAS,EAC5CyL,EAAU,IAAI1G,MAAM6nB,GAAavF,KAAK,IA3D1C,SAACE,EAA+B8C,EAAgCD,EAA8BD,EAC7FD,EAAeI,EAAgB7e,EAA4BolE,EAAwBlkD,EACnFrG,GACC,IAAMsG,EAAcrF,EAAWvnB,OAAS,EAClCyiF,EAA2C,IAAvBn8D,EAAYtmB,OACtC,GAA6B,IAAzB2sB,EAAc3sB,OAChB,IAAK,IAAIgF,EAAI,EAAGA,EAAI4nB,IAAe5nB,EACjC2nB,EAAcvmB,KAAK,GAKvB,IAFA,IAAMgnB,EAAY7F,EAAW,GACvB+F,EAAcjD,EAAYwmD,EAAgB,EAAI,GAAK3mD,EACzC2W,GAAP77B,EAAI,EAAOuiB,EAAWvnB,OAAS4sB,GAAeikD,EAAgB,EAAI,IAAI7rE,EAAI4nB,IAAe5nB,IAAK67B,EAAG,CACxG,IAAM+mC,EAASrgD,EAAWsZ,GACpBhV,EAAU42D,EAAoB7a,EAASn8D,EAAQzG,GAAKshB,EAAYthB,GAChE+mB,EAAWP,EAAgBo8C,EAAQn8D,EAAQzG,GAAIslB,EAAKtlB,GAAIqlB,EAAYwW,GAAIzW,EAAUplB,GAAI6mB,GAC5FC,EAAkBC,EAAU5B,EAASG,EAAMtlB,EAAGA,EAAI4nB,GAC9C61D,GACFn8D,EAAYlgB,KACRqF,EAAQzG,IAAM4iE,EAAS,GAAKj7C,EAAc3nB,IAAMqlB,EAAYwW,GAAK,GAAKzW,EAAUplB,GAAK,EAAIslB,EAAKtlB,GAC9FslB,EAAKtlB,EAAI4nB,G,CAGjBtG,EAAYkmB,OAAO,EAAG,EAAGpf,GACzB9G,EAAYkmB,OAAOqkC,EAAgB,EAAI,EAAG,EAAGvjD,EAC/C,CAsCER,CACIvF,EAAY8C,EAAaD,EAAWloB,EAAWioB,QAASjoB,EAAWgoB,MAAOI,EAAM7e,EAASgrE,EACzF9pD,EAAerG,GAGnB,IAAMyG,EAAmBlsB,OAAOO,OAAO,CAAC,EAAGc,GACrCoiB,EAAWpiB,EAAWoiB,SAAW,CACrC+F,EAAY1oB,KAAK,MAAO2oB,EAAK3oB,KAAK,KAAM8J,EAAQ9J,KAAK,KAAMgrB,EAAchrB,KAAK,KAAM2kB,EAAY3kB,KAAK,KACrGyoB,EAAUzoB,KAAK,MACfA,KAAK,KAEP,OADAd,OAAOO,OAAO2rB,EAAe,CAAC1C,YAAW,EAAEC,KAAI,EAAEqC,cAAa,EAAErG,YAAW,EAAE8D,UAAS,EAAE3e,QAAO,EAAE6Y,SAAQ,IAClGyI,CACT,EAES,EAAA9N,6BAA+B,SAAC/c,GAC3C,IAAM8qB,GAAuB,IAAAC,mCAAkC/qB,GAEzD4mC,EAAS5mC,EAAW4mC,OACpB3e,EACF,CAAC,SAAU,QAAS,aACnB,mBAA2C,IAAtBjoB,EAAWioB,QAAyB,EAAIjoB,EAAWioB,SACvEC,EAAYloB,EAAWkoB,UACvBF,EAAQhoB,EAAWgoB,MACnBG,EAAcnoB,EAAWmoB,YACzBC,EAAOpoB,EAAWooB,KAClB7e,EAAUvJ,EAAWuJ,QACrBi3E,EAAYxgF,EAAWwgF,WACvB/1D,EAAgBzqB,EAAWyqB,cAC3BrG,EAAcpkB,EAAWokB,YAC/B,OAAO,IAAA1kB,6BAA2B,GAChCuoB,QAAO,EACP2e,OAAM,EACN1e,UAAS,EACTF,MAAK,EACLG,YAAW,EACXsC,cAAa,EACbrG,YAAW,EACXgE,KAAI,EACJ7e,QAAO,EACPi3E,SAAQ,GACL11D,GAEP,EAEA,IA2EM21D,EACF,SAAChqE,EAA+BzW,EAC/Bw3E,GACC,IAVwC7vD,EAAkB7Q,EAWpDmO,GAXkC0C,EAUN,IAAlBlR,EAAO3Y,OAVmCgZ,EAWK9W,EAAWoiB,SAXuB,CACrG5iB,KAAM,kBACNkX,WAAYiR,EAAU,CAAC,EAAAkpD,YAAYC,QAAS,EAAAD,YAAYC,QAAS,EAAAD,YAAYC,SACvD,CAAC,EAAAD,YAAYC,QAAS,EAAAD,YAAYC,SACxDh6D,UAAS,IAQL,OAAO,EAAP,KACKmO,GAAQ,CACXhkB,IAAK,WAAM,WAAAs2E,kCAAiC9gE,EAAQwO,EAAUjlB,EAAYw3E,EAA/D,GAEf,EAGEkJ,GAAgD,IAAAhhF,6BAA4B,CAACitB,KAAM,CAAC,EAAG,EAAG,EAAG,KAsGtF,EAAA7P,cAAgB,SAAC5W,EAAyBlG,IA7LhC,SAACyW,EAA+BzW,GAGrD,IAAKyW,GAA6B,IAAlBA,EAAO3Y,QAAkC,IAAlB2Y,EAAO3Y,OAC5C,MAAM,IAAI6C,MAAM,+BAIlB,GAA8B,IAA1B8V,EAAO,GAAGW,KAAKtZ,QAA0C,IAA1B2Y,EAAO,GAAGW,KAAKtZ,OAChD,MAAM,IAAI6C,MAAM,6CAGlB,GAAI8V,EAAO,GAAGW,KAAKtZ,SAAW2Y,EAAO,GAAGW,KAAKtZ,OAC3C,MAAM,IAAI6C,MAAM,gDAMlB,GAFoB8V,EAAO,GAAGW,KAA2B,SAAtBpX,EAAW4mC,OAAoBnwB,EAAO,GAAGW,KAAKtZ,OAAS,EAAI,KACtE2Y,EAAO,GAAGW,KAAK,GAErC,MAAM,IAAIzW,MAAM,qDAGlB,IAAMqqB,EAAcvU,EAAO,GAAGW,KAAK,GAAKpX,EAAWgoB,MAGnD,GAAsB,IAAlBvR,EAAO3Y,SAA2C,IAA1B2Y,EAAO,GAAGW,KAAKtZ,QAAgB2Y,EAAO,GAAGW,KAAK,KAAO4T,GAC/E,MAAM,IAAIrqB,MAAM,gBAGlB,IAAM+pB,EAAcjU,EAAO,GAAGW,KAAKtZ,OAAS,EAG5C,GAFqBkC,EAAWkoB,UAAUqQ,QAAO,SAACtnB,EAAG5H,GAAM,OAAA4H,EAAI5H,CAAJ,GAAO,GAAK,GAEnDrJ,EAAWkoB,UAAUpqB,SAAW4sB,EAClD,MAAM,IAAI/pB,MAAM,8BAAuB+pB,EAAW,MAKpD,GAFmB1qB,EAAWuJ,QAAQgvB,QAAO,SAACtnB,EAAG5H,GAAM,OAAA4H,EAAI5H,CAAJ,GAAO,GAAK,GAEjDrJ,EAAWuJ,QAAQzL,SAAW4sB,EAC9C,MAAM,IAAI/pB,MAAM,4BAAqB+pB,EAAW,MAKlD,GADgB1qB,EAAWooB,KAAKmQ,QAAO,SAACtnB,EAAG5H,GAAM,OAAA4H,EAAI5H,CAAJ,GAAO,GAAK,GAC9CrJ,EAAWooB,KAAKtqB,SAAyB,EAAd4sB,EACxC,MAAM,IAAI/pB,MAAM,yBAAgC,EAAd+pB,EAAe,MAInD,GAAI1qB,EAAWyqB,cAAc3sB,SAAW4sB,GAAmD,IAApC1qB,EAAWyqB,cAAc3sB,OAC9E,MAAM,IAAI6C,MAAM,mCAA4B+pB,EAAW,MAMzD,GADuB1qB,EAAWmoB,YAAYoQ,QAAO,SAACtnB,EAAG5H,GAAM,OAAA4H,EAAI5H,CAAJ,GAAO,GAAK,GACnB,IAAlCrJ,EAAWmoB,YAAYrqB,QACzCkC,EAAWmoB,YAAYrqB,SAAW2Y,EAAO,GAAGW,KAAKtZ,OAAS,EAC5D,MAAM,IAAI6C,MAAM,wBAIlB,GAAsC,IAAlCX,EAAWokB,YAAYtmB,QAAgBkC,EAAWokB,YAAYtmB,SAAW2Y,EAAO,GAAGW,KAAKtZ,OAAS,EACnG,MAAM,IAAI6C,MAAM,uBAEpB,CA4HEwhB,CAAejc,EAAQuQ,OAAQzW,GACO,IAAlCkG,EAAQuQ,OAAO,GAAGW,KAAKtZ,OA/CL,SAACoI,EAAyBlG,GAEhD,IAAM2uE,EAAsC,SAAtB3uE,EAAW4mC,OAE3BnwB,EAAS,CACbvQ,EAAQuQ,OAAO,GAAG2J,QACduuD,EAEI,CAACzoE,EAAQuQ,OAAO,GAAGW,KAAK,GAAI,EAAGlR,EAAQuQ,OAAO,GAAGW,KAAK,GAAIlR,EAAQuQ,OAAO,GAAGW,KAAK,IAEjF,CAAClR,EAAQuQ,OAAO,GAAGW,KAAK,GAAIlR,EAAQuQ,OAAO,GAAGW,KAAK,GAAI,EAAGlR,EAAQuQ,OAAO,GAAGW,KAAK,KAEzFlR,EAAQuQ,OAAO,GAAG2J,QAAQ,CAACla,EAAQuQ,OAAO,GAAGW,KAAK,GAAIlR,EAAQuQ,OAAO,GAAGW,KAAK,GAAI,EAAGlR,EAAQuQ,OAAO,GAAGW,KAAK,MAEvF,IAAlBX,EAAO3Y,QACT2Y,EAAOvS,KAAKgC,EAAQuQ,OAAO,IAE7B,IAAI0R,EAAcnoB,EAAWmoB,YACF,IAAvBA,EAAYrqB,QAAmC,IAAnBqqB,EAAY,KAC1CA,EAAc,CAACjiB,EAAQuQ,OAAO,GAAGW,KAAK,KAExC,IAAI8Q,EAAYloB,EAAWkoB,UACF,IAArBA,EAAUpqB,QAAiC,IAAjBoqB,EAAU,KACtCA,EAAY,CAAC,IAEf,IAAI3e,EAAUvJ,EAAWuJ,QACF,IAAnBA,EAAQzL,QAA+B,IAAfyL,EAAQ,KAClCA,EAAU,CAAC,IAEb,IAAI6e,EAAOpoB,EAAWooB,KACF,IAAhBA,EAAKtqB,SACPsqB,EAAO,CAAC,EAAG,IAEbA,EAAO,CAAC,EAAGA,EAAK,GAAI,EAAGA,EAAK,IAC5B7e,EAAU,CAAC,GAAGmT,OAAOnT,GACrB2e,EAAY,CAAC,GAAGxL,OAAOwL,GACvBC,EAAc,CAAC,GAAGzL,OAAOyL,GACzB,IAAM+B,EACFC,EAAmC,EAAD,KAAKnqB,GAAU,CAAEooB,KAAI,EAAE7e,QAAO,EAAE2e,UAAS,EAAEC,YAAW,IAAG1R,GAC/FvQ,EAAQ8mE,QAAQyT,EACZhqE,EAAQyT,GACR,SAAA9F,GAAe,OAAAuqD,EAAgB,CAACvqD,EAAY,GAAIA,EAAY,GAAIA,EAAY,IAC7C,CAACA,EAAY,GAAIA,EAAY,GAAIA,EAAY,GAD7D,IAErB,CAKIu8D,CAAgBz6E,EAASlG,GAtGzB,SAACkG,EAAyBuQ,EAA+BzW,G,MACjDkqB,EAAqBC,EAAmCnqB,EAAYyW,GACpE89D,EAAuC,SAAtBv0E,EAAW4mC,OAC5Bjf,EAA4B,IAAlBlR,EAAO3Y,OACvB,GAAiC,IAA7BosB,EAAmBlC,MAAvB,CAIA,IAAM5D,EAAc8F,EAAmB9F,YACjCswD,EAAYtwD,EAAYmwD,EAAiB,EAAI,GAC7CE,EAAWrwD,EAAYmwD,EAAiB,EAAI,GAC5CnpD,EAAchH,EAAYmwD,EAAiB,EAAI,GAK/CJ,EAAYI,EAAiBG,EAAYD,EAAWrpD,EACpDgpD,EAAYG,EAAiBnpD,EAAcspD,EAAYD,EACvDJ,EANe59D,EAAO,GAAGW,KAAK,GAChBX,EAAO,GAAGW,KAAK,GACbX,EAAO,GAAGW,KAAKm9D,EAAiB,EAAI,GAUpDqM,EAA0E,QAAtD,EAAA16E,EAAQogE,iBAAiBua,UAA6B,QAC5E36E,EAAQ8mE,QAAQ,EAAD,KAEN,EAAAjuC,0BAAwB,CAC3BjoB,UAAW4pE,EAAyBt+D,SACpCnhB,IAAK,WAAM,WAAA+9B,4BAA2BvoB,EAAO,GAAIiqE,EAAyB/zD,KAA/D,IAEb,CAAClW,OAAQ,CAAC,GAAI0nB,QAAS,CAACn+B,EAAWwgF,UAAY,GAAK,KAAK,GAC7DxgF,EAAWwgF,WAAat6E,EAAQogE,iBAAiBua,KACnD36E,EAAQogE,iBAAiBua,GAAKD,GAIhC,IAAME,EAAsB,CAACrqE,EAAO,GAAImqE,GACpCj5D,IACG4sD,GAA4C,IAA1B99D,EAAO,GAAGW,KAAKtZ,OAGpCgjF,EAAoB58E,KAAKuS,EAAO,IAFhCqqE,EAAoB58E,KAAKuS,EAAO,GAAG2J,QAAQ,CAAC3J,EAAO,GAAGW,KAAK,GAAI,EAAG,MAOtElR,EAAQ8mE,SACJ,IAAA+T,8CACID,EAAqB52D,EAAoB9F,EAAa+vD,EAAWC,EAAWC,EAAU1sD,GA7BxB,GA+BlE,CAAClR,OAAQqqE,G,MA9CX56E,EAAQ8mE,QAAQyT,EAAuChqE,EAAQyT,GA+CnE,CAoDAD,CAAgB/jB,EAASA,EAAQuQ,OAAQzW,EAE7C,C,yXCxUA,cACA,SAGA,UACA,UACA,UACA,UACA,UAEa,EAAAqoB,qBACT,SAAChD,EAA+B8C,EAAgCD,EAC/D+C,EAA+B1hB,EAA4BolE,GAC1D,IAAMzjD,EAAY7F,EAAW,GACvB8F,EAAoB9F,EAAWnY,MAAMyhE,EAAgB,EAAI,EAAGA,EAAgB,EAAI,GAChFjkD,EAAcS,EAAkBrtB,OAChCstB,EAAcjD,EAAY,GAE1BkD,EADqBlD,EAAYjb,MAAM,GACC3N,KAAI,SAAC0S,EAAGnP,GAAM,OAAAmP,GAAKA,EAAI,IAAMiW,EAAUplB,GAAK,EAA9B,IAEtDshB,EAD2B+G,EAAkB5rB,KAAI,SAAC0S,EAAGnP,GAAM,OAAAmP,EAAIgZ,EAAWnoB,GAAKmoB,EAAWnoB,EAAI4nB,EAAnC,IAEpCnrB,KAAI,SAAC0S,EAAGnP,GAAM,OAAA9E,KAAK0f,OAAOzL,EAAIoZ,EAAmBvoB,GAAKyG,EAAQzG,IAAMyG,EAAQzG,GAA9D,IAG3C,OAFAshB,EAAYkmB,OAAO,EAAG,EAAGpf,GACzB9G,EAAYkmB,OAAOqkC,EAAgB,EAAI,EAAG,EAAGvjD,GACtChH,CACT,EAcJ,IAAMs8D,GAAgD,IAAAhhF,6BAA4B,CAACitB,KAAM,CAAC,EAAG,EAAG,EAAG,KAqD7FnB,EAA4B,SAA2BxrB,EAAeyW,GAG1E,IAFA,IAAM0R,EAAcnoB,EAAWmoB,YAAYjb,QAElCpK,EAAI,EAAGA,EAAI2T,EAAO,GAAGW,KAAKtZ,SAAUgF,EAChB,IAAvBqlB,EAAYrlB,EAAI,KAClBqlB,EAAYrlB,EAAI,GAAK2T,EAAO,GAAGW,KAAKtU,IAGxC,IAAMslB,EAAOpoB,EAAWooB,KAAKlb,QAC7B,EAAAgf,aAAaC,yBACT1V,EAAO,GAAGW,KAAMpX,EAAWuJ,QAASvJ,EAAWkoB,UAAWC,EAAaC,EAA4B,SAAtBpoB,EAAW4mC,OACxF5mC,EAAWioB,SAGf,IAAM4C,EAAmBlsB,OAAOO,OAAO,CAAC,EAAGc,GAE3C,OADArB,OAAOO,OAAO2rB,EAAe,CAAC1C,YAAW,EAAEC,KAAI,EAAEhG,SAAUpiB,EAAWoiB,WAC/DyI,CACT,EAEa,EAAAhO,oBAAsB,SAAC7c,GAClC,IAAM8qB,GAAuB,IAAAC,mCAAkC/qB,GAEzD4mC,EAAS5mC,EAAW4mC,OACpB3e,EAAU,CAAC,SAAU,QAAS,aAAc,cAAcjoB,EAAWghF,UACrE94D,EAAYloB,EAAWkoB,UACvBF,EAAQhoB,EAAWgoB,MACnBG,EAAcnoB,EAAWihF,aACzB74D,EAAOpoB,EAAWooB,KAClB7e,EAAUvJ,EAAWuJ,QACrBi3E,EAAYxgF,EAAWkhF,aAE7B,OAAO,IAAAxhF,6BAA2B,GAC7BuoB,QAAO,EAAE2e,OAAM,EAAE1e,UAAS,EAAEF,MAAK,EAAEG,YAAW,EAAEC,KAAI,EAAE7e,QAAO,EAAEi3E,SAAQ,GAAK11D,GACnF,EA0Ia,EAAAlO,KAAO,SAAC1W,EAAyBlG,IA9NvB,SAACyW,EAA+BzW,GAGrD,IAAKyW,GAA6B,IAAlBA,EAAO3Y,QAAkC,IAAlB2Y,EAAO3Y,OAC5C,MAAM,IAAI6C,MAAM,+BAIlB,GAA8B,IAA1B8V,EAAO,GAAGW,KAAKtZ,QAA0C,IAA1B2Y,EAAO,GAAGW,KAAKtZ,OAChD,MAAM,IAAI6C,MAAM,yCAGlB,GAAI8V,EAAO,GAAGW,KAAKtZ,SAAW2Y,EAAO,GAAGW,KAAKtZ,OAC3C,MAAM,IAAI6C,MAAM,gDAMlB,GAFoB8V,EAAO,GAAGW,KAA2B,SAAtBpX,EAAW4mC,OAAoBnwB,EAAO,GAAGW,KAAKtZ,OAAS,EAAI,KACtE2Y,EAAO,GAAGW,KAAK,GAAKpX,EAAWgoB,MAErD,MAAM,IAAIrnB,MAAM,qDAIlB,GAAsB,IAAlB8V,EAAO3Y,SAA2C,IAA1B2Y,EAAO,GAAGW,KAAKtZ,QAAgB2Y,EAAO,GAAGW,KAAK,KAAOX,EAAO,GAAGW,KAAK,IAC9F,MAAM,IAAIzW,MAAM,gBAGlB,IAAM+pB,EAAcjU,EAAO,GAAGW,KAAKtZ,OAAS,EAE5C,GAAIkC,EAAWkoB,UAAUpqB,SAAW4sB,EAClC,MAAM,IAAI/pB,MAAM,8BAAuB+pB,EAAW,MAIpD,GAAI1qB,EAAWuJ,QAAQzL,SAAW4sB,EAChC,MAAM,IAAI/pB,MAAM,4BAAqB+pB,EAAW,MAIlD,GAAI1qB,EAAWooB,KAAKtqB,SAAyB,EAAd4sB,EAC7B,MAAM,IAAI/pB,MAAM,yBAAgC,EAAd+pB,EAAe,MAKnD,GAAsC,IAAlC1qB,EAAWmoB,YAAYrqB,QAAgBkC,EAAWmoB,YAAYrqB,SAAW2Y,EAAO,GAAGW,KAAKtZ,OAAS,EACnG,MAAM,IAAI6C,MAAM,uBAEpB,CA8KEwhB,CAAejc,EAAQuQ,OAAQzW,GACO,IAAlCkG,EAAQuQ,OAAO,GAAGW,KAAKtZ,OA5Bd,SAACoI,EAAyBlG,GAEvC,IAAM2uE,EAAsC,SAAtB3uE,EAAW4mC,OAC3BnwB,EAAS,CACbvQ,EAAQuQ,OAAO,GAAG2J,QACduuD,EAEI,CAACzoE,EAAQuQ,OAAO,GAAGW,KAAK,GAAI,EAAGlR,EAAQuQ,OAAO,GAAGW,KAAK,GAAIlR,EAAQuQ,OAAO,GAAGW,KAAK,IAEjF,CAAClR,EAAQuQ,OAAO,GAAGW,KAAK,GAAIlR,EAAQuQ,OAAO,GAAGW,KAAK,GAAI,EAAGlR,EAAQuQ,OAAO,GAAGW,KAAK,KAEzFlR,EAAQuQ,OAAO,GAAG2J,QAAQ,CAACla,EAAQuQ,OAAO,GAAGW,KAAK,GAAIlR,EAAQuQ,OAAO,GAAGW,KAAK,GAAI,EAAGlR,EAAQuQ,OAAO,GAAGW,KAAK,MAE/E,IAA1BlR,EAAQuQ,OAAO3Y,QACjB2Y,EAAOvS,KAAKgC,EAAQuQ,OAAO,IAE7B,IAAM2R,EAAO,CAAC,EAAGpoB,EAAWooB,KAAK,GAAI,EAAGpoB,EAAWooB,KAAK,IAClD7e,EAAU,CAAC,GAAGmT,OAAO1c,EAAWuJ,SAChC2e,EAAY,CAAC,GAAGxL,OAAO1c,EAAWkoB,WAClCC,EAAc,CAAC,GAAGzL,OAAO1c,EAAWmoB,aACpC+B,EAAqBsB,EAA0B,EAAD,KAAKxrB,GAAU,CAAEooB,KAAI,EAAE7e,QAAO,EAAE2e,UAAS,EAAEC,YAAW,IAAG1R,GAC7GvQ,EAAQ8mE,SAAQ,IAAAqT,oCACZ5pE,EAAQyT,GACR,SAAA9F,GAAe,OAAAuqD,EAAgB,CAACvqD,EAAY,GAAIA,EAAY,GAAIA,EAAY,IAAM,EAAnE,IACrB,CAKI+8D,CAAOj7E,EAASlG,GA3IL,SAACkG,EAAyBuQ,EAA+BzW,G,QAChEkqB,EAAqBsB,EAA0BxrB,EAAYyW,GAKjE,GAAyB,IAArBzW,EAAWgoB,MAAf,CAKA,IAAMusD,EAAuC,SAAtBv0E,EAAW4mC,OAC5Bjf,EAA4B,IAAlBlR,EAAO3Y,OACjB88B,EAAcnkB,EAAO,GAAGW,KAAKm9D,EAAiB,EAAI,GAClD15C,EAAapkB,EAAO,GAAGW,KAAKm9D,EAAiB,EAAI,GACjD6M,EAAgB3qE,EAAO,GAAGW,KAAKm9D,EAAiB,EAAI,GACpD8M,EAAe5qE,EAAO,GAAGW,KAAK,GAC9BkqE,EAAc7qE,EAAO,GAAGW,KAAK,GAE7BgN,GAAc,IAAAiE,sBAChB5R,EAAO,GAAGW,KAAMX,EAAO,GAAGW,KAAMpX,EAAWkoB,UAAWgC,EAAmB9B,KAAMpoB,EAAWuJ,QAC1FgrE,GACEG,EAAYtwD,EAAYmwD,EAAiB,EAAI,GAC7CE,EAAWrwD,EAAYmwD,EAAiB,EAAI,GAC5CnpD,EAAchH,EAAYmwD,EAAiB,EAAI,GAE/CgN,EAAWhN,GAAkB8M,IAAiBzmD,GAAe0mD,IAAgBzmD,GACxD,IAAvB76B,EAAWooB,KAAK,IAAmC,IAAvBpoB,EAAWooB,KAAK,GAChD,GAAIm5D,GACkB,IAAjBF,GAAsC,IAAhBC,GAAiD,IAA5BthF,EAAWkoB,UAAU,IAAwC,IAA5BloB,EAAWkoB,UAAU,IACvE,IAA1BloB,EAAWuJ,QAAQ,IAAsC,IAA1BvJ,EAAWuJ,QAAQ,IAAmC,IAAvBvJ,EAAWooB,KAAK,IACvD,IAAvBpoB,EAAWooB,KAAK,GAAW,CAE9B,IAAM4R,EAAQ5V,EAAY,GACtBo9D,OAAS,EAAEC,OAAS,EAAEC,OAAiB,EACrC34D,EAAe,GACrB,GAAIwrD,EAAgB,CAClB,IAAM,EAA0E,QAAtD,EAAAruE,EAAQogE,iBAAiBua,UAA6B,QAC5E36E,EAAQ8mE,QAAQ,EAAD,KAEN,EAAAjuC,0BAAwB,CAC3BjoB,UAAW4pE,EAAyBt+D,SACpCnhB,IAAK,WAAM,WAAA+9B,4BAA2BvoB,EAAO,GAAIiqE,EAAyB/zD,KAA/D,IAEb,CAAClW,OAAQ,CAAC,GAAI0nB,QAAS,CAACn+B,EAAWwgF,UAAY,GAAK,KAAK,GAIjE,GAHIxgF,EAAWwgF,WAAat6E,EAAQogE,iBAAiBua,KACnD36E,EAAQogE,iBAAiBua,GAAK,GAE5BU,EAAU,CACZ,IAAM9zD,EAAYmN,EAAcC,EAAaumD,EAC7CI,EAAY/qE,EAAO,GAAG2J,QAAQ,CAAC,EAAG4Z,EAAOvM,IACzCg0D,EAAY,EAAiBrhE,QAAQ,CAAC,EAAGqN,EAAWrC,IACpDs2D,EAAoB,CAAC,EAAG1nD,EAAO5O,E,MAE/Bo2D,EAAY/qE,EAAO,GAAG2J,QAAQ,CAAC4Z,EAAOY,EAAcC,EAAYumD,IAChEK,EAAY,EAAiBrhE,QAAQ,CAAC,EAAGghE,EAAeh2D,IACxDs2D,EAAoB,CAAC1nD,EAAO06C,EAAYD,EAAUrpD,GAEpDrC,EAAa7kB,KAAKs9E,GAClBz4D,EAAa7kB,KAAKu9E,E,MAElBD,EAAY/qE,EAAO,GAAG2J,QAAQ,CAAC4Z,EAAOonD,EAAexmD,EAAcC,IACnE4mD,EAAYhrE,EAAO,GAAG2J,QAAQ,CAAC,EAAGgL,EAAag2D,IAC/CM,EAAoB,CAAC1nD,EAAO5O,EAAaspD,EAAYD,GACrD1rD,EAAa7kB,KAAKu9E,GAClB14D,EAAa7kB,KAAKs9E,GAQpB,OANI75D,GACFoB,EAAa7kB,KAAKuS,EAAO,SAE3BvQ,EAAQ8mE,SACJ,IAAAnhD,+BAA8B9C,EAAcmB,EAAoB9F,EAAas9D,EAAmBnN,GAChG,CAAC99D,OAAQsS,G,CAMf,IAGM63D,EAA0E,QAAtD,EAAA16E,EAAQogE,iBAAiBua,UAA6B,QAC5E36E,EAAQ8mE,QAAQ,EAAD,KAEN,EAAAjuC,0BAAwB,CAC3BjoB,UAAW4pE,EAAyBt+D,SACpCnhB,IAAK,WAAM,WAAA+9B,4BAA2BvoB,EAAO,GAAIiqE,EAAyB/zD,KAA/D,IAEb,CAAClW,OAAQ,CAAC,GAAI0nB,QAAS,CAACn+B,EAAWwgF,UAAY,GAAK,KAAK,GAC7DxgF,EAAWwgF,WAAat6E,EAAQogE,iBAAiBua,KACnD36E,EAAQogE,iBAAiBua,GAAKD,GAIhC,IAAMe,EAAa,CAAClrE,EAAO,GAAImqE,GAC3Bj5D,GACFg6D,EAAWz9E,KAAKuS,EAAO,IAIzB,IAAM09D,EAAYI,EAAiBG,EAAYD,EAAWrpD,EACpDgpD,EAAYG,EAAiBnpD,EAAcspD,EAAYD,EACvDJ,EAAWgN,EAAeC,EAAcF,EAC9Cl7E,EAAQ8mE,SACJ,IAAA4U,qCACID,EAAYz3D,EAAoB9F,EAAa+vD,EAAWC,EAAWC,EAAU1sD,GA3Bf,GA6BlE,CAAClR,OAAQkrE,G,MApGXz7E,EAAQ8mE,SAAQ,IAAAqT,oCAAmC5pE,EAAQyT,GAqG/D,CAiCIqB,CAAOrlB,EAASA,EAAQuQ,OAAQzW,EAEpC,C,2WC9QA,cAEA,UAWa,EAAA4hF,oCACT,SAACnrE,EAA+BzW,EAA4BokB,EAAgC+vD,EAC3FC,EAAmBC,EAAkB1sD,EAAkB2sD,GACtD,IAAMrvD,EAV8B,SAAC0C,EAAkB7Q,GAAuC,OAClGtX,KAAM,eACNkX,WAAYiR,EAAU,CAAC,EAAAkpD,YAAYC,QAAS,EAAAD,YAAYC,QAAS,EAAAD,YAAYC,SACvD,CAAC,EAAAD,YAAYC,QAAS,EAAAD,YAAYC,SACxDh6D,UAAS,EAJyF,CAU7E+qE,CAAkCl6D,EAAS3nB,EAAWoiB,UACvE,OAAO,EAAP,KACK6C,GAAQ,CACXhkB,IAAK,WAAM,WAAAizE,+BACPz9D,EAAQwO,EAAUjlB,EAAYokB,EAAa+vD,EAAWC,EAAWC,EAAU1sD,EAC3E2sD,EAFO,GAIf,C,oXCvBJ,cAEA,UAWa,EAAAyM,6CACT,SAACtqE,EAA+BzW,EAAqCokB,EACpE+vD,EAAmBC,EAAmBC,EAAkB1sD,EACxD2sD,GACC,IAAMrvD,EAXuC,SAAC0C,EAAkB7Q,GAAuC,OAC3GtX,KAAM,wBACNkX,WAAYiR,EAAU,CAAC,EAAAkpD,YAAYC,QAAS,EAAAD,YAAYC,QAAS,EAAAD,YAAYC,SACvD,CAAC,EAAAD,YAAYC,QAAS,EAAAD,YAAYC,SACxDh6D,UAAS,EAJkG,CAWtFgrE,CAA2Cn6D,EAAS3nB,EAAWoiB,UAChF,OAAO,EAAP,KACK6C,GAAQ,CACXhkB,IAAK,WAAM,WAAAk2E,wCACP1gE,EAAQwO,EAAUjlB,EAAYokB,EAAa+vD,EAAWC,EAAWC,EAAU1sD,EAC3E2sD,EAFO,GAIf,C,+2BCxBJ,cACA,SACA,UAEA,UAaMyN,EACF,qBACEC,EAAc,IAAMD,EAAgB,KACpCE,EAAkB,IAAMD,EAAc,IAEtCE,EAAiB,KADEF,EAAc,MAAQA,EACL,IAQ1C,aACE,WAAYG,QAAA,IAAAA,IAAAA,GAAc,GACxBhjF,KAAKijF,gBAAkB,IAAIliF,IAC3Bf,KAAKgjF,WAAaA,CACpB,CAeF,OAZE,YAAAE,UAAA,SAAUC,EAAgBx0E,GACxB,IAAIhP,EAAQK,KAAKijF,gBAAgBnhF,IAAIqhF,QACvB5gF,IAAV5C,EACFA,EAAQ,CAACgP,GAEThP,EAAMoF,KAAK4J,GAEb3O,KAAKijF,gBAAgB9hF,IAAIgiF,EAAQxjF,EACnC,EAIF,EAnBA,GAqBA,aACE,WAAY2X,EAA+B8rE,GAA3C,WACEpjF,KAAKqjF,aAAc,EACnBrjF,KAAKsjF,aAAe,IAAIviF,IACxBf,KAAKujF,IAAM,IAAI7/E,MACf1D,KAAKwuB,WAAa,GAGd,QAAa40D,EAASjH,SAAS,MAAQiH,EAAS1wE,MAAM,KAAM,GAAK,CAAC0wE,EAAU,IAAG,GAA9EG,EAAG,KAAEC,EAAG,KACb,IAAKD,EAAIhxE,MAAMW,OAAO6vE,IACpB,MAAM,IAAIvhF,MAAM,oBAalB,GAXmB+hF,EAAI7wE,MAAM,KAClB7H,SAAQ,SAAC44E,EAAW90E,GAC7B,IAAMsJ,EAAOX,EAAO3I,GAAOsJ,KAAKlK,QAChC,IAAK01E,EAAUlxE,MAAMW,OAAO4vE,IAC1B,MAAM,IAAIthF,MAAM,oBAElB,IAAMkiF,EAAa,EAAKC,YAAYF,GAAW,EAAMxrE,EAAMtJ,GAC3D,EAAK40E,IAAIx+E,KAAK2+E,EAChB,IAGY,KAARF,EAEFA,GAAO,OAAIxjF,KAAKsjF,aAAaM,YAAS,GAC1B/wE,QAAO,SAAC,G,IAAA,SAACgxE,EAAG,KAAY,OAAgB,IAAtB,KAAYjlD,OAAuB,QAARilD,CAArB,IACxBzjF,KAAI,SAAC,GAAU,OAAV,OAAI,EAAM,IACfE,KAAK,SAEjB,IAAKkjF,EAAIjxE,MAAMW,OAAO2vE,IACpB,MAAM,IAAIrhF,MAAM,eAKpB,IAAMsiF,EAAaN,EAAIjxE,MAAMW,OAAO0vE,EAAe,MACnDkB,SAAAA,EAAYj5E,SAAQ,SAACs4E,GACnB,GAAe,QAAXA,EACF,EAAK30D,WAAa,EAAKA,WAAWjR,OAAO,EAAKwmE,kBACzC,CACL,IAAMxmC,EAAO,EAAK+lC,aAAaxhF,IAAIqhF,GACnC,QAAa5gF,IAATg7C,EACF,MAAM,IAAI/7C,MAAM,sBAElB,EAAKgtB,WAAWzpB,KAAKw4C,EAAKvC,S,CAE9B,IACAh7C,KAAKwjF,IAAMxjF,KAAK2jF,YAAYH,GAAK,EAAMxjF,KAAKwuB,WAC9C,CAyEF,OAtEE,YAAA00D,UAAA,SAAUC,EAAgBnoC,EAAkBgoC,GAC1C,IAAIzlC,EAAOv9C,KAAKsjF,aAAaxhF,IAAIqhF,GACjC,QAAa5gF,IAATg7C,EAAoB,CACtB,GAAIA,EAAKvC,WAAaA,GAA2B,IAAfuC,EAAK3e,MACrC,MAAM,IAAIp9B,MAAM,sBAEhB+7C,EAAK3e,QACL2e,EAAKymC,aAAaj/E,KAAKi+E,E,MAGzBzlC,EAAO,CAAC3e,MAAO,EAAGoc,SAAQ,EAAEgpC,aAAc,CAAChB,IAE7ChjF,KAAKsjF,aAAaniF,IAAIgiF,EAAQ5lC,EAChC,EAGA,YAAAomC,YAAA,SAAYM,EAAcvF,EAAkBzmE,EAAyBtJ,GAArE,gBAAqE,IAAAA,IAAAA,GAAS,GAC5E,IAAMxE,EAAO8N,EAAKtZ,OACdulF,GAAW,EACXH,EAAe,GACfI,EAAU,EAEd,IAAKF,EAAK1xE,MAAMW,OAAO4vE,MAAuBpE,GAAoB,KAATuF,EACvD,MAAM,IAAIziF,MAAM,oBAElB,IAAM4iF,EAAeH,EAAK1xE,MAAMW,OAAO0vE,EAAe,MAChDc,EAAa,IAAIW,EAAW11E,GAmClC,OAjCAy1E,SAAAA,EAAcv5E,SAAQ,SAACs4E,EAAgBx/E,GACrC,GAAe,QAAXw/E,EAAkB,CACpB,GAAIe,EACF,MAAM,IAAI1iF,MAAM,+CAElB0iF,GAAW,EACX,IAAMI,EAAoBn6E,EAAOi6E,EAAazlF,OAAS,EACvD,GAAI2lF,EAAoB,EACtB,MAAM,IAAI9iF,MAAM,0BAGlB,GADAuiF,EAAe9rE,EAAKlK,MAAMo2E,EAASA,EAAUG,GACzC,EAAKjB,aACP,GAAI,EAAKU,aAAaplF,SAAWolF,EAAaplF,QAC1C,EAAKolF,aAAavyC,aAAeuyC,EAAavyC,WAChD,MAAM,IAAIhwC,MAAM,oCAEb,KAAIk9E,EAIT,MAAM,IAAIl9E,MAAM,yCAHhB,EAAK6hF,aAAc,EACnB,EAAKU,aAAeA,C,CAKtB,IAAK,IAAIvkD,EAAI,EAAGA,EAAIukD,EAAaplF,OAAQ6gC,IAAK,CAC5C,IAAM,EAAS+kD,OAAOC,aAAa,IAAIC,WAAW,GAAK9gF,GACvD+/E,EAAWR,UAAU,EAAQv/E,EAAI67B,GACjC,EAAK0jD,UAAU,EAAQjrE,EAAKksE,KAAYx1E,E,OAG1C+0E,EAAWR,UAAUC,EAAQx/E,GAC7B,EAAKu/E,UAAUC,EAAQlrE,EAAKksE,KAAYx1E,EAE5C,IACO+0E,CACT,EAQF,EA1HA,GAkOa,EAAA9Q,OAAS,SAAC7rE,EAAyBlG,GAC9C,IAAM6jF,EAAiB,IAAIC,EAAe59E,EAAQuQ,OAAQzW,EAAWuiF,UACrEr8E,EAAQ8mE,QARN,SAACv2D,EAA+BotE,EAAgC7jF,GAE1D,IAjG2BglB,EAAoBlO,EAiGzCmO,GAjGqBD,EAiGkBvO,EAAO3Y,OAjGLgZ,EAiGa9W,EAAWoiB,SAhG7E,CAAE5iB,KAAM,SAAUkX,WAAY7T,MAAMmiB,GAAYG,KAAK,EAAA0rD,YAAYC,SAAUh6D,UAAS,IAiG9E,OAAO,EAAP,KAAWmO,GAAQ,CAAEhkB,IAAK,WAAM,OA9FtC,SAACgkB,EAA2BxO,EAA+BotE,GAGzD,IAFA,IAAM1qE,EAAW1C,EAAO,GAAG0C,SACrB4mE,EAAY,IAAIl9E,MAAqB4T,EAAO3Y,QACzCgF,EAAI,EAAGA,EAAI2T,EAAO3Y,SAAUgF,EACnCi9E,EAAUj9E,IAAK,IAAAm1E,eAAc,eAAQn1E,GAAKqW,EAAU1C,EAAO3T,GAAGsU,MAEhE,IAAMgN,EAAcy/D,EAAel2D,WAC7B8pD,EAAa,EAAA9rE,UAAUjL,KAAK0jB,GAC5Blc,GAAS,IAAAkwE,gBAAe,SAAUj/D,EAAUiL,GAC5C6U,EAAoB,GACpBgqD,EAAapgF,MAAMqiB,KAAK2+D,EAAelB,IAAIP,gBAAgBvvE,QAI3DkxE,EAAgC,GAChCC,EAAiC,GACjCC,EAAiC,GACjCC,EAA4B,GAC5BC,EAAyBN,EAAepB,aAAa/hF,OAASuiF,EAAWnlF,OAC/E+lF,EAAepB,aAAaz4E,SAAQ,SAAC0yC,EAAM4lC,G,MACzC,GAAIW,EAAW3H,SAASgH,GAAS,CAC/B,IAAM,EAAcW,EAAWl3E,QAAQu2E,GACvCuB,EAAenB,IAAI14E,SAAQ,SAACo5E,EAAMtgF,GAChC,GAAI45C,EAAKymC,aAAa7H,SAASx4E,GAAI,CACjC,IAAM8sD,EAAUwzB,EAAKhB,gBAAgBnhF,IAAIqhF,GACzC,QAAgB5gF,IAAZkuD,EACF,MAAM,IAAIjvD,MAAM,wBAElBivD,EAAQ5lD,SAAQ,SAAC8D,GACfmrB,EAAQ/0B,KAAK,UACT67E,EAAUj9E,GAAGi8E,WACT,eAAQj8E,EAAC,WAAWgL,EAAO5F,EAAOqwE,WAAW,gBAAiB,KACxE,G,CAEJ,G,MAEAsL,EAAenB,IAAI14E,SAAQ,SAACo5E,EAAMtgF,GAChC,IAAM45C,EAAOmnC,EAAepB,aAAaxhF,IAAIqhF,GAC7C,QAAa5gF,IAATg7C,EACF,MAAM,IAAI/7C,MAAM,wBAElB,GAAI+7C,EAAKymC,aAAa7H,SAASx4E,GAAI,CACjC,IAAM8sD,EAAUwzB,EAAKhB,gBAAgBnhF,IAAIqhF,GACzC,QAAgB5gF,IAAZkuD,EACF,MAAM,IAAIjvD,MAAM,wBAElBivD,EAAQ5lD,SAAQ,SAAC8D,GACfi2E,EAAoB7/E,KAAK,UAAG67E,EAAUj9E,GAAGi8E,WAAW,eAAQj8E,EAAC,WAAWgL,EAAO,UAAGw0E,KACpF,IACA4B,EAAgBhgF,KAAK,kBAAW67E,EAAUj9E,GAAG83E,aAAa,eAAQ93E,EAAC,YAAU,K,CAEjF,IACAkhF,EAAqB9/E,KAAK,kBAAWo+E,EAAM,sBAAcA,EAAM,cACpB,QAAvC,EAAAuB,EAAepB,aAAaxhF,IAAIqhF,UAAO,eAAEnoC,SAAQ,aAAKmoC,EAAM,UAChE2B,EAAqB//E,KAAK,IAE9B,IACA,IAAMk1B,EAAY+qD,EAAwB,SAEjClrD,IAAO,IACV,oBAAa8mD,EAAUxgF,KAAI,SAAC6kF,EAAUthF,GAAM,OAAAshF,EAASxJ,aAAa,eAAQ93E,EAAC,WAA/B,IAA2CrD,KAAK,OAAM,O,GACjG,qBAEEw5B,IAAO,IAnDA,mB,KAqDP+qD,IAAoB,KACpBD,IAAmB,IAvDX,oB,KAyDRG,IAAe,IAvDN,iB,KAyDTD,IAAoB,GAY7B,OAAO,EAAP,KACKh/D,GAAQ,CACXkZ,QAAS,CAAC,CAAC/mB,KAAMgN,EAAajL,SAAU1C,EAAO,GAAG0C,SAAUy8D,YAAa,EAAA/E,YAAYC,UACrFgF,gBAbsB,SAAC4B,GAA+B,wBACtDA,EAAae,iBAAgB,MAA7Bf,EAAY,SAAqBqI,IAAS,IAAE73E,IAAM,yBAElDwvE,EAAagB,YAAW,qBACtBhB,EAAaiB,sCAAsClB,GAAW,yCAC1CvvE,EAAOuM,gBAAgB,cAAa,sBACxDsrE,EAAUxgF,KAAI,SAAC6kF,EAAUthF,GAAM,yBAAYA,EAAC,oBAAYi9E,EAAUj9E,GAAGjC,KAAK+uD,QAAO,IAAlD,IAAuDnwD,KAAK,MAAK,qBAChG25B,EAAU35B,KAAK,MAAK,sBACpByI,EAAOswE,YAAY,aAAc,OAAM,aARa,EActD7O,cAAe,WAAM,OAAEtjD,EAAGroB,KAAKE,KAAKu5E,EAAa,IAA5B,GAEzB,CAMsC4M,CAAwBp/D,EAAUxO,EAAQotE,EAA1C,GAClC,CAIUS,CAA8Bp+E,EAAQuQ,OAAQotE,EAAgB7jF,GAChF,EAEa,EAAAgyE,sBAAwB,SAAChyE,GACpC,IAAMuiF,EAAYviF,EAAWuiF,SAAoBpwE,QAAQ,OAAQ,IACjE,OAAO,IAAAzS,6BAA4B,CAAC6iF,SAAQ,GAC9C,C,+2BC7RA,cACA,UAEA,UAEa,EAAAgC,sBAAwB,CACnC/kF,KAAM,SACNkX,WAAY,CAAC,EAAAm6D,YAAYC,UAG3B,IAiBM0T,EAAmB,SAACzgB,EAA2BC,GAGnD,IAFA,IAAMygB,EAAO1gB,EAAOjmE,OAASkmE,EAAOlmE,OAC9B4K,EAAkB,GACf5F,EAAI,EAAGA,EAAI2hF,IAAQ3hF,EAC1B4F,EAAMxE,KAAK6/D,EAAOjhE,IAEpB,IAASA,EAAI,EAAGA,EAAIkhE,EAAOlmE,SAAUgF,EACnC4F,EAAMxE,KAAmB,IAAd8/D,EAAOlhE,GAAWihE,EAAOjhE,EAAI2hF,GAAQzgB,EAAOlhE,IAEzD,OAAO4F,CACT,EA0Ca,EAAAypE,OAAS,SAACjsE,IArEA,SAACuQ,GACtB,IAAKA,GAA4B,IAAlBA,EAAO3Y,OACpB,MAAM,IAAI6C,MAAM,4BAOlB,IALA,IAAM0kB,EAAa5O,EAAO,GAAGW,KACvB1O,EAAQ7F,MAAMqiB,KAAKzO,EAAO,GAAG01D,mBAAoB1uE,QAEnDinF,EAAah8E,EAAM5K,OAASunB,EAAWvnB,OAAS,EAAI4K,EAAM5K,OAASunB,EAAWvnB,OAC9E6mF,EAAkBt/D,EAAWvnB,OAAS4K,EAAM5K,OAAS,EAAIunB,EAAWvnB,OAAS4K,EAAM5K,OAChF4mF,EAAah8E,EAAM5K,QAAU6mF,EAAkBt/D,EAAWvnB,SAAU4mF,IAAcC,EACvF,GAAIj8E,EAAMg8E,KAAgBr/D,EAAWs/D,IAA0C,IAAtBj8E,EAAMg8E,IAC3B,IAAhCr/D,EAAWs/D,GACb,MAAM,IAAIhkF,MAAM,qDAGtB,CAuDEwhB,CAAejc,EAAQuQ,QACvB,IACMK,EADcjU,MAAMqiB,KAAKhf,EAAQuQ,OAAO,GAAG01D,mBAAoB1uE,QACvCkzC,WAC9BzqC,EAAQ8mE,QAAQ,EAAD,KACP,EAAAuX,uBAAqB,CAAEztE,UAAS,EAAE7V,IAAK,WAAM,OAzCtBgkB,EAyC8C,EAAAs/D,sBAzCnB9tE,EAyC0CvQ,EAAQuQ,OAxCtG4O,EAAa5O,EAAO,GAAGW,KACvB1O,EAAQ7F,MAAMqiB,KAAKzO,EAAO,GAAG01D,mBAAoB1uE,QACjD2mB,EAPqB,SAACiB,EAA+B3c,GACzD,OAAC2c,EAAWvnB,OAAS4K,EAAM5K,OAAU0mF,EAAiBn/D,EAAY3c,GAAS87E,EAAiB97E,EAAO2c,EAAnG,CAM4BgD,CAAqBhD,EAAY3c,GACzD+uE,EAAa,EAAA9rE,UAAUjL,KAAK0jB,GAE5BjL,EAAW1C,EAAO,GAAG0C,SACrBO,GAAQ,IAAAu+D,eAAc,QAAS9+D,EAAUkM,GACzCnd,GAAS,IAAAkwE,gBAAe,SAAUj/D,EAAUiL,GAoB3C,EAAP,KACKa,GAAQ,CACX6wD,gBApBsB,SAAC4B,GAA+B,uCACnCh+D,EAAMk2C,QAAO,MAAbl2C,EAAK,OAAY2L,IAAU,oBAC9CqyD,EAAae,iBAAiB/+D,EAAOxR,GAAO,eAC5CwvE,EAAagB,YAAW,eACxBhB,EAAaiB,sCAAsClB,GAAW,qCACxCvvE,EAAOuM,gBAAgB,cAAa,oCACtCiF,EAAM7Y,KAAK+uD,QAAO,sCAChBvqC,EAAWvnB,OAAM,+BAC/B4b,EAAM6+D,WAAW,aAAc,KAAI,6BACrC7+D,EAAMqlE,WAAW,eAAgB,IAAK,GAAE,qCAG5CrlE,EAAMqlE,WACF,eAAgB,IAAK72E,EAAOqwE,WAAW,gBAAiB,cAAOn0D,EAAYtmB,OAASunB,EAAWvnB,UAAU,iCAG7GoK,EAAOswE,YAAY,aAAc9+D,EAAMkhE,aAAa,iBAAgB,QAhBhB,EAqBtDz8C,QAAS,CAAC,CAAC/mB,KAAMgN,EAAajL,SAAU1C,EAAO,GAAG0C,SAAUy8D,YAAa,EAAA/E,YAAYC,UACrFnH,cAAe,WAAM,OAAEtjD,EAAGroB,KAAKE,KAAKu5E,EAAa,IAA5B,IAhCO,IAACxyD,EAA2BxO,EACpD4O,EACA3c,EACA0b,EACAqzD,EAEAt+D,EACAO,EACAxR,CAiC+C,IACjD,CAACuO,OAAQ,CAAC,IAChB,C,wcCvFA,cASa,EAAAujE,qBACT,SAACh6E,GACC,OAAQA,EAAW+tB,YACjB,IAAK,OACH,MAAO,CAACxF,mBAAoB,GAAIC,gBAAiB,4BACnD,IAAK,UACH,MAAO,CAACD,mBAAoB,GAAIC,gBAAiB,wCACnD,IAAK,OACH,MAAO,CACLD,mBACI,8BAAuBvoB,EAAWmuB,QAAQ,iCAAyBnuB,EAAWouB,QAAQ,MAC1F5F,gBAAiB,+CAGrB,QACE,MAAO,CAACD,mBAAoB,GAAIC,gBAAiB,IAEvD,EAES,EAAAuC,kCACT,SAAC/qB,GACC,IAAM+tB,GAAa/tB,aAAU,EAAVA,EAAY+tB,aAAwB,GAEvD,GAAmB,SAAfA,EAAuB,CACnB,SAAqB/tB,aAAU,EAAVA,EAAY4kF,oBAAyC,CAAC,EAAAt2D,SAAU,EAAAC,UAAS,GAA7FJ,EAAO,KAAEC,EAAO,KACvB,MAAO,CAACL,WAAU,EAAEK,QAAO,EAAED,QAAO,EAAEpB,mBAAoB,UAAGgB,EAAU,YAAII,EAAO,YAAIC,G,CAExF,MAAO,CAACL,WAAU,EAAEhB,mBAAoBgB,EAC1C,C,sXCpCJ,cACA,SACA,UAEA,UAuFa,EAAAskD,8BAAgC,SAACryE,GAC1C,WAAAN,6BAA4B,CAAC0lB,KAAMplB,EAAWolB,MAA9C,EAES,EAAAgtD,eAAiB,SAAClsE,EAAyBlG,IApFjC,SAACyW,GACtB,IAAKA,GAA4B,IAAlBA,EAAO3Y,OACpB,MAAM,IAAI6C,MAAM,qCAGlB,GAAI8V,EAAO,GAAGW,KAAKtZ,OAAS,EAC1B,MAAM,IAAI6C,MAAM,6DAGlB,GAAI8V,EAAO,GAAGW,KAAKtZ,SAAW2Y,EAAO,GAAGW,KAAKtZ,OAC3C,MAAM,IAAI6C,MAAM,+GAGpB,CAyEEwhB,CADejc,EAAQuQ,QAGvB,IAAMwO,EAAW,CACfzlB,KAAM,iBACNkX,WAAY,CAAC,EAAAm6D,YAAYC,QAAS,EAAAD,YAAYC,SAC9Ch6D,UAAW9W,EAAWoiB,UAGxBlc,EAAQ8mE,QA9EN,SAAC/nD,EAA2BxO,EAA+BzW,GACzD,IAAMqlB,EAAa5O,EAAO,GAAGW,KACvBytE,EAAsBpuE,EAAO,GAAG0C,SAChCkb,EAAYhP,EAAWvnB,OACvBknE,EAAe,EAAAr5D,UAAUqO,eAAeqL,GACxCy/D,EAAY,EAAAn5E,UAAUjL,KAAK2kB,GAE3B0/D,EAAetuE,EAAO,GAAGW,KACzB4tE,EAAkBvuE,EAAO,GAAG0C,SAC5B8rE,EAAc,EAAAt5E,UAAUjL,KAAKqkF,GAE7B3/D,EAAO,EAAAzZ,UAAUgjB,cAAc3uB,EAAWolB,KAAMiP,GAChD6wD,EAAe7/D,EAAWD,GAE1BhB,EAAc2gE,EAAa73E,MAAM,GACjCuqE,EAAa,EAAA9rE,UAAUjL,KAAK0jB,GAE5B1K,GAAQ,IAAAu+D,eAAc,QAAS4M,EAAqBx/D,GACpDuqC,GAAU,IAAAqoB,eAAc,UAAW+M,EAAiB,CAACC,IACrD/8E,GAAS,IAAAkwE,gBAAe,SAAUyM,EAAqBzgE,GAsC7D,OAAO,EAAP,KACKa,GAAQ,CACXkZ,QAAS,CAAC,CAAC/mB,KAAMgN,EAAajL,SAAU1C,EAAO,GAAG0C,SAAUy8D,YAAa,EAAA/E,YAAYC,UACrFgF,gBAnCsB,SAAC4B,GAA+B,wDACtB1S,EAAalnE,OAAM,aAAKknE,EAAazlE,KAAI,SAAAuD,GAAK,gBAAGA,EAAC,IAAJ,IAASrD,KAAK,KAAI,qBAChGi4E,EAAae,iBAAiB/+D,EAAOk2C,EAAS1nD,GAAO,mBACrDwvE,EAAagB,YAAW,mBACxBhB,EAAaiB,sCAAsClB,GAAW,yCAE1CvvE,EAAOuM,gBAAgB,cAAa,gCAE9Cm7C,EAAQyrB,YAAY,cAAa,wDAE7B6J,EAAY,oFAKN7/D,EAAWvnB,OAAM,sCAC1BsnB,EAAI,8GAGEld,EAAOqwE,WAAW,gBAAiB,KAAI,iOAMtBuM,EAAS,qFAzBW,EAoCtDnb,cAAe,WAAM,OAAEtjD,EAAGroB,KAAKE,KAAKu5E,EAAa,IAA5B,GAEzB,CAec0N,CAAgClgE,EAAU/e,EAAQuQ,OAAQzW,GAC5E,C,+2BCzGA,cACA,SACA,UAEA,UA2Ea,EAAA4d,sBAAwB,SAAC5d,GAClC,WAAAN,6BAA4B,CAAC0lB,KAAMplB,EAAWolB,MAA9C,EAES,EAAAzH,OAAS,SAACzX,EAAyBlG,IAxEzB,SAACyW,GACtB,IAAKA,GAA4B,IAAlBA,EAAO3Y,OACpB,MAAM,IAAI6C,MAAM,4BAEpB,CAsEEwhB,CADejc,EAAQuQ,QAGvB,IAAMwO,EAAW,CACfzlB,KAAM,SACNkX,WAAY,CAAC,EAAAm6D,YAAYC,QAAS,EAAAD,YAAYC,SAC9Ch6D,UAAW9W,EAAWoiB,UAGxBlc,EAAQ8mE,QA3EN,SAAC/nD,EAA2BxO,EAA+BzW,GACzD,IAAMqlB,EAAa5O,EAAO,GAAGW,KACvB2tE,EAAetuE,EAAO,GAAGW,KAEzBid,EAAYhP,EAAWvnB,OACvBsnB,EAAO,EAAAzZ,UAAUgjB,cAAc3uB,EAAWolB,KAAMiP,GAEhDjQ,EAAciB,EAAWnY,MAAM,GACrCkX,EAAYkmB,OAAM,MAAlBlmB,EAAW,GAAQgB,EAAM,GAAC,EAAK2/D,IAAY,IAE3C,IAAMG,EAAe7/D,EAAWD,GAC1BqyD,EAAa,EAAA9rE,UAAUjL,KAAK0jB,GAE5BhL,GAAO,IAAA6+D,eAAc,OAAQxhE,EAAO,GAAG0C,SAAU1C,EAAO,GAAGW,MAC3Dw4C,GAAU,IAAAqoB,eAAc,eAAgBxhE,EAAO,GAAG0C,SAAU1C,EAAO,GAAGW,MACtElP,GAAS,IAAAkwE,gBAAe,SAAU3hE,EAAO,GAAG0C,SAAUiL,GAqC5D,OAAO,EAAP,KACKa,GAAQ,CACXkZ,QAAS,CACP,CAAC/mB,KAAMgN,EAAajL,SAAU1C,EAAO,GAAG0C,SAAUy8D,YAAa,EAAA/E,YAAYC,UAE7EgF,gBAdsB,SAAC4B,GAA+B,wBACtDA,EAAae,iBAAiBr/D,EAAMw2C,EAAS1nD,GAAO,mBACpDwvE,EAAagB,YAAW,qBACtBhB,EAAaiB,sCAAsClB,GAAW,yCAC1CvvE,EAAOuM,gBAAgB,cAAa,sBA/BpC,WAGtB,IAFA,IAAM2wE,EAAcL,EAAajnF,OAC7BunF,EAAU,gCAAyBz1B,EAAQ/uD,KAAK+uD,QAAO,QAClD9sD,EAAI,EAAGA,EAAIsiF,EAAatiF,IAC/BuiF,GAAW,UAAGD,EAAc,EAAI,yBAAkBtiF,EAAC,KAAM,iBAAgB,cACrEshB,EAAYtmB,OAAS,EAAI,wBAAiBsnB,EAAOtiB,EAAC,KAAM,gBAAe,KAE7EuiF,GAAW,8BACCz1B,EAAQgrB,aAAa,kBAAiB,4DAElCsK,EAAY,mDAER9rE,EAAKvY,KAAK+uD,QAAO,gBAE5B9sD,EAAI,EAAb,IAAK,IAAW67B,EAAI,EAAG77B,EAAIuxB,EAAWvxB,IAChCA,IAAMsiB,GACRigE,GAAW,UAAGhxD,EAAY,EAAI,sBAAevxB,EAAC,KAAM,cAAa,gBACjE67B,GAAKymD,IAELC,GAAW,UAAGhxD,EAAY,EAAI,sBAAevxB,EAAC,KAAM,cAAa,cAC7DshB,EAAYtmB,OAAS,EAAI,wBAAiB6gC,EAAC,KAAM,gBAAe,KACpEA,KAGJ,OAAO0mD,CACT,CAOIC,GAAiB,kCACLlsE,EAAKwhE,aAAa,eAAc,sBAC5C1yE,EAAOswE,YAAY,aAAc,SAAQ,aAPW,EAetD7O,cAAe,WAAM,OAAEtjD,EAAGroB,KAAKE,KAAKu5E,EAAa,IAA5B,GAEzB,CAeczoD,CAAwB/J,EAAU/e,EAAQuQ,OAAQzW,GACpE,C,+oBC7FA,cACA,SACA,UAEA,UA4Ha,EAAA6d,KAAO,SAAC3X,EAAyBlG,IA1HvB,SAACyW,GACtB,IAAKA,EACH,MAAM,IAAI9V,MAAM,oBAElB,GAAI8V,EAAO3Y,OAAS,GAAK2Y,EAAO3Y,OAAS,EACvC,MAAM,IAAI6C,MAAM,wBAIlB,GAAsB,IAAlB8V,EAAO3Y,QAAgB2Y,EAAO,GAAGW,KAAKtZ,OAAS,EACjD,MAAM,IAAI6C,MAAM,4BAGlB,GAAK8V,EAAO,GAAG0C,WAAa1C,EAAO,GAAG0C,UACf,IAAlB1C,EAAO3Y,QAAgB2Y,EAAO,GAAG0C,WAAa1C,EAAO,GAAG0C,SAC3D,MAAM,IAAIxY,MAAM,6BAEpB,CA0GEwhB,CAAejc,EAAQuQ,QACvBvQ,EAAQ8mE,QAb0B,SAACv2D,EAA+BzW,GAClE,IAAMilB,EAAW,CACfzlB,KAAM,OACNkX,WAA8B,IAAlBD,EAAO3Y,OAAe,CAAC,EAAA+yE,YAAYC,QAAS,EAAAD,YAAYC,QAAS,EAAAD,YAAYC,SACvD,CAAC,EAAAD,YAAYC,QAAS,EAAAD,YAAYC,SACpEh6D,UAAW9W,EAAWoiB,UAGxB,OAAO,EAAP,KAAW6C,GAAQ,CAAEhkB,IAAK,WAAM,OAzE9B,SAACgkB,EAA2BxO,EAA+BzW,GACzD,IAAM0vB,EAASjZ,EAAO,GAAGW,KAAKlK,QACxByiB,EAASlZ,EAAO,GAAGW,KAAKlK,QACxB,IAAY,EAAA0iB,SAASC,qBACvBH,EAAQ1vB,EAAWqvB,OAAQM,EAAQ3vB,EAAWsvB,OAA0B,IAAlB7Y,EAAO3Y,OAAe2Y,EAAO,GAAGW,UAAO1V,GAAU,GADpGghE,EAAC,KAAEE,EAAC,KAAED,EAAC,KAERv+C,EAAc,CAACs+C,EAAGE,GACxB,IAAKx+C,EACH,MAAM,IAAIzjB,MAAM,uCAElB,IAAM82E,EAAa,EAAA9rE,UAAUjL,KAAK0jB,GAC9B0L,EAAO,GACP9vB,EAAWqvB,QAAUrvB,EAAWsvB,OAClCQ,EAAO,wCACE9vB,EAAWqvB,SAAWrvB,EAAWsvB,OAC1CQ,EAAO,yCACG9vB,EAAWqvB,QAAUrvB,EAAWsvB,OAC1CQ,EAAO,wCACG9vB,EAAWqvB,QAAWrvB,EAAWsvB,SAC3CQ,EAAO,yCAGT,IAAM3W,GAAW,IAAAs8D,6BAA4Bh/D,EAAO,GAAG0C,UACjDosE,EAAsC,IAArBvlF,EAAWuvB,MAAc,GAAK,kBAC/CU,EAA+B,IAAlBxZ,EAAO3Y,OAAe,4BA3C/B,SAAC0nF,EAAWp2C,EAAWh4B,GACrC,GAAoB,IAAhBA,EAAKtZ,OACP,MAAO,KAGT,IAAM2nF,EAA8B,IAAhBruE,EAAKtZ,QAAsB,IAAN0nF,GAA6B,IAAhBpuE,EAAKtZ,QAAgBsZ,EAAK,KAAOouE,EACjFE,EAAatuE,EAAKA,EAAKtZ,OAAS,KAAOsxC,EAEzC9Q,EAAS,KAQb,OAPKmnD,IACHnnD,GAAU,gBAASlnB,EAAKA,EAAKtZ,OAAS,GAAE,MAErC4nF,IACHpnD,GAAU,MAGLA,CACT,CA0BoEqnD,CAAQjjB,EAAGE,EAAGnsD,EAAO,GAAGW,MAAK,MAAO,GAC5FwuE,EAAkC,CACtC,6DAAsDzsE,EAAQ,MAC9D,6DAAsDA,EAAQ,OA+BhE,OA7BsB,IAAlB1C,EAAO3Y,QACT8nF,EAAgC1hF,KAAK,6DAAsDiV,EAAQ,OA4B9F,EAAP,KACK8L,GAAQ,CACXkZ,QAAS,CAAC,CAAC/mB,KAAMgN,EAAajL,SAAU1C,EAAO,GAAG0C,SAAUy8D,YAAa,EAAA/E,YAAYC,UACrFgF,gBA7BsB,SAAC4B,GAA+B,mCAC3ChV,EAAC,gCACDE,EAAC,gCACDD,EAAC,+BACFxpD,EAAQ,YAAInZ,EAAWuvB,MAAK,8BAC7BpW,EAAQ,YAAInZ,EAAWwvB,KAAI,mBAExCo2D,EAAgCnmF,KAAK,MAAK,kCACvBgX,EAAO3Y,OAAM,qDAA6Cqb,EAAQ,mBAErFu+D,EAAagB,YAAW,iBACtBhB,EAAaiB,sCAAsClB,GAAW,6FAKlDt+D,EAAQ,6CACIwpD,EAAC,4BACvB7yC,EAAI,0BAGNy1D,EAAc,iBACdt1D,EAAU,4CAtB8C,EA8BtD05C,cAAe,WAAM,OAAEtjD,EAAGroB,KAAKE,KAAKu5E,EAAa,IAA5B,GAEzB,CAU8BhoD,CAAsBxK,EAAUxO,EAAQzW,EAAxC,GAClC,CAIkBkvB,CAA4BhpB,EAAQuQ,OAAQzW,GAC9D,EAEa,EAAAmvB,oBAAsB,SAACnvB,GAChC,WAAAN,6BAA4BM,EAA5B,C,23BCtIJ,cACA,SACA,UAEA,UAgKa,EAAA0yE,4BAA8B,SAAC1yE,GACxC,WAAAN,6BAA4B,CAAC4iB,QAAStiB,EAAWsiB,QAASskB,OAAQ5mC,EAAW4mC,QAA7E,EAES,EAAA6rC,aAAe,SAACvsE,EAAyBlG,GACpD,IAAMilB,EAAW,CACfzlB,KAAM,wBACNkX,WAAY,CAAC,EAAAm6D,YAAYC,QAAS,EAAAD,YAAYC,QAAS,EAAAD,YAAYC,SACnEh6D,UAAW9W,EAAWoiB,UAGE,SAAtBpiB,EAAW4mC,OACb1gC,EAAQ8mE,QAxER,SAAC/nD,EAA2BxO,EAA+BzW,GACzD,IAAM6nB,EAASpR,EAAO,GAAGW,KACnBgN,EAAcyD,EACd4vD,EAAa,EAAA9rE,UAAUjL,KAAK0jB,GAC5Bw+C,EAAI/6C,EAAO,GACXqK,EAAIrK,EAAOA,EAAO/pB,OAAS,GAC3B+nF,EAAI,EAAAl6E,UAAUkxB,kBAAkBhV,EAAQ,GAAKqK,EAE7C/Y,GAAW,IAAAs8D,6BAA4Bh/D,EAAO,GAAG0C,UAEjD2sE,EAAY5zD,EAAI0wC,EAyCtB,OAAO,EAAP,KACK39C,GAAQ,CACXkZ,QAAS,CACP,CAAC/mB,KAAMgN,EAAajL,SAAU1C,EAAO,GAAG0C,SAAUy8D,YAAa,EAAA/E,YAAYC,UAE7EgF,gBA7CsB,SAAC4B,GAA+B,mCAC3C9U,EAAC,+BACDijB,EAAC,+BACD3zD,EAAC,qCACK/Y,EAAQ,cAAM0sE,EAAC,uCACbA,EAAI3zD,EAAC,qCACPlyB,EAAWsiB,QAAO,qEAEYnJ,EAAQ,wEACJA,EAAQ,uEACTA,EAAQ,+EACAA,EAAQ,mBAEtEu+D,EAAagB,YAAW,mNAMRjB,EAAU,wCACdt+D,EAAQ,8LAODA,EAAQ,8lBA3B+B,EA8CtDwwD,cAAe,WAAM,OAAEtjD,EAAGroB,KAAKE,KAAK4nF,EAAY,IAA3B,GAEzB,CAagBC,CAAkC9gE,EAAU/e,EAAQuQ,OAAQzW,IAE5EkG,EAAQ8mE,QArKR,SAAC/nD,EAA2BxO,EAA+BzW,GACzD,IAAM6nB,EAASpR,EAAO,GAAGW,KAEnBgN,EAAcyD,EAEdi+D,EAAY,EAAAn6E,UAAUgxB,gBAAgB9U,EAD/B,GAEPm+D,EAAW,EAAAr6E,UAAUkxB,kBAAkBhV,EAFhC,GAGPqK,EAAIrK,EAAO,GACXxB,GAAI,IAAA4xD,eAAc,IAAKxhE,EAAO,GAAG0C,SAAU,CAAC0O,EAAO,GAAIA,EAAO,GAAIm+D,IAClEpjE,GAAQ,IAAAq1D,eAAc,QAASxhE,EAAO,GAAG0C,SAAU1C,EAAO,GAAGW,MAC7DwZ,GAAO,IAAAqnD,eAAc,OAAQxhE,EAAO,GAAG0C,SAAU1C,EAAO,GAAGW,MAC3DlP,GAAS,IAAAkwE,gBAAe,SAAU3hE,EAAO,GAAG0C,SAAU,CAAC0O,EAAO,GAAIA,EAAO,GAAIm+D,IAC7EtyE,EAAY,CAAC2S,EAAGzD,EAAOgO,EAAM1oB,GAC7BiR,EAAWkN,EAAExlB,KAAK/B,MAmExB,OAAO,EAAP,KACKmmB,GAAQ,CACXkZ,QAAS,CACP,CAAC/mB,KAAMgN,EAAajL,SAAU1C,EAAO,GAAG0C,SAAUy8D,YAAa,EAAA/E,YAAYC,UAE7EgF,gBAtEsB,SAAC4B,GAA+B,qCAE3CxlD,EAAC,sCACM8zD,EAAQ,qCACThmF,EAAWsiB,QAAO,4CACXnJ,EAAQ,mDACDA,EAAQ,uDACJA,EAAQ,aARvB,GAQyC,uCARzC,GASW,iBACnCu+D,EAAae,iBAAgB,MAA7Bf,EAAY,OAAqBhkE,IAAS,mBAC1CgkE,EAAagB,UAXW,IAWa,0MAOtBv/D,EAAQ,8GAECkN,EAAEplB,IAAI,QAAS,UAAW,KAAI,weAahBkY,EAAQ,4MAOzBkN,EAAEplB,IAAI,QAAS,UAAW,KAAI,upBAkBJkY,EAAQ,sEACtByJ,EAAMy4D,YAAY,WAAU,qCACxCzqD,EAAKyqD,YAAY,WAAU,8HAEhCh1D,EAAEplB,IAAI,QAAS,UAAW,KAAI,kDAC1CiH,EAAO5H,IAAI,QAAS,UAAW,IAAK,SAAQ,gBA9DU,EAuEtDqpE,cAAe,WAAM,OAAEtjD,EAAGy/D,EAAL,GAEzB,CA6EgBG,CAA8BhhE,EAAU/e,EAAQuQ,OAAQzW,GAE5E,C,4WClLA,cACA,SACA,UAEA,UA8Ga,EAAA4yE,yBAA2B,SAAC5yE,GACrC,WAAAN,6BAA4B,CAAC0lB,KAAMplB,EAAWolB,KAAM9C,QAAStiB,EAAWsiB,SAAxE,EAES,EAAAqwD,UAAY,SAACzsE,EAAyBlG,IA1G5B,SAACyW,GACtB,IAAKA,GAAUA,EAAO3Y,OAAS,EAC7B,MAAM,IAAI6C,MAAM,yCAGlB,GAA2B,IAAvB8V,EAAO,GAAG0C,UAAsD,IAAvB1C,EAAO,GAAG0C,SACrD,MAAM,IAAIxY,MAAM,8BAEpB,CAmGEwhB,CAAejc,EAAQuQ,QAEvB,IAAMwO,EAAW,CACfzlB,KAAM,qBACNkX,WAAsC,IAA1BxQ,EAAQuQ,OAAO3Y,OAAe,CAAC,EAAA+yE,YAAYC,QAAS,EAAAD,YAAYC,SAClC,CAAC,EAAAD,YAAYC,QAAS,EAAAD,YAAYC,QAAS,EAAAD,YAAYC,SACjGh6D,UAAW9W,EAAWoiB,SAAWlc,EAAQ2mE,YAAYl8B,SAAS,IAAMzqC,EAAQuQ,OAAO3Y,OAAO6yC,SAAS,KAGrGzqC,EAAQ8mE,QAzGN,SAAC/nD,EAA2BxO,EAA+BzW,EAAiC6sE,GAEtF,IAAMhlD,EAASpR,EAAO,GAAGW,KACnBwL,EAAQnM,EAAO,GACfma,EAAOna,EAAO,GAEd2N,EAAcyD,EACd4vD,EAAa,EAAA9rE,UAAUjL,KAAK0jB,GAC5BgB,EAAO,EAAAzZ,UAAUgjB,cAAc3uB,EAAWolB,KAAMyC,EAAO/pB,QACvDgoF,EAAY,EAAAn6E,UAAUgxB,gBAAgB9U,EAAQzC,GAC9C4gE,EAAW,EAAAr6E,UAAUkxB,kBAAkBhV,EAAQzC,GAE/C8gE,EAAY,EAAAv6E,UAAUjL,KAAKkiB,EAAMxL,MACjC+uE,EAAWv1D,EAAO,EAAAjlB,UAAUjL,KAAKkwB,EAAKxZ,MAAQ,EACpD,GAAI8uE,IAAcF,GAAap1D,GAAQu1D,IAAaH,EAClD,MAAM,IAAIrlF,MAAM,sCAA+BqlF,EAAQ,qGAExCE,EAAS,6BAAqBC,IAI/C,IADA,IAAMC,EAAmB,GAChBtjF,EAAI,EAAGA,EAAI+kB,EAAO/pB,SAAUgF,EAC/BA,EAAIsiB,EACNghE,EAAiBliF,KAAK2jB,EAAO/kB,IAE7BsjF,EAAiBliF,KAAK,GAI1B,IAAMiV,GAAW,IAAAs8D,6BAA4Bh/D,EAAO,GAAG0C,UAEjDktE,EAAoBxZ,EAAc,EAClCyZ,EAAkBzZ,EAAc,EAClC6S,EAAe,EAuCbvhD,EAAU,CAAC,CAAC/mB,KAAMgN,EAAajL,SAAU1C,EAAO,GAAG0C,SAAUy8D,YAAa,EAAA/E,YAAYC,UAY5F,OAXIuV,GACFloD,EAAQj6B,KACJ,CAACkT,KAAMgvE,EAAkBjtE,SAAU1C,EAAO,GAAG0C,SAAUy8D,YAAa,EAAA/E,YAAYC,UAGlFwV,GACFnoD,EAAQj6B,KACJ,CAACkT,KAAMgvE,EAAkBjtE,SAAU1C,EAAO,GAAG0C,SAAUy8D,YAAa,EAAA/E,YAAYC,UAI/E,EAAP,KACK7rD,GAAQ,CACXkZ,QAAO,EACP23C,gBArDsB,SAAC4B,GAA+B,0CACxCsO,EAAQ,qCACT7sE,EAAQ,cAAM6sE,EAAQ,qCACtBhmF,EAAWsiB,QAAO,qCAEpBo9D,IAAc,0CAAkCvmE,EAAQ,oCACxDumE,IAAc,8CAAsCvmE,EAAQ,iBAC/EyX,EAAO,6BAAsB8uD,IAAc,6CAAqCvmE,EAAQ,MAAO,GAAE,kCAC9EumE,IAAc,qDAA6CvmE,EAAQ,iBAE5EktE,EACI,6BAAsB3G,IAAc,6DAAqDvmE,EAAQ,KACjG,GAAE,gBAENmtE,EACI,6BAAsB5G,IAAc,2DAAmDvmE,EAAQ,KAC/F,GAAE,kBAEhBu+D,EAAagB,YAAW,wEAERjB,EAAU,wCACdt+D,EAAQ,sCACFA,EAAQ,wZAU8CyX,EAAO,YAAc,GAAE,2BAG7Fy1D,EAAoB,oCAAsC,GAAE,kBAC5DC,EAAkB,4CAA8C,GAAE,SApCN,EAsDtD3c,cAAe,WAAM,OAAEtjD,EAAGroB,KAAKE,KAAK4nF,EAAY,IAA3B,GAEzB,CAeUS,CAA2BthE,EAAU/e,EAAQuQ,OAAQzW,EAAYkG,EAAQ2mE,aAC3F,C,8WCjIA,cACA,UAEA,SAUa,EAAAhhD,8BACT,SAACpV,EAA+BqU,EAAoD1G,EACnFw1D,EAAyCrF,QAAA,IAAAA,IAAAA,GAAA,GACxC,IAV+B5sD,EAAkB7Q,EAU3CmO,GAVyB0C,EAUclR,EAAO3Y,OAAS,EAVZgZ,EAUegU,EAAqBiC,mBAVd,CAC3EvtB,KAAM,SACNkX,WAAYiR,EAAU,CAAC,EAAAkpD,YAAYC,QAAS,EAAAD,YAAYC,QAAS,EAAAD,YAAYC,SACvD,CAAC,EAAAD,YAAYC,QAAS,EAAAD,YAAYC,SACxDh6D,UAAS,IAOL,OAAO,EAAP,KACKmO,GAAQ,CACXhkB,IAAK,WAAM,WAAAizB,yBACPjP,EAAUxO,EAAQqU,EAAsB1G,EAAaw1D,EAAqBrF,EADnE,GAGf,EAYS,EAAAz1D,OAAS,SAAC5Y,IAVA,SAACuQ,GACtB,IAAKA,GAA4B,IAAlBA,EAAO3Y,OACpB,MAAM,IAAI6C,MAAM,6BAGlB,GAAI8V,EAAO,GAAGW,KAAKX,EAAO,GAAGW,KAAKtZ,OAAS,KAAO2Y,EAAO,GAAGW,KAAKX,EAAO,GAAGW,KAAKtZ,OAAS,GACvF,MAAM,IAAI6C,MAAM,mCAEpB,CAGEwhB,CAAejc,EAAQuQ,QACvB,IAAM2N,EAAc,EAAAlZ,cAAcqZ,UAAUre,EAAQuQ,OAAO,GAAGW,KAAMlR,EAAQuQ,OAAO,GAAGW,MAAM,GAC5F,IAAKgN,EACH,MAAM,IAAIzjB,MAAM,yCAElBuF,EAAQ8mE,SAAQ,IAAAnhD,+BAA8B3lB,EAAQuQ,OAAQ,CAACsX,WAAY,GAAIhB,mBAAoB,IAAK3I,GAC1G,C,gWCxCA,cACA,SACA,UAEA,UAiOMoiE,EAA6B,SAAC/vE,EAA+BzW,GACjE,IAAMk7E,EA3B8B,SAACzkE,EAA+BzW,GACpE,GAAIyW,EAAO3Y,OAAS,EAAG,CACrB,IAAM2oF,EAAehwE,EAAO,GAAG01D,mBACzBrtE,EAAS2X,EAAO3Y,QAAU,GAAK2Y,EAAO,GAAG2C,KAAQ3C,EAAO,GAAGu1D,kBAAkB,GAAK,EAElF33C,EAAY5d,EAAO,GAAGW,KAAKtZ,OAC3B,EAAa,IAAI89B,WAAW,EAAIvH,GAAWlP,KAAK,GACtD,GAAI1O,EAAO3Y,QAAU,EAEnB,IADA,IAAMg7B,EAAOriB,EAAO,GAAG01D,mBACdrpE,EAAI,EAAGA,EAAIg2B,EAAKh7B,OAAQgF,IAC/B,EAAWrF,OAAOq7B,EAAKh2B,KAAOrF,OAAOgpF,EAAa3jF,IAClD,EAAWrF,OAAOq7B,EAAKh2B,IAAMuxB,GAAa52B,OAAOgpF,EAAa3jF,EAAIg2B,EAAKh7B,cAGzE2oF,EAAaz8E,SAAQ,SAACiI,EAAGnP,GAAM,SAAWrF,OAAOqF,IAAOrF,OAAOwU,EAAhC,IAGjC,IAAM,EAAiB,GAGvB,OAFA,EAAWjI,SAAQ,SAAAiI,GAAK,SAAK/N,KAAK+N,EAAV,KAEjB,IAAAvS,6BAA4B,CAAC6sB,KAAMvsB,EAAWusB,KAAMztB,MAAK,EAAEspB,KAAI,G,CAEtE,OAAOpoB,CAEX,CAG4B0mF,CAA8BjwE,EAAQzW,GAC1DilB,EACgB,CAACzlB,KAAM,MAAOkX,WAAY,CAAC,EAAAm6D,YAAYC,SAAUh6D,UAAWokE,EAAkB94D,UACpG,OAAO,EAAP,KAAW6C,GAAQ,CAAEhkB,IAAK,WAAM,OAxC9B,SAACwV,EAA+BwO,EAA2BjlB,GACzD,IAAMokB,EAAc,EAAAzY,UAAU2pB,SAAS7e,EAAO,GAAGW,KAAKlK,QAASlN,EAAWooB,MAC1E,OAAO,EAAP,KACKnD,GAAQ,CACXkZ,QAAS,CAAC,CAAC/mB,KAAMgN,EAAajL,SAAU1C,EAAO,GAAG0C,SAAUy8D,YAAa,EAAA/E,YAAYC,UACrFgF,gBAAiB,SAAA4B,GAAgB,OAhCrC,SAACA,EAA4BjhE,EAA+BzW,EAA2BmZ,GAEjF,IAAM0d,EAAYpgB,EAAO,GAAGW,KACtBuW,EAAa,EAAAhiB,UAAU2pB,SAASuB,EAAU3pB,QAASlN,EAAWooB,MAC9DqvD,EAAa,EAAA9rE,UAAUjL,KAAKitB,GAC5Bq3C,EAAe,EAAAr5D,UAAUqO,eAAe6c,GAExC3uB,GAAS,IAAAkwE,gBAAe,SAAU3hE,EAAO,GAAG0C,SAAUwU,GACtDjU,GAAQ,IAAAu+D,eAAc,IAAKxhE,EAAO,GAAG0C,SAAU0d,GAE/C8vD,EA5BZ,SAACz+E,EAAuBylB,EAA+BkJ,EACtDmuC,EAAiChlE,EAA2BmZ,GAC3D,OAAQnZ,EAAWusB,MACjB,KAAK,EACH,OAvHN,SAACrkB,EAAuBylB,EAA+BkJ,EACtDmuC,EAAiC58C,EAAgBjP,EAAkBytE,GAIlE,IAHA,IAEI9xE,EAAQ,GACHhS,EAHS+zB,EAAU/4B,OAGH,EAAGgF,GAAK,IAAKA,EACpCgS,GAAS,gCACK5M,EAAOqwE,WAAW,UAAWz1E,GAAE,eAAOslB,EAAKtlB,GAAE,kGAI5C+zB,EAAU/zB,GAAE,+EAGPkiE,EAAaliE,GAAE,eAIrC,MAAO,8BACOqW,EAAQ,YAAIytE,EAAa,yHAI/B9xE,EAAK,wDAIf,CA4Fa2gB,CACHvtB,EAAQylB,EAAYkJ,EAAWmuC,EAAchlE,EAAWooB,KAAMjP,EAAUnZ,EAAWlB,OACzF,KAAK,EACH,OA5FN,SAACoJ,EAAuBylB,EAA+BkJ,EACtDmuC,EAAiC58C,GAIhC,IAHA,IAEItT,EAAQ,GACHhS,EAHS+zB,EAAU/4B,OAGH,EAAGgF,GAAK,IAAKA,EACpCgS,GAAS,oCACS5M,EAAOqwE,WAAW,UAAWz1E,GAAE,eAAOslB,EAAKtlB,GAAE,2IAKvC,GAAK+zB,EAAU/zB,GAAK,GAAE,0EAE1B+zB,EAAU/zB,GAAE,0HAIRkiE,EAAaliE,GAAE,mBAIzC,MAAO,mFAGGgS,EAAK,iDAGjB,CAgEa4gB,CAAcxtB,EAAQylB,EAAYkJ,EAAWmuC,EAAchlE,EAAWooB,MAC/E,KAAK,EACH,OA/DN,SAAClgB,EAAuBylB,EAA+BkJ,EACtDmuC,EAAiC58C,GAIhC,IAHA,IAEItT,EAAQ,GACHhS,EAHS+zB,EAAU/4B,OAGH,EAAGgF,GAAK,IAAKA,EACpCgS,GAAS,oCACS5M,EAAOqwE,WAAW,UAAWz1E,GAAE,eAAOslB,EAAKtlB,GAAE,kHAI5C+zB,EAAU/zB,GAAE,sCACf+zB,EAAU/zB,GAAK,EAAC,+DAERkiE,EAAaliE,GAAE,mBAIzC,MAAO,mFAGGgS,EAAK,iDAGjB,CAuCa6gB,CAAWztB,EAAQylB,EAAYkJ,EAAWmuC,EAAchlE,EAAWooB,MAC5E,KAAK,EACH,OAtCN,SAAClgB,EAAuBylB,EAA+BkJ,EACtDmuC,EAAiC58C,GAIhC,IAHA,IAEItT,EAAQ,GACHhS,EAHS+zB,EAAU/4B,OAGH,EAAGgF,GAAK,IAAKA,EACpCgS,GAAS,oCACS5M,EAAOqwE,WAAW,UAAWz1E,GAAE,eAAOslB,EAAKtlB,GAAE,oEAE9C+zB,EAAU/zB,GAAE,0DAEV+zB,EAAU/zB,GAAE,uCACd+zB,EAAU/zB,GAAE,+DAELkiE,EAAaliE,GAAE,mBAIzC,MAAO,mFAGGgS,EAAK,iDAGjB,CAca+xE,CAAW3+E,EAAQylB,EAAYkJ,EAAWmuC,EAAchlE,EAAWooB,MAC5E,QACE,MAAM,IAAIznB,MAAM,gBAEtB,CAayBmmF,CAAc5+E,EAAQylB,EAAYkJ,EAAWmuC,EAAchlE,EAAYmZ,GAa1F,MAZgB,0BACVu+D,EAAae,iBAAiB/+D,EAAOxR,GAAO,2BAC5CA,EAAOq+B,OAAM,2BACbmxC,EAAagB,YAAW,2BACxBhB,EAAaiB,sCAAsClB,GAAW,2CAEhDvvE,EAAOuM,gBAAgB,cAAa,0CAEtC0E,EAAQ,+BACpBwtE,EAAU,2DAIlB,CAQiCI,CAAgBrP,EAAcjhE,EAAQzW,EAAY,MAAlD,EACjC2pE,cAAe,WAAM,OAAEtjD,EAAGroB,KAAKE,KAAK,EAAAyN,UAAUjL,KAAK0jB,GAAe,IAA7C,GAEzB,CAgC8B4Q,CAAqBve,EAAQwO,EAAUi2D,EAAvC,GAClC,EAEa,EAAApX,IAAM,SAAC59D,EAAyBlG,IA/NtB,SAACyW,GACtB,IAAKA,GAAUA,EAAO3Y,OAAS,EAC7B,MAAM,IAAI6C,MAAM,kBAElB,GAA2B,IAAvB8V,EAAO,GAAG0C,SACZ,MAAM,IAAIxY,MAAM,6BAGlB,GAAI8V,EAAO3Y,QAAU,EAAG,CACtB,IAAIkpF,EAAoC,EAAxBvwE,EAAO,GAAGW,KAAKtZ,SAAe2Y,EAAO,GAAGW,KAAK,GAI7D,GAHsB,IAAlBX,EAAO3Y,SACTkpF,EAAgC,EAApBvwE,EAAO,GAAGW,KAAK,KAAWX,EAAO,GAAGW,KAAK,KAElD4vE,EACH,MAAM,IAAIrmF,MAAM,8E,CAGtB,CA+MEwhB,CAAejc,EAAQuQ,QACvBvQ,EAAQ8mE,QAAQwZ,EAA2BtgF,EAAQuQ,OAAQzW,GAAa,CAACyW,OAAQ,CAAC,IACpF,EAEa,EAAAq8D,mBAAqB,SAAC9yE,GACjC,IAAMusB,EAAOvsB,EAAWusB,KAClBztB,EAAQkB,EAAWlB,MACnBspB,EAAOpoB,EAAWooB,KACxB,OAAO,IAAA1oB,6BAA4B,CAAC6sB,KAAI,EAAEztB,MAAK,EAAEspB,KAAI,GACvD,C,syBCvPA,cACA,SACA,UAEA,UAQMjG,EAAiB,SAAC1L,GACtB,IAAKA,GAA4B,IAAlBA,EAAO3Y,OACpB,MAAM,IAAI6C,MAAM,8BAElB,GAA8B,IAA1B8V,EAAO,GAAGW,KAAKtZ,OACjB,MAAM,IAAI6C,MAAM,6CAEpB,EAEMq1B,EAA0C,SAC5Ctc,EAAmB1Z,EAA2B+1B,GAChD,IAAMw+C,EAAuC,SAAtBv0E,EAAW4mC,OAC5BqgD,EACF1S,EAAiB,CAAC76D,EAAMtC,KAAK,GAAIsC,EAAMtC,KAAK,GAAIsC,EAAMtC,KAAK,GAAIsC,EAAMtC,KAAK,IAAMsC,EAAMtC,KAAKlK,QACzFopB,EAAe33B,OAAO43B,eAAeC,KAAKx2B,EAAY,aACtDmoB,EAAcnoB,EAAWmoB,YAAYjb,QACrC3D,EAAUvJ,EAAWuJ,QAAQ2D,QAC7Bgb,EAAsBoO,EAAgBt2B,EAAiCkoB,UAAUhb,QAAU,GAC3Fkb,EAAOpoB,EAAWooB,KAAKlb,QAC7B,EAAAgf,aAAauK,qBAAqBV,EAAkBkxD,EAA0B9+D,EAAa5e,EAAS2e,EAAWE,GAE/G,IAAM8+D,EAA4B,EAAAh7D,aAAawK,uBAC3CX,EAAkBkxD,EAA0B19E,EAAS2e,EAAWC,EAAaC,EAAMpoB,EAAWioB,SAE5F4C,EAAgBlsB,OAAOO,OAAO,CAAC,EAAGc,GAMxC,OALIs2B,EACF33B,OAAOO,OAAO2rB,EAAe,CAAC1C,YAAW,EAAE5e,QAAO,EAAE6e,KAAI,EAAEF,UAAS,EAAE9F,SAAUpiB,EAAWoiB,WAE1FzjB,OAAOO,OAAO2rB,EAAe,CAAC1C,YAAW,EAAE5e,QAAO,EAAE6e,KAAI,EAAEhG,SAAUpiB,EAAWoiB,WAE1E,CACLyI,EACA0pD,EACI,CACE2S,EAA0B,GAAIA,EAA0B,GAAIA,EAA0B,GACtFA,EAA0B,IAE5BA,EAER,EAEM/wD,EAAsB,SACxBuhD,EAA4BrxD,EAAkBjC,EAAgCpkB,EAC9E82B,EAAab,EAAac,GAC5B,IAAMw9C,EAAuC,SAAtBv0E,EAAW4mC,OAC5B/P,EAAYxQ,EAAE3d,MACdyQ,EAAWkN,EAAExlB,KAAK/B,MAClBwK,EAAOutB,EAAU/4B,OACjB25E,EAAa,EAAA9rE,UAAUjL,KAAK0jB,GAC5Blc,GAAS,IAAAkwE,gBAAe,SAAU/xD,EAAExlB,KAAK8W,OAAQyM,GAEvD,GAAIpkB,EAAWmoB,YAAYrqB,QAAU,EAAG,CACtC,IAKIk5B,EALEC,EAAKj3B,EAAWmoB,YAAYnoB,EAAWmoB,YAAYrqB,OAAS,GAC5Do5B,EAAKl3B,EAAWuJ,QAAQvJ,EAAWuJ,QAAQzL,OAAS,GACpDq5B,EAAUn3B,EAAWooB,KAAKpoB,EAAWooB,KAAKtqB,OAAS,EAAI,GAEvDqpF,EAAU79E,GAAQirE,EAAiB,EAAI,GAEzCj9C,EAAQ,GACRC,EAAW,GAqBf,GAnBEP,EADEG,EALUn3B,EAAWooB,KAAKpoB,EAAWooB,KAAKtqB,OAAS,KAK/B,EACd,oDAC4Bm5B,EAAE,+CACjBkwD,EAAO,uBAAeA,EAAO,eAAOjwD,EAAE,cAAMC,EAAO,+CAC/CgwD,EAAO,6BAAqBA,EAAO,gBAAQtwD,EAAUswD,GAAQ,wHAI5D9gE,EAAE3R,gBAAgB,YAAW,+BAC3CoiB,EAAG,qBAGP,oDAC4BG,EAAE,+CACjBkwD,EAAO,uBAAeA,EAAO,eAAOjwD,EAAE,cAAMC,EAAO,gDAC9C9Q,EAAE3R,gBAAgB,YAAW,+BAC3CoiB,EAAG,qBAIqB,IAAlC92B,EAAWmoB,YAAYrqB,OAAc,CACvC,IAAM05B,EAAKx3B,EAAWmoB,YAAYnoB,EAAWmoB,YAAYrqB,OAAS,GAC5D25B,EAAKz3B,EAAWuJ,QAAQvJ,EAAWuJ,QAAQzL,OAAS,GACpD45B,EAAU13B,EAAWooB,KAAKpoB,EAAWooB,KAAKtqB,OAAS,EAAI,GACvD65B,EAAQ33B,EAAWooB,KAAKpoB,EAAWooB,KAAKtqB,OAAS,GACjDspF,EAAU99E,GAAQirE,EAAiB,EAAI,GACvC38C,EAAOf,EAAUuwD,GAErB9vD,EADEI,EAAUC,IAAU,EACd,sDAC4BH,EAAE,iDACjB4vD,EAAO,uBAAeA,EAAO,eAAO3vD,EAAE,cAAMC,EAAO,iDAC/C0vD,EAAO,6BAAqBA,EAAO,gBAAQxvD,EAAI,0CACpDX,EAAE,yEAKd,sDAC4BO,EAAE,iDACjB4vD,EAAO,uBAAeA,EAAO,eAAO3vD,EAAE,cAAMC,EAAO,2BAG1EH,EAAW,iC,CAuBb,MAlBoB,wBACVmgD,EAAae,iBAAiBpyD,EAAGne,GAAO,2BAExCwvE,EAAagB,YAAW,2BACtBhB,EAAaiB,sCAAsClB,GAAW,2CAEhDvvE,EAAOuM,gBAAgB,cAAa,2CACnCvM,EAAOuM,gBAAgB,cAAa,yCAExC0E,EAAQ,cAAMA,EAAQ,YAAI4d,EAAK,yDAE1CO,EAAK,2BACLN,EAAK,2BACLO,EAAQ,2BACRtB,EAAG,+D,CAMf,GAAIs+C,EACF,MAAM,IAAI5zE,MAAM,yEAElB,IAKIk3B,EALEzH,EAAa,EAAAzkB,UAAUjL,KAAKV,EAAWmoB,aACvC2P,EAAgB,EAAAnsB,UAAUqO,eAAeha,EAAWmoB,aACpD4P,EAAcD,EAAch6B,OAC5Bk6B,EAAWh4B,EAAWooB,KAAKtqB,OA4DjC,OAxDE+5B,EAHc73B,EAAWooB,KAAKmQ,QAAO,SAAClX,EAAKmX,GAAQ,OAAAnX,EAAMmX,CAAN,IAGzC,oPAQgBnS,EAAE3R,gBAAgB,YAAW,+BAC3CoiB,EAAG,qBAGL,yDAEczQ,EAAE3R,gBAAgB,YAAW,6BAC3CoiB,EAAG,kBAGK,wBACV4gD,EAAae,iBAAiBpyD,EAAGne,GAAO,mDAEhB8vB,EAAQ,aAAKh4B,EAAWooB,KAAK7oB,KAAI,SAAAuD,GAAK,gBAAGA,EAAC,IAAJ,IAASrD,KAAK,KAAI,wDACnD6J,EAAI,aAAKutB,EAAUt3B,KAAI,SAAAuD,GAAK,gBAAGA,EAAC,IAAJ,IAASrD,KAAK,KAAI,4DAC1Cs4B,EAAW,aAAKD,EAAcv4B,KAAI,SAAAuD,GAAK,gBAAGA,EAAC,IAAJ,IAASrD,KAAK,KAAI,sDAC/Ds4B,EAAW,aAAK/3B,EAAWuJ,QAAQhK,KAAI,SAAAuD,GAAK,gBAAGA,EAAC,IAAJ,IAASrD,KAAK,KAAI,6BAEzFi4E,EAAagB,YAAW,2BACtBhB,EAAaiB,sCAAsClB,GAAW,2CAEhDvvE,EAAOuM,gBAAgB,cAAa,2CACnCvM,EAAOuM,gBAAgB,cAAa,sDAE3BsjB,EAAW,2CAEvB7vB,EAAOrH,KAAK/B,MAAK,YAAIi4B,EAAK,uHAIZ3G,EAAU,4FAEb2H,EAAc,EAAC,wLAI5BA,EAAc,EAAC,uFAGVzuB,EAAOyuB,EAAW,kBAAUzuB,EAAI,+EACJA,EAAOyuB,EAAW,iDACzCzuB,EAAOyuB,EAAW,iDAClCF,EAAO,4CAEX5B,EAAG,+DAMnB,EAcMoxD,EAA4B,SAACrnF,GAA8D,OAC/F4mC,OAAQ5mC,EAAW4mC,OACnB3e,QAAS,CAAC,SAAU,QAAS,aAAc,cAAcjoB,EAAWghF,UACpEnrD,SAAU71B,EAAWsnF,UACrBn/D,YAAanoB,EAAWihF,aACxB13E,QAASvJ,EAAWuJ,QACpB6e,KAAMpoB,EAAWooB,KAN8E,EAa3FwN,EACF,SAAClc,EAAmBuL,EAA2B8Q,EAA2B/1B,GAE9D,QACFg2B,EAAwCtc,EAAO1Z,EAAY+1B,GAAiB,GADzE7L,EAAkB,KAAE9F,EAAW,KAEhCgM,EAAa,EAAAzkB,UAAUjL,KAAKwpB,EAAmB/B,aAE/C9B,GAAI,IAAA4xD,eAAc,IAAKv+D,EAAMP,SAAUO,EAAMtC,MAC7C+B,EAAWkN,EAAExlB,KAAK/B,MAGpBm3B,EAAM,GAMV,OALI/L,EAAmB4L,gBACrBG,GAAO,mBAAY9c,EAAQ,YAAIiX,EAAU,MAEzC6F,GAAO,mBAAY9c,EAAQ,YAAIiX,EAAU,YAEpC,EAAP,KACKnL,GAAQ,CACXkZ,QAAS,CAAC,CAAC/mB,KAAMgN,EAAajL,SAAUO,EAAMP,SAAUy8D,YAAa,EAAA/E,YAAYC,UACjFgF,gBAAiB,SAAA4B,GACb,OAAAvhD,EAAoBuhD,EAAcrxD,EAAGjC,EAAa8F,EAX5C,kBAWqE+L,EAAK,MAAhF,EACJ0zC,cAAe,WAAM,OAAEtjD,EAAGroB,KAAKE,KAAK,EAAAyN,UAAUjL,KAAK0jB,GAAe,IAA7C,GAEzB,EAEK,EAAAjI,2BAA6B,SAACnc,GACzC,IAAM81B,EAA+D,IAA5C91B,EAAWunF,kBAE9BpnF,EAAOknF,EAA0BrnF,GAEvC,GAAsB,IAAlBG,EAAK01B,SACP,MAAM,IAAIl1B,MAAM,0EAGlB,OAAO,IAAAjB,6BAA2B,GAAEo2B,gBAAe,GAAK31B,GAC1D,EAEa,EAAA+b,YAAc,SAAChW,EAAyBlG,GACnDmiB,EAAejc,EAAQuQ,QACvB,IAAMwO,EAAW,CAACzlB,KAAM,cAAekX,WAAY,CAAC,EAAAm6D,YAAYC,SAAUh6D,UAAW9W,EAAWoiB,UAChGlc,EAAQ8mE,QAAQ,EAAD,KACP/nD,GAAQ,CAAEhkB,IAAK,WAAM,OAAA20B,EAA6B1vB,EAAQuQ,OAAO,GAAIwO,GAAU,EAAOjlB,EAAjE,IAC/B,EAEA,IAAMwnF,EAAuB,CAC3Bv/D,QAAS,GACT4N,SAAU,EACVC,iBAAiB,EACjB3N,YAAa,GACb5e,QAAS,GACT6e,KAAM,GACNiO,aAAc,EACdnO,UAAW,GACX9F,SAAU,IAGC,EAAAnE,iCAAmC,SAACje,GAC/C,IAAM4mC,EAAS5mC,EAAW4mC,OAC1B,OAAO,EAAP,GAAQA,OAAM,GAAK4gD,GAAoB,CAAEplE,SAAUwkB,GACrD,EAEa,EAAA5oB,kBAAoB,SAAC9X,EAAyBlG,GACzDmiB,EAAejc,EAAQuQ,QACvB,IAAMwO,EAAW,CAACzlB,KAAM,oBAAqBkX,WAAY,CAAC,EAAAm6D,YAAYC,SAAUh6D,UAAW9W,EAAWoiB,UACtGlc,EAAQ8mE,QAAQ,EAAD,KACP/nD,GAAQ,CAAEhkB,IAAK,WAAM,OAAA20B,EAA6B1vB,EAAQuQ,OAAO,GAAIwO,GAAU,EAAMjlB,EAAhE,IAC/B,EAOA,IAAMo2B,EACF,SAAC1c,EAAmBuL,EAA2B8Q,EAA2B/1B,GAE9D,QACFg2B,EAAwCtc,EAAO1Z,EAAY+1B,GAAiB,GADzE7L,EAAkB,KAAE9F,EAAW,KAMhCiC,GAAI,IAAA4xD,eAAc,IAAKv+D,EAAMP,SAAUO,EAAMtC,MACnD,OAAO,EAAP,KACK6N,GAAQ,CACXkZ,QAAS,CAAC,CAAC/mB,KAAMgN,EAAajL,SAAUO,EAAMP,SAAUy8D,YAAa,EAAA/E,YAAYC,UACjFgF,gBAAiB,SAAA4B,GACb,OAAAvhD,EAAoBuhD,EAAcrxD,EAAGjC,EAAa8F,EAT5C,2CAGA,GAM0E,OAAhF,EACJy/C,cAAe,WAAM,OAAEtjD,EAAGroB,KAAKE,KAAK,EAAAyN,UAAUjL,KAAK0jB,GAAe,IAA7C,GAEzB,EAEK,EAAApF,QAAU,SAAC9Y,EAAyBlG,GAC/CmiB,EAAejc,EAAQuQ,QACvB,IAAMwO,EAAW,CAACzlB,KAAM,UAAWkX,WAAY,CAAC,EAAAm6D,YAAYC,SAAUh6D,UAAW9W,EAAWoiB,UAC5Flc,EAAQ8mE,QAAQ,EAAD,KAAK/nD,GAAQ,CAAEhkB,IAAK,WAAM,OAAAm1B,EAAyBlwB,EAAQuQ,OAAO,GAAIwO,GAAU,EAAOjlB,EAA7D,IAC3C,EAEa,EAAAif,uBAAyB,SAACjf,GACrC,IAAMq2B,EAAer2B,EAAWynF,cAC1Bv/D,EAAYloB,EAAWkoB,UAEvB/nB,EAAOknF,EAA0BrnF,GAEvC,GAAqB,IAAjBq2B,EACF,MAAM,IAAI11B,MAAM,+DAElB,GAAsB,IAAlBR,EAAK01B,SACP,MAAM,IAAIl1B,MAAM,sEAGlB,OAAO,IAAAjB,6BAA2B,GAAE22B,aAAY,EAAEnO,UAAS,GAAK/nB,GAClE,EAEa,EAAAoyE,6BAA+B,SAACvyE,GAC3C,IAAM4mC,EAAS5mC,EAAW4mC,OAC1B,OAAO,EAAP,GAAQA,OAAM,GAAK4gD,GAAoB,CAAEplE,SAAUwkB,GACrD,EAEa,EAAA1oB,cAAgB,SAAChY,EAAyBlG,GACrDmiB,EAAejc,EAAQuQ,QACvB,IAAMwO,EAAW,CAACzlB,KAAM,gBAAiBkX,WAAY,CAAC,EAAAm6D,YAAYC,SAAUh6D,UAAW9W,EAAWoiB,UAClGlc,EAAQ8mE,QAAQ,EAAD,KAAK/nD,GAAQ,CAAEhkB,IAAK,WAAM,OAAAm1B,EAAyBlwB,EAAQuQ,OAAO,GAAIwO,GAAU,EAAMjlB,EAA5D,IAC3C,C,2UCvWA,cAGA,UAEA,UAmCa,EAAA+yE,MAAQ,SAAC7sE,GACpB,IAAI6wB,EAAQ,EACR2wD,EAAQ,EACRC,EAAQ,EACuB,IAA/BzhF,EAAQuQ,OAAO,GAAG0C,UACpB4d,EAAQ7wB,EAAQuQ,OAAO,GAAG21D,gBAAgB,GAC1Csb,EAAQxhF,EAAQuQ,OAAO,GAAG21D,gBAAgB,GAC1Cub,EAAQzhF,EAAQuQ,OAAO,GAAG21D,gBAAgB,IACF,IAA/BlmE,EAAQuQ,OAAO,GAAG0C,WAC3B4d,EAAQ7wB,EAAQuQ,OAAO,GAAGu1D,kBAAkB,GAC5C0b,EAAQxhF,EAAQuQ,OAAO,GAAGu1D,kBAAkB,GAC5C2b,EAAQzhF,EAAQuQ,OAAO,GAAGu1D,kBAAkB,IAE1C,EAAA7uE,IAAIgrE,OAAOyf,sBA9Ca,SAAC7wD,EAAe2wD,EAAeC,GAK3D,GAJuB5wD,IAAU2wD,GACG3wD,EAAQ2wD,GAASC,EAAQ,GACzB5wD,EAAQ2wD,GAASC,EAAQ,EAG3D,MAAM,IAAIhnF,MAAM,4CAEpB,CAuCIknF,CAAsB9wD,EAAO2wD,EAAOC,GAGtC,IACM1iE,EAA4B,CAACzlB,KAAM,QAASkX,WAAY,GAAII,UADhD,CAACigB,EAAO2wD,EAAOC,GAAOpoF,KAAI,SAAA8mB,GAAK,OAAAA,EAAEsqB,UAAF,IAAclxC,KAAK,MAEpEyG,EAAQ8mE,QAAQ,EAAD,KACP/nD,GAAQ,CAAEhkB,IAAK,WAAM,OA1C3B,SAACgkB,EAA2B8R,EAAe2wD,EAAeC,EAAexuE,GACvE,IAAM2uE,EAAc9pF,KAAK4d,IAAI5d,KAAKE,MAAMwpF,EAAQ3wD,GAAS4wD,IACnDvjE,EAAwB,CAAC0jE,GACzBrQ,EAAaqQ,EAEb5/E,GAAS,IAAAkwE,gBAAe,SAAUj/D,EAAUiL,GAC5C2jE,EAAW7/E,EAAOrH,KAAKqwE,QAQ7B,OAAO,EAAP,KACKjsD,GAAQ,CACX6wD,gBARsB,SAAC4B,GAA+B,0BACpDA,EAAae,iBAAiBvwE,GAAO,qBACrCwvE,EAAagB,YAAW,qBACxBhB,EAAaiB,sCAAsClB,GAAW,0CACzCsQ,EAAQ,YAAIhxD,EAAK,eAAOgxD,EAAQ,0BAAkBA,EAAQ,YAAIJ,EAAK,cAJpC,EAStDxpD,QAAS,CAAC,CAAC/mB,KAAMgN,EAAajL,SAAQ,EAAEy8D,YAAa,EAAA/E,YAAYC,UACjEnH,cAAe,WAAM,OAAEtjD,EAAGroB,KAAKE,KAAKu5E,EAAa,IAA5B,GAEzB,CAsB2BuQ,CAAuB/iE,EAAU8R,EAAO2wD,EAAOC,EAAOzhF,EAAQuQ,OAAO,GAAG0C,SAAxE,IACzB,CAAC1C,OAAQ,IACf,C,8fC5DA,cACA,SACA,UAEA,UAEM0L,EAAiB,SAAC1L,GACtB,IAAKA,GAA4B,IAAlBA,EAAO3Y,QAAgB2Y,EAAO3Y,OAAS,EACpD,MAAM,IAAI6C,MAAM,qCAGlB,GAAsB,IAAlB8V,EAAO3Y,QAA0C,IAA1B2Y,EAAO,GAAGW,KAAKtZ,OACxC,MAAM,IAAI6C,MAAM,2BAEpB,EAYMsnF,EAAiB,SAACvuE,GAAU,OAAC,GAAI,GAAI,sBAAeA,EAAM2hE,YAAY,eAAc,KAAK,GAA7D,EACrB,EAAAxiD,wBACT,SAAC5T,EAA2BxO,EAA+BkiB,EAAoBuvD,EAC9EpM,EAA0B/iD,EAAkBovD,QAAlB,IAAApvD,IAAAA,GAAA,QAAkB,IAAAovD,IAAAA,GAAA,GAC3C,IAAM/jE,EAAwB,GACxBiB,EAAa5O,EAAO,GAAGW,KAEvB0hB,EAAO,EAAAntB,UAAUutB,cAAcgvD,EAAWzxE,EAAO,GAAGW,KAAKtZ,QACzDsqF,GAAmBD,GAAqC,IAAhBrvD,EAAKh7B,OACnDunB,EAAWrb,SAAQ,SAACwB,EAAG1I,GACjBslF,GAAmBtvD,EAAK/sB,QAAQjJ,IAAM,EACpCi2B,GACF3U,EAAYlgB,KAAK,GAGnBkgB,EAAYlgB,KAAKsH,EAErB,IAaA,IAXA,IAAMytB,EAAoB,GAEpBvf,GAAQ,IAAAu+D,eAAc,KAAMxhE,EAAO,GAAG0C,SAAUkM,GAChDnd,GAAS,IAAAkwE,gBAAe,SAAU0D,EAAgB13D,GAClD+U,EAAMR,EAASjf,EAAOxR,EAAQ4wB,GAC9BuvD,EAAwB,wBAAiB3uE,EAAMhF,gBAAgB,gBAAe,KAC9E4zE,EAAqB,cAAOD,EAAqB,KACjDE,EAAqB,cAAOF,EAAqB,KACjDG,EAA8B,KAAXrvD,EAAI,GAAa,GAAKovD,EAC3CnvD,GAAyB,KAAXD,EAAI,GAAamvD,EAAqBD,GAAyB,KAAOlvD,EAAI,GAEnFE,EAAI,EAAGovD,EAAI,EAAGpvD,EAAI5iB,EAAO,GAAGW,KAAKtZ,OAAQu7B,IAE5C+uD,GAAmBtvD,EAAK/sB,QAAQstB,IAAM,GACpCN,GACF0vD,IAGFrvD,EAAY,mBAAYC,EAAC,uBAAeA,EAAC,cAAM5iB,EAAO,GAAGW,KAAKiiB,GAAE,cAAMA,EAAC,kCAC/DF,EAAI,GAAGmiD,SAAS,aAAe,2BAAoBjiD,EAAC,KAAM,GAAE,6BAC5D3f,EAAMqlE,WAAW,eAAgB1lD,EAAG,WAAIA,IAAI,6BAC5CD,EAAS,uBAGjBH,EAAQ/0B,KAAK,UAAGwV,EAAMqlE,WAAW,eAAgB1lD,EAAGnxB,EAAOqwE,WAAW,gBAAiBkQ,IAAG,MAC1FA,KAIJ,IAAMhR,EAAa,EAAA9rE,UAAUjL,KAAK0jB,GAkBlC,OAAO,EAAP,KACKa,GAAQ,CACX6wD,gBAnBsB,SAAC4B,GAA+B,0BACpDA,EAAae,iBAAiB/+D,EAAOxR,GAAO,uBAE5CwvE,EAAagB,YAAW,uBACtBhB,EAAaiB,sCAAsClB,GAAW,yCAC5C/9D,EAAM7Y,KAAK+uD,QAAO,4CAChB1nD,EAAOuM,gBAAgB,cAAa,0BAExDwkB,EAAQx5B,KAAK,MAAK,uBAClB05B,EAAI,GAAE,4DACNqvD,EAAe,uBACfrvD,EAAI,GAAE,uBACNC,EAAS,uBACTD,EAAI,GAAE,uBACS,IAAfA,EAAIr7B,OAAeoK,EAAOswE,YAAY,aAAc,SAAWr/C,EAAIjsB,MAAM,GAAGzN,KAAK,MAAK,cAdpC,EAoBtD0+B,QAAS,CAAC,CAAC/mB,KAAMgN,EAAajL,SAAU2iE,EAAgBlG,YAAa,EAAA/E,YAAYC,UACjFnH,cAAe,WAAM,OAAEtjD,EAAGroB,KAAKE,KAAKu5E,EAAa,IAA5B,GAEzB,EAEJ,IAUMiR,EACF,SAACjyE,EAA+BjX,EAAcQ,EAC7C24B,GACC,IAAMuiD,EACgB,IAAlBzkE,EAAO3Y,OAAekC,EAb5B,SAACyW,EAA+BzW,GAC9B,IAAM84B,EAAiB,GAIvB,OAHIriB,EAAO,GAAGW,KAAK,GAAK,GACtBX,EAAO,GAAG01D,mBAAmBniE,SAAQ,SAAAiI,GAAK,OAAA6mB,EAAK50B,KAAKzG,OAAOwU,GAAjB,KAErC,IAAAvS,6BACH,CAACo5B,KAAI,EAAEC,SAAU/4B,EAAW+4B,SAAUovD,kBAAmBnoF,EAAWmoF,mBAC1E,CAMyCQ,CAAiClyE,EAAQzW,GAC1EilB,EAA4B,CAChCzlB,KAAI,EACJkX,WAAY,CAAC,EAAAm6D,YAAYC,SACzBh6D,UAAWokE,EAAkB94D,SAAW,IAAM3L,EAAO,GAAGW,KAAK7X,KAAI,SAAAiM,GAAK,OAAAA,EAAEmlC,UAAF,IAAclxC,KAAK,MAE3F,OAAO,EAAP,KACKwlB,GAAQ,CACXhkB,IAAK,WAAM,WAAA43B,yBACP5T,EAAU,CAACxO,EAAO,IAClBykE,EAAkBiN,mBAAuD,IAAlCjN,EAAkBpiD,KAAKh7B,OAAemqF,EAAOtvD,EACpFuiD,EAAkBpiD,KAAMriB,EAAO,GAAG0C,SAAU+hE,EAAkBniD,SAAUmiD,EAAkBiN,kBAHnF,GAKf,EAES,EAAAxoE,aAAe,SAACzZ,EAAyBlG,GACpDmiB,EAAejc,EAAQuQ,QAOvBvQ,EAAQ8mE,QAAQ0b,EAA8BxiF,EAAQuQ,OAAQ,eAAgBzW,GANnD,SAAC0Z,EAAOxR,GAC/B,OAAC,sBAAeA,EAAOrH,KAAKqwE,QAAO,QAClC,GACA,mBAAYx3D,EAAM2hE,YAAY,eAAc,KAC5C,sBAHD,IAKiG,CAAC5kE,OAAQ,CAAC,IACjH,EAEa,EAAAw8D,SAAW,SAAC/sE,EAAyBlG,GAChDmiB,EAAejc,EAAQuQ,QAOvBvQ,EAAQ8mE,QAAQ0b,EAA8BxiF,EAAQuQ,OAAQ,WAAYzW,GAN/C,SAAC0Z,EAAOxR,GAC/B,OAAC,sBAAeA,EAAOrH,KAAKqwE,QAAO,QAClC,GACA,uBAAgBx3D,EAAM2hE,YAAY,eAAc,MAChD,GAHD,IAK6F,CAAC5kE,OAAQ,CAAC,IAC7G,EAEa,EAAAy8D,SAAW,SAAChtE,EAAyBlG,GAChDmiB,EAAejc,EAAQuQ,QAOvBvQ,EAAQ8mE,QAAQ0b,EAA8BxiF,EAAQuQ,OAAQ,WAAYzW,GAN/C,SAAC0Z,EAAOxR,GAC/B,OAAC,kBAAWA,EAAOrH,KAAK/B,MAAK,4BAAoBoJ,EAAOrH,KAAK/B,MAAK,QACjE,GACA,cAAO4a,EAAM2hE,YAAY,eAAc,uBACvC,uBAHD,IAK6F,CAAC5kE,OAAQ,CAAC,IAC7G,EAEa,EAAA08D,gBAAkB,SAACjtE,EAAyBlG,GACvDmiB,EAAejc,EAAQuQ,QAOvBvQ,EAAQ8mE,QACJ0b,EAA8BxiF,EAAQuQ,OAAQ,kBAAmBzW,GAP1C,SAAC0Z,EAAOxR,GAC/B,OAAC,sBAAeA,EAAOrH,KAAKqwE,QAAO,QAClC,GACA,uBAAgBx3D,EAAM2hE,YAAY,eAAc,MAChD,sBAHD,IAMwF,CAAC5kE,OAAQ,CAAC,IACxG,EAEa,EAAAoJ,UAAY,SAAC3Z,EAAyBlG,GACjDmiB,EAAejc,EAAQuQ,QAgBvBvQ,EAAQ8mE,QAAQ0b,EAA8BxiF,EAAQuQ,OAAQ,YAAazW,GAfhD,SAAC0Z,EAAOkvE,EAAS9vD,GAE1C,IADA,IAAMS,EAAU,GACPF,EAAI,EAAGA,EAAI3f,EAAMhR,MAAM5K,OAAQu7B,KAClCP,EAAK/sB,QAAQstB,IAAM,GAAqB,IAAhBP,EAAKh7B,SAC/By7B,EAAQr1B,KAAKwV,EAAMqlE,WAAW,eAAgB1lD,EAAG,IAIrD,MAAO,CACL,UAAGE,EAAQ95B,KAAK,OAChB,sBAAeia,EAAM2hE,YAAY,eAAc,KAC/C,6BAAsB3hE,EAAM2hE,YAAY,eAAc,MACtD,GAEJ,IACkG,CAAC5kE,OAAQ,CAAC,IAC9G,EAEa,EAAAqJ,WAAa,SAAC5Z,EAAyBlG,GAClDmiB,EAAejc,EAAQuQ,QAgBvBvQ,EAAQ8mE,QAAQ0b,EAA8BxiF,EAAQuQ,OAAQ,aAAczW,GAfjD,SAAC0Z,EAAOxR,EAAQ4wB,GAEzC,IADA,IAAIp4B,EAAO,EACF24B,EAAI,EAAGA,EAAI3f,EAAMhR,MAAM5K,OAAQu7B,KAClCP,EAAK/sB,QAAQstB,IAAM,GAAqB,IAAhBP,EAAKh7B,UAC/B4C,GAAQgZ,EAAMhR,MAAM2wB,IAIxB,MAAO,CACL,oBACA,GACA,qBAAc3f,EAAM2hE,YAAY,eAAc,MAC9C,sBAAenzE,EAAOrH,KAAK/B,MAAK,kBAAU4B,EAAI,MAElD,IACmG,CAAC+V,OAAQ,CAAC,IAC/G,EAEa,EAAAsJ,UAAY,SAAC7Z,EAAyBlG,GACjDmiB,EAAejc,EAAQuQ,QAgBvBvQ,EAAQ8mE,QAAQ0b,EAA8BxiF,EAAQuQ,OAAQ,YAAazW,GAfhD,SAAC0Z,EAAOkvE,EAAS9vD,GAE1C,IADA,IAAMS,EAAU,GACPF,EAAI,EAAGA,EAAI3f,EAAMhR,MAAM5K,OAAQu7B,KAClCP,EAAK/sB,QAAQstB,IAAM,GAAqB,IAAhBP,EAAKh7B,SAC/By7B,EAAQr1B,KAAK,uBAAgBm1B,EAAC,WAIlC,MAAO,CACL,UAAGE,EAAQ95B,KAAK,OAChB,sBAAeia,EAAM2hE,YAAY,eAAc,KAC/C,6BAAsB3hE,EAAM2hE,YAAY,eAAc,MACtD,GAEJ,IACkG,CAAC5kE,OAAQ,CAAC,IAC9G,EAEa,EAAAuJ,WAAa,SAAC9Z,EAAyBlG,GAClDmiB,EAAejc,EAAQuQ,QAOvBvQ,EAAQ8mE,QAAQ0b,EAA8BxiF,EAAQuQ,OAAQ,aAAczW,GANjD,SAAC0Z,EAAOxR,GAC/B,OAAC,sBAAeA,EAAOrH,KAAKqwE,QAAO,QAClC,GACA,mBAAYx3D,EAAM2hE,YAAY,eAAc,KAC5C,GAHD,IAK+F,CAAC5kE,OAAQ,CAAC,IAC/G,EAEa,EAAAwJ,UAAY,SAAC/Z,EAAyBlG,GACjDmiB,EAAejc,EAAQuQ,QAOvBvQ,EAAQ8mE,QAAQ0b,EAA8BxiF,EAAQuQ,OAAQ,YAAazW,GANhD,SAAC0Z,EAAOxR,GAC/B,OAAC,sBAAeA,EAAOrH,KAAKqwE,QAAO,QAClC,GACA,mBAAYx3D,EAAM2hE,YAAY,eAAc,KAC5C,GAHD,IAK8F,CAAC5kE,OAAQ,CAAC,IAC9G,EAEa,EAAA28D,gBAAkB,SAACltE,EAAyBlG,GACvDmiB,EAAejc,EAAQuQ,QAOvBvQ,EAAQ8mE,QACJ0b,EAA8BxiF,EAAQuQ,OAAQ,kBAAmBzW,GAP1C,SAAC0Z,EAAOxR,GAC/B,OAAC,kBAAWA,EAAOrH,KAAK/B,MAAK,4BAAoBoJ,EAAOrH,KAAK/B,MAAK,QACjE,GACA,cAAO4a,EAAM2hE,YAAY,eAAc,qBACvC,GAHD,IAMwF,CAAC5kE,OAAQ,CAAC,IACxG,EAEa,EAAAmJ,sBAAwB,SAAC5f,GAClC,WAAAN,6BAA4BM,EAA5B,C,+4BC7QJ,cACA,SACA,UAEA,UAggBa,EAAA6oF,8BACT,SAACnvE,EAAmB1Z,EAA8B8oF,EAAsBxuD,EACvEyuD,EAA0BC,GACzB,IAAM/jE,EAA4B,CAChCzlB,KAAM,SACNkX,WAAY,CAAC,EAAAm6D,YAAYC,SACzBh6D,UAAW9W,EAAWoiB,SAAW0mE,EAAan4C,YACzCrW,EAAOx8B,OAAS,EAAI,WAAaw8B,EAAOqW,WAAa,KACrDo4C,EAAMjrF,OAAS,EAAI,UAAYirF,EAAMp4C,WAAa,KAEzD,OAAO,EAAP,KACK1rB,GAAQ,CACXhkB,IAAK,WAAM,OAhGf,SAACgkB,EAA2BgkE,EAAyBjpF,EAA8B8oF,EAClFI,EAAgCH,EAA0BI,GACzD,IAAM9jE,EAAa4jE,EAAY7xE,KACzB4xE,EAjQM,SAACA,EAAwBlwD,EAAyBxvB,GAClE,IAAM8/E,EAAS,IAAIvmF,MAAMyG,GAAM6b,KAAK,GAAGzI,OAAO,IAAI7Z,MAAMyG,GAAM6b,KAAK,IAC7DkkE,EAA0B,IAAfL,EAAIlrF,OAAesrF,EAASJ,EAAI97E,QACjD,OAAI4rB,EAAKh7B,OAAS,GAChBg7B,EAAK9uB,SAAQ,SAACiI,EAAGnP,GACfsmF,EAAOn3E,GAAKo3E,EAASvmF,GACrBsmF,EAAOtmF,EAAIwG,GAAQ+/E,EAASvwD,EAAKh7B,OAASgF,EAC5C,IACOsmF,GAEFC,CACT,CAsPkBC,CAAUH,EAAUnpF,EAAW84B,KAAMzT,EAAWvnB,QAExDsmB,EArPN,SAACiB,EAA+BiV,EAA2ByuD,EAA0BjwD,GAE/E,IAAI1U,EAAwB,GAC5B,GAAI2kE,EAAMjrF,OAAS,EACjB,GAAIg7B,EAAKh7B,OAAS,EAAG,CAEnB,GADAunB,EAAWrb,SAAQ,SAACiI,GAAM,OAAAmS,EAAYlgB,KAAK+N,EAAjB,IACtBjU,KAAKu/B,IAAG,MAARv/B,KAAI,OAAQ86B,IAAI,IAAIzT,EAAWvnB,OACjC,MAAM,IAAI6C,MAAM,wBAElBm4B,EAAK9uB,SAAQ,SAACiI,EAAGnP,GAAM,OAAAshB,EAAYnS,GAAK82E,EAAMjmF,EAAvB,G,MAEvBimF,EAAM/+E,SAAQ,SAACiI,GAAM,OAAAmS,EAAYlgB,KAAK+N,EAAjB,QAElB,CACL,GAAsB,IAAlBqoB,EAAOx8B,OACT,MAAM,IAAI6C,MAAM,2CAEhByjB,EAAciB,EAAW9lB,KAAI,SAACT,EAAOgP,GAAU,OAAA9P,KAAKurF,MAAMzqF,EAAQw7B,EAAOxsB,GAA1B,G,CAGnD,OAAOsW,CACT,CAgOgBolE,CAAgBnkE,EAAY6jE,EAAaH,EAAO/oF,EAAW84B,MACzEwB,EAAS4uD,EAAYh8E,QACE,IAAvBg8E,EAAYprF,SACdw8B,EAASjV,EAAW9lB,KAAI,SAACT,EAAOgP,GAAU,OAAU,IAAVhP,EAAc,EAAMslB,EAAYtW,GAAShP,CAAzC,IACD,YAArCkB,EAAWypF,wBACbrlE,EAlON,SAACiB,EAA+BjB,EAAgCkW,EAAkBt6B,GAE5E,IAAM0pF,EAAgB,WACpB,OAAQ1pF,EAAWypF,uBACjB,IAAK,aACH,OAAOzpF,EAAW84B,KAAKh7B,OAAS,EAAIE,KAAKC,IAAG,MAARD,KAAI,SAAQgC,EAAW84B,KAAKv5B,KAAI,SAAAuD,GAAK,OAAAw3B,EAAOx3B,EAAP,MAAU,IAAErF,OAAOksF,YAAS,IACjE3rF,KAAKC,IAAG,MAARD,KAAI,SAAQs8B,IAAM,IAAE78B,OAAOksF,YAAS,IAC1E,IAAK,cACH,OAAO3pF,EAAW84B,KAAKh7B,OAAS,EAAIE,KAAKu/B,IAAG,MAARv/B,KAAI,SAAQgC,EAAW84B,KAAKv5B,KAAI,SAAAuD,GAAK,OAAAw3B,EAAOx3B,EAAP,MAAU,IAAErF,OAAOmsF,YAAS,IACjE5rF,KAAKu/B,IAAG,MAARv/B,KAAI,SAAQs8B,IAAM,IAAE78B,OAAOmsF,YAAS,IAC1E,QACE,MAAM,IAAIjpF,MAAM,mCAA4BX,EAAWypF,sBAAqB,sBAEjF,CAXqB,GAYtBnvD,EAAOnV,KAAK,EAAK,EAAGmV,EAAOx8B,QAC3B,IAAM+rF,EAAsBxkE,EAAWnY,QAQvC,OAPIlN,EAAW84B,KAAKh7B,OAAS,GAC3BkC,EAAW84B,KAAK9uB,SAAQ,SAACiI,GAAM,OAAAqoB,EAAOroB,GAAKy3E,CAAZ,IAC/B1pF,EAAW84B,KAAK9uB,SAAQ,SAACiI,GAAM,OAAA43E,EAAoB53E,GAAKjU,KAAKurF,MAAMlkE,EAAWpT,GAAKqoB,EAAOroB,GAA3D,MAE/BqoB,EAAOnV,KAAKukE,EAAe,EAAGpvD,EAAOx8B,QACrC+rF,EAAoB7/E,SAAQ,SAACiI,EAAGnP,GAAM,OAAA+mF,EAAoB/mF,GAAK9E,KAAKurF,MAAMt3E,EAAIqoB,EAAOx3B,GAA/C,KAEjC+mF,CACT,CA0MgBC,CAAkBzkE,EAAYjB,EAAakW,EAAQt6B,KAGrE,IAAMkI,GAAS,IAAAkwE,gBAAe,SAAU6Q,EAAY9vE,SAAUiL,GACxD1K,GAAQ,IAAAu+D,eAAc,QAASgR,EAAY9vE,SAAUkM,GACrDoyD,EAAa,EAAA9rE,UAAUjL,KAAK0jB,GAC5B2lE,EAAU1kE,EAAWvnB,SAAWsmB,EAAYtmB,QAAUunB,EAAWkV,OAAM,SAAC/uB,EAAG1I,GAAM,OAAA0I,IAAM4Y,EAAYthB,EAAlB,IACjF2+B,EAA0D,uBAAvCzhC,EAAWw6B,wBA2DpC,OAAO,EAAP,KACKvV,GAAQ,CACX6wD,gBA5DsB,SAAC4B,GAA+B,yBA5VVsS,EA6VDhqF,EAAWw6B,wBA5V1D,8JAEA,WACE,OAAQwvD,GACN,IAAK,aACH,MAAO,4BACT,IAAK,qBACH,MAAO,sKAKT,IAAK,uBACH,MAAO,oCACT,IAAK,gBACH,MAAO,6LAKT,IAAK,qBACH,MAAO,gUAMT,IAAK,uBACH,MAAO,CACL,8CAA+C,kDAC/C,qCAAsC,4CACtC,sDACAvqF,KAAK,MACT,IAAK,aACH,MAAO,4CACT,QACE,MAAM,IAAIkB,MAAM,oCAA6BqpF,EAAsB,sBAExE,CApCD,GAqCA,KAqTkF,oBAC9E,WACA,OAAQhqF,EAAWusB,MACjB,IAAK,UACH,MAAO,0BA7JO,SAAC7S,EAAsB2L,GAA0C,yDAClD3L,EAAM7Y,KAAK+uD,QAAO,4DACrBvqC,EAAWvnB,OAAM,aAAKunB,EAAW9lB,KAAI,SAAAuD,GAAK,gBAAGA,EAAC,IAAJ,IAASrD,KAAK,KAAI,6CAClE4lB,EAAWvnB,OAAM,8CACA,IAAtBunB,EAAWvnB,OAAe,eAAiB,kBAAiB,0IAJI,CA8J3EmsF,CAAkBvwE,EAAO2L,GAAW,4BAxThB,SAACqc,EAA0BonD,GAC3D,oFAAgF,WAC9E,OAAQpnD,GACN,IAAK,oBACH,MAAO,yIAKT,IAAK,QACH,MAAO,2BACT,IAAK,OACH,MAAO,0BACT,IAAK,qBACH,MAAO,0KAMT,QACE,GAAIonD,EAAe,GACjB,MAAO,mLAOT,MAAM,IAAInoF,MAAM,uBAAgB+gC,EAAW,sBAEhD,CA9B+E,GA+BhF,GA/BA,CAwTYwoD,CAA4BlqF,EAAW0hC,YAAaonD,GAAa,4BAhM7E,SAACpvE,EAAsBxR,EAAuBmd,EAA+BjB,EAC5EkW,EAA2B0uD,EAAwBvnD,GAAsC,+EAC/Bv5B,EAAOrH,KAAK+uD,QAAO,gBAAQl2C,EAAM7Y,KAAK+uD,QAAO,qDACpEvqC,EAAWvnB,OAAM,aAAKunB,EAAW9lB,KAAI,SAAAuD,GAAK,gBAAGA,EAAC,IAAJ,IAASrD,KAAK,KAAI,sDAC3D2kB,EAAYtmB,OAAM,aAAKsmB,EAAY7kB,KAAI,SAAAuD,GAAK,gBAAGA,EAAC,IAAJ,IAASrD,KAAK,KAAI,iDACnE66B,EAAOx8B,OAAM,aAAKw8B,EAAO/6B,KAAI,SAAAuD,GAAK,gBAAGA,EAAC,IAAJ,IAASrD,KAAK,KAAI,8CACvDupF,EAAIlrF,OAAM,aAAKkrF,EAAIzpF,KAAI,SAAAuD,GAAK,gBAAGA,EAAC,IAAJ,IAASrD,KAAK,KAAI,yCACnDia,EAAM7Y,KAAK+uD,QAAO,8CACZxrC,EAAYtmB,OAAM,iDACC,IAAvBsmB,EAAYtmB,OAAe,gBAAkB,mBAAkB,iUAMdunB,EAAWvnB,OAAM,iCAC7E2jC,EAAgB,2fAYvB/nB,EAAMqlE,WAAW,eAAgB,IAAK,cAAa,mDA3B+B,CAiM9EoL,CACIzwE,EAAOxR,EAAQmd,EAAYjB,EAAakW,EAAQ0uD,EAAKvnD,GAAiB,qBAEhF,IAAK,SACH,MAAO,0BA5Nf,SAACv5B,EAAuBmd,EAA+BjB,EAAgCkW,EACtF0uD,GAAmC,kFAC0B9gF,EAAOrH,KAAK+uD,QAAO,2BAC7ExrC,EAAYtmB,OAAM,oDACYunB,EAAWvnB,OAAM,aAAKunB,EAAW9lB,KAAI,SAAAuD,GAAK,gBAAGA,EAAC,IAAJ,IAASrD,KAAK,KAAI,oDAC3D2kB,EAAYtmB,OAAM,aAAKsmB,EAAY7kB,KAAI,SAAAuD,GAAK,gBAAGA,EAAC,IAAJ,IAASrD,KAAK,KAAI,+CACnE66B,EAAOx8B,OAAM,aAAKw8B,EAAO/6B,KAAI,SAAAuD,GAAK,gBAAGA,EAAC,IAAJ,IAASrD,KAAK,KAAI,4CACvDupF,EAAIlrF,OAAM,aAAKkrF,EAAIzpF,KAAI,SAAAuD,GAAK,gBAAGA,EAAC,IAAJ,IAASrD,KAAK,KAAI,qDACrC2kB,EAAYtmB,OAAM,6CAC1BsmB,EAAYtmB,OAAM,+CACC,IAAvBsmB,EAAYtmB,OAAe,gBAAkB,mBAAkB,oSAKhBunB,EAAWvnB,OAAM,gEAdpD,CA4NxBssF,CAA0CliF,EAAQmd,EAAYjB,EAAakW,EAAQ0uD,GAAI,4BAzJnG,SAACtvE,EAAsBxR,EAAuBmd,EAA+BjB,EAC5EkW,EAA2BmH,EAA2BF,GAC/C,QACoB,IAAtBlc,EAAWvnB,OAAe,EAAE,EAAG,EAAG,GAAI,GAAoB,IAAdw8B,EAAO,GAAa,CAAC,EAAG,EAAG,EAAG,GAAK,CAAC,EAAG,EAAG,EAAG,GAAG,GADzF+vD,EAAQ,KAAEC,EAAS,KAAEC,EAAQ,KAAEhkE,EAAU,KAEhD,MAAO,iHAEa7M,EAAM7Y,KAAK+uD,QAAO,iCACvB06B,EAAS,+BAAuBjlE,EAAWilE,GAAU,uCACrDC,EAAQ,+BAAuBllE,EAAWklE,GAAS,8BAC5DllE,EAAWvnB,OAAM,yCACNyoB,EAAU,8CACV8jE,EAAQ,oDAEV3wE,EAAMhF,gBAAgB,gBAAe,oEAGZxM,EAAOrH,KAAK+uD,QAAO,kJAE3B06B,EAAS,mDACTC,EAAQ,yBAClC9oD,EAAgB,kCAA0Bpc,EAAWilE,GAAU,qCACjEjlE,EAAWklE,GAAS,oCACbhpD,EAAkB,mDAELlc,EAAWilE,GAAU,gDACrBjlE,EAAWklE,GAAS,kOAOtCllE,EAAWvnB,OAAS,EAAC,sDACOyoB,EAAU,oDACZ8jE,EAAQ,ogBAY1C,CA6GYG,CACI9wE,EAAOxR,EAAQmd,EAAYjB,EAAakW,EAAQmH,EAAkBzhC,EAAWuhC,oBAAmB,qBAE1G,IAAK,QACH,MAAO,wBA9Gf,SAAC7nB,EAAsBxR,EAAuBmd,EAA+BjB,EAC5EkW,EAA2B0uD,EAAwByB,EAAqBhpD,EACxEF,EAA4BK,GACrB,QAA8C,IAAtBvc,EAAWvnB,OAAe,CAAC,EAAG,GAAoB,IAAdw8B,EAAO,GAAc,CAAC,EAAG,GAAK,CAAC,EAAG,GAAE,GAA/FgwD,EAAS,KAAEC,EAAQ,KAEpBG,EAAmC,SAAClkE,GACxC,IAAMmkE,EAAYnkE,IAAQ8jE,EAAY,MAAQ,MAC9C,MAAO,qBACJK,EAAS,4CAAoCjxE,EAAM7Y,KAAK+uD,QAAO,4BAC9D1nD,EAAOrH,KAAK+uD,QAAO,iDACoB,IAAvBxrC,EAAYtmB,OAAe,gBAAkB,wBAAiB0oB,EAAG,KAAG,0GACF8T,EAAO9T,GAAI,0BAC3FpC,EAAYoC,GAAI,kBAAUnB,EAAWmB,GAAI,cAAMwiE,EAAIxiE,GAAI,aAAKwiE,EAAIxiE,GAAI,cAAMnB,EAAWvnB,OAAM,uKAI3F2jC,EAAgB,kDAA0Cpc,EAAWmB,GAAI,uCACpE+a,EAAkB,0JAIrBopD,EAAS,wDACTA,EAAS,mBAAWA,EAAS,eAAOtlE,EAAWmB,GAAI,gCACjDob,EAAc,mGAGPH,EAAgB,qCAClBF,EAAkB,kDAEzBopD,EAAS,yBAAiBA,EAAS,aAAKtlE,EAAWmB,GAAI,gFAGrC9M,EAAM7Y,KAAK+uD,QAAO,wDACvBppC,EAAG,mBAAWmkE,EAAS,uCAC1BnkE,IAAQ8jE,EAAY,gBAAS5wE,EAAMhF,gBAAgB,oBAAmB,MAAO,2GACA,0EAIjG,EAEA,MAAO,gBACPg2E,EAAiCJ,GAAU,kBAC3CI,EAAiCH,GAAS,kTAO5BE,EAAW,gCAAwBA,EAAW,iCACxDA,EAAW,iCAAyBA,EAAW,gCACrCA,EAAW,2BAAmBA,EAAW,wDACzCA,EAAW,mCAA2BA,EAAW,wEACjDA,EAAW,iCAAyBA,EAAW,kCACzDA,EAAW,kCAA0BA,EAAW,uUASfviF,EAAOrH,KAAK+uD,QAAO,6CACtCl2C,EAAM7Y,KAAK+uD,QAAO,+FAItC,CA2CYg7B,CACIlxE,EAAOxR,EAAQmd,EAAYjB,EAAakW,EAAQ0uD,EAAKhpF,EAAWyqF,YAAahpD,EAC7EzhC,EAAWuhC,mBAAoBvhC,EAAW4hC,gBAAe,mBAEnE,QACE,MAAMjhC,MAAM,uBAEjB,CA3BC,GA2BE,oBACF+2E,EAAae,iBAAiB/+D,EAAOxR,GAAO,mBAC5CwvE,EAAagB,YAAW,qBACtBhB,EAAaiB,sCAAsClB,GAAW,yBAC1DsS,EAAO,mHAGW7hF,EAAOuM,gBAAgB,cAAa,0CACtCiF,EAAM7Y,KAAK+uD,QAAO,wBACpC,WACJ,OAAQ5vD,EAAWusB,MACjB,IAAK,UACH,MAAO,0LAE8B7S,EAAMhF,gBAAgB,gBAAe,oFAE3C1U,EAAWuhC,mBAAkB,0BAE9D,IAAK,SACH,MAAO,6DACT,IAAK,QACH,MAAO,4DACT,QACE,MAAM5gC,MAAM,mCAA4BX,EAAWusB,OAExD,CAhBK,GAgBF,yBAlZyC,IAACy9D,CA4VU,EA6DtD7rD,QAAS,CAAC,CAAC/mB,KAAMgN,EAAajL,SAAU8vE,EAAY9vE,SAAUy8D,YAAa,EAAA/E,YAAYC,UACvFnH,cAAe,WAAM,OAAEtjD,EAAGroB,KAAKE,KAAKu5E,EAAa,IAA5B,GAEzB,CAceoT,CAAwB5lE,EAAUvL,EAAO1Z,EAAY8oF,EAAcxuD,EAAQyuD,EAAOC,EAAlF,GAEf,EASS,EAAA3oE,OAAS,SAACna,EAAyBlG,GAC9C,IAAMs6B,EAAmB,GACnByuD,EAAkB,GAClBC,EAAgB,GAChBF,EAXoC,SAAC5iF,GAC3C,IAAM4kF,EAAmB5kF,EAAQ4kF,iBAGjC,OAF2B,IAAI55E,YAAY45E,EAAkBA,EAAiBnjD,WAAY,GAClD,EAE1C,CAMuBojD,CAAoC7kF,IAtevD,SAACuQ,EAA+BzW,EAA8B8oF,EAAsBxuD,EACnFyuD,EAAiBC,GACV,QACDF,EAAe,GAAM,CAAC,EAAG,EAAG,GAAK,EAAE,EAAIryE,EAAO3Y,OAAS,EAAK,GAAK,GAAI,GAAE,GADrEktF,EAAa,KAAEC,EAAgB,KAAEC,EAAe,KAEjD5hF,EAAOmN,EAAO,GAAGW,KAAKtZ,OAC5B,GAAIktF,EAAgB,GAAKv0E,EAAO3Y,OAASktF,GAAiBv0E,EAAOu0E,GAAe5zE,KAAKtZ,OAAS,EAC5F2Y,EAAOu0E,GAAehf,kBAAkBhiE,SAAQ,SAAClL,GAAU,OAAAkqF,EAAI9kF,KAAKpF,EAAT,SAEtD,GAA2C,uBAAvCkB,EAAWw6B,wBACpB,MAAM,IAAI75B,MAAM,6FAGlB,GAAIsqF,EAAmB,GAAKx0E,EAAO3Y,OAASmtF,GAAoBx0E,EAAOw0E,GAAkB7zE,KAAKtZ,OAAS,EAAG,CAExG,GADA2Y,EAAOw0E,GAAkBjf,kBAAkBhiE,SAAQ,SAAClL,GAAU,OAAAw7B,EAAOp2B,KAAKpF,EAAZ,IACxC,IAAlBw7B,EAAOx8B,QACNw8B,EAAOx8B,SAAWwL,GAASw/E,GAAgB,IAAMxuD,EAAOx8B,SAAWkC,EAAW84B,KAAKh7B,OACtF,MAAM,IAAI6C,MACN,gGA/CS,SAAC25B,EAAkBt6B,GAKxC,GAJAs6B,EAAOC,OAAM,SAACz7B,GAAU,OAAAA,EAAQ,GAAK,WACX,MAAM,IAAI6B,MAAM,qDACjB,CAFD,IAIpB25B,EAAOx8B,OAAS,EAClB,GAAwB,WAApBkC,EAAWusB,MACb,KAAwB,IAAlB+N,EAAOx8B,QAAmC,IAAlBw8B,EAAOx8B,QAA8B,IAAdw8B,EAAO,IAA0B,IAAdA,EAAO,IACtD,IAAlBA,EAAOx8B,QAA8B,IAAdw8B,EAAO,IAA0B,IAAdA,EAAO,IACtD,MAAM,IAAI35B,MAAM,uEAEb,GAAwB,UAApBX,EAAWusB,QACI,IAAlB+N,EAAOx8B,QAAmC,IAAlBw8B,EAAOx8B,QAA8B,IAAdw8B,EAAO,IAA0B,IAAdA,EAAO,IACtD,IAAlBA,EAAOx8B,QAA8B,IAAdw8B,EAAO,IAA0B,IAAdA,EAAO,IACtD,MAAM,IAAI35B,MAAM,gEAIxB,CA+BQwqF,CAAe7wD,EAAQt6B,GACnBA,EAAW84B,KAAKh7B,OAAS,GA9BhB,SAACw8B,EAA2BxB,EAAyBxvB,GACxEwvB,EAAKyB,OAAM,SAACz7B,GAAU,OAAAA,GAAS,GAAKA,EAAQwK,GAAQ,WAC5B,MAAM,IAAI3I,MAAM,sEACjB,CAFD,IAGtB,IAAMyqF,EAAY,IAAIvoF,MAAMyG,GAAM6b,KAAK,GAEvC,OADA2T,EAAK9uB,SAAQ,SAAClL,EAAOgP,GAAU,OAAAs9E,EAAUtsF,GAASw7B,EAAOxsB,EAA1B,IACxBs9E,CACT,CAwBUC,CAAa/wD,EAAQt6B,EAAW84B,KAAMxvB,GAAMU,SAAQ,SAAClL,EAAOgP,GAAU,OAAAwsB,EAAOxsB,GAAShP,CAAhB,G,CAG1E,GAAIosF,EAAkB,GAAKz0E,EAAO3Y,OAASotF,IACzCz0E,EAAOy0E,GAAiB/e,mBAAmBniE,SAAQ,SAAClL,GAAU,OAAAiqF,EAAM7kF,KAAKzG,OAAOqB,GAAlB,IAC1DiqF,EAAMjrF,SAAWwL,GAASw/E,GAAgB,IAAMC,EAAMjrF,SAAWkC,EAAW84B,KAAKh7B,QACnF,MAAM,IAAI6C,MAAM,8FAIpB,GAAIX,EAAW84B,KAAKh7B,OAAS,EAAG,CAC9B,GAAIw8B,EAAOx8B,SAAWkC,EAAW84B,KAAKh7B,OACpC,MAAM,IAAI6C,MAAM,4FAElB,GAAIooF,EAAMjrF,SAAWkC,EAAW84B,KAAKh7B,OACnC,MAAM,IAAI6C,MACN,+F,CAGR,QAAsB,IAAX25B,QAA2C,IAAVyuD,GAAyBzuD,EAAOx8B,OAAS,GAAKirF,EAAMjrF,OAASwL,EACvG,MAAM,IAAI3I,MAAM,0DAEpB,EA4bFwhB,CAAejc,EAAQuQ,OAAQzW,EAAY8oF,EAAcxuD,EAAQyuD,EAAOC,GACxE9iF,EAAQ8mE,SACJ,IAAA6b,+BAA8B3iF,EAAQuQ,OAAO,GAAIzW,EAAY8oF,EAAcxuD,EAAQyuD,EAAOC,GAAM,CAACvyE,OAAQ,CAAC,IAChH,EAEa,EAAA48D,sBAAwB,SAACrzE,GACpC,IAAM4rC,EAAY5rC,EAAW4rC,UACvB9S,EAAO94B,EAAW84B,KAClB0B,EACFx6B,EAAWw6B,wBACTiwD,EAAczqF,EAAWyqF,YACzB7oD,EAAyD,IAAxC5hC,EAAW4hC,eAC5BL,EAAqBvhC,EAAWuhC,mBAChCkoD,EAA+CzpF,EAAWypF,sBAC1Dl9D,EAAavsB,EAAWusB,KAExBmV,EAAuD,KAA3B1hC,EAAW0hC,YAAqB,SAAW1hC,EAAW0hC,YACxF,OAAO,IAAAhiC,6BAA4B,CACjCksC,UAAS,EACT9S,KAAI,EACJ0B,wBAAuB,EACvBiwD,YAAW,EACX7oD,eAAc,EACdL,mBAAkB,EAClBkoD,sBAAqB,EACrBl9D,KAAI,EACJmV,YAAW,GAEf,C,oXC5jBA,cACA,SACA,UAEA,UAkKa,EAAA6xC,cAAgB,SAACrtE,EAAyBlG,IA5JhC,SAACyW,GACtB,IAAKA,GAAUA,EAAO3Y,OAAS,EAC7B,MAAM,IAAI6C,MAAM,yCAGlB,GAA2B,IAAvB8V,EAAO,GAAG0C,UAAsD,IAAvB1C,EAAO,GAAG0C,SACrD,MAAM,IAAIxY,MAAM,+BAElB,IAAM+Y,EAAoBjD,EAAO,GAC3B60E,EAAmB70E,EAAO,GAC1B80E,EAAoB90E,EAAO,GAEjC,GAAIiD,EAAMP,WAAamyE,EAAKnyE,UAAYO,EAAMP,WAAaoyE,EAAMpyE,SAC/D,MAAM,IAAIxY,MAAM,2CAGlB,GAA0B,IAAtB+Y,EAAMtC,KAAKtZ,QAAsC,IAAtB4b,EAAMtC,KAAKtZ,OACxC,MAAM,IAAI6C,MAAM,0BAGlB,GAAyB,IAArB2qF,EAAKl0E,KAAKtZ,QAAqC,IAArBwtF,EAAKl0E,KAAKtZ,OACtC,MAAM,IAAI6C,MAAM,yBAGlB,IAAM6qF,EAAa9xE,EAAMtC,KAAKsC,EAAMtC,KAAKtZ,OAAS,GAC5C2tF,EAAiB/xE,EAAMtC,KAAKsC,EAAMtC,KAAKtZ,OAAS,GACtD,GAAIwtF,EAAKl0E,KAAKk0E,EAAKl0E,KAAKtZ,OAAS,KAAO0tF,EACtC,MAAM,IAAI7qF,MAAM,gDAElB,GAAI2qF,EAAKl0E,KAAKk0E,EAAKl0E,KAAKtZ,OAAS,KAAO2tF,EACtC,MAAM,IAAI9qF,MAAM,oDAGlB,GAA0B,IAAtB4qF,EAAMn0E,KAAKtZ,OACb,MAAM,IAAI6C,MAAM,oBAElB,GAAI4qF,EAAMn0E,KAAKm0E,EAAMn0E,KAAKtZ,OAAS,KAAO0tF,EACxC,MAAM,IAAI7qF,MAAM,iDAElB,GAAI8V,EAAO3Y,OAAS,EAAG,CACrB,IAAM0xB,EAAmB/Y,EAAO,GAChC,GAAyB,IAArB+Y,EAAKpY,KAAKtZ,OACZ,MAAM,IAAI6C,MAAM,mBAElB,GAAI6uB,EAAKpY,KAAKoY,EAAKpY,KAAKtZ,OAAS,KAAO0tF,EACtC,MAAM,IAAI7qF,MAAM,+C,CAIpB,GAAI8V,EAAO3Y,OAAS,EAAG,CACrB,IAAM8yB,EAAmBna,EAAO,GAChC,GAAyB,IAArBma,EAAKxZ,KAAKtZ,OACZ,MAAM,IAAI6C,MAAM,mBAElB,GAAIiwB,EAAKxZ,KAAKwZ,EAAKxZ,KAAKtZ,OAAS,KAAO0tF,EACtC,MAAM,IAAI7qF,MAAM,+C,CAGtB,CAqGEwhB,CAAejc,EAAQuQ,QAGvB,IAAM0nB,EAAU,CAAC,GACbj4B,EAAQ2mE,YAAc,GACxB1uC,EAAQj6B,MAAuB,GAE7BgC,EAAQ2mE,YAAc,GACxB1uC,EAAQj6B,MAAuB,GAE7BgC,EAAQ2mE,YAAc,GACxB1uC,EAAQj6B,KAAK,GAEfgC,EAAQ8mE,QA9BN,SAACv2D,EAA+BzW,EAAqC6sE,EAAqB6e,GAEpF,IACMzmE,EAA4B,CAChCzlB,KAAM,yBACNkX,WAHiB,IAAI7T,MAAM4T,EAAO3Y,QAAQqnB,KAAK,EAAA0rD,YAAYC,SAI3Dh6D,UAAW9W,EAAWoiB,UAExB,OAAO,EAAP,KACK6C,GAAQ,CACXhkB,IAAK,WAAM,OA3FnB,SAACgkB,EAA2BxO,EAA+BzW,EAAqC6sE,EAC/F6e,GACC,IAAMrmE,EAAa5O,EAAO,GAAGW,KAEvBgN,EAAciB,EACdoyD,EAFY,EAAA9rE,UAAUjL,KAAK2kB,GAG3BmmE,EAAanmE,EAAWnY,OAAO,GAAG,GAClCk5E,EAAmBsF,EAAarmE,EAAWnY,MAAM,GAAI,GAAGwP,OAAO,GAAK,GACpEivE,EAAel1E,EAAO3Y,OAAS,EAC/B8tF,EAAen1E,EAAO3Y,OAAS,EAC/Bqb,GAAW,IAAAs8D,6BAA4Bh/D,EAAO,GAAG0C,UACjD0yE,EAAgBH,GAAc7e,EAAc,EAC5Cif,EAAqBJ,GAAc7e,EAAc,EACjDkf,EAA4Blf,EAAc,EAC5Cmf,EAAgB,EA+Cd7tD,EAAU,CAAC,CAAC/mB,KAAMgN,EAAajL,SAAU1C,EAAO,GAAG0C,SAAUy8D,YAAa,EAAA/E,YAAYC,UAW5F,OAVIjE,EAAc,GAChB1uC,EAAQj6B,KAAK,CAACkT,KAAMgvE,EAAkBjtE,SAAU1C,EAAO,GAAG0C,SAAUy8D,YAAa,EAAA/E,YAAYC,UAE3FjE,EAAc,GAChB1uC,EAAQj6B,KAAK,CAACkT,KAAMgvE,EAAkBjtE,SAAU1C,EAAO,GAAG0C,SAAUy8D,YAAa,EAAA/E,YAAYC,UAE3FjE,EAAc,GAChB1uC,EAAQj6B,KAAK,CAACkT,KAAMiO,EAAYlM,SAAU1C,EAAO,GAAG0C,SAAUy8D,YAAa,EAAA/E,YAAYC,UAGlF,EAAP,KACK7rD,GAAQ,CACX6wD,gBA3DsB,SAAC4B,GAA+B,gDAC9B8T,EAAU,yCACbxrF,EAAWsiB,QAAO,yCAEpB0pE,IAAe,0CAAkC7yE,EAAQ,wCACzD6yE,IAAe,6CAAqC7yE,EAAQ,wCAC5D6yE,IAAe,8CAAsC7yE,EAAQ,qBAChFwyE,EAAe,6BAAsBK,IAAe,6CAAqC7yE,EAAQ,MAAO,GAAE,mBAC1GyyE,EAAe,6BAAsBI,IAAe,6CAAqC7yE,EAAQ,MAAO,GAAE,sCACvF6yE,IAAe,qDAA6C7yE,EAAQ,qBAErF0yE,EACI,6BAAsBG,IAAe,yDAAiD7yE,EAAQ,MAC9F,GAAE,mBAEN2yE,EACI,6BAAsBE,IAAe,2DAAmD7yE,EAAQ,MAChG,GAAE,mBAEN4yE,EACI,6BAAsBC,IAAe,+DAAuD7yE,EAAQ,MACpG,GAAE,qBAERu+D,EAAagB,YAAW,qBACtBhB,EAAaiB,sCAAsClB,EAAa+T,GAAW,wPAMzDI,EAAe,UAAY,MAAK,8HAGhDG,EAA4B,wCAA0C,GAAE,+QAO1EF,EAAgB,iCAAmC,GAAE,qBACrDC,EAAqB,6CAA+C,GAAE,qJAEKH,EAAe,UAAY,MAAK,wBA3CvD,EA4DtDxtD,QAAO,EACPwrC,cAAe,WAAM,OAAEtjD,EAAGroB,KAAKE,KAAKu5E,EAAa+T,EAAa,IAAzC,GAEzB,CAamBS,CAA+BhnE,EAAUxO,EAAQzW,EAAY6sE,EAAa6e,EAA1E,GAEf,CAmBFQ,CAAqChmF,EAAQuQ,OAAQzW,EAAYkG,EAAQ2mE,aAf1D,GAeoF,CAAC1uC,QAAO,GACjH,EAEa,EAAAq1C,6BAA+B,SAACxzE,GAC3C,IAAMsiB,EAAUtiB,EAAWsiB,QAC3B,OAAO,IAAA5iB,6BAA4B,CAAC4iB,QAAO,GAC7C,C,62BC7LA,cACA,SACA,UAEA,UA0BM6pE,EAAY,SAAC11E,EAA+B+P,GAChD,IAAM9M,EAAkB,GACxB,GAAIjD,EAAO3Y,OAAS0oB,EAClB,GAA6B,IAAzB/P,EAAO+P,GAAKrN,SACd1C,EAAO+P,GAAK2lD,mBAAmBniE,SAAQ,SAAAiI,GAAK,OAAAyH,EAAMxV,KAAKzG,OAAOwU,GAAlB,QACvC,IAA6B,IAAzBwE,EAAO+P,GAAKrN,SAGrB,MAAM,IAAIxY,MAAM,gBAAS6lB,EAAG,wCAF5B/P,EAAO+P,GAAK4lD,gBAAgBpiE,SAAQ,SAAAiI,GAAK,OAAAyH,EAAMxV,KAAKzG,OAAOwU,GAAlB,G,CAK7C,OAAOyH,CACT,EAiBM0yE,EACF,SAACttF,EAAegP,EAAeuX,EAA+ByT,EAAyBuzD,GAEjF,IAAIC,EAAWxtF,EAIf,OAHIA,EAAQ,IACVwtF,GAAYjnE,EAAWyT,EAAKhrB,KAE1Bu+E,EAAMv+E,GAAS,EACV9P,KAAKu/B,IAAI,EAAGv/B,KAAKC,IAAIquF,EAAUjnE,EAAWyT,EAAKhrB,IAAU,IAEzD9P,KAAKu/B,IAAI,EAAGv/B,KAAKC,IAAIquF,EAAUjnE,EAAWyT,EAAKhrB,KAE1D,EAyGK,EAAAZ,MAAQ,SAAChH,EAAyBlG,IApKxB,SAACyW,EAA+BzW,GACrD,IAAKyW,GAAUA,EAAO3Y,OAAS,EAC7B,MAAM,IAAI6C,MAAM,kBAElB,GAA+B,IAA3BX,EAAW84B,KAAKh7B,QAClB,GAAIkC,EAAW84B,KAAKh7B,SAAWkC,EAAW+7B,OAAOj+B,QAAUkC,EAAW84B,KAAKh7B,SAAWkC,EAAWg8B,KAAKl+B,OACpG,MAAM,IAAI6C,MAAM,wDAEb,GAAIX,EAAW+7B,OAAOj+B,SAAWkC,EAAWg8B,KAAKl+B,OACtD,MAAM,IAAI6C,MAAM,6CAElB8V,EAAOvJ,MAAM,GAAGlD,SAAQ,SAACmzB,EAAG3W,GAC1B,GAAiC,IAA7B/P,EAAO+P,EAAM,GAAGrN,UAA4D,IAA7B1C,EAAO+P,EAAM,GAAGrN,SACjE,MAAM,IAAIxY,MAAM,gBAAS6lB,EAAG,uCAEhC,GACF,CAqJErE,CAAejc,EAAQuQ,OAAQzW,GAC/B,IAAMusF,EAZJ,SAAC91E,EAA+BzW,GAC9B,IAAMk7E,EA1HR,SAACzkE,EAA+BzW,GAC9B,GAAIyW,EAAO3Y,OAAS,EAAG,CACrB,IAAMi+B,EAAmBowD,EAAU11E,EAAQ,GACrCulB,EAAiBmwD,EAAU11E,EAAQ,GACrCqiB,EAAiBqzD,EAAU11E,EAAQ,GAIvC,OAHoB,IAAhBqiB,EAAKh7B,SACPg7B,EAAO,EAAH,KAAOj2B,MAAM4T,EAAO,GAAGW,KAAKtZ,QAAQ+U,SAAM,KAEzC,IAAAnT,6BAA4B,CAACq8B,OAAM,EAAEC,KAAI,EAAElD,KAAI,G,CAEtD,OAAO94B,CAEX,CA8G4BwsF,CAAgC/1E,EAAQzW,GAC5DilB,EAA4B,CAChCzlB,KAAM,QACNkX,WAAY,CAAC,EAAAm6D,YAAYC,SACzBh6D,UAAWokE,EAAkB94D,UAAY3L,EAAO3Y,OAAS,EAAI,SAAW2Y,EAAO,GAAGW,KAAKu5B,WAAa,KAEtG,OAAO,EAAP,KAAW1rB,GAAQ,CAAEhkB,IAAK,WAAM,OAjFlC,SAACgkB,EAA2BxO,EAA+BzW,GACzD,IAAMqlB,EAAa5O,EAAO,GAAGW,KACvB0tE,EAAY,EAAAn5E,UAAUjL,KAAK2kB,GAC3ByT,EAAQ94B,EAAW84B,KAAKh7B,OAAS,EAAK,EAAA6N,UAAUutB,cAAcl5B,EAAW84B,KAAMzT,EAAWvnB,QAAS,OACzD+E,MAAMwiB,EAAWvnB,QAAQ+U,SAAM,GAC3Ew5E,EAAQF,EAAU11E,EAAQ,GAC9B41E,EAAMriF,SAAQ,SAACq7D,GAAS,OAAS,IAATA,GAAc,WACZ,MAAM,IAAI1kE,MAAM,mBACjB,CAFD,IAGH,IAAjB0rF,EAAMvuF,SACRuuF,EAAQxpF,MAAMi2B,EAAKh7B,QAAQqnB,KAAK,IAElC,IAAM4W,EAAS/7B,EAAW+7B,OAAOx8B,KAAI,SAACw3B,EAAOj0B,GAAM,OAAAspF,EAAkBr1D,EAAOj0B,EAAGuiB,EAAYyT,EAAMuzD,EAA9C,IAE7CrwD,EAAOh8B,EAAWg8B,KAAKz8B,KAAI,SAACo8B,EAAK74B,GAAM,OAAAspF,EAAkBzwD,EAAK74B,EAAGuiB,EAAYyT,EAAMuzD,EAA5C,IAE7C,GAAIvzD,EAAKh7B,SAAWunB,EAAWvnB,OAC7B,IAAK,IAAIgF,EAAI,EAAGA,EAAIuiB,EAAWvnB,SAAUgF,EAClCg2B,EAAKwiD,SAASx4E,KACjBi5B,EAAOuO,OAAOxnC,EAAG,EAAG,GACpBk5B,EAAKsO,OAAOxnC,EAAG,EAAGuiB,EAAWviB,IAC7BupF,EAAM/hD,OAAOxnC,EAAG,EAAG,IAIzB,IAAM2pF,EAAQJ,EAAM9sF,KAAI,SAAA8lE,GAAQ,OAAArnE,KAAK0uF,KAAKrnB,EAAV,IAEhCgnB,EAAMriF,SAAQ,SAACq7D,EAAMviE,EAAG21B,GACtB,GAAI4sC,EAAO,EAAG,CACZ,IAAMsnB,GAAY3wD,EAAKl5B,GAAKi5B,EAAOj5B,IAAMuiE,EACnCunB,EAAS7wD,EAAOj5B,GAChB+pF,EAAWD,EAASD,EAAWN,EAAMvpF,GAC3Ci5B,EAAOj5B,GAAK+pF,EACZ7wD,EAAKl5B,GAAK8pF,EACVn0D,EAAM31B,IAAMuiE,C,CAEhB,IAEA,IAAMjhD,EAAciB,EAAWnY,MAAM,GACrC4rB,EAAK9uB,SAAQ,SAACob,EAAM+X,GAClB/Y,EAAYgB,GAAQpnB,KAAKE,MAAM89B,EAAK5W,GAAQ2W,EAAO3W,IAASinE,EAAMjnE,GACpE,IAEA,IAAM0nE,EACW,CAAC11E,KAAMgN,EAAajL,SAAU1C,EAAO,GAAG0C,SAAUy8D,YAAa,EAAA/E,YAAYC,SAEtF5oE,GAAS,IAAAkwE,gBAAe,SAAU3hE,EAAO,GAAG0C,SAAUiL,GACtD1K,GAAQ,IAAAu+D,eAAc,QAASxhE,EAAO,GAAG0C,SAAUkM,GACnDoyD,EAAa,EAAA9rE,UAAUjL,KAAK0jB,GAiBlC,OAAO,EAAP,KACKa,GAAQ,CACX6wD,gBAjBsB,SAAC4B,GAA+B,wBACtDA,EAAae,iBAAiB/+D,EAAOxR,GAAO,8CACjBukF,EAAM3uF,OAAM,aAAK2uF,EAAMltF,KAAI,SAAAuD,GAAK,gBAAGA,EAAC,IAAJ,IAASrD,KAAK,KAAI,iDACjDs8B,EAAOj+B,OAAM,aAAKi+B,EAAOx8B,KAAI,SAAAuD,GAAK,gBAAGA,EAAC,IAAJ,IAASrD,KAAK,KAAI,+CACtDu8B,EAAKl+B,OAAM,aAAKk+B,EAAKz8B,KAAI,SAAAuD,GAAK,gBAAGA,EAAC,IAAJ,IAASrD,KAAK,KAAI,gDAC/C4sF,EAAMvuF,OAAM,aAAKuuF,EAAM9sF,KAAI,SAAAuD,GAAK,gBAAGA,EAAC,IAAJ,IAASrD,KAAK,KAAI,qDAC7C4lB,EAAWvnB,OAAM,aAAKunB,EAAW9lB,KAAI,SAAAuD,GAAK,gBAAGA,EAAC,IAAJ,IAASrD,KAAK,KAAI,yBA1EhG,SAACia,EAAsBxR,EAAuBmd,EAA+BjB,GAC/D,wDAA2Clc,EAAOrH,KAAK+uD,QAAO,gBAAQl2C,EAAM7Y,KAAK+uD,QAAO,2CAC5El2C,EAAM7Y,KAAK+uD,QAAO,gEAEvBvqC,EAAWvnB,OAAM,2DACa,IAAvBsmB,EAAYtmB,OAAe,gBAAkB,mBAAkB,oUAO3D,IAAtBunB,EAAWvnB,OAAe,eAAiB,kBAAiB,uEAXxD,CA2ERivF,CAA0BrzE,EAAOxR,EAAQmd,EAAYjB,GAAY,qBACjEszD,EAAagB,YAAW,uBACtBhB,EAAaiB,sCAAsClB,GAAW,2CAC1CvvE,EAAOuM,gBAAgB,cAAa,4FAExDvM,EAAOswE,YAAY,aAAc9+D,EAAMkhE,aAAa,iBAAgB,YAblB,EAkBtDz8C,QAAS,CAAC2uD,GACVnjB,cAAe,WAAM,OAAEtjD,EAAGroB,KAAKE,KAAK4mF,EAAY,IAA3B,GAEzB,CAUkChpD,CAAuB7W,EAAUxO,EAAQykE,EAAzC,GAClC,CAIwB8R,CAA6B9mF,EAAQuQ,OAAQzW,GACjEwW,EAAU+1E,EAAkBtrF,MAClC,KAAI,EAAA0K,UAAUjL,KAAK8V,EAAQ2nB,QAAQ,GAAG/mB,MAAQ,GAI5C,MAAM,IAAIzW,MAAM,2BAHhBuF,EAAQ8mE,QAAQuf,EAAmB,CAAC91E,OAAQ,CAAC,IAKjD,EAEa,EAAAkK,qBAAuB,SAAC3gB,GACnC,IAAM+7B,EAAS/7B,EAAW+7B,OACpBC,EAAOh8B,EAAWg8B,KAClBlD,EAAO94B,EAAW84B,KACxB,OAAO,IAAAp5B,6BAA4B,CAACq8B,OAAM,EAAEC,KAAI,EAAElD,KAAI,GACxD,C,iYC9LA,cACA,SACA,UAEA,UAYa,EAAA2D,uBAAyB,CACpCj9B,KAAM,UACNkX,WAAY,CAAC,EAAAm6D,YAAYC,UA4Gd,EAAAlwD,QAAU,SAAC1a,EAAyBlG,IAxH1B,SAACyW,GACtB,IAAKA,GAA4B,IAAlBA,EAAO3Y,OACpB,MAAM,IAAI6C,MAAM,+BAEpB,CAqHEwhB,CAAejc,EAAQuQ,QACvBvQ,EAAQ8mE,QAAQ,EAAD,KACV,EAAAvwC,wBAAsB,CACzB3lB,UAAW9W,EAAWoiB,SACtBnhB,IAAK,WAAM,OA7GkB,SAACyY,EAAmB1Z,GACnD,IAAMmZ,GAAW,IAAAs8D,6BAA4B/7D,EAAMP,UAC7CzQ,EAAQgR,EAAMtC,KACdqgE,EAAa,EAAA9rE,UAAUjL,KAAKgI,GAE9B0c,EAAOplB,EAAWolB,KAItB,GAHIA,EAAO,IACTA,EAAO1c,EAAM5K,OAASsnB,GAEpBA,EAAO1c,EAAM5K,OAAS,EACxB,MAAM,IAAI6C,MAAM,4CAGlB,IAAMmL,EAAOpD,EAAM0c,GACbvZ,EAAO4rE,EAAa3rE,EAGpBmhF,EAA6B,QAAb9zE,EAAqB,uCAAyC,kCA8EpF,OAAO,EAAP,KACK,EAAAsjB,wBAAsB,CACzB0B,QAAS,CAAC,CAAC/mB,KAAM1O,EAAOyQ,SAAUO,EAAMP,SAAUy8D,YAAa,EAAA/E,YAAYC,UAC3EgF,gBAhFsB,SAACoX,GAAgC,sDACrB/zE,EAAQ,kDACRA,EAAQ,wDACFA,EAAQ,aAjBvC,GAiB8C,0EAEAA,EAAQ,mFACGA,EAAQ,2EAElBA,EAAQ,+JAKJA,EAAQ,uIA3B3D,GAgCsB,6OAhCtB,GAoCU,iEAEFrN,EAAI,6CACQA,EAAI,sDAG3BmhF,EAAa,u0BAwBE9zE,EAAQ,o5BApD0B,EAiFvDwwD,cAAe,WAAM,OAAEtjD,EAAGxa,EAAL,GAEzB,CAQeshF,CAAyBjnF,EAAQuQ,OAAO,GAAIzW,EAA5C,IAEf,EAEa,EAAA6gB,uBAAyB,SAAC7gB,GACnC,WAAAN,6BAA4B,CAAC0lB,KAAMplB,EAAWolB,MAA9C,C,62BC5IJ,cACA,SACA,UAEA,UA+Ga,EAAAvT,MAAQ,SAAC3L,EAAyBlG,IAvGxB,SAACyW,GACtB,IAAKA,GAAUA,EAAO3Y,OAAS,EAC7B,MAAM,IAAI6C,MAAM,iBAEpB,CAoGEwhB,CAAejc,EAAQuQ,QACvBvQ,EAAQ8mE,QATN,SAACv2D,EAA+BzW,GAC9B,IAAMk7E,EAAsC,IAAlBzkE,EAAO3Y,OAAekC,EA1FlD,SAACyW,EAA+BzW,GAC9B,IAAMotF,EAAuB,GACzBlvD,EAAqBl+B,EAAWk+B,WAKpC,OAJIznB,EAAO,GAAGW,KAAK,GAAK,IACtBX,EAAO,GAAG01D,mBAAmBniE,SAAQ,SAAAiI,GAAK,OAAAm7E,EAAWlpF,KAAKzG,OAAOwU,GAAvB,IAC1CisB,EAAakvD,EAAWtvF,SAEnB,IAAA4B,6BAA4B,CAACw+B,WAAU,EAAE9Y,KAAMplB,EAAWolB,KAAMgoE,WAAU,GACnF,CAkF+DC,CAAgC52E,EAAQzW,GAC/FilB,EACgB,CAACzlB,KAAM,QAASkX,WAAY,CAAC,EAAAm6D,YAAYC,SAAUh6D,UAAWokE,EAAkB94D,UACtG,OAAO,EAAP,KAAW6C,GAAQ,CAAEhkB,IAAK,WAAM,OApDlC,SAACgkB,EAA2BxO,EAA+BzW,GAazD,IAZA,IAAMqlB,EAAa5O,EAAO,GAAGW,KACvB0tE,EAAY,EAAAn5E,UAAUjL,KAAK2kB,GAC3BlM,EAAW1C,EAAO,GAAG0C,SACrB7P,EAAO+b,EAAWvnB,OAClBsnB,EAAOplB,EAAWolB,KAClB06D,EAAgB16D,EAAO,EAAKC,EAAWvnB,OAASsnB,EAAOA,EACvD+Y,EAAU,IAAIt7B,MAAqB7C,EAAWk+B,YAC9CxkB,GAAQ,IAAAu+D,eAAc,QAAS9+D,EAAUkM,GACzCqB,EAAmB,IAAI7jB,MAAc7C,EAAWk+B,YAChDovD,EAAkC,GAClCC,EAA2B,GAC7B5mE,EAAc,EACT7jB,EAAI,EAAGA,EAAI9C,EAAWk+B,WAAYp7B,IAAK,CAC9C6jB,GAAe3mB,EAAWotF,WAAWtqF,GACrC4jB,EAAiB5jB,GAAK6jB,EACtB,IAAMvC,EAAciB,EAAWnY,QAC/BkX,EAAYpkB,EAAWolB,MAAQplB,EAAWotF,WAAWtqF,GACrDyqF,EAAarpF,KAAKkgB,GAClB+Z,EAAQr7B,IAAK,IAAAs1E,gBAAe,gBAASt1E,GAAKqW,EAAUo0E,EAAazqF,IACjEwqF,EAAkBppF,KAAK,CAACkT,KAAMm2E,EAAazqF,GAAIqW,SAAU1C,EAAO,GAAG0C,SAAUy8D,YAAa,EAAA/E,YAAYC,S,CAExG,IAAMkP,EAAc12E,EAAO,EAAI,UAAY,kBAAWw2E,EAAY,KAiBlE,OAAO,EAAP,KACK76D,GAAQ,CACX6wD,gBAlBsB,SAAC4B,GAA+B,oBAC1DA,EAAae,iBAAgB,MAA7Bf,EAAY,GAAkBh+D,GAAK,EAAKykB,IAAO,uDACXzX,EAAiB5oB,OAAM,aAAK4oB,EAAiBnnB,KAAI,SAAAuD,GAAK,gBAAGA,EAAC,IAAJ,IAASrD,KAAK,KAAI,kBAxD9E4nB,EAyDLX,EAAiB5oB,OAzDwB,wFAEtCupB,EAAe,+GAKlCA,EAAe,UAkDyB,eAhDzB,SAAC8W,GAG3B,IAFA,IAAM9W,EAAkB8W,EAAQrgC,OAC1BypB,EAAsB,GACnBzkB,EAAI,EAAGA,EAAIukB,IAAmBvkB,EAAG,CACxC,IAAMm9E,EAAgB9hD,EAAQr7B,GAAGg4E,aAAa,UAAW,qBACjC,IAApBzzD,EACFE,EAAUrjB,KAAK+7E,GACA,IAANn9E,EACTykB,EAAUrjB,KAAK,8BAAuBpB,EAAC,gBAAQm9E,EAAa,OACnDn9E,IAAMukB,EAAkB,EACjCE,EAAUrjB,KAAK,iBAAU+7E,EAAa,OAEtC14D,EAAUrjB,KAAK,mCAA4BpB,EAAC,eAAOm9E,EAAa,M,CAGpE,MAAO,iEAC8C9hD,EAAQ,GAAGt9B,KAAK+uD,QAAO,yCACpEroC,EAAU9nB,KAAK,MAAK,YAE9B,CA8BI+tF,CAAoBrvD,GAAQ,iBAE5Bu5C,EAAagB,YAAW,iBACtBhB,EAAaiB,sCAAsCmM,GAAU,iCAE/CprE,EAAMjF,gBAAgB,cAAa,0DACTurE,EAAW,qDAE/CA,EAAW,iHAlEY,IAAC34D,CAsD4B,EAmBtD8W,QAASmvD,EACT3jB,cAAe,WAAM,OAAEtjD,EAAGroB,KAAKE,KAAK4mF,EAAY,IAA3B,GAEzB,CAOkC7mD,CAAuBhZ,EAAU,CAACxO,EAAO,IAAKykE,EAA9C,GAClC,CAIcuS,CAA6BvnF,EAAQuQ,OAAQzW,GAAa,CAACyW,OAAQ,CAAC,IACtF,EAEa,EAAAuK,qBAAuB,SAAChhB,GACnC,IAAMolB,EAAOplB,EAAWolB,KAClBgoE,EAAuBptF,EAAWotF,WAClClvD,EAAal+B,EAAWk+B,WAAuB,EAAIkvD,EAAWtvF,OAASkC,EAAWk+B,WACxF,GAAIA,IAAekvD,EAAWtvF,OAC5B,MAAM,IAAI6C,MAAM,iDAElB,OAAO,IAAAjB,6BAA4B,CAAC0lB,KAAI,EAAE8Y,WAAU,EAAEkvD,WAAU,GAClE,C,m4BC/HA,cACA,UAEA,UAEa,EAAAxuD,oBAAsB,CACjCp/B,KAAM,OACNkX,WAAY,CAAC,EAAAm6D,YAAYC,UAG3B,IAAM4c,EAAa,SAACC,GAChB,OAAA9qF,MAAMqiB,KAAKyoE,EAAkBxhB,mBAAoB1uE,OAAjD,EAsCS,EAAAohC,sBACT,SAACD,EAAsCnoB,GACrC,IAAM4O,EAAa5O,EAAO,GAAGW,KACvBw2E,EAA6BF,EAAWj3E,EAAO,IAC/C2N,EAdW,SAACiB,EAA+BuoE,GAGrD,IAFA,IAAMxpE,EAAwB,GAErBthB,EAAI,EAAGA,EAAIuiB,EAAWvnB,SAAUgF,EACvCshB,EAAYlgB,KAAKmhB,EAAWviB,GAAK8qF,EAAQ9qF,IAG3C,OAAOshB,CACT,CAM0B+a,CAAe9Z,EAAYuoE,GACzCnW,EAAa,EAAA9rE,UAAUjL,KAAK0jB,GAE5BjL,EAAW1C,EAAO,GAAG0C,SACrBO,GAAQ,IAAAu+D,eAAc,QAAS9+D,EAAUkM,GACzCnd,GAAS,IAAAkwE,gBAAe,SAAUj/D,EAAUiL,GAiBlD,OAAO,EAAP,KACKwa,GAAmB,CACtBT,QAAS,CAAC,CAAC/mB,KAAMgN,EAAajL,SAAU1C,EAAO,GAAG0C,SAAUy8D,YAAa,EAAA/E,YAAYC,UACrFgF,gBAlBsB,SAAC4B,GAA+B,2CACnCh+D,EAAMk2C,QAAO,MAAbl2C,EAAK,OAAY2L,IAAU,wBAC9CqyD,EAAae,iBAAiB/+D,EAAOxR,GAAO,mBAC5CwvE,EAAagB,YAAW,mBACxBhB,EAAaiB,sCAAsClB,GAAW,uCAC1CvvE,EAAOuM,gBAAgB,cAAa,sCACtCiF,EAAM7Y,KAAK+uD,QAAO,wCAChBvqC,EAAWvnB,OAAM,iDACfoK,EAAOqwE,WAAW,gBAAiB,KAAI,eAAO7+D,EAAM6+D,WAAW,aAAc,KAAI,wBAErG7+D,EAAMqlE,WAAW,eAAgB,IAAK,iBAAgB,4BAExD72E,EAAOswE,YAAY,aAAc9+D,EAAMkhE,aAAa,iBAAgB,UAZd,EAmBtDjR,cAAe,WAAM,OAAEtjD,EAAGroB,KAAKE,KAAKu5E,EAAa,IAA5B,GAEzB,EAES,EAAAj2D,KAAO,SAACtb,IArEE,SAACuQ,GACtB,IAAKA,GAA4B,IAAlBA,EAAO3Y,OACpB,MAAM,IAAI6C,MAAM,2BAGlB,GAA2B,IAAvB8V,EAAO,GAAG0C,UAAsD,IAAvB1C,EAAO,GAAG0C,UAC5B,KAAvB1C,EAAO,GAAG0C,SACZ,MAAM,IAAIxY,MAAM,yDAGlB,GAA2B,IAAvB8V,EAAO,GAAG0C,SACZ,MAAM,IAAIxY,MAAM,qDAGlB,GAA8B,IAA1B8V,EAAO,GAAGW,KAAKtZ,OACjB,MAAM,IAAI6C,MAAM,sCAKlB,GAFmC+sF,EAAWj3E,EAAO,IAEzC3Y,SAAW2Y,EAAO,GAAGW,KAAKtZ,OACpC,MAAM,IAAI6C,MAAM,wFAEpB,CA+CEwhB,CAAejc,EAAQuQ,QACvB,IACMK,EAD6B42E,EAAWxnF,EAAQuQ,OAAO,IACnCk6B,WAC1BzqC,EAAQ8mE,QAAQ,EAAD,KACP,EAAApuC,qBAAmB,CAAE9nB,UAAS,EAAE7V,IAAK,WAAM,WAAA49B,uBAAsB,EAAAD,oBAAqB14B,EAAQuQ,OAAnD,IAC/C,CAACA,OAAQ,CAAC,IAChB,C,66BC3FA,cACA,SACA,UAEA,UAMa,EAAAsoB,yBAA2B,CACtCv/B,KAAM,YACNkX,WAAY,CAAC,EAAAm6D,YAAYC,UAG3B,IAMM7xC,EAAkB,SAAC5Z,EAA+BsH,GACpD,OAACA,GAAQA,EAAK7uB,SAAWunB,EAAWvnB,OAAU,OAAKunB,EAAWxS,SAAO,GAAErE,UAAYme,CAAnF,EAgBS,EAAAqS,2BAA6B,SAACiqD,EAAyB4E,GAClE,IAAM10E,EAAW8vE,EAAY9vE,SACvBkM,EAAa4jE,EAAY7xE,KACzBuV,EAAOsS,EAAgB5Z,EAAYwoE,GACnCzpE,EAlBe,SAACiB,EAA+BsH,GACnD,SAAAhhB,UAAU0zB,gBAAgBha,EAAY4Z,EAAgB5Z,EAAYsH,GAAlE,CAiBkBwS,CAAe9Z,EAAYsH,GACzCrjB,EAAO+b,EAAWvnB,OAClB25E,EAAa,EAAA9rE,UAAUjL,KAAK0jB,GAK5Blc,GAAS,IAAAkwE,gBAAe,SAAUj/D,EAAUiL,GAC5C1K,GAAQ,IAAAu+D,eAAc,IAAK9+D,EAAUkM,GAe3C,OAAO,EAAP,KACK,EAAA0Z,0BAAwB,CAC3BZ,QAAS,CAAC,CAAC/mB,KAAMgN,EAAajL,SAAU8vE,EAAY9vE,SAAUy8D,YAAa,EAAA/E,YAAYC,UACvFgF,gBAhBsB,SAAC4B,GAA+B,oBACtDA,EAAae,iBAAiB/+D,EAAOxR,GAAO,iBA1BvB,SAACykB,EAAgBrjB,EAAcoQ,EAAsBxR,GAC5E,IAAMo3B,EAAc,GACpBA,EAAYp7B,KAAK,qBAAcgE,EAAOrH,KAAK+uD,QAAO,gBAAQl2C,EAAM7Y,KAAK+uD,QAAO,0BACjEl2C,EAAM7Y,KAAK+uD,QAAO,MAC7B,IAAK,IAAI9sD,EAAI,EAAGA,EAAIwG,IAAQxG,EAC1Bw8B,EAAYp7B,KAAKwV,EAAMqlE,WAAW,IAAKpyD,EAAK7pB,GAAI,YAAKA,EAAC,OAGxD,OADAw8B,EAAYp7B,KAAK,cACVo7B,EAAY7/B,KAAK,KAC1B,CAmBIquF,CAAiBnhE,EAAMrjB,EAAMoQ,EAAOxR,GAAO,iBAE3CwvE,EAAagB,YAAW,iBACtBhB,EAAaiB,sCAAsClB,GAAW,iCAEhDvvE,EAAOuM,gBAAgB,cAAa,uDAGlDvM,EAAOswE,YAAY,aAAc9+D,EAAMkhE,aAAa,aAAY,QAXZ,EAiBtDjR,cAAe,WAAM,OAAEtjD,EAAGroB,KAAKE,KAAKu5E,EAAa,IAA5B,GAEzB,EAEa,EAAAtoE,UAAY,SAACjJ,EAAyBlG,IA1D5B,SAACyW,GACtB,IAAKA,GAA4B,IAAlBA,EAAO3Y,OACpB,MAAM,IAAI6C,MAAM,8BAEpB,CAuDEwhB,CAAejc,EAAQuQ,QACvBvQ,EAAQ8mE,QAAQ,EAAD,KACV,EAAAjuC,0BAAwB,CAC3BjoB,UAAW9W,EAAWoiB,SACtBnhB,IAAK,WAAM,WAAA+9B,4BAA2B94B,EAAQuQ,OAAO,GAAIzW,EAAW2sB,KAAzD,IAEf,EAEa,EAAAlL,yBAA2B,SAACzhB,GACrC,WAAAN,6BAA4B,CAACitB,KAAM3sB,EAAW2sB,MAA9C,C,2mBClFJ,cACA,SACA,UAEA,UA6CMgU,EACF,SAACjnB,EAAmBla,EAAco8E,EAAmCC,EACpEz5D,EAAmB05D,QAAA,IAAAA,IAAAA,EAAyBpiE,EAAMP,UACjD,IAAM8L,EAA4B,CAACzlB,KAAI,EAAEkX,WAAY,CAAC,EAAAm6D,YAAYC,SAAUh6D,UAAWsL,GACvF,OAAO,EAAP,KACK6C,GAAQ,CACXhkB,IAAK,WAAM,OAhBf,SAACgkB,EAA2BvL,EAAmBoiE,EAAwBF,EACtEC,GAAmD,cAC/C52D,GAAQ,CACX6wD,gBAAiB,SAAA4B,GAAgB,OA/BnC,SAACA,EAA4BqW,EAAkBC,EAAuBlS,EACrEF,EAAmCC,GAClC,IAEIoS,EAFEtR,EAAU3+E,KAAKE,KAAK6vF,EAAW,GAInCE,EADsB,iBAAbrS,EACI,UAAGA,EAAQ,OAEXA,EAAS,KAGxB,IAAMliE,GAAQ,IAAAu+D,eAAc,YAAa+V,EAAe,CAACrR,GAAU,GAC7Dz0E,GAAS,IAAAkwE,gBAAe,aAAc0D,EAAgB,CAACa,GAAU,GAEvE,MAAO,cACTjF,EAAae,iBAAiB/+D,EAAOxR,GAAO,iBAE5C2zE,QAAAA,EAA4B,GAAE,iBAE9BnE,EAAagB,YAAW,iBACtBhB,EAAaiB,sCAAsCgE,GAAQ,2BAEnDjjE,EAAM2hE,YAAY,cAAa,kBACvCnzE,EAAOswE,YAAY,aAAcyV,GAAW,QAE9C,CAMmCC,CAC7BxW,EAAc,EAAA/rE,UAAUjL,KAAKgZ,EAAMtC,MAAOsC,EAAMP,SAAU2iE,EAAgBF,EAAUC,EADvD,EAEjC19C,QAAS,CAAC,CAAC/mB,KAAMsC,EAAMtC,KAAM+B,SAAU2iE,EAAgBlG,YAAa,EAAA/E,YAAYC,UAChFnH,cAAe,SAACnzB,GACZ,OAAEnwB,EAAGroB,KAAKE,KAAK,EAAAyN,UAAUjL,KAAK81C,EAAa,GAAGp/B,MAAQ,GAA0B,GAAhF,GAN8C,CAerCwpB,CAA6B3b,EAAUvL,EAAOoiE,EAAgBF,EAAUC,EAAxE,GAEf,EAES,EAAAjgE,IAAM,SAAC1V,GAClBA,EAAQ8mE,QAAQrsC,EAAmCz6B,EAAQuQ,OAAO,GAAI,MAAO,OAC/E,EAEa,EAAAoF,KAAO,SAAC3V,GACnBA,EAAQ8mE,QAAQrsC,EAAmCz6B,EAAQuQ,OAAO,GAAI,OAAQ,QAChF,EAEa,EAAA26D,MAAQ,SAAClrE,GACpBA,EAAQ8mE,QAAQrsC,EAAmCz6B,EAAQuQ,OAAO,GAAI,QAAS,SACjF,EAEa,EAAAuF,KAAO,SAAC9V,GACnBA,EAAQ8mE,QAAQrsC,EAAmCz6B,EAAQuQ,OAAO,GAAI,OAAQ,QAChF,EAEa,EAAA+6D,MAAQ,SAACtrE,GACpBA,EAAQ8mE,QAAQrsC,EAAmCz6B,EAAQuQ,OAAO,GAAI,QAAS,SACjF,EAEa,EAAAwF,KAAO,SAAC/V,GACnBA,EAAQ8mE,QAAQrsC,EAAmCz6B,EAAQuQ,OAAO,GAAI,OAAQ,QAChF,EACa,EAAAg7D,MAAQ,SAACvrE,GACpBA,EAAQ8mE,QAAQrsC,EAAmCz6B,EAAQuQ,OAAO,GAAI,QAAS,SACjF,EAOa,EAAA6F,oBAAsB,SAACtc,GAChC,WAAAN,6BAA4BM,EAA5B,EAGS,EAAAya,KAAO,SAACvU,EAAyBlG,GAC5C,IAAI8tB,EACJ,OAAQ9tB,EAAW4kB,IACjB,KAAK,GACHkJ,EAAO,YACP,MACF,KAAK,EACHA,EAAO,YACP,MACF,KAAK,GACHA,EAAO,YACP,MACF,KAAK,EACHA,EAAO,YACP,MACF,KAAK,EACHA,EAAO,aACP,MACF,QACE,MAAM,IAAI8uC,WAAW,iFAA0E58D,EAAW4kB,KAE9G1e,EAAQ8mE,QAAQrsC,EACZz6B,EAAQuQ,OAAO,GAAI,OAAQqX,OAAMpsB,EAAW1B,EAAWoiB,SAAUpiB,EAAW4kB,IAClF,EAOa,EAAAitD,QAAU,SAAC3rE,EAAyBlG,GAC/C,IAAMmZ,GAAW,IAAAs8D,6BAA4BvvE,EAAQuQ,OAAO,GAAG0C,UAC/DjT,EAAQ8mE,QACJrsC,EACIz6B,EAAQuQ,OAAO,GAAI,QAAQ,SAAAxF,GAAK,sBAASA,EAAC,0BAAV,GAAqC,sCACnDkI,EAAQ,oBAAYA,EAAQ,YAAInZ,EAAW/B,IAAG,0CAC9Ckb,EAAQ,oBAAYA,EAAQ,YAAInZ,EAAWu9B,IAAG,SAEhEv9B,EAAWoiB,UACf,CAAC3L,OAAQ,CAAC,IAChB,EAOa,EAAA8F,KAAO,SAACrW,GACnB,IAPwCuQ,EAClCxY,EACAs/B,EAKAv9B,GANA/B,GADkCwY,EAOYvQ,EAAQuQ,QANxC3Y,QAAU,EAAK2Y,EAAO,GAAGu1D,kBAAkB,GAAK,EAAA19C,SAC9DiP,EAAO9mB,EAAO3Y,QAAU,EAAK2Y,EAAO,GAAGu1D,kBAAkB,GAAK,EAAAz9C,UAC7D,IAAA7uB,6BAA4B,CAACzB,IAAG,EAAEs/B,IAAG,MAK5C,IAAAs0C,SAAQ3rE,EAASlG,EACnB,EAEa,EAAA9B,KAAO,SAACgI,GACnBA,EAAQ8mE,QAAQrsC,EAAmCz6B,EAAQuQ,OAAO,GAAI,OAAQ,QAChF,EAEa,EAAAuG,IAAM,SAAC9W,GAClBA,EAAQ8mE,QAAQrsC,EAAmCz6B,EAAQuQ,OAAO,GAAI,MAAO,OAC/E,EAEa,EAAAq7D,KAAO,SAAC5rE,GACnBA,EAAQ8mE,QAAQrsC,EAAmCz6B,EAAQuQ,OAAO,GAAI,OAAQ,QAChF,EAMa,EAAAw7D,qBAAuB,SAACjyE,GACjC,WAAAN,6BAA4BM,EAA5B,EAES,EAAAqd,IAAM,SAACnX,EAAyBlG,GAC3CkG,EAAQ8mE,QAAQrsC,EACZz6B,EAAQuQ,OAAO,GAAI,OAAO,SAAAxF,GAAK,yBAAYA,EAAC,IAAb,GAAkB,0CACvBjR,EAAWuvB,MAAK,mOAS1CvvB,EAAWoiB,UACjB,EAEa,EAAAq5D,QAAU,SAACtiE,EAAkBg1E,GAAoB,YAApB,IAAAA,IAAAA,EAAA,OAAoB,sBAClDA,EAAO,oCACPA,EAAO,sCACPA,EAAO,uCACPA,EAAO,sCACPA,EAAO,uCACPA,EAAO,6CAEFh1E,EAAQ,gBAAQA,EAAQ,sKARqB,EAcjD,EAAA+4D,IAAM,SAAChsE,GAClB,IAAMiT,GAAW,IAAAs8D,6BAA4BvvE,EAAQuQ,OAAO,GAAG0C,UAC/DjT,EAAQ8mE,QAAQrsC,EACZz6B,EAAQuQ,OAAO,GAAI,OAAO,SAAAxF,GAAK,yBAAYA,EAAC,IAAb,IAAkB,IAAAwqE,SAAQ,eAAQtiE,EAAQ,KAAKA,IACpF,EAEa,EAAAoE,IAAM,SAACrX,GAClBA,EAAQ8mE,QAAQrsC,EAAmCz6B,EAAQuQ,OAAO,GAAI,MAAO,OAC/E,EAEa,EAAAiH,MAAQ,SAACxX,GACpBA,EAAQ8mE,QAAQrsC,EAAmCz6B,EAAQuQ,OAAO,GAAI,QAAS,SACjF,EAEa,EAAA67D,KAAO,SAACpsE,GACnB,IAAMiT,GAAW,IAAAs8D,6BAA4BvvE,EAAQuQ,OAAO,GAAG0C,UAC/DjT,EAAQ8mE,QAAQrsC,EACZz6B,EAAQuQ,OAAO,GAAI,QAAQ,SAAAxF,GAAK,sBAASA,EAAC,8BAAsBA,EAAC,0BAAjC,IAChC,IAAAwqE,SAAQ,eAAQtiE,EAAQ,KAAKA,IACnC,EAEa,EAAAqF,UAAY,SAACtY,EAAyBlG,GACjDkG,EAAQ8mE,QAAQrsC,EACZz6B,EAAQuQ,OAAO,GAAI,aAAa,SAAAxF,GAAK,2CAA8BA,EAAC,aAAKA,EAAC,aAAKA,EAAC,sBAA3C,GACrC,6CAAsCjR,EAAWuvB,MAAK,MAAMvvB,EAAWoiB,UAC7E,EAEa,EAAAjD,IAAM,SAACjZ,GAClBA,EAAQ8mE,QAAQrsC,EAAmCz6B,EAAQuQ,OAAO,GAAI,OAAO,SAAAxF,GAAK,iBAAIA,EAAJ,IACpF,EAEa,EAAAiO,IAAM,SAAChZ,GAClBA,EAAQ8mE,QAAQrsC,EAAmCz6B,EAAQuQ,OAAO,GAAI,OAAO,SAAAxF,GAAK,iBAAIA,EAAJ,IACpF,EAEa,EAAA+hE,WAAa,SAAC9sE,GACzBA,EAAQ8mE,QAAQrsC,EAAmCz6B,EAAQuQ,OAAO,GAAI,cAAc,SAAAxF,GAAK,oBAAOA,EAAP,IAC3F,EAEa,EAAAkP,KAAO,SAACja,GACnBA,EAAQ8mE,QAAQrsC,EACZz6B,EAAQuQ,OAAO,GAAI,QAAQ,SAAAxF,GAAK,uCAA0BA,EAAC,aAAKA,EAAC,qBAAjC,IACtC,EAEa,EAAAuP,QAAU,SAACta,GACtBA,EAAQ8mE,QAAQrsC,EAAmCz6B,EAAQuQ,OAAO,GAAI,WAAW,SAAAxF,GAAK,mCAAsBA,EAAC,MAAvB,IACxF,EAEa,EAAAwP,IAAM,SAACva,GAClBA,EAAQ8mE,QAAQrsC,EAAmCz6B,EAAQuQ,OAAO,GAAI,MAAO,OAC/E,EAEa,EAAA68D,KAAO,SAACptE,GACnBA,EAAQ8mE,QAAQrsC,EAAmCz6B,EAAQuQ,OAAO,GAAI,OAAQ,QAChF,EAEa,EAAAwK,KAAO,SAAC/a,GACnBA,EAAQ8mE,QAAQrsC,EAAmCz6B,EAAQuQ,OAAO,GAAI,OAAQ,QAChF,EAEa,EAAA6K,IAAM,SAACpb,GAClBA,EAAQ8mE,QAAQrsC,EAAmCz6B,EAAQuQ,OAAO,GAAI,MAAO,OAC/E,EAEa,EAAA8K,KAAO,SAACrb,GACnBA,EAAQ8mE,QAAQrsC,EAAmCz6B,EAAQuQ,OAAO,GAAI,OAAQ,QAChF,EAEa,EAAAg9D,gBAAkB,SAACvtE,EAAyBlG,GAIvD,OAHAkG,EAAQ8mE,QAAQrsC,EACZz6B,EAAQuQ,OAAO,GAAI,mBAAmB,SAAAxF,GAAK,uCAA0BA,EAAC,aAAKA,EAAC,8BAAjC,GAC3C,+DAAwDjR,EAAWuvB,MAAK,MAAMvvB,EAAWoiB,WACtF,CACT,EAEa,EAAAvD,IAAM,SAAC3Y,GAClBA,EAAQ8mE,QAAQrsC,EAAmCz6B,EAAQuQ,OAAO,GAAI,MAAO,OAC/E,C,6UChRA,cACA,UAEA,UAmGa,EAAAi9D,MAAQ,SAACxtE,GANiB,IAACuQ,EAEhCwO,EAKN/e,EAAQ8mE,SAP8Bv2D,EAOSvQ,EAAQuQ,OALjDwO,EAA4B,CAACzlB,KAK4B,QALtBkX,WADtB,CAAC,EAAAm6D,YAAYC,QAAS,EAAAD,YAAYC,QAAS,EAAAD,YAAYC,UAEnE,EAAP,KAAW7rD,GAAQ,CAAEhkB,IAAK,WAAM,OAhCD,SAACgkB,EAA2BxO,GAC3D,IAAMwpD,EAAQxpD,EAAO,GAAGW,KAClB8oD,EAAQzpD,EAAO,GAAGW,KAClBg3E,EAAQ33E,EAAO,GAAGW,KAClB0kE,EAAiBrlE,EAAO,GAAG0C,SAE3B+K,IAAgB,EAAAvY,UAAUwY,SAAS87C,EAAOC,IAAU,EAAAv0D,UAAUwY,SAAS+7C,EAAOkuB,IAChFhqE,EAAc67C,EACdwX,EAAa,EAAA9rE,UAAUjL,KAAKu/D,GAGhC,GAAI/7C,EAAa,CACf,IAAMI,EAAkB,EAAApZ,cAAcqZ,UAAU,EAAArZ,cAAcqZ,UAAU07C,EAAOC,GAAO,GAASkuB,GAAO,GACtG,IAAK9pE,EACH,MAAM,IAAI3jB,MAAM,+CAElByjB,EAAcE,EACdmzD,EAAa,EAAA9rE,UAAUjL,KAAK0jB,E,CAG9B,OAAO,EAAP,KACKa,GAAQ,CACX6wD,gBAAiB,SAAC4B,GACd,OApFJ,SAACA,EAA4BjhE,EAA+B2lE,EAA+Bl4D,EAC1Fs4D,GACC,IAQIM,EARErF,EAAa,EAAA9rE,UAAUjL,KAAK07E,GAC5BO,EAAU3+E,KAAKE,KAAKu5E,EAAa,GAEjCvvE,GAAS,IAAAkwE,gBAAe,aAAcoE,EAAYJ,EAAY,GAC9DnrE,GAAI,IAAAgnE,eAAc,QAASxhE,EAAO,GAAG0C,SAAU1C,EAAO,GAAGW,KAAM,GAC/D/N,GAAI,IAAA4uE,eAAc,QAASxhE,EAAO,GAAG0C,SAAU1C,EAAO,GAAGW,KAAM,GAC/DjG,GAAI,IAAA8mE,eAAc,QAASxhE,EAAO,GAAG0C,SAAU1C,EAAO,GAAGW,KAAM,GAG/D62E,EAAa,SAACh9E,EAAW5H,EAAW8H,GAAc,uBAAU9H,EAAC,aAAK4H,EAAC,aAAKE,EAAC,IAAvB,EACxD,GAAK+S,EAIE,CACL,IAAM+4D,EAAmB,SAACvC,EAAgBr0D,EAAW62D,QAAA,IAAAA,IAAAA,EAAA,IACnD,IAAMC,EAAc,sBAAe92D,EAAC,uBAAeA,EAAC,KAC9C+2D,EAAc,sBAAe/2D,EAAC,uBAAeA,EAAC,KAE9CgoE,EAAc,2BAAoBhoE,EAAC,eAAO,aAA0B,GAAT,EAAIA,GAAO,MAC5E,MAAO,yCACcA,EAAC,cAAMne,EAAOuM,gBAAgB,4BAAqB4R,EAAC,MAAI,qCAC9DA,EAAC,cAAMpV,EAAEitE,2BAA2B,uBAAgB73D,GAAKne,GAAO,qCAChEme,EAAC,cAAMhd,EAAE60E,2BAA2B,uBAAgB73D,GAAKne,GAAO,qCAChEme,EAAC,cAAMlV,EAAE+sE,2BAA2B,uBAAgB73D,GAAKne,GAAO,oCACjEme,EAAC,qBAAaA,EAAC,yCACfA,EAAC,qBAAaA,EAAC,yCACfA,EAAC,qBAAaA,EAAC,6CACXA,EAAC,qBAAaA,EAAC,6CACfA,EAAC,qBAAaA,EAAC,+BAC7Bq0D,EAAM,YAAIr0D,EAAC,eAAO62D,EAAQ,YAAI+Q,EAAW9Q,EAAaC,EAAaiR,GAAY,iBAErF,EAEEvR,EADiB,IAAfN,EACW,8DAETS,EAAiB,OAAQ,EAAG,OAAM,yBAClCA,EAAiB,OAAQ,EAAG,OAAM,yBAClCA,EAAiB,OAAQ,EAAG,OAAM,yBAClCA,EAAiB,OAAQ,EAAG,OAAM,2GAGzB,wBACTA,EAAiB,yBAA0B,GAAE,yBAC7CA,EAAiB,yBAA0B,GAAE,yBAC7CA,EAAiB,yBAA0B,GAAE,yBAC7CA,EAAiB,yBAA0B,GAAE,e,MAnCnDH,EAAa50E,EAAOswE,YAChB,aACAyV,EAAWh9E,EAAEoqE,YAAY,cAAehyE,EAAEgyE,YAAY,cAAelqE,EAAEkqE,YAAY,gBAsCzF,MAAO,oBACH3D,EAAae,iBAAiBtnE,EAAGF,EAAG5H,EAAGnB,GAAO,qBAC9CwvE,EAAagB,YAAW,qBACxBhB,EAAaiB,sCAAsCgE,GAAQ,qBAC3DG,EAAU,YAEhB,CAyBIwR,CAA2B5W,EAAcjhE,EAAQ2N,EAAaF,EAAa43D,EAA3E,EACJ39C,QAAS,CAAC,CAAC/mB,KAAMgN,EAAajL,SAAU2iE,EAAgBlG,YAAa,EAAA/E,YAAYC,UACjFnH,cAAe,WAAM,OAAEtjD,EAAGroB,KAAKE,KAAKu5E,EAAa,GAA0B,GAAtD,GAEzB,CAKkC8W,CAAyBtpE,EAAUxO,EAAnC,KAKlC,C,27BC1GA,cAEA,UAGA,UAYA,aAIE,WAAoBhS,GAAA,KAAAA,QAAAA,EAClBtF,KAAKkjC,KAAO,IAAIniC,IAChBf,KAAKmjC,iBAAkB,CACzB,CAyIF,OAxIE,YAAAprB,YAAA,SAAYtW,GACV,OAAOzB,KAAKkjC,KAAKphC,IAAIL,EACvB,EACA,YAAA4W,YAAA,SAAY5W,EAAcoW,GACxB7X,KAAKkjC,KAAK/hC,IAAIM,EAAKoW,EACrB,EACA,YAAAU,IAAA,SAAI6qB,EAAyBisD,EAAyC/3E,EAAmB0nB,EACrFwrC,G,YADJ,OAEQnC,EAASroE,KAAKsF,QAAQ+iE,OACtBtB,EAAqB/mE,KAAKsF,QAAQ6jE,wBAClCmmB,EAAmBtvF,KAAKsF,QAAQ2hE,uBAAmE,YAA1CjnE,KAAKsF,QAAQtH,IAAIgrE,OAAOyF,cACnF6gB,GAIDvoB,EAA2BwoB,eAAevvF,KAAKsF,QAAQwjE,kBAAmB,GAG7E/B,EAAmByoB,YAAYpsD,EAAcqsD,iBAC7C,IAAM7L,EAAU,G,IAChB,IAAoB,QAAAtsE,GAAM,8BAAE,CAAvB,IAAMiD,EAAK,QACdqpE,EAAQ7+E,KAAK,CAAC2qF,QAAS9L,EAAQjlF,OAAQgxF,SAAU,CAACz2E,OAAQqB,EAAMrB,S,uGAElE,IAAqB,QAAA8lB,GAAO,8BAAE,CAAzB,IAAMj2B,EAAM,QACf66E,EAAQ7+E,KAAK,CAAC2qF,QAAS9L,EAAQjlF,OAAQgxF,SAAU,CAACz2E,OAAQnQ,EAAOmQ,S,mGAEnE,IAAM02E,EAAYvnB,EAAOwnB,gBACrB,CAAChgF,OAAQuzB,EAAcqsD,gBAAgBK,mBAAmB,GAAIlM,QAAO,EAAEryC,MAAOnO,EAAcz4B,YAAYtK,OAO5G,GANA0mE,EAAmBgpB,aAAa,EAAGH,GAEnC7oB,EAAmBipB,mBAAkB,MAArCjpB,EAAkB,OAAuByD,IAAa,IAEtDxqE,KAAKsF,QAAQ0hE,wBAETsoB,EAAkB,CAInBvoB,EAA2BwoB,eAAevvF,KAAKsF,QAAQwjE,kBAAmB,GACpC,MAAnC9oE,KAAKsF,QAAQ2qF,qBACfjwF,KAAKsF,QAAQ2qF,mBAETjwF,KAAKsF,QAAQgjE,eAAe3oB,OAAO,GAAImwB,eAAesB,SAAWtB,eAAeogB,gBAGtF,IAAM,EAAWlwF,KAAKsF,QAAQgjE,eAAe3oB,OAAO,GAAImwB,eAAeE,SAAWF,eAAeC,UAEjG/vE,KAAKsF,QAAQ+jE,iBACbrpE,KAAKsF,QAAQ2jE,oBAAoBknB,gBAC7BnwF,KAAKsF,QAAQwjE,kBAAmB,EAAG,EAAG9oE,KAAKsF,QAAQ2qF,mBAAmB/2E,OAAQ,GAClFlZ,KAAKsF,QAAQ2jE,oBAAoBgH,mBAC7BjwE,KAAKsF,QAAQ2qF,mBAAmB/2E,OAAQ,EAAG,EAASA,OAAQ,EAAG,IACnElZ,KAAKsF,QAAQmwC,QAEb,IAAM,EAAWz1C,KAAKsF,QAAQuhE,gBACxBupB,EAAapwF,KAAKsF,QAAQ2zD,QAAQn3D,IAAI,GACtC,EAAa,WAAIsuF,EAAW,GAAE,aAAKA,EAAW,IAEpD,EAASl3E,OAAOg3D,SAASC,WAAWC,MAAMjwB,MAAK,WAC7C,IAAMkwC,EAAa,IAAIC,eAAe,EAASp3E,OAAOm3D,kBAChDkgB,EAAeF,EAAW,GAC1BG,EAAaH,EAAW,GAE9B,EAASn3E,OAAOm4D,aAE8B,IAAnC,EAAK/rE,QAAQmrF,oBACtB,EAAKnrF,QAAQmrF,kBAAoBF,GAGnC,IAAM1xC,EAAYvgD,OAAOiyF,EAAe,EAAKjrF,QAAQmrF,mBAC/CvxC,EAAU5gD,OAAOkyF,EAAa,EAAKlrF,QAAQmrF,mBAEjD,IAAKnyF,OAAOoyF,cAAc7xC,KAAevgD,OAAOoyF,cAAcxxC,GAC5D,MAAM,IAAIue,WAAW,6BAGvB,EAAKn4D,QAAQgjE,eAAe8C,QAAQ,EAASH,IAC7C,IAAI0lB,EAAc,GAClBtB,EAAiBxkF,SAAQ,SAAClL,EAAOgE,GAC/BgtF,GAAe,gBAAShtF,EAAC,eAAOhE,EAAMsY,KAAI,gBAAO,IAAA24E,4BAA2BjxF,EAAMqa,UAAS,KAC7F,IACA,IAAIo0E,EAAe,GACnBhrD,EAAcz4B,YAAYq0B,QAAQn0B,SAAQ,SAAClL,EAAOgE,GAChDyqF,GAAgB,iBAAUzqF,EAAC,eAAOhE,EAAMsY,KAAI,gBAAO,IAAA24E,4BAA2BjxF,EAAMqa,UAAS,KAC/F,IAEAojC,QAAQ19B,IAAI,8BAAuB,EAAQ,YAAI,EAAU,aAAKixE,GAAW,OAAGvC,EAAY,2BACpFlvC,EAAUL,EAAS,OACzB,G,CAGE7+C,KAAKsF,QAAQ0hE,uBAAyB,IACxChnE,KAAKsF,QAAQmwC,OAEjB,EACA,YAAA9vC,QAAA,WAEA,EACA,YAAAyS,MAAA,SAAMzN,EAA0BkmF,GAC9B,IAAMxoB,EAASroE,KAAKsF,QAAQ+iE,OACtByoB,EAAuB,GACzBzoB,EAAOF,SAASl3D,IAAI,eACtB6/E,EAAW/rF,KAAK,eAElB,IAAMwzE,GAAe,IAAAkI,oBAAmBoQ,GAClCE,EAAWpmF,EAAYgsE,gBAAgB4B,GACvCyY,EAAO,UAAGF,EAAWxwF,KAAK,MAAK,aAAKi4E,EAAa0Y,0BAAyB,aAAKF,GAC/EG,EAAe7oB,EAAO8oB,mBAAmB,CAACH,KAAI,EAAEz/C,MAAO5mC,EAAYtK,OAMzE,OALA,IAAAoqE,WAAU,WAAW,WAAM,sCAAyBumB,EAAzB,IAKpB,CAACrmF,YAAW,EAAE8kF,gBAHGpnB,EAAO+oB,sBAC3B,CAACvjB,QAAS,CAAC5wE,OAAQi0F,EAAcG,WAAY,QAASxhF,OAAQ,OAAQ0hC,MAAO5mC,EAAYtK,OAG/F,EAEA,YAAAkqE,2BAAA,SAA2BC,GACzB,IAAMtjD,EAA6B,iBAAlBsjD,EAA6BA,EAAgBA,EAActjD,EACtE69C,EAA6B,iBAAlByF,EAA6B,EAAKA,EAAczF,GAAK,EAChE2R,EAA6B,iBAAlBlM,EAA6B,EAAKA,EAAckM,GAAK,EAChE4a,EAAoBtxF,KAAKsF,QAAQ+iE,OAAOV,OAAOC,iCACrD,GAAI1gD,GAAKoqE,GAAqBvsB,GAAKusB,GAAqB5a,GAAK4a,EAC3D,MAAO,CAACpqE,EAAG69C,EAAG2R,GAEhB,IAAMn1E,EAAO2lB,EAAI69C,EAAI2R,EACjB6a,EAAkB1yF,KAAKE,KAAKF,KAAKijB,KAAKvgB,IAC1C,GAAIgwF,EAAkBD,EAAmB,CAEvC,IADAC,EAAkB1yF,KAAKE,KAAKF,KAAK2yF,KAAKjwF,KAChB+vF,EACpB,MAAM,IAAI9vF,MAAM,+CAElB,MAAO,CAAC+vF,EAAiBA,EAAiBA,E,CAE1C,MAAO,CAACA,EAAiBA,EAAiB,EAE9C,EACF,EAhJA,GAAa,EAAAnrD,eAAAA,C,kCCbb,IAAYsrC,E,uEAAAA,EAAA,EAAAA,cAAA,EAAAA,YAAW,KACrB,uBACA,uBACA,wB,gxECPF,IAOI+f,EAQAC,EACAC,EAhBJ,UAGA,aACA,SAEMC,EAAU,WAAe,QAAE,EAAA5zF,IAAIC,KAAKG,OAA6B,oBAAb+uC,QAA3B,EAE3B0kD,GAAe,EACfC,GAAc,EACdC,GAAU,EAORC,EAAiF,GACjFC,EAAuF,GACvFC,EAA+E,GAC/EC,EAAyD,GACzDC,EAAsE,GACtEC,EAAuD,GAEvDC,EAAe,WACnB,GAAIT,IAAiBC,GAAeC,IAAYN,EAC9C,MAAM,IAAIjwF,MAAM,mBAEpB,EAEM+wF,EAAuB,SAAC5pB,GAC5B,OAAQA,EAAG1uD,KAAKvY,MACd,IAAK,YACHmwF,GAAe,EACXlpB,EAAG1uD,KAAK2pB,KACVmuD,GAAU,EACVL,EAAkB,GAAG/oB,EAAG1uD,KAAK2pB,OAE7BkuD,GAAc,EACdJ,EAAkB,MAEpB,MACF,IAAK,WACC/oB,EAAG1uD,KAAK2pB,IACV+tD,EAAiB,GAAGhpB,EAAG1uD,KAAK2pB,KAE5B+tD,EAAiB,KAEnB,MACF,IAAK,kBACChpB,EAAG1uD,KAAK2pB,IACVouD,EAA+B/qE,QAAS,GAAG0hD,EAAG1uD,KAAK2pB,KAEnDouD,EAA+B/qE,QAAS,GAAG0hD,EAAG1uD,KAAKu4E,KAErD,MACF,IAAK,kBACC7pB,EAAG1uD,KAAK2pB,IACVquD,EAA+BhrE,QAAS,GAAG0hD,EAAG1uD,KAAK2pB,KAEnDquD,EAA+BhrE,QAAS,GAAG0hD,EAAG1uD,KAAKu4E,KAErD,MACF,IAAK,SACC7pB,EAAG1uD,KAAK2pB,IACVsuD,EAAuBjrE,QAAS,GAAG0hD,EAAG1uD,KAAK2pB,KAE3CsuD,EAAuBjrE,QAAS,GAAG0hD,EAAG1uD,KAAKu4E,KAE7C,MACF,IAAK,UACC7pB,EAAG1uD,KAAK2pB,IACVuuD,EAAwBlrE,QAAS,GAAG0hD,EAAG1uD,KAAK2pB,KAE5CuuD,EAAwBlrE,QAAS,KAEnC,MACF,IAAK,MACC0hD,EAAG1uD,KAAK2pB,IACVwuD,EAAanrE,QAAS,GAAG0hD,EAAG1uD,KAAK2pB,KAEjCwuD,EAAanrE,QAAS,GAAG0hD,EAAG1uD,KAAKu4E,KAEnC,MACF,IAAK,gBACC7pB,EAAG1uD,KAAK2pB,IACVyuD,EAAsBprE,QAAS,GAAG0hD,EAAG1uD,KAAK2pB,KAE1CyuD,EAAsBprE,QAAS,KAKvC,EAEMwrE,EAAgC,oBAAbtlD,SAAyE,QAA7C,EAAQ,OAARA,eAAQ,IAARA,cAAQ,EAARA,SAAUulD,qBAAmC,eAAE7qD,SAAMtlC,EAE7F,EAAAvD,8BAAgC,qD,2BAC3C,GAAsC4yF,IAAW,CAC/C,GAAIE,EACF,UAEF,GAAID,EACF,MAAM,IAAIrwF,MAAM,4CAElB,GAAIuwF,EACF,MAAM,IAAIvwF,MAAM,yCAYlB,OATAqwF,GAAe,OAGYtvF,IAAvB,EAAAvE,IAAIC,KAAK00F,WACPF,GAA4C,IAA/BA,EAAU7lF,QAAQ,WACjC,EAAA5O,IAAIC,KAAK00F,UAAYF,EAAUG,OAAO,GAAI,EAAYC,YAAY,KAAO,IAItE,CAAP,EAAO,IAAI1zF,SAAc,SAACC,EAAS0sC,GACjC2lD,SAAAA,EAAaqB,aAEbrB,EAAc,aACFsB,UAAYR,EACxBb,EAAoB,CAACtyF,EAAS0sC,GAC9B,IAAM+8B,EAA0B,CAACnnE,KAAM,YAAasxF,GAAK,EAAAh1F,IAAIC,MAC7DwzF,EAAYwB,YAAYpqB,EAC1B,I,CAGA,MAAO,CAAP,GAAO,IAAAqqB,uBAAsB,EAAAl1F,IAAIC,M,QAIxB,EAAAk1F,kBAAoB,SAAMn1F,GAAQ,0C,yDACP4zF,KACpCU,IACO,CAAP,EAAO,IAAInzF,SAAc,SAACC,EAAS0sC,GACjC6lD,EAAmB,CAACvyF,EAAS0sC,GAC7B,IAAM+8B,EAA0B,CAACnnE,KAAM,WAAYsxF,GAAKh1F,GACxDyzF,EAAawB,YAAYpqB,EAC3B,MANE,M,OAQF,SAAMuqB,EAAKC,YAAYr1F,I,OAAvB,S,mCAIS,EAAAs1F,sBAAwB,SAAMxxC,GAAiB,0C,2BAC1D,OAAsC8vC,KACpCU,IACO,CAAP,EAAO,IAAInzF,SAA+B,SAACC,EAAS0sC,GAClDkmD,EAA+BjtF,KAAK,CAAC3F,EAAS0sC,IAC9C,IAAM+8B,EAA0B,CAACnnE,KAAM,kBAAmBsxF,GAAK,CAAClxC,MAAK,IACrE2vC,EAAawB,YAAYpqB,EAAS,CAAC/mB,EAAM5oC,QAC3C,MAEO,CAAP,EAAOk6E,EAAKE,sBAAsBxxC,G,QAIzB,EAAAyxC,sBAAwB,SAAMC,EAAkCh2F,GAAyC,0C,2BAEhH,OAAsCo0F,KACpCU,IACO,CAAP,EAAO,IAAInzF,SAAqC,SAACC,EAAS0sC,GACxDmmD,EAA+BltF,KAAK,CAAC3F,EAAS0sC,IAC9C,IAAM+8B,EAA0B,CAACnnE,KAAM,kBAAmBsxF,GAAK,CAACQ,UAAS,EAAEh2F,QAAO,IAClFi0F,EAAawB,YAAYpqB,EAC3B,MAEO,CAAP,EAAOuqB,EAAKG,sBAAsBC,EAAWh2F,G,QAIxC,EAAAi2F,cACT,SAAM3xC,EAAmBtkD,GAAyC,0C,2BACpE,GAAsCo0F,IAAW,CAE/C,GAAIp0F,aAAO,EAAPA,EAASk2F,wBACX,MAAM,IAAIlyF,MAAM,wEAGlB,OADA8wF,IACO,CAAP,EAAO,IAAInzF,SAAqC,SAACC,EAAS0sC,GACxDomD,EAAuBntF,KAAK,CAAC3F,EAAS0sC,IACtC,IAAM+8B,EAA0B,CAACnnE,KAAM,SAAUsxF,GAAK,CAAClxC,MAAK,EAAEtkD,QAAO,IACrEi0F,EAAawB,YAAYpqB,EAAS,CAAC/mB,EAAM5oC,QAC3C,I,CAEA,MAAO,CAAP,EAAOk6E,EAAKK,cAAc3xC,EAAOtkD,G,QAIxB,EAAAm2F,eAAiB,SAAM1nB,GAAiB,0C,2BACnD,OAAsC2lB,KACpCU,IACO,CAAP,EAAO,IAAInzF,SAAc,SAACC,EAAS0sC,GACjCqmD,EAAwBptF,KAAK,CAAC3F,EAAS0sC,IACvC,IAAM+8B,EAA0B,CAACnnE,KAAM,UAAWsxF,GAAK/mB,GACvDwlB,EAAawB,YAAYpqB,EAC3B,OAEAuqB,EAAKO,eAAe1nB,G,YAIX,EAAA1zD,IAAM,SACf0zD,EAAmB+X,EAAwB1sE,EAA0B4qD,EACrEljC,EAAqCxhC,GAAoC,0C,2BAC3E,GAAsCo0F,IAAW,CAE/C,GAAIt6E,EAAO6lB,MAAK,SAAA74B,GAAK,MAAS,QAATA,EAAE,EAAF,IACnB,MAAM,IAAI9C,MAAM,mDAGlB,GAAIw9B,EAAQ7B,MAAK,SAAA74B,GAAK,OAAAA,CAAA,IACpB,MAAM,IAAI9C,MAAM,2DAGlB,OADA8wF,IACO,CAAP,EAAO,IAAInzF,SAAsC,SAACC,EAAS0sC,GACzDsmD,EAAartF,KAAK,CAAC3F,EAAS0sC,IAC5B,IAAM8nD,EAAqBt8E,EACrBuxD,EACF,CAACnnE,KAAM,MAAOsxF,GAAK,CAAC/mB,UAAS,EAAE+X,aAAY,EAAE1sE,OAAQs8E,EAAoB1xB,cAAa,EAAE1kE,QAAO,IACnGi0F,EAAawB,YAAYpqB,EAASuqB,EAAKS,2BAA2BD,GACpE,I,CAEA,MAAO,CAAP,EAAOR,EAAK76E,IAAI0zD,EAAW+X,EAAc1sE,EAAQ4qD,EAAeljC,EAASxhC,G,QAIhE,EAAA09D,aAAe,SAAM+Q,GAAiB,0C,2BACjD,OAAsC2lB,KACpCU,IACO,CAAP,EAAO,IAAInzF,SAAc,SAACC,EAAS0sC,GACjCumD,EAAsBttF,KAAK,CAAC3F,EAAS0sC,IACrC,IAAM+8B,EAA0B,CAACnnE,KAAM,gBAAiBsxF,GAAK/mB,GAC7DwlB,EAAawB,YAAYpqB,EAC3B,OAEAuqB,EAAKl4B,aAAa+Q,G,uHC5OtB,aACA,UAEa,EAAA6nB,cAAgB,SAACt2F,GAC5B,IAAMS,GAAO,IAAA81F,eACTC,EAAmB,EACjBC,EAAmB,GAEnBC,EAA0C12F,GAAW,CAAC,EAE5D,IACE,QAAkC+E,KAA9B/E,aAAO,EAAPA,EAAS22F,kBACXD,EAAWC,iBAAmB,OACzB,GACiC,iBAA7B32F,EAAQ22F,mBAAkC71F,OAAOC,UAAUf,EAAQ22F,mBAC1E32F,EAAQ22F,iBAAmB,GAAK32F,EAAQ22F,iBAAmB,EAC7D,MAAM,IAAI3yF,MAAM,4CAAqChE,EAAQ22F,mBAG/D,QAAmC5xF,KAA/B/E,aAAO,EAAPA,EAAS42F,mBACXF,EAAWE,kBAAoB,OAC1B,GAAyC,iBAA9B52F,EAAQ42F,oBAAmC91F,OAAOC,UAAUf,EAAQ42F,mBACpF,MAAM,IAAI5yF,MAAM,4CAAqChE,EAAQ42F,yBAGpC7xF,KAAvB/E,aAAO,EAAPA,EAASs1F,aACXoB,EAAWpB,WAAY,GAGzB,IAAIuB,EAAgB,EAsBpB,YArBqB9xF,KAAjB/E,aAAO,EAAPA,EAAS82F,OACXD,GAAgB,IAAAE,iBAAgB/2F,EAAQ82F,IAAKL,IAKtB,KAFzBD,EAAmB/1F,EAAKu2F,qBACpBN,EAAWC,iBAAmBD,EAAWE,oBAAsBF,EAAWpB,UAAYuB,MAExF,IAAAI,gBAAe,kCAGMlyF,KAAnB/E,aAAO,EAAPA,EAASk3F,SACX,IAAAC,qBAAoBn3F,EAAQk3F,MAAO,GAAI,IAAIE,SAAoC,SAACnzF,EAAK9B,GACnF,IAAMk1F,GAAgB,IAAAN,iBAAgB9yF,EAAKwyF,GACrCa,GAAkB,IAAAP,iBAAgB50F,EAAOs0F,GAEsC,IAAjFh2F,EAAK82F,sBAAsBf,EAAkBa,EAAeC,KAC9D,IAAAL,gBAAe,wCAAiChzF,EAAG,cAAM9B,EAAK,KAElE,IAGK,CAACq0F,EAAkBC,E,CAC1B,MAAOptF,GAKP,MAJyB,IAArBmtF,GACF/1F,EAAK+2F,sBAAsBhB,GAE7BC,EAAOppF,SAAQ,SAAAmgE,GAAS,OAAA/sE,EAAKg3F,MAAMjqB,EAAX,IAClBnkE,C,CAEV,C,o0DC7DA,IAQIquF,EACAC,EATJ,UACA,UACA,UAGA,UACA,UAKMC,EAAuB,SAAC58E,EAAgB68E,GAC5C,OAAQ78E,EAAOytB,UACb,IAAK,MACH,MAAO,CAACztB,EAAO9W,KAAM8W,EAAOP,KAAMO,EAAOyB,KAAM,OACjD,IAAK,aACH,MAAO,CAACzB,EAAO9W,KAAM8W,EAAOP,KAAM,CAACy0D,UAAWl0D,EAAOk0D,WAAY,cACnE,QACE,MAAM,IAAIlrE,MAAM,iCAA0BgX,EAAOytB,SAAQ,gBAAQovD,MAEvE,EAEMC,EAAuB,SAAC98E,GAC5B,OAAQA,EAAO,IACb,IAAK,MACH,OAAO,IAAI,EAAA3U,OAAO2U,EAAO,GAAIA,EAAO,GAAIA,EAAO,IACjD,IAAK,aACH,IAAMwB,EAAWxB,EAAO,GACxB,KAAK,IAAA+8E,0BAAyBv7E,GAC5B,MAAM,IAAIxY,MAAM,mCAA4BwY,EAAQ,kCAEhD,MAAiCxB,EAAO,GAAvCk0D,EAAS,YAAE5B,EAAQ,WAAEnlE,EAAO,UACnC,OAAO,EAAA9B,OAAO2xF,cAAc9oB,EAAW,CAAC1yD,SAAQ,EAAE/B,KAAMO,EAAO,GAAIsyD,SAAQ,EAAEnlE,QAAO,IAEtF,QACE,MAAM,IAAInE,MAAM,iCAA0BgX,EAAO,KAEvD,EAEA,0BAiGA,QA3FQ,YAAA86E,sBAAN,SAA4BmC,G,kGAGT,SAAM95B,MAAM85B,I,OAC7B,GAAwB,OADlBC,EAAW,UACJ//C,OACX,MAAM,IAAIn0C,MAAM,gCAAyBi0F,IAEvB,SAAMC,EAAS95B,e,OACnC,OADMA,EAAc,SACb,CAAP,GAAO,IAAA03B,uBAAsB,IAAIrhF,WAAW2pD,K,QAGxC,YAAAj+D,UAAN,SAAgBJ,EAAiCC,G,+GAC1C03F,EAAD,OACGC,IACHA,GAA+B,IAAAhC,mBAAkB,EAAAn1F,MAEnD,GAAMm3F,I,OAAN,SACAA,OAA+B5yF,EAC/B2yF,GAAqB,E,uBAGK,iBAAjB33F,EAAP,MACqB,oBAAZi+D,SAA2BA,QAAQ97D,UAAY87D,QAAQ97D,SAAS6Q,KAE3D,IAAM,IAAAkrD,WAAU,EAAAC,SAAV,CAAoBn+D,IAFtC,M,OAGoD,OADhDukD,EAAQ,SACwC,IAAM,IAAA2xC,eAAc3xC,EAAOtkD,I,cAAjF,kBAAsD,SAAmC,IAAxFwC,KAAKisE,UAAS,KAAEjsE,KAAK4K,WAAU,KAAE5K,KAAK06D,YAAW,K,aAIT,SAAM16D,KAAKszF,sBAAsB/1F,I,OAEpB,OAFhDo4F,EAAmC,SAEa,IAAM,IAAApC,uBAAsBoC,EAAWn4F,I,OAA7F,kBAAsD,SAA+C,IAApGwC,KAAKisE,UAAS,KAAEjsE,KAAK4K,WAAU,KAAE5K,KAAK06D,YAAW,K,qCAGE,UAAM,IAAA+4B,eAAcl2F,EAAcC,I,QAAxF,kBAAsD,SAA0C,IAA/FwC,KAAKisE,UAAS,KAAEjsE,KAAK4K,WAAU,KAAE5K,KAAK06D,YAAW,K,qCAIhD,YAAA/0D,QAAN,W,mEACE,MAAO,CAAP,GAAO,IAAAguF,gBAAe3zF,KAAKisE,W,QAGvB,YAAA1zD,IAAN,SAAUoiD,EAAiCi7B,EAAqCp4F,G,6HAiC9D,OA/BVq4F,EAAuB,GACvB7R,EAAyB,GAC/BxkF,OAAOokF,QAAQjpB,GAAO9vD,SAAQ,SAAAirF,GAC5B,IAAMz1F,EAAOy1F,EAAI,GACXt9E,EAASs9E,EAAI,GACbnnF,EAAQ,EAAK/D,WAAWgC,QAAQvM,GACtC,IAAe,IAAXsO,EACF,MAAM,IAAInN,MAAM,yBAAkBnB,EAAI,MAExCw1F,EAAW9wF,KAAKyT,GAChBwrE,EAAaj/E,KAAK4J,EACpB,IAEMonF,EAAkC,GAClC7zB,EAA0B,GAChC1iE,OAAOokF,QAAQgS,GAAS/qF,SAAQ,SAAAirF,GAC9B,IAAMz1F,EAAOy1F,EAAI,GACXt9E,EAASs9E,EAAI,GACbnnF,EAAQ,EAAK+rD,YAAY9tD,QAAQvM,GACvC,IAAe,IAAXsO,EACF,MAAM,IAAInN,MAAM,0BAAmBnB,EAAI,MAEzC01F,EAAYhxF,KAAKyT,GACjB0pD,EAAcn9D,KAAK4J,EACrB,IAEM2I,EACFu+E,EAAWz1F,KAAI,SAACkE,EAAGX,GAAM,OAAAyxF,EAAqB9wF,GAAG,WAAM,uBAAU,EAAKsG,WAAWo5E,EAAargF,IAAG,IAA1C,GAA9B,IACvBq7B,EAAU+2D,EAAY31F,KACxB,SAACkE,EAAGX,GAAM,OAAAW,EAAI8wF,EAAqB9wF,GAAG,WAAM,wBAAW,EAAKo2D,YAAYwH,EAAcv+D,IAAG,IAA7C,IAAoD,IAAtF,IAEE,IAAM,IAAA4U,KAAIvY,KAAKisE,UAAW+X,EAAc1sE,EAAQ4qD,EAAeljC,EAASxhC,I,OAGxF,IAHMw4F,EAAU,SAEVC,EAAuC,CAAC,EACrCtyF,EAAI,EAAGA,EAAIqyF,EAAQr3F,OAAQgF,IAClCsyF,EAAUj2F,KAAK06D,YAAYwH,EAAcv+D,KAAqB,QAAd,EAAAoyF,EAAYpyF,UAAE,QAAI2xF,EAAqBU,EAAQryF,IAEjG,MAAO,CAAP,EAAOsyF,G,QAGT,YAAAh7B,eAAA,WAEA,EAEA,YAAAC,aAAA,YACO,IAAAA,cAAal7D,KAAKisE,UACzB,EACF,EAjGA,GAAa,EAAA/sE,qCAAAA,C,kuBCrCb,aACA,UAkHa,EAAAg3F,kBAAoB,SAAC14F,G,gBAC1BS,GAAO,IAAA81F,eACToC,EAAuB,EACrBlC,EAAmB,GAEnBmC,EAAkD54F,GAAW,CAAC,GA3FzC,SAACA,GACvBA,EAAQk3F,QACXl3F,EAAQk3F,MAAQ,CAAC,GAEdl3F,EAAQk3F,MAAMj3F,UACjBD,EAAQk3F,MAAMj3F,QAAU,CAAC,GAE3B,IAAMA,EAAUD,EAAQk3F,MAAMj3F,QACzBA,EAAQ44F,+BAEX54F,EAAQ44F,6BAA+B,KAIrC74F,EAAQ84F,oBACR94F,EAAQ84F,mBAAmBn5D,MAAK,SAAAo5D,GAAM,MAA4C,YAA7B,iBAAPA,EAAkBA,EAAKA,EAAGl2F,KAAlC,MACxC7C,EAAQg5F,kBAAmB,EAE/B,CA0EEC,CAAqBL,GAErB,IACE,IAAMM,EAzHuB,SAACA,GAChC,OAAQA,GACN,IAAK,WACH,OAAO,EACT,IAAK,QACH,OAAO,EACT,IAAK,WACH,OAAO,EACT,IAAK,MACH,OAAO,GACT,QACE,MAAM,IAAIl1F,MAAM,gDAAyCk1F,IAE/D,CA4GmCC,CAA8D,QAArC,EAAAP,EAAeM,8BAAsB,QAAI,OAC3FE,EA3Ge,SAACA,GACxB,OAAQA,GACN,IAAK,aACH,OAAO,EACT,IAAK,WACH,OAAO,EACT,QACE,MAAM,IAAIp1F,MAAM,sCAA+Bo1F,IAErD,CAkG0BC,CAA6C,QAA5B,EAAAT,EAAeQ,qBAAa,QAAI,cACjEE,EAC8B,iBAAzBV,EAAeW,OAAqB,IAAAxC,iBAAgB6B,EAAeW,MAAO9C,GAAU,EAEzFE,EAAkD,QAA/B,EAAAiC,EAAejC,wBAAgB,QAAI,EAC5D,IAAK71F,OAAOC,UAAU41F,IAAqBA,EAAmB,GAAKA,EAAmB,EACpF,MAAM,IAAI3yF,MAAM,4CAAqC2yF,IAGvD,IAAMC,EAAoD,QAAhC,EAAAgC,EAAehC,yBAAiB,QAAI,EAC9D,IAAK91F,OAAOC,UAAU61F,IAAsBA,EAAoB,GAAKA,EAAoB,EACvF,MAAM,IAAI5yF,MAAM,4CAAqC4yF,IAGvD,IAAM4C,EAAgF,iBAA1CZ,EAAea,wBACvD,IAAA1C,iBAAgB6B,EAAea,uBAAwBhD,GACvD,EAcJ,GAR6B,KAJ7BkC,EAAuBl4F,EAAKi5F,yBACxBR,IAA0BN,EAAee,oBAAqBf,EAAeI,iBAAkBI,IAC7FR,EAAegB,gBAAiB,EAAGN,EAAiB3C,EAAkBC,EACxE4C,MAEF,IAAAvC,gBAAe,iCAGb2B,EAAeE,oBArGnB,SAACH,EAA8BG,EAC9BrC,G,YACC,IAAiB,QAAAqC,GAAkB,8BAAE,CAAhC,IAAMC,EAAE,QACPc,EAAuB,iBAAPd,EAAkBA,EAAKA,EAAGl2F,KAG9C,OAAQg3F,GACN,IAAK,UACHA,EAAS,UACT,MACF,IAAK,QAEH,GADAA,EAAS,QACS,iBAAPd,EAAiB,CAC1B,IAAMe,EAAef,EACrB,GAAIe,aAAY,EAAZA,EAAcC,WAAY,CAC5B,IAAM1C,GAAgB,IAAAN,iBAAgB,aAAcN,GAC9Ca,GAAkB,IAAAP,iBAAgB+C,EAAaC,WAAYtD,GAE7D,KADA,IAAAF,eAAcyD,0BAA0BrB,EAAsBtB,EAAeC,KAE/E,IAAAL,gBAAe,2DAAoD6C,EAAaC,WAAU,K,EAG1FD,aAAY,EAAZA,EAAcG,mBACV5C,GAAgB,IAAAN,iBAAgB,kBAAmBN,GACnDa,GAAkB,IAAAP,iBAAgB+C,EAAaG,gBAAiBxD,GAElE,KADA,IAAAF,eAAcyD,0BAA0BrB,EAAsBtB,EAAeC,KAE/E,IAAAL,gBACI,gEAAyD6C,EAAaG,gBAAe,M,CAI/F,MACF,IAAK,SAEH,GADAJ,EAAS,KACS,iBAAPd,EAAiB,CAC1B,IAAMmB,EAAgBnB,EACtB,GAAImB,aAAa,EAAbA,EAAeC,gBAAiB,CAClC,GAAsC,SAAlCD,EAAcC,iBAAgE,SAAlCD,EAAcC,gBAC5D,MAAM,IAAIn2F,MAAM,2DAAoDk2F,EAAcC,kBAE9E9C,GAAgB,IAAAN,iBAAgB,kBAAmBN,GACnDa,GAAkB,IAAAP,iBAAgBmD,EAAcC,gBAAiB1D,GAEnE,KADA,IAAAF,eAAcyD,0BAA0BrB,EAAsBtB,EAAeC,KAE/E,IAAAL,gBACI,gEAAyDiD,EAAcC,gBAAe,K,EAIhG,MACF,IAAK,OACL,IAAK,MACH,SACF,QACE,MAAM,IAAIn2F,MAAM,4CAAqC61F,IAGzD,IAAMO,GAAmB,IAAArD,iBAAgB8C,EAAQpD,GACyC,KAAtF,IAAAF,eAAc8D,4BAA4B1B,EAAsByB,KAClE,IAAAnD,gBAAe,2CAAoC4C,EAAM,K,mGAG/D,CAuCES,CAAsB3B,EAAsBC,EAAeE,mBAAoBrC,GAG7EmC,EAAe2B,uB,IACjB,IAA4B,QAAAv4F,OAAOokF,QAAQwS,EAAe2B,yBAAuB,8BAAE,CAAxE,mBAAC,EAAI,KAAEp4F,EAAK,KACrB,GAAoB,iBAAT,EACT,MAAM,IAAI6B,MAAM,yDAAkD,IAEpE,GAAqB,iBAAV7B,IAAuBrB,OAAOC,UAAUoB,IAAUA,EAAQ,EACnE,MAAM,IAAI6B,MAAM,wEAAiE7B,IAEnF,IAAMurD,GAAa,IAAAqpC,iBAAgB,EAAMN,GAC0C,IAA/Eh2F,EAAK+5F,6BAA6B7B,EAAsBjrC,EAAYvrD,KACtE,IAAA80F,gBAAe,+CAAwC,EAAI,cAAM90F,EAAK,K,mGAgB5E,YAX6B4C,IAAzB6zF,EAAe1B,QACjB,IAAAC,qBAAoByB,EAAe1B,MAAO,GAAI,IAAIE,SAAoC,SAACnzF,EAAK9B,GAC1F,IAAMk1F,GAAgB,IAAAN,iBAAgB9yF,EAAKwyF,GACrCa,GAAkB,IAAAP,iBAAgB50F,EAAOs0F,GAE8C,IAAzFh2F,EAAKu5F,0BAA0BrB,EAAsBtB,EAAeC,KACtE,IAAAL,gBAAe,4CAAqChzF,EAAG,cAAM9B,EAAK,KAEtE,IAGK,CAACw2F,EAAsBlC,E,CAC9B,MAAOptF,GAKP,MAJ6B,IAAzBsvF,GACFl4F,EAAKg6F,0BAA0B9B,GAEjClC,EAAOppF,SAAQ,SAAAmgE,GAAS,OAAA/sE,EAAKg3F,MAAMjqB,EAAX,IAClBnkE,C,CAEV,C,uTCjKa,EAAA+8D,2BAA6B,SAACliE,GACzC,OAAQA,GACN,IAAK,OACH,OAAO,EACT,IAAK,QACH,OAAO,EACT,IAAK,OACH,OAAO,EACT,IAAK,QACH,OAAO,EACT,IAAK,SACH,OAAO,EACT,IAAK,QACH,OAAO,EACT,IAAK,SACH,OAAO,GACT,IAAK,UACH,OAAO,GACT,IAAK,UACH,OAAO,EACT,IAAK,UACH,OAAO,GACT,IAAK,SACH,OAAO,EACT,IAAK,QACH,OAAO,EACT,IAAK,SACH,OAAO,GAET,QACE,MAAM,IAAIF,MAAM,iCAA0BE,IAEhD,EAKa,EAAAkvF,2BAA6B,SAACjtB,GACzC,OAAQA,GACN,KAAK,EACH,MAAO,OACT,KAAK,EACH,MAAO,QACT,KAAK,EACH,MAAO,OACT,KAAK,EACH,MAAO,QACT,KAAK,EACH,MAAO,SACT,KAAK,EACH,MAAO,QACT,KAAK,GACH,MAAO,SACT,KAAK,GACH,MAAO,UACT,KAAK,EACH,MAAO,UACT,KAAK,GACH,MAAO,UACT,KAAK,EACH,MAAO,SACT,KAAK,EACH,MAAO,QACT,KAAK,GACH,MAAO,SAET,QACE,MAAM,IAAIniE,MAAM,iCAA0BmiE,IAEhD,EAMa,EAAAqK,qBAAuB,SAACkqB,GACpB,YAAC31F,EAAW,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,OAAGA,EAAW,EAAG,EAAG,EAAG,EAAG,OAAGA,OAAWA,OAAWA,GAAW21F,EAA5F,EAKJ,EAAA3oB,kCAAoC,SAAC7tE,GAG5C,OAAQA,GACN,IAAK,UAQL,IAAK,SACH,OAAO4pC,YAPT,IAAK,UACH,OAAO/xB,aACT,IAAK,QAUL,IAAK,OACH,OAAOtH,WATT,IAAK,OACH,OAAOo5B,UAGT,IAAK,QACH,OAAOD,WACT,IAAK,QACH,OAAO3O,WAGT,IAAK,UACH,OAAO8O,aACT,IAAK,SACH,OAAOx5B,YACT,IAAK,QACH,OAAO2tD,cACT,IAAK,SACH,OAAO4wB,eACT,QACE,MAAM,IAAI9uF,MAAM,4BAAqBE,IAE3C,EAKS,EAAA2tE,qBAAuB,SAACzwB,GACnC,OAAQA,GACN,IAAK,UACH,OAAO,EACT,IAAK,OACH,OAAO,EACT,IAAK,UACH,OAAO,EACT,IAAK,QACH,OAAO,EACT,IAAK,QACH,OAAO,EACT,QACE,MAAM,IAAIp9C,MAAM,qCAA8Bo9C,IAEpD,EAKa,EAAA22C,yBAA2B,SAAC7zF,GAAyD,MAAS,YAATA,GACrF,UAATA,GAA6B,UAATA,GAA6B,SAATA,GAA4B,YAATA,GAA+B,WAATA,CADa,EAMrF,EAAAy2F,yBAA2B,SAAClyD,GACvC,OAAQA,GACN,IAAK,OACH,OAAO,EACT,IAAK,MACH,OAAO,EACT,IAAK,aACH,OAAO,EACT,IAAK,UACH,OAAO,EACT,IAAK,aACH,OAAO,EACT,QACE,MAAM,IAAIzkC,MAAM,qCAA8BykC,IAEpD,EAKa,EAAAmyD,yBAA2B,SAACnyD,GACrC,MAAC,CAAC,OAAQ,MAAO,aAAc,UAAW,cAAwBA,EAAlE,C,+uEC/LJ,cACA,UACA,UACA,SACA,UAsCa,EAAAotD,YAAc,SAAMr1F,GAAQ,0C,kDAInC,OAfWK,EAaPL,EAAIC,KAAKI,WAbkBg6F,GAaL,IAAAhpB,sBAAqBrxE,EAAI4gD,UAXrC,KADA,IAAAm1C,eAAcuE,SAASj6F,EAAYg6F,KAEnD,IAAA5D,gBAAe,iCAYb,M,OAKF,S,2BApBY,IAACp2F,EAAoBg6F,C,QAwDrC,IAAME,EAAiB,IAAIx3F,IAMd,EAAAuyF,sBAAwB,SAACxxC,GACpC,IAAM7jD,GAAO,IAAA81F,eACPyE,EAAkBv6F,EAAKw6F,QAAQ32C,EAAMrZ,YAC3C,GAAwB,IAApB+vD,EACF,MAAM,IAAIh3F,MAAM,sEAA+DsgD,EAAMrZ,WAAU,MAGjG,OADAxqC,EAAK2vE,OAAOzsE,IAAI2gD,EAAO02C,GAChB,CAACA,EAAiB12C,EAAMrZ,WACjC,EAQa,EAAA8qD,sBACT,SAACoC,EAAkCn4F,G,MAC3BS,GAAO,IAAA81F,eAETnlB,EAAgB,EAChBunB,EAAuB,EAEvBlC,EAAmB,GACjByE,EAAwB,GACxBC,EAAyB,GAE/B,IACGxC,GAAD,KAAiC,IAAAD,mBAAkB14F,GAAQ,IAAtC,GAAEy2F,EAAM,KAGP,KADtBrlB,EAAgB3wE,EAAK26F,kBAAkBjD,EAAU,GAAIA,EAAU,GAAIQ,MAEjE,IAAA1B,gBAAe,2BAQjB,IALM,QArHqB,SAAC7lB,GAClC,IAAM3wE,GAAO,IAAA81F,eACPv1C,EAAQvgD,EAAKiwE,YACnB,IACE,IAAMM,EAAavwE,EAAKkwE,WAAW,GAKnC,OAHkB,IADAlwE,EAAK46F,wBAAwBjqB,EAAeJ,EAAYA,EAAa,KAErF,IAAAimB,gBAAe,yCAEV,CAACx2F,EAAK66F,OAAOtqB,EAAa,GAAIvwE,EAAK66F,OAAOtqB,EAAa,EAAI,G,SAElEvwE,EAAKowE,aAAa7vB,E,CAEtB,CAwG0Cu6C,CAA2BnqB,GAAc,GAApE/oD,EAAU,KAAE6nD,EAAW,KAExB9iE,EAAa,GACb8vD,EAAc,GAEX/2D,EAAI,EAAGA,EAAIkiB,EAAYliB,IAAK,CACnC,IAAM,EAAO1F,EAAK+6F,iBAAiBpqB,EAAejrE,GACrC,IAAT,IACF,IAAA8wF,gBAAe,4BAEjBiE,EAAsB3zF,KAAK,GAC3B6F,EAAW7F,KAAK9G,EAAKywE,aAAa,G,CAEpC,IAAS/qE,EAAI,EAAGA,EAAI+pE,EAAa/pE,IAAK,CACpC,IAAM,EAAO1F,EAAKg7F,kBAAkBrqB,EAAejrE,GACtC,IAAT,IACF,IAAA8wF,gBAAe,6BAEjBkE,EAAuB5zF,KAAK,GAC5B,IAAMm0F,EAAaj7F,EAAKywE,aAAa,GACrChU,EAAY31D,KAAKm0F,E,CA6BnB,OADAX,EAAep3F,IAAIytE,EAAe,CAACA,EAAe8pB,EAAuBC,EAdjC,OAejC,CAAC/pB,EAAehkE,EAAY8vD,E,CACnC,MAAO7zD,GAWP,MAVA6xF,EAAsB7tF,SAAQ,SAAAi2C,GAAO,OAAA7iD,EAAKk7F,SAASr4C,EAAd,IACrC63C,EAAuB9tF,SAAQ,SAAAi2C,GAAO,OAAA7iD,EAAKk7F,SAASr4C,EAAd,IAMhB,IAAlB8tB,GACF3wE,EAAKm7F,mBAAmBxqB,GAEpB/nE,C,SAEN5I,EAAKg3F,MAAMU,EAAU,IACQ,IAAzBQ,GACFl4F,EAAKg6F,0BAA0B9B,GAEjClC,EAAOppF,SAAQ,SAAAmgE,GAAS,OAAA/sE,EAAKg3F,MAAMjqB,EAAX,G,CAE5B,EAOS,EAAAyoB,cACT,SAAC3xC,EAAmBtkD,GAClB,IAAMm4F,GAAmC,IAAArC,uBAAsBxxC,GAC/D,OAAO,IAAAyxC,uBAAsBoC,EAAWn4F,EAC1C,EAES,EAAAm2F,eAAiB,SAAC1nB,G,MACvBhuE,GAAO,IAAA81F,eACPt2F,EAAU86F,EAAez2F,IAAImqE,GACnC,IAAKxuE,EACH,MAAM,IAAI+D,MAAM,sDAA+CyqE,IAE3D,QAAiFxuE,EAAO,GAAvFmxE,EAAa,KAAE8pB,EAAqB,KAAEC,EAAsB,KAAEU,EAAc,KAE/EA,GACFp7F,EAAKq7F,mBAAmBD,EAAeE,QAGf,QAA1B,EAAAt7F,EAAKu7F,6BAAqB,gBAAGvtB,GAE7BysB,EAAsB7tF,SAAQ,SAAAi2C,GAAO,OAAA7iD,EAAKk7F,SAASr4C,EAAd,IACrC63C,EAAuB9tF,SAAQ,SAAAi2C,GAAO,OAAA7iD,EAAKk7F,SAASr4C,EAAd,IACtC7iD,EAAKm7F,mBAAmBxqB,GACxB2pB,EAAe52F,OAAOsqE,EACxB,EAEA,IAAMwtB,EACF,SAACjhF,EAA6BkhF,EAAyBzF,EAAkBhoB,EAAmBt9D,GAEtF,GAAK6J,EAAL,CAKA,IAMIs2C,EACA6qC,EAPE17F,GAAO,IAAA81F,eAEP/5E,EAAWxB,EAAO,GAClBP,EAAOO,EAAO,GACdytB,EAAWztB,EAAO,GAKxB,GAAiB,WAAbwB,GAAsC,eAAbisB,EAC3B,MAAM,IAAIzkC,MAAM,0CAGlB,GAAiB,eAAbykC,EAA2B,CAC7B,IAAMymC,EAAYl0D,EAAO,GAAGk0D,UACtBktB,GAAqB,IAAA5rB,uBAAqB,IAAApK,4BAA2B5pD,IAC3E2/E,EAAiB1hF,EAAKmhB,QAAO,SAACtnB,EAAG5H,GAAM,OAAA4H,EAAI5H,CAAJ,GAAO,GAAK0vF,EACnD9qC,EAAU7wD,EAAK47F,mBAAmB5tB,EAAWt9D,EAAO+9D,EAAWitB,E,KAC1D,CACL,IAAM1/E,EAAOzB,EAAO,GAEpB,GAAI9U,MAAM+lC,QAAQxvB,GAAO,CAEvB0/E,EAAiB,EAAI1/E,EAAKtb,OAC1BmwD,EAAU7wD,EAAKw6F,QAAQkB,GACvB1F,EAAOlvF,KAAK+pD,GAEZ,IADA,IAAIzU,EAAYyU,EAAU,EACjBnrD,EAAI,EAAGA,EAAIsW,EAAKtb,OAAQgF,IAAK,CACpC,GAAuB,iBAAZsW,EAAKtW,GACd,MAAM,IAAIgqB,UAAU,+BAAwBhqB,EAAC,qBAE/C1F,EAAKuvE,QAAQnzB,MAAe,IAAAk6C,iBAAgBt6E,EAAKtW,GAAIswF,E,OAGvD0F,EAAiB1/E,EAAKwuB,WACtBqmB,EAAU7wD,EAAKw6F,QAAQkB,GACvB1F,EAAOlvF,KAAK+pD,GACZ7wD,EAAK2vE,OAAOzsE,IAAI,IAAI8Q,WAAWgI,EAAKf,OAAQe,EAAKuuB,WAAYmxD,GAAiB7qC,E,CAIlF,IAAMtQ,EAAQvgD,EAAKiwE,YACb7e,EAAapxD,EAAKkwE,WAAW,EAAIl2D,EAAKtZ,QAC5C,IACE,IAAI,EAAW0wD,EAAa,EAC5Bp3C,EAAKpN,SAAQ,SAAAwB,GAAK,OAAApO,EAAK66F,OAAO,KAAczsF,CAA1B,IAClB,IAAM,EAASpO,EAAK67F,kBAChB,IAAAl2B,4BAA2B5pD,GAAW80C,EAAS6qC,EAAgBtqC,EAAYp3C,EAAKtZ,QAChF,IAAAw5F,0BAAyBlyD,IACd,IAAX,IACF,IAAAwuD,gBAAe,wDAAiDxoB,EAAS,mBAAWt9D,EAAK,MAE3F+qF,EAAc30F,KAAK,E,SAEnB9G,EAAKowE,aAAa7vB,E,OA1DlBk7C,EAAc30F,KAAK,EA4DvB,EAKK,EAAAwT,IAAM,SACf0zD,EAAmB+X,EAAwB3sC,EAAgC6qB,EAC3EhG,EAA2C1+D,GAAoC,0C,oHAGjF,GAFMS,GAAO,IAAA81F,iBACPt2F,EAAU86F,EAAez2F,IAAImqE,IAEjC,MAAM,IAAIzqE,MAAM,oDAA6CyqE,IAEzD,IAAiFxuE,EAAO,GAAvFmxE,EAAa,KAAE8pB,EAAqB,KAAEC,EAAsB,KAAEU,EAAc,KAE7ExzE,EAAam+D,EAAarlF,OAC1B+uE,EAAcxL,EAAcvjE,OAE9Bq1F,EAAmB,EACnB+F,EAA6B,GAE3BC,EAA+B,GAC/BC,EAAgC,GAChCC,EAA8B,GAE9BC,EAAiBl8F,EAAKiwE,YACtBksB,EAAoBn8F,EAAKkwE,WAAwB,EAAbtoD,GACpCw0E,EAAmBp8F,EAAKkwE,WAAwB,EAAbtoD,GACnCy0E,EAAqBr8F,EAAKkwE,WAAyB,EAAdT,GACrC6sB,EAAoBt8F,EAAKkwE,WAAyB,EAAdT,G,iBAMxC,I,wBAHA,KAAuC,IAAAomB,eAAct2F,GAAQ,GAA5Dw2F,EAAgB,KAAE+F,EAAgB,KAG1Bp2F,EAAI,EAAGA,EAAIkiB,EAAYliB,IAC9B81F,EAAyBpiD,EAAa1zC,GAAIq2F,EAAoBE,EAAmBjuB,EAAW+X,EAAargF,IAI3G,IAASA,EAAI,EAAGA,EAAI+pE,EAAa/pE,IAC/B81F,EACIv9B,EAAcv4D,GAAIs2F,EAAqBC,EAAmBjuB,EAAWpmD,EAAaq8C,EAAcv+D,IAOtG,IAJI62F,EAAmBJ,EAAoB,EACvCK,EAAkBJ,EAAmB,EACrCK,EAAoBJ,EAAqB,EACzCK,EAAmBJ,EAAoB,EAClC52F,EAAI,EAAGA,EAAIkiB,EAAYliB,IAC9B1F,EAAKuvE,QAAQgtB,KAAsBR,EAAmBr2F,GACtD1F,EAAKuvE,QAAQitB,KAAqB/B,EAAsB1U,EAAargF,IAEvE,IAASA,EAAI,EAAGA,EAAI+pE,EAAa/pE,IAC/B1F,EAAKuvE,QAAQktB,KAAuBT,EAAoBt2F,GACxD1F,EAAKuvE,QAAQmtB,KAAsBhC,EAAuBz2B,EAAcv+D,IAGtE,Y,cAScA,EAAIkiB,GACZlX,EAAQq1E,EAAargF,GACT,GAAM1F,EAAK28F,cAAcrB,EAAQb,EAAsB/pF,GAAQqrF,EAAmBr2F,MAFxE,M,OAGV,IADA,WAEhB,IAAA8wF,gBAAe,2BAAoB9wF,EAAC,yBAAiBsoE,EAAS,M,wBAJlCtoE,I,aAShC,IAASA,EAAI,EAAGA,EAAI+pE,EAAa/pE,IACzBgL,EAAQuzD,EAAcv+D,IACK,QAAhB,EAAAu4D,EAAcv4D,UAAE,eAAG,IAKhB,IADA1F,EAAK48F,eAAetB,EAAQZ,EAAuBhqF,GAAQsrF,EAAoBt2F,GAAI,KAEnG,IAAA8wF,gBAAe,0CAAmC9wF,EAAC,yBAAiBsoE,EAAS,MAM7D,IADdhuE,EAAK48F,eAAetB,EAAQZ,EAAuBhqF,GAAQ,E,UAAmCA,MAEhG,IAAA8lF,gBAAe,4BAAqB9wF,EAAC,gB,UAAiCA,GAAE,wBAAgBsoE,EAAS,M,iBAQrG,OAFA6uB,OAAS,EAET,M,cACFA,EAAY,S,cAGA,SAAM78F,EAAK88F,QACnBnsB,EAAeyrB,EAAkBD,EAAmBv0E,EAAY00E,EAAmB7sB,EACnF4sB,EAAoBtG,I,OAFxB8G,EAAY,S,mBAWd,IANkB,IAAdA,IACF,IAAArG,gBAAe,4BAGX1rF,EAA2B,G,WAExBpF,GACP,IAAM6U,EAASva,EAAKuvE,QAAQ8sB,EAAqB,EAAI32F,GACrD,GAAI6U,IAAWyhF,EAAoBt2F,G,OAEjCoF,EAAOhE,KAAKm3D,EAAcv4D,I,WAI5B,IAAMq3F,EAA2B/8F,EAAKiwE,YAEhC+sB,EAAmBh9F,EAAKkwE,WAAW,IAErC+sB,GAAmB,EACnBx5F,OAAI,EAAyB8sE,EAAa,EAC9C,IAGoB,IAFAvwE,EAAKk9F,kBACnB3iF,EAAQyiF,EAAkBA,EAAmB,EAAGA,EAAmB,EAAGA,EAAmB,MAE3F,IAAAxG,gBAAe,mDAA4C9wF,EAAC,MAE9D,IAAIy3F,EAAkBH,EAAmB,EACnCjhF,EAAW/b,EAAKuvE,QAAQ4tB,KAC9B5sB,EAAavwE,EAAKuvE,QAAQ4tB,KAI1B,IAHA,IAAM/rC,EAAapxD,EAAKuvE,QAAQ4tB,KAC1BvsC,EAAa5wD,EAAKuvE,QAAQ4tB,KAC1BnjF,EAAO,GACJ,EAAI,EAAG,EAAI42C,EAAY,IAC9B52C,EAAKlT,KAAK9G,EAAKuvE,QAAQne,EAAa,EAAI,IAE1CpxD,EAAKk7F,SAAS9pC,GAEd,IAAM9tD,EAAO0W,EAAKmhB,QAAO,SAACtnB,EAAG5H,GAAM,OAAA4H,EAAI5H,CAAJ,GAAO,GAC1CxI,GAAO,IAAAkvF,4BAA2B52E,GAElC,IAAMqhF,EAAoBhC,aAAc,EAAdA,EAAgBiC,yBAAyBp5B,EAAcv+D,IAEjF,GAAa,WAATjC,EAAmB,CACrB,GAA0B,eAAtB25F,EACF,MAAM,IAAI75F,MAAM,0CAIlB,IAFA,IAAMytD,EAAuB,GACzB5U,EAAYm0B,EAAa,EACpB,EAAI,EAAG,EAAIjtE,EAAM,IAAK,CAC7B,IAAM49B,EAASlhC,EAAKuvE,QAAQnzB,KACtBkhD,EAAiB,IAAMh6F,EAAO,OAAIgB,EAAYtE,EAAKuvE,QAAQnzB,GAAalb,EAC9E8vB,EAAWlqD,KAAK9G,EAAKywE,aAAavvC,EAAQo8D,G,CAE5CxyF,EAAOhE,KAAK,CAACrD,EAAMuW,EAAMg3C,EAAY,O,MAIrC,GAA0B,eAAtBosC,GAAsC95F,EAAO,EAAG,CAClD,IAAMmrE,EAAYzuE,EAAKu9F,cAAchtB,GAC/BpQ,GAAc,IAAA4P,sBAAqBh0D,GACzC,QAAoBzX,IAAhB67D,KAA8B,IAAAm3B,0BAAyB7zF,GACzD,MAAM,IAAIF,MAAM,iCAA0BE,IAI5Cw5F,GAAmB,EAEnBnyF,EAAOhE,KAAK,CACVrD,EAAMuW,EAAM,CACVy0D,UAAS,EACT5B,SAAU7sE,EAAKw9F,qBAAqB/uB,EAAWnrE,EAAO68D,EAAa18D,GACnEiE,QAAS,WACP1H,EAAKy9F,kBAAkBljF,EACzB,GAEF,c,KAEG,CACL,IACMyB,EAAO,KADiB,IAAAs1D,mCAAkC7tE,GACnD,CAA0BH,GACvC,IAAI0Q,WAAWgI,EAAKf,OAAQe,EAAKuuB,WAAYvuB,EAAKwuB,YAC7CtnC,IAAIlD,EAAK2vE,OAAOl0D,SAAS80D,EAAYA,EAAav0D,EAAKwuB,aAC5D1/B,EAAOhE,KAAK,CAACrD,EAAMuW,EAAMgC,EAAM,O,UAInChc,EAAKowE,aAAa2sB,GACL,WAATt5F,GAAqB8sE,GACvBvwE,EAAKg3F,MAAMzmB,GAER0sB,GACHj9F,EAAKy9F,kBAAkBljF,E,GArFpB7U,EAAI,EAAGA,EAAI+pE,EAAa/pE,I,EAAxBA,GA8FT,OAJI01F,GACFp7F,EAAK09F,sBAAsBtC,EAAeE,QAGrC,CAAP,EAAOxwF,G,eAEP9K,EAAKowE,aAAa8rB,GAElBH,EAAmBnvF,SAAQ,SAAAiI,GAAK,OAAA7U,EAAKy9F,kBAAkB5oF,EAAvB,IAChCmnF,EAAoBpvF,SAAQ,SAAAiI,GAAK,OAAA7U,EAAKy9F,kBAAkB5oF,EAAvB,IACjConF,EAAkBrvF,SAAQ,SAAAozB,GAAK,OAAAhgC,EAAKg3F,MAAMh3D,EAAX,IAEN,IAArB+1D,GACF/1F,EAAK+2F,sBAAsBhB,GAE7B+F,EAAiBlvF,SAAQ,SAAAozB,GAAK,OAAAhgC,EAAKg3F,MAAMh3D,EAAX,I,8BAOrB,EAAAi9B,aAAe,SAAC+Q,GAC3B,IAAMhuE,GAAO,IAAA81F,eACPt2F,EAAU86F,EAAez2F,IAAImqE,GACnC,IAAKxuE,EACH,MAAM,IAAI+D,MAAM,sBAElB,IAAMotE,EAAgBnxE,EAAQ,GAGxBm+F,EAAkB39F,EAAK49F,iBAAiBjtB,GACtB,IAApBgtB,IACF,IAAAnH,gBAAe,mCAEjBx2F,EAAKk7F,SAASyC,EAChB,EAEa,EAAA/H,2BAA6B,SAAClvF,G,QACnCktE,EAA6B,G,IACnC,IAAqB,QAAAltE,GAAO,8BAAE,CAAzB,IACGsV,EADS,QACK,IACfvW,MAAM+lC,QAAQxvB,IAAS,WAAYA,GACtC43D,EAAQ9sE,KAAKkV,EAAKf,O,mGAGtB,OAAO24D,CACT,C,mqECniBA,IAeI5zE,EAfJ,aAMM69F,EAC0B,EAAQ,KAElCC,EAC2B,EAAQ,MAMrCjK,GAAc,EACdD,GAAe,EACfE,GAAU,EA2DD,EAAAmB,sBAAwB,SAAM8I,GAA2B,0C,4EACpE,GAAIlK,EACF,MAAO,CAAP,EAAO3yF,QAAQC,WAEjB,GAAIyyF,EACF,MAAM,IAAIrwF,MAAM,yDAElB,GAAIuwF,EACF,MAAM,IAAIvwF,MAAM,sDA+FlB,OA5FAqwF,GAAe,EAGToK,EAAUD,EAAM99F,YAChBG,EAAa29F,EAAM39F,WACnBF,EAAO69F,EAAM79F,KAEb+9F,EAAa79F,EAAa,GA3EH,WAC7B,IAEE,MAAiC,oBAAtB89F,oBAMmB,oBAAnBC,iBACT,IAAIA,gBAAiBC,MAAMpJ,YAAY,IAAIkJ,kBAAkB,IAKxDG,YAAYC,SAAS,IAAItqF,WAAW,CACzC,EAAG,GAAI,IAAK,IAAK,EAAG,EAAI,EAAI,EAAG,EAAG,EAAG,EAAI,GAAI,EAAK,EAAI,EAAG,EAAG,EAAI,EAAG,EACnE,EAAG,EAAI,EAAK,EAAK,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,GAAI,EAAI,IAAK,GAAI,EAAG,EAAG,GAAI,M,CAElE,MAAOpL,GACP,OAAO,C,CAEX,CAqDuC21F,GAC/BC,EAAUt+F,GApDM,WACtB,IAeE,OAAOm+F,YAAYC,SAAS,IAAItqF,WAAW,CACzC,EAAK,GAAI,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAK,GAAK,EAAG,GAAI,EACvF,IAAK,GAAI,IAAK,GAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAI,EAAI,IAAK,IAAK,EAAG,GAAI,K,CAEzF,MAAOpL,GACP,OAAO,C,CAEX,CA6B0B61F,GAElB/J,EAAYqJ,EAAMrJ,UAClBgK,EAA0C,iBAAdhK,EAAyBA,OAAYpwF,EACjEq6F,EA/BgB,SAACH,EAAkBP,GACzC,OAAIA,EACKO,EAAU,8BAAgC,yBAE1CA,EAAU,qBAAuB,eAE5C,CAyBuBI,CAAgBJ,EAASP,GACxCY,EAAwC,iBAAdnK,EAAyBA,EAAUiK,QAAgBr6F,EAE/Ew6F,GAAY,EAEVC,EAA8B,GAGhCf,EAAU,GACZe,EAAMj4F,KAAK,IAAI5F,SAAQ,SAACC,GACtB8sC,YAAW,WACT6wD,GAAY,EACZ39F,GACF,GAAG68F,EACL,KAIFe,EAAMj4F,KAAK,IAAI5F,SAAQ,SAACC,EAAS0sC,GAC/B,IAAM/uC,EAAUm/F,EAAaH,EAAyBD,EAChD7xD,EAAiC,CACrCgzD,WAAY,SAACC,EAAkBC,GAC7B,OAAuCjB,GAAcgB,EAAS56C,SAAS,eACnD,oBAAT86C,KACFC,IAAIC,gBAAgB,IAAIF,KAC3B,CAGE,EAAQ,OAEV,CAAC17F,KAAM,qBAGTw7F,EAAS56C,SAAS,SAChBw6C,IAIWH,QAAAA,EAAsBQ,GAUrBP,EAGXO,EAAkBD,CAC3B,GAGF,GAAuChB,EACrC,GAAoB,oBAATkB,KACTnzD,EAAOszD,oBAAsB9H,EAAKn1F,KAAKk9F,UAAW,4BAC7C,CACL,IAAMC,EAAmB,gEAAyD1gG,EAAQy0C,WAAU,SACpGvH,EAAOszD,oBAAsB,IAAIH,KAAK,CAACK,GAAmB,CAAC/7F,KAAM,mB,CAIrE3E,EAAQktC,GAAQkW,MAEZ,SAAAljD,GACE40F,GAAe,EACfC,GAAc,EACd7zF,EAAOhB,EACPmC,GACF,IAEA,SAACs+F,GACC7L,GAAe,EACfE,GAAU,EACVjmD,EAAO4xD,EACT,GACN,KAEA,GAAMv+F,QAAQw+F,KAAKX,I,OAEnB,GAFA,SAEID,EACF,MAAM,IAAIv7F,MAAM,kEAA2Dy6F,EAAO,O,kBAIzE,EAAAlI,YAAc,WACzB,GAAIjC,GAAe7zF,EACjB,OAAOA,EAGT,MAAM,IAAIuD,MAAM,sCAClB,EAEa,EAAAmE,QAAU,W,OACjBmsF,GAAgBD,GAAiBE,IACnCF,GAAe,EAEwB,QAAtC,EAAA5zF,EAA+B2/F,eAAO,SAAEC,sBACzC5/F,OAAOsE,EAEPsvF,GAAe,EACfC,GAAc,EACdC,GAAU,EAEd,C,scC/MA,aAEa,EAAAwC,gBAAkB,SAACt6E,EAAcg6E,GAC5C,IAAMh2F,GAAO,IAAA81F,eAEP+J,EAAa7/F,EAAK8/F,gBAAgB9jF,GAAQ,EAC1Cu0D,EAAavwE,EAAKw6F,QAAQqF,GAIhC,OAHA7/F,EAAK+/F,aAAa/jF,EAAMu0D,EAAYsvB,GACpC7J,EAAOlvF,KAAKypE,GAELA,CACT,EAMa,EAAAmmB,oBACT,SAACn3F,EAAkCygG,EAAgBC,EAClDj/F,GACC,GAAsB,iBAAXzB,GAAmC,OAAZA,EAAkB,CAClD,GAAI0gG,EAAKjtF,IAAIzT,GACX,MAAM,IAAIgE,MAAM,iCAEhB08F,EAAKhtF,IAAI1T,E,CAIbgC,OAAOokF,QAAQpmF,GAASqN,SAAQ,SAAC,G,IAAA,SAACpJ,EAAG,KAAE9B,EAAK,KACpCU,EAAO,EAAW49F,EAASx8F,EAAMA,EACvC,GAAqB,iBAAV9B,GACT,IAAAg1F,qBAAoBh1F,EAAkCU,EAAO,IAAK69F,EAAMj/F,QACnE,GAAqB,iBAAVU,GAAuC,iBAAVA,EAC7CV,EAAQoB,EAAMV,EAAM6xC,gBACf,IAAqB,kBAAV7xC,EAGhB,MAAM,IAAI6B,MAAM,iDAA0C7B,IAF1DV,EAAQoB,EAAM,EAAU,IAAM,I,CAIlC,GACF,EAMS,EAAAo0F,eAAiB,SAAC5rB,GAC7B,IAAM5qE,GAAO,IAAA81F,eAEPv1C,EAAQvgD,EAAKiwE,YACnB,IACE,IAAMiwB,EAAelgG,EAAKkwE,WAAW,GACrClwE,EAAKmgG,iBAAiBD,EAAcA,EAAe,GACnD,IAAMrD,EAAY78F,EAAK66F,OAAOqF,EAAe,GACvCE,EAAsBpgG,EAAKuvE,QAAQ2wB,EAAe,EAAI,GACtDG,EAAeD,EAAsBpgG,EAAKywE,aAAa2vB,GAAuB,GACpF,MAAM,IAAI78F,MAAM,UAAGqnE,EAAO,wBAAgBiyB,EAAS,4BAAoBwD,G,SAEvErgG,EAAKowE,aAAa7vB,E,CAEtB,C,2FC5De,SAAS+/C,IACtB,OAAO,IAAO,8ktTAAq98T,cAAUh8F,OAAWA,EAC1/8T,C,gCCAAtF,EAAOD,QAAU,SAAUkgD,EAASshD,EAAmBC,EAAeC,GACpE,IAAIC,EAAcvhG,MAAQwhG,OAE1B,IACE,IACE,IAAIC,EAEJ,IAEEA,EAAO,IAAIF,EAAYvB,KAAK,CAAClgD,GAC/B,CAAE,MAAOr2C,IAGPg4F,EAAO,IADWF,EAAYG,aAAeH,EAAYI,mBAAqBJ,EAAYK,gBAAkBL,EAAYM,gBAEnHC,OAAOhiD,GACZ2hD,EAAOA,EAAKM,SACd,CAEA,IAAI9B,EAAMsB,EAAYtB,KAAOsB,EAAYS,UACrCC,EAAYhC,EAAIC,gBAAgBuB,GAChCS,EAAS,IAAIX,EAAYH,GAAmBa,EAAWZ,GAE3D,OADApB,EAAIkC,gBAAgBF,GACbC,CACT,CAAE,MAAOz4F,GACP,OAAO,IAAI83F,EAAYH,GAAmB,+BAA+BjhF,OAAOiiF,mBAAmBtiD,IAAWuhD,EAChH,CACF,CAAE,MAAO53F,GACP,IAAK63F,EACH,MAAMl9F,MAAM,kCAGd,OAAO,IAAIm9F,EAAYH,GAAmBE,EAAKD,EACjD,CACF,C,oCCnCA,IAiCYgB,EAAiBjvC,EAlBrBvvD,EAfJy+F,EAAY,EAAQ,MAGpBC,EAAUD,EAAUE,OAAQC,EAAUH,EAAUI,OAAQC,EAAQL,EAAUM,KAG1EC,EAAQP,EAAUQ,MAAe,UAAMR,EAAUQ,MAAe,QAAI,CAAC,GAEzED,EAAMh/F,OAOEA,EAAO,CAAC,GAiBPk/F,SACGV,EAAa,CAAC,GAAGjvC,EAAShxD,OAAOmgD,OAAO8/C,IACrCA,EAAW,GAAK,kBAAoB,EAC3CjvC,EAAOivC,EAAW,GAAK,yBAA2B,EAClDjvC,EAAOivC,EAAW,GAAK,yBAA2B,EAClDjvC,EAAOivC,EAAW,GAAK,wBAA0B,EACjDjvC,EAAOivC,EAAW,GAAK,wBAA0B,EACjDjvC,EAAOivC,EAAW,GAAK,wBAA0B,EACjDjvC,EAAOivC,EAAW,GAAK,wBAA0B,EACjDjvC,EAAOivC,EAAW,GAAK,uBAAyB,EAChDjvC,EAAOivC,EAAW,GAAK,wBAA0B,EACjDjvC,EAAOivC,EAAW,GAAK,cAAgB,EAChCjvC,GAGXvvD,EAAKC,eAAiB,WAkClB,SAASA,EAAek/F,GAQpB,GAPApgG,KAAKwE,OAAS,GACdxE,KAAKyE,KAAO,GACZzE,KAAK0E,QAAU,GACf1E,KAAK2E,QAAU,GACf3E,KAAK4E,OAAS,GACd5E,KAAKqgG,cAAgB,GACrBrgG,KAAKsgG,WAAa,GACdF,EACA,IAAK,IAAI1sF,EAAOlU,OAAOkU,KAAK0sF,GAAaz8F,EAAI,EAAGA,EAAI+P,EAAK/U,SAAUgF,EACpC,MAAvBy8F,EAAW1sF,EAAK/P,MAChB3D,KAAK0T,EAAK/P,IAAMy8F,EAAW1sF,EAAK/P,IAChD,CA42BA,OAp2BAzC,EAAeq/F,UAAUlgG,KAAO,GAQhCa,EAAeq/F,UAAUC,YAAc,GAQvCt/F,EAAeq/F,UAAUj2C,UAAY,GAQrCppD,EAAeq/F,UAAU7+F,KAAO,EAQhCR,EAAeq/F,UAAUn8F,EAAI,EAQ7BlD,EAAeq/F,UAAU58F,EAAIo8F,EAAMj8B,KAAOi8B,EAAMj8B,KAAKxD,SAAS,EAAE,GAAE,GAAS,EAQ3Ep/D,EAAeq/F,UAAUl8F,EAAI07F,EAAMU,UAAU,IAQ7Cv/F,EAAeq/F,UAAUj8F,EAAI,KAQ7BpD,EAAeq/F,UAAUh8F,EAAI,KAQ7BrD,EAAeq/F,UAAUG,aAAe,KAQxCx/F,EAAeq/F,UAAUI,GAAK,KAQ9Bz/F,EAAeq/F,UAAU/7F,OAASu7F,EAAMa,WAQxC1/F,EAAeq/F,UAAU97F,KAAOs7F,EAAMa,WAQtC1/F,EAAeq/F,UAAU77F,QAAUq7F,EAAMa,WAQzC1/F,EAAeq/F,UAAU57F,QAAUo7F,EAAMa,WAQzC1/F,EAAeq/F,UAAU37F,OAASm7F,EAAMa,WAQxC1/F,EAAeq/F,UAAUF,cAAgBN,EAAMa,WAQ/C1/F,EAAeq/F,UAAUD,WAAaP,EAAMa,WAU5C1/F,EAAey+C,OAAS,SAAgBygD,GACpC,OAAO,IAAIl/F,EAAek/F,EAC9B,EAWAl/F,EAAeoQ,OAAS,SAAgBu3D,EAASg4B,GAe7C,GAdKA,IACDA,EAAShB,EAAQlgD,UACD,MAAhBkpB,EAAQxoE,MAAgBb,OAAO43B,eAAeC,KAAKwxC,EAAS,SAC5Dg4B,EAAOC,OAA8B,IAAIC,OAAOl4B,EAAQxoE,MAC3C,MAAbwoE,EAAQzkE,GAAa5E,OAAO43B,eAAeC,KAAKwxC,EAAS,MACzDg4B,EAAOC,OAA8B,IAAIE,MAAMn4B,EAAQzkE,GAC1C,MAAbykE,EAAQllE,GAAanE,OAAO43B,eAAeC,KAAKwxC,EAAS,MACzDg4B,EAAOC,OAA8B,IAAIG,MAAMp4B,EAAQllE,GAC1C,MAAbklE,EAAQxkE,GAAa7E,OAAO43B,eAAeC,KAAKwxC,EAAS,MACzDg4B,EAAOC,OAA8B,IAAIj2C,MAAMge,EAAQxkE,GAC1C,MAAbwkE,EAAQvkE,GAAa9E,OAAO43B,eAAeC,KAAKwxC,EAAS,MACzDo3B,EAAMh/F,KAAKs9D,YAAYjtD,OAAOu3D,EAAQvkE,EAAGu8F,EAAOC,OAA8B,IAAII,QAAQC,SAC7E,MAAbt4B,EAAQtkE,GAAa/E,OAAO43B,eAAeC,KAAKwxC,EAAS,MACzDo3B,EAAMh/F,KAAKy4C,WAAWpoC,OAAOu3D,EAAQtkE,EAAGs8F,EAAOC,OAA8B,IAAII,QAAQC,SACvE,MAAlBt4B,EAAQrkE,QAAkBqkE,EAAQrkE,OAAO7F,OAAQ,CACjDkiG,EAAOC,OAA8B,IAAII,OACzC,IAAK,IAAIv9F,EAAI,EAAGA,EAAIklE,EAAQrkE,OAAO7F,SAAUgF,EACzCk9F,EAAOG,MAAMn4B,EAAQrkE,OAAOb,IAChCk9F,EAAOM,QACX,CACA,GAAoB,MAAhBt4B,EAAQpkE,MAAgBokE,EAAQpkE,KAAK9F,OAAQ,CAE7C,IADAkiG,EAAOC,OAA8B,IAAII,OAChCv9F,EAAI,EAAGA,EAAIklE,EAAQpkE,KAAK9F,SAAUgF,EACvCk9F,EAAOI,MAAMp4B,EAAQpkE,KAAKd,IAC9Bk9F,EAAOM,QACX,CACA,GAAuB,MAAnBt4B,EAAQnkE,SAAmBmkE,EAAQnkE,QAAQ/F,OAC3C,IAASgF,EAAI,EAAGA,EAAIklE,EAAQnkE,QAAQ/F,SAAUgF,EAC1Ck9F,EAAOC,OAA8B,IAAIj2C,MAAMge,EAAQnkE,QAAQf,IACvE,GAAuB,MAAnBklE,EAAQlkE,SAAmBkkE,EAAQlkE,QAAQhG,OAC3C,IAASgF,EAAI,EAAGA,EAAIklE,EAAQlkE,QAAQhG,SAAUgF,EAC1Cs8F,EAAMh/F,KAAKs9D,YAAYjtD,OAAOu3D,EAAQlkE,QAAQhB,GAAIk9F,EAAOC,OAA+B,IAAII,QAAQC,SAC5G,GAAsB,MAAlBt4B,EAAQjkE,QAAkBikE,EAAQjkE,OAAOjG,OACzC,IAASgF,EAAI,EAAGA,EAAIklE,EAAQjkE,OAAOjG,SAAUgF,EACzCs8F,EAAMh/F,KAAKy4C,WAAWpoC,OAAOu3D,EAAQjkE,OAAOjB,GAAIk9F,EAAOC,OAA+B,IAAII,QAAQC,SAK1G,GAJyB,MAArBt4B,EAAQve,WAAqB9qD,OAAO43B,eAAeC,KAAKwxC,EAAS,cACjEg4B,EAAOC,OAA+B,KAAKC,OAAOl4B,EAAQve,WAC5C,MAAdue,EAAQ83B,IAAcnhG,OAAO43B,eAAeC,KAAKwxC,EAAS,OAC1Do3B,EAAMh/F,KAAKmgG,UAAU9vF,OAAOu3D,EAAQ83B,GAAIE,EAAOC,OAA+B,KAAKI,QAAQC,SACrE,MAAtBt4B,EAAQy3B,YAAsBz3B,EAAQy3B,WAAW3hG,OACjD,IAASgF,EAAI,EAAGA,EAAIklE,EAAQy3B,WAAW3hG,SAAUgF,EAC7Cs8F,EAAMh/F,KAAKmgG,UAAU9vF,OAAOu3D,EAAQy3B,WAAW38F,GAAIk9F,EAAOC,OAA+B,KAAKI,QAAQC,SAO9G,GANoB,MAAhBt4B,EAAQnnE,MAAgBlC,OAAO43B,eAAeC,KAAKwxC,EAAS,SAC5Dg4B,EAAOC,OAA+B,KAAKO,MAAMx4B,EAAQnnE,MAClC,MAAvBmnE,EAAQ23B,aAAuBhhG,OAAO43B,eAAeC,KAAKwxC,EAAS,gBACnEg4B,EAAOC,OAA+B,KAAKC,OAAOl4B,EAAQ23B,aAClC,MAAxB33B,EAAQ63B,cAAwBlhG,OAAO43B,eAAeC,KAAKwxC,EAAS,iBACpEo3B,EAAMh/F,KAAKqgG,kBAAkBhwF,OAAOu3D,EAAQ63B,aAAcG,EAAOC,OAA+B,KAAKI,QAAQC,SACpF,MAAzBt4B,EAAQw3B,eAAyBx3B,EAAQw3B,cAAc1hG,OACvD,IAASgF,EAAI,EAAGA,EAAIklE,EAAQw3B,cAAc1hG,SAAUgF,EAChDs8F,EAAMh/F,KAAKqgG,kBAAkBhwF,OAAOu3D,EAAQw3B,cAAc18F,GAAIk9F,EAAOC,OAA+B,KAAKI,QAAQC,SACzH,OAAON,CACX,EAWA3/F,EAAeqgG,gBAAkB,SAAyB14B,EAASg4B,GAC/D,OAAO7gG,KAAKsR,OAAOu3D,EAASg4B,GAAQM,QACxC,EAaAjgG,EAAeqQ,OAAS,SAAgBiwF,EAAQ7iG,GACtC6iG,aAAkB7B,IACpB6B,EAAS7B,EAAQhgD,OAAO6hD,IAE5B,IADA,IAAIhlE,OAAiBj6B,IAAX5D,EAAuB6iG,EAAO/1D,IAAM+1D,EAAOv7B,IAAMtnE,EAAQkqE,EAAU,IAAIo3B,EAAMh/F,KAAKC,eACrFsgG,EAAOv7B,IAAMzpC,GAAK,CACrB,IAAI83D,EAAMkN,EAAOV,SACjB,OAAQxM,IAAQ,GAChB,KAAK,EACGzrB,EAAQxoE,KAAOmhG,EAAOT,SACtB,MAER,KAAK,GACGl4B,EAAQ23B,YAAcgB,EAAOT,SAC7B,MAER,KAAK,GACGl4B,EAAQve,UAAYk3C,EAAOT,SAC3B,MAER,KAAK,GACGl4B,EAAQnnE,KAAO8/F,EAAOH,QACtB,MAER,KAAK,EACGx4B,EAAQzkE,EAAIo9F,EAAOR,QACnB,MAER,KAAK,EACGn4B,EAAQllE,EAAI69F,EAAOP,QACnB,MAER,KAAK,EACGp4B,EAAQxkE,EAAIm9F,EAAO32C,QACnB,MAER,KAAK,EACGge,EAAQvkE,EAAI27F,EAAMh/F,KAAKs9D,YAAYhtD,OAAOiwF,EAAQA,EAAOV,UACzD,MAER,KAAK,EACGj4B,EAAQtkE,EAAI07F,EAAMh/F,KAAKy4C,WAAWnoC,OAAOiwF,EAAQA,EAAOV,UACxD,MAER,KAAK,GACGj4B,EAAQ63B,aAAeT,EAAMh/F,KAAKqgG,kBAAkB/vF,OAAOiwF,EAAQA,EAAOV,UAC1E,MAER,KAAK,GACGj4B,EAAQ83B,GAAKV,EAAMh/F,KAAKmgG,UAAU7vF,OAAOiwF,EAAQA,EAAOV,UACxD,MAER,KAAK,EAGG,GAFMj4B,EAAQrkE,QAAUqkE,EAAQrkE,OAAO7F,SACnCkqE,EAAQrkE,OAAS,IACH,IAAP,EAAN8vF,GAED,IADA,IAAImN,EAAOD,EAAOV,SAAWU,EAAOv7B,IAC7Bu7B,EAAOv7B,IAAMw7B,GAChB54B,EAAQrkE,OAAOO,KAAKy8F,EAAOR,cAE/Bn4B,EAAQrkE,OAAOO,KAAKy8F,EAAOR,SAC/B,MAER,KAAK,EAGG,GAFMn4B,EAAQpkE,MAAQokE,EAAQpkE,KAAK9F,SAC/BkqE,EAAQpkE,KAAO,IACD,IAAP,EAAN6vF,GAED,IADImN,EAAOD,EAAOV,SAAWU,EAAOv7B,IAC7Bu7B,EAAOv7B,IAAMw7B,GAChB54B,EAAQpkE,KAAKM,KAAKy8F,EAAOP,cAE7Bp4B,EAAQpkE,KAAKM,KAAKy8F,EAAOP,SAC7B,MAER,KAAK,EACSp4B,EAAQnkE,SAAWmkE,EAAQnkE,QAAQ/F,SACrCkqE,EAAQnkE,QAAU,IACtBmkE,EAAQnkE,QAAQK,KAAKy8F,EAAO32C,SAC5B,MAER,KAAK,GACSge,EAAQlkE,SAAWkkE,EAAQlkE,QAAQhG,SACrCkqE,EAAQlkE,QAAU,IACtBkkE,EAAQlkE,QAAQI,KAAKk7F,EAAMh/F,KAAKs9D,YAAYhtD,OAAOiwF,EAAQA,EAAOV,WAClE,MAER,KAAK,GACSj4B,EAAQjkE,QAAUikE,EAAQjkE,OAAOjG,SACnCkqE,EAAQjkE,OAAS,IACrBikE,EAAQjkE,OAAOG,KAAKk7F,EAAMh/F,KAAKy4C,WAAWnoC,OAAOiwF,EAAQA,EAAOV,WAChE,MAER,KAAK,GACSj4B,EAAQw3B,eAAiBx3B,EAAQw3B,cAAc1hG,SACjDkqE,EAAQw3B,cAAgB,IAC5Bx3B,EAAQw3B,cAAct7F,KAAKk7F,EAAMh/F,KAAKqgG,kBAAkB/vF,OAAOiwF,EAAQA,EAAOV,WAC9E,MAER,KAAK,GACSj4B,EAAQy3B,YAAcz3B,EAAQy3B,WAAW3hG,SAC3CkqE,EAAQy3B,WAAa,IACzBz3B,EAAQy3B,WAAWv7F,KAAKk7F,EAAMh/F,KAAKmgG,UAAU7vF,OAAOiwF,EAAQA,EAAOV,WACnE,MAER,QACIU,EAAOE,SAAe,EAANpN,GAGxB,CACA,OAAOzrB,CACX,EAYA3nE,EAAeygG,gBAAkB,SAAyBH,GAGtD,OAFMA,aAAkB7B,IACpB6B,EAAS,IAAI7B,EAAQ6B,IAClBxhG,KAAKuR,OAAOiwF,EAAQA,EAAOV,SACtC,EAUA5/F,EAAe0gG,OAAS,SAAgB/4B,GACpC,GAAuB,iBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAoB,MAAhBA,EAAQxoE,MAAgBwoE,EAAQzxC,eAAe,UAC1C2oE,EAAM8B,SAASh5B,EAAQxoE,MACxB,MAAO,wBACf,GAA2B,MAAvBwoE,EAAQ23B,aAAuB33B,EAAQzxC,eAAe,iBACjD2oE,EAAM8B,SAASh5B,EAAQ23B,aACxB,MAAO,+BACf,GAAyB,MAArB33B,EAAQve,WAAqBue,EAAQzxC,eAAe,eAC/C2oE,EAAM8B,SAASh5B,EAAQve,WACxB,MAAO,6BACf,GAAoB,MAAhBue,EAAQnnE,MAAgBmnE,EAAQzxC,eAAe,QAC/C,OAAQyxC,EAAQnnE,MAChB,QACI,MAAO,4BACX,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GACL,KAAK,GACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GACL,KAAK,GACL,KAAK,IAGT,GAAiB,MAAbmnE,EAAQzkE,GAAaykE,EAAQzxC,eAAe,MACnB,iBAAdyxC,EAAQzkE,EACf,MAAO,qBACf,GAAiB,MAAbykE,EAAQllE,GAAaklE,EAAQzxC,eAAe,QACvC2oE,EAAMxhG,UAAUsqE,EAAQllE,IAAQklE,EAAQllE,GAAKo8F,EAAMxhG,UAAUsqE,EAAQllE,EAAEqgE,MAAQ+7B,EAAMxhG,UAAUsqE,EAAQllE,EAAEsgE,OAC1G,MAAO,2BACf,GAAiB,MAAb4E,EAAQxkE,GAAawkE,EAAQzxC,eAAe,QACtCyxC,EAAQxkE,GAAiC,iBAArBwkE,EAAQxkE,EAAE1F,QAAuBohG,EAAM8B,SAASh5B,EAAQxkE,IAC9E,MAAO,qBACf,GAAiB,MAAbwkE,EAAQvkE,GAAaukE,EAAQzxC,eAAe,OACxCyM,EAAQo8D,EAAMh/F,KAAKs9D,YAAYqjC,OAAO/4B,EAAQvkE,IAE9C,MAAO,KAAOu/B,EAEtB,GAAiB,MAAbglC,EAAQtkE,GAAaskE,EAAQzxC,eAAe,OACxCyM,EAAQo8D,EAAMh/F,KAAKy4C,WAAWkoD,OAAO/4B,EAAQtkE,IAE7C,MAAO,KAAOs/B,EAEtB,GAA4B,MAAxBglC,EAAQ63B,cAAwB73B,EAAQzxC,eAAe,kBACnDyM,EAAQo8D,EAAMh/F,KAAKqgG,kBAAkBM,OAAO/4B,EAAQ63B,eAEpD,MAAO,gBAAkB78D,EAEjC,GAAkB,MAAdglC,EAAQ83B,IAAc93B,EAAQzxC,eAAe,QACzCyM,EAAQo8D,EAAMh/F,KAAKmgG,UAAUQ,OAAO/4B,EAAQ83B,KAE5C,MAAO,MAAQ98D,EAEvB,GAAsB,MAAlBglC,EAAQrkE,QAAkBqkE,EAAQzxC,eAAe,UAAW,CAC5D,IAAK1zB,MAAM+lC,QAAQo/B,EAAQrkE,QACvB,MAAO,yBACX,IAAK,IAAIb,EAAI,EAAGA,EAAIklE,EAAQrkE,OAAO7F,SAAUgF,EACzC,GAAiC,iBAAtBklE,EAAQrkE,OAAOb,GACtB,MAAO,2BACnB,CACA,GAAoB,MAAhBklE,EAAQpkE,MAAgBokE,EAAQzxC,eAAe,QAAS,CACxD,IAAK1zB,MAAM+lC,QAAQo/B,EAAQpkE,MACvB,MAAO,uBACX,IAASd,EAAI,EAAGA,EAAIklE,EAAQpkE,KAAK9F,SAAUgF,EACvC,KAAKo8F,EAAMxhG,UAAUsqE,EAAQpkE,KAAKd,KAASklE,EAAQpkE,KAAKd,IAAMo8F,EAAMxhG,UAAUsqE,EAAQpkE,KAAKd,GAAGqgE,MAAQ+7B,EAAMxhG,UAAUsqE,EAAQpkE,KAAKd,GAAGsgE,OAClI,MAAO,+BACnB,CACA,GAAuB,MAAnB4E,EAAQnkE,SAAmBmkE,EAAQzxC,eAAe,WAAY,CAC9D,IAAK1zB,MAAM+lC,QAAQo/B,EAAQnkE,SACvB,MAAO,0BACX,IAASf,EAAI,EAAGA,EAAIklE,EAAQnkE,QAAQ/F,SAAUgF,EAC1C,KAAMklE,EAAQnkE,QAAQf,IAA2C,iBAA9BklE,EAAQnkE,QAAQf,GAAGhF,QAAuBohG,EAAM8B,SAASh5B,EAAQnkE,QAAQf,KACxG,MAAO,4BACnB,CACA,GAAuB,MAAnBklE,EAAQlkE,SAAmBkkE,EAAQzxC,eAAe,WAAY,CAC9D,IAAK1zB,MAAM+lC,QAAQo/B,EAAQlkE,SACvB,MAAO,0BACX,IAAShB,EAAI,EAAGA,EAAIklE,EAAQlkE,QAAQhG,SAAUgF,EAE1C,GADIkgC,EAAQo8D,EAAMh/F,KAAKs9D,YAAYqjC,OAAO/4B,EAAQlkE,QAAQhB,IAEtD,MAAO,WAAakgC,CAEhC,CACA,GAAsB,MAAlBglC,EAAQjkE,QAAkBikE,EAAQzxC,eAAe,UAAW,CAC5D,IAAK1zB,MAAM+lC,QAAQo/B,EAAQjkE,QACvB,MAAO,yBACX,IAASjB,EAAI,EAAGA,EAAIklE,EAAQjkE,OAAOjG,SAAUgF,EAEzC,GADIkgC,EAAQo8D,EAAMh/F,KAAKy4C,WAAWkoD,OAAO/4B,EAAQjkE,OAAOjB,IAEpD,MAAO,UAAYkgC,CAE/B,CACA,GAA6B,MAAzBglC,EAAQw3B,eAAyBx3B,EAAQzxC,eAAe,iBAAkB,CAC1E,IAAK1zB,MAAM+lC,QAAQo/B,EAAQw3B,eACvB,MAAO,gCACX,IAAS18F,EAAI,EAAGA,EAAIklE,EAAQw3B,cAAc1hG,SAAUgF,EAEhD,GADIkgC,EAAQo8D,EAAMh/F,KAAKqgG,kBAAkBM,OAAO/4B,EAAQw3B,cAAc18F,IAElE,MAAO,iBAAmBkgC,CAEtC,CACA,GAA0B,MAAtBglC,EAAQy3B,YAAsBz3B,EAAQzxC,eAAe,cAAe,CACpE,IAAK1zB,MAAM+lC,QAAQo/B,EAAQy3B,YACvB,MAAO,6BACX,IAAS38F,EAAI,EAAGA,EAAIklE,EAAQy3B,WAAW3hG,SAAUgF,EAAG,CAChD,IAAIkgC,EACJ,GADIA,EAAQo8D,EAAMh/F,KAAKmgG,UAAUQ,OAAO/4B,EAAQy3B,WAAW38F,IAEvD,MAAO,cAAgBkgC,CAC/B,CACJ,CACA,OAAO,IACX,EAUA3iC,EAAe4gG,WAAa,SAAoBC,GAC5C,GAAIA,aAAkB9B,EAAMh/F,KAAKC,eAC7B,OAAO6gG,EACX,IAAIl5B,EAAU,IAAIo3B,EAAMh/F,KAAKC,eAO7B,OANmB,MAAf6gG,EAAO1hG,OACPwoE,EAAQxoE,KAAOkkF,OAAOwd,EAAO1hG,OACP,MAAtB0hG,EAAOvB,cACP33B,EAAQ23B,YAAcjc,OAAOwd,EAAOvB,cAChB,MAApBuB,EAAOz3C,YACPue,EAAQve,UAAYi6B,OAAOwd,EAAOz3C,YAC9By3C,EAAOrgG,MACf,QACI,GAA2B,iBAAhBqgG,EAAOrgG,KAAmB,CACjCmnE,EAAQnnE,KAAOqgG,EAAOrgG,KACtB,KACJ,CACA,MACJ,IAAK,YACL,KAAK,EACDmnE,EAAQnnE,KAAO,EACf,MACJ,IAAK,QACL,KAAK,EACDmnE,EAAQnnE,KAAO,EACf,MACJ,IAAK,MACL,KAAK,EACDmnE,EAAQnnE,KAAO,EACf,MACJ,IAAK,SACL,KAAK,EACDmnE,EAAQnnE,KAAO,EACf,MACJ,IAAK,SACL,KAAK,EACDmnE,EAAQnnE,KAAO,EACf,MACJ,IAAK,QACL,KAAK,EACDmnE,EAAQnnE,KAAO,EACf,MACJ,IAAK,gBACL,KAAK,GACDmnE,EAAQnnE,KAAO,GACf,MACJ,IAAK,aACL,KAAK,GACDmnE,EAAQnnE,KAAO,GACf,MACJ,IAAK,SACL,KAAK,EACDmnE,EAAQnnE,KAAO,EACf,MACJ,IAAK,OACL,KAAK,EACDmnE,EAAQnnE,KAAO,EACf,MACJ,IAAK,UACL,KAAK,EACDmnE,EAAQnnE,KAAO,EACf,MACJ,IAAK,UACL,KAAK,EACDmnE,EAAQnnE,KAAO,EACf,MACJ,IAAK,SACL,KAAK,GACDmnE,EAAQnnE,KAAO,GACf,MACJ,IAAK,iBACL,KAAK,GACDmnE,EAAQnnE,KAAO,GACf,MACJ,IAAK,cACL,KAAK,GACDmnE,EAAQnnE,KAAO,GAmBnB,GAhBgB,MAAZqgG,EAAO39F,IACPykE,EAAQzkE,EAAI9F,OAAOyjG,EAAO39F,IACd,MAAZ29F,EAAOp+F,IACHo8F,EAAMj8B,MACL+E,EAAQllE,EAAIo8F,EAAMj8B,KAAKC,UAAUg+B,EAAOp+F,IAAIkgE,UAAW,EAC/B,iBAAbk+B,EAAOp+F,EACnBklE,EAAQllE,EAAI6+C,SAASu/C,EAAOp+F,EAAG,IACN,iBAAbo+F,EAAOp+F,EACnBklE,EAAQllE,EAAIo+F,EAAOp+F,EACM,iBAAbo+F,EAAOp+F,IACnBklE,EAAQllE,EAAI,IAAIo8F,EAAMiC,SAASD,EAAOp+F,EAAEqgE,MAAQ,EAAG+9B,EAAOp+F,EAAEsgE,OAAS,GAAGpE,aAChE,MAAZkiC,EAAO19F,IACiB,iBAAb09F,EAAO19F,EACd07F,EAAMkC,OAAO1wF,OAAOwwF,EAAO19F,EAAGwkE,EAAQxkE,EAAI07F,EAAMU,UAAUV,EAAMkC,OAAOtjG,OAAOojG,EAAO19F,IAAK,GACrF09F,EAAO19F,EAAE1F,QAAU,IACxBkqE,EAAQxkE,EAAI09F,EAAO19F,IACX,MAAZ09F,EAAOz9F,EAAW,CAClB,GAAwB,iBAAby9F,EAAOz9F,EACd,MAAMqpB,UAAU,2CACpBk7C,EAAQvkE,EAAI27F,EAAMh/F,KAAKs9D,YAAYujC,WAAWC,EAAOz9F,EACzD,CACA,GAAgB,MAAZy9F,EAAOx9F,EAAW,CAClB,GAAwB,iBAAbw9F,EAAOx9F,EACd,MAAMopB,UAAU,2CACpBk7C,EAAQtkE,EAAI07F,EAAMh/F,KAAKy4C,WAAWooD,WAAWC,EAAOx9F,EACxD,CACA,GAA2B,MAAvBw9F,EAAOrB,aAAsB,CAC7B,GAAmC,iBAAxBqB,EAAOrB,aACd,MAAM/yE,UAAU,sDACpBk7C,EAAQ63B,aAAeT,EAAMh/F,KAAKqgG,kBAAkBQ,WAAWC,EAAOrB,aAC1E,CACA,GAAiB,MAAbqB,EAAOpB,GAAY,CACnB,GAAyB,iBAAdoB,EAAOpB,GACd,MAAMhzE,UAAU,4CACpBk7C,EAAQ83B,GAAKV,EAAMh/F,KAAKmgG,UAAUU,WAAWC,EAAOpB,GACxD,CACA,GAAIoB,EAAOv9F,OAAQ,CACf,IAAKd,MAAM+lC,QAAQs4D,EAAOv9F,QACtB,MAAMmpB,UAAU,+CACpBk7C,EAAQrkE,OAAS,GACjB,IAAK,IAAIb,EAAI,EAAGA,EAAIo+F,EAAOv9F,OAAO7F,SAAUgF,EACxCklE,EAAQrkE,OAAOb,GAAKrF,OAAOyjG,EAAOv9F,OAAOb,GACjD,CACA,GAAIo+F,EAAOt9F,KAAM,CACb,IAAKf,MAAM+lC,QAAQs4D,EAAOt9F,MACtB,MAAMkpB,UAAU,6CAEpB,IADAk7C,EAAQpkE,KAAO,GACNd,EAAI,EAAGA,EAAIo+F,EAAOt9F,KAAK9F,SAAUgF,EAClCo8F,EAAMj8B,MACL+E,EAAQpkE,KAAKd,GAAKo8F,EAAMj8B,KAAKC,UAAUg+B,EAAOt9F,KAAKd,KAAKkgE,UAAW,EACrC,iBAAnBk+B,EAAOt9F,KAAKd,GACxBklE,EAAQpkE,KAAKd,GAAK6+C,SAASu/C,EAAOt9F,KAAKd,GAAI,IACZ,iBAAnBo+F,EAAOt9F,KAAKd,GACxBklE,EAAQpkE,KAAKd,GAAKo+F,EAAOt9F,KAAKd,GACC,iBAAnBo+F,EAAOt9F,KAAKd,KACxBklE,EAAQpkE,KAAKd,GAAK,IAAIo8F,EAAMiC,SAASD,EAAOt9F,KAAKd,GAAGqgE,MAAQ,EAAG+9B,EAAOt9F,KAAKd,GAAGsgE,OAAS,GAAGpE,WACtG,CACA,GAAIkiC,EAAOr9F,QAAS,CAChB,IAAKhB,MAAM+lC,QAAQs4D,EAAOr9F,SACtB,MAAMipB,UAAU,gDAEpB,IADAk7C,EAAQnkE,QAAU,GACTf,EAAI,EAAGA,EAAIo+F,EAAOr9F,QAAQ/F,SAAUgF,EACR,iBAAtBo+F,EAAOr9F,QAAQf,GACtBo8F,EAAMkC,OAAO1wF,OAAOwwF,EAAOr9F,QAAQf,GAAIklE,EAAQnkE,QAAQf,GAAKo8F,EAAMU,UAAUV,EAAMkC,OAAOtjG,OAAOojG,EAAOr9F,QAAQf,KAAM,GAChHo+F,EAAOr9F,QAAQf,GAAGhF,QAAU,IACjCkqE,EAAQnkE,QAAQf,GAAKo+F,EAAOr9F,QAAQf,GAChD,CACA,GAAIo+F,EAAOp9F,QAAS,CAChB,IAAKjB,MAAM+lC,QAAQs4D,EAAOp9F,SACtB,MAAMgpB,UAAU,gDAEpB,IADAk7C,EAAQlkE,QAAU,GACThB,EAAI,EAAGA,EAAIo+F,EAAOp9F,QAAQhG,SAAUgF,EAAG,CAC5C,GAAiC,iBAAtBo+F,EAAOp9F,QAAQhB,GACtB,MAAMgqB,UAAU,iDACpBk7C,EAAQlkE,QAAQhB,GAAKs8F,EAAMh/F,KAAKs9D,YAAYujC,WAAWC,EAAOp9F,QAAQhB,GAC1E,CACJ,CACA,GAAIo+F,EAAOn9F,OAAQ,CACf,IAAKlB,MAAM+lC,QAAQs4D,EAAOn9F,QACtB,MAAM+oB,UAAU,+CAEpB,IADAk7C,EAAQjkE,OAAS,GACRjB,EAAI,EAAGA,EAAIo+F,EAAOn9F,OAAOjG,SAAUgF,EAAG,CAC3C,GAAgC,iBAArBo+F,EAAOn9F,OAAOjB,GACrB,MAAMgqB,UAAU,gDACpBk7C,EAAQjkE,OAAOjB,GAAKs8F,EAAMh/F,KAAKy4C,WAAWooD,WAAWC,EAAOn9F,OAAOjB,GACvE,CACJ,CACA,GAAIo+F,EAAO1B,cAAe,CACtB,IAAK38F,MAAM+lC,QAAQs4D,EAAO1B,eACtB,MAAM1yE,UAAU,sDAEpB,IADAk7C,EAAQw3B,cAAgB,GACf18F,EAAI,EAAGA,EAAIo+F,EAAO1B,cAAc1hG,SAAUgF,EAAG,CAClD,GAAuC,iBAA5Bo+F,EAAO1B,cAAc18F,GAC5B,MAAMgqB,UAAU,uDACpBk7C,EAAQw3B,cAAc18F,GAAKs8F,EAAMh/F,KAAKqgG,kBAAkBQ,WAAWC,EAAO1B,cAAc18F,GAC5F,CACJ,CACA,GAAIo+F,EAAOzB,WAAY,CACnB,IAAK58F,MAAM+lC,QAAQs4D,EAAOzB,YACtB,MAAM3yE,UAAU,mDAEpB,IADAk7C,EAAQy3B,WAAa,GACZ38F,EAAI,EAAGA,EAAIo+F,EAAOzB,WAAW3hG,SAAUgF,EAAG,CAC/C,GAAoC,iBAAzBo+F,EAAOzB,WAAW38F,GACzB,MAAMgqB,UAAU,oDACpBk7C,EAAQy3B,WAAW38F,GAAKs8F,EAAMh/F,KAAKmgG,UAAUU,WAAWC,EAAOzB,WAAW38F,GAC9E,CACJ,CACA,OAAOklE,CACX,EAWA3nE,EAAeghG,SAAW,SAAkBr5B,EAASrrE,GAC5CA,IACDA,EAAU,CAAC,GACf,IAAIukG,EAAS,CAAC,EAUd,IATIvkG,EAAQ2kG,QAAU3kG,EAAQ4kG,YAC1BL,EAAOv9F,OAAS,GAChBu9F,EAAOt9F,KAAO,GACds9F,EAAOr9F,QAAU,GACjBq9F,EAAOp9F,QAAU,GACjBo9F,EAAOn9F,OAAS,GAChBm9F,EAAOzB,WAAa,GACpByB,EAAO1B,cAAgB,IAEvB7iG,EAAQ4kG,SAAU,CAGlB,GAFAL,EAAO1hG,KAAO,GACd0hG,EAAO39F,EAAI,EACP27F,EAAMj8B,KAAM,CACZ,IAAIu+B,EAAO,IAAItC,EAAMj8B,KAAK,EAAG,GAAG,GAChCi+B,EAAOp+F,EAAInG,EAAQ8kG,QAAU/d,OAAS8d,EAAK7wD,WAAah0C,EAAQ8kG,QAAUhkG,OAAS+jG,EAAKxiC,WAAawiC,CACzG,MACIN,EAAOp+F,EAAInG,EAAQ8kG,QAAU/d,OAAS,IAAM,EAC5C/mF,EAAQqtD,QAAU05B,OAClBwd,EAAO19F,EAAI,IAEX09F,EAAO19F,EAAI,GACP7G,EAAQqtD,QAAUnnD,QAClBq+F,EAAO19F,EAAI07F,EAAMU,UAAUsB,EAAO19F,KAE1C09F,EAAOz9F,EAAI,KACXy9F,EAAOx9F,EAAI,KACXw9F,EAAOz3C,UAAY,GACnBy3C,EAAOpB,GAAK,KACZoB,EAAOrgG,KAAOlE,EAAQ+kG,QAAUhe,OAAS,YAAc,EACvDwd,EAAOvB,YAAc,GACrBuB,EAAOrB,aAAe,IAC1B,CAgBA,GAfoB,MAAhB73B,EAAQxoE,MAAgBwoE,EAAQzxC,eAAe,UAC/C2qE,EAAO1hG,KAAOwoE,EAAQxoE,MACT,MAAbwoE,EAAQzkE,GAAaykE,EAAQzxC,eAAe,OAC5C2qE,EAAO39F,EAAI5G,EAAQglG,OAASC,SAAS55B,EAAQzkE,GAAKmgF,OAAO1b,EAAQzkE,GAAKykE,EAAQzkE,GACjE,MAAbykE,EAAQllE,GAAaklE,EAAQzxC,eAAe,OACnB,iBAAdyxC,EAAQllE,EACfo+F,EAAOp+F,EAAInG,EAAQ8kG,QAAU/d,OAASA,OAAO1b,EAAQllE,GAAKklE,EAAQllE,EAElEo+F,EAAOp+F,EAAInG,EAAQ8kG,QAAU/d,OAASwb,EAAMj8B,KAAKy8B,UAAU/uD,SAASna,KAAKwxC,EAAQllE,GAAKnG,EAAQ8kG,QAAUhkG,OAAS,IAAIyhG,EAAMiC,SAASn5B,EAAQllE,EAAEqgE,MAAQ,EAAG6E,EAAQllE,EAAEsgE,OAAS,GAAGpE,WAAagJ,EAAQllE,GAC3L,MAAbklE,EAAQxkE,GAAawkE,EAAQzxC,eAAe,OAC5C2qE,EAAO19F,EAAI7G,EAAQqtD,QAAU05B,OAASwb,EAAMkC,OAAO3wF,OAAOu3D,EAAQxkE,EAAG,EAAGwkE,EAAQxkE,EAAE1F,QAAUnB,EAAQqtD,QAAUnnD,MAAQA,MAAM68F,UAAUxyF,MAAMspB,KAAKwxC,EAAQxkE,GAAKwkE,EAAQxkE,GACzJ,MAAbwkE,EAAQvkE,GAAaukE,EAAQzxC,eAAe,OAC5C2qE,EAAOz9F,EAAI27F,EAAMh/F,KAAKs9D,YAAY2jC,SAASr5B,EAAQvkE,EAAG9G,IACzC,MAAbqrE,EAAQtkE,GAAaskE,EAAQzxC,eAAe,OAC5C2qE,EAAOx9F,EAAI07F,EAAMh/F,KAAKy4C,WAAWwoD,SAASr5B,EAAQtkE,EAAG/G,IACrDqrE,EAAQrkE,QAAUqkE,EAAQrkE,OAAO7F,OAAQ,CACzCojG,EAAOv9F,OAAS,GAChB,IAAK,IAAIg7B,EAAI,EAAGA,EAAIqpC,EAAQrkE,OAAO7F,SAAU6gC,EACzCuiE,EAAOv9F,OAAOg7B,GAAKhiC,EAAQglG,OAASC,SAAS55B,EAAQrkE,OAAOg7B,IAAM+kD,OAAO1b,EAAQrkE,OAAOg7B,IAAMqpC,EAAQrkE,OAAOg7B,EACrH,CACA,GAAIqpC,EAAQpkE,MAAQokE,EAAQpkE,KAAK9F,OAE7B,IADAojG,EAAOt9F,KAAO,GACL+6B,EAAI,EAAGA,EAAIqpC,EAAQpkE,KAAK9F,SAAU6gC,EACR,iBAApBqpC,EAAQpkE,KAAK+6B,GACpBuiE,EAAOt9F,KAAK+6B,GAAKhiC,EAAQ8kG,QAAU/d,OAASA,OAAO1b,EAAQpkE,KAAK+6B,IAAMqpC,EAAQpkE,KAAK+6B,GAEnFuiE,EAAOt9F,KAAK+6B,GAAKhiC,EAAQ8kG,QAAU/d,OAASwb,EAAMj8B,KAAKy8B,UAAU/uD,SAASna,KAAKwxC,EAAQpkE,KAAK+6B,IAAMhiC,EAAQ8kG,QAAUhkG,OAAS,IAAIyhG,EAAMiC,SAASn5B,EAAQpkE,KAAK+6B,GAAGwkC,MAAQ,EAAG6E,EAAQpkE,KAAK+6B,GAAGykC,OAAS,GAAGpE,WAAagJ,EAAQpkE,KAAK+6B,GAE7O,GAAIqpC,EAAQnkE,SAAWmkE,EAAQnkE,QAAQ/F,OAEnC,IADAojG,EAAOr9F,QAAU,GACR86B,EAAI,EAAGA,EAAIqpC,EAAQnkE,QAAQ/F,SAAU6gC,EAC1CuiE,EAAOr9F,QAAQ86B,GAAKhiC,EAAQqtD,QAAU05B,OAASwb,EAAMkC,OAAO3wF,OAAOu3D,EAAQnkE,QAAQ86B,GAAI,EAAGqpC,EAAQnkE,QAAQ86B,GAAG7gC,QAAUnB,EAAQqtD,QAAUnnD,MAAQA,MAAM68F,UAAUxyF,MAAMspB,KAAKwxC,EAAQnkE,QAAQ86B,IAAMqpC,EAAQnkE,QAAQ86B,GAE1N,GAAIqpC,EAAQlkE,SAAWkkE,EAAQlkE,QAAQhG,OAEnC,IADAojG,EAAOp9F,QAAU,GACR66B,EAAI,EAAGA,EAAIqpC,EAAQlkE,QAAQhG,SAAU6gC,EAC1CuiE,EAAOp9F,QAAQ66B,GAAKygE,EAAMh/F,KAAKs9D,YAAY2jC,SAASr5B,EAAQlkE,QAAQ66B,GAAIhiC,GAEhF,GAAIqrE,EAAQjkE,QAAUikE,EAAQjkE,OAAOjG,OAEjC,IADAojG,EAAOn9F,OAAS,GACP46B,EAAI,EAAGA,EAAIqpC,EAAQjkE,OAAOjG,SAAU6gC,EACzCuiE,EAAOn9F,OAAO46B,GAAKygE,EAAMh/F,KAAKy4C,WAAWwoD,SAASr5B,EAAQjkE,OAAO46B,GAAIhiC,GAM7E,GAJyB,MAArBqrE,EAAQve,WAAqBue,EAAQzxC,eAAe,eACpD2qE,EAAOz3C,UAAYue,EAAQve,WACb,MAAdue,EAAQ83B,IAAc93B,EAAQzxC,eAAe,QAC7C2qE,EAAOpB,GAAKV,EAAMh/F,KAAKmgG,UAAUc,SAASr5B,EAAQ83B,GAAInjG,IACtDqrE,EAAQy3B,YAAcz3B,EAAQy3B,WAAW3hG,OAEzC,IADAojG,EAAOzB,WAAa,GACX9gE,EAAI,EAAGA,EAAIqpC,EAAQy3B,WAAW3hG,SAAU6gC,EAC7CuiE,EAAOzB,WAAW9gE,GAAKygE,EAAMh/F,KAAKmgG,UAAUc,SAASr5B,EAAQy3B,WAAW9gE,GAAIhiC,GAQpF,GANoB,MAAhBqrE,EAAQnnE,MAAgBmnE,EAAQzxC,eAAe,UAC/C2qE,EAAOrgG,KAAOlE,EAAQ+kG,QAAUhe,YAAmEhiF,IAA1D09F,EAAMh/F,KAAKC,eAAesB,cAAcqmE,EAAQnnE,MAAsBmnE,EAAQnnE,KAAOu+F,EAAMh/F,KAAKC,eAAesB,cAAcqmE,EAAQnnE,MAAQmnE,EAAQnnE,MACvK,MAAvBmnE,EAAQ23B,aAAuB33B,EAAQzxC,eAAe,iBACtD2qE,EAAOvB,YAAc33B,EAAQ23B,aACL,MAAxB33B,EAAQ63B,cAAwB73B,EAAQzxC,eAAe,kBACvD2qE,EAAOrB,aAAeT,EAAMh/F,KAAKqgG,kBAAkBY,SAASr5B,EAAQ63B,aAAcljG,IAClFqrE,EAAQw3B,eAAiBx3B,EAAQw3B,cAAc1hG,OAE/C,IADAojG,EAAO1B,cAAgB,GACd7gE,EAAI,EAAGA,EAAIqpC,EAAQw3B,cAAc1hG,SAAU6gC,EAChDuiE,EAAO1B,cAAc7gE,GAAKygE,EAAMh/F,KAAKqgG,kBAAkBY,SAASr5B,EAAQw3B,cAAc7gE,GAAIhiC,GAElG,OAAOukG,CACX,EASA7gG,EAAeq/F,UAAUmC,OAAS,WAC9B,OAAO1iG,KAAK+nC,YAAYm6D,SAASliG,KAAM0/F,EAAUM,KAAK2C,cAC1D,EAUAzhG,EAAe0hG,WAAa,SAAoBC,GAI5C,YAHsBtgG,IAAlBsgG,IACAA,EAAgB,uBAEbA,EAAgB,sBAC3B,EAsBA3hG,EAAesB,cAAgB,WAC3B,IAAIi9F,EAAa,CAAC,EAAGjvC,EAAShxD,OAAOmgD,OAAO8/C,GAgB5C,OAfAjvC,EAAOivC,EAAW,GAAK,aAAe,EACtCjvC,EAAOivC,EAAW,GAAK,SAAW,EAClCjvC,EAAOivC,EAAW,GAAK,OAAS,EAChCjvC,EAAOivC,EAAW,GAAK,UAAY,EACnCjvC,EAAOivC,EAAW,GAAK,UAAY,EACnCjvC,EAAOivC,EAAW,GAAK,SAAW,EAClCjvC,EAAOivC,EAAW,IAAM,iBAAmB,GAC3CjvC,EAAOivC,EAAW,IAAM,cAAgB,GACxCjvC,EAAOivC,EAAW,GAAK,UAAY,EACnCjvC,EAAOivC,EAAW,GAAK,QAAU,EACjCjvC,EAAOivC,EAAW,GAAK,WAAa,EACpCjvC,EAAOivC,EAAW,GAAK,WAAa,EACpCjvC,EAAOivC,EAAW,IAAM,UAAY,GACpCjvC,EAAOivC,EAAW,IAAM,kBAAoB,GAC5CjvC,EAAOivC,EAAW,IAAM,eAAiB,GAClCjvC,CACV,CAlB8B,GAoBxBtvD,CACV,CA35BqB,GA65BtBD,EAAK6hG,eAAiB,WAmBlB,SAASA,EAAe1C,GACpB,GAAIA,EACA,IAAK,IAAI1sF,EAAOlU,OAAOkU,KAAK0sF,GAAaz8F,EAAI,EAAGA,EAAI+P,EAAK/U,SAAUgF,EACpC,MAAvBy8F,EAAW1sF,EAAK/P,MAChB3D,KAAK0T,EAAK/P,IAAMy8F,EAAW1sF,EAAK/P,IAChD,CAoOA,OA5NAm/F,EAAevC,UAAUlgG,KAAO,GAQhCyiG,EAAevC,UAAU7+F,KAAO,KAQhCohG,EAAevC,UAAUj2C,UAAY,GAUrCw4C,EAAenjD,OAAS,SAAgBygD,GACpC,OAAO,IAAI0C,EAAe1C,EAC9B,EAWA0C,EAAexxF,OAAS,SAAgBu3D,EAASg4B,GAS7C,OARKA,IACDA,EAAShB,EAAQlgD,UACD,MAAhBkpB,EAAQxoE,MAAgBb,OAAO43B,eAAeC,KAAKwxC,EAAS,SAC5Dg4B,EAAOC,OAA8B,IAAIC,OAAOl4B,EAAQxoE,MACxC,MAAhBwoE,EAAQnnE,MAAgBlC,OAAO43B,eAAeC,KAAKwxC,EAAS,SAC5Do3B,EAAMh/F,KAAKmgG,UAAU9vF,OAAOu3D,EAAQnnE,KAAMm/F,EAAOC,OAA8B,IAAII,QAAQC,SACtE,MAArBt4B,EAAQve,WAAqB9qD,OAAO43B,eAAeC,KAAKwxC,EAAS,cACjEg4B,EAAOC,OAA8B,IAAIC,OAAOl4B,EAAQve,WACrDu2C,CACX,EAWAiC,EAAevB,gBAAkB,SAAyB14B,EAASg4B,GAC/D,OAAO7gG,KAAKsR,OAAOu3D,EAASg4B,GAAQM,QACxC,EAaA2B,EAAevxF,OAAS,SAAgBiwF,EAAQ7iG,GACtC6iG,aAAkB7B,IACpB6B,EAAS7B,EAAQhgD,OAAO6hD,IAE5B,IADA,IAAIhlE,OAAiBj6B,IAAX5D,EAAuB6iG,EAAO/1D,IAAM+1D,EAAOv7B,IAAMtnE,EAAQkqE,EAAU,IAAIo3B,EAAMh/F,KAAK6hG,eACrFtB,EAAOv7B,IAAMzpC,GAAK,CACrB,IAAI83D,EAAMkN,EAAOV,SACjB,OAAQxM,IAAQ,GAChB,KAAK,EACGzrB,EAAQxoE,KAAOmhG,EAAOT,SACtB,MAER,KAAK,EACGl4B,EAAQnnE,KAAOu+F,EAAMh/F,KAAKmgG,UAAU7vF,OAAOiwF,EAAQA,EAAOV,UAC1D,MAER,KAAK,EACGj4B,EAAQve,UAAYk3C,EAAOT,SAC3B,MAER,QACIS,EAAOE,SAAe,EAANpN,GAGxB,CACA,OAAOzrB,CACX,EAYAi6B,EAAenB,gBAAkB,SAAyBH,GAGtD,OAFMA,aAAkB7B,IACpB6B,EAAS,IAAI7B,EAAQ6B,IAClBxhG,KAAKuR,OAAOiwF,EAAQA,EAAOV,SACtC,EAUAgC,EAAelB,OAAS,SAAgB/4B,GACpC,GAAuB,iBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAoB,MAAhBA,EAAQxoE,MAAgBwoE,EAAQzxC,eAAe,UAC1C2oE,EAAM8B,SAASh5B,EAAQxoE,MACxB,MAAO,wBACf,GAAoB,MAAhBwoE,EAAQnnE,MAAgBmnE,EAAQzxC,eAAe,QAAS,CACxD,IAAIyM,EAAQo8D,EAAMh/F,KAAKmgG,UAAUQ,OAAO/4B,EAAQnnE,MAChD,GAAImiC,EACA,MAAO,QAAUA,CACzB,CACA,OAAyB,MAArBglC,EAAQve,WAAqBue,EAAQzxC,eAAe,eAC/C2oE,EAAM8B,SAASh5B,EAAQve,WACjB,6BACR,IACX,EAUAw4C,EAAehB,WAAa,SAAoBC,GAC5C,GAAIA,aAAkB9B,EAAMh/F,KAAK6hG,eAC7B,OAAOf,EACX,IAAIl5B,EAAU,IAAIo3B,EAAMh/F,KAAK6hG,eAG7B,GAFmB,MAAff,EAAO1hG,OACPwoE,EAAQxoE,KAAOkkF,OAAOwd,EAAO1hG,OACd,MAAf0hG,EAAOrgG,KAAc,CACrB,GAA2B,iBAAhBqgG,EAAOrgG,KACd,MAAMisB,UAAU,8CACpBk7C,EAAQnnE,KAAOu+F,EAAMh/F,KAAKmgG,UAAUU,WAAWC,EAAOrgG,KAC1D,CAGA,OAFwB,MAApBqgG,EAAOz3C,YACPue,EAAQve,UAAYi6B,OAAOwd,EAAOz3C,YAC/Bue,CACX,EAWAi6B,EAAeZ,SAAW,SAAkBr5B,EAASrrE,GAC5CA,IACDA,EAAU,CAAC,GACf,IAAIukG,EAAS,CAAC,EAYd,OAXIvkG,EAAQ4kG,WACRL,EAAO1hG,KAAO,GACd0hG,EAAOrgG,KAAO,KACdqgG,EAAOz3C,UAAY,IAEH,MAAhBue,EAAQxoE,MAAgBwoE,EAAQzxC,eAAe,UAC/C2qE,EAAO1hG,KAAOwoE,EAAQxoE,MACN,MAAhBwoE,EAAQnnE,MAAgBmnE,EAAQzxC,eAAe,UAC/C2qE,EAAOrgG,KAAOu+F,EAAMh/F,KAAKmgG,UAAUc,SAASr5B,EAAQnnE,KAAMlE,IACrC,MAArBqrE,EAAQve,WAAqBue,EAAQzxC,eAAe,eACpD2qE,EAAOz3C,UAAYue,EAAQve,WACxBy3C,CACX,EASAe,EAAevC,UAAUmC,OAAS,WAC9B,OAAO1iG,KAAK+nC,YAAYm6D,SAASliG,KAAM0/F,EAAUM,KAAK2C,cAC1D,EAUAG,EAAeF,WAAa,SAAoBC,GAI5C,YAHsBtgG,IAAlBsgG,IACAA,EAAgB,uBAEbA,EAAgB,sBAC3B,EAEOC,CACV,CA7PqB,GA+PtB7hG,EAAKw3C,UAAY,WAuBb,SAASA,EAAU2nD,GAIf,GAHApgG,KAAKua,MAAQ,GACbva,KAAK+I,OAAS,GACd/I,KAAKF,UAAY,GACbsgG,EACA,IAAK,IAAI1sF,EAAOlU,OAAOkU,KAAK0sF,GAAaz8F,EAAI,EAAGA,EAAI+P,EAAK/U,SAAUgF,EACpC,MAAvBy8F,EAAW1sF,EAAK/P,MAChB3D,KAAK0T,EAAK/P,IAAMy8F,EAAW1sF,EAAK/P,IAChD,CA2WA,OAnWA80C,EAAU8nD,UAAUhmF,MAAQwlF,EAAMa,WAQlCnoD,EAAU8nD,UAAUx3F,OAASg3F,EAAMa,WAQnCnoD,EAAU8nD,UAAUlgG,KAAO,GAQ3Bo4C,EAAU8nD,UAAU7nD,OAAS,GAQ7BD,EAAU8nD,UAAUh/C,OAAS,GAQ7B9I,EAAU8nD,UAAUzgG,UAAYigG,EAAMa,WAQtCnoD,EAAU8nD,UAAUj2C,UAAY,GAUhC7R,EAAUkH,OAAS,SAAgBygD,GAC/B,OAAO,IAAI3nD,EAAU2nD,EACzB,EAWA3nD,EAAUnnC,OAAS,SAAgBu3D,EAASg4B,GAGxC,GAFKA,IACDA,EAAShB,EAAQlgD,UACA,MAAjBkpB,EAAQtuD,OAAiBsuD,EAAQtuD,MAAM5b,OACvC,IAAK,IAAIgF,EAAI,EAAGA,EAAIklE,EAAQtuD,MAAM5b,SAAUgF,EACxCk9F,EAAOC,OAA8B,IAAIC,OAAOl4B,EAAQtuD,MAAM5W,IACtE,GAAsB,MAAlBklE,EAAQ9/D,QAAkB8/D,EAAQ9/D,OAAOpK,OACzC,IAASgF,EAAI,EAAGA,EAAIklE,EAAQ9/D,OAAOpK,SAAUgF,EACzCk9F,EAAOC,OAA8B,IAAIC,OAAOl4B,EAAQ9/D,OAAOpF,IAKvE,GAJoB,MAAhBklE,EAAQxoE,MAAgBb,OAAO43B,eAAeC,KAAKwxC,EAAS,SAC5Dg4B,EAAOC,OAA8B,IAAIC,OAAOl4B,EAAQxoE,MACtC,MAAlBwoE,EAAQnwB,QAAkBl5C,OAAO43B,eAAeC,KAAKwxC,EAAS,WAC9Dg4B,EAAOC,OAA8B,IAAIC,OAAOl4B,EAAQnwB,QACnC,MAArBmwB,EAAQ/oE,WAAqB+oE,EAAQ/oE,UAAUnB,OAC/C,IAASgF,EAAI,EAAGA,EAAIklE,EAAQ/oE,UAAUnB,SAAUgF,EAC5Cs8F,EAAMh/F,KAAKC,eAAeoQ,OAAOu3D,EAAQ/oE,UAAU6D,GAAIk9F,EAAOC,OAA8B,IAAII,QAAQC,SAKhH,OAJyB,MAArBt4B,EAAQve,WAAqB9qD,OAAO43B,eAAeC,KAAKwxC,EAAS,cACjEg4B,EAAOC,OAA8B,IAAIC,OAAOl4B,EAAQve,WACtC,MAAlBue,EAAQtnB,QAAkB/hD,OAAO43B,eAAeC,KAAKwxC,EAAS,WAC9Dg4B,EAAOC,OAA8B,IAAIC,OAAOl4B,EAAQtnB,QACrDs/C,CACX,EAWApoD,EAAU8oD,gBAAkB,SAAyB14B,EAASg4B,GAC1D,OAAO7gG,KAAKsR,OAAOu3D,EAASg4B,GAAQM,QACxC,EAaA1oD,EAAUlnC,OAAS,SAAgBiwF,EAAQ7iG,GACjC6iG,aAAkB7B,IACpB6B,EAAS7B,EAAQhgD,OAAO6hD,IAE5B,IADA,IAAIhlE,OAAiBj6B,IAAX5D,EAAuB6iG,EAAO/1D,IAAM+1D,EAAOv7B,IAAMtnE,EAAQkqE,EAAU,IAAIo3B,EAAMh/F,KAAKw3C,UACrF+oD,EAAOv7B,IAAMzpC,GAAK,CACrB,IAAI83D,EAAMkN,EAAOV,SACjB,OAAQxM,IAAQ,GAChB,KAAK,EACSzrB,EAAQtuD,OAASsuD,EAAQtuD,MAAM5b,SACjCkqE,EAAQtuD,MAAQ,IACpBsuD,EAAQtuD,MAAMxV,KAAKy8F,EAAOT,UAC1B,MAER,KAAK,EACSl4B,EAAQ9/D,QAAU8/D,EAAQ9/D,OAAOpK,SACnCkqE,EAAQ9/D,OAAS,IACrB8/D,EAAQ9/D,OAAOhE,KAAKy8F,EAAOT,UAC3B,MAER,KAAK,EACGl4B,EAAQxoE,KAAOmhG,EAAOT,SACtB,MAER,KAAK,EACGl4B,EAAQnwB,OAAS8oD,EAAOT,SACxB,MAER,KAAK,EACGl4B,EAAQtnB,OAASigD,EAAOT,SACxB,MAER,KAAK,EACSl4B,EAAQ/oE,WAAa+oE,EAAQ/oE,UAAUnB,SACzCkqE,EAAQ/oE,UAAY,IACxB+oE,EAAQ/oE,UAAUiF,KAAKk7F,EAAMh/F,KAAKC,eAAeqQ,OAAOiwF,EAAQA,EAAOV,WACvE,MAER,KAAK,EACGj4B,EAAQve,UAAYk3C,EAAOT,SAC3B,MAER,QACIS,EAAOE,SAAe,EAANpN,GAGxB,CACA,OAAOzrB,CACX,EAYApwB,EAAUkpD,gBAAkB,SAAyBH,GAGjD,OAFMA,aAAkB7B,IACpB6B,EAAS,IAAI7B,EAAQ6B,IAClBxhG,KAAKuR,OAAOiwF,EAAQA,EAAOV,SACtC,EAUAroD,EAAUmpD,OAAS,SAAgB/4B,GAC/B,GAAuB,iBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAqB,MAAjBA,EAAQtuD,OAAiBsuD,EAAQzxC,eAAe,SAAU,CAC1D,IAAK1zB,MAAM+lC,QAAQo/B,EAAQtuD,OACvB,MAAO,wBACX,IAAK,IAAI5W,EAAI,EAAGA,EAAIklE,EAAQtuD,MAAM5b,SAAUgF,EACxC,IAAKo8F,EAAM8B,SAASh5B,EAAQtuD,MAAM5W,IAC9B,MAAO,0BACnB,CACA,GAAsB,MAAlBklE,EAAQ9/D,QAAkB8/D,EAAQzxC,eAAe,UAAW,CAC5D,IAAK1zB,MAAM+lC,QAAQo/B,EAAQ9/D,QACvB,MAAO,yBACX,IAASpF,EAAI,EAAGA,EAAIklE,EAAQ9/D,OAAOpK,SAAUgF,EACzC,IAAKo8F,EAAM8B,SAASh5B,EAAQ9/D,OAAOpF,IAC/B,MAAO,2BACnB,CACA,GAAoB,MAAhBklE,EAAQxoE,MAAgBwoE,EAAQzxC,eAAe,UAC1C2oE,EAAM8B,SAASh5B,EAAQxoE,MACxB,MAAO,wBACf,GAAsB,MAAlBwoE,EAAQnwB,QAAkBmwB,EAAQzxC,eAAe,YAC5C2oE,EAAM8B,SAASh5B,EAAQnwB,QACxB,MAAO,0BACf,GAAsB,MAAlBmwB,EAAQtnB,QAAkBsnB,EAAQzxC,eAAe,YAC5C2oE,EAAM8B,SAASh5B,EAAQtnB,QACxB,MAAO,0BACf,GAAyB,MAArBsnB,EAAQ/oE,WAAqB+oE,EAAQzxC,eAAe,aAAc,CAClE,IAAK1zB,MAAM+lC,QAAQo/B,EAAQ/oE,WACvB,MAAO,4BACX,IAAS6D,EAAI,EAAGA,EAAIklE,EAAQ/oE,UAAUnB,SAAUgF,EAAG,CAC/C,IAAIkgC,EAAQo8D,EAAMh/F,KAAKC,eAAe0gG,OAAO/4B,EAAQ/oE,UAAU6D,IAC/D,GAAIkgC,EACA,MAAO,aAAeA,CAC9B,CACJ,CACA,OAAyB,MAArBglC,EAAQve,WAAqBue,EAAQzxC,eAAe,eAC/C2oE,EAAM8B,SAASh5B,EAAQve,WACjB,6BACR,IACX,EAUA7R,EAAUqpD,WAAa,SAAoBC,GACvC,GAAIA,aAAkB9B,EAAMh/F,KAAKw3C,UAC7B,OAAOspD,EACX,IAAIl5B,EAAU,IAAIo3B,EAAMh/F,KAAKw3C,UAC7B,GAAIspD,EAAOxnF,MAAO,CACd,IAAK7W,MAAM+lC,QAAQs4D,EAAOxnF,OACtB,MAAMoT,UAAU,yCACpBk7C,EAAQtuD,MAAQ,GAChB,IAAK,IAAI5W,EAAI,EAAGA,EAAIo+F,EAAOxnF,MAAM5b,SAAUgF,EACvCklE,EAAQtuD,MAAM5W,GAAK4gF,OAAOwd,EAAOxnF,MAAM5W,GAC/C,CACA,GAAIo+F,EAAOh5F,OAAQ,CACf,IAAKrF,MAAM+lC,QAAQs4D,EAAOh5F,QACtB,MAAM4kB,UAAU,0CAEpB,IADAk7C,EAAQ9/D,OAAS,GACRpF,EAAI,EAAGA,EAAIo+F,EAAOh5F,OAAOpK,SAAUgF,EACxCklE,EAAQ9/D,OAAOpF,GAAK4gF,OAAOwd,EAAOh5F,OAAOpF,GACjD,CAOA,GANmB,MAAfo+F,EAAO1hG,OACPwoE,EAAQxoE,KAAOkkF,OAAOwd,EAAO1hG,OACZ,MAAjB0hG,EAAOrpD,SACPmwB,EAAQnwB,OAAS6rC,OAAOwd,EAAOrpD,SACd,MAAjBqpD,EAAOxgD,SACPsnB,EAAQtnB,OAASgjC,OAAOwd,EAAOxgD,SAC/BwgD,EAAOjiG,UAAW,CAClB,IAAK4D,MAAM+lC,QAAQs4D,EAAOjiG,WACtB,MAAM6tB,UAAU,6CAEpB,IADAk7C,EAAQ/oE,UAAY,GACX6D,EAAI,EAAGA,EAAIo+F,EAAOjiG,UAAUnB,SAAUgF,EAAG,CAC9C,GAAmC,iBAAxBo+F,EAAOjiG,UAAU6D,GACxB,MAAMgqB,UAAU,8CACpBk7C,EAAQ/oE,UAAU6D,GAAKs8F,EAAMh/F,KAAKC,eAAe4gG,WAAWC,EAAOjiG,UAAU6D,GACjF,CACJ,CAGA,OAFwB,MAApBo+F,EAAOz3C,YACPue,EAAQve,UAAYi6B,OAAOwd,EAAOz3C,YAC/Bue,CACX,EAWApwB,EAAUypD,SAAW,SAAkBr5B,EAASrrE,GACvCA,IACDA,EAAU,CAAC,GACf,IAAIukG,EAAS,CAAC,EAYd,IAXIvkG,EAAQ2kG,QAAU3kG,EAAQ4kG,YAC1BL,EAAOxnF,MAAQ,GACfwnF,EAAOh5F,OAAS,GAChBg5F,EAAOjiG,UAAY,IAEnBtC,EAAQ4kG,WACRL,EAAO1hG,KAAO,GACd0hG,EAAOrpD,OAAS,GAChBqpD,EAAOz3C,UAAY,GACnBy3C,EAAOxgD,OAAS,IAEhBsnB,EAAQtuD,OAASsuD,EAAQtuD,MAAM5b,OAAQ,CACvCojG,EAAOxnF,MAAQ,GACf,IAAK,IAAIilB,EAAI,EAAGA,EAAIqpC,EAAQtuD,MAAM5b,SAAU6gC,EACxCuiE,EAAOxnF,MAAMilB,GAAKqpC,EAAQtuD,MAAMilB,EACxC,CACA,GAAIqpC,EAAQ9/D,QAAU8/D,EAAQ9/D,OAAOpK,OAEjC,IADAojG,EAAOh5F,OAAS,GACPy2B,EAAI,EAAGA,EAAIqpC,EAAQ9/D,OAAOpK,SAAU6gC,EACzCuiE,EAAOh5F,OAAOy2B,GAAKqpC,EAAQ9/D,OAAOy2B,GAM1C,GAJoB,MAAhBqpC,EAAQxoE,MAAgBwoE,EAAQzxC,eAAe,UAC/C2qE,EAAO1hG,KAAOwoE,EAAQxoE,MACJ,MAAlBwoE,EAAQnwB,QAAkBmwB,EAAQzxC,eAAe,YACjD2qE,EAAOrpD,OAASmwB,EAAQnwB,QACxBmwB,EAAQ/oE,WAAa+oE,EAAQ/oE,UAAUnB,OAEvC,IADAojG,EAAOjiG,UAAY,GACV0/B,EAAI,EAAGA,EAAIqpC,EAAQ/oE,UAAUnB,SAAU6gC,EAC5CuiE,EAAOjiG,UAAU0/B,GAAKygE,EAAMh/F,KAAKC,eAAeghG,SAASr5B,EAAQ/oE,UAAU0/B,GAAIhiC,GAMvF,OAJyB,MAArBqrE,EAAQve,WAAqBue,EAAQzxC,eAAe,eACpD2qE,EAAOz3C,UAAYue,EAAQve,WACT,MAAlBue,EAAQtnB,QAAkBsnB,EAAQzxC,eAAe,YACjD2qE,EAAOxgD,OAASsnB,EAAQtnB,QACrBwgD,CACX,EASAtpD,EAAU8nD,UAAUmC,OAAS,WACzB,OAAO1iG,KAAK+nC,YAAYm6D,SAASliG,KAAM0/F,EAAUM,KAAK2C,cAC1D,EAUAlqD,EAAUmqD,WAAa,SAAoBC,GAIvC,YAHsBtgG,IAAlBsgG,IACAA,EAAgB,uBAEbA,EAAgB,iBAC3B,EAEOpqD,CACV,CA3YgB,GA6YjBx3C,EAAK8hG,kBAAoB,WAoBrB,SAASA,EAAkB3C,GAGvB,GAFApgG,KAAKgjG,sBAAwB,GAC7BhjG,KAAKijG,cAAgB,GACjB7C,EACA,IAAK,IAAI1sF,EAAOlU,OAAOkU,KAAK0sF,GAAaz8F,EAAI,EAAGA,EAAI+P,EAAK/U,SAAUgF,EACpC,MAAvBy8F,EAAW1sF,EAAK/P,MAChB3D,KAAK0T,EAAK/P,IAAMy8F,EAAW1sF,EAAK/P,IAChD,CAySA,OAjSAo/F,EAAkBxC,UAAU2C,eAAiB,KAQ7CH,EAAkBxC,UAAU4C,UAAY,KAQxCJ,EAAkBxC,UAAUyC,sBAAwBjD,EAAMa,WAQ1DmC,EAAkBxC,UAAU0C,cAAgBlD,EAAMa,WAUlDmC,EAAkBpjD,OAAS,SAAgBygD,GACvC,OAAO,IAAI2C,EAAkB3C,EACjC,EAWA2C,EAAkBzxF,OAAS,SAAgBu3D,EAASg4B,GAOhD,GANKA,IACDA,EAAShB,EAAQlgD,UACS,MAA1BkpB,EAAQq6B,gBAA0B1jG,OAAO43B,eAAeC,KAAKwxC,EAAS,mBACtEo3B,EAAMh/F,KAAKy4C,WAAWpoC,OAAOu3D,EAAQq6B,eAAgBrC,EAAOC,OAA8B,IAAII,QAAQC,SACjF,MAArBt4B,EAAQs6B,WAAqB3jG,OAAO43B,eAAeC,KAAKwxC,EAAS,cACjEo3B,EAAMh/F,KAAKy4C,WAAWpoC,OAAOu3D,EAAQs6B,UAAWtC,EAAOC,OAA8B,IAAII,QAAQC,SAChE,MAAjCt4B,EAAQm6B,uBAAiCn6B,EAAQm6B,sBAAsBrkG,OACvE,IAAK,IAAIgF,EAAI,EAAGA,EAAIklE,EAAQm6B,sBAAsBrkG,SAAUgF,EACxDs8F,EAAMh/F,KAAKmiG,uBAAuB9xF,OAAOu3D,EAAQm6B,sBAAsBr/F,GAAIk9F,EAAOC,OAA8B,IAAII,QAAQC,SACpI,GAA6B,MAAzBt4B,EAAQo6B,eAAyBp6B,EAAQo6B,cAActkG,OACvD,IAASgF,EAAI,EAAGA,EAAIklE,EAAQo6B,cAActkG,SAAUgF,EAChDs8F,EAAMh/F,KAAKmiG,uBAAuB9xF,OAAOu3D,EAAQo6B,cAAct/F,GAAIk9F,EAAOC,OAA8B,IAAII,QAAQC,SAC5H,OAAON,CACX,EAWAkC,EAAkBxB,gBAAkB,SAAyB14B,EAASg4B,GAClE,OAAO7gG,KAAKsR,OAAOu3D,EAASg4B,GAAQM,QACxC,EAaA4B,EAAkBxxF,OAAS,SAAgBiwF,EAAQ7iG,GACzC6iG,aAAkB7B,IACpB6B,EAAS7B,EAAQhgD,OAAO6hD,IAE5B,IADA,IAAIhlE,OAAiBj6B,IAAX5D,EAAuB6iG,EAAO/1D,IAAM+1D,EAAOv7B,IAAMtnE,EAAQkqE,EAAU,IAAIo3B,EAAMh/F,KAAK8hG,kBACrFvB,EAAOv7B,IAAMzpC,GAAK,CACrB,IAAI83D,EAAMkN,EAAOV,SACjB,OAAQxM,IAAQ,GAChB,KAAK,EACGzrB,EAAQq6B,eAAiBjD,EAAMh/F,KAAKy4C,WAAWnoC,OAAOiwF,EAAQA,EAAOV,UACrE,MAER,KAAK,EACGj4B,EAAQs6B,UAAYlD,EAAMh/F,KAAKy4C,WAAWnoC,OAAOiwF,EAAQA,EAAOV,UAChE,MAER,KAAK,EACSj4B,EAAQm6B,uBAAyBn6B,EAAQm6B,sBAAsBrkG,SACjEkqE,EAAQm6B,sBAAwB,IACpCn6B,EAAQm6B,sBAAsBj+F,KAAKk7F,EAAMh/F,KAAKmiG,uBAAuB7xF,OAAOiwF,EAAQA,EAAOV,WAC3F,MAER,KAAK,EACSj4B,EAAQo6B,eAAiBp6B,EAAQo6B,cAActkG,SACjDkqE,EAAQo6B,cAAgB,IAC5Bp6B,EAAQo6B,cAAcl+F,KAAKk7F,EAAMh/F,KAAKmiG,uBAAuB7xF,OAAOiwF,EAAQA,EAAOV,WACnF,MAER,QACIU,EAAOE,SAAe,EAANpN,GAGxB,CACA,OAAOzrB,CACX,EAYAk6B,EAAkBpB,gBAAkB,SAAyBH,GAGzD,OAFMA,aAAkB7B,IACpB6B,EAAS,IAAI7B,EAAQ6B,IAClBxhG,KAAKuR,OAAOiwF,EAAQA,EAAOV,SACtC,EAUAiC,EAAkBnB,OAAS,SAAgB/4B,GACvC,GAAuB,iBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAA8B,MAA1BA,EAAQq6B,gBAA0Br6B,EAAQzxC,eAAe,oBACrDyM,EAAQo8D,EAAMh/F,KAAKy4C,WAAWkoD,OAAO/4B,EAAQq6B,iBAE7C,MAAO,kBAAoBr/D,EAEnC,GAAyB,MAArBglC,EAAQs6B,WAAqBt6B,EAAQzxC,eAAe,eAChDyM,EAAQo8D,EAAMh/F,KAAKy4C,WAAWkoD,OAAO/4B,EAAQs6B,YAE7C,MAAO,aAAet/D,EAE9B,GAAqC,MAAjCglC,EAAQm6B,uBAAiCn6B,EAAQzxC,eAAe,yBAA0B,CAC1F,IAAK1zB,MAAM+lC,QAAQo/B,EAAQm6B,uBACvB,MAAO,wCACX,IAAK,IAAIr/F,EAAI,EAAGA,EAAIklE,EAAQm6B,sBAAsBrkG,SAAUgF,EAExD,GADIkgC,EAAQo8D,EAAMh/F,KAAKmiG,uBAAuBxB,OAAO/4B,EAAQm6B,sBAAsBr/F,IAE/E,MAAO,yBAA2BkgC,CAE9C,CACA,GAA6B,MAAzBglC,EAAQo6B,eAAyBp6B,EAAQzxC,eAAe,iBAAkB,CAC1E,IAAK1zB,MAAM+lC,QAAQo/B,EAAQo6B,eACvB,MAAO,gCACX,IAASt/F,EAAI,EAAGA,EAAIklE,EAAQo6B,cAActkG,SAAUgF,EAAG,CACnD,IAAIkgC,EACJ,GADIA,EAAQo8D,EAAMh/F,KAAKmiG,uBAAuBxB,OAAO/4B,EAAQo6B,cAAct/F,IAEvE,MAAO,iBAAmBkgC,CAClC,CACJ,CACA,OAAO,IACX,EAUAk/D,EAAkBjB,WAAa,SAAoBC,GAC/C,GAAIA,aAAkB9B,EAAMh/F,KAAK8hG,kBAC7B,OAAOhB,EACX,IAAIl5B,EAAU,IAAIo3B,EAAMh/F,KAAK8hG,kBAC7B,GAA6B,MAAzBhB,EAAOmB,eAAwB,CAC/B,GAAqC,iBAA1BnB,EAAOmB,eACd,MAAMv1E,UAAU,2DACpBk7C,EAAQq6B,eAAiBjD,EAAMh/F,KAAKy4C,WAAWooD,WAAWC,EAAOmB,eACrE,CACA,GAAwB,MAApBnB,EAAOoB,UAAmB,CAC1B,GAAgC,iBAArBpB,EAAOoB,UACd,MAAMx1E,UAAU,sDACpBk7C,EAAQs6B,UAAYlD,EAAMh/F,KAAKy4C,WAAWooD,WAAWC,EAAOoB,UAChE,CACA,GAAIpB,EAAOiB,sBAAuB,CAC9B,IAAKt/F,MAAM+lC,QAAQs4D,EAAOiB,uBACtB,MAAMr1E,UAAU,iEACpBk7C,EAAQm6B,sBAAwB,GAChC,IAAK,IAAIr/F,EAAI,EAAGA,EAAIo+F,EAAOiB,sBAAsBrkG,SAAUgF,EAAG,CAC1D,GAA+C,iBAApCo+F,EAAOiB,sBAAsBr/F,GACpC,MAAMgqB,UAAU,kEACpBk7C,EAAQm6B,sBAAsBr/F,GAAKs8F,EAAMh/F,KAAKmiG,uBAAuBtB,WAAWC,EAAOiB,sBAAsBr/F,GACjH,CACJ,CACA,GAAIo+F,EAAOkB,cAAe,CACtB,IAAKv/F,MAAM+lC,QAAQs4D,EAAOkB,eACtB,MAAMt1E,UAAU,yDAEpB,IADAk7C,EAAQo6B,cAAgB,GACft/F,EAAI,EAAGA,EAAIo+F,EAAOkB,cAActkG,SAAUgF,EAAG,CAClD,GAAuC,iBAA5Bo+F,EAAOkB,cAAct/F,GAC5B,MAAMgqB,UAAU,0DACpBk7C,EAAQo6B,cAAct/F,GAAKs8F,EAAMh/F,KAAKmiG,uBAAuBtB,WAAWC,EAAOkB,cAAct/F,GACjG,CACJ,CACA,OAAOklE,CACX,EAWAk6B,EAAkBb,SAAW,SAAkBr5B,EAASrrE,GAC/CA,IACDA,EAAU,CAAC,GACf,IAAIukG,EAAS,CAAC,EAad,IAZIvkG,EAAQ2kG,QAAU3kG,EAAQ4kG,YAC1BL,EAAOiB,sBAAwB,GAC/BjB,EAAOkB,cAAgB,IAEvBzlG,EAAQ4kG,WACRL,EAAOmB,eAAiB,KACxBnB,EAAOoB,UAAY,MAEO,MAA1Bt6B,EAAQq6B,gBAA0Br6B,EAAQzxC,eAAe,oBACzD2qE,EAAOmB,eAAiBjD,EAAMh/F,KAAKy4C,WAAWwoD,SAASr5B,EAAQq6B,eAAgB1lG,IAC1D,MAArBqrE,EAAQs6B,WAAqBt6B,EAAQzxC,eAAe,eACpD2qE,EAAOoB,UAAYlD,EAAMh/F,KAAKy4C,WAAWwoD,SAASr5B,EAAQs6B,UAAW3lG,IACrEqrE,EAAQm6B,uBAAyBn6B,EAAQm6B,sBAAsBrkG,OAAQ,CACvEojG,EAAOiB,sBAAwB,GAC/B,IAAK,IAAIxjE,EAAI,EAAGA,EAAIqpC,EAAQm6B,sBAAsBrkG,SAAU6gC,EACxDuiE,EAAOiB,sBAAsBxjE,GAAKygE,EAAMh/F,KAAKmiG,uBAAuBlB,SAASr5B,EAAQm6B,sBAAsBxjE,GAAIhiC,EACvH,CACA,GAAIqrE,EAAQo6B,eAAiBp6B,EAAQo6B,cAActkG,OAE/C,IADAojG,EAAOkB,cAAgB,GACdzjE,EAAI,EAAGA,EAAIqpC,EAAQo6B,cAActkG,SAAU6gC,EAChDuiE,EAAOkB,cAAczjE,GAAKygE,EAAMh/F,KAAKmiG,uBAAuBlB,SAASr5B,EAAQo6B,cAAczjE,GAAIhiC,GAEvG,OAAOukG,CACX,EASAgB,EAAkBxC,UAAUmC,OAAS,WACjC,OAAO1iG,KAAK+nC,YAAYm6D,SAASliG,KAAM0/F,EAAUM,KAAK2C,cAC1D,EAUAI,EAAkBH,WAAa,SAAoBC,GAI/C,YAHsBtgG,IAAlBsgG,IACAA,EAAgB,uBAEbA,EAAgB,yBAC3B,EAEOE,CACV,CArUwB,GAuUzB9hG,EAAKkgD,WAAa,WA2Bd,SAASA,EAAWi/C,GAKhB,GAJApgG,KAAKshD,YAAc,GACnBthD,KAAKqjG,cAAgB,GACrBrjG,KAAKsjG,aAAe,GACpBtjG,KAAKujG,UAAY,GACbnD,EACA,IAAK,IAAI1sF,EAAOlU,OAAOkU,KAAK0sF,GAAaz8F,EAAI,EAAGA,EAAI+P,EAAK/U,SAAUgF,EACpC,MAAvBy8F,EAAW1sF,EAAK/P,MAChB3D,KAAK0T,EAAK/P,IAAMy8F,EAAW1sF,EAAK/P,IAChD,CAkgBA,OA1fAw9C,EAAWo/C,UAAUn/C,UAAY2+C,EAAMj8B,KAAOi8B,EAAMj8B,KAAKxD,SAAS,EAAE,GAAE,GAAS,EAQ/Enf,EAAWo/C,UAAUj/C,YAAcy+C,EAAMa,WAQzCz/C,EAAWo/C,UAAU/qC,aAAe,GAQpCrU,EAAWo/C,UAAU9qC,gBAAkB,GAQvCtU,EAAWo/C,UAAUh/C,OAAS,GAQ9BJ,EAAWo/C,UAAU7qC,aAAeqqC,EAAMj8B,KAAOi8B,EAAMj8B,KAAKxD,SAAS,EAAE,GAAE,GAAS,EAQlFnf,EAAWo/C,UAAUj2C,UAAY,GAQjCnJ,EAAWo/C,UAAU15D,MAAQ,KAQ7Bsa,EAAWo/C,UAAU8C,cAAgBtD,EAAMa,WAQ3Cz/C,EAAWo/C,UAAU+C,aAAevD,EAAMa,WAQ1Cz/C,EAAWo/C,UAAUgD,UAAYxD,EAAMa,WAUvCz/C,EAAWxB,OAAS,SAAgBygD,GAChC,OAAO,IAAIj/C,EAAWi/C,EAC1B,EAWAj/C,EAAW7vC,OAAS,SAAgBu3D,EAASg4B,GAiBzC,GAhBKA,IACDA,EAAShB,EAAQlgD,UACI,MAArBkpB,EAAQznB,WAAqB5hD,OAAO43B,eAAeC,KAAKwxC,EAAS,cACjEg4B,EAAOC,OAA8B,GAAGG,MAAMp4B,EAAQznB,WAC9B,MAAxBynB,EAAQrT,cAAwBh2D,OAAO43B,eAAeC,KAAKwxC,EAAS,iBACpEg4B,EAAOC,OAA8B,IAAIC,OAAOl4B,EAAQrT,cAC7B,MAA3BqT,EAAQpT,iBAA2Bj2D,OAAO43B,eAAeC,KAAKwxC,EAAS,oBACvEg4B,EAAOC,OAA8B,IAAIC,OAAOl4B,EAAQpT,iBACtC,MAAlBoT,EAAQtnB,QAAkB/hD,OAAO43B,eAAeC,KAAKwxC,EAAS,WAC9Dg4B,EAAOC,OAA8B,IAAIC,OAAOl4B,EAAQtnB,QAChC,MAAxBsnB,EAAQnT,cAAwBl2D,OAAO43B,eAAeC,KAAKwxC,EAAS,iBACpEg4B,EAAOC,OAA8B,IAAIG,MAAMp4B,EAAQnT,cAClC,MAArBmT,EAAQve,WAAqB9qD,OAAO43B,eAAeC,KAAKwxC,EAAS,cACjEg4B,EAAOC,OAA8B,IAAIC,OAAOl4B,EAAQve,WACvC,MAAjBue,EAAQhiC,OAAiBrnC,OAAO43B,eAAeC,KAAKwxC,EAAS,UAC7Do3B,EAAMh/F,KAAKy4C,WAAWpoC,OAAOu3D,EAAQhiC,MAAOg6D,EAAOC,OAA8B,IAAII,QAAQC,SACtE,MAAvBt4B,EAAQvnB,aAAuBunB,EAAQvnB,YAAY3iD,OACnD,IAAK,IAAIgF,EAAI,EAAGA,EAAIklE,EAAQvnB,YAAY3iD,SAAUgF,EAC9Cs8F,EAAMh/F,KAAKuiG,mBAAmBlyF,OAAOu3D,EAAQvnB,YAAY39C,GAAIk9F,EAAOC,OAA8B,IAAII,QAAQC,SACtH,GAA6B,MAAzBt4B,EAAQw6B,eAAyBx6B,EAAQw6B,cAAc1kG,OACvD,IAASgF,EAAI,EAAGA,EAAIklE,EAAQw6B,cAAc1kG,SAAUgF,EAChDs8F,EAAMh/F,KAAKmiG,uBAAuB9xF,OAAOu3D,EAAQw6B,cAAc1/F,GAAIk9F,EAAOC,OAA+B,KAAKI,QAAQC,SAC9H,GAA4B,MAAxBt4B,EAAQy6B,cAAwBz6B,EAAQy6B,aAAa3kG,OACrD,IAASgF,EAAI,EAAGA,EAAIklE,EAAQy6B,aAAa3kG,SAAUgF,EAC/Cs8F,EAAMh/F,KAAK8hG,kBAAkBzxF,OAAOu3D,EAAQy6B,aAAa3/F,GAAIk9F,EAAOC,OAA+B,KAAKI,QAAQC,SACxH,GAAyB,MAArBt4B,EAAQ06B,WAAqB16B,EAAQ06B,UAAU5kG,OAC/C,IAASgF,EAAI,EAAGA,EAAIklE,EAAQ06B,UAAU5kG,SAAUgF,EAC5Cs8F,EAAMh/F,KAAKwiG,cAAcnyF,OAAOu3D,EAAQ06B,UAAU5/F,GAAIk9F,EAAOC,OAA+B,KAAKI,QAAQC,SACjH,OAAON,CACX,EAWA1/C,EAAWogD,gBAAkB,SAAyB14B,EAASg4B,GAC3D,OAAO7gG,KAAKsR,OAAOu3D,EAASg4B,GAAQM,QACxC,EAaAhgD,EAAW5vC,OAAS,SAAgBiwF,EAAQ7iG,GAClC6iG,aAAkB7B,IACpB6B,EAAS7B,EAAQhgD,OAAO6hD,IAE5B,IADA,IAAIhlE,OAAiBj6B,IAAX5D,EAAuB6iG,EAAO/1D,IAAM+1D,EAAOv7B,IAAMtnE,EAAQkqE,EAAU,IAAIo3B,EAAMh/F,KAAKkgD,WACrFqgD,EAAOv7B,IAAMzpC,GAAK,CACrB,IAAI83D,EAAMkN,EAAOV,SACjB,OAAQxM,IAAQ,GAChB,KAAK,EACGzrB,EAAQznB,UAAYogD,EAAOP,QAC3B,MAER,KAAK,EACSp4B,EAAQvnB,aAAeunB,EAAQvnB,YAAY3iD,SAC7CkqE,EAAQvnB,YAAc,IAC1BunB,EAAQvnB,YAAYv8C,KAAKk7F,EAAMh/F,KAAKuiG,mBAAmBjyF,OAAOiwF,EAAQA,EAAOV,WAC7E,MAER,KAAK,EACGj4B,EAAQrT,aAAegsC,EAAOT,SAC9B,MAER,KAAK,EACGl4B,EAAQpT,gBAAkB+rC,EAAOT,SACjC,MAER,KAAK,EACGl4B,EAAQtnB,OAASigD,EAAOT,SACxB,MAER,KAAK,EACGl4B,EAAQnT,aAAe8rC,EAAOP,QAC9B,MAER,KAAK,EACGp4B,EAAQve,UAAYk3C,EAAOT,SAC3B,MAER,KAAK,EACGl4B,EAAQhiC,MAAQo5D,EAAMh/F,KAAKy4C,WAAWnoC,OAAOiwF,EAAQA,EAAOV,UAC5D,MAER,KAAK,GACSj4B,EAAQw6B,eAAiBx6B,EAAQw6B,cAAc1kG,SACjDkqE,EAAQw6B,cAAgB,IAC5Bx6B,EAAQw6B,cAAct+F,KAAKk7F,EAAMh/F,KAAKmiG,uBAAuB7xF,OAAOiwF,EAAQA,EAAOV,WACnF,MAER,KAAK,GACSj4B,EAAQy6B,cAAgBz6B,EAAQy6B,aAAa3kG,SAC/CkqE,EAAQy6B,aAAe,IAC3Bz6B,EAAQy6B,aAAav+F,KAAKk7F,EAAMh/F,KAAK8hG,kBAAkBxxF,OAAOiwF,EAAQA,EAAOV,WAC7E,MAER,KAAK,GACSj4B,EAAQ06B,WAAa16B,EAAQ06B,UAAU5kG,SACzCkqE,EAAQ06B,UAAY,IACxB16B,EAAQ06B,UAAUx+F,KAAKk7F,EAAMh/F,KAAKwiG,cAAclyF,OAAOiwF,EAAQA,EAAOV,WACtE,MAER,QACIU,EAAOE,SAAe,EAANpN,GAGxB,CACA,OAAOzrB,CACX,EAYA1nB,EAAWwgD,gBAAkB,SAAyBH,GAGlD,OAFMA,aAAkB7B,IACpB6B,EAAS,IAAI7B,EAAQ6B,IAClBxhG,KAAKuR,OAAOiwF,EAAQA,EAAOV,SACtC,EAUA3/C,EAAWygD,OAAS,SAAgB/4B,GAChC,GAAuB,iBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAyB,MAArBA,EAAQznB,WAAqBynB,EAAQzxC,eAAe,gBAC/C2oE,EAAMxhG,UAAUsqE,EAAQznB,YAAgBynB,EAAQznB,WAAa2+C,EAAMxhG,UAAUsqE,EAAQznB,UAAU4iB,MAAQ+7B,EAAMxhG,UAAUsqE,EAAQznB,UAAU6iB,OAC1I,MAAO,mCACf,GAA2B,MAAvB4E,EAAQvnB,aAAuBunB,EAAQzxC,eAAe,eAAgB,CACtE,IAAK1zB,MAAM+lC,QAAQo/B,EAAQvnB,aACvB,MAAO,8BACX,IAAK,IAAI39C,EAAI,EAAGA,EAAIklE,EAAQvnB,YAAY3iD,SAAUgF,EAE9C,GADIkgC,EAAQo8D,EAAMh/F,KAAKuiG,mBAAmB5B,OAAO/4B,EAAQvnB,YAAY39C,IAEjE,MAAO,eAAiBkgC,CAEpC,CACA,GAA4B,MAAxBglC,EAAQrT,cAAwBqT,EAAQzxC,eAAe,kBAClD2oE,EAAM8B,SAASh5B,EAAQrT,cACxB,MAAO,gCACf,GAA+B,MAA3BqT,EAAQpT,iBAA2BoT,EAAQzxC,eAAe,qBACrD2oE,EAAM8B,SAASh5B,EAAQpT,iBACxB,MAAO,mCACf,GAAsB,MAAlBoT,EAAQtnB,QAAkBsnB,EAAQzxC,eAAe,YAC5C2oE,EAAM8B,SAASh5B,EAAQtnB,QACxB,MAAO,0BACf,GAA4B,MAAxBsnB,EAAQnT,cAAwBmT,EAAQzxC,eAAe,mBAClD2oE,EAAMxhG,UAAUsqE,EAAQnT,eAAmBmT,EAAQnT,cAAgBqqC,EAAMxhG,UAAUsqE,EAAQnT,aAAasO,MAAQ+7B,EAAMxhG,UAAUsqE,EAAQnT,aAAauO,OACtJ,MAAO,sCACf,GAAyB,MAArB4E,EAAQve,WAAqBue,EAAQzxC,eAAe,eAC/C2oE,EAAM8B,SAASh5B,EAAQve,WACxB,MAAO,6BACf,GAAqB,MAAjBue,EAAQhiC,OAAiBgiC,EAAQzxC,eAAe,WAC5CyM,EAAQo8D,EAAMh/F,KAAKy4C,WAAWkoD,OAAO/4B,EAAQhiC,QAE7C,MAAO,SAAWhD,EAE1B,GAA6B,MAAzBglC,EAAQw6B,eAAyBx6B,EAAQzxC,eAAe,iBAAkB,CAC1E,IAAK1zB,MAAM+lC,QAAQo/B,EAAQw6B,eACvB,MAAO,gCACX,IAAS1/F,EAAI,EAAGA,EAAIklE,EAAQw6B,cAAc1kG,SAAUgF,EAEhD,GADIkgC,EAAQo8D,EAAMh/F,KAAKmiG,uBAAuBxB,OAAO/4B,EAAQw6B,cAAc1/F,IAEvE,MAAO,iBAAmBkgC,CAEtC,CACA,GAA4B,MAAxBglC,EAAQy6B,cAAwBz6B,EAAQzxC,eAAe,gBAAiB,CACxE,IAAK1zB,MAAM+lC,QAAQo/B,EAAQy6B,cACvB,MAAO,+BACX,IAAS3/F,EAAI,EAAGA,EAAIklE,EAAQy6B,aAAa3kG,SAAUgF,EAE/C,GADIkgC,EAAQo8D,EAAMh/F,KAAK8hG,kBAAkBnB,OAAO/4B,EAAQy6B,aAAa3/F,IAEjE,MAAO,gBAAkBkgC,CAErC,CACA,GAAyB,MAArBglC,EAAQ06B,WAAqB16B,EAAQzxC,eAAe,aAAc,CAClE,IAAK1zB,MAAM+lC,QAAQo/B,EAAQ06B,WACvB,MAAO,4BACX,IAAS5/F,EAAI,EAAGA,EAAIklE,EAAQ06B,UAAU5kG,SAAUgF,EAAG,CAC/C,IAAIkgC,EACJ,GADIA,EAAQo8D,EAAMh/F,KAAKwiG,cAAc7B,OAAO/4B,EAAQ06B,UAAU5/F,IAE1D,MAAO,aAAekgC,CAC9B,CACJ,CACA,OAAO,IACX,EAUAsd,EAAW2gD,WAAa,SAAoBC,GACxC,GAAIA,aAAkB9B,EAAMh/F,KAAKkgD,WAC7B,OAAO4gD,EACX,IAAIl5B,EAAU,IAAIo3B,EAAMh/F,KAAKkgD,WAU7B,GATwB,MAApB4gD,EAAO3gD,YACH2+C,EAAMj8B,MACL+E,EAAQznB,UAAY2+C,EAAMj8B,KAAKC,UAAUg+B,EAAO3gD,YAAYyiB,UAAW,EACvC,iBAArBk+B,EAAO3gD,UACnBynB,EAAQznB,UAAYoB,SAASu/C,EAAO3gD,UAAW,IACd,iBAArB2gD,EAAO3gD,UACnBynB,EAAQznB,UAAY2gD,EAAO3gD,UACM,iBAArB2gD,EAAO3gD,YACnBynB,EAAQznB,UAAY,IAAI2+C,EAAMiC,SAASD,EAAO3gD,UAAU4iB,MAAQ,EAAG+9B,EAAO3gD,UAAU6iB,OAAS,GAAGpE,aACpGkiC,EAAOzgD,YAAa,CACpB,IAAK59C,MAAM+lC,QAAQs4D,EAAOzgD,aACtB,MAAM3zB,UAAU,gDACpBk7C,EAAQvnB,YAAc,GACtB,IAAK,IAAI39C,EAAI,EAAGA,EAAIo+F,EAAOzgD,YAAY3iD,SAAUgF,EAAG,CAChD,GAAqC,iBAA1Bo+F,EAAOzgD,YAAY39C,GAC1B,MAAMgqB,UAAU,iDACpBk7C,EAAQvnB,YAAY39C,GAAKs8F,EAAMh/F,KAAKuiG,mBAAmB1B,WAAWC,EAAOzgD,YAAY39C,GACzF,CACJ,CAkBA,GAjB2B,MAAvBo+F,EAAOvsC,eACPqT,EAAQrT,aAAe+uB,OAAOwd,EAAOvsC,eACX,MAA1BusC,EAAOtsC,kBACPoT,EAAQpT,gBAAkB8uB,OAAOwd,EAAOtsC,kBACvB,MAAjBssC,EAAOxgD,SACPsnB,EAAQtnB,OAASgjC,OAAOwd,EAAOxgD,SACR,MAAvBwgD,EAAOrsC,eACHqqC,EAAMj8B,MACL+E,EAAQnT,aAAeqqC,EAAMj8B,KAAKC,UAAUg+B,EAAOrsC,eAAemO,UAAW,EAC1C,iBAAxBk+B,EAAOrsC,aACnBmT,EAAQnT,aAAelT,SAASu/C,EAAOrsC,aAAc,IACjB,iBAAxBqsC,EAAOrsC,aACnBmT,EAAQnT,aAAeqsC,EAAOrsC,aACM,iBAAxBqsC,EAAOrsC,eACnBmT,EAAQnT,aAAe,IAAIqqC,EAAMiC,SAASD,EAAOrsC,aAAasO,MAAQ,EAAG+9B,EAAOrsC,aAAauO,OAAS,GAAGpE,aACzF,MAApBkiC,EAAOz3C,YACPue,EAAQve,UAAYi6B,OAAOwd,EAAOz3C,YAClB,MAAhBy3C,EAAOl7D,MAAe,CACtB,GAA4B,iBAAjBk7D,EAAOl7D,MACd,MAAMlZ,UAAU,2CACpBk7C,EAAQhiC,MAAQo5D,EAAMh/F,KAAKy4C,WAAWooD,WAAWC,EAAOl7D,MAC5D,CACA,GAAIk7D,EAAOsB,cAAe,CACtB,IAAK3/F,MAAM+lC,QAAQs4D,EAAOsB,eACtB,MAAM11E,UAAU,kDAEpB,IADAk7C,EAAQw6B,cAAgB,GACf1/F,EAAI,EAAGA,EAAIo+F,EAAOsB,cAAc1kG,SAAUgF,EAAG,CAClD,GAAuC,iBAA5Bo+F,EAAOsB,cAAc1/F,GAC5B,MAAMgqB,UAAU,mDACpBk7C,EAAQw6B,cAAc1/F,GAAKs8F,EAAMh/F,KAAKmiG,uBAAuBtB,WAAWC,EAAOsB,cAAc1/F,GACjG,CACJ,CACA,GAAIo+F,EAAOuB,aAAc,CACrB,IAAK5/F,MAAM+lC,QAAQs4D,EAAOuB,cACtB,MAAM31E,UAAU,iDAEpB,IADAk7C,EAAQy6B,aAAe,GACd3/F,EAAI,EAAGA,EAAIo+F,EAAOuB,aAAa3kG,SAAUgF,EAAG,CACjD,GAAsC,iBAA3Bo+F,EAAOuB,aAAa3/F,GAC3B,MAAMgqB,UAAU,kDACpBk7C,EAAQy6B,aAAa3/F,GAAKs8F,EAAMh/F,KAAK8hG,kBAAkBjB,WAAWC,EAAOuB,aAAa3/F,GAC1F,CACJ,CACA,GAAIo+F,EAAOwB,UAAW,CAClB,IAAK7/F,MAAM+lC,QAAQs4D,EAAOwB,WACtB,MAAM51E,UAAU,8CAEpB,IADAk7C,EAAQ06B,UAAY,GACX5/F,EAAI,EAAGA,EAAIo+F,EAAOwB,UAAU5kG,SAAUgF,EAAG,CAC9C,GAAmC,iBAAxBo+F,EAAOwB,UAAU5/F,GACxB,MAAMgqB,UAAU,+CACpBk7C,EAAQ06B,UAAU5/F,GAAKs8F,EAAMh/F,KAAKwiG,cAAc3B,WAAWC,EAAOwB,UAAU5/F,GAChF,CACJ,CACA,OAAOklE,CACX,EAWA1nB,EAAW+gD,SAAW,SAAkBr5B,EAASrrE,GACxCA,IACDA,EAAU,CAAC,GACf,IAAIukG,EAAS,CAAC,EAOd,IANIvkG,EAAQ2kG,QAAU3kG,EAAQ4kG,YAC1BL,EAAOzgD,YAAc,GACrBygD,EAAOsB,cAAgB,GACvBtB,EAAOuB,aAAe,GACtBvB,EAAOwB,UAAY,IAEnB/lG,EAAQ4kG,SAAU,CAClB,GAAIrC,EAAMj8B,KAAM,CACZ,IAAIu+B,EAAO,IAAItC,EAAMj8B,KAAK,EAAG,GAAG,GAChCi+B,EAAO3gD,UAAY5jD,EAAQ8kG,QAAU/d,OAAS8d,EAAK7wD,WAAah0C,EAAQ8kG,QAAUhkG,OAAS+jG,EAAKxiC,WAAawiC,CACjH,MACIN,EAAO3gD,UAAY5jD,EAAQ8kG,QAAU/d,OAAS,IAAM,EACxDwd,EAAOvsC,aAAe,GACtBusC,EAAOtsC,gBAAkB,GACzBssC,EAAOxgD,OAAS,GACZw+C,EAAMj8B,MACFu+B,EAAO,IAAItC,EAAMj8B,KAAK,EAAG,GAAG,GAChCi+B,EAAOrsC,aAAel4D,EAAQ8kG,QAAU/d,OAAS8d,EAAK7wD,WAAah0C,EAAQ8kG,QAAUhkG,OAAS+jG,EAAKxiC,WAAawiC,GAEhHN,EAAOrsC,aAAel4D,EAAQ8kG,QAAU/d,OAAS,IAAM,EAC3Dwd,EAAOz3C,UAAY,GACnBy3C,EAAOl7D,MAAQ,IACnB,CAqBA,GApByB,MAArBgiC,EAAQznB,WAAqBynB,EAAQzxC,eAAe,eACnB,iBAAtByxC,EAAQznB,UACf2gD,EAAO3gD,UAAY5jD,EAAQ8kG,QAAU/d,OAASA,OAAO1b,EAAQznB,WAAaynB,EAAQznB,UAElF2gD,EAAO3gD,UAAY5jD,EAAQ8kG,QAAU/d,OAASwb,EAAMj8B,KAAKy8B,UAAU/uD,SAASna,KAAKwxC,EAAQznB,WAAa5jD,EAAQ8kG,QAAUhkG,OAAS,IAAIyhG,EAAMiC,SAASn5B,EAAQznB,UAAU4iB,MAAQ,EAAG6E,EAAQznB,UAAU6iB,OAAS,GAAGpE,WAAagJ,EAAQznB,WAChN,MAAxBynB,EAAQrT,cAAwBqT,EAAQzxC,eAAe,kBACvD2qE,EAAOvsC,aAAeqT,EAAQrT,cACH,MAA3BqT,EAAQpT,iBAA2BoT,EAAQzxC,eAAe,qBAC1D2qE,EAAOtsC,gBAAkBoT,EAAQpT,iBACf,MAAlBoT,EAAQtnB,QAAkBsnB,EAAQzxC,eAAe,YACjD2qE,EAAOxgD,OAASsnB,EAAQtnB,QACA,MAAxBsnB,EAAQnT,cAAwBmT,EAAQzxC,eAAe,kBACnB,iBAAzByxC,EAAQnT,aACfqsC,EAAOrsC,aAAel4D,EAAQ8kG,QAAU/d,OAASA,OAAO1b,EAAQnT,cAAgBmT,EAAQnT,aAExFqsC,EAAOrsC,aAAel4D,EAAQ8kG,QAAU/d,OAASwb,EAAMj8B,KAAKy8B,UAAU/uD,SAASna,KAAKwxC,EAAQnT,cAAgBl4D,EAAQ8kG,QAAUhkG,OAAS,IAAIyhG,EAAMiC,SAASn5B,EAAQnT,aAAasO,MAAQ,EAAG6E,EAAQnT,aAAauO,OAAS,GAAGpE,WAAagJ,EAAQnT,cAC/N,MAArBmT,EAAQve,WAAqBue,EAAQzxC,eAAe,eACpD2qE,EAAOz3C,UAAYue,EAAQve,WACV,MAAjBue,EAAQhiC,OAAiBgiC,EAAQzxC,eAAe,WAChD2qE,EAAOl7D,MAAQo5D,EAAMh/F,KAAKy4C,WAAWwoD,SAASr5B,EAAQhiC,MAAOrpC,IAC7DqrE,EAAQvnB,aAAeunB,EAAQvnB,YAAY3iD,OAAQ,CACnDojG,EAAOzgD,YAAc,GACrB,IAAK,IAAI9hB,EAAI,EAAGA,EAAIqpC,EAAQvnB,YAAY3iD,SAAU6gC,EAC9CuiE,EAAOzgD,YAAY9hB,GAAKygE,EAAMh/F,KAAKuiG,mBAAmBtB,SAASr5B,EAAQvnB,YAAY9hB,GAAIhiC,EAC/F,CACA,GAAIqrE,EAAQw6B,eAAiBx6B,EAAQw6B,cAAc1kG,OAE/C,IADAojG,EAAOsB,cAAgB,GACd7jE,EAAI,EAAGA,EAAIqpC,EAAQw6B,cAAc1kG,SAAU6gC,EAChDuiE,EAAOsB,cAAc7jE,GAAKygE,EAAMh/F,KAAKmiG,uBAAuBlB,SAASr5B,EAAQw6B,cAAc7jE,GAAIhiC,GAEvG,GAAIqrE,EAAQy6B,cAAgBz6B,EAAQy6B,aAAa3kG,OAE7C,IADAojG,EAAOuB,aAAe,GACb9jE,EAAI,EAAGA,EAAIqpC,EAAQy6B,aAAa3kG,SAAU6gC,EAC/CuiE,EAAOuB,aAAa9jE,GAAKygE,EAAMh/F,KAAK8hG,kBAAkBb,SAASr5B,EAAQy6B,aAAa9jE,GAAIhiC,GAEhG,GAAIqrE,EAAQ06B,WAAa16B,EAAQ06B,UAAU5kG,OAEvC,IADAojG,EAAOwB,UAAY,GACV/jE,EAAI,EAAGA,EAAIqpC,EAAQ06B,UAAU5kG,SAAU6gC,EAC5CuiE,EAAOwB,UAAU/jE,GAAKygE,EAAMh/F,KAAKwiG,cAAcvB,SAASr5B,EAAQ06B,UAAU/jE,GAAIhiC,GAEtF,OAAOukG,CACX,EASA5gD,EAAWo/C,UAAUmC,OAAS,WAC1B,OAAO1iG,KAAK+nC,YAAYm6D,SAASliG,KAAM0/F,EAAUM,KAAK2C,cAC1D,EAUAxhD,EAAWyhD,WAAa,SAAoBC,GAIxC,YAHsBtgG,IAAlBsgG,IACAA,EAAgB,uBAEbA,EAAgB,kBAC3B,EAEO1hD,CACV,CAviBiB,GAyiBlBlgD,EAAKmiG,uBAAyB,WAkB1B,SAASA,EAAuBhD,GAC5B,GAAIA,EACA,IAAK,IAAI1sF,EAAOlU,OAAOkU,KAAK0sF,GAAaz8F,EAAI,EAAGA,EAAI+P,EAAK/U,SAAUgF,EACpC,MAAvBy8F,EAAW1sF,EAAK/P,MAChB3D,KAAK0T,EAAK/P,IAAMy8F,EAAW1sF,EAAK/P,IAChD,CAyMA,OAjMAy/F,EAAuB7C,UAAU9+F,IAAM,GAQvC2hG,EAAuB7C,UAAU5gG,MAAQ,GAUzCyjG,EAAuBzjD,OAAS,SAAgBygD,GAC5C,OAAO,IAAIgD,EAAuBhD,EACtC,EAWAgD,EAAuB9xF,OAAS,SAAgBu3D,EAASg4B,GAOrD,OANKA,IACDA,EAAShB,EAAQlgD,UACF,MAAfkpB,EAAQpnE,KAAejC,OAAO43B,eAAeC,KAAKwxC,EAAS,QAC3Dg4B,EAAOC,OAA8B,IAAIC,OAAOl4B,EAAQpnE,KACvC,MAAjBonE,EAAQlpE,OAAiBH,OAAO43B,eAAeC,KAAKwxC,EAAS,UAC7Dg4B,EAAOC,OAA8B,IAAIC,OAAOl4B,EAAQlpE,OACrDkhG,CACX,EAWAuC,EAAuB7B,gBAAkB,SAAyB14B,EAASg4B,GACvE,OAAO7gG,KAAKsR,OAAOu3D,EAASg4B,GAAQM,QACxC,EAaAiC,EAAuB7xF,OAAS,SAAgBiwF,EAAQ7iG,GAC9C6iG,aAAkB7B,IACpB6B,EAAS7B,EAAQhgD,OAAO6hD,IAE5B,IADA,IAAIhlE,OAAiBj6B,IAAX5D,EAAuB6iG,EAAO/1D,IAAM+1D,EAAOv7B,IAAMtnE,EAAQkqE,EAAU,IAAIo3B,EAAMh/F,KAAKmiG,uBACrF5B,EAAOv7B,IAAMzpC,GAAK,CACrB,IAAI83D,EAAMkN,EAAOV,SACjB,OAAQxM,IAAQ,GAChB,KAAK,EACGzrB,EAAQpnE,IAAM+/F,EAAOT,SACrB,MAER,KAAK,EACGl4B,EAAQlpE,MAAQ6hG,EAAOT,SACvB,MAER,QACIS,EAAOE,SAAe,EAANpN,GAGxB,CACA,OAAOzrB,CACX,EAYAu6B,EAAuBzB,gBAAkB,SAAyBH,GAG9D,OAFMA,aAAkB7B,IACpB6B,EAAS,IAAI7B,EAAQ6B,IAClBxhG,KAAKuR,OAAOiwF,EAAQA,EAAOV,SACtC,EAUAsC,EAAuBxB,OAAS,SAAgB/4B,GAC5C,MAAuB,iBAAZA,GAAoC,OAAZA,EACxB,kBACQ,MAAfA,EAAQpnE,KAAeonE,EAAQzxC,eAAe,SACzC2oE,EAAM8B,SAASh5B,EAAQpnE,KACjB,uBACM,MAAjBonE,EAAQlpE,OAAiBkpE,EAAQzxC,eAAe,WAC3C2oE,EAAM8B,SAASh5B,EAAQlpE,OACjB,yBACR,IACX,EAUAyjG,EAAuBtB,WAAa,SAAoBC,GACpD,GAAIA,aAAkB9B,EAAMh/F,KAAKmiG,uBAC7B,OAAOrB,EACX,IAAIl5B,EAAU,IAAIo3B,EAAMh/F,KAAKmiG,uBAK7B,OAJkB,MAAdrB,EAAOtgG,MACPonE,EAAQpnE,IAAM8iF,OAAOwd,EAAOtgG,MACZ,MAAhBsgG,EAAOpiG,QACPkpE,EAAQlpE,MAAQ4kF,OAAOwd,EAAOpiG,QAC3BkpE,CACX,EAWAu6B,EAAuBlB,SAAW,SAAkBr5B,EAASrrE,GACpDA,IACDA,EAAU,CAAC,GACf,IAAIukG,EAAS,CAAC,EASd,OARIvkG,EAAQ4kG,WACRL,EAAOtgG,IAAM,GACbsgG,EAAOpiG,MAAQ,IAEA,MAAfkpE,EAAQpnE,KAAeonE,EAAQzxC,eAAe,SAC9C2qE,EAAOtgG,IAAMonE,EAAQpnE,KACJ,MAAjBonE,EAAQlpE,OAAiBkpE,EAAQzxC,eAAe,WAChD2qE,EAAOpiG,MAAQkpE,EAAQlpE,OACpBoiG,CACX,EASAqB,EAAuB7C,UAAUmC,OAAS,WACtC,OAAO1iG,KAAK+nC,YAAYm6D,SAASliG,KAAM0/F,EAAUM,KAAK2C,cAC1D,EAUAS,EAAuBR,WAAa,SAAoBC,GAIpD,YAHsBtgG,IAAlBsgG,IACAA,EAAgB,uBAEbA,EAAgB,8BAC3B,EAEOO,CACV,CAjO6B,GAmO9BniG,EAAKyiG,iBAAmB,WAkBpB,SAASA,EAAiBtD,GAEtB,GADApgG,KAAK2jG,0BAA4B,GAC7BvD,EACA,IAAK,IAAI1sF,EAAOlU,OAAOkU,KAAK0sF,GAAaz8F,EAAI,EAAGA,EAAI+P,EAAK/U,SAAUgF,EACpC,MAAvBy8F,EAAW1sF,EAAK/P,MAChB3D,KAAK0T,EAAK/P,IAAMy8F,EAAW1sF,EAAK/P,IAChD,CA6NA,OArNA+/F,EAAiBnD,UAAUqD,WAAa,GAQxCF,EAAiBnD,UAAUoD,0BAA4B5D,EAAMa,WAU7D8C,EAAiB/jD,OAAS,SAAgBygD,GACtC,OAAO,IAAIsD,EAAiBtD,EAChC,EAWAsD,EAAiBpyF,OAAS,SAAgBu3D,EAASg4B,GAK/C,GAJKA,IACDA,EAAShB,EAAQlgD,UACK,MAAtBkpB,EAAQ+6B,YAAsBpkG,OAAO43B,eAAeC,KAAKwxC,EAAS,eAClEg4B,EAAOC,OAA8B,IAAIC,OAAOl4B,EAAQ+6B,YACnB,MAArC/6B,EAAQ86B,2BAAqC96B,EAAQ86B,0BAA0BhlG,OAC/E,IAAK,IAAIgF,EAAI,EAAGA,EAAIklE,EAAQ86B,0BAA0BhlG,SAAUgF,EAC5Ds8F,EAAMh/F,KAAKmiG,uBAAuB9xF,OAAOu3D,EAAQ86B,0BAA0BhgG,GAAIk9F,EAAOC,OAA8B,IAAII,QAAQC,SACxI,OAAON,CACX,EAWA6C,EAAiBnC,gBAAkB,SAAyB14B,EAASg4B,GACjE,OAAO7gG,KAAKsR,OAAOu3D,EAASg4B,GAAQM,QACxC,EAaAuC,EAAiBnyF,OAAS,SAAgBiwF,EAAQ7iG,GACxC6iG,aAAkB7B,IACpB6B,EAAS7B,EAAQhgD,OAAO6hD,IAE5B,IADA,IAAIhlE,OAAiBj6B,IAAX5D,EAAuB6iG,EAAO/1D,IAAM+1D,EAAOv7B,IAAMtnE,EAAQkqE,EAAU,IAAIo3B,EAAMh/F,KAAKyiG,iBACrFlC,EAAOv7B,IAAMzpC,GAAK,CACrB,IAAI83D,EAAMkN,EAAOV,SACjB,OAAQxM,IAAQ,GAChB,KAAK,EACGzrB,EAAQ+6B,WAAapC,EAAOT,SAC5B,MAER,KAAK,EACSl4B,EAAQ86B,2BAA6B96B,EAAQ86B,0BAA0BhlG,SACzEkqE,EAAQ86B,0BAA4B,IACxC96B,EAAQ86B,0BAA0B5+F,KAAKk7F,EAAMh/F,KAAKmiG,uBAAuB7xF,OAAOiwF,EAAQA,EAAOV,WAC/F,MAER,QACIU,EAAOE,SAAe,EAANpN,GAGxB,CACA,OAAOzrB,CACX,EAYA66B,EAAiB/B,gBAAkB,SAAyBH,GAGxD,OAFMA,aAAkB7B,IACpB6B,EAAS,IAAI7B,EAAQ6B,IAClBxhG,KAAKuR,OAAOiwF,EAAQA,EAAOV,SACtC,EAUA4C,EAAiB9B,OAAS,SAAgB/4B,GACtC,GAAuB,iBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAA0B,MAAtBA,EAAQ+6B,YAAsB/6B,EAAQzxC,eAAe,gBAChD2oE,EAAM8B,SAASh5B,EAAQ+6B,YACxB,MAAO,8BACf,GAAyC,MAArC/6B,EAAQ86B,2BAAqC96B,EAAQzxC,eAAe,6BAA8B,CAClG,IAAK1zB,MAAM+lC,QAAQo/B,EAAQ86B,2BACvB,MAAO,4CACX,IAAK,IAAIhgG,EAAI,EAAGA,EAAIklE,EAAQ86B,0BAA0BhlG,SAAUgF,EAAG,CAC/D,IAAIkgC,EAAQo8D,EAAMh/F,KAAKmiG,uBAAuBxB,OAAO/4B,EAAQ86B,0BAA0BhgG,IACvF,GAAIkgC,EACA,MAAO,6BAA+BA,CAC9C,CACJ,CACA,OAAO,IACX,EAUA6/D,EAAiB5B,WAAa,SAAoBC,GAC9C,GAAIA,aAAkB9B,EAAMh/F,KAAKyiG,iBAC7B,OAAO3B,EACX,IAAIl5B,EAAU,IAAIo3B,EAAMh/F,KAAKyiG,iBAG7B,GAFyB,MAArB3B,EAAO6B,aACP/6B,EAAQ+6B,WAAarf,OAAOwd,EAAO6B,aACnC7B,EAAO4B,0BAA2B,CAClC,IAAKjgG,MAAM+lC,QAAQs4D,EAAO4B,2BACtB,MAAMh2E,UAAU,oEACpBk7C,EAAQ86B,0BAA4B,GACpC,IAAK,IAAIhgG,EAAI,EAAGA,EAAIo+F,EAAO4B,0BAA0BhlG,SAAUgF,EAAG,CAC9D,GAAmD,iBAAxCo+F,EAAO4B,0BAA0BhgG,GACxC,MAAMgqB,UAAU,qEACpBk7C,EAAQ86B,0BAA0BhgG,GAAKs8F,EAAMh/F,KAAKmiG,uBAAuBtB,WAAWC,EAAO4B,0BAA0BhgG,GACzH,CACJ,CACA,OAAOklE,CACX,EAWA66B,EAAiBxB,SAAW,SAAkBr5B,EAASrrE,GAC9CA,IACDA,EAAU,CAAC,GACf,IAAIukG,EAAS,CAAC,EAOd,IANIvkG,EAAQ2kG,QAAU3kG,EAAQ4kG,YAC1BL,EAAO4B,0BAA4B,IACnCnmG,EAAQ4kG,WACRL,EAAO6B,WAAa,IACE,MAAtB/6B,EAAQ+6B,YAAsB/6B,EAAQzxC,eAAe,gBACrD2qE,EAAO6B,WAAa/6B,EAAQ+6B,YAC5B/6B,EAAQ86B,2BAA6B96B,EAAQ86B,0BAA0BhlG,OAAQ,CAC/EojG,EAAO4B,0BAA4B,GACnC,IAAK,IAAInkE,EAAI,EAAGA,EAAIqpC,EAAQ86B,0BAA0BhlG,SAAU6gC,EAC5DuiE,EAAO4B,0BAA0BnkE,GAAKygE,EAAMh/F,KAAKmiG,uBAAuBlB,SAASr5B,EAAQ86B,0BAA0BnkE,GAAIhiC,EAC/H,CACA,OAAOukG,CACX,EASA2B,EAAiBnD,UAAUmC,OAAS,WAChC,OAAO1iG,KAAK+nC,YAAYm6D,SAASliG,KAAM0/F,EAAUM,KAAK2C,cAC1D,EAUAe,EAAiBd,WAAa,SAAoBC,GAI9C,YAHsBtgG,IAAlBsgG,IACAA,EAAgB,uBAEbA,EAAgB,wBAC3B,EAEOa,CACV,CAtPuB,GAwPxBziG,EAAKy4C,WAAa,WAyBd,SAASA,EAAW0mD,GAQhB,GAPApgG,KAAKuQ,KAAO,GACZvQ,KAAKi4C,YAAc,GACnBj4C,KAAK6jG,kBAAoB,GACzB7jG,KAAKua,MAAQ,GACbva,KAAK+I,OAAS,GACd/I,KAAKm4C,UAAY,GACjBn4C,KAAK8jG,uBAAyB,GAC1B1D,EACA,IAAK,IAAI1sF,EAAOlU,OAAOkU,KAAK0sF,GAAaz8F,EAAI,EAAGA,EAAI+P,EAAK/U,SAAUgF,EACpC,MAAvBy8F,EAAW1sF,EAAK/P,MAChB3D,KAAK0T,EAAK/P,IAAMy8F,EAAW1sF,EAAK/P,IAChD,CAifA,OAzeA+1C,EAAW6mD,UAAUhwF,KAAOwvF,EAAMa,WAQlClnD,EAAW6mD,UAAUlgG,KAAO,GAQ5Bq5C,EAAW6mD,UAAUtoD,YAAc8nD,EAAMa,WAQzClnD,EAAW6mD,UAAUsD,kBAAoB9D,EAAMa,WAQ/ClnD,EAAW6mD,UAAUj2C,UAAY,GAQjC5Q,EAAW6mD,UAAUhmF,MAAQwlF,EAAMa,WAQnClnD,EAAW6mD,UAAUx3F,OAASg3F,EAAMa,WAQpClnD,EAAW6mD,UAAUpoD,UAAY4nD,EAAMa,WAQvClnD,EAAW6mD,UAAUuD,uBAAyB/D,EAAMa,WAUpDlnD,EAAWiG,OAAS,SAAgBygD,GAChC,OAAO,IAAI1mD,EAAW0mD,EAC1B,EAWA1mD,EAAWpoC,OAAS,SAAgBu3D,EAASg4B,GAGzC,GAFKA,IACDA,EAAShB,EAAQlgD,UACD,MAAhBkpB,EAAQt4D,MAAgBs4D,EAAQt4D,KAAK5R,OACrC,IAAK,IAAIgF,EAAI,EAAGA,EAAIklE,EAAQt4D,KAAK5R,SAAUgF,EACvCs8F,EAAMh/F,KAAKw3C,UAAUnnC,OAAOu3D,EAAQt4D,KAAK5M,GAAIk9F,EAAOC,OAA8B,IAAII,QAAQC,SAGtG,GAFoB,MAAhBt4B,EAAQxoE,MAAgBb,OAAO43B,eAAeC,KAAKwxC,EAAS,SAC5Dg4B,EAAOC,OAA8B,IAAIC,OAAOl4B,EAAQxoE,MACjC,MAAvBwoE,EAAQ5wB,aAAuB4wB,EAAQ5wB,YAAYt5C,OACnD,IAASgF,EAAI,EAAGA,EAAIklE,EAAQ5wB,YAAYt5C,SAAUgF,EAC9Cs8F,EAAMh/F,KAAKs9D,YAAYjtD,OAAOu3D,EAAQ5wB,YAAYt0C,GAAIk9F,EAAOC,OAA8B,IAAII,QAAQC,SAG/G,GAFyB,MAArBt4B,EAAQve,WAAqB9qD,OAAO43B,eAAeC,KAAKwxC,EAAS,cACjEg4B,EAAOC,OAA+B,IAAIC,OAAOl4B,EAAQve,WACxC,MAAjBue,EAAQtuD,OAAiBsuD,EAAQtuD,MAAM5b,OACvC,IAASgF,EAAI,EAAGA,EAAIklE,EAAQtuD,MAAM5b,SAAUgF,EACxCs8F,EAAMh/F,KAAK6hG,eAAexxF,OAAOu3D,EAAQtuD,MAAM5W,GAAIk9F,EAAOC,OAA+B,IAAII,QAAQC,SAC7G,GAAsB,MAAlBt4B,EAAQ9/D,QAAkB8/D,EAAQ9/D,OAAOpK,OACzC,IAASgF,EAAI,EAAGA,EAAIklE,EAAQ9/D,OAAOpK,SAAUgF,EACzCs8F,EAAMh/F,KAAK6hG,eAAexxF,OAAOu3D,EAAQ9/D,OAAOpF,GAAIk9F,EAAOC,OAA+B,IAAII,QAAQC,SAC9G,GAAyB,MAArBt4B,EAAQ1wB,WAAqB0wB,EAAQ1wB,UAAUx5C,OAC/C,IAASgF,EAAI,EAAGA,EAAIklE,EAAQ1wB,UAAUx5C,SAAUgF,EAC5Cs8F,EAAMh/F,KAAK6hG,eAAexxF,OAAOu3D,EAAQ1wB,UAAUx0C,GAAIk9F,EAAOC,OAA+B,KAAKI,QAAQC,SAClH,GAAsC,MAAlCt4B,EAAQi7B,wBAAkCj7B,EAAQi7B,uBAAuBnlG,OACzE,IAASgF,EAAI,EAAGA,EAAIklE,EAAQi7B,uBAAuBnlG,SAAUgF,EACzDs8F,EAAMh/F,KAAKyiG,iBAAiBpyF,OAAOu3D,EAAQi7B,uBAAuBngG,GAAIk9F,EAAOC,OAA+B,KAAKI,QAAQC,SACjI,GAAiC,MAA7Bt4B,EAAQg7B,mBAA6Bh7B,EAAQg7B,kBAAkBllG,OAC/D,IAASgF,EAAI,EAAGA,EAAIklE,EAAQg7B,kBAAkBllG,SAAUgF,EACpDs8F,EAAMh/F,KAAKqgG,kBAAkBhwF,OAAOu3D,EAAQg7B,kBAAkBlgG,GAAIk9F,EAAOC,OAA+B,KAAKI,QAAQC,SAC7H,OAAON,CACX,EAWAnnD,EAAW6nD,gBAAkB,SAAyB14B,EAASg4B,GAC3D,OAAO7gG,KAAKsR,OAAOu3D,EAASg4B,GAAQM,QACxC,EAaAznD,EAAWnoC,OAAS,SAAgBiwF,EAAQ7iG,GAClC6iG,aAAkB7B,IACpB6B,EAAS7B,EAAQhgD,OAAO6hD,IAE5B,IADA,IAAIhlE,OAAiBj6B,IAAX5D,EAAuB6iG,EAAO/1D,IAAM+1D,EAAOv7B,IAAMtnE,EAAQkqE,EAAU,IAAIo3B,EAAMh/F,KAAKy4C,WACrF8nD,EAAOv7B,IAAMzpC,GAAK,CACrB,IAAI83D,EAAMkN,EAAOV,SACjB,OAAQxM,IAAQ,GAChB,KAAK,EACSzrB,EAAQt4D,MAAQs4D,EAAQt4D,KAAK5R,SAC/BkqE,EAAQt4D,KAAO,IACnBs4D,EAAQt4D,KAAKxL,KAAKk7F,EAAMh/F,KAAKw3C,UAAUlnC,OAAOiwF,EAAQA,EAAOV,WAC7D,MAER,KAAK,EACGj4B,EAAQxoE,KAAOmhG,EAAOT,SACtB,MAER,KAAK,EACSl4B,EAAQ5wB,aAAe4wB,EAAQ5wB,YAAYt5C,SAC7CkqE,EAAQ5wB,YAAc,IAC1B4wB,EAAQ5wB,YAAYlzC,KAAKk7F,EAAMh/F,KAAKs9D,YAAYhtD,OAAOiwF,EAAQA,EAAOV,WACtE,MAER,KAAK,GACSj4B,EAAQg7B,mBAAqBh7B,EAAQg7B,kBAAkBllG,SACzDkqE,EAAQg7B,kBAAoB,IAChCh7B,EAAQg7B,kBAAkB9+F,KAAKk7F,EAAMh/F,KAAKqgG,kBAAkB/vF,OAAOiwF,EAAQA,EAAOV,WAClF,MAER,KAAK,GACGj4B,EAAQve,UAAYk3C,EAAOT,SAC3B,MAER,KAAK,GACSl4B,EAAQtuD,OAASsuD,EAAQtuD,MAAM5b,SACjCkqE,EAAQtuD,MAAQ,IACpBsuD,EAAQtuD,MAAMxV,KAAKk7F,EAAMh/F,KAAK6hG,eAAevxF,OAAOiwF,EAAQA,EAAOV,WACnE,MAER,KAAK,GACSj4B,EAAQ9/D,QAAU8/D,EAAQ9/D,OAAOpK,SACnCkqE,EAAQ9/D,OAAS,IACrB8/D,EAAQ9/D,OAAOhE,KAAKk7F,EAAMh/F,KAAK6hG,eAAevxF,OAAOiwF,EAAQA,EAAOV,WACpE,MAER,KAAK,GACSj4B,EAAQ1wB,WAAa0wB,EAAQ1wB,UAAUx5C,SACzCkqE,EAAQ1wB,UAAY,IACxB0wB,EAAQ1wB,UAAUpzC,KAAKk7F,EAAMh/F,KAAK6hG,eAAevxF,OAAOiwF,EAAQA,EAAOV,WACvE,MAER,KAAK,GACSj4B,EAAQi7B,wBAA0Bj7B,EAAQi7B,uBAAuBnlG,SACnEkqE,EAAQi7B,uBAAyB,IACrCj7B,EAAQi7B,uBAAuB/+F,KAAKk7F,EAAMh/F,KAAKyiG,iBAAiBnyF,OAAOiwF,EAAQA,EAAOV,WACtF,MAER,QACIU,EAAOE,SAAe,EAANpN,GAGxB,CACA,OAAOzrB,CACX,EAYAnvB,EAAWioD,gBAAkB,SAAyBH,GAGlD,OAFMA,aAAkB7B,IACpB6B,EAAS,IAAI7B,EAAQ6B,IAClBxhG,KAAKuR,OAAOiwF,EAAQA,EAAOV,SACtC,EAUApnD,EAAWkoD,OAAS,SAAgB/4B,GAChC,GAAuB,iBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAoB,MAAhBA,EAAQt4D,MAAgBs4D,EAAQzxC,eAAe,QAAS,CACxD,IAAK1zB,MAAM+lC,QAAQo/B,EAAQt4D,MACvB,MAAO,uBACX,IAAK,IAAI5M,EAAI,EAAGA,EAAIklE,EAAQt4D,KAAK5R,SAAUgF,EAEvC,GADIkgC,EAAQo8D,EAAMh/F,KAAKw3C,UAAUmpD,OAAO/4B,EAAQt4D,KAAK5M,IAEjD,MAAO,QAAUkgC,CAE7B,CACA,GAAoB,MAAhBglC,EAAQxoE,MAAgBwoE,EAAQzxC,eAAe,UAC1C2oE,EAAM8B,SAASh5B,EAAQxoE,MACxB,MAAO,wBACf,GAA2B,MAAvBwoE,EAAQ5wB,aAAuB4wB,EAAQzxC,eAAe,eAAgB,CACtE,IAAK1zB,MAAM+lC,QAAQo/B,EAAQ5wB,aACvB,MAAO,8BACX,IAASt0C,EAAI,EAAGA,EAAIklE,EAAQ5wB,YAAYt5C,SAAUgF,EAE9C,GADIkgC,EAAQo8D,EAAMh/F,KAAKs9D,YAAYqjC,OAAO/4B,EAAQ5wB,YAAYt0C,IAE1D,MAAO,eAAiBkgC,CAEpC,CACA,GAAiC,MAA7BglC,EAAQg7B,mBAA6Bh7B,EAAQzxC,eAAe,qBAAsB,CAClF,IAAK1zB,MAAM+lC,QAAQo/B,EAAQg7B,mBACvB,MAAO,oCACX,IAASlgG,EAAI,EAAGA,EAAIklE,EAAQg7B,kBAAkBllG,SAAUgF,EAEpD,GADIkgC,EAAQo8D,EAAMh/F,KAAKqgG,kBAAkBM,OAAO/4B,EAAQg7B,kBAAkBlgG,IAEtE,MAAO,qBAAuBkgC,CAE1C,CACA,GAAyB,MAArBglC,EAAQve,WAAqBue,EAAQzxC,eAAe,eAC/C2oE,EAAM8B,SAASh5B,EAAQve,WACxB,MAAO,6BACf,GAAqB,MAAjBue,EAAQtuD,OAAiBsuD,EAAQzxC,eAAe,SAAU,CAC1D,IAAK1zB,MAAM+lC,QAAQo/B,EAAQtuD,OACvB,MAAO,wBACX,IAAS5W,EAAI,EAAGA,EAAIklE,EAAQtuD,MAAM5b,SAAUgF,EAExC,GADIkgC,EAAQo8D,EAAMh/F,KAAK6hG,eAAelB,OAAO/4B,EAAQtuD,MAAM5W,IAEvD,MAAO,SAAWkgC,CAE9B,CACA,GAAsB,MAAlBglC,EAAQ9/D,QAAkB8/D,EAAQzxC,eAAe,UAAW,CAC5D,IAAK1zB,MAAM+lC,QAAQo/B,EAAQ9/D,QACvB,MAAO,yBACX,IAASpF,EAAI,EAAGA,EAAIklE,EAAQ9/D,OAAOpK,SAAUgF,EAEzC,GADIkgC,EAAQo8D,EAAMh/F,KAAK6hG,eAAelB,OAAO/4B,EAAQ9/D,OAAOpF,IAExD,MAAO,UAAYkgC,CAE/B,CACA,GAAyB,MAArBglC,EAAQ1wB,WAAqB0wB,EAAQzxC,eAAe,aAAc,CAClE,IAAK1zB,MAAM+lC,QAAQo/B,EAAQ1wB,WACvB,MAAO,4BACX,IAASx0C,EAAI,EAAGA,EAAIklE,EAAQ1wB,UAAUx5C,SAAUgF,EAE5C,GADIkgC,EAAQo8D,EAAMh/F,KAAK6hG,eAAelB,OAAO/4B,EAAQ1wB,UAAUx0C,IAE3D,MAAO,aAAekgC,CAElC,CACA,GAAsC,MAAlCglC,EAAQi7B,wBAAkCj7B,EAAQzxC,eAAe,0BAA2B,CAC5F,IAAK1zB,MAAM+lC,QAAQo/B,EAAQi7B,wBACvB,MAAO,yCACX,IAASngG,EAAI,EAAGA,EAAIklE,EAAQi7B,uBAAuBnlG,SAAUgF,EAAG,CAC5D,IAAIkgC,EACJ,GADIA,EAAQo8D,EAAMh/F,KAAKyiG,iBAAiB9B,OAAO/4B,EAAQi7B,uBAAuBngG,IAE1E,MAAO,0BAA4BkgC,CAC3C,CACJ,CACA,OAAO,IACX,EAUA6V,EAAWooD,WAAa,SAAoBC,GACxC,GAAIA,aAAkB9B,EAAMh/F,KAAKy4C,WAC7B,OAAOqoD,EACX,IAAIl5B,EAAU,IAAIo3B,EAAMh/F,KAAKy4C,WAC7B,GAAIqoD,EAAOxxF,KAAM,CACb,IAAK7M,MAAM+lC,QAAQs4D,EAAOxxF,MACtB,MAAMod,UAAU,yCACpBk7C,EAAQt4D,KAAO,GACf,IAAK,IAAI5M,EAAI,EAAGA,EAAIo+F,EAAOxxF,KAAK5R,SAAUgF,EAAG,CACzC,GAA8B,iBAAnBo+F,EAAOxxF,KAAK5M,GACnB,MAAMgqB,UAAU,0CACpBk7C,EAAQt4D,KAAK5M,GAAKs8F,EAAMh/F,KAAKw3C,UAAUqpD,WAAWC,EAAOxxF,KAAK5M,GAClE,CACJ,CAGA,GAFmB,MAAfo+F,EAAO1hG,OACPwoE,EAAQxoE,KAAOkkF,OAAOwd,EAAO1hG,OAC7B0hG,EAAO9pD,YAAa,CACpB,IAAKv0C,MAAM+lC,QAAQs4D,EAAO9pD,aACtB,MAAMtqB,UAAU,gDAEpB,IADAk7C,EAAQ5wB,YAAc,GACbt0C,EAAI,EAAGA,EAAIo+F,EAAO9pD,YAAYt5C,SAAUgF,EAAG,CAChD,GAAqC,iBAA1Bo+F,EAAO9pD,YAAYt0C,GAC1B,MAAMgqB,UAAU,iDACpBk7C,EAAQ5wB,YAAYt0C,GAAKs8F,EAAMh/F,KAAKs9D,YAAYujC,WAAWC,EAAO9pD,YAAYt0C,GAClF,CACJ,CACA,GAAIo+F,EAAO8B,kBAAmB,CAC1B,IAAKngG,MAAM+lC,QAAQs4D,EAAO8B,mBACtB,MAAMl2E,UAAU,sDAEpB,IADAk7C,EAAQg7B,kBAAoB,GACnBlgG,EAAI,EAAGA,EAAIo+F,EAAO8B,kBAAkBllG,SAAUgF,EAAG,CACtD,GAA2C,iBAAhCo+F,EAAO8B,kBAAkBlgG,GAChC,MAAMgqB,UAAU,uDACpBk7C,EAAQg7B,kBAAkBlgG,GAAKs8F,EAAMh/F,KAAKqgG,kBAAkBQ,WAAWC,EAAO8B,kBAAkBlgG,GACpG,CACJ,CAGA,GAFwB,MAApBo+F,EAAOz3C,YACPue,EAAQve,UAAYi6B,OAAOwd,EAAOz3C,YAClCy3C,EAAOxnF,MAAO,CACd,IAAK7W,MAAM+lC,QAAQs4D,EAAOxnF,OACtB,MAAMoT,UAAU,0CAEpB,IADAk7C,EAAQtuD,MAAQ,GACP5W,EAAI,EAAGA,EAAIo+F,EAAOxnF,MAAM5b,SAAUgF,EAAG,CAC1C,GAA+B,iBAApBo+F,EAAOxnF,MAAM5W,GACpB,MAAMgqB,UAAU,2CACpBk7C,EAAQtuD,MAAM5W,GAAKs8F,EAAMh/F,KAAK6hG,eAAehB,WAAWC,EAAOxnF,MAAM5W,GACzE,CACJ,CACA,GAAIo+F,EAAOh5F,OAAQ,CACf,IAAKrF,MAAM+lC,QAAQs4D,EAAOh5F,QACtB,MAAM4kB,UAAU,2CAEpB,IADAk7C,EAAQ9/D,OAAS,GACRpF,EAAI,EAAGA,EAAIo+F,EAAOh5F,OAAOpK,SAAUgF,EAAG,CAC3C,GAAgC,iBAArBo+F,EAAOh5F,OAAOpF,GACrB,MAAMgqB,UAAU,4CACpBk7C,EAAQ9/D,OAAOpF,GAAKs8F,EAAMh/F,KAAK6hG,eAAehB,WAAWC,EAAOh5F,OAAOpF,GAC3E,CACJ,CACA,GAAIo+F,EAAO5pD,UAAW,CAClB,IAAKz0C,MAAM+lC,QAAQs4D,EAAO5pD,WACtB,MAAMxqB,UAAU,8CAEpB,IADAk7C,EAAQ1wB,UAAY,GACXx0C,EAAI,EAAGA,EAAIo+F,EAAO5pD,UAAUx5C,SAAUgF,EAAG,CAC9C,GAAmC,iBAAxBo+F,EAAO5pD,UAAUx0C,GACxB,MAAMgqB,UAAU,+CACpBk7C,EAAQ1wB,UAAUx0C,GAAKs8F,EAAMh/F,KAAK6hG,eAAehB,WAAWC,EAAO5pD,UAAUx0C,GACjF,CACJ,CACA,GAAIo+F,EAAO+B,uBAAwB,CAC/B,IAAKpgG,MAAM+lC,QAAQs4D,EAAO+B,wBACtB,MAAMn2E,UAAU,2DAEpB,IADAk7C,EAAQi7B,uBAAyB,GACxBngG,EAAI,EAAGA,EAAIo+F,EAAO+B,uBAAuBnlG,SAAUgF,EAAG,CAC3D,GAAgD,iBAArCo+F,EAAO+B,uBAAuBngG,GACrC,MAAMgqB,UAAU,4DACpBk7C,EAAQi7B,uBAAuBngG,GAAKs8F,EAAMh/F,KAAKyiG,iBAAiB5B,WAAWC,EAAO+B,uBAAuBngG,GAC7G,CACJ,CACA,OAAOklE,CACX,EAWAnvB,EAAWwoD,SAAW,SAAkBr5B,EAASrrE,GACxCA,IACDA,EAAU,CAAC,GACf,IAAIukG,EAAS,CAAC,EAcd,IAbIvkG,EAAQ2kG,QAAU3kG,EAAQ4kG,YAC1BL,EAAOxxF,KAAO,GACdwxF,EAAO9pD,YAAc,GACrB8pD,EAAOxnF,MAAQ,GACfwnF,EAAOh5F,OAAS,GAChBg5F,EAAO5pD,UAAY,GACnB4pD,EAAO+B,uBAAyB,GAChC/B,EAAO8B,kBAAoB,IAE3BrmG,EAAQ4kG,WACRL,EAAO1hG,KAAO,GACd0hG,EAAOz3C,UAAY,IAEnBue,EAAQt4D,MAAQs4D,EAAQt4D,KAAK5R,OAAQ,CACrCojG,EAAOxxF,KAAO,GACd,IAAK,IAAIivB,EAAI,EAAGA,EAAIqpC,EAAQt4D,KAAK5R,SAAU6gC,EACvCuiE,EAAOxxF,KAAKivB,GAAKygE,EAAMh/F,KAAKw3C,UAAUypD,SAASr5B,EAAQt4D,KAAKivB,GAAIhiC,EACxE,CAGA,GAFoB,MAAhBqrE,EAAQxoE,MAAgBwoE,EAAQzxC,eAAe,UAC/C2qE,EAAO1hG,KAAOwoE,EAAQxoE,MACtBwoE,EAAQ5wB,aAAe4wB,EAAQ5wB,YAAYt5C,OAE3C,IADAojG,EAAO9pD,YAAc,GACZzY,EAAI,EAAGA,EAAIqpC,EAAQ5wB,YAAYt5C,SAAU6gC,EAC9CuiE,EAAO9pD,YAAYzY,GAAKygE,EAAMh/F,KAAKs9D,YAAY2jC,SAASr5B,EAAQ5wB,YAAYzY,GAAIhiC,GAIxF,GAFyB,MAArBqrE,EAAQve,WAAqBue,EAAQzxC,eAAe,eACpD2qE,EAAOz3C,UAAYue,EAAQve,WAC3Bue,EAAQtuD,OAASsuD,EAAQtuD,MAAM5b,OAE/B,IADAojG,EAAOxnF,MAAQ,GACNilB,EAAI,EAAGA,EAAIqpC,EAAQtuD,MAAM5b,SAAU6gC,EACxCuiE,EAAOxnF,MAAMilB,GAAKygE,EAAMh/F,KAAK6hG,eAAeZ,SAASr5B,EAAQtuD,MAAMilB,GAAIhiC,GAE/E,GAAIqrE,EAAQ9/D,QAAU8/D,EAAQ9/D,OAAOpK,OAEjC,IADAojG,EAAOh5F,OAAS,GACPy2B,EAAI,EAAGA,EAAIqpC,EAAQ9/D,OAAOpK,SAAU6gC,EACzCuiE,EAAOh5F,OAAOy2B,GAAKygE,EAAMh/F,KAAK6hG,eAAeZ,SAASr5B,EAAQ9/D,OAAOy2B,GAAIhiC,GAEjF,GAAIqrE,EAAQ1wB,WAAa0wB,EAAQ1wB,UAAUx5C,OAEvC,IADAojG,EAAO5pD,UAAY,GACV3Y,EAAI,EAAGA,EAAIqpC,EAAQ1wB,UAAUx5C,SAAU6gC,EAC5CuiE,EAAO5pD,UAAU3Y,GAAKygE,EAAMh/F,KAAK6hG,eAAeZ,SAASr5B,EAAQ1wB,UAAU3Y,GAAIhiC,GAEvF,GAAIqrE,EAAQi7B,wBAA0Bj7B,EAAQi7B,uBAAuBnlG,OAEjE,IADAojG,EAAO+B,uBAAyB,GACvBtkE,EAAI,EAAGA,EAAIqpC,EAAQi7B,uBAAuBnlG,SAAU6gC,EACzDuiE,EAAO+B,uBAAuBtkE,GAAKygE,EAAMh/F,KAAKyiG,iBAAiBxB,SAASr5B,EAAQi7B,uBAAuBtkE,GAAIhiC,GAEnH,GAAIqrE,EAAQg7B,mBAAqBh7B,EAAQg7B,kBAAkBllG,OAEvD,IADAojG,EAAO8B,kBAAoB,GAClBrkE,EAAI,EAAGA,EAAIqpC,EAAQg7B,kBAAkBllG,SAAU6gC,EACpDuiE,EAAO8B,kBAAkBrkE,GAAKygE,EAAMh/F,KAAKqgG,kBAAkBY,SAASr5B,EAAQg7B,kBAAkBrkE,GAAIhiC,GAE1G,OAAOukG,CACX,EASAroD,EAAW6mD,UAAUmC,OAAS,WAC1B,OAAO1iG,KAAK+nC,YAAYm6D,SAASliG,KAAM0/F,EAAUM,KAAK2C,cAC1D,EAUAjpD,EAAWkpD,WAAa,SAAoBC,GAIxC,YAHsBtgG,IAAlBsgG,IACAA,EAAgB,uBAEbA,EAAgB,kBAC3B,EAEOnpD,CACV,CAvhBiB,GAyhBlBz4C,EAAKs9D,YAAc,WA8Bf,SAASA,EAAY6hC,GASjB,GARApgG,KAAKiY,KAAO,GACZjY,KAAKk2B,UAAY,GACjBl2B,KAAK++D,UAAY,GACjB/+D,KAAKivD,WAAa,GAClBjvD,KAAKi/D,UAAY,GACjBj/D,KAAK+jG,aAAe,GACpB/jG,KAAKm/D,WAAa,GAClBn/D,KAAKs/D,WAAa,GACd8gC,EACA,IAAK,IAAI1sF,EAAOlU,OAAOkU,KAAK0sF,GAAaz8F,EAAI,EAAGA,EAAI+P,EAAK/U,SAAUgF,EACpC,MAAvBy8F,EAAW1sF,EAAK/P,MAChB3D,KAAK0T,EAAK/P,IAAMy8F,EAAW1sF,EAAK/P,IAChD,CAmgCA,OA3/BA46D,EAAYgiC,UAAUtoF,KAAO8nF,EAAMa,WAQnCriC,EAAYgiC,UAAUvmF,SAAW,EAQjCukD,EAAYgiC,UAAUyD,QAAU,KAQhCzlC,EAAYgiC,UAAUrqE,UAAY6pE,EAAMa,WAQxCriC,EAAYgiC,UAAUxhC,UAAYghC,EAAMa,WAQxCriC,EAAYgiC,UAAUtxC,WAAa8wC,EAAMa,WAQzCriC,EAAYgiC,UAAUthC,UAAY8gC,EAAMa,WAQxCriC,EAAYgiC,UAAUlgG,KAAO,GAQ7Bk+D,EAAYgiC,UAAUj2C,UAAY,GAQlCiU,EAAYgiC,UAAUzxC,QAAUixC,EAAMU,UAAU,IAQhDliC,EAAYgiC,UAAUwD,aAAehE,EAAMa,WAQ3CriC,EAAYgiC,UAAU0D,aAAe,EAQrC1lC,EAAYgiC,UAAUphC,WAAa4gC,EAAMa,WAQzCriC,EAAYgiC,UAAUjhC,WAAaygC,EAAMa,WAUzCriC,EAAY5e,OAAS,SAAgBygD,GACjC,OAAO,IAAI7hC,EAAY6hC,EAC3B,EAWA7hC,EAAYjtD,OAAS,SAAgBu3D,EAASg4B,GAG1C,GAFKA,IACDA,EAAShB,EAAQlgD,UACD,MAAhBkpB,EAAQ5wD,MAAgB4wD,EAAQ5wD,KAAKtZ,OAAQ,CAC7CkiG,EAAOC,OAA8B,IAAII,OACzC,IAAK,IAAIv9F,EAAI,EAAGA,EAAIklE,EAAQ5wD,KAAKtZ,SAAUgF,EACvCk9F,EAAOI,MAAMp4B,EAAQ5wD,KAAKtU,IAC9Bk9F,EAAOM,QACX,CAKA,GAJwB,MAApBt4B,EAAQ7uD,UAAoBxa,OAAO43B,eAAeC,KAAKwxC,EAAS,aAChEg4B,EAAOC,OAA8B,IAAIO,MAAMx4B,EAAQ7uD,UACpC,MAAnB6uD,EAAQm7B,SAAmBxkG,OAAO43B,eAAeC,KAAKwxC,EAAS,YAC/Do3B,EAAMh/F,KAAKs9D,YAAY2lC,QAAQ5yF,OAAOu3D,EAAQm7B,QAASnD,EAAOC,OAA8B,IAAII,QAAQC,SACnF,MAArBt4B,EAAQ3yC,WAAqB2yC,EAAQ3yC,UAAUv3B,OAAQ,CAEvD,IADAkiG,EAAOC,OAA8B,IAAII,OAChCv9F,EAAI,EAAGA,EAAIklE,EAAQ3yC,UAAUv3B,SAAUgF,EAC5Ck9F,EAAOG,MAAMn4B,EAAQ3yC,UAAUvyB,IACnCk9F,EAAOM,QACX,CACA,GAAyB,MAArBt4B,EAAQ9J,WAAqB8J,EAAQ9J,UAAUpgE,OAAQ,CAEvD,IADAkiG,EAAOC,OAA8B,IAAII,OAChCv9F,EAAI,EAAGA,EAAIklE,EAAQ9J,UAAUpgE,SAAUgF,EAC5Ck9F,EAAOQ,MAAMx4B,EAAQ9J,UAAUp7D,IACnCk9F,EAAOM,QACX,CACA,GAA0B,MAAtBt4B,EAAQ5Z,YAAsB4Z,EAAQ5Z,WAAWtwD,OACjD,IAASgF,EAAI,EAAGA,EAAIklE,EAAQ5Z,WAAWtwD,SAAUgF,EAC7Ck9F,EAAOC,OAA8B,IAAIj2C,MAAMge,EAAQ5Z,WAAWtrD,IAC1E,GAAyB,MAArBklE,EAAQ5J,WAAqB4J,EAAQ5J,UAAUtgE,OAAQ,CAEvD,IADAkiG,EAAOC,OAA8B,IAAII,OAChCv9F,EAAI,EAAGA,EAAIklE,EAAQ5J,UAAUtgE,SAAUgF,EAC5Ck9F,EAAOI,MAAMp4B,EAAQ5J,UAAUt7D,IACnCk9F,EAAOM,QACX,CAKA,GAJoB,MAAhBt4B,EAAQxoE,MAAgBb,OAAO43B,eAAeC,KAAKwxC,EAAS,SAC5Dg4B,EAAOC,OAA8B,IAAIC,OAAOl4B,EAAQxoE,MACrC,MAAnBwoE,EAAQ/Z,SAAmBtvD,OAAO43B,eAAeC,KAAKwxC,EAAS,YAC/Dg4B,EAAOC,OAA8B,IAAIj2C,MAAMge,EAAQ/Z,SACjC,MAAtB+Z,EAAQ1J,YAAsB0J,EAAQ1J,WAAWxgE,OAAQ,CAEzD,IADAkiG,EAAOC,OAA+B,IAAII,OACjCv9F,EAAI,EAAGA,EAAIklE,EAAQ1J,WAAWxgE,SAAUgF,EAC7Ck9F,EAAOsD,OAAOt7B,EAAQ1J,WAAWx7D,IACrCk9F,EAAOM,QACX,CACA,GAA0B,MAAtBt4B,EAAQvJ,YAAsBuJ,EAAQvJ,WAAW3gE,OAAQ,CAEzD,IADAkiG,EAAOC,OAA+B,IAAII,OACjCv9F,EAAI,EAAGA,EAAIklE,EAAQvJ,WAAW3gE,SAAUgF,EAC7Ck9F,EAAOuD,OAAOv7B,EAAQvJ,WAAW37D,IACrCk9F,EAAOM,QACX,CAGA,GAFyB,MAArBt4B,EAAQve,WAAqB9qD,OAAO43B,eAAeC,KAAKwxC,EAAS,cACjEg4B,EAAOC,OAA+B,IAAIC,OAAOl4B,EAAQve,WACjC,MAAxBue,EAAQk7B,cAAwBl7B,EAAQk7B,aAAaplG,OACrD,IAASgF,EAAI,EAAGA,EAAIklE,EAAQk7B,aAAaplG,SAAUgF,EAC/Cs8F,EAAMh/F,KAAKmiG,uBAAuB9xF,OAAOu3D,EAAQk7B,aAAapgG,GAAIk9F,EAAOC,OAA+B,KAAKI,QAAQC,SAG7H,OAF4B,MAAxBt4B,EAAQo7B,cAAwBzkG,OAAO43B,eAAeC,KAAKwxC,EAAS,iBACpEg4B,EAAOC,OAA+B,KAAKO,MAAMx4B,EAAQo7B,cACtDpD,CACX,EAWAtiC,EAAYgjC,gBAAkB,SAAyB14B,EAASg4B,GAC5D,OAAO7gG,KAAKsR,OAAOu3D,EAASg4B,GAAQM,QACxC,EAaA5iC,EAAYhtD,OAAS,SAAgBiwF,EAAQ7iG,GACnC6iG,aAAkB7B,IACpB6B,EAAS7B,EAAQhgD,OAAO6hD,IAE5B,IADA,IAAIhlE,OAAiBj6B,IAAX5D,EAAuB6iG,EAAO/1D,IAAM+1D,EAAOv7B,IAAMtnE,EAAQkqE,EAAU,IAAIo3B,EAAMh/F,KAAKs9D,YACrFijC,EAAOv7B,IAAMzpC,GAAK,CACrB,IAAI83D,EAAMkN,EAAOV,SACjB,OAAQxM,IAAQ,GAChB,KAAK,EAGG,GAFMzrB,EAAQ5wD,MAAQ4wD,EAAQ5wD,KAAKtZ,SAC/BkqE,EAAQ5wD,KAAO,IACD,IAAP,EAANq8E,GAED,IADA,IAAImN,EAAOD,EAAOV,SAAWU,EAAOv7B,IAC7Bu7B,EAAOv7B,IAAMw7B,GAChB54B,EAAQ5wD,KAAKlT,KAAKy8F,EAAOP,cAE7Bp4B,EAAQ5wD,KAAKlT,KAAKy8F,EAAOP,SAC7B,MAER,KAAK,EACGp4B,EAAQ7uD,SAAWwnF,EAAOH,QAC1B,MAER,KAAK,EACGx4B,EAAQm7B,QAAU/D,EAAMh/F,KAAKs9D,YAAY2lC,QAAQ3yF,OAAOiwF,EAAQA,EAAOV,UACvE,MAER,KAAK,EAGG,GAFMj4B,EAAQ3yC,WAAa2yC,EAAQ3yC,UAAUv3B,SACzCkqE,EAAQ3yC,UAAY,IACN,IAAP,EAANo+D,GAED,IADImN,EAAOD,EAAOV,SAAWU,EAAOv7B,IAC7Bu7B,EAAOv7B,IAAMw7B,GAChB54B,EAAQ3yC,UAAUnxB,KAAKy8F,EAAOR,cAElCn4B,EAAQ3yC,UAAUnxB,KAAKy8F,EAAOR,SAClC,MAER,KAAK,EAGG,GAFMn4B,EAAQ9J,WAAa8J,EAAQ9J,UAAUpgE,SACzCkqE,EAAQ9J,UAAY,IACN,IAAP,EAANu1B,GAED,IADImN,EAAOD,EAAOV,SAAWU,EAAOv7B,IAC7Bu7B,EAAOv7B,IAAMw7B,GAChB54B,EAAQ9J,UAAUh6D,KAAKy8F,EAAOH,cAElCx4B,EAAQ9J,UAAUh6D,KAAKy8F,EAAOH,SAClC,MAER,KAAK,EACSx4B,EAAQ5Z,YAAc4Z,EAAQ5Z,WAAWtwD,SAC3CkqE,EAAQ5Z,WAAa,IACzB4Z,EAAQ5Z,WAAWlqD,KAAKy8F,EAAO32C,SAC/B,MAER,KAAK,EAGG,GAFMge,EAAQ5J,WAAa4J,EAAQ5J,UAAUtgE,SACzCkqE,EAAQ5J,UAAY,IACN,IAAP,EAANq1B,GAED,IADImN,EAAOD,EAAOV,SAAWU,EAAOv7B,IAC7Bu7B,EAAOv7B,IAAMw7B,GAChB54B,EAAQ5J,UAAUl6D,KAAKy8F,EAAOP,cAElCp4B,EAAQ5J,UAAUl6D,KAAKy8F,EAAOP,SAClC,MAER,KAAK,EACGp4B,EAAQxoE,KAAOmhG,EAAOT,SACtB,MAER,KAAK,GACGl4B,EAAQve,UAAYk3C,EAAOT,SAC3B,MAER,KAAK,EACGl4B,EAAQ/Z,QAAU0yC,EAAO32C,QACzB,MAER,KAAK,GACSge,EAAQk7B,cAAgBl7B,EAAQk7B,aAAaplG,SAC/CkqE,EAAQk7B,aAAe,IAC3Bl7B,EAAQk7B,aAAah/F,KAAKk7F,EAAMh/F,KAAKmiG,uBAAuB7xF,OAAOiwF,EAAQA,EAAOV,WAClF,MAER,KAAK,GACGj4B,EAAQo7B,aAAezC,EAAOH,QAC9B,MAER,KAAK,GAGG,GAFMx4B,EAAQ1J,YAAc0J,EAAQ1J,WAAWxgE,SAC3CkqE,EAAQ1J,WAAa,IACP,IAAP,EAANm1B,GAED,IADImN,EAAOD,EAAOV,SAAWU,EAAOv7B,IAC7Bu7B,EAAOv7B,IAAMw7B,GAChB54B,EAAQ1J,WAAWp6D,KAAKy8F,EAAO2C,eAEnCt7B,EAAQ1J,WAAWp6D,KAAKy8F,EAAO2C,UACnC,MAER,KAAK,GAGG,GAFMt7B,EAAQvJ,YAAcuJ,EAAQvJ,WAAW3gE,SAC3CkqE,EAAQvJ,WAAa,IACP,IAAP,EAANg1B,GAED,IADImN,EAAOD,EAAOV,SAAWU,EAAOv7B,IAC7Bu7B,EAAOv7B,IAAMw7B,GAChB54B,EAAQvJ,WAAWv6D,KAAKy8F,EAAO4C,eAEnCv7B,EAAQvJ,WAAWv6D,KAAKy8F,EAAO4C,UACnC,MAER,QACI5C,EAAOE,SAAe,EAANpN,GAGxB,CACA,OAAOzrB,CACX,EAYAtK,EAAYojC,gBAAkB,SAAyBH,GAGnD,OAFMA,aAAkB7B,IACpB6B,EAAS,IAAI7B,EAAQ6B,IAClBxhG,KAAKuR,OAAOiwF,EAAQA,EAAOV,SACtC,EAUAviC,EAAYqjC,OAAS,SAAgB/4B,GACjC,GAAuB,iBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAoB,MAAhBA,EAAQ5wD,MAAgB4wD,EAAQzxC,eAAe,QAAS,CACxD,IAAK1zB,MAAM+lC,QAAQo/B,EAAQ5wD,MACvB,MAAO,uBACX,IAAK,IAAItU,EAAI,EAAGA,EAAIklE,EAAQ5wD,KAAKtZ,SAAUgF,EACvC,KAAKo8F,EAAMxhG,UAAUsqE,EAAQ5wD,KAAKtU,KAASklE,EAAQ5wD,KAAKtU,IAAMo8F,EAAMxhG,UAAUsqE,EAAQ5wD,KAAKtU,GAAGqgE,MAAQ+7B,EAAMxhG,UAAUsqE,EAAQ5wD,KAAKtU,GAAGsgE,OAClI,MAAO,+BACnB,CACA,GAAwB,MAApB4E,EAAQ7uD,UAAoB6uD,EAAQzxC,eAAe,cAC9C2oE,EAAMxhG,UAAUsqE,EAAQ7uD,UACzB,MAAO,6BACf,GAAuB,MAAnB6uD,EAAQm7B,SAAmBn7B,EAAQzxC,eAAe,aAC9CyM,EAAQo8D,EAAMh/F,KAAKs9D,YAAY2lC,QAAQtC,OAAO/4B,EAAQm7B,UAEtD,MAAO,WAAangE,EAE5B,GAAyB,MAArBglC,EAAQ3yC,WAAqB2yC,EAAQzxC,eAAe,aAAc,CAClE,IAAK1zB,MAAM+lC,QAAQo/B,EAAQ3yC,WACvB,MAAO,4BACX,IAASvyB,EAAI,EAAGA,EAAIklE,EAAQ3yC,UAAUv3B,SAAUgF,EAC5C,GAAoC,iBAAzBklE,EAAQ3yC,UAAUvyB,GACzB,MAAO,8BACnB,CACA,GAAyB,MAArBklE,EAAQ9J,WAAqB8J,EAAQzxC,eAAe,aAAc,CAClE,IAAK1zB,MAAM+lC,QAAQo/B,EAAQ9J,WACvB,MAAO,4BACX,IAASp7D,EAAI,EAAGA,EAAIklE,EAAQ9J,UAAUpgE,SAAUgF,EAC5C,IAAKo8F,EAAMxhG,UAAUsqE,EAAQ9J,UAAUp7D,IACnC,MAAO,+BACnB,CACA,GAA0B,MAAtBklE,EAAQ5Z,YAAsB4Z,EAAQzxC,eAAe,cAAe,CACpE,IAAK1zB,MAAM+lC,QAAQo/B,EAAQ5Z,YACvB,MAAO,6BACX,IAAStrD,EAAI,EAAGA,EAAIklE,EAAQ5Z,WAAWtwD,SAAUgF,EAC7C,KAAMklE,EAAQ5Z,WAAWtrD,IAA8C,iBAAjCklE,EAAQ5Z,WAAWtrD,GAAGhF,QAAuBohG,EAAM8B,SAASh5B,EAAQ5Z,WAAWtrD,KACjH,MAAO,+BACnB,CACA,GAAyB,MAArBklE,EAAQ5J,WAAqB4J,EAAQzxC,eAAe,aAAc,CAClE,IAAK1zB,MAAM+lC,QAAQo/B,EAAQ5J,WACvB,MAAO,4BACX,IAASt7D,EAAI,EAAGA,EAAIklE,EAAQ5J,UAAUtgE,SAAUgF,EAC5C,KAAKo8F,EAAMxhG,UAAUsqE,EAAQ5J,UAAUt7D,KAASklE,EAAQ5J,UAAUt7D,IAAMo8F,EAAMxhG,UAAUsqE,EAAQ5J,UAAUt7D,GAAGqgE,MAAQ+7B,EAAMxhG,UAAUsqE,EAAQ5J,UAAUt7D,GAAGsgE,OACtJ,MAAO,oCACnB,CACA,GAAoB,MAAhB4E,EAAQxoE,MAAgBwoE,EAAQzxC,eAAe,UAC1C2oE,EAAM8B,SAASh5B,EAAQxoE,MACxB,MAAO,wBACf,GAAyB,MAArBwoE,EAAQve,WAAqBue,EAAQzxC,eAAe,eAC/C2oE,EAAM8B,SAASh5B,EAAQve,WACxB,MAAO,6BACf,GAAuB,MAAnBue,EAAQ/Z,SAAmB+Z,EAAQzxC,eAAe,cAC5CyxC,EAAQ/Z,SAA6C,iBAA3B+Z,EAAQ/Z,QAAQnwD,QAAuBohG,EAAM8B,SAASh5B,EAAQ/Z,UAC1F,MAAO,2BACf,GAA4B,MAAxB+Z,EAAQk7B,cAAwBl7B,EAAQzxC,eAAe,gBAAiB,CACxE,IAAK1zB,MAAM+lC,QAAQo/B,EAAQk7B,cACvB,MAAO,+BACX,IAASpgG,EAAI,EAAGA,EAAIklE,EAAQk7B,aAAaplG,SAAUgF,EAAG,CAClD,IAAIkgC,EACJ,GADIA,EAAQo8D,EAAMh/F,KAAKmiG,uBAAuBxB,OAAO/4B,EAAQk7B,aAAapgG,IAEtE,MAAO,gBAAkBkgC,CACjC,CACJ,CACA,GAA4B,MAAxBglC,EAAQo7B,cAAwBp7B,EAAQzxC,eAAe,gBACvD,OAAQyxC,EAAQo7B,cAChB,QACI,MAAO,oCACX,KAAK,EACL,KAAK,GAGT,GAA0B,MAAtBp7B,EAAQ1J,YAAsB0J,EAAQzxC,eAAe,cAAe,CACpE,IAAK1zB,MAAM+lC,QAAQo/B,EAAQ1J,YACvB,MAAO,6BACX,IAASx7D,EAAI,EAAGA,EAAIklE,EAAQ1J,WAAWxgE,SAAUgF,EAC7C,GAAqC,iBAA1BklE,EAAQ1J,WAAWx7D,GAC1B,MAAO,+BACnB,CACA,GAA0B,MAAtBklE,EAAQvJ,YAAsBuJ,EAAQzxC,eAAe,cAAe,CACpE,IAAK1zB,MAAM+lC,QAAQo/B,EAAQvJ,YACvB,MAAO,6BACX,IAAS37D,EAAI,EAAGA,EAAIklE,EAAQvJ,WAAW3gE,SAAUgF,EAC7C,KAAKo8F,EAAMxhG,UAAUsqE,EAAQvJ,WAAW37D,KAASklE,EAAQvJ,WAAW37D,IAAMo8F,EAAMxhG,UAAUsqE,EAAQvJ,WAAW37D,GAAGqgE,MAAQ+7B,EAAMxhG,UAAUsqE,EAAQvJ,WAAW37D,GAAGsgE,OAC1J,MAAO,qCACnB,CACA,OAAO,IACX,EAUA1F,EAAYujC,WAAa,SAAoBC,GACzC,GAAIA,aAAkB9B,EAAMh/F,KAAKs9D,YAC7B,OAAOwjC,EACX,IAAIl5B,EAAU,IAAIo3B,EAAMh/F,KAAKs9D,YAC7B,GAAIwjC,EAAO9pF,KAAM,CACb,IAAKvU,MAAM+lC,QAAQs4D,EAAO9pF,MACtB,MAAM0V,UAAU,0CACpBk7C,EAAQ5wD,KAAO,GACf,IAAK,IAAItU,EAAI,EAAGA,EAAIo+F,EAAO9pF,KAAKtZ,SAAUgF,EAClCo8F,EAAMj8B,MACL+E,EAAQ5wD,KAAKtU,GAAKo8F,EAAMj8B,KAAKC,UAAUg+B,EAAO9pF,KAAKtU,KAAKkgE,UAAW,EACrC,iBAAnBk+B,EAAO9pF,KAAKtU,GACxBklE,EAAQ5wD,KAAKtU,GAAK6+C,SAASu/C,EAAO9pF,KAAKtU,GAAI,IACZ,iBAAnBo+F,EAAO9pF,KAAKtU,GACxBklE,EAAQ5wD,KAAKtU,GAAKo+F,EAAO9pF,KAAKtU,GACC,iBAAnBo+F,EAAO9pF,KAAKtU,KACxBklE,EAAQ5wD,KAAKtU,GAAK,IAAIo8F,EAAMiC,SAASD,EAAO9pF,KAAKtU,GAAGqgE,MAAQ,EAAG+9B,EAAO9pF,KAAKtU,GAAGsgE,OAAS,GAAGpE,WACtG,CAGA,GAFuB,MAAnBkiC,EAAO/nF,WACP6uD,EAAQ7uD,SAA6B,EAAlB+nF,EAAO/nF,UACR,MAAlB+nF,EAAOiC,QAAiB,CACxB,GAA8B,iBAAnBjC,EAAOiC,QACd,MAAMr2E,UAAU,8CACpBk7C,EAAQm7B,QAAU/D,EAAMh/F,KAAKs9D,YAAY2lC,QAAQpC,WAAWC,EAAOiC,QACvE,CACA,GAAIjC,EAAO7rE,UAAW,CAClB,IAAKxyB,MAAM+lC,QAAQs4D,EAAO7rE,WACtB,MAAMvI,UAAU,+CAEpB,IADAk7C,EAAQ3yC,UAAY,GACXvyB,EAAI,EAAGA,EAAIo+F,EAAO7rE,UAAUv3B,SAAUgF,EAC3CklE,EAAQ3yC,UAAUvyB,GAAKrF,OAAOyjG,EAAO7rE,UAAUvyB,GACvD,CACA,GAAIo+F,EAAOhjC,UAAW,CAClB,IAAKr7D,MAAM+lC,QAAQs4D,EAAOhjC,WACtB,MAAMpxC,UAAU,+CAEpB,IADAk7C,EAAQ9J,UAAY,GACXp7D,EAAI,EAAGA,EAAIo+F,EAAOhjC,UAAUpgE,SAAUgF,EAC3CklE,EAAQ9J,UAAUp7D,GAA2B,EAAtBo+F,EAAOhjC,UAAUp7D,EAChD,CACA,GAAIo+F,EAAO9yC,WAAY,CACnB,IAAKvrD,MAAM+lC,QAAQs4D,EAAO9yC,YACtB,MAAMthC,UAAU,gDAEpB,IADAk7C,EAAQ5Z,WAAa,GACZtrD,EAAI,EAAGA,EAAIo+F,EAAO9yC,WAAWtwD,SAAUgF,EACR,iBAAzBo+F,EAAO9yC,WAAWtrD,GACzBo8F,EAAMkC,OAAO1wF,OAAOwwF,EAAO9yC,WAAWtrD,GAAIklE,EAAQ5Z,WAAWtrD,GAAKo8F,EAAMU,UAAUV,EAAMkC,OAAOtjG,OAAOojG,EAAO9yC,WAAWtrD,KAAM,GACzHo+F,EAAO9yC,WAAWtrD,GAAGhF,QAAU,IACpCkqE,EAAQ5Z,WAAWtrD,GAAKo+F,EAAO9yC,WAAWtrD,GACtD,CACA,GAAIo+F,EAAO9iC,UAAW,CAClB,IAAKv7D,MAAM+lC,QAAQs4D,EAAO9iC,WACtB,MAAMtxC,UAAU,+CAEpB,IADAk7C,EAAQ5J,UAAY,GACXt7D,EAAI,EAAGA,EAAIo+F,EAAO9iC,UAAUtgE,SAAUgF,EACvCo8F,EAAMj8B,MACL+E,EAAQ5J,UAAUt7D,GAAKo8F,EAAMj8B,KAAKC,UAAUg+B,EAAO9iC,UAAUt7D,KAAKkgE,UAAW,EAC1C,iBAAxBk+B,EAAO9iC,UAAUt7D,GAC7BklE,EAAQ5J,UAAUt7D,GAAK6+C,SAASu/C,EAAO9iC,UAAUt7D,GAAI,IACjB,iBAAxBo+F,EAAO9iC,UAAUt7D,GAC7BklE,EAAQ5J,UAAUt7D,GAAKo+F,EAAO9iC,UAAUt7D,GACJ,iBAAxBo+F,EAAO9iC,UAAUt7D,KAC7BklE,EAAQ5J,UAAUt7D,GAAK,IAAIo8F,EAAMiC,SAASD,EAAO9iC,UAAUt7D,GAAGqgE,MAAQ,EAAG+9B,EAAO9iC,UAAUt7D,GAAGsgE,OAAS,GAAGpE,WACrH,CAUA,GATmB,MAAfkiC,EAAO1hG,OACPwoE,EAAQxoE,KAAOkkF,OAAOwd,EAAO1hG,OACT,MAApB0hG,EAAOz3C,YACPue,EAAQve,UAAYi6B,OAAOwd,EAAOz3C,YAChB,MAAlBy3C,EAAOjzC,UACuB,iBAAnBizC,EAAOjzC,QACdixC,EAAMkC,OAAO1wF,OAAOwwF,EAAOjzC,QAAS+Z,EAAQ/Z,QAAUixC,EAAMU,UAAUV,EAAMkC,OAAOtjG,OAAOojG,EAAOjzC,UAAW,GACvGizC,EAAOjzC,QAAQnwD,QAAU,IAC9BkqE,EAAQ/Z,QAAUizC,EAAOjzC,UAC7BizC,EAAOgC,aAAc,CACrB,IAAKrgG,MAAM+lC,QAAQs4D,EAAOgC,cACtB,MAAMp2E,UAAU,kDAEpB,IADAk7C,EAAQk7B,aAAe,GACdpgG,EAAI,EAAGA,EAAIo+F,EAAOgC,aAAaplG,SAAUgF,EAAG,CACjD,GAAsC,iBAA3Bo+F,EAAOgC,aAAapgG,GAC3B,MAAMgqB,UAAU,mDACpBk7C,EAAQk7B,aAAapgG,GAAKs8F,EAAMh/F,KAAKmiG,uBAAuBtB,WAAWC,EAAOgC,aAAapgG,GAC/F,CACJ,CACA,OAAQo+F,EAAOkC,cACf,QACI,GAAmC,iBAAxBlC,EAAOkC,aAA2B,CACzCp7B,EAAQo7B,aAAelC,EAAOkC,aAC9B,KACJ,CACA,MACJ,IAAK,UACL,KAAK,EACDp7B,EAAQo7B,aAAe,EACvB,MACJ,IAAK,WACL,KAAK,EACDp7B,EAAQo7B,aAAe,EAG3B,GAAIlC,EAAO5iC,WAAY,CACnB,IAAKz7D,MAAM+lC,QAAQs4D,EAAO5iC,YACtB,MAAMxxC,UAAU,gDAEpB,IADAk7C,EAAQ1J,WAAa,GACZx7D,EAAI,EAAGA,EAAIo+F,EAAO5iC,WAAWxgE,SAAUgF,EAC5CklE,EAAQ1J,WAAWx7D,GAAKrF,OAAOyjG,EAAO5iC,WAAWx7D,GACzD,CACA,GAAIo+F,EAAOziC,WAAY,CACnB,IAAK57D,MAAM+lC,QAAQs4D,EAAOziC,YACtB,MAAM3xC,UAAU,gDAEpB,IADAk7C,EAAQvJ,WAAa,GACZ37D,EAAI,EAAGA,EAAIo+F,EAAOziC,WAAW3gE,SAAUgF,EACxCo8F,EAAMj8B,MACL+E,EAAQvJ,WAAW37D,GAAKo8F,EAAMj8B,KAAKC,UAAUg+B,EAAOziC,WAAW37D,KAAKkgE,UAAW,EAC3C,iBAAzBk+B,EAAOziC,WAAW37D,GAC9BklE,EAAQvJ,WAAW37D,GAAK6+C,SAASu/C,EAAOziC,WAAW37D,GAAI,IAClB,iBAAzBo+F,EAAOziC,WAAW37D,GAC9BklE,EAAQvJ,WAAW37D,GAAKo+F,EAAOziC,WAAW37D,GACL,iBAAzBo+F,EAAOziC,WAAW37D,KAC9BklE,EAAQvJ,WAAW37D,GAAK,IAAIo8F,EAAMiC,SAASD,EAAOziC,WAAW37D,GAAGqgE,MAAQ,EAAG+9B,EAAOziC,WAAW37D,GAAGsgE,OAAS,GAAGpE,UAAS,GACjI,CACA,OAAOgJ,CACX,EAWAtK,EAAY2jC,SAAW,SAAkBr5B,EAASrrE,GACzCA,IACDA,EAAU,CAAC,GACf,IAAIukG,EAAS,CAAC,EAyBd,IAxBIvkG,EAAQ2kG,QAAU3kG,EAAQ4kG,YAC1BL,EAAO9pF,KAAO,GACd8pF,EAAO7rE,UAAY,GACnB6rE,EAAOhjC,UAAY,GACnBgjC,EAAO9yC,WAAa,GACpB8yC,EAAO9iC,UAAY,GACnB8iC,EAAO5iC,WAAa,GACpB4iC,EAAOziC,WAAa,GACpByiC,EAAOgC,aAAe,IAEtBvmG,EAAQ4kG,WACRL,EAAO/nF,SAAW,EAClB+nF,EAAOiC,QAAU,KACjBjC,EAAO1hG,KAAO,GACV7C,EAAQqtD,QAAU05B,OAClBwd,EAAOjzC,QAAU,IAEjBizC,EAAOjzC,QAAU,GACbtxD,EAAQqtD,QAAUnnD,QAClBq+F,EAAOjzC,QAAUixC,EAAMU,UAAUsB,EAAOjzC,WAEhDizC,EAAOz3C,UAAY,GACnBy3C,EAAOkC,aAAezmG,EAAQ+kG,QAAUhe,OAAS,UAAY,GAE7D1b,EAAQ5wD,MAAQ4wD,EAAQ5wD,KAAKtZ,OAAQ,CACrCojG,EAAO9pF,KAAO,GACd,IAAK,IAAIunB,EAAI,EAAGA,EAAIqpC,EAAQ5wD,KAAKtZ,SAAU6gC,EACR,iBAApBqpC,EAAQ5wD,KAAKunB,GACpBuiE,EAAO9pF,KAAKunB,GAAKhiC,EAAQ8kG,QAAU/d,OAASA,OAAO1b,EAAQ5wD,KAAKunB,IAAMqpC,EAAQ5wD,KAAKunB,GAEnFuiE,EAAO9pF,KAAKunB,GAAKhiC,EAAQ8kG,QAAU/d,OAASwb,EAAMj8B,KAAKy8B,UAAU/uD,SAASna,KAAKwxC,EAAQ5wD,KAAKunB,IAAMhiC,EAAQ8kG,QAAUhkG,OAAS,IAAIyhG,EAAMiC,SAASn5B,EAAQ5wD,KAAKunB,GAAGwkC,MAAQ,EAAG6E,EAAQ5wD,KAAKunB,GAAGykC,OAAS,GAAGpE,WAAagJ,EAAQ5wD,KAAKunB,EAC7O,CAKA,GAJwB,MAApBqpC,EAAQ7uD,UAAoB6uD,EAAQzxC,eAAe,cACnD2qE,EAAO/nF,SAAW6uD,EAAQ7uD,UACP,MAAnB6uD,EAAQm7B,SAAmBn7B,EAAQzxC,eAAe,aAClD2qE,EAAOiC,QAAU/D,EAAMh/F,KAAKs9D,YAAY2lC,QAAQhC,SAASr5B,EAAQm7B,QAASxmG,IAC1EqrE,EAAQ3yC,WAAa2yC,EAAQ3yC,UAAUv3B,OAEvC,IADAojG,EAAO7rE,UAAY,GACVsJ,EAAI,EAAGA,EAAIqpC,EAAQ3yC,UAAUv3B,SAAU6gC,EAC5CuiE,EAAO7rE,UAAUsJ,GAAKhiC,EAAQglG,OAASC,SAAS55B,EAAQ3yC,UAAUsJ,IAAM+kD,OAAO1b,EAAQ3yC,UAAUsJ,IAAMqpC,EAAQ3yC,UAAUsJ,GAEjI,GAAIqpC,EAAQ9J,WAAa8J,EAAQ9J,UAAUpgE,OAEvC,IADAojG,EAAOhjC,UAAY,GACVv/B,EAAI,EAAGA,EAAIqpC,EAAQ9J,UAAUpgE,SAAU6gC,EAC5CuiE,EAAOhjC,UAAUv/B,GAAKqpC,EAAQ9J,UAAUv/B,GAEhD,GAAIqpC,EAAQ5Z,YAAc4Z,EAAQ5Z,WAAWtwD,OAEzC,IADAojG,EAAO9yC,WAAa,GACXzvB,EAAI,EAAGA,EAAIqpC,EAAQ5Z,WAAWtwD,SAAU6gC,EAC7CuiE,EAAO9yC,WAAWzvB,GAAKhiC,EAAQqtD,QAAU05B,OAASwb,EAAMkC,OAAO3wF,OAAOu3D,EAAQ5Z,WAAWzvB,GAAI,EAAGqpC,EAAQ5Z,WAAWzvB,GAAG7gC,QAAUnB,EAAQqtD,QAAUnnD,MAAQA,MAAM68F,UAAUxyF,MAAMspB,KAAKwxC,EAAQ5Z,WAAWzvB,IAAMqpC,EAAQ5Z,WAAWzvB,GAEzO,GAAIqpC,EAAQ5J,WAAa4J,EAAQ5J,UAAUtgE,OAEvC,IADAojG,EAAO9iC,UAAY,GACVz/B,EAAI,EAAGA,EAAIqpC,EAAQ5J,UAAUtgE,SAAU6gC,EACR,iBAAzBqpC,EAAQ5J,UAAUz/B,GACzBuiE,EAAO9iC,UAAUz/B,GAAKhiC,EAAQ8kG,QAAU/d,OAASA,OAAO1b,EAAQ5J,UAAUz/B,IAAMqpC,EAAQ5J,UAAUz/B,GAElGuiE,EAAO9iC,UAAUz/B,GAAKhiC,EAAQ8kG,QAAU/d,OAASwb,EAAMj8B,KAAKy8B,UAAU/uD,SAASna,KAAKwxC,EAAQ5J,UAAUz/B,IAAMhiC,EAAQ8kG,QAAUhkG,OAAS,IAAIyhG,EAAMiC,SAASn5B,EAAQ5J,UAAUz/B,GAAGwkC,MAAQ,EAAG6E,EAAQ5J,UAAUz/B,GAAGykC,OAAS,GAAGpE,WAAagJ,EAAQ5J,UAAUz/B,GAMtQ,GAJoB,MAAhBqpC,EAAQxoE,MAAgBwoE,EAAQzxC,eAAe,UAC/C2qE,EAAO1hG,KAAOwoE,EAAQxoE,MACH,MAAnBwoE,EAAQ/Z,SAAmB+Z,EAAQzxC,eAAe,aAClD2qE,EAAOjzC,QAAUtxD,EAAQqtD,QAAU05B,OAASwb,EAAMkC,OAAO3wF,OAAOu3D,EAAQ/Z,QAAS,EAAG+Z,EAAQ/Z,QAAQnwD,QAAUnB,EAAQqtD,QAAUnnD,MAAQA,MAAM68F,UAAUxyF,MAAMspB,KAAKwxC,EAAQ/Z,SAAW+Z,EAAQ/Z,SAC9L+Z,EAAQ1J,YAAc0J,EAAQ1J,WAAWxgE,OAEzC,IADAojG,EAAO5iC,WAAa,GACX3/B,EAAI,EAAGA,EAAIqpC,EAAQ1J,WAAWxgE,SAAU6gC,EAC7CuiE,EAAO5iC,WAAW3/B,GAAKhiC,EAAQglG,OAASC,SAAS55B,EAAQ1J,WAAW3/B,IAAM+kD,OAAO1b,EAAQ1J,WAAW3/B,IAAMqpC,EAAQ1J,WAAW3/B,GAErI,GAAIqpC,EAAQvJ,YAAcuJ,EAAQvJ,WAAW3gE,OAEzC,IADAojG,EAAOziC,WAAa,GACX9/B,EAAI,EAAGA,EAAIqpC,EAAQvJ,WAAW3gE,SAAU6gC,EACR,iBAA1BqpC,EAAQvJ,WAAW9/B,GAC1BuiE,EAAOziC,WAAW9/B,GAAKhiC,EAAQ8kG,QAAU/d,OAASA,OAAO1b,EAAQvJ,WAAW9/B,IAAMqpC,EAAQvJ,WAAW9/B,GAErGuiE,EAAOziC,WAAW9/B,GAAKhiC,EAAQ8kG,QAAU/d,OAASwb,EAAMj8B,KAAKy8B,UAAU/uD,SAASna,KAAKwxC,EAAQvJ,WAAW9/B,IAAMhiC,EAAQ8kG,QAAUhkG,OAAS,IAAIyhG,EAAMiC,SAASn5B,EAAQvJ,WAAW9/B,GAAGwkC,MAAQ,EAAG6E,EAAQvJ,WAAW9/B,GAAGykC,OAAS,GAAGpE,UAAS,GAAQgJ,EAAQvJ,WAAW9/B,GAI/Q,GAFyB,MAArBqpC,EAAQve,WAAqBue,EAAQzxC,eAAe,eACpD2qE,EAAOz3C,UAAYue,EAAQve,WAC3Bue,EAAQk7B,cAAgBl7B,EAAQk7B,aAAaplG,OAE7C,IADAojG,EAAOgC,aAAe,GACbvkE,EAAI,EAAGA,EAAIqpC,EAAQk7B,aAAaplG,SAAU6gC,EAC/CuiE,EAAOgC,aAAavkE,GAAKygE,EAAMh/F,KAAKmiG,uBAAuBlB,SAASr5B,EAAQk7B,aAAavkE,GAAIhiC,GAIrG,OAF4B,MAAxBqrE,EAAQo7B,cAAwBp7B,EAAQzxC,eAAe,kBACvD2qE,EAAOkC,aAAezmG,EAAQ+kG,QAAUhe,YAAuEhiF,IAA9D09F,EAAMh/F,KAAKs9D,YAAY8lC,aAAax7B,EAAQo7B,cAA8Bp7B,EAAQo7B,aAAehE,EAAMh/F,KAAKs9D,YAAY8lC,aAAax7B,EAAQo7B,cAAgBp7B,EAAQo7B,cACnNlC,CACX,EASAxjC,EAAYgiC,UAAUmC,OAAS,WAC3B,OAAO1iG,KAAK+nC,YAAYm6D,SAASliG,KAAM0/F,EAAUM,KAAK2C,cAC1D,EAUApkC,EAAYqkC,WAAa,SAAoBC,GAIzC,YAHsBtgG,IAAlBsgG,IACAA,EAAgB,uBAEbA,EAAgB,mBAC3B,EA4BAtkC,EAAYC,SAAW,WACnB,IAAIihC,EAAa,CAAC,EAAGjvC,EAAShxD,OAAOmgD,OAAO8/C,GAsB5C,OArBAjvC,EAAOivC,EAAW,GAAK,aAAe,EACtCjvC,EAAOivC,EAAW,GAAK,SAAW,EAClCjvC,EAAOivC,EAAW,GAAK,SAAW,EAClCjvC,EAAOivC,EAAW,GAAK,QAAU,EACjCjvC,EAAOivC,EAAW,GAAK,UAAY,EACnCjvC,EAAOivC,EAAW,GAAK,SAAW,EAClCjvC,EAAOivC,EAAW,GAAK,SAAW,EAClCjvC,EAAOivC,EAAW,GAAK,SAAW,EAClCjvC,EAAOivC,EAAW,GAAK,UAAY,EACnCjvC,EAAOivC,EAAW,GAAK,QAAU,EACjCjvC,EAAOivC,EAAW,IAAM,WAAa,GACrCjvC,EAAOivC,EAAW,IAAM,UAAY,GACpCjvC,EAAOivC,EAAW,IAAM,UAAY,GACpCjvC,EAAOivC,EAAW,IAAM,UAAY,GACpCjvC,EAAOivC,EAAW,IAAM,aAAe,GACvCjvC,EAAOivC,EAAW,IAAM,cAAgB,GACxCjvC,EAAOivC,EAAW,IAAM,YAAc,GACtCjvC,EAAOivC,EAAW,IAAM,gBAAkB,GAC1CjvC,EAAOivC,EAAW,IAAM,kBAAoB,GAC5CjvC,EAAOivC,EAAW,IAAM,cAAgB,GACxCjvC,EAAOivC,EAAW,IAAM,kBAAoB,GACrCjvC,CACV,CAxBsB,GA0BvB+N,EAAY2lC,QAAU,WAkBlB,SAASA,EAAQ9D,GACb,GAAIA,EACA,IAAK,IAAI1sF,EAAOlU,OAAOkU,KAAK0sF,GAAaz8F,EAAI,EAAGA,EAAI+P,EAAK/U,SAAUgF,EACpC,MAAvBy8F,EAAW1sF,EAAK/P,MAChB3D,KAAK0T,EAAK/P,IAAMy8F,EAAW1sF,EAAK/P,IAChD,CAqOA,OA7NAugG,EAAQ3D,UAAUtgD,MAAQ8/C,EAAMj8B,KAAOi8B,EAAMj8B,KAAKxD,SAAS,EAAE,GAAE,GAAS,EAQxE4jC,EAAQ3D,UAAU/jE,IAAMujE,EAAMj8B,KAAOi8B,EAAMj8B,KAAKxD,SAAS,EAAE,GAAE,GAAS,EAUtE4jC,EAAQvkD,OAAS,SAAgBygD,GAC7B,OAAO,IAAI8D,EAAQ9D,EACvB,EAWA8D,EAAQ5yF,OAAS,SAAgBu3D,EAASg4B,GAOtC,OANKA,IACDA,EAAShB,EAAQlgD,UACA,MAAjBkpB,EAAQ5oB,OAAiBzgD,OAAO43B,eAAeC,KAAKwxC,EAAS,UAC7Dg4B,EAAOC,OAA8B,GAAGG,MAAMp4B,EAAQ5oB,OACvC,MAAf4oB,EAAQrsC,KAAeh9B,OAAO43B,eAAeC,KAAKwxC,EAAS,QAC3Dg4B,EAAOC,OAA8B,IAAIG,MAAMp4B,EAAQrsC,KACpDqkE,CACX,EAWAqD,EAAQ3C,gBAAkB,SAAyB14B,EAASg4B,GACxD,OAAO7gG,KAAKsR,OAAOu3D,EAASg4B,GAAQM,QACxC,EAaA+C,EAAQ3yF,OAAS,SAAgBiwF,EAAQ7iG,GAC/B6iG,aAAkB7B,IACpB6B,EAAS7B,EAAQhgD,OAAO6hD,IAE5B,IADA,IAAIhlE,OAAiBj6B,IAAX5D,EAAuB6iG,EAAO/1D,IAAM+1D,EAAOv7B,IAAMtnE,EAAQkqE,EAAU,IAAIo3B,EAAMh/F,KAAKs9D,YAAY2lC,QACjG1C,EAAOv7B,IAAMzpC,GAAK,CACrB,IAAI83D,EAAMkN,EAAOV,SACjB,OAAQxM,IAAQ,GAChB,KAAK,EACGzrB,EAAQ5oB,MAAQuhD,EAAOP,QACvB,MAER,KAAK,EACGp4B,EAAQrsC,IAAMglE,EAAOP,QACrB,MAER,QACIO,EAAOE,SAAe,EAANpN,GAGxB,CACA,OAAOzrB,CACX,EAYAq7B,EAAQvC,gBAAkB,SAAyBH,GAG/C,OAFMA,aAAkB7B,IACpB6B,EAAS,IAAI7B,EAAQ6B,IAClBxhG,KAAKuR,OAAOiwF,EAAQA,EAAOV,SACtC,EAUAoD,EAAQtC,OAAS,SAAgB/4B,GAC7B,MAAuB,iBAAZA,GAAoC,OAAZA,EACxB,kBACU,MAAjBA,EAAQ5oB,OAAiB4oB,EAAQzxC,eAAe,YAC3C2oE,EAAMxhG,UAAUsqE,EAAQ5oB,QAAY4oB,EAAQ5oB,OAAS8/C,EAAMxhG,UAAUsqE,EAAQ5oB,MAAM+jB,MAAQ+7B,EAAMxhG,UAAUsqE,EAAQ5oB,MAAMgkB,OACnH,+BACI,MAAf4E,EAAQrsC,KAAeqsC,EAAQzxC,eAAe,UACzC2oE,EAAMxhG,UAAUsqE,EAAQrsC,MAAUqsC,EAAQrsC,KAAOujE,EAAMxhG,UAAUsqE,EAAQrsC,IAAIwnC,MAAQ+7B,EAAMxhG,UAAUsqE,EAAQrsC,IAAIynC,OAC3G,6BACR,IACX,EAUAigC,EAAQpC,WAAa,SAAoBC,GACrC,GAAIA,aAAkB9B,EAAMh/F,KAAKs9D,YAAY2lC,QACzC,OAAOnC,EACX,IAAIl5B,EAAU,IAAIo3B,EAAMh/F,KAAKs9D,YAAY2lC,QAmBzC,OAlBoB,MAAhBnC,EAAO9hD,QACH8/C,EAAMj8B,MACL+E,EAAQ5oB,MAAQ8/C,EAAMj8B,KAAKC,UAAUg+B,EAAO9hD,QAAQ4jB,UAAW,EACnC,iBAAjBk+B,EAAO9hD,MACnB4oB,EAAQ5oB,MAAQuC,SAASu/C,EAAO9hD,MAAO,IACV,iBAAjB8hD,EAAO9hD,MACnB4oB,EAAQ5oB,MAAQ8hD,EAAO9hD,MACM,iBAAjB8hD,EAAO9hD,QACnB4oB,EAAQ5oB,MAAQ,IAAI8/C,EAAMiC,SAASD,EAAO9hD,MAAM+jB,MAAQ,EAAG+9B,EAAO9hD,MAAMgkB,OAAS,GAAGpE,aAC1E,MAAdkiC,EAAOvlE,MACHujE,EAAMj8B,MACL+E,EAAQrsC,IAAMujE,EAAMj8B,KAAKC,UAAUg+B,EAAOvlE,MAAMqnC,UAAW,EACjC,iBAAfk+B,EAAOvlE,IACnBqsC,EAAQrsC,IAAMgmB,SAASu/C,EAAOvlE,IAAK,IACR,iBAAfulE,EAAOvlE,IACnBqsC,EAAQrsC,IAAMulE,EAAOvlE,IACM,iBAAfulE,EAAOvlE,MACnBqsC,EAAQrsC,IAAM,IAAIujE,EAAMiC,SAASD,EAAOvlE,IAAIwnC,MAAQ,EAAG+9B,EAAOvlE,IAAIynC,OAAS,GAAGpE,aAC/EgJ,CACX,EAWAq7B,EAAQhC,SAAW,SAAkBr5B,EAASrrE,GACrCA,IACDA,EAAU,CAAC,GACf,IAAIukG,EAAS,CAAC,EACd,GAAIvkG,EAAQ4kG,SAAU,CAClB,GAAIrC,EAAMj8B,KAAM,CACZ,IAAIu+B,EAAO,IAAItC,EAAMj8B,KAAK,EAAG,GAAG,GAChCi+B,EAAO9hD,MAAQziD,EAAQ8kG,QAAU/d,OAAS8d,EAAK7wD,WAAah0C,EAAQ8kG,QAAUhkG,OAAS+jG,EAAKxiC,WAAawiC,CAC7G,MACIN,EAAO9hD,MAAQziD,EAAQ8kG,QAAU/d,OAAS,IAAM,EAChDwb,EAAMj8B,MACFu+B,EAAO,IAAItC,EAAMj8B,KAAK,EAAG,GAAG,GAChCi+B,EAAOvlE,IAAMh/B,EAAQ8kG,QAAU/d,OAAS8d,EAAK7wD,WAAah0C,EAAQ8kG,QAAUhkG,OAAS+jG,EAAKxiC,WAAawiC,GAEvGN,EAAOvlE,IAAMh/B,EAAQ8kG,QAAU/d,OAAS,IAAM,CACtD,CAWA,OAVqB,MAAjB1b,EAAQ5oB,OAAiB4oB,EAAQzxC,eAAe,WACnB,iBAAlByxC,EAAQ5oB,MACf8hD,EAAO9hD,MAAQziD,EAAQ8kG,QAAU/d,OAASA,OAAO1b,EAAQ5oB,OAAS4oB,EAAQ5oB,MAE1E8hD,EAAO9hD,MAAQziD,EAAQ8kG,QAAU/d,OAASwb,EAAMj8B,KAAKy8B,UAAU/uD,SAASna,KAAKwxC,EAAQ5oB,OAASziD,EAAQ8kG,QAAUhkG,OAAS,IAAIyhG,EAAMiC,SAASn5B,EAAQ5oB,MAAM+jB,MAAQ,EAAG6E,EAAQ5oB,MAAMgkB,OAAS,GAAGpE,WAAagJ,EAAQ5oB,OACzM,MAAf4oB,EAAQrsC,KAAeqsC,EAAQzxC,eAAe,SACnB,iBAAhByxC,EAAQrsC,IACfulE,EAAOvlE,IAAMh/B,EAAQ8kG,QAAU/d,OAASA,OAAO1b,EAAQrsC,KAAOqsC,EAAQrsC,IAEtEulE,EAAOvlE,IAAMh/B,EAAQ8kG,QAAU/d,OAASwb,EAAMj8B,KAAKy8B,UAAU/uD,SAASna,KAAKwxC,EAAQrsC,KAAOh/B,EAAQ8kG,QAAUhkG,OAAS,IAAIyhG,EAAMiC,SAASn5B,EAAQrsC,IAAIwnC,MAAQ,EAAG6E,EAAQrsC,IAAIynC,OAAS,GAAGpE,WAAagJ,EAAQrsC,KAC7MulE,CACX,EASAmC,EAAQ3D,UAAUmC,OAAS,WACvB,OAAO1iG,KAAK+nC,YAAYm6D,SAASliG,KAAM0/F,EAAUM,KAAK2C,cAC1D,EAUAuB,EAAQtB,WAAa,SAAoBC,GAIrC,YAHsBtgG,IAAlBsgG,IACAA,EAAgB,uBAEbA,EAAgB,2BAC3B,EAEOqB,CACV,CA7PqB,GAsQtB3lC,EAAY8lC,aAAe,WACvB,IAAI5E,EAAa,CAAC,EAAGjvC,EAAShxD,OAAOmgD,OAAO8/C,GAG5C,OAFAjvC,EAAOivC,EAAW,GAAK,WAAa,EACpCjvC,EAAOivC,EAAW,GAAK,YAAc,EAC9BjvC,CACV,CAL0B,GAOpB+N,CACV,CA/iCkB,GAijCnBt9D,EAAKqgG,kBAAoB,WAmBrB,SAASA,EAAkBlB,GAEvB,GADApgG,KAAKiY,KAAO,GACRmoF,EACA,IAAK,IAAI1sF,EAAOlU,OAAOkU,KAAK0sF,GAAaz8F,EAAI,EAAGA,EAAI+P,EAAK/U,SAAUgF,EACpC,MAAvBy8F,EAAW1sF,EAAK/P,MAChB3D,KAAK0T,EAAK/P,IAAMy8F,EAAW1sF,EAAK/P,IAChD,CA2QA,OAnQA29F,EAAkBf,UAAU/vC,OAAS,KAQrC8wC,EAAkBf,UAAU9vC,QAAU,KAQtC6wC,EAAkBf,UAAUtoF,KAAO8nF,EAAMa,WAUzCU,EAAkB3hD,OAAS,SAAgBygD,GACvC,OAAO,IAAIkB,EAAkBlB,EACjC,EAWAkB,EAAkBhwF,OAAS,SAAgBu3D,EAASg4B,GAOhD,GANKA,IACDA,EAAShB,EAAQlgD,UACC,MAAlBkpB,EAAQrY,QAAkBhxD,OAAO43B,eAAeC,KAAKwxC,EAAS,WAC9Do3B,EAAMh/F,KAAKs9D,YAAYjtD,OAAOu3D,EAAQrY,OAAQqwC,EAAOC,OAA8B,IAAII,QAAQC,SAC5E,MAAnBt4B,EAAQpY,SAAmBjxD,OAAO43B,eAAeC,KAAKwxC,EAAS,YAC/Do3B,EAAMh/F,KAAKs9D,YAAYjtD,OAAOu3D,EAAQpY,QAASowC,EAAOC,OAA8B,IAAII,QAAQC,SAChF,MAAhBt4B,EAAQ5wD,MAAgB4wD,EAAQ5wD,KAAKtZ,OAAQ,CAC7CkiG,EAAOC,OAA8B,IAAII,OACzC,IAAK,IAAIv9F,EAAI,EAAGA,EAAIklE,EAAQ5wD,KAAKtZ,SAAUgF,EACvCk9F,EAAOI,MAAMp4B,EAAQ5wD,KAAKtU,IAC9Bk9F,EAAOM,QACX,CACA,OAAON,CACX,EAWAS,EAAkBC,gBAAkB,SAAyB14B,EAASg4B,GAClE,OAAO7gG,KAAKsR,OAAOu3D,EAASg4B,GAAQM,QACxC,EAaAG,EAAkB/vF,OAAS,SAAgBiwF,EAAQ7iG,GACzC6iG,aAAkB7B,IACpB6B,EAAS7B,EAAQhgD,OAAO6hD,IAE5B,IADA,IAAIhlE,OAAiBj6B,IAAX5D,EAAuB6iG,EAAO/1D,IAAM+1D,EAAOv7B,IAAMtnE,EAAQkqE,EAAU,IAAIo3B,EAAMh/F,KAAKqgG,kBACrFE,EAAOv7B,IAAMzpC,GAAK,CACrB,IAAI83D,EAAMkN,EAAOV,SACjB,OAAQxM,IAAQ,GAChB,KAAK,EACGzrB,EAAQrY,OAASyvC,EAAMh/F,KAAKs9D,YAAYhtD,OAAOiwF,EAAQA,EAAOV,UAC9D,MAER,KAAK,EACGj4B,EAAQpY,QAAUwvC,EAAMh/F,KAAKs9D,YAAYhtD,OAAOiwF,EAAQA,EAAOV,UAC/D,MAER,KAAK,EAGG,GAFMj4B,EAAQ5wD,MAAQ4wD,EAAQ5wD,KAAKtZ,SAC/BkqE,EAAQ5wD,KAAO,IACD,IAAP,EAANq8E,GAED,IADA,IAAImN,EAAOD,EAAOV,SAAWU,EAAOv7B,IAC7Bu7B,EAAOv7B,IAAMw7B,GAChB54B,EAAQ5wD,KAAKlT,KAAKy8F,EAAOP,cAE7Bp4B,EAAQ5wD,KAAKlT,KAAKy8F,EAAOP,SAC7B,MAER,QACIO,EAAOE,SAAe,EAANpN,GAGxB,CACA,OAAOzrB,CACX,EAYAy4B,EAAkBK,gBAAkB,SAAyBH,GAGzD,OAFMA,aAAkB7B,IACpB6B,EAAS,IAAI7B,EAAQ6B,IAClBxhG,KAAKuR,OAAOiwF,EAAQA,EAAOV,SACtC,EAUAQ,EAAkBM,OAAS,SAAgB/4B,GACvC,GAAuB,iBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBAEP,IAKIhlC,EANR,GAAsB,MAAlBglC,EAAQrY,QAAkBqY,EAAQzxC,eAAe,YAC7CyM,EAAQo8D,EAAMh/F,KAAKs9D,YAAYqjC,OAAO/4B,EAAQrY,SAE9C,MAAO,UAAY3sB,EAE3B,GAAuB,MAAnBglC,EAAQpY,SAAmBoY,EAAQzxC,eAAe,aAC9CyM,EAAQo8D,EAAMh/F,KAAKs9D,YAAYqjC,OAAO/4B,EAAQpY,UAE9C,MAAO,WAAa5sB,EAE5B,GAAoB,MAAhBglC,EAAQ5wD,MAAgB4wD,EAAQzxC,eAAe,QAAS,CACxD,IAAK1zB,MAAM+lC,QAAQo/B,EAAQ5wD,MACvB,MAAO,uBACX,IAAK,IAAItU,EAAI,EAAGA,EAAIklE,EAAQ5wD,KAAKtZ,SAAUgF,EACvC,KAAKo8F,EAAMxhG,UAAUsqE,EAAQ5wD,KAAKtU,KAASklE,EAAQ5wD,KAAKtU,IAAMo8F,EAAMxhG,UAAUsqE,EAAQ5wD,KAAKtU,GAAGqgE,MAAQ+7B,EAAMxhG,UAAUsqE,EAAQ5wD,KAAKtU,GAAGsgE,OAClI,MAAO,+BACnB,CACA,OAAO,IACX,EAUAq9B,EAAkBQ,WAAa,SAAoBC,GAC/C,GAAIA,aAAkB9B,EAAMh/F,KAAKqgG,kBAC7B,OAAOS,EACX,IAAIl5B,EAAU,IAAIo3B,EAAMh/F,KAAKqgG,kBAC7B,GAAqB,MAAjBS,EAAOvxC,OAAgB,CACvB,GAA6B,iBAAlBuxC,EAAOvxC,OACd,MAAM7iC,UAAU,mDACpBk7C,EAAQrY,OAASyvC,EAAMh/F,KAAKs9D,YAAYujC,WAAWC,EAAOvxC,OAC9D,CACA,GAAsB,MAAlBuxC,EAAOtxC,QAAiB,CACxB,GAA8B,iBAAnBsxC,EAAOtxC,QACd,MAAM9iC,UAAU,oDACpBk7C,EAAQpY,QAAUwvC,EAAMh/F,KAAKs9D,YAAYujC,WAAWC,EAAOtxC,QAC/D,CACA,GAAIsxC,EAAO9pF,KAAM,CACb,IAAKvU,MAAM+lC,QAAQs4D,EAAO9pF,MACtB,MAAM0V,UAAU,gDACpBk7C,EAAQ5wD,KAAO,GACf,IAAK,IAAItU,EAAI,EAAGA,EAAIo+F,EAAO9pF,KAAKtZ,SAAUgF,EAClCo8F,EAAMj8B,MACL+E,EAAQ5wD,KAAKtU,GAAKo8F,EAAMj8B,KAAKC,UAAUg+B,EAAO9pF,KAAKtU,KAAKkgE,UAAW,EACrC,iBAAnBk+B,EAAO9pF,KAAKtU,GACxBklE,EAAQ5wD,KAAKtU,GAAK6+C,SAASu/C,EAAO9pF,KAAKtU,GAAI,IACZ,iBAAnBo+F,EAAO9pF,KAAKtU,GACxBklE,EAAQ5wD,KAAKtU,GAAKo+F,EAAO9pF,KAAKtU,GACC,iBAAnBo+F,EAAO9pF,KAAKtU,KACxBklE,EAAQ5wD,KAAKtU,GAAK,IAAIo8F,EAAMiC,SAASD,EAAO9pF,KAAKtU,GAAGqgE,MAAQ,EAAG+9B,EAAO9pF,KAAKtU,GAAGsgE,OAAS,GAAGpE,WACtG,CACA,OAAOgJ,CACX,EAWAy4B,EAAkBY,SAAW,SAAkBr5B,EAASrrE,GAC/CA,IACDA,EAAU,CAAC,GACf,IAAIukG,EAAS,CAAC,EAWd,IAVIvkG,EAAQ2kG,QAAU3kG,EAAQ4kG,YAC1BL,EAAO9pF,KAAO,IACdza,EAAQ4kG,WACRL,EAAOvxC,OAAS,KAChBuxC,EAAOtxC,QAAU,MAEC,MAAlBoY,EAAQrY,QAAkBqY,EAAQzxC,eAAe,YACjD2qE,EAAOvxC,OAASyvC,EAAMh/F,KAAKs9D,YAAY2jC,SAASr5B,EAAQrY,OAAQhzD,IAC7C,MAAnBqrE,EAAQpY,SAAmBoY,EAAQzxC,eAAe,aAClD2qE,EAAOtxC,QAAUwvC,EAAMh/F,KAAKs9D,YAAY2jC,SAASr5B,EAAQpY,QAASjzD,IAClEqrE,EAAQ5wD,MAAQ4wD,EAAQ5wD,KAAKtZ,OAAQ,CACrCojG,EAAO9pF,KAAO,GACd,IAAK,IAAIunB,EAAI,EAAGA,EAAIqpC,EAAQ5wD,KAAKtZ,SAAU6gC,EACR,iBAApBqpC,EAAQ5wD,KAAKunB,GACpBuiE,EAAO9pF,KAAKunB,GAAKhiC,EAAQ8kG,QAAU/d,OAASA,OAAO1b,EAAQ5wD,KAAKunB,IAAMqpC,EAAQ5wD,KAAKunB,GAEnFuiE,EAAO9pF,KAAKunB,GAAKhiC,EAAQ8kG,QAAU/d,OAASwb,EAAMj8B,KAAKy8B,UAAU/uD,SAASna,KAAKwxC,EAAQ5wD,KAAKunB,IAAMhiC,EAAQ8kG,QAAUhkG,OAAS,IAAIyhG,EAAMiC,SAASn5B,EAAQ5wD,KAAKunB,GAAGwkC,MAAQ,EAAG6E,EAAQ5wD,KAAKunB,GAAGykC,OAAS,GAAGpE,WAAagJ,EAAQ5wD,KAAKunB,EAC7O,CACA,OAAOuiE,CACX,EASAT,EAAkBf,UAAUmC,OAAS,WACjC,OAAO1iG,KAAK+nC,YAAYm6D,SAASliG,KAAM0/F,EAAUM,KAAK2C,cAC1D,EAUArB,EAAkBsB,WAAa,SAAoBC,GAI/C,YAHsBtgG,IAAlBsgG,IACAA,EAAgB,uBAEbA,EAAgB,yBAC3B,EAEOvB,CACV,CArSwB,GAuSzBrgG,EAAKqjG,iBAAmB,WAiBpB,SAASA,EAAiBlE,GAEtB,GADApgG,KAAKs7B,IAAM,GACP8kE,EACA,IAAK,IAAI1sF,EAAOlU,OAAOkU,KAAK0sF,GAAaz8F,EAAI,EAAGA,EAAI+P,EAAK/U,SAAUgF,EACpC,MAAvBy8F,EAAW1sF,EAAK/P,MAChB3D,KAAK0T,EAAK/P,IAAMy8F,EAAW1sF,EAAK/P,IAChD,CAkeA,OA1dA2gG,EAAiB/D,UAAUjlE,IAAMykE,EAAMa,WAUvC0D,EAAiB3kD,OAAS,SAAgBygD,GACtC,OAAO,IAAIkE,EAAiBlE,EAChC,EAWAkE,EAAiBhzF,OAAS,SAAgBu3D,EAASg4B,GAG/C,GAFKA,IACDA,EAAShB,EAAQlgD,UACF,MAAfkpB,EAAQvtC,KAAeutC,EAAQvtC,IAAI38B,OACnC,IAAK,IAAIgF,EAAI,EAAGA,EAAIklE,EAAQvtC,IAAI38B,SAAUgF,EACtCs8F,EAAMh/F,KAAKqjG,iBAAiBzgD,UAAUvyC,OAAOu3D,EAAQvtC,IAAI33B,GAAIk9F,EAAOC,OAA8B,IAAII,QAAQC,SACtH,OAAON,CACX,EAWAyD,EAAiB/C,gBAAkB,SAAyB14B,EAASg4B,GACjE,OAAO7gG,KAAKsR,OAAOu3D,EAASg4B,GAAQM,QACxC,EAaAmD,EAAiB/yF,OAAS,SAAgBiwF,EAAQ7iG,GACxC6iG,aAAkB7B,IACpB6B,EAAS7B,EAAQhgD,OAAO6hD,IAE5B,IADA,IAAIhlE,OAAiBj6B,IAAX5D,EAAuB6iG,EAAO/1D,IAAM+1D,EAAOv7B,IAAMtnE,EAAQkqE,EAAU,IAAIo3B,EAAMh/F,KAAKqjG,iBACrF9C,EAAOv7B,IAAMzpC,GAAK,CACrB,IAAI83D,EAAMkN,EAAOV,SACTxM,IAAQ,GACX,GACSzrB,EAAQvtC,KAAOutC,EAAQvtC,IAAI38B,SAC7BkqE,EAAQvtC,IAAM,IAClButC,EAAQvtC,IAAIv2B,KAAKk7F,EAAMh/F,KAAKqjG,iBAAiBzgD,UAAUtyC,OAAOiwF,EAAQA,EAAOV,YAIjFU,EAAOE,SAAe,EAANpN,EAGxB,CACA,OAAOzrB,CACX,EAYAy7B,EAAiB3C,gBAAkB,SAAyBH,GAGxD,OAFMA,aAAkB7B,IACpB6B,EAAS,IAAI7B,EAAQ6B,IAClBxhG,KAAKuR,OAAOiwF,EAAQA,EAAOV,SACtC,EAUAwD,EAAiB1C,OAAS,SAAgB/4B,GACtC,GAAuB,iBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAmB,MAAfA,EAAQvtC,KAAeutC,EAAQzxC,eAAe,OAAQ,CACtD,IAAK1zB,MAAM+lC,QAAQo/B,EAAQvtC,KACvB,MAAO,sBACX,IAAK,IAAI33B,EAAI,EAAGA,EAAIklE,EAAQvtC,IAAI38B,SAAUgF,EAAG,CACzC,IAAIkgC,EAAQo8D,EAAMh/F,KAAKqjG,iBAAiBzgD,UAAU+9C,OAAO/4B,EAAQvtC,IAAI33B,IACrE,GAAIkgC,EACA,MAAO,OAASA,CACxB,CACJ,CACA,OAAO,IACX,EAUAygE,EAAiBxC,WAAa,SAAoBC,GAC9C,GAAIA,aAAkB9B,EAAMh/F,KAAKqjG,iBAC7B,OAAOvC,EACX,IAAIl5B,EAAU,IAAIo3B,EAAMh/F,KAAKqjG,iBAC7B,GAAIvC,EAAOzmE,IAAK,CACZ,IAAK53B,MAAM+lC,QAAQs4D,EAAOzmE,KACtB,MAAM3N,UAAU,8CACpBk7C,EAAQvtC,IAAM,GACd,IAAK,IAAI33B,EAAI,EAAGA,EAAIo+F,EAAOzmE,IAAI38B,SAAUgF,EAAG,CACxC,GAA6B,iBAAlBo+F,EAAOzmE,IAAI33B,GAClB,MAAMgqB,UAAU,+CACpBk7C,EAAQvtC,IAAI33B,GAAKs8F,EAAMh/F,KAAKqjG,iBAAiBzgD,UAAUi+C,WAAWC,EAAOzmE,IAAI33B,GACjF,CACJ,CACA,OAAOklE,CACX,EAWAy7B,EAAiBpC,SAAW,SAAkBr5B,EAASrrE,GAC9CA,IACDA,EAAU,CAAC,GACf,IAAIukG,EAAS,CAAC,EAGd,IAFIvkG,EAAQ2kG,QAAU3kG,EAAQ4kG,YAC1BL,EAAOzmE,IAAM,IACbutC,EAAQvtC,KAAOutC,EAAQvtC,IAAI38B,OAAQ,CACnCojG,EAAOzmE,IAAM,GACb,IAAK,IAAIkE,EAAI,EAAGA,EAAIqpC,EAAQvtC,IAAI38B,SAAU6gC,EACtCuiE,EAAOzmE,IAAIkE,GAAKygE,EAAMh/F,KAAKqjG,iBAAiBzgD,UAAUq+C,SAASr5B,EAAQvtC,IAAIkE,GAAIhiC,EACvF,CACA,OAAOukG,CACX,EASAuC,EAAiB/D,UAAUmC,OAAS,WAChC,OAAO1iG,KAAK+nC,YAAYm6D,SAASliG,KAAM0/F,EAAUM,KAAK2C,cAC1D,EAUA2B,EAAiB1B,WAAa,SAAoBC,GAI9C,YAHsBtgG,IAAlBsgG,IACAA,EAAgB,uBAEbA,EAAgB,wBAC3B,EAEAyB,EAAiBzgD,UAAY,WAmBzB,SAASA,EAAUu8C,GACf,GAAIA,EACA,IAAK,IAAI1sF,EAAOlU,OAAOkU,KAAK0sF,GAAaz8F,EAAI,EAAGA,EAAI+P,EAAK/U,SAAUgF,EACpC,MAAvBy8F,EAAW1sF,EAAK/P,MAChB3D,KAAK0T,EAAK/P,IAAMy8F,EAAW1sF,EAAK/P,IAChD,CA2BA,IAAI4gG,EAsOJ,OAzPA1gD,EAAU08C,UAAUvlD,SAAW,KAQ/B6I,EAAU08C,UAAUp6C,SAAW,KAQ/BtC,EAAU08C,UAAUr7C,WAAa,GAWjC1lD,OAAOC,eAAeokD,EAAU08C,UAAW,QAAS,CAChDz+F,IAAKi+F,EAAMyE,YAAYD,EAAe,CAAC,WAAY,aACnDpjG,IAAK4+F,EAAM0E,YAAYF,KAW3B1gD,EAAUlE,OAAS,SAAgBygD,GAC/B,OAAO,IAAIv8C,EAAUu8C,EACzB,EAWAv8C,EAAUvyC,OAAS,SAAgBu3D,EAASg4B,GASxC,OARKA,IACDA,EAAShB,EAAQlgD,UACG,MAApBkpB,EAAQ7tB,UAAoBx7C,OAAO43B,eAAeC,KAAKwxC,EAAS,aAChEg4B,EAAOC,OAA8B,GAAGG,MAAMp4B,EAAQ7tB,UAClC,MAApB6tB,EAAQ1iB,UAAoB3mD,OAAO43B,eAAeC,KAAKwxC,EAAS,aAChEg4B,EAAOC,OAA8B,IAAIC,OAAOl4B,EAAQ1iB,UAClC,MAAtB0iB,EAAQ3jB,YAAsB1lD,OAAO43B,eAAeC,KAAKwxC,EAAS,eAClEg4B,EAAOC,OAA8B,IAAIC,OAAOl4B,EAAQ3jB,YACrD27C,CACX,EAWAh9C,EAAU09C,gBAAkB,SAAyB14B,EAASg4B,GAC1D,OAAO7gG,KAAKsR,OAAOu3D,EAASg4B,GAAQM,QACxC,EAaAt9C,EAAUtyC,OAAS,SAAgBiwF,EAAQ7iG,GACjC6iG,aAAkB7B,IACpB6B,EAAS7B,EAAQhgD,OAAO6hD,IAE5B,IADA,IAAIhlE,OAAiBj6B,IAAX5D,EAAuB6iG,EAAO/1D,IAAM+1D,EAAOv7B,IAAMtnE,EAAQkqE,EAAU,IAAIo3B,EAAMh/F,KAAKqjG,iBAAiBzgD,UACtG29C,EAAOv7B,IAAMzpC,GAAK,CACrB,IAAI83D,EAAMkN,EAAOV,SACjB,OAAQxM,IAAQ,GAChB,KAAK,EACGzrB,EAAQ7tB,SAAWwmD,EAAOP,QAC1B,MAER,KAAK,EACGp4B,EAAQ1iB,SAAWq7C,EAAOT,SAC1B,MAER,KAAK,EACGl4B,EAAQ3jB,WAAas8C,EAAOT,SAC5B,MAER,QACIS,EAAOE,SAAe,EAANpN,GAGxB,CACA,OAAOzrB,CACX,EAYAhlB,EAAU89C,gBAAkB,SAAyBH,GAGjD,OAFMA,aAAkB7B,IACpB6B,EAAS,IAAI7B,EAAQ6B,IAClBxhG,KAAKuR,OAAOiwF,EAAQA,EAAOV,SACtC,EAUAj9C,EAAU+9C,OAAS,SAAgB/4B,GAC/B,GAAuB,iBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,IAAIu3B,EAAa,CAAC,EAClB,GAAwB,MAApBv3B,EAAQ7tB,UAAoB6tB,EAAQzxC,eAAe,cACnDgpE,EAAWzgG,MAAQ,IACdogG,EAAMxhG,UAAUsqE,EAAQ7tB,WAAe6tB,EAAQ7tB,UAAY+kD,EAAMxhG,UAAUsqE,EAAQ7tB,SAASgpB,MAAQ+7B,EAAMxhG,UAAUsqE,EAAQ7tB,SAASipB,QACtI,MAAO,kCAEf,GAAwB,MAApB4E,EAAQ1iB,UAAoB0iB,EAAQzxC,eAAe,YAAa,CAChE,GAAyB,IAArBgpE,EAAWzgG,MACX,MAAO,yBAEX,GADAygG,EAAWzgG,MAAQ,GACdogG,EAAM8B,SAASh5B,EAAQ1iB,UACxB,MAAO,2BACf,CACA,OAA0B,MAAtB0iB,EAAQ3jB,YAAsB2jB,EAAQzxC,eAAe,gBAChD2oE,EAAM8B,SAASh5B,EAAQ3jB,YACjB,8BACR,IACX,EAUArB,EAAUi+C,WAAa,SAAoBC,GACvC,GAAIA,aAAkB9B,EAAMh/F,KAAKqjG,iBAAiBzgD,UAC9C,OAAOk+C,EACX,IAAIl5B,EAAU,IAAIo3B,EAAMh/F,KAAKqjG,iBAAiBzgD,UAc9C,OAbuB,MAAnBk+C,EAAO/mD,WACH+kD,EAAMj8B,MACL+E,EAAQ7tB,SAAW+kD,EAAMj8B,KAAKC,UAAUg+B,EAAO/mD,WAAW6oB,UAAW,EACtC,iBAApBk+B,EAAO/mD,SACnB6tB,EAAQ7tB,SAAWwH,SAASu/C,EAAO/mD,SAAU,IACb,iBAApB+mD,EAAO/mD,SACnB6tB,EAAQ7tB,SAAW+mD,EAAO/mD,SACM,iBAApB+mD,EAAO/mD,WACnB6tB,EAAQ7tB,SAAW,IAAI+kD,EAAMiC,SAASD,EAAO/mD,SAASgpB,MAAQ,EAAG+9B,EAAO/mD,SAASipB,OAAS,GAAGpE,aAC9E,MAAnBkiC,EAAO57C,WACP0iB,EAAQ1iB,SAAWo+B,OAAOwd,EAAO57C,WACZ,MAArB47C,EAAO78C,aACP2jB,EAAQ3jB,WAAaq/B,OAAOwd,EAAO78C,aAChC2jB,CACX,EAWAhlB,EAAUq+C,SAAW,SAAkBr5B,EAASrrE,GACvCA,IACDA,EAAU,CAAC,GACf,IAAIukG,EAAS,CAAC,EAkBd,OAjBIvkG,EAAQ4kG,WACRL,EAAO78C,WAAa,IACA,MAApB2jB,EAAQ7tB,UAAoB6tB,EAAQzxC,eAAe,cACnB,iBAArByxC,EAAQ7tB,SACf+mD,EAAO/mD,SAAWx9C,EAAQ8kG,QAAU/d,OAASA,OAAO1b,EAAQ7tB,UAAY6tB,EAAQ7tB,SAEhF+mD,EAAO/mD,SAAWx9C,EAAQ8kG,QAAU/d,OAASwb,EAAMj8B,KAAKy8B,UAAU/uD,SAASna,KAAKwxC,EAAQ7tB,UAAYx9C,EAAQ8kG,QAAUhkG,OAAS,IAAIyhG,EAAMiC,SAASn5B,EAAQ7tB,SAASgpB,MAAQ,EAAG6E,EAAQ7tB,SAASipB,OAAS,GAAGpE,WAAagJ,EAAQ7tB,SAChOx9C,EAAQknG,SACR3C,EAAOpiG,MAAQ,aAEC,MAApBkpE,EAAQ1iB,UAAoB0iB,EAAQzxC,eAAe,cACnD2qE,EAAO57C,SAAW0iB,EAAQ1iB,SACtB3oD,EAAQknG,SACR3C,EAAOpiG,MAAQ,aAEG,MAAtBkpE,EAAQ3jB,YAAsB2jB,EAAQzxC,eAAe,gBACrD2qE,EAAO78C,WAAa2jB,EAAQ3jB,YACzB68C,CACX,EASAl+C,EAAU08C,UAAUmC,OAAS,WACzB,OAAO1iG,KAAK+nC,YAAYm6D,SAASliG,KAAM0/F,EAAUM,KAAK2C,cAC1D,EAUA9+C,EAAU++C,WAAa,SAAoBC,GAIvC,YAHsBtgG,IAAlBsgG,IACAA,EAAgB,uBAEbA,EAAgB,kCAC3B,EAEOh/C,CACV,CA1R4B,GA4RtBygD,CACV,CA1fuB,GA4fxBrjG,EAAKmgG,UAAY,WAsBb,SAASA,EAAUhB,GACf,GAAIA,EACA,IAAK,IAAI1sF,EAAOlU,OAAOkU,KAAK0sF,GAAaz8F,EAAI,EAAGA,EAAI+P,EAAK/U,SAAUgF,EACpC,MAAvBy8F,EAAW1sF,EAAK/P,MAChB3D,KAAK0T,EAAK/P,IAAMy8F,EAAW1sF,EAAK/P,IAChD,CAmDA,IAAI4gG,EA84CJ,OAz7CAnD,EAAUb,UAAUhoD,WAAa,KAQjC6oD,EAAUb,UAAUoE,aAAe,KAQnCvD,EAAUb,UAAUqE,QAAU,KAQ9BxD,EAAUb,UAAUsE,aAAe,KAQnCzD,EAAUb,UAAUuE,iBAAmB,KAQvC1D,EAAUb,UAAUr7C,WAAa,GAWjC1lD,OAAOC,eAAe2hG,EAAUb,UAAW,QAAS,CAChDz+F,IAAKi+F,EAAMyE,YAAYD,EAAe,CAAC,aAAc,eAAgB,UAAW,eAAgB,qBAChGpjG,IAAK4+F,EAAM0E,YAAYF,KAW3BnD,EAAUzhD,OAAS,SAAgBygD,GAC/B,OAAO,IAAIgB,EAAUhB,EACzB,EAWAgB,EAAU9vF,OAAS,SAAgBu3D,EAASg4B,GAexC,OAdKA,IACDA,EAAShB,EAAQlgD,UACK,MAAtBkpB,EAAQtwB,YAAsB/4C,OAAO43B,eAAeC,KAAKwxC,EAAS,eAClEo3B,EAAMh/F,KAAKmgG,UAAUv9F,OAAOyN,OAAOu3D,EAAQtwB,WAAYsoD,EAAOC,OAA8B,IAAII,QAAQC,SAChF,MAAxBt4B,EAAQ87B,cAAwBnlG,OAAO43B,eAAeC,KAAKwxC,EAAS,iBACpEo3B,EAAMh/F,KAAKmgG,UAAU2D,SAASzzF,OAAOu3D,EAAQ87B,aAAc9D,EAAOC,OAA8B,IAAII,QAAQC,SACzF,MAAnBt4B,EAAQ+7B,SAAmBplG,OAAO43B,eAAeC,KAAKwxC,EAAS,YAC/Do3B,EAAMh/F,KAAKmgG,UAAUrgG,IAAIuQ,OAAOu3D,EAAQ+7B,QAAS/D,EAAOC,OAA8B,IAAII,QAAQC,SAC5E,MAAtBt4B,EAAQ3jB,YAAsB1lD,OAAO43B,eAAeC,KAAKwxC,EAAS,eAClEg4B,EAAOC,OAA8B,IAAIC,OAAOl4B,EAAQ3jB,YAC5B,MAA5B2jB,EAAQi8B,kBAA4BtlG,OAAO43B,eAAeC,KAAKwxC,EAAS,qBACxEo3B,EAAMh/F,KAAKmgG,UAAU9wC,aAAah/C,OAAOu3D,EAAQi8B,iBAAkBjE,EAAOC,OAA8B,IAAII,QAAQC,SAC5F,MAAxBt4B,EAAQg8B,cAAwBrlG,OAAO43B,eAAeC,KAAKwxC,EAAS,iBACpEo3B,EAAMh/F,KAAKmgG,UAAU4D,SAAS1zF,OAAOu3D,EAAQg8B,aAAchE,EAAOC,OAA8B,IAAII,QAAQC,SACzGN,CACX,EAWAO,EAAUG,gBAAkB,SAAyB14B,EAASg4B,GAC1D,OAAO7gG,KAAKsR,OAAOu3D,EAASg4B,GAAQM,QACxC,EAaAC,EAAU7vF,OAAS,SAAgBiwF,EAAQ7iG,GACjC6iG,aAAkB7B,IACpB6B,EAAS7B,EAAQhgD,OAAO6hD,IAE5B,IADA,IAAIhlE,OAAiBj6B,IAAX5D,EAAuB6iG,EAAO/1D,IAAM+1D,EAAOv7B,IAAMtnE,EAAQkqE,EAAU,IAAIo3B,EAAMh/F,KAAKmgG,UACrFI,EAAOv7B,IAAMzpC,GAAK,CACrB,IAAI83D,EAAMkN,EAAOV,SACjB,OAAQxM,IAAQ,GAChB,KAAK,EACGzrB,EAAQtwB,WAAa0nD,EAAMh/F,KAAKmgG,UAAUv9F,OAAO0N,OAAOiwF,EAAQA,EAAOV,UACvE,MAER,KAAK,EACGj4B,EAAQ87B,aAAe1E,EAAMh/F,KAAKmgG,UAAU2D,SAASxzF,OAAOiwF,EAAQA,EAAOV,UAC3E,MAER,KAAK,EACGj4B,EAAQ+7B,QAAU3E,EAAMh/F,KAAKmgG,UAAUrgG,IAAIwQ,OAAOiwF,EAAQA,EAAOV,UACjE,MAER,KAAK,EACGj4B,EAAQg8B,aAAe5E,EAAMh/F,KAAKmgG,UAAU4D,SAASzzF,OAAOiwF,EAAQA,EAAOV,UAC3E,MAER,KAAK,EACGj4B,EAAQi8B,iBAAmB7E,EAAMh/F,KAAKmgG,UAAU9wC,aAAa/+C,OAAOiwF,EAAQA,EAAOV,UACnF,MAER,KAAK,EACGj4B,EAAQ3jB,WAAas8C,EAAOT,SAC5B,MAER,QACIS,EAAOE,SAAe,EAANpN,GAGxB,CACA,OAAOzrB,CACX,EAYAu4B,EAAUO,gBAAkB,SAAyBH,GAGjD,OAFMA,aAAkB7B,IACpB6B,EAAS,IAAI7B,EAAQ6B,IAClBxhG,KAAKuR,OAAOiwF,EAAQA,EAAOV,SACtC,EAUAM,EAAUQ,OAAS,SAAgB/4B,GAC/B,GAAuB,iBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,IAAIu3B,EAAa,CAAC,EAClB,GAA0B,MAAtBv3B,EAAQtwB,YAAsBswB,EAAQzxC,eAAe,gBACrDgpE,EAAWzgG,MAAQ,EAEXkkC,EAAQo8D,EAAMh/F,KAAKmgG,UAAUv9F,OAAO+9F,OAAO/4B,EAAQtwB,aAEnD,MAAO,cAAgB1U,EAGnC,GAA4B,MAAxBglC,EAAQ87B,cAAwB97B,EAAQzxC,eAAe,gBAAiB,CACxE,GAAyB,IAArBgpE,EAAWzgG,MACX,MAAO,yBAIP,GAHJygG,EAAWzgG,MAAQ,EAEXkkC,EAAQo8D,EAAMh/F,KAAKmgG,UAAU2D,SAASnD,OAAO/4B,EAAQ87B,cAErD,MAAO,gBAAkB9gE,CAErC,CACA,GAAuB,MAAnBglC,EAAQ+7B,SAAmB/7B,EAAQzxC,eAAe,WAAY,CAC9D,GAAyB,IAArBgpE,EAAWzgG,MACX,MAAO,yBAIP,GAHJygG,EAAWzgG,MAAQ,EAEXkkC,EAAQo8D,EAAMh/F,KAAKmgG,UAAUrgG,IAAI6gG,OAAO/4B,EAAQ+7B,SAEhD,MAAO,WAAa/gE,CAEhC,CACA,GAA4B,MAAxBglC,EAAQg8B,cAAwBh8B,EAAQzxC,eAAe,gBAAiB,CACxE,GAAyB,IAArBgpE,EAAWzgG,MACX,MAAO,yBAIP,GAHJygG,EAAWzgG,MAAQ,EAEXkkC,EAAQo8D,EAAMh/F,KAAKmgG,UAAU4D,SAASpD,OAAO/4B,EAAQg8B,cAErD,MAAO,gBAAkBhhE,CAErC,CACA,GAAgC,MAA5BglC,EAAQi8B,kBAA4Bj8B,EAAQzxC,eAAe,oBAAqB,CAChF,GAAyB,IAArBgpE,EAAWzgG,MACX,MAAO,yBAGP,IAAIkkC,EACJ,GAHJu8D,EAAWzgG,MAAQ,EAEXkkC,EAAQo8D,EAAMh/F,KAAKmgG,UAAU9wC,aAAasxC,OAAO/4B,EAAQi8B,kBAEzD,MAAO,oBAAsBjhE,CAEzC,CACA,OAA0B,MAAtBglC,EAAQ3jB,YAAsB2jB,EAAQzxC,eAAe,gBAChD2oE,EAAM8B,SAASh5B,EAAQ3jB,YACjB,8BACR,IACX,EAUAk8C,EAAUU,WAAa,SAAoBC,GACvC,GAAIA,aAAkB9B,EAAMh/F,KAAKmgG,UAC7B,OAAOW,EACX,IAAIl5B,EAAU,IAAIo3B,EAAMh/F,KAAKmgG,UAC7B,GAAyB,MAArBW,EAAOxpD,WAAoB,CAC3B,GAAiC,iBAAtBwpD,EAAOxpD,WACd,MAAM5qB,UAAU,+CACpBk7C,EAAQtwB,WAAa0nD,EAAMh/F,KAAKmgG,UAAUv9F,OAAOi+F,WAAWC,EAAOxpD,WACvE,CACA,GAA2B,MAAvBwpD,EAAO4C,aAAsB,CAC7B,GAAmC,iBAAxB5C,EAAO4C,aACd,MAAMh3E,UAAU,iDACpBk7C,EAAQ87B,aAAe1E,EAAMh/F,KAAKmgG,UAAU2D,SAASjD,WAAWC,EAAO4C,aAC3E,CACA,GAAsB,MAAlB5C,EAAO6C,QAAiB,CACxB,GAA8B,iBAAnB7C,EAAO6C,QACd,MAAMj3E,UAAU,4CACpBk7C,EAAQ+7B,QAAU3E,EAAMh/F,KAAKmgG,UAAUrgG,IAAI+gG,WAAWC,EAAO6C,QACjE,CACA,GAA2B,MAAvB7C,EAAO8C,aAAsB,CAC7B,GAAmC,iBAAxB9C,EAAO8C,aACd,MAAMl3E,UAAU,iDACpBk7C,EAAQg8B,aAAe5E,EAAMh/F,KAAKmgG,UAAU4D,SAASlD,WAAWC,EAAO8C,aAC3E,CACA,GAA+B,MAA3B9C,EAAO+C,iBAA0B,CACjC,GAAuC,iBAA5B/C,EAAO+C,iBACd,MAAMn3E,UAAU,qDACpBk7C,EAAQi8B,iBAAmB7E,EAAMh/F,KAAKmgG,UAAU9wC,aAAawxC,WAAWC,EAAO+C,iBACnF,CAGA,OAFyB,MAArB/C,EAAO78C,aACP2jB,EAAQ3jB,WAAaq/B,OAAOwd,EAAO78C,aAChC2jB,CACX,EAWAu4B,EAAUc,SAAW,SAAkBr5B,EAASrrE,GACvCA,IACDA,EAAU,CAAC,GACf,IAAIukG,EAAS,CAAC,EA8Bd,OA7BIvkG,EAAQ4kG,WACRL,EAAO78C,WAAa,IACE,MAAtB2jB,EAAQtwB,YAAsBswB,EAAQzxC,eAAe,gBACrD2qE,EAAOxpD,WAAa0nD,EAAMh/F,KAAKmgG,UAAUv9F,OAAOq+F,SAASr5B,EAAQtwB,WAAY/6C,GACzEA,EAAQknG,SACR3C,EAAOpiG,MAAQ,eAEK,MAAxBkpE,EAAQ87B,cAAwB97B,EAAQzxC,eAAe,kBACvD2qE,EAAO4C,aAAe1E,EAAMh/F,KAAKmgG,UAAU2D,SAAS7C,SAASr5B,EAAQ87B,aAAcnnG,GAC/EA,EAAQknG,SACR3C,EAAOpiG,MAAQ,iBAEA,MAAnBkpE,EAAQ+7B,SAAmB/7B,EAAQzxC,eAAe,aAClD2qE,EAAO6C,QAAU3E,EAAMh/F,KAAKmgG,UAAUrgG,IAAImhG,SAASr5B,EAAQ+7B,QAASpnG,GAChEA,EAAQknG,SACR3C,EAAOpiG,MAAQ,YAEG,MAAtBkpE,EAAQ3jB,YAAsB2jB,EAAQzxC,eAAe,gBACrD2qE,EAAO78C,WAAa2jB,EAAQ3jB,YACA,MAA5B2jB,EAAQi8B,kBAA4Bj8B,EAAQzxC,eAAe,sBAC3D2qE,EAAO+C,iBAAmB7E,EAAMh/F,KAAKmgG,UAAU9wC,aAAa4xC,SAASr5B,EAAQi8B,iBAAkBtnG,GAC3FA,EAAQknG,SACR3C,EAAOpiG,MAAQ,qBAEK,MAAxBkpE,EAAQg8B,cAAwBh8B,EAAQzxC,eAAe,kBACvD2qE,EAAO8C,aAAe5E,EAAMh/F,KAAKmgG,UAAU4D,SAAS9C,SAASr5B,EAAQg8B,aAAcrnG,GAC/EA,EAAQknG,SACR3C,EAAOpiG,MAAQ,iBAEhBoiG,CACX,EASAX,EAAUb,UAAUmC,OAAS,WACzB,OAAO1iG,KAAK+nC,YAAYm6D,SAASliG,KAAM0/F,EAAUM,KAAK2C,cAC1D,EAUAvB,EAAUwB,WAAa,SAAoBC,GAIvC,YAHsBtgG,IAAlBsgG,IACAA,EAAgB,uBAEbA,EAAgB,iBAC3B,EAEAzB,EAAUv9F,OAAS,WAkBf,SAASA,EAAOu8F,GACZ,GAAIA,EACA,IAAK,IAAI1sF,EAAOlU,OAAOkU,KAAK0sF,GAAaz8F,EAAI,EAAGA,EAAI+P,EAAK/U,SAAUgF,EACpC,MAAvBy8F,EAAW1sF,EAAK/P,MAChB3D,KAAK0T,EAAK/P,IAAMy8F,EAAW1sF,EAAK/P,IAChD,CA8MA,OAtMAE,EAAO08F,UAAUzlD,SAAW,EAQ5Bj3C,EAAO08F,UAAUh3F,MAAQ,KAUzB1F,EAAO87C,OAAS,SAAgBygD,GAC5B,OAAO,IAAIv8F,EAAOu8F,EACtB,EAWAv8F,EAAOyN,OAAS,SAAgBu3D,EAASg4B,GAOrC,OANKA,IACDA,EAAShB,EAAQlgD,UACG,MAApBkpB,EAAQ/tB,UAAoBt7C,OAAO43B,eAAeC,KAAKwxC,EAAS,aAChEg4B,EAAOC,OAA8B,GAAGO,MAAMx4B,EAAQ/tB,UACrC,MAAjB+tB,EAAQt/D,OAAiB/J,OAAO43B,eAAeC,KAAKwxC,EAAS,UAC7Do3B,EAAMh/F,KAAKqjG,iBAAiBhzF,OAAOu3D,EAAQt/D,MAAOs3F,EAAOC,OAA8B,IAAII,QAAQC,SAChGN,CACX,EAWAh9F,EAAO09F,gBAAkB,SAAyB14B,EAASg4B,GACvD,OAAO7gG,KAAKsR,OAAOu3D,EAASg4B,GAAQM,QACxC,EAaAt9F,EAAO0N,OAAS,SAAgBiwF,EAAQ7iG,GAC9B6iG,aAAkB7B,IACpB6B,EAAS7B,EAAQhgD,OAAO6hD,IAE5B,IADA,IAAIhlE,OAAiBj6B,IAAX5D,EAAuB6iG,EAAO/1D,IAAM+1D,EAAOv7B,IAAMtnE,EAAQkqE,EAAU,IAAIo3B,EAAMh/F,KAAKmgG,UAAUv9F,OAC/F29F,EAAOv7B,IAAMzpC,GAAK,CACrB,IAAI83D,EAAMkN,EAAOV,SACjB,OAAQxM,IAAQ,GAChB,KAAK,EACGzrB,EAAQ/tB,SAAW0mD,EAAOH,QAC1B,MAER,KAAK,EACGx4B,EAAQt/D,MAAQ02F,EAAMh/F,KAAKqjG,iBAAiB/yF,OAAOiwF,EAAQA,EAAOV,UAClE,MAER,QACIU,EAAOE,SAAe,EAANpN,GAGxB,CACA,OAAOzrB,CACX,EAYAhlE,EAAO89F,gBAAkB,SAAyBH,GAG9C,OAFMA,aAAkB7B,IACpB6B,EAAS,IAAI7B,EAAQ6B,IAClBxhG,KAAKuR,OAAOiwF,EAAQA,EAAOV,SACtC,EAUAj9F,EAAO+9F,OAAS,SAAgB/4B,GAC5B,GAAuB,iBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAwB,MAApBA,EAAQ/tB,UAAoB+tB,EAAQzxC,eAAe,cAC9C2oE,EAAMxhG,UAAUsqE,EAAQ/tB,UACzB,MAAO,6BACf,GAAqB,MAAjB+tB,EAAQt/D,OAAiBs/D,EAAQzxC,eAAe,SAAU,CAC1D,IAAIyM,EAAQo8D,EAAMh/F,KAAKqjG,iBAAiB1C,OAAO/4B,EAAQt/D,OACvD,GAAIs6B,EACA,MAAO,SAAWA,CAC1B,CACA,OAAO,IACX,EAUAhgC,EAAOi+F,WAAa,SAAoBC,GACpC,GAAIA,aAAkB9B,EAAMh/F,KAAKmgG,UAAUv9F,OACvC,OAAOk+F,EACX,IAAIl5B,EAAU,IAAIo3B,EAAMh/F,KAAKmgG,UAAUv9F,OAGvC,GAFuB,MAAnBk+F,EAAOjnD,WACP+tB,EAAQ/tB,SAA6B,EAAlBinD,EAAOjnD,UACV,MAAhBinD,EAAOx4F,MAAe,CACtB,GAA4B,iBAAjBw4F,EAAOx4F,MACd,MAAMokB,UAAU,iDACpBk7C,EAAQt/D,MAAQ02F,EAAMh/F,KAAKqjG,iBAAiBxC,WAAWC,EAAOx4F,MAClE,CACA,OAAOs/D,CACX,EAWAhlE,EAAOq+F,SAAW,SAAkBr5B,EAASrrE,GACpCA,IACDA,EAAU,CAAC,GACf,IAAIukG,EAAS,CAAC,EASd,OARIvkG,EAAQ4kG,WACRL,EAAOjnD,SAAW,EAClBinD,EAAOx4F,MAAQ,MAEK,MAApBs/D,EAAQ/tB,UAAoB+tB,EAAQzxC,eAAe,cACnD2qE,EAAOjnD,SAAW+tB,EAAQ/tB,UACT,MAAjB+tB,EAAQt/D,OAAiBs/D,EAAQzxC,eAAe,WAChD2qE,EAAOx4F,MAAQ02F,EAAMh/F,KAAKqjG,iBAAiBpC,SAASr5B,EAAQt/D,MAAO/L,IAChEukG,CACX,EASAl+F,EAAO08F,UAAUmC,OAAS,WACtB,OAAO1iG,KAAK+nC,YAAYm6D,SAASliG,KAAM0/F,EAAUM,KAAK2C,cAC1D,EAUA9+F,EAAO++F,WAAa,SAAoBC,GAIpC,YAHsBtgG,IAAlBsgG,IACAA,EAAgB,uBAEbA,EAAgB,wBAC3B,EAEOh/F,CACV,CAtOkB,GAwOnBu9F,EAAU2D,SAAW,WAiBjB,SAASA,EAAS3E,GACd,GAAIA,EACA,IAAK,IAAI1sF,EAAOlU,OAAOkU,KAAK0sF,GAAaz8F,EAAI,EAAGA,EAAI+P,EAAK/U,SAAUgF,EACpC,MAAvBy8F,EAAW1sF,EAAK/P,MAChB3D,KAAK0T,EAAK/P,IAAMy8F,EAAW1sF,EAAK/P,IAChD,CAuLA,OA/KAohG,EAASxE,UAAUzlD,SAAW,KAU9BiqD,EAASplD,OAAS,SAAgBygD,GAC9B,OAAO,IAAI2E,EAAS3E,EACxB,EAWA2E,EAASzzF,OAAS,SAAgBu3D,EAASg4B,GAKvC,OAJKA,IACDA,EAAShB,EAAQlgD,UACG,MAApBkpB,EAAQ/tB,UAAoBt7C,OAAO43B,eAAeC,KAAKwxC,EAAS,aAChEo3B,EAAMh/F,KAAKmgG,UAAU9vF,OAAOu3D,EAAQ/tB,SAAU+lD,EAAOC,OAA8B,IAAII,QAAQC,SAC5FN,CACX,EAWAkE,EAASxD,gBAAkB,SAAyB14B,EAASg4B,GACzD,OAAO7gG,KAAKsR,OAAOu3D,EAASg4B,GAAQM,QACxC,EAaA4D,EAASxzF,OAAS,SAAgBiwF,EAAQ7iG,GAChC6iG,aAAkB7B,IACpB6B,EAAS7B,EAAQhgD,OAAO6hD,IAE5B,IADA,IAAIhlE,OAAiBj6B,IAAX5D,EAAuB6iG,EAAO/1D,IAAM+1D,EAAOv7B,IAAMtnE,EAAQkqE,EAAU,IAAIo3B,EAAMh/F,KAAKmgG,UAAU2D,SAC/FvD,EAAOv7B,IAAMzpC,GAAK,CACrB,IAAI83D,EAAMkN,EAAOV,SACTxM,IAAQ,GACX,EACGzrB,EAAQ/tB,SAAWmlD,EAAMh/F,KAAKmgG,UAAU7vF,OAAOiwF,EAAQA,EAAOV,UAIlEU,EAAOE,SAAe,EAANpN,EAGxB,CACA,OAAOzrB,CACX,EAYAk8B,EAASpD,gBAAkB,SAAyBH,GAGhD,OAFMA,aAAkB7B,IACpB6B,EAAS,IAAI7B,EAAQ6B,IAClBxhG,KAAKuR,OAAOiwF,EAAQA,EAAOV,SACtC,EAUAiE,EAASnD,OAAS,SAAgB/4B,GAC9B,GAAuB,iBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAwB,MAApBA,EAAQ/tB,UAAoB+tB,EAAQzxC,eAAe,YAAa,CAChE,IAAIyM,EAAQo8D,EAAMh/F,KAAKmgG,UAAUQ,OAAO/4B,EAAQ/tB,UAChD,GAAIjX,EACA,MAAO,YAAcA,CAC7B,CACA,OAAO,IACX,EAUAkhE,EAASjD,WAAa,SAAoBC,GACtC,GAAIA,aAAkB9B,EAAMh/F,KAAKmgG,UAAU2D,SACvC,OAAOhD,EACX,IAAIl5B,EAAU,IAAIo3B,EAAMh/F,KAAKmgG,UAAU2D,SACvC,GAAuB,MAAnBhD,EAAOjnD,SAAkB,CACzB,GAA+B,iBAApBinD,EAAOjnD,SACd,MAAMntB,UAAU,sDACpBk7C,EAAQ/tB,SAAWmlD,EAAMh/F,KAAKmgG,UAAUU,WAAWC,EAAOjnD,SAC9D,CACA,OAAO+tB,CACX,EAWAk8B,EAAS7C,SAAW,SAAkBr5B,EAASrrE,GACtCA,IACDA,EAAU,CAAC,GACf,IAAIukG,EAAS,CAAC,EAKd,OAJIvkG,EAAQ4kG,WACRL,EAAOjnD,SAAW,MACE,MAApB+tB,EAAQ/tB,UAAoB+tB,EAAQzxC,eAAe,cACnD2qE,EAAOjnD,SAAWmlD,EAAMh/F,KAAKmgG,UAAUc,SAASr5B,EAAQ/tB,SAAUt9C,IAC/DukG,CACX,EASAgD,EAASxE,UAAUmC,OAAS,WACxB,OAAO1iG,KAAK+nC,YAAYm6D,SAASliG,KAAM0/F,EAAUM,KAAK2C,cAC1D,EAUAoC,EAASnC,WAAa,SAAoBC,GAItC,YAHsBtgG,IAAlBsgG,IACAA,EAAgB,uBAEbA,EAAgB,0BAC3B,EAEOkC,CACV,CA9MoB,GAgNrB3D,EAAUrgG,IAAM,WAkBZ,SAASA,EAAIq/F,GACT,GAAIA,EACA,IAAK,IAAI1sF,EAAOlU,OAAOkU,KAAK0sF,GAAaz8F,EAAI,EAAGA,EAAI+P,EAAK/U,SAAUgF,EACpC,MAAvBy8F,EAAW1sF,EAAK/P,MAChB3D,KAAK0T,EAAK/P,IAAMy8F,EAAW1sF,EAAK/P,IAChD,CA8MA,OAtMA5C,EAAIw/F,UAAU74C,QAAU,EAQxB3mD,EAAIw/F,UAAU7lD,UAAY,KAU1B35C,EAAI4+C,OAAS,SAAgBygD,GACzB,OAAO,IAAIr/F,EAAIq/F,EACnB,EAWAr/F,EAAIuQ,OAAS,SAAgBu3D,EAASg4B,GAOlC,OANKA,IACDA,EAAShB,EAAQlgD,UACE,MAAnBkpB,EAAQnhB,SAAmBloD,OAAO43B,eAAeC,KAAKwxC,EAAS,YAC/Dg4B,EAAOC,OAA8B,GAAGO,MAAMx4B,EAAQnhB,SACjC,MAArBmhB,EAAQnuB,WAAqBl7C,OAAO43B,eAAeC,KAAKwxC,EAAS,cACjEo3B,EAAMh/F,KAAKmgG,UAAU9vF,OAAOu3D,EAAQnuB,UAAWmmD,EAAOC,OAA8B,IAAII,QAAQC,SAC7FN,CACX,EAWA9/F,EAAIwgG,gBAAkB,SAAyB14B,EAASg4B,GACpD,OAAO7gG,KAAKsR,OAAOu3D,EAASg4B,GAAQM,QACxC,EAaApgG,EAAIwQ,OAAS,SAAgBiwF,EAAQ7iG,GAC3B6iG,aAAkB7B,IACpB6B,EAAS7B,EAAQhgD,OAAO6hD,IAE5B,IADA,IAAIhlE,OAAiBj6B,IAAX5D,EAAuB6iG,EAAO/1D,IAAM+1D,EAAOv7B,IAAMtnE,EAAQkqE,EAAU,IAAIo3B,EAAMh/F,KAAKmgG,UAAUrgG,IAC/FygG,EAAOv7B,IAAMzpC,GAAK,CACrB,IAAI83D,EAAMkN,EAAOV,SACjB,OAAQxM,IAAQ,GAChB,KAAK,EACGzrB,EAAQnhB,QAAU85C,EAAOH,QACzB,MAER,KAAK,EACGx4B,EAAQnuB,UAAYulD,EAAMh/F,KAAKmgG,UAAU7vF,OAAOiwF,EAAQA,EAAOV,UAC/D,MAER,QACIU,EAAOE,SAAe,EAANpN,GAGxB,CACA,OAAOzrB,CACX,EAYA9nE,EAAI4gG,gBAAkB,SAAyBH,GAG3C,OAFMA,aAAkB7B,IACpB6B,EAAS,IAAI7B,EAAQ6B,IAClBxhG,KAAKuR,OAAOiwF,EAAQA,EAAOV,SACtC,EAUA//F,EAAI6gG,OAAS,SAAgB/4B,GACzB,GAAuB,iBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAuB,MAAnBA,EAAQnhB,SAAmBmhB,EAAQzxC,eAAe,aAC7C2oE,EAAMxhG,UAAUsqE,EAAQnhB,SACzB,MAAO,4BACf,GAAyB,MAArBmhB,EAAQnuB,WAAqBmuB,EAAQzxC,eAAe,aAAc,CAClE,IAAIyM,EAAQo8D,EAAMh/F,KAAKmgG,UAAUQ,OAAO/4B,EAAQnuB,WAChD,GAAI7W,EACA,MAAO,aAAeA,CAC9B,CACA,OAAO,IACX,EAUA9iC,EAAI+gG,WAAa,SAAoBC,GACjC,GAAIA,aAAkB9B,EAAMh/F,KAAKmgG,UAAUrgG,IACvC,OAAOghG,EACX,IAAIl5B,EAAU,IAAIo3B,EAAMh/F,KAAKmgG,UAAUrgG,IAGvC,GAFsB,MAAlBghG,EAAOr6C,UACPmhB,EAAQnhB,QAA2B,EAAjBq6C,EAAOr6C,SACL,MAApBq6C,EAAOrnD,UAAmB,CAC1B,GAAgC,iBAArBqnD,EAAOrnD,UACd,MAAM/sB,UAAU,kDACpBk7C,EAAQnuB,UAAYulD,EAAMh/F,KAAKmgG,UAAUU,WAAWC,EAAOrnD,UAC/D,CACA,OAAOmuB,CACX,EAWA9nE,EAAImhG,SAAW,SAAkBr5B,EAASrrE,GACjCA,IACDA,EAAU,CAAC,GACf,IAAIukG,EAAS,CAAC,EASd,OARIvkG,EAAQ4kG,WACRL,EAAOr6C,QAAU,EACjBq6C,EAAOrnD,UAAY,MAEA,MAAnBmuB,EAAQnhB,SAAmBmhB,EAAQzxC,eAAe,aAClD2qE,EAAOr6C,QAAUmhB,EAAQnhB,SACJ,MAArBmhB,EAAQnuB,WAAqBmuB,EAAQzxC,eAAe,eACpD2qE,EAAOrnD,UAAYulD,EAAMh/F,KAAKmgG,UAAUc,SAASr5B,EAAQnuB,UAAWl9C,IACjEukG,CACX,EASAhhG,EAAIw/F,UAAUmC,OAAS,WACnB,OAAO1iG,KAAK+nC,YAAYm6D,SAASliG,KAAM0/F,EAAUM,KAAK2C,cAC1D,EAUA5hG,EAAI6hG,WAAa,SAAoBC,GAIjC,YAHsBtgG,IAAlBsgG,IACAA,EAAgB,uBAEbA,EAAgB,qBAC3B,EAEO9hG,CACV,CAtOe,GAwOhBqgG,EAAU4D,SAAW,WAiBjB,SAASA,EAAS5E,GACd,GAAIA,EACA,IAAK,IAAI1sF,EAAOlU,OAAOkU,KAAK0sF,GAAaz8F,EAAI,EAAGA,EAAI+P,EAAK/U,SAAUgF,EACpC,MAAvBy8F,EAAW1sF,EAAK/P,MAChB3D,KAAK0T,EAAK/P,IAAMy8F,EAAW1sF,EAAK/P,IAChD,CAuLA,OA/KAqhG,EAASzE,UAAUzlD,SAAW,KAU9BkqD,EAASrlD,OAAS,SAAgBygD,GAC9B,OAAO,IAAI4E,EAAS5E,EACxB,EAWA4E,EAAS1zF,OAAS,SAAgBu3D,EAASg4B,GAKvC,OAJKA,IACDA,EAAShB,EAAQlgD,UACG,MAApBkpB,EAAQ/tB,UAAoBt7C,OAAO43B,eAAeC,KAAKwxC,EAAS,aAChEo3B,EAAMh/F,KAAKmgG,UAAU9vF,OAAOu3D,EAAQ/tB,SAAU+lD,EAAOC,OAA8B,IAAII,QAAQC,SAC5FN,CACX,EAWAmE,EAASzD,gBAAkB,SAAyB14B,EAASg4B,GACzD,OAAO7gG,KAAKsR,OAAOu3D,EAASg4B,GAAQM,QACxC,EAaA6D,EAASzzF,OAAS,SAAgBiwF,EAAQ7iG,GAChC6iG,aAAkB7B,IACpB6B,EAAS7B,EAAQhgD,OAAO6hD,IAE5B,IADA,IAAIhlE,OAAiBj6B,IAAX5D,EAAuB6iG,EAAO/1D,IAAM+1D,EAAOv7B,IAAMtnE,EAAQkqE,EAAU,IAAIo3B,EAAMh/F,KAAKmgG,UAAU4D,SAC/FxD,EAAOv7B,IAAMzpC,GAAK,CACrB,IAAI83D,EAAMkN,EAAOV,SACTxM,IAAQ,GACX,EACGzrB,EAAQ/tB,SAAWmlD,EAAMh/F,KAAKmgG,UAAU7vF,OAAOiwF,EAAQA,EAAOV,UAIlEU,EAAOE,SAAe,EAANpN,EAGxB,CACA,OAAOzrB,CACX,EAYAm8B,EAASrD,gBAAkB,SAAyBH,GAGhD,OAFMA,aAAkB7B,IACpB6B,EAAS,IAAI7B,EAAQ6B,IAClBxhG,KAAKuR,OAAOiwF,EAAQA,EAAOV,SACtC,EAUAkE,EAASpD,OAAS,SAAgB/4B,GAC9B,GAAuB,iBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAwB,MAApBA,EAAQ/tB,UAAoB+tB,EAAQzxC,eAAe,YAAa,CAChE,IAAIyM,EAAQo8D,EAAMh/F,KAAKmgG,UAAUQ,OAAO/4B,EAAQ/tB,UAChD,GAAIjX,EACA,MAAO,YAAcA,CAC7B,CACA,OAAO,IACX,EAUAmhE,EAASlD,WAAa,SAAoBC,GACtC,GAAIA,aAAkB9B,EAAMh/F,KAAKmgG,UAAU4D,SACvC,OAAOjD,EACX,IAAIl5B,EAAU,IAAIo3B,EAAMh/F,KAAKmgG,UAAU4D,SACvC,GAAuB,MAAnBjD,EAAOjnD,SAAkB,CACzB,GAA+B,iBAApBinD,EAAOjnD,SACd,MAAMntB,UAAU,sDACpBk7C,EAAQ/tB,SAAWmlD,EAAMh/F,KAAKmgG,UAAUU,WAAWC,EAAOjnD,SAC9D,CACA,OAAO+tB,CACX,EAWAm8B,EAAS9C,SAAW,SAAkBr5B,EAASrrE,GACtCA,IACDA,EAAU,CAAC,GACf,IAAIukG,EAAS,CAAC,EAKd,OAJIvkG,EAAQ4kG,WACRL,EAAOjnD,SAAW,MACE,MAApB+tB,EAAQ/tB,UAAoB+tB,EAAQzxC,eAAe,cACnD2qE,EAAOjnD,SAAWmlD,EAAMh/F,KAAKmgG,UAAUc,SAASr5B,EAAQ/tB,SAAUt9C,IAC/DukG,CACX,EASAiD,EAASzE,UAAUmC,OAAS,WACxB,OAAO1iG,KAAK+nC,YAAYm6D,SAASliG,KAAM0/F,EAAUM,KAAK2C,cAC1D,EAUAqC,EAASpC,WAAa,SAAoBC,GAItC,YAHsBtgG,IAAlBsgG,IACAA,EAAgB,uBAEbA,EAAgB,0BAC3B,EAEOmC,CACV,CA9MoB,GAgNrB5D,EAAU9wC,aAAe,WAkBrB,SAASA,EAAa8vC,GAClB,GAAIA,EACA,IAAK,IAAI1sF,EAAOlU,OAAOkU,KAAK0sF,GAAaz8F,EAAI,EAAGA,EAAI+P,EAAK/U,SAAUgF,EACpC,MAAvBy8F,EAAW1sF,EAAK/P,MAChB3D,KAAK0T,EAAK/P,IAAMy8F,EAAW1sF,EAAK/P,IAChD,CA8MA,OAtMA2sD,EAAaiwC,UAAUzlD,SAAW,EAQlCwV,EAAaiwC,UAAUh3F,MAAQ,KAU/B+mD,EAAa3Q,OAAS,SAAgBygD,GAClC,OAAO,IAAI9vC,EAAa8vC,EAC5B,EAWA9vC,EAAah/C,OAAS,SAAgBu3D,EAASg4B,GAO3C,OANKA,IACDA,EAAShB,EAAQlgD,UACG,MAApBkpB,EAAQ/tB,UAAoBt7C,OAAO43B,eAAeC,KAAKwxC,EAAS,aAChEg4B,EAAOC,OAA8B,GAAGO,MAAMx4B,EAAQ/tB,UACrC,MAAjB+tB,EAAQt/D,OAAiB/J,OAAO43B,eAAeC,KAAKwxC,EAAS,UAC7Do3B,EAAMh/F,KAAKqjG,iBAAiBhzF,OAAOu3D,EAAQt/D,MAAOs3F,EAAOC,OAA8B,IAAII,QAAQC,SAChGN,CACX,EAWAvwC,EAAaixC,gBAAkB,SAAyB14B,EAASg4B,GAC7D,OAAO7gG,KAAKsR,OAAOu3D,EAASg4B,GAAQM,QACxC,EAaA7wC,EAAa/+C,OAAS,SAAgBiwF,EAAQ7iG,GACpC6iG,aAAkB7B,IACpB6B,EAAS7B,EAAQhgD,OAAO6hD,IAE5B,IADA,IAAIhlE,OAAiBj6B,IAAX5D,EAAuB6iG,EAAO/1D,IAAM+1D,EAAOv7B,IAAMtnE,EAAQkqE,EAAU,IAAIo3B,EAAMh/F,KAAKmgG,UAAU9wC,aAC/FkxC,EAAOv7B,IAAMzpC,GAAK,CACrB,IAAI83D,EAAMkN,EAAOV,SACjB,OAAQxM,IAAQ,GAChB,KAAK,EACGzrB,EAAQ/tB,SAAW0mD,EAAOH,QAC1B,MAER,KAAK,EACGx4B,EAAQt/D,MAAQ02F,EAAMh/F,KAAKqjG,iBAAiB/yF,OAAOiwF,EAAQA,EAAOV,UAClE,MAER,QACIU,EAAOE,SAAe,EAANpN,GAGxB,CACA,OAAOzrB,CACX,EAYAvY,EAAaqxC,gBAAkB,SAAyBH,GAGpD,OAFMA,aAAkB7B,IACpB6B,EAAS,IAAI7B,EAAQ6B,IAClBxhG,KAAKuR,OAAOiwF,EAAQA,EAAOV,SACtC,EAUAxwC,EAAasxC,OAAS,SAAgB/4B,GAClC,GAAuB,iBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAwB,MAApBA,EAAQ/tB,UAAoB+tB,EAAQzxC,eAAe,cAC9C2oE,EAAMxhG,UAAUsqE,EAAQ/tB,UACzB,MAAO,6BACf,GAAqB,MAAjB+tB,EAAQt/D,OAAiBs/D,EAAQzxC,eAAe,SAAU,CAC1D,IAAIyM,EAAQo8D,EAAMh/F,KAAKqjG,iBAAiB1C,OAAO/4B,EAAQt/D,OACvD,GAAIs6B,EACA,MAAO,SAAWA,CAC1B,CACA,OAAO,IACX,EAUAysB,EAAawxC,WAAa,SAAoBC,GAC1C,GAAIA,aAAkB9B,EAAMh/F,KAAKmgG,UAAU9wC,aACvC,OAAOyxC,EACX,IAAIl5B,EAAU,IAAIo3B,EAAMh/F,KAAKmgG,UAAU9wC,aAGvC,GAFuB,MAAnByxC,EAAOjnD,WACP+tB,EAAQ/tB,SAA6B,EAAlBinD,EAAOjnD,UACV,MAAhBinD,EAAOx4F,MAAe,CACtB,GAA4B,iBAAjBw4F,EAAOx4F,MACd,MAAMokB,UAAU,uDACpBk7C,EAAQt/D,MAAQ02F,EAAMh/F,KAAKqjG,iBAAiBxC,WAAWC,EAAOx4F,MAClE,CACA,OAAOs/D,CACX,EAWAvY,EAAa4xC,SAAW,SAAkBr5B,EAASrrE,GAC1CA,IACDA,EAAU,CAAC,GACf,IAAIukG,EAAS,CAAC,EASd,OARIvkG,EAAQ4kG,WACRL,EAAOjnD,SAAW,EAClBinD,EAAOx4F,MAAQ,MAEK,MAApBs/D,EAAQ/tB,UAAoB+tB,EAAQzxC,eAAe,cACnD2qE,EAAOjnD,SAAW+tB,EAAQ/tB,UACT,MAAjB+tB,EAAQt/D,OAAiBs/D,EAAQzxC,eAAe,WAChD2qE,EAAOx4F,MAAQ02F,EAAMh/F,KAAKqjG,iBAAiBpC,SAASr5B,EAAQt/D,MAAO/L,IAChEukG,CACX,EASAzxC,EAAaiwC,UAAUmC,OAAS,WAC5B,OAAO1iG,KAAK+nC,YAAYm6D,SAASliG,KAAM0/F,EAAUM,KAAK2C,cAC1D,EAUAryC,EAAasyC,WAAa,SAAoBC,GAI1C,YAHsBtgG,IAAlBsgG,IACAA,EAAgB,uBAEbA,EAAgB,8BAC3B,EAEOvyC,CACV,CAtOwB,GAwOlB8wC,CACV,CA79CgB,GA+9CjBngG,EAAKuiG,mBAAqB,WAkBtB,SAASA,EAAmBpD,GACxB,GAAIA,EACA,IAAK,IAAI1sF,EAAOlU,OAAOkU,KAAK0sF,GAAaz8F,EAAI,EAAGA,EAAI+P,EAAK/U,SAAUgF,EACpC,MAAvBy8F,EAAW1sF,EAAK/P,MAChB3D,KAAK0T,EAAK/P,IAAMy8F,EAAW1sF,EAAK/P,IAChD,CAuNA,OA/MA6/F,EAAmBjD,UAAUh/C,OAAS,GAQtCiiD,EAAmBjD,UAAU3gG,QAAUmgG,EAAMj8B,KAAOi8B,EAAMj8B,KAAKxD,SAAS,EAAE,GAAE,GAAS,EAUrFkjC,EAAmB7jD,OAAS,SAAgBygD,GACxC,OAAO,IAAIoD,EAAmBpD,EAClC,EAWAoD,EAAmBlyF,OAAS,SAAgBu3D,EAASg4B,GAOjD,OANKA,IACDA,EAAShB,EAAQlgD,UACC,MAAlBkpB,EAAQtnB,QAAkB/hD,OAAO43B,eAAeC,KAAKwxC,EAAS,WAC9Dg4B,EAAOC,OAA8B,IAAIC,OAAOl4B,EAAQtnB,QACrC,MAAnBsnB,EAAQjpE,SAAmBJ,OAAO43B,eAAeC,KAAKwxC,EAAS,YAC/Dg4B,EAAOC,OAA8B,IAAIG,MAAMp4B,EAAQjpE,SACpDihG,CACX,EAWA2C,EAAmBjC,gBAAkB,SAAyB14B,EAASg4B,GACnE,OAAO7gG,KAAKsR,OAAOu3D,EAASg4B,GAAQM,QACxC,EAaAqC,EAAmBjyF,OAAS,SAAgBiwF,EAAQ7iG,GAC1C6iG,aAAkB7B,IACpB6B,EAAS7B,EAAQhgD,OAAO6hD,IAE5B,IADA,IAAIhlE,OAAiBj6B,IAAX5D,EAAuB6iG,EAAO/1D,IAAM+1D,EAAOv7B,IAAMtnE,EAAQkqE,EAAU,IAAIo3B,EAAMh/F,KAAKuiG,mBACrFhC,EAAOv7B,IAAMzpC,GAAK,CACrB,IAAI83D,EAAMkN,EAAOV,SACjB,OAAQxM,IAAQ,GAChB,KAAK,EACGzrB,EAAQtnB,OAASigD,EAAOT,SACxB,MAER,KAAK,EACGl4B,EAAQjpE,QAAU4hG,EAAOP,QACzB,MAER,QACIO,EAAOE,SAAe,EAANpN,GAGxB,CACA,OAAOzrB,CACX,EAYA26B,EAAmB7B,gBAAkB,SAAyBH,GAG1D,OAFMA,aAAkB7B,IACpB6B,EAAS,IAAI7B,EAAQ6B,IAClBxhG,KAAKuR,OAAOiwF,EAAQA,EAAOV,SACtC,EAUA0C,EAAmB5B,OAAS,SAAgB/4B,GACxC,MAAuB,iBAAZA,GAAoC,OAAZA,EACxB,kBACW,MAAlBA,EAAQtnB,QAAkBsnB,EAAQzxC,eAAe,YAC5C2oE,EAAM8B,SAASh5B,EAAQtnB,QACjB,0BACQ,MAAnBsnB,EAAQjpE,SAAmBipE,EAAQzxC,eAAe,cAC7C2oE,EAAMxhG,UAAUsqE,EAAQjpE,UAAcipE,EAAQjpE,SAAWmgG,EAAMxhG,UAAUsqE,EAAQjpE,QAAQokE,MAAQ+7B,EAAMxhG,UAAUsqE,EAAQjpE,QAAQqkE,OAC3H,iCACR,IACX,EAUAu/B,EAAmB1B,WAAa,SAAoBC,GAChD,GAAIA,aAAkB9B,EAAMh/F,KAAKuiG,mBAC7B,OAAOzB,EACX,IAAIl5B,EAAU,IAAIo3B,EAAMh/F,KAAKuiG,mBAY7B,OAXqB,MAAjBzB,EAAOxgD,SACPsnB,EAAQtnB,OAASgjC,OAAOwd,EAAOxgD,SACb,MAAlBwgD,EAAOniG,UACHmgG,EAAMj8B,MACL+E,EAAQjpE,QAAUmgG,EAAMj8B,KAAKC,UAAUg+B,EAAOniG,UAAUikE,UAAW,EACrC,iBAAnBk+B,EAAOniG,QACnBipE,EAAQjpE,QAAU4iD,SAASu/C,EAAOniG,QAAS,IACZ,iBAAnBmiG,EAAOniG,QACnBipE,EAAQjpE,QAAUmiG,EAAOniG,QACM,iBAAnBmiG,EAAOniG,UACnBipE,EAAQjpE,QAAU,IAAImgG,EAAMiC,SAASD,EAAOniG,QAAQokE,MAAQ,EAAG+9B,EAAOniG,QAAQqkE,OAAS,GAAGpE,aAC3FgJ,CACX,EAWA26B,EAAmBtB,SAAW,SAAkBr5B,EAASrrE,GAChDA,IACDA,EAAU,CAAC,GACf,IAAIukG,EAAS,CAAC,EACd,GAAIvkG,EAAQ4kG,SAER,GADAL,EAAOxgD,OAAS,GACZw+C,EAAMj8B,KAAM,CACZ,IAAIu+B,EAAO,IAAItC,EAAMj8B,KAAK,EAAG,GAAG,GAChCi+B,EAAOniG,QAAUpC,EAAQ8kG,QAAU/d,OAAS8d,EAAK7wD,WAAah0C,EAAQ8kG,QAAUhkG,OAAS+jG,EAAKxiC,WAAawiC,CAC/G,MACIN,EAAOniG,QAAUpC,EAAQ8kG,QAAU/d,OAAS,IAAM,EAS1D,OAPsB,MAAlB1b,EAAQtnB,QAAkBsnB,EAAQzxC,eAAe,YACjD2qE,EAAOxgD,OAASsnB,EAAQtnB,QACL,MAAnBsnB,EAAQjpE,SAAmBipE,EAAQzxC,eAAe,aACnB,iBAApByxC,EAAQjpE,QACfmiG,EAAOniG,QAAUpC,EAAQ8kG,QAAU/d,OAASA,OAAO1b,EAAQjpE,SAAWipE,EAAQjpE,QAE9EmiG,EAAOniG,QAAUpC,EAAQ8kG,QAAU/d,OAASwb,EAAMj8B,KAAKy8B,UAAU/uD,SAASna,KAAKwxC,EAAQjpE,SAAWpC,EAAQ8kG,QAAUhkG,OAAS,IAAIyhG,EAAMiC,SAASn5B,EAAQjpE,QAAQokE,MAAQ,EAAG6E,EAAQjpE,QAAQqkE,OAAS,GAAGpE,WAAagJ,EAAQjpE,SAC7NmiG,CACX,EASAyB,EAAmBjD,UAAUmC,OAAS,WAClC,OAAO1iG,KAAK+nC,YAAYm6D,SAASliG,KAAM0/F,EAAUM,KAAK2C,cAC1D,EAUAa,EAAmBZ,WAAa,SAAoBC,GAIhD,YAHsBtgG,IAAlBsgG,IACAA,EAAgB,uBAEbA,EAAgB,0BAC3B,EAEOW,CACV,CA/OyB,GAwP1BviG,EAAKgkG,eAAiB,WAClB,IAAIxF,EAAa,CAAC,EAAGjvC,EAAShxD,OAAOmgD,OAAO8/C,GAG5C,OAFAjvC,EAAOivC,EAAW,GAAK,gBAAkB,EACzCjvC,EAAOivC,EAAW,GAAK,UAAY,EAC5BjvC,CACV,CALqB,GAOtBvvD,EAAKwiG,cAAgB,WAyBjB,SAASA,EAAcrD,GAOnB,GANApgG,KAAKua,MAAQ,GACbva,KAAK+I,OAAS,GACd/I,KAAKF,UAAY,GACjBE,KAAKklG,eAAiB,GACtBllG,KAAKuQ,KAAO,GACZvQ,KAAKshD,YAAc,GACf8+C,EACA,IAAK,IAAI1sF,EAAOlU,OAAOkU,KAAK0sF,GAAaz8F,EAAI,EAAGA,EAAI+P,EAAK/U,SAAUgF,EACpC,MAAvBy8F,EAAW1sF,EAAK/P,MAChB3D,KAAK0T,EAAK/P,IAAMy8F,EAAW1sF,EAAK/P,IAChD,CA8cA,OAtcA8/F,EAAclD,UAAUlgG,KAAO,GAQ/BojG,EAAclD,UAAUhmF,MAAQwlF,EAAMa,WAQtC6C,EAAclD,UAAUx3F,OAASg3F,EAAMa,WAQvC6C,EAAclD,UAAUzgG,UAAYigG,EAAMa,WAQ1C6C,EAAclD,UAAU2E,eAAiBnF,EAAMa,WAQ/C6C,EAAclD,UAAUhwF,KAAOwvF,EAAMa,WAQrC6C,EAAclD,UAAUj2C,UAAY,GAQpCm5C,EAAclD,UAAUj/C,YAAcy+C,EAAMa,WAQ5C6C,EAAclD,UAAUh/C,OAAS,GAUjCkiD,EAAc9jD,OAAS,SAAgBygD,GACnC,OAAO,IAAIqD,EAAcrD,EAC7B,EAWAqD,EAAcnyF,OAAS,SAAgBu3D,EAASg4B,GAK5C,GAJKA,IACDA,EAAShB,EAAQlgD,UACD,MAAhBkpB,EAAQxoE,MAAgBb,OAAO43B,eAAeC,KAAKwxC,EAAS,SAC5Dg4B,EAAOC,OAA8B,IAAIC,OAAOl4B,EAAQxoE,MACvC,MAAjBwoE,EAAQtuD,OAAiBsuD,EAAQtuD,MAAM5b,OACvC,IAAK,IAAIgF,EAAI,EAAGA,EAAIklE,EAAQtuD,MAAM5b,SAAUgF,EACxCk9F,EAAOC,OAA8B,IAAIC,OAAOl4B,EAAQtuD,MAAM5W,IACtE,GAAsB,MAAlBklE,EAAQ9/D,QAAkB8/D,EAAQ9/D,OAAOpK,OACzC,IAASgF,EAAI,EAAGA,EAAIklE,EAAQ9/D,OAAOpK,SAAUgF,EACzCk9F,EAAOC,OAA8B,IAAIC,OAAOl4B,EAAQ9/D,OAAOpF,IACvE,GAAyB,MAArBklE,EAAQ/oE,WAAqB+oE,EAAQ/oE,UAAUnB,OAC/C,IAASgF,EAAI,EAAGA,EAAIklE,EAAQ/oE,UAAUnB,SAAUgF,EAC5Ck9F,EAAOC,OAA8B,IAAIC,OAAOl4B,EAAQ/oE,UAAU6D,IAC1E,GAAoB,MAAhBklE,EAAQt4D,MAAgBs4D,EAAQt4D,KAAK5R,OACrC,IAASgF,EAAI,EAAGA,EAAIklE,EAAQt4D,KAAK5R,SAAUgF,EACvCs8F,EAAMh/F,KAAKw3C,UAAUnnC,OAAOu3D,EAAQt4D,KAAK5M,GAAIk9F,EAAOC,OAA8B,IAAII,QAAQC,SAGtG,GAFyB,MAArBt4B,EAAQve,WAAqB9qD,OAAO43B,eAAeC,KAAKwxC,EAAS,cACjEg4B,EAAOC,OAA8B,IAAIC,OAAOl4B,EAAQve,WACjC,MAAvBue,EAAQvnB,aAAuBunB,EAAQvnB,YAAY3iD,OACnD,IAASgF,EAAI,EAAGA,EAAIklE,EAAQvnB,YAAY3iD,SAAUgF,EAC9Cs8F,EAAMh/F,KAAKuiG,mBAAmBlyF,OAAOu3D,EAAQvnB,YAAY39C,GAAIk9F,EAAOC,OAA8B,IAAII,QAAQC,SAGtH,GAFsB,MAAlBt4B,EAAQtnB,QAAkB/hD,OAAO43B,eAAeC,KAAKwxC,EAAS,WAC9Dg4B,EAAOC,OAA+B,IAAIC,OAAOl4B,EAAQtnB,QAC/B,MAA1BsnB,EAAQq8B,gBAA0Br8B,EAAQq8B,eAAevmG,OACzD,IAASgF,EAAI,EAAGA,EAAIklE,EAAQq8B,eAAevmG,SAAUgF,EACjDs8F,EAAMh/F,KAAKC,eAAeoQ,OAAOu3D,EAAQq8B,eAAevhG,GAAIk9F,EAAOC,OAA+B,IAAII,QAAQC,SACtH,OAAON,CACX,EAWA4C,EAAclC,gBAAkB,SAAyB14B,EAASg4B,GAC9D,OAAO7gG,KAAKsR,OAAOu3D,EAASg4B,GAAQM,QACxC,EAaAsC,EAAclyF,OAAS,SAAgBiwF,EAAQ7iG,GACrC6iG,aAAkB7B,IACpB6B,EAAS7B,EAAQhgD,OAAO6hD,IAE5B,IADA,IAAIhlE,OAAiBj6B,IAAX5D,EAAuB6iG,EAAO/1D,IAAM+1D,EAAOv7B,IAAMtnE,EAAQkqE,EAAU,IAAIo3B,EAAMh/F,KAAKwiG,cACrFjC,EAAOv7B,IAAMzpC,GAAK,CACrB,IAAI83D,EAAMkN,EAAOV,SACjB,OAAQxM,IAAQ,GAChB,KAAK,EACGzrB,EAAQxoE,KAAOmhG,EAAOT,SACtB,MAER,KAAK,EACSl4B,EAAQtuD,OAASsuD,EAAQtuD,MAAM5b,SACjCkqE,EAAQtuD,MAAQ,IACpBsuD,EAAQtuD,MAAMxV,KAAKy8F,EAAOT,UAC1B,MAER,KAAK,EACSl4B,EAAQ9/D,QAAU8/D,EAAQ9/D,OAAOpK,SACnCkqE,EAAQ9/D,OAAS,IACrB8/D,EAAQ9/D,OAAOhE,KAAKy8F,EAAOT,UAC3B,MAER,KAAK,EACSl4B,EAAQ/oE,WAAa+oE,EAAQ/oE,UAAUnB,SACzCkqE,EAAQ/oE,UAAY,IACxB+oE,EAAQ/oE,UAAUiF,KAAKy8F,EAAOT,UAC9B,MAER,KAAK,GACSl4B,EAAQq8B,gBAAkBr8B,EAAQq8B,eAAevmG,SACnDkqE,EAAQq8B,eAAiB,IAC7Br8B,EAAQq8B,eAAengG,KAAKk7F,EAAMh/F,KAAKC,eAAeqQ,OAAOiwF,EAAQA,EAAOV,WAC5E,MAER,KAAK,EACSj4B,EAAQt4D,MAAQs4D,EAAQt4D,KAAK5R,SAC/BkqE,EAAQt4D,KAAO,IACnBs4D,EAAQt4D,KAAKxL,KAAKk7F,EAAMh/F,KAAKw3C,UAAUlnC,OAAOiwF,EAAQA,EAAOV,WAC7D,MAER,KAAK,EACGj4B,EAAQve,UAAYk3C,EAAOT,SAC3B,MAER,KAAK,EACSl4B,EAAQvnB,aAAeunB,EAAQvnB,YAAY3iD,SAC7CkqE,EAAQvnB,YAAc,IAC1BunB,EAAQvnB,YAAYv8C,KAAKk7F,EAAMh/F,KAAKuiG,mBAAmBjyF,OAAOiwF,EAAQA,EAAOV,WAC7E,MAER,KAAK,GACGj4B,EAAQtnB,OAASigD,EAAOT,SACxB,MAER,QACIS,EAAOE,SAAe,EAANpN,GAGxB,CACA,OAAOzrB,CACX,EAYA46B,EAAc9B,gBAAkB,SAAyBH,GAGrD,OAFMA,aAAkB7B,IACpB6B,EAAS,IAAI7B,EAAQ6B,IAClBxhG,KAAKuR,OAAOiwF,EAAQA,EAAOV,SACtC,EAUA2C,EAAc7B,OAAS,SAAgB/4B,GACnC,GAAuB,iBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAoB,MAAhBA,EAAQxoE,MAAgBwoE,EAAQzxC,eAAe,UAC1C2oE,EAAM8B,SAASh5B,EAAQxoE,MACxB,MAAO,wBACf,GAAqB,MAAjBwoE,EAAQtuD,OAAiBsuD,EAAQzxC,eAAe,SAAU,CAC1D,IAAK1zB,MAAM+lC,QAAQo/B,EAAQtuD,OACvB,MAAO,wBACX,IAAK,IAAI5W,EAAI,EAAGA,EAAIklE,EAAQtuD,MAAM5b,SAAUgF,EACxC,IAAKo8F,EAAM8B,SAASh5B,EAAQtuD,MAAM5W,IAC9B,MAAO,0BACnB,CACA,GAAsB,MAAlBklE,EAAQ9/D,QAAkB8/D,EAAQzxC,eAAe,UAAW,CAC5D,IAAK1zB,MAAM+lC,QAAQo/B,EAAQ9/D,QACvB,MAAO,yBACX,IAASpF,EAAI,EAAGA,EAAIklE,EAAQ9/D,OAAOpK,SAAUgF,EACzC,IAAKo8F,EAAM8B,SAASh5B,EAAQ9/D,OAAOpF,IAC/B,MAAO,2BACnB,CACA,GAAyB,MAArBklE,EAAQ/oE,WAAqB+oE,EAAQzxC,eAAe,aAAc,CAClE,IAAK1zB,MAAM+lC,QAAQo/B,EAAQ/oE,WACvB,MAAO,4BACX,IAAS6D,EAAI,EAAGA,EAAIklE,EAAQ/oE,UAAUnB,SAAUgF,EAC5C,IAAKo8F,EAAM8B,SAASh5B,EAAQ/oE,UAAU6D,IAClC,MAAO,8BACnB,CACA,GAA8B,MAA1BklE,EAAQq8B,gBAA0Br8B,EAAQzxC,eAAe,kBAAmB,CAC5E,IAAK1zB,MAAM+lC,QAAQo/B,EAAQq8B,gBACvB,MAAO,iCACX,IAASvhG,EAAI,EAAGA,EAAIklE,EAAQq8B,eAAevmG,SAAUgF,EAEjD,GADIkgC,EAAQo8D,EAAMh/F,KAAKC,eAAe0gG,OAAO/4B,EAAQq8B,eAAevhG,IAEhE,MAAO,kBAAoBkgC,CAEvC,CACA,GAAoB,MAAhBglC,EAAQt4D,MAAgBs4D,EAAQzxC,eAAe,QAAS,CACxD,IAAK1zB,MAAM+lC,QAAQo/B,EAAQt4D,MACvB,MAAO,uBACX,IAAS5M,EAAI,EAAGA,EAAIklE,EAAQt4D,KAAK5R,SAAUgF,EAEvC,GADIkgC,EAAQo8D,EAAMh/F,KAAKw3C,UAAUmpD,OAAO/4B,EAAQt4D,KAAK5M,IAEjD,MAAO,QAAUkgC,CAE7B,CACA,GAAyB,MAArBglC,EAAQve,WAAqBue,EAAQzxC,eAAe,eAC/C2oE,EAAM8B,SAASh5B,EAAQve,WACxB,MAAO,6BACf,GAA2B,MAAvBue,EAAQvnB,aAAuBunB,EAAQzxC,eAAe,eAAgB,CACtE,IAAK1zB,MAAM+lC,QAAQo/B,EAAQvnB,aACvB,MAAO,8BACX,IAAS39C,EAAI,EAAGA,EAAIklE,EAAQvnB,YAAY3iD,SAAUgF,EAAG,CACjD,IAAIkgC,EACJ,GADIA,EAAQo8D,EAAMh/F,KAAKuiG,mBAAmB5B,OAAO/4B,EAAQvnB,YAAY39C,IAEjE,MAAO,eAAiBkgC,CAChC,CACJ,CACA,OAAsB,MAAlBglC,EAAQtnB,QAAkBsnB,EAAQzxC,eAAe,YAC5C2oE,EAAM8B,SAASh5B,EAAQtnB,QACjB,0BACR,IACX,EAUAkiD,EAAc3B,WAAa,SAAoBC,GAC3C,GAAIA,aAAkB9B,EAAMh/F,KAAKwiG,cAC7B,OAAO1B,EACX,IAAIl5B,EAAU,IAAIo3B,EAAMh/F,KAAKwiG,cAG7B,GAFmB,MAAf1B,EAAO1hG,OACPwoE,EAAQxoE,KAAOkkF,OAAOwd,EAAO1hG,OAC7B0hG,EAAOxnF,MAAO,CACd,IAAK7W,MAAM+lC,QAAQs4D,EAAOxnF,OACtB,MAAMoT,UAAU,6CACpBk7C,EAAQtuD,MAAQ,GAChB,IAAK,IAAI5W,EAAI,EAAGA,EAAIo+F,EAAOxnF,MAAM5b,SAAUgF,EACvCklE,EAAQtuD,MAAM5W,GAAK4gF,OAAOwd,EAAOxnF,MAAM5W,GAC/C,CACA,GAAIo+F,EAAOh5F,OAAQ,CACf,IAAKrF,MAAM+lC,QAAQs4D,EAAOh5F,QACtB,MAAM4kB,UAAU,8CAEpB,IADAk7C,EAAQ9/D,OAAS,GACRpF,EAAI,EAAGA,EAAIo+F,EAAOh5F,OAAOpK,SAAUgF,EACxCklE,EAAQ9/D,OAAOpF,GAAK4gF,OAAOwd,EAAOh5F,OAAOpF,GACjD,CACA,GAAIo+F,EAAOjiG,UAAW,CAClB,IAAK4D,MAAM+lC,QAAQs4D,EAAOjiG,WACtB,MAAM6tB,UAAU,iDAEpB,IADAk7C,EAAQ/oE,UAAY,GACX6D,EAAI,EAAGA,EAAIo+F,EAAOjiG,UAAUnB,SAAUgF,EAC3CklE,EAAQ/oE,UAAU6D,GAAK4gF,OAAOwd,EAAOjiG,UAAU6D,GACvD,CACA,GAAIo+F,EAAOmD,eAAgB,CACvB,IAAKxhG,MAAM+lC,QAAQs4D,EAAOmD,gBACtB,MAAMv3E,UAAU,sDAEpB,IADAk7C,EAAQq8B,eAAiB,GAChBvhG,EAAI,EAAGA,EAAIo+F,EAAOmD,eAAevmG,SAAUgF,EAAG,CACnD,GAAwC,iBAA7Bo+F,EAAOmD,eAAevhG,GAC7B,MAAMgqB,UAAU,uDACpBk7C,EAAQq8B,eAAevhG,GAAKs8F,EAAMh/F,KAAKC,eAAe4gG,WAAWC,EAAOmD,eAAevhG,GAC3F,CACJ,CACA,GAAIo+F,EAAOxxF,KAAM,CACb,IAAK7M,MAAM+lC,QAAQs4D,EAAOxxF,MACtB,MAAMod,UAAU,4CAEpB,IADAk7C,EAAQt4D,KAAO,GACN5M,EAAI,EAAGA,EAAIo+F,EAAOxxF,KAAK5R,SAAUgF,EAAG,CACzC,GAA8B,iBAAnBo+F,EAAOxxF,KAAK5M,GACnB,MAAMgqB,UAAU,6CACpBk7C,EAAQt4D,KAAK5M,GAAKs8F,EAAMh/F,KAAKw3C,UAAUqpD,WAAWC,EAAOxxF,KAAK5M,GAClE,CACJ,CAGA,GAFwB,MAApBo+F,EAAOz3C,YACPue,EAAQve,UAAYi6B,OAAOwd,EAAOz3C,YAClCy3C,EAAOzgD,YAAa,CACpB,IAAK59C,MAAM+lC,QAAQs4D,EAAOzgD,aACtB,MAAM3zB,UAAU,mDAEpB,IADAk7C,EAAQvnB,YAAc,GACb39C,EAAI,EAAGA,EAAIo+F,EAAOzgD,YAAY3iD,SAAUgF,EAAG,CAChD,GAAqC,iBAA1Bo+F,EAAOzgD,YAAY39C,GAC1B,MAAMgqB,UAAU,oDACpBk7C,EAAQvnB,YAAY39C,GAAKs8F,EAAMh/F,KAAKuiG,mBAAmB1B,WAAWC,EAAOzgD,YAAY39C,GACzF,CACJ,CAGA,OAFqB,MAAjBo+F,EAAOxgD,SACPsnB,EAAQtnB,OAASgjC,OAAOwd,EAAOxgD,SAC5BsnB,CACX,EAWA46B,EAAcvB,SAAW,SAAkBr5B,EAASrrE,GAC3CA,IACDA,EAAU,CAAC,GACf,IAAIukG,EAAS,CAAC,EAgBd,IAfIvkG,EAAQ2kG,QAAU3kG,EAAQ4kG,YAC1BL,EAAOxnF,MAAQ,GACfwnF,EAAOh5F,OAAS,GAChBg5F,EAAOjiG,UAAY,GACnBiiG,EAAOxxF,KAAO,GACdwxF,EAAOzgD,YAAc,GACrBygD,EAAOmD,eAAiB,IAExB1nG,EAAQ4kG,WACRL,EAAO1hG,KAAO,GACd0hG,EAAOz3C,UAAY,GACnBy3C,EAAOxgD,OAAS,IAEA,MAAhBsnB,EAAQxoE,MAAgBwoE,EAAQzxC,eAAe,UAC/C2qE,EAAO1hG,KAAOwoE,EAAQxoE,MACtBwoE,EAAQtuD,OAASsuD,EAAQtuD,MAAM5b,OAAQ,CACvCojG,EAAOxnF,MAAQ,GACf,IAAK,IAAIilB,EAAI,EAAGA,EAAIqpC,EAAQtuD,MAAM5b,SAAU6gC,EACxCuiE,EAAOxnF,MAAMilB,GAAKqpC,EAAQtuD,MAAMilB,EACxC,CACA,GAAIqpC,EAAQ9/D,QAAU8/D,EAAQ9/D,OAAOpK,OAEjC,IADAojG,EAAOh5F,OAAS,GACPy2B,EAAI,EAAGA,EAAIqpC,EAAQ9/D,OAAOpK,SAAU6gC,EACzCuiE,EAAOh5F,OAAOy2B,GAAKqpC,EAAQ9/D,OAAOy2B,GAE1C,GAAIqpC,EAAQ/oE,WAAa+oE,EAAQ/oE,UAAUnB,OAEvC,IADAojG,EAAOjiG,UAAY,GACV0/B,EAAI,EAAGA,EAAIqpC,EAAQ/oE,UAAUnB,SAAU6gC,EAC5CuiE,EAAOjiG,UAAU0/B,GAAKqpC,EAAQ/oE,UAAU0/B,GAEhD,GAAIqpC,EAAQt4D,MAAQs4D,EAAQt4D,KAAK5R,OAE7B,IADAojG,EAAOxxF,KAAO,GACLivB,EAAI,EAAGA,EAAIqpC,EAAQt4D,KAAK5R,SAAU6gC,EACvCuiE,EAAOxxF,KAAKivB,GAAKygE,EAAMh/F,KAAKw3C,UAAUypD,SAASr5B,EAAQt4D,KAAKivB,GAAIhiC,GAIxE,GAFyB,MAArBqrE,EAAQve,WAAqBue,EAAQzxC,eAAe,eACpD2qE,EAAOz3C,UAAYue,EAAQve,WAC3Bue,EAAQvnB,aAAeunB,EAAQvnB,YAAY3iD,OAE3C,IADAojG,EAAOzgD,YAAc,GACZ9hB,EAAI,EAAGA,EAAIqpC,EAAQvnB,YAAY3iD,SAAU6gC,EAC9CuiE,EAAOzgD,YAAY9hB,GAAKygE,EAAMh/F,KAAKuiG,mBAAmBtB,SAASr5B,EAAQvnB,YAAY9hB,GAAIhiC,GAI/F,GAFsB,MAAlBqrE,EAAQtnB,QAAkBsnB,EAAQzxC,eAAe,YACjD2qE,EAAOxgD,OAASsnB,EAAQtnB,QACxBsnB,EAAQq8B,gBAAkBr8B,EAAQq8B,eAAevmG,OAEjD,IADAojG,EAAOmD,eAAiB,GACf1lE,EAAI,EAAGA,EAAIqpC,EAAQq8B,eAAevmG,SAAU6gC,EACjDuiE,EAAOmD,eAAe1lE,GAAKygE,EAAMh/F,KAAKC,eAAeghG,SAASr5B,EAAQq8B,eAAe1lE,GAAIhiC,GAEjG,OAAOukG,CACX,EASA0B,EAAclD,UAAUmC,OAAS,WAC7B,OAAO1iG,KAAK+nC,YAAYm6D,SAASliG,KAAM0/F,EAAUM,KAAK2C,cAC1D,EAUAc,EAAcb,WAAa,SAAoBC,GAI3C,YAHsBtgG,IAAlBsgG,IACAA,EAAgB,uBAEbA,EAAgB,qBAC3B,EAEOY,CACV,CAnfoB,GAqfdxiG,GAGXhE,EAAOD,QAAUijG,C,uBCz+OjB,IAAIkF,WAAWt+F,GAAGs+F,WAAW,oBAAoBh4D,UAAUA,SAASulD,cAAcvlD,SAASulD,cAAc7qD,SAAI,EAAO,oBAAoBu9D,aAAaD,WAAWA,YAAYC,YAAY,SAASv+F,EAAE,CAAC,GAAG,SAASvC,IAAI,OAAOixB,EAAErc,QAAQghB,EAAEhhB,QAAQwK,IAAIwW,CAAC,CAAC,SAASxL,IAAI,OAAO6G,EAAErc,QAAQghB,EAAEhhB,QAAQwK,IAAI2hF,CAAC,CAAC,SAASp1D,IAAI,OAAO1a,EAAErc,QAAQghB,EAAEhhB,QAAQwK,IAAI4hF,CAAC,CAAC,SAASxzF,IAAI,OAAOyjB,EAAErc,QAAQghB,EAAEhhB,QAAQwK,IAAI6hF,CAAC,CAAC,SAAS5hG,IAAI,OAAO4xB,EAAErc,QAAQghB,EAAEhhB,QAAQwK,IAAI8hF,CAAC,CAAC,IAAIhgG,EAAEigG,EAAEphG,EAAEwC,EAAExC,EAAEqhG,MAAM,IAAIvmG,SAAQ,CAAE0H,EAAEvC,KAAKkB,EAAEqB,EAAE4+F,EAAEnhG,CAAE,IAAG,IAAIF,EAAE4N,EAAEs3E,EAAEj9E,EAAE7M,OAAOO,OAAO,CAAC,EAAEsE,GAAGshG,EAAE,iBAAiB1nE,EAAE,CAACp3B,EAAEvC,KAAK,MAAMA,GAAG+hF,EAAE,iBAAiBuY,OAAOr6F,EAAE,mBAAmBqhG,cAAc17F,EAAE,iBAAiBsxD,SAAS,iBAAiBA,QAAQ97D,UAAU,iBAAiB87D,QAAQ97D,SAAS6Q,KAAKytB,EAAE35B,EAAEwhG,yBAAwB,EAAG/yF,EAAE,GAAG,SAASiyD,EAAEl+D,GAAG,OAAOxC,EAAE44F,WAAW54F,EAAE44F,WAAWp2F,EAAEiM,GAAGA,EAAEjM,CAAC,CAAC,GAAGqD,EAAE,CAAC,IAAI47F,EAAE,EAAQ,MAAM/0E,EAAE,EAAQ,KAAQ,IAAIlqB,EAAEiM,EAAEvO,EAAEwsB,EAAEg1E,QAAQjzF,GAAG,IAAI0qF,UAAU,IAAIp5F,EAAE,CAACyC,EAAEvC,KAAKuC,EAAEA,EAAEm/F,WAAW,WAAW,IAAI3I,IAAIx2F,GAAGkqB,EAAEk1E,UAAUp/F,GAAGi/F,EAAEI,aAAar/F,EAAEvC,OAAE,EAAO,SAASglF,EAAEziF,KAAKA,EAAEzC,EAAEyC,GAAE,IAAKqS,SAASrS,EAAE,IAAIoL,WAAWpL,IAAIA,GAAGmL,EAAE,CAACnL,EAAEvC,EAAEoqB,EAAEuhB,GAAE,KAAMppC,EAAEA,EAAEm/F,WAAW,WAAW,IAAI3I,IAAIx2F,GAAGkqB,EAAEk1E,UAAUp/F,GAAGi/F,EAAEpqC,SAAS70D,EAAEopC,OAAE,EAAO,QAAO,CAAEppC,EAAEiL,KAAKjL,EAAE6nB,EAAE7nB,GAAGvC,EAAE2rC,EAAEn+B,EAAEoH,OAAOpH,EAAG,GAAC,GAAIzN,EAAE8hG,aAAa,EAAE3qC,QAAQ4qC,KAAKznG,SAASgnG,EAAEnqC,QAAQ4qC,KAAK,GAAGpzF,QAAQ,MAAM,MAAMwoD,QAAQ4qC,KAAKr4F,MAAM,GAAGkwB,EAAE,CAACp3B,EAAEvC,KAAK,MAAMk3D,QAAQ6qC,SAASx/F,EAAEvC,GAAGD,EAAEiiG,QAAQ,IAAI,6BAA6B,IAAIz/F,EAAE,EAAQ,KAAiB,CAAC,MAAMA,GAAG,MAAMu2C,QAAQvZ,MAAM,2GAA2Gh9B,CAAC,CAAC0/F,OAAOC,OAAO3/F,EAAE2/F,MAAM,MAAMngB,GAAG9hF,KAAKA,EAAEuO,EAAE1V,KAAK6oC,SAASwgE,KAAK,oBAAoBt5D,UAAUA,SAASulD,gBAAgB5/E,EAAEq6B,SAASulD,cAAc7qD,KAAKs9D,aAAaryF,EAAEqyF,YAAYryF,EAAE,IAAIA,EAAElG,QAAQ,SAASkG,EAAE8/E,OAAO,EAAE9/E,EAAEE,QAAQ,SAAS,IAAI6/E,YAAY,KAAK,GAAG,GAAG3oF,IAAI9F,EAAEyC,IAAI,IAAIvC,EAAE,IAAIoiG,eAAe,OAAOpiG,EAAEqiG,KAAK,MAAM9/F,GAAE,GAAIvC,EAAEsiG,KAAK,MAAMtiG,EAAEuiG,cAActiG,IAAI+kF,EAAEziF,IAAI,IAAIvC,EAAE,IAAIoiG,eAAe,OAAOpiG,EAAEqiG,KAAK,MAAM9/F,GAAE,GAAIvC,EAAEwiG,aAAa,cAAcxiG,EAAEsiG,KAAK,MAAM,IAAI30F,WAAW3N,EAAEoxF,SAAQ,GAAI1jF,EAAE,CAACnL,EAAEvC,EAAEoqB,KAAK,IAAIuhB,EAAE,IAAIy2D,eAAez2D,EAAE02D,KAAK,MAAM9/F,GAAE,GAAIopC,EAAE62D,aAAa,cAAc72D,EAAE82D,OAAO,KAAK,KAAK92D,EAAE0F,QAAQ,GAAG1F,EAAE0F,QAAQ1F,EAAEylD,SAASpxF,EAAE2rC,EAAEylD,UAAUhnE,GAAE,EAAGuhB,EAAE+2D,QAAQt4E,EAAEuhB,EAAE22D,KAAK,KAAI,IAAK18F,GAAG,oBAAoB02C,cAAc2lD,OAAO3lD,YAAY,qBAAmC,IAAI2iB,EAAEnmB,QAAQ19B,IAAI4+B,KAAKlB,SAAS6pD,EAAE7pD,QAAQvZ,MAAMya,KAAKlB,SAASlzC,IAAIq5D,EAAE,IAAI18D,IAAIi/F,EAAEoB,UAAU,EAAErgG,EAAEvG,KAAK,KAAK,MAAM2mG,EAAE,IAAIpgG,IAAIi/F,EAAEoB,UAAU,EAAErgG,EAAEvG,KAAK,KAAK,OAAO,IAAI6mG,EAAErsB,EAAEz2E,EAAE+iG,OAAO7jC,EAAE8jC,EAAEhjG,EAAEijG,UAAUL,EAAEznG,OAAOO,OAAOsE,EAAEgI,GAAGA,EAAE,KAAKhI,EAAE8hG,cAAcR,EAAEthG,EAAE8hG,aAAa9hG,EAAEkjG,OAAOtpE,EAAE55B,EAAEkjG,MAAMljG,EAAEmjG,aAAaL,EAAE9iG,EAAEmjG,YAAY,IAAIC,EAAEpjG,EAAEqjG,gBAAe,EAAG,iBAAiBpL,aAAaqL,GAAG,mCAAmC,IAAIpyE,EAAExC,EAAE60E,EAAE1gF,EAAEgT,EAAEmrE,EAAEC,EAAEC,EAAEC,EAAEqC,GAAE,EAAG,SAASnkF,IAAI,IAAI7c,EAAE0uB,EAAErc,OAAO7U,EAAE0oE,MAAM7yC,EAAE,IAAImR,UAAUxkC,GAAGxC,EAAEyjG,OAAO,IAAI18D,WAAWvkC,GAAGxC,EAAEy0F,OAAOwM,EAAE,IAAI7oE,WAAW51B,GAAGxC,EAAEupE,OAAOy3B,EAAE,IAAIpzF,WAAWpL,GAAGxC,EAAE0jG,QAAQ,IAAIz8D,YAAYzkC,GAAGxC,EAAEmpE,QAAQ+3B,EAAE,IAAIxzF,YAAYlL,GAAGxC,EAAE2jG,QAAQ,IAAIzuF,aAAa1S,GAAGxC,EAAE4jG,QAAQzC,EAAE,IAAIj6D,aAAa1kC,EAAE,CAAC,IAAI6/E,EAAEriF,EAAE6jG,gBAAgB,SAAS,GAAG,SAASxhB,GAAGihB,GAAG,wDAAwDjhB,EAAE,0BAA0B1oD,EAAEzI,EAAElxB,EAAE8jG,gBAAgB,GAAG9jG,EAAE8jG,WAAW5yE,EAAElxB,EAAE8jG,gBAAgB,MAAM5yE,EAAE,IAAI+mE,YAAY8L,OAAO,CAACC,QAAQ3hB,EAAE,MAAM4hB,QAAQ,MAAMC,QAAO,KAAMrvF,kBAAkBijF,mBAAmB,MAAMkL,EAAE,+NAA+Nn9F,GAAGm9F,EAAE,6GAA6G7lG,MAAM,cAAckiB,IAAIgjE,EAAEnxD,EAAErc,OAAOuvB,WAAW,IAAIg7B,EAAE+kC,EAAE,GAAGhpE,EAAE,GAAGipE,EAAE,GAAG/xB,EAAE,EAAE,SAASgyB,IAAI,OAAOjB,GAAG,EAAE/wB,CAAC,CAAC,IAAIiyB,EAAEC,EAAEplF,EAAE,EAAEqlF,EAAE,KAAKC,EAAE,KAAK,SAASC,IAAIvlF,IAAInf,EAAE2kG,wBAAwB3kG,EAAE2kG,uBAAuBxlF,EAAE,CAAC,SAASggD,KAAI,GAAGhgD,IAAInf,EAAE2kG,wBAAwB3kG,EAAE2kG,uBAAuBxlF,GAAG,GAAGA,IAAI,OAAOqlF,IAAII,cAAcJ,GAAGA,EAAE,MAAMC,GAAG,CAAC,IAAIjiG,EAAEiiG,EAAEA,EAAE,KAAKjiG,GAAG,CAAC,CAAC,SAAS8gG,GAAG9gG,GAAG,MAAMxC,EAAE6kG,SAAS7kG,EAAE6kG,QAAQriG,GAAGwgG,EAAExgG,EAAE,WAAWA,EAAE,KAAKghG,GAAE,EAAG3gF,EAAE,EAAErgB,EAAE,IAAIy1F,YAAY6M,aAAatiG,EAAE,4CAA4C4+F,EAAE5+F,GAAGA,CAAC,CAAC,SAASuiG,GAAGviG,GAAG,OAAOA,EAAEm/F,WAAW,wCAAwC,CAAC,SAASqD,GAAGxiG,GAAG,GAAGA,GAAG8hG,GAAGxB,EAAE,OAAO,IAAIl1F,WAAWk1F,GAAG,GAAG7d,EAAE,OAAOA,EAAEziF,GAAG,KAAK,iDAAiD,CAAC,SAASyiG,GAAGziG,EAAEvC,EAAEoqB,GAAG,OAAO,SAAS7nB,GAAG,IAAIsgG,IAAI9gB,GAAG9hF,GAAG,CAAC,GAAG,mBAAmBo3D,QAAQ90D,EAAEm/F,WAAW,WAAW,OAAOrqC,MAAM90D,EAAE,CAAC0iG,YAAY,gBAAgBppD,MAAM77C,IAAI,IAAIA,EAAEklG,GAAG,KAAK,uCAAuC3iG,EAAE,IAAI,OAAOvC,EAAEs3D,aAAc,IAAG6tC,OAAM,IAAKJ,GAAGxiG,KAAK,GAAGmL,EAAE,OAAO,IAAI7S,SAAQ,CAAEmF,EAAEoqB,KAAK1c,EAAEnL,GAAGA,GAAGvC,EAAE,IAAI2N,WAAWpL,KAAK6nB,EAAG,GAAE,CAAC,OAAOvvB,QAAQC,UAAU+gD,MAAK,IAAKkpD,GAAGxiG,IAAI,CAA9V,CAAgWA,GAAGs5C,MAAMt5C,GAAGy1F,YAAYoN,YAAY7iG,EAAEvC,KAAK67C,MAAMt5C,GAAGA,IAAIs5C,KAAKzxB,GAAG7nB,IAAIwgG,EAAE,0CAA0CxgG,GAAG8gG,GAAG9gG,EAAG,GAAE,CAAC,SAAS8iG,GAAG9iG,GAAG7G,KAAKK,KAAK,aAAaL,KAAK6oE,QAAQ,gCAAgChiE,KAAK7G,KAAK21C,OAAO9uC,CAAC,CAAC,SAAS+iG,GAAG/iG,GAAGA,EAAEisF,YAAYjsF,EAAEksF,UAAU,MAAM,CAAC,SAAS8W,GAAGhjG,IAAIA,EAAEijG,GAAGC,GAAGljG,KAAK8gG,KAAKmC,GAAGE,GAAGnjG,EAAE,CAAC,SAASojG,GAAGpjG,GAAG,IAAIvC,EAAEwlG,GAAGn3D,KAAK,IAAIruC,EAAE,OAAO,EAAEwlG,GAAGI,GAAGnlG,KAAKT,GAAGwlG,GAAGC,GAAGljG,EAAEsjG,IAAI7lG,EAAEA,EAAE6lG,GAAGtjG,EAAEsjG,GAAG,IAAIz7E,EAAE,CAAC07E,IAAI,MAAMC,cAAcxjG,EAAEyjG,GAAG/uC,IAAI10D,EAAE0jG,GAAGC,YAAY3jG,EAAEsjG,IAAI,OAAOjgG,GAAG5F,EAAEmmG,QAAQnmG,EAAE2uF,YAAYvkE,EAAE7nB,EAAE6jG,IAAI,CAAC,CAACtB,GAAGT,EAAE,4BAA4BA,EAAE5jC,EAAE4jC,IAAI,IAAIgC,GAAG,oBAAoB/jC,YAAY,IAAIA,YAAY,aAAQ,EAAOgkC,GAAG,CAAC/jG,EAAEvC,EAAEoqB,KAAK,IAAIuhB,GAAG3rC,KAAK,GAAGoqB,EAAE,IAAIA,EAAEpqB,EAAEuC,EAAE6nB,MAAMA,GAAGuhB,MAAMvhB,EAAE,GAAG,GAAGA,EAAEpqB,GAAGuC,EAAEqS,QAAQyxF,GAAG,OAAOA,GAAGp5F,OAAO1K,EAAEqS,kBAAkBijF,kBAAkBt1F,EAAEkH,MAAMzJ,EAAEoqB,GAAG7nB,EAAE6S,SAASpV,EAAEoqB,IAAI,IAAIuhB,EAAE,GAAG3rC,EAAEoqB,GAAG,CAAC,IAAI5c,EAAEjL,EAAEvC,KAAK,GAAG,IAAIwN,EAAE,CAAC,IAAInO,EAAE,GAAGkD,EAAEvC,KAAK,GAAG,MAAM,IAAIwN,GAAGm+B,GAAGs0C,OAAOC,cAAc,GAAG1yE,IAAI,EAAEnO,OAAO,CAAC,IAAI6B,EAAE,GAAGqB,EAAEvC,KAAK,OAAOwN,EAAE,MAAM,IAAIA,IAAI,GAAGA,IAAI,GAAGnO,GAAG,EAAE6B,GAAG,EAAEsM,IAAI,GAAGnO,GAAG,GAAG6B,GAAG,EAAE,GAAGqB,EAAEvC,MAAM2rC,GAAGs0C,OAAOC,aAAa1yE,IAAIA,GAAG,MAAMm+B,GAAGs0C,OAAOC,aAAa,MAAM1yE,GAAG,GAAG,MAAM,KAAKA,GAAG,CAAC,MAAMm+B,GAAGs0C,OAAOC,aAAa1yE,EAAE,CAAC,OAAOm+B,GAAG46D,GAAG,CAAChkG,EAAEvC,KAAKuC,KAAK,GAAG+jG,GAAGl8E,IAAI7nB,EAAEvC,GAAG,GAAG,SAASwmG,GAAGjkG,GAAG,GAAGm3B,EAAE,OAAO+sE,GAAG,EAAE,EAAElkG,GAAGqgB,EAAErgB,EAAE6hG,MAAMoB,GAAGkB,KAAK3mG,EAAE4mG,QAAQ5mG,EAAE4mG,OAAOpkG,GAAGghG,GAAE,GAAI5pE,EAAEp3B,EAAE,IAAI8iG,GAAG9iG,GAAG,CAAC,IAAIqkG,GAAGrkG,IAAI,GAAGqgB,EAAErgB,EAAEm3B,EAAE,MAAMmtE,GAAGtkG,GAAG,SAASikG,GAAGjkG,EAAC,EAAGijG,GAAG,CAACsB,GAAG,GAAGlB,GAAG,GAAGmB,GAAG,GAAGtB,GAAG,CAAC,EAAEuB,GAAG,WAAWttE,EAAE8rE,GAAGyB,KAAKzB,GAAG0B,IAAI,EAAEA,GAAG,WAAWhD,EAAE3lC,SAAQ,KAAMkmC,IAAIe,GAAG2B,IAAG,IAAKjoC,MAAM,GAAE,EAAE+nC,GAAG,WAAWzB,GAAG4B,sBAAsB5B,GAAG6B,GAAG7B,GAAG8B,cAAc9B,GAAG+B,GAAG/B,GAAGgC,cAAchC,GAAGiC,GAAGtE,GAAE,CAAE,EAAEsE,GAAG,SAASllG,GAAGqgB,EAAErgB,CAAC,EAAEmlG,GAAG,CAAC,oBAAoBhB,GAAG,WAAW,IAAI,IAAInkG,KAAKijG,GAAGI,GAAGN,GAAG/iG,GAAG,IAAIA,KAAKijG,GAAGsB,GAAGxB,GAAG/iG,GAAGijG,GAAGsB,GAAG,GAAGtB,GAAGI,GAAG,GAAGJ,GAAGC,GAAG,EAAE,EAAEC,GAAG,SAASnjG,GAAG,IAAIvC,EAAEuC,EAAEsjG,UAAUL,GAAGC,GAAGzlG,GAAGwlG,GAAGsB,GAAGrmG,KAAK8B,GAAGijG,GAAGI,GAAG/+D,OAAO2+D,GAAGI,GAAGt9F,QAAQ/F,GAAG,GAAGA,EAAEsjG,GAAG,EAAE8B,GAAG3nG,EAAE,EAAEqnG,GAAG,WAAW,EAAEE,GAAG,WAAW/B,GAAGuB,GAAGxgG,SAAShE,GAAGA,KAAK,EAAEqlG,GAAGrlG,GAAG,IAAI1H,SAASmF,IAAIuC,EAAEksF,UAAUrkE,IAAI,IAAIuhB,GAAGvhB,EAAEA,EAAEzU,MAAMmwF,IAAI,GAAG17E,EAAEy9E,cAAcz9E,EAAEy9E,cAAcC,KAAK,CAAC,IAAIt6F,EAAEg4F,GAAGC,GAAGr7E,EAAE29E,IAAIv6F,EAAEA,EAAEmhF,YAAYvkE,EAAEA,EAAE49E,cAAcjF,EAAE,0CAA0Cp3D,EAAE,uBAAuBvhB,EAAEy9E,aAAa,sCAAsC,KAAK,iBAAiBl8D,EAAEs8D,KAAK,gBAAgBt8D,EAAEg6D,GAAGv7E,GAAG,kBAAkBuhB,EAAE45D,GAAGn7E,EAAE89E,QAAQ,eAAev8D,GAAGvhB,EAAEA,EAAE89E,OAAOv8D,EAAE65D,GAAGC,GAAGr7E,UAAUo7E,GAAGC,GAAGr7E,GAAGk7E,GAAG35D,GAAGg8D,GAAGv9E,GAAGo7E,GAAGI,GAAG/+D,OAAO2+D,GAAGI,GAAGt9F,QAAQqjC,GAAG,GAAGA,EAAEk6D,GAAG,GAAG,iBAAiBl6D,EAAE65D,GAAGC,GAAGr7E,EAAE89E,QAAQvZ,YAAY,CAACmX,IAAI,WAAW,WAAWn6D,GAAGppC,EAAE4lG,QAAO,EAAGnoG,EAAEuC,IAAI,UAAUopC,EAAEy8D,MAAM,UAAUh+E,EAAEi+E,SAAS,KAAKj+E,EAAEk+E,MAAM,iBAAiBl+E,EAAEo0C,OAAOj8D,EAAEosF,YAAYvkE,GAAG,gBAAgBuhB,EAAE5rC,EAAEqqB,EAAEzvB,YAAYyvB,EAAE4gD,MAAMr/B,GAAGo3D,EAAE,kCAAkCp3D,EAAC,EAAGppC,EAAEmgG,QAAQngG,IAAI,MAAMwgG,EAAE,yBAAyBxgG,EAAEgmG,SAAS,IAAIhmG,EAAEimG,OAAO,KAAKjmG,EAAEgiE,SAAShiE,GAAGqD,IAAIrD,EAAEkmG,GAAG,WAAU,SAAUzoG,GAAGuC,EAAEksF,UAAU,CAAC94E,KAAK3V,GAAI,IAAGuC,EAAEkmG,GAAG,SAAQ,SAAUzoG,GAAGuC,EAAEmgG,QAAQ1iG,EAAG,KAAI,IAAIoqB,EAAEuhB,EAAE,GAAG,IAAIvhB,IAAI,CAAC,SAAS,UAAU,QAAQ,YAAYrqB,EAAE+yB,eAAe1I,IAAIuhB,EAAElrC,KAAK2pB,GAAG7nB,EAAEosF,YAAY,CAACmX,IAAI,OAAO4C,SAAS/8D,EAAEg9D,UAAU5oG,EAAEk5F,qBAAqB4H,WAAWgD,WAAW5yE,EAAE23E,WAAWtF,GAAI,IAAG6D,GAAG,SAAS5kG,GAAGA,GAAG,EAAEsmG,GAAG,WAAW,IAAItmG,EAAEk+D,EAAE,+BAA+Bl+D,EAAE,IAAI2/F,OAAO3/F,GAAGijG,GAAGsB,GAAGrmG,KAAK8B,EAAE,EAAE8rC,GAAG,WAAW,OAAO,GAAGm3D,GAAGsB,GAAGzsG,SAASmrG,GAAGqD,KAAKrD,GAAGoC,GAAGpC,GAAGsB,GAAG,KAAKtB,GAAGsB,GAAG1gE,KAAK,GAAGrmC,EAAEu5F,QAAQkM,GAAG,IAAIsD,GAAGvmG,IAAI,KAAK,EAAEA,EAAElI,QAAQkI,EAAEogB,OAAFpgB,CAAUxC,EAAC,EAAG,SAAS8mG,GAAGtkG,GAAG,GAAGm3B,EAAE,OAAO+sE,GAAG,EAAE,EAAElkG,GAAGqkG,GAAGrkG,EAAE,CAACxC,EAAEgpG,oBAAoB,WAAW,IAAIxmG,EAAEulG,KAAK9nG,EAAE2rC,IAAIppC,EAAE,IAAI,IAAI,GAAGA,EAAEopC,IAAIppC,EAAE,IAAI,IAAI,GAAGymG,GAAGhpG,EAAEA,EAAEuC,GAAG0mG,GAAGjpG,EAAE,EAAE,IAAIkpG,GAAG,GAAG,SAASC,GAAG5mG,GAAG7G,KAAK0tG,GAAG7mG,EAAE,GAAG7G,KAAKmjD,GAAG,SAASt8C,GAAGiL,IAAI9R,KAAK0tG,GAAG,GAAG,IAAI,GAAG7mG,CAAC,EAAE7G,KAAK2tG,GAAG,SAAS9mG,GAAGiL,IAAI9R,KAAK0tG,GAAG,GAAG,IAAI,GAAG7mG,CAAC,EAAE7G,KAAKsrG,GAAG,SAASzkG,EAAEvC,GAAGtE,KAAK4tG,KAAK5tG,KAAKmjD,GAAGt8C,GAAG7G,KAAK2tG,GAAGrpG,EAAE,EAAEtE,KAAK4tG,GAAG,WAAW97F,IAAI9R,KAAK0tG,GAAG,IAAI,IAAI,GAAG,CAAC,CAAC,CAAC,SAASG,GAAGhnG,EAAEvC,EAAEoqB,EAAEuhB,GAAG,OAAOjS,EAAE+sE,GAAG,EAAE,EAAElkG,EAAEvC,EAAEoqB,EAAEuhB,GAAG69D,GAAGjnG,EAAEvC,EAAEoqB,EAAEuhB,EAAE,CAAC,SAAS69D,GAAGjnG,EAAEvC,EAAEoqB,EAAEuhB,GAAG,GAAGppC,KAAK,EAAEvC,KAAK,EAAEoqB,KAAK,EAAEuhB,KAAK,EAAE,oBAAoBksD,kBAAkB,OAAOkL,EAAE,uFAAuF,EAAE,IAAIv1F,EAAE,GAAG,OAAOksB,GAAG,IAAIlsB,EAAEnT,OAAOkvG,GAAGhnG,EAAEvC,EAAEoqB,EAAEuhB,IAAIppC,EAAE,CAACyjG,GAAG57E,EAAEy7E,GAAGtjG,EAAE0jG,GAAGt6D,EAAEy6D,GAAG54F,GAAGksB,GAAGn3B,EAAEknG,GAAG,cAAc9a,YAAYpsF,EAAEiL,GAAG,GAAGm4F,GAAGpjG,GAAG,CAAC,SAASmnG,GAAGnnG,EAAEvC,EAAEoqB,GAAG,OAAOsP,EAAE+sE,GAAG,EAAE,EAAElkG,EAAEvC,EAAEoqB,GAAG,CAAC,CAAC,SAASu/E,GAAGpnG,EAAEvC,GAAG,GAAG05B,EAAE,OAAO+sE,GAAG,EAAE,EAAElkG,EAAEvC,EAAE,CAACD,EAAE6pG,iBAAiB,SAASrnG,EAAEvC,GAAG,IAAIoqB,EAAE8+E,GAAG3mG,GAAG6nB,IAAI7nB,GAAG2mG,GAAG7uG,SAAS6uG,GAAG7uG,OAAOkI,EAAE,GAAG2mG,GAAG3mG,GAAG6nB,EAAE+0C,EAAE3hE,IAAI+E,IAAIA,EAAE6nB,EAAEpqB,GAAGokG,IAAIoB,GAAGiC,GAAGllG,GAAGsnG,GAAGtnG,EAAE,EAAE,IAAIunG,GAAGvnG,IAAI,IAAI,IAAIvC,EAAE,EAAEoqB,EAAE,EAAEA,EAAE7nB,EAAElI,SAAS+vB,EAAE,CAAC,IAAIuhB,EAAEppC,EAAE49E,WAAW/1D,GAAG,KAAKuhB,EAAE3rC,IAAI,MAAM2rC,EAAE3rC,GAAG,EAAE,OAAO2rC,GAAG,OAAOA,GAAG3rC,GAAG,IAAIoqB,GAAGpqB,GAAG,CAAC,CAAC,OAAOA,GAAG+pG,GAAG,CAACxnG,EAAEvC,EAAEoqB,EAAEuhB,KAAK,KAAK,EAAEA,GAAG,OAAO,EAAE,IAAIn+B,EAAE4c,KAAK,EAAEuhB,EAAEvhB,EAAEuhB,EAAE,EAAE,IAAI,IAAItsC,EAAE,EAAEA,EAAEkD,EAAElI,SAASgF,EAAE,CAAC,IAAI6B,EAAEqB,EAAE49E,WAAW9gF,GAAG,GAAG,OAAO6B,GAAG,OAAOA,IAAIA,EAAE,QAAQ,KAAKA,IAAI,IAAI,KAAKqB,EAAE49E,aAAa9gF,IAAI,KAAK6B,EAAE,CAAC,GAAGkpB,GAAGuhB,EAAE,MAAM3rC,EAAEoqB,MAAM,GAAGlpB,CAAC,KAAK,CAAC,GAAG,MAAMA,EAAE,CAAC,GAAGkpB,EAAE,GAAGuhB,EAAE,MAAM3rC,EAAEoqB,MAAM,GAAG,IAAIlpB,GAAG,CAAC,KAAK,CAAC,GAAG,OAAOA,EAAE,CAAC,GAAGkpB,EAAE,GAAGuhB,EAAE,MAAM3rC,EAAEoqB,MAAM,GAAG,IAAIlpB,GAAG,EAAE,KAAK,CAAC,GAAGkpB,EAAE,GAAGuhB,EAAE,MAAM3rC,EAAEoqB,MAAM,GAAG,IAAIlpB,GAAG,GAAGlB,EAAEoqB,MAAM,GAAG,IAAIlpB,GAAG,GAAG,EAAE,CAAClB,EAAEoqB,MAAM,GAAG,IAAIlpB,GAAG,EAAE,EAAE,CAAClB,EAAEoqB,MAAM,GAAG,IAAI,GAAGlpB,CAAC,CAAC,CAAC,OAAOlB,EAAEoqB,IAAI,GAAG,EAAEA,EAAE5c,GAAGw8F,GAAG,CAACznG,EAAEvC,EAAE2rC,IAAIo+D,GAAGxnG,EAAE6nB,IAAIpqB,EAAE2rC,GAAG,SAASs+D,GAAG1nG,EAAEvC,GAAG,GAAG05B,EAAE,OAAO+sE,GAAG,EAAE,EAAElkG,EAAEvC,EAAE,CAAC,SAASkqG,GAAG3nG,EAAEvC,EAAEoqB,GAAG,GAAGsP,EAAE,OAAO+sE,GAAG,EAAE,EAAElkG,EAAEvC,EAAEoqB,EAAE,CAAC,SAAS+/E,GAAG5nG,EAAEvC,EAAEoqB,GAAG,OAAOsP,EAAE+sE,GAAG,EAAE,EAAElkG,EAAEvC,EAAEoqB,GAAG,CAAC,CAAC,SAASggF,GAAG7nG,EAAEvC,GAAG,GAAG05B,EAAE,OAAO+sE,GAAG,EAAE,EAAElkG,EAAEvC,EAAE,CAAC,SAASqqG,GAAG9nG,EAAEvC,EAAEoqB,GAAG,GAAGsP,EAAE,OAAO+sE,GAAG,GAAG,EAAElkG,EAAEvC,EAAEoqB,EAAE,CAAC,SAASkgF,GAAG/nG,EAAEvC,EAAEoqB,EAAEuhB,GAAG,GAAGjS,EAAE,OAAO+sE,GAAG,GAAG,EAAElkG,EAAEvC,EAAEoqB,EAAEuhB,EAAE,CAAC,SAAS4+D,GAAGhoG,EAAEvC,EAAEoqB,EAAEuhB,GAAG,GAAGjS,EAAE,OAAO+sE,GAAG,GAAG,EAAElkG,EAAEvC,EAAEoqB,EAAEuhB,EAAE,CAAC,SAAS6+D,GAAGjoG,EAAEvC,EAAEoqB,EAAEuhB,GAAG,GAAGjS,EAAE,OAAO+sE,GAAG,GAAG,EAAElkG,EAAEvC,EAAEoqB,EAAEuhB,EAAE,CAAC,SAAS8+D,GAAGloG,GAAG,GAAGm3B,EAAE,OAAO+sE,GAAG,GAAG,EAAElkG,EAAE,CAAC,SAASmoG,GAAGnoG,EAAEvC,GAAG,GAAG05B,EAAE,OAAO+sE,GAAG,GAAG,EAAElkG,EAAEvC,EAAE,CAAC,SAAS2qG,GAAGpoG,EAAEvC,EAAEoqB,GAAG,GAAGsP,EAAE,OAAO+sE,GAAG,GAAG,EAAElkG,EAAEvC,EAAEoqB,EAAE,CAAC,IAAIwgF,GAAGroG,IAAI,IAAIghG,EAAE,IAAI,GAAGhhG,KAAK6hG,IAAI,IAAI1qE,EAAEmwE,GAAGjnF,GAAGgkF,GAAGhkF,EAAE,CAAC,MAAMrgB,GAAGA,aAAa8iG,IAAI,UAAU9iG,GAAGo3B,EAAE,EAAEp3B,EAAE,CAAC,CAAC,MAAMA,GAAGA,aAAa8iG,IAAI,UAAU9iG,GAAGo3B,EAAE,EAAEp3B,EAAE,GAAG,SAASsoG,GAAGtoG,GAAGA,KAAK,EAAE,mBAAmBuoG,QAAQC,KAAKD,QAAQC,GAAGp/D,IAAIppC,GAAG,EAAEA,GAAGlH,MAAMwgD,KAAKosD,IAAI1lG,GAAG,IAAIuoG,QAAQE,MAAMr/D,IAAIppC,GAAG,EAAE,GAAG,CAAC,SAAS0lG,KAAK,IAAI1lG,EAAEulG,KAAKvlG,IAAIsoG,GAAGtoG,GAAGqoG,IAAG,IAAKK,OAAO,CAAClrG,EAAEmrG,kCAAkCL,GAAG9qG,EAAEorG,aAAalD,GAAG,IAAImD,GAAG7oG,GAAG,GAAGA,EAAE,IAAI,GAAGA,EAAE,KAAK,GAAGA,EAAE,KAAK8oG,GAAG,CAAC,EAAE,GAAG,GAAG,GAAG,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAAKC,GAAG,CAAC,EAAE,GAAG,GAAG,GAAG,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAAK,SAASC,GAAGhpG,EAAEvC,EAAEoqB,EAAEuhB,EAAEn+B,EAAEnO,EAAE6B,EAAEigG,GAAG,OAAOznE,EAAE+sE,GAAG,GAAG,EAAElkG,EAAEvC,EAAEoqB,EAAEuhB,EAAEn+B,EAAEnO,EAAE6B,EAAEigG,IAAI,EAAE,CAAC,SAASqK,GAAGjpG,EAAEvC,EAAEoqB,EAAEuhB,EAAEn+B,EAAEnO,EAAE6B,GAAG,GAAGw4B,EAAE,OAAO+sE,GAAG,GAAG,EAAElkG,EAAEvC,EAAEoqB,EAAEuhB,EAAEn+B,EAAEnO,EAAE6B,EAAE,CAAC,IAAIuqG,GAAGlpG,IAAI,IAAIvC,EAAE8pG,GAAGvnG,GAAG,EAAE6nB,EAAEshF,GAAG1rG,GAAG,OAAOoqB,GAAG4/E,GAAGznG,EAAE6nB,EAAEpqB,GAAGoqB,GAAGuhF,GAAGppG,IAAI,IAAIvC,EAAE4rG,KAAK,OAAOrpG,EAAEA,IAAI0mG,GAAGjpG,GAAGuC,GAAG,SAASkkG,GAAGlkG,EAAEvC,GAAG,IAAIoqB,EAAEyhF,UAAUxxG,OAAO,EAAEsxC,EAAEkgE,UAAU,OAAOF,IAAG,KAAM,IAAI,IAAIn+F,EAAEs+F,GAAG,EAAE1hF,GAAGlpB,EAAEsM,GAAG,EAAE2zF,EAAE,EAAEA,EAAE/2E,EAAE+2E,IAAI,CAAC,IAAIphG,EAAE4rC,EAAE,EAAEw1D,GAAG9hG,IAAI6B,EAAEigG,IAAI,GAAGphG,CAAC,CAAC,OAAOgsG,GAAGxpG,EAAE6nB,EAAE5c,EAAExN,EAAG,GAAE,CAAC,IAAIgsG,GAAGC,GAAG,GAAGC,GAAG,CAAC,EAAEC,GAAG,KAAK,IAAIH,GAAG,CAAC,IAAIzpG,EAAEvC,EAAE,CAACosG,KAAK,WAAWC,QAAQ,WAAWC,KAAK,IAAIC,IAAI,IAAIC,KAAK,iBAAiBC,MAAM,iBAAiBtyG,WAAWA,UAAUuyG,WAAWvyG,UAAUuyG,UAAU,IAAI,KAAKh+F,QAAQ,IAAI,KAAK,SAASgrB,EAAE2nE,GAAG,kBAAkB,IAAI9+F,KAAK2pG,QAAG,IAASA,GAAG3pG,UAAUvC,EAAEuC,GAAGvC,EAAEuC,GAAG2pG,GAAG3pG,GAAG,IAAI6nB,EAAE,GAAG,IAAI7nB,KAAKvC,EAAEoqB,EAAE3pB,KAAK,GAAG8B,KAAKvC,EAAEuC,MAAMypG,GAAG5hF,CAAC,CAAC,OAAO4hF,IAAI,SAASW,GAAGpqG,EAAE6nB,GAAG,GAAGsP,EAAE,OAAO+sE,GAAG,GAAG,EAAElkG,EAAE6nB,GAAG7nB,KAAK,EAAE6nB,KAAK,EAAE,IAAIuhB,EAAE,EAAE,OAAOwgE,KAAK5lG,SAAQ,SAAUlH,EAAE6B,GAAG,IAAIigG,EAAE/2E,EAAEuhB,EAAE,IAAIzqC,EAAEsM,IAAIjL,EAAE,EAAErB,GAAG,IAAI,GAAGigG,EAAEA,EAAE,EAAEA,EAAE9hG,EAAEhF,SAAS8mG,EAAEnhG,IAAIkB,KAAK,IAAI,GAAG7B,EAAE8gF,WAAWghB,GAAGnhG,IAAIkB,GAAG,IAAI,GAAG,EAAEyqC,GAAGtsC,EAAEhF,OAAO,CAAE,IAAG,CAAC,CAAC,SAASuyG,GAAGrqG,EAAEvC,GAAG,GAAG05B,EAAE,OAAO+sE,GAAG,GAAG,EAAElkG,EAAEvC,GAAGuC,KAAK,EAAEvC,KAAK,EAAE,IAAIoqB,EAAE+hF,KAAK3+F,IAAIjL,GAAG,IAAI,GAAG6nB,EAAE/vB,OAAO,IAAIsxC,EAAE,EAAE,OAAOvhB,EAAE7jB,SAAQ,SAAUhE,GAAGopC,GAAGppC,EAAElI,OAAO,CAAE,IAAGmT,IAAIxN,GAAG,IAAI,GAAG2rC,EAAE,CAAC,CAAC,SAASkhE,GAAGtqG,GAAG,OAAOm3B,EAAE+sE,GAAG,GAAG,EAAElkG,GAAG,EAAE,CAAC,SAASuqG,GAAGvqG,EAAEvC,EAAEoqB,EAAEuhB,GAAG,OAAOjS,EAAE+sE,GAAG,GAAG,EAAElkG,EAAEvC,EAAEoqB,EAAEuhB,GAAG,EAAE,CAAC,SAASohE,GAAGxqG,EAAEvC,EAAEoqB,EAAEuhB,EAAEn+B,GAAG,OAAOksB,EAAE+sE,GAAG,GAAG,EAAElkG,EAAEvC,EAAEoqB,EAAEuhB,EAAEn+B,GAAG,EAAE,CAAC,IAAIw/F,GAAG,CAAC,KAAK,GAAG,IAAI,SAASC,GAAG1qG,EAAEvC,EAAE2rC,EAAEtsC,GAAG,GAAGq6B,EAAE,OAAO+sE,GAAG,GAAG,EAAElkG,EAAEvC,EAAE2rC,EAAEtsC,GAAGW,KAAK,EAAE2rC,KAAK,EAAEtsC,KAAK,EAAE,IAAI,IAAI6B,EAAE,EAAEigG,EAAE,EAAEA,EAAEx1D,EAAEw1D,IAAI,CAAC,IAAIphG,EAAEyN,IAAIxN,GAAG,IAAI,GAAGF,EAAE0N,IAAIxN,EAAE,GAAG,IAAI,GAAGA,GAAG,EAAE,IAAI,IAAI0N,EAAE,EAAEA,EAAE5N,EAAE4N,IAAI,CAAC,IAAIs3E,EAAE56D,IAAIrqB,EAAE2N,IAAI,GAAG3F,EAAEilG,GAAGzqG,GAAG,IAAIyiF,GAAG,KAAKA,IAAI,IAAIziF,EAAEi0E,EAAEusB,GAAGuD,GAAGv+F,EAAE,IAAIA,EAAE1N,OAAO,GAAG0N,EAAEtH,KAAKukF,EAAE,CAAC9jF,GAAGpB,CAAC,CAAC,OAAO0N,IAAInO,GAAG,IAAI,GAAG6B,EAAE,CAAC,CAAC,IAAIgsG,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAIC,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAIC,GAAG,CAAC7qG,EAAE6nB,KAAKpqB,IAAInD,IAAI0F,EAAE6nB,IAAI,EAAC,EAAG,SAASijF,GAAG9qG,EAAEvC,EAAEoqB,EAAE5c,GAAG,SAASnO,EAAEkD,EAAEvC,EAAEoqB,GAAG,IAAI7nB,EAAE,iBAAiBA,EAAEA,EAAE2qC,WAAW3qC,GAAG,GAAGA,EAAElI,OAAO2F,GAAGuC,EAAE6nB,EAAE,GAAG7nB,EAAE,OAAOA,CAAC,CAAC,SAASrB,EAAEqB,EAAEvC,GAAG,OAAOX,EAAEkD,EAAEvC,EAAE,IAAI,CAAC,SAASmhG,EAAE5+F,EAAEvC,GAAG,SAASoqB,EAAE7nB,GAAG,OAAO,EAAEA,GAAG,EAAE,EAAEA,EAAE,EAAE,CAAC,CAAC,IAAIopC,EAAE,OAAO,KAAKA,EAAEvhB,EAAE7nB,EAAE+qG,cAActtG,EAAEstG,iBAAiB,KAAK3hE,EAAEvhB,EAAE7nB,EAAEgrG,WAAWvtG,EAAEutG,eAAe5hE,EAAEvhB,EAAE7nB,EAAEirG,UAAUxtG,EAAEwtG,YAAY7hE,CAAC,CAAC,SAAS5rC,EAAEwC,GAAG,OAAOA,EAAEkrG,UAAU,KAAK,EAAE,OAAO,IAAItzD,KAAK53C,EAAE+qG,cAAc,EAAE,GAAG,IAAI,KAAK,EAAE,OAAO/qG,EAAE,KAAK,EAAE,OAAO,IAAI43C,KAAK53C,EAAE+qG,cAAc,EAAE,GAAG,KAAK,EAAE,OAAO,IAAInzD,KAAK53C,EAAE+qG,cAAc,EAAE,GAAG,KAAK,EAAE,OAAO,IAAInzD,KAAK53C,EAAE+qG,cAAc,EAAE,GAAG,KAAK,EAAE,OAAO,IAAInzD,KAAK53C,EAAE+qG,cAAc,EAAE,GAAG,IAAI,KAAK,EAAE,OAAO,IAAInzD,KAAK53C,EAAE+qG,cAAc,EAAE,GAAG,IAAI,CAAC,SAASxtG,EAAEyC,GAAG,IAAIvC,EAAEuC,EAAEmrG,GAAG,IAAInrG,EAAE,IAAI43C,KAAK,IAAIA,KAAK53C,EAAEorG,GAAG,KAAK,EAAE,GAAGC,WAAW,EAAE5tG,GAAG,CAAC,IAAIoqB,EAAE7nB,EAAEgrG,WAAW5hE,GAAGy/D,GAAG7oG,EAAE+qG,eAAeJ,GAAGC,IAAI/iF,GAAG,KAAKpqB,EAAE2rC,EAAEppC,EAAEirG,WAAW,CAACjrG,EAAEsrG,QAAQtrG,EAAEirG,UAAUxtG,GAAG,KAAK,CAACA,GAAG2rC,EAAEppC,EAAEirG,UAAU,EAAEjrG,EAAEsrG,QAAQ,GAAG,GAAGzjF,EAAE7nB,EAAEurG,SAAS1jF,EAAE,IAAI7nB,EAAEurG,SAAS,GAAGvrG,EAAEwrG,YAAYxrG,EAAE+qG,cAAc,GAAG,CAAC,OAAOljF,EAAE,IAAI+vB,KAAK53C,EAAE+qG,cAAc,EAAE,EAAE,GAAGttG,EAAED,EAAE,IAAIo6C,KAAK53C,EAAE+qG,cAAc,EAAE,IAAIljF,EAAErqB,EAAEqqB,GAAG,GAAG+2E,EAAEnhG,EAAEuC,GAAG,GAAG4+F,EAAE/2E,EAAE7nB,GAAGA,EAAE+qG,cAAc,EAAE/qG,EAAE+qG,cAAc/qG,EAAE+qG,cAAc,CAAC,CAAC/qG,KAAK,EAAEvC,KAAK,EAAEoqB,KAAK,EAAE5c,KAAK,EAAE,IAAIE,EAAEi+B,IAAIn+B,EAAE,IAAI,IAAI,GAAG,IAAI,IAAIw3E,KAAKx3E,EAAE,CAACwgG,GAAGriE,IAAIn+B,GAAG,IAAI,GAAGygG,GAAGtiE,IAAIn+B,EAAE,GAAG,IAAI,GAAG0gG,GAAGviE,IAAIn+B,EAAE,GAAG,IAAI,GAAG2gG,GAAGxiE,IAAIn+B,EAAE,IAAI,IAAI,GAAG4gG,GAAGziE,IAAIn+B,EAAE,IAAI,IAAI,GAAGmgG,GAAGhiE,IAAIn+B,EAAE,IAAI,IAAI,GAAG6gG,GAAG1iE,IAAIn+B,EAAE,IAAI,IAAI,GAAGkgG,GAAG/hE,IAAIn+B,EAAE,IAAI,IAAI,GAAG8gG,GAAG3iE,IAAIn+B,EAAE,IAAI,IAAI,GAAG+gG,GAAG5iE,IAAIn+B,EAAE,IAAI,IAAI,GAAGghG,GAAG9gG,EAAE64F,GAAG74F,GAAG,IAAI0c,EAAEm8E,GAAGn8E,GAAG1c,EAAE,CAAC,KAAK,uBAAuB,KAAK,WAAW,KAAK,WAAW,KAAK,KAAK,KAAK,cAAc,KAAK,QAAQ,KAAK,WAAW,KAAK,WAAW,KAAK,WAAW,MAAM,KAAK,MAAM,KAAK,MAAM,WAAW,MAAM,WAAW,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,MAAM0c,EAAEA,EAAE1b,QAAQ,IAAIE,OAAOo2E,EAAE,KAAKt3E,EAAEs3E,IAAI,IAAIj9E,EAAE,2DAA2DqG,MAAM,KAAKizF,EAAE,wFAAwFjzF,MAAM,KAAK,IAAI42E,KAAKt3E,EAAE,CAAC,KAAKnL,GAAGwF,EAAExF,EAAE8rG,IAAIlwD,UAAU,EAAE,GAAG,KAAK57C,GAAGwF,EAAExF,EAAE8rG,IAAI,KAAK9rG,GAAG8+F,EAAE9+F,EAAE6rG,IAAIjwD,UAAU,EAAE,GAAG,KAAK57C,GAAG8+F,EAAE9+F,EAAE6rG,IAAI,KAAK7rG,GAAGrB,GAAGqB,EAAEorG,GAAG,MAAM,IAAI,EAAE,GAAG,KAAKprG,GAAGrB,EAAEqB,EAAE4rG,GAAG,GAAG,KAAK5rG,GAAGlD,EAAEkD,EAAE4rG,GAAG,EAAE,KAAK,KAAK5rG,GAAGzC,EAAEyC,GAAG2qC,WAAWiR,UAAU,GAAG,KAAK57C,GAAGzC,EAAEyC,GAAG,KAAKA,GAAGrB,EAAEqB,EAAE2rG,GAAG,GAAG,KAAK3rG,IAAI,IAAIA,EAAEA,EAAE2rG,IAAI3rG,EAAE,GAAG,GAAGA,IAAIA,GAAG,IAAIrB,EAAEqB,EAAE,IAAI,KAAKA,IAAI,IAAI,IAAIvC,EAAE,EAAEoqB,EAAE,EAAEA,GAAG7nB,EAAE6rG,GAAG,EAAEpuG,IAAIorG,GAAG7oG,EAAEorG,GAAG,MAAMT,GAAGC,IAAI/iF,MAAM,OAAOlpB,EAAEqB,EAAE4rG,GAAGnuG,EAAE,EAAC,EAAG,KAAKuC,GAAGrB,EAAEqB,EAAE6rG,GAAG,EAAE,GAAG,KAAK7rG,GAAGrB,EAAEqB,EAAE0rG,GAAG,GAAG,KAAK,IAAI,KAAK,KAAK1rG,GAAG,GAAGA,EAAE2rG,IAAI,GAAG3rG,EAAE2rG,GAAG,KAAK,KAAK,KAAK3rG,GAAGrB,EAAEqB,EAAEyrG,GAAG,GAAG,KAAK,IAAI,KAAK,KAAKzrG,GAAGA,EAAE8rG,IAAI,EAAE,KAAK9rG,GAAGrB,EAAE3G,KAAK0f,OAAO1X,EAAEmrG,GAAG,EAAEnrG,EAAE8rG,IAAI,GAAG,GAAG,KAAK9rG,IAAI,IAAIvC,EAAEzF,KAAK0f,OAAO1X,EAAEmrG,GAAG,GAAGnrG,EAAE8rG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI9rG,EAAE8rG,GAAG,IAAI9rG,EAAEmrG,GAAG,GAAG,GAAG1tG,IAAIA,EAAE,IAAIA,IAAI,IAAIoqB,GAAG7nB,EAAE8rG,GAAG,IAAI9rG,EAAEmrG,IAAI,IAAI,GAAGtjF,GAAGghF,GAAG7oG,EAAEorG,MAAM3tG,EAAE,QAAQ,CAACA,EAAE,GAAG,IAAIoqB,GAAG7nB,EAAE8rG,GAAG,EAAE9rG,EAAEmrG,GAAG,GAAG,GAAG,GAAGtjF,GAAG,GAAGA,GAAGghF,GAAG7oG,EAAEorG,GAAG,IAAI,KAAK3tG,GAAG,CAAC,OAAOkB,EAAElB,EAAE,EAAC,EAAG,KAAKuC,GAAGA,EAAE8rG,GAAG,KAAK9rG,GAAGrB,EAAE3G,KAAK0f,OAAO1X,EAAEmrG,GAAG,GAAGnrG,EAAE8rG,GAAG,GAAG,GAAG,GAAG,GAAG,KAAK9rG,IAAIA,EAAEorG,GAAG,MAAMzgE,WAAWiR,UAAU,GAAG,KAAK57C,GAAGA,EAAEorG,GAAG,KAAK,KAAKprG,IAAI,IAAIvC,EAAE,IAAIuC,EAAEA,EAAEgsG,IAAI,OAAOhsG,EAAEhI,KAAK4d,IAAI5V,GAAG,IAAIvC,EAAE,IAAI,KAAKigF,OAAO,QAAQ19E,EAAE,GAAG,IAAIA,EAAE,KAAKkH,OAAO,EAAC,EAAG,KAAKlH,GAAGA,EAAEisG,GAAG,KAAK,IAAI,KAAKpkF,EAAEA,EAAE1b,QAAQ,MAAM,QAAQhB,EAAE0c,EAAEytD,SAASmN,KAAK56D,EAAEA,EAAE1b,QAAQ,IAAIE,OAAOo2E,EAAE,KAAKt3E,EAAEs3E,GAAGx3E,KAAK,OAAOw3E,EAAE,SAASziF,GAAG,IAAIvC,EAAEZ,MAAM0qG,GAAGvnG,GAAG,GAAG,OAAOwnG,GAAGxnG,EAAEvC,EAAE,EAAEA,EAAE3F,QAAQ2F,CAAC,CAA5D,CAA8DoqB,EAAEA,EAAE1b,QAAQ,QAAQ,MAAMs2E,EAAE3qF,OAAO2F,EAAE,GAAGotG,GAAGpoB,EAAEziF,GAAGyiF,EAAE3qF,OAAO,EAAE,CAACmrG,GAAGwB,KAAK,IAAIyH,GAAG,CAAC,KAAKjI,GAAGK,GAAG0C,GAAGG,GAAGC,GAAGM,GAAGC,GAAGC,GAAGC,GAAGC,GAAGC,GAAGC,GAAGC,GAAGC,GAAGC,GAAGC,GAAGY,GAAGC,GAAGmB,GAAGC,GAAGC,GAAGC,GAAGC,GAAGE,IAAIyB,GAAG,CAAC9oG,EAAE,SAASrD,EAAEvC,EAAEoqB,GAAG,MAAM,IAAI++E,GAAG5mG,KAAK,GAAGykG,GAAGhnG,IAAI,EAAEoqB,IAAI,GAAG7nB,CAAC,EAAE48D,EAAE,SAAS58D,GAAGosG,GAAGpsG,IAAI,GAAGtC,EAAE,GAAG8hF,EAAE,QAAO,GAAIyjB,GAAG+B,IAAI,EAAErsE,EAAE,SAAS34B,GAAGA,KAAK,EAAEm3B,EAAEi1D,YAAY,CAACmX,IAAI,gBAAgBoC,OAAO3lG,IAAIgjG,GAAGhjG,EAAE,EAAEw+F,EAAEyI,GAAGnI,EAAEqI,GAAG/G,EAAEgH,GAAG14E,EAAEg5E,GAAG3G,EAAE4G,GAAGhJ,EAAEiJ,GAAGpH,EAAEqH,GAAG3F,EAAE4F,GAAGhG,EAAEiG,GAAG3+D,EAAE4+D,GAAGpH,EAAEqH,GAAGprF,EAAEqrF,GAAG5H,EAAE6H,GAAGj8E,EAAEk8E,GAAGvG,EAAE,KAAI,EAAGhyB,EAAE,SAAS7vE,EAAEvC,IAAIuC,KAAK,IAAIvC,IAAI,EAAE4nC,YAAW,IAAKqgE,OAAOvuE,EAAEi1D,YAAY,CAACkZ,aAAatlG,EAAEujG,IAAI,kBAAkBvjG,EAAEijG,GAAGC,GAAGljG,KAAKA,EAAEosF,YAAY,CAACmX,IAAI,gBAAgB,EAAE5B,EAAE,WAAW,OAAO,CAAC,EAAEjlC,EAAE4rC,GAAGlxE,EAAE,SAASp3B,GAAGqD,GAAG4/F,GAAGC,GAAGljG,IAAI,GAAGqsG,KAAK,EAAE5uG,EAAE,SAASuC,EAAEvC,EAAEoqB,GAAG7nB,EAAEvC,EAAE,UAAU,EAAE,UAAUuC,GAAGA,IAAI,GAAG,WAAWvC,EAAE6uG,IAAIzkF,KAAK,EAAE7nB,EAAE,IAAI43C,KAAK,IAAI53C,GAAGopC,IAAIvhB,GAAG,IAAI,GAAG7nB,EAAEusG,gBAAgBnjE,IAAIvhB,EAAE,GAAG,IAAI,GAAG7nB,EAAEwsG,gBAAgBpjE,IAAIvhB,EAAE,GAAG,IAAI,GAAG7nB,EAAEysG,cAAcrjE,IAAIvhB,EAAE,IAAI,IAAI,GAAG7nB,EAAE0sG,aAAatjE,IAAIvhB,EAAE,IAAI,IAAI,GAAG7nB,EAAE2sG,cAAcvjE,IAAIvhB,EAAE,IAAI,IAAI,GAAG7nB,EAAE4sG,iBAAiB,KAAKxjE,IAAIvhB,EAAE,IAAI,IAAI,GAAG7nB,EAAE6sG,YAAY7sG,GAAGA,EAAEqrG,UAAUzzD,KAAKk1D,IAAI9sG,EAAE4sG,iBAAiB,EAAE,EAAE,EAAE,EAAE,EAAE,IAAI,MAAM,EAAExjE,IAAIvhB,EAAE,IAAI,IAAI,GAAG7nB,CAAC,EAAE4+F,EAAE,SAAS5+F,EAAEvC,EAAEoqB,GAAG7nB,EAAEvC,EAAE,UAAU,EAAE,UAAUuC,GAAGA,IAAI,GAAG,WAAWvC,EAAE6uG,IAAIzkF,KAAK,EAAE7nB,EAAE,IAAI43C,KAAK,IAAI53C,GAAGopC,IAAIvhB,GAAG,IAAI,GAAG7nB,EAAE+sG,aAAa3jE,IAAIvhB,EAAE,GAAG,IAAI,GAAG7nB,EAAEgtG,aAAa5jE,IAAIvhB,EAAE,GAAG,IAAI,GAAG7nB,EAAEitG,WAAW7jE,IAAIvhB,EAAE,IAAI,IAAI,GAAG7nB,EAAEirG,UAAU7hE,IAAIvhB,EAAE,IAAI,IAAI,GAAG7nB,EAAEgrG,WAAW5hE,IAAIvhB,EAAE,IAAI,IAAI,GAAG7nB,EAAE+qG,cAAc,KAAK3hE,IAAIvhB,EAAE,IAAI,IAAI,GAAG7nB,EAAEkrG,SAASztG,GAAGorG,GAAG7oG,EAAE+qG,eAAejC,GAAGC,IAAI/oG,EAAEgrG,YAAYhrG,EAAEirG,UAAU,EAAE,EAAE7hE,IAAIvhB,EAAE,IAAI,IAAI,GAAGpqB,EAAE2rC,IAAIvhB,EAAE,IAAI,IAAI,IAAI,GAAG7nB,EAAEktG,oBAAoBzvG,EAAE,IAAIm6C,KAAK53C,EAAE+qG,cAAc,EAAE,GAAGmC,oBAAoB,IAAIjiG,EAAE,IAAI2sC,KAAK53C,EAAE+qG,cAAc,EAAE,GAAGmC,oBAAoBltG,EAAE,GAAGvC,GAAGwN,GAAGjL,EAAEktG,qBAAqBl1G,KAAKC,IAAIgT,EAAExN,IAAI2rC,IAAIvhB,EAAE,IAAI,IAAI,GAAG7nB,CAAC,EAAEiM,EAAE,SAASjM,GAAGA,KAAK,EAAE,IAAIvC,EAAE,IAAIm6C,KAAKxO,IAAIppC,EAAE,IAAI,IAAI,GAAG,KAAKopC,IAAIppC,EAAE,IAAI,IAAI,GAAGopC,IAAIppC,EAAE,IAAI,IAAI,GAAGopC,IAAIppC,EAAE,GAAG,IAAI,GAAGopC,IAAIppC,EAAE,GAAG,IAAI,GAAGopC,IAAIppC,GAAG,IAAI,GAAG,GAAG6nB,EAAEuhB,IAAIppC,EAAE,IAAI,IAAI,GAAGiL,EAAExN,EAAEyvG,oBAAoBpwG,EAAE,IAAI86C,KAAKn6C,EAAEstG,cAAc,EAAE,GAAGmC,oBAAoBvuG,EAAE,IAAIi5C,KAAKn6C,EAAEstG,cAAc,EAAE,GAAGmC,oBAAoBtO,EAAE5mG,KAAKC,IAAI0G,EAAE7B,GAAG,OAAO,EAAE+qB,EAAEuhB,IAAIppC,EAAE,IAAI,IAAI,GAAGvI,OAAOqF,GAAG6B,GAAGigG,GAAG3zF,GAAG,EAAE4c,IAAI+2E,GAAG3zF,KAAKnO,EAAE9E,KAAKu/B,IAAI54B,EAAE7B,GAAGW,EAAE0vG,QAAQ1vG,EAAE4tG,UAAU,MAAM,EAAExjF,EAAE+2E,EAAE9hG,GAAGmO,KAAKm+B,IAAIppC,EAAE,IAAI,IAAI,GAAGvC,EAAEytG,SAASrjF,GAAGghF,GAAGprG,EAAEstG,eAAejC,GAAGC,IAAItrG,EAAEutG,YAAYvtG,EAAEwtG,UAAU,EAAE,EAAE7hE,IAAIppC,EAAE,IAAI,IAAI,GAAG6nB,EAAEuhB,IAAIppC,GAAG,IAAI,GAAGvC,EAAEsvG,aAAa3jE,IAAIppC,EAAE,GAAG,IAAI,GAAGvC,EAAEuvG,aAAa5jE,IAAIppC,EAAE,GAAG,IAAI,GAAGvC,EAAEwvG,WAAW7jE,IAAIppC,EAAE,IAAI,IAAI,GAAGvC,EAAEwtG,UAAU7hE,IAAIppC,EAAE,IAAI,IAAI,GAAGvC,EAAEutG,WAAW5hE,IAAIppC,EAAE,IAAI,IAAI,GAAGvC,EAAE2vG,UAAUptG,EAAEvC,EAAE4tG,UAAU,IAAIgC,IAAItL,EAAE/hG,EAAE,IAAIhI,KAAK4d,IAAImsF,GAAG,EAAEA,GAAG/pG,KAAK0f,MAAMqqF,EAAE,cAAc,KAAK/pG,KAAKE,MAAM6pG,MAAMA,IAAI,IAAI,cAAc,EAAE,IAAI/hG,IAAI,CAAC,EAAE6nB,EAAEmhF,GAAGxrG,EAAEyrG,GAAG/qC,EAAE,SAASl+D,EAAEvC,EAAEoqB,GAAG,SAAS/qB,EAAEkD,GAAG,OAAOA,EAAEA,EAAEstG,eAAe5hG,MAAM,sBAAsB1L,EAAE,GAAG,KAAK,CAACA,KAAK,EAAEvC,KAAK,EAAEoqB,KAAK,EAAE,IAAIlpB,GAAE,IAAKi5C,MAAMmzD,cAAcnM,EAAE,IAAIhnD,KAAKj5C,EAAE,EAAE,GAAGnB,EAAE,IAAIo6C,KAAKj5C,EAAE,EAAE,GAAGA,EAAEigG,EAAEsO,oBAAoB,IAAI3vG,EAAEC,EAAE0vG,oBAAoB/hG,EAAEnT,KAAKu/B,IAAI54B,EAAEpB,GAAG0N,IAAIjL,GAAG,IAAI,GAAG,GAAGmL,EAAEi+B,IAAI3rC,GAAG,IAAI,GAAGhG,OAAOkH,GAAGpB,GAAGyC,EAAElD,EAAE8hG,GAAGnhG,EAAEX,EAAEU,GAAGwC,EAAEkpG,GAAGlpG,GAAGvC,EAAEyrG,GAAGzrG,GAAGF,EAAEoB,GAAGsM,IAAI4c,GAAG,IAAI,GAAG7nB,EAAEiL,IAAI4c,EAAE,GAAG,IAAI,GAAGpqB,IAAIwN,IAAI4c,GAAG,IAAI,GAAGpqB,EAAEwN,IAAI4c,EAAE,GAAG,IAAI,GAAG7nB,EAAE,EAAEmL,EAAE,KAAK21F,GAAG,GAAE,EAAGztE,EAAE,WAAW,EAAEv2B,EAAE,WAAW,OAAO86C,KAAKqB,KAAK,EAAEt6C,EAAE,KAAK,MAAMkxE,GAAG,EAAE,UAAUoE,EAAE,WAAW,OAAO,UAAU,EAAEj0E,EAAE,IAAI+5C,YAAYwzD,WAAWxzD,YAAYd,MAAM17C,EAAE,WAAW,OAAO8F,EAAE,eAAqBvL,OAAOF,UAAUG,mBAAmB,EAAE4kE,EAAE,SAAS38D,EAAEvC,EAAEoqB,EAAEuhB,GAAG,IAAI65D,GAAGuK,GAAG/vG,IAAI,EAAEisG,GAAG5xG,OAAO+vB,EAAEpqB,EAAE2rC,IAAI,GAAG,EAAEA,EAAE,EAAEA,EAAEvhB,EAAEuhB,IAAIsgE,GAAGtgE,GAAGtsC,IAAIW,EAAE2rC,IAAI,GAAG,OAAO8iE,GAAGlsG,GAAGytG,MAAM,KAAK/D,GAAG,EAAErpF,EAAE,SAASrgB,GAAGA,KAAK,EAAE,IAAIvC,EAAEoqB,IAAI/vB,OAAO,GAAGkI,GAAGvC,GAAG,WAAWuC,EAAE,OAAM,EAAG,IAAI,IAAIopC,EAAE,EAAE,GAAGA,EAAEA,GAAG,EAAE,CAAC,IAAIn+B,EAAExN,GAAG,EAAE,GAAG2rC,GAAGn+B,EAAEjT,KAAKC,IAAIgT,EAAEjL,EAAE,WAAW,IAAIlD,EAAE9E,KAAKiT,EAAEjT,KAAKu/B,IAAIv3B,EAAEiL,GAAGjL,EAAE,CAAClD,EAAEA,EAAE7E,IAAIu4B,KAAK1zB,EAAE,WAAWmO,GAAG,MAAMA,EAAE,OAAO,OAAOyjB,EAAErc,OAAOuvB,WAAW,QAAQ,GAAG,IAAIlT,EAAEg/E,KAAK5wG,GAAG+f,IAAI,IAAIle,EAAE,EAAE,MAAMqB,CAAC,CAAC,MAAMA,GAAG,CAACrB,OAAE,CAAM,CAAC,GAAGA,EAAE,OAAM,CAAE,CAAC,OAAM,CAAE,EAAEsgG,EAAEmL,GAAG1L,EAAE2L,GAAGxqB,EAAEwkB,GAAG3mG,EAAE4sG,GAAG9qB,EAAE+qB,GAAGrgF,EAAEsgF,GAAG/nB,EAAEioB,GAAGz/F,EAAEyjB,GAAGlxB,EAAE8jG,WAAWM,EAAEkJ,GAAGtlG,EAAE,SAASxF,EAAEvC,EAAEoqB,EAAEuhB,GAAG,OAAO0hE,GAAG9qG,IAAI,EAAEvC,IAAI,EAAEoqB,IAAI,EAAEuhB,IAAI,EAAE,IAAI,WAAW,SAASppC,EAAEA,EAAEvC,GAAG,OAAOuC,EAAEA,EAAE7J,QAAQ+1B,EAAElsB,EAAE,SAASA,GAAG,IAAIvC,EAAEuC,GAAG,IAAIA,MAAM,EAAE6nB,EAAE7nB,GAAGvC,GAAGuC,EAAEvC,KAAK,EAAE,OAAOuC,EAAErH,OAAOO,OAAO,CAAC,EAAE8G,IAAI2tG,iBAAiBlwG,EAAEuC,EAAE2tG,kBAAkB3tG,EAAE4tG,aAAanwG,EAAEuC,EAAE4tG,cAAc5tG,EAAE6tG,OAAOhmF,EAAE7nB,EAAE6tG,QAAQ7tG,EAAEqnE,UAAU5pE,EAAEuC,EAAEqnE,WAAWrnE,EAAEsnE,WAAWz/C,EAAE7nB,EAAEsnE,YAAYtnE,CAAC,CAAtO,CAAwOA,GAAGijG,GAAGuB,GAAGtmG,KAAKguB,EAAE4hF,IAAIlxC,EAAE1wC,EAAE6hF,GAAGp1E,EAAEqjC,QAAQ9vC,EAAE61E,GAAGhB,EAAEtjG,EAAEk/D,KAAI38D,CAAC,CAAC,IAAIvC,EAAE,CAACwN,EAAEkhG,IAAI,GAAGjK,IAAI1kG,EAAEwwG,gBAAgB,IAAI,OAAOxwG,EAAEwwG,gBAAgBvwG,EAAEuC,EAAE,CAAC,MAAMA,GAAGwgG,EAAE,sDAAsDxgG,GAAG4+F,EAAE5+F,EAAE,EAAC,SAAUA,EAAEvC,GAAG,IAAIoqB,EAAEi6E,EAAE,OAAOxB,GAAG,mBAAmB7K,YAAYwY,sBAAsB1L,GAAG16E,IAAIA,EAAEs3E,WAAW,YAAY97F,GAAG,mBAAmByxD,MAAM2tC,GAAG56E,EAAE7nB,EAAEvC,GAAGq3D,MAAMjtC,EAAE,CAAC66E,YAAY,gBAAgBppD,MAAMlQ,GAAGqsD,YAAYwY,qBAAqB7kE,EAAEppC,GAAGs5C,KAAK77C,GAAE,SAAU2rC,GAAG,OAAOo3D,EAAE,kCAAkCp3D,GAAGo3D,EAAE,6CAA6CiC,GAAG56E,EAAE7nB,EAAEvC,EAAG,KAAK,EAAhX,CAAkXA,GAAE,SAAUA,GAAGuC,EAAEvC,EAAEywG,SAASzwG,EAAErH,OAAQ,IAAGwsG,MAAMhE,EAAE,CAAl4B,GAAs4BphG,EAAEi0F,SAAS,CAACzxF,EAAEvC,KAAKD,EAAEi0F,SAASvlE,EAAE80E,GAAGhhG,EAAEvC,GAAGD,EAAE+5F,iBAAiB,CAACv3F,EAAEvC,KAAKD,EAAE+5F,iBAAiBrrE,EAAEvP,GAAG3c,EAAEvC,GAAGD,EAAE6yF,yBAAyB,CAACrwF,EAAEvC,EAAEoqB,EAAEuhB,EAAEn+B,EAAEnO,EAAE6B,EAAEigG,EAAErhG,EAAE4N,KAAK3N,EAAE6yF,yBAAyBnkE,EAAEuyE,GAAGz+F,EAAEvC,EAAEoqB,EAAEuhB,EAAEn+B,EAAEnO,EAAE6B,EAAEigG,EAAErhG,EAAE4N,GAAG3N,EAAEwzF,4BAA4B,CAAChxF,EAAEvC,KAAKD,EAAEwzF,4BAA4B9kE,EAAE81E,GAAGhiG,EAAEvC,GAAGD,EAAE2zF,6BAA6B,CAACnxF,EAAEvC,EAAEoqB,KAAKrqB,EAAE2zF,6BAA6BjlE,EAAEiL,GAAGn3B,EAAEvC,EAAEoqB,GAAGrqB,EAAEmzF,0BAA0B,CAAC3wF,EAAEvC,EAAEoqB,KAAKrqB,EAAEmzF,0BAA0BzkE,EAAE+1E,GAAGjiG,EAAEvC,EAAEoqB,GAAGrqB,EAAE4zF,0BAA0BpxF,IAAIxC,EAAE4zF,0BAA0BllE,EAAEiiF,IAAInuG,GAAGxC,EAAEu0F,kBAAkB,CAAC/xF,EAAEvC,EAAEoqB,KAAKrqB,EAAEu0F,kBAAkB7lE,EAAEkiF,IAAIpuG,EAAEvC,EAAEoqB,GAAGrqB,EAAE+0F,mBAAmBvyF,IAAIxC,EAAE+0F,mBAAmBrmE,EAAEwZ,IAAI1lC,GAAGxC,EAAEw0F,wBAAwB,CAAChyF,EAAEvC,EAAEoqB,KAAKrqB,EAAEw0F,wBAAwB9lE,EAAEmiF,IAAIruG,EAAEvC,EAAEoqB,GAAGrqB,EAAE20F,iBAAiB,CAACnyF,EAAEvC,KAAKD,EAAE20F,iBAAiBjmE,EAAEoiF,IAAItuG,EAAEvC,GAAGD,EAAE40F,kBAAkB,CAACpyF,EAAEvC,KAAKD,EAAE40F,kBAAkBlmE,EAAEqiF,IAAIvuG,EAAEvC,GAAGD,EAAE80F,SAAStyF,IAAIxC,EAAE80F,SAASpmE,EAAEsiF,IAAIxuG,GAAGxC,EAAEy1F,iBAAiB,CAACjzF,EAAEvC,EAAEoqB,EAAEuhB,EAAEn+B,EAAEnO,KAAKU,EAAEy1F,iBAAiB/mE,EAAEuiF,IAAIzuG,EAAEvC,EAAEoqB,EAAEuhB,EAAEn+B,EAAEnO,GAAGU,EAAE82F,kBAAkB,CAACt0F,EAAEvC,EAAEoqB,EAAEuhB,EAAEn+B,KAAKzN,EAAE82F,kBAAkBpoE,EAAEwiF,IAAI1uG,EAAEvC,EAAEoqB,EAAEuhB,EAAEn+B,GAAGzN,EAAEq3F,kBAAkB70F,IAAIxC,EAAEq3F,kBAAkB3oE,EAAEyiF,IAAI3uG,GAAGxC,EAAEmwF,qBAAqB,CAAC3tF,EAAEvC,EAAEoqB,EAAEuhB,KAAK5rC,EAAEmwF,qBAAqBzhE,EAAE0iF,IAAI5uG,EAAEvC,EAAEoqB,EAAEuhB,GAAG5rC,EAAE0wF,sBAAsB,CAACluF,EAAEvC,EAAEoqB,KAAKrqB,EAAE0wF,sBAAsBhiE,EAAE2iF,IAAI7uG,EAAEvC,EAAEoqB,GAAGrqB,EAAE2wF,sBAAsBnuF,IAAIxC,EAAE2wF,sBAAsBjiE,EAAE4iF,IAAI9uG,GAAGxC,EAAEuxG,kBAAkB/uG,IAAIxC,EAAEuxG,kBAAkB7iF,EAAE8iF,IAAIhvG,GAAGxC,EAAEu2F,cAAc,CAAC/zF,EAAEvC,EAAEoqB,KAAKrqB,EAAEu2F,cAAc7nE,EAAE+iF,IAAIjvG,EAAEvC,EAAEoqB,GAAGrqB,EAAEw2F,eAAe,CAACh0F,EAAEvC,EAAEoqB,EAAEuhB,KAAK5rC,EAAEw2F,eAAe9nE,EAAEgjF,IAAIlvG,EAAEvC,EAAEoqB,EAAEuhB,GAAG5rC,EAAEs3F,sBAAsB90F,IAAIxC,EAAEs3F,sBAAsB5oE,EAAEijF,IAAInvG,GAAGxC,EAAEi1F,mBAAmBzyF,IAAIxC,EAAEi1F,mBAAmBvmE,EAAEkjF,IAAIpvG,GAAGxC,EAAE6xG,mBAAmB,CAACrvG,EAAEvC,EAAEoqB,EAAEuhB,EAAEn+B,KAAKzN,EAAE6xG,mBAAmBnjF,EAAEojF,IAAItvG,EAAEvC,EAAEoqB,EAAEuhB,EAAEn+B,GAAGzN,EAAE02F,QAAQ,CAACl0F,EAAEvC,EAAEoqB,EAAEuhB,EAAEn+B,EAAEnO,EAAE6B,EAAEigG,KAAKphG,EAAE02F,QAAQhoE,EAAEqjF,IAAIvvG,EAAEvC,EAAEoqB,EAAEuhB,EAAEn+B,EAAEnO,EAAE6B,EAAEigG,GAAGphG,EAAEw3F,iBAAiBh1F,IAAIxC,EAAEw3F,iBAAiB9oE,EAAEsjF,IAAIxvG,GAAG,IAAIulG,GAAG/nG,EAAEiyG,cAAc,KAAKlK,GAAG/nG,EAAEiyG,cAAcvjF,EAAEwjF,MAAMvG,GAAG3rG,EAAEo0F,QAAQ5xF,IAAImpG,GAAG3rG,EAAEo0F,QAAQ1lE,EAAEyjF,IAAI3vG,GAAGxC,EAAE4wF,MAAMpuF,IAAIxC,EAAE4wF,MAAMliE,EAAE0jF,IAAI5vG,GAAGxC,EAAEqyG,sBAAsB,KAAKryG,EAAEqyG,sBAAsB3jF,EAAE4hF,MAAM,IAAI1B,GAAG5uG,EAAEsyG,yBAAyB,CAAC9vG,EAAEvC,EAAEoqB,EAAEuhB,EAAEn+B,EAAEnO,KAAKsvG,GAAG5uG,EAAEsyG,yBAAyB5jF,EAAE6jF,IAAI/vG,EAAEvC,EAAEoqB,EAAEuhB,EAAEn+B,EAAEnO,GAAGU,EAAEwyG,4BAA4B,KAAKxyG,EAAEwyG,4BAA4B9jF,EAAE+jF,MAAM,IAAIC,GAAG1G,GAAG,CAACxpG,EAAEvC,EAAEoqB,EAAEuhB,KAAKogE,GAAGt9E,EAAEikF,IAAInwG,EAAEvC,EAAEoqB,EAAEuhB,GAAGg8D,GAAGplG,IAAIolG,GAAGl5E,EAAEkkF,IAAIpwG,GAAGsnG,GAAG9pG,EAAE6yG,yBAAyBrwG,IAAIsnG,GAAG9pG,EAAE6yG,yBAAyBnkF,EAAEokF,IAAItwG,GAAG0oG,GAAGlrG,EAAE+yG,2BAA2B,KAAK7H,GAAGlrG,EAAE+yG,2BAA2BrkF,EAAEskF,MAAMnD,GAAGrtG,IAAIqtG,GAAGnhF,EAAEukF,IAAIzwG,GAAGymG,GAAG,CAACzmG,EAAEvC,KAAKgpG,GAAGv6E,EAAEwkF,IAAI1wG,EAAEvC,GAAG4rG,GAAG,KAAKA,GAAGn9E,EAAEykF,MAAMjK,GAAG1mG,IAAI0mG,GAAGx6E,EAAE0kF,IAAI5wG,GAAGupG,GAAGvpG,IAAIupG,GAAGr9E,EAAE2kF,IAAI7wG,GAAG,SAAS8wG,KAAK,SAAS9wG,IAAI,IAAIkwG,KAAKA,IAAG,EAAG1yG,EAAEuzG,WAAU,GAAI/P,KAAK7pE,GAAGovE,GAAG5tE,GAAGh6B,EAAEnB,GAAGA,EAAEwzG,sBAAsBxzG,EAAEwzG,wBAAwB75E,GAAG,CAAC,GAAG35B,EAAEyzG,QAAQ,IAAI,mBAAmBzzG,EAAEyzG,UAAUzzG,EAAEyzG,QAAQ,CAACzzG,EAAEyzG,UAAUzzG,EAAEyzG,QAAQn5G,QAAQ,CAAC,IAAIkI,EAAExC,EAAEyzG,QAAQ7wF,QAAQwhF,EAAE5lC,QAAQh8D,EAAE,CAACumG,GAAG3E,EAAE,CAAC,CAAC,KAAK,EAAEjlF,GAAG,GAAGwa,EAAEx4B,EAAEnB,GAAG25B,GAAGovE,GAAG5tE,GAAGu4E,YAAY1zG,OAAO,CAAC,GAAGA,EAAE2zG,OAAO,IAAI,mBAAmB3zG,EAAE2zG,SAAS3zG,EAAE2zG,OAAO,CAAC3zG,EAAE2zG,SAAS3zG,EAAE2zG,OAAOr5G,QAAQ6pG,EAAE3lC,QAAQx+D,EAAE2zG,OAAO/wF,SAASmmF,GAAG5E,GAAG,EAAEhlF,IAAInf,EAAE4zG,WAAW5zG,EAAE4zG,UAAU,cAAc/rE,YAAW,WAAYA,YAAW,WAAY7nC,EAAE4zG,UAAU,GAAI,GAAE,GAAGpxG,GAAI,GAAE,IAAIA,IAAI,CAAC,CAAC,GAAGxC,EAAE6zG,iBAAiBxP,EAAErkG,EAAE8jG,WAAW5yE,EAAElxB,EAAE8pE,WAAWiiC,GAAG/rG,EAAE6pE,UAAUgiC,GAAG7rG,EAAEgqE,aAAak/B,GAAGlpG,EAAEqqE,aAAam8B,GAAGxmG,EAAE25F,aAAasQ,GAAGjqG,EAAE05F,gBAAgBqQ,GAAG/pG,EAAE8zG,WAAWxO,GAAGtlG,EAAEu5F,QAAQkM,GAAGhB,EAAE,SAASjiG,IAAIkwG,IAAIY,KAAKZ,KAAKjO,EAAEjiG,EAAE,EAAExC,EAAE+zG,QAAQ,IAAI,mBAAmB/zG,EAAE+zG,UAAU/zG,EAAE+zG,QAAQ,CAAC/zG,EAAE+zG,UAAU,EAAE/zG,EAAE+zG,QAAQz5G,QAAQ0F,EAAE+zG,QAAQ1tE,KAAVrmC,GAAkB,OAAOszG,KAAK9wG,EAAE6+F,KAAK,GAAqDzoG,EAAOD,QAAQ6J,C,sBCC5rtB,IACMs+F,WADFkT,GACElT,WAAiC,oBAAbh4D,UAA4BA,SAASulD,cAAgBvlD,SAASulD,cAAc7qD,SAAMtlC,EAChF,oBAAf6iG,aAA4BD,WAAaA,YAAcC,YAC3D,SACAkT,EAAY,CAAC,GAEtB,IAAgBp+E,EAAEovD,EAAdziF,EAAEyxG,EAAczxG,EAAE6+F,MAAM,IAAIvmG,SAAQ,CAAC2S,EAAE5H,KAAKgwB,EAAEpoB,EAAEw3E,EAAEp/E,KAAI,IAAuN4wE,EAAEp3D,EAAEqP,EAAvN21E,EAAElpG,OAAOO,OAAO,CAAC,EAAE8G,GAAGiM,EAAE,iBAAiBkiG,EAAG,iBAAiBpW,OAAO13E,EAAE,mBAAmB0+E,cAAcqP,EAAG,iBAAiBz5C,SAAS,iBAAiBA,QAAQ97D,UAAU,iBAAiB87D,QAAQ97D,SAAS6Q,KAAKw0D,EAAE,GAC9Q,GAAGkwC,EAAG,CAAC,IAAIsD,EAAG,EAAQ,MAAMhjF,EAAE,EAAQ,KAAQwvC,EAAE79C,EAAEqO,EAAEwwE,QAAQhhC,GAAG,IAAIy4B,UAAU,IAAI1iB,EAAE,CAAChpE,EAAE5H,KAAK4H,EAAEA,EAAEk0F,WAAW,WAAW,IAAI3I,IAAIvrF,GAAGyjB,EAAE0wE,UAAUn0F,GAAUymG,EAAGrS,aAAap0F,EAAE5H,OAAE,EAAO,SAAS6oB,EAAEjhB,KAAIA,EAAEgpE,EAAEhpE,GAAE,IAAMoH,SAASpH,EAAE,IAAIG,WAAWH,IAAWA,GAAG4R,EAAE,CAAC5R,EAAE5H,EAAE8H,EAAE5N,GAAE,KAAM0N,EAAEA,EAAEk0F,WAAW,WAAW,IAAI3I,IAAIvrF,GAAGyjB,EAAE0wE,UAAUn0F,GAAGymG,EAAG78C,SAAS5pD,EAAE1N,OAAE,EAAO,QAAO,CAACG,EAAEohG,KAAKphG,EAAEyN,EAAEzN,GAAG2F,EAAE9F,EAAEuhG,EAAEzsF,OAAOysF,EAAC,GAAE,GAAI9+F,EAAEs/F,aAAa,EAAE3qC,QAAQ4qC,KAAKznG,SAASmU,EAAE0oD,QAAQ4qC,KAAK,GAAGpzF,QAAQ,MAAM,MAAMwoD,QAAQ4qC,KAAKr4F,MAAM,GAAGlH,EAAEy/F,QAAQ,IAAI,4BAA4B,MAAS0O,GAChhB9tF,KAAEA,EAAE69C,EAAE3nE,KAAK6oC,SAASwgE,KAAK,oBAAoBt5D,UAAUA,SAASulD,gBAAgB3tB,EAAE53B,SAASulD,cAAc7qD,KAAKs9D,aAAapgC,EAAEogC,YAAmCpgC,EAAvB,IAAIA,EAAEn4D,QAAQ,SAAWm4D,EAAE6tB,OAAO,EAAE7tB,EAAE/xD,QAAQ,SAAS,IAAI6/E,YAAY,KAAK,GAAK,GAAG/X,EAAEhpE,IAAI,IAAI5H,EAAE,IAAIw8F,eAA+C,OAAhCx8F,EAAEy8F,KAAK,MAAM70F,GAAE,GAAI5H,EAAE08F,KAAK,MAAa18F,EAAE28F,cAAc3/E,IAAI6L,EAAEjhB,IAAI,IAAI5H,EAAE,IAAIw8F,eAA4E,OAA7Dx8F,EAAEy8F,KAAK,MAAM70F,GAAE,GAAI5H,EAAE48F,aAAa,cAAc58F,EAAE08F,KAAK,MAAa,IAAI30F,WAAW/H,EAAEwrF,SAAQ,GAAIhyE,EAAE,CAAC5R,EAAE5H,EAAE8H,KAAK,IAAI5N,EAAE,IAAIsiG,eAAetiG,EAAEuiG,KAAK,MAAM70F,GAAE,GAAI1N,EAAE0iG,aACjf,cAAc1iG,EAAE2iG,OAAO,KAAK,KAAK3iG,EAAEuxC,QAAQ,GAAGvxC,EAAEuxC,QAAQvxC,EAAEsxF,SAASxrF,EAAE9F,EAAEsxF,UAAU1jF,GAAE,EAAG5N,EAAE4iG,QAAQh1F,EAAE5N,EAAEwiG,KAAK,KAAI,GAAG,IAAmJgB,EAA/Ir7D,EAAG1lC,EAAEugG,OAAOhqD,QAAQ19B,IAAI4+B,KAAKlB,SAASqqD,EAAE5gG,EAAEygG,UAAUlqD,QAAQvZ,MAAMya,KAAKlB,SAAS59C,OAAOO,OAAO8G,EAAE6hG,GAAGA,EAAE,KAAK7hG,EAAEs/F,cAAcrzF,EAAEjM,EAAEs/F,aAAmBt/F,EAAE2gG,aAAaI,EAAE/gG,EAAE2gG,YAA8B3gG,EAAE6gG,cAAkB,iBAAiBpL,aAAamM,EAAE,mCAAmC,IAAI/hB,EAAE2e,EAAQ0D,EAAEvlC,EAAEglC,EAAEjlC,EAAZ2xC,GAAG,EACxZ,SAASC,IAAK,IAAIrjG,EAAE40E,EAAExtE,OAAOrS,EAAEkmE,MAAMg8B,EAAE,IAAI19D,UAAUv5B,GAAGjL,EAAEihG,OAAO,IAAI18D,WAAWt5B,GAAGjL,EAAEiyF,OAAO0P,EAAE,IAAI/rE,WAAW3qB,GAAGjL,EAAE+mE,OAAOpK,EAAE,IAAIvxD,WAAWH,GAAGjL,EAAEkhG,QAAQ,IAAIz8D,YAAYx5B,GAAGjL,EAAE2mE,QAAQjK,EAAE,IAAIxxD,YAAYD,GAAGjL,EAAEmhG,QAAQ,IAAIzuF,aAAazH,GAAGjL,EAAEohG,QAAQ,IAAI18D,aAAaz5B,EAAE,CAAC,IAAIsjG,EAAG,GAAGE,EAAG,GAAGC,EAAG,GAAG,SAASC,IAAK,IAAI1jG,EAAEjL,EAAEmxG,OAAO/wF,QAAQmuF,EAAGvyC,QAAQ/wD,EAAE,CAAC,IAC7F62F,EADiGllC,EAAE,EAAEqiC,EAAE,KAAKP,EAAE,KAC/V,SAASkD,EAAE32F,GAA6I,MAAvIjL,EAAEqiG,SAAQriG,EAAEqiG,QAAQp3F,GAAsB21F,EAAnB31F,EAAE,WAAWA,EAAE,KAASojG,GAAG,EAAGpjG,EAAE,IAAIwqF,YAAY6M,aAAar3F,EAAE,4CAA4Cw3E,EAAEx3E,GAASA,CAAE,CAAC,SAAS2jG,EAAG3jG,GAAG,OAAOA,EAAEk0F,WAAW,wCAAwC,CAAyB,IAAIyP,EAAtB9M,EAAE,iBAA0B,CAAC,IAAI+M,EAAG/M,EAAEA,EAAE9hG,EAAEo2F,WAAWp2F,EAAEo2F,WAAWyY,EAAG3wC,GAAGA,EAAE2wC,CAAE,CAAC,SAASC,EAAG7jG,GAAG,GAAGA,GAAG62F,GAAGf,EAAE,OAAO,IAAI31F,WAAW21F,GAAG,GAAG70E,EAAE,OAAOA,EAAEjhB,GAAG,KAAK,iDAAkD,CAClG,SAASgkG,EAAGhkG,EAAE5H,EAAE8H,GAAG,OAA5W,SAAYF,GAAG,IAAI81F,IAAIoN,GAAI9tF,GAAG,CAAC,GAAG,mBAAmBy0C,QAAQ7pD,EAAEk0F,WAAW,WAAW,OAAOrqC,MAAM7pD,EAAE,CAACy3F,YAAY,gBAAgBppD,MAAKj2C,IAAI,IAAIA,EAAEs/F,GAAG,KAAK,uCAAuC13F,EAAE,IAAI,OAAO5H,EAAE0xD,aAAY,IAAI6tC,OAAM,IAAIkM,EAAG7jG,KAAI,GAAG4R,EAAE,OAAO,IAAIvkB,SAAQ,CAAC+K,EAAE8H,KAAK0R,EAAE5R,GAAE1N,GAAG8F,EAAE,IAAI+H,WAAW7N,KAAI4N,EAAC,GAAG,CAAC,OAAO7S,QAAQC,UAAU+gD,MAAK,IAAIw1D,EAAG7jG,IAAG,CAA2B+jG,CAAG/jG,GAAGquC,MAAK/7C,GAAGk4F,YAAYoN,YAAYtlG,EAAE8F,KAAIi2C,MAAK/7C,GAAGA,IAAG+7C,KAAKnuC,GAAE5N,IAAIqjG,EAAE,0CAA0CrjG,GAAGqkG,EAAErkG,EAAC,GAAG,CAC3H,IAAIijG,EAAEF,EAAEr1F,IAAI,KAAK,EAAEA,EAAEnT,QAAQmT,EAAEmV,OAAFnV,CAAUjL,EAAC,EACvZ,SAASmvG,EAAGlkG,GAAG9R,KAAKu2G,GAAGzkG,EAAE,GAAG9R,KAAKm3G,GAAG,SAASjtG,GAAGq5D,EAAEvjE,KAAKu2G,GAAG,GAAG,IAAI,GAAGrsG,CAAC,EAAElK,KAAK40G,GAAG,SAAS1qG,GAAGq5D,EAAEvjE,KAAKu2G,GAAG,GAAG,IAAI,GAAGrsG,CAAC,EAAElK,KAAKy2G,GAAG,SAASvsG,EAAE8H,GAAGhS,KAAK20G,KAAK30G,KAAKm3G,GAAGjtG,GAAGlK,KAAK40G,GAAG5iG,EAAE,EAAEhS,KAAK20G,GAAG,WAAWpxC,EAAEvjE,KAAKu2G,GAAG,IAAI,IAAI,GAAG,CAAC,CAAC,CACnN,IAG+IjR,EAHjI8Q,EAAG,oBAAoBxvC,YAAY,IAAIA,YAAY,aAAQ,EAAOyvC,EAAG,CAACvkG,EAAE5H,EAAE8H,KAAY,IAAI5N,GAAX8F,KAAK,GAAU8H,EAAE,IAAIA,EAAE9H,EAAE4H,EAAEE,MAAMA,GAAG5N,MAAM4N,EAAE,GAAG,GAAGA,EAAE9H,GAAG4H,EAAEoH,QAAQk9F,EAAG,OAAOA,EAAG7kG,OAAOO,EAAE4H,SAASxP,EAAE8H,IAAI,IAAI5N,EAAE,GAAG8F,EAAE8H,GAAG,CAAC,IAAIzN,EAAEuN,EAAE5H,KAAK,GAAK,IAAF3F,EAAM,CAAC,IAAIohG,EAAS,GAAP7zF,EAAE5H,KAAQ,GAAG,MAAQ,IAAF3F,GAAOH,GAAGmgF,OAAOC,cAAgB,GAAFjgF,IAAO,EAAEohG,OAAO,CAAC,IAAItf,EAAS,GAAPv0E,EAAE5H,KAAwE,OAAhE3F,EAAE,MAAQ,IAAFA,IAAU,GAAFA,IAAO,GAAGohG,GAAG,EAAEtf,GAAK,EAAF9hF,IAAM,GAAGohG,GAAG,GAAGtf,GAAG,EAAS,GAAPv0E,EAAE5H,MAAgB9F,GAAGmgF,OAAOC,aAAajgF,IAAIA,GAAG,MAAMH,GAAGmgF,OAAOC,aAAa,MAAMjgF,GAAG,GAAG,MAAQ,KAAFA,GAAQ,CAAC,MAAMH,GAAGmgF,OAAOC,aAAajgF,EAAE,CAAC,OAAOH,GACvgB6iG,EAAE,CAACn1F,EAAE5H,KAAK4H,KAAK,GAAGukG,EAAG7yC,EAAE1xD,EAAE5H,GAAG,GAAGs7F,EAAE1zF,IAAI,IAAI,IAAI5H,EAAE,EAAE8H,EAAE,EAAEA,EAAEF,EAAEnT,SAASqT,EAAE,CAAC,IAAI5N,EAAE0N,EAAE2yE,WAAWzyE,GAAG,KAAK5N,EAAE8F,IAAI,MAAM9F,EAAE8F,GAAG,EAAE,OAAO9F,GAAG,OAAOA,GAAG8F,GAAG,IAAI8H,GAAG9H,GAAG,CAAC,CAAC,OAAOA,GAAG0+F,EAAE,CAAC92F,EAAE5H,EAAE8H,EAAE5N,KAAY,KAAK,EAAEA,GAAG,OAAO,EAAE,IAAIG,EAA9ByN,KAAK,EAA6B5N,EAAE4N,EAAE5N,EAAE,EAAE,IAAI,IAAIuhG,EAAE,EAAEA,EAAE7zF,EAAEnT,SAASgnG,EAAE,CAAC,IAAItf,EAAEv0E,EAAE2yE,WAAWkhB,GAAgF,GAA1E,OAAOtf,GAAG,OAAOA,IAA2BA,EAAE,QAAU,KAAFA,IAAS,IAAM,KAA3Cv0E,EAAE2yE,aAAakhB,IAAoC,KAAKtf,EAAE,CAAC,GAAGr0E,GAAG5N,EAAE,MAAM8F,EAAE8H,MAAM,GAAGq0E,CAAC,KAAK,CAAC,GAAG,MAAMA,EAAE,CAAC,GAAGr0E,EAAE,GAAG5N,EAAE,MAAM8F,EAAE8H,MAAM,GAAG,IAAIq0E,GAAG,CAAC,KAAK,CAAC,GAAG,OAAOA,EAAE,CAAC,GAAGr0E,EAAE,GAAG5N,EAAE,MAAM8F,EAAE8H,MAAM,GAAG,IAAIq0E,GAAG,EAAE,KAAK,CAAC,GAAGr0E,EAAE,GACnf5N,EAAE,MAAM8F,EAAE8H,MAAM,GAAG,IAAIq0E,GAAG,GAAGn8E,EAAE8H,MAAM,GAAG,IAAIq0E,GAAG,GAAG,EAAE,CAACn8E,EAAE8H,MAAM,GAAG,IAAIq0E,GAAG,EAAE,EAAE,CAACn8E,EAAE8H,MAAM,GAAG,IAAM,GAAFq0E,CAAI,CAAC,CAAY,OAAXn8E,EAAE8H,IAAI,GAAG,EAASA,EAAEzN,GAAGsjG,EAAE/1F,GAAG,GAAIA,EAAE,IAAI,GAAIA,EAAE,KAAK,GAAIA,EAAE,KAAKykG,EAAG,CAAC,EAAE,GAAG,GAAG,GAAG,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAAKC,EAAG,CAAC,EAAE,GAAG,GAAG,GAAG,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAAKM,EAAGhlG,IAAI,IAAI5H,EAAEs7F,EAAE1zF,GAAG,EAAEE,EAAE4kG,GAAG1sG,GAAiB,OAAd8H,GAAG42F,EAAE92F,EAAE0xD,EAAExxD,EAAE9H,GAAU8H,GAAGwR,EAAE,CAAC,EAAEwzF,GAAG,KAAK,IAAI1R,EAAE,CAAC,IAChSp7F,EADoS4H,EAAE,CAAC4+F,KAAK,WAAWC,QAAQ,WAAWC,KAAK,IAAIC,IAAI,IAAIC,KAAK,iBAAiBC,MAAM,iBAAiBtyG,WAAWA,UAAUuyG,WAAWvyG,UAAUuyG,UAAU,IAAI,KAAKh+F,QAAQ,IAClf,KAAK,SAASgrB,EAAElrB,GAAG,kBAAoB,IAAI5I,KAAKsZ,OAAE,IAASA,EAAEtZ,UAAU4H,EAAE5H,GAAG4H,EAAE5H,GAAGsZ,EAAEtZ,GAAG,IAAI8H,EAAE,GAAG,IAAI9H,KAAK4H,EAAEE,EAAEjN,KAAK,GAAGmF,KAAK4H,EAAE5H,MAAMo7F,EAAEtzF,CAAC,CAAC,OAAOszF,GAAK2R,GAAG,CAAC,KAAK,GAAG,IAAIE,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAIE,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAC/O,SAASE,GAAGzlG,EAAE5H,EAAE8H,EAAE5N,GAAG,SAASG,EAAE8H,EAAE4jC,EAAEhS,GAAG,IAAI5xB,EAAE,iBAAiBA,EAAEA,EAAEmlC,WAAWnlC,GAAG,GAAGA,EAAE1N,OAAOsxC,GAAG5jC,EAAE4xB,EAAE,GAAG5xB,EAAE,OAAOA,CAAC,CAAC,SAASs5F,EAAEt5F,EAAE4jC,GAAG,OAAO1rC,EAAE8H,EAAE4jC,EAAE,IAAI,CAAC,SAASo2C,EAAEh6E,EAAE4jC,GAAG,SAAShS,EAAEw4E,GAAI,OAAO,EAAEA,GAAI,EAAE,EAAEA,EAAG,EAAE,CAAC,CAAC,IAAI//B,EAAmH,OAAjH,KAAKA,EAAEz4C,EAAE5xB,EAAEulG,cAAc3hE,EAAE2hE,iBAAiB,KAAKl7B,EAAEz4C,EAAE5xB,EAAEwlG,WAAW5hE,EAAE4hE,eAAen7B,EAAEz4C,EAAE5xB,EAAEylG,UAAU7hE,EAAE6hE,YAAmBp7B,CAAC,CAAC,SAAShoD,EAAEriB,GAAG,OAAOA,EAAE0lG,UAAU,KAAK,EAAE,OAAO,IAAItzD,KAAKpyC,EAAEulG,cAAc,EAAE,GAAG,IAAI,KAAK,EAAE,OAAOvlG,EAAE,KAAK,EAAE,OAAO,IAAIoyC,KAAKpyC,EAAEulG,cAAc,EAAE,GAAG,KAAK,EAAE,OAAO,IAAInzD,KAAKpyC,EAAEulG,cAChf,EAAE,GAAG,KAAK,EAAE,OAAO,IAAInzD,KAAKpyC,EAAEulG,cAAc,EAAE,GAAG,KAAK,EAAE,OAAO,IAAInzD,KAAKpyC,EAAEulG,cAAc,EAAE,GAAG,IAAI,KAAK,EAAE,OAAO,IAAInzD,KAAKpyC,EAAEulG,cAAc,EAAE,GAAG,IAAI,CAAC,SAAS7gF,EAAE1kB,GAAG,IAAI4jC,EAAE5jC,EAAE4pG,GAAG,IAAI5pG,EAAE,IAAIoyC,KAAK,IAAKA,KAAKpyC,EAAE8pG,GAAG,KAAK,EAAE,GAAIjE,WAAW,EAAEjiE,GAAG,CAAC,IAAIhS,EAAE5xB,EAAEwlG,WAAWn7B,GAAGmxB,EAAEx7F,EAAEulG,eAAeuF,GAAGE,IAAIp5E,GAAG,KAAGgS,EAAEymC,EAAErqE,EAAEylG,WAAoH,CAACzlG,EAAE8lG,QAAQ9lG,EAAEylG,UAAU7hE,GAAG,KAAK,CAAzIA,GAAGymC,EAAErqE,EAAEylG,UAAU,EAAEzlG,EAAE8lG,QAAQ,GAAG,GAAGl0E,EAAE5xB,EAAE+lG,SAASn0E,EAAE,IAAI5xB,EAAE+lG,SAAS,GAAG/lG,EAAEgmG,YAAYhmG,EAAEulG,cAAc,GAAwC,CACxa,OADya3zE,EAAE,IAAIwgB,KAAKpyC,EAAEulG,cAAc,EAAE,EAAE,GAAG3hE,EAAEvhB,EAAE,IAAI+vB,KAAKpyC,EAAEulG,cACve,EAAE,IAAI3zE,EAAEvP,EAAEuP,GAAU,GAAGooD,EAAEp2C,EAAE5jC,GAAG,GAAGg6E,EAAEpoD,EAAE5xB,GAAGA,EAAEulG,cAAc,EAAEvlG,EAAEulG,cAAcvlG,EAAEulG,cAAc,CAAC,CAAC9/F,KAAK,EAAE5H,KAAK,EAAE8H,KAAK,EAAS,IAAI1N,EAAEkkG,EAAI,IAAjBpkG,KAAK,IAAgB,IAAI,GACyE,IAAI,IAAIqhG,KAD9ErhG,EAAE,CAAC4yG,GAAGxO,EAAEpkG,GAAG,IAAI,GAAG0yG,GAAGtO,EAAEpkG,EAAE,GAAG,IAAI,GAAGgyG,GAAG5N,EAAEpkG,EAAE,GAAG,IAAI,GAAGoyG,GAAGhO,EAAEpkG,EAAE,IAAI,IAAI,GAAGiyG,GAAG7N,EAAEpkG,EAAE,IAAI,IAAI,GAAG+xG,GAAG3N,EAAEpkG,EAAE,IAAI,IAAI,GAAGuxG,GAAGnN,EAAEpkG,EAAE,IAAI,IAAI,GAAG6xG,GAAGzN,EAAEpkG,EAAE,IAAI,IAAI,GAAGizG,GAAG7O,EAAEpkG,EAAE,IAAI,IAAI,GAAGwyG,GAAGpO,EAAEpkG,EAAE,IAAI,IAAI,GAAG6yG,GAAG3yG,EAAE2iG,EAAE3iG,GAAG,IAAI0N,EAAEi1F,EAAEj1F,GAAG1N,EAAE,CAAC,KAAK,uBAAuB,KAAK,WAAW,KAAK,WAAW,KAAK,KAAK,KAAK,cAAc,KAAK,QAAQ,KAAK,WAAW,KAAK,WAAW,KAAK,WAAW,MAAM,KACnf,MAAM,KAAK,MAAM,WAAW,MAAM,WAAW,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,MAAqB0N,EAAEA,EAAEgB,QAAQ,IAAIE,OAAOuyF,EAAE,KAAKnhG,EAAEmhG,IAAI,IAAIkP,EAAG,2DAA2DjiG,MAAM,KAAKkiG,EAAG,wFAAwFliG,MAAM,KAE2D,IAAI+yF,KAF1DnhG,EAAE,CAAC,KAAK+H,GAAGsoG,EAAGtoG,EAAEspG,IAAIlzD,UAAU,EAAE,GAAG,KAAKp2C,GAAGsoG,EAAGtoG,EAAEspG,IAAI,KAAKtpG,GAClfuoG,EAAGvoG,EAAEgqG,IAAI5zD,UAAU,EAAE,GAAG,KAAKp2C,GAAGuoG,EAAGvoG,EAAEgqG,IAAI,KAAKhqG,GAAGs5F,GAAGt5F,EAAE8pG,GAAG,MAAM,IAAI,EAAE,GAAG,KAAK9pG,GAAGs5F,EAAEt5F,EAAEmqG,GAAG,GAAG,KAAKnqG,GAAG9H,EAAE8H,EAAEmqG,GAAG,EAAE,KAAK,KAAKnqG,GAAG0kB,EAAE1kB,GAAGmlC,WAAWiR,UAAU,GAAG,KAAKp2C,GAAG0kB,EAAE1kB,GAAG,KAAKA,GAAGs5F,EAAEt5F,EAAE+pG,GAAG,GAAG,KAAK/pG,IAAW,IAAPA,EAAEA,EAAE+pG,IAAQ/pG,EAAE,GAAG,GAAGA,IAAIA,GAAG,IAAWs5F,EAAEt5F,EAAE,IAAI,KAAKA,IAAI,IAAI,IAAI4jC,EAAE,EAAEhS,EAAE,EAAEA,GAAG5xB,EAAEgqG,GAAG,EAAEpmE,IAAI43D,EAAEx7F,EAAE8pG,GAAG,MAAMgB,GAAGE,IAAIp5E,MAAM,OAAO0nE,EAAEt5F,EAAEmqG,GAAGvmE,EAAE,EAAC,EAAG,KAAK5jC,GAAGs5F,EAAEt5F,EAAEgqG,GAAG,EAAE,GAAG,KAAKhqG,GAAGs5F,EAAEt5F,EAAEyqG,GAAG,GAAG,KAAK,IAAI,KAAK,KAAKzqG,GAAG,GAAGA,EAAE+pG,IAAI,GAAG/pG,EAAE+pG,GAAG,KAAK,KAAK,KAAK/pG,GAAGs5F,EAAEt5F,EAAE2qG,GAAG,GAAG,KAAK,IAAI,KAAK,KAAK3qG,GAAGA,EAAEspG,IAAI,EAAE,KAAKtpG,GAAGs5F,EAAE9mG,KAAK0f,OAAOlS,EAAE4pG,GAAG,EAAE5pG,EAAEspG,IAAI,GAAG,GAAG,KAAKtpG,IACpf,IAAI4jC,EAAEpxC,KAAK0f,OAAOlS,EAAE4pG,GAAG,GAAG5pG,EAAEspG,GAAG,GAAG,GAAG,GAA+B,GAA5B,IAAItpG,EAAEspG,GAAG,IAAItpG,EAAE4pG,GAAG,GAAG,GAAGhmE,IAAOA,EAAE,IAAIA,IAAwB,IAApBhS,GAAG5xB,EAAEspG,GAAG,IAAItpG,EAAE4pG,IAAI,IAAQ,GAAGh4E,GAAG4pE,EAAEx7F,EAAE8pG,MAAMlmE,EAAE,QAAQ,CAACA,EAAE,GAAG,IAAIhS,GAAG5xB,EAAEspG,GAAG,EAAEtpG,EAAE4pG,GAAG,GAAG,GAAG,GAAGh4E,GAAG,GAAGA,GAAG4pE,EAAEx7F,EAAE8pG,GAAG,IAAI,KAAKlmE,GAAG,CAAC,OAAO01D,EAAE11D,EAAE,EAAC,EAAG,KAAK5jC,GAAGA,EAAEspG,GAAG,KAAKtpG,GAAGs5F,EAAE9mG,KAAK0f,OAAOlS,EAAE4pG,GAAG,GAAG5pG,EAAEspG,GAAG,GAAG,GAAG,GAAG,GAAG,KAAKtpG,IAAIA,EAAE8pG,GAAG,MAAM3kE,WAAWiR,UAAU,GAAG,KAAKp2C,GAAGA,EAAE8pG,GAAG,KAAK,KAAK9pG,IAAW,IAAI4jC,EAAE,IAAb5jC,EAAEA,EAAEuqG,IAA+B,OAAjBvqG,EAAExN,KAAK4d,IAAIpQ,GAAG,IAAU4jC,EAAE,IAAI,KAAKs0C,OAAO,QAAQl4E,EAAE,GAAG,IAAIA,EAAE,KAAK0B,OAAO,EAAC,EAAG,KAAK1B,GAAGA,EAAE4qG,GAAG,KAAK,IAAI,KAAKjlG,EAAEA,EAAEgB,QAAQ,MAAM,QAAqB1O,EAAE0N,EAAEmqE,SAASspB,KACpgBzzF,EAAEA,EAAEgB,QAAQ,IAAIE,OAAOuyF,EAAE,KAAKnhG,EAAEmhG,GAAGrhG,KAAsC,OAARqhG,EAPiL,SAAY3zF,GAAG,IAAI5H,EAAExG,MAAM8hG,EAAE1zF,GAAG,GAAqB,OAAlB82F,EAAE92F,EAAE5H,EAAE,EAAEA,EAAEvL,QAAeuL,CAAC,CAO5OotG,CAA3BtlG,EAAEA,EAAEgB,QAAQ,QAAQ,MAAgByyF,EAAE9mG,OAAOuL,EAAS,GAAE6+F,EAAE5nG,IAAIskG,EAAE3zF,IAAI,GAAU2zF,EAAE9mG,OAAO,EAAC,CACjI,IAAI84G,GAAG,CAAC3lG,EAAE,SAASA,EAAE5H,EAAE8H,GAAgD,MAAtC,IAAKgkG,EAAZlkG,KAAK,GAAc2kG,GAAGvsG,IAAI,EAAE8H,IAAI,GAAMF,CAAgB,EAAEjL,EAAE,WAAW,OAAO,CAAC,EAAE6/E,EAAE,WAAW,EAAEx/D,EAAE,WAAW,EAAEwvD,EAAE,WAAW,EAAEx8C,EAAE,WAAW,OAAO,CAAC,EAAE0tE,EAAE,WAAW,EAAElkF,EAAE,WAAW,EAAE+jF,EAAE,WAAW,EAAEljG,EAAE,WAAW,EAAEwgE,EAAE,WAAW,EAAEjyD,EAAE,WAAW,EAAE21F,EAAE,WAAW,EAAE13E,EAAE,WAAW,EAAEu4D,EAAE,KAAI,EAAG9jF,EAAE,SAASsM,EAAE5H,EAAE8H,GAAGF,EAAE5H,EAAE,UAAU,EAAE,UAAU4H,GAAGA,IAAI,GAAG,WAAW5H,EAAEipG,IAAInhG,KAAK,EAAEF,EAAE,IAAI2sC,KAAK,IAAI3sC,GAAG02F,EAAEx2F,GAAG,IAAI,GAAGF,EAAEshG,gBAAgB5K,EAAEx2F,EAAE,GAAG,IAAI,GAAGF,EAAEuhG,gBAAgB7K,EAAEx2F,EAAE,GAAG,IAAI,GAAGF,EAAEwhG,cAAc9K,EAAEx2F,EAAE,IAAI,IAClf,GAAGF,EAAEyhG,aAAa/K,EAAEx2F,EAAE,IAAI,IAAI,GAAGF,EAAE0hG,cAAchL,EAAEx2F,EAAE,IAAI,IAAI,GAAGF,EAAE2hG,iBAAiB,KAAKjL,EAAEx2F,EAAE,IAAI,IAAI,GAAGF,EAAE4hG,YAAYlL,EAAEx2F,EAAE,IAAI,IAAI,IAAIF,EAAEogG,UAAUzzD,KAAKk1D,IAAI7hG,EAAE2hG,iBAAiB,EAAE,EAAE,EAAE,EAAE,EAAE,IAAI,MAAM,CAAC,EAAEx1E,EAAE,SAASnsB,EAAE5H,EAAE8H,GAAGF,EAAE5H,EAAE,UAAU,EAAE,UAAU4H,GAAGA,IAAI,GAAG,WAAW5H,EAAEipG,IAAInhG,KAAK,EAAEF,EAAE,IAAI2sC,KAAK,IAAI3sC,GAAG02F,EAAEx2F,GAAG,IAAI,GAAGF,EAAE8hG,aAAapL,EAAEx2F,EAAE,GAAG,IAAI,GAAGF,EAAE+hG,aAAarL,EAAEx2F,EAAE,GAAG,IAAI,GAAGF,EAAEgiG,WAAWtL,EAAEx2F,EAAE,IAAI,IAAI,GAAGF,EAAEggG,UAAUtJ,EAAEx2F,EAAE,IAAI,IAAI,GAAGF,EAAE+/F,WAAWrJ,EAAEx2F,EAAE,IAAI,IAAI,GAAGF,EAAE8/F,cAAc,KAAKpJ,EAAEx2F,EAAE,IAAI,IAAI,GAAGF,EAAEigG,SAASvJ,EAAEx2F,EAAE,IAAI,IACpf,IAAI61F,EAAE/1F,EAAE8/F,eAAe2E,EAAGC,GAAI1kG,EAAE+/F,YAAY//F,EAAEggG,UAAU,EAAE,EAAEtJ,EAAEx2F,EAAE,IAAI,IAAI,IAAK,GAAGF,EAAEiiG,oBAAqB7pG,EAAE,IAAKu0C,KAAK3sC,EAAE8/F,cAAc,EAAE,GAAImC,oBAAoB,IAAI3vG,EAAE,IAAKq6C,KAAK3sC,EAAE8/F,cAAc,EAAE,GAAImC,oBAAoBvL,EAAEx2F,EAAE,IAAI,IAAI,GAAgD,GAA5C9H,GAAG9F,GAAG0N,EAAEiiG,qBAAqBl1G,KAAKC,IAAIsF,EAAE8F,GAAK,EAAEw+F,EAAE,SAAS52F,GAAGA,KAAK,EAAE,IAAI5H,EAAE,IAAIu0C,KAAK+pD,EAAE12F,EAAE,IAAI,IAAI,GAAG,KAAK02F,EAAE12F,EAAE,IAAI,IAAI,GAAG02F,EAAE12F,EAAE,IAAI,IAAI,GAAG02F,EAAE12F,EAAE,GAAG,IAAI,GAAG02F,EAAE12F,EAAE,GAAG,IAAI,GAAG02F,EAAE12F,GAAG,IAAI,GAAG,GAAGE,EAAEw2F,EAAE12F,EAAE,IAAI,IAAI,GAAG1N,EAAE8F,EAAE6pG,oBAAoBxvG,EAAE,IAAKk6C,KAAKv0C,EAAE0nG,cAAc,EAAE,GAAImC,oBAClepO,EAAE,IAAKlnD,KAAKv0C,EAAE0nG,cAAc,EAAE,GAAImC,oBAAoB1tB,EAAExnF,KAAKC,IAAI6mG,EAAEphG,GAA0Y,OAAvY,EAAEyN,EAAEw2F,EAAE12F,EAAE,IAAI,IAAI,GAAGxT,OAAOiG,GAAGohG,GAAGtf,GAAGjiF,GAAG,EAAE4N,IAAIq0E,GAAGjiF,KAAKG,EAAE1F,KAAKu/B,IAAIunE,EAAEphG,GAAG2F,EAAE8pG,QAAQ9pG,EAAEgoG,UAAU,MAAM,EAAElgG,EAAEq0E,EAAE9hF,GAAGH,KAAKokG,EAAE12F,EAAE,IAAI,IAAI,GAAG5H,EAAE6nG,SAASvJ,EAAE12F,EAAE,IAAI,IAAI,IAAI+1F,EAAE39F,EAAE0nG,eAAe2E,EAAGC,GAAItsG,EAAE2nG,YAAY3nG,EAAE4nG,UAAU,EAAE,EAAEtJ,EAAE12F,GAAG,IAAI,GAAG5H,EAAE0pG,aAAapL,EAAE12F,EAAE,GAAG,IAAI,GAAG5H,EAAE2pG,aAAarL,EAAE12F,EAAE,GAAG,IAAI,GAAG5H,EAAE4pG,WAAWtL,EAAE12F,EAAE,IAAI,IAAI,GAAG5H,EAAE4nG,UAAUtJ,EAAE12F,EAAE,IAAI,IAAI,GAAG5H,EAAE2nG,WAAWrJ,EAAE12F,EAAE,IAAI,IAAI,GAAG5H,EAAE+pG,UAAUniG,EAAE5H,EAAEgoG,UAAU,IAAWsF,IAAInQ,EAAEv1F,EAAE,IAAIjT,KAAK4d,IAAI4qF,GAAG,EAAEA,GAAGxoG,KAAK0f,MAAM8oF,EAC5f,cAAc,KAAKxoG,KAAKE,MAAMsoG,MAAMA,IAAI,IAAI,cAAc,EAAE,IAAIv1F,IAAI,CAAC,EAAEu0E,EAAE,WAAW,OAAO,EAAE,EAAEp2C,EAAE,WAAW,EAAE3rC,EAAE,SAASwN,EAAE5H,EAAE8H,GAAG,SAAS5N,EAAE2sB,GAAG,OAAOA,EAAEA,EAAEojF,eAAe5hG,MAAM,sBAAsBwe,EAAE,GAAG,KAAK,CAAC/e,KAAK,EAAE,IAAIzN,GAAE,IAAKk6C,MAAMmzD,cAAcjM,EAAE,IAAIlnD,KAAKl6C,EAAE,EAAE,GAAG8hF,EAAE,IAAI5nC,KAAKl6C,EAAE,EAAE,GAAGA,EAAEohG,EAAEoO,oBAAoB,IAAIrlF,EAAE23D,EAAE0tB,oBAAoBxwC,EAAEzxD,IAAI,GAAG,IAAI,GAAG,GAAGjT,KAAKu/B,IAAI75B,EAAEmqB,GAAG85E,EAAEt+F,IAAI,GAAG,IAAI,GAAG5L,OAAOiG,GAAGmqB,GAAG5c,EAAE1N,EAAEuhG,GAAGz7F,EAAE9F,EAAEiiF,GAAGv0E,EAAEglG,EAAGhlG,GAAG5H,EAAE4sG,EAAG5sG,GAAGwkB,EAAEnqB,GAAGg/D,EAAEvxD,GAAG,IAAI,GAAGF,EAAEyxD,EAAEvxD,EAAE,GAAG,IAAI,GAAG9H,IAAIq5D,EAAEvxD,GAAG,IAAI,GAAG9H,EAAEq5D,EAAEvxD,EAAE,GAAG,IAAI,GAAGF,EAAE,EAAEzF,EAAE,KAAKo8F,EAAE,GAAE,EACzf9C,EAAE,WAAW,OAAOlnD,KAAKqB,KAAK,EAAE2lD,EAAE,WAAW,OAAO,UAAU,EAAEv7F,EAAE,IAAI02C,YAAYd,MAAMulD,EAAE,SAASvzF,EAAE5H,EAAE8H,GAAU,OAAP9H,KAAK,EAASs5D,EAAEg1C,WAAW1mG,IAAI,IAAI,EAAE5H,IAAI,EAAEA,GAAG8H,IAAI,KAAK,EAAE,EAAE3N,EAAE,SAASyN,GAAGA,KAAK,EAAE,IAAI5H,EAAEs5D,EAAE7kE,OAAO,GAAG,WAAWmT,EAAE,OAAM,EAAG,IAAI,IAAIE,EAAE,EAAE,GAAGA,EAAEA,GAAG,EAAE,CAAC,IAAI5N,EAAE8F,GAAG,EAAE,GAAG8H,GAAG5N,EAAEvF,KAAKC,IAAIsF,EAAE0N,EAAE,WAAW,IAAIvN,EAAE1F,KAAKuF,EAAEvF,KAAKu/B,IAAItsB,EAAE1N,GAAG0N,EAAE,CAACvN,EAAEA,EAAEzF,IAAIu4B,KAAK9yB,EAAE,WAAWH,GAAG,MAAMA,EAAE,OAAO,OAAOsiF,EAAExtE,OAAOuvB,WAAW,QAAQ,GAAG,IAAIi+C,EAAE6tB,KAAKhwG,GAAG4wG,IAAK,IAAIxP,EAAE,EAAE,MAAM7zF,CAAC,CAAC,MAAMu0E,GAAG,CAACsf,OAAE,CAAM,CAAC,GAAGA,EAAE,OAAM,CAAE,CAAC,OAAM,CAAE,EAAE5yE,EAAE,SAASjhB,EAAE5H,GAAG4H,KAClf,EAAE5H,KAAK,EAAE,IAAI8H,EAAE,EAA8I,OAA5IglG,KAAKnsG,SAAQ,SAASzG,EAAEG,GAAG,IAAIohG,EAAEz7F,EAAE8H,EAAsB,IAApBzN,EAAEg/D,EAAEzxD,EAAE,EAAEvN,GAAG,IAAI,GAAGohG,EAAMA,EAAE,EAAEA,EAAEvhG,EAAEzF,SAASgnG,EAAEoD,EAAExkG,KAAK,IAAI,GAAGH,EAAEqgF,WAAWkhB,GAAGoD,EAAExkG,GAAG,IAAI,GAAG,EAAEyN,GAAG5N,EAAEzF,OAAO,CAAC,IAAU,CAAC,EAAE42B,EAAE,SAASzjB,EAAE5H,GAAG4H,KAAK,EAAE5H,KAAK,EAAE,IAAI8H,EAAEglG,KAAKzzC,EAAEzxD,GAAG,IAAI,GAAGE,EAAErT,OAAO,IAAIyF,EAAE,EAAsD,OAApD4N,EAAEnH,SAAQ,SAAStG,GAAGH,GAAGG,EAAE5F,OAAO,CAAC,IAAG4kE,EAAEr5D,GAAG,IAAI,GAAG9F,EAAS,CAAC,EAAEA,EAAE,IAAI,GAAGo7B,EAAE,WAAW,OAAO,EAAE,EAAE9Q,EAAE,WAAW,OAAO,EAAE,EAAE/qB,EAAE,SAASmO,EAAE5H,EAAE8H,EAAE5N,GAAG8F,KAAK,EAAE8H,KAAK,EAAE5N,KAAK,EAAE,IAAI,IAAIG,EAAE,EAAEohG,EAAE,EAAEA,EAAE3zF,EAAE2zF,IAAI,CAAC,IAAItf,EAAE9iB,EAAEr5D,GAAG,IAAI,GAAGwkB,EAAE60C,EAAEr5D,EAAE,GAAG,IAAI,GAAGA,GAAG,EAAE,IAAI,IAAI6mB,EAAE,EAAEA,EAAErC,EAAEqC,IAAI,CAAC,IAAIzsB,EAAEk/D,EAAE6iB,EAAEt1D,IAAI,GAAG00E,EACnfwR,GAAGnlG,GAAG,IAAIxN,GAAG,KAAKA,IAAI,IAAIwN,EAAEy6B,EAAGk7D,GAAG4O,EAAG5Q,EAAE,IAAIA,EAAE9mG,OAAO,GAAG8mG,EAAE1gG,KAAKT,EAAE,CAACC,GAAGmqB,CAAC,CAAe,OAAd60C,EAAEn/D,GAAG,IAAI,GAAGG,EAAS,CAAC,EAAEu2E,EAAEy8B,GAAGvlG,EAAE,SAASF,EAAE5H,EAAE8H,EAAE5N,GAAG,OAAOmzG,GAAGzlG,IAAI,EAAE5H,IAAI,EAAE8H,IAAI,EAAE5N,IAAI,EAAE,IACzJ,WAAY,SAAS0N,EAAEE,GAA8G,GAA3GA,EAAEA,EAAEhV,QAAQqoG,EAAErzF,EAKxC,SAAYF,GAAyB,IAAI5H,EAAE9F,GAAG,IAAIA,MAAM,EAAE4N,EAAE5N,GAAGG,GAAGH,EAAEG,KAAK,EAAwH,OAAlLuN,EAAEtS,OAAOO,OAAO,CAAC,EAAE+R,IAA2C0iG,iBAAiBtqG,EAAE4H,EAAE0iG,kBAAkB1iG,EAAE4iG,OAAO1iG,EAAEF,EAAE4iG,QAAQ5iG,EAAEo8D,UAAUhkE,EAAE4H,EAAEo8D,WAAWp8D,EAAEq8D,WAAWn8D,EAAEF,EAAEq8D,YAAmBr8D,CAAC,CAL/J4lG,CAAG1lG,GAAG00E,EAAE2e,EAAE0D,EAAEoM,IAAKG,EAAGzyC,QAAQwiC,EAAE7hC,GAAGC,IAAI58D,EAAEmiG,wBAAwBniG,EAAEmiG,uBAAuBvlC,GAAM,GAAGA,IAAI,OAAOqiC,IAAImD,cAAcnD,GAAGA,EAAE,MAAMP,GAAG,CAAC,IAAInhG,EAAEmhG,EAAEA,EAAE,KAAKnhG,GAAG,CAAC,OAAO4N,CAAC,CAAC,IAAI9H,EAAE,CAAC4H,EAAE2lG,IAA8D,GAA1Dh0C,IAAI58D,EAAEmiG,wBAAwBniG,EAAEmiG,uBAAuBvlC,GAAM58D,EAAEguG,gBAAgB,IAAI,OAAOhuG,EAAEguG,gBAAgB3qG,EAAE4H,EAAE,CAAC,MAAME,GAAGy1F,EAAE,sDAAsDz1F,GAAGs3E,EAAEt3E,EAAE,EArBzZ,SAAYF,EAAE5H,GAAG,IAAI8H,EAAE22F,EAAE,OAAOf,GAAG,mBAAmBtL,YAAYwY,sBAAsBW,EAAGzjG,IAAIA,EAAEg0F,WAAW,YAAYiP,GAAI,mBAAmBt5C,MAAMm6C,EAAG9jG,EAAEF,EAAE5H,GAAGyxD,MAAM3pD,EAAE,CAACu3F,YAAY,gBAAgBppD,MAAK/7C,GAAGk4F,YAAYwY,qBAAqB1wG,EAAE0N,GAAGquC,KAAKj2C,GAAE,SAAS3F,GAAyF,OAAtFkjG,EAAE,kCAAkCljG,GAAGkjG,EAAE,6CAAoDqO,EAAG9jG,EAAEF,EAAE5H,EAAE,KAAG,EAqB4C6rG,CAAG7rG,GAAE,SAAS8H,GAAGF,EAAEE,EAAE+iG,SAAS,IAAGtL,MAAMngB,EAAY,CAA7c,GACAziF,EAAEyxF,SAAS,CAACxmF,EAAE5H,KAAKrD,EAAEyxF,SAAS+M,EAAEmD,GAAG12F,EAAE5H,GAAGrD,EAAEu3F,iBAAiB,CAACtsF,EAAE5H,KAAKrD,EAAEu3F,iBAAiBiH,EAAE9hC,GAAGzxD,EAAE5H,GAAGrD,EAAEqwF,yBAAyB,CAACplF,EAAE5H,EAAE8H,EAAE5N,EAAEG,EAAEohG,EAAEtf,EAAE33D,EAAEqC,EAAEzsB,KAAKuC,EAAEqwF,yBAAyBmO,EAAE5hC,GAAG3xD,EAAE5H,EAAE8H,EAAE5N,EAAEG,EAAEohG,EAAEtf,EAAE33D,EAAEqC,EAAEzsB,GAAGuC,EAAEgxF,4BAA4B,CAAC/lF,EAAE5H,KAAKrD,EAAEgxF,4BAA4BwN,EAAES,GAAGh0F,EAAE5H,GAAGrD,EAAEmxF,6BAA6B,CAAClmF,EAAE5H,EAAE8H,KAAKnL,EAAEmxF,6BAA6BqN,EAAEE,GAAGzzF,EAAE5H,EAAE8H,GAAGnL,EAAE2wF,0BAA0B,CAAC1lF,EAAE5H,EAAE8H,KAAKnL,EAAE2wF,0BAA0B6N,EAAEsD,GAAG72F,EAAE5H,EAAE8H,GAAGnL,EAAEoxF,0BAA0BnmF,IAAIjL,EAAEoxF,0BAA0BoN,EAAEgC,GAAGv1F,GACzfjL,EAAE+xF,kBAAkB,CAAC9mF,EAAE5H,EAAE8H,KAAKnL,EAAE+xF,kBAAkByM,EAAE8B,GAAGr1F,EAAE5H,EAAE8H,GAAGnL,EAAEuyF,mBAAmBtnF,IAAIjL,EAAEuyF,mBAAmBiM,EAAE4B,GAAGn1F,GAAGjL,EAAEgyF,wBAAwB,CAAC/mF,EAAE5H,EAAE8H,KAAKnL,EAAEgyF,wBAAwBwM,EAAEG,GAAG1zF,EAAE5H,EAAE8H,GAAGnL,EAAEmyF,iBAAiB,CAAClnF,EAAE5H,KAAKrD,EAAEmyF,iBAAiBqM,EAAEuD,GAAG92F,EAAE5H,GAAGrD,EAAEoyF,kBAAkB,CAACnnF,EAAE5H,KAAKrD,EAAEoyF,kBAAkBoM,EAAEwC,GAAG/1F,EAAE5H,GAAGrD,EAAEsyF,SAASrnF,IAAIjL,EAAEsyF,SAASkM,EAAE7hF,GAAG1R,GAAGjL,EAAEizF,iBAAiB,CAAChoF,EAAE5H,EAAE8H,EAAE5N,EAAEG,EAAEohG,KAAK9+F,EAAEizF,iBAAiBuL,EAAEC,GAAGxzF,EAAE5H,EAAE8H,EAAE5N,EAAEG,EAAEohG,GAAG9+F,EAAEs0F,kBAAkB,CAACrpF,EAAE5H,EAAE8H,EAAE5N,EAAEG,KAAKsC,EAAEs0F,kBAAkBkK,EAAEwD,GAAG/2F,EAAE5H,EAAE8H,EAAE5N,EAAEG,GAC7dsC,EAAE60F,kBAAkB5pF,IAAIjL,EAAE60F,kBAAkB2J,EAAErnE,GAAGlsB,GAAGjL,EAAE2tF,qBAAqB,CAAC1iF,EAAE5H,EAAE8H,EAAE5N,KAAKyC,EAAE2tF,qBAAqB6Q,EAAEyD,GAAGh3F,EAAE5H,EAAE8H,EAAE5N,GAAGyC,EAAEkuF,sBAAsB,CAACjjF,EAAE5H,EAAE8H,KAAKnL,EAAEkuF,sBAAsBsQ,EAAE2P,IAAIljG,EAAE5H,EAAE8H,GAAGnL,EAAEmuF,sBAAsBljF,IAAIjL,EAAEmuF,sBAAsBqQ,EAAE4P,IAAInjG,GAAGjL,EAAE+uG,kBAAkB9jG,IAAIjL,EAAE+uG,kBAAkBvQ,EAAE94D,IAAIz6B,GAAGjL,EAAE+zF,cAAc,CAAC9oF,EAAE5H,EAAE8H,KAAKnL,EAAE+zF,cAAcyK,EAAE6P,IAAIpjG,EAAE5H,EAAE8H,GAAGnL,EAAEg0F,eAAe,CAAC/oF,EAAE5H,EAAE8H,EAAE5N,KAAKyC,EAAEg0F,eAAewK,EAAE8P,IAAIrjG,EAAE5H,EAAE8H,EAAE5N,GAAGyC,EAAE80F,sBAAsB7pF,IAAIjL,EAAE80F,sBAAsB0J,EAAE+P,IAAItjG,GACnejL,EAAEyyF,mBAAmBxnF,IAAIjL,EAAEyyF,mBAAmB+L,EAAEgQ,IAAIvjG,GAAGjL,EAAEqvG,mBAAmB,CAACpkG,EAAE5H,EAAE8H,EAAE5N,EAAEG,KAAKsC,EAAEqvG,mBAAmB7Q,EAAEiQ,IAAIxjG,EAAE5H,EAAE8H,EAAE5N,EAAEG,GAAGsC,EAAEk0F,QAAQ,CAACjpF,EAAE5H,EAAE8H,EAAE5N,EAAEG,EAAEohG,EAAEtf,EAAE33D,KAAK7nB,EAAEk0F,QAAQsK,EAAEkQ,IAAIzjG,EAAE5H,EAAE8H,EAAE5N,EAAEG,EAAEohG,EAAEtf,EAAE33D,GAAG7nB,EAAEg1F,iBAAiB/pF,IAAIjL,EAAEg1F,iBAAiBwJ,EAAEmQ,IAAI1jG,GAAG,IAAI8kG,GAAG/vG,EAAE4xF,QAAQ3mF,IAAI8kG,GAAG/vG,EAAE4xF,QAAQ4M,EAAEoQ,IAAI3jG,GAAGjL,EAAEouF,MAAMnjF,IAAIjL,EAAEouF,MAAMoQ,EAAEqQ,IAAI5jG,GAAG,IACa+2F,GADT2O,GAAG1lG,IAAI0lG,GAAGnS,EAAEwQ,IAAI/jG,GAAGi4F,GAAG,KAAKA,GAAG1E,EAAEyQ,MAAMnD,GAAG7gG,IAAI6gG,GAAGtN,EAAE0Q,IAAIjkG,GAAGq4F,GAAGr4F,IAAIq4F,GAAG9E,EAAE2Q,IAAIlkG,GAEvY,SAASkgG,KAAK,SAASlgG,IAAI,IAAI+2F,KAAIA,IAAE,EAAGhiG,EAAE+wG,WAAU,GAAI1C,GAAI,CAA+D,GAA9D/N,EAAEmO,GAAIp7E,EAAErzB,GAAMA,EAAEgxG,sBAAqBhxG,EAAEgxG,uBAA0BhxG,EAAEixG,QAAQ,IAAI,mBAAmBjxG,EAAEixG,UAAUjxG,EAAEixG,QAAQ,CAACjxG,EAAEixG,UAAUjxG,EAAEixG,QAAQn5G,QAAQ,CAAC,IAAIuL,EAAErD,EAAEixG,QAAQ7wF,QAAQsuF,EAAG1yC,QAAQ34D,EAAE,CAACi9F,EAAEoO,EAAG,CAAC,CAAC,KAAK,EAAE9xC,GAAG,CAAC,GAAG58D,EAAEmxG,OAAO,IAAI,mBAAmBnxG,EAAEmxG,SAASnxG,EAAEmxG,OAAO,CAACnxG,EAAEmxG,SAASnxG,EAAEmxG,OAAOr5G,QAAQ62G,IAAKrO,EAAEiO,GAAI,EAAE3xC,IAAI58D,EAAEoxG,WAAWpxG,EAAEoxG,UAAU,cAAc/rE,YAAW,WAAWA,YAAW,WAAWrlC,EAAEoxG,UAAU,GAAG,GAAE,GAAGnmG,GAAG,GAAE,IAAIA,IAAI,CAAC,CACve,GAF0MjL,EAAEsnE,WAAWg8B,GAAGtjG,EAAEqnE,UAAU67B,GAAGljG,EAAEwnE,aAAaskC,GAAG9rG,EAAE6nE,aAAau4B,EAAEpgG,EAAEm3F,aAAa,CAAClsF,EAAE5H,EAAE8H,IAAI42F,EAAE92F,EAAE0xD,EAAEt5D,EAAE8H,GAAGnL,EAAEk3F,gBAAgByH,EAAQD,EAAE,SAAS2E,IAAKrB,IAAGmJ,KAAKnJ,KAAItD,EAAE2E,EAAG,EAEvWrjG,EAAEuxG,QAAQ,IAAI,mBAAmBvxG,EAAEuxG,UAAUvxG,EAAEuxG,QAAQ,CAACvxG,EAAEuxG,UAAU,EAAEvxG,EAAEuxG,QAAQz5G,QAAQkI,EAAEuxG,QAAQ1tE,KAAV7jC,GAGzF,OAH2GmrG,KAGpGsG,EAAU5S,KAGnB,GAGEzoG,EAAOD,QAAUq7G,C,gCClDnBp7G,EAAOD,QAmBP,SAAmBy7G,EAAIz5D,GAKnB,IAJA,IAAItwC,EAAU,IAAIhL,MAAMysG,UAAUxxG,OAAS,GACvCwgC,EAAU,EACVxwB,EAAU,EACV+pG,GAAU,EACP/pG,EAAQwhG,UAAUxxG,QACrB+P,EAAOywB,KAAYgxE,UAAUxhG,KACjC,OAAO,IAAIxP,SAAQ,SAAkBC,EAAS0sC,GAC1Cp9B,EAAOywB,GAAU,SAAkByE,GAC/B,GAAI80E,EAEA,GADAA,GAAU,EACN90E,EACAkI,EAAOlI,OACN,CAGD,IAFA,IAAIl1B,EAAS,IAAIhL,MAAMysG,UAAUxxG,OAAS,GACtCwgC,EAAS,EACNA,EAASzwB,EAAO/P,QACnB+P,EAAOywB,KAAYgxE,UAAUhxE,GACjC//B,EAAQk1G,MAAM,KAAM5lG,EACxB,CAER,EACA,IACI+pG,EAAGnE,MAAMt1D,GAAO,KAAMtwC,EAC1B,CAAE,MAAOk1B,GACD80E,IACAA,GAAU,EACV5sE,EAAOlI,GAEf,CACJ,GACJ,C,kCC5CA,IAAIq+D,EAASjlG,EAObilG,EAAOtjG,OAAS,SAAgBoiG,GAC5B,IAAI9iE,EAAI8iE,EAAOpiG,OACf,IAAKs/B,EACD,OAAO,EAEX,IADA,IAAIgS,EAAI,IACChS,EAAI,EAAI,GAA0B,MAArB8iE,EAAO50D,OAAOlO,MAC9BgS,EACN,OAAOpxC,KAAKE,KAAqB,EAAhBgiG,EAAOpiG,QAAc,EAAIsxC,CAC9C,EASA,IANA,IAAI0oE,EAAM,IAAIj1G,MAAM,IAGhBk1G,EAAM,IAAIl1G,MAAM,KAGXC,EAAI,EAAGA,EAAI,IAChBi1G,EAAID,EAAIh1G,GAAKA,EAAI,GAAKA,EAAI,GAAKA,EAAI,GAAKA,EAAI,GAAKA,EAAI,GAAKA,EAAI,EAAIA,EAAI,GAAK,IAAMA,IASrFs+F,EAAO3wF,OAAS,SAAgB4H,EAAQ0e,EAAO4E,GAM3C,IALA,IAIIl4B,EAJAu0G,EAAQ,KACRC,EAAQ,GACRn1G,EAAI,EACJ67B,EAAI,EAED5H,EAAQ4E,GAAK,CAChB,IAAItyB,EAAIgP,EAAO0e,KACf,OAAQ4H,GACJ,KAAK,EACDs5E,EAAMn1G,KAAOg1G,EAAIzuG,GAAK,GACtB5F,GAAS,EAAJ4F,IAAU,EACfs1B,EAAI,EACJ,MACJ,KAAK,EACDs5E,EAAMn1G,KAAOg1G,EAAIr0G,EAAI4F,GAAK,GAC1B5F,GAAS,GAAJ4F,IAAW,EAChBs1B,EAAI,EACJ,MACJ,KAAK,EACDs5E,EAAMn1G,KAAOg1G,EAAIr0G,EAAI4F,GAAK,GAC1B4uG,EAAMn1G,KAAOg1G,EAAQ,GAAJzuG,GACjBs1B,EAAI,EAGR77B,EAAI,QACHk1G,IAAUA,EAAQ,KAAK9zG,KAAKw/E,OAAOC,aAAa8vB,MAAM/vB,OAAQu0B,IAC/Dn1G,EAAI,EAEZ,CAOA,OANI67B,IACAs5E,EAAMn1G,KAAOg1G,EAAIr0G,GACjBw0G,EAAMn1G,KAAO,GACH,IAAN67B,IACAs5E,EAAMn1G,KAAO,KAEjBk1G,GACIl1G,GACAk1G,EAAM9zG,KAAKw/E,OAAOC,aAAa8vB,MAAM/vB,OAAQu0B,EAAM/qG,MAAM,EAAGpK,KACzDk1G,EAAMv4G,KAAK,KAEfikF,OAAOC,aAAa8vB,MAAM/vB,OAAQu0B,EAAM/qG,MAAM,EAAGpK,GAC5D,EAEA,IAAIo1G,EAAkB,mBAUtB9W,EAAO1wF,OAAS,SAAgBwvF,EAAQ7nF,EAAQimB,GAI5C,IAHA,IAEI76B,EAFAszB,EAAQuH,EACRK,EAAI,EAEC77B,EAAI,EAAGA,EAAIo9F,EAAOpiG,QAAS,CAChC,IAAIqT,EAAI+uF,EAAOtc,WAAW9gF,KAC1B,GAAU,KAANqO,GAAYwtB,EAAI,EAChB,MACJ,QAAqBj9B,KAAhByP,EAAI4mG,EAAI5mG,IACT,MAAMxQ,MAAMu3G,GAChB,OAAQv5E,GACJ,KAAK,EACDl7B,EAAI0N,EACJwtB,EAAI,EACJ,MACJ,KAAK,EACDtmB,EAAOimB,KAAY76B,GAAK,GAAS,GAAJ0N,IAAW,EACxC1N,EAAI0N,EACJwtB,EAAI,EACJ,MACJ,KAAK,EACDtmB,EAAOimB,MAAiB,GAAJ76B,IAAW,GAAS,GAAJ0N,IAAW,EAC/C1N,EAAI0N,EACJwtB,EAAI,EACJ,MACJ,KAAK,EACDtmB,EAAOimB,MAAiB,EAAJ76B,IAAU,EAAI0N,EAClCwtB,EAAI,EAGhB,CACA,GAAU,IAANA,EACA,MAAMh+B,MAAMu3G,GAChB,OAAO55E,EAASvH,CACpB,EAOAqqE,EAAO+W,KAAO,SAAcjY,GACxB,MAAO,mEAAmEiY,KAAKjY,EACnF,C,gCCjIA,SAASkY,IAOLj5G,KAAKk5G,WAAa,CAAC,CACvB,CAhBAj8G,EAAOD,QAAUi8G,EAyBjBA,EAAa1Y,UAAUwM,GAAK,SAAYoM,EAAKV,EAAIz5D,GAK7C,OAJCh/C,KAAKk5G,WAAWC,KAASn5G,KAAKk5G,WAAWC,GAAO,KAAKp0G,KAAK,CACvD0zG,GAAMA,EACNz5D,IAAMA,GAAOh/C,OAEVA,IACX,EAQAi5G,EAAa1Y,UAAU6Y,IAAM,SAAaD,EAAKV,GAC3C,QAAYl2G,IAAR42G,EACAn5G,KAAKk5G,WAAa,CAAC,OAEnB,QAAW32G,IAAPk2G,EACAz4G,KAAKk5G,WAAWC,GAAO,QAGvB,IADA,IAAIE,EAAYr5G,KAAKk5G,WAAWC,GACvBx1G,EAAI,EAAGA,EAAI01G,EAAU16G,QACtB06G,EAAU11G,GAAG80G,KAAOA,EACpBY,EAAUluE,OAAOxnC,EAAG,KAElBA,EAGlB,OAAO3D,IACX,EAQAi5G,EAAa1Y,UAAU+Y,KAAO,SAAcH,GACxC,IAAIE,EAAYr5G,KAAKk5G,WAAWC,GAChC,GAAIE,EAAW,CAGX,IAFA,IAAI/pC,EAAO,GACP3rE,EAAI,EACDA,EAAIwsG,UAAUxxG,QACjB2wE,EAAKvqE,KAAKorG,UAAUxsG,MACxB,IAAKA,EAAI,EAAGA,EAAI01G,EAAU16G,QACtB06G,EAAU11G,GAAG80G,GAAGnE,MAAM+E,EAAU11G,KAAKq7C,IAAKswB,EAClD,CACA,OAAOtvE,IACX,C,+BCYA,SAASjD,EAAQC,GAwNb,MArN4B,oBAAjBuc,aAA8B,WAErC,IAAIggG,EAAM,IAAIhgG,aAAa,EAAG,IAC1BigG,EAAM,IAAIvnG,WAAWsnG,EAAIrgG,QACzB4xF,EAAiB,MAAX0O,EAAI,GAEd,SAASC,EAAmB38E,EAAKgkB,EAAKmlB,GAClCszC,EAAI,GAAKz8E,EACTgkB,EAAImlB,GAAWuzC,EAAI,GACnB14D,EAAImlB,EAAM,GAAKuzC,EAAI,GACnB14D,EAAImlB,EAAM,GAAKuzC,EAAI,GACnB14D,EAAImlB,EAAM,GAAKuzC,EAAI,EACvB,CAEA,SAASE,EAAmB58E,EAAKgkB,EAAKmlB,GAClCszC,EAAI,GAAKz8E,EACTgkB,EAAImlB,GAAWuzC,EAAI,GACnB14D,EAAImlB,EAAM,GAAKuzC,EAAI,GACnB14D,EAAImlB,EAAM,GAAKuzC,EAAI,GACnB14D,EAAImlB,EAAM,GAAKuzC,EAAI,EACvB,CAOA,SAASG,EAAkB74D,EAAKmlB,GAK5B,OAJAuzC,EAAI,GAAK14D,EAAImlB,GACbuzC,EAAI,GAAK14D,EAAImlB,EAAM,GACnBuzC,EAAI,GAAK14D,EAAImlB,EAAM,GACnBuzC,EAAI,GAAK14D,EAAImlB,EAAM,GACZszC,EAAI,EACf,CAEA,SAASK,EAAkB94D,EAAKmlB,GAK5B,OAJAuzC,EAAI,GAAK14D,EAAImlB,GACbuzC,EAAI,GAAK14D,EAAImlB,EAAM,GACnBuzC,EAAI,GAAK14D,EAAImlB,EAAM,GACnBuzC,EAAI,GAAK14D,EAAImlB,EAAM,GACZszC,EAAI,EACf,CAlBAv8G,EAAQ68G,aAAe/O,EAAK2O,EAAqBC,EAEjD18G,EAAQ88G,aAAehP,EAAK4O,EAAqBD,EAmBjDz8G,EAAQ+8G,YAAcjP,EAAK6O,EAAoBC,EAE/C58G,EAAQg9G,YAAclP,EAAK8O,EAAoBD,CAGlD,CAjDwC,GAiD9B,WAEP,SAASM,EAAmBC,EAAWp9E,EAAKgkB,EAAKmlB,GAC7C,IAAIsnB,EAAOzwD,EAAM,EAAI,EAAI,EAGzB,GAFIywD,IACAzwD,GAAOA,GACC,IAARA,EACAo9E,EAAU,EAAIp9E,EAAM,EAAmB,EAAqB,WAAYgkB,EAAKmlB,QAC5E,GAAIvjB,MAAM5lB,GACXo9E,EAAU,WAAYp5D,EAAKmlB,QAC1B,GAAInpC,EAAM,qBACXo9E,GAAW3sB,GAAQ,GAAK,cAAgB,EAAGzsC,EAAKmlB,QAC/C,GAAInpC,EAAM,sBACXo9E,GAAW3sB,GAAQ,GAAK1uF,KAAKurF,MAAMttD,EAAM,yBAA4B,EAAGgkB,EAAKmlB,OAC5E,CACD,IAAIk0C,EAAWt7G,KAAK0f,MAAM1f,KAAK6gB,IAAIod,GAAOj+B,KAAKu7G,KAE/CF,GAAW3sB,GAAQ,GAAK4sB,EAAW,KAAO,GAD0B,QAArDt7G,KAAKurF,MAAMttD,EAAMj+B,KAAKyhB,IAAI,GAAI65F,GAAY,YACI,EAAGr5D,EAAKmlB,EACzE,CACJ,CAKA,SAASo0C,EAAkBC,EAAUx5D,EAAKmlB,GACtC,IAAIs0C,EAAOD,EAASx5D,EAAKmlB,GACrBsnB,EAAsB,GAAdgtB,GAAQ,IAAU,EAC1BJ,EAAWI,IAAS,GAAK,IACzBC,EAAkB,QAAPD,EACf,OAAoB,MAAbJ,EACDK,EACArH,IACA5lB,GAAOktB,KACM,IAAbN,EACO,qBAAP5sB,EAA+BitB,EAC/BjtB,EAAO1uF,KAAKyhB,IAAI,EAAG65F,EAAW,MAAQK,EAAW,QAC3D,CAfAx9G,EAAQ68G,aAAeI,EAAmB37D,KAAK,KAAMo8D,GACrD19G,EAAQ88G,aAAeG,EAAmB37D,KAAK,KAAMq8D,GAgBrD39G,EAAQ+8G,YAAcM,EAAkB/7D,KAAK,KAAMs8D,GACnD59G,EAAQg9G,YAAcK,EAAkB/7D,KAAK,KAAMu8D,EAEtD,CAzCU,GA4CiB,oBAAjBtvE,aAA8B,WAErC,IAAIuvE,EAAM,IAAIvvE,aAAa,EAAE,IACzBiuE,EAAM,IAAIvnG,WAAW6oG,EAAI5hG,QACzB4xF,EAAiB,MAAX0O,EAAI,GAEd,SAASuB,EAAoBj+E,EAAKgkB,EAAKmlB,GACnC60C,EAAI,GAAKh+E,EACTgkB,EAAImlB,GAAWuzC,EAAI,GACnB14D,EAAImlB,EAAM,GAAKuzC,EAAI,GACnB14D,EAAImlB,EAAM,GAAKuzC,EAAI,GACnB14D,EAAImlB,EAAM,GAAKuzC,EAAI,GACnB14D,EAAImlB,EAAM,GAAKuzC,EAAI,GACnB14D,EAAImlB,EAAM,GAAKuzC,EAAI,GACnB14D,EAAImlB,EAAM,GAAKuzC,EAAI,GACnB14D,EAAImlB,EAAM,GAAKuzC,EAAI,EACvB,CAEA,SAASwB,EAAoBl+E,EAAKgkB,EAAKmlB,GACnC60C,EAAI,GAAKh+E,EACTgkB,EAAImlB,GAAWuzC,EAAI,GACnB14D,EAAImlB,EAAM,GAAKuzC,EAAI,GACnB14D,EAAImlB,EAAM,GAAKuzC,EAAI,GACnB14D,EAAImlB,EAAM,GAAKuzC,EAAI,GACnB14D,EAAImlB,EAAM,GAAKuzC,EAAI,GACnB14D,EAAImlB,EAAM,GAAKuzC,EAAI,GACnB14D,EAAImlB,EAAM,GAAKuzC,EAAI,GACnB14D,EAAImlB,EAAM,GAAKuzC,EAAI,EACvB,CAOA,SAASyB,EAAmBn6D,EAAKmlB,GAS7B,OARAuzC,EAAI,GAAK14D,EAAImlB,GACbuzC,EAAI,GAAK14D,EAAImlB,EAAM,GACnBuzC,EAAI,GAAK14D,EAAImlB,EAAM,GACnBuzC,EAAI,GAAK14D,EAAImlB,EAAM,GACnBuzC,EAAI,GAAK14D,EAAImlB,EAAM,GACnBuzC,EAAI,GAAK14D,EAAImlB,EAAM,GACnBuzC,EAAI,GAAK14D,EAAImlB,EAAM,GACnBuzC,EAAI,GAAK14D,EAAImlB,EAAM,GACZ60C,EAAI,EACf,CAEA,SAASI,EAAmBp6D,EAAKmlB,GAS7B,OARAuzC,EAAI,GAAK14D,EAAImlB,GACbuzC,EAAI,GAAK14D,EAAImlB,EAAM,GACnBuzC,EAAI,GAAK14D,EAAImlB,EAAM,GACnBuzC,EAAI,GAAK14D,EAAImlB,EAAM,GACnBuzC,EAAI,GAAK14D,EAAImlB,EAAM,GACnBuzC,EAAI,GAAK14D,EAAImlB,EAAM,GACnBuzC,EAAI,GAAK14D,EAAImlB,EAAM,GACnBuzC,EAAI,GAAK14D,EAAImlB,EAAM,GACZ60C,EAAI,EACf,CA1BA99G,EAAQm+G,cAAgBrQ,EAAKiQ,EAAsBC,EAEnDh+G,EAAQo+G,cAAgBtQ,EAAKkQ,EAAsBD,EA2BnD/9G,EAAQq+G,aAAevQ,EAAKmQ,EAAqBC,EAEjDl+G,EAAQs+G,aAAexQ,EAAKoQ,EAAqBD,CAGpD,CAjEwC,GAiE9B,WAEP,SAASM,EAAoBrB,EAAWsB,EAAMC,EAAM3+E,EAAKgkB,EAAKmlB,GAC1D,IAAIsnB,EAAOzwD,EAAM,EAAI,EAAI,EAGzB,GAFIywD,IACAzwD,GAAOA,GACC,IAARA,EACAo9E,EAAU,EAAGp5D,EAAKmlB,EAAMu1C,GACxBtB,EAAU,EAAIp9E,EAAM,EAAmB,EAAqB,WAAYgkB,EAAKmlB,EAAMw1C,QAChF,GAAI/4D,MAAM5lB,GACbo9E,EAAU,EAAGp5D,EAAKmlB,EAAMu1C,GACxBtB,EAAU,WAAYp5D,EAAKmlB,EAAMw1C,QAC9B,GAAI3+E,EAAM,sBACbo9E,EAAU,EAAGp5D,EAAKmlB,EAAMu1C,GACxBtB,GAAW3sB,GAAQ,GAAK,cAAgB,EAAGzsC,EAAKmlB,EAAMw1C,OACnD,CACH,IAAIjB,EACJ,GAAI19E,EAAM,uBAENo9E,GADAM,EAAW19E,EAAM,UACM,EAAGgkB,EAAKmlB,EAAMu1C,GACrCtB,GAAW3sB,GAAQ,GAAKitB,EAAW,cAAgB,EAAG15D,EAAKmlB,EAAMw1C,OAC9D,CACH,IAAItB,EAAWt7G,KAAK0f,MAAM1f,KAAK6gB,IAAIod,GAAOj+B,KAAKu7G,KAC9B,OAAbD,IACAA,EAAW,MAEfD,EAAqB,kBADrBM,EAAW19E,EAAMj+B,KAAKyhB,IAAI,GAAI65F,MACY,EAAGr5D,EAAKmlB,EAAMu1C,GACxDtB,GAAW3sB,GAAQ,GAAK4sB,EAAW,MAAQ,GAAgB,QAAXK,EAAqB,WAAa,EAAG15D,EAAKmlB,EAAMw1C,EACpG,CACJ,CACJ,CAKA,SAASC,EAAmBpB,EAAUkB,EAAMC,EAAM36D,EAAKmlB,GACnD,IAAI01C,EAAKrB,EAASx5D,EAAKmlB,EAAMu1C,GACzBI,EAAKtB,EAASx5D,EAAKmlB,EAAMw1C,GACzBluB,EAAoB,GAAZquB,GAAM,IAAU,EACxBzB,EAAWyB,IAAO,GAAK,KACvBpB,EAAW,YAAmB,QAALoB,GAAgBD,EAC7C,OAAoB,OAAbxB,EACDK,EACArH,IACA5lB,GAAOktB,KACM,IAAbN,EACO,OAAP5sB,EAAgBitB,EAChBjtB,EAAO1uF,KAAKyhB,IAAI,EAAG65F,EAAW,OAASK,EAAW,iBAC5D,CAhBAx9G,EAAQm+G,cAAgBI,EAAoBj9D,KAAK,KAAMo8D,EAAa,EAAG,GACvE19G,EAAQo+G,cAAgBG,EAAoBj9D,KAAK,KAAMq8D,EAAa,EAAG,GAiBvE39G,EAAQq+G,aAAeK,EAAmBp9D,KAAK,KAAMs8D,EAAY,EAAG,GACpE59G,EAAQs+G,aAAeI,EAAmBp9D,KAAK,KAAMu8D,EAAY,EAAG,EAEvE,CArDU,GAuDJ79G,CACX,CAIA,SAAS09G,EAAY59E,EAAKgkB,EAAKmlB,GAC3BnlB,EAAImlB,GAAyB,IAAbnpC,EAChBgkB,EAAImlB,EAAM,GAAMnpC,IAAQ,EAAK,IAC7BgkB,EAAImlB,EAAM,GAAMnpC,IAAQ,GAAK,IAC7BgkB,EAAImlB,EAAM,GAAMnpC,IAAQ,EAC5B,CAEA,SAAS69E,EAAY79E,EAAKgkB,EAAKmlB,GAC3BnlB,EAAImlB,GAAYnpC,IAAQ,GACxBgkB,EAAImlB,EAAM,GAAMnpC,IAAQ,GAAK,IAC7BgkB,EAAImlB,EAAM,GAAMnpC,IAAQ,EAAK,IAC7BgkB,EAAImlB,EAAM,GAAmB,IAAbnpC,CACpB,CAEA,SAAS89E,EAAW95D,EAAKmlB,GACrB,OAAQnlB,EAAImlB,GACJnlB,EAAImlB,EAAM,IAAM,EAChBnlB,EAAImlB,EAAM,IAAM,GAChBnlB,EAAImlB,EAAM,IAAM,MAAQ,CACpC,CAEA,SAAS40C,EAAW/5D,EAAKmlB,GACrB,OAAQnlB,EAAImlB,IAAY,GAChBnlB,EAAImlB,EAAM,IAAM,GAChBnlB,EAAImlB,EAAM,IAAM,EAChBnlB,EAAImlB,EAAM,MAAQ,CAC9B,CA5UAhpE,EAAOD,QAAUD,EAAQA,E,qCCOzB,SAAS8+G,QAAQC,YACb,IACI,IAAIC,IAAMC,KAAK,QAAQhpG,QAAQ,IAAI,MAAzBgpG,CAAgCF,YAC1C,GAAIC,MAAQA,IAAIp9G,QAAUa,OAAOkU,KAAKqoG,KAAKp9G,QACvC,OAAOo9G,GACf,CAAE,MAAOl1G,GAAI,CACb,OAAO,IACX,CAfA5J,OAAOD,QAAU6+G,O,gCCAjB5+G,EAAOD,QA6BP,SAAcguE,EAAOj9D,EAAOxM,GACxB,IAAI06G,EAAS16G,GAAQ,KACjB26G,EAASD,IAAS,EAClBE,EAAS,KACTh9E,EAAS88E,EACb,OAAO,SAAoB16G,GACvB,GAAIA,EAAO,GAAKA,EAAO26G,EACnB,OAAOlxC,EAAMzpE,GACb49B,EAAS59B,EAAO06G,IAChBE,EAAOnxC,EAAMixC,GACb98E,EAAS,GAEb,IAAI2hB,EAAM/yC,EAAMspB,KAAK8kF,EAAMh9E,EAAQA,GAAU59B,GAG7C,OAFa,EAAT49B,IACAA,EAAwB,GAAL,EAATA,IACP2hB,CACX,CACJ,C,kCCxCA,IAAIs7D,EAAOp/G,EAOXo/G,EAAKz9G,OAAS,SAAqBoiG,GAG/B,IAFA,IAAIt1D,EAAM,EACNz5B,EAAI,EACCrO,EAAI,EAAGA,EAAIo9F,EAAOpiG,SAAUgF,GACjCqO,EAAI+uF,EAAOtc,WAAW9gF,IACd,IACJ8nC,GAAO,EACFz5B,EAAI,KACTy5B,GAAO,EACe,QAAZ,MAAJz5B,IAAkE,QAAZ,MAA3B+uF,EAAOtc,WAAW9gF,EAAI,OACrDA,EACF8nC,GAAO,GAEPA,GAAO,EAEf,OAAOA,CACX,EASA2wE,EAAKC,KAAO,SAAmBnjG,EAAQ0e,EAAO4E,GAE1C,GADUA,EAAM5E,EACN,EACN,MAAO,GAKX,IAJA,IAGItzB,EAHAu0G,EAAQ,KACRC,EAAQ,GACRn1G,EAAI,EAEDi0B,EAAQ4E,IACXl4B,EAAI4U,EAAO0e,MACH,IACJkhF,EAAMn1G,KAAOW,EACRA,EAAI,KAAOA,EAAI,IACpBw0G,EAAMn1G,MAAY,GAAJW,IAAW,EAAsB,GAAlB4U,EAAO0e,KAC/BtzB,EAAI,KAAOA,EAAI,KACpBA,IAAU,EAAJA,IAAU,IAAwB,GAAlB4U,EAAO0e,OAAkB,IAAwB,GAAlB1e,EAAO0e,OAAkB,EAAsB,GAAlB1e,EAAO0e,MAAiB,MAC1GkhF,EAAMn1G,KAAO,OAAUW,GAAK,IAC5Bw0G,EAAMn1G,KAAO,OAAc,KAAJW,IAEvBw0G,EAAMn1G,MAAY,GAAJW,IAAW,IAAwB,GAAlB4U,EAAO0e,OAAkB,EAAsB,GAAlB1e,EAAO0e,KACnEj0B,EAAI,QACHk1G,IAAUA,EAAQ,KAAK9zG,KAAKw/E,OAAOC,aAAa8vB,MAAM/vB,OAAQu0B,IAC/Dn1G,EAAI,GAGZ,OAAIk1G,GACIl1G,GACAk1G,EAAM9zG,KAAKw/E,OAAOC,aAAa8vB,MAAM/vB,OAAQu0B,EAAM/qG,MAAM,EAAGpK,KACzDk1G,EAAMv4G,KAAK,KAEfikF,OAAOC,aAAa8vB,MAAM/vB,OAAQu0B,EAAM/qG,MAAM,EAAGpK,GAC5D,EASAy4G,EAAKE,MAAQ,SAAoBvb,EAAQ7nF,EAAQimB,GAI7C,IAHA,IACIo9E,EACAC,EAFA5kF,EAAQuH,EAGHx7B,EAAI,EAAGA,EAAIo9F,EAAOpiG,SAAUgF,GACjC44G,EAAKxb,EAAOtc,WAAW9gF,IACd,IACLuV,EAAOimB,KAAYo9E,EACZA,EAAK,MACZrjG,EAAOimB,KAAYo9E,GAAM,EAAU,IACnCrjG,EAAOimB,KAAuB,GAAXo9E,EAAgB,KACV,QAAZ,MAALA,IAA0E,QAAZ,OAAjCC,EAAKzb,EAAOtc,WAAW9gF,EAAI,MAChE44G,EAAK,QAAiB,KAALA,IAAgB,KAAY,KAALC,KACtC74G,EACFuV,EAAOimB,KAAYo9E,GAAM,GAAU,IACnCrjG,EAAOimB,KAAYo9E,GAAM,GAAK,GAAK,IACnCrjG,EAAOimB,KAAYo9E,GAAM,EAAK,GAAK,IACnCrjG,EAAOimB,KAAuB,GAAXo9E,EAAgB,MAEnCrjG,EAAOimB,KAAYo9E,GAAM,GAAU,IACnCrjG,EAAOimB,KAAYo9E,GAAM,EAAK,GAAK,IACnCrjG,EAAOimB,KAAuB,GAAXo9E,EAAgB,KAG3C,OAAOp9E,EAASvH,CACpB,C,kCCvGA56B,EAAQy/G,YAAa,EACrB,IAAIn/C,EAAsB,WACtB,SAASA,EAAKoS,GACV,IAAKA,EACD,MAAM,IAAI/hD,UAAU,2CAExB3tB,KAAKL,MAAQ29D,EAAKo/C,MACdhtC,GAAQpS,EAAKq/C,OAAOjtC,KACpB1vE,KAAKL,MAAQ+vE,EAErB,CA2CA,OA1CApS,EAAKq/C,OAAS,SAAUjtC,GACpB,IAAI/vE,EAAQ+vE,EAAKl+B,WACjB,OAAOk+B,IAASA,aAAgBpS,GAAQA,EAAKs/C,UAAU5D,KAAKr5G,GAChE,EACA29D,EAAK3d,OAAS,WACV,OAAO,IAAI2d,EAAK,CAACA,EAAKu/C,IAAI,GAAIv/C,EAAKu/C,IAAI,GAAIv/C,EAAKu/C,IAAI,GAAIv/C,EAAKu/C,IAAI,GAAIv/C,EAAKu/C,IAAI,IAAIv8G,KAAK,KAC3F,EACAg9D,EAAKw/C,YAAc,WACf,OAAO,IAAIx/C,EAAK,YACpB,EACAA,EAAKlvD,MAAQ,SAAUshE,GACnB,OAAO,IAAIpS,EAAKoS,EACpB,EACApS,EAAKy/C,IAAM,WACP,MAAO,CAACz/C,EAAKu/C,IAAI,GAAIv/C,EAAKu/C,IAAI,GAAIv/C,EAAKu/C,IAAI,GAAIv/C,EAAKu/C,IAAI,GAAIv/C,EAAKu/C,IAAI,IAAIv8G,KAAK,IAClF,EACAg9D,EAAKu/C,IAAM,SAAUj+E,GAEjB,IADA,IAAI4zD,EAAM,GACD7uF,EAAI,EAAGA,EAAIi7B,EAAOj7B,IAEvB6uF,IAA+B,OAArB,EAAI3zF,KAAKm+G,UAAuB,GAAGxrE,SAAS,IAAIiR,UAAU,GAExE,OAAO+vC,CACX,EACAl1B,EAAKijC,UAAU0c,OAAS,SAAUC,GAG9B,OAAO5/C,EAAKq/C,OAAOO,IAAUl9G,KAAKL,QAAUu9G,EAAM1rE,UACtD,EACA8rB,EAAKijC,UAAU4c,QAAU,WACrB,OAAOn9G,KAAKL,QAAU29D,EAAKo/C,KAC/B,EACAp/C,EAAKijC,UAAU/uD,SAAW,WACtB,OAAOxxC,KAAKL,KAChB,EACA29D,EAAKijC,UAAUmC,OAAS,WACpB,MAAO,CACH/iG,MAAOK,KAAKL,MAEpB,EACA29D,EAAKs/C,UAAY,IAAI1pG,OAAO,iEAAkE,KAC9FoqD,EAAKo/C,MAAQ,uCACNp/C,CACX,CArDyB,GAsDzBtgE,EAAQsgE,KAAOA,C,oCCrDfrgE,EAAOD,QAAU,EAAjB,K,oCCFA,IAAIogH,EAAWpgH,EA2Bf,SAASqgH,IACLD,EAASpd,KAAKsd,aACdF,EAAStd,OAAOwd,WAAWF,EAASG,cACpCH,EAASxd,OAAO0d,WAAWF,EAASI,aACxC,CAvBAJ,EAAShlG,MAAQ,UAGjBglG,EAAStd,OAAe,EAAQ,MAChCsd,EAASG,aAAe,EAAQ,MAChCH,EAASxd,OAAe,EAAQ,MAChCwd,EAASI,aAAe,EAAQ,KAGhCJ,EAASpd,KAAe,EAAQ,MAChCod,EAASK,IAAe,EAAQ,MAChCL,EAASld,MAAe,EAAQ,MAChCkd,EAASC,UAAeA,EAcxBA,G,oCClCApgH,EAAOD,QAAU4iG,EAEjB,IAEI4d,EAFAxd,EAAY,EAAQ,MAIpBgC,EAAYhC,EAAKgC,SACjBoa,EAAYpc,EAAKoc,KAGrB,SAASsB,EAAgBlc,EAAQmc,GAC7B,OAAOlgD,WAAW,uBAAyB+jC,EAAOv7B,IAAM,OAAS03C,GAAe,GAAK,MAAQnc,EAAO/1D,IACxG,CAQA,SAASm0D,EAAO1mF,GAMZlZ,KAAK8gD,IAAM5nC,EAMXlZ,KAAKimE,IAAM,EAMXjmE,KAAKyrC,IAAMvyB,EAAOva,MACtB,CAEA,IA4CQgB,EA5CJi+G,EAAqC,oBAAf3rG,WACpB,SAA4BiH,GAC1B,GAAIA,aAAkBjH,YAAcvO,MAAM+lC,QAAQvwB,GAC9C,OAAO,IAAI0mF,EAAO1mF,GACtB,MAAM1X,MAAM,iBAChB,EAEE,SAAsB0X,GACpB,GAAIxV,MAAM+lC,QAAQvwB,GACd,OAAO,IAAI0mF,EAAO1mF,GACtB,MAAM1X,MAAM,iBAChB,EAEAm+C,EAAS,WACT,OAAOqgD,EAAK6d,OACN,SAA6B3kG,GAC3B,OAAQ0mF,EAAOjgD,OAAS,SAAuBzmC,GAC3C,OAAO8mF,EAAK6d,OAAOC,SAAS5kG,GACtB,IAAIskG,EAAatkG,GAEjB0kG,EAAa1kG,EACvB,GAAGA,EACP,EAEE0kG,CACV,EAuDA,SAASG,IAEL,IAAIC,EAAO,IAAIhc,EAAS,EAAG,GACvBr+F,EAAI,EACR,KAAI3D,KAAKyrC,IAAMzrC,KAAKimE,IAAM,GAanB,CACH,KAAOtiE,EAAI,IAAKA,EAAG,CAEf,GAAI3D,KAAKimE,KAAOjmE,KAAKyrC,IACjB,MAAMiyE,EAAgB19G,MAG1B,GADAg+G,EAAKrC,IAAMqC,EAAKrC,IAA2B,IAArB37G,KAAK8gD,IAAI9gD,KAAKimE,OAAmB,EAAJtiE,KAAW,EAC1D3D,KAAK8gD,IAAI9gD,KAAKimE,OAAS,IACvB,OAAO+3C,CACf,CAGA,OADAA,EAAKrC,IAAMqC,EAAKrC,IAA6B,IAAvB37G,KAAK8gD,IAAI9gD,KAAKimE,SAAqB,EAAJtiE,KAAW,EACzDq6G,CACX,CAzBI,KAAOr6G,EAAI,IAAKA,EAGZ,GADAq6G,EAAKrC,IAAMqC,EAAKrC,IAA2B,IAArB37G,KAAK8gD,IAAI9gD,KAAKimE,OAAmB,EAAJtiE,KAAW,EAC1D3D,KAAK8gD,IAAI9gD,KAAKimE,OAAS,IACvB,OAAO+3C,EAKf,GAFAA,EAAKrC,IAAMqC,EAAKrC,IAA2B,IAArB37G,KAAK8gD,IAAI9gD,KAAKimE,OAAe,MAAQ,EAC3D+3C,EAAKpC,IAAMoC,EAAKpC,IAA2B,IAArB57G,KAAK8gD,IAAI9gD,KAAKimE,OAAgB,KAAO,EACvDjmE,KAAK8gD,IAAI9gD,KAAKimE,OAAS,IACvB,OAAO+3C,EAgBf,GAfIr6G,EAAI,EAeJ3D,KAAKyrC,IAAMzrC,KAAKimE,IAAM,GACtB,KAAOtiE,EAAI,IAAKA,EAGZ,GADAq6G,EAAKpC,IAAMoC,EAAKpC,IAA2B,IAArB57G,KAAK8gD,IAAI9gD,KAAKimE,OAAmB,EAAJtiE,EAAQ,KAAO,EAC9D3D,KAAK8gD,IAAI9gD,KAAKimE,OAAS,IACvB,OAAO+3C,OAGf,KAAOr6G,EAAI,IAAKA,EAAG,CAEf,GAAI3D,KAAKimE,KAAOjmE,KAAKyrC,IACjB,MAAMiyE,EAAgB19G,MAG1B,GADAg+G,EAAKpC,IAAMoC,EAAKpC,IAA2B,IAArB57G,KAAK8gD,IAAI9gD,KAAKimE,OAAmB,EAAJtiE,EAAQ,KAAO,EAC9D3D,KAAK8gD,IAAI9gD,KAAKimE,OAAS,IACvB,OAAO+3C,CACf,CAGJ,MAAMx8G,MAAM,0BAChB,CAiCA,SAASy8G,EAAgBn9D,EAAKtkB,GAC1B,OAAQskB,EAAItkB,EAAM,GACVskB,EAAItkB,EAAM,IAAM,EAChBskB,EAAItkB,EAAM,IAAM,GAChBskB,EAAItkB,EAAM,IAAM,MAAQ,CACpC,CA8BA,SAAS0hF,IAGL,GAAIl+G,KAAKimE,IAAM,EAAIjmE,KAAKyrC,IACpB,MAAMiyE,EAAgB19G,KAAM,GAEhC,OAAO,IAAIgiG,EAASic,EAAgBj+G,KAAK8gD,IAAK9gD,KAAKimE,KAAO,GAAIg4C,EAAgBj+G,KAAK8gD,IAAK9gD,KAAKimE,KAAO,GACxG,CA5KA25B,EAAOjgD,OAASA,IAEhBigD,EAAOW,UAAU4d,OAASne,EAAKt8F,MAAM68F,UAAU7mF,UAAuCsmF,EAAKt8F,MAAM68F,UAAUxyF,MAO3G6xF,EAAOW,UAAUO,QACTnhG,EAAQ,WACL,WACuD,GAA1DA,GAAuC,IAArBK,KAAK8gD,IAAI9gD,KAAKimE,QAAuB,EAAOjmE,KAAK8gD,IAAI9gD,KAAKimE,OAAS,IAAK,OAAOtmE,EACvC,GAA1DA,GAASA,GAA8B,IAArBK,KAAK8gD,IAAI9gD,KAAKimE,OAAgB,KAAO,EAAOjmE,KAAK8gD,IAAI9gD,KAAKimE,OAAS,IAAK,OAAOtmE,EACvC,GAA1DA,GAASA,GAA8B,IAArBK,KAAK8gD,IAAI9gD,KAAKimE,OAAe,MAAQ,EAAOjmE,KAAK8gD,IAAI9gD,KAAKimE,OAAS,IAAK,OAAOtmE,EACvC,GAA1DA,GAASA,GAA8B,IAArBK,KAAK8gD,IAAI9gD,KAAKimE,OAAe,MAAQ,EAAOjmE,KAAK8gD,IAAI9gD,KAAKimE,OAAS,IAAK,OAAOtmE,EACvC,GAA1DA,GAASA,GAA+B,GAAtBK,KAAK8gD,IAAI9gD,KAAKimE,OAAe,MAAQ,EAAOjmE,KAAK8gD,IAAI9gD,KAAKimE,OAAS,IAAK,OAAOtmE,EAGjG,IAAKK,KAAKimE,KAAO,GAAKjmE,KAAKyrC,IAEvB,MADAzrC,KAAKimE,IAAMjmE,KAAKyrC,IACViyE,EAAgB19G,KAAM,IAEhC,OAAOL,CACX,GAOJigG,EAAOW,UAAUc,MAAQ,WACrB,OAAuB,EAAhBrhG,KAAK8gG,QAChB,EAMAlB,EAAOW,UAAU6d,OAAS,WACtB,IAAIz+G,EAAQK,KAAK8gG,SACjB,OAAOnhG,IAAU,IAAc,EAARA,GAAa,CACxC,EAoFAigG,EAAOW,UAAU8d,KAAO,WACpB,OAAyB,IAAlBr+G,KAAK8gG,QAChB,EAaAlB,EAAOW,UAAU+d,QAAU,WAGvB,GAAIt+G,KAAKimE,IAAM,EAAIjmE,KAAKyrC,IACpB,MAAMiyE,EAAgB19G,KAAM,GAEhC,OAAOi+G,EAAgBj+G,KAAK8gD,IAAK9gD,KAAKimE,KAAO,EACjD,EAMA25B,EAAOW,UAAUge,SAAW,WAGxB,GAAIv+G,KAAKimE,IAAM,EAAIjmE,KAAKyrC,IACpB,MAAMiyE,EAAgB19G,KAAM,GAEhC,OAAkD,EAA3Ci+G,EAAgBj+G,KAAK8gD,IAAK9gD,KAAKimE,KAAO,EACjD,EAkCA25B,EAAOW,UAAUS,MAAQ,WAGrB,GAAIhhG,KAAKimE,IAAM,EAAIjmE,KAAKyrC,IACpB,MAAMiyE,EAAgB19G,KAAM,GAEhC,IAAIL,EAAQqgG,EAAKgB,MAAM+Y,YAAY/5G,KAAK8gD,IAAK9gD,KAAKimE,KAElD,OADAjmE,KAAKimE,KAAO,EACLtmE,CACX,EAOAigG,EAAOW,UAAU4D,OAAS,WAGtB,GAAInkG,KAAKimE,IAAM,EAAIjmE,KAAKyrC,IACpB,MAAMiyE,EAAgB19G,KAAM,GAEhC,IAAIL,EAAQqgG,EAAKgB,MAAMqa,aAAar7G,KAAK8gD,IAAK9gD,KAAKimE,KAEnD,OADAjmE,KAAKimE,KAAO,EACLtmE,CACX,EAMAigG,EAAOW,UAAU11C,MAAQ,WACrB,IAAIlsD,EAASqB,KAAK8gG,SACdlpE,EAAS53B,KAAKimE,IACdzpC,EAASx8B,KAAKimE,IAAMtnE,EAGxB,GAAI69B,EAAMx8B,KAAKyrC,IACX,MAAMiyE,EAAgB19G,KAAMrB,GAGhC,OADAqB,KAAKimE,KAAOtnE,EACR+E,MAAM+lC,QAAQzpC,KAAK8gD,KACZ9gD,KAAK8gD,IAAI/yC,MAAM6pB,EAAO4E,GAC1B5E,IAAU4E,EACX,IAAIx8B,KAAK8gD,IAAI/Y,YAAY,GACzB/nC,KAAKm+G,OAAO9mF,KAAKr3B,KAAK8gD,IAAKlpB,EAAO4E,EAC5C,EAMAojE,EAAOW,UAAUQ,OAAS,WACtB,IAAIl2C,EAAQ7qD,KAAK6qD,QACjB,OAAOuxD,EAAKC,KAAKxxD,EAAO,EAAGA,EAAMlsD,OACrC,EAOAihG,EAAOW,UAAUpU,KAAO,SAAcxtF,GAClC,GAAsB,iBAAXA,EAAqB,CAE5B,GAAIqB,KAAKimE,IAAMtnE,EAASqB,KAAKyrC,IACzB,MAAMiyE,EAAgB19G,KAAMrB,GAChCqB,KAAKimE,KAAOtnE,CAChB,MACI,GAEI,GAAIqB,KAAKimE,KAAOjmE,KAAKyrC,IACjB,MAAMiyE,EAAgB19G,YACE,IAAvBA,KAAK8gD,IAAI9gD,KAAKimE,QAE3B,OAAOjmE,IACX,EAOA4/F,EAAOW,UAAUmB,SAAW,SAAS8c,GACjC,OAAQA,GACJ,KAAK,EACDx+G,KAAKmsF,OACL,MACJ,KAAK,EACDnsF,KAAKmsF,KAAK,GACV,MACJ,KAAK,EACDnsF,KAAKmsF,KAAKnsF,KAAK8gG,UACf,MACJ,KAAK,EACD,KAA0C,IAAlC0d,EAA2B,EAAhBx+G,KAAK8gG,WACpB9gG,KAAK0hG,SAAS8c,GAElB,MACJ,KAAK,EACDx+G,KAAKmsF,KAAK,GACV,MAGJ,QACI,MAAM3qF,MAAM,qBAAuBg9G,EAAW,cAAgBx+G,KAAKimE,KAE3E,OAAOjmE,IACX,EAEA4/F,EAAO0d,WAAa,SAASmB,GACzBjB,EAAeiB,EACf7e,EAAOjgD,OAASA,IAChB69D,EAAaF,aAEb,IAAI7E,EAAKzY,EAAKl8B,KAAO,SAAsC,WAC3Dk8B,EAAK0e,MAAM9e,EAAOW,UAAW,CAEzBU,MAAO,WACH,OAAO8c,EAAe1mF,KAAKr3B,MAAMy4G,IAAI,EACzC,EAEArU,OAAQ,WACJ,OAAO2Z,EAAe1mF,KAAKr3B,MAAMy4G,IAAI,EACzC,EAEAkG,OAAQ,WACJ,OAAOZ,EAAe1mF,KAAKr3B,MAAM4+G,WAAWnG,IAAI,EACpD,EAEAoG,QAAS,WACL,OAAOX,EAAY7mF,KAAKr3B,MAAMy4G,IAAI,EACtC,EAEAqG,SAAU,WACN,OAAOZ,EAAY7mF,KAAKr3B,MAAMy4G,IAAI,EACtC,GAGR,C,mCCzZAx7G,EAAOD,QAAUwgH,EAGjB,IAAI5d,EAAS,EAAQ,OACpB4d,EAAajd,UAAY/gG,OAAOmgD,OAAOigD,EAAOW,YAAYx4D,YAAcy1E,EAEzE,IAAIxd,EAAO,EAAQ,MASnB,SAASwd,EAAatkG,GAClB0mF,EAAOvoE,KAAKr3B,KAAMkZ,EAOtB,CAEAskG,EAAaF,WAAa,WAElBtd,EAAK6d,SACLL,EAAajd,UAAU4d,OAASne,EAAK6d,OAAOtd,UAAUxyF,MAC9D,EAMAyvG,EAAajd,UAAUQ,OAAS,WAC5B,IAAIt1D,EAAMzrC,KAAK8gG,SACf,OAAO9gG,KAAK8gD,IAAIi+D,UACV/+G,KAAK8gD,IAAIi+D,UAAU/+G,KAAKimE,IAAKjmE,KAAKimE,IAAMpnE,KAAKC,IAAIkB,KAAKimE,IAAMx6B,EAAKzrC,KAAKyrC,MACtEzrC,KAAK8gD,IAAItP,SAAS,QAASxxC,KAAKimE,IAAKjmE,KAAKimE,IAAMpnE,KAAKC,IAAIkB,KAAKimE,IAAMx6B,EAAKzrC,KAAKyrC,KACxF,EASA+xE,EAAaF,Y,gCCjDbrgH,EAAOD,QAAU,CAAC,C,oCCKRA,EA6BNgiH,QAAU,EAAQ,K,oCClCtB/hH,EAAOD,QAAUgiH,EAEjB,IAAIhf,EAAO,EAAQ,MAsCnB,SAASgf,EAAQC,EAASC,EAAkBC,GAExC,GAAuB,mBAAZF,EACP,MAAMtxF,UAAU,8BAEpBqyE,EAAKiZ,aAAa5hF,KAAKr3B,MAMvBA,KAAKi/G,QAAUA,EAMfj/G,KAAKk/G,iBAAmBE,QAAQF,GAMhCl/G,KAAKm/G,kBAAoBC,QAAQD,EACrC,EA3DCH,EAAQze,UAAY/gG,OAAOmgD,OAAOqgD,EAAKiZ,aAAa1Y,YAAYx4D,YAAci3E,EAwE/EA,EAAQze,UAAU8e,QAAU,SAASA,EAAQC,EAAQC,EAAaC,EAAcC,EAASC,GAErF,IAAKD,EACD,MAAM9xF,UAAU,6BAEpB,IAAIvwB,EAAO4C,KACX,IAAK0/G,EACD,OAAO1f,EAAK2f,UAAUN,EAASjiH,EAAMkiH,EAAQC,EAAaC,EAAcC,GAE5E,GAAKriH,EAAK6hH,QAKV,IACI,OAAO7hH,EAAK6hH,QACRK,EACAC,EAAYniH,EAAK8hH,iBAAmB,kBAAoB,UAAUO,GAASptE,UAC3E,SAAqBzO,EAAK8xD,GAEtB,GAAI9xD,EAEA,OADAxmC,EAAKk8G,KAAK,QAAS11E,EAAK07E,GACjBI,EAAS97E,GAGpB,GAAiB,OAAb8xD,EAAJ,CAKA,KAAMA,aAAoB8pB,GACtB,IACI9pB,EAAW8pB,EAAapiH,EAAK+hH,kBAAoB,kBAAoB,UAAUzpB,EACnF,CAAE,MAAO9xD,GAEL,OADAxmC,EAAKk8G,KAAK,QAAS11E,EAAK07E,GACjBI,EAAS97E,EACpB,CAIJ,OADAxmC,EAAKk8G,KAAK,OAAQ5jB,EAAU4pB,GACrBI,EAAS,KAAMhqB,EAZtB,CAFIt4F,EAAKo/B,KAAqB,EAelC,GAER,CAAE,MAAOoH,GAGL,OAFAxmC,EAAKk8G,KAAK,QAAS11E,EAAK07E,QACxBpzE,YAAW,WAAawzE,EAAS97E,EAAM,GAAG,EAE9C,MArCIsI,YAAW,WAAawzE,EAASl+G,MAAM,iBAAmB,GAAG,EAsCrE,EAOAw9G,EAAQze,UAAU/jE,IAAM,SAAaojF,GAOjC,OANI5/G,KAAKi/G,UACAW,GACD5/G,KAAKi/G,QAAQ,KAAM,KAAM,MAC7Bj/G,KAAKi/G,QAAU,KACfj/G,KAAKs5G,KAAK,OAAOF,OAEdp5G,IACX,C,oCC5IA/C,EAAOD,QAAUglG,EAEjB,IAAIhC,EAAO,EAAQ,MAUnB,SAASgC,EAAS2Z,EAAIC,GASlB57G,KAAK27G,GAAKA,IAAO,EAMjB37G,KAAK47G,GAAKA,IAAO,CACrB,CAOA,IAAIiE,EAAO7d,EAAS6d,KAAO,IAAI7d,EAAS,EAAG,GAE3C6d,EAAKhgD,SAAW,WAAa,OAAO,CAAG,EACvCggD,EAAKC,SAAWD,EAAKjB,SAAW,WAAa,OAAO5+G,IAAM,EAC1D6/G,EAAKlhH,OAAS,WAAa,OAAO,CAAG,EAOrC,IAAIohH,EAAW/d,EAAS+d,SAAW,mBAOnC/d,EAASge,WAAa,SAAoBrgH,GACtC,GAAc,IAAVA,EACA,OAAOkgH,EACX,IAAItyB,EAAO5tF,EAAQ,EACf4tF,IACA5tF,GAASA,GACb,IAAIg8G,EAAKh8G,IAAU,EACfi8G,GAAMj8G,EAAQg8G,GAAM,aAAe,EAUvC,OATIpuB,IACAquB,GAAMA,IAAO,EACbD,GAAMA,IAAO,IACPA,EAAK,aACPA,EAAK,IACCC,EAAK,aACPA,EAAK,KAGV,IAAI5Z,EAAS2Z,EAAIC,EAC5B,EAOA5Z,EAASj8E,KAAO,SAAcpmB,GAC1B,GAAqB,iBAAVA,EACP,OAAOqiG,EAASge,WAAWrgH,GAC/B,GAAIqgG,EAAK6B,SAASliG,GAAQ,CAEtB,IAAIqgG,EAAKl8B,KAGL,OAAOk+B,EAASge,WAAWx9D,SAAS7iD,EAAO,KAF3CA,EAAQqgG,EAAKl8B,KAAKm8C,WAAWtgH,EAGrC,CACA,OAAOA,EAAMqkE,KAAOrkE,EAAMskE,KAAO,IAAI+9B,EAASriG,EAAMqkE,MAAQ,EAAGrkE,EAAMskE,OAAS,GAAK47C,CACvF,EAOA7d,EAASzB,UAAU1gC,SAAW,SAAkBgE,GAC5C,IAAKA,GAAY7jE,KAAK47G,KAAO,GAAI,CAC7B,IAAID,EAAgB,GAAV37G,KAAK27G,KAAW,EACtBC,GAAM57G,KAAK47G,KAAW,EAG1B,OAFKD,IACDC,EAAKA,EAAK,IAAM,KACXD,EAAU,WAALC,EAClB,CACA,OAAO57G,KAAK27G,GAAe,WAAV37G,KAAK47G,EAC1B,EAOA5Z,EAASzB,UAAU2f,OAAS,SAAgBr8C,GACxC,OAAOm8B,EAAKl8B,KACN,IAAIk8B,EAAKl8B,KAAe,EAAV9jE,KAAK27G,GAAkB,EAAV37G,KAAK47G,GAAQwD,QAAQv7C,IAEhD,CAAEG,IAAe,EAAVhkE,KAAK27G,GAAQ13C,KAAgB,EAAVjkE,KAAK47G,GAAQ/3C,SAAUu7C,QAAQv7C,GACnE,EAEA,IAAI4gB,EAAaF,OAAOgc,UAAU9b,WAOlCud,EAASme,SAAW,SAAkBC,GAClC,OAAIA,IAASL,EACFF,EACJ,IAAI7d,GACLvd,EAAWptD,KAAK+oF,EAAM,GACtB37B,EAAWptD,KAAK+oF,EAAM,IAAM,EAC5B37B,EAAWptD,KAAK+oF,EAAM,IAAM,GAC5B37B,EAAWptD,KAAK+oF,EAAM,IAAM,MAAQ,GAEpC37B,EAAWptD,KAAK+oF,EAAM,GACtB37B,EAAWptD,KAAK+oF,EAAM,IAAM,EAC5B37B,EAAWptD,KAAK+oF,EAAM,IAAM,GAC5B37B,EAAWptD,KAAK+oF,EAAM,IAAM,MAAQ,EAE9C,EAMApe,EAASzB,UAAU8f,OAAS,WACxB,OAAO97B,OAAOC,aACO,IAAjBxkF,KAAK27G,GACL37G,KAAK27G,KAAO,EAAK,IACjB37G,KAAK27G,KAAO,GAAK,IACjB37G,KAAK27G,KAAO,GACK,IAAjB37G,KAAK47G,GACL57G,KAAK47G,KAAO,EAAK,IACjB57G,KAAK47G,KAAO,GAAK,IACjB57G,KAAK47G,KAAO,GAEpB,EAMA5Z,EAASzB,UAAUuf,SAAW,WAC1B,IAAIQ,EAAStgH,KAAK47G,IAAM,GAGxB,OAFA57G,KAAK47G,KAAQ57G,KAAK47G,IAAM,EAAI57G,KAAK27G,KAAO,IAAM2E,KAAU,EACxDtgH,KAAK27G,IAAQ37G,KAAK27G,IAAM,EAAsB2E,KAAU,EACjDtgH,IACX,EAMAgiG,EAASzB,UAAUqe,SAAW,WAC1B,IAAI0B,IAAmB,EAAVtgH,KAAK27G,IAGlB,OAFA37G,KAAK27G,KAAQ37G,KAAK27G,KAAO,EAAI37G,KAAK47G,IAAM,IAAM0E,KAAU,EACxDtgH,KAAK47G,IAAQ57G,KAAK47G,KAAO,EAAqB0E,KAAU,EACjDtgH,IACX,EAMAgiG,EAASzB,UAAU5hG,OAAS,WACxB,IAAI4hH,EAASvgH,KAAK27G,GACd6E,GAASxgH,KAAK27G,KAAO,GAAK37G,KAAK47G,IAAM,KAAO,EAC5C6E,EAASzgH,KAAK47G,KAAO,GACzB,OAAiB,IAAV6E,EACU,IAAVD,EACED,EAAQ,MACNA,EAAQ,IAAM,EAAI,EAClBA,EAAQ,QAAU,EAAI,EACxBC,EAAQ,MACNA,EAAQ,IAAM,EAAI,EAClBA,EAAQ,QAAU,EAAI,EAC1BC,EAAQ,IAAM,EAAI,EAC7B,C,oCCtMA,IAAIzgB,EAAOhjG,EA2OX,SAAS0hH,EAAM7zC,EAAKhjC,EAAK64E,GACrB,IAAK,IAAIhtG,EAAOlU,OAAOkU,KAAKm0B,GAAMlkC,EAAI,EAAGA,EAAI+P,EAAK/U,SAAUgF,OACnCpB,IAAjBsoE,EAAIn3D,EAAK/P,KAAsB+8G,IAC/B71C,EAAIn3D,EAAK/P,IAAMkkC,EAAIn0B,EAAK/P,KAChC,OAAOknE,CACX,CAmBA,SAAS81C,EAAStgH,GAEd,SAASugH,EAAY/3C,EAASu3B,GAE1B,KAAMpgG,gBAAgB4gH,GAClB,OAAO,IAAIA,EAAY/3C,EAASu3B,GAKpC5gG,OAAOC,eAAeO,KAAM,UAAW,CAAE8B,IAAK,WAAa,OAAO+mE,CAAS,IAGvErnE,MAAMq/G,kBACNr/G,MAAMq/G,kBAAkB7gH,KAAM4gH,GAE9BphH,OAAOC,eAAeO,KAAM,QAAS,CAAEL,OAAO,IAAI6B,OAAQg9C,OAAS,KAEnE4hD,GACAse,EAAM1+G,KAAMogG,EACpB,CA2BA,OAzBAwgB,EAAYrgB,UAAY/gG,OAAOmgD,OAAOn+C,MAAM++F,UAAW,CACnDx4D,YAAa,CACTpoC,MAAOihH,EACPE,UAAU,EACVjhH,YAAY,EACZkhH,cAAc,GAElB1gH,KAAM,CACFyB,IAAK,WAAiB,OAAOzB,CAAM,EACnCc,SAAKoB,EACL1C,YAAY,EAKZkhH,cAAc,GAElBvvE,SAAU,CACN7xC,MAAO,WAAmB,OAAOK,KAAKK,KAAO,KAAOL,KAAK6oE,OAAS,EAClEi4C,UAAU,EACVjhH,YAAY,EACZkhH,cAAc,KAIfH,CACX,CAhTA5gB,EAAK2f,UAAY,EAAQ,MAGzB3f,EAAKiC,OAAS,EAAQ,MAGtBjC,EAAKiZ,aAAe,EAAQ,MAG5BjZ,EAAKgB,MAAQ,EAAQ,KAGrBhB,EAAK6b,QAAU,EAAQ,MAGvB7b,EAAKoc,KAAO,EAAQ,MAGpBpc,EAAKztB,KAAO,EAAQ,MAGpBytB,EAAKgC,SAAW,EAAQ,MAOxBhC,EAAKghB,OAAS5B,QAA0B,oBAAX7Y,QACPA,QACAA,OAAO/qC,SACP+qC,OAAO/qC,QAAQ97D,UACf6mG,OAAO/qC,QAAQ97D,SAAS6Q,MAO9CyvF,EAAKuG,OAASvG,EAAKghB,QAAUza,QACG,oBAAX3H,QAA0BA,QACf,oBAAXxhG,MAA0BA,MACjC4C,KAQdggG,EAAKY,WAAaphG,OAAOyhH,OAASzhH,OAAOyhH,OAAO,IAAiC,GAOjFjhB,EAAKkhB,YAAc1hH,OAAOyhH,OAASzhH,OAAOyhH,OAAO,CAAC,GAAgC,CAAC,EAQnFjhB,EAAKzhG,UAAYD,OAAOC,WAAwC,SAAmBoB,GAC/E,MAAwB,iBAAVA,GAAsB8iG,SAAS9iG,IAAUd,KAAK0f,MAAM5e,KAAWA,CACjF,EAOAqgG,EAAK6B,SAAW,SAAkBliG,GAC9B,MAAwB,iBAAVA,GAAsBA,aAAiB4kF,MACzD,EAOAyb,EAAKmhB,SAAW,SAAkBxhH,GAC9B,OAAOA,GAA0B,iBAAVA,CAC3B,EAUAqgG,EAAKohB,MAQLphB,EAAKqhB,MAAQ,SAAe97G,EAAK+7G,GAC7B,IAAI3hH,EAAQ4F,EAAI+7G,GAChB,QAAa,MAAT3hH,IAAiB4F,EAAI6xB,eAAekqF,MACZ,iBAAV3hH,IAAuB+D,MAAM+lC,QAAQ9pC,GAASA,EAAMhB,OAASa,OAAOkU,KAAK/T,GAAOhB,QAAU,EAEhH,EAaAqhG,EAAK6d,OAAS,WACV,IACI,IAAIA,EAAS7d,EAAK6b,QAAQ,UAAUgC,OAEpC,OAAOA,EAAOtd,UAAUghB,UAAY1D,EAAoC,IAC5E,CAAE,MAAOh3G,GAEL,OAAO,IACX,CACH,CATa,GAYdm5F,EAAKwhB,aAAe,KAGpBxhB,EAAKyhB,oBAAsB,KAO3BzhB,EAAKS,UAAY,SAAmBihB,GAEhC,MAA8B,iBAAhBA,EACR1hB,EAAK6d,OACD7d,EAAKyhB,oBAAoBC,GACzB,IAAI1hB,EAAKt8F,MAAMg+G,GACnB1hB,EAAK6d,OACD7d,EAAKwhB,aAAaE,GACI,oBAAfzvG,WACHyvG,EACA,IAAIzvG,WAAWyvG,EACjC,EAMA1hB,EAAKt8F,MAA8B,oBAAfuO,WAA6BA,WAAwCvO,MAezFs8F,EAAKl8B,KAAkCk8B,EAAKuG,OAAOob,SAAsC3hB,EAAKuG,OAAOob,QAAQ79C,MACtEk8B,EAAKuG,OAAOziC,MACvCk8B,EAAK6b,QAAQ,QAOzB7b,EAAK4hB,OAAS,mBAOd5hB,EAAK6hB,QAAU,wBAOf7hB,EAAK8hB,QAAU,6CAOf9hB,EAAK+hB,WAAa,SAAoBpiH,GAClC,OAAOA,EACDqgG,EAAKgC,SAASj8E,KAAKpmB,GAAO0gH,SAC1BrgB,EAAKgC,SAAS+d,QACxB,EAQA/f,EAAKgiB,aAAe,SAAsB5B,EAAMv8C,GAC5C,IAAIm6C,EAAOhe,EAAKgC,SAASme,SAASC,GAClC,OAAIpgB,EAAKl8B,KACEk8B,EAAKl8B,KAAKxD,SAAS09C,EAAKrC,GAAIqC,EAAKpC,GAAI/3C,GACzCm6C,EAAKn+C,SAASu/C,QAAQv7C,GACjC,EAiBAm8B,EAAK0e,MAAQA,EAOb1e,EAAKiiB,QAAU,SAAiBjkD,GAC5B,OAAOA,EAAI7xB,OAAO,GAAG+1E,cAAgBlkD,EAAIvb,UAAU,EACvD,EA0DAu9C,EAAK2gB,SAAWA,EAmBhB3gB,EAAKmiB,cAAgBxB,EAAS,iBAoB9B3gB,EAAKwE,YAAc,SAAkB4d,GAEjC,IADA,IAAIC,EAAW,CAAC,EACP1+G,EAAI,EAAGA,EAAIy+G,EAAWzjH,SAAUgF,EACrC0+G,EAASD,EAAWz+G,IAAM,EAO9B,OAAO,WACH,IAAK,IAAI+P,EAAOlU,OAAOkU,KAAK1T,MAAO2D,EAAI+P,EAAK/U,OAAS,EAAGgF,GAAK,IAAKA,EAC9D,GAA0B,IAAtB0+G,EAAS3uG,EAAK/P,UAA+BpB,IAAlBvC,KAAK0T,EAAK/P,KAAuC,OAAlB3D,KAAK0T,EAAK/P,IACpE,OAAO+P,EAAK/P,EACxB,CACJ,EAeAq8F,EAAKyE,YAAc,SAAkB2d,GAQjC,OAAO,SAAS/hH,GACZ,IAAK,IAAIsD,EAAI,EAAGA,EAAIy+G,EAAWzjH,SAAUgF,EACjCy+G,EAAWz+G,KAAOtD,UACXL,KAAKoiH,EAAWz+G,GACnC,CACJ,EAkBAq8F,EAAK2C,cAAgB,CACjBL,MAAO/d,OACPge,MAAOhe,OACP15B,MAAO05B,OACPie,MAAM,GAIVxC,EAAKsd,WAAa,WACd,IAAIO,EAAS7d,EAAK6d,OAEbA,GAML7d,EAAKwhB,aAAe3D,EAAO93F,OAAS9T,WAAW8T,MAAQ83F,EAAO93F,MAE1D,SAAqBpmB,EAAO2iH,GACxB,OAAO,IAAIzE,EAAOl+G,EAAO2iH,EAC7B,EACJtiB,EAAKyhB,oBAAsB5D,EAAO0E,aAE9B,SAA4BhhH,GACxB,OAAO,IAAIs8G,EAAOt8G,EACtB,GAdAy+F,EAAKwhB,aAAexhB,EAAKyhB,oBAAsB,IAevD,C,oCCpbAxkH,EAAOD,QAAU8iG,EAEjB,IAEIyd,EAFAvd,EAAY,EAAQ,MAIpBgC,EAAYhC,EAAKgC,SACjBC,EAAYjC,EAAKiC,OACjBma,EAAYpc,EAAKoc,KAWrB,SAASoG,EAAG/J,EAAIhtE,EAAK3O,GAMjB98B,KAAKy4G,GAAKA,EAMVz4G,KAAKyrC,IAAMA,EAMXzrC,KAAK48C,UAAOr6C,EAMZvC,KAAK88B,IAAMA,CACf,CAGA,SAAS2lF,IAAQ,CAUjB,SAASC,EAAM7hB,GAMX7gG,KAAK2qB,KAAOk2E,EAAOl2E,KAMnB3qB,KAAK4qB,KAAOi2E,EAAOj2E,KAMnB5qB,KAAKyrC,IAAMo1D,EAAOp1D,IAMlBzrC,KAAK48C,KAAOikD,EAAO8hB,MACvB,CAOA,SAAS7iB,IAML9/F,KAAKyrC,IAAM,EAMXzrC,KAAK2qB,KAAO,IAAI63F,EAAGC,EAAM,EAAG,GAM5BziH,KAAK4qB,KAAO5qB,KAAK2qB,KAMjB3qB,KAAK2iH,OAAS,IAOlB,CAEA,IAAIhjE,EAAS,WACT,OAAOqgD,EAAK6d,OACN,WACE,OAAQ/d,EAAOngD,OAAS,WACpB,OAAO,IAAI49D,CACf,IACJ,EAEE,WACE,OAAO,IAAIzd,CACf,CACR,EAqCA,SAAS8iB,EAAU9lF,EAAKgkB,EAAKmlB,GACzBnlB,EAAImlB,GAAa,IAANnpC,CACf,CAmBA,SAAS+lF,EAASp3E,EAAK3O,GACnB98B,KAAKyrC,IAAMA,EACXzrC,KAAK48C,UAAOr6C,EACZvC,KAAK88B,IAAMA,CACf,CA6CA,SAASgmF,EAAchmF,EAAKgkB,EAAKmlB,GAC7B,KAAOnpC,EAAI8+E,IACP96D,EAAImlB,KAAkB,IAATnpC,EAAI6+E,GAAW,IAC5B7+E,EAAI6+E,IAAM7+E,EAAI6+E,KAAO,EAAI7+E,EAAI8+E,IAAM,MAAQ,EAC3C9+E,EAAI8+E,MAAQ,EAEhB,KAAO9+E,EAAI6+E,GAAK,KACZ76D,EAAImlB,KAAkB,IAATnpC,EAAI6+E,GAAW,IAC5B7+E,EAAI6+E,GAAK7+E,EAAI6+E,KAAO,EAExB76D,EAAImlB,KAASnpC,EAAI6+E,EACrB,CA0CA,SAASoH,EAAajmF,EAAKgkB,EAAKmlB,GAC5BnlB,EAAImlB,GAA0B,IAAdnpC,EAChBgkB,EAAImlB,EAAM,GAAMnpC,IAAQ,EAAM,IAC9BgkB,EAAImlB,EAAM,GAAMnpC,IAAQ,GAAM,IAC9BgkB,EAAImlB,EAAM,GAAMnpC,IAAQ,EAC5B,CA9JAgjE,EAAOngD,OAASA,IAOhBmgD,EAAO90B,MAAQ,SAAezpE,GAC1B,OAAO,IAAIy+F,EAAKt8F,MAAMnC,EAC1B,EAIIy+F,EAAKt8F,QAAUA,QACfo8F,EAAO90B,MAAQg1B,EAAKztB,KAAKutB,EAAO90B,MAAOg1B,EAAKt8F,MAAM68F,UAAU7mF,WAUhEomF,EAAOS,UAAUyiB,MAAQ,SAAcvK,EAAIhtE,EAAK3O,GAG5C,OAFA98B,KAAK4qB,KAAO5qB,KAAK4qB,KAAKgyB,KAAO,IAAI4lE,EAAG/J,EAAIhtE,EAAK3O,GAC7C98B,KAAKyrC,KAAOA,EACLzrC,IACX,EA6BA6iH,EAAStiB,UAAY/gG,OAAOmgD,OAAO6iE,EAAGjiB,WACtCsiB,EAAStiB,UAAUkY,GAxBnB,SAAuB37E,EAAKgkB,EAAKmlB,GAC7B,KAAOnpC,EAAM,KACTgkB,EAAImlB,KAAe,IAANnpC,EAAY,IACzBA,KAAS,EAEbgkB,EAAImlB,GAAOnpC,CACf,EAyBAgjE,EAAOS,UAAUO,OAAS,SAAsBnhG,GAW5C,OARAK,KAAKyrC,MAAQzrC,KAAK4qB,KAAO5qB,KAAK4qB,KAAKgyB,KAAO,IAAIimE,GACzCljH,KAAkB,GACT,IAAY,EACpBA,EAAQ,MAAY,EACpBA,EAAQ,QAAY,EACpBA,EAAQ,UAAY,EACA,EAC1BA,IAAQ8rC,IACDzrC,IACX,EAQA8/F,EAAOS,UAAUc,MAAQ,SAAqB1hG,GAC1C,OAAOA,EAAQ,EACTK,KAAKgjH,MAAMF,EAAe,GAAI9gB,EAASge,WAAWrgH,IAClDK,KAAK8gG,OAAOnhG,EACtB,EAOAmgG,EAAOS,UAAU6d,OAAS,SAAsBz+G,GAC5C,OAAOK,KAAK8gG,QAAQnhG,GAAS,EAAIA,GAAS,MAAQ,EACtD,EAqBAmgG,EAAOS,UAAU6D,OAAS,SAAsBzkG,GAC5C,IAAIq+G,EAAOhc,EAASj8E,KAAKpmB,GACzB,OAAOK,KAAKgjH,MAAMF,EAAe9E,EAAKr/G,SAAUq/G,EACpD,EASAle,EAAOS,UAAUU,MAAQnB,EAAOS,UAAU6D,OAQ1CtE,EAAOS,UAAUoe,OAAS,SAAsBh/G,GAC5C,IAAIq+G,EAAOhc,EAASj8E,KAAKpmB,GAAOmgH,WAChC,OAAO9/G,KAAKgjH,MAAMF,EAAe9E,EAAKr/G,SAAUq/G,EACpD,EAOAle,EAAOS,UAAU8d,KAAO,SAAoB1+G,GACxC,OAAOK,KAAKgjH,MAAMJ,EAAW,EAAGjjH,EAAQ,EAAI,EAChD,EAcAmgG,EAAOS,UAAU+d,QAAU,SAAuB3+G,GAC9C,OAAOK,KAAKgjH,MAAMD,EAAc,EAAGpjH,IAAU,EACjD,EAQAmgG,EAAOS,UAAUge,SAAWze,EAAOS,UAAU+d,QAQ7Cxe,EAAOS,UAAUse,QAAU,SAAuBl/G,GAC9C,IAAIq+G,EAAOhc,EAASj8E,KAAKpmB,GACzB,OAAOK,KAAKgjH,MAAMD,EAAc,EAAG/E,EAAKrC,IAAIqH,MAAMD,EAAc,EAAG/E,EAAKpC,GAC5E,EASA9b,EAAOS,UAAUue,SAAWhf,EAAOS,UAAUse,QAQ7C/e,EAAOS,UAAUS,MAAQ,SAAqBrhG,GAC1C,OAAOK,KAAKgjH,MAAMhjB,EAAKgB,MAAM6Y,aAAc,EAAGl6G,EAClD,EAQAmgG,EAAOS,UAAU4D,OAAS,SAAsBxkG,GAC5C,OAAOK,KAAKgjH,MAAMhjB,EAAKgB,MAAMma,cAAe,EAAGx7G,EACnD,EAEA,IAAIsjH,EAAajjB,EAAKt8F,MAAM68F,UAAUp/F,IAChC,SAAwB27B,EAAKgkB,EAAKmlB,GAChCnlB,EAAI3/C,IAAI27B,EAAKmpC,EACjB,EAEE,SAAwBnpC,EAAKgkB,EAAKmlB,GAChC,IAAK,IAAItiE,EAAI,EAAGA,EAAIm5B,EAAIn+B,SAAUgF,EAC9Bm9C,EAAImlB,EAAMtiE,GAAKm5B,EAAIn5B,EAC3B,EAOJm8F,EAAOS,UAAU11C,MAAQ,SAAqBlrD,GAC1C,IAAI8rC,EAAM9rC,EAAMhB,SAAW,EAC3B,IAAK8sC,EACD,OAAOzrC,KAAKgjH,MAAMJ,EAAW,EAAG,GACpC,GAAI5iB,EAAK6B,SAASliG,GAAQ,CACtB,IAAImhD,EAAMg/C,EAAO90B,MAAMv/B,EAAMw2D,EAAOtjG,OAAOgB,IAC3CsiG,EAAO1wF,OAAO5R,EAAOmhD,EAAK,GAC1BnhD,EAAQmhD,CACZ,CACA,OAAO9gD,KAAK8gG,OAAOr1D,GAAKu3E,MAAMC,EAAYx3E,EAAK9rC,EACnD,EAOAmgG,EAAOS,UAAUQ,OAAS,SAAsBphG,GAC5C,IAAI8rC,EAAM2wE,EAAKz9G,OAAOgB,GACtB,OAAO8rC,EACDzrC,KAAK8gG,OAAOr1D,GAAKu3E,MAAM5G,EAAKE,MAAO7wE,EAAK9rC,GACxCK,KAAKgjH,MAAMJ,EAAW,EAAG,EACnC,EAOA9iB,EAAOS,UAAUW,KAAO,WAIpB,OAHAlhG,KAAK2iH,OAAS,IAAID,EAAM1iH,MACxBA,KAAK2qB,KAAO3qB,KAAK4qB,KAAO,IAAI43F,EAAGC,EAAM,EAAG,GACxCziH,KAAKyrC,IAAM,EACJzrC,IACX,EAMA8/F,EAAOS,UAAUjqD,MAAQ,WAUrB,OATIt2C,KAAK2iH,QACL3iH,KAAK2qB,KAAS3qB,KAAK2iH,OAAOh4F,KAC1B3qB,KAAK4qB,KAAS5qB,KAAK2iH,OAAO/3F,KAC1B5qB,KAAKyrC,IAASzrC,KAAK2iH,OAAOl3E,IAC1BzrC,KAAK2iH,OAAS3iH,KAAK2iH,OAAO/lE,OAE1B58C,KAAK2qB,KAAO3qB,KAAK4qB,KAAO,IAAI43F,EAAGC,EAAM,EAAG,GACxCziH,KAAKyrC,IAAO,GAETzrC,IACX,EAMA8/F,EAAOS,UAAUY,OAAS,WACtB,IAAIx2E,EAAO3qB,KAAK2qB,KACZC,EAAO5qB,KAAK4qB,KACZ6gB,EAAOzrC,KAAKyrC,IAOhB,OANAzrC,KAAKs2C,QAAQwqD,OAAOr1D,GAChBA,IACAzrC,KAAK4qB,KAAKgyB,KAAOjyB,EAAKiyB,KACtB58C,KAAK4qB,KAAOA,EACZ5qB,KAAKyrC,KAAOA,GAETzrC,IACX,EAMA8/F,EAAOS,UAAUluD,OAAS,WAItB,IAHA,IAAI1nB,EAAO3qB,KAAK2qB,KAAKiyB,KACjBkE,EAAO9gD,KAAK+nC,YAAYijC,MAAMhrE,KAAKyrC,KACnCw6B,EAAO,EACJt7C,GACHA,EAAK8tF,GAAG9tF,EAAKmS,IAAKgkB,EAAKmlB,GACvBA,GAAOt7C,EAAK8gB,IACZ9gB,EAAOA,EAAKiyB,KAGhB,OAAOkE,CACX,EAEAg/C,EAAOwd,WAAa,SAAS4F,GACzB3F,EAAe2F,EACfpjB,EAAOngD,OAASA,IAChB49D,EAAaD,YACjB,C,oCC/cArgH,EAAOD,QAAUugH,EAGjB,IAAIzd,EAAS,EAAQ,OACpByd,EAAahd,UAAY/gG,OAAOmgD,OAAOmgD,EAAOS,YAAYx4D,YAAcw1E,EAEzE,IAAIvd,EAAO,EAAQ,MAQnB,SAASud,IACLzd,EAAOzoE,KAAKr3B,KAChB,CAuCA,SAASmjH,EAAkBrmF,EAAKgkB,EAAKmlB,GAC7BnpC,EAAIn+B,OAAS,GACbqhG,EAAKoc,KAAKE,MAAMx/E,EAAKgkB,EAAKmlB,GACrBnlB,EAAIygE,UACTzgE,EAAIygE,UAAUzkF,EAAKmpC,GAEnBnlB,EAAIw7D,MAAMx/E,EAAKmpC,EACvB,CA5CAs3C,EAAaD,WAAa,WAOtBC,EAAavyC,MAAQg1B,EAAKyhB,oBAE1BlE,EAAa6F,iBAAmBpjB,EAAK6d,QAAU7d,EAAK6d,OAAOtd,qBAAqBtuF,YAAiD,QAAnC+tF,EAAK6d,OAAOtd,UAAUp/F,IAAId,KAClH,SAA8By8B,EAAKgkB,EAAKmlB,GACxCnlB,EAAI3/C,IAAI27B,EAAKmpC,EAEf,EAEE,SAA+BnpC,EAAKgkB,EAAKmlB,GACzC,GAAInpC,EAAIumF,KACNvmF,EAAIumF,KAAKviE,EAAKmlB,EAAK,EAAGnpC,EAAIn+B,aACvB,IAAK,IAAIgF,EAAI,EAAGA,EAAIm5B,EAAIn+B,QAC3BmiD,EAAImlB,KAASnpC,EAAIn5B,IACrB,CACR,EAMA45G,EAAahd,UAAU11C,MAAQ,SAA4BlrD,GACnDqgG,EAAK6B,SAASliG,KACdA,EAAQqgG,EAAKwhB,aAAa7hH,EAAO,WACrC,IAAI8rC,EAAM9rC,EAAMhB,SAAW,EAI3B,OAHAqB,KAAK8gG,OAAOr1D,GACRA,GACAzrC,KAAKgjH,MAAMzF,EAAa6F,iBAAkB33E,EAAK9rC,GAC5CK,IACX,EAcAu9G,EAAahd,UAAUQ,OAAS,SAA6BphG,GACzD,IAAI8rC,EAAMu0D,EAAK6d,OAAOp1E,WAAW9oC,GAIjC,OAHAK,KAAK8gG,OAAOr1D,GACRA,GACAzrC,KAAKgjH,MAAMG,EAAmB13E,EAAK9rC,GAChCK,IACX,EAUAu9G,EAAaD,Y,i1ECpFb,MACIx5C,EAAO,SAAU9mE,GACnB,aAEAwC,OAAOC,eAAezC,EAAS,aAAc,CAC3C2C,OAAO,IAET3C,EAAQ20E,aAAU,EAsBlB,IAAI1zE,EAAO,KAEX,IACEA,EAAO,IAAIq+F,YAAYgnB,SAAS,IAAIhnB,YAAYinB,OAAO,IAAItxG,WAAW,CAAC,EAAG,GAAI,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,IAAK,IAAK,IAAK,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,IAAK,IAAK,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,EAAG,EAAG,GAAI,IAAK,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,MAAO,CAAC,GAAGjV,OAC9sC,CAAE,MAAO6J,GACT,CAaA,SAASi9D,EAAKE,EAAKC,EAAMJ,GAKvB7jE,KAAKgkE,IAAY,EAANA,EAMXhkE,KAAKikE,KAAc,EAAPA,EAMZjkE,KAAK6jE,WAAaA,CACpB,CAoCA,SAASvgE,EAAOiC,GACd,OAAsC,KAA9BA,GAAOA,EAAgB,WACjC,CASA,SAASi+G,EAAM7jH,GACb,IAAIqS,EAAInT,KAAK4kH,MAAM9jH,GAASA,GAC5B,OAAOA,EAAQ,GAAKqS,EAAIA,CAC1B,CAzBA8xD,EAAKy8B,UAAUmjB,WACflkH,OAAOC,eAAeqkE,EAAKy8B,UAAW,aAAc,CAClD5gG,OAAO,IAgCTmkE,EAAKxgE,OAASA,EAOd,IAAIqgH,EAAY,CAAC,EAObC,EAAa,CAAC,EAQlB,SAASC,EAAQlkH,EAAOkkE,GACtB,IAAIt+D,EAAKu+G,EAAW79G,EAEpB,OAAI49D,GAGE59D,EAAQ,IAFZtG,KAAW,IAEeA,EAAQ,OAChCmkH,EAAYF,EAAWjkH,IACDmkH,GAGxBv+G,EAAM+6D,EAAS3gE,EAAO,GAAG,GACrBsG,IAAO29G,EAAWjkH,GAAS4F,GACxBA,IAIHU,GAAS,MAFbtG,GAAS,IAEoBA,EAAQ,OACnCmkH,EAAYH,EAAUhkH,IACAmkH,GAGxBv+G,EAAM+6D,EAAS3gE,EAAOA,EAAQ,GAAK,EAAI,GAAG,GACtCsG,IAAO09G,EAAUhkH,GAAS4F,GACvBA,EAEX,CAkBA,SAASy6G,EAAWrgH,EAAOkkE,GACzB,GAAInhB,MAAM/iD,GAAQ,OAAOkkE,EAAWkgD,EAAQC,EAE5C,GAAIngD,EAAU,CACZ,GAAIlkE,EAAQ,EAAG,OAAOokH,EACtB,GAAIpkH,GAASskH,EAAgB,OAAOC,CACtC,KAAO,CACL,GAAIvkH,IAAUwkH,EAAgB,OAAO15B,EACrC,GAAI9qF,EAAQ,GAAKwkH,EAAgB,OAAO35B,CAC1C,CAEA,OAAI7qF,EAAQ,EAAUqgH,GAAYrgH,EAAOkkE,GAAU9jD,MAC5CugD,EAAS3gE,EAAQykH,EAAiB,EAAGzkH,EAAQykH,EAAiB,EAAGvgD,EAC1E,CAmBA,SAASvD,EAAS+jD,EAASC,EAAUzgD,GACnC,OAAO,IAAIC,EAAKugD,EAASC,EAAUzgD,EACrC,CA1CAC,EAAK+/C,QAAUA,EA+Bf//C,EAAKk8C,WAAaA,EAuBlBl8C,EAAKxD,SAAWA,EAShB,IAAIikD,EAAU1lH,KAAKyhB,IAUnB,SAAS2/F,EAAWjiD,EAAK6F,EAAU2gD,GACjC,GAAmB,IAAfxmD,EAAIr/D,OAAc,MAAM6C,MAAM,gBAUlC,GARwB,iBAAbqiE,GAET2gD,EAAQ3gD,EACRA,GAAW,GAEXA,IAAaA,EAGH,QAAR7F,GAAyB,aAARA,GAA8B,cAARA,GAA+B,cAARA,EAAqB,OAAO6F,EAAWkgD,EAAQC,EAEjH,IADAQ,EAAQA,GAAS,IACL,GAAK,GAAKA,EAAO,MAAM/mD,WAAW,SAC9C,IAAIx/B,EACJ,IAAKA,EAAI+/B,EAAIpxD,QAAQ,MAAQ,EAAG,MAAMpL,MAAM,mBAAwB,GAAU,IAANy8B,EACtE,OAAOgiF,EAAWjiD,EAAIvb,UAAU,GAAIohB,EAAU2gD,GAAOzkG,MAOvD,IAHA,IAAI0kG,EAAezE,EAAWuE,EAAQC,EAAO,IACzCn8G,EAAS27G,EAEJrgH,EAAI,EAAGA,EAAIq6D,EAAIr/D,OAAQgF,GAAK,EAAG,CACtC,IAAIpC,EAAO1C,KAAKC,IAAI,EAAGk/D,EAAIr/D,OAASgF,GAChChE,EAAQ6iD,SAASwb,EAAIvb,UAAU9+C,EAAGA,EAAIpC,GAAOijH,GAEjD,GAAIjjH,EAAO,EAAG,CACZ,IAAImjH,EAAQ1E,EAAWuE,EAAQC,EAAOjjH,IACtC8G,EAASA,EAAOsO,IAAI+tG,GAAOxzG,IAAI8uG,EAAWrgH,GAC5C,MAEE0I,GADAA,EAASA,EAAOsO,IAAI8tG,IACJvzG,IAAI8uG,EAAWrgH,GAEnC,CAGA,OADA0I,EAAOw7D,SAAWA,EACXx7D,CACT,CAoBA,SAAS07D,EAAUjnC,EAAK+mC,GACtB,MAAmB,iBAAR/mC,EAAyBkjF,EAAWljF,EAAK+mC,GACjC,iBAAR/mC,EAAyBmjF,EAAWnjF,EAAK+mC,GAE7CvD,EAASxjC,EAAIknC,IAAKlnC,EAAImnC,KAA0B,kBAAbJ,EAAyBA,EAAW/mC,EAAI+mC,SACpF,CAdAC,EAAKm8C,WAAaA,EAwBlBn8C,EAAKC,UAAYA,EASjB,IAcIqgD,EAAiBO,WAOjBV,EAAiBG,EAAiBA,EAOlCD,EAAiBF,EAAiB,EAOlCW,EAAaf,EA5BI,GAAK,IAkCtBG,EAAOH,EAAQ,GAMnB//C,EAAKkgD,KAAOA,EAMZ,IAAID,EAAQF,EAAQ,GAAG,GAMvB//C,EAAKigD,MAAQA,EAMb,IAAIc,EAAMhB,EAAQ,GAMlB//C,EAAK+gD,IAAMA,EAMX,IAAIC,EAAOjB,EAAQ,GAAG,GAMtB//C,EAAKghD,KAAOA,EAMZ,IAAIC,EAAUlB,GAAS,GAMvB//C,EAAKihD,QAAUA,EAMf,IAAIv6B,EAAYlqB,GAAS,EAAgB,YAAgB,GAMzDwD,EAAK0mB,UAAYA,EAMjB,IAAI05B,EAAqB5jD,GAAS,GAAgB,GAAgB,GAMlEwD,EAAKogD,mBAAqBA,EAM1B,IAAIz5B,EAAYnqB,EAAS,GAAG,YAAgB,GAM5CwD,EAAK2mB,UAAYA,EAMjB,IAAIu6B,EAAgBlhD,EAAKy8B,UAOzBykB,EAAcC,MAAQ,WACpB,OAAOjlH,KAAK6jE,SAAW7jE,KAAKgkE,MAAQ,EAAIhkE,KAAKgkE,GAC/C,EAQAghD,EAAcnlD,SAAW,WACvB,OAAI7/D,KAAK6jE,UAAkB7jE,KAAKikE,OAAS,GAAKmgD,GAAkBpkH,KAAKgkE,MAAQ,GACtEhkE,KAAKikE,KAAOmgD,GAAkBpkH,KAAKgkE,MAAQ,EACpD,EAWAghD,EAAcxzE,SAAW,SAAkBgzE,GAEzC,IADAA,EAAQA,GAAS,IACL,GAAK,GAAKA,EAAO,MAAM/mD,WAAW,SAC9C,GAAIz9D,KAAKklH,SAAU,MAAO,IAE1B,GAAIllH,KAAKmlH,aAAc,CAErB,GAAInlH,KAAKolH,GAAG36B,GAAY,CAGtB,IAAI46B,EAAYrF,EAAWwE,GACvB5tG,EAAM5W,KAAK4W,IAAIyuG,GACfC,EAAO1uG,EAAID,IAAI0uG,GAAW3uG,IAAI1W,MAClC,OAAO4W,EAAI46B,SAASgzE,GAASc,EAAKL,QAAQzzE,SAASgzE,EACrD,CAAO,MAAO,IAAMxkH,KAAK+f,MAAMyxB,SAASgzE,EAC1C,CAQA,IAJA,IAAIC,EAAezE,EAAWuE,EAAQC,EAAO,GAAIxkH,KAAK6jE,UAClD0hD,EAAMvlH,KACNqI,EAAS,KAEA,CACX,IAAIm9G,EAASD,EAAI3uG,IAAI6tG,GAEjBgB,GADSF,EAAI7uG,IAAI8uG,EAAO7uG,IAAI8tG,IAAeQ,UAAY,GACvCzzE,SAASgzE,GAE7B,IADAe,EAAMC,GACEN,SAAU,OAAOO,EAASp9G,EAChC,KAAOo9G,EAAO9mH,OAAS,GAAG8mH,EAAS,IAAMA,EAEzCp9G,EAAS,GAAKo9G,EAASp9G,CAE3B,CACF,EAQA28G,EAAcU,YAAc,WAC1B,OAAO1lH,KAAKikE,IACd,EAQA+gD,EAAcW,oBAAsB,WAClC,OAAO3lH,KAAKikE,OAAS,CACvB,EAQA+gD,EAAcY,WAAa,WACzB,OAAO5lH,KAAKgkE,GACd,EAQAghD,EAAca,mBAAqB,WACjC,OAAO7lH,KAAKgkE,MAAQ,CACtB,EAQAghD,EAAcc,cAAgB,WAC5B,GAAI9lH,KAAKmlH,aACP,OAAOnlH,KAAKolH,GAAG36B,GAAa,GAAKzqF,KAAK+f,MAAM+lG,gBAG9C,IAFA,IAAIhpF,EAAmB,GAAb98B,KAAKikE,KAAYjkE,KAAKikE,KAAOjkE,KAAKgkE,IAEnC+hD,EAAM,GAAIA,EAAM,GAAkC,IAAnBjpF,EAAM,GAAKipF,GAAvBA,KAE5B,OAAoB,GAAb/lH,KAAKikE,KAAY8hD,EAAM,GAAKA,EAAM,CAC3C,EAQAf,EAAcE,OAAS,WACrB,OAAqB,IAAdllH,KAAKikE,MAA2B,IAAbjkE,KAAKgkE,GACjC,EAOAghD,EAAcgB,IAAMhB,EAAcE,OAOlCF,EAAcG,WAAa,WACzB,OAAQnlH,KAAK6jE,UAAY7jE,KAAKikE,KAAO,CACvC,EAQA+gD,EAAciB,WAAa,WACzB,OAAOjmH,KAAK6jE,UAAY7jE,KAAKikE,MAAQ,CACvC,EAQA+gD,EAAckB,MAAQ,WACpB,OAA0B,IAAP,EAAXlmH,KAAKgkE,IACf,EAQAghD,EAAcmB,OAAS,WACrB,OAA0B,IAAP,EAAXnmH,KAAKgkE,IACf,EASAghD,EAAc/H,OAAS,SAAgBC,GAErC,OADK55G,EAAO45G,KAAQA,EAAQn5C,EAAUm5C,KAClCl9G,KAAK6jE,WAAaq5C,EAAMr5C,UAAY7jE,KAAKikE,OAAS,IAAO,GAAKi5C,EAAMj5C,OAAS,IAAO,IACjFjkE,KAAKikE,OAASi5C,EAAMj5C,MAAQjkE,KAAKgkE,MAAQk5C,EAAMl5C,GACxD,EASAghD,EAAcI,GAAKJ,EAAc/H,OAQjC+H,EAAcoB,UAAY,SAAmBlJ,GAC3C,OAAQl9G,KAAKolH,GAEblI,EACF,EASA8H,EAAcqB,IAAMrB,EAAcoB,UAQlCpB,EAAc1b,GAAK0b,EAAcoB,UAQjCpB,EAAcplD,SAAW,SAAkBs9C,GACzC,OAAOl9G,KAAKsmH,KAEZpJ,GAAS,CACX,EASA8H,EAAchV,GAAKgV,EAAcplD,SAQjColD,EAAcuB,gBAAkB,SAAyBrJ,GACvD,OAAOl9G,KAAKsmH,KAEZpJ,IAAU,CACZ,EASA8H,EAAcwB,IAAMxB,EAAcuB,gBAQlCvB,EAAcla,GAAKka,EAAcuB,gBAQjCvB,EAAcyB,YAAc,SAAqBvJ,GAC/C,OAAOl9G,KAAKsmH,KAEZpJ,GAAS,CACX,EASA8H,EAAc7W,GAAK6W,EAAcyB,YAQjCzB,EAAcrlD,mBAAqB,SAA4Bu9C,GAC7D,OAAOl9G,KAAKsmH,KAEZpJ,IAAU,CACZ,EASA8H,EAAc0B,IAAM1B,EAAcrlD,mBAQlCqlD,EAAcxX,GAAKwX,EAAcrlD,mBASjCqlD,EAAc2B,QAAU,SAAiBzJ,GAEvC,GADK55G,EAAO45G,KAAQA,EAAQn5C,EAAUm5C,IAClCl9G,KAAKolH,GAAGlI,GAAQ,OAAO,EAC3B,IAAI0J,EAAU5mH,KAAKmlH,aACf0B,EAAW3J,EAAMiI,aACrB,OAAIyB,IAAYC,GAAkB,GAC7BD,GAAWC,EAAiB,EAE5B7mH,KAAK6jE,SAEHq5C,EAAMj5C,OAAS,EAAIjkE,KAAKikE,OAAS,GAAKi5C,EAAMj5C,OAASjkE,KAAKikE,MAAQi5C,EAAMl5C,MAAQ,EAAIhkE,KAAKgkE,MAAQ,GAAK,EAAI,EAFtFhkE,KAAK0W,IAAIwmG,GAAOiI,cAAgB,EAAI,CAGjE,EAUAH,EAAcsB,KAAOtB,EAAc2B,QAOnC3B,EAAc8B,OAAS,WACrB,OAAK9mH,KAAK6jE,UAAY7jE,KAAKolH,GAAG36B,GAAmBA,EAC1CzqF,KAAKggB,MAAM9O,IAAI2zG,EACxB,EAQAG,EAAcjlG,IAAMilG,EAAc8B,OAQlC9B,EAAc9zG,IAAM,SAAa61G,GAC1BzjH,EAAOyjH,KAASA,EAAShjD,EAAUgjD,IAExC,IAAIC,EAAMhnH,KAAKikE,OAAS,GACpBgjD,EAAkB,MAAZjnH,KAAKikE,KACXijD,EAAMlnH,KAAKgkE,MAAQ,GACnBmjD,EAAiB,MAAXnnH,KAAKgkE,IACXojD,EAAML,EAAO9iD,OAAS,GACtBojD,EAAoB,MAAdN,EAAO9iD,KACbqjD,EAAMP,EAAO/iD,MAAQ,GAErBujD,EAAM,EACNC,EAAM,EACNC,EAAM,EACNC,EAAM,EAYV,OAVAD,IADAC,GAAOP,GALgB,MAAbJ,EAAO/iD,QAMF,GAGfwjD,IADAC,GAAOP,EAAMI,KACE,GAGfC,IADAC,GAAOP,EAAMI,KACE,GAEfE,GAAOP,EAAMI,EAEN9mD,GANPmnD,GAAO,QAMgB,IATvBC,GAAO,QAQPH,GAAO,QACiC,IAHxCC,GAAO,OAG2CxnH,KAAK6jE,SACzD,EASAmhD,EAAc2C,SAAW,SAAkBC,GAEzC,OADKtkH,EAAOskH,KAAaA,EAAa7jD,EAAU6jD,IACzC5nH,KAAKkR,IAAI02G,EAAW7nG,MAC7B,EASAilG,EAActuG,IAAMsuG,EAAc2C,SAQlC3C,EAAc6C,SAAW,SAAkBC,GACzC,GAAI9nH,KAAKklH,SAAU,OAAOllH,KAG1B,GAFKsD,EAAOwkH,KAAaA,EAAa/jD,EAAU+jD,IAE5C7pH,EAEF,OAAOqiE,EADGriE,EAAU,IAAE+B,KAAKgkE,IAAKhkE,KAAKikE,KAAM6jD,EAAW9jD,IAAK8jD,EAAW7jD,MACjDhmE,EAAe,WAAK+B,KAAK6jE,UAGhD,GAAIikD,EAAW5C,SAAU,OAAOllH,KAAK6jE,SAAWkgD,EAAQC,EACxD,GAAIhkH,KAAKolH,GAAG36B,GAAY,OAAOq9B,EAAW5B,QAAUz7B,EAAYu5B,EAChE,GAAI8D,EAAW1C,GAAG36B,GAAY,OAAOzqF,KAAKkmH,QAAUz7B,EAAYu5B,EAEhE,GAAIhkH,KAAKmlH,aACP,OAAI2C,EAAW3C,aAAqBnlH,KAAK+f,MAAMpJ,IAAImxG,EAAW/nG,OAAmB/f,KAAK+f,MAAMpJ,IAAImxG,GAAY/nG,MACvG,GAAI+nG,EAAW3C,aAAc,OAAOnlH,KAAK2W,IAAImxG,EAAW/nG,OAAOA,MAGtE,GAAI/f,KAAKgwG,GAAG4U,IAAekD,EAAW9X,GAAG4U,GAAa,OAAO5E,EAAWhgH,KAAK6/D,WAAaioD,EAAWjoD,WAAY7/D,KAAK6jE,UAGtH,IAAImjD,EAAMhnH,KAAKikE,OAAS,GACpBgjD,EAAkB,MAAZjnH,KAAKikE,KACXijD,EAAMlnH,KAAKgkE,MAAQ,GACnBmjD,EAAiB,MAAXnnH,KAAKgkE,IACXojD,EAAMU,EAAW7jD,OAAS,GAC1BojD,EAAwB,MAAlBS,EAAW7jD,KACjBqjD,EAAMQ,EAAW9jD,MAAQ,GACzB+jD,EAAuB,MAAjBD,EAAW9jD,IACjBujD,EAAM,EACNC,EAAM,EACNC,EAAM,EACNC,EAAM,EAqBV,OAnBAD,IADAC,GAAOP,EAAMY,KACE,GAGfP,IADAC,GAAOP,EAAMa,KACE,GACfN,GAAO,MAEPD,IADAC,GAAON,EAAMG,KACE,GAGfC,IADAC,GAAOP,EAAMc,KACE,GACfP,GAAO,MAEPD,IADAC,GAAON,EAAMI,KACE,GACfE,GAAO,MAEPD,IADAC,GAAOL,EAAME,KACE,GAEfE,GAAOP,EAAMe,EAAMd,EAAMK,EAAMJ,EAAMG,EAAMF,EAAMC,EAE1C9mD,GAZPmnD,GAAO,QAYgB,IAlBvBC,GAAO,QAiBPH,GAAO,QACiC,IAHxCC,GAAO,OAG2CxnH,KAAK6jE,SACzD,EASAmhD,EAAcruG,IAAMquG,EAAc6C,SASlC7C,EAAcgD,OAAS,SAAgBC,GAErC,GADK3kH,EAAO2kH,KAAUA,EAAUlkD,EAAUkkD,IACtCA,EAAQ/C,SAAU,MAAM1jH,MAAM,oBAWhC,IAKE0mH,EAAQ3C,EAAKjxF,EAdjB,GAAIr2B,EAIF,OAAK+B,KAAK6jE,WAA2B,aAAf7jE,KAAKikE,OAAyC,IAAjBgkD,EAAQjkD,MAAgC,IAAlBikD,EAAQhkD,KAM1E3D,GADItgE,KAAK6jE,SAAW5lE,EAAY,MAAIA,EAAY,OAAG+B,KAAKgkE,IAAKhkE,KAAKikE,KAAMgkD,EAAQjkD,IAAKikD,EAAQhkD,MAC/EhmE,EAAe,WAAK+B,KAAK6jE,UAJrC7jE,KAOX,GAAIA,KAAKklH,SAAU,OAAOllH,KAAK6jE,SAAWkgD,EAAQC,EAGlD,GAAKhkH,KAAK6jE,SA0BH,CAIL,GADKokD,EAAQpkD,WAAUokD,EAAUA,EAAQE,cACrCF,EAAQ9Z,GAAGnuG,MAAO,OAAO+jH,EAC7B,GAAIkE,EAAQ9Z,GAAGnuG,KAAKooH,KAAK,IACvB,OAAOtD,EACTxwF,EAAMyvF,CACR,KAlCoB,CAGlB,GAAI/jH,KAAKolH,GAAG36B,GACV,OAAIw9B,EAAQ7C,GAAGP,IAAQoD,EAAQ7C,GAAGL,GAAiBt6B,EAC1Cw9B,EAAQ7C,GAAG36B,GAAmBo6B,GAGrCqD,EADeloH,KAAKqoH,IAAI,GACNzxG,IAAIqxG,GAASK,IAAI,IAExBlD,GAAGpB,GACLiE,EAAQ9C,aAAeN,EAAME,GAEpCQ,EAAMvlH,KAAK0W,IAAIuxG,EAAQtxG,IAAIuxG,IAC3B5zF,EAAM4zF,EAAOh3G,IAAIq0G,EAAI3uG,IAAIqxG,KAIxB,GAAIA,EAAQ7C,GAAG36B,GAAY,OAAOzqF,KAAK6jE,SAAWkgD,EAAQC,EAEjE,GAAIhkH,KAAKmlH,aACP,OAAI8C,EAAQ9C,aAAqBnlH,KAAK+f,MAAMnJ,IAAIqxG,EAAQloG,OACjD/f,KAAK+f,MAAMnJ,IAAIqxG,GAASloG,MAC1B,GAAIkoG,EAAQ9C,aAAc,OAAOnlH,KAAK4W,IAAIqxG,EAAQloG,OAAOA,MAEhEuU,EAAM0vF,CACR,CAiBA,IAFAuB,EAAMvlH,KAECulH,EAAImB,IAAIuB,IAAU,CAGvBC,EAASrpH,KAAKu/B,IAAI,EAAGv/B,KAAK0f,MAAMgnG,EAAI1lD,WAAaooD,EAAQpoD,aAUzD,IAPA,IAAI0oD,EAAO1pH,KAAKE,KAAKF,KAAK6gB,IAAIwoG,GAAUrpH,KAAKu7G,KACzC5xB,EAAQ+/B,GAAQ,GAAK,EAAIhE,EAAQ,EAAGgE,EAAO,IAG/CC,EAAYxI,EAAWkI,GACnBO,EAAYD,EAAU7xG,IAAIsxG,GAEvBQ,EAAUtD,cAAgBsD,EAAUta,GAAGoX,IAG5CkD,GADAD,EAAYxI,EADZkI,GAAU1/B,EACqBxoF,KAAK6jE,WACdltD,IAAIsxG,GAKxBO,EAAUtD,WAAUsD,EAAY3D,GACpCvwF,EAAMA,EAAIpjB,IAAIs3G,GACdjD,EAAMA,EAAI7uG,IAAI+xG,EAChB,CAEA,OAAOn0F,CACT,EASA0wF,EAAcpuG,IAAMouG,EAAcgD,OAQlChD,EAAc0D,OAAS,SAAgBT,GAGrC,OAFK3kH,EAAO2kH,KAAUA,EAAUlkD,EAAUkkD,IAEtChqH,EAEKqiE,GADItgE,KAAK6jE,SAAW5lE,EAAY,MAAIA,EAAY,OAAG+B,KAAKgkE,IAAKhkE,KAAKikE,KAAMgkD,EAAQjkD,IAAKikD,EAAQhkD,MAC/EhmE,EAAe,WAAK+B,KAAK6jE,UAGzC7jE,KAAK0W,IAAI1W,KAAK4W,IAAIqxG,GAAStxG,IAAIsxG,GACxC,EASAjD,EAAcjJ,IAAMiJ,EAAc0D,OAQlC1D,EAAcO,IAAMP,EAAc0D,OAOlC1D,EAAchlG,IAAM,WAClB,OAAOsgD,GAAUtgE,KAAKgkE,KAAMhkE,KAAKikE,KAAMjkE,KAAK6jE,SAC9C,EAQAmhD,EAAc2D,kBAAoB,WAChC,OAAO3oH,KAAKikE,KAAOplE,KAAK4kH,MAAMzjH,KAAKikE,MAAQplE,KAAK4kH,MAAMzjH,KAAKgkE,KAAO,EACpE,EASAghD,EAAc4D,IAAM5D,EAAc2D,kBAOlC3D,EAAc6D,mBAAqB,WACjC,OAAO7oH,KAAKgkE,IAAMw/C,EAAMxjH,KAAKgkE,KAAOw/C,EAAMxjH,KAAKikE,MAAQ,EACzD,EASA+gD,EAAc8D,IAAM9D,EAAc6D,mBAQlC7D,EAAcpoG,IAAM,SAAasgG,GAE/B,OADK55G,EAAO45G,KAAQA,EAAQn5C,EAAUm5C,IAC/B58C,EAAStgE,KAAKgkE,IAAMk5C,EAAMl5C,IAAKhkE,KAAKikE,KAAOi5C,EAAMj5C,KAAMjkE,KAAK6jE,SACrE,EASAmhD,EAAc/kG,GAAK,SAAYi9F,GAE7B,OADK55G,EAAO45G,KAAQA,EAAQn5C,EAAUm5C,IAC/B58C,EAAStgE,KAAKgkE,IAAMk5C,EAAMl5C,IAAKhkE,KAAKikE,KAAOi5C,EAAMj5C,KAAMjkE,KAAK6jE,SACrE,EASAmhD,EAAcniG,IAAM,SAAaq6F,GAE/B,OADK55G,EAAO45G,KAAQA,EAAQn5C,EAAUm5C,IAC/B58C,EAAStgE,KAAKgkE,IAAMk5C,EAAMl5C,IAAKhkE,KAAKikE,KAAOi5C,EAAMj5C,KAAMjkE,KAAK6jE,SACrE,EASAmhD,EAAc+D,UAAY,SAAmBC,GAE3C,OADI1lH,EAAO0lH,KAAUA,EAAUA,EAAQ/D,SACf,IAAnB+D,GAAW,IAAkBhpH,KAAcgpH,EAAU,GAAW1oD,EAAStgE,KAAKgkE,KAAOglD,EAAShpH,KAAKikE,MAAQ+kD,EAAUhpH,KAAKgkE,MAAQ,GAAKglD,EAAShpH,KAAK6jE,UAAsBvD,EAAS,EAAGtgE,KAAKgkE,KAAOglD,EAAU,GAAIhpH,KAAK6jE,SAC7N,EASAmhD,EAAcsD,IAAMtD,EAAc+D,UAQlC/D,EAAciE,WAAa,SAAoBD,GAE7C,OADI1lH,EAAO0lH,KAAUA,EAAUA,EAAQ/D,SACf,IAAnB+D,GAAW,IAAkBhpH,KAAcgpH,EAAU,GAAW1oD,EAAStgE,KAAKgkE,MAAQglD,EAAUhpH,KAAKikE,MAAQ,GAAK+kD,EAAShpH,KAAKikE,MAAQ+kD,EAAShpH,KAAK6jE,UAAsBvD,EAAStgE,KAAKikE,MAAQ+kD,EAAU,GAAIhpH,KAAKikE,MAAQ,EAAI,GAAK,EAAGjkE,KAAK6jE,SACrP,EASAmhD,EAAcqD,IAAMrD,EAAciE,WAQlCjE,EAAckE,mBAAqB,SAA4BF,GAE7D,OADI1lH,EAAO0lH,KAAUA,EAAUA,EAAQ/D,SACf,IAAnB+D,GAAW,IAAkBhpH,KAC9BgpH,EAAU,GAAW1oD,EAAStgE,KAAKgkE,MAAQglD,EAAUhpH,KAAKikE,MAAQ,GAAK+kD,EAAShpH,KAAKikE,OAAS+kD,EAAShpH,KAAK6jE,UACrFvD,EAAX,KAAZ0oD,EAAgChpH,KAAKikE,KACzBjkE,KAAKikE,OAAS+kD,EAAU,GADO,EAAGhpH,KAAK6jE,SAEzD,EASAmhD,EAAcoD,KAAOpD,EAAckE,mBAQnClE,EAAcmE,MAAQnE,EAAckE,mBAQpClE,EAAcoE,WAAa,SAAoBJ,GAC7C,IAAI9+G,EAEJ,OADI5G,EAAO0lH,KAAUA,EAAUA,EAAQ/D,SACf,IAAnB+D,GAAW,IAAkBhpH,KAClB,KAAZgpH,EAAuB1oD,EAAStgE,KAAKikE,KAAMjkE,KAAKgkE,IAAKhkE,KAAK6jE,UAE1DmlD,EAAU,IACZ9+G,EAAI,GAAK8+G,EACF1oD,EAAStgE,KAAKgkE,KAAOglD,EAAUhpH,KAAKikE,OAAS/5D,EAAGlK,KAAKikE,MAAQ+kD,EAAUhpH,KAAKgkE,MAAQ95D,EAAGlK,KAAK6jE,YAIrG35D,EAAI,IADJ8+G,GAAW,IAEJ1oD,EAAStgE,KAAKikE,MAAQ+kD,EAAUhpH,KAAKgkE,MAAQ95D,EAAGlK,KAAKgkE,KAAOglD,EAAUhpH,KAAKikE,OAAS/5D,EAAGlK,KAAK6jE,UACrG,EASAmhD,EAAcqE,KAAOrE,EAAcoE,WAQnCpE,EAAcsE,YAAc,SAAqBN,GAC/C,IAAI9+G,EAEJ,OADI5G,EAAO0lH,KAAUA,EAAUA,EAAQ/D,SACf,IAAnB+D,GAAW,IAAkBhpH,KAClB,KAAZgpH,EAAuB1oD,EAAStgE,KAAKikE,KAAMjkE,KAAKgkE,IAAKhkE,KAAK6jE,UAE1DmlD,EAAU,IACZ9+G,EAAI,GAAK8+G,EACF1oD,EAAStgE,KAAKikE,MAAQ/5D,EAAIlK,KAAKgkE,MAAQglD,EAAShpH,KAAKgkE,KAAO95D,EAAIlK,KAAKikE,OAAS+kD,EAAShpH,KAAK6jE,YAIrG35D,EAAI,IADJ8+G,GAAW,IAEJ1oD,EAAStgE,KAAKgkE,KAAO95D,EAAIlK,KAAKikE,OAAS+kD,EAAShpH,KAAKikE,MAAQ/5D,EAAIlK,KAAKgkE,MAAQglD,EAAShpH,KAAK6jE,UACrG,EASAmhD,EAAcuE,KAAOvE,EAAcsE,YAOnCtE,EAAcwE,SAAW,WACvB,OAAKxpH,KAAK6jE,SACHvD,EAAStgE,KAAKgkE,IAAKhkE,KAAKikE,MAAM,GADVjkE,IAE7B,EAQAglH,EAAcmD,WAAa,WACzB,OAAInoH,KAAK6jE,SAAiB7jE,KACnBsgE,EAAStgE,KAAKgkE,IAAKhkE,KAAKikE,MAAM,EACvC,EASA+gD,EAAcyE,QAAU,SAAiB3e,GACvC,OAAOA,EAAK9qG,KAAK0pH,YAAc1pH,KAAK2pH,WACtC,EAQA3E,EAAc0E,UAAY,WACxB,IAAI9N,EAAK57G,KAAKikE,KACV03C,EAAK37G,KAAKgkE,IACd,MAAO,CAAM,IAAL23C,EAAWA,IAAO,EAAI,IAAMA,IAAO,GAAK,IAAMA,IAAO,GAAS,IAALC,EAAWA,IAAO,EAAI,IAAMA,IAAO,GAAK,IAAMA,IAAO,GACxH,EAQAoJ,EAAc2E,UAAY,WACxB,IAAI/N,EAAK57G,KAAKikE,KACV03C,EAAK37G,KAAKgkE,IACd,MAAO,CAAC43C,IAAO,GAAIA,IAAO,GAAK,IAAMA,IAAO,EAAI,IAAW,IAALA,EAAWD,IAAO,GAAIA,IAAO,GAAK,IAAMA,IAAO,EAAI,IAAW,IAALA,EACjH,EAUA73C,EAAK8lD,UAAY,SAAmB/+D,EAAOgZ,EAAUinC,GACnD,OAAOA,EAAKhnC,EAAK+lD,YAAYh/D,EAAOgZ,GAAYC,EAAKgmD,YAAYj/D,EAAOgZ,EAC1E,EASAC,EAAK+lD,YAAc,SAAqBh/D,EAAOgZ,GAC7C,OAAO,IAAIC,EAAKjZ,EAAM,GAAKA,EAAM,IAAM,EAAIA,EAAM,IAAM,GAAKA,EAAM,IAAM,GAAIA,EAAM,GAAKA,EAAM,IAAM,EAAIA,EAAM,IAAM,GAAKA,EAAM,IAAM,GAAIgZ,EAC1I,EASAC,EAAKgmD,YAAc,SAAqBj/D,EAAOgZ,GAC7C,OAAO,IAAIC,EAAKjZ,EAAM,IAAM,GAAKA,EAAM,IAAM,GAAKA,EAAM,IAAM,EAAIA,EAAM,GAAIA,EAAM,IAAM,GAAKA,EAAM,IAAM,GAAKA,EAAM,IAAM,EAAIA,EAAM,GAAIgZ,EAC1I,EAEA,IAAIkmD,EAAWjmD,EAEf,OADA9mE,EAAQ20E,QAAUo4C,EACX,YAAa/sH,EAAUA,EAAQ20E,QAAU30E,CACjD,CAp5CU,CAo5CR,CAAC,QACkF,KAA3B,EAAF,WAAe,OAAO8mE,CAAO,UAA/B,OAA+B,Y,kCCn5CtFtkE,OAAOC,eAAezC,EAAS,aAAc,CAAE2C,OAAO,IACtD3C,EAAQ8I,eAAiB9I,EAAQuC,qBAAkB,EACnD,MAAMyqH,EAAW,IAAIjpH,IACfkpH,EAA2B,GA2CjCjtH,EAAQuC,gBAhCgB,CAACc,EAAMiF,EAAS4kH,KACpC,IAAI5kH,GAAmC,mBAAjBA,EAAQjI,MAAwE,mBAA1CiI,EAAQhI,8BA6BpE,MAAM,IAAIqwB,UAAU,uBA7BpB,CACI,MAAMw8F,EAAiBH,EAASloH,IAAIzB,GACpC,QAAuBkC,IAAnB4nH,EACAH,EAAS7oH,IAAId,EAAM,CAAEiF,UAAS4kH,iBAE7B,IAAIC,EAAeD,SAAWA,EAE/B,OAEC,GAAIC,EAAeD,WAAaA,GAC7BC,EAAe7kH,UAAYA,EAC3B,MAAM,IAAI9D,MAAM,4BAA4BnB,qBAAwB6pH,IAE5E,CACA,GAAIA,GAAY,EAAG,CACf,MAAMvmH,EAAIsmH,EAAyBr9G,QAAQvM,IAChC,IAAPsD,GACAsmH,EAAyB9+E,OAAOxnC,EAAG,GAEvC,IAAK,IAAIA,EAAI,EAAGA,EAAIsmH,EAAyBtrH,OAAQgF,IACjD,GAAIqmH,EAASloH,IAAImoH,EAAyBtmH,IAAIumH,UAAYA,EAEtD,YADAD,EAAyB9+E,OAAOxnC,EAAG,EAAGtD,GAI9C4pH,EAAyBllH,KAAK1E,EAClC,CAEJ,CAC0C,EA6C9CrD,EAAQ8I,eAlCeQ,MAAO8jH,IAC1B,MAAMC,EAAuC,IAAxBD,EAAazrH,OAAesrH,EAA2BG,EACtEz+C,EAAS,GACf,IAAK,MAAM2+C,KAAeD,EAAc,CACpC,MAAME,EAAcP,EAASloH,IAAIwoH,GACjC,GAAIC,EAAa,CACb,GAAIA,EAAYz4B,YACZ,OAAOy4B,EAAYjlH,QAElB,GAAIilH,EAAYx4B,QACjB,SAEJ,MAAMy4B,IAAmBD,EAAYE,YACrC,IAMI,OALKD,IACDD,EAAYE,YAAcF,EAAYjlH,QAAQjI,cAE5CktH,EAAYE,YAClBF,EAAYz4B,aAAc,EACnBy4B,EAAYjlH,OACvB,CACA,MAAOuB,GACE2jH,GACD7+C,EAAO5mE,KAAK,CAAE1E,KAAMiqH,EAAa1mF,IAAK/8B,IAE1C0jH,EAAYx4B,SAAU,CAC1B,CACA,eACWw4B,EAAYE,WACvB,CACJ,CACJ,CACA,MAAM,IAAIjpH,MAAM,oCAAoCmqE,EAAOvrE,KAAIyG,GAAK,IAAIA,EAAExG,SAASwG,EAAE+8B,QAAOtjC,KAAK,QAAQ,C,oCCvF7Gd,OAAOC,eAAezC,EAAS,aAAc,CAAE2C,OAAO,IACtD3C,EAAQuC,qBAAkB,EAC1B,IAAImrH,EAAoB,EAAQ,MAChClrH,OAAOC,eAAezC,EAAS,kBAAmB,CAAE6C,YAAY,EAAMiC,IAAK,WAAc,OAAO4oH,EAAkBnrH,eAAiB,G,oCCHnIC,OAAOC,eAAezC,EAAS,aAAc,CAAE2C,OAAO,IACtD3C,EAAQgB,SAAM,EACd,MAAM2sH,EAAe,EAAQ,MAC7B,IAAIC,EAAgB,UACpB5tH,EAAQgB,IAAM,CACVC,KAAM,CAAC,EACP2H,MAAO,CAAC,EACRojE,OAAQ,CAAC,EACTtpE,SAAU,CAAEmrH,OAAQF,EAAa/qH,SAC7Bg/C,aAASj/C,GACT,QAAc4C,IAAV5C,EAAJ,CAGA,GAAqB,iBAAVA,IAA2F,IAArE,CAAC,UAAW,OAAQ,UAAW,QAAS,SAASiN,QAAQjN,GACtF,MAAM,IAAI6B,MAAM,8BAA8B7B,KAElDirH,EAAgBjrH,CAJhB,CAKJ,EACIi/C,eACA,OAAOgsE,CACX,GAGJprH,OAAOC,eAAezC,EAAQgB,IAAK,WAAY,CAAE6B,YAAY,G,oCCvB7DL,OAAOC,eAAezC,EAAS,aAAc,CAAE2C,OAAO,IACtD3C,EAAQgB,SAAM,EACd,MAAM8sH,EAAgB,EAAQ,MAI9B9tH,EAAQgB,IAAM8sH,EAAc9sH,G,oCCN5B,IAAI+sH,EAAmB/qH,MAAQA,KAAK+qH,kBAAqBvrH,OAAOmgD,OAAS,SAAUn6C,EAAG6gF,EAAGnsD,EAAG8wF,QAC7EzoH,IAAPyoH,IAAkBA,EAAK9wF,GAC3B,IAAI+wF,EAAOzrH,OAAO0rH,yBAAyB7kC,EAAGnsD,GACzC+wF,KAAS,QAASA,GAAQ5kC,EAAEo2B,WAAawO,EAAKnK,UAAYmK,EAAKlK,gBAClEkK,EAAO,CAAEprH,YAAY,EAAMiC,IAAK,WAAa,OAAOukF,EAAEnsD,EAAI,IAE5D16B,OAAOC,eAAe+F,EAAGwlH,EAAIC,EAChC,EAAI,SAAUzlH,EAAG6gF,EAAGnsD,EAAG8wF,QACTzoH,IAAPyoH,IAAkBA,EAAK9wF,GAC3B10B,EAAEwlH,GAAM3kC,EAAEnsD,EACb,GACGixF,EAAgBnrH,MAAQA,KAAKmrH,cAAiB,SAAS9kC,EAAGrpF,GAC1D,IAAK,IAAIihC,KAAKooD,EAAa,YAANpoD,GAAoBz+B,OAAO+gG,UAAUnpE,eAAeC,KAAKr6B,EAASihC,IAAI8sF,EAAgB/tH,EAASqpF,EAAGpoD,EAC3H,EACAz+B,OAAOC,eAAezC,EAAS,aAAc,CAAE2C,OAAO,IAgBtDwrH,EAAa,EAAQ,MAAiBnuH,GACtCmuH,EAAa,EAAQ,MAAanuH,GAClCmuH,EAAa,EAAQ,MAA2BnuH,GAChDmuH,EAAa,EAAQ,MAAgBnuH,GACrCmuH,EAAa,EAAQ,MAAoBnuH,GACzCmuH,EAAa,EAAQ,MAA0BnuH,E,oCCnC/CwC,OAAOC,eAAezC,EAAS,aAAc,CAAE2C,OAAO,IACtD3C,EAAQ4kD,sBAAmB,EAC3B,MAAM8oE,EAAoB,EAAQ,MAC5BU,EAAc,EAAQ,MAC5B,MAAMxpE,EACF7Z,YAAY9oC,GACRe,KAAKf,QAAUA,CACnB,CACAqH,UAAUq0D,EAAOxc,EAAMC,GACnB,MAAMw3C,EAAU,CAAC,EACjB,IAAIp4F,EAAU,CAAC,EAEf,GAAqB,iBAAVm9D,GAAgC,OAAVA,GAAkBA,aAAiBywD,EAAYvnH,QAAUH,MAAM+lC,QAAQkxB,GACpG,MAAM,IAAIhtC,UAAU,iGAExB,IAAI09F,GAAiB,EAErB,GAAoB,iBAATltE,EAAmB,CAC1B,GAAa,OAATA,EACA,MAAM,IAAIxwB,UAAU,2CAExB,GAAIwwB,aAAgBitE,EAAYvnH,OAC5B,MAAM,IAAI8pB,UAAU,gCAExB,GAAIjqB,MAAM+lC,QAAQ0U,GAAO,CACrB,GAAoB,IAAhBA,EAAKx/C,OACL,MAAM,IAAIgvB,UAAU,uCAExB09F,GAAiB,EAEjB,IAAK,MAAMhrH,KAAQ89C,EAAM,CACrB,GAAoB,iBAAT99C,EACP,MAAM,IAAIstB,UAAU,kDAExB,IAAwC,IAApC3tB,KAAK06D,YAAY9tD,QAAQvM,GACzB,MAAM,IAAIo9D,WAAW,2CAA2Cp9D,MAEpEu1F,EAAQv1F,GAAQ,IACpB,CACA,GAAoB,iBAAT+9C,GAA8B,OAATA,EAC5B5gD,EAAU4gD,OAET,QAAoB,IAATA,EACZ,MAAM,IAAIzwB,UAAU,+BAE5B,KACK,CAGD,IAAI29F,GAAY,EAChB,MAAMC,EAAW/rH,OAAOU,oBAAoBi+C,GAC5C,IAAK,MAAM99C,KAAQL,KAAK06D,YACpB,IAAgC,IAA5B6wD,EAAS3+G,QAAQvM,GAAc,CAC/B,MAAMyS,EAAIqrC,EAAK99C,IACL,OAANyS,GAAcA,aAAas4G,EAAYvnH,UACvCynH,GAAY,EACZD,GAAiB,EACjBz1B,EAAQv1F,GAAQyS,EAExB,CAEJ,GAAIw4G,GACA,GAAoB,iBAATltE,GAA8B,OAATA,EAC5B5gD,EAAU4gD,OAET,QAAoB,IAATA,EACZ,MAAM,IAAIzwB,UAAU,qCAIxBnwB,EAAU2gD,CAElB,CACJ,MACK,QAAoB,IAATA,EACZ,MAAM,IAAIxwB,UAAU,2DAGxB,IAAK,MAAMttB,KAAQL,KAAK4K,WACpB,QAA2B,IAAhB+vD,EAAMt6D,GACb,MAAM,IAAImB,MAAM,UAAUnB,6BAIlC,GAAIgrH,EACA,IAAK,MAAMhrH,KAAQL,KAAK06D,YACpBk7B,EAAQv1F,GAAQ,KAIxB,MAAM21F,QAAgBh2F,KAAKf,QAAQsZ,IAAIoiD,EAAOi7B,EAASp4F,GACjDguH,EAAc,CAAC,EACrB,IAAK,MAAM/pH,KAAOu0F,EACd,GAAIx2F,OAAO43B,eAAeC,KAAK2+D,EAASv0F,GAAM,CAC1C,MAAM4G,EAAS2tF,EAAQv0F,GACnB4G,aAAkB+iH,EAAYvnH,OAC9B2nH,EAAY/pH,GAAO4G,EAGnBmjH,EAAY/pH,GAAO,IAAI2pH,EAAYvnH,OAAOwE,EAAO3G,KAAM2G,EAAO4R,KAAM5R,EAAO4P,KAEnF,CAEJ,OAAOuzG,CACX,CACAllH,gBACI,OAAOtG,KAAKf,QAAQ0G,SACxB,CACA8lH,oBAAoBvtE,EAAMC,EAAMC,EAAMC,GAElC,IAAIqtE,EACAluH,EAAU,CAAC,EACf,GAAoB,iBAAT0gD,GAEP,GADAwtE,EAAuBxtE,EACH,iBAATC,GAA8B,OAATA,EAC5B3gD,EAAU2gD,OAET,QAAoB,IAATA,EACZ,MAAM,IAAIxwB,UAAU,qCAGvB,GAAIuwB,aAAgBjsC,YAErB,GADAy5G,EAAuBxtE,EACH,iBAATC,GAA8B,OAATA,EAC5B3gD,EAAU2gD,OAET,QAAoB,IAATA,EACZ,MAAM,IAAIxwB,UAAU,oCAGvB,MAAIuwB,aAAgBrsC,aACS,oBAAtBsqF,mBAAqCj+C,aAAgBi+C,mBAyC7D,MAAM,IAAIxuE,UAAU,uDAzC6D,CACjF,MAAMzU,EAASglC,EACf,IAAI1V,EAAa,EACbC,EAAayV,EAAKzV,WACtB,GAAoB,iBAAT0V,GAA8B,OAATA,EAC5B3gD,EAAU2gD,OAET,GAAoB,iBAATA,EAAmB,CAE/B,GADA3V,EAAa2V,GACR7/C,OAAOoyF,cAAcloD,GACtB,MAAM,IAAIi1B,WAAW,oCAEzB,GAAIj1B,EAAa,GAAKA,GAActvB,EAAOuvB,WACvC,MAAM,IAAIg1B,WAAW,oCAAoCvkD,EAAOuvB,gBAGpE,GADAA,EAAayV,EAAKzV,WAAaD,EACX,iBAAT4V,EAAmB,CAE1B,GADA3V,EAAa2V,GACR9/C,OAAOoyF,cAAcjoD,GACtB,MAAM,IAAIg1B,WAAW,oCAEzB,GAAIh1B,GAAc,GAAKD,EAAaC,EAAavvB,EAAOuvB,WACpD,MAAM,IAAIg1B,WAAW,oCAAoCvkD,EAAOuvB,WAAaD,OAEjF,GAAoB,iBAAT6V,GAA8B,OAATA,EAC5B7gD,EAAU6gD,OAET,QAAoB,IAATA,EACZ,MAAM,IAAI1wB,UAAU,+BAE5B,MACK,QAAoB,IAATywB,EACZ,MAAM,IAAIzwB,UAAU,iCAE5B,MACK,QAAoB,IAATwwB,EACZ,MAAM,IAAIxwB,UAAU,gCAExB+9F,EAAuB,IAAIz5G,WAAWiH,EAAQsvB,EAAYC,EAC9D,CAGA,CAEA,MACM2hF,GADM5sH,EAAQ84F,oBAAsB,IACjBl2F,KAAIuD,GAAkB,iBAANA,EAAiBA,EAAIA,EAAEtD,OAC1DiF,QAAgB,EAAIolH,EAAkB5kH,gBAAgBskH,GACtDnrH,QAAgBqG,EAAQhI,8BAA8BouH,EAAsBluH,GAClF,OAAO,IAAIokD,EAAiB3iD,EAChC,CACAg8D,iBACIj7D,KAAKf,QAAQg8D,gBACjB,CACAC,eACIl7D,KAAKf,QAAQi8D,cACjB,CACItwD,iBACA,OAAO5K,KAAKf,QAAQ2L,UACxB,CACI8vD,kBACA,OAAO16D,KAAKf,QAAQy7D,WACxB,EAEJ19D,EAAQ4kD,iBAAmBA,C,oCClM3BpiD,OAAOC,eAAezC,EAAS,aAAc,CAAE2C,OAAO,IACtD3C,EAAQ4kD,sBAAmB,EAC3B,MAAM+pE,EAA8B,EAAQ,MAE5C3uH,EAAQ4kD,iBAAmB+pE,EAA4B/pE,gB,kCCJvDpiD,OAAOC,eAAezC,EAAS,aAAc,CAAE2C,OAAO,G,kCCAtDH,OAAOC,eAAezC,EAAS,aAAc,CAAE2C,OAAO,IACtD3C,EAAQ4uH,kBAAoB5uH,EAAQ6uH,qBAAkB,EA4FtD7uH,EAAQ6uH,gBAxFgB,CAACrzG,EAAQhb,KAC7B,MAAM8uC,EAASa,SAASC,cAAc,UACtCd,EAAOnkC,MAAQqQ,EAAOP,KAAK,GAC3Bq0B,EAAOlkC,OAASoQ,EAAOP,KAAK,GAC5B,MAAM6zG,EAAkBx/E,EAAOQ,WAAW,MAC1C,GAAuB,MAAnBg/E,EAAyB,CAEzB,IAAI3jH,EACAC,OAC0B7F,IAA1B/E,GAASuuH,cAAuD,SAAzBvuH,EAAQuuH,cAC/C5jH,EAAQqQ,EAAOP,KAAK,GACpB7P,EAASoQ,EAAOP,KAAK,KAGrB9P,EAAQqQ,EAAOP,KAAK,GACpB7P,EAASoQ,EAAOP,KAAK,IAEzB,MAAM+zG,OAAkCzpH,IAApB/E,GAASiqC,OAAuBjqC,EAAQiqC,OAAS,MAC/DwkF,EAAOzuH,GAASyuH,KACtB,IAAIC,EACAC,OACS5pH,IAAT0pH,QAAoC1pH,IAAd0pH,EAAKtoG,KAC3BuoG,EAAW,CAAC,IAAK,IAAK,IAAK,KAGA,iBAAfD,EAAS,KACjBC,EAAW,CAACD,EAAKtoG,KAAMsoG,EAAKtoG,KAAMsoG,EAAKtoG,KAAMsoG,EAAKtoG,OAGlDuoG,EAAW,CAACD,EAAKtoG,KAAK,GAAIsoG,EAAKtoG,KAAK,GAAIsoG,EAAKtoG,KAAK,GAAI,QACjCphB,IAAjB0pH,EAAKtoG,KAAK,KACVuoG,EAAS,GAAKD,EAAKtoG,KAAK,UAIvBphB,IAAT0pH,QAAoC1pH,IAAd0pH,EAAKx6F,KAC3B06F,EAAW,CAAC,EAAG,EAAG,EAAG,GAGM,iBAAfF,EAAS,KACjBE,EAAW,CAACF,EAAKx6F,KAAMw6F,EAAKx6F,KAAMw6F,EAAKx6F,KAAMw6F,EAAKx6F,OAGlD06F,EAAW,CAACF,EAAKx6F,KAAK,GAAIw6F,EAAKx6F,KAAK,GAAIw6F,EAAKx6F,KAAK,GAAI,QACjClvB,IAAjB0pH,EAAKx6F,KAAK,KACV06F,EAAS,GAAKF,EAAKx6F,KAAK,KAIpC,MAAMlnB,EAASnC,EAASD,EAExB,IAAIikH,EAAiB,EAAGC,EAAiB9hH,EAAQ+hH,EAA0B,EAAT/hH,EAAYgiH,GAAkB,EAE5E,SAAhBP,GACAI,EAAiB,EACjBC,EAAiB9hH,EACjB+hH,EAA0B,EAAT/hH,EACjBgiH,EAA0B,EAAThiH,GAEI,QAAhByhH,GACLI,EAAiB,EACjBC,EAAiB9hH,EACjB+hH,EAA0B,EAAT/hH,GAEI,QAAhByhH,IACLI,EAAiB,EACjBE,EAAiB/hH,EACjB8hH,EAA0B,EAAT9hH,GAErB,IAAK,IAAI5G,EAAI,EAAGA,EAAIyE,EAAQzE,IACxB,IAAK,IAAI67B,EAAI,EAAGA,EAAIr3B,EAAOq3B,IAAK,CAC5B,MAAM6nE,GAAK7uF,EAAOyB,KAAKmyG,KAAoBD,EAAS,IAAMD,EAAS,GAC7DzjB,GAAKjwF,EAAOyB,KAAKoyG,KAAoBF,EAAS,IAAMD,EAAS,GAC7DxoG,GAAKlL,EAAOyB,KAAKqyG,KAAoBH,EAAS,IAAMD,EAAS,GAC7DpxC,GAAwB,IAApByxC,EACN,KACC/zG,EAAOyB,KAAKsyG,KAAoBJ,EAAS,IAAMD,EAAS,GAE7DJ,EAAgBU,UAAY,QAAUnlB,EAAI,IAAMoB,EAAI,IAAM/kF,EAAI,IAAMo3D,EAAI,IACxEgxC,EAAgBW,SAASjtF,EAAG77B,EAAG,EAAG,EACtC,CAEJ,OAAO2oC,EAAOogF,WAClB,CAEI,MAAM,IAAIlrH,MAAM,4BACpB,EAmGJxE,EAAQ4uH,kBA7FkB,CAACpzG,EAAQhb,KAC/B,MAAMsuH,EAAkB3+E,SAASC,cAAc,UAAUN,WAAW,MACpE,IAAI6/E,EACJ,GAAuB,MAAnBb,EAsFA,MAAM,IAAItqH,MAAM,6BAtFS,CAEzB,IAAI2G,EACAC,EACAwS,OAC0BrY,IAA1B/E,GAASuuH,cAAuD,SAAzBvuH,EAAQuuH,cAC/C5jH,EAAQqQ,EAAOP,KAAK,GACpB7P,EAASoQ,EAAOP,KAAK,GACrB2C,EAAWpC,EAAOP,KAAK,KAGvB9P,EAAQqQ,EAAOP,KAAK,GACpB7P,EAASoQ,EAAOP,KAAK,GACrB2C,EAAWpC,EAAOP,KAAK,IAE3B,MAAM+zG,OAA0BzpH,IAAZ/E,QAA4C+E,IAAnB/E,EAAQiqC,OAAuBjqC,EAAQiqC,OAAkB,MAChGwkF,EAAOzuH,GAASyuH,KACtB,IAAIC,EACAC,OACS5pH,IAAT0pH,QAAoC1pH,IAAd0pH,EAAKtoG,KAC3BuoG,EAAW,CAAC,IAAK,IAAK,IAAK,KAGA,iBAAfD,EAAS,KACjBC,EAAW,CAACD,EAAKtoG,KAAMsoG,EAAKtoG,KAAMsoG,EAAKtoG,KAAMsoG,EAAKtoG,OAGlDuoG,EAAW,CAACD,EAAKtoG,KAAK,GAAIsoG,EAAKtoG,KAAK,GAAIsoG,EAAKtoG,KAAK,GAAI,UACjCphB,IAAjB0pH,EAAKtoG,KAAK,KACVuoG,EAAS,GAAKD,EAAKtoG,KAAK,UAIvBphB,IAAT0pH,QAAoC1pH,IAAd0pH,EAAKx6F,KAC3B06F,EAAW,CAAC,EAAG,EAAG,EAAG,GAGM,iBAAfF,EAAS,KACjBE,EAAW,CAACF,EAAKx6F,KAAMw6F,EAAKx6F,KAAMw6F,EAAKx6F,KAAMw6F,EAAKx6F,OAGlD06F,EAAW,CAACF,EAAKx6F,KAAK,GAAIw6F,EAAKx6F,KAAK,GAAIw6F,EAAKx6F,KAAK,GAAI,QACjClvB,IAAjB0pH,EAAKx6F,KAAK,KACV06F,EAAS,GAAKF,EAAKx6F,KAAK,KAIpC,MAAMlnB,EAASnC,EAASD,EACxB,QAAgB5F,IAAZ/E,SACuB+E,IAAnB/E,EAAQiqC,QAAsC,IAAb7sB,GAAqC,SAAnBpd,EAAQiqC,QAC7C,IAAb7sB,GAAsC,QAAnBpd,EAAQiqC,QAAuC,QAAnBjqC,EAAQiqC,QACxD,MAAM,IAAIjmC,MAAM,iDAIxB,MAAM0kE,EAAO,EACb,IAAI0mD,EAAgB,EAAGC,EAAgB,EAAGC,EAAgB,EAAGC,EAAgB,EACzEX,EAAiB,EAAGC,EAAiB9hH,EAAQ+hH,EAA0B,EAAT/hH,EAAYgiH,GAAkB,EAE5E,SAAhBP,GACAI,EAAiB,EACjBC,EAAiB9hH,EACjB+hH,EAA0B,EAAT/hH,EACjBgiH,EAA0B,EAAThiH,GAEI,QAAhByhH,GACLI,EAAiB,EACjBC,EAAiB9hH,EACjB+hH,EAA0B,EAAT/hH,GAEI,QAAhByhH,IACLI,EAAiB,EACjBE,EAAiB/hH,EACjB8hH,EAA0B,EAAT9hH,GAErBoiH,EAAQb,EAAgBkB,gBAAgB7kH,EAAOC,GAC/C,IAAK,IAAIzE,EAAI,EAAGA,EAAIyE,EAASD,EAAOykH,GAAiB1mD,EAAM2mD,GAAiB3mD,EAAM4mD,GAAiB5mD,EAAM6mD,GAAiB7mD,EAAMviE,IAC5HgpH,EAAM1yG,KAAK2yG,IAAkBp0G,EAAOyB,KAAKmyG,KAAoBD,EAAS,IAAMD,EAAS,GACrFS,EAAM1yG,KAAK4yG,IAAkBr0G,EAAOyB,KAAKoyG,KAAoBF,EAAS,IAAMD,EAAS,GACrFS,EAAM1yG,KAAK6yG,IAAkBt0G,EAAOyB,KAAKqyG,KAAoBH,EAAS,IAAMD,EAAS,GACrFS,EAAM1yG,KAAK8yG,IAAqC,IAApBR,EACxB,KACC/zG,EAAOyB,KAAKsyG,KAAoBJ,EAAS,IAAMD,EAAS,EAErE,CAIA,OAAOS,CAAK,C,oCC5LhBntH,OAAOC,eAAezC,EAAS,aAAc,CAAE2C,OAAO,IACtD3C,EAAQiwH,uBAAyBjwH,EAAQkwH,oBAAsBlwH,EAAQmwH,kBAAoBnwH,EAAQowH,gBAAkBpwH,EAAQqwH,oBAAiB,EAC9I,MAAMC,EAAmB,EAAQ,MA6EjCtwH,EAAQqwH,eArEe,CAACn0G,EAAQ1b,KAC5B,QAAe+E,IAAX2W,EACA,MAAM,IAAI1X,MAAM,gCAEpB,QAAuBe,IAAnB/E,EAAQ4K,aAA0C7F,IAAlB/E,EAAQ2K,MACxC,MAAM,IAAI3G,MAAM,0CAEpB,GAA6B,SAAzBhE,EAAQuuH,aACR,MAAM,IAAIvqH,MAAM,2CAEpB,MAAM,OAAE4G,EAAM,MAAED,GAAU3K,EACpByuH,EAAOzuH,EAAQyuH,MAAQ,CAAEtoG,KAAM,IAAK8N,KAAM,GAChD,IAAIy6F,EACAC,EAEAD,EADuB,iBAAfD,EAAS,KACN,CAACA,EAAKtoG,KAAMsoG,EAAKtoG,KAAMsoG,EAAKtoG,KAAMsoG,EAAKtoG,MAGvC,CAACsoG,EAAKtoG,KAAK,GAAIsoG,EAAKtoG,KAAK,GAAIsoG,EAAKtoG,KAAK,GAAIsoG,EAAKtoG,KAAK,IAAM,KAGtEwoG,EADuB,iBAAfF,EAAS,KACN,CAACA,EAAKx6F,KAAMw6F,EAAKx6F,KAAMw6F,EAAKx6F,KAAMw6F,EAAKx6F,MAGvC,CAACw6F,EAAKx6F,KAAK,GAAIw6F,EAAKx6F,KAAK,GAAIw6F,EAAKx6F,KAAK,GAAIw6F,EAAKx6F,KAAK,IAAM,GAE1E,MAAMu6F,OAAiCzpH,IAAnB/E,EAAQiqC,OAAuBjqC,EAAQiqC,OAAS,OAE9D8lF,OAAwChrH,IAAzB/E,EAAQgwH,mBAAuDjrH,IAAzB/E,EAAQgwH,aAA6BhwH,EAAQgwH,aAAwB,MAC1HjjH,EAASnC,EAASD,EAClBslH,EAA+B,SAAjBF,EAA0B,IAAIh0G,aAAsB,EAAThP,GAAc,IAAIgP,aAAsB,EAAThP,GAE9F,IAAI27D,EAAO,EAAG0mD,EAAgB,EAAGC,EAAgB,EAAGC,EAAgB,EAAGC,EAAgB,EACnFX,EAAiB,EAAGC,EAAiB9hH,EAAQ+hH,EAA0B,EAAT/hH,EAAYgiH,GAAkB,EAE5E,QAAhBP,IACA9lD,EAAO,EACP0mD,EAAgB,EAChBC,EAAgB,EAChBC,EAAgB,EAChBC,GAAiB,GAGA,SAAjBQ,EACAhB,EAA0B,EAAThiH,EAEK,QAAjBgjH,GACLnB,EAAiB,EACjBE,EAAiB/hH,EACjB8hH,EAA0B,EAAT9hH,GAEK,QAAjBgjH,IACLjB,EAAiB,EACjBD,EAAiB9hH,EACjB6hH,EAA0B,EAAT7hH,GAErB,IAAK,IAAI5G,EAAI,EAAGA,EAAI4G,EAAQ5G,IAAKipH,GAAiB1mD,EAAM4mD,GAAiB5mD,EAAM2mD,GAAiB3mD,EAAM6mD,GAAiB7mD,EACnHunD,EAAYrB,MAAqBlzG,EAAO0zG,GAAiBT,EAAS,IAAMD,EAAS,GACjFuB,EAAYpB,MAAqBnzG,EAAO2zG,GAAiBV,EAAS,IAAMD,EAAS,GACjFuB,EAAYnB,MAAqBpzG,EAAO4zG,GAAiBX,EAAS,IAAMD,EAAS,IACzD,IAApBK,IAA4C,IAAnBQ,IACzBU,EAAYlB,MAAqBrzG,EAAO6zG,GAAiBZ,EAAS,IAAMD,EAAS,IAMzF,MAFsC,SAAjBqB,EAA0B,IAAID,EAAiBzpH,OAAO,UAAW4pH,EAAa,CAAC,EAAG,EAAGrlH,EAAQD,IAC9G,IAAImlH,EAAiBzpH,OAAO,UAAW4pH,EAAa,CAAC,EAAG,EAAGrlH,EAAQD,GACpD,EA0IvBnL,EAAQowH,gBApIgB9mH,MAAOqmH,EAAOnvH,KAElC,MAAMkwH,EAA+C,oBAAvB,kBAAsCf,aAAiBgB,iBAC/EC,EAAwC,oBAAhB,WAA+BjB,aAAiBkB,UACxEC,EAAyC,oBAAlB,aAAiCnB,aAAiBoB,YACzElsB,EAA4B,iBAAV8qB,EACxB,IAAI1yG,EACA+zG,EAAwBxwH,GAAW,CAAC,EAExC,GAAIkwH,EAAgB,CAEhB,MAAMphF,EAASa,SAASC,cAAc,UACtCd,EAAOnkC,MAAQwkH,EAAMxkH,MACrBmkC,EAAOlkC,OAASukH,EAAMvkH,OACtB,MAAM0jH,EAAkBx/E,EAAOQ,WAAW,MAC1C,GAAuB,MAAnBg/E,EA2BA,MAAM,IAAItqH,MAAM,6BA3BS,CACzB,IAAI4G,EAASukH,EAAMvkH,OACfD,EAAQwkH,EAAMxkH,MAKlB,QAJgB5F,IAAZ/E,QAAmD+E,IAA1B/E,EAAQywH,oBAAwD1rH,IAAzB/E,EAAQ0wH,eACxE9lH,EAAS5K,EAAQywH,cACjB9lH,EAAQ3K,EAAQ0wH,mBAEJ3rH,IAAZ/E,EAAuB,CAEvB,GADAwwH,EAAwBxwH,OACK+E,IAAzB/E,EAAQgwH,aACR,MAAM,IAAIhsH,MAAM,+DAGhBwsH,EAAsBR,aAAe,OAEzCQ,EAAsB5lH,OAASA,EAC/B4lH,EAAsB7lH,MAAQA,CAClC,MAEI6lH,EAAsBR,aAAe,OACrCQ,EAAsB5lH,OAASA,EAC/B4lH,EAAsB7lH,MAAQA,EAElC2jH,EAAgBqC,UAAUxB,EAAO,EAAG,GACpC1yG,EAAO6xG,EAAgBsC,aAAa,EAAG,EAAGjmH,EAAOC,GAAQ6R,IAC7D,CAIJ,KACK,KAAI2zG,EAkCJ,IAAIE,EAAe,CAEpB,QAAgBvrH,IAAZ/E,EACA,MAAM,IAAIgE,MAAM,2DAEpB,MAAM8qC,EAASa,SAASC,cAAc,UACtCd,EAAOnkC,MAAQwkH,EAAMxkH,MACrBmkC,EAAOlkC,OAASukH,EAAMvkH,OACtB,MAAM0jH,EAAkBx/E,EAAOQ,WAAW,MAC1C,GAAuB,MAAnBg/E,EAAyB,CACzB,MAAM1jH,EAASukH,EAAMvkH,OACfD,EAAQwkH,EAAMxkH,MAKpB,OAJA2jH,EAAgBqC,UAAUxB,EAAO,EAAG,EAAGxkH,EAAOC,GAC9C6R,EAAO6xG,EAAgBsC,aAAa,EAAG,EAAGjmH,EAAOC,GAAQ6R,KACzD+zG,EAAsB5lH,OAASA,EAC/B4lH,EAAsB7lH,MAAQA,GACvB,EAAInL,EAAQqwH,gBAAgBpzG,EAAM+zG,EAC7C,CAEI,MAAM,IAAIxsH,MAAM,4BAExB,CACK,GAAIqgG,EACL,OAAO,IAAI1iG,SAAQ,CAACC,EAAS0sC,KACzB,MAAMQ,EAASa,SAASC,cAAc,UAChCrmC,EAAUulC,EAAOQ,WAAW,MAClC,IAAK6/E,IAAU5lH,EACX,OAAO+kC,IAEX,MAAMuiF,EAAW,IAAIC,MACrBD,EAASE,YAAc,YACvBF,EAASxmF,IAAM8kF,EACf0B,EAAStnB,OAAS,KACdz6D,EAAOnkC,MAAQkmH,EAASlmH,MACxBmkC,EAAOlkC,OAASimH,EAASjmH,OACzBrB,EAAQonH,UAAUE,EAAU,EAAG,EAAG/hF,EAAOnkC,MAAOmkC,EAAOlkC,QACvD,MAAMomH,EAAMznH,EAAQqnH,aAAa,EAAG,EAAG9hF,EAAOnkC,MAAOmkC,EAAOlkC,QAC5D4lH,EAAsB5lH,OAASkkC,EAAOlkC,OACtC4lH,EAAsB7lH,MAAQmkC,EAAOnkC,MACrC/I,GAAQ,EAAIpC,EAAQqwH,gBAAgBmB,EAAIv0G,KAAM+zG,GAAuB,CACxE,IAIL,MAAM,IAAIxsH,MAAM,iEACpB,CA/EyB,CACrB,IAAI4G,EACAD,EAeJ,QAdgB5F,IAAZ/E,QAAkD+E,IAAzB/E,EAAQ0wH,mBAAwD3rH,IAA1B/E,EAAQywH,eACvE7lH,EAAS5K,EAAQywH,cACjB9lH,EAAQ3K,EAAQ0wH,eAGhB9lH,EAASukH,EAAMvkH,OACfD,EAAQwkH,EAAMxkH,YAEF5F,IAAZ/E,IACAwwH,EAAwBxwH,GAE5BwwH,EAAsBvmF,OAAS,OAC/BumF,EAAsB5lH,OAASA,EAC/B4lH,EAAsB7lH,MAAQA,OACd5F,IAAZ/E,EAAuB,CACvB,MAAMixH,EAAathF,SAASC,cAAc,UAC1CqhF,EAAWtmH,MAAQA,EACnBsmH,EAAWrmH,OAASA,EACpB,MAAM0jH,EAAkB2C,EAAW3hF,WAAW,MAC9C,GAAuB,MAAnBg/E,EAKA,MAAM,IAAItqH,MAAM,6BAJhBsqH,EAAgB4C,aAAa/B,EAAO,EAAG,GACvC1yG,EAAO6xG,EAAgBsC,aAAa,EAAG,EAAGjmH,EAAOC,GAAQ6R,IAKjE,MAEIA,EAAO0yG,EAAM1yG,IAErB,CA8CA,CACA,QAAa1X,IAAT0X,EACA,OAAO,EAAIjd,EAAQqwH,gBAAgBpzG,EAAM+zG,GAGzC,MAAM,IAAIxsH,MAAM,iEACpB,EAYJxE,EAAQmwH,kBANkB,CAACz1G,EAASla,KAChC,MAAM,MAAE2K,EAAK,OAAEC,EAAM,SAAE0iE,EAAQ,QAAEnlE,GAAYnI,EAEvCya,EAAO,CAAC,EAAG7P,EAAQD,EAAO,GAChC,OAAO,IAAImlH,EAAiBzpH,OAAO,CAAEoiC,SAAU,UAAWvkC,KAAM,UAAWgW,UAASO,OAAM6yD,WAAUnlE,WAAU,EAUlH3I,EAAQkwH,oBAJoB,CAACxgD,EAAWlvE,KACpC,MAAM,SAAEwc,EAAQ,KAAE/B,EAAI,SAAE6yD,EAAQ,QAAEnlE,GAAYnI,EAC9C,OAAO,IAAI8vH,EAAiBzpH,OAAO,CAAEoiC,SAAU,aAAcvkC,KAAMsY,GAAY,UAAW0yD,YAAWz0D,OAAM6yD,WAAUnlE,WAAU,EAOnI3I,EAAQiwH,uBADuB,CAACvrH,EAAMwX,EAAQjB,IAAS,IAAIq1G,EAAiBzpH,OAAO,CAAEoiC,SAAU,aAAcvkC,OAAMuY,KAAMf,EAAQjB,KAAMA,GAAQ,CAACiB,EAAOva,S,iCC7OvJa,OAAOC,eAAezC,EAAS,aAAc,CAAE2C,OAAO,IACtD3C,EAAQ2xH,YAAc3xH,EAAQ4xH,sCAAwC5xH,EAAQ6xH,2CAAwC,EAEtH7xH,EAAQ6xH,sCAAwC,IAAI9tH,IAAI,CACpD,CAAC,UAAWwY,cACZ,CAAC,QAAStH,YACV,CAAC,OAAQo5B,WACT,CAAC,SAAUC,aACX,CAAC,UAAWA,aACZ,CAAC,QAASF,YACV,CAAC,QAAS3O,YACV,CAAC,OAAQxqB,YACT,CAAC,UAAWs5B,cACZ,CAAC,SAAUx5B,eAGf/U,EAAQ4xH,sCAAwC,IAAI7tH,IAAI,CACpD,CAACwY,aAAc,WACf,CAACtH,WAAY,SACb,CAACo5B,UAAW,QACZ,CAACC,YAAa,UACd,CAACF,WAAY,SACb,CAAC3O,WAAY,SACb,CAAC8O,aAAc,WACf,CAACx5B,YAAa,YAKlB,IAAI+8G,GAAkB,EAgBtB9xH,EAAQ2xH,YAfY,KAChB,IAAKG,EAAiB,CAClBA,GAAkB,EAClB,MAAMC,EAAoD,oBAAlBrvD,eAA+D,mBAAvBA,cAAc35C,KACxFipG,EAAsD,oBAAnB1+B,gBAAiE,mBAAxBA,eAAevqE,KAC7FgpG,IACA/xH,EAAQ6xH,sCAAsC1tH,IAAI,QAASu+D,eAC3D1iE,EAAQ4xH,sCAAsCztH,IAAIu+D,cAAe,UAEjEsvD,IACAhyH,EAAQ6xH,sCAAsC1tH,IAAI,SAAUmvF,gBAC5DtzF,EAAQ4xH,sCAAsCztH,IAAImvF,eAAgB,UAE1E,E,oCC3CJ9wF,OAAOC,eAAezC,EAAS,aAAc,CAAE2C,OAAO,IACtD3C,EAAQ6G,YAAS,EACjB,MAAMorH,EAA8B,EAAQ,MACtCC,EAA2B,EAAQ,MACnCC,EAAgC,EAAQ,KACxCC,EAAyB,EAAQ,MAmSvCpyH,EAAQ6G,OA7RR,MAIIkkC,YAAYmW,EAAMC,EAAMC,GAGpB,IAAI18C,EACAuW,EACJ,IAHA,EAAIk3G,EAA8BR,eAGd,iBAATzwE,GAAqB,aAAcA,EAO1C,OAHAl+C,KAAKikG,aAAe/lD,EAAKjY,SACzBvkC,EAAOw8C,EAAKx8C,KACZuW,EAAOimC,EAAKjmC,KACJimC,EAAKjY,UACT,IAAK,aAAc,CACf,MAAMopF,EAAgCF,EAA8BN,sCAAsC/sH,IAAIJ,GAC9G,IAAK2tH,EACD,MAAM,IAAI1hG,UAAU,qBAAqBjsB,0CAE7C,KAAMw8C,EAAKjkC,gBAAgBo1G,GACvB,MAAM,IAAI1hG,UAAU,4BAA4B0hG,EAA8BhvH,QAElFL,KAAKsvH,QAAUpxE,EAAKjkC,KACpB,KACJ,CACA,IAAK,UACD,GAAa,YAATvY,EACA,MAAM,IAAIisB,UAAU,qBAAqBjsB,oCAE7C1B,KAAKuvH,eAAiBrxE,EAAKxmC,QAC3B1X,KAAKwvH,WAAatxE,EAAK4sB,SACvB9qE,KAAKyvH,SAAWvxE,EAAKv4C,QACrB,MAEJ,IAAK,aACD,GAAc,YAATjE,GAA+B,YAATA,GAA+B,UAATA,GAA6B,UAATA,GAA6B,WAATA,GAC5E,SAATA,EACA,MAAM,IAAIisB,UAAU,qBAAqBjsB,uCAE7C1B,KAAK0vH,cAAgBxxE,EAAKwuB,UAC1B1sE,KAAKwvH,WAAatxE,EAAK4sB,SACvB9qE,KAAKyvH,SAAWvxE,EAAKv4C,QACrB,MAEJ,QACI,MAAM,IAAInE,MAAM,6CAA6CxB,KAAKikG,qBAGzE,CAID,IAAIhqF,EACA01G,EAEJ,GAAoB,iBAATzxE,EAMP,GAFAx8C,EAAOw8C,EACPyxE,EAAYvxE,EACC,WAATF,EAAmB,CAEnB,IAAKx6C,MAAM+lC,QAAQ0U,GACf,MAAM,IAAIxwB,UAAU,kDAIxB1T,EAAOkkC,CACX,KACK,CAED,MAAMyxE,EAAwBT,EAA8BN,sCAAsC/sH,IAAIo8C,GACtG,QAA8B37C,IAA1BqtH,EACA,MAAM,IAAIjiG,UAAU,4BAA4BuwB,MAEpD,GAAIx6C,MAAM+lC,QAAQ0U,GAAO,CACrB,GAAa,YAATD,EAIA,MAAM,IAAIvwB,UAAU,iGAYpB1T,EAVc,WAATikC,GAA8B,UAATA,EAUnB0xE,EAAsB7pG,KAAKo4B,EAAM0xE,QAKjCD,EAAsB7pG,KAAKo4B,EAE1C,KACK,MAAIA,aAAgByxE,GAIrB,MAAM,IAAIjiG,UAAU,KAAKjsB,mCAAsCkuH,KAH/D31G,EAAOkkC,CAIX,CACJ,MAOA,GADAwxE,EAAYxxE,EACRz6C,MAAM+lC,QAAQyU,GAAO,CAErB,GAAoB,IAAhBA,EAAKv/C,OACL,MAAM,IAAIgvB,UAAU,uDAExB,MAAMmiG,SAA0B5xE,EAAK,GACrC,GAAyB,WAArB4xE,EACApuH,EAAO,SACPuY,EAAOikC,MAEN,IAAyB,YAArB4xE,EAQL,MAAM,IAAIniG,UAAU,uCAAuCmiG,MAP3DpuH,EAAO,OAIPuY,EAAOhI,WAAW8T,KAAKm4B,EAI3B,CACJ,KACK,CAED,MAAMqgC,EAAa4wC,EAA8BP,sCAAsC9sH,IAAIo8C,EAAKnW,aAChG,QAAmBxlC,IAAfg8E,EACA,MAAM,IAAI5wD,UAAU,qCAAqCuwB,EAAKnW,gBAElErmC,EAAO68E,EACPtkE,EAAOikC,CACX,CAGJ,QAAkB37C,IAAdotH,EAEAA,EAAY,CAAC11G,EAAKtb,aAEjB,IAAK+E,MAAM+lC,QAAQkmF,GACpB,MAAM,IAAIhiG,UAAU,0CAExB1V,EAAO03G,EACP3vH,KAAKsvH,QAAUr1G,EACfja,KAAKikG,aAAe,KACxB,CAEA,MAAM1iG,GAAO,EAAI6tH,EAAuBW,eAAe93G,GAEvD,GAAIjY,KAAKsvH,SAAW/tH,IAASvB,KAAKsvH,QAAQ3wH,OACtC,MAAM,IAAI6C,MAAM,iBAAiBD,iCAAoCvB,KAAKsvH,QAAQ3wH,YAEtFqB,KAAK0B,KAAOA,EACZ1B,KAAKiY,KAAOA,EACZjY,KAAKuB,KAAOA,CAChB,CAGAkqH,uBAAuBkB,EAAOnvH,GAC1B,OAAO,EAAI0xH,EAAyB9B,iBAAiBT,EAAOnvH,EAChE,CACAiuH,mBAAmB/zG,EAASla,GACxB,OAAO,EAAI0xH,EAAyB/B,mBAAmBz1G,EAASla,EACpE,CACAiuH,qBAAqB/+C,EAAWlvE,GAC5B,OAAO,EAAI0xH,EAAyBhC,qBAAqBxgD,EAAWlvE,EACxE,CACAiuH,wBAAwB/pH,EAAMwX,EAAQjB,GAClC,OAAO,EAAIi3G,EAAyBjC,wBAAwBvrH,EAAMwX,EAAQjB,EAC9E,CAGAy0G,UAAUlvH,GACN,OAAO,EAAIyxH,EAA4BpD,iBAAiB7rH,KAAMxC,EAClE,CACAwyH,YAAYxyH,GACR,OAAO,EAAIyxH,EAA4BrD,mBAAmB5rH,KAAMxC,EACpE,CAGIyc,WAEA,GADAja,KAAKiwH,eACAjwH,KAAKsvH,QACN,MAAM,IAAI9tH,MAAM,kJAGpB,OAAOxB,KAAKsvH,OAChB,CACIrpF,eACA,OAAOjmC,KAAKikG,YAChB,CACIvsF,cAEA,GADA1X,KAAKiwH,eACAjwH,KAAKuvH,eACN,MAAM,IAAI/tH,MAAM,8CAEpB,OAAOxB,KAAKuvH,cAChB,CACI7iD,gBAEA,GADA1sE,KAAKiwH,eACAjwH,KAAK0vH,cACN,MAAM,IAAIluH,MAAM,8CAEpB,OAAOxB,KAAK0vH,aAChB,CAGAppH,cAAc4pH,GAEV,OADAlwH,KAAKiwH,cACGjwH,KAAKikG,cACT,IAAK,MACL,IAAK,aACD,OAAOjkG,KAAKia,KAChB,IAAK,UACL,IAAK,aACD,IAAKja,KAAKwvH,WACN,MAAM,IAAIhuH,MAAM,uEAEpB,GAAIxB,KAAKmwH,cACL,MAAM,IAAI3uH,MAAM,2CAEpB,IACIxB,KAAKmwH,eAAgB,EACrB,MAAMl2G,QAAaja,KAAKwvH,aAQxB,OAPAxvH,KAAKwvH,gBAAajtH,EAClBvC,KAAKikG,aAAe,MACpBjkG,KAAKsvH,QAAUr1G,EACXi2G,GAAelwH,KAAKyvH,WACpBzvH,KAAKyvH,WACLzvH,KAAKyvH,cAAWltH,GAEb0X,CACX,CACA,QACIja,KAAKmwH,eAAgB,CACzB,CAEJ,QACI,MAAM,IAAI3uH,MAAM,kCAAkCxB,KAAKikG,gBAEnE,CACAt+F,UACI,GAAI3F,KAAKmwH,cACL,MAAM,IAAI3uH,MAAM,2CAEhBxB,KAAKyvH,WACLzvH,KAAKyvH,WACLzvH,KAAKyvH,cAAWltH,GAEpBvC,KAAKsvH,aAAU/sH,EACfvC,KAAKuvH,oBAAiBhtH,EACtBvC,KAAK0vH,mBAAgBntH,EACrBvC,KAAKwvH,gBAAajtH,EAClBvC,KAAKmwH,mBAAgB5tH,EACrBvC,KAAKikG,aAAe,MACxB,CAGAgsB,cACI,GAA0B,SAAtBjwH,KAAKikG,aACL,MAAM,IAAIziG,MAAM,0BAExB,CACAyf,QAAQhJ,GAEJ,GADAjY,KAAKiwH,cACDjwH,KAAKwvH,YAAcxvH,KAAKyvH,SACxB,MAAM,IAAIjuH,MAAM,mDAEpB,OAAO,EAAI4tH,EAAuBgB,eAAepwH,KAAMiY,EAC3D,E,oCCtSJzY,OAAOC,eAAezC,EAAS,aAAc,CAAE2C,OAAO,IACtD3C,EAAQozH,cAAgBpzH,EAAQ+yH,mBAAgB,EAChD,MAAMzC,EAAmB,EAAQ,MAoBjCtwH,EAAQ+yH,cAde93G,IACnB,IAAI1W,EAAO,EACX,IAAK,IAAIoC,EAAI,EAAGA,EAAIsU,EAAKtZ,OAAQgF,IAAK,CAClC,MAAM23B,EAAMrjB,EAAKtU,GACjB,GAAmB,iBAAR23B,IAAqBh9B,OAAOoyF,cAAcp1D,GACjD,MAAM,IAAI3N,UAAU,QAAQhqB,+BAA+B23B,KAE/D,GAAIA,EAAM,EACN,MAAM,IAAImiC,WAAW,QAAQ95D,2CAA2C23B,KAE5E/5B,GAAQ+5B,CACZ,CACA,OAAO/5B,CAAI,EAmCfvE,EAAQozH,cA7Bc,CAAC53G,EAAQP,KAC3B,OAAQO,EAAOytB,UACX,IAAK,MACD,OAAO,IAAIqnF,EAAiBzpH,OAAO2U,EAAO9W,KAAM8W,EAAOyB,KAAMhC,GACjE,IAAK,aACD,OAAO,IAAIq1G,EAAiBzpH,OAAO,CAC/BoiC,SAAU,aACVhsB,KAAMzB,EAAOyB,KACbvY,KAAM8W,EAAO9W,KACbuW,SAER,IAAK,UACD,OAAO,IAAIq1G,EAAiBzpH,OAAO,CAC/BoiC,SAAU,UACVvuB,QAASc,EAAOd,QAChBhW,KAAM8W,EAAO9W,KACbuW,SAER,IAAK,aACD,OAAO,IAAIq1G,EAAiBzpH,OAAO,CAC/BoiC,SAAU,aACVymC,UAAWl0D,EAAOk0D,UAClBhrE,KAAM8W,EAAO9W,KACbuW,SAER,QACI,MAAM,IAAIzW,MAAM,kCAAkCgX,EAAOytB,6BACjE,C,oCCrDJzmC,OAAOC,eAAezC,EAAS,aAAc,CAAE2C,OAAO,IACtD3C,EAAQ6G,YAAS,EACjB,MAAMypH,EAAmB,EAAQ,MAEjCtwH,EAAQ6G,OAASypH,EAAiBzpH,M,kCCJlCrE,OAAOC,eAAezC,EAAS,aAAc,CAAE2C,OAAO,IACtD3C,EAAQqzH,qBAAkB,EA2B1BrzH,EAAQqzH,gBA1BR,MACItoF,YAAY9oC,GACRe,KAAKf,QAAUA,CACnB,CACI2L,iBACA,OAAO5K,KAAKf,QAAQ2L,UACxB,CACI8vD,kBACA,OAAO16D,KAAKf,QAAQy7D,WACxB,CACA+wD,oBAAoB6E,EAAkBC,GAClC,MAAM,IAAI/uH,MAAM,yBACpB,CACA8E,2BAA2BkqH,EAAQC,GAC/B,MAAM,IAAIjvH,MAAM,0BACpB,CACA8E,8BAA8BmqH,GAC1B,MAAM,IAAIjvH,MAAM,0BACpB,CACA8E,mBAAmBoqH,EAAQ91D,EAAUC,GACjC,MAAM,IAAIr5D,MAAM,0BACpB,CACA8E,gBACI,OAAOtG,KAAKf,QAAQ0G,SACxB,E,oCC1BJnG,OAAOC,eAAezC,EAAS,aAAc,CAAE2C,OAAO,IACtD3C,EAAQqzH,qBAAkB,EAC1B,MAAMM,EAA6B,EAAQ,MAE3C3zH,EAAQqzH,gBAAkBM,EAA2BN,e,kCCJrD7wH,OAAOC,eAAezC,EAAS,aAAc,CAAE2C,OAAO,IACtD3C,EAAQ4C,aAAU,EAGlB5C,EAAQ4C,QAAU,Q,qFCUlB,IAAI6hD,EAAc,CAAC,EAKnBA,EAAYmvE,OAQZnvE,EAAYovE,MAMZpvE,EAAYqvE,aAAe,EAM3BrvE,EAAYsvE,WAAa,EAMzBtvE,EAAYuvE,uBAAyB,EAMrCvvE,EAAYkC,mBAAqB,EAKjClC,EAAYwvE,SAAW,CACrBC,WAAY,EACZC,aAAc,GAOhB1vE,EAAY4/C,MAAQ,IAAI5kE,WAAW,GAMnCglB,EAAY2vE,QAAU,IAAI73G,aAAakoC,EAAY4/C,MAAMnoF,QAMzDuoC,EAAY4vE,QAAU,IAAI9lF,aAAakW,EAAY4/C,MAAMnoF,QAMzDuoC,EAAY9vC,eAAuE,IAAtD,IAAI25B,YAAY,IAAIr5B,WAAW,CAAC,EAAG,IAAIiH,QAAQ,GAS5EuoC,EAAYqiB,KAAO,SAASE,EAAKC,GAK/BjkE,KAAKgkE,IAAY,EAANA,EAMXhkE,KAAKikE,KAAc,EAAPA,CACd,EAOAxiB,EAAYqiB,KAAKnkB,OAAS,SAASqkB,EAAKC,GAEtC,OAAc,GAAPD,GAAoB,GAARC,EAAYxiB,EAAYqiB,KAAKkgD,KAAO,IAAIviE,EAAYqiB,KAAKE,EAAKC,EACnF,EAKAxiB,EAAYqiB,KAAKy8B,UAAU+wB,UAAY,WACrC,OAAQtxH,KAAKgkE,MAAQ,GAAiB,WAAZhkE,KAAKikE,IACjC,EAMAxiB,EAAYqiB,KAAKy8B,UAAU0c,OAAS,SAASC,GAC3C,OAAOl9G,KAAKgkE,KAAOk5C,EAAMl5C,KAAOhkE,KAAKikE,MAAQi5C,EAAMj5C,IACrD,EAMAxiB,EAAYqiB,KAAKkgD,KAAO,IAAIviE,EAAYqiB,KAAK,EAAG,GAUhDriB,EAAY8vE,QAAU,SAASC,GAC7B,GAAKA,EAGCC,EAAeD,OAFnB,IAAIC,EAAe,KASrBzxH,KAAKmjD,GAAK1B,EAAYC,WAAW1Z,SAASypF,GAQ1CzxH,KAAK0xH,MAAQD,EAQbzxH,KAAK2xH,SAAW,EAQhB3xH,KAAK4xH,OAAS,KAQd5xH,KAAK6xH,cAAgB,EAQrB7xH,KAAK8xH,UAAW,EAQhB9xH,KAAK+xH,aAAe,EAQpB/xH,KAAKgyH,QAAU,GAQfhyH,KAAKiyH,iBAAmB,EAQxBjyH,KAAKkyH,gBAAiB,CACxB,EAEAzwE,EAAY8vE,QAAQhxB,UAAU4xB,MAAQ,WACpCnyH,KAAKmjD,GAAGgvE,QACRnyH,KAAK0xH,MAAQ1xH,KAAKmjD,GAAGivE,WACrBpyH,KAAK2xH,SAAW,EAChB3xH,KAAK4xH,OAAS,KACd5xH,KAAK6xH,cAAgB,EACrB7xH,KAAK8xH,UAAW,EAChB9xH,KAAK+xH,aAAe,EACpB/xH,KAAKgyH,QAAU,GACfhyH,KAAKiyH,iBAAmB,EACxBjyH,KAAKkyH,gBAAiB,CACxB,EASAzwE,EAAY8vE,QAAQhxB,UAAU8xB,cAAgB,SAASA,GACrDryH,KAAKkyH,eAAiBG,CACxB,EASA5wE,EAAY8vE,QAAQhxB,UAAU3iC,WAAa,WACzC,OAAO59D,KAAKmjD,EACd,EAQA1B,EAAY8vE,QAAQhxB,UAAU+xB,aAAe,WAC3C,OAAOtyH,KAAKmjD,GAAG0H,QAAQnxC,SAAS1Z,KAAKmjD,GAAGje,WAAYllC,KAAKmjD,GAAGje,WAAallC,KAAKm/B,SAChF,EAYAsiB,EAAY8vE,QAAQhxB,UAAUv3C,KAAO,SAASznD,EAAMgxH,GAE9ChxH,EAAOvB,KAAK2xH,WACd3xH,KAAK2xH,SAAWpwH,GAQlB,IAHA,IAAIixH,EAAwE,IAAvDxyH,KAAKmjD,GAAGivE,WAAapyH,KAAK0xH,MAAQa,GAA2BhxH,EAAO,EAGlFvB,KAAK0xH,MAAQc,EAAajxH,EAAOgxH,GAAkB,CACxD,IAAIE,EAAezyH,KAAKmjD,GAAGivE,WAC3BpyH,KAAKmjD,GAAK1B,EAAY8vE,QAAQmB,eAAe1yH,KAAKmjD,IAClDnjD,KAAK0xH,OAAS1xH,KAAKmjD,GAAGivE,WAAaK,CACrC,CAEAzyH,KAAK2kE,IAAI6tD,EACX,EAKA/wE,EAAY8vE,QAAQhxB,UAAU57B,IAAM,SAASguD,GAC3C,IAAK,IAAIhvH,EAAI,EAAGA,EAAIgvH,EAAWhvH,IAC7B3D,KAAKmjD,GAAGyvE,YAAY5yH,KAAK0xH,MAAO,EAEpC,EAKAjwE,EAAY8vE,QAAQhxB,UAAUqyB,UAAY,SAASjzH,GACjDK,KAAKmjD,GAAGyvE,UAAU5yH,KAAK0xH,OAAS,EAAG/xH,EACrC,EAKA8hD,EAAY8vE,QAAQhxB,UAAUsyB,WAAa,SAASlzH,GAClDK,KAAKmjD,GAAG0vE,WAAW7yH,KAAK0xH,OAAS,EAAG/xH,EACtC,EAKA8hD,EAAY8vE,QAAQhxB,UAAUt3C,WAAa,SAAStpD,GAClDK,KAAKmjD,GAAG8F,WAAWjpD,KAAK0xH,OAAS,EAAG/xH,EACtC,EAKA8hD,EAAY8vE,QAAQhxB,UAAUuyB,WAAa,SAASnzH,GAClDK,KAAKmjD,GAAG2vE,WAAW9yH,KAAK0xH,OAAS,EAAG/xH,EACtC,EAKA8hD,EAAY8vE,QAAQhxB,UAAUwyB,aAAe,SAASpzH,GACpDK,KAAKmjD,GAAG4vE,aAAa/yH,KAAK0xH,OAAS,EAAG/xH,EACxC,EAKA8hD,EAAY8vE,QAAQhxB,UAAUyyB,aAAe,SAASrzH,GACpDK,KAAKmjD,GAAG6vE,aAAahzH,KAAK0xH,OAAS,EAAG/xH,EACxC,EAOA8hD,EAAY8vE,QAAQhxB,UAAU1wC,QAAU,SAASlwD,GAC/CK,KAAKgpD,KAAK,EAAG,GACbhpD,KAAK4yH,UAAUjzH,EACjB,EAMA8hD,EAAY8vE,QAAQhxB,UAAU0yB,SAAW,SAAStzH,GAChDK,KAAKgpD,KAAK,EAAG,GACbhpD,KAAK6yH,WAAWlzH,EAClB,EAMA8hD,EAAY8vE,QAAQhxB,UAAU1zC,SAAW,SAASltD,GAChDK,KAAKgpD,KAAK,EAAG,GACbhpD,KAAKipD,WAAWtpD,EAClB,EAMA8hD,EAAY8vE,QAAQhxB,UAAUhxC,SAAW,SAAS5vD,GAChDK,KAAKgpD,KAAK,EAAG,GACbhpD,KAAK8yH,WAAWnzH,EAClB,EAMA8hD,EAAY8vE,QAAQhxB,UAAUpuC,WAAa,SAASxyD,GAClDK,KAAKgpD,KAAK,EAAG,GACbhpD,KAAK+yH,aAAapzH,EACpB,EAMA8hD,EAAY8vE,QAAQhxB,UAAU2yB,WAAa,SAASvzH,GAClDK,KAAKgpD,KAAK,EAAG,GACbhpD,KAAKgzH,aAAarzH,EACpB,EAQA8hD,EAAY8vE,QAAQhxB,UAAUj6C,aAAe,SAAS6sE,EAASxzH,EAAOkC,IAChE7B,KAAKkyH,gBAAkBvyH,GAASkC,KAClC7B,KAAK6vD,QAAQlwD,GACbK,KAAKozH,KAAKD,GAEd,EAOA1xE,EAAY8vE,QAAQhxB,UAAU8yB,cAAgB,SAASF,EAASxzH,EAAOkC,IACjE7B,KAAKkyH,gBAAkBvyH,GAASkC,KAClC7B,KAAKizH,SAAStzH,GACdK,KAAKozH,KAAKD,GAEd,EAOA1xE,EAAY8vE,QAAQhxB,UAAUr5C,cAAgB,SAASisE,EAASxzH,EAAOkC,IACjE7B,KAAKkyH,gBAAkBvyH,GAASkC,KAClC7B,KAAK6sD,SAASltD,GACdK,KAAKozH,KAAKD,GAEd,EAOA1xE,EAAY8vE,QAAQhxB,UAAU/5C,cAAgB,SAAS2sE,EAASxzH,EAAOkC,IACjE7B,KAAKkyH,gBAAmBvyH,EAAMs9G,OAAOp7G,KACvC7B,KAAKuvD,SAAS5vD,GACdK,KAAKozH,KAAKD,GAEd,EAOA1xE,EAAY8vE,QAAQhxB,UAAU/uC,gBAAkB,SAAS2hE,EAASxzH,EAAOkC,IACnE7B,KAAKkyH,gBAAkBvyH,GAASkC,KAClC7B,KAAKmyD,WAAWxyD,GAChBK,KAAKozH,KAAKD,GAEd,EAOA1xE,EAAY8vE,QAAQhxB,UAAU+yB,gBAAkB,SAASH,EAASxzH,EAAOkC,IACnE7B,KAAKkyH,gBAAkBvyH,GAASkC,KAClC7B,KAAKkzH,WAAWvzH,GAChBK,KAAKozH,KAAKD,GAEd,EAOA1xE,EAAY8vE,QAAQhxB,UAAUl8C,eAAiB,SAAS8uE,EAASxzH,EAAOkC,IAClE7B,KAAKkyH,gBAAkBvyH,GAASkC,KAClC7B,KAAKwkD,UAAU7kD,GACfK,KAAKozH,KAAKD,GAEd,EASA1xE,EAAY8vE,QAAQhxB,UAAUgzB,eAAiB,SAASJ,EAASxzH,EAAOkC,GAClElC,GAASkC,IACX7B,KAAKwzH,OAAO7zH,GACZK,KAAKozH,KAAKD,GAEd,EASA1xE,EAAY8vE,QAAQhxB,UAAUizB,OAAS,SAASjuH,GAC9C,GAAIA,GAAOvF,KAAKm/B,SACd,MAAM,IAAI39B,MAAM,iDAEpB,EAMAigD,EAAY8vE,QAAQhxB,UAAUkzB,UAAY,WACxC,GAAIzzH,KAAK8xH,SACP,MAAM,IAAItwH,MAAM,wDAEpB,EAOAigD,EAAY8vE,QAAQhxB,UAAU6yB,KAAO,SAASD,GAC5CnzH,KAAK4xH,OAAOuB,GAAWnzH,KAAKm/B,QAC9B,EAKAsiB,EAAY8vE,QAAQhxB,UAAUphE,OAAS,WACrC,OAAOn/B,KAAKmjD,GAAGivE,WAAapyH,KAAK0xH,KACnC,EAcAjwE,EAAY8vE,QAAQmB,eAAiB,SAASvvE,GAC5C,IAAIsvE,EAAetvE,EAAGivE,WAGtB,GAAmB,WAAfK,EACF,MAAM,IAAIjxH,MAAM,uDAGlB,IAAIkyH,EAAejB,GAAgB,EAC/BkB,EAAMlyE,EAAYC,WAAW1Z,SAAS0rF,GAG1C,OAFAC,EAAIjwE,YAAYgwE,EAAejB,GAC/BkB,EAAI9oE,QAAQ1pD,IAAIgiD,EAAG0H,QAAS6oE,EAAejB,GACpCkB,CACT,EAQAlyE,EAAY8vE,QAAQhxB,UAAU/7C,UAAY,SAASrlB,GACjDn/B,KAAKgpD,KAAKvH,EAAYsvE,WAAY,GAClC/wH,KAAKipD,WAAWjpD,KAAKm/B,SAAWA,EAASsiB,EAAYsvE,WACvD,EAUAtvE,EAAY8vE,QAAQhxB,UAAUp8C,YAAc,SAASyvE,GACnD5zH,KAAKyzH,YACc,MAAfzzH,KAAK4xH,SACP5xH,KAAK4xH,OAAS,IAEhB5xH,KAAK6xH,cAAgB+B,EACrB,IAAK,IAAIjwH,EAAI,EAAGA,EAAIiwH,EAAWjwH,IAC7B3D,KAAK4xH,OAAOjuH,GAAK,EAEnB3D,KAAK8xH,UAAW,EAChB9xH,KAAK+xH,aAAe/xH,KAAKm/B,QAC3B,EAOAsiB,EAAY8vE,QAAQhxB,UAAU17C,UAAY,WACxC,GAAmB,MAAf7kD,KAAK4xH,SAAmB5xH,KAAK8xH,SAC/B,MAAM,IAAItwH,MAAM,qDAGlBxB,KAAK6sD,SAAS,GAKd,IAJA,IAAIgnE,EAAY7zH,KAAKm/B,SAGjBx7B,EAAI3D,KAAK6xH,cAAgB,EACtBluH,GAAK,GAAuB,GAAlB3D,KAAK4xH,OAAOjuH,GAASA,KAItC,IAHA,IAAImwH,EAAenwH,EAAI,EAGhBA,GAAK,EAAGA,IAEb3D,KAAKizH,SAA2B,GAAlBjzH,KAAK4xH,OAAOjuH,GAAUkwH,EAAY7zH,KAAK4xH,OAAOjuH,GAAK,GAInE3D,KAAKizH,SAASY,EAAY7zH,KAAK+xH,cAC/B,IAAItmF,GAAOqoF,EAFW,GAEuBryE,EAAYqvE,aACzD9wH,KAAKizH,SAASxnF,GAGd,IAAIsoF,EAAkB,EAClBC,EAAMh0H,KAAK0xH,MACjBuC,EACE,IAAKtwH,EAAI,EAAGA,EAAI3D,KAAKgyH,QAAQrzH,OAAQgF,IAAK,CACxC,IAAIuwH,EAAMl0H,KAAKmjD,GAAGivE,WAAapyH,KAAKgyH,QAAQruH,GAC5C,GAAI8nC,GAAOzrC,KAAKmjD,GAAGgxE,UAAUD,GAAM,CACjC,IAAK,IAAI10F,EAAIiiB,EAAYqvE,aAActxF,EAAIiM,EAAKjM,GAAKiiB,EAAYqvE,aAC/D,GAAI9wH,KAAKmjD,GAAGgxE,UAAUH,EAAMx0F,IAAMx/B,KAAKmjD,GAAGgxE,UAAUD,EAAM10F,GACxD,SAASy0F,EAGbF,EAAkB/zH,KAAKgyH,QAAQruH,GAC/B,KACF,CACF,CAmBA,OAjBIowH,GAGF/zH,KAAK0xH,MAAQ1xH,KAAKmjD,GAAGivE,WAAayB,EAGlC7zH,KAAKmjD,GAAG8F,WAAWjpD,KAAK0xH,MAAOqC,EAAkBF,KAIjD7zH,KAAKgyH,QAAQjtH,KAAK/E,KAAKm/B,UAGvBn/B,KAAKmjD,GAAG8F,WAAWjpD,KAAKmjD,GAAGivE,WAAayB,EAAW7zH,KAAKm/B,SAAW00F,IAGrE7zH,KAAK8xH,UAAW,EACT+B,CACT,EAUApyE,EAAY8vE,QAAQhxB,UAAUluD,OAAS,SAAS+hF,EAAYC,EAAqBC,GAC/E,IAAIC,EAAcD,EAAkB7yE,EAAYkC,mBAAqB,EACrE,GAAI0wE,EAAqB,CACvB,IAAIG,EAAkBH,EAGtB,GAFAr0H,KAAKgpD,KAAKhpD,KAAK2xH,SAAUlwE,EAAYsvE,WACnCtvE,EAAYuvE,uBAAyBuD,GACnCC,EAAgB71H,QAAU8iD,EAAYuvE,uBACxC,MAAM,IAAIxvH,MAAM,+CACdigD,EAAYuvE,wBAEhB,IAAK,IAAIrtH,EAAI89C,EAAYuvE,uBAAyB,EAAGrtH,GAAK,EAAGA,IAC3D3D,KAAK4yH,UAAU4B,EAAgB/vC,WAAW9gF,GAE9C,CACA3D,KAAKgpD,KAAKhpD,KAAK2xH,SAAUlwE,EAAYsvE,WAAawD,GAClDv0H,KAAKwkD,UAAU4vE,GACXG,GACFv0H,KAAK6sD,SAAS7sD,KAAKmjD,GAAGivE,WAAapyH,KAAK0xH,OAE1C1xH,KAAKmjD,GAAGO,YAAY1jD,KAAK0xH,MAC3B,EAQAjwE,EAAY8vE,QAAQhxB,UAAUk0B,mBAAqB,SAAUL,EAAYC,GACvEr0H,KAAKqyC,OAAO+hF,EAAYC,GAAqB,EAC/C,EAUA5yE,EAAY8vE,QAAQhxB,UAAU1nC,cAAgB,SAAS67D,EAAOC,GAC5D,IAAIC,EAAc50H,KAAKmjD,GAAGivE,WAAasC,EACnCG,EAAeD,EAAc50H,KAAKmjD,GAAGK,UAAUoxE,GAInD,GAHoD,GAA3C50H,KAAKmjD,GAAGgxE,UAAUU,EAAeF,GAIxC,MAAM,IAAInzH,MAAM,sBAAwBmzH,EAAQ,eAEpD,EAWAlzE,EAAY8vE,QAAQhxB,UAAUh8C,YAAc,SAASuwE,EAAWC,EAAWC,GACzEh1H,KAAKyzH,YACLzzH,KAAKiyH,iBAAmB8C,EACxB/0H,KAAKgpD,KAAKvH,EAAYsvE,WAAY+D,EAAYC,GAC9C/0H,KAAKgpD,KAAKgsE,EAAWF,EAAYC,EACnC,EASAtzE,EAAY8vE,QAAQhxB,UAAU97C,UAAY,WAExC,OADAzkD,KAAKipD,WAAWjpD,KAAKiyH,kBACdjyH,KAAKm/B,QACd,EAUAsiB,EAAY8vE,QAAQhxB,UAAU00B,aAAe,SAAS5wH,GACpD,GAAIA,aAAa4N,WACf,IAAImqG,EAAO/3G,MAEX,CAAI+3G,EAAO,GAGX,IAHA,IACIz4G,EAAI,EAEDA,EAAIU,EAAE1F,QAAQ,CACnB,IAAIu2H,EAGApjH,EAAIzN,EAAEogF,WAAW9gF,MAEnBuxH,EADEpjH,EAAI,OAAUA,GAAK,MACTA,GAGCA,GAAK,IADVzN,EAAEogF,WAAW9gF,MACO,UAId,IACdy4G,EAAKr3G,KAAKmwH,IAENA,EAAY,KACd9Y,EAAKr3G,KAAOmwH,GAAa,EAAK,GAAQ,MAElCA,EAAY,MACd9Y,EAAKr3G,KAAOmwH,GAAa,GAAM,GAAQ,KAEvC9Y,EAAKr3G,KACDmwH,GAAa,GAAM,EAAQ,IAC3BA,GAAa,GAAM,GAAQ,KAEjC9Y,EAAKr3G,KAAOmwH,GAAa,EAAK,GAAQ,MAExC9Y,EAAKr3G,KAAkB,GAAZmwH,EAAoB,KAEnC,CAjCa,CAoCfl1H,KAAK6vD,QAAQ,GACb7vD,KAAKukD,YAAY,EAAG63D,EAAKz9G,OAAQ,GACjCqB,KAAKmjD,GAAGO,YAAY1jD,KAAK0xH,OAAStV,EAAKz9G,QAC9BgF,EAAI,EAAb,IAAK,IAAWw7B,EAASn/B,KAAK0xH,MAAO7mE,EAAQ7qD,KAAKmjD,GAAG0H,QAASlnD,EAAIy4G,EAAKz9G,OAAQgF,IAC7EknD,EAAM1rB,KAAYi9E,EAAKz4G,GAEzB,OAAO3D,KAAKykD,WACd,EASAhD,EAAY8vE,QAAQhxB,UAAUr6C,WAAa,SAAS8d,EAAKC,GACvD,OAAOxiB,EAAYqiB,KAAKnkB,OAAOqkB,EAAKC,EACtC,EASAxiB,EAAYC,WAAa,SAASmJ,GAKhC7qD,KAAKm1H,OAAStqE,EAMd7qD,KAAKo1H,UAAY,CACnB,EAQA3zE,EAAYC,WAAW1Z,SAAW,SAAS2qF,GACzC,OAAO,IAAIlxE,EAAYC,WAAW,IAAIzvC,WAAW0gH,GACnD,EAEAlxE,EAAYC,WAAW6+C,UAAU4xB,MAAQ,WACvCnyH,KAAKo1H,UAAY,CACnB,EAOA3zE,EAAYC,WAAW6+C,UAAU11C,MAAQ,WACvC,OAAO7qD,KAAKm1H,MACd,EAOA1zE,EAAYC,WAAW6+C,UAAUr7D,SAAW,WAC1C,OAAOllC,KAAKo1H,SACd,EAOA3zE,EAAYC,WAAW6+C,UAAU78C,YAAc,SAASxe,GACtDllC,KAAKo1H,UAAYlwF,CACnB,EAOAuc,EAAYC,WAAW6+C,UAAU6xB,SAAW,WAC1C,OAAOpyH,KAAKm1H,OAAOx2H,MACrB,EAMA8iD,EAAYC,WAAW6+C,UAAUx6C,SAAW,SAAS5mB,GACnD,OAAOn/B,KAAK8tD,UAAU3uB,IAAW,IAAM,EACzC,EAMAsiB,EAAYC,WAAW6+C,UAAUzyC,UAAY,SAAS3uB,GACpD,OAAOn/B,KAAKm1H,OAAOh2F,EACrB,EAMAsiB,EAAYC,WAAW6+C,UAAU4zB,UAAY,SAASh1F,GACpD,OAAOn/B,KAAKq1H,WAAWl2F,IAAW,IAAM,EAC1C,EAMAsiB,EAAYC,WAAW6+C,UAAU80B,WAAa,SAASl2F,GACrD,OAAOn/B,KAAKm1H,OAAOh2F,GAAUn/B,KAAKm1H,OAAOh2F,EAAS,IAAM,CAC1D,EAMAsiB,EAAYC,WAAW6+C,UAAU/8C,UAAY,SAASrkB,GACpD,OAAOn/B,KAAKm1H,OAAOh2F,GAAUn/B,KAAKm1H,OAAOh2F,EAAS,IAAM,EAAIn/B,KAAKm1H,OAAOh2F,EAAS,IAAM,GAAKn/B,KAAKm1H,OAAOh2F,EAAS,IAAM,EACzH,EAMAsiB,EAAYC,WAAW6+C,UAAU93C,WAAa,SAAStpB,GACrD,OAAOn/B,KAAKwjD,UAAUrkB,KAAY,CACpC,EAMAsiB,EAAYC,WAAW6+C,UAAUt6C,UAAY,SAAS9mB,GACpD,OAAO,IAAIsiB,EAAYqiB,KAAK9jE,KAAKwjD,UAAUrkB,GAASn/B,KAAKwjD,UAAUrkB,EAAS,GAC9E,EAMAsiB,EAAYC,WAAW6+C,UAAUnpC,WAAa,SAASj4B,GACrD,OAAO,IAAIsiB,EAAYqiB,KAAK9jE,KAAKyoD,WAAWtpB,GAASn/B,KAAKyoD,WAAWtpB,EAAS,GAChF,EAMAsiB,EAAYC,WAAW6+C,UAAUpvC,YAAc,SAAShyB,GAEtD,OADAsiB,EAAY4/C,MAAM,GAAKrhG,KAAKwjD,UAAUrkB,GAC/BsiB,EAAY2vE,QAAQ,EAC7B,EAMA3vE,EAAYC,WAAW6+C,UAAU+0B,YAAc,SAASn2F,GAGtD,OAFAsiB,EAAY4/C,MAAM5/C,EAAY9vC,eAAiB,EAAI,GAAK3R,KAAKwjD,UAAUrkB,GACvEsiB,EAAY4/C,MAAM5/C,EAAY9vC,eAAiB,EAAI,GAAK3R,KAAKwjD,UAAUrkB,EAAS,GACzEsiB,EAAY4vE,QAAQ,EAC7B,EAMA5vE,EAAYC,WAAW6+C,UAAUqyB,UAAY,SAASzzF,EAAQx/B,GAC5DK,KAAKm1H,OAAOh2F,GAA+B,CAC7C,EAMAsiB,EAAYC,WAAW6+C,UAAUg1B,WAAa,SAASp2F,EAAQx/B,GAC7DK,KAAKm1H,OAAOh2F,GAAUx/B,CACxB,EAMA8hD,EAAYC,WAAW6+C,UAAUsyB,WAAa,SAAS1zF,EAAQx/B,GAC7DK,KAAKm1H,OAAOh2F,GAAUx/B,EACtBK,KAAKm1H,OAAOh2F,EAAS,GAAKx/B,GAAS,CACrC,EAMA8hD,EAAYC,WAAW6+C,UAAUi1B,YAAc,SAASr2F,EAAQx/B,GAC5DK,KAAKm1H,OAAOh2F,GAAUx/B,EACtBK,KAAKm1H,OAAOh2F,EAAS,GAAKx/B,GAAS,CACvC,EAMA8hD,EAAYC,WAAW6+C,UAAUt3C,WAAa,SAAS9pB,EAAQx/B,GAC7DK,KAAKm1H,OAAOh2F,GAAUx/B,EACtBK,KAAKm1H,OAAOh2F,EAAS,GAAKx/B,GAAS,EACnCK,KAAKm1H,OAAOh2F,EAAS,GAAKx/B,GAAS,GACnCK,KAAKm1H,OAAOh2F,EAAS,GAAKx/B,GAAS,EACrC,EAMA8hD,EAAYC,WAAW6+C,UAAUk1B,YAAc,SAASt2F,EAAQx/B,GAC5DK,KAAKm1H,OAAOh2F,GAAUx/B,EACtBK,KAAKm1H,OAAOh2F,EAAS,GAAKx/B,GAAS,EACnCK,KAAKm1H,OAAOh2F,EAAS,GAAKx/B,GAAS,GACnCK,KAAKm1H,OAAOh2F,EAAS,GAAKx/B,GAAS,EACvC,EAMA8hD,EAAYC,WAAW6+C,UAAUuyB,WAAa,SAAS3zF,EAAQx/B,GAC7DK,KAAKipD,WAAW9pB,EAAQx/B,EAAMqkE,KAC9BhkE,KAAKipD,WAAW9pB,EAAS,EAAGx/B,EAAMskE,KACpC,EAMAxiB,EAAYC,WAAW6+C,UAAUm1B,YAAc,SAASv2F,EAAQx/B,GAC5DK,KAAKy1H,YAAYt2F,EAAQx/B,EAAMqkE,KAC/BhkE,KAAKy1H,YAAYt2F,EAAS,EAAGx/B,EAAMskE,KACvC,EAMAxiB,EAAYC,WAAW6+C,UAAUwyB,aAAe,SAAS5zF,EAAQx/B,GAC/D8hD,EAAY2vE,QAAQ,GAAKzxH,EACzBK,KAAKipD,WAAW9pB,EAAQsiB,EAAY4/C,MAAM,GAC5C,EAMA5/C,EAAYC,WAAW6+C,UAAUyyB,aAAe,SAAS7zF,EAAQx/B,GAC/D8hD,EAAY4vE,QAAQ,GAAK1xH,EACzBK,KAAKipD,WAAW9pB,EAAQsiB,EAAY4/C,MAAM5/C,EAAY9vC,eAAiB,EAAI,IAC3E3R,KAAKipD,WAAW9pB,EAAS,EAAGsiB,EAAY4/C,MAAM5/C,EAAY9vC,eAAiB,EAAI,GACjF,EAQA8vC,EAAYC,WAAW6+C,UAAUo1B,oBAAsB,WACrD,GAAI31H,KAAKm1H,OAAOx2H,OAASqB,KAAKo1H,UAAY3zE,EAAYsvE,WAClDtvE,EAAYuvE,uBACd,MAAM,IAAIxvH,MACN,kEAGN,IADA,IAAI6G,EAAS,GACJ1E,EAAI,EAAGA,EAAI89C,EAAYuvE,uBAAwBrtH,IACtD0E,GAAUk8E,OAAOC,aACbxkF,KAAK+lD,SAAS/lD,KAAKo1H,UAAY3zE,EAAYsvE,WAAaptH,IAE9D,OAAO0E,CACT,EAUAo5C,EAAYC,WAAW6+C,UAAU38C,SAAW,SAASR,EAAQwyE,GAC3D,IAAIhE,EAASxuE,EAASpjD,KAAKwjD,UAAUJ,GACrC,OAAOwyE,EAAgB51H,KAAKm0H,UAAUvC,GAAU5xH,KAAKm0H,UAAUvC,EAASgE,GAAiB,CAC3F,EASAn0E,EAAYC,WAAW6+C,UAAUvyC,QAAU,SAAS1pD,EAAG66B,GAGrD,OAFA76B,EAAE8+C,OAASjkB,EAASn/B,KAAKwjD,UAAUrkB,GACnC76B,EAAE6+C,GAAKnjD,KACAsE,CACT,EAeAm9C,EAAYC,WAAW6+C,UAAUn7C,SAAW,SAASjmB,EAAQ02F,GAC3D12F,GAAUn/B,KAAKwjD,UAAUrkB,GAEzB,IAAIxgC,EAASqB,KAAKwjD,UAAUrkB,GACxB92B,EAAS,GACT1E,EAAI,EAIR,GAFAw7B,GAAUsiB,EAAYsvE,WAElB8E,IAAiBp0E,EAAYwvE,SAASC,WACxC,OAAOlxH,KAAKm1H,OAAOz7G,SAASylB,EAAQA,EAASxgC,GAG/C,KAAOgF,EAAIhF,GAAQ,CACjB,IAAIu2H,EAGApjH,EAAI9R,KAAK8tD,UAAU3uB,EAASx7B,KAChC,GAAImO,EAAI,IACNojH,EAAYpjH,MACP,CACL,IAAI5H,EAAIlK,KAAK8tD,UAAU3uB,EAASx7B,KAChC,GAAImO,EAAI,IACNojH,GACQ,GAAJpjH,IAAa,EACV,GAAJ5H,MACE,CACL,IAAI8H,EAAIhS,KAAK8tD,UAAU3uB,EAASx7B,KAE9BuxH,EADEpjH,EAAI,KAEE,GAAJA,IAAa,IACT,GAAJ5H,IAAa,EACV,GAAJ8H,GAIK,EAAJF,IAAa,IACT,GAAJ5H,IAAa,IACT,GAAJ8H,IAAa,EACV,GALChS,KAAK8tD,UAAU3uB,EAASx7B,IAOpC,CACF,CAGIuxH,EAAY,MACd7sH,GAAUk8E,OAAOC,aAAa0wC,IAE9BA,GAAa,MACb7sH,GAAUk8E,OAAOC,aACK,OAAnB0wC,GAAa,IACkB,OAAnB,KAAZA,IAEP,CAEA,OAAO7sH,CACT,EAOAo5C,EAAYC,WAAW6+C,UAAUz8C,WAAa,SAAS3kB,GACrD,OAAOA,EAASn/B,KAAKwjD,UAAUrkB,EACjC,EAQAsiB,EAAYC,WAAW6+C,UAAUx8C,SAAW,SAAS5kB,GACnD,OAAOA,EAASn/B,KAAKwjD,UAAUrkB,GAAUsiB,EAAYsvE,UACvD,EAQAtvE,EAAYC,WAAW6+C,UAAUv8C,aAAe,SAAS7kB,GACvD,OAAOn/B,KAAKwjD,UAAUrkB,EAASn/B,KAAKwjD,UAAUrkB,GAChD,EAMAsiB,EAAYC,WAAW6+C,UAAUxmC,iBAAmB,SAAS+7D,GAC3D,GAAIA,EAAMn3H,QAAU8iD,EAAYuvE,uBAC9B,MAAM,IAAIxvH,MAAM,+CACAigD,EAAYuvE,wBAE9B,IAAK,IAAIrtH,EAAI,EAAGA,EAAI89C,EAAYuvE,uBAAwBrtH,IACtD,GAAImyH,EAAMrxC,WAAW9gF,IAAM3D,KAAK+lD,SAAS/lD,KAAKo1H,UAAY3zE,EAAYsvE,WAAaptH,GACjF,OAAO,EAGX,OAAO,CACT,EASA89C,EAAYC,WAAW6+C,UAAUr6C,WAAa,SAAS8d,EAAKC,GAC1D,OAAOxiB,EAAYqiB,KAAKnkB,OAAOqkB,EAAKC,EACtC,C,GCnuCI8xD,yBAA2B,CAAC,EAGhC,SAASC,oBAAoBC,GAE5B,IAAIC,EAAeH,yBAAyBE,GAC5C,QAAqB1zH,IAAjB2zH,EACH,OAAOA,EAAal5H,QAGrB,IAAIC,EAAS84H,yBAAyBE,GAAY,CAGjDj5H,QAAS,CAAC,GAOX,OAHAm5H,oBAAoBF,GAAU5+F,KAAKp6B,EAAOD,QAASC,EAAQA,EAAOD,QAASg5H,qBAGpE/4H,EAAOD,OACf,CCrBAg5H,oBAAoB/lF,EAAI,SAAShzC,GAChC,IAAIm5H,EAASn5H,GAAUA,EAAOw/G,WAC7B,WAAa,OAAOx/G,EAAgB,OAAG,EACvC,WAAa,OAAOA,CAAQ,EAE7B,OADA+4H,oBAAoB3pH,EAAE+pH,EAAQ,CAAEtkH,EAAGskH,IAC5BA,CACR,ECNAJ,oBAAoB3pH,EAAI,SAASrP,EAASq5H,GACzC,IAAI,IAAI50H,KAAO40H,EACXL,oBAAoBxwH,EAAE6wH,EAAY50H,KAASu0H,oBAAoBxwH,EAAExI,EAASyE,IAC5EjC,OAAOC,eAAezC,EAASyE,EAAK,CAAE5B,YAAY,EAAMiC,IAAKu0H,EAAW50H,IAG3E,ECPAu0H,oBAAoBxwH,EAAI,SAASD,EAAK+7G,GAAQ,OAAO9hH,OAAO+gG,UAAUnpE,eAAeC,KAAK9xB,EAAK+7G,EAAO,ECCtG0U,oBAAoBtnG,EAAI,SAAS1xB,GACX,oBAAXs5H,QAA0BA,OAAOC,aAC1C/2H,OAAOC,eAAezC,EAASs5H,OAAOC,YAAa,CAAE52H,MAAO,WAE7DH,OAAOC,eAAezC,EAAS,aAAc,CAAE2C,OAAO,GACvD,ECHA,IAAI62H,oBAAsBR,oBAAoB,M","sources":["webpack://ort/webpack/universalModuleDefinition","webpack://ort/./lib/backend-onnxjs.ts","webpack://ort/./lib/backend-wasm.ts","webpack://ort/./lib/index.ts","webpack://ort/./lib/onnxjs/attribute-with-cache-key.ts","webpack://ort/./lib/onnxjs/attribute.ts","webpack://ort/./lib/onnxjs/backend.ts","webpack://ort/./lib/onnxjs/backends/backend-webgl.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-coordinate-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-definitions.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-encoding-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-fragcolor-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-function-inliner.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-preprocessor.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-registered-libs.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-shape-utils-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-source.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-vec-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/inference-handler.ts","webpack://ort/./lib/onnxjs/backends/webgl/op-resolve-rules.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/batch-normalization.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/binary-op.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/cast.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/concat-packed.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/concat.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/conv-grouped.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/conv-pack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/conv-transpose.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/conv.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/depth-to-space.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/dot-product.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/flatten.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/fuse-utils.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/gather.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/gemm.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/im2col-pack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/im2col.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/image-scaler.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/instance-normalization.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/lrn.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/matmul-pack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/matmul.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/pack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/packing-utils.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/pad.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/pool.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/reduce.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/reshape-packed.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/reshape.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/resize-packed.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/shape.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/slice.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/softmax.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/split.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/squeeze.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/sum.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/tile.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/transpose.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/uint8-encode.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/unary-op.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/unpack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/unsqueeze.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/upsample.ts","webpack://ort/./lib/onnxjs/backends/webgl/program-manager.ts","webpack://ort/./lib/onnxjs/backends/webgl/session-handler.ts","webpack://ort/./lib/onnxjs/backends/webgl/texture-data-encoder.ts","webpack://ort/./lib/onnxjs/backends/webgl/texture-layout-strategy.ts","webpack://ort/./lib/onnxjs/backends/webgl/texture-layout.ts","webpack://ort/./lib/onnxjs/backends/webgl/texture-manager.ts","webpack://ort/./lib/onnxjs/backends/webgl/types.ts","webpack://ort/./lib/onnxjs/backends/webgl/utils.ts","webpack://ort/./lib/onnxjs/backends/webgl/webgl-context-factory.ts","webpack://ort/./lib/onnxjs/backends/webgl/webgl-context.ts","webpack://ort/./lib/onnxjs/execution-plan.ts","webpack://ort/./lib/onnxjs/graph.ts","webpack://ort/./lib/onnxjs/instrument.ts","webpack://ort/./lib/onnxjs/model.ts","webpack://ort/./lib/onnxjs/operators.ts","webpack://ort/./lib/onnxjs/opset.ts","webpack://ort/./lib/onnxjs/ort-schema/flatbuffers/ort-generated.ts","webpack://ort/./lib/onnxjs/session-handler.ts","webpack://ort/./lib/onnxjs/session.ts","webpack://ort/./lib/onnxjs/tensor.ts","webpack://ort/./lib/onnxjs/util.ts","webpack://ort/./lib/version.ts","webpack://ort/./lib/wasm/jsep/backend-webgpu.ts","webpack://ort/./lib/wasm/jsep/init.ts","webpack://ort/./lib/wasm/jsep/log.ts","webpack://ort/./lib/wasm/jsep/tensor-view.ts","webpack://ort/./lib/wasm/jsep/util.ts","webpack://ort/./lib/wasm/jsep/webgpu/attribute-with-cache-key.ts","webpack://ort/./lib/wasm/jsep/webgpu/gpu-data-manager.ts","webpack://ort/./lib/wasm/jsep/webgpu/op-resolve-rules.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/3rd-party/activation_util.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/3rd-party/conv2d_mm_webgpu.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/3rd-party/conv_backprop_mm_webgpu.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/3rd-party/conv_backprop_webgpu.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/3rd-party/conv_util.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/3rd-party/matmul_packed_webgpu.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/argminmax.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/bias-add.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/bias-split-gelu.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/binary-op.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/common.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/concat.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/conv-grouped.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/conv-transpose.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/conv.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/conv2d-mm.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/conv2dtranspose-mm.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/einsum.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/expand.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/fuse-utils.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/gather-elements.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/gather.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/gemm.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/instance-norm.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/layer-norm.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/matmul.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/pad.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/pool.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/range.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/reduce.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/resize.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/skip-layer-norm.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/slice.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/softmax.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/split.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/tile.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/transpose.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/unary-op.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/where.ts","webpack://ort/./lib/wasm/jsep/webgpu/program-manager.ts","webpack://ort/./lib/wasm/jsep/webgpu/types.ts","webpack://ort/./lib/wasm/proxy-wrapper.ts","webpack://ort/./lib/wasm/run-options.ts","webpack://ort/./lib/wasm/session-handler.ts","webpack://ort/./lib/wasm/session-options.ts","webpack://ort/./lib/wasm/wasm-common.ts","webpack://ort/./lib/wasm/wasm-core-impl.ts","webpack://ort/./lib/wasm/wasm-factory.ts","webpack://ort/./lib/wasm/wasm-utils.ts","webpack://ort/./lib/wasm/proxy-worker/main.ts","webpack://ort/../node_modules/worker-loader/dist/runtime/inline.js","webpack://ort/./lib/onnxjs/ort-schema/protobuf/onnx.js","webpack://ort/./lib/wasm/binding/ort-wasm-threaded.min.js","webpack://ort/./lib/wasm/binding/ort-wasm.js","webpack://ort/./node_modules/@protobufjs/aspromise/index.js","webpack://ort/./node_modules/@protobufjs/base64/index.js","webpack://ort/./node_modules/@protobufjs/eventemitter/index.js","webpack://ort/./node_modules/@protobufjs/float/index.js","webpack://ort/./node_modules/@protobufjs/inquire/index.js","webpack://ort/./node_modules/@protobufjs/pool/index.js","webpack://ort/./node_modules/@protobufjs/utf8/index.js","webpack://ort/./node_modules/guid-typescript/dist/guid.js","webpack://ort/./node_modules/protobufjs/minimal.js","webpack://ort/./node_modules/protobufjs/src/index-minimal.js","webpack://ort/./node_modules/protobufjs/src/reader.js","webpack://ort/./node_modules/protobufjs/src/reader_buffer.js","webpack://ort/./node_modules/protobufjs/src/roots.js","webpack://ort/./node_modules/protobufjs/src/rpc.js","webpack://ort/./node_modules/protobufjs/src/rpc/service.js","webpack://ort/./node_modules/protobufjs/src/util/longbits.js","webpack://ort/./node_modules/protobufjs/src/util/minimal.js","webpack://ort/./node_modules/protobufjs/src/writer.js","webpack://ort/./node_modules/protobufjs/src/writer_buffer.js","webpack://ort/./node_modules/long/umd/index.js","webpack://ort/./node_modules/onnxruntime-common/dist/cjs/backend-impl.js","webpack://ort/./node_modules/onnxruntime-common/dist/cjs/backend.js","webpack://ort/./node_modules/onnxruntime-common/dist/cjs/env-impl.js","webpack://ort/./node_modules/onnxruntime-common/dist/cjs/env.js","webpack://ort/./node_modules/onnxruntime-common/dist/cjs/index.js","webpack://ort/./node_modules/onnxruntime-common/dist/cjs/inference-session-impl.js","webpack://ort/./node_modules/onnxruntime-common/dist/cjs/inference-session.js","webpack://ort/./node_modules/onnxruntime-common/dist/cjs/onnx-value.js","webpack://ort/./node_modules/onnxruntime-common/dist/cjs/tensor-conversion-impl.js","webpack://ort/./node_modules/onnxruntime-common/dist/cjs/tensor-factory-impl.js","webpack://ort/./node_modules/onnxruntime-common/dist/cjs/tensor-impl-type-mapping.js","webpack://ort/./node_modules/onnxruntime-common/dist/cjs/tensor-impl.js","webpack://ort/./node_modules/onnxruntime-common/dist/cjs/tensor-utils-impl.js","webpack://ort/./node_modules/onnxruntime-common/dist/cjs/tensor.js","webpack://ort/./node_modules/onnxruntime-common/dist/cjs/training-session-impl.js","webpack://ort/./node_modules/onnxruntime-common/dist/cjs/training-session.js","webpack://ort/./node_modules/onnxruntime-common/dist/cjs/version.js","webpack://ort/./node_modules/flatbuffers/js/flatbuffers.mjs","webpack://ort/webpack/bootstrap","webpack://ort/webpack/runtime/compat get default export","webpack://ort/webpack/runtime/define property getters","webpack://ort/webpack/runtime/hasOwnProperty shorthand","webpack://ort/webpack/runtime/make namespace object","webpack://ort/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ort\"] = factory();\n\telse\n\t\troot[\"ort\"] = factory();\n})(self, function() {\nreturn ","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/* eslint-disable import/no-internal-modules */\nimport {Backend, InferenceSession, InferenceSessionHandler} from 'onnxruntime-common';\n\nimport {Session} from './onnxjs/session';\nimport {OnnxjsSessionHandler} from './onnxjs/session-handler';\n\nclass OnnxjsBackend implements Backend {\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  async init(): Promise<void> {}\n\n  async createInferenceSessionHandler(pathOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions):\n      Promise<InferenceSessionHandler> {\n    // NOTE: Session.Config(from onnx.js) is not compatible with InferenceSession.SessionOptions(from\n    // onnxruntime-common).\n    //       In future we should remove Session.Config and use InferenceSession.SessionOptions.\n    //       Currently we allow this to happen to make test runner work.\n    const session = new Session(options as unknown as Session.Config);\n\n    // typescript cannot merge method override correctly (so far in 4.2.3). need if-else to call the method.\n    if (typeof pathOrBuffer === 'string') {\n      await session.loadModel(pathOrBuffer);\n    } else {\n      await session.loadModel(pathOrBuffer);\n    }\n\n    return new OnnxjsSessionHandler(session);\n  }\n}\n\nexport const onnxjsBackend = new OnnxjsBackend();\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Backend, env, InferenceSession, InferenceSessionHandler} from 'onnxruntime-common';\nimport {cpus} from 'os';\n\nimport {initializeWebAssemblyInstance} from './wasm/proxy-wrapper';\nimport {OnnxruntimeWebAssemblySessionHandler} from './wasm/session-handler';\n\n/**\n * This function initializes all flags for WebAssembly.\n *\n * Those flags are accessible from `ort.env.wasm`. Users are allow to set those flags before the first inference session\n * being created, to override default value.\n */\nexport const initializeFlags = (): void => {\n  if (typeof env.wasm.initTimeout !== 'number' || env.wasm.initTimeout < 0) {\n    env.wasm.initTimeout = 0;\n  }\n\n  if (typeof env.wasm.simd !== 'boolean') {\n    env.wasm.simd = true;\n  }\n\n  if (typeof env.wasm.proxy !== 'boolean') {\n    env.wasm.proxy = false;\n  }\n\n  if (typeof env.wasm.numThreads !== 'number' || !Number.isInteger(env.wasm.numThreads) || env.wasm.numThreads <= 0) {\n    const numCpuLogicalCores = typeof navigator === 'undefined' ? cpus().length : navigator.hardwareConcurrency;\n    env.wasm.numThreads = Math.min(4, Math.ceil((numCpuLogicalCores || 1) / 2));\n  }\n};\n\nclass OnnxruntimeWebAssemblyBackend implements Backend {\n  async init(): Promise<void> {\n    // populate wasm flags\n    initializeFlags();\n\n    // init wasm\n    await initializeWebAssemblyInstance();\n  }\n  createInferenceSessionHandler(path: string, options?: InferenceSession.SessionOptions):\n      Promise<InferenceSessionHandler>;\n  createInferenceSessionHandler(buffer: Uint8Array, options?: InferenceSession.SessionOptions):\n      Promise<InferenceSessionHandler>;\n  async createInferenceSessionHandler(pathOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions):\n      Promise<InferenceSessionHandler> {\n    const handler = new OnnxruntimeWebAssemblySessionHandler();\n    await handler.loadModel(pathOrBuffer, options);\n    return Promise.resolve(handler);\n  }\n}\n\nexport const wasmBackend = new OnnxruntimeWebAssemblyBackend();\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/* eslint-disable @typescript-eslint/no-var-requires, @typescript-eslint/no-require-imports */\n// We use \"require\" instead of \"import\" here because import statement must be put in top level. Our current code does\n// not allow terser to tree-shaking code as expected because some codes are treated as having side effects.\n// So we import code inside the if-clause to allow terser remove the code safely.\n\nexport * from 'onnxruntime-common';\nimport {registerBackend, env} from 'onnxruntime-common';\nimport {version} from './version';\n\nif (!BUILD_DEFS.DISABLE_WEBGL) {\n  const onnxjsBackend = require('./backend-onnxjs').onnxjsBackend;\n  registerBackend('webgl', onnxjsBackend, -10);\n}\n\nif (!BUILD_DEFS.DISABLE_WASM) {\n  const wasmBackend = require('./backend-wasm').wasmBackend;\n  if (!BUILD_DEFS.DISABLE_WEBGPU && typeof navigator !== 'undefined' && navigator.gpu) {\n    registerBackend('webgpu', wasmBackend, 5);\n  }\n  registerBackend('cpu', wasmBackend, 10);\n  registerBackend('wasm', wasmBackend, 10);\n  registerBackend('xnnpack', wasmBackend, 9);\n  registerBackend('webnn', wasmBackend, 9);\n}\n\nObject.defineProperty(env.versions, 'web', {value: version, enumerable: true});\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nclass AttributeWithCacheKeyImpl {\n  constructor(attribute: Record<string, unknown>) {\n    Object.assign(this, attribute);\n  }\n\n  private _cacheKey: string;\n  public get cacheKey(): string {\n    if (!this._cacheKey) {\n      this._cacheKey =\n          Object.getOwnPropertyNames(this).sort().map(name => `${(this as Record<string, unknown>)[name]}`).join(';');\n    }\n    return this._cacheKey;\n  }\n}\n\nexport interface AttributeWithCacheKey {\n  readonly cacheKey: string;\n}\n\nexport const createAttributeWithCacheKey = <T extends Record<string, unknown>>(attribute: T): T&AttributeWithCacheKey =>\n    new AttributeWithCacheKeyImpl(attribute) as unknown as T & AttributeWithCacheKey;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport Long from 'long';\n\nimport {onnxruntime} from './ort-schema/flatbuffers/ort-generated';\nimport {onnx} from './ort-schema/protobuf/onnx';\nimport {Tensor} from './tensor';\nimport {decodeUtf8String, LongUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport declare namespace Attribute {\n  export interface DataTypeMap {\n    float: number;\n    int: number;\n    string: string;\n    tensor: Tensor;\n    floats: number[];\n    ints: number[];\n    strings: string[];\n    tensors: Tensor[];\n  }\n\n  export type DataType = keyof DataTypeMap;\n}\n\ntype ValueTypes = Attribute.DataTypeMap[Attribute.DataType];\n\ntype Value = [ValueTypes, Attribute.DataType];\n\nexport class Attribute {\n  constructor(attributes: onnx.IAttributeProto[]|ortFbs.Attribute[]|null|undefined) {\n    this._attributes = new Map();\n    if (attributes !== null && attributes !== undefined) {\n      for (const attr of attributes) {\n        if (attr instanceof onnx.AttributeProto) {\n          this._attributes.set(attr.name, [Attribute.getValue(attr), Attribute.getType(attr)]);\n        } else if (attr instanceof ortFbs.Attribute) {\n          this._attributes.set(attr.name()!, [Attribute.getValue(attr), Attribute.getType(attr)]);\n        }\n      }\n      if (this._attributes.size < attributes.length) {\n        throw new Error('duplicated attribute names');\n      }\n    }\n  }\n\n  set(key: string, type: Attribute.DataType, value: ValueTypes): void {\n    this._attributes.set(key, [value, type]);\n  }\n  delete(key: string): void {\n    this._attributes.delete(key);\n  }\n  getFloat(key: string, defaultValue?: Attribute.DataTypeMap['float']) {\n    return this.get(key, 'float', defaultValue);\n  }\n\n  getInt(key: string, defaultValue?: Attribute.DataTypeMap['int']) {\n    return this.get(key, 'int', defaultValue);\n  }\n\n  getString(key: string, defaultValue?: Attribute.DataTypeMap['string']) {\n    return this.get(key, 'string', defaultValue);\n  }\n\n  getTensor(key: string, defaultValue?: Attribute.DataTypeMap['tensor']) {\n    return this.get(key, 'tensor', defaultValue);\n  }\n\n  getFloats(key: string, defaultValue?: Attribute.DataTypeMap['floats']) {\n    return this.get(key, 'floats', defaultValue);\n  }\n\n  getInts(key: string, defaultValue?: Attribute.DataTypeMap['ints']) {\n    return this.get(key, 'ints', defaultValue);\n  }\n\n  getStrings(key: string, defaultValue?: Attribute.DataTypeMap['strings']) {\n    return this.get(key, 'strings', defaultValue);\n  }\n\n  getTensors(key: string, defaultValue?: Attribute.DataTypeMap['tensors']) {\n    return this.get(key, 'tensors', defaultValue);\n  }\n\n  private get<V extends Attribute.DataTypeMap[Attribute.DataType]>(\n      key: string, type: Attribute.DataType, defaultValue?: V): V {\n    const valueAndType = this._attributes.get(key);\n    if (valueAndType === undefined) {\n      if (defaultValue !== undefined) {\n        return defaultValue;\n      }\n      throw new Error(`required attribute not found: ${key}`);\n    }\n    if (valueAndType[1] !== type) {\n      throw new Error(`type mismatch: expected ${type} but got ${valueAndType[1]}`);\n    }\n    return valueAndType[0] as V;\n  }\n\n  private static getType(attr: onnx.IAttributeProto|ortFbs.Attribute): Attribute.DataType {\n    const type = attr instanceof onnx.AttributeProto ? (attr).type : (attr as ortFbs.Attribute).type();\n    switch (type) {\n      case onnx.AttributeProto.AttributeType.FLOAT:\n        return 'float';\n      case onnx.AttributeProto.AttributeType.INT:\n        return 'int';\n      case onnx.AttributeProto.AttributeType.STRING:\n        return 'string';\n      case onnx.AttributeProto.AttributeType.TENSOR:\n        return 'tensor';\n      case onnx.AttributeProto.AttributeType.FLOATS:\n        return 'floats';\n      case onnx.AttributeProto.AttributeType.INTS:\n        return 'ints';\n      case onnx.AttributeProto.AttributeType.STRINGS:\n        return 'strings';\n      case onnx.AttributeProto.AttributeType.TENSORS:\n        return 'tensors';\n      default:\n        throw new Error(`attribute type is not supported yet: ${onnx.AttributeProto.AttributeType[type]}`);\n    }\n  }\n\n  private static getValue(attr: onnx.IAttributeProto|ortFbs.Attribute) {\n    const attrType = attr instanceof onnx.AttributeProto ? attr.type : (attr as ortFbs.Attribute).type();\n    if (attrType === onnx.AttributeProto.AttributeType.GRAPH || attrType === onnx.AttributeProto.AttributeType.GRAPHS) {\n      throw new Error('graph attribute is not supported yet');\n    }\n\n    const value = this.getValueNoCheck(attr);\n\n    // cast LONG to number\n    if (attrType === onnx.AttributeProto.AttributeType.INT && LongUtil.isLong(value)) {\n      return LongUtil.longToNumber(value as Long | flatbuffers.Long);\n    }\n\n    // cast LONG[] to number[]\n    if (attrType === onnx.AttributeProto.AttributeType.INTS) {\n      const arr = (value as Array<number|Long|flatbuffers.Long>);\n      const numberValue: number[] = new Array<number>(arr.length);\n\n      for (let i = 0; i < arr.length; i++) {\n        const maybeLong = arr[i];\n        numberValue[i] = LongUtil.longToNumber(maybeLong);\n      }\n\n      return numberValue;\n    }\n\n    // cast onnx.TensorProto to onnxjs.Tensor\n    if (attrType === onnx.AttributeProto.AttributeType.TENSOR) {\n      return attr instanceof onnx.AttributeProto ? Tensor.fromProto(value as onnx.ITensorProto) :\n                                                   Tensor.fromOrtTensor(value as ortFbs.Tensor);\n    }\n\n    // cast onnx.TensorProto[] to onnxjs.Tensor[]\n    if (attrType === onnx.AttributeProto.AttributeType.TENSORS) {\n      if (attr instanceof onnx.AttributeProto) {\n        const tensorProtos = value as onnx.ITensorProto[];\n        return tensorProtos.map(value => Tensor.fromProto(value));\n      } else if (attr instanceof ortFbs.Attribute) {\n        const tensorProtos = value as ortFbs.Tensor[];\n        return tensorProtos.map(value => Tensor.fromOrtTensor(value));\n      }\n    }\n\n    // cast Uint8Array to string\n    if (attrType === onnx.AttributeProto.AttributeType.STRING) {\n      // string in onnx attribute is of uint8array type, so we need to convert it to string below. While in ort format,\n      // string attributes are returned as string, so no conversion is needed.\n      if (attr instanceof onnx.AttributeProto) {\n        const utf8String = value as Uint8Array;\n        return decodeUtf8String(utf8String);\n      }\n    }\n\n    // cast Uint8Array[] to string[]\n    if (attrType === onnx.AttributeProto.AttributeType.STRINGS) {\n      // strings in onnx attribute is returned as uint8array[], so we need to convert it to string[] below. While in ort\n      // format strings attributes are returned as string[], so no conversion is needed.\n      if (attr instanceof onnx.AttributeProto) {\n        const utf8Strings = value as Uint8Array[];\n        return utf8Strings.map(decodeUtf8String);\n      }\n    }\n\n    return value as ValueTypes;\n  }\n\n  private static getValueNoCheck(attr: onnx.IAttributeProto|ortFbs.Attribute) {\n    return attr instanceof (onnx.AttributeProto) ? this.getValueNoCheckFromOnnxFormat(attr) :\n                                                   this.getValueNoCheckFromOrtFormat(attr as ortFbs.Attribute);\n  }\n\n  private static getValueNoCheckFromOnnxFormat(attr: onnx.IAttributeProto) {\n    switch (attr.type!) {\n      case onnx.AttributeProto.AttributeType.FLOAT:\n        return attr.f;\n      case onnx.AttributeProto.AttributeType.INT:\n        return attr.i;\n      case onnx.AttributeProto.AttributeType.STRING:\n        return attr.s;\n      case onnx.AttributeProto.AttributeType.TENSOR:\n        return attr.t;\n      case onnx.AttributeProto.AttributeType.GRAPH:\n        return attr.g;\n      case onnx.AttributeProto.AttributeType.FLOATS:\n        return attr.floats;\n      case onnx.AttributeProto.AttributeType.INTS:\n        return attr.ints;\n      case onnx.AttributeProto.AttributeType.STRINGS:\n        return attr.strings;\n      case onnx.AttributeProto.AttributeType.TENSORS:\n        return attr.tensors;\n      case onnx.AttributeProto.AttributeType.GRAPHS:\n        return attr.graphs;\n      default:\n        throw new Error(`unsupported attribute type: ${onnx.AttributeProto.AttributeType[attr.type!]}`);\n    }\n  }\n\n  private static getValueNoCheckFromOrtFormat(attr: ortFbs.Attribute) {\n    switch (attr.type()) {\n      case ortFbs.AttributeType.FLOAT:\n        return attr.f();\n      case ortFbs.AttributeType.INT:\n        return attr.i();\n      case ortFbs.AttributeType.STRING:\n        return attr.s();\n      case ortFbs.AttributeType.TENSOR:\n        return attr.t();\n      case ortFbs.AttributeType.GRAPH:\n        return attr.g();\n      case ortFbs.AttributeType.FLOATS:\n        return attr.floatsArray();\n      case ortFbs.AttributeType.INTS: {\n        const ints = [];\n        for (let i = 0; i < attr.intsLength(); i++) {\n          ints.push(attr.ints(i)!);\n        }\n        return ints;\n      }\n      case ortFbs.AttributeType.STRINGS: {\n        const strings = [];\n        for (let i = 0; i < attr.stringsLength(); i++) {\n          strings.push(attr.strings(i));\n        }\n        return strings;\n      }\n      case ortFbs.AttributeType.TENSORS: {\n        const tensors = [];\n        for (let i = 0; i < attr.tensorsLength(); i++) {\n          tensors.push(attr.tensors(i)!);\n        }\n        return tensors;\n      }\n      // case ortFbs.AttributeType.GRAPHS:\n      // TODO: Subgraph not supported yet.\n      // const graphs = [];\n      // for (let i = 0; i < attr.graphsLength(); i++) {\n      //   graphs.push(attr.graphs(i)!);\n      // }\n      // return graphs;\n      default:\n        throw new Error(`unsupported attribute type: ${ortFbs.AttributeType[attr.type()]}`);\n    }\n  }\n\n  protected _attributes: Map<string, Value>;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {WebGLBackend} from './backends/backend-webgl';\nimport {Graph} from './graph';\nimport {Operator} from './operators';\nimport {OpSet} from './opset';\nimport {Session} from './session';\n\nexport interface InferenceHandler {\n  /**\n   * dispose the inference handler. it will be called as the last step in Session.run()\n   */\n  dispose(): void;\n}\n\nexport interface SessionHandler {\n  /**\n   * transform the graph at initialization time\n   * @param graphTransformer the graph transformer to manipulate the model graph\n   */\n  transformGraph?(graphTransformer: Graph.Transformer): void;\n\n  /**\n   * create an instance of InferenceHandler to use in a Session.run() call\n   */\n  createInferenceHandler(): InferenceHandler;\n\n  /**\n   * dispose the session handler. it will be called when a session is being disposed explicitly\n   */\n  dispose(): void;\n\n  /**\n   * Resolves the operator from the name and opset version; backend specific\n   * @param node the node to resolve\n   * @param opsets a list of opsets that exported from the model\n   * @param graph the completely initialized graph\n   */\n  resolve(node: Graph.Node, opsets: readonly OpSet[], graph: Graph): Operator;\n\n  /**\n   * This method let's the sessionHandler know that the graph initialization is complete\n   * @param graph the completely initialized graph\n   */\n  onGraphInitialized?(graph: Graph): void;\n\n  /**\n   * a reference to the corresponding backend\n   */\n  readonly backend: Backend;\n\n  /**\n   * a reference to the session context\n   */\n  readonly context: Session.Context;\n}\n\nexport interface Backend {\n  /**\n   * initialize the backend. will be called only once, when the first time the\n   * backend it to be used\n   */\n  initialize(): boolean|Promise<boolean>;\n\n  /**\n   * create an instance of SessionHandler to use in a Session object's lifecycle\n   */\n  createSessionHandler(context: Session.Context): SessionHandler;\n\n  /**\n   * dispose the backend. currently this will not be called\n   */\n  dispose(): void;\n}\n\n// caches all initialized backend instances\nconst backendsCache: Map<string, Backend> = new Map();\n\nexport const backend: {[name: string]: Backend} = {\n  webgl: new WebGLBackend()\n};\n\n/**\n * Resolve a reference to the backend. If a hint is specified, the corresponding\n * backend will be used.\n */\nexport async function resolveBackend(hint?: string|readonly string[]): Promise<Backend> {\n  if (!hint) {\n    return resolveBackend(['webgl']);\n  } else {\n    const hints = typeof hint === 'string' ? [hint] : hint;\n\n    for (const backendHint of hints) {\n      const cache = backendsCache.get(backendHint);\n      if (cache) {\n        return cache;\n      }\n\n      const backend = await tryLoadBackend(backendHint);\n      if (backend) {\n        return backend;\n      }\n    }\n  }\n\n  throw new Error('no available backend to use');\n}\n\nasync function tryLoadBackend(backendHint: string): Promise<Backend|undefined> {\n  const backendObj = backend;\n\n  if (typeof backendObj[backendHint] !== 'undefined' && isBackend(backendObj[backendHint])) {\n    const backend = backendObj[backendHint];\n    let init = backend.initialize();\n    if (typeof init === 'object' && 'then' in init) {\n      init = await init;\n    }\n    if (init) {\n      backendsCache.set(backendHint, backend);\n      return backend;\n    }\n  }\n\n  return undefined;\n}\n\nfunction isBackend(obj: unknown) {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const o = obj as any;\n\n  // check if an object is a Backend instance\n  if (\n      'initialize' in o && typeof o.initialize === 'function' &&                      // initialize()\n      'createSessionHandler' in o && typeof o.createSessionHandler === 'function' &&  // createSessionHandler()\n      'dispose' in o && typeof o.dispose === 'function'                               // dispose()\n  ) {\n    return true;\n  }\n\n  return false;\n}\n\nexport type BackendType = Backend;\nexport type SessionHandlerType = ReturnType<BackendType['createSessionHandler']>;\nexport type InferenceHandlerType = ReturnType<SessionHandlerType['createInferenceHandler']>;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\n\nimport {Backend, SessionHandler} from '../backend';\nimport {Logger} from '../instrument';\nimport {Session} from '../session';\n\nimport {WebGLSessionHandler} from './webgl/session-handler';\nimport {WebGLContext} from './webgl/webgl-context';\nimport {createWebGLContext} from './webgl/webgl-context-factory';\n\n/**\n * WebGLBackend is the entry point for all WebGL opeartions\n * When it starts it created the WebGLRenderingContext\n * and other main framework components such as Program and Texture Managers\n */\nexport class WebGLBackend implements Backend {\n  glContext: WebGLContext;\n\n  get contextId(): 'webgl'|'webgl2'|undefined {\n    return env.webgl.contextId;\n  }\n  set contextId(value: 'webgl'|'webgl2'|undefined) {\n    env.webgl.contextId = value;\n  }\n\n  get matmulMaxBatchSize(): number|undefined {\n    return env.webgl.matmulMaxBatchSize;\n  }\n  set matmulMaxBatchSize(value: number|undefined) {\n    env.webgl.matmulMaxBatchSize = value;\n  }\n\n  get textureCacheMode(): 'initializerOnly'|'full'|undefined {\n    return env.webgl.textureCacheMode;\n  }\n  set textureCacheMode(value: 'initializerOnly'|'full'|undefined) {\n    env.webgl.textureCacheMode = value;\n  }\n\n  get pack(): boolean|undefined {\n    return env.webgl.pack;\n  }\n  set pack(value: boolean|undefined) {\n    env.webgl.pack = value;\n  }\n\n  get async(): boolean|undefined {\n    return env.webgl.async;\n  }\n  set async(value: boolean|undefined) {\n    env.webgl.async = value;\n  }\n\n  initialize(): boolean {\n    try {\n      this.glContext = createWebGLContext(this.contextId);\n      if (typeof this.matmulMaxBatchSize !== 'number') {\n        this.matmulMaxBatchSize = 16;\n      }\n      if (typeof this.textureCacheMode !== 'string') {\n        this.textureCacheMode = 'full';\n      }\n      if (typeof this.pack !== 'boolean') {\n        this.pack = false;\n      }\n      if (typeof this.async !== 'boolean') {\n        this.async = false;\n      }\n\n      Logger.setWithEnv(env);\n\n      Object.defineProperty(env.webgl, 'context', {value: this.glContext.gl});\n\n      Logger.verbose(\n          'WebGLBackend',\n          `Created WebGLContext: ${typeof this.glContext} with matmulMaxBatchSize: ${\n              this.matmulMaxBatchSize}; textureCacheMode: ${this.textureCacheMode}; pack: ${this.pack}; async: ${\n              this.async}.`);\n      return true;\n    } catch (e) {\n      Logger.warning('WebGLBackend', `Unable to initialize WebGLBackend. ${e}`);\n      return false;\n    }\n  }\n  createSessionHandler(context: Session.Context): SessionHandler {\n    return new WebGLSessionHandler(this, context);\n  }\n  dispose(): void {\n    this.glContext.dispose();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ArrayUtil, BroadcastUtil, ShapeUtil} from '../../util';\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\nimport {getGlsl} from './glsl-source';\nimport {squeezeShape} from './texture-layout-strategy';\nimport {TextureLayout} from './types';\nimport {generateShaderFuncNameFromInputSamplerName, generateShaderFuncNameFromInputSamplerNameAtOutCoords, getCoordsDataType, getGlChannels, getSqueezedParams, squeezeInputShape} from './utils';\n\n/**\n * GLSL Library responsible for data types and routines for manipulating\n * coordinates and mapping to/from tensor indices\n */\nexport class CoordsGlslLib extends GlslLib {\n  returnType: string;\n\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {\n      ...this.offsetToCoords(),\n      ...this.coordsToOffset(),\n      ...this.toVec(),\n      ...this.valueFrom(),\n      // TODO return these only when packing is enabled.\n      ...this.getCommonUtilFuncs(),\n      ...this.getInputsSamplingSnippets(),\n      ...this.getOutputSamplingSnippet()\n    };\n  }\n  getCustomTypes() {\n    return {};\n  }\n  /**\n   * Produces a function that can map from\n   * 2D normalzied coordinates (s,t) to a flat offset\n   */\n  protected offsetToCoords(): {[name: string]: GlslLibRoutine} {\n    const funcName = 'offsetToCoords';\n    return {\n      offsetToCoords: new GlslLibRoutine(`\n      vec2 ${funcName}(int offset, int width, int height) {\n        int t = offset / width;\n        int s = offset - t*width;\n        vec2 coords = (vec2(s,t) + vec2(0.5,0.5)) / vec2(width, height);\n        return coords;\n      }\n      `)\n    };\n  }\n\n  /**\n   * Produces a function that can map from\n   * 2D normalzied coordinates (s,t) to a flat offset\n   */\n  protected coordsToOffset(): {[name: string]: GlslLibRoutine} {\n    const funcName = 'coordsToOffset';\n    return {\n      coordsToOffset: new GlslLibRoutine(`\n      int ${funcName}(vec2 coords, int width, int height) {\n        float s = coords.s * float(width);\n        float t = coords.t * float(height);\n        int offset = int(t) * width + int(s);\n        return offset;\n      }\n      `)\n    };\n  }\n\n  /**\n   * Generates code for output sampler.\n   */\n\n  protected getOutputSamplingSnippet(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    if (outputLayout.isPacked) {\n      return this.getPackedOutputSamplingSnippet(outputLayout);\n    } else {\n      return this.getUnpackedOutputSamplingSnippet(outputLayout);\n    }\n  }\n\n  /**\n   * Generates code for packed output sampler.\n   */\n  protected getPackedOutputSamplingSnippet(outputLayout: TextureLayout): {[name: string]: GlslLibRoutine} {\n    const outShape = outputLayout.unpackedShape;\n    const outTexShape = [outputLayout.width, outputLayout.height];\n    const result: {[name: string]: GlslLibRoutine} = {};\n    const funcName = 'getOutputCoords';\n    switch (outShape.length) {\n      case 0:\n        result[funcName] = this.getOutputScalarCoords();\n        break;\n      case 1:\n        result[funcName] = this.getOutputPacked1DCoords(outShape as [number], outTexShape as [number, number]);\n        break;\n      case 2:\n        result[funcName] = this.getOutputPacked2DCoords(outShape as [number, number], outTexShape as [number, number]);\n        break;\n      case 3:\n        result[funcName] =\n            this.getOutputPacked3DCoords(outShape as [number, number, number], outTexShape as [number, number]);\n        break;\n      default:\n        result[funcName] = this.getOutputPackedNDCoords(outShape, outTexShape as [number, number]);\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    // TODO we need this to properly return a packed vec4 from kernels.\n    // Replace all '{glsl.output} = result' with 'setOutput(result)' in all kernels.\n    const floatTextureSetRGBASource = `\n      void setOutput(vec4 val) {\n        ${glsl.output} = val;\n      }\n    `;\n    const floatTextureSetRGBAFuncName = 'floatTextureSetRGBA';\n    result[floatTextureSetRGBAFuncName] = new GlslLibRoutine(floatTextureSetRGBASource);\n    return result;\n  }\n\n  /**\n   * Generates code for unpacked output sampler.\n   */\n  protected getUnpackedOutputSamplingSnippet(outputLayout: TextureLayout): {[name: string]: GlslLibRoutine} {\n    const outShape = outputLayout.unpackedShape;\n    const outTexShape = [outputLayout.width, outputLayout.height];\n    const result: {[name: string]: GlslLibRoutine} = {};\n    const funcName = 'getOutputCoords';\n    switch (outShape.length) {\n      case 0:\n        result[funcName] = this.getOutputScalarCoords();\n        break;\n      case 1:\n        result[funcName] = this.getOutputUnpacked1DCoords(outShape as [number], outTexShape as [number, number]);\n        break;\n      case 2:\n        result[funcName] =\n            this.getOutputUnpacked2DCoords(outShape as [number, number], outTexShape as [number, number]);\n        break;\n      case 3:\n        result[funcName] =\n            this.getOutputUnpacked3DCoords(outShape as [number, number, number], outTexShape as [number, number]);\n        break;\n      case 4:\n        result[funcName] = this.getOutputUnpacked4DCoords(\n            outShape as [number, number, number, number], outTexShape as [number, number]);\n        break;\n      case 5:\n        result[funcName] = this.getOutputUnpacked5DCoords(\n            outShape as [number, number, number, number, number], outTexShape as [number, number]);\n        break;\n      case 6:\n        result[funcName] = this.getOutputUnpacked6DCoords(\n            outShape as [number, number, number, number, number, number], outTexShape as [number, number]);\n        break;\n      default:\n        throw new Error(`Unsupported output dimensionality: ${outShape.length}`);\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    // TODO we need this to properly return a packed vec4 from kernels.\n    // Replace all '{glsl.output} = result' with 'setOutput(result)' in all kernels.\n    const floatTextureSetRSource = `\n        void setOutput(float val) {\n          ${glsl.output} = vec4(val, 0, 0, 0);\n        }\n    `;\n    const floatTextureSetRFuncName = 'floatTextureSetR';\n    result[floatTextureSetRFuncName] = new GlslLibRoutine(floatTextureSetRSource);\n    return result;\n  }\n\n  /**\n   * Scalar output coordinates.\n   */\n  protected getOutputScalarCoords(): GlslLibRoutine {\n    return new GlslLibRoutine(`\n      int getOutputCoords() {\n        return 0;\n      }\n    `);\n  }\n\n  /**\n   * 1D packed output coordinates.\n   */\n  protected getOutputPacked1DCoords(shape: [number], texShape: [number, number]): GlslLibRoutine {\n    const packedTexShape = texShape;\n    let source = '';\n    if (packedTexShape[0] === 1) {\n      source = `\n          int getOutputCoords() {\n            return 2 * int(TexCoords.y * ${packedTexShape[1]}.0);\n          }\n        `;\n      return new GlslLibRoutine(source);\n    }\n\n    if (packedTexShape[1] === 1) {\n      source = `\n          int getOutputCoords() {\n            return 2 * int(TexCoords.x * ${packedTexShape[0]}.0);\n          }\n        `;\n      return new GlslLibRoutine(source);\n    }\n\n    source = `\n        int getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                 vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n          return 2 * (resTexRC.y * ${packedTexShape[0]} + resTexRC.x);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * 2D packed output coordinates.\n   */\n  protected getOutputPacked2DCoords(shape: [number, number], texShape: [number, number]): GlslLibRoutine {\n    let source = '';\n    if (ArrayUtil.arraysEqual(shape, texShape)) {\n      source = `\n        ivec2 getOutputCoords() {\n          return 2 * ivec2(TexCoords.xy * vec2(${texShape[0]}, ${texShape[1]}));\n        }\n      `;\n      return new GlslLibRoutine(source);\n    }\n\n    const packedTexShape = texShape;\n    // texels needed to accommodate a logical row\n    const texelsInLogicalRow = Math.ceil(shape[1] / 2);\n\n    /**\n     * getOutputCoords\n     *\n     * resTexRC: The rows and columns of the texels. If you move over one\n     * texel to the right in the packed texture, you are moving over one column\n     * (not two).\n     *\n     * index: The texel index\n     */\n    source = `\n        ivec2 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n\n          int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\n\n          // reverse r and c order for packed texture\n          int r = imod(index, ${texelsInLogicalRow}) * 2;\n          int c = 2 * (index / ${texelsInLogicalRow});\n\n          return ivec2(r, c);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * 3D packed output coordinates.\n   */\n  protected getOutputPacked3DCoords(shape: [number, number, number], texShape: [number, number]): GlslLibRoutine {\n    const packedTexShape = [texShape[0], texShape[1]];\n    const texelsInLogicalRow = Math.ceil(shape[2] / 2);\n    const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[1] / 2);\n    const source = `\n        ivec3 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n          int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\n\n          int b = index / ${texelsInBatch};\n          index -= b * ${texelsInBatch};\n\n          // reverse r and c order for packed texture\n          int r = imod(index, ${texelsInLogicalRow}) * 2;\n          int c = 2 * (index / ${texelsInLogicalRow});\n\n          return ivec3(b, r, c);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * ND packed output coordinates.\n   */\n  protected getOutputPackedNDCoords(shape: readonly number[], texShape: [number, number]): GlslLibRoutine {\n    const packedTexShape = [texShape[0], texShape[1]];\n\n    const texelsInLogicalRow = Math.ceil(shape[shape.length - 1] / 2);\n    const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[shape.length - 2] / 2);\n    let texelsInBatchN = texelsInBatch;\n    let batches = '';\n    let coords = 'b, r, c';\n\n    for (let b = 2; b < shape.length - 1; b++) {\n      texelsInBatchN *= shape[shape.length - b - 1];\n      batches = `\n      int b${b} = index / ${texelsInBatchN};\n      index -= b${b} * ${texelsInBatchN};\n    ` + batches;\n      coords = `b${b}, ` + coords;\n    }\n    const source = `\n      ivec${shape.length} getOutputCoords() {\n        ivec2 resTexRC = ivec2(TexCoords.xy *\n                              vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n        int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\n\n        ${batches}\n\n        int b = index / ${texelsInBatch};\n        index -= b * ${texelsInBatch};\n\n        // reverse r and c order for packed texture\n        int r = imod(index, ${texelsInLogicalRow}) * 2;\n        int c = 2 * (index / ${texelsInLogicalRow});\n\n        return ivec${shape.length}(${coords});\n      }\n    `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 1D output coordinates.\n   */\n  protected getOutputUnpacked1DCoords(shape: [number], texShape: [number, number]): GlslLibRoutine {\n    const source = `\n        int getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          return resTexRC.y * ${texShape[0]} + resTexRC.x;\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 2D output coordinates.\n   */\n  protected getOutputUnpacked2DCoords(shape: [number, number], texShape: [number, number]): GlslLibRoutine {\n    const source = `\n        ivec2 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          int r = index / ${shape[1]};\n          int c = index - r * ${shape[1]};\n          return ivec2(r, c);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 3D output coordinates.\n   */\n  protected getOutputUnpacked3DCoords(shape: [number, number, number], texShape: [number, number]): GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n        ivec3 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          ${coordsFromIndexSnippet}\n          return ivec3(r, c, d);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 4D output coordinates.\n   */\n  protected getOutputUnpacked4DCoords(shape: [number, number, number, number], texShape: [number, number]):\n      GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd', 'd2'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n      ivec4 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          ${coordsFromIndexSnippet}\n          return ivec4(r, c, d, d2);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 5D output coordinates.\n   */\n  protected getOutputUnpacked5DCoords(shape: [number, number, number, number, number], texShape: [number, number]):\n      GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd', 'd2', 'd3'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n      ivec5 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          ${coordsFromIndexSnippet}\n          return ivec5(r, c, d, d2, d3);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 6D output coordinates.\n   */\n  protected getOutputUnpacked6DCoords(shape: [number, number, number, number, number, number], texShape: [\n    number, number\n  ]): GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd', 'd2', 'd3', 'd4'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n     ivec6 getOutputCoords() {\n         ivec2 resTexRC = ivec2(TexCoords.xy *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n         int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n         ${coordsFromIndexSnippet}\n         return ivec6(r, c, d, d2, d3, d4);\n       }\n     `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Generates code for common UV coords computation utility functions.\n   */\n  protected getCommonUtilFuncs(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    let funcName = 'uvFromFlat';\n    result[funcName] = new GlslLibRoutine(`\n    vec2 uvFromFlat(int texNumR, int texNumC, int index) {\n      int texC = index / texNumR;\n      int texR = index - texC * texNumR;\n      // TODO: swap texR, texC order in following function so row is corresponding to u and column is corresponding to\n      //       v.\n      return (vec2(texR, texC) + halfCR) / vec2(texNumR, texNumC);\n    }\n    `);\n    funcName = 'packedUVfrom1D';\n    result[funcName] = new GlslLibRoutine(`\n      vec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n        int texelIndex = index / 2;\n        int texR = texelIndex / texNumC;\n        int texC = texelIndex - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      `);\n    funcName = 'packedUVfrom2D';\n    result[funcName] = new GlslLibRoutine(`\n      vec2 packedUVfrom2D(int texNumR, int texNumC, int texelsInLogicalRow, int row, int col) {\n        int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n        int texR = texelIndex / texNumC;\n        int texC = texelIndex - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      `);\n    funcName = 'packedUVfrom3D';\n    result[funcName] = new GlslLibRoutine(`\n      vec2 packedUVfrom3D(int texNumR, int texNumC,\n          int texelsInBatch, int texelsInLogicalRow, int b,\n          int row, int col) {\n        int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n        int texR = index / texNumC;\n        int texC = index - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      `);\n    funcName = 'sampleTexture';\n    const glsl = getGlsl(this.context.glContext.version);\n    result[funcName] = new GlslLibRoutine(`\n        float sampleTexture(sampler2D textureSampler, vec2 uv) {\n            return ${glsl.texture2D}(textureSampler, uv).r;\n        }`);\n    return result;\n  }\n\n  /**\n   * Constructing snippets for inputs\n   */\n  protected getInputsSamplingSnippets(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    const outputLayout = this.context.outputTextureLayout;\n    this.context.programInfo.inputNames.forEach((samplerName, i) => {\n      const inputLayout = this.context.inputTextureLayouts[i];\n      const funcName = generateShaderFuncNameFromInputSamplerName(samplerName);\n      if (inputLayout.isPacked) {\n        result[funcName] = this.getPackedSamplerFromInput(funcName, samplerName, inputLayout);\n      } else {\n        result[funcName] = this.getUnpackedSamplerFromInput(funcName, samplerName, inputLayout);\n      }\n\n      const outCoordFuncName = generateShaderFuncNameFromInputSamplerNameAtOutCoords(samplerName);\n      if (inputLayout.unpackedShape.length <= outputLayout.unpackedShape.length) {\n        if (inputLayout.isPacked) {\n          result[outCoordFuncName] =\n              this.getPackedSamplerAtOutputCoords(outCoordFuncName, inputLayout, outputLayout, samplerName);\n        } else {\n          result[outCoordFuncName] =\n              this.getUnpackedSamplerAtOutputCoords(outCoordFuncName, inputLayout, outputLayout, samplerName);\n        }\n      }\n    });\n\n    return result;\n  }\n\n  /**\n   * Constructing snippets for output coordinates of samplers\n   */\n  protected getPackedSamplerAtOutputCoords(\n      funcName: string, inputLayout: TextureLayout, outputLayout: TextureLayout, name: string): GlslLibRoutine {\n    const inShape = inputLayout.unpackedShape;\n    const outShape = outputLayout.unpackedShape;\n    const texName = name;\n    const texFuncSnippet = generateShaderFuncNameFromInputSamplerName(texName);\n\n    const inRank = inShape.length;\n    const outRank = outShape.length;\n\n    const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\n\n    const type = getCoordsDataType(outRank);\n    const rankDiff = outRank - inRank;\n    let coordsSnippet: string;\n    const fields = getGlChannels();\n\n    if (inRank === 0) {\n      coordsSnippet = '';\n    } else if (outRank < 2 && broadcastDims.length >= 1) {\n      coordsSnippet = 'coords = 0;';\n    } else {\n      coordsSnippet = broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`).join('\\n');\n    }\n    let unpackedCoordsSnippet = '';\n    if (outRank < 2 && inRank > 0) {\n      unpackedCoordsSnippet = 'coords';\n    } else {\n      unpackedCoordsSnippet = inShape.map((s, i) => `coords.${fields[i + rankDiff]}`).join(', ');\n    }\n\n    let output = 'return outputValue;';\n    const inSize = ShapeUtil.size(inShape);\n    const isInputScalar = inSize === 1;\n    const outSize = ShapeUtil.size(outShape);\n    const isOutputScalar = outSize === 1;\n\n    if (inRank === 1 && !isInputScalar && !isOutputScalar) {\n      output = `\n        return vec4(outputValue.xy, outputValue.xy);\n      `;\n    } else if (isInputScalar && !isOutputScalar) {\n      if (outRank === 1) {\n        output = `\n          return vec4(outputValue.x, outputValue.x, 0., 0.);\n        `;\n      } else {\n        output = `\n          return vec4(outputValue.x);\n        `;\n      }\n    } else if (broadcastDims.length) {\n      const rows = inRank - 2;\n      const cols = inRank - 1;\n\n      if (broadcastDims.indexOf(rows) > -1 && broadcastDims.indexOf(cols) > -1) {\n        output = 'return vec4(outputValue.x);';\n      } else if (broadcastDims.indexOf(rows) > -1) {\n        output = 'return vec4(outputValue.x, outputValue.y, ' +\n            'outputValue.x, outputValue.y);';\n      } else if (broadcastDims.indexOf(cols) > -1) {\n        output = 'return vec4(outputValue.xx, outputValue.zz);';\n      }\n    }\n\n    const swapLastDimsSnippet = `\n        int lastDim = coords.${fields[outRank - 1]};\n        coords.${fields[outRank - 1]} = coords.${fields[outRank - 2]};\n        coords.${fields[outRank - 2]} = lastDim;\n      `;\n    const source = `\n      vec4 ${funcName}() {\n        ${type} coords = getOutputCoords();\n        ${swapLastDimsSnippet}\n        ${coordsSnippet}\n        vec4 outputValue = ${texFuncSnippet}(${unpackedCoordsSnippet});\n        ${output}\n      }\n    `;\n    return new GlslLibRoutine(source, ['coordinates.getOutputCoords']);\n  }\n\n  /**\n   * Constructing snippets for unpacked output coordinates of samplers\n   */\n  protected getUnpackedSamplerAtOutputCoords(\n      funcName: string, inputLayout: TextureLayout, outputLayout: TextureLayout, name: string): GlslLibRoutine {\n    const outTexShape = [outputLayout.width, outputLayout.height];\n    const inTexShape = [inputLayout.width, inputLayout.height];\n    const inRank = inputLayout.unpackedShape.length;\n    const outRank = outputLayout.unpackedShape.length;\n    const inShape = inputLayout.unpackedShape;\n    const outShape = outputLayout.unpackedShape;\n    const texFuncSnippet = generateShaderFuncNameFromInputSamplerName(name);\n\n    if (inRank === outRank && ArrayUtil.arraysEqual(inTexShape, outTexShape)) {\n      const source = `\n          float ${funcName}() {\n            return sampleTexture(${name}, TexCoords);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const type = getCoordsDataType(outRank);\n    const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\n    const rankDiff = outRank - inRank;\n    let coordsSnippet: string;\n    const fields = getGlChannels();\n\n    if (inRank === 0) {\n      coordsSnippet = '';\n    } else if (outRank < 2 && broadcastDims.length >= 1) {\n      coordsSnippet = 'coords = 0;';\n    } else {\n      coordsSnippet = broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`).join('\\n');\n    }\n    let unpackedCoordsSnippet = '';\n    if (outRank < 2 && inRank > 0) {\n      unpackedCoordsSnippet = 'coords';\n    } else {\n      unpackedCoordsSnippet = inputLayout.unpackedShape.map((s, i) => `coords.${fields[i + rankDiff]}`).join(', ');\n    }\n    const source = `\n        float ${funcName}() {\n          ${type} coords = getOutputCoords();\n          ${coordsSnippet}\n          return ${texFuncSnippet}(${unpackedCoordsSnippet});\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.getOutputCoords']);\n  }\n\n  /**\n   * Constructing snippets for packed operations.\n   */\n  protected getPackedSamplerFromInput(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    switch (inputLayout.unpackedShape.length) {\n      case 0:\n        return this.getPackedSamplerScalar(funcName, name);\n      case 1:\n        return this.getPackedSampler1D(funcName, name, inputLayout);\n      case 2:\n        return this.getPackedSampler2D(funcName, name, inputLayout);\n      case 3:\n        return this.getPackedSampler3D(funcName, name, inputLayout);\n      default:\n        return this.getPackedSamplerND(funcName, name, inputLayout);\n    }\n  }\n\n  /**\n   * Constructing snippets for unpacked operations.\n   */\n  protected getUnpackedSamplerFromInput(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    switch (shape.length) {\n      case 0:\n        return this.getUnpackedSamplerScalar(funcName, name, inputLayout);\n      case 1:\n        return this.getUnpackedSampler1D(funcName, name, inputLayout);\n      case 2:\n        return this.getUnpackedSampler2D(funcName, name, inputLayout);\n      case 3:\n        return this.getUnpackedSampler3D(funcName, name, inputLayout);\n      case 4:\n        return this.getUnpackedSampler4D(funcName, name, inputLayout);\n      case 5:\n        return this.getUnpackedSampler5D(funcName, name, inputLayout);\n      case 6:\n        return this.getUnpackedSampler6D(funcName, name, inputLayout);\n      default:\n        // TODO support more dimensionalities\n        throw new Error(`Unsupported dimension ${shape.length}-D`);\n    }\n  }\n\n  /**\n   * Packed scalar snippet.\n   */\n  protected getPackedSamplerScalar(funcName: string, name: string): GlslLibRoutine {\n    const glsl = getGlsl(this.context.glContext.version);\n    const source = `\n          vec4 ${funcName}() {\n            return ${glsl.texture2D}(${name}, halfCR);\n          }\n        `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Packed 1D snippet.\n   */\n  protected getPackedSampler1D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const texShape = [inputLayout.width, inputLayout.height];\n    const packedTexShape = [texShape[1], texShape[0]];\n    const glsl = getGlsl(this.context.glContext.version);\n\n    const packedSampler = `vec4 ${funcName}(int index) {\n      vec2 uv = packedUVfrom1D(\n      ${packedTexShape[0]}, ${packedTexShape[1]}, index);\n      return ${glsl.texture2D}(${name}, uv);\n    }`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom1D']);\n  }\n\n  /**\n   * Packed 2D snippet.\n   */\n  protected getPackedSampler2D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const texShape = [inputLayout.width, inputLayout.height];\n    const glsl = getGlsl(this.context.glContext.version);\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n\n    if (texShape != null && ArrayUtil.arraysEqual(shape, texShape)) {\n      const packedSampler = `vec4 ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n        return ${glsl.texture2D}(${name}, uv);\n      }`;\n\n      return new GlslLibRoutine(packedSampler);\n    }\n    const packedTexShape = texShape;\n    const valuesPerRow = Math.ceil(shape[1] / 2);\n    const packedSampler = `vec4 ${funcName}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${packedTexShape[1]}, ${packedTexShape[0]}, ${valuesPerRow}, row, col);\n      return ${glsl.texture2D}(${name}, uv);\n    }`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom2D']);\n  }\n\n  /**\n   * Packed 3D snippet.\n   */\n  protected getPackedSampler3D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const texShape = [inputLayout.width, inputLayout.height];\n    const packedTexShape = [texShape[0], texShape[1]];\n    const glsl = getGlsl(this.context.glContext.version);\n\n    if (shape[0] === 1) {\n      const squeezedShape = shape.slice(1);\n      const keptDims = [1, 2];\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\n      const params = ['b', 'row', 'col'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n      const samplerRoutine = this.getPackedSamplerFromInput(funcName, name, newInputLayout);\n      const packedSampler = `${samplerRoutine.routineBody}\n      vec4 ${funcName}(int b, int row, int col) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      } `;\n      const source = packedSampler;\n      return new GlslLibRoutine(source, samplerRoutine.dependencies);\n    }\n    const texNumR = packedTexShape[0];\n    const texNumC = packedTexShape[1];\n\n    const valuesPerRow = Math.ceil(shape[2] / 2);\n    const texelsInBatch = valuesPerRow * Math.ceil(shape[1] / 2);\n\n    const packedSampler = `vec4 ${funcName}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${texNumC}, ${texNumR}, ${texelsInBatch}, ${valuesPerRow}, b, row, col);\n      return ${glsl.texture2D}(${name}, uv);}`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom3D']);\n  }\n  /*\n   * Packed ND snippet.\n   */\n  protected getPackedSamplerND(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const rank = shape.length;\n    const texShape = [inputLayout.width, inputLayout.height];\n    const glsl = getGlsl(this.context.glContext.version);\n\n    const packedTexShape = [texShape[0], texShape[1]];\n    const texNumR = packedTexShape[1];\n    const texNumC = packedTexShape[0];\n    const valuesPerRow = Math.ceil(shape[rank - 1] / 2);\n    let texelsInBatch = valuesPerRow * Math.ceil(shape[rank - 2] / 2);\n    let params = 'int b, int row, int col';\n    let index = `b * ${texelsInBatch} + (row / 2) * ${valuesPerRow} + (col / 2)`;\n    for (let b = 2; b < rank - 1; b++) {\n      params = `int b${b}, ` + params;\n      texelsInBatch *= shape[rank - b - 1];\n      index = `b${b} * ${texelsInBatch} + ` + index;\n    }\n    const packedSampler = `vec4 ${funcName}(${params}) {\n      int index = ${index};\n      int texR = index / ${texNumC};\n      int texC = index - texR * ${texNumC};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}, ${texNumR});\n      return ${glsl.texture2D}(${name}, uv);\n    }`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked scalar snippet.\n   */\n  protected getUnpackedSamplerScalar(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const [texNumR, texNumC] = [inputLayout.width, inputLayout.height];\n    if (texNumR === 1 && texNumC === 1) {\n      const source = `\n          float ${funcName}() {\n            return sampleTexture(${name}, halfCR);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const source = `\n        float ${funcName}() {\n          int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, offset_${name});\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * Unpacked 1D snippet.\n   */\n  protected getUnpackedSampler1D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const tNumR = inputLayout.width;\n    const tNumC = inputLayout.height;\n\n    if (tNumC === 1 && tNumR === 1) {\n      const source = `\n        float ${funcName}(int index) {\n          return sampleTexture(${name}, halfCR);\n        }\n      `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    if (tNumC === 1) {\n      const source = `\n          float ${funcName}(int index) {\n            vec2 uv = vec2((float(index) + 0.5) / ${tNumR}.0, 0.5);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n    if (tNumR === 1) {\n      const source = `\n          float ${funcName}(int index) {\n            vec2 uv = vec2(0.5, (float(index) + 0.5) / ${tNumC}.0);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n    const source = `\n        float ${funcName}(int index) {\n          vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture']);\n  }\n\n  /**\n   * Unpacked 2D snippet.\n   */\n\n  protected getUnpackedSampler2D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n\n    // TODO: modify row/col order for other dimensions.\n    const texShape = [inputLayout.height, inputLayout.width];\n\n    if (texShape != null && ArrayUtil.arraysEqual(shape, texShape)) {\n      const texNumR = texShape[1];\n      const texNumC = texShape[0];\n      const source = `\n          float ${funcName}(int row, int col) {\n            vec2 uv = (vec2(row, col) + halfCR) / vec2(${texNumR}.0, ${texNumC}.0);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    const squeezedShape = newShape;\n    if (squeezedShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n\n      const params = ['col', 'row'];\n      const source = `\n          ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n          float ${funcName}(int row, int col) {\n            return ${funcName}(${getSqueezedParams(params, keptDims)});\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const texNumR = texShape[1];\n    const texNumC = texShape[0];\n    if (texNumC === 1) {\n      const source = `\n          float ${funcName}(int row, int col) {\n            int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\n            float index = dot(vec3(row, col, offset_${name}), vec3(${shape[1]}, 1, 1));\n            vec2 uv = vec2(0.5, (index + 0.5) / ${texNumR}.0);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n    }\n\n    if (texNumR === 1) {\n      const source = `\n          float ${funcName}(int row, int col) {\n            int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\n            float index = dot(vec3(row, col, offset_${name}), vec3(${shape[1]}, 1, 1));\n            vec2 uv = vec2((index + 0.5) / ${texNumC}.0, 0.5);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n    }\n\n    const source = `\n        float ${funcName}(int row, int col) {\n          int index = col * ${shape[1]} + row;\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * Unpacked 3D snippet.\n   */\n\n  protected getUnpackedSampler3D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride0 = shape[1] * shape[2];\n    const stride1 = shape[2];\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    const squeezedShape = newShape;\n    if (squeezedShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\n      const params = ['batch', 'col', 'row'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n      const routine = this.getUnpackedSamplerFromInput(funcName, name, newInputLayout);\n      // TODO: revisit the logic here to make it simpler\n      const revDims = keptDims.reverse();\n      const source = `\n          ${routine.routineBody}\n          float ${funcName}(int batch, int row, int col) {\n            return ${funcName}(${getSqueezedParams(params, revDims)});\n          }\n        `;\n      return new GlslLibRoutine(source, routine.dependencies);\n    }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n          float ${funcName}(int depth, int row, int col) {\n            // Explicitly use integer operations as dot() only works on floats.\n            int index = depth * ${stride0} + col * ${stride1} + row;\n            vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n            return sampleTexture(${name}, uv);\n          }\n      `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * Unpacked 4D snippet.\n   */\n\n  protected getUnpackedSampler4D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride2 = shape[3];\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n\n    //\n    // TODO: re-enable this shortcut once the index calculation bug is fixed.\n    //\n    // const {newShape, keptDims} = squeezeShape(shape as number[]);\n    // if (newShape.length < shape.length) {\n    //   const newInputShape = squeezeInputShape(shape, newShape);\n    //   const params = ['row', 'col', 'depth', 'depth2'];\n    //   // Deep copy of input texture layout.\n    //   const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n    //   newInputLayout.unpackedShape = newInputShape;\n    //   const source = `\n    //       ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n    //       float ${funcName}(int row, int col, int depth, int depth2) {\n    //         return ${funcName}(${getSqueezedParams(params, keptDims)});\n    //       }\n    //     `;\n    //   return new GlslLibRoutine(\n    //       source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n    // }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n        float ${funcName}(int row, int col, int depth, int depth2) {\n          int index = row * ${stride0} + col * ${stride1} +\n              depth2 * ${stride2} + depth;\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture']);\n  }\n\n  /**\n   * Unpacked 5D snippet.\n   */\n  protected getUnpackedSampler5D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride3 = shape[4];\n    const stride2 = shape[3] * stride3;\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    if (newShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, newShape);\n      const params = ['row', 'col', 'depth', 'depth2', 'depth3'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n\n      const source = `\n          ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n          float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n            return ${funcName}(${getSqueezedParams(params, keptDims)});\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\n    }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n        float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n          int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth3 * ${stride3} + depth2;\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\n  }\n\n  /**\n   * Unpacked 6D snippet.\n   */\n  protected getUnpackedSampler6D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride4 = shape[5];\n    const stride3 = shape[4] * stride4;\n    const stride2 = shape[3] * stride3;\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    if (newShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, newShape);\n      const params = ['row', 'col', 'depth', 'depth2', 'depth3', 'depth4'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n\n      const source = `\n            ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n            float ${funcName}(int row, int col, int depth,\n              int depth2, int depth3, int depth4) {\n              return ${funcName}(${getSqueezedParams(params, keptDims)});\n            }\n          `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\n    }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n          float ${funcName}(int row, int col, int depth,\n            int depth2, int depth3, int depth4) {\n            int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n            depth2 * ${stride3} + depth3 * ${stride4} + depth4;\n            vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * This is the main function to map from the given texture coordiantes (s,t)\n   * to logical indices for the output\n   * There will only be one single variation of this\n   * Also see coordsToOffset and offsetToIndices for input-specific versions\n   */\n  protected toVec(): {[name: string]: GlslLibRoutine} {\n    const output = this.context.outputTextureLayout;\n    const rank = output.shape.length;\n    const strides = output.strides;\n    const xScale = output.width;\n    const yScale = output.height;\n\n    const stridesBlock = [];\n    for (let i = 0; i < rank - 1; ++i) {\n      stridesBlock.push(`\n        c[${i}] = offset / ${strides[i]};`);\n      stridesBlock.push(`\n        offset -= c[${i}] * ${strides[i]};`);\n    }\n    stridesBlock.push(`\n        c[${rank - 1}] = offset;`);\n    const body = `\n      void toVec(vec2 texCoords, out int c[${rank}]) {\n        int offset = coordsToOffset(texCoords, ${xScale}, ${yScale});\n        ${stridesBlock.join('')}\n      }\n      void toVec(int offset, out int c[${rank}]) {\n        ${stridesBlock.join('')}\n      }\n    `;\n    return {toVec: new GlslLibRoutine(body, ['coordinates.coordsToOffset'])};\n  }\n  /**\n   * These are value getter functions generated for each input\n   * Each function is hardwired to the name and dimensions of the input\n   * An '_T' variation is also produced which accesses values as if the\n   * input was transposed\n   */\n  protected valueFrom(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const layout = this.context.inputTextureLayouts[i];\n      const shape = layout.unpackedShape.length > 0 ? layout.unpackedShape : layout.shape;\n      const rank = shape.length;\n      let funcName = `_${name}`;\n      result[funcName] = new GlslLibRoutine(\n          this.getValueFromSingle(name, rank, layout.width, layout.height, false),\n          [`shapeUtils.indicesToOffset${funcName}`, 'coordinates.offsetToCoords', 'fragcolor.getColorAsFloat']);\n      funcName = funcName + '_T';\n      result[funcName] = new GlslLibRoutine(\n          this.getValueFromSingle(name, rank, layout.width, layout.height, true),\n          [`shapeUtils.indicesToOffset${funcName}`, 'coordinates.offsetToCoords', 'fragcolor.getColorAsFloat']);\n    });\n    return result;\n  }\n  /**\n   * Produces one value getter function for the name and rank given\n   * If a transpose is set proper offsetToCoords mapping will be used\n   * @param name name of the function\n   * @param rank rank of the input\n   * @param transpose whether or not should generate a transpose variation\n   */\n  protected getValueFromSingle(varName: string, rank: number, width: number, height: number, transpose: boolean):\n      string {\n    let name = `_${varName}`;\n    if (transpose) {\n      name = name + '_T';\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    return `\n        float ${name}(int m[${rank}]) {\n          int offset = indicesToOffset${name}(m);\n          vec2 coords = offsetToCoords(offset, ${width}, ${height});\n          float value = getColorAsFloat(${glsl.texture2D}(${varName}, coords));\n          return value;\n        }\n        `;\n  }\n\n  /**\n   * Produces a packed value getter function for the name and rank given\n   * If a transpose is set proper offsetToCoords mapping will be used\n   * @param name name of the function\n   * @param rank rank of the input\n   * @param transpose whether or not should generate a transpose variation\n   */\n  protected getPackedValueFrom(varName: string, rank: number, width: number, height: number, transpose: boolean):\n      string {\n    let name = `_${varName}_Pack`;\n    if (transpose) {\n      name = name + '_T';\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    return `\n        vec4 ${name}(int m[${rank}]) {\n          int offset = indicesToOffset_${varName}(m);\n          vec2 coords = offsetToCoords(offset, ${width}, ${height});\n          return ${glsl.texture2D}(${varName}, coords);\n        }\n        `;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ProgramInfo, TextureLayout} from './types';\nimport {WebGLContext} from './webgl-context';\n\n/* eslint-disable @typescript-eslint/naming-convention */\nexport enum FunctionType {\n  ValueBased,\n  Positional\n}\nexport interface GlslFunction<T extends FunctionType> {\n  body: string;\n  name: string;\n  type: T;\n}\nexport type GlslValueFunction = GlslFunction<FunctionType.ValueBased>;\nexport interface GlslPositionalFunction extends GlslFunction<FunctionType.Positional> {\n  inputShape: readonly number[];\n  outputShape: readonly number[];\n}\n\nexport class GlslContext {\n  constructor(\n      public glContext: WebGLContext, public programInfo: ProgramInfo, public inputTextureLayouts: TextureLayout[],\n      public outputTextureLayout: TextureLayout) {}\n}\nexport abstract class GlslLib {\n  constructor(public context: GlslContext) {}\n  abstract getFunctions(): {[name: string]: GlslLibRoutine};\n  abstract getCustomTypes(): {[name: string]: string};\n}\n\n// abstraction to represent a GLSL library routine and it's dependencies\nexport class GlslLibRoutine {\n  constructor(public routineBody: string, public dependencies?: string[]) {}\n}\n\n// abstraction to represent a GLSL library routine and it's dependencies AS GRAPH Nodes\n// this level of abstraction is used to topologically sort routines before fragment shade inclusion\nexport class GlslLibRoutineNode {\n  dependencies: GlslLibRoutineNode[];\n  routineBody: string;\n  constructor(public name: string, routineBody?: string, dependencies?: GlslLibRoutineNode[]) {\n    if (dependencies) {\n      this.dependencies = dependencies;\n    } else {\n      this.dependencies = [];\n    }\n\n    if (routineBody) {\n      this.routineBody = routineBody;\n    }\n  }\n  addDependency(node: GlslLibRoutineNode) {\n    if (node) {\n      this.dependencies.push(node);\n    }\n  }\n}\n\n// topologically sort GLSL library routines (graph nodes abstraction) before shader script inclusion\nexport class TopologicalSortGlslRoutines {\n  static returnOrderedNodes(nodes: GlslLibRoutineNode[]): GlslLibRoutineNode[] {\n    if (!nodes || nodes.length === 0) {\n      return [];\n    }\n\n    if (nodes.length === 1) {\n      return nodes;\n    }\n\n    const cycleCheck = new Set<string>();\n    const alreadyTraversed = new Set<string>();\n    const result = new Array<GlslLibRoutineNode>();\n\n    this.createOrderedNodes(nodes, cycleCheck, alreadyTraversed, result);\n    return result;\n  }\n\n  private static createOrderedNodes(\n      graphNodes: GlslLibRoutineNode[], cycleCheck: Set<string>, alreadyTraversed: Set<string>,\n      result: GlslLibRoutineNode[]) {\n    for (let i = 0; i < graphNodes.length; ++i) {\n      this.dfsTraverse(graphNodes[i], cycleCheck, alreadyTraversed, result);\n    }\n  }\n\n  private static dfsTraverse(\n      root: GlslLibRoutineNode, cycleCheck: Set<string>, alreadyTraversed: Set<string>, result: GlslLibRoutineNode[]) {\n    // if this root has already been traversed return\n    if (!root || alreadyTraversed.has(root.name)) {\n      return;\n    }\n\n    // cyclic dependency has been detected\n    if (cycleCheck.has(root.name)) {\n      throw new Error('Cyclic dependency detected. Can\\'t topologically sort routines needed for shader.');\n    }\n\n    // hold this node to detect cycles if any\n    cycleCheck.add(root.name);\n\n    // traverse children in a dfs fashion\n    const dependencies = root.dependencies;\n    if (dependencies && dependencies.length > 0) {\n      for (let i = 0; i < dependencies.length; ++i) {\n        this.dfsTraverse(dependencies[i], cycleCheck, alreadyTraversed, result);\n      }\n    }\n\n    // add to result holder\n    result.push(root);\n\n    // mark this node as traversed so that we don't traverse from this again\n    alreadyTraversed.add(root.name);\n\n    // release the hold\n    cycleCheck.delete(root.name);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\n\n/**\n * This GLSL library handles routines converting\n * float32 to/from Unsigned byte or float 16\n */\nexport class EncodingGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {...this.encodeFloat32(), ...this.decodeFloat32()};\n  }\n  getCustomTypes(): {[name: string]: string} {\n    return {};\n  }\n  protected encodeFloat32(): {[name: string]: GlslLibRoutine} {\n    return {\n      encode: new GlslLibRoutine(`highp vec4 encode(highp float f) {\n        return vec4(f, 0.0, 0.0, 0.0);\n      }\n        `)\n    };\n  }\n  protected decodeFloat32(): {[name: string]: GlslLibRoutine} {\n    return {\n      decode: new GlslLibRoutine(`highp float decode(highp vec4 rgba) {\n        return rgba.r;\n      }\n        `)\n    };\n  }\n  /**\n   * returns the routine to encode encode a 32bit float to a vec4 (of unsigned bytes)\n   * @credit: https://stackoverflow.com/questions/7059962/how-do-i-convert-a-vec4-rgba-value-to-a-float\n   */\n  protected encodeUint8(): {[name: string]: GlslLibRoutine} {\n    const endianness = EncodingGlslLib.isLittleEndian() ? 'rgba.rgba=rgba.abgr;' : '';\n    return {\n      encode: new GlslLibRoutine(`\n      highp vec4 encode(highp float f) {\n        highp float F = abs(f);\n        highp float Sign = step(0.0,-f);\n        highp float Exponent = floor(log2(F));\n        highp float Mantissa = (exp2(- Exponent) * F);\n        Exponent = floor(log2(F) + 127.0) + floor(log2(Mantissa));\n        highp vec4 rgba;\n        rgba[0] = 128.0 * Sign  + floor(Exponent*exp2(-1.0));\n        rgba[1] = 128.0 * mod(Exponent,2.0) + mod(floor(Mantissa*128.0),128.0);\n        rgba[2] = floor(mod(floor(Mantissa*exp2(23.0 -8.0)),exp2(8.0)));\n        rgba[3] = floor(exp2(23.0)*mod(Mantissa,exp2(-15.0)));\n        ${endianness}\n        rgba = rgba / 255.0; // values need to be normalized to [0,1]\n        return rgba;\n    }\n        `)\n    };\n  }\n  /**\n   * returns the routine to encode a vec4 of unsigned bytes to float32\n   * @credit: https://stackoverflow.com/questions/7059962/how-do-i-convert-a-vec4-rgba-value-to-a-float\n   */\n  protected decodeUint8(): {[name: string]: GlslLibRoutine} {\n    const endianness = EncodingGlslLib.isLittleEndian() ? 'rgba.rgba=rgba.abgr;' : '';\n    return {\n      decode: new GlslLibRoutine(`\n        highp float decode(highp vec4 rgba) {\n          rgba = rgba * 255.0; // values need to be de-normalized from [0,1] to [0,255]\n          ${endianness}\n          highp float Sign = 1.0 - step(128.0,rgba[0])*2.0;\n          highp float Exponent = 2.0 * mod(rgba[0],128.0) + step(128.0,rgba[1]) - 127.0;\n          highp float Mantissa = mod(rgba[1],128.0)*65536.0 + rgba[2]*256.0 +rgba[3] + float(0x800000);\n          highp float Result =  Sign * exp2(Exponent) * (Mantissa * exp2(-23.0 ));\n          return Result;\n      }\n        `)\n    };\n  }\n  /**\n   * Determines if the machine is little endian or not\n   * @credit: https://gist.github.com/TooTallNate/4750953\n   */\n  static isLittleEndian(): boolean {\n    const b = new ArrayBuffer(4);\n    const a = new Uint32Array(b);\n    const c = new Uint8Array(b);\n    a[0] = 0xdeadbeef;\n    if (c[0] === 0xef) {\n      return true;\n    }\n    if (c[0] === 0xde) {\n      return false;\n    }\n    throw new Error('unknown endianness');\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\nimport {getGlsl} from './glsl-source';\n\n/**\n * This GLSL library handles routines around reading a texlet and writing to it\n * Reading and writing could be more than just dealing with one channel\n * It may require encoding/decoding to/from 4 channels into one\n */\nexport class FragColorGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {...this.setFragColor(), ...this.getColorAsFloat()};\n  }\n  getCustomTypes(): {[name: string]: string} {\n    return {};\n  }\n  protected setFragColor(): {[name: string]: GlslLibRoutine} {\n    const glsl = getGlsl(this.context.glContext.version);\n    return {\n      setFragColor: new GlslLibRoutine(\n          `\n        void setFragColor(float value) {\n            ${glsl.output} = encode(value);\n        }\n        `,\n          ['encoding.encode'])\n    };\n  }\n  protected getColorAsFloat(): {[name: string]: GlslLibRoutine} {\n    return {\n      getColorAsFloat: new GlslLibRoutine(\n          `\n        float getColorAsFloat(vec4 color) {\n            return decode(color);\n        }\n        `,\n          ['encoding.decode'])\n    };\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nconst INLINE_FUNC_DEF_REGEX = /@inline[\\s\\n\\r]+(\\w+)[\\s\\n\\r]+([0-9a-zA-Z_]+)\\s*\\(([^)]*)\\)\\s*{(([^}]|[\\n\\r])*)}/gm;\nconst FUNC_CALL_REGEX = '(\\\\w+)?\\\\s+([_0-9a-zA-Z]+)\\\\s+=\\\\s+__FUNC__\\\\((.*)\\\\)\\\\s*;';\n/**\n * GLSL preprocessor responsible for resolving @inline directives\n */\nexport function replaceInlines(script: string): string {\n  const inlineDefs: {[name: string]: {params: Array<{type: string; name: string}|null>; body: string}} = {};\n  let match;\n  while ((match = INLINE_FUNC_DEF_REGEX.exec(script)) !== null) {\n    const params = match[3]\n                       .split(',')\n                       .map(s => {\n                         const tokens = s.trim().split(' ');\n                         if (tokens && tokens.length === 2) {\n                           return {type: tokens[0], name: tokens[1]};\n                         }\n                         return null;\n                       })\n                       .filter(v => v !== null);\n    inlineDefs[match[2]] = {params, body: match[4]};\n  }\n  for (const name in inlineDefs) {\n    const regexString = FUNC_CALL_REGEX.replace('__FUNC__', name);\n    const regex = new RegExp(regexString, 'gm');\n    while ((match = regex.exec(script)) !== null) {\n      const type = match[1];\n      const variable = match[2];\n      const params = match[3].split(',');\n      const declLine = (type) ? `${type} ${variable};` : '';\n      let newBody: string = inlineDefs[name].body;\n      let paramRedecLine = '';\n      inlineDefs[name].params.forEach((v, i) => {\n        if (v) {\n          paramRedecLine += `${v.type} ${v.name} = ${params[i]};\\n`;\n        }\n      });\n      newBody = `${paramRedecLine}\\n ${newBody}`;\n      newBody = newBody.replace('return', `${variable} = `);\n      const replacement = `\n      ${declLine}\n      {\n        ${newBody}\n      }\n      `;\n      script = script.replace(match[0], replacement);\n    }\n  }\n  script = script.replace(INLINE_FUNC_DEF_REGEX, '');\n  return script;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutineNode, TopologicalSortGlslRoutines} from './glsl-definitions';\nimport {replaceInlines} from './glsl-function-inliner';\nimport {glslRegistry} from './glsl-registered-libs';\nimport {getDefaultFragShaderMain, getFragShaderPreamble} from './glsl-source';\nimport {ProgramInfo, TextureLayout, VariableInfo} from './types';\nimport {WebGLContext} from './webgl-context';\n\n/**\n * Preprocessor for the additions to the GLSL language\n * It deals with:\n *  @include directives\n *  @inline\n *  Loop unrolling (not implemented)\n *  Macro resolution (not implemented)\n */\nexport class GlslPreprocessor {\n  readonly context: GlslContext;\n  readonly libs: {[name: string]: GlslLib} = {};\n  readonly glslLibRoutineDependencyGraph: {[routineName: string]: GlslLibRoutineNode} = {};\n\n  constructor(\n      glContext: WebGLContext, programInfo: ProgramInfo, inputTextureLayouts: TextureLayout[],\n      outputTextureLayout: TextureLayout) {\n    this.context = new GlslContext(glContext, programInfo, inputTextureLayouts, outputTextureLayout);\n\n    // construct GlslLibs\n    Object.keys(glslRegistry).forEach((name: string) => {\n      const lib = new glslRegistry[name](this.context);\n      this.libs[name] = lib;\n    });\n\n    // construct GlslRoutineDependencyGraph\n    const map = this.glslLibRoutineDependencyGraph;\n    for (const libName in this.libs) {\n      const lib = this.libs[libName];\n      const routinesInLib = lib.getFunctions();\n      for (const routine in routinesInLib) {\n        const key = libName + '.' + routine;\n        let currentNode: GlslLibRoutineNode;\n        if (map[key]) {\n          currentNode = map[key];\n          currentNode.routineBody = routinesInLib[routine].routineBody;\n        } else {\n          currentNode = new GlslLibRoutineNode(key, routinesInLib[routine].routineBody);\n          map[key] = currentNode;\n        }\n        const dependencies = routinesInLib[routine].dependencies;\n        if (dependencies) {\n          for (let i = 0; i < dependencies.length; ++i) {\n            if (!map[dependencies[i]]) {\n              const node = new GlslLibRoutineNode(dependencies[i]);\n              map[dependencies[i]] = node;\n              currentNode.addDependency(node);\n            } else {\n              currentNode.addDependency(map[dependencies[i]]);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  preprocess(): string {\n    const programInfo = this.context.programInfo;\n    let source = programInfo.shaderSource;\n\n    // append main() function\n    if (!this.context.programInfo.hasMain) {\n      source = `${source}\n      ${getDefaultFragShaderMain(this.context.glContext.version, this.context.outputTextureLayout.shape.length)}`;\n    }\n    // replace inlines\n    source = replaceInlines(source);\n\n    // concat final source string\n    return `${getFragShaderPreamble(this.context.glContext.version)}\n    ${this.getUniforms(programInfo.inputNames, programInfo.variables)}\n    ${this.getImports(source)}\n    ${source}`;\n  }\n\n  protected getImports(script: string): string {\n    const routinesIncluded = this.selectGlslLibRoutinesToBeIncluded(script);\n\n    if (routinesIncluded.length === 0) {\n      return '';\n    }\n\n    let routines = '';\n    for (let i = 0; i < routinesIncluded.length; ++i) {\n      if (routinesIncluded[i].routineBody) {\n        routines += routinesIncluded[i].routineBody + '\\n';\n      } else {\n        throw new Error(`Missing body for the Glsl Library routine: ${routinesIncluded[i].name}`);\n      }\n    }\n\n    return routines;\n  }\n  private selectGlslLibRoutinesToBeIncluded(script: string): GlslLibRoutineNode[] {\n    const nodes: GlslLibRoutineNode[] = [];\n\n    Object.keys(this.glslLibRoutineDependencyGraph).forEach(classAndRoutine => {\n      const routine = classAndRoutine.split('.')[1];\n      if (script.indexOf(routine) !== -1) {\n        nodes.push(this.glslLibRoutineDependencyGraph[classAndRoutine]);\n      }\n    });\n\n    return TopologicalSortGlslRoutines.returnOrderedNodes(nodes);\n  }\n\n  protected getUniforms(samplers?: string[], variables?: VariableInfo[]): string {\n    const uniformLines: string[] = [];\n    if (samplers) {\n      for (const sampler of samplers) {\n        uniformLines.push(`uniform sampler2D ${sampler};`);\n      }\n    }\n    if (variables) {\n      for (const variable of variables) {\n        uniformLines.push(\n            `uniform ${variable.type} ${variable.name}${variable.arrayLength ? `[${variable.arrayLength}]` : ''};`);\n      }\n    }\n    return uniformLines.join('\\n');\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {CoordsGlslLib} from './glsl-coordinate-lib';\nimport {GlslContext, GlslLib} from './glsl-definitions';\nimport {EncodingGlslLib} from './glsl-encoding-lib';\nimport {FragColorGlslLib} from './glsl-fragcolor-lib';\nimport {ShapeUtilsGlslLib} from './glsl-shape-utils-lib';\nimport {VecGlslLib} from './glsl-vec-lib';\n\nexport const glslRegistry: {[name: string]: new (context: GlslContext) => GlslLib} = {\n  'encoding': EncodingGlslLib,\n  'fragcolor': FragColorGlslLib,\n  'vec': VecGlslLib,\n  'shapeUtils': ShapeUtilsGlslLib,\n  'coordinates': CoordsGlslLib,\n  //  'arrays': ArrayGlslSLib\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\n\n/**\n * GLSL Library responsible for data types and routines for manipulating\n * coordinates and mapping to/from tensor indices\n */\nexport class ShapeUtilsGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {\n      ...this.bcastIndex(),\n      ...this.bcastMatmulIndex(),\n      ...this.offsetToIndices(),\n      ...this.indicesToOffset(),\n      ...this.incrementIndices()\n    };\n  }\n  getCustomTypes() {\n    return {};\n  }\n  protected bcastIndex(): {[name: string]: GlslLibRoutine} {\n    const outputRank = this.context.outputTextureLayout.shape.length;\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].unpackedShape;\n      if (shape.length <= outputRank) {\n        const rank = shape.length;\n        const dimOffset = outputRank - rank;\n        const funcName = `bcastIndices_${name}`;\n        let block = '';\n        for (let i = 0; i < rank; ++i) {\n          block += `\n          realIndices[${i}] = int( mod(float(bcastedIndices[${dimOffset + i}]), ${shape[i]}.0) );\n          `;\n        }\n        const body = `\n        void ${funcName} (int bcastedIndices[${outputRank}], out int realIndices[${rank}]) {\n          ${block}\n        }\n        `;\n        result[funcName] = new GlslLibRoutine(body);\n      }\n    });\n    return result;\n  }\n  protected bcastMatmulIndex(): {[name: string]: GlslLibRoutine} {\n    const outputRank = this.context.outputTextureLayout.shape.length;\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      if (!(shape.length < 2 || shape.length > outputRank)) {\n        const rank = shape.length;\n        const dimOffset = outputRank - rank;\n        const funcName = `bcastMatmulIndices_${name}`;\n        let block = '';\n        for (let i = 0; i < rank - 2; ++i) {\n          block += `\n          realIndices[${i}] = int( mod(float(bcastedIndices[${dimOffset + i}]), ${shape[i]}.0) );\n          `;\n        }\n        const body = `\n        void ${funcName}(int bcastedIndices[${outputRank}], out int realIndices[${rank}]) {\n          ${block}\n          realIndices[${rank - 1}] = bcastedIndices[${outputRank - 1}];\n          realIndices[${rank - 2}] = bcastedIndices[${outputRank - 2}];\n        }\n        `;\n        result[funcName] = new GlslLibRoutine(body);\n      }\n    });\n    return result;\n  }\n  protected indicesToOffset(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      const strides = this.context.inputTextureLayouts[i].strides;\n      const rank = shape.length;\n      let funcName = `indicesToOffset_${name}`;\n      result[funcName] = new GlslLibRoutine(ShapeUtilsGlslLib.indexToOffsetSingle(funcName, rank, strides));\n      funcName = `indicesToOffset_${name}_T`;\n      result[funcName] =\n          new GlslLibRoutine(ShapeUtilsGlslLib.indexToOffsetSingle(funcName, rank, strides.slice().reverse()));\n    });\n    return result;\n  }\n  static indexToOffsetSingle(name: string, rank: number, strides: readonly number[]): string {\n    let block = '';\n    for (let i = rank - 1; i >= 0; --i) {\n      block += `\n        offset += indices[${i}] * ${strides[i]};\n        `;\n    }\n    return `\n      int ${name}(int indices[${rank}]) {\n        int offset = 0;\n        ${block}\n        return offset;\n      }\n      `;\n  }\n  protected offsetToIndices(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      const strides = this.context.inputTextureLayouts[i].strides;\n      const rank = shape.length;\n      let funcName = `offsetToIndices_${name}`;\n      result[funcName] = new GlslLibRoutine(ShapeUtilsGlslLib.offsetToIndicesSingle(funcName, rank, strides));\n      funcName = `offsetToIndices_${name}_T`;\n      result[funcName] =\n          new GlslLibRoutine(ShapeUtilsGlslLib.offsetToIndicesSingle(funcName, rank, strides.slice().reverse()));\n    });\n    return result;\n  }\n  static offsetToIndicesSingle(name: string, rank: number, strides: readonly number[]): string {\n    const stridesBlock = [];\n    for (let i = 0; i < rank - 1; ++i) {\n      stridesBlock.push(`\n      indices[${i}] = offset / ${strides[i]};`);\n      stridesBlock.push(`\n        offset -= indices[${i}] * ${strides[i]};`);\n    }\n    stridesBlock.push(`\n      indices[${rank - 1}] = offset;`);\n    return `\n      void ${name}(int offset, out int indices[${rank}]) {\n        ${stridesBlock.join('')}\n      }\n      `;\n  }\n  protected incrementIndices(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      const rank = shape.length;\n      const funcName = `incrementIndices_${name}`;\n      let shapeInit = '';\n      for (let i = 0; i < rank; ++i) {\n        shapeInit += `\n        shape[${i}] = ${shape[i]};`;\n      }\n      const body = `\n        void ${funcName}(int axis, out int indices[${rank}]) {\n          int shape[${rank}];\n          ${shapeInit};\n          for(int i = ${rank} -1 ; i >= 0; --i) {\n            if(i > axis) continue;\n            indices[i] += 1;\n            if(indices[i] < shape[i]) {\n              break;\n            }\n            indices[i] = 0;\n          }\n        }\n        `;\n      result[funcName] = new GlslLibRoutine(body);\n    });\n    return result;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/**\n * represent a version irrelevant abstraction of for GLSL source code\n */\nexport interface Glsl {\n  readonly version: string;\n  readonly attribute: string;\n  readonly varyingVertex: string;\n  readonly varyingFrag: string;\n  readonly texture2D: string;\n  readonly output: string;\n  readonly outputDeclaration: string;\n}\n\nconst GLSL_ES_2_0: Glsl = {\n  version: '',\n  attribute: 'attribute',\n  varyingVertex: 'varying',\n  varyingFrag: 'varying',\n  texture2D: 'texture2D',\n  output: 'gl_FragColor',\n  outputDeclaration: '',\n};\nconst GLSL_ES_3_0: Glsl = {\n  version: '#version 300 es',\n  attribute: 'in',\n  varyingVertex: 'out',\n  varyingFrag: 'in',\n  texture2D: 'texture',\n  output: 'outputColor',\n  outputDeclaration: 'out vec4 outputColor;',\n};\n\nexport function getGlsl(version: 1|2) {\n  return version === 1 ? GLSL_ES_2_0 : GLSL_ES_3_0;\n}\n\nexport function getVertexShaderSource(version: 1|2): string {\n  const glsl = getGlsl(version);\n  return `${glsl.version}\n      precision highp float;\n      ${glsl.attribute} vec3 position;\n      ${glsl.attribute} vec2 textureCoord;\n\n      ${glsl.varyingVertex} vec2 TexCoords;\n\n      void main()\n      {\n          gl_Position = vec4(position, 1.0);\n          TexCoords = textureCoord;\n      }`;\n}\n\nexport function getFragShaderPreamble(version: 1|2): string {\n  const glsl = getGlsl(version);\n  return `${glsl.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${glsl.varyingFrag} vec2 TexCoords;\n    ${glsl.outputDeclaration}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    // Custom vector types to handle higher dimenalities.\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    `;\n}\n\nexport function getDefaultFragShaderMain(version: 1|2, outputShapeLength: number): string {\n  const glsl = getGlsl(version);\n  return `\n  void main() {\n    int indices[${outputShapeLength}];\n    toVec(TexCoords, indices);\n    vec4 result = vec4(process(indices));\n    ${glsl.output} = result;\n  }\n  `;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\n\n/**\n * GLSL Library responsible for vec routines\n * Vec is an varible length int array. The length is fixed at the time of\n * generating the library functions from the dimensions of the output.\n */\nexport class VecGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getCustomTypes(): {[name: string]: string} {\n    return {};\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {...this.binaryVecFunctions(), ...this.copyVec(), ...this.setVecItem(), ...this.getVecItem()};\n  }\n  protected binaryVecFunctions(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    const nameOp: {[name: string]: string} = {add: '+=', sub: '-=', mul: '*=', div: '/='};\n    const result: {[name: string]: GlslLibRoutine} = {};\n    for (const name in nameOp) {\n      const fname = `${name}Vec`;\n      let assignmentBlock = '';\n      for (let i = 0; i < rank; ++i) {\n        assignmentBlock += `\n          dest[${i}] ${nameOp[name]} src[${i}];\n          `;\n      }\n      const body = `\n        void ${fname}(int src[${rank}], out int dest[${rank}]) {\n          ${assignmentBlock}\n        }\n        `;\n      result[fname] = new GlslLibRoutine(body);\n    }\n\n    return result;\n  }\n  protected copyVec(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    let assignmentBlock = '';\n    for (let i = 0; i < rank; ++i) {\n      assignmentBlock += `\n        dest[${i}] = src[${i}];\n        `;\n    }\n    const body = `\n      void copyVec(int src[${rank}], out int dest[${rank}]) {\n        ${assignmentBlock}\n      }\n      `;\n    return {copyVec: new GlslLibRoutine(body)};\n  }\n\n  protected setVecItem(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    let block = `\n        if(index < 0)\n            index =${rank} + index;\n        if (index == 0)\n            m[0] = value;\n        `;\n    for (let i = 1; i < rank - 1; ++i) {\n      block += `\n        else if (index == ${i})\n            m[${i}] = value;\n            `;\n    }\n    block += `\n        else\n            m[${rank - 1}] = value;\n        `;\n    const body = `\n      void setVecItem(out int m[${rank}], int index, int value) {\n        ${block}\n      }\n        `;\n    return {setVecItem: new GlslLibRoutine(body)};\n  }\n  protected getVecItem(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    let block = `\n        if(index < 0)\n            index = ${rank} + index;\n        if (index == 0)\n            return m[0];\n      `;\n    for (let i = 1; i < rank - 1; ++i) {\n      block += `\n        else if (index == ${i})\n            return m[${i}];\n      `;\n    }\n    block += `\n        else\n            return m[${rank - 1}];\n        `;\n    const body = `\n      int getVecItem(int m[${rank}], int index) {\n        ${block}\n      }\n    `;\n    return {getVecItem: new GlslLibRoutine(body)};\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceHandler} from '../../backend';\nimport {Logger} from '../../instrument';\nimport {Tensor} from '../../tensor';\nimport {ShapeUtil} from '../../util';\n\nimport {createPackProgramInfoLoader} from './ops/pack';\nimport {createPackedReshape3DProgramInfoLoader, isReshapeCheap, processDims3D} from './ops/reshape-packed';\nimport {encodeAsUint8} from './ops/uint8-encode';\nimport {createUnpackProgramInfoLoader} from './ops/unpack';\nimport {WebGLSessionHandler} from './session-handler';\nimport {Encoder} from './texture-data-encoder';\nimport {calculateTextureWidthAndHeight, createTextureLayoutFromShape, createTextureLayoutFromTextureType} from './texture-layout';\nimport {Artifact, ProgramInfo, ProgramInfoLoader, TextureData, TextureLayout, TextureType} from './types';\n\nconst getProgramInfoUniqueKey =\n    (programInfo: ProgramInfo|ProgramInfoLoader, inputTextureDatas: TextureData[]): string => {\n      const inputs =\n          inputTextureDatas.map(texture => `${texture.unpackedShape.join(',')};${texture.width}x${texture.height}`)\n              .join('_');\n      let key = programInfo.name;\n      if (programInfo.cacheHint) {\n        key += '[' + programInfo.cacheHint + ']';\n      }\n      key += ':' + inputs;\n      return key;\n    };\n\nexport class WebGLInferenceHandler implements InferenceHandler {\n  private packedTextureDataCache: Map<Tensor.Id, TextureData>;\n  private unpackedTextureDataCache: Map<Tensor.Id, TextureData>;\n  constructor(public session: WebGLSessionHandler) {\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache = new Map();\n  }\n\n  /**\n   * @returns [width, height]\n   */\n  calculateTextureWidthAndHeight(shape: readonly number[], textureType: TextureType): [number, number] {\n    return calculateTextureWidthAndHeight(this.session.layoutStrategy, shape, textureType);\n  }\n\n  executeProgram(program: ProgramInfo|ProgramInfoLoader, inputs: readonly Tensor[]): TextureData {\n    if (inputs.length < program.inputNames.length) {\n      throw new Error(`Input size mustn't be less than ${program.inputNames.length}.`);\n    }\n    if (program.inputNames.length !== program.inputTypes.length) {\n      throw new Error('input names size does not match input types');\n    }\n\n    // create texture info for input\n    const inputTextureDatas: TextureData[] = [];\n    for (let i = 0; i < program.inputNames.length; ++i) {\n      inputTextureDatas[i] = this.getOrCreateTextureData(inputs[i], program.inputTypes[i]);\n    }\n\n    const key = getProgramInfoUniqueKey(program, inputTextureDatas);\n    let artifact = this.session.programManager.getArtifact(key);\n    const programInfo = artifact ?\n        artifact.programInfo :\n        (typeof (program as ProgramInfoLoader).get === 'function' ? (program as ProgramInfoLoader).get() :\n                                                                    (program as ProgramInfo));\n\n    // create texture info for output\n    const outputTextureLayout = createTextureLayoutFromTextureType(\n        this.session.layoutStrategy, programInfo.output.dims, programInfo.output.textureType);\n    const outputTextureData = this.createTextureData(outputTextureLayout, programInfo.output.type);\n\n    if (!artifact) {\n      artifact = this.session.programManager.build(programInfo, inputTextureDatas, outputTextureData);\n      this.session.programManager.setArtifact(key, artifact);\n    }\n\n    this.runProgram(artifact, inputTextureDatas, outputTextureData);\n    return outputTextureData;\n  }\n\n  run(program: ProgramInfoLoader, inputs: readonly Tensor[]): Tensor {\n    const outputTextureData = this.executeProgram(program, inputs);\n    return outputTextureData.tensor;\n  }\n\n  private runProgram(artifact: Artifact, inputs: TextureData[], output: TextureData): void {\n    // input should match\n    for (let i = 0; i < inputs.length; ++i) {\n      if (!!inputs[i].isPacked !== (artifact.programInfo.inputTypes[i] === TextureType.packed)) {\n        throw new Error(`input[${i}] property packed inconsistent`);\n      }\n    }\n\n    // output should match\n    if (!!output.isPacked !== (artifact.programInfo.output.textureType === TextureType.packed)) {\n      throw new Error('output property packed inconsistent');\n    }\n\n    this.session.programManager.run(artifact, inputs, output);\n  }\n\n  /**\n   * Create a TextureData object from a tensor.\n   * Usage = Encoder.Usage.UploadOnly.\n   * If a related texture data is found in cache, returns it;\n   * Otherwise:\n   *   Creates a new texture layout if not provided;\n   *   Creates WebGLTexture with the layout;\n   *   Upload tensor data to the texture;\n   *   Creates a texture data object associated with the given tensor.\n   * @param tensor the tensor with data to upload\n   */\n  private getOrCreateTextureData(tensor: Tensor, textureType: TextureType) {\n    let td = this.getTextureData(tensor.dataId, textureType === TextureType.packed);\n\n    if (!td) {\n      // check if we have texture data in different type\n      td = this.getTextureData(tensor.dataId, textureType !== TextureType.packed);\n      if (td) {\n        if (textureType === TextureType.packed) {\n          return this.pack(td);\n        } else {\n          return this.unpack(td);\n        }\n      }\n    }\n\n    if (!td) {\n      const layout = createTextureLayoutFromTextureType(this.session.layoutStrategy, tensor.dims, textureType);\n\n      if (textureType === TextureType.packedLastDimension) {\n        const group = 1;\n        const channels = 4;\n        const shape = tensor.dims;\n        if (shape.length === 4) {\n          // pre-processing for kernel data of Conv.\n          //\n          // TODO: currently this is a hacking to overwrite Conv's weight. The correct way to do this should be:\n          // 1. implement texture based const-folding\n          // 2. create a WebGL program \"preprocessConvWeight\" to do the same work as below\n          // 3. run the program before dotProduct.\n          //\n          const adjustedKernelShape = [shape[0], Math.ceil((shape[1] * shape[2] * shape[3]) / channels)];\n          const adjustedLayout =\n              createTextureLayoutFromTextureType(this.session.layoutStrategy, adjustedKernelShape, textureType);\n          let buffer = tensor.numberData;\n          if (shape[1] * shape[2] * shape[3] % channels !== 0) {\n            const numFeatureMaps = shape[0];\n            const oldRowSize = shape[1] * shape[2] * shape[3];\n            const newRowSize = Math.ceil(oldRowSize * group / channels) * channels;\n            const newSize = numFeatureMaps * newRowSize;\n            buffer = new Float32Array(newSize);\n            for (let f = 0; f < numFeatureMaps; ++f) {\n              const oldOffset = f * oldRowSize;\n              const newOffset = f * newRowSize + f % group * oldRowSize;\n              buffer.set(tensor.numberData.subarray(oldOffset, oldOffset + oldRowSize), newOffset);\n            }\n          }\n          return this.createTextureData(adjustedLayout, tensor.type, buffer, tensor, Encoder.Usage.UploadOnly);\n        }\n      }\n\n      if (textureType === TextureType.packed) {\n        const unpackedTextureLayout =\n            createTextureLayoutFromShape(this.session.layoutStrategy, tensor.dims, 1, [], {reverseWH: true});\n        const unpackedTextureData = this.createTextureData(\n            unpackedTextureLayout, tensor.type, tensor.numberData, tensor, Encoder.Usage.UploadOnly);\n        td = this.pack(unpackedTextureData);\n      } else {\n        td = this.createTextureData(layout, tensor.type, tensor.numberData, tensor, Encoder.Usage.UploadOnly);\n      }\n    }\n    return td;\n  }\n\n  /**\n   * Create a TextureData object using the given data and bind to the given tensor.\n   * Usage = Encoder.Usage.UploadOnly.\n   * NOTE: this function is a hack for Conv implementation. should remove this function, after rewriting Conv\n   * implementation by Graph.Transformer\n   * @param dataType the tensor data type\n   * @param data the actual data to upload\n   * @param tensor the tensor to bind. tensor's data is ignored.\n   */\n  createTextureDataFromLayoutBindTensor(\n      layout: TextureLayout, dataType: Tensor.DataType, data: Tensor.NumberType, tensor: Tensor): TextureData {\n    return this.createTextureData(layout, dataType, data, tensor, Encoder.Usage.UploadOnly);\n  }\n\n  private createTextureData(\n      layout: TextureLayout, dataType: Tensor.DataType, data?: Tensor.NumberType, tensor?: Tensor,\n      usage?: Encoder.Usage): TextureData {\n    Logger.verbose('InferenceHandler', `Creating TextureData: layout:[${JSON.stringify(layout)}]`);\n    const texture = this.session.textureManager.createTextureFromLayout(dataType, layout, data, usage);\n    return this.createTextureDataFromTexture(layout, dataType, texture, tensor);\n  }\n\n  reshapeUnpacked(input: Tensor, reshapedDims: readonly number[]): Tensor {\n    const inputTD = this.getOrCreateTextureData(input, TextureType.unpacked);\n    const newTextureLayout: TextureLayout = {\n      channels: inputTD.channels,\n      height: inputTD.height,\n      width: inputTD.width,\n      // handle reshaping into scalar Tensors\n      shape: reshapedDims.length !== 0 ? reshapedDims : [1],\n      strides: ShapeUtil.computeStrides(reshapedDims),\n      unpackedShape: reshapedDims,\n    };\n    const newTextureData = this.createTextureDataFromTexture(newTextureLayout, input.type, inputTD.texture);\n    return newTextureData.tensor;\n  }\n\n  reshapePacked(input: Tensor, reshapedDims: readonly number[]): Tensor {\n    const inputTD = this.getOrCreateTextureData(input, TextureType.packed);\n\n    // check if the reshape is 'cheap'\n    if (isReshapeCheap(input.dims, reshapedDims)) {\n      const newTextureLayout: TextureLayout = {\n        channels: inputTD.channels,\n        height: inputTD.height,\n        width: inputTD.width,\n        // handle reshaping into scalar Tensors\n        shape: reshapedDims.length !== 0 ? reshapedDims : [1],\n        strides: ShapeUtil.computeStrides(reshapedDims),\n        unpackedShape: reshapedDims,\n        isPacked: true\n      };\n      const newTextureData = this.createTextureDataFromTexture(newTextureLayout, input.type, inputTD.texture);\n      return newTextureData.tensor;\n    }\n\n    const squeezedInputShape = processDims3D(input.dims);\n    const squeezedOutputShape = processDims3D(reshapedDims);\n\n    const squeezedInputTensor = this.reshapePacked(input, squeezedInputShape);\n    const squeezedOutputTensor = this.run(\n        createPackedReshape3DProgramInfoLoader(this, squeezedInputTensor, squeezedOutputShape), [squeezedInputTensor]);\n    const outputTensor = this.reshapePacked(squeezedOutputTensor, reshapedDims);\n    return outputTensor;\n  }\n\n  cast(input: Tensor, type: Tensor.DataType): Tensor {\n    const inputTD = this.getOrCreateTextureData(input, TextureType.unpacked);\n    const newTextureData = this.createTextureDataFromTexture(inputTD as TextureLayout, type, inputTD.texture);\n    return newTextureData.tensor;\n  }\n\n  private createTextureDataFromTexture(\n      layout: TextureLayout, dataType: Tensor.DataType, texture: WebGLTexture, tensor?: Tensor, tensorId?: Tensor.Id) {\n    const textureData: TextureData = {\n      ...layout,\n      tensor: tensor ||\n          new Tensor(\n                  layout.unpackedShape, dataType, (_id: Tensor.Id) => this.readTexture(textureData),\n                  async (_id: Tensor.Id) => this.readTextureAsync(textureData), undefined, tensorId),\n      texture\n    };\n    this.setTextureData(textureData.tensor.dataId, textureData, layout.isPacked);\n    return textureData;\n  }\n\n  private getTextureData(tensorId: Tensor.Id, isPacked = false): TextureData|undefined {\n    return this.session.isInitializer(tensorId) ? this.session.getTextureData(tensorId, isPacked) :\n        isPacked                                ? this.packedTextureDataCache.get(tensorId) :\n                                                  this.unpackedTextureDataCache.get(tensorId);\n  }\n  setTextureData(tensorId: Tensor.Id, td: TextureData, isPacked = false): void {\n    if (this.session.isInitializer(tensorId)) {\n      this.session.setTextureData(tensorId, td, isPacked);\n    } else {\n      (isPacked ? this.packedTextureDataCache : this.unpackedTextureDataCache).set(tensorId, td);\n    }\n  }\n  isTextureLayoutCached(tensor: Tensor, isPacked = false): boolean {\n    return !!this.getTextureData(tensor.dataId, isPacked);\n  }\n\n  dispose(): void {\n    this.session.textureManager.clearActiveTextures();\n    this.packedTextureDataCache.forEach(td => this.session.textureManager.releaseTexture(td));\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache.forEach(td => this.session.textureManager.releaseTexture(td));\n    this.unpackedTextureDataCache = new Map();\n  }\n\n  readTexture(textureData: TextureData): Tensor.NumberType {\n    if (textureData.isPacked) {\n      return this.readTexture(this.unpack(textureData));\n    }\n    if (!this.session.backend.glContext.isFloat32DownloadSupported) {\n      return this.session.textureManager.readUint8TextureAsFloat(encodeAsUint8(this, textureData));\n    }\n    return this.session.textureManager.readTexture(textureData, textureData.tensor.type, textureData.channels);\n  }\n\n  async readTextureAsync(textureData: TextureData): Promise<Tensor.NumberType> {\n    if (textureData.isPacked) {\n      return this.readTextureAsync(this.unpack(textureData));\n    }\n    if (!this.session.backend.glContext.isFloat32DownloadSupported) {\n      return this.session.textureManager.readUint8TextureAsFloat(encodeAsUint8(this, textureData));\n    }\n    return this.session.textureManager.readTextureAsync(textureData, textureData.tensor.type, textureData.channels);\n  }\n\n  pack(input: TextureData): TextureData {\n    const outputTextureData = this.executeProgram(createPackProgramInfoLoader(this, input.tensor), [input.tensor]);\n    return outputTextureData;\n  }\n\n  unpack(input: TextureData): TextureData {\n    const outputTextureData = this.executeProgram(createUnpackProgramInfoLoader(this, input.tensor), [input.tensor]);\n    return outputTextureData;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {OpSet} from '../../opset';\n\nimport {batchNormalization, parseBatchNormalizationAttributes} from './ops/batch-normalization';\nimport * as binaryOps from './ops/binary-op';\nimport {cast, parseCastAttributes} from './ops/cast';\nimport {concat, parseConcatAttributes} from './ops/concat';\nimport {conv, parseConvAttributes} from './ops/conv';\nimport {convTranspose, parseConvTransposeAttributes} from './ops/conv-transpose';\nimport {depthToSpace, parseDepthToSpaceAttributes} from './ops/depth-to-space';\nimport {flatten, parseFlattenAttributes} from './ops/flatten';\nimport {gather, parseGatherAttributes} from './ops/gather';\nimport {gemm, parseGemmAttributesV11, parseGemmAttributesV7} from './ops/gemm';\nimport {imageScaler, parseImageScalerAttributes} from './ops/image-scaler';\nimport {instanceNormalization, parseInstanceNormalizationAttributes} from './ops/instance-normalization';\nimport {lrn, parseLrnAttributes} from './ops/lrn';\nimport {matMul, parseMatMulAttributes} from './ops/matmul';\nimport {padV11, padV2, parsePadAttributesV11, parsePadAttributesV2} from './ops/pad';\nimport {averagePool, globalAveragePool, globalMaxPool, maxPool, parseAveragePoolAttributes, parseGlobalAveragePoolAttributes, parseMaxPoolAttributes} from './ops/pool';\nimport {parseReduceAttributes, reduceLogSum, reduceLogSumSquare, reduceMax, reduceMean, reduceMin, reduceProd, reduceSum} from './ops/reduce';\nimport {reshape} from './ops/reshape';\nimport {parseResizeAttributesV10, parseResizeAttributesV11, resize} from './ops/resize-packed';\nimport {shape} from './ops/shape';\nimport {parseSliceAttributes, slice, sliceV10} from './ops/slice';\nimport {parseSoftmaxAttributes, parseSoftmaxAttributesV13, softmax, softmaxV13} from './ops/softmax';\nimport {parseSplitAttributes, split} from './ops/split';\nimport {parseSqueezeAttributes, squeeze, squeezeV13} from './ops/squeeze';\nimport {sum} from './ops/sum';\nimport {tile} from './ops/tile';\nimport {parseTransposeAttributes, transpose} from './ops/transpose';\nimport * as unaryOps from './ops/unary-op';\nimport {parseUnsqueezeAttributes, unsqueeze, unsqueezeV13} from './ops/unsqueeze';\nimport {parseUpsampleAttributesV7, parseUpsampleAttributesV9, upsample} from './ops/upsample';\n\nexport const WEBGL_OP_RESOLVE_RULES: readonly OpSet.ResolveRule[] = [\n  ['Abs', '', '6+', unaryOps.abs],\n  ['Acos', '', '7+', unaryOps.acos],\n  ['Add', '', '7+', binaryOps.add],\n  ['And', '', '7+', binaryOps.and],\n  ['Asin', '', '7+', unaryOps.asin],\n  ['Atan', '', '7+', unaryOps.atan],\n  // TODO: support new attributes for AveragePool-10\n  ['AveragePool', '', '7+', averagePool, parseAveragePoolAttributes],\n  ['BatchNormalization', '', '7+', batchNormalization, parseBatchNormalizationAttributes],\n  ['Cast', '', '6+', cast, parseCastAttributes],\n  ['Ceil', '', '6+', unaryOps.ceil],\n  ['Clip', '', '6-10', unaryOps.clip, unaryOps.parseClipAttributes],\n  ['Clip', '', '11+', unaryOps.clipV11],\n  ['Concat', '', '4+', concat, parseConcatAttributes],\n  ['Conv', '', '1+', conv, parseConvAttributes],\n  ['ConvTranspose', '', '1+', convTranspose, parseConvTransposeAttributes],\n  ['Cos', '', '7+', unaryOps.cos],\n  ['Div', '', '7+', binaryOps.div],\n  ['Dropout', '', '7+', unaryOps.identity],\n  ['DepthToSpace', '', '1+', depthToSpace, parseDepthToSpaceAttributes],\n  ['Equal', '', '7+', binaryOps.equal],\n  ['Elu', '', '6+', unaryOps.elu, unaryOps.parseEluAttributes],\n  ['Exp', '', '6+', unaryOps.exp],\n  ['Flatten', '', '1+', flatten, parseFlattenAttributes],\n  ['Floor', '', '6+', unaryOps.floor],\n  ['FusedConv', 'com.microsoft', '1+', conv, parseConvAttributes],\n  ['Gather', '', '1+', gather, parseGatherAttributes],\n  ['Gemm', '', '7-10', gemm, parseGemmAttributesV7],\n  ['Gemm', '', '11+', gemm, parseGemmAttributesV11],\n  ['GlobalAveragePool', '', '1+', globalAveragePool, parseGlobalAveragePoolAttributes],\n  ['GlobalMaxPool', '', '1+', globalMaxPool],\n  ['Greater', '', '7+', binaryOps.greater],\n  ['Identity', '', '1+', unaryOps.identity],\n  ['ImageScaler', '', '1+', imageScaler, parseImageScalerAttributes],\n  ['InstanceNormalization', '', '6+', instanceNormalization, parseInstanceNormalizationAttributes],\n  ['LeakyRelu', '', '6+', unaryOps.leakyRelu, unaryOps.parseLeakyReluAttributes],\n  ['Less', '', '7+', binaryOps.less],\n  ['LRN', '', '1+', lrn, parseLrnAttributes],\n  ['Log', '', '6+', unaryOps.log],\n  ['MatMul', '', '1+', matMul, parseMatMulAttributes],\n  // TODO: support new attributes for MaxPool-8 and MaxPool-10\n  ['MaxPool', '', '1+', maxPool, parseMaxPoolAttributes],\n  ['Mul', '', '7+', binaryOps.mul],\n  ['Neg', '', '6+', unaryOps.neg],\n  ['Not', '', '1+', unaryOps.not],\n  ['Or', '', '7+', binaryOps.or],\n  ['Pad', '', '2-10', padV2, parsePadAttributesV2],\n  ['Pad', '', '11+', padV11, parsePadAttributesV11],\n  ['Pow', '', '7+', binaryOps.pow],\n  ['PRelu', '', '7+', binaryOps.pRelu],\n  ['ReduceLogSum', '', '1+', reduceLogSum, parseReduceAttributes],\n  ['ReduceMax', '', '1+', reduceMax, parseReduceAttributes],\n  ['ReduceMean', '', '1+', reduceMean, parseReduceAttributes],\n  ['ReduceMin', '', '1+', reduceMin, parseReduceAttributes],\n  ['ReduceProd', '', '1+', reduceProd, parseReduceAttributes],\n  ['ReduceSum', '', '1-12', reduceSum, parseReduceAttributes],\n  ['ReduceSumSquare', '', '1+', reduceLogSumSquare, parseReduceAttributes],\n  ['Relu', '', '6+', unaryOps.relu],\n  ['Reshape', '', '5+', reshape],\n  ['Resize', '', '10', resize, parseResizeAttributesV10],\n  ['Resize', '', '11+', resize, parseResizeAttributesV11],\n  ['Shape', '', '1+', shape],\n  ['Sigmoid', '', '6+', unaryOps.sigmoid],\n  ['Sin', '', '7+', unaryOps.sin],\n  ['Slice', '', '10+', sliceV10],  // TODO: support 'steps' for Slice-10\n  ['Slice', '', '1-9', slice, parseSliceAttributes],\n  // The \"semantic\" meaning of axis has changed in opset-13.\n  ['Softmax', '', '1-12', softmax, parseSoftmaxAttributes],\n  ['Softmax', '', '13+', softmaxV13, parseSoftmaxAttributesV13],\n  // 'Split' operator has an optional attribute 'split'\n  // this attribute determines how the specified axis of input data is split.\n  // When the attribute is missing, we need the count of number of outputs\n  // so that we can determine the 'split' attribute from the runtime input to the Operator\n  ['Split', '', '2-12', split, parseSplitAttributes],\n  ['Sqrt', '', '6+', unaryOps.sqrt],\n  ['Squeeze', '', '1-12', squeeze, parseSqueezeAttributes],\n  ['Squeeze', '', '13+', squeezeV13],\n  ['Sub', '', '7+', binaryOps.sub],\n  ['Sum', '', '6+', sum],\n  ['Tan', '', '7+', unaryOps.tan],\n  ['Tanh', '', '6+', unaryOps.tanh],\n  ['Tile', '', '6+', tile],\n  ['Transpose', '', '1+', transpose, parseTransposeAttributes],\n  ['Upsample', '', '7-8', upsample, parseUpsampleAttributesV7],\n  ['Upsample', '', '9', upsample, parseUpsampleAttributesV9],\n  ['Unsqueeze', '', '1-12', unsqueeze, parseUnsqueezeAttributes],\n  ['Unsqueeze', '', '13+', unsqueezeV13],\n  ['Xor', '', '7+', binaryOps.xor],\n];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface BatchNormalizationAttributes extends AttributeWithCacheKey {\n  epsilon: number;\n  momentum: number;\n  spatial: number;\n}\n\nconst batchNormalizationProgramMetadata = {\n  name: 'BatchNormalization',\n  inputNames: ['A', 'Scale', 'B', 'Mean', 'Variance'],\n  inputTypes:\n      [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked, TextureType.unpacked, TextureType.unpacked]\n};\n\nexport const batchNormalization: OperatorImplementation<BatchNormalizationAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: BatchNormalizationAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...batchNormalizationProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createBatchNormalizationProgramInfo(inferenceHandler, inputs, attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseBatchNormalizationAttributes: OperatorInitialization<BatchNormalizationAttributes> =\n    (node: Graph.Node): BatchNormalizationAttributes => {\n      const epsilon = node.attributes.getFloat('epsilon', 1e-5);\n      const momentum = node.attributes.getFloat('momentum', 0.9);\n      const spatial = node.attributes.getInt('spatial', 1);\n      return createAttributeWithCacheKey({epsilon, momentum, spatial});\n    };\n\nconst createBatchNormalizationProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: BatchNormalizationAttributes):\n        ProgramInfo => {\n          const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n          const rank = inputs[0].dims.length;\n          const [scaleWidth, scaleHeight] =\n              inferenceHandler.calculateTextureWidthAndHeight(inputs[1].dims, TextureType.unpacked);\n          const shaderSource = `\n  float process(int[${rank}] indices) {\n    vec2 position = offsetToCoords(indices[1], ${scaleWidth}, ${scaleHeight});\n    float scale = getColorAsFloat(${glsl.texture2D}(Scale, position));\n    float mean = getColorAsFloat(${glsl.texture2D}(Mean, position));\n    float variance = getColorAsFloat(${glsl.texture2D}(Variance, position));\n    float b = getColorAsFloat(${glsl.texture2D}(B, position));\n\n    return scale * ( (_A(indices) - mean) / sqrt(variance + float(${attributes.epsilon})) ) + b;\n  }`;\n          return {\n            ...batchNormalizationProgramMetadata,\n            output: {dims: inputs[0].dims, type: inputs[0].type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 5) {\n    throw new Error('BatchNormalization requires 5 inputs.');\n  }\n\n  const X = inputs[0];\n  const scale = inputs[1];\n  const B = inputs[2];\n  const mean = inputs[3];\n  const var_ = inputs[4];\n\n  // input should atleast have three dimensions - N,C,dim1,...,dimn\n  // other inputs can have only one dimensions\n  if (X.dims.length < 3 || scale.dims.length !== 1 || B.dims.length !== 1 || mean.dims.length !== 1 ||\n      var_.dims.length !== 1) {\n    throw new Error('invalid input shape.');\n  }\n  if (scale.dims[0] !== X.dims[1] || B.dims[0] !== X.dims[1] || mean.dims[0] !== X.dims[1] ||\n      var_.dims[0] !== X.dims[1]) {\n    throw new Error('invalid input shape.');\n  }\n  if ((X.type !== 'float32' && X.type !== 'float64') || (scale.type !== 'float32' && scale.type !== 'float64') ||\n      (B.type !== 'float32' && B.type !== 'float64') || (mean.type !== 'float32' && mean.type !== 'float64') ||\n      (var_.type !== 'float32' && var_.type !== 'float64')) {\n    throw new Error('invalid input tensor types.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\nimport {FunctionType, GlslValueFunction} from '../glsl-definitions';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\n\nexport function glslAdd(): GlslValueFunction {\n  const name = 'add_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a + b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 + v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslDiv(): GlslValueFunction {\n  const name = 'div_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a / b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 / v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslMul(): GlslValueFunction {\n  const name = 'mul_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a * b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 * v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSub(): GlslValueFunction {\n  const name = 'sub_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a - b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 - v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslEqual(): GlslValueFunction {\n  const name = 'equal_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a == b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4(equal(v1, v2));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslGreater(): GlslValueFunction {\n  const name = 'greater_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a > b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4( v1.r > v2.r ,\n      v1.g > v2.g,\n      v1.b > v2.b,\n      v1.a > v2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslLess(): GlslValueFunction {\n  const name = 'less_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a < b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4( v1.r < v2.r ,\n                v1.g < v2.g,\n                v1.b < v2.b,\n                v1.a < v2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslAnd(): GlslValueFunction {\n  const name = 'and_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) && bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r && b2.r ,\n                b1.g && b2.g,\n                b1.b && b2.b,\n                b1.a && b2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslOr(): GlslValueFunction {\n  const name = 'or_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) || bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r || b2.r ,\n                b1.g || b2.g,\n                b1.b || b2.b,\n                b1.a || b2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslXor(): GlslValueFunction {\n  const name = 'xor_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) ^^ bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r ^^ b2.r ,\n                b1.g ^^ b2.g,\n                b1.b ^^ b2.b,\n                b1.a ^^ b2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslPow(): GlslValueFunction {\n  return glslBuiltinBinary('pow');\n}\nexport function glslPRelu(): GlslValueFunction {\n  const name = 'prelu_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a < 0.0 ? a * b: a;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4(\n      v1.r < 0.0 ? v1.r * v2.r: v1.r,\n      v1.g < 0.0 ? v1.g * v2.g: v1.g,\n      v1.b < 0.0 ? v1.b * v2.b: v1.b,\n      v1.a < 0.0 ? v1.a * v2.a: v1.a\n      );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\n\nfunction glslBuiltinBinary(fname: string): GlslValueFunction {\n  const name = `${fname}_`;\n  const body = `\n  float ${name}(float a, float b) {\n    return ${fname}(a, b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return ${fname}(v1, v2);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\n\nconst createBinaryProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], glslFunc: GlslValueFunction,\n     outputTensorType: Tensor.DataType = inputs[0].type, cacheKey?: string): ProgramInfoLoader => {\n      const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n      return {\n        name: glslFunc.name,\n        inputNames: ['A', 'B'],\n        inputTypes: [textureType, textureType],\n        cacheHint: cacheKey,\n        get: () => createBinaryProgramInfo(handler, inputs, glslFunc, outputTensorType)\n      };\n    };\n\nconst createBinaryProgramInfo =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], glslFunc: GlslValueFunction,\n     outputTensorType: Tensor.DataType = inputs[0].type): ProgramInfo => {\n      const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n      const isBroadcast = !ShapeUtil.areEqual(inputs[0].dims, inputs[1].dims);\n      let outputShape = inputs[0].dims;\n\n      const usePackedTexture = handler.session.pack;\n\n      if (isBroadcast) {\n        const calculatedShape = BroadcastUtil.calcShape(inputs[0].dims, inputs[1].dims, false);\n        if (!calculatedShape) {\n          throw new Error('Can\\'t perform binary op on the given tensors');\n        }\n        outputShape = calculatedShape;\n        const outputRank = outputShape.length;\n        const aRank = inputs[0].dims.length !== 0 ? inputs[0].dims.length : 1;\n        const bRank = inputs[1].dims.length !== 0 ? inputs[1].dims.length : 1;\n        const aBcast = inputs[0].dims.length !== 0 ? 'bcastIndices_A(indices, aindices);' : 'aindices[0] = 0;';\n        const bBcast = inputs[1].dims.length !== 0 ? 'bcastIndices_B(indices, bindices);' : 'bindices[0] = 0;';\n\n        const glsl = getGlsl(handler.session.backend.glContext.version);\n        const shaderSource = usePackedTexture ? `\n      ${glslFunc.body}\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n        vec4 result = ${glslFunc.name}(a, b);\n        ${glsl.output} = result;\n      }` :\n                                                `\n      ${glslFunc.body}\n      float process(int indices[${outputRank}]) {\n        int aindices[${aRank}];\n        int bindices[${bRank}];\n        ${aBcast}\n        ${bBcast}\n        return ${glslFunc.name}(_A(aindices), _B(bindices));\n      }`;\n\n        return {\n          name: glslFunc.name,\n          inputNames: ['A', 'B'],\n          inputTypes: [textureType, textureType],\n          output: {dims: outputShape, type: outputTensorType, textureType},\n          shaderSource,\n          hasMain: usePackedTexture\n        };\n      }\n      const glsl = getGlsl(handler.session.backend.glContext.version);\n      const shaderSource = `\n    ${glslFunc.body}\n    void main() {\n      vec4 v1 = ${glsl.texture2D}(A, TexCoords);\n      vec4 v2 = ${glsl.texture2D}(B, TexCoords);\n      vec4 result = ${glslFunc.name}(v1, v2);\n      ${glsl.output} = result;\n    }\n    `;\n\n      return {\n        name: glslFunc.name,\n        inputNames: ['A', 'B'],\n        inputTypes: [textureType, textureType],\n        output: {dims: inputs[0].dims, type: outputTensorType, textureType},\n        shaderSource,\n        hasMain: true\n      };\n    };\n\nexport const add = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslAdd()), inputs)];\n\nexport const and = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslAnd(), 'bool'), inputs)];\n\nexport const div = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslDiv()), inputs)];\n\nexport const equal = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslEqual(), 'bool'), inputs)];\n\nexport const greater = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslGreater(), 'bool'), inputs)];\n\nexport const less = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslLess(), 'bool'), inputs)];\n\nexport const mul = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslMul()), inputs)];\n\nexport const or = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslOr(), 'bool'), inputs)];\n\nexport const pow = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslPow()), inputs)];\n\nexport const pRelu = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslPRelu()), inputs)];\n\nexport const sub = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslSub()), inputs)];\n\nexport const xor = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslXor(), 'bool'), inputs)];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ProtoUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const cast: OperatorImplementation<Tensor.DataType> =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], to: Tensor.DataType): Tensor[] => {\n      validateInputs(inputs);\n      return [handler.cast(inputs[0], to)];\n    };\n\nexport const parseCastAttributes: OperatorInitialization<Tensor.DataType> = (node: Graph.Node): Tensor.DataType =>\n    ProtoUtil.tensorDataTypeFromProto(node.attributes.getInt('to'));\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Cast requires 1 input.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('Invalid input type.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\nimport {getCoordsDataType, getGlChannels} from '../utils';\n\nimport {ConcatAttributes} from './concat';\nimport {getChannels, unpackFromChannel} from './packing-utils';\n\nconst createPackedConcatProgramMetadata = (inputCount: number, cacheHint: string) => ({\n  name: 'Concat (packed)',\n  inputNames: Array.from({length: inputCount}, (v, i) => `X${i}`),\n  inputTypes: Array(inputCount).fill(TextureType.packed),\n  cacheHint\n});\n\nconst createPackedConcatProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      if (axis >= inputShape.length || axis < (-1 * inputShape.length)) {\n        throw new Error('axis specified for concat doesn\\'t match input dimensionality');\n      }\n      if (axis < 0) {\n        axis = inputShape.length + axis;\n      }\n      // ensure all of the non-concatenated axes match each other\n      // calculate the shape of the output tensor while we do that\n      const outputShape = inputShape.slice(0);\n      for (let i = 1; i < inputs.length; i++) {\n        const dataNShape = inputs[i].dims.slice();\n        for (let axisIndex = 0; axisIndex < inputShape.length; axisIndex++) {\n          // add to the placeholder for computing output shape\n          if (axisIndex === axis) {\n            outputShape[axis] += dataNShape[axisIndex];\n          }\n          // ensure all non-cancatenated axes match each other\n          else if (inputShape[axisIndex] !== dataNShape[axisIndex]) {\n            throw new Error('non concat dimensions must match');\n          }\n        }\n      }\n\n      const rank = outputShape.length;\n      const coords = getChannels('coords', rank);\n      const dtype = getCoordsDataType(rank);\n      const unpackChannel = unpackFromChannel();\n\n      const shapes = inputs.map(i => i.dims);\n      const channels = getGlChannels(rank);\n      const offsets: number[] = new Array(shapes.length - 1);\n\n      offsets[0] = shapes[0][axis];\n      for (let i = 1; i < offsets.length; i++) {\n        offsets[i] = offsets[i - 1] + shapes[i][axis];\n      }\n\n      const channel = channels[axis];\n      const lastChannels = channels.slice(-2);\n      const allChannels = channels.join();\n\n      let getValueSnippet = `if (${channel} < ${offsets[0]}) {\n        return getChannel(\n            getX0(${allChannels}), vec2(${lastChannels.join()}));\n        }`;\n      for (let i = 1; i < offsets.length; i++) {\n        const shift = offsets[i - 1];\n        getValueSnippet += `\n            if (${channel} < ${offsets[i]}  && ${channel} >= ${offsets[i - 1]}) {\n              return getChannel(\n                getX${i}(${getShiftedChannelsSnippet(channels, channel, shift)}),\n                vec2(${getShiftedChannelsSnippet(lastChannels, channel, shift)}));\n            }`;\n      }\n      const lastIndex = offsets.length;\n      const shift = offsets[offsets.length - 1];\n      getValueSnippet += `\n            return getChannel(\n              getX${lastIndex}(${getShiftedChannelsSnippet(channels, channel, shift)}),\n              vec2(${getShiftedChannelsSnippet(lastChannels, channel, shift)}));`;\n\n      const glsl = getGlsl(handler.session.backend.glContext.version);\n\n      const shaderSource = `\n          ${unpackChannel}\n          float getValue(${channels.map(x => 'int ' + x)}) {\n            ${getValueSnippet}\n          }\n\n          void main() {\n            ${dtype} coords = getOutputCoords();\n            int lastDim = coords.${channels[rank - 1]};\n            coords.${channels[rank - 1]} = coords.${channels[rank - 2]};\n            coords.${channels[rank - 2]} = lastDim;\n\n            vec4 result = vec4(getValue(${coords}), 0., 0., 0.);\n\n            ${coords[rank - 1]} = ${coords[rank - 1]} + 1;\n            if (${coords[rank - 1]} < ${outputShape[rank - 1]}) {\n              result.g = getValue(${coords});\n            }\n\n            ${coords[rank - 2]} = ${coords[rank - 2]} + 1;\n            if (${coords[rank - 2]} < ${outputShape[rank - 2]}) {\n              result.a = getValue(${coords});\n            }\n\n            ${coords[rank - 1]} = ${coords[rank - 1]} - 1;\n            if (${coords[rank - 2]} < ${outputShape[rank - 2]} &&\n                ${coords[rank - 1]} < ${outputShape[rank - 1]}) {\n              result.b = getValue(${coords});\n            }\n            ${glsl.output} = result;\n          }\n        `;\n\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n        shaderSource,\n        hasMain: true,\n      };\n    };\n\nexport const createPackedConcatProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): ProgramInfoLoader => {\n      const metadata = createPackedConcatProgramMetadata(inputs.length, attributes.cacheKey);\n      return {...metadata, get: () => createPackedConcatProgramInfo(handler, metadata, inputs, attributes.axis)};\n    };\n\nconst getShiftedChannelsSnippet = (channels: string[], channel: string, shift: number): string => {\n  const channelIdx = channels.indexOf(channel);\n  const res = channels.map((c, idx) => {\n    if (idx === channelIdx) {\n      return `${c} - ${shift}`;\n    } else {\n      return c;\n    }\n  });\n  return res.join();\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {createPackedConcatProgramInfoLoader} from './concat-packed';\n\nexport interface ConcatAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n}\n\nexport const concat: OperatorImplementation<ConcatAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): Tensor[] => {\n      validateInputs(inputs);\n      if (inferenceHandler.session.pack && inputs[0].dims.length > 1) {\n        const output =\n            inferenceHandler.run(createPackedConcatProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n        return [output];\n      } else {\n        const output =\n            inferenceHandler.run(createUnpackedConcatProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n        return [output];\n      }\n    };\n\nconst createUnpackedConcatProgramMetadata = (inputCount: number, cacheHint: string) => ({\n  name: 'Concat',\n  inputNames: Array.from({length: inputCount}, (v, i) => `X${i}`),\n  inputTypes: Array(inputCount).fill(TextureType.unpacked),\n  cacheHint\n});\n\nconst createUnpackedConcatProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      if (axis >= inputShape.length || axis < (-1 * inputShape.length)) {\n        throw new Error('axis specified for concat doesn\\'t match input dimensionality');\n      }\n      if (axis < 0) {\n        axis = inputShape.length + axis;\n      }\n      // ensure all of the non-concatenated axes match each other\n      // calculate the shape of the output tensor while we do that\n      const outputShape = inputShape.slice(0);\n      for (let i = 1; i < inputs.length; i++) {\n        const dataNShape = inputs[i].dims.slice();\n        for (let axisIndex = 0; axisIndex < inputShape.length; axisIndex++) {\n          // add to the placeholder for computing output shape\n          if (axisIndex === axis) {\n            outputShape[axis] += dataNShape[axisIndex];\n          }\n          // ensure all non-cancatenated axes match each other\n          else if (inputShape[axisIndex] !== dataNShape[axisIndex]) {\n            throw new Error('non concat dimensions must match');\n          }\n        }\n      }\n\n      const rank = outputShape.length;\n\n      const sizeInConcatAxis = new Array<number>(inputs.length);\n      let previousSum = 0;\n      for (let i = 0; i < sizeInConcatAxis.length; ++i) {\n        previousSum += inputs[i].dims[axis];\n        sizeInConcatAxis[i] = previousSum;\n      }\n\n      let getTextureIndexWhereDataResidesMethod = '';\n      // in most cases linear search is sufficient, as in most scenarios, only 2 tensors are concatenated\n      if (inputs.length < 5) {\n        getTextureIndexWhereDataResidesMethod = getTextureIndexWhereDataResidesLinearSearch(sizeInConcatAxis);\n      } else {\n        getTextureIndexWhereDataResidesMethod = getTextureIndexWhereDataResidesBinarySearch(sizeInConcatAxis);\n      }\n\n      const fetchDataFromCorrectTextureMethod = getFetchDataFromCorrectTextureMethod(inputs.length, rank);\n      const getSizeInConcatAxisValueFromIndexMethod = getGetSizeInConcatAxisValueFromIndexMethod(sizeInConcatAxis);\n      const shaderSource = `\n        ${fetchDataFromCorrectTextureMethod}\n        ${getSizeInConcatAxisValueFromIndexMethod}\n        ${getTextureIndexWhereDataResidesMethod}\n        float process(int indices[${rank}]) {\n          int textureIndex = getTextureWhereDataResides (indices[${axis}]);\n\n          if(textureIndex != 0) {\n            indices[${axis}] = indices[${axis}] - int(getSizeInConcatAxisValueFromIndex(textureIndex-int(1)));\n          }\n\n          return fetchDataFromCorrectTexture(textureIndex, indices);\n        }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n      };\n    };\n\nconst createUnpackedConcatProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): ProgramInfoLoader => {\n      const metadata = createUnpackedConcatProgramMetadata(inputs.length, attributes.cacheKey);\n      return {...metadata, get: () => createUnpackedConcatProgramInfo(handler, metadata, inputs, attributes.axis)};\n    };\n\nconst getTextureIndexWhereDataResidesLinearSearch = (sizeInConcatAxis: number[]): string => {\n  const searchAxis = sizeInConcatAxis.map((size, i) => `if(index<${size}) {return ${i};}\n`);\n  return `int getTextureWhereDataResides(int index) {\n      ${searchAxis.join('')}\n    }`;\n};\n\n// TODO: Implement BinarySearch in GLSL\nconst getTextureIndexWhereDataResidesBinarySearch = (sizeInConcatAxis: number[]): string =>\n    getTextureIndexWhereDataResidesLinearSearch(sizeInConcatAxis);\n\nconst getFetchDataFromCorrectTextureMethod = (numberOfTensors: number, tensorRank: number) => {\n  const codeLines: string[] = [`float fetchDataFromCorrectTexture(int textureIndex, int indices[${tensorRank}]) {`];\n  for (let i = 0; i < numberOfTensors; ++i) {\n    if (i === 0) {\n      codeLines.push(\n          '\\t' +\n          `if (textureIndex == ${i}) { return _X${i}(indices); }`);\n    } else if (i === numberOfTensors - 1) {\n      codeLines.push(\n          '\\t' +\n          `else { return _X${i}(indices); }`);\n    } else {\n      codeLines.push(\n          '\\t' +\n          `else if (textureIndex == ${i}) { return _X${i}(indices); }`);\n    }\n  }\n  codeLines.push(\n      '\\t' +\n      '}');\n  return codeLines.join('\\n');\n};\n\nconst getGetSizeInConcatAxisValueFromIndexMethod = (sizeInConcatAxis: number[]): string => {\n  const codeLines: string[] = ['int getSizeInConcatAxisValueFromIndex(int index) {'];\n  for (let i = 0; i < sizeInConcatAxis.length; ++i) {\n    if (i === 0) {\n      codeLines.push(\n          '\\t' +\n          `if (index == ${i}) { return ${sizeInConcatAxis[i]}; }`);\n    } else if (i === sizeInConcatAxis.length - 1) {\n      codeLines.push(\n          '\\t' +\n          `else { return ${sizeInConcatAxis[i]}; }`);\n    } else {\n      codeLines.push(\n          '\\t' +\n          `else if (index == ${i}) { return ${sizeInConcatAxis[i]}; }`);\n    }\n  }\n  codeLines.push(\n      '\\t' +\n      '}');\n\n  return codeLines.join('\\n');\n};\n\nexport const parseConcatAttributes: OperatorInitialization<ConcatAttributes> = (node: Graph.Node): ConcatAttributes =>\n    createAttributeWithCacheKey({axis: node.attributes.getInt('axis')});\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length < 1) {\n    throw new Error('too few inputs');\n  }\n\n  const inputType = inputs[0].type;\n  const inputDimensionality = inputs[0].dims.length;\n\n  // TODO: Support string concat\n  if (inputType === 'string') {\n    throw new Error('string tensor is not supported yet');\n  }\n\n  for (const input of inputs) {\n    // make sure types of all inputs match\n    if (input.type !== inputType) {\n      throw new Error('input tensors should be one type');\n    }\n\n    // make sure the dimensionality of all inputs are the same\n    if (input.dims.length !== inputDimensionality) {\n      throw new Error('input tensors should have the same shape');\n    }\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../../instrument';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {calculateOutputShape, ConvAttributes} from './conv';\nimport {getActivationSnippet} from './fuse-utils';\n\nconst createUnpackedGroupedConvProgramMetadata = (hasBias: boolean, cacheHint: string): ProgramMetadata => ({\n  name: 'GroupedConv',\n  inputNames: hasBias ? ['X', 'W', 'Bias'] : ['X', 'W'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.unpacked],\n  cacheHint\n});\n\nconst createUnpackedGroupedConvProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], metadata: ProgramMetadata,\n     attributes: ConvAttributes): ProgramInfo => {\n      const hasBias = inputs.length > 2;\n      const processBias = hasBias ? 'value += getBias(output_channel);' : '';\n      const xShape = inputs[0].dims.slice();\n      const wShape = inputs[1].dims.slice();\n      const outputChannelsPerGroup = wShape[0] / attributes.group;\n      Logger.verbose(\n          'GroupedConv',\n          `autpPad:${attributes.autoPad}, dilations:${attributes.dilations}, group:${attributes.group}, kernelShape:${\n              attributes.kernelShape}, pads:${attributes.pads}, strides:${attributes.strides}`);\n      const outputShape =\n          calculateOutputShape(xShape, wShape, attributes.dilations, attributes.pads, attributes.strides);\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const {activationFunction, applyActivation} = getActivationSnippet(attributes);\n\n      const shaderSource = `\n  const ivec2 strides = ivec2(${attributes.strides[0]}, ${attributes.strides[1]});\n  const ivec2 pads = ivec2(${attributes.pads[0]}, ${attributes.pads[1]});\n  ${activationFunction}\n  void main() {\n    ivec4 coords = getOutputCoords();\n    int batch = coords.x;\n    int output_channel = coords.y;\n    ivec2 xRCCorner = coords.zw * strides - pads;\n    int group_id = output_channel / ${outputChannelsPerGroup};\n\n    float value = 0.0;\n    for (int wInChannel = 0; wInChannel < ${wShape[1]}; wInChannel++) {\n      int input_channel = group_id * ${wShape[1]} + wInChannel;\n      for (int wHeight = 0; wHeight < ${wShape[2]}; wHeight++) {\n        int xHeight = xRCCorner.x + wHeight * ${attributes.dilations[0]};\n\n        if (xHeight < 0 || xHeight >= ${xShape[2]}) {\n          continue;\n        }\n\n        for (int wWidth = 0; wWidth < ${wShape[3]}; wWidth++) {\n          int xWidth = xRCCorner.y + wWidth * ${attributes.dilations[1]};\n          if (xWidth < 0 || xWidth >= ${xShape[3]}) {\n            continue;\n          }\n\n          float xVal = getX(batch, input_channel, xWidth, xHeight);\n          float wVal = getW(output_channel, wInChannel, wWidth, wHeight);\n          value += xVal*wVal;\n        }\n      }\n    }\n    ${processBias}\n    ${applyActivation}\n    ${glsl.output} = vec4(value, .0, .0, .0);\n  }\n`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n        hasMain: true,\n      };\n    };\n\nexport const createUnpackedGroupedConvProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes):\n        ProgramInfoLoader => {\n          const metadata = createUnpackedGroupedConvProgramMetadata(inputs.length > 2, attributes.cacheKey);\n          return {\n            ...metadata,\n            get: () => createUnpackedGroupedConvProgramInfo(inferenceHandler, inputs, metadata, attributes)\n          };\n        };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nimport {calculateOutputShape, ConvAttributes} from './conv';\nimport {createPackedIm2ColProgramInfoLoader} from './im2col-pack';\nimport {createPackedMatmulProgramInfoLoader} from './matmul-pack';\n\nexport const conv2DPackedPointwise =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n      const reshapedX = inferenceHandler.reshapePacked(inputs[0], [xshape[1], xshape[2] * xshape[3]]);\n      const reshapedK = inferenceHandler.reshapePacked(inputs[1], [kshape[0], kshape[1]]);\n\n      const matmulInputs = inputs.length > 2 ? [reshapedK, reshapedX, inputs[2]] : [reshapedK, reshapedX];\n      const matmulOutput = inferenceHandler.run(\n          createPackedMatmulProgramInfoLoader(inferenceHandler, matmulInputs, attributes), matmulInputs);\n      return inferenceHandler.reshapePacked(matmulOutput, outputShape);\n    };\n\nexport const conv2DPacked =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n\n      // run im2col\n      const im2colOutput = inferenceHandler.run(\n          createPackedIm2ColProgramInfoLoader(inferenceHandler, inputs[0], inputs[1], outputShape, attributes),\n          [inputs[0]]);\n\n      // reshape kernel\n      const kernelReshaped = inferenceHandler.reshapePacked(inputs[1], [kshape[0], kshape[1] * kshape[2] * kshape[3]]);\n\n      // run matmul\n      const matmulInputs =\n          (inputs.length === 3) ? [kernelReshaped, im2colOutput, inputs[2]] : [kernelReshaped, im2colOutput];\n      const matmulOutput = inferenceHandler.run(\n          createPackedMatmulProgramInfoLoader(inferenceHandler, matmulInputs, attributes), matmulInputs);\n\n      // reshape output\n      const outputReshaped = inferenceHandler.reshapePacked(matmulOutput, outputShape);\n      return outputReshaped;\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {InferenceHandler} from '../../../backend';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {ConvAttributes} from './conv';\nimport {getActivationSnippet, parseInternalActivationAttributes} from './fuse-utils';\n\nconst computeTotalPad =\n    (inDim: number, stride: number, adj: number, kernel: number, dilation: number, outSize: number) =>\n        (inDim - 1) * stride + adj + (kernel - 1) * dilation + 1 - outSize;\n\nconst distributePadding = (totalPad: number, autoPad: string, pads: number[], head: number, tail: number) => {\n  const smallPad = Math.floor(totalPad / 2);\n  if (autoPad === 'SAME_UPPER') {\n    pads[head] = smallPad;\n    pads[tail] = totalPad - smallPad;\n  } else if (autoPad === 'SAME_LOWER') {\n    pads[head] = totalPad - smallPad;\n    pads[tail] = smallPad;\n  }\n};\n\nconst calculateOutputShapeAndPads =\n    (inputShape: readonly number[], kernelShape: readonly number[], dilations: readonly number[], autoPad: string,\n     pads: number[], strides: readonly number[], outputPadding: readonly number[], outputShape: number[]) => {\n      const spatialRank = inputShape.length - 2;\n      const updateShape = outputShape.length === 0;\n      for (let i = 0; i < spatialRank; ++i) {\n        const outSize = updateShape ? inputShape[i + 2] * strides[i] : outputShape[i];\n        const totalPad = computeTotalPad(inputShape[i + 2], strides[i], pads[i], kernelShape[i], dilations[i], outSize);\n        distributePadding(totalPad, autoPad, pads, i, i + spatialRank);\n        if (updateShape) {\n          outputShape.push(\n              strides[i] * (inputShape[i + 2] - 1) + outputPadding[i] + (kernelShape[i] - 1) * dilations[i] + 1 -\n              pads[i] - pads[i + spatialRank]);\n        }\n      }\n    };\n\nexport interface ConvTransposeAttributes extends ConvAttributes {\n  readonly outputPadding: readonly number[];\n  readonly outputShape: readonly number[];\n}\n\nexport const convTranspose: OperatorImplementation<ConvTransposeAttributes> =\n    (inferenceHandler: InferenceHandler, inputs: Tensor[], attributes: ConvTransposeAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);  // currently will fail if not convTranspose2D\n      return convTranspose2d(inferenceHandler, inputs, attributes);\n    };\n\nconst convTranspose2d: OperatorImplementation<ConvTransposeAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConvTransposeAttributes): Tensor[] => {\n      const adjustedAttributes = getAdjustedConvTransposeAttributes(attributes, inputs);\n      return [convTranspose2DUnpacked(inferenceHandler, inputs, adjustedAttributes)];\n    };\n\nconst createConvTransposeProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\n  name: 'ConvTranspose',\n  inputNames: hasBias ? ['X', 'W', 'B'] : ['X', 'W'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.unpacked],\n  cacheHint\n});\n\nconst createUnpackedConvTransposeProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], metadata: ProgramMetadata,\n     attributes: ConvTransposeAttributes): ProgramInfo => {\n      const hasBias = inputs.length > 2;\n      const valueInit = hasBias ? 'getB(output_channel)' : '0.0';\n      const xShape = inputs[0].dims;\n      const wShape = inputs[1].dims;\n      const outputChannelsPerGroup = wShape[1];\n      const inputChannelsPerGroup = wShape[0] / attributes.group;\n      const outputShape = [inputs[0].dims[0], inputs[1].dims[1] * attributes.group, ...attributes.outputShape];\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const {activationFunction, applyActivation} = getActivationSnippet(attributes);\n\n      const shaderSource = `\n  const ivec2 strides = ivec2(${attributes.strides[0]}, ${attributes.strides[1]});\n  const ivec2 pads = ivec2(${attributes.pads[0]}, ${attributes.pads[1]});\n  ${activationFunction}\n  void main() {\n    ivec4 coords = getOutputCoords();\n    int batch = coords.x;\n    int output_channel = coords.y;\n\n    ivec2 loc = coords.zw + pads;\n\n    int group_id = output_channel / ${outputChannelsPerGroup};\n    int wOutChannel = output_channel - group_id * ${outputChannelsPerGroup};\n\n    float value = ${valueInit};\n    for (int inChannelOffset = 0; inChannelOffset < ${inputChannelsPerGroup}; inChannelOffset++) {\n      int input_channel = group_id * ${inputChannelsPerGroup} + inChannelOffset;\n      for (int wWOff = 0; wWOff < ${wShape[2]}; wWOff++) {\n        for (int wHOff = 0; wHOff < ${wShape[3]}; wHOff++) {\n          ivec2 wOff = ivec2(wWOff * ${attributes.dilations[0]}, wHOff * ${attributes.dilations[1]});\n          ivec2 wLoc = loc - wOff;\n          ivec2 wLocIn = wLoc / strides;\n          if (\n            wLocIn * strides == wLoc &&\n            wLocIn.x >= 0 && wLocIn.x < ${xShape[2]} &&\n            wLocIn.y >= 0 && wLocIn.y < ${xShape[3]}\n          ) {\n            float xVal = getX(batch, input_channel, wLocIn.y, wLocIn.x);\n            float wVal = getW(input_channel, wOutChannel, wHOff, wWOff);\n            value += xVal * wVal;\n          }\n        }\n      }\n    }\n    ${applyActivation}\n    ${glsl.output} = vec4(value, .0, .0, .0);\n  }\n`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n        hasMain: true,\n      };\n    };\n\nconst createUnpackedConvTransposeProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvTransposeAttributes):\n        ProgramInfoLoader => {\n          const metadata = createConvTransposeProgramMetadata(inputs.length > 2, attributes.cacheKey);\n          return {\n            ...metadata,\n            get: () => createUnpackedConvTransposeProgramInfo(inferenceHandler, inputs, metadata, attributes)\n          };\n        };\n\n\nconst convTranspose2DUnpacked =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvTransposeAttributes):\n        Tensor => {\n          const result = inferenceHandler.run(\n              createUnpackedConvTransposeProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n          return result;\n        };\n\nconst getAdjustedConvTransposeAttributes = <T extends ConvTransposeAttributes>(attributes: T, inputs: Tensor[]): T => {\n  const kernelShape = attributes.kernelShape.slice();\n  // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\n  if (attributes.kernelShape.length === 0) {\n    for (let i = 2; i < inputs[1].dims.length; ++i) {\n      kernelShape.push(inputs[1].dims[i]);\n    }\n  }\n\n  const pads = attributes.pads.slice();\n  const outputShape = attributes.outputShape.slice();\n  const inputShape = inputs[0].dims;\n  // If outputShape is not specified in the attributes of this op, infer it from the parameters\n  // Similarly, automatically infer pads if not specified\n  calculateOutputShapeAndPads(\n      inputShape, kernelShape, attributes.dilations, attributes.autoPad, pads, attributes.strides,\n      attributes.outputPadding, outputShape);\n\n  // always return a new object so does not modify the original attributes\n  const newAttributes: T = Object.assign({}, attributes);\n  Object.assign(newAttributes, {kernelShape, pads, outputShape, cacheKey: attributes.cacheKey});\n  return newAttributes;\n};\n\nexport const parseConvTransposeAttributes: OperatorInitialization<ConvTransposeAttributes> =\n    (node: Graph.Node): ConvTransposeAttributes => {\n      const attributes = node.attributes;\n      const activationAttributes = parseInternalActivationAttributes(attributes);\n      // TODO : Make this generic enough to compute default attributes for multi-dimensional conv\n      const autoPad = attributes.getString('auto_pad', 'NOTSET');\n      const dilations = attributes.getInts('dilations', [1, 1]);\n      const group = attributes.getInt('group', 1);\n      const kernelShape = attributes.getInts('kernel_shape', []);\n      const outputPadding = attributes.getInts('output_padding', [0, 0]);\n      const outputShape = attributes.getInts('output_shape', []);\n      const pads = attributes.getInts('pads', [0, 0, 0, 0]);\n      const strides = attributes.getInts('strides', [1, 1]);\n\n      return createAttributeWithCacheKey(\n          {autoPad, dilations, group, kernelShape, outputPadding, outputShape, pads, strides, ...activationAttributes});\n    };\n\nconst validateInputs = (inputs: Tensor[], attributes: ConvTransposeAttributes): void => {\n  // Refer to the below link for all input checks\n  // https://github.com/onnx/onnx/blob/main/docs/Operators.md#Conv\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Conv requires 2 or 3 inputs');\n  }\n\n  // TODO : Need to add support for multi-dimensional conv\n  if (inputs[0].dims.length !== 4 || inputs[1].dims.length !== 4) {\n    throw new Error('currently only support 2-dimensional conv');\n  }\n\n  // FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\n  const dataChannel = inputs[0].dims[1];\n  const filterInChannel = inputs[1].dims[0];\n  if (dataChannel !== filterInChannel) {\n    throw new Error('FILTER_IN_CHANNEL should be equal to DATA_CHANNEL');\n  }\n\n  const featureMaps = inputs[1].dims[1] * attributes.group;\n\n  // if bias is provided it should be 1D and the number of elements should be equal to the number of feature maps\n  if (inputs.length === 3 && (inputs[2].dims.length !== 1 || inputs[2].dims[0] !== featureMaps)) {\n    throw new Error('invalid bias');\n  }\n\n  const spatialRank = inputs[0].dims.length - 2;\n  // wrong dilations dimension\n  if (attributes.dilations.length !== spatialRank) {\n    throw new Error(`dilations should be ${spatialRank}D`);\n  }\n\n  // Wrong strides dimension\n  if (attributes.strides.length !== spatialRank) {\n    throw new Error(`strides should be ${spatialRank}D`);\n  }\n\n  // Wrong pads dimension\n  if (attributes.pads.length !== spatialRank * 2) {\n    throw new Error(`pads should be ${spatialRank * 2}D`);\n  }\n\n  // Wrong output padding dimension\n  if (attributes.outputPadding.length !== spatialRank) {\n    throw new Error(`output_padding should be ${spatialRank}D`);\n  }\n\n  // if kernelShape is specified, it's data length must be 2 less than dims length of the weights tensor\n  // (the first 2 dims are batch_size and channels)\n  if (attributes.kernelShape.length !== 0 && attributes.kernelShape.length !== inputs[1].dims.length - 2) {\n    throw new Error('invalid kernel shape');\n  }\n\n  // as with kernelShape, must have same number of spatial dims as input\n  if (attributes.outputShape.length !== 0 && attributes.outputShape.length !== inputs[0].dims.length - 2) {\n    throw new Error('invalid output shape');\n  }\n\n  // TODO : Need to add support for float64\n  if (inputs[0].type !== 'float32' || inputs[1].type !== 'float32') {\n    throw new Error('ConvTranspose input(X,W) should be float tensor');\n  }\n\n  if (inputs.length === 3 && inputs[2].type !== 'float32') {\n    throw new Error('ConvTranspose input(bias) should be float tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {InferenceHandler} from '../../../backend';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {PoolConvUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nimport {createUnpackedGroupedConvProgramInfoLoader} from './conv-grouped';\nimport {conv2DPacked} from './conv-pack';\nimport {createDotProductProgramInfoLoader} from './dot-product';\nimport {InternalActivationAttributes, parseInternalActivationAttributes} from './fuse-utils';\nimport {createIm2ColProgramInfoLoader} from './im2col';\nimport {createMatmulProgramInfoLoader} from './matmul';\n\n\nexport const calculateOutputShape =\n    (inputShape: readonly number[], kernelShape: readonly number[], dilations: readonly number[],\n     adjustPads: readonly number[], strides: readonly number[]): number[] => {\n      const batchSize = inputShape[0];\n      const inputSpatialShape = inputShape.slice(2);\n      const spatialRank = inputSpatialShape.length;\n      const outChannels = kernelShape[0];\n      const kernelSpatialShape = kernelShape.slice(2);\n      const dilatedKernelShape = kernelSpatialShape.map((v, i) => v + (v - 1) * (dilations[i] - 1));\n      const inputSpatialShapeWithPad = inputSpatialShape.map((v, i) => v + adjustPads[i] + adjustPads[i + spatialRank]);\n      const outputSpatialShape =\n          inputSpatialShapeWithPad.map((v, i) => Math.floor((v - dilatedKernelShape[i] + strides[i]) / strides[i]));\n      const outputShape = [batchSize, outChannels].concat(...outputSpatialShape);\n      return outputShape;\n    };\n\nexport interface ConvAttributes extends InternalActivationAttributes, AttributeWithCacheKey {\n  readonly autoPad: string;\n  readonly dilations: readonly number[];\n  readonly group: number;\n  readonly kernelShape: readonly number[];\n  readonly pads: readonly number[];\n  readonly strides: readonly number[];\n}\n\nexport const conv: OperatorImplementation<ConvAttributes> =\n    (inferenceHandler: InferenceHandler, inputs: Tensor[], attributes: ConvAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);  // currently will fail if not conv2D\n      return conv2d(inferenceHandler, inputs, attributes);\n    };\n\nconst conv2d: OperatorImplementation<ConvAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConvAttributes): Tensor[] => {\n      const adjustedAttributes = getAdjustedConvAttributes(attributes, inputs);\n      const packMode = inferenceHandler.session.pack;\n      const isPointwise = adjustedAttributes.kernelShape[0] === 1 && adjustedAttributes.kernelShape[1] === 1;\n      if (adjustedAttributes.group > 1) {\n        const result = inferenceHandler.run(\n            createUnpackedGroupedConvProgramInfoLoader(inferenceHandler, inputs, adjustedAttributes), inputs);\n        return [result];\n      } else if (isPointwise && packMode) {\n        return [conv2DUnpackedPointwise(inferenceHandler, inputs, adjustedAttributes)];\n      } else if (packMode && inputs[0].dims.length === 4 && inputs[0].dims[0] === 1 && !isPointwise) {\n        return [conv2DPacked(inferenceHandler, inputs, adjustedAttributes)];\n      } else {\n        return [conv2DUnpacked(inferenceHandler, inputs, adjustedAttributes)];\n      }\n    };\n\nconst conv2DUnpackedPointwise =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n      const reshapedX = inferenceHandler.reshapeUnpacked(inputs[0], [xshape[1], xshape[2] * xshape[3]]);\n      const reshapedK = inferenceHandler.reshapeUnpacked(inputs[1], [kshape[0], kshape[1]]);\n\n      const matmulInputs = inputs.length > 2 ? [reshapedK, reshapedX, inputs[2]] : [reshapedK, reshapedX];\n      const matmulOutput = inferenceHandler.run(createMatmulProgramInfoLoader(matmulInputs, attributes), matmulInputs);\n      return inferenceHandler.reshapeUnpacked(matmulOutput, outputShape);\n    };\n\nconst conv2DUnpacked =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n      const xIm2Col = inferenceHandler.run(\n          createIm2ColProgramInfoLoader(inferenceHandler, inputs[0], inputs[1], outputShape, attributes), [inputs[0]]);\n\n      const dotProductInputs = inputs.length === 3 ? [xIm2Col, inputs[1], inputs[2]] : [xIm2Col, inputs[1]];\n      const output = inferenceHandler.run(\n          createDotProductProgramInfoLoader(inferenceHandler, inputs, outputShape, attributes), dotProductInputs);\n      return output;\n    };\n\nconst getAdjustedConvAttributes = <T extends ConvAttributes>(attributes: T, inputs: Tensor[]): T => {\n  const kernelShape = attributes.kernelShape.slice();\n  // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\n  if (attributes.kernelShape.length === 0) {\n    for (let i = 2; i < inputs[1].dims.length; ++i) {\n      kernelShape.push(inputs[1].dims[i]);\n    }\n  }\n  const pads = attributes.pads.slice();\n  PoolConvUtil.adjustPadsBasedOnAutoPad(\n      inputs[0].dims, attributes.strides, attributes.dilations, kernelShape, pads, attributes.autoPad);\n\n  // always return a new object so does not modify the original attributes\n  const newAttributes: T = Object.assign({}, attributes);\n  Object.assign(newAttributes, {kernelShape, pads, cacheKey: attributes.cacheKey});\n  return newAttributes;\n};\n\nexport const parseConvAttributes: OperatorInitialization<ConvAttributes> = (node: Graph.Node): ConvAttributes => {\n  const attributes = node.attributes;\n  const activationAttributes = parseInternalActivationAttributes(attributes);\n  // TODO : Make this generic enough to compute default attributes for multi-dimensional conv\n  const autoPad = attributes.getString('auto_pad', 'NOTSET');\n  const dilations = attributes.getInts('dilations', [1, 1]);\n  const group = attributes.getInt('group', 1);\n  const kernelShape = attributes.getInts('kernel_shape', []);\n  const pads = attributes.getInts('pads', [0, 0, 0, 0]);\n  const strides = attributes.getInts('strides', [1, 1]);\n\n  return createAttributeWithCacheKey({autoPad, dilations, group, kernelShape, pads, strides, ...activationAttributes});\n};\n\nconst validateInputs = (inputs: Tensor[], attributes: ConvAttributes): void => {\n  // Refer to the below link for all input checks\n  // https://github.com/onnx/onnx/blob/main/docs/Operators.md#Conv\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Conv requires 2 or 3 inputs');\n  }\n\n  // TODO : Need to add support for multi-dimensional conv\n  if (inputs[0].dims.length !== 4 || inputs[1].dims.length !== 4) {\n    throw new Error('currently only support 2-dimensional conv');\n  }\n\n  // FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\n  const dataChannel = inputs[0].dims[1];\n  const filterInChannel = inputs[1].dims[1] * attributes.group;\n  if (dataChannel !== filterInChannel) {\n    throw new Error('FILTER_IN_CHANNEL should be equal to DATA_CHANNEL');\n  }\n\n  // if bias is provided it should be 1D and the number of elements should be equal to the number of feature maps\n  if (inputs.length === 3 && (inputs[2].dims.length !== 1 || inputs[1].dims[0] !== inputs[2].dims[0])) {\n    throw new Error('invalid bias');\n  }\n\n  const spatialRank = inputs[0].dims.length - 2;\n  // wrong dilations dimension\n  if (attributes.dilations.length !== spatialRank) {\n    throw new Error(`dilations should be ${spatialRank}D`);\n  }\n\n  // Wrong strides dimension\n  if (attributes.strides.length !== spatialRank) {\n    throw new Error(`strides should be ${spatialRank}D`);\n  }\n\n  // Wrong pads dimension\n  if (attributes.pads.length !== spatialRank * 2) {\n    throw new Error(`pads should be ${spatialRank * 2}D`);\n  }\n\n  // if kernelShape is specified, it's data length must be 2 less than dims length of the weights tensor\n  // (the first 2 dims are batch_size and channels)\n  if (attributes.kernelShape.length !== 0 && attributes.kernelShape.length !== inputs[1].dims.length - 2) {\n    throw new Error('invalid kernel shape');\n  }\n\n  // TODO : Need to add support for float64\n  if (inputs[0].type !== 'float32' || inputs[1].type !== 'float32') {\n    throw new Error('Conv input(X,W) should be float tensor');\n  }\n\n  if (inputs.length === 3 && inputs[2].type !== 'float32') {\n    throw new Error('Conv input(bias) should be float tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nimport {transpose, TransposeAttributes} from './transpose';\n\nexport interface DepthToSpaceAttributes {\n  mode: 'DCR'|'CRD';\n  blocksize: number;\n}\n\nexport const depthToSpace: OperatorImplementation<DepthToSpaceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: DepthToSpaceAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const blocksize = attributes.blocksize;\n      const blocksizeSqr = blocksize * blocksize;\n      const transposePerm = attributes.mode === 'DCR' ? [0, 3, 4, 1, 5, 2] : [0, 1, 4, 2, 5, 3];\n      const firstReshapeShape = attributes.mode === 'DCR' ?\n          [\n            inputs[0].dims[0], blocksize, blocksize, inputs[0].dims[1] / blocksizeSqr, inputs[0].dims[2],\n            inputs[0].dims[3]\n          ] :\n          [\n            inputs[0].dims[0], inputs[0].dims[1] / blocksizeSqr, blocksize, blocksize, inputs[0].dims[2],\n            inputs[0].dims[3]\n          ];\n\n      // const transpose = new WebGLTranspose();\n      // const attributes = new Attribute(undefined);\n      // attributes.set('perm', 'ints', transposePerm);\n      // transpose.initialize(attributes);\n\n      // First reshape\n      const firstReshapedTensor = inferenceHandler.reshapeUnpacked(inputs[0], firstReshapeShape);\n\n      // transpose\n      const transposeAttributes: TransposeAttributes = {perm: transposePerm, cacheKey: `${transposePerm}`};\n      const [transposeOutput] = transpose(inferenceHandler, [firstReshapedTensor], transposeAttributes);\n\n      // Second reshape\n      const secondReshapeShape = [\n        inputs[0].dims[0], inputs[0].dims[1] / blocksizeSqr, inputs[0].dims[2] * blocksize,\n        inputs[0].dims[3] * blocksize\n      ];\n      const result = inferenceHandler.reshapeUnpacked(transposeOutput, secondReshapeShape);\n      return [result];\n    };\n\nexport const parseDepthToSpaceAttributes: OperatorInitialization<DepthToSpaceAttributes> =\n    (node: Graph.Node): DepthToSpaceAttributes => {\n      // processing node attributes\n      const blocksize = node.attributes.getInt('blocksize');\n      if (blocksize < 1) {\n        throw new Error(`blocksize must be >= 1, but got : ${blocksize} for DepthToSpace`);\n      }\n      const mode = node.attributes.getString('mode', 'DCR');\n      if (mode !== 'DCR' && mode !== 'CRD') {\n        throw new Error(`unrecognized mode: ${mode} for DepthToSpace`);\n      }\n      return {mode, blocksize};\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (inputs.length !== 1) {\n    throw new Error(`DepthToSpace expect 1 inputs, but got ${inputs.length}`);\n  }\n\n  // Input has to be a 4-D tensor\n  // TODO: Support string depth-to-space.\n  if (inputs[0].type === 'string' || inputs[0].dims.length !== 4) {\n    throw new TypeError('DepthToSpace input should be a 4-D numeric tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {getActivationSnippet, InternalActivationAttributes} from './fuse-utils';\nimport {calculateIm2ColDims} from './im2col';\n\nconst createDotProductProgramMetadata = (hasBias: boolean, attributes: InternalActivationAttributes) => ({\n  name: 'ConvDotProduct',\n  inputNames: hasBias ? ['Im2Col', 'K', 'B'] : ['Im2Col', 'K'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.packedLastDimension, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.packedLastDimension],\n  cacheKey: attributes.activationCacheKey\n});\n\nconst createDotProductProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: readonly Tensor[],\n     outputShape: number[], attributes: InternalActivationAttributes): ProgramInfo => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const adjustedKernelShape = [kshape[0], Math.ceil((xshape[1] * kshape[2] * kshape[3]) / 4)];\n      const im2colShape = calculateIm2ColDims(xshape, kshape, outputShape);\n      const [kWidth, kHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(adjustedKernelShape, TextureType.packedLastDimension);\n\n      const im2colStrides = ShapeUtil.computeStrides(im2colShape);\n      const [im2colWidth, im2colHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(im2colShape, TextureType.packedLastDimension);\n      const rank = outputShape.length;\n\n      const initValue = (inputs.length < 3) ? '0.0' : '_B(b)';\n      const sharedDim = Math.ceil(xshape[1] * kshape[2] * kshape[3] / 4);\n      const {activationFunction, applyActivation} = getActivationSnippet(attributes);\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const shaderSource = `\n${activationFunction}\nfloat process(int indices[${rank}]) {\n  int b[1];\n  b[0] = indices[1];\n  int im2col[4];\n  im2col[0] = indices[0];\n  im2col[1] = indices[2];\n  im2col[2] = indices[3];\n  int im2colOffset = im2col[0] * ${im2colStrides[0]} + im2col[1] * ${im2colStrides[1]} + im2col[2] * ${\n          im2colStrides[2]};\n  int kernelOffset = indices[1] * ${adjustedKernelShape[1]};\n  float value = ${initValue};\n  for (int i = 0; i < ${sharedDim}; ++i) {\n    vec2 im2colCoords = offsetToCoords(im2colOffset, ${im2colWidth}, ${im2colHeight});\n    vec2 kernelCoords = offsetToCoords(kernelOffset, ${kWidth}, ${kHeight});\n    value += dot(${glsl.texture2D}(Im2Col, im2colCoords), ${glsl.texture2D}(K, kernelCoords));\n    ++im2colOffset;\n    ++kernelOffset;\n  }\n  ${applyActivation}\n  return value;\n}`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nexport const createDotProductProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], outputShape: number[],\n     attributes: InternalActivationAttributes): ProgramInfoLoader => {\n      const metadata = createDotProductProgramMetadata(inputs.length > 2, attributes);\n      return {\n        ...metadata,\n        get: () => createDotProductProgramInfo(inferenceHandler, metadata, inputs, outputShape, attributes)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const flatten: OperatorImplementation<number> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axis: number): Tensor[] => {\n      validateInputs(inputs, axis);\n\n      const outputDims = ShapeUtil.flattenShape(inputs[0].dims, axis);\n      return [inferenceHandler.reshapeUnpacked(inputs[0], outputDims)];\n    };\n\nexport const parseFlattenAttributes: OperatorInitialization<number> = (node: Graph.Node): number =>\n    node.attributes.getInt('axis', 1);  // default axis is 1\n\nconst validateInputs = (inputs: Tensor[], axis: number): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Flatten requires 1 input.');\n  }\n\n  const r = inputs[0].dims.length;\n  if (r === 0) {\n    throw new Error('scalar tensor is not supported.');\n  }\n\n  if (axis < -r || axis > r) {\n    throw new Error('Invalid axis');\n  }\n\n  // TODO: Support string type\n  if (inputs[0].type === 'string') {\n    throw new Error('string tensor is not supported.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from '../../../attribute';\nimport {MAX_CLIP, MIN_CLIP} from '../../../util';\nimport {GlslValueFunction} from '../glsl-definitions';\n\nimport {glslClip, glslRelu, glslSigmoid} from './unary-op';\n\nexport interface InternalActivationAttributes {\n  readonly activation: string;\n  readonly clipMin?: number;\n  readonly clipMax?: number;\n  readonly activationCacheKey: string;\n}\n\nexport function getActivationSnippet(attributes: InternalActivationAttributes) {\n  let func: GlslValueFunction;\n  switch (attributes.activation) {\n    case 'Relu':\n      func = glslRelu();\n      break;\n    case 'Sigmoid':\n      func = glslSigmoid();\n      break;\n    case 'Clip':\n      func = glslClip(attributes.clipMin!, attributes.clipMax!);\n      break;\n    // TODO: adding other activations that can be fused.\n    default:\n      return {activationFunction: '', applyActivation: ''};\n  }\n\n  const activationName = func.name;\n  const activationFunction = func.body;\n  const applyActivation = `value = ${activationName}_(value);`;\n  return {activationFunction, applyActivation};\n}\n\nexport const parseInternalActivationAttributes = (attributes: Attribute): InternalActivationAttributes => {\n  const activation = attributes.getString('activation', '');\n\n  if (activation === 'Clip') {\n    const [clipMin, clipMax] = attributes.getFloats('activation_params', [MIN_CLIP, MAX_CLIP]);\n    return {activation, clipMax, clipMin, activationCacheKey: `${activation}:${clipMin},${clipMax}`};\n  }\n  return {activation, activationCacheKey: activation};\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\ninterface GatherAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n}\n\nexport const gather: OperatorImplementation<GatherAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: GatherAttributes): Tensor[] => {\n      validateInputs(inputs, attributes.axis);\n      const output = inferenceHandler.run(createGatherProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n      return [output];\n    };\n\nexport const parseGatherAttributes: OperatorInitialization<GatherAttributes> = (node: Graph.Node): GatherAttributes =>\n    createAttributeWithCacheKey({axis: node.attributes.getInt('axis', 0)});\n\nconst gatherProgramMetadata = {\n  name: 'Gather',\n  inputNames: ['A', 'B'],\n  inputTypes: [TextureType.unpacked, TextureType.unpacked],\n};\n\nconst createGatherProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      const indexDataShape = inputs[1].dims.slice();\n      const outputShape = new Array(inputShape.length + indexDataShape.length - 1);\n\n      axis = ShapeUtil.normalizeAxis(axis, inputShape.length);\n      const indexCopyOps: string[] = [];\n      for (let i = 0; i < outputShape.length; i++) {\n        // outputShape is divided into three parts: A, B, C\n        // |0        axis|  axis + indexDataShape.length |          end|\n        // |     A       |             B                 |      C      |\n        //\n        // inputIdx: [A, inputs[1][B], C]\n        if (i < axis) {  // A\n          outputShape[i] = inputShape[i];\n          indexCopyOps.push(`inputIdx[${i}] = outputIdx[${i}];`);\n        } else {\n          if (i < axis + indexDataShape.length) {  // B\n            outputShape[i] = indexDataShape[i - axis];\n            indexCopyOps.push(`indexDataIdx[${i - axis}] = outputIdx[${i}];`);\n          } else {                                                       // C\n            outputShape[i] = inputShape[i - indexDataShape.length + 1];  // skip 1 for axis\n            indexCopyOps.push(`inputIdx[${i - indexDataShape.length + 1}] = outputIdx[${i}];`);\n          }\n        }\n      }\n\n      const orank = outputShape.length || 1;\n      const irank = inputShape.length;\n      const iDrank = indexDataShape.length || 1;\n      const shaderSource = `\n      float process(int outputIdx[${orank}]) {\n        int inputIdx[${irank}];\n        int indexDataIdx[${iDrank}];\n        indexDataIdx[0] = 0;\n        ${indexCopyOps.join('\\n        ')}\n        int idx = int(_B(indexDataIdx));\n        inputIdx[${axis}] = idx < 0 ? idx + ${inputShape[axis]} : idx;\n        return _A(inputIdx);\n      }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst createGatherProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: GatherAttributes): ProgramInfoLoader => {\n      const metadata = {...gatherProgramMetadata, cacheHint: attributes.cacheKey};\n      return {...metadata, get: () => createGatherProgramInfo(handler, metadata, inputs, attributes.axis)};\n    };\n\nconst validateInputs = (inputs: Tensor[], axis: number): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Gather requires 2 inputs.');\n  }\n  const tensorRank = inputs[0].dims.length;\n  if (tensorRank < 1) {\n    throw new Error('Invalid input shape.');\n  }\n  if (axis < -tensorRank || axis > tensorRank - 1) {\n    throw new Error('Invalid axis.');\n  }\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invaid input type.');\n  }\n  if (inputs[1].type !== 'int32' && inputs[1].type !== 'int16') {\n    throw new Error('Invaid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {GemmUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport interface GemmAttributes extends AttributeWithCacheKey {\n  transA: boolean;\n  transB: boolean;\n  alpha: number;\n  beta: number;\n  isOptionalC: boolean;  // in opset 11, C becomes optional\n}\n\nexport const gemm: OperatorImplementation<GemmAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: GemmAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);\n      const output = inferenceHandler.run(createGemmProgramInfoLoader(inputs, attributes), inputs);\n      return [output];\n    };\n\nconst parseGemmAttributes = (node: Graph.Node, isOptionalC: boolean): GemmAttributes => {\n  const transA = node.attributes.getInt('transA', 0) !== 0;\n  const transB = node.attributes.getInt('transB', 0) !== 0;\n  const alpha = node.attributes.getFloat('alpha', 1.0);\n  const beta = node.attributes.getFloat('beta', 1.0);\n  return createAttributeWithCacheKey({transA, transB, alpha, beta, isOptionalC});\n};\n\nexport const parseGemmAttributesV7: OperatorInitialization<GemmAttributes> = (node: Graph.Node): GemmAttributes =>\n    parseGemmAttributes(node, false);\n\nexport const parseGemmAttributesV11: OperatorInitialization<GemmAttributes> = (node: Graph.Node): GemmAttributes =>\n    parseGemmAttributes(node, true);\n\nconst createGemmProgramInfoLoader = (inputs: Tensor[], attributes: GemmAttributes): ProgramInfoLoader => {\n  const metadata = {\n    name: 'Gemm',\n    inputNames: inputs.length === 3 ? ['A', 'B', 'C'] : ['A', 'B'],\n    inputTypes: inputs.length === 3 ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                                      [TextureType.unpacked, TextureType.unpacked],\n    key: attributes.cacheKey\n  };\n\n  return {...metadata, get: () => createGemmProgramInfo(metadata, inputs, attributes)};\n};\n\nconst createGemmProgramInfo =\n    (metadata: ProgramMetadata, inputs: Tensor[], attributes: GemmAttributes): ProgramInfo => {\n      const aShape = inputs[0].dims.slice();\n      const bShape = inputs[1].dims.slice();\n      const [M, N] = GemmUtil.getShapeOfGemmResult(\n          aShape, attributes.transA, bShape, attributes.transB, inputs.length === 3 ? inputs[2].dims : undefined);\n      const outputShape = [M, N];\n      if (!outputShape) {\n        throw new Error('Can\\'t use gemm on the given tensors');\n      }\n      let sharedDim = aShape[aShape.length - 1];\n      let line = '';\n      if (attributes.transA) {\n        sharedDim = aShape[0];\n      }\n      if (attributes.transA && attributes.transB) {\n        line = 'value += _A_T(a) * _B_T(b);';\n      } else if (attributes.transA && !attributes.transB) {\n        line = 'value += _A_T(a) * _B(b);';\n      } else if (!attributes.transA && attributes.transB) {\n        line = 'value += _A(a) * _B_T(b);';\n      } else if (!attributes.transA && !attributes.transB) {\n        line = 'value += _A(a) * _B(b);';\n      }\n      const rank = outputShape.length;\n      const declareC = inputs.length === 3 ? `int c[${inputs[2].dims.length}];` : '';\n      const broadcastC = inputs.length === 3 ? 'bcastIndices_C(indices, c);' : '';\n      const calculateC = inputs.length === 3 ? 'value += beta * _C(c);' : '';\n      const shaderSource = `\n      float process(int indices[${rank}]) {\n          int a[${rank}];\n          int b[${rank}];\n          ${declareC}\n\n          copyVec(indices, a);\n          copyVec(indices, b);\n          ${broadcastC}\n\n          float value = 0.0;\n          for (int k=0; k<${sharedDim}; ++k) {\n              a[${rank - 1}] = k;\n              b[${rank - 2}] = k;\n              ${line}\n          }\n\n          value = value * alpha;\n          ${calculateC}\n          return value;\n      }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        variables: [\n          {name: 'alpha', type: 'float', data: attributes.alpha}, {name: 'beta', type: 'float', data: attributes.beta}\n        ],\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[], attributes: GemmAttributes): void => {\n  if (!inputs) {\n    throw new Error('Input is missing');\n  }\n  if (attributes.isOptionalC && (inputs.length < 2 || inputs.length > 3)) {\n    throw new Error('Invaid input shape.');\n  }\n  if (!attributes.isOptionalC && inputs.length !== 3) {\n    throw new Error('Gemm requires 3 inputs');\n  }\n\n  // 'C' can be of dimensionality 1 or 2 only\n  if (inputs.length === 3 && inputs[2].dims.length !== 1 && inputs[2].dims.length !== 2) {\n    throw new Error('Invalid input shape of C');\n  }\n\n  if ((inputs[0].type !== 'float32' && inputs[0].type !== 'float64') ||\n      (inputs[1].type !== 'float32' && inputs[1].type !== 'float64') ||\n      (inputs.length === 3 && inputs[2].type !== 'float32' && inputs[2].type !== 'float64')) {\n    throw new Error('Invalid input type.');\n  }\n\n  if ((inputs[0].type !== inputs[1].type) || (inputs.length === 3 && inputs[0].type !== inputs[2].type)) {\n    throw new Error('Input types are mismatched');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {ConvAttributes} from './conv';\nimport {unpackFromChannel} from './packing-utils';\n\nconst createPackedIm2ColProgramMetadata = (cacheHint: string) => ({\n  name: 'Im2Col (packed)',\n  inputNames: ['A'],\n  inputTypes: [TextureType.packed],\n  cacheHint,\n});\n\nconst createPackedIm2ColProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, x: Tensor, w: Tensor,\n     outputShape: readonly number[], attributes: ConvAttributes): ProgramInfo => {\n      const xshape = x.dims;\n      const wshape = w.dims;\n      const rowDim = 2;\n      const colDim = 3;\n      const rank = outputShape.length;\n      const im2colShape = [wshape[1] * wshape[2] * wshape[3], outputShape[2] * outputShape[3]];\n      const kernelSize = wshape[2] * wshape[3];\n      const unpackChannel = unpackFromChannel();\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      let unrolled = '';\n\n      for (let row = 0; row <= 1; row++) {\n        for (let col = 0; col <= 1; col++) {\n          unrolled += `\n            blockIndex = rc.x + ${col};\n            pos = rc.y + ${row};\n\n            if(blockIndex < ${im2colShape[1]} && pos < ${im2colShape[0]}) {\n              offsetY = int(blockIndex / (${outputShape[rank - 1]})) * ${attributes.strides[0]} -\n                ${attributes.pads[0]};\n              d0 = offsetY + ${attributes.dilations[0]} * (imod(pos, ${kernelSize}) / ${wshape[2]});\n\n              if(d0 < ${xshape[rowDim]} && d0 >= 0) {\n                offsetX = imod(blockIndex, ${outputShape[rank - 1]}) * ${attributes.strides[1]} -\n                  ${attributes.pads[1]};\n                d1 = offsetX + ${attributes.dilations[1]} * imod(imod(pos, ${kernelSize}), ${wshape[2]});\n\n                if(d1 < ${xshape[colDim]} && d1 >= 0) {\n\n                  ch = int(float(pos)/ ${kernelSize}.);\n                    innerDims = vec2(d0, d1);\n                    result[${row * 2 + col}] = getChannel(\n                      getA(0, ch, int(innerDims.x),\n                      int(innerDims.y)), innerDims);\n                }\n              }\n            }\n\n          `;\n        }\n      }\n\n      const shaderSource = `\n      ${unpackChannel}\n\n      void main() {\n        ivec2 rc = getOutputCoords();\n          vec4 result = vec4(0.0);\n          int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n          vec2 innerDims;\n          ${unrolled}\n          ${glsl.output} = result;\n      }\n            `;\n      return {\n        ...metadata,\n        output: {dims: im2colShape, type: x.type, textureType: TextureType.packed},\n        shaderSource,\n        hasMain: true\n      };\n    };\n\nexport const createPackedIm2ColProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, x: Tensor, w: Tensor, outputShape: readonly number[],\n     attributes: ConvAttributes): ProgramInfoLoader => {\n      const metadata = createPackedIm2ColProgramMetadata(attributes.cacheKey);\n      return {\n        ...metadata,\n        get: () => createPackedIm2ColProgramInfo(inferenceHandler, metadata, x, w, outputShape, attributes)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {ConvAttributes} from './conv';\n\nconst createIm2ColProgramMetadata = (cacheHint: string) => ({\n  name: 'Im2Col',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n  cacheHint,\n});\n\nconst createIm2ColProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, x: Tensor, w: Tensor,\n     outputShape: readonly number[], attributes: ConvAttributes): ProgramInfo => {\n      const xshape = x.dims;\n      const wshape = w.dims;\n\n      const rank = outputShape.length;\n      const im2colDims = calculateIm2ColDims(xshape, wshape, outputShape, 4);\n\n      const shaderSource = `\n        const int XC = ${xshape[1]};\n        const int XH = ${xshape[2]};\n        const int XW = ${xshape[3]};\n        const int KH = ${attributes.kernelShape[0]};\n        const int KW = ${attributes.kernelShape[1]};\n        const int dilationH = ${attributes.dilations[0]};\n        const int dilationW = ${attributes.dilations[1]};\n        const int strideH = ${attributes.strides[0]};\n        const int strideW = ${attributes.strides[1]};\n        const int padH = ${attributes.pads[0]};\n        const int padW = ${attributes.pads[1]};\n        const int KHKW = KH*KW;\n        const int XCKHKW = XC * KHKW;\n        const int outputChannels = 4;\n        vec4 process(int indices[${rank}]) {\n          int b  = indices[0]; // batch size\n          int oh = indices[1] * strideH - padH; //output height\n          int ow = indices[2] * strideW - padW; //output width\n          int p = indices[3] * outputChannels; //patch\n          vec4 value = vec4(0.0);\n          for(int i=0; i < outputChannels; ++i) {\n            if(p < XCKHKW) {\n              int patchC = p / KHKW;\n              int patchH = (p - patchC*KHKW) / KW;\n              int patchW = (p - patchC*KHKW) - patchH * KW;\n              int xh2 = oh + patchH * dilationH;\n              int xw2 = ow + patchW * dilationW;\n              int x[${xshape.length}];\n              x[0] = b;\n              x[1] = patchC;\n              x[2] = xh2;\n              x[3] = xw2;\n              if(xh2 >= 0 &&\n                  xh2 < XH &&\n                  xw2 >= 0 &&\n                  xw2 < XW) {\n                value[i] = _X(x);\n              }\n            }\n            ++p;\n          }\n          return value;\n        }\n        `;\n      return {\n        ...metadata,\n        output: {dims: im2colDims, type: x.type, textureType: TextureType.packedLastDimension},\n        shaderSource\n      };\n    };\n\nexport const createIm2ColProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, x: Tensor, w: Tensor, outputShape: readonly number[],\n     attributes: ConvAttributes): ProgramInfoLoader => {\n      const metadata = createIm2ColProgramMetadata(attributes.cacheKey);\n      return {\n        ...metadata,\n        get: () => createIm2ColProgramInfo(inferenceHandler, metadata, x, w, outputShape, attributes)\n      };\n    };\n\n\nexport const calculateIm2ColDims =\n    (inputShape: readonly number[], kernelShape: readonly number[], outputShape: readonly number[], channels = 4):\n        number[] =>\n            [outputShape[0], outputShape[2], outputShape[3],\n             Math.ceil(inputShape[1] * kernelShape[2] * kernelShape[3] / channels)];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport interface ImageScalerAttributes extends AttributeWithCacheKey {\n  scale: number;\n  bias: number[];\n}\n\nexport const imageScaler: OperatorImplementation<ImageScalerAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ImageScalerAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output =\n          inferenceHandler.run(createImageScalerProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n      return [output];\n    };\n\nexport const parseImageScalerAttributes: OperatorInitialization<ImageScalerAttributes> =\n    (node: Graph.Node): ImageScalerAttributes => {\n      const scale = node.attributes.getFloat('scale');\n      const bias = node.attributes.getFloats('bias');\n      return createAttributeWithCacheKey({scale, bias});\n    };\n\nconst imageScalerProgramMetadata = {\n  name: 'ImageScaler',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n};\n\nconst createImageScalerProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], attributes: ImageScalerAttributes):\n        ProgramInfo => {\n          const outputShape = inputs[0].dims.slice();\n          const rank = outputShape.length;\n          const getBiasMethod = createGetBiasMethod(attributes.bias.length);\n          const shaderSource = `\n      ${getBiasMethod}\n      float process(int indices[${rank}]) {\n        return _X(indices) * scale + getBias(bias, indices[1]);\n      }`;\n          return {\n            ...metadata,\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n            variables: [\n              {name: 'bias', type: 'float', arrayLength: attributes.bias.length, data: attributes.bias},\n              {name: 'scale', type: 'float', data: attributes.scale}\n            ],\n            shaderSource\n          };\n        };\n\nconst createImageScalerProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ImageScalerAttributes): ProgramInfoLoader => {\n      const metadata = {...imageScalerProgramMetadata, cacheHint: attributes.cacheKey};\n      return {...metadata, get: () => createImageScalerProgramInfo(handler, metadata, inputs, attributes)};\n    };\n\nconst createGetBiasMethod = (numChannels: number): string => {\n  const codeLines: string[] = [`float getBias(float bias[${numChannels}], int channel) {`];\n  for (let i = 0; i < numChannels; ++i) {\n    if (i === 0) {\n      codeLines.push(\n          '\\t' +\n          `if (channel == ${i}) { return bias[${i}]; }`);\n    } else if (i === numChannels - 1) {\n      codeLines.push(\n          '\\t' +\n          `else { return bias[${i}]; }`);\n    } else {\n      codeLines.push(\n          '\\t' +\n          `else if (channel == ${i}) { return bias[${i}]; }`);\n    }\n  }\n  codeLines.push(\n      '\\t' +\n      '}');\n  return codeLines.join('\\n');\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('ImageScaler requires 1 input.');\n  }\n  if (inputs[0].dims.length !== 4) {\n    throw new Error('Invalid input shape.');\n  }\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport const instanceNormalization: OperatorImplementation<number> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], epsilon: number): Tensor[] => {\n      validateInputs(inputs);\n\n      const meanAndVariance = inferenceHandler.run(createMeanAndVarianceProgramInfoLoader(inputs[0]), inputs);\n      const output = inferenceHandler.run(\n          createComputeOutputProgramInfoLoader(inferenceHandler, inputs[0], epsilon, meanAndVariance.dims),\n          [inputs[0], meanAndVariance, inputs[1], inputs[2]]);\n      return [output];\n    };\n\nexport const parseInstanceNormalizationAttributes: OperatorInitialization<number> = (node: Graph.Node): number =>\n    node.attributes.getFloat('epsilon', 1e-5);\n\nconst meanAndVarianceProgramMetadata = {\n  name: 'InstanceNormalization_MeanAndVariance',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n};\n\nconst createMeanAndVarianceProgramInfo = (metadata: ProgramMetadata, input: Tensor): ProgramInfo => {\n  const xDims = input.dims.slice();\n  const channel = xDims[1];\n  const channelSize = xDims[2] * xDims[3];\n  const outputShape = [xDims[0], channel];\n\n  const shaderSource = `\n      vec4 process(int[2] indices) {\n        vec4 v = vec4(0.0);\n        int a[4];\n        a[0] = indices[0];\n        a[1] = indices[1];\n        float temp = 0.0;\n        for(int a2=0; a2<${xDims[2]}; a2++) {\n          a[2] = a2;\n          for(int a3=0; a3<${xDims[3]}; a3++) {\n            a[3] = a3;\n            float x = _X(a);\n            temp += x;\n          }\n        }\n        float mean = temp / float(${channelSize});\n        temp = 0.0;\n        for(int a2=0; a2<${xDims[2]}; a2++) {\n          a[2] = a2;\n          for(int a3=0; a3<${xDims[3]}; a3++) {\n            a[3] = a3;\n            float x = _X(a);\n            temp += (x - mean) * (x - mean);\n          }\n        }\n        v.r = mean;\n        v.g = temp / float(${channelSize});\n\n        return v;\n      }`;\n  return {\n    ...metadata,\n    output: {dims: outputShape, type: input.type, textureType: TextureType.packedLastDimension},\n    shaderSource\n  };\n};\n\nconst createMeanAndVarianceProgramInfoLoader = (input: Tensor): ProgramInfoLoader => ({\n  ...meanAndVarianceProgramMetadata,\n  get: () => createMeanAndVarianceProgramInfo(meanAndVarianceProgramMetadata, input)\n});\n\nconst computeOutputProgramMetadata = {\n  name: 'InstanceNormalization_ComputeOutput',\n  inputNames: ['X', 'MeanAndVariance', 'Scale', 'B'],\n  inputTypes: [TextureType.unpacked, TextureType.packedLastDimension, TextureType.unpacked, TextureType.unpacked],\n};\n\nconst createComputeOutputProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, input: Tensor, epsilon: number,\n     meanAndVarianceShape: readonly number[]): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(meanAndVarianceShape, TextureType.packedLastDimension);\n      const [meanAndVarianceWidth, meanAndVarianceHeight] = [textureWidth / 4, textureHeight];\n      const shaderSource = `\n      vec4 get_MeanAndVariance(int[2] mv) {\n        int offset = indicesToOffset_MeanAndVariance(mv);\n        vec2 coords = offsetToCoords(offset, ${meanAndVarianceWidth}, ${meanAndVarianceHeight});\n        return ${glsl.texture2D}(MeanAndVariance, coords);\n      }\n\n      float process(int[4] indices) {\n        int mv[2];\n        mv[0] = indices[0];\n        mv[1] = indices[1];\n        vec4 mean_and_variance = get_MeanAndVariance(mv);\n        float mean = mean_and_variance.r;\n        float variance = mean_and_variance.g;\n\n        int sb[1];\n        sb[0] = indices[1];\n        float scale = _Scale(sb);\n        float b = _B(sb);\n\n        return scale * (_X(indices) - mean) / sqrt(variance + epsilon) + b;\n      }`;\n      return {\n        ...metadata,\n        output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\n        variables: [{name: 'epsilon', type: 'float', data: epsilon}],\n        shaderSource\n      };\n    };\n\nconst createComputeOutputProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, epsilon: number, meanAndVarianceShape: readonly number[]):\n        ProgramInfoLoader => {\n          const metadata = {...computeOutputProgramMetadata, cacheHint: `${epsilon}`};\n          return {\n            ...metadata,\n            get: () => createComputeOutputProgramInfo(inferenceHandler, metadata, input, epsilon, meanAndVarianceShape)\n          };\n        };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 3) {\n    throw new Error('InstanceNormalization requires 3 inputs.');\n  }\n\n  const X = inputs[0];\n  const scale = inputs[1];\n  const B = inputs[2];\n\n  // input should at least have three dimensions - N,C,dim1,...,dimn\n  // other inputs can have only one dimensions\n  if (X.dims.length < 3 || scale.dims.length !== 1 || B.dims.length !== 1) {\n    throw new Error('Invalid input shape.');\n  }\n  if (scale.dims[0] !== X.dims[1] || B.dims[0] !== X.dims[1]) {\n    throw new Error('Input shapes are mismatched.');\n  }\n  if ((X.type !== 'float32' && X.type !== 'float64') || (scale.type !== 'float32' && scale.type !== 'float64') ||\n      (B.type !== 'float32' && B.type !== 'float64')) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs[0].dims.length !== 4) {\n    throw new Error('Only support 4-D input shape.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\n\nexport interface LrnAttributes extends AttributeWithCacheKey {\n  alpha: number;\n  beta: number;\n  bias: number;\n  size: number;\n}\n\nexport const lrn: OperatorImplementation<LrnAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: LrnAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      // if (inferenceHandler.session.pack) {\n      //   return [inferenceHandler.run(createPackedLrnProgramInfoLoader(inferenceHandler, inputs, attributes),\n      //   inputs)];\n      // } else {\n      return [inferenceHandler.run(createLrnProgramInfoLoader(inputs, attributes), inputs)];\n      //}\n    };\n\nexport const parseLrnAttributes: OperatorInitialization<LrnAttributes> = (node: Graph.Node): LrnAttributes => {\n  const alpha = node.attributes.getFloat('alpha', 0.0001);\n  const beta = node.attributes.getFloat('beta', 0.75);\n  const bias = node.attributes.getFloat('bias', 1.0);\n  const size = node.attributes.getInt('size');\n\n  return createAttributeWithCacheKey({alpha, beta, bias, size});\n};\n\nconst lrnProgramMetadata = {\n  name: 'LRN',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked]\n};\n\nfunction createLrnProgramInfo(inputs: Tensor[], attributes: LrnAttributes): ProgramInfo {\n  const C = inputs[0].dims[1];\n  const rank = inputs[0].dims.length;\n  const from = -Math.floor((attributes.size - 1) / 2);\n  const to = Math.ceil((attributes.size - 1) / 2);\n  const alpha = `float(${attributes.alpha}) / float(${attributes.size})`;\n  const bias = `float(${attributes.bias})`;\n  const beta = `float(${attributes.beta})`;\n\n  const shaderSource = `\n    float process(int indices[${rank}]) {\n        int c = indices[1];\n        float x = _X(indices);\n        float square_sum = 0.0;\n\n        for (int i = ${from}; i <= ${to}; i++) {\n          int idx = c + i;\n          if (c >= 0 && c < ${C}) {\n            indices[1] = idx;\n            float j = _X(indices);\n            square_sum += j * j;\n          }\n        }\n        return x / pow(${bias} + ${alpha} * square_sum, ${beta});\n    }`;\n  return {\n    ...lrnProgramMetadata,\n    cacheHint: attributes.cacheKey,\n    output: {dims: inputs[0].dims, type: inputs[0].type, textureType: TextureType.unpacked},\n    shaderSource,\n  };\n}\n\nexport function createLrnProgramInfoLoader(inputs: Tensor[], attributes: LrnAttributes): ProgramInfoLoader {\n  return {...lrnProgramMetadata, cacheHint: attributes.cacheKey, get: () => createLrnProgramInfo(inputs, attributes)};\n}\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('LRN requires 1 input.');\n  }\n  if (inputs[0].dims.length !== 4) {\n    throw new Error('currently only support LRN for input with \"NCHW\" format');\n  }\n  if (inputs[0].type !== 'float32') {\n    throw new Error('input should be float type');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\nimport {getCoordsDataType, getGlChannels} from '../utils';\n\nimport {getActivationSnippet, InternalActivationAttributes} from './fuse-utils';\nimport {getBiasForMatmul} from './matmul';\n\nconst createPackedMatmulProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\n  name: 'MatMul (packed)',\n  inputNames: hasBias ? ['A', 'B', 'Bias'] : ['A', 'B'],\n  inputTypes: hasBias ? [TextureType.packed, TextureType.packed, TextureType.packed] :\n                        [TextureType.packed, TextureType.packed],\n  cacheHint\n});\n\nconst createPackedMatmulProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[],\n     activationAttributes: InternalActivationAttributes): ProgramInfo => {\n      const hasBias = inputs.length > 2;\n      const processBias = hasBias ? 'value += getBiasForMatmul();' : '';\n      const aShape = inputs[0].dims;\n      const bShape = inputs[1].dims;\n      const outputShape = BroadcastUtil.calcShape(aShape, bShape, true);\n      const isBroadcast = !ShapeUtil.areEqual(inputs[0].dims, inputs[1].dims);\n\n      if (!outputShape) {\n        throw new Error('Can\\'t use matmul on the given tensors');\n      }\n      const sharedDim = aShape[aShape.length - 1];\n      const sharedDimIndex = Math.ceil(sharedDim / 2);\n      const aRank = aShape.length;\n      const bRank = bShape.length;\n\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const coordsDataType = getCoordsDataType(outputShape.length);\n      const outRank = outputShape.length;\n      const allGlChannels = getGlChannels();\n      const {activationFunction, applyActivation} = getActivationSnippet(activationAttributes);\n\n      const getBiasForMatmulSnippet =\n          hasBias ? `${getBiasForMatmul(coordsDataType, allGlChannels, inputs[2].dims, outputShape, true)}` : '';\n\n      const getBcastedSamplerForMatmulSnippet =\n          isBroadcast ? `${getBcastSamplerForMatmul(coordsDataType, allGlChannels, inputs, outputShape)}` : '';\n\n      const getSamplerAInLoopSnippet = isBroadcast ? 'getAAtOutCoordsMatmul(i)' : `getA(${getA(allGlChannels, aRank)})`;\n      const getSamplerBInLoopSnippet = isBroadcast ? 'getBAtOutCoordsMatmul(i)' : `getB(${getB(allGlChannels, bRank)})`;\n      const getOutputCoordsSnippet = isBroadcast ? '' : `${coordsDataType} rc =\n          getOutputCoords(); int lastDim = rc.${allGlChannels[outRank - 1]}; rc.${allGlChannels[outRank - 1]} =\n          rc.${allGlChannels[outRank - 2]}; rc.${allGlChannels[outRank - 2]} = lastDim;\n      `;\n      const shaderSource = `\n            ${getBcastedSamplerForMatmulSnippet}\n            ${getBiasForMatmulSnippet}\n            ${activationFunction}\n            void main() {\n              ${getOutputCoordsSnippet}\n\n              vec4 value = vec4(0);\n              for (int i = 0; i < ${sharedDimIndex}; i++) {\n                vec4 a = ${getSamplerAInLoopSnippet};\n                vec4 b = ${getSamplerBInLoopSnippet};\n\n                value += (a.rrbb * b.rgrg);\n                value += (a.ggaa * b.baba);\n              }\n              ${processBias}\n              ${applyActivation}\n              ${glsl.output} = value;\n            }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n        shaderSource,\n        hasMain: true\n      };\n    };\n\nexport const createPackedMatmulProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[],\n     activationAttributes: InternalActivationAttributes): ProgramInfoLoader => {\n      const metadata = createPackedMatmulProgramMetadata(inputs.length > 2, activationAttributes.activationCacheKey);\n      return {\n        ...metadata,\n        get: () => createPackedMatmulProgramInfo(inferenceHandler, metadata, inputs, activationAttributes)\n      };\n    };\n\nfunction getBcastSamplerForMatmul(\n    coordsDataType: string, allGlChannels: readonly string[], inputs: Tensor[], outShape: readonly number[]): string {\n  let unpackedACoordsSnippet = [];\n  let unpackedBCoordsSnippet = [];\n\n  const inAShape = inputs[0].dims;\n  const inBShape = inputs[1].dims;\n\n  const inARank = inAShape.length;\n  const inBRank = inBShape.length;\n\n  const outRank = outShape.length;\n  const rankADiff = outRank - inARank;\n  const rankBDiff = outRank - inBRank;\n\n  unpackedACoordsSnippet = inAShape.map((s, i) => `coords.${allGlChannels[i + rankADiff]}`);\n  unpackedACoordsSnippet[inARank - 1] = 'i*2';\n  unpackedACoordsSnippet.join(', ');\n  unpackedBCoordsSnippet = inBShape.map((s, i) => `coords.${allGlChannels[i + rankBDiff]}`);\n  unpackedBCoordsSnippet[inBRank - 2] = 'i*2';\n  unpackedBCoordsSnippet.join(', ');\n\n  const broadcastADims = BroadcastUtil.getBroadcastDims(inAShape, outShape);\n  const broadcastBDims = BroadcastUtil.getBroadcastDims(inBShape, outShape);\n\n  const coordsASnippet = broadcastADims.map(d => `coords.${allGlChannels[d + rankADiff]} = 0;`).join('\\n');\n  const coordsBSnippet = broadcastBDims.map(d => `coords.${allGlChannels[d + rankBDiff]} = 0;`).join('\\n');\n  const swapDimSnippet = `int lastDim = coords.${allGlChannels[outRank - 1]};\n  coords.${allGlChannels[outRank - 1]} = coords.${allGlChannels[outRank - 2]};\n  coords.${allGlChannels[outRank - 2]} = lastDim;`;\n\n  const getBcastSamplerMatmulSource = `\nvec4 getAAtOutCoordsMatmul(int i) {\n  ${coordsDataType} coords = getOutputCoords();\n  ${swapDimSnippet}\n  ${coordsASnippet}\n  vec4 outputValue = getA(${unpackedACoordsSnippet});\n  return outputValue;\n}\n\nvec4 getBAtOutCoordsMatmul(int i) {\n  ${coordsDataType} coords = getOutputCoords();\n  ${swapDimSnippet}\n  ${coordsBSnippet}\n  vec4 outputValue = getB(${unpackedBCoordsSnippet});\n  return outputValue;\n}`;\n\n  return getBcastSamplerMatmulSource;\n}\n\nfunction getA(allGlChannels: string[], rank: number): string {\n  let res = '';\n  for (let i = 0; i < rank - 2; i++) {\n    res += `rc.${allGlChannels[i]}, `;\n  }\n  res += `rc.${allGlChannels[rank - 2]}, ` +\n      'i*2';\n  return res;\n}\n\nfunction getB(allGlChannels: string[], rank: number): string {\n  let res = '';\n  for (let i = 0; i < rank - 2; i++) {\n    res += `rc.${allGlChannels[i]}, `;\n  }\n  res += 'i*2, ' +\n      `rc.${allGlChannels[rank - 1]}`;\n  return res;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\nimport {getCoordsDataType, getGlChannels} from '../utils';\n\nimport {getActivationSnippet, InternalActivationAttributes, parseInternalActivationAttributes} from './fuse-utils';\nimport {createPackedMatmulProgramInfoLoader} from './matmul-pack';\n\nexport const matMul: OperatorImplementation<InternalActivationAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: InternalActivationAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      if (inferenceHandler.session.pack) {\n        return [inferenceHandler.run(\n            createPackedMatmulProgramInfoLoader(inferenceHandler, inputs, attributes), inputs)];\n      } else {\n        return [inferenceHandler.run(createMatmulProgramInfoLoader(inputs, attributes), inputs)];\n      }\n    };\n\nexport const parseMatMulAttributes: OperatorInitialization<InternalActivationAttributes> =\n    (node: Graph.Node): InternalActivationAttributes => parseInternalActivationAttributes(node.attributes);\n\nconst createMatmulProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\n  name: 'MatMul',\n  inputNames: hasBias ? ['A', 'B', 'Bias'] : ['A', 'B'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.unpacked],\n  cacheHint\n});\n\nfunction createMatmulProgramInfo(\n    metadata: ProgramMetadata, inputs: Tensor[], activationAttributes: InternalActivationAttributes): ProgramInfo {\n  const aShape = inputs[0].dims;\n  const bShape = inputs[1].dims;\n  const outputShape = BroadcastUtil.calcShape(aShape, bShape, true);\n  if (!outputShape) {\n    throw new Error('Can\\'t use matmul on the given tensors');\n  }\n  const coordsDataType = getCoordsDataType(outputShape.length);\n  const allGlChannels = getGlChannels();\n  const {activationFunction, applyActivation} = getActivationSnippet(activationAttributes);\n\n  const hasBias = inputs.length > 2;\n  const processBias = hasBias ? 'value += getBiasForMatmul();' : '';\n  const getBiasForMatmulSnippet =\n      hasBias ? `${getBiasForMatmul(coordsDataType, allGlChannels, inputs[2].dims, outputShape, false)}` : '';\n\n  const rank = outputShape.length;\n  const arank = aShape.length;\n  const brank = bShape.length;\n  const sharedDim = aShape[aShape.length - 1];\n  const shaderSource = `\n    ${activationFunction}\n    ${getBiasForMatmulSnippet}\n    float process(int indices[${rank}]) {\n        int a[${arank}];\n        int b[${brank}];\n        bcastMatmulIndices_A(indices, a);\n        bcastMatmulIndices_B(indices, b);\n\n        float value;\n        for (int k=0; k<${sharedDim}; ++k) {\n            a[${arank - 1}] = k;\n            b[${brank - 2}] = k;\n            value += _A(a) * _B(b);\n        }\n        ${processBias}\n        ${applyActivation}\n        return value;\n    }`;\n  return {\n    ...metadata,\n    output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n    shaderSource,\n  };\n}\n\nexport function createMatmulProgramInfoLoader(\n    inputs: Tensor[], activationAttributes: InternalActivationAttributes): ProgramInfoLoader {\n  const metadata = createMatmulProgramMetadata(inputs.length > 2, activationAttributes.activationCacheKey);\n  return {...metadata, get: () => createMatmulProgramInfo(metadata, inputs, activationAttributes)};\n}\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('MatMul requires 2 inputs.');\n  }\n\n  if (inputs[0].dims[inputs[0].dims.length - 1] !== inputs[1].dims[inputs[1].dims.length - 2]) {\n    throw new Error('shared dimension does not match.');\n  }\n\n  if ((inputs[0].type !== 'float32' && inputs[0].type !== 'float64') ||\n      (inputs[1].type !== 'float32' && inputs[1].type !== 'float64')) {\n    throw new Error('inputs should be float type');\n  }\n\n  if (inputs[0].type !== inputs[1].type) {\n    throw new Error('inputs types should match');\n  }\n};\n\nexport function getBiasForMatmul(\n    coordsDataType: string, allGlChannels: readonly string[], inShape: readonly number[], outShape: readonly number[],\n    isPacked: boolean): string {\n  let unpackedCoordsSnippet = '';\n  const inRank = inShape.length;\n  const outRank = outShape.length;\n  const rankDiff = outRank - inRank;\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inShape.map((s, i) => `coords.${allGlChannels[i + rankDiff]}`).join(', ');\n  }\n  const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\n  const coordsSnippet = broadcastDims.map(d => `coords.${allGlChannels[d + rankDiff]} = 0;`).join('\\n');\n  const inSize = ShapeUtil.size(inShape);\n  const isInputScalar = inSize === 1;\n  let output = 'vec4(outputValue.xx, outputValue.yy)';\n  if (isInputScalar) {\n    output = 'vec4(outputValue.x)';\n  }\n  const getBiasForMatmulSource = isPacked ? `\nvec4 getBiasForMatmul() {\n  ${coordsDataType} coords = getOutputCoords();\n  ${coordsSnippet}\n  vec4 outputValue = getBias(${unpackedCoordsSnippet});\n  return ${output};\n}` :\n                                            `\nfloat getBiasForMatmul() {\n  ${coordsDataType} coords = getOutputCoords();\n  ${coordsSnippet}\n  return getBias(coords.x);\n}`;\n\n  return getBiasForMatmulSource;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\nimport {getCoordsDataType} from '../utils';\n\nimport {getChannels} from './packing-utils';\n\nconst packProgramMetadata = {\n  name: 'pack',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpackedReversed]\n};\n\nconst createPackProgramInfo = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfo => {\n  const glsl = getGlsl(handler.session.backend.glContext.version);\n  const inputShape = input.dims;\n\n  const inputRank = inputShape.length;\n  // createTextureLayoutFromShape won't change output rank. Need to verify by running tests\n  const outputRank = input.dims.length;\n\n  const coordsDataType = getCoordsDataType(outputRank);\n  const channels = getChannels('rc', outputRank);\n  const setup = getSetup(outputRank, channels, inputShape[inputShape.length - 2], inputShape[inputShape.length - 1]);\n\n  let reversedInputWH;\n  if (inputRank === 0) {\n    reversedInputWH = [1, 1];\n  } else if (inputRank === 1) {\n    reversedInputWH = [inputShape[0], 1];\n  } else {\n    reversedInputWH = [inputShape[outputRank - 1], inputShape[outputRank - 2]];\n  }\n  const outOfBoundsCondition = getOutOfBoundsCondition(outputRank, reversedInputWH, channels);\n  const output = getOutput(inputShape, channels);\n\n  const shaderSource = `\n        void main() {\n          ${coordsDataType} rc = getOutputCoords();\n\n          if(${outOfBoundsCondition}) {\n            ${glsl.output} = vec4(0);\n          } else {\n            ${setup}\n\n            ${glsl.output} = vec4(${output});\n          }\n        }\n      `;\n  return {\n    ...packProgramMetadata,\n    hasMain: true,\n    output: {dims: input.dims, type: input.type, textureType: TextureType.packed},\n    shaderSource\n  };\n};\n\nexport const createPackProgramInfoLoader = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfoLoader =>\n    ({...packProgramMetadata, get: () => createPackProgramInfo(handler, input)});\n\n/**\n * check output coordinate location and return false if it is outside input's width/height boundary\n */\nfunction getOutOfBoundsCondition(rank: number, shape: readonly number[], dims: string[]): string {\n  if (rank === 0) {\n    return 'false';\n  }\n  if (rank === 1) {\n    return `rc > ${shape[0]}`;\n  }\n\n  let cond = '';\n  for (let i = rank - 2; i < rank; i++) {\n    cond += `${dims[i]} >= ${shape[i - rank + 2]}`;\n    if (i < rank - 1) {\n      cond += '||';\n    }\n  }\n\n  return cond;\n}\n\n/**\n * code snippet to sample input texture with output coordiantes\n */\nfunction getOutput(shape: readonly number[], dims: string[]): string {\n  const rank = shape.length;\n\n  if (rank === 0) {\n    return 'getA(), 0, 0, 0';\n  }\n\n  if (rank === 1) {\n    return `getA(rc),\n            rc + 1 >= ${shape[0]} ? 0. : getA(rc + 1),\n            0, 0`;\n  }\n\n  const coord00 = 'r, c';\n  const coord01 = 'r, cp1';\n  const coord10 = 'rp1, c';\n  const coord11 = 'rp1, cp1';\n  let D = '';\n  if (rank > 2) {\n    for (let i = 0; i < rank - 2; ++i) {\n      D = D + `${dims[i]},`;\n    }\n  }\n  return `getA(${D}${coord00}),\n          rEdge ? 0. : getA(${D}${coord10}),\n          cEdge ? 0. : getA(${D}${coord01}),\n          rEdge || cEdge ? 0. : getA(${D}${coord11})`;\n}\n\n/**\n * code snippet to setup 4 coordinates and edge conditions\n */\nfunction getSetup(rank: number, dims: string[], rows: number, cols: number): string {\n  if (rank === 0 || rank === 1) {\n    return '';\n  }\n  // rank >= 2 for width+height pack.\n  else {\n    const setup = `\n    int r = ${dims[rank - 2]};\n    int c = ${dims[rank - 1]};\n    int rp1 = ${dims[rank - 2]} + 1;\n    int cp1 = ${dims[rank - 1]} + 1;\n    bool rEdge = rp1 >= ${cols};\n    bool cEdge = cp1 >= ${rows};\n    `;\n    return setup;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {getGlChannels} from '../utils';\n\nexport function getVecChannels(name: string, rank: number): string[] {\n  return getGlChannels(rank).map(d => `${name}.${d}`);\n}\n\nexport function getChannels(name: string, rank: number): string[] {\n  if (rank === 1) {\n    return [name];\n  }\n  return getVecChannels(name, rank);\n}\n\nexport function unpackFromChannel(): string {\n  return `\n    float getChannel(vec4 frag, int dim) {\n      int modCoord = imod(dim, 2);\n      return modCoord == 0 ? frag.r : frag.g;\n    }\n\n    float getChannel(vec4 frag, vec2 innerDims) {\n      vec2 modCoord = mod(innerDims, 2.);\n      return modCoord.x == 0. ?\n        (modCoord.y == 0. ? frag.r : frag.g) :\n        (modCoord.y == 0. ? frag.b : frag.a);\n    }\n  `;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl, Glsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface PadAttributes extends AttributeWithCacheKey {\n  readonly mode: string;\n  readonly pads: number[];\n  readonly value: number;\n}\n\nconst padProgramMetadata = {\n  name: 'Pad',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked],\n};\n\nexport const padV2: OperatorImplementation<PadAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: PadAttributes): Tensor[] => {\n      validateInputsV2(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...padProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createPadProgramInfo(inferenceHandler, inputs[0], attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parsePadAttributesV2: OperatorInitialization<PadAttributes> = (node: Graph.Node): PadAttributes => {\n  const mode = node.attributes.getString('mode', 'constant');\n  const value = node.attributes.getFloat('value', 0.0);\n  const pads = node.attributes.getInts('pads');\n  return createAttributeWithCacheKey({mode, value, pads});\n};\n\nexport const padV11: OperatorImplementation<string> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], mode: string): Tensor[] => {\n      validateInputsV11(inputs);\n      const attrubutes = generatePadAttributesFromInputs(inferenceHandler, inputs, mode);\n      return padV2(inferenceHandler, [inputs[0]], attrubutes);\n    };\n\nexport const parsePadAttributesV11: OperatorInitialization<string> = (node: Graph.Node): string =>\n    node.attributes.getString('mode', 'constant');\n\nconst generatePadAttributesFromInputs =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], mode: string): PadAttributes => {\n      if (!inferenceHandler.session.isInitializer(inputs[1].dataId) ||\n          (inputs.length >= 3 && !inferenceHandler.session.isInitializer(inputs[2].dataId))) {\n        throw new Error('dynamic pad attributes are not allowed');\n      }\n\n      const pads = Array.from(inputs[1].integerData);\n      const value = (inputs.length >= 3) ? inputs[2].floatData[0] : 0.0;\n\n      return createAttributeWithCacheKey({mode, pads, value});\n    };\n\nconst createPadProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: PadAttributes): ProgramInfo => {\n      const outputShape = ShapeUtil.padShape(input.dims.slice(), attributes.pads);\n      const rank = outputShape.length;\n      const padFunction = getPadFunction(inferenceHandler, input, attributes);\n      const shaderSource = `\n      ${padFunction}\n      float process(int[${rank}] indices) {\n          return padA(indices);\n      }`;\n      return {\n        name: 'Pad',\n        inputNames: ['A'],\n        inputTypes: [TextureType.unpacked],\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputsV2 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Pad requires 1 input');\n  }\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n};\n\nconst validateInputsV11 = (inputs: Tensor[]): void => {\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Pad requires 2 or 3 inputs');\n  }\n  if (inputs[1].type !== 'int32') {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs.length >= 3 && inputs[2].type === 'string') {\n    throw new Error('Invalid input type.');\n  }\n};\n\nconst getPadFunction = (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: PadAttributes): string => {\n  const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n  const [width, height] = inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n  const strides = ShapeUtil.computeStrides(input.dims);\n\n  switch (attributes.mode) {\n    case 'constant':\n      return getPadConstant(glsl, input.dims, strides, width, height, attributes.pads, attributes.value);\n    case 'reflect':\n      return getPadReflect(glsl, input.dims, strides, width, height, attributes.pads);\n    case 'edge':\n      return getPadEdge(glsl, input.dims, strides, width, height, attributes.pads);\n    default:\n      throw new Error('Invalid mode');\n  }\n};\n\nconst getPadConstant =\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[],\n     value: number): string => {\n      const rank = shape.length;\n      let block = '';\n      for (let i = rank - 1; i >= 0; --i) {\n        block += `\n        k = m[${i}] - ${pads[i]};\n        if (k < 0)  return constant;\n        if (k >= ${shape[i]}) return constant;\n        offset += k * ${strides[i]};\n        `;\n      }\n      return `\n      float padA(int m[${rank}]) {\n        const float constant = float(${value});\n        int offset = 0;\n        int k = 0;\n        ${block}\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\n        return value;\n      }\n      `;\n    };\n\nconst getPadReflect =\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[]):\n        string => {\n          const rank = shape.length;\n\n          let block = '';\n          for (let i = rank - 1; i >= 0; --i) {\n            block += `\n        k = m[${i}] - ${pads[i]};\n        if (k < 0) { k = -k; }\n        {\n          const int _2n_1 = ${2 * (shape[i] - 1)};\n          k = int( mod( float(k), float(_2n_1) ) ) ;\n          if(k >= ${shape[i]}) { k = _2n_1 - k; }\n        }\n        offset += k * ${strides[i]};\n        `;\n          }\n          return `\n      float padA(int m[${rank}]) {\n        int offset = 0;\n        int k = 0;\n        ${block}\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\n        return value;\n      }\n      `;\n        };\n\nconst getPadEdge =\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[]):\n        string => {\n          const rank = shape.length;\n\n          let block = '';\n          for (let i = rank - 1; i >= 0; --i) {\n            block += `\n        k = m[${i}] - ${pads[i]};\n        if (k < 0)  k = 0;\n        if (k >= ${shape[i]}) k = ${shape[i] - 1};\n        offset += k * ${strides[i]};\n      `;\n          }\n          return `\n      float padA(int m[${rank}]) {\n        int offset = 0;\n        int k = 0;\n        ${block}\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\n        return value;\n      }\n      `;\n        };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {PoolConvUtil, ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport interface AveragePoolAttributes extends AttributeWithCacheKey {\n  readonly autoPad: string;\n  readonly ceilMode: number;\n  readonly countIncludePad: boolean;\n  readonly kernelShape: readonly number[];\n  readonly strides: readonly number[];\n  readonly pads: readonly number[];\n}\n\nexport const averagePool: OperatorImplementation<AveragePoolAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: AveragePoolAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const metadata =\n          {name: 'AveragePool', inputNames: ['X'], inputTypes: [TextureType.unpacked], cacheHint: attributes.cacheKey};\n      const output = inferenceHandler.run(\n          {...metadata, get: () => createAveragePoolProgramInfo(inputs, metadata, false, attributes)}, inputs);\n      return [output];\n    };\n\nexport const parseAveragePoolAttributes: OperatorInitialization<AveragePoolAttributes> =\n    (node: Graph.Node): AveragePoolAttributes => {\n      const autoPad = node.attributes.getString('auto_pad', 'NOTSET');\n      const ceilMode = node.attributes.getInt('ceil_mode', 0);\n      const countIncludePad = (node.attributes.getInt('count_include_pad', 0) === 0 ? false : true);\n      const kernelShape = node.attributes.getInts('kernel_shape');\n      const strides = node.attributes.getInts('strides', []);\n      const pads = node.attributes.getInts('pads', []);\n\n      // TODO: support attribute 'ceil_mode'\n      if (ceilMode !== 0) {\n        throw new Error('using ceil() in shape computation is not yet supported for AveragePool');\n      }\n\n      return createAttributeWithCacheKey({autoPad, ceilMode, countIncludePad, kernelShape, strides, pads});\n    };\n\nconst createAveragePoolProgramInfo =\n    (inputs: Tensor[], metadata: ProgramMetadata, isGlobalOperator: boolean, attributes: AveragePoolAttributes):\n        ProgramInfo => {\n          const [adjustedAttributes, outputShape] =\n              getAdjustedPoolAttributesAndOutputShape(inputs, attributes, isGlobalOperator);\n          const kernelSize = ShapeUtil.size(adjustedAttributes.kernelShape);\n          const op1 = 'value += _X(x);';\n          let op2 = '';\n          if (adjustedAttributes.countIncludePad) {\n            op2 += `value /= float(${kernelSize});`;\n          } else {\n            op2 += `value /= float(${kernelSize} - pad);`;\n          }\n          const poolingCode = generatePoolingCode(inputs[0].dims, adjustedAttributes, op1, op2, '0.0');\n          const shaderSource = `\n        ${poolingCode}\n      `;\n          return {\n            ...metadata,\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nexport const globalAveragePool: OperatorImplementation<AveragePoolAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: AveragePoolAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const metadata = {\n        name: 'GlobalAveragePool',\n        inputNames: ['X'],\n        inputTypes: [TextureType.unpacked],\n        cacheHint: `${attributes.countIncludePad}`\n      };\n      const output = inferenceHandler.run(\n          {...metadata, get: () => createAveragePoolProgramInfo(inputs, metadata, true, attributes)}, inputs);\n      return [output];\n    };\n\nexport const parseGlobalAveragePoolAttributes: OperatorInitialization<AveragePoolAttributes> =\n    (node: Graph.Node): AveragePoolAttributes => {\n      const countIncludePad = (node.attributes.getInt('count_include_pad', 0) === 0 ? false : true);\n      return createAttributeWithCacheKey(\n          {autoPad: '', ceilMode: 0, countIncludePad, kernelShape: [], strides: [], pads: []});\n    };\n\nexport interface MaxPoolAttributes extends AveragePoolAttributes {\n  readonly storageOrder: number;\n  readonly dilations: number[];\n}\n\nexport const maxPool: OperatorImplementation<MaxPoolAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: MaxPoolAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const metadata =\n          {name: 'MaxPool', inputNames: ['X'], inputTypes: [TextureType.unpacked], cacheHint: attributes.cacheKey};\n      const output = inferenceHandler.run(\n          {...metadata, get: () => createMaxPoolProgramInfo(inputs, metadata, false, attributes)}, inputs);\n      return [output];\n    };\n\nexport const parseMaxPoolAttributes: OperatorInitialization<MaxPoolAttributes> =\n    (node: Graph.Node): MaxPoolAttributes => {\n      const autoPad = node.attributes.getString('auto_pad', 'NOTSET');\n      const ceilMode = node.attributes.getInt('ceil_mode', 0);\n      const kernelShape = node.attributes.getInts('kernel_shape');\n      const strides = node.attributes.getInts('strides', []);\n      const pads = node.attributes.getInts('pads', []);\n      const storageOrder = node.attributes.getInt('storage_order', 0);\n      const dilations = node.attributes.getInts('dilations', []);\n\n      // TODO: support attribute 'ceil_mode' and 'storage_order'\n      if (storageOrder !== 0) {\n        throw new Error('column major storage order is not yet supported for MaxPool');\n      }\n      if (ceilMode !== 0) {\n        throw new Error('using ceil() in shape computation is not yet supported for MaxPool');\n      }\n\n      return createAttributeWithCacheKey(\n          {autoPad, ceilMode, countIncludePad: false, kernelShape, strides, pads, storageOrder, dilations});\n    };\n\nconst createMaxPoolProgramInfo =\n    (inputs: Tensor[], metadata: ProgramMetadata, isGlobalOperator: boolean, attributes: MaxPoolAttributes):\n        ProgramInfo => {\n          const [adjustedAttributes, outputShape] =\n              getAdjustedPoolAttributesAndOutputShape(inputs, attributes, isGlobalOperator);\n          const op1 = `\n      value = max(_X(x), value);\n    `;\n          const op2 = '';\n          const poolingCode = generatePoolingCode(inputs[0].dims, adjustedAttributes, op1, op2, '-1e5');\n          const shaderSource = `\n      ${poolingCode}\n    `;\n          return {\n            ...metadata,\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nconst getAdjustedPoolAttributesAndOutputShape =\n    (inputs: Tensor[], attributes: AveragePoolAttributes|MaxPoolAttributes, isGlobalOperator: boolean):\n        [AveragePoolAttributes|MaxPoolAttributes, number[]] => {\n          const inputShape = inputs[0].dims.slice();\n          const hasDilations = Object.hasOwnProperty.call(attributes, 'dilations');\n          const kernelShape = attributes.kernelShape.slice();\n          const strides = attributes.strides.slice();\n          const dilations: number[] = hasDilations ? (attributes as MaxPoolAttributes).dilations.slice() : [];\n          const pads = attributes.pads.slice();\n          PoolConvUtil.adjustPoolAttributes(isGlobalOperator, inputShape, kernelShape, strides, dilations, pads);\n\n          const outputShape = PoolConvUtil.computePoolOutputShape(\n              isGlobalOperator, inputShape, strides, dilations, kernelShape, pads, attributes.autoPad);\n\n          const newAttributes = Object.assign({}, attributes);\n          if (hasDilations) {\n            Object.assign(newAttributes, {kernelShape, strides, pads, dilations, cacheKey: attributes.cacheKey});\n          } else {\n            Object.assign(newAttributes, {kernelShape, strides, pads, cacheKey: attributes.cacheKey});\n          }\n          return [newAttributes, outputShape];\n        };\n\nconst globalMaxPoolAttributes = {\n  autoPad: '',\n  ceilMode: 0,\n  countIncludePad: false,\n  kernelShape: [],\n  strides: [],\n  pads: [],\n  storageOrder: 0,\n  dilations: [],\n  cacheKey: ''\n};\n\nconst globalMaxPoolMetadata = {\n  name: 'GlobalMaxPool',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked]\n};\n\nexport const globalMaxPool = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n  const output = inferenceHandler.run(\n      {\n        ...globalMaxPoolMetadata,\n        get: () => createMaxPoolProgramInfo(inputs, globalMaxPoolMetadata, true, globalMaxPoolAttributes)\n      },\n      inputs);\n  return [output];\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Pool ops requires 1 input.');\n  }\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n};\n\nconst generatePoolingCode =\n    (inputDims: readonly number[], attributes: AveragePoolAttributes, op1: string, op2: string, start: string):\n        string => {\n          const rank = inputDims.length;\n          if (attributes.kernelShape.length <= 2) {\n            const kw = attributes.kernelShape[attributes.kernelShape.length - 1];\n            const sw = attributes.strides[attributes.strides.length - 1];\n            const pwStart = attributes.pads[attributes.pads.length / 2 - 1];\n            const pwEnd = attributes.pads[attributes.pads.length - 1];\n            const dimW = inputDims[rank - 1];\n            let codeW = '';\n            let codeH = '';\n            let codeHEnd = '';\n            if (pwStart + pwEnd !== 0) {\n              codeW = `\n          for (int i = 0; i < ${kw}; i++) {\n            x[${rank} - 1] = indices[${rank} - 1] * ${sw} - ${pwStart} + i;\n            if (x[${rank} - 1] < 0 || x[${rank} - 1] >= ${dimW}) {\n              pad++;\n              continue;\n            }\n            ${op1}\n          }`;\n            } else {\n              codeW = `\n          for (int i = 0; i < ${kw}; i++) {\n            x[${rank} - 1] = indices[${rank} - 1] * ${sw} - ${pwStart} + i;\n            ${op1}\n          }`;\n            }\n\n            if (attributes.kernelShape.length === 2) {\n              const kh = attributes.kernelShape[attributes.kernelShape.length - 2];\n              const sh = attributes.strides[attributes.strides.length - 2];\n              const phStart = attributes.pads[attributes.pads.length / 2 - 2];\n              const phEnd = attributes.pads[attributes.pads.length - 2];\n              const dimH = inputDims[rank - 2];\n              if (phStart + phEnd !== 0) {\n                codeH = `\n            for (int j = 0; j < ${kh}; j++) {\n              x[${rank} - 2] = indices[${rank} - 2] * ${sh} - ${phStart} + j;\n              if (x[${rank} - 2] < 0 || x[${rank} - 2] >= ${dimH}) {\n                pad+= ${kw};\n                continue;\n              }\n          `;\n              } else {\n                codeH = `\n            for (int j = 0; j < ${kh}; j++) {\n              x[${rank} - 2] = indices[${rank} - 2] * ${sh} - ${phStart} + j;\n            `;\n              }\n              codeHEnd = `\n          }\n        `;\n            }\n\n            const poolingCode = `\n        float process(int indices[${rank}]) {\n          int x[${rank}];\n          copyVec(indices, x);\n\n          float value = ${start};\n          int pad = 0;\n          ${codeH}\n          ${codeW}\n          ${codeHEnd}\n          ${op2}\n          return value;\n        }\n      `;\n            return poolingCode;\n          } else {\n            const kernelSize = ShapeUtil.size(attributes.kernelShape);\n            const kernelStrides = ShapeUtil.computeStrides(attributes.kernelShape);\n            const stridesRank = kernelStrides.length;\n            const padsRank = attributes.pads.length;\n            const offsetToIndicesFunction = offsetToIndices(stridesRank);\n            const copyInputDims = copyArray(inputDims, 'inputDims');\n            const copyPads = copyArray(attributes.pads, 'pads');\n            const copyKernelStrides = copyArray(kernelStrides, 'kernelStrides');\n            const copyStrides = copyArray(attributes.strides, 'strides');\n            const hasPads = attributes.pads.reduce((sum, cur) => sum + cur);\n            let padCode = '';\n            if (hasPads) {\n              padCode = `\n            if (x[j] >= inputDims[j] || x[j] < 0) {\n              pad++;\n              isPad = true;\n              break;\n            }\n          }\n          if (!isPad) {\n            ${op1}\n          }`;\n            } else {\n              padCode = `\n          }\n          ${op1}\n        `;\n            }\n            const poolingCode = `\n        ${offsetToIndicesFunction}\n        float process(int indices[${rank}]) {\n          int x[${rank}];\n          copyVec(indices, x);\n          int offset[${stridesRank}];\n          int pads[${padsRank}];\n          int inputDims[${rank}];\n          int kernelStrides[${stridesRank}];\n          int strides[${stridesRank}];\n          ${copyPads}\n          ${copyInputDims}\n          ${copyStrides}\n          ${copyKernelStrides}\n\n          float value = ${start};\n          int pad = 0;\n          bool isPad = false;\n          for (int i = 0; i < ${kernelSize}; i++) {\n            offsetToIndices(i, kernelStrides, offset);\n            isPad = false;\n            for (int j = ${rank} - ${stridesRank}; j < ${rank}; j++) {\n              x[j] = indices[j] * strides[j - ${rank} + ${stridesRank}]\n                + offset[j - ${rank} + ${stridesRank}] - pads[j - 2];\n              ${padCode}\n          }\n          ${op2}\n\n          return value;\n        }\n      `;\n            return poolingCode;\n          }\n        };\n\nconst copyArray = (array: readonly number[], arrayName: string): string => {\n  let block = '';\n  for (let i = 0; i < array.length; i++) {\n    block += `\n      ${arrayName}[${i}] = ${array[i]};\n    `;\n  }\n  return block;\n};\n\nconst offsetToIndices = (rank: number): string => `\n  void offsetToIndices(int offset, int[${rank}] strides, out int[${rank}] indices) {\n    if (${rank} == 0) {\n      return;\n    }\n    for (int i = 0; i < ${rank} - 1; ++i) {\n      indices[i] = offset / strides[i];\n      offset -= indices[i] * strides[i];\n    }\n    indices[${rank} - 1] = offset;\n  }`;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport interface ReduceAttributes extends AttributeWithCacheKey {\n  readonly axes: number[];\n  readonly keepDims: boolean;\n}\n\n// return [init ops, reduce ops, final ops]\ntype ReduceOp = (inputs: Tensor[], axes: number[]) => string[];\n\nconst reduce =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes, name: string,\n     reduceOp: ReduceOp): Tensor[] => {\n      validateInputs(inputs);\n\n      const reduceProgramMetadata = {\n        name,\n        inputNames: ['A'],\n        inputTypes: [TextureType.unpacked],\n      };\n\n      const output = inferenceHandler.run(\n          {\n            ...reduceProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () =>\n                createReduceProgramInfo(inferenceHandler, inputs, attributes, name, reduceOp, reduceProgramMetadata)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseReduceAttributes: OperatorInitialization<ReduceAttributes> = (node: Graph.Node): ReduceAttributes => {\n  const axes = node.attributes.getInts('axes', []);\n  const keepDims = node.attributes.getInt('keepdims', 1) === 1;\n  return createAttributeWithCacheKey({axes, keepDims});\n};\n\nconst createReduceProgramInfo =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes, name: string, reduceOp: ReduceOp,\n     reduceProgramMetadata: ProgramMetadata): ProgramInfo => {\n      const outputShape: number[] = [];\n      const iRank = inputs[0].dims.length || 1;\n\n      const idxCopy = [];  // copy output indexes to input indexes\n\n      const axes = ShapeUtil.normalizeAxes(attributes.axes, inputs[0].dims.length);\n      const ops = reduceOp(inputs, axes);\n      let reduceOps = ops[1];\n\n      for (let k = 0; k < inputs[0].dims.length; k++) {\n        // if this axis is reduced\n        if (axes.indexOf(k) >= 0 || axes.length === 0) {\n          if (attributes.keepDims) {\n            outputShape.push(1);\n          }  // else { remove the axis from outputShape; }\n\n          // loop over the d-th axis\n          reduceOps = `\n          for(int j${k} = 0; j${k} < ${inputs[0].dims[k]}; j${k}++) {\n            inputIdx[${k}] = j${k};\n            ${reduceOps}\n          }`;\n        } else {\n          idxCopy.push(`inputIdx[${k}] = outputIdx[${outputShape.length}];`);\n\n          outputShape.push(inputs[0].dims[k]);\n        }\n      }\n\n      const oRank = outputShape.length || 1;\n\n      const shaderSource = `\n      float process(int outputIdx[${oRank}]) {\n        float value;                 // final result\n        int inputIdx[${iRank}];      // addressing input data\n        ${idxCopy.join('\\n')}\n        ${ops[0]}       // init ops for reduce max/min\n        ${reduceOps}\n        ${ops[2]}       // final computation for reduce mean\n        return value;\n      }`;\n\n      return {\n        ...reduceProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  // TODO: support Reduce* operators with 2 inputs.\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Reduce op requires 1 input.');\n  }\n\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invalid input type.');\n  }\n};\n\nexport const reduceSum: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['value = 0.0;', 'value += _A(inputIdx);', ''];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceSum', reduceOp);\n    };\n\nexport const reduceMean: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\n        let size = 1.0;\n        for (let k = 0; k < inputs[0].dims.length; k++) {\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\n            size *= inputs[0].dims[k];\n          }\n        }\n\n        return ['value = 0.0;', 'value += _A(inputIdx);', `value /= ${size}.;`];  // ensure real number with `.`\n      };\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMean', reduceOp);\n    };\n\nexport const reduceMax: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\n        const idxZero = [];\n        for (let k = 0; k < inputs[0].dims.length; k++) {\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\n            idxZero.push(`inputIdx[${k}] = 0;`);  // first element\n          }\n        }\n\n        return [`${idxZero.join('\\n')}\\nvalue = _A(inputIdx);`, 'value = max(value, _A(inputIdx));', ''];\n      };\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMax', reduceOp);\n    };\n\nexport const reduceMin: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\n        const idxZero = [];\n        for (let k = 0; k < inputs[0].dims.length; k++) {\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\n            idxZero.push(`inputIdx[${k}] = 0;`);  // first element\n          }\n        }\n\n        return [`${idxZero.join('\\n')}\\nvalue = _A(inputIdx);`, 'value = min(value, _A(inputIdx));', ''];\n      };\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMin', reduceOp);\n    };\n\nexport const reduceProd: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['value = 1.0;', 'value *= _A(inputIdx);', ''];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceProd', reduceOp);\n    };\n\nexport const reduceLogSum: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['value = 0.0;', 'value += _A(inputIdx);', 'value = log(value);'];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceLogSum', reduceOp);\n    };\n\nexport const reduceLogSumSquare: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['float t; value = 0.0;', 't = _A(inputIdx); value += t * t;', ''];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceLogSumSquare', reduceOp);\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {unpackFromChannel} from './packing-utils';\n\nconst createPackedReshape3DProgramMetadata = (outputShape3D: readonly number[]) =>\n    ({name: 'Reshape (packed)', inputTypes: [TextureType.packed], inputNames: ['A'], cacheHint: `${outputShape3D}`});\n\nconst createPackedReshape3DProgramInfo =\n    (handler: WebGLInferenceHandler, input3D: Tensor, metadata: ProgramMetadata, outputShape3D: readonly number[]):\n        ProgramInfo => {\n          const inputShape3D = input3D.dims as [number, number, number];\n          const squeezedOutputShape = outputShape3D as [number, number, number];\n\n          let mainLoop = '';\n          for (let i = 0; i < 4; i++) {\n            let outputCoords = '';\n            switch (i) {\n              case 0:\n                outputCoords = 'outputCoords = rc;';\n                break;\n              case 1:\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y+1, rc.z);';\n                break;\n              case 2:\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y, rc.z+1);';\n                break;\n              case 3:\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y+1, rc.z+1);';\n                break;\n              default:\n                throw new Error();\n            }\n\n            mainLoop += `\n        ${outputCoords}\n        ${i > 0 ? 'if(outputCoords.y < rows && outputCoords.z < cols){' : ''}\n          int flattenedIndex = getFlattenedIndex(outputCoords);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flattenedIndex);\n          vec2 innerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${i}] = getChannel(getA(inputRC.x, inputRC.y, inputRC.z), innerDims);\n\n        ${i > 0 ? '}' : ''}\n      `;\n          }\n          const glsl = getGlsl(handler.session.backend.glContext.version);\n\n          const shaderSource = `\n      ${getReshapedInputCoords(inputShape3D)}\n      ${getFlattenedIndexFrom3D(squeezedOutputShape)}\n      ${unpackFromChannel()}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.0);\n\n        ivec3 outputCoords;\n        int rows = ${squeezedOutputShape[2]};\n        int cols = ${squeezedOutputShape[1]};\n\n        ${mainLoop}\n        ${glsl.output} = result;\n      }\n    `;\n\n          return {\n            ...metadata,\n            output: {dims: squeezedOutputShape, type: input3D.type, textureType: TextureType.packed},\n            shaderSource,\n            hasMain: true\n          };\n        };\n\nexport const createPackedReshape3DProgramInfoLoader =\n    (handler: WebGLInferenceHandler, input3D: Tensor, outputShape3D: readonly number[]): ProgramInfoLoader => {\n      const metadata = createPackedReshape3DProgramMetadata(outputShape3D);\n      return {...metadata, get: () => createPackedReshape3DProgramInfo(handler, input3D, metadata, outputShape3D)};\n    };\n\nexport function processDims3D(shape: ArrayLike<number>): [number, number, number] {\n  if (shape.length === 0) {\n    return [1, 1, 1];\n  }\n  // TODO: squeeze other shapes to 2D case\n  let batch = 1;\n  for (let i = 0; i < shape.length - 2; ++i) {\n    batch *= shape[i];\n  }\n  return [batch, shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]];\n}\n\n// For packed reshape, we need to re-arrange texel data for output shape.\n// Our pack is designed to pack a 2x2 tile in last h and w dimension, so\n// for the reshaped new tensor, we just need to re-arrange the last h and\n// w dimension. For any shape that is not in 3D, i.e. [batch, W, H], we\n// first convert it to 3D by collapsing other dimension to batch dim, then\n// process with the last two dimensions.\n// Note: we only need the shape tensor to calculate output shape, so the\n// content in shape tensor is never uploaded to GPU. It is always kept in CPU.\n// TODO: optimize the algorithm -- in some cases, if the last two dims are\n// the same between input shape and output shape, the packed reshape can be\n// treated as no-op.\nexport function isReshapeCheap(dims: readonly number[], reshapedDims: readonly number[]) {\n  let isCheapReshape = false;\n  if (dims.length === 0 || reshapedDims.length === 0) {  // scalar\n    isCheapReshape = true;\n  } else if (dims.length < 2 || reshapedDims.length < 2) {  // 1D\n    isCheapReshape = dims[dims.length - 1] === reshapedDims[reshapedDims.length - 1];\n  } else {  // 2D +\n    isCheapReshape = dims[dims.length - 1] === reshapedDims[reshapedDims.length - 1] &&\n        dims[dims.length - 2] === reshapedDims[reshapedDims.length - 2];\n  }\n\n  return isCheapReshape;\n}\n\nfunction getReshapedInputCoords(shape: [number, number, number]): string {\n  const strides = ShapeUtil.computeStrides(shape);\n  const coords = ['b', 'r', 'c'];\n  const index = 'index';\n  const coordsFromIndexSnippet = strides\n                                     .map((stride, i) => {\n                                       const line1 = `int ${coords[i]} = ${index} / ${stride}`;\n                                       const line2 = i === strides.length - 1 ?\n                                           `int ${coords[i + 1]} = ${index} - ${coords[i]} * ${stride}` :\n                                           `index -= ${coords[i]} * ${stride}`;\n                                       return `${line1}; ${line2};`;\n                                     })\n                                     .join('');\n\n  return `\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${coordsFromIndexSnippet}\n      return ivec3(b, r, c);\n    }\n  `;\n}\n\nfunction getFlattenedIndexFrom3D(shape: [number, number, number]): string {\n  const strides = ShapeUtil.computeStrides(shape);\n\n  return `\n  int getFlattenedIndex(ivec3 coords) {\n    // reverse y, z order\n    return coords.x * ${strides[0]} + coords.z * ${strides[1]} + coords.y;\n  }\n`;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const reshape = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  const reshapedDims = ShapeUtil.calculateReshapedDims(inputs[0].dims, inputs[1].integerData);\n  if (handler.session.pack) {\n    return [handler.reshapePacked(inputs[0], reshapedDims)];\n  } else {\n    return [handler.reshapeUnpacked(inputs[0], reshapedDims)];\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\nimport {getCoordsDataType} from '../utils';\n\nimport {unpackFromChannel} from './packing-utils';\nimport {parseUpsampleAttributes, scalesValidation, UpsampleAttributes, validateInputs} from './upsample';\n\nconst resizeProgramMetadata = {\n  name: 'Resize',\n  inputNames: ['A'],\n  inputTypes: [TextureType.packed]\n};\n\nexport const resize: OperatorImplementation<UpsampleAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);\n      const output = inferenceHandler.run(\n          {\n            ...resizeProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createPackedResizeProgramInfo(inferenceHandler, inputs, attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseResizeAttributesV10: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 10);\n\nexport const parseResizeAttributesV11: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 11);\n\nconst createPackedResizeProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const [scales, outputShape] = prepareInputs(inputs, attributes);\n\n      const isSame =\n          scales.every((s: number) => s === 1) && attributes.coordinateTransformMode !== 'tf_crop_and_resize';\n      if (isSame) {\n        return {\n          ...resizeProgramMetadata,\n          output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n          hasMain: true,\n          shaderSource: `void main() {\n                    vec4 v = ${glsl.texture2D}(X, TexCoords);\n                    ${glsl.output} = v;\n                }`\n        };\n      }\n\n      const dim = outputShape.length;\n      if (dim < 2) {\n        throw new Error(`output dimension should be at least 2, but got ${dim}`);\n      }\n\n      const outputHeight = outputShape[dim - 2];\n      const outputWidth = outputShape[dim - 1];\n\n      const inputShape = inputs[0].dims;\n      if (dim !== inputShape.length) {\n        throw new Error(`output dimension should match input ${inputShape.length}, but got ${dim}`);\n      }\n      const inputHeight = inputShape[dim - 2];\n      const inputWidth = inputShape[dim - 1];\n\n      const scalesHeight = scales[dim - 2];\n      const scalesWidth = scales[dim - 1];\n\n      let getSourceFracIndex = '';\n\n      if (attributes.mode !== 'linear') {\n        // TODO: support other modes\n        throw new Error(`resize (packed) does not support mode: '${attributes.mode}'`);\n      }\n      switch (attributes.coordinateTransformMode) {\n        case 'asymmetric':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        return vec4(coords) / scaleWHWH;\n                    }\n                `;\n          break;\n        case 'half_pixel':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        return (vec4(coords) + 0.5) / scaleWHWH - 0.5;\n                    }\n                `;\n          break;\n        case 'pytorch_half_pixel':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        vec4 fcoords = vec4(coords);\n                        return vec4(\n                            ${outputWidth}.0 > 1.0 ? (fcoords.x + 0.5) / scaleWHWH.x - 0.5 : 0.0,\n                            ${outputHeight}.0 > 1.0 ? (fcoords.y + 0.5) / scaleWHWH.y - 0.5 : 0.0,\n                            ${outputWidth}.0 > 1.0 ? (fcoords.z + 0.5) / scaleWHWH.z - 0.5 : 0.0,\n                            ${outputHeight}.0 > 1.0 ? (fcoords.w + 0.5) / scaleWHWH.w - 0.5 : 0.0\n                          );\n                    }\n                `;\n          break;\n        case 'align_corners':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        vec4 resized = vec4(${outputWidth}.0 - 1.0, ${outputHeight}.0 - 1.0, ${outputWidth}.0 - 1.0,\n                            ${outputHeight}.0 - 1.0);\n                        vec4 original = vec4(${inputWidth}.0 - 1.0, ${inputHeight}.0 - 1.0, ${inputWidth}.0 - 1.0,\n                            ${inputHeight}.0 - 1.0);\n                        vec4 new_scale = original / resized;\n                        return vec4(coords) * new_scale;\n                    }\n                `;\n          break;\n        default:\n          // TODO:supporting other coordinateTransformModes\n          throw new Error(`resize (packed) does not support coordinateTransformMode: \\\n                                '${attributes.coordinateTransformMode}'`);\n      }\n\n      const coordsDataType = getCoordsDataType(dim);\n      const unpackChannel = unpackFromChannel();\n      const shaderSource = `\n            const vec2 inputWH = vec2(${inputHeight}.0, ${inputWidth}.0);\n            const vec4 scaleWHWH = vec4(float(${scalesHeight}), float(${scalesWidth}), float(${scalesHeight}), float(${\n          scalesWidth}));\n            ${unpackChannel}\n            ${getSourceFracIndex}\n            float getAValue(int x10, int r, int c, int d) {\n                return getChannel(getA(x10, r, c, d), vec2(c, d));\n            }\n            void main() {\n                ${coordsDataType} rc = getOutputCoords();\n\n                int batch = rc[0];\n                int depth = rc[1];\n\n                // retrieve the 4 coordinates that is used in the 4 packed output values.\n                ivec4 coords = ivec4(rc.wz, rc.w + 1, rc.z + 1);\n\n                // calculate the source index in fraction\n                vec4 sourceFrac = getSourceFracIndex(coords);\n\n                // get the lower and upper bound of the 4 values that will be packed into one texel.\n                ivec4 x00 = ivec4(max(sourceFrac.xy, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.xy)));\n                ivec4 x01 = ivec4(max(sourceFrac.xw, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.xw)));\n                ivec4 x10 = ivec4(max(sourceFrac.zy, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.zy)));\n                ivec4 x11 = ivec4(max(sourceFrac.zw, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.zw)));\n\n                bool hasNextRow = rc.w < ${outputHeight - 1};\n                bool hasNextCol = rc.z < ${outputWidth - 1};\n\n                // pack x00, x01, x10, x11's top-left corner into one vec4 structure\n                vec4 topLeft = vec4(\n                    getAValue(batch, depth, x00.x, x00.y),\n                    hasNextCol ? getAValue(batch, depth, x01.x, x01.y) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.x, x10.y) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.x, x11.y) : 0.0);\n\n                // pack x00, x01, x10, x11's top-right corner into one vec4 structure\n                vec4 topRight = vec4(\n                    getAValue(batch, depth, x00.x, x00.w),\n                    hasNextCol ? getAValue(batch, depth, x01.x, x01.w) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.x, x10.w) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.x, x11.w) : 0.0);\n\n                // pack x00, x01, x10, x11's bottom-left corner into one vec4 structure\n                vec4 bottomLeft = vec4(\n                    getAValue(batch, depth, x00.z, x00.y),\n                    hasNextCol ? getAValue(batch, depth, x01.z, x01.y) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.z, x10.y) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.z, x11.y) : 0.0);\n\n                // pack x00, x01, x10, x11's bottom-right corner into one vec4 structure\n                vec4 bottomRight = vec4(\n                    getAValue(batch, depth, x00.z, x00.w),\n                    hasNextCol ? getAValue(batch, depth, x01.z, x01.w) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.z, x10.w) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.z, x11.w) : 0.0);\n\n                // calculate the interpolation fraction on u and v direction\n                vec4 frac = vec4(sourceFrac) - floor(sourceFrac);\n                vec4 clampFrac = clamp(frac, vec4(0.0), vec4(1.0));\n\n                vec4 top = mix(topLeft, topRight, clampFrac.ywyw);\n                vec4 bottom = mix(bottomLeft, bottomRight, clampFrac.ywyw);\n                vec4 newValue = mix(top, bottom, clampFrac.xxzz);\n\n                ${glsl.output} = vec4(newValue);\n            }\n        `;\n      return {\n        ...resizeProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n        hasMain: true,\n        shaderSource\n      };\n    };\n\n\nconst prepareInputs = (inputs: Tensor[], attributes: UpsampleAttributes): [readonly number[], readonly number[]] => {\n  const x = inputs[0];\n  const xDims = x.dims;\n\n  let scales = attributes.scales;\n  let outputSizes: number[]|undefined;\n  if (scales.length === 0) {\n    const scalesTensor = inputs[attributes.scalesInputIdx];\n    if (scalesTensor && scalesTensor.size !== 0) {\n      if (inputs[attributes.sizesInputIdx]) {\n        throw new Error('Only one of scales or sizes must be provided as input.');\n      }\n      scales = parseScalesData(scalesTensor, attributes.mode, attributes.isResize);\n    } else {\n      const sizesTensor = inputs[attributes.sizesInputIdx];\n      if (!sizesTensor || sizesTensor.size === 0) {\n        throw new Error('Either scales or sizes MUST be provided as input.');\n      }\n\n      outputSizes = Array.from(sizesTensor.integerData);\n      scales = parseScalesDataFromOutputSize(outputSizes, xDims, attributes.mode, attributes.isResize);\n    }\n  } else {\n    if (inputs[attributes.sizesInputIdx]) {\n      throw new Error('Only one of scales or sizes must be provided as input.');\n    }\n  }\n\n  const yDims = outputSizes || (xDims.map((dim, i) => Math.floor(dim * scales[i])));\n\n  return [scales, yDims];\n};\n\nconst parseScalesData = (scale: Tensor, mode: string, isResize: boolean): number[] => {\n  const scales = Array.from(scale.floatData);\n  scalesValidation(scales, mode, isResize);\n  return scales;\n};\n\nconst parseScalesDataFromOutputSize =\n    (yDims: readonly number[], xDims: readonly number[], mode: string, isResize: boolean): number[] => {\n      const length = xDims.length;\n      const scales = new Array<number>(length);\n\n      for (let i = 0, end = length; i < end; i++) {\n        if (xDims[i] === 0) {\n          if (yDims[i] !== 0) {\n            throw new Error('Input dim is zero but required output dim is non-zero.');\n          }\n          scales[i] = 1;\n        } else {\n          scales[i] = yDims[i] / xDims[i];\n        }\n      }\n      scalesValidation(scales, mode, isResize);\n      return scales;\n    };\n\n// roi data is not used yet. but leave here for future usage.\n// const getRoi = (inputs: Tensor[], attributes: UpsampleAttributes) : number[] => {\n//     let roi: number[] = [];\n//     if (attributes.needRoiInput) {\n//         if (attributes.roiInputIdx <= 0) {\n//             throw new Error('Invalid roi input index.');\n//         }\n//         const roiTensor = inputs[attributes.roiInputIdx];\n//         roi = roiTensor.size > 0 ? Array.from(roiTensor.floatData) : [];\n//     } else {\n//         roi = new Array(inputs[0].dims.length * 2).fill(0);\n//     }\n//     return roi;\n// };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const shape = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n  return [new Tensor([inputs[0].dims.length], 'int32', undefined, undefined, new Int32Array(inputs[0].dims))];\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Shape requires 1 input.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface SliceAttributes extends AttributeWithCacheKey {\n  readonly axes: number[];\n  readonly ends: number[];\n  readonly starts: number[];\n}\n\nconst sliceProgramMetadata = {\n  name: 'Slice',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked]\n};\n\nexport const slice: OperatorImplementation<SliceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SliceAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...sliceProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createSliceProgramInfo(inferenceHandler, inputs[0], attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseSliceAttributes: OperatorInitialization<SliceAttributes> = (node: Graph.Node): SliceAttributes => {\n  const starts = node.attributes.getInts('starts');\n  const ends = node.attributes.getInts('ends');\n  const axes = node.attributes.getInts('axes', []);\n  return createAttributeWithCacheKey({starts, ends, axes});\n};\n\nconst createSliceProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: SliceAttributes): ProgramInfo => {\n      const axes = (attributes.axes.length === 0) ? input.dims.slice(0).map((val, i) => i) : attributes.axes;\n      const normalizedAxes = ShapeUtil.normalizeAxes(axes, input.dims.length);\n      const starts = attributes.starts.map((start, i) => {\n        if (start > input.dims[normalizedAxes[i]] - 1) {\n          return input.dims[normalizedAxes[i]];\n        }\n        return ShapeUtil.normalizeAxis(start, input.dims[normalizedAxes[i]]);\n      });\n      const ends = attributes.ends.map((end, i) => {\n        if (end > input.dims[normalizedAxes[i]] - 1) {\n          return input.dims[normalizedAxes[i]];\n        }\n        return ShapeUtil.normalizeAxis(end, input.dims[normalizedAxes[i]]);\n      });\n\n      const outputShape = input.dims.slice();\n\n      const sliceOps: string[] = [];\n      for (let i = 0; i < normalizedAxes.length; i++) {\n        outputShape[normalizedAxes[i]] = ends[i] - starts[i];\n        if (starts[i] > 0) {\n          sliceOps.push(`outputIdx[${normalizedAxes[i]}] += ${starts[i]};`);\n        }  // else { sliceOps.push(`outputIdx[${normalizedAxes[i]}] += 0;`); }\n      }\n\n      const rank = outputShape.length;\n      const shaderSource = `\n      float process(int outputIdx[${rank}]) {\n        ${sliceOps.join('\\n      ')}\n        return _A(outputIdx);\n      }`;\n      return {\n        ...sliceProgramMetadata,\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Slice requires 1 input.');\n  }\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invalid input type.');\n  }\n};\n\nexport const sliceV10 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputsV10(inputs);\n  const attributes = generateSliceAttributesFromInputs(inferenceHandler, inputs);\n  const output = inferenceHandler.run(\n      {\n        ...sliceProgramMetadata,\n        cacheHint: attributes.cacheKey,\n        get: () => createSliceProgramInfo(inferenceHandler, inputs[0], attributes)\n      },\n      [inputs[0]]);\n  return [output];\n};\n\nconst generateSliceAttributesFromInputs =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): SliceAttributes => {\n      if (!inferenceHandler.session.isInitializer(inputs[1].dataId) ||\n          !inferenceHandler.session.isInitializer(inputs[2].dataId) ||\n          (inputs.length >= 4 && !inferenceHandler.session.isInitializer(inputs[3].dataId)) ||\n          (inputs.length >= 5 && !inferenceHandler.session.isInitializer(inputs[4].dataId))) {\n        throw new Error('dynamic slice attributes are not allowed');\n      }\n\n      if (inputs.length >= 5 && inputs[4].integerData.some((i: number) => i !== 1)) {\n        throw new Error('currently non-1 steps is not supported for Slice');\n      }\n\n      const starts = Array.from(inputs[1].integerData);\n      const ends = Array.from(inputs[2].integerData);\n      const axes = inputs.length >= 4 ? Array.from(inputs[3].integerData) : [];\n      const cacheKey = `${axes};${starts};${ends}`;\n      return {starts, ends, axes, cacheKey};\n    };\n\nconst validateInputsV10 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length < 3 || inputs.length > 5) {\n    throw new Error('Invalid input number.');\n  }\n  if (inputs[1].type !== 'int32' || inputs[1].dims.length !== 1) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs[2].type !== 'int32' || inputs[2].dims.length !== 1) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs.length >= 4 && (inputs[3].type !== 'int32' || inputs[3].dims.length !== 1)) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs.length >= 5 && (inputs[4].type !== 'int32' || inputs[4].dims.length !== 1)) {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nimport {transpose, TransposeAttributes} from './transpose';\n\nexport interface SoftmaxAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n}\n\nconst softmaxComputeMaxProgramMetadata = {\n  name: 'SoftmaxComputeMax',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked],\n};\n\nconst softmaxComputeScaleProgramMetadata = {\n  name: 'SoftmaxComputeScale',\n  inputNames: ['A', 'Max'],\n  inputTypes: [TextureType.unpacked, TextureType.unpacked],\n};\n\nconst softmaxProgramMetadata = {\n  name: 'SoftMax',\n  inputNames: ['A', 'Max', 'Norm'],\n  inputTypes: [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked],\n};\n\nexport const softmax: OperatorImplementation<SoftmaxAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      const inputShape = inputs[0].dims.slice();\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputShape.length);\n      const logicalRowCount = ShapeUtil.sizeToDimension(inputShape, axis);\n      const featureCount = ShapeUtil.sizeFromDimension(inputShape, axis);\n\n      const output = computeSoftmax(inferenceHandler, inputs, attributes, logicalRowCount, featureCount);\n      return output;\n    };\n\nexport const parseSoftmaxAttributes: OperatorInitialization<SoftmaxAttributes> =\n    (node: Graph.Node): SoftmaxAttributes => createAttributeWithCacheKey({axis: node.attributes.getInt('axis', 1)});\n\nexport const parseSoftmaxAttributesV13: OperatorInitialization<SoftmaxAttributes> =\n    (node: Graph.Node): SoftmaxAttributes => createAttributeWithCacheKey({axis: node.attributes.getInt('axis', -1)});\n\n// The \"semantic\" meaning of axis has changed in opset-13.\n// Please compare: https://github.com/onnx/onnx/blob/main/docs/Operators.md#Softmax\n// with https://github.com/onnx/onnx/blob/main/docs/Changelog.md#Softmax-11 for detailed explanations\n// To account for the opset-13 behavior, our plan will be to transpose the \"axis\" dim to the innermost dim\n// and perform softmax and then reverse the transpose. We can skip the transposing aspect if the axis is already\n// the innermost dim\nexport const softmaxV13: OperatorImplementation<SoftmaxAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      const inputShape = inputs[0].dims.slice();\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputShape.length);\n      const rank = inputShape.length;\n\n      const isTransposeRequired = (axis !== rank - 1) ? true : false;\n      const transposedInputShape: number[] = [];\n      let perm: number[] = [];\n      let transposedInputs: Tensor[] = [];\n      let transposeAttribute: TransposeAttributes;\n\n      if (isTransposeRequired) {\n        perm = Array.from({length: rank}).map((_, i) => i);\n\n        // swap the innermost dim with the dim corresponding to axis\n        perm[axis] = rank - 1;\n        perm[rank - 1] = axis;\n\n        perm.map(p => transposedInputShape.push(inputShape[p]));\n\n        transposeAttribute = createAttributeWithCacheKey({perm});\n        transposedInputs = transpose(inferenceHandler, inputs, transposeAttribute);\n      }\n\n      const logicalRowCount = isTransposeRequired ? ShapeUtil.sizeToDimension(transposedInputShape, rank - 1) :\n                                                    ShapeUtil.sizeToDimension(inputShape, rank - 1);\n      const featureCount = isTransposeRequired ? ShapeUtil.sizeFromDimension(transposedInputShape, rank - 1) :\n                                                 ShapeUtil.sizeFromDimension(inputShape, rank - 1);\n\n      const output = computeSoftmax(\n          inferenceHandler, isTransposeRequired ? transposedInputs : inputs, attributes, logicalRowCount, featureCount);\n\n      if (isTransposeRequired) {\n        const reversedOutput = transpose(inferenceHandler, output, transposeAttribute!);\n        return reversedOutput;\n      } else {\n        return output;\n      }\n    };\n\nconst computeSoftmax =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes, logicalRowCount: number,\n     featureCount: number): Tensor[] => {\n      const computeMaxProgramInfo =\n          createComputeMaxProgramInfo(inferenceHandler, inputs[0], logicalRowCount, featureCount, [logicalRowCount]);\n      const max = inferenceHandler.run(\n          {...softmaxComputeMaxProgramMetadata, cacheHint: attributes.cacheKey, get: () => computeMaxProgramInfo},\n          inputs);\n\n      const computeScaleProgramInfo = createComputScaleProgramInfo(\n          inferenceHandler, inputs[0], logicalRowCount, featureCount, computeMaxProgramInfo.output.dims,\n          [logicalRowCount]);\n      const scale = inferenceHandler.run(\n          {...softmaxComputeScaleProgramMetadata, cacheHint: attributes.cacheKey, get: () => computeScaleProgramInfo},\n          [inputs[0], max]);\n\n      const softMaxProgramInfo = createSoftMaxProgramInfo(\n          inferenceHandler, inputs[0], logicalRowCount, featureCount, computeMaxProgramInfo.output.dims,\n          computeScaleProgramInfo.output.dims);\n      const output = inferenceHandler.run(\n          {...softmaxProgramMetadata, cacheHint: attributes.cacheKey, get: () => softMaxProgramInfo},\n          [inputs[0], max, scale]);\n      return [output];\n    };\n\n/**\n * Create a texture that contains the maximum value of each of the 'N' rows\n */\nconst createComputeMaxProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\n     outputShape: number[]): ProgramInfo => {\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n      const rank = outputShape.length;\n\n      if (logicalRowCount < 1 || featureCount < 1) {\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\n      }\n\n      if (outputShape.length !== 1) {\n        throw new Error('Dimensionality of the output should be 1');\n      }\n\n      if (outputShape[0] !== logicalRowCount) {\n        throw new Error('Shape of the output should be equal to logical row count');\n      }\n\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const shaderSource = `\n      float process(int[${rank}] indices) {\n        int logical_row_start_offset = indices[0] * ${featureCount};\n\n        float max = getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset, ${textureWidth},\n        ${textureHeight} )));\n        for(int i=1; i<${featureCount}; ++i)\n        {\n          float current = getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset + i,\n            ${textureWidth}, ${textureHeight})));\n          if(current > max)\n          max = current;\n        }\n\n        return max;\n      }`;\n      return {\n        ...softmaxComputeMaxProgramMetadata,\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\n/**\n * Create a texture that contains the normalization factor for each of the 'N' rows\n */\nconst createComputScaleProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\n     maxElementPerLogicalRow: readonly number[], outputShape: number[]): ProgramInfo => {\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n      const rank = outputShape.length;\n\n      if (logicalRowCount < 1 || featureCount < 1) {\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\n      }\n\n      if (outputShape.length !== 1) {\n        throw new Error('Dimensionality of the output should be 1');\n      }\n\n      if (outputShape[0] !== logicalRowCount) {\n        throw new Error('Shape of the output should be equal to logical row count');\n      }\n\n      if (maxElementPerLogicalRow.length !== 1) {\n        throw new Error('Dimensionality of the intermediate results should be 1');\n      }\n\n      if (maxElementPerLogicalRow[0] !== logicalRowCount) {\n        throw new Error('Shape of the intermediate results should be equal to logical row count');\n      }\n\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const shaderSource = `\n      float process(int[${rank}] indices) {\n        int logical_row_start_offset = indices[0] * ${featureCount};\n\n        float norm_factor = 0.0;\n        float max = _Max(indices);\n        for(int i=0; i<${featureCount}; ++i)\n        {\n          norm_factor += exp(getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset + i,\n            ${textureWidth}, ${textureHeight}))) - max);\n        }\n\n        return norm_factor;\n      }`;\n      return {\n        ...softmaxComputeScaleProgramMetadata,\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst createSoftMaxProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\n     maxElementPerLogicalRow: readonly number[], normalizationPerLogicalRow: readonly number[]): ProgramInfo => {\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n      const rank = input.dims.length;\n\n      if (logicalRowCount < 1 || featureCount < 1) {\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\n      }\n\n      if (maxElementPerLogicalRow.length !== 1 || normalizationPerLogicalRow.length !== 1) {\n        throw new Error('Dimensionality of the intermediate results should be 1');\n      }\n\n      if (maxElementPerLogicalRow[0] !== logicalRowCount || normalizationPerLogicalRow[0] !== logicalRowCount) {\n        throw new Error('Shape of the intermediate results should be equal to logical row count');\n      }\n\n      const shaderSource = `\n      float process(int[${rank}] indices) {\n\n      // get offset of current logical tensor index from the 2-D texture coordinates (TexCoords)\n      int offset = coordsToOffset(TexCoords, ${textureWidth}, ${textureHeight});\n\n      //determine the logical row for this index\n      int logical_row_index[1];\n      logical_row_index[0] = offset / ${featureCount};\n\n      float norm_factor = _Norm(logical_row_index);\n\n      // avoid possible division by 0\n      // if norm_facor is 0, all elements are zero\n      // if so, return 0\n      if(norm_factor == 0.0)\n        return 0.0;\n\n      return exp(_A(indices) - _Max(logical_row_index)) / norm_factor;\n    }`;\n      return {\n        ...softmaxProgramMetadata,\n        output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Softmax requires 1 input.');\n  }\n\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil, SplitUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface SplitAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n  readonly split: number[];\n  readonly numOutputs: number;\n}\n\nconst splitProgramMetadata = {\n  name: 'Split',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked],\n};\n\nexport const split: OperatorImplementation<SplitAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SplitAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputs[0].dims.length);\n      const count = getProgramCount(inferenceHandler, inputs, axis, attributes);\n      const output: Tensor[] = [];\n      for (let i = 0; i < count; ++i) {\n        output.push(inferenceHandler.run(\n            {\n              ...splitProgramMetadata,\n              cacheHint: `${attributes.cacheKey};${i}`,\n              get: () => createSplitProgramInfo(inferenceHandler, inputs[0], attributes, axis, i)\n            },\n            inputs));\n      }\n\n      return output;\n    };\n\nexport const parseSplitAttributes: OperatorInitialization<SplitAttributes> = (node: Graph.Node): SplitAttributes => {\n  const axis = node.attributes.getInt('axis', 0);\n  const split = node.attributes.getInts('split', []);\n  const numOutputs = node.outputs.length;\n  return createAttributeWithCacheKey({axis, split, numOutputs});\n};\n\nconst getProgramCount =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axis: number, attributes: SplitAttributes): number => {\n      const [, offsets] = SplitUtil.splitShape(inputs[0].dims, axis, attributes.split, attributes.numOutputs);\n      return offsets.length;\n    };\n\nconst createSplitProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: SplitAttributes, axis: number, index: number):\n        ProgramInfo => {\n          const [shapes, offsets] = SplitUtil.splitShape(input.dims, axis, attributes.split, attributes.numOutputs);\n          const offset = offsets[index];\n          const outputShape = shapes[index];\n          const rank = outputShape.length;\n          const shaderSource = `\n      float process(int indices[${rank}]) {\n        indices[${axis}] += ${offset};\n        return _A(indices);\n      }\n    `;\n          return {\n            ...splitProgramMetadata,\n            cacheHint: `${attributes.cacheKey}:${index}`,\n            output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Split requires one input.');\n  }\n\n  if (inputs[0].type !== 'int8' && inputs[0].type !== 'uint8' && inputs[0].type !== 'int16' &&\n      inputs[0].type !== 'uint16' && inputs[0].type !== 'int32' && inputs[0].type !== 'uint32' &&\n      inputs[0].type !== 'float32' && inputs[0].type !== 'float64' && inputs[0].type !== 'bool') {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const squeeze: OperatorImplementation<number[]> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axes: number[]): Tensor[] => {\n      validateInputs(inputs);\n      const outputShape = ShapeUtil.squeezeShape(inputs[0].dims, axes);\n      const output = inferenceHandler.reshapeUnpacked(inputs[0], outputShape);\n      return [output];\n    };\n\nexport const squeezeV13 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputsV13(inputs);\n  return squeeze(inferenceHandler, [inputs[0]], Array.from(inputs[1].integerData));\n};\n\nexport const parseSqueezeAttributes: OperatorInitialization<number[]> = (node: Graph.Node): number[] =>\n    node.attributes.getInts('axes');\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Squeeze requires 1 input.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('invalid input tensor types.');\n  }\n};\n\nconst validateInputsV13 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Squeeze requires 2 inputs.');\n  }\n\n  if (inputs[1].type !== 'int32') {\n    throw new Error('Invalid input type.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport const sum = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n\n  const sumProgramMetadata = {\n    name: 'Sum',\n    inputNames: inputs.map((v, i) => `X${i}`),\n    inputTypes: new Array(inputs.length).fill(TextureType.unpacked)\n  };\n\n  const output = inferenceHandler.run(\n      {...sumProgramMetadata, get: () => createSumProgramInfo(inferenceHandler, inputs, sumProgramMetadata)}, inputs);\n  return [output];\n};\n\nconst createSumProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], sumProgramMetadata: ProgramMetadata): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const outputShape = inputs[0].dims.slice();\n      const sumLine = inputs.map((v, i) => `${glsl.texture2D}(X${i},TexCoords)`).join(' + ');\n      const shaderSource = `\n      void main() {\n        vec4 result = ${sumLine};\n        ${glsl.output} = result;\n      }\n    `;\n      return {\n        ...sumProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        hasMain: true,\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length === 0) {\n    throw new Error('Sum requires inputs.');\n  }\n\n  const length = inputs[0].dims.length;\n  for (let i = 1; i < inputs.length; i++) {\n    if (length !== inputs[i].dims.length) {\n      throw new Error('Input shapes are mismatched.');\n    }\n\n    for (let j = 0; j < length; j++) {\n      if (inputs[0].dims[j] !== inputs[i].dims[j]) {\n        throw new Error('Input shapes are not matched.');\n      }\n    }\n  }\n\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n  for (let i = 1; i < inputs.length; i++) {\n    if (inputs[0].type !== inputs[i].type) {\n      throw new Error('Input types are not matched.');\n    }\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {NUMBER_TYPES} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport const tile = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n\n  const tileProgramMetadata = {\n    name: 'Tile',\n    inputNames: ['A'],\n    inputTypes: [TextureType.unpacked],\n  };\n\n  const output = inferenceHandler.run(\n      {...tileProgramMetadata, get: () => createTileProgramInfo(inferenceHandler, inputs, tileProgramMetadata)},\n      inputs);\n  return [output];\n};\n\nconst createTileProgramInfo =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], tileProgramMetadata: ProgramMetadata): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      const outputShape = new Array(inputShape.length);\n\n      const tileOps: string[] = [];\n      for (let i = 0; i < inputShape.length; i++) {\n        outputShape[i] = inputShape[i] * inputs[1].numberData[i];\n        tileOps.push(`inputIdx[${i}] = int(mod(float(outputIdx[${i}]), ${inputShape[i]}.));`);\n      }\n\n      const rank = outputShape.length;\n      const shaderSource = `\n      float process(int outputIdx[${rank}]) {\n        int inputIdx[${rank}];\n        ${tileOps.join('\\n')}\n        return _A(inputIdx);\n      }\n    `;\n      return {\n        ...tileProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Tile requires 2 input.');\n  }\n  if (inputs[1].dims.length !== 1) {\n    throw new Error('The second input shape must 1 dimension.');\n  }\n  if (inputs[1].dims[0] !== inputs[0].dims.length) {\n    throw new Error('Invalid input shape.');\n  }\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs[1].type !== 'int32' && inputs[1].type !== 'int16') {\n    throw new Error('Invalid repeat type.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface TransposeAttributes extends AttributeWithCacheKey {\n  readonly perm: number[];\n}\n\nconst transposeProgramMetadata = {\n  name: 'Transpose',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked]\n};\n\nexport const transpose: OperatorImplementation<TransposeAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: TransposeAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...transposeProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createTransposeProgramInfo(inferenceHandler, inputs[0], attributes.perm)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseTransposeAttributes: OperatorInitialization<TransposeAttributes> =\n    (node: Graph.Node): TransposeAttributes => createAttributeWithCacheKey({perm: node.attributes.getInts('perm', [])});\n\nconst createTransposeProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, perm: number[]): ProgramInfo => {\n      const inputShape = input.dims;\n      perm = getAdjustedPerm(inputShape, perm);\n      const unpackedOutputShape = getOutputShape(inputShape, perm);\n      const rank = inputShape.length;\n      // A dims=[${inputs[0].dims.toString()}]\n      // out Dims=[${unpackedOutputShape.toString()}]\n      // based on perm=[${perm.toString()}]\n      const shaderSource = `\n      ${getPermFunctionBody('perm', perm, rank)}\n      float process(int indices[${rank}]) {\n        int a[${rank}];\n        perm(a, indices);\n        return _A(a);\n      }`;\n      return {\n        ...transposeProgramMetadata,\n        output: {dims: unpackedOutputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst getAdjustedPerm = (inputShape: readonly number[], perm: number[]): number[] => {\n  if (perm && perm.length !== inputShape.length) {\n    perm = [...(inputShape.keys())].reverse();\n  }\n  return perm;\n};\n\nconst getOutputShape = (inputShape: readonly number[], perm: number[]): readonly number[] => {\n  perm = getAdjustedPerm(inputShape, perm);\n  return ShapeUtil.sortBasedOnPerm(inputShape, perm);\n};\n\nconst getPermFunctionBody = (name: string, perm: number[], rank: number): string => {\n  const reverseFunc = [];\n  reverseFunc.push(`void ${name}(out int a[${rank}], int src[${rank}]) {`);\n  for (let i = 0; i < rank; ++i) {\n    reverseFunc.push(`\\ta[${perm[i]}]=src[${i}];`);\n  }\n  reverseFunc.push('\\t}');\n  return reverseFunc.join('\\n');\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Transpose requires 1 input.');\n  }\n\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('input should be float tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {TextureData, TextureType} from '../types';\n\nexport const encodeAsUint8 = (inferenceHandler: WebGLInferenceHandler, input: TextureData): TextureData => {\n  const outputShape = input.shape;\n  const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n  /**\n   * https://github.com/tensorflow/tfjs-core/blob/master/src/kernels/webgl/encode_float_gpu.ts\n   */\n  const shaderSource = `\n    const float FLOAT_MAX = 1.70141184e38;\n    const float FLOAT_MIN = 1.17549435e-38;\n\n    bool isNaN(float val) {\n      return (val < 1.0 || 0.0 < val || val == 0.0) ? false : true;\n    }\n\n    highp vec4 encodeAsUint8(highp float v) {\n      if (isNaN(v)) {\n        return vec4(255, 255, 255, 255);\n      }\n\n      highp float av = abs(v);\n\n      if(av < FLOAT_MIN) {\n        return vec4(0.0, 0.0, 0.0, 0.0);\n      } else if(v > FLOAT_MAX) {\n        return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n      } else if(v < -FLOAT_MAX) {\n        return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n      }\n\n      highp vec4 c = vec4(0,0,0,0);\n\n      highp float e = floor(log2(av));\n      highp float m = exp2(fract(log2(av))) - 1.0;\n\n      c[2] = floor(128.0 * m);\n      m -= c[2] / 128.0;\n      c[1] = floor(32768.0 * m);\n      m -= c[1] / 32768.0;\n      c[0] = floor(8388608.0 * m);\n\n      highp float ebias = e + 127.0;\n      c[3] = floor(ebias / 2.0);\n      ebias -= c[3] * 2.0;\n      c[2] += floor(ebias) * 128.0;\n\n      c[3] += 128.0 * step(0.0, -v);\n\n      return c / 255.0;\n    }\n\n    void main() {\n      float value = ${glsl.texture2D}(X,TexCoords).r;\n      ${glsl.output} = encodeAsUint8(value);\n    }`;\n  const programInfo = {\n    name: 'Uint8Encode',\n    inputTypes: [TextureType.unpacked],\n    inputNames: ['X'],\n    output: {dims: outputShape, type: input.tensor.type, textureType: TextureType.downloadUint8AsFloat},\n    shaderSource,\n    hasMain: true\n  };\n  return inferenceHandler.executeProgram(programInfo, [input.tensor]);\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {Tensor} from '../../../tensor';\nimport {MAX_CLIP, MIN_CLIP} from '../../../util';\nimport {FunctionType, GlslValueFunction} from '../glsl-definitions';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport function glslAbs(): GlslValueFunction {\n  return glslBuiltinUnary('abs');\n}\nexport function glslAcos(): GlslValueFunction {\n  return glslBuiltinUnary('acos');\n}\nexport function glslAsin(): GlslValueFunction {\n  return glslBuiltinUnary('asin');\n}\nexport function glslAtan(): GlslValueFunction {\n  return glslBuiltinUnary('atan');\n}\nexport function glslCeil(): GlslValueFunction {\n  return glslBuiltinUnary('ceil');\n}\nexport function glslCos(): GlslValueFunction {\n  return glslBuiltinUnary('cos');\n}\nexport function glslElu(alpha: number): GlslValueFunction {\n  const name = 'elu';\n  const body = `\n  const float alpha = float(${alpha});\n\n  float ${name}_(float a) {\n    return a >= 0.0 ? a: (exp(a) - 1.0) * alpha;\n  }\n  vec4 ${name}_(vec4 v) {\n    return vec4(${name}_(v.x), ${name}_(v.y), ${name}_(v.z), ${name}_(v.w));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslExp(): GlslValueFunction {\n  return glslBuiltinUnary('exp');\n}\nexport function glslFloor(): GlslValueFunction {\n  return glslBuiltinUnary('floor');\n}\nexport function glslClip(min: number, max: number): GlslValueFunction {\n  const name = 'clip';\n  const body = `\n  const float min = float(${min});\n  const float max = float(${max});\n\n  float ${name}_(float a) {\n    return clamp(a, min, max);\n  }\n  vec4 ${name}_(vec4 v) {\n    return clamp(v, min, max);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslIdentity(): GlslValueFunction {\n  const name = 'indentity';\n  const body = `\n  float ${name}_(float a) {\n    return a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return v;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslLeakyRelu(alpha: number): GlslValueFunction {\n  const name = 'leakyRelu';\n  const body = `\n  const float alpha = float(${alpha});\n\n  float ${name}_(float a) {\n    return a < 0.0 ? a * alpha : a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return vec4(${name}_(v.x), ${name}_(v.y), ${name}_(v.z), ${name}_(v.w));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslLog(): GlslValueFunction {\n  return glslBuiltinUnary('log');\n}\nexport function glslNeg(): GlslValueFunction {\n  const name = 'neg';\n  const body = `\n  float ${name}_(float a) {\n    return -a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return -v;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslNot(): GlslValueFunction {\n  const name = 'not';\n  const body = `\n  float ${name}_(float a) {\n    return float( ! bool(a) );\n  }\n  bool ${name}_(bool a) {\n    return !a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return vec4(!bool(v.x), !bool(v.y), !bool(v.z), !bool(v.w));\n  }\n  bvec4 ${name}_(bvec4 v) {\n    return bvec4(!v.x, !v.y, !v.z, !v.w);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSin(): GlslValueFunction {\n  return glslBuiltinUnary('sin');\n}\nexport function glslRelu(): GlslValueFunction {\n  const name = 'relu';\n  const body = `\n  float ${name}_(float a) {\n    return max( a, 0.0 );\n  }\n  vec4 ${name}_(vec4 v) {\n    return max( v, 0.0 );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSigmoid(): GlslValueFunction {\n  const name = 'sigmoid';\n  const body = `\n  float ${name}_(float a) {\n    return 1.0 / (1.0 + exp(-a));\n  }\n  vec4 ${name}_(vec4 v) {\n    return 1.0 / (1.0 + exp(-v));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSqrt(): GlslValueFunction {\n  return glslBuiltinUnary('sqrt');\n}\nexport function glslTan(): GlslValueFunction {\n  return glslBuiltinUnary('tan');\n}\nexport function glslTanh(): GlslValueFunction {\n  const name = 'tanh';\n  const body = `\n  float ${name}_(float a) {\n    a = clamp(a, -10., 10.);\n    a = exp(2.*a);\n    return (a - 1.) / (a + 1.);\n  }\n  vec4 ${name}_(vec4 v) {\n    v = clamp(v, -10., 10.);\n    v = exp(2.*v);\n    return (v - 1.) / (v + 1.);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nfunction glslBuiltinUnary(name: string): GlslValueFunction {\n  const body = `\n  float ${name}_(float a) {\n    return ${name}(a);\n  }\n  vec4 ${name}_(vec4 v) {\n    return ${name}(v);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\n\n/////\n/////\n/////\n\nconst createElementwiseProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, input: Tensor, glslFunc: GlslValueFunction):\n        ProgramInfo => {\n          const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n          const glsl = getGlsl(handler.session.backend.glContext.version);\n          return {\n            ...metadata,\n            output: {dims: input.dims, type: input.type, textureType},\n            shaderSource: `\n     ${glslFunc.body}\n     void main() {\n       vec4 v = ${glsl.texture2D}(A, TexCoords);\n       v = ${glslFunc.name}_(v);\n       ${glsl.output} = v;\n     }\n     `,\n            hasMain: true\n          };\n        };\n\nconst createElementwiseProgramInfoLoader =\n    (handler: WebGLInferenceHandler, input: Tensor, glslFunc: GlslValueFunction, cacheKey?: string):\n        ProgramInfoLoader => {\n          const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n          const metadata = {name: glslFunc.name, inputTypes: [textureType], inputNames: ['A'], cacheHint: cacheKey};\n          return {...metadata, get: () => createElementwiseProgramInfo(handler, metadata, input, glslFunc)};\n        };\n\nexport const abs = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAbs()), inputs)];\n\nexport const acos = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAcos()), inputs)];\n\nexport const asin = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAsin()), inputs)];\n\nexport const atan = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAtan()), inputs)];\n\nexport interface ClipAttributes extends AttributeWithCacheKey {\n  readonly min: number;\n  readonly max: number;\n}\n\nexport const clip =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ClipAttributes): Tensor[] => [handler.run(\n        createElementwiseProgramInfoLoader(\n            handler, inputs[0], glslClip(attributes.min, attributes.max), attributes.cacheKey),\n        inputs)];\n\nexport const parseClipAttributes = (node: Graph.Node): ClipAttributes => createAttributeWithCacheKey(\n    {min: node.attributes.getFloat('min', MIN_CLIP), max: node.attributes.getFloat('max', MAX_CLIP)});\n\nexport const clipV11 = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  const attributes = generateClipAttributesFromInputs(handler, inputs);\n  return clip(handler, [inputs[0]], attributes);\n};\n\nconst generateClipAttributesFromInputs = (handler: WebGLInferenceHandler, inputs: Tensor[]): ClipAttributes => {\n  if (inputs.length >= 3 &&\n      (!handler.session.isInitializer(inputs[1].dataId) || !handler.session.isInitializer(inputs[2].dataId))) {\n    throw new Error('dynamic clip attributes are not allowed');\n  }\n\n  const min = (inputs.length >= 3) ? inputs[1].numberData[0] : MIN_CLIP;\n  const max = (inputs.length >= 3) ? inputs[2].numberData[0] : MAX_CLIP;\n  return createAttributeWithCacheKey({min, max});\n};\n\nexport const ceil = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslCeil()), inputs)];\n\nexport const cos = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslCos()), inputs)];\n\nexport interface EluAttributes extends AttributeWithCacheKey {\n  readonly alpha: number;\n}\n\nexport const elu =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: EluAttributes): Tensor[] => [handler.run(\n        createElementwiseProgramInfoLoader(handler, inputs[0], glslElu(attributes.alpha), attributes.cacheKey),\n        inputs)];\n\nexport const parseEluAttributes = (node: Graph.Node): EluAttributes =>\n    createAttributeWithCacheKey({alpha: node.attributes.getFloat('alpha', 1.0)});\n\nexport const exp = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslExp()), inputs)];\n\nexport const floor = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslFloor()), inputs)];\n\nexport const identity = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslIdentity()), inputs)];\n\nexport interface LeakyReluAttributes extends AttributeWithCacheKey {\n  readonly alpha: number;\n}\n\nexport const leakyRelu =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: LeakyReluAttributes): Tensor[] => [handler.run(\n        createElementwiseProgramInfoLoader(handler, inputs[0], glslLeakyRelu(attributes.alpha), attributes.cacheKey),\n        inputs)];\n\nexport const parseLeakyReluAttributes = (node: Graph.Node): LeakyReluAttributes =>\n    createAttributeWithCacheKey({alpha: node.attributes.getFloat('alpha', 0.01)});\n\nexport const log = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslLog()), inputs)];\n\nexport const neg = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslNeg()), inputs)];\n\nexport const not = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslNot()), inputs)];\n\nexport const relu = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslRelu()), inputs)];\n\nexport const sigmoid = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSigmoid()), inputs)];\n\nexport const sin = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSin()), inputs)];\n\nexport const sqrt = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSqrt()), inputs)];\n\nexport const tan = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslTan()), inputs)];\n\nexport const tanh = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslTanh()), inputs)];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\nimport {getCoordsDataType} from '../utils';\n\nimport {getChannels, unpackFromChannel} from './packing-utils';\n\nconst unpackProgramMetadata = {\n  name: 'unpack',\n  inputNames: ['A'],\n  inputTypes: [TextureType.packed]\n};\n\nexport const createUnpackProgramInfo = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfo => {\n  const rank = input.dims.length;\n\n  const channels = getChannels('rc', rank);\n  const innerDims = channels.slice(-2);\n  const coordsDataType = getCoordsDataType(rank);\n  const unpackChannel = unpackFromChannel();\n  const isScalar = (input.dims.length === 0);\n  const sourceCoords = isScalar ? '' : getSourceCoords(rank, channels);\n  const coords = rank <= 1 ? 'rc' : `vec2(${innerDims.join(',')})`;\n  const glsl = getGlsl(handler.session.backend.glContext.version);\n  const shaderSource = `\n    ${unpackChannel}\n    void main() {\n      ${coordsDataType} rc = getOutputCoords();\n\n       // Sample the texture with the coords to get the rgba channel value.\n       vec4 packedInput = getA(${sourceCoords});\n\n       ${glsl.output} = vec4(getChannel(packedInput, ${coords}), 0, 0, 0);\n     }\n   `;\n\n  return {\n    ...unpackProgramMetadata,\n    hasMain: true,\n    output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\n    shaderSource\n  };\n};\n\nexport const createUnpackProgramInfoLoader = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfoLoader =>\n    ({...unpackProgramMetadata, get: () => createUnpackProgramInfo(handler, input)});\n\nfunction getSourceCoords(rank: number, dims: string[]): string {\n  if (rank === 1) {\n    return 'rc';\n  }\n\n  let coords = '';\n  for (let i = 0; i < rank; i++) {\n    coords += dims[i];\n    if (i < rank - 1) {\n      coords += ',';\n    }\n  }\n  return coords;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const unsqueeze: OperatorImplementation<number[]> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axes: number[]): Tensor[] => {\n      validateInputs(inputs);\n      const outputShape = ShapeUtil.unsqueezeShape(inputs[0].dims, axes);\n      const output = inferenceHandler.reshapeUnpacked(inputs[0], outputShape);\n      return [output];\n    };\n\nexport const unsqueezeV13 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputsV13(inputs);\n  return unsqueeze(inferenceHandler, [inputs[0]], Array.from(inputs[1].integerData));\n};\n\nexport const parseUnsqueezeAttributes: OperatorInitialization<number[]> = (node: Graph.Node): number[] =>\n    node.attributes.getInts('axes');\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Unsqueeze requires 1 input.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('invalid input tensor types.');\n  }\n};\n\nconst validateInputsV13 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Unsqueeze requires 2 inputs.');\n  }\n\n  if (inputs[1].type !== 'int32') {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface UpsampleAttributes extends AttributeWithCacheKey {\n  readonly opset: number;\n  readonly isResize: boolean;\n  readonly mode: string;\n  readonly scales: number[];\n  readonly extrapolationValue: number;\n  readonly coordinateTransformMode: string;\n  readonly useExtrapolation: boolean;\n  readonly needRoiInput: boolean;\n  readonly nearestMode: string;\n  readonly cubicCoefficientA: number;\n  readonly excludeOutside: boolean;\n  readonly useNearest2xOptimization: boolean;\n  readonly roiInputIdx: number;\n  readonly scalesInputIdx: number;\n  readonly sizesInputIdx: number;\n}\n\nconst upsampleProgramMetadata = {\n  name: 'Upsample',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n};\n\nexport const upsample: OperatorImplementation<UpsampleAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);\n      const output = inferenceHandler.run(\n          {\n            ...upsampleProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createUpsampleProgramInfo(inferenceHandler, inputs, attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseUpsampleAttributesV7: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 7);\n\nexport const parseUpsampleAttributesV9: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 9);\n\nexport const parseUpsampleAttributes = (node: Graph.Node, opset: number): UpsampleAttributes => {\n  const isResize = (opset >= 10);\n\n  // processing node attributes\n  const mode = node.attributes.getString('mode', 'nearest');\n  if (mode !== 'nearest' && mode !== 'linear' && (opset < 11 || mode !== 'cubic')) {\n    throw new Error(`unrecognized mode: ${mode}`);\n  }\n\n  let scales: number[] = [];\n  if (opset < 9) {\n    scales = node.attributes.getFloats('scales');\n    scalesValidation(scales, mode, isResize);\n  }\n\n  const extrapolationValue = node.attributes.getFloat('extrapolation_value', 0.0);\n\n  const coordinateTransformMode =\n      opset > 10 ? node.attributes.getString('coordinate_transformation_mode', 'half_pixel') : 'asymmetric';\n  if ([\n        'asymmetric', 'pytorch_half_pixel', 'tf_half_pixel_for_nn', 'align_corners', 'tf_crop_and_resize', 'half_pixel'\n      ].indexOf(coordinateTransformMode) === -1) {\n    throw new Error(`coordinate_transform_mode '${coordinateTransformMode}' is not supported`);\n  }\n  const needRoiInput = (coordinateTransformMode === 'tf_crop_and_resize');\n  const useExtrapolation = needRoiInput;\n\n  const nearestMode =\n      (mode === 'nearest' && opset >= 11) ? node.attributes.getString('nearest_mode', 'round_prefer_floor') : '';\n  if (['round_prefer_floor', 'round_prefer_ceil', 'floor', 'ceil', ''].indexOf(nearestMode) === -1) {\n    throw new Error(`nearest_mode '${nearestMode}' is not supported`);\n  }\n\n  const cubicCoefficientA = node.attributes.getFloat('cubic_coeff_a', -0.75);\n  const excludeOutside = node.attributes.getInt('exclude_outside', 0) !== 0;\n  if (excludeOutside && mode !== 'cubic') {\n    throw new Error('exclude_outside can be set to 1 only when mode is CUBIC.');\n  }\n\n  const useNearest2xOptimization =\n      (opset < 11) ? true : (mode === 'nearest' && coordinateTransformMode === 'asymmetric' && nearestMode === 'floor');\n\n  let roiInputIdx = 0;\n  let scalesInputIdx = 0;\n  let sizesInputIdx = 0;\n\n  if (opset > 10) {\n    // handle when roiInput is not given\n    if (node.inputs.length > 2) {\n      roiInputIdx = 1;\n      scalesInputIdx = 2;\n      sizesInputIdx = 3;\n    } else {\n      scalesInputIdx = 1;\n      sizesInputIdx = 2;\n    }\n  } else if (opset === 9) {\n    scalesInputIdx = 1;\n  }\n\n  return createAttributeWithCacheKey({\n    opset,\n    isResize,\n    mode,\n    scales,\n    extrapolationValue,\n    coordinateTransformMode,\n    useExtrapolation,\n    needRoiInput,\n    nearestMode,\n    cubicCoefficientA,\n    excludeOutside,\n    useNearest2xOptimization,\n    roiInputIdx,\n    scalesInputIdx,\n    sizesInputIdx\n  });\n};\n\nconst createUpsampleProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const [inputWidth, inputHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(inputs[0].dims, TextureType.unpacked);\n\n      const outputShape = inputs[0].dims.map((dim, i) => Math.floor(dim * attributes.scales[i]));\n      const [outputWidth, outputHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(outputShape, TextureType.unpacked);\n      const dim = outputShape.length;\n\n      const outputPitches = new Array<number>(dim);\n      const inputPitches = new Array<number>(dim);\n      let precalculatedPitches = `\n      int output_pitches[${dim}];\n      int input_pitches[${dim}];\n      `;\n      for (let d = dim - 1; d >= 0; d--) {\n        outputPitches[d] = (d === dim - 1) ? 1 : outputPitches[d + 1] * outputShape[d + 1];\n        inputPitches[d] = (d === dim - 1) ? 1 : inputPitches[d + 1] * inputs[0].dims[d + 1];\n\n        precalculatedPitches += `\n        output_pitches[${d}] = ${outputPitches[d]};\n        input_pitches[${d}] = ${inputPitches[d]};\n        `;\n      }\n      const getInputFloatFunction = `\n      float getInputFloat(int index) {\n        vec2 coords = offsetToCoords(index, ${inputWidth}, ${inputHeight});\n        float value = getColorAsFloat(${glsl.texture2D}(X, coords));\n        return value;\n      }\n      `;\n\n      const shaderSource = attributes.mode === 'nearest' ?\n          // nearest\n          `\n    ${getInputFloatFunction}\n    float process(int indices[${dim}]) {\n      int input_index = 0;\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\n\n      ${precalculatedPitches}\n\n      int d, m;\n      for (int dim = 0; dim < ${dim}; ++dim) {\n        d = output_index / output_pitches[dim];\n        m = output_index - d * output_pitches[dim];\n        output_index = m;\n\n        if (scales[dim] != 1 && d > 0) {\n          int d2 = d / scales[dim];\n          m = d - d2 * scales[dim];\n          d = d2;\n        }\n        input_index += input_pitches[dim] * d;\n      }\n\n      return getInputFloat(input_index);\n    }` :\n          dim === 4 ?\n          // bilinear 4D\n              `\n    ${getInputFloatFunction}\n    float process(int indices[4]) {\n      int input_index = 0;\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\n\n      ${precalculatedPitches}\n\n      int m;\n      int index_of_dim0, index_of_dim1, index_of_dim2, index_of_dim3;\n      index_of_dim0 = output_index / output_pitches[0];\n      m = output_index - index_of_dim0 * output_pitches[0];\n      index_of_dim1 = m / output_pitches[1];\n      m = m - index_of_dim1 * output_pitches[1];\n      index_of_dim2 = m / output_pitches[2];\n      m = m - index_of_dim2 * output_pitches[2];\n      index_of_dim3 = m;\n\n      int index_of_input_dim2, index_of_input_dim3, x_offset, y_offset;\n      index_of_input_dim2 = index_of_dim2 / scales[2];\n      y_offset = index_of_dim2 - index_of_input_dim2 * scales[2];\n      index_of_input_dim3 = index_of_dim3 / scales[3];\n      x_offset = index_of_dim3 - index_of_input_dim3 * scales[3];\n\n      input_index = index_of_dim0 * input_pitches[0] +\n            index_of_dim1 * input_pitches[1] +\n            index_of_input_dim2 * input_pitches[2] +\n            index_of_input_dim3;\n\n      float x00 = getInputFloat(input_index);\n      float x10, x01, x11;\n\n      bool end_of_dim2 = false;\n      if (index_of_input_dim2 == (${inputs[0].dims[2]} - 1)) {\n        // It's the end in dimension 2\n        x01 = x00;\n        end_of_dim2 = true;\n      } else {\n        x01 = getInputFloat(input_index + input_pitches[2]);\n      }\n\n      if (index_of_input_dim3 == (input_pitches[2] - 1)) {\n        // It's the end in dimension 3\n        x10 = x00;\n        x11 = x01;\n      }\n      else {\n        x10 = getInputFloat(input_index + 1);\n        x11 = end_of_dim2 ? x10 : getInputFloat(input_index + input_pitches[2] + 1);\n      }\n\n      float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[2]);\n      float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[2]);\n      return y0 + float(x_offset) * (y1 - y0) / float(scales[3]);\n    }` :\n              // bilinear 2D\n              `\n    ${getInputFloatFunction}\n    float process(int indices[2]) {\n      int input_index = 0;\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\n\n      ${precalculatedPitches}\n\n      int m;\n      int index_of_dim0, index_of_dim1;\n      index_of_dim0 = output_index / output_pitches[0];\n      m = output_index - index_of_dim0 * output_pitches[0];\n      index_of_dim1 = m;\n\n      int index_of_input_dim0, index_of_input_dim1, x_offset, y_offset;\n      index_of_input_dim0 = index_of_dim0 / scales[0];\n      y_offset = index_of_dim0 - index_of_input_dim0 * scales[0];\n      index_of_input_dim1 = index_of_dim1 / scales[1];\n      x_offset = index_of_dim1 - index_of_input_dim1 * scales[1];\n\n      input_index = index_of_input_dim0 * input_pitches[0] + index_of_input_dim1;\n\n      float x00 = getInputFloat(input_index);\n      float x10, x01, x11;\n\n      bool end_of_dim0 = false;\n      if (index_of_input_dim0 == (${inputs[0].dims[0]} - 1)) {\n        // It's the end in dimension 0\n        x01 = x00;\n        end_of_dim0 = true;\n      } else {\n        x01 = getInputFloat(input_index + input_pitches[0]);\n      }\n\n      if (index_of_input_dim1 == (input_pitches[0] - 1)) {\n        // It's the end in dimension 1\n        x10 = x00;\n        x11 = x01;\n      }\n      else {\n        x10 = getInputFloat(input_index + 1);\n        x11 = end_of_dim0 ? x10 : getInputFloat(input_index + input_pitches[0] + 1);\n      }\n\n      float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[0]);\n      float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[0]);\n      return y0 + float(x_offset) * (y1 - y0) / float(scales[1]);\n    }`;\n      return {\n        ...upsampleProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n        variables: [{\n          name: 'scales',\n          type: 'int',\n          arrayLength: attributes.scales.length,\n          data: attributes.scales.map(x => Math.ceil(x))\n        }]\n      };\n    };\n\nexport const validateInputs = (inputs: Tensor[], attribute: UpsampleAttributes): void => {\n  if (!inputs || (attribute.opset < 9 && inputs.length !== 1) ||\n      (attribute.opset >= 9 && attribute.opset < 11 && inputs.length !== 2) ||\n      (attribute.opset >= 11 && inputs.length < 2)) {\n    throw new Error('invalid inputs.');\n  }\n\n  if (attribute.scales.length > 0 && inputs[0].dims.length !== attribute.scales.length) {\n    throw new Error('Invalid input shape.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('Invalid input tensor types.');\n  }\n};\n\nexport const scalesValidation = (scales: number[], mode: string, isResize: boolean): void => {\n  if (!isResize) {\n    for (const scale of scales) {\n      if (scale < 1) {\n        throw new Error('Scale value should be greater than or equal to 1.');\n      }\n    }\n  } else {\n    for (const scale of scales) {\n      if (scale <= 0) {\n        throw new Error('Scale value should be greater than 0.');\n      }\n    }\n  }\n  if (mode === 'linear' || mode === 'cubic') {\n    if (scales.length !== 2 && (scales.length !== 4 || scales[0] !== 1 || scales[1] !== 1)) {\n      throw new Error(`'Linear' mode and 'Cubic' mode only support 2-D inputs ('Bilinear', 'Bicubic') \\\n        or 4-D inputs with the corresponding outermost 2 scale values being 1 \\\n        in the ${isResize ? 'Resize' : 'Upsample'} opeartor.`);\n    }\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\n\nimport {Logger, Profiler} from '../../instrument';\n\nimport {GlslPreprocessor} from './glsl-preprocessor';\nimport {getVertexShaderSource} from './glsl-source';\nimport {TextureLayoutStrategy} from './texture-layout-strategy';\nimport {Artifact, ProgramInfo, ProgramVariable, TextureData, TextureLayout, VariableInfo} from './types';\nimport {WebGLContext} from './webgl-context';\n\n/**\n * ProgramManager is the main class behind running computations\n * It builds ProgramInfo's into Artifacts\n * It compiles given ProgramInfo's into WebGL Prorams (cached as Artifacts)\n * Uses the artifact to run the computation by calling Draw on\n * the WebGL drawing buffer\n * ProgramManager automatically maps (binds) input variables to their\n * corresponding Location's in the binary program\n */\nexport class ProgramManager {\n  repo: Map<unknown, Artifact>;  // this should be per-session object\n  vertexShader: WebGLShader;\n  attributesBound: boolean;\n\n  constructor(\n      public profiler: Readonly<Profiler>, public glContext: WebGLContext,\n      public textureLayoutStrategy: TextureLayoutStrategy) {\n    this.repo = new Map();\n    this.attributesBound = false;\n  }\n  getArtifact(key: unknown): Artifact|undefined {\n    return this.repo.get(key);\n  }\n  setArtifact(key: unknown, artifact: Artifact): void {\n    this.repo.set(key, artifact);\n  }\n  run(buildArtifact: Artifact, inputs: TextureData[], output: TextureData): void {\n    this.profiler.event('op', `ProgramManager.run ${buildArtifact.programInfo.name ?? 'unknown kernel'}`, () => {\n      const gl = this.glContext.gl;\n      const program = buildArtifact.program;\n      gl.useProgram(program);\n      try {\n        this.bindOutput(output);\n        if (!this.attributesBound) {\n          this.bindAttributes(buildArtifact.attribLocations);\n        }\n        this.bindUniforms(buildArtifact.uniformLocations, buildArtifact.programInfo.variables ?? [], inputs);\n      } catch (err) {\n        Logger.error('ProgramManager', buildArtifact.programInfo.shaderSource);\n        throw err;\n      }\n      this.profiler.event('backend', 'GlContext.draw()', () => {\n        this.glContext.draw();\n      });\n    }, this.glContext);\n  }\n  dispose(): void {\n    if (this.vertexShader) {\n      this.glContext.deleteShader(this.vertexShader);\n    }\n    this.repo.forEach(a => this.glContext.deleteProgram(a.program));\n  }\n  build(programInfo: ProgramInfo, inputTextureLayouts: TextureLayout[], outputTextureLayout: TextureLayout): Artifact {\n    return this.profiler.event('backend', 'ProgramManager.build', () => {\n      const preprocessor = new GlslPreprocessor(this.glContext, programInfo, inputTextureLayouts, outputTextureLayout);\n      const fragScript = preprocessor.preprocess();\n      const program = this.compile(fragScript);\n      const artifact = {\n        programInfo,\n        program,\n        uniformLocations: this.getUniformLocations(\n            program, preprocessor.context.programInfo.inputNames, preprocessor.context.programInfo.variables),\n        attribLocations: this.getAttribLocations(program)\n      };\n      return artifact;\n    });\n  }\n  protected compile(fragShaderScript: string): WebGLProgram {\n    if (!this.vertexShader) {\n      Logger.verbose('ProrgramManager', 'Compiling and caching Vertex shader for the first time');\n      const vertexShaderScript = getVertexShaderSource(this.glContext.version);\n      this.vertexShader = this.glContext.compileShader(vertexShaderScript, this.glContext.gl.VERTEX_SHADER);\n    }\n    if (env.debug) {\n      Logger.verbose('ProrgramManager', `FragShader:\n${fragShaderScript}\n`);\n    }\n    const fragShader = this.glContext.compileShader(fragShaderScript, this.glContext.gl.FRAGMENT_SHADER);\n    const program = this.glContext.createProgram(this.vertexShader, fragShader);\n    this.glContext.deleteShader(fragShader);\n    return program;\n  }\n  bindOutput(td: TextureData): void {\n    const width = td.width;\n    const height = td.height;\n    Logger.verbose(\n        'ProrgramManager',\n        `Binding output texture to Framebuffer: w/h=${width}/${height}, shape=${td.shape}, type=${td.tensor.type}`);\n    this.glContext.attachFramebuffer(td.texture, width, height);\n  }\n  bindAttributes(attribLocations: Artifact.AttribLocations): void {\n    const positionHandle = attribLocations.position;\n    const textureCoordHandle = attribLocations.textureCoord;\n    this.glContext.setVertexAttributes(positionHandle, textureCoordHandle);\n    this.attributesBound = true;\n  }\n  bindUniforms(uniformLocations: Artifact.UniformLocations, variables: ProgramVariable[], textures: TextureData[]):\n      void {\n    const gl = this.glContext.gl;\n    let texturePosition = 0;\n    for (const {name, type, location, arrayLength} of uniformLocations) {\n      const value = variables.find(v => v.name === name)?.data;\n      if (type !== 'sampler2D' && !value) {\n        throw new Error(`variable '${name}' does not have data defined in program info`);\n      }\n      switch (type) {\n        case 'sampler2D':\n          this.bindTexture(textures[texturePosition], location, texturePosition);\n          texturePosition++;\n          break;\n        case 'float':\n          if (arrayLength) {\n            gl.uniform1fv(location, value as number[]);\n          } else {\n            gl.uniform1f(location, value as number);\n          }\n          break;\n        case 'int':\n          if (arrayLength) {\n            gl.uniform1iv(location, value as number[]);\n          } else {\n            gl.uniform1i(location, value as number);\n          }\n          break;\n        default:\n          throw new Error(`Uniform not implemented: ${type}`);\n      }\n    }\n  }\n  bindTexture(td: TextureData, uniformHandle: WebGLUniformLocation, position: number): void {\n    this.glContext.bindTextureToUniform(td.texture, position, uniformHandle);\n  }\n  getAttribLocations(program: WebGLProgram): Artifact.AttribLocations {\n    return {\n      position: this.getAttribLocation(program, 'position'),\n      textureCoord: this.getAttribLocation(program, 'textureCoord')\n    };\n  }\n  getUniformLocations(program: WebGLProgram, samplers?: string[], variables?: VariableInfo[]):\n      Artifact.UniformLocations {\n    const uniformLocations: Artifact.UniformLocations = [];\n    if (samplers) {\n      for (const sampler of samplers) {\n        uniformLocations.push({name: sampler, type: 'sampler2D', location: this.getUniformLocation(program, sampler)});\n      }\n    }\n    if (variables) {\n      for (const variable of variables) {\n        uniformLocations.push({...variable, location: this.getUniformLocation(program, variable.name)});\n      }\n    }\n    return uniformLocations;\n  }\n  getUniformLocation(program: WebGLProgram, name: string): WebGLUniformLocation {\n    const gl = this.glContext.gl;\n    const reference = gl.getUniformLocation(program, name);\n    if (reference === null) {\n      throw new Error(`Uniform ${name} not found.`);\n    }\n    return reference;\n  }\n  getAttribLocation(program: WebGLProgram, name: string): number {\n    const gl = this.glContext.gl;\n    const attributeLocation: number = gl.getAttribLocation(program, name);\n    return attributeLocation;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {SessionHandler} from '../../backend';\nimport {Graph} from '../../graph';\nimport {Logger} from '../../instrument';\nimport {Operator} from '../../operators';\nimport {OpSet, resolveOperator} from '../../opset';\nimport {Session} from '../../session';\nimport {Tensor} from '../../tensor';\nimport {WebGLBackend} from '../backend-webgl';\n\nimport {WebGLInferenceHandler} from './inference-handler';\nimport {WEBGL_OP_RESOLVE_RULES} from './op-resolve-rules';\nimport {ProgramManager} from './program-manager';\nimport {PreferLogicalStrategy, TextureLayoutStrategy} from './texture-layout-strategy';\nimport {TextureManager} from './texture-manager';\nimport {TextureData} from './types';\n\nexport class WebGLSessionHandler implements SessionHandler {\n  programManager: ProgramManager;\n  textureManager: TextureManager;\n  layoutStrategy: TextureLayoutStrategy;\n  packedTextureDataCache: Map<Tensor.Id, TextureData>;\n  unpackedTextureDataCache: Map<Tensor.Id, TextureData>;\n  pack2unpackMap: Map<Tensor.Id, Tensor.Id>;\n  unpack2packMap: Map<Tensor.Id, Tensor.Id>;\n  initializers: Set<Tensor.Id>;\n  pack?: boolean;\n\n  constructor(public readonly backend: WebGLBackend, public readonly context: Session.Context) {\n    this.layoutStrategy = new PreferLogicalStrategy(backend.glContext.maxTextureSize);\n    this.programManager = new ProgramManager(this.context.profiler, backend.glContext, this.layoutStrategy);\n    this.textureManager = new TextureManager(\n        backend.glContext, this.layoutStrategy, this.context.profiler,\n        {reuseTextures: backend.textureCacheMode === 'full'});\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache = new Map();\n    this.pack = backend.pack;\n    this.pack2unpackMap = new Map();\n    this.unpack2packMap = new Map();\n  }\n\n  createInferenceHandler() {\n    return new WebGLInferenceHandler(this);\n  }\n  onGraphInitialized(graph: Graph): void {\n    const initializers = graph.getValues().filter(v => v.from === -1 && v.tensor).map(v => v.tensor!.dataId);\n    this.initializers = new Set(initializers);\n  }\n  isInitializer(tensorId: Tensor.Id): boolean {\n    return this.initializers ? this.initializers.has(tensorId) : false;\n  }\n  addInitializer(tensorId: Tensor.Id): void {\n    this.initializers.add(tensorId);\n  }\n  getTextureData(tensorId: Tensor.Id, isPacked: boolean): TextureData|undefined {\n    if (isPacked) {\n      return this.packedTextureDataCache.get(tensorId);\n    } else {\n      return this.unpackedTextureDataCache.get(tensorId);\n    }\n  }\n  setTextureData(tensorId: Tensor.Id, textureData: TextureData, isPacked = false): void {\n    Logger.verbose('WebGLSessionHandler', 'Storing Texture data in cache');\n    if (isPacked) {\n      this.packedTextureDataCache.set(tensorId, textureData);\n    } else {\n      this.unpackedTextureDataCache.set(tensorId, textureData);\n    }\n  }\n  dispose(): void {\n    this.programManager.dispose();\n    this.textureManager.clearActiveTextures();\n    this.packedTextureDataCache.forEach(td => this.textureManager.releaseTexture(td, true));\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache.forEach(td => this.textureManager.releaseTexture(td, true));\n    this.unpackedTextureDataCache = new Map();\n  }\n  resolve(node: Graph.Node, opsets: readonly OpSet[], graph: Graph): Operator {\n    const op = resolveOperator(node, opsets, WEBGL_OP_RESOLVE_RULES);\n    return {impl: op.opImpl, context: op.opInit ? op.opInit(node, graph) : node};\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../instrument';\n\nexport declare namespace Encoder {\n  export interface DataTypeMap {\n    float: Float32Array;\n    byte: Uint8Array;\n    int: Uint32Array;\n  }\n  export type DataType = keyof DataTypeMap;\n  type DataArrayType = DataTypeMap[DataType];\n\n  /* eslint-disable @typescript-eslint/naming-convention */\n  export const enum Usage {\n    Default = 0,\n    UploadOnly,\n    Download4BytesAsFloat32,\n  }\n}\n\n/**\n * Abstraction for mapping data types to texture texlets\n * Encoding means how a Float32 is mapped to 1 or 4 channels for each texlet\n * Decoding means how a texlet's channels are mapped to a resulting Float32\n */\nexport interface DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize: number;\n  encode(src: Encoder.DataArrayType, textureSize: number): Encoder.DataArrayType;\n  allocate(size: number): Encoder.DataArrayType;\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Encoder.DataArrayType;\n}\n/**\n * WebGL2 data encoder\n * Uses R32F as the format for texlet\n */\nexport class RedFloat32DataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize: number;\n  constructor(gl: WebGL2RenderingContext, channels = 1) {\n    if (channels === 1) {\n      this.internalFormat = gl.R32F;\n      this.format = gl.RED;\n      this.textureType = gl.FLOAT;\n      this.channelSize = channels;\n    } else if (channels === 4) {\n      this.internalFormat = gl.RGBA32F;\n      this.format = gl.RGBA;\n      this.textureType = gl.FLOAT;\n      this.channelSize = channels;\n    } else {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n  }\n  encode(src: Encoder.DataArrayType, textureSize: number): Encoder.DataArrayType {\n    let result: Float32Array;\n    let source: Float32Array;\n    if (src.constructor !== Float32Array) {\n      Logger.warning('Encoder', 'data was not of type Float32; creating new Float32Array');\n      source = new Float32Array(src);\n    }\n    if (textureSize * this.channelSize > src.length) {\n      Logger.warning('Encoder', 'Source data too small. Allocating larger array');\n      source = src as Float32Array;\n      result = this.allocate(textureSize * this.channelSize) as Float32Array;\n      source.forEach((v, i) => result[i] = v);\n    } else {\n      source = src as Float32Array;\n      result = source;\n    }\n    return result;\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Float32Array(size * 4);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Float32Array {\n    if (this.channelSize === 1) {\n      const filteredData = (buffer as Float32Array).filter((value, index) => index % 4 === 0).subarray(0, dataSize);\n      return filteredData;\n    }\n    return buffer.subarray(0, dataSize) as Float32Array;\n  }\n}\n/**\n * Data encoder for WebGL 1 with support for floating point texture\n */\nexport class RGBAFloatDataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize: number;\n  constructor(gl: WebGLRenderingContext, channels = 1, textureType?: number) {\n    if (channels !== 1 && channels !== 4) {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n    this.internalFormat = gl.RGBA;\n    this.format = gl.RGBA;\n    this.channelSize = channels;\n    this.textureType = textureType || gl.FLOAT;\n  }\n  encode(src: Float32Array, textureSize: number): Encoder.DataArrayType {\n    let dest = src;\n    if (this.channelSize === 1) {\n      Logger.verbose('Encoder', 'Exploding into a larger array');\n      dest = this.allocate(textureSize) as Float32Array;\n      src.forEach((v, i) => dest[i * 4] = v);\n    }\n    return dest;\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Float32Array(size * 4);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Float32Array {\n    if (this.channelSize === 1) {\n      const filteredData = (buffer as Float32Array).filter((value, index) => index % 4 === 0).subarray(0, dataSize);\n      return filteredData;\n    }\n    return buffer.subarray(0, dataSize) as Float32Array;\n  }\n}\n\nexport class Uint8DataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize = 4;\n  constructor(gl: WebGLRenderingContext, channels = 1) {\n    if (channels === 1) {\n      this.internalFormat = gl.ALPHA;\n      this.format = gl.ALPHA;  // not tested\n      this.textureType = gl.UNSIGNED_BYTE;\n      this.channelSize = channels;\n    } else if (channels === 4) {\n      this.internalFormat = gl.RGBA;\n      this.format = gl.RGBA;\n      this.textureType = gl.UNSIGNED_BYTE;\n      this.channelSize = channels;\n    } else {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n  }\n  encode(src: Uint8Array, _textureSize: number): Encoder.DataArrayType {\n    return new Uint8Array(src.buffer, src.byteOffset, src.byteLength);\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Uint8Array(size * this.channelSize);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Uint8Array {\n    if (buffer instanceof Uint8Array) {\n      return buffer.subarray(0, dataSize);\n    }\n    throw new Error(`Invalid array type: ${buffer.constructor}`);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../instrument';\nimport {assert} from '../../util';\n\n/** Layout preferences */\nexport interface WidthHeightPrefs {\n  breakAxis?: number;\n  isPacked?: boolean;\n  reverseWH?: boolean;\n}\n/**\n * TextureLayoutStrategy is an abstraction for different plans\n * for mapping n-dimensional arrays to 2D textures (and back)\n */\nexport interface TextureLayoutStrategy {\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number];\n}\n\n/**\n * This strategy try to find the minimal max(W,H) that fulfills (W * H == totalSize)\n */\nexport class AlwaysKeepOriginalSizeStrategy implements TextureLayoutStrategy {\n  constructor(public maxTextureSize: number) {}\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\n    // scalar tensor\n    if (shape.length === 0) {\n      return [1, 1];\n    }\n    const maxTextureSize = this.maxTextureSize;\n    if (prefs && prefs.breakAxis !== undefined) {\n      // check to see if dims fit\n      const wsize = prefs.breakAxis >= shape.length ? 1 : shape.slice(prefs.breakAxis).reduce((a, b) => a * b);\n      const hsize = prefs.breakAxis <= 0 ? 1 : shape.slice(0, prefs.breakAxis).reduce((a, b) => a * b);\n      if (wsize > maxTextureSize || hsize > maxTextureSize) {\n        // ignore preferences\n        // continue with default layout\n        Logger.verbose(\n            'TextureLayout',\n            `Given width/height preferences were unattainable: shape:${shape}, breakAxis:${prefs.breakAxis}`);\n      } else {\n        return [wsize, hsize];\n      }\n    }\n    const totalSize = shape.reduce((a, b) => a * b);\n\n    let width = Math.floor(Math.sqrt(totalSize));\n\n    for (; width < maxTextureSize && width < totalSize; width++) {\n      if (totalSize % width === 0) {\n        break;\n      }\n    }\n\n    if (width >= maxTextureSize || totalSize % width !== 0) {\n      throw new Error(`The given dimensions are outside this GPU's boundaries: ${shape}`);\n    }\n    return [width, totalSize / width];\n  }\n}\n\nexport class PreferLogicalStrategy implements TextureLayoutStrategy {\n  constructor(public maxTextureSize: number) {}\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\n    const wh = this.computeTexture(shape, prefs);\n    if (prefs && prefs.isPacked) {\n      wh[0] /= 2;\n      wh[1] /= 2;\n    }\n    if (prefs && prefs.reverseWH) {\n      return [wh[1], wh[0]];\n    }\n    return wh;\n  }\n\n  computeTexture(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\n    const isPacked = prefs && prefs.isPacked;\n    // scalar tensor\n    if (shape.length === 0) {\n      return isPacked ? [2, 2] : [1, 1];\n    }\n    let maxTextureSize = this.maxTextureSize;\n    if (prefs && prefs.breakAxis !== undefined) {\n      // check to see if dims fit\n      const wsize = prefs.breakAxis >= shape.length ? 1 : shape.slice(prefs.breakAxis).reduce((a, b) => a * b);\n      const hsize = prefs.breakAxis <= 0 ? 1 : shape.slice(0, prefs.breakAxis).reduce((a, b) => a * b);\n      if (wsize > maxTextureSize || hsize > maxTextureSize) {\n        // ignore preferences\n        // continue with default layout\n        Logger.verbose(\n            'TextureLayout',\n            `Given width/height preferences were unattainable: shape:${shape}, breakAxis:${prefs.breakAxis}`);\n      } else {\n        return [wsize, hsize];\n      }\n    }\n    let logShape = shape.slice(0);\n    if (isPacked) {\n      maxTextureSize = maxTextureSize * 2;\n\n      // This logic ensures we accurately count the number of packed texels needed\n      // to accommodate the tensor. We can only pack values in the same texel if\n      // they are from adjacent pairs of rows/cols within the same batch. So if a\n      // tensor has 3 rows, we pretend it has 4 rows in order to account for the\n      // fact that the texels containing the third row are half empty.\n      logShape = logShape.map(\n          (d, i) => i >= logShape.length - 2 ? (logShape[i] % 2 === 0 ? logShape[i] : logShape[i] + 1) : logShape[i]);\n\n      // Packed texture height is at least 2 (the channel height of a single\n      // texel).\n      if (logShape.length === 1) {\n        logShape = [2, logShape[0]];\n      }\n    }\n\n    // If logical shape is 2, we don't squeeze, since we want to match physical.\n    if (logShape.length !== 2) {\n      const squeezeResult = squeezeShape(logShape);\n      logShape = squeezeResult.newShape;\n    }\n\n    const size = sizeFromShape(logShape);\n    if (logShape.length <= 1 && size <= maxTextureSize) {\n      return [1, size];\n    } else if (logShape.length === 2 && logShape[0] <= maxTextureSize && logShape[1] <= maxTextureSize) {\n      return logShape as [number, number];\n    } else if (logShape.length === 3 && logShape[0] * logShape[1] <= maxTextureSize && logShape[2] <= maxTextureSize) {\n      return [logShape[0] * logShape[1], logShape[2]];\n    } else if (logShape.length === 3 && logShape[0] <= maxTextureSize && logShape[1] * logShape[2] <= maxTextureSize) {\n      return [logShape[0], logShape[1] * logShape[2]];\n    } else if (\n        logShape.length === 4 && logShape[0] * logShape[1] * logShape[2] <= maxTextureSize &&\n        logShape[3] <= maxTextureSize) {\n      return [logShape[0] * logShape[1] * logShape[2], logShape[3]];\n    } else if (\n        logShape.length === 4 && logShape[0] <= maxTextureSize &&\n        logShape[1] * logShape[2] * logShape[3] <= maxTextureSize) {\n      return [logShape[0], logShape[1] * logShape[2] * logShape[3]];\n    } else {\n      if (isPacked) {\n        // For packed textures size equals the number of channels required to\n        // accommodate the texture data. However in order to squarify such that\n        // inner dimensions stay even, we rewrite size to equal the number of\n        // texels. Then in the return statement we rehydrate the squarified\n        // dimensions to channel units.\n        return sizeToSquarishShape(size / 4).map(d => d * 2) as [number, number];\n      }\n      return sizeToSquarishShape(size);\n    }\n  }\n}\n\nexport function squeezeShape(shape: number[], axis?: number[]): {newShape: number[]; keptDims: number[]} {\n  const newShape: number[] = [];\n  const keptDims: number[] = [];\n  const isEmptyArray = axis != null && Array.isArray(axis) && axis.length === 0;\n  const axes = (axis == null || isEmptyArray) ? null : parseAxisParam(axis, shape).sort();\n  let j = 0;\n  for (let i = 0; i < shape.length; ++i) {\n    if (axes != null) {\n      if (axes[j] === i && shape[i] !== 1) {\n        throw new Error(`Can't squeeze axis ${i} since its dim '${shape[i]}' is not 1`);\n      }\n      if ((axes[j] == null || axes[j] > i) && shape[i] === 1) {\n        newShape.push(shape[i]);\n        keptDims.push(i);\n      }\n      if (axes[j] <= i) {\n        j++;\n      }\n    }\n    if (shape[i] !== 1) {\n      newShape.push(shape[i]);\n      keptDims.push(i);\n    }\n  }\n  return {newShape, keptDims};\n}\n\nexport function parseAxisParam(axis: number|number[], shape: number[]): number[] {\n  const rank = shape.length;\n\n  // Normalize input\n  axis = axis == null ? shape.map((s, i) => i) : ([] as number[]).concat(axis);\n\n  // Check for valid range\n  assert(\n      axis.every(ax => ax >= -rank && ax < rank),\n      () => `All values in axis param must be in range [-${rank}, ${rank}) but ` +\n          `got axis ${axis}`);\n\n  // Check for only integers\n  assert(\n      axis.every(isInt),\n      () => 'All values in axis param must be integers but ' +\n          `got axis ${axis}`);\n\n  // Handle negative axis.\n  return axis.map(a => a < 0 ? rank + a : a);\n}\nexport function isInt(a: number): boolean {\n  return a % 1 === 0;\n}\nexport function sizeFromShape(shape: number[]): number {\n  if (shape.length === 0) {\n    // Scalar.\n    return 1;\n  }\n  let size = shape[0];\n  for (let i = 1; i < shape.length; i++) {\n    size *= shape[i];\n  }\n  return size;\n}\nexport function getRowsCols(shape: number[]): [number, number] {\n  if (shape.length === 0) {\n    throw Error('Cannot get rows and columns of an empty shape array.');\n  }\n\n  return [shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]];\n}\nexport function sizeToSquarishShape(size: number): [number, number] {\n  const width = Math.ceil(Math.sqrt(size));\n  return [width, Math.ceil(size / width)];\n}\nexport function getBatchDim(shape: number[], dimsToSkip = 2): number {\n  return sizeFromShape(shape.slice(0, shape.length - dimsToSkip));\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ShapeUtil} from '../../util';\n\nimport {TextureLayoutStrategy, WidthHeightPrefs} from './texture-layout-strategy';\nimport {TextureLayout, TextureType} from './types';\n\nexport const createTextureLayoutFromTextureType =\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[],\n     textureType: TextureType): TextureLayout => {\n      const channel = (textureType === TextureType.unpacked || textureType === TextureType.unpackedReversed) ? 1 : 4;\n      const isPacked = textureType === TextureType.packed;\n      const reverseWH = (textureType === TextureType.unpackedReversed || textureType === TextureType.packed);\n      const breakAxis = textureType === TextureType.packedLastDimension ? shape.length - 1 : undefined;\n      const unpackedShape = textureType === TextureType.packedLastDimension ?\n          shape.map((d, i) => i === shape.length - 1 ? d * 4 : d) :\n          undefined;\n      return createTextureLayoutFromShape(\n          textureLayoutStrategy, shape, channel, unpackedShape, {isPacked, reverseWH, breakAxis});\n    };\n\nexport const calculateTextureWidthAndHeight =\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[], textureType: TextureType):\n        [number, number] => {\n          const layout = createTextureLayoutFromTextureType(textureLayoutStrategy, shape, textureType);\n          return [layout.width, layout.height];\n        };\n\n/**\n * Create a TextureLayout object from shape.\n */\nexport const createTextureLayoutFromShape =\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[], channels: 1|4 = 1,\n     unpackedShape?: readonly number[], prefs?: WidthHeightPrefs): TextureLayout => {\n      const isPacked = !!(prefs && prefs.isPacked);\n      const [width, height] = textureLayoutStrategy.computeTextureWH(isPacked ? unpackedShape || shape : shape, prefs);\n      const rank = shape.length;\n      let inferredDims = shape.slice(0);\n      if (rank === 0) {\n        inferredDims = [1];\n      }\n      if (channels === 1) {\n        // unpackedShape will take `shape` and not `inferredDims` so as to create a scalar Tensor if need be\n        unpackedShape = shape;\n      } else if (isPacked) {\n        if (channels !== 4) {\n          throw new Error('a packed texture must be 4-channel');\n        }\n        unpackedShape = shape;\n        if (rank > 0) {\n          inferredDims[rank - 1] = Math.ceil(inferredDims[rank - 1] / 2);\n        }\n        if (rank > 1) {\n          inferredDims[rank - 2] = Math.ceil(inferredDims[rank - 2] / 2);\n        }\n      } else if (!unpackedShape) {\n        throw new Error('Unpacked shape is needed when using channels > 1');\n      }\n      return {\n        width,\n        height,\n        channels,\n        isPacked,\n        shape: inferredDims,\n        strides: ShapeUtil.computeStrides(inferredDims),\n        unpackedShape,\n        reversedWH: (prefs && prefs.reverseWH)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger, Profiler} from '../../instrument';\nimport {Tensor} from '../../tensor';\n\nimport {Encoder} from './texture-data-encoder';\nimport {TextureLayoutStrategy} from './texture-layout-strategy';\nimport {TextureData, TextureLayout} from './types';\nimport {WebGLContext} from './webgl-context';\n\nexport interface TextureManagerConfig {\n  reuseTextures?: boolean;\n}\n\n/**\n * TextureManager is the mainly responsible for caching Textures\n * Textures are cached in 2 levels:\n *   1. the texures which are associated with a dataId (from Tensor)\n *    Caching these is crucial to performance. These are In-use Textures\n *   2. textures which are not in use by any current ProgramInfo/Tensor\n *     These are called Free Textures\n * TextureManager is also used to help creating textures. For this it\n * uses WebGLContext and TextureLayoutStrategy\n */\nexport class TextureManager {\n  private readonly inUseTextures: Map<string, WebGLTexture[]>;\n  private readonly idleTextures: Map<string, WebGLTexture[]>;\n  private readonly textureLookup: Map<WebGLTexture, string>;\n  private readonly pendingRead: Map<Tensor.Id, Array<(arr: Tensor.NumberType) => void>> = new Map();\n\n  constructor(\n      public glContext: WebGLContext, public layoutStrategy: TextureLayoutStrategy, public profiler: Readonly<Profiler>,\n      private config: TextureManagerConfig) {\n    if (config.reuseTextures) {\n      this.inUseTextures = new Map();\n      this.idleTextures = new Map();\n      this.textureLookup = new Map();\n    }\n  }\n  createTextureFromLayout(\n      dataType: Tensor.DataType, layout: TextureLayout, data?: Tensor.NumberType, usage?: Encoder.Usage) {\n    const textureDataType = this.toEncoderType(dataType);\n\n    const encoder = this.glContext.getEncoder(textureDataType, layout.channels || 1, usage);\n    if (layout.isPacked && usage === Encoder.Usage.UploadOnly) {\n      throw new Error('not implemented');\n    }\n    const width = layout.width;\n    const height = layout.height;\n\n    let key: string|undefined;\n    let inUseTextures: WebGLTexture[]|undefined;\n    if (this.config.reuseTextures) {\n      key = `${width}x${height}_${encoder.format}_${encoder.internalFormat}_${encoder.textureType}`;\n      inUseTextures = this.inUseTextures.get(key);\n      if (!inUseTextures) {\n        inUseTextures = [];\n        this.inUseTextures.set(key, inUseTextures);\n      }\n\n      const idleTextures = this.idleTextures.get(key);\n      if (idleTextures && idleTextures.length > 0) {\n        const texture = idleTextures.pop()!;\n        inUseTextures.push(texture);\n        if (usage === Encoder.Usage.UploadOnly) {\n          this.glContext.updateTexture(texture, width, height, encoder, this.toTextureData(dataType, data)!);\n        }\n        return texture;\n      }\n    }\n\n    Logger.verbose('TextureManager', `Creating new texture of size ${layout.width}x${layout.height}`);\n    const texture = this.glContext.allocateTexture(width, height, encoder, this.toTextureData(dataType, data));\n\n    if (this.config.reuseTextures) {\n      inUseTextures!.push(texture);\n      this.textureLookup.set(texture, key!);\n    }\n    return texture;\n  }\n  readTexture(td: TextureData, dataType: Tensor.DataType, channels?: number): Tensor.NumberType {\n    if (!channels) {\n      channels = 1;\n    }\n    return this.profiler.event('backend', 'TextureManager.readTexture', () => {\n      const dataSize = td.shape.reduce((a, b) => a * b) * channels!;\n      const data = this.glContext.readTexture(\n          td.texture, td.width, td.height, dataSize, this.toEncoderType(dataType), channels!);\n      return this.toTensorData(dataType, data);\n    });\n  }\n  async readTextureAsync(td: TextureData, dataType: Tensor.DataType, channels?: number): Promise<Tensor.NumberType> {\n    const dataId = td.tensor.dataId;\n    if (!channels) {\n      channels = 1;\n    }\n    if (this.pendingRead.has(dataId)) {\n      const subscribers = this.pendingRead.get(dataId);\n      return new Promise<Tensor.NumberType>(resolve => subscribers?.push(resolve));\n    }\n    return this.profiler.event('backend', 'TextureManager.readTextureAsync', async () => {\n      this.pendingRead.set(dataId, []);\n      const dataSize = td.shape.reduce((a, b) => a * b) * channels!;\n      // add a fence waiting for the data to be ready\n      await this.glContext.createAndWaitForFence();\n      const data = this.glContext.readTexture(\n          td.texture, td.width, td.height, dataSize, this.toEncoderType(dataType), channels!);\n      const tensorData = this.toTensorData(dataType, data);\n      const subscribers = this.pendingRead.get(dataId);\n      this.pendingRead.delete(dataId);\n      subscribers?.forEach(resolve => resolve(tensorData));\n      return tensorData;\n    });\n  }\n  readUint8TextureAsFloat(td: TextureData): Float32Array {\n    return this.profiler.event('backend', 'TextureManager.readUint8TextureAsFloat', () => {\n      const dataSize = td.shape.reduce((a, b) => a * b);\n      const data = this.glContext.readTexture(td.texture, td.width, td.height, dataSize * 4, 'byte', 4);\n      return new Float32Array(data.buffer, data.byteOffset, dataSize);\n    });\n  }\n  releaseTexture(textureData: TextureData, deleteTexture?: boolean): void {\n    let key: string|undefined;\n    if (this.config.reuseTextures) {\n      key = this.textureLookup.get(textureData.texture);\n      if (key) {\n        if (deleteTexture) {\n          this.textureLookup.delete(key);\n        }\n        const inUseTextures = this.inUseTextures.get(key);\n        if (inUseTextures) {\n          const index = inUseTextures.indexOf(textureData.texture);\n          if (index !== -1) {\n            inUseTextures.splice(index, 1);\n            let idleTextures = this.idleTextures.get(key);\n            if (!idleTextures) {\n              idleTextures = [];\n              this.idleTextures.set(key, idleTextures);\n            }\n            idleTextures.push(textureData.texture);\n          }\n        }\n      }\n    }\n\n    if (!key || deleteTexture) {\n      Logger.verbose('TextureManager', `Deleting texture of size ${textureData.width}x${textureData.height}`);\n      this.glContext.deleteTexture(textureData.texture);\n    }\n  }\n  toTensorData(dataType: Tensor.DataType, data: Encoder.DataArrayType): Tensor.NumberType {\n    switch (dataType) {\n      case 'int16':\n        return data instanceof Int16Array ? data : Int16Array.from(data);\n      case 'int32':\n        return data instanceof Int32Array ? data : Int32Array.from(data);\n      case 'int8':\n        return data instanceof Int8Array ? data : Int8Array.from(data);\n      case 'uint16':\n        return data instanceof Uint16Array ? data : Uint16Array.from(data);\n      case 'uint32':\n        return data instanceof Uint32Array ? data : Uint32Array.from(data);\n      case 'uint8':\n      case 'bool':\n        return data instanceof Uint8Array ? data : Uint8Array.from(data);\n      case 'float32':\n        return data instanceof Float32Array ? data : Float32Array.from(data);\n      case 'float64':\n        return data instanceof Float64Array ? data : Float64Array.from(data);\n      default:\n        throw new Error(`TensorData type ${dataType} is not supported`);\n    }\n  }\n  toTextureData(dataType: Tensor.DataType, data: Tensor.NumberType|undefined): Encoder.DataArrayType|undefined {\n    if (!data) {\n      return undefined;\n    }\n    return (data instanceof Float32Array) ? data : new Float32Array(data);\n    /*\n    switch (dataType) {\n      case 'int16':\n      case 'int32':\n      case 'uint16':\n      case 'uint32':\n        return (data.constructor === Uint32Array) ? data as Uint32Array : new Uint32Array(data);\n      case 'int8':\n      case 'uint8':\n      case 'bool':\n        return (data.constructor === Uint8Array) ? data as Uint8Array : new Uint8Array(data);\n      case 'float32':\n      case 'float64':\n        return (data.constructor === Float32Array) ? data as Float32Array : new Float32Array(data);\n      default:\n        throw new Error(`TensorData type ${dataType} is not supported`);\n    }\n    */\n  }\n  toEncoderType(_dataType: Tensor.DataType): Encoder.DataType {\n    return 'float';\n    // switch (dataType) {\n    //   case 'int16':\n    //   case 'int32':\n    //   case 'uint16':\n    //   case 'uint32':\n    //     return 'int';\n    //   case 'uint8':\n    //   case 'bool':\n    //     return 'byte';\n    //   case 'float32':\n    //   case 'float64':\n    //     return 'float';\n    //   default:\n    //     throw new Error(`TensorData type ${dataType} is not supported`);\n    // }\n  }\n  clearActiveTextures(): void {\n    this.glContext.clearActiveTextures();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../tensor';\n\n/**\n * Layout info is used for mapping n-dimensional array to 2D textures\n * The layout is created by the TextureLayoutStrategy based on\n * the Tensor's dimensions and strides\n */\nexport interface TextureLayout {\n  width: number;\n  height: number;\n  /**\n   * specify the number of value that encoded in a single pixel\n   */\n  channels: 1|2|3|4;\n  /**\n   * whether in packed mode or not\n   */\n  isPacked?: boolean;\n  /**\n   * the normalized shape\n   */\n  shape: readonly number[];\n  /**\n   * the stride of each dimensions, calculated according to shape\n   */\n  strides: readonly number[];\n  /**\n   * the original shape(dims) of the corresponding tensor\n   */\n  unpackedShape: readonly number[];\n\n  reversedWH?: boolean;\n}\nexport interface TextureData extends TextureLayout {\n  tensor: Tensor;\n  texture: WebGLTexture;\n}\n\nexport enum TextureType {\n  unpacked,              // <-- normal unpacked texture\n  unpackedReversed,      // <-- unpacked texture used in old ONNX.js implementation (deprecated)\n  packed,                // <-- normal packed texture\n  downloadUint8AsFloat,  // <-- ONLY used in texture downloading for iOS devices\n  packedLastDimension    // <-- ONLY used in old ONNX.js Conv implementation for input W (deprecated)\n}\n\nexport interface TensorInfo {\n  id?: Tensor.Id;\n  dims: readonly number[];\n  type: Tensor.DataType;\n  textureType: TextureType;\n}\n\nexport interface ProgramVariable {\n  type: 'float'|'int';\n  name: string;\n  arrayLength?: number;\n  data: number|number[];\n}\n\n/**\n * A set of metadata of a shader program.\n */\nexport interface ProgramMetadata {\n  /**\n   * the name of the program. used for debugging and profiling\n   */\n  name: string;\n  /**\n   * texture types for each input\n   */\n  inputTypes: TextureType[];\n  /**\n   * names of each input\n   */\n  inputNames: string[];\n  /**\n   * an optional string as a cache hint in the artifact cache\n   */\n  cacheHint?: string;\n}\n\n/**\n * A ProgramInfoLoader allows\n */\nexport interface ProgramInfoLoader extends ProgramMetadata {\n  /**\n   * a function to get the program info\n   */\n  get(): ProgramInfo;\n}\n\n/**\n * A set of data that represent a shader program\n */\nexport interface ProgramInfo extends ProgramMetadata {\n  /**\n   * information of uniform variables\n   */\n  variables?: ProgramVariable[];\n  /**\n   * tensor info for output\n   */\n  output: TensorInfo;\n  /**\n   * the shader's processing source code\n   */\n  shaderSource: string;\n  /**\n   * whether the shader source contains a customized main function implementation\n   */\n  hasMain?: boolean;\n}\n\nexport interface VariableInfo {\n  type: 'float'|'int';\n  name: string;\n  arrayLength?: number;\n}\n\nexport interface ProgramVariable {\n  type: 'float'|'int';\n  name: string;\n  arrayLength?: number;\n  data: number|number[];\n}\n\n/**\n * Information of uniforms that shader uses\n */\nexport interface UniformInfo {\n  type: 'sampler2D'|VariableInfo['type'];\n  name: string;\n  arrayLength?: number;\n}\n\nexport interface UniformLocation extends UniformInfo {\n  location: WebGLUniformLocation;\n}\n\n/**\n * Artifact is the result of compilation\n * It does not contain input of output data\n * However anything that could be run as a \"program\"\n */\nexport interface Artifact {\n  programInfo: ProgramInfo;\n  program: WebGLProgram;\n  uniformLocations: UniformLocation[];\n  attribLocations: {position: number; textureCoord: number};\n}\nexport declare namespace Artifact {\n  type UniformLocations = Artifact['uniformLocations'];\n  type AttribLocations = Artifact['attribLocations'];\n}\n\nexport interface UniformData {\n  [name: string]: number|number[];\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {assert} from '../../util';\n/**\n * Given a non RGBA shape calculate the R version\n * It is assumed that the dimensions are multiples of given channels\n * NOTE: it is always the last dim that gets packed.\n * @param unpackedShape original shape to create a packed version from\n */\nexport function getPackedShape(unpackedShape: readonly number[]): readonly number[] {\n  const len = unpackedShape.length;\n  return unpackedShape.slice(0, len - 1).concat(unpackedShape[len - 1] / 4);\n}\n\nexport async function repeatedTry(\n    checkFn: () => boolean, delayFn = (_counter: number) => 0, maxCounter?: number): Promise<void> {\n  return new Promise<void>((resolve, reject) => {\n    let tryCount = 0;\n\n    const tryFn = () => {\n      if (checkFn()) {\n        resolve();\n        return;\n      }\n\n      tryCount++;\n\n      const nextBackoff = delayFn(tryCount);\n\n      if (maxCounter != null && tryCount >= maxCounter) {\n        reject();\n        return;\n      }\n      setTimeout(tryFn, nextBackoff);\n    };\n\n    tryFn();\n  });\n}\n\n/**\n * Generates the function name from an input sampler name.\n * @param samplerName Name of the sampler.\n */\nexport function generateShaderFuncNameFromInputSamplerName(samplerName: string): string {\n  assert(typeof samplerName !== 'undefined' && samplerName.length !== 0, () => 'empty string found for sampler name');\n  return 'get' + samplerName.charAt(0).toUpperCase() + samplerName.slice(1);\n}\n\n/**\n * Generates the function name from an input sampler name at output coordinates.\n * @param samplerName Name of the sampler.\n */\nexport function generateShaderFuncNameFromInputSamplerNameAtOutCoords(samplerName: string): string {\n  assert(typeof samplerName !== 'undefined' && samplerName.length !== 0, () => 'empty string found for sampler name');\n  return 'get' + samplerName.charAt(0).toUpperCase() + samplerName.slice(1) + 'AtOutCoords';\n}\n\n/** Returns a new input shape (a copy) that has a squeezed logical shape. */\nexport function squeezeInputShape(inputShape: readonly number[], squeezedShape: number[]): number[] {\n  // Deep copy.\n  let newInputShape: number[] = JSON.parse(JSON.stringify(inputShape));\n  newInputShape = squeezedShape;\n  return newInputShape;\n}\n\n/** Returns a list of squeezed parameters for shader functions */\nexport function getSqueezedParams(params: string[], keptDims: number[]): string {\n  return keptDims.map(d => params[d]).join(', ');\n}\n\n/** Returns the data type for different ranks. */\nexport function getCoordsDataType(rank: number): string {\n  if (rank <= 1) {\n    return 'int';\n  } else if (rank === 2) {\n    return 'ivec2';\n  } else if (rank === 3) {\n    return 'ivec3';\n  } else if (rank === 4) {\n    return 'ivec4';\n  } else if (rank === 5) {\n    return 'ivec5';\n  } else if (rank === 6) {\n    return 'ivec6';\n  } else {\n    throw Error(`GPU for rank ${rank} is not yet supported`);\n  }\n}\n\nexport function getGlChannels(rank = 6): string[] {\n  return ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, rank);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../instrument';\n\nimport {WebGLContext} from './webgl-context';\n\nconst cache: {[contextId: string]: WebGLContext} = {};\n\n/**\n * This factory function creates proper WebGLRenderingContext based on\n * the current browsers capabilities\n * The order is from higher/most recent versions to most basic\n */\nexport function createWebGLContext(contextId?: 'webgl'|'webgl2'): WebGLContext {\n  let context: WebGLContext|undefined;\n  if ((!contextId || contextId === 'webgl2') && 'webgl2' in cache) {\n    context = cache.webgl2;\n  } else if ((!contextId || contextId === 'webgl') && 'webgl' in cache) {\n    context = cache.webgl;\n  }\n\n  if (!context) {\n    try {\n      // try to create webgl context from an offscreen canvas\n      const offscreenCanvas = createOffscreenCanvas();\n      context = createNewWebGLContext(offscreenCanvas, contextId);\n    } catch (e) {\n      // if failed, fallback to try to use a normal canvas element\n      const canvas = createCanvas();\n      context = createNewWebGLContext(canvas, contextId);\n    }\n  }\n\n  contextId = contextId || context.version === 1 ? 'webgl' : 'webgl2';\n  const gl = context.gl;\n\n  cache[contextId] = context;\n\n  if (gl.isContextLost()) {\n    delete cache[contextId];\n    return createWebGLContext(contextId);\n  }\n\n  gl.disable(gl.DEPTH_TEST);\n  gl.disable(gl.STENCIL_TEST);\n  gl.disable(gl.BLEND);\n  gl.disable(gl.DITHER);\n  gl.disable(gl.POLYGON_OFFSET_FILL);\n  gl.disable(gl.SAMPLE_COVERAGE);\n  gl.enable(gl.SCISSOR_TEST);\n  gl.enable(gl.CULL_FACE);\n  gl.cullFace(gl.BACK);\n\n  return context;\n}\n\nexport function createNewWebGLContext(canvas: HTMLCanvasElement, contextId?: 'webgl'|'webgl2'): WebGLContext {\n  const contextAttributes: WebGLContextAttributes = {\n    alpha: false,\n    depth: false,\n    antialias: false,\n    stencil: false,\n    preserveDrawingBuffer: false,\n    premultipliedAlpha: false,\n    failIfMajorPerformanceCaveat: false\n  };\n  let gl: WebGLRenderingContext|null;\n  const ca = contextAttributes;\n  if (!contextId || contextId === 'webgl2') {\n    gl = canvas.getContext('webgl2', ca);\n    if (gl) {\n      try {\n        return new WebGLContext(gl, 2);\n      } catch (err) {\n        Logger.warning('GlContextFactory', `failed to create WebGLContext using contextId 'webgl2'. Error: ${err}`);\n      }\n    }\n  }\n  if (!contextId || contextId === 'webgl') {\n    gl = canvas.getContext('webgl', ca) || canvas.getContext('experimental-webgl', ca) as WebGLRenderingContext;\n    if (gl) {\n      try {\n        return new WebGLContext(gl, 1);\n      } catch (err) {\n        Logger.warning(\n            'GlContextFactory',\n            `failed to create WebGLContext using contextId 'webgl' or 'experimental-webgl'. Error: ${err}`);\n      }\n    }\n  }\n\n  throw new Error('WebGL is not supported');\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\ndeclare let OffscreenCanvas: {new (width: number, height: number): HTMLCanvasElement};\n\nfunction createCanvas(): HTMLCanvasElement {\n  if (typeof document === 'undefined') {\n    throw new TypeError('failed to create canvas: document is not supported');\n  }\n  const canvas: HTMLCanvasElement = document.createElement('canvas');\n  canvas.width = 1;\n  canvas.height = 1;\n  return canvas;\n}\n\nfunction createOffscreenCanvas(): HTMLCanvasElement {\n  if (typeof OffscreenCanvas === 'undefined') {\n    throw new TypeError('failed to create offscreen canvas: OffscreenCanvas is not supported');\n  }\n  return new OffscreenCanvas(1, 1);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\n\nimport * as DataEncoders from './texture-data-encoder';\nimport {DataEncoder, Encoder} from './texture-data-encoder';\nimport {repeatedTry} from './utils';\n\nexport interface FenceContext {\n  query: WebGLSync|null;\n  isFencePassed(): boolean;\n}\n\ntype PollItem = {\n  isDoneFn: () => boolean; resolveFn: () => void;\n};\n\nexport function linearSearchLastTrue(arr: Array<() => boolean>): number {\n  let i = 0;\n  for (; i < arr.length; ++i) {\n    const isDone = arr[i]();\n    if (!isDone) {\n      break;\n    }\n  }\n  return i - 1;\n}\n\n/**\n * Abstraction and wrapper around WebGLRenderingContext and its operations\n */\nexport class WebGLContext {\n  gl: WebGLRenderingContext;\n  version: 1|2;\n\n  private vertexbuffer: WebGLBuffer;\n  private framebuffer: WebGLFramebuffer;\n\n  // WebGL flags and vital parameters\n  private isFloatTextureAttachableToFrameBuffer: boolean;\n  isFloat32DownloadSupported: boolean;\n  isRenderFloat32Supported: boolean;\n  isBlendSupported: boolean;\n  maxTextureSize: number;\n  // private maxCombinedTextureImageUnits: number;\n  private maxTextureImageUnits: number;\n  // private maxCubeMapTextureSize: number;\n  // private shadingLanguageVersion: string;\n  // private webglVendor: string;\n  // private webglVersion: string;\n\n  // WebGL2 flags and vital parameters\n  // private max3DTextureSize: number;\n  // private maxArrayTextureLayers: number;\n  // private maxColorAttachments: number;\n  // private maxDrawBuffers: number;\n\n  // WebGL extensions\n  // eslint-disable-next-line camelcase\n  textureFloatExtension: OES_texture_float|null;\n  // eslint-disable-next-line camelcase\n  textureHalfFloatExtension: OES_texture_half_float|null;\n\n  // WebGL2 extensions\n  colorBufferFloatExtension: unknown|null;\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  disjointTimerQueryWebgl2Extension: {TIME_ELAPSED_EXT: GLenum; GPU_DISJOINT_EXT: GLenum}|null;\n\n  private disposed: boolean;\n  private frameBufferBound = false;\n\n  constructor(gl: WebGLRenderingContext, version: 1|2) {\n    this.gl = gl;\n    this.version = version;\n\n    this.getExtensions();\n    this.vertexbuffer = this.createVertexbuffer();\n    this.framebuffer = this.createFramebuffer();\n    this.queryVitalParameters();\n  }\n\n  allocateTexture(width: number, height: number, encoder: DataEncoder, data?: Encoder.DataArrayType): WebGLTexture {\n    const gl = this.gl;\n    // create the texture\n    const texture = gl.createTexture();\n    // bind the texture so the following methods effect this texture.\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    const buffer = data ? encoder.encode(data, width * height) : null;\n    gl.texImage2D(\n        gl.TEXTURE_2D,\n        0,  // Level of detail.\n        encoder.internalFormat, width, height,\n        0,  // Always 0 in OpenGL ES.\n        encoder.format, encoder.textureType, buffer);\n    this.checkError();\n    return texture as WebGLTexture;\n  }\n  updateTexture(\n      texture: WebGLTexture, width: number, height: number, encoder: DataEncoder, data: Encoder.DataArrayType): void {\n    const gl = this.gl;\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    const buffer = encoder.encode(data, width * height);\n    gl.texSubImage2D(\n        gl.TEXTURE_2D,\n        0,  // level\n        0,  // xoffset\n        0,  // yoffset\n        width, height, encoder.format, encoder.textureType, buffer);\n    this.checkError();\n  }\n  attachFramebuffer(texture: WebGLTexture, width: number, height: number): void {\n    const gl = this.gl;\n    // Make it the target for framebuffer operations - including rendering.\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\n    gl.framebufferTexture2D(\n        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture,\n        0);  // 0, we aren't using MIPMAPs\n    this.checkError();\n    gl.viewport(0, 0, width, height);\n    gl.scissor(0, 0, width, height);\n  }\n  readTexture(\n      texture: WebGLTexture, width: number, height: number, dataSize: number, dataType: Encoder.DataType,\n      channels: number): Encoder.DataArrayType {\n    const gl = this.gl;\n    if (!channels) {\n      channels = 1;\n    }\n    if (!this.frameBufferBound) {\n      this.attachFramebuffer(texture, width, height);\n    }\n    const encoder = this.getEncoder(dataType, channels);\n    const buffer = encoder.allocate(width * height);\n    // bind texture to framebuffer\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.framebufferTexture2D(\n        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture,\n        0);  // 0, we aren't using MIPMAPs\n    // TODO: Check if framebuffer is ready\n    gl.readPixels(0, 0, width, height, gl.RGBA, encoder.textureType, buffer);\n    this.checkError();\n    // unbind FB\n    return encoder.decode(buffer, dataSize);\n  }\n\n  isFramebufferReady(): boolean {\n    // TODO: Implement logic to check if the framebuffer is ready\n    return true;\n  }\n  getActiveTexture(): string {\n    const gl = this.gl;\n    const n = gl.getParameter(this.gl.ACTIVE_TEXTURE);\n    return `TEXTURE${(n - gl.TEXTURE0)}`;\n  }\n  getTextureBinding(): WebGLTexture {\n    return this.gl.getParameter(this.gl.TEXTURE_BINDING_2D);\n  }\n  getFramebufferBinding(): WebGLFramebuffer {\n    return this.gl.getParameter(this.gl.FRAMEBUFFER_BINDING);\n  }\n  setVertexAttributes(positionHandle: number, textureCoordHandle: number): void {\n    const gl = this.gl;\n    gl.vertexAttribPointer(positionHandle, 3, gl.FLOAT, false, 20, 0);\n    gl.enableVertexAttribArray(positionHandle);\n    if (textureCoordHandle !== -1) {\n      gl.vertexAttribPointer(textureCoordHandle, 2, gl.FLOAT, false, 20, 12);\n      gl.enableVertexAttribArray(textureCoordHandle);\n    }\n    this.checkError();\n  }\n  createProgram(\n      vertexShader: WebGLShader,\n      fragShader: WebGLShader,\n      ): WebGLProgram {\n    const gl = this.gl;\n    const program = gl.createProgram()!;\n\n    // the program consists of our shaders\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragShader);\n    gl.linkProgram(program);\n    return program;\n  }\n  compileShader(shaderSource: string, shaderType: number): WebGLShader {\n    const gl = this.gl;\n    const shader = gl.createShader(shaderType);\n    if (!shader) {\n      throw new Error(`createShader() returned null with type ${shaderType}`);\n    }\n\n    gl.shaderSource(shader, shaderSource);\n    gl.compileShader(shader);\n    if (gl.getShaderParameter(shader, gl.COMPILE_STATUS) === false) {\n      throw new Error(`Failed to compile shader: ${gl.getShaderInfoLog(shader)}\nShader source:\n${shaderSource}`);\n    }\n    return shader;\n  }\n  deleteShader(shader: WebGLShader): void {\n    this.gl.deleteShader(shader);\n  }\n  bindTextureToUniform(texture: WebGLTexture, position: number, uniformHandle: WebGLUniformLocation): void {\n    const gl = this.gl;\n    gl.activeTexture(gl.TEXTURE0 + position);\n    this.checkError();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    this.checkError();\n    gl.uniform1i(uniformHandle, position);\n    this.checkError();\n  }\n  draw(): void {\n    this.gl.drawArrays(this.gl.TRIANGLE_STRIP, 0, 4);\n    this.checkError();\n  }\n  checkError(): void {\n    if (env.debug) {\n      const gl = this.gl;\n      const error = gl.getError();\n      let label = '';\n      switch (error) {\n        case (gl.NO_ERROR):\n          return;\n        case (gl.INVALID_ENUM):\n          label = 'INVALID_ENUM';\n          break;\n        case (gl.INVALID_VALUE):\n          label = 'INVALID_VALUE';\n          break;\n        case (gl.INVALID_OPERATION):\n          label = 'INVALID_OPERATION';\n          break;\n        case (gl.INVALID_FRAMEBUFFER_OPERATION):\n          label = 'INVALID_FRAMEBUFFER_OPERATION';\n          break;\n        case (gl.OUT_OF_MEMORY):\n          label = 'OUT_OF_MEMORY';\n          break;\n        case (gl.CONTEXT_LOST_WEBGL):\n          label = 'CONTEXT_LOST_WEBGL';\n          break;\n        default:\n          label = `Unknown WebGL Error: ${error.toString(16)}`;\n      }\n      throw new Error(label);\n    }\n  }\n  deleteTexture(texture: WebGLTexture): void {\n    this.gl.deleteTexture(texture);\n  }\n  deleteProgram(program: WebGLProgram): void {\n    this.gl.deleteProgram(program);\n  }\n  getEncoder(dataType: Encoder.DataType, channels: number, usage: Encoder.Usage = Encoder.Usage.Default): DataEncoder {\n    if (this.version === 2) {\n      return new DataEncoders.RedFloat32DataEncoder(this.gl as WebGL2RenderingContext, channels);\n    }\n\n    switch (dataType) {\n      case 'float':\n        if (usage === Encoder.Usage.UploadOnly || this.isRenderFloat32Supported) {\n          return new DataEncoders.RGBAFloatDataEncoder(this.gl, channels);\n        } else {\n          return new DataEncoders.RGBAFloatDataEncoder(\n              this.gl, channels, this.textureHalfFloatExtension!.HALF_FLOAT_OES);\n        }\n      case 'int':\n        throw new Error('not implemented');\n      case 'byte':\n        return new DataEncoders.Uint8DataEncoder(this.gl, channels);\n      default:\n        throw new Error(`Invalid dataType: ${dataType}`);\n    }\n  }\n  clearActiveTextures(): void {\n    const gl = this.gl;\n    for (let unit = 0; unit < this.maxTextureImageUnits; ++unit) {\n      gl.activeTexture(gl.TEXTURE0 + unit);\n      gl.bindTexture(gl.TEXTURE_2D, null);\n    }\n  }\n  dispose(): void {\n    if (this.disposed) {\n      return;\n    }\n    const gl = this.gl;\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.deleteFramebuffer(this.framebuffer);\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    gl.deleteBuffer(this.vertexbuffer);\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n    gl.finish();\n    this.disposed = true;\n  }\n\n  private createDefaultGeometry(): Float32Array {\n    // Sets of x,y,z(=0),s,t coordinates.\n    return new Float32Array([\n      -1.0, 1.0,  0.0, 0.0, 1.0,  // upper left\n      -1.0, -1.0, 0.0, 0.0, 0.0,  // lower left\n      1.0,  1.0,  0.0, 1.0, 1.0,  // upper right\n      1.0,  -1.0, 0.0, 1.0, 0.0   // lower right\n    ]);\n  }\n  private createVertexbuffer(): WebGLBuffer {\n    const gl = this.gl;\n    const buffer = gl.createBuffer();\n    if (!buffer) {\n      throw new Error('createBuffer() returned null');\n    }\n    const geometry = this.createDefaultGeometry();\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, geometry, gl.STATIC_DRAW);\n    this.checkError();\n    return buffer;\n  }\n  private createFramebuffer(): WebGLFramebuffer {\n    const fb = this.gl.createFramebuffer();\n    if (!fb) {\n      throw new Error('createFramebuffer returned null');\n    }\n    return fb;\n  }\n\n  private queryVitalParameters(): void {\n    const gl = this.gl;\n\n    this.isFloatTextureAttachableToFrameBuffer = this.checkFloatTextureAttachableToFrameBuffer();\n    this.isRenderFloat32Supported = this.checkRenderFloat32();\n    this.isFloat32DownloadSupported = this.checkFloat32Download();\n\n    if (this.version === 1 && !this.textureHalfFloatExtension && !this.isRenderFloat32Supported) {\n      throw new Error('both float32 and float16 TextureType are not supported');\n    }\n\n    this.isBlendSupported = !this.isRenderFloat32Supported || this.checkFloat32Blend();\n\n    // this.maxCombinedTextureImageUnits = gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);\n    this.maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n    this.maxTextureImageUnits = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n    // this.maxCubeMapTextureSize = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);\n    // this.shadingLanguageVersion = gl.getParameter(gl.SHADING_LANGUAGE_VERSION);\n    // this.webglVendor = gl.getParameter(gl.VENDOR);\n    // this.webglVersion = gl.getParameter(gl.VERSION);\n\n    if (this.version === 2) {\n      // this.max3DTextureSize = gl.getParameter(WebGL2RenderingContext.MAX_3D_TEXTURE_SIZE);\n      // this.maxArrayTextureLayers = gl.getParameter(WebGL2RenderingContext.MAX_ARRAY_TEXTURE_LAYERS);\n      // this.maxColorAttachments = gl.getParameter(WebGL2RenderingContext.MAX_COLOR_ATTACHMENTS);\n      // this.maxDrawBuffers = gl.getParameter(WebGL2RenderingContext.MAX_DRAW_BUFFERS);\n    }\n  }\n  private getExtensions(): void {\n    if (this.version === 2) {\n      this.colorBufferFloatExtension = this.gl.getExtension('EXT_color_buffer_float');\n      this.disjointTimerQueryWebgl2Extension = this.gl.getExtension('EXT_disjoint_timer_query_webgl2');\n    } else {\n      this.textureFloatExtension = this.gl.getExtension('OES_texture_float');\n      this.textureHalfFloatExtension = this.gl.getExtension('OES_texture_half_float');\n    }\n  }\n\n  private checkFloatTextureAttachableToFrameBuffer(): boolean {\n    // test whether Float32 texture is supported:\n    // STEP.1 create a float texture\n    const gl = this.gl;\n    const texture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    const internalFormat = this.version === 2 ? (gl as unknown as {RGBA32F: number}).RGBA32F : gl.RGBA;\n    gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 1, 1, 0, gl.RGBA, gl.FLOAT, null);\n    // STEP.2 bind a frame buffer\n    const frameBuffer = gl.createFramebuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n    // STEP.3 attach texture to framebuffer\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n    // STEP.4 test whether framebuffer is complete\n    const isComplete = gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.deleteTexture(texture);\n    gl.deleteFramebuffer(frameBuffer);\n    return isComplete;\n  }\n\n  private checkRenderFloat32(): boolean {\n    if (this.version === 2) {\n      if (!this.colorBufferFloatExtension) {\n        return false;\n      }\n    } else {\n      if (!this.textureFloatExtension) {\n        return false;\n      }\n    }\n    return this.isFloatTextureAttachableToFrameBuffer;\n  }\n\n  private checkFloat32Download(): boolean {\n    if (this.version === 2) {\n      if (!this.colorBufferFloatExtension) {\n        return false;\n      }\n    } else {\n      if (!this.textureFloatExtension) {\n        return false;\n      }\n      if (!this.gl.getExtension('WEBGL_color_buffer_float')) {\n        return false;\n      }\n    }\n    return this.isFloatTextureAttachableToFrameBuffer;\n  }\n\n  /**\n   * Check whether GL_BLEND is supported\n   */\n  private checkFloat32Blend(): boolean {\n    // it looks like currently (2019-05-08) there is no easy way to detect whether BLEND is supported\n    // https://github.com/microsoft/onnxjs/issues/145\n\n    const gl = this.gl;\n\n    let texture: WebGLTexture|null|undefined;\n    let frameBuffer: WebGLFramebuffer|null|undefined;\n    let vertexShader: WebGLShader|null|undefined;\n    let fragmentShader: WebGLShader|null|undefined;\n    let program: WebGLProgram|null|undefined;\n\n    try {\n      texture = gl.createTexture();\n      frameBuffer = gl.createFramebuffer();\n      gl.bindTexture(gl.TEXTURE_2D, texture);\n\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      const internalFormat = this.version === 2 ? (gl as unknown as {RGBA32F: number}).RGBA32F : gl.RGBA;\n      gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 1, 1, 0, gl.RGBA, gl.FLOAT, null);\n\n      gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n\n      gl.enable(gl.BLEND);\n\n      vertexShader = gl.createShader(gl.VERTEX_SHADER);\n      if (!vertexShader) {\n        return false;\n      }\n      gl.shaderSource(vertexShader, 'void main(){}');\n      gl.compileShader(vertexShader);\n\n      fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n      if (!fragmentShader) {\n        return false;\n      }\n      gl.shaderSource(fragmentShader, 'precision highp float;void main(){gl_FragColor=vec4(0.5);}');\n      gl.compileShader(fragmentShader);\n\n      program = gl.createProgram();\n      if (!program) {\n        return false;\n      }\n      gl.attachShader(program, vertexShader);\n      gl.attachShader(program, fragmentShader);\n      gl.linkProgram(program);\n      gl.useProgram(program);\n\n      gl.drawArrays(gl.POINTS, 0, 1);\n      return gl.getError() === gl.NO_ERROR;\n\n    } finally {\n      gl.disable(gl.BLEND);\n\n      if (program) {\n        gl.deleteProgram(program);\n      }\n      if (vertexShader) {\n        gl.deleteShader(vertexShader);\n      }\n      if (fragmentShader) {\n        gl.deleteShader(fragmentShader);\n      }\n      if (frameBuffer) {\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n        gl.deleteFramebuffer(frameBuffer);\n      }\n      if (texture) {\n        gl.bindTexture(gl.TEXTURE_2D, null);\n        gl.deleteTexture(texture);\n      }\n    }\n  }\n\n  beginTimer(): WebGLQuery {\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.disjointTimerQueryWebgl2Extension;\n\n      const query = gl2.createQuery() as WebGLQuery;\n      gl2.beginQuery(ext.TIME_ELAPSED_EXT, query);\n      return query;\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported.');\n    }\n  }\n\n  endTimer() {\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.disjointTimerQueryWebgl2Extension;\n      gl2.endQuery(ext.TIME_ELAPSED_EXT);\n      return;\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported');\n    }\n  }\n\n  isTimerResultAvailable(query: WebGLQuery): boolean {\n    let available = false, disjoint = false;\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.disjointTimerQueryWebgl2Extension;\n\n      available = gl2.getQueryParameter(query, gl2.QUERY_RESULT_AVAILABLE);\n      disjoint = gl2.getParameter(ext.GPU_DISJOINT_EXT);\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported');\n    }\n\n    return available && !disjoint;\n  }\n\n  getTimerResult(query: WebGLQuery): number {\n    let timeElapsed = 0;\n    if (this.version === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      timeElapsed = gl2.getQueryParameter(query, gl2.QUERY_RESULT);\n      gl2.deleteQuery(query);\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported');\n    }\n    // return miliseconds\n    return timeElapsed / 1000000;\n  }\n\n  async waitForQueryAndGetTime(query: WebGLQuery): Promise<number> {\n    await repeatedTry(() => this.isTimerResultAvailable(query));\n    return this.getTimerResult(query);\n  }\n\n  public async createAndWaitForFence(): Promise<void> {\n    const fenceContext = this.createFence(this.gl);\n    return this.pollFence(fenceContext);\n  }\n\n  private createFence(gl: WebGLRenderingContext): FenceContext {\n    let isFencePassed: () => boolean;\n    const gl2 = gl as WebGL2RenderingContext;\n    const query = gl2.fenceSync(gl2.SYNC_GPU_COMMANDS_COMPLETE, 0);\n    gl.flush();\n    if (query === null) {\n      isFencePassed = () => true;\n    } else {\n      isFencePassed = () => {\n        const status = gl2.clientWaitSync(query, 0, 0);\n        return status === gl2.ALREADY_SIGNALED || status === gl2.CONDITION_SATISFIED;\n      };\n    }\n    return {query, isFencePassed};\n  }\n\n  async pollFence(fenceContext: FenceContext) {\n    return new Promise<void>(resolve => {\n      void this.addItemToPoll(() => fenceContext.isFencePassed(), () => resolve());\n    });\n  }\n\n  private itemsToPoll: PollItem[] = [];\n\n  pollItems(): void {\n    // Find the last query that has finished.\n    const index = linearSearchLastTrue(this.itemsToPoll.map(x => x.isDoneFn));\n    for (let i = 0; i <= index; ++i) {\n      const {resolveFn} = this.itemsToPoll[i];\n      resolveFn();\n    }\n    this.itemsToPoll = this.itemsToPoll.slice(index + 1);\n  }\n\n  private async addItemToPoll(isDoneFn: () => boolean, resolveFn: () => void) {\n    this.itemsToPoll.push({isDoneFn, resolveFn});\n    if (this.itemsToPoll.length > 1) {\n      // We already have a running loop that polls.\n      return;\n    }\n    // Start a new loop that polls.\n    await repeatedTry(() => {\n      this.pollItems();\n      // End the loop if no more items to poll.\n      return this.itemsToPoll.length === 0;\n    });\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {SessionHandler} from './backend';\nimport {Graph} from './graph';\nimport {Logger, Profiler} from './instrument';\nimport {Operator} from './operators';\nimport {Tensor} from './tensor';\n\nclass KernelOp {\n  constructor(public op: Operator, public node: Graph.Node) {}\n}\n\nexport class ExecutionPlan {\n  constructor(private graph: Graph, ops: Operator[], private profiler: Readonly<Profiler>) {\n    this.initialize(ops);\n  }\n\n  initialize(ops: Operator[]) {\n    this.profiler.event('session', 'ExecutionPlan.initialize', () => {\n      const graphNodes = this.graph.getNodes();\n      if (graphNodes.length !== ops.length) {\n        throw new Error('The size of nodes and OPs do not match.');\n      }\n\n      this._ops = ops.map((op, i) => new KernelOp(op, graphNodes[i]));\n      this.reset();\n\n      // look for starter node(s)\n      this._starter = [];\n      this._ops.forEach((op, i) => {\n        let resolved = true;\n        for (const input of op.node.inputs) {\n          if (\n              !this._values[input]                                   // not an initialized input\n              && this.graph.getInputIndices().indexOf(input) === -1  // not model input\n          ) {\n            resolved = false;\n            break;\n          }\n        }\n        if (resolved) {\n          this._starter.push(i);\n        }\n      });\n    });\n  }\n\n  reset() {\n    this._values = this.graph.getValues().map(i => i.tensor);\n  }\n\n  async execute(sessionHandler: SessionHandler, modelInputs: Tensor[]): Promise<Tensor[]> {\n    return this.profiler.event('session', 'ExecutionPlan.execute', async () => {\n      // reset mediem result\n      this.reset();\n\n      // create inference handler\n      const inferenceHandler = sessionHandler.createInferenceHandler();\n\n      // populate inputs value\n      const graphInputs = this.graph.getInputIndices();\n      if (modelInputs.length !== graphInputs.length) {\n        throw new Error(`number of input tensors don't match the number of inputs to the model: actual: ${\n            modelInputs.length} expected: ${graphInputs.length}`);\n      }\n\n      modelInputs.forEach((input, i) => {\n        const index = graphInputs[i];\n        this._values[index] = input;\n      });\n\n      // prepare running sequence\n      const sequence: number[] = this._starter.slice(0);\n\n      // execution iterations\n      const graphValues = this.graph.getValues();\n      const graphNodes = this.graph.getNodes();\n\n      let rear = 0;\n      while (rear < sequence.length) {\n        const thisOpIndex = sequence[rear++];\n        const thisOp = this._ops[thisOpIndex];\n\n        // check input\n        const inputList = thisOp.node.inputs.map(i => this._values[i]);\n        if (inputList.indexOf(undefined) !== -1) {\n          throw new Error(`unresolved input detected: op: ${thisOp.node}`);\n        }\n\n        // run\n        const inputTensors = inputList as Tensor[];\n        Logger.verbose(\n            'ExecPlan',\n            `Runing op:${thisOp.node.name} (${\n                inputTensors.map((t, i) => `'${thisOp.node.inputs[i]}': ${t.type}[${t.dims.join(',')}]`).join(', ')})`);\n\n        const outputList = await this.profiler.event(\n            'node', thisOp.node.name, async () => thisOp.op.impl(inferenceHandler, inputTensors, thisOp.op.context));\n\n        // check output\n        if (outputList.length !== thisOp.node.outputs.length) {\n          throw new Error('the size of output does not match model definition.');\n        }\n\n        // fill value\n        outputList.forEach((output, i) => {\n          const j = thisOp.node.outputs[i];\n          if (this._values[j]) {\n            throw new Error(`output [${j}] already has value: op:${thisOp.node.name}`);\n          }\n          this._values[j] = output;\n        });\n\n        // resolve downstream nodes\n        const downstreamNodes = new Set<number>();\n        outputList.forEach((output, i) => {\n          const j = thisOp.node.outputs[i];\n          for (const currentDownstreamNodeIndex of graphValues[j].to) {\n            const currentDownstreamNode = graphNodes[currentDownstreamNodeIndex];\n            let resolved = true;\n            for (const k of currentDownstreamNode.inputs) {\n              if (!this._values[k]) {\n                resolved = false;\n                break;\n              }\n            }\n            if (resolved) {\n              downstreamNodes.add(currentDownstreamNodeIndex);\n            }\n          }\n        });\n        sequence.push(...downstreamNodes);\n      }\n\n      const output: Tensor[] = [];\n      for (let i = 0; i < this.graph.getOutputIndices().length; i++) {\n        const outputIndex = this.graph.getOutputIndices()[i];\n        const outputTensor = this._values[outputIndex];\n        if (outputTensor === undefined) {\n          throw new Error(`required output [${outputIndex}] does not have value`);\n        }\n        if (outputIndex === 0) {\n          await outputTensor.getData();\n        } else {\n          // eslint-disable-next-line no-unused-expressions\n          outputTensor.data;\n        }\n        output.push(outputTensor);\n      }\n      Logger.verbose('ExecPlan', 'disposing of inferenceHandler');\n      inferenceHandler.dispose();\n      return output;\n    });\n  }\n\n  _values: Array<Tensor|undefined>;\n  _ops: KernelOp[];\n  _starter: number[];\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from './attribute';\nimport {onnxruntime} from './ort-schema/flatbuffers/ort-generated';\nimport {onnx} from './ort-schema/protobuf/onnx';\nimport {Tensor} from './tensor';\nimport {LongUtil, MAX_CLIP, MIN_CLIP, ProtoUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport declare namespace Graph {\n  export interface Shape {\n    readonly dims: readonly number[];\n  }\n  export interface ValueType {\n    readonly tensorType: Tensor.DataType;\n    readonly shape: Shape;\n  }\n  export interface Value {\n    // the tensor data. empty for non-initialized inputs\n    readonly tensor?: Tensor;\n\n    // index to the Node where the value comes from. -1 for initializer.\n    readonly from: number;\n\n    // indices to the Nodes where the values go to.\n    readonly to: readonly number[];\n\n    // value type specification. empty for non-input values.\n    readonly type?: ValueType;\n  }\n  export interface Node {\n    // name of the node\n    readonly name: string;\n\n    // the operator type\n    readonly opType: string;\n\n    // indices to the Values where the inputs come from.\n    readonly inputs: readonly number[];\n\n    // indices to the Values where the outpus go to.\n    readonly outputs: readonly number[];\n\n    // the attributes that used by the operator\n    readonly attributes: Attribute;\n  }\n\n  /**\n   * a Transformer is an instance that allows all possible transformation operations that applied to a graph\n   */\n  export interface Transformer {\n    removeAllIdentityNodes(): void;\n    removeAllDropoutNodes(): void;\n    fuseConvActivationNodes(): void;\n    // TODO: add generic functions to manipulate the graph\n  }\n\n  // an initializer can use transformer to transform the graph\n  export interface Initializer {\n    transformGraph(transformer: Transformer): void;\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport interface Graph {\n  getInputIndices(): readonly number[];\n  getInputNames(): readonly string[];\n  getOutputIndices(): readonly number[];\n  getOutputNames(): readonly string[];\n  getValues(): readonly Graph.Value[];\n  getNodes(): readonly Graph.Node[];\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention, @typescript-eslint/no-redeclare\nexport const Graph = {\n  /**\n   * construct a graph from a graph protobuf type\n   */\n  from: (graphProto: onnx.IGraphProto|ortFbs.Graph, initializer?: Graph.Initializer) =>\n      new GraphImpl(graphProto, initializer),\n};\n\nclass Value implements Graph.Value {\n  constructor(valueInfo?: onnx.IValueInfoProto) {\n    this._from = undefined;\n    this._to = [];\n    this.tensor = undefined;\n    this.type = undefined;\n\n    if (valueInfo) {\n      this.type = ProtoUtil.tensorValueTypeFromProto(valueInfo.type!.tensorType!);\n    }\n  }\n\n  _from?: number;  // -1 represent from initializer\n  get from() {\n    return this._from!;\n  }\n  _to: number[];\n  get to() {\n    return this._to;\n  }\n  type?: Graph.ValueType;\n  tensor?: Tensor;\n}\n\nclass Node implements Graph.Node {\n  constructor(_nodeProto: onnx.INodeProto|ortFbs.Node, name?: string) {\n    if (_nodeProto instanceof onnx.NodeProto) {\n      this.name = _nodeProto.name;\n      this.opType = _nodeProto.opType;\n      this.attributes = new Attribute(_nodeProto.attribute);\n    } else if (_nodeProto instanceof ortFbs.Node) {\n      this.name = name ?? _nodeProto.name()!;\n      this.opType = _nodeProto.opType()!;\n      this.attributes = new Attribute(ProtoUtil.tensorAttributesFromORTFormat(_nodeProto));\n    }\n\n    this.inputs = [];\n    this.outputs = [];\n    this.executeNode = true;\n  }\n\n  name: string;\n  opType: string;\n  inputs: number[];\n  outputs: number[];\n  attributes: Attribute;\n  executeNode: boolean;\n}\n\nclass GraphImpl implements Graph, Graph.Transformer {\n  private _allData: Value[];\n\n  private _allInputIndices: number[];\n  private _allInputNames: string[];\n\n  private _allOutputIndices: number[];\n  private _allOutputNames: string[];\n\n  private _nodes: Node[];\n\n  constructor(graph: onnx.IGraphProto|ortFbs.Graph, graphInitializer?: Graph.Initializer) {\n    if (!graph) {\n      throw new TypeError('graph is empty');\n    }\n\n    // build the graph - will throw exceptions if something fatal is detected\n    this.buildGraph(graph);\n\n    // execute any transformation logic for the graph (if applicable)\n    this.transformGraph(graphInitializer);\n\n    // check for cycles and other inconsistencies - will throw exceptions if something fatal is detected\n    this.checkIsAcyclic();\n  }\n\n  getInputIndices(): readonly number[] {\n    return this._allInputIndices;\n  }\n\n  getInputNames(): readonly string[] {\n    return this._allInputNames;\n  }\n\n  getOutputIndices(): readonly number[] {\n    return this._allOutputIndices;\n  }\n\n  getOutputNames(): readonly string[] {\n    return this._allOutputNames;\n  }\n\n  getValues(): readonly Graph.Value[] {\n    return this._allData;\n  }\n\n  getNodes(): readonly Graph.Node[] {\n    return this._nodes;\n  }\n\n  private buildGraph(graph: onnx.IGraphProto|ortFbs.Graph) {\n    // build the graph - will throw exceptions if something fatal is detected\n    if (graph instanceof onnx.GraphProto) {\n      this.buildGraphFromOnnxFormat(graph);\n    } else if (graph instanceof ortFbs.Graph) {\n      this.buildGraphFromOrtFormat(graph);\n    } else {\n      throw new TypeError('Graph type is not supported.');\n    }\n  }\n  private buildGraphFromOnnxFormat(graph: onnx.IGraphProto) {\n    const dataIndices = new Map<string, number>();\n    this._allData = [];\n\n    this._allInputIndices = [];\n    this._allInputNames = [];\n\n    this._allOutputIndices = [];\n    this._allOutputNames = [];\n\n    this._nodes = [];\n\n    const nodesIndices = new Map<string, number>();\n\n    // scan all inputs\n    if (!graph.input) {\n      throw new Error('missing information in graph: input');\n    }\n    const inputValueNames = [];\n    for (const i of graph.input) {\n      if (dataIndices.has(i.name!)) {\n        throw new Error(`duplicated input name: ${i.name}`);\n      }\n      const currentIndex = this._allData.push(new Value(i)) - 1;\n      dataIndices.set(i.name!, currentIndex);\n      inputValueNames.push(i.name!);\n    }\n\n    // scan all initializers\n    if (!graph.initializer) {\n      throw new Error('missing information in graph: initializer');\n    }\n    for (const i of graph.initializer) {\n      let index = dataIndices.get(i.name!);\n      if (index === undefined) {\n        const value = new Value();\n        value.type = {\n          shape: {dims: ProtoUtil.tensorDimsFromProto(i.dims!)},\n          tensorType: ProtoUtil.tensorDataTypeFromProto(i.dataType!)\n        };\n        index = this._allData.push(value) - 1;\n        dataIndices.set(i.name!, index);\n      }\n      this._allData[index]._from = -1;\n      this._allData[index].tensor = Tensor.fromProto(i);\n    }\n\n    // filter out input indices\n    for (let i = 0; i < this._allData.length; i++) {\n      if (!this._allData[i].tensor) {\n        this._allInputIndices.push(i);\n        this._allInputNames.push(inputValueNames[i]);\n      }\n    }\n\n    // scan all outputs\n    if (!graph.output) {\n      throw new Error('missing information in graph: output');\n    }\n    for (const i of graph.output) {\n      if (dataIndices.has(i.name!)) {\n        throw new Error(`duplicated output name: ${i.name}`);\n      }\n      const currentIndex = this._allData.push(new Value(i)) - 1;\n      dataIndices.set(i.name!, currentIndex);\n      this._allOutputIndices.push(currentIndex);\n      this._allOutputNames.push(i.name!);\n    }\n\n    // scan all nodes\n    if (!graph.node) {\n      throw new Error('missing information in graph: node');\n    }\n    for (const nodeProto of graph.node) {\n      if (!nodeProto.name) {\n        // assign a name to the node if it doesn't have one\n        for (let pick = 0;; pick++) {\n          const name = `unnamed_${nodeProto.opType}_${pick}`;\n          if (!nodesIndices.has(name)) {\n            nodeProto.name = name;\n            break;\n          }\n        }\n      }\n\n      if (nodesIndices.has(nodeProto.name)) {\n        throw new Error(`duplicated node name: ${nodeProto.name}`);\n      }\n      const currentIndex = this._nodes.push(new Node(nodeProto)) - 1;\n      nodesIndices.set(nodeProto.name, currentIndex);\n    }\n\n    // scan node's outputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.node[i];\n      if (!nodeProto.output) {\n        throw new Error(`missing output for node: ${nodeProto.name}`);\n      }\n      for (const output of nodeProto.output) {\n        let dataIndex = dataIndices.get(output);\n        if (typeof dataIndex === 'undefined') {\n          dataIndex = this._allData.push(new Value()) - 1;\n          dataIndices.set(output, dataIndex);\n        }\n        node.outputs.push(dataIndex);\n\n        if (this._allData[dataIndex]._from !== undefined) {\n          throw new Error(`multiple nodes output to one data value: ${dataIndex}`);\n        }\n        this._allData[dataIndex]._from = i;\n\n        // for the 'Constant' operator, just create a new edge in the graph corresponding to the 'output' of the\n        // operator and ignore the node from the graph\n        if (nodeProto.opType === 'Constant') {\n          if (!nodeProto.attribute || nodeProto.attribute.length !== 1 || !nodeProto.attribute[0].t) {\n            throw new Error('missing attributes or missing tensor value in attributes for this Constant operator');\n          }\n          if (!nodeProto.output || nodeProto.output.length !== 1) {\n            throw new Error('missing output or incorrect number of outputs for this Constant operator');\n          }\n          node.outputs.pop();\n          node.executeNode = false;\n\n          this._allData[dataIndex]._from = -1;\n          this._allData[dataIndex].tensor = Tensor.fromProto(nodeProto.attribute[0].t);\n        }\n      }\n    }\n\n    // scan node's inputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.node[i];\n\n      if (!nodeProto.input) {\n        throw new Error(`missing input for node: ${nodeProto.name}`);\n      }\n      for (const input of nodeProto.input) {\n        const dataIndex = dataIndices.get(input);\n        if (typeof dataIndex === 'undefined') {\n          // handle exception when opset > 9 and roi / scales not given\n          if (input === '' && (nodeProto.input.length === 3 || nodeProto.input.length === 4) &&\n              nodeProto.opType === 'Resize') {\n            continue;\n          }\n          throw new Error(`unrecognized input '${input}' for node: ${nodeProto.name}`);\n        }\n        node.inputs.push(dataIndex);\n\n        this._allData[dataIndex]._to.push(i);\n      }\n    }\n\n    return true;\n  }\n\n  private buildGraphFromOrtFormat(graph: ortFbs.Graph) {\n    const dataIndices = new Map<string, number>();\n    this._allData = [];\n\n    this._allInputIndices = [];\n    this._allInputNames = [];\n\n    this._allOutputIndices = [];\n    this._allOutputNames = [];\n\n    this._nodes = [];\n\n    const nodesIndices = new Map<string, number>();\n\n    // scan all inputs\n    const inputValueNames = [];\n    for (let i = 0; i < graph.inputsLength(); i++) {\n      const inputName = graph.inputs(i);\n      if (dataIndices.has(inputName)) {\n        throw new Error(`duplicated input name: ${inputName}`);\n      }\n      // Find the input typeInfo from nodeargs\n      for (let j = 0; j < graph.nodeArgsLength(); j++) {\n        if (graph.nodeArgs(j)?.name() === inputName) {\n          const value = new Value();\n          const valueType = graph.nodeArgs(j)?.type()?.valueType();\n          if (valueType !== ortFbs.TypeInfoValue.tensor_type) {\n            throw new Error('Unexpected value type for the nodeArg.');\n          }\n          const valueInfo = graph.nodeArgs(j)!.type()!.value(new ortFbs.TensorTypeAndShape())!;\n          const type = ProtoUtil.tensorDataTypeFromProto(valueInfo.elemType());\n          const shape = valueInfo.shape()!;\n          const dims = [];\n          for (let k = 0; k < shape.dimLength()!; k++) {\n            dims.push(LongUtil.longToNumber(shape.dim(k)!.value()!.dimValue()!));\n          }\n          value.type = {shape: {dims}, tensorType: type};\n          const currentIndex = this._allData.push(value) - 1;\n          dataIndices.set(inputName, currentIndex);\n          inputValueNames.push(inputName);\n        }\n      }\n    }\n    // check initializers\n    for (let i = 0; i < graph.initializersLength(); i++) {\n      const initializer = graph.initializers(i)!;\n      let index = dataIndices.get(initializer.name()!);\n      if (index === undefined) {\n        const value = new Value();\n        const dims = ProtoUtil.tensorDimsFromORTFormat(initializer);\n        const type = ProtoUtil.tensorDataTypeFromProto(initializer.dataType());\n        value.type = {shape: {dims}, tensorType: type};\n        index = this._allData.push(value) - 1;\n        dataIndices.set(initializer.name()!, index);\n      }\n      this._allData[index]._from = -1;\n      this._allData[index].tensor = Tensor.fromOrtTensor(initializer);\n    }\n\n    // filter out input indices\n    for (let i = 0; i < this._allData.length; i++) {\n      if (!this._allData[i].tensor) {\n        this._allInputIndices.push(i);\n        this._allInputNames.push(inputValueNames[i]);\n      }\n    }\n\n    // scan all outputs\n    for (let i = 0; i < graph.outputsLength(); i++) {\n      const outputName = graph.outputs(i);\n      if (dataIndices.has(outputName)) {\n        throw new Error(`duplicated output name: ${outputName}`);\n      }\n      const currentIndex = this._allData.push(new Value()) - 1;\n      dataIndices.set(outputName, currentIndex);\n      this._allOutputIndices.push(currentIndex);\n      this._allOutputNames.push(outputName);\n    }\n\n    // scan all nodes\n    if (!graph.nodes) {\n      throw new Error('missing information in graph: node');\n    }\n    for (let i = 0; i < graph.nodesLength(); i++) {\n      const nodeProto = graph.nodes(i);\n      let name = nodeProto!.name();\n      if (!name) {\n        // assign a name to the node if it doesn't have one\n        for (let pick = 0;; pick++) {\n          name = `unnamed_${nodeProto!.opType()}_${pick}`;\n          if (!nodesIndices.has(name)) {\n            // an unique name is found. break.\n            break;\n          }\n        }\n      }\n\n      if (nodesIndices.has(name)) {\n        throw new Error(`duplicated node name: ${name}`);\n      }\n      const currentIndex = this._nodes.push(new Node(nodeProto!, name)) - 1;\n      nodesIndices.set(name, currentIndex);\n    }\n\n    // scan node's outputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.nodes(i);\n      if (nodeProto == null) {\n        throw new Error(`No node exists at index ${i}`);\n      }\n      if (nodeProto?.outputsLength() === 0) {\n        throw new Error(`missing output for node: ${nodeProto.name}`);\n      }\n      for (let j = 0; j < nodeProto?.outputsLength(); j++) {\n        const output = nodeProto?.outputs(j);\n        let dataIndex = dataIndices.get(output);\n        if (typeof dataIndex === 'undefined') {\n          dataIndex = this._allData.push(new Value()) - 1;\n          dataIndices.set(output, dataIndex);\n        }\n        node.outputs.push(dataIndex);\n\n        if (this._allData[dataIndex]._from !== undefined) {\n          throw new Error(`multiple nodes output to one data value: ${dataIndex}`);\n        }\n        this._allData[dataIndex]._from = i;\n\n        // for the 'Constant' operator, just create a new edge in the graph corresponding to the 'output' of the\n        // operator and ignore the node from the graph\n        if (nodeProto.opType() === 'Constant') {\n          if (nodeProto.attributesLength() !== 1 || !nodeProto.attributes(0)!.t()) {\n            throw new Error('missing attributes or missing tensor value in attributes for this Constant operator');\n          }\n          if (nodeProto.outputsLength() !== 1) {\n            throw new Error('missing output or incorrect number of outputs for this Constant operator');\n          }\n          node.outputs.pop();\n          node.executeNode = false;\n\n          this._allData[dataIndex]._from = -1;\n          this._allData[dataIndex].tensor = Tensor.fromOrtTensor(nodeProto.attributes(0)!.t()!);\n        }\n      }\n    }\n\n    // scan node's inputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.nodes(i)!;\n\n      if (nodeProto.inputsLength() === 0) {\n        throw new Error(`missing input for node: ${nodeProto.name}`);\n      }\n      for (let j = 0; j < nodeProto.inputsLength()!; j++) {\n        const input = nodeProto.inputs(j)!;\n        const dataIndex = dataIndices.get(input);\n        if (typeof dataIndex === 'undefined') {\n          throw new Error(`unrecognized input '${input}' for node: ${nodeProto!.name()}`);\n        }\n        node.inputs.push(dataIndex);\n\n        this._allData[dataIndex]._to.push(i);\n      }\n    }\n  }\n\n  private checkIsAcyclic() {\n    // go through the graph and check for cycles or other fatal inconsistencies\n    const starters: Set<number> = new Set<number>();\n    this._allInputIndices.forEach(i => {\n      const data = this._allData[i];\n      data._to.forEach(j => {\n        starters.add(j);\n      });\n    });\n\n    // Iterative DFS to check for cycles\n    const nodesStack = Array.from(starters);\n    const nodesState = new Array<string>(this._nodes.length).fill('white');\n\n    while (nodesStack.length > 0) {\n      const nodeIndex = nodesStack.pop()!;\n      // this node has now been processed completely. Mark this node 'black' to denote this.\n      if (nodesState[nodeIndex] === 'gray') {\n        nodesState[nodeIndex] = 'black';\n      } else {\n        // this node is under processing stage. mark this node 'gray' to denote this.\n        nodesStack.push(nodeIndex);\n        nodesState[nodeIndex] = 'gray';\n\n        this._nodes[nodeIndex].outputs.forEach((outgoingEdgeIndex) => {\n          const data = this._allData[outgoingEdgeIndex];\n          if (typeof data.tensor !== 'undefined') {\n            throw new Error('node outputs should not be initialized');\n          }\n          if (data._from !== nodeIndex) {\n            throw new Error('from property of the Value object doesn\\'t match index of Node being processed');\n          }\n          data._to.forEach((downstreamNodeIndex) => {\n            // back edge found - cyclic\n            if (nodesState[downstreamNodeIndex] === 'gray') {\n              throw new Error('model graph is cyclic');\n            }\n            // tree edge found - continue processing by adding it to stack\n            else if (nodesState[downstreamNodeIndex] === 'white') {\n              nodesStack.push(downstreamNodeIndex);\n            }\n          });\n        });\n      }\n    }\n  }\n\n  private transformGraph(graphInitializer?: Graph.Initializer): void {\n    // apply common transform\n    this.removeAllIdentityNodes();\n    this.removeAllDropoutNodes();\n    this.fuseConvActivationNodes();\n    // apply initializer specific transform\n    if (graphInitializer) {\n      graphInitializer.transformGraph(this);\n    }\n\n    // finalize graph\n    this.finalizeGraph();\n  }\n\n  /**\n   * finalize the graph.\n   *\n   * this function should be called after all the transformation completed.\n   * this function removes all unnecessary nodes and values from the graph\n   */\n  finalizeGraph() {\n    let offset = 0;\n    // delete all nodes that are not being executed\n    // The graph is represented using these two arrays\n    // this._nodes - Array holding the kernels to execute - each entry is a kernel pointing to this._allData\n    // this._allData - hold 2 fields - to [] & from - these feileds hold the graph map for inputs and outputs per node\n    // newIndices - remapping the graph after reading the flag 'executeNode'\n    const newIndices = new Array<number>(this._nodes.length, 0);\n    let nodePossition = 0;\n\n    for (let i = 0; i < this._nodes.length; i++) {\n      // giving new indexes to the nodes based on execution flag\n      newIndices[i] = nodePossition;\n      if (this._nodes[i].executeNode) {\n        if (nodePossition !== i) {\n          this._nodes[nodePossition] = this._nodes[i];\n        }\n        nodePossition++;\n\n      } else {\n        // delete all output values\n        this._nodes[i].outputs.forEach(ind => {\n          this._allData[ind]._from = -2;\n        });\n      }\n    }\n\n    // removing the unused nodes\n    this._nodes.splice(nodePossition, this._nodes.length - nodePossition);\n\n    // Updating this._allData according to the new this._nodes\n    for (let i = 0; i < this._allData.length; i++) {\n      const currentData = this._allData[i];\n      if (currentData._from !== undefined && currentData._from !== -1 && currentData._from !== -2) {\n        currentData._from = newIndices[currentData._from];\n      }\n\n      for (let j = 0; j < currentData._to.length; j++) {\n        if (currentData._to[j] >= 0) {\n          currentData._to[j] = newIndices[currentData._to[j]];\n        } else {\n          throw new Error('Trying to update a removed node');\n        }\n      }\n    }\n\n    offset = 0;\n    // delete all values that are not being referenced\n    for (let i = 0; i < this._allData.length; i++) {\n      // if current value is neither linked to next node, nor an output value, remove it.\n      if (this._allData[i].from === -2 && this._allOutputIndices.indexOf(i + offset) === -1) {\n        offset++;\n        this._allData.splice(i, 1);\n        i--;\n        continue;\n      }\n      if (offset > 0) {\n        let ind = -1;\n        // if current value is neither an input value nor an initializer, find the node it's\n        // coming from and update the corresponding node output\n        if (this._allData[i].from !== undefined && this._allData[i].from !== -1) {\n          ind = this._nodes[this._allData[i].from].outputs.indexOf(i + offset);\n          if (ind !== -1) {\n            this._nodes[this._allData[i].from].outputs[ind] = i;\n          }\n        } else {\n          // if current value is an input value, update its reference in inputIndices\n          ind = this._allInputIndices.indexOf(i + offset);\n          if (ind !== -1) {\n            this._allInputIndices[ind] = i;\n          }\n        }\n\n        // find the node that the current value is linking to and update its input reference\n        this._allData[i].to.forEach(node => {\n          ind = this._nodes[node].inputs.indexOf(i + offset);\n          if (ind !== -1) {\n            this._nodes[node].inputs[ind] = i;\n          }\n        });\n        if (this._allData[i].to.length === 0) {\n          // if current value is a graph output, update its reference in outputIndices\n          ind = this._allOutputIndices.indexOf(i + offset);\n          if (ind !== -1) {\n            this._allOutputIndices[ind] = i;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Delete the specifed node. Assume the node has one incoming input and the first output connected to other nodes.\n   * An input validation must be done before calling this function.\n   * @param nodeIndex The index of node to be deleted\n   */\n  private deleteNode(nodeIndex: number) {\n    const node = this._nodes[nodeIndex];\n    if (node.outputs.length > 1) {\n      for (let i = 1; i < node.outputs.length; i++) {\n        if (this._allData[node.outputs[i]].to.length > 0) {\n          throw new Error('Node deletion with more than one output connected to other nodes is not supported. ');\n        }\n      }\n    }\n\n    // this node wil not be executed\n    node.executeNode = false;\n    const inputValueIndex = node.inputs[0];\n    const outputValueIndex = node.outputs[0];\n    const nodesConsumingOutput = this._allData[outputValueIndex].to;\n\n    // remove this node from the to property of the input Value\n    for (let i = 0; i < node.inputs.length; i++) {\n      const delIndex = this._allData[node.inputs[i]].to.indexOf(nodeIndex);\n      // should not happen\n      if (delIndex === -1) {\n        throw new Error('The Value object doesn\\'t have the current Node in it\\'s \\'to\\' property ');\n      }\n      this._allData[node.inputs[i]].to.splice(delIndex, 1);\n    }\n\n    // clear node indices consuming this output Value\n    this._allData[outputValueIndex]._to = [];\n\n    // if the output of this node is a graph output, adjust the index appropriately\n    const index = this._allOutputIndices.indexOf(outputValueIndex);\n    if (index !== -1) {\n      this._allOutputIndices[index] = inputValueIndex;\n    }\n\n    // override the inputs for nodes consuming this node's output with the input to this node\n    if (nodesConsumingOutput && nodesConsumingOutput.length > 0) {\n      for (const nodeIndex of nodesConsumingOutput) {\n        const replaceIndex = this._nodes[nodeIndex].inputs.indexOf(outputValueIndex);\n        // should not happen\n        if (replaceIndex === -1) {\n          throw new Error('The Node object doesn\\'t have the output Value in it\\'s \\'inputs\\' property ');\n        }\n        this._nodes[nodeIndex].inputs[replaceIndex] = inputValueIndex;\n        this._allData[inputValueIndex].to.push(nodeIndex);\n      }\n    }\n  }\n\n  removeAllDropoutNodes() {\n    let nodeIndex = 0;\n    for (const node of this._nodes) {\n      // weed out 'Dropout' nodes so that no time is wasted in execution\n      if (node.opType === 'Dropout') {\n        // the node should have exactly 1 input and 1 or 2 outputs\n        if (node.inputs.length !== 1) {\n          throw new Error('Dropout nodes should only contain one input. ');\n        }\n        if (node.outputs.length !== 1 && node.outputs.length !== 2) {\n          throw new Error('Dropout nodes should contain either 1 or 2 output(s)');\n        }\n        // the second output should not be referenced by any other node\n        if (node.outputs.length === 2 && this._allData[node.outputs[1]]._to.length !== 0) {\n          throw new Error('Dropout nodes\\'s second output should not be referenced by other nodes');\n        }\n        this.deleteNode(nodeIndex);\n      }\n      nodeIndex++;\n    }\n  }\n\n  removeAllIdentityNodes() {\n    let nodeIndex = 0;\n    for (const node of this._nodes) {\n      // weed out 'Identity' nodes so that no time is wasted in execution\n      if (node.opType === 'Identity') {\n        this.deleteNode(nodeIndex);\n      }\n      nodeIndex++;\n    }\n  }\n\n  isActivation(n: Node): boolean {\n    switch (n.opType) {\n      // TODO: add other activation methods\n      case 'Relu':\n      case 'Sigmoid':\n      case 'Clip':\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  fuseConvActivationNodes() {\n    for (const node of this._nodes) {\n      if (node.opType === 'Conv') {\n        const next = this._allData[node.outputs[0]]._to;\n        if (next.length === 1 && this.isActivation(this._nodes[next[0]])) {\n          const child = this._nodes[next[0]];\n          if (child.opType === 'Clip') {\n            if (child.inputs.length === 1) {\n              try {\n                node.attributes.set(\n                    'activation_params', 'floats',\n                    [child.attributes.getFloat('min'), child.attributes.getFloat('max')]);\n              } catch (e) {\n                node.attributes.set('activation_params', 'floats', [MIN_CLIP, MAX_CLIP]);\n              }\n            } else if (\n                child.inputs.length >= 3 && this._allData[child.inputs[1]].tensor !== undefined &&\n                this._allData[child.inputs[2]].tensor !== undefined) {\n              node.attributes.set('activation_params', 'floats', [\n                this._allData[child.inputs[1]].tensor!.floatData[0], this._allData[child.inputs[2]].tensor!.floatData[0]\n              ]);\n            } else {\n              // Skip fusion with clip node since clip min and clip max are not coming from initializer\n              continue;\n            }\n          }\n          node.attributes.set('activation', 'string', (child.opType));\n          this.deleteNode(next[0]);\n        }\n      }\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Env} from 'onnxruntime-common';\n\nimport {WebGLContext} from './backends/webgl/webgl-context';\n\nexport declare namespace Logger {\n  export interface SeverityTypeMap {\n    verbose: 'v';\n    info: 'i';\n    warning: 'w';\n    error: 'e';\n    fatal: 'f';\n  }\n\n  export type Severity = keyof SeverityTypeMap;\n\n  export type Provider = 'none'|'console';\n\n  /**\n   * Logging config that used to control the behavior of logger\n   */\n  export interface Config {\n    /**\n     * Specify the logging provider. 'console' by default\n     */\n    provider?: Provider;\n    /**\n     * Specify the minimal logger serverity. 'warning' by default\n     */\n    minimalSeverity?: Logger.Severity;\n    /**\n     * Whether to output date time in log. true by default\n     */\n    logDateTime?: boolean;\n    /**\n     * Whether to output source information (Not yet supported). false by default\n     */\n    logSourceLocation?: boolean;\n  }\n\n  export interface CategorizedLogger {\n    verbose(content: string): void;\n    info(content: string): void;\n    warning(content: string): void;\n    error(content: string): void;\n    fatal(content: string): void;\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport interface Logger {\n  (category: string): Logger.CategorizedLogger;\n\n  verbose(content: string): void;\n  verbose(category: string, content: string): void;\n  info(content: string): void;\n  info(category: string, content: string): void;\n  warning(content: string): void;\n  warning(category: string, content: string): void;\n  error(content: string): void;\n  error(category: string, content: string): void;\n  fatal(content: string): void;\n  fatal(category: string, content: string): void;\n\n  /**\n   * Reset the logger configuration.\n   * @param config specify an optional default config\n   */\n  reset(config?: Logger.Config): void;\n  /**\n   * Set the logger's behavior on the given category\n   * @param category specify a category string. If '*' is specified, all previous configuration will be overwritten. If\n   * '' is specified, the default behavior will be updated.\n   * @param config the config object to indicate the logger's behavior\n   */\n  set(category: string, config: Logger.Config): void;\n\n  /**\n   * Set the logger's behavior from ort-common env\n   * @param env the env used to set logger. Currently only setting loglevel is supported through Env.\n   */\n  setWithEnv(env: Env): void;\n}\n\ninterface LoggerProvider {\n  log(severity: Logger.Severity, content: string, category?: string): void;\n}\nclass NoOpLoggerProvider implements LoggerProvider {\n  log(_severity: Logger.Severity, _content: string, _category?: string) {\n    // do nothing\n  }\n}\nclass ConsoleLoggerProvider implements LoggerProvider {\n  log(severity: Logger.Severity, content: string, category?: string) {\n    // eslint-disable-next-line no-console\n    console.log(`${this.color(severity)} ${category ? '\\x1b[35m' + category + '\\x1b[0m ' : ''}${content}`);\n  }\n\n  private color(severity: Logger.Severity) {\n    switch (severity) {\n      case 'verbose':\n        return '\\x1b[34;40mv\\x1b[0m';\n      case 'info':\n        return '\\x1b[32mi\\x1b[0m';\n      case 'warning':\n        return '\\x1b[30;43mw\\x1b[0m';\n      case 'error':\n        return '\\x1b[31;40me\\x1b[0m';\n      case 'fatal':\n        return '\\x1b[101mf\\x1b[0m';\n      default:\n        throw new Error(`unsupported severity: ${severity}`);\n    }\n  }\n}\n\nconst SEVERITY_VALUE = {\n  verbose: 1000,\n  info: 2000,\n  warning: 4000,\n  error: 5000,\n  fatal: 6000\n};\n\nconst LOGGER_PROVIDER_MAP: {readonly [provider: string]: Readonly<LoggerProvider>} = {\n  ['none']: new NoOpLoggerProvider(),\n  ['console']: new ConsoleLoggerProvider()\n};\nconst LOGGER_DEFAULT_CONFIG = {\n  provider: 'console',\n  minimalSeverity: 'warning',\n  logDateTime: true,\n  logSourceLocation: false\n};\nlet LOGGER_CONFIG_MAP:\n    {[category: string]: Readonly<Required<Logger.Config>>} = {['']: LOGGER_DEFAULT_CONFIG as Required<Logger.Config>};\n\nfunction log(category: string): Logger.CategorizedLogger;\nfunction log(severity: Logger.Severity, content: string): void;\nfunction log(severity: Logger.Severity, category: string, content: string): void;\nfunction log(severity: Logger.Severity, arg1: string, arg2?: string): void;\nfunction log(\n    arg0: string|Logger.Severity, arg1?: string, arg2?: string|number, arg3?: number): Logger.CategorizedLogger|void {\n  if (arg1 === undefined) {\n    // log(category: string): Logger.CategorizedLogger;\n    return createCategorizedLogger(arg0);\n  } else if (arg2 === undefined) {\n    // log(severity, content);\n    logInternal(arg0 as Logger.Severity, arg1, 1);\n  } else if (typeof arg2 === 'number' && arg3 === undefined) {\n    // log(severity, content, stack)\n    logInternal(arg0 as Logger.Severity, arg1, arg2);\n  } else if (typeof arg2 === 'string' && arg3 === undefined) {\n    // log(severity, category, content)\n    logInternal(arg0 as Logger.Severity, arg2, 1, arg1);\n  } else if (typeof arg2 === 'string' && typeof arg3 === 'number') {\n    // log(severity, category, content, stack)\n    logInternal(arg0 as Logger.Severity, arg2, arg3, arg1);\n  } else {\n    throw new TypeError('input is valid');\n  }\n}\n\nfunction createCategorizedLogger(category: string): Logger.CategorizedLogger {\n  return {\n    verbose: log.verbose.bind(null, category),\n    info: log.info.bind(null, category),\n    warning: log.warning.bind(null, category),\n    error: log.error.bind(null, category),\n    fatal: log.fatal.bind(null, category)\n  };\n}\n\n// NOTE: argument 'category' is put the last parameter beacause typescript\n// doesn't allow optional argument put in front of required argument. This\n// order is different from a usual logging API.\nfunction logInternal(severity: Logger.Severity, content: string, stack: number, category?: string) {\n  const config = LOGGER_CONFIG_MAP[category || ''] || LOGGER_CONFIG_MAP[''];\n  if (SEVERITY_VALUE[severity] < SEVERITY_VALUE[config.minimalSeverity]) {\n    return;\n  }\n\n  if (config.logDateTime) {\n    content = `${new Date().toISOString()}|${content}`;\n  }\n\n  if (config.logSourceLocation) {\n    // TODO: calculate source location from 'stack'\n  }\n\n  LOGGER_PROVIDER_MAP[config.provider].log(severity, content, category);\n}\n\n// eslint-disable-next-line @typescript-eslint/no-namespace\nnamespace log {\n  export function verbose(content: string): void;\n  export function verbose(category: string, content: string): void;\n  export function verbose(arg0: string, arg1?: string) {\n    log('verbose', arg0, arg1);\n  }\n  export function info(content: string): void;\n  export function info(category: string, content: string): void;\n  export function info(arg0: string, arg1?: string) {\n    log('info', arg0, arg1);\n  }\n  export function warning(content: string): void;\n  export function warning(category: string, content: string): void;\n  export function warning(arg0: string, arg1?: string) {\n    log('warning', arg0, arg1);\n  }\n  export function error(content: string): void;\n  export function error(category: string, content: string): void;\n  export function error(arg0: string, arg1?: string) {\n    log('error', arg0, arg1);\n  }\n  export function fatal(content: string): void;\n  export function fatal(category: string, content: string): void;\n  export function fatal(arg0: string, arg1?: string) {\n    log('fatal', arg0, arg1);\n  }\n\n  export function reset(config?: Logger.Config): void {\n    LOGGER_CONFIG_MAP = {};\n    set('', config || {});\n  }\n  export function set(category: string, config: Logger.Config): void {\n    if (category === '*') {\n      reset(config);\n    } else {\n      const previousConfig = LOGGER_CONFIG_MAP[category] || LOGGER_DEFAULT_CONFIG;\n      LOGGER_CONFIG_MAP[category] = {\n        provider: config.provider || previousConfig.provider,\n        minimalSeverity: config.minimalSeverity || previousConfig.minimalSeverity,\n        logDateTime: (config.logDateTime === undefined) ? previousConfig.logDateTime : config.logDateTime,\n        logSourceLocation: (config.logSourceLocation === undefined) ? previousConfig.logSourceLocation :\n                                                                      config.logSourceLocation\n      };\n    }\n\n    // TODO: we want to support wildcard or regex?\n  }\n\n  export function setWithEnv(env: Env): void {\n    const config: Logger.Config = {};\n    if (env.logLevel) {\n      config.minimalSeverity = env.logLevel as Logger.Severity;\n    }\n    set('', config);\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare, @typescript-eslint/naming-convention\nexport const Logger: Logger = log;\n\nexport declare namespace Profiler {\n  export interface Config {\n    maxNumberEvents?: number;\n    flushBatchSize?: number;\n    flushIntervalInMilliseconds?: number;\n  }\n\n  export type EventCategory = 'session'|'node'|'op'|'backend';\n\n  export interface Event {\n    end(): void|Promise<void>;\n  }\n}\n// TODO\n// class WebGLEvent implements Profiler.Event {}\n\nclass Event implements Profiler.Event {\n  constructor(\n      public category: Profiler.EventCategory, public name: string, public startTime: number,\n      private endCallback: (e: Event) => void|Promise<void>, public timer?: WebGLQuery, public ctx?: WebGLContext) {}\n\n  async end() {\n    return this.endCallback(this);\n  }\n\n  async checkTimer(): Promise<number> {\n    if (this.ctx === undefined || this.timer === undefined) {\n      throw new Error('No webgl timer found');\n    } else {\n      this.ctx.endTimer();\n      return this.ctx.waitForQueryAndGetTime(this.timer);\n    }\n  }\n}\n\nclass EventRecord {\n  constructor(\n      public category: Profiler.EventCategory, public name: string, public startTime: number, public endTime: number) {}\n}\n\nexport class Profiler {\n  static create(config?: Profiler.Config): Profiler {\n    if (config === undefined) {\n      return new this();\n    }\n    return new this(config.maxNumberEvents, config.flushBatchSize, config.flushIntervalInMilliseconds);\n  }\n\n  private constructor(maxNumberEvents?: number, flushBatchSize?: number, flushIntervalInMilliseconds?: number) {\n    this._started = false;\n    this._maxNumberEvents = maxNumberEvents === undefined ? 10000 : maxNumberEvents;\n    this._flushBatchSize = flushBatchSize === undefined ? 10 : flushBatchSize;\n    this._flushIntervalInMilliseconds = flushIntervalInMilliseconds === undefined ? 5000 : flushIntervalInMilliseconds;\n  }\n\n  // start profiling\n  start() {\n    this._started = true;\n    this._timingEvents = [];\n    this._flushTime = now();\n    this._flushPointer = 0;\n  }\n\n  // stop profiling\n  stop() {\n    this._started = false;\n    for (; this._flushPointer < this._timingEvents.length; this._flushPointer++) {\n      this.logOneEvent(this._timingEvents[this._flushPointer]);\n    }\n  }\n\n  // create an event scope for the specific function\n  event<T>(category: Profiler.EventCategory, name: string, func: () => T, ctx?: WebGLContext): T;\n  event<T>(category: Profiler.EventCategory, name: string, func: () => Promise<T>, ctx?: WebGLContext): Promise<T>;\n\n  event<T>(category: Profiler.EventCategory, name: string, func: () => T | Promise<T>, ctx?: WebGLContext): T\n      |Promise<T> {\n    const event = this._started ? this.begin(category, name, ctx) : undefined;\n    let isPromise = false;\n\n    const res = func();\n\n    // we consider a then-able object is a promise\n    if (res && typeof (res as Promise<T>).then === 'function') {\n      isPromise = true;\n      return new Promise<T>((resolve, reject) => {\n        (res as Promise<T>)\n            .then(\n                async value => {  // fulfilled\n                  if (event) {\n                    await event.end();\n                  }\n                  resolve(value);\n                },\n                async reason => {  // rejected\n                  if (event) {\n                    await event.end();\n                  }\n                  reject(reason);\n                });\n      });\n    }\n    if (!isPromise && event) {\n      const eventRes = event.end();\n      if (eventRes && typeof eventRes.then === 'function') {\n        return new Promise<T>((resolve, reject) => {\n          (eventRes).then(\n              () => {  // fulfilled\n                resolve(res);\n              },\n              (reason) => {  // rejected\n                reject(reason);\n              });\n        });\n      }\n    }\n    return res;\n  }\n\n  // begin an event\n  begin(category: Profiler.EventCategory, name: string, ctx?: WebGLContext): Event {\n    if (!this._started) {\n      throw new Error('profiler is not started yet');\n    }\n    if (ctx === undefined) {\n      const startTime = now();\n      this.flush(startTime);\n      return new Event(category, name, startTime, e => this.endSync(e));\n    } else {\n      const timer: WebGLQuery = ctx.beginTimer();\n      return new Event(category, name, 0, async e => this.end(e), timer, ctx);\n    }\n  }\n\n  // end the specific event\n  private async end(event: Event): Promise<void> {\n    const endTime: number = await event.checkTimer();\n    if (this._timingEvents.length < this._maxNumberEvents) {\n      this._timingEvents.push(new EventRecord(event.category, event.name, event.startTime, endTime));\n      this.flush(endTime);\n    }\n  }\n\n  private endSync(event: Event): void {\n    const endTime: number = now();\n    if (this._timingEvents.length < this._maxNumberEvents) {\n      this._timingEvents.push(new EventRecord(event.category, event.name, event.startTime, endTime));\n      this.flush(endTime);\n    }\n  }\n\n  private logOneEvent(event: EventRecord) {\n    Logger.verbose(\n        `Profiler.${event.category}`,\n        `${(event.endTime - event.startTime).toFixed(2)}ms on event '${event.name}' at ${event.endTime.toFixed(2)}`);\n  }\n\n  private flush(currentTime: number) {\n    if (this._timingEvents.length - this._flushPointer >= this._flushBatchSize ||\n        currentTime - this._flushTime >= this._flushIntervalInMilliseconds) {\n      // should flush when either batch size accumlated or interval elepsed\n\n      for (const previousPointer = this._flushPointer; this._flushPointer < previousPointer + this._flushBatchSize &&\n           this._flushPointer < this._timingEvents.length;\n           this._flushPointer++) {\n        this.logOneEvent(this._timingEvents[this._flushPointer]);\n      }\n\n      this._flushTime = now();\n    }\n  }\n\n  get started() {\n    return this._started;\n  }\n  private _started = false;\n  private _timingEvents: EventRecord[];\n\n  private readonly _maxNumberEvents: number;\n\n  private readonly _flushBatchSize: number;\n  private readonly _flushIntervalInMilliseconds: number;\n\n  private _flushTime: number;\n  private _flushPointer = 0;\n}\n\n/**\n * returns a number to represent the current timestamp in a resolution as high as possible.\n */\nexport const now = (typeof performance !== 'undefined' && performance.now) ? () => performance.now() : Date.now;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {flatbuffers} from 'flatbuffers';\n\nimport {Graph} from './graph';\nimport {OpSet} from './opset';\nimport {onnxruntime} from './ort-schema/flatbuffers/ort-generated';\nimport {onnx} from './ort-schema/protobuf/onnx';\nimport {LongUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport class Model {\n  // empty model\n  constructor() {}\n\n  load(buf: Uint8Array, graphInitializer?: Graph.Initializer, isOrtFormat?: boolean): void {\n    if (!isOrtFormat) {\n      // isOrtFormat === false || isOrtFormat === undefined\n      try {\n        this.loadFromOnnxFormat(buf, graphInitializer);\n        return;\n      } catch (e) {\n        if (isOrtFormat !== undefined) {\n          throw e;\n        }\n      }\n    }\n\n    this.loadFromOrtFormat(buf, graphInitializer);\n  }\n\n  private loadFromOnnxFormat(buf: Uint8Array, graphInitializer?: Graph.Initializer): void {\n    const modelProto = onnx.ModelProto.decode(buf);\n    const irVersion = LongUtil.longToNumber(modelProto.irVersion);\n    if (irVersion < 3) {\n      throw new Error('only support ONNX model with IR_VERSION>=3');\n    }\n\n    this._opsets =\n        modelProto.opsetImport.map(i => ({domain: i.domain as string, version: LongUtil.longToNumber(i.version!)}));\n\n    this._graph = Graph.from(modelProto.graph!, graphInitializer);\n  }\n\n  private loadFromOrtFormat(buf: Uint8Array, graphInitializer?: Graph.Initializer): void {\n    const fb = new flatbuffers.ByteBuffer(buf);\n    const ortModel = ortFbs.InferenceSession.getRootAsInferenceSession(fb).model()!;\n    const irVersion = LongUtil.longToNumber(ortModel.irVersion());\n    if (irVersion < 3) {\n      throw new Error('only support ONNX model with IR_VERSION>=3');\n    }\n    this._opsets = [];\n    for (let i = 0; i < ortModel.opsetImportLength(); i++) {\n      const opsetId = ortModel.opsetImport(i)!;\n      this._opsets.push({domain: opsetId?.domain() as string, version: LongUtil.longToNumber(opsetId.version()!)});\n    }\n\n    this._graph = Graph.from(ortModel.graph()!, graphInitializer);\n  }\n\n  private _graph: Graph;\n  get graph(): Graph {\n    return this._graph;\n  }\n\n  private _opsets: OpSet[];\n  get opsets(): readonly OpSet[] {\n    return this._opsets;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceHandler} from './backend';\nimport {Graph} from './graph';\nimport {Tensor} from './tensor';\n\nexport type OperatorImplementation<T> = (inferenceHandler: InferenceHandler, inputs: Tensor[], context: T) => Tensor[];\nexport type OperatorInitialization<T> = (node: Graph.Node, graph: Graph) => T;\n\nexport interface Operator {\n  readonly impl: OperatorImplementation<unknown>;\n  readonly context: Graph.Node|unknown;\n}\n\nexport const NUMBER_TYPES: readonly Tensor.DataType[] =\n    ['float32', 'float64', 'int32', 'int16', 'int8', 'uint16', 'uint32', 'uint8'];\nexport const INT_TYPES: readonly Tensor.DataType[] = ['int32', 'int16', 'int8', 'uint16', 'uint32', 'uint8'];\nexport const FLOAT_TYPES: readonly Tensor.DataType[] = ['float32', 'float64'];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from './graph';\nimport {OperatorImplementation, OperatorInitialization} from './operators';\n\nexport interface OpSet {\n  domain: string;\n  version: number;\n}\nexport declare namespace OpSet {\n  /**\n   * Domain of an opset, it can be an empty string(default value, represent for ai.onnx), or 'ai.onnx.ml'\n   */\n  type Domain = ''|'ai.onnx.ml'|'com.microsoft';\n  /**\n   * A resolve rule consists of 4 or 5 items: opType, opSetDomain, versionSelector, operatorImplementation and\n   * operatorInitialization (optional)\n   */\n  type ResolveRule = [\n    string, Domain, string, OperatorImplementation<Graph.Node>\n  ]|[string, Domain, string, OperatorImplementation<unknown>, OperatorInitialization<unknown>];\n}\n\nexport function resolveOperator(node: Graph.Node, opsets: readonly OpSet[], rules: readonly OpSet.ResolveRule[]) {\n  for (const rule of rules) {\n    const opType = rule[0];\n    const domain = rule[1];\n    const versionSelector = rule[2];\n    const opImpl = rule[3];\n    const opInit = rule[4];\n\n    if (node.opType === opType) {  // operator type matches\n      for (const opset of opsets) {\n        // opset '' and 'ai.onnx' are considered the same.\n        if (opset.domain === domain || (opset.domain === 'ai.onnx' && domain === '')) {  // opset domain found\n          if (matchSelector(opset.version, versionSelector)) {\n            return {opImpl, opInit};\n          }\n        }\n      }\n    }\n  }\n\n  throw new TypeError(`cannot resolve operator '${node.opType}' with opsets: ${\n      opsets.map(set => `${set.domain || 'ai.onnx'} v${set.version}`).join(', ')}`);\n}\n\nfunction matchSelector(version: number, selector: string): boolean {\n  if (selector.endsWith('+')) {\n    // minimum version match ('7+' expects version>=7)\n    const rangeStart = Number.parseInt(selector.substring(0, selector.length - 1), 10);\n    return !isNaN(rangeStart) && rangeStart <= version;\n  } else if (selector.split('-').length === 2) {\n    // range match ('6-8' expects 6<=version<=8)\n    const pair = selector.split('-');\n    const rangeStart = Number.parseInt(pair[0], 10);\n    const rangeEnd = Number.parseInt(pair[1], 10);\n    return !isNaN(rangeStart) && !isNaN(rangeEnd) && rangeStart <= version && version <= rangeEnd;\n  } else {\n    // exact match ('7' expects version===7)\n    return Number.parseInt(selector, 10) === version;\n  }\n}\n","// automatically generated by the FlatBuffers compiler, do not modify\n/* eslint-disable */\n\nimport {flatbuffers} from 'flatbuffers';\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum AttributeType {\n    UNDEFINED = 0,\n    FLOAT = 1,\n    INT = 2,\n    STRING = 3,\n    TENSOR = 4,\n    GRAPH = 5,\n    FLOATS = 6,\n    INTS = 7,\n    STRINGS = 8,\n    TENSORS = 9,\n    GRAPHS = 10,\n    SPARSE_TENSOR = 11,\n    SPARSE_TENSORS = 12\n  }\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum DimensionValueType {UNKNOWN = 0, VALUE = 1, PARAM = 2}\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum TensorDataType {\n    UNDEFINED = 0,\n    FLOAT = 1,\n    UINT8 = 2,\n    INT8 = 3,\n    UINT16 = 4,\n    INT16 = 5,\n    INT32 = 6,\n    INT64 = 7,\n    STRING = 8,\n    BOOL = 9,\n    FLOAT16 = 10,\n    DOUBLE = 11,\n    UINT32 = 12,\n    UINT64 = 13,\n    COMPLEX64 = 14,\n    COMPLEX128 = 15,\n    BFLOAT16 = 16,\n    FLOAT8E4M3FN = 17,\n    FLOAT8E4M3FNUZ = 18,\n    FLOAT8E5M2 = 19,\n    FLOAT8E5M2FNUZ = 20,\n  }\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum NodeType {Primitive = 0, Fused = 1}\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum TypeInfoValue {NONE = 0, tensor_type = 1, sequence_type = 2, map_type = 3}\n}\n\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Shape {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Shape\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Shape {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Shape= obj\n     * @returns Shape\n     */\n    static getRootAsShape(bb: flatbuffers.ByteBuffer, obj?: Shape): Shape {\n      return (obj || new Shape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Shape= obj\n     * @returns Shape\n     */\n    static getSizePrefixedRootAsShape(bb: flatbuffers.ByteBuffer, obj?: Shape): Shape {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Shape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Dimension= obj\n     * @returns onnxruntime.experimental.fbs.Dimension\n     */\n    dim(index: number, obj?: onnxruntime.experimental.fbs.Dimension): onnxruntime.experimental.fbs.Dimension|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Dimension())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    dimLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startShape(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimOffset\n     */\n    static addDim(builder: flatbuffers.Builder, dimOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, dimOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createDimVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startDimVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endShape(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createShape(builder: flatbuffers.Builder, dimOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Shape.startShape(builder);\n      Shape.addDim(builder, dimOffset);\n      return Shape.endShape(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Dimension {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Dimension\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Dimension {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Dimension= obj\n     * @returns Dimension\n     */\n    static getRootAsDimension(bb: flatbuffers.ByteBuffer, obj?: Dimension): Dimension {\n      return (obj || new Dimension()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Dimension= obj\n     * @returns Dimension\n     */\n    static getSizePrefixedRootAsDimension(bb: flatbuffers.ByteBuffer, obj?: Dimension): Dimension {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Dimension()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.DimensionValue= obj\n     * @returns onnxruntime.experimental.fbs.DimensionValue|null\n     */\n    value(obj?: onnxruntime.experimental.fbs.DimensionValue): onnxruntime.experimental.fbs.DimensionValue|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.DimensionValue())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    denotation(): string|null;\n    denotation(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    denotation(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startDimension(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valueOffset\n     */\n    static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, valueOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset denotationOffset\n     */\n    static addDenotation(builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, denotationOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endDimension(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createDimension(\n        builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset,\n        denotationOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Dimension.startDimension(builder);\n      Dimension.addValue(builder, valueOffset);\n      Dimension.addDenotation(builder, denotationOffset);\n      return Dimension.endDimension(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class DimensionValue {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns DimensionValue\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): DimensionValue {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param DimensionValue= obj\n     * @returns DimensionValue\n     */\n    static getRootAsDimensionValue(bb: flatbuffers.ByteBuffer, obj?: DimensionValue): DimensionValue {\n      return (obj || new DimensionValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param DimensionValue= obj\n     * @returns DimensionValue\n     */\n    static getSizePrefixedRootAsDimensionValue(bb: flatbuffers.ByteBuffer, obj?: DimensionValue): DimensionValue {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new DimensionValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.DimensionValueType\n     */\n    dimType(): onnxruntime.experimental.fbs.DimensionValueType {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? /**  */ (this.bb!.readInt8(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.DimensionValueType.UNKNOWN;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    dimValue(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    dimParam(): string|null;\n    dimParam(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    dimParam(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startDimensionValue(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.DimensionValueType dimType\n     */\n    static addDimType(builder: flatbuffers.Builder, dimType: onnxruntime.experimental.fbs.DimensionValueType) {\n      builder.addFieldInt8(0, dimType, onnxruntime.experimental.fbs.DimensionValueType.UNKNOWN);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long dimValue\n     */\n    static addDimValue(builder: flatbuffers.Builder, dimValue: flatbuffers.Long) {\n      builder.addFieldInt64(1, dimValue, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimParamOffset\n     */\n    static addDimParam(builder: flatbuffers.Builder, dimParamOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dimParamOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endDimensionValue(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createDimensionValue(\n        builder: flatbuffers.Builder, dimType: onnxruntime.experimental.fbs.DimensionValueType,\n        dimValue: flatbuffers.Long, dimParamOffset: flatbuffers.Offset): flatbuffers.Offset {\n      DimensionValue.startDimensionValue(builder);\n      DimensionValue.addDimType(builder, dimType);\n      DimensionValue.addDimValue(builder, dimValue);\n      DimensionValue.addDimParam(builder, dimParamOffset);\n      return DimensionValue.endDimensionValue(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class TensorTypeAndShape {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns TensorTypeAndShape\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): TensorTypeAndShape {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TensorTypeAndShape= obj\n     * @returns TensorTypeAndShape\n     */\n    static getRootAsTensorTypeAndShape(bb: flatbuffers.ByteBuffer, obj?: TensorTypeAndShape): TensorTypeAndShape {\n      return (obj || new TensorTypeAndShape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TensorTypeAndShape= obj\n     * @returns TensorTypeAndShape\n     */\n    static getSizePrefixedRootAsTensorTypeAndShape(bb: flatbuffers.ByteBuffer, obj?: TensorTypeAndShape):\n        TensorTypeAndShape {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new TensorTypeAndShape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TensorDataType\n     */\n    elemType(): onnxruntime.experimental.fbs.TensorDataType {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Shape= obj\n     * @returns onnxruntime.experimental.fbs.Shape|null\n     */\n    shape(obj?: onnxruntime.experimental.fbs.Shape): onnxruntime.experimental.fbs.Shape|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Shape())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startTensorTypeAndShape(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TensorDataType elemType\n     */\n    static addElemType(builder: flatbuffers.Builder, elemType: onnxruntime.experimental.fbs.TensorDataType) {\n      builder.addFieldInt32(0, elemType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset shapeOffset\n     */\n    static addShape(builder: flatbuffers.Builder, shapeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, shapeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endTensorTypeAndShape(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createTensorTypeAndShape(\n        builder: flatbuffers.Builder, elemType: onnxruntime.experimental.fbs.TensorDataType,\n        shapeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      TensorTypeAndShape.startTensorTypeAndShape(builder);\n      TensorTypeAndShape.addElemType(builder, elemType);\n      TensorTypeAndShape.addShape(builder, shapeOffset);\n      return TensorTypeAndShape.endTensorTypeAndShape(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class MapType {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns MapType\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): MapType {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param MapType= obj\n     * @returns MapType\n     */\n    static getRootAsMapType(bb: flatbuffers.ByteBuffer, obj?: MapType): MapType {\n      return (obj || new MapType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param MapType= obj\n     * @returns MapType\n     */\n    static getSizePrefixedRootAsMapType(bb: flatbuffers.ByteBuffer, obj?: MapType): MapType {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new MapType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TensorDataType\n     */\n    keyType(): onnxruntime.experimental.fbs.TensorDataType {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\n     */\n    valueType(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startMapType(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TensorDataType keyType\n     */\n    static addKeyType(builder: flatbuffers.Builder, keyType: onnxruntime.experimental.fbs.TensorDataType) {\n      builder.addFieldInt32(0, keyType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valueTypeOffset\n     */\n    static addValueType(builder: flatbuffers.Builder, valueTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, valueTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endMapType(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createMapType(\n        builder: flatbuffers.Builder, keyType: onnxruntime.experimental.fbs.TensorDataType,\n        valueTypeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      MapType.startMapType(builder);\n      MapType.addKeyType(builder, keyType);\n      MapType.addValueType(builder, valueTypeOffset);\n      return MapType.endMapType(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SequenceType {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SequenceType\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SequenceType {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SequenceType= obj\n     * @returns SequenceType\n     */\n    static getRootAsSequenceType(bb: flatbuffers.ByteBuffer, obj?: SequenceType): SequenceType {\n      return (obj || new SequenceType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SequenceType= obj\n     * @returns SequenceType\n     */\n    static getSizePrefixedRootAsSequenceType(bb: flatbuffers.ByteBuffer, obj?: SequenceType): SequenceType {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SequenceType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\n     */\n    elemType(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSequenceType(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset elemTypeOffset\n     */\n    static addElemType(builder: flatbuffers.Builder, elemTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, elemTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSequenceType(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createSequenceType(builder: flatbuffers.Builder, elemTypeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SequenceType.startSequenceType(builder);\n      SequenceType.addElemType(builder, elemTypeOffset);\n      return SequenceType.endSequenceType(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class EdgeEnd {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns EdgeEnd\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): EdgeEnd {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeIndex(): number {\n      return this.bb!.readUint32(this.bb_pos);\n    }\n\n    /**\n     * @returns number\n     */\n    srcArgIndex(): number {\n      return this.bb!.readInt32(this.bb_pos + 4);\n    }\n\n    /**\n     * @returns number\n     */\n    dstArgIndex(): number {\n      return this.bb!.readInt32(this.bb_pos + 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number node_index\n     * @param number src_arg_index\n     * @param number dst_arg_index\n     * @returns flatbuffers.Offset\n     */\n    static createEdgeEnd(\n        builder: flatbuffers.Builder, node_index: number, src_arg_index: number,\n        dst_arg_index: number): flatbuffers.Offset {\n      builder.prep(4, 12);\n      builder.writeInt32(dst_arg_index);\n      builder.writeInt32(src_arg_index);\n      builder.writeInt32(node_index);\n      return builder.offset();\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class NodeEdge {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns NodeEdge\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): NodeEdge {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param NodeEdge= obj\n     * @returns NodeEdge\n     */\n    static getRootAsNodeEdge(bb: flatbuffers.ByteBuffer, obj?: NodeEdge): NodeEdge {\n      return (obj || new NodeEdge()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param NodeEdge= obj\n     * @returns NodeEdge\n     */\n    static getSizePrefixedRootAsNodeEdge(bb: flatbuffers.ByteBuffer, obj?: NodeEdge): NodeEdge {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new NodeEdge()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns number\n     */\n    nodeIndex(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.EdgeEnd= obj\n     * @returns onnxruntime.experimental.fbs.EdgeEnd\n     */\n    inputEdges(index: number, obj?: onnxruntime.experimental.fbs.EdgeEnd): onnxruntime.experimental.fbs.EdgeEnd|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.EdgeEnd())\n                          .__init(this.bb!.__vector(this.bb_pos + offset) + index * 12, this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    inputEdgesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.EdgeEnd= obj\n     * @returns onnxruntime.experimental.fbs.EdgeEnd\n     */\n    outputEdges(index: number, obj?: onnxruntime.experimental.fbs.EdgeEnd): onnxruntime.experimental.fbs.EdgeEnd|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.EdgeEnd())\n                          .__init(this.bb!.__vector(this.bb_pos + offset) + index * 12, this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    outputEdgesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startNodeEdge(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number nodeIndex\n     */\n    static addNodeIndex(builder: flatbuffers.Builder, nodeIndex: number) {\n      builder.addFieldInt32(0, nodeIndex, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputEdgesOffset\n     */\n    static addInputEdges(builder: flatbuffers.Builder, inputEdgesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, inputEdgesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputEdgesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(12, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset outputEdgesOffset\n     */\n    static addOutputEdges(builder: flatbuffers.Builder, outputEdgesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, outputEdgesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOutputEdgesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(12, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endNodeEdge(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createNodeEdge(\n        builder: flatbuffers.Builder, nodeIndex: number, inputEdgesOffset: flatbuffers.Offset,\n        outputEdgesOffset: flatbuffers.Offset): flatbuffers.Offset {\n      NodeEdge.startNodeEdge(builder);\n      NodeEdge.addNodeIndex(builder, nodeIndex);\n      NodeEdge.addInputEdges(builder, inputEdgesOffset);\n      NodeEdge.addOutputEdges(builder, outputEdgesOffset);\n      return NodeEdge.endNodeEdge(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Node {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Node\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Node {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Node= obj\n     * @returns Node\n     */\n    static getRootAsNode(bb: flatbuffers.ByteBuffer, obj?: Node): Node {\n      return (obj || new Node()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Node= obj\n     * @returns Node\n     */\n    static getSizePrefixedRootAsNode(bb: flatbuffers.ByteBuffer, obj?: Node): Node {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Node()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    domain(): string|null;\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    domain(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    sinceVersion(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    index(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    opType(): string|null;\n    opType(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    opType(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.NodeType\n     */\n    type(): onnxruntime.experimental.fbs.NodeType {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.NodeType.Primitive;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    executionProviderType(): string|null;\n    executionProviderType(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    executionProviderType(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    inputs(index: number): string;\n    inputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    inputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    inputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    outputs(index: number): string;\n    outputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    outputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    outputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Attribute= obj\n     * @returns onnxruntime.experimental.fbs.Attribute\n     */\n    attributes(index: number, obj?: onnxruntime.experimental.fbs.Attribute): onnxruntime.experimental.fbs.Attribute\n        |null {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Attribute())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    attributesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    inputArgCounts(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    inputArgCountsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Int32Array\n     */\n    inputArgCountsArray(): Int32Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ?\n          new Int32Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    implicitInputs(index: number): string;\n    implicitInputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    implicitInputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    implicitInputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startNode(builder: flatbuffers.Builder) {\n      builder.startObject(13);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset domainOffset\n     */\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, domainOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number sinceVersion\n     */\n    static addSinceVersion(builder: flatbuffers.Builder, sinceVersion: number) {\n      builder.addFieldInt32(3, sinceVersion, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number index\n     */\n    static addIndex(builder: flatbuffers.Builder, index: number) {\n      builder.addFieldInt32(4, index, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset opTypeOffset\n     */\n    static addOpType(builder: flatbuffers.Builder, opTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, opTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.NodeType type\n     */\n    static addType(builder: flatbuffers.Builder, type: onnxruntime.experimental.fbs.NodeType) {\n      builder.addFieldInt32(6, type, onnxruntime.experimental.fbs.NodeType.Primitive);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset executionProviderTypeOffset\n     */\n    static addExecutionProviderType(builder: flatbuffers.Builder, executionProviderTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, executionProviderTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputsOffset\n     */\n    static addInputs(builder: flatbuffers.Builder, inputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(8, inputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset outputsOffset\n     */\n    static addOutputs(builder: flatbuffers.Builder, outputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(9, outputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createOutputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOutputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset attributesOffset\n     */\n    static addAttributes(builder: flatbuffers.Builder, attributesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(10, attributesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createAttributesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startAttributesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputArgCountsOffset\n     */\n    static addInputArgCounts(builder: flatbuffers.Builder, inputArgCountsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(11, inputArgCountsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createInputArgCountsVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputArgCountsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset implicitInputsOffset\n     */\n    static addImplicitInputs(builder: flatbuffers.Builder, implicitInputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(12, implicitInputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createImplicitInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startImplicitInputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endNode(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createNode(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        domainOffset: flatbuffers.Offset, sinceVersion: number, index: number, opTypeOffset: flatbuffers.Offset,\n        type: onnxruntime.experimental.fbs.NodeType, executionProviderTypeOffset: flatbuffers.Offset,\n        inputsOffset: flatbuffers.Offset, outputsOffset: flatbuffers.Offset, attributesOffset: flatbuffers.Offset,\n        inputArgCountsOffset: flatbuffers.Offset, implicitInputsOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Node.startNode(builder);\n      Node.addName(builder, nameOffset);\n      Node.addDocString(builder, docStringOffset);\n      Node.addDomain(builder, domainOffset);\n      Node.addSinceVersion(builder, sinceVersion);\n      Node.addIndex(builder, index);\n      Node.addOpType(builder, opTypeOffset);\n      Node.addType(builder, type);\n      Node.addExecutionProviderType(builder, executionProviderTypeOffset);\n      Node.addInputs(builder, inputsOffset);\n      Node.addOutputs(builder, outputsOffset);\n      Node.addAttributes(builder, attributesOffset);\n      Node.addInputArgCounts(builder, inputArgCountsOffset);\n      Node.addImplicitInputs(builder, implicitInputsOffset);\n      return Node.endNode(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class ValueInfo {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns ValueInfo\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): ValueInfo {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param ValueInfo= obj\n     * @returns ValueInfo\n     */\n    static getRootAsValueInfo(bb: flatbuffers.ByteBuffer, obj?: ValueInfo): ValueInfo {\n      return (obj || new ValueInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param ValueInfo= obj\n     * @returns ValueInfo\n     */\n    static getSizePrefixedRootAsValueInfo(bb: flatbuffers.ByteBuffer, obj?: ValueInfo): ValueInfo {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new ValueInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\n     */\n    type(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startValueInfo(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset typeOffset\n     */\n    static addType(builder: flatbuffers.Builder, typeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, typeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endValueInfo(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createValueInfo(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        typeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      ValueInfo.startValueInfo(builder);\n      ValueInfo.addName(builder, nameOffset);\n      ValueInfo.addDocString(builder, docStringOffset);\n      ValueInfo.addType(builder, typeOffset);\n      return ValueInfo.endValueInfo(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class TypeInfo {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns TypeInfo\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): TypeInfo {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TypeInfo= obj\n     * @returns TypeInfo\n     */\n    static getRootAsTypeInfo(bb: flatbuffers.ByteBuffer, obj?: TypeInfo): TypeInfo {\n      return (obj || new TypeInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TypeInfo= obj\n     * @returns TypeInfo\n     */\n    static getSizePrefixedRootAsTypeInfo(bb: flatbuffers.ByteBuffer, obj?: TypeInfo): TypeInfo {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new TypeInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    denotation(): string|null;\n    denotation(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    denotation(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TypeInfoValue\n     */\n    valueType(): onnxruntime.experimental.fbs.TypeInfoValue {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? /**  */ (this.bb!.readUint8(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TypeInfoValue.NONE;\n    }\n\n    /**\n     * @param flatbuffers.Table obj\n     * @returns ?flatbuffers.Table\n     */\n    value<T extends flatbuffers.Table>(obj: T): T|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startTypeInfo(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset denotationOffset\n     */\n    static addDenotation(builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, denotationOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TypeInfoValue valueType\n     */\n    static addValueType(builder: flatbuffers.Builder, valueType: onnxruntime.experimental.fbs.TypeInfoValue) {\n      builder.addFieldInt8(1, valueType, onnxruntime.experimental.fbs.TypeInfoValue.NONE);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valueOffset\n     */\n    static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, valueOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endTypeInfo(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createTypeInfo(\n        builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset,\n        valueType: onnxruntime.experimental.fbs.TypeInfoValue, valueOffset: flatbuffers.Offset): flatbuffers.Offset {\n      TypeInfo.startTypeInfo(builder);\n      TypeInfo.addDenotation(builder, denotationOffset);\n      TypeInfo.addValueType(builder, valueType);\n      TypeInfo.addValue(builder, valueOffset);\n      return TypeInfo.endTypeInfo(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class OperatorSetId {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns OperatorSetId\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): OperatorSetId {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param OperatorSetId= obj\n     * @returns OperatorSetId\n     */\n    static getRootAsOperatorSetId(bb: flatbuffers.ByteBuffer, obj?: OperatorSetId): OperatorSetId {\n      return (obj || new OperatorSetId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param OperatorSetId= obj\n     * @returns OperatorSetId\n     */\n    static getSizePrefixedRootAsOperatorSetId(bb: flatbuffers.ByteBuffer, obj?: OperatorSetId): OperatorSetId {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new OperatorSetId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    domain(): string|null;\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    domain(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    version(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startOperatorSetId(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset domainOffset\n     */\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, domainOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long version\n     */\n    static addVersion(builder: flatbuffers.Builder, version: flatbuffers.Long) {\n      builder.addFieldInt64(1, version, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endOperatorSetId(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createOperatorSetId(\n        builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset, version: flatbuffers.Long): flatbuffers.Offset {\n      OperatorSetId.startOperatorSetId(builder);\n      OperatorSetId.addDomain(builder, domainOffset);\n      OperatorSetId.addVersion(builder, version);\n      return OperatorSetId.endOperatorSetId(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Tensor {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Tensor\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Tensor {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Tensor= obj\n     * @returns Tensor\n     */\n    static getRootAsTensor(bb: flatbuffers.ByteBuffer, obj?: Tensor): Tensor {\n      return (obj || new Tensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Tensor= obj\n     * @returns Tensor\n     */\n    static getSizePrefixedRootAsTensor(bb: flatbuffers.ByteBuffer, obj?: Tensor): Tensor {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Tensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    dims(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    dimsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TensorDataType\n     */\n    dataType(): onnxruntime.experimental.fbs.TensorDataType {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    rawData(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    rawDataLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Uint8Array\n     */\n    rawDataArray(): Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ?\n          new Uint8Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    stringData(index: number): string;\n    stringData(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    stringData(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    stringDataLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startTensor(builder: flatbuffers.Builder) {\n      builder.startObject(6);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimsOffset\n     */\n    static addDims(builder: flatbuffers.Builder, dimsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dimsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createDimsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startDimsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TensorDataType dataType\n     */\n    static addDataType(builder: flatbuffers.Builder, dataType: onnxruntime.experimental.fbs.TensorDataType) {\n      builder.addFieldInt32(3, dataType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset rawDataOffset\n     */\n    static addRawData(builder: flatbuffers.Builder, rawDataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, rawDataOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createRawDataVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(1, data.length, 1);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt8(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startRawDataVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(1, numElems, 1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset stringDataOffset\n     */\n    static addStringData(builder: flatbuffers.Builder, stringDataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, stringDataOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createStringDataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startStringDataVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endTensor(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createTensor(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        dimsOffset: flatbuffers.Offset, dataType: onnxruntime.experimental.fbs.TensorDataType,\n        rawDataOffset: flatbuffers.Offset, stringDataOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Tensor.startTensor(builder);\n      Tensor.addName(builder, nameOffset);\n      Tensor.addDocString(builder, docStringOffset);\n      Tensor.addDims(builder, dimsOffset);\n      Tensor.addDataType(builder, dataType);\n      Tensor.addRawData(builder, rawDataOffset);\n      Tensor.addStringData(builder, stringDataOffset);\n      return Tensor.endTensor(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SparseTensor {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SparseTensor\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SparseTensor {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SparseTensor= obj\n     * @returns SparseTensor\n     */\n    static getRootAsSparseTensor(bb: flatbuffers.ByteBuffer, obj?: SparseTensor): SparseTensor {\n      return (obj || new SparseTensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SparseTensor= obj\n     * @returns SparseTensor\n     */\n    static getSizePrefixedRootAsSparseTensor(bb: flatbuffers.ByteBuffer, obj?: SparseTensor): SparseTensor {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SparseTensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor|null\n     */\n    values(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor|null\n     */\n    indices(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    dims(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    dimsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSparseTensor(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valuesOffset\n     */\n    static addValues(builder: flatbuffers.Builder, valuesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, valuesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset indicesOffset\n     */\n    static addIndices(builder: flatbuffers.Builder, indicesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, indicesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimsOffset\n     */\n    static addDims(builder: flatbuffers.Builder, dimsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dimsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createDimsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startDimsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSparseTensor(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createSparseTensor(\n        builder: flatbuffers.Builder, valuesOffset: flatbuffers.Offset, indicesOffset: flatbuffers.Offset,\n        dimsOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SparseTensor.startSparseTensor(builder);\n      SparseTensor.addValues(builder, valuesOffset);\n      SparseTensor.addIndices(builder, indicesOffset);\n      SparseTensor.addDims(builder, dimsOffset);\n      return SparseTensor.endSparseTensor(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Attribute {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Attribute\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Attribute {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Attribute= obj\n     * @returns Attribute\n     */\n    static getRootAsAttribute(bb: flatbuffers.ByteBuffer, obj?: Attribute): Attribute {\n      return (obj || new Attribute()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Attribute= obj\n     * @returns Attribute\n     */\n    static getSizePrefixedRootAsAttribute(bb: flatbuffers.ByteBuffer, obj?: Attribute): Attribute {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Attribute()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.AttributeType\n     */\n    type(): onnxruntime.experimental.fbs.AttributeType {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.AttributeType.UNDEFINED;\n    }\n\n    /**\n     * @returns number\n     */\n    f(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    i(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    s(): string|null;\n    s(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    s(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor|null\n     */\n    t(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Graph= obj\n     * @returns onnxruntime.experimental.fbs.Graph|null\n     */\n    g(obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    floats(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.readFloat32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    floatsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Float32Array\n     */\n    floatsArray(): Float32Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ?\n          new Float32Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    ints(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    intsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    strings(index: number): string;\n    strings(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    strings(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    stringsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor\n     */\n    tensors(index: number, obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    tensorsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Graph= obj\n     * @returns onnxruntime.experimental.fbs.Graph\n     */\n    graphs(index: number, obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    graphsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startAttribute(builder: flatbuffers.Builder) {\n      builder.startObject(13);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.AttributeType type\n     */\n    static addType(builder: flatbuffers.Builder, type: onnxruntime.experimental.fbs.AttributeType) {\n      builder.addFieldInt32(2, type, onnxruntime.experimental.fbs.AttributeType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number f\n     */\n    static addF(builder: flatbuffers.Builder, f: number) {\n      builder.addFieldFloat32(3, f, 0.0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long i\n     */\n    static addI(builder: flatbuffers.Builder, i: flatbuffers.Long) {\n      builder.addFieldInt64(4, i, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sOffset\n     */\n    static addS(builder: flatbuffers.Builder, sOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, sOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset tOffset\n     */\n    static addT(builder: flatbuffers.Builder, tOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, tOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset gOffset\n     */\n    static addG(builder: flatbuffers.Builder, gOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, gOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset floatsOffset\n     */\n    static addFloats(builder: flatbuffers.Builder, floatsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(8, floatsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createFloatsVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addFloat32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startFloatsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset intsOffset\n     */\n    static addInts(builder: flatbuffers.Builder, intsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(9, intsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createIntsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startIntsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset stringsOffset\n     */\n    static addStrings(builder: flatbuffers.Builder, stringsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(10, stringsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createStringsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startStringsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset tensorsOffset\n     */\n    static addTensors(builder: flatbuffers.Builder, tensorsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(11, tensorsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createTensorsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startTensorsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphsOffset\n     */\n    static addGraphs(builder: flatbuffers.Builder, graphsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(12, graphsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createGraphsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startGraphsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endAttribute(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createAttribute(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        type: onnxruntime.experimental.fbs.AttributeType, f: number, i: flatbuffers.Long, sOffset: flatbuffers.Offset,\n        tOffset: flatbuffers.Offset, gOffset: flatbuffers.Offset, floatsOffset: flatbuffers.Offset,\n        intsOffset: flatbuffers.Offset, stringsOffset: flatbuffers.Offset, tensorsOffset: flatbuffers.Offset,\n        graphsOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Attribute.startAttribute(builder);\n      Attribute.addName(builder, nameOffset);\n      Attribute.addDocString(builder, docStringOffset);\n      Attribute.addType(builder, type);\n      Attribute.addF(builder, f);\n      Attribute.addI(builder, i);\n      Attribute.addS(builder, sOffset);\n      Attribute.addT(builder, tOffset);\n      Attribute.addG(builder, gOffset);\n      Attribute.addFloats(builder, floatsOffset);\n      Attribute.addInts(builder, intsOffset);\n      Attribute.addStrings(builder, stringsOffset);\n      Attribute.addTensors(builder, tensorsOffset);\n      Attribute.addGraphs(builder, graphsOffset);\n      return Attribute.endAttribute(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Graph {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Graph\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Graph {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Graph= obj\n     * @returns Graph\n     */\n    static getRootAsGraph(bb: flatbuffers.ByteBuffer, obj?: Graph): Graph {\n      return (obj || new Graph()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Graph= obj\n     * @returns Graph\n     */\n    static getSizePrefixedRootAsGraph(bb: flatbuffers.ByteBuffer, obj?: Graph): Graph {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Graph()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor\n     */\n    initializers(index: number, obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    initializersLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.ValueInfo= obj\n     * @returns onnxruntime.experimental.fbs.ValueInfo\n     */\n    nodeArgs(index: number, obj?: onnxruntime.experimental.fbs.ValueInfo): onnxruntime.experimental.fbs.ValueInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.ValueInfo())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeArgsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Node= obj\n     * @returns onnxruntime.experimental.fbs.Node\n     */\n    nodes(index: number, obj?: onnxruntime.experimental.fbs.Node): onnxruntime.experimental.fbs.Node|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Node())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    nodesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    maxNodeIndex(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.NodeEdge= obj\n     * @returns onnxruntime.experimental.fbs.NodeEdge\n     */\n    nodeEdges(index: number, obj?: onnxruntime.experimental.fbs.NodeEdge): onnxruntime.experimental.fbs.NodeEdge|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? (obj || new onnxruntime.experimental.fbs.NodeEdge())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeEdgesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    inputs(index: number): string;\n    inputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    inputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    inputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    outputs(index: number): string;\n    outputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    outputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    outputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.SparseTensor= obj\n     * @returns onnxruntime.experimental.fbs.SparseTensor\n     */\n    sparseInitializers(index: number, obj?: onnxruntime.experimental.fbs.SparseTensor):\n        onnxruntime.experimental.fbs.SparseTensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SparseTensor())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    sparseInitializersLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startGraph(builder: flatbuffers.Builder) {\n      builder.startObject(8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset initializersOffset\n     */\n    static addInitializers(builder: flatbuffers.Builder, initializersOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, initializersOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createInitializersVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInitializersVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodeArgsOffset\n     */\n    static addNodeArgs(builder: flatbuffers.Builder, nodeArgsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, nodeArgsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodeArgsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodeArgsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodesOffset\n     */\n    static addNodes(builder: flatbuffers.Builder, nodesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, nodesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number maxNodeIndex\n     */\n    static addMaxNodeIndex(builder: flatbuffers.Builder, maxNodeIndex: number) {\n      builder.addFieldInt32(3, maxNodeIndex, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodeEdgesOffset\n     */\n    static addNodeEdges(builder: flatbuffers.Builder, nodeEdgesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, nodeEdgesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodeEdgesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodeEdgesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputsOffset\n     */\n    static addInputs(builder: flatbuffers.Builder, inputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, inputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset outputsOffset\n     */\n    static addOutputs(builder: flatbuffers.Builder, outputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, outputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createOutputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOutputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sparseInitializersOffset\n     */\n    static addSparseInitializers(builder: flatbuffers.Builder, sparseInitializersOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, sparseInitializersOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createSparseInitializersVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]):\n        flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startSparseInitializersVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endGraph(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createGraph(\n        builder: flatbuffers.Builder, initializersOffset: flatbuffers.Offset, nodeArgsOffset: flatbuffers.Offset,\n        nodesOffset: flatbuffers.Offset, maxNodeIndex: number, nodeEdgesOffset: flatbuffers.Offset,\n        inputsOffset: flatbuffers.Offset, outputsOffset: flatbuffers.Offset,\n        sparseInitializersOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Graph.startGraph(builder);\n      Graph.addInitializers(builder, initializersOffset);\n      Graph.addNodeArgs(builder, nodeArgsOffset);\n      Graph.addNodes(builder, nodesOffset);\n      Graph.addMaxNodeIndex(builder, maxNodeIndex);\n      Graph.addNodeEdges(builder, nodeEdgesOffset);\n      Graph.addInputs(builder, inputsOffset);\n      Graph.addOutputs(builder, outputsOffset);\n      Graph.addSparseInitializers(builder, sparseInitializersOffset);\n      return Graph.endGraph(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Model {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Model\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Model {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Model= obj\n     * @returns Model\n     */\n    static getRootAsModel(bb: flatbuffers.ByteBuffer, obj?: Model): Model {\n      return (obj || new Model()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Model= obj\n     * @returns Model\n     */\n    static getSizePrefixedRootAsModel(bb: flatbuffers.ByteBuffer, obj?: Model): Model {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Model()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    irVersion(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.OperatorSetId= obj\n     * @returns onnxruntime.experimental.fbs.OperatorSetId\n     */\n    opsetImport(index: number, obj?: onnxruntime.experimental.fbs.OperatorSetId):\n        onnxruntime.experimental.fbs.OperatorSetId|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.OperatorSetId())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    opsetImportLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    producerName(): string|null;\n    producerName(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    producerName(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    producerVersion(): string|null;\n    producerVersion(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    producerVersion(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    domain(): string|null;\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    domain(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    modelVersion(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Graph= obj\n     * @returns onnxruntime.experimental.fbs.Graph|null\n     */\n    graph(obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    graphDocString(): string|null;\n    graphDocString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    graphDocString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startModel(builder: flatbuffers.Builder) {\n      builder.startObject(9);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long irVersion\n     */\n    static addIrVersion(builder: flatbuffers.Builder, irVersion: flatbuffers.Long) {\n      builder.addFieldInt64(0, irVersion, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset opsetImportOffset\n     */\n    static addOpsetImport(builder: flatbuffers.Builder, opsetImportOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, opsetImportOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createOpsetImportVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOpsetImportVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset producerNameOffset\n     */\n    static addProducerName(builder: flatbuffers.Builder, producerNameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, producerNameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset producerVersionOffset\n     */\n    static addProducerVersion(builder: flatbuffers.Builder, producerVersionOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(3, producerVersionOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset domainOffset\n     */\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, domainOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long modelVersion\n     */\n    static addModelVersion(builder: flatbuffers.Builder, modelVersion: flatbuffers.Long) {\n      builder.addFieldInt64(5, modelVersion, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphOffset\n     */\n    static addGraph(builder: flatbuffers.Builder, graphOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, graphOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphDocStringOffset\n     */\n    static addGraphDocString(builder: flatbuffers.Builder, graphDocStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(8, graphDocStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endModel(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createModel(\n        builder: flatbuffers.Builder, irVersion: flatbuffers.Long, opsetImportOffset: flatbuffers.Offset,\n        producerNameOffset: flatbuffers.Offset, producerVersionOffset: flatbuffers.Offset,\n        domainOffset: flatbuffers.Offset, modelVersion: flatbuffers.Long, docStringOffset: flatbuffers.Offset,\n        graphOffset: flatbuffers.Offset, graphDocStringOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Model.startModel(builder);\n      Model.addIrVersion(builder, irVersion);\n      Model.addOpsetImport(builder, opsetImportOffset);\n      Model.addProducerName(builder, producerNameOffset);\n      Model.addProducerVersion(builder, producerVersionOffset);\n      Model.addDomain(builder, domainOffset);\n      Model.addModelVersion(builder, modelVersion);\n      Model.addDocString(builder, docStringOffset);\n      Model.addGraph(builder, graphOffset);\n      Model.addGraphDocString(builder, graphDocStringOffset);\n      return Model.endModel(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class KernelCreateInfos {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns KernelCreateInfos\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): KernelCreateInfos {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param KernelCreateInfos= obj\n     * @returns KernelCreateInfos\n     */\n    static getRootAsKernelCreateInfos(bb: flatbuffers.ByteBuffer, obj?: KernelCreateInfos): KernelCreateInfos {\n      return (obj || new KernelCreateInfos()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param KernelCreateInfos= obj\n     * @returns KernelCreateInfos\n     */\n    static getSizePrefixedRootAsKernelCreateInfos(bb: flatbuffers.ByteBuffer, obj?: KernelCreateInfos):\n        KernelCreateInfos {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new KernelCreateInfos()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    nodeIndices(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.readUint32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeIndicesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Uint32Array\n     */\n    nodeIndicesArray(): Uint32Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ?\n          new Uint32Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    kernelDefHashes(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.readUint64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    kernelDefHashesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startKernelCreateInfos(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodeIndicesOffset\n     */\n    static addNodeIndices(builder: flatbuffers.Builder, nodeIndicesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nodeIndicesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodeIndicesVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodeIndicesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset kernelDefHashesOffset\n     */\n    static addKernelDefHashes(builder: flatbuffers.Builder, kernelDefHashesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, kernelDefHashesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createKernelDefHashesVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startKernelDefHashesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endKernelCreateInfos(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createKernelCreateInfos(\n        builder: flatbuffers.Builder, nodeIndicesOffset: flatbuffers.Offset,\n        kernelDefHashesOffset: flatbuffers.Offset): flatbuffers.Offset {\n      KernelCreateInfos.startKernelCreateInfos(builder);\n      KernelCreateInfos.addNodeIndices(builder, nodeIndicesOffset);\n      KernelCreateInfos.addKernelDefHashes(builder, kernelDefHashesOffset);\n      return KernelCreateInfos.endKernelCreateInfos(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SubGraphSessionState {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SubGraphSessionState\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SubGraphSessionState {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SubGraphSessionState= obj\n     * @returns SubGraphSessionState\n     */\n    static getRootAsSubGraphSessionState(bb: flatbuffers.ByteBuffer, obj?: SubGraphSessionState): SubGraphSessionState {\n      return (obj || new SubGraphSessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SubGraphSessionState= obj\n     * @returns SubGraphSessionState\n     */\n    static getSizePrefixedRootAsSubGraphSessionState(bb: flatbuffers.ByteBuffer, obj?: SubGraphSessionState):\n        SubGraphSessionState {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SubGraphSessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    graphId(): string|null;\n    graphId(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    graphId(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.SessionState= obj\n     * @returns onnxruntime.experimental.fbs.SessionState|null\n     */\n    sessionState(obj?: onnxruntime.experimental.fbs.SessionState): onnxruntime.experimental.fbs.SessionState|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SessionState())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSubGraphSessionState(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphIdOffset\n     */\n    static addGraphId(builder: flatbuffers.Builder, graphIdOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, graphIdOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sessionStateOffset\n     */\n    static addSessionState(builder: flatbuffers.Builder, sessionStateOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, sessionStateOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSubGraphSessionState(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      builder.requiredField(offset, 4);  // graph_id\n      return offset;\n    }\n\n    static createSubGraphSessionState(\n        builder: flatbuffers.Builder, graphIdOffset: flatbuffers.Offset,\n        sessionStateOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SubGraphSessionState.startSubGraphSessionState(builder);\n      SubGraphSessionState.addGraphId(builder, graphIdOffset);\n      SubGraphSessionState.addSessionState(builder, sessionStateOffset);\n      return SubGraphSessionState.endSubGraphSessionState(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SessionState {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SessionState\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SessionState {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SessionState= obj\n     * @returns SessionState\n     */\n    static getRootAsSessionState(bb: flatbuffers.ByteBuffer, obj?: SessionState): SessionState {\n      return (obj || new SessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SessionState= obj\n     * @returns SessionState\n     */\n    static getSizePrefixedRootAsSessionState(bb: flatbuffers.ByteBuffer, obj?: SessionState): SessionState {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.KernelCreateInfos= obj\n     * @returns onnxruntime.experimental.fbs.KernelCreateInfos|null\n     */\n    kernels(obj?: onnxruntime.experimental.fbs.KernelCreateInfos): onnxruntime.experimental.fbs.KernelCreateInfos|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.KernelCreateInfos())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.SubGraphSessionState= obj\n     * @returns onnxruntime.experimental.fbs.SubGraphSessionState\n     */\n    subGraphSessionStates(index: number, obj?: onnxruntime.experimental.fbs.SubGraphSessionState):\n        onnxruntime.experimental.fbs.SubGraphSessionState|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SubGraphSessionState())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    subGraphSessionStatesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSessionState(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset kernelsOffset\n     */\n    static addKernels(builder: flatbuffers.Builder, kernelsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, kernelsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset subGraphSessionStatesOffset\n     */\n    static addSubGraphSessionStates(builder: flatbuffers.Builder, subGraphSessionStatesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, subGraphSessionStatesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createSubGraphSessionStatesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]):\n        flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startSubGraphSessionStatesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSessionState(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createSessionState(\n        builder: flatbuffers.Builder, kernelsOffset: flatbuffers.Offset,\n        subGraphSessionStatesOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SessionState.startSessionState(builder);\n      SessionState.addKernels(builder, kernelsOffset);\n      SessionState.addSubGraphSessionStates(builder, subGraphSessionStatesOffset);\n      return SessionState.endSessionState(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class InferenceSession {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns InferenceSession\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): InferenceSession {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param InferenceSession= obj\n     * @returns InferenceSession\n     */\n    static getRootAsInferenceSession(bb: flatbuffers.ByteBuffer, obj?: InferenceSession): InferenceSession {\n      return (obj || new InferenceSession()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param InferenceSession= obj\n     * @returns InferenceSession\n     */\n    static getSizePrefixedRootAsInferenceSession(bb: flatbuffers.ByteBuffer, obj?: InferenceSession): InferenceSession {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new InferenceSession()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @returns boolean\n     */\n    static bufferHasIdentifier(bb: flatbuffers.ByteBuffer): boolean {\n      return bb.__has_identifier('ORTM');\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    ortVersion(): string|null;\n    ortVersion(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    ortVersion(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Model= obj\n     * @returns onnxruntime.experimental.fbs.Model|null\n     */\n    model(obj?: onnxruntime.experimental.fbs.Model): onnxruntime.experimental.fbs.Model|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Model())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.SessionState= obj\n     * @returns onnxruntime.experimental.fbs.SessionState|null\n     */\n    sessionState(obj?: onnxruntime.experimental.fbs.SessionState): onnxruntime.experimental.fbs.SessionState|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SessionState())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startInferenceSession(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset ortVersionOffset\n     */\n    static addOrtVersion(builder: flatbuffers.Builder, ortVersionOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, ortVersionOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset modelOffset\n     */\n    static addModel(builder: flatbuffers.Builder, modelOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, modelOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sessionStateOffset\n     */\n    static addSessionState(builder: flatbuffers.Builder, sessionStateOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, sessionStateOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endInferenceSession(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset offset\n     */\n    static finishInferenceSessionBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset, 'ORTM');\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset offset\n     */\n    static finishSizePrefixedInferenceSessionBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset, 'ORTM', true);\n    }\n\n    static createInferenceSession(\n        builder: flatbuffers.Builder, ortVersionOffset: flatbuffers.Offset, modelOffset: flatbuffers.Offset,\n        sessionStateOffset: flatbuffers.Offset): flatbuffers.Offset {\n      InferenceSession.startInferenceSession(builder);\n      InferenceSession.addOrtVersion(builder, ortVersionOffset);\n      InferenceSession.addModel(builder, modelOffset);\n      InferenceSession.addSessionState(builder, sessionStateOffset);\n      return InferenceSession.endInferenceSession(builder);\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession, InferenceSessionHandler, SessionHandler, Tensor} from 'onnxruntime-common';\n\nimport {Session} from './session';\nimport {Tensor as OnnxjsTensor} from './tensor';\n\nexport class OnnxjsSessionHandler implements InferenceSessionHandler {\n  constructor(private session: Session) {\n    this.inputNames = this.session.inputNames;\n    this.outputNames = this.session.outputNames;\n  }\n\n  async dispose(): Promise<void> {}\n  inputNames: readonly string[];\n  outputNames: readonly string[];\n  async run(\n      feeds: SessionHandler.FeedsType, _fetches: SessionHandler.FetchesType,\n      _options: InferenceSession.RunOptions): Promise<SessionHandler.ReturnType> {\n    const inputMap = new Map<string, OnnxjsTensor>();\n    for (const name in feeds) {\n      if (Object.hasOwnProperty.call(feeds, name)) {\n        const feed = feeds[name];\n        inputMap.set(\n            name,\n            new OnnxjsTensor(\n                feed.dims, feed.type as OnnxjsTensor.DataType, undefined, undefined,\n                feed.data as OnnxjsTensor.NumberType));\n      }\n    }\n    const outputMap = await this.session.run(inputMap);\n    const output: SessionHandler.ReturnType = {};\n    outputMap.forEach((tensor, name) => {\n      output[name] = new Tensor(tensor.type, tensor.data, tensor.dims);\n    });\n    return output;\n  }\n  startProfiling(): void {\n    this.session.startProfiling();\n  }\n  endProfiling(): void {\n    this.session.endProfiling();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {readFile} from 'fs';\nimport {promisify} from 'util';\n\nimport {resolveBackend, SessionHandlerType} from './backend';\nimport {ExecutionPlan} from './execution-plan';\nimport {Graph} from './graph';\nimport {Profiler} from './instrument';\nimport {Model} from './model';\nimport {Operator} from './operators';\nimport {Tensor} from './tensor';\n\nexport declare namespace Session {\n  export interface Config {\n    backendHint?: string;\n    profiler?: Profiler.Config;\n  }\n\n  export interface Context {\n    profiler: Readonly<Profiler>;\n    graphInputTypes?: Tensor.DataType[];\n    graphInputDims?: Array<readonly number[]>;\n  }\n}\n\nexport class Session {\n  constructor(config: Session.Config = {}) {\n    this._initialized = false;\n    this.backendHint = config.backendHint;\n    this.profiler = Profiler.create(config.profiler);\n    this.context = {profiler: this.profiler, graphInputTypes: [], graphInputDims: []};\n  }\n\n  get inputNames(): readonly string[] {\n    return this._model.graph.getInputNames();\n  }\n  get outputNames(): readonly string[] {\n    return this._model.graph.getOutputNames();\n  }\n\n  startProfiling() {\n    this.profiler.start();\n  }\n\n  endProfiling() {\n    this.profiler.stop();\n  }\n\n  async loadModel(uri: string): Promise<void>;\n  async loadModel(buffer: ArrayBuffer, byteOffset?: number, length?: number): Promise<void>;\n  async loadModel(buffer: Uint8Array): Promise<void>;\n  async loadModel(arg: string|ArrayBuffer|Uint8Array, byteOffset?: number, length?: number): Promise<void> {\n    await this.profiler.event('session', 'Session.loadModel', async () => {\n      // resolve backend and session handler\n      const backend = await resolveBackend(this.backendHint);\n      this.sessionHandler = backend.createSessionHandler(this.context);\n\n      this._model = new Model();\n      if (typeof arg === 'string') {\n        const isOrtFormat = arg.endsWith('.ort');\n        if (typeof process !== 'undefined' && process.versions && process.versions.node) {\n          // node\n          const buf = await promisify(readFile)(arg);\n          this.initialize(buf, isOrtFormat);\n        } else {\n          // browser\n          const response = await fetch(arg);\n          const buf = await response.arrayBuffer();\n          this.initialize(new Uint8Array(buf), isOrtFormat);\n        }\n      } else if (!ArrayBuffer.isView(arg)) {\n        // load model from ArrayBuffer\n        const arr = new Uint8Array(arg, byteOffset || 0, length || arg.byteLength);\n        this.initialize(arr);\n      } else {\n        // load model from Uint8array\n        this.initialize(arg);\n      }\n    });\n  }\n\n  private initialize(modelProtoBlob: Uint8Array, isOrtFormat?: boolean): void {\n    if (this._initialized) {\n      throw new Error('already initialized');\n    }\n\n    this.profiler.event('session', 'Session.initialize', () => {\n      // load graph\n      const graphInitializer =\n          this.sessionHandler.transformGraph ? this.sessionHandler as Graph.Initializer : undefined;\n      this._model.load(modelProtoBlob, graphInitializer, isOrtFormat);\n\n      // graph is completely initialzied at this stage , let the interested handlers know\n      if (this.sessionHandler.onGraphInitialized) {\n        this.sessionHandler.onGraphInitialized(this._model.graph);\n      }\n      // initialize each operator in the graph\n      this.initializeOps(this._model.graph);\n\n      // instantiate an ExecutionPlan object to be used by the Session object\n      this._executionPlan = new ExecutionPlan(this._model.graph, this._ops, this.profiler);\n    });\n\n    this._initialized = true;\n  }\n\n  async run(inputs: Map<string, Tensor>|Tensor[]): Promise<Map<string, Tensor>> {\n    if (!this._initialized) {\n      throw new Error('session not initialized yet');\n    }\n\n    return this.profiler.event('session', 'Session.run', async () => {\n      const inputTensors = this.normalizeAndValidateInputs(inputs);\n\n      const outputTensors = await this._executionPlan.execute(this.sessionHandler, inputTensors);\n\n      return this.createOutput(outputTensors);\n    });\n  }\n\n  private normalizeAndValidateInputs(inputs: Map<string, Tensor>|Tensor[]): Tensor[] {\n    const modelInputNames = this._model.graph.getInputNames();\n\n    // normalize inputs\n    // inputs: Tensor[]\n    if (Array.isArray(inputs)) {\n      if (inputs.length !== modelInputNames.length) {\n        throw new Error(`incorrect input array length: expected ${modelInputNames.length} but got ${inputs.length}`);\n      }\n    }\n    // convert map to array\n    // inputs: Map<string, Tensor>\n    else {\n      if (inputs.size !== modelInputNames.length) {\n        throw new Error(`incorrect input map size: expected ${modelInputNames.length} but got ${inputs.size}`);\n      }\n\n      const sortedInputs = new Array<Tensor>(inputs.size);\n      let sortedInputsIndex = 0;\n      for (let i = 0; i < modelInputNames.length; ++i) {\n        const tensor = inputs.get(modelInputNames[i]);\n        if (!tensor) {\n          throw new Error(`missing input tensor for: '${name}'`);\n        }\n        sortedInputs[sortedInputsIndex++] = tensor;\n      }\n\n      inputs = sortedInputs;\n    }\n\n    // validate dims requirements\n    // First session run - graph input data is not cached for the session\n    if (!this.context.graphInputTypes || this.context.graphInputTypes.length === 0 || !this.context.graphInputDims ||\n        this.context.graphInputDims.length === 0) {\n      const modelInputIndices = this._model.graph.getInputIndices();\n      const modelValues = this._model.graph.getValues();\n\n      const graphInputDims = new Array<readonly number[]>(modelInputIndices.length);\n\n      for (let i = 0; i < modelInputIndices.length; ++i) {\n        const graphInput = modelValues[modelInputIndices[i]];\n        graphInputDims[i] = graphInput.type!.shape.dims;\n\n        // cached for second and subsequent runs.\n        // Some parts of the framework works on the assumption that the graph and types and shapes are static\n        this.context.graphInputTypes!.push(graphInput.type!.tensorType);\n        this.context.graphInputDims!.push(inputs[i].dims);\n      }\n\n      this.validateInputTensorDims(graphInputDims, inputs, true);\n    }\n\n    // Second and subsequent session runs - graph input data is cached for the session\n    else {\n      this.validateInputTensorDims(this.context.graphInputDims, inputs, false);\n    }\n\n    // validate types requirement\n    this.validateInputTensorTypes(this.context.graphInputTypes!, inputs);\n\n    return inputs;\n  }\n\n  private validateInputTensorTypes(graphInputTypes: Tensor.DataType[], givenInputs: Tensor[]) {\n    for (let i = 0; i < givenInputs.length; i++) {\n      const expectedType = graphInputTypes[i];\n      const actualType = givenInputs[i].type;\n      if (expectedType !== actualType) {\n        throw new Error(`input tensor[${i}] check failed: expected type '${expectedType}' but got ${actualType}`);\n      }\n    }\n  }\n\n  private validateInputTensorDims(\n      graphInputDims: Array<readonly number[]>, givenInputs: Tensor[], noneDimSupported: boolean) {\n    for (let i = 0; i < givenInputs.length; i++) {\n      const expectedDims = graphInputDims[i];\n      const actualDims = givenInputs[i].dims;\n      if (!this.compareTensorDims(expectedDims, actualDims, noneDimSupported)) {\n        throw new Error(`input tensor[${i}] check failed: expected shape '[${expectedDims.join(',')}]' but got [${\n            actualDims.join(',')}]`);\n      }\n    }\n  }\n\n  private compareTensorDims(expectedDims: readonly number[], actualDims: readonly number[], noneDimSupported: boolean):\n      boolean {\n    if (expectedDims.length !== actualDims.length) {\n      return false;\n    }\n\n    for (let i = 0; i < expectedDims.length; ++i) {\n      if (expectedDims[i] !== actualDims[i] && (!noneDimSupported || expectedDims[i] !== 0)) {\n        // data shape mis-match AND not a 'None' dimension.\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  private createOutput(outputTensors: Tensor[]): Map<string, Tensor> {\n    const modelOutputNames = this._model.graph.getOutputNames();\n    if (outputTensors.length !== modelOutputNames.length) {\n      throw new Error('expected number of outputs do not match number of generated outputs');\n    }\n\n    const output = new Map<string, Tensor>();\n    for (let i = 0; i < modelOutputNames.length; ++i) {\n      output.set(modelOutputNames[i], outputTensors[i]);\n    }\n\n    return output;\n  }\n\n  private initializeOps(graph: Graph): void {\n    const nodes = graph.getNodes();\n    this._ops = new Array(nodes.length);\n\n    for (let i = 0; i < nodes.length; i++) {\n      this._ops[i] = this.sessionHandler.resolve(nodes[i], this._model.opsets, graph);\n    }\n  }\n\n  private _model: Model;\n  private _initialized: boolean;\n\n  private _ops: Operator[];\n  private _executionPlan: ExecutionPlan;\n\n  private backendHint?: string;\n\n  private sessionHandler: SessionHandlerType;\n  private context: Session.Context;\n  private profiler: Readonly<Profiler>;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Guid} from 'guid-typescript';\nimport Long from 'long';\n\nimport {onnxruntime} from './ort-schema/flatbuffers/ort-generated';\nimport {onnx} from './ort-schema/protobuf/onnx';\nimport {decodeUtf8String, ProtoUtil, ShapeUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport declare namespace Tensor {\n  export interface DataTypeMap {\n    bool: Uint8Array;\n    float32: Float32Array;\n    float64: Float64Array;\n    string: string[];\n    int8: Int8Array;\n    uint8: Uint8Array;\n    int16: Int16Array;\n    uint16: Uint16Array;\n    int32: Int32Array;\n    uint32: Uint32Array;\n    int64: BigInt64Array;\n  }\n\n  export type DataType = keyof DataTypeMap;\n\n  export type StringType = Tensor.DataTypeMap['string'];\n  export type BooleanType = Tensor.DataTypeMap['bool'];\n  export type IntegerType = Tensor.DataTypeMap['int8']|Tensor.DataTypeMap['uint8']|Tensor.DataTypeMap['int16']|\n                            Tensor.DataTypeMap['uint16']|Tensor.DataTypeMap['int32']|Tensor.DataTypeMap['uint32'];\n  export type FloatType = Tensor.DataTypeMap['float32']|Tensor.DataTypeMap['float64'];\n  export type NumberType = BooleanType|IntegerType|FloatType;\n\n  export type Id = Guid;\n}\n\ntype TensorData = Tensor.DataTypeMap[Tensor.DataType];\n\ntype DataProvider = (id: Tensor.Id) => TensorData;\ntype AsyncDataProvider = (id: Tensor.Id) => Promise<TensorData>;\n\nexport class Tensor {\n  /**\n   * get the underlying tensor data\n   */\n  get data(): TensorData {\n    if (this.cache === undefined) {\n      const data = this.dataProvider!(this.dataId);\n      if (data.length !== this.size) {\n        throw new Error('Length of data provided by the Data Provider is inconsistent with the dims of this Tensor.');\n      }\n      this.cache = data;\n    }\n    return this.cache;\n  }\n\n  /**\n   * get the underlying string tensor data. Should only use when type is STRING\n   */\n  get stringData() {\n    if (this.type !== 'string') {\n      throw new TypeError('data type is not string');\n    }\n\n    return this.data as Tensor.StringType;\n  }\n\n  /**\n   * get the underlying integer tensor data. Should only use when type is one of the following: (UINT8, INT8, UINT16,\n   * INT16, INT32, UINT32, BOOL)\n   */\n  get integerData() {\n    switch (this.type) {\n      case 'uint8':\n      case 'int8':\n      case 'uint16':\n      case 'int16':\n      case 'int32':\n      case 'uint32':\n      case 'bool':\n        return this.data as Tensor.IntegerType;\n\n      default:\n        throw new TypeError('data type is not integer (uint8, int8, uint16, int16, int32, uint32, bool)');\n    }\n  }\n\n  /**\n   * get the underlying float tensor data. Should only use when type is one of the following: (FLOAT, DOUBLE)\n   */\n  get floatData() {\n    switch (this.type) {\n      case 'float32':\n      case 'float64':\n        return this.data as Tensor.FloatType;\n\n      default:\n        throw new TypeError('data type is not float (float32, float64)');\n    }\n  }\n\n  /**\n   * get the underlying number tensor data. Should only use when type is one of the following: (UINT8, INT8, UINT16,\n   * INT16, INT32, UINT32, BOOL, FLOAT, DOUBLE)\n   */\n  get numberData() {\n    if (this.type !== 'string') {\n      return this.data as Tensor.NumberType;\n    }\n    throw new TypeError('type cannot be non-number (string)');\n  }\n\n  /**\n   * get value of an element at the given indices\n   */\n  get(indices: readonly number[]): Tensor.DataTypeMap[Tensor.DataType][number] {\n    return this.data[ShapeUtil.indicesToOffset(indices, this.strides)];\n  }\n\n  /**\n   * set value of an element at the given indices\n   */\n  set(indices: readonly number[], value: Tensor.DataTypeMap[Tensor.DataType][number]) {\n    this.data[ShapeUtil.indicesToOffset(indices, this.strides)] = value;\n  }\n\n  /**\n   * get the underlying tensor data asynchronously\n   */\n  async getData(): Promise<TensorData> {\n    if (this.cache === undefined) {\n      this.cache = await this.asyncDataProvider!(this.dataId);\n    }\n    return this.cache;\n  }\n\n  /**\n   * get the number of elements in the tensor\n   */\n  public readonly size: number;\n\n  private _strides: readonly number[];\n  /**\n   * get the strides for each dimension\n   */\n  get strides(): readonly number[] {\n    if (!this._strides) {\n      this._strides = ShapeUtil.computeStrides(this.dims);\n    }\n    return this._strides;\n  }\n\n  constructor(\n      /**\n       * get the dimensions of the tensor\n       */\n      public readonly dims: readonly number[],\n      /**\n       * get the type of the tensor\n       */\n      public readonly type: Tensor.DataType, private dataProvider?: DataProvider,\n      private asyncDataProvider?: AsyncDataProvider, private cache?: TensorData,\n      /**\n       * get the data ID that used to map to a tensor data\n       */\n      public readonly dataId: Guid = Guid.create()) {\n    this.size = ShapeUtil.validateDimsAndCalcSize(dims);\n    const size = this.size;\n    const empty = (dataProvider === undefined && asyncDataProvider === undefined && cache === undefined);\n\n    if (cache !== undefined) {\n      if (cache.length !== size) {\n        throw new RangeError('Input dims doesn\\'t match data length.');\n      }\n    }\n\n    if (type === 'string') {\n      if (cache !== undefined && (!Array.isArray(cache) || !cache.every(i => typeof i === 'string'))) {\n        throw new TypeError('cache should be a string array');\n      }\n\n      if (empty) {\n        this.cache = new Array<string>(size);\n      }\n    } else {\n      if (cache !== undefined) {\n        const constructor = dataviewConstructor(type);\n        if (!(cache instanceof constructor)) {\n          throw new TypeError(`cache should be type ${constructor.name}`);\n        }\n      }\n\n      if (empty) {\n        const buf = new ArrayBuffer(size * sizeof(type));\n        this.cache = createView(buf, type);\n      }\n    }\n  }\n\n  /**\n   * Construct new Tensor from a ONNX Tensor object\n   * @param tensorProto the ONNX Tensor\n   */\n  static fromProto(tensorProto: onnx.ITensorProto): Tensor {\n    if (!tensorProto) {\n      throw new Error('cannot construct Value from an empty tensor');\n    }\n    const type = ProtoUtil.tensorDataTypeFromProto(tensorProto.dataType!);\n    const dims = ProtoUtil.tensorDimsFromProto(tensorProto.dims!);\n\n    const value = new Tensor(dims, type);\n\n    if (type === 'string') {\n      // When it's STRING type, the value should always be stored in field\n      // 'stringData'\n      tensorProto.stringData!.forEach((str, i) => {\n        value.data[i] = decodeUtf8String(str);\n      });\n\n    } else if (\n        tensorProto.rawData && typeof tensorProto.rawData.byteLength === 'number' &&\n        tensorProto.rawData.byteLength > 0) {\n      // NOT considering segment for now (IMPORTANT)\n\n      // populate value from rawData\n      const dataDest = value.data;\n      const dataSource =\n          new DataView(tensorProto.rawData.buffer, tensorProto.rawData.byteOffset, tensorProto.rawData.byteLength);\n      const elementSize = sizeofProto(tensorProto.dataType!);\n      const length = tensorProto.rawData.byteLength / elementSize;\n\n      if (tensorProto.rawData.byteLength % elementSize !== 0) {\n        throw new Error('invalid buffer length');\n      }\n      if (dataDest.length !== length) {\n        throw new Error('buffer length mismatch');\n      }\n\n      for (let i = 0; i < length; i++) {\n        const n = readProto(dataSource, tensorProto.dataType!, i * elementSize);\n        dataDest[i] = n;\n      }\n    } else {\n      // populate value from array\n      let array: Array<number|Long>;\n      switch (tensorProto.dataType) {\n        case onnx.TensorProto.DataType.FLOAT:\n          array = tensorProto.floatData!;\n          break;\n        case onnx.TensorProto.DataType.INT32:\n        case onnx.TensorProto.DataType.INT16:\n        case onnx.TensorProto.DataType.UINT16:\n        case onnx.TensorProto.DataType.INT8:\n        case onnx.TensorProto.DataType.UINT8:\n        case onnx.TensorProto.DataType.BOOL:\n          array = tensorProto.int32Data!;\n          break;\n        case onnx.TensorProto.DataType.INT64:\n          array = tensorProto.int64Data!;\n          break;\n        case onnx.TensorProto.DataType.DOUBLE:\n          array = tensorProto.doubleData!;\n          break;\n        case onnx.TensorProto.DataType.UINT32:\n        case onnx.TensorProto.DataType.UINT64:\n          array = tensorProto.uint64Data!;\n          break;\n        default:\n          // should never run here\n          throw new Error('unspecific error');\n      }\n\n      if (array === null || array === undefined) {\n        throw new Error('failed to populate data from a tensorproto value');\n      }\n\n      const data = value.data;\n      if (data.length !== array.length) {\n        throw new Error('array length mismatch');\n      }\n\n      for (let i = 0; i < array.length; i++) {\n        const element = array[i];\n        if (Long.isLong(element)) {\n          data[i] = longToNumber(element, tensorProto.dataType);\n        } else {\n          data[i] = element;\n        }\n      }\n    }\n\n    return value;\n  }\n\n  /**\n   * Construct new Tensor from raw data\n   * @param data the raw data object. Should be a string array for 'string' tensor, and the corresponding typed array\n   * for other types of tensor.\n   * @param dims the dimensions of the tensor\n   * @param type the type of the tensor\n   */\n  static fromData(data: Tensor.DataTypeMap[Tensor.DataType], dims: readonly number[], type: Tensor.DataType) {\n    return new Tensor(dims, type, undefined, undefined, data);\n  }\n\n  static fromOrtTensor(ortTensor: ortFbs.Tensor) {\n    if (!ortTensor) {\n      throw new Error('cannot construct Value from an empty tensor');\n    }\n    const dims = ProtoUtil.tensorDimsFromORTFormat(ortTensor);\n    const type = ProtoUtil.tensorDataTypeFromProto(ortTensor.dataType());\n\n    const value = new Tensor(dims, type);\n\n    if (type === 'string') {\n      // When it's STRING type, the value should always be stored in field\n      // 'stringData'\n      for (let i = 0; i < ortTensor.stringDataLength(); i++) {\n        value.data[i] = ortTensor.stringData(i);\n      }\n\n    } else if (\n        ortTensor.rawDataArray() && typeof ortTensor.rawDataLength() === 'number' && ortTensor.rawDataLength() > 0) {\n      // NOT considering segment for now (IMPORTANT)\n\n      // populate value from rawData\n      const dataDest = value.data;\n      const dataSource = new DataView(\n          ortTensor.rawDataArray()!.buffer, ortTensor.rawDataArray()!.byteOffset, ortTensor.rawDataLength());\n      const elementSize = sizeofProto(ortTensor.dataType());\n      const length = ortTensor.rawDataLength() / elementSize;\n\n      if (ortTensor.rawDataLength() % elementSize !== 0) {\n        throw new Error('invalid buffer length');\n      }\n      if (dataDest.length !== length) {\n        throw new Error('buffer length mismatch');\n      }\n\n      for (let i = 0; i < length; i++) {\n        const n = readProto(dataSource, ortTensor.dataType(), i * elementSize);\n        dataDest[i] = n;\n      }\n    }\n    return value;\n  }\n}\n\nfunction sizeof(type: Tensor.DataType): number {\n  switch (type) {\n    case 'bool':\n    case 'int8':\n    case 'uint8':\n      return 1;\n    case 'int16':\n    case 'uint16':\n      return 2;\n    case 'int32':\n    case 'uint32':\n    case 'float32':\n      return 4;\n    case 'float64':\n      return 8;\n    default:\n      throw new Error(`cannot calculate sizeof() on type ${type}`);\n  }\n}\n\nfunction sizeofProto(type: onnx.TensorProto.DataType|ortFbs.TensorDataType): number {\n  switch (type) {\n    case onnx.TensorProto.DataType.UINT8:\n    case onnx.TensorProto.DataType.INT8:\n    case onnx.TensorProto.DataType.BOOL:\n      return 1;\n    case onnx.TensorProto.DataType.UINT16:\n    case onnx.TensorProto.DataType.INT16:\n      return 2;\n    case onnx.TensorProto.DataType.FLOAT:\n    case onnx.TensorProto.DataType.INT32:\n    case onnx.TensorProto.DataType.UINT32:\n      return 4;\n    case onnx.TensorProto.DataType.INT64:\n    case onnx.TensorProto.DataType.DOUBLE:\n    case onnx.TensorProto.DataType.UINT64:\n      return 8;\n    default:\n      throw new Error(`cannot calculate sizeof() on type ${onnx.TensorProto.DataType[type]}`);\n  }\n}\n\nfunction createView(dataBuffer: ArrayBuffer, type: Tensor.DataType) {\n  return new (dataviewConstructor(type))(dataBuffer);\n}\n\nfunction dataviewConstructor(type: Tensor.DataType) {\n  switch (type) {\n    case 'bool':\n    case 'uint8':\n      return Uint8Array;\n    case 'int8':\n      return Int8Array;\n    case 'int16':\n      return Int16Array;\n    case 'uint16':\n      return Uint16Array;\n    case 'int32':\n      return Int32Array;\n    case 'uint32':\n      return Uint32Array;\n    case 'int64':\n      return BigInt64Array;\n    case 'float32':\n      return Float32Array;\n    case 'float64':\n      return Float64Array;\n    default:\n      // should never run to here\n      throw new Error('unspecified error');\n  }\n}\n\n// convert a long number to a 32-bit integer (cast-down)\nfunction longToNumber(i: Long, type: onnx.TensorProto.DataType|ortFbs.TensorDataType): number {\n  // INT64, UINT32, UINT64\n  if (type === onnx.TensorProto.DataType.INT64 || type === ortFbs.TensorDataType.INT64) {\n    if (i.greaterThanOrEqual(2147483648) || i.lessThan(-2147483648)) {\n      throw new TypeError('int64 is not supported');\n    }\n  } else if (\n      type === onnx.TensorProto.DataType.UINT32 || type === ortFbs.TensorDataType.UINT32 ||\n      type === onnx.TensorProto.DataType.UINT64 || type === ortFbs.TensorDataType.UINT64) {\n    if (i.greaterThanOrEqual(4294967296) || i.lessThan(0)) {\n      throw new TypeError('uint64 is not supported');\n    }\n  } else {\n    throw new TypeError(`not a LONG type: ${onnx.TensorProto.DataType[type]}`);\n  }\n\n  return i.toNumber();\n}\n\n// read one value from TensorProto\nfunction readProto(view: DataView, type: onnx.TensorProto.DataType|ortFbs.TensorDataType, byteOffset: number): number {\n  switch (type) {\n    case onnx.TensorProto.DataType.BOOL:\n    case onnx.TensorProto.DataType.UINT8:\n      return view.getUint8(byteOffset);\n    case onnx.TensorProto.DataType.INT8:\n      return view.getInt8(byteOffset);\n    case onnx.TensorProto.DataType.UINT16:\n      return view.getUint16(byteOffset, true);\n    case onnx.TensorProto.DataType.INT16:\n      return view.getInt16(byteOffset, true);\n    case onnx.TensorProto.DataType.FLOAT:\n      return view.getFloat32(byteOffset, true);\n    case onnx.TensorProto.DataType.INT32:\n      return view.getInt32(byteOffset, true);\n    case onnx.TensorProto.DataType.UINT32:\n      return view.getUint32(byteOffset, true);\n    case onnx.TensorProto.DataType.INT64:\n      return longToNumber(\n          Long.fromBits(view.getUint32(byteOffset, true), view.getUint32(byteOffset + 4, true), false), type);\n    case onnx.TensorProto.DataType.DOUBLE:\n      return view.getFloat64(byteOffset, true);\n    case onnx.TensorProto.DataType.UINT64:\n      return longToNumber(\n          Long.fromBits(view.getUint32(byteOffset, true), view.getUint32(byteOffset + 4, true), true), type);\n    default:\n      throw new Error(`cannot read from DataView for type ${onnx.TensorProto.DataType[type]}`);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {flatbuffers} from 'flatbuffers';\nimport Long from 'long';\n\nimport {Graph} from './graph';\nimport {onnxruntime} from './ort-schema/flatbuffers/ort-generated';\nimport {onnx} from './ort-schema/protobuf/onnx';\nimport {Tensor} from './tensor';\n\n// check the inputs shape before running an OP.\n// return true when the inputs pass the check\n// return false when the inputs do not fit the requirement\n// throw exception when fatal error or not implemented\nexport function checkInputsShape(inputs: Tensor[], ...expectedDimensions: number[]): boolean {\n  if (!inputs || inputs.length !== expectedDimensions.length) {\n    return false;\n  }\n  for (let i = 0; i < inputs.length; i++) {\n    if (!inputs[i].dims || inputs[i].dims.length !== expectedDimensions[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n// Evaluates the given expression and asserts error message if condition is unmet.\nexport function assert(expr: boolean, msg: () => string) {\n  if (!expr) {\n    throw new Error(typeof msg === 'string' ? msg : msg());\n  }\n}\n\nexport class ArrayUtil {\n  /**\n   * Verifies if 2 input arrays contain the same elements.\n   * @param n1 Array 1\n   * @param n2 Array 2\n   * @returns Whether these 2 are equal\n   */\n  static arraysEqual(\n      n1: readonly number[]|Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Uint8ClampedArray|\n      Float32Array|Float64Array,\n      n2: readonly number[]|Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Uint8ClampedArray|\n      Float32Array|Float64Array) {\n    if (n1.length !== n2.length) {\n      return false;\n    }\n    for (let i = 0; i < n1.length; i++) {\n      if (n1[i] !== n2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n\nexport class MatMulUtil {\n  /**\n   * Fix the input shapes for MatMul operation if they need fixing\n   * @param dimsA The shape of tensor A. Should be an array of positive integers\n   * @param dimsB The shape of tensor B. Should be an array of positive integers\n   * @returns A tuple containing the preprocessed input shapes as required by ONNX specifications\n   */\n  static preprocessInputShapes(dimsA: readonly number[], dimsB: readonly number[]):\n      [readonly number[], readonly number[]] {\n    // If the first argument is 1-D, it is promoted to a matrix by prepending\n    // a 1 to its dimensions. After matrix multiplication the prepended 1 is\n    // removed.\n    const a = (dimsA.length === 1) ? [1, dimsA[0]] : dimsA;\n\n    // If the second argument is 1-D, it is promoted to a matrix by appending\n    // a 1 to its dimensions. After matrix multiplication the appended 1 is\n    // removed.\n    const b = (dimsB.length === 1) ? [dimsB[0], 1] : dimsB;\n\n    return [a, b];\n  }\n\n  /**\n   * Fix the output shape computed for MatMul operation if it needs fixing\n   * @param outputShape The computed outputShape. Should be an array (atleast of length 2) of positive integers.\n   * This will be mutated.\n   * @param aRank The rank of tensor A.\n   * @param bRank The rank of tensor B.\n   */\n  static postprocessOutputShape(outputShape: number[], aRank: number, bRank: number) {\n    // Remove prepended dimension if first input is 1d\n    if (aRank === 1) {\n      // outputShape = outputShape.slice(0, outputShape.length - 2).concat(outputShape.slice(outputShape.length - 1));\n      outputShape.splice(outputShape.length - 2, 1);\n    }\n    // Remove appended dimension if second input is 1d\n    if (bRank === 1) {\n      outputShape.pop();\n    }\n  }\n\n  /**\n   * Calculate the expected shape when matrix multiplication\n   * @param a The shape of tensor A. Should be a tuple of 2 positive integers\n   * @param b The shape of tensor B. Should be a tuple of 2 positive integers\n   * @returns The expected shape of the result, or undefined if N/A\n   */\n  static calcMatMulShape(a: [number, number], b: [number, number]): [number, number]|undefined {\n    return (a[1] !== b[0]) ? undefined : [a[0], b[1]];\n  }\n}\n\nexport class BroadcastUtil {\n  /**\n   * Calculate the expected shape when broadcasting 2 tensors\n   * @param a The shape of tensor A. Should be an array of positive integers\n   * @param b The shape of tensor B. Should be an array of positive integers\n   * @param isMatMul Whether the operation is MatMul\n   * @returns The expected shape of the result, or undefined if N/A\n   */\n  static calcShape(adims: readonly number[], bdims: readonly number[], isMatMul = false): readonly number[]|undefined {\n    const arank = adims.length;\n    const brank = bdims.length;\n    if (arank === 0) {\n      return bdims;\n    }\n    if (brank === 0) {\n      return adims;\n    }\n    const crank = Math.max(adims.length, bdims.length);\n    const cdims = new Array<number>(crank);\n\n    // calculate the last 2 dimension if it is MatMul\n    if (isMatMul) {\n      if (arank < 2 || brank < 2) {\n        return undefined;\n      }\n      const cShapeMatMul =\n          MatMulUtil.calcMatMulShape([adims[arank - 2], adims[arank - 1]], [bdims[brank - 2], bdims[brank - 1]]);\n      if (cShapeMatMul === undefined) {\n        return undefined;\n      }\n      [cdims[crank - 2], cdims[crank - 1]] = cShapeMatMul;\n    }\n\n    for (let i = isMatMul ? 3 : 1; i <= crank; i++) {\n      const aLen = arank - i < 0 ? 1 : adims[arank - i];\n      const bLen = brank - i < 0 ? 1 : bdims[brank - i];\n\n      if (aLen !== bLen && aLen > 1 && bLen > 1) {\n        return undefined;\n      }\n      cdims[crank - i] = Math.max(aLen, bLen);\n    }\n\n    return cdims;\n  }\n\n  /**\n   * Given the indices of a broadcasted tensor, calculate the original indices\n   * @param broadcastedIndices The given indices of the broadcasted tensor.\n   * @param originalShape The original shape of the tensor before broadcas\n   * @returns The calculated indices that maps to the original tensor.\n   */\n  static index(broadcastedIndices: readonly number[], originalShape: readonly number[]): number[] {\n    // NOTE 1: we assume the parameter broadcastedIndices is valid. ie. it should have the same\n    // length as the broadcasted shape, and for each dimension the index should\n    // not be out of range.\n    const originalIndices = new Array(originalShape.length);\n    BroadcastUtil.fillIndex(broadcastedIndices, originalShape, originalIndices);\n    return originalIndices;\n  }\n\n  /**\n   * Given the indices of a broadcasted tensor, calculate the original indices\n   * @param broadcastedIndices The given indices of the broadcasted tensor.\n   * @param originalShape The original shape of the tensor before broadcast\n   * @param originalIndices The mapping of broadcastedIndices to the originalIndices (output parameter - will be\n   *     mutated).\n   */\n  static fillIndex(broadcastedIndices: readonly number[], originalShape: readonly number[], originalIndices: number[]) {\n    // NOTE 1: we assume the parameter broadcastedIndices is valid. ie. it should have the same length as the\n    // broadcasted shape, and for each dimension the index should not be out of range.\n    // NOTE 2: we assume the parameter originalIndices has the same length as the originalShape\n    const dimOffset = broadcastedIndices.length - originalShape.length;\n    for (let i = 0; i < originalShape.length; i++) {\n      originalIndices[i] = broadcastedIndices[dimOffset + i] % originalShape[i];\n    }\n  }\n\n  /**\n   * Perform the broadcasting operation on the specific operator\n   * @param a The input tensor A\n   * @param b The input tensor B\n   * @param op The operator lambda function\n   * @param inplace Whether to write the result back to A.\n   * @returns The result tensor, or undefined if input not broadcastable.\n   */\n  static calc(\n      a: Tensor, b: Tensor, op: (a: string|number, b: string|number) => (string | number), inplace: boolean,\n      resultType?: Tensor.DataType): Tensor|undefined {\n    const outputShape = BroadcastUtil.calcShape(a.dims, b.dims);\n\n    if (outputShape) {\n      if (inplace && !ShapeUtil.areEqual(outputShape, a.dims)) {\n        // B is not broadcastable to A, failed to calculate inplace.\n        return undefined;\n      }\n\n      const size = ShapeUtil.size(outputShape);\n      const c = inplace ? a : new Tensor(outputShape, resultType || a.type);\n\n      // both inputs are scalars\n      if (outputShape.length === 0) {\n        c.set([], op(a.get([]) as number, b.get([]) as number));\n      }\n\n      // atleast one input is a non-scalar\n      else {\n        const outputIndices = new Array<number>(outputShape.length);\n        const originalIndicesA = new Array(a.dims.length);\n        const originalIndicesB = new Array(b.dims.length);\n        let valA: string|number = 0;\n        let valB: string|number = 0;\n        let isAScalar = false;\n        let isBScalar = false;\n        if (a.dims.length === 0) {\n          valA = a.get([]) as number;\n          isAScalar = true;\n        }\n        if (b.dims.length === 0) {\n          valB = b.get([]) as number;\n          isBScalar = true;\n        }\n        let rest: number;\n        for (let i = 0; i < size; i++) {\n          // traversal indices\n          rest = i;\n          for (let j = outputShape.length - 1; j >= 0; j--) {\n            outputIndices[j] = rest % outputShape[j];\n            rest = Math.floor(rest / outputShape[j]);\n          }\n\n          if (!isAScalar) {\n            // map outputIndices (which is actually broadcasted) to the originalIndices\n            BroadcastUtil.fillIndex(outputIndices, a.dims, originalIndicesA);\n            valA = a.get(originalIndicesA) as number;\n          }\n          if (!isBScalar) {\n            BroadcastUtil.fillIndex(outputIndices, b.dims, originalIndicesB);\n            valB = b.get(originalIndicesB) as number;\n          }\n\n          c.set(outputIndices, op(valA, valB));\n        }\n      }\n\n      return c;\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Determine if a shape is unidirectional broadcastable to another shape\n   * @param shape The input shape\n   * @param finalShape The desired shape after broadcasting\n   */\n  static isValidBroadcast(shape: readonly number[], finalShape: readonly number[]): boolean {\n    // align shape to the right\n    const inputRank = shape.length;\n    const finalRank = finalShape.length;\n    if (inputRank > finalRank) {\n      return false;\n    }\n    for (let i = 1; i <= inputRank; i++) {\n      if (shape[inputRank - i] !== 1 && shape[inputRank - i] !== finalShape[finalRank - i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Determine the broadcasted dims in input shape based on the given output shape.\n   * Note that this function only returns the broadcasted dims.\n   * @param inputShape The input shape\n   * @param outputShape The output shape\n   * @returns The broadcasted dims in input shape.\n   */\n  static getBroadcastDims(inputShape: readonly number[], outputShape: readonly number[]): number[] {\n    const inRank = inputShape.length;\n    const dims: number[] = [];\n    for (let i = 0; i < inRank; i++) {\n      const dim = inRank - 1 - i;\n      const a = inputShape[dim] || 1;\n      const b = outputShape[outputShape.length - 1 - i] || 1;\n      if (b > 1 && a === 1) {\n        dims.unshift(dim);\n      }\n    }\n    return dims;\n  }\n}\n\n// copy array helper\n// mimics memcpy as much as possible\nexport function arrayCopyHelper(\n    target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n    blockSize: number) {\n  if (sourceIndex < 0 || sourceIndex >= source.length) {\n    throw new Error('sourceIndex out of bounds');\n  }\n  if (targetIndex < 0 || targetIndex >= target.length) {\n    throw new Error('targetIndex out of bounds');\n  }\n  if (sourceIndex + blockSize > source.length) {\n    throw new Error('source indices to be copied are outside bounds');\n  }\n  if (targetIndex + blockSize > target.length) {\n    throw new Error('target array is too small to hold result');\n  }\n\n  for (let offset = 0; offset < blockSize; offset++) {\n    target[targetIndex + offset] = source[sourceIndex + offset];\n  }\n}\n\nexport class GemmUtil {\n  // will make sure input shapes are compatible for this op\n  // and return back the shape of the output in the form of a tuple\n  // will throw exception if the input shapes are not compatible\n  static getShapeOfGemmResult(\n      leftShape: readonly number[], transLeft: boolean, rightShape: readonly number[], transRight: boolean,\n      biasShape?: readonly number[]): readonly number[] {\n    if (leftShape.length !== 2 || rightShape.length !== 2) {\n      throw new Error('shape need to be of size 2');\n    }\n\n    let M: number;\n    let K: number;\n    let N: number;\n\n    if (transLeft) {\n      M = leftShape[1];\n      K = leftShape[0];\n    } else {\n      M = leftShape[0];\n      K = leftShape[1];\n    }\n\n    let kDim = -1;\n\n    if (transRight) {\n      N = rightShape[0];\n      kDim = 1;\n    } else {\n      N = rightShape[1];\n      kDim = 0;\n    }\n\n    if (rightShape[kDim] !== K) {\n      throw new Error('dimension mismatch');\n    }\n\n    if (M <= 0 || N <= 0 || K <= 0) {\n      throw new Error('invalid shape specified');\n    }\n\n    if (biasShape && !BroadcastUtil.isValidBroadcast(biasShape, [M, N])) {\n      throw new Error('gemm: invalid bias shape for broadcast');\n    }\n\n    return [M, N, K];\n  }\n}\n\nexport class ProtoUtil {\n  static tensorDataTypeFromProto(typeProto: onnx.TensorProto.DataType|\n                                 onnxruntime.experimental.fbs.TensorDataType): Tensor.DataType {\n    switch (typeProto) {\n      case onnx.TensorProto.DataType.INT8:\n        return 'int8';\n      case onnx.TensorProto.DataType.UINT8:\n        return 'uint8';\n      case onnx.TensorProto.DataType.BOOL:\n        return 'bool';\n      case onnx.TensorProto.DataType.INT16:\n        return 'int16';\n      case onnx.TensorProto.DataType.UINT16:\n        return 'uint16';\n      case onnx.TensorProto.DataType.INT32:\n        return 'int32';\n      case onnx.TensorProto.DataType.UINT32:\n        return 'uint32';\n      case onnx.TensorProto.DataType.FLOAT:\n        return 'float32';\n      case onnx.TensorProto.DataType.DOUBLE:\n        return 'float64';\n      case onnx.TensorProto.DataType.STRING:\n        return 'string';\n\n      // For INT64/UINT64, reduce their value to 32-bits.\n      // Should throw exception when overflow\n      case onnx.TensorProto.DataType.INT64:\n        return 'int32';\n      case onnx.TensorProto.DataType.UINT64:\n        return 'uint32';\n\n      default:\n        throw new Error(`unsupported data type: ${onnx.TensorProto.DataType[typeProto]}`);\n    }\n  }\n\n  static tensorDataTypeStringToEnum(type: string): onnx.TensorProto.DataType {\n    switch (type) {\n      case 'int8':\n        return onnx.TensorProto.DataType.INT8;\n      case 'uint8':\n        return onnx.TensorProto.DataType.UINT8;\n      case 'bool':\n        return onnx.TensorProto.DataType.BOOL;\n      case 'int16':\n        return onnx.TensorProto.DataType.INT16;\n      case 'uint16':\n        return onnx.TensorProto.DataType.UINT16;\n      case 'int32':\n        return onnx.TensorProto.DataType.INT32;\n      case 'uint32':\n        return onnx.TensorProto.DataType.UINT32;\n      case 'float32':\n        return onnx.TensorProto.DataType.FLOAT;\n      case 'float64':\n        return onnx.TensorProto.DataType.DOUBLE;\n      case 'string':\n        return onnx.TensorProto.DataType.STRING;\n      case 'int64':\n        return onnx.TensorProto.DataType.INT64;\n      case 'uint64':\n        return onnx.TensorProto.DataType.UINT64;\n\n      default:\n        throw new Error(`unsupported data type: ${type}`);\n    }\n  }\n\n  static tensorDimsFromProto(dims: Array<number|Long>): number[] {\n    // get rid of Long type for dims\n    return dims.map(d => Long.isLong(d) ? d.toNumber() : d);\n  }\n\n  static tensorValueTypeFromProto(valueType: onnx.TypeProto.ITensor): Graph.ValueType {\n    return {\n      tensorType: ProtoUtil.tensorDataTypeFromProto(valueType.elemType!),\n      shape: {dims: ProtoUtil.tensorDimsFromProto(valueType.shape!.dim!.map(d => d.dimValue!))}\n    };\n  }\n\n  static tensorDimsFromORTFormat(tensor: onnxruntime.experimental.fbs.Tensor) {\n    const dims = [];\n    for (let i = 0; i < tensor.dimsLength(); i++) {\n      dims.push(LongUtil.longToNumber(tensor.dims(i)!));\n    }\n    return dims;\n  }\n\n  static tensorAttributesFromORTFormat(node: onnxruntime.experimental.fbs.Node) {\n    const attributes = [];\n    for (let i = 0; i < node.attributesLength(); i++) {\n      attributes.push(node.attributes(i)!);\n    }\n    return attributes;\n  }\n}\n\nexport class LongUtil {\n  // This function is called to get a number from long type of data for attribute, dim, and ir version,\n  // which values are signed integers.\n  // To make it more generic, add an optional paramter to convert to a unsigned number.\n  static longToNumber(n: Long|flatbuffers.Long|number, unsigned?: boolean) {\n    if (Long.isLong(n)) {\n      return n.toNumber();\n    } else if (n instanceof flatbuffers.Long) {\n      return Long.fromValue({low: n.low, high: n.high, unsigned: unsigned ?? false}).toNumber();\n    }\n    return n;\n  }\n  static isLong(n: unknown) {\n    return Long.isLong(n) || n instanceof flatbuffers.Long;\n  }\n}\n\nexport class ShapeUtil {\n  static size(dims: readonly number[]): number {\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, dims.length);\n  }\n\n  // `axis` inclusive\n  static sizeFromDimension(dims: readonly number[], axis: number): number {\n    if (axis < 0 || axis > dims.length) {\n      throw new Error(`invalid dimension of ${axis} for sizeFromDimension as Tensor has ${dims.length} dimensions.`);\n    }\n    return ShapeUtil.getSizeFromDimensionRange(dims, axis, dims.length);\n  }\n\n  // `axis` exclusive\n  static sizeToDimension(dims: readonly number[], axis: number): number {\n    if (axis < 0 || axis > dims.length) {\n      throw new Error(`invalid dimension of ${axis} for sizeToDimension as Tensor has ${dims.length} dimensions.`);\n    }\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, axis);\n  }\n\n  static getSizeFromDimensionRange(dims: readonly number[], start: number, end: number): number {\n    let size = 1;\n    for (let i = start; i < end; i++) {\n      // safety check as this method is called by multiple other methods requiring size.\n      // size cannot be 0 or negative.\n      if (dims[i] <= 0) {\n        throw new Error(\n            // eslint-disable-next-line max-len\n            'cannot get valid size from specified dimension range. Most likely the range contains 0 or negative values in them.');\n      }\n      size *= dims[i];\n    }\n    return size;\n  }\n\n  static computeStrides(dims: readonly number[]): readonly number[] {\n    const rank = dims.length;\n    if (rank === 0) {\n      return [];\n    } else if (rank === 1) {\n      return [1];\n    }\n    const strides = new Array(rank);\n    strides[rank - 1] = 1;\n    strides[rank - 2] = dims[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * dims[i + 1];\n    }\n    return strides;\n  }\n\n  static transpose(dims: readonly number[]): readonly number[] {\n    const copy = dims.slice();\n    return copy.reverse();\n  }\n\n  static indicesToOffset(indices: readonly number[], strides: readonly number[], axis?: number): number {\n    if (axis === undefined) {\n      axis = indices.length;\n    }\n    let offset = 0;\n    for (let i = 0; i < axis; ++i) {\n      offset += strides[i] * indices[i];\n    }\n    return offset;\n  }\n\n  static offsetToIndices(offset: number, strides: readonly number[]): readonly number[] {\n    const rank = strides.length;\n    if (rank === 0) {\n      return [];\n    } else if (rank === 1) {\n      return [offset * strides[0]];\n    }\n    const indices: number[] = new Array(strides.length);\n    for (let i = 0; i < indices.length - 1; ++i) {\n      indices[i] = Math.floor(offset / strides[i]);\n      offset -= indices[i] * strides[i];\n    }\n    indices[indices.length - 1] = offset;\n    return indices;\n  }\n\n  /**\n   * normailze axis of range [-r, r) into [0, r).\n   */\n  static normalizeAxis(axis: number, tensorRank: number): number {\n    if (axis < -tensorRank && axis >= tensorRank) {\n      throw new Error('unsupported axis for this operation.');\n    }\n    return axis < 0 ? axis + tensorRank : axis;\n  }\n\n  static normalizeAxes(axes: readonly number[], tensorRank: number): number[] {\n    return axes.map(x => this.normalizeAxis(x, tensorRank));\n  }\n\n  // Increment an index into a tensor (in lexicographic\n  // ordering), wrapping around the specified upper_bound.\n  /**\n   * Increment an index into a tensor (in lexicographic ordering), wrapping around the specified upper_bound.\n   * @param index Given index to increment (Will be mutated)\n   * @param dims The dimensions of the tensor for which the given index corresponds to\n   * @param axisToIncrementOn The 1-indexed axis to increment on. If undefined, axisToIncrementOn == rank\n   */\n  static incrementIndex(index: number[], dims: readonly number[], axisToIncrementOn?: number) {\n    if (dims.length === 0 || index.length === 0) {\n      throw new Error('Index incrementing unsupported for scalar Tensor');\n    }\n    if (axisToIncrementOn === undefined) {\n      axisToIncrementOn = dims.length;\n    } else {\n      if (axisToIncrementOn <= 0 || axisToIncrementOn > dims.length) {\n        throw new Error('Incorrect axis to increment on');\n      }\n    }\n\n    for (let k = axisToIncrementOn - 1; k >= 0; --k) {\n      index[k]++;\n      if (index[k] < dims[k]) {\n        break;\n      }\n      index[k] = 0;\n    }\n  }\n\n  /**\n   * Produces a new dimensions array based on the values in the 'originalDimensions' and 'shape' array\n   * Used in Reshape\n   * @param originalDims Original Shape array\n   * @param shapeHints array containing values to compute the new dimensions\n   * For example:\n   * originalDims = [2,2] and shapeHints = [0,-1] will return [2,2]\n   * originalDims = [2,2] and shapeHints = [4] will return [4]\n   * originalDims = [2,2] and shapeHints = [5] will throw an exception\n   * https://github.com/onnx/onnx/blob/main/docs/Operators.md#Reshape\n   */\n\n  static calculateReshapedDims(originalDims: readonly number[], shapeHints: ArrayLike<number>): number[] {\n    // reshape to a Scalar Tensor\n    if (shapeHints.length === 0) {\n      if (originalDims.length === 0 || ShapeUtil.size(originalDims) === 1) {\n        return [];\n      } else {\n        throw new Error('cannot reshape to a scalar Tensor');\n      }\n    }\n\n    const nDims = shapeHints.length;\n    const reshapedDims = new Array<number>(nDims);\n    let unknownDimension = -1;\n    let newTensorSize = 1;\n    for (let i = 0; i < nDims; i++) {\n      if (shapeHints[i] < -1) {\n        throw new Error('a dimension in shape hints cannot be less than -1');\n      }\n      if (shapeHints[i] === -1) {\n        if (unknownDimension !== -1) {\n          throw new Error('at most one dimension in shape hints can be -1');\n        }\n        unknownDimension = i;\n      } else {\n        if (shapeHints[i] === 0) {\n          if (i >= originalDims.length) {\n            throw new Error('the dimension with value zero exceeds the dimension size of the input tensor');\n          }\n          reshapedDims[i] = originalDims[i];\n        } else {\n          reshapedDims[i] = shapeHints[i];\n        }\n        newTensorSize *= reshapedDims[i];\n      }\n    }\n\n    const oldTensorSize = ShapeUtil.size(originalDims);\n    if (unknownDimension !== -1) {\n      if (oldTensorSize % newTensorSize !== 0) {\n        throw new Error(`the input tensor cannot be reshaped to the requested shape. Input shape: [${\n            originalDims}] Output shape: [${shapeHints}]`);\n      }\n      reshapedDims[unknownDimension] = oldTensorSize / newTensorSize;\n    }\n    // validate sizes from originalDims and reshapedDims match\n    else {\n      if (newTensorSize !== oldTensorSize) {\n        throw new Error('reshapedDims and originalDims don\\'t have matching sizes');\n      }\n    }\n    return reshapedDims;\n  }\n\n  /**\n   * Sorts a given array based on the indices in the Perm array\n   * Used in Transpose\n   * @param a Array to be sorted such as dims or strides\n   * @param perm Perm given; if null a will be reversed\n   */\n  static sortBasedOnPerm(a: readonly number[], perm?: readonly number[]): readonly number[] {\n    if (perm) {\n      return perm.map((v) => a[v]);\n    } else {\n      return a.slice().reverse();\n    }\n  }\n\n  /**\n   * Pads a given shape according to the padding values\n   * @param dims shape of the Tensor to be padded\n   * @param pad pad values\n   */\n  static padShape(dims: readonly number[], pad: readonly number[]): readonly number[] {\n    const rank = dims.length;\n    return dims.map((v, i) => v + pad[i] + pad[i + rank]);\n  }\n\n  /**\n   * Determines if the two shapes are identical\n   * @param shape1\n   * @param shape2\n   */\n  static areEqual(shape1: readonly number[], shape2: readonly number[]): boolean {\n    if (shape1.length !== shape2.length) {\n      return false;\n    }\n    return shape1.every((v, i) => v === shape2[i]);\n  }\n\n  /**\n   * Validates if the given `dims` or `shape` is valid in ONNX.js context and returns data size\n   * @param dims - input `dims` that needs to be checked\n   */\n  static validateDimsAndCalcSize(dims: readonly number[]): number {\n    if (dims.length > 6) {\n      throw new TypeError('Only rank 0 to 6 is supported for tensor shape.');\n    }\n    let size = 1;\n    for (const n of dims) {\n      if (!Number.isInteger(n)) {\n        throw new TypeError(`Invalid shape: ${n} is not an integer`);\n      }\n      if (n < 0 || n > 2147483647) {\n        throw new TypeError(`Invalid shape: length ${n} is not allowed`);\n      }\n      size *= n;\n    }\n    return size;\n  }\n\n  /**\n   * Determines the shape of output tensor y = flatten(x, axis)\n   * @param dims - shape of input tensor\n   * @param axis - flatten axis, in the range [-r, r]\n   */\n  static flattenShape(dims: readonly number[], axis: number): readonly number[] {\n    if (axis < 0) {\n      axis += dims.length;\n    }\n    const total = dims.reduce((x, y) => x * y, 1);\n    const right = dims.slice(axis).reduce((x, y) => x * y, 1);\n    const outputDims = [total / right, right];\n\n    return outputDims;\n  }\n\n  /**\n   * Determines the shape of output tensor y = squeeze(x, axes)\n   * @param dims - shape of input tensor\n   * @param axes - squeeze axes\n   */\n  static squeezeShape(dims: readonly number[], axes: readonly number[]): readonly number[] {\n    const outputDims = new Array<number>();\n\n    // sanity check\n    axes = ShapeUtil.normalizeAxes(axes, dims.length);\n\n    for (let i = 0; i < dims.length; i++) {\n      const inSqueezeList = axes.indexOf(i) >= 0;\n      if (inSqueezeList && dims[i] !== 1) {\n        throw new Error('squeeze an axis of size different than 1');\n      }\n\n      if ((axes.length === 0 && dims[i] > 1) || (axes.length > 0 && !inSqueezeList)) {\n        outputDims.push(dims[i]);\n      }\n    }\n\n    return outputDims;\n  }\n\n  /**\n   * Determines the shape of output tensor y = unsqueeze(x, axes)\n   * @param dims - shape of input tensor\n   * @param axes - unsqueeze axes\n   */\n  static unsqueezeShape(dims: readonly number[], axes: readonly number[]): readonly number[] {\n    const outputDims = new Array<number>(dims.length + axes.length);\n\n    // initialize the array elements to 0\n    outputDims.fill(0);\n\n    // set all axes indices to 1 in outputDims and check for duplicates\n    for (let i = 0; i < axes.length; i++) {\n      const axis = ShapeUtil.normalizeAxis(axes[i], outputDims.length);\n      if (axis >= outputDims.length) {\n        throw new Error('\\'axes\\' has an out of range axis');\n      }\n      if (outputDims[axis] !== 0) {\n        throw new Error('\\'axes\\' has a duplicate axis');\n      }\n\n      outputDims[axis] = 1;\n    }\n\n    // fill in the zero entries of outputDims with the input tensor's shape\n    let inputDimsIterator = 0;\n    for (let i = 0; i < outputDims.length; i++) {\n      if (outputDims[i] === 0) {\n        outputDims[i] = dims[inputDimsIterator++];\n      }\n    }\n\n    // sanity check assertion. 'inputDimsIterator'\n    // should be equal to the length of 'dims'\n    if (inputDimsIterator !== dims.length) {\n      throw new Error('the unsqueezed dimension could not be established');\n    }\n\n    return outputDims;\n  }\n}\n\n// bunch of helper methods that do a variety of math operations\nexport class MathUtil {\n  // y = (x*x) + y\n  static sqr(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] += Math.pow(source[sourceIndex + offset], 2);\n    }\n  }\n\n  // y = ax + y\n  static axpy(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number, alpha: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] += (alpha * source[sourceIndex + offset]);\n    }\n  }\n\n  // y = pow(x, b)\n  static powx(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number, b: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] = Math.pow(source[sourceIndex + offset], b);\n    }\n  }\n\n  // y = x * y\n  static mul(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] = (source[sourceIndex + offset] * target[targetIndex + offset]);\n    }\n  }\n}\n\nexport class SplitUtil {\n  /**\n   * Calculates new Shapes from existing one and the splits given along the axis provides\n   * @param dims Shape of the Tensor to be splitted into two or more Shapes\n   * @param axis The dimension along which the Tensor will be split\n   * @param splits Offsets for the start of each split\n   */\n  static splitShape(dims: readonly number[], axis: number, split: number[], numOutputs?: number):\n      [number[][], number[]] {\n    if (split.length === 0) {\n      if (!numOutputs) {\n        throw new Error('need to know number of outputs when the \\'split\\' attribute is not specified');\n      }\n      SplitUtil.determineSplit(dims[axis], numOutputs, split);\n    }\n\n    const shapes: number[][] = [];\n    const offsets = [0];\n    for (let i = 0; i < split.length; ++i) {\n      if (i !== 0) {\n        offsets.push(offsets[i - 1] + split[i - 1]);\n      }\n      const shape = dims.slice();\n      shape[axis] = split[i];\n      shapes.push(shape);\n    }\n    return [shapes, offsets];\n  }\n\n  static determineSplit(numElementsAlongAxis: number, numOutputs: number, split: number[]) {\n    // If 'split' is not specified by the user, we need to partition the number of elements equally among the outputs\n    if (numElementsAlongAxis % numOutputs !== 0) {\n      throw new Error('cannot split tensor to equal sized parts');\n    }\n    for (let i = 0; i < numOutputs; ++i) {\n      split.push(numElementsAlongAxis / numOutputs);\n    }\n  }\n}\n\nexport class ReduceUtil {\n  /**\n   * Perform reduce operations on the specific operator\n   * @param a Input tensor data\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param keepdims If set to true, the axes which are reduced are left in the\n   *    result as dimensions with size one.\n   * @param op1 The operation to be performed on each element in the tensor\n   * @param op2 The operation to be performed between elements in the tensor\n   */\n  static calcReduce(\n      a: Tensor, axes: number[], keepdims: boolean, op1: (b: number) => number,\n      op2: (a: number, b: number) => number): Tensor {\n    const dims = a.dims.slice(0);\n    // if axes is not set, perform reduce on all axes\n    if (axes.length === 0) {\n      dims.forEach((d, ind) => axes.push(ind));\n    }\n    // get a temporary broadcastable output shape\n    const outputDims = ReduceUtil.calcReduceShape(dims, axes, true);\n\n    // loop through the output and calculate result one by one\n    const size = ShapeUtil.size(outputDims);\n    const y = new Tensor(outputDims, a.type);\n    const strides = ShapeUtil.computeStrides(outputDims);\n    const inputStrides = ShapeUtil.computeStrides(dims);\n    const indicesY = new Array(dims.length);\n    for (let i = 0; i < size; i++) {\n      const indices = ShapeUtil.offsetToIndices(i, strides);\n      // map index\n      BroadcastUtil.fillIndex(indices, dims, indicesY);\n      y.set(\n          indices,\n          ReduceUtil.calcReduceByAxis(\n              a.numberData, axes, dims, 0, ShapeUtil.indicesToOffset(indicesY, inputStrides), op1, op2));\n    }\n\n    if (keepdims) {\n      return y;\n    } else {\n      // keepdims == 0, calculate the expected shape\n      return new Tensor(\n          ReduceUtil.calcReduceShape(dims, axes, keepdims), y.type, undefined, undefined, y.data, y.dataId);\n    }\n  }\n\n  /**\n   * Perform reduce operations on the specific operator on specific axes\n   * @param a Input tensor data\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param dims The input dimension.\n   * @param curAxisInd Index in axes specifying the current dimension along\n   *      which the tensor will be reduced\n   * @param pos The current index of element to perform operation\n   * @param op1 The operation to be performed on each element in the tensor\n   * @param op2 The operation to be performed between elements in the tensor\n   */\n  static calcReduceByAxis(\n      input: Tensor.NumberType, axes: number[], dims: number[], curAxisInd: number, pos: number,\n      op1: (b: number) => number, op2: (a: number, b: number) => number): number {\n    let res = 0;\n    if (curAxisInd >= axes.length) {\n      return op1(input[pos]);\n    }\n    const axis = axes[curAxisInd];\n    const step = axis >= dims.length ? 1 : ShapeUtil.size(dims.slice(axis + 1));\n    for (let i = 0; i < dims[axis]; i++) {\n      res = i === 0 ? ReduceUtil.calcReduceByAxis(input, axes, dims, curAxisInd + 1, pos, op1, op2) :\n                      op2(res, ReduceUtil.calcReduceByAxis(input, axes, dims, curAxisInd + 1, pos, op1, op2));\n      pos += step;\n    }\n    return res;\n  }\n\n  /**\n   * Calculate the expected shape of a reduce operation\n   * @param dims The input tensor dimension\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param keepdims If set to true, the axes which are reduced are left in the\n   *    result as dimensions with size one.\n   */\n  static calcReduceShape(dims: readonly number[], axes: readonly number[], keepDims: boolean): number[] {\n    const outputDims = dims.slice();\n    for (let i = 0; i < axes.length; i++) {\n      if (keepDims) {\n        outputDims[axes[i]] = 1;\n      } else {\n        outputDims[axes[i]] = 0;\n      }\n    }\n    return outputDims.filter(dim => dim !== 0);\n  }\n}\n\nexport class PoolConvUtil {\n  /**\n   * Adjust the kernel, strides, pads to correct rank. Set to default value if not present\n   * @param isGlobalOperator If true, perform global pooling.\n   * @param inputDims The input tensor dimension.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param strides Stride along each axis.\n   * @param dilations Dilation along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   */\n  static adjustPoolAttributes(\n      isGlobalOperator: boolean, inputDims: readonly number[], kernelShape: number[], strides: number[],\n      dilations: number[], pads: number[]) {\n    if (!isGlobalOperator && kernelShape.length !== inputDims.length - 2) {\n      throw new Error('length of specified kernel shapes should be 2 less than length of input dimensions');\n    }\n\n    if (isGlobalOperator) {\n      // adjust kernel shape to cover the input dims\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        if (dim >= kernelShape.length) {\n          kernelShape.push(inputDims[dim + 2]);\n        } else {\n          kernelShape[dim] = inputDims[dim + 2];\n        }\n      }\n    }\n\n    // adjust strides length to match kernel shape length\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (dim < strides.length) {\n        if (strides[dim] < 0) {\n          throw new Error('strides should be greater than or equal to 1');\n        }\n      } else {\n        strides.push(1);\n      }\n    }\n\n    // adjust dilation value\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (dim < dilations.length) {\n        if (dilations[dim] < 0) {\n          throw new Error('dilations should be greater than or equal to 1');\n        }\n      } else {\n        dilations.push(1);\n      }\n    }\n\n    // adjust pads length to match 2 * kernel shape length\n    for (let dim = 0; dim < kernelShape.length * 2; dim++) {\n      if (dim < pads.length) {\n        if (pads[dim] < 0) {\n          throw new Error('pad should be greater than or equal to 1');\n        }\n      } else {\n        pads.push(0);\n      }\n    }\n\n    // sanity checks for values in kernel shapes and pads\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (kernelShape[dim] <= 0) {\n        throw new Error('kernel shapes need to be greater than 0');\n      }\n\n      if (pads[dim] >= kernelShape[dim] || pads[dim + kernelShape.length] >= kernelShape[dim]) {\n        throw new Error('pads should be smaller than kernel');\n      }\n    }\n  }\n\n  // adjust pad values based on 'autoPad' attribute\n  static adjustPadsBasedOnAutoPad(\n      inputDims: readonly number[], strides: readonly number[], dilations: readonly number[],\n      kernelShape: readonly number[], pads: number[], autoPad?: string) {\n    if (!autoPad) {\n      return;\n    }\n\n    if (pads.length !== 2 * (inputDims.length - 2)) {\n      throw new Error('length of pads should be twice the length of data dimensions');\n    }\n\n    if (strides.length !== (inputDims.length - 2)) {\n      throw new Error('length of strides should be the length of data dimensions');\n    }\n\n    if (kernelShape.length !== (inputDims.length - 2)) {\n      throw new Error('length of kernel shapes should be the length of data dimensions');\n    }\n\n    for (let dim = 0; dim < inputDims.length - 2; dim++) {\n      PoolConvUtil.adjustPadAndReturnShape(\n          inputDims[dim + 2], strides[dim], dilations[dim], kernelShape[dim], pads, dim, dim + inputDims.length - 2,\n          autoPad);\n    }\n  }\n\n  /**\n   * Calculate the output shape for Pool ops based on input attributes. (Should be used only for Pool ops)\n   * @param isGlobalOperator If true, perform global pooling.\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\n   * @param strides Stride along each axis.\n   * @param dilations Dilation along each axis.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\n   */\n  static computePoolOutputShape(\n      isGlobalOperator: boolean, inputDims: readonly number[], strides: number[], dilations: number[],\n      kernelShape: number[], pads: number[], autoPad?: string): number[] {\n    if (inputDims.length <= 0) {\n      throw new Error('input shape must be of size greater than 0');\n    }\n\n    // Add batch size and number of channels of output\n    const outputDims = [inputDims[0], inputDims[1]];\n\n    PoolConvUtil.computeShapeHelper(\n        isGlobalOperator, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\n    return outputDims;\n  }\n\n  /**\n   * Calculate the output shape for Conv op based on input attributes. (Should be used only for Conv op)\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\n   * @param filterDims The filter tensor dimension. (inputs[1].dims)\n   * @param strides Stride along each axis.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\n   */\n  static computeConvOutputShape(\n      inputDims: readonly number[], filterDims: readonly number[], strides: number[], dilations: number[],\n      kernelShape: number[], pads: number[], autoPad?: string): number[] {\n    if (inputDims.length <= 0 || filterDims.length <= 0) {\n      throw new Error('invalid input tensor dims or invalid filter tensor dims');\n    }\n\n    // Add batch size and number of channels of output\n    const outputDims = [inputDims[0], filterDims[0]];\n\n    PoolConvUtil.computeShapeHelper(false, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\n    return outputDims;\n  }\n\n  // will compute output shapes for data dimensions ONLY (i.e.) no batch size and channels\n  // called by computePoolOutputShape() and computeConvOutputShape()\n  // adjust pads based on 'autoPad' attribute prior to shape computation\n  private static computeShapeHelper(\n      isGlobalOperator: boolean, inputDims: readonly number[], outputDims: number[], strides: readonly number[],\n      dilations: readonly number[], kernelShape: readonly number[], pads: number[], autoPad?: string) {\n    if (isGlobalOperator) {\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        outputDims.push(1);\n      }\n    } else {\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        outputDims.push(PoolConvUtil.adjustPadAndReturnShape(\n            inputDims[dim + 2], strides[dim], dilations[dim], kernelShape[dim], pads, dim, dim + inputDims.length - 2,\n            autoPad));\n      }\n    }\n  }\n\n  // helper for computeShapeHelper() and adjustPadsBasedOnAutoPad()\n  // adjusts pad value for given 'autoPad' string and computes output shape along a particular dimension\n  private static adjustPadAndReturnShape(\n      inSize: number, stride: number, dilation: number, kernel: number, pads: number[], padHeadIndex: number,\n      padTailIndex: number, autoPad?: string): number {\n    const dkernel = dilation * (kernel - 1) + 1;\n    if (autoPad && autoPad !== 'NOTSET') {\n      switch (autoPad) {\n        case 'VALID':\n          pads[padHeadIndex] = 0;\n          pads[padTailIndex] = 0;\n          return Math.floor(((inSize - dkernel) / stride) + 1);\n        case 'SAME_LOWER':\n        case 'SAME_UPPER':\n          if (dilation !== 1) {\n            throw new Error('Dilation not supported for SAME_UPPER or SAME_LOWER');\n          } else {\n            const legacyTargetSize = (inSize + stride - 1) / stride;\n            const padNeeded = (legacyTargetSize - 1) * stride + kernel - inSize;\n            pads[padHeadIndex] =\n                (autoPad === 'SAME_LOWER') ? Math.floor((padNeeded + 1) / 2) : Math.floor(padNeeded / 2);\n            pads[padTailIndex] = padNeeded - pads[padHeadIndex];\n            return Math.floor(((inSize + padNeeded - kernel) / stride) + 1);\n          }\n        default:\n          throw new Error('Unsupported AutoPad type');\n      }\n    } else {\n      return Math.floor(((inSize + pads[padHeadIndex] + pads[padTailIndex] - dkernel) / stride) + 1);\n    }\n  }\n}\n\nexport const MIN_CLIP = -3.4028234663852886e+38;\nexport const MAX_CLIP = 3.4028234663852886e+38;\n\nexport function decodeUtf8String(buffer: Uint8Array): string {\n  return new TextDecoder().decode(buffer);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n// This file is generated by /js/scripts/update-version.ts\n// Do not modify file content manually.\n\nexport const version = '1.17.0';\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Env, Tensor} from 'onnxruntime-common';\n\nimport {configureLogger, LOG_DEBUG} from './log';\nimport {createView, TensorView} from './tensor-view';\nimport {createGpuDataManager, downloadGpuData, GpuDataManager} from './webgpu/gpu-data-manager';\nimport {RunFunction, WEBGPU_OP_RESOLVE_RULES} from './webgpu/op-resolve-rules';\nimport {ProgramManager} from './webgpu/program-manager';\nimport {ComputeContext, GpuData, ProgramInfo, ProgramInfoLoader} from './webgpu/types';\n\n/**\n * get a unique key representing the program from the program info, input shapes and types.\n *\n * @returns a unique key is a shorter string than the shader source, which contains all the information to identify a\n * program. if the key is the same, the program shader source should be the same, so we can reuse the program.\n *\n */\nconst getProgramInfoUniqueKey =\n    (programInfo: ProgramInfo|ProgramInfoLoader, inputTensors: readonly TensorView[]): string => {\n      // final key format:\n      // <PROGRAM_NAME>[<PROGRAM_CUSTOM_CACHE_HINT>]:<INPUTS_INFO_0>|<INPUTS_INFO_1>|...\n      const inputInfos = inputTensors.map(tensor => `${tensor.dataType};${tensor.dims.join(',')}`).join('|');\n      let key = programInfo.name;\n      if (programInfo.cacheHint) {\n        key += '[' + programInfo.cacheHint + ']';\n      }\n      key += ':' + inputInfos;\n      return key;\n    };\n\n/**\n * this class is designed to store status and being used as a singleton for JSEP. It will be passed to jsepInit() as\n * the first parameter so that it is stored for future use.\n */\nexport class WebGpuBackend {\n  device: GPUDevice;\n  /**\n   * an instance of GpuDataManager to manage a GpuDataId -> GpuBuffer mapping\n   */\n  gpuDataManager: GpuDataManager;\n  /**\n   * an instance of ProgramManager to build and run WebGPU compute shader program, and manage a ProgramKey -> Program\n   * artifacts mapping\n   */\n  programManager: ProgramManager;\n\n  /**\n   * representing the kernel ID of which is currently being computed (CPU code perspective).\n   * `null` means no kernel is being computed.\n   * only one kernel can be computed at a moment.\n   */\n  currentKernelId: number|null = null;\n  /**\n   * a list of temporary GPU data for the current kernel. should release when the kernel done computation.\n   */\n  private temporaryData: GpuData[];\n  /**\n   * a KernelID -> a GPU data list, which stores persistent GPU data owned by the specific kernel.\n   */\n  private kernelPersistentData: Map<number, GpuData[]>;\n  /**\n   * a KernelID -> a custom data, which stores custom data owned by the specific kernel.\n   */\n  private kernelCustomData: Map<number, {[key: string]: unknown}>;\n  /**\n   * get the custom data of the current kernel\n   */\n  get currentKernelCustomData(): {[key: string]: unknown} {\n    if (this.currentKernelId === null) {\n      throw new Error('currentKernelCustomData(): currentKernelId is null. (should not happen)');\n    }\n\n    let data = this.kernelCustomData.get(this.currentKernelId);\n    if (!data) {\n      data = {};\n      this.kernelCustomData.set(this.currentKernelId, data);\n    }\n\n    return data;\n  }\n\n  /**\n   * a KernelID -> kernel info mapping. value is\n   * [ op_type, name, run function, [optional] preprocess_attribute_once function ]\n   */\n  kernels: Map<number, [string, string, RunFunction, [((attribute: unknown) => unknown) | undefined, unknown]]>;\n\n  commandEncoder: GPUCommandEncoder|null = null;\n  computePassEncoder: GPUComputePassEncoder|null = null;\n  pendingDispatchNumber = 0;\n\n  supportTimestampQuery = false;\n  profilingQuerySet: GPUQuerySet;\n  profilingQueryData: GpuData;\n  profilingTimeBase?: bigint;\n\n  env: Env;\n\n  /**\n   * a SessionID -> a Map of (InputOutputIndex -> [ID, GPUBuffer]) mapping.\n   */\n  sessionExternalDataMapping: Map<number, Map<number, [number, GPUBuffer]>> = new Map();\n\n  async initialize(env: Env): Promise<void> {\n    if (!navigator.gpu) {\n      // WebGPU is not available.\n      throw new Error('WebGpuBackend: WebGPU is not available.');\n    }\n\n    const adapter = await navigator.gpu.requestAdapter();\n    if (!adapter) {\n      throw new Error('WebGpuBackend: Failed to get GPU adapter.');\n    }\n\n    this.env = env;\n    const requiredFeatures: GPUFeatureName[] = [];\n    const deviceDescriptor: GPUDeviceDescriptor = {\n      requiredLimits: {\n        maxComputeWorkgroupStorageSize: adapter.limits.maxComputeWorkgroupStorageSize,\n        maxComputeWorkgroupsPerDimension: adapter.limits.maxComputeWorkgroupsPerDimension,\n        maxStorageBufferBindingSize: adapter.limits.maxStorageBufferBindingSize,\n        maxBufferSize: adapter.limits.maxBufferSize,\n        maxComputeInvocationsPerWorkgroup: adapter.limits.maxComputeInvocationsPerWorkgroup,\n        maxComputeWorkgroupSizeX: adapter.limits.maxComputeWorkgroupSizeX,\n        maxComputeWorkgroupSizeY: adapter.limits.maxComputeWorkgroupSizeY,\n        maxComputeWorkgroupSizeZ: adapter.limits.maxComputeWorkgroupSizeZ,\n      },\n      requiredFeatures,\n    };\n    // WebGPU Spec: Timestamp Queries Inside Passes\n    // https://github.com/gpuweb/gpuweb/blob/main/proposals/timestamp-query-inside-passes.md\n    if (adapter.features.has('timestamp-query-inside-passes')) {\n      this.supportTimestampQuery = true;\n      requiredFeatures.push('timestamp-query-inside-passes' as GPUFeatureName);\n    }\n    if (adapter.features.has('shader-f16')) {\n      requiredFeatures.push('shader-f16');\n    }\n\n    this.device = await adapter.requestDevice(deviceDescriptor);\n    this.gpuDataManager = createGpuDataManager(this);\n    this.programManager = new ProgramManager(this);\n    this.kernels = new Map();\n    this.kernelPersistentData = new Map();\n    this.kernelCustomData = new Map();\n\n    // set up flags for logger\n    configureLogger(env.logLevel!, !!env.debug);\n\n    // TODO: set up flags\n\n    this.device.onuncapturederror = ev => {\n      if (ev.error instanceof GPUValidationError) {\n        // eslint-disable-next-line no-console\n        console.error(`An uncaught WebGPU validation error was raised: ${ev.error.message}`);\n      }\n    };\n\n    if (this.supportTimestampQuery) {\n      this.profilingQuerySet = this.device.createQuerySet({\n        type: 'timestamp',\n        count: 2,\n      });\n    }\n\n    Object.defineProperty(this.env.webgpu, 'device', {value: this.device});\n  }\n\n  dispose(): void {\n    // currently, we do not do anything in this function. In all known use cases, we don't have the requirement to\n    // actually dispose the WebGpuBackend instance, because it's always used as a singleton.\n    //\n    // revisit this place if we get real requirement to dispose the instance.\n  }\n\n  getCommandEncoder(): GPUCommandEncoder {\n    if (!this.commandEncoder) {\n      this.commandEncoder = this.device.createCommandEncoder();\n    }\n    return this.commandEncoder;\n  }\n\n  getComputePassEncoder(): GPUComputePassEncoder {\n    if (!this.computePassEncoder) {\n      this.computePassEncoder = this.getCommandEncoder().beginComputePass();\n    }\n    return this.computePassEncoder;\n  }\n\n  endComputePass(): void {\n    if (this.computePassEncoder) {\n      this.computePassEncoder.end();\n      this.computePassEncoder = null;\n    }\n  }\n\n  flush(): void {\n    if (this.commandEncoder) {\n      this.endComputePass();\n      this.device.queue.submit([this.getCommandEncoder().finish()]);\n      this.gpuDataManager.refreshPendingBuffers();\n      this.commandEncoder = null;\n      this.pendingDispatchNumber = 0;\n    }\n  }\n\n  /**\n   * run a WebGPU program.\n   * @param program either a ProgramInfo instance containing metadata including the shader code, or a function that\n   * can be called and return a ProgramInfo instance\n   * @param inputs a TensorView array. each element represents a value already exists in GPU.\n   * @param outputIndices an indices array. each element can be either -1 (temporary data), -2 (persistent data) or an\n   * index to the kernel's output.\n   * @param createKernelOutput a callback function that create a value to kernel's output with the given index\n   * @param createIntermediateOutput a callback function that create a value as a intermediate value, either temporary\n   * or persistent (owned by the current kernel)\n   * @returns a TensorView array representing the result.\n   */\n  run(program: ProgramInfoLoader|ProgramInfo, inputs: readonly TensorView[], outputIndices: readonly number[],\n      createKernelOutput: (index: number, dataType: number, dims: readonly number[]) => TensorView,\n      createIntermediateOutput: (dataType: number, dims: readonly number[]) => TensorView): TensorView[] {\n    if (inputs.length !== program.inputTypes.length) {\n      throw new Error(`Input size must be equal to ${program.inputTypes.length}.`);\n    }\n\n    // create info for inputs\n    const inputDatas: GpuData[] = [];\n    for (let i = 0; i < inputs.length; ++i) {\n      const gpuData = this.gpuDataManager.get(inputs[i].data);\n      if (!gpuData) {\n        throw new Error(`no GPU data for input: ${inputs[i].data}`);\n      }\n      inputDatas[i] = gpuData;\n    }\n\n    const key = getProgramInfoUniqueKey(program, inputs);\n    let artifact = this.programManager.getArtifact(key);\n    const programInfo = artifact ?\n        artifact.programInfo :\n        (typeof (program as ProgramInfoLoader).get === 'function' ? (program as ProgramInfoLoader).get() :\n                                                                    (program as ProgramInfo));\n\n    // check output indices\n    const validatedOutputIndices = outputIndices.length === 0 ? programInfo.outputs.map((_, i) => i) : outputIndices;\n    if (validatedOutputIndices.length !== programInfo.outputs.length) {\n      throw new Error(`Output size ${validatedOutputIndices.length} must be equal to ${programInfo.outputs.length}.`);\n    }\n\n    // create info for outputs\n    const outputTensorViews: TensorView[] = [];\n    const outputDatas: GpuData[] = [];\n    for (let i = 0; i < programInfo.outputs.length; ++i) {\n      // value -1 and -2 are used for creating temporary and persistent outputs.\n      // value -3 is used for placeholder output. So -3, -2, -1 and 0, 1, 2, ... are valid\n      // output indices. see type definition of ComputeContextInputsOutputsMapping for more details.\n      if (!Number.isInteger(validatedOutputIndices[i]) || validatedOutputIndices[i] < -3 ||\n          validatedOutputIndices[i] >= programInfo.outputs.length) {\n        throw new Error(`Invalid output index: ${validatedOutputIndices[i]}`);\n      }\n      if (validatedOutputIndices[i] === -3) {\n        continue;\n      }\n      const isTemporary = validatedOutputIndices[i] === -1;\n      const isPersistent = validatedOutputIndices[i] === -2;\n      const tensorView = (isTemporary || isPersistent) ?\n          createIntermediateOutput(programInfo.outputs[i].dataType, programInfo.outputs[i].dims) :\n          createKernelOutput(validatedOutputIndices[i], programInfo.outputs[i].dataType, programInfo.outputs[i].dims);\n      const gpuData = this.gpuDataManager.get(tensorView.data);\n      if (!gpuData) {\n        throw new Error(`no GPU data for output: ${tensorView.data}`);\n      }\n      if (isTemporary) {\n        this.temporaryData.push(gpuData);\n      }\n      if (isPersistent) {\n        let persistentData = this.kernelPersistentData.get(this.currentKernelId!);\n        if (!persistentData) {\n          persistentData = [];\n          this.kernelPersistentData.set(this.currentKernelId!, persistentData);\n        }\n        persistentData.push(gpuData);\n      }\n      outputTensorViews.push(tensorView);\n      outputDatas.push(gpuData);\n    }\n\n    const normalizedDispatchGroup = this.programManager.normalizeDispatchGroupSize(programInfo.dispatchGroup(inputs));\n\n    if (!artifact) {\n      artifact = this.programManager.build(programInfo, normalizedDispatchGroup);\n      this.programManager.setArtifact(key, artifact);\n    }\n\n    LOG_DEBUG(\n        'info',\n        () => `[ProgramManager] run \"${programInfo.name}\" (key=${key}) with ${normalizedDispatchGroup[0]}x${\n            normalizedDispatchGroup[1]}x${normalizedDispatchGroup[2]}`);\n    this.programManager.run(artifact, inputs, inputDatas, outputDatas, normalizedDispatchGroup);\n\n    return outputTensorViews;\n  }\n\n  upload(gpuDataId: number, data: Uint8Array): void {\n    this.gpuDataManager.upload(gpuDataId, data);\n  }\n\n  memcpy(src: number, dst: number): void {\n    this.gpuDataManager.memcpy(src, dst);\n  }\n\n  async download(gpuDataId: number, getTargetBuffer: () => Uint8Array): Promise<void> {\n    // the underlying buffer may be changed after the async function is called. so we use a getter function to make sure\n    // the buffer is up-to-date.\n    await this.gpuDataManager.download(gpuDataId, getTargetBuffer);\n  }\n\n  alloc(size: number): number {\n    return this.gpuDataManager.create(size).id;\n  }\n\n  free(ptr: number): number {\n    return this.gpuDataManager.release(ptr);\n  }\n\n  createKernel(opType: string, kernelId: number, attribute: unknown, nodeName: string): void {\n    const op = WEBGPU_OP_RESOLVE_RULES.get(opType);\n    if (!op) {\n      throw new Error(`kernel not implemented: ${opType}`);\n    }\n\n    this.kernels.set(kernelId, [opType, nodeName, op[0], [op[1], attribute]]);\n  }\n\n  releaseKernel(kernelId: number): void {\n    const persistentData = this.kernelPersistentData.get(kernelId);\n    if (persistentData) {\n      for (const data of persistentData) {\n        this.gpuDataManager.release(data.id);\n      }\n      this.kernelPersistentData.delete(kernelId);\n    }\n\n    this.kernelCustomData.delete(kernelId);\n    this.kernels.delete(kernelId);\n  }\n\n  computeKernel(kernelId: number, context: ComputeContext, errors: Array<Promise<string|null>>): number {\n    const kernel = this.kernels.get(kernelId);\n    if (!kernel) {\n      throw new Error(`kernel not created: ${kernelId}`);\n    }\n    const [opType, nodeName, kernelEntry, attributes] = kernel;\n    if (this.currentKernelId !== null) {\n      throw new Error(`kernel \"[${opType}] ${nodeName}\" is not allowed to be called recursively`);\n    }\n    this.currentKernelId = kernelId;\n\n    // parse attributes if necessary\n    if (attributes[0]) {\n      attributes[1] = attributes[0](attributes[1]);\n      attributes[0] = undefined;\n    }\n\n    LOG_DEBUG('info', () => `[WebGPU] Start to run kernel \"[${opType}] ${nodeName}\"...`);\n\n    const useErrorScope = this.env.debug;\n\n    this.temporaryData = [];\n    try {\n      if (useErrorScope) {\n        this.device.pushErrorScope('validation');\n      }\n\n      kernelEntry(context, attributes[1]);\n      return 0;  // ORT_OK\n    } catch (e) {\n      errors.push(Promise.resolve(`[WebGPU] Kernel \"[${opType}] ${nodeName}\" failed. ${e}`));\n      return 1;  // ORT_FAIL\n    } finally {\n      if (useErrorScope) {\n        errors.push(this.device.popErrorScope().then(\n            err => err ? `GPU validation error for kernel \"[${opType}] ${nodeName}\": ${err.message}` : null));\n      }\n\n      for (const data of this.temporaryData) {\n        this.gpuDataManager.release(data.id);\n      }\n      this.temporaryData = [];\n      this.currentKernelId = null;\n    }\n  }\n\n  // #region external buffer\n  registerBuffer(sessionId: number, index: number, buffer: GPUBuffer, size: number): number {\n    let sessionInputOutputMapping = this.sessionExternalDataMapping.get(sessionId);\n    if (!sessionInputOutputMapping) {\n      sessionInputOutputMapping = new Map();\n      this.sessionExternalDataMapping.set(sessionId, sessionInputOutputMapping);\n    }\n\n    const previousBuffer = sessionInputOutputMapping.get(index);\n    const id = this.gpuDataManager.registerExternalBuffer(buffer, size, previousBuffer?.[1]);\n    sessionInputOutputMapping.set(index, [id, buffer]);\n    return id;\n  }\n  unregisterBuffers(sessionId: number): void {\n    const sessionInputOutputMapping = this.sessionExternalDataMapping.get(sessionId);\n    if (sessionInputOutputMapping) {\n      sessionInputOutputMapping.forEach(bufferInfo => this.gpuDataManager.unregisterExternalBuffer(bufferInfo[1]));\n      this.sessionExternalDataMapping.delete(sessionId);\n    }\n  }\n  getBuffer(gpuDataId: number): GPUBuffer {\n    const gpuData = this.gpuDataManager.get(gpuDataId);\n    if (!gpuData) {\n      throw new Error(`no GPU data for buffer: ${gpuDataId}`);\n    }\n    return gpuData.buffer;\n  }\n  createDownloader(gpuBuffer: GPUBuffer, size: number, type: Tensor.GpuBufferDataTypes):\n      () => Promise<Tensor.DataType> {\n    return async () => {\n      const data = await downloadGpuData(this, gpuBuffer, size);\n      return createView(data.buffer, type);\n    };\n  }\n  // #endregion\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Env} from 'onnxruntime-common';\n\nimport {OrtWasmModule} from '../binding/ort-wasm';\nimport {DataType, getTensorElementSize} from '../wasm-common';\n\nimport {WebGpuBackend} from './backend-webgpu';\nimport {LOG_DEBUG} from './log';\nimport {TensorView} from './tensor-view';\nimport {ShapeUtil} from './util';\nimport {ComputeContext, ComputeContextInputsOutputsMapping, ProgramInfo, ProgramInfoLoader} from './webgpu/types';\n\n/* eslint-disable no-bitwise */\n\nclass TensorViewImpl implements TensorView {\n  constructor(\n      private module: OrtWasmModule, public readonly dataType: number, public readonly data: number,\n      public readonly dims: readonly number[]) {}\n\n  getFloat32Array(): Float32Array {\n    if (this.dataType !== DataType.float) {\n      throw new Error('Invalid data type');\n    }\n    const elementCount = ShapeUtil.size(this.dims);\n    return elementCount === 0 ? new Float32Array() :\n                                new Float32Array(this.module.HEAP8.buffer, this.data, elementCount);\n  }\n\n  getBigInt64Array(): BigInt64Array {\n    if (this.dataType !== DataType.int64) {\n      throw new Error('Invalid data type');\n    }\n    const elementCount = ShapeUtil.size(this.dims);\n    return elementCount === 0 ? new BigInt64Array() :\n                                new BigInt64Array(this.module.HEAP8.buffer, this.data, elementCount);\n  }\n\n  getInt32Array(): Int32Array {\n    if (this.dataType !== DataType.int32) {\n      throw new Error('Invalid data type');\n    }\n    const elementCount = ShapeUtil.size(this.dims);\n    return elementCount === 0 ? new Int32Array() : new Int32Array(this.module.HEAP8.buffer, this.data, elementCount);\n  }\n\n  reshape(newDims: readonly number[]): TensorView {\n    if (ShapeUtil.size(newDims) !== ShapeUtil.size(this.dims)) {\n      throw new Error('Invalid new shape');\n    }\n    return new TensorViewImpl(this.module, this.dataType, this.data, newDims);\n  }\n}\n\nclass ComputeContextImpl implements ComputeContext {\n  readonly opKernelContext: number;\n  readonly inputs: readonly TensorView[];\n  readonly outputCount: number;\n  get kernelCustomData(): {[key: string]: unknown} {\n    return this.backend.currentKernelCustomData;\n  }\n  get customDataBuffer(): Uint8Array {\n    return this.module.HEAPU8.subarray(this.customDataOffset, this.customDataOffset + this.customDataSize);\n  }\n  private customDataOffset = 0;\n  private customDataSize = 0;\n  constructor(private module: OrtWasmModule, private backend: WebGpuBackend, contextDataOffset: number) {\n    const heapU32 = module.HEAPU32;\n\n    // extract context data\n    let dataIndex = (contextDataOffset >> 2);\n    this.opKernelContext = heapU32[dataIndex++];\n    const inputCount = heapU32[dataIndex++];\n    this.outputCount = heapU32[dataIndex++];\n    this.customDataOffset = heapU32[dataIndex++];\n    this.customDataSize = heapU32[dataIndex++];\n\n    const inputs: TensorView[] = [];\n    for (let i = 0; i < inputCount; i++) {\n      const dataType = heapU32[dataIndex++];\n      const data = heapU32[dataIndex++];\n      const dim = heapU32[dataIndex++];\n      const dims: number[] = [];\n      for (let d = 0; d < dim; d++) {\n        dims.push(heapU32[dataIndex++]);\n      }\n      inputs.push(new TensorViewImpl(module, dataType, data, dims));\n    }\n    this.inputs = inputs;\n  }\n\n  compute(program: ProgramInfoLoader|ProgramInfo, inputsOutputsMapping?: ComputeContextInputsOutputsMapping):\n      TensorView[] {\n    // prepare inputs. inputs should always be valid data.\n    const mappedInputs =\n        inputsOutputsMapping?.inputs?.map(i => typeof i === 'number' ? this.inputs[i] : i) ?? this.inputs;\n    // prepare outputs.\n    const outputIndices = inputsOutputsMapping?.outputs ?? [];\n    const createKernelOutput = (index: number, dataType: number, dims: readonly number[]): TensorView =>\n        new TensorViewImpl(this.module, dataType, this.output(index, dims), dims);\n    const createTemporaryOutput = (dataType: number, dims: readonly number[]): TensorView => {\n      const elementSize = getTensorElementSize(dataType);\n      if (!elementSize) {\n        throw new Error(`Unsupported data type: ${dataType}`);\n      }\n      const bufferSize = elementSize * ShapeUtil.size(dims);\n      return new TensorViewImpl(this.module, dataType, this.backend.gpuDataManager.create(bufferSize).id, dims);\n    };\n    return this.backend.run(program, mappedInputs, outputIndices, createKernelOutput, createTemporaryOutput);\n  }\n\n  output(index: number, dims: readonly number[]): number {\n    const stack = this.module.stackSave();\n    try {\n      const data = this.module.stackAlloc((1 + dims.length) * 4 /* sizeof(size_t) */);\n      let offset = data >> 2;\n      this.module.HEAPU32[offset++] = dims.length;\n      for (let i = 0; i < dims.length; i++) {\n        this.module.HEAPU32[offset++] = dims[i];\n      }\n      return this.module._JsepOutput(this.opKernelContext, index, data);\n    } catch (e) {\n      throw new Error(\n          `Failed to generate kernel's output[${index}] with dims [${dims}]. ` +\n          'If you are running with pre-allocated output, please make sure the output type/dims are correct. ' +\n          `Error: ${e}`);\n    } finally {\n      this.module.stackRestore(stack);\n    }\n  }\n}\n\nexport const init = async(module: OrtWasmModule, env: Env): Promise<void> => {\n  const init = module.jsepInit;\n  if (init && navigator.gpu) {\n    if (!env.wasm.simd) {\n      throw new Error(\n          'Not supported for WebGPU=ON and SIMD=OFF. Please set `env.wasm.simd` to true when using WebGPU EP');\n    }\n    const backend = new WebGpuBackend();\n    await backend.initialize(env);\n\n    init(\n        // backend\n        backend,\n\n        // jsepAlloc()\n        (size: number) => backend.alloc(size),\n\n        // jsepFree()\n        (ptr: number) => backend.free(ptr),\n\n        // jsepCopy(src, dst, size, isSourceGpu)\n        (src: number, dst: number, size: number, isSourceGpu = false) => {\n          if (isSourceGpu) {\n            LOG_DEBUG('verbose', () => `[WebGPU] jsepCopyGpuToGpu: src=${src}, dst=${dst}, size=${size}`);\n            backend.memcpy(src, dst);\n          } else {\n            LOG_DEBUG('verbose', () => `[WebGPU] jsepCopyCpuToGpu: dataOffset=${src}, gpuDataId=${dst}, size=${size}`);\n            const data = module.HEAPU8.subarray(src, src + size);\n            backend.upload(dst, data);\n          }\n        },\n\n        // jsepCopyAsync(src, dst, size)\n        async(gpuDataId: number, dataOffset: number, size: number):\n            Promise<void> => {\n              LOG_DEBUG(\n                  'verbose',\n                  () => `[WebGPU] jsepCopyGpuToCpu: gpuDataId=${gpuDataId}, dataOffset=${dataOffset}, size=${size}`);\n\n              await backend.download(gpuDataId, () => module.HEAPU8.subarray(dataOffset, dataOffset + size));\n            },\n\n        // jsepCreateKernel\n        (name: string, kernel: number, attribute: unknown) => backend.createKernel(\n            name, kernel, attribute,\n            env.debug || env.webgpu.profilingMode === 'default' ? module.UTF8ToString(module._JsepGetNodeName(kernel)) :\n                                                                  `${kernel}`),\n\n        // jsepReleaseKernel\n        (kernel: number) => backend.releaseKernel(kernel),\n\n        // jsepRun\n        (kernel: number, contextDataOffset: number, sessionHandle: number, errors: Array<Promise<string|null>>) => {\n          LOG_DEBUG(\n              'verbose',\n              () => `[WebGPU] jsepRun: sessionHandle=${sessionHandle}, kernel=${kernel}, contextDataOffset=${\n                  contextDataOffset}`);\n          const context = new ComputeContextImpl(module, backend, contextDataOffset);\n          return backend.computeKernel(kernel, context, errors);\n        });\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Env} from 'onnxruntime-common';\n\nimport {logLevelStringToEnum} from '../wasm-common';\n\ntype LogLevel = NonNullable<Env['logLevel']>;\ntype MessageString = string;\ntype MessageFunction = () => string;\ntype Message = MessageString|MessageFunction;\n\nconst logLevelPrefix = ['V', 'I', 'W', 'E', 'F'];\n\nconst doLog = (level: number, message: string): void => {\n  // eslint-disable-next-line no-console\n  console.log(`[${logLevelPrefix[level]},${new Date().toISOString()}]${message}`);\n};\n\nlet configLogLevel: LogLevel|undefined;\nlet debug: boolean|undefined;\n\nexport const configureLogger = ($configLogLevel: LogLevel, $debug: boolean): void => {\n  configLogLevel = $configLogLevel;\n  debug = $debug;\n};\n\n/**\n * A simple logging utility to log messages to the console.\n */\nexport const LOG = (logLevel: LogLevel, msg: Message): void => {\n  const messageLevel = logLevelStringToEnum(logLevel);\n  const configLevel = logLevelStringToEnum(configLogLevel);\n  if (messageLevel >= configLevel) {\n    doLog(messageLevel, typeof msg === 'function' ? msg() : msg);\n  }\n};\n\n/**\n * A simple logging utility to log messages to the console. Only logs when debug is enabled.\n */\nexport const LOG_DEBUG: typeof LOG = (...args: Parameters<typeof LOG>) => {\n  if (debug) {\n    LOG(...args);\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from 'onnxruntime-common';\n\nimport {tensorTypeToTypedArrayConstructor} from '../wasm-common';\n\nexport const createView = (dataBuffer: ArrayBuffer, type: Tensor.Type): Int32Array|Uint32Array|BigInt64Array|\n    BigUint64Array|Uint8Array|Float32Array|Float64Array|Int8Array|Int16Array|Uint16Array =>\n        new (tensorTypeToTypedArrayConstructor(type))(dataBuffer);\n\n/**\n * a TensorView does not own the data.\n */\nexport interface TensorView {\n  readonly data: number;\n  readonly dataType: number;\n  readonly dims: readonly number[];\n\n  /**\n   * get a Float32Array data view of the tensor data. tensor data must be on CPU.\n   */\n  getFloat32Array(): Float32Array;\n\n  /**\n   * get a BigInt64Array data view of the tensor data. tensor data must be on CPU.\n   */\n  getBigInt64Array(): BigInt64Array;\n\n  /**\n   * get a Int32Array data view of the tensor data. tensor data must be on CPU.\n   */\n  getInt32Array(): Int32Array;\n\n  /**\n   * create a new tensor view with the same data but different dimensions.\n   */\n  reshape(newDims: readonly number[]): TensorView;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/* eslint-disable no-param-reassign */\n\nexport class MatMulUtil {\n  /**\n   * Calculate the expected shape when matrix multiplication\n   * @param a The shape of tensor A. Should be a tuple of 2 positive integers\n   * @param b The shape of tensor B. Should be a tuple of 2 positive integers\n   * @returns The expected shape of the result, or undefined if N/A\n   */\n  static calcMatMulShape(a: [number, number], b: [number, number]): [number, number]|undefined {\n    return (a[1] !== b[0]) ? undefined : [a[0], b[1]];\n  }\n}\n\n\nexport class BroadcastUtil {\n  /**\n   * Calculate the expected shape when broadcasting 2 tensors\n   * @param a The shape of tensor A. Should be an array of positive integers\n   * @param b The shape of tensor B. Should be an array of positive integers\n   * @param isMatMul Whether the operation is MatMul\n   * @returns The expected shape of the result, or undefined if N/A\n   */\n  static calcShape(adims: readonly number[], bdims: readonly number[], isMatMul = false): readonly number[]|undefined {\n    const arank = adims.length;\n    const brank = bdims.length;\n    if (arank === 0) {\n      return bdims;\n    }\n    if (brank === 0) {\n      return adims;\n    }\n    const crank = Math.max(adims.length, bdims.length);\n    const cdims = new Array<number>(crank);\n\n    // calculate the last 2 dimension if it is MatMul\n    if (isMatMul) {\n      if (arank < 2 || brank < 2) {\n        return undefined;\n      }\n      const cShapeMatMul =\n          MatMulUtil.calcMatMulShape([adims[arank - 2], adims[arank - 1]], [bdims[brank - 2], bdims[brank - 1]]);\n      if (cShapeMatMul === undefined) {\n        return undefined;\n      }\n      [cdims[crank - 2], cdims[crank - 1]] = cShapeMatMul;\n    }\n\n    for (let i = isMatMul ? 3 : 1; i <= crank; i++) {\n      const aLen = arank - i < 0 ? 1 : adims[arank - i];\n      const bLen = brank - i < 0 ? 1 : bdims[brank - i];\n\n      if (aLen !== bLen && aLen > 1 && bLen > 1) {\n        return undefined;\n      }\n      cdims[crank - i] = Math.max(aLen, bLen);\n    }\n\n    return cdims;\n  }\n\n  /**\n   * Determine if a shape is unidirectional broadcastable to another shape\n   * @param shape The input shape\n   * @param finalShape The desired shape after broadcasting\n   */\n  static isValidBroadcast(shape: readonly number[], finalShape: readonly number[]): boolean {\n    // align shape to the right\n    const inputRank = shape.length;\n    const finalRank = finalShape.length;\n    if (inputRank > finalRank) {\n      return false;\n    }\n    for (let i = 1; i <= inputRank; i++) {\n      if (shape[inputRank - i] !== 1 && shape[inputRank - i] !== finalShape[finalRank - i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n\n\nexport class ShapeUtil {\n  /**\n   * calculate the size (number of elements)\n   */\n  static size(dims: readonly number[]): number {\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, dims.length);\n  }\n\n  /**\n   * calculate the size (number of elements) from the given axis (inclusive)\n   */\n  static sizeFromDimension(dims: readonly number[], axis: number): number {\n    if (axis < 0 || axis > dims.length) {\n      throw new Error(`invalid dimension of ${axis} for sizeFromDimension as Tensor has ${dims.length} dimensions.`);\n    }\n    return ShapeUtil.getSizeFromDimensionRange(dims, axis, dims.length);\n  }\n\n  /**\n   * calculate the size (number of elements) to the given axis (exclusive)\n   */\n  static sizeToDimension(dims: readonly number[], axis: number): number {\n    if (axis < 0 || axis > dims.length) {\n      throw new Error(`invalid dimension of ${axis} for sizeToDimension as Tensor has ${dims.length} dimensions.`);\n    }\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, axis);\n  }\n\n  /**\n   * calculate the size (number of elements) from and to the given axis [start, end)\n   */\n  static getSizeFromDimensionRange(dims: readonly number[], start: number, end: number): number {\n    let size = 1;\n    for (let i = start; i < end; i++) {\n      // safety check as this method is called by multiple other methods requiring size.\n      // size cannot be negative.\n      if (dims[i] < 0) {\n        throw new Error(\n            // eslint-disable-next-line max-len\n            'cannot get valid size from specified dimension range. Most likely the range contains negative values in them.');\n      }\n      size *= dims[i];\n    }\n    return size;\n  }\n\n  static computeStrides(dims: readonly number[]): readonly number[] {\n    const rank = dims.length;\n    if (rank === 0) {\n      return [];\n    } else if (rank === 1) {\n      return [1];\n    }\n    const strides = new Array(rank);\n    strides[rank - 1] = 1;\n    strides[rank - 2] = dims[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * dims[i + 1];\n    }\n    return strides;\n  }\n\n  /**\n   * normailze axis of range [-r, r) into [0, r).\n   */\n  static normalizeAxis(axis: number, tensorRank: number): number {\n    if (axis < -tensorRank && axis >= tensorRank) {\n      throw new Error('unsupported axis for this operation.');\n    }\n    return axis < 0 ? axis + tensorRank : axis;\n  }\n\n  static normalizeAxes(axes: readonly number[], tensorRank?: number): number[] {\n    return axes.map(x => this.normalizeAxis(x, tensorRank ?? axes.length));\n  }\n\n  /**\n   * Sorts a given array based on the indices in the Perm array\n   * Used in Transpose\n   * @param a Array to be sorted such as dims or strides\n   * @param perm Perm given; if null a will be reversed\n   */\n  static sortBasedOnPerm(a: readonly number[], perm?: readonly number[]): readonly number[] {\n    if (perm) {\n      return perm.map((v) => a[v]);\n    } else {\n      return a.slice().reverse();\n    }\n  }\n\n  /**\n   * Pads a given shape according to the padding values\n   * @param dims shape of the Tensor to be padded\n   * @param pad pad values\n   */\n  static padShape(dims: readonly number[], pad: readonly number[]): readonly number[] {\n    const rank = dims.length;\n    return dims.map((v, i) => v + pad[i] + pad[i + rank]);\n  }\n\n  /**\n   * Determines if the two shapes are identical\n   * @param shape1\n   * @param shape2\n   */\n  static areEqual(shape1: readonly number[], shape2: readonly number[]): boolean {\n    if (shape1.length !== shape2.length) {\n      return false;\n    }\n    return shape1.every((v, i) => v === shape2[i]);\n  }\n}\n\nexport class PoolConvUtil {\n  /**\n   * Adjust the kernel, strides, pads to correct rank. Set to default value if not present\n   * @param isGlobalOperator If true, perform global pooling.\n   * @param inputDims The input tensor dimension.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param strides Stride along each axis.\n   * @param dilations Dilation along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   */\n  static adjustPoolAttributes(\n      isGlobalOperator: boolean, inputDims: readonly number[], kernelShape: number[], strides: number[],\n      dilations: number[], pads: number[]): void {\n    if (!isGlobalOperator && kernelShape.length !== inputDims.length - 2) {\n      throw new Error('length of specified kernel shapes should be 2 less than length of input dimensions');\n    }\n\n    if (isGlobalOperator) {\n      // adjust kernel shape to cover the input dims\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        if (dim >= kernelShape.length) {\n          kernelShape.push(inputDims[dim + 2]);\n        } else {\n          kernelShape[dim] = inputDims[dim + 2];\n        }\n      }\n    }\n\n    // adjust strides length to match kernel shape length\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (dim < strides.length) {\n        if (strides[dim] < 0) {\n          throw new Error('strides should be greater than or equal to 1');\n        }\n      } else {\n        strides.push(1);\n      }\n    }\n\n    // adjust dilation value\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (dim < dilations.length) {\n        if (dilations[dim] < 0) {\n          throw new Error('dilations should be greater than or equal to 1');\n        }\n      } else {\n        dilations.push(1);\n      }\n    }\n\n    // adjust pads length to match 2 * kernel shape length\n    for (let dim = 0; dim < kernelShape.length * 2; dim++) {\n      if (dim < pads.length) {\n        if (pads[dim] < 0) {\n          throw new Error('pad should be greater than or equal to 1');\n        }\n      } else {\n        pads.push(0);\n      }\n    }\n\n    // sanity checks for values in kernel shapes and pads\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (kernelShape[dim] <= 0) {\n        throw new Error('kernel shapes need to be greater than 0');\n      }\n\n      if (pads[dim] >= kernelShape[dim] || pads[dim + kernelShape.length] >= kernelShape[dim]) {\n        throw new Error('pads should be smaller than kernel');\n      }\n    }\n  }\n\n  // adjust pad values based on 'autoPad' attribute\n  static adjustPadsBasedOnAutoPad(\n      inputDims: readonly number[], strides: readonly number[], dilations: readonly number[],\n      kernelShape: readonly number[], pads: number[], isChannelLast: boolean, autoPad?: string): void {\n    if (!autoPad) {\n      return;\n    }\n\n    if (pads.length !== 2 * (inputDims.length - 2)) {\n      throw new Error('length of pads should be twice the length of data dimensions');\n    }\n\n    if (strides.length !== (inputDims.length - 2)) {\n      throw new Error('length of strides should be the length of data dimensions');\n    }\n\n    if (kernelShape.length !== (inputDims.length - 2)) {\n      throw new Error('length of kernel shapes should be the length of data dimensions');\n    }\n\n    for (let dim = 0; dim < inputDims.length - 2; dim++) {\n      PoolConvUtil.adjustPadAndReturnShape(\n          inputDims[dim + (isChannelLast ? 1 : 2)], strides[dim], dilations[dim], kernelShape[dim], pads, dim,\n          dim + inputDims.length - 2, autoPad);\n    }\n  }\n\n  /**\n   * Calculate the output shape for Pool ops based on input attributes. (Should be used only for Pool ops)\n   * @param isGlobalOperator If true, perform global pooling.\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\n   * @param strides Stride along each axis.\n   * @param dilations Dilation along each axis.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\n   */\n  static computePoolOutputShape(\n      isGlobalOperator: boolean, inputDims: readonly number[], strides: number[], dilations: number[],\n      kernelShape: number[], pads: number[], autoPad?: string): number[] {\n    if (inputDims.length <= 0) {\n      throw new Error('input shape must be of size greater than 0');\n    }\n\n    // Add batch size and number of channels of output\n    const outputDims = [inputDims[0], inputDims[1]];\n\n    PoolConvUtil.computeShapeHelper(\n        isGlobalOperator, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\n    return outputDims;\n  }\n\n  /**\n   * Calculate the output shape for Conv op based on input attributes. (Should be used only for Conv op)\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\n   * @param filterDims The filter tensor dimension. (inputs[1].dims)\n   * @param strides Stride along each axis.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\n   */\n  static computeConvOutputShape(\n      inputDims: readonly number[], filterDims: readonly number[], strides: number[], dilations: number[],\n      kernelShape: number[], pads: number[], autoPad?: string): number[] {\n    if (inputDims.length <= 0 || filterDims.length <= 0) {\n      throw new Error('invalid input tensor dims or invalid filter tensor dims');\n    }\n\n    // Add batch size and number of channels of output\n    const outputDims = [inputDims[0], filterDims[0]];\n\n    PoolConvUtil.computeShapeHelper(false, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\n    return outputDims;\n  }\n\n  // will compute output shapes for data dimensions ONLY (i.e.) no batch size and channels\n  // called by computePoolOutputShape() and computeConvOutputShape()\n  // adjust pads based on 'autoPad' attribute prior to shape computation\n  private static computeShapeHelper(\n      isGlobalOperator: boolean, inputDims: readonly number[], outputDims: number[], strides: readonly number[],\n      dilations: readonly number[], kernelShape: readonly number[], pads: number[], autoPad?: string) {\n    if (isGlobalOperator) {\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        outputDims.push(1);\n      }\n    } else {\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        outputDims.push(PoolConvUtil.adjustPadAndReturnShape(\n            inputDims[dim + 2], strides[dim], dilations[dim], kernelShape[dim], pads, dim, dim + inputDims.length - 2,\n            autoPad));\n      }\n    }\n  }\n\n  // helper for computeShapeHelper() and adjustPadsBasedOnAutoPad()\n  // adjusts pad value for given 'autoPad' string and computes output shape along a particular dimension\n  private static adjustPadAndReturnShape(\n      inSize: number, stride: number, dilation: number, kernel: number, pads: number[], padHeadIndex: number,\n      padTailIndex: number, autoPad?: string): number {\n    const dkernel = dilation * (kernel - 1) + 1;\n    if (autoPad && autoPad !== 'NOTSET') {\n      switch (autoPad) {\n        case 'VALID':\n          pads[padHeadIndex] = 0;\n          pads[padTailIndex] = 0;\n          return Math.floor(((inSize - dkernel) / stride) + 1);\n        case 'SAME_LOWER':\n        case 'SAME_UPPER':\n          if (dilation !== 1) {\n            throw new Error('Dilation not supported for SAME_UPPER or SAME_LOWER');\n          } else {\n            const legacyTargetSize = (inSize + stride - 1) / stride;\n            const padNeeded = (legacyTargetSize - 1) * stride + kernel - inSize;\n            pads[padHeadIndex] =\n                (autoPad === 'SAME_LOWER') ? Math.floor((padNeeded + 1) / 2) : Math.floor(padNeeded / 2);\n            pads[padTailIndex] = padNeeded - pads[padHeadIndex];\n            return Math.floor(((inSize + padNeeded - kernel) / stride) + 1);\n          }\n        default:\n          throw new Error('Unsupported AutoPad type');\n      }\n    } else {\n      return Math.floor(((inSize + pads[padHeadIndex] + pads[padTailIndex] - dkernel) / stride) + 1);\n    }\n  }\n}\n\nexport class GemmUtil {\n  // will make sure input shapes are compatible for this op\n  // and return back the shape of the output in the form of a tuple\n  // will throw exception if the input shapes are not compatible\n  static getShapeOfGemmResult(\n      leftShape: readonly number[], transLeft: boolean, rightShape: readonly number[], transRight: boolean,\n      biasShape?: readonly number[]): readonly number[] {\n    if (leftShape.length !== 2 || rightShape.length !== 2) {\n      throw new Error('shape need to be of size 2');\n    }\n\n    let M: number;\n    let K: number;\n    let N: number;\n\n    if (transLeft) {\n      M = leftShape[1];\n      K = leftShape[0];\n    } else {\n      M = leftShape[0];\n      K = leftShape[1];\n    }\n\n    let kDim = -1;\n\n    if (transRight) {\n      N = rightShape[0];\n      kDim = 1;\n    } else {\n      N = rightShape[1];\n      kDim = 0;\n    }\n\n    if (rightShape[kDim] !== K) {\n      throw new Error('dimension mismatch');\n    }\n\n    if (M <= 0 || N <= 0 || K <= 0) {\n      throw new Error('invalid shape specified');\n    }\n\n    if (biasShape && !BroadcastUtil.isValidBroadcast(biasShape, [M, N])) {\n      throw new Error('gemm: invalid bias shape for broadcast');\n    }\n\n    return [M, N, K];\n  }\n}\n\n\nexport const MIN_CLIP = -3.4028234663852886e+38;\nexport const MAX_CLIP = 3.4028234663852886e+38;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nclass AttributeWithCacheKeyImpl {\n  constructor(attribute: Record<string, unknown>) {\n    Object.assign(this, attribute);\n  }\n\n  private _cacheKey: string;\n  public get cacheKey(): string {\n    if (!this._cacheKey) {\n      this._cacheKey =\n          Object.getOwnPropertyNames(this).sort().map(name => `${(this as Record<string, unknown>)[name]}`).join(';');\n    }\n    return this._cacheKey;\n  }\n}\n\nexport interface AttributeWithCacheKey {\n  readonly cacheKey: string;\n}\n\n/**\n * create a new object from the given attribute, and add a cacheKey property to it\n */\nexport const createAttributeWithCacheKey = <T extends Record<string, unknown>>(attribute: T): T&AttributeWithCacheKey =>\n    new AttributeWithCacheKeyImpl(attribute) as unknown as T & AttributeWithCacheKey;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {WebGpuBackend} from '../backend-webgpu';\nimport {LOG_DEBUG} from '../log';\n\nimport {GpuData, GpuDataId, GpuDataType} from './types';\n\n/**\n * manages GpuDataId -> GpuBuffer\n */\nexport interface GpuDataManager {\n  /**\n   * copy data from CPU to GPU.\n   */\n  upload(id: GpuDataId, data: Uint8Array): void;\n  /**\n   * copy data from GPU to GPU.\n   */\n  memcpy(sourceId: GpuDataId, destinationId: GpuDataId): void;\n  /**\n   * create new data on GPU.\n   */\n  create(size: number, usage?: number): GpuData;\n  /**\n   * get GPU data by ID.\n   */\n  get(id: GpuDataId): GpuData|undefined;\n  /**\n   * release the data on GPU by ID.\n   *\n   * @return size of the data released\n   */\n  release(id: GpuDataId): number;\n  /**\n   * copy data from GPU to CPU.\n   */\n  download(id: GpuDataId, getTargetBuffer: () => Uint8Array): Promise<void>;\n\n  /**\n   * refresh the buffers that marked for release.\n   *\n   * when release() is called, the buffer is not released immediately. this is because we need to wait for the commands\n   * to be submitted to the GPU. this function is called after the commands are submitted so that the buffers can be\n   * actually released.\n   */\n  refreshPendingBuffers(): void;\n\n  /**\n   * register an external buffer for IO Binding. If the buffer is already registered, return the existing GPU data ID.\n   *\n   * GPU data manager only manages a mapping between the buffer and the GPU data ID. It will not manage the lifecycle of\n   * the external buffer.\n   */\n  registerExternalBuffer(buffer: GPUBuffer, originalSize: number, previousBuffer?: GPUBuffer): number;\n\n  /**\n   * unregister an external buffer for IO Binding.\n   */\n  unregisterExternalBuffer(buffer: GPUBuffer): void;\n\n  /**\n   * destroy all gpu buffers. Call this when the session.release is called.\n   */\n  dispose(): void;\n}\n\ninterface StorageCacheValue {\n  gpuData: GpuData;\n  originalSize: number;\n}\n\n/**\n * normalize the buffer size so that it fits the 128-bits (16 bytes) alignment.\n */\nconst calcNormalizedBufferSize = (size: number) => Math.ceil(size / 16) * 16;\n\nlet guid = 1;\nconst createNewGpuDataId = () => guid++;\n\n/**\n * exported standard download function. This function is used by the session to download the data from GPU, and also by\n * factory to create GPU tensors with the capacity of downloading data from GPU.\n *\n * @param backend - the WebGPU backend\n * @param gpuBuffer - the GPU buffer to download\n * @param originalSize - the original size of the data\n * @param getTargetBuffer - optional. If provided, the data will be copied to the target buffer. Otherwise, a new buffer\n * will be created and returned.\n */\nexport const downloadGpuData =\n    async(backend: WebGpuBackend, gpuBuffer: GPUBuffer, originalSize: number, getTargetBuffer?: () => Uint8Array):\n        Promise<Uint8Array> => {\n          const bufferSize = calcNormalizedBufferSize(originalSize);\n          const gpuReadBuffer = backend.device.createBuffer(\n              // eslint-disable-next-line no-bitwise\n              {size: bufferSize, usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ});\n          try {\n            const commandEncoder = backend.getCommandEncoder();\n            backend.endComputePass();\n            commandEncoder.copyBufferToBuffer(\n                gpuBuffer /* source buffer */, 0 /* source offset */, gpuReadBuffer /* destination buffer */,\n                0 /* destination offset */, bufferSize /* size */\n            );\n            backend.flush();\n\n            await gpuReadBuffer.mapAsync(GPUMapMode.READ);\n\n            const arrayBuffer = gpuReadBuffer.getMappedRange();\n            if (getTargetBuffer) {\n              // if we already have a CPU buffer to accept the data, no need to clone the ArrayBuffer.\n              const targetBuffer = getTargetBuffer();\n              targetBuffer.set(new Uint8Array(arrayBuffer, 0, originalSize));\n              return targetBuffer;\n            } else {\n              // the mapped ArrayBuffer will be released when the GPU buffer is destroyed. Need to clone the\n              // ArrayBuffer.\n              return new Uint8Array(arrayBuffer.slice(0, originalSize));\n            }\n          } finally {\n            gpuReadBuffer.destroy();\n          }\n        };\n\nclass GpuDataManagerImpl implements GpuDataManager {\n  // GPU Data ID => GPU Data ( storage buffer )\n  private storageCache: Map<GpuDataId, StorageCacheValue>;\n\n  // pending buffers for uploading ( data is unmapped )\n  private buffersForUploadingPending: GPUBuffer[];\n  // pending buffers for computing\n  private buffersPending: GPUBuffer[];\n\n  // The reusable storage buffers for computing.\n  private freeBuffers: Map<number, GPUBuffer[]>;\n\n  // The external buffers registered users for IO Binding.\n  private externalBuffers: Map<GPUBuffer, GpuDataId>;\n\n  constructor(private backend: WebGpuBackend) {\n    this.storageCache = new Map();\n    this.freeBuffers = new Map();\n    this.buffersForUploadingPending = [];\n    this.buffersPending = [];\n    this.externalBuffers = new Map();\n  }\n\n  upload(id: GpuDataId, data: Uint8Array): void {\n    const srcArrayBuffer = data.buffer;\n    const srcOffset = data.byteOffset;\n    const srcLength = data.byteLength;\n    const size = calcNormalizedBufferSize(srcLength);\n\n    // get destination gpu buffer\n    const gpuDataCache = this.storageCache.get(id);\n    if (!gpuDataCache) {\n      throw new Error('gpu data for uploading does not exist');\n    }\n    if (gpuDataCache.originalSize !== srcLength) {\n      throw new Error(`inconsistent data size. gpu data size=${gpuDataCache.originalSize}, data size=${srcLength}`);\n    }\n\n    // create gpu buffer\n    const gpuBufferForUploading = this.backend.device.createBuffer(\n        // eslint-disable-next-line no-bitwise\n        {mappedAtCreation: true, size, usage: GPUBufferUsage.MAP_WRITE | GPUBufferUsage.COPY_SRC});\n\n    // copy (upload) data\n    const arrayBuffer = gpuBufferForUploading.getMappedRange();\n    new Uint8Array(arrayBuffer).set(new Uint8Array(srcArrayBuffer, srcOffset, srcLength));\n    gpuBufferForUploading.unmap();\n\n\n    // GPU copy\n    const commandEncoder = this.backend.getCommandEncoder();\n    this.backend.endComputePass();\n    commandEncoder.copyBufferToBuffer(gpuBufferForUploading, 0, gpuDataCache.gpuData.buffer, 0, size);\n\n    LOG_DEBUG('verbose', () => `[WebGPU] GpuDataManager.upload(id=${id})`);\n\n    this.buffersForUploadingPending.push(gpuBufferForUploading);\n  }\n\n  memcpy(sourceId: GpuDataId, destinationId: GpuDataId): void {\n    // get source gpu buffer\n    const sourceGpuDataCache = this.storageCache.get(sourceId);\n    if (!sourceGpuDataCache) {\n      throw new Error('source gpu data for memcpy does not exist');\n    }\n    // get destination gpu buffer\n    const destinationGpuDataCache = this.storageCache.get(destinationId);\n    if (!destinationGpuDataCache) {\n      throw new Error('destination gpu data for memcpy does not exist');\n    }\n    if (sourceGpuDataCache.originalSize !== destinationGpuDataCache.originalSize) {\n      throw new Error('inconsistent source and destination gpu data size');\n    }\n    const size = calcNormalizedBufferSize(sourceGpuDataCache.originalSize);\n\n    // GPU copy\n    const commandEncoder = this.backend.getCommandEncoder();\n    this.backend.endComputePass();\n    commandEncoder.copyBufferToBuffer(\n        sourceGpuDataCache.gpuData.buffer, 0, destinationGpuDataCache.gpuData.buffer, 0, size);\n  }\n\n  registerExternalBuffer(buffer: GPUBuffer, originalSize: number, previousBuffer?: GPUBuffer): number {\n    let id: number|undefined;\n    if (previousBuffer) {\n      id = this.externalBuffers.get(previousBuffer);\n      if (id === undefined) {\n        throw new Error('previous buffer is not registered');\n      }\n      if (buffer === previousBuffer) {\n        LOG_DEBUG(\n            'verbose',\n            () => `[WebGPU] GpuDataManager.registerExternalBuffer(size=${originalSize}) => id=${\n                id}, buffer is the same, skip.`);\n        return id;\n      }\n      this.externalBuffers.delete(previousBuffer);\n    } else {\n      id = createNewGpuDataId();\n    }\n\n    this.storageCache.set(id, {gpuData: {id, type: GpuDataType.default, buffer}, originalSize});\n    this.externalBuffers.set(buffer, id);\n    LOG_DEBUG(\n        'verbose',\n        () => `[WebGPU] GpuDataManager.registerExternalBuffer(size=${originalSize}) => id=${id}, registered.`);\n    return id;\n  }\n\n  unregisterExternalBuffer(buffer: GPUBuffer): void {\n    const id = this.externalBuffers.get(buffer);\n    if (id !== undefined) {\n      this.storageCache.delete(id);\n      this.externalBuffers.delete(buffer);\n      LOG_DEBUG('verbose', () => `[WebGPU] GpuDataManager.unregisterExternalBuffer() => id=${id}`);\n    }\n  }\n\n  // eslint-disable-next-line no-bitwise\n  create(size: number, usage = GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST): GpuData {\n    const bufferSize = calcNormalizedBufferSize(size);\n\n    let gpuBuffer;\n    // Currently, only storage buffers are reused.\n    // eslint-disable-next-line no-bitwise\n    if ((usage & GPUBufferUsage.STORAGE) === GPUBufferUsage.STORAGE) {\n      let buffers = this.freeBuffers.get(bufferSize);\n      if (!buffers) {\n        buffers = [];\n        this.freeBuffers.set(bufferSize, buffers);\n      }\n      if (buffers.length > 0) {\n        gpuBuffer = buffers.pop() as GPUBuffer;\n      } else {\n        // create gpu buffer\n        gpuBuffer = this.backend.device.createBuffer({size: bufferSize, usage});\n      }\n    } else {\n      // create gpu buffer\n      gpuBuffer = this.backend.device.createBuffer({size: bufferSize, usage});\n    }\n\n    const gpuData = {id: createNewGpuDataId(), type: GpuDataType.default, buffer: gpuBuffer};\n    this.storageCache.set(gpuData.id, {gpuData, originalSize: size});\n\n    LOG_DEBUG('verbose', () => `[WebGPU] GpuDataManager.create(size=${size}) => id=${gpuData.id}`);\n    return gpuData;\n  }\n\n  get(id: GpuDataId): GpuData|undefined {\n    return this.storageCache.get(id)?.gpuData;\n  }\n\n  release(id: GpuDataId): number {\n    const cachedData = this.storageCache.get(id);\n    if (!cachedData) {\n      throw new Error('releasing data does not exist');\n    }\n\n    LOG_DEBUG('verbose', () => `[WebGPU] GpuDataManager.release(id=${id}), gpuDataId=${cachedData.gpuData.id}`);\n\n    this.storageCache.delete(id);\n    this.buffersPending.push(cachedData.gpuData.buffer);\n    // cachedData.gpuData.buffer.destroy();\n\n    return cachedData.originalSize;\n  }\n\n  async download(id: GpuDataId, getTargetBuffer: () => Uint8Array): Promise<void> {\n    const cachedData = this.storageCache.get(id);\n    if (!cachedData) {\n      throw new Error('data does not exist');\n    }\n\n    await downloadGpuData(this.backend, cachedData.gpuData.buffer, cachedData.originalSize, getTargetBuffer);\n  }\n\n  refreshPendingBuffers(): void {\n    for (const buffer of this.buffersForUploadingPending) {\n      // upload buffer is only useful in the session creation time. So we don't need to reuse them in session running.\n      buffer.destroy();\n    }\n    this.buffersForUploadingPending = [];\n    for (const buffer of this.buffersPending) {\n      // eslint-disable-next-line no-bitwise\n      if ((buffer.usage & GPUBufferUsage.STORAGE) === GPUBufferUsage.STORAGE) {\n        // Put the pending buffer to freeBuffers list instead of really destroying it for buffer reusing.\n        this.freeBuffers.get(buffer.size)!.push(buffer);\n      } else {\n        buffer.destroy();\n      }\n    }\n    this.buffersPending = [];\n  }\n\n  dispose() {\n    this.freeBuffers.forEach((buffers) => {\n      buffers.forEach(buffer => {\n        buffer.destroy();\n      });\n    });\n\n    this.storageCache.forEach((storage) => {\n      storage.gpuData.buffer.destroy();\n    });\n\n    this.storageCache = new Map();\n    this.freeBuffers = new Map();\n  }\n}\n\nexport const createGpuDataManager = (...args: ConstructorParameters<typeof GpuDataManagerImpl>): GpuDataManager =>\n    new GpuDataManagerImpl(...args);\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {argMax, argMin, parseArgMinMaxAttributes} from './ops/argminmax';\nimport {biasAdd} from './ops/bias-add';\nimport {biasSplitGelu} from './ops/bias-split-gelu';\nimport * as binaryOps from './ops/binary-op';\nimport {concat, parseConcatAttributes} from './ops/concat';\nimport {conv, parseConvAttributes} from './ops/conv';\nimport {convTranspose, parseConvTransposeAttributes} from './ops/conv-transpose';\nimport {einsum, parseEinsumAttributes} from './ops/einsum';\nimport {expand} from './ops/expand';\nimport {gather, parseGatherAttributes} from './ops/gather';\nimport {gatherElements, parseGatherElementsAttributes} from './ops/gather-elements';\nimport {gemm, parseGemmAttributes} from './ops/gemm';\nimport {instanceNorm, parseInstanceNormAttributes} from './ops/instance-norm';\nimport {layerNorm, parseLayerNormAttributes} from './ops/layer-norm';\nimport {matMul} from './ops/matmul';\nimport {pad, parsePadAttributes} from './ops/pad';\nimport * as pool from './ops/pool';\nimport {range} from './ops/range';\nimport {parseReduceAttributes, reduceL1, reduceL2, reduceLogSum, reduceLogSumExp, reduceMax, reduceMean, reduceMin, reduceProd, reduceSum, reduceSumSquare} from './ops/reduce';\nimport {parseResizeAttributes, resize} from './ops/resize';\nimport {parseSkipLayerNormAttributes, skipLayerNorm} from './ops/skip-layer-norm';\nimport {parseSliceAttributes, slice} from './ops/slice';\nimport {parseSoftmaxAttributes, softmax} from './ops/softmax';\nimport {parseSplitAttributes, split} from './ops/split';\nimport {tile} from './ops/tile';\nimport {parseTransposeAttributes, transpose} from './ops/transpose';\nimport * as unaryOps from './ops/unary-op';\nimport {where} from './ops/where';\nimport {ComputeContext} from './types';\n\nexport type RunFunction = (context: ComputeContext, attribute?: unknown) => void;\nexport type ParseAttributeFunction = (attributeRaw: unknown) => unknown;\nexport type OperatorImplementation = [RunFunction]|[RunFunction, ParseAttributeFunction];\n\nexport const WEBGPU_OP_RESOLVE_RULES: Map<string, OperatorImplementation> = new Map([\n  ['Abs', [unaryOps.abs]],\n  ['Acos', [unaryOps.acos]],\n  ['Acosh', [unaryOps.acosh]],\n  ['Add', [binaryOps.add]],\n  ['ArgMax', [argMax, parseArgMinMaxAttributes]],\n  ['ArgMin', [argMin, parseArgMinMaxAttributes]],\n  ['Asin', [unaryOps.asin]],\n  ['Asinh', [unaryOps.asinh]],\n  ['Atan', [unaryOps.atan]],\n  ['Atanh', [unaryOps.atanh]],\n  // TODO: support new attributes for AveragePool-10\n  ['AveragePool', [pool.averagePool, pool.parseAveragePoolAttributes]],\n  ['BiasAdd', [biasAdd]],\n  ['BiasSplitGelu', [biasSplitGelu]],\n  ['Cast', [unaryOps.cast, unaryOps.parseCastAttributes]],\n  ['Ceil', [unaryOps.ceil]],\n  ['ClipV10', [unaryOps.clipV10]],\n  ['Clip', [unaryOps.clip]],\n  ['Concat', [concat, parseConcatAttributes]],\n  ['Conv', [conv, parseConvAttributes]],\n  ['ConvTranspose', [convTranspose, parseConvTransposeAttributes]],\n  ['Cos', [unaryOps.cos]],\n  ['Cosh', [unaryOps.cosh]],\n  ['Div', [binaryOps.div]],\n  ['Einsum', [einsum, parseEinsumAttributes]],\n  ['Elu', [unaryOps.elu, unaryOps.parseAlphaAttributes]],\n  ['Equal', [binaryOps.equal]],\n  ['Erf', [unaryOps.erf]],\n  ['Exp', [unaryOps.exp]],\n  ['Expand', [expand]],\n  ['Floor', [unaryOps.floor]],\n  ['Gather', [gather, parseGatherAttributes]],\n  ['GatherElements', [gatherElements, parseGatherElementsAttributes]],\n  ['Gelu', [unaryOps.gelu]],\n  ['Gemm', [gemm, parseGemmAttributes]],\n  ['GlobalAveragePool', [pool.globalAveragePool, pool.parseGlobalAveragePoolAttributes]],\n  ['GlobalMaxPool', [pool.globalMaxPool, pool.parseGlobalMaxPoolAttributes]],\n  ['Greater', [binaryOps.greater]],\n  ['GreaterOrEqual', [binaryOps.greaterOrEqual]],\n  ['InstanceNormalization', [instanceNorm, parseInstanceNormAttributes]],\n  ['LayerNormalization', [layerNorm, parseLayerNormAttributes]],\n  ['LeakyRelu', [unaryOps.leakyRelu, unaryOps.parseAlphaAttributes]],\n  ['Less', [binaryOps.less]],\n  ['LessOrEqual', [binaryOps.lessOrEqual]],\n  ['Log', [unaryOps.log]],\n  ['MatMul', [matMul]],\n  // TODO: support new attributes for MaxPool-8 and MaxPool-10\n  ['MaxPool', [pool.maxPool, pool.parseMaxPoolAttributes]],\n  ['Mul', [binaryOps.mul]],\n  ['Neg', [unaryOps.neg]],\n  ['Not', [unaryOps.not]],\n  ['Pad', [pad, parsePadAttributes]],\n  ['Pow', [binaryOps.pow]],\n  ['Range', [range]],\n  ['Reciprocal', [unaryOps.reciprocal]],\n  ['ReduceMin', [reduceMin, parseReduceAttributes]],\n  ['ReduceMean', [reduceMean, parseReduceAttributes]],\n  ['ReduceMax', [reduceMax, parseReduceAttributes]],\n  ['ReduceSum', [reduceSum, parseReduceAttributes]],\n  ['ReduceProd', [reduceProd, parseReduceAttributes]],\n  ['ReduceL1', [reduceL1, parseReduceAttributes]],\n  ['ReduceL2', [reduceL2, parseReduceAttributes]],\n  ['ReduceLogSum', [reduceLogSum, parseReduceAttributes]],\n  ['ReduceLogSumExp', [reduceLogSumExp, parseReduceAttributes]],\n  ['ReduceSumSquare', [reduceSumSquare, parseReduceAttributes]],\n  ['Relu', [unaryOps.relu]],\n  ['Resize', [resize, parseResizeAttributes]],\n  ['Sigmoid', [unaryOps.sigmoid]],\n  ['Sin', [unaryOps.sin]],\n  ['Sinh', [unaryOps.sinh]],\n  ['Slice', [slice, parseSliceAttributes]],\n  ['SkipLayerNormalization', [skipLayerNorm, parseSkipLayerNormAttributes]],\n  ['Split', [split, parseSplitAttributes]],\n  ['Sqrt', [unaryOps.sqrt]],\n  ['Softmax', [softmax, parseSoftmaxAttributes]],\n  ['Sub', [binaryOps.sub]],\n  ['Tan', [unaryOps.tan]],\n  ['Tanh', [unaryOps.tanh]],\n  ['ThresholdedRelu', [unaryOps.thresholdedRelu, unaryOps.parseAlphaAttributes]],\n  ['Tile', [tile]],\n  ['Transpose', [transpose, parseTransposeAttributes]],\n  ['Where', [where]],\n]);\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// sampled from [@tensorflow/tfjs] tfjs-backend-webgpu/src/activation_util.ts\n//\n// modified to fit the needs of the project\n\nexport declare type Activation = 'linear' | 'relu' | 'prelu' | 'elu' | 'relu6' | 'leakyrelu' | 'sigmoid' | 'gelu';\n\nexport const typeSnippet = (component: number, dataType: string) => {\n  switch (component) {\n    case 1:\n      return dataType;\n    case 2:\n      return `vec2<${dataType}>`;\n    case 3:\n      return `vec3<${dataType}>`;\n    case 4:\n      return `vec4<${dataType}>`;\n    default:\n      throw new Error(`${component}-component is not supported.`);\n  }\n};\n\nexport const activationFnSnippet =\n    (activation?: Activation, _hasPreluActivationWeights = false, _packed = false, _coordsLength = 3): string => {\n      if (!activation) {\n        return '';\n      }\n\n      // TODO: add implementations\n      return '';\n    };\n\nexport const biasActivationSnippet = (hasBias: boolean, activation?: Activation): string => `\n      ${hasBias ? 'value = value + getBiasByOutputCoords(coords);' : ''}\n      ${activation ? 'value = activation(value, coords);' : ''}\n      `;\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// sampled from [@tensorflow/tfjs] tfjs-backend-webgpu/src/conv2d_mm_webgpu.ts\n//\n// modified to fit the needs of the project\n\nimport {LOG_DEBUG} from '../../../log';\nimport {TensorView} from '../../../tensor-view';\nimport {ShapeUtil} from '../../../util';\nimport {GpuDataType, ProgramInfo, ProgramMetadata} from '../../types';\nimport {tensorTypeToWsglStorageType} from '../common';\nimport {ConvAttributes} from '../conv';\n\nimport {Activation, activationFnSnippet, biasActivationSnippet, typeSnippet} from './activation_util';\nimport {utilFunctions} from './conv_util';\nimport {makeMatMulPackedSource, makeMatMulPackedVec4Source} from './matmul_packed_webgpu';\n\nconst conv2dCommonSnippet =\n    (isChannelsLast: boolean, fitAOuter: boolean, fitBOuter: boolean, fitInner: boolean, addBias = false,\n     activation?: Activation, hasPreluActivationWeights = false, innerElementSizeX = 4, innerElementSizeW = 4,\n     innerElementSize = 4, dataType = 'f32'): string => {\n      const getXSnippet = (innerElementSize: number) => {\n        switch (innerElementSize) {\n          case 1:\n            return 'resData = x[xIndex];';\n          case 3:\n            return `resData = vec3<${dataType}>(x[xIndex], x[xIndex + 1], x[xIndex + 2]);`;\n          case 4:\n            return 'resData = x[xIndex / 4];';\n          default:\n            throw new Error(`innerElementSize ${innerElementSize} is not supported.`);\n        }\n      };\n      const getWSnippet = (innerElementSize: number) => {\n        switch (innerElementSize) {\n          case 1:\n            return 'return w[row * wShape[3] + colIn];';\n          case 4:\n            return 'return w[row * wShape[3] / 4 + colIn];';\n          default:\n            throw new Error(`innerElementSize ${innerElementSize} is not supported.`);\n        }\n      };\n      const coordASnippet = isChannelsLast ? `\n    let coord = vec4<i32>(batch, xRow, xCol, xCh);\n    ` :\n                                             `\n    let coord = vec4<i32>(batch, xCh, xRow, xCol);\n    `;\n\n      const coordResSnippet = isChannelsLast ? `\n    let coords = vec4<i32>(\n      batch,\n      row / outWidth,\n      row % outWidth,\n      col);\n    ` :\n                                               `\n    let coords = vec4<i32>(\n      batch,\n      row,\n      col / outWidth,\n      col % outWidth);\n    `;\n\n      const xHeight = isChannelsLast ? 'xShape[1]' : 'xShape[2]';\n      const xWidth = isChannelsLast ? 'xShape[2]' : 'xShape[3]';\n      const row = isChannelsLast ? 'row' : 'col';\n      const col = isChannelsLast ? 'col' : 'row';\n      const readXSnippet = `\n    let inChannels = wShape[2];\n    let outWidth = ${isChannelsLast ? 'outShape[2]' : 'outShape[3]'};\n    let outRow = ${row} / outWidth;\n    let outCol = ${row} % outWidth;\n\n    let WRow = ${col} / (filterDims[1] * inChannels);\n    let WCol = ${col} / inChannels % filterDims[1];\n    let xRow = outRow * stride[0] + dilation[0] * WRow - pad[0];\n    let xCol = outCol * stride[1] + dilation[1] * WCol - pad[1];\n    let xCh = ${col} % inChannels;\n    var resData = ${typeSnippet(innerElementSizeX, dataType)}(0.0);\n    // The bounds checking is always needed since we use it to pad zero for\n    // the 'same' padding type.\n    if (xRow >= 0 && xRow < ${xHeight} && xCol >= 0 && xCol < ${xWidth}) {\n      ${coordASnippet}\n      let xIndex = getIndexFromCoords4D(coord, xShape);\n      ${getXSnippet(innerElementSizeX)}\n    }\n    return resData;`;\n\n      const sampleX = isChannelsLast ? (fitAOuter && fitInner ? `\n    let col = colIn * ${innerElementSizeX};\n    ${readXSnippet}` :\n                                                                `\n    let col = colIn * ${innerElementSizeX};\n    if (row < dimAOuter && col < dimInner) {\n      ${readXSnippet}\n    }\n    return ${typeSnippet(innerElementSizeX, dataType)}(0.0);`) :\n                                       (fitInner && fitBOuter ? `\n    let col = colIn * ${innerElementSizeX};\n    ${readXSnippet}` :\n                                                                `\n    let col = colIn * ${innerElementSizeX};\n    if (row < dimInner && col < dimBOuter) {\n      ${readXSnippet}\n    }\n    return ${typeSnippet(innerElementSizeX, dataType)}(0.0);`);\n\n      const sampleW = `${getWSnippet(innerElementSizeW)}`;\n\n      const resType = typeSnippet(innerElementSize, dataType);\n      const aType =\n          isChannelsLast ? typeSnippet(innerElementSizeX, dataType) : typeSnippet(innerElementSizeW, dataType);\n      const bType =\n          isChannelsLast ? typeSnippet(innerElementSizeW, dataType) : typeSnippet(innerElementSizeX, dataType);\n      const userCode = `\n    ${activationFnSnippet(activation, hasPreluActivationWeights, innerElementSize === 4, 4)}\n    fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${aType} {\n      ${isChannelsLast ? sampleX : sampleW}\n    }\n\n    fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${bType} {\n      ${isChannelsLast ? sampleW : sampleX}\n    }\n\n    fn mm_write(batch: i32, row : i32, colIn : i32, valueIn : ${resType}) {\n      let col = colIn * ${innerElementSize};\n      if (row < dimAOuter && col < dimBOuter)\n      {\n      var value = valueIn;\n      let outWidth = ${isChannelsLast ? 'outShape[2]' : 'outShape[3]'};\n      ${coordResSnippet}\n      ${biasActivationSnippet(addBias, activation)}\n      setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);\n      }\n    }`;\n      return userCode;\n    };\n\nexport const createConv2DMatMulProgramInfo =\n    (inputs: readonly TensorView[], metadata: ProgramMetadata, attributes: ConvAttributes,\n     outputShape: readonly number[], dimAOuter: number, dimBOuter: number, dimInner: number, hasBias: boolean,\n     sequentialAccessByThreads: boolean): ProgramInfo => {\n      const isChannelsLast = attributes.format === 'NHWC';\n      const inChannels = isChannelsLast ? inputs[0].dims[3] : inputs[0].dims[1];\n      const batchSize = outputShape[0];\n      const outWidth = isChannelsLast ? outputShape[2] : outputShape[3];\n      const outHeight = isChannelsLast ? outputShape[1] : outputShape[2];\n      const outChannels = isChannelsLast ? outputShape[3] : outputShape[1];\n      // TODO: enable vec4 for NCHW\n      const isVec4 = isChannelsLast && (inChannels % 4 === 0 || inChannels % 3 === 0) && outChannels % 4 === 0;\n\n      // TODO: fine tune size\n      const dispatchX = isChannelsLast ? outChannels : outWidth * outHeight;\n      const dispatchY = isChannelsLast ? outWidth * outHeight : outChannels;\n      const workGroupSize: [number, number, number] = [8, 8, 1];\n      const elementsPerThread = dimAOuter <= 8 ? [4, 1, 1] : [4, 4, 1];\n      const dispatch = [\n        Math.ceil(dispatchX / workGroupSize[0] / elementsPerThread[0]),\n        Math.ceil(dispatchY / workGroupSize[1] / elementsPerThread[1]),\n        Math.ceil(batchSize / workGroupSize[2] / elementsPerThread[2])\n      ];\n\n      LOG_DEBUG('verbose', () => `[conv2d_mm_webgpu] dispatch = ${dispatch}`);\n\n      const innerElementSize = isVec4 ? (isChannelsLast && inChannels % 4 !== 0 ? 3 : 4) : elementsPerThread[0];\n\n      const tileAOuter = workGroupSize[1] * elementsPerThread[1];\n      const tileBOuter = workGroupSize[0] * elementsPerThread[0];\n      const tileInner = Math.max(workGroupSize[0] * innerElementSize, workGroupSize[1]);\n\n      const fitAOuter = dimAOuter % tileAOuter === 0;\n      const fitBOuter = dimBOuter % tileBOuter === 0;\n      const fitInner = dimInner % tileInner === 0;\n\n      const elementsSize = isVec4 ? [innerElementSize, 4, 4] : [1, 1, 1];\n      const t = tensorTypeToWsglStorageType(inputs[0].dataType);\n\n      const declareInputs = [\n        `@group(0) @binding(0) var<storage, read> x: array<${isVec4 && innerElementSize === 4 ? `vec4<${t}>` : t}>;`,\n        `@group(0) @binding(1) var<storage, read> w: array<${isVec4 ? `vec4<${t}>` : t}>;`\n      ];\n      let declareFunctions = `\n      fn setOutputAtIndex(flatIndex : i32, value : ${isVec4 ? `vec4<${t}>` : t}) {\n        result[flatIndex] = ${isVec4 ? `vec4<${t}>` : t}(value);\n      }\n      fn setOutputAtCoords(d0 : i32, d1 : i32, d2 : i32, d3 : i32, value : ${isVec4 ? `vec4<${t}>` : t}) {\n        let flatIndex = getOutputIndexFromCoords(vec4<i32>(d0, d1, d2, d3));\n        setOutputAtIndex(flatIndex ${isVec4 ? '/ 4' : ''}, value);\n      }`;\n      if (hasBias) {\n        declareInputs.push(`@group(0) @binding(2) var<storage, read> bias: array<${isVec4 ? `vec4<${t}>` : t}>;`);\n        declareFunctions += `\n        fn getBiasByOutputCoords(coords : vec4<i32>) -> ${isVec4 ? `vec4<${t}>` : t} {\n          return bias[coords.${isChannelsLast ? 'w' : 'y'}${isVec4 ? '/ 4' : ''}];\n        }`;\n      }\n\n      return {\n        ...metadata,\n        outputs: [{dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default}],\n        dispatchGroup: () => ({x: dispatch[0], y: dispatch[1], z: dispatch[2]}),\n        getShaderSource: () => `\n        ${utilFunctions}\n        //struct Uniforms { xShape : vec4<i32>, wShape : vec4<i32>, outShape : vec4<i32>,\n        //  outShapeStrides: vec3<i32>, filterDims : vec2<i32>, pad : vec2<i32>, stride : vec2<i32>,\n        //  dilation : vec2<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32 };\n        ${declareInputs.join('')}\n        @group(0) @binding(${declareInputs.length}) var<storage, read_write> result: array<${\n            isVec4 ? `vec4<${t}>` : t}>;\n        //@group(0) @binding(${declareInputs.length + 1}) var<uniform> uniforms: Uniforms;\n\n        const xShape : vec4<i32> = vec4<i32>(${inputs[0].dims.join(',')});\n        const wShape : vec4<i32> = vec4<i32>(${inputs[1].dims.join(',')});\n        const outShape : vec4<i32> = vec4<i32>(${outputShape.join(',')});\n        const outShapeStrides : vec3<i32> = vec3<i32>(${ShapeUtil.computeStrides(outputShape).slice(0, 3).join(',')});\n        const filterDims : vec2<i32> = vec2<i32>(${attributes.kernelShape[0]}, ${attributes.kernelShape[1]});\n        const pad : vec2<i32> = vec2<i32>(${attributes.pads[0]}, ${attributes.pads[1]});\n        const stride : vec2<i32> = vec2<i32>(${attributes.strides[0]}, ${attributes.strides[1]});\n        const dilation : vec2<i32> = vec2<i32>(${attributes.dilations[0]}, ${attributes.dilations[1]});\n        const dimAOuter : i32 = ${dimAOuter};\n        const dimBOuter : i32 = ${dimBOuter};\n        const dimInner : i32 = ${dimInner};\n        ${declareFunctions}\n        ${\n            conv2dCommonSnippet(\n                isChannelsLast, fitAOuter, fitBOuter, fitInner, hasBias, undefined, false, elementsSize[0],\n                elementsSize[1], elementsSize[2], t)}\n            ${\n            isVec4 ?\n                makeMatMulPackedVec4Source(elementsPerThread, workGroupSize, t, undefined, !isChannelsLast, tileInner) :\n                makeMatMulPackedSource(\n                    elementsPerThread, workGroupSize, t, undefined, !isChannelsLast, tileInner, false, undefined,\n                    sequentialAccessByThreads)}`\n      };\n    };\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// sampled from [@tensorflow/tfjs] tfjs-backend-webgpu/src/conv_backprop_mm_webgpu.ts\n//\n// modified to fit the needs of the project\n\nimport {LOG_DEBUG} from '../../../log';\nimport {TensorView} from '../../../tensor-view';\nimport {ShapeUtil} from '../../../util';\nimport {GpuDataType, ProgramInfo, ProgramMetadata} from '../../types';\nimport {ConvTransposeAttributes} from '../conv-transpose';\n\nimport {Activation, activationFnSnippet, biasActivationSnippet, typeSnippet} from './activation_util';\nimport {utilFunctions} from './conv_util';\nimport {makeMatMulPackedSource, makeMatMulPackedVec4Source} from './matmul_packed_webgpu';\n\nconst conv2dTransposeCommonSnippet =\n    (isChannelsLast: boolean, addBias = false, activation?: Activation, hasPreluActivationWeights = false,\n     innerElementSize = 4): string => {\n      const type = typeSnippet(innerElementSize, 'f32');\n      const getWSnippet = (innerElementSize: number) => {\n        switch (innerElementSize) {\n          case 1:\n            return 'return W[getIndexFromCoords4D(coord, wShape)];';\n          case 4:\n            return `\n            let coord1 = vec4<i32>(coordX, coordY, col + 1, rowInner);\n            let coord2 = vec4<i32>(coordX, coordY, col + 2, rowInner);\n            let coord3 = vec4<i32>(coordX, coordY, col + 3, rowInner);\n            let v0 = W[getIndexFromCoords4D(coord, wShape)];\n            let v1 = W[getIndexFromCoords4D(coord1, wShape)];\n            let v2 = W[getIndexFromCoords4D(coord2, wShape)];\n            let v3 = W[getIndexFromCoords4D(coord3, wShape)];\n            return vec4<f32>(v0, v1, v2, v3);\n            `;\n          default:\n            throw new Error(`innerElementSize ${innerElementSize} is not supported.`);\n        }\n      };\n      const coordASnippet = isChannelsLast ? `\n      let coord = vec4<i32>(batch, iXR, iXC, xCh);\n      ` :\n                                             `\n      let coord = vec4<i32>(batch, xCh, iXR, iXC);\n      `;\n\n      const coordResSnippet = isChannelsLast ? `\n    let coords = vec4<i32>(\n      batch,\n      row / outWidth,\n      row % outWidth,\n      col);\n    ` :\n                                               `\n    let coords = vec4<i32>(\n      batch,\n      row,\n      col / outWidth,\n      col % outWidth);\n    `;\n\n      const xHeight = isChannelsLast ? 'outBackprop[1]' : 'outBackprop[2]';\n      const xWidth = isChannelsLast ? 'outBackprop[2]' : 'outBackprop[3]';\n      const row = isChannelsLast ? 'row' : 'col';\n      const col = isChannelsLast ? 'col' : 'row';\n\n      const readASnippet = `\n      let inChannels = ${isChannelsLast ? 'outBackprop[3]' : 'outBackprop[1]'};\n      let outWidth = ${isChannelsLast ? 'outShape[2]' : 'outShape[3]'};\n      let outRow = ${row} / outWidth;\n      let outCol = ${row} % outWidth;\n\n      let WRow = ${col} / (filterDims[1] * inChannels);\n      let WCol = ${col} / inChannels % filterDims[1];\n      let xR = f32(outRow - pads[0] + dilation[0] * WRow) / f32(strides[0]);\n      let xC = f32(outCol - pads[1] + dilation[1] * WCol) / f32(strides[1]);\n      if (xR < 0.0 || xR >= f32(${xHeight}) || fract(xR) > 0.0) {\n        return ${type}(0.0);\n      }\n      if (xC < 0.0 || xC >= f32(${xWidth}) || fract(xC) > 0.0) {\n        return ${type}(0.0);\n      }\n      let iXR = i32(xR);\n      let iXC = i32(xC);\n      let xCh = ${col} % inChannels;\n      ${coordASnippet}\n      return x[getIndexFromCoords4D(coord, xShape)/${innerElementSize}];`;\n\n      const sampleA = isChannelsLast ? `\n      let col = colIn * ${innerElementSize};\n      if (row < dimAOuter && col < dimInner) {\n        ${readASnippet}\n      }\n      return ${type}(0.0);` :\n                                       `\n      let col = colIn * ${innerElementSize};\n      if (row < dimInner && col < dimBOuter) {\n        ${readASnippet}\n      }\n      return ${type}(0.0);`;\n\n      const sampleW = `\n      let col = colIn * ${innerElementSize};\n      let inChannels = ${isChannelsLast ? 'outBackprop[3]' : 'outBackprop[1]'};\n      let coordX = filterDims.x - 1 - row / (filterDims[1] * inChannels);\n      let coordY = filterDims.y - 1 - (row / inChannels) % filterDims[1];\n      if (${\n          isChannelsLast ? 'row < dimInner && col < dimBOuter' :\n                           'row < dimInner && col < dimAOuter'}  && coordX >= 0 && coordY >= 0) {\n        let rowInner = row % inChannels;\n        let coord = vec4<i32>(coordX, coordY, col, rowInner);\n        ${getWSnippet(innerElementSize)}\n      }\n      return ${type}(0.0);\n      `;\n\n\n      const userCode = `\n  ${activationFnSnippet(activation, hasPreluActivationWeights, innerElementSize === 4, 4)}\n  fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${type} {\n    ${isChannelsLast ? sampleA : sampleW}\n  }\n\n  fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${type} {\n    ${isChannelsLast ? sampleW : sampleA}\n  }\n\n  fn mm_write(batch: i32, row : i32, colIn : i32, valueInput : ${type}) {\n    let col = colIn * ${innerElementSize};\n    if (row < dimAOuter && col < dimBOuter) {\n      var value = valueInput;\n      let outWidth = ${isChannelsLast ? 'outShape[2]' : 'outShape[3]'};\n      ${coordResSnippet}\n      ${biasActivationSnippet(addBias, activation)}\n      result[getIndexFromCoords4D(coords, outShape)/${innerElementSize}] = value;\n    }\n  }`;\n      return userCode;\n    };\n\nexport const createConv2DTransposeMatMulProgramInfo =\n    (inputs: readonly TensorView[], metadata: ProgramMetadata, attributes: ConvTransposeAttributes,\n     outputShape: readonly number[], dimAOuter: number, dimBOuter: number, dimInner: number, hasBias: boolean,\n     sequentialAccessByThreads: boolean): ProgramInfo => {\n      const isChannelsLast = attributes.format === 'NHWC';\n      const inChannels = isChannelsLast ? inputs[0].dims[3] : inputs[0].dims[1];\n      const batchSize = outputShape[0];\n      const outWidth = isChannelsLast ? outputShape[2] : outputShape[3];\n      const outHeight = isChannelsLast ? outputShape[1] : outputShape[2];\n      const outChannels = isChannelsLast ? outputShape[3] : outputShape[1];\n      const isVec4 =\n          isChannelsLast ? inChannels % 4 === 0 && outChannels % 4 === 0 : outWidth % 4 === 0 && outChannels % 4 === 0;\n\n      // TODO: fine tune size\n      const dispatchX = isChannelsLast ? outChannels : outWidth * outHeight;\n      const dispatchY = isChannelsLast ? outWidth * outHeight : outChannels;\n      const workGroupSize: [number, number, number] = isVec4 ?\n          [8, 8, 1] :\n          [(dispatchX <= 4 || dispatchY <= 4) ? 4 : 16, dispatchX > 4 && dispatchY <= 4 ? 4 : 16, 1];\n      const elementsPerThread =\n          isVec4 ? [4, 4, 1] : [dispatchX <= 4 ? 1 : 4, dispatchX > 4 && dispatchY <= 4 ? 1 : 4, 1];\n      const dispatch = [\n        Math.ceil(dispatchX / workGroupSize[0] / elementsPerThread[0]),\n        Math.ceil(dispatchY / workGroupSize[1] / elementsPerThread[1]),\n        Math.ceil(batchSize / workGroupSize[2] / elementsPerThread[2])\n      ];\n\n      LOG_DEBUG('verbose', () => `[conv_backprop_mm_webgpu] dispatch = ${dispatch}`);\n\n      const innerElementSize = isVec4 ? 4 : 1;\n      const tileInner = Math.max(workGroupSize[0] * innerElementSize, workGroupSize[1]);\n\n\n      const declareInputs = [\n        `@group(0) @binding(0) var<storage, read> x: array<${isVec4 ? 'vec4<f32>' : 'f32'}>;`,\n        '@group(0) @binding(1) var<storage, read> W: array<f32>;'\n      ];\n      let declareFunctions = '';\n      if (hasBias) {\n        declareInputs.push(`@group(0) @binding(2) var<storage, read> bias: array<${isVec4 ? 'vec4<f32>' : 'f32'}>;`);\n        declareFunctions += `\n        fn getBiasByOutputCoords(coords : vec4<i32>) -> ${isVec4 ? 'vec4<f32>' : 'f32'} {\n          return bias[coords.${isChannelsLast ? 'w' : 'y'}${isVec4 ? '/ 4' : ''}];\n        }`;\n      }\n      return {\n        ...metadata,\n        outputs: [{dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default}],\n        dispatchGroup: () => ({x: dispatch[0], y: dispatch[1], z: dispatch[2]}),\n        getShaderSource: () => `\n        ${utilFunctions}\n        ${declareInputs.join('\\n')}\n        @group(0) @binding(${declareInputs.length}) var<storage, read_write> result: array<${\n            isVec4 ? 'vec4<f32>' : 'f32'}>;\n        const outBackprop : vec4<i32> = vec4<i32>(${inputs[0].dims.join(',')});\n        const xShape : vec4<i32> = vec4<i32>(${inputs[0].dims.join(',')});\n        const wShape : vec4<i32> = vec4<i32>(${inputs[1].dims.join(',')});\n        const outShape : vec4<i32> = vec4<i32>(${outputShape.join(',')});\n        const outShapeStrides : vec3<i32> = vec3<i32>(${ShapeUtil.computeStrides(outputShape).slice(0, 3).join(',')});\n        const filterDims : vec2<i32> = vec2<i32>(${attributes.kernelShape[isChannelsLast ? 1 : 2]}, ${\n            attributes.kernelShape[isChannelsLast ? 2 : 3]});\n        const effectiveFilterDims : vec2<i32> = filterDims + vec2<i32>(\n              ${\n            attributes.dilations[0] <= 1 ?\n                0 :\n                (attributes.kernelShape[isChannelsLast ? 1 : 2] - 1) * (attributes.dilations[0] - 1)},\n              ${\n            attributes.dilations[1] <= 1 ?\n                0 :\n                (attributes.kernelShape[isChannelsLast ? 2 : 3] - 1) * (attributes.dilations[1] - 1)});\n        const pads : vec2<i32> = vec2<i32>(i32(effectiveFilterDims[0]) - 1 - (${\n            attributes.pads[0] + attributes.pads[2]})/2,\n                                         i32(effectiveFilterDims[1]) - 1 - (${\n            attributes.pads[1] + attributes.pads[3]})/2);\n        const strides : vec2<i32> = vec2<i32>(${attributes.strides[0]}, ${attributes.strides[1]});\n        const dilation : vec2<i32> = vec2<i32>(${attributes.dilations[0]}, ${attributes.dilations[1]});\n        const dimAOuter : i32 = ${dimAOuter};\n        const dimBOuter : i32 = ${dimBOuter};\n        const dimInner : i32 = ${dimInner};\n        ${declareFunctions}\n        ${conv2dTransposeCommonSnippet(isChannelsLast, hasBias, undefined, false, innerElementSize)}\n        ${\n            isVec4 ? makeMatMulPackedVec4Source(\n                         elementsPerThread, workGroupSize, 'f32', undefined, !isChannelsLast, tileInner) :\n                     makeMatMulPackedSource(\n                         elementsPerThread, workGroupSize, 'f32', undefined, !isChannelsLast, tileInner, false,\n                         undefined, sequentialAccessByThreads)}`\n      };\n    };\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// sampled from [@tensorflow/tfjs] tfjs-backend-webgpu/src/conv_backprop_webgpu.ts\n\nimport {LOG_DEBUG} from '../../../log';\nimport {TensorView} from '../../../tensor-view';\nimport {ShapeUtil} from '../../../util';\nimport {GpuDataType, ProgramInfo, ProgramMetadata} from '../../types';\nimport {inputVariable, outputVariable, ShaderHelper, tensorTypeToWsglStorageType} from '../common';\nimport {ConvTransposeAttributes} from '../conv-transpose';\n\nconst createConvTranspose2DOpProgramShaderSource =\n    (shaderHelper: ShaderHelper, inputs: readonly TensorView[], attributes: ConvTransposeAttributes,\n     outputShape: readonly number[], hasBias: boolean, is1DimensionDispatch: boolean, isVec4 = false,\n     dataType: string): string => {\n      const isChannelsLast = attributes.format === 'NHWC';\n      const rowDim = isChannelsLast ? 1 : 2;\n      const colDim = isChannelsLast ? 2 : 3;\n      const channelDim = isChannelsLast ? 3 : 1;\n      const outputSize = ShapeUtil.size(outputShape);\n      const workPerThread = isVec4 ? 2 : 1;\n      const group = attributes.group;\n      const wShape = inputs[1].dims;\n      const inputChannelsPerGroup = wShape[0] / group;\n      const outputChannelsPerGroup = wShape[1];\n\n      let declareFunctions = `\n  fn setOutputAtIndex(flatIndex : u32, value : ${isVec4 ? `vec4<${dataType}>` : dataType}) {\n    result[flatIndex] = ${isVec4 ? `vec4<${dataType}>` : dataType}(value);\n  }`;\n      if (hasBias) {\n        declareFunctions += `\n    fn getBiasByOutputCoords(coords : vec4<u32>) -> ${isVec4 ? `vec4<${dataType}>` : dataType} {\n      return bias[coords.${isChannelsLast ? 'w' : 'y'}${isVec4 ? '/ 4' : ''}];\n    }`;\n      }\n      const components = isVec4 ? 4 : 1;\n      const w = inputVariable('W', inputs[1].dataType, inputs[1].dims, components);\n      const dy = inputVariable('Dy', inputs[0].dataType, inputs[0].dims, components);\n      const inputVariables = [dy, w];\n      if (hasBias) {\n        inputVariables.push(inputVariable('bias', inputs[2].dataType, [outputShape[channelDim]], components));\n      }\n      const output = outputVariable('result', inputs[0].dataType, outputShape, components);\n      const codeSnippet4 = `{\n        let batch: u32 = ${is1DimensionDispatch ? 'global_id.z' : 'workgroup_id.z'} / outShape[1];\n        let r = ${is1DimensionDispatch ? 'global_id.z' : 'workgroup_id.z'} % outShape[1];\n        let c = ${is1DimensionDispatch ? 'global_id.y' : 'workgroup_id.y'} * ${workPerThread};\n        let d1: u32 = ${is1DimensionDispatch ? 'global_id.x' : 'workgroup_id.x'} * 4;\n\n        let dyCorner = vec2<i32>(i32(r), i32(c)) - vec2<i32>(pads);\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        var dotProd: array<vec4<${dataType}>, ${workPerThread}>;\n        for (var i = 0; i < ${workPerThread}; i++) {\n          dotProd[i] = vec4<${dataType}>(0.0);\n        }\n        for (var wR: u32 = 0; wR < filterDims[0]; wR = wR + 1) {\n          var dyR = (${dataType}(dyCorner.x) + ${dataType}(wR)) / ${dataType}(strides.x);\n          let wRPerm = filterDims[0] - 1 - wR;\n          if (dyR < 0.0 || dyR >= ${dataType}(outBackprop[1]) ||\n              fract(dyR) > 0.0 || wRPerm < 0) {\n            continue;\n          }\n          let idyR: u32 = u32(dyR);\n\n          for (var wC: u32 = 0; wC < filterDims[1]; wC = wC + 1) {\n            let dyC = (${dataType}(dyCorner.y) + ${dataType}(wC)) / ${dataType}(strides.y);\n            let dyC2 = (${dataType}(dyCorner.y) + 1.0 + ${dataType}(wC)) / ${dataType}(strides.y);\n            let wCPerm = filterDims[1] - 1 - wC;\n            if (wCPerm < 0) {\n              continue;\n            }\n            var bDyCVal = true;\n            var bDyCVal2 = true;\n            if (dyC < 0.0 || dyC >= ${dataType}(outBackprop[2]) ||\n                fract(dyC) > 0.0) {\n              bDyCVal = false;\n            }\n            if (dyC2 < 0.0 || dyC2 >= ${dataType}(outBackprop[2]) ||\n                fract(dyC2) > 0.0) {\n              bDyCVal2 = false;\n            }\n\n            let idyC: u32 = u32(dyC);\n            let idyC2: u32 = u32(dyC2);\n            if (bDyCVal && bDyCVal2) {\n              let d2Length = outBackprop[3];\n              for (var d2 :u32 = 0; d2 < d2Length; d2 = d2 + 4) {\n                let wValue0 = ${w.get('u32(wRPerm)', 'u32(wCPerm)', 'd1', 'd2')};\n                let wValue1 = ${w.get('u32(wRPerm)', 'u32(wCPerm)', 'd1 + 1', 'd2')};\n                let wValue2 = ${w.get('u32(wRPerm)', 'u32(wCPerm)', 'd1 + 2', 'd2')};\n                let wValue3 = ${w.get('u32(wRPerm)', 'u32(wCPerm)', 'd1 + 3', 'd2')};\n\n                var xValue = ${dy.get('batch', 'idyR', 'idyC', 'd2')};\n                let tmpval = vec4<${dataType}>(dot(xValue, wValue0),\n                                      dot(xValue, wValue1),\n                                      dot(xValue, wValue2),\n                                      dot(xValue, wValue3));\n                dotProd[0] = dotProd[0] + tmpval;\n\n                xValue =  ${dy.get('batch', 'idyR', 'idyC2', 'd2')};\n\n                dotProd[1] = dotProd[1] + vec4<${dataType}>(dot(xValue, wValue0),\n                                                    dot(xValue, wValue1),\n                                                    dot(xValue, wValue2),\n                                                    dot(xValue, wValue3));\n              }\n            } else if (bDyCVal) {\n              let d2Length = outBackprop[${channelDim}];\n              for (var d2: u32 = 0; d2 < d2Length; d2 = d2 + 4) {\n                let wValue0 = ${w.get('u32(wRPerm)', 'u32(wCPerm)', 'd1', 'd2')};\n                let wValue1 = ${w.get('u32(wRPerm)', 'u32(wCPerm)', 'd1 + 1', 'd2')};\n                let wValue2 = ${w.get('u32(wRPerm)', 'u32(wCPerm)', 'd1 + 2', 'd2')};\n                let wValue3 = ${w.get('u32(wRPerm)', 'u32(wCPerm)', 'd1 + 3', 'd2')};\n\n                var xValue = ${dy.get('batch', 'idyR', 'idyC', 'd2')};\n                let tmpval = vec4<${dataType}>(dot(xValue, wValue0),\n                                      dot(xValue, wValue1),\n                                      dot(xValue, wValue2),\n                                      dot(xValue, wValue3));\n                dotProd[0] = dotProd[0] + tmpval;\n              }\n            } else if (bDyCVal2) {\n              let d2Length = outBackprop[3];\n              for (var d2: u32 = 0; d2 < d2Length; d2 = d2 + 4) {\n                let wValue0 = ${w.get('u32(wRPerm)', 'u32(wCPerm)', 'd1', 'd2')};\n                let wValue1 = ${w.get('u32(wRPerm)', 'u32(wCPerm)', 'd1 + 1', 'd2')};\n                let wValue2 = ${w.get('u32(wRPerm)', 'u32(wCPerm)', 'd1 + 2', 'd2')};\n                let wValue3 = ${w.get('u32(wRPerm)', 'u32(wCPerm)', 'd1 + 3', 'd2')};\n\n                var xValue = ${dy.get('batch', 'idyR', 'idyC2', 'd2')};\n                let tmpval = vec4<${dataType}>(dot(xValue, wValue0),\n                                      dot(xValue, wValue1),\n                                      dot(xValue, wValue2),\n                                      dot(xValue, wValue3));\n                dotProd[1] = dotProd[1] + tmpval;\n              }\n            }\n          }\n        }\n\n        for (var i: u32 = 0; i < ${workPerThread}; i = i + 1) {\n          let value = dotProd[i] + ${hasBias ? 'bias[c+i]' : '0.0'};\n          ${output.set('batch', 'r', 'c + i', 'd1', 'value')};\n        }\n      }`;\n      const codeSnippet = `\n          let outputIndices = ${output.offsetToIndices('global_idx')};\n          let batch = ${output.indicesGet('outputIndices', 0)};\n          let d1 = ${output.indicesGet('outputIndices', channelDim)};\n          let r = ${output.indicesGet('outputIndices', rowDim)};\n          let c = ${output.indicesGet('outputIndices', colDim)};\n          let dyCorner = vec2<i32>(i32(r), i32(c)) - pads;\n          let dyRCorner = dyCorner.x;\n          let dyCCorner = dyCorner.y;\n          let groupId = d1 / ${outputChannelsPerGroup};\n          let wOutChannel = d1 - groupId * ${outputChannelsPerGroup};\n          // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n          // ? = to be determined. : = across all values in that axis.\n          var dotProd = 0.0;\n          for (var wR: u32 = 0; wR < effectiveFilterDims.x; wR = wR + 1) {\n            if (wR % dilations.x != 0) {\n              continue;\n            }\n            let dyR = (${dataType}(dyRCorner) + ${dataType}(wR)) / ${dataType}(strides[0]);\n            let wRPerm = filterDims.x - 1 - wR / dilations.x;\n            if (dyR < 0.0 || dyR >= ${dataType}(outBackprop[${rowDim}]) || fract(dyR) > 0.0 ||\n                wRPerm < 0) {\n              continue;\n            }\n            let idyR: u32 = u32(dyR);\n\n            for (var wC: u32 = 0; wC < effectiveFilterDims.y; wC = wC + 1) {\n              if (wC % dilations.y != 0) {\n                continue;\n              }\n              let dyC = (${dataType}(dyCCorner) + ${dataType}(wC)) / ${dataType}(strides.y);\n              let wCPerm = filterDims.y - 1 - wC / dilations.y;\n              if (dyC < 0.0 || dyC >= ${dataType}(outBackprop[${colDim}]) ||\n                  fract(dyC) > 0.0 || wCPerm < 0) {\n                continue;\n              }\n              let idyC: u32 = u32(dyC);\n              var inputChannel = groupId * ${inputChannelsPerGroup};\n              for (var d2: u32 = 0; d2 < ${inputChannelsPerGroup}; d2 = d2 + 1) {\n                let xValue = ${\n          isChannelsLast ? dy.get('batch', 'idyR', 'idyC', 'inputChannel') :\n                           dy.get('batch', 'inputChannel', 'idyR', 'idyC')};\n                let wValue = ${w.get('inputChannel', 'wOutChannel', 'u32(wRPerm)', 'u32(wCPerm)')};\n                dotProd = dotProd + xValue * wValue;\n                inputChannel = inputChannel + 1;\n              }\n            }\n          }\n          let value = dotProd + ${hasBias ? 'bias[d1]' : '0.0'};\n          ${output.setByOffset('global_idx', 'value')};\n        `;\n\n      return `\n  ${shaderHelper.declareVariables(...inputVariables, output)}\n  ${declareFunctions}\n  const outShape : vec4<u32> = vec4<u32>(${outputShape.join(',')});\n  const outBackprop : vec4<u32> = vec4<u32>(${inputs[0].dims.join(',')});\n  const strides : vec2<u32> = vec2<u32>(${attributes.strides[0]}, ${attributes.strides[1]});\n  const filterDims : vec2<u32> = vec2<u32>(${attributes.kernelShape[isChannelsLast ? 1 : 2]}, ${\n          attributes.kernelShape[isChannelsLast ? 2 : 3]});\n  const dilations : vec2<u32> = vec2<u32>(${attributes.dilations[0]}, ${attributes.dilations[1]});\n  const effectiveFilterDims : vec2<u32> = filterDims + vec2<u32>(\n          ${\n          attributes.dilations[0] <= 1 ?\n              0 :\n              (attributes.kernelShape[isChannelsLast ? 1 : 2] - 1) * (attributes.dilations[0] - 1)},\n          ${\n          attributes.dilations[1] <= 1 ?\n              0 :\n              (attributes.kernelShape[isChannelsLast ? 2 : 3] - 1) * (attributes.dilations[1] - 1)});\n  const pads : vec2<i32> = vec2<i32>(i32(effectiveFilterDims[0]) - 1 - (${attributes.pads[0] + attributes.pads[2]})/2,\n                                     i32(effectiveFilterDims[1]) - 1 - (${attributes.pads[1] + attributes.pads[3]})/2);\n    ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)};\n  ${isVec4 ? codeSnippet4 : codeSnippet}}`;\n    };\n\nexport const createConvTranspose2DProgramInfo =\n    (inputs: readonly TensorView[], metadata: ProgramMetadata, attributes: ConvTransposeAttributes,\n     squeezeOutputShapeFunction?: (shape: readonly number[]) => number[]): ProgramInfo => {\n      const hasBias = inputs.length > 2;\n      // const isChannelsLast = attributes.format === 'NHWC';\n      const outputShape = attributes.outputShape;\n      const outputSize = ShapeUtil.size(outputShape);\n\n      // const inChannels = inputs[0].dims[isChannelsLast ? 3 : 1];\n      // TODO Enable isVec4 for performance\n      // Disabled due to weight matrix layout issue\n      // const isVec4 = attributes.group === 1 && isChannelsLast && inChannels % 4 === 0 && outChannels % 4 === 0;\n      const dispatch = [\n        Math.ceil(outputSize / 64),\n        1,\n        1,\n      ];\n      LOG_DEBUG('verbose', () => `[conv2d_backprop_webgpu] dispatch = ${dispatch}`);\n\n      const dataType = tensorTypeToWsglStorageType(inputs[0].dataType);\n      return {\n        ...metadata,\n        outputs: [{\n          dims: squeezeOutputShapeFunction ? squeezeOutputShapeFunction(outputShape) : outputShape,\n          dataType: inputs[0].dataType,\n          gpuDataType: GpuDataType.default\n        }],\n        dispatchGroup: () => ({x: dispatch[0], y: dispatch[1], z: dispatch[2]}),\n        getShaderSource: (shaderHelper: ShaderHelper) => createConvTranspose2DOpProgramShaderSource(\n            shaderHelper, inputs, attributes, outputShape, hasBias, dispatch[1] === 1 && dispatch[2] === 1, false,\n            dataType),\n      };\n    };\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// sampled from [@tensorflow/tfjs] tfjs-core/src/ops/conv_util.ts\n//\n// modified to fit the needs of the project\n\nexport const utilFunctions = `\nfn getIndexFromCoords4D(coords : vec4<i32>, shape : vec4<i32>) -> i32 {\n  return dot(coords, vec4<i32>(\n      shape.y * shape.z * shape.w, shape.z * shape.w, shape.w, 1));\n}\nfn getOutputIndexFromCoords(coords : vec4<i32>) -> i32 {\n  return dot(coords, vec4<i32>(\n    outShapeStrides.x, outShapeStrides.y, outShapeStrides.z, 1));\n}\n`;\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// sampled from [@tensorflow/tfjs] tfjs-backend-webgpu/src/matmul_packed_webgpu.ts\n//\n// modified to fit the needs of the project\n\nimport {TensorView} from '../../../tensor-view';\nimport {ShapeUtil} from '../../../util';\nimport {GpuDataType, ProgramInfo, ProgramMetadata} from '../../types';\nimport {getBroadcastDims, IndicesHelper, inputVariable, outputVariable, ShaderHelper, tensorTypeToWsglStorageType} from '../common';\nimport {getActicationSnippet, InternalActivationAttributes} from '../fuse-utils';\n\nimport {typeSnippet} from './activation_util';\n\nconst writeDataToSubAVec4Snippet = (transpose: boolean, batchDims?: IndicesHelper) => {\n  if (transpose) {\n    return `\n        mm_Asub[inputRow][inputCol] = mm_readA(batch,\n          kStart + inputRow,\n          globalRowStart / innerElementSize + inputCol${batchDims ? ', batchIndices' : ''});\n        `;\n\n  } else {\n    return `\n        mm_Asub[inputRow][inputCol] = mm_readA(batch,\n          globalRow + innerRow,\n          kStart / innerElementSize + inputCol${batchDims ? ', batchIndices' : ''});\n        `;\n  }\n};\n\nconst calculateResultSnippet = (transposeA: boolean, innerElementSize: number) => {\n  if (transposeA) {\n    return `\n        let ACached0 = mm_Asub[k * innerElementSize][localRow];\n        let ACached1 = mm_Asub[k * innerElementSize + 1][localRow];\n        let ACached2 = mm_Asub[k * innerElementSize + 2][localRow];\n        ${innerElementSize === 3 ? '' : 'let ACached3 = mm_Asub[k * innerElementSize + 3][localRow];'}\n        for (var i = 0; i < rowPerThread; i = i + 1) {\n          acc[i] = BCached0 * ACached0[i] + acc[i];\n          acc[i] = BCached1 * ACached1[i] + acc[i];\n          acc[i] = BCached2 * ACached2[i] + acc[i];\n          ${innerElementSize === 3 ? '' : 'acc[i] = BCached3 * ACached3[i] + acc[i];'}\n        }`;\n  } else {\n    return `\n        for (var i = 0; i < rowPerThread; i = i + 1) {\n          let ACached = mm_Asub[tileRow + i][k];\n          acc[i] = BCached0 * ACached.x + acc[i];\n          acc[i] = BCached1 * ACached.y + acc[i];\n          acc[i] = BCached2 * ACached.z + acc[i];\n          ${innerElementSize === 3 ? '' : 'acc[i] = BCached3 * ACached.w + acc[i];'}\n        }`;\n  }\n};\n\nexport const makeMatMulPackedVec4Source =\n    (workPerThread: number[], workgroupSize: [number, number, number], type = 'f32', batchDims?: IndicesHelper,\n     transposeA = false, tileInner = 32, splitK = false, splitedDimInner = 32): string => {\n      const tileAOuter = workgroupSize[1] * workPerThread[1];\n      const tileBOuter = workgroupSize[0] * workPerThread[0];\n      const tileAWidth = transposeA ? tileAOuter : tileInner;\n      const tileAHight = transposeA ? tileInner : tileAOuter;\n      const innerElementSize = tileAWidth / workgroupSize[0];\n      const rowPerThreadB = tileInner / workgroupSize[1];\n\n      if (!(((transposeA && innerElementSize === 4 && workPerThread[1] === 4) ||\n             (!transposeA && (innerElementSize === 3 || innerElementSize === 4))) &&\n            tileAWidth % workgroupSize[0] === 0 && tileInner % workgroupSize[1] === 0 && workPerThread[0] === 4)) {\n        throw new Error(`If transposeA ${transposeA} is true, innerElementSize ${\n            innerElementSize} and workPerThread[1] ${workPerThread[1]} must be 4.\n      Otherwise, innerElementSize ${innerElementSize} must be 3 or 4.\n  tileAWidth ${tileAWidth} must be divisible by workgroupSize[0]${workgroupSize[0]}. tileInner ${\n            tileInner} must be divisible by workgroupSize[1] ${workgroupSize[1]}. colPerThread ${\n            workPerThread[0]} must be 4.`);\n      }\n      return `\nvar<workgroup> mm_Asub: array<array<vec${innerElementSize}<${type}>, ${tileAWidth / innerElementSize}>, ${tileAHight}>;\nvar<workgroup> mm_Bsub: array<array<vec4<${type}>, ${tileBOuter / workPerThread[0]}>, ${tileInner}>;\n\nconst rowPerThread = ${workPerThread[1]};\nconst colPerThread = ${workPerThread[0]};\nconst innerElementSize = ${innerElementSize};\nconst tileInner = ${tileInner};\n\n@compute @workgroup_size(${workgroupSize[0]}, ${workgroupSize[1]}, ${workgroupSize[2]})\nfn main(@builtin(local_invocation_id) localId : vec3<u32>,\n        @builtin(global_invocation_id) globalId : vec3<u32>,\n        @builtin(workgroup_id) workgroupId : vec3<u32>) {\n  let localRow = i32(localId.y);\n  let tileRow = localRow * rowPerThread;\n  let tileCol = i32(localId.x);\n\n  let globalRow =i32(globalId.y) * rowPerThread;\n  let globalCol = i32(globalId.x);\n  let batch = ${splitK ? '0' : 'i32(globalId.z)'};\n  ${batchDims ? `let batchIndices = ${batchDims.offsetToIndices('u32(batch)')};` : ''}\n  let globalRowStart = i32(workgroupId.y) * ${tileAOuter};\n\n  let numTiles = ${splitK ? `${Math.ceil(splitedDimInner / tileInner)}` : '(dimInner - 1) / tileInner + 1'};\n  var kStart = ${splitK ? `i32(globalId.z) * ${splitedDimInner}` : '0'};\n\n  var acc: array<vec4<${type}>, rowPerThread>;\n\n  // Loop over shared dimension.\n  let tileRowB = localRow * ${rowPerThreadB};\n  for (var t = 0; t < numTiles; t = t + 1) {\n      // Load one tile of A into local memory.\n      for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n          let inputRow = tileRow + innerRow;\n          let inputCol = tileCol;\n          ${writeDataToSubAVec4Snippet(transposeA, batchDims)}\n      }\n\n      // Load one tile of B into local memory.\n      for (var innerRow = 0; innerRow < ${rowPerThreadB}; innerRow = innerRow + 1) {\n          let inputRow = tileRowB + innerRow;\n          let inputCol = tileCol;\n          mm_Bsub[inputRow][inputCol] = mm_readB(batch, kStart + inputRow, globalCol${\n          batchDims ? ', batchIndices' : ''});\n      }\n      kStart = kStart + tileInner;\n      workgroupBarrier();\n\n      // Compute acc values for a single thread.\n      for (var k = 0; k < tileInner / innerElementSize; k = k + 1) {\n          let BCached0 = mm_Bsub[k * innerElementSize][tileCol];\n          let BCached1 = mm_Bsub[k * innerElementSize + 1][tileCol];\n          let BCached2 = mm_Bsub[k * innerElementSize + 2][tileCol];\n          ${innerElementSize === 3 ? '' : 'let BCached3 = mm_Bsub[k * innerElementSize + 3][tileCol];'}\n\n          ${calculateResultSnippet(transposeA, innerElementSize)}\n      }\n\n      workgroupBarrier();\n  }\n\n  for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      mm_write(batch, globalRow + innerRow, globalCol, acc[innerRow]);\n  }\n}`;\n    };\n\nconst writeDataToSubASnippet = (transpose: boolean, batchDims?: IndicesHelper) => {\n  if (transpose) {\n    return `\n            mm_Asub[inputRow][inputCol] = mm_readA(batch,\n              kStart + inputRow,\n              globalRowStart + inputCol${batchDims ? ', batchIndices' : ''});\n            `;\n\n  } else {\n    return `\n            mm_Asub[inputRow][inputCol] = mm_readA(batch,\n              globalRowStart + inputRow,\n              kStart + inputCol${batchDims ? ', batchIndices' : ''});\n            `;\n  }\n};\n\nconst readDataFromSubASnippet = (transposeA: boolean) =>\n    transposeA ? 'let ACached = mm_Asub[k][tileRow + innerRow];' : 'let ACached = mm_Asub[tileRow + innerRow][k];';\n\n// sequentialAccessByThreads means sequential data in memory is accessed by\n// threads, instead of a single thread (default behavior).\nexport const makeMatMulPackedSource =\n    (workPerThread: number[], workgroupSize: [number, number, number], type = 'f32', batchDims?: IndicesHelper,\n     transposeA = false, tileInner = 32, splitK = false, splitedDimInner = 32,\n     sequentialAccessByThreads = false): string => {\n      const tileAOuter = workPerThread[1] * workgroupSize[1];\n      const tileBOuter = workPerThread[0] * workgroupSize[0];\n      const tileAWidth = transposeA ? tileAOuter : tileInner;\n      const tileAHight = transposeA ? tileInner : tileAOuter;\n\n      if (!(tileAHight % workgroupSize[1] === 0 && tileAWidth % workgroupSize[0] === 0 &&\n            tileInner % workgroupSize[1] === 0)) {\n        throw new Error(`tileAHight ${tileAHight} must be divisible by workgroupSize[1]${\n            workgroupSize[1]}, tileAWidth ${tileAWidth} must be divisible by workgroupSize[0]${\n            workgroupSize[0]}, tileInner ${tileInner} must be divisible by workgroupSize[1]${workgroupSize[1]}`);\n      }\n      const rowPerThreadA = tileAHight / workgroupSize[1];\n      const colPerThreadA = tileAWidth / workgroupSize[0];\n      const rowPerThreadB = tileInner / workgroupSize[1];\n      const matmulSnippet = sequentialAccessByThreads ?\n          `\n    let localRow = i32(localId.y);\n    let localCol = i32(localId.x);\n    let globalRowStart = i32(workgroupId.y) * ${tileAOuter};\n    let globalColStart = i32(workgroupId.x) * ${tileBOuter};\n\n    // Loop over shared dimension.\n    for (var t = 0; t < numTiles; t = t + 1) {\n      // Load one tile of A into local memory.\n      for (var inputRow = localRow; inputRow < ${tileAHight}; inputRow = inputRow + ${workgroupSize[1]}) {\n        for (var inputCol = localCol; inputCol < ${tileAWidth}; inputCol = inputCol + ${workgroupSize[0]}) {\n          ${writeDataToSubASnippet(transposeA, batchDims)}\n        }\n      }\n      // Load one tile of B into local memory.\n      for (var inputRow = localRow; inputRow < ${tileInner}; inputRow = inputRow + ${workgroupSize[1]}) {\n            for (var inputCol = localCol; inputCol < ${tileBOuter}; inputCol = inputCol + ${workgroupSize[0]}) {\n          mm_Bsub[inputRow][inputCol] = mm_readB(batch,\n            kStart + inputRow,\n            globalColStart + inputCol${batchDims ? ', batchIndices' : ''});\n        }\n      }\n      kStart = kStart + tileInner;\n      workgroupBarrier();\n\n      // Compute acc values for a single thread.\n      var BCached : array<${type}, colPerThread>;\n      for (var k = 0; k < tileInner; k = k + 1) {\n        for (var inner = 0; inner < colPerThread; inner = inner + 1) {\n          BCached[inner] = mm_Bsub[k][localCol + inner * ${workgroupSize[0]}];\n        }\n        for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n          let ACached = ${\n              transposeA ? `mm_Asub[k][localRow + innerRow * ${workgroupSize[1]}];` :\n                           `mm_Asub[localRow + innerRow * ${workgroupSize[1]}][k];`}\n          for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n            acc[innerRow][innerCol] = acc[innerRow][innerCol] +\n                ACached * BCached[innerCol];\n          }\n        }\n      }\n      workgroupBarrier();\n    }\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      let gRow = globalRowStart + localRow + innerRow * ${workgroupSize[1]};\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n        let gCol = globalColStart + localCol + innerCol * ${workgroupSize[0]};\n        mm_write(batch, gRow, gCol, acc[innerRow][innerCol]);\n      }\n    }\n    ` :\n          `\nlet tileRow = i32(localId.y) * rowPerThread;\nlet tileCol = i32(localId.x) * colPerThread;\n\nlet globalRow = i32(globalId.y) * rowPerThread;\nlet globalCol = i32(globalId.x) * colPerThread;\nlet globalRowStart = i32(workgroupId.y) * ${tileAOuter};\n\nlet tileRowA = i32(localId.y) * ${rowPerThreadA};\nlet tileColA = i32(localId.x) * ${colPerThreadA};\nlet tileRowB = i32(localId.y) * ${rowPerThreadB};\n// Loop over shared dimension.\nfor (var t = 0; t < numTiles; t = t + 1) {\n  // Load one tile of A into local memory.\n  for (var innerRow = 0; innerRow < ${rowPerThreadA}; innerRow = innerRow + 1) {\n    for (var innerCol = 0; innerCol < ${colPerThreadA}; innerCol = innerCol + 1) {\n      let inputRow = tileRowA + innerRow;\n      let inputCol = tileColA + innerCol;\n      ${writeDataToSubASnippet(transposeA, batchDims)}\n    }\n  }\n\n  // Load one tile of B into local memory.\n  for (var innerRow = 0; innerRow < ${rowPerThreadB}; innerRow = innerRow + 1) {\n    for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n      let inputRow = tileRowB + innerRow;\n      let inputCol = tileCol + innerCol;\n      mm_Bsub[inputRow][inputCol] = mm_readB(batch,\n        kStart + inputRow,\n        globalCol + innerCol${batchDims ? ', batchIndices' : ''});\n    }\n  }\n  kStart = kStart + tileInner;\n  workgroupBarrier();\n\n  // Compute acc values for a single thread.\n  var BCached : array<${type}, colPerThread>;\n  for (var k = 0; k < tileInner; k = k + 1) {\n    for (var inner = 0; inner < colPerThread; inner = inner + 1) {\n      BCached[inner] = mm_Bsub[k][tileCol + inner];\n    }\n\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      ${readDataFromSubASnippet(transposeA)}\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n        acc[innerRow][innerCol] = acc[innerRow][innerCol] + ACached * BCached[innerCol];\n      }\n    }\n  }\n\n  workgroupBarrier();\n}\n\nfor (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n  for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n    mm_write(batch, globalRow + innerRow, globalCol + innerCol,\n        acc[innerRow][innerCol]);\n  }\n}\n`;\n\n      return `\n  var<workgroup> mm_Asub : array<array<${type}, ${tileAWidth}>, ${tileAHight}>;\n  var<workgroup> mm_Bsub : array<array<${type}, ${tileBOuter}>, ${tileInner}>;\n  const rowPerThread = ${workPerThread[1]};\n  const colPerThread = ${workPerThread[0]};\n  const tileInner = ${tileInner};\n\n@compute @workgroup_size(${workgroupSize[0]}, ${workgroupSize[1]}, ${workgroupSize[2]})\nfn main(@builtin(local_invocation_id) localId : vec3<u32>,\n        @builtin(global_invocation_id) globalId : vec3<u32>,\n        @builtin(workgroup_id) workgroupId : vec3<u32>) {\n    let batch = ${splitK ? '0' : 'i32(globalId.z)'};\n    ${batchDims ? `let batchIndices = ${batchDims.offsetToIndices('u32(batch)')};` : ''}\n    let numTiles = ${splitK ? `${Math.ceil(splitedDimInner / tileInner)}` : '(dimInner - 1) / tileInner + 1'};\n    var kStart = ${splitK ? `i32(globalId.z) * ${splitedDimInner}` : '0'};\n\n    var acc : array<array<${type}, colPerThread>, rowPerThread>;\n\n    // Without this initialization strange values show up in acc.\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n        acc[innerRow][innerCol] = 0.0;\n      }\n    }\n    ${matmulSnippet}\n  }\n`;\n    };\n\nconst matMulReadWriteFnSource =\n    (component: number, hasBias: boolean, applyActivation: string, variables: IndicesHelper[],\n     isChannelsLast = false): string => {\n      const batchAVariable = variables[0];\n      const batchBVariable = variables[1];\n      const batchVariable = variables[2];\n      const aVariable = variables[3];\n      const bVariable = variables[4];\n      const outputVariable = variables[5];\n      const broadCastADims = getBroadcastDims(batchAVariable.shape, batchVariable.shape);\n      const broadCastBDims = getBroadcastDims(batchBVariable.shape, batchVariable.shape);\n      const dataType = tensorTypeToWsglStorageType(variables[0].type.tensor);\n      const getAIndices = () => {\n        const aRank = aVariable.shape.length;\n        const batchRank = batchVariable.shape.length;\n        let resStr = `var aIndices: ${aVariable.type.indices};`;\n        for (let i = aRank - 2 - 1, j = batchRank - 1; i >= 0; i--, j--) {\n          resStr += `\\naIndices[${i}] = ${batchRank > 1 ? `batchIndices[${j}]` : 'batchIndices'};`;\n        }\n        broadCastADims.forEach(i => {\n          resStr += `\\naIndices[${i}] = 0;`;\n        });\n        resStr += `\\naIndices[${aRank - 2}] = u32(row);\n                   aIndices[${aRank - 1}] = u32(colIn);`;\n        return resStr;\n      };\n      const getBIndices = () => {\n        const bRank = bVariable.shape.length;\n        const batchRank = batchVariable.shape.length;\n        let resStr = `var bIndices: ${bVariable.type.indices};`;\n        for (let i = bRank - 2 - 1, j = batchRank - 1; i >= 0; i--, j--) {\n          resStr += `\\nbIndices[${i}] = ${batchRank > 1 ? `batchIndices[${j}]` : 'batchIndices'};`;\n        }\n        broadCastBDims.forEach(i => {\n          resStr += `\\nbIndices[${i}] = 0;`;\n        });\n        resStr += `\\nbIndices[${bRank - 2}] = u32(row);\n                   bIndices[${bRank - 1}] = u32(colIn);`;\n        return resStr;\n      };\n      const source = `\n    fn mm_readA(batch: i32, row: i32, colIn: i32, batchIndices: ${batchVariable.type.indices}) -> ${\n          typeSnippet(component, dataType)} {\n      var value = ${typeSnippet(component, dataType)}(0.0);\n      let col = colIn * ${component};\n      if(row < dimAOuter && col < dimInner)\n      {\n        ${getAIndices()}\n        value = ${aVariable.getByIndices('aIndices')};\n      }\n      return value;\n    }\n\n    fn mm_readB(batch: i32, row: i32, colIn: i32, batchIndices: ${batchVariable.type.indices}) -> ${\n          typeSnippet(component, dataType)} {\n      var value = ${typeSnippet(component, dataType)}(0.0);\n      let col = colIn * ${component};\n      if(row < dimInner && col < dimBOuter)\n      {\n        ${getBIndices()}\n        value = ${bVariable.getByIndices('bIndices')};\n      }\n      return value;\n    }\n\n    fn mm_write(batch: i32, row: i32, colIn: i32, valueIn: ${typeSnippet(component, dataType)}) {\n      let col = colIn * ${component};\n      if (row < dimAOuter && col < dimBOuter) {\n        var value = valueIn;\n        let coords = vec3<i32>(batch, row, colIn);\n        ${\n          hasBias ?\n              `value = value + ${isChannelsLast ? 'bias[colIn]' : `${typeSnippet(component, dataType)}(bias[row])`};` :\n                                                  ''                                    }\n        ${applyActivation}\n        ${outputVariable.setByIndices('vec3<u32>(coords)', 'value')}\n      }\n    }\n    `;\n      return source;\n    };\n\nexport const createMatmulProgramInfo =\n    (metadata: ProgramMetadata, inputs: readonly TensorView[], activationAttributes: InternalActivationAttributes,\n     outputShape: readonly number[], reshapedOutputShape?: readonly number[],\n     isChannelsLast = false /* only used for conv2dByMatMul*/): ProgramInfo => {\n      const aShape = inputs[0].dims;\n      const bShape = inputs[1].dims;\n\n      const outerDimsA = aShape.slice(0, -2);\n      const outerDimsB = bShape.slice(0, -2);\n      const outerDims = reshapedOutputShape ? reshapedOutputShape.slice(0, -2) : outputShape.slice(0, -2);\n      const batchDims = inputVariable('batchDims', inputs[0].dataType, outerDims);\n      const batchADims = inputVariable('batchADims', inputs[0].dataType, outerDimsA);\n      const batchBDims = inputVariable('batchBDims', inputs[0].dataType, outerDimsB);\n      const variables = [batchADims, batchBDims, batchDims];\n      const batchSize = ShapeUtil.size(outerDims);\n\n      const dimAOuter = aShape[aShape.length - 2];\n      const dimInner = aShape[aShape.length - 1];\n      const dimBOuter = bShape[bShape.length - 1];\n      const isVec4 = dimInner % 4 === 0 && dimBOuter % 4 === 0;\n      const {activationFunction, applyActivation} = getActicationSnippet(activationAttributes);\n\n      // TODO: fine tune size\n      const elementsPerThread = dimAOuter <= 8 ? [4, 1, 1] : [4, 4, 1];\n      const workgroupSize: [number, number, number] = [8, 8, 1];\n      const dispatch = [\n        Math.ceil(dimBOuter / workgroupSize[0] / elementsPerThread[0]),\n        Math.ceil(dimAOuter / workgroupSize[1] / elementsPerThread[1]),\n        Math.ceil(batchSize / workgroupSize[2] / elementsPerThread[2])\n      ];\n\n      const dataType = tensorTypeToWsglStorageType(inputs[0].dataType);\n      const components = isVec4 ? 4 : 1;\n      const A = inputVariable('a', inputs[0].dataType, [...outerDimsA, dimAOuter, dimInner / components], components);\n      const B = inputVariable('b', inputs[1].dataType, [...outerDimsB, dimInner, dimBOuter / components], components);\n      const output =\n          outputVariable('result', inputs[0].dataType, [batchSize, dimAOuter, dimBOuter / components], components);\n      variables.push(A);\n      variables.push(B);\n      variables.push(output);\n      const inputVariables = [A, B];\n      const hasBias = inputs.length > 2;\n      const declareFunctions = matMulReadWriteFnSource(components, hasBias, applyActivation, variables, isChannelsLast);\n      if (hasBias) {\n        const biasComponents = isChannelsLast ? components : 1;\n        inputVariables.push(inputVariable('bias', inputs[2].dataType, inputs[2].dims, biasComponents));\n      }\n      const getShaderSource = (shaderHelper: ShaderHelper) => `\n  const dimAOuter: i32 = ${dimAOuter};\n  const dimBOuter: i32 = ${dimBOuter};\n  const dimInner: i32 = ${dimInner};\n  ${shaderHelper.declareVariables(...inputVariables, output)}\n  ${declareFunctions}\n  ${activationFunction}\n  ${\n          isVec4 ? makeMatMulPackedVec4Source(elementsPerThread, workgroupSize, dataType, batchDims) :\n                   makeMatMulPackedSource(elementsPerThread, workgroupSize, dataType, batchDims)}\n                   ${batchDims.impl()}`;\n      return {\n        ...metadata,\n        outputs: [{dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default}],\n        getShaderSource,\n        dispatchGroup: () => ({x: dispatch[0], y: dispatch[1], z: dispatch[2]})\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n// TODO: this is the same naive implementation we use for reduce that has\n// performance limitations when the reduced axis is long. Need to add\n// a optimized codepath for this.\n\nimport {DataType} from '../../../wasm-common';\nimport {TensorView} from '../../tensor-view';\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\nimport {ComputeContext, GpuDataType, ProgramInfoLoader, ProgramMetadata} from '../types';\n\nimport {createReduceProgramInfo, ReduceOp} from './reduce';\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (!inputs || inputs.length === 0 || inputs.length > 2) {\n    throw new Error('ArgMinMaxOp op requires 1 or 2 inputs.');\n  }\n  if (inputs[0].dataType !== DataType.float) {\n    throw new Error('Invalid input type.');\n  }\n};\n\nexport interface ArgMinMaxAttributes extends AttributeWithCacheKey {\n  keepDims: boolean;\n  axis: number;\n  selectLastIndex: number;\n}\n\nconst createArgMinMaxAttributesFromInputs =\n    (inputs: readonly TensorView[], attributes: ArgMinMaxAttributes): ArgMinMaxAttributes =>\n        createAttributeWithCacheKey(\n            {axis: attributes.axis, keepDims: attributes.keepDims, selectLastIndex: attributes.selectLastIndex});\n\nconst createArgMinMaxProgramInfoLoader =\n    (inputs: readonly TensorView[], name: string, attributes: ArgMinMaxAttributes, reduceOp: ReduceOp):\n        ProgramInfoLoader => {\n          const updatedAttributes: ArgMinMaxAttributes =\n              inputs.length === 1 ? attributes : createArgMinMaxAttributesFromInputs(inputs, attributes);\n          const cacheHint = updatedAttributes.cacheKey + inputs.map(x => x.dims.toString()).join('_');\n          const metadata: ProgramMetadata = {name, inputTypes: [GpuDataType.default], cacheHint};\n          return {\n            ...metadata,\n            get: () => createReduceProgramInfo(\n                metadata, [inputs[0]], reduceOp, [updatedAttributes.axis], DataType.int64, updatedAttributes.keepDims)\n          };\n        };\n\n\nexport const argMin = (context: ComputeContext, attributes: ArgMinMaxAttributes): void => {\n  validateInputs(context.inputs);\n  const argMinMaxOp: ReduceOp = (input, output, axes) => {\n    const idxZero = [];\n    for (let k = 0; k < input.shape.length; k++) {\n      if (axes.indexOf(k) >= 0 || axes.length === 0) {\n        idxZero.push(`inputIndices[${k}] = 0;`);  // first element\n      }\n    }\n    return [\n      `${idxZero.join('\\n')}`, `var value = ${input.getByOffset('inputOffset')};\\nvar bestIndex : i32 = 0;`,\n      `if (${input.getByOffset('inputOffset')} ${attributes.selectLastIndex > 0 ? '<=' : '<'} value) {\n         value = ${input.getByOffset('inputOffset')};\n         bestIndex = i32(lastIndex);\n       }`,\n      '', output.setByOffset('global_idx', 'bestIndex')\n    ];\n  };\n  context.compute(createArgMinMaxProgramInfoLoader(context.inputs, 'ArgMin', attributes, argMinMaxOp), {inputs: [0]});\n};\n\nexport const argMax = (context: ComputeContext, attributes: ArgMinMaxAttributes): void => {\n  validateInputs(context.inputs);\n  const argMinMaxOp: ReduceOp = (input, output, axes) => {\n    const idxZero = [];\n    for (let k = 0; k < input.shape.length; k++) {\n      if (axes.indexOf(k) >= 0 || axes.length === 0) {\n        idxZero.push(`inputIndices[${k}] = 0;`);  // first element\n      }\n    }\n    return [\n      `${idxZero.join('\\n')}`, `var value = ${input.getByOffset('inputOffset')};\\nvar bestIndex : i32 = 0;`,\n      `if (${input.getByOffset('inputOffset')} ${attributes.selectLastIndex > 0 ? '>=' : '>'} value) {\n         value = ${input.getByOffset('inputOffset')};\n         bestIndex = i32(lastIndex);\n       }`,\n      '', output.setByOffset('global_idx', 'bestIndex')\n    ];\n  };\n  context.compute(createArgMinMaxProgramInfoLoader(context.inputs, 'argMax', attributes, argMinMaxOp), {inputs: [0]});\n};\n\nexport const parseArgMinMaxAttributes = (attributes: Record<string, unknown>): ArgMinMaxAttributes =>\n    createAttributeWithCacheKey(attributes as Omit<ArgMinMaxAttributes, keyof AttributeWithCacheKey>);\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {TensorView} from '../../tensor-view';\nimport {ShapeUtil} from '../../util';\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramMetadata} from '../types';\n\nimport {inputVariable, outputVariable, ShaderHelper} from './common';\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (inputs[0].dims.length !== 3) {\n    throw new Error('input should have 3 dimensions');\n  }\n\n  if (![320, 640, 1280].includes(inputs[0].dims[2])) {\n    throw new Error('number of channels should be 320, 640 or 1280');\n  }\n\n  if (inputs[1].dims.length !== 1) {\n    throw new Error('bias is expected to have 1 dimensions');\n  }\n\n  if (inputs[0].dims[2] !== inputs[1].dims[0]) {\n    throw new Error('last dimension of input and bias are not the same');\n  }\n};\n\nconst createBiasAddProgramInfo = (metadata: ProgramMetadata, inputs: readonly TensorView[]): ProgramInfo => {\n  const outputShape = inputs[0].dims;\n\n  const channels = inputs[0].dims[2];\n  // since channel number can be only 320/640/1280, it's always divisable by 4\n  const outputSize = ShapeUtil.size(outputShape) / 4;\n\n  const dataType = inputs[0].dataType;\n  const input = inputVariable('input', dataType, outputShape, 4);\n  const bias = inputVariable('bias', dataType, [channels], 4);\n  const residual = inputVariable('residual', dataType, outputShape, 4);\n  const output = outputVariable('output', dataType, outputShape, 4);\n\n  const getShaderSource = (shaderHelper: ShaderHelper) => `\n  const channels = ${channels}u / 4;\n  ${shaderHelper.declareVariables(input, bias, residual, output)}\n\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\n    let value = ${input.getByOffset('global_idx')}\n      + ${bias.getByOffset('global_idx % channels')} + ${residual.getByOffset('global_idx')};\n    ${output.setByOffset('global_idx', 'value')}\n  }`;\n\n  return {\n    ...metadata,\n    outputs: [{dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default}],\n    getShaderSource,\n    dispatchGroup: () => ({x: Math.ceil(outputSize / 64 /* workgroup size */)})\n  };\n};\n\nexport const biasAdd = (context: ComputeContext): void => {\n  validateInputs(context.inputs);\n  const inputTypes = Array(context.inputs.length).fill(GpuDataType.default);\n  const metadata = {\n    name: 'BiasAdd',\n    inputTypes,\n  };\n\n  context.compute(createBiasAddProgramInfo(metadata, context.inputs));\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {TensorView} from '../../tensor-view';\nimport {ShapeUtil} from '../../util';\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramMetadata} from '../types';\n\nimport {inputVariable, outputVariable, ShaderHelper} from './common';\nimport {erfImpl} from './unary-op';\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (inputs[0].dims.length !== 3) {\n    throw new Error('input should have 3 dimensions');\n  }\n\n  if (![2560, 5120, 10240].includes(inputs[0].dims[2])) {\n    throw new Error('hidden state should be 2560, 5120 or 10240');\n  }\n\n  if (inputs[1].dims.length !== 1) {\n    throw new Error('bias is expected to have 1 dimensions');\n  }\n\n  if (inputs[0].dims[2] !== inputs[1].dims[0]) {\n    throw new Error('last dimension of input and bias are not the same');\n  }\n};\n\nconst createBiasSplitGeluProgramInfo = (metadata: ProgramMetadata, inputs: readonly TensorView[]): ProgramInfo => {\n  const outputShape = inputs[0].dims.slice();\n  outputShape[2] = outputShape[2] / 2;\n\n  const input = inputVariable('input', inputs[0].dataType, inputs[0].dims, 4);\n  const bias = inputVariable('bias', inputs[0].dataType, [inputs[0].dims[2]], 4);\n  const output = outputVariable('output', inputs[0].dataType, outputShape, 4);\n\n  const outputSize = ShapeUtil.size(outputShape) / 4;\n\n  const getShaderSource = (shaderHelper: ShaderHelper) => `\n  const M_SQRT2 = sqrt(2.0);\n  const halfChannels = ${inputs[0].dims[2] / 4 / 2}u;\n\n  ${shaderHelper.declareVariables(input, bias, output)}\n\n  ${erfImpl('vec4f')}\n\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\n    let biasIdx = global_idx % halfChannels;\n    let batchIndex = global_idx / halfChannels;\n    let inputOffset = biasIdx + batchIndex * halfChannels * 2;\n    let valueLeft = input[inputOffset] + bias[biasIdx];\n    let valueRight = input[inputOffset + halfChannels] + bias[biasIdx + halfChannels];\n    let geluRight = valueRight * 0.5 * (erf_vf32(valueRight / M_SQRT2) + 1);\n\n    ${output.setByOffset('global_idx', 'valueLeft * geluRight')}\n  }`;\n\n  return {\n    ...metadata,\n    outputs: [{dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default}],\n    getShaderSource,\n    dispatchGroup: () => ({x: Math.ceil(outputSize / 64 /* workgroup size */)})\n  };\n};\n\nexport const biasSplitGelu = (context: ComputeContext): void => {\n  validateInputs(context.inputs);\n\n  const metadata = {\n    name: 'BiasSplitGelu',\n    inputTypes: [GpuDataType.default, GpuDataType.default],\n  };\n\n  context.compute(createBiasSplitGeluProgramInfo(metadata, context.inputs));\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {DataType} from '../../../wasm-common';\nimport {TensorView} from '../../tensor-view';\nimport {BroadcastUtil, ShapeUtil} from '../../util';\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramInfoLoader, ProgramMetadata} from '../types';\n\nimport {inputVariable, outputVariable, ShaderHelper} from './common';\n\ntype BuiltinFunctionName = string;\ntype BinaryCustomExpression = (expressionA: string, expressionB: string) => string;\ntype BinaryFunctionCall = BuiltinFunctionName|BinaryCustomExpression|{\n  scalar: BinaryCustomExpression;\n  vector: BinaryCustomExpression;\n};\n\nconst createBinaryOpProgramShader =\n    (shaderHelper: ShaderHelper, dimsA: readonly number[], dimsB: readonly number[], dimsOutput: readonly number[],\n     vectorize: boolean, doBroadcast: boolean, funcCall: BinaryFunctionCall, typeA: number, typeB: number,\n     typeOutput: number, additionalImplementation?: string) => {\n      const outputSize = ShapeUtil.size(dimsOutput);\n      const vecSize = Math.ceil(outputSize / 4);\n\n      let expressionScalar: BinaryCustomExpression;\n      let expressionVector: BinaryCustomExpression;\n      if (typeof funcCall === 'string') {\n        expressionScalar = expressionVector = (a, b) => `${funcCall}((${a}),(${b}))`;\n      } else if (typeof funcCall === 'function') {\n        expressionScalar = expressionVector = funcCall;\n      } else {\n        expressionScalar = funcCall.scalar;\n        expressionVector = funcCall.vector;\n      }\n\n      let broadcastImpl = '';\n      const output = outputVariable('outputData', typeOutput, dimsOutput, 4);\n      const a = inputVariable('aData', typeA, dimsA, 4);\n      const b = inputVariable('bData', typeB, dimsB, 4);\n      if (doBroadcast) {\n        const calcOffsetImpl = (dims: readonly number[]) => {\n          const strides = ShapeUtil.computeStrides(dims);\n          const offsets: string[] = [];\n          for (let i = dims.length - 1; i >= 0; i--) {\n            const idx = output.indicesGet('outputIndices', i + dimsOutput.length - dims.length);\n            offsets.push(`${strides[i]}u * (${idx} % ${dims[i]}u)`);\n          }\n          return offsets.length > 0 ? offsets.join('+') : '0u';\n        };\n\n        broadcastImpl = `\n          fn calcOffsetA(outputIndices: ${output.type.indices}) -> u32 {\n            return ${calcOffsetImpl(dimsA)};\n          }\n\n          fn calcOffsetB(outputIndices: ${output.type.indices}) -> u32 {\n            return ${calcOffsetImpl(dimsB)};\n          }\n        `;\n      }\n\n      let assignment: string;\n      if (vectorize) {\n        if (doBroadcast) {\n          const isAOneElement = ShapeUtil.size(dimsA) === 1;\n          const isBOneElement = ShapeUtil.size(dimsB) === 1;\n          if (isAOneElement || isBOneElement) {\n            assignment = output.setByOffset(\n                'global_idx',\n                expressionVector(\n                    isAOneElement ? `${a.type.value}(${a.getByOffset('0')}.x)` : a.getByOffset('global_idx'),\n                    isBOneElement ? `${b.type.value}(${b.getByOffset('0')}.x)` : b.getByOffset('global_idx')));\n          } else {\n            assignment = `\n            let outputIndices = ${output.offsetToIndices('global_idx * 4u')};\n            let offsetA = calcOffsetA(outputIndices);\n            let offsetB = calcOffsetB(outputIndices);\n            ${\n                output.setByOffset(\n                    'global_idx', expressionVector(a.getByOffset('offsetA / 4u'), b.getByOffset('offsetB / 4u')))}\n          `;\n          }\n        } else {\n          assignment = output.setByOffset(\n              'global_idx', expressionVector(a.getByOffset('global_idx'), b.getByOffset('global_idx')));\n        }\n      } else {\n        if (!doBroadcast) {\n          throw new Error('no necessary to use scalar implementation for element-wise binary op implementation.');\n        }\n\n        const singleAssignment = (resStr: string, x: number, typeCast = '') => {\n          const expressionA = `aData[indexA${x}][componentA${x}]`;\n          const expressionB = `bData[indexB${x}][componentB${x}]`;\n          return `\n            let outputIndices${x} = ${output.offsetToIndices(`global_idx * 4u + ${x}u`)};\n            let offsetA${x} = calcOffsetA(outputIndices${x});\n            let offsetB${x} = calcOffsetB(outputIndices${x});\n            let indexA${x} = offsetA${x} / 4u;\n            let indexB${x} = offsetB${x} / 4u;\n            let componentA${x} = offsetA${x} % 4u;\n            let componentB${x} = offsetB${x} % 4u;\n            ${resStr}[${x}] = ${typeCast}(${expressionScalar(expressionA, expressionB)});\n          `;\n        };\n        if (typeOutput === DataType.bool) {\n          assignment = `\n            var data = vec4<u32>(0);\n            ${singleAssignment('data', 0, 'u32')}\n            ${singleAssignment('data', 1, 'u32')}\n            ${singleAssignment('data', 2, 'u32')}\n            ${singleAssignment('data', 3, 'u32')}\n            outputData[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));`;\n        } else {\n          assignment = `\n            ${singleAssignment('outputData[global_idx]', 0)}\n            ${singleAssignment('outputData[global_idx]', 1)}\n            ${singleAssignment('outputData[global_idx]', 2)}\n            ${singleAssignment('outputData[global_idx]', 3)}\n          `;\n        }\n      }\n\n      return `\n        ${shaderHelper.declareVariables(a, b, output)}\n\n        ${additionalImplementation ?? ''}\n        ${broadcastImpl}\n\n        ${shaderHelper.mainStart()}\n        ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(vecSize)}\n        ${assignment}\n      }`;\n    };\n\nconst createBinaryOpProgramInfo =\n    (metadata: ProgramMetadata, a: TensorView, b: TensorView, funcCall: BinaryFunctionCall,\n     additionalImplementation?: string, outputDataType: number = a.dataType): ProgramInfo => {\n      const isBroadcast = !ShapeUtil.areEqual(a.dims, b.dims);\n      let outputShape = a.dims;\n      let outputSize = ShapeUtil.size(a.dims);\n\n      let vectorize = false;\n\n      // TODO: deal with zero-sized tensors (eg. dims=[1,0])\n\n      if (isBroadcast) {\n        const calculatedShape = BroadcastUtil.calcShape(a.dims, b.dims, false);\n        if (!calculatedShape) {\n          throw new Error('Can\\'t perform binary op on the given tensors');\n        }\n        outputShape = calculatedShape;\n        outputSize = ShapeUtil.size(outputShape);\n        const isAOneElement = ShapeUtil.size(a.dims) === 1;\n        const isBOneElement = ShapeUtil.size(b.dims) === 1;\n\n        // check whether vectorize can be enabled\n        let sharedDimension = 1;\n        for (let i = 1; i < outputShape.length; i++) {\n          const dimA = a.dims[a.dims.length - i] ?? 1;\n          const dimB = b.dims[b.dims.length - i] ?? 1;\n          if (dimA === dimB) {\n            sharedDimension *= dimA;\n          } else {\n            break;\n          }\n        }\n        if (sharedDimension % 4 === 0 || isAOneElement || isBOneElement) {\n          vectorize = true;\n        }\n      } else {\n        // element-wise\n        vectorize = true;\n      }\n\n      return {\n        ...metadata,\n        getShaderSource: (shaderHelper) => createBinaryOpProgramShader(\n            shaderHelper, a.dims, b.dims, outputShape, vectorize, isBroadcast, funcCall, a.dataType, b.dataType,\n            outputDataType, additionalImplementation),\n        outputs: [{dims: outputShape, dataType: outputDataType, gpuDataType: GpuDataType.default}],\n        dispatchGroup: () => ({x: Math.ceil(outputSize / 64 /* workgroup size */ / 4 /* component size */)})\n      };\n    };\n\nconst createBinaryOpProgramInfoLoader =\n    (inputs: readonly TensorView[], name: string, funcCall: BinaryFunctionCall, additionalImplementation?: string,\n     cacheKey?: string, outputDataType?: number): ProgramInfoLoader => {\n      const metadata:\n          ProgramMetadata = {name, inputTypes: [GpuDataType.default, GpuDataType.default], cacheHint: cacheKey};\n      return {\n        ...metadata,\n        get: () => createBinaryOpProgramInfo(\n            metadata, inputs[0], inputs[1], funcCall, additionalImplementation, outputDataType)\n      };\n    };\n\nexport const add = (context: ComputeContext): void => {\n  context.compute(createBinaryOpProgramInfoLoader(context.inputs, 'Add', (a, b) => `${a}+${b}`));\n};\n\nexport const div = (context: ComputeContext): void => {\n  context.compute(createBinaryOpProgramInfoLoader(context.inputs, 'Div', (a, b) => `${a}/${b}`));\n};\n\nexport const equal = (context: ComputeContext): void => {\n  context.compute(createBinaryOpProgramInfoLoader(\n      context.inputs, 'Equal', ({scalar: (a, b) => `u32(${a}==${b})`, vector: (a, b) => `vec4<u32>(${a}==${b})`}),\n      undefined, undefined, DataType.bool));\n};\n\nexport const mul = (context: ComputeContext): void => {\n  context.compute(createBinaryOpProgramInfoLoader(context.inputs, 'Mul', (a, b) => `${a}*${b}`));\n};\n\nexport const pow = (context: ComputeContext): void => {\n  const type = inputVariable('input', context.inputs[0].dataType, context.inputs[0].dims).type.value;\n  const roundStr = type === 'i32' ? 'round' : '';\n  context.compute(createBinaryOpProgramInfoLoader(\n      context.inputs, 'Pow',\n      ({scalar: (a, b) => `pow_custom(${a},${b})`, vector: (a, b) => `pow_vector_custom(${a},${b})`}),\n      `\n    fn pow_custom(a : ${type}, b : ${type}) -> ${type} {\n      if (b == ${type}(0.0)) {\n        return ${type}(1.0);\n      } else if (a < ${type}(0.0) && f32(b) != floor(f32(b))) {\n        return ${type}(pow(f32(a), f32(b))); // NaN\n      }\n      return select(sign(a), ${type}(1.0), round(f32(abs(b) % ${type}(2.0))) != 1.0) * ${type}(${\n          roundStr}(pow(f32(abs(a)), f32(b))));\n    }\n    fn pow_vector_custom(a : vec4<${type}>, b : vec4<${type}>) -> vec4<${type}> {\n      // TODO: implement vectorized pow\n      return vec4<${type}>(pow_custom(a.x, b.x), pow_custom(a.y, b.y), pow_custom(a.z, b.z), pow_custom(a.w, b.w));\n    }\n      `));\n};\n\nexport const sub = (context: ComputeContext): void => {\n  context.compute(createBinaryOpProgramInfoLoader(context.inputs, 'Sub', (a, b) => `${a}-${b}`));\n};\n\nexport const greater = (context: ComputeContext): void => {\n  context.compute(createBinaryOpProgramInfoLoader(\n      context.inputs, 'Greater', ({scalar: (a, b) => `u32(${a}>${b})`, vector: (a, b) => `vec4<u32>(${a}>${b})`}),\n      undefined, undefined, DataType.bool));\n};\n\nexport const less = (context: ComputeContext): void => {\n  context.compute(createBinaryOpProgramInfoLoader(\n      context.inputs, 'Less', ({scalar: (a, b) => `u32(${a}<${b})`, vector: (a, b) => `vec4<u32>(${a}<${b})`}),\n      undefined, undefined, DataType.bool));\n};\n\nexport const greaterOrEqual = (context: ComputeContext): void => {\n  context.compute(createBinaryOpProgramInfoLoader(\n      context.inputs, 'GreaterOrEqual',\n      ({scalar: (a, b) => `u32(${a}>=${b})`, vector: (a, b) => `vec4<u32>(${a}>=${b})`}), undefined, undefined,\n      DataType.bool));\n};\n\nexport const lessOrEqual = (context: ComputeContext): void => {\n  context.compute(createBinaryOpProgramInfoLoader(\n      context.inputs, 'LessOrEqual', ({scalar: (a, b) => `u32(${a}<=${b})`, vector: (a, b) => `vec4<u32>(${a}<=${b})`}),\n      undefined, undefined, DataType.bool));\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {DataType} from '../../../wasm-common';\nimport {ShapeUtil} from '../../util';\n\n/**\n * constant value for a workgroup size.\n *\n * We definitely can do further optimization in future, but for now we use 64.\n *\n * rule of thumb: Use [a workgroup size of] 64 unless you know what GPU you are targeting or that your workload\n *                needs something different.\n *\n * from: https://surma.dev/things/webgpu/\n **/\nexport const WORKGROUP_SIZE = 64;\n\ninterface IndicesHelperTypes {\n  /**\n   * WGSL type of indices expression\n   */\n  readonly indices: string;\n\n  /**\n   * WGSL type of a value\n   */\n  readonly value: string;\n\n  /**\n   * WGSL type of storage type representing a value\n   *\n   * This is usually the same to `value`, but for some type (eg. bool), we need to use `u32` as storage type for\n   * value type `vec4<bool>`\n   */\n  readonly storage: string;\n\n  /**\n   * tensor type as represented in TensorView\n   */\n  readonly tensor: number;\n}\n\n/**\n * A helper class for generating WGSL code for manipulating indices and data for a shader's input or output.\n *\n * This class is designed to offer a unified way to generate WGSL code for manipulating indices and data for a shader's\n * input or output.\n *\n * The following is a list of terminologies used in this class:\n * - `offset`: a uint32 value representing the offset of an element in the data buffer.\n * - `indices`: an abstraction of a multi-dimensional array's indices representing the data's index on each dimension.\n * - `value`: a value of a data element.\n *\n * Users are expected to create an instance of this class for each shader's input or output, and use the instance to\n * generate WGSL code for manipulating indices and data. The following 2 exported functions are for users to call to\n * create an instance of an indices helper:\n * - `inputVariable()`: create an indices helper instance for an input.\n * - `outputVariable()`: create an indices helper instance for an output.\n *\n * An indices helper instance contains helper functions for the following operations:\n * - access readonly basic information, including: `name`(the name of the input or output), `usage`(whether it's an\n * input or an output) and `shape`(the passed in shape).\n * - `type`: access readonly type information, including: `indices`(the type of indices), `value`(the type of value at\n * runtime), `storage`(the type of value at storage) and `tensor`(the tensor type as represented in TensorView).\n * - generate WGSL code for getting indices from offset. Use `offsetToIndices()` for WGSL code snippet to calculate\n * indices from offset, and use `indicesToOffset()` for WGSL code snippet to calculate offset from indices.\n * - to manipulate an instance of indices, use `setIndices()` and `getIndices()` to set and get the indices on an\n * indices variable.\n * - to manipulate data, use `set()`/`get()` to access data at the given indices from parameter list, use\n * `setByIndices()`/`getByIndices()` to access data at the given indices from an indices variable, and use\n * `setByOffset()`/`getByOffset()` to access data at the given offset.\n * - `impl`: get WGSL code of function implementation for the util functions mentioned above.\n */\nexport interface IndicesHelper {\n  /**\n   * get WGSL code of function implementation for the util functions.\n   *\n   */\n  readonly impl: () => string;\n\n  /**\n   * get type info\n   */\n  readonly type: IndicesHelperTypes;\n\n  /**\n   * WGSL code of a expression for getting indices from offset.\n   *\n   * @param varOffset - a u32 expression representing the offset.\n   *\n   * @returns an `type.indices` expression\n   */\n  readonly offsetToIndices: (varOffset: string) => string;\n\n  /**\n   * WGSL code of an `u32` expression for getting offset from indices.\n   *\n   * @param varIndices - a `type.indices` expression representing the indices.\n   *\n   * @returns an `u32` expression\n   */\n  readonly indicesToOffset: (varIndices: string) => string;\n\n  /**\n   * WGSL code of an `u32` expression for getting original offset from broadcasted indices.\n   *\n   * @param varIndices - a `type.indices` expression representing the output indices.\n   * @param output - output IndicesHelper.\n   *\n   * @returns an `u32` expression\n   */\n  readonly broadcastedIndicesToOffset: (varIndices: string, output: IndicesHelper) => string;\n\n  /**\n   * WGSL code of generating an indices literal\n   *\n   * @param init - initial value.\n   */\n  readonly indices: (...init: ReadonlyArray<number|string>) => string;\n\n  /**\n   * WGSL code of a statement for setting indices.\n   *\n   * @param varIndices - a variable name for the indices.\n   * @param idx - the index of the indices to set. can be a number or a string (WGSL `u32` expression).\n   * @param value - the value to set. can be a number or a string (WGSL `u32` expression).\n   *\n   * @returns a WGSL statement\n   */\n  readonly indicesSet: (varIndices: string, idx: number|string, value: number|string) => void;\n\n  /**\n   * WGSL code of an `u32` expression for getting indices.\n   *\n   * @param varIndices - a variable name for the indices.\n   * @param idx - the index of the indices to get. can be a number or a string (WGSL `u32` expression).\n   *\n   * @returns an `u32` expression\n   */\n  readonly indicesGet: (varIndices: string, idx: number|string) => string;\n\n  /**\n   * WGSL code for a statement for setting data at the given indices.\n   *\n   * @param indicesAndValue - an array of numbers or strings (WGSL `u32` expression) representing the indices, followed\n   *     by the value to set. This array should have exactly `shape.length + 1` elements.\n   */\n  readonly set: (...indicesAndValue: ReadonlyArray<number|string>) => string;\n\n  /**\n   * WGSL code for a statement for setting data at the given indices variable.\n   *\n   * @param varIndices - a variable name for the indices.\n   * @param value - the value to set. should be a WGSL expression.\n   */\n  readonly setByIndices: (varIndices: string, value: string) => string;\n\n  /**\n   * WGSL code for a statement for setting data at the given offset.\n   *\n   * @param offset - a number or a string (WGSL `u32` expression) representing the offset.\n   * @param value - the value to set. should be a WGSL expression.\n   */\n  readonly setByOffset: (offset: number|string, value: string) => string;\n\n  /**\n   * WGSL code for an expression for getting data at the given indices.\n   *\n   * @param indices - an array of numbers or strings (WGSL `u32` expression) representing the indices.\n   */\n  readonly get: (...indices: ReadonlyArray<number|string>) => string;\n\n  /**\n   * WGSL code for an expression for getting data at the given indices variable.\n   *\n   * @param varIndices - a variable name for the indices.\n   */\n  readonly getByIndices: (varIndices: string) => string;\n\n  /**\n   * WGSL code for an expression for getting data at the given offset.\n   *\n   * @param offset - a number or a string (WGSL `u32` expression) representing the offset.\n   */\n  readonly getByOffset: (offset: number|string) => string;\n\n  /**\n   * name of the data variable\n   */\n  readonly name: string;\n\n  /**\n   * whether the helper is for an input or an output.\n   */\n  readonly usage: 'input'|'output';\n\n  /**\n   * the shape of the input or output.\n   */\n  readonly shape: readonly number[];\n}\n\nconst getWgslMappedType = (type: number, components: 1|2|3|4): string|[string, string] => {\n  if (components === 3) {\n    throw new Error('vec3 has same alignment as vec4, use vec4 instead');\n  }\n\n  // return type is [ storage type, runtime type ] or a single string for both\n  switch (type) {\n    case DataType.float16:\n      return components > 1 ? `vec${components}<f16>` : 'f16';\n    case DataType.float:\n      return components > 1 ? `vec${components}<f32>` : 'f32';\n    case DataType.int32:\n      return components > 1 ? `vec${components}<i32>` : 'i32';\n    case DataType.uint32:\n      return components > 1 ? `vec${components}<u32>` : 'u32';\n    case DataType.int64:\n      if (components > 1) {\n        throw new Error('currently not supported vecX of uint64 yet');\n      }\n      return ['vec2<u32>', 'i32'];\n    case DataType.uint64:\n      if (components > 1) {\n        throw new Error('currently not supported vecX of uint64 yet');\n      }\n      return ['vec2<u32>', 'u32'];\n    case DataType.bool:\n      if (components !== 4) {\n        throw new Error('bool must be vec4');\n      }\n      return ['u32', 'vec4<bool>'];\n\n    default:\n      throw new Error(`Unknown data type: ${type}`);\n  }\n};\n\nexport const tensorTypeToWsglStorageType = (type: DataType, components: 1|2|3|4 = 1) => {\n  const mappedType = getWgslMappedType(type, components);\n  return typeof mappedType === 'string' ? mappedType : mappedType[0];\n};\n\nexport const tensorTypeToWsglValueType = (type: DataType, components: 1|2|3|4 = 1) => {\n  const mappedType = getWgslMappedType(type, components);\n  return typeof mappedType === 'string' ? mappedType : mappedType[1];\n};\n\n/**\n * A helper function to get a IndicesHelper for a given input or output.\n *\n * @param name - the name of the input or output.\n * @param tensorType - the tensor type of the input or output.\n * @param shape - the tensor shape of the input or output.\n * @param isInput - whether the helper is for an input or an output.\n * @param components - indicates the number of components of each element. 1 for scalar, 2 for vec2, 3 for vec3, 4 for\n *    vec4.\n */\nconst createIndicesHelper =\n    (name: string, tensorType: number, shape: readonly number[], isInput: boolean,\n     components: 1|2|3|4): IndicesHelper => {\n      const rank = shape.length;\n      const indicesType = rank < 2 ? 'u32' : rank <= 4 ? `vec${rank}<u32>` : `array<u32, ${rank}>`;\n      const mappedType = getWgslMappedType(tensorType, components);\n      const valueType = typeof mappedType === 'string' ? mappedType : mappedType[1];\n      const storageType = typeof mappedType === 'string' ? mappedType : mappedType[0];\n      const type = {indices: indicesType, value: valueType, storage: storageType, tensor: tensorType};\n\n      const normalizeDim = (dim: number|string): string => typeof dim === 'string' ? dim : `${dim}u`;\n\n      const implementationUsed = {\n        offsetToIndices: false,\n        indicesToOffset: false,\n        broadcastedIndicesToOffset: false,\n        set: false,\n        setByIndices: false,\n        get: false,\n        getByIndices: false,\n      };\n\n      const strides = ShapeUtil.computeStrides(shape);\n      let o2iSnippet = '';\n      for (let i = 0; i < rank - 1; i++) {\n        o2iSnippet += `\n    let dim${i} = current / ${strides[i]}u;\n    let rest${i} = current % ${strides[i]}u;\n    indices[${i}] = dim${i};\n    current = rest${i};\n    `;\n      }\n      o2iSnippet += `indices[${rank - 1}] = current;`;\n\n      const offsetToIndicesImplementation = rank < 2 ? '' : `\n  fn o2i_${name}(offset: u32) -> ${type.indices} {\n    var indices: ${type.indices};\n    var current = offset;\n    ${o2iSnippet}\n    return indices;\n  }`;\n\n      const offsetToIndices = (varOffset: string) => {\n        implementationUsed.offsetToIndices = true;\n        return rank < 2 ? varOffset : `o2i_${name}(${varOffset})`;\n      };\n\n      const offsets: string[] = [];\n      if (rank >= 2) {\n        for (let i = rank - 1; i >= 0; i--) {\n          offsets.push(`${strides[i]}u * (indices[${i}])`);\n        }\n      }\n\n      const indicesToOffsetImplementation = rank < 2 ? '' : `\n  fn i2o_${name}(indices: ${type.indices}) -> u32 {\n    return ${offsets.join('+')};\n  }`;\n\n      const indicesToOffset = (varIndices: string) => {\n        implementationUsed.indicesToOffset = true;\n        return rank < 2 ? varIndices : `i2o_${name}(${varIndices})`;\n      };\n\n      const broadcastedIndicesToOffsetImplementation: {[key: string]: string} = {};\n      const broadcastedIndicesToOffset = (varIndices: string, output: IndicesHelper) => {\n        implementationUsed.broadcastedIndicesToOffset = true;\n        const implKey = `${output.name}broadcastedIndicesTo${name}Offset`;\n        if (implKey in broadcastedIndicesToOffsetImplementation) {\n          return `${implKey}(${varIndices})`;\n        }\n        const offsets = [];\n        for (let i = shape.length - 1; i >= 0; i--) {\n          const idx = output.indicesGet('outputIndices', i + output.shape.length - shape.length);\n          offsets.push(`${strides[i]}u * (${idx} % ${shape[i]}u)`);\n        }\n        broadcastedIndicesToOffsetImplementation[implKey] =\n            `fn ${implKey}(outputIndices: ${output.type.indices}) -> u32 {\n             return ${offsets.length > 0 ? offsets.join('+') : '0u'};\n           }`;\n\n        return `${implKey}(${varIndices})`;\n      };\n\n      const indices = (...init: ReadonlyArray<number|string>) =>\n          rank === 0 ? '0u' : `${type.indices}(${init.map(normalizeDim).join(',')})`;\n\n      const indicesGet = (varIndices: string, idx: number|string) => {\n        if (rank < 2) {\n          return `${varIndices}`;\n        } else {\n          return `${varIndices}[${idx}]`;\n        }\n      };\n\n      const indicesSet = (varIndices: string, idx: number|string, value: string) => {\n        if (rank < 2) {\n          return `${varIndices}=${value};`;\n        } else {\n          return `${varIndices}[${idx}]=${value};`;\n        }\n      };\n\n      const setByOffset = (offset: number|string, value: string) => (() => {\n        if (type.storage === type.value) {\n          return `${name}[${offset}]=${value};`;\n        } else if (type.storage === 'vec2<u32>' && type.value === 'i32') {\n          // int64, components === 1\n          return `${name}[${offset}]=vec2<u32>(u32(${value}), select(0u, 0xFFFFFFFFu, ${value} < 0));`;\n        } else if (type.storage === 'vec2<u32>' && type.value === 'u32') {\n          // uint64, components === 1\n          return `${name}[${offset}]=vec2<u32>(u32(${value}), 0u);`;\n        } else if (type.storage === 'u32' && type.value === 'vec4<bool>') {\n          // bool, components === 4\n          return `${name}[${offset}]=dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(${value}));`;\n        } else {\n          throw new Error(`not supported combination of storage type ${type.storage} and value type ${type.value} yet`);\n        }\n      })();\n\n      const getByOffset = (offset: number|string) => (() => {\n        if (type.storage === type.value) {\n          return `${name}[${offset}]`;\n        } else if (type.storage === 'vec2<u32>' && type.value === 'i32') {\n          // int64, components === 1\n          return `i32(${name}[${offset}].x)`;\n        } else if (type.storage === 'vec2<u32>' && type.value === 'u32') {\n          // uint64, components === 1\n          return `u32(${name}[${offset}].x)`;\n        } else if (type.storage === 'u32' && type.value === 'vec4<bool>') {\n          // bool, components === 4\n          return `vec4<bool>(bool(${name}[${offset}] & 0xFFu), bool(${name}[${offset}] & 0xFF00u), bool(${name}[${\n              offset}] & 0xFF0000u), bool(${name}[${offset}] & 0xFF000000u))`;\n        } else {\n          throw new Error(`not supported combination of storage type ${type.storage} and value type ${type.value} yet`);\n        }\n      })();\n\n      const getByIndicesImplementation = rank < 2 ? '' : `\n  fn get_${name}ByIndices(indices: ${type.indices}) -> ${valueType} {\n    return ${getByOffset(`i2o_${name}(indices)`)};\n  }`;\n\n      const getImplementation = rank < 2 ? '' : (() => {\n        const params = shape.map((_, i) => `d${i}: u32`).join(', ');\n        const dims = shape.map((_, i) => `d${i}`).join(', ');\n        return `\n  fn get_${name}(${params}) -> ${valueType} {\n    return get_${name}ByIndices(${indices(dims)});\n  }`;\n      })();\n\n      const get = (...indices: ReadonlyArray<number|string>) => {\n        if (indices.length !== rank) {\n          throw new Error(`indices length must be ${rank}`);\n        }\n\n        const normalizedIndices = indices.map(normalizeDim).join(',');\n\n        if (rank === 0) {\n          return getByOffset('0u');\n        } else if (rank === 1) {\n          return getByOffset(normalizedIndices[0]);\n        } else {\n          implementationUsed.get = true;\n          implementationUsed.getByIndices = true;\n          implementationUsed.indicesToOffset = true;\n          return `get_${name}(${normalizedIndices})`;\n        }\n      };\n\n      const getByIndices = (varIndices: string) => {\n        if (rank < 2) {\n          return getByOffset(varIndices);\n        } else {\n          implementationUsed.getByIndices = true;\n          implementationUsed.indicesToOffset = true;\n          return `get_${name}ByIndices(${varIndices})`;\n        }\n      };\n\n      const setByIndicesImplementation = rank < 2 ? '' : `\n  fn set_${name}ByIndices(indices: ${type.indices}, value: ${valueType}) {\n    ${setByOffset(`i2o_${name}(indices)`, 'value')}\n  }`;\n\n      const setImplementation = rank < 2 ? '' : (() => {\n        const params = shape.map((_, i) => `d${i}: u32`).join(', ');\n        const dims = shape.map((_, i) => `d${i}`).join(', ');\n        return `\n  fn set_${name}(${params}, value: ${valueType}) {\n    set_${name}ByIndices(${indices(dims)}, value);\n  }`;\n      })();\n\n      const set = (...indicesAndValue: ReadonlyArray<number|string>) => {\n        if (indicesAndValue.length !== rank + 1) {\n          throw new Error(`indices length must be ${rank}`);\n        }\n        const value = indicesAndValue[rank];\n        if (typeof value !== 'string') {\n          throw new Error('value must be string');\n        }\n\n        const normalizedIndices = indicesAndValue.slice(0, rank).map(normalizeDim).join(',');\n\n        if (rank === 0) {\n          return setByOffset('0u', value);\n        } else if (rank === 1) {\n          return setByOffset(normalizedIndices[0], value);\n        } else {\n          implementationUsed.set = true;\n          implementationUsed.setByIndices = true;\n          implementationUsed.indicesToOffset = true;\n          return `set_${name}(${normalizedIndices}, ${value})`;\n        }\n      };\n\n      const setByIndices = (varIndices: string, value: string) => {\n        if (rank < 2) {\n          return setByOffset(varIndices, value);\n        } else {\n          implementationUsed.setByIndices = true;\n          implementationUsed.indicesToOffset = true;\n          return `set_${name}ByIndices(${varIndices}, ${value});`;\n        }\n      };\n\n      const impl = () => {\n        const impls = [];\n        if (implementationUsed.offsetToIndices) {\n          impls.push(offsetToIndicesImplementation);\n        }\n        if (implementationUsed.indicesToOffset) {\n          impls.push(indicesToOffsetImplementation);\n        }\n        if (implementationUsed.broadcastedIndicesToOffset) {\n          Object.values(broadcastedIndicesToOffsetImplementation).forEach(impl => impls.push(impl));\n        }\n        if (implementationUsed.set) {\n          impls.push(setImplementation);\n        }\n        if (implementationUsed.setByIndices) {\n          impls.push(setByIndicesImplementation);\n        }\n        if (implementationUsed.get) {\n          impls.push(getImplementation);\n        }\n        if (implementationUsed.getByIndices) {\n          impls.push(getByIndicesImplementation);\n        }\n        return impls.join('\\n');\n      };\n\n      return {\n        impl,\n        type,\n        offsetToIndices,\n        indicesToOffset,\n        broadcastedIndicesToOffset,\n        indices,\n        indicesGet,\n        indicesSet,\n        set,\n        setByOffset,\n        setByIndices,\n        get,\n        getByOffset,\n        getByIndices,\n        // isVec4,\n        usage: isInput ? 'input' : 'output',\n        name,\n        shape\n      };\n    };\n\n/**\n * Create a IndicesHelper for an input.\n *\n * @param name - the name of the input.\n * @param type - the tensor type of the input.\n * @param shape - the tensor shape of the input.\n * @param components - the number of components of the input. available values are 1, 2, 3, 4. default is 1.\n * @returns an IndicesHelper for the input.\n */\nexport const inputVariable =\n    (name: string, type: number, shape: readonly number[], components: 1|2|3|4 = 1): IndicesHelper =>\n        createIndicesHelper(name, type, shape, true, components);\n\n/**\n * Create a IndicesHelper for an output.\n *\n * @param name - the name of the output.\n * @param type - the tensor type of the output.\n * @param shape - the tensor shape of the output.\n * @param components - the number of components of the input. available values are 1, 2, 3, 4. default is 1.\n * @returns an IndicesHelper for the output.\n */\nexport const outputVariable =\n    (name: string, type: number, shape: readonly number[], components: 1|2|3|4 = 1): IndicesHelper =>\n        createIndicesHelper(name, type, shape, false, components);\n\n/**\n * A ShaderHelper is a helper class for generating WGSL code.\n */\nexport interface ShaderHelper {\n  /**\n   * A helper function to generate the start of main function in WGSL source code.\n   *\n   * @example\n   * const getShaderSource = (shaderHelper: ShaderHelper) => `\n   *  ...\n   *\n   *  ${shaderHelper.mainStart()}\n   *    // your code here inside main() function\n   *    ...\n   *  }\n   * `;\n   *\n   * @param workgroupSize - an optional workgroup size. default is WORKGROUP_SIZE.\n   */\n  mainStart(workgroupSize?: number|[number, number, number]): string;\n\n  /**\n   * A helper function to generate the code snippet for guarding against out-of-bounds size.\n   *\n   * @example\n   * const getShaderSource = (shaderHelper: ShaderHelper) => `\n   *  ...\n   *\n   *  ${shaderHelper.mainStart()}\n   *    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\n   *\n   *    // your code here inside main() function\n   *    ...\n   *  }\n   * `;\n   *\n   * @param size - the size of the data to guard against. can be a number or a string (WGSL `u32` expression).\n   */\n  guardAgainstOutOfBoundsWorkgroupSizes(size: unknown): string;\n\n  /**\n   * A helper function to generate the code snippet for declaring multiple inputs or outputs.\n   *\n   * @param variables - an array of IndicesHelper for the variables.\n   */\n  declareVariables(...variables: IndicesHelper[]): string;\n\n  /**\n   * Get additional implementation that needs to be added to the shader source.\n   */\n  readonly additionalImplementations: string;\n}\n\nclass ShaderHelperImpl implements ShaderHelper {\n  constructor(private normalizedDispatchGroup: [number, number, number]) {}\n\n  guardAgainstOutOfBoundsWorkgroupSizes(size: number|string): string {\n    // Guard against out-of-bounds work group sizes\n    const sizeInCode = typeof size === 'number' ? `${size}u` : size;\n    return `if (global_idx >= ${sizeInCode}) { return; }`;\n  }\n\n  mainStart(workgroupSize: number|[number, number, number] = WORKGROUP_SIZE) {\n    const workgroupSizeX = typeof workgroupSize === 'number' ? workgroupSize : workgroupSize[0];\n    const workgroupSizeY = typeof workgroupSize === 'number' ? 1 : workgroupSize[1];\n    const workgroupSizeZ = typeof workgroupSize === 'number' ? 1 : workgroupSize[2];\n\n    const is1DimensionDispatch = this.normalizedDispatchGroup[1] === 1 && this.normalizedDispatchGroup[2] === 1;\n    const paramList = is1DimensionDispatch ? `@builtin(global_invocation_id) global_id : vec3<u32>,\n    @builtin(local_invocation_id) local_id : vec3<u32>` :\n                                             `@builtin(local_invocation_index) local_index : u32,\n    @builtin(workgroup_id) workgroup_id : vec3<u32>`;\n    const globalIdxDefinition = is1DimensionDispatch ?\n        'let global_idx = global_id.x;' :\n        `let global_idx = (workgroup_id.z * ${this.normalizedDispatchGroup[0] * this.normalizedDispatchGroup[1]}u +\n          workgroup_id.y * ${this.normalizedDispatchGroup[0]}u + workgroup_id.x) * ${\n            workgroupSizeX * workgroupSizeY * workgroupSizeZ}u + local_index;`;\n\n    return `@compute @workgroup_size(${workgroupSizeX}, ${workgroupSizeY}, ${workgroupSizeZ})\n  fn main(${paramList}) {\n    ${globalIdxDefinition}\n  `;\n  }\n\n  declareVariable(variable: IndicesHelper, bindingIndex: number): string {\n    this.indicesHelpers.push(variable);\n    const access = variable.usage === 'input' ? 'read' : 'read_write';\n    const storageType = variable.type.storage;\n    return `@group(0) @binding(${bindingIndex}) var<storage, ${access}> ${variable.name}: array<${storageType}>;`;\n  }\n\n  declareVariables(...variables: IndicesHelper[]): string {\n    let i = 0;\n    return variables.filter(v => ShapeUtil.size(v.shape) > 0).map(v => this.declareVariable(v, i++)).join('\\n');\n  }\n\n  private indicesHelpers: IndicesHelper[] = [];\n\n  get additionalImplementations(): string {\n    return this.indicesHelpers.map(i => i.impl()).join('\\n');\n  }\n}\n\nexport const createShaderHelper = (dispatchGroup: [number, number, number]): ShaderHelper =>\n    new ShaderHelperImpl(dispatchGroup);\n\n/**\n * This function comes from https://github.com/tensorflow/tfjs/blob/master/tfjs-core/src/ops/broadcast_util.ts#L18-L40\n * Returns the dimensions in the input shape that are broadcasted to\n * produce the provided output shape.\n *\n * The returned dimensions are 0-indexed and sorted. An example:\n * inShape = [4, 1, 3]\n * outShape = [5, 4, 3, 3]\n * result = [1]. Dimension 1 (2nd dimension of input) gets broadcasted 1 => 3.\n */\nexport const getBroadcastDims = (inShape: readonly number[], outShape: readonly number[]): number[] => {\n  const inRank = inShape.length;\n  const dims: number[] = [];\n  for (let i = 0; i < inRank; i++) {\n    const dim = inRank - 1 - i;\n    const a = inShape[dim] || 1;\n    const b = outShape[outShape.length - 1 - i] || 1;\n    if (b > 1 && a === 1) {\n      dims.unshift(dim);\n    }\n  }\n  return dims;\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {TensorView} from '../../tensor-view';\nimport {ShapeUtil} from '../../util';\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramInfoLoader, ProgramMetadata} from '../types';\n\nimport {IndicesHelper, inputVariable, outputVariable, ShaderHelper} from './common';\n\nexport interface ConcatAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n}\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (!inputs || inputs.length < 1) {\n    throw new Error('too few inputs');\n  }\n\n  const inputType = inputs[0].dataType;\n  const inputDimensionality = inputs[0].dims.length;\n\n  for (const input of inputs) {\n    // make sure types of all inputs match\n    if (input.dataType !== inputType) {\n      throw new Error('input tensors should be one type');\n    }\n\n    // make sure the dimensionality of all inputs are the same\n    if (input.dims.length !== inputDimensionality) {\n      throw new Error('input tensors should have the same shape');\n    }\n  }\n};\n\nconst createConcatProgramMetadata = (inputCount: number, cacheHint: string) =>\n    ({name: 'Concat', inputTypes: Array(inputCount).fill(GpuDataType.default), cacheHint});\n\nconst calculateInputIndexImpl = (numberOfTensors: number): string => `\n  fn calculateInputIndex(index: u32) -> u32 {\n    for (var i: u32 = 0u; i < ${numberOfTensors}u; i += 1u ) {\n      if (index < sizeInConcatAxis[i]) {\n        return i;\n      }\n    }\n    return ${numberOfTensors}u;\n  }`;\n\nconst assignOutputData = (inputs: readonly IndicesHelper[], output: IndicesHelper) => {\n  const numberOfTensors = inputs.length;\n\n  const codeLines: string[] = [];\n  for (let i = 0; i < numberOfTensors; ++i) {\n    const returnSnippet = output.setByOffset('global_idx', inputs[i].getByIndices('indices'));\n    if (numberOfTensors === 1) {\n      codeLines.push(returnSnippet);\n    } else if (i === 0) {\n      codeLines.push(`if (inputIndex == ${i}u) { ${returnSnippet} }`);\n    } else if (i === numberOfTensors - 1) {\n      codeLines.push(`else { ${returnSnippet} }`);\n    } else {\n      codeLines.push(`else if (inputIndex == ${i}) { ${returnSnippet} }`);\n    }\n  }\n  return codeLines.join('\\n');\n};\n\nconst createConcatProgramInfo =\n    (metadata: ProgramMetadata, inputs: readonly TensorView[], axis: number): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      if (axis >= inputShape.length || axis < (-1 * inputShape.length)) {\n        throw new Error('axis specified for concat doesn\\'t match input dimensionality');\n      }\n      const adjustedAxis = (axis < 0) ? inputShape.length + axis : axis;\n      // ensure all of the non-concatenated axes match each other\n      // calculate the shape of the output tensor while we do that\n      const outputShape = inputShape.slice(0);\n      for (let i = 1; i < inputs.length; i++) {\n        const dataNShape = inputs[i].dims.slice();\n        for (let axisIndex = 0; axisIndex < inputShape.length; axisIndex++) {\n          // add to the placeholder for computing output shape\n          if (axisIndex === adjustedAxis) {\n            outputShape[adjustedAxis] += dataNShape[axisIndex];\n          }\n          // ensure all non-cancatenated axes match each other\n          else if (inputShape[axisIndex] !== dataNShape[axisIndex]) {\n            throw new Error('non concat dimensions must match');\n          }\n        }\n      }\n\n      const outputSize = ShapeUtil.size(outputShape);\n\n      const sizeInConcatAxis = new Array<number>(inputs.length);\n      const inputVars = new Array<IndicesHelper>(inputs.length);\n      const dataType = inputs[0].dataType;\n\n      let previousSum = 0;\n      for (let i = 0; i < inputs.length; ++i) {\n        previousSum += inputs[i].dims[adjustedAxis];\n        sizeInConcatAxis[i] = previousSum;\n\n        inputVars[i] = inputVariable(`input${i}`, dataType, inputs[i].dims);\n      }\n\n      const output = outputVariable('output', dataType, outputShape);\n\n      const indicesAxis = output.indicesGet('indices', adjustedAxis);\n      const getShaderSource = (shaderHelper: ShaderHelper) => `\n  ${shaderHelper.declareVariables(...inputVars, output)}\n\n  const sizeInConcatAxis = array<u32, ${sizeInConcatAxis.length}>(${sizeInConcatAxis.map(i => `${i}u`).join(',')});\n  ${calculateInputIndexImpl(sizeInConcatAxis.length)}\n\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\n\n    var indices = ${output.offsetToIndices('global_idx')};\n\n    let inputIndex = calculateInputIndex(${indicesAxis});\n    if (inputIndex != 0u) {\n      ${indicesAxis} -= sizeInConcatAxis[inputIndex - 1u];\n    }\n\n    ${assignOutputData(inputVars, output)}\n  }`;\n      return {\n        ...metadata,\n        outputs: [{dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default}],\n        getShaderSource,\n        dispatchGroup: () => ({x: Math.ceil(outputSize / 64 /* workgroup size */)})\n      };\n    };\n\nconst createConcatProgramInfoLoader =\n    (inputs: readonly TensorView[], attributes: ConcatAttributes): ProgramInfoLoader => {\n      const metadata = createConcatProgramMetadata(inputs.length, attributes.cacheKey);\n      return {...metadata, get: () => createConcatProgramInfo(metadata, inputs, attributes.axis)};\n    };\n\nexport const concat = (context: ComputeContext, attributes: ConcatAttributes): void => {\n  validateInputs(context.inputs);\n  context.compute(createConcatProgramInfoLoader(context.inputs, attributes));\n};\n\nexport const parseConcatAttributes = (attributes: Record<string, unknown>): ConcatAttributes =>\n    createAttributeWithCacheKey({axis: attributes.axis as number});\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {TensorView} from '../../tensor-view';\nimport {ShapeUtil} from '../../util';\nimport {GpuDataType, ProgramInfo, ProgramInfoLoader, ProgramMetadata} from '../types';\n\nimport {inputVariable, outputVariable, ShaderHelper} from './common';\nimport {calculateOutputShape, ConvAttributes} from './conv';\nimport {getActicationSnippet} from './fuse-utils';\n\nconst createGroupedConvProgramMetadata = (hasBias: boolean, cacheHint: string): ProgramMetadata => ({\n  name: 'GroupedConv',\n  inputTypes: hasBias ? [GpuDataType.default, GpuDataType.default, GpuDataType.default] :\n                        [GpuDataType.default, GpuDataType.default],\n  cacheHint\n});\n\nconst createGroupedConvProgramInfo =\n    (inputs: readonly TensorView[], metadata: ProgramMetadata, attributes: ConvAttributes,\n     squeezeOutputShapeFunction?: (shape: readonly number[]) => number[]): ProgramInfo => {\n      const hasBias = inputs.length > 2;\n      const processBias = hasBias ? 'value += b[output_channel];' : '';\n      const xShape = inputs[0].dims;\n      const wShape = inputs[1].dims;\n      const outputChannelsPerGroup = wShape[0] / attributes.group;\n\n      const {activationFunction, applyActivation} = getActicationSnippet(attributes);\n\n      const isChannelLast = attributes.format === 'NHWC';\n      const outputShape = calculateOutputShape(\n          xShape, wShape, attributes.dilations, attributes.pads, attributes.strides, isChannelLast);\n      const outputSize = ShapeUtil.size(outputShape);\n\n      const output = outputVariable('output', inputs[0].dataType, outputShape);\n      const x = inputVariable('x', inputs[0].dataType, xShape);\n      const w = inputVariable('w', inputs[1].dataType, wShape);\n      const inputVars = [x, w];\n      if (hasBias) {\n        inputVars.push(inputVariable('b', inputs[2].dataType, inputs[2].dims));\n      }\n\n      const getShaderSource = (shaderHelper: ShaderHelper) => `\n  const strides: vec2<u32> = vec2(${attributes.strides[0]}u, ${attributes.strides[1]}u);\n  const pads: vec2<u32> = vec2(${attributes.pads[0]}u, ${attributes.pads[1]}u);\n\n  ${shaderHelper.declareVariables(...inputVars, output)}\n\n  ${activationFunction}\n\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\n\n    let outputIndices = ${output.offsetToIndices('global_idx')};\n    let batch: u32 = outputIndices[0];\n    let output_channel: u32 = outputIndices[${isChannelLast ? 3 : 1}];\n    let xRCCorner: vec2<u32> = vec2<u32>(outputIndices[${isChannelLast ? 1 : 2}], outputIndices[${\n          isChannelLast ? 2 : 3}]) * strides - pads;\n    let group_id: u32 = output_channel / ${outputChannelsPerGroup}u;\n\n    var value: ${output.type.value} = ${output.type.value}(0);\n    for (var wInChannel: u32 = 0u; wInChannel < ${wShape[1]}u; wInChannel++) {\n      let input_channel = group_id * ${wShape[1]}u + wInChannel;\n      for (var wHeight: u32 = 0u; wHeight < ${wShape[2]}u; wHeight++) {\n        let xHeight = xRCCorner.x + wHeight * ${attributes.dilations[0]}u;\n\n        if (xHeight < 0u || xHeight >= ${xShape[isChannelLast ? 1 : 2]}u) {\n          continue;\n        }\n\n        for (var wWidth: u32 = 0u; wWidth < ${wShape[3]}u; wWidth++) {\n          let xWidth = xRCCorner.y + wWidth * ${attributes.dilations[1]}u;\n          if (xWidth < 0u || xWidth >= ${xShape[isChannelLast ? 2 : 3]}u) {\n            continue;\n          }\n\n          let xVal = ${\n          isChannelLast ? x.get('batch', 'xHeight', 'xWidth', 'input_channel') :\n                          x.get('batch', 'input_channel', 'xHeight', 'xWidth')};\n          let wVal = ${w.get('output_channel', 'wInChannel', 'wHeight', 'wWidth')};\n          value += xVal*wVal;\n        }\n      }\n    }\n    ${processBias}\n    ${applyActivation}\n    ${output.setByOffset('global_idx', 'value')}\n  }`;\n      return {\n        ...metadata,\n        outputs: [{\n          dims: squeezeOutputShapeFunction ? squeezeOutputShapeFunction(outputShape) : outputShape,\n          dataType: inputs[0].dataType,\n          gpuDataType: GpuDataType.default\n        }],\n        getShaderSource,\n        dispatchGroup: () => ({x: Math.ceil(outputSize / 64 /* workgroup size */)})\n      };\n    };\n\n/**\n * naive grouped conv implementation, supports 1d/2d conv\n * @param squeezeOutputShapeFunction - an optional function to squeeze the output shape, only used in conv1d\n */\nexport const createGroupedConvProgramInfoLoader =\n    (inputs: readonly TensorView[], attributes: ConvAttributes,\n     squeezeOutputShapeFunction?: (shape: readonly number[]) => number[]): ProgramInfoLoader => {\n      const metadata = createGroupedConvProgramMetadata(inputs.length > 2, attributes.cacheKey);\n      return {\n        ...metadata,\n        get: () => createGroupedConvProgramInfo(inputs, metadata, attributes, squeezeOutputShapeFunction)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {TensorView} from '../../tensor-view';\nimport {createAttributeWithCacheKey} from '../attribute-with-cache-key';\nimport {ComputeContext, GpuDataType, ProgramInfoLoader, ProgramMetadata} from '../types';\n\nimport {createConvTranspose2DProgramInfo} from './3rd-party/conv_backprop_webgpu';\nimport {ConvAttributes} from './conv';\nimport {createConv2DTransposeMatMulProgramInfoLoader} from './conv2dtranspose-mm';\nimport {parseInternalActivationAttributes} from './fuse-utils';\nimport {createTransposeProgramInfo, TransposeAttributes, transposeProgramMetadata} from './transpose';\n\nconst computeTotalPad =\n    (inDim: number, stride: number, adj: number, kernel: number, dilation: number, outSize: number) =>\n        (inDim - 1) * stride + adj + (kernel - 1) * dilation + 1 - outSize;\n\nconst distributePadding = (totalPad: number, autoPad: string, pads: number[], head: number, tail: number) => {\n  const smallPad = Math.floor(totalPad / 2);\n  if (autoPad === 'SAME_UPPER') {\n    pads[head] = smallPad;\n    pads[tail] = totalPad - smallPad;\n  } else if (autoPad === 'SAME_LOWER') {\n    pads[head] = totalPad - smallPad;\n    pads[tail] = smallPad;\n  }\n};\n\nconst calculateOutputShapeAndPads =\n    (inputShape: readonly number[], kernelShape: readonly number[], dilations: readonly number[], autoPad: string,\n     group: number, pads: number[], strides: readonly number[], isChannelLast: boolean, outputPadding: number[],\n     outputShape: number[]) => {\n      const spatialRank = inputShape.length - 2;\n      const updateOutputShape = outputShape.length === 0;\n      if (outputPadding.length === 0) {\n        for (let i = 0; i < spatialRank; ++i) {\n          outputPadding.push(0);\n        }\n      }\n      const batchSize = inputShape[0];\n      const outChannels = kernelShape[isChannelLast ? 3 : 1] * group;\n      for (let i = 0, j = inputShape.length - spatialRank - (isChannelLast ? 1 : 0); i < spatialRank; ++i, ++j) {\n        const inSize = inputShape[j];\n        const outSize = updateOutputShape ? inSize * strides[i] : outputShape[i];\n        const totalPad = computeTotalPad(inSize, strides[i], pads[i], kernelShape[j], dilations[i], outSize);\n        distributePadding(totalPad, autoPad, pads, i, i + spatialRank);\n        if (updateOutputShape) {\n          outputShape.push(\n              strides[i] * (inSize - 1) + outputPadding[i] + (kernelShape[j] - 1) * dilations[i] + 1 - pads[i] -\n              pads[i + spatialRank]);\n        }\n      }\n      outputShape.splice(0, 0, batchSize);\n      outputShape.splice(isChannelLast ? 3 : 1, 0, outChannels);\n    };\n\nexport interface ConvTransposeAttributes extends ConvAttributes {\n  readonly outputPadding: readonly number[];\n  readonly outputShape: readonly number[];\n}\n\n\nconst getAdjustedConvTransposeAttributes =\n    <T extends ConvTransposeAttributes>(attributes: T, inputs: readonly TensorView[]): T => {\n      const kernelShape = attributes.kernelShape.slice();\n      // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\n      if (attributes.kernelShape.length === 0 || attributes.kernelShape.reduce((a, b) => a * b, 1) === 0) {\n        kernelShape.length = 0;\n        for (let i = 2; i < inputs[1].dims.length; ++i) {\n          kernelShape.push(inputs[1].dims[i]);\n        }\n      }\n      const isChannelsLast = attributes.format === 'NHWC';\n      kernelShape.splice(0, 0, inputs[1].dims[0]);\n      kernelShape.splice(isChannelsLast ? 3 : 1, 0, inputs[1].dims[1]);\n\n      const pads = attributes.pads.slice();\n      const outputShape = attributes.outputShape.slice();\n      const outputPadding = attributes.outputPadding.slice();\n      const inputShape = inputs[0].dims;\n      let dilations = attributes.dilations.slice();\n      if (dilations.reduce((a, b) => a + b, 0) === 0) {\n        const spatialRank = inputs[0].dims.length - 2;\n        dilations = new Array(spatialRank).fill(1);\n      }\n      let strides = attributes.strides.slice();\n      if (strides.reduce((a, b) => a + b, 0) === 0) {\n        const spatialRank = inputs[0].dims.length - 2;\n        strides = new Array(spatialRank).fill(1);\n      }\n      // If outputShape is not specified in the attributes of this op, infer it from the parameters\n      // Similarly, automatically infer pads if not specified\n      calculateOutputShapeAndPads(\n          inputShape, kernelShape, dilations, attributes.autoPad, attributes.group, pads, strides, isChannelsLast,\n          outputPadding, outputShape);\n\n      // always return a new object so does not modify the original attributes\n      const newAttributes: T = Object.assign({}, attributes);\n      const cacheKey = attributes.cacheKey + [\n        kernelShape.join('n,'), pads.join(','), strides.join(','), outputPadding.join(','), outputShape.join(','),\n        dilations.join(',')\n      ].join('_');\n      Object.assign(newAttributes, {kernelShape, pads, outputPadding, outputShape, dilations, strides, cacheKey});\n      return newAttributes;\n    };\n\nexport const parseConvTransposeAttributes = (attributes: Record<string, unknown>): ConvTransposeAttributes => {\n  const activationAttributes = parseInternalActivationAttributes(attributes);\n  // TODO : Make this generic enough to compute default attributes for multi-dimensional conv\n  const format = attributes.format as 'NHWC' | 'NCHW';\n  const autoPad =\n      ['NOTSET', 'VALID', 'SAME_UPPER',\n       'SAME_LOWER'][typeof attributes.autoPad == 'undefined' ? 0 : attributes.autoPad as number];\n  const dilations = attributes.dilations as [number, number];\n  const group = attributes.group as number;\n  const kernelShape = attributes.kernelShape as [number, number];\n  const pads = attributes.pads as [number, number, number, number];\n  const strides = attributes.strides as [number, number];\n  const wIsConst = (attributes.wIsConst as () => boolean)();\n  const outputPadding = attributes.outputPadding as [number, number, number, number];\n  const outputShape = attributes.outputShape as [number, number];\n  return createAttributeWithCacheKey({\n    autoPad,\n    format,\n    dilations,\n    group,\n    kernelShape,\n    outputPadding,\n    outputShape,\n    pads,\n    strides,\n    wIsConst,\n    ...activationAttributes\n  });\n};\n\nconst validateInputs = (inputs: readonly TensorView[], attributes: ConvTransposeAttributes): void => {\n  // Refer to the below link for all input checks\n  // https://github.com/onnx/onnx/blob/main/docs/Operators.md#ConvTranspose\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Conv requires 2 or 3 inputs');\n  }\n\n  // TODO : Need to add support for multi-dimensional conv\n  if (inputs[0].dims.length !== 4 && inputs[0].dims.length !== 3) {\n    throw new Error('currently only support 2-dimensional conv');\n  }\n\n  if (inputs[0].dims.length !== inputs[1].dims.length) {\n    throw new Error('filter does not have same dimension as input');\n  }\n\n  // FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\n  const dataChannel = inputs[0].dims[attributes.format === 'NHWC' ? inputs[0].dims.length - 1 : 1];\n  const filterInChannel = inputs[1].dims[0];\n  if (dataChannel !== filterInChannel) {\n    throw new Error('FILTER_IN_CHANNEL should be equal to DATA_CHANNEL');\n  }\n\n  const featureMaps = inputs[1].dims[1] * attributes.group;\n\n  // if bias is provided it should be 1D and the number of elements should be equal to the number of feature maps\n  if (inputs.length === 3 && (inputs[2].dims.length !== 1 || inputs[2].dims[0] !== featureMaps)) {\n    throw new Error('invalid bias');\n  }\n\n  const spatialRank = inputs[0].dims.length - 2;\n  const dilationsSet = attributes.dilations.reduce((a, b) => a + b, 0) > 0;\n  // wrong dilations dimension\n  if (dilationsSet && attributes.dilations.length !== spatialRank) {\n    throw new Error(`dilations should be ${spatialRank}D`);\n  }\n\n  const stridesSet = attributes.strides.reduce((a, b) => a + b, 0) > 0;\n  // Wrong strides dimension\n  if (stridesSet && attributes.strides.length !== spatialRank) {\n    throw new Error(`strides should be ${spatialRank}D`);\n  }\n\n  // Wrong pads dimension\n  const padsSet = attributes.pads.reduce((a, b) => a + b, 0) > 0;\n  if (padsSet && attributes.pads.length !== spatialRank * 2) {\n    throw new Error(`pads should be ${spatialRank * 2}D`);\n  }\n\n  // Wrong output padding dimension\n  if (attributes.outputPadding.length !== spatialRank && attributes.outputPadding.length !== 0) {\n    throw new Error(`output_padding should be ${spatialRank}D`);\n  }\n\n  // if kernelShape is specified, it's data length must be 2 less than dims length of the weights tensor\n  // (the first 2 dims are batch_size and channels)\n  const kernelShapeSet = attributes.kernelShape.reduce((a, b) => a + b, 0) > 0;\n  if (kernelShapeSet && attributes.kernelShape.length !== 0 &&\n      attributes.kernelShape.length !== inputs[1].dims.length - 2) {\n    throw new Error('invalid kernel shape');\n  }\n\n  // as with kernelShape, must have same number of spatial dims as input\n  if (attributes.outputShape.length !== 0 && attributes.outputShape.length !== inputs[0].dims.length - 2) {\n    throw new Error('invalid output shape');\n  }\n};\n\nconst createConvTranspose2DProgramMetadata = (hasBias: boolean, cacheHint: string): ProgramMetadata => ({\n  name: 'ConvTranspose2D',\n  inputTypes: hasBias ? [GpuDataType.default, GpuDataType.default, GpuDataType.default] :\n                        [GpuDataType.default, GpuDataType.default],\n  cacheHint\n});\n\nconst createConvTranspose2DProgramInfoLoader =\n    (inputs: readonly TensorView[], attributes: ConvTransposeAttributes,\n     squeezeOutputShapeFunction?: (shape: readonly number[]) => number[]): ProgramInfoLoader => {\n      const hasBias = inputs.length === 3;\n      const metadata = createConvTranspose2DProgramMetadata(hasBias, attributes.cacheKey);\n      return {\n        ...metadata,\n        get: () => createConvTranspose2DProgramInfo(inputs, metadata, attributes, squeezeOutputShapeFunction)\n      };\n    };\n\n// for transposing weight tensor from [C, M/group, KH, KW] to [KH, KW, M/group, C]\nconst weightTransposeAttribute: TransposeAttributes = createAttributeWithCacheKey({perm: [2, 3, 1, 0]});\n\nconst convTranspose2d =\n    (context: ComputeContext, inputs: readonly TensorView[], attributes: ConvTransposeAttributes): void => {\n      const adjustedAttributes = getAdjustedConvTransposeAttributes(attributes, inputs);\n      const isChannelsLast = attributes.format === 'NHWC';\n      const hasBias = inputs.length === 3;\n      if (adjustedAttributes.group !== 1) {\n        context.compute(createConvTranspose2DProgramInfoLoader(inputs, adjustedAttributes));\n        return;\n      }\n      const outputShape = adjustedAttributes.outputShape;\n      const outHeight = outputShape[isChannelsLast ? 1 : 2];\n      const outWidth = outputShape[isChannelsLast ? 2 : 3];\n      const outChannels = outputShape[isChannelsLast ? 3 : 1];\n      const weightHeight = inputs[1].dims[2];\n      const weightWidth = inputs[1].dims[3];\n      const inputChannels = inputs[0].dims[isChannelsLast ? 3 : 1];\n\n      const dimAOuter = isChannelsLast ? outHeight * outWidth : outChannels;\n      const dimBOuter = isChannelsLast ? outChannels : outHeight * outWidth;\n      const dimInner = weightHeight * weightWidth * inputChannels;\n\n      const sequentialAccessByThreads = /* backend.adapterInfo.isIntel() */ true;\n\n\n      // STEP.1: transpose weight\n      const transposedWeight = (context.kernelCustomData.wT as TensorView | undefined) ??\n          context.compute(\n              {\n                ...transposeProgramMetadata,\n                cacheHint: weightTransposeAttribute.cacheKey,\n                get: () => createTransposeProgramInfo(inputs[1], weightTransposeAttribute.perm)\n              },\n              {inputs: [1], outputs: [attributes.wIsConst ? -2 : -1]})[0];\n      if (attributes.wIsConst && !context.kernelCustomData.wT) {\n        context.kernelCustomData.wT = transposedWeight;\n      }\n\n      // STEP.2: prepare reshaped inputs\n      const convTransposeInputs = [inputs[0], transposedWeight];\n      if (hasBias) {\n        if (!isChannelsLast && inputs[2].dims.length === 1) {\n          convTransposeInputs.push(inputs[2].reshape([inputs[2].dims[0], 1, 1]));\n        } else {\n          convTransposeInputs.push(inputs[2]);\n        }\n      }\n\n      // STEP.3: compute matmul\n      context.compute(\n          createConv2DTransposeMatMulProgramInfoLoader(\n              convTransposeInputs, adjustedAttributes, outputShape, dimAOuter, dimBOuter, dimInner, hasBias,\n              sequentialAccessByThreads),\n          {inputs: convTransposeInputs});\n    };\n\nconst convTranspose1d = (context: ComputeContext, attributes: ConvTransposeAttributes): void => {\n  // extend the input to 2D by adding H dimension\n  const isChannelLast = attributes.format === 'NHWC';\n\n  const inputs = [\n    context.inputs[0].reshape(\n        isChannelLast ?\n            // [N, W, C] -> [N, H=1, W, C]\n            [context.inputs[0].dims[0], 1, context.inputs[0].dims[1], context.inputs[0].dims[2]] :\n            // [N, C, W] -> [N, C, H=1, W]\n            [context.inputs[0].dims[0], context.inputs[0].dims[1], 1, context.inputs[0].dims[2]]),\n    //[FILTER_OUT_CHANNEL, FILTER_IN_CHANNEL, kW] -> [FILTER_OUT_CHANNEL, FILTER_IN_CHANNEL, kH=1, kW]\n    context.inputs[1].reshape([context.inputs[1].dims[0], context.inputs[1].dims[1], 1, context.inputs[1].dims[2]])\n  ];\n  if (inputs.length === 3) {\n    inputs.push(context.inputs[2]);\n  }\n  let kernelShape = attributes.kernelShape;\n  if (kernelShape.length === 0 || kernelShape[0] === 0) {\n    kernelShape = [context.inputs[1].dims[2]];\n  }\n  let dilations = attributes.dilations;\n  if (dilations.length === 0 || dilations[0] === 0) {\n    dilations = [1];\n  }\n  let strides = attributes.strides;\n  if (strides.length === 0 || strides[0] === 0) {\n    strides = [1];\n  }\n  let pads = attributes.pads;\n  if (pads.length === 0) {\n    pads = [0, 0];\n  }\n  pads = [0, pads[0], 0, pads[1]];\n  strides = [1].concat(strides);\n  dilations = [1].concat(dilations);\n  kernelShape = [1].concat(kernelShape);\n  const adjustedAttributes =\n      getAdjustedConvTransposeAttributes({...attributes, pads, strides, dilations, kernelShape}, inputs);\n  context.compute(createConvTranspose2DProgramInfoLoader(\n      inputs, adjustedAttributes,\n      outputShape => isChannelLast ? [outputShape[0], outputShape[2], outputShape[3]] :\n                                     [outputShape[0], outputShape[1], outputShape[3]]));\n};\n\nexport const convTranspose = (context: ComputeContext, attributes: ConvTransposeAttributes): void => {\n  validateInputs(context.inputs, attributes);\n  if (context.inputs[0].dims.length === 3) {\n    convTranspose1d(context, attributes);\n  } else {\n    convTranspose2d(context, context.inputs, attributes);\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {TensorView} from '../../tensor-view';\nimport {PoolConvUtil} from '../../util';\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\nimport {ComputeContext} from '../types';\n\nimport {createGroupedConvProgramInfoLoader} from './conv-grouped';\nimport {createConv2DMatMulProgramInfoLoader} from './conv2d-mm';\nimport {InternalActivationAttributes, parseInternalActivationAttributes} from './fuse-utils';\nimport {createMatmulProgramInfoLoader} from './matmul';\nimport {createTransposeProgramInfo, TransposeAttributes, transposeProgramMetadata} from './transpose';\n\nexport const calculateOutputShape =\n    (inputShape: readonly number[], kernelShape: readonly number[], dilations: readonly number[],\n     adjustPads: readonly number[], strides: readonly number[], isChannelLast: boolean): number[] => {\n      const batchSize = inputShape[0];\n      const inputSpatialShape = inputShape.slice(isChannelLast ? 1 : 2, isChannelLast ? 3 : 4);\n      const spatialRank = inputSpatialShape.length;\n      const outChannels = kernelShape[0];\n      const kernelSpatialShape = kernelShape.slice(2);\n      const dilatedKernelShape = kernelSpatialShape.map((v, i) => v + (v - 1) * (dilations[i] - 1));\n      const inputSpatialShapeWithPad = inputSpatialShape.map((v, i) => v + adjustPads[i] + adjustPads[i + spatialRank]);\n      const outputShape =\n          inputSpatialShapeWithPad.map((v, i) => Math.floor((v - dilatedKernelShape[i] + strides[i]) / strides[i]));\n      outputShape.splice(0, 0, batchSize);\n      outputShape.splice(isChannelLast ? 3 : 1, 0, outChannels);\n      return outputShape;\n    };\n\nexport interface ConvAttributes extends InternalActivationAttributes, AttributeWithCacheKey {\n  readonly autoPad: string;\n  readonly dilations: readonly number[];\n  readonly format: 'NHWC'|'NCHW';\n  readonly group: number;\n  readonly kernelShape: readonly number[];\n  readonly pads: readonly number[];\n  readonly strides: readonly number[];\n  readonly wIsConst: boolean;\n}\n\n// for transposing weight tensor from [M, C/group, KH, KW] to [KH, KW, C/group, M]\nconst weightTransposeAttribute: TransposeAttributes = createAttributeWithCacheKey({perm: [2, 3, 1, 0]});\n\nconst validateInputs = (inputs: readonly TensorView[], attributes: ConvAttributes): void => {\n  // Refer to the below link for all input checks\n  // https://github.com/onnx/onnx/blob/master/docs/Operators.md#Conv\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Conv requires 2 or 3 inputs');\n  }\n\n  // TODO : Need to add support for multi-dimensional conv\n  if (inputs[0].dims.length !== 4 && inputs[0].dims.length !== 3) {\n    throw new Error('currently only support conv 1D and 2D');\n  }\n\n  if (inputs[0].dims.length !== inputs[1].dims.length) {\n    throw new Error('filter does not have same dimension as input');\n  }\n\n  // FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\n  const dataChannel = inputs[0].dims[attributes.format === 'NHWC' ? inputs[0].dims.length - 1 : 1];\n  const filterInChannel = inputs[1].dims[1] * attributes.group;\n  if (dataChannel !== filterInChannel) {\n    throw new Error('FILTER_IN_CHANNEL should be equal to DATA_CHANNEL');\n  }\n\n  // if bias is provided it should be 1D and the number of elements should be equal to the number of feature maps\n  if (inputs.length === 3 && (inputs[2].dims.length !== 1 || inputs[1].dims[0] !== inputs[2].dims[0])) {\n    throw new Error('invalid bias');\n  }\n\n  const spatialRank = inputs[0].dims.length - 2;\n  // wrong dilations dimension\n  if (attributes.dilations.length !== spatialRank) {\n    throw new Error(`dilations should be ${spatialRank}D`);\n  }\n\n  // Wrong strides dimension\n  if (attributes.strides.length !== spatialRank) {\n    throw new Error(`strides should be ${spatialRank}D`);\n  }\n\n  // Wrong pads dimension\n  if (attributes.pads.length !== spatialRank * 2) {\n    throw new Error(`pads should be ${spatialRank * 2}D`);\n  }\n\n  // if kernelShape is specified, it's data length must be 2 less than dims length of the weights tensor\n  // (the first 2 dims are batch_size and channels)\n  if (attributes.kernelShape.length !== 0 && attributes.kernelShape.length !== inputs[1].dims.length - 2) {\n    throw new Error('invalid kernel shape');\n  }\n};\n\nconst getAdjustedConvAttributes = <T extends ConvAttributes>(attributes: T, inputs: readonly TensorView[]): T => {\n  const kernelShape = attributes.kernelShape.slice();\n  // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\n  for (let i = 2; i < inputs[1].dims.length; ++i) {\n    if (kernelShape[i - 2] === 0) {\n      kernelShape[i - 2] = inputs[1].dims[i];\n    }\n  }\n  const pads = attributes.pads.slice();\n  PoolConvUtil.adjustPadsBasedOnAutoPad(\n      inputs[0].dims, attributes.strides, attributes.dilations, kernelShape, pads, attributes.format === 'NHWC',\n      attributes.autoPad);\n\n  // always return a new object so does not modify the original attributes\n  const newAttributes: T = Object.assign({}, attributes);\n  Object.assign(newAttributes, {kernelShape, pads, cacheKey: attributes.cacheKey});\n  return newAttributes;\n};\n\nexport const parseConvAttributes = (attributes: Record<string, unknown>): ConvAttributes => {\n  const activationAttributes = parseInternalActivationAttributes(attributes);\n  // TODO : Make this generic enough to compute default attributes for multi-dimensional conv\n  const format = attributes.format as 'NHWC' | 'NCHW';\n  const autoPad = ['NOTSET', 'VALID', 'SAME_UPPER', 'SAME_LOWER'][attributes.auto_pad as number];\n  const dilations = attributes.dilations as [number, number];\n  const group = attributes.group as number;\n  const kernelShape = attributes.kernel_shape as [number, number];\n  const pads = attributes.pads as [number, number, number, number];\n  const strides = attributes.strides as [number, number];\n  const wIsConst = (attributes.w_is_const as () => boolean)();\n\n  return createAttributeWithCacheKey(\n      {autoPad, format, dilations, group, kernelShape, pads, strides, wIsConst, ...activationAttributes});\n};\n\nconst conv2d = (context: ComputeContext, inputs: readonly TensorView[], attributes: ConvAttributes): void => {\n  const adjustedAttributes = getAdjustedConvAttributes(attributes, inputs);\n\n  // check attributes\n\n  // const hasPreluActivationWeights = false; /* TODO: add support for prelu activation weights */\n  if (attributes.group !== 1) {\n    context.compute(createGroupedConvProgramInfoLoader(inputs, adjustedAttributes));\n    return;\n  }\n\n  const isChannelsLast = attributes.format === 'NHWC';\n  const hasBias = inputs.length === 3;\n  const inputHeight = inputs[0].dims[isChannelsLast ? 1 : 2];\n  const inputWidth = inputs[0].dims[isChannelsLast ? 2 : 3];\n  const inputChannels = inputs[0].dims[isChannelsLast ? 3 : 1];\n  const weightHeight = inputs[1].dims[2];\n  const weightWidth = inputs[1].dims[3];\n\n  const outputShape = calculateOutputShape(\n      inputs[0].dims, inputs[1].dims, attributes.dilations, adjustedAttributes.pads, attributes.strides,\n      isChannelsLast);\n  const outHeight = outputShape[isChannelsLast ? 1 : 2];\n  const outWidth = outputShape[isChannelsLast ? 2 : 3];\n  const outChannels = outputShape[isChannelsLast ? 3 : 1];\n\n  const sameSize = isChannelsLast && weightHeight === inputHeight && weightWidth === inputWidth &&\n      attributes.pads[0] === 0 && attributes.pads[1] === 0;\n  if (sameSize ||\n      (weightHeight === 1 && weightWidth === 1 && attributes.dilations[0] === 1 && attributes.dilations[1] === 1 &&\n       attributes.strides[0] === 1 && attributes.strides[1] === 1 && attributes.pads[0] === 0 &&\n       attributes.pads[1] === 0)) {\n    // conv2dByMatMul\n    const batch = outputShape[0];\n    let xReshaped, wReshaped, matmulOutputShape;\n    const matmulInputs = [];\n    if (isChannelsLast) {\n      const transposedWeight = (context.kernelCustomData.wT as TensorView | undefined) ??\n          context.compute(\n              {\n                ...transposeProgramMetadata,\n                cacheHint: weightTransposeAttribute.cacheKey,\n                get: () => createTransposeProgramInfo(inputs[1], weightTransposeAttribute.perm)\n              },\n              {inputs: [1], outputs: [attributes.wIsConst ? -2 : -1]})[0];\n      if (attributes.wIsConst && !context.kernelCustomData.wT) {\n        context.kernelCustomData.wT = transposedWeight;\n      }\n      if (sameSize) {\n        const sharedDim = inputHeight * inputWidth * inputChannels;\n        xReshaped = inputs[0].reshape([1, batch, sharedDim]);\n        wReshaped = transposedWeight.reshape([1, sharedDim, outChannels]);\n        matmulOutputShape = [1, batch, outChannels];\n      } else {\n        xReshaped = inputs[0].reshape([batch, inputHeight * inputWidth, inputChannels]);\n        wReshaped = transposedWeight.reshape([1, inputChannels, outChannels]);\n        matmulOutputShape = [batch, outHeight * outWidth, outChannels];\n      }\n      matmulInputs.push(xReshaped);\n      matmulInputs.push(wReshaped);\n    } else {\n      xReshaped = inputs[0].reshape([batch, inputChannels, inputHeight * inputWidth]);\n      wReshaped = inputs[1].reshape([1, outChannels, inputChannels]);\n      matmulOutputShape = [batch, outChannels, outHeight * outWidth];\n      matmulInputs.push(wReshaped);\n      matmulInputs.push(xReshaped);\n    }\n    if (hasBias) {\n      matmulInputs.push(inputs[2]);\n    }\n    context.compute(\n        createMatmulProgramInfoLoader(matmulInputs, adjustedAttributes, outputShape, matmulOutputShape, isChannelsLast),\n        {inputs: matmulInputs});\n    return;\n  }\n\n  // TODO: implement conv2dWithIm2Col()\n\n  const sequentialAccessByThreads = /* backend.adapterInfo.isIntel() */ true;\n\n  // STEP.1: transpose weight\n  const transposedWeight = (context.kernelCustomData.wT as TensorView | undefined) ??\n      context.compute(\n          {\n            ...transposeProgramMetadata,\n            cacheHint: weightTransposeAttribute.cacheKey,\n            get: () => createTransposeProgramInfo(inputs[1], weightTransposeAttribute.perm)\n          },\n          {inputs: [1], outputs: [attributes.wIsConst ? -2 : -1]})[0];\n  if (attributes.wIsConst && !context.kernelCustomData.wT) {\n    context.kernelCustomData.wT = transposedWeight;\n  }\n\n  // STEP.2: prepare reshaped inputs\n  const convInputs = [inputs[0], transposedWeight];\n  if (hasBias) {\n    convInputs.push(inputs[2]);\n  }\n\n  // STEP.3: compute matmul\n  const dimAOuter = isChannelsLast ? outHeight * outWidth : outChannels;\n  const dimBOuter = isChannelsLast ? outChannels : outHeight * outWidth;\n  const dimInner = weightHeight * weightWidth * inputChannels;\n  context.compute(\n      createConv2DMatMulProgramInfoLoader(\n          convInputs, adjustedAttributes, outputShape, dimAOuter, dimBOuter, dimInner, hasBias,\n          sequentialAccessByThreads),\n      {inputs: convInputs});\n};\n\nconst conv1d = (context: ComputeContext, attributes: ConvAttributes): void => {\n  // extend the input to 2D by adding H dimension\n  const isChannelLast = attributes.format === 'NHWC';\n  const inputs = [\n    context.inputs[0].reshape(\n        isChannelLast ?\n            // [N, W, C] -> [N, H=1, W, C]\n            [context.inputs[0].dims[0], 1, context.inputs[0].dims[1], context.inputs[0].dims[2]] :\n            // [N, C, W] -> [N, C, H=1, W]\n            [context.inputs[0].dims[0], context.inputs[0].dims[1], 1, context.inputs[0].dims[2]]),\n    //[FILTER_OUT_CHANNEL, FILTER_IN_CHANNEL, kW] -> [FILTER_OUT_CHANNEL, FILTER_IN_CHANNEL, kH=1, kW]\n    context.inputs[1].reshape([context.inputs[1].dims[0], context.inputs[1].dims[1], 1, context.inputs[1].dims[2]])\n  ];\n  if (context.inputs.length === 3) {\n    inputs.push(context.inputs[2]);\n  }\n  const pads = [0, attributes.pads[0], 0, attributes.pads[1]];\n  const strides = [1].concat(attributes.strides);\n  const dilations = [1].concat(attributes.dilations);\n  const kernelShape = [1].concat(attributes.kernelShape);\n  const adjustedAttributes = getAdjustedConvAttributes({...attributes, pads, strides, dilations, kernelShape}, inputs);\n  context.compute(createGroupedConvProgramInfoLoader(\n      inputs, adjustedAttributes,\n      outputShape => isChannelLast ? [outputShape[0], outputShape[2], outputShape[3]] : []));\n};\n\nexport const conv = (context: ComputeContext, attributes: ConvAttributes): void => {\n  validateInputs(context.inputs, attributes);  // currently will fail if not conv1D/2D\n  if (context.inputs[0].dims.length === 3) {\n    conv1d(context, attributes);\n  } else {\n    conv2d(context, context.inputs, attributes);\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {TensorView} from '../../tensor-view';\nimport {GpuDataType, ProgramInfoLoader, ProgramMetadata} from '../types';\n\nimport {createConv2DMatMulProgramInfo} from './3rd-party/conv2d_mm_webgpu';\nimport {ConvAttributes} from './conv';\n\n\nconst createConv2DMatMulProgramMetadata = (hasBias: boolean, cacheHint: string): ProgramMetadata => ({\n  name: 'Conv2DMatMul',\n  inputTypes: hasBias ? [GpuDataType.default, GpuDataType.default, GpuDataType.default] :\n                        [GpuDataType.default, GpuDataType.default],\n  cacheHint\n});\n\nexport const createConv2DMatMulProgramInfoLoader =\n    (inputs: readonly TensorView[], attributes: ConvAttributes, outputShape: readonly number[], dimAOuter: number,\n     dimBOuter: number, dimInner: number, hasBias: boolean, sequentialAccessByThreads: boolean): ProgramInfoLoader => {\n      const metadata = createConv2DMatMulProgramMetadata(hasBias, attributes.cacheKey);\n      return {\n        ...metadata,\n        get: () => createConv2DMatMulProgramInfo(\n            inputs, metadata, attributes, outputShape, dimAOuter, dimBOuter, dimInner, hasBias,\n            sequentialAccessByThreads)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {TensorView} from '../../tensor-view';\nimport {GpuDataType, ProgramInfoLoader, ProgramMetadata} from '../types';\n\nimport {createConv2DTransposeMatMulProgramInfo} from './3rd-party/conv_backprop_mm_webgpu';\nimport {ConvTransposeAttributes} from './conv-transpose';\n\n\nconst createConv2DTransposeMatMulProgramMetadata = (hasBias: boolean, cacheHint: string): ProgramMetadata => ({\n  name: 'Conv2DTransposeMatMul',\n  inputTypes: hasBias ? [GpuDataType.default, GpuDataType.default, GpuDataType.default] :\n                        [GpuDataType.default, GpuDataType.default],\n  cacheHint\n});\n\nexport const createConv2DTransposeMatMulProgramInfoLoader =\n    (inputs: readonly TensorView[], attributes: ConvTransposeAttributes, outputShape: readonly number[],\n     dimAOuter: number, dimBOuter: number, dimInner: number, hasBias: boolean,\n     sequentialAccessByThreads: boolean): ProgramInfoLoader => {\n      const metadata = createConv2DTransposeMatMulProgramMetadata(hasBias, attributes.cacheKey);\n      return {\n        ...metadata,\n        get: () => createConv2DTransposeMatMulProgramInfo(\n            inputs, metadata, attributes, outputShape, dimAOuter, dimBOuter, dimInner, hasBias,\n            sequentialAccessByThreads)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {TensorView} from '../../tensor-view';\nimport {ShapeUtil} from '../../util';\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramInfoLoader, ProgramMetadata} from '../types';\n\nimport {IndicesHelper, inputVariable, outputVariable, ShaderHelper} from './common';\n\nexport interface EinsumAttributes extends AttributeWithCacheKey {\n  readonly equation: string;\n}\n// The equation attribute value is a string which consists of left hand side (LHS) and optionally right hand side (RHS)\n// separated by '->'. Ex. \"ij,jk -> ik\" expresses matrix multiplication\n//     \"ij->ji\" expresses matrix transpose\n//      \"ii->i\" diagonal elements of a square matrix\n// LHS consists of a sequence of terms separated by commas. Each term corresponds to an input variable.\n// Each symbol corresponds to a dimension in the input variable. The symbol can be either a letter, 'a' to 'z' or 'A' to\n// 'Z' or '...' to represent arbitrary dimensions.\n\nconst symbolPattern =\n    '[a-zA-Z]|\\\\.\\\\.\\\\.';  // The pattern each symbol in each term in the symbolic equation should match\nconst termPattern = '(' + symbolPattern + ')+';   // The pattern each term in the symbolic equation should match\nconst termPatternOnly = '^' + termPattern + '$';  // The patterns only matchs a term begin to end.\nconst lhsPattern = '(' + termPattern + ',)*' + termPattern;  // The pattern the LHS should match\nconst lhsPatternOnly = '^' + lhsPattern + '$';               // The patterns only matchs a LHS begin to end.\n\ninterface SymbolInfo {\n  count: number;           // Symbol corresponding to a dimmension of an input\n  inputIndices: number[];  // Number of input variables the symbol corresponds to\n  dimValue: number;        // Number of dimensions the symbol corresponds to\n}\n\nclass EinsumTerm {\n  constructor(inputIndex = -1) {\n    this.symbolToIndices = new Map<string, number[]>();\n    this.inputIndex = inputIndex;\n  }\n\n  // Add a symbol to the term\n  addSymbol(symbol: string, index: number) {\n    let value = this.symbolToIndices.get(symbol);\n    if (value === undefined) {\n      value = [index];\n    } else {\n      value.push(index);\n    }\n    this.symbolToIndices.set(symbol, value);\n  }\n\n  symbolToIndices: Map<string, number[]>;  // Map from symbol to dimensions of the input corresponding to the term\n  inputIndex: number;                      // -1 for output and 0, 1, 2, ... for inputs\n}\n\nclass EinsumEquation {\n  constructor(inputs: readonly TensorView[], equation: string) {\n    this.hasEllipsis = false;\n    this.symbolToInfo = new Map<string, SymbolInfo>();\n    this.lhs = new Array<EinsumTerm>();\n    this.outputDims = [];\n    // As rhs needs to be updated allow using let instead of const for both lhs and rhs.\n    // eslint-disable-next-line prefer-const\n    let [lhs, rhs] = equation.includes('->') ? equation.split('->', 2) : [equation, ''];\n    if (!lhs.match(RegExp(lhsPatternOnly))) {\n      throw new Error('Invalid LHS term');\n    }\n    const inputTerms = lhs.split(',');\n    inputTerms.forEach((inputTerm, index) => {\n      const dims = inputs[index].dims.slice();\n      if (!inputTerm.match(RegExp(termPatternOnly))) {\n        throw new Error('Invalid LHS term');\n      }\n      const einsumTerm = this.processTerm(inputTerm, true, dims, index);\n      this.lhs.push(einsumTerm);\n    });\n\n    // Initialize the RHS if not specified\n    if (rhs === '') {\n      // Construct RHS from LHS terms/symbols\n      rhs += [...this.symbolToInfo.entries()]\n                 .filter(([sym, info]) => (info.count === 1 || sym === '...'))\n                 .map(([sym]) => sym)\n                 .join('');\n    } else {\n      if (!rhs.match(RegExp(termPattern))) {\n        throw new Error('Invalid RHS');\n      }\n    }\n\n    // Compute output dims\n    const rhsSymbols = rhs.match(RegExp(symbolPattern, 'g'));\n    rhsSymbols?.forEach((symbol) => {\n      if (symbol === '...') {\n        this.outputDims = this.outputDims.concat(this.ellipsisDims);\n      } else {\n        const info = this.symbolToInfo.get(symbol);\n        if (info === undefined) {\n          throw new Error('Invalid RHS symbol');\n        }\n        this.outputDims.push(info.dimValue);\n      }\n    });\n    this.rhs = this.processTerm(rhs, true, this.outputDims);\n  }  // End of EinsumEqation constructor\n\n  // Add a symbol to the equation\n  addSymbol(symbol: string, dimValue: number, inputIndex: number) {\n    let info = this.symbolToInfo.get(symbol);\n    if (info !== undefined) {\n      if (info.dimValue !== dimValue && info.count !== 1) {\n        throw new Error('Dimension mismatch');\n      } else {\n        info.count++;\n        info.inputIndices.push(inputIndex);\n      }\n    } else {\n      info = {count: 1, dimValue, inputIndices: [inputIndex]};\n    }\n    this.symbolToInfo.set(symbol, info);\n  }\n\n  // Process one input/output term\n  processTerm(term: string, isInput: boolean, dims: readonly number[], index = -1): EinsumTerm {\n    const rank = dims.length;\n    let ellipsis = false;\n    let ellipsisDims = [];\n    let nextDim = 0;\n    // For output empty string is allowed because the output may be reduced to a scalar value\n    if (!term.match(RegExp(termPatternOnly)) && (!isInput && term !== '')) {\n      throw new Error('Invalid LHS term');\n    }\n    const indexSymbols = term.match(RegExp(symbolPattern, 'g'));\n    const einsumTerm = new EinsumTerm(index);\n    // symbol can be either a lettre, 'a' to 'z' or 'A' to 'Z', or '...'\n    indexSymbols?.forEach((symbol: string, i: number) => {\n      if (symbol === '...') {\n        if (ellipsis) {\n          throw new Error('Only one ellipsis is allowed per input term');\n        }\n        ellipsis = true;\n        const ellipsisDimLength = rank - indexSymbols.length + 1;\n        if (ellipsisDimLength < 0) {\n          throw new Error('Ellipsis out of bounds');\n        }\n        ellipsisDims = dims.slice(nextDim, nextDim + ellipsisDimLength);\n        if (this.hasEllipsis) {\n          if (this.ellipsisDims.length !== ellipsisDims.length ||\n              this.ellipsisDims.toString() !== ellipsisDims.toString()) {\n            throw new Error('Ellipsis dimensions mismatch');\n          }\n        } else if (isInput) {\n          this.hasEllipsis = true;\n          this.ellipsisDims = ellipsisDims;\n        } else {\n          throw new Error('Ellipsis must be specified in the LHS');\n        }\n        // Add '0', '1', '2', '3', '4', etc to represent ellipsis dimensions to avoid special handling\n        for (let j = 0; j < ellipsisDims.length; j++) {\n          const symbol = String.fromCharCode('0'.charCodeAt(0) + i);\n          einsumTerm.addSymbol(symbol, i + j);\n          this.addSymbol(symbol, dims[nextDim++], index);\n        }\n      } else {\n        einsumTerm.addSymbol(symbol, i);\n        this.addSymbol(symbol, dims[nextDim++], index);\n      }\n    });\n    return einsumTerm;\n  }\n\n  symbolToInfo: Map<string, SymbolInfo>;  // All symbols in the equation\n  hasEllipsis: boolean;                   // The equation has ellipsis or not\n  ellipsisDims: number[];                 // The dimensions of the equation ellipsis corresponds to.\n  lhs: EinsumTerm[];                      // Terms on the left-hand side of the equation\n  rhs: EinsumTerm;                        // Term on the right-hand side of the equation\n  outputDims: number[];                   // Output dimensions of the equation\n}  // End of class EinsumEquation\n\n\nconst createEinsumProgramMetadata = (inputCount: number, cacheHint: string): ProgramMetadata =>\n    ({name: 'Einsum', inputTypes: Array(inputCount).fill(GpuDataType.default), cacheHint});\n\nconst createEinsumProgramInfo =\n    (metadata: ProgramMetadata, inputs: readonly TensorView[], einsumEquation: EinsumEquation): ProgramInfo => {\n      const dataType = inputs[0].dataType;\n      const inputVars = new Array<IndicesHelper>(inputs.length);\n      for (let i = 0; i < inputs.length; ++i) {\n        inputVars[i] = inputVariable(`input${i}`, dataType, inputs[i].dims);\n      }\n      const outputShape = einsumEquation.outputDims;\n      const outputSize = ShapeUtil.size(outputShape);\n      const output = outputVariable('output', dataType, outputShape);\n      const idxCopy: string[] = [];\n      const rhsSymbols = Array.from(einsumEquation.rhs.symbolToIndices.keys());\n      const initProd = 'var prod = 1.0;';\n      const initSum = 'var sum = 0.0;';\n      const updateSum = 'sum += prod;';\n      const reduceOpsSetIndices: string[] = [];\n      const reduceOpsLoopHeaders: string[] = [];\n      const reduceOpsLoopFooters: string[] = [];\n      const reduceOpCompute: string[] = [];\n      const isReduceOpsWithoutLoop = einsumEquation.symbolToInfo.size === rhsSymbols.length;\n      einsumEquation.symbolToInfo.forEach((info, symbol) => {\n        if (rhsSymbols.includes(symbol)) {\n          const outputIndex = rhsSymbols.indexOf(symbol);\n          einsumEquation.lhs.forEach((term, i) => {\n            if (info.inputIndices.includes(i)) {\n              const indices = term.symbolToIndices.get(symbol);\n              if (indices === undefined) {\n                throw new Error('Invalid symbol error');\n              }\n              indices.forEach((index) => {\n                idxCopy.push(`${\n                    inputVars[i].indicesSet(\n                        `input${i}Indices`, index, output.indicesGet('outputIndices', outputIndex))}`);\n              });\n            }\n          });\n        } else {\n          einsumEquation.lhs.forEach((term, i) => {\n            const info = einsumEquation.symbolToInfo.get(symbol);\n            if (info === undefined) {\n              throw new Error('Invalid symbol error');\n            }\n            if (info.inputIndices.includes(i)) {\n              const indices = term.symbolToIndices.get(symbol);\n              if (indices === undefined) {\n                throw new Error('Invalid symbol error');\n              }\n              indices.forEach((index) => {\n                reduceOpsSetIndices.push(`${inputVars[i].indicesSet(`input${i}Indices`, index, `${symbol}`)}`);\n              });\n              reduceOpCompute.push(`prod *= ${inputVars[i].getByIndices(`input${i}Indices`)};`);\n            }\n          });\n          reduceOpsLoopHeaders.push(`for(var ${symbol}: u32 = 0; ${symbol} < ${\n              einsumEquation.symbolToInfo.get(symbol)?.dimValue}; ${symbol}++) {`);\n          reduceOpsLoopFooters.push('}');\n        }\n      });\n      const reduceOps = isReduceOpsWithoutLoop ?\n          [\n            ...idxCopy,\n            `let sum = ${inputVars.map((inputVar, i) => inputVar.getByIndices(`input${i}Indices`)).join(' * ')};`\n          ] :\n          [\n            ...idxCopy,\n            initSum,\n            ...reduceOpsLoopHeaders,\n            ...reduceOpsSetIndices,\n            initProd,\n            ...reduceOpCompute,\n            updateSum,\n            ...reduceOpsLoopFooters,\n          ];\n      const getShaderSource = (shaderHelper: ShaderHelper) => `\n      ${shaderHelper.declareVariables(...inputVars, output)}\n\n      ${shaderHelper.mainStart()}\n        ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\n        var outputIndices = ${output.offsetToIndices('global_idx')};\n        ${inputVars.map((inputVar, i) => `var input${i}Indices: ${inputVars[i].type.indices};`).join('\\n')}\n        ${reduceOps.join('\\n')};\n        ${output.setByOffset('global_idx', 'sum')};\n      }`;\n      return {\n        ...metadata,\n        outputs: [{dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default}],\n        getShaderSource,\n        dispatchGroup: () => ({x: Math.ceil(outputSize / 64 /* workgroup size */)})\n      };\n    };\n\nconst createEinsumProgramInfoLoader =\n    (inputs: readonly TensorView[], einsumEquation: EinsumEquation, attributes: EinsumAttributes):\n        ProgramInfoLoader => {\n          const metadata = createEinsumProgramMetadata(inputs.length, attributes.cacheKey);\n          return {...metadata, get: () => createEinsumProgramInfo(metadata, inputs, einsumEquation)};\n        };\n\nexport const einsum = (context: ComputeContext, attributes: EinsumAttributes): void => {\n  const einsumEquation = new EinsumEquation(context.inputs, attributes.equation);\n  context.compute(createEinsumProgramInfoLoader(context.inputs, einsumEquation, attributes));\n};\n\nexport const parseEinsumAttributes = (attributes: Record<string, unknown>): EinsumAttributes => {\n  const equation = (attributes.equation as string).replace(/\\s+/g, '');\n  return createAttributeWithCacheKey({equation});\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {TensorView} from '../../tensor-view';\nimport {ShapeUtil} from '../../util';\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramMetadata} from '../types';\n\nimport {inputVariable, outputVariable, ShaderHelper} from './common';\n\nexport const expandProgramMetadata = {\n  name: 'Expand',\n  inputTypes: [GpuDataType.default]\n};\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Expand requires 2 input.');\n  }\n  const inputShape = inputs[0].dims;\n  const shape = Array.from(inputs[1].getBigInt64Array(), Number);\n\n  let shapeIndex = shape.length < inputShape.length ? 0 : shape.length - inputShape.length;\n  let inputShapeIndex = inputShape.length < shape.length ? 0 : inputShape.length - shape.length;\n  for (; shapeIndex < shape.length && inputShapeIndex < inputShape.length; ++shapeIndex, ++inputShapeIndex) {\n    if (shape[shapeIndex] !== inputShape[inputShapeIndex] && shape[shapeIndex] !== 1 &&\n        inputShape[inputShapeIndex] !== 1) {\n      throw new Error('Expand requires shape to be broadcastable to input');\n    }\n  }\n};\n\nconst getAdjustedShape = (shape1: readonly number[], shape2: readonly number[]): number[] => {\n  const diff = shape1.length - shape2.length;\n  const shape: number[] = [];\n  for (let i = 0; i < diff; ++i) {\n    shape.push(shape1[i]);\n  }\n  for (let i = 0; i < shape2.length; ++i) {\n    shape.push(shape2[i] === 1 ? shape1[i + diff] : shape2[i]);\n  }\n  return shape;\n};\n\nconst calculateOutputShape = (inputShape: readonly number[], shape: readonly number[]): number[] =>\n    (inputShape.length > shape.length) ? getAdjustedShape(inputShape, shape) : getAdjustedShape(shape, inputShape);\n\n\nconst createExpandProgramInfo = (metadata: ProgramMetadata, inputs: readonly TensorView[]): ProgramInfo => {\n  const inputShape = inputs[0].dims;\n  const shape = Array.from(inputs[1].getBigInt64Array(), Number);\n  const outputShape: number[] = calculateOutputShape(inputShape, shape);\n  const outputSize = ShapeUtil.size(outputShape);\n\n  const dataType = inputs[0].dataType;\n  const input = inputVariable('input', dataType, inputShape);\n  const output = outputVariable('output', dataType, outputShape);\n\n  const getShaderSource = (shaderHelper: ShaderHelper) => `\n  const inputShape = ${input.indices(...inputShape)};\n  ${shaderHelper.declareVariables(input, output)}\n  ${shaderHelper.mainStart()}\n  ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\n    let outputIndices = ${output.offsetToIndices('global_idx')};\n    var inputIndices: ${input.type.indices};\n    for (var i = 0; i < ${inputShape.length}; i++) {\n      if (${input.indicesGet('inputShape', 'i')} == 1) {\n        ${input.indicesSet('inputIndices', 'i', 0)}\n      } else {\n        ${\n      input.indicesSet(\n          'inputIndices', 'i', output.indicesGet('outputIndices', `i + ${outputShape.length - inputShape.length}`))}\n      }\n    }\n    ${output.setByOffset('global_idx', input.getByIndices('inputIndices'))}\n  }`;\n  return {\n    ...metadata,\n    getShaderSource,\n    outputs: [{dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default}],\n    dispatchGroup: () => ({x: Math.ceil(outputSize / 64 /* workgroup size */)})\n  };\n};\n\nexport const expand = (context: ComputeContext): void => {\n  validateInputs(context.inputs);\n  const outputShape = Array.from(context.inputs[1].getBigInt64Array(), Number);\n  const cacheHint = outputShape.toString();\n  context.compute(\n      {...expandProgramMetadata, cacheHint, get: () => createExpandProgramInfo(expandProgramMetadata, context.inputs)},\n      {inputs: [0]});\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {MAX_CLIP, MIN_CLIP} from '../../util';\n\nexport interface InternalActivationAttributes {\n  readonly activation: string;\n  readonly clipMin?: number;\n  readonly clipMax?: number;\n  readonly activationCacheKey: string;\n}\n\nexport const getActicationSnippet =\n    (attributes: InternalActivationAttributes): {activationFunction: string; applyActivation: string} => {\n      switch (attributes.activation) {\n        case 'Relu':\n          return {activationFunction: '', applyActivation: 'value = max(value, 0.0);'};\n        case 'Sigmoid':\n          return {activationFunction: '', applyActivation: 'value = (1.0 / (1.0 + exp(-value)));'};\n        case 'Clip':\n          return {\n            activationFunction:\n                `const clip_min_=f32(${attributes.clipMin!});const clip_max_=f32(${attributes.clipMax!});`,\n            applyActivation: 'value = clamp(value, clip_min_, clip_max_);'\n          };\n          // TODO: adding other activations that can be fused.\n        default:\n          return {activationFunction: '', applyActivation: ''};\n      }\n    };\n\nexport const parseInternalActivationAttributes =\n    (attributes: Record<string, unknown>|undefined): InternalActivationAttributes => {\n      const activation = attributes?.activation as string || '';\n\n      if (activation === 'Clip') {\n        const [clipMin, clipMax] = attributes?.activation_params as [number, number] || [MIN_CLIP, MAX_CLIP];\n        return {activation, clipMax, clipMin, activationCacheKey: `${activation}:${clipMin},${clipMax}`};\n      }\n      return {activation, activationCacheKey: activation};\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {TensorView} from '../../tensor-view';\nimport {ShapeUtil} from '../../util';\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramMetadata} from '../types';\n\nimport {inputVariable, outputVariable, ShaderHelper} from './common';\n\nexport interface GatherElementsAttributes extends AttributeWithCacheKey {\n  axis: number;\n}\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('GatherElements requires 2 inputs.');\n  }\n\n  if (inputs[0].dims.length < 1) {\n    throw new Error('GatherElements requires that the data input be rank >= 1.');\n  }\n\n  if (inputs[0].dims.length !== inputs[1].dims.length) {\n    throw new Error(`GatherElements requires that the data input and\n                     indices input tensors be of same rank.`);\n  }\n};\n\nconst createGatherElementsProgramInfo =\n    (metadata: ProgramMetadata, inputs: readonly TensorView[], attributes: GatherElementsAttributes): ProgramInfo => {\n      const inputShape = inputs[0].dims;\n      const inputOutputDataType = inputs[0].dataType;\n      const inputRank = inputShape.length;\n      const inputStrides = ShapeUtil.computeStrides(inputShape);\n      const inputSize = ShapeUtil.size(inputShape);\n\n      const indicesShape = inputs[1].dims;\n      const indicesDataType = inputs[1].dataType;\n      const indicesSize = ShapeUtil.size(indicesShape);\n\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputRank);\n      const axisDimLimit = inputShape[axis];\n\n      const outputShape = indicesShape.slice(0);\n      const outputSize = ShapeUtil.size(outputShape);\n\n      const input = inputVariable('input', inputOutputDataType, inputShape);\n      const indices = inputVariable('indices', indicesDataType, [indicesSize]);\n      const output = outputVariable('output', inputOutputDataType, outputShape);\n\n\n      // int64 indices would be treated as little endian i32 with assumption they fall in i32 limits\n      // That assumption is safe as it's not possible to allocate >2gb buffer for input tensor\n      // Input data will be treated as u32 or two u32 for 8-byte tensors\n      const getShaderSource = (shaderHelper: ShaderHelper) => `\n      const inputStrides = array<u32, ${inputStrides.length}>(${inputStrides.map(i => `${i}u`).join(',')});\n      ${shaderHelper.declareVariables(input, indices, output)}\n      ${shaderHelper.mainStart()}\n      ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\n\n      let outputIndices = ${output.offsetToIndices('global_idx')};\n\n      var idx = ${indices.getByOffset('global_idx')};\n      if (idx < 0) {\n        idx = idx + ${axisDimLimit};\n      }\n\n      var srcOffset = u32(0);\n\n      for (var i = 0; i < ${inputShape.length}; i++) {\n        if (i == ${axis}) {\n          srcOffset +=  u32(idx) * inputStrides[i];\n        } else {\n          srcOffset += ${output.indicesGet('outputIndices', 'i')} * inputStrides[i];\n        }\n      }\n\n      // Should never hit this with valid values in indices\n      // This is a guard against malicious data in the indices input\n      if (srcOffset < 0 || srcOffset >= ${inputSize}) {\n        return;\n      }\n\n      output[global_idx] = input[srcOffset];\n  }`;\n\n      return {\n        ...metadata,\n        outputs: [{dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default}],\n        getShaderSource,\n        dispatchGroup: () => ({x: Math.ceil(outputSize / 64 /* workgroup size */)})\n      };\n    };\n\nexport const parseGatherElementsAttributes = (attributes: Record<string, unknown>): GatherElementsAttributes =>\n    createAttributeWithCacheKey({axis: attributes.axis as number});\n\nexport const gatherElements = (context: ComputeContext, attributes: GatherElementsAttributes): void => {\n  const inputs = context.inputs;\n  validateInputs(inputs);\n\n  const metadata = {\n    name: 'GatherElements',\n    inputTypes: [GpuDataType.default, GpuDataType.default],\n    cacheHint: attributes.cacheKey,\n  };\n\n  context.compute(createGatherElementsProgramInfo(metadata, context.inputs, attributes));\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {TensorView} from '../../tensor-view';\nimport {ShapeUtil} from '../../util';\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramMetadata} from '../types';\n\nimport {inputVariable, outputVariable, ShaderHelper} from './common';\n\nexport interface GatherAttributes extends AttributeWithCacheKey {\n  axis: number;\n}\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Gather requires 2 inputs.');\n  }\n};\n\nconst createGatherProgramInfo =\n    (metadata: ProgramMetadata, inputs: readonly TensorView[], attributes: GatherAttributes): ProgramInfo => {\n      const inputShape = inputs[0].dims;\n      const indicesShape = inputs[1].dims;\n\n      const inputRank = inputShape.length;\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputRank);\n\n      const outputShape = inputShape.slice(0);\n      outputShape.splice(axis, 1, ...indicesShape);\n\n      const axisDimLimit = inputShape[axis];\n      const outputSize = ShapeUtil.size(outputShape);\n\n      const data = inputVariable('data', inputs[0].dataType, inputs[0].dims);\n      const indices = inputVariable('inputIndices', inputs[1].dataType, inputs[1].dims);\n      const output = outputVariable('output', inputs[0].dataType, outputShape);\n      const calcDataIndices = (): string => {\n        const indicesRank = indicesShape.length;\n        let calcStr = `var indicesIndices  = ${indices.type.indices}(0);`;\n        for (let i = 0; i < indicesRank; i++) {\n          calcStr += `${indicesRank > 1 ? `indicesIndices[${i}]` : 'indicesIndices'} = ${\n              outputShape.length > 1 ? `outputIndices[${axis + i}]` : 'outputIndices'};`;\n        }\n        calcStr += `\n        var idx = ${indices.getByIndices('indicesIndices')};\n        if (idx < 0) {\n          idx = idx + ${axisDimLimit};\n        }\n        var dataIndices = ${data.type.indices}(0);\n      `;\n        for (let i = 0, j = 0; i < inputRank; i++) {\n          if (i === axis) {\n            calcStr += `${inputRank > 1 ? `dataIndices[${i}]` : 'dataIndices'} = u32(idx);`;\n            j += indicesRank;\n          } else {\n            calcStr += `${inputRank > 1 ? `dataIndices[${i}]` : 'dataIndices'} = ${\n                outputShape.length > 1 ? `outputIndices[${j}]` : 'outputIndices'};`;\n            j++;\n          }\n        }\n        return calcStr;\n      };\n\n      const getShaderSource = (shaderHelper: ShaderHelper) => `\n      ${shaderHelper.declareVariables(data, indices, output)}\n      ${shaderHelper.mainStart()}\n        ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\n        let outputIndices = ${output.offsetToIndices('global_idx')};\n        ${calcDataIndices()};\n        let value = ${data.getByIndices('dataIndices')};\n        ${output.setByOffset('global_idx', 'value')};\n      }`;\n      return {\n        ...metadata,\n        outputs: [\n          {dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default},\n        ],\n        getShaderSource,\n        dispatchGroup: () => ({x: Math.ceil(outputSize / 64 /* workgroup size */)})\n      };\n    };\n\nexport const parseGatherAttributes = (attributes: Record<string, unknown>): GatherAttributes =>\n    createAttributeWithCacheKey({axis: attributes.axis as number});\n\nexport const gather = (context: ComputeContext, attributes: GatherAttributes): void => {\n  const inputs = context.inputs;\n  validateInputs(inputs);\n\n  const metadata = {\n    name: 'Gather',\n    inputTypes: [GpuDataType.default, GpuDataType.default],\n    cacheHint: attributes.cacheKey,\n  };\n\n  context.compute(createGatherProgramInfo(metadata, context.inputs, attributes));\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {TensorView} from '../../tensor-view';\nimport {GemmUtil, ShapeUtil} from '../../util';\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramInfoLoader, ProgramMetadata} from '../types';\n\nimport {ShaderHelper, tensorTypeToWsglStorageType} from './common';\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (!inputs) {\n    throw new Error('Input is missing');\n  }\n  if (inputs.length < 2 || inputs.length > 3) {\n    throw new Error('Invaid input number.');\n  }\n\n  // 'C' can be of dimensionality 0, 1 or 2 only\n  if (inputs.length === 3 && inputs[2].dims.length > 2) {\n    throw new Error('Invalid input shape of C');\n  }\n\n  if ((inputs[0].dataType !== inputs[1].dataType) ||\n      (inputs.length === 3 && inputs[0].dataType !== inputs[2].dataType)) {\n    throw new Error('Input types are mismatched');\n  }\n};\n\nexport interface GemmAttributes extends AttributeWithCacheKey {\n  transA: boolean;\n  transB: boolean;\n  alpha: number;\n  beta: number;\n}\n\nconst offsetC = (m: number, n: number, dims: readonly number[]): string => {\n  if (dims.length === 0) {\n    return '0u';\n  }\n\n  const broadcastM = (dims.length === 1 && m !== 1) || (dims.length === 2 && dims[0] !== m);\n  const broadcastN = dims[dims.length - 1] !== n;\n\n  let offset = '0u';\n  if (!broadcastM) {\n    offset += `+ m * ${dims[dims.length - 1]}u`;\n  }\n  if (!broadcastN) {\n    offset += '+n';\n  }\n\n  return offset;\n};\n\nconst createGemmProgramInfo =\n    (metadata: ProgramMetadata, inputs: readonly TensorView[], attributes: GemmAttributes): ProgramInfo => {\n      const aShape = inputs[0].dims.slice();\n      const bShape = inputs[1].dims.slice();\n      const [M, N, K] = GemmUtil.getShapeOfGemmResult(\n          aShape, attributes.transA, bShape, attributes.transB, inputs.length === 3 ? inputs[2].dims : undefined);\n      const outputShape = [M, N];\n      if (!outputShape) {\n        throw new Error('Can\\'t use gemm on the given tensors');\n      }\n      const outputSize = ShapeUtil.size(outputShape);\n      let line = '';\n      if (attributes.transA && attributes.transB) {\n        line = 'value += a[k * M + m] * b[n * K + k];';\n      } else if (attributes.transA && !attributes.transB) {\n        line = 'value += a[k * M + m] * b[k * N + n];';\n      } else if (!attributes.transA && attributes.transB) {\n        line = 'value += a[m * K + k] * b[n * K + k];';\n      } else if (!attributes.transA && !attributes.transB) {\n        line = 'value += a[m * K + k] * b[k * N + n];';\n      }\n\n      const dataType = tensorTypeToWsglStorageType(inputs[0].dataType);\n      const calculateAlpha = attributes.alpha === 1 ? '' : 'value *= alpha;';\n      const calculateC = inputs.length === 3 ? `value += beta * c[${offsetC(M, N, inputs[2].dims)}];` : '';\n      const inputStorageBuffersDeclarations = [\n        `@group(0) @binding(0) var<storage, read> a : array<${dataType}>;`,\n        `@group(0) @binding(1) var<storage, read> b : array<${dataType}>;`\n      ];\n      if (inputs.length === 3) {\n        inputStorageBuffersDeclarations.push(`@group(0) @binding(2) var<storage, read> c : array<${dataType}>;`);\n      }\n      const getShaderSource = (shaderHelper: ShaderHelper) => `\n  const M: u32 = ${M}u;\n  const N: u32 = ${N}u;\n  const K: u32 = ${K}u;\n  const alpha = ${dataType}(${attributes.alpha});\n  const beta = ${dataType}(${attributes.beta});\n\n  ${inputStorageBuffersDeclarations.join('\\n')}\n  @group(0) @binding(${inputs.length}) var<storage, read_write> output : array<${dataType}>;\n\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\n\n    let m = global_id.x / N;\n    let n = global_id.x % N;\n\n    var value = ${dataType}(0);\n    for (var k: u32 = 0u; k<${K}u; k++) {\n      ${line}\n    }\n\n    ${calculateAlpha}\n    ${calculateC}\n    output[global_id.x] = value;\n\n  }`;\n      return {\n        ...metadata,\n        outputs: [{dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default}],\n        getShaderSource,\n        dispatchGroup: () => ({x: Math.ceil(outputSize / 64 /* workgroup size */)})\n      };\n    };\n\nconst createGemmProgramInfoLoader = (inputs: readonly TensorView[], attributes: GemmAttributes): ProgramInfoLoader => {\n  const metadata = {\n    name: 'Gemm',\n    inputTypes: inputs.length === 3 ? [GpuDataType.default, GpuDataType.default, GpuDataType.default] :\n                                      [GpuDataType.default, GpuDataType.default],\n    cacheHint: attributes.cacheKey\n  };\n\n  return {...metadata, get: () => createGemmProgramInfo(metadata, inputs, attributes)};\n};\n\nexport const gemm = (context: ComputeContext, attributes: GemmAttributes): void => {\n  validateInputs(context.inputs);\n  context.compute(createGemmProgramInfoLoader(context.inputs, attributes));\n};\n\nexport const parseGemmAttributes = (attributes: Record<string, unknown>): GemmAttributes =>\n    createAttributeWithCacheKey(attributes as Omit<GemmAttributes, keyof AttributeWithCacheKey>);\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {TensorView} from '../../tensor-view';\nimport {ShapeUtil} from '../../util';\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramMetadata} from '../types';\n\nimport {inputVariable, outputVariable, ShaderHelper, tensorTypeToWsglStorageType} from './common';\n\nexport interface InstanceNormAttributes extends AttributeWithCacheKey {\n  epsilon: number;\n  format: 'NHWC'|'NCHW';\n}\n\nconst createInstanceNormProgramInfo =\n    (metadata: ProgramMetadata, inputs: readonly TensorView[], attributes: InstanceNormAttributes): ProgramInfo => {\n      const xShape = inputs[0].dims;\n\n      const outputShape = xShape;\n      const axis = 2;\n      const normCount = ShapeUtil.sizeToDimension(xShape, axis);\n      const normSize = ShapeUtil.sizeFromDimension(xShape, axis);\n      const C = xShape[1];\n      const x = inputVariable('x', inputs[0].dataType, [xShape[0], xShape[1], normSize]);\n      const scale = inputVariable('scale', inputs[1].dataType, inputs[1].dims);\n      const bias = inputVariable('bias', inputs[2].dataType, inputs[2].dims);\n      const output = outputVariable('output', inputs[0].dataType, [xShape[0], xShape[1], normSize]);\n      const variables = [x, scale, bias, output];\n      const dataType = x.type.value;\n      const workgroupSize = 64;\n      const getShaderSource = (shaderHelper: ShaderHelper) => `\n\n  const C: u32 = ${C};\n  const normSize: u32 = ${normSize};\n  const epsilon: f32 = ${attributes.epsilon};\n  var<workgroup> meanShared : ${dataType};\n  var<workgroup> squaredNormShared : ${dataType};\n  var<workgroup> workgroupShared : array<${dataType}, ${workgroupSize}>;\n  const workgroupSize = ${workgroupSize}u;\n  ${shaderHelper.declareVariables(...variables)}\n  ${shaderHelper.mainStart(workgroupSize)}\n    let norm = global_idx / workgroupSize;\n    let batch = norm / C;\n    let channel = norm % C;\n    let localIndex = local_id.x;\n\n    // initialize workgroup memory\n    var initial: ${dataType} = 0;\n    for (var h = localIndex; h < normSize; h += workgroupSize) {\n      initial = initial + ${x.get('batch', 'channel', 'h')};\n    }\n    workgroupShared[localIndex] = initial;\n    workgroupBarrier();\n\n    // Calculate the mean of current channel data.\n    for (var currSize = workgroupSize >> 1;  currSize > 0; currSize = currSize >> 1) {\n      if (localIndex < currSize) {\n        workgroupShared[localIndex] = workgroupShared[localIndex] + workgroupShared[localIndex + currSize];\n      }\n      workgroupBarrier();\n    }\n    if (localIndex == 0) {\n      meanShared = workgroupShared[0] / ${dataType}(normSize);\n    }\n    workgroupBarrier();\n\n    // reinitialize workgroup memory.\n    initial = 0;\n    for (var h = localIndex; h < normSize; h += workgroupSize) {\n      let deviation =  ${x.get('batch', 'channel', 'h')} - meanShared;\n      initial = initial + deviation * deviation;\n    }\n    workgroupShared[localIndex] = initial;\n    workgroupBarrier();\n\n    // Calculate the sum of square of deviation of current channel data.\n    for (var currSize = workgroupSize >> 1;  currSize > 0; currSize = currSize >> 1) {\n      if (localIndex < currSize) {\n        workgroupShared[localIndex] = workgroupShared[localIndex] + workgroupShared[localIndex + currSize];\n      }\n      workgroupBarrier();\n    }\n    if (localIndex == 0) {\n      squaredNormShared = workgroupShared[0];\n    }\n    workgroupBarrier();\n\n    let invStdDev = 1 / sqrt(squaredNormShared / ${dataType}(normSize) + epsilon);\n    let channelScale = invStdDev * ${scale.getByOffset('channel')};\n    let channelShift = ${bias.getByOffset('channel')} - meanShared * channelScale;\n    for (var h = localIndex; h < normSize; h += workgroupSize) {\n      let value = ${x.get('batch', 'channel', 'h')} * channelScale + channelShift;\n      ${output.set('batch', 'channel', 'h', 'value')};\n    }\n  }`;\n      return {\n        ...metadata,\n        outputs: [\n          {dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default},\n        ],\n        getShaderSource,\n        dispatchGroup: () => ({x: normCount})\n      };\n    };\n\nconst createInstanceNormNHWCProgramInfo =\n    (metadata: ProgramMetadata, inputs: readonly TensorView[], attributes: InstanceNormAttributes): ProgramInfo => {\n      const xShape = inputs[0].dims;\n      const outputShape = xShape;\n      const outputSize = ShapeUtil.size(outputShape);\n      const N = xShape[0];\n      const C = xShape[xShape.length - 1];\n      const H = ShapeUtil.sizeFromDimension(xShape, 1) / C;\n\n      const dataType = tensorTypeToWsglStorageType(inputs[0].dataType);\n\n      const normCount = C * N;\n      const getShaderSource = (shaderHelper: ShaderHelper) => `\n  const N: u32 = ${N};\n  const H: u32 = ${H};\n  const C: u32 = ${C};\n  const normSizeTyped: ${dataType} = ${H};\n  const imageSize: u32 = ${H * C};\n  const epsilon: f32 = ${attributes.epsilon};\n\n  @group(0) @binding(0) var<storage, read> x : array<${dataType}>;\n  @group(0) @binding(1) var<storage, read> scale : array<${dataType}>;\n  @group(0) @binding(2) var<storage, read> bias : array<${dataType}>;\n  @group(0) @binding(3) var<storage, read_write> output : array<${dataType}>;\n\n  ${shaderHelper.mainStart()}\n    let currentImageNumber = global_idx / C;\n    let currentChannelNumber = global_idx % C;\n\n    // offset is channel num * N\n    let offset = currentImageNumber * imageSize;\n    if (offset >= ${outputSize}) { return; }\n    var mean: ${dataType} = 0;\n\n    for (var i: u32 = 0u; i < H; i++) {\n        mean = mean + x[offset + i * C + currentChannelNumber];\n    }\n    mean = mean / normSizeTyped;\n\n    var squaredNorm: ${dataType} = 0;\n    for (var i: u32 = 0u; i < H; i++) {\n        let deviation: f32 = x[offset + i * C + currentChannelNumber] - mean;\n        squaredNorm = squaredNorm + deviation * deviation;\n    }\n    let invStdDev = 1 / sqrt(squaredNorm / normSizeTyped + epsilon);\n    let channelScale = invStdDev * scale[currentChannelNumber];\n    let channelShift = bias[currentChannelNumber] - mean * channelScale;\n    for (var i: u32 = 0u; i < H; i++) {\n        let currentOffset = offset + i * C + currentChannelNumber;\n        output[currentOffset] = x[currentOffset] * channelScale + channelShift;\n    }\n  }`;\n      return {\n        ...metadata,\n        outputs: [\n          {dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default},\n        ],\n        getShaderSource,\n        dispatchGroup: () => ({x: Math.ceil(normCount / 64 /* workgroup size */)})\n      };\n    };\n\nexport const parseInstanceNormAttributes = (attributes: InstanceNormAttributes): InstanceNormAttributes =>\n    createAttributeWithCacheKey({epsilon: attributes.epsilon, format: attributes.format});\n\nexport const instanceNorm = (context: ComputeContext, attributes: InstanceNormAttributes): void => {\n  const metadata = {\n    name: 'InstanceNormalization',\n    inputTypes: [GpuDataType.default, GpuDataType.default, GpuDataType.default],\n    cacheHint: attributes.cacheKey,\n  };\n\n  if (attributes.format === 'NHWC') {\n    context.compute(createInstanceNormNHWCProgramInfo(metadata, context.inputs, attributes));\n  } else {\n    context.compute(createInstanceNormProgramInfo(metadata, context.inputs, attributes));\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {DataType} from '../../../wasm-common';\nimport {TensorView} from '../../tensor-view';\nimport {ShapeUtil} from '../../util';\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramMetadata} from '../types';\n\nimport {ShaderHelper, tensorTypeToWsglStorageType} from './common';\n\nexport interface LayerNormAttributes extends AttributeWithCacheKey {\n  axis: number;\n  epsilon: number;\n}\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (!inputs || inputs.length < 2) {\n    throw new Error('layerNorm requires at least 2 inputs.');\n  }\n\n  if (inputs[0].dataType !== DataType.float || inputs[1].dataType !== DataType.float) {\n    throw new Error('inputs should be float type');\n  }\n};\n\nconst createLayerNormProgramInfo =\n    (metadata: ProgramMetadata, inputs: readonly TensorView[], attributes: LayerNormAttributes, outputCount: number):\n        ProgramInfo => {\n          const xShape = inputs[0].dims;\n          const scale = inputs[1];\n          const bias = inputs[2];\n\n          const outputShape = xShape;\n          const outputSize = ShapeUtil.size(outputShape);\n          const axis = ShapeUtil.normalizeAxis(attributes.axis, xShape.length);\n          const normCount = ShapeUtil.sizeToDimension(xShape, axis);\n          const normSize = ShapeUtil.sizeFromDimension(xShape, axis);\n\n          const scaleSize = ShapeUtil.size(scale.dims);\n          const biasSize = bias ? ShapeUtil.size(bias.dims) : 0;\n          if (scaleSize !== normSize || (bias && biasSize !== normSize)) {\n            throw new Error(`Size of X.shape()[axis:] == ${normSize}.\n       Size of scale and bias (if provided) must match this.\n       Got scale size of ${scaleSize} and bias size of ${biasSize}`);\n          }\n\n          const meanInvStdDevDim = [];\n          for (let i = 0; i < xShape.length; ++i) {\n            if (i < axis) {\n              meanInvStdDevDim.push(xShape[i]);\n            } else {\n              meanInvStdDevDim.push(1);\n            }\n          }\n\n          const dataType = tensorTypeToWsglStorageType(inputs[0].dataType);\n\n          const hasMeanDataOutput = outputCount > 1;\n          const hasInvStdOutput = outputCount > 2;\n          let bindingIndex = 0;\n          const getShaderSource = (shaderHelper: ShaderHelper) => `\n  const normSize: u32 = ${normSize};\n  const normSizeTyped: ${dataType} = ${normSize};\n  const epsilon: f32 = ${attributes.epsilon};\n\n  @group(0) @binding(${bindingIndex++}) var<storage, read> x : array<${dataType}>;\n  @group(0) @binding(${bindingIndex++}) var<storage, read> scale : array<${dataType}>;\n  ${bias ? `@group(0) @binding(${bindingIndex++}) var<storage, read> bias : array<${dataType}>;` : ''}\n  @group(0) @binding(${bindingIndex++}) var<storage, read_write> output : array<${dataType}>;\n  ${\n              hasMeanDataOutput ?\n                  `@group(0) @binding(${bindingIndex++}) var<storage, read_write> meanDataOutput : array<${dataType}>` :\n                  ''};\n  ${\n              hasInvStdOutput ?\n                  `@group(0) @binding(${bindingIndex++}) var<storage, read_write> invStdOutput : array<${dataType}>` :\n                  ''};\n\n  ${shaderHelper.mainStart()}\n    let offset = global_idx * normSize;\n    if (offset >= ${outputSize}) { return; }\n    var mean: ${dataType} = 0;\n    var meanSquare: ${dataType} = 0;\n\n    for (var h: u32 = 0u; h < normSize; h++) {\n      mean = mean + x[h + offset];\n      meanSquare = meanSquare + x[h + offset] * x[h + offset];\n    }\n    mean = mean / normSizeTyped;\n    meanSquare = sqrt(meanSquare / normSizeTyped - mean * mean + epsilon);\n\n    for (var j: u32 = 0; j < normSize; j++) {\n      output[j + offset] = (x[j + offset] - mean) / meanSquare * scale[j] ${bias ? '+ bias[j]' : ''};\n    }\n\n    ${hasMeanDataOutput ? 'meanDataOutput[global_idx] = mean' : ''};\n    ${hasInvStdOutput ? 'invStdOutput[global_idx] = 1 / meanSquare' : ''};\n  }`;\n          const outputs = [{dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default}];\n          if (hasMeanDataOutput) {\n            outputs.push(\n                {dims: meanInvStdDevDim, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default},\n            );\n          }\n          if (hasInvStdOutput) {\n            outputs.push(\n                {dims: meanInvStdDevDim, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default},\n            );\n          }\n\n          return {\n            ...metadata,\n            outputs,\n            getShaderSource,\n            dispatchGroup: () => ({x: Math.ceil(normCount / 64 /* workgroup size */)})\n          };\n        };\n\nexport const parseLayerNormAttributes = (attributes: LayerNormAttributes): LayerNormAttributes =>\n    createAttributeWithCacheKey({axis: attributes.axis, epsilon: attributes.epsilon});\n\nexport const layerNorm = (context: ComputeContext, attributes: LayerNormAttributes): void => {\n  validateInputs(context.inputs);\n\n  const metadata = {\n    name: 'LayerNormalization',\n    inputTypes: context.inputs.length === 2 ? [GpuDataType.default, GpuDataType.default] :\n                                              [GpuDataType.default, GpuDataType.default, GpuDataType.default],\n    cacheHint: attributes.cacheKey + context.outputCount.toString(10) + context.inputs.length.toString(10),\n  };\n\n  context.compute(createLayerNormProgramInfo(metadata, context.inputs, attributes, context.outputCount));\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {TensorView} from '../../tensor-view';\nimport {BroadcastUtil} from '../../util';\nimport {ComputeContext, GpuDataType, ProgramInfoLoader} from '../types';\n\nimport {createMatmulProgramInfo} from './3rd-party/matmul_packed_webgpu';\nimport {InternalActivationAttributes} from './fuse-utils';\n\nconst createMatmulProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\n  name: 'MatMul',\n  inputTypes: hasBias ? [GpuDataType.default, GpuDataType.default, GpuDataType.default] :\n                        [GpuDataType.default, GpuDataType.default],\n  cacheHint\n});\n\nexport const createMatmulProgramInfoLoader =\n    (inputs: readonly TensorView[], activationAttributes: InternalActivationAttributes, outputShape: readonly number[],\n     reshapedOutputShape?: readonly number[], isChannelsLast = false): ProgramInfoLoader => {\n      const metadata = createMatmulProgramMetadata(inputs.length > 2, activationAttributes.activationCacheKey);\n      return {\n        ...metadata,\n        get: () => createMatmulProgramInfo(\n            metadata, inputs, activationAttributes, outputShape, reshapedOutputShape, isChannelsLast)\n      };\n    };\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('MatMul requires 2 inputs.');\n  }\n\n  if (inputs[0].dims[inputs[0].dims.length - 1] !== inputs[1].dims[inputs[1].dims.length - 2]) {\n    throw new Error('shared dimension does not match.');\n  }\n};\n\nexport const matMul = (context: ComputeContext): void => {\n  validateInputs(context.inputs);\n  const outputShape = BroadcastUtil.calcShape(context.inputs[0].dims, context.inputs[1].dims, true);\n  if (!outputShape) {\n    throw new Error('Can\\'t use matmul on the given tensors');\n  }\n  context.compute(createMatmulProgramInfoLoader(context.inputs, {activation: '', activationCacheKey: ''}, outputShape));\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {DataType} from '../../../wasm-common';\nimport {TensorView} from '../../tensor-view';\nimport {ShapeUtil} from '../../util';\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramInfoLoader, ProgramMetadata} from '../types';\n\nimport {IndicesHelper, inputVariable, outputVariable, ShaderHelper} from './common';\n\nexport interface PadAttributes extends AttributeWithCacheKey {\n  // 0-constant, 1-reflect, 2-edge, 3-wrap\n  readonly mode: number;\n  readonly value: number;\n  readonly pads: number[];\n}\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (!inputs || inputs.length < 1) {\n    throw new Error('Too few inputs');\n  }\n  if (inputs[0].dataType !== DataType.float) {\n    throw new Error('Input type must be float.');\n  }\n\n  if (inputs.length >= 2) {\n    let validPads = inputs[0].dims.length * 2 === inputs[1].dims[0];\n    if (inputs.length === 4) {\n      validPads = inputs[3].dims[0] * 2 === inputs[1].dims[0];\n    }\n    if (!validPads) {\n      throw new Error('The pads should be a 1D tensor of shape [2 * input_rank] or [2 * num_axes].');\n    }\n  }\n};\n\nconst getPadConstant =\n    (output: IndicesHelper, outputDims: readonly number[], inputDims: readonly number[],\n     inputStrides: readonly number[], pads: number[], dataType: string, constantValue: number): string => {\n      const inputRank = inputDims.length;\n\n      let block = '';\n      for (let i = inputRank - 1; i >= 0; --i) {\n        block += `\n            k = i32(${output.indicesGet('indices', i)}) - ${pads[i]};\n            if (k < 0) {\n              break;\n            }\n            if (k >= ${inputDims[i]}) {\n              break;\n            }\n            offset += k * ${inputStrides[i]};\n        `;\n      }\n\n      return `\n          value = ${dataType}(${constantValue});\n          for (var i = 0; i < 1; i++) {\n            var offset = 0;\n            var k = 0;\n            ${block}\n            value = x[offset];\n          }\n      `;\n    };\n\nconst getPadReflect =\n    (output: IndicesHelper, outputDims: readonly number[], inputDims: readonly number[],\n     inputStrides: readonly number[], pads: number[]): string => {\n      const inputRank = inputDims.length;\n\n      let block = '';\n      for (let i = inputRank - 1; i >= 0; --i) {\n        block += `\n                k = i32(${output.indicesGet('indices', i)}) - ${pads[i]};\n                if (k < 0) {\n                  k = -k;\n                }\n                {\n                  let _2n_1 = ${2 * (inputDims[i] - 1)};\n                  k = k % _2n_1;\n                  if(k >= ${inputDims[i]}) {\n                    k = _2n_1 - k;\n                  }\n                }\n                offset += k * ${inputStrides[i]};\n            `;\n      }\n\n      return `\n              var offset = 0;\n              var k = 0;\n              ${block}\n              value = x[offset];\n          `;\n    };\n\nconst getPadEdge =\n    (output: IndicesHelper, outputDims: readonly number[], inputDims: readonly number[],\n     inputStrides: readonly number[], pads: number[]): string => {\n      const inputRank = inputDims.length;\n\n      let block = '';\n      for (let i = inputRank - 1; i >= 0; --i) {\n        block += `\n                k = i32(${output.indicesGet('indices', i)}) - ${pads[i]};\n                if (k < 0) {\n                  k = 0;\n                }\n                if (k >= ${inputDims[i]}) {\n                  k = ${inputDims[i] - 1};\n                }\n                offset += k * ${inputStrides[i]};\n            `;\n      }\n\n      return `\n              var offset = 0;\n              var k = 0;\n              ${block}\n              value = x[offset];\n          `;\n    };\n\nconst getPadWrap =\n    (output: IndicesHelper, outputDims: readonly number[], inputDims: readonly number[],\n     inputStrides: readonly number[], pads: number[]): string => {\n      const inputRank = inputDims.length;\n\n      let block = '';\n      for (let i = inputRank - 1; i >= 0; --i) {\n        block += `\n                k = i32(${output.indicesGet('indices', i)}) - ${pads[i]};\n                if (k < 0)  {\n                  k += ${inputDims[i]};\n                }\n                if (k >= ${inputDims[i]}) {\n                  k -= ${inputDims[i]};\n                }\n                offset += k * ${inputStrides[i]};\n            `;\n      }\n\n      return `\n              var offset = 0;\n              var k = 0;\n              ${block}\n              value = x[offset];\n          `;\n    };\n\nconst getPadSnippet =\n    (output: IndicesHelper, outputDims: readonly number[], inputDims: readonly number[],\n     inputStrides: readonly number[], attributes: PadAttributes, dataType: string): string => {\n      switch (attributes.mode) {\n        case 0:\n          return getPadConstant(\n              output, outputDims, inputDims, inputStrides, attributes.pads, dataType, attributes.value);\n        case 1:\n          return getPadReflect(output, outputDims, inputDims, inputStrides, attributes.pads);\n        case 2:\n          return getPadEdge(output, outputDims, inputDims, inputStrides, attributes.pads);\n        case 3:\n          return getPadWrap(output, outputDims, inputDims, inputStrides, attributes.pads);\n        default:\n          throw new Error('Invalid mode');\n      }\n    };\n\nconst generatePadCode =\n    (shaderHelper: ShaderHelper, inputs: readonly TensorView[], attributes: PadAttributes, dataType: string):\n        string => {\n          const inputDims = inputs[0].dims;\n          const outputDims = ShapeUtil.padShape(inputDims.slice(), attributes.pads);\n          const outputSize = ShapeUtil.size(outputDims);\n          const inputStrides = ShapeUtil.computeStrides(inputDims);\n\n          const output = outputVariable('output', inputs[0].dataType, outputDims);\n          const input = inputVariable('x', inputs[0].dataType, inputDims);\n\n          const padSnippet = getPadSnippet(output, outputDims, inputDims, inputStrides, attributes, dataType);\n          const padCode = `\n              ${shaderHelper.declareVariables(input, output)}\n              ${output.impl()}\n              ${shaderHelper.mainStart()}\n              ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\n\n              let indices = ${output.offsetToIndices('global_idx')};\n\n              var value = ${dataType}(0);\n              ${padSnippet}\n              output[global_idx] = value;\n          }`;\n          return padCode;\n        };\n\nconst createPadProgramInfo =\n    (inputs: readonly TensorView[], metadata: ProgramMetadata, attributes: PadAttributes): ProgramInfo => {\n      const outputShape = ShapeUtil.padShape(inputs[0].dims.slice(), attributes.pads);\n      return {\n        ...metadata,\n        outputs: [{dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default}],\n        getShaderSource: shaderHelper => generatePadCode(shaderHelper, inputs, attributes, 'f32'),\n        dispatchGroup: () => ({x: Math.ceil(ShapeUtil.size(outputShape) / 64 /* workgroup size */)})\n      };\n    };\n\nconst createPadAttributesFromInputs = (inputs: readonly TensorView[], attributes: PadAttributes): PadAttributes => {\n  if (inputs.length > 1) {\n    const bigInt64Pads = inputs[1].getBigInt64Array();\n    const value = (inputs.length >= 3 && inputs[2].data) ? inputs[2].getFloat32Array()[0] : 0.0;\n\n    const inputRank = inputs[0].dims.length;\n    const updatePads = new Int32Array(2 * inputRank).fill(0);\n    if (inputs.length >= 4) {\n      const axes = inputs[3].getBigInt64Array();\n      for (let i = 0; i < axes.length; i++) {\n        updatePads[Number(axes[i])] = Number(bigInt64Pads[i]);\n        updatePads[Number(axes[i]) + inputRank] = Number(bigInt64Pads[i + axes.length]);\n      }\n    } else {\n      bigInt64Pads.forEach((v, i) => updatePads[Number(i)] = (Number(v)));\n    }\n\n    const pads: number[] = [];\n    updatePads.forEach(v => pads.push(v));\n\n    return createAttributeWithCacheKey({mode: attributes.mode, value, pads});\n  } else {\n    return attributes;\n  }\n};\n\nconst createPadProgramInfoLoader = (inputs: readonly TensorView[], attributes: PadAttributes): ProgramInfoLoader => {\n  const updatedAttributes = createPadAttributesFromInputs(inputs, attributes);\n  const metadata:\n      ProgramMetadata = {name: 'Pad', inputTypes: [GpuDataType.default], cacheHint: updatedAttributes.cacheKey};\n  return {...metadata, get: () => createPadProgramInfo(inputs, metadata, updatedAttributes)};\n};\n\nexport const pad = (context: ComputeContext, attributes: PadAttributes): void => {\n  validateInputs(context.inputs);\n  context.compute(createPadProgramInfoLoader(context.inputs, attributes), {inputs: [0]});\n};\n\nexport const parsePadAttributes = (attributes: Record<string, unknown>): PadAttributes => {\n  const mode = attributes.mode as number;\n  const value = attributes.value as number;\n  const pads = attributes.pads as number[];\n  return createAttributeWithCacheKey({mode, value, pads});\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {TensorView} from '../../tensor-view';\nimport {PoolConvUtil, ShapeUtil} from '../../util';\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramMetadata} from '../types';\n\nimport {IndicesHelper, inputVariable, outputVariable, ShaderHelper} from './common';\n\n// TODO: support:\n// - ceil_mode                 \"test_maxpool_2d_ceil\"\n// - storage_order             \"test_maxpool_with_argmax_2d_precomputed_strides\"\n// - [MaxPool] dilations       \"test_maxpool_2d_dilations\"\n// - [MaxPool] output[1]       \"test_maxpool_with_argmax_2d_precomputed_pads\"\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Pool ops requires 1 input.');\n  }\n  if (inputs[0].dims.length !== 4) {\n    throw new Error('Pool ops supports 2-D inputs only for now.');\n  }\n};\n\nconst getAdjustedPoolAttributesAndOutputShape = <AttributeType extends AveragePoolAttributes|MaxPoolAttributes>(\n    input: TensorView, attributes: AttributeType, isGlobalOperator: boolean): [AttributeType, number[]] => {\n  const isChannelsLast = attributes.format === 'NHWC';\n  const inputShapeAsChannelFirst =\n      isChannelsLast ? [input.dims[0], input.dims[3], input.dims[1], input.dims[2]] : input.dims.slice();\n  const hasDilations = Object.hasOwnProperty.call(attributes, 'dilations');\n  const kernelShape = attributes.kernelShape.slice();\n  const strides = attributes.strides.slice();\n  const dilations: number[] = hasDilations ? (attributes as MaxPoolAttributes).dilations.slice() : [];\n  const pads = attributes.pads.slice();\n  PoolConvUtil.adjustPoolAttributes(isGlobalOperator, inputShapeAsChannelFirst, kernelShape, strides, dilations, pads);\n\n  const outputShapeAsChannelFirst = PoolConvUtil.computePoolOutputShape(\n      isGlobalOperator, inputShapeAsChannelFirst, strides, dilations, kernelShape, pads, attributes.autoPad);\n\n  const newAttributes = Object.assign({}, attributes);\n  if (hasDilations) {\n    Object.assign(newAttributes, {kernelShape, strides, pads, dilations, cacheKey: attributes.cacheKey});\n  } else {\n    Object.assign(newAttributes, {kernelShape, strides, pads, cacheKey: attributes.cacheKey});\n  }\n  return [\n    newAttributes,\n    isChannelsLast ?\n        [\n          outputShapeAsChannelFirst[0], outputShapeAsChannelFirst[2], outputShapeAsChannelFirst[3],\n          outputShapeAsChannelFirst[1]\n        ] :\n        outputShapeAsChannelFirst\n  ];\n};\n\nconst generatePoolingCode = <AttributeType extends AveragePoolAttributes|MaxPoolAttributes>(\n    shaderHelper: ShaderHelper, x: IndicesHelper, outputShape: readonly number[], attributes: AttributeType,\n    op1: string, op2: string, start: string): string => {\n  const isChannelsLast = attributes.format === 'NHWC';\n  const inputDims = x.shape;\n  const dataType = x.type.value;\n  const rank = inputDims.length;\n  const outputSize = ShapeUtil.size(outputShape);\n  const output = outputVariable('output', x.type.tensor, outputShape);\n\n  if (attributes.kernelShape.length <= 2) {\n    const kw = attributes.kernelShape[attributes.kernelShape.length - 1];\n    const sw = attributes.strides[attributes.strides.length - 1];\n    const pwStart = attributes.pads[attributes.pads.length / 2 - 1];\n    const pwEnd = attributes.pads[attributes.pads.length - 1];\n    const dimIdxW = rank - (isChannelsLast ? 2 : 1);\n    let codeW = '';\n    let codeH = '';\n    let codeHEnd = '';\n    if (pwStart + pwEnd !== 0) {\n      codeW = `\n              for (var i: u32 = 0u; i < ${kw}u; i++) {\n                xIndices[${dimIdxW}] = indices[${dimIdxW}] * ${sw} - ${pwStart} + i;\n                if (xIndices[${dimIdxW}] < 0 || xIndices[${dimIdxW}] >= ${inputDims[dimIdxW]}) {\n                  pad++;\n                  continue;\n                }\n                let x_val = x[${x.indicesToOffset('xIndices')}];\n                ${op1}\n              }`;\n    } else {\n      codeW = `\n              for (var i: u32 = 0u; i < ${kw}u; i++) {\n                xIndices[${dimIdxW}] = indices[${dimIdxW}] * ${sw} - ${pwStart} + i;\n                let x_val = x[${x.indicesToOffset('xIndices')}];\n                ${op1}\n              }`;\n    }\n\n    if (attributes.kernelShape.length === 2) {\n      const kh = attributes.kernelShape[attributes.kernelShape.length - 2];\n      const sh = attributes.strides[attributes.strides.length - 2];\n      const phStart = attributes.pads[attributes.pads.length / 2 - 2];\n      const phEnd = attributes.pads[attributes.pads.length - 2];\n      const dimIdxH = rank - (isChannelsLast ? 3 : 2);\n      const dimH = inputDims[dimIdxH];\n      if (phStart + phEnd !== 0) {\n        codeH = `\n                for (var j: u32 = 0u; j < ${kh}u; j++) {\n                  xIndices[${dimIdxH}] = indices[${dimIdxH}] * ${sh} - ${phStart} + j;\n                  if (xIndices[${dimIdxH}] < 0 || xIndices[${dimIdxH}] >= ${dimH}) {\n                    pad+= ${kw};\n                    continue;\n                  }\n              `;\n      } else {\n        codeH = `\n                for (var j: u32 = 0u; j < ${kh}u; j++) {\n                  xIndices[${dimIdxH}] = indices[${dimIdxH}] * ${sh} - ${phStart} + j;\n                `;\n      }\n      codeHEnd = `\n              }\n            `;\n    }\n\n    const poolingCode = `\n            ${shaderHelper.declareVariables(x, output)}\n\n            ${shaderHelper.mainStart()}\n              ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\n\n              let indices = ${output.offsetToIndices('global_idx')};\n              var xIndices = ${output.offsetToIndices('global_idx')};\n\n              var value: ${dataType} = ${dataType}(${start});\n              var pad = 0;\n              ${codeH}\n              ${codeW}\n              ${codeHEnd}\n              ${op2}\n\n              output[global_idx] = value;\n            }`;\n    return poolingCode;\n  } else {\n    if (isChannelsLast) {\n      throw new Error('Pooling with kernelShape.length > 2 is not supported for NHWC format.');\n    }\n    const kernelSize = ShapeUtil.size(attributes.kernelShape);\n    const kernelStrides = ShapeUtil.computeStrides(attributes.kernelShape);\n    const stridesRank = kernelStrides.length;\n    const padsRank = attributes.pads.length;\n    const hasPads = attributes.pads.reduce((sum, cur) => sum + cur);\n    let padCode = '';\n    if (hasPads) {\n      padCode = `\n                if (xIndices[j] >= inputDims[j]) {\n                  pad++;\n                  isPad = true;\n                  break;\n                }\n              }\n              if (!isPad) {\n                let x_val = x[${x.indicesToOffset('xIndices')}];\n                ${op1}\n              }`;\n    } else {\n      padCode = `\n              }\n              let x_val = x[${x.indicesToOffset('xIndices')}];\n              ${op1}\n            `;\n    }\n    const poolingCode = `\n            ${shaderHelper.declareVariables(x, output)}\n\n            const pads = array<u32, ${padsRank}>(${attributes.pads.map(i => `${i}u`).join(',')});\n            const inputDims = array<u32, ${rank}>(${inputDims.map(i => `${i}u`).join(',')});\n            const kernelStrides = array<u32, ${stridesRank}>(${kernelStrides.map(i => `${i}u`).join(',')});\n            const strides = array<u32, ${stridesRank}>(${attributes.strides.map(i => `${i}u`).join(',')});\n\n            ${shaderHelper.mainStart()}\n              ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\n\n              let indices = ${output.offsetToIndices('global_idx')};\n              let xIndices = ${output.offsetToIndices('global_idx')};\n\n              var offsets: array<u32, ${stridesRank}>;\n\n              var value = ${output.type.value}(${start});\n              var pad = 0;\n              var isPad = false;\n\n              for (var i: u32 = 0u; i < ${kernelSize}u; i++) {\n                var offset = i;\n                for (var j = 0u; j < ${stridesRank - 1}u; j++) {\n                  offsets[j] = offset / kernelStrides[j];\n                  offset -= offsets[j] * kernelStrides[j];\n                }\n                offsets[${stridesRank - 1}] = offset;\n\n                isPad = false;\n                for (var j = ${rank - stridesRank}u; j < ${rank}u; j++) {\n                  xIndices[j] = indices[j] * strides[j - ${rank - stridesRank}u]\n                    + offsets[j - ${rank - stridesRank}u] - pads[j - 2u];\n                  ${padCode}\n              }\n              ${op2}\n\n              output[global_idx] = value;\n            }`;\n    return poolingCode;\n  }\n};\n\nexport interface FormatAttributes {\n  readonly format: 'NHWC'|'NCHW';\n}\n\nexport interface PoolCommonAttributes extends FormatAttributes {\n  readonly autoPad: string;\n  readonly ceilMode: number;\n  readonly kernelShape: readonly number[];\n  readonly strides: readonly number[];\n  readonly pads: readonly number[];\n}\n\nconst parsePoolCommonAttributes = (attributes: Record<string, unknown>): PoolCommonAttributes => ({\n  format: attributes.format as FormatAttributes['format'],\n  autoPad: ['NOTSET', 'VALID', 'SAME_UPPER', 'SAME_LOWER'][attributes.auto_pad as number],\n  ceilMode: attributes.ceil_mode as number,\n  kernelShape: attributes.kernel_shape as [number, number],\n  strides: attributes.strides as [number, number],\n  pads: attributes.pads as [number, number, number, number]\n});\n\nexport interface AveragePoolAttributes extends PoolCommonAttributes, AttributeWithCacheKey {\n  readonly countIncludePad: boolean;\n}\n\nconst createAveragePoolProgramInfo =\n    (input: TensorView, metadata: ProgramMetadata, isGlobalOperator: boolean, attributes: AveragePoolAttributes):\n        ProgramInfo => {\n          const [adjustedAttributes, outputShape] =\n              getAdjustedPoolAttributesAndOutputShape(input, attributes, isGlobalOperator);\n          const kernelSize = ShapeUtil.size(adjustedAttributes.kernelShape);\n\n          const x = inputVariable('x', input.dataType, input.dims);\n          const dataType = x.type.value;\n\n          const op1 = 'value += x_val;';\n          let op2 = '';\n          if (adjustedAttributes.countIncludePad) {\n            op2 += `value /= ${dataType}(${kernelSize});`;\n          } else {\n            op2 += `value /= ${dataType}(${kernelSize} - pad);`;\n          }\n          return {\n            ...metadata,\n            outputs: [{dims: outputShape, dataType: input.dataType, gpuDataType: GpuDataType.default}],\n            getShaderSource: shaderHelper =>\n                generatePoolingCode(shaderHelper, x, outputShape, adjustedAttributes, op1, op2, '0.0'),\n            dispatchGroup: () => ({x: Math.ceil(ShapeUtil.size(outputShape) / 64 /* workgroup size */)})\n          };\n        };\n\nexport const parseAveragePoolAttributes = (attributes: Record<string, unknown>): AveragePoolAttributes => {\n  const countIncludePad = (attributes.count_include_pad as number) === 0 ? false : true;\n\n  const attr = parsePoolCommonAttributes(attributes);\n  // TODO: support attribute 'ceil_mode'\n  if (attr.ceilMode !== 0) {\n    throw new Error('using ceil() in shape computation is not yet supported for AveragePool');\n  }\n\n  return createAttributeWithCacheKey({countIncludePad, ...attr});\n};\n\nexport const averagePool = (context: ComputeContext, attributes: AveragePoolAttributes): void => {\n  validateInputs(context.inputs);\n  const metadata = {name: 'AveragePool', inputTypes: [GpuDataType.default], cacheHint: attributes.cacheKey};\n  context.compute(\n      {...metadata, get: () => createAveragePoolProgramInfo(context.inputs[0], metadata, false, attributes)});\n};\n\nconst globalPoolAttributes = {\n  autoPad: '',\n  ceilMode: 0,\n  countIncludePad: false,\n  kernelShape: [],\n  strides: [],\n  pads: [],\n  storageOrder: 0,\n  dilations: [],\n  cacheKey: ''\n};\n\nexport const parseGlobalAveragePoolAttributes = (attributes: Record<string, unknown>): AveragePoolAttributes => {\n  const format = attributes.format as FormatAttributes['format'];\n  return {format, ...globalPoolAttributes, cacheKey: format};\n};\n\nexport const globalAveragePool = (context: ComputeContext, attributes: AveragePoolAttributes): void => {\n  validateInputs(context.inputs);\n  const metadata = {name: 'GlobalAveragePool', inputTypes: [GpuDataType.default], cacheHint: attributes.cacheKey};\n  context.compute(\n      {...metadata, get: () => createAveragePoolProgramInfo(context.inputs[0], metadata, true, attributes)});\n};\n\nexport interface MaxPoolAttributes extends PoolCommonAttributes, AttributeWithCacheKey {\n  readonly storageOrder: number;\n  readonly dilations: number[];\n}\n\nconst createMaxPoolProgramInfo =\n    (input: TensorView, metadata: ProgramMetadata, isGlobalOperator: boolean, attributes: MaxPoolAttributes):\n        ProgramInfo => {\n          const [adjustedAttributes, outputShape] =\n              getAdjustedPoolAttributesAndOutputShape(input, attributes, isGlobalOperator);\n          const op1 = `\n      value = max(x_val, value);\n    `;\n          const op2 = '';\n          const x = inputVariable('x', input.dataType, input.dims);\n          return {\n            ...metadata,\n            outputs: [{dims: outputShape, dataType: input.dataType, gpuDataType: GpuDataType.default}],\n            getShaderSource: shaderHelper =>\n                generatePoolingCode(shaderHelper, x, outputShape, adjustedAttributes, op1, op2, '-1e5'),\n            dispatchGroup: () => ({x: Math.ceil(ShapeUtil.size(outputShape) / 64 /* workgroup size */)})\n          };\n        };\n\nexport const maxPool = (context: ComputeContext, attributes: MaxPoolAttributes): void => {\n  validateInputs(context.inputs);\n  const metadata = {name: 'MaxPool', inputTypes: [GpuDataType.default], cacheHint: attributes.cacheKey};\n  context.compute({...metadata, get: () => createMaxPoolProgramInfo(context.inputs[0], metadata, false, attributes)});\n};\n\nexport const parseMaxPoolAttributes = (attributes: Record<string, unknown>): MaxPoolAttributes => {\n  const storageOrder = attributes.storage_order as number;\n  const dilations = attributes.dilations as [number, number];\n\n  const attr = parsePoolCommonAttributes(attributes);\n  // TODO: support attribute 'ceil_mode' and 'storage_order'\n  if (storageOrder !== 0) {\n    throw new Error('column major storage order is not yet supported for MaxPool');\n  }\n  if (attr.ceilMode !== 0) {\n    throw new Error('using ceil() in shape computation is not yet supported for MaxPool');\n  }\n\n  return createAttributeWithCacheKey({storageOrder, dilations, ...attr});\n};\n\nexport const parseGlobalMaxPoolAttributes = (attributes: Record<string, unknown>): MaxPoolAttributes => {\n  const format = attributes.format as FormatAttributes['format'];\n  return {format, ...globalPoolAttributes, cacheKey: format};\n};\n\nexport const globalMaxPool = (context: ComputeContext, attributes: MaxPoolAttributes): void => {\n  validateInputs(context.inputs);\n  const metadata = {name: 'GlobalMaxPool', inputTypes: [GpuDataType.default], cacheHint: attributes.cacheKey};\n  context.compute({...metadata, get: () => createMaxPoolProgramInfo(context.inputs[0], metadata, true, attributes)});\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\n\nimport {DataType} from '../../../wasm-common';\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramMetadata} from '../types';\n\nimport {outputVariable, ShaderHelper} from './common';\n\nconst validateInputsContent = (start: number, limit: number, delta: number): void => {\n  const sameStartLimit = start === limit;\n  const increasingRangeNegativeStep = start < limit && delta < 0;\n  const decreasingRangePositiveStep = start > limit && delta > 0;\n\n  if (sameStartLimit || increasingRangeNegativeStep || decreasingRangePositiveStep) {\n    throw new Error('Range these inputs\\' contents are invalid.');\n  }\n};\n\nconst createRangeProgramInfo =\n    (metadata: ProgramMetadata, start: number, limit: number, delta: number, dataType: DataType): ProgramInfo => {\n      const numElements = Math.abs(Math.ceil((limit - start) / delta));\n      const outputShape: number[] = [numElements];\n      const outputSize = numElements;\n\n      const output = outputVariable('output', dataType, outputShape);\n      const wgslType = output.type.storage;\n\n      const getShaderSource = (shaderHelper: ShaderHelper) => `\n        ${shaderHelper.declareVariables(output)}\n        ${shaderHelper.mainStart()}\n        ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\n        output[global_idx] = ${wgslType}(${start}) + ${wgslType}(global_idx) * ${wgslType}(${delta});\n      }`;\n      return {\n        ...metadata,\n        getShaderSource,\n        outputs: [{dims: outputShape, dataType, gpuDataType: GpuDataType.default}],\n        dispatchGroup: () => ({x: Math.ceil(outputSize / 64 /* workgroup size */)})\n      };\n    };\n\nexport const range = (context: ComputeContext): void => {\n  let start = 0;\n  let limit = 0;\n  let delta = 0;\n  if (context.inputs[0].dataType === DataType.int32) {\n    start = context.inputs[0].getInt32Array()[0];\n    limit = context.inputs[1].getInt32Array()[0];\n    delta = context.inputs[2].getInt32Array()[0];\n  } else if (context.inputs[0].dataType === DataType.float) {\n    start = context.inputs[0].getFloat32Array()[0];\n    limit = context.inputs[1].getFloat32Array()[0];\n    delta = context.inputs[2].getFloat32Array()[0];\n  }\n  if (env.webgpu.validateInputContent) {\n    validateInputsContent(start, limit, delta);\n  }\n\n  const cacheHint = [start, limit, delta].map(x => x.toString()).join('_');\n  const metadata: ProgramMetadata = {name: 'Range', inputTypes: [], cacheHint};\n  context.compute(\n      {...metadata, get: () => createRangeProgramInfo(metadata, start, limit, delta, context.inputs[0].dataType)},\n      {inputs: []});\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {DataType} from '../../../wasm-common';\nimport {TensorView} from '../../tensor-view';\nimport {ShapeUtil} from '../../util';\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramInfoLoader, ProgramMetadata} from '../types';\n\nimport {IndicesHelper, inputVariable, outputVariable, ShaderHelper} from './common';\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (!inputs || inputs.length === 0 || inputs.length > 2) {\n    throw new Error('Reduce op requires 1 or 2 inputs.');\n  }\n\n  if (inputs.length === 2 && inputs[1].dims.length !== 1) {\n    throw new Error('Invalid axes input dims.');\n  }\n};\n\nexport interface ReduceAttributes extends AttributeWithCacheKey {\n  keepDims: boolean;\n  noopWithEmptyAxes: boolean;\n  axes: number[];\n}\n\nexport type ReduceOp =\n    (input: IndicesHelper, output: IndicesHelper,\n     axes: readonly number[]) => [string, string, string, string, ...string[]];\n\nconst noOp: ReduceOp = (input) => ['', '', `var value = ${input.getByOffset('inputOffset')};`, ''];\nexport const createReduceProgramInfo =\n    (metadata: ProgramMetadata, inputs: readonly TensorView[], reduceOp: ReduceOp, axesInput: number[],\n     outputDataType: DataType, keepDims = false, noopWithEmptyAxes = false): ProgramInfo => {\n      const outputShape: number[] = [];\n      const inputShape = inputs[0].dims;\n\n      const axes = ShapeUtil.normalizeAxes(axesInput, inputs[0].dims.length);\n      const reduceOnAllAxes = !noopWithEmptyAxes && axes.length === 0;\n      inputShape.forEach((d, i) => {\n        if (reduceOnAllAxes || axes.indexOf(i) >= 0) {\n          if (keepDims) {\n            outputShape.push(1);\n          }  // else { // skip this axis}\n        } else {\n          outputShape.push(d);\n        }\n      });\n\n      const idxCopy: string[] = [];  // copy output indexes to input indexes\n\n      const input = inputVariable('_A', inputs[0].dataType, inputShape);\n      const output = outputVariable('output', outputDataType, outputShape);\n      const ops = reduceOp(input, output, axes);\n      const inputOffsetAssignment = `inputOffset = ${input.indicesToOffset('inputIndices')};`;\n      const initinputOffsetLet = `let ${inputOffsetAssignment};`;\n      const initinputOffsetVar = `var ${inputOffsetAssignment};`;\n      const initinputOffset = (ops[1] === '') ? '' : initinputOffsetVar;\n      let reduceOps = ((ops[1] === '') ? initinputOffsetLet : inputOffsetAssignment) + '\\n' + ops[2];\n\n      for (let k = 0, l = 0; k < inputs[0].dims.length; k++) {\n        // if this axis is reduced\n        if (reduceOnAllAxes || axes.indexOf(k) >= 0) {\n          if (keepDims) {\n            l++;\n          }\n          // loop over the d-th axis\n          reduceOps = `for(var j${k}: u32 = 0; j${k} < ${inputs[0].dims[k]}; j${k}++) {\n                ${ops[2].includes('lastIndex') ? `let lastIndex = j${k};` : ''}\n                ${input.indicesSet('inputIndices', k, `j${k}`)}\n                ${reduceOps}\n              }`;\n        } else {\n          idxCopy.push(`${input.indicesSet('inputIndices', k, output.indicesGet('outputIndices', l))};`);\n          l++;\n        }\n      }\n\n      const outputSize = ShapeUtil.size(outputShape);\n      const getShaderSource = (shaderHelper: ShaderHelper) => `\n        ${shaderHelper.declareVariables(input, output)}\n\n        ${shaderHelper.mainStart()}\n          ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\n          var inputIndices: ${input.type.indices};\n          let outputIndices = ${output.offsetToIndices('global_idx')};\n\n          ${idxCopy.join('\\n')}\n          ${ops[0]}       // init ops for reduce max/min\n          ${initinputOffset}\n          ${ops[1]}\n          ${reduceOps}\n          ${ops[3]}\n          ${ops.length === 4 ? output.setByOffset('global_idx', 'value') : ops.slice(4).join('\\n')}\n        }`;\n\n      return {\n        ...metadata,\n        getShaderSource,\n        outputs: [{dims: outputShape, dataType: outputDataType, gpuDataType: GpuDataType.default}],\n        dispatchGroup: () => ({x: Math.ceil(outputSize / 64 /* workgroup size */)})\n      };\n    };\n\nconst createReduceAttributesFromInputs =\n    (inputs: readonly TensorView[], attributes: ReduceAttributes): ReduceAttributes => {\n      const axes: number[] = [];\n      if (inputs[1].dims[0] > 0) {\n        inputs[1].getBigInt64Array().forEach(v => axes.push(Number(v)));\n      }\n      return createAttributeWithCacheKey(\n          {axes, keepDims: attributes.keepDims, noopWithEmptyAxes: attributes.noopWithEmptyAxes});\n    };\n\nconst createReduceProgramInfoLoader =\n    (inputs: readonly TensorView[], name: string, attributes: ReduceAttributes,\n     reduceOp: ReduceOp): ProgramInfoLoader => {\n      const updatedAttributes: ReduceAttributes =\n          inputs.length === 1 ? attributes : createReduceAttributesFromInputs(inputs, attributes);\n      const metadata: ProgramMetadata = {\n        name,\n        inputTypes: [GpuDataType.default],\n        cacheHint: updatedAttributes.cacheKey + '_' + inputs[0].dims.map(d => d.toString()).join(',')\n      };\n      return {\n        ...metadata,\n        get: () => createReduceProgramInfo(\n            metadata, [inputs[0]],\n            updatedAttributes.noopWithEmptyAxes && updatedAttributes.axes.length === 0 ? noOp : reduceOp,\n            updatedAttributes.axes, inputs[0].dataType, updatedAttributes.keepDims, updatedAttributes.noopWithEmptyAxes)\n      };\n    };\n\nexport const reduceLogSum = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  validateInputs(context.inputs);\n  const reduceOp: ReduceOp = (input, output) =>\n      [`var value = ${output.type.storage}(0);`,\n       '',\n       `value += ${input.getByOffset('inputOffset')};`,\n       'value = log(value);',\n  ];\n  context.compute(createReduceProgramInfoLoader(context.inputs, 'ReduceLogSum', attributes, reduceOp), {inputs: [0]});\n};\n\nexport const reduceL1 = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  validateInputs(context.inputs);\n  const reduceOp: ReduceOp = (input, output) =>\n      [`var value = ${output.type.storage}(0);`,\n       '',\n       `value += abs(${input.getByOffset('inputOffset')});`,\n       '',\n  ];\n  context.compute(createReduceProgramInfoLoader(context.inputs, 'ReduceL1', attributes, reduceOp), {inputs: [0]});\n};\n\nexport const reduceL2 = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  validateInputs(context.inputs);\n  const reduceOp: ReduceOp = (input, output) =>\n      [`var t = ${output.type.value}(0); var value = ${output.type.value}(0);`,\n       '',\n       `t = ${input.getByOffset('inputOffset')}; value += (t * t);`,\n       'value = sqrt(value);',\n  ];\n  context.compute(createReduceProgramInfoLoader(context.inputs, 'ReduceL2', attributes, reduceOp), {inputs: [0]});\n};\n\nexport const reduceLogSumExp = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  validateInputs(context.inputs);\n  const reduceOp: ReduceOp = (input, output) =>\n      [`var value = ${output.type.storage}(0);`,\n       '',\n       `value += exp(${input.getByOffset('inputOffset')});`,\n       'value = log(value);',\n  ];\n  context.compute(\n      createReduceProgramInfoLoader(context.inputs, 'ReduceLogSumExp', attributes, reduceOp), {inputs: [0]});\n};\n\nexport const reduceMax = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  validateInputs(context.inputs);\n  const reduceOp: ReduceOp = (input, _output, axes) => {\n    const idxZero = [];\n    for (let k = 0; k < input.shape.length; k++) {\n      if (axes.indexOf(k) >= 0 || axes.length === 0) {\n        idxZero.push(input.indicesSet('inputIndices', k, 0));\n      }\n    }\n\n    return [\n      `${idxZero.join('\\n')}`,\n      `var value = ${input.getByOffset('inputOffset')};`,\n      `value = max(value, ${input.getByOffset('inputOffset')});`,\n      '',\n    ];\n  };\n  context.compute(createReduceProgramInfoLoader(context.inputs, 'ReduceMax', attributes, reduceOp), {inputs: [0]});\n};\n\nexport const reduceMean = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  validateInputs(context.inputs);\n  const reduceOp: ReduceOp = (input, output, axes) => {\n    let size = 1.0;\n    for (let k = 0; k < input.shape.length; k++) {\n      if (axes.indexOf(k) >= 0 || axes.length === 0) {\n        size *= input.shape[k];\n      }\n    }\n\n    return [\n      'var sum = f32(0);',\n      '',\n      `sum += f32(${input.getByOffset('inputOffset')});`,\n      `let value = ${output.type.value}(sum / ${size});`,\n    ];\n  };\n  context.compute(createReduceProgramInfoLoader(context.inputs, 'ReduceMean', attributes, reduceOp), {inputs: [0]});\n};\n\nexport const reduceMin = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  validateInputs(context.inputs);\n  const reduceOp: ReduceOp = (input, _output, axes) => {\n    const idxZero = [];\n    for (let k = 0; k < input.shape.length; k++) {\n      if (axes.indexOf(k) >= 0 || axes.length === 0) {\n        idxZero.push(`inputIndices[${k}] = 0;`);  // first element\n      }\n    }\n\n    return [\n      `${idxZero.join('\\n')}`,\n      `var value = ${input.getByOffset('inputOffset')};`,\n      `value = min(value, ${input.getByOffset('inputOffset')});`,\n      '',\n    ];\n  };\n  context.compute(createReduceProgramInfoLoader(context.inputs, 'ReduceMin', attributes, reduceOp), {inputs: [0]});\n};\n\nexport const reduceProd = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  validateInputs(context.inputs);\n  const reduceOp: ReduceOp = (input, output) =>\n      [`var value = ${output.type.storage}(1);`,\n       '',\n       `value *= ${input.getByOffset('inputOffset')};`,\n       '',\n  ];\n  context.compute(createReduceProgramInfoLoader(context.inputs, 'ReduceProd', attributes, reduceOp), {inputs: [0]});\n};\n\nexport const reduceSum = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  validateInputs(context.inputs);\n  const reduceOp: ReduceOp = (input, output) =>\n      [`var value = ${output.type.storage}(0);`,\n       '',\n       `value += ${input.getByOffset('inputOffset')};`,\n       '',\n  ];\n  context.compute(createReduceProgramInfoLoader(context.inputs, 'ReduceSum', attributes, reduceOp), {inputs: [0]});\n};\n\nexport const reduceSumSquare = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  validateInputs(context.inputs);\n  const reduceOp: ReduceOp = (input, output) =>\n      [`var t = ${output.type.value}(0); var value = ${output.type.value}(0);`,\n       '',\n       `t = ${input.getByOffset('inputOffset')}; value += t * t;`,\n       '',\n  ];\n  context.compute(\n      createReduceProgramInfoLoader(context.inputs, 'ReduceSumSquare', attributes, reduceOp), {inputs: [0]});\n};\n\nexport const parseReduceAttributes = (attributes: Record<string, unknown>): ReduceAttributes =>\n    createAttributeWithCacheKey(attributes as Omit<ReduceAttributes, keyof AttributeWithCacheKey>);\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n\nimport {TensorView} from '../../tensor-view';\nimport {ShapeUtil} from '../../util';\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramInfoLoader, ProgramMetadata} from '../types';\n\nimport {IndicesHelper, inputVariable, outputVariable, ShaderHelper} from './common';\n\ntype CoordinateTransformMode = 'half_pixel'|'asymmetric'|'pytorch_half_pixel'|'tf_half_pixel_for_nn'|'align_corners'|\n    'tf_crop_and_resize'|'half_pixel_symmetric';\n\ntype KeepAspectRatioPolicy = 'stretch'|'not_smaller'|'not_larger';\n\ntype Mode = 'nearest'|'linear'|'cubic';\n\ntype NearestMode = 'round_prefer_floor'|'round_prefer_ceil'|'floor'|'ceil'|'simple';\n\nexport interface ResizeAttributes extends AttributeWithCacheKey {\n  antialias: number;\n  axes: number[];\n  coordinateTransformMode: CoordinateTransformMode;\n  cubicCoeffA: number;\n  excludeOutside: boolean;\n  extrapolationValue: number;\n  keepAspectRatioPolicy: KeepAspectRatioPolicy;\n  mode: Mode;\n  nearestMode: NearestMode;\n}\n\nconst validateScales = (scales: number[], attributes: ResizeAttributes): void => {\n  scales.every((value) => value > 0 || (() => {\n                            throw new Error('Resize requires scales input values to be positive');\n                          }));\n  // Check scales dims based on mode: LINEAR, CUBIC\n  if (scales.length > 0) {\n    if (attributes.mode === 'linear') {\n      if (!(scales.length === 2 || (scales.length === 4 && scales[0] === 1 && scales[1] === 1) ||\n            (scales.length === 4 && scales[0] === 1 && scales[3] === 1))) {\n        throw new Error('Resize requires scales input size to be 2 or 4 for linear mode');\n      }\n    } else if (attributes.mode === 'cubic') {\n      if (!(scales.length === 2 || (scales.length === 4 && scales[0] === 1 && scales[1] === 1) ||\n            (scales.length === 4 && scales[0] === 1 && scales[3] === 1))) {\n        throw new Error('Resize requires scales input size to be 2 or 4 for cubic mode');\n      }\n    }\n  }\n};\n\nconst updateScales = (scales: readonly number[], axes: readonly number[], rank: number): number[] => {\n  axes.every((value) => value >= 0 && value < rank || (() => {\n                          throw new Error('Resize requires axes input values to be positive and less than rank');\n                        }));\n  const newScales = new Array(rank).fill(1.0);\n  axes.forEach((value, index) => newScales[value] = scales[index]);\n  return newScales;\n};\n\nconst validateInputs =\n    (inputs: readonly TensorView[], attributes: ResizeAttributes, opsetVersion: number, scales: number[],\n     sizes: number[], roi: number[]): void => {\n      const [roiInputIndex, scalesInputIndex, sizesInputIndex] =\n          (opsetVersion > 10) ? [1, 2, 3] : [-1, (inputs.length > 1) ? 1 : -1, -1];\n      const rank = inputs[0].dims.length;\n      if (roiInputIndex > 0 && inputs.length > roiInputIndex && inputs[roiInputIndex].dims.length > 0) {\n        inputs[roiInputIndex].getFloat32Array().forEach((value) => roi.push(value));\n\n      } else if (attributes.coordinateTransformMode === 'tf_crop_and_resize') {\n        throw new Error('Resize requires RoI input to be specified when coordinateTransformMode is tfCropAndResize');\n      }\n\n      if (scalesInputIndex > 0 && inputs.length > scalesInputIndex && inputs[scalesInputIndex].dims.length > 0) {\n        inputs[scalesInputIndex].getFloat32Array().forEach((value) => scales.push(value));\n        if (scales.length !== 0 &&\n            (scales.length !== rank && (opsetVersion >= 18 && scales.length !== attributes.axes.length))) {\n          throw new Error(\n              'Resize requires scales input size to be same as input rank or axes size for opset 18 and up');\n        }\n        validateScales(scales, attributes);\n        if (attributes.axes.length > 0) {\n          updateScales(scales, attributes.axes, rank).forEach((value, index) => scales[index] = value);\n        }\n      }\n      if (sizesInputIndex > 0 && inputs.length > sizesInputIndex) {\n        inputs[sizesInputIndex].getBigInt64Array().forEach((value) => sizes.push(Number(value)));\n        if (sizes.length !== rank || (opsetVersion >= 18 && sizes.length === attributes.axes.length)) {\n          throw new Error('Resize requires sizes input size to be same as input rank or axes size for opset 18 and up');\n        }\n      }\n\n      if (attributes.axes.length > 0) {\n        if (scales.length !== attributes.axes.length) {\n          throw new Error('Resize requires \"scales\" input size to be of axes rank when axes attributes is specified');\n        }\n        if (sizes.length !== attributes.axes.length) {\n          throw new Error(\n              'Resize requires \"sizes\" input size to be of rank axes rank when axes attributes is specified');\n        }\n      }\n      if (typeof scales !== 'undefined' && typeof sizes !== 'undefined' && scales.length > 0 && sizes.length > rank) {\n        throw new Error('Resize requires only of scales or sizes to be specified');\n      }\n    };\n\nconst getOriginalCoordinateFromResizedCoordinate = (coordinateTransferMode: CoordinateTransformMode): string =>\n    'fn getOriginalCoordinateFromResizedCoordinate(xResized: f32, xScale: f32, lengthResized: f32,\\\n    lengthOriginal: f32, roiStart: f32, roiEnd: f32) -> f32 { ' +\n    (() => {\n      switch (coordinateTransferMode) {\n        case 'asymmetric':\n          return 'return xResized / xScale;';\n        case 'pytorch_half_pixel':\n          return 'if (lengthResized > 1) { \\\n                    return (xResized + 0.5) / xScale - 0.5; \\\n                  } else { \\\n                    return 0.0; \\\n                  }';\n        case 'tf_half_pixel_for_nn':\n          return 'return (xResized + 0.5) / xScale;';\n        case 'align_corners':\n          return 'if (lengthResized == 1) { \\\n                    return 0.0; \\\n                  } else { \\\n                    return xResized * (lengthOriginal - 1) / (lengthResized - 1); \\\n                  }';\n        case 'tf_crop_and_resize':\n          return 'if (lengthResized > 1) { \\\n                    return roiStart * (lengthOriginal - 1) + \\\n                          (xResized * (roiEnd - roiStart) * (lengthOriginal - 1)) / (lengthResized - 1); \\\n                  } else { \\\n                    return 0.5 * (roiStart + roiEnd) * f32(lengthOriginal - 1); \\\n                  }';\n        case 'half_pixel_symmetric':\n          return [\n            'const outputWidth = xScale * lengthResized;', 'const adjustment = lengthResized / outputWidth;',\n            'const center = lengthOriginal / 2;', 'const offset = center * (1 - adjustment);',\n            'return offset + ((xResized + 0.5) / xScale) - 0.5;'\n          ].join('\\n');\n        case 'half_pixel':\n          return 'return ((xResized + 0.5) / xScale) - 0.5;';\n        default:\n          throw new Error(`Coordinate transform mode ${coordinateTransferMode} is not supported`);\n      }\n    })() +\n    '}';\n\nconst getNearestPixelFromOriginal = (nearestMode: NearestMode, opsetVersion: number): string =>\n    'fn getNearestPixelFromOriginal(xOriginal: f32, isDownSample: bool) -> f32 {' + (() => {\n      switch (nearestMode) {\n        case 'round_prefer_ceil':\n          return 'if (fract(xOriginal) == 0.5) { \\\n            return ceil(xOriginal); \\\n          } else { \\\n            return round(xOriginal); \\\n          }';\n        case 'floor':\n          return 'return floor(xOriginal);';\n        case 'ceil':\n          return 'return ceil(xOriginal);';\n        case 'round_prefer_floor':\n          return 'if (fract(xOriginal) == 0.5) { \\\n                    return floor(xOriginal); \\\n                  } else { \\\n                    return round(xOriginal); \\\n                  }';\n        case 'simple':\n        default:\n          if (opsetVersion < 11) {\n            return 'if (isDownSample) \\\n                    { \\\n                      return ceil(xOriginal); \\\n                    } else { \\\n                      return xOriginal; \\\n                    }';\n          }\n          throw new Error(`Nearest mode ${nearestMode} is not supported`);\n      }\n    })() +\n    '}';\n\nconst updateRoI = (roi: readonly number[], axes: readonly number[], rank: number): number[] => {\n  const roiTmp = new Array(rank).fill(0).concat(new Array(rank).fill(1));\n  const roiLocal = roi.length === 0 ? roiTmp : roi.slice();\n  if (axes.length > 0) {\n    axes.forEach((v, i) => {\n      roiTmp[v] = roiLocal[i];\n      roiTmp[i + rank] = roiLocal[axes.length + i];\n    });\n    return roiTmp;\n  }\n  return roiLocal;\n};\n\nconst initOutputShape =\n    (inputShape: readonly number[], scales: readonly number[], sizes: readonly number[], axes: readonly number[]):\n        number[] => {\n          let outputShape: number[] = [];\n          if (sizes.length > 0) {\n            if (axes.length > 0) {\n              inputShape.forEach((v) => outputShape.push(v));\n              if (Math.max(...axes) > inputShape.length) {\n                throw new Error('axes is out of bound');\n              }\n              axes.forEach((v, i) => outputShape[v] = sizes[i]);\n            } else {\n              sizes.forEach((v) => outputShape.push(v));\n            }\n          } else {\n            if (scales.length === 0) {\n              throw new Error('Resize requires either scales or sizes.');\n            } else {\n              outputShape = inputShape.map((value, index) => Math.round(value * scales[index]));\n            }\n          }\n          return outputShape;\n        };\n\nconst adjustOutputShape =\n    (inputShape: readonly number[], outputShape: readonly number[], scales: number[], attributes: ResizeAttributes):\n        number[] => {\n          const scaleInPolicy = (() => {\n            switch (attributes.keepAspectRatioPolicy) {\n              case 'not_larger':\n                return attributes.axes.length > 0 ? Math.min(...attributes.axes.map(i => scales[i]), Number.MAX_VALUE) :\n                                                    Math.min(...scales, Number.MAX_VALUE);\n              case 'not_smaller':\n                return attributes.axes.length > 0 ? Math.max(...attributes.axes.map(i => scales[i]), Number.MIN_VALUE) :\n                                                    Math.max(...scales, Number.MIN_VALUE);\n              default:\n                throw new Error(`Keep aspect ratio policy ${attributes.keepAspectRatioPolicy} is not supported`);\n            }\n          })();\n          scales.fill(1.0, 0, scales.length);\n          const adjustedOutputShape = inputShape.slice();\n          if (attributes.axes.length > 0) {\n            attributes.axes.forEach((v) => scales[v] = scaleInPolicy);\n            attributes.axes.forEach((v) => adjustedOutputShape[v] = Math.round(inputShape[v] * scales[v]));\n          } else {\n            scales.fill(scaleInPolicy, 0, scales.length);\n            adjustedOutputShape.forEach((v, i) => adjustedOutputShape[i] = Math.round(v * scales[i]));\n          }\n          return adjustedOutputShape;\n        };\n\nconst calculateOriginalIndicesFromOutputIndices =\n    (output: IndicesHelper, inputShape: readonly number[], outputShape: readonly number[], scales: readonly number[],\n     roi: readonly number[]): string => `\n    fn calculateOriginalIndicesFromOutputIndices(outputIndices: ${output.type.indices}) -> array<f32, ${\n        outputShape.length}> {\n      const inputShape = array<u32, ${inputShape.length}>(${inputShape.map(i => `${i}u`).join(',')});\n      const outputShape = array<u32, ${outputShape.length}>(${outputShape.map(i => `${i}u`).join(',')});\n      const scales = array<f32, ${scales.length}>(${scales.map(i => `${i}f`).join(',')});\n      const roi = array<f32, ${roi.length}>(${roi.map(i => `${i}f`).join(',')});\n      var originalIndices: array<f32, ${outputShape.length}>;\n      for (var i:u32 = 0; i < ${outputShape.length}; i++) {\n        var outputIndex = ${outputShape.length === 1 ? 'outputIndices' : 'outputIndices[i]'};\n        if (scales[i] == 1.0) {\n          originalIndices[i] = f32(outputIndex);\n        } else {\n          originalIndices[i] = getOriginalCoordinateFromResizedCoordinate(f32(outputIndex), scales[i],\n                f32(outputShape[i]), f32(inputShape[i]), roi[i], roi[i + ${inputShape.length}]);\n        }\n      }\n      return originalIndices;\n    }`;\n\nconst calculateInputIndicesFromOutputIndices =\n    (input: IndicesHelper, output: IndicesHelper, inputShape: readonly number[], outputShape: readonly number[],\n     scales: readonly number[], roi: readonly number[], useExtrapolation: boolean): string => `\n    fn calculateInputIndicesFromOutputIndices(outputIndices: ${output.type.indices}) -> ${input.type.indices} {\n        const inputShape = array<u32, ${inputShape.length}>(${inputShape.map(i => `${i}u`).join(',')});\n        const outputShape = array<u32, ${outputShape.length}>(${outputShape.map(i => `${i}u`).join(',')});\n        const scales = array<f32, ${scales.length}>(${scales.map(i => `${i}f`).join(',')});\n        const roi = array<f32, ${roi.length}>(${roi.map(i => `${i}f`).join(',')});\n        var inputIndices: ${input.type.indices};\n        for (var i:u32 = 0; i < ${outputShape.length}; i++) {\n          var outputIndex = ${outputShape.length === 1 ? 'outputIndices' : 'outputIndices[i]'};\n          var inputIndex: u32;\n          if (scales[i] == 1.0) {\n            inputIndex = outputIndex;\n          } else {\n            var original_idx = getOriginalCoordinateFromResizedCoordinate(f32(outputIndex), scales[i],\n                    f32(outputShape[i]), f32(inputShape[i]), roi[i], roi[i + ${inputShape.length}]);\n            if (!${useExtrapolation} || (original_idx >= 0 && original_idx < f32(inputShape[i]))) {\n              if (original_idx < 0) {\n                inputIndex = 0;\n              } else if (original_idx > (f32(inputShape[i]) - 1)) {\n                inputIndex = inputShape[i] - 1;\n              } else {\n                inputIndex = u32(getNearestPixelFromOriginal(original_idx, scales[i] < 1));\n              }\n            } else {\n              inputIndex = u32(original_idx);\n            }\n          }\n          ${input.indicesSet('inputIndices', 'i', 'inputIndex')}\n        }\n        return inputIndices;\n    }`;\n\nconst checkInputIndices = (input: IndicesHelper, inputShape: readonly number[]): string => `\n    fn checkInputIndices(inputIndices: ${input.type.indices}) -> bool {\n      const inputShape = array<u32, ${inputShape.length}>(${inputShape.map(i => `${i}u`).join(',')});\n      for (var i:u32 = 0; i < ${inputShape.length}; i++) {\n        var inputIndex = ${inputShape.length === 1 ? 'inputIndices' : 'inputIndices[i]'};\n        if (inputIndex < 0 || inputIndex >= inputShape[i]) {\n          return false;\n        }\n      }\n      return true;\n    }`;\n\nconst bilinearInterpolation =\n    (input: IndicesHelper, output: IndicesHelper, inputShape: readonly number[], outputShape: readonly number[],\n     scales: readonly number[], useExtrapolation: boolean, extrapolationValue: number): string => {\n      const [batchIdx, heightIdx, widthIdx, channelIdx] =\n          inputShape.length === 2 ? [-1, 0, 1, -1] : (scales[1] === 1.0 ? [0, 2, 3, 1] : [0, 1, 2, 3]);\n      return `\n    fn getInputValue(batch: u32, channel: u32, row: u32, col: u32) -> f32 {\n      var inputIndices: ${input.type.indices};\n      inputIndices[${heightIdx}] = max(0, min(row, ${inputShape[heightIdx]} - 1));\n      inputIndices[${widthIdx}] = max(0, min(col, ${inputShape[widthIdx]} - 1));\n      if (${inputShape.length} > 2) {\n        inputIndices[${channelIdx}] = channel;\n        inputIndices[${batchIdx}] = batch;\n      };\n      return input[${input.indicesToOffset('inputIndices')}];\n    }\n\n    fn bilinearInterpolation(outputIndices: ${output.type.indices}) -> f32 {\n      var originalIndices = calculateOriginalIndicesFromOutputIndices(outputIndices);\n      var row:f32 = originalIndices[${heightIdx}];\n      var col:f32 = originalIndices[${widthIdx}];\n      if (${useExtrapolation} && (row < 0 || row > (${inputShape[heightIdx]} - 1) || col < 0 || col > ${\n          inputShape[widthIdx]} - 1)) {\n        return ${extrapolationValue};\n      }\n      row = max(0, min(row, ${inputShape[heightIdx]} - 1));\n      col = max(0, min(col, ${inputShape[widthIdx]} - 1));\n      var row1: u32 = u32(row);\n      var col1: u32 = u32(col);\n      var row2: u32 = u32(row + 1);\n      var col2: u32 = u32(col + 1);\n      var channel: u32 = 0;\n      var batch: u32 = 0;\n      if (${inputShape.length > 2}) {\n        channel = u32(originalIndices[${channelIdx}]);\n        batch = u32(originalIndices[${batchIdx}]);\n      }\n      var x11: f32 = getInputValue(batch, channel, row1, col1);\n      var x12: f32 = getInputValue(batch, channel, row1, col2);\n      var x21: f32 = getInputValue(batch, channel, row2, col1);\n      var x22: f32 = getInputValue(batch, channel, row2, col2);\n      var dx1: f32 = row - f32(row1);\n      var dx2: f32 = f32(row2 ) - row;\n      var dy1 = col - f32(col1);\n      var dy2 = f32(col2) - col;\n      return (x11 * dx2 * dy2 + x12 * dx2 * dy1 + x21 * dx1 * dy2 + x22 * dx1 * dy1);\n    }`;\n    };\n\nconst bicubicInterpolation =\n    (input: IndicesHelper, output: IndicesHelper, inputShape: readonly number[], outputShape: readonly number[],\n     scales: readonly number[], roi: readonly number[], cubicCoeffA: number, useExtrapolation: boolean,\n     extrapolationValue: number, excludeOutside: boolean): string => {\n      const [heightIdx, widthIdx] = inputShape.length === 2 ? [0, 1] : (scales[1] === 1.0) ? [2, 3] : [1, 2];\n\n      const createCubicInterpolationFunction = (idx: number): string => {\n        const direction = idx === heightIdx ? 'row' : 'col';\n        return `\n      fn ${direction}CubicInterpolation(inputIndices: ${input.type.indices}, outputIndices: ${\n            output.type.indices}) -> f32 {\n        var outputIndex = ${outputShape.length === 1 ? 'outputIndices' : `outputIndices[${idx}]`};\n        var originalIdx: f32 = getOriginalCoordinateFromResizedCoordinate(f32(outputIndex), ${scales[idx]},\n        f32(${outputShape[idx]}), f32(${inputShape[idx]}), ${roi[idx]}, ${roi[idx]} + ${inputShape.length});\n        var fractOriginalIdx: f32 = originalIdx - floor(originalIdx);\n        var coefs = getCubicInterpolationCoefs(fractOriginalIdx);\n\n        if (${useExtrapolation} && (originalIdx < 0 || originalIdx > (${inputShape[idx]} - 1))) {\n          return ${extrapolationValue};\n        }\n        var data: array<f32, 4> = array<f32, 4>(0.0, 0.0, 0.0, 0.0);\n        for (var i: i32 = -1; i < 3; i++) {\n          var ${direction}: f32 = originalIdx + f32(i);\n          if (${direction} < 0 || ${direction} >= ${inputShape[idx]}) {\n            if (${excludeOutside}) {\n              coefs[i + 1] = 0.0;\n              continue;\n            } else if (${useExtrapolation}) {\n              return ${extrapolationValue};\n            } else {\n              ${direction} = max(0, min(${direction}, ${inputShape[idx]} - 1));\n            }\n          }\n          var inputIndicesCopy: ${input.type.indices} = inputIndices;\n          inputIndicesCopy[${idx}] = u32(${direction});\n          data[i + 1] = ${idx === heightIdx ? `input[${input.indicesToOffset('inputIndicesCopy')}];` : `\n                                               rowCubicInterpolation(inputIndicesCopy, outputIndices);`}\n        }\n        return cubicInterpolation1D(data, coefs);\n      }`;\n      };\n\n      return `\n    ${createCubicInterpolationFunction(heightIdx)};\n    ${createCubicInterpolationFunction(widthIdx)};\n  fn getCubicInterpolationCoefs(s: f32) -> array<f32, 4> {\n    var absS = abs(s);\n    var coeffs: array<f32, 4> = array<f32, 4>(0.0, 0.0, 0.0, 0.0);\n    var oneMinusAbsS: f32 = 1.0 - absS;\n    var twoMinusAbsS: f32 = 2.0 - absS;\n    var onePlusAbsS: f32 = 1.0 + absS;\n    coeffs[0] = ((${cubicCoeffA} * onePlusAbsS - 5 * ${cubicCoeffA}) * onePlusAbsS + 8 * ${\n          cubicCoeffA}) * onePlusAbsS - 4 * ${cubicCoeffA};\n    coeffs[1] = ((${cubicCoeffA} + 2) * absS - (${cubicCoeffA} + 3)) * absS * absS + 1;\n    coeffs[2] = ((${cubicCoeffA} + 2) * oneMinusAbsS - (${cubicCoeffA} + 3)) * oneMinusAbsS * oneMinusAbsS + 1;\n    coeffs[3] = ((${cubicCoeffA} * twoMinusAbsS - 5 * ${cubicCoeffA}) * twoMinusAbsS + 8 * ${\n          cubicCoeffA}) * twoMinusAbsS - 4 * ${cubicCoeffA};\n    return coeffs;\n  }\n\n  fn cubicInterpolation1D(x: array<f32, 4>, coefs: array<f32, 4>) -> f32 {\n    var coefsSum: f32 = coefs[0] + coefs[1] + coefs[2] + coefs[3];\n    return (x[0] * coefs[0] + x[1] * coefs[1]+ x[2] * coefs[2]+ x[3] * coefs[3]) / coefsSum;\n  }\n\n  fn bicubicInterpolation(outputIndices: ${output.type.indices}) -> f32 {\n    var inputIndices: ${input.type.indices} = outputIndices;\n    return colCubicInterpolation(inputIndices, outputIndices);\n  }\n    `;\n    };\n\nconst createResizeProgramInfo =\n    (metadata: ProgramMetadata, inputTensor: TensorView, attributes: ResizeAttributes, opsetVersion: number,\n     scalesInput: readonly number[], sizes: readonly number[], roiInput: readonly number[]): ProgramInfo => {\n      const inputShape = inputTensor.dims;\n      const roi = updateRoI(roiInput, attributes.axes, inputShape.length);\n\n      let outputShape = initOutputShape(inputShape, scalesInput, sizes, attributes.axes);\n      let scales = scalesInput.slice();\n      if (scalesInput.length === 0) {\n        scales = inputShape.map((value, index) => value === 0 ? 1.0 : outputShape[index] / value);\n        if (attributes.keepAspectRatioPolicy !== 'stretch') {\n          outputShape = adjustOutputShape(inputShape, outputShape, scales, attributes);\n        }\n      }\n      const output = outputVariable('output', inputTensor.dataType, outputShape);\n      const input = inputVariable('input', inputTensor.dataType, inputShape);\n      const outputSize = ShapeUtil.size(outputShape);\n      const noScale = inputShape.length === outputShape.length && inputShape.every((d, i) => d === outputShape[i]);\n      const useExtrapolation = attributes.coordinateTransformMode === 'tf_crop_and_resize';\n      const getShaderSource = (shaderHelper: ShaderHelper) => `\n      ${getOriginalCoordinateFromResizedCoordinate(attributes.coordinateTransformMode)};\n      ${(() => {\n        switch (attributes.mode) {\n          case 'nearest':\n            return `\n              ${checkInputIndices(input, inputShape)};\n              ${getNearestPixelFromOriginal(attributes.nearestMode, opsetVersion)};\n              ${\n                calculateInputIndicesFromOutputIndices(\n                    input, output, inputShape, outputShape, scales, roi, useExtrapolation)};\n              `;\n          case 'linear':\n            return `\n              ${calculateOriginalIndicesFromOutputIndices(output, inputShape, outputShape, scales, roi)};\n              ${\n                bilinearInterpolation(\n                    input, output, inputShape, outputShape, scales, useExtrapolation, attributes.extrapolationValue)};\n              `;\n          case 'cubic':\n            return `\n            ${\n                bicubicInterpolation(\n                    input, output, inputShape, outputShape, scales, roi, attributes.cubicCoeffA, useExtrapolation,\n                    attributes.extrapolationValue, attributes.excludeOutside)};\n            `;\n          default:\n            throw Error('Invalid resize mode');\n        }\n      })()};\n      ${shaderHelper.declareVariables(input, output)}\n      ${shaderHelper.mainStart()}\n        ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\n        if (${noScale}) {\n          output[global_idx] = input[global_idx];\n        } else {\n          let outputIndices = ${output.offsetToIndices('global_idx')};\n          var inputIndices: ${input.type.indices};\n          ${(() => {\n        switch (attributes.mode) {\n          case 'nearest':\n            return `inputIndices = calculateInputIndicesFromOutputIndices(outputIndices);\n                  if (checkInputIndices(inputIndices)) {\n                    output[global_idx] = input[${input.indicesToOffset('inputIndices')}];\n                  } else {\n                    output[global_idx] = ${attributes.extrapolationValue};\n                  }`;\n          case 'linear':\n            return 'output[global_idx] = bilinearInterpolation(outputIndices);';\n          case 'cubic':\n            return 'output[global_idx] = bicubicInterpolation(outputIndices);';\n          default:\n            throw Error(`Unsupported resize mode: ${attributes.mode}`);\n        }\n      })()};\n        }\n      }`;\n\n      return {\n        ...metadata,\n        getShaderSource,\n        outputs: [{dims: outputShape, dataType: inputTensor.dataType, gpuDataType: GpuDataType.default}],\n        dispatchGroup: () => ({x: Math.ceil(outputSize / 64 /* workgroup size */)})\n      };\n    };\n\nexport const createResizeProgramInfoLoader =\n    (input: TensorView, attributes: ResizeAttributes, opsetVersion: number, scales: readonly number[],\n     sizes: readonly number[], roi: readonly number[]): ProgramInfoLoader => {\n      const metadata: ProgramMetadata = {\n        name: 'Resize',\n        inputTypes: [GpuDataType.default],\n        cacheHint: attributes.cacheKey + opsetVersion.toString() +\n            (scales.length > 0 ? '_scales_' + scales.toString() : '') +\n            (sizes.length > 0 ? '_sizes_' + sizes.toString() : ''),\n      };\n      return {\n        ...metadata,\n        get: () => createResizeProgramInfo(metadata, input, attributes, opsetVersion, scales, sizes, roi)\n      };\n    };\n\nconst getOpsetVersionFromCustomDataBuffer = (context: ComputeContext): number => {\n  const customDataBuffer = context.customDataBuffer;\n  const customDataBuffer32 = new Uint32Array(customDataBuffer, customDataBuffer.byteOffset, 1);\n  const opsetVersion = customDataBuffer32[0];\n  return opsetVersion;\n};\n\nexport const resize = (context: ComputeContext, attributes: ResizeAttributes): void => {\n  const scales: number[] = [];\n  const sizes: number[] = [];\n  const roi: number[] = [];\n  const opsetVersion = getOpsetVersionFromCustomDataBuffer(context);\n  validateInputs(context.inputs, attributes, opsetVersion, scales, sizes, roi);\n  context.compute(\n      createResizeProgramInfoLoader(context.inputs[0], attributes, opsetVersion, scales, sizes, roi), {inputs: [0]});\n};\n\nexport const parseResizeAttributes = (attributes: Record<string, unknown>): ResizeAttributes => {\n  const antialias = attributes.antialias as number;\n  const axes = attributes.axes as number[];\n  const coordinateTransformMode: CoordinateTransformMode =\n      attributes.coordinateTransformMode as CoordinateTransformMode;\n  const cubicCoeffA = attributes.cubicCoeffA as number;\n  const excludeOutside = attributes.excludeOutside as number !== 0;\n  const extrapolationValue = attributes.extrapolationValue as number;\n  const keepAspectRatioPolicy: KeepAspectRatioPolicy = attributes.keepAspectRatioPolicy as KeepAspectRatioPolicy;\n  const mode: Mode = attributes.mode as Mode;\n  // If nearestMode is not specified, use simple mode.\n  const nearestMode: NearestMode = (attributes.nearestMode === '' ? 'simple' : attributes.nearestMode) as NearestMode;\n  return createAttributeWithCacheKey({\n    antialias,\n    axes,\n    coordinateTransformMode,\n    cubicCoeffA,\n    excludeOutside,\n    extrapolationValue,\n    keepAspectRatioPolicy,\n    mode,\n    nearestMode\n  });\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {DataType} from '../../../wasm-common';\nimport {TensorView} from '../../tensor-view';\nimport {ShapeUtil} from '../../util';\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramInfoLoader, ProgramMetadata} from '../types';\n\nimport {ShaderHelper, tensorTypeToWsglStorageType} from './common';\n\nexport interface SkipLayerNormAttributes extends AttributeWithCacheKey {\n  epsilon: number;\n}\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (!inputs || inputs.length < 3) {\n    throw new Error('layerNorm requires at least 3 inputs.');\n  }\n\n  if (inputs[0].dataType !== DataType.float || inputs[1].dataType !== DataType.float) {\n    throw new Error('inputs should be float type');\n  }\n  const input: TensorView = inputs[0];\n  const skip: TensorView = inputs[1];\n  const gamma: TensorView = inputs[2];\n\n  if (input.dataType !== skip.dataType || input.dataType !== gamma.dataType) {\n    throw new Error('All inputs must have the same data type');\n  }\n\n  if (input.dims.length !== 3 && input.dims.length !== 2) {\n    throw new Error('Input must be 2D or 3D');\n  }\n\n  if (skip.dims.length !== 3 && skip.dims.length !== 2) {\n    throw new Error('Skip must be 2D or 3D');\n  }\n\n  const hiddenSize = input.dims[input.dims.length - 1];\n  const sequenceLength = input.dims[input.dims.length - 2];\n  if (skip.dims[skip.dims.length - 1] !== hiddenSize) {\n    throw new Error('Skip must have the same hidden size as input');\n  }\n  if (skip.dims[skip.dims.length - 2] !== sequenceLength) {\n    throw new Error('Skip must have the same sequence length as input');\n  }\n\n  if (gamma.dims.length !== 1) {\n    throw new Error('Gamma must be 1D');\n  }\n  if (gamma.dims[gamma.dims.length - 1] !== hiddenSize) {\n    throw new Error('Gamma must have the same hidden size as input');\n  }\n  if (inputs.length > 3) {\n    const beta: TensorView = inputs[3];\n    if (beta.dims.length !== 1) {\n      throw new Error('Beta must be 1D');\n    }\n    if (beta.dims[beta.dims.length - 1] !== hiddenSize) {\n      throw new Error('Beta must have the same hidden size as input');\n    }\n  }\n\n  if (inputs.length > 4) {\n    const bias: TensorView = inputs[4];\n    if (bias.dims.length !== 1) {\n      throw new Error('Bias must be 1D');\n    }\n    if (bias.dims[bias.dims.length - 1] !== hiddenSize) {\n      throw new Error('Bias must have the same hidden size as input');\n    }\n  }\n};\n\nconst createSkipLayerNormProgramInfo =\n    (metadata: ProgramMetadata, inputs: readonly TensorView[], attributes: SkipLayerNormAttributes, outputCount: number,\n     isTraining: boolean): ProgramInfo => {\n      const inputShape = inputs[0].dims;\n      const inputSize = ShapeUtil.size(inputShape);\n      const outputShape = inputShape;\n      const outputSize = inputSize;\n      const hiddenSize = inputShape.slice(-1)[0];\n      const meanInvStdDevDim = isTraining ? inputShape.slice(0, -1).concat(1) : [];\n      const hasBetaInput = inputs.length > 3;\n      const hasBiasInput = inputs.length > 4;\n      const dataType = tensorTypeToWsglStorageType(inputs[0].dataType);\n      const hasMeanOutput = isTraining && outputCount > 1;\n      const hasInvStdDevOutput = isTraining && outputCount > 2;\n      const hasInputSkipBiasSumOutput = outputCount > 3;\n      let bindingNumber = 0;\n      const getShaderSource = (shaderHelper: ShaderHelper) => `\n      const hiddenSize: u32 = ${hiddenSize};\n      const epsilon: f32 = ${attributes.epsilon};\n\n      @group(0) @binding(${bindingNumber++}) var<storage, read> x : array<${dataType}>;\n      @group(0) @binding(${bindingNumber++}) var<storage, read> skip : array<${dataType}>;\n      @group(0) @binding(${bindingNumber++}) var<storage, read> gamma : array<${dataType}>;\n      ${hasBetaInput ? `@group(0) @binding(${bindingNumber++}) var<storage, read> beta : array<${dataType}>;` : ''}\n      ${hasBiasInput ? `@group(0) @binding(${bindingNumber++}) var<storage, read> bias : array<${dataType}>;` : ''}\n      @group(0) @binding(${bindingNumber++}) var<storage, read_write> output : array<${dataType}>;\n      ${\n          hasMeanOutput ?\n              `@group(0) @binding(${bindingNumber++}) var<storage, read_write> meanOutput : array<${dataType}>;` :\n              ''}\n      ${\n          hasInvStdDevOutput ?\n              `@group(0) @binding(${bindingNumber++}) var<storage, read_write> invStdOutput : array<${dataType}>;` :\n              ''}\n      ${\n          hasInputSkipBiasSumOutput ?\n              `@group(0) @binding(${bindingNumber++}) var<storage, read_write> inputSkipBiasSum : array<${dataType}>;` :\n              ''}\n\n      ${shaderHelper.mainStart()}\n        ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize / hiddenSize)}\n        let offset = global_idx * hiddenSize;\n        var sum: f32 = 0.0;\n        var squareSum: f32 = 0.0;\n        for (var i: u32 = 0; i < hiddenSize; i++) {\n          let skipValue = skip[offset + i];\n          let biasValue = ${hasBiasInput ? 'bias[i]' : '0.0'};\n          let inputValue = x[offset + i];\n          let value = inputValue + skipValue + biasValue;\n          ${hasInputSkipBiasSumOutput ? 'inputSkipBiasSum[offset + i] = value;' : ''}\n          output[offset + i] = value;\n          sum += value;\n          squareSum += value * value;\n        }\n        let mean: f32 = sum / f32(hiddenSize);\n        let variance: f32 = sqrt(squareSum / f32(hiddenSize) - mean * mean + epsilon);\n        ${hasMeanOutput ? 'meanOutput[global_idx] = mean;' : ''}\n        ${hasInvStdDevOutput ? 'invStdOutput[global_idx] = 1.0 / variance;' : ''}\n        for (var i: u32 = 0; i < hiddenSize; i++) {\n          output[offset + i] = (output[offset + i] - mean) / variance * gamma[i] + ${hasBetaInput ? 'beta[i]' : '0.0'};\n        }\n      }`;\n      const outputs = [{dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default}];\n      if (outputCount > 1) {\n        outputs.push({dims: meanInvStdDevDim, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default});\n      }\n      if (outputCount > 2) {\n        outputs.push({dims: meanInvStdDevDim, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default});\n      }\n      if (outputCount > 3) {\n        outputs.push({dims: inputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default});\n      }\n\n      return {\n        ...metadata,\n        getShaderSource,\n        outputs,\n        dispatchGroup: () => ({x: Math.ceil(outputSize / hiddenSize / 64)})\n      };\n    };\n\nconst createSkipLayerNormProgramInfoLoader =\n    (inputs: readonly TensorView[], attributes: SkipLayerNormAttributes, outputCount: number, isTraining: boolean):\n        ProgramInfoLoader => {\n          const inputTypes = new Array(inputs.length).fill(GpuDataType.default);\n          const metadata: ProgramMetadata = {\n            name: 'SkipLayerNormalization',\n            inputTypes,\n            cacheHint: attributes.cacheKey,\n          };\n          return {\n            ...metadata,\n            get: () => createSkipLayerNormProgramInfo(metadata, inputs, attributes, outputCount, isTraining)\n          };\n        };\n\nexport const skipLayerNorm = (context: ComputeContext, attributes: SkipLayerNormAttributes): void => {\n  // TODO: initialize isTraining from ComputeContext\n  const isTraining = false;\n  validateInputs(context.inputs);\n  // Mean and InvStdDev are only used in training mode and are not required for inference.\n  // They are added here for completeness only.\n  const outputs = [0];\n  if (context.outputCount > 1) {\n    outputs.push(isTraining ? 1 : -3);\n  }\n  if (context.outputCount > 2) {\n    outputs.push(isTraining ? 2 : -3);\n  }\n  if (context.outputCount > 3) {\n    outputs.push(3);\n  }\n  context.compute(\n      createSkipLayerNormProgramInfoLoader(context.inputs, attributes, context.outputCount, isTraining), {outputs});\n};\n\nexport const parseSkipLayerNormAttributes = (attributes: Record<string, unknown>): SkipLayerNormAttributes => {\n  const epsilon = attributes.epsilon as number;\n  return createAttributeWithCacheKey({epsilon});\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {DataType} from '../../../wasm-common';\nimport {TensorView} from '../../tensor-view';\nimport {ShapeUtil} from '../../util';\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramInfoLoader, ProgramMetadata, TensorInfo} from '../types';\n\nimport {IndicesHelper, inputVariable, outputVariable, ShaderHelper} from './common';\n\nexport interface SliceAttributes extends AttributeWithCacheKey {\n  readonly starts: number[];\n  readonly ends: number[];\n  readonly axes: number[];\n}\n\nconst validateInputs = (inputs: readonly TensorView[], attributes: SliceAttributes): void => {\n  if (!inputs || inputs.length < 1) {\n    throw new Error('too few inputs');\n  }\n  if (attributes.axes.length !== 0) {\n    if (attributes.axes.length !== attributes.starts.length || attributes.axes.length !== attributes.ends.length) {\n      throw new Error('axes, starts and ends must have the same length');\n    }\n  } else if (attributes.starts.length !== attributes.ends.length) {\n    throw new Error('starts and ends must have the same length');\n  }\n  inputs.slice(1).forEach((_, idx) => {\n    if (inputs[idx + 1].dataType !== DataType.int32 && inputs[idx + 1].dataType !== DataType.int64) {\n      throw new Error(`Input ${idx} must be an array of int32 or int64`);\n    }\n  });\n};\n\nconst readInput = (inputs: readonly TensorView[], idx: number): number[] => {\n  const input: number[] = [];\n  if (inputs.length > idx) {\n    if (inputs[idx].dataType === DataType.int64) {\n      inputs[idx].getBigInt64Array().forEach(v => input.push(Number(v)));\n    } else if (inputs[idx].dataType === DataType.int32) {\n      inputs[idx].getInt32Array().forEach(v => input.push(Number(v)));\n    } else {\n      throw new Error(`Input ${idx} must be an array of int32 or int64`);\n    }\n  }\n  return input;\n};\n\nconst createSliceAttributesFromInputs =\n    (inputs: readonly TensorView[], attributes: SliceAttributes): SliceAttributes => {\n      if (inputs.length > 1) {\n        const starts: number[] = readInput(inputs, 1);\n        const ends: number[] = readInput(inputs, 2);\n        let axes: number[] = readInput(inputs, 3);\n        if (axes.length === 0) {\n          axes = [...Array(inputs[0].dims.length).keys()];\n        }\n        return createAttributeWithCacheKey({starts, ends, axes});\n      } else {\n        return attributes;\n      }\n    };\n\nconst fixStartEndValues =\n    (value: number, index: number, inputShape: readonly number[], axes: readonly number[], steps: readonly number[]):\n        number => {\n          let newValue = value;\n          if (value < 0) {\n            newValue += inputShape[axes[index]];\n          }\n          if (steps[index] < 0) {\n            return Math.max(0, Math.min(newValue, inputShape[axes[index]] - 1));\n          } else {\n            return Math.max(0, Math.min(newValue, inputShape[axes[index]]));\n          }\n        };\n\nconst calculateInputIndicesImpl =\n    (input: IndicesHelper, output: IndicesHelper, inputShape: readonly number[], outputShape: readonly number[]):\n        string => `fn calculateInputIndices(outputIndices: ${output.type.indices}) -> ${input.type.indices} {\n          var inputIndices: ${input.type.indices};\n          var carry = 0u;\n          for (var i = ${inputShape.length}; i >= 0; i--) {\n            var outputIndex = ${outputShape.length === 1 ? 'outputIndices' : 'outputIndices[i]'};\n            var inputIndex = outputIndex * steps[i] + starts[i] + carry;\n            carry = inputIndex / inputShape[i];\n            inputIndex = inputIndex % inputShape[i];\n            if (signs[i] < 0) {\n              inputIndex = inputShape[i] - inputIndex - 1u + starts[i];\n            }\n            ${inputShape.length === 1 ? 'inputIndices' : 'inputIndices[i]'} = inputIndex;\n          }\n          return inputIndices;\n      }`;\n\nconst createSliceProgramInfo =\n    (metadata: ProgramMetadata, inputs: readonly TensorView[], attributes: SliceAttributes): ProgramInfo => {\n      const inputShape = inputs[0].dims;\n      const inputSize = ShapeUtil.size(inputShape);\n      const axes = (attributes.axes.length > 0) ? ShapeUtil.normalizeAxes(attributes.axes, inputShape.length) :\n                                                  [...Array(inputShape.length).keys()];\n      let steps = readInput(inputs, 4);\n      steps.forEach((step) => step !== 0 || (() => {\n                                throw new Error('step cannot be 0');\n                              }));\n      if (steps.length === 0) {\n        steps = Array(axes.length).fill(1);\n      }\n      const starts = attributes.starts.map((start, i) => fixStartEndValues(start, i, inputShape, axes, steps));\n\n      const ends = attributes.ends.map((end, i) => fixStartEndValues(end, i, inputShape, axes, steps));\n\n      if (axes.length !== inputShape.length) {\n        for (let i = 0; i < inputShape.length; ++i) {\n          if (!axes.includes(i)) {\n            starts.splice(i, 0, 0);\n            ends.splice(i, 0, inputShape[i]);\n            steps.splice(i, 0, 1);\n          }\n        }\n      }\n      const signs = steps.map(step => Math.sign(step));\n      // Convert negative steps to positive steps and reverse starts and ends\n      steps.forEach((step, i, array) => {\n        if (step < 0) {\n          const numSteps = (ends[i] - starts[i]) / step;\n          const newEnd = starts[i];\n          const newStart = newEnd + numSteps * steps[i];\n          starts[i] = newStart;\n          ends[i] = newEnd;\n          array[i] = -step;\n        }\n      });\n\n      const outputShape = inputShape.slice(0);\n      axes.forEach((axis, _) => {\n        outputShape[axis] = Math.ceil((ends[axis] - starts[axis]) / steps[axis]);\n      });\n\n      const outputTensorInfo:\n          TensorInfo = {dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default};\n\n      const output = outputVariable('output', inputs[0].dataType, outputShape);\n      const input = inputVariable('input', inputs[0].dataType, inputShape);\n      const outputSize = ShapeUtil.size(outputShape);\n\n      const getShaderSource = (shaderHelper: ShaderHelper) => `\n      ${shaderHelper.declareVariables(input, output)}\n        const signs = array<i32, ${signs.length}>(${signs.map(i => `${i}i`).join(',')});\n        const starts = array<u32, ${starts.length}>(${starts.map(i => `${i}u`).join(',')});\n        const ends = array<u32, ${ends.length}>(${ends.map(i => `${i}u`).join(',')});\n        const steps = array<u32, ${steps.length}>(${steps.map(i => `${i}u`).join(',')});\n        const inputShape = array<u32, ${inputShape.length}>(${inputShape.map(i => `${i}u`).join(',')});\n\n        ${calculateInputIndicesImpl(input, output, inputShape, outputShape)}\n        ${shaderHelper.mainStart()}\n          ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\n          let outputIndices = ${output.offsetToIndices('global_idx')};\n          let inputIndices = calculateInputIndices(outputIndices);\n          ${output.setByOffset('global_idx', input.getByIndices('inputIndices'))}\n      }`;\n      return {\n        ...metadata,\n        getShaderSource,\n        outputs: [outputTensorInfo],\n        dispatchGroup: () => ({x: Math.ceil(inputSize / 64 /* workgroup size */)})\n      };\n    };\n\nconst createSliceProgramInfoLoader =\n    (inputs: readonly TensorView[], attributes: SliceAttributes): ProgramInfoLoader => {\n      const updatedAttributes = createSliceAttributesFromInputs(inputs, attributes);\n      const metadata: ProgramMetadata = {\n        name: 'Slice',\n        inputTypes: [GpuDataType.default],\n        cacheHint: updatedAttributes.cacheKey + (inputs.length > 4 ? 'steps_' + inputs[4].dims.toString() : '')\n      };\n      return {...metadata, get: () => createSliceProgramInfo(metadata, inputs, updatedAttributes)};\n    };\n\nexport const slice = (context: ComputeContext, attributes: SliceAttributes): void => {\n  validateInputs(context.inputs, attributes);\n  const programInfoLoader = createSliceProgramInfoLoader(context.inputs, attributes);\n  const program = programInfoLoader.get();\n  if (ShapeUtil.size(program.outputs[0].dims) > 0) {\n    context.compute(programInfoLoader, {inputs: [0]});\n  } else {\n    // TODO: support empty output\n    throw new Error('slice: output size is 0');\n  }\n};\n\nexport const parseSliceAttributes = (attributes: Record<string, unknown>): SliceAttributes => {\n  const starts = attributes.starts as number[];\n  const ends = attributes.ends as number[];\n  const axes = attributes.axes as number[];\n  return createAttributeWithCacheKey({starts, ends, axes});\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n// TODO: this is the same naive implementation we use for reduce that has\n// performance limitations when the reduced axis is long. Need to add\n// a optimized codepath for this.\n\nimport {TensorView} from '../../tensor-view';\nimport {ShapeUtil} from '../../util';\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\nimport {ComputeContext, GpuDataType, ProgramInfo} from '../types';\n\nimport {ShaderHelper, tensorTypeToWsglStorageType} from './common';\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Softmax op requires 1 input.');\n  }\n};\n\nexport interface SoftmaxAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n}\n\nexport const softmaxProgramMetadata = {\n  name: 'Softmax',\n  inputTypes: [GpuDataType.default]\n};\n\n\nconst createSoftmaxProgramInfo = (input: TensorView, attributes: SoftmaxAttributes): ProgramInfo => {\n  const dataType = tensorTypeToWsglStorageType(input.dataType);\n  const shape = input.dims;\n  const outputSize = ShapeUtil.size(shape);\n  const WG = 64;\n  let axis = attributes.axis;\n  if (axis < 0) {\n    axis = shape.length + axis;\n  }\n  if (axis < shape.length - 1) {\n    throw new Error('softmax only supports last axis for now.');\n  }\n\n  const cols = shape[axis];\n  const rows = outputSize / cols;\n\n  // 6.2.4 in wgsl spec\n  const threadMaxDecl = dataType === 'f32' ? 'var threadMax: f32 = -3.402823e+38f;' : 'var threadMax: f16 = -65504.0h;';\n  const getShaderSource = (_shaderHelper: ShaderHelper) => `\n      var<workgroup> rowMaxShared : ${dataType};\n      var<workgroup> rowSumShared : ${dataType};\n      var<workgroup> threadShared : array<${dataType}, ${WG}>;\n\n      @group(0) @binding(0) var<storage, read> x : array<${dataType}>;\n      @group(0) @binding(1) var<storage, read_write> result : array<${dataType}>;\n\n      fn getValue(row: i32, col: i32, row_stride: i32) -> ${dataType} {\n        let index = row * row_stride + col;\n        return x[index];\n      }\n\n      fn setValue(row: i32, col: i32, row_stride: i32, value: ${dataType}) {\n        let index = row * row_stride + col;\n        result[index] = value;\n      }\n\n      @compute @workgroup_size(${WG}, 1, 1)\n      fn main(@builtin(local_invocation_id) local_id : vec3<u32>, @builtin(global_invocation_id) global_id : vec3u) {\n        let gindex = i32(global_id.x);\n        let lindex = i32(local_id.x);\n        const wg = ${WG};\n        let row = gindex / wg;\n        let cols = ${cols};\n        let row_stride : i32 = ${cols};\n\n        // find the rows max\n        ${threadMaxDecl}\n        for (var col = lindex; col < cols; col += wg) {\n          let value = getValue(row, col, row_stride);\n          threadMax = max(threadMax, value);\n        }\n        if (lindex < cols) {\n          threadShared[lindex] = threadMax;\n        }\n        workgroupBarrier();\n\n        var reduceSize = min(cols, wg);\n        for (var currSize = reduceSize >> 1;  currSize > 0; currSize = reduceSize >> 1) {\n          reduceSize = currSize + (reduceSize & 1);\n          if (lindex < currSize) {\n            threadShared[lindex] = max(threadShared[lindex], threadShared[lindex + reduceSize]);\n          }\n          workgroupBarrier();\n        }\n        if (lindex == 0) {\n          rowMaxShared = threadShared[0];\n        }\n        workgroupBarrier();\n\n        // find the rows sum\n        var threadSum: ${dataType} = 0.0;\n        for (var col = lindex; col < cols; col += wg) {\n          let subExp = exp(getValue(row, col, row_stride) - rowMaxShared);\n          threadSum += subExp;\n        }\n        threadShared[lindex] = threadSum;\n        workgroupBarrier();\n\n        for (var currSize = wg >> 1;  currSize > 0; currSize = currSize >> 1) {\n          if (lindex < currSize) {\n            threadShared[lindex] = threadShared[lindex] + threadShared[lindex + currSize];\n          }\n          workgroupBarrier();\n        }\n        if (lindex == 0) {\n          rowSumShared = threadShared[0];\n        }\n        workgroupBarrier();\n\n        // calculate final value for each element in the row\n        for (var col = lindex; col < cols; col += wg) {\n          let value = exp(getValue(row, col, row_stride) - rowMaxShared) / rowSumShared;\n          setValue(row, col, row_stride, value);\n        }\n      }`;\n  return {\n    ...softmaxProgramMetadata,\n    outputs: [{dims: shape, dataType: input.dataType, gpuDataType: GpuDataType.default}],\n    getShaderSource,\n    dispatchGroup: () => ({x: rows})\n  };\n};\n\n\nexport const softmax = (context: ComputeContext, attributes: SoftmaxAttributes): void => {\n  validateInputs(context.inputs);\n  context.compute({\n    ...softmaxProgramMetadata,\n    cacheHint: attributes.cacheKey,\n    get: () => createSoftmaxProgramInfo(context.inputs[0], attributes)\n  });\n};\n\nexport const parseSoftmaxAttributes = (attributes: Record<string, unknown>): SoftmaxAttributes =>\n    createAttributeWithCacheKey({axis: attributes.axis as number});\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {TensorView} from '../../tensor-view';\nimport {ShapeUtil} from '../../util';\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramInfoLoader, ProgramMetadata, TensorInfo} from '../types';\n\nimport {IndicesHelper, inputVariable, outputVariable, ShaderHelper} from './common';\n\nexport interface SplitAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n  readonly numOutputs: number;\n  readonly splitSizes: number[];\n}\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (!inputs || inputs.length < 1) {\n    throw new Error('too few inputs');\n  }\n};\n\nconst createSplitAttributesFromInputs =\n    (inputs: readonly TensorView[], attributes: SplitAttributes): SplitAttributes => {\n      const splitSizes: number[] = [];\n      let numOutputs: number = attributes.numOutputs;\n      if (inputs[1].dims[0] > 0) {\n        inputs[1].getBigInt64Array().forEach(v => splitSizes.push(Number(v)));\n        numOutputs = splitSizes.length;\n      }\n      return createAttributeWithCacheKey({numOutputs, axis: attributes.axis, splitSizes});\n    };\n\nconst calculateOutputIndexImpl = (numberOfTensors: number): string => `\nfn calculateOutputIndex(index: u32) -> u32 {\n    for (var i: u32 = 0u; i < ${numberOfTensors}u; i += 1u ) {\n    if (index < sizeInConcatAxis[i]) {\n        return i;\n    }\n    }\n    return ${numberOfTensors}u;\n}`;\nconst writeBufferDataImpl = (outputs: readonly IndicesHelper[]) => {\n  const numberOfTensors = outputs.length;\n  const codeLines: string[] = [];\n  for (let i = 0; i < numberOfTensors; ++i) {\n    const returnSnippet = outputs[i].setByIndices('indices', 'input[global_idx]');\n    if (numberOfTensors === 1) {\n      codeLines.push(returnSnippet);\n    } else if (i === 0) {\n      codeLines.push(`if (outputNumber == ${i}u) { ${returnSnippet} }`);\n    } else if (i === numberOfTensors - 1) {\n      codeLines.push(`else { ${returnSnippet} }`);\n    } else {\n      codeLines.push(`else if (outputNumber == ${i}) { ${returnSnippet} }`);\n    }\n  }\n  return `\n      fn writeBufferData(outputNumber: u32, indices: ${outputs[0].type.indices}, global_idx: u32) {\n        ${codeLines.join('\\n')}\n      }`;\n};\n\nconst createSplitProgramInfo =\n    (metadata: ProgramMetadata, inputs: readonly TensorView[], attributes: SplitAttributes): ProgramInfo => {\n      const inputShape = inputs[0].dims;\n      const inputSize = ShapeUtil.size(inputShape);\n      const dataType = inputs[0].dataType;\n      const rank = inputShape.length;\n      const axis = attributes.axis;\n      const adjustedAxis = (axis < 0) ? inputShape.length + axis : axis;\n      const outputs = new Array<IndicesHelper>(attributes.numOutputs);\n      const input = inputVariable('input', dataType, inputShape);\n      const sizeInConcatAxis = new Array<number>(attributes.numOutputs);\n      const outputsTensorInfo: TensorInfo[] = [];\n      const outputShapes: number[][] = [];\n      let previousSum = 0;\n      for (let i = 0; i < attributes.numOutputs; i++) {\n        previousSum += attributes.splitSizes[i];\n        sizeInConcatAxis[i] = previousSum;\n        const outputShape = inputShape.slice();\n        outputShape[attributes.axis] = attributes.splitSizes[i];\n        outputShapes.push(outputShape);\n        outputs[i] = outputVariable(`output${i}`, dataType, outputShapes[i]);\n        outputsTensorInfo.push({dims: outputShapes[i], dataType: inputs[0].dataType, gpuDataType: GpuDataType.default});\n      }\n      const indicesAxis = rank < 2 ? 'indices' : `indices[${adjustedAxis}]`;\n      const getShaderSource = (shaderHelper: ShaderHelper) => `\n  ${shaderHelper.declareVariables(input, ...outputs)}\n  const sizeInConcatAxis = array<u32, ${sizeInConcatAxis.length}>(${sizeInConcatAxis.map(i => `${i}u`).join(',')});\n  ${calculateOutputIndexImpl(sizeInConcatAxis.length)}\n  ${writeBufferDataImpl(outputs)}\n\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(inputSize)}\n\n    var indices = ${input.offsetToIndices('global_idx')};\n    let outputNumber = calculateOutputIndex(${indicesAxis});\n    if (outputNumber != 0) {\n        ${indicesAxis} -= sizeInConcatAxis[outputNumber - 1u];\n    }\n    writeBufferData(outputNumber, indices, global_idx);\n  }`;\n      return {\n        ...metadata,\n        getShaderSource,\n        outputs: outputsTensorInfo,\n        dispatchGroup: () => ({x: Math.ceil(inputSize / 64 /* workgroup size */)})\n      };\n    };\n\nconst createSplitProgramInfoLoader =\n    (inputs: readonly TensorView[], attributes: SplitAttributes): ProgramInfoLoader => {\n      const updatedAttributes = inputs.length === 1 ? attributes : createSplitAttributesFromInputs(inputs, attributes);\n      const metadata:\n          ProgramMetadata = {name: 'Split', inputTypes: [GpuDataType.default], cacheHint: updatedAttributes.cacheKey};\n      return {...metadata, get: () => createSplitProgramInfo(metadata, [inputs[0]], updatedAttributes)};\n    };\n\nexport const split = (context: ComputeContext, attributes: SplitAttributes): void => {\n  validateInputs(context.inputs);\n  context.compute(createSplitProgramInfoLoader(context.inputs, attributes), {inputs: [0]});\n};\n\nexport const parseSplitAttributes = (attributes: Record<string, unknown>): SplitAttributes => {\n  const axis = attributes.axis as number;\n  const splitSizes: number[] = attributes.splitSizes as number[];\n  const numOutputs = attributes.numOutputs as number < 0 ? splitSizes.length : attributes.numOutputs as number;\n  if (numOutputs !== splitSizes.length) {\n    throw new Error('numOutputs and splitSizes lengh must be equal');\n  }\n  return createAttributeWithCacheKey({axis, numOutputs, splitSizes});\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {DataType} from '../../../wasm-common';\nimport {TensorView} from '../../tensor-view';\nimport {ShapeUtil} from '../../util';\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramMetadata} from '../types';\n\nimport {inputVariable, outputVariable, ShaderHelper} from './common';\n\nexport const tileProgramMetadata = {\n  name: 'Tile',\n  inputTypes: [GpuDataType.default]\n};\n\nconst getRepeats = (repeatsTensorView: TensorView): readonly number[] =>\n    Array.from(repeatsTensorView.getBigInt64Array(), Number);\n\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Tile requires 2 inputs.');\n  }\n\n  if (inputs[0].dataType !== DataType.float && inputs[0].dataType !== DataType.int32 &&\n      inputs[0].dataType !== DataType.uint32) {\n    throw new Error('Tile only support float, int32, and uint32 data types');\n  }\n\n  if (inputs[1].dataType !== DataType.int64) {\n    throw new Error('Tile `repeats` input should be of int64 data type');\n  }\n\n  if (inputs[1].dims.length !== 1) {\n    throw new Error('Tile `repeats` input should be 1-D');\n  }\n\n  const repeats: readonly number[] = getRepeats(inputs[1]);\n\n  if (repeats.length !== inputs[0].dims.length) {\n    throw new Error('Tile `repeats` input should have same number of elements as rank of input data tensor');\n  }\n};\n\nconst getOutputShape = (inputShape: readonly number[], repeats: readonly number[]): readonly number[] => {\n  const outputShape: number[] = [];\n\n  for (let i = 0; i < inputShape.length; ++i) {\n    outputShape.push(inputShape[i] * repeats[i]);\n  }\n\n  return outputShape;\n};\n\nexport const createTileProgramInfo =\n    (tileProgramMetadata: ProgramMetadata, inputs: readonly TensorView[]): ProgramInfo => {\n      const inputShape = inputs[0].dims;\n      const repeats: readonly number[] = getRepeats(inputs[1]);\n      const outputShape = getOutputShape(inputShape, repeats);\n      const outputSize = ShapeUtil.size(outputShape);\n\n      const dataType = inputs[0].dataType;\n      const input = inputVariable('input', dataType, inputShape);\n      const output = outputVariable('output', dataType, outputShape);\n\n      const getShaderSource = (shaderHelper: ShaderHelper) => `\n      const inputShape = ${input.indices(...inputShape)};\n      ${shaderHelper.declareVariables(input, output)}\n      ${shaderHelper.mainStart()}\n      ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\n      let outputIndices = ${output.offsetToIndices('global_idx')};\n      var inputIndices: ${input.type.indices};\n      for (var i = 0; i < ${inputShape.length}; i++) {\n        let inputDimValue = ${output.indicesGet('outputIndices', 'i')}  % ${input.indicesGet('inputShape', 'i')};\n\n        ${input.indicesSet('inputIndices', 'i', 'inputDimValue')}\n      }\n      ${output.setByOffset('global_idx', input.getByIndices('inputIndices'))}\n    }`;\n\n      return {\n        ...tileProgramMetadata,\n        outputs: [{dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default}],\n        getShaderSource,\n        dispatchGroup: () => ({x: Math.ceil(outputSize / 64 /* workgroup size */)})\n      };\n    };\n\nexport const tile = (context: ComputeContext): void => {\n  validateInputs(context.inputs);\n  const repeats: readonly number[] = getRepeats(context.inputs[1]);\n  const cacheHint = repeats.toString();\n  context.compute(\n      {...tileProgramMetadata, cacheHint, get: () => createTileProgramInfo(tileProgramMetadata, context.inputs)},\n      {inputs: [0]});\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {TensorView} from '../../tensor-view';\nimport {ShapeUtil} from '../../util';\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\nimport {ComputeContext, GpuDataType, ProgramInfo} from '../types';\n\nimport {IndicesHelper, inputVariable, outputVariable, ShaderHelper} from './common';\n\nexport interface TransposeAttributes extends AttributeWithCacheKey {\n  readonly perm: number[];\n}\n\nexport const transposeProgramMetadata = {\n  name: 'Transpose',\n  inputTypes: [GpuDataType.default]\n};\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Transpose requires 1 input.');\n  }\n};\n\nconst getAdjustedPerm = (inputShape: readonly number[], perm: number[]): number[] =>\n    (perm && perm.length !== inputShape.length) ? [...(inputShape.keys())].reverse() : perm;\n\nconst getOutputShape = (inputShape: readonly number[], perm: number[]): readonly number[] =>\n    ShapeUtil.sortBasedOnPerm(inputShape, getAdjustedPerm(inputShape, perm));\n\nconst permFunctionBody = (perm: number[], rank: number, input: IndicesHelper, output: IndicesHelper): string => {\n  const reverseFunc = [];\n  reverseFunc.push(`fn perm(i: ${output.type.indices}) -> ${input.type.indices} {\n    var a: ${input.type.indices};`);\n  for (let i = 0; i < rank; ++i) {\n    reverseFunc.push(input.indicesSet('a', perm[i], `i[${i}]`));\n  }\n  reverseFunc.push('return a;}');\n  return reverseFunc.join('\\n');\n};\n\nexport const createTransposeProgramInfo = (inputTensor: TensorView, permAttr: number[]): ProgramInfo => {\n  const dataType = inputTensor.dataType;\n  const inputShape = inputTensor.dims;\n  const perm = getAdjustedPerm(inputShape, permAttr);\n  const outputShape = getOutputShape(inputShape, perm);\n  const rank = inputShape.length;\n  const outputSize = ShapeUtil.size(outputShape);\n  // A dims=[${inputs[0].dims.toString()}]\n  // out Dims=[${unpackedOutputShape.toString()}]\n  // based on perm=[${perm.toString()}]\n\n  const output = outputVariable('output', dataType, outputShape);\n  const input = inputVariable('a', dataType, inputShape);\n\n  const getShaderSource = (shaderHelper: ShaderHelper) => `\n  ${shaderHelper.declareVariables(input, output)}\n\n  ${permFunctionBody(perm, rank, input, output)}\n\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\n\n    let indices = ${output.offsetToIndices('global_idx')};\n    let aIndices = perm(indices);\n\n    ${output.setByOffset('global_idx', input.getByIndices('aIndices'))}\n  }`;\n  return {\n    ...transposeProgramMetadata,\n    outputs: [{dims: outputShape, dataType: inputTensor.dataType, gpuDataType: GpuDataType.default}],\n    getShaderSource,\n    dispatchGroup: () => ({x: Math.ceil(outputSize / 64 /* workgroup size */)})\n  };\n};\n\nexport const transpose = (context: ComputeContext, attributes: TransposeAttributes): void => {\n  validateInputs(context.inputs);\n  context.compute({\n    ...transposeProgramMetadata,\n    cacheHint: attributes.cacheKey,\n    get: () => createTransposeProgramInfo(context.inputs[0], attributes.perm)\n  });\n};\n\nexport const parseTransposeAttributes = (attributes: Record<string, unknown>): TransposeAttributes =>\n    createAttributeWithCacheKey({perm: attributes.perm as number[]});\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {DataType} from '../../../wasm-common';\nimport {TensorView} from '../../tensor-view';\nimport {MAX_CLIP, MIN_CLIP, ShapeUtil} from '../../util';\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramInfoLoader, ProgramMetadata} from '../types';\n\nimport {inputVariable, outputVariable, ShaderHelper, tensorTypeToWsglStorageType} from './common';\n\ntype BuiltinFunctionName = string;\ntype ElementwiseCustomExpression = (expression: string) => string;\ntype ElementwiseFunctionCall = BuiltinFunctionName|ElementwiseCustomExpression;\n\nconst createElementwiseProgramShader =\n    (shaderHelper: ShaderHelper, datasize: number, inputDataType: number, outputDataType: number,\n     funcCall: ElementwiseFunctionCall, additionalImplementation?: string): string => {\n      const vecSize = Math.ceil(datasize / 4);\n\n      let expression = '';\n      if (typeof funcCall === 'string') {\n        expression = `${funcCall}(a)`;\n      } else {\n        expression = funcCall('a');\n      }\n\n      const input = inputVariable('inputData', inputDataType, [vecSize], 4);\n      const output = outputVariable('outputData', outputDataType, [vecSize], 4);\n\n      return `\n  ${shaderHelper.declareVariables(input, output)}\n\n  ${additionalImplementation ?? ''}\n\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(vecSize)}\n\n    let a = ${input.getByOffset('global_idx')};\n    ${output.setByOffset('global_idx', expression)}\n  }`;\n    };\n\nconst createElementwiseProgramInfo =\n    (metadata: ProgramMetadata, input: TensorView, outputDataType: number, funcCall: ElementwiseFunctionCall,\n     additionalImplementation?: string): ProgramInfo => ({\n      ...metadata,\n      getShaderSource: shaderHelper => createElementwiseProgramShader(\n          shaderHelper, ShapeUtil.size(input.dims), input.dataType, outputDataType, funcCall, additionalImplementation),\n      outputs: [{dims: input.dims, dataType: outputDataType, gpuDataType: GpuDataType.default}],\n      dispatchGroup: (inputTensors) =>\n          ({x: Math.ceil(ShapeUtil.size(inputTensors[0].dims) / 64 /* workgroup size */ / 4 /* vec size */)})\n    });\n\nconst createElementwiseProgramInfoLoader =\n    (input: TensorView, name: string, funcCall: ElementwiseFunctionCall, additionalImplementation?: string,\n     cacheKey?: string, outputDataType: number = input.dataType): ProgramInfoLoader => {\n      const metadata: ProgramMetadata = {name, inputTypes: [GpuDataType.default], cacheHint: cacheKey};\n      return {\n        ...metadata,\n        get: () => createElementwiseProgramInfo(metadata, input, outputDataType, funcCall, additionalImplementation)\n      };\n    };\n\nexport const abs = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Abs', 'abs'));\n};\n\nexport const acos = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Acos', 'acos'));\n};\n\nexport const acosh = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Acosh', 'acosh'));\n};\n\nexport const asin = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Asin', 'asin'));\n};\n\nexport const asinh = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Asinh', 'asinh'));\n};\n\nexport const atan = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Atan', 'atan'));\n};\nexport const atanh = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Atanh', 'atanh'));\n};\n\nexport interface CastAttributes extends AttributeWithCacheKey {\n  readonly to: number;\n  readonly saturate?: boolean;\n}\n\nexport const parseCastAttributes = (attributes: Record<string, unknown>): CastAttributes =>\n    createAttributeWithCacheKey(attributes as {to: number});\n\n\nexport const cast = (context: ComputeContext, attributes: CastAttributes): void => {\n  let func: ElementwiseFunctionCall;\n  switch (attributes.to) {\n    case DataType.float16:\n      func = 'vec4<f16>';\n      break;\n    case DataType.float:\n      func = 'vec4<f32>';\n      break;\n    case DataType.uint32:\n      func = 'vec4<u32>';\n      break;\n    case DataType.int32:\n      func = 'vec4<i32>';\n      break;\n    case DataType.bool:\n      func = 'vec4<bool>';\n      break;\n    default:\n      throw new RangeError(`not supported type (specified in attribute 'to' from 'Cast' operator): ${attributes.to}`);\n  }\n  context.compute(createElementwiseProgramInfoLoader(\n      context.inputs[0], 'Cast', func, undefined, attributes.cacheKey, attributes.to));\n};\n\nexport interface ClipAttributes extends AttributeWithCacheKey {\n  readonly min: number;\n  readonly max: number;\n}\n\nexport const clipV10 = (context: ComputeContext, attributes: ClipAttributes): void => {\n  const dataType = tensorTypeToWsglStorageType(context.inputs[0].dataType);\n  context.compute(\n      createElementwiseProgramInfoLoader(\n          context.inputs[0], 'Clip', a => `clamp(${a}, clip_min_, clip_max_)`, `\n    const clip_min_: vec4<${dataType}> = vec4(${dataType}(${attributes.min}));\n    const clip_max_: vec4<${dataType}> = vec4(${dataType}(${attributes.max}));\n`,\n          attributes.cacheKey),\n      {inputs: [0]});\n};\nconst generateClipAttributesFromInputs = (inputs: readonly TensorView[]): ClipAttributes => {\n  const min = (inputs.length >= 2) ? inputs[1].getFloat32Array()[0] : MIN_CLIP;\n  const max = (inputs.length >= 3) ? inputs[2].getFloat32Array()[0] : MAX_CLIP;\n  return createAttributeWithCacheKey({min, max});\n};\n\nexport const clip = (context: ComputeContext): void => {\n  const attributes = generateClipAttributesFromInputs(context.inputs);\n  clipV10(context, attributes);\n};\n\nexport const ceil = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Ceil', 'ceil'));\n};\n\nexport const cos = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Cos', 'cos'));\n};\n\nexport const cosh = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Cosh', 'cosh'));\n};\n\nexport interface AlphaAttributes extends AttributeWithCacheKey {\n  readonly alpha: number;\n}\n\nexport const parseAlphaAttributes = (attributes: Record<string, unknown>): AlphaAttributes =>\n    createAttributeWithCacheKey(attributes as {alpha: number});\n\nexport const elu = (context: ComputeContext, attributes: AlphaAttributes): void => {\n  context.compute(createElementwiseProgramInfoLoader(\n      context.inputs[0], 'Elu', a => `elu_vf32(${a})`, `\n  const elu_alpha_: f32 = f32(${attributes.alpha});\n\n  fn elu_f32(a: f32) -> f32 {\n  return select((exp(a) - 1.0) * elu_alpha_, a, a >= 0.0);\n  }\n\n  fn elu_vf32(v: vec4<f32>) -> vec4<f32> {\n  return vec4(elu_f32(v.x), elu_f32(v.y), elu_f32(v.z), elu_f32(v.w));\n  }`,\n      attributes.cacheKey));\n};\n\nexport const erfImpl = (dataType: string, varType = 'f32') => `\nconst r0: ${varType} = 0.3275911;\nconst r1: ${varType} = 0.254829592;\nconst r2: ${varType} = -0.284496736;\nconst r3: ${varType} = 1.421413741;\nconst r4: ${varType} = -1.453152027;\nconst r5: ${varType} = 1.061405429;\n\nfn erf_vf32(v: ${dataType}) -> ${dataType} {\n  let absv = abs(v);\n  let x = 1.0 / (1.0 + r0 * absv);\n  return sign(v) * (1.0 - ((((r5 * x + r4) * x + r3) * x + r2) * x + r1) * x * exp(-absv * absv));\n}`;\n\nexport const erf = (context: ComputeContext): void => {\n  const dataType = tensorTypeToWsglStorageType(context.inputs[0].dataType);\n  context.compute(createElementwiseProgramInfoLoader(\n      context.inputs[0], 'Erf', a => `erf_vf32(${a})`, erfImpl(`vec4<${dataType}>`, dataType)));\n};\n\nexport const exp = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Exp', 'exp'));\n};\n\nexport const floor = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Floor', 'floor'));\n};\n\nexport const gelu = (context: ComputeContext): void => {\n  const dataType = tensorTypeToWsglStorageType(context.inputs[0].dataType);\n  context.compute(createElementwiseProgramInfoLoader(\n      context.inputs[0], 'Gelu', a => `0.5 * ${a} * (1.0 + erf_vf32(${a} * 0.7071067811865475))`,\n      erfImpl(`vec4<${dataType}>`, dataType)));\n};\n\nexport const leakyRelu = (context: ComputeContext, attributes: AlphaAttributes): void => {\n  context.compute(createElementwiseProgramInfoLoader(\n      context.inputs[0], 'LeakyRelu', a => `select(leaky_relu_alpha_ * ${a}, ${a}, ${a} >= vec4<f32>(0.0))`,\n      `const leaky_relu_alpha_: f32 = f32(${attributes.alpha});`, attributes.cacheKey));\n};\n\nexport const not = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Not', a => `!${a}`));\n};\n\nexport const neg = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Neg', a => `-${a}`));\n};\n\nexport const reciprocal = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Reciprocal', a => `1.0/${a}`));\n};\n\nexport const relu = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(\n      context.inputs[0], 'Relu', a => `select(vec4<f32>(0.0), ${a}, ${a} > vec4<f32>(0.0))`));\n};\n\nexport const sigmoid = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Sigmoid', a => `(1.0 / (1.0 + exp(-${a})))`));\n};\n\nexport const sin = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Sin', 'sin'));\n};\n\nexport const sinh = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Sinh', 'sinh'));\n};\n\nexport const sqrt = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Sqrt', 'sqrt'));\n};\n\nexport const tan = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Tan', 'tan'));\n};\n\nexport const tanh = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Tanh', 'tanh'));\n};\n\nexport const thresholdedRelu = (context: ComputeContext, attributes: AlphaAttributes): number => {\n  context.compute(createElementwiseProgramInfoLoader(\n      context.inputs[0], 'ThresholdedRelu', a => `select(vec4<f32>(0.0), ${a}, ${a} > thresholded_relu_alpha_)`,\n      `const thresholded_relu_alpha_: vec4<f32> = vec4<f32>(${attributes.alpha});`, attributes.cacheKey));\n  return 0;\n};\n\nexport const log = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Log', 'log'));\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {DataType} from '../../../wasm-common';\nimport {TensorView} from '../../tensor-view';\nimport {BroadcastUtil, ShapeUtil} from '../../util';\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramInfoLoader, ProgramMetadata} from '../types';\n\nimport {inputVariable, outputVariable, ShaderHelper} from './common';\n\nconst createWhereOpProgramShader =\n    (shaderHelper: ShaderHelper, inputs: readonly TensorView[], dimsOutput: readonly number[], isBroadcast: boolean,\n     typeOutput: number) => {\n      const outputSize = ShapeUtil.size(dimsOutput);\n      const vecSize = Math.ceil(outputSize / 4);\n\n      const output = outputVariable('outputData', typeOutput, dimsOutput, 4);\n      const a = inputVariable('aData', inputs[1].dataType, inputs[1].dims, 4);\n      const b = inputVariable('bData', inputs[2].dataType, inputs[2].dims, 4);\n      const c = inputVariable('cData', inputs[0].dataType, inputs[0].dims, 4);\n\n      let assignment: string;\n      const expression = (a: string, b: string, c: string) => `select(${b}, ${a}, ${c})`;\n      if (!isBroadcast) {\n        assignment = output.setByOffset(\n            'global_idx',\n            expression(a.getByOffset('global_idx'), b.getByOffset('global_idx'), c.getByOffset('global_idx')));\n      } else {\n        const singleAssignment = (resStr: string, x: number, typeCast = '') => {\n          const expressionA = `aData[indexA${x}][componentA${x}]`;\n          const expressionB = `bData[indexB${x}][componentB${x}]`;\n          // eslint-disable-next-line no-bitwise\n          const expressionC = `bool(cData[indexC${x}] & ${0xff000000 >>> ((3 - x) * 8)}u)`;\n          return `\n            let outputIndices${x} = ${output.offsetToIndices(`global_idx * 4u + ${x}u`)};\n            let offsetA${x} = ${a.broadcastedIndicesToOffset(`outputIndices${x}`, output)};\n            let offsetB${x} = ${b.broadcastedIndicesToOffset(`outputIndices${x}`, output)};\n            let offsetC${x} = ${c.broadcastedIndicesToOffset(`outputIndices${x}`, output)};\n            let indexA${x} = offsetA${x} / 4u;\n            let indexB${x} = offsetB${x} / 4u;\n            let indexC${x} = offsetC${x} / 4u;\n            let componentA${x} = offsetA${x} % 4u;\n            let componentB${x} = offsetB${x} % 4u;\n            ${resStr}[${x}] = ${typeCast}(${expression(expressionA, expressionB, expressionC)});\n          `;\n        };\n        if (typeOutput === DataType.bool) {\n          assignment = `\n            var data = vec4<u32>(0);\n            ${singleAssignment('data', 0, 'u32')}\n            ${singleAssignment('data', 1, 'u32')}\n            ${singleAssignment('data', 2, 'u32')}\n            ${singleAssignment('data', 3, 'u32')}\n            outputData[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));`;\n        } else {\n          assignment = `\n            ${singleAssignment('outputData[global_idx]', 0)}\n            ${singleAssignment('outputData[global_idx]', 1)}\n            ${singleAssignment('outputData[global_idx]', 2)}\n            ${singleAssignment('outputData[global_idx]', 3)}\n          `;\n        }\n      }\n\n      return `\n        ${shaderHelper.declareVariables(c, a, b, output)}\n        ${shaderHelper.mainStart()}\n        ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(vecSize)}\n        ${assignment}\n      }`;\n    };\n\nconst createWhereOpProgramInfo = (metadata: ProgramMetadata, inputs: readonly TensorView[]): ProgramInfo => {\n  const dimsA = inputs[1].dims;\n  const dimsB = inputs[2].dims;\n  const dimsC = inputs[0].dims;\n  const outputDataType = inputs[1].dataType;\n\n  const isBroadcast = !(ShapeUtil.areEqual(dimsA, dimsB) && ShapeUtil.areEqual(dimsB, dimsC));\n  let outputShape = dimsA;\n  let outputSize = ShapeUtil.size(dimsA);\n  // TODO: deal with zero-sized tensors (eg. dims=[1,0])\n\n  if (isBroadcast) {\n    const calculatedShape = BroadcastUtil.calcShape(BroadcastUtil.calcShape(dimsA, dimsB, false)!, dimsC, false);\n    if (!calculatedShape) {\n      throw new Error('Can\\'t perform where op on the given tensors');\n    }\n    outputShape = calculatedShape;\n    outputSize = ShapeUtil.size(outputShape);\n  }\n\n  return {\n    ...metadata,\n    getShaderSource: (shaderHelper) =>\n        createWhereOpProgramShader(shaderHelper, inputs, outputShape, isBroadcast, outputDataType),\n    outputs: [{dims: outputShape, dataType: outputDataType, gpuDataType: GpuDataType.default}],\n    dispatchGroup: () => ({x: Math.ceil(outputSize / 64 /* workgroup size */ / 4 /* vec size */)})\n  };\n};\n\nconst createWhereOpProgramInfoLoader = (inputs: readonly TensorView[], name: string): ProgramInfoLoader => {\n  const inputTypes = [GpuDataType.default, GpuDataType.default, GpuDataType.default];\n  const metadata: ProgramMetadata = {name, inputTypes};\n  return {...metadata, get: () => createWhereOpProgramInfo(metadata, inputs)};\n};\n\nexport const where = (context: ComputeContext): void => {\n  context.compute(createWhereOpProgramInfoLoader(context.inputs, 'Where'));\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {tensorDataTypeEnumToString} from '../../wasm-common';\nimport {WebGpuBackend} from '../backend-webgpu';\nimport {LOG_DEBUG} from '../log';\nimport {TensorView} from '../tensor-view';\n\nimport {createShaderHelper} from './ops/common';\nimport {Artifact, GpuData, ProgramInfo} from './types';\n\n/**\n * ProgramManager is the main class behind running computations\n * It builds ProgramInfo's into Artifacts\n * It compiles given ProgramInfo's into WebGL Prorams (cached as Artifacts)\n * Uses the artifact to run the computation by calling Draw on\n * the WebGL drawing buffer\n * ProgramManager automatically maps (binds) input variables to their\n * corresponding Location's in the binary program\n */\nexport class ProgramManager {\n  repo: Map<unknown, Artifact>;  // this should be per-session object\n  attributesBound: boolean;\n\n  constructor(private backend: WebGpuBackend) {\n    this.repo = new Map();\n    this.attributesBound = false;\n  }\n  getArtifact(key: unknown): Artifact|undefined {\n    return this.repo.get(key);\n  }\n  setArtifact(key: unknown, artifact: Artifact): void {\n    this.repo.set(key, artifact);\n  }\n  run(buildArtifact: Artifact, inputsTensorView: readonly TensorView[], inputs: GpuData[], outputs: GpuData[],\n      dispatchGroup: [number, number, number]): void {\n    const device = this.backend.device;\n    const computePassEncoder = this.backend.getComputePassEncoder();\n    const profilingEnabled = this.backend.supportTimestampQuery && this.backend.env.webgpu.profilingMode === 'default';\n    if (profilingEnabled) {\n      // profiling write start timestamp\n\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (computePassEncoder as any).writeTimestamp(this.backend.profilingQuerySet, 0);\n    }\n\n    computePassEncoder.setPipeline(buildArtifact.computePipeline);\n    const entries = [];\n    for (const input of inputs) {\n      entries.push({binding: entries.length, resource: {buffer: input.buffer}});\n    }\n    for (const output of outputs) {\n      entries.push({binding: entries.length, resource: {buffer: output.buffer}});\n    }\n    const bindGroup = device.createBindGroup(\n        {layout: buildArtifact.computePipeline.getBindGroupLayout(0), entries, label: buildArtifact.programInfo.name});\n    computePassEncoder.setBindGroup(0, bindGroup);\n\n    computePassEncoder.dispatchWorkgroups(...dispatchGroup);\n\n    this.backend.pendingDispatchNumber++;\n\n    if (profilingEnabled) {\n      // profiling write end timestamp\n\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (computePassEncoder as any).writeTimestamp(this.backend.profilingQuerySet, 1);\n      if (this.backend.profilingQueryData == null) {\n        this.backend.profilingQueryData =\n            // eslint-disable-next-line no-bitwise\n            this.backend.gpuDataManager.create(16, GPUBufferUsage.COPY_SRC | GPUBufferUsage.QUERY_RESOLVE);\n      }\n      // eslint-disable-next-line no-bitwise\n      const syncData = this.backend.gpuDataManager.create(16, GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_DST);\n\n      this.backend.endComputePass();\n      this.backend.getCommandEncoder().resolveQuerySet(\n          this.backend.profilingQuerySet, 0, 2, this.backend.profilingQueryData.buffer, 0);\n      this.backend.getCommandEncoder().copyBufferToBuffer(\n          this.backend.profilingQueryData.buffer, 0, syncData.buffer, 0, 16);\n      this.backend.flush();\n\n      const kernelId = this.backend.currentKernelId!;\n      const kernelInfo = this.backend.kernels.get(kernelId)!;\n      const kernelName = `[${kernelInfo[0]}] ${kernelInfo[1]}`;\n\n      syncData.buffer.mapAsync(GPUMapMode.READ).then(() => {\n        const mappedData = new BigUint64Array(syncData.buffer.getMappedRange());\n        const startTimeU64 = mappedData[0];\n        const endTimeU64 = mappedData[1];\n\n        syncData.buffer.unmap();\n\n        if (typeof this.backend.profilingTimeBase === 'undefined') {\n          this.backend.profilingTimeBase = startTimeU64;\n        }\n\n        const startTime = Number(startTimeU64 - this.backend.profilingTimeBase);\n        const endTime = Number(endTimeU64 - this.backend.profilingTimeBase);\n\n        if (!Number.isSafeInteger(startTime) || !Number.isSafeInteger(endTime)) {\n          throw new RangeError('incorrect timestamp range');\n        }\n\n        this.backend.gpuDataManager.release(syncData.id);\n        let inputShapes = '';\n        inputsTensorView.forEach((value, i) => {\n          inputShapes += `input[${i}]: [${value.dims}] | ${tensorDataTypeEnumToString(value.dataType)}, `;\n        });\n        let outputShapes = '';\n        buildArtifact.programInfo.outputs.forEach((value, i) => {\n          outputShapes += `output[${i}]: [${value.dims}] | ${tensorDataTypeEnumToString(value.dataType)}, `;\n        });\n        // eslint-disable-next-line no-console\n        console.log(`[profiling] kernel \"${kernelId}|${kernelName}\" ${inputShapes}${outputShapes}execution time: ${\n            endTime - startTime} ns`);\n      });\n    }\n\n    if (this.backend.pendingDispatchNumber >= 16) {\n      this.backend.flush();\n    }\n  }\n  dispose(): void {\n    // this.repo.forEach(a => this.glContext.deleteProgram(a.program));\n  }\n  build(programInfo: ProgramInfo, normalizedDispatchGroupSize: [number, number, number]): Artifact {\n    const device = this.backend.device;\n    const extensions: string[] = [];\n    if (device.features.has('shader-f16')) {\n      extensions.push('enable f16;');\n    }\n    const shaderHelper = createShaderHelper(normalizedDispatchGroupSize);\n    const userCode = programInfo.getShaderSource(shaderHelper);\n    const code = `${extensions.join('\\n')}\\n${shaderHelper.additionalImplementations}\\n${userCode}`;\n    const shaderModule = device.createShaderModule({code, label: programInfo.name});\n    LOG_DEBUG('verbose', () => `[WebGPU] shader code: ${code}`);\n\n    const computePipeline = device.createComputePipeline(\n        {compute: {module: shaderModule, entryPoint: 'main'}, layout: 'auto', label: programInfo.name});\n\n    return {programInfo, computePipeline};\n  }\n\n  normalizeDispatchGroupSize(dispatchGroup: ReturnType<ProgramInfo['dispatchGroup']>): [number, number, number] {\n    const x = typeof dispatchGroup === 'number' ? dispatchGroup : dispatchGroup.x;\n    const y = typeof dispatchGroup === 'number' ? 1 : (dispatchGroup.y || 1);\n    const z = typeof dispatchGroup === 'number' ? 1 : (dispatchGroup.z || 1);\n    const limitPerDimension = this.backend.device.limits.maxComputeWorkgroupsPerDimension;\n    if (x <= limitPerDimension && y <= limitPerDimension && z <= limitPerDimension) {\n      return [x, y, z];\n    }\n    const size = x * y * z;\n    let dispatchAverage = Math.ceil(Math.sqrt(size));\n    if (dispatchAverage > limitPerDimension) {\n      dispatchAverage = Math.ceil(Math.cbrt(size));\n      if (dispatchAverage > limitPerDimension) {\n        throw new Error('Total dispatch size exceeds WebGPU maximum.');\n      }\n      return [dispatchAverage, dispatchAverage, dispatchAverage];\n    } else {\n      return [dispatchAverage, dispatchAverage, 1];\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {TensorView} from '../tensor-view';\n\nimport {ShaderHelper} from './ops/common';\n\nexport enum GpuDataType {\n  default = 0,\n  upload = 1,\n  profile = 2\n}\nexport type GpuDataId = number;\n\nexport interface GpuData {\n  type: GpuDataType;\n  id: GpuDataId;\n  buffer: GPUBuffer;\n}\n\nexport interface TensorInfo {\n  dims: readonly number[];\n  dataType: number;\n  gpuDataType: GpuDataType;\n}\n\n\nexport interface ProgramVariable {\n  type: 'float'|'int';\n  name: string;\n  arrayLength?: number;\n  data: number|number[];\n}\n\n\nexport interface ProgramMetadata {\n  /**\n   * the name of the program. used for debugging and profiling\n   */\n  name: string;\n\n  /**\n   * gpu data types for each input\n   */\n  inputTypes: GpuDataType[];\n  /**\n   * an optional string as a cache hint in the artifact cache\n   */\n  cacheHint?: string;\n}\n\n/**\n * A ProgramInfoLoader allows\n */\nexport interface ProgramInfoLoader extends ProgramMetadata {\n  /**\n   * a function to get the program info\n   */\n  get(): ProgramInfo;\n}\n\n/**\n * A set of data that represent a shader program\n */\nexport interface ProgramInfo extends ProgramMetadata {\n  /**\n   * information of uniform variables\n   */\n  variables?: ProgramVariable[];\n  /**\n   * tensor info for outputs\n   */\n  outputs: TensorInfo[];\n  /**\n   * the shader's processing source code\n   */\n  getShaderSource: (shaderHelper: ShaderHelper) => string;\n  /**\n   * default is \"main\"\n   */\n  // entryPoint: string;\n\n  dispatchGroup: (inputs: readonly TensorView[]) => {\n    x: number;\n    y?: number;\n    z?: number;\n  };\n}\n\nexport interface Artifact {\n  programInfo: ProgramInfo;\n  computePipeline: GPUComputePipeline;\n}\n\nexport interface ComputeContextInputsOutputsMapping {\n  /**\n   * specify the mapping to the program's inputs. the value can be a number or a tensor view.\n   * - if it's a number, it's the index of the kernel's input\n   * - if it's a tensor view, it's an existing tensor view that will be used as the input\n   *\n   * if inputs is not specified, the mapping will be the kernel's inputs in order.\n   */\n  readonly inputs?: ReadonlyArray<TensorView|number>;\n  /**\n   * specify the mapping to the program's outputs. the value must be a number.\n   * - if it's a non-negative number, it's the index of the kernel's output\n   * - if it's -1, it's an output that will be created as a temporary value. this value will be released after\n   * the kernel is executed.\n   * - if it's -2, it's an output that will be created as a persistent value. this value will be released when the\n   * kernel is released.\n   *\n   * if outputs is not specified, the mapping will be the kernel's outputs in order.\n   */\n  readonly outputs?: readonly number[];\n}\n\n/**\n * A ComputeContext instance carries the states that representing the current running of a kernel.\n */\nexport interface ComputeContext {\n  /**\n   * stores the pointer to OpKernelContext\n   */\n  readonly opKernelContext: number;\n\n  /**\n   * a list of inputs, each input is an instance of TensorView\n   */\n  readonly inputs: readonly TensorView[];\n\n  /**\n   * a custom data object that can be used to store any data that is needed by the kernel\n   */\n  readonly kernelCustomData: {[key: string]: unknown};\n\n  /**\n   * a buffer that can be used to access custom data created each time the kernel is executed\n   */\n  readonly customDataBuffer: Uint8Array;\n\n  /**\n   * a number of outputs for the node\n   */\n  readonly outputCount: number;\n\n  compute(program: ProgramInfoLoader|ProgramInfo, inputsOutputsMapping?: ComputeContextInputsOutputsMapping):\n      TensorView[];\n  output(index: number, dims: readonly number[]): number;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Env, env, InferenceSession} from 'onnxruntime-common';\n\nimport {OrtWasmMessage, SerializableModeldata, SerializableSessionMetadata, SerializableTensorMetadata, TensorMetadata} from './proxy-messages';\nimport * as core from './wasm-core-impl';\nimport {initializeWebAssembly} from './wasm-factory';\n\nconst isProxy = (): boolean => !!env.wasm.proxy && typeof document !== 'undefined';\nlet proxyWorker: Worker|undefined;\nlet initializing = false;\nlet initialized = false;\nlet aborted = false;\n\n// resolve; reject\ntype PromiseCallbacks<T = void> = [(result: T) => void, (reason: unknown) => void];\n\nlet initWasmCallbacks: PromiseCallbacks;\nlet initOrtCallbacks: PromiseCallbacks;\nconst createSessionAllocateCallbacks: Array<PromiseCallbacks<SerializableModeldata>> = [];\nconst createSessionFinalizeCallbacks: Array<PromiseCallbacks<SerializableSessionMetadata>> = [];\nconst createSessionCallbacks: Array<PromiseCallbacks<SerializableSessionMetadata>> = [];\nconst releaseSessionCallbacks: Array<PromiseCallbacks<void>> = [];\nconst runCallbacks: Array<PromiseCallbacks<SerializableTensorMetadata[]>> = [];\nconst endProfilingCallbacks: Array<PromiseCallbacks<void>> = [];\n\nconst ensureWorker = (): void => {\n  if (initializing || !initialized || aborted || !proxyWorker) {\n    throw new Error('worker not ready');\n  }\n};\n\nconst onProxyWorkerMessage = (ev: MessageEvent<OrtWasmMessage>): void => {\n  switch (ev.data.type) {\n    case 'init-wasm':\n      initializing = false;\n      if (ev.data.err) {\n        aborted = true;\n        initWasmCallbacks[1](ev.data.err);\n      } else {\n        initialized = true;\n        initWasmCallbacks[0]();\n      }\n      break;\n    case 'init-ort':\n      if (ev.data.err) {\n        initOrtCallbacks[1](ev.data.err);\n      } else {\n        initOrtCallbacks[0]();\n      }\n      break;\n    case 'create_allocate':\n      if (ev.data.err) {\n        createSessionAllocateCallbacks.shift()![1](ev.data.err);\n      } else {\n        createSessionAllocateCallbacks.shift()![0](ev.data.out!);\n      }\n      break;\n    case 'create_finalize':\n      if (ev.data.err) {\n        createSessionFinalizeCallbacks.shift()![1](ev.data.err);\n      } else {\n        createSessionFinalizeCallbacks.shift()![0](ev.data.out!);\n      }\n      break;\n    case 'create':\n      if (ev.data.err) {\n        createSessionCallbacks.shift()![1](ev.data.err);\n      } else {\n        createSessionCallbacks.shift()![0](ev.data.out!);\n      }\n      break;\n    case 'release':\n      if (ev.data.err) {\n        releaseSessionCallbacks.shift()![1](ev.data.err);\n      } else {\n        releaseSessionCallbacks.shift()![0]();\n      }\n      break;\n    case 'run':\n      if (ev.data.err) {\n        runCallbacks.shift()![1](ev.data.err);\n      } else {\n        runCallbacks.shift()![0](ev.data.out!);\n      }\n      break;\n    case 'end-profiling':\n      if (ev.data.err) {\n        endProfilingCallbacks.shift()![1](ev.data.err);\n      } else {\n        endProfilingCallbacks.shift()![0]();\n      }\n      break;\n    default:\n  }\n};\n\nconst scriptSrc = typeof document !== 'undefined' ? (document?.currentScript as HTMLScriptElement)?.src : undefined;\n\nexport const initializeWebAssemblyInstance = async(): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    if (initialized) {\n      return;\n    }\n    if (initializing) {\n      throw new Error('multiple calls to \\'initWasm()\\' detected.');\n    }\n    if (aborted) {\n      throw new Error('previous call to \\'initWasm()\\' failed.');\n    }\n\n    initializing = true;\n\n    // overwrite wasm filepaths\n    if (env.wasm.wasmPaths === undefined) {\n      if (scriptSrc && scriptSrc.indexOf('blob:') !== 0) {\n        env.wasm.wasmPaths = scriptSrc.substr(0, +(scriptSrc).lastIndexOf('/') + 1);\n      }\n    }\n\n    return new Promise<void>((resolve, reject) => {\n      proxyWorker?.terminate();\n      // eslint-disable-next-line @typescript-eslint/no-var-requires, @typescript-eslint/no-require-imports\n      proxyWorker = require('worker-loader?inline=no-fallback!./proxy-worker/main').default() as Worker;\n      proxyWorker.onmessage = onProxyWorkerMessage;\n      initWasmCallbacks = [resolve, reject];\n      const message: OrtWasmMessage = {type: 'init-wasm', in : env.wasm};\n      proxyWorker.postMessage(message);\n    });\n\n  } else {\n    return initializeWebAssembly(env.wasm);\n  }\n};\n\nexport const initializeRuntime = async(env: Env): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<void>((resolve, reject) => {\n      initOrtCallbacks = [resolve, reject];\n      const message: OrtWasmMessage = {type: 'init-ort', in : env};\n      proxyWorker!.postMessage(message);\n    });\n  } else {\n    await core.initRuntime(env);\n  }\n};\n\nexport const createSessionAllocate = async(model: Uint8Array): Promise<SerializableModeldata> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<SerializableModeldata>((resolve, reject) => {\n      createSessionAllocateCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'create_allocate', in : {model}};\n      proxyWorker!.postMessage(message, [model.buffer]);\n    });\n  } else {\n    return core.createSessionAllocate(model);\n  }\n};\n\nexport const createSessionFinalize = async(modeldata: SerializableModeldata, options?: InferenceSession.SessionOptions):\n    Promise<SerializableSessionMetadata> => {\n      if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n        ensureWorker();\n        return new Promise<SerializableSessionMetadata>((resolve, reject) => {\n          createSessionFinalizeCallbacks.push([resolve, reject]);\n          const message: OrtWasmMessage = {type: 'create_finalize', in : {modeldata, options}};\n          proxyWorker!.postMessage(message);\n        });\n      } else {\n        return core.createSessionFinalize(modeldata, options);\n      }\n    };\n\nexport const createSession =\n    async(model: Uint8Array, options?: InferenceSession.SessionOptions): Promise<SerializableSessionMetadata> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    // check unsupported options\n    if (options?.preferredOutputLocation) {\n      throw new Error('session option \"preferredOutputLocation\" is not supported for proxy.');\n    }\n    ensureWorker();\n    return new Promise<SerializableSessionMetadata>((resolve, reject) => {\n      createSessionCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'create', in : {model, options}};\n      proxyWorker!.postMessage(message, [model.buffer]);\n    });\n  } else {\n    return core.createSession(model, options);\n  }\n};\n\nexport const releaseSession = async(sessionId: number): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<void>((resolve, reject) => {\n      releaseSessionCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'release', in : sessionId};\n      proxyWorker!.postMessage(message);\n    });\n  } else {\n    core.releaseSession(sessionId);\n  }\n};\n\nexport const run = async(\n    sessionId: number, inputIndices: number[], inputs: TensorMetadata[], outputIndices: number[],\n    outputs: Array<TensorMetadata|null>, options: InferenceSession.RunOptions): Promise<TensorMetadata[]> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    // check inputs location\n    if (inputs.some(t => t[3] !== 'cpu')) {\n      throw new Error('input tensor on GPU is not supported for proxy.');\n    }\n    // check outputs location\n    if (outputs.some(t => t)) {\n      throw new Error('pre-allocated output tensor is not supported for proxy.');\n    }\n    ensureWorker();\n    return new Promise<SerializableTensorMetadata[]>((resolve, reject) => {\n      runCallbacks.push([resolve, reject]);\n      const serializableInputs = inputs as SerializableTensorMetadata[];  // every input is on CPU.\n      const message: OrtWasmMessage =\n          {type: 'run', in : {sessionId, inputIndices, inputs: serializableInputs, outputIndices, options}};\n      proxyWorker!.postMessage(message, core.extractTransferableBuffers(serializableInputs));\n    });\n  } else {\n    return core.run(sessionId, inputIndices, inputs, outputIndices, outputs, options);\n  }\n};\n\nexport const endProfiling = async(sessionId: number): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<void>((resolve, reject) => {\n      endProfilingCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'end-profiling', in : sessionId};\n      proxyWorker!.postMessage(message);\n    });\n  } else {\n    core.endProfiling(sessionId);\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession} from 'onnxruntime-common';\n\nimport {getInstance} from './wasm-factory';\nimport {allocWasmString, checkLastError, iterateExtraOptions} from './wasm-utils';\n\nexport const setRunOptions = (options: InferenceSession.RunOptions): [number, number[]] => {\n  const wasm = getInstance();\n  let runOptionsHandle = 0;\n  const allocs: number[] = [];\n\n  const runOptions: InferenceSession.RunOptions = options || {};\n\n  try {\n    if (options?.logSeverityLevel === undefined) {\n      runOptions.logSeverityLevel = 2;  // Default to warning\n    } else if (\n        typeof options.logSeverityLevel !== 'number' || !Number.isInteger(options.logSeverityLevel) ||\n        options.logSeverityLevel < 0 || options.logSeverityLevel > 4) {\n      throw new Error(`log serverity level is not valid: ${options.logSeverityLevel}`);\n    }\n\n    if (options?.logVerbosityLevel === undefined) {\n      runOptions.logVerbosityLevel = 0;  // Default to 0\n    } else if (typeof options.logVerbosityLevel !== 'number' || !Number.isInteger(options.logVerbosityLevel)) {\n      throw new Error(`log verbosity level is not valid: ${options.logVerbosityLevel}`);\n    }\n\n    if (options?.terminate === undefined) {\n      runOptions.terminate = false;\n    }\n\n    let tagDataOffset = 0;\n    if (options?.tag !== undefined) {\n      tagDataOffset = allocWasmString(options.tag, allocs);\n    }\n\n    runOptionsHandle = wasm._OrtCreateRunOptions(\n        runOptions.logSeverityLevel!, runOptions.logVerbosityLevel!, !!runOptions.terminate!, tagDataOffset);\n    if (runOptionsHandle === 0) {\n      checkLastError('Can\\'t create run options.');\n    }\n\n    if (options?.extra !== undefined) {\n      iterateExtraOptions(options.extra, '', new WeakSet<Record<string, unknown>>(), (key, value) => {\n        const keyDataOffset = allocWasmString(key, allocs);\n        const valueDataOffset = allocWasmString(value, allocs);\n\n        if (wasm._OrtAddRunConfigEntry(runOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n          checkLastError(`Can't set a run config entry: ${key} - ${value}.`);\n        }\n      });\n    }\n\n    return [runOptionsHandle, allocs];\n  } catch (e) {\n    if (runOptionsHandle !== 0) {\n      wasm._OrtReleaseRunOptions(runOptionsHandle);\n    }\n    allocs.forEach(alloc => wasm._free(alloc));\n    throw e;\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {readFile} from 'fs';\nimport {env, InferenceSession, InferenceSessionHandler, SessionHandler, Tensor} from 'onnxruntime-common';\nimport {promisify} from 'util';\n\nimport {SerializableModeldata, TensorMetadata} from './proxy-messages';\nimport {createSession, createSessionAllocate, createSessionFinalize, endProfiling, initializeRuntime, releaseSession, run} from './proxy-wrapper';\nimport {isGpuBufferSupportedType} from './wasm-common';\n\nlet runtimeInitialized: boolean;\nlet runtimeInitializationPromise: Promise<void>|undefined;\n\nconst encodeTensorMetadata = (tensor: Tensor, getName: () => string): TensorMetadata => {\n  switch (tensor.location) {\n    case 'cpu':\n      return [tensor.type, tensor.dims, tensor.data, 'cpu'];\n    case 'gpu-buffer':\n      return [tensor.type, tensor.dims, {gpuBuffer: tensor.gpuBuffer}, 'gpu-buffer'];\n    default:\n      throw new Error(`invalid data location: ${tensor.location} for ${getName()}`);\n  }\n};\n\nconst decodeTensorMetadata = (tensor: TensorMetadata): Tensor => {\n  switch (tensor[3]) {\n    case 'cpu':\n      return new Tensor(tensor[0], tensor[2], tensor[1]);\n    case 'gpu-buffer': {\n      const dataType = tensor[0];\n      if (!isGpuBufferSupportedType(dataType)) {\n        throw new Error(`not supported data type: ${dataType} for deserializing GPU tensor`);\n      }\n      const {gpuBuffer, download, dispose} = tensor[2];\n      return Tensor.fromGpuBuffer(gpuBuffer, {dataType, dims: tensor[1], download, dispose});\n    }\n    default:\n      throw new Error(`invalid data location: ${tensor[3]}`);\n  }\n};\n\nexport class OnnxruntimeWebAssemblySessionHandler implements InferenceSessionHandler {\n  private sessionId: number;\n\n  inputNames: string[];\n  outputNames: string[];\n\n  async createSessionAllocate(path: string): Promise<SerializableModeldata> {\n    // fetch model from url and move to wasm heap. The arraybufffer that held the http\n    // response is freed once we return\n    const response = await fetch(path);\n    if (response.status !== 200) {\n      throw new Error(`failed to load model: ${path}`);\n    }\n    const arrayBuffer = await response.arrayBuffer();\n    return createSessionAllocate(new Uint8Array(arrayBuffer));\n  }\n\n  async loadModel(pathOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions): Promise<void> {\n    if (!runtimeInitialized) {\n      if (!runtimeInitializationPromise) {\n        runtimeInitializationPromise = initializeRuntime(env);\n      }\n      await runtimeInitializationPromise;\n      runtimeInitializationPromise = undefined;\n      runtimeInitialized = true;\n    }\n\n    if (typeof pathOrBuffer === 'string') {\n      if (typeof process !== 'undefined' && process.versions && process.versions.node) {\n        // node\n        const model = await promisify(readFile)(pathOrBuffer);\n        [this.sessionId, this.inputNames, this.outputNames] = await createSession(model, options);\n      } else {\n        // browser\n        // fetch model and move to wasm heap.\n        const modelData: SerializableModeldata = await this.createSessionAllocate(pathOrBuffer);\n        // create the session\n        [this.sessionId, this.inputNames, this.outputNames] = await createSessionFinalize(modelData, options);\n      }\n    } else {\n      [this.sessionId, this.inputNames, this.outputNames] = await createSession(pathOrBuffer, options);\n    }\n  }\n\n  async dispose(): Promise<void> {\n    return releaseSession(this.sessionId);\n  }\n\n  async run(feeds: SessionHandler.FeedsType, fetches: SessionHandler.FetchesType, options: InferenceSession.RunOptions):\n      Promise<SessionHandler.ReturnType> {\n    const inputArray: Tensor[] = [];\n    const inputIndices: number[] = [];\n    Object.entries(feeds).forEach(kvp => {\n      const name = kvp[0];\n      const tensor = kvp[1];\n      const index = this.inputNames.indexOf(name);\n      if (index === -1) {\n        throw new Error(`invalid input '${name}'`);\n      }\n      inputArray.push(tensor);\n      inputIndices.push(index);\n    });\n\n    const outputArray: Array<Tensor|null> = [];\n    const outputIndices: number[] = [];\n    Object.entries(fetches).forEach(kvp => {\n      const name = kvp[0];\n      const tensor = kvp[1];\n      const index = this.outputNames.indexOf(name);\n      if (index === -1) {\n        throw new Error(`invalid output '${name}'`);\n      }\n      outputArray.push(tensor);\n      outputIndices.push(index);\n    });\n\n    const inputs =\n        inputArray.map((t, i) => encodeTensorMetadata(t, () => `input \"${this.inputNames[inputIndices[i]]}\"`));\n    const outputs = outputArray.map(\n        (t, i) => t ? encodeTensorMetadata(t, () => `output \"${this.outputNames[outputIndices[i]]}\"`) : null);\n\n    const results = await run(this.sessionId, inputIndices, inputs, outputIndices, outputs, options);\n\n    const resultMap: SessionHandler.ReturnType = {};\n    for (let i = 0; i < results.length; i++) {\n      resultMap[this.outputNames[outputIndices[i]]] = outputArray[i] ?? decodeTensorMetadata(results[i]);\n    }\n    return resultMap;\n  }\n\n  startProfiling(): void {\n    // TODO: implement profiling\n  }\n\n  endProfiling(): void {\n    void endProfiling(this.sessionId);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession} from 'onnxruntime-common';\n\nimport {getInstance} from './wasm-factory';\nimport {allocWasmString, checkLastError, iterateExtraOptions} from './wasm-utils';\n\nconst getGraphOptimzationLevel = (graphOptimizationLevel: string|unknown): number => {\n  switch (graphOptimizationLevel) {\n    case 'disabled':\n      return 0;\n    case 'basic':\n      return 1;\n    case 'extended':\n      return 2;\n    case 'all':\n      return 99;\n    default:\n      throw new Error(`unsupported graph optimization level: ${graphOptimizationLevel}`);\n  }\n};\n\nconst getExecutionMode = (executionMode: 'sequential'|'parallel'): number => {\n  switch (executionMode) {\n    case 'sequential':\n      return 0;\n    case 'parallel':\n      return 1;\n    default:\n      throw new Error(`unsupported execution mode: ${executionMode}`);\n  }\n};\n\nconst appendDefaultOptions = (options: InferenceSession.SessionOptions): void => {\n  if (!options.extra) {\n    options.extra = {};\n  }\n  if (!options.extra.session) {\n    options.extra.session = {};\n  }\n  const session = options.extra.session as Record<string, string>;\n  if (!session.use_ort_model_bytes_directly) {\n    // eslint-disable-next-line camelcase\n    session.use_ort_model_bytes_directly = '1';\n  }\n\n  // if using JSEP with WebGPU, always disable memory pattern\n  if (options.executionProviders &&\n      options.executionProviders.some(ep => (typeof ep === 'string' ? ep : ep.name) === 'webgpu')) {\n    options.enableMemPattern = false;\n  }\n};\n\nconst setExecutionProviders =\n    (sessionOptionsHandle: number, executionProviders: readonly InferenceSession.ExecutionProviderConfig[],\n     allocs: number[]): void => {\n      for (const ep of executionProviders) {\n        let epName = typeof ep === 'string' ? ep : ep.name;\n\n        // check EP name\n        switch (epName) {\n          case 'xnnpack':\n            epName = 'XNNPACK';\n            break;\n          case 'webnn':\n            epName = 'WEBNN';\n            if (typeof ep !== 'string') {\n              const webnnOptions = ep as InferenceSession.WebNNExecutionProviderOption;\n              if (webnnOptions?.deviceType) {\n                const keyDataOffset = allocWasmString('deviceType', allocs);\n                const valueDataOffset = allocWasmString(webnnOptions.deviceType, allocs);\n                if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !==\n                    0) {\n                  checkLastError(`Can't set a session config entry: 'deviceType' - ${webnnOptions.deviceType}.`);\n                }\n              }\n              if (webnnOptions?.powerPreference) {\n                const keyDataOffset = allocWasmString('powerPreference', allocs);\n                const valueDataOffset = allocWasmString(webnnOptions.powerPreference, allocs);\n                if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !==\n                    0) {\n                  checkLastError(\n                      `Can't set a session config entry: 'powerPreference' - ${webnnOptions.powerPreference}.`);\n                }\n              }\n            }\n            break;\n          case 'webgpu':\n            epName = 'JS';\n            if (typeof ep !== 'string') {\n              const webgpuOptions = ep as InferenceSession.WebGpuExecutionProviderOption;\n              if (webgpuOptions?.preferredLayout) {\n                if (webgpuOptions.preferredLayout !== 'NCHW' && webgpuOptions.preferredLayout !== 'NHWC') {\n                  throw new Error(`preferredLayout must be either 'NCHW' or 'NHWC': ${webgpuOptions.preferredLayout}`);\n                }\n                const keyDataOffset = allocWasmString('preferredLayout', allocs);\n                const valueDataOffset = allocWasmString(webgpuOptions.preferredLayout, allocs);\n                if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !==\n                    0) {\n                  checkLastError(\n                      `Can't set a session config entry: 'preferredLayout' - ${webgpuOptions.preferredLayout}.`);\n                }\n              }\n            }\n            break;\n          case 'wasm':\n          case 'cpu':\n            continue;\n          default:\n            throw new Error(`not supported execution provider: ${epName}`);\n        }\n\n        const epNameDataOffset = allocWasmString(epName, allocs);\n        if (getInstance()._OrtAppendExecutionProvider(sessionOptionsHandle, epNameDataOffset) !== 0) {\n          checkLastError(`Can't append execution provider: ${epName}.`);\n        }\n      }\n    };\n\nexport const setSessionOptions = (options?: InferenceSession.SessionOptions): [number, number[]] => {\n  const wasm = getInstance();\n  let sessionOptionsHandle = 0;\n  const allocs: number[] = [];\n\n  const sessionOptions: InferenceSession.SessionOptions = options || {};\n  appendDefaultOptions(sessionOptions);\n\n  try {\n    const graphOptimizationLevel = getGraphOptimzationLevel(sessionOptions.graphOptimizationLevel ?? 'all');\n    const executionMode = getExecutionMode(sessionOptions.executionMode ?? 'sequential');\n    const logIdDataOffset =\n        typeof sessionOptions.logId === 'string' ? allocWasmString(sessionOptions.logId, allocs) : 0;\n\n    const logSeverityLevel = sessionOptions.logSeverityLevel ?? 2;  // Default to 2 - warning\n    if (!Number.isInteger(logSeverityLevel) || logSeverityLevel < 0 || logSeverityLevel > 4) {\n      throw new Error(`log serverity level is not valid: ${logSeverityLevel}`);\n    }\n\n    const logVerbosityLevel = sessionOptions.logVerbosityLevel ?? 0;  // Default to 0 - verbose\n    if (!Number.isInteger(logVerbosityLevel) || logVerbosityLevel < 0 || logVerbosityLevel > 4) {\n      throw new Error(`log verbosity level is not valid: ${logVerbosityLevel}`);\n    }\n\n    const optimizedModelFilePathOffset = typeof sessionOptions.optimizedModelFilePath === 'string' ?\n        allocWasmString(sessionOptions.optimizedModelFilePath, allocs) :\n        0;\n\n    sessionOptionsHandle = wasm._OrtCreateSessionOptions(\n        graphOptimizationLevel, !!sessionOptions.enableCpuMemArena, !!sessionOptions.enableMemPattern, executionMode,\n        !!sessionOptions.enableProfiling, 0, logIdDataOffset, logSeverityLevel, logVerbosityLevel,\n        optimizedModelFilePathOffset);\n    if (sessionOptionsHandle === 0) {\n      checkLastError('Can\\'t create session options.');\n    }\n\n    if (sessionOptions.executionProviders) {\n      setExecutionProviders(sessionOptionsHandle, sessionOptions.executionProviders, allocs);\n    }\n\n    if (sessionOptions.freeDimensionOverrides) {\n      for (const [name, value] of Object.entries(sessionOptions.freeDimensionOverrides)) {\n        if (typeof name !== 'string') {\n          throw new Error(`free dimension override name must be a string: ${name}`);\n        }\n        if (typeof value !== 'number' || !Number.isInteger(value) || value < 0) {\n          throw new Error(`free dimension override value must be a non-negative integer: ${value}`);\n        }\n        const nameOffset = allocWasmString(name, allocs);\n        if (wasm._OrtAddFreeDimensionOverride(sessionOptionsHandle, nameOffset, value) !== 0) {\n          checkLastError(`Can't set a free dimension override: ${name} - ${value}.`);\n        }\n      }\n    }\n\n    if (sessionOptions.extra !== undefined) {\n      iterateExtraOptions(sessionOptions.extra, '', new WeakSet<Record<string, unknown>>(), (key, value) => {\n        const keyDataOffset = allocWasmString(key, allocs);\n        const valueDataOffset = allocWasmString(value, allocs);\n\n        if (wasm._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n          checkLastError(`Can't set a session config entry: ${key} - ${value}.`);\n        }\n      });\n    }\n\n    return [sessionOptionsHandle, allocs];\n  } catch (e) {\n    if (sessionOptionsHandle !== 0) {\n      wasm._OrtReleaseSessionOptions(sessionOptionsHandle);\n    }\n    allocs.forEach(alloc => wasm._free(alloc));\n    throw e;\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from 'onnxruntime-common';\n\n// This file includes common definitions. They do NOT have dependency on the WebAssembly instance.\n\n/**\n * Copied from ONNX definition. Use this to drop dependency 'onnx_proto' to decrease compiled .js file size.\n */\nexport const enum DataType {\n  undefined = 0,\n  float = 1,\n  uint8 = 2,\n  int8 = 3,\n  uint16 = 4,\n  int16 = 5,\n  int32 = 6,\n  int64 = 7,\n  string = 8,\n  bool = 9,\n  float16 = 10,\n  double = 11,\n  uint32 = 12,\n  uint64 = 13,\n  complex64 = 14,\n  complex128 = 15,\n  bfloat16 = 16\n}\n\n/**\n * Map string tensor data to enum value\n */\nexport const tensorDataTypeStringToEnum = (type: string): DataType => {\n  switch (type) {\n    case 'int8':\n      return DataType.int8;\n    case 'uint8':\n      return DataType.uint8;\n    case 'bool':\n      return DataType.bool;\n    case 'int16':\n      return DataType.int16;\n    case 'uint16':\n      return DataType.uint16;\n    case 'int32':\n      return DataType.int32;\n    case 'uint32':\n      return DataType.uint32;\n    case 'float16':\n      return DataType.float16;\n    case 'float32':\n      return DataType.float;\n    case 'float64':\n      return DataType.double;\n    case 'string':\n      return DataType.string;\n    case 'int64':\n      return DataType.int64;\n    case 'uint64':\n      return DataType.uint64;\n\n    default:\n      throw new Error(`unsupported data type: ${type}`);\n  }\n};\n\n/**\n * Map enum value to string tensor data\n */\nexport const tensorDataTypeEnumToString = (typeProto: DataType): Tensor.Type => {\n  switch (typeProto) {\n    case DataType.int8:\n      return 'int8';\n    case DataType.uint8:\n      return 'uint8';\n    case DataType.bool:\n      return 'bool';\n    case DataType.int16:\n      return 'int16';\n    case DataType.uint16:\n      return 'uint16';\n    case DataType.int32:\n      return 'int32';\n    case DataType.uint32:\n      return 'uint32';\n    case DataType.float16:\n      return 'float16';\n    case DataType.float:\n      return 'float32';\n    case DataType.double:\n      return 'float64';\n    case DataType.string:\n      return 'string';\n    case DataType.int64:\n      return 'int64';\n    case DataType.uint64:\n      return 'uint64';\n\n    default:\n      throw new Error(`unsupported data type: ${typeProto}`);\n  }\n};\n\n/**\n * get tensor element size in bytes by the given data type\n * @returns size in integer or undefined if the data type is not supported\n */\nexport const getTensorElementSize = (dateType: number): number|\n    undefined => [undefined, 4, 1, 1, 2, 2, 4, 8, undefined, 1, 2, 8, 4, 8, undefined, undefined, undefined][dateType];\n\n/**\n * get typed array constructor by the given tensor type\n */\nexport const tensorTypeToTypedArrayConstructor = (type: Tensor.Type): Float32ArrayConstructor|Uint8ArrayConstructor|\n    Int8ArrayConstructor|Uint16ArrayConstructor|Int16ArrayConstructor|Int32ArrayConstructor|BigInt64ArrayConstructor|\n    Uint8ArrayConstructor|Float64ArrayConstructor|Uint32ArrayConstructor|BigUint64ArrayConstructor => {\n      switch (type) {\n        case 'float16':\n          return Uint16Array;\n        case 'float32':\n          return Float32Array;\n        case 'uint8':\n          return Uint8Array;\n        case 'int8':\n          return Int8Array;\n        case 'uint16':\n          return Uint16Array;\n        case 'int16':\n          return Int16Array;\n        case 'int32':\n          return Int32Array;\n        case 'bool':\n          return Uint8Array;\n        case 'float64':\n          return Float64Array;\n        case 'uint32':\n          return Uint32Array;\n        case 'int64':\n          return BigInt64Array;\n        case 'uint64':\n          return BigUint64Array;\n        default:\n          throw new Error(`unsupported type: ${type}`);\n      }\n    };\n\n/**\n * Map string log level to integer value\n */\nexport const logLevelStringToEnum = (logLevel?: 'verbose'|'info'|'warning'|'error'|'fatal'): number => {\n  switch (logLevel) {\n    case 'verbose':\n      return 0;\n    case 'info':\n      return 1;\n    case 'warning':\n      return 2;\n    case 'error':\n      return 3;\n    case 'fatal':\n      return 4;\n    default:\n      throw new Error(`unsupported logging level: ${logLevel}`);\n  }\n};\n\n/**\n * Check whether the given tensor type is supported by GPU buffer\n */\nexport const isGpuBufferSupportedType = (type: Tensor.Type): type is Tensor.GpuBufferDataTypes => type === 'float32' ||\n    type === 'int32' || type === 'int64' || type === 'bool' || type === 'float16' || type === 'uint32';\n\n/**\n * Map string data location to integer value\n */\nexport const dataLocationStringToEnum = (location: Tensor.DataLocation): number => {\n  switch (location) {\n    case 'none':\n      return 0;\n    case 'cpu':\n      return 1;\n    case 'cpu-pinned':\n      return 2;\n    case 'texture':\n      return 3;\n    case 'gpu-buffer':\n      return 4;\n    default:\n      throw new Error(`unsupported data location: ${location}`);\n  }\n};\n\n/**\n * Map integer data location to string value\n */\nexport const dataLocationEnumToString = (location: number): Tensor.DataLocation|undefined =>\n    (['none', 'cpu', 'cpu-pinned', 'texture', 'gpu-buffer'] as const)[location];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Env, InferenceSession, Tensor} from 'onnxruntime-common';\n\nimport {SerializableModeldata, SerializableSessionMetadata, SerializableTensorMetadata, TensorMetadata} from './proxy-messages';\nimport {setRunOptions} from './run-options';\nimport {setSessionOptions} from './session-options';\nimport {dataLocationStringToEnum, getTensorElementSize, isGpuBufferSupportedType, logLevelStringToEnum, tensorDataTypeEnumToString, tensorDataTypeStringToEnum, tensorTypeToTypedArrayConstructor} from './wasm-common';\nimport {getInstance} from './wasm-factory';\nimport {allocWasmString, checkLastError} from './wasm-utils';\n\n/**\n * get the input/output count of the session.\n * @param sessionHandle the handle representing the session. should be non-zero.\n * @returns a tuple including 2 numbers, representing the input count and output count.\n */\nconst getSessionInputOutputCount = (sessionHandle: number): [number, number] => {\n  const wasm = getInstance();\n  const stack = wasm.stackSave();\n  try {\n    const dataOffset = wasm.stackAlloc(8);\n    const errorCode = wasm._OrtGetInputOutputCount(sessionHandle, dataOffset, dataOffset + 4);\n    if (errorCode !== 0) {\n      checkLastError('Can\\'t get session input/output count.');\n    }\n    return [wasm.HEAP32[dataOffset / 4], wasm.HEAP32[dataOffset / 4 + 1]];\n  } finally {\n    wasm.stackRestore(stack);\n  }\n};\n\n/**\n * initialize ORT environment.\n * @param numThreads SetGlobalIntraOpNumThreads(numThreads)\n * @param loggingLevel CreateEnv(static_cast<OrtLoggingLevel>(logging_level))\n */\nconst initOrt = (numThreads: number, loggingLevel: number): void => {\n  const errorCode = getInstance()._OrtInit(numThreads, loggingLevel);\n  if (errorCode !== 0) {\n    checkLastError('Can\\'t initialize onnxruntime.');\n  }\n};\n\n/**\n * intialize runtime environment.\n * @param env passed in the environment config object.\n */\nexport const initRuntime = async(env: Env): Promise<void> => {\n  // init ORT\n  initOrt(env.wasm.numThreads!, logLevelStringToEnum(env.logLevel));\n\n  if (!BUILD_DEFS.DISABLE_WEBGPU) {\n    // init JSEP if available\n\n    // eslint-disable-next-line @typescript-eslint/no-require-imports, @typescript-eslint/no-var-requires\n    const initJsep = require('./jsep/init').init;\n    await initJsep(getInstance(), env);\n  }\n};\n\n/**\n * valid data locations for input/output tensors.\n */\ntype SupportedTensorDataLocationForInputOutput = 'cpu'|'cpu-pinned'|'gpu-buffer';\n\ntype IOBindingState = {\n  /**\n   * the handle of IO binding.\n   */\n  readonly handle: number;\n\n  /**\n   * the preferred location for each output tensor.\n   *\n   * value is one of 'cpu', 'cpu-pinned', 'gpu-buffer'.\n   */\n  readonly outputPreferredLocations: readonly SupportedTensorDataLocationForInputOutput[];\n\n  /**\n   * enum value of the preferred location for each output tensor.\n   */\n  readonly outputPreferredLocationsEncoded: readonly number[];\n};\n\n/**\n *  tuple elements are: InferenceSession ID; inputNamesUTF8Encoded; outputNamesUTF8Encoded; bindingState\n */\ntype SessionMetadata = [\n  inferenceSessionId: number, inputNamesUTF8Encoded: number[], outputNamesUTF8Encoded: number[],\n  bindingState: IOBindingState|null\n];\n\nconst activeSessions = new Map<number, SessionMetadata>();\n\n/**\n * allocate the memory and memcpy the model bytes, preparing for creating an instance of InferenceSession.\n * @returns a 2-elements tuple - the pointer and size of the allocated buffer\n */\nexport const createSessionAllocate = (model: Uint8Array): [number, number] => {\n  const wasm = getInstance();\n  const modelDataOffset = wasm._malloc(model.byteLength);\n  if (modelDataOffset === 0) {\n    throw new Error(`Can't create a session. failed to allocate a buffer of size ${model.byteLength}.`);\n  }\n  wasm.HEAPU8.set(model, modelDataOffset);\n  return [modelDataOffset, model.byteLength];\n};\n\n/**\n * create an inference session using the prepared buffer containing the model data.\n * @param modelData a 2-elements tuple containing the pointer and size of the model data buffer.\n * @param options an optional session options object.\n * @returns a 3-elements tuple containing [session handle, input names, output names]\n */\nexport const createSessionFinalize =\n    (modelData: SerializableModeldata, options?: InferenceSession.SessionOptions): SerializableSessionMetadata => {\n      const wasm = getInstance();\n\n      let sessionHandle = 0;\n      let sessionOptionsHandle = 0;\n      let ioBindingHandle = 0;\n      let allocs: number[] = [];\n      const inputNamesUTF8Encoded = [];\n      const outputNamesUTF8Encoded = [];\n\n      try {\n        [sessionOptionsHandle, allocs] = setSessionOptions(options);\n\n        sessionHandle = wasm._OrtCreateSession(modelData[0], modelData[1], sessionOptionsHandle);\n        if (sessionHandle === 0) {\n          checkLastError('Can\\'t create a session.');\n        }\n\n        const [inputCount, outputCount] = getSessionInputOutputCount(sessionHandle);\n\n        const inputNames = [];\n        const outputNames = [];\n        const outputPreferredLocations: SupportedTensorDataLocationForInputOutput[] = [];\n        for (let i = 0; i < inputCount; i++) {\n          const name = wasm._OrtGetInputName(sessionHandle, i);\n          if (name === 0) {\n            checkLastError('Can\\'t get an input name.');\n          }\n          inputNamesUTF8Encoded.push(name);\n          inputNames.push(wasm.UTF8ToString(name));\n        }\n        for (let i = 0; i < outputCount; i++) {\n          const name = wasm._OrtGetOutputName(sessionHandle, i);\n          if (name === 0) {\n            checkLastError('Can\\'t get an output name.');\n          }\n          outputNamesUTF8Encoded.push(name);\n          const nameString = wasm.UTF8ToString(name);\n          outputNames.push(nameString);\n\n          if (!BUILD_DEFS.DISABLE_WEBGPU) {\n            const location = typeof options?.preferredOutputLocation === 'string' ?\n                options.preferredOutputLocation :\n                options?.preferredOutputLocation?.[nameString] ?? 'cpu';\n            if (location !== 'cpu' && location !== 'cpu-pinned' && location !== 'gpu-buffer') {\n              throw new Error(`Not supported preferred output location: ${location}.`);\n            }\n            outputPreferredLocations.push(location);\n          }\n        }\n\n        // use IO binding only when at least one output is preffered to be on GPU.\n        let bindingState: IOBindingState|null = null;\n        if (!BUILD_DEFS.DISABLE_WEBGPU && outputPreferredLocations.some(l => l === 'gpu-buffer')) {\n          ioBindingHandle = wasm._OrtCreateBinding(sessionHandle);\n          if (ioBindingHandle === 0) {\n            checkLastError('Can\\'t create IO binding.');\n          }\n\n          bindingState = {\n            handle: ioBindingHandle,\n            outputPreferredLocations,\n            outputPreferredLocationsEncoded: outputPreferredLocations.map(l => dataLocationStringToEnum(l)),\n          };\n        }\n\n        activeSessions.set(sessionHandle, [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded, bindingState]);\n        return [sessionHandle, inputNames, outputNames];\n      } catch (e) {\n        inputNamesUTF8Encoded.forEach(buf => wasm._OrtFree(buf));\n        outputNamesUTF8Encoded.forEach(buf => wasm._OrtFree(buf));\n\n        if (ioBindingHandle !== 0) {\n          wasm._OrtReleaseBinding(ioBindingHandle);\n        }\n\n        if (sessionHandle !== 0) {\n          wasm._OrtReleaseSession(sessionHandle);\n        }\n        throw e;\n      } finally {\n        wasm._free(modelData[0]);\n        if (sessionOptionsHandle !== 0) {\n          wasm._OrtReleaseSessionOptions(sessionOptionsHandle);\n        }\n        allocs.forEach(alloc => wasm._free(alloc));\n      }\n    };\n\n\n/**\n * create an instance of InferenceSession.\n * @returns the metadata of InferenceSession. 0-value handle for failure.\n */\nexport const createSession =\n    (model: Uint8Array, options?: InferenceSession.SessionOptions): SerializableSessionMetadata => {\n      const modelData: SerializableModeldata = createSessionAllocate(model);\n      return createSessionFinalize(modelData, options);\n    };\n\nexport const releaseSession = (sessionId: number): void => {\n  const wasm = getInstance();\n  const session = activeSessions.get(sessionId);\n  if (!session) {\n    throw new Error(`cannot release session. invalid session id: ${sessionId}`);\n  }\n  const [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded, ioBindingState] = session;\n\n  if (ioBindingState) {\n    wasm._OrtReleaseBinding(ioBindingState.handle);\n  }\n\n  wasm.jsepUnregisterBuffers?.(sessionId);\n\n  inputNamesUTF8Encoded.forEach(buf => wasm._OrtFree(buf));\n  outputNamesUTF8Encoded.forEach(buf => wasm._OrtFree(buf));\n  wasm._OrtReleaseSession(sessionHandle);\n  activeSessions.delete(sessionId);\n};\n\nconst prepareInputOutputTensor =\n    (tensor: TensorMetadata|null, tensorHandles: number[], allocs: number[], sessionId: number, index: number):\n        void => {\n          if (!tensor) {\n            tensorHandles.push(0);\n            return;\n          }\n\n          const wasm = getInstance();\n\n          const dataType = tensor[0];\n          const dims = tensor[1];\n          const location = tensor[3];\n\n          let rawData: number;\n          let dataByteLength: number;\n\n          if (dataType === 'string' && location === 'gpu-buffer') {\n            throw new Error('String tensor is not supported on GPU.');\n          }\n\n          if (location === 'gpu-buffer') {\n            const gpuBuffer = tensor[2].gpuBuffer as GPUBuffer;\n            const elementSizeInBytes = getTensorElementSize(tensorDataTypeStringToEnum(dataType))!;\n            dataByteLength = dims.reduce((a, b) => a * b, 1) * elementSizeInBytes;\n            rawData = wasm.jsepRegisterBuffer(sessionId, index, gpuBuffer, dataByteLength);\n          } else {\n            const data = tensor[2];\n\n            if (Array.isArray(data)) {\n              // string tensor\n              dataByteLength = 4 * data.length;\n              rawData = wasm._malloc(dataByteLength);\n              allocs.push(rawData);\n              let dataIndex = rawData / 4;\n              for (let i = 0; i < data.length; i++) {\n                if (typeof data[i] !== 'string') {\n                  throw new TypeError(`tensor data at index ${i} is not a string`);\n                }\n                wasm.HEAPU32[dataIndex++] = allocWasmString(data[i], allocs);\n              }\n            } else {\n              dataByteLength = data.byteLength;\n              rawData = wasm._malloc(dataByteLength);\n              allocs.push(rawData);\n              wasm.HEAPU8.set(new Uint8Array(data.buffer, data.byteOffset, dataByteLength), rawData);\n            }\n          }\n\n          const stack = wasm.stackSave();\n          const dimsOffset = wasm.stackAlloc(4 * dims.length);\n          try {\n            let dimIndex = dimsOffset / 4;\n            dims.forEach(d => wasm.HEAP32[dimIndex++] = d);\n            const tensor = wasm._OrtCreateTensor(\n                tensorDataTypeStringToEnum(dataType), rawData, dataByteLength, dimsOffset, dims.length,\n                dataLocationStringToEnum(location));\n            if (tensor === 0) {\n              checkLastError(`Can't create tensor for input/output. session=${sessionId}, index=${index}.`);\n            }\n            tensorHandles.push(tensor);\n          } finally {\n            wasm.stackRestore(stack);\n          }\n        };\n\n/**\n * perform inference run\n */\nexport const run = async(\n    sessionId: number, inputIndices: number[], inputTensors: TensorMetadata[], outputIndices: number[],\n    outputTensors: Array<TensorMetadata|null>, options: InferenceSession.RunOptions): Promise<TensorMetadata[]> => {\n  const wasm = getInstance();\n  const session = activeSessions.get(sessionId);\n  if (!session) {\n    throw new Error(`cannot run inference. invalid session id: ${sessionId}`);\n  }\n  const [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded, ioBindingState] = session;\n\n  const inputCount = inputIndices.length;\n  const outputCount = outputIndices.length;\n\n  let runOptionsHandle = 0;\n  let runOptionsAllocs: number[] = [];\n\n  const inputTensorHandles: number[] = [];\n  const outputTensorHandles: number[] = [];\n  const inputOutputAllocs: number[] = [];\n\n  const beforeRunStack = wasm.stackSave();\n  const inputValuesOffset = wasm.stackAlloc(inputCount * 4);\n  const inputNamesOffset = wasm.stackAlloc(inputCount * 4);\n  const outputValuesOffset = wasm.stackAlloc(outputCount * 4);\n  const outputNamesOffset = wasm.stackAlloc(outputCount * 4);\n\n  try {\n    [runOptionsHandle, runOptionsAllocs] = setRunOptions(options);\n\n    // create input tensors\n    for (let i = 0; i < inputCount; i++) {\n      prepareInputOutputTensor(inputTensors[i], inputTensorHandles, inputOutputAllocs, sessionId, inputIndices[i]);\n    }\n\n    // create output tensors\n    for (let i = 0; i < outputCount; i++) {\n      prepareInputOutputTensor(\n          outputTensors[i], outputTensorHandles, inputOutputAllocs, sessionId, inputCount + outputIndices[i]);\n    }\n\n    let inputValuesIndex = inputValuesOffset / 4;\n    let inputNamesIndex = inputNamesOffset / 4;\n    let outputValuesIndex = outputValuesOffset / 4;\n    let outputNamesIndex = outputNamesOffset / 4;\n    for (let i = 0; i < inputCount; i++) {\n      wasm.HEAPU32[inputValuesIndex++] = inputTensorHandles[i];\n      wasm.HEAPU32[inputNamesIndex++] = inputNamesUTF8Encoded[inputIndices[i]];\n    }\n    for (let i = 0; i < outputCount; i++) {\n      wasm.HEAPU32[outputValuesIndex++] = outputTensorHandles[i];\n      wasm.HEAPU32[outputNamesIndex++] = outputNamesUTF8Encoded[outputIndices[i]];\n    }\n\n    if (!BUILD_DEFS.DISABLE_WEBGPU && ioBindingState) {\n      const {handle, outputPreferredLocations, outputPreferredLocationsEncoded} = ioBindingState;\n\n      if (inputNamesUTF8Encoded.length !== inputCount) {\n        throw new Error(`input count from feeds (${\n            inputCount}) is expected to be always equal to model's input count (${inputNamesUTF8Encoded.length}).`);\n      }\n\n      // process inputs\n      for (let i = 0; i < inputCount; i++) {\n        const index = inputIndices[i];\n        const errorCode = await wasm._OrtBindInput(handle, inputNamesUTF8Encoded[index], inputTensorHandles[i]);\n        if (errorCode !== 0) {\n          checkLastError(`Can't bind input[${i}] for session=${sessionId}.`);\n        }\n      }\n\n      // process pre-allocated outputs\n      for (let i = 0; i < outputCount; i++) {\n        const index = outputIndices[i];\n        const location = outputTensors[i]?.[3];  // undefined means output is not pre-allocated.\n\n        if (location) {\n          // output is pre-allocated. bind the tensor.\n          const errorCode = wasm._OrtBindOutput(handle, outputNamesUTF8Encoded[index], outputTensorHandles[i], 0);\n          if (errorCode !== 0) {\n            checkLastError(`Can't bind pre-allocated output[${i}] for session=${sessionId}.`);\n          }\n        } else {\n          // output is not pre-allocated. reset preferred location.\n          const errorCode =\n              wasm._OrtBindOutput(handle, outputNamesUTF8Encoded[index], 0, outputPreferredLocationsEncoded[index]);\n          if (errorCode !== 0) {\n            checkLastError(`Can't bind output[${i}] to ${outputPreferredLocations[i]} for session=${sessionId}.`);\n          }\n        }\n      }\n    }\n\n    let errorCode: number;\n\n    if (!BUILD_DEFS.DISABLE_WEBGPU && ioBindingState) {\n      errorCode = await wasm._OrtRunWithBinding(\n          sessionHandle, ioBindingState.handle, outputCount, outputValuesOffset, runOptionsHandle);\n    } else {\n      errorCode = await wasm._OrtRun(\n          sessionHandle, inputNamesOffset, inputValuesOffset, inputCount, outputNamesOffset, outputCount,\n          outputValuesOffset, runOptionsHandle);\n    }\n\n    if (errorCode !== 0) {\n      checkLastError('failed to call OrtRun().');\n    }\n\n    const output: TensorMetadata[] = [];\n\n    for (let i = 0; i < outputCount; i++) {\n      const tensor = wasm.HEAPU32[outputValuesOffset / 4 + i];\n      if (tensor === outputTensorHandles[i]) {\n        // output tensor is pre-allocated. no need to copy data.\n        output.push(outputTensors[i]!);\n        continue;\n      }\n\n      const beforeGetTensorDataStack = wasm.stackSave();\n      // stack allocate 4 pointer value\n      const tensorDataOffset = wasm.stackAlloc(4 * 4);\n\n      let keepOutputTensor = false;\n      let type: Tensor.Type|undefined, dataOffset = 0;\n      try {\n        const errorCode = wasm._OrtGetTensorData(\n            tensor, tensorDataOffset, tensorDataOffset + 4, tensorDataOffset + 8, tensorDataOffset + 12);\n        if (errorCode !== 0) {\n          checkLastError(`Can't access output tensor data on index ${i}.`);\n        }\n        let tensorDataIndex = tensorDataOffset / 4;\n        const dataType = wasm.HEAPU32[tensorDataIndex++];\n        dataOffset = wasm.HEAPU32[tensorDataIndex++];\n        const dimsOffset = wasm.HEAPU32[tensorDataIndex++];\n        const dimsLength = wasm.HEAPU32[tensorDataIndex++];\n        const dims = [];\n        for (let i = 0; i < dimsLength; i++) {\n          dims.push(wasm.HEAPU32[dimsOffset / 4 + i]);\n        }\n        wasm._OrtFree(dimsOffset);\n\n        const size = dims.reduce((a, b) => a * b, 1);\n        type = tensorDataTypeEnumToString(dataType);\n\n        const preferredLocation = ioBindingState?.outputPreferredLocations[outputIndices[i]];\n\n        if (type === 'string') {\n          if (preferredLocation === 'gpu-buffer') {\n            throw new Error('String tensor is not supported on GPU.');\n          }\n          const stringData: string[] = [];\n          let dataIndex = dataOffset / 4;\n          for (let i = 0; i < size; i++) {\n            const offset = wasm.HEAPU32[dataIndex++];\n            const maxBytesToRead = i === size - 1 ? undefined : wasm.HEAPU32[dataIndex] - offset;\n            stringData.push(wasm.UTF8ToString(offset, maxBytesToRead));\n          }\n          output.push([type, dims, stringData, 'cpu']);\n        } else {\n          // If a certain output's preferred location is GPU but the tensor is empty, we still need to create a CPU\n          // tensor for it. There is no mapping GPU buffer for an empty tensor.\n          if (preferredLocation === 'gpu-buffer' && size > 0) {\n            const gpuBuffer = wasm.jsepGetBuffer(dataOffset);\n            const elementSize = getTensorElementSize(dataType);\n            if (elementSize === undefined || !isGpuBufferSupportedType(type)) {\n              throw new Error(`Unsupported data type: ${type}`);\n            }\n\n            // do not release the tensor right now. it will be released when user calls tensor.dispose().\n            keepOutputTensor = true;\n\n            output.push([\n              type, dims, {\n                gpuBuffer,\n                download: wasm.jsepCreateDownloader(gpuBuffer, size * elementSize, type),\n                dispose: () => {\n                  wasm._OrtReleaseTensor(tensor);\n                }\n              },\n              'gpu-buffer'\n            ]);\n          } else {\n            const typedArrayConstructor = tensorTypeToTypedArrayConstructor(type);\n            const data = new typedArrayConstructor(size);\n            new Uint8Array(data.buffer, data.byteOffset, data.byteLength)\n                .set(wasm.HEAPU8.subarray(dataOffset, dataOffset + data.byteLength));\n            output.push([type, dims, data, 'cpu']);\n          }\n        }\n      } finally {\n        wasm.stackRestore(beforeGetTensorDataStack);\n        if (type === 'string' && dataOffset) {\n          wasm._free(dataOffset);\n        }\n        if (!keepOutputTensor) {\n          wasm._OrtReleaseTensor(tensor);\n        }\n      }\n    }\n\n    if (ioBindingState) {\n      wasm._OrtClearBoundOutputs(ioBindingState.handle);\n    }\n\n    return output;\n  } finally {\n    wasm.stackRestore(beforeRunStack);\n\n    inputTensorHandles.forEach(v => wasm._OrtReleaseTensor(v));\n    outputTensorHandles.forEach(v => wasm._OrtReleaseTensor(v));\n    inputOutputAllocs.forEach(p => wasm._free(p));\n\n    if (runOptionsHandle !== 0) {\n      wasm._OrtReleaseRunOptions(runOptionsHandle);\n    }\n    runOptionsAllocs.forEach(p => wasm._free(p));\n  }\n};\n\n/**\n * end profiling\n */\nexport const endProfiling = (sessionId: number): void => {\n  const wasm = getInstance();\n  const session = activeSessions.get(sessionId);\n  if (!session) {\n    throw new Error('invalid session id');\n  }\n  const sessionHandle = session[0];\n\n  // profile file name is not used yet, but it must be freed.\n  const profileFileName = wasm._OrtEndProfiling(sessionHandle);\n  if (profileFileName === 0) {\n    checkLastError('Can\\'t get an profile file name.');\n  }\n  wasm._OrtFree(profileFileName);\n};\n\nexport const extractTransferableBuffers = (tensors: readonly SerializableTensorMetadata[]): ArrayBufferLike[] => {\n  const buffers: ArrayBufferLike[] = [];\n  for (const tensor of tensors) {\n    const data = tensor[2];\n    if (!Array.isArray(data) && 'buffer' in data) {\n      buffers.push(data.buffer);\n    }\n  }\n  return buffers;\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Env} from 'onnxruntime-common';\nimport * as path from 'path';\n\nimport {OrtWasmModule} from './binding/ort-wasm';\nimport {OrtWasmThreadedModule} from './binding/ort-wasm-threaded';\n\n/* eslint-disable @typescript-eslint/no-require-imports */\nconst ortWasmFactory: EmscriptenModuleFactory<OrtWasmModule> =\n    BUILD_DEFS.DISABLE_WEBGPU ? require('./binding/ort-wasm.js') : require('./binding/ort-wasm-simd.jsep.js');\n\nconst ortWasmFactoryThreaded: EmscriptenModuleFactory<OrtWasmModule> = !BUILD_DEFS.DISABLE_WASM_THREAD ?\n    (BUILD_DEFS.DISABLE_WEBGPU ? require('./binding/ort-wasm-threaded.js') :\n                                 require('./binding/ort-wasm-simd-threaded.jsep.js')) :\n    ortWasmFactory;\n/* eslint-enable @typescript-eslint/no-require-imports */\n\nlet wasm: OrtWasmModule|undefined;\nlet initialized = false;\nlet initializing = false;\nlet aborted = false;\n\nconst isMultiThreadSupported = (): boolean => {\n  try {\n    // If 'SharedArrayBuffer' is not available, WebAssembly threads will not work.\n    if (typeof SharedArrayBuffer === 'undefined') {\n      return false;\n    }\n\n    // Test for transferability of SABs (for browsers. needed for Firefox)\n    // https://groups.google.com/forum/#!msg/mozilla.dev.platform/IHkBZlHETpA/dwsMNchWEQAJ\n    if (typeof MessageChannel !== 'undefined') {\n      new MessageChannel().port1.postMessage(new SharedArrayBuffer(1));\n    }\n\n    // Test for WebAssembly threads capability (for both browsers and Node.js)\n    // This typed array is a WebAssembly program containing threaded instructions.\n    return WebAssembly.validate(new Uint8Array([\n      0, 97, 115, 109, 1, 0,  0,  0, 1, 4, 1,  96, 0,   0,  3, 2, 1,  0, 5,\n      4, 1,  3,   1,   1, 10, 11, 1, 9, 0, 65, 0,  254, 16, 2, 0, 26, 11\n    ]));\n  } catch (e) {\n    return false;\n  }\n};\n\nconst isSimdSupported = (): boolean => {\n  try {\n    // Test for WebAssembly SIMD capability (for both browsers and Node.js)\n    // This typed array is a WebAssembly program containing SIMD instructions.\n\n    // The binary data is generated from the following code by wat2wasm:\n    //\n    // (module\n    //   (type $t0 (func))\n    //   (func $f0 (type $t0)\n    //     (drop\n    //       (i32x4.dot_i16x8_s\n    //         (i8x16.splat\n    //           (i32.const 0))\n    //         (v128.const i32x4 0x00000000 0x00000000 0x00000000 0x00000000)))))\n\n    return WebAssembly.validate(new Uint8Array([\n      0,   97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 10, 30, 1,   28,  0, 65, 0,\n      253, 15, 253, 12,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0,  0,  253, 186, 1, 26, 11\n    ]));\n  } catch (e) {\n    return false;\n  }\n};\n\nconst getWasmFileName = (useSimd: boolean, useThreads: boolean) => {\n  if (useThreads) {\n    return useSimd ? 'ort-wasm-simd-threaded.wasm' : 'ort-wasm-threaded.wasm';\n  } else {\n    return useSimd ? 'ort-wasm-simd.wasm' : 'ort-wasm.wasm';\n  }\n};\n\nexport const initializeWebAssembly = async(flags: Env.WebAssemblyFlags): Promise<void> => {\n  if (initialized) {\n    return Promise.resolve();\n  }\n  if (initializing) {\n    throw new Error('multiple calls to \\'initializeWebAssembly()\\' detected.');\n  }\n  if (aborted) {\n    throw new Error('previous call to \\'initializeWebAssembly()\\' failed.');\n  }\n\n  initializing = true;\n\n  // wasm flags are already initialized\n  const timeout = flags.initTimeout!;\n  const numThreads = flags.numThreads!;\n  const simd = flags.simd!;\n\n  const useThreads = numThreads > 1 && isMultiThreadSupported();\n  const useSimd = simd && isSimdSupported();\n\n  const wasmPaths = flags.wasmPaths;\n  const wasmPrefixOverride = typeof wasmPaths === 'string' ? wasmPaths : undefined;\n  const wasmFileName = getWasmFileName(useSimd, useThreads);\n  const wasmPathOverride = typeof wasmPaths === 'object' ? wasmPaths[wasmFileName] : undefined;\n\n  let isTimeout = false;\n\n  const tasks: Array<Promise<void>> = [];\n\n  // promise for timeout\n  if (timeout > 0) {\n    tasks.push(new Promise((resolve) => {\n      setTimeout(() => {\n        isTimeout = true;\n        resolve();\n      }, timeout);\n    }));\n  }\n\n  // promise for module initialization\n  tasks.push(new Promise((resolve, reject) => {\n    const factory = useThreads ? ortWasmFactoryThreaded : ortWasmFactory;\n    const config: Partial<OrtWasmModule> = {\n      locateFile: (fileName: string, scriptDirectory: string) => {\n        if (!BUILD_DEFS.DISABLE_WASM_THREAD && useThreads && fileName.endsWith('.worker.js') &&\n            typeof Blob !== 'undefined') {\n          return URL.createObjectURL(new Blob(\n              [\n                // This require() function is handled by webpack to load file content of the corresponding .worker.js\n                // eslint-disable-next-line @typescript-eslint/no-require-imports\n                require('./binding/ort-wasm-threaded.worker.js')\n              ],\n              {type: 'text/javascript'}));\n        }\n\n        if (fileName.endsWith('.wasm')) {\n          if (wasmPathOverride) {\n            return wasmPathOverride;\n          }\n\n          const prefix = wasmPrefixOverride ?? scriptDirectory;\n\n          if (!BUILD_DEFS.DISABLE_WEBGPU) {\n            if (wasmFileName === 'ort-wasm-simd.wasm') {\n              return prefix + 'ort-wasm-simd.jsep.wasm';\n            } else if (wasmFileName === 'ort-wasm-simd-threaded.wasm') {\n              return prefix + 'ort-wasm-simd-threaded.jsep.wasm';\n            }\n          }\n\n          return prefix + wasmFileName;\n        }\n\n        return scriptDirectory + fileName;\n      }\n    };\n\n    if (!BUILD_DEFS.DISABLE_WASM_THREAD && useThreads) {\n      if (typeof Blob === 'undefined') {\n        config.mainScriptUrlOrBlob = path.join(__dirname, 'ort-wasm-threaded.js');\n      } else {\n        const scriptSourceCode = `var ortWasmThreaded=(function(){var _scriptDir;return ${factory.toString()}})();`;\n        config.mainScriptUrlOrBlob = new Blob([scriptSourceCode], {type: 'text/javascript'});\n      }\n    }\n\n    factory(config).then(\n        // wasm module initialized successfully\n        module => {\n          initializing = false;\n          initialized = true;\n          wasm = module;\n          resolve();\n        },\n        // wasm module failed to initialize\n        (what) => {\n          initializing = false;\n          aborted = true;\n          reject(what);\n        });\n  }));\n\n  await Promise.race(tasks);\n\n  if (isTimeout) {\n    throw new Error(`WebAssembly backend initializing failed due to timeout: ${timeout}ms`);\n  }\n};\n\nexport const getInstance = (): OrtWasmModule => {\n  if (initialized && wasm) {\n    return wasm;\n  }\n\n  throw new Error('WebAssembly is not initialized yet.');\n};\n\nexport const dispose = (): void => {\n  if (initialized && !initializing && !aborted) {\n    initializing = true;\n\n    (wasm as OrtWasmThreadedModule).PThread?.terminateAllThreads();\n    wasm = undefined;\n\n    initializing = false;\n    initialized = false;\n    aborted = true;\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {getInstance} from './wasm-factory';\n\nexport const allocWasmString = (data: string, allocs: number[]): number => {\n  const wasm = getInstance();\n\n  const dataLength = wasm.lengthBytesUTF8(data) + 1;\n  const dataOffset = wasm._malloc(dataLength);\n  wasm.stringToUTF8(data, dataOffset, dataLength);\n  allocs.push(dataOffset);\n\n  return dataOffset;\n};\n\ninterface ExtraOptionsHandler {\n  (name: string, value: string): void;\n}\n\nexport const iterateExtraOptions =\n    (options: Record<string, unknown>, prefix: string, seen: WeakSet<Record<string, unknown>>,\n     handler: ExtraOptionsHandler): void => {\n      if (typeof options == 'object' && options !== null) {\n        if (seen.has(options)) {\n          throw new Error('Circular reference in options');\n        } else {\n          seen.add(options);\n        }\n      }\n\n      Object.entries(options).forEach(([key, value]) => {\n        const name = (prefix) ? prefix + key : key;\n        if (typeof value === 'object') {\n          iterateExtraOptions(value as Record<string, unknown>, name + '.', seen, handler);\n        } else if (typeof value === 'string' || typeof value === 'number') {\n          handler(name, value.toString());\n        } else if (typeof value === 'boolean') {\n          handler(name, (value) ? '1' : '0');\n        } else {\n          throw new Error(`Can't handle extra config type: ${typeof value}`);\n        }\n      });\n    };\n\n/**\n * check web assembly API's last error and throw error if any error occurred.\n * @param message a message used when an error occurred.\n */\nexport const checkLastError = (message: string): void => {\n  const wasm = getInstance();\n\n  const stack = wasm.stackSave();\n  try {\n    const paramsOffset = wasm.stackAlloc(8);\n    wasm._OrtGetLastError(paramsOffset, paramsOffset + 4);\n    const errorCode = wasm.HEAP32[paramsOffset / 4];\n    const errorMessagePointer = wasm.HEAPU32[paramsOffset / 4 + 1];\n    const errorMessage = errorMessagePointer ? wasm.UTF8ToString(errorMessagePointer) : '';\n    throw new Error(`${message} ERROR_CODE: ${errorCode}, ERROR_MESSAGE: ${errorMessage}`);\n  } finally {\n    wasm.stackRestore(stack);\n  }\n};\n","\nimport worker from \"!!../../../../node_modules/worker-loader/dist/runtime/inline.js\";\n\nexport default function Worker_fn() {\n  return worker(\"/*!\\n* ONNX Runtime Web v1.17.0\\n* Copyright (c) Microsoft Corporation. All rights reserved.\\n* Licensed under the MIT License.\\n*/\\n!function(){var e={3838:function(e,t,n){\\\"use strict\\\";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(a,o){function i(e){try{u(r.next(e))}catch(e){o(e)}}function c(e){try{u(r.throw(e))}catch(e){o(e)}}function u(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,c)}u((r=r.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var n,r,a,o,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:c(0),throw:c(1),return:c(2)},\\\"function\\\"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function c(c){return function(u){return function(c){if(n)throw new TypeError(\\\"Generator is already executing.\\\");for(;o&&(o=0,c[0]&&(i=0)),i;)try{if(n=1,r&&(a=2&c[0]?r.return:c[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,c[1])).done)return a;switch(r=0,a&&(c=[2&c[0],a.value]),c[0]){case 0:case 1:a=c;break;case 4:return i.label++,{value:c[1],done:!1};case 5:i.label++,r=c[1],c=[0];continue;case 7:c=i.ops.pop(),i.trys.pop();continue;default:if(!((a=(a=i.trys).length>0&&a[a.length-1])||6!==c[0]&&2!==c[0])){i=0;continue}if(3===c[0]&&(!a||c[1]>a[0]&&c[1]<a[3])){i.label=c[1];break}if(6===c[0]&&i.label<a[1]){i.label=a[1],a=c;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(c);break}a[2]&&i.ops.pop(),i.trys.pop();continue}c=t.call(e,i)}catch(e){c=[6,e],r=0}finally{n=a=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,u])}}},o=this&&this.__values||function(e){var t=\\\"function\\\"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&\\\"number\\\"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?\\\"Object is not iterable.\\\":\\\"Symbol.iterator is not defined.\\\")},i=this&&this.__read||function(e,t){var n=\\\"function\\\"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,a,o=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)i.push(r.value)}catch(e){a={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(a)throw a.error}}return i};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.WebGpuBackend=void 0;var c=n(4955),u=n(760),s=n(7771),l=n(8510),p=n(8305),d=function(){function e(){this.currentKernelId=null,this.commandEncoder=null,this.computePassEncoder=null,this.pendingDispatchNumber=0,this.supportTimestampQuery=!1,this.sessionExternalDataMapping=new Map}return Object.defineProperty(e.prototype,\\\"currentKernelCustomData\\\",{get:function(){if(null===this.currentKernelId)throw new Error(\\\"currentKernelCustomData(): currentKernelId is null. (should not happen)\\\");var e=this.kernelCustomData.get(this.currentKernelId);return e||(e={},this.kernelCustomData.set(this.currentKernelId,e)),e},enumerable:!1,configurable:!0}),e.prototype.initialize=function(e){return r(this,void 0,void 0,(function(){var t,n,r,o;return a(this,(function(a){switch(a.label){case 0:if(!navigator.gpu)throw new Error(\\\"WebGpuBackend: WebGPU is not available.\\\");return[4,navigator.gpu.requestAdapter()];case 1:if(!(t=a.sent()))throw new Error(\\\"WebGpuBackend: Failed to get GPU adapter.\\\");return this.env=e,n=[],r={requiredLimits:{maxComputeWorkgroupStorageSize:t.limits.maxComputeWorkgroupStorageSize,maxComputeWorkgroupsPerDimension:t.limits.maxComputeWorkgroupsPerDimension,maxStorageBufferBindingSize:t.limits.maxStorageBufferBindingSize,maxBufferSize:t.limits.maxBufferSize,maxComputeInvocationsPerWorkgroup:t.limits.maxComputeInvocationsPerWorkgroup,maxComputeWorkgroupSizeX:t.limits.maxComputeWorkgroupSizeX,maxComputeWorkgroupSizeY:t.limits.maxComputeWorkgroupSizeY,maxComputeWorkgroupSizeZ:t.limits.maxComputeWorkgroupSizeZ},requiredFeatures:n},t.features.has(\\\"timestamp-query-inside-passes\\\")&&(this.supportTimestampQuery=!0,n.push(\\\"timestamp-query-inside-passes\\\")),t.features.has(\\\"shader-f16\\\")&&n.push(\\\"shader-f16\\\"),o=this,[4,t.requestDevice(r)];case 2:return o.device=a.sent(),this.gpuDataManager=(0,s.createGpuDataManager)(this),this.programManager=new p.ProgramManager(this),this.kernels=new Map,this.kernelPersistentData=new Map,this.kernelCustomData=new Map,(0,c.configureLogger)(e.logLevel,!!e.debug),this.device.onuncapturederror=function(e){e.error instanceof GPUValidationError&&console.error(\\\"An uncaught WebGPU validation error was raised: \\\".concat(e.error.message))},this.supportTimestampQuery&&(this.profilingQuerySet=this.device.createQuerySet({type:\\\"timestamp\\\",count:2})),Object.defineProperty(this.env.webgpu,\\\"device\\\",{value:this.device}),[2]}}))}))},e.prototype.dispose=function(){},e.prototype.getCommandEncoder=function(){return this.commandEncoder||(this.commandEncoder=this.device.createCommandEncoder()),this.commandEncoder},e.prototype.getComputePassEncoder=function(){return this.computePassEncoder||(this.computePassEncoder=this.getCommandEncoder().beginComputePass()),this.computePassEncoder},e.prototype.endComputePass=function(){this.computePassEncoder&&(this.computePassEncoder.end(),this.computePassEncoder=null)},e.prototype.flush=function(){this.commandEncoder&&(this.endComputePass(),this.device.queue.submit([this.getCommandEncoder().finish()]),this.gpuDataManager.refreshPendingBuffers(),this.commandEncoder=null,this.pendingDispatchNumber=0)},e.prototype.run=function(e,t,n,r,a){if(t.length!==e.inputTypes.length)throw new Error(\\\"Input size must be equal to \\\".concat(e.inputTypes.length,\\\".\\\"));for(var o=[],i=0;i<t.length;++i){if(!(h=this.gpuDataManager.get(t[i].data)))throw new Error(\\\"no GPU data for input: \\\".concat(t[i].data));o[i]=h}var u=function(e,t){var n=t.map((function(e){return\\\"\\\".concat(e.dataType,\\\";\\\").concat(e.dims.join(\\\",\\\"))})).join(\\\"|\\\"),r=e.name;return e.cacheHint&&(r+=\\\"[\\\"+e.cacheHint+\\\"]\\\"),r+\\\":\\\"+n}(e,t),s=this.programManager.getArtifact(u),l=s?s.programInfo:\\\"function\\\"==typeof e.get?e.get():e,p=0===n.length?l.outputs.map((function(e,t){return t})):n;if(p.length!==l.outputs.length)throw new Error(\\\"Output size \\\".concat(p.length,\\\" must be equal to \\\").concat(l.outputs.length,\\\".\\\"));var d=[],f=[];for(i=0;i<l.outputs.length;++i){if(!Number.isInteger(p[i])||p[i]<-3||p[i]>=l.outputs.length)throw new Error(\\\"Invalid output index: \\\".concat(p[i]));if(-3!==p[i]){var h,g=-1===p[i],m=-2===p[i],v=g||m?a(l.outputs[i].dataType,l.outputs[i].dims):r(p[i],l.outputs[i].dataType,l.outputs[i].dims);if(!(h=this.gpuDataManager.get(v.data)))throw new Error(\\\"no GPU data for output: \\\".concat(v.data));if(g&&this.temporaryData.push(h),m){var y=this.kernelPersistentData.get(this.currentKernelId);y||(y=[],this.kernelPersistentData.set(this.currentKernelId,y)),y.push(h)}d.push(v),f.push(h)}}var b=this.programManager.normalizeDispatchGroupSize(l.dispatchGroup(t));return s||(s=this.programManager.build(l,b),this.programManager.setArtifact(u,s)),(0,c.LOG_DEBUG)(\\\"info\\\",(function(){return'[ProgramManager] run \\\"'.concat(l.name,'\\\" (key=').concat(u,\\\") with \\\").concat(b[0],\\\"x\\\").concat(b[1],\\\"x\\\").concat(b[2])})),this.programManager.run(s,t,o,f,b),d},e.prototype.upload=function(e,t){this.gpuDataManager.upload(e,t)},e.prototype.memcpy=function(e,t){this.gpuDataManager.memcpy(e,t)},e.prototype.download=function(e,t){return r(this,void 0,void 0,(function(){return a(this,(function(n){switch(n.label){case 0:return[4,this.gpuDataManager.download(e,t)];case 1:return n.sent(),[2]}}))}))},e.prototype.alloc=function(e){return this.gpuDataManager.create(e).id},e.prototype.free=function(e){return this.gpuDataManager.release(e)},e.prototype.createKernel=function(e,t,n,r){var a=l.WEBGPU_OP_RESOLVE_RULES.get(e);if(!a)throw new Error(\\\"kernel not implemented: \\\".concat(e));this.kernels.set(t,[e,r,a[0],[a[1],n]])},e.prototype.releaseKernel=function(e){var t,n,r=this.kernelPersistentData.get(e);if(r){try{for(var a=o(r),i=a.next();!i.done;i=a.next()){var c=i.value;this.gpuDataManager.release(c.id)}}catch(e){t={error:e}}finally{try{i&&!i.done&&(n=a.return)&&n.call(a)}finally{if(t)throw t.error}}this.kernelPersistentData.delete(e)}this.kernelCustomData.delete(e),this.kernels.delete(e)},e.prototype.computeKernel=function(e,t,n){var r,a,u=this.kernels.get(e);if(!u)throw new Error(\\\"kernel not created: \\\".concat(e));var s=i(u,4),l=s[0],p=s[1],d=s[2],f=s[3];if(null!==this.currentKernelId)throw new Error('kernel \\\"['.concat(l,\\\"] \\\").concat(p,'\\\" is not allowed to be called recursively'));this.currentKernelId=e,f[0]&&(f[1]=f[0](f[1]),f[0]=void 0),(0,c.LOG_DEBUG)(\\\"info\\\",(function(){return'[WebGPU] Start to run kernel \\\"['.concat(l,\\\"] \\\").concat(p,'\\\"...')}));var h=this.env.debug;this.temporaryData=[];try{return h&&this.device.pushErrorScope(\\\"validation\\\"),d(t,f[1]),0}catch(e){return n.push(Promise.resolve('[WebGPU] Kernel \\\"['.concat(l,\\\"] \\\").concat(p,'\\\" failed. ').concat(e))),1}finally{h&&n.push(this.device.popErrorScope().then((function(e){return e?'GPU validation error for kernel \\\"['.concat(l,\\\"] \\\").concat(p,'\\\": ').concat(e.message):null})));try{for(var g=o(this.temporaryData),m=g.next();!m.done;m=g.next()){var v=m.value;this.gpuDataManager.release(v.id)}}catch(e){r={error:e}}finally{try{m&&!m.done&&(a=g.return)&&a.call(g)}finally{if(r)throw r.error}}this.temporaryData=[],this.currentKernelId=null}},e.prototype.registerBuffer=function(e,t,n,r){var a=this.sessionExternalDataMapping.get(e);a||(a=new Map,this.sessionExternalDataMapping.set(e,a));var o=a.get(t),i=this.gpuDataManager.registerExternalBuffer(n,r,null==o?void 0:o[1]);return a.set(t,[i,n]),i},e.prototype.unregisterBuffers=function(e){var t=this,n=this.sessionExternalDataMapping.get(e);n&&(n.forEach((function(e){return t.gpuDataManager.unregisterExternalBuffer(e[1])})),this.sessionExternalDataMapping.delete(e))},e.prototype.getBuffer=function(e){var t=this.gpuDataManager.get(e);if(!t)throw new Error(\\\"no GPU data for buffer: \\\".concat(e));return t.buffer},e.prototype.createDownloader=function(e,t,n){var o=this;return function(){return r(o,void 0,void 0,(function(){var r;return a(this,(function(a){switch(a.label){case 0:return[4,(0,s.downloadGpuData)(this,e,t)];case 1:return r=a.sent(),[2,(0,u.createView)(r.buffer,n)]}}))}))}},e}();t.WebGpuBackend=d},7675:function(e,t,n){\\\"use strict\\\";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(a,o){function i(e){try{u(r.next(e))}catch(e){o(e)}}function c(e){try{u(r.throw(e))}catch(e){o(e)}}function u(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,c)}u((r=r.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var n,r,a,o,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:c(0),throw:c(1),return:c(2)},\\\"function\\\"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function c(c){return function(u){return function(c){if(n)throw new TypeError(\\\"Generator is already executing.\\\");for(;o&&(o=0,c[0]&&(i=0)),i;)try{if(n=1,r&&(a=2&c[0]?r.return:c[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,c[1])).done)return a;switch(r=0,a&&(c=[2&c[0],a.value]),c[0]){case 0:case 1:a=c;break;case 4:return i.label++,{value:c[1],done:!1};case 5:i.label++,r=c[1],c=[0];continue;case 7:c=i.ops.pop(),i.trys.pop();continue;default:if(!((a=(a=i.trys).length>0&&a[a.length-1])||6!==c[0]&&2!==c[0])){i=0;continue}if(3===c[0]&&(!a||c[1]>a[0]&&c[1]<a[3])){i.label=c[1];break}if(6===c[0]&&i.label<a[1]){i.label=a[1],a=c;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(c);break}a[2]&&i.ops.pop(),i.trys.pop();continue}c=t.call(e,i)}catch(e){c=[6,e],r=0}finally{n=a=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,u])}}};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.init=void 0;var o=n(7917),i=n(3838),c=n(4955),u=n(6952),s=function(){function e(e,t,n,r){this.module=e,this.dataType=t,this.data=n,this.dims=r}return e.prototype.getFloat32Array=function(){if(1!==this.dataType)throw new Error(\\\"Invalid data type\\\");var e=u.ShapeUtil.size(this.dims);return 0===e?new Float32Array:new Float32Array(this.module.HEAP8.buffer,this.data,e)},e.prototype.getBigInt64Array=function(){if(7!==this.dataType)throw new Error(\\\"Invalid data type\\\");var e=u.ShapeUtil.size(this.dims);return 0===e?new BigInt64Array:new BigInt64Array(this.module.HEAP8.buffer,this.data,e)},e.prototype.getInt32Array=function(){if(6!==this.dataType)throw new Error(\\\"Invalid data type\\\");var e=u.ShapeUtil.size(this.dims);return 0===e?new Int32Array:new Int32Array(this.module.HEAP8.buffer,this.data,e)},e.prototype.reshape=function(t){if(u.ShapeUtil.size(t)!==u.ShapeUtil.size(this.dims))throw new Error(\\\"Invalid new shape\\\");return new e(this.module,this.dataType,this.data,t)},e}(),l=function(){function e(e,t,n){this.module=e,this.backend=t,this.customDataOffset=0,this.customDataSize=0;var r=e.HEAPU32,a=n>>2;this.opKernelContext=r[a++];var o=r[a++];this.outputCount=r[a++],this.customDataOffset=r[a++],this.customDataSize=r[a++];for(var i=[],c=0;c<o;c++){for(var u=r[a++],l=r[a++],p=r[a++],d=[],f=0;f<p;f++)d.push(r[a++]);i.push(new s(e,u,l,d))}this.inputs=i}return Object.defineProperty(e.prototype,\\\"kernelCustomData\\\",{get:function(){return this.backend.currentKernelCustomData},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,\\\"customDataBuffer\\\",{get:function(){return this.module.HEAPU8.subarray(this.customDataOffset,this.customDataOffset+this.customDataSize)},enumerable:!1,configurable:!0}),e.prototype.compute=function(e,t){var n,r,a,i=this,c=null!==(r=null===(n=null==t?void 0:t.inputs)||void 0===n?void 0:n.map((function(e){return\\\"number\\\"==typeof e?i.inputs[e]:e})))&&void 0!==r?r:this.inputs,l=null!==(a=null==t?void 0:t.outputs)&&void 0!==a?a:[];return this.backend.run(e,c,l,(function(e,t,n){return new s(i.module,t,i.output(e,n),n)}),(function(e,t){var n=(0,o.getTensorElementSize)(e);if(!n)throw new Error(\\\"Unsupported data type: \\\".concat(e));var r=n*u.ShapeUtil.size(t);return new s(i.module,e,i.backend.gpuDataManager.create(r).id,t)}))},e.prototype.output=function(e,t){var n=this.module.stackSave();try{var r=this.module.stackAlloc(4*(1+t.length)),a=r>>2;this.module.HEAPU32[a++]=t.length;for(var o=0;o<t.length;o++)this.module.HEAPU32[a++]=t[o];return this.module._JsepOutput(this.opKernelContext,e,r)}catch(n){throw new Error(\\\"Failed to generate kernel's output[\\\".concat(e,\\\"] with dims [\\\").concat(t,\\\"]. \\\")+\\\"If you are running with pre-allocated output, please make sure the output type/dims are correct. \\\"+\\\"Error: \\\".concat(n))}finally{this.module.stackRestore(n)}},e}();t.init=function(e,t){return r(void 0,void 0,void 0,(function(){var n,o;return a(this,(function(u){switch(u.label){case 0:if(!(n=e.jsepInit)||!navigator.gpu)return[3,2];if(!t.wasm.simd)throw new Error(\\\"Not supported for WebGPU=ON and SIMD=OFF. Please set `env.wasm.simd` to true when using WebGPU EP\\\");return[4,(o=new i.WebGpuBackend).initialize(t)];case 1:u.sent(),n(o,(function(e){return o.alloc(e)}),(function(e){return o.free(e)}),(function(t,n,r,a){if(void 0===a&&(a=!1),a)(0,c.LOG_DEBUG)(\\\"verbose\\\",(function(){return\\\"[WebGPU] jsepCopyGpuToGpu: src=\\\".concat(t,\\\", dst=\\\").concat(n,\\\", size=\\\").concat(r)})),o.memcpy(t,n);else{(0,c.LOG_DEBUG)(\\\"verbose\\\",(function(){return\\\"[WebGPU] jsepCopyCpuToGpu: dataOffset=\\\".concat(t,\\\", gpuDataId=\\\").concat(n,\\\", size=\\\").concat(r)}));var i=e.HEAPU8.subarray(t,t+r);o.upload(n,i)}}),(function(t,n,i){return r(void 0,void 0,void 0,(function(){return a(this,(function(r){switch(r.label){case 0:return(0,c.LOG_DEBUG)(\\\"verbose\\\",(function(){return\\\"[WebGPU] jsepCopyGpuToCpu: gpuDataId=\\\".concat(t,\\\", dataOffset=\\\").concat(n,\\\", size=\\\").concat(i)})),[4,o.download(t,(function(){return e.HEAPU8.subarray(n,n+i)}))];case 1:return r.sent(),[2]}}))}))}),(function(n,r,a){return o.createKernel(n,r,a,t.debug||\\\"default\\\"===t.webgpu.profilingMode?e.UTF8ToString(e._JsepGetNodeName(r)):\\\"\\\".concat(r))}),(function(e){return o.releaseKernel(e)}),(function(t,n,r,a){(0,c.LOG_DEBUG)(\\\"verbose\\\",(function(){return\\\"[WebGPU] jsepRun: sessionHandle=\\\".concat(r,\\\", kernel=\\\").concat(t,\\\", contextDataOffset=\\\").concat(n)}));var i=new l(e,o,n);return o.computeKernel(t,i,a)})),u.label=2;case 2:return[2]}}))}))}},4955:function(e,t,n){\\\"use strict\\\";var r=this&&this.__read||function(e,t){var n=\\\"function\\\"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,a,o=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)i.push(r.value)}catch(e){a={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(a)throw a.error}}return i},a=this&&this.__spreadArray||function(e,t,n){if(n||2===arguments.length)for(var r,a=0,o=t.length;a<o;a++)!r&&a in t||(r||(r=Array.prototype.slice.call(t,0,a)),r[a]=t[a]);return e.concat(r||Array.prototype.slice.call(t))};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.LOG_DEBUG=t.LOG=t.configureLogger=void 0;var o,i,c=n(7917),u=[\\\"V\\\",\\\"I\\\",\\\"W\\\",\\\"E\\\",\\\"F\\\"];t.configureLogger=function(e,t){o=e,i=t},t.LOG=function(e,t){var n,r,a=(0,c.logLevelStringToEnum)(e);a>=(0,c.logLevelStringToEnum)(o)&&(n=a,r=\\\"function\\\"==typeof t?t():t,console.log(\\\"[\\\".concat(u[n],\\\",\\\").concat((new Date).toISOString(),\\\"]\\\").concat(r)))},t.LOG_DEBUG=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];i&&t.LOG.apply(void 0,a([],r(e),!1))}},760:function(e,t,n){\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.createView=void 0;var r=n(7917);t.createView=function(e,t){return new((0,r.tensorTypeToTypedArrayConstructor)(t))(e)}},6952:function(e,t){\\\"use strict\\\";var n=this&&this.__read||function(e,t){var n=\\\"function\\\"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,a,o=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)i.push(r.value)}catch(e){a={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(a)throw a.error}}return i};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.MAX_CLIP=t.MIN_CLIP=t.GemmUtil=t.PoolConvUtil=t.ShapeUtil=t.BroadcastUtil=t.MatMulUtil=void 0;var r=function(){function e(){}return e.calcMatMulShape=function(e,t){return e[1]!==t[0]?void 0:[e[0],t[1]]},e}();t.MatMulUtil=r;var a=function(){function e(){}return e.calcShape=function(e,t,a){var o;void 0===a&&(a=!1);var i=e.length,c=t.length;if(0===i)return t;if(0===c)return e;var u=Math.max(e.length,t.length),s=new Array(u);if(a){if(i<2||c<2)return;var l=r.calcMatMulShape([e[i-2],e[i-1]],[t[c-2],t[c-1]]);if(void 0===l)return;o=n(l,2),s[u-2]=o[0],s[u-1]=o[1]}for(var p=a?3:1;p<=u;p++){var d=i-p<0?1:e[i-p],f=c-p<0?1:t[c-p];if(d!==f&&d>1&&f>1)return;s[u-p]=Math.max(d,f)}return s},e.isValidBroadcast=function(e,t){var n=e.length,r=t.length;if(n>r)return!1;for(var a=1;a<=n;a++)if(1!==e[n-a]&&e[n-a]!==t[r-a])return!1;return!0},e}();t.BroadcastUtil=a;var o=function(){function e(){}return e.size=function(t){return e.getSizeFromDimensionRange(t,0,t.length)},e.sizeFromDimension=function(t,n){if(n<0||n>t.length)throw new Error(\\\"invalid dimension of \\\".concat(n,\\\" for sizeFromDimension as Tensor has \\\").concat(t.length,\\\" dimensions.\\\"));return e.getSizeFromDimensionRange(t,n,t.length)},e.sizeToDimension=function(t,n){if(n<0||n>t.length)throw new Error(\\\"invalid dimension of \\\".concat(n,\\\" for sizeToDimension as Tensor has \\\").concat(t.length,\\\" dimensions.\\\"));return e.getSizeFromDimensionRange(t,0,n)},e.getSizeFromDimensionRange=function(e,t,n){for(var r=1,a=t;a<n;a++){if(e[a]<0)throw new Error(\\\"cannot get valid size from specified dimension range. Most likely the range contains negative values in them.\\\");r*=e[a]}return r},e.computeStrides=function(e){var t=e.length;if(0===t)return[];if(1===t)return[1];var n=new Array(t);n[t-1]=1,n[t-2]=e[t-1];for(var r=t-3;r>=0;--r)n[r]=n[r+1]*e[r+1];return n},e.normalizeAxis=function(e,t){if(e<-t&&e>=t)throw new Error(\\\"unsupported axis for this operation.\\\");return e<0?e+t:e},e.normalizeAxes=function(e,t){var n=this;return e.map((function(r){return n.normalizeAxis(r,null!=t?t:e.length)}))},e.sortBasedOnPerm=function(e,t){return t?t.map((function(t){return e[t]})):e.slice().reverse()},e.padShape=function(e,t){var n=e.length;return e.map((function(e,r){return e+t[r]+t[r+n]}))},e.areEqual=function(e,t){return e.length===t.length&&e.every((function(e,n){return e===t[n]}))},e}();t.ShapeUtil=o;var i=function(){function e(){}return e.adjustPoolAttributes=function(e,t,n,r,a,o){if(!e&&n.length!==t.length-2)throw new Error(\\\"length of specified kernel shapes should be 2 less than length of input dimensions\\\");if(e)for(var i=0;i<t.length-2;i++)i>=n.length?n.push(t[i+2]):n[i]=t[i+2];for(i=0;i<n.length;i++)if(i<r.length){if(r[i]<0)throw new Error(\\\"strides should be greater than or equal to 1\\\")}else r.push(1);for(i=0;i<n.length;i++)if(i<a.length){if(a[i]<0)throw new Error(\\\"dilations should be greater than or equal to 1\\\")}else a.push(1);for(i=0;i<2*n.length;i++)if(i<o.length){if(o[i]<0)throw new Error(\\\"pad should be greater than or equal to 1\\\")}else o.push(0);for(i=0;i<n.length;i++){if(n[i]<=0)throw new Error(\\\"kernel shapes need to be greater than 0\\\");if(o[i]>=n[i]||o[i+n.length]>=n[i])throw new Error(\\\"pads should be smaller than kernel\\\")}},e.adjustPadsBasedOnAutoPad=function(t,n,r,a,o,i,c){if(c){if(o.length!==2*(t.length-2))throw new Error(\\\"length of pads should be twice the length of data dimensions\\\");if(n.length!==t.length-2)throw new Error(\\\"length of strides should be the length of data dimensions\\\");if(a.length!==t.length-2)throw new Error(\\\"length of kernel shapes should be the length of data dimensions\\\");for(var u=0;u<t.length-2;u++)e.adjustPadAndReturnShape(t[u+(i?1:2)],n[u],r[u],a[u],o,u,u+t.length-2,c)}},e.computePoolOutputShape=function(t,n,r,a,o,i,c){if(n.length<=0)throw new Error(\\\"input shape must be of size greater than 0\\\");var u=[n[0],n[1]];return e.computeShapeHelper(t,n,u,r,a,o,i,c),u},e.computeConvOutputShape=function(t,n,r,a,o,i,c){if(t.length<=0||n.length<=0)throw new Error(\\\"invalid input tensor dims or invalid filter tensor dims\\\");var u=[t[0],n[0]];return e.computeShapeHelper(!1,t,u,r,a,o,i,c),u},e.computeShapeHelper=function(t,n,r,a,o,i,c,u){if(t)for(var s=0;s<n.length-2;s++)r.push(1);else for(s=0;s<n.length-2;s++)r.push(e.adjustPadAndReturnShape(n[s+2],a[s],o[s],i[s],c,s,s+n.length-2,u))},e.adjustPadAndReturnShape=function(e,t,n,r,a,o,i,c){var u=n*(r-1)+1;if(!c||\\\"NOTSET\\\"===c)return Math.floor((e+a[o]+a[i]-u)/t+1);switch(c){case\\\"VALID\\\":return a[o]=0,a[i]=0,Math.floor((e-u)/t+1);case\\\"SAME_LOWER\\\":case\\\"SAME_UPPER\\\":if(1!==n)throw new Error(\\\"Dilation not supported for SAME_UPPER or SAME_LOWER\\\");var s=((e+t-1)/t-1)*t+r-e;return a[o]=\\\"SAME_LOWER\\\"===c?Math.floor((s+1)/2):Math.floor(s/2),a[i]=s-a[o],Math.floor((e+s-r)/t+1);default:throw new Error(\\\"Unsupported AutoPad type\\\")}},e}();t.PoolConvUtil=i;var c=function(){function e(){}return e.getShapeOfGemmResult=function(e,t,n,r,o){if(2!==e.length||2!==n.length)throw new Error(\\\"shape need to be of size 2\\\");var i,c,u;t?(i=e[1],c=e[0]):(i=e[0],c=e[1]);var s=-1;if(r?(u=n[0],s=1):(u=n[1],s=0),n[s]!==c)throw new Error(\\\"dimension mismatch\\\");if(i<=0||u<=0||c<=0)throw new Error(\\\"invalid shape specified\\\");if(o&&!a.isValidBroadcast(o,[i,u]))throw new Error(\\\"gemm: invalid bias shape for broadcast\\\");return[i,u,c]},e}();t.GemmUtil=c,t.MIN_CLIP=-34028234663852886e22,t.MAX_CLIP=34028234663852886e22},387:function(e,t){\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.createAttributeWithCacheKey=void 0;var n=function(){function e(e){Object.assign(this,e)}return Object.defineProperty(e.prototype,\\\"cacheKey\\\",{get:function(){var e=this;return this._cacheKey||(this._cacheKey=Object.getOwnPropertyNames(this).sort().map((function(t){return\\\"\\\".concat(e[t])})).join(\\\";\\\")),this._cacheKey},enumerable:!1,configurable:!0}),e}();t.createAttributeWithCacheKey=function(e){return new n(e)}},7771:function(e,t,n){\\\"use strict\\\";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(a,o){function i(e){try{u(r.next(e))}catch(e){o(e)}}function c(e){try{u(r.throw(e))}catch(e){o(e)}}function u(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,c)}u((r=r.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var n,r,a,o,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:c(0),throw:c(1),return:c(2)},\\\"function\\\"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function c(c){return function(u){return function(c){if(n)throw new TypeError(\\\"Generator is already executing.\\\");for(;o&&(o=0,c[0]&&(i=0)),i;)try{if(n=1,r&&(a=2&c[0]?r.return:c[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,c[1])).done)return a;switch(r=0,a&&(c=[2&c[0],a.value]),c[0]){case 0:case 1:a=c;break;case 4:return i.label++,{value:c[1],done:!1};case 5:i.label++,r=c[1],c=[0];continue;case 7:c=i.ops.pop(),i.trys.pop();continue;default:if(!((a=(a=i.trys).length>0&&a[a.length-1])||6!==c[0]&&2!==c[0])){i=0;continue}if(3===c[0]&&(!a||c[1]>a[0]&&c[1]<a[3])){i.label=c[1];break}if(6===c[0]&&i.label<a[1]){i.label=a[1],a=c;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(c);break}a[2]&&i.ops.pop(),i.trys.pop();continue}c=t.call(e,i)}catch(e){c=[6,e],r=0}finally{n=a=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,u])}}},o=this&&this.__values||function(e){var t=\\\"function\\\"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&\\\"number\\\"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?\\\"Object is not iterable.\\\":\\\"Symbol.iterator is not defined.\\\")},i=this&&this.__read||function(e,t){var n=\\\"function\\\"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,a,o=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)i.push(r.value)}catch(e){a={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(a)throw a.error}}return i},c=this&&this.__spreadArray||function(e,t,n){if(n||2===arguments.length)for(var r,a=0,o=t.length;a<o;a++)!r&&a in t||(r||(r=Array.prototype.slice.call(t,0,a)),r[a]=t[a]);return e.concat(r||Array.prototype.slice.call(t))};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.createGpuDataManager=t.downloadGpuData=void 0;var u=n(4955),s=n(1163),l=function(e){return 16*Math.ceil(e/16)},p=1,d=function(){return p++};t.downloadGpuData=function(e,t,n,o){return r(void 0,void 0,void 0,(function(){var r,i,c,u,s;return a(this,(function(a){switch(a.label){case 0:r=l(n),i=e.device.createBuffer({size:r,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ}),a.label=1;case 1:return a.trys.push([1,,3,4]),c=e.getCommandEncoder(),e.endComputePass(),c.copyBufferToBuffer(t,0,i,0,r),e.flush(),[4,i.mapAsync(GPUMapMode.READ)];case 2:return a.sent(),u=i.getMappedRange(),o?((s=o()).set(new Uint8Array(u,0,n)),[2,s]):[2,new Uint8Array(u.slice(0,n))];case 3:return i.destroy(),[7];case 4:return[2]}}))}))};var f=function(){function e(e){this.backend=e,this.storageCache=new Map,this.freeBuffers=new Map,this.buffersForUploadingPending=[],this.buffersPending=[],this.externalBuffers=new Map}return e.prototype.upload=function(e,t){var n=t.buffer,r=t.byteOffset,a=t.byteLength,o=l(a),i=this.storageCache.get(e);if(!i)throw new Error(\\\"gpu data for uploading does not exist\\\");if(i.originalSize!==a)throw new Error(\\\"inconsistent data size. gpu data size=\\\".concat(i.originalSize,\\\", data size=\\\").concat(a));var c=this.backend.device.createBuffer({mappedAtCreation:!0,size:o,usage:GPUBufferUsage.MAP_WRITE|GPUBufferUsage.COPY_SRC}),s=c.getMappedRange();new Uint8Array(s).set(new Uint8Array(n,r,a)),c.unmap();var p=this.backend.getCommandEncoder();this.backend.endComputePass(),p.copyBufferToBuffer(c,0,i.gpuData.buffer,0,o),(0,u.LOG_DEBUG)(\\\"verbose\\\",(function(){return\\\"[WebGPU] GpuDataManager.upload(id=\\\".concat(e,\\\")\\\")})),this.buffersForUploadingPending.push(c)},e.prototype.memcpy=function(e,t){var n=this.storageCache.get(e);if(!n)throw new Error(\\\"source gpu data for memcpy does not exist\\\");var r=this.storageCache.get(t);if(!r)throw new Error(\\\"destination gpu data for memcpy does not exist\\\");if(n.originalSize!==r.originalSize)throw new Error(\\\"inconsistent source and destination gpu data size\\\");var a=l(n.originalSize),o=this.backend.getCommandEncoder();this.backend.endComputePass(),o.copyBufferToBuffer(n.gpuData.buffer,0,r.gpuData.buffer,0,a)},e.prototype.registerExternalBuffer=function(e,t,n){var r;if(n){if(void 0===(r=this.externalBuffers.get(n)))throw new Error(\\\"previous buffer is not registered\\\");if(e===n)return(0,u.LOG_DEBUG)(\\\"verbose\\\",(function(){return\\\"[WebGPU] GpuDataManager.registerExternalBuffer(size=\\\".concat(t,\\\") => id=\\\").concat(r,\\\", buffer is the same, skip.\\\")})),r;this.externalBuffers.delete(n)}else r=d();return this.storageCache.set(r,{gpuData:{id:r,type:s.GpuDataType.default,buffer:e},originalSize:t}),this.externalBuffers.set(e,r),(0,u.LOG_DEBUG)(\\\"verbose\\\",(function(){return\\\"[WebGPU] GpuDataManager.registerExternalBuffer(size=\\\".concat(t,\\\") => id=\\\").concat(r,\\\", registered.\\\")})),r},e.prototype.unregisterExternalBuffer=function(e){var t=this.externalBuffers.get(e);void 0!==t&&(this.storageCache.delete(t),this.externalBuffers.delete(e),(0,u.LOG_DEBUG)(\\\"verbose\\\",(function(){return\\\"[WebGPU] GpuDataManager.unregisterExternalBuffer() => id=\\\".concat(t)})))},e.prototype.create=function(e,t){void 0===t&&(t=GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST);var n,r=l(e);if((t&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE){var a=this.freeBuffers.get(r);a||(a=[],this.freeBuffers.set(r,a)),n=a.length>0?a.pop():this.backend.device.createBuffer({size:r,usage:t})}else n=this.backend.device.createBuffer({size:r,usage:t});var o={id:d(),type:s.GpuDataType.default,buffer:n};return this.storageCache.set(o.id,{gpuData:o,originalSize:e}),(0,u.LOG_DEBUG)(\\\"verbose\\\",(function(){return\\\"[WebGPU] GpuDataManager.create(size=\\\".concat(e,\\\") => id=\\\").concat(o.id)})),o},e.prototype.get=function(e){var t;return null===(t=this.storageCache.get(e))||void 0===t?void 0:t.gpuData},e.prototype.release=function(e){var t=this.storageCache.get(e);if(!t)throw new Error(\\\"releasing data does not exist\\\");return(0,u.LOG_DEBUG)(\\\"verbose\\\",(function(){return\\\"[WebGPU] GpuDataManager.release(id=\\\".concat(e,\\\"), gpuDataId=\\\").concat(t.gpuData.id)})),this.storageCache.delete(e),this.buffersPending.push(t.gpuData.buffer),t.originalSize},e.prototype.download=function(e,n){return r(this,void 0,void 0,(function(){var r;return a(this,(function(a){switch(a.label){case 0:if(!(r=this.storageCache.get(e)))throw new Error(\\\"data does not exist\\\");return[4,(0,t.downloadGpuData)(this.backend,r.gpuData.buffer,r.originalSize,n)];case 1:return a.sent(),[2]}}))}))},e.prototype.refreshPendingBuffers=function(){var e,t,n,r;try{for(var a=o(this.buffersForUploadingPending),i=a.next();!i.done;i=a.next())(s=i.value).destroy()}catch(t){e={error:t}}finally{try{i&&!i.done&&(t=a.return)&&t.call(a)}finally{if(e)throw e.error}}this.buffersForUploadingPending=[];try{for(var c=o(this.buffersPending),u=c.next();!u.done;u=c.next()){var s;((s=u.value).usage&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE?this.freeBuffers.get(s.size).push(s):s.destroy()}}catch(e){n={error:e}}finally{try{u&&!u.done&&(r=c.return)&&r.call(c)}finally{if(n)throw n.error}}this.buffersPending=[]},e.prototype.dispose=function(){this.freeBuffers.forEach((function(e){e.forEach((function(e){e.destroy()}))})),this.storageCache.forEach((function(e){e.gpuData.buffer.destroy()})),this.storageCache=new Map,this.freeBuffers=new Map},e}();t.createGpuDataManager=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return new(f.bind.apply(f,c([void 0],i(e),!1)))}},8510:function(e,t,n){\\\"use strict\\\";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var a=Object.getOwnPropertyDescriptor(t,n);a&&!(\\\"get\\\"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,a)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,\\\"default\\\",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)\\\"default\\\"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return a(t,e),t};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.WEBGPU_OP_RESOLVE_RULES=void 0;var i=n(1868),c=n(1062),u=n(2919),s=o(n(504)),l=n(513),p=n(9770),d=n(7640),f=n(2771),h=n(8856),g=n(8405),m=n(9218),v=n(4271),y=n(1798),b=n(6145),w=n(1522),S=n(3053),_=o(n(5262)),x=n(32),T=n(6031),O=n(4566),I=n(8906),A=n(5101),E=n(6198),C=n(2067),P=n(8699),M=n(2625),D=o(n(9302)),R=n(8307);t.WEBGPU_OP_RESOLVE_RULES=new Map([[\\\"Abs\\\",[D.abs]],[\\\"Acos\\\",[D.acos]],[\\\"Acosh\\\",[D.acosh]],[\\\"Add\\\",[s.add]],[\\\"ArgMax\\\",[i.argMax,i.parseArgMinMaxAttributes]],[\\\"ArgMin\\\",[i.argMin,i.parseArgMinMaxAttributes]],[\\\"Asin\\\",[D.asin]],[\\\"Asinh\\\",[D.asinh]],[\\\"Atan\\\",[D.atan]],[\\\"Atanh\\\",[D.atanh]],[\\\"AveragePool\\\",[_.averagePool,_.parseAveragePoolAttributes]],[\\\"BiasAdd\\\",[c.biasAdd]],[\\\"BiasSplitGelu\\\",[u.biasSplitGelu]],[\\\"Cast\\\",[D.cast,D.parseCastAttributes]],[\\\"Ceil\\\",[D.ceil]],[\\\"ClipV10\\\",[D.clipV10]],[\\\"Clip\\\",[D.clip]],[\\\"Concat\\\",[l.concat,l.parseConcatAttributes]],[\\\"Conv\\\",[p.conv,p.parseConvAttributes]],[\\\"ConvTranspose\\\",[d.convTranspose,d.parseConvTransposeAttributes]],[\\\"Cos\\\",[D.cos]],[\\\"Cosh\\\",[D.cosh]],[\\\"Div\\\",[s.div]],[\\\"Einsum\\\",[f.einsum,f.parseEinsumAttributes]],[\\\"Elu\\\",[D.elu,D.parseAlphaAttributes]],[\\\"Equal\\\",[s.equal]],[\\\"Erf\\\",[D.erf]],[\\\"Exp\\\",[D.exp]],[\\\"Expand\\\",[h.expand]],[\\\"Floor\\\",[D.floor]],[\\\"Gather\\\",[g.gather,g.parseGatherAttributes]],[\\\"GatherElements\\\",[m.gatherElements,m.parseGatherElementsAttributes]],[\\\"Gelu\\\",[D.gelu]],[\\\"Gemm\\\",[v.gemm,v.parseGemmAttributes]],[\\\"GlobalAveragePool\\\",[_.globalAveragePool,_.parseGlobalAveragePoolAttributes]],[\\\"GlobalMaxPool\\\",[_.globalMaxPool,_.parseGlobalMaxPoolAttributes]],[\\\"Greater\\\",[s.greater]],[\\\"GreaterOrEqual\\\",[s.greaterOrEqual]],[\\\"InstanceNormalization\\\",[y.instanceNorm,y.parseInstanceNormAttributes]],[\\\"LayerNormalization\\\",[b.layerNorm,b.parseLayerNormAttributes]],[\\\"LeakyRelu\\\",[D.leakyRelu,D.parseAlphaAttributes]],[\\\"Less\\\",[s.less]],[\\\"LessOrEqual\\\",[s.lessOrEqual]],[\\\"Log\\\",[D.log]],[\\\"MatMul\\\",[w.matMul]],[\\\"MaxPool\\\",[_.maxPool,_.parseMaxPoolAttributes]],[\\\"Mul\\\",[s.mul]],[\\\"Neg\\\",[D.neg]],[\\\"Not\\\",[D.not]],[\\\"Pad\\\",[S.pad,S.parsePadAttributes]],[\\\"Pow\\\",[s.pow]],[\\\"Range\\\",[x.range]],[\\\"Reciprocal\\\",[D.reciprocal]],[\\\"ReduceMin\\\",[T.reduceMin,T.parseReduceAttributes]],[\\\"ReduceMean\\\",[T.reduceMean,T.parseReduceAttributes]],[\\\"ReduceMax\\\",[T.reduceMax,T.parseReduceAttributes]],[\\\"ReduceSum\\\",[T.reduceSum,T.parseReduceAttributes]],[\\\"ReduceProd\\\",[T.reduceProd,T.parseReduceAttributes]],[\\\"ReduceL1\\\",[T.reduceL1,T.parseReduceAttributes]],[\\\"ReduceL2\\\",[T.reduceL2,T.parseReduceAttributes]],[\\\"ReduceLogSum\\\",[T.reduceLogSum,T.parseReduceAttributes]],[\\\"ReduceLogSumExp\\\",[T.reduceLogSumExp,T.parseReduceAttributes]],[\\\"ReduceSumSquare\\\",[T.reduceSumSquare,T.parseReduceAttributes]],[\\\"Relu\\\",[D.relu]],[\\\"Resize\\\",[O.resize,O.parseResizeAttributes]],[\\\"Sigmoid\\\",[D.sigmoid]],[\\\"Sin\\\",[D.sin]],[\\\"Sinh\\\",[D.sinh]],[\\\"Slice\\\",[A.slice,A.parseSliceAttributes]],[\\\"SkipLayerNormalization\\\",[I.skipLayerNorm,I.parseSkipLayerNormAttributes]],[\\\"Split\\\",[C.split,C.parseSplitAttributes]],[\\\"Sqrt\\\",[D.sqrt]],[\\\"Softmax\\\",[E.softmax,E.parseSoftmaxAttributes]],[\\\"Sub\\\",[s.sub]],[\\\"Tan\\\",[D.tan]],[\\\"Tanh\\\",[D.tanh]],[\\\"ThresholdedRelu\\\",[D.thresholdedRelu,D.parseAlphaAttributes]],[\\\"Tile\\\",[P.tile]],[\\\"Transpose\\\",[M.transpose,M.parseTransposeAttributes]],[\\\"Where\\\",[R.where]]])},1427:function(e,t){\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.biasActivationSnippet=t.activationFnSnippet=t.typeSnippet=void 0,t.typeSnippet=function(e,t){switch(e){case 1:return t;case 2:return\\\"vec2<\\\".concat(t,\\\">\\\");case 3:return\\\"vec3<\\\".concat(t,\\\">\\\");case 4:return\\\"vec4<\\\".concat(t,\\\">\\\");default:throw new Error(\\\"\\\".concat(e,\\\"-component is not supported.\\\"))}},t.activationFnSnippet=function(e,t,n,r){return void 0===t&&(t=!1),void 0===n&&(n=!1),void 0===r&&(r=3),\\\"\\\"},t.biasActivationSnippet=function(e,t){return\\\"\\\\n      \\\".concat(e?\\\"value = value + getBiasByOutputCoords(coords);\\\":\\\"\\\",\\\"\\\\n      \\\").concat(t?\\\"value = activation(value, coords);\\\":\\\"\\\",\\\"\\\\n      \\\")}},9456:function(e,t,n){\\\"use strict\\\";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},r.apply(this,arguments)};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.createConv2DMatMulProgramInfo=void 0;var a=n(4955),o=n(6952),i=n(1163),c=n(2075),u=n(1427),s=n(4085),l=n(158);t.createConv2DMatMulProgramInfo=function(e,t,n,p,d,f,h,g,m){var v=\\\"NHWC\\\"===n.format,y=v?e[0].dims[3]:e[0].dims[1],b=p[0],w=v?p[2]:p[3],S=v?p[1]:p[2],_=v?p[3]:p[1],x=v&&(y%4==0||y%3==0)&&_%4==0,T=v?_:w*S,O=v?w*S:_,I=[8,8,1],A=d<=8?[4,1,1]:[4,4,1],E=[Math.ceil(T/I[0]/A[0]),Math.ceil(O/I[1]/A[1]),Math.ceil(b/I[2]/A[2])];(0,a.LOG_DEBUG)(\\\"verbose\\\",(function(){return\\\"[conv2d_mm_webgpu] dispatch = \\\".concat(E)}));var C=x?v&&y%4!=0?3:4:A[0],P=I[1]*A[1],M=I[0]*A[0],D=Math.max(I[0]*C,I[1]),R=d%P==0,k=f%M==0,B=h%D==0,z=x?[C,4,4]:[1,1,1],G=(0,c.tensorTypeToWsglStorageType)(e[0].dataType),j=[\\\"@group(0) @binding(0) var<storage, read> x: array<\\\".concat(x&&4===C?\\\"vec4<\\\".concat(G,\\\">\\\"):G,\\\">;\\\"),\\\"@group(0) @binding(1) var<storage, read> w: array<\\\".concat(x?\\\"vec4<\\\".concat(G,\\\">\\\"):G,\\\">;\\\")],U=\\\"\\\\n      fn setOutputAtIndex(flatIndex : i32, value : \\\".concat(x?\\\"vec4<\\\".concat(G,\\\">\\\"):G,\\\") {\\\\n        result[flatIndex] = \\\").concat(x?\\\"vec4<\\\".concat(G,\\\">\\\"):G,\\\"(value);\\\\n      }\\\\n      fn setOutputAtCoords(d0 : i32, d1 : i32, d2 : i32, d3 : i32, value : \\\").concat(x?\\\"vec4<\\\".concat(G,\\\">\\\"):G,\\\") {\\\\n        let flatIndex = getOutputIndexFromCoords(vec4<i32>(d0, d1, d2, d3));\\\\n        setOutputAtIndex(flatIndex \\\").concat(x?\\\"/ 4\\\":\\\"\\\",\\\", value);\\\\n      }\\\");return g&&(j.push(\\\"@group(0) @binding(2) var<storage, read> bias: array<\\\".concat(x?\\\"vec4<\\\".concat(G,\\\">\\\"):G,\\\">;\\\")),U+=\\\"\\\\n        fn getBiasByOutputCoords(coords : vec4<i32>) -> \\\".concat(x?\\\"vec4<\\\".concat(G,\\\">\\\"):G,\\\" {\\\\n          return bias[coords.\\\").concat(v?\\\"w\\\":\\\"y\\\").concat(x?\\\"/ 4\\\":\\\"\\\",\\\"];\\\\n        }\\\")),r(r({},t),{outputs:[{dims:p,dataType:e[0].dataType,gpuDataType:i.GpuDataType.default}],dispatchGroup:function(){return{x:E[0],y:E[1],z:E[2]}},getShaderSource:function(){return\\\"\\\\n        \\\".concat(s.utilFunctions,\\\"\\\\n        //struct Uniforms { xShape : vec4<i32>, wShape : vec4<i32>, outShape : vec4<i32>,\\\\n        //  outShapeStrides: vec3<i32>, filterDims : vec2<i32>, pad : vec2<i32>, stride : vec2<i32>,\\\\n        //  dilation : vec2<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32 };\\\\n        \\\").concat(j.join(\\\"\\\"),\\\"\\\\n        @group(0) @binding(\\\").concat(j.length,\\\") var<storage, read_write> result: array<\\\").concat(x?\\\"vec4<\\\".concat(G,\\\">\\\"):G,\\\">;\\\\n        //@group(0) @binding(\\\").concat(j.length+1,\\\") var<uniform> uniforms: Uniforms;\\\\n\\\\n        const xShape : vec4<i32> = vec4<i32>(\\\").concat(e[0].dims.join(\\\",\\\"),\\\");\\\\n        const wShape : vec4<i32> = vec4<i32>(\\\").concat(e[1].dims.join(\\\",\\\"),\\\");\\\\n        const outShape : vec4<i32> = vec4<i32>(\\\").concat(p.join(\\\",\\\"),\\\");\\\\n        const outShapeStrides : vec3<i32> = vec3<i32>(\\\").concat(o.ShapeUtil.computeStrides(p).slice(0,3).join(\\\",\\\"),\\\");\\\\n        const filterDims : vec2<i32> = vec2<i32>(\\\").concat(n.kernelShape[0],\\\", \\\").concat(n.kernelShape[1],\\\");\\\\n        const pad : vec2<i32> = vec2<i32>(\\\").concat(n.pads[0],\\\", \\\").concat(n.pads[1],\\\");\\\\n        const stride : vec2<i32> = vec2<i32>(\\\").concat(n.strides[0],\\\", \\\").concat(n.strides[1],\\\");\\\\n        const dilation : vec2<i32> = vec2<i32>(\\\").concat(n.dilations[0],\\\", \\\").concat(n.dilations[1],\\\");\\\\n        const dimAOuter : i32 = \\\").concat(d,\\\";\\\\n        const dimBOuter : i32 = \\\").concat(f,\\\";\\\\n        const dimInner : i32 = \\\").concat(h,\\\";\\\\n        \\\").concat(U,\\\"\\\\n        \\\").concat(function(e,t,n,r,a,o,i,c,s,l,p){void 0===a&&(a=!1),void 0===i&&(i=!1),void 0===c&&(c=4),void 0===s&&(s=4),void 0===l&&(l=4),void 0===p&&(p=\\\"f32\\\");var d=e?\\\"\\\\n    let coord = vec4<i32>(batch, xRow, xCol, xCh);\\\\n    \\\":\\\"\\\\n    let coord = vec4<i32>(batch, xCh, xRow, xCol);\\\\n    \\\",f=e?\\\"\\\\n    let coords = vec4<i32>(\\\\n      batch,\\\\n      row / outWidth,\\\\n      row % outWidth,\\\\n      col);\\\\n    \\\":\\\"\\\\n    let coords = vec4<i32>(\\\\n      batch,\\\\n      row,\\\\n      col / outWidth,\\\\n      col % outWidth);\\\\n    \\\",h=e?\\\"xShape[1]\\\":\\\"xShape[2]\\\",g=e?\\\"xShape[2]\\\":\\\"xShape[3]\\\",m=e?\\\"row\\\":\\\"col\\\",v=e?\\\"col\\\":\\\"row\\\",y=\\\"\\\\n    let inChannels = wShape[2];\\\\n    let outWidth = \\\".concat(e?\\\"outShape[2]\\\":\\\"outShape[3]\\\",\\\";\\\\n    let outRow = \\\").concat(m,\\\" / outWidth;\\\\n    let outCol = \\\").concat(m,\\\" % outWidth;\\\\n\\\\n    let WRow = \\\").concat(v,\\\" / (filterDims[1] * inChannels);\\\\n    let WCol = \\\").concat(v,\\\" / inChannels % filterDims[1];\\\\n    let xRow = outRow * stride[0] + dilation[0] * WRow - pad[0];\\\\n    let xCol = outCol * stride[1] + dilation[1] * WCol - pad[1];\\\\n    let xCh = \\\").concat(v,\\\" % inChannels;\\\\n    var resData = \\\").concat((0,u.typeSnippet)(c,p),\\\"(0.0);\\\\n    // The bounds checking is always needed since we use it to pad zero for\\\\n    // the 'same' padding type.\\\\n    if (xRow >= 0 && xRow < \\\").concat(h,\\\" && xCol >= 0 && xCol < \\\").concat(g,\\\") {\\\\n      \\\").concat(d,\\\"\\\\n      let xIndex = getIndexFromCoords4D(coord, xShape);\\\\n      \\\").concat(function(e){switch(e){case 1:return\\\"resData = x[xIndex];\\\";case 3:return\\\"resData = vec3<\\\".concat(p,\\\">(x[xIndex], x[xIndex + 1], x[xIndex + 2]);\\\");case 4:return\\\"resData = x[xIndex / 4];\\\";default:throw new Error(\\\"innerElementSize \\\".concat(e,\\\" is not supported.\\\"))}}(c),\\\"\\\\n    }\\\\n    return resData;\\\"),b=e?t&&r?\\\"\\\\n    let col = colIn * \\\".concat(c,\\\";\\\\n    \\\").concat(y):\\\"\\\\n    let col = colIn * \\\".concat(c,\\\";\\\\n    if (row < dimAOuter && col < dimInner) {\\\\n      \\\").concat(y,\\\"\\\\n    }\\\\n    return \\\").concat((0,u.typeSnippet)(c,p),\\\"(0.0);\\\"):r&&n?\\\"\\\\n    let col = colIn * \\\".concat(c,\\\";\\\\n    \\\").concat(y):\\\"\\\\n    let col = colIn * \\\".concat(c,\\\";\\\\n    if (row < dimInner && col < dimBOuter) {\\\\n      \\\").concat(y,\\\"\\\\n    }\\\\n    return \\\").concat((0,u.typeSnippet)(c,p),\\\"(0.0);\\\"),w=\\\"\\\".concat(function(e){switch(e){case 1:return\\\"return w[row * wShape[3] + colIn];\\\";case 4:return\\\"return w[row * wShape[3] / 4 + colIn];\\\";default:throw new Error(\\\"innerElementSize \\\".concat(e,\\\" is not supported.\\\"))}}(s)),S=(0,u.typeSnippet)(l,p),_=e?(0,u.typeSnippet)(c,p):(0,u.typeSnippet)(s,p),x=e?(0,u.typeSnippet)(s,p):(0,u.typeSnippet)(c,p);return\\\"\\\\n    \\\".concat((0,u.activationFnSnippet)(o,i,4===l,4),\\\"\\\\n    fn mm_readA(batch: i32, row : i32, colIn : i32) -> \\\").concat(_,\\\" {\\\\n      \\\").concat(e?b:w,\\\"\\\\n    }\\\\n\\\\n    fn mm_readB(batch: i32, row : i32, colIn : i32) -> \\\").concat(x,\\\" {\\\\n      \\\").concat(e?w:b,\\\"\\\\n    }\\\\n\\\\n    fn mm_write(batch: i32, row : i32, colIn : i32, valueIn : \\\").concat(S,\\\") {\\\\n      let col = colIn * \\\").concat(l,\\\";\\\\n      if (row < dimAOuter && col < dimBOuter)\\\\n      {\\\\n      var value = valueIn;\\\\n      let outWidth = \\\").concat(e?\\\"outShape[2]\\\":\\\"outShape[3]\\\",\\\";\\\\n      \\\").concat(f,\\\"\\\\n      \\\").concat((0,u.biasActivationSnippet)(a,o),\\\"\\\\n      setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);\\\\n      }\\\\n    }\\\")}(v,R,k,B,g,void 0,!1,z[0],z[1],z[2],G),\\\"\\\\n            \\\").concat(x?(0,l.makeMatMulPackedVec4Source)(A,I,G,void 0,!v,D):(0,l.makeMatMulPackedSource)(A,I,G,void 0,!v,D,!1,void 0,m))}})}},7071:function(e,t,n){\\\"use strict\\\";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},r.apply(this,arguments)};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.createConv2DTransposeMatMulProgramInfo=void 0;var a=n(4955),o=n(6952),i=n(1163),c=n(1427),u=n(4085),s=n(158);t.createConv2DTransposeMatMulProgramInfo=function(e,t,n,l,p,d,f,h,g){var m=\\\"NHWC\\\"===n.format,v=m?e[0].dims[3]:e[0].dims[1],y=l[0],b=m?l[2]:l[3],w=m?l[1]:l[2],S=m?l[3]:l[1],_=m?v%4==0&&S%4==0:b%4==0&&S%4==0,x=m?S:b*w,T=m?b*w:S,O=_?[8,8,1]:[x<=4||T<=4?4:16,x>4&&T<=4?4:16,1],I=_?[4,4,1]:[x<=4?1:4,x>4&&T<=4?1:4,1],A=[Math.ceil(x/O[0]/I[0]),Math.ceil(T/O[1]/I[1]),Math.ceil(y/O[2]/I[2])];(0,a.LOG_DEBUG)(\\\"verbose\\\",(function(){return\\\"[conv_backprop_mm_webgpu] dispatch = \\\".concat(A)}));var E=_?4:1,C=Math.max(O[0]*E,O[1]),P=[\\\"@group(0) @binding(0) var<storage, read> x: array<\\\".concat(_?\\\"vec4<f32>\\\":\\\"f32\\\",\\\">;\\\"),\\\"@group(0) @binding(1) var<storage, read> W: array<f32>;\\\"],M=\\\"\\\";return h&&(P.push(\\\"@group(0) @binding(2) var<storage, read> bias: array<\\\".concat(_?\\\"vec4<f32>\\\":\\\"f32\\\",\\\">;\\\")),M+=\\\"\\\\n        fn getBiasByOutputCoords(coords : vec4<i32>) -> \\\".concat(_?\\\"vec4<f32>\\\":\\\"f32\\\",\\\" {\\\\n          return bias[coords.\\\").concat(m?\\\"w\\\":\\\"y\\\").concat(_?\\\"/ 4\\\":\\\"\\\",\\\"];\\\\n        }\\\")),r(r({},t),{outputs:[{dims:l,dataType:e[0].dataType,gpuDataType:i.GpuDataType.default}],dispatchGroup:function(){return{x:A[0],y:A[1],z:A[2]}},getShaderSource:function(){return\\\"\\\\n        \\\".concat(u.utilFunctions,\\\"\\\\n        \\\").concat(P.join(\\\"\\\\n\\\"),\\\"\\\\n        @group(0) @binding(\\\").concat(P.length,\\\") var<storage, read_write> result: array<\\\").concat(_?\\\"vec4<f32>\\\":\\\"f32\\\",\\\">;\\\\n        const outBackprop : vec4<i32> = vec4<i32>(\\\").concat(e[0].dims.join(\\\",\\\"),\\\");\\\\n        const xShape : vec4<i32> = vec4<i32>(\\\").concat(e[0].dims.join(\\\",\\\"),\\\");\\\\n        const wShape : vec4<i32> = vec4<i32>(\\\").concat(e[1].dims.join(\\\",\\\"),\\\");\\\\n        const outShape : vec4<i32> = vec4<i32>(\\\").concat(l.join(\\\",\\\"),\\\");\\\\n        const outShapeStrides : vec3<i32> = vec3<i32>(\\\").concat(o.ShapeUtil.computeStrides(l).slice(0,3).join(\\\",\\\"),\\\");\\\\n        const filterDims : vec2<i32> = vec2<i32>(\\\").concat(n.kernelShape[m?1:2],\\\", \\\").concat(n.kernelShape[m?2:3],\\\");\\\\n        const effectiveFilterDims : vec2<i32> = filterDims + vec2<i32>(\\\\n              \\\").concat(n.dilations[0]<=1?0:(n.kernelShape[m?1:2]-1)*(n.dilations[0]-1),\\\",\\\\n              \\\").concat(n.dilations[1]<=1?0:(n.kernelShape[m?2:3]-1)*(n.dilations[1]-1),\\\");\\\\n        const pads : vec2<i32> = vec2<i32>(i32(effectiveFilterDims[0]) - 1 - (\\\").concat(n.pads[0]+n.pads[2],\\\")/2,\\\\n                                         i32(effectiveFilterDims[1]) - 1 - (\\\").concat(n.pads[1]+n.pads[3],\\\")/2);\\\\n        const strides : vec2<i32> = vec2<i32>(\\\").concat(n.strides[0],\\\", \\\").concat(n.strides[1],\\\");\\\\n        const dilation : vec2<i32> = vec2<i32>(\\\").concat(n.dilations[0],\\\", \\\").concat(n.dilations[1],\\\");\\\\n        const dimAOuter : i32 = \\\").concat(p,\\\";\\\\n        const dimBOuter : i32 = \\\").concat(d,\\\";\\\\n        const dimInner : i32 = \\\").concat(f,\\\";\\\\n        \\\").concat(M,\\\"\\\\n        \\\").concat(function(e,t,n,r,a){void 0===t&&(t=!1),void 0===r&&(r=!1),void 0===a&&(a=4);var o=(0,c.typeSnippet)(a,\\\"f32\\\"),i=e?\\\"\\\\n      let coord = vec4<i32>(batch, iXR, iXC, xCh);\\\\n      \\\":\\\"\\\\n      let coord = vec4<i32>(batch, xCh, iXR, iXC);\\\\n      \\\",u=e?\\\"\\\\n    let coords = vec4<i32>(\\\\n      batch,\\\\n      row / outWidth,\\\\n      row % outWidth,\\\\n      col);\\\\n    \\\":\\\"\\\\n    let coords = vec4<i32>(\\\\n      batch,\\\\n      row,\\\\n      col / outWidth,\\\\n      col % outWidth);\\\\n    \\\",s=e?\\\"outBackprop[1]\\\":\\\"outBackprop[2]\\\",l=e?\\\"outBackprop[2]\\\":\\\"outBackprop[3]\\\",p=e?\\\"row\\\":\\\"col\\\",d=e?\\\"col\\\":\\\"row\\\",f=\\\"\\\\n      let inChannels = \\\".concat(e?\\\"outBackprop[3]\\\":\\\"outBackprop[1]\\\",\\\";\\\\n      let outWidth = \\\").concat(e?\\\"outShape[2]\\\":\\\"outShape[3]\\\",\\\";\\\\n      let outRow = \\\").concat(p,\\\" / outWidth;\\\\n      let outCol = \\\").concat(p,\\\" % outWidth;\\\\n\\\\n      let WRow = \\\").concat(d,\\\" / (filterDims[1] * inChannels);\\\\n      let WCol = \\\").concat(d,\\\" / inChannels % filterDims[1];\\\\n      let xR = f32(outRow - pads[0] + dilation[0] * WRow) / f32(strides[0]);\\\\n      let xC = f32(outCol - pads[1] + dilation[1] * WCol) / f32(strides[1]);\\\\n      if (xR < 0.0 || xR >= f32(\\\").concat(s,\\\") || fract(xR) > 0.0) {\\\\n        return \\\").concat(o,\\\"(0.0);\\\\n      }\\\\n      if (xC < 0.0 || xC >= f32(\\\").concat(l,\\\") || fract(xC) > 0.0) {\\\\n        return \\\").concat(o,\\\"(0.0);\\\\n      }\\\\n      let iXR = i32(xR);\\\\n      let iXC = i32(xC);\\\\n      let xCh = \\\").concat(d,\\\" % inChannels;\\\\n      \\\").concat(i,\\\"\\\\n      return x[getIndexFromCoords4D(coord, xShape)/\\\").concat(a,\\\"];\\\"),h=e?\\\"\\\\n      let col = colIn * \\\".concat(a,\\\";\\\\n      if (row < dimAOuter && col < dimInner) {\\\\n        \\\").concat(f,\\\"\\\\n      }\\\\n      return \\\").concat(o,\\\"(0.0);\\\"):\\\"\\\\n      let col = colIn * \\\".concat(a,\\\";\\\\n      if (row < dimInner && col < dimBOuter) {\\\\n        \\\").concat(f,\\\"\\\\n      }\\\\n      return \\\").concat(o,\\\"(0.0);\\\"),g=\\\"\\\\n      let col = colIn * \\\".concat(a,\\\";\\\\n      let inChannels = \\\").concat(e?\\\"outBackprop[3]\\\":\\\"outBackprop[1]\\\",\\\";\\\\n      let coordX = filterDims.x - 1 - row / (filterDims[1] * inChannels);\\\\n      let coordY = filterDims.y - 1 - (row / inChannels) % filterDims[1];\\\\n      if (\\\").concat(e?\\\"row < dimInner && col < dimBOuter\\\":\\\"row < dimInner && col < dimAOuter\\\",\\\"  && coordX >= 0 && coordY >= 0) {\\\\n        let rowInner = row % inChannels;\\\\n        let coord = vec4<i32>(coordX, coordY, col, rowInner);\\\\n        \\\").concat(function(e){switch(e){case 1:return\\\"return W[getIndexFromCoords4D(coord, wShape)];\\\";case 4:return\\\"\\\\n            let coord1 = vec4<i32>(coordX, coordY, col + 1, rowInner);\\\\n            let coord2 = vec4<i32>(coordX, coordY, col + 2, rowInner);\\\\n            let coord3 = vec4<i32>(coordX, coordY, col + 3, rowInner);\\\\n            let v0 = W[getIndexFromCoords4D(coord, wShape)];\\\\n            let v1 = W[getIndexFromCoords4D(coord1, wShape)];\\\\n            let v2 = W[getIndexFromCoords4D(coord2, wShape)];\\\\n            let v3 = W[getIndexFromCoords4D(coord3, wShape)];\\\\n            return vec4<f32>(v0, v1, v2, v3);\\\\n            \\\";default:throw new Error(\\\"innerElementSize \\\".concat(e,\\\" is not supported.\\\"))}}(a),\\\"\\\\n      }\\\\n      return \\\").concat(o,\\\"(0.0);\\\\n      \\\");return\\\"\\\\n  \\\".concat((0,c.activationFnSnippet)(n,r,4===a,4),\\\"\\\\n  fn mm_readA(batch: i32, row : i32, colIn : i32) -> \\\").concat(o,\\\" {\\\\n    \\\").concat(e?h:g,\\\"\\\\n  }\\\\n\\\\n  fn mm_readB(batch: i32, row : i32, colIn : i32) -> \\\").concat(o,\\\" {\\\\n    \\\").concat(e?g:h,\\\"\\\\n  }\\\\n\\\\n  fn mm_write(batch: i32, row : i32, colIn : i32, valueInput : \\\").concat(o,\\\") {\\\\n    let col = colIn * \\\").concat(a,\\\";\\\\n    if (row < dimAOuter && col < dimBOuter) {\\\\n      var value = valueInput;\\\\n      let outWidth = \\\").concat(e?\\\"outShape[2]\\\":\\\"outShape[3]\\\",\\\";\\\\n      \\\").concat(u,\\\"\\\\n      \\\").concat((0,c.biasActivationSnippet)(t,n),\\\"\\\\n      result[getIndexFromCoords4D(coords, outShape)/\\\").concat(a,\\\"] = value;\\\\n    }\\\\n  }\\\")}(m,h,void 0,!1,E),\\\"\\\\n        \\\").concat(_?(0,s.makeMatMulPackedVec4Source)(I,O,\\\"f32\\\",void 0,!m,C):(0,s.makeMatMulPackedSource)(I,O,\\\"f32\\\",void 0,!m,C,!1,void 0,g))}})}},6514:function(e,t,n){\\\"use strict\\\";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},r.apply(this,arguments)},a=this&&this.__read||function(e,t){var n=\\\"function\\\"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,a,o=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)i.push(r.value)}catch(e){a={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(a)throw a.error}}return i},o=this&&this.__spreadArray||function(e,t,n){if(n||2===arguments.length)for(var r,a=0,o=t.length;a<o;a++)!r&&a in t||(r||(r=Array.prototype.slice.call(t,0,a)),r[a]=t[a]);return e.concat(r||Array.prototype.slice.call(t))};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.createConvTranspose2DProgramInfo=void 0;var i=n(4955),c=n(6952),u=n(1163),s=n(2075);t.createConvTranspose2DProgramInfo=function(e,t,n,l){var p=e.length>2,d=n.outputShape,f=c.ShapeUtil.size(d),h=[Math.ceil(f/64),1,1];(0,i.LOG_DEBUG)(\\\"verbose\\\",(function(){return\\\"[conv2d_backprop_webgpu] dispatch = \\\".concat(h)}));var g=(0,s.tensorTypeToWsglStorageType)(e[0].dataType);return r(r({},t),{outputs:[{dims:l?l(d):d,dataType:e[0].dataType,gpuDataType:u.GpuDataType.default}],dispatchGroup:function(){return{x:h[0],y:h[1],z:h[2]}},getShaderSource:function(t){return function(e,t,n,r,i,u,l,p){void 0===l&&(l=!1);var d=\\\"NHWC\\\"===n.format,f=d?1:2,h=d?2:3,g=d?3:1,m=c.ShapeUtil.size(r),v=l?2:1,y=n.group,b=t[1].dims,w=b[0]/y,S=b[1],_=\\\"\\\\n  fn setOutputAtIndex(flatIndex : u32, value : \\\".concat(l?\\\"vec4<\\\".concat(p,\\\">\\\"):p,\\\") {\\\\n    result[flatIndex] = \\\").concat(l?\\\"vec4<\\\".concat(p,\\\">\\\"):p,\\\"(value);\\\\n  }\\\");i&&(_+=\\\"\\\\n    fn getBiasByOutputCoords(coords : vec4<u32>) -> \\\".concat(l?\\\"vec4<\\\".concat(p,\\\">\\\"):p,\\\" {\\\\n      return bias[coords.\\\").concat(d?\\\"w\\\":\\\"y\\\").concat(l?\\\"/ 4\\\":\\\"\\\",\\\"];\\\\n    }\\\"));var x=l?4:1,T=(0,s.inputVariable)(\\\"W\\\",t[1].dataType,t[1].dims,x),O=(0,s.inputVariable)(\\\"Dy\\\",t[0].dataType,t[0].dims,x),I=[O,T];i&&I.push((0,s.inputVariable)(\\\"bias\\\",t[2].dataType,[r[g]],x));var A=(0,s.outputVariable)(\\\"result\\\",t[0].dataType,r,x),E=\\\"{\\\\n        let batch: u32 = \\\".concat(u?\\\"global_id.z\\\":\\\"workgroup_id.z\\\",\\\" / outShape[1];\\\\n        let r = \\\").concat(u?\\\"global_id.z\\\":\\\"workgroup_id.z\\\",\\\" % outShape[1];\\\\n        let c = \\\").concat(u?\\\"global_id.y\\\":\\\"workgroup_id.y\\\",\\\" * \\\").concat(v,\\\";\\\\n        let d1: u32 = \\\").concat(u?\\\"global_id.x\\\":\\\"workgroup_id.x\\\",\\\" * 4;\\\\n\\\\n        let dyCorner = vec2<i32>(i32(r), i32(c)) - vec2<i32>(pads);\\\\n\\\\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\\\\n        // ? = to be determined. : = across all values in that axis.\\\\n        var dotProd: array<vec4<\\\").concat(p,\\\">, \\\").concat(v,\\\">;\\\\n        for (var i = 0; i < \\\").concat(v,\\\"; i++) {\\\\n          dotProd[i] = vec4<\\\").concat(p,\\\">(0.0);\\\\n        }\\\\n        for (var wR: u32 = 0; wR < filterDims[0]; wR = wR + 1) {\\\\n          var dyR = (\\\").concat(p,\\\"(dyCorner.x) + \\\").concat(p,\\\"(wR)) / \\\").concat(p,\\\"(strides.x);\\\\n          let wRPerm = filterDims[0] - 1 - wR;\\\\n          if (dyR < 0.0 || dyR >= \\\").concat(p,\\\"(outBackprop[1]) ||\\\\n              fract(dyR) > 0.0 || wRPerm < 0) {\\\\n            continue;\\\\n          }\\\\n          let idyR: u32 = u32(dyR);\\\\n\\\\n          for (var wC: u32 = 0; wC < filterDims[1]; wC = wC + 1) {\\\\n            let dyC = (\\\").concat(p,\\\"(dyCorner.y) + \\\").concat(p,\\\"(wC)) / \\\").concat(p,\\\"(strides.y);\\\\n            let dyC2 = (\\\").concat(p,\\\"(dyCorner.y) + 1.0 + \\\").concat(p,\\\"(wC)) / \\\").concat(p,\\\"(strides.y);\\\\n            let wCPerm = filterDims[1] - 1 - wC;\\\\n            if (wCPerm < 0) {\\\\n              continue;\\\\n            }\\\\n            var bDyCVal = true;\\\\n            var bDyCVal2 = true;\\\\n            if (dyC < 0.0 || dyC >= \\\").concat(p,\\\"(outBackprop[2]) ||\\\\n                fract(dyC) > 0.0) {\\\\n              bDyCVal = false;\\\\n            }\\\\n            if (dyC2 < 0.0 || dyC2 >= \\\").concat(p,\\\"(outBackprop[2]) ||\\\\n                fract(dyC2) > 0.0) {\\\\n              bDyCVal2 = false;\\\\n            }\\\\n\\\\n            let idyC: u32 = u32(dyC);\\\\n            let idyC2: u32 = u32(dyC2);\\\\n            if (bDyCVal && bDyCVal2) {\\\\n              let d2Length = outBackprop[3];\\\\n              for (var d2 :u32 = 0; d2 < d2Length; d2 = d2 + 4) {\\\\n                let wValue0 = \\\").concat(T.get(\\\"u32(wRPerm)\\\",\\\"u32(wCPerm)\\\",\\\"d1\\\",\\\"d2\\\"),\\\";\\\\n                let wValue1 = \\\").concat(T.get(\\\"u32(wRPerm)\\\",\\\"u32(wCPerm)\\\",\\\"d1 + 1\\\",\\\"d2\\\"),\\\";\\\\n                let wValue2 = \\\").concat(T.get(\\\"u32(wRPerm)\\\",\\\"u32(wCPerm)\\\",\\\"d1 + 2\\\",\\\"d2\\\"),\\\";\\\\n                let wValue3 = \\\").concat(T.get(\\\"u32(wRPerm)\\\",\\\"u32(wCPerm)\\\",\\\"d1 + 3\\\",\\\"d2\\\"),\\\";\\\\n\\\\n                var xValue = \\\").concat(O.get(\\\"batch\\\",\\\"idyR\\\",\\\"idyC\\\",\\\"d2\\\"),\\\";\\\\n                let tmpval = vec4<\\\").concat(p,\\\">(dot(xValue, wValue0),\\\\n                                      dot(xValue, wValue1),\\\\n                                      dot(xValue, wValue2),\\\\n                                      dot(xValue, wValue3));\\\\n                dotProd[0] = dotProd[0] + tmpval;\\\\n\\\\n                xValue =  \\\").concat(O.get(\\\"batch\\\",\\\"idyR\\\",\\\"idyC2\\\",\\\"d2\\\"),\\\";\\\\n\\\\n                dotProd[1] = dotProd[1] + vec4<\\\").concat(p,\\\">(dot(xValue, wValue0),\\\\n                                                    dot(xValue, wValue1),\\\\n                                                    dot(xValue, wValue2),\\\\n                                                    dot(xValue, wValue3));\\\\n              }\\\\n            } else if (bDyCVal) {\\\\n              let d2Length = outBackprop[\\\").concat(g,\\\"];\\\\n              for (var d2: u32 = 0; d2 < d2Length; d2 = d2 + 4) {\\\\n                let wValue0 = \\\").concat(T.get(\\\"u32(wRPerm)\\\",\\\"u32(wCPerm)\\\",\\\"d1\\\",\\\"d2\\\"),\\\";\\\\n                let wValue1 = \\\").concat(T.get(\\\"u32(wRPerm)\\\",\\\"u32(wCPerm)\\\",\\\"d1 + 1\\\",\\\"d2\\\"),\\\";\\\\n                let wValue2 = \\\").concat(T.get(\\\"u32(wRPerm)\\\",\\\"u32(wCPerm)\\\",\\\"d1 + 2\\\",\\\"d2\\\"),\\\";\\\\n                let wValue3 = \\\").concat(T.get(\\\"u32(wRPerm)\\\",\\\"u32(wCPerm)\\\",\\\"d1 + 3\\\",\\\"d2\\\"),\\\";\\\\n\\\\n                var xValue = \\\").concat(O.get(\\\"batch\\\",\\\"idyR\\\",\\\"idyC\\\",\\\"d2\\\"),\\\";\\\\n                let tmpval = vec4<\\\").concat(p,\\\">(dot(xValue, wValue0),\\\\n                                      dot(xValue, wValue1),\\\\n                                      dot(xValue, wValue2),\\\\n                                      dot(xValue, wValue3));\\\\n                dotProd[0] = dotProd[0] + tmpval;\\\\n              }\\\\n            } else if (bDyCVal2) {\\\\n              let d2Length = outBackprop[3];\\\\n              for (var d2: u32 = 0; d2 < d2Length; d2 = d2 + 4) {\\\\n                let wValue0 = \\\").concat(T.get(\\\"u32(wRPerm)\\\",\\\"u32(wCPerm)\\\",\\\"d1\\\",\\\"d2\\\"),\\\";\\\\n                let wValue1 = \\\").concat(T.get(\\\"u32(wRPerm)\\\",\\\"u32(wCPerm)\\\",\\\"d1 + 1\\\",\\\"d2\\\"),\\\";\\\\n                let wValue2 = \\\").concat(T.get(\\\"u32(wRPerm)\\\",\\\"u32(wCPerm)\\\",\\\"d1 + 2\\\",\\\"d2\\\"),\\\";\\\\n                let wValue3 = \\\").concat(T.get(\\\"u32(wRPerm)\\\",\\\"u32(wCPerm)\\\",\\\"d1 + 3\\\",\\\"d2\\\"),\\\";\\\\n\\\\n                var xValue = \\\").concat(O.get(\\\"batch\\\",\\\"idyR\\\",\\\"idyC2\\\",\\\"d2\\\"),\\\";\\\\n                let tmpval = vec4<\\\").concat(p,\\\">(dot(xValue, wValue0),\\\\n                                      dot(xValue, wValue1),\\\\n                                      dot(xValue, wValue2),\\\\n                                      dot(xValue, wValue3));\\\\n                dotProd[1] = dotProd[1] + tmpval;\\\\n              }\\\\n            }\\\\n          }\\\\n        }\\\\n\\\\n        for (var i: u32 = 0; i < \\\").concat(v,\\\"; i = i + 1) {\\\\n          let value = dotProd[i] + \\\").concat(i?\\\"bias[c+i]\\\":\\\"0.0\\\",\\\";\\\\n          \\\").concat(A.set(\\\"batch\\\",\\\"r\\\",\\\"c + i\\\",\\\"d1\\\",\\\"value\\\"),\\\";\\\\n        }\\\\n      }\\\"),C=\\\"\\\\n          let outputIndices = \\\".concat(A.offsetToIndices(\\\"global_idx\\\"),\\\";\\\\n          let batch = \\\").concat(A.indicesGet(\\\"outputIndices\\\",0),\\\";\\\\n          let d1 = \\\").concat(A.indicesGet(\\\"outputIndices\\\",g),\\\";\\\\n          let r = \\\").concat(A.indicesGet(\\\"outputIndices\\\",f),\\\";\\\\n          let c = \\\").concat(A.indicesGet(\\\"outputIndices\\\",h),\\\";\\\\n          let dyCorner = vec2<i32>(i32(r), i32(c)) - pads;\\\\n          let dyRCorner = dyCorner.x;\\\\n          let dyCCorner = dyCorner.y;\\\\n          let groupId = d1 / \\\").concat(S,\\\";\\\\n          let wOutChannel = d1 - groupId * \\\").concat(S,\\\";\\\\n          // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\\\\n          // ? = to be determined. : = across all values in that axis.\\\\n          var dotProd = 0.0;\\\\n          for (var wR: u32 = 0; wR < effectiveFilterDims.x; wR = wR + 1) {\\\\n            if (wR % dilations.x != 0) {\\\\n              continue;\\\\n            }\\\\n            let dyR = (\\\").concat(p,\\\"(dyRCorner) + \\\").concat(p,\\\"(wR)) / \\\").concat(p,\\\"(strides[0]);\\\\n            let wRPerm = filterDims.x - 1 - wR / dilations.x;\\\\n            if (dyR < 0.0 || dyR >= \\\").concat(p,\\\"(outBackprop[\\\").concat(f,\\\"]) || fract(dyR) > 0.0 ||\\\\n                wRPerm < 0) {\\\\n              continue;\\\\n            }\\\\n            let idyR: u32 = u32(dyR);\\\\n\\\\n            for (var wC: u32 = 0; wC < effectiveFilterDims.y; wC = wC + 1) {\\\\n              if (wC % dilations.y != 0) {\\\\n                continue;\\\\n              }\\\\n              let dyC = (\\\").concat(p,\\\"(dyCCorner) + \\\").concat(p,\\\"(wC)) / \\\").concat(p,\\\"(strides.y);\\\\n              let wCPerm = filterDims.y - 1 - wC / dilations.y;\\\\n              if (dyC < 0.0 || dyC >= \\\").concat(p,\\\"(outBackprop[\\\").concat(h,\\\"]) ||\\\\n                  fract(dyC) > 0.0 || wCPerm < 0) {\\\\n                continue;\\\\n              }\\\\n              let idyC: u32 = u32(dyC);\\\\n              var inputChannel = groupId * \\\").concat(w,\\\";\\\\n              for (var d2: u32 = 0; d2 < \\\").concat(w,\\\"; d2 = d2 + 1) {\\\\n                let xValue = \\\").concat(d?O.get(\\\"batch\\\",\\\"idyR\\\",\\\"idyC\\\",\\\"inputChannel\\\"):O.get(\\\"batch\\\",\\\"inputChannel\\\",\\\"idyR\\\",\\\"idyC\\\"),\\\";\\\\n                let wValue = \\\").concat(T.get(\\\"inputChannel\\\",\\\"wOutChannel\\\",\\\"u32(wRPerm)\\\",\\\"u32(wCPerm)\\\"),\\\";\\\\n                dotProd = dotProd + xValue * wValue;\\\\n                inputChannel = inputChannel + 1;\\\\n              }\\\\n            }\\\\n          }\\\\n          let value = dotProd + \\\").concat(i?\\\"bias[d1]\\\":\\\"0.0\\\",\\\";\\\\n          \\\").concat(A.setByOffset(\\\"global_idx\\\",\\\"value\\\"),\\\";\\\\n        \\\");return\\\"\\\\n  \\\".concat(e.declareVariables.apply(e,o(o([],a(I),!1),[A],!1)),\\\"\\\\n  \\\").concat(_,\\\"\\\\n  const outShape : vec4<u32> = vec4<u32>(\\\").concat(r.join(\\\",\\\"),\\\");\\\\n  const outBackprop : vec4<u32> = vec4<u32>(\\\").concat(t[0].dims.join(\\\",\\\"),\\\");\\\\n  const strides : vec2<u32> = vec2<u32>(\\\").concat(n.strides[0],\\\", \\\").concat(n.strides[1],\\\");\\\\n  const filterDims : vec2<u32> = vec2<u32>(\\\").concat(n.kernelShape[d?1:2],\\\", \\\").concat(n.kernelShape[d?2:3],\\\");\\\\n  const dilations : vec2<u32> = vec2<u32>(\\\").concat(n.dilations[0],\\\", \\\").concat(n.dilations[1],\\\");\\\\n  const effectiveFilterDims : vec2<u32> = filterDims + vec2<u32>(\\\\n          \\\").concat(n.dilations[0]<=1?0:(n.kernelShape[d?1:2]-1)*(n.dilations[0]-1),\\\",\\\\n          \\\").concat(n.dilations[1]<=1?0:(n.kernelShape[d?2:3]-1)*(n.dilations[1]-1),\\\");\\\\n  const pads : vec2<i32> = vec2<i32>(i32(effectiveFilterDims[0]) - 1 - (\\\").concat(n.pads[0]+n.pads[2],\\\")/2,\\\\n                                     i32(effectiveFilterDims[1]) - 1 - (\\\").concat(n.pads[1]+n.pads[3],\\\")/2);\\\\n    \\\").concat(e.mainStart(),\\\"\\\\n    \\\").concat(e.guardAgainstOutOfBoundsWorkgroupSizes(m),\\\";\\\\n  \\\").concat(l?E:C,\\\"}\\\")}(t,e,n,d,p,1===h[1]&&1===h[2],!1,g)}})}},4085:function(e,t){\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.utilFunctions=void 0,t.utilFunctions=\\\"\\\\nfn getIndexFromCoords4D(coords : vec4<i32>, shape : vec4<i32>) -> i32 {\\\\n  return dot(coords, vec4<i32>(\\\\n      shape.y * shape.z * shape.w, shape.z * shape.w, shape.w, 1));\\\\n}\\\\nfn getOutputIndexFromCoords(coords : vec4<i32>) -> i32 {\\\\n  return dot(coords, vec4<i32>(\\\\n    outShapeStrides.x, outShapeStrides.y, outShapeStrides.z, 1));\\\\n}\\\\n\\\"},158:function(e,t,n){\\\"use strict\\\";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},r.apply(this,arguments)},a=this&&this.__read||function(e,t){var n=\\\"function\\\"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,a,o=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)i.push(r.value)}catch(e){a={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(a)throw a.error}}return i},o=this&&this.__spreadArray||function(e,t,n){if(n||2===arguments.length)for(var r,a=0,o=t.length;a<o;a++)!r&&a in t||(r||(r=Array.prototype.slice.call(t,0,a)),r[a]=t[a]);return e.concat(r||Array.prototype.slice.call(t))};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.createMatmulProgramInfo=t.makeMatMulPackedSource=t.makeMatMulPackedVec4Source=void 0;var i=n(6952),c=n(1163),u=n(2075),s=n(3997),l=n(1427);t.makeMatMulPackedVec4Source=function(e,t,n,r,a,o,i,c){void 0===n&&(n=\\\"f32\\\"),void 0===a&&(a=!1),void 0===o&&(o=32),void 0===i&&(i=!1),void 0===c&&(c=32);var u=t[1]*e[1],s=t[0]*e[0],l=a?u:o,p=a?o:u,d=l/t[0],f=o/t[1];if((!a||4!==d||4!==e[1])&&(a||3!==d&&4!==d)||l%t[0]!=0||o%t[1]!=0||4!==e[0])throw new Error(\\\"If transposeA \\\".concat(a,\\\" is true, innerElementSize \\\").concat(d,\\\" and workPerThread[1] \\\").concat(e[1],\\\" must be 4.\\\\n      Otherwise, innerElementSize \\\").concat(d,\\\" must be 3 or 4.\\\\n  tileAWidth \\\").concat(l,\\\" must be divisible by workgroupSize[0]\\\").concat(t[0],\\\". tileInner \\\").concat(o,\\\" must be divisible by workgroupSize[1] \\\").concat(t[1],\\\". colPerThread \\\").concat(e[0],\\\" must be 4.\\\"));return\\\"\\\\nvar<workgroup> mm_Asub: array<array<vec\\\".concat(d,\\\"<\\\").concat(n,\\\">, \\\").concat(l/d,\\\">, \\\").concat(p,\\\">;\\\\nvar<workgroup> mm_Bsub: array<array<vec4<\\\").concat(n,\\\">, \\\").concat(s/e[0],\\\">, \\\").concat(o,\\\">;\\\\n\\\\nconst rowPerThread = \\\").concat(e[1],\\\";\\\\nconst colPerThread = \\\").concat(e[0],\\\";\\\\nconst innerElementSize = \\\").concat(d,\\\";\\\\nconst tileInner = \\\").concat(o,\\\";\\\\n\\\\n@compute @workgroup_size(\\\").concat(t[0],\\\", \\\").concat(t[1],\\\", \\\").concat(t[2],\\\")\\\\nfn main(@builtin(local_invocation_id) localId : vec3<u32>,\\\\n        @builtin(global_invocation_id) globalId : vec3<u32>,\\\\n        @builtin(workgroup_id) workgroupId : vec3<u32>) {\\\\n  let localRow = i32(localId.y);\\\\n  let tileRow = localRow * rowPerThread;\\\\n  let tileCol = i32(localId.x);\\\\n\\\\n  let globalRow =i32(globalId.y) * rowPerThread;\\\\n  let globalCol = i32(globalId.x);\\\\n  let batch = \\\").concat(i?\\\"0\\\":\\\"i32(globalId.z)\\\",\\\";\\\\n  \\\").concat(r?\\\"let batchIndices = \\\".concat(r.offsetToIndices(\\\"u32(batch)\\\"),\\\";\\\"):\\\"\\\",\\\"\\\\n  let globalRowStart = i32(workgroupId.y) * \\\").concat(u,\\\";\\\\n\\\\n  let numTiles = \\\").concat(i?\\\"\\\".concat(Math.ceil(c/o)):\\\"(dimInner - 1) / tileInner + 1\\\",\\\";\\\\n  var kStart = \\\").concat(i?\\\"i32(globalId.z) * \\\".concat(c):\\\"0\\\",\\\";\\\\n\\\\n  var acc: array<vec4<\\\").concat(n,\\\">, rowPerThread>;\\\\n\\\\n  // Loop over shared dimension.\\\\n  let tileRowB = localRow * \\\").concat(f,\\\";\\\\n  for (var t = 0; t < numTiles; t = t + 1) {\\\\n      // Load one tile of A into local memory.\\\\n      for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\\\\n          let inputRow = tileRow + innerRow;\\\\n          let inputCol = tileCol;\\\\n          \\\").concat(function(e,t){return e?\\\"\\\\n        mm_Asub[inputRow][inputCol] = mm_readA(batch,\\\\n          kStart + inputRow,\\\\n          globalRowStart / innerElementSize + inputCol\\\".concat(t?\\\", batchIndices\\\":\\\"\\\",\\\");\\\\n        \\\"):\\\"\\\\n        mm_Asub[inputRow][inputCol] = mm_readA(batch,\\\\n          globalRow + innerRow,\\\\n          kStart / innerElementSize + inputCol\\\".concat(t?\\\", batchIndices\\\":\\\"\\\",\\\");\\\\n        \\\")}(a,r),\\\"\\\\n      }\\\\n\\\\n      // Load one tile of B into local memory.\\\\n      for (var innerRow = 0; innerRow < \\\").concat(f,\\\"; innerRow = innerRow + 1) {\\\\n          let inputRow = tileRowB + innerRow;\\\\n          let inputCol = tileCol;\\\\n          mm_Bsub[inputRow][inputCol] = mm_readB(batch, kStart + inputRow, globalCol\\\").concat(r?\\\", batchIndices\\\":\\\"\\\",\\\");\\\\n      }\\\\n      kStart = kStart + tileInner;\\\\n      workgroupBarrier();\\\\n\\\\n      // Compute acc values for a single thread.\\\\n      for (var k = 0; k < tileInner / innerElementSize; k = k + 1) {\\\\n          let BCached0 = mm_Bsub[k * innerElementSize][tileCol];\\\\n          let BCached1 = mm_Bsub[k * innerElementSize + 1][tileCol];\\\\n          let BCached2 = mm_Bsub[k * innerElementSize + 2][tileCol];\\\\n          \\\").concat(3===d?\\\"\\\":\\\"let BCached3 = mm_Bsub[k * innerElementSize + 3][tileCol];\\\",\\\"\\\\n\\\\n          \\\").concat(function(e,t){return e?\\\"\\\\n        let ACached0 = mm_Asub[k * innerElementSize][localRow];\\\\n        let ACached1 = mm_Asub[k * innerElementSize + 1][localRow];\\\\n        let ACached2 = mm_Asub[k * innerElementSize + 2][localRow];\\\\n        \\\".concat(3===t?\\\"\\\":\\\"let ACached3 = mm_Asub[k * innerElementSize + 3][localRow];\\\",\\\"\\\\n        for (var i = 0; i < rowPerThread; i = i + 1) {\\\\n          acc[i] = BCached0 * ACached0[i] + acc[i];\\\\n          acc[i] = BCached1 * ACached1[i] + acc[i];\\\\n          acc[i] = BCached2 * ACached2[i] + acc[i];\\\\n          \\\").concat(3===t?\\\"\\\":\\\"acc[i] = BCached3 * ACached3[i] + acc[i];\\\",\\\"\\\\n        }\\\"):\\\"\\\\n        for (var i = 0; i < rowPerThread; i = i + 1) {\\\\n          let ACached = mm_Asub[tileRow + i][k];\\\\n          acc[i] = BCached0 * ACached.x + acc[i];\\\\n          acc[i] = BCached1 * ACached.y + acc[i];\\\\n          acc[i] = BCached2 * ACached.z + acc[i];\\\\n          \\\".concat(3===t?\\\"\\\":\\\"acc[i] = BCached3 * ACached.w + acc[i];\\\",\\\"\\\\n        }\\\")}(a,d),\\\"\\\\n      }\\\\n\\\\n      workgroupBarrier();\\\\n  }\\\\n\\\\n  for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\\\\n      mm_write(batch, globalRow + innerRow, globalCol, acc[innerRow]);\\\\n  }\\\\n}\\\")};var p=function(e,t){return e?\\\"\\\\n            mm_Asub[inputRow][inputCol] = mm_readA(batch,\\\\n              kStart + inputRow,\\\\n              globalRowStart + inputCol\\\".concat(t?\\\", batchIndices\\\":\\\"\\\",\\\");\\\\n            \\\"):\\\"\\\\n            mm_Asub[inputRow][inputCol] = mm_readA(batch,\\\\n              globalRowStart + inputRow,\\\\n              kStart + inputCol\\\".concat(t?\\\", batchIndices\\\":\\\"\\\",\\\");\\\\n            \\\")};t.makeMatMulPackedSource=function(e,t,n,r,a,o,i,c,u){void 0===n&&(n=\\\"f32\\\"),void 0===a&&(a=!1),void 0===o&&(o=32),void 0===i&&(i=!1),void 0===c&&(c=32),void 0===u&&(u=!1);var s=e[1]*t[1],l=e[0]*t[0],d=a?s:o,f=a?o:s;if(f%t[1]!=0||d%t[0]!=0||o%t[1]!=0)throw new Error(\\\"tileAHight \\\".concat(f,\\\" must be divisible by workgroupSize[1]\\\").concat(t[1],\\\", tileAWidth \\\").concat(d,\\\" must be divisible by workgroupSize[0]\\\").concat(t[0],\\\", tileInner \\\").concat(o,\\\" must be divisible by workgroupSize[1]\\\").concat(t[1]));var h=f/t[1],g=d/t[0],m=o/t[1],v=u?\\\"\\\\n    let localRow = i32(localId.y);\\\\n    let localCol = i32(localId.x);\\\\n    let globalRowStart = i32(workgroupId.y) * \\\".concat(s,\\\";\\\\n    let globalColStart = i32(workgroupId.x) * \\\").concat(l,\\\";\\\\n\\\\n    // Loop over shared dimension.\\\\n    for (var t = 0; t < numTiles; t = t + 1) {\\\\n      // Load one tile of A into local memory.\\\\n      for (var inputRow = localRow; inputRow < \\\").concat(f,\\\"; inputRow = inputRow + \\\").concat(t[1],\\\") {\\\\n        for (var inputCol = localCol; inputCol < \\\").concat(d,\\\"; inputCol = inputCol + \\\").concat(t[0],\\\") {\\\\n          \\\").concat(p(a,r),\\\"\\\\n        }\\\\n      }\\\\n      // Load one tile of B into local memory.\\\\n      for (var inputRow = localRow; inputRow < \\\").concat(o,\\\"; inputRow = inputRow + \\\").concat(t[1],\\\") {\\\\n            for (var inputCol = localCol; inputCol < \\\").concat(l,\\\"; inputCol = inputCol + \\\").concat(t[0],\\\") {\\\\n          mm_Bsub[inputRow][inputCol] = mm_readB(batch,\\\\n            kStart + inputRow,\\\\n            globalColStart + inputCol\\\").concat(r?\\\", batchIndices\\\":\\\"\\\",\\\");\\\\n        }\\\\n      }\\\\n      kStart = kStart + tileInner;\\\\n      workgroupBarrier();\\\\n\\\\n      // Compute acc values for a single thread.\\\\n      var BCached : array<\\\").concat(n,\\\", colPerThread>;\\\\n      for (var k = 0; k < tileInner; k = k + 1) {\\\\n        for (var inner = 0; inner < colPerThread; inner = inner + 1) {\\\\n          BCached[inner] = mm_Bsub[k][localCol + inner * \\\").concat(t[0],\\\"];\\\\n        }\\\\n        for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\\\\n          let ACached = \\\").concat(a?\\\"mm_Asub[k][localRow + innerRow * \\\".concat(t[1],\\\"];\\\"):\\\"mm_Asub[localRow + innerRow * \\\".concat(t[1],\\\"][k];\\\"),\\\"\\\\n          for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\\\\n            acc[innerRow][innerCol] = acc[innerRow][innerCol] +\\\\n                ACached * BCached[innerCol];\\\\n          }\\\\n        }\\\\n      }\\\\n      workgroupBarrier();\\\\n    }\\\\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\\\\n      let gRow = globalRowStart + localRow + innerRow * \\\").concat(t[1],\\\";\\\\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\\\\n        let gCol = globalColStart + localCol + innerCol * \\\").concat(t[0],\\\";\\\\n        mm_write(batch, gRow, gCol, acc[innerRow][innerCol]);\\\\n      }\\\\n    }\\\\n    \\\"):\\\"\\\\nlet tileRow = i32(localId.y) * rowPerThread;\\\\nlet tileCol = i32(localId.x) * colPerThread;\\\\n\\\\nlet globalRow = i32(globalId.y) * rowPerThread;\\\\nlet globalCol = i32(globalId.x) * colPerThread;\\\\nlet globalRowStart = i32(workgroupId.y) * \\\".concat(s,\\\";\\\\n\\\\nlet tileRowA = i32(localId.y) * \\\").concat(h,\\\";\\\\nlet tileColA = i32(localId.x) * \\\").concat(g,\\\";\\\\nlet tileRowB = i32(localId.y) * \\\").concat(m,\\\";\\\\n// Loop over shared dimension.\\\\nfor (var t = 0; t < numTiles; t = t + 1) {\\\\n  // Load one tile of A into local memory.\\\\n  for (var innerRow = 0; innerRow < \\\").concat(h,\\\"; innerRow = innerRow + 1) {\\\\n    for (var innerCol = 0; innerCol < \\\").concat(g,\\\"; innerCol = innerCol + 1) {\\\\n      let inputRow = tileRowA + innerRow;\\\\n      let inputCol = tileColA + innerCol;\\\\n      \\\").concat(p(a,r),\\\"\\\\n    }\\\\n  }\\\\n\\\\n  // Load one tile of B into local memory.\\\\n  for (var innerRow = 0; innerRow < \\\").concat(m,\\\"; innerRow = innerRow + 1) {\\\\n    for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\\\\n      let inputRow = tileRowB + innerRow;\\\\n      let inputCol = tileCol + innerCol;\\\\n      mm_Bsub[inputRow][inputCol] = mm_readB(batch,\\\\n        kStart + inputRow,\\\\n        globalCol + innerCol\\\").concat(r?\\\", batchIndices\\\":\\\"\\\",\\\");\\\\n    }\\\\n  }\\\\n  kStart = kStart + tileInner;\\\\n  workgroupBarrier();\\\\n\\\\n  // Compute acc values for a single thread.\\\\n  var BCached : array<\\\").concat(n,\\\", colPerThread>;\\\\n  for (var k = 0; k < tileInner; k = k + 1) {\\\\n    for (var inner = 0; inner < colPerThread; inner = inner + 1) {\\\\n      BCached[inner] = mm_Bsub[k][tileCol + inner];\\\\n    }\\\\n\\\\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\\\\n      \\\").concat(function(e){return e?\\\"let ACached = mm_Asub[k][tileRow + innerRow];\\\":\\\"let ACached = mm_Asub[tileRow + innerRow][k];\\\"}(a),\\\"\\\\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\\\\n        acc[innerRow][innerCol] = acc[innerRow][innerCol] + ACached * BCached[innerCol];\\\\n      }\\\\n    }\\\\n  }\\\\n\\\\n  workgroupBarrier();\\\\n}\\\\n\\\\nfor (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\\\\n  for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\\\\n    mm_write(batch, globalRow + innerRow, globalCol + innerCol,\\\\n        acc[innerRow][innerCol]);\\\\n  }\\\\n}\\\\n\\\");return\\\"\\\\n  var<workgroup> mm_Asub : array<array<\\\".concat(n,\\\", \\\").concat(d,\\\">, \\\").concat(f,\\\">;\\\\n  var<workgroup> mm_Bsub : array<array<\\\").concat(n,\\\", \\\").concat(l,\\\">, \\\").concat(o,\\\">;\\\\n  const rowPerThread = \\\").concat(e[1],\\\";\\\\n  const colPerThread = \\\").concat(e[0],\\\";\\\\n  const tileInner = \\\").concat(o,\\\";\\\\n\\\\n@compute @workgroup_size(\\\").concat(t[0],\\\", \\\").concat(t[1],\\\", \\\").concat(t[2],\\\")\\\\nfn main(@builtin(local_invocation_id) localId : vec3<u32>,\\\\n        @builtin(global_invocation_id) globalId : vec3<u32>,\\\\n        @builtin(workgroup_id) workgroupId : vec3<u32>) {\\\\n    let batch = \\\").concat(i?\\\"0\\\":\\\"i32(globalId.z)\\\",\\\";\\\\n    \\\").concat(r?\\\"let batchIndices = \\\".concat(r.offsetToIndices(\\\"u32(batch)\\\"),\\\";\\\"):\\\"\\\",\\\"\\\\n    let numTiles = \\\").concat(i?\\\"\\\".concat(Math.ceil(c/o)):\\\"(dimInner - 1) / tileInner + 1\\\",\\\";\\\\n    var kStart = \\\").concat(i?\\\"i32(globalId.z) * \\\".concat(c):\\\"0\\\",\\\";\\\\n\\\\n    var acc : array<array<\\\").concat(n,\\\", colPerThread>, rowPerThread>;\\\\n\\\\n    // Without this initialization strange values show up in acc.\\\\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\\\\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\\\\n        acc[innerRow][innerCol] = 0.0;\\\\n      }\\\\n    }\\\\n    \\\").concat(v,\\\"\\\\n  }\\\\n\\\")},t.createMatmulProgramInfo=function(e,n,p,d,f,h){void 0===h&&(h=!1);var g=n[0].dims,m=n[1].dims,v=g.slice(0,-2),y=m.slice(0,-2),b=f?f.slice(0,-2):d.slice(0,-2),w=(0,u.inputVariable)(\\\"batchDims\\\",n[0].dataType,b),S=[(0,u.inputVariable)(\\\"batchADims\\\",n[0].dataType,v),(0,u.inputVariable)(\\\"batchBDims\\\",n[0].dataType,y),w],_=i.ShapeUtil.size(b),x=g[g.length-2],T=g[g.length-1],O=m[m.length-1],I=T%4==0&&O%4==0,A=(0,s.getActicationSnippet)(p),E=A.activationFunction,C=A.applyActivation,P=x<=8?[4,1,1]:[4,4,1],M=[8,8,1],D=[Math.ceil(O/M[0]/P[0]),Math.ceil(x/M[1]/P[1]),Math.ceil(_/M[2]/P[2])],R=(0,u.tensorTypeToWsglStorageType)(n[0].dataType),k=I?4:1,B=(0,u.inputVariable)(\\\"a\\\",n[0].dataType,o(o([],a(v),!1),[x,T/k],!1),k),z=(0,u.inputVariable)(\\\"b\\\",n[1].dataType,o(o([],a(y),!1),[T,O/k],!1),k),G=(0,u.outputVariable)(\\\"result\\\",n[0].dataType,[_,x,O/k],k);S.push(B),S.push(z),S.push(G);var j=[B,z],U=n.length>2,W=function(e,t,n,r,a){void 0===a&&(a=!1);var o=r[0],i=r[1],c=r[2],s=r[3],p=r[4],d=r[5],f=(0,u.getBroadcastDims)(o.shape,c.shape),h=(0,u.getBroadcastDims)(i.shape,c.shape),g=(0,u.tensorTypeToWsglStorageType)(r[0].type.tensor);return\\\"\\\\n    fn mm_readA(batch: i32, row: i32, colIn: i32, batchIndices: \\\".concat(c.type.indices,\\\") -> \\\").concat((0,l.typeSnippet)(e,g),\\\" {\\\\n      var value = \\\").concat((0,l.typeSnippet)(e,g),\\\"(0.0);\\\\n      let col = colIn * \\\").concat(e,\\\";\\\\n      if(row < dimAOuter && col < dimInner)\\\\n      {\\\\n        \\\").concat(function(){for(var e=s.shape.length,t=c.shape.length,n=\\\"var aIndices: \\\".concat(s.type.indices,\\\";\\\"),r=e-2-1,a=t-1;r>=0;r--,a--)n+=\\\"\\\\naIndices[\\\".concat(r,\\\"] = \\\").concat(t>1?\\\"batchIndices[\\\".concat(a,\\\"]\\\"):\\\"batchIndices\\\",\\\";\\\");return f.forEach((function(e){n+=\\\"\\\\naIndices[\\\".concat(e,\\\"] = 0;\\\")})),n+=\\\"\\\\naIndices[\\\".concat(e-2,\\\"] = u32(row);\\\\n                   aIndices[\\\").concat(e-1,\\\"] = u32(colIn);\\\")}(),\\\"\\\\n        value = \\\").concat(s.getByIndices(\\\"aIndices\\\"),\\\";\\\\n      }\\\\n      return value;\\\\n    }\\\\n\\\\n    fn mm_readB(batch: i32, row: i32, colIn: i32, batchIndices: \\\").concat(c.type.indices,\\\") -> \\\").concat((0,l.typeSnippet)(e,g),\\\" {\\\\n      var value = \\\").concat((0,l.typeSnippet)(e,g),\\\"(0.0);\\\\n      let col = colIn * \\\").concat(e,\\\";\\\\n      if(row < dimInner && col < dimBOuter)\\\\n      {\\\\n        \\\").concat(function(){for(var e=p.shape.length,t=c.shape.length,n=\\\"var bIndices: \\\".concat(p.type.indices,\\\";\\\"),r=e-2-1,a=t-1;r>=0;r--,a--)n+=\\\"\\\\nbIndices[\\\".concat(r,\\\"] = \\\").concat(t>1?\\\"batchIndices[\\\".concat(a,\\\"]\\\"):\\\"batchIndices\\\",\\\";\\\");return h.forEach((function(e){n+=\\\"\\\\nbIndices[\\\".concat(e,\\\"] = 0;\\\")})),n+=\\\"\\\\nbIndices[\\\".concat(e-2,\\\"] = u32(row);\\\\n                   bIndices[\\\").concat(e-1,\\\"] = u32(colIn);\\\")}(),\\\"\\\\n        value = \\\").concat(p.getByIndices(\\\"bIndices\\\"),\\\";\\\\n      }\\\\n      return value;\\\\n    }\\\\n\\\\n    fn mm_write(batch: i32, row: i32, colIn: i32, valueIn: \\\").concat((0,l.typeSnippet)(e,g),\\\") {\\\\n      let col = colIn * \\\").concat(e,\\\";\\\\n      if (row < dimAOuter && col < dimBOuter) {\\\\n        var value = valueIn;\\\\n        let coords = vec3<i32>(batch, row, colIn);\\\\n        \\\").concat(t?\\\"value = value + \\\".concat(a?\\\"bias[colIn]\\\":\\\"\\\".concat((0,l.typeSnippet)(e,g),\\\"(bias[row])\\\"),\\\";\\\"):\\\"\\\",\\\"\\\\n        \\\").concat(n,\\\"\\\\n        \\\").concat(d.setByIndices(\\\"vec3<u32>(coords)\\\",\\\"value\\\"),\\\"\\\\n      }\\\\n    }\\\\n    \\\")}(k,U,C,S,h);if(U){var L=h?k:1;j.push((0,u.inputVariable)(\\\"bias\\\",n[2].dataType,n[2].dims,L))}return r(r({},e),{outputs:[{dims:d,dataType:n[0].dataType,gpuDataType:c.GpuDataType.default}],getShaderSource:function(e){return\\\"\\\\n  const dimAOuter: i32 = \\\".concat(x,\\\";\\\\n  const dimBOuter: i32 = \\\").concat(O,\\\";\\\\n  const dimInner: i32 = \\\").concat(T,\\\";\\\\n  \\\").concat(e.declareVariables.apply(e,o(o([],a(j),!1),[G],!1)),\\\"\\\\n  \\\").concat(W,\\\"\\\\n  \\\").concat(E,\\\"\\\\n  \\\").concat(I?(0,t.makeMatMulPackedVec4Source)(P,M,R,w):(0,t.makeMatMulPackedSource)(P,M,R,w),\\\"\\\\n                   \\\").concat(w.impl())},dispatchGroup:function(){return{x:D[0],y:D[1],z:D[2]}}})}},1868:function(e,t,n){\\\"use strict\\\";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},r.apply(this,arguments)};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.parseArgMinMaxAttributes=t.argMax=t.argMin=void 0;var a=n(387),o=n(1163),i=n(6031),c=function(e){if(!e||0===e.length||e.length>2)throw new Error(\\\"ArgMinMaxOp op requires 1 or 2 inputs.\\\");if(1!==e[0].dataType)throw new Error(\\\"Invalid input type.\\\")},u=function(e,t,n,c){var u=1===e.length?n:function(e,t){return(0,a.createAttributeWithCacheKey)({axis:t.axis,keepDims:t.keepDims,selectLastIndex:t.selectLastIndex})}(0,n),s=u.cacheKey+e.map((function(e){return e.dims.toString()})).join(\\\"_\\\"),l={name:t,inputTypes:[o.GpuDataType.default],cacheHint:s};return r(r({},l),{get:function(){return(0,i.createReduceProgramInfo)(l,[e[0]],c,[u.axis],7,u.keepDims)}})};t.argMin=function(e,t){c(e.inputs),e.compute(u(e.inputs,\\\"ArgMin\\\",t,(function(e,n,r){for(var a=[],o=0;o<e.shape.length;o++)(r.indexOf(o)>=0||0===r.length)&&a.push(\\\"inputIndices[\\\".concat(o,\\\"] = 0;\\\"));return[\\\"\\\".concat(a.join(\\\"\\\\n\\\")),\\\"var value = \\\".concat(e.getByOffset(\\\"inputOffset\\\"),\\\";\\\\nvar bestIndex : i32 = 0;\\\"),\\\"if (\\\".concat(e.getByOffset(\\\"inputOffset\\\"),\\\" \\\").concat(t.selectLastIndex>0?\\\"<=\\\":\\\"<\\\",\\\" value) {\\\\n         value = \\\").concat(e.getByOffset(\\\"inputOffset\\\"),\\\";\\\\n         bestIndex = i32(lastIndex);\\\\n       }\\\"),\\\"\\\",n.setByOffset(\\\"global_idx\\\",\\\"bestIndex\\\")]})),{inputs:[0]})},t.argMax=function(e,t){c(e.inputs),e.compute(u(e.inputs,\\\"argMax\\\",t,(function(e,n,r){for(var a=[],o=0;o<e.shape.length;o++)(r.indexOf(o)>=0||0===r.length)&&a.push(\\\"inputIndices[\\\".concat(o,\\\"] = 0;\\\"));return[\\\"\\\".concat(a.join(\\\"\\\\n\\\")),\\\"var value = \\\".concat(e.getByOffset(\\\"inputOffset\\\"),\\\";\\\\nvar bestIndex : i32 = 0;\\\"),\\\"if (\\\".concat(e.getByOffset(\\\"inputOffset\\\"),\\\" \\\").concat(t.selectLastIndex>0?\\\">=\\\":\\\">\\\",\\\" value) {\\\\n         value = \\\").concat(e.getByOffset(\\\"inputOffset\\\"),\\\";\\\\n         bestIndex = i32(lastIndex);\\\\n       }\\\"),\\\"\\\",n.setByOffset(\\\"global_idx\\\",\\\"bestIndex\\\")]})),{inputs:[0]})},t.parseArgMinMaxAttributes=function(e){return(0,a.createAttributeWithCacheKey)(e)}},1062:function(e,t,n){\\\"use strict\\\";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},r.apply(this,arguments)};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.biasAdd=void 0;var a=n(6952),o=n(1163),i=n(2075);t.biasAdd=function(e){!function(e){if(3!==e[0].dims.length)throw new Error(\\\"input should have 3 dimensions\\\");if(![320,640,1280].includes(e[0].dims[2]))throw new Error(\\\"number of channels should be 320, 640 or 1280\\\");if(1!==e[1].dims.length)throw new Error(\\\"bias is expected to have 1 dimensions\\\");if(e[0].dims[2]!==e[1].dims[0])throw new Error(\\\"last dimension of input and bias are not the same\\\")}(e.inputs);var t={name:\\\"BiasAdd\\\",inputTypes:Array(e.inputs.length).fill(o.GpuDataType.default)};e.compute(function(e,t){var n=t[0].dims,c=t[0].dims[2],u=a.ShapeUtil.size(n)/4,s=t[0].dataType,l=(0,i.inputVariable)(\\\"input\\\",s,n,4),p=(0,i.inputVariable)(\\\"bias\\\",s,[c],4),d=(0,i.inputVariable)(\\\"residual\\\",s,n,4),f=(0,i.outputVariable)(\\\"output\\\",s,n,4);return r(r({},e),{outputs:[{dims:n,dataType:t[0].dataType,gpuDataType:o.GpuDataType.default}],getShaderSource:function(e){return\\\"\\\\n  const channels = \\\".concat(c,\\\"u / 4;\\\\n  \\\").concat(e.declareVariables(l,p,d,f),\\\"\\\\n\\\\n  \\\").concat(e.mainStart(),\\\"\\\\n    \\\").concat(e.guardAgainstOutOfBoundsWorkgroupSizes(u),\\\"\\\\n    let value = \\\").concat(l.getByOffset(\\\"global_idx\\\"),\\\"\\\\n      + \\\").concat(p.getByOffset(\\\"global_idx % channels\\\"),\\\" + \\\").concat(d.getByOffset(\\\"global_idx\\\"),\\\";\\\\n    \\\").concat(f.setByOffset(\\\"global_idx\\\",\\\"value\\\"),\\\"\\\\n  }\\\")},dispatchGroup:function(){return{x:Math.ceil(u/64)}}})}(t,e.inputs))}},2919:function(e,t,n){\\\"use strict\\\";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},r.apply(this,arguments)};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.biasSplitGelu=void 0;var a=n(6952),o=n(1163),i=n(2075),c=n(9302);t.biasSplitGelu=function(e){!function(e){if(3!==e[0].dims.length)throw new Error(\\\"input should have 3 dimensions\\\");if(![2560,5120,10240].includes(e[0].dims[2]))throw new Error(\\\"hidden state should be 2560, 5120 or 10240\\\");if(1!==e[1].dims.length)throw new Error(\\\"bias is expected to have 1 dimensions\\\");if(e[0].dims[2]!==e[1].dims[0])throw new Error(\\\"last dimension of input and bias are not the same\\\")}(e.inputs);var t={name:\\\"BiasSplitGelu\\\",inputTypes:[o.GpuDataType.default,o.GpuDataType.default]};e.compute(function(e,t){var n=t[0].dims.slice();n[2]=n[2]/2;var u=(0,i.inputVariable)(\\\"input\\\",t[0].dataType,t[0].dims,4),s=(0,i.inputVariable)(\\\"bias\\\",t[0].dataType,[t[0].dims[2]],4),l=(0,i.outputVariable)(\\\"output\\\",t[0].dataType,n,4),p=a.ShapeUtil.size(n)/4;return r(r({},e),{outputs:[{dims:n,dataType:t[0].dataType,gpuDataType:o.GpuDataType.default}],getShaderSource:function(e){return\\\"\\\\n  const M_SQRT2 = sqrt(2.0);\\\\n  const halfChannels = \\\".concat(t[0].dims[2]/4/2,\\\"u;\\\\n\\\\n  \\\").concat(e.declareVariables(u,s,l),\\\"\\\\n\\\\n  \\\").concat((0,c.erfImpl)(\\\"vec4f\\\"),\\\"\\\\n\\\\n  \\\").concat(e.mainStart(),\\\"\\\\n    \\\").concat(e.guardAgainstOutOfBoundsWorkgroupSizes(p),\\\"\\\\n    let biasIdx = global_idx % halfChannels;\\\\n    let batchIndex = global_idx / halfChannels;\\\\n    let inputOffset = biasIdx + batchIndex * halfChannels * 2;\\\\n    let valueLeft = input[inputOffset] + bias[biasIdx];\\\\n    let valueRight = input[inputOffset + halfChannels] + bias[biasIdx + halfChannels];\\\\n    let geluRight = valueRight * 0.5 * (erf_vf32(valueRight / M_SQRT2) + 1);\\\\n\\\\n    \\\").concat(l.setByOffset(\\\"global_idx\\\",\\\"valueLeft * geluRight\\\"),\\\"\\\\n  }\\\")},dispatchGroup:function(){return{x:Math.ceil(p/64)}}})}(t,e.inputs))}},504:function(e,t,n){\\\"use strict\\\";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},r.apply(this,arguments)};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.lessOrEqual=t.greaterOrEqual=t.less=t.greater=t.sub=t.pow=t.mul=t.equal=t.div=t.add=void 0;var a=n(6952),o=n(1163),i=n(2075),c=function(e,t,n,c,u,s){var l={name:t,inputTypes:[o.GpuDataType.default,o.GpuDataType.default],cacheHint:u};return r(r({},l),{get:function(){return function(e,t,n,c,u,s){var l,p;void 0===s&&(s=t.dataType);var d=!a.ShapeUtil.areEqual(t.dims,n.dims),f=t.dims,h=a.ShapeUtil.size(t.dims),g=!1;if(d){var m=a.BroadcastUtil.calcShape(t.dims,n.dims,!1);if(!m)throw new Error(\\\"Can't perform binary op on the given tensors\\\");f=m,h=a.ShapeUtil.size(f);for(var v=1===a.ShapeUtil.size(t.dims),y=1===a.ShapeUtil.size(n.dims),b=1,w=1;w<f.length;w++){var S=null!==(l=t.dims[t.dims.length-w])&&void 0!==l?l:1;if(S!==(null!==(p=n.dims[n.dims.length-w])&&void 0!==p?p:1))break;b*=S}(b%4==0||v||y)&&(g=!0)}else g=!0;return r(r({},e),{getShaderSource:function(e){return function(e,t,n,r,o,c,u,s,l,p,d){var f,h,g=a.ShapeUtil.size(r),m=Math.ceil(g/4);\\\"string\\\"==typeof u?f=h=function(e,t){return\\\"\\\".concat(u,\\\"((\\\").concat(e,\\\"),(\\\").concat(t,\\\"))\\\")}:\\\"function\\\"==typeof u?f=h=u:(f=u.scalar,h=u.vector);var v,y=\\\"\\\",b=(0,i.outputVariable)(\\\"outputData\\\",p,r,4),w=(0,i.inputVariable)(\\\"aData\\\",s,t,4),S=(0,i.inputVariable)(\\\"bData\\\",l,n,4);if(c){var _=function(e){for(var t=a.ShapeUtil.computeStrides(e),n=[],o=e.length-1;o>=0;o--){var i=b.indicesGet(\\\"outputIndices\\\",o+r.length-e.length);n.push(\\\"\\\".concat(t[o],\\\"u * (\\\").concat(i,\\\" % \\\").concat(e[o],\\\"u)\\\"))}return n.length>0?n.join(\\\"+\\\"):\\\"0u\\\"};y=\\\"\\\\n          fn calcOffsetA(outputIndices: \\\".concat(b.type.indices,\\\") -> u32 {\\\\n            return \\\").concat(_(t),\\\";\\\\n          }\\\\n\\\\n          fn calcOffsetB(outputIndices: \\\").concat(b.type.indices,\\\") -> u32 {\\\\n            return \\\").concat(_(n),\\\";\\\\n          }\\\\n        \\\")}if(o)if(c){var x=1===a.ShapeUtil.size(t),T=1===a.ShapeUtil.size(n);v=x||T?b.setByOffset(\\\"global_idx\\\",h(x?\\\"\\\".concat(w.type.value,\\\"(\\\").concat(w.getByOffset(\\\"0\\\"),\\\".x)\\\"):w.getByOffset(\\\"global_idx\\\"),T?\\\"\\\".concat(S.type.value,\\\"(\\\").concat(S.getByOffset(\\\"0\\\"),\\\".x)\\\"):S.getByOffset(\\\"global_idx\\\"))):\\\"\\\\n            let outputIndices = \\\".concat(b.offsetToIndices(\\\"global_idx * 4u\\\"),\\\";\\\\n            let offsetA = calcOffsetA(outputIndices);\\\\n            let offsetB = calcOffsetB(outputIndices);\\\\n            \\\").concat(b.setByOffset(\\\"global_idx\\\",h(w.getByOffset(\\\"offsetA / 4u\\\"),S.getByOffset(\\\"offsetB / 4u\\\"))),\\\"\\\\n          \\\")}else v=b.setByOffset(\\\"global_idx\\\",h(w.getByOffset(\\\"global_idx\\\"),S.getByOffset(\\\"global_idx\\\")));else{if(!c)throw new Error(\\\"no necessary to use scalar implementation for element-wise binary op implementation.\\\");var O=function(e,t,n){void 0===n&&(n=\\\"\\\");var r=\\\"aData[indexA\\\".concat(t,\\\"][componentA\\\").concat(t,\\\"]\\\"),a=\\\"bData[indexB\\\".concat(t,\\\"][componentB\\\").concat(t,\\\"]\\\");return\\\"\\\\n            let outputIndices\\\".concat(t,\\\" = \\\").concat(b.offsetToIndices(\\\"global_idx * 4u + \\\".concat(t,\\\"u\\\")),\\\";\\\\n            let offsetA\\\").concat(t,\\\" = calcOffsetA(outputIndices\\\").concat(t,\\\");\\\\n            let offsetB\\\").concat(t,\\\" = calcOffsetB(outputIndices\\\").concat(t,\\\");\\\\n            let indexA\\\").concat(t,\\\" = offsetA\\\").concat(t,\\\" / 4u;\\\\n            let indexB\\\").concat(t,\\\" = offsetB\\\").concat(t,\\\" / 4u;\\\\n            let componentA\\\").concat(t,\\\" = offsetA\\\").concat(t,\\\" % 4u;\\\\n            let componentB\\\").concat(t,\\\" = offsetB\\\").concat(t,\\\" % 4u;\\\\n            \\\").concat(e,\\\"[\\\").concat(t,\\\"] = \\\").concat(n,\\\"(\\\").concat(f(r,a),\\\");\\\\n          \\\")};v=9===p?\\\"\\\\n            var data = vec4<u32>(0);\\\\n            \\\".concat(O(\\\"data\\\",0,\\\"u32\\\"),\\\"\\\\n            \\\").concat(O(\\\"data\\\",1,\\\"u32\\\"),\\\"\\\\n            \\\").concat(O(\\\"data\\\",2,\\\"u32\\\"),\\\"\\\\n            \\\").concat(O(\\\"data\\\",3,\\\"u32\\\"),\\\"\\\\n            outputData[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));\\\"):\\\"\\\\n            \\\".concat(O(\\\"outputData[global_idx]\\\",0),\\\"\\\\n            \\\").concat(O(\\\"outputData[global_idx]\\\",1),\\\"\\\\n            \\\").concat(O(\\\"outputData[global_idx]\\\",2),\\\"\\\\n            \\\").concat(O(\\\"outputData[global_idx]\\\",3),\\\"\\\\n          \\\")}return\\\"\\\\n        \\\".concat(e.declareVariables(w,S,b),\\\"\\\\n\\\\n        \\\").concat(null!=d?d:\\\"\\\",\\\"\\\\n        \\\").concat(y,\\\"\\\\n\\\\n        \\\").concat(e.mainStart(),\\\"\\\\n        \\\").concat(e.guardAgainstOutOfBoundsWorkgroupSizes(m),\\\"\\\\n        \\\").concat(v,\\\"\\\\n      }\\\")}(e,t.dims,n.dims,f,g,d,c,t.dataType,n.dataType,s,u)},outputs:[{dims:f,dataType:s,gpuDataType:o.GpuDataType.default}],dispatchGroup:function(){return{x:Math.ceil(h/64/4)}}})}(l,e[0],e[1],n,c,s)}})};t.add=function(e){e.compute(c(e.inputs,\\\"Add\\\",(function(e,t){return\\\"\\\".concat(e,\\\"+\\\").concat(t)})))},t.div=function(e){e.compute(c(e.inputs,\\\"Div\\\",(function(e,t){return\\\"\\\".concat(e,\\\"/\\\").concat(t)})))},t.equal=function(e){e.compute(c(e.inputs,\\\"Equal\\\",{scalar:function(e,t){return\\\"u32(\\\".concat(e,\\\"==\\\").concat(t,\\\")\\\")},vector:function(e,t){return\\\"vec4<u32>(\\\".concat(e,\\\"==\\\").concat(t,\\\")\\\")}},void 0,void 0,9))},t.mul=function(e){e.compute(c(e.inputs,\\\"Mul\\\",(function(e,t){return\\\"\\\".concat(e,\\\"*\\\").concat(t)})))},t.pow=function(e){var t=(0,i.inputVariable)(\\\"input\\\",e.inputs[0].dataType,e.inputs[0].dims).type.value,n=\\\"i32\\\"===t?\\\"round\\\":\\\"\\\";e.compute(c(e.inputs,\\\"Pow\\\",{scalar:function(e,t){return\\\"pow_custom(\\\".concat(e,\\\",\\\").concat(t,\\\")\\\")},vector:function(e,t){return\\\"pow_vector_custom(\\\".concat(e,\\\",\\\").concat(t,\\\")\\\")}},\\\"\\\\n    fn pow_custom(a : \\\".concat(t,\\\", b : \\\").concat(t,\\\") -> \\\").concat(t,\\\" {\\\\n      if (b == \\\").concat(t,\\\"(0.0)) {\\\\n        return \\\").concat(t,\\\"(1.0);\\\\n      } else if (a < \\\").concat(t,\\\"(0.0) && f32(b) != floor(f32(b))) {\\\\n        return \\\").concat(t,\\\"(pow(f32(a), f32(b))); // NaN\\\\n      }\\\\n      return select(sign(a), \\\").concat(t,\\\"(1.0), round(f32(abs(b) % \\\").concat(t,\\\"(2.0))) != 1.0) * \\\").concat(t,\\\"(\\\").concat(n,\\\"(pow(f32(abs(a)), f32(b))));\\\\n    }\\\\n    fn pow_vector_custom(a : vec4<\\\").concat(t,\\\">, b : vec4<\\\").concat(t,\\\">) -> vec4<\\\").concat(t,\\\"> {\\\\n      // TODO: implement vectorized pow\\\\n      return vec4<\\\").concat(t,\\\">(pow_custom(a.x, b.x), pow_custom(a.y, b.y), pow_custom(a.z, b.z), pow_custom(a.w, b.w));\\\\n    }\\\\n      \\\")))},t.sub=function(e){e.compute(c(e.inputs,\\\"Sub\\\",(function(e,t){return\\\"\\\".concat(e,\\\"-\\\").concat(t)})))},t.greater=function(e){e.compute(c(e.inputs,\\\"Greater\\\",{scalar:function(e,t){return\\\"u32(\\\".concat(e,\\\">\\\").concat(t,\\\")\\\")},vector:function(e,t){return\\\"vec4<u32>(\\\".concat(e,\\\">\\\").concat(t,\\\")\\\")}},void 0,void 0,9))},t.less=function(e){e.compute(c(e.inputs,\\\"Less\\\",{scalar:function(e,t){return\\\"u32(\\\".concat(e,\\\"<\\\").concat(t,\\\")\\\")},vector:function(e,t){return\\\"vec4<u32>(\\\".concat(e,\\\"<\\\").concat(t,\\\")\\\")}},void 0,void 0,9))},t.greaterOrEqual=function(e){e.compute(c(e.inputs,\\\"GreaterOrEqual\\\",{scalar:function(e,t){return\\\"u32(\\\".concat(e,\\\">=\\\").concat(t,\\\")\\\")},vector:function(e,t){return\\\"vec4<u32>(\\\".concat(e,\\\">=\\\").concat(t,\\\")\\\")}},void 0,void 0,9))},t.lessOrEqual=function(e){e.compute(c(e.inputs,\\\"LessOrEqual\\\",{scalar:function(e,t){return\\\"u32(\\\".concat(e,\\\"<=\\\").concat(t,\\\")\\\")},vector:function(e,t){return\\\"vec4<u32>(\\\".concat(e,\\\"<=\\\").concat(t,\\\")\\\")}},void 0,void 0,9))}},2075:function(e,t,n){\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.getBroadcastDims=t.createShaderHelper=t.outputVariable=t.inputVariable=t.tensorTypeToWsglValueType=t.tensorTypeToWsglStorageType=t.WORKGROUP_SIZE=void 0;var r=n(6952);t.WORKGROUP_SIZE=64;var a=function(e,t){if(3===t)throw new Error(\\\"vec3 has same alignment as vec4, use vec4 instead\\\");switch(e){case 10:return t>1?\\\"vec\\\".concat(t,\\\"<f16>\\\"):\\\"f16\\\";case 1:return t>1?\\\"vec\\\".concat(t,\\\"<f32>\\\"):\\\"f32\\\";case 6:return t>1?\\\"vec\\\".concat(t,\\\"<i32>\\\"):\\\"i32\\\";case 12:return t>1?\\\"vec\\\".concat(t,\\\"<u32>\\\"):\\\"u32\\\";case 7:if(t>1)throw new Error(\\\"currently not supported vecX of uint64 yet\\\");return[\\\"vec2<u32>\\\",\\\"i32\\\"];case 13:if(t>1)throw new Error(\\\"currently not supported vecX of uint64 yet\\\");return[\\\"vec2<u32>\\\",\\\"u32\\\"];case 9:if(4!==t)throw new Error(\\\"bool must be vec4\\\");return[\\\"u32\\\",\\\"vec4<bool>\\\"];default:throw new Error(\\\"Unknown data type: \\\".concat(e))}};t.tensorTypeToWsglStorageType=function(e,t){void 0===t&&(t=1);var n=a(e,t);return\\\"string\\\"==typeof n?n:n[0]},t.tensorTypeToWsglValueType=function(e,t){void 0===t&&(t=1);var n=a(e,t);return\\\"string\\\"==typeof n?n:n[1]};var o=function(e,t,n,o,i){for(var c=n.length,u=c<2?\\\"u32\\\":c<=4?\\\"vec\\\".concat(c,\\\"<u32>\\\"):\\\"array<u32, \\\".concat(c,\\\">\\\"),s=a(t,i),l=\\\"string\\\"==typeof s?s:s[1],p=\\\"string\\\"==typeof s?s:s[0],d={indices:u,value:l,storage:p,tensor:t},f=function(e){return\\\"string\\\"==typeof e?e:\\\"\\\".concat(e,\\\"u\\\")},h={offsetToIndices:!1,indicesToOffset:!1,broadcastedIndicesToOffset:!1,set:!1,setByIndices:!1,get:!1,getByIndices:!1},g=r.ShapeUtil.computeStrides(n),m=\\\"\\\",v=0;v<c-1;v++)m+=\\\"\\\\n    let dim\\\".concat(v,\\\" = current / \\\").concat(g[v],\\\"u;\\\\n    let rest\\\").concat(v,\\\" = current % \\\").concat(g[v],\\\"u;\\\\n    indices[\\\").concat(v,\\\"] = dim\\\").concat(v,\\\";\\\\n    current = rest\\\").concat(v,\\\";\\\\n    \\\");m+=\\\"indices[\\\".concat(c-1,\\\"] = current;\\\");var y=c<2?\\\"\\\":\\\"\\\\n  fn o2i_\\\".concat(e,\\\"(offset: u32) -> \\\").concat(d.indices,\\\" {\\\\n    var indices: \\\").concat(d.indices,\\\";\\\\n    var current = offset;\\\\n    \\\").concat(m,\\\"\\\\n    return indices;\\\\n  }\\\"),b=[];if(c>=2)for(v=c-1;v>=0;v--)b.push(\\\"\\\".concat(g[v],\\\"u * (indices[\\\").concat(v,\\\"])\\\"));var w,S,_=c<2?\\\"\\\":\\\"\\\\n  fn i2o_\\\".concat(e,\\\"(indices: \\\").concat(d.indices,\\\") -> u32 {\\\\n    return \\\").concat(b.join(\\\"+\\\"),\\\";\\\\n  }\\\"),x={},T=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return 0===c?\\\"0u\\\":\\\"\\\".concat(d.indices,\\\"(\\\").concat(e.map(f).join(\\\",\\\"),\\\")\\\")},O=function(t,n){return function(){if(d.storage===d.value)return\\\"\\\".concat(e,\\\"[\\\").concat(t,\\\"]=\\\").concat(n,\\\";\\\");if(\\\"vec2<u32>\\\"===d.storage&&\\\"i32\\\"===d.value)return\\\"\\\".concat(e,\\\"[\\\").concat(t,\\\"]=vec2<u32>(u32(\\\").concat(n,\\\"), select(0u, 0xFFFFFFFFu, \\\").concat(n,\\\" < 0));\\\");if(\\\"vec2<u32>\\\"===d.storage&&\\\"u32\\\"===d.value)return\\\"\\\".concat(e,\\\"[\\\").concat(t,\\\"]=vec2<u32>(u32(\\\").concat(n,\\\"), 0u);\\\");if(\\\"u32\\\"===d.storage&&\\\"vec4<bool>\\\"===d.value)return\\\"\\\".concat(e,\\\"[\\\").concat(t,\\\"]=dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(\\\").concat(n,\\\"));\\\");throw new Error(\\\"not supported combination of storage type \\\".concat(d.storage,\\\" and value type \\\").concat(d.value,\\\" yet\\\"))}()},I=function(t){return function(){if(d.storage===d.value)return\\\"\\\".concat(e,\\\"[\\\").concat(t,\\\"]\\\");if(\\\"vec2<u32>\\\"===d.storage&&\\\"i32\\\"===d.value)return\\\"i32(\\\".concat(e,\\\"[\\\").concat(t,\\\"].x)\\\");if(\\\"vec2<u32>\\\"===d.storage&&\\\"u32\\\"===d.value)return\\\"u32(\\\".concat(e,\\\"[\\\").concat(t,\\\"].x)\\\");if(\\\"u32\\\"===d.storage&&\\\"vec4<bool>\\\"===d.value)return\\\"vec4<bool>(bool(\\\".concat(e,\\\"[\\\").concat(t,\\\"] & 0xFFu), bool(\\\").concat(e,\\\"[\\\").concat(t,\\\"] & 0xFF00u), bool(\\\").concat(e,\\\"[\\\").concat(t,\\\"] & 0xFF0000u), bool(\\\").concat(e,\\\"[\\\").concat(t,\\\"] & 0xFF000000u))\\\");throw new Error(\\\"not supported combination of storage type \\\".concat(d.storage,\\\" and value type \\\").concat(d.value,\\\" yet\\\"))}()},A=c<2?\\\"\\\":\\\"\\\\n  fn get_\\\".concat(e,\\\"ByIndices(indices: \\\").concat(d.indices,\\\") -> \\\").concat(l,\\\" {\\\\n    return \\\").concat(I(\\\"i2o_\\\".concat(e,\\\"(indices)\\\")),\\\";\\\\n  }\\\"),E=c<2?\\\"\\\":(w=n.map((function(e,t){return\\\"d\\\".concat(t,\\\": u32\\\")})).join(\\\", \\\"),S=n.map((function(e,t){return\\\"d\\\".concat(t)})).join(\\\", \\\"),\\\"\\\\n  fn get_\\\".concat(e,\\\"(\\\").concat(w,\\\") -> \\\").concat(l,\\\" {\\\\n    return get_\\\").concat(e,\\\"ByIndices(\\\").concat(T(S),\\\");\\\\n  }\\\")),C=c<2?\\\"\\\":\\\"\\\\n  fn set_\\\".concat(e,\\\"ByIndices(indices: \\\").concat(d.indices,\\\", value: \\\").concat(l,\\\") {\\\\n    \\\").concat(O(\\\"i2o_\\\".concat(e,\\\"(indices)\\\"),\\\"value\\\"),\\\"\\\\n  }\\\"),P=c<2?\\\"\\\":function(){var t=n.map((function(e,t){return\\\"d\\\".concat(t,\\\": u32\\\")})).join(\\\", \\\"),r=n.map((function(e,t){return\\\"d\\\".concat(t)})).join(\\\", \\\");return\\\"\\\\n  fn set_\\\".concat(e,\\\"(\\\").concat(t,\\\", value: \\\").concat(l,\\\") {\\\\n    set_\\\").concat(e,\\\"ByIndices(\\\").concat(T(r),\\\", value);\\\\n  }\\\")}();return{impl:function(){var e=[];return h.offsetToIndices&&e.push(y),h.indicesToOffset&&e.push(_),h.broadcastedIndicesToOffset&&Object.values(x).forEach((function(t){return e.push(t)})),h.set&&e.push(P),h.setByIndices&&e.push(C),h.get&&e.push(E),h.getByIndices&&e.push(A),e.join(\\\"\\\\n\\\")},type:d,offsetToIndices:function(t){return h.offsetToIndices=!0,c<2?t:\\\"o2i_\\\".concat(e,\\\"(\\\").concat(t,\\\")\\\")},indicesToOffset:function(t){return h.indicesToOffset=!0,c<2?t:\\\"i2o_\\\".concat(e,\\\"(\\\").concat(t,\\\")\\\")},broadcastedIndicesToOffset:function(t,r){h.broadcastedIndicesToOffset=!0;var a=\\\"\\\".concat(r.name,\\\"broadcastedIndicesTo\\\").concat(e,\\\"Offset\\\");if(a in x)return\\\"\\\".concat(a,\\\"(\\\").concat(t,\\\")\\\");for(var o=[],i=n.length-1;i>=0;i--){var c=r.indicesGet(\\\"outputIndices\\\",i+r.shape.length-n.length);o.push(\\\"\\\".concat(g[i],\\\"u * (\\\").concat(c,\\\" % \\\").concat(n[i],\\\"u)\\\"))}return x[a]=\\\"fn \\\".concat(a,\\\"(outputIndices: \\\").concat(r.type.indices,\\\") -> u32 {\\\\n             return \\\").concat(o.length>0?o.join(\\\"+\\\"):\\\"0u\\\",\\\";\\\\n           }\\\"),\\\"\\\".concat(a,\\\"(\\\").concat(t,\\\")\\\")},indices:T,indicesGet:function(e,t){return c<2?\\\"\\\".concat(e):\\\"\\\".concat(e,\\\"[\\\").concat(t,\\\"]\\\")},indicesSet:function(e,t,n){return c<2?\\\"\\\".concat(e,\\\"=\\\").concat(n,\\\";\\\"):\\\"\\\".concat(e,\\\"[\\\").concat(t,\\\"]=\\\").concat(n,\\\";\\\")},set:function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];if(t.length!==c+1)throw new Error(\\\"indices length must be \\\".concat(c));var r=t[c];if(\\\"string\\\"!=typeof r)throw new Error(\\\"value must be string\\\");var a=t.slice(0,c).map(f).join(\\\",\\\");return 0===c?O(\\\"0u\\\",r):1===c?O(a[0],r):(h.set=!0,h.setByIndices=!0,h.indicesToOffset=!0,\\\"set_\\\".concat(e,\\\"(\\\").concat(a,\\\", \\\").concat(r,\\\")\\\"))},setByOffset:O,setByIndices:function(t,n){return c<2?O(t,n):(h.setByIndices=!0,h.indicesToOffset=!0,\\\"set_\\\".concat(e,\\\"ByIndices(\\\").concat(t,\\\", \\\").concat(n,\\\");\\\"))},get:function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];if(t.length!==c)throw new Error(\\\"indices length must be \\\".concat(c));var r=t.map(f).join(\\\",\\\");return 0===c?I(\\\"0u\\\"):1===c?I(r[0]):(h.get=!0,h.getByIndices=!0,h.indicesToOffset=!0,\\\"get_\\\".concat(e,\\\"(\\\").concat(r,\\\")\\\"))},getByOffset:I,getByIndices:function(t){return c<2?I(t):(h.getByIndices=!0,h.indicesToOffset=!0,\\\"get_\\\".concat(e,\\\"ByIndices(\\\").concat(t,\\\")\\\"))},usage:o?\\\"input\\\":\\\"output\\\",name:e,shape:n}};t.inputVariable=function(e,t,n,r){return void 0===r&&(r=1),o(e,t,n,!0,r)},t.outputVariable=function(e,t,n,r){return void 0===r&&(r=1),o(e,t,n,!1,r)};var i=function(){function e(e){this.normalizedDispatchGroup=e,this.indicesHelpers=[]}return e.prototype.guardAgainstOutOfBoundsWorkgroupSizes=function(e){var t=\\\"number\\\"==typeof e?\\\"\\\".concat(e,\\\"u\\\"):e;return\\\"if (global_idx >= \\\".concat(t,\\\") { return; }\\\")},e.prototype.mainStart=function(e){void 0===e&&(e=t.WORKGROUP_SIZE);var n=\\\"number\\\"==typeof e?e:e[0],r=\\\"number\\\"==typeof e?1:e[1],a=\\\"number\\\"==typeof e?1:e[2],o=1===this.normalizedDispatchGroup[1]&&1===this.normalizedDispatchGroup[2],i=o?\\\"@builtin(global_invocation_id) global_id : vec3<u32>,\\\\n    @builtin(local_invocation_id) local_id : vec3<u32>\\\":\\\"@builtin(local_invocation_index) local_index : u32,\\\\n    @builtin(workgroup_id) workgroup_id : vec3<u32>\\\",c=o?\\\"let global_idx = global_id.x;\\\":\\\"let global_idx = (workgroup_id.z * \\\".concat(this.normalizedDispatchGroup[0]*this.normalizedDispatchGroup[1],\\\"u +\\\\n          workgroup_id.y * \\\").concat(this.normalizedDispatchGroup[0],\\\"u + workgroup_id.x) * \\\").concat(n*r*a,\\\"u + local_index;\\\");return\\\"@compute @workgroup_size(\\\".concat(n,\\\", \\\").concat(r,\\\", \\\").concat(a,\\\")\\\\n  fn main(\\\").concat(i,\\\") {\\\\n    \\\").concat(c,\\\"\\\\n  \\\")},e.prototype.declareVariable=function(e,t){this.indicesHelpers.push(e);var n=\\\"input\\\"===e.usage?\\\"read\\\":\\\"read_write\\\",r=e.type.storage;return\\\"@group(0) @binding(\\\".concat(t,\\\") var<storage, \\\").concat(n,\\\"> \\\").concat(e.name,\\\": array<\\\").concat(r,\\\">;\\\")},e.prototype.declareVariables=function(){for(var e=this,t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var a=0;return t.filter((function(e){return r.ShapeUtil.size(e.shape)>0})).map((function(t){return e.declareVariable(t,a++)})).join(\\\"\\\\n\\\")},Object.defineProperty(e.prototype,\\\"additionalImplementations\\\",{get:function(){return this.indicesHelpers.map((function(e){return e.impl()})).join(\\\"\\\\n\\\")},enumerable:!1,configurable:!0}),e}();t.createShaderHelper=function(e){return new i(e)},t.getBroadcastDims=function(e,t){for(var n=e.length,r=[],a=0;a<n;a++){var o=n-1-a,i=e[o]||1;(t[t.length-1-a]||1)>1&&1===i&&r.unshift(o)}return r}},513:function(e,t,n){\\\"use strict\\\";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},r.apply(this,arguments)},a=this&&this.__values||function(e){var t=\\\"function\\\"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&\\\"number\\\"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?\\\"Object is not iterable.\\\":\\\"Symbol.iterator is not defined.\\\")},o=this&&this.__read||function(e,t){var n=\\\"function\\\"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,a,o=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)i.push(r.value)}catch(e){a={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(a)throw a.error}}return i},i=this&&this.__spreadArray||function(e,t,n){if(n||2===arguments.length)for(var r,a=0,o=t.length;a<o;a++)!r&&a in t||(r||(r=Array.prototype.slice.call(t,0,a)),r[a]=t[a]);return e.concat(r||Array.prototype.slice.call(t))};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.parseConcatAttributes=t.concat=void 0;var c=n(6952),u=n(387),s=n(1163),l=n(2075);t.concat=function(e,t){!function(e){var t,n;if(!e||e.length<1)throw new Error(\\\"too few inputs\\\");var r=e[0].dataType,o=e[0].dims.length;try{for(var i=a(e),c=i.next();!c.done;c=i.next()){var u=c.value;if(u.dataType!==r)throw new Error(\\\"input tensors should be one type\\\");if(u.dims.length!==o)throw new Error(\\\"input tensors should have the same shape\\\")}}catch(e){t={error:e}}finally{try{c&&!c.done&&(n=i.return)&&n.call(i)}finally{if(t)throw t.error}}}(e.inputs),e.compute(function(e,t){var n,a,u=(n=e.length,a=t.cacheKey,{name:\\\"Concat\\\",inputTypes:Array(n).fill(s.GpuDataType.default),cacheHint:a});return r(r({},u),{get:function(){return function(e,t,n){var a=t[0].dims.slice();if(n>=a.length||n<-1*a.length)throw new Error(\\\"axis specified for concat doesn't match input dimensionality\\\");for(var u=n<0?a.length+n:n,p=a.slice(0),d=1;d<t.length;d++)for(var f=t[d].dims.slice(),h=0;h<a.length;h++)if(h===u)p[u]+=f[h];else if(a[h]!==f[h])throw new Error(\\\"non concat dimensions must match\\\");var g=c.ShapeUtil.size(p),m=new Array(t.length),v=new Array(t.length),y=t[0].dataType,b=0;for(d=0;d<t.length;++d)b+=t[d].dims[u],m[d]=b,v[d]=(0,l.inputVariable)(\\\"input\\\".concat(d),y,t[d].dims);var w=(0,l.outputVariable)(\\\"output\\\",y,p),S=w.indicesGet(\\\"indices\\\",u);return r(r({},e),{outputs:[{dims:p,dataType:t[0].dataType,gpuDataType:s.GpuDataType.default}],getShaderSource:function(e){return\\\"\\\\n  \\\".concat(e.declareVariables.apply(e,i(i([],o(v),!1),[w],!1)),\\\"\\\\n\\\\n  const sizeInConcatAxis = array<u32, \\\").concat(m.length,\\\">(\\\").concat(m.map((function(e){return\\\"\\\".concat(e,\\\"u\\\")})).join(\\\",\\\"),\\\");\\\\n  \\\").concat((t=m.length,\\\"\\\\n  fn calculateInputIndex(index: u32) -> u32 {\\\\n    for (var i: u32 = 0u; i < \\\".concat(t,\\\"u; i += 1u ) {\\\\n      if (index < sizeInConcatAxis[i]) {\\\\n        return i;\\\\n      }\\\\n    }\\\\n    return \\\").concat(t,\\\"u;\\\\n  }\\\")),\\\"\\\\n\\\\n  \\\").concat(e.mainStart(),\\\"\\\\n    \\\").concat(e.guardAgainstOutOfBoundsWorkgroupSizes(g),\\\"\\\\n\\\\n    var indices = \\\").concat(w.offsetToIndices(\\\"global_idx\\\"),\\\";\\\\n\\\\n    let inputIndex = calculateInputIndex(\\\").concat(S,\\\");\\\\n    if (inputIndex != 0u) {\\\\n      \\\").concat(S,\\\" -= sizeInConcatAxis[inputIndex - 1u];\\\\n    }\\\\n\\\\n    \\\").concat(function(e,t){for(var n=e.length,r=[],a=0;a<n;++a){var o=t.setByOffset(\\\"global_idx\\\",e[a].getByIndices(\\\"indices\\\"));1===n?r.push(o):0===a?r.push(\\\"if (inputIndex == \\\".concat(a,\\\"u) { \\\").concat(o,\\\" }\\\")):a===n-1?r.push(\\\"else { \\\".concat(o,\\\" }\\\")):r.push(\\\"else if (inputIndex == \\\".concat(a,\\\") { \\\").concat(o,\\\" }\\\"))}return r.join(\\\"\\\\n\\\")}(v,w),\\\"\\\\n  }\\\");var t},dispatchGroup:function(){return{x:Math.ceil(g/64)}}})}(u,e,t.axis)}})}(e.inputs,t))},t.parseConcatAttributes=function(e){return(0,u.createAttributeWithCacheKey)({axis:e.axis})}},9192:function(e,t,n){\\\"use strict\\\";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},r.apply(this,arguments)},a=this&&this.__read||function(e,t){var n=\\\"function\\\"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,a,o=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)i.push(r.value)}catch(e){a={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(a)throw a.error}}return i},o=this&&this.__spreadArray||function(e,t,n){if(n||2===arguments.length)for(var r,a=0,o=t.length;a<o;a++)!r&&a in t||(r||(r=Array.prototype.slice.call(t,0,a)),r[a]=t[a]);return e.concat(r||Array.prototype.slice.call(t))};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.createGroupedConvProgramInfoLoader=void 0;var i=n(6952),c=n(1163),u=n(2075),s=n(9770),l=n(3997);t.createGroupedConvProgramInfoLoader=function(e,t,n){var p,d,f=(p=e.length>2,d=t.cacheKey,{name:\\\"GroupedConv\\\",inputTypes:p?[c.GpuDataType.default,c.GpuDataType.default,c.GpuDataType.default]:[c.GpuDataType.default,c.GpuDataType.default],cacheHint:d});return r(r({},f),{get:function(){return function(e,t,n,p){var d=e.length>2,f=d?\\\"value += b[output_channel];\\\":\\\"\\\",h=e[0].dims,g=e[1].dims,m=g[0]/n.group,v=(0,l.getActicationSnippet)(n),y=v.activationFunction,b=v.applyActivation,w=\\\"NHWC\\\"===n.format,S=(0,s.calculateOutputShape)(h,g,n.dilations,n.pads,n.strides,w),_=i.ShapeUtil.size(S),x=(0,u.outputVariable)(\\\"output\\\",e[0].dataType,S),T=(0,u.inputVariable)(\\\"x\\\",e[0].dataType,h),O=(0,u.inputVariable)(\\\"w\\\",e[1].dataType,g),I=[T,O];return d&&I.push((0,u.inputVariable)(\\\"b\\\",e[2].dataType,e[2].dims)),r(r({},t),{outputs:[{dims:p?p(S):S,dataType:e[0].dataType,gpuDataType:c.GpuDataType.default}],getShaderSource:function(e){return\\\"\\\\n  const strides: vec2<u32> = vec2(\\\".concat(n.strides[0],\\\"u, \\\").concat(n.strides[1],\\\"u);\\\\n  const pads: vec2<u32> = vec2(\\\").concat(n.pads[0],\\\"u, \\\").concat(n.pads[1],\\\"u);\\\\n\\\\n  \\\").concat(e.declareVariables.apply(e,o(o([],a(I),!1),[x],!1)),\\\"\\\\n\\\\n  \\\").concat(y,\\\"\\\\n\\\\n  \\\").concat(e.mainStart(),\\\"\\\\n    \\\").concat(e.guardAgainstOutOfBoundsWorkgroupSizes(_),\\\"\\\\n\\\\n    let outputIndices = \\\").concat(x.offsetToIndices(\\\"global_idx\\\"),\\\";\\\\n    let batch: u32 = outputIndices[0];\\\\n    let output_channel: u32 = outputIndices[\\\").concat(w?3:1,\\\"];\\\\n    let xRCCorner: vec2<u32> = vec2<u32>(outputIndices[\\\").concat(w?1:2,\\\"], outputIndices[\\\").concat(w?2:3,\\\"]) * strides - pads;\\\\n    let group_id: u32 = output_channel / \\\").concat(m,\\\"u;\\\\n\\\\n    var value: \\\").concat(x.type.value,\\\" = \\\").concat(x.type.value,\\\"(0);\\\\n    for (var wInChannel: u32 = 0u; wInChannel < \\\").concat(g[1],\\\"u; wInChannel++) {\\\\n      let input_channel = group_id * \\\").concat(g[1],\\\"u + wInChannel;\\\\n      for (var wHeight: u32 = 0u; wHeight < \\\").concat(g[2],\\\"u; wHeight++) {\\\\n        let xHeight = xRCCorner.x + wHeight * \\\").concat(n.dilations[0],\\\"u;\\\\n\\\\n        if (xHeight < 0u || xHeight >= \\\").concat(h[w?1:2],\\\"u) {\\\\n          continue;\\\\n        }\\\\n\\\\n        for (var wWidth: u32 = 0u; wWidth < \\\").concat(g[3],\\\"u; wWidth++) {\\\\n          let xWidth = xRCCorner.y + wWidth * \\\").concat(n.dilations[1],\\\"u;\\\\n          if (xWidth < 0u || xWidth >= \\\").concat(h[w?2:3],\\\"u) {\\\\n            continue;\\\\n          }\\\\n\\\\n          let xVal = \\\").concat(w?T.get(\\\"batch\\\",\\\"xHeight\\\",\\\"xWidth\\\",\\\"input_channel\\\"):T.get(\\\"batch\\\",\\\"input_channel\\\",\\\"xHeight\\\",\\\"xWidth\\\"),\\\";\\\\n          let wVal = \\\").concat(O.get(\\\"output_channel\\\",\\\"wInChannel\\\",\\\"wHeight\\\",\\\"wWidth\\\"),\\\";\\\\n          value += xVal*wVal;\\\\n        }\\\\n      }\\\\n    }\\\\n    \\\").concat(f,\\\"\\\\n    \\\").concat(b,\\\"\\\\n    \\\").concat(x.setByOffset(\\\"global_idx\\\",\\\"value\\\"),\\\"\\\\n  }\\\")},dispatchGroup:function(){return{x:Math.ceil(_/64)}}})}(e,f,t,n)}})}},7640:function(e,t,n){\\\"use strict\\\";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},r.apply(this,arguments)};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.convTranspose=t.parseConvTransposeAttributes=void 0;var a=n(387),o=n(1163),i=n(6514),c=n(4101),u=n(3997),s=n(2625),l=function(e,t,n,r,a,o){return(e-1)*t+n+(r-1)*a+1-o},p=function(e,t,n,r,a){var o=Math.floor(e/2);\\\"SAME_UPPER\\\"===t?(n[r]=o,n[a]=e-o):\\\"SAME_LOWER\\\"===t&&(n[r]=e-o,n[a]=o)},d=function(e,t){var n=e.kernelShape.slice();if(0===e.kernelShape.length||0===e.kernelShape.reduce((function(e,t){return e*t}),1)){n.length=0;for(var r=2;r<t[1].dims.length;++r)n.push(t[1].dims[r])}var a=\\\"NHWC\\\"===e.format;n.splice(0,0,t[1].dims[0]),n.splice(a?3:1,0,t[1].dims[1]);var o=e.pads.slice(),i=e.outputShape.slice(),c=e.outputPadding.slice(),u=t[0].dims,s=e.dilations.slice();if(0===s.reduce((function(e,t){return e+t}),0)){var d=t[0].dims.length-2;s=new Array(d).fill(1)}var f=e.strides.slice();0===f.reduce((function(e,t){return e+t}),0)&&(d=t[0].dims.length-2,f=new Array(d).fill(1)),function(e,t,n,r,a,o,i,c,u,s){var d=e.length-2,f=0===s.length;if(0===u.length)for(var h=0;h<d;++h)u.push(0);for(var g=e[0],m=t[c?3:1]*a,v=(h=0,e.length-d-(c?1:0));h<d;++h,++v){var y=e[v],b=f?y*i[h]:s[h],w=l(y,i[h],o[h],t[v],n[h],b);p(w,r,o,h,h+d),f&&s.push(i[h]*(y-1)+u[h]+(t[v]-1)*n[h]+1-o[h]-o[h+d])}s.splice(0,0,g),s.splice(c?3:1,0,m)}(u,n,s,e.autoPad,e.group,o,f,a,c,i);var h=Object.assign({},e),g=e.cacheKey+[n.join(\\\"n,\\\"),o.join(\\\",\\\"),f.join(\\\",\\\"),c.join(\\\",\\\"),i.join(\\\",\\\"),s.join(\\\",\\\")].join(\\\"_\\\");return Object.assign(h,{kernelShape:n,pads:o,outputPadding:c,outputShape:i,dilations:s,strides:f,cacheKey:g}),h};t.parseConvTransposeAttributes=function(e){var t=(0,u.parseInternalActivationAttributes)(e),n=e.format,o=[\\\"NOTSET\\\",\\\"VALID\\\",\\\"SAME_UPPER\\\",\\\"SAME_LOWER\\\"][void 0===e.autoPad?0:e.autoPad],i=e.dilations,c=e.group,s=e.kernelShape,l=e.pads,p=e.strides,d=e.wIsConst(),f=e.outputPadding,h=e.outputShape;return(0,a.createAttributeWithCacheKey)(r({autoPad:o,format:n,dilations:i,group:c,kernelShape:s,outputPadding:f,outputShape:h,pads:l,strides:p,wIsConst:d},t))};var f=function(e,t,n){var a,c,u=(a=3===e.length,c=t.cacheKey,{name:\\\"ConvTranspose2D\\\",inputTypes:a?[o.GpuDataType.default,o.GpuDataType.default,o.GpuDataType.default]:[o.GpuDataType.default,o.GpuDataType.default],cacheHint:c});return r(r({},u),{get:function(){return(0,i.createConvTranspose2DProgramInfo)(e,u,t,n)}})},h=(0,a.createAttributeWithCacheKey)({perm:[2,3,1,0]});t.convTranspose=function(e,t){!function(e,t){if(!e||2!==e.length&&3!==e.length)throw new Error(\\\"Conv requires 2 or 3 inputs\\\");if(4!==e[0].dims.length&&3!==e[0].dims.length)throw new Error(\\\"currently only support 2-dimensional conv\\\");if(e[0].dims.length!==e[1].dims.length)throw new Error(\\\"filter does not have same dimension as input\\\");if(e[0].dims[\\\"NHWC\\\"===t.format?e[0].dims.length-1:1]!==e[1].dims[0])throw new Error(\\\"FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\\\");var n=e[1].dims[1]*t.group;if(3===e.length&&(1!==e[2].dims.length||e[2].dims[0]!==n))throw new Error(\\\"invalid bias\\\");var r=e[0].dims.length-2;if(t.dilations.reduce((function(e,t){return e+t}),0)>0&&t.dilations.length!==r)throw new Error(\\\"dilations should be \\\".concat(r,\\\"D\\\"));if(t.strides.reduce((function(e,t){return e+t}),0)>0&&t.strides.length!==r)throw new Error(\\\"strides should be \\\".concat(r,\\\"D\\\"));if(t.pads.reduce((function(e,t){return e+t}),0)>0&&t.pads.length!==2*r)throw new Error(\\\"pads should be \\\".concat(2*r,\\\"D\\\"));if(t.outputPadding.length!==r&&0!==t.outputPadding.length)throw new Error(\\\"output_padding should be \\\".concat(r,\\\"D\\\"));if(t.kernelShape.reduce((function(e,t){return e+t}),0)>0&&0!==t.kernelShape.length&&t.kernelShape.length!==e[1].dims.length-2)throw new Error(\\\"invalid kernel shape\\\");if(0!==t.outputShape.length&&t.outputShape.length!==e[0].dims.length-2)throw new Error(\\\"invalid output shape\\\")}(e.inputs,t),3===e.inputs[0].dims.length?function(e,t){var n=\\\"NHWC\\\"===t.format,a=[e.inputs[0].reshape(n?[e.inputs[0].dims[0],1,e.inputs[0].dims[1],e.inputs[0].dims[2]]:[e.inputs[0].dims[0],e.inputs[0].dims[1],1,e.inputs[0].dims[2]]),e.inputs[1].reshape([e.inputs[1].dims[0],e.inputs[1].dims[1],1,e.inputs[1].dims[2]])];3===a.length&&a.push(e.inputs[2]);var o=t.kernelShape;0!==o.length&&0!==o[0]||(o=[e.inputs[1].dims[2]]);var i=t.dilations;0!==i.length&&0!==i[0]||(i=[1]);var c=t.strides;0!==c.length&&0!==c[0]||(c=[1]);var u=t.pads;0===u.length&&(u=[0,0]),u=[0,u[0],0,u[1]],c=[1].concat(c),i=[1].concat(i),o=[1].concat(o);var s=d(r(r({},t),{pads:u,strides:c,dilations:i,kernelShape:o}),a);e.compute(f(a,s,(function(e){return n?[e[0],e[2],e[3]]:[e[0],e[1],e[3]]})))}(e,t):function(e,t,n){var a,o=d(n,t),i=\\\"NHWC\\\"===n.format,u=3===t.length;if(1===o.group){var l=o.outputShape,p=l[i?1:2],g=l[i?2:3],m=l[i?3:1],v=i?p*g:m,y=i?m:p*g,b=t[1].dims[2]*t[1].dims[3]*t[0].dims[i?3:1],w=null!==(a=e.kernelCustomData.wT)&&void 0!==a?a:e.compute(r(r({},s.transposeProgramMetadata),{cacheHint:h.cacheKey,get:function(){return(0,s.createTransposeProgramInfo)(t[1],h.perm)}}),{inputs:[1],outputs:[n.wIsConst?-2:-1]})[0];n.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=w);var S=[t[0],w];u&&(i||1!==t[2].dims.length?S.push(t[2]):S.push(t[2].reshape([t[2].dims[0],1,1]))),e.compute((0,c.createConv2DTransposeMatMulProgramInfoLoader)(S,o,l,v,y,b,u,!0),{inputs:S})}else e.compute(f(t,o))}(e,e.inputs,t)}},9770:function(e,t,n){\\\"use strict\\\";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},r.apply(this,arguments)};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.conv=t.parseConvAttributes=t.calculateOutputShape=void 0;var a=n(6952),o=n(387),i=n(9192),c=n(3822),u=n(3997),s=n(1522),l=n(2625);t.calculateOutputShape=function(e,t,n,r,a,o){var i=e[0],c=e.slice(o?1:2,o?3:4),u=c.length,s=t[0],l=t.slice(2).map((function(e,t){return e+(e-1)*(n[t]-1)})),p=c.map((function(e,t){return e+r[t]+r[t+u]})).map((function(e,t){return Math.floor((e-l[t]+a[t])/a[t])}));return p.splice(0,0,i),p.splice(o?3:1,0,s),p};var p=(0,o.createAttributeWithCacheKey)({perm:[2,3,1,0]}),d=function(e,t){for(var n=e.kernelShape.slice(),r=2;r<t[1].dims.length;++r)0===n[r-2]&&(n[r-2]=t[1].dims[r]);var o=e.pads.slice();a.PoolConvUtil.adjustPadsBasedOnAutoPad(t[0].dims,e.strides,e.dilations,n,o,\\\"NHWC\\\"===e.format,e.autoPad);var i=Object.assign({},e);return Object.assign(i,{kernelShape:n,pads:o,cacheKey:e.cacheKey}),i};t.parseConvAttributes=function(e){var t=(0,u.parseInternalActivationAttributes)(e),n=e.format,a=[\\\"NOTSET\\\",\\\"VALID\\\",\\\"SAME_UPPER\\\",\\\"SAME_LOWER\\\"][e.auto_pad],i=e.dilations,c=e.group,s=e.kernel_shape,l=e.pads,p=e.strides,d=e.w_is_const();return(0,o.createAttributeWithCacheKey)(r({autoPad:a,format:n,dilations:i,group:c,kernelShape:s,pads:l,strides:p,wIsConst:d},t))},t.conv=function(e,n){!function(e,t){if(!e||2!==e.length&&3!==e.length)throw new Error(\\\"Conv requires 2 or 3 inputs\\\");if(4!==e[0].dims.length&&3!==e[0].dims.length)throw new Error(\\\"currently only support conv 1D and 2D\\\");if(e[0].dims.length!==e[1].dims.length)throw new Error(\\\"filter does not have same dimension as input\\\");if(e[0].dims[\\\"NHWC\\\"===t.format?e[0].dims.length-1:1]!==e[1].dims[1]*t.group)throw new Error(\\\"FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\\\");if(3===e.length&&(1!==e[2].dims.length||e[1].dims[0]!==e[2].dims[0]))throw new Error(\\\"invalid bias\\\");var n=e[0].dims.length-2;if(t.dilations.length!==n)throw new Error(\\\"dilations should be \\\".concat(n,\\\"D\\\"));if(t.strides.length!==n)throw new Error(\\\"strides should be \\\".concat(n,\\\"D\\\"));if(t.pads.length!==2*n)throw new Error(\\\"pads should be \\\".concat(2*n,\\\"D\\\"));if(0!==t.kernelShape.length&&t.kernelShape.length!==e[1].dims.length-2)throw new Error(\\\"invalid kernel shape\\\")}(e.inputs,n),3===e.inputs[0].dims.length?function(e,t){var n=\\\"NHWC\\\"===t.format,a=[e.inputs[0].reshape(n?[e.inputs[0].dims[0],1,e.inputs[0].dims[1],e.inputs[0].dims[2]]:[e.inputs[0].dims[0],e.inputs[0].dims[1],1,e.inputs[0].dims[2]]),e.inputs[1].reshape([e.inputs[1].dims[0],e.inputs[1].dims[1],1,e.inputs[1].dims[2]])];3===e.inputs.length&&a.push(e.inputs[2]);var o=[0,t.pads[0],0,t.pads[1]],c=[1].concat(t.strides),u=[1].concat(t.dilations),s=[1].concat(t.kernelShape),l=d(r(r({},t),{pads:o,strides:c,dilations:u,kernelShape:s}),a);e.compute((0,i.createGroupedConvProgramInfoLoader)(a,l,(function(e){return n?[e[0],e[2],e[3]]:[]})))}(e,n):function(e,n,a){var o,u,f=d(a,n);if(1===a.group){var h=\\\"NHWC\\\"===a.format,g=3===n.length,m=n[0].dims[h?1:2],v=n[0].dims[h?2:3],y=n[0].dims[h?3:1],b=n[1].dims[2],w=n[1].dims[3],S=(0,t.calculateOutputShape)(n[0].dims,n[1].dims,a.dilations,f.pads,a.strides,h),_=S[h?1:2],x=S[h?2:3],T=S[h?3:1],O=h&&b===m&&w===v&&0===a.pads[0]&&0===a.pads[1];if(O||1===b&&1===w&&1===a.dilations[0]&&1===a.dilations[1]&&1===a.strides[0]&&1===a.strides[1]&&0===a.pads[0]&&0===a.pads[1]){var I=S[0],A=void 0,E=void 0,C=void 0,P=[];if(h){var M=null!==(o=e.kernelCustomData.wT)&&void 0!==o?o:e.compute(r(r({},l.transposeProgramMetadata),{cacheHint:p.cacheKey,get:function(){return(0,l.createTransposeProgramInfo)(n[1],p.perm)}}),{inputs:[1],outputs:[a.wIsConst?-2:-1]})[0];if(a.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=M),O){var D=m*v*y;A=n[0].reshape([1,I,D]),E=M.reshape([1,D,T]),C=[1,I,T]}else A=n[0].reshape([I,m*v,y]),E=M.reshape([1,y,T]),C=[I,_*x,T];P.push(A),P.push(E)}else A=n[0].reshape([I,y,m*v]),E=n[1].reshape([1,T,y]),C=[I,T,_*x],P.push(E),P.push(A);return g&&P.push(n[2]),void e.compute((0,s.createMatmulProgramInfoLoader)(P,f,S,C,h),{inputs:P})}var R=null!==(u=e.kernelCustomData.wT)&&void 0!==u?u:e.compute(r(r({},l.transposeProgramMetadata),{cacheHint:p.cacheKey,get:function(){return(0,l.createTransposeProgramInfo)(n[1],p.perm)}}),{inputs:[1],outputs:[a.wIsConst?-2:-1]})[0];a.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=R);var k=[n[0],R];g&&k.push(n[2]);var B=h?_*x:T,z=h?T:_*x,G=b*w*y;e.compute((0,c.createConv2DMatMulProgramInfoLoader)(k,f,S,B,z,G,g,!0),{inputs:k})}else e.compute((0,i.createGroupedConvProgramInfoLoader)(n,f))}(e,e.inputs,n)}},3822:function(e,t,n){\\\"use strict\\\";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},r.apply(this,arguments)};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.createConv2DMatMulProgramInfoLoader=void 0;var a=n(1163),o=n(9456);t.createConv2DMatMulProgramInfoLoader=function(e,t,n,i,c,u,s,l){var p=function(e,t){return{name:\\\"Conv2DMatMul\\\",inputTypes:e?[a.GpuDataType.default,a.GpuDataType.default,a.GpuDataType.default]:[a.GpuDataType.default,a.GpuDataType.default],cacheHint:t}}(s,t.cacheKey);return r(r({},p),{get:function(){return(0,o.createConv2DMatMulProgramInfo)(e,p,t,n,i,c,u,s,l)}})}},4101:function(e,t,n){\\\"use strict\\\";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},r.apply(this,arguments)};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.createConv2DTransposeMatMulProgramInfoLoader=void 0;var a=n(1163),o=n(7071);t.createConv2DTransposeMatMulProgramInfoLoader=function(e,t,n,i,c,u,s,l){var p=function(e,t){return{name:\\\"Conv2DTransposeMatMul\\\",inputTypes:e?[a.GpuDataType.default,a.GpuDataType.default,a.GpuDataType.default]:[a.GpuDataType.default,a.GpuDataType.default],cacheHint:t}}(s,t.cacheKey);return r(r({},p),{get:function(){return(0,o.createConv2DTransposeMatMulProgramInfo)(e,p,t,n,i,c,u,s,l)}})}},2771:function(e,t,n){\\\"use strict\\\";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},r.apply(this,arguments)},a=this&&this.__read||function(e,t){var n=\\\"function\\\"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,a,o=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)i.push(r.value)}catch(e){a={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(a)throw a.error}}return i},o=this&&this.__spreadArray||function(e,t,n){if(n||2===arguments.length)for(var r,a=0,o=t.length;a<o;a++)!r&&a in t||(r||(r=Array.prototype.slice.call(t,0,a)),r[a]=t[a]);return e.concat(r||Array.prototype.slice.call(t))};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.parseEinsumAttributes=t.einsum=void 0;var i=n(6952),c=n(387),u=n(1163),s=n(2075),l=\\\"[a-zA-Z]|\\\\\\\\.\\\\\\\\.\\\\\\\\.\\\",p=\\\"(\\\"+l+\\\")+\\\",d=\\\"^\\\"+p+\\\"$\\\",f=\\\"^(\\\"+p+\\\",)*\\\"+p+\\\"$\\\",h=function(){function e(e){void 0===e&&(e=-1),this.symbolToIndices=new Map,this.inputIndex=e}return e.prototype.addSymbol=function(e,t){var n=this.symbolToIndices.get(e);void 0===n?n=[t]:n.push(t),this.symbolToIndices.set(e,n)},e}(),g=function(){function e(e,t){var n=this;this.hasEllipsis=!1,this.symbolToInfo=new Map,this.lhs=new Array,this.outputDims=[];var r=a(t.includes(\\\"->\\\")?t.split(\\\"->\\\",2):[t,\\\"\\\"],2),i=r[0],c=r[1];if(!i.match(RegExp(f)))throw new Error(\\\"Invalid LHS term\\\");if(i.split(\\\",\\\").forEach((function(t,r){var a=e[r].dims.slice();if(!t.match(RegExp(d)))throw new Error(\\\"Invalid LHS term\\\");var o=n.processTerm(t,!0,a,r);n.lhs.push(o)})),\\\"\\\"===c)c+=o([],a(this.symbolToInfo.entries()),!1).filter((function(e){var t=a(e,2),n=t[0];return 1===t[1].count||\\\"...\\\"===n})).map((function(e){return a(e,1)[0]})).join(\\\"\\\");else if(!c.match(RegExp(p)))throw new Error(\\\"Invalid RHS\\\");var u=c.match(RegExp(l,\\\"g\\\"));null==u||u.forEach((function(e){if(\\\"...\\\"===e)n.outputDims=n.outputDims.concat(n.ellipsisDims);else{var t=n.symbolToInfo.get(e);if(void 0===t)throw new Error(\\\"Invalid RHS symbol\\\");n.outputDims.push(t.dimValue)}})),this.rhs=this.processTerm(c,!0,this.outputDims)}return e.prototype.addSymbol=function(e,t,n){var r=this.symbolToInfo.get(e);if(void 0!==r){if(r.dimValue!==t&&1!==r.count)throw new Error(\\\"Dimension mismatch\\\");r.count++,r.inputIndices.push(n)}else r={count:1,dimValue:t,inputIndices:[n]};this.symbolToInfo.set(e,r)},e.prototype.processTerm=function(e,t,n,r){var a=this;void 0===r&&(r=-1);var o=n.length,i=!1,c=[],u=0;if(!e.match(RegExp(d))&&!t&&\\\"\\\"!==e)throw new Error(\\\"Invalid LHS term\\\");var s=e.match(RegExp(l,\\\"g\\\")),p=new h(r);return null==s||s.forEach((function(e,l){if(\\\"...\\\"===e){if(i)throw new Error(\\\"Only one ellipsis is allowed per input term\\\");i=!0;var d=o-s.length+1;if(d<0)throw new Error(\\\"Ellipsis out of bounds\\\");if(c=n.slice(u,u+d),a.hasEllipsis){if(a.ellipsisDims.length!==c.length||a.ellipsisDims.toString()!==c.toString())throw new Error(\\\"Ellipsis dimensions mismatch\\\")}else{if(!t)throw new Error(\\\"Ellipsis must be specified in the LHS\\\");a.hasEllipsis=!0,a.ellipsisDims=c}for(var f=0;f<c.length;f++){var h=String.fromCharCode(\\\"0\\\".charCodeAt(0)+l);p.addSymbol(h,l+f),a.addSymbol(h,n[u++],r)}}else p.addSymbol(e,l),a.addSymbol(e,n[u++],r)})),p},e}();t.einsum=function(e,t){var n=new g(e.inputs,t.equation);e.compute(function(e,t,n){var c,l,p=(c=e.length,l=n.cacheKey,{name:\\\"Einsum\\\",inputTypes:Array(c).fill(u.GpuDataType.default),cacheHint:l});return r(r({},p),{get:function(){return function(e,t,n){for(var c=t[0].dataType,l=new Array(t.length),p=0;p<t.length;++p)l[p]=(0,s.inputVariable)(\\\"input\\\".concat(p),c,t[p].dims);var d=n.outputDims,f=i.ShapeUtil.size(d),h=(0,s.outputVariable)(\\\"output\\\",c,d),g=[],m=Array.from(n.rhs.symbolToIndices.keys()),v=[],y=[],b=[],w=[],S=n.symbolToInfo.size===m.length;n.symbolToInfo.forEach((function(e,t){var r;if(m.includes(t)){var a=m.indexOf(t);n.lhs.forEach((function(n,r){if(e.inputIndices.includes(r)){var o=n.symbolToIndices.get(t);if(void 0===o)throw new Error(\\\"Invalid symbol error\\\");o.forEach((function(e){g.push(\\\"\\\".concat(l[r].indicesSet(\\\"input\\\".concat(r,\\\"Indices\\\"),e,h.indicesGet(\\\"outputIndices\\\",a))))}))}}))}else n.lhs.forEach((function(e,r){var a=n.symbolToInfo.get(t);if(void 0===a)throw new Error(\\\"Invalid symbol error\\\");if(a.inputIndices.includes(r)){var o=e.symbolToIndices.get(t);if(void 0===o)throw new Error(\\\"Invalid symbol error\\\");o.forEach((function(e){v.push(\\\"\\\".concat(l[r].indicesSet(\\\"input\\\".concat(r,\\\"Indices\\\"),e,\\\"\\\".concat(t))))})),w.push(\\\"prod *= \\\".concat(l[r].getByIndices(\\\"input\\\".concat(r,\\\"Indices\\\")),\\\";\\\"))}})),y.push(\\\"for(var \\\".concat(t,\\\": u32 = 0; \\\").concat(t,\\\" < \\\").concat(null===(r=n.symbolToInfo.get(t))||void 0===r?void 0:r.dimValue,\\\"; \\\").concat(t,\\\"++) {\\\")),b.push(\\\"}\\\")}));var _=S?o(o([],a(g),!1),[\\\"let sum = \\\".concat(l.map((function(e,t){return e.getByIndices(\\\"input\\\".concat(t,\\\"Indices\\\"))})).join(\\\" * \\\"),\\\";\\\")],!1):o(o(o(o(o(o(o(o([],a(g),!1),[\\\"var sum = 0.0;\\\"],!1),a(y),!1),a(v),!1),[\\\"var prod = 1.0;\\\"],!1),a(w),!1),[\\\"sum += prod;\\\"],!1),a(b),!1);return r(r({},e),{outputs:[{dims:d,dataType:t[0].dataType,gpuDataType:u.GpuDataType.default}],getShaderSource:function(e){return\\\"\\\\n      \\\".concat(e.declareVariables.apply(e,o(o([],a(l),!1),[h],!1)),\\\"\\\\n\\\\n      \\\").concat(e.mainStart(),\\\"\\\\n        \\\").concat(e.guardAgainstOutOfBoundsWorkgroupSizes(f),\\\"\\\\n        var outputIndices = \\\").concat(h.offsetToIndices(\\\"global_idx\\\"),\\\";\\\\n        \\\").concat(l.map((function(e,t){return\\\"var input\\\".concat(t,\\\"Indices: \\\").concat(l[t].type.indices,\\\";\\\")})).join(\\\"\\\\n\\\"),\\\"\\\\n        \\\").concat(_.join(\\\"\\\\n\\\"),\\\";\\\\n        \\\").concat(h.setByOffset(\\\"global_idx\\\",\\\"sum\\\"),\\\";\\\\n      }\\\")},dispatchGroup:function(){return{x:Math.ceil(f/64)}}})}(p,e,t)}})}(e.inputs,n,t))},t.parseEinsumAttributes=function(e){var t=e.equation.replace(/\\\\s+/g,\\\"\\\");return(0,c.createAttributeWithCacheKey)({equation:t})}},8856:function(e,t,n){\\\"use strict\\\";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},r.apply(this,arguments)},a=this&&this.__read||function(e,t){var n=\\\"function\\\"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,a,o=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)i.push(r.value)}catch(e){a={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(a)throw a.error}}return i},o=this&&this.__spreadArray||function(e,t,n){if(n||2===arguments.length)for(var r,a=0,o=t.length;a<o;a++)!r&&a in t||(r||(r=Array.prototype.slice.call(t,0,a)),r[a]=t[a]);return e.concat(r||Array.prototype.slice.call(t))};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.expand=t.expandProgramMetadata=void 0;var i=n(6952),c=n(1163),u=n(2075);t.expandProgramMetadata={name:\\\"Expand\\\",inputTypes:[c.GpuDataType.default]};var s=function(e,t){for(var n=e.length-t.length,r=[],a=0;a<n;++a)r.push(e[a]);for(a=0;a<t.length;++a)r.push(1===t[a]?e[a+n]:t[a]);return r};t.expand=function(e){!function(e){if(!e||2!==e.length)throw new Error(\\\"Expand requires 2 input.\\\");for(var t=e[0].dims,n=Array.from(e[1].getBigInt64Array(),Number),r=n.length<t.length?0:n.length-t.length,a=t.length<n.length?0:t.length-n.length;r<n.length&&a<t.length;++r,++a)if(n[r]!==t[a]&&1!==n[r]&&1!==t[a])throw new Error(\\\"Expand requires shape to be broadcastable to input\\\")}(e.inputs);var n=Array.from(e.inputs[1].getBigInt64Array(),Number).toString();e.compute(r(r({},t.expandProgramMetadata),{cacheHint:n,get:function(){return n=t.expandProgramMetadata,l=e.inputs,p=l[0].dims,d=Array.from(l[1].getBigInt64Array(),Number),f=function(e,t){return e.length>t.length?s(e,t):s(t,e)}(p,d),h=i.ShapeUtil.size(f),g=l[0].dataType,m=(0,u.inputVariable)(\\\"input\\\",g,p),v=(0,u.outputVariable)(\\\"output\\\",g,f),r(r({},n),{getShaderSource:function(e){return\\\"\\\\n  const inputShape = \\\".concat(m.indices.apply(m,o([],a(p),!1)),\\\";\\\\n  \\\").concat(e.declareVariables(m,v),\\\"\\\\n  \\\").concat(e.mainStart(),\\\"\\\\n  \\\").concat(e.guardAgainstOutOfBoundsWorkgroupSizes(h),\\\"\\\\n    let outputIndices = \\\").concat(v.offsetToIndices(\\\"global_idx\\\"),\\\";\\\\n    var inputIndices: \\\").concat(m.type.indices,\\\";\\\\n    for (var i = 0; i < \\\").concat(p.length,\\\"; i++) {\\\\n      if (\\\").concat(m.indicesGet(\\\"inputShape\\\",\\\"i\\\"),\\\" == 1) {\\\\n        \\\").concat(m.indicesSet(\\\"inputIndices\\\",\\\"i\\\",0),\\\"\\\\n      } else {\\\\n        \\\").concat(m.indicesSet(\\\"inputIndices\\\",\\\"i\\\",v.indicesGet(\\\"outputIndices\\\",\\\"i + \\\".concat(f.length-p.length))),\\\"\\\\n      }\\\\n    }\\\\n    \\\").concat(v.setByOffset(\\\"global_idx\\\",m.getByIndices(\\\"inputIndices\\\")),\\\"\\\\n  }\\\")},outputs:[{dims:f,dataType:l[0].dataType,gpuDataType:c.GpuDataType.default}],dispatchGroup:function(){return{x:Math.ceil(h/64)}}});var n,l,p,d,f,h,g,m,v}}),{inputs:[0]})}},3997:function(e,t,n){\\\"use strict\\\";var r=this&&this.__read||function(e,t){var n=\\\"function\\\"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,a,o=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)i.push(r.value)}catch(e){a={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(a)throw a.error}}return i};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.parseInternalActivationAttributes=t.getActicationSnippet=void 0;var a=n(6952);t.getActicationSnippet=function(e){switch(e.activation){case\\\"Relu\\\":return{activationFunction:\\\"\\\",applyActivation:\\\"value = max(value, 0.0);\\\"};case\\\"Sigmoid\\\":return{activationFunction:\\\"\\\",applyActivation:\\\"value = (1.0 / (1.0 + exp(-value)));\\\"};case\\\"Clip\\\":return{activationFunction:\\\"const clip_min_=f32(\\\".concat(e.clipMin,\\\");const clip_max_=f32(\\\").concat(e.clipMax,\\\");\\\"),applyActivation:\\\"value = clamp(value, clip_min_, clip_max_);\\\"};default:return{activationFunction:\\\"\\\",applyActivation:\\\"\\\"}}},t.parseInternalActivationAttributes=function(e){var t=(null==e?void 0:e.activation)||\\\"\\\";if(\\\"Clip\\\"===t){var n=r((null==e?void 0:e.activation_params)||[a.MIN_CLIP,a.MAX_CLIP],2),o=n[0],i=n[1];return{activation:t,clipMax:i,clipMin:o,activationCacheKey:\\\"\\\".concat(t,\\\":\\\").concat(o,\\\",\\\").concat(i)}}return{activation:t,activationCacheKey:t}}},9218:function(e,t,n){\\\"use strict\\\";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},r.apply(this,arguments)};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.gatherElements=t.parseGatherElementsAttributes=void 0;var a=n(6952),o=n(387),i=n(1163),c=n(2075);t.parseGatherElementsAttributes=function(e){return(0,o.createAttributeWithCacheKey)({axis:e.axis})},t.gatherElements=function(e,t){!function(e){if(!e||2!==e.length)throw new Error(\\\"GatherElements requires 2 inputs.\\\");if(e[0].dims.length<1)throw new Error(\\\"GatherElements requires that the data input be rank >= 1.\\\");if(e[0].dims.length!==e[1].dims.length)throw new Error(\\\"GatherElements requires that the data input and\\\\n                     indices input tensors be of same rank.\\\")}(e.inputs);var n={name:\\\"GatherElements\\\",inputTypes:[i.GpuDataType.default,i.GpuDataType.default],cacheHint:t.cacheKey};e.compute(function(e,t,n){var o=t[0].dims,u=t[0].dataType,s=o.length,l=a.ShapeUtil.computeStrides(o),p=a.ShapeUtil.size(o),d=t[1].dims,f=t[1].dataType,h=a.ShapeUtil.size(d),g=a.ShapeUtil.normalizeAxis(n.axis,s),m=o[g],v=d.slice(0),y=a.ShapeUtil.size(v),b=(0,c.inputVariable)(\\\"input\\\",u,o),w=(0,c.inputVariable)(\\\"indices\\\",f,[h]),S=(0,c.outputVariable)(\\\"output\\\",u,v);return r(r({},e),{outputs:[{dims:v,dataType:t[0].dataType,gpuDataType:i.GpuDataType.default}],getShaderSource:function(e){return\\\"\\\\n      const inputStrides = array<u32, \\\".concat(l.length,\\\">(\\\").concat(l.map((function(e){return\\\"\\\".concat(e,\\\"u\\\")})).join(\\\",\\\"),\\\");\\\\n      \\\").concat(e.declareVariables(b,w,S),\\\"\\\\n      \\\").concat(e.mainStart(),\\\"\\\\n      \\\").concat(e.guardAgainstOutOfBoundsWorkgroupSizes(y),\\\"\\\\n\\\\n      let outputIndices = \\\").concat(S.offsetToIndices(\\\"global_idx\\\"),\\\";\\\\n\\\\n      var idx = \\\").concat(w.getByOffset(\\\"global_idx\\\"),\\\";\\\\n      if (idx < 0) {\\\\n        idx = idx + \\\").concat(m,\\\";\\\\n      }\\\\n\\\\n      var srcOffset = u32(0);\\\\n\\\\n      for (var i = 0; i < \\\").concat(o.length,\\\"; i++) {\\\\n        if (i == \\\").concat(g,\\\") {\\\\n          srcOffset +=  u32(idx) * inputStrides[i];\\\\n        } else {\\\\n          srcOffset += \\\").concat(S.indicesGet(\\\"outputIndices\\\",\\\"i\\\"),\\\" * inputStrides[i];\\\\n        }\\\\n      }\\\\n\\\\n      // Should never hit this with valid values in indices\\\\n      // This is a guard against malicious data in the indices input\\\\n      if (srcOffset < 0 || srcOffset >= \\\").concat(p,\\\") {\\\\n        return;\\\\n      }\\\\n\\\\n      output[global_idx] = input[srcOffset];\\\\n  }\\\")},dispatchGroup:function(){return{x:Math.ceil(y/64)}}})}(n,e.inputs,t))}},8405:function(e,t,n){\\\"use strict\\\";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},r.apply(this,arguments)},a=this&&this.__read||function(e,t){var n=\\\"function\\\"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,a,o=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)i.push(r.value)}catch(e){a={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(a)throw a.error}}return i},o=this&&this.__spreadArray||function(e,t,n){if(n||2===arguments.length)for(var r,a=0,o=t.length;a<o;a++)!r&&a in t||(r||(r=Array.prototype.slice.call(t,0,a)),r[a]=t[a]);return e.concat(r||Array.prototype.slice.call(t))};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.gather=t.parseGatherAttributes=void 0;var i=n(6952),c=n(387),u=n(1163),s=n(2075);t.parseGatherAttributes=function(e){return(0,c.createAttributeWithCacheKey)({axis:e.axis})},t.gather=function(e,t){!function(e){if(!e||2!==e.length)throw new Error(\\\"Gather requires 2 inputs.\\\")}(e.inputs);var n={name:\\\"Gather\\\",inputTypes:[u.GpuDataType.default,u.GpuDataType.default],cacheHint:t.cacheKey};e.compute(function(e,t,n){var c=t[0].dims,l=t[1].dims,p=c.length,d=i.ShapeUtil.normalizeAxis(n.axis,p),f=c.slice(0);f.splice.apply(f,o([d,1],a(l),!1));var h=c[d],g=i.ShapeUtil.size(f),m=(0,s.inputVariable)(\\\"data\\\",t[0].dataType,t[0].dims),v=(0,s.inputVariable)(\\\"inputIndices\\\",t[1].dataType,t[1].dims),y=(0,s.outputVariable)(\\\"output\\\",t[0].dataType,f);return r(r({},e),{outputs:[{dims:f,dataType:t[0].dataType,gpuDataType:u.GpuDataType.default}],getShaderSource:function(e){return\\\"\\\\n      \\\".concat(e.declareVariables(m,v,y),\\\"\\\\n      \\\").concat(e.mainStart(),\\\"\\\\n        \\\").concat(e.guardAgainstOutOfBoundsWorkgroupSizes(g),\\\"\\\\n        let outputIndices = \\\").concat(y.offsetToIndices(\\\"global_idx\\\"),\\\";\\\\n        \\\").concat(function(){for(var e=l.length,t=\\\"var indicesIndices  = \\\".concat(v.type.indices,\\\"(0);\\\"),n=0;n<e;n++)t+=\\\"\\\".concat(e>1?\\\"indicesIndices[\\\".concat(n,\\\"]\\\"):\\\"indicesIndices\\\",\\\" = \\\").concat(f.length>1?\\\"outputIndices[\\\".concat(d+n,\\\"]\\\"):\\\"outputIndices\\\",\\\";\\\");t+=\\\"\\\\n        var idx = \\\".concat(v.getByIndices(\\\"indicesIndices\\\"),\\\";\\\\n        if (idx < 0) {\\\\n          idx = idx + \\\").concat(h,\\\";\\\\n        }\\\\n        var dataIndices = \\\").concat(m.type.indices,\\\"(0);\\\\n      \\\"),n=0;for(var r=0;n<p;n++)n===d?(t+=\\\"\\\".concat(p>1?\\\"dataIndices[\\\".concat(n,\\\"]\\\"):\\\"dataIndices\\\",\\\" = u32(idx);\\\"),r+=e):(t+=\\\"\\\".concat(p>1?\\\"dataIndices[\\\".concat(n,\\\"]\\\"):\\\"dataIndices\\\",\\\" = \\\").concat(f.length>1?\\\"outputIndices[\\\".concat(r,\\\"]\\\"):\\\"outputIndices\\\",\\\";\\\"),r++);return t}(),\\\";\\\\n        let value = \\\").concat(m.getByIndices(\\\"dataIndices\\\"),\\\";\\\\n        \\\").concat(y.setByOffset(\\\"global_idx\\\",\\\"value\\\"),\\\";\\\\n      }\\\")},dispatchGroup:function(){return{x:Math.ceil(g/64)}}})}(n,e.inputs,t))}},4271:function(e,t,n){\\\"use strict\\\";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},r.apply(this,arguments)},a=this&&this.__read||function(e,t){var n=\\\"function\\\"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,a,o=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)i.push(r.value)}catch(e){a={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(a)throw a.error}}return i};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.parseGemmAttributes=t.gemm=void 0;var o=n(6952),i=n(387),c=n(1163),u=n(2075);t.gemm=function(e,t){!function(e){if(!e)throw new Error(\\\"Input is missing\\\");if(e.length<2||e.length>3)throw new Error(\\\"Invaid input number.\\\");if(3===e.length&&e[2].dims.length>2)throw new Error(\\\"Invalid input shape of C\\\");if(e[0].dataType!==e[1].dataType||3===e.length&&e[0].dataType!==e[2].dataType)throw new Error(\\\"Input types are mismatched\\\")}(e.inputs),e.compute(function(e,t){var n={name:\\\"Gemm\\\",inputTypes:3===e.length?[c.GpuDataType.default,c.GpuDataType.default,c.GpuDataType.default]:[c.GpuDataType.default,c.GpuDataType.default],cacheHint:t.cacheKey};return r(r({},n),{get:function(){return function(e,t,n){var i=t[0].dims.slice(),s=t[1].dims.slice(),l=a(o.GemmUtil.getShapeOfGemmResult(i,n.transA,s,n.transB,3===t.length?t[2].dims:void 0),3),p=l[0],d=l[1],f=l[2],h=[p,d];if(!h)throw new Error(\\\"Can't use gemm on the given tensors\\\");var g=o.ShapeUtil.size(h),m=\\\"\\\";n.transA&&n.transB?m=\\\"value += a[k * M + m] * b[n * K + k];\\\":n.transA&&!n.transB?m=\\\"value += a[k * M + m] * b[k * N + n];\\\":!n.transA&&n.transB?m=\\\"value += a[m * K + k] * b[n * K + k];\\\":n.transA||n.transB||(m=\\\"value += a[m * K + k] * b[k * N + n];\\\");var v=(0,u.tensorTypeToWsglStorageType)(t[0].dataType),y=1===n.alpha?\\\"\\\":\\\"value *= alpha;\\\",b=3===t.length?\\\"value += beta * c[\\\".concat(function(e,t,n){if(0===n.length)return\\\"0u\\\";var r=1===n.length&&1!==e||2===n.length&&n[0]!==e,a=n[n.length-1]!==t,o=\\\"0u\\\";return r||(o+=\\\"+ m * \\\".concat(n[n.length-1],\\\"u\\\")),a||(o+=\\\"+n\\\"),o}(p,d,t[2].dims),\\\"];\\\"):\\\"\\\",w=[\\\"@group(0) @binding(0) var<storage, read> a : array<\\\".concat(v,\\\">;\\\"),\\\"@group(0) @binding(1) var<storage, read> b : array<\\\".concat(v,\\\">;\\\")];return 3===t.length&&w.push(\\\"@group(0) @binding(2) var<storage, read> c : array<\\\".concat(v,\\\">;\\\")),r(r({},e),{outputs:[{dims:h,dataType:t[0].dataType,gpuDataType:c.GpuDataType.default}],getShaderSource:function(e){return\\\"\\\\n  const M: u32 = \\\".concat(p,\\\"u;\\\\n  const N: u32 = \\\").concat(d,\\\"u;\\\\n  const K: u32 = \\\").concat(f,\\\"u;\\\\n  const alpha = \\\").concat(v,\\\"(\\\").concat(n.alpha,\\\");\\\\n  const beta = \\\").concat(v,\\\"(\\\").concat(n.beta,\\\");\\\\n\\\\n  \\\").concat(w.join(\\\"\\\\n\\\"),\\\"\\\\n  @group(0) @binding(\\\").concat(t.length,\\\") var<storage, read_write> output : array<\\\").concat(v,\\\">;\\\\n\\\\n  \\\").concat(e.mainStart(),\\\"\\\\n    \\\").concat(e.guardAgainstOutOfBoundsWorkgroupSizes(g),\\\"\\\\n\\\\n    let m = global_id.x / N;\\\\n    let n = global_id.x % N;\\\\n\\\\n    var value = \\\").concat(v,\\\"(0);\\\\n    for (var k: u32 = 0u; k<\\\").concat(f,\\\"u; k++) {\\\\n      \\\").concat(m,\\\"\\\\n    }\\\\n\\\\n    \\\").concat(y,\\\"\\\\n    \\\").concat(b,\\\"\\\\n    output[global_id.x] = value;\\\\n\\\\n  }\\\")},dispatchGroup:function(){return{x:Math.ceil(g/64)}}})}(n,e,t)}})}(e.inputs,t))},t.parseGemmAttributes=function(e){return(0,i.createAttributeWithCacheKey)(e)}},1798:function(e,t,n){\\\"use strict\\\";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},r.apply(this,arguments)},a=this&&this.__read||function(e,t){var n=\\\"function\\\"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,a,o=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)i.push(r.value)}catch(e){a={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(a)throw a.error}}return i},o=this&&this.__spreadArray||function(e,t,n){if(n||2===arguments.length)for(var r,a=0,o=t.length;a<o;a++)!r&&a in t||(r||(r=Array.prototype.slice.call(t,0,a)),r[a]=t[a]);return e.concat(r||Array.prototype.slice.call(t))};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.instanceNorm=t.parseInstanceNormAttributes=void 0;var i=n(6952),c=n(387),u=n(1163),s=n(2075);t.parseInstanceNormAttributes=function(e){return(0,c.createAttributeWithCacheKey)({epsilon:e.epsilon,format:e.format})},t.instanceNorm=function(e,t){var n={name:\\\"InstanceNormalization\\\",inputTypes:[u.GpuDataType.default,u.GpuDataType.default,u.GpuDataType.default],cacheHint:t.cacheKey};\\\"NHWC\\\"===t.format?e.compute(function(e,t,n){var a=t[0].dims,o=a,c=i.ShapeUtil.size(o),l=a[0],p=a[a.length-1],d=i.ShapeUtil.sizeFromDimension(a,1)/p,f=(0,s.tensorTypeToWsglStorageType)(t[0].dataType),h=p*l;return r(r({},e),{outputs:[{dims:o,dataType:t[0].dataType,gpuDataType:u.GpuDataType.default}],getShaderSource:function(e){return\\\"\\\\n  const N: u32 = \\\".concat(l,\\\";\\\\n  const H: u32 = \\\").concat(d,\\\";\\\\n  const C: u32 = \\\").concat(p,\\\";\\\\n  const normSizeTyped: \\\").concat(f,\\\" = \\\").concat(d,\\\";\\\\n  const imageSize: u32 = \\\").concat(d*p,\\\";\\\\n  const epsilon: f32 = \\\").concat(n.epsilon,\\\";\\\\n\\\\n  @group(0) @binding(0) var<storage, read> x : array<\\\").concat(f,\\\">;\\\\n  @group(0) @binding(1) var<storage, read> scale : array<\\\").concat(f,\\\">;\\\\n  @group(0) @binding(2) var<storage, read> bias : array<\\\").concat(f,\\\">;\\\\n  @group(0) @binding(3) var<storage, read_write> output : array<\\\").concat(f,\\\">;\\\\n\\\\n  \\\").concat(e.mainStart(),\\\"\\\\n    let currentImageNumber = global_idx / C;\\\\n    let currentChannelNumber = global_idx % C;\\\\n\\\\n    // offset is channel num * N\\\\n    let offset = currentImageNumber * imageSize;\\\\n    if (offset >= \\\").concat(c,\\\") { return; }\\\\n    var mean: \\\").concat(f,\\\" = 0;\\\\n\\\\n    for (var i: u32 = 0u; i < H; i++) {\\\\n        mean = mean + x[offset + i * C + currentChannelNumber];\\\\n    }\\\\n    mean = mean / normSizeTyped;\\\\n\\\\n    var squaredNorm: \\\").concat(f,\\\" = 0;\\\\n    for (var i: u32 = 0u; i < H; i++) {\\\\n        let deviation: f32 = x[offset + i * C + currentChannelNumber] - mean;\\\\n        squaredNorm = squaredNorm + deviation * deviation;\\\\n    }\\\\n    let invStdDev = 1 / sqrt(squaredNorm / normSizeTyped + epsilon);\\\\n    let channelScale = invStdDev * scale[currentChannelNumber];\\\\n    let channelShift = bias[currentChannelNumber] - mean * channelScale;\\\\n    for (var i: u32 = 0u; i < H; i++) {\\\\n        let currentOffset = offset + i * C + currentChannelNumber;\\\\n        output[currentOffset] = x[currentOffset] * channelScale + channelShift;\\\\n    }\\\\n  }\\\")},dispatchGroup:function(){return{x:Math.ceil(h/64)}}})}(n,e.inputs,t)):e.compute(function(e,t,n){var c=t[0].dims,l=c,p=i.ShapeUtil.sizeToDimension(c,2),d=i.ShapeUtil.sizeFromDimension(c,2),f=c[1],h=(0,s.inputVariable)(\\\"x\\\",t[0].dataType,[c[0],c[1],d]),g=(0,s.inputVariable)(\\\"scale\\\",t[1].dataType,t[1].dims),m=(0,s.inputVariable)(\\\"bias\\\",t[2].dataType,t[2].dims),v=(0,s.outputVariable)(\\\"output\\\",t[0].dataType,[c[0],c[1],d]),y=[h,g,m,v],b=h.type.value;return r(r({},e),{outputs:[{dims:l,dataType:t[0].dataType,gpuDataType:u.GpuDataType.default}],getShaderSource:function(e){return\\\"\\\\n\\\\n  const C: u32 = \\\".concat(f,\\\";\\\\n  const normSize: u32 = \\\").concat(d,\\\";\\\\n  const epsilon: f32 = \\\").concat(n.epsilon,\\\";\\\\n  var<workgroup> meanShared : \\\").concat(b,\\\";\\\\n  var<workgroup> squaredNormShared : \\\").concat(b,\\\";\\\\n  var<workgroup> workgroupShared : array<\\\").concat(b,\\\", \\\").concat(64,\\\">;\\\\n  const workgroupSize = \\\").concat(64,\\\"u;\\\\n  \\\").concat(e.declareVariables.apply(e,o([],a(y),!1)),\\\"\\\\n  \\\").concat(e.mainStart(64),\\\"\\\\n    let norm = global_idx / workgroupSize;\\\\n    let batch = norm / C;\\\\n    let channel = norm % C;\\\\n    let localIndex = local_id.x;\\\\n\\\\n    // initialize workgroup memory\\\\n    var initial: \\\").concat(b,\\\" = 0;\\\\n    for (var h = localIndex; h < normSize; h += workgroupSize) {\\\\n      initial = initial + \\\").concat(h.get(\\\"batch\\\",\\\"channel\\\",\\\"h\\\"),\\\";\\\\n    }\\\\n    workgroupShared[localIndex] = initial;\\\\n    workgroupBarrier();\\\\n\\\\n    // Calculate the mean of current channel data.\\\\n    for (var currSize = workgroupSize >> 1;  currSize > 0; currSize = currSize >> 1) {\\\\n      if (localIndex < currSize) {\\\\n        workgroupShared[localIndex] = workgroupShared[localIndex] + workgroupShared[localIndex + currSize];\\\\n      }\\\\n      workgroupBarrier();\\\\n    }\\\\n    if (localIndex == 0) {\\\\n      meanShared = workgroupShared[0] / \\\").concat(b,\\\"(normSize);\\\\n    }\\\\n    workgroupBarrier();\\\\n\\\\n    // reinitialize workgroup memory.\\\\n    initial = 0;\\\\n    for (var h = localIndex; h < normSize; h += workgroupSize) {\\\\n      let deviation =  \\\").concat(h.get(\\\"batch\\\",\\\"channel\\\",\\\"h\\\"),\\\" - meanShared;\\\\n      initial = initial + deviation * deviation;\\\\n    }\\\\n    workgroupShared[localIndex] = initial;\\\\n    workgroupBarrier();\\\\n\\\\n    // Calculate the sum of square of deviation of current channel data.\\\\n    for (var currSize = workgroupSize >> 1;  currSize > 0; currSize = currSize >> 1) {\\\\n      if (localIndex < currSize) {\\\\n        workgroupShared[localIndex] = workgroupShared[localIndex] + workgroupShared[localIndex + currSize];\\\\n      }\\\\n      workgroupBarrier();\\\\n    }\\\\n    if (localIndex == 0) {\\\\n      squaredNormShared = workgroupShared[0];\\\\n    }\\\\n    workgroupBarrier();\\\\n\\\\n    let invStdDev = 1 / sqrt(squaredNormShared / \\\").concat(b,\\\"(normSize) + epsilon);\\\\n    let channelScale = invStdDev * \\\").concat(g.getByOffset(\\\"channel\\\"),\\\";\\\\n    let channelShift = \\\").concat(m.getByOffset(\\\"channel\\\"),\\\" - meanShared * channelScale;\\\\n    for (var h = localIndex; h < normSize; h += workgroupSize) {\\\\n      let value = \\\").concat(h.get(\\\"batch\\\",\\\"channel\\\",\\\"h\\\"),\\\" * channelScale + channelShift;\\\\n      \\\").concat(v.set(\\\"batch\\\",\\\"channel\\\",\\\"h\\\",\\\"value\\\"),\\\";\\\\n    }\\\\n  }\\\")},dispatchGroup:function(){return{x:p}}})}(n,e.inputs,t))}},6145:function(e,t,n){\\\"use strict\\\";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},r.apply(this,arguments)};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.layerNorm=t.parseLayerNormAttributes=void 0;var a=n(6952),o=n(387),i=n(1163),c=n(2075);t.parseLayerNormAttributes=function(e){return(0,o.createAttributeWithCacheKey)({axis:e.axis,epsilon:e.epsilon})},t.layerNorm=function(e,t){!function(e){if(!e||e.length<2)throw new Error(\\\"layerNorm requires at least 2 inputs.\\\");if(1!==e[0].dataType||1!==e[1].dataType)throw new Error(\\\"inputs should be float type\\\")}(e.inputs);var n={name:\\\"LayerNormalization\\\",inputTypes:2===e.inputs.length?[i.GpuDataType.default,i.GpuDataType.default]:[i.GpuDataType.default,i.GpuDataType.default,i.GpuDataType.default],cacheHint:t.cacheKey+e.outputCount.toString(10)+e.inputs.length.toString(10)};e.compute(function(e,t,n,o){var u=t[0].dims,s=t[1],l=t[2],p=u,d=a.ShapeUtil.size(p),f=a.ShapeUtil.normalizeAxis(n.axis,u.length),h=a.ShapeUtil.sizeToDimension(u,f),g=a.ShapeUtil.sizeFromDimension(u,f),m=a.ShapeUtil.size(s.dims),v=l?a.ShapeUtil.size(l.dims):0;if(m!==g||l&&v!==g)throw new Error(\\\"Size of X.shape()[axis:] == \\\".concat(g,\\\".\\\\n       Size of scale and bias (if provided) must match this.\\\\n       Got scale size of \\\").concat(m,\\\" and bias size of \\\").concat(v));for(var y=[],b=0;b<u.length;++b)b<f?y.push(u[b]):y.push(1);var w=(0,c.tensorTypeToWsglStorageType)(t[0].dataType),S=o>1,_=o>2,x=0,T=[{dims:p,dataType:t[0].dataType,gpuDataType:i.GpuDataType.default}];return S&&T.push({dims:y,dataType:t[0].dataType,gpuDataType:i.GpuDataType.default}),_&&T.push({dims:y,dataType:t[0].dataType,gpuDataType:i.GpuDataType.default}),r(r({},e),{outputs:T,getShaderSource:function(e){return\\\"\\\\n  const normSize: u32 = \\\".concat(g,\\\";\\\\n  const normSizeTyped: \\\").concat(w,\\\" = \\\").concat(g,\\\";\\\\n  const epsilon: f32 = \\\").concat(n.epsilon,\\\";\\\\n\\\\n  @group(0) @binding(\\\").concat(x++,\\\") var<storage, read> x : array<\\\").concat(w,\\\">;\\\\n  @group(0) @binding(\\\").concat(x++,\\\") var<storage, read> scale : array<\\\").concat(w,\\\">;\\\\n  \\\").concat(l?\\\"@group(0) @binding(\\\".concat(x++,\\\") var<storage, read> bias : array<\\\").concat(w,\\\">;\\\"):\\\"\\\",\\\"\\\\n  @group(0) @binding(\\\").concat(x++,\\\") var<storage, read_write> output : array<\\\").concat(w,\\\">;\\\\n  \\\").concat(S?\\\"@group(0) @binding(\\\".concat(x++,\\\") var<storage, read_write> meanDataOutput : array<\\\").concat(w,\\\">\\\"):\\\"\\\",\\\";\\\\n  \\\").concat(_?\\\"@group(0) @binding(\\\".concat(x++,\\\") var<storage, read_write> invStdOutput : array<\\\").concat(w,\\\">\\\"):\\\"\\\",\\\";\\\\n\\\\n  \\\").concat(e.mainStart(),\\\"\\\\n    let offset = global_idx * normSize;\\\\n    if (offset >= \\\").concat(d,\\\") { return; }\\\\n    var mean: \\\").concat(w,\\\" = 0;\\\\n    var meanSquare: \\\").concat(w,\\\" = 0;\\\\n\\\\n    for (var h: u32 = 0u; h < normSize; h++) {\\\\n      mean = mean + x[h + offset];\\\\n      meanSquare = meanSquare + x[h + offset] * x[h + offset];\\\\n    }\\\\n    mean = mean / normSizeTyped;\\\\n    meanSquare = sqrt(meanSquare / normSizeTyped - mean * mean + epsilon);\\\\n\\\\n    for (var j: u32 = 0; j < normSize; j++) {\\\\n      output[j + offset] = (x[j + offset] - mean) / meanSquare * scale[j] \\\").concat(l?\\\"+ bias[j]\\\":\\\"\\\",\\\";\\\\n    }\\\\n\\\\n    \\\").concat(S?\\\"meanDataOutput[global_idx] = mean\\\":\\\"\\\",\\\";\\\\n    \\\").concat(_?\\\"invStdOutput[global_idx] = 1 / meanSquare\\\":\\\"\\\",\\\";\\\\n  }\\\")},dispatchGroup:function(){return{x:Math.ceil(h/64)}}})}(n,e.inputs,t,e.outputCount))}},1522:function(e,t,n){\\\"use strict\\\";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},r.apply(this,arguments)};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.matMul=t.createMatmulProgramInfoLoader=void 0;var a=n(6952),o=n(1163),i=n(158);t.createMatmulProgramInfoLoader=function(e,t,n,a,c){void 0===c&&(c=!1);var u,s,l=(u=e.length>2,s=t.activationCacheKey,{name:\\\"MatMul\\\",inputTypes:u?[o.GpuDataType.default,o.GpuDataType.default,o.GpuDataType.default]:[o.GpuDataType.default,o.GpuDataType.default],cacheHint:s});return r(r({},l),{get:function(){return(0,i.createMatmulProgramInfo)(l,e,t,n,a,c)}})},t.matMul=function(e){!function(e){if(!e||2!==e.length)throw new Error(\\\"MatMul requires 2 inputs.\\\");if(e[0].dims[e[0].dims.length-1]!==e[1].dims[e[1].dims.length-2])throw new Error(\\\"shared dimension does not match.\\\")}(e.inputs);var n=a.BroadcastUtil.calcShape(e.inputs[0].dims,e.inputs[1].dims,!0);if(!n)throw new Error(\\\"Can't use matmul on the given tensors\\\");e.compute((0,t.createMatmulProgramInfoLoader)(e.inputs,{activation:\\\"\\\",activationCacheKey:\\\"\\\"},n))}},3053:function(e,t,n){\\\"use strict\\\";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},r.apply(this,arguments)};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.parsePadAttributes=t.pad=void 0;var a=n(6952),o=n(387),i=n(1163),c=n(2075),u=function(e,t){var n=function(e,t){if(e.length>1){var n=e[1].getBigInt64Array(),r=e.length>=3&&e[2].data?e[2].getFloat32Array()[0]:0,a=e[0].dims.length,i=new Int32Array(2*a).fill(0);if(e.length>=4)for(var c=e[3].getBigInt64Array(),u=0;u<c.length;u++)i[Number(c[u])]=Number(n[u]),i[Number(c[u])+a]=Number(n[u+c.length]);else n.forEach((function(e,t){return i[Number(t)]=Number(e)}));var s=[];return i.forEach((function(e){return s.push(e)})),(0,o.createAttributeWithCacheKey)({mode:t.mode,value:r,pads:s})}return t}(e,t),u={name:\\\"Pad\\\",inputTypes:[i.GpuDataType.default],cacheHint:n.cacheKey};return r(r({},u),{get:function(){return function(e,t,n){var o=a.ShapeUtil.padShape(e[0].dims.slice(),n.pads);return r(r({},t),{outputs:[{dims:o,dataType:e[0].dataType,gpuDataType:i.GpuDataType.default}],getShaderSource:function(t){return function(e,t,n,r){var o=t[0].dims,i=a.ShapeUtil.padShape(o.slice(),n.pads),u=a.ShapeUtil.size(i),s=a.ShapeUtil.computeStrides(o),l=(0,c.outputVariable)(\\\"output\\\",t[0].dataType,i),p=(0,c.inputVariable)(\\\"x\\\",t[0].dataType,o),d=function(e,t,n,r,a,o){switch(a.mode){case 0:return function(e,t,n,r,a,o,i){for(var c=\\\"\\\",u=n.length-1;u>=0;--u)c+=\\\"\\\\n            k = i32(\\\".concat(e.indicesGet(\\\"indices\\\",u),\\\") - \\\").concat(a[u],\\\";\\\\n            if (k < 0) {\\\\n              break;\\\\n            }\\\\n            if (k >= \\\").concat(n[u],\\\") {\\\\n              break;\\\\n            }\\\\n            offset += k * \\\").concat(r[u],\\\";\\\\n        \\\");return\\\"\\\\n          value = \\\".concat(o,\\\"(\\\").concat(i,\\\");\\\\n          for (var i = 0; i < 1; i++) {\\\\n            var offset = 0;\\\\n            var k = 0;\\\\n            \\\").concat(c,\\\"\\\\n            value = x[offset];\\\\n          }\\\\n      \\\")}(e,0,n,r,a.pads,o,a.value);case 1:return function(e,t,n,r,a){for(var o=\\\"\\\",i=n.length-1;i>=0;--i)o+=\\\"\\\\n                k = i32(\\\".concat(e.indicesGet(\\\"indices\\\",i),\\\") - \\\").concat(a[i],\\\";\\\\n                if (k < 0) {\\\\n                  k = -k;\\\\n                }\\\\n                {\\\\n                  let _2n_1 = \\\").concat(2*(n[i]-1),\\\";\\\\n                  k = k % _2n_1;\\\\n                  if(k >= \\\").concat(n[i],\\\") {\\\\n                    k = _2n_1 - k;\\\\n                  }\\\\n                }\\\\n                offset += k * \\\").concat(r[i],\\\";\\\\n            \\\");return\\\"\\\\n              var offset = 0;\\\\n              var k = 0;\\\\n              \\\".concat(o,\\\"\\\\n              value = x[offset];\\\\n          \\\")}(e,0,n,r,a.pads);case 2:return function(e,t,n,r,a){for(var o=\\\"\\\",i=n.length-1;i>=0;--i)o+=\\\"\\\\n                k = i32(\\\".concat(e.indicesGet(\\\"indices\\\",i),\\\") - \\\").concat(a[i],\\\";\\\\n                if (k < 0) {\\\\n                  k = 0;\\\\n                }\\\\n                if (k >= \\\").concat(n[i],\\\") {\\\\n                  k = \\\").concat(n[i]-1,\\\";\\\\n                }\\\\n                offset += k * \\\").concat(r[i],\\\";\\\\n            \\\");return\\\"\\\\n              var offset = 0;\\\\n              var k = 0;\\\\n              \\\".concat(o,\\\"\\\\n              value = x[offset];\\\\n          \\\")}(e,0,n,r,a.pads);case 3:return function(e,t,n,r,a){for(var o=\\\"\\\",i=n.length-1;i>=0;--i)o+=\\\"\\\\n                k = i32(\\\".concat(e.indicesGet(\\\"indices\\\",i),\\\") - \\\").concat(a[i],\\\";\\\\n                if (k < 0)  {\\\\n                  k += \\\").concat(n[i],\\\";\\\\n                }\\\\n                if (k >= \\\").concat(n[i],\\\") {\\\\n                  k -= \\\").concat(n[i],\\\";\\\\n                }\\\\n                offset += k * \\\").concat(r[i],\\\";\\\\n            \\\");return\\\"\\\\n              var offset = 0;\\\\n              var k = 0;\\\\n              \\\".concat(o,\\\"\\\\n              value = x[offset];\\\\n          \\\")}(e,0,n,r,a.pads);default:throw new Error(\\\"Invalid mode\\\")}}(l,0,o,s,n,r);return\\\"\\\\n              \\\".concat(e.declareVariables(p,l),\\\"\\\\n              \\\").concat(l.impl(),\\\"\\\\n              \\\").concat(e.mainStart(),\\\"\\\\n              \\\").concat(e.guardAgainstOutOfBoundsWorkgroupSizes(u),\\\"\\\\n\\\\n              let indices = \\\").concat(l.offsetToIndices(\\\"global_idx\\\"),\\\";\\\\n\\\\n              var value = \\\").concat(r,\\\"(0);\\\\n              \\\").concat(d,\\\"\\\\n              output[global_idx] = value;\\\\n          }\\\")}(t,e,n,\\\"f32\\\")},dispatchGroup:function(){return{x:Math.ceil(a.ShapeUtil.size(o)/64)}}})}(e,u,n)}})};t.pad=function(e,t){!function(e){if(!e||e.length<1)throw new Error(\\\"Too few inputs\\\");if(1!==e[0].dataType)throw new Error(\\\"Input type must be float.\\\");if(e.length>=2){var t=2*e[0].dims.length===e[1].dims[0];if(4===e.length&&(t=2*e[3].dims[0]===e[1].dims[0]),!t)throw new Error(\\\"The pads should be a 1D tensor of shape [2 * input_rank] or [2 * num_axes].\\\")}}(e.inputs),e.compute(u(e.inputs,t),{inputs:[0]})},t.parsePadAttributes=function(e){var t=e.mode,n=e.value,r=e.pads;return(0,o.createAttributeWithCacheKey)({mode:t,value:n,pads:r})}},5262:function(e,t,n){\\\"use strict\\\";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},r.apply(this,arguments)},a=this&&this.__read||function(e,t){var n=\\\"function\\\"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,a,o=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)i.push(r.value)}catch(e){a={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(a)throw a.error}}return i};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.globalMaxPool=t.parseGlobalMaxPoolAttributes=t.parseMaxPoolAttributes=t.maxPool=t.globalAveragePool=t.parseGlobalAveragePoolAttributes=t.averagePool=t.parseAveragePoolAttributes=void 0;var o=n(6952),i=n(387),c=n(1163),u=n(2075),s=function(e){if(!e||1!==e.length)throw new Error(\\\"Pool ops requires 1 input.\\\");if(4!==e[0].dims.length)throw new Error(\\\"Pool ops supports 2-D inputs only for now.\\\")},l=function(e,t,n){var r=\\\"NHWC\\\"===t.format,a=r?[e.dims[0],e.dims[3],e.dims[1],e.dims[2]]:e.dims.slice(),i=Object.hasOwnProperty.call(t,\\\"dilations\\\"),c=t.kernelShape.slice(),u=t.strides.slice(),s=i?t.dilations.slice():[],l=t.pads.slice();o.PoolConvUtil.adjustPoolAttributes(n,a,c,u,s,l);var p=o.PoolConvUtil.computePoolOutputShape(n,a,u,s,c,l,t.autoPad),d=Object.assign({},t);return i?Object.assign(d,{kernelShape:c,strides:u,pads:l,dilations:s,cacheKey:t.cacheKey}):Object.assign(d,{kernelShape:c,strides:u,pads:l,cacheKey:t.cacheKey}),[d,r?[p[0],p[2],p[3],p[1]]:p]},p=function(e,t,n,r,a,i,c){var s=\\\"NHWC\\\"===r.format,l=t.shape,p=t.type.value,d=l.length,f=o.ShapeUtil.size(n),h=(0,u.outputVariable)(\\\"output\\\",t.type.tensor,n);if(r.kernelShape.length<=2){var g,m=r.kernelShape[r.kernelShape.length-1],v=r.strides[r.strides.length-1],y=r.pads[r.pads.length/2-1],b=d-(s?2:1),w=\\\"\\\",S=\\\"\\\";if(g=y+r.pads[r.pads.length-1]!==0?\\\"\\\\n              for (var i: u32 = 0u; i < \\\".concat(m,\\\"u; i++) {\\\\n                xIndices[\\\").concat(b,\\\"] = indices[\\\").concat(b,\\\"] * \\\").concat(v,\\\" - \\\").concat(y,\\\" + i;\\\\n                if (xIndices[\\\").concat(b,\\\"] < 0 || xIndices[\\\").concat(b,\\\"] >= \\\").concat(l[b],\\\") {\\\\n                  pad++;\\\\n                  continue;\\\\n                }\\\\n                let x_val = x[\\\").concat(t.indicesToOffset(\\\"xIndices\\\"),\\\"];\\\\n                \\\").concat(a,\\\"\\\\n              }\\\"):\\\"\\\\n              for (var i: u32 = 0u; i < \\\".concat(m,\\\"u; i++) {\\\\n                xIndices[\\\").concat(b,\\\"] = indices[\\\").concat(b,\\\"] * \\\").concat(v,\\\" - \\\").concat(y,\\\" + i;\\\\n                let x_val = x[\\\").concat(t.indicesToOffset(\\\"xIndices\\\"),\\\"];\\\\n                \\\").concat(a,\\\"\\\\n              }\\\"),2===r.kernelShape.length){var _=r.kernelShape[r.kernelShape.length-2],x=r.strides[r.strides.length-2],T=r.pads[r.pads.length/2-2],O=r.pads[r.pads.length-2],I=d-(s?3:2),A=l[I];w=T+O!==0?\\\"\\\\n                for (var j: u32 = 0u; j < \\\".concat(_,\\\"u; j++) {\\\\n                  xIndices[\\\").concat(I,\\\"] = indices[\\\").concat(I,\\\"] * \\\").concat(x,\\\" - \\\").concat(T,\\\" + j;\\\\n                  if (xIndices[\\\").concat(I,\\\"] < 0 || xIndices[\\\").concat(I,\\\"] >= \\\").concat(A,\\\") {\\\\n                    pad+= \\\").concat(m,\\\";\\\\n                    continue;\\\\n                  }\\\\n              \\\"):\\\"\\\\n                for (var j: u32 = 0u; j < \\\".concat(_,\\\"u; j++) {\\\\n                  xIndices[\\\").concat(I,\\\"] = indices[\\\").concat(I,\\\"] * \\\").concat(x,\\\" - \\\").concat(T,\\\" + j;\\\\n                \\\"),S=\\\"\\\\n              }\\\\n            \\\"}return\\\"\\\\n            \\\".concat(e.declareVariables(t,h),\\\"\\\\n\\\\n            \\\").concat(e.mainStart(),\\\"\\\\n              \\\").concat(e.guardAgainstOutOfBoundsWorkgroupSizes(f),\\\"\\\\n\\\\n              let indices = \\\").concat(h.offsetToIndices(\\\"global_idx\\\"),\\\";\\\\n              var xIndices = \\\").concat(h.offsetToIndices(\\\"global_idx\\\"),\\\";\\\\n\\\\n              var value: \\\").concat(p,\\\" = \\\").concat(p,\\\"(\\\").concat(c,\\\");\\\\n              var pad = 0;\\\\n              \\\").concat(w,\\\"\\\\n              \\\").concat(g,\\\"\\\\n              \\\").concat(S,\\\"\\\\n              \\\").concat(i,\\\"\\\\n\\\\n              output[global_idx] = value;\\\\n            }\\\")}if(s)throw new Error(\\\"Pooling with kernelShape.length > 2 is not supported for NHWC format.\\\");var E,C=o.ShapeUtil.size(r.kernelShape),P=o.ShapeUtil.computeStrides(r.kernelShape),M=P.length,D=r.pads.length;return E=r.pads.reduce((function(e,t){return e+t}))?\\\"\\\\n                if (xIndices[j] >= inputDims[j]) {\\\\n                  pad++;\\\\n                  isPad = true;\\\\n                  break;\\\\n                }\\\\n              }\\\\n              if (!isPad) {\\\\n                let x_val = x[\\\".concat(t.indicesToOffset(\\\"xIndices\\\"),\\\"];\\\\n                \\\").concat(a,\\\"\\\\n              }\\\"):\\\"\\\\n              }\\\\n              let x_val = x[\\\".concat(t.indicesToOffset(\\\"xIndices\\\"),\\\"];\\\\n              \\\").concat(a,\\\"\\\\n            \\\"),\\\"\\\\n            \\\".concat(e.declareVariables(t,h),\\\"\\\\n\\\\n            const pads = array<u32, \\\").concat(D,\\\">(\\\").concat(r.pads.map((function(e){return\\\"\\\".concat(e,\\\"u\\\")})).join(\\\",\\\"),\\\");\\\\n            const inputDims = array<u32, \\\").concat(d,\\\">(\\\").concat(l.map((function(e){return\\\"\\\".concat(e,\\\"u\\\")})).join(\\\",\\\"),\\\");\\\\n            const kernelStrides = array<u32, \\\").concat(M,\\\">(\\\").concat(P.map((function(e){return\\\"\\\".concat(e,\\\"u\\\")})).join(\\\",\\\"),\\\");\\\\n            const strides = array<u32, \\\").concat(M,\\\">(\\\").concat(r.strides.map((function(e){return\\\"\\\".concat(e,\\\"u\\\")})).join(\\\",\\\"),\\\");\\\\n\\\\n            \\\").concat(e.mainStart(),\\\"\\\\n              \\\").concat(e.guardAgainstOutOfBoundsWorkgroupSizes(f),\\\"\\\\n\\\\n              let indices = \\\").concat(h.offsetToIndices(\\\"global_idx\\\"),\\\";\\\\n              let xIndices = \\\").concat(h.offsetToIndices(\\\"global_idx\\\"),\\\";\\\\n\\\\n              var offsets: array<u32, \\\").concat(M,\\\">;\\\\n\\\\n              var value = \\\").concat(h.type.value,\\\"(\\\").concat(c,\\\");\\\\n              var pad = 0;\\\\n              var isPad = false;\\\\n\\\\n              for (var i: u32 = 0u; i < \\\").concat(C,\\\"u; i++) {\\\\n                var offset = i;\\\\n                for (var j = 0u; j < \\\").concat(M-1,\\\"u; j++) {\\\\n                  offsets[j] = offset / kernelStrides[j];\\\\n                  offset -= offsets[j] * kernelStrides[j];\\\\n                }\\\\n                offsets[\\\").concat(M-1,\\\"] = offset;\\\\n\\\\n                isPad = false;\\\\n                for (var j = \\\").concat(d-M,\\\"u; j < \\\").concat(d,\\\"u; j++) {\\\\n                  xIndices[j] = indices[j] * strides[j - \\\").concat(d-M,\\\"u]\\\\n                    + offsets[j - \\\").concat(d-M,\\\"u] - pads[j - 2u];\\\\n                  \\\").concat(E,\\\"\\\\n              }\\\\n              \\\").concat(i,\\\"\\\\n\\\\n              output[global_idx] = value;\\\\n            }\\\")},d=function(e){return{format:e.format,autoPad:[\\\"NOTSET\\\",\\\"VALID\\\",\\\"SAME_UPPER\\\",\\\"SAME_LOWER\\\"][e.auto_pad],ceilMode:e.ceil_mode,kernelShape:e.kernel_shape,strides:e.strides,pads:e.pads}},f=function(e,t,n,i){var s=a(l(e,i,n),2),d=s[0],f=s[1],h=o.ShapeUtil.size(d.kernelShape),g=(0,u.inputVariable)(\\\"x\\\",e.dataType,e.dims),m=g.type.value,v=\\\"\\\";return d.countIncludePad?v+=\\\"value /= \\\".concat(m,\\\"(\\\").concat(h,\\\");\\\"):v+=\\\"value /= \\\".concat(m,\\\"(\\\").concat(h,\\\" - pad);\\\"),r(r({},t),{outputs:[{dims:f,dataType:e.dataType,gpuDataType:c.GpuDataType.default}],getShaderSource:function(e){return p(e,g,f,d,\\\"value += x_val;\\\",v,\\\"0.0\\\")},dispatchGroup:function(){return{x:Math.ceil(o.ShapeUtil.size(f)/64)}}})};t.parseAveragePoolAttributes=function(e){var t=0!==e.count_include_pad,n=d(e);if(0!==n.ceilMode)throw new Error(\\\"using ceil() in shape computation is not yet supported for AveragePool\\\");return(0,i.createAttributeWithCacheKey)(r({countIncludePad:t},n))},t.averagePool=function(e,t){s(e.inputs);var n={name:\\\"AveragePool\\\",inputTypes:[c.GpuDataType.default],cacheHint:t.cacheKey};e.compute(r(r({},n),{get:function(){return f(e.inputs[0],n,!1,t)}}))};var h={autoPad:\\\"\\\",ceilMode:0,countIncludePad:!1,kernelShape:[],strides:[],pads:[],storageOrder:0,dilations:[],cacheKey:\\\"\\\"};t.parseGlobalAveragePoolAttributes=function(e){var t=e.format;return r(r({format:t},h),{cacheKey:t})},t.globalAveragePool=function(e,t){s(e.inputs);var n={name:\\\"GlobalAveragePool\\\",inputTypes:[c.GpuDataType.default],cacheHint:t.cacheKey};e.compute(r(r({},n),{get:function(){return f(e.inputs[0],n,!0,t)}}))};var g=function(e,t,n,i){var s=a(l(e,i,n),2),d=s[0],f=s[1],h=(0,u.inputVariable)(\\\"x\\\",e.dataType,e.dims);return r(r({},t),{outputs:[{dims:f,dataType:e.dataType,gpuDataType:c.GpuDataType.default}],getShaderSource:function(e){return p(e,h,f,d,\\\"\\\\n      value = max(x_val, value);\\\\n    \\\",\\\"\\\",\\\"-1e5\\\")},dispatchGroup:function(){return{x:Math.ceil(o.ShapeUtil.size(f)/64)}}})};t.maxPool=function(e,t){s(e.inputs);var n={name:\\\"MaxPool\\\",inputTypes:[c.GpuDataType.default],cacheHint:t.cacheKey};e.compute(r(r({},n),{get:function(){return g(e.inputs[0],n,!1,t)}}))},t.parseMaxPoolAttributes=function(e){var t=e.storage_order,n=e.dilations,a=d(e);if(0!==t)throw new Error(\\\"column major storage order is not yet supported for MaxPool\\\");if(0!==a.ceilMode)throw new Error(\\\"using ceil() in shape computation is not yet supported for MaxPool\\\");return(0,i.createAttributeWithCacheKey)(r({storageOrder:t,dilations:n},a))},t.parseGlobalMaxPoolAttributes=function(e){var t=e.format;return r(r({format:t},h),{cacheKey:t})},t.globalMaxPool=function(e,t){s(e.inputs);var n={name:\\\"GlobalMaxPool\\\",inputTypes:[c.GpuDataType.default],cacheHint:t.cacheKey};e.compute(r(r({},n),{get:function(){return g(e.inputs[0],n,!0,t)}}))}},32:function(e,t,n){\\\"use strict\\\";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},r.apply(this,arguments)};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.range=void 0;var a=n(7889),o=n(1163),i=n(2075);t.range=function(e){var t=0,n=0,c=0;6===e.inputs[0].dataType?(t=e.inputs[0].getInt32Array()[0],n=e.inputs[1].getInt32Array()[0],c=e.inputs[2].getInt32Array()[0]):1===e.inputs[0].dataType&&(t=e.inputs[0].getFloat32Array()[0],n=e.inputs[1].getFloat32Array()[0],c=e.inputs[2].getFloat32Array()[0]),a.env.webgpu.validateInputContent&&function(e,t,n){if(e===t||e<t&&n<0||e>t&&n>0)throw new Error(\\\"Range these inputs' contents are invalid.\\\")}(t,n,c);var u={name:\\\"Range\\\",inputTypes:[],cacheHint:[t,n,c].map((function(e){return e.toString()})).join(\\\"_\\\")};e.compute(r(r({},u),{get:function(){return function(e,t,n,a,c){var u=Math.abs(Math.ceil((n-t)/a)),s=[u],l=u,p=(0,i.outputVariable)(\\\"output\\\",c,s),d=p.type.storage;return r(r({},e),{getShaderSource:function(e){return\\\"\\\\n        \\\".concat(e.declareVariables(p),\\\"\\\\n        \\\").concat(e.mainStart(),\\\"\\\\n        \\\").concat(e.guardAgainstOutOfBoundsWorkgroupSizes(l),\\\"\\\\n        output[global_idx] = \\\").concat(d,\\\"(\\\").concat(t,\\\") + \\\").concat(d,\\\"(global_idx) * \\\").concat(d,\\\"(\\\").concat(a,\\\");\\\\n      }\\\")},outputs:[{dims:s,dataType:c,gpuDataType:o.GpuDataType.default}],dispatchGroup:function(){return{x:Math.ceil(l/64)}}})}(u,t,n,c,e.inputs[0].dataType)}}),{inputs:[]})}},6031:function(e,t,n){\\\"use strict\\\";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},r.apply(this,arguments)};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.parseReduceAttributes=t.reduceSumSquare=t.reduceSum=t.reduceProd=t.reduceMin=t.reduceMean=t.reduceMax=t.reduceLogSumExp=t.reduceL2=t.reduceL1=t.reduceLogSum=t.createReduceProgramInfo=void 0;var a=n(6952),o=n(387),i=n(1163),c=n(2075),u=function(e){if(!e||0===e.length||e.length>2)throw new Error(\\\"Reduce op requires 1 or 2 inputs.\\\");if(2===e.length&&1!==e[1].dims.length)throw new Error(\\\"Invalid axes input dims.\\\")},s=function(e){return[\\\"\\\",\\\"\\\",\\\"var value = \\\".concat(e.getByOffset(\\\"inputOffset\\\"),\\\";\\\"),\\\"\\\"]};t.createReduceProgramInfo=function(e,t,n,o,u,s,l){void 0===s&&(s=!1),void 0===l&&(l=!1);var p=[],d=t[0].dims,f=a.ShapeUtil.normalizeAxes(o,t[0].dims.length),h=!l&&0===f.length;d.forEach((function(e,t){h||f.indexOf(t)>=0?s&&p.push(1):p.push(e)}));for(var g=[],m=(0,c.inputVariable)(\\\"_A\\\",t[0].dataType,d),v=(0,c.outputVariable)(\\\"output\\\",u,p),y=n(m,v,f),b=\\\"inputOffset = \\\".concat(m.indicesToOffset(\\\"inputIndices\\\"),\\\";\\\"),w=\\\"let \\\".concat(b,\\\";\\\"),S=\\\"var \\\".concat(b,\\\";\\\"),_=\\\"\\\"===y[1]?\\\"\\\":S,x=(\\\"\\\"===y[1]?w:b)+\\\"\\\\n\\\"+y[2],T=0,O=0;T<t[0].dims.length;T++)h||f.indexOf(T)>=0?(s&&O++,x=\\\"for(var j\\\".concat(T,\\\": u32 = 0; j\\\").concat(T,\\\" < \\\").concat(t[0].dims[T],\\\"; j\\\").concat(T,\\\"++) {\\\\n                \\\").concat(y[2].includes(\\\"lastIndex\\\")?\\\"let lastIndex = j\\\".concat(T,\\\";\\\"):\\\"\\\",\\\"\\\\n                \\\").concat(m.indicesSet(\\\"inputIndices\\\",T,\\\"j\\\".concat(T)),\\\"\\\\n                \\\").concat(x,\\\"\\\\n              }\\\")):(g.push(\\\"\\\".concat(m.indicesSet(\\\"inputIndices\\\",T,v.indicesGet(\\\"outputIndices\\\",O)),\\\";\\\")),O++);var I=a.ShapeUtil.size(p);return r(r({},e),{getShaderSource:function(e){return\\\"\\\\n        \\\".concat(e.declareVariables(m,v),\\\"\\\\n\\\\n        \\\").concat(e.mainStart(),\\\"\\\\n          \\\").concat(e.guardAgainstOutOfBoundsWorkgroupSizes(I),\\\"\\\\n          var inputIndices: \\\").concat(m.type.indices,\\\";\\\\n          let outputIndices = \\\").concat(v.offsetToIndices(\\\"global_idx\\\"),\\\";\\\\n\\\\n          \\\").concat(g.join(\\\"\\\\n\\\"),\\\"\\\\n          \\\").concat(y[0],\\\"       // init ops for reduce max/min\\\\n          \\\").concat(_,\\\"\\\\n          \\\").concat(y[1],\\\"\\\\n          \\\").concat(x,\\\"\\\\n          \\\").concat(y[3],\\\"\\\\n          \\\").concat(4===y.length?v.setByOffset(\\\"global_idx\\\",\\\"value\\\"):y.slice(4).join(\\\"\\\\n\\\"),\\\"\\\\n        }\\\")},outputs:[{dims:p,dataType:u,gpuDataType:i.GpuDataType.default}],dispatchGroup:function(){return{x:Math.ceil(I/64)}}})};var l=function(e,n,a,c){var u=1===e.length?a:function(e,t){var n=[];return e[1].dims[0]>0&&e[1].getBigInt64Array().forEach((function(e){return n.push(Number(e))})),(0,o.createAttributeWithCacheKey)({axes:n,keepDims:t.keepDims,noopWithEmptyAxes:t.noopWithEmptyAxes})}(e,a),l={name:n,inputTypes:[i.GpuDataType.default],cacheHint:u.cacheKey+\\\"_\\\"+e[0].dims.map((function(e){return e.toString()})).join(\\\",\\\")};return r(r({},l),{get:function(){return(0,t.createReduceProgramInfo)(l,[e[0]],u.noopWithEmptyAxes&&0===u.axes.length?s:c,u.axes,e[0].dataType,u.keepDims,u.noopWithEmptyAxes)}})};t.reduceLogSum=function(e,t){u(e.inputs),e.compute(l(e.inputs,\\\"ReduceLogSum\\\",t,(function(e,t){return[\\\"var value = \\\".concat(t.type.storage,\\\"(0);\\\"),\\\"\\\",\\\"value += \\\".concat(e.getByOffset(\\\"inputOffset\\\"),\\\";\\\"),\\\"value = log(value);\\\"]})),{inputs:[0]})},t.reduceL1=function(e,t){u(e.inputs),e.compute(l(e.inputs,\\\"ReduceL1\\\",t,(function(e,t){return[\\\"var value = \\\".concat(t.type.storage,\\\"(0);\\\"),\\\"\\\",\\\"value += abs(\\\".concat(e.getByOffset(\\\"inputOffset\\\"),\\\");\\\"),\\\"\\\"]})),{inputs:[0]})},t.reduceL2=function(e,t){u(e.inputs),e.compute(l(e.inputs,\\\"ReduceL2\\\",t,(function(e,t){return[\\\"var t = \\\".concat(t.type.value,\\\"(0); var value = \\\").concat(t.type.value,\\\"(0);\\\"),\\\"\\\",\\\"t = \\\".concat(e.getByOffset(\\\"inputOffset\\\"),\\\"; value += (t * t);\\\"),\\\"value = sqrt(value);\\\"]})),{inputs:[0]})},t.reduceLogSumExp=function(e,t){u(e.inputs),e.compute(l(e.inputs,\\\"ReduceLogSumExp\\\",t,(function(e,t){return[\\\"var value = \\\".concat(t.type.storage,\\\"(0);\\\"),\\\"\\\",\\\"value += exp(\\\".concat(e.getByOffset(\\\"inputOffset\\\"),\\\");\\\"),\\\"value = log(value);\\\"]})),{inputs:[0]})},t.reduceMax=function(e,t){u(e.inputs),e.compute(l(e.inputs,\\\"ReduceMax\\\",t,(function(e,t,n){for(var r=[],a=0;a<e.shape.length;a++)(n.indexOf(a)>=0||0===n.length)&&r.push(e.indicesSet(\\\"inputIndices\\\",a,0));return[\\\"\\\".concat(r.join(\\\"\\\\n\\\")),\\\"var value = \\\".concat(e.getByOffset(\\\"inputOffset\\\"),\\\";\\\"),\\\"value = max(value, \\\".concat(e.getByOffset(\\\"inputOffset\\\"),\\\");\\\"),\\\"\\\"]})),{inputs:[0]})},t.reduceMean=function(e,t){u(e.inputs),e.compute(l(e.inputs,\\\"ReduceMean\\\",t,(function(e,t,n){for(var r=1,a=0;a<e.shape.length;a++)(n.indexOf(a)>=0||0===n.length)&&(r*=e.shape[a]);return[\\\"var sum = f32(0);\\\",\\\"\\\",\\\"sum += f32(\\\".concat(e.getByOffset(\\\"inputOffset\\\"),\\\");\\\"),\\\"let value = \\\".concat(t.type.value,\\\"(sum / \\\").concat(r,\\\");\\\")]})),{inputs:[0]})},t.reduceMin=function(e,t){u(e.inputs),e.compute(l(e.inputs,\\\"ReduceMin\\\",t,(function(e,t,n){for(var r=[],a=0;a<e.shape.length;a++)(n.indexOf(a)>=0||0===n.length)&&r.push(\\\"inputIndices[\\\".concat(a,\\\"] = 0;\\\"));return[\\\"\\\".concat(r.join(\\\"\\\\n\\\")),\\\"var value = \\\".concat(e.getByOffset(\\\"inputOffset\\\"),\\\";\\\"),\\\"value = min(value, \\\".concat(e.getByOffset(\\\"inputOffset\\\"),\\\");\\\"),\\\"\\\"]})),{inputs:[0]})},t.reduceProd=function(e,t){u(e.inputs),e.compute(l(e.inputs,\\\"ReduceProd\\\",t,(function(e,t){return[\\\"var value = \\\".concat(t.type.storage,\\\"(1);\\\"),\\\"\\\",\\\"value *= \\\".concat(e.getByOffset(\\\"inputOffset\\\"),\\\";\\\"),\\\"\\\"]})),{inputs:[0]})},t.reduceSum=function(e,t){u(e.inputs),e.compute(l(e.inputs,\\\"ReduceSum\\\",t,(function(e,t){return[\\\"var value = \\\".concat(t.type.storage,\\\"(0);\\\"),\\\"\\\",\\\"value += \\\".concat(e.getByOffset(\\\"inputOffset\\\"),\\\";\\\"),\\\"\\\"]})),{inputs:[0]})},t.reduceSumSquare=function(e,t){u(e.inputs),e.compute(l(e.inputs,\\\"ReduceSumSquare\\\",t,(function(e,t){return[\\\"var t = \\\".concat(t.type.value,\\\"(0); var value = \\\").concat(t.type.value,\\\"(0);\\\"),\\\"\\\",\\\"t = \\\".concat(e.getByOffset(\\\"inputOffset\\\"),\\\"; value += t * t;\\\"),\\\"\\\"]})),{inputs:[0]})},t.parseReduceAttributes=function(e){return(0,o.createAttributeWithCacheKey)(e)}},4566:function(e,t,n){\\\"use strict\\\";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},r.apply(this,arguments)},a=this&&this.__read||function(e,t){var n=\\\"function\\\"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,a,o=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)i.push(r.value)}catch(e){a={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(a)throw a.error}}return i},o=this&&this.__spreadArray||function(e,t,n){if(n||2===arguments.length)for(var r,a=0,o=t.length;a<o;a++)!r&&a in t||(r||(r=Array.prototype.slice.call(t,0,a)),r[a]=t[a]);return e.concat(r||Array.prototype.slice.call(t))};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.parseResizeAttributes=t.resize=t.createResizeProgramInfoLoader=void 0;var i=n(6952),c=n(387),u=n(1163),s=n(2075);t.createResizeProgramInfoLoader=function(e,t,n,c,l,p){var d={name:\\\"Resize\\\",inputTypes:[u.GpuDataType.default],cacheHint:t.cacheKey+n.toString()+(c.length>0?\\\"_scales_\\\"+c.toString():\\\"\\\")+(l.length>0?\\\"_sizes_\\\"+l.toString():\\\"\\\")};return r(r({},d),{get:function(){return function(e,t,n,c,l,p,d){var f=t.dims,h=function(e,t,n){var r=new Array(n).fill(0).concat(new Array(n).fill(1)),a=0===e.length?r:e.slice();return t.length>0?(t.forEach((function(e,o){r[e]=a[o],r[o+n]=a[t.length+o]})),r):a}(d,n.axes,f.length),g=function(e,t,n,r){var i=[];if(n.length>0)if(r.length>0){if(e.forEach((function(e){return i.push(e)})),Math.max.apply(Math,o([],a(r),!1))>e.length)throw new Error(\\\"axes is out of bound\\\");r.forEach((function(e,t){return i[e]=n[t]}))}else n.forEach((function(e){return i.push(e)}));else{if(0===t.length)throw new Error(\\\"Resize requires either scales or sizes.\\\");i=e.map((function(e,n){return Math.round(e*t[n])}))}return i}(f,l,p,n.axes),m=l.slice();0===l.length&&(m=f.map((function(e,t){return 0===e?1:g[t]/e})),\\\"stretch\\\"!==n.keepAspectRatioPolicy&&(g=function(e,t,n,r){var i=function(){switch(r.keepAspectRatioPolicy){case\\\"not_larger\\\":return r.axes.length>0?Math.min.apply(Math,o(o([],a(r.axes.map((function(e){return n[e]}))),!1),[Number.MAX_VALUE],!1)):Math.min.apply(Math,o(o([],a(n),!1),[Number.MAX_VALUE],!1));case\\\"not_smaller\\\":return r.axes.length>0?Math.max.apply(Math,o(o([],a(r.axes.map((function(e){return n[e]}))),!1),[Number.MIN_VALUE],!1)):Math.max.apply(Math,o(o([],a(n),!1),[Number.MIN_VALUE],!1));default:throw new Error(\\\"Keep aspect ratio policy \\\".concat(r.keepAspectRatioPolicy,\\\" is not supported\\\"))}}();n.fill(1,0,n.length);var c=e.slice();return r.axes.length>0?(r.axes.forEach((function(e){return n[e]=i})),r.axes.forEach((function(t){return c[t]=Math.round(e[t]*n[t])}))):(n.fill(i,0,n.length),c.forEach((function(e,t){return c[t]=Math.round(e*n[t])}))),c}(f,0,m,n)));var v=(0,s.outputVariable)(\\\"output\\\",t.dataType,g),y=(0,s.inputVariable)(\\\"input\\\",t.dataType,f),b=i.ShapeUtil.size(g),w=f.length===g.length&&f.every((function(e,t){return e===g[t]})),S=\\\"tf_crop_and_resize\\\"===n.coordinateTransformMode;return r(r({},e),{getShaderSource:function(e){return\\\"\\\\n      \\\".concat((t=n.coordinateTransformMode,\\\"fn getOriginalCoordinateFromResizedCoordinate(xResized: f32, xScale: f32, lengthResized: f32,    lengthOriginal: f32, roiStart: f32, roiEnd: f32) -> f32 { \\\"+function(){switch(t){case\\\"asymmetric\\\":return\\\"return xResized / xScale;\\\";case\\\"pytorch_half_pixel\\\":return\\\"if (lengthResized > 1) {                     return (xResized + 0.5) / xScale - 0.5;                   } else {                     return 0.0;                   }\\\";case\\\"tf_half_pixel_for_nn\\\":return\\\"return (xResized + 0.5) / xScale;\\\";case\\\"align_corners\\\":return\\\"if (lengthResized == 1) {                     return 0.0;                   } else {                     return xResized * (lengthOriginal - 1) / (lengthResized - 1);                   }\\\";case\\\"tf_crop_and_resize\\\":return\\\"if (lengthResized > 1) {                     return roiStart * (lengthOriginal - 1) +                           (xResized * (roiEnd - roiStart) * (lengthOriginal - 1)) / (lengthResized - 1);                   } else {                     return 0.5 * (roiStart + roiEnd) * f32(lengthOriginal - 1);                   }\\\";case\\\"half_pixel_symmetric\\\":return[\\\"const outputWidth = xScale * lengthResized;\\\",\\\"const adjustment = lengthResized / outputWidth;\\\",\\\"const center = lengthOriginal / 2;\\\",\\\"const offset = center * (1 - adjustment);\\\",\\\"return offset + ((xResized + 0.5) / xScale) - 0.5;\\\"].join(\\\"\\\\n\\\");case\\\"half_pixel\\\":return\\\"return ((xResized + 0.5) / xScale) - 0.5;\\\";default:throw new Error(\\\"Coordinate transform mode \\\".concat(t,\\\" is not supported\\\"))}}()+\\\"}\\\"),\\\";\\\\n      \\\").concat(function(){switch(n.mode){case\\\"nearest\\\":return\\\"\\\\n              \\\".concat(function(e,t){return\\\"\\\\n    fn checkInputIndices(inputIndices: \\\".concat(e.type.indices,\\\") -> bool {\\\\n      const inputShape = array<u32, \\\").concat(t.length,\\\">(\\\").concat(t.map((function(e){return\\\"\\\".concat(e,\\\"u\\\")})).join(\\\",\\\"),\\\");\\\\n      for (var i:u32 = 0; i < \\\").concat(t.length,\\\"; i++) {\\\\n        var inputIndex = \\\").concat(1===t.length?\\\"inputIndices\\\":\\\"inputIndices[i]\\\",\\\";\\\\n        if (inputIndex < 0 || inputIndex >= inputShape[i]) {\\\\n          return false;\\\\n        }\\\\n      }\\\\n      return true;\\\\n    }\\\")}(y,f),\\\";\\\\n              \\\").concat(function(e,t){return\\\"fn getNearestPixelFromOriginal(xOriginal: f32, isDownSample: bool) -> f32 {\\\"+function(){switch(e){case\\\"round_prefer_ceil\\\":return\\\"if (fract(xOriginal) == 0.5) {             return ceil(xOriginal);           } else {             return round(xOriginal);           }\\\";case\\\"floor\\\":return\\\"return floor(xOriginal);\\\";case\\\"ceil\\\":return\\\"return ceil(xOriginal);\\\";case\\\"round_prefer_floor\\\":return\\\"if (fract(xOriginal) == 0.5) {                     return floor(xOriginal);                   } else {                     return round(xOriginal);                   }\\\";default:if(t<11)return\\\"if (isDownSample)                     {                       return ceil(xOriginal);                     } else {                       return xOriginal;                     }\\\";throw new Error(\\\"Nearest mode \\\".concat(e,\\\" is not supported\\\"))}}()+\\\"}\\\"}(n.nearestMode,c),\\\";\\\\n              \\\").concat(function(e,t,n,r,a,o,i){return\\\"\\\\n    fn calculateInputIndicesFromOutputIndices(outputIndices: \\\".concat(t.type.indices,\\\") -> \\\").concat(e.type.indices,\\\" {\\\\n        const inputShape = array<u32, \\\").concat(n.length,\\\">(\\\").concat(n.map((function(e){return\\\"\\\".concat(e,\\\"u\\\")})).join(\\\",\\\"),\\\");\\\\n        const outputShape = array<u32, \\\").concat(r.length,\\\">(\\\").concat(r.map((function(e){return\\\"\\\".concat(e,\\\"u\\\")})).join(\\\",\\\"),\\\");\\\\n        const scales = array<f32, \\\").concat(a.length,\\\">(\\\").concat(a.map((function(e){return\\\"\\\".concat(e,\\\"f\\\")})).join(\\\",\\\"),\\\");\\\\n        const roi = array<f32, \\\").concat(o.length,\\\">(\\\").concat(o.map((function(e){return\\\"\\\".concat(e,\\\"f\\\")})).join(\\\",\\\"),\\\");\\\\n        var inputIndices: \\\").concat(e.type.indices,\\\";\\\\n        for (var i:u32 = 0; i < \\\").concat(r.length,\\\"; i++) {\\\\n          var outputIndex = \\\").concat(1===r.length?\\\"outputIndices\\\":\\\"outputIndices[i]\\\",\\\";\\\\n          var inputIndex: u32;\\\\n          if (scales[i] == 1.0) {\\\\n            inputIndex = outputIndex;\\\\n          } else {\\\\n            var original_idx = getOriginalCoordinateFromResizedCoordinate(f32(outputIndex), scales[i],\\\\n                    f32(outputShape[i]), f32(inputShape[i]), roi[i], roi[i + \\\").concat(n.length,\\\"]);\\\\n            if (!\\\").concat(i,\\\" || (original_idx >= 0 && original_idx < f32(inputShape[i]))) {\\\\n              if (original_idx < 0) {\\\\n                inputIndex = 0;\\\\n              } else if (original_idx > (f32(inputShape[i]) - 1)) {\\\\n                inputIndex = inputShape[i] - 1;\\\\n              } else {\\\\n                inputIndex = u32(getNearestPixelFromOriginal(original_idx, scales[i] < 1));\\\\n              }\\\\n            } else {\\\\n              inputIndex = u32(original_idx);\\\\n            }\\\\n          }\\\\n          \\\").concat(e.indicesSet(\\\"inputIndices\\\",\\\"i\\\",\\\"inputIndex\\\"),\\\"\\\\n        }\\\\n        return inputIndices;\\\\n    }\\\")}(y,v,f,g,m,h,S),\\\";\\\\n              \\\");case\\\"linear\\\":return\\\"\\\\n              \\\".concat(function(e,t,n,r,a){return\\\"\\\\n    fn calculateOriginalIndicesFromOutputIndices(outputIndices: \\\".concat(e.type.indices,\\\") -> array<f32, \\\").concat(n.length,\\\"> {\\\\n      const inputShape = array<u32, \\\").concat(t.length,\\\">(\\\").concat(t.map((function(e){return\\\"\\\".concat(e,\\\"u\\\")})).join(\\\",\\\"),\\\");\\\\n      const outputShape = array<u32, \\\").concat(n.length,\\\">(\\\").concat(n.map((function(e){return\\\"\\\".concat(e,\\\"u\\\")})).join(\\\",\\\"),\\\");\\\\n      const scales = array<f32, \\\").concat(r.length,\\\">(\\\").concat(r.map((function(e){return\\\"\\\".concat(e,\\\"f\\\")})).join(\\\",\\\"),\\\");\\\\n      const roi = array<f32, \\\").concat(a.length,\\\">(\\\").concat(a.map((function(e){return\\\"\\\".concat(e,\\\"f\\\")})).join(\\\",\\\"),\\\");\\\\n      var originalIndices: array<f32, \\\").concat(n.length,\\\">;\\\\n      for (var i:u32 = 0; i < \\\").concat(n.length,\\\"; i++) {\\\\n        var outputIndex = \\\").concat(1===n.length?\\\"outputIndices\\\":\\\"outputIndices[i]\\\",\\\";\\\\n        if (scales[i] == 1.0) {\\\\n          originalIndices[i] = f32(outputIndex);\\\\n        } else {\\\\n          originalIndices[i] = getOriginalCoordinateFromResizedCoordinate(f32(outputIndex), scales[i],\\\\n                f32(outputShape[i]), f32(inputShape[i]), roi[i], roi[i + \\\").concat(t.length,\\\"]);\\\\n        }\\\\n      }\\\\n      return originalIndices;\\\\n    }\\\")}(v,f,g,m,h),\\\";\\\\n              \\\").concat(function(e,t,n,r,o,i,c){var u=a(2===n.length?[-1,0,1,-1]:1===o[1]?[0,2,3,1]:[0,1,2,3],4),s=u[0],l=u[1],p=u[2],d=u[3];return\\\"\\\\n    fn getInputValue(batch: u32, channel: u32, row: u32, col: u32) -> f32 {\\\\n      var inputIndices: \\\".concat(e.type.indices,\\\";\\\\n      inputIndices[\\\").concat(l,\\\"] = max(0, min(row, \\\").concat(n[l],\\\" - 1));\\\\n      inputIndices[\\\").concat(p,\\\"] = max(0, min(col, \\\").concat(n[p],\\\" - 1));\\\\n      if (\\\").concat(n.length,\\\" > 2) {\\\\n        inputIndices[\\\").concat(d,\\\"] = channel;\\\\n        inputIndices[\\\").concat(s,\\\"] = batch;\\\\n      };\\\\n      return input[\\\").concat(e.indicesToOffset(\\\"inputIndices\\\"),\\\"];\\\\n    }\\\\n\\\\n    fn bilinearInterpolation(outputIndices: \\\").concat(t.type.indices,\\\") -> f32 {\\\\n      var originalIndices = calculateOriginalIndicesFromOutputIndices(outputIndices);\\\\n      var row:f32 = originalIndices[\\\").concat(l,\\\"];\\\\n      var col:f32 = originalIndices[\\\").concat(p,\\\"];\\\\n      if (\\\").concat(i,\\\" && (row < 0 || row > (\\\").concat(n[l],\\\" - 1) || col < 0 || col > \\\").concat(n[p],\\\" - 1)) {\\\\n        return \\\").concat(c,\\\";\\\\n      }\\\\n      row = max(0, min(row, \\\").concat(n[l],\\\" - 1));\\\\n      col = max(0, min(col, \\\").concat(n[p],\\\" - 1));\\\\n      var row1: u32 = u32(row);\\\\n      var col1: u32 = u32(col);\\\\n      var row2: u32 = u32(row + 1);\\\\n      var col2: u32 = u32(col + 1);\\\\n      var channel: u32 = 0;\\\\n      var batch: u32 = 0;\\\\n      if (\\\").concat(n.length>2,\\\") {\\\\n        channel = u32(originalIndices[\\\").concat(d,\\\"]);\\\\n        batch = u32(originalIndices[\\\").concat(s,\\\"]);\\\\n      }\\\\n      var x11: f32 = getInputValue(batch, channel, row1, col1);\\\\n      var x12: f32 = getInputValue(batch, channel, row1, col2);\\\\n      var x21: f32 = getInputValue(batch, channel, row2, col1);\\\\n      var x22: f32 = getInputValue(batch, channel, row2, col2);\\\\n      var dx1: f32 = row - f32(row1);\\\\n      var dx2: f32 = f32(row2 ) - row;\\\\n      var dy1 = col - f32(col1);\\\\n      var dy2 = f32(col2) - col;\\\\n      return (x11 * dx2 * dy2 + x12 * dx2 * dy1 + x21 * dx1 * dy2 + x22 * dx1 * dy1);\\\\n    }\\\")}(y,v,f,0,m,S,n.extrapolationValue),\\\";\\\\n              \\\");case\\\"cubic\\\":return\\\"\\\\n            \\\".concat(function(e,t,n,r,o,i,c,u,s,l){var p=a(2===n.length?[0,1]:1===o[1]?[2,3]:[1,2],2),d=p[0],f=p[1],h=function(a){var c=a===d?\\\"row\\\":\\\"col\\\";return\\\"\\\\n      fn \\\".concat(c,\\\"CubicInterpolation(inputIndices: \\\").concat(e.type.indices,\\\", outputIndices: \\\").concat(t.type.indices,\\\") -> f32 {\\\\n        var outputIndex = \\\").concat(1===r.length?\\\"outputIndices\\\":\\\"outputIndices[\\\".concat(a,\\\"]\\\"),\\\";\\\\n        var originalIdx: f32 = getOriginalCoordinateFromResizedCoordinate(f32(outputIndex), \\\").concat(o[a],\\\",\\\\n        f32(\\\").concat(r[a],\\\"), f32(\\\").concat(n[a],\\\"), \\\").concat(i[a],\\\", \\\").concat(i[a],\\\" + \\\").concat(n.length,\\\");\\\\n        var fractOriginalIdx: f32 = originalIdx - floor(originalIdx);\\\\n        var coefs = getCubicInterpolationCoefs(fractOriginalIdx);\\\\n\\\\n        if (\\\").concat(u,\\\" && (originalIdx < 0 || originalIdx > (\\\").concat(n[a],\\\" - 1))) {\\\\n          return \\\").concat(s,\\\";\\\\n        }\\\\n        var data: array<f32, 4> = array<f32, 4>(0.0, 0.0, 0.0, 0.0);\\\\n        for (var i: i32 = -1; i < 3; i++) {\\\\n          var \\\").concat(c,\\\": f32 = originalIdx + f32(i);\\\\n          if (\\\").concat(c,\\\" < 0 || \\\").concat(c,\\\" >= \\\").concat(n[a],\\\") {\\\\n            if (\\\").concat(l,\\\") {\\\\n              coefs[i + 1] = 0.0;\\\\n              continue;\\\\n            } else if (\\\").concat(u,\\\") {\\\\n              return \\\").concat(s,\\\";\\\\n            } else {\\\\n              \\\").concat(c,\\\" = max(0, min(\\\").concat(c,\\\", \\\").concat(n[a],\\\" - 1));\\\\n            }\\\\n          }\\\\n          var inputIndicesCopy: \\\").concat(e.type.indices,\\\" = inputIndices;\\\\n          inputIndicesCopy[\\\").concat(a,\\\"] = u32(\\\").concat(c,\\\");\\\\n          data[i + 1] = \\\").concat(a===d?\\\"input[\\\".concat(e.indicesToOffset(\\\"inputIndicesCopy\\\"),\\\"];\\\"):\\\"\\\\n                                               rowCubicInterpolation(inputIndicesCopy, outputIndices);\\\",\\\"\\\\n        }\\\\n        return cubicInterpolation1D(data, coefs);\\\\n      }\\\")};return\\\"\\\\n    \\\".concat(h(d),\\\";\\\\n    \\\").concat(h(f),\\\";\\\\n  fn getCubicInterpolationCoefs(s: f32) -> array<f32, 4> {\\\\n    var absS = abs(s);\\\\n    var coeffs: array<f32, 4> = array<f32, 4>(0.0, 0.0, 0.0, 0.0);\\\\n    var oneMinusAbsS: f32 = 1.0 - absS;\\\\n    var twoMinusAbsS: f32 = 2.0 - absS;\\\\n    var onePlusAbsS: f32 = 1.0 + absS;\\\\n    coeffs[0] = ((\\\").concat(c,\\\" * onePlusAbsS - 5 * \\\").concat(c,\\\") * onePlusAbsS + 8 * \\\").concat(c,\\\") * onePlusAbsS - 4 * \\\").concat(c,\\\";\\\\n    coeffs[1] = ((\\\").concat(c,\\\" + 2) * absS - (\\\").concat(c,\\\" + 3)) * absS * absS + 1;\\\\n    coeffs[2] = ((\\\").concat(c,\\\" + 2) * oneMinusAbsS - (\\\").concat(c,\\\" + 3)) * oneMinusAbsS * oneMinusAbsS + 1;\\\\n    coeffs[3] = ((\\\").concat(c,\\\" * twoMinusAbsS - 5 * \\\").concat(c,\\\") * twoMinusAbsS + 8 * \\\").concat(c,\\\") * twoMinusAbsS - 4 * \\\").concat(c,\\\";\\\\n    return coeffs;\\\\n  }\\\\n\\\\n  fn cubicInterpolation1D(x: array<f32, 4>, coefs: array<f32, 4>) -> f32 {\\\\n    var coefsSum: f32 = coefs[0] + coefs[1] + coefs[2] + coefs[3];\\\\n    return (x[0] * coefs[0] + x[1] * coefs[1]+ x[2] * coefs[2]+ x[3] * coefs[3]) / coefsSum;\\\\n  }\\\\n\\\\n  fn bicubicInterpolation(outputIndices: \\\").concat(t.type.indices,\\\") -> f32 {\\\\n    var inputIndices: \\\").concat(e.type.indices,\\\" = outputIndices;\\\\n    return colCubicInterpolation(inputIndices, outputIndices);\\\\n  }\\\\n    \\\")}(y,v,f,g,m,h,n.cubicCoeffA,S,n.extrapolationValue,n.excludeOutside),\\\";\\\\n            \\\");default:throw Error(\\\"Invalid resize mode\\\")}}(),\\\";\\\\n      \\\").concat(e.declareVariables(y,v),\\\"\\\\n      \\\").concat(e.mainStart(),\\\"\\\\n        \\\").concat(e.guardAgainstOutOfBoundsWorkgroupSizes(b),\\\"\\\\n        if (\\\").concat(w,\\\") {\\\\n          output[global_idx] = input[global_idx];\\\\n        } else {\\\\n          let outputIndices = \\\").concat(v.offsetToIndices(\\\"global_idx\\\"),\\\";\\\\n          var inputIndices: \\\").concat(y.type.indices,\\\";\\\\n          \\\").concat(function(){switch(n.mode){case\\\"nearest\\\":return\\\"inputIndices = calculateInputIndicesFromOutputIndices(outputIndices);\\\\n                  if (checkInputIndices(inputIndices)) {\\\\n                    output[global_idx] = input[\\\".concat(y.indicesToOffset(\\\"inputIndices\\\"),\\\"];\\\\n                  } else {\\\\n                    output[global_idx] = \\\").concat(n.extrapolationValue,\\\";\\\\n                  }\\\");case\\\"linear\\\":return\\\"output[global_idx] = bilinearInterpolation(outputIndices);\\\";case\\\"cubic\\\":return\\\"output[global_idx] = bicubicInterpolation(outputIndices);\\\";default:throw Error(\\\"Unsupported resize mode: \\\".concat(n.mode))}}(),\\\";\\\\n        }\\\\n      }\\\");var t},outputs:[{dims:g,dataType:t.dataType,gpuDataType:u.GpuDataType.default}],dispatchGroup:function(){return{x:Math.ceil(b/64)}}})}(d,e,t,n,c,l,p)}})},t.resize=function(e,n){var r=[],o=[],i=[],c=function(e){var t=e.customDataBuffer;return new Uint32Array(t,t.byteOffset,1)[0]}(e);(function(e,t,n,r,o,i){var c=a(n>10?[1,2,3]:[-1,e.length>1?1:-1,-1],3),u=c[0],s=c[1],l=c[2],p=e[0].dims.length;if(u>0&&e.length>u&&e[u].dims.length>0)e[u].getFloat32Array().forEach((function(e){return i.push(e)}));else if(\\\"tf_crop_and_resize\\\"===t.coordinateTransformMode)throw new Error(\\\"Resize requires RoI input to be specified when coordinateTransformMode is tfCropAndResize\\\");if(s>0&&e.length>s&&e[s].dims.length>0){if(e[s].getFloat32Array().forEach((function(e){return r.push(e)})),0!==r.length&&r.length!==p&&n>=18&&r.length!==t.axes.length)throw new Error(\\\"Resize requires scales input size to be same as input rank or axes size for opset 18 and up\\\");!function(e,t){if(e.every((function(e){return e>0||function(){throw new Error(\\\"Resize requires scales input values to be positive\\\")}})),e.length>0)if(\\\"linear\\\"===t.mode){if(!(2===e.length||4===e.length&&1===e[0]&&1===e[1]||4===e.length&&1===e[0]&&1===e[3]))throw new Error(\\\"Resize requires scales input size to be 2 or 4 for linear mode\\\")}else if(\\\"cubic\\\"===t.mode&&!(2===e.length||4===e.length&&1===e[0]&&1===e[1]||4===e.length&&1===e[0]&&1===e[3]))throw new Error(\\\"Resize requires scales input size to be 2 or 4 for cubic mode\\\")}(r,t),t.axes.length>0&&function(e,t,n){t.every((function(e){return e>=0&&e<n||function(){throw new Error(\\\"Resize requires axes input values to be positive and less than rank\\\")}}));var r=new Array(n).fill(1);return t.forEach((function(t,n){return r[t]=e[n]})),r}(r,t.axes,p).forEach((function(e,t){return r[t]=e}))}if(l>0&&e.length>l&&(e[l].getBigInt64Array().forEach((function(e){return o.push(Number(e))})),o.length!==p||n>=18&&o.length===t.axes.length))throw new Error(\\\"Resize requires sizes input size to be same as input rank or axes size for opset 18 and up\\\");if(t.axes.length>0){if(r.length!==t.axes.length)throw new Error('Resize requires \\\"scales\\\" input size to be of axes rank when axes attributes is specified');if(o.length!==t.axes.length)throw new Error('Resize requires \\\"sizes\\\" input size to be of rank axes rank when axes attributes is specified')}if(void 0!==r&&void 0!==o&&r.length>0&&o.length>p)throw new Error(\\\"Resize requires only of scales or sizes to be specified\\\")})(e.inputs,n,c,r,o,i),e.compute((0,t.createResizeProgramInfoLoader)(e.inputs[0],n,c,r,o,i),{inputs:[0]})},t.parseResizeAttributes=function(e){var t=e.antialias,n=e.axes,r=e.coordinateTransformMode,a=e.cubicCoeffA,o=0!==e.excludeOutside,i=e.extrapolationValue,u=e.keepAspectRatioPolicy,s=e.mode,l=\\\"\\\"===e.nearestMode?\\\"simple\\\":e.nearestMode;return(0,c.createAttributeWithCacheKey)({antialias:t,axes:n,coordinateTransformMode:r,cubicCoeffA:a,excludeOutside:o,extrapolationValue:i,keepAspectRatioPolicy:u,mode:s,nearestMode:l})}},8906:function(e,t,n){\\\"use strict\\\";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},r.apply(this,arguments)};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.parseSkipLayerNormAttributes=t.skipLayerNorm=void 0;var a=n(6952),o=n(387),i=n(1163),c=n(2075);t.skipLayerNorm=function(e,t){!function(e){if(!e||e.length<3)throw new Error(\\\"layerNorm requires at least 3 inputs.\\\");if(1!==e[0].dataType||1!==e[1].dataType)throw new Error(\\\"inputs should be float type\\\");var t=e[0],n=e[1],r=e[2];if(t.dataType!==n.dataType||t.dataType!==r.dataType)throw new Error(\\\"All inputs must have the same data type\\\");if(3!==t.dims.length&&2!==t.dims.length)throw new Error(\\\"Input must be 2D or 3D\\\");if(3!==n.dims.length&&2!==n.dims.length)throw new Error(\\\"Skip must be 2D or 3D\\\");var a=t.dims[t.dims.length-1],o=t.dims[t.dims.length-2];if(n.dims[n.dims.length-1]!==a)throw new Error(\\\"Skip must have the same hidden size as input\\\");if(n.dims[n.dims.length-2]!==o)throw new Error(\\\"Skip must have the same sequence length as input\\\");if(1!==r.dims.length)throw new Error(\\\"Gamma must be 1D\\\");if(r.dims[r.dims.length-1]!==a)throw new Error(\\\"Gamma must have the same hidden size as input\\\");if(e.length>3){var i=e[3];if(1!==i.dims.length)throw new Error(\\\"Beta must be 1D\\\");if(i.dims[i.dims.length-1]!==a)throw new Error(\\\"Beta must have the same hidden size as input\\\")}if(e.length>4){var c=e[4];if(1!==c.dims.length)throw new Error(\\\"Bias must be 1D\\\");if(c.dims[c.dims.length-1]!==a)throw new Error(\\\"Bias must have the same hidden size as input\\\")}}(e.inputs);var n=[0];e.outputCount>1&&n.push(-3),e.outputCount>2&&n.push(-3),e.outputCount>3&&n.push(3),e.compute(function(e,t,n,o){var u={name:\\\"SkipLayerNormalization\\\",inputTypes:new Array(e.length).fill(i.GpuDataType.default),cacheHint:t.cacheKey};return r(r({},u),{get:function(){return function(e,t,n,o,u){var s=t[0].dims,l=s,p=a.ShapeUtil.size(s),d=s.slice(-1)[0],f=u?s.slice(0,-1).concat(1):[],h=t.length>3,g=t.length>4,m=(0,c.tensorTypeToWsglStorageType)(t[0].dataType),v=u&&o>1,y=u&&o>2,b=o>3,w=0,S=[{dims:l,dataType:t[0].dataType,gpuDataType:i.GpuDataType.default}];return o>1&&S.push({dims:f,dataType:t[0].dataType,gpuDataType:i.GpuDataType.default}),o>2&&S.push({dims:f,dataType:t[0].dataType,gpuDataType:i.GpuDataType.default}),o>3&&S.push({dims:s,dataType:t[0].dataType,gpuDataType:i.GpuDataType.default}),r(r({},e),{getShaderSource:function(e){return\\\"\\\\n      const hiddenSize: u32 = \\\".concat(d,\\\";\\\\n      const epsilon: f32 = \\\").concat(n.epsilon,\\\";\\\\n\\\\n      @group(0) @binding(\\\").concat(w++,\\\") var<storage, read> x : array<\\\").concat(m,\\\">;\\\\n      @group(0) @binding(\\\").concat(w++,\\\") var<storage, read> skip : array<\\\").concat(m,\\\">;\\\\n      @group(0) @binding(\\\").concat(w++,\\\") var<storage, read> gamma : array<\\\").concat(m,\\\">;\\\\n      \\\").concat(h?\\\"@group(0) @binding(\\\".concat(w++,\\\") var<storage, read> beta : array<\\\").concat(m,\\\">;\\\"):\\\"\\\",\\\"\\\\n      \\\").concat(g?\\\"@group(0) @binding(\\\".concat(w++,\\\") var<storage, read> bias : array<\\\").concat(m,\\\">;\\\"):\\\"\\\",\\\"\\\\n      @group(0) @binding(\\\").concat(w++,\\\") var<storage, read_write> output : array<\\\").concat(m,\\\">;\\\\n      \\\").concat(v?\\\"@group(0) @binding(\\\".concat(w++,\\\") var<storage, read_write> meanOutput : array<\\\").concat(m,\\\">;\\\"):\\\"\\\",\\\"\\\\n      \\\").concat(y?\\\"@group(0) @binding(\\\".concat(w++,\\\") var<storage, read_write> invStdOutput : array<\\\").concat(m,\\\">;\\\"):\\\"\\\",\\\"\\\\n      \\\").concat(b?\\\"@group(0) @binding(\\\".concat(w++,\\\") var<storage, read_write> inputSkipBiasSum : array<\\\").concat(m,\\\">;\\\"):\\\"\\\",\\\"\\\\n\\\\n      \\\").concat(e.mainStart(),\\\"\\\\n        \\\").concat(e.guardAgainstOutOfBoundsWorkgroupSizes(p/d),\\\"\\\\n        let offset = global_idx * hiddenSize;\\\\n        var sum: f32 = 0.0;\\\\n        var squareSum: f32 = 0.0;\\\\n        for (var i: u32 = 0; i < hiddenSize; i++) {\\\\n          let skipValue = skip[offset + i];\\\\n          let biasValue = \\\").concat(g?\\\"bias[i]\\\":\\\"0.0\\\",\\\";\\\\n          let inputValue = x[offset + i];\\\\n          let value = inputValue + skipValue + biasValue;\\\\n          \\\").concat(b?\\\"inputSkipBiasSum[offset + i] = value;\\\":\\\"\\\",\\\"\\\\n          output[offset + i] = value;\\\\n          sum += value;\\\\n          squareSum += value * value;\\\\n        }\\\\n        let mean: f32 = sum / f32(hiddenSize);\\\\n        let variance: f32 = sqrt(squareSum / f32(hiddenSize) - mean * mean + epsilon);\\\\n        \\\").concat(v?\\\"meanOutput[global_idx] = mean;\\\":\\\"\\\",\\\"\\\\n        \\\").concat(y?\\\"invStdOutput[global_idx] = 1.0 / variance;\\\":\\\"\\\",\\\"\\\\n        for (var i: u32 = 0; i < hiddenSize; i++) {\\\\n          output[offset + i] = (output[offset + i] - mean) / variance * gamma[i] + \\\").concat(h?\\\"beta[i]\\\":\\\"0.0\\\",\\\";\\\\n        }\\\\n      }\\\")},outputs:S,dispatchGroup:function(){return{x:Math.ceil(p/d/64)}}})}(u,e,t,n,o)}})}(e.inputs,t,e.outputCount,!1),{outputs:n})},t.parseSkipLayerNormAttributes=function(e){var t=e.epsilon;return(0,o.createAttributeWithCacheKey)({epsilon:t})}},5101:function(e,t,n){\\\"use strict\\\";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},r.apply(this,arguments)},a=this&&this.__read||function(e,t){var n=\\\"function\\\"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,a,o=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)i.push(r.value)}catch(e){a={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(a)throw a.error}}return i},o=this&&this.__spreadArray||function(e,t,n){if(n||2===arguments.length)for(var r,a=0,o=t.length;a<o;a++)!r&&a in t||(r||(r=Array.prototype.slice.call(t,0,a)),r[a]=t[a]);return e.concat(r||Array.prototype.slice.call(t))};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.parseSliceAttributes=t.slice=void 0;var i=n(6952),c=n(387),u=n(1163),s=n(2075),l=function(e,t){var n=[];if(e.length>t)if(7===e[t].dataType)e[t].getBigInt64Array().forEach((function(e){return n.push(Number(e))}));else{if(6!==e[t].dataType)throw new Error(\\\"Input \\\".concat(t,\\\" must be an array of int32 or int64\\\"));e[t].getInt32Array().forEach((function(e){return n.push(Number(e))}))}return n},p=function(e,t,n,r,a){var o=e;return e<0&&(o+=n[r[t]]),a[t]<0?Math.max(0,Math.min(o,n[r[t]]-1)):Math.max(0,Math.min(o,n[r[t]]))};t.slice=function(e,t){!function(e,t){if(!e||e.length<1)throw new Error(\\\"too few inputs\\\");if(0!==t.axes.length){if(t.axes.length!==t.starts.length||t.axes.length!==t.ends.length)throw new Error(\\\"axes, starts and ends must have the same length\\\")}else if(t.starts.length!==t.ends.length)throw new Error(\\\"starts and ends must have the same length\\\");e.slice(1).forEach((function(t,n){if(6!==e[n+1].dataType&&7!==e[n+1].dataType)throw new Error(\\\"Input \\\".concat(n,\\\" must be an array of int32 or int64\\\"))}))}(e.inputs,t);var n=function(e,t){var n=function(e,t){if(e.length>1){var n=l(e,1),r=l(e,2),i=l(e,3);return 0===i.length&&(i=o([],a(Array(e[0].dims.length).keys()),!1)),(0,c.createAttributeWithCacheKey)({starts:n,ends:r,axes:i})}return t}(e,t),d={name:\\\"Slice\\\",inputTypes:[u.GpuDataType.default],cacheHint:n.cacheKey+(e.length>4?\\\"steps_\\\"+e[4].dims.toString():\\\"\\\")};return r(r({},d),{get:function(){return function(e,t,n){var c=t[0].dims,d=i.ShapeUtil.size(c),f=n.axes.length>0?i.ShapeUtil.normalizeAxes(n.axes,c.length):o([],a(Array(c.length).keys()),!1),h=l(t,4);h.forEach((function(e){return 0!==e||function(){throw new Error(\\\"step cannot be 0\\\")}})),0===h.length&&(h=Array(f.length).fill(1));var g=n.starts.map((function(e,t){return p(e,t,c,f,h)})),m=n.ends.map((function(e,t){return p(e,t,c,f,h)}));if(f.length!==c.length)for(var v=0;v<c.length;++v)f.includes(v)||(g.splice(v,0,0),m.splice(v,0,c[v]),h.splice(v,0,1));var y=h.map((function(e){return Math.sign(e)}));h.forEach((function(e,t,n){if(e<0){var r=(m[t]-g[t])/e,a=g[t],o=a+r*h[t];g[t]=o,m[t]=a,n[t]=-e}}));var b=c.slice(0);f.forEach((function(e,t){b[e]=Math.ceil((m[e]-g[e])/h[e])}));var w={dims:b,dataType:t[0].dataType,gpuDataType:u.GpuDataType.default},S=(0,s.outputVariable)(\\\"output\\\",t[0].dataType,b),_=(0,s.inputVariable)(\\\"input\\\",t[0].dataType,c),x=i.ShapeUtil.size(b);return r(r({},e),{getShaderSource:function(e){return\\\"\\\\n      \\\".concat(e.declareVariables(_,S),\\\"\\\\n        const signs = array<i32, \\\").concat(y.length,\\\">(\\\").concat(y.map((function(e){return\\\"\\\".concat(e,\\\"i\\\")})).join(\\\",\\\"),\\\");\\\\n        const starts = array<u32, \\\").concat(g.length,\\\">(\\\").concat(g.map((function(e){return\\\"\\\".concat(e,\\\"u\\\")})).join(\\\",\\\"),\\\");\\\\n        const ends = array<u32, \\\").concat(m.length,\\\">(\\\").concat(m.map((function(e){return\\\"\\\".concat(e,\\\"u\\\")})).join(\\\",\\\"),\\\");\\\\n        const steps = array<u32, \\\").concat(h.length,\\\">(\\\").concat(h.map((function(e){return\\\"\\\".concat(e,\\\"u\\\")})).join(\\\",\\\"),\\\");\\\\n        const inputShape = array<u32, \\\").concat(c.length,\\\">(\\\").concat(c.map((function(e){return\\\"\\\".concat(e,\\\"u\\\")})).join(\\\",\\\"),\\\");\\\\n\\\\n        \\\").concat(function(e,t,n,r){return\\\"fn calculateInputIndices(outputIndices: \\\".concat(t.type.indices,\\\") -> \\\").concat(e.type.indices,\\\" {\\\\n          var inputIndices: \\\").concat(e.type.indices,\\\";\\\\n          var carry = 0u;\\\\n          for (var i = \\\").concat(n.length,\\\"; i >= 0; i--) {\\\\n            var outputIndex = \\\").concat(1===r.length?\\\"outputIndices\\\":\\\"outputIndices[i]\\\",\\\";\\\\n            var inputIndex = outputIndex * steps[i] + starts[i] + carry;\\\\n            carry = inputIndex / inputShape[i];\\\\n            inputIndex = inputIndex % inputShape[i];\\\\n            if (signs[i] < 0) {\\\\n              inputIndex = inputShape[i] - inputIndex - 1u + starts[i];\\\\n            }\\\\n            \\\").concat(1===n.length?\\\"inputIndices\\\":\\\"inputIndices[i]\\\",\\\" = inputIndex;\\\\n          }\\\\n          return inputIndices;\\\\n      }\\\")}(_,S,c,b),\\\"\\\\n        \\\").concat(e.mainStart(),\\\"\\\\n          \\\").concat(e.guardAgainstOutOfBoundsWorkgroupSizes(x),\\\"\\\\n          let outputIndices = \\\").concat(S.offsetToIndices(\\\"global_idx\\\"),\\\";\\\\n          let inputIndices = calculateInputIndices(outputIndices);\\\\n          \\\").concat(S.setByOffset(\\\"global_idx\\\",_.getByIndices(\\\"inputIndices\\\")),\\\"\\\\n      }\\\")},outputs:[w],dispatchGroup:function(){return{x:Math.ceil(d/64)}}})}(d,e,n)}})}(e.inputs,t),d=n.get();if(!(i.ShapeUtil.size(d.outputs[0].dims)>0))throw new Error(\\\"slice: output size is 0\\\");e.compute(n,{inputs:[0]})},t.parseSliceAttributes=function(e){var t=e.starts,n=e.ends,r=e.axes;return(0,c.createAttributeWithCacheKey)({starts:t,ends:n,axes:r})}},6198:function(e,t,n){\\\"use strict\\\";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},r.apply(this,arguments)};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.parseSoftmaxAttributes=t.softmax=t.softmaxProgramMetadata=void 0;var a=n(6952),o=n(387),i=n(1163),c=n(2075);t.softmaxProgramMetadata={name:\\\"Softmax\\\",inputTypes:[i.GpuDataType.default]},t.softmax=function(e,n){!function(e){if(!e||1!==e.length)throw new Error(\\\"Softmax op requires 1 input.\\\")}(e.inputs),e.compute(r(r({},t.softmaxProgramMetadata),{cacheHint:n.cacheKey,get:function(){return function(e,n){var o=(0,c.tensorTypeToWsglStorageType)(e.dataType),u=e.dims,s=a.ShapeUtil.size(u),l=n.axis;if(l<0&&(l=u.length+l),l<u.length-1)throw new Error(\\\"softmax only supports last axis for now.\\\");var p=u[l],d=s/p,f=\\\"f32\\\"===o?\\\"var threadMax: f32 = -3.402823e+38f;\\\":\\\"var threadMax: f16 = -65504.0h;\\\";return r(r({},t.softmaxProgramMetadata),{outputs:[{dims:u,dataType:e.dataType,gpuDataType:i.GpuDataType.default}],getShaderSource:function(e){return\\\"\\\\n      var<workgroup> rowMaxShared : \\\".concat(o,\\\";\\\\n      var<workgroup> rowSumShared : \\\").concat(o,\\\";\\\\n      var<workgroup> threadShared : array<\\\").concat(o,\\\", \\\").concat(64,\\\">;\\\\n\\\\n      @group(0) @binding(0) var<storage, read> x : array<\\\").concat(o,\\\">;\\\\n      @group(0) @binding(1) var<storage, read_write> result : array<\\\").concat(o,\\\">;\\\\n\\\\n      fn getValue(row: i32, col: i32, row_stride: i32) -> \\\").concat(o,\\\" {\\\\n        let index = row * row_stride + col;\\\\n        return x[index];\\\\n      }\\\\n\\\\n      fn setValue(row: i32, col: i32, row_stride: i32, value: \\\").concat(o,\\\") {\\\\n        let index = row * row_stride + col;\\\\n        result[index] = value;\\\\n      }\\\\n\\\\n      @compute @workgroup_size(\\\").concat(64,\\\", 1, 1)\\\\n      fn main(@builtin(local_invocation_id) local_id : vec3<u32>, @builtin(global_invocation_id) global_id : vec3u) {\\\\n        let gindex = i32(global_id.x);\\\\n        let lindex = i32(local_id.x);\\\\n        const wg = \\\").concat(64,\\\";\\\\n        let row = gindex / wg;\\\\n        let cols = \\\").concat(p,\\\";\\\\n        let row_stride : i32 = \\\").concat(p,\\\";\\\\n\\\\n        // find the rows max\\\\n        \\\").concat(f,\\\"\\\\n        for (var col = lindex; col < cols; col += wg) {\\\\n          let value = getValue(row, col, row_stride);\\\\n          threadMax = max(threadMax, value);\\\\n        }\\\\n        if (lindex < cols) {\\\\n          threadShared[lindex] = threadMax;\\\\n        }\\\\n        workgroupBarrier();\\\\n\\\\n        var reduceSize = min(cols, wg);\\\\n        for (var currSize = reduceSize >> 1;  currSize > 0; currSize = reduceSize >> 1) {\\\\n          reduceSize = currSize + (reduceSize & 1);\\\\n          if (lindex < currSize) {\\\\n            threadShared[lindex] = max(threadShared[lindex], threadShared[lindex + reduceSize]);\\\\n          }\\\\n          workgroupBarrier();\\\\n        }\\\\n        if (lindex == 0) {\\\\n          rowMaxShared = threadShared[0];\\\\n        }\\\\n        workgroupBarrier();\\\\n\\\\n        // find the rows sum\\\\n        var threadSum: \\\").concat(o,\\\" = 0.0;\\\\n        for (var col = lindex; col < cols; col += wg) {\\\\n          let subExp = exp(getValue(row, col, row_stride) - rowMaxShared);\\\\n          threadSum += subExp;\\\\n        }\\\\n        threadShared[lindex] = threadSum;\\\\n        workgroupBarrier();\\\\n\\\\n        for (var currSize = wg >> 1;  currSize > 0; currSize = currSize >> 1) {\\\\n          if (lindex < currSize) {\\\\n            threadShared[lindex] = threadShared[lindex] + threadShared[lindex + currSize];\\\\n          }\\\\n          workgroupBarrier();\\\\n        }\\\\n        if (lindex == 0) {\\\\n          rowSumShared = threadShared[0];\\\\n        }\\\\n        workgroupBarrier();\\\\n\\\\n        // calculate final value for each element in the row\\\\n        for (var col = lindex; col < cols; col += wg) {\\\\n          let value = exp(getValue(row, col, row_stride) - rowMaxShared) / rowSumShared;\\\\n          setValue(row, col, row_stride, value);\\\\n        }\\\\n      }\\\")},dispatchGroup:function(){return{x:d}}})}(e.inputs[0],n)}}))},t.parseSoftmaxAttributes=function(e){return(0,o.createAttributeWithCacheKey)({axis:e.axis})}},2067:function(e,t,n){\\\"use strict\\\";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},r.apply(this,arguments)},a=this&&this.__read||function(e,t){var n=\\\"function\\\"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,a,o=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)i.push(r.value)}catch(e){a={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(a)throw a.error}}return i},o=this&&this.__spreadArray||function(e,t,n){if(n||2===arguments.length)for(var r,a=0,o=t.length;a<o;a++)!r&&a in t||(r||(r=Array.prototype.slice.call(t,0,a)),r[a]=t[a]);return e.concat(r||Array.prototype.slice.call(t))};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.parseSplitAttributes=t.split=void 0;var i=n(6952),c=n(387),u=n(1163),s=n(2075);t.split=function(e,t){!function(e){if(!e||e.length<1)throw new Error(\\\"too few inputs\\\")}(e.inputs),e.compute(function(e,t){var n=1===e.length?t:function(e,t){var n=[],r=t.numOutputs;return e[1].dims[0]>0&&(e[1].getBigInt64Array().forEach((function(e){return n.push(Number(e))})),r=n.length),(0,c.createAttributeWithCacheKey)({numOutputs:r,axis:t.axis,splitSizes:n})}(e,t),l={name:\\\"Split\\\",inputTypes:[u.GpuDataType.default],cacheHint:n.cacheKey};return r(r({},l),{get:function(){return function(e,t,n){for(var c=t[0].dims,l=i.ShapeUtil.size(c),p=t[0].dataType,d=c.length,f=n.axis,h=f<0?c.length+f:f,g=new Array(n.numOutputs),m=(0,s.inputVariable)(\\\"input\\\",p,c),v=new Array(n.numOutputs),y=[],b=[],w=0,S=0;S<n.numOutputs;S++){w+=n.splitSizes[S],v[S]=w;var _=c.slice();_[n.axis]=n.splitSizes[S],b.push(_),g[S]=(0,s.outputVariable)(\\\"output\\\".concat(S),p,b[S]),y.push({dims:b[S],dataType:t[0].dataType,gpuDataType:u.GpuDataType.default})}var x=d<2?\\\"indices\\\":\\\"indices[\\\".concat(h,\\\"]\\\");return r(r({},e),{getShaderSource:function(e){return\\\"\\\\n  \\\".concat(e.declareVariables.apply(e,o([m],a(g),!1)),\\\"\\\\n  const sizeInConcatAxis = array<u32, \\\").concat(v.length,\\\">(\\\").concat(v.map((function(e){return\\\"\\\".concat(e,\\\"u\\\")})).join(\\\",\\\"),\\\");\\\\n  \\\").concat((t=v.length,\\\"\\\\nfn calculateOutputIndex(index: u32) -> u32 {\\\\n    for (var i: u32 = 0u; i < \\\".concat(t,\\\"u; i += 1u ) {\\\\n    if (index < sizeInConcatAxis[i]) {\\\\n        return i;\\\\n    }\\\\n    }\\\\n    return \\\").concat(t,\\\"u;\\\\n}\\\")),\\\"\\\\n  \\\").concat(function(e){for(var t=e.length,n=[],r=0;r<t;++r){var a=e[r].setByIndices(\\\"indices\\\",\\\"input[global_idx]\\\");1===t?n.push(a):0===r?n.push(\\\"if (outputNumber == \\\".concat(r,\\\"u) { \\\").concat(a,\\\" }\\\")):r===t-1?n.push(\\\"else { \\\".concat(a,\\\" }\\\")):n.push(\\\"else if (outputNumber == \\\".concat(r,\\\") { \\\").concat(a,\\\" }\\\"))}return\\\"\\\\n      fn writeBufferData(outputNumber: u32, indices: \\\".concat(e[0].type.indices,\\\", global_idx: u32) {\\\\n        \\\").concat(n.join(\\\"\\\\n\\\"),\\\"\\\\n      }\\\")}(g),\\\"\\\\n\\\\n  \\\").concat(e.mainStart(),\\\"\\\\n    \\\").concat(e.guardAgainstOutOfBoundsWorkgroupSizes(l),\\\"\\\\n\\\\n    var indices = \\\").concat(m.offsetToIndices(\\\"global_idx\\\"),\\\";\\\\n    let outputNumber = calculateOutputIndex(\\\").concat(x,\\\");\\\\n    if (outputNumber != 0) {\\\\n        \\\").concat(x,\\\" -= sizeInConcatAxis[outputNumber - 1u];\\\\n    }\\\\n    writeBufferData(outputNumber, indices, global_idx);\\\\n  }\\\");var t},outputs:y,dispatchGroup:function(){return{x:Math.ceil(l/64)}}})}(l,[e[0]],n)}})}(e.inputs,t),{inputs:[0]})},t.parseSplitAttributes=function(e){var t=e.axis,n=e.splitSizes,r=e.numOutputs<0?n.length:e.numOutputs;if(r!==n.length)throw new Error(\\\"numOutputs and splitSizes lengh must be equal\\\");return(0,c.createAttributeWithCacheKey)({axis:t,numOutputs:r,splitSizes:n})}},8699:function(e,t,n){\\\"use strict\\\";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},r.apply(this,arguments)},a=this&&this.__read||function(e,t){var n=\\\"function\\\"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,a,o=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)i.push(r.value)}catch(e){a={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(a)throw a.error}}return i},o=this&&this.__spreadArray||function(e,t,n){if(n||2===arguments.length)for(var r,a=0,o=t.length;a<o;a++)!r&&a in t||(r||(r=Array.prototype.slice.call(t,0,a)),r[a]=t[a]);return e.concat(r||Array.prototype.slice.call(t))};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.tile=t.createTileProgramInfo=t.tileProgramMetadata=void 0;var i=n(6952),c=n(1163),u=n(2075);t.tileProgramMetadata={name:\\\"Tile\\\",inputTypes:[c.GpuDataType.default]};var s=function(e){return Array.from(e.getBigInt64Array(),Number)};t.createTileProgramInfo=function(e,t){var n=t[0].dims,l=s(t[1]),p=function(e,t){for(var n=[],r=0;r<e.length;++r)n.push(e[r]*t[r]);return n}(n,l),d=i.ShapeUtil.size(p),f=t[0].dataType,h=(0,u.inputVariable)(\\\"input\\\",f,n),g=(0,u.outputVariable)(\\\"output\\\",f,p);return r(r({},e),{outputs:[{dims:p,dataType:t[0].dataType,gpuDataType:c.GpuDataType.default}],getShaderSource:function(e){return\\\"\\\\n      const inputShape = \\\".concat(h.indices.apply(h,o([],a(n),!1)),\\\";\\\\n      \\\").concat(e.declareVariables(h,g),\\\"\\\\n      \\\").concat(e.mainStart(),\\\"\\\\n      \\\").concat(e.guardAgainstOutOfBoundsWorkgroupSizes(d),\\\"\\\\n      let outputIndices = \\\").concat(g.offsetToIndices(\\\"global_idx\\\"),\\\";\\\\n      var inputIndices: \\\").concat(h.type.indices,\\\";\\\\n      for (var i = 0; i < \\\").concat(n.length,\\\"; i++) {\\\\n        let inputDimValue = \\\").concat(g.indicesGet(\\\"outputIndices\\\",\\\"i\\\"),\\\"  % \\\").concat(h.indicesGet(\\\"inputShape\\\",\\\"i\\\"),\\\";\\\\n\\\\n        \\\").concat(h.indicesSet(\\\"inputIndices\\\",\\\"i\\\",\\\"inputDimValue\\\"),\\\"\\\\n      }\\\\n      \\\").concat(g.setByOffset(\\\"global_idx\\\",h.getByIndices(\\\"inputIndices\\\")),\\\"\\\\n    }\\\")},dispatchGroup:function(){return{x:Math.ceil(d/64)}}})},t.tile=function(e){!function(e){if(!e||2!==e.length)throw new Error(\\\"Tile requires 2 inputs.\\\");if(1!==e[0].dataType&&6!==e[0].dataType&&12!==e[0].dataType)throw new Error(\\\"Tile only support float, int32, and uint32 data types\\\");if(7!==e[1].dataType)throw new Error(\\\"Tile `repeats` input should be of int64 data type\\\");if(1!==e[1].dims.length)throw new Error(\\\"Tile `repeats` input should be 1-D\\\");if(s(e[1]).length!==e[0].dims.length)throw new Error(\\\"Tile `repeats` input should have same number of elements as rank of input data tensor\\\")}(e.inputs);var n=s(e.inputs[1]).toString();e.compute(r(r({},t.tileProgramMetadata),{cacheHint:n,get:function(){return(0,t.createTileProgramInfo)(t.tileProgramMetadata,e.inputs)}}),{inputs:[0]})}},2625:function(e,t,n){\\\"use strict\\\";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},r.apply(this,arguments)},a=this&&this.__read||function(e,t){var n=\\\"function\\\"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,a,o=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)i.push(r.value)}catch(e){a={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(a)throw a.error}}return i},o=this&&this.__spreadArray||function(e,t,n){if(n||2===arguments.length)for(var r,a=0,o=t.length;a<o;a++)!r&&a in t||(r||(r=Array.prototype.slice.call(t,0,a)),r[a]=t[a]);return e.concat(r||Array.prototype.slice.call(t))};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.parseTransposeAttributes=t.transpose=t.createTransposeProgramInfo=t.transposeProgramMetadata=void 0;var i=n(6952),c=n(387),u=n(1163),s=n(2075);t.transposeProgramMetadata={name:\\\"Transpose\\\",inputTypes:[u.GpuDataType.default]};var l=function(e,t){return t&&t.length!==e.length?o([],a(e.keys()),!1).reverse():t};t.createTransposeProgramInfo=function(e,n){var a=e.dataType,o=e.dims,c=l(o,n),p=function(e,t){return i.ShapeUtil.sortBasedOnPerm(e,l(e,t))}(o,c),d=o.length,f=i.ShapeUtil.size(p),h=(0,s.outputVariable)(\\\"output\\\",a,p),g=(0,s.inputVariable)(\\\"a\\\",a,o);return r(r({},t.transposeProgramMetadata),{outputs:[{dims:p,dataType:e.dataType,gpuDataType:u.GpuDataType.default}],getShaderSource:function(e){return\\\"\\\\n  \\\".concat(e.declareVariables(g,h),\\\"\\\\n\\\\n  \\\").concat(function(e,t,n,r){var a=[];a.push(\\\"fn perm(i: \\\".concat(r.type.indices,\\\") -> \\\").concat(n.type.indices,\\\" {\\\\n    var a: \\\").concat(n.type.indices,\\\";\\\"));for(var o=0;o<t;++o)a.push(n.indicesSet(\\\"a\\\",e[o],\\\"i[\\\".concat(o,\\\"]\\\")));return a.push(\\\"return a;}\\\"),a.join(\\\"\\\\n\\\")}(c,d,g,h),\\\"\\\\n\\\\n  \\\").concat(e.mainStart(),\\\"\\\\n    \\\").concat(e.guardAgainstOutOfBoundsWorkgroupSizes(f),\\\"\\\\n\\\\n    let indices = \\\").concat(h.offsetToIndices(\\\"global_idx\\\"),\\\";\\\\n    let aIndices = perm(indices);\\\\n\\\\n    \\\").concat(h.setByOffset(\\\"global_idx\\\",g.getByIndices(\\\"aIndices\\\")),\\\"\\\\n  }\\\")},dispatchGroup:function(){return{x:Math.ceil(f/64)}}})},t.transpose=function(e,n){!function(e){if(!e||1!==e.length)throw new Error(\\\"Transpose requires 1 input.\\\")}(e.inputs),e.compute(r(r({},t.transposeProgramMetadata),{cacheHint:n.cacheKey,get:function(){return(0,t.createTransposeProgramInfo)(e.inputs[0],n.perm)}}))},t.parseTransposeAttributes=function(e){return(0,c.createAttributeWithCacheKey)({perm:e.perm})}},9302:function(e,t,n){\\\"use strict\\\";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},r.apply(this,arguments)};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.log=t.thresholdedRelu=t.tanh=t.tan=t.sqrt=t.sinh=t.sin=t.sigmoid=t.relu=t.reciprocal=t.neg=t.not=t.leakyRelu=t.gelu=t.floor=t.exp=t.erf=t.erfImpl=t.elu=t.parseAlphaAttributes=t.cosh=t.cos=t.ceil=t.clip=t.clipV10=t.cast=t.parseCastAttributes=t.atanh=t.atan=t.asinh=t.asin=t.acosh=t.acos=t.abs=void 0;var a=n(6952),o=n(387),i=n(1163),c=n(2075),u=function(e,t,n,o,u,s){void 0===s&&(s=e.dataType);var l={name:t,inputTypes:[i.GpuDataType.default],cacheHint:u};return r(r({},l),{get:function(){return function(e,t,n,o,u){return r(r({},e),{getShaderSource:function(e){return function(e,t,n,r,a,o){var i,u=Math.ceil(t/4);i=\\\"string\\\"==typeof a?\\\"\\\".concat(a,\\\"(a)\\\"):a(\\\"a\\\");var s=(0,c.inputVariable)(\\\"inputData\\\",n,[u],4),l=(0,c.outputVariable)(\\\"outputData\\\",r,[u],4);return\\\"\\\\n  \\\".concat(e.declareVariables(s,l),\\\"\\\\n\\\\n  \\\").concat(null!=o?o:\\\"\\\",\\\"\\\\n\\\\n  \\\").concat(e.mainStart(),\\\"\\\\n    \\\").concat(e.guardAgainstOutOfBoundsWorkgroupSizes(u),\\\"\\\\n\\\\n    let a = \\\").concat(s.getByOffset(\\\"global_idx\\\"),\\\";\\\\n    \\\").concat(l.setByOffset(\\\"global_idx\\\",i),\\\"\\\\n  }\\\")}(e,a.ShapeUtil.size(t.dims),t.dataType,n,o,u)},outputs:[{dims:t.dims,dataType:n,gpuDataType:i.GpuDataType.default}],dispatchGroup:function(e){return{x:Math.ceil(a.ShapeUtil.size(e[0].dims)/64/4)}}})}(l,e,s,n,o)}})};t.abs=function(e){e.compute(u(e.inputs[0],\\\"Abs\\\",\\\"abs\\\"))},t.acos=function(e){e.compute(u(e.inputs[0],\\\"Acos\\\",\\\"acos\\\"))},t.acosh=function(e){e.compute(u(e.inputs[0],\\\"Acosh\\\",\\\"acosh\\\"))},t.asin=function(e){e.compute(u(e.inputs[0],\\\"Asin\\\",\\\"asin\\\"))},t.asinh=function(e){e.compute(u(e.inputs[0],\\\"Asinh\\\",\\\"asinh\\\"))},t.atan=function(e){e.compute(u(e.inputs[0],\\\"Atan\\\",\\\"atan\\\"))},t.atanh=function(e){e.compute(u(e.inputs[0],\\\"Atanh\\\",\\\"atanh\\\"))},t.parseCastAttributes=function(e){return(0,o.createAttributeWithCacheKey)(e)},t.cast=function(e,t){var n;switch(t.to){case 10:n=\\\"vec4<f16>\\\";break;case 1:n=\\\"vec4<f32>\\\";break;case 12:n=\\\"vec4<u32>\\\";break;case 6:n=\\\"vec4<i32>\\\";break;case 9:n=\\\"vec4<bool>\\\";break;default:throw new RangeError(\\\"not supported type (specified in attribute 'to' from 'Cast' operator): \\\".concat(t.to))}e.compute(u(e.inputs[0],\\\"Cast\\\",n,void 0,t.cacheKey,t.to))},t.clipV10=function(e,t){var n=(0,c.tensorTypeToWsglStorageType)(e.inputs[0].dataType);e.compute(u(e.inputs[0],\\\"Clip\\\",(function(e){return\\\"clamp(\\\".concat(e,\\\", clip_min_, clip_max_)\\\")}),\\\"\\\\n    const clip_min_: vec4<\\\".concat(n,\\\"> = vec4(\\\").concat(n,\\\"(\\\").concat(t.min,\\\"));\\\\n    const clip_max_: vec4<\\\").concat(n,\\\"> = vec4(\\\").concat(n,\\\"(\\\").concat(t.max,\\\"));\\\\n\\\"),t.cacheKey),{inputs:[0]})},t.clip=function(e){var n,r,i,c=(r=(n=e.inputs).length>=2?n[1].getFloat32Array()[0]:a.MIN_CLIP,i=n.length>=3?n[2].getFloat32Array()[0]:a.MAX_CLIP,(0,o.createAttributeWithCacheKey)({min:r,max:i}));(0,t.clipV10)(e,c)},t.ceil=function(e){e.compute(u(e.inputs[0],\\\"Ceil\\\",\\\"ceil\\\"))},t.cos=function(e){e.compute(u(e.inputs[0],\\\"Cos\\\",\\\"cos\\\"))},t.cosh=function(e){e.compute(u(e.inputs[0],\\\"Cosh\\\",\\\"cosh\\\"))},t.parseAlphaAttributes=function(e){return(0,o.createAttributeWithCacheKey)(e)},t.elu=function(e,t){e.compute(u(e.inputs[0],\\\"Elu\\\",(function(e){return\\\"elu_vf32(\\\".concat(e,\\\")\\\")}),\\\"\\\\n  const elu_alpha_: f32 = f32(\\\".concat(t.alpha,\\\");\\\\n\\\\n  fn elu_f32(a: f32) -> f32 {\\\\n  return select((exp(a) - 1.0) * elu_alpha_, a, a >= 0.0);\\\\n  }\\\\n\\\\n  fn elu_vf32(v: vec4<f32>) -> vec4<f32> {\\\\n  return vec4(elu_f32(v.x), elu_f32(v.y), elu_f32(v.z), elu_f32(v.w));\\\\n  }\\\"),t.cacheKey))},t.erfImpl=function(e,t){return void 0===t&&(t=\\\"f32\\\"),\\\"\\\\nconst r0: \\\".concat(t,\\\" = 0.3275911;\\\\nconst r1: \\\").concat(t,\\\" = 0.254829592;\\\\nconst r2: \\\").concat(t,\\\" = -0.284496736;\\\\nconst r3: \\\").concat(t,\\\" = 1.421413741;\\\\nconst r4: \\\").concat(t,\\\" = -1.453152027;\\\\nconst r5: \\\").concat(t,\\\" = 1.061405429;\\\\n\\\\nfn erf_vf32(v: \\\").concat(e,\\\") -> \\\").concat(e,\\\" {\\\\n  let absv = abs(v);\\\\n  let x = 1.0 / (1.0 + r0 * absv);\\\\n  return sign(v) * (1.0 - ((((r5 * x + r4) * x + r3) * x + r2) * x + r1) * x * exp(-absv * absv));\\\\n}\\\")},t.erf=function(e){var n=(0,c.tensorTypeToWsglStorageType)(e.inputs[0].dataType);e.compute(u(e.inputs[0],\\\"Erf\\\",(function(e){return\\\"erf_vf32(\\\".concat(e,\\\")\\\")}),(0,t.erfImpl)(\\\"vec4<\\\".concat(n,\\\">\\\"),n)))},t.exp=function(e){e.compute(u(e.inputs[0],\\\"Exp\\\",\\\"exp\\\"))},t.floor=function(e){e.compute(u(e.inputs[0],\\\"Floor\\\",\\\"floor\\\"))},t.gelu=function(e){var n=(0,c.tensorTypeToWsglStorageType)(e.inputs[0].dataType);e.compute(u(e.inputs[0],\\\"Gelu\\\",(function(e){return\\\"0.5 * \\\".concat(e,\\\" * (1.0 + erf_vf32(\\\").concat(e,\\\" * 0.7071067811865475))\\\")}),(0,t.erfImpl)(\\\"vec4<\\\".concat(n,\\\">\\\"),n)))},t.leakyRelu=function(e,t){e.compute(u(e.inputs[0],\\\"LeakyRelu\\\",(function(e){return\\\"select(leaky_relu_alpha_ * \\\".concat(e,\\\", \\\").concat(e,\\\", \\\").concat(e,\\\" >= vec4<f32>(0.0))\\\")}),\\\"const leaky_relu_alpha_: f32 = f32(\\\".concat(t.alpha,\\\");\\\"),t.cacheKey))},t.not=function(e){e.compute(u(e.inputs[0],\\\"Not\\\",(function(e){return\\\"!\\\".concat(e)})))},t.neg=function(e){e.compute(u(e.inputs[0],\\\"Neg\\\",(function(e){return\\\"-\\\".concat(e)})))},t.reciprocal=function(e){e.compute(u(e.inputs[0],\\\"Reciprocal\\\",(function(e){return\\\"1.0/\\\".concat(e)})))},t.relu=function(e){e.compute(u(e.inputs[0],\\\"Relu\\\",(function(e){return\\\"select(vec4<f32>(0.0), \\\".concat(e,\\\", \\\").concat(e,\\\" > vec4<f32>(0.0))\\\")})))},t.sigmoid=function(e){e.compute(u(e.inputs[0],\\\"Sigmoid\\\",(function(e){return\\\"(1.0 / (1.0 + exp(-\\\".concat(e,\\\")))\\\")})))},t.sin=function(e){e.compute(u(e.inputs[0],\\\"Sin\\\",\\\"sin\\\"))},t.sinh=function(e){e.compute(u(e.inputs[0],\\\"Sinh\\\",\\\"sinh\\\"))},t.sqrt=function(e){e.compute(u(e.inputs[0],\\\"Sqrt\\\",\\\"sqrt\\\"))},t.tan=function(e){e.compute(u(e.inputs[0],\\\"Tan\\\",\\\"tan\\\"))},t.tanh=function(e){e.compute(u(e.inputs[0],\\\"Tanh\\\",\\\"tanh\\\"))},t.thresholdedRelu=function(e,t){return e.compute(u(e.inputs[0],\\\"ThresholdedRelu\\\",(function(e){return\\\"select(vec4<f32>(0.0), \\\".concat(e,\\\", \\\").concat(e,\\\" > thresholded_relu_alpha_)\\\")}),\\\"const thresholded_relu_alpha_: vec4<f32> = vec4<f32>(\\\".concat(t.alpha,\\\");\\\"),t.cacheKey)),0},t.log=function(e){e.compute(u(e.inputs[0],\\\"Log\\\",\\\"log\\\"))}},8307:function(e,t,n){\\\"use strict\\\";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},r.apply(this,arguments)};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.where=void 0;var a=n(6952),o=n(1163),i=n(2075);t.where=function(e){var t,n;e.compute((t=e.inputs,n={name:\\\"Where\\\",inputTypes:[o.GpuDataType.default,o.GpuDataType.default,o.GpuDataType.default]},r(r({},n),{get:function(){return function(e,t){var n=t[1].dims,c=t[2].dims,u=t[0].dims,s=t[1].dataType,l=!(a.ShapeUtil.areEqual(n,c)&&a.ShapeUtil.areEqual(c,u)),p=n,d=a.ShapeUtil.size(n);if(l){var f=a.BroadcastUtil.calcShape(a.BroadcastUtil.calcShape(n,c,!1),u,!1);if(!f)throw new Error(\\\"Can't perform where op on the given tensors\\\");p=f,d=a.ShapeUtil.size(p)}return r(r({},e),{getShaderSource:function(e){return function(e,t,n,r,o){var c,u=a.ShapeUtil.size(n),s=Math.ceil(u/4),l=(0,i.outputVariable)(\\\"outputData\\\",o,n,4),p=(0,i.inputVariable)(\\\"aData\\\",t[1].dataType,t[1].dims,4),d=(0,i.inputVariable)(\\\"bData\\\",t[2].dataType,t[2].dims,4),f=(0,i.inputVariable)(\\\"cData\\\",t[0].dataType,t[0].dims,4),h=function(e,t,n){return\\\"select(\\\".concat(t,\\\", \\\").concat(e,\\\", \\\").concat(n,\\\")\\\")};if(r){var g=function(e,t,n){void 0===n&&(n=\\\"\\\");var r=\\\"aData[indexA\\\".concat(t,\\\"][componentA\\\").concat(t,\\\"]\\\"),a=\\\"bData[indexB\\\".concat(t,\\\"][componentB\\\").concat(t,\\\"]\\\"),o=\\\"bool(cData[indexC\\\".concat(t,\\\"] & \\\").concat(4278190080>>>8*(3-t),\\\"u)\\\");return\\\"\\\\n            let outputIndices\\\".concat(t,\\\" = \\\").concat(l.offsetToIndices(\\\"global_idx * 4u + \\\".concat(t,\\\"u\\\")),\\\";\\\\n            let offsetA\\\").concat(t,\\\" = \\\").concat(p.broadcastedIndicesToOffset(\\\"outputIndices\\\".concat(t),l),\\\";\\\\n            let offsetB\\\").concat(t,\\\" = \\\").concat(d.broadcastedIndicesToOffset(\\\"outputIndices\\\".concat(t),l),\\\";\\\\n            let offsetC\\\").concat(t,\\\" = \\\").concat(f.broadcastedIndicesToOffset(\\\"outputIndices\\\".concat(t),l),\\\";\\\\n            let indexA\\\").concat(t,\\\" = offsetA\\\").concat(t,\\\" / 4u;\\\\n            let indexB\\\").concat(t,\\\" = offsetB\\\").concat(t,\\\" / 4u;\\\\n            let indexC\\\").concat(t,\\\" = offsetC\\\").concat(t,\\\" / 4u;\\\\n            let componentA\\\").concat(t,\\\" = offsetA\\\").concat(t,\\\" % 4u;\\\\n            let componentB\\\").concat(t,\\\" = offsetB\\\").concat(t,\\\" % 4u;\\\\n            \\\").concat(e,\\\"[\\\").concat(t,\\\"] = \\\").concat(n,\\\"(\\\").concat(h(r,a,o),\\\");\\\\n          \\\")};c=9===o?\\\"\\\\n            var data = vec4<u32>(0);\\\\n            \\\".concat(g(\\\"data\\\",0,\\\"u32\\\"),\\\"\\\\n            \\\").concat(g(\\\"data\\\",1,\\\"u32\\\"),\\\"\\\\n            \\\").concat(g(\\\"data\\\",2,\\\"u32\\\"),\\\"\\\\n            \\\").concat(g(\\\"data\\\",3,\\\"u32\\\"),\\\"\\\\n            outputData[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));\\\"):\\\"\\\\n            \\\".concat(g(\\\"outputData[global_idx]\\\",0),\\\"\\\\n            \\\").concat(g(\\\"outputData[global_idx]\\\",1),\\\"\\\\n            \\\").concat(g(\\\"outputData[global_idx]\\\",2),\\\"\\\\n            \\\").concat(g(\\\"outputData[global_idx]\\\",3),\\\"\\\\n          \\\")}else c=l.setByOffset(\\\"global_idx\\\",h(p.getByOffset(\\\"global_idx\\\"),d.getByOffset(\\\"global_idx\\\"),f.getByOffset(\\\"global_idx\\\")));return\\\"\\\\n        \\\".concat(e.declareVariables(f,p,d,l),\\\"\\\\n        \\\").concat(e.mainStart(),\\\"\\\\n        \\\").concat(e.guardAgainstOutOfBoundsWorkgroupSizes(s),\\\"\\\\n        \\\").concat(c,\\\"\\\\n      }\\\")}(e,t,p,l,s)},outputs:[{dims:p,dataType:s,gpuDataType:o.GpuDataType.default}],dispatchGroup:function(){return{x:Math.ceil(d/64/4)}}})}(n,t)}})))}},8305:function(e,t,n){\\\"use strict\\\";var r=this&&this.__values||function(e){var t=\\\"function\\\"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&\\\"number\\\"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?\\\"Object is not iterable.\\\":\\\"Symbol.iterator is not defined.\\\")},a=this&&this.__read||function(e,t){var n=\\\"function\\\"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,a,o=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)i.push(r.value)}catch(e){a={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(a)throw a.error}}return i},o=this&&this.__spreadArray||function(e,t,n){if(n||2===arguments.length)for(var r,a=0,o=t.length;a<o;a++)!r&&a in t||(r||(r=Array.prototype.slice.call(t,0,a)),r[a]=t[a]);return e.concat(r||Array.prototype.slice.call(t))};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.ProgramManager=void 0;var i=n(7917),c=n(4955),u=n(2075),s=function(){function e(e){this.backend=e,this.repo=new Map,this.attributesBound=!1}return e.prototype.getArtifact=function(e){return this.repo.get(e)},e.prototype.setArtifact=function(e,t){this.repo.set(e,t)},e.prototype.run=function(e,t,n,c,u){var s,l,p,d,f=this,h=this.backend.device,g=this.backend.getComputePassEncoder(),m=this.backend.supportTimestampQuery&&\\\"default\\\"===this.backend.env.webgpu.profilingMode;m&&g.writeTimestamp(this.backend.profilingQuerySet,0),g.setPipeline(e.computePipeline);var v=[];try{for(var y=r(n),b=y.next();!b.done;b=y.next()){var w=b.value;v.push({binding:v.length,resource:{buffer:w.buffer}})}}catch(e){s={error:e}}finally{try{b&&!b.done&&(l=y.return)&&l.call(y)}finally{if(s)throw s.error}}try{for(var S=r(c),_=S.next();!_.done;_=S.next()){var x=_.value;v.push({binding:v.length,resource:{buffer:x.buffer}})}}catch(e){p={error:e}}finally{try{_&&!_.done&&(d=S.return)&&d.call(S)}finally{if(p)throw p.error}}var T=h.createBindGroup({layout:e.computePipeline.getBindGroupLayout(0),entries:v,label:e.programInfo.name});if(g.setBindGroup(0,T),g.dispatchWorkgroups.apply(g,o([],a(u),!1)),this.backend.pendingDispatchNumber++,m){g.writeTimestamp(this.backend.profilingQuerySet,1),null==this.backend.profilingQueryData&&(this.backend.profilingQueryData=this.backend.gpuDataManager.create(16,GPUBufferUsage.COPY_SRC|GPUBufferUsage.QUERY_RESOLVE));var O=this.backend.gpuDataManager.create(16,GPUBufferUsage.MAP_READ|GPUBufferUsage.COPY_DST);this.backend.endComputePass(),this.backend.getCommandEncoder().resolveQuerySet(this.backend.profilingQuerySet,0,2,this.backend.profilingQueryData.buffer,0),this.backend.getCommandEncoder().copyBufferToBuffer(this.backend.profilingQueryData.buffer,0,O.buffer,0,16),this.backend.flush();var I=this.backend.currentKernelId,A=this.backend.kernels.get(I),E=\\\"[\\\".concat(A[0],\\\"] \\\").concat(A[1]);O.buffer.mapAsync(GPUMapMode.READ).then((function(){var n=new BigUint64Array(O.buffer.getMappedRange()),r=n[0],a=n[1];O.buffer.unmap(),void 0===f.backend.profilingTimeBase&&(f.backend.profilingTimeBase=r);var o=Number(r-f.backend.profilingTimeBase),c=Number(a-f.backend.profilingTimeBase);if(!Number.isSafeInteger(o)||!Number.isSafeInteger(c))throw new RangeError(\\\"incorrect timestamp range\\\");f.backend.gpuDataManager.release(O.id);var u=\\\"\\\";t.forEach((function(e,t){u+=\\\"input[\\\".concat(t,\\\"]: [\\\").concat(e.dims,\\\"] | \\\").concat((0,i.tensorDataTypeEnumToString)(e.dataType),\\\", \\\")}));var s=\\\"\\\";e.programInfo.outputs.forEach((function(e,t){s+=\\\"output[\\\".concat(t,\\\"]: [\\\").concat(e.dims,\\\"] | \\\").concat((0,i.tensorDataTypeEnumToString)(e.dataType),\\\", \\\")})),console.log('[profiling] kernel \\\"'.concat(I,\\\"|\\\").concat(E,'\\\" ').concat(u).concat(s,\\\"execution time: \\\").concat(c-o,\\\" ns\\\"))}))}this.backend.pendingDispatchNumber>=16&&this.backend.flush()},e.prototype.dispose=function(){},e.prototype.build=function(e,t){var n=this.backend.device,r=[];n.features.has(\\\"shader-f16\\\")&&r.push(\\\"enable f16;\\\");var a=(0,u.createShaderHelper)(t),o=e.getShaderSource(a),i=\\\"\\\".concat(r.join(\\\"\\\\n\\\"),\\\"\\\\n\\\").concat(a.additionalImplementations,\\\"\\\\n\\\").concat(o),s=n.createShaderModule({code:i,label:e.name});return(0,c.LOG_DEBUG)(\\\"verbose\\\",(function(){return\\\"[WebGPU] shader code: \\\".concat(i)})),{programInfo:e,computePipeline:n.createComputePipeline({compute:{module:s,entryPoint:\\\"main\\\"},layout:\\\"auto\\\",label:e.name})}},e.prototype.normalizeDispatchGroupSize=function(e){var t=\\\"number\\\"==typeof e?e:e.x,n=\\\"number\\\"==typeof e?1:e.y||1,r=\\\"number\\\"==typeof e?1:e.z||1,a=this.backend.device.limits.maxComputeWorkgroupsPerDimension;if(t<=a&&n<=a&&r<=a)return[t,n,r];var o=t*n*r,i=Math.ceil(Math.sqrt(o));if(i>a){if((i=Math.ceil(Math.cbrt(o)))>a)throw new Error(\\\"Total dispatch size exceeds WebGPU maximum.\\\");return[i,i,i]}return[i,i,1]},e}();t.ProgramManager=s},1163:function(e,t){\\\"use strict\\\";var n;Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.GpuDataType=void 0,(n=t.GpuDataType||(t.GpuDataType={}))[n.default=0]=\\\"default\\\",n[n.upload=1]=\\\"upload\\\",n[n.profile=2]=\\\"profile\\\"},7918:function(e,t,n){\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.setRunOptions=void 0;var r=n(263),a=n(1497);t.setRunOptions=function(e){var t=(0,r.getInstance)(),n=0,o=[],i=e||{};try{if(void 0===(null==e?void 0:e.logSeverityLevel))i.logSeverityLevel=2;else if(\\\"number\\\"!=typeof e.logSeverityLevel||!Number.isInteger(e.logSeverityLevel)||e.logSeverityLevel<0||e.logSeverityLevel>4)throw new Error(\\\"log serverity level is not valid: \\\".concat(e.logSeverityLevel));if(void 0===(null==e?void 0:e.logVerbosityLevel))i.logVerbosityLevel=0;else if(\\\"number\\\"!=typeof e.logVerbosityLevel||!Number.isInteger(e.logVerbosityLevel))throw new Error(\\\"log verbosity level is not valid: \\\".concat(e.logVerbosityLevel));void 0===(null==e?void 0:e.terminate)&&(i.terminate=!1);var c=0;return void 0!==(null==e?void 0:e.tag)&&(c=(0,a.allocWasmString)(e.tag,o)),0===(n=t._OrtCreateRunOptions(i.logSeverityLevel,i.logVerbosityLevel,!!i.terminate,c))&&(0,a.checkLastError)(\\\"Can't create run options.\\\"),void 0!==(null==e?void 0:e.extra)&&(0,a.iterateExtraOptions)(e.extra,\\\"\\\",new WeakSet,(function(e,r){var i=(0,a.allocWasmString)(e,o),c=(0,a.allocWasmString)(r,o);0!==t._OrtAddRunConfigEntry(n,i,c)&&(0,a.checkLastError)(\\\"Can't set a run config entry: \\\".concat(e,\\\" - \\\").concat(r,\\\".\\\"))})),[n,o]}catch(e){throw 0!==n&&t._OrtReleaseRunOptions(n),o.forEach((function(e){return t._free(e)})),e}}},7622:function(e,t,n){\\\"use strict\\\";var r=this&&this.__values||function(e){var t=\\\"function\\\"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&\\\"number\\\"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?\\\"Object is not iterable.\\\":\\\"Symbol.iterator is not defined.\\\")},a=this&&this.__read||function(e,t){var n=\\\"function\\\"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,a,o=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)i.push(r.value)}catch(e){a={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(a)throw a.error}}return i};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.setSessionOptions=void 0;var o=n(263),i=n(1497);t.setSessionOptions=function(e){var t,n,c,u,s,l,p=(0,o.getInstance)(),d=0,f=[],h=e||{};!function(e){e.extra||(e.extra={}),e.extra.session||(e.extra.session={});var t=e.extra.session;t.use_ort_model_bytes_directly||(t.use_ort_model_bytes_directly=\\\"1\\\"),e.executionProviders&&e.executionProviders.some((function(e){return\\\"webgpu\\\"===(\\\"string\\\"==typeof e?e:e.name)}))&&(e.enableMemPattern=!1)}(h);try{var g=function(e){switch(e){case\\\"disabled\\\":return 0;case\\\"basic\\\":return 1;case\\\"extended\\\":return 2;case\\\"all\\\":return 99;default:throw new Error(\\\"unsupported graph optimization level: \\\".concat(e))}}(null!==(c=h.graphOptimizationLevel)&&void 0!==c?c:\\\"all\\\"),m=function(e){switch(e){case\\\"sequential\\\":return 0;case\\\"parallel\\\":return 1;default:throw new Error(\\\"unsupported execution mode: \\\".concat(e))}}(null!==(u=h.executionMode)&&void 0!==u?u:\\\"sequential\\\"),v=\\\"string\\\"==typeof h.logId?(0,i.allocWasmString)(h.logId,f):0,y=null!==(s=h.logSeverityLevel)&&void 0!==s?s:2;if(!Number.isInteger(y)||y<0||y>4)throw new Error(\\\"log serverity level is not valid: \\\".concat(y));var b=null!==(l=h.logVerbosityLevel)&&void 0!==l?l:0;if(!Number.isInteger(b)||b<0||b>4)throw new Error(\\\"log verbosity level is not valid: \\\".concat(b));var w=\\\"string\\\"==typeof h.optimizedModelFilePath?(0,i.allocWasmString)(h.optimizedModelFilePath,f):0;if(0===(d=p._OrtCreateSessionOptions(g,!!h.enableCpuMemArena,!!h.enableMemPattern,m,!!h.enableProfiling,0,v,y,b,w))&&(0,i.checkLastError)(\\\"Can't create session options.\\\"),h.executionProviders&&function(e,t,n){var a,c;try{for(var u=r(t),s=u.next();!s.done;s=u.next()){var l=s.value,p=\\\"string\\\"==typeof l?l:l.name;switch(p){case\\\"xnnpack\\\":p=\\\"XNNPACK\\\";break;case\\\"webnn\\\":if(p=\\\"WEBNN\\\",\\\"string\\\"!=typeof l){var d=l;if(null==d?void 0:d.deviceType){var f=(0,i.allocWasmString)(\\\"deviceType\\\",n),h=(0,i.allocWasmString)(d.deviceType,n);0!==(0,o.getInstance)()._OrtAddSessionConfigEntry(e,f,h)&&(0,i.checkLastError)(\\\"Can't set a session config entry: 'deviceType' - \\\".concat(d.deviceType,\\\".\\\"))}(null==d?void 0:d.powerPreference)&&(f=(0,i.allocWasmString)(\\\"powerPreference\\\",n),h=(0,i.allocWasmString)(d.powerPreference,n),0!==(0,o.getInstance)()._OrtAddSessionConfigEntry(e,f,h)&&(0,i.checkLastError)(\\\"Can't set a session config entry: 'powerPreference' - \\\".concat(d.powerPreference,\\\".\\\")))}break;case\\\"webgpu\\\":if(p=\\\"JS\\\",\\\"string\\\"!=typeof l){var g=l;if(null==g?void 0:g.preferredLayout){if(\\\"NCHW\\\"!==g.preferredLayout&&\\\"NHWC\\\"!==g.preferredLayout)throw new Error(\\\"preferredLayout must be either 'NCHW' or 'NHWC': \\\".concat(g.preferredLayout));f=(0,i.allocWasmString)(\\\"preferredLayout\\\",n),h=(0,i.allocWasmString)(g.preferredLayout,n),0!==(0,o.getInstance)()._OrtAddSessionConfigEntry(e,f,h)&&(0,i.checkLastError)(\\\"Can't set a session config entry: 'preferredLayout' - \\\".concat(g.preferredLayout,\\\".\\\"))}}break;case\\\"wasm\\\":case\\\"cpu\\\":continue;default:throw new Error(\\\"not supported execution provider: \\\".concat(p))}var m=(0,i.allocWasmString)(p,n);0!==(0,o.getInstance)()._OrtAppendExecutionProvider(e,m)&&(0,i.checkLastError)(\\\"Can't append execution provider: \\\".concat(p,\\\".\\\"))}}catch(e){a={error:e}}finally{try{s&&!s.done&&(c=u.return)&&c.call(u)}finally{if(a)throw a.error}}}(d,h.executionProviders,f),h.freeDimensionOverrides)try{for(var S=r(Object.entries(h.freeDimensionOverrides)),_=S.next();!_.done;_=S.next()){var x=a(_.value,2),T=x[0],O=x[1];if(\\\"string\\\"!=typeof T)throw new Error(\\\"free dimension override name must be a string: \\\".concat(T));if(\\\"number\\\"!=typeof O||!Number.isInteger(O)||O<0)throw new Error(\\\"free dimension override value must be a non-negative integer: \\\".concat(O));var I=(0,i.allocWasmString)(T,f);0!==p._OrtAddFreeDimensionOverride(d,I,O)&&(0,i.checkLastError)(\\\"Can't set a free dimension override: \\\".concat(T,\\\" - \\\").concat(O,\\\".\\\"))}}catch(e){t={error:e}}finally{try{_&&!_.done&&(n=S.return)&&n.call(S)}finally{if(t)throw t.error}}return void 0!==h.extra&&(0,i.iterateExtraOptions)(h.extra,\\\"\\\",new WeakSet,(function(e,t){var n=(0,i.allocWasmString)(e,f),r=(0,i.allocWasmString)(t,f);0!==p._OrtAddSessionConfigEntry(d,n,r)&&(0,i.checkLastError)(\\\"Can't set a session config entry: \\\".concat(e,\\\" - \\\").concat(t,\\\".\\\"))})),[d,f]}catch(e){throw 0!==d&&p._OrtReleaseSessionOptions(d),f.forEach((function(e){return p._free(e)})),e}}},7917:function(e,t){\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.dataLocationEnumToString=t.dataLocationStringToEnum=t.isGpuBufferSupportedType=t.logLevelStringToEnum=t.tensorTypeToTypedArrayConstructor=t.getTensorElementSize=t.tensorDataTypeEnumToString=t.tensorDataTypeStringToEnum=void 0,t.tensorDataTypeStringToEnum=function(e){switch(e){case\\\"int8\\\":return 3;case\\\"uint8\\\":return 2;case\\\"bool\\\":return 9;case\\\"int16\\\":return 5;case\\\"uint16\\\":return 4;case\\\"int32\\\":return 6;case\\\"uint32\\\":return 12;case\\\"float16\\\":return 10;case\\\"float32\\\":return 1;case\\\"float64\\\":return 11;case\\\"string\\\":return 8;case\\\"int64\\\":return 7;case\\\"uint64\\\":return 13;default:throw new Error(\\\"unsupported data type: \\\".concat(e))}},t.tensorDataTypeEnumToString=function(e){switch(e){case 3:return\\\"int8\\\";case 2:return\\\"uint8\\\";case 9:return\\\"bool\\\";case 5:return\\\"int16\\\";case 4:return\\\"uint16\\\";case 6:return\\\"int32\\\";case 12:return\\\"uint32\\\";case 10:return\\\"float16\\\";case 1:return\\\"float32\\\";case 11:return\\\"float64\\\";case 8:return\\\"string\\\";case 7:return\\\"int64\\\";case 13:return\\\"uint64\\\";default:throw new Error(\\\"unsupported data type: \\\".concat(e))}},t.getTensorElementSize=function(e){return[void 0,4,1,1,2,2,4,8,void 0,1,2,8,4,8,void 0,void 0,void 0][e]},t.tensorTypeToTypedArrayConstructor=function(e){switch(e){case\\\"float16\\\":case\\\"uint16\\\":return Uint16Array;case\\\"float32\\\":return Float32Array;case\\\"uint8\\\":case\\\"bool\\\":return Uint8Array;case\\\"int8\\\":return Int8Array;case\\\"int16\\\":return Int16Array;case\\\"int32\\\":return Int32Array;case\\\"float64\\\":return Float64Array;case\\\"uint32\\\":return Uint32Array;case\\\"int64\\\":return BigInt64Array;case\\\"uint64\\\":return BigUint64Array;default:throw new Error(\\\"unsupported type: \\\".concat(e))}},t.logLevelStringToEnum=function(e){switch(e){case\\\"verbose\\\":return 0;case\\\"info\\\":return 1;case\\\"warning\\\":return 2;case\\\"error\\\":return 3;case\\\"fatal\\\":return 4;default:throw new Error(\\\"unsupported logging level: \\\".concat(e))}},t.isGpuBufferSupportedType=function(e){return\\\"float32\\\"===e||\\\"int32\\\"===e||\\\"int64\\\"===e||\\\"bool\\\"===e||\\\"float16\\\"===e||\\\"uint32\\\"===e},t.dataLocationStringToEnum=function(e){switch(e){case\\\"none\\\":return 0;case\\\"cpu\\\":return 1;case\\\"cpu-pinned\\\":return 2;case\\\"texture\\\":return 3;case\\\"gpu-buffer\\\":return 4;default:throw new Error(\\\"unsupported data location: \\\".concat(e))}},t.dataLocationEnumToString=function(e){return[\\\"none\\\",\\\"cpu\\\",\\\"cpu-pinned\\\",\\\"texture\\\",\\\"gpu-buffer\\\"][e]}},1259:function(e,t,n){\\\"use strict\\\";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(a,o){function i(e){try{u(r.next(e))}catch(e){o(e)}}function c(e){try{u(r.throw(e))}catch(e){o(e)}}function u(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,c)}u((r=r.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var n,r,a,o,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:c(0),throw:c(1),return:c(2)},\\\"function\\\"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function c(c){return function(u){return function(c){if(n)throw new TypeError(\\\"Generator is already executing.\\\");for(;o&&(o=0,c[0]&&(i=0)),i;)try{if(n=1,r&&(a=2&c[0]?r.return:c[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,c[1])).done)return a;switch(r=0,a&&(c=[2&c[0],a.value]),c[0]){case 0:case 1:a=c;break;case 4:return i.label++,{value:c[1],done:!1};case 5:i.label++,r=c[1],c=[0];continue;case 7:c=i.ops.pop(),i.trys.pop();continue;default:if(!((a=(a=i.trys).length>0&&a[a.length-1])||6!==c[0]&&2!==c[0])){i=0;continue}if(3===c[0]&&(!a||c[1]>a[0]&&c[1]<a[3])){i.label=c[1];break}if(6===c[0]&&i.label<a[1]){i.label=a[1],a=c;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(c);break}a[2]&&i.ops.pop(),i.trys.pop();continue}c=t.call(e,i)}catch(e){c=[6,e],r=0}finally{n=a=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,u])}}},o=this&&this.__read||function(e,t){var n=\\\"function\\\"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,a,o=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)i.push(r.value)}catch(e){a={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(a)throw a.error}}return i},i=this&&this.__values||function(e){var t=\\\"function\\\"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&\\\"number\\\"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?\\\"Object is not iterable.\\\":\\\"Symbol.iterator is not defined.\\\")};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.extractTransferableBuffers=t.endProfiling=t.run=t.releaseSession=t.createSession=t.createSessionFinalize=t.createSessionAllocate=t.initRuntime=void 0;var c=n(7918),u=n(7622),s=n(7917),l=n(263),p=n(1497);t.initRuntime=function(e){return r(void 0,void 0,void 0,(function(){return a(this,(function(t){switch(t.label){case 0:return n=e.wasm.numThreads,r=(0,s.logLevelStringToEnum)(e.logLevel),0!==(0,l.getInstance)()._OrtInit(n,r)&&(0,p.checkLastError)(\\\"Can't initialize onnxruntime.\\\"),[3,2];case 1:t.sent(),t.label=2;case 2:return[2]}var n,r}))}))};var d=new Map;t.createSessionAllocate=function(e){var t=(0,l.getInstance)(),n=t._malloc(e.byteLength);if(0===n)throw new Error(\\\"Can't create a session. failed to allocate a buffer of size \\\".concat(e.byteLength,\\\".\\\"));return t.HEAPU8.set(e,n),[n,e.byteLength]},t.createSessionFinalize=function(e,t){var n,r=(0,l.getInstance)(),a=0,i=0,c=[],s=[],f=[];try{i=(n=o((0,u.setSessionOptions)(t),2))[0],c=n[1],0===(a=r._OrtCreateSession(e[0],e[1],i))&&(0,p.checkLastError)(\\\"Can't create a session.\\\");for(var h=o(function(e){var t=(0,l.getInstance)(),n=t.stackSave();try{var r=t.stackAlloc(8);return 0!==t._OrtGetInputOutputCount(e,r,r+4)&&(0,p.checkLastError)(\\\"Can't get session input/output count.\\\"),[t.HEAP32[r/4],t.HEAP32[r/4+1]]}finally{t.stackRestore(n)}}(a),2),g=h[0],m=h[1],v=[],y=[],b=0;b<g;b++){var w=r._OrtGetInputName(a,b);0===w&&(0,p.checkLastError)(\\\"Can't get an input name.\\\"),s.push(w),v.push(r.UTF8ToString(w))}for(b=0;b<m;b++){var S=r._OrtGetOutputName(a,b);0===S&&(0,p.checkLastError)(\\\"Can't get an output name.\\\"),f.push(S);var _=r.UTF8ToString(S);y.push(_)}return d.set(a,[a,s,f,null]),[a,v,y]}catch(e){throw s.forEach((function(e){return r._OrtFree(e)})),f.forEach((function(e){return r._OrtFree(e)})),0!==a&&r._OrtReleaseSession(a),e}finally{r._free(e[0]),0!==i&&r._OrtReleaseSessionOptions(i),c.forEach((function(e){return r._free(e)}))}},t.createSession=function(e,n){var r=(0,t.createSessionAllocate)(e);return(0,t.createSessionFinalize)(r,n)},t.releaseSession=function(e){var t,n=(0,l.getInstance)(),r=d.get(e);if(!r)throw new Error(\\\"cannot release session. invalid session id: \\\".concat(e));var a=o(r,4),i=a[0],c=a[1],u=a[2],s=a[3];s&&n._OrtReleaseBinding(s.handle),null===(t=n.jsepUnregisterBuffers)||void 0===t||t.call(n,e),c.forEach((function(e){return n._OrtFree(e)})),u.forEach((function(e){return n._OrtFree(e)})),n._OrtReleaseSession(i),d.delete(e)};var f=function(e,t,n,r,a){if(e){var o,i,c=(0,l.getInstance)(),u=e[0],d=e[1],f=e[3];if(\\\"string\\\"===u&&\\\"gpu-buffer\\\"===f)throw new Error(\\\"String tensor is not supported on GPU.\\\");if(\\\"gpu-buffer\\\"===f){var h=e[2].gpuBuffer,g=(0,s.getTensorElementSize)((0,s.tensorDataTypeStringToEnum)(u));i=d.reduce((function(e,t){return e*t}),1)*g,o=c.jsepRegisterBuffer(r,a,h,i)}else{var m=e[2];if(Array.isArray(m)){i=4*m.length,o=c._malloc(i),n.push(o);for(var v=o/4,y=0;y<m.length;y++){if(\\\"string\\\"!=typeof m[y])throw new TypeError(\\\"tensor data at index \\\".concat(y,\\\" is not a string\\\"));c.HEAPU32[v++]=(0,p.allocWasmString)(m[y],n)}}else i=m.byteLength,o=c._malloc(i),n.push(o),c.HEAPU8.set(new Uint8Array(m.buffer,m.byteOffset,i),o)}var b=c.stackSave(),w=c.stackAlloc(4*d.length);try{var S=w/4;d.forEach((function(e){return c.HEAP32[S++]=e}));var _=c._OrtCreateTensor((0,s.tensorDataTypeStringToEnum)(u),o,i,w,d.length,(0,s.dataLocationStringToEnum)(f));0===_&&(0,p.checkLastError)(\\\"Can't create tensor for input/output. session=\\\".concat(r,\\\", index=\\\").concat(a,\\\".\\\")),t.push(_)}finally{c.stackRestore(b)}}else t.push(0)};t.run=function(e,t,n,i,u,h){return r(void 0,void 0,void 0,(function(){var r,g,m,v,y,b,w,S,_,x,T,O,I,A,E,C,P,M,D,R,k,B,z,G,j,U,W,L,V,N,F;return a(this,(function(a){switch(a.label){case 0:if(r=(0,l.getInstance)(),!(g=d.get(e)))throw new Error(\\\"cannot run inference. invalid session id: \\\".concat(e));m=o(g,4),v=m[0],y=m[1],b=m[2],w=m[3],S=t.length,_=i.length,x=0,T=[],O=[],I=[],A=[],E=r.stackSave(),C=r.stackAlloc(4*S),P=r.stackAlloc(4*S),M=r.stackAlloc(4*_),D=r.stackAlloc(4*_),a.label=1;case 1:for(a.trys.push([1,,11,12]),N=o((0,c.setRunOptions)(h),2),x=N[0],T=N[1],V=0;V<S;V++)f(n[V],O,A,e,t[V]);for(V=0;V<_;V++)f(u[V],I,A,e,S+i[V]);for(R=C/4,k=P/4,B=M/4,z=D/4,V=0;V<S;V++)r.HEAPU32[R++]=O[V],r.HEAPU32[k++]=y[t[V]];for(V=0;V<_;V++)r.HEAPU32[B++]=I[V],r.HEAPU32[z++]=b[i[V]];return[3,6];case 2:return V<S?(j=t[V],[4,r._OrtBindInput(G,y[j],O[V])]):[3,5];case 3:0!==a.sent()&&(0,p.checkLastError)(\\\"Can't bind input[\\\".concat(V,\\\"] for session=\\\").concat(e,\\\".\\\")),a.label=4;case 4:return V++,[3,2];case 5:for(V=0;V<_;V++)j=i[V],(null===(F=u[V])||void 0===F?void 0:F[3])?0!==r._OrtBindOutput(G,b[j],I[V],0)&&(0,p.checkLastError)(\\\"Can't bind pre-allocated output[\\\".concat(V,\\\"] for session=\\\").concat(e,\\\".\\\")):0!==r._OrtBindOutput(G,b[j],0,undefined[j])&&(0,p.checkLastError)(\\\"Can't bind output[\\\".concat(V,\\\"] to \\\").concat(undefined[V],\\\" for session=\\\").concat(e,\\\".\\\"));a.label=6;case 6:return U=void 0,[3,8];case 7:return U=a.sent(),[3,10];case 8:return[4,r._OrtRun(v,P,C,S,D,_,M,x)];case 9:U=a.sent(),a.label=10;case 10:for(0!==U&&(0,p.checkLastError)(\\\"failed to call OrtRun().\\\"),W=[],L=function(e){var t=r.HEAPU32[M/4+e];if(t===I[e])return W.push(u[e]),\\\"continue\\\";var n=r.stackSave(),a=r.stackAlloc(16),o=!1,c=void 0,l=0;try{0!==r._OrtGetTensorData(t,a,a+4,a+8,a+12)&&(0,p.checkLastError)(\\\"Can't access output tensor data on index \\\".concat(e,\\\".\\\"));var d=a/4,f=r.HEAPU32[d++];l=r.HEAPU32[d++];for(var h=r.HEAPU32[d++],g=r.HEAPU32[d++],m=[],v=0;v<g;v++)m.push(r.HEAPU32[h/4+v]);r._OrtFree(h);var y=m.reduce((function(e,t){return e*t}),1);c=(0,s.tensorDataTypeEnumToString)(f);var b=null==w?void 0:w.outputPreferredLocations[i[e]];if(\\\"string\\\"===c){if(\\\"gpu-buffer\\\"===b)throw new Error(\\\"String tensor is not supported on GPU.\\\");for(var S=[],_=l/4,x=0;x<y;x++){var T=r.HEAPU32[_++],O=x===y-1?void 0:r.HEAPU32[_]-T;S.push(r.UTF8ToString(T,O))}W.push([c,m,S,\\\"cpu\\\"])}else if(\\\"gpu-buffer\\\"===b&&y>0){var A=r.jsepGetBuffer(l),E=(0,s.getTensorElementSize)(f);if(void 0===E||!(0,s.isGpuBufferSupportedType)(c))throw new Error(\\\"Unsupported data type: \\\".concat(c));o=!0,W.push([c,m,{gpuBuffer:A,download:r.jsepCreateDownloader(A,y*E,c),dispose:function(){r._OrtReleaseTensor(t)}},\\\"gpu-buffer\\\"])}else{var C=new((0,s.tensorTypeToTypedArrayConstructor)(c))(y);new Uint8Array(C.buffer,C.byteOffset,C.byteLength).set(r.HEAPU8.subarray(l,l+C.byteLength)),W.push([c,m,C,\\\"cpu\\\"])}}finally{r.stackRestore(n),\\\"string\\\"===c&&l&&r._free(l),o||r._OrtReleaseTensor(t)}},V=0;V<_;V++)L(V);return w&&r._OrtClearBoundOutputs(w.handle),[2,W];case 11:return r.stackRestore(E),O.forEach((function(e){return r._OrtReleaseTensor(e)})),I.forEach((function(e){return r._OrtReleaseTensor(e)})),A.forEach((function(e){return r._free(e)})),0!==x&&r._OrtReleaseRunOptions(x),T.forEach((function(e){return r._free(e)})),[7];case 12:return[2]}}))}))},t.endProfiling=function(e){var t=(0,l.getInstance)(),n=d.get(e);if(!n)throw new Error(\\\"invalid session id\\\");var r=n[0],a=t._OrtEndProfiling(r);0===a&&(0,p.checkLastError)(\\\"Can't get an profile file name.\\\"),t._OrtFree(a)},t.extractTransferableBuffers=function(e){var t,n,r=[];try{for(var a=i(e),o=a.next();!o.done;o=a.next()){var c=o.value[2];!Array.isArray(c)&&\\\"buffer\\\"in c&&r.push(c.buffer)}}catch(e){t={error:e}}finally{try{o&&!o.done&&(n=a.return)&&n.call(a)}finally{if(t)throw t.error}}return r}},263:function(e,t,n){\\\"use strict\\\";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var a=Object.getOwnPropertyDescriptor(t,n);a&&!(\\\"get\\\"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,a)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,\\\"default\\\",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)\\\"default\\\"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return a(t,e),t},i=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(a,o){function i(e){try{u(r.next(e))}catch(e){o(e)}}function c(e){try{u(r.throw(e))}catch(e){o(e)}}function u(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,c)}u((r=r.apply(e,t||[])).next())}))},c=this&&this.__generator||function(e,t){var n,r,a,o,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:c(0),throw:c(1),return:c(2)},\\\"function\\\"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function c(c){return function(u){return function(c){if(n)throw new TypeError(\\\"Generator is already executing.\\\");for(;o&&(o=0,c[0]&&(i=0)),i;)try{if(n=1,r&&(a=2&c[0]?r.return:c[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,c[1])).done)return a;switch(r=0,a&&(c=[2&c[0],a.value]),c[0]){case 0:case 1:a=c;break;case 4:return i.label++,{value:c[1],done:!1};case 5:i.label++,r=c[1],c=[0];continue;case 7:c=i.ops.pop(),i.trys.pop();continue;default:if(!((a=(a=i.trys).length>0&&a[a.length-1])||6!==c[0]&&2!==c[0])){i=0;continue}if(3===c[0]&&(!a||c[1]>a[0]&&c[1]<a[3])){i.label=c[1];break}if(6===c[0]&&i.label<a[1]){i.label=a[1],a=c;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(c);break}a[2]&&i.ops.pop(),i.trys.pop();continue}c=t.call(e,i)}catch(e){c=[6,e],r=0}finally{n=a=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,u])}}};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.dispose=t.getInstance=t.initializeWebAssembly=void 0;var u,s=o(n(6449)),l=n(932),p=n(3474),d=!1,f=!1,h=!1;t.initializeWebAssembly=function(e){return i(void 0,void 0,void 0,(function(){var t,r,a,o,i,g,m,v,y,b,w;return c(this,(function(c){switch(c.label){case 0:if(d)return[2,Promise.resolve()];if(f)throw new Error(\\\"multiple calls to 'initializeWebAssembly()' detected.\\\");if(h)throw new Error(\\\"previous call to 'initializeWebAssembly()' failed.\\\");return f=!0,t=e.initTimeout,r=e.numThreads,a=e.simd,o=r>1&&function(){try{return\\\"undefined\\\"!=typeof SharedArrayBuffer&&(\\\"undefined\\\"!=typeof MessageChannel&&(new MessageChannel).port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11])))}catch(e){return!1}}(),i=a&&function(){try{return WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,30,1,28,0,65,0,253,15,253,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,186,1,26,11]))}catch(e){return!1}}(),g=e.wasmPaths,m=\\\"string\\\"==typeof g?g:void 0,v=function(e,t){return t?e?\\\"ort-wasm-simd-threaded.wasm\\\":\\\"ort-wasm-threaded.wasm\\\":e?\\\"ort-wasm-simd.wasm\\\":\\\"ort-wasm.wasm\\\"}(i,o),y=\\\"object\\\"==typeof g?g[v]:void 0,b=!1,w=[],t>0&&w.push(new Promise((function(e){setTimeout((function(){b=!0,e()}),t)}))),w.push(new Promise((function(e,t){var r=o?p:l,a={locateFile:function(e,t){return o&&e.endsWith(\\\".worker.js\\\")&&\\\"undefined\\\"!=typeof Blob?URL.createObjectURL(new Blob([n(4154)],{type:\\\"text/javascript\\\"})):e.endsWith(\\\".wasm\\\")?y||(null!=m?m:t)+v:t+e}};if(o)if(\\\"undefined\\\"==typeof Blob)a.mainScriptUrlOrBlob=s.join(__dirname,\\\"ort-wasm-threaded.js\\\");else{var i=\\\"var ortWasmThreaded=(function(){var _scriptDir;return \\\".concat(r.toString(),\\\"})();\\\");a.mainScriptUrlOrBlob=new Blob([i],{type:\\\"text/javascript\\\"})}r(a).then((function(t){f=!1,d=!0,u=t,e()}),(function(e){f=!1,h=!0,t(e)}))}))),[4,Promise.race(w)];case 1:if(c.sent(),b)throw new Error(\\\"WebAssembly backend initializing failed due to timeout: \\\".concat(t,\\\"ms\\\"));return[2]}}))}))},t.getInstance=function(){if(d&&u)return u;throw new Error(\\\"WebAssembly is not initialized yet.\\\")},t.dispose=function(){var e;!d||f||h||(f=!0,null===(e=u.PThread)||void 0===e||e.terminateAllThreads(),u=void 0,f=!1,d=!1,h=!0)}},1497:function(e,t,n){\\\"use strict\\\";var r=this&&this.__read||function(e,t){var n=\\\"function\\\"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,a,o=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)i.push(r.value)}catch(e){a={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(a)throw a.error}}return i};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.checkLastError=t.iterateExtraOptions=t.allocWasmString=void 0;var a=n(263);t.allocWasmString=function(e,t){var n=(0,a.getInstance)(),r=n.lengthBytesUTF8(e)+1,o=n._malloc(r);return n.stringToUTF8(e,o,r),t.push(o),o},t.iterateExtraOptions=function(e,n,a,o){if(\\\"object\\\"==typeof e&&null!==e){if(a.has(e))throw new Error(\\\"Circular reference in options\\\");a.add(e)}Object.entries(e).forEach((function(e){var i=r(e,2),c=i[0],u=i[1],s=n?n+c:c;if(\\\"object\\\"==typeof u)(0,t.iterateExtraOptions)(u,s+\\\".\\\",a,o);else if(\\\"string\\\"==typeof u||\\\"number\\\"==typeof u)o(s,u.toString());else{if(\\\"boolean\\\"!=typeof u)throw new Error(\\\"Can't handle extra config type: \\\".concat(typeof u));o(s,u?\\\"1\\\":\\\"0\\\")}}))},t.checkLastError=function(e){var t=(0,a.getInstance)(),n=t.stackSave();try{var r=t.stackAlloc(8);t._OrtGetLastError(r,r+4);var o=t.HEAP32[r/4],i=t.HEAPU32[r/4+1],c=i?t.UTF8ToString(i):\\\"\\\";throw new Error(\\\"\\\".concat(e,\\\" ERROR_CODE: \\\").concat(o,\\\", ERROR_MESSAGE: \\\").concat(c))}finally{t.stackRestore(n)}}},3474:function(e,t,n){var _scriptDir,r=(_scriptDir=\\\"undefined\\\"!=typeof document&&document.currentScript?document.currentScript.src:void 0,\\\"undefined\\\"!=typeof __filename&&(_scriptDir=_scriptDir||__filename),function(e={}){function t(){return P.buffer!=k.buffer&&W(),k}function r(){return P.buffer!=k.buffer&&W(),B}function a(){return P.buffer!=k.buffer&&W(),z}function o(){return P.buffer!=k.buffer&&W(),G}function i(){return P.buffer!=k.buffer&&W(),j}var c,u,s=e;s.ready=new Promise(((e,t)=>{c=e,u=t}));var l,p,d,f=Object.assign({},s),h=\\\"./this.program\\\",g=(e,t)=>{throw t},m=\\\"object\\\"==typeof window,v=\\\"function\\\"==typeof importScripts,y=\\\"object\\\"==typeof process&&\\\"object\\\"==typeof process.versions&&\\\"string\\\"==typeof process.versions.node,b=s.ENVIRONMENT_IS_PTHREAD||!1,w=\\\"\\\";function S(e){return s.locateFile?s.locateFile(e,w):w+e}if(y){var _=n(1384),x=n(908);let t;w=v?x.dirname(w)+\\\"/\\\":__dirname+\\\"/\\\",l=(e,t)=>(e=e.startsWith(\\\"file://\\\")?new URL(e):x.normalize(e),_.readFileSync(e,t?void 0:\\\"utf8\\\")),d=e=>((e=l(e,!0)).buffer||(e=new Uint8Array(e)),e),p=(e,t,n,r=!0)=>{e=e.startsWith(\\\"file://\\\")?new URL(e):x.normalize(e),_.readFile(e,r?void 0:\\\"utf8\\\",((e,a)=>{e?n(e):t(r?a.buffer:a)}))},!s.thisProgram&&1<process.argv.length&&(h=process.argv[1].replace(/\\\\\\\\/g,\\\"/\\\")),process.argv.slice(2),g=(e,t)=>{throw process.exitCode=e,t},s.inspect=()=>\\\"[Emscripten Module object]\\\";try{t=n(9925)}catch(e){throw console.error('The \\\"worker_threads\\\" module is not supported in this node.js build - perhaps a newer version is needed?'),e}global.Worker=t.Worker}else(m||v)&&(v?w=self.location.href:\\\"undefined\\\"!=typeof document&&document.currentScript&&(w=document.currentScript.src),_scriptDir&&(w=_scriptDir),w=0!==w.indexOf(\\\"blob:\\\")?w.substr(0,w.replace(/[?#].*/,\\\"\\\").lastIndexOf(\\\"/\\\")+1):\\\"\\\",y||(l=e=>{var t=new XMLHttpRequest;return t.open(\\\"GET\\\",e,!1),t.send(null),t.responseText},v&&(d=e=>{var t=new XMLHttpRequest;return t.open(\\\"GET\\\",e,!1),t.responseType=\\\"arraybuffer\\\",t.send(null),new Uint8Array(t.response)}),p=(e,t,n)=>{var r=new XMLHttpRequest;r.open(\\\"GET\\\",e,!0),r.responseType=\\\"arraybuffer\\\",r.onload=()=>{200==r.status||0==r.status&&r.response?t(r.response):n()},r.onerror=n,r.send(null)}));y&&\\\"undefined\\\"==typeof performance&&(global.performance=n(6953).performance);var T=console.log.bind(console),O=console.error.bind(console);y&&(T=(...e)=>_.writeSync(1,e.join(\\\" \\\")+\\\"\\\\n\\\"),O=(...e)=>_.writeSync(2,e.join(\\\" \\\")+\\\"\\\\n\\\"));var I,A=s.print||T,E=s.printErr||O;Object.assign(s,f),f=null,s.thisProgram&&(h=s.thisProgram),s.quit&&(g=s.quit),s.wasmBinary&&(I=s.wasmBinary);var C=s.noExitRuntime||!0;\\\"object\\\"!=typeof WebAssembly&&te(\\\"no native wasm support detected\\\");var P,M,D,R,k,B,z,G,j,U=!1;function W(){var e=P.buffer;s.HEAP8=k=new Int8Array(e),s.HEAP16=new Int16Array(e),s.HEAP32=z=new Int32Array(e),s.HEAPU8=B=new Uint8Array(e),s.HEAPU16=new Uint16Array(e),s.HEAPU32=G=new Uint32Array(e),s.HEAPF32=new Float32Array(e),s.HEAPF64=j=new Float64Array(e)}var L=s.INITIAL_MEMORY||16777216;if(5242880<=L||te(\\\"INITIAL_MEMORY should be larger than STACK_SIZE, was \\\"+L+\\\"! (STACK_SIZE=5242880)\\\"),b)P=s.wasmMemory;else if(s.wasmMemory)P=s.wasmMemory;else if(!((P=new WebAssembly.Memory({initial:L/65536,maximum:65536,shared:!0})).buffer instanceof SharedArrayBuffer))throw E(\\\"requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag\\\"),y&&E(\\\"(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and/or recent version)\\\"),Error(\\\"bad memory\\\");W(),L=P.buffer.byteLength;var V,N=[],F=[],H=[],q=0;function K(){return C||0<q}var Y,$,X=0,Q=null,Z=null;function J(){X++,s.monitorRunDependencies&&s.monitorRunDependencies(X)}function ee(){if(X--,s.monitorRunDependencies&&s.monitorRunDependencies(X),0==X&&(null!==Q&&(clearInterval(Q),Q=null),Z)){var e=Z;Z=null,e()}}function te(e){throw s.onAbort&&s.onAbort(e),E(e=\\\"Aborted(\\\"+e+\\\")\\\"),U=!0,R=1,e=new WebAssembly.RuntimeError(e+\\\". Build with -sASSERTIONS for more info.\\\"),u(e),e}function ne(e){return e.startsWith(\\\"data:application/octet-stream;base64,\\\")}function re(e){if(e==Y&&I)return new Uint8Array(I);if(d)return d(e);throw\\\"both async and sync fetching of the wasm failed\\\"}function ae(e,t,n){return function(e){if(!I&&(m||v)){if(\\\"function\\\"==typeof fetch&&!e.startsWith(\\\"file://\\\"))return fetch(e,{credentials:\\\"same-origin\\\"}).then((t=>{if(!t.ok)throw\\\"failed to load wasm binary file at '\\\"+e+\\\"'\\\";return t.arrayBuffer()})).catch((()=>re(e)));if(p)return new Promise(((t,n)=>{p(e,(e=>t(new Uint8Array(e))),n)}))}return Promise.resolve().then((()=>re(e)))}(e).then((e=>WebAssembly.instantiate(e,t))).then((e=>e)).then(n,(e=>{E(\\\"failed to asynchronously prepare wasm: \\\"+e),te(e)}))}function oe(e){this.name=\\\"ExitStatus\\\",this.message=`Program terminated with exit(${e})`,this.status=e}function ie(e){e.terminate(),e.onmessage=()=>{}}function ce(e){(e=he.La[e])||te(),he.lb(e)}function ue(e){var t=he.fb();if(!t)return 6;he.Oa.push(t),he.La[e.Na]=t,t.Na=e.Na;var n={cmd:\\\"run\\\",start_routine:e.mb,arg:e.eb,pthread_ptr:e.Na};return y&&t.unref(),t.postMessage(n,e.sb),0}ne(Y=\\\"ort-wasm-threaded.wasm\\\")||(Y=S(Y));var se=\\\"undefined\\\"!=typeof TextDecoder?new TextDecoder(\\\"utf8\\\"):void 0,le=(e,t,n)=>{var r=(t>>>=0)+n;for(n=t;e[n]&&!(n>=r);)++n;if(16<n-t&&e.buffer&&se)return se.decode(e.buffer instanceof SharedArrayBuffer?e.slice(t,n):e.subarray(t,n));for(r=\\\"\\\";t<n;){var a=e[t++];if(128&a){var o=63&e[t++];if(192==(224&a))r+=String.fromCharCode((31&a)<<6|o);else{var i=63&e[t++];65536>(a=224==(240&a)?(15&a)<<12|o<<6|i:(7&a)<<18|o<<12|i<<6|63&e[t++])?r+=String.fromCharCode(a):(a-=65536,r+=String.fromCharCode(55296|a>>10,56320|1023&a))}}else r+=String.fromCharCode(a)}return r},pe=(e,t)=>(e>>>=0)?le(r(),e,t):\\\"\\\";function de(e){if(b)return Ke(1,1,e);R=e,K()||(he.nb(),s.onExit&&s.onExit(e),U=!0),g(e,new oe(e))}var fe=e=>{if(R=e,b)throw me(e),\\\"unwind\\\";de(e)},he={Ra:[],Oa:[],Za:[],La:{},Va:function(){b?he.hb():he.gb()},gb:function(){N.unshift((()=>{J(),he.ib((()=>ee()))}))},hb:function(){he.receiveObjectTransfer=he.kb,he.threadInitTLS=he.Ya,he.setExitStatus=he.Xa,C=!1},Xa:function(e){R=e},xb:[\\\"$terminateWorker\\\"],nb:function(){for(var e of he.Oa)ie(e);for(e of he.Ra)ie(e);he.Ra=[],he.Oa=[],he.La=[]},lb:function(e){var t=e.Na;delete he.La[t],he.Ra.push(e),he.Oa.splice(he.Oa.indexOf(e),1),e.Na=0,mt(t)},kb:function(){},Ya:function(){he.Za.forEach((e=>e()))},jb:e=>new Promise((t=>{e.onmessage=n=>{var r=(n=n.data).cmd;if(n.targetThread&&n.targetThread!=pt()){var a=he.La[n.wb];a?a.postMessage(n,n.transferList):E('Internal error! Worker sent a message \\\"'+r+'\\\" to target pthread '+n.targetThread+\\\", but that thread no longer exists!\\\")}else\\\"checkMailbox\\\"===r?Ue():\\\"spawnThread\\\"===r?ue(n):\\\"cleanupThread\\\"===r?ce(n.thread):\\\"killThread\\\"===r?(n=n.thread,r=he.La[n],delete he.La[n],ie(r),mt(n),he.Oa.splice(he.Oa.indexOf(r),1),r.Na=0):\\\"cancelThread\\\"===r?he.La[n.thread].postMessage({cmd:\\\"cancel\\\"}):\\\"loaded\\\"===r?(e.loaded=!0,t(e)):\\\"alert\\\"===r?alert(\\\"Thread \\\"+n.threadId+\\\": \\\"+n.text):\\\"setimmediate\\\"===n.target?e.postMessage(n):\\\"callHandler\\\"===r?s[n.handler](...n.args):r&&E(\\\"worker sent an unknown command \\\"+r)},e.onerror=e=>{throw E(\\\"worker sent an error! \\\"+e.filename+\\\":\\\"+e.lineno+\\\": \\\"+e.message),e},y&&(e.on(\\\"message\\\",(function(t){e.onmessage({data:t})})),e.on(\\\"error\\\",(function(t){e.onerror(t)})));var n,r=[];for(n of[\\\"onExit\\\",\\\"onAbort\\\",\\\"print\\\",\\\"printErr\\\"])s.hasOwnProperty(n)&&r.push(n);e.postMessage({cmd:\\\"load\\\",handlers:r,urlOrBlob:s.mainScriptUrlOrBlob||_scriptDir,wasmMemory:P,wasmModule:D})})),ib:function(e){e()},cb:function(){var e=S(\\\"ort-wasm-threaded.worker.js\\\");e=new Worker(e),he.Ra.push(e)},fb:function(){return 0==he.Ra.length&&(he.cb(),he.jb(he.Ra[0])),he.Ra.pop()}};s.PThread=he;var ge=e=>{for(;0<e.length;)e.shift()(s)};function me(e){if(b)return Ke(2,0,e);fe(e)}s.establishStackSpace=function(){var e=pt(),t=a()[e+52>>2>>>0];e=a()[e+56>>2>>>0],wt(t,t-e),_t(t)};var ve=[];function ye(e){this.Ua=e-24,this.bb=function(e){o()[this.Ua+4>>2>>>0]=e},this.ab=function(e){o()[this.Ua+8>>2>>>0]=e},this.Va=function(e,t){this.$a(),this.bb(e),this.ab(t)},this.$a=function(){o()[this.Ua+16>>2>>>0]=0}}function be(e,t,n,r){return b?Ke(3,1,e,t,n,r):we(e,t,n,r)}function we(e,t,n,r){if(e>>>=0,t>>>=0,n>>>=0,r>>>=0,\\\"undefined\\\"==typeof SharedArrayBuffer)return E(\\\"Current environment does not support SharedArrayBuffer, pthreads are not available!\\\"),6;var a=[];return b&&0===a.length?be(e,t,n,r):(e={mb:n,Na:e,eb:r,sb:a},b?(e.ub=\\\"spawnThread\\\",postMessage(e,a),0):ue(e))}function Se(e,t,n){return b?Ke(4,1,e,t,n):0}function _e(e,t){if(b)return Ke(5,1,e,t)}s.invokeEntryPoint=function(e,t){var n=ve[e];n||(e>=ve.length&&(ve.length=e+1),ve[e]=n=V.get(e)),e=n(t),K()?he.Xa(e):vt(e)};var xe=e=>{for(var t=0,n=0;n<e.length;++n){var r=e.charCodeAt(n);127>=r?t++:2047>=r?t+=2:55296<=r&&57343>=r?(t+=4,++n):t+=3}return t},Te=(e,t,n,r)=>{if(!(0<r))return 0;var a=n>>>=0;r=n+r-1;for(var o=0;o<e.length;++o){var i=e.charCodeAt(o);if(55296<=i&&57343>=i&&(i=65536+((1023&i)<<10)|1023&e.charCodeAt(++o)),127>=i){if(n>=r)break;t[n++>>>0]=i}else{if(2047>=i){if(n+1>=r)break;t[n++>>>0]=192|i>>6}else{if(65535>=i){if(n+2>=r)break;t[n++>>>0]=224|i>>12}else{if(n+3>=r)break;t[n++>>>0]=240|i>>18,t[n++>>>0]=128|i>>12&63}t[n++>>>0]=128|i>>6&63}t[n++>>>0]=128|63&i}}return t[n>>>0]=0,n-a},Oe=(e,t,n)=>Te(e,r(),t,n);function Ie(e,t){if(b)return Ke(6,1,e,t)}function Ae(e,t,n){if(b)return Ke(7,1,e,t,n)}function Ee(e,t,n){return b?Ke(8,1,e,t,n):0}function Ce(e,t){if(b)return Ke(9,1,e,t)}function Pe(e,t,n){if(b)return Ke(10,1,e,t,n)}function Me(e,t,n,r){if(b)return Ke(11,1,e,t,n,r)}function De(e,t,n,r){if(b)return Ke(12,1,e,t,n,r)}function Re(e,t,n,r){if(b)return Ke(13,1,e,t,n,r)}function ke(e){if(b)return Ke(14,1,e)}function Be(e,t){if(b)return Ke(15,1,e,t)}function ze(e,t,n){if(b)return Ke(16,1,e,t,n)}var Ge=e=>{if(!U)try{if(e(),!K())try{b?vt(R):fe(R)}catch(e){e instanceof oe||\\\"unwind\\\"==e||g(1,e)}}catch(e){e instanceof oe||\\\"unwind\\\"==e||g(1,e)}};function je(e){e>>>=0,\\\"function\\\"==typeof Atomics.tb&&(Atomics.tb(a(),e>>2,e).value.then(Ue),e+=128,Atomics.store(a(),e>>2,1))}function Ue(){var e=pt();e&&(je(e),Ge((()=>yt())))}s.__emscripten_thread_mailbox_await=je,s.checkMailbox=Ue;var We=e=>0==e%4&&(0!=e%100||0==e%400),Le=[0,31,60,91,121,152,182,213,244,274,305,335],Ve=[0,31,59,90,120,151,181,212,243,273,304,334];function Ne(e,t,n,r,a,o,i,c){return b?Ke(17,1,e,t,n,r,a,o,i,c):-52}function Fe(e,t,n,r,a,o,i){if(b)return Ke(18,1,e,t,n,r,a,o,i)}var He=e=>{var t=xe(e)+1,n=dt(t);return n&&Oe(e,n,t),n},qe=e=>{var t=St();return e=e(),_t(t),e};function Ke(e,t){var n=arguments.length-2,r=arguments;return qe((()=>{for(var a=xt(8*n),o=a>>3,c=0;c<n;c++){var u=r[2+c];i()[o+c>>>0]=u}return gt(e,n,a,t)}))}var Ye,$e=[],Xe={},Qe=()=>{if(!Ye){var e,t={USER:\\\"web_user\\\",LOGNAME:\\\"web_user\\\",PATH:\\\"/\\\",PWD:\\\"/\\\",HOME:\\\"/home/web_user\\\",LANG:(\\\"object\\\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\\\"C\\\").replace(\\\"-\\\",\\\"_\\\")+\\\".UTF-8\\\",_:h||\\\"./this.program\\\"};for(e in Xe)void 0===Xe[e]?delete t[e]:t[e]=Xe[e];var n=[];for(e in t)n.push(`${e}=${t[e]}`);Ye=n}return Ye};function Ze(e,n){if(b)return Ke(19,1,e,n);e>>>=0,n>>>=0;var r=0;return Qe().forEach((function(a,i){var c=n+r;for(i=o()[e+4*i>>2>>>0]=c,c=0;c<a.length;++c)t()[i++>>0>>>0]=a.charCodeAt(c);t()[i>>0>>>0]=0,r+=a.length+1})),0}function Je(e,t){if(b)return Ke(20,1,e,t);e>>>=0,t>>>=0;var n=Qe();o()[e>>2>>>0]=n.length;var r=0;return n.forEach((function(e){r+=e.length+1})),o()[t>>2>>>0]=r,0}function et(e){return b?Ke(21,1,e):52}function tt(e,t,n,r){return b?Ke(22,1,e,t,n,r):52}function nt(e,t,n,r,a){return b?Ke(23,1,e,t,n,r,a):70}var rt=[null,[],[]];function at(e,t,n,a){if(b)return Ke(24,1,e,t,n,a);t>>>=0,n>>>=0,a>>>=0;for(var i=0,c=0;c<n;c++){var u=o()[t>>2>>>0],s=o()[t+4>>2>>>0];t+=8;for(var l=0;l<s;l++){var p=r()[u+l>>>0],d=rt[e];0===p||10===p?((1===e?A:E)(le(d,0)),d.length=0):d.push(p)}i+=s}return o()[a>>2>>>0]=i,0}var ot=[31,29,31,30,31,30,31,31,30,31,30,31],it=[31,28,31,30,31,30,31,31,30,31,30,31],ct=(e,n)=>{t().set(e,n>>>0)};function ut(e,t,n,r){function o(e,t,n){for(e=\\\"number\\\"==typeof e?e.toString():e||\\\"\\\";e.length<t;)e=n[0]+e;return e}function i(e,t){return o(e,t,\\\"0\\\")}function c(e,t){function n(e){return 0>e?-1:0<e?1:0}var r;return 0===(r=n(e.getFullYear()-t.getFullYear()))&&0===(r=n(e.getMonth()-t.getMonth()))&&(r=n(e.getDate()-t.getDate())),r}function u(e){switch(e.getDay()){case 0:return new Date(e.getFullYear()-1,11,29);case 1:return e;case 2:return new Date(e.getFullYear(),0,3);case 3:return new Date(e.getFullYear(),0,2);case 4:return new Date(e.getFullYear(),0,1);case 5:return new Date(e.getFullYear()-1,11,31);case 6:return new Date(e.getFullYear()-1,11,30)}}function s(e){var t=e.Pa;for(e=new Date(new Date(e.Qa+1900,0,1).getTime());0<t;){var n=e.getMonth(),r=(We(e.getFullYear())?ot:it)[n];if(!(t>r-e.getDate())){e.setDate(e.getDate()+t);break}t-=r-e.getDate()+1,e.setDate(1),11>n?e.setMonth(n+1):(e.setMonth(0),e.setFullYear(e.getFullYear()+1))}return n=new Date(e.getFullYear()+1,0,4),t=u(new Date(e.getFullYear(),0,4)),n=u(n),0>=c(t,e)?0>=c(n,e)?e.getFullYear()+1:e.getFullYear():e.getFullYear()-1}e>>>=0,t>>>=0,n>>>=0,r>>>=0;var l=a()[r+40>>2>>>0];for(var p in r={qb:a()[r>>2>>>0],pb:a()[r+4>>2>>>0],Sa:a()[r+8>>2>>>0],Wa:a()[r+12>>2>>>0],Ta:a()[r+16>>2>>>0],Qa:a()[r+20>>2>>>0],Ma:a()[r+24>>2>>>0],Pa:a()[r+28>>2>>>0],yb:a()[r+32>>2>>>0],ob:a()[r+36>>2>>>0],rb:l?pe(l):\\\"\\\"},n=pe(n),l={\\\"%c\\\":\\\"%a %b %d %H:%M:%S %Y\\\",\\\"%D\\\":\\\"%m/%d/%y\\\",\\\"%F\\\":\\\"%Y-%m-%d\\\",\\\"%h\\\":\\\"%b\\\",\\\"%r\\\":\\\"%I:%M:%S %p\\\",\\\"%R\\\":\\\"%H:%M\\\",\\\"%T\\\":\\\"%H:%M:%S\\\",\\\"%x\\\":\\\"%m/%d/%y\\\",\\\"%X\\\":\\\"%H:%M:%S\\\",\\\"%Ec\\\":\\\"%c\\\",\\\"%EC\\\":\\\"%C\\\",\\\"%Ex\\\":\\\"%m/%d/%y\\\",\\\"%EX\\\":\\\"%H:%M:%S\\\",\\\"%Ey\\\":\\\"%y\\\",\\\"%EY\\\":\\\"%Y\\\",\\\"%Od\\\":\\\"%d\\\",\\\"%Oe\\\":\\\"%e\\\",\\\"%OH\\\":\\\"%H\\\",\\\"%OI\\\":\\\"%I\\\",\\\"%Om\\\":\\\"%m\\\",\\\"%OM\\\":\\\"%M\\\",\\\"%OS\\\":\\\"%S\\\",\\\"%Ou\\\":\\\"%u\\\",\\\"%OU\\\":\\\"%U\\\",\\\"%OV\\\":\\\"%V\\\",\\\"%Ow\\\":\\\"%w\\\",\\\"%OW\\\":\\\"%W\\\",\\\"%Oy\\\":\\\"%y\\\"})n=n.replace(new RegExp(p,\\\"g\\\"),l[p]);var d=\\\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\\\".split(\\\" \\\"),f=\\\"January February March April May June July August September October November December\\\".split(\\\" \\\");for(p in l={\\\"%a\\\":e=>d[e.Ma].substring(0,3),\\\"%A\\\":e=>d[e.Ma],\\\"%b\\\":e=>f[e.Ta].substring(0,3),\\\"%B\\\":e=>f[e.Ta],\\\"%C\\\":e=>i((e.Qa+1900)/100|0,2),\\\"%d\\\":e=>i(e.Wa,2),\\\"%e\\\":e=>o(e.Wa,2,\\\" \\\"),\\\"%g\\\":e=>s(e).toString().substring(2),\\\"%G\\\":e=>s(e),\\\"%H\\\":e=>i(e.Sa,2),\\\"%I\\\":e=>(0==(e=e.Sa)?e=12:12<e&&(e-=12),i(e,2)),\\\"%j\\\":e=>{for(var t=0,n=0;n<=e.Ta-1;t+=(We(e.Qa+1900)?ot:it)[n++]);return i(e.Wa+t,3)},\\\"%m\\\":e=>i(e.Ta+1,2),\\\"%M\\\":e=>i(e.pb,2),\\\"%n\\\":()=>\\\"\\\\n\\\",\\\"%p\\\":e=>0<=e.Sa&&12>e.Sa?\\\"AM\\\":\\\"PM\\\",\\\"%S\\\":e=>i(e.qb,2),\\\"%t\\\":()=>\\\"\\\\t\\\",\\\"%u\\\":e=>e.Ma||7,\\\"%U\\\":e=>i(Math.floor((e.Pa+7-e.Ma)/7),2),\\\"%V\\\":e=>{var t=Math.floor((e.Pa+7-(e.Ma+6)%7)/7);if(2>=(e.Ma+371-e.Pa-2)%7&&t++,t)53==t&&(4==(n=(e.Ma+371-e.Pa)%7)||3==n&&We(e.Qa)||(t=1));else{t=52;var n=(e.Ma+7-e.Pa-1)%7;(4==n||5==n&&We(e.Qa%400-1))&&t++}return i(t,2)},\\\"%w\\\":e=>e.Ma,\\\"%W\\\":e=>i(Math.floor((e.Pa+7-(e.Ma+6)%7)/7),2),\\\"%y\\\":e=>(e.Qa+1900).toString().substring(2),\\\"%Y\\\":e=>e.Qa+1900,\\\"%z\\\":e=>{var t=0<=(e=e.ob);return e=Math.abs(e)/60,(t?\\\"+\\\":\\\"-\\\")+String(\\\"0000\\\"+(e/60*100+e%60)).slice(-4)},\\\"%Z\\\":e=>e.rb,\\\"%%\\\":()=>\\\"%\\\"},n=n.replace(/%%/g,\\\"\\\\0\\\\0\\\"),l)n.includes(p)&&(n=n.replace(new RegExp(p,\\\"g\\\"),l[p](r)));return p=function(e){var t=Array(xe(e)+1);return Te(e,t,0,t.length),t}(n=n.replace(/\\\\0\\\\0/g,\\\"%\\\")),p.length>t?0:(ct(p,e),p.length-1)}he.Va();var st=[null,de,me,be,Se,_e,Ie,Ae,Ee,Ce,Pe,Me,De,Re,ke,Be,ze,Ne,Fe,Ze,Je,et,tt,nt,at],lt={b:function(e,t,n){throw new ye(e>>>=0).Va(t>>>0,n>>>0),e},N:function(e){ft(e>>>0,!v,1,!m,131072,!1),he.Ya()},j:function(e){e>>>=0,b?postMessage({cmd:\\\"cleanupThread\\\",thread:e}):ce(e)},I:we,h:Se,T:_e,D:Ie,F:Ae,U:Ee,R:Ce,J:Pe,Q:Me,n:De,E:Re,B:ke,S:Be,C:ze,q:()=>!0,z:function(e,t){(e>>>=0)==t>>>0?setTimeout((()=>Ue())):b?postMessage({targetThread:e,cmd:\\\"checkMailbox\\\"}):(e=he.La[e])&&e.postMessage({cmd:\\\"checkMailbox\\\"})},L:function(){return-1},M:je,p:function(e){y&&he.La[e>>>0].ref()},t:function(e,t,n){e=t+2097152>>>0<4194305-!!e?(e>>>0)+4294967296*t:NaN,n>>>=0,e=new Date(1e3*e),a()[n>>2>>>0]=e.getUTCSeconds(),a()[n+4>>2>>>0]=e.getUTCMinutes(),a()[n+8>>2>>>0]=e.getUTCHours(),a()[n+12>>2>>>0]=e.getUTCDate(),a()[n+16>>2>>>0]=e.getUTCMonth(),a()[n+20>>2>>>0]=e.getUTCFullYear()-1900,a()[n+24>>2>>>0]=e.getUTCDay(),e=(e.getTime()-Date.UTC(e.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,a()[n+28>>2>>>0]=e},u:function(e,t,n){e=t+2097152>>>0<4194305-!!e?(e>>>0)+4294967296*t:NaN,n>>>=0,e=new Date(1e3*e),a()[n>>2>>>0]=e.getSeconds(),a()[n+4>>2>>>0]=e.getMinutes(),a()[n+8>>2>>>0]=e.getHours(),a()[n+12>>2>>>0]=e.getDate(),a()[n+16>>2>>>0]=e.getMonth(),a()[n+20>>2>>>0]=e.getFullYear()-1900,a()[n+24>>2>>>0]=e.getDay(),t=(We(e.getFullYear())?Le:Ve)[e.getMonth()]+e.getDate()-1|0,a()[n+28>>2>>>0]=t,a()[n+36>>2>>>0]=-60*e.getTimezoneOffset(),t=new Date(e.getFullYear(),6,1).getTimezoneOffset();var r=new Date(e.getFullYear(),0,1).getTimezoneOffset();e=0|(t!=r&&e.getTimezoneOffset()==Math.min(r,t)),a()[n+32>>2>>>0]=e},v:function(e){e>>>=0;var t=new Date(a()[e+20>>2>>>0]+1900,a()[e+16>>2>>>0],a()[e+12>>2>>>0],a()[e+8>>2>>>0],a()[e+4>>2>>>0],a()[e>>2>>>0],0),n=a()[e+32>>2>>>0],r=t.getTimezoneOffset(),o=new Date(t.getFullYear(),6,1).getTimezoneOffset(),i=new Date(t.getFullYear(),0,1).getTimezoneOffset(),c=Math.min(i,o);return 0>n?a()[e+32>>2>>>0]=Number(o!=i&&c==r):0<n!=(c==r)&&(o=Math.max(i,o),t.setTime(t.getTime()+6e4*((0<n?c:o)-r))),a()[e+24>>2>>>0]=t.getDay(),n=(We(t.getFullYear())?Le:Ve)[t.getMonth()]+t.getDate()-1|0,a()[e+28>>2>>>0]=n,a()[e>>2>>>0]=t.getSeconds(),a()[e+4>>2>>>0]=t.getMinutes(),a()[e+8>>2>>>0]=t.getHours(),a()[e+12>>2>>>0]=t.getDate(),a()[e+16>>2>>>0]=t.getMonth(),a()[e+20>>2>>>0]=t.getYear(),e=t.getTime()/1e3,bt(($=e,1<=+Math.abs($)?0<$?+Math.floor($/4294967296)>>>0:~~+Math.ceil(($-+(~~$>>>0))/4294967296)>>>0:0)),e>>>0},r:Ne,s:Fe,y:function(e,t,n){function r(e){return(e=e.toTimeString().match(/\\\\(([A-Za-z ]+)\\\\)$/))?e[1]:\\\"GMT\\\"}e>>>=0,t>>>=0,n>>>=0;var i=(new Date).getFullYear(),c=new Date(i,0,1),u=new Date(i,6,1);i=c.getTimezoneOffset();var s=u.getTimezoneOffset(),l=Math.max(i,s);o()[e>>2>>>0]=60*l,a()[t>>2>>>0]=Number(i!=s),e=r(c),t=r(u),e=He(e),t=He(t),s<i?(o()[n>>2>>>0]=e,o()[n+4>>2>>>0]=t):(o()[n>>2>>>0]=t,o()[n+4>>2>>>0]=e)},c:()=>{te(\\\"\\\")},k:function(){},i:function(){return Date.now()},o:()=>{throw q+=1,\\\"unwind\\\"},A:function(){return 4294901760},e:()=>performance.timeOrigin+performance.now(),f:function(){return y?n(3993).cpus().length:navigator.hardwareConcurrency},K:function(e,t,n,r){for(he.vb=t>>>0,$e.length=n,t=r>>>0>>3,r=0;r<n;r++)$e[r]=i()[t+r>>>0];return st[e].apply(null,$e)},x:function(e){e>>>=0;var t=r().length;if(e<=t||4294901760<e)return!1;for(var n=1;4>=n;n*=2){var a=t*(1+.2/n);a=Math.min(a,e+100663296);var o=Math;a=Math.max(e,a);e:{o=o.min.call(o,4294901760,a+(65536-a%65536)%65536)-P.buffer.byteLength+65535>>>16;try{P.grow(o),W();var i=1;break e}catch(e){}i=void 0}if(i)return!0}return!1},O:Ze,P:Je,H:fe,g:et,m:tt,w:nt,l:at,a:P||s.wasmMemory,G:ut,d:function(e,t,n,r){return ut(e>>>0,t>>>0,n>>>0,r>>>0)}};!function(){function e(e,t){return e=e.exports,M=e=function(e){var t=e=>()=>e()>>>0,n=e=>t=>e(t)>>>0;return(e=Object.assign({},e)).__errno_location=t(e.__errno_location),e.pthread_self=t(e.pthread_self),e.malloc=n(e.malloc),e.stackSave=t(e.stackSave),e.stackAlloc=n(e.stackAlloc),e}(e),he.Za.push(M.ya),V=M.za,F.unshift(M.V),D=t,ee(),e}var t={a:lt};if(J(),s.instantiateWasm)try{return s.instantiateWasm(t,e)}catch(e){E(\\\"Module.instantiateWasm callback failed with error: \\\"+e),u(e)}(function(e,t){var n=Y;return I||\\\"function\\\"!=typeof WebAssembly.instantiateStreaming||ne(n)||n.startsWith(\\\"file://\\\")||y||\\\"function\\\"!=typeof fetch?ae(n,e,t):fetch(n,{credentials:\\\"same-origin\\\"}).then((r=>WebAssembly.instantiateStreaming(r,e).then(t,(function(r){return E(\\\"wasm streaming compile failed: \\\"+r),E(\\\"falling back to ArrayBuffer instantiation\\\"),ae(n,e,t)}))))})(t,(function(t){e(t.instance,t.module)})).catch(u)}(),s._OrtInit=(e,t)=>(s._OrtInit=M.W)(e,t),s._OrtGetLastError=(e,t)=>(s._OrtGetLastError=M.X)(e,t),s._OrtCreateSessionOptions=(e,t,n,r,a,o,i,c,u,l)=>(s._OrtCreateSessionOptions=M.Y)(e,t,n,r,a,o,i,c,u,l),s._OrtAppendExecutionProvider=(e,t)=>(s._OrtAppendExecutionProvider=M.Z)(e,t),s._OrtAddFreeDimensionOverride=(e,t,n)=>(s._OrtAddFreeDimensionOverride=M._)(e,t,n),s._OrtAddSessionConfigEntry=(e,t,n)=>(s._OrtAddSessionConfigEntry=M.$)(e,t,n),s._OrtReleaseSessionOptions=e=>(s._OrtReleaseSessionOptions=M.aa)(e),s._OrtCreateSession=(e,t,n)=>(s._OrtCreateSession=M.ba)(e,t,n),s._OrtReleaseSession=e=>(s._OrtReleaseSession=M.ca)(e),s._OrtGetInputOutputCount=(e,t,n)=>(s._OrtGetInputOutputCount=M.da)(e,t,n),s._OrtGetInputName=(e,t)=>(s._OrtGetInputName=M.ea)(e,t),s._OrtGetOutputName=(e,t)=>(s._OrtGetOutputName=M.fa)(e,t),s._OrtFree=e=>(s._OrtFree=M.ga)(e),s._OrtCreateTensor=(e,t,n,r,a,o)=>(s._OrtCreateTensor=M.ha)(e,t,n,r,a,o),s._OrtGetTensorData=(e,t,n,r,a)=>(s._OrtGetTensorData=M.ia)(e,t,n,r,a),s._OrtReleaseTensor=e=>(s._OrtReleaseTensor=M.ja)(e),s._OrtCreateRunOptions=(e,t,n,r)=>(s._OrtCreateRunOptions=M.ka)(e,t,n,r),s._OrtAddRunConfigEntry=(e,t,n)=>(s._OrtAddRunConfigEntry=M.la)(e,t,n),s._OrtReleaseRunOptions=e=>(s._OrtReleaseRunOptions=M.ma)(e),s._OrtCreateBinding=e=>(s._OrtCreateBinding=M.na)(e),s._OrtBindInput=(e,t,n)=>(s._OrtBindInput=M.oa)(e,t,n),s._OrtBindOutput=(e,t,n,r)=>(s._OrtBindOutput=M.pa)(e,t,n,r),s._OrtClearBoundOutputs=e=>(s._OrtClearBoundOutputs=M.qa)(e),s._OrtReleaseBinding=e=>(s._OrtReleaseBinding=M.ra)(e),s._OrtRunWithBinding=(e,t,n,r,a)=>(s._OrtRunWithBinding=M.sa)(e,t,n,r,a),s._OrtRun=(e,t,n,r,a,o,i,c)=>(s._OrtRun=M.ta)(e,t,n,r,a,o,i,c),s._OrtEndProfiling=e=>(s._OrtEndProfiling=M.ua)(e);var pt=s._pthread_self=()=>(pt=s._pthread_self=M.va)(),dt=s._malloc=e=>(dt=s._malloc=M.wa)(e);s._free=e=>(s._free=M.xa)(e),s.__emscripten_tls_init=()=>(s.__emscripten_tls_init=M.ya)();var ft=s.__emscripten_thread_init=(e,t,n,r,a,o)=>(ft=s.__emscripten_thread_init=M.Aa)(e,t,n,r,a,o);s.__emscripten_thread_crashed=()=>(s.__emscripten_thread_crashed=M.Ba)();var ht,gt=(e,t,n,r)=>(gt=M.Ca)(e,t,n,r),mt=e=>(mt=M.Da)(e),vt=s.__emscripten_thread_exit=e=>(vt=s.__emscripten_thread_exit=M.Ea)(e),yt=s.__emscripten_check_mailbox=()=>(yt=s.__emscripten_check_mailbox=M.Fa)(),bt=e=>(bt=M.Ga)(e),wt=(e,t)=>(wt=M.Ha)(e,t),St=()=>(St=M.Ia)(),_t=e=>(_t=M.Ja)(e),xt=e=>(xt=M.Ka)(e);function Tt(){function e(){if(!ht&&(ht=!0,s.calledRun=!0,!U)&&(b||ge(F),c(s),s.onRuntimeInitialized&&s.onRuntimeInitialized(),!b)){if(s.postRun)for(\\\"function\\\"==typeof s.postRun&&(s.postRun=[s.postRun]);s.postRun.length;){var e=s.postRun.shift();H.unshift(e)}ge(H)}}if(!(0<X))if(b)c(s),b||ge(F),startWorker(s);else{if(s.preRun)for(\\\"function\\\"==typeof s.preRun&&(s.preRun=[s.preRun]);s.preRun.length;)N.unshift(s.preRun.shift());ge(N),0<X||(s.setStatus?(s.setStatus(\\\"Running...\\\"),setTimeout((function(){setTimeout((function(){s.setStatus(\\\"\\\")}),1),e()}),1)):e())}}if(s.keepRuntimeAlive=K,s.wasmMemory=P,s.stackAlloc=xt,s.stackSave=St,s.stackRestore=_t,s.UTF8ToString=pe,s.stringToUTF8=Oe,s.lengthBytesUTF8=xe,s.ExitStatus=oe,s.PThread=he,Z=function e(){ht||Tt(),ht||(Z=e)},s.preInit)for(\\\"function\\\"==typeof s.preInit&&(s.preInit=[s.preInit]);0<s.preInit.length;)s.preInit.pop()();return Tt(),e.ready});e.exports=r},932:function(e,t,n){var _scriptDir,r=(_scriptDir=\\\"undefined\\\"!=typeof document&&document.currentScript?document.currentScript.src:void 0,\\\"undefined\\\"!=typeof __filename&&(_scriptDir=_scriptDir||__filename),function(e={}){var t,r,a=e;a.ready=new Promise(((e,n)=>{t=e,r=n}));var o,i,c,u=Object.assign({},a),s=\\\"./this.program\\\",l=\\\"object\\\"==typeof window,p=\\\"function\\\"==typeof importScripts,d=\\\"object\\\"==typeof process&&\\\"object\\\"==typeof process.versions&&\\\"string\\\"==typeof process.versions.node,f=\\\"\\\";if(d){var h=n(1384),g=n(908);f=p?g.dirname(f)+\\\"/\\\":__dirname+\\\"/\\\",o=(e,t)=>(e=e.startsWith(\\\"file://\\\")?new URL(e):g.normalize(e),h.readFileSync(e,t?void 0:\\\"utf8\\\")),c=e=>((e=o(e,!0)).buffer||(e=new Uint8Array(e)),e),i=(e,t,n,r=!0)=>{e=e.startsWith(\\\"file://\\\")?new URL(e):g.normalize(e),h.readFile(e,r?void 0:\\\"utf8\\\",((e,a)=>{e?n(e):t(r?a.buffer:a)}))},!a.thisProgram&&1<process.argv.length&&(s=process.argv[1].replace(/\\\\\\\\/g,\\\"/\\\")),process.argv.slice(2),a.inspect=()=>\\\"[Emscripten Module object]\\\"}else(l||p)&&(p?f=self.location.href:\\\"undefined\\\"!=typeof document&&document.currentScript&&(f=document.currentScript.src),_scriptDir&&(f=_scriptDir),f=0!==f.indexOf(\\\"blob:\\\")?f.substr(0,f.replace(/[?#].*/,\\\"\\\").lastIndexOf(\\\"/\\\")+1):\\\"\\\",o=e=>{var t=new XMLHttpRequest;return t.open(\\\"GET\\\",e,!1),t.send(null),t.responseText},p&&(c=e=>{var t=new XMLHttpRequest;return t.open(\\\"GET\\\",e,!1),t.responseType=\\\"arraybuffer\\\",t.send(null),new Uint8Array(t.response)}),i=(e,t,n)=>{var r=new XMLHttpRequest;r.open(\\\"GET\\\",e,!0),r.responseType=\\\"arraybuffer\\\",r.onload=()=>{200==r.status||0==r.status&&r.response?t(r.response):n()},r.onerror=n,r.send(null)});var m,v=a.print||console.log.bind(console),y=a.printErr||console.error.bind(console);Object.assign(a,u),u=null,a.thisProgram&&(s=a.thisProgram),a.wasmBinary&&(m=a.wasmBinary),a.noExitRuntime,\\\"object\\\"!=typeof WebAssembly&&B(\\\"no native wasm support detected\\\");var b,w,S,_,x,T,O=!1;function I(){var e=b.buffer;a.HEAP8=S=new Int8Array(e),a.HEAP16=new Int16Array(e),a.HEAP32=x=new Int32Array(e),a.HEAPU8=_=new Uint8Array(e),a.HEAPU16=new Uint16Array(e),a.HEAPU32=T=new Uint32Array(e),a.HEAPF32=new Float32Array(e),a.HEAPF64=new Float64Array(e)}var A=[],E=[],C=[];function P(){var e=a.preRun.shift();A.unshift(e)}var M,D=0,R=null,k=null;function B(e){throw a.onAbort&&a.onAbort(e),y(e=\\\"Aborted(\\\"+e+\\\")\\\"),O=!0,e=new WebAssembly.RuntimeError(e+\\\". Build with -sASSERTIONS for more info.\\\"),r(e),e}function z(e){return e.startsWith(\\\"data:application/octet-stream;base64,\\\")}if(!z(M=\\\"ort-wasm.wasm\\\")){var G=M;M=a.locateFile?a.locateFile(G,f):f+G}function j(e){if(e==M&&m)return new Uint8Array(m);if(c)return c(e);throw\\\"both async and sync fetching of the wasm failed\\\"}function U(e,t,n){return function(e){if(!m&&(l||p)){if(\\\"function\\\"==typeof fetch&&!e.startsWith(\\\"file://\\\"))return fetch(e,{credentials:\\\"same-origin\\\"}).then((t=>{if(!t.ok)throw\\\"failed to load wasm binary file at '\\\"+e+\\\"'\\\";return t.arrayBuffer()})).catch((()=>j(e)));if(i)return new Promise(((t,n)=>{i(e,(e=>t(new Uint8Array(e))),n)}))}return Promise.resolve().then((()=>j(e)))}(e).then((e=>WebAssembly.instantiate(e,t))).then((e=>e)).then(n,(e=>{y(\\\"failed to asynchronously prepare wasm: \\\"+e),B(e)}))}var W,L=e=>{for(;0<e.length;)e.shift()(a)};function V(e){this.va=e-24,this.Ea=function(e){T[this.va+4>>2>>>0]=e},this.za=function(e){T[this.va+8>>2>>>0]=e},this.xa=function(e,t){this.ya(),this.Ea(e),this.za(t)},this.ya=function(){T[this.va+16>>2>>>0]=0}}var N,F=\\\"undefined\\\"!=typeof TextDecoder?new TextDecoder(\\\"utf8\\\"):void 0,H=(e,t,n)=>{var r=(t>>>=0)+n;for(n=t;e[n]&&!(n>=r);)++n;if(16<n-t&&e.buffer&&F)return F.decode(e.subarray(t,n));for(r=\\\"\\\";t<n;){var a=e[t++];if(128&a){var o=63&e[t++];if(192==(224&a))r+=String.fromCharCode((31&a)<<6|o);else{var i=63&e[t++];65536>(a=224==(240&a)?(15&a)<<12|o<<6|i:(7&a)<<18|o<<12|i<<6|63&e[t++])?r+=String.fromCharCode(a):(a-=65536,r+=String.fromCharCode(55296|a>>10,56320|1023&a))}}else r+=String.fromCharCode(a)}return r},q=(e,t)=>(e>>>=0)?H(_,e,t):\\\"\\\",K=e=>{for(var t=0,n=0;n<e.length;++n){var r=e.charCodeAt(n);127>=r?t++:2047>=r?t+=2:55296<=r&&57343>=r?(t+=4,++n):t+=3}return t},Y=(e,t,n,r)=>{if(!(0<r))return 0;var a=n>>>=0;r=n+r-1;for(var o=0;o<e.length;++o){var i=e.charCodeAt(o);if(55296<=i&&57343>=i&&(i=65536+((1023&i)<<10)|1023&e.charCodeAt(++o)),127>=i){if(n>=r)break;t[n++>>>0]=i}else{if(2047>=i){if(n+1>=r)break;t[n++>>>0]=192|i>>6}else{if(65535>=i){if(n+2>=r)break;t[n++>>>0]=224|i>>12}else{if(n+3>=r)break;t[n++>>>0]=240|i>>18,t[n++>>>0]=128|i>>12&63}t[n++>>>0]=128|i>>6&63}t[n++>>>0]=128|63&i}}return t[n>>>0]=0,n-a},$=e=>0==e%4&&(0!=e%100||0==e%400),X=[0,31,60,91,121,152,182,213,244,274,305,335],Q=[0,31,59,90,120,151,181,212,243,273,304,334],Z=e=>{var t=K(e)+1,n=ie(t);return n&&Y(e,_,n,t),n},J={},ee=()=>{if(!N){var e,t={USER:\\\"web_user\\\",LOGNAME:\\\"web_user\\\",PATH:\\\"/\\\",PWD:\\\"/\\\",HOME:\\\"/home/web_user\\\",LANG:(\\\"object\\\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\\\"C\\\").replace(\\\"-\\\",\\\"_\\\")+\\\".UTF-8\\\",_:s||\\\"./this.program\\\"};for(e in J)void 0===J[e]?delete t[e]:t[e]=J[e];var n=[];for(e in t)n.push(`${e}=${t[e]}`);N=n}return N},te=[null,[],[]],ne=[31,29,31,30,31,30,31,31,30,31,30,31],re=[31,28,31,30,31,30,31,31,30,31,30,31];function ae(e,t,n,r){function a(e,t,n){for(e=\\\"number\\\"==typeof e?e.toString():e||\\\"\\\";e.length<t;)e=n[0]+e;return e}function o(e,t){return a(e,t,\\\"0\\\")}function i(e,t){function n(e){return 0>e?-1:0<e?1:0}var r;return 0===(r=n(e.getFullYear()-t.getFullYear()))&&0===(r=n(e.getMonth()-t.getMonth()))&&(r=n(e.getDate()-t.getDate())),r}function c(e){switch(e.getDay()){case 0:return new Date(e.getFullYear()-1,11,29);case 1:return e;case 2:return new Date(e.getFullYear(),0,3);case 3:return new Date(e.getFullYear(),0,2);case 4:return new Date(e.getFullYear(),0,1);case 5:return new Date(e.getFullYear()-1,11,31);case 6:return new Date(e.getFullYear()-1,11,30)}}function u(e){var t=e.ra;for(e=new Date(new Date(e.sa+1900,0,1).getTime());0<t;){var n=e.getMonth(),r=($(e.getFullYear())?ne:re)[n];if(!(t>r-e.getDate())){e.setDate(e.getDate()+t);break}t-=r-e.getDate()+1,e.setDate(1),11>n?e.setMonth(n+1):(e.setMonth(0),e.setFullYear(e.getFullYear()+1))}return n=new Date(e.getFullYear()+1,0,4),t=c(new Date(e.getFullYear(),0,4)),n=c(n),0>=i(t,e)?0>=i(n,e)?e.getFullYear()+1:e.getFullYear():e.getFullYear()-1}e>>>=0,t>>>=0,n>>>=0;var s=x[40+(r>>>=0)>>2>>>0];for(var l in r={Ca:x[r>>2>>>0],Ba:x[r+4>>2>>>0],ta:x[r+8>>2>>>0],wa:x[r+12>>2>>>0],ua:x[r+16>>2>>>0],sa:x[r+20>>2>>>0],ma:x[r+24>>2>>>0],ra:x[r+28>>2>>>0],Fa:x[r+32>>2>>>0],Aa:x[r+36>>2>>>0],Da:s?q(s):\\\"\\\"},n=q(n),s={\\\"%c\\\":\\\"%a %b %d %H:%M:%S %Y\\\",\\\"%D\\\":\\\"%m/%d/%y\\\",\\\"%F\\\":\\\"%Y-%m-%d\\\",\\\"%h\\\":\\\"%b\\\",\\\"%r\\\":\\\"%I:%M:%S %p\\\",\\\"%R\\\":\\\"%H:%M\\\",\\\"%T\\\":\\\"%H:%M:%S\\\",\\\"%x\\\":\\\"%m/%d/%y\\\",\\\"%X\\\":\\\"%H:%M:%S\\\",\\\"%Ec\\\":\\\"%c\\\",\\\"%EC\\\":\\\"%C\\\",\\\"%Ex\\\":\\\"%m/%d/%y\\\",\\\"%EX\\\":\\\"%H:%M:%S\\\",\\\"%Ey\\\":\\\"%y\\\",\\\"%EY\\\":\\\"%Y\\\",\\\"%Od\\\":\\\"%d\\\",\\\"%Oe\\\":\\\"%e\\\",\\\"%OH\\\":\\\"%H\\\",\\\"%OI\\\":\\\"%I\\\",\\\"%Om\\\":\\\"%m\\\",\\\"%OM\\\":\\\"%M\\\",\\\"%OS\\\":\\\"%S\\\",\\\"%Ou\\\":\\\"%u\\\",\\\"%OU\\\":\\\"%U\\\",\\\"%OV\\\":\\\"%V\\\",\\\"%Ow\\\":\\\"%w\\\",\\\"%OW\\\":\\\"%W\\\",\\\"%Oy\\\":\\\"%y\\\"})n=n.replace(new RegExp(l,\\\"g\\\"),s[l]);var p=\\\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\\\".split(\\\" \\\"),d=\\\"January February March April May June July August September October November December\\\".split(\\\" \\\");for(l in s={\\\"%a\\\":e=>p[e.ma].substring(0,3),\\\"%A\\\":e=>p[e.ma],\\\"%b\\\":e=>d[e.ua].substring(0,3),\\\"%B\\\":e=>d[e.ua],\\\"%C\\\":e=>o((e.sa+1900)/100|0,2),\\\"%d\\\":e=>o(e.wa,2),\\\"%e\\\":e=>a(e.wa,2,\\\" \\\"),\\\"%g\\\":e=>u(e).toString().substring(2),\\\"%G\\\":e=>u(e),\\\"%H\\\":e=>o(e.ta,2),\\\"%I\\\":e=>(0==(e=e.ta)?e=12:12<e&&(e-=12),o(e,2)),\\\"%j\\\":e=>{for(var t=0,n=0;n<=e.ua-1;t+=($(e.sa+1900)?ne:re)[n++]);return o(e.wa+t,3)},\\\"%m\\\":e=>o(e.ua+1,2),\\\"%M\\\":e=>o(e.Ba,2),\\\"%n\\\":()=>\\\"\\\\n\\\",\\\"%p\\\":e=>0<=e.ta&&12>e.ta?\\\"AM\\\":\\\"PM\\\",\\\"%S\\\":e=>o(e.Ca,2),\\\"%t\\\":()=>\\\"\\\\t\\\",\\\"%u\\\":e=>e.ma||7,\\\"%U\\\":e=>o(Math.floor((e.ra+7-e.ma)/7),2),\\\"%V\\\":e=>{var t=Math.floor((e.ra+7-(e.ma+6)%7)/7);if(2>=(e.ma+371-e.ra-2)%7&&t++,t)53==t&&(4==(n=(e.ma+371-e.ra)%7)||3==n&&$(e.sa)||(t=1));else{t=52;var n=(e.ma+7-e.ra-1)%7;(4==n||5==n&&$(e.sa%400-1))&&t++}return o(t,2)},\\\"%w\\\":e=>e.ma,\\\"%W\\\":e=>o(Math.floor((e.ra+7-(e.ma+6)%7)/7),2),\\\"%y\\\":e=>(e.sa+1900).toString().substring(2),\\\"%Y\\\":e=>e.sa+1900,\\\"%z\\\":e=>{var t=0<=(e=e.Aa);return e=Math.abs(e)/60,(t?\\\"+\\\":\\\"-\\\")+String(\\\"0000\\\"+(e/60*100+e%60)).slice(-4)},\\\"%Z\\\":e=>e.Da,\\\"%%\\\":()=>\\\"%\\\"},n=n.replace(/%%/g,\\\"\\\\0\\\\0\\\"),s)n.includes(l)&&(n=n.replace(new RegExp(l,\\\"g\\\"),s[l](r)));return l=function(e){var t=Array(K(e)+1);return Y(e,t,0,t.length),t}(n=n.replace(/\\\\0\\\\0/g,\\\"%\\\")),l.length>t?0:(S.set(l,e>>>0),l.length-1)}var oe={a:function(e,t,n){throw new V(e>>>=0).xa(t>>>0,n>>>0),e},e:function(){return 0},H:function(){},x:function(){},z:function(){},k:function(){return 0},F:function(){},B:function(){},E:function(){},g:function(){},y:function(){},v:function(){},G:function(){},w:function(){},l:()=>!0,o:function(e,t,n){e=t+2097152>>>0<4194305-!!e?(e>>>0)+4294967296*t:NaN,n>>>=0,e=new Date(1e3*e),x[n>>2>>>0]=e.getUTCSeconds(),x[n+4>>2>>>0]=e.getUTCMinutes(),x[n+8>>2>>>0]=e.getUTCHours(),x[n+12>>2>>>0]=e.getUTCDate(),x[n+16>>2>>>0]=e.getUTCMonth(),x[n+20>>2>>>0]=e.getUTCFullYear()-1900,x[n+24>>2>>>0]=e.getUTCDay(),x[n+28>>2>>>0]=(e.getTime()-Date.UTC(e.getUTCFullYear(),0,1,0,0,0,0))/864e5|0},p:function(e,t,n){e=t+2097152>>>0<4194305-!!e?(e>>>0)+4294967296*t:NaN,n>>>=0,e=new Date(1e3*e),x[n>>2>>>0]=e.getSeconds(),x[n+4>>2>>>0]=e.getMinutes(),x[n+8>>2>>>0]=e.getHours(),x[n+12>>2>>>0]=e.getDate(),x[n+16>>2>>>0]=e.getMonth(),x[n+20>>2>>>0]=e.getFullYear()-1900,x[n+24>>2>>>0]=e.getDay(),x[n+28>>2>>>0]=($(e.getFullYear())?X:Q)[e.getMonth()]+e.getDate()-1|0,x[n+36>>2>>>0]=-60*e.getTimezoneOffset(),t=new Date(e.getFullYear(),6,1).getTimezoneOffset();var r=new Date(e.getFullYear(),0,1).getTimezoneOffset();x[n+32>>2>>>0]=0|(t!=r&&e.getTimezoneOffset()==Math.min(r,t))},q:function(e){e>>>=0;var t=new Date(x[e+20>>2>>>0]+1900,x[e+16>>2>>>0],x[e+12>>2>>>0],x[e+8>>2>>>0],x[e+4>>2>>>0],x[e>>2>>>0],0),n=x[e+32>>2>>>0],r=t.getTimezoneOffset(),a=new Date(t.getFullYear(),6,1).getTimezoneOffset(),o=new Date(t.getFullYear(),0,1).getTimezoneOffset(),i=Math.min(o,a);return 0>n?x[e+32>>2>>>0]=Number(a!=o&&i==r):0<n!=(i==r)&&(a=Math.max(o,a),t.setTime(t.getTime()+6e4*((0<n?i:a)-r))),x[e+24>>2>>>0]=t.getDay(),x[e+28>>2>>>0]=($(t.getFullYear())?X:Q)[t.getMonth()]+t.getDate()-1|0,x[e>>2>>>0]=t.getSeconds(),x[e+4>>2>>>0]=t.getMinutes(),x[e+8>>2>>>0]=t.getHours(),x[e+12>>2>>>0]=t.getDate(),x[e+16>>2>>>0]=t.getMonth(),x[e+20>>2>>>0]=t.getYear(),e=t.getTime()/1e3,ue((W=e,1<=+Math.abs(W)?0<W?+Math.floor(W/4294967296)>>>0:~~+Math.ceil((W-+(~~W>>>0))/4294967296)>>>0:0)),e>>>0},m:function(){return-52},n:function(){},t:function(e,t,n){function r(e){return(e=e.toTimeString().match(/\\\\(([A-Za-z ]+)\\\\)$/))?e[1]:\\\"GMT\\\"}n>>>=0;var a=(new Date).getFullYear(),o=new Date(a,0,1),i=new Date(a,6,1);a=o.getTimezoneOffset();var c=i.getTimezoneOffset();T[e>>>0>>2>>>0]=60*Math.max(a,c),x[t>>>0>>2>>>0]=Number(a!=c),e=r(o),t=r(i),e=Z(e),t=Z(t),c<a?(T[n>>2>>>0]=e,T[n+4>>2>>>0]=t):(T[n>>2>>>0]=t,T[n+4>>2>>>0]=e)},d:()=>{B(\\\"\\\")},h:function(){return Date.now()},u:function(){return 4294901760},b:()=>performance.now(),I:function(e,t,n){return t>>>=0,_.copyWithin(e>>>0>>>0,t>>>0,t+(n>>>0)>>>0)},s:function(e){e>>>=0;var t=_.length;if(4294901760<e)return!1;for(var n=1;4>=n;n*=2){var r=t*(1+.2/n);r=Math.min(r,e+100663296);var a=Math;r=Math.max(e,r);e:{a=a.min.call(a,4294901760,r+(65536-r%65536)%65536)-b.buffer.byteLength+65535>>>16;try{b.grow(a),I();var o=1;break e}catch(e){}o=void 0}if(o)return!0}return!1},C:function(e,t){e>>>=0,t>>>=0;var n=0;return ee().forEach((function(r,a){var o=t+n;for(a=T[e+4*a>>2>>>0]=o,o=0;o<r.length;++o)S[a++>>0>>>0]=r.charCodeAt(o);S[a>>0>>>0]=0,n+=r.length+1})),0},D:function(e,t){e>>>=0,t>>>=0;var n=ee();T[e>>2>>>0]=n.length;var r=0;return n.forEach((function(e){r+=e.length+1})),T[t>>2>>>0]=r,0},f:()=>52,j:function(){return 52},r:function(){return 70},i:function(e,t,n,r){t>>>=0,n>>>=0,r>>>=0;for(var a=0,o=0;o<n;o++){var i=T[t>>2>>>0],c=T[t+4>>2>>>0];t+=8;for(var u=0;u<c;u++){var s=_[i+u>>>0],l=te[e];0===s||10===s?((1===e?v:y)(H(l,0)),l.length=0):l.push(s)}a+=c}return T[r>>2>>>0]=a,0},A:ae,c:function(e,t,n,r){return ae(e>>>0,t>>>0,n>>>0,r>>>0)}};!function(){function e(e){if(e=e.exports,w=e=function(e){var t=e=>()=>e()>>>0,n=e=>t=>e(t)>>>0;return(e=Object.assign({},e)).__errno_location=t(e.__errno_location),e.malloc=n(e.malloc),e.stackSave=t(e.stackSave),e.stackAlloc=n(e.stackAlloc),e}(e),b=w.J,I(),E.unshift(w.K),D--,a.monitorRunDependencies&&a.monitorRunDependencies(D),0==D&&(null!==R&&(clearInterval(R),R=null),k)){var t=k;k=null,t()}return e}var t={a:oe};if(D++,a.monitorRunDependencies&&a.monitorRunDependencies(D),a.instantiateWasm)try{return a.instantiateWasm(t,e)}catch(e){y(\\\"Module.instantiateWasm callback failed with error: \\\"+e),r(e)}(function(e,t){var n=M;return m||\\\"function\\\"!=typeof WebAssembly.instantiateStreaming||z(n)||n.startsWith(\\\"file://\\\")||d||\\\"function\\\"!=typeof fetch?U(n,e,t):fetch(n,{credentials:\\\"same-origin\\\"}).then((r=>WebAssembly.instantiateStreaming(r,e).then(t,(function(r){return y(\\\"wasm streaming compile failed: \\\"+r),y(\\\"falling back to ArrayBuffer instantiation\\\"),U(n,e,t)}))))})(t,(function(t){e(t.instance)})).catch(r)}(),a._OrtInit=(e,t)=>(a._OrtInit=w.L)(e,t),a._OrtGetLastError=(e,t)=>(a._OrtGetLastError=w.M)(e,t),a._OrtCreateSessionOptions=(e,t,n,r,o,i,c,u,s,l)=>(a._OrtCreateSessionOptions=w.N)(e,t,n,r,o,i,c,u,s,l),a._OrtAppendExecutionProvider=(e,t)=>(a._OrtAppendExecutionProvider=w.O)(e,t),a._OrtAddFreeDimensionOverride=(e,t,n)=>(a._OrtAddFreeDimensionOverride=w.P)(e,t,n),a._OrtAddSessionConfigEntry=(e,t,n)=>(a._OrtAddSessionConfigEntry=w.Q)(e,t,n),a._OrtReleaseSessionOptions=e=>(a._OrtReleaseSessionOptions=w.R)(e),a._OrtCreateSession=(e,t,n)=>(a._OrtCreateSession=w.S)(e,t,n),a._OrtReleaseSession=e=>(a._OrtReleaseSession=w.T)(e),a._OrtGetInputOutputCount=(e,t,n)=>(a._OrtGetInputOutputCount=w.U)(e,t,n),a._OrtGetInputName=(e,t)=>(a._OrtGetInputName=w.V)(e,t),a._OrtGetOutputName=(e,t)=>(a._OrtGetOutputName=w.W)(e,t),a._OrtFree=e=>(a._OrtFree=w.X)(e),a._OrtCreateTensor=(e,t,n,r,o,i)=>(a._OrtCreateTensor=w.Y)(e,t,n,r,o,i),a._OrtGetTensorData=(e,t,n,r,o)=>(a._OrtGetTensorData=w.Z)(e,t,n,r,o),a._OrtReleaseTensor=e=>(a._OrtReleaseTensor=w._)(e),a._OrtCreateRunOptions=(e,t,n,r)=>(a._OrtCreateRunOptions=w.$)(e,t,n,r),a._OrtAddRunConfigEntry=(e,t,n)=>(a._OrtAddRunConfigEntry=w.aa)(e,t,n),a._OrtReleaseRunOptions=e=>(a._OrtReleaseRunOptions=w.ba)(e),a._OrtCreateBinding=e=>(a._OrtCreateBinding=w.ca)(e),a._OrtBindInput=(e,t,n)=>(a._OrtBindInput=w.da)(e,t,n),a._OrtBindOutput=(e,t,n,r)=>(a._OrtBindOutput=w.ea)(e,t,n,r),a._OrtClearBoundOutputs=e=>(a._OrtClearBoundOutputs=w.fa)(e),a._OrtReleaseBinding=e=>(a._OrtReleaseBinding=w.ga)(e),a._OrtRunWithBinding=(e,t,n,r,o)=>(a._OrtRunWithBinding=w.ha)(e,t,n,r,o),a._OrtRun=(e,t,n,r,o,i,c,u)=>(a._OrtRun=w.ia)(e,t,n,r,o,i,c,u),a._OrtEndProfiling=e=>(a._OrtEndProfiling=w.ja)(e);var ie=a._malloc=e=>(ie=a._malloc=w.ka)(e);a._free=e=>(a._free=w.la)(e);var ce,ue=e=>(ue=w.na)(e),se=()=>(se=w.oa)(),le=e=>(le=w.pa)(e),pe=e=>(pe=w.qa)(e);function de(){function e(){if(!ce&&(ce=!0,a.calledRun=!0,!O)){if(L(E),t(a),a.onRuntimeInitialized&&a.onRuntimeInitialized(),a.postRun)for(\\\"function\\\"==typeof a.postRun&&(a.postRun=[a.postRun]);a.postRun.length;){var e=a.postRun.shift();C.unshift(e)}L(C)}}if(!(0<D)){if(a.preRun)for(\\\"function\\\"==typeof a.preRun&&(a.preRun=[a.preRun]);a.preRun.length;)P();L(A),0<D||(a.setStatus?(a.setStatus(\\\"Running...\\\"),setTimeout((function(){setTimeout((function(){a.setStatus(\\\"\\\")}),1),e()}),1)):e())}}if(a.stackAlloc=pe,a.stackSave=se,a.stackRestore=le,a.UTF8ToString=q,a.stringToUTF8=(e,t,n)=>Y(e,_,t,n),a.lengthBytesUTF8=K,k=function e(){ce||de(),ce||(k=e)},a.preInit)for(\\\"function\\\"==typeof a.preInit&&(a.preInit=[a.preInit]);0<a.preInit.length;)a.preInit.pop()();return de(),e.ready});e.exports=r},4154:function(e){\\\"use strict\\\";e.exports='\\\"use strict\\\";var e={},a=\\\"object\\\"==typeof process&&\\\"object\\\"==typeof process.versions&&\\\"string\\\"==typeof process.versions.node;if(a){var r=require(\\\"worker_threads\\\"),t=r.parentPort;t.on(\\\"message\\\",(e=>onmessage({data:e})));var s=require(\\\"fs\\\");Object.assign(global,{self:global,require:require,Module:e,location:{href:__filename},Worker:r.Worker,importScripts:e=>(0,eval)(s.readFileSync(e,\\\"utf8\\\")+\\\"//# sourceURL=\\\"+e),postMessage:e=>t.postMessage(e),performance:global.performance||{now:Date.now}})}var o=!1,d=function(){var e=Array.prototype.slice.call(arguments).join(\\\" \\\");a?s.writeSync(2,e+\\\"\\\\\\\\n\\\"):console.error(e)};self.alert=function(){var a=Array.prototype.slice.call(arguments).join(\\\" \\\");postMessage({cmd:\\\"alert\\\",text:a,threadId:e._pthread_self()})},e.instantiateWasm=(a,r)=>{var t=e.wasmModule;return e.wasmModule=null,r(new WebAssembly.Instance(t,a))},self.onunhandledrejection=e=>{throw e.reason??e},self.onmessage=function a(r){try{if(\\\"load\\\"===r.data.cmd){let s=[];self.onmessage=e=>s.push(e),self.startWorker=r=>{e=r,postMessage({cmd:\\\"loaded\\\"});for(let e of s)a(e);self.onmessage=a},e.wasmModule=r.data.wasmModule;for(const a of r.data.handlers)e[a]=(...e)=>{postMessage({cmd:\\\"callHandler\\\",handler:a,args:e})};if(e.wasmMemory=r.data.wasmMemory,e.buffer=e.wasmMemory.buffer,e.ENVIRONMENT_IS_PTHREAD=!0,\\\"string\\\"==typeof r.data.urlOrBlob)importScripts(r.data.urlOrBlob);else{var t=URL.createObjectURL(r.data.urlOrBlob);importScripts(t),URL.revokeObjectURL(t)}ortWasmThreaded(e)}else if(\\\"run\\\"===r.data.cmd){e.__emscripten_thread_init(r.data.pthread_ptr,0,0,1),e.__emscripten_thread_mailbox_await(r.data.pthread_ptr),e.establishStackSpace(),e.PThread.receiveObjectTransfer(r.data),e.PThread.threadInitTLS(),o||(o=!0);try{e.invokeEntryPoint(r.data.start_routine,r.data.arg)}catch(e){if(\\\"unwind\\\"!=e)throw e}}else\\\"cancel\\\"===r.data.cmd?e._pthread_self()&&e.__emscripten_thread_exit(-1):\\\"setimmediate\\\"===r.data.target||(\\\"checkMailbox\\\"===r.data.cmd?o&&e.checkMailbox():r.data.cmd&&(d(\\\"worker.js received unknown command \\\"+r.data.cmd),d(r.data)))}catch(a){throw e.__emscripten_thread_crashed&&e.__emscripten_thread_crashed(),a}};\\\\n'},1384:function(){},3993:function(){},908:function(){},6953:function(){},9925:function(){},6449:function(){},8176:function(e,t){\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.resolveBackend=t.registerBackend=void 0;const n=new Map,r=[];t.registerBackend=(e,t,a)=>{if(!t||\\\"function\\\"!=typeof t.init||\\\"function\\\"!=typeof t.createInferenceSessionHandler)throw new TypeError(\\\"not a valid backend\\\");{const o=n.get(e);if(void 0===o)n.set(e,{backend:t,priority:a});else{if(o.priority>a)return;if(o.priority===a&&o.backend!==t)throw new Error(`cannot register backend \\\"${e}\\\" using priority ${a}`)}if(a>=0){const t=r.indexOf(e);-1!==t&&r.splice(t,1);for(let t=0;t<r.length;t++)if(n.get(r[t]).priority<=a)return void r.splice(t,0,e);r.push(e)}}},t.resolveBackend=async e=>{const t=0===e.length?r:e,a=[];for(const e of t){const t=n.get(e);if(t){if(t.initialized)return t.backend;if(t.aborted)continue;const n=!!t.initPromise;try{return n||(t.initPromise=t.backend.init()),await t.initPromise,t.initialized=!0,t.backend}catch(r){n||a.push({name:e,err:r}),t.aborted=!0}finally{delete t.initPromise}}}throw new Error(`no available backend found. ERR: ${a.map((e=>`[${e.name}] ${e.err}`)).join(\\\", \\\")}`)}},9847:function(e,t,n){\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.registerBackend=void 0;var r=n(8176);Object.defineProperty(t,\\\"registerBackend\\\",{enumerable:!0,get:function(){return r.registerBackend}})},1189:function(e,t,n){\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.env=void 0;const r=n(8653);let a=\\\"warning\\\";t.env={wasm:{},webgl:{},webgpu:{},versions:{common:r.version},set logLevel(e){if(void 0!==e){if(\\\"string\\\"!=typeof e||-1===[\\\"verbose\\\",\\\"info\\\",\\\"warning\\\",\\\"error\\\",\\\"fatal\\\"].indexOf(e))throw new Error(`Unsupported logging level: ${e}`);a=e}},get logLevel(){return a}},Object.defineProperty(t.env,\\\"logLevel\\\",{enumerable:!0})},5413:function(e,t,n){\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.env=void 0;const r=n(1189);t.env=r.env},7889:function(e,t,n){\\\"use strict\\\";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var a=Object.getOwnPropertyDescriptor(t,n);a&&!(\\\"get\\\"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,a)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),a=this&&this.__exportStar||function(e,t){for(var n in e)\\\"default\\\"===n||Object.prototype.hasOwnProperty.call(t,n)||r(t,e,n)};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),a(n(9847),t),a(n(5413),t),a(n(5188),t),a(n(7941),t),a(n(9344),t),a(n(3896),t)},1418:function(e,t,n){\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.InferenceSession=void 0;const r=n(8176),a=n(7941);class o{constructor(e){this.handler=e}async run(e,t,n){const r={};let o={};if(\\\"object\\\"!=typeof e||null===e||e instanceof a.Tensor||Array.isArray(e))throw new TypeError(\\\"'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.\\\");let i=!0;if(\\\"object\\\"==typeof t){if(null===t)throw new TypeError(\\\"Unexpected argument[1]: cannot be null.\\\");if(t instanceof a.Tensor)throw new TypeError(\\\"'fetches' cannot be a Tensor\\\");if(Array.isArray(t)){if(0===t.length)throw new TypeError(\\\"'fetches' cannot be an empty array.\\\");i=!1;for(const e of t){if(\\\"string\\\"!=typeof e)throw new TypeError(\\\"'fetches' must be a string array or an object.\\\");if(-1===this.outputNames.indexOf(e))throw new RangeError(`'fetches' contains invalid output name: ${e}.`);r[e]=null}if(\\\"object\\\"==typeof n&&null!==n)o=n;else if(void 0!==n)throw new TypeError(\\\"'options' must be an object.\\\")}else{let e=!1;const c=Object.getOwnPropertyNames(t);for(const n of this.outputNames)if(-1!==c.indexOf(n)){const o=t[n];(null===o||o instanceof a.Tensor)&&(e=!0,i=!1,r[n]=o)}if(e){if(\\\"object\\\"==typeof n&&null!==n)o=n;else if(void 0!==n)throw new TypeError(\\\"'options' must be an object.\\\")}else o=t}}else if(void 0!==t)throw new TypeError(\\\"Unexpected argument[1]: must be 'fetches' or 'options'.\\\");for(const t of this.inputNames)if(void 0===e[t])throw new Error(`input '${t}' is missing in 'feeds'.`);if(i)for(const e of this.outputNames)r[e]=null;const c=await this.handler.run(e,r,o),u={};for(const e in c)if(Object.hasOwnProperty.call(c,e)){const t=c[e];t instanceof a.Tensor?u[e]=t:u[e]=new a.Tensor(t.type,t.data,t.dims)}return u}async release(){return this.handler.dispose()}static async create(e,t,n,a){let i,c={};if(\\\"string\\\"==typeof e){if(i=e,\\\"object\\\"==typeof t&&null!==t)c=t;else if(void 0!==t)throw new TypeError(\\\"'options' must be an object.\\\")}else if(e instanceof Uint8Array){if(i=e,\\\"object\\\"==typeof t&&null!==t)c=t;else if(void 0!==t)throw new TypeError(\\\"'options' must be an object.\\\")}else{if(!(e instanceof ArrayBuffer||\\\"undefined\\\"!=typeof SharedArrayBuffer&&e instanceof SharedArrayBuffer))throw new TypeError(\\\"Unexpected argument[0]: must be 'path' or 'buffer'.\\\");{const r=e;let o=0,u=e.byteLength;if(\\\"object\\\"==typeof t&&null!==t)c=t;else if(\\\"number\\\"==typeof t){if(o=t,!Number.isSafeInteger(o))throw new RangeError(\\\"'byteOffset' must be an integer.\\\");if(o<0||o>=r.byteLength)throw new RangeError(`'byteOffset' is out of range [0, ${r.byteLength}).`);if(u=e.byteLength-o,\\\"number\\\"==typeof n){if(u=n,!Number.isSafeInteger(u))throw new RangeError(\\\"'byteLength' must be an integer.\\\");if(u<=0||o+u>r.byteLength)throw new RangeError(`'byteLength' is out of range (0, ${r.byteLength-o}].`);if(\\\"object\\\"==typeof a&&null!==a)c=a;else if(void 0!==a)throw new TypeError(\\\"'options' must be an object.\\\")}else if(void 0!==n)throw new TypeError(\\\"'byteLength' must be a number.\\\")}else if(void 0!==t)throw new TypeError(\\\"'options' must be an object.\\\");i=new Uint8Array(r,o,u)}}const u=(c.executionProviders||[]).map((e=>\\\"string\\\"==typeof e?e:e.name)),s=await(0,r.resolveBackend)(u),l=await s.createInferenceSessionHandler(i,c);return new o(l)}startProfiling(){this.handler.startProfiling()}endProfiling(){this.handler.endProfiling()}get inputNames(){return this.handler.inputNames}get outputNames(){return this.handler.outputNames}}t.InferenceSession=o},5188:function(e,t,n){\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.InferenceSession=void 0;const r=n(1418);t.InferenceSession=r.InferenceSession},9344:function(e,t){\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0})},7006:function(e,t){\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.tensorToImageData=t.tensorToDataURL=void 0,t.tensorToDataURL=(e,t)=>{const n=document.createElement(\\\"canvas\\\");n.width=e.dims[3],n.height=e.dims[2];const r=n.getContext(\\\"2d\\\");if(null!=r){let a,o;void 0!==t?.tensorLayout&&\\\"NHWC\\\"===t.tensorLayout?(a=e.dims[2],o=e.dims[3]):(a=e.dims[3],o=e.dims[2]);const i=void 0!==t?.format?t.format:\\\"RGB\\\",c=t?.norm;let u,s;void 0===c||void 0===c.mean?u=[255,255,255,255]:\\\"number\\\"==typeof c.mean?u=[c.mean,c.mean,c.mean,c.mean]:(u=[c.mean[0],c.mean[1],c.mean[2],0],void 0!==c.mean[3]&&(u[3]=c.mean[3])),void 0===c||void 0===c.bias?s=[0,0,0,0]:\\\"number\\\"==typeof c.bias?s=[c.bias,c.bias,c.bias,c.bias]:(s=[c.bias[0],c.bias[1],c.bias[2],0],void 0!==c.bias[3]&&(s[3]=c.bias[3]));const l=o*a;let p=0,d=l,f=2*l,h=-1;\\\"RGBA\\\"===i?(p=0,d=l,f=2*l,h=3*l):\\\"RGB\\\"===i?(p=0,d=l,f=2*l):\\\"RBG\\\"===i&&(p=0,f=l,d=2*l);for(let t=0;t<o;t++)for(let n=0;n<a;n++){const a=(e.data[p++]-s[0])*u[0],o=(e.data[d++]-s[1])*u[1],i=(e.data[f++]-s[2])*u[2],c=-1===h?255:(e.data[h++]-s[3])*u[3];r.fillStyle=\\\"rgba(\\\"+a+\\\",\\\"+o+\\\",\\\"+i+\\\",\\\"+c+\\\")\\\",r.fillRect(n,t,1,1)}return n.toDataURL()}throw new Error(\\\"Can not access image data\\\")},t.tensorToImageData=(e,t)=>{const n=document.createElement(\\\"canvas\\\").getContext(\\\"2d\\\");let r;if(null==n)throw new Error(\\\"Can not access image data\\\");{let a,o,i;void 0!==t?.tensorLayout&&\\\"NHWC\\\"===t.tensorLayout?(a=e.dims[2],o=e.dims[1],i=e.dims[3]):(a=e.dims[3],o=e.dims[2],i=e.dims[1]);const c=void 0!==t&&void 0!==t.format?t.format:\\\"RGB\\\",u=t?.norm;let s,l;void 0===u||void 0===u.mean?s=[255,255,255,255]:\\\"number\\\"==typeof u.mean?s=[u.mean,u.mean,u.mean,u.mean]:(s=[u.mean[0],u.mean[1],u.mean[2],255],void 0!==u.mean[3]&&(s[3]=u.mean[3])),void 0===u||void 0===u.bias?l=[0,0,0,0]:\\\"number\\\"==typeof u.bias?l=[u.bias,u.bias,u.bias,u.bias]:(l=[u.bias[0],u.bias[1],u.bias[2],0],void 0!==u.bias[3]&&(l[3]=u.bias[3]));const p=o*a;if(void 0!==t&&(void 0!==t.format&&4===i&&\\\"RGBA\\\"!==t.format||3===i&&\\\"RGB\\\"!==t.format&&\\\"BGR\\\"!==t.format))throw new Error(\\\"Tensor format doesn't match input tensor dims\\\");const d=4;let f=0,h=1,g=2,m=3,v=0,y=p,b=2*p,w=-1;\\\"RGBA\\\"===c?(v=0,y=p,b=2*p,w=3*p):\\\"RGB\\\"===c?(v=0,y=p,b=2*p):\\\"RBG\\\"===c&&(v=0,b=p,y=2*p),r=n.createImageData(a,o);for(let t=0;t<o*a;f+=d,h+=d,g+=d,m+=d,t++)r.data[f]=(e.data[v++]-l[0])*s[0],r.data[h]=(e.data[y++]-l[1])*s[1],r.data[g]=(e.data[b++]-l[2])*s[2],r.data[m]=-1===w?255:(e.data[w++]-l[3])*s[3]}return r}},7447:function(e,t,n){\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.tensorFromPinnedBuffer=t.tensorFromGpuBuffer=t.tensorFromTexture=t.tensorFromImage=t.bufferToTensor=void 0;const r=n(2489);t.bufferToTensor=(e,t)=>{if(void 0===e)throw new Error(\\\"Image buffer must be defined\\\");if(void 0===t.height||void 0===t.width)throw new Error(\\\"Image height and width must be defined\\\");if(\\\"NHWC\\\"===t.tensorLayout)throw new Error(\\\"NHWC Tensor layout is not supported yet\\\");const{height:n,width:a}=t,o=t.norm??{mean:255,bias:0};let i,c;i=\\\"number\\\"==typeof o.mean?[o.mean,o.mean,o.mean,o.mean]:[o.mean[0],o.mean[1],o.mean[2],o.mean[3]??255],c=\\\"number\\\"==typeof o.bias?[o.bias,o.bias,o.bias,o.bias]:[o.bias[0],o.bias[1],o.bias[2],o.bias[3]??0];const u=void 0!==t.format?t.format:\\\"RGBA\\\",s=void 0!==t.tensorFormat&&void 0!==t.tensorFormat?t.tensorFormat:\\\"RGB\\\",l=n*a,p=\\\"RGBA\\\"===s?new Float32Array(4*l):new Float32Array(3*l);let d=4,f=0,h=1,g=2,m=3,v=0,y=l,b=2*l,w=-1;\\\"RGB\\\"===u&&(d=3,f=0,h=1,g=2,m=-1),\\\"RGBA\\\"===s?w=3*l:\\\"RBG\\\"===s?(v=0,b=l,y=2*l):\\\"BGR\\\"===s&&(b=0,y=l,v=2*l);for(let t=0;t<l;t++,f+=d,g+=d,h+=d,m+=d)p[v++]=(e[f]+c[0])/i[0],p[y++]=(e[h]+c[1])/i[1],p[b++]=(e[g]+c[2])/i[2],-1!==w&&-1!==m&&(p[w++]=(e[m]+c[3])/i[3]);return\\\"RGBA\\\"===s?new r.Tensor(\\\"float32\\\",p,[1,4,n,a]):new r.Tensor(\\\"float32\\\",p,[1,3,n,a])},t.tensorFromImage=async(e,n)=>{const r=\\\"undefined\\\"!=typeof HTMLImageElement&&e instanceof HTMLImageElement,a=\\\"undefined\\\"!=typeof ImageData&&e instanceof ImageData,o=\\\"undefined\\\"!=typeof ImageBitmap&&e instanceof ImageBitmap,i=\\\"string\\\"==typeof e;let c,u=n??{};if(r){const t=document.createElement(\\\"canvas\\\");t.width=e.width,t.height=e.height;const r=t.getContext(\\\"2d\\\");if(null==r)throw new Error(\\\"Can not access image data\\\");{let t=e.height,a=e.width;if(void 0!==n&&void 0!==n.resizedHeight&&void 0!==n.resizedWidth&&(t=n.resizedHeight,a=n.resizedWidth),void 0!==n){if(u=n,void 0!==n.tensorFormat)throw new Error(\\\"Image input config format must be RGBA for HTMLImageElement\\\");u.tensorFormat=\\\"RGBA\\\",u.height=t,u.width=a}else u.tensorFormat=\\\"RGBA\\\",u.height=t,u.width=a;r.drawImage(e,0,0),c=r.getImageData(0,0,a,t).data}}else{if(!a){if(o){if(void 0===n)throw new Error(\\\"Please provide image config with format for Imagebitmap\\\");const r=document.createElement(\\\"canvas\\\");r.width=e.width,r.height=e.height;const a=r.getContext(\\\"2d\\\");if(null!=a){const n=e.height,r=e.width;return a.drawImage(e,0,0,r,n),c=a.getImageData(0,0,r,n).data,u.height=n,u.width=r,(0,t.bufferToTensor)(c,u)}throw new Error(\\\"Can not access image data\\\")}if(i)return new Promise(((n,r)=>{const a=document.createElement(\\\"canvas\\\"),o=a.getContext(\\\"2d\\\");if(!e||!o)return r();const i=new Image;i.crossOrigin=\\\"Anonymous\\\",i.src=e,i.onload=()=>{a.width=i.width,a.height=i.height,o.drawImage(i,0,0,a.width,a.height);const e=o.getImageData(0,0,a.width,a.height);u.height=a.height,u.width=a.width,n((0,t.bufferToTensor)(e.data,u))}}));throw new Error(\\\"Input data provided is not supported - aborted tensor creation\\\")}{let t,r;if(void 0!==n&&void 0!==n.resizedWidth&&void 0!==n.resizedHeight?(t=n.resizedHeight,r=n.resizedWidth):(t=e.height,r=e.width),void 0!==n&&(u=n),u.format=\\\"RGBA\\\",u.height=t,u.width=r,void 0!==n){const n=document.createElement(\\\"canvas\\\");n.width=r,n.height=t;const a=n.getContext(\\\"2d\\\");if(null==a)throw new Error(\\\"Can not access image data\\\");a.putImageData(e,0,0),c=a.getImageData(0,0,r,t).data}else c=e.data}}if(void 0!==c)return(0,t.bufferToTensor)(c,u);throw new Error(\\\"Input data provided is not supported - aborted tensor creation\\\")},t.tensorFromTexture=(e,t)=>{const{width:n,height:a,download:o,dispose:i}=t,c=[1,a,n,4];return new r.Tensor({location:\\\"texture\\\",type:\\\"float32\\\",texture:e,dims:c,download:o,dispose:i})},t.tensorFromGpuBuffer=(e,t)=>{const{dataType:n,dims:a,download:o,dispose:i}=t;return new r.Tensor({location:\\\"gpu-buffer\\\",type:n??\\\"float32\\\",gpuBuffer:e,dims:a,download:o,dispose:i})},t.tensorFromPinnedBuffer=(e,t,n)=>new r.Tensor({location:\\\"cpu-pinned\\\",type:e,data:t,dims:n??[t.length]})},956:function(e,t){\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.checkBigInt=t.NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP=t.NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP=void 0,t.NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP=new Map([[\\\"float32\\\",Float32Array],[\\\"uint8\\\",Uint8Array],[\\\"int8\\\",Int8Array],[\\\"uint16\\\",Uint16Array],[\\\"float16\\\",Uint16Array],[\\\"int16\\\",Int16Array],[\\\"int32\\\",Int32Array],[\\\"bool\\\",Uint8Array],[\\\"float64\\\",Float64Array],[\\\"uint32\\\",Uint32Array]]),t.NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP=new Map([[Float32Array,\\\"float32\\\"],[Uint8Array,\\\"uint8\\\"],[Int8Array,\\\"int8\\\"],[Uint16Array,\\\"uint16\\\"],[Int16Array,\\\"int16\\\"],[Int32Array,\\\"int32\\\"],[Float64Array,\\\"float64\\\"],[Uint32Array,\\\"uint32\\\"]]);let n=!1;t.checkBigInt=()=>{if(!n){n=!0;const e=\\\"undefined\\\"!=typeof BigInt64Array&&\\\"function\\\"==typeof BigInt64Array.from,r=\\\"undefined\\\"!=typeof BigUint64Array&&\\\"function\\\"==typeof BigUint64Array.from;e&&(t.NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set(\\\"int64\\\",BigInt64Array),t.NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(BigInt64Array,\\\"int64\\\")),r&&(t.NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set(\\\"uint64\\\",BigUint64Array),t.NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(BigUint64Array,\\\"uint64\\\"))}}},2489:function(e,t,n){\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.Tensor=void 0;const r=n(7006),a=n(7447),o=n(956),i=n(7566);t.Tensor=class{constructor(e,t,n){let r,a;if((0,o.checkBigInt)(),\\\"object\\\"==typeof e&&\\\"location\\\"in e)switch(this.dataLocation=e.location,r=e.type,a=e.dims,e.location){case\\\"cpu-pinned\\\":{const t=o.NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.get(r);if(!t)throw new TypeError(`unsupported type \\\"${r}\\\" to create tensor from pinned buffer`);if(!(e.data instanceof t))throw new TypeError(`buffer should be of type ${t.name}`);this.cpuData=e.data;break}case\\\"texture\\\":if(\\\"float32\\\"!==r)throw new TypeError(`unsupported type \\\"${r}\\\" to create tensor from texture`);this.gpuTextureData=e.texture,this.downloader=e.download,this.disposer=e.dispose;break;case\\\"gpu-buffer\\\":if(\\\"float32\\\"!==r&&\\\"float16\\\"!==r&&\\\"int32\\\"!==r&&\\\"int64\\\"!==r&&\\\"uint32\\\"!==r&&\\\"bool\\\"!==r)throw new TypeError(`unsupported type \\\"${r}\\\" to create tensor from gpu buffer`);this.gpuBufferData=e.gpuBuffer,this.downloader=e.download,this.disposer=e.dispose;break;default:throw new Error(`Tensor constructor: unsupported location '${this.dataLocation}'`)}else{let i,c;if(\\\"string\\\"==typeof e)if(r=e,c=n,\\\"string\\\"===e){if(!Array.isArray(t))throw new TypeError(\\\"A string tensor's data must be a string array.\\\");i=t}else{const n=o.NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.get(e);if(void 0===n)throw new TypeError(`Unsupported tensor type: ${e}.`);if(Array.isArray(t)){if(\\\"float16\\\"===e)throw new TypeError(\\\"Creating a float16 tensor from number array is not supported. Please use Uint16Array as data.\\\");i=\\\"uint64\\\"===e||\\\"int64\\\"===e?n.from(t,BigInt):n.from(t)}else{if(!(t instanceof n))throw new TypeError(`A ${r} tensor's data must be type of ${n}`);i=t}}else if(c=t,Array.isArray(e)){if(0===e.length)throw new TypeError(\\\"Tensor type cannot be inferred from an empty array.\\\");const t=typeof e[0];if(\\\"string\\\"===t)r=\\\"string\\\",i=e;else{if(\\\"boolean\\\"!==t)throw new TypeError(`Invalid element type of data array: ${t}.`);r=\\\"bool\\\",i=Uint8Array.from(e)}}else{const t=o.NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.get(e.constructor);if(void 0===t)throw new TypeError(`Unsupported type for tensor data: ${e.constructor}.`);r=t,i=e}if(void 0===c)c=[i.length];else if(!Array.isArray(c))throw new TypeError(\\\"A tensor's dims must be a number array\\\");a=c,this.cpuData=i,this.dataLocation=\\\"cpu\\\"}const c=(0,i.calculateSize)(a);if(this.cpuData&&c!==this.cpuData.length)throw new Error(`Tensor's size(${c}) does not match data length(${this.cpuData.length}).`);this.type=r,this.dims=a,this.size=c}static async fromImage(e,t){return(0,a.tensorFromImage)(e,t)}static fromTexture(e,t){return(0,a.tensorFromTexture)(e,t)}static fromGpuBuffer(e,t){return(0,a.tensorFromGpuBuffer)(e,t)}static fromPinnedBuffer(e,t,n){return(0,a.tensorFromPinnedBuffer)(e,t,n)}toDataURL(e){return(0,r.tensorToDataURL)(this,e)}toImageData(e){return(0,r.tensorToImageData)(this,e)}get data(){if(this.ensureValid(),!this.cpuData)throw new Error(\\\"The data is not on CPU. Use `getData()` to download GPU data to CPU, or use `texture` or `gpuBuffer` property to access the GPU data directly.\\\");return this.cpuData}get location(){return this.dataLocation}get texture(){if(this.ensureValid(),!this.gpuTextureData)throw new Error(\\\"The data is not stored as a WebGL texture.\\\");return this.gpuTextureData}get gpuBuffer(){if(this.ensureValid(),!this.gpuBufferData)throw new Error(\\\"The data is not stored as a WebGPU buffer.\\\");return this.gpuBufferData}async getData(e){switch(this.ensureValid(),this.dataLocation){case\\\"cpu\\\":case\\\"cpu-pinned\\\":return this.data;case\\\"texture\\\":case\\\"gpu-buffer\\\":if(!this.downloader)throw new Error(\\\"The current tensor is not created with a specified data downloader.\\\");if(this.isDownloading)throw new Error(\\\"The current tensor is being downloaded.\\\");try{this.isDownloading=!0;const t=await this.downloader();return this.downloader=void 0,this.dataLocation=\\\"cpu\\\",this.cpuData=t,e&&this.disposer&&(this.disposer(),this.disposer=void 0),t}finally{this.isDownloading=!1}default:throw new Error(`cannot get data from location: ${this.dataLocation}`)}}dispose(){if(this.isDownloading)throw new Error(\\\"The current tensor is being downloaded.\\\");this.disposer&&(this.disposer(),this.disposer=void 0),this.cpuData=void 0,this.gpuTextureData=void 0,this.gpuBufferData=void 0,this.downloader=void 0,this.isDownloading=void 0,this.dataLocation=\\\"none\\\"}ensureValid(){if(\\\"none\\\"===this.dataLocation)throw new Error(\\\"The tensor is disposed.\\\")}reshape(e){if(this.ensureValid(),this.downloader||this.disposer)throw new Error(\\\"Cannot reshape a tensor that owns GPU resource.\\\");return(0,i.tensorReshape)(this,e)}}},7566:function(e,t,n){\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.tensorReshape=t.calculateSize=void 0;const r=n(2489);t.calculateSize=e=>{let t=1;for(let n=0;n<e.length;n++){const r=e[n];if(\\\"number\\\"!=typeof r||!Number.isSafeInteger(r))throw new TypeError(`dims[${n}] must be an integer, got: ${r}`);if(r<0)throw new RangeError(`dims[${n}] must be a non-negative integer, got: ${r}`);t*=r}return t},t.tensorReshape=(e,t)=>{switch(e.location){case\\\"cpu\\\":return new r.Tensor(e.type,e.data,t);case\\\"cpu-pinned\\\":return new r.Tensor({location:\\\"cpu-pinned\\\",data:e.data,type:e.type,dims:t});case\\\"texture\\\":return new r.Tensor({location:\\\"texture\\\",texture:e.texture,type:e.type,dims:t});case\\\"gpu-buffer\\\":return new r.Tensor({location:\\\"gpu-buffer\\\",gpuBuffer:e.gpuBuffer,type:e.type,dims:t});default:throw new Error(`tensorReshape: tensor location ${e.location} is not supported`)}}},7941:function(e,t,n){\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.Tensor=void 0;const r=n(2489);t.Tensor=r.Tensor},9300:function(e,t){\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.TrainingSession=void 0,t.TrainingSession=class{constructor(e){this.handler=e}get inputNames(){return this.handler.inputNames}get outputNames(){return this.handler.outputNames}static async create(e,t){throw new Error(\\\"Method not implemented\\\")}async loadParametersBuffer(e,t){throw new Error(\\\"Method not implemented.\\\")}async getContiguousParameters(e){throw new Error(\\\"Method not implemented.\\\")}async runTrainStep(e,t,n){throw new Error(\\\"Method not implemented.\\\")}async release(){return this.handler.dispose()}}},3896:function(e,t,n){\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.TrainingSession=void 0;const r=n(9300);t.TrainingSession=r.TrainingSession},8653:function(e,t){\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.version=void 0,t.version=\\\"1.17.0\\\"}},t={};function n(r){var a=t[r];if(void 0!==a)return a.exports;var o=t[r]={exports:{}};return e[r].call(o.exports,o,o.exports,n),o.exports}!function(){\\\"use strict\\\";var e=n(1259),t=n(263);self.onmessage=function(n){switch(n.data.type){case\\\"init-wasm\\\":try{(0,t.initializeWebAssembly)(n.data.in).then((function(){return postMessage({type:\\\"init-wasm\\\"})}),(function(e){return postMessage({type:\\\"init-wasm\\\",err:e})}))}catch(e){postMessage({type:\\\"init-wasm\\\",err:e})}break;case\\\"init-ort\\\":try{(0,e.initRuntime)(n.data.in).then((function(){return postMessage({type:\\\"init-ort\\\"})}),(function(e){return postMessage({type:\\\"init-ort\\\",err:e})})),postMessage({type:\\\"init-ort\\\"})}catch(e){postMessage({type:\\\"init-ort\\\",err:e})}break;case\\\"create_allocate\\\":try{var r=n.data.in.model,a=(0,e.createSessionAllocate)(r);postMessage({type:\\\"create_allocate\\\",out:a})}catch(e){postMessage({type:\\\"create_allocate\\\",err:e})}break;case\\\"create_finalize\\\":try{var o=n.data.in,i=(a=o.modeldata,o.options),c=(0,e.createSessionFinalize)(a,i);postMessage({type:\\\"create_finalize\\\",out:c})}catch(e){postMessage({type:\\\"create_finalize\\\",err:e})}break;case\\\"create\\\":try{var u=n.data.in;r=u.model,i=u.options,c=(0,e.createSession)(r,i),postMessage({type:\\\"create\\\",out:c})}catch(e){postMessage({type:\\\"create\\\",err:e})}break;case\\\"release\\\":try{var s=n.data.in;(0,e.releaseSession)(s),postMessage({type:\\\"release\\\"})}catch(e){postMessage({type:\\\"release\\\",err:e})}break;case\\\"run\\\":try{var l=n.data.in,p=l.sessionId,d=l.inputIndices,f=l.inputs,h=l.outputIndices;i=l.options,(0,e.run)(p,d,f,h,i).then((function(t){postMessage({type:\\\"run\\\",out:t},(0,e.extractTransferableBuffers)(t))}),(function(e){postMessage({type:\\\"run\\\",err:e})}))}catch(e){postMessage({type:\\\"run\\\",err:e})}break;case\\\"end-profiling\\\":try{s=n.data.in,(0,e.endProfiling)(s),postMessage({type:\\\"end-profiling\\\"})}catch(e){postMessage({type:\\\"end-profiling\\\",err:e})}}}}()}();\\n\", \"Worker\", undefined, undefined);\n}\n","\"use strict\";\n\n/* eslint-env browser */\n\n/* eslint-disable no-undef, no-use-before-define, new-cap */\nmodule.exports = function (content, workerConstructor, workerOptions, url) {\n  var globalScope = self || window;\n\n  try {\n    try {\n      var blob;\n\n      try {\n        // New API\n        blob = new globalScope.Blob([content]);\n      } catch (e) {\n        // BlobBuilder = Deprecated, but widely implemented\n        var BlobBuilder = globalScope.BlobBuilder || globalScope.WebKitBlobBuilder || globalScope.MozBlobBuilder || globalScope.MSBlobBuilder;\n        blob = new BlobBuilder();\n        blob.append(content);\n        blob = blob.getBlob();\n      }\n\n      var URL = globalScope.URL || globalScope.webkitURL;\n      var objectURL = URL.createObjectURL(blob);\n      var worker = new globalScope[workerConstructor](objectURL, workerOptions);\n      URL.revokeObjectURL(objectURL);\n      return worker;\n    } catch (e) {\n      return new globalScope[workerConstructor](\"data:application/javascript,\".concat(encodeURIComponent(content)), workerOptions);\n    }\n  } catch (e) {\n    if (!url) {\n      throw Error(\"Inline worker is not supported\");\n    }\n\n    return new globalScope[workerConstructor](url, workerOptions);\n  }\n};","/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n\"use strict\";\n\nvar $protobuf = require(\"protobufjs/minimal\");\n\n// Common aliases\nvar $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nvar $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\n$root.onnx = (function() {\n\n    /**\n     * Namespace onnx.\n     * @exports onnx\n     * @namespace\n     */\n    var onnx = {};\n\n    /**\n     * Version enum.\n     * @name onnx.Version\n     * @enum {number}\n     * @property {number} _START_VERSION=0 _START_VERSION value\n     * @property {number} IR_VERSION_2017_10_10=1 IR_VERSION_2017_10_10 value\n     * @property {number} IR_VERSION_2017_10_30=2 IR_VERSION_2017_10_30 value\n     * @property {number} IR_VERSION_2017_11_3=3 IR_VERSION_2017_11_3 value\n     * @property {number} IR_VERSION_2019_1_22=4 IR_VERSION_2019_1_22 value\n     * @property {number} IR_VERSION_2019_3_18=5 IR_VERSION_2019_3_18 value\n     * @property {number} IR_VERSION_2019_9_19=6 IR_VERSION_2019_9_19 value\n     * @property {number} IR_VERSION_2020_5_8=7 IR_VERSION_2020_5_8 value\n     * @property {number} IR_VERSION_2021_7_30=8 IR_VERSION_2021_7_30 value\n     * @property {number} IR_VERSION=9 IR_VERSION value\n     */\n    onnx.Version = (function() {\n        var valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"_START_VERSION\"] = 0;\n        values[valuesById[1] = \"IR_VERSION_2017_10_10\"] = 1;\n        values[valuesById[2] = \"IR_VERSION_2017_10_30\"] = 2;\n        values[valuesById[3] = \"IR_VERSION_2017_11_3\"] = 3;\n        values[valuesById[4] = \"IR_VERSION_2019_1_22\"] = 4;\n        values[valuesById[5] = \"IR_VERSION_2019_3_18\"] = 5;\n        values[valuesById[6] = \"IR_VERSION_2019_9_19\"] = 6;\n        values[valuesById[7] = \"IR_VERSION_2020_5_8\"] = 7;\n        values[valuesById[8] = \"IR_VERSION_2021_7_30\"] = 8;\n        values[valuesById[9] = \"IR_VERSION\"] = 9;\n        return values;\n    })();\n\n    onnx.AttributeProto = (function() {\n\n        /**\n         * Properties of an AttributeProto.\n         * @memberof onnx\n         * @interface IAttributeProto\n         * @property {string|null} [name] AttributeProto name\n         * @property {string|null} [refAttrName] AttributeProto refAttrName\n         * @property {string|null} [docString] AttributeProto docString\n         * @property {onnx.AttributeProto.AttributeType|null} [type] AttributeProto type\n         * @property {number|null} [f] AttributeProto f\n         * @property {number|Long|null} [i] AttributeProto i\n         * @property {Uint8Array|null} [s] AttributeProto s\n         * @property {onnx.ITensorProto|null} [t] AttributeProto t\n         * @property {onnx.IGraphProto|null} [g] AttributeProto g\n         * @property {onnx.ISparseTensorProto|null} [sparseTensor] AttributeProto sparseTensor\n         * @property {onnx.ITypeProto|null} [tp] AttributeProto tp\n         * @property {Array.<number>|null} [floats] AttributeProto floats\n         * @property {Array.<number|Long>|null} [ints] AttributeProto ints\n         * @property {Array.<Uint8Array>|null} [strings] AttributeProto strings\n         * @property {Array.<onnx.ITensorProto>|null} [tensors] AttributeProto tensors\n         * @property {Array.<onnx.IGraphProto>|null} [graphs] AttributeProto graphs\n         * @property {Array.<onnx.ISparseTensorProto>|null} [sparseTensors] AttributeProto sparseTensors\n         * @property {Array.<onnx.ITypeProto>|null} [typeProtos] AttributeProto typeProtos\n         */\n\n        /**\n         * Constructs a new AttributeProto.\n         * @memberof onnx\n         * @classdesc Represents an AttributeProto.\n         * @implements IAttributeProto\n         * @constructor\n         * @param {onnx.IAttributeProto=} [properties] Properties to set\n         */\n        function AttributeProto(properties) {\n            this.floats = [];\n            this.ints = [];\n            this.strings = [];\n            this.tensors = [];\n            this.graphs = [];\n            this.sparseTensors = [];\n            this.typeProtos = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * AttributeProto name.\n         * @member {string} name\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.name = \"\";\n\n        /**\n         * AttributeProto refAttrName.\n         * @member {string} refAttrName\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.refAttrName = \"\";\n\n        /**\n         * AttributeProto docString.\n         * @member {string} docString\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.docString = \"\";\n\n        /**\n         * AttributeProto type.\n         * @member {onnx.AttributeProto.AttributeType} type\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.type = 0;\n\n        /**\n         * AttributeProto f.\n         * @member {number} f\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.f = 0;\n\n        /**\n         * AttributeProto i.\n         * @member {number|Long} i\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.i = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * AttributeProto s.\n         * @member {Uint8Array} s\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.s = $util.newBuffer([]);\n\n        /**\n         * AttributeProto t.\n         * @member {onnx.ITensorProto|null|undefined} t\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.t = null;\n\n        /**\n         * AttributeProto g.\n         * @member {onnx.IGraphProto|null|undefined} g\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.g = null;\n\n        /**\n         * AttributeProto sparseTensor.\n         * @member {onnx.ISparseTensorProto|null|undefined} sparseTensor\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.sparseTensor = null;\n\n        /**\n         * AttributeProto tp.\n         * @member {onnx.ITypeProto|null|undefined} tp\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.tp = null;\n\n        /**\n         * AttributeProto floats.\n         * @member {Array.<number>} floats\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.floats = $util.emptyArray;\n\n        /**\n         * AttributeProto ints.\n         * @member {Array.<number|Long>} ints\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.ints = $util.emptyArray;\n\n        /**\n         * AttributeProto strings.\n         * @member {Array.<Uint8Array>} strings\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.strings = $util.emptyArray;\n\n        /**\n         * AttributeProto tensors.\n         * @member {Array.<onnx.ITensorProto>} tensors\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.tensors = $util.emptyArray;\n\n        /**\n         * AttributeProto graphs.\n         * @member {Array.<onnx.IGraphProto>} graphs\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.graphs = $util.emptyArray;\n\n        /**\n         * AttributeProto sparseTensors.\n         * @member {Array.<onnx.ISparseTensorProto>} sparseTensors\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.sparseTensors = $util.emptyArray;\n\n        /**\n         * AttributeProto typeProtos.\n         * @member {Array.<onnx.ITypeProto>} typeProtos\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.typeProtos = $util.emptyArray;\n\n        /**\n         * Creates a new AttributeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto=} [properties] Properties to set\n         * @returns {onnx.AttributeProto} AttributeProto instance\n         */\n        AttributeProto.create = function create(properties) {\n            return new AttributeProto(properties);\n        };\n\n        /**\n         * Encodes the specified AttributeProto message. Does not implicitly {@link onnx.AttributeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto} message AttributeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AttributeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.f != null && Object.hasOwnProperty.call(message, \"f\"))\n                writer.uint32(/* id 2, wireType 5 =*/21).float(message.f);\n            if (message.i != null && Object.hasOwnProperty.call(message, \"i\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).int64(message.i);\n            if (message.s != null && Object.hasOwnProperty.call(message, \"s\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.s);\n            if (message.t != null && Object.hasOwnProperty.call(message, \"t\"))\n                $root.onnx.TensorProto.encode(message.t, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.g != null && Object.hasOwnProperty.call(message, \"g\"))\n                $root.onnx.GraphProto.encode(message.g, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n            if (message.floats != null && message.floats.length) {\n                writer.uint32(/* id 7, wireType 2 =*/58).fork();\n                for (var i = 0; i < message.floats.length; ++i)\n                    writer.float(message.floats[i]);\n                writer.ldelim();\n            }\n            if (message.ints != null && message.ints.length) {\n                writer.uint32(/* id 8, wireType 2 =*/66).fork();\n                for (var i = 0; i < message.ints.length; ++i)\n                    writer.int64(message.ints[i]);\n                writer.ldelim();\n            }\n            if (message.strings != null && message.strings.length)\n                for (var i = 0; i < message.strings.length; ++i)\n                    writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.strings[i]);\n            if (message.tensors != null && message.tensors.length)\n                for (var i = 0; i < message.tensors.length; ++i)\n                    $root.onnx.TensorProto.encode(message.tensors[i], writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();\n            if (message.graphs != null && message.graphs.length)\n                for (var i = 0; i < message.graphs.length; ++i)\n                    $root.onnx.GraphProto.encode(message.graphs[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            if (message.docString != null && Object.hasOwnProperty.call(message, \"docString\"))\n                writer.uint32(/* id 13, wireType 2 =*/106).string(message.docString);\n            if (message.tp != null && Object.hasOwnProperty.call(message, \"tp\"))\n                $root.onnx.TypeProto.encode(message.tp, writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n            if (message.typeProtos != null && message.typeProtos.length)\n                for (var i = 0; i < message.typeProtos.length; ++i)\n                    $root.onnx.TypeProto.encode(message.typeProtos[i], writer.uint32(/* id 15, wireType 2 =*/122).fork()).ldelim();\n            if (message.type != null && Object.hasOwnProperty.call(message, \"type\"))\n                writer.uint32(/* id 20, wireType 0 =*/160).int32(message.type);\n            if (message.refAttrName != null && Object.hasOwnProperty.call(message, \"refAttrName\"))\n                writer.uint32(/* id 21, wireType 2 =*/170).string(message.refAttrName);\n            if (message.sparseTensor != null && Object.hasOwnProperty.call(message, \"sparseTensor\"))\n                $root.onnx.SparseTensorProto.encode(message.sparseTensor, writer.uint32(/* id 22, wireType 2 =*/178).fork()).ldelim();\n            if (message.sparseTensors != null && message.sparseTensors.length)\n                for (var i = 0; i < message.sparseTensors.length; ++i)\n                    $root.onnx.SparseTensorProto.encode(message.sparseTensors[i], writer.uint32(/* id 23, wireType 2 =*/186).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified AttributeProto message, length delimited. Does not implicitly {@link onnx.AttributeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto} message AttributeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AttributeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an AttributeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.AttributeProto} AttributeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AttributeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.AttributeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.name = reader.string();\n                        break;\n                    }\n                case 21: {\n                        message.refAttrName = reader.string();\n                        break;\n                    }\n                case 13: {\n                        message.docString = reader.string();\n                        break;\n                    }\n                case 20: {\n                        message.type = reader.int32();\n                        break;\n                    }\n                case 2: {\n                        message.f = reader.float();\n                        break;\n                    }\n                case 3: {\n                        message.i = reader.int64();\n                        break;\n                    }\n                case 4: {\n                        message.s = reader.bytes();\n                        break;\n                    }\n                case 5: {\n                        message.t = $root.onnx.TensorProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 6: {\n                        message.g = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 22: {\n                        message.sparseTensor = $root.onnx.SparseTensorProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 14: {\n                        message.tp = $root.onnx.TypeProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 7: {\n                        if (!(message.floats && message.floats.length))\n                            message.floats = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.floats.push(reader.float());\n                        } else\n                            message.floats.push(reader.float());\n                        break;\n                    }\n                case 8: {\n                        if (!(message.ints && message.ints.length))\n                            message.ints = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.ints.push(reader.int64());\n                        } else\n                            message.ints.push(reader.int64());\n                        break;\n                    }\n                case 9: {\n                        if (!(message.strings && message.strings.length))\n                            message.strings = [];\n                        message.strings.push(reader.bytes());\n                        break;\n                    }\n                case 10: {\n                        if (!(message.tensors && message.tensors.length))\n                            message.tensors = [];\n                        message.tensors.push($root.onnx.TensorProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 11: {\n                        if (!(message.graphs && message.graphs.length))\n                            message.graphs = [];\n                        message.graphs.push($root.onnx.GraphProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 23: {\n                        if (!(message.sparseTensors && message.sparseTensors.length))\n                            message.sparseTensors = [];\n                        message.sparseTensors.push($root.onnx.SparseTensorProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 15: {\n                        if (!(message.typeProtos && message.typeProtos.length))\n                            message.typeProtos = [];\n                        message.typeProtos.push($root.onnx.TypeProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an AttributeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.AttributeProto} AttributeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AttributeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an AttributeProto message.\n         * @function verify\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        AttributeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                if (!$util.isString(message.refAttrName))\n                    return \"refAttrName: string expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                switch (message.type) {\n                default:\n                    return \"type: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                case 5:\n                case 11:\n                case 13:\n                case 6:\n                case 7:\n                case 8:\n                case 9:\n                case 10:\n                case 12:\n                case 14:\n                    break;\n                }\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                if (typeof message.f !== \"number\")\n                    return \"f: number expected\";\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                if (!$util.isInteger(message.i) && !(message.i && $util.isInteger(message.i.low) && $util.isInteger(message.i.high)))\n                    return \"i: integer|Long expected\";\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                if (!(message.s && typeof message.s.length === \"number\" || $util.isString(message.s)))\n                    return \"s: buffer expected\";\n            if (message.t != null && message.hasOwnProperty(\"t\")) {\n                var error = $root.onnx.TensorProto.verify(message.t);\n                if (error)\n                    return \"t.\" + error;\n            }\n            if (message.g != null && message.hasOwnProperty(\"g\")) {\n                var error = $root.onnx.GraphProto.verify(message.g);\n                if (error)\n                    return \"g.\" + error;\n            }\n            if (message.sparseTensor != null && message.hasOwnProperty(\"sparseTensor\")) {\n                var error = $root.onnx.SparseTensorProto.verify(message.sparseTensor);\n                if (error)\n                    return \"sparseTensor.\" + error;\n            }\n            if (message.tp != null && message.hasOwnProperty(\"tp\")) {\n                var error = $root.onnx.TypeProto.verify(message.tp);\n                if (error)\n                    return \"tp.\" + error;\n            }\n            if (message.floats != null && message.hasOwnProperty(\"floats\")) {\n                if (!Array.isArray(message.floats))\n                    return \"floats: array expected\";\n                for (var i = 0; i < message.floats.length; ++i)\n                    if (typeof message.floats[i] !== \"number\")\n                        return \"floats: number[] expected\";\n            }\n            if (message.ints != null && message.hasOwnProperty(\"ints\")) {\n                if (!Array.isArray(message.ints))\n                    return \"ints: array expected\";\n                for (var i = 0; i < message.ints.length; ++i)\n                    if (!$util.isInteger(message.ints[i]) && !(message.ints[i] && $util.isInteger(message.ints[i].low) && $util.isInteger(message.ints[i].high)))\n                        return \"ints: integer|Long[] expected\";\n            }\n            if (message.strings != null && message.hasOwnProperty(\"strings\")) {\n                if (!Array.isArray(message.strings))\n                    return \"strings: array expected\";\n                for (var i = 0; i < message.strings.length; ++i)\n                    if (!(message.strings[i] && typeof message.strings[i].length === \"number\" || $util.isString(message.strings[i])))\n                        return \"strings: buffer[] expected\";\n            }\n            if (message.tensors != null && message.hasOwnProperty(\"tensors\")) {\n                if (!Array.isArray(message.tensors))\n                    return \"tensors: array expected\";\n                for (var i = 0; i < message.tensors.length; ++i) {\n                    var error = $root.onnx.TensorProto.verify(message.tensors[i]);\n                    if (error)\n                        return \"tensors.\" + error;\n                }\n            }\n            if (message.graphs != null && message.hasOwnProperty(\"graphs\")) {\n                if (!Array.isArray(message.graphs))\n                    return \"graphs: array expected\";\n                for (var i = 0; i < message.graphs.length; ++i) {\n                    var error = $root.onnx.GraphProto.verify(message.graphs[i]);\n                    if (error)\n                        return \"graphs.\" + error;\n                }\n            }\n            if (message.sparseTensors != null && message.hasOwnProperty(\"sparseTensors\")) {\n                if (!Array.isArray(message.sparseTensors))\n                    return \"sparseTensors: array expected\";\n                for (var i = 0; i < message.sparseTensors.length; ++i) {\n                    var error = $root.onnx.SparseTensorProto.verify(message.sparseTensors[i]);\n                    if (error)\n                        return \"sparseTensors.\" + error;\n                }\n            }\n            if (message.typeProtos != null && message.hasOwnProperty(\"typeProtos\")) {\n                if (!Array.isArray(message.typeProtos))\n                    return \"typeProtos: array expected\";\n                for (var i = 0; i < message.typeProtos.length; ++i) {\n                    var error = $root.onnx.TypeProto.verify(message.typeProtos[i]);\n                    if (error)\n                        return \"typeProtos.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates an AttributeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.AttributeProto} AttributeProto\n         */\n        AttributeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.AttributeProto)\n                return object;\n            var message = new $root.onnx.AttributeProto();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.refAttrName != null)\n                message.refAttrName = String(object.refAttrName);\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            switch (object.type) {\n            default:\n                if (typeof object.type === \"number\") {\n                    message.type = object.type;\n                    break;\n                }\n                break;\n            case \"UNDEFINED\":\n            case 0:\n                message.type = 0;\n                break;\n            case \"FLOAT\":\n            case 1:\n                message.type = 1;\n                break;\n            case \"INT\":\n            case 2:\n                message.type = 2;\n                break;\n            case \"STRING\":\n            case 3:\n                message.type = 3;\n                break;\n            case \"TENSOR\":\n            case 4:\n                message.type = 4;\n                break;\n            case \"GRAPH\":\n            case 5:\n                message.type = 5;\n                break;\n            case \"SPARSE_TENSOR\":\n            case 11:\n                message.type = 11;\n                break;\n            case \"TYPE_PROTO\":\n            case 13:\n                message.type = 13;\n                break;\n            case \"FLOATS\":\n            case 6:\n                message.type = 6;\n                break;\n            case \"INTS\":\n            case 7:\n                message.type = 7;\n                break;\n            case \"STRINGS\":\n            case 8:\n                message.type = 8;\n                break;\n            case \"TENSORS\":\n            case 9:\n                message.type = 9;\n                break;\n            case \"GRAPHS\":\n            case 10:\n                message.type = 10;\n                break;\n            case \"SPARSE_TENSORS\":\n            case 12:\n                message.type = 12;\n                break;\n            case \"TYPE_PROTOS\":\n            case 14:\n                message.type = 14;\n                break;\n            }\n            if (object.f != null)\n                message.f = Number(object.f);\n            if (object.i != null)\n                if ($util.Long)\n                    (message.i = $util.Long.fromValue(object.i)).unsigned = false;\n                else if (typeof object.i === \"string\")\n                    message.i = parseInt(object.i, 10);\n                else if (typeof object.i === \"number\")\n                    message.i = object.i;\n                else if (typeof object.i === \"object\")\n                    message.i = new $util.LongBits(object.i.low >>> 0, object.i.high >>> 0).toNumber();\n            if (object.s != null)\n                if (typeof object.s === \"string\")\n                    $util.base64.decode(object.s, message.s = $util.newBuffer($util.base64.length(object.s)), 0);\n                else if (object.s.length >= 0)\n                    message.s = object.s;\n            if (object.t != null) {\n                if (typeof object.t !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.t: object expected\");\n                message.t = $root.onnx.TensorProto.fromObject(object.t);\n            }\n            if (object.g != null) {\n                if (typeof object.g !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.g: object expected\");\n                message.g = $root.onnx.GraphProto.fromObject(object.g);\n            }\n            if (object.sparseTensor != null) {\n                if (typeof object.sparseTensor !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.sparseTensor: object expected\");\n                message.sparseTensor = $root.onnx.SparseTensorProto.fromObject(object.sparseTensor);\n            }\n            if (object.tp != null) {\n                if (typeof object.tp !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.tp: object expected\");\n                message.tp = $root.onnx.TypeProto.fromObject(object.tp);\n            }\n            if (object.floats) {\n                if (!Array.isArray(object.floats))\n                    throw TypeError(\".onnx.AttributeProto.floats: array expected\");\n                message.floats = [];\n                for (var i = 0; i < object.floats.length; ++i)\n                    message.floats[i] = Number(object.floats[i]);\n            }\n            if (object.ints) {\n                if (!Array.isArray(object.ints))\n                    throw TypeError(\".onnx.AttributeProto.ints: array expected\");\n                message.ints = [];\n                for (var i = 0; i < object.ints.length; ++i)\n                    if ($util.Long)\n                        (message.ints[i] = $util.Long.fromValue(object.ints[i])).unsigned = false;\n                    else if (typeof object.ints[i] === \"string\")\n                        message.ints[i] = parseInt(object.ints[i], 10);\n                    else if (typeof object.ints[i] === \"number\")\n                        message.ints[i] = object.ints[i];\n                    else if (typeof object.ints[i] === \"object\")\n                        message.ints[i] = new $util.LongBits(object.ints[i].low >>> 0, object.ints[i].high >>> 0).toNumber();\n            }\n            if (object.strings) {\n                if (!Array.isArray(object.strings))\n                    throw TypeError(\".onnx.AttributeProto.strings: array expected\");\n                message.strings = [];\n                for (var i = 0; i < object.strings.length; ++i)\n                    if (typeof object.strings[i] === \"string\")\n                        $util.base64.decode(object.strings[i], message.strings[i] = $util.newBuffer($util.base64.length(object.strings[i])), 0);\n                    else if (object.strings[i].length >= 0)\n                        message.strings[i] = object.strings[i];\n            }\n            if (object.tensors) {\n                if (!Array.isArray(object.tensors))\n                    throw TypeError(\".onnx.AttributeProto.tensors: array expected\");\n                message.tensors = [];\n                for (var i = 0; i < object.tensors.length; ++i) {\n                    if (typeof object.tensors[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.tensors: object expected\");\n                    message.tensors[i] = $root.onnx.TensorProto.fromObject(object.tensors[i]);\n                }\n            }\n            if (object.graphs) {\n                if (!Array.isArray(object.graphs))\n                    throw TypeError(\".onnx.AttributeProto.graphs: array expected\");\n                message.graphs = [];\n                for (var i = 0; i < object.graphs.length; ++i) {\n                    if (typeof object.graphs[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.graphs: object expected\");\n                    message.graphs[i] = $root.onnx.GraphProto.fromObject(object.graphs[i]);\n                }\n            }\n            if (object.sparseTensors) {\n                if (!Array.isArray(object.sparseTensors))\n                    throw TypeError(\".onnx.AttributeProto.sparseTensors: array expected\");\n                message.sparseTensors = [];\n                for (var i = 0; i < object.sparseTensors.length; ++i) {\n                    if (typeof object.sparseTensors[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.sparseTensors: object expected\");\n                    message.sparseTensors[i] = $root.onnx.SparseTensorProto.fromObject(object.sparseTensors[i]);\n                }\n            }\n            if (object.typeProtos) {\n                if (!Array.isArray(object.typeProtos))\n                    throw TypeError(\".onnx.AttributeProto.typeProtos: array expected\");\n                message.typeProtos = [];\n                for (var i = 0; i < object.typeProtos.length; ++i) {\n                    if (typeof object.typeProtos[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.typeProtos: object expected\");\n                    message.typeProtos[i] = $root.onnx.TypeProto.fromObject(object.typeProtos[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an AttributeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.AttributeProto} message AttributeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        AttributeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.floats = [];\n                object.ints = [];\n                object.strings = [];\n                object.tensors = [];\n                object.graphs = [];\n                object.typeProtos = [];\n                object.sparseTensors = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.f = 0;\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.i = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.i = options.longs === String ? \"0\" : 0;\n                if (options.bytes === String)\n                    object.s = \"\";\n                else {\n                    object.s = [];\n                    if (options.bytes !== Array)\n                        object.s = $util.newBuffer(object.s);\n                }\n                object.t = null;\n                object.g = null;\n                object.docString = \"\";\n                object.tp = null;\n                object.type = options.enums === String ? \"UNDEFINED\" : 0;\n                object.refAttrName = \"\";\n                object.sparseTensor = null;\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                object.f = options.json && !isFinite(message.f) ? String(message.f) : message.f;\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                if (typeof message.i === \"number\")\n                    object.i = options.longs === String ? String(message.i) : message.i;\n                else\n                    object.i = options.longs === String ? $util.Long.prototype.toString.call(message.i) : options.longs === Number ? new $util.LongBits(message.i.low >>> 0, message.i.high >>> 0).toNumber() : message.i;\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                object.s = options.bytes === String ? $util.base64.encode(message.s, 0, message.s.length) : options.bytes === Array ? Array.prototype.slice.call(message.s) : message.s;\n            if (message.t != null && message.hasOwnProperty(\"t\"))\n                object.t = $root.onnx.TensorProto.toObject(message.t, options);\n            if (message.g != null && message.hasOwnProperty(\"g\"))\n                object.g = $root.onnx.GraphProto.toObject(message.g, options);\n            if (message.floats && message.floats.length) {\n                object.floats = [];\n                for (var j = 0; j < message.floats.length; ++j)\n                    object.floats[j] = options.json && !isFinite(message.floats[j]) ? String(message.floats[j]) : message.floats[j];\n            }\n            if (message.ints && message.ints.length) {\n                object.ints = [];\n                for (var j = 0; j < message.ints.length; ++j)\n                    if (typeof message.ints[j] === \"number\")\n                        object.ints[j] = options.longs === String ? String(message.ints[j]) : message.ints[j];\n                    else\n                        object.ints[j] = options.longs === String ? $util.Long.prototype.toString.call(message.ints[j]) : options.longs === Number ? new $util.LongBits(message.ints[j].low >>> 0, message.ints[j].high >>> 0).toNumber() : message.ints[j];\n            }\n            if (message.strings && message.strings.length) {\n                object.strings = [];\n                for (var j = 0; j < message.strings.length; ++j)\n                    object.strings[j] = options.bytes === String ? $util.base64.encode(message.strings[j], 0, message.strings[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.strings[j]) : message.strings[j];\n            }\n            if (message.tensors && message.tensors.length) {\n                object.tensors = [];\n                for (var j = 0; j < message.tensors.length; ++j)\n                    object.tensors[j] = $root.onnx.TensorProto.toObject(message.tensors[j], options);\n            }\n            if (message.graphs && message.graphs.length) {\n                object.graphs = [];\n                for (var j = 0; j < message.graphs.length; ++j)\n                    object.graphs[j] = $root.onnx.GraphProto.toObject(message.graphs[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.tp != null && message.hasOwnProperty(\"tp\"))\n                object.tp = $root.onnx.TypeProto.toObject(message.tp, options);\n            if (message.typeProtos && message.typeProtos.length) {\n                object.typeProtos = [];\n                for (var j = 0; j < message.typeProtos.length; ++j)\n                    object.typeProtos[j] = $root.onnx.TypeProto.toObject(message.typeProtos[j], options);\n            }\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = options.enums === String ? $root.onnx.AttributeProto.AttributeType[message.type] === undefined ? message.type : $root.onnx.AttributeProto.AttributeType[message.type] : message.type;\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                object.refAttrName = message.refAttrName;\n            if (message.sparseTensor != null && message.hasOwnProperty(\"sparseTensor\"))\n                object.sparseTensor = $root.onnx.SparseTensorProto.toObject(message.sparseTensor, options);\n            if (message.sparseTensors && message.sparseTensors.length) {\n                object.sparseTensors = [];\n                for (var j = 0; j < message.sparseTensors.length; ++j)\n                    object.sparseTensors[j] = $root.onnx.SparseTensorProto.toObject(message.sparseTensors[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this AttributeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.AttributeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        AttributeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for AttributeProto\n         * @function getTypeUrl\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        AttributeProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.AttributeProto\";\n        };\n\n        /**\n         * AttributeType enum.\n         * @name onnx.AttributeProto.AttributeType\n         * @enum {number}\n         * @property {number} UNDEFINED=0 UNDEFINED value\n         * @property {number} FLOAT=1 FLOAT value\n         * @property {number} INT=2 INT value\n         * @property {number} STRING=3 STRING value\n         * @property {number} TENSOR=4 TENSOR value\n         * @property {number} GRAPH=5 GRAPH value\n         * @property {number} SPARSE_TENSOR=11 SPARSE_TENSOR value\n         * @property {number} TYPE_PROTO=13 TYPE_PROTO value\n         * @property {number} FLOATS=6 FLOATS value\n         * @property {number} INTS=7 INTS value\n         * @property {number} STRINGS=8 STRINGS value\n         * @property {number} TENSORS=9 TENSORS value\n         * @property {number} GRAPHS=10 GRAPHS value\n         * @property {number} SPARSE_TENSORS=12 SPARSE_TENSORS value\n         * @property {number} TYPE_PROTOS=14 TYPE_PROTOS value\n         */\n        AttributeProto.AttributeType = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"UNDEFINED\"] = 0;\n            values[valuesById[1] = \"FLOAT\"] = 1;\n            values[valuesById[2] = \"INT\"] = 2;\n            values[valuesById[3] = \"STRING\"] = 3;\n            values[valuesById[4] = \"TENSOR\"] = 4;\n            values[valuesById[5] = \"GRAPH\"] = 5;\n            values[valuesById[11] = \"SPARSE_TENSOR\"] = 11;\n            values[valuesById[13] = \"TYPE_PROTO\"] = 13;\n            values[valuesById[6] = \"FLOATS\"] = 6;\n            values[valuesById[7] = \"INTS\"] = 7;\n            values[valuesById[8] = \"STRINGS\"] = 8;\n            values[valuesById[9] = \"TENSORS\"] = 9;\n            values[valuesById[10] = \"GRAPHS\"] = 10;\n            values[valuesById[12] = \"SPARSE_TENSORS\"] = 12;\n            values[valuesById[14] = \"TYPE_PROTOS\"] = 14;\n            return values;\n        })();\n\n        return AttributeProto;\n    })();\n\n    onnx.ValueInfoProto = (function() {\n\n        /**\n         * Properties of a ValueInfoProto.\n         * @memberof onnx\n         * @interface IValueInfoProto\n         * @property {string|null} [name] ValueInfoProto name\n         * @property {onnx.ITypeProto|null} [type] ValueInfoProto type\n         * @property {string|null} [docString] ValueInfoProto docString\n         */\n\n        /**\n         * Constructs a new ValueInfoProto.\n         * @memberof onnx\n         * @classdesc Represents a ValueInfoProto.\n         * @implements IValueInfoProto\n         * @constructor\n         * @param {onnx.IValueInfoProto=} [properties] Properties to set\n         */\n        function ValueInfoProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ValueInfoProto name.\n         * @member {string} name\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.name = \"\";\n\n        /**\n         * ValueInfoProto type.\n         * @member {onnx.ITypeProto|null|undefined} type\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.type = null;\n\n        /**\n         * ValueInfoProto docString.\n         * @member {string} docString\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.docString = \"\";\n\n        /**\n         * Creates a new ValueInfoProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto=} [properties] Properties to set\n         * @returns {onnx.ValueInfoProto} ValueInfoProto instance\n         */\n        ValueInfoProto.create = function create(properties) {\n            return new ValueInfoProto(properties);\n        };\n\n        /**\n         * Encodes the specified ValueInfoProto message. Does not implicitly {@link onnx.ValueInfoProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto} message ValueInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ValueInfoProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.type != null && Object.hasOwnProperty.call(message, \"type\"))\n                $root.onnx.TypeProto.encode(message.type, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.docString != null && Object.hasOwnProperty.call(message, \"docString\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.docString);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ValueInfoProto message, length delimited. Does not implicitly {@link onnx.ValueInfoProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto} message ValueInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ValueInfoProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ValueInfoProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ValueInfoProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.ValueInfoProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.name = reader.string();\n                        break;\n                    }\n                case 2: {\n                        message.type = $root.onnx.TypeProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 3: {\n                        message.docString = reader.string();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ValueInfoProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ValueInfoProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ValueInfoProto message.\n         * @function verify\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ValueInfoProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.type != null && message.hasOwnProperty(\"type\")) {\n                var error = $root.onnx.TypeProto.verify(message.type);\n                if (error)\n                    return \"type.\" + error;\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ValueInfoProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         */\n        ValueInfoProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.ValueInfoProto)\n                return object;\n            var message = new $root.onnx.ValueInfoProto();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.type != null) {\n                if (typeof object.type !== \"object\")\n                    throw TypeError(\".onnx.ValueInfoProto.type: object expected\");\n                message.type = $root.onnx.TypeProto.fromObject(object.type);\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ValueInfoProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.ValueInfoProto} message ValueInfoProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ValueInfoProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.name = \"\";\n                object.type = null;\n                object.docString = \"\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = $root.onnx.TypeProto.toObject(message.type, options);\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            return object;\n        };\n\n        /**\n         * Converts this ValueInfoProto to JSON.\n         * @function toJSON\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ValueInfoProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for ValueInfoProto\n         * @function getTypeUrl\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        ValueInfoProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.ValueInfoProto\";\n        };\n\n        return ValueInfoProto;\n    })();\n\n    onnx.NodeProto = (function() {\n\n        /**\n         * Properties of a NodeProto.\n         * @memberof onnx\n         * @interface INodeProto\n         * @property {Array.<string>|null} [input] NodeProto input\n         * @property {Array.<string>|null} [output] NodeProto output\n         * @property {string|null} [name] NodeProto name\n         * @property {string|null} [opType] NodeProto opType\n         * @property {string|null} [domain] NodeProto domain\n         * @property {Array.<onnx.IAttributeProto>|null} [attribute] NodeProto attribute\n         * @property {string|null} [docString] NodeProto docString\n         */\n\n        /**\n         * Constructs a new NodeProto.\n         * @memberof onnx\n         * @classdesc Represents a NodeProto.\n         * @implements INodeProto\n         * @constructor\n         * @param {onnx.INodeProto=} [properties] Properties to set\n         */\n        function NodeProto(properties) {\n            this.input = [];\n            this.output = [];\n            this.attribute = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * NodeProto input.\n         * @member {Array.<string>} input\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.input = $util.emptyArray;\n\n        /**\n         * NodeProto output.\n         * @member {Array.<string>} output\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.output = $util.emptyArray;\n\n        /**\n         * NodeProto name.\n         * @member {string} name\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.name = \"\";\n\n        /**\n         * NodeProto opType.\n         * @member {string} opType\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.opType = \"\";\n\n        /**\n         * NodeProto domain.\n         * @member {string} domain\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.domain = \"\";\n\n        /**\n         * NodeProto attribute.\n         * @member {Array.<onnx.IAttributeProto>} attribute\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.attribute = $util.emptyArray;\n\n        /**\n         * NodeProto docString.\n         * @member {string} docString\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.docString = \"\";\n\n        /**\n         * Creates a new NodeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto=} [properties] Properties to set\n         * @returns {onnx.NodeProto} NodeProto instance\n         */\n        NodeProto.create = function create(properties) {\n            return new NodeProto(properties);\n        };\n\n        /**\n         * Encodes the specified NodeProto message. Does not implicitly {@link onnx.NodeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto} message NodeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        NodeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.input != null && message.input.length)\n                for (var i = 0; i < message.input.length; ++i)\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.input[i]);\n            if (message.output != null && message.output.length)\n                for (var i = 0; i < message.output.length; ++i)\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.output[i]);\n            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);\n            if (message.opType != null && Object.hasOwnProperty.call(message, \"opType\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.opType);\n            if (message.attribute != null && message.attribute.length)\n                for (var i = 0; i < message.attribute.length; ++i)\n                    $root.onnx.AttributeProto.encode(message.attribute[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.docString != null && Object.hasOwnProperty.call(message, \"docString\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.docString);\n            if (message.domain != null && Object.hasOwnProperty.call(message, \"domain\"))\n                writer.uint32(/* id 7, wireType 2 =*/58).string(message.domain);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified NodeProto message, length delimited. Does not implicitly {@link onnx.NodeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto} message NodeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        NodeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a NodeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.NodeProto} NodeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        NodeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.NodeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        if (!(message.input && message.input.length))\n                            message.input = [];\n                        message.input.push(reader.string());\n                        break;\n                    }\n                case 2: {\n                        if (!(message.output && message.output.length))\n                            message.output = [];\n                        message.output.push(reader.string());\n                        break;\n                    }\n                case 3: {\n                        message.name = reader.string();\n                        break;\n                    }\n                case 4: {\n                        message.opType = reader.string();\n                        break;\n                    }\n                case 7: {\n                        message.domain = reader.string();\n                        break;\n                    }\n                case 5: {\n                        if (!(message.attribute && message.attribute.length))\n                            message.attribute = [];\n                        message.attribute.push($root.onnx.AttributeProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 6: {\n                        message.docString = reader.string();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a NodeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.NodeProto} NodeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        NodeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a NodeProto message.\n         * @function verify\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        NodeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.input != null && message.hasOwnProperty(\"input\")) {\n                if (!Array.isArray(message.input))\n                    return \"input: array expected\";\n                for (var i = 0; i < message.input.length; ++i)\n                    if (!$util.isString(message.input[i]))\n                        return \"input: string[] expected\";\n            }\n            if (message.output != null && message.hasOwnProperty(\"output\")) {\n                if (!Array.isArray(message.output))\n                    return \"output: array expected\";\n                for (var i = 0; i < message.output.length; ++i)\n                    if (!$util.isString(message.output[i]))\n                        return \"output: string[] expected\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                if (!$util.isString(message.opType))\n                    return \"opType: string expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.attribute != null && message.hasOwnProperty(\"attribute\")) {\n                if (!Array.isArray(message.attribute))\n                    return \"attribute: array expected\";\n                for (var i = 0; i < message.attribute.length; ++i) {\n                    var error = $root.onnx.AttributeProto.verify(message.attribute[i]);\n                    if (error)\n                        return \"attribute.\" + error;\n                }\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a NodeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.NodeProto} NodeProto\n         */\n        NodeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.NodeProto)\n                return object;\n            var message = new $root.onnx.NodeProto();\n            if (object.input) {\n                if (!Array.isArray(object.input))\n                    throw TypeError(\".onnx.NodeProto.input: array expected\");\n                message.input = [];\n                for (var i = 0; i < object.input.length; ++i)\n                    message.input[i] = String(object.input[i]);\n            }\n            if (object.output) {\n                if (!Array.isArray(object.output))\n                    throw TypeError(\".onnx.NodeProto.output: array expected\");\n                message.output = [];\n                for (var i = 0; i < object.output.length; ++i)\n                    message.output[i] = String(object.output[i]);\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.opType != null)\n                message.opType = String(object.opType);\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.attribute) {\n                if (!Array.isArray(object.attribute))\n                    throw TypeError(\".onnx.NodeProto.attribute: array expected\");\n                message.attribute = [];\n                for (var i = 0; i < object.attribute.length; ++i) {\n                    if (typeof object.attribute[i] !== \"object\")\n                        throw TypeError(\".onnx.NodeProto.attribute: object expected\");\n                    message.attribute[i] = $root.onnx.AttributeProto.fromObject(object.attribute[i]);\n                }\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a NodeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.NodeProto} message NodeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        NodeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.input = [];\n                object.output = [];\n                object.attribute = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.opType = \"\";\n                object.docString = \"\";\n                object.domain = \"\";\n            }\n            if (message.input && message.input.length) {\n                object.input = [];\n                for (var j = 0; j < message.input.length; ++j)\n                    object.input[j] = message.input[j];\n            }\n            if (message.output && message.output.length) {\n                object.output = [];\n                for (var j = 0; j < message.output.length; ++j)\n                    object.output[j] = message.output[j];\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                object.opType = message.opType;\n            if (message.attribute && message.attribute.length) {\n                object.attribute = [];\n                for (var j = 0; j < message.attribute.length; ++j)\n                    object.attribute[j] = $root.onnx.AttributeProto.toObject(message.attribute[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            return object;\n        };\n\n        /**\n         * Converts this NodeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.NodeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        NodeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for NodeProto\n         * @function getTypeUrl\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        NodeProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.NodeProto\";\n        };\n\n        return NodeProto;\n    })();\n\n    onnx.TrainingInfoProto = (function() {\n\n        /**\n         * Properties of a TrainingInfoProto.\n         * @memberof onnx\n         * @interface ITrainingInfoProto\n         * @property {onnx.IGraphProto|null} [initialization] TrainingInfoProto initialization\n         * @property {onnx.IGraphProto|null} [algorithm] TrainingInfoProto algorithm\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [initializationBinding] TrainingInfoProto initializationBinding\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [updateBinding] TrainingInfoProto updateBinding\n         */\n\n        /**\n         * Constructs a new TrainingInfoProto.\n         * @memberof onnx\n         * @classdesc Represents a TrainingInfoProto.\n         * @implements ITrainingInfoProto\n         * @constructor\n         * @param {onnx.ITrainingInfoProto=} [properties] Properties to set\n         */\n        function TrainingInfoProto(properties) {\n            this.initializationBinding = [];\n            this.updateBinding = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TrainingInfoProto initialization.\n         * @member {onnx.IGraphProto|null|undefined} initialization\n         * @memberof onnx.TrainingInfoProto\n         * @instance\n         */\n        TrainingInfoProto.prototype.initialization = null;\n\n        /**\n         * TrainingInfoProto algorithm.\n         * @member {onnx.IGraphProto|null|undefined} algorithm\n         * @memberof onnx.TrainingInfoProto\n         * @instance\n         */\n        TrainingInfoProto.prototype.algorithm = null;\n\n        /**\n         * TrainingInfoProto initializationBinding.\n         * @member {Array.<onnx.IStringStringEntryProto>} initializationBinding\n         * @memberof onnx.TrainingInfoProto\n         * @instance\n         */\n        TrainingInfoProto.prototype.initializationBinding = $util.emptyArray;\n\n        /**\n         * TrainingInfoProto updateBinding.\n         * @member {Array.<onnx.IStringStringEntryProto>} updateBinding\n         * @memberof onnx.TrainingInfoProto\n         * @instance\n         */\n        TrainingInfoProto.prototype.updateBinding = $util.emptyArray;\n\n        /**\n         * Creates a new TrainingInfoProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TrainingInfoProto\n         * @static\n         * @param {onnx.ITrainingInfoProto=} [properties] Properties to set\n         * @returns {onnx.TrainingInfoProto} TrainingInfoProto instance\n         */\n        TrainingInfoProto.create = function create(properties) {\n            return new TrainingInfoProto(properties);\n        };\n\n        /**\n         * Encodes the specified TrainingInfoProto message. Does not implicitly {@link onnx.TrainingInfoProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TrainingInfoProto\n         * @static\n         * @param {onnx.ITrainingInfoProto} message TrainingInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TrainingInfoProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.initialization != null && Object.hasOwnProperty.call(message, \"initialization\"))\n                $root.onnx.GraphProto.encode(message.initialization, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.algorithm != null && Object.hasOwnProperty.call(message, \"algorithm\"))\n                $root.onnx.GraphProto.encode(message.algorithm, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.initializationBinding != null && message.initializationBinding.length)\n                for (var i = 0; i < message.initializationBinding.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.initializationBinding[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            if (message.updateBinding != null && message.updateBinding.length)\n                for (var i = 0; i < message.updateBinding.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.updateBinding[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TrainingInfoProto message, length delimited. Does not implicitly {@link onnx.TrainingInfoProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TrainingInfoProto\n         * @static\n         * @param {onnx.ITrainingInfoProto} message TrainingInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TrainingInfoProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TrainingInfoProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TrainingInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TrainingInfoProto} TrainingInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TrainingInfoProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TrainingInfoProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.initialization = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 2: {\n                        message.algorithm = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 3: {\n                        if (!(message.initializationBinding && message.initializationBinding.length))\n                            message.initializationBinding = [];\n                        message.initializationBinding.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 4: {\n                        if (!(message.updateBinding && message.updateBinding.length))\n                            message.updateBinding = [];\n                        message.updateBinding.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TrainingInfoProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TrainingInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TrainingInfoProto} TrainingInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TrainingInfoProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TrainingInfoProto message.\n         * @function verify\n         * @memberof onnx.TrainingInfoProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TrainingInfoProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.initialization != null && message.hasOwnProperty(\"initialization\")) {\n                var error = $root.onnx.GraphProto.verify(message.initialization);\n                if (error)\n                    return \"initialization.\" + error;\n            }\n            if (message.algorithm != null && message.hasOwnProperty(\"algorithm\")) {\n                var error = $root.onnx.GraphProto.verify(message.algorithm);\n                if (error)\n                    return \"algorithm.\" + error;\n            }\n            if (message.initializationBinding != null && message.hasOwnProperty(\"initializationBinding\")) {\n                if (!Array.isArray(message.initializationBinding))\n                    return \"initializationBinding: array expected\";\n                for (var i = 0; i < message.initializationBinding.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.initializationBinding[i]);\n                    if (error)\n                        return \"initializationBinding.\" + error;\n                }\n            }\n            if (message.updateBinding != null && message.hasOwnProperty(\"updateBinding\")) {\n                if (!Array.isArray(message.updateBinding))\n                    return \"updateBinding: array expected\";\n                for (var i = 0; i < message.updateBinding.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.updateBinding[i]);\n                    if (error)\n                        return \"updateBinding.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TrainingInfoProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TrainingInfoProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TrainingInfoProto} TrainingInfoProto\n         */\n        TrainingInfoProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TrainingInfoProto)\n                return object;\n            var message = new $root.onnx.TrainingInfoProto();\n            if (object.initialization != null) {\n                if (typeof object.initialization !== \"object\")\n                    throw TypeError(\".onnx.TrainingInfoProto.initialization: object expected\");\n                message.initialization = $root.onnx.GraphProto.fromObject(object.initialization);\n            }\n            if (object.algorithm != null) {\n                if (typeof object.algorithm !== \"object\")\n                    throw TypeError(\".onnx.TrainingInfoProto.algorithm: object expected\");\n                message.algorithm = $root.onnx.GraphProto.fromObject(object.algorithm);\n            }\n            if (object.initializationBinding) {\n                if (!Array.isArray(object.initializationBinding))\n                    throw TypeError(\".onnx.TrainingInfoProto.initializationBinding: array expected\");\n                message.initializationBinding = [];\n                for (var i = 0; i < object.initializationBinding.length; ++i) {\n                    if (typeof object.initializationBinding[i] !== \"object\")\n                        throw TypeError(\".onnx.TrainingInfoProto.initializationBinding: object expected\");\n                    message.initializationBinding[i] = $root.onnx.StringStringEntryProto.fromObject(object.initializationBinding[i]);\n                }\n            }\n            if (object.updateBinding) {\n                if (!Array.isArray(object.updateBinding))\n                    throw TypeError(\".onnx.TrainingInfoProto.updateBinding: array expected\");\n                message.updateBinding = [];\n                for (var i = 0; i < object.updateBinding.length; ++i) {\n                    if (typeof object.updateBinding[i] !== \"object\")\n                        throw TypeError(\".onnx.TrainingInfoProto.updateBinding: object expected\");\n                    message.updateBinding[i] = $root.onnx.StringStringEntryProto.fromObject(object.updateBinding[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TrainingInfoProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TrainingInfoProto\n         * @static\n         * @param {onnx.TrainingInfoProto} message TrainingInfoProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TrainingInfoProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.initializationBinding = [];\n                object.updateBinding = [];\n            }\n            if (options.defaults) {\n                object.initialization = null;\n                object.algorithm = null;\n            }\n            if (message.initialization != null && message.hasOwnProperty(\"initialization\"))\n                object.initialization = $root.onnx.GraphProto.toObject(message.initialization, options);\n            if (message.algorithm != null && message.hasOwnProperty(\"algorithm\"))\n                object.algorithm = $root.onnx.GraphProto.toObject(message.algorithm, options);\n            if (message.initializationBinding && message.initializationBinding.length) {\n                object.initializationBinding = [];\n                for (var j = 0; j < message.initializationBinding.length; ++j)\n                    object.initializationBinding[j] = $root.onnx.StringStringEntryProto.toObject(message.initializationBinding[j], options);\n            }\n            if (message.updateBinding && message.updateBinding.length) {\n                object.updateBinding = [];\n                for (var j = 0; j < message.updateBinding.length; ++j)\n                    object.updateBinding[j] = $root.onnx.StringStringEntryProto.toObject(message.updateBinding[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TrainingInfoProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TrainingInfoProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TrainingInfoProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for TrainingInfoProto\n         * @function getTypeUrl\n         * @memberof onnx.TrainingInfoProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        TrainingInfoProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.TrainingInfoProto\";\n        };\n\n        return TrainingInfoProto;\n    })();\n\n    onnx.ModelProto = (function() {\n\n        /**\n         * Properties of a ModelProto.\n         * @memberof onnx\n         * @interface IModelProto\n         * @property {number|Long|null} [irVersion] ModelProto irVersion\n         * @property {Array.<onnx.IOperatorSetIdProto>|null} [opsetImport] ModelProto opsetImport\n         * @property {string|null} [producerName] ModelProto producerName\n         * @property {string|null} [producerVersion] ModelProto producerVersion\n         * @property {string|null} [domain] ModelProto domain\n         * @property {number|Long|null} [modelVersion] ModelProto modelVersion\n         * @property {string|null} [docString] ModelProto docString\n         * @property {onnx.IGraphProto|null} [graph] ModelProto graph\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [metadataProps] ModelProto metadataProps\n         * @property {Array.<onnx.ITrainingInfoProto>|null} [trainingInfo] ModelProto trainingInfo\n         * @property {Array.<onnx.IFunctionProto>|null} [functions] ModelProto functions\n         */\n\n        /**\n         * Constructs a new ModelProto.\n         * @memberof onnx\n         * @classdesc Represents a ModelProto.\n         * @implements IModelProto\n         * @constructor\n         * @param {onnx.IModelProto=} [properties] Properties to set\n         */\n        function ModelProto(properties) {\n            this.opsetImport = [];\n            this.metadataProps = [];\n            this.trainingInfo = [];\n            this.functions = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ModelProto irVersion.\n         * @member {number|Long} irVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.irVersion = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * ModelProto opsetImport.\n         * @member {Array.<onnx.IOperatorSetIdProto>} opsetImport\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.opsetImport = $util.emptyArray;\n\n        /**\n         * ModelProto producerName.\n         * @member {string} producerName\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.producerName = \"\";\n\n        /**\n         * ModelProto producerVersion.\n         * @member {string} producerVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.producerVersion = \"\";\n\n        /**\n         * ModelProto domain.\n         * @member {string} domain\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.domain = \"\";\n\n        /**\n         * ModelProto modelVersion.\n         * @member {number|Long} modelVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.modelVersion = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * ModelProto docString.\n         * @member {string} docString\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.docString = \"\";\n\n        /**\n         * ModelProto graph.\n         * @member {onnx.IGraphProto|null|undefined} graph\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.graph = null;\n\n        /**\n         * ModelProto metadataProps.\n         * @member {Array.<onnx.IStringStringEntryProto>} metadataProps\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.metadataProps = $util.emptyArray;\n\n        /**\n         * ModelProto trainingInfo.\n         * @member {Array.<onnx.ITrainingInfoProto>} trainingInfo\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.trainingInfo = $util.emptyArray;\n\n        /**\n         * ModelProto functions.\n         * @member {Array.<onnx.IFunctionProto>} functions\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.functions = $util.emptyArray;\n\n        /**\n         * Creates a new ModelProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto=} [properties] Properties to set\n         * @returns {onnx.ModelProto} ModelProto instance\n         */\n        ModelProto.create = function create(properties) {\n            return new ModelProto(properties);\n        };\n\n        /**\n         * Encodes the specified ModelProto message. Does not implicitly {@link onnx.ModelProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto} message ModelProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ModelProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.irVersion != null && Object.hasOwnProperty.call(message, \"irVersion\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.irVersion);\n            if (message.producerName != null && Object.hasOwnProperty.call(message, \"producerName\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.producerName);\n            if (message.producerVersion != null && Object.hasOwnProperty.call(message, \"producerVersion\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.producerVersion);\n            if (message.domain != null && Object.hasOwnProperty.call(message, \"domain\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.domain);\n            if (message.modelVersion != null && Object.hasOwnProperty.call(message, \"modelVersion\"))\n                writer.uint32(/* id 5, wireType 0 =*/40).int64(message.modelVersion);\n            if (message.docString != null && Object.hasOwnProperty.call(message, \"docString\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.docString);\n            if (message.graph != null && Object.hasOwnProperty.call(message, \"graph\"))\n                $root.onnx.GraphProto.encode(message.graph, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n            if (message.opsetImport != null && message.opsetImport.length)\n                for (var i = 0; i < message.opsetImport.length; ++i)\n                    $root.onnx.OperatorSetIdProto.encode(message.opsetImport[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\n            if (message.metadataProps != null && message.metadataProps.length)\n                for (var i = 0; i < message.metadataProps.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.metadataProps[i], writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n            if (message.trainingInfo != null && message.trainingInfo.length)\n                for (var i = 0; i < message.trainingInfo.length; ++i)\n                    $root.onnx.TrainingInfoProto.encode(message.trainingInfo[i], writer.uint32(/* id 20, wireType 2 =*/162).fork()).ldelim();\n            if (message.functions != null && message.functions.length)\n                for (var i = 0; i < message.functions.length; ++i)\n                    $root.onnx.FunctionProto.encode(message.functions[i], writer.uint32(/* id 25, wireType 2 =*/202).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ModelProto message, length delimited. Does not implicitly {@link onnx.ModelProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto} message ModelProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ModelProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ModelProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.ModelProto} ModelProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ModelProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.ModelProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.irVersion = reader.int64();\n                        break;\n                    }\n                case 8: {\n                        if (!(message.opsetImport && message.opsetImport.length))\n                            message.opsetImport = [];\n                        message.opsetImport.push($root.onnx.OperatorSetIdProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 2: {\n                        message.producerName = reader.string();\n                        break;\n                    }\n                case 3: {\n                        message.producerVersion = reader.string();\n                        break;\n                    }\n                case 4: {\n                        message.domain = reader.string();\n                        break;\n                    }\n                case 5: {\n                        message.modelVersion = reader.int64();\n                        break;\n                    }\n                case 6: {\n                        message.docString = reader.string();\n                        break;\n                    }\n                case 7: {\n                        message.graph = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 14: {\n                        if (!(message.metadataProps && message.metadataProps.length))\n                            message.metadataProps = [];\n                        message.metadataProps.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 20: {\n                        if (!(message.trainingInfo && message.trainingInfo.length))\n                            message.trainingInfo = [];\n                        message.trainingInfo.push($root.onnx.TrainingInfoProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 25: {\n                        if (!(message.functions && message.functions.length))\n                            message.functions = [];\n                        message.functions.push($root.onnx.FunctionProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ModelProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.ModelProto} ModelProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ModelProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ModelProto message.\n         * @function verify\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ModelProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                if (!$util.isInteger(message.irVersion) && !(message.irVersion && $util.isInteger(message.irVersion.low) && $util.isInteger(message.irVersion.high)))\n                    return \"irVersion: integer|Long expected\";\n            if (message.opsetImport != null && message.hasOwnProperty(\"opsetImport\")) {\n                if (!Array.isArray(message.opsetImport))\n                    return \"opsetImport: array expected\";\n                for (var i = 0; i < message.opsetImport.length; ++i) {\n                    var error = $root.onnx.OperatorSetIdProto.verify(message.opsetImport[i]);\n                    if (error)\n                        return \"opsetImport.\" + error;\n                }\n            }\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                if (!$util.isString(message.producerName))\n                    return \"producerName: string expected\";\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                if (!$util.isString(message.producerVersion))\n                    return \"producerVersion: string expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                if (!$util.isInteger(message.modelVersion) && !(message.modelVersion && $util.isInteger(message.modelVersion.low) && $util.isInteger(message.modelVersion.high)))\n                    return \"modelVersion: integer|Long expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.graph != null && message.hasOwnProperty(\"graph\")) {\n                var error = $root.onnx.GraphProto.verify(message.graph);\n                if (error)\n                    return \"graph.\" + error;\n            }\n            if (message.metadataProps != null && message.hasOwnProperty(\"metadataProps\")) {\n                if (!Array.isArray(message.metadataProps))\n                    return \"metadataProps: array expected\";\n                for (var i = 0; i < message.metadataProps.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.metadataProps[i]);\n                    if (error)\n                        return \"metadataProps.\" + error;\n                }\n            }\n            if (message.trainingInfo != null && message.hasOwnProperty(\"trainingInfo\")) {\n                if (!Array.isArray(message.trainingInfo))\n                    return \"trainingInfo: array expected\";\n                for (var i = 0; i < message.trainingInfo.length; ++i) {\n                    var error = $root.onnx.TrainingInfoProto.verify(message.trainingInfo[i]);\n                    if (error)\n                        return \"trainingInfo.\" + error;\n                }\n            }\n            if (message.functions != null && message.hasOwnProperty(\"functions\")) {\n                if (!Array.isArray(message.functions))\n                    return \"functions: array expected\";\n                for (var i = 0; i < message.functions.length; ++i) {\n                    var error = $root.onnx.FunctionProto.verify(message.functions[i]);\n                    if (error)\n                        return \"functions.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a ModelProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.ModelProto} ModelProto\n         */\n        ModelProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.ModelProto)\n                return object;\n            var message = new $root.onnx.ModelProto();\n            if (object.irVersion != null)\n                if ($util.Long)\n                    (message.irVersion = $util.Long.fromValue(object.irVersion)).unsigned = false;\n                else if (typeof object.irVersion === \"string\")\n                    message.irVersion = parseInt(object.irVersion, 10);\n                else if (typeof object.irVersion === \"number\")\n                    message.irVersion = object.irVersion;\n                else if (typeof object.irVersion === \"object\")\n                    message.irVersion = new $util.LongBits(object.irVersion.low >>> 0, object.irVersion.high >>> 0).toNumber();\n            if (object.opsetImport) {\n                if (!Array.isArray(object.opsetImport))\n                    throw TypeError(\".onnx.ModelProto.opsetImport: array expected\");\n                message.opsetImport = [];\n                for (var i = 0; i < object.opsetImport.length; ++i) {\n                    if (typeof object.opsetImport[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.opsetImport: object expected\");\n                    message.opsetImport[i] = $root.onnx.OperatorSetIdProto.fromObject(object.opsetImport[i]);\n                }\n            }\n            if (object.producerName != null)\n                message.producerName = String(object.producerName);\n            if (object.producerVersion != null)\n                message.producerVersion = String(object.producerVersion);\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.modelVersion != null)\n                if ($util.Long)\n                    (message.modelVersion = $util.Long.fromValue(object.modelVersion)).unsigned = false;\n                else if (typeof object.modelVersion === \"string\")\n                    message.modelVersion = parseInt(object.modelVersion, 10);\n                else if (typeof object.modelVersion === \"number\")\n                    message.modelVersion = object.modelVersion;\n                else if (typeof object.modelVersion === \"object\")\n                    message.modelVersion = new $util.LongBits(object.modelVersion.low >>> 0, object.modelVersion.high >>> 0).toNumber();\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.graph != null) {\n                if (typeof object.graph !== \"object\")\n                    throw TypeError(\".onnx.ModelProto.graph: object expected\");\n                message.graph = $root.onnx.GraphProto.fromObject(object.graph);\n            }\n            if (object.metadataProps) {\n                if (!Array.isArray(object.metadataProps))\n                    throw TypeError(\".onnx.ModelProto.metadataProps: array expected\");\n                message.metadataProps = [];\n                for (var i = 0; i < object.metadataProps.length; ++i) {\n                    if (typeof object.metadataProps[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.metadataProps: object expected\");\n                    message.metadataProps[i] = $root.onnx.StringStringEntryProto.fromObject(object.metadataProps[i]);\n                }\n            }\n            if (object.trainingInfo) {\n                if (!Array.isArray(object.trainingInfo))\n                    throw TypeError(\".onnx.ModelProto.trainingInfo: array expected\");\n                message.trainingInfo = [];\n                for (var i = 0; i < object.trainingInfo.length; ++i) {\n                    if (typeof object.trainingInfo[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.trainingInfo: object expected\");\n                    message.trainingInfo[i] = $root.onnx.TrainingInfoProto.fromObject(object.trainingInfo[i]);\n                }\n            }\n            if (object.functions) {\n                if (!Array.isArray(object.functions))\n                    throw TypeError(\".onnx.ModelProto.functions: array expected\");\n                message.functions = [];\n                for (var i = 0; i < object.functions.length; ++i) {\n                    if (typeof object.functions[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.functions: object expected\");\n                    message.functions[i] = $root.onnx.FunctionProto.fromObject(object.functions[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ModelProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.ModelProto} message ModelProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ModelProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.opsetImport = [];\n                object.metadataProps = [];\n                object.trainingInfo = [];\n                object.functions = [];\n            }\n            if (options.defaults) {\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.irVersion = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.irVersion = options.longs === String ? \"0\" : 0;\n                object.producerName = \"\";\n                object.producerVersion = \"\";\n                object.domain = \"\";\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.modelVersion = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.modelVersion = options.longs === String ? \"0\" : 0;\n                object.docString = \"\";\n                object.graph = null;\n            }\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                if (typeof message.irVersion === \"number\")\n                    object.irVersion = options.longs === String ? String(message.irVersion) : message.irVersion;\n                else\n                    object.irVersion = options.longs === String ? $util.Long.prototype.toString.call(message.irVersion) : options.longs === Number ? new $util.LongBits(message.irVersion.low >>> 0, message.irVersion.high >>> 0).toNumber() : message.irVersion;\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                object.producerName = message.producerName;\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                object.producerVersion = message.producerVersion;\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                if (typeof message.modelVersion === \"number\")\n                    object.modelVersion = options.longs === String ? String(message.modelVersion) : message.modelVersion;\n                else\n                    object.modelVersion = options.longs === String ? $util.Long.prototype.toString.call(message.modelVersion) : options.longs === Number ? new $util.LongBits(message.modelVersion.low >>> 0, message.modelVersion.high >>> 0).toNumber() : message.modelVersion;\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.graph != null && message.hasOwnProperty(\"graph\"))\n                object.graph = $root.onnx.GraphProto.toObject(message.graph, options);\n            if (message.opsetImport && message.opsetImport.length) {\n                object.opsetImport = [];\n                for (var j = 0; j < message.opsetImport.length; ++j)\n                    object.opsetImport[j] = $root.onnx.OperatorSetIdProto.toObject(message.opsetImport[j], options);\n            }\n            if (message.metadataProps && message.metadataProps.length) {\n                object.metadataProps = [];\n                for (var j = 0; j < message.metadataProps.length; ++j)\n                    object.metadataProps[j] = $root.onnx.StringStringEntryProto.toObject(message.metadataProps[j], options);\n            }\n            if (message.trainingInfo && message.trainingInfo.length) {\n                object.trainingInfo = [];\n                for (var j = 0; j < message.trainingInfo.length; ++j)\n                    object.trainingInfo[j] = $root.onnx.TrainingInfoProto.toObject(message.trainingInfo[j], options);\n            }\n            if (message.functions && message.functions.length) {\n                object.functions = [];\n                for (var j = 0; j < message.functions.length; ++j)\n                    object.functions[j] = $root.onnx.FunctionProto.toObject(message.functions[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this ModelProto to JSON.\n         * @function toJSON\n         * @memberof onnx.ModelProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ModelProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for ModelProto\n         * @function getTypeUrl\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        ModelProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.ModelProto\";\n        };\n\n        return ModelProto;\n    })();\n\n    onnx.StringStringEntryProto = (function() {\n\n        /**\n         * Properties of a StringStringEntryProto.\n         * @memberof onnx\n         * @interface IStringStringEntryProto\n         * @property {string|null} [key] StringStringEntryProto key\n         * @property {string|null} [value] StringStringEntryProto value\n         */\n\n        /**\n         * Constructs a new StringStringEntryProto.\n         * @memberof onnx\n         * @classdesc Represents a StringStringEntryProto.\n         * @implements IStringStringEntryProto\n         * @constructor\n         * @param {onnx.IStringStringEntryProto=} [properties] Properties to set\n         */\n        function StringStringEntryProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * StringStringEntryProto key.\n         * @member {string} key\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         */\n        StringStringEntryProto.prototype.key = \"\";\n\n        /**\n         * StringStringEntryProto value.\n         * @member {string} value\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         */\n        StringStringEntryProto.prototype.value = \"\";\n\n        /**\n         * Creates a new StringStringEntryProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto=} [properties] Properties to set\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto instance\n         */\n        StringStringEntryProto.create = function create(properties) {\n            return new StringStringEntryProto(properties);\n        };\n\n        /**\n         * Encodes the specified StringStringEntryProto message. Does not implicitly {@link onnx.StringStringEntryProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto} message StringStringEntryProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        StringStringEntryProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.key != null && Object.hasOwnProperty.call(message, \"key\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.key);\n            if (message.value != null && Object.hasOwnProperty.call(message, \"value\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.value);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified StringStringEntryProto message, length delimited. Does not implicitly {@link onnx.StringStringEntryProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto} message StringStringEntryProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        StringStringEntryProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a StringStringEntryProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        StringStringEntryProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.StringStringEntryProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.key = reader.string();\n                        break;\n                    }\n                case 2: {\n                        message.value = reader.string();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a StringStringEntryProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        StringStringEntryProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a StringStringEntryProto message.\n         * @function verify\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        StringStringEntryProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                if (!$util.isString(message.key))\n                    return \"key: string expected\";\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                if (!$util.isString(message.value))\n                    return \"value: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a StringStringEntryProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         */\n        StringStringEntryProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.StringStringEntryProto)\n                return object;\n            var message = new $root.onnx.StringStringEntryProto();\n            if (object.key != null)\n                message.key = String(object.key);\n            if (object.value != null)\n                message.value = String(object.value);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a StringStringEntryProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.StringStringEntryProto} message StringStringEntryProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        StringStringEntryProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.key = \"\";\n                object.value = \"\";\n            }\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                object.key = message.key;\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                object.value = message.value;\n            return object;\n        };\n\n        /**\n         * Converts this StringStringEntryProto to JSON.\n         * @function toJSON\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        StringStringEntryProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for StringStringEntryProto\n         * @function getTypeUrl\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        StringStringEntryProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.StringStringEntryProto\";\n        };\n\n        return StringStringEntryProto;\n    })();\n\n    onnx.TensorAnnotation = (function() {\n\n        /**\n         * Properties of a TensorAnnotation.\n         * @memberof onnx\n         * @interface ITensorAnnotation\n         * @property {string|null} [tensorName] TensorAnnotation tensorName\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [quantParameterTensorNames] TensorAnnotation quantParameterTensorNames\n         */\n\n        /**\n         * Constructs a new TensorAnnotation.\n         * @memberof onnx\n         * @classdesc Represents a TensorAnnotation.\n         * @implements ITensorAnnotation\n         * @constructor\n         * @param {onnx.ITensorAnnotation=} [properties] Properties to set\n         */\n        function TensorAnnotation(properties) {\n            this.quantParameterTensorNames = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorAnnotation tensorName.\n         * @member {string} tensorName\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         */\n        TensorAnnotation.prototype.tensorName = \"\";\n\n        /**\n         * TensorAnnotation quantParameterTensorNames.\n         * @member {Array.<onnx.IStringStringEntryProto>} quantParameterTensorNames\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         */\n        TensorAnnotation.prototype.quantParameterTensorNames = $util.emptyArray;\n\n        /**\n         * Creates a new TensorAnnotation instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation=} [properties] Properties to set\n         * @returns {onnx.TensorAnnotation} TensorAnnotation instance\n         */\n        TensorAnnotation.create = function create(properties) {\n            return new TensorAnnotation(properties);\n        };\n\n        /**\n         * Encodes the specified TensorAnnotation message. Does not implicitly {@link onnx.TensorAnnotation.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation} message TensorAnnotation message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorAnnotation.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.tensorName != null && Object.hasOwnProperty.call(message, \"tensorName\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.tensorName);\n            if (message.quantParameterTensorNames != null && message.quantParameterTensorNames.length)\n                for (var i = 0; i < message.quantParameterTensorNames.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.quantParameterTensorNames[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorAnnotation message, length delimited. Does not implicitly {@link onnx.TensorAnnotation.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation} message TensorAnnotation message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorAnnotation.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorAnnotation message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorAnnotation.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorAnnotation();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.tensorName = reader.string();\n                        break;\n                    }\n                case 2: {\n                        if (!(message.quantParameterTensorNames && message.quantParameterTensorNames.length))\n                            message.quantParameterTensorNames = [];\n                        message.quantParameterTensorNames.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorAnnotation message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorAnnotation.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorAnnotation message.\n         * @function verify\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorAnnotation.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                if (!$util.isString(message.tensorName))\n                    return \"tensorName: string expected\";\n            if (message.quantParameterTensorNames != null && message.hasOwnProperty(\"quantParameterTensorNames\")) {\n                if (!Array.isArray(message.quantParameterTensorNames))\n                    return \"quantParameterTensorNames: array expected\";\n                for (var i = 0; i < message.quantParameterTensorNames.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.quantParameterTensorNames[i]);\n                    if (error)\n                        return \"quantParameterTensorNames.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorAnnotation message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         */\n        TensorAnnotation.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorAnnotation)\n                return object;\n            var message = new $root.onnx.TensorAnnotation();\n            if (object.tensorName != null)\n                message.tensorName = String(object.tensorName);\n            if (object.quantParameterTensorNames) {\n                if (!Array.isArray(object.quantParameterTensorNames))\n                    throw TypeError(\".onnx.TensorAnnotation.quantParameterTensorNames: array expected\");\n                message.quantParameterTensorNames = [];\n                for (var i = 0; i < object.quantParameterTensorNames.length; ++i) {\n                    if (typeof object.quantParameterTensorNames[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorAnnotation.quantParameterTensorNames: object expected\");\n                    message.quantParameterTensorNames[i] = $root.onnx.StringStringEntryProto.fromObject(object.quantParameterTensorNames[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorAnnotation message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.TensorAnnotation} message TensorAnnotation\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorAnnotation.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.quantParameterTensorNames = [];\n            if (options.defaults)\n                object.tensorName = \"\";\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                object.tensorName = message.tensorName;\n            if (message.quantParameterTensorNames && message.quantParameterTensorNames.length) {\n                object.quantParameterTensorNames = [];\n                for (var j = 0; j < message.quantParameterTensorNames.length; ++j)\n                    object.quantParameterTensorNames[j] = $root.onnx.StringStringEntryProto.toObject(message.quantParameterTensorNames[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TensorAnnotation to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorAnnotation.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for TensorAnnotation\n         * @function getTypeUrl\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        TensorAnnotation.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.TensorAnnotation\";\n        };\n\n        return TensorAnnotation;\n    })();\n\n    onnx.GraphProto = (function() {\n\n        /**\n         * Properties of a GraphProto.\n         * @memberof onnx\n         * @interface IGraphProto\n         * @property {Array.<onnx.INodeProto>|null} [node] GraphProto node\n         * @property {string|null} [name] GraphProto name\n         * @property {Array.<onnx.ITensorProto>|null} [initializer] GraphProto initializer\n         * @property {Array.<onnx.ISparseTensorProto>|null} [sparseInitializer] GraphProto sparseInitializer\n         * @property {string|null} [docString] GraphProto docString\n         * @property {Array.<onnx.IValueInfoProto>|null} [input] GraphProto input\n         * @property {Array.<onnx.IValueInfoProto>|null} [output] GraphProto output\n         * @property {Array.<onnx.IValueInfoProto>|null} [valueInfo] GraphProto valueInfo\n         * @property {Array.<onnx.ITensorAnnotation>|null} [quantizationAnnotation] GraphProto quantizationAnnotation\n         */\n\n        /**\n         * Constructs a new GraphProto.\n         * @memberof onnx\n         * @classdesc Represents a GraphProto.\n         * @implements IGraphProto\n         * @constructor\n         * @param {onnx.IGraphProto=} [properties] Properties to set\n         */\n        function GraphProto(properties) {\n            this.node = [];\n            this.initializer = [];\n            this.sparseInitializer = [];\n            this.input = [];\n            this.output = [];\n            this.valueInfo = [];\n            this.quantizationAnnotation = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * GraphProto node.\n         * @member {Array.<onnx.INodeProto>} node\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.node = $util.emptyArray;\n\n        /**\n         * GraphProto name.\n         * @member {string} name\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.name = \"\";\n\n        /**\n         * GraphProto initializer.\n         * @member {Array.<onnx.ITensorProto>} initializer\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.initializer = $util.emptyArray;\n\n        /**\n         * GraphProto sparseInitializer.\n         * @member {Array.<onnx.ISparseTensorProto>} sparseInitializer\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.sparseInitializer = $util.emptyArray;\n\n        /**\n         * GraphProto docString.\n         * @member {string} docString\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.docString = \"\";\n\n        /**\n         * GraphProto input.\n         * @member {Array.<onnx.IValueInfoProto>} input\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.input = $util.emptyArray;\n\n        /**\n         * GraphProto output.\n         * @member {Array.<onnx.IValueInfoProto>} output\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.output = $util.emptyArray;\n\n        /**\n         * GraphProto valueInfo.\n         * @member {Array.<onnx.IValueInfoProto>} valueInfo\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.valueInfo = $util.emptyArray;\n\n        /**\n         * GraphProto quantizationAnnotation.\n         * @member {Array.<onnx.ITensorAnnotation>} quantizationAnnotation\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.quantizationAnnotation = $util.emptyArray;\n\n        /**\n         * Creates a new GraphProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto=} [properties] Properties to set\n         * @returns {onnx.GraphProto} GraphProto instance\n         */\n        GraphProto.create = function create(properties) {\n            return new GraphProto(properties);\n        };\n\n        /**\n         * Encodes the specified GraphProto message. Does not implicitly {@link onnx.GraphProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto} message GraphProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        GraphProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.node != null && message.node.length)\n                for (var i = 0; i < message.node.length; ++i)\n                    $root.onnx.NodeProto.encode(message.node[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);\n            if (message.initializer != null && message.initializer.length)\n                for (var i = 0; i < message.initializer.length; ++i)\n                    $root.onnx.TensorProto.encode(message.initializer[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.docString != null && Object.hasOwnProperty.call(message, \"docString\"))\n                writer.uint32(/* id 10, wireType 2 =*/82).string(message.docString);\n            if (message.input != null && message.input.length)\n                for (var i = 0; i < message.input.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.input[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            if (message.output != null && message.output.length)\n                for (var i = 0; i < message.output.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.output[i], writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();\n            if (message.valueInfo != null && message.valueInfo.length)\n                for (var i = 0; i < message.valueInfo.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.valueInfo[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n            if (message.quantizationAnnotation != null && message.quantizationAnnotation.length)\n                for (var i = 0; i < message.quantizationAnnotation.length; ++i)\n                    $root.onnx.TensorAnnotation.encode(message.quantizationAnnotation[i], writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n            if (message.sparseInitializer != null && message.sparseInitializer.length)\n                for (var i = 0; i < message.sparseInitializer.length; ++i)\n                    $root.onnx.SparseTensorProto.encode(message.sparseInitializer[i], writer.uint32(/* id 15, wireType 2 =*/122).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified GraphProto message, length delimited. Does not implicitly {@link onnx.GraphProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto} message GraphProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        GraphProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a GraphProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.GraphProto} GraphProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        GraphProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.GraphProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        if (!(message.node && message.node.length))\n                            message.node = [];\n                        message.node.push($root.onnx.NodeProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 2: {\n                        message.name = reader.string();\n                        break;\n                    }\n                case 5: {\n                        if (!(message.initializer && message.initializer.length))\n                            message.initializer = [];\n                        message.initializer.push($root.onnx.TensorProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 15: {\n                        if (!(message.sparseInitializer && message.sparseInitializer.length))\n                            message.sparseInitializer = [];\n                        message.sparseInitializer.push($root.onnx.SparseTensorProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 10: {\n                        message.docString = reader.string();\n                        break;\n                    }\n                case 11: {\n                        if (!(message.input && message.input.length))\n                            message.input = [];\n                        message.input.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 12: {\n                        if (!(message.output && message.output.length))\n                            message.output = [];\n                        message.output.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 13: {\n                        if (!(message.valueInfo && message.valueInfo.length))\n                            message.valueInfo = [];\n                        message.valueInfo.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 14: {\n                        if (!(message.quantizationAnnotation && message.quantizationAnnotation.length))\n                            message.quantizationAnnotation = [];\n                        message.quantizationAnnotation.push($root.onnx.TensorAnnotation.decode(reader, reader.uint32()));\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a GraphProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.GraphProto} GraphProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        GraphProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a GraphProto message.\n         * @function verify\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        GraphProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.node != null && message.hasOwnProperty(\"node\")) {\n                if (!Array.isArray(message.node))\n                    return \"node: array expected\";\n                for (var i = 0; i < message.node.length; ++i) {\n                    var error = $root.onnx.NodeProto.verify(message.node[i]);\n                    if (error)\n                        return \"node.\" + error;\n                }\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.initializer != null && message.hasOwnProperty(\"initializer\")) {\n                if (!Array.isArray(message.initializer))\n                    return \"initializer: array expected\";\n                for (var i = 0; i < message.initializer.length; ++i) {\n                    var error = $root.onnx.TensorProto.verify(message.initializer[i]);\n                    if (error)\n                        return \"initializer.\" + error;\n                }\n            }\n            if (message.sparseInitializer != null && message.hasOwnProperty(\"sparseInitializer\")) {\n                if (!Array.isArray(message.sparseInitializer))\n                    return \"sparseInitializer: array expected\";\n                for (var i = 0; i < message.sparseInitializer.length; ++i) {\n                    var error = $root.onnx.SparseTensorProto.verify(message.sparseInitializer[i]);\n                    if (error)\n                        return \"sparseInitializer.\" + error;\n                }\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.input != null && message.hasOwnProperty(\"input\")) {\n                if (!Array.isArray(message.input))\n                    return \"input: array expected\";\n                for (var i = 0; i < message.input.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.input[i]);\n                    if (error)\n                        return \"input.\" + error;\n                }\n            }\n            if (message.output != null && message.hasOwnProperty(\"output\")) {\n                if (!Array.isArray(message.output))\n                    return \"output: array expected\";\n                for (var i = 0; i < message.output.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.output[i]);\n                    if (error)\n                        return \"output.\" + error;\n                }\n            }\n            if (message.valueInfo != null && message.hasOwnProperty(\"valueInfo\")) {\n                if (!Array.isArray(message.valueInfo))\n                    return \"valueInfo: array expected\";\n                for (var i = 0; i < message.valueInfo.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.valueInfo[i]);\n                    if (error)\n                        return \"valueInfo.\" + error;\n                }\n            }\n            if (message.quantizationAnnotation != null && message.hasOwnProperty(\"quantizationAnnotation\")) {\n                if (!Array.isArray(message.quantizationAnnotation))\n                    return \"quantizationAnnotation: array expected\";\n                for (var i = 0; i < message.quantizationAnnotation.length; ++i) {\n                    var error = $root.onnx.TensorAnnotation.verify(message.quantizationAnnotation[i]);\n                    if (error)\n                        return \"quantizationAnnotation.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a GraphProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.GraphProto} GraphProto\n         */\n        GraphProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.GraphProto)\n                return object;\n            var message = new $root.onnx.GraphProto();\n            if (object.node) {\n                if (!Array.isArray(object.node))\n                    throw TypeError(\".onnx.GraphProto.node: array expected\");\n                message.node = [];\n                for (var i = 0; i < object.node.length; ++i) {\n                    if (typeof object.node[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.node: object expected\");\n                    message.node[i] = $root.onnx.NodeProto.fromObject(object.node[i]);\n                }\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.initializer) {\n                if (!Array.isArray(object.initializer))\n                    throw TypeError(\".onnx.GraphProto.initializer: array expected\");\n                message.initializer = [];\n                for (var i = 0; i < object.initializer.length; ++i) {\n                    if (typeof object.initializer[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.initializer: object expected\");\n                    message.initializer[i] = $root.onnx.TensorProto.fromObject(object.initializer[i]);\n                }\n            }\n            if (object.sparseInitializer) {\n                if (!Array.isArray(object.sparseInitializer))\n                    throw TypeError(\".onnx.GraphProto.sparseInitializer: array expected\");\n                message.sparseInitializer = [];\n                for (var i = 0; i < object.sparseInitializer.length; ++i) {\n                    if (typeof object.sparseInitializer[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.sparseInitializer: object expected\");\n                    message.sparseInitializer[i] = $root.onnx.SparseTensorProto.fromObject(object.sparseInitializer[i]);\n                }\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.input) {\n                if (!Array.isArray(object.input))\n                    throw TypeError(\".onnx.GraphProto.input: array expected\");\n                message.input = [];\n                for (var i = 0; i < object.input.length; ++i) {\n                    if (typeof object.input[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.input: object expected\");\n                    message.input[i] = $root.onnx.ValueInfoProto.fromObject(object.input[i]);\n                }\n            }\n            if (object.output) {\n                if (!Array.isArray(object.output))\n                    throw TypeError(\".onnx.GraphProto.output: array expected\");\n                message.output = [];\n                for (var i = 0; i < object.output.length; ++i) {\n                    if (typeof object.output[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.output: object expected\");\n                    message.output[i] = $root.onnx.ValueInfoProto.fromObject(object.output[i]);\n                }\n            }\n            if (object.valueInfo) {\n                if (!Array.isArray(object.valueInfo))\n                    throw TypeError(\".onnx.GraphProto.valueInfo: array expected\");\n                message.valueInfo = [];\n                for (var i = 0; i < object.valueInfo.length; ++i) {\n                    if (typeof object.valueInfo[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.valueInfo: object expected\");\n                    message.valueInfo[i] = $root.onnx.ValueInfoProto.fromObject(object.valueInfo[i]);\n                }\n            }\n            if (object.quantizationAnnotation) {\n                if (!Array.isArray(object.quantizationAnnotation))\n                    throw TypeError(\".onnx.GraphProto.quantizationAnnotation: array expected\");\n                message.quantizationAnnotation = [];\n                for (var i = 0; i < object.quantizationAnnotation.length; ++i) {\n                    if (typeof object.quantizationAnnotation[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.quantizationAnnotation: object expected\");\n                    message.quantizationAnnotation[i] = $root.onnx.TensorAnnotation.fromObject(object.quantizationAnnotation[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a GraphProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.GraphProto} message GraphProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        GraphProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.node = [];\n                object.initializer = [];\n                object.input = [];\n                object.output = [];\n                object.valueInfo = [];\n                object.quantizationAnnotation = [];\n                object.sparseInitializer = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.docString = \"\";\n            }\n            if (message.node && message.node.length) {\n                object.node = [];\n                for (var j = 0; j < message.node.length; ++j)\n                    object.node[j] = $root.onnx.NodeProto.toObject(message.node[j], options);\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.initializer && message.initializer.length) {\n                object.initializer = [];\n                for (var j = 0; j < message.initializer.length; ++j)\n                    object.initializer[j] = $root.onnx.TensorProto.toObject(message.initializer[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.input && message.input.length) {\n                object.input = [];\n                for (var j = 0; j < message.input.length; ++j)\n                    object.input[j] = $root.onnx.ValueInfoProto.toObject(message.input[j], options);\n            }\n            if (message.output && message.output.length) {\n                object.output = [];\n                for (var j = 0; j < message.output.length; ++j)\n                    object.output[j] = $root.onnx.ValueInfoProto.toObject(message.output[j], options);\n            }\n            if (message.valueInfo && message.valueInfo.length) {\n                object.valueInfo = [];\n                for (var j = 0; j < message.valueInfo.length; ++j)\n                    object.valueInfo[j] = $root.onnx.ValueInfoProto.toObject(message.valueInfo[j], options);\n            }\n            if (message.quantizationAnnotation && message.quantizationAnnotation.length) {\n                object.quantizationAnnotation = [];\n                for (var j = 0; j < message.quantizationAnnotation.length; ++j)\n                    object.quantizationAnnotation[j] = $root.onnx.TensorAnnotation.toObject(message.quantizationAnnotation[j], options);\n            }\n            if (message.sparseInitializer && message.sparseInitializer.length) {\n                object.sparseInitializer = [];\n                for (var j = 0; j < message.sparseInitializer.length; ++j)\n                    object.sparseInitializer[j] = $root.onnx.SparseTensorProto.toObject(message.sparseInitializer[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this GraphProto to JSON.\n         * @function toJSON\n         * @memberof onnx.GraphProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        GraphProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for GraphProto\n         * @function getTypeUrl\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        GraphProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.GraphProto\";\n        };\n\n        return GraphProto;\n    })();\n\n    onnx.TensorProto = (function() {\n\n        /**\n         * Properties of a TensorProto.\n         * @memberof onnx\n         * @interface ITensorProto\n         * @property {Array.<number|Long>|null} [dims] TensorProto dims\n         * @property {number|null} [dataType] TensorProto dataType\n         * @property {onnx.TensorProto.ISegment|null} [segment] TensorProto segment\n         * @property {Array.<number>|null} [floatData] TensorProto floatData\n         * @property {Array.<number>|null} [int32Data] TensorProto int32Data\n         * @property {Array.<Uint8Array>|null} [stringData] TensorProto stringData\n         * @property {Array.<number|Long>|null} [int64Data] TensorProto int64Data\n         * @property {string|null} [name] TensorProto name\n         * @property {string|null} [docString] TensorProto docString\n         * @property {Uint8Array|null} [rawData] TensorProto rawData\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [externalData] TensorProto externalData\n         * @property {onnx.TensorProto.DataLocation|null} [dataLocation] TensorProto dataLocation\n         * @property {Array.<number>|null} [doubleData] TensorProto doubleData\n         * @property {Array.<number|Long>|null} [uint64Data] TensorProto uint64Data\n         */\n\n        /**\n         * Constructs a new TensorProto.\n         * @memberof onnx\n         * @classdesc Represents a TensorProto.\n         * @implements ITensorProto\n         * @constructor\n         * @param {onnx.ITensorProto=} [properties] Properties to set\n         */\n        function TensorProto(properties) {\n            this.dims = [];\n            this.floatData = [];\n            this.int32Data = [];\n            this.stringData = [];\n            this.int64Data = [];\n            this.externalData = [];\n            this.doubleData = [];\n            this.uint64Data = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorProto dims.\n         * @member {Array.<number|Long>} dims\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dims = $util.emptyArray;\n\n        /**\n         * TensorProto dataType.\n         * @member {number} dataType\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dataType = 0;\n\n        /**\n         * TensorProto segment.\n         * @member {onnx.TensorProto.ISegment|null|undefined} segment\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.segment = null;\n\n        /**\n         * TensorProto floatData.\n         * @member {Array.<number>} floatData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.floatData = $util.emptyArray;\n\n        /**\n         * TensorProto int32Data.\n         * @member {Array.<number>} int32Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.int32Data = $util.emptyArray;\n\n        /**\n         * TensorProto stringData.\n         * @member {Array.<Uint8Array>} stringData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.stringData = $util.emptyArray;\n\n        /**\n         * TensorProto int64Data.\n         * @member {Array.<number|Long>} int64Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.int64Data = $util.emptyArray;\n\n        /**\n         * TensorProto name.\n         * @member {string} name\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.name = \"\";\n\n        /**\n         * TensorProto docString.\n         * @member {string} docString\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.docString = \"\";\n\n        /**\n         * TensorProto rawData.\n         * @member {Uint8Array} rawData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.rawData = $util.newBuffer([]);\n\n        /**\n         * TensorProto externalData.\n         * @member {Array.<onnx.IStringStringEntryProto>} externalData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.externalData = $util.emptyArray;\n\n        /**\n         * TensorProto dataLocation.\n         * @member {onnx.TensorProto.DataLocation} dataLocation\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dataLocation = 0;\n\n        /**\n         * TensorProto doubleData.\n         * @member {Array.<number>} doubleData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.doubleData = $util.emptyArray;\n\n        /**\n         * TensorProto uint64Data.\n         * @member {Array.<number|Long>} uint64Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.uint64Data = $util.emptyArray;\n\n        /**\n         * Creates a new TensorProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto=} [properties] Properties to set\n         * @returns {onnx.TensorProto} TensorProto instance\n         */\n        TensorProto.create = function create(properties) {\n            return new TensorProto(properties);\n        };\n\n        /**\n         * Encodes the specified TensorProto message. Does not implicitly {@link onnx.TensorProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto} message TensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.dims != null && message.dims.length) {\n                writer.uint32(/* id 1, wireType 2 =*/10).fork();\n                for (var i = 0; i < message.dims.length; ++i)\n                    writer.int64(message.dims[i]);\n                writer.ldelim();\n            }\n            if (message.dataType != null && Object.hasOwnProperty.call(message, \"dataType\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.dataType);\n            if (message.segment != null && Object.hasOwnProperty.call(message, \"segment\"))\n                $root.onnx.TensorProto.Segment.encode(message.segment, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            if (message.floatData != null && message.floatData.length) {\n                writer.uint32(/* id 4, wireType 2 =*/34).fork();\n                for (var i = 0; i < message.floatData.length; ++i)\n                    writer.float(message.floatData[i]);\n                writer.ldelim();\n            }\n            if (message.int32Data != null && message.int32Data.length) {\n                writer.uint32(/* id 5, wireType 2 =*/42).fork();\n                for (var i = 0; i < message.int32Data.length; ++i)\n                    writer.int32(message.int32Data[i]);\n                writer.ldelim();\n            }\n            if (message.stringData != null && message.stringData.length)\n                for (var i = 0; i < message.stringData.length; ++i)\n                    writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.stringData[i]);\n            if (message.int64Data != null && message.int64Data.length) {\n                writer.uint32(/* id 7, wireType 2 =*/58).fork();\n                for (var i = 0; i < message.int64Data.length; ++i)\n                    writer.int64(message.int64Data[i]);\n                writer.ldelim();\n            }\n            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n                writer.uint32(/* id 8, wireType 2 =*/66).string(message.name);\n            if (message.rawData != null && Object.hasOwnProperty.call(message, \"rawData\"))\n                writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.rawData);\n            if (message.doubleData != null && message.doubleData.length) {\n                writer.uint32(/* id 10, wireType 2 =*/82).fork();\n                for (var i = 0; i < message.doubleData.length; ++i)\n                    writer.double(message.doubleData[i]);\n                writer.ldelim();\n            }\n            if (message.uint64Data != null && message.uint64Data.length) {\n                writer.uint32(/* id 11, wireType 2 =*/90).fork();\n                for (var i = 0; i < message.uint64Data.length; ++i)\n                    writer.uint64(message.uint64Data[i]);\n                writer.ldelim();\n            }\n            if (message.docString != null && Object.hasOwnProperty.call(message, \"docString\"))\n                writer.uint32(/* id 12, wireType 2 =*/98).string(message.docString);\n            if (message.externalData != null && message.externalData.length)\n                for (var i = 0; i < message.externalData.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.externalData[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n            if (message.dataLocation != null && Object.hasOwnProperty.call(message, \"dataLocation\"))\n                writer.uint32(/* id 14, wireType 0 =*/112).int32(message.dataLocation);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorProto message, length delimited. Does not implicitly {@link onnx.TensorProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto} message TensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorProto} TensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        if (!(message.dims && message.dims.length))\n                            message.dims = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.dims.push(reader.int64());\n                        } else\n                            message.dims.push(reader.int64());\n                        break;\n                    }\n                case 2: {\n                        message.dataType = reader.int32();\n                        break;\n                    }\n                case 3: {\n                        message.segment = $root.onnx.TensorProto.Segment.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 4: {\n                        if (!(message.floatData && message.floatData.length))\n                            message.floatData = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.floatData.push(reader.float());\n                        } else\n                            message.floatData.push(reader.float());\n                        break;\n                    }\n                case 5: {\n                        if (!(message.int32Data && message.int32Data.length))\n                            message.int32Data = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.int32Data.push(reader.int32());\n                        } else\n                            message.int32Data.push(reader.int32());\n                        break;\n                    }\n                case 6: {\n                        if (!(message.stringData && message.stringData.length))\n                            message.stringData = [];\n                        message.stringData.push(reader.bytes());\n                        break;\n                    }\n                case 7: {\n                        if (!(message.int64Data && message.int64Data.length))\n                            message.int64Data = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.int64Data.push(reader.int64());\n                        } else\n                            message.int64Data.push(reader.int64());\n                        break;\n                    }\n                case 8: {\n                        message.name = reader.string();\n                        break;\n                    }\n                case 12: {\n                        message.docString = reader.string();\n                        break;\n                    }\n                case 9: {\n                        message.rawData = reader.bytes();\n                        break;\n                    }\n                case 13: {\n                        if (!(message.externalData && message.externalData.length))\n                            message.externalData = [];\n                        message.externalData.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 14: {\n                        message.dataLocation = reader.int32();\n                        break;\n                    }\n                case 10: {\n                        if (!(message.doubleData && message.doubleData.length))\n                            message.doubleData = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.doubleData.push(reader.double());\n                        } else\n                            message.doubleData.push(reader.double());\n                        break;\n                    }\n                case 11: {\n                        if (!(message.uint64Data && message.uint64Data.length))\n                            message.uint64Data = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.uint64Data.push(reader.uint64());\n                        } else\n                            message.uint64Data.push(reader.uint64());\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorProto} TensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorProto message.\n         * @function verify\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.dims != null && message.hasOwnProperty(\"dims\")) {\n                if (!Array.isArray(message.dims))\n                    return \"dims: array expected\";\n                for (var i = 0; i < message.dims.length; ++i)\n                    if (!$util.isInteger(message.dims[i]) && !(message.dims[i] && $util.isInteger(message.dims[i].low) && $util.isInteger(message.dims[i].high)))\n                        return \"dims: integer|Long[] expected\";\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                if (!$util.isInteger(message.dataType))\n                    return \"dataType: integer expected\";\n            if (message.segment != null && message.hasOwnProperty(\"segment\")) {\n                var error = $root.onnx.TensorProto.Segment.verify(message.segment);\n                if (error)\n                    return \"segment.\" + error;\n            }\n            if (message.floatData != null && message.hasOwnProperty(\"floatData\")) {\n                if (!Array.isArray(message.floatData))\n                    return \"floatData: array expected\";\n                for (var i = 0; i < message.floatData.length; ++i)\n                    if (typeof message.floatData[i] !== \"number\")\n                        return \"floatData: number[] expected\";\n            }\n            if (message.int32Data != null && message.hasOwnProperty(\"int32Data\")) {\n                if (!Array.isArray(message.int32Data))\n                    return \"int32Data: array expected\";\n                for (var i = 0; i < message.int32Data.length; ++i)\n                    if (!$util.isInteger(message.int32Data[i]))\n                        return \"int32Data: integer[] expected\";\n            }\n            if (message.stringData != null && message.hasOwnProperty(\"stringData\")) {\n                if (!Array.isArray(message.stringData))\n                    return \"stringData: array expected\";\n                for (var i = 0; i < message.stringData.length; ++i)\n                    if (!(message.stringData[i] && typeof message.stringData[i].length === \"number\" || $util.isString(message.stringData[i])))\n                        return \"stringData: buffer[] expected\";\n            }\n            if (message.int64Data != null && message.hasOwnProperty(\"int64Data\")) {\n                if (!Array.isArray(message.int64Data))\n                    return \"int64Data: array expected\";\n                for (var i = 0; i < message.int64Data.length; ++i)\n                    if (!$util.isInteger(message.int64Data[i]) && !(message.int64Data[i] && $util.isInteger(message.int64Data[i].low) && $util.isInteger(message.int64Data[i].high)))\n                        return \"int64Data: integer|Long[] expected\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                if (!(message.rawData && typeof message.rawData.length === \"number\" || $util.isString(message.rawData)))\n                    return \"rawData: buffer expected\";\n            if (message.externalData != null && message.hasOwnProperty(\"externalData\")) {\n                if (!Array.isArray(message.externalData))\n                    return \"externalData: array expected\";\n                for (var i = 0; i < message.externalData.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.externalData[i]);\n                    if (error)\n                        return \"externalData.\" + error;\n                }\n            }\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                switch (message.dataLocation) {\n                default:\n                    return \"dataLocation: enum value expected\";\n                case 0:\n                case 1:\n                    break;\n                }\n            if (message.doubleData != null && message.hasOwnProperty(\"doubleData\")) {\n                if (!Array.isArray(message.doubleData))\n                    return \"doubleData: array expected\";\n                for (var i = 0; i < message.doubleData.length; ++i)\n                    if (typeof message.doubleData[i] !== \"number\")\n                        return \"doubleData: number[] expected\";\n            }\n            if (message.uint64Data != null && message.hasOwnProperty(\"uint64Data\")) {\n                if (!Array.isArray(message.uint64Data))\n                    return \"uint64Data: array expected\";\n                for (var i = 0; i < message.uint64Data.length; ++i)\n                    if (!$util.isInteger(message.uint64Data[i]) && !(message.uint64Data[i] && $util.isInteger(message.uint64Data[i].low) && $util.isInteger(message.uint64Data[i].high)))\n                        return \"uint64Data: integer|Long[] expected\";\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorProto} TensorProto\n         */\n        TensorProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorProto)\n                return object;\n            var message = new $root.onnx.TensorProto();\n            if (object.dims) {\n                if (!Array.isArray(object.dims))\n                    throw TypeError(\".onnx.TensorProto.dims: array expected\");\n                message.dims = [];\n                for (var i = 0; i < object.dims.length; ++i)\n                    if ($util.Long)\n                        (message.dims[i] = $util.Long.fromValue(object.dims[i])).unsigned = false;\n                    else if (typeof object.dims[i] === \"string\")\n                        message.dims[i] = parseInt(object.dims[i], 10);\n                    else if (typeof object.dims[i] === \"number\")\n                        message.dims[i] = object.dims[i];\n                    else if (typeof object.dims[i] === \"object\")\n                        message.dims[i] = new $util.LongBits(object.dims[i].low >>> 0, object.dims[i].high >>> 0).toNumber();\n            }\n            if (object.dataType != null)\n                message.dataType = object.dataType | 0;\n            if (object.segment != null) {\n                if (typeof object.segment !== \"object\")\n                    throw TypeError(\".onnx.TensorProto.segment: object expected\");\n                message.segment = $root.onnx.TensorProto.Segment.fromObject(object.segment);\n            }\n            if (object.floatData) {\n                if (!Array.isArray(object.floatData))\n                    throw TypeError(\".onnx.TensorProto.floatData: array expected\");\n                message.floatData = [];\n                for (var i = 0; i < object.floatData.length; ++i)\n                    message.floatData[i] = Number(object.floatData[i]);\n            }\n            if (object.int32Data) {\n                if (!Array.isArray(object.int32Data))\n                    throw TypeError(\".onnx.TensorProto.int32Data: array expected\");\n                message.int32Data = [];\n                for (var i = 0; i < object.int32Data.length; ++i)\n                    message.int32Data[i] = object.int32Data[i] | 0;\n            }\n            if (object.stringData) {\n                if (!Array.isArray(object.stringData))\n                    throw TypeError(\".onnx.TensorProto.stringData: array expected\");\n                message.stringData = [];\n                for (var i = 0; i < object.stringData.length; ++i)\n                    if (typeof object.stringData[i] === \"string\")\n                        $util.base64.decode(object.stringData[i], message.stringData[i] = $util.newBuffer($util.base64.length(object.stringData[i])), 0);\n                    else if (object.stringData[i].length >= 0)\n                        message.stringData[i] = object.stringData[i];\n            }\n            if (object.int64Data) {\n                if (!Array.isArray(object.int64Data))\n                    throw TypeError(\".onnx.TensorProto.int64Data: array expected\");\n                message.int64Data = [];\n                for (var i = 0; i < object.int64Data.length; ++i)\n                    if ($util.Long)\n                        (message.int64Data[i] = $util.Long.fromValue(object.int64Data[i])).unsigned = false;\n                    else if (typeof object.int64Data[i] === \"string\")\n                        message.int64Data[i] = parseInt(object.int64Data[i], 10);\n                    else if (typeof object.int64Data[i] === \"number\")\n                        message.int64Data[i] = object.int64Data[i];\n                    else if (typeof object.int64Data[i] === \"object\")\n                        message.int64Data[i] = new $util.LongBits(object.int64Data[i].low >>> 0, object.int64Data[i].high >>> 0).toNumber();\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.rawData != null)\n                if (typeof object.rawData === \"string\")\n                    $util.base64.decode(object.rawData, message.rawData = $util.newBuffer($util.base64.length(object.rawData)), 0);\n                else if (object.rawData.length >= 0)\n                    message.rawData = object.rawData;\n            if (object.externalData) {\n                if (!Array.isArray(object.externalData))\n                    throw TypeError(\".onnx.TensorProto.externalData: array expected\");\n                message.externalData = [];\n                for (var i = 0; i < object.externalData.length; ++i) {\n                    if (typeof object.externalData[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorProto.externalData: object expected\");\n                    message.externalData[i] = $root.onnx.StringStringEntryProto.fromObject(object.externalData[i]);\n                }\n            }\n            switch (object.dataLocation) {\n            default:\n                if (typeof object.dataLocation === \"number\") {\n                    message.dataLocation = object.dataLocation;\n                    break;\n                }\n                break;\n            case \"DEFAULT\":\n            case 0:\n                message.dataLocation = 0;\n                break;\n            case \"EXTERNAL\":\n            case 1:\n                message.dataLocation = 1;\n                break;\n            }\n            if (object.doubleData) {\n                if (!Array.isArray(object.doubleData))\n                    throw TypeError(\".onnx.TensorProto.doubleData: array expected\");\n                message.doubleData = [];\n                for (var i = 0; i < object.doubleData.length; ++i)\n                    message.doubleData[i] = Number(object.doubleData[i]);\n            }\n            if (object.uint64Data) {\n                if (!Array.isArray(object.uint64Data))\n                    throw TypeError(\".onnx.TensorProto.uint64Data: array expected\");\n                message.uint64Data = [];\n                for (var i = 0; i < object.uint64Data.length; ++i)\n                    if ($util.Long)\n                        (message.uint64Data[i] = $util.Long.fromValue(object.uint64Data[i])).unsigned = true;\n                    else if (typeof object.uint64Data[i] === \"string\")\n                        message.uint64Data[i] = parseInt(object.uint64Data[i], 10);\n                    else if (typeof object.uint64Data[i] === \"number\")\n                        message.uint64Data[i] = object.uint64Data[i];\n                    else if (typeof object.uint64Data[i] === \"object\")\n                        message.uint64Data[i] = new $util.LongBits(object.uint64Data[i].low >>> 0, object.uint64Data[i].high >>> 0).toNumber(true);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.TensorProto} message TensorProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.dims = [];\n                object.floatData = [];\n                object.int32Data = [];\n                object.stringData = [];\n                object.int64Data = [];\n                object.doubleData = [];\n                object.uint64Data = [];\n                object.externalData = [];\n            }\n            if (options.defaults) {\n                object.dataType = 0;\n                object.segment = null;\n                object.name = \"\";\n                if (options.bytes === String)\n                    object.rawData = \"\";\n                else {\n                    object.rawData = [];\n                    if (options.bytes !== Array)\n                        object.rawData = $util.newBuffer(object.rawData);\n                }\n                object.docString = \"\";\n                object.dataLocation = options.enums === String ? \"DEFAULT\" : 0;\n            }\n            if (message.dims && message.dims.length) {\n                object.dims = [];\n                for (var j = 0; j < message.dims.length; ++j)\n                    if (typeof message.dims[j] === \"number\")\n                        object.dims[j] = options.longs === String ? String(message.dims[j]) : message.dims[j];\n                    else\n                        object.dims[j] = options.longs === String ? $util.Long.prototype.toString.call(message.dims[j]) : options.longs === Number ? new $util.LongBits(message.dims[j].low >>> 0, message.dims[j].high >>> 0).toNumber() : message.dims[j];\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                object.dataType = message.dataType;\n            if (message.segment != null && message.hasOwnProperty(\"segment\"))\n                object.segment = $root.onnx.TensorProto.Segment.toObject(message.segment, options);\n            if (message.floatData && message.floatData.length) {\n                object.floatData = [];\n                for (var j = 0; j < message.floatData.length; ++j)\n                    object.floatData[j] = options.json && !isFinite(message.floatData[j]) ? String(message.floatData[j]) : message.floatData[j];\n            }\n            if (message.int32Data && message.int32Data.length) {\n                object.int32Data = [];\n                for (var j = 0; j < message.int32Data.length; ++j)\n                    object.int32Data[j] = message.int32Data[j];\n            }\n            if (message.stringData && message.stringData.length) {\n                object.stringData = [];\n                for (var j = 0; j < message.stringData.length; ++j)\n                    object.stringData[j] = options.bytes === String ? $util.base64.encode(message.stringData[j], 0, message.stringData[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.stringData[j]) : message.stringData[j];\n            }\n            if (message.int64Data && message.int64Data.length) {\n                object.int64Data = [];\n                for (var j = 0; j < message.int64Data.length; ++j)\n                    if (typeof message.int64Data[j] === \"number\")\n                        object.int64Data[j] = options.longs === String ? String(message.int64Data[j]) : message.int64Data[j];\n                    else\n                        object.int64Data[j] = options.longs === String ? $util.Long.prototype.toString.call(message.int64Data[j]) : options.longs === Number ? new $util.LongBits(message.int64Data[j].low >>> 0, message.int64Data[j].high >>> 0).toNumber() : message.int64Data[j];\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                object.rawData = options.bytes === String ? $util.base64.encode(message.rawData, 0, message.rawData.length) : options.bytes === Array ? Array.prototype.slice.call(message.rawData) : message.rawData;\n            if (message.doubleData && message.doubleData.length) {\n                object.doubleData = [];\n                for (var j = 0; j < message.doubleData.length; ++j)\n                    object.doubleData[j] = options.json && !isFinite(message.doubleData[j]) ? String(message.doubleData[j]) : message.doubleData[j];\n            }\n            if (message.uint64Data && message.uint64Data.length) {\n                object.uint64Data = [];\n                for (var j = 0; j < message.uint64Data.length; ++j)\n                    if (typeof message.uint64Data[j] === \"number\")\n                        object.uint64Data[j] = options.longs === String ? String(message.uint64Data[j]) : message.uint64Data[j];\n                    else\n                        object.uint64Data[j] = options.longs === String ? $util.Long.prototype.toString.call(message.uint64Data[j]) : options.longs === Number ? new $util.LongBits(message.uint64Data[j].low >>> 0, message.uint64Data[j].high >>> 0).toNumber(true) : message.uint64Data[j];\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.externalData && message.externalData.length) {\n                object.externalData = [];\n                for (var j = 0; j < message.externalData.length; ++j)\n                    object.externalData[j] = $root.onnx.StringStringEntryProto.toObject(message.externalData[j], options);\n            }\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                object.dataLocation = options.enums === String ? $root.onnx.TensorProto.DataLocation[message.dataLocation] === undefined ? message.dataLocation : $root.onnx.TensorProto.DataLocation[message.dataLocation] : message.dataLocation;\n            return object;\n        };\n\n        /**\n         * Converts this TensorProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for TensorProto\n         * @function getTypeUrl\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        TensorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.TensorProto\";\n        };\n\n        /**\n         * DataType enum.\n         * @name onnx.TensorProto.DataType\n         * @enum {number}\n         * @property {number} UNDEFINED=0 UNDEFINED value\n         * @property {number} FLOAT=1 FLOAT value\n         * @property {number} UINT8=2 UINT8 value\n         * @property {number} INT8=3 INT8 value\n         * @property {number} UINT16=4 UINT16 value\n         * @property {number} INT16=5 INT16 value\n         * @property {number} INT32=6 INT32 value\n         * @property {number} INT64=7 INT64 value\n         * @property {number} STRING=8 STRING value\n         * @property {number} BOOL=9 BOOL value\n         * @property {number} FLOAT16=10 FLOAT16 value\n         * @property {number} DOUBLE=11 DOUBLE value\n         * @property {number} UINT32=12 UINT32 value\n         * @property {number} UINT64=13 UINT64 value\n         * @property {number} COMPLEX64=14 COMPLEX64 value\n         * @property {number} COMPLEX128=15 COMPLEX128 value\n         * @property {number} BFLOAT16=16 BFLOAT16 value\n         * @property {number} FLOAT8E4M3FN=17 FLOAT8E4M3FN value\n         * @property {number} FLOAT8E4M3FNUZ=18 FLOAT8E4M3FNUZ value\n         * @property {number} FLOAT8E5M2=19 FLOAT8E5M2 value\n         * @property {number} FLOAT8E5M2FNUZ=20 FLOAT8E5M2FNUZ value\n         */\n        TensorProto.DataType = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"UNDEFINED\"] = 0;\n            values[valuesById[1] = \"FLOAT\"] = 1;\n            values[valuesById[2] = \"UINT8\"] = 2;\n            values[valuesById[3] = \"INT8\"] = 3;\n            values[valuesById[4] = \"UINT16\"] = 4;\n            values[valuesById[5] = \"INT16\"] = 5;\n            values[valuesById[6] = \"INT32\"] = 6;\n            values[valuesById[7] = \"INT64\"] = 7;\n            values[valuesById[8] = \"STRING\"] = 8;\n            values[valuesById[9] = \"BOOL\"] = 9;\n            values[valuesById[10] = \"FLOAT16\"] = 10;\n            values[valuesById[11] = \"DOUBLE\"] = 11;\n            values[valuesById[12] = \"UINT32\"] = 12;\n            values[valuesById[13] = \"UINT64\"] = 13;\n            values[valuesById[14] = \"COMPLEX64\"] = 14;\n            values[valuesById[15] = \"COMPLEX128\"] = 15;\n            values[valuesById[16] = \"BFLOAT16\"] = 16;\n            values[valuesById[17] = \"FLOAT8E4M3FN\"] = 17;\n            values[valuesById[18] = \"FLOAT8E4M3FNUZ\"] = 18;\n            values[valuesById[19] = \"FLOAT8E5M2\"] = 19;\n            values[valuesById[20] = \"FLOAT8E5M2FNUZ\"] = 20;\n            return values;\n        })();\n\n        TensorProto.Segment = (function() {\n\n            /**\n             * Properties of a Segment.\n             * @memberof onnx.TensorProto\n             * @interface ISegment\n             * @property {number|Long|null} [begin] Segment begin\n             * @property {number|Long|null} [end] Segment end\n             */\n\n            /**\n             * Constructs a new Segment.\n             * @memberof onnx.TensorProto\n             * @classdesc Represents a Segment.\n             * @implements ISegment\n             * @constructor\n             * @param {onnx.TensorProto.ISegment=} [properties] Properties to set\n             */\n            function Segment(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Segment begin.\n             * @member {number|Long} begin\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             */\n            Segment.prototype.begin = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Segment end.\n             * @member {number|Long} end\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             */\n            Segment.prototype.end = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Creates a new Segment instance using the specified properties.\n             * @function create\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment=} [properties] Properties to set\n             * @returns {onnx.TensorProto.Segment} Segment instance\n             */\n            Segment.create = function create(properties) {\n                return new Segment(properties);\n            };\n\n            /**\n             * Encodes the specified Segment message. Does not implicitly {@link onnx.TensorProto.Segment.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment} message Segment message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Segment.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.begin != null && Object.hasOwnProperty.call(message, \"begin\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.begin);\n                if (message.end != null && Object.hasOwnProperty.call(message, \"end\"))\n                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.end);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Segment message, length delimited. Does not implicitly {@link onnx.TensorProto.Segment.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment} message Segment message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Segment.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Segment message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TensorProto.Segment} Segment\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Segment.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorProto.Segment();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1: {\n                            message.begin = reader.int64();\n                            break;\n                        }\n                    case 2: {\n                            message.end = reader.int64();\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Segment message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TensorProto.Segment} Segment\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Segment.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Segment message.\n             * @function verify\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Segment.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    if (!$util.isInteger(message.begin) && !(message.begin && $util.isInteger(message.begin.low) && $util.isInteger(message.begin.high)))\n                        return \"begin: integer|Long expected\";\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    if (!$util.isInteger(message.end) && !(message.end && $util.isInteger(message.end.low) && $util.isInteger(message.end.high)))\n                        return \"end: integer|Long expected\";\n                return null;\n            };\n\n            /**\n             * Creates a Segment message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TensorProto.Segment} Segment\n             */\n            Segment.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TensorProto.Segment)\n                    return object;\n                var message = new $root.onnx.TensorProto.Segment();\n                if (object.begin != null)\n                    if ($util.Long)\n                        (message.begin = $util.Long.fromValue(object.begin)).unsigned = false;\n                    else if (typeof object.begin === \"string\")\n                        message.begin = parseInt(object.begin, 10);\n                    else if (typeof object.begin === \"number\")\n                        message.begin = object.begin;\n                    else if (typeof object.begin === \"object\")\n                        message.begin = new $util.LongBits(object.begin.low >>> 0, object.begin.high >>> 0).toNumber();\n                if (object.end != null)\n                    if ($util.Long)\n                        (message.end = $util.Long.fromValue(object.end)).unsigned = false;\n                    else if (typeof object.end === \"string\")\n                        message.end = parseInt(object.end, 10);\n                    else if (typeof object.end === \"number\")\n                        message.end = object.end;\n                    else if (typeof object.end === \"object\")\n                        message.end = new $util.LongBits(object.end.low >>> 0, object.end.high >>> 0).toNumber();\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Segment message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.Segment} message Segment\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Segment.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.begin = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.begin = options.longs === String ? \"0\" : 0;\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.end = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.end = options.longs === String ? \"0\" : 0;\n                }\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    if (typeof message.begin === \"number\")\n                        object.begin = options.longs === String ? String(message.begin) : message.begin;\n                    else\n                        object.begin = options.longs === String ? $util.Long.prototype.toString.call(message.begin) : options.longs === Number ? new $util.LongBits(message.begin.low >>> 0, message.begin.high >>> 0).toNumber() : message.begin;\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    if (typeof message.end === \"number\")\n                        object.end = options.longs === String ? String(message.end) : message.end;\n                    else\n                        object.end = options.longs === String ? $util.Long.prototype.toString.call(message.end) : options.longs === Number ? new $util.LongBits(message.end.low >>> 0, message.end.high >>> 0).toNumber() : message.end;\n                return object;\n            };\n\n            /**\n             * Converts this Segment to JSON.\n             * @function toJSON\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Segment.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for Segment\n             * @function getTypeUrl\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            Segment.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/onnx.TensorProto.Segment\";\n            };\n\n            return Segment;\n        })();\n\n        /**\n         * DataLocation enum.\n         * @name onnx.TensorProto.DataLocation\n         * @enum {number}\n         * @property {number} DEFAULT=0 DEFAULT value\n         * @property {number} EXTERNAL=1 EXTERNAL value\n         */\n        TensorProto.DataLocation = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"DEFAULT\"] = 0;\n            values[valuesById[1] = \"EXTERNAL\"] = 1;\n            return values;\n        })();\n\n        return TensorProto;\n    })();\n\n    onnx.SparseTensorProto = (function() {\n\n        /**\n         * Properties of a SparseTensorProto.\n         * @memberof onnx\n         * @interface ISparseTensorProto\n         * @property {onnx.ITensorProto|null} [values] SparseTensorProto values\n         * @property {onnx.ITensorProto|null} [indices] SparseTensorProto indices\n         * @property {Array.<number|Long>|null} [dims] SparseTensorProto dims\n         */\n\n        /**\n         * Constructs a new SparseTensorProto.\n         * @memberof onnx\n         * @classdesc Represents a SparseTensorProto.\n         * @implements ISparseTensorProto\n         * @constructor\n         * @param {onnx.ISparseTensorProto=} [properties] Properties to set\n         */\n        function SparseTensorProto(properties) {\n            this.dims = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * SparseTensorProto values.\n         * @member {onnx.ITensorProto|null|undefined} values\n         * @memberof onnx.SparseTensorProto\n         * @instance\n         */\n        SparseTensorProto.prototype.values = null;\n\n        /**\n         * SparseTensorProto indices.\n         * @member {onnx.ITensorProto|null|undefined} indices\n         * @memberof onnx.SparseTensorProto\n         * @instance\n         */\n        SparseTensorProto.prototype.indices = null;\n\n        /**\n         * SparseTensorProto dims.\n         * @member {Array.<number|Long>} dims\n         * @memberof onnx.SparseTensorProto\n         * @instance\n         */\n        SparseTensorProto.prototype.dims = $util.emptyArray;\n\n        /**\n         * Creates a new SparseTensorProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.SparseTensorProto\n         * @static\n         * @param {onnx.ISparseTensorProto=} [properties] Properties to set\n         * @returns {onnx.SparseTensorProto} SparseTensorProto instance\n         */\n        SparseTensorProto.create = function create(properties) {\n            return new SparseTensorProto(properties);\n        };\n\n        /**\n         * Encodes the specified SparseTensorProto message. Does not implicitly {@link onnx.SparseTensorProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.SparseTensorProto\n         * @static\n         * @param {onnx.ISparseTensorProto} message SparseTensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        SparseTensorProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.values != null && Object.hasOwnProperty.call(message, \"values\"))\n                $root.onnx.TensorProto.encode(message.values, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.indices != null && Object.hasOwnProperty.call(message, \"indices\"))\n                $root.onnx.TensorProto.encode(message.indices, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.dims != null && message.dims.length) {\n                writer.uint32(/* id 3, wireType 2 =*/26).fork();\n                for (var i = 0; i < message.dims.length; ++i)\n                    writer.int64(message.dims[i]);\n                writer.ldelim();\n            }\n            return writer;\n        };\n\n        /**\n         * Encodes the specified SparseTensorProto message, length delimited. Does not implicitly {@link onnx.SparseTensorProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.SparseTensorProto\n         * @static\n         * @param {onnx.ISparseTensorProto} message SparseTensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        SparseTensorProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a SparseTensorProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.SparseTensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.SparseTensorProto} SparseTensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        SparseTensorProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.SparseTensorProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.values = $root.onnx.TensorProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 2: {\n                        message.indices = $root.onnx.TensorProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 3: {\n                        if (!(message.dims && message.dims.length))\n                            message.dims = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.dims.push(reader.int64());\n                        } else\n                            message.dims.push(reader.int64());\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a SparseTensorProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.SparseTensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.SparseTensorProto} SparseTensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        SparseTensorProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a SparseTensorProto message.\n         * @function verify\n         * @memberof onnx.SparseTensorProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        SparseTensorProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.values != null && message.hasOwnProperty(\"values\")) {\n                var error = $root.onnx.TensorProto.verify(message.values);\n                if (error)\n                    return \"values.\" + error;\n            }\n            if (message.indices != null && message.hasOwnProperty(\"indices\")) {\n                var error = $root.onnx.TensorProto.verify(message.indices);\n                if (error)\n                    return \"indices.\" + error;\n            }\n            if (message.dims != null && message.hasOwnProperty(\"dims\")) {\n                if (!Array.isArray(message.dims))\n                    return \"dims: array expected\";\n                for (var i = 0; i < message.dims.length; ++i)\n                    if (!$util.isInteger(message.dims[i]) && !(message.dims[i] && $util.isInteger(message.dims[i].low) && $util.isInteger(message.dims[i].high)))\n                        return \"dims: integer|Long[] expected\";\n            }\n            return null;\n        };\n\n        /**\n         * Creates a SparseTensorProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.SparseTensorProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.SparseTensorProto} SparseTensorProto\n         */\n        SparseTensorProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.SparseTensorProto)\n                return object;\n            var message = new $root.onnx.SparseTensorProto();\n            if (object.values != null) {\n                if (typeof object.values !== \"object\")\n                    throw TypeError(\".onnx.SparseTensorProto.values: object expected\");\n                message.values = $root.onnx.TensorProto.fromObject(object.values);\n            }\n            if (object.indices != null) {\n                if (typeof object.indices !== \"object\")\n                    throw TypeError(\".onnx.SparseTensorProto.indices: object expected\");\n                message.indices = $root.onnx.TensorProto.fromObject(object.indices);\n            }\n            if (object.dims) {\n                if (!Array.isArray(object.dims))\n                    throw TypeError(\".onnx.SparseTensorProto.dims: array expected\");\n                message.dims = [];\n                for (var i = 0; i < object.dims.length; ++i)\n                    if ($util.Long)\n                        (message.dims[i] = $util.Long.fromValue(object.dims[i])).unsigned = false;\n                    else if (typeof object.dims[i] === \"string\")\n                        message.dims[i] = parseInt(object.dims[i], 10);\n                    else if (typeof object.dims[i] === \"number\")\n                        message.dims[i] = object.dims[i];\n                    else if (typeof object.dims[i] === \"object\")\n                        message.dims[i] = new $util.LongBits(object.dims[i].low >>> 0, object.dims[i].high >>> 0).toNumber();\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a SparseTensorProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.SparseTensorProto\n         * @static\n         * @param {onnx.SparseTensorProto} message SparseTensorProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        SparseTensorProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.dims = [];\n            if (options.defaults) {\n                object.values = null;\n                object.indices = null;\n            }\n            if (message.values != null && message.hasOwnProperty(\"values\"))\n                object.values = $root.onnx.TensorProto.toObject(message.values, options);\n            if (message.indices != null && message.hasOwnProperty(\"indices\"))\n                object.indices = $root.onnx.TensorProto.toObject(message.indices, options);\n            if (message.dims && message.dims.length) {\n                object.dims = [];\n                for (var j = 0; j < message.dims.length; ++j)\n                    if (typeof message.dims[j] === \"number\")\n                        object.dims[j] = options.longs === String ? String(message.dims[j]) : message.dims[j];\n                    else\n                        object.dims[j] = options.longs === String ? $util.Long.prototype.toString.call(message.dims[j]) : options.longs === Number ? new $util.LongBits(message.dims[j].low >>> 0, message.dims[j].high >>> 0).toNumber() : message.dims[j];\n            }\n            return object;\n        };\n\n        /**\n         * Converts this SparseTensorProto to JSON.\n         * @function toJSON\n         * @memberof onnx.SparseTensorProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        SparseTensorProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for SparseTensorProto\n         * @function getTypeUrl\n         * @memberof onnx.SparseTensorProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        SparseTensorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.SparseTensorProto\";\n        };\n\n        return SparseTensorProto;\n    })();\n\n    onnx.TensorShapeProto = (function() {\n\n        /**\n         * Properties of a TensorShapeProto.\n         * @memberof onnx\n         * @interface ITensorShapeProto\n         * @property {Array.<onnx.TensorShapeProto.IDimension>|null} [dim] TensorShapeProto dim\n         */\n\n        /**\n         * Constructs a new TensorShapeProto.\n         * @memberof onnx\n         * @classdesc Represents a TensorShapeProto.\n         * @implements ITensorShapeProto\n         * @constructor\n         * @param {onnx.ITensorShapeProto=} [properties] Properties to set\n         */\n        function TensorShapeProto(properties) {\n            this.dim = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorShapeProto dim.\n         * @member {Array.<onnx.TensorShapeProto.IDimension>} dim\n         * @memberof onnx.TensorShapeProto\n         * @instance\n         */\n        TensorShapeProto.prototype.dim = $util.emptyArray;\n\n        /**\n         * Creates a new TensorShapeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto=} [properties] Properties to set\n         * @returns {onnx.TensorShapeProto} TensorShapeProto instance\n         */\n        TensorShapeProto.create = function create(properties) {\n            return new TensorShapeProto(properties);\n        };\n\n        /**\n         * Encodes the specified TensorShapeProto message. Does not implicitly {@link onnx.TensorShapeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto} message TensorShapeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorShapeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.dim != null && message.dim.length)\n                for (var i = 0; i < message.dim.length; ++i)\n                    $root.onnx.TensorShapeProto.Dimension.encode(message.dim[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorShapeProto message, length delimited. Does not implicitly {@link onnx.TensorShapeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto} message TensorShapeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorShapeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorShapeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorShapeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorShapeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        if (!(message.dim && message.dim.length))\n                            message.dim = [];\n                        message.dim.push($root.onnx.TensorShapeProto.Dimension.decode(reader, reader.uint32()));\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorShapeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorShapeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorShapeProto message.\n         * @function verify\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorShapeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.dim != null && message.hasOwnProperty(\"dim\")) {\n                if (!Array.isArray(message.dim))\n                    return \"dim: array expected\";\n                for (var i = 0; i < message.dim.length; ++i) {\n                    var error = $root.onnx.TensorShapeProto.Dimension.verify(message.dim[i]);\n                    if (error)\n                        return \"dim.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorShapeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         */\n        TensorShapeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorShapeProto)\n                return object;\n            var message = new $root.onnx.TensorShapeProto();\n            if (object.dim) {\n                if (!Array.isArray(object.dim))\n                    throw TypeError(\".onnx.TensorShapeProto.dim: array expected\");\n                message.dim = [];\n                for (var i = 0; i < object.dim.length; ++i) {\n                    if (typeof object.dim[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorShapeProto.dim: object expected\");\n                    message.dim[i] = $root.onnx.TensorShapeProto.Dimension.fromObject(object.dim[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorShapeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.TensorShapeProto} message TensorShapeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorShapeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.dim = [];\n            if (message.dim && message.dim.length) {\n                object.dim = [];\n                for (var j = 0; j < message.dim.length; ++j)\n                    object.dim[j] = $root.onnx.TensorShapeProto.Dimension.toObject(message.dim[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TensorShapeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorShapeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorShapeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for TensorShapeProto\n         * @function getTypeUrl\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        TensorShapeProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.TensorShapeProto\";\n        };\n\n        TensorShapeProto.Dimension = (function() {\n\n            /**\n             * Properties of a Dimension.\n             * @memberof onnx.TensorShapeProto\n             * @interface IDimension\n             * @property {number|Long|null} [dimValue] Dimension dimValue\n             * @property {string|null} [dimParam] Dimension dimParam\n             * @property {string|null} [denotation] Dimension denotation\n             */\n\n            /**\n             * Constructs a new Dimension.\n             * @memberof onnx.TensorShapeProto\n             * @classdesc Represents a Dimension.\n             * @implements IDimension\n             * @constructor\n             * @param {onnx.TensorShapeProto.IDimension=} [properties] Properties to set\n             */\n            function Dimension(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Dimension dimValue.\n             * @member {number|Long|null|undefined} dimValue\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.dimValue = null;\n\n            /**\n             * Dimension dimParam.\n             * @member {string|null|undefined} dimParam\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.dimParam = null;\n\n            /**\n             * Dimension denotation.\n             * @member {string} denotation\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.denotation = \"\";\n\n            // OneOf field names bound to virtual getters and setters\n            var $oneOfFields;\n\n            /**\n             * Dimension value.\n             * @member {\"dimValue\"|\"dimParam\"|undefined} value\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Object.defineProperty(Dimension.prototype, \"value\", {\n                get: $util.oneOfGetter($oneOfFields = [\"dimValue\", \"dimParam\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n\n            /**\n             * Creates a new Dimension instance using the specified properties.\n             * @function create\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension=} [properties] Properties to set\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension instance\n             */\n            Dimension.create = function create(properties) {\n                return new Dimension(properties);\n            };\n\n            /**\n             * Encodes the specified Dimension message. Does not implicitly {@link onnx.TensorShapeProto.Dimension.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension} message Dimension message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Dimension.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.dimValue != null && Object.hasOwnProperty.call(message, \"dimValue\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.dimValue);\n                if (message.dimParam != null && Object.hasOwnProperty.call(message, \"dimParam\"))\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.dimParam);\n                if (message.denotation != null && Object.hasOwnProperty.call(message, \"denotation\"))\n                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.denotation);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Dimension message, length delimited. Does not implicitly {@link onnx.TensorShapeProto.Dimension.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension} message Dimension message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Dimension.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Dimension message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Dimension.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorShapeProto.Dimension();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1: {\n                            message.dimValue = reader.int64();\n                            break;\n                        }\n                    case 2: {\n                            message.dimParam = reader.string();\n                            break;\n                        }\n                    case 3: {\n                            message.denotation = reader.string();\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Dimension message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Dimension.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Dimension message.\n             * @function verify\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Dimension.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                var properties = {};\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\")) {\n                    properties.value = 1;\n                    if (!$util.isInteger(message.dimValue) && !(message.dimValue && $util.isInteger(message.dimValue.low) && $util.isInteger(message.dimValue.high)))\n                        return \"dimValue: integer|Long expected\";\n                }\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\")) {\n                    if (properties.value === 1)\n                        return \"value: multiple values\";\n                    properties.value = 1;\n                    if (!$util.isString(message.dimParam))\n                        return \"dimParam: string expected\";\n                }\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    if (!$util.isString(message.denotation))\n                        return \"denotation: string expected\";\n                return null;\n            };\n\n            /**\n             * Creates a Dimension message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             */\n            Dimension.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TensorShapeProto.Dimension)\n                    return object;\n                var message = new $root.onnx.TensorShapeProto.Dimension();\n                if (object.dimValue != null)\n                    if ($util.Long)\n                        (message.dimValue = $util.Long.fromValue(object.dimValue)).unsigned = false;\n                    else if (typeof object.dimValue === \"string\")\n                        message.dimValue = parseInt(object.dimValue, 10);\n                    else if (typeof object.dimValue === \"number\")\n                        message.dimValue = object.dimValue;\n                    else if (typeof object.dimValue === \"object\")\n                        message.dimValue = new $util.LongBits(object.dimValue.low >>> 0, object.dimValue.high >>> 0).toNumber();\n                if (object.dimParam != null)\n                    message.dimParam = String(object.dimParam);\n                if (object.denotation != null)\n                    message.denotation = String(object.denotation);\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Dimension message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.Dimension} message Dimension\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Dimension.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults)\n                    object.denotation = \"\";\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\")) {\n                    if (typeof message.dimValue === \"number\")\n                        object.dimValue = options.longs === String ? String(message.dimValue) : message.dimValue;\n                    else\n                        object.dimValue = options.longs === String ? $util.Long.prototype.toString.call(message.dimValue) : options.longs === Number ? new $util.LongBits(message.dimValue.low >>> 0, message.dimValue.high >>> 0).toNumber() : message.dimValue;\n                    if (options.oneofs)\n                        object.value = \"dimValue\";\n                }\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\")) {\n                    object.dimParam = message.dimParam;\n                    if (options.oneofs)\n                        object.value = \"dimParam\";\n                }\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    object.denotation = message.denotation;\n                return object;\n            };\n\n            /**\n             * Converts this Dimension to JSON.\n             * @function toJSON\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Dimension.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for Dimension\n             * @function getTypeUrl\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            Dimension.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/onnx.TensorShapeProto.Dimension\";\n            };\n\n            return Dimension;\n        })();\n\n        return TensorShapeProto;\n    })();\n\n    onnx.TypeProto = (function() {\n\n        /**\n         * Properties of a TypeProto.\n         * @memberof onnx\n         * @interface ITypeProto\n         * @property {onnx.TypeProto.ITensor|null} [tensorType] TypeProto tensorType\n         * @property {onnx.TypeProto.ISequence|null} [sequenceType] TypeProto sequenceType\n         * @property {onnx.TypeProto.IMap|null} [mapType] TypeProto mapType\n         * @property {onnx.TypeProto.IOptional|null} [optionalType] TypeProto optionalType\n         * @property {onnx.TypeProto.ISparseTensor|null} [sparseTensorType] TypeProto sparseTensorType\n         * @property {string|null} [denotation] TypeProto denotation\n         */\n\n        /**\n         * Constructs a new TypeProto.\n         * @memberof onnx\n         * @classdesc Represents a TypeProto.\n         * @implements ITypeProto\n         * @constructor\n         * @param {onnx.ITypeProto=} [properties] Properties to set\n         */\n        function TypeProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TypeProto tensorType.\n         * @member {onnx.TypeProto.ITensor|null|undefined} tensorType\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.tensorType = null;\n\n        /**\n         * TypeProto sequenceType.\n         * @member {onnx.TypeProto.ISequence|null|undefined} sequenceType\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.sequenceType = null;\n\n        /**\n         * TypeProto mapType.\n         * @member {onnx.TypeProto.IMap|null|undefined} mapType\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.mapType = null;\n\n        /**\n         * TypeProto optionalType.\n         * @member {onnx.TypeProto.IOptional|null|undefined} optionalType\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.optionalType = null;\n\n        /**\n         * TypeProto sparseTensorType.\n         * @member {onnx.TypeProto.ISparseTensor|null|undefined} sparseTensorType\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.sparseTensorType = null;\n\n        /**\n         * TypeProto denotation.\n         * @member {string} denotation\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.denotation = \"\";\n\n        // OneOf field names bound to virtual getters and setters\n        var $oneOfFields;\n\n        /**\n         * TypeProto value.\n         * @member {\"tensorType\"|\"sequenceType\"|\"mapType\"|\"optionalType\"|\"sparseTensorType\"|undefined} value\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        Object.defineProperty(TypeProto.prototype, \"value\", {\n            get: $util.oneOfGetter($oneOfFields = [\"tensorType\", \"sequenceType\", \"mapType\", \"optionalType\", \"sparseTensorType\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new TypeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto=} [properties] Properties to set\n         * @returns {onnx.TypeProto} TypeProto instance\n         */\n        TypeProto.create = function create(properties) {\n            return new TypeProto(properties);\n        };\n\n        /**\n         * Encodes the specified TypeProto message. Does not implicitly {@link onnx.TypeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto} message TypeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TypeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.tensorType != null && Object.hasOwnProperty.call(message, \"tensorType\"))\n                $root.onnx.TypeProto.Tensor.encode(message.tensorType, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.sequenceType != null && Object.hasOwnProperty.call(message, \"sequenceType\"))\n                $root.onnx.TypeProto.Sequence.encode(message.sequenceType, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n            if (message.mapType != null && Object.hasOwnProperty.call(message, \"mapType\"))\n                $root.onnx.TypeProto.Map.encode(message.mapType, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.denotation != null && Object.hasOwnProperty.call(message, \"denotation\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.denotation);\n            if (message.sparseTensorType != null && Object.hasOwnProperty.call(message, \"sparseTensorType\"))\n                $root.onnx.TypeProto.SparseTensor.encode(message.sparseTensorType, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\n            if (message.optionalType != null && Object.hasOwnProperty.call(message, \"optionalType\"))\n                $root.onnx.TypeProto.Optional.encode(message.optionalType, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TypeProto message, length delimited. Does not implicitly {@link onnx.TypeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto} message TypeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TypeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TypeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TypeProto} TypeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TypeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.tensorType = $root.onnx.TypeProto.Tensor.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 4: {\n                        message.sequenceType = $root.onnx.TypeProto.Sequence.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 5: {\n                        message.mapType = $root.onnx.TypeProto.Map.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 9: {\n                        message.optionalType = $root.onnx.TypeProto.Optional.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 8: {\n                        message.sparseTensorType = $root.onnx.TypeProto.SparseTensor.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 6: {\n                        message.denotation = reader.string();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TypeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TypeProto} TypeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TypeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TypeProto message.\n         * @function verify\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TypeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            var properties = {};\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\")) {\n                properties.value = 1;\n                {\n                    var error = $root.onnx.TypeProto.Tensor.verify(message.tensorType);\n                    if (error)\n                        return \"tensorType.\" + error;\n                }\n            }\n            if (message.sequenceType != null && message.hasOwnProperty(\"sequenceType\")) {\n                if (properties.value === 1)\n                    return \"value: multiple values\";\n                properties.value = 1;\n                {\n                    var error = $root.onnx.TypeProto.Sequence.verify(message.sequenceType);\n                    if (error)\n                        return \"sequenceType.\" + error;\n                }\n            }\n            if (message.mapType != null && message.hasOwnProperty(\"mapType\")) {\n                if (properties.value === 1)\n                    return \"value: multiple values\";\n                properties.value = 1;\n                {\n                    var error = $root.onnx.TypeProto.Map.verify(message.mapType);\n                    if (error)\n                        return \"mapType.\" + error;\n                }\n            }\n            if (message.optionalType != null && message.hasOwnProperty(\"optionalType\")) {\n                if (properties.value === 1)\n                    return \"value: multiple values\";\n                properties.value = 1;\n                {\n                    var error = $root.onnx.TypeProto.Optional.verify(message.optionalType);\n                    if (error)\n                        return \"optionalType.\" + error;\n                }\n            }\n            if (message.sparseTensorType != null && message.hasOwnProperty(\"sparseTensorType\")) {\n                if (properties.value === 1)\n                    return \"value: multiple values\";\n                properties.value = 1;\n                {\n                    var error = $root.onnx.TypeProto.SparseTensor.verify(message.sparseTensorType);\n                    if (error)\n                        return \"sparseTensorType.\" + error;\n                }\n            }\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                if (!$util.isString(message.denotation))\n                    return \"denotation: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a TypeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TypeProto} TypeProto\n         */\n        TypeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TypeProto)\n                return object;\n            var message = new $root.onnx.TypeProto();\n            if (object.tensorType != null) {\n                if (typeof object.tensorType !== \"object\")\n                    throw TypeError(\".onnx.TypeProto.tensorType: object expected\");\n                message.tensorType = $root.onnx.TypeProto.Tensor.fromObject(object.tensorType);\n            }\n            if (object.sequenceType != null) {\n                if (typeof object.sequenceType !== \"object\")\n                    throw TypeError(\".onnx.TypeProto.sequenceType: object expected\");\n                message.sequenceType = $root.onnx.TypeProto.Sequence.fromObject(object.sequenceType);\n            }\n            if (object.mapType != null) {\n                if (typeof object.mapType !== \"object\")\n                    throw TypeError(\".onnx.TypeProto.mapType: object expected\");\n                message.mapType = $root.onnx.TypeProto.Map.fromObject(object.mapType);\n            }\n            if (object.optionalType != null) {\n                if (typeof object.optionalType !== \"object\")\n                    throw TypeError(\".onnx.TypeProto.optionalType: object expected\");\n                message.optionalType = $root.onnx.TypeProto.Optional.fromObject(object.optionalType);\n            }\n            if (object.sparseTensorType != null) {\n                if (typeof object.sparseTensorType !== \"object\")\n                    throw TypeError(\".onnx.TypeProto.sparseTensorType: object expected\");\n                message.sparseTensorType = $root.onnx.TypeProto.SparseTensor.fromObject(object.sparseTensorType);\n            }\n            if (object.denotation != null)\n                message.denotation = String(object.denotation);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TypeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.TypeProto} message TypeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TypeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults)\n                object.denotation = \"\";\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\")) {\n                object.tensorType = $root.onnx.TypeProto.Tensor.toObject(message.tensorType, options);\n                if (options.oneofs)\n                    object.value = \"tensorType\";\n            }\n            if (message.sequenceType != null && message.hasOwnProperty(\"sequenceType\")) {\n                object.sequenceType = $root.onnx.TypeProto.Sequence.toObject(message.sequenceType, options);\n                if (options.oneofs)\n                    object.value = \"sequenceType\";\n            }\n            if (message.mapType != null && message.hasOwnProperty(\"mapType\")) {\n                object.mapType = $root.onnx.TypeProto.Map.toObject(message.mapType, options);\n                if (options.oneofs)\n                    object.value = \"mapType\";\n            }\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                object.denotation = message.denotation;\n            if (message.sparseTensorType != null && message.hasOwnProperty(\"sparseTensorType\")) {\n                object.sparseTensorType = $root.onnx.TypeProto.SparseTensor.toObject(message.sparseTensorType, options);\n                if (options.oneofs)\n                    object.value = \"sparseTensorType\";\n            }\n            if (message.optionalType != null && message.hasOwnProperty(\"optionalType\")) {\n                object.optionalType = $root.onnx.TypeProto.Optional.toObject(message.optionalType, options);\n                if (options.oneofs)\n                    object.value = \"optionalType\";\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TypeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TypeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TypeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for TypeProto\n         * @function getTypeUrl\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        TypeProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.TypeProto\";\n        };\n\n        TypeProto.Tensor = (function() {\n\n            /**\n             * Properties of a Tensor.\n             * @memberof onnx.TypeProto\n             * @interface ITensor\n             * @property {number|null} [elemType] Tensor elemType\n             * @property {onnx.ITensorShapeProto|null} [shape] Tensor shape\n             */\n\n            /**\n             * Constructs a new Tensor.\n             * @memberof onnx.TypeProto\n             * @classdesc Represents a Tensor.\n             * @implements ITensor\n             * @constructor\n             * @param {onnx.TypeProto.ITensor=} [properties] Properties to set\n             */\n            function Tensor(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Tensor elemType.\n             * @member {number} elemType\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             */\n            Tensor.prototype.elemType = 0;\n\n            /**\n             * Tensor shape.\n             * @member {onnx.ITensorShapeProto|null|undefined} shape\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             */\n            Tensor.prototype.shape = null;\n\n            /**\n             * Creates a new Tensor instance using the specified properties.\n             * @function create\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor=} [properties] Properties to set\n             * @returns {onnx.TypeProto.Tensor} Tensor instance\n             */\n            Tensor.create = function create(properties) {\n                return new Tensor(properties);\n            };\n\n            /**\n             * Encodes the specified Tensor message. Does not implicitly {@link onnx.TypeProto.Tensor.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor} message Tensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Tensor.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.elemType != null && Object.hasOwnProperty.call(message, \"elemType\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.elemType);\n                if (message.shape != null && Object.hasOwnProperty.call(message, \"shape\"))\n                    $root.onnx.TensorShapeProto.encode(message.shape, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Tensor message, length delimited. Does not implicitly {@link onnx.TypeProto.Tensor.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor} message Tensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Tensor.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Tensor message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Tensor.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto.Tensor();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1: {\n                            message.elemType = reader.int32();\n                            break;\n                        }\n                    case 2: {\n                            message.shape = $root.onnx.TensorShapeProto.decode(reader, reader.uint32());\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Tensor message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Tensor.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Tensor message.\n             * @function verify\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Tensor.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    if (!$util.isInteger(message.elemType))\n                        return \"elemType: integer expected\";\n                if (message.shape != null && message.hasOwnProperty(\"shape\")) {\n                    var error = $root.onnx.TensorShapeProto.verify(message.shape);\n                    if (error)\n                        return \"shape.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a Tensor message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             */\n            Tensor.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TypeProto.Tensor)\n                    return object;\n                var message = new $root.onnx.TypeProto.Tensor();\n                if (object.elemType != null)\n                    message.elemType = object.elemType | 0;\n                if (object.shape != null) {\n                    if (typeof object.shape !== \"object\")\n                        throw TypeError(\".onnx.TypeProto.Tensor.shape: object expected\");\n                    message.shape = $root.onnx.TensorShapeProto.fromObject(object.shape);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Tensor message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.Tensor} message Tensor\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Tensor.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    object.elemType = 0;\n                    object.shape = null;\n                }\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    object.elemType = message.elemType;\n                if (message.shape != null && message.hasOwnProperty(\"shape\"))\n                    object.shape = $root.onnx.TensorShapeProto.toObject(message.shape, options);\n                return object;\n            };\n\n            /**\n             * Converts this Tensor to JSON.\n             * @function toJSON\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Tensor.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for Tensor\n             * @function getTypeUrl\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            Tensor.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/onnx.TypeProto.Tensor\";\n            };\n\n            return Tensor;\n        })();\n\n        TypeProto.Sequence = (function() {\n\n            /**\n             * Properties of a Sequence.\n             * @memberof onnx.TypeProto\n             * @interface ISequence\n             * @property {onnx.ITypeProto|null} [elemType] Sequence elemType\n             */\n\n            /**\n             * Constructs a new Sequence.\n             * @memberof onnx.TypeProto\n             * @classdesc Represents a Sequence.\n             * @implements ISequence\n             * @constructor\n             * @param {onnx.TypeProto.ISequence=} [properties] Properties to set\n             */\n            function Sequence(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Sequence elemType.\n             * @member {onnx.ITypeProto|null|undefined} elemType\n             * @memberof onnx.TypeProto.Sequence\n             * @instance\n             */\n            Sequence.prototype.elemType = null;\n\n            /**\n             * Creates a new Sequence instance using the specified properties.\n             * @function create\n             * @memberof onnx.TypeProto.Sequence\n             * @static\n             * @param {onnx.TypeProto.ISequence=} [properties] Properties to set\n             * @returns {onnx.TypeProto.Sequence} Sequence instance\n             */\n            Sequence.create = function create(properties) {\n                return new Sequence(properties);\n            };\n\n            /**\n             * Encodes the specified Sequence message. Does not implicitly {@link onnx.TypeProto.Sequence.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TypeProto.Sequence\n             * @static\n             * @param {onnx.TypeProto.ISequence} message Sequence message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Sequence.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.elemType != null && Object.hasOwnProperty.call(message, \"elemType\"))\n                    $root.onnx.TypeProto.encode(message.elemType, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Sequence message, length delimited. Does not implicitly {@link onnx.TypeProto.Sequence.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TypeProto.Sequence\n             * @static\n             * @param {onnx.TypeProto.ISequence} message Sequence message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Sequence.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Sequence message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TypeProto.Sequence\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TypeProto.Sequence} Sequence\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Sequence.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto.Sequence();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1: {\n                            message.elemType = $root.onnx.TypeProto.decode(reader, reader.uint32());\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Sequence message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TypeProto.Sequence\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TypeProto.Sequence} Sequence\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Sequence.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Sequence message.\n             * @function verify\n             * @memberof onnx.TypeProto.Sequence\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Sequence.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\")) {\n                    var error = $root.onnx.TypeProto.verify(message.elemType);\n                    if (error)\n                        return \"elemType.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a Sequence message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TypeProto.Sequence\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TypeProto.Sequence} Sequence\n             */\n            Sequence.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TypeProto.Sequence)\n                    return object;\n                var message = new $root.onnx.TypeProto.Sequence();\n                if (object.elemType != null) {\n                    if (typeof object.elemType !== \"object\")\n                        throw TypeError(\".onnx.TypeProto.Sequence.elemType: object expected\");\n                    message.elemType = $root.onnx.TypeProto.fromObject(object.elemType);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Sequence message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TypeProto.Sequence\n             * @static\n             * @param {onnx.TypeProto.Sequence} message Sequence\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Sequence.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults)\n                    object.elemType = null;\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    object.elemType = $root.onnx.TypeProto.toObject(message.elemType, options);\n                return object;\n            };\n\n            /**\n             * Converts this Sequence to JSON.\n             * @function toJSON\n             * @memberof onnx.TypeProto.Sequence\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Sequence.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for Sequence\n             * @function getTypeUrl\n             * @memberof onnx.TypeProto.Sequence\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            Sequence.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/onnx.TypeProto.Sequence\";\n            };\n\n            return Sequence;\n        })();\n\n        TypeProto.Map = (function() {\n\n            /**\n             * Properties of a Map.\n             * @memberof onnx.TypeProto\n             * @interface IMap\n             * @property {number|null} [keyType] Map keyType\n             * @property {onnx.ITypeProto|null} [valueType] Map valueType\n             */\n\n            /**\n             * Constructs a new Map.\n             * @memberof onnx.TypeProto\n             * @classdesc Represents a Map.\n             * @implements IMap\n             * @constructor\n             * @param {onnx.TypeProto.IMap=} [properties] Properties to set\n             */\n            function Map(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Map keyType.\n             * @member {number} keyType\n             * @memberof onnx.TypeProto.Map\n             * @instance\n             */\n            Map.prototype.keyType = 0;\n\n            /**\n             * Map valueType.\n             * @member {onnx.ITypeProto|null|undefined} valueType\n             * @memberof onnx.TypeProto.Map\n             * @instance\n             */\n            Map.prototype.valueType = null;\n\n            /**\n             * Creates a new Map instance using the specified properties.\n             * @function create\n             * @memberof onnx.TypeProto.Map\n             * @static\n             * @param {onnx.TypeProto.IMap=} [properties] Properties to set\n             * @returns {onnx.TypeProto.Map} Map instance\n             */\n            Map.create = function create(properties) {\n                return new Map(properties);\n            };\n\n            /**\n             * Encodes the specified Map message. Does not implicitly {@link onnx.TypeProto.Map.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TypeProto.Map\n             * @static\n             * @param {onnx.TypeProto.IMap} message Map message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Map.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.keyType != null && Object.hasOwnProperty.call(message, \"keyType\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.keyType);\n                if (message.valueType != null && Object.hasOwnProperty.call(message, \"valueType\"))\n                    $root.onnx.TypeProto.encode(message.valueType, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Map message, length delimited. Does not implicitly {@link onnx.TypeProto.Map.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TypeProto.Map\n             * @static\n             * @param {onnx.TypeProto.IMap} message Map message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Map.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Map message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TypeProto.Map\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TypeProto.Map} Map\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Map.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto.Map();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1: {\n                            message.keyType = reader.int32();\n                            break;\n                        }\n                    case 2: {\n                            message.valueType = $root.onnx.TypeProto.decode(reader, reader.uint32());\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Map message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TypeProto.Map\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TypeProto.Map} Map\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Map.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Map message.\n             * @function verify\n             * @memberof onnx.TypeProto.Map\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Map.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.keyType != null && message.hasOwnProperty(\"keyType\"))\n                    if (!$util.isInteger(message.keyType))\n                        return \"keyType: integer expected\";\n                if (message.valueType != null && message.hasOwnProperty(\"valueType\")) {\n                    var error = $root.onnx.TypeProto.verify(message.valueType);\n                    if (error)\n                        return \"valueType.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a Map message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TypeProto.Map\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TypeProto.Map} Map\n             */\n            Map.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TypeProto.Map)\n                    return object;\n                var message = new $root.onnx.TypeProto.Map();\n                if (object.keyType != null)\n                    message.keyType = object.keyType | 0;\n                if (object.valueType != null) {\n                    if (typeof object.valueType !== \"object\")\n                        throw TypeError(\".onnx.TypeProto.Map.valueType: object expected\");\n                    message.valueType = $root.onnx.TypeProto.fromObject(object.valueType);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Map message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TypeProto.Map\n             * @static\n             * @param {onnx.TypeProto.Map} message Map\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Map.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    object.keyType = 0;\n                    object.valueType = null;\n                }\n                if (message.keyType != null && message.hasOwnProperty(\"keyType\"))\n                    object.keyType = message.keyType;\n                if (message.valueType != null && message.hasOwnProperty(\"valueType\"))\n                    object.valueType = $root.onnx.TypeProto.toObject(message.valueType, options);\n                return object;\n            };\n\n            /**\n             * Converts this Map to JSON.\n             * @function toJSON\n             * @memberof onnx.TypeProto.Map\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Map.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for Map\n             * @function getTypeUrl\n             * @memberof onnx.TypeProto.Map\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            Map.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/onnx.TypeProto.Map\";\n            };\n\n            return Map;\n        })();\n\n        TypeProto.Optional = (function() {\n\n            /**\n             * Properties of an Optional.\n             * @memberof onnx.TypeProto\n             * @interface IOptional\n             * @property {onnx.ITypeProto|null} [elemType] Optional elemType\n             */\n\n            /**\n             * Constructs a new Optional.\n             * @memberof onnx.TypeProto\n             * @classdesc Represents an Optional.\n             * @implements IOptional\n             * @constructor\n             * @param {onnx.TypeProto.IOptional=} [properties] Properties to set\n             */\n            function Optional(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Optional elemType.\n             * @member {onnx.ITypeProto|null|undefined} elemType\n             * @memberof onnx.TypeProto.Optional\n             * @instance\n             */\n            Optional.prototype.elemType = null;\n\n            /**\n             * Creates a new Optional instance using the specified properties.\n             * @function create\n             * @memberof onnx.TypeProto.Optional\n             * @static\n             * @param {onnx.TypeProto.IOptional=} [properties] Properties to set\n             * @returns {onnx.TypeProto.Optional} Optional instance\n             */\n            Optional.create = function create(properties) {\n                return new Optional(properties);\n            };\n\n            /**\n             * Encodes the specified Optional message. Does not implicitly {@link onnx.TypeProto.Optional.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TypeProto.Optional\n             * @static\n             * @param {onnx.TypeProto.IOptional} message Optional message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Optional.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.elemType != null && Object.hasOwnProperty.call(message, \"elemType\"))\n                    $root.onnx.TypeProto.encode(message.elemType, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Optional message, length delimited. Does not implicitly {@link onnx.TypeProto.Optional.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TypeProto.Optional\n             * @static\n             * @param {onnx.TypeProto.IOptional} message Optional message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Optional.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes an Optional message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TypeProto.Optional\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TypeProto.Optional} Optional\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Optional.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto.Optional();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1: {\n                            message.elemType = $root.onnx.TypeProto.decode(reader, reader.uint32());\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes an Optional message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TypeProto.Optional\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TypeProto.Optional} Optional\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Optional.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies an Optional message.\n             * @function verify\n             * @memberof onnx.TypeProto.Optional\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Optional.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\")) {\n                    var error = $root.onnx.TypeProto.verify(message.elemType);\n                    if (error)\n                        return \"elemType.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates an Optional message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TypeProto.Optional\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TypeProto.Optional} Optional\n             */\n            Optional.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TypeProto.Optional)\n                    return object;\n                var message = new $root.onnx.TypeProto.Optional();\n                if (object.elemType != null) {\n                    if (typeof object.elemType !== \"object\")\n                        throw TypeError(\".onnx.TypeProto.Optional.elemType: object expected\");\n                    message.elemType = $root.onnx.TypeProto.fromObject(object.elemType);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from an Optional message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TypeProto.Optional\n             * @static\n             * @param {onnx.TypeProto.Optional} message Optional\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Optional.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults)\n                    object.elemType = null;\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    object.elemType = $root.onnx.TypeProto.toObject(message.elemType, options);\n                return object;\n            };\n\n            /**\n             * Converts this Optional to JSON.\n             * @function toJSON\n             * @memberof onnx.TypeProto.Optional\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Optional.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for Optional\n             * @function getTypeUrl\n             * @memberof onnx.TypeProto.Optional\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            Optional.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/onnx.TypeProto.Optional\";\n            };\n\n            return Optional;\n        })();\n\n        TypeProto.SparseTensor = (function() {\n\n            /**\n             * Properties of a SparseTensor.\n             * @memberof onnx.TypeProto\n             * @interface ISparseTensor\n             * @property {number|null} [elemType] SparseTensor elemType\n             * @property {onnx.ITensorShapeProto|null} [shape] SparseTensor shape\n             */\n\n            /**\n             * Constructs a new SparseTensor.\n             * @memberof onnx.TypeProto\n             * @classdesc Represents a SparseTensor.\n             * @implements ISparseTensor\n             * @constructor\n             * @param {onnx.TypeProto.ISparseTensor=} [properties] Properties to set\n             */\n            function SparseTensor(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * SparseTensor elemType.\n             * @member {number} elemType\n             * @memberof onnx.TypeProto.SparseTensor\n             * @instance\n             */\n            SparseTensor.prototype.elemType = 0;\n\n            /**\n             * SparseTensor shape.\n             * @member {onnx.ITensorShapeProto|null|undefined} shape\n             * @memberof onnx.TypeProto.SparseTensor\n             * @instance\n             */\n            SparseTensor.prototype.shape = null;\n\n            /**\n             * Creates a new SparseTensor instance using the specified properties.\n             * @function create\n             * @memberof onnx.TypeProto.SparseTensor\n             * @static\n             * @param {onnx.TypeProto.ISparseTensor=} [properties] Properties to set\n             * @returns {onnx.TypeProto.SparseTensor} SparseTensor instance\n             */\n            SparseTensor.create = function create(properties) {\n                return new SparseTensor(properties);\n            };\n\n            /**\n             * Encodes the specified SparseTensor message. Does not implicitly {@link onnx.TypeProto.SparseTensor.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TypeProto.SparseTensor\n             * @static\n             * @param {onnx.TypeProto.ISparseTensor} message SparseTensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            SparseTensor.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.elemType != null && Object.hasOwnProperty.call(message, \"elemType\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.elemType);\n                if (message.shape != null && Object.hasOwnProperty.call(message, \"shape\"))\n                    $root.onnx.TensorShapeProto.encode(message.shape, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified SparseTensor message, length delimited. Does not implicitly {@link onnx.TypeProto.SparseTensor.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TypeProto.SparseTensor\n             * @static\n             * @param {onnx.TypeProto.ISparseTensor} message SparseTensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            SparseTensor.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a SparseTensor message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TypeProto.SparseTensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TypeProto.SparseTensor} SparseTensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            SparseTensor.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto.SparseTensor();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1: {\n                            message.elemType = reader.int32();\n                            break;\n                        }\n                    case 2: {\n                            message.shape = $root.onnx.TensorShapeProto.decode(reader, reader.uint32());\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a SparseTensor message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TypeProto.SparseTensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TypeProto.SparseTensor} SparseTensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            SparseTensor.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a SparseTensor message.\n             * @function verify\n             * @memberof onnx.TypeProto.SparseTensor\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            SparseTensor.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    if (!$util.isInteger(message.elemType))\n                        return \"elemType: integer expected\";\n                if (message.shape != null && message.hasOwnProperty(\"shape\")) {\n                    var error = $root.onnx.TensorShapeProto.verify(message.shape);\n                    if (error)\n                        return \"shape.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a SparseTensor message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TypeProto.SparseTensor\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TypeProto.SparseTensor} SparseTensor\n             */\n            SparseTensor.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TypeProto.SparseTensor)\n                    return object;\n                var message = new $root.onnx.TypeProto.SparseTensor();\n                if (object.elemType != null)\n                    message.elemType = object.elemType | 0;\n                if (object.shape != null) {\n                    if (typeof object.shape !== \"object\")\n                        throw TypeError(\".onnx.TypeProto.SparseTensor.shape: object expected\");\n                    message.shape = $root.onnx.TensorShapeProto.fromObject(object.shape);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a SparseTensor message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TypeProto.SparseTensor\n             * @static\n             * @param {onnx.TypeProto.SparseTensor} message SparseTensor\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            SparseTensor.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    object.elemType = 0;\n                    object.shape = null;\n                }\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    object.elemType = message.elemType;\n                if (message.shape != null && message.hasOwnProperty(\"shape\"))\n                    object.shape = $root.onnx.TensorShapeProto.toObject(message.shape, options);\n                return object;\n            };\n\n            /**\n             * Converts this SparseTensor to JSON.\n             * @function toJSON\n             * @memberof onnx.TypeProto.SparseTensor\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            SparseTensor.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for SparseTensor\n             * @function getTypeUrl\n             * @memberof onnx.TypeProto.SparseTensor\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            SparseTensor.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/onnx.TypeProto.SparseTensor\";\n            };\n\n            return SparseTensor;\n        })();\n\n        return TypeProto;\n    })();\n\n    onnx.OperatorSetIdProto = (function() {\n\n        /**\n         * Properties of an OperatorSetIdProto.\n         * @memberof onnx\n         * @interface IOperatorSetIdProto\n         * @property {string|null} [domain] OperatorSetIdProto domain\n         * @property {number|Long|null} [version] OperatorSetIdProto version\n         */\n\n        /**\n         * Constructs a new OperatorSetIdProto.\n         * @memberof onnx\n         * @classdesc Represents an OperatorSetIdProto.\n         * @implements IOperatorSetIdProto\n         * @constructor\n         * @param {onnx.IOperatorSetIdProto=} [properties] Properties to set\n         */\n        function OperatorSetIdProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * OperatorSetIdProto domain.\n         * @member {string} domain\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         */\n        OperatorSetIdProto.prototype.domain = \"\";\n\n        /**\n         * OperatorSetIdProto version.\n         * @member {number|Long} version\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         */\n        OperatorSetIdProto.prototype.version = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * Creates a new OperatorSetIdProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto=} [properties] Properties to set\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto instance\n         */\n        OperatorSetIdProto.create = function create(properties) {\n            return new OperatorSetIdProto(properties);\n        };\n\n        /**\n         * Encodes the specified OperatorSetIdProto message. Does not implicitly {@link onnx.OperatorSetIdProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto} message OperatorSetIdProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        OperatorSetIdProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.domain != null && Object.hasOwnProperty.call(message, \"domain\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.domain);\n            if (message.version != null && Object.hasOwnProperty.call(message, \"version\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.version);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified OperatorSetIdProto message, length delimited. Does not implicitly {@link onnx.OperatorSetIdProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto} message OperatorSetIdProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        OperatorSetIdProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an OperatorSetIdProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        OperatorSetIdProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.OperatorSetIdProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.domain = reader.string();\n                        break;\n                    }\n                case 2: {\n                        message.version = reader.int64();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an OperatorSetIdProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        OperatorSetIdProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an OperatorSetIdProto message.\n         * @function verify\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        OperatorSetIdProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (!$util.isInteger(message.version) && !(message.version && $util.isInteger(message.version.low) && $util.isInteger(message.version.high)))\n                    return \"version: integer|Long expected\";\n            return null;\n        };\n\n        /**\n         * Creates an OperatorSetIdProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         */\n        OperatorSetIdProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.OperatorSetIdProto)\n                return object;\n            var message = new $root.onnx.OperatorSetIdProto();\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.version != null)\n                if ($util.Long)\n                    (message.version = $util.Long.fromValue(object.version)).unsigned = false;\n                else if (typeof object.version === \"string\")\n                    message.version = parseInt(object.version, 10);\n                else if (typeof object.version === \"number\")\n                    message.version = object.version;\n                else if (typeof object.version === \"object\")\n                    message.version = new $util.LongBits(object.version.low >>> 0, object.version.high >>> 0).toNumber();\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an OperatorSetIdProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.OperatorSetIdProto} message OperatorSetIdProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        OperatorSetIdProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.domain = \"\";\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.version = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.version = options.longs === String ? \"0\" : 0;\n            }\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (typeof message.version === \"number\")\n                    object.version = options.longs === String ? String(message.version) : message.version;\n                else\n                    object.version = options.longs === String ? $util.Long.prototype.toString.call(message.version) : options.longs === Number ? new $util.LongBits(message.version.low >>> 0, message.version.high >>> 0).toNumber() : message.version;\n            return object;\n        };\n\n        /**\n         * Converts this OperatorSetIdProto to JSON.\n         * @function toJSON\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        OperatorSetIdProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for OperatorSetIdProto\n         * @function getTypeUrl\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        OperatorSetIdProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.OperatorSetIdProto\";\n        };\n\n        return OperatorSetIdProto;\n    })();\n\n    /**\n     * OperatorStatus enum.\n     * @name onnx.OperatorStatus\n     * @enum {number}\n     * @property {number} EXPERIMENTAL=0 EXPERIMENTAL value\n     * @property {number} STABLE=1 STABLE value\n     */\n    onnx.OperatorStatus = (function() {\n        var valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"EXPERIMENTAL\"] = 0;\n        values[valuesById[1] = \"STABLE\"] = 1;\n        return values;\n    })();\n\n    onnx.FunctionProto = (function() {\n\n        /**\n         * Properties of a FunctionProto.\n         * @memberof onnx\n         * @interface IFunctionProto\n         * @property {string|null} [name] FunctionProto name\n         * @property {Array.<string>|null} [input] FunctionProto input\n         * @property {Array.<string>|null} [output] FunctionProto output\n         * @property {Array.<string>|null} [attribute] FunctionProto attribute\n         * @property {Array.<onnx.IAttributeProto>|null} [attributeProto] FunctionProto attributeProto\n         * @property {Array.<onnx.INodeProto>|null} [node] FunctionProto node\n         * @property {string|null} [docString] FunctionProto docString\n         * @property {Array.<onnx.IOperatorSetIdProto>|null} [opsetImport] FunctionProto opsetImport\n         * @property {string|null} [domain] FunctionProto domain\n         */\n\n        /**\n         * Constructs a new FunctionProto.\n         * @memberof onnx\n         * @classdesc Represents a FunctionProto.\n         * @implements IFunctionProto\n         * @constructor\n         * @param {onnx.IFunctionProto=} [properties] Properties to set\n         */\n        function FunctionProto(properties) {\n            this.input = [];\n            this.output = [];\n            this.attribute = [];\n            this.attributeProto = [];\n            this.node = [];\n            this.opsetImport = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * FunctionProto name.\n         * @member {string} name\n         * @memberof onnx.FunctionProto\n         * @instance\n         */\n        FunctionProto.prototype.name = \"\";\n\n        /**\n         * FunctionProto input.\n         * @member {Array.<string>} input\n         * @memberof onnx.FunctionProto\n         * @instance\n         */\n        FunctionProto.prototype.input = $util.emptyArray;\n\n        /**\n         * FunctionProto output.\n         * @member {Array.<string>} output\n         * @memberof onnx.FunctionProto\n         * @instance\n         */\n        FunctionProto.prototype.output = $util.emptyArray;\n\n        /**\n         * FunctionProto attribute.\n         * @member {Array.<string>} attribute\n         * @memberof onnx.FunctionProto\n         * @instance\n         */\n        FunctionProto.prototype.attribute = $util.emptyArray;\n\n        /**\n         * FunctionProto attributeProto.\n         * @member {Array.<onnx.IAttributeProto>} attributeProto\n         * @memberof onnx.FunctionProto\n         * @instance\n         */\n        FunctionProto.prototype.attributeProto = $util.emptyArray;\n\n        /**\n         * FunctionProto node.\n         * @member {Array.<onnx.INodeProto>} node\n         * @memberof onnx.FunctionProto\n         * @instance\n         */\n        FunctionProto.prototype.node = $util.emptyArray;\n\n        /**\n         * FunctionProto docString.\n         * @member {string} docString\n         * @memberof onnx.FunctionProto\n         * @instance\n         */\n        FunctionProto.prototype.docString = \"\";\n\n        /**\n         * FunctionProto opsetImport.\n         * @member {Array.<onnx.IOperatorSetIdProto>} opsetImport\n         * @memberof onnx.FunctionProto\n         * @instance\n         */\n        FunctionProto.prototype.opsetImport = $util.emptyArray;\n\n        /**\n         * FunctionProto domain.\n         * @member {string} domain\n         * @memberof onnx.FunctionProto\n         * @instance\n         */\n        FunctionProto.prototype.domain = \"\";\n\n        /**\n         * Creates a new FunctionProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.FunctionProto\n         * @static\n         * @param {onnx.IFunctionProto=} [properties] Properties to set\n         * @returns {onnx.FunctionProto} FunctionProto instance\n         */\n        FunctionProto.create = function create(properties) {\n            return new FunctionProto(properties);\n        };\n\n        /**\n         * Encodes the specified FunctionProto message. Does not implicitly {@link onnx.FunctionProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.FunctionProto\n         * @static\n         * @param {onnx.IFunctionProto} message FunctionProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        FunctionProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.input != null && message.input.length)\n                for (var i = 0; i < message.input.length; ++i)\n                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.input[i]);\n            if (message.output != null && message.output.length)\n                for (var i = 0; i < message.output.length; ++i)\n                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.output[i]);\n            if (message.attribute != null && message.attribute.length)\n                for (var i = 0; i < message.attribute.length; ++i)\n                    writer.uint32(/* id 6, wireType 2 =*/50).string(message.attribute[i]);\n            if (message.node != null && message.node.length)\n                for (var i = 0; i < message.node.length; ++i)\n                    $root.onnx.NodeProto.encode(message.node[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n            if (message.docString != null && Object.hasOwnProperty.call(message, \"docString\"))\n                writer.uint32(/* id 8, wireType 2 =*/66).string(message.docString);\n            if (message.opsetImport != null && message.opsetImport.length)\n                for (var i = 0; i < message.opsetImport.length; ++i)\n                    $root.onnx.OperatorSetIdProto.encode(message.opsetImport[i], writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();\n            if (message.domain != null && Object.hasOwnProperty.call(message, \"domain\"))\n                writer.uint32(/* id 10, wireType 2 =*/82).string(message.domain);\n            if (message.attributeProto != null && message.attributeProto.length)\n                for (var i = 0; i < message.attributeProto.length; ++i)\n                    $root.onnx.AttributeProto.encode(message.attributeProto[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified FunctionProto message, length delimited. Does not implicitly {@link onnx.FunctionProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.FunctionProto\n         * @static\n         * @param {onnx.IFunctionProto} message FunctionProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        FunctionProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a FunctionProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.FunctionProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.FunctionProto} FunctionProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        FunctionProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.FunctionProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.name = reader.string();\n                        break;\n                    }\n                case 4: {\n                        if (!(message.input && message.input.length))\n                            message.input = [];\n                        message.input.push(reader.string());\n                        break;\n                    }\n                case 5: {\n                        if (!(message.output && message.output.length))\n                            message.output = [];\n                        message.output.push(reader.string());\n                        break;\n                    }\n                case 6: {\n                        if (!(message.attribute && message.attribute.length))\n                            message.attribute = [];\n                        message.attribute.push(reader.string());\n                        break;\n                    }\n                case 11: {\n                        if (!(message.attributeProto && message.attributeProto.length))\n                            message.attributeProto = [];\n                        message.attributeProto.push($root.onnx.AttributeProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 7: {\n                        if (!(message.node && message.node.length))\n                            message.node = [];\n                        message.node.push($root.onnx.NodeProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 8: {\n                        message.docString = reader.string();\n                        break;\n                    }\n                case 9: {\n                        if (!(message.opsetImport && message.opsetImport.length))\n                            message.opsetImport = [];\n                        message.opsetImport.push($root.onnx.OperatorSetIdProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 10: {\n                        message.domain = reader.string();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a FunctionProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.FunctionProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.FunctionProto} FunctionProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        FunctionProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a FunctionProto message.\n         * @function verify\n         * @memberof onnx.FunctionProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        FunctionProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.input != null && message.hasOwnProperty(\"input\")) {\n                if (!Array.isArray(message.input))\n                    return \"input: array expected\";\n                for (var i = 0; i < message.input.length; ++i)\n                    if (!$util.isString(message.input[i]))\n                        return \"input: string[] expected\";\n            }\n            if (message.output != null && message.hasOwnProperty(\"output\")) {\n                if (!Array.isArray(message.output))\n                    return \"output: array expected\";\n                for (var i = 0; i < message.output.length; ++i)\n                    if (!$util.isString(message.output[i]))\n                        return \"output: string[] expected\";\n            }\n            if (message.attribute != null && message.hasOwnProperty(\"attribute\")) {\n                if (!Array.isArray(message.attribute))\n                    return \"attribute: array expected\";\n                for (var i = 0; i < message.attribute.length; ++i)\n                    if (!$util.isString(message.attribute[i]))\n                        return \"attribute: string[] expected\";\n            }\n            if (message.attributeProto != null && message.hasOwnProperty(\"attributeProto\")) {\n                if (!Array.isArray(message.attributeProto))\n                    return \"attributeProto: array expected\";\n                for (var i = 0; i < message.attributeProto.length; ++i) {\n                    var error = $root.onnx.AttributeProto.verify(message.attributeProto[i]);\n                    if (error)\n                        return \"attributeProto.\" + error;\n                }\n            }\n            if (message.node != null && message.hasOwnProperty(\"node\")) {\n                if (!Array.isArray(message.node))\n                    return \"node: array expected\";\n                for (var i = 0; i < message.node.length; ++i) {\n                    var error = $root.onnx.NodeProto.verify(message.node[i]);\n                    if (error)\n                        return \"node.\" + error;\n                }\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.opsetImport != null && message.hasOwnProperty(\"opsetImport\")) {\n                if (!Array.isArray(message.opsetImport))\n                    return \"opsetImport: array expected\";\n                for (var i = 0; i < message.opsetImport.length; ++i) {\n                    var error = $root.onnx.OperatorSetIdProto.verify(message.opsetImport[i]);\n                    if (error)\n                        return \"opsetImport.\" + error;\n                }\n            }\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a FunctionProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.FunctionProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.FunctionProto} FunctionProto\n         */\n        FunctionProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.FunctionProto)\n                return object;\n            var message = new $root.onnx.FunctionProto();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.input) {\n                if (!Array.isArray(object.input))\n                    throw TypeError(\".onnx.FunctionProto.input: array expected\");\n                message.input = [];\n                for (var i = 0; i < object.input.length; ++i)\n                    message.input[i] = String(object.input[i]);\n            }\n            if (object.output) {\n                if (!Array.isArray(object.output))\n                    throw TypeError(\".onnx.FunctionProto.output: array expected\");\n                message.output = [];\n                for (var i = 0; i < object.output.length; ++i)\n                    message.output[i] = String(object.output[i]);\n            }\n            if (object.attribute) {\n                if (!Array.isArray(object.attribute))\n                    throw TypeError(\".onnx.FunctionProto.attribute: array expected\");\n                message.attribute = [];\n                for (var i = 0; i < object.attribute.length; ++i)\n                    message.attribute[i] = String(object.attribute[i]);\n            }\n            if (object.attributeProto) {\n                if (!Array.isArray(object.attributeProto))\n                    throw TypeError(\".onnx.FunctionProto.attributeProto: array expected\");\n                message.attributeProto = [];\n                for (var i = 0; i < object.attributeProto.length; ++i) {\n                    if (typeof object.attributeProto[i] !== \"object\")\n                        throw TypeError(\".onnx.FunctionProto.attributeProto: object expected\");\n                    message.attributeProto[i] = $root.onnx.AttributeProto.fromObject(object.attributeProto[i]);\n                }\n            }\n            if (object.node) {\n                if (!Array.isArray(object.node))\n                    throw TypeError(\".onnx.FunctionProto.node: array expected\");\n                message.node = [];\n                for (var i = 0; i < object.node.length; ++i) {\n                    if (typeof object.node[i] !== \"object\")\n                        throw TypeError(\".onnx.FunctionProto.node: object expected\");\n                    message.node[i] = $root.onnx.NodeProto.fromObject(object.node[i]);\n                }\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.opsetImport) {\n                if (!Array.isArray(object.opsetImport))\n                    throw TypeError(\".onnx.FunctionProto.opsetImport: array expected\");\n                message.opsetImport = [];\n                for (var i = 0; i < object.opsetImport.length; ++i) {\n                    if (typeof object.opsetImport[i] !== \"object\")\n                        throw TypeError(\".onnx.FunctionProto.opsetImport: object expected\");\n                    message.opsetImport[i] = $root.onnx.OperatorSetIdProto.fromObject(object.opsetImport[i]);\n                }\n            }\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a FunctionProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.FunctionProto\n         * @static\n         * @param {onnx.FunctionProto} message FunctionProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        FunctionProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.input = [];\n                object.output = [];\n                object.attribute = [];\n                object.node = [];\n                object.opsetImport = [];\n                object.attributeProto = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.docString = \"\";\n                object.domain = \"\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.input && message.input.length) {\n                object.input = [];\n                for (var j = 0; j < message.input.length; ++j)\n                    object.input[j] = message.input[j];\n            }\n            if (message.output && message.output.length) {\n                object.output = [];\n                for (var j = 0; j < message.output.length; ++j)\n                    object.output[j] = message.output[j];\n            }\n            if (message.attribute && message.attribute.length) {\n                object.attribute = [];\n                for (var j = 0; j < message.attribute.length; ++j)\n                    object.attribute[j] = message.attribute[j];\n            }\n            if (message.node && message.node.length) {\n                object.node = [];\n                for (var j = 0; j < message.node.length; ++j)\n                    object.node[j] = $root.onnx.NodeProto.toObject(message.node[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.opsetImport && message.opsetImport.length) {\n                object.opsetImport = [];\n                for (var j = 0; j < message.opsetImport.length; ++j)\n                    object.opsetImport[j] = $root.onnx.OperatorSetIdProto.toObject(message.opsetImport[j], options);\n            }\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            if (message.attributeProto && message.attributeProto.length) {\n                object.attributeProto = [];\n                for (var j = 0; j < message.attributeProto.length; ++j)\n                    object.attributeProto[j] = $root.onnx.AttributeProto.toObject(message.attributeProto[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this FunctionProto to JSON.\n         * @function toJSON\n         * @memberof onnx.FunctionProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        FunctionProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for FunctionProto\n         * @function getTypeUrl\n         * @memberof onnx.FunctionProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        FunctionProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.FunctionProto\";\n        };\n\n        return FunctionProto;\n    })();\n\n    return onnx;\n})();\n\nmodule.exports = $root;\n","var _scriptDir,e=(_scriptDir=\"undefined\"!=typeof document&&document.currentScript?document.currentScript.src:void 0,\"undefined\"!=typeof __filename&&(_scriptDir=_scriptDir||__filename),function(e={}){function t(){return D.buffer!=k.buffer&&B(),k}function r(){return D.buffer!=k.buffer&&B(),I}function n(){return D.buffer!=k.buffer&&B(),Y}function a(){return D.buffer!=k.buffer&&B(),P}function i(){return D.buffer!=k.buffer&&B(),U}var o,u,s=e;s.ready=new Promise(((e,t)=>{o=e,u=t}));var f,c,l,d=Object.assign({},s),h=\"./this.program\",p=(e,t)=>{throw t},m=\"object\"==typeof window,g=\"function\"==typeof importScripts,b=\"object\"==typeof process&&\"object\"==typeof process.versions&&\"string\"==typeof process.versions.node,_=s.ENVIRONMENT_IS_PTHREAD||!1,v=\"\";function y(e){return s.locateFile?s.locateFile(e,v):v+e}if(b){var O=require(\"fs\"),w=require(\"path\");let e;v=g?w.dirname(v)+\"/\":__dirname+\"/\",f=(e,t)=>(e=e.startsWith(\"file://\")?new URL(e):w.normalize(e),O.readFileSync(e,t?void 0:\"utf8\")),l=e=>((e=f(e,!0)).buffer||(e=new Uint8Array(e)),e),c=(e,t,r,n=!0)=>{e=e.startsWith(\"file://\")?new URL(e):w.normalize(e),O.readFile(e,n?void 0:\"utf8\",((e,a)=>{e?r(e):t(n?a.buffer:a)}))},!s.thisProgram&&1<process.argv.length&&(h=process.argv[1].replace(/\\\\/g,\"/\")),process.argv.slice(2),p=(e,t)=>{throw process.exitCode=e,t},s.inspect=()=>\"[Emscripten Module object]\";try{e=require(\"worker_threads\")}catch(e){throw console.error('The \"worker_threads\" module is not supported in this node.js build - perhaps a newer version is needed?'),e}global.Worker=e.Worker}else(m||g)&&(g?v=self.location.href:\"undefined\"!=typeof document&&document.currentScript&&(v=document.currentScript.src),_scriptDir&&(v=_scriptDir),v=0!==v.indexOf(\"blob:\")?v.substr(0,v.replace(/[?#].*/,\"\").lastIndexOf(\"/\")+1):\"\",b||(f=e=>{var t=new XMLHttpRequest;return t.open(\"GET\",e,!1),t.send(null),t.responseText},g&&(l=e=>{var t=new XMLHttpRequest;return t.open(\"GET\",e,!1),t.responseType=\"arraybuffer\",t.send(null),new Uint8Array(t.response)}),c=(e,t,r)=>{var n=new XMLHttpRequest;n.open(\"GET\",e,!0),n.responseType=\"arraybuffer\",n.onload=()=>{200==n.status||0==n.status&&n.response?t(n.response):r()},n.onerror=r,n.send(null)}));b&&\"undefined\"==typeof performance&&(global.performance=require(\"perf_hooks\").performance);var M=console.log.bind(console),T=console.error.bind(console);b&&(M=(...e)=>O.writeSync(1,e.join(\" \")+\"\\n\"),T=(...e)=>O.writeSync(2,e.join(\" \")+\"\\n\"));var S,A=s.print||M,R=s.printErr||T;Object.assign(s,d),d=null,s.thisProgram&&(h=s.thisProgram),s.quit&&(p=s.quit),s.wasmBinary&&(S=s.wasmBinary);var E=s.noExitRuntime||!0;\"object\"!=typeof WebAssembly&&ee(\"no native wasm support detected\");var D,C,F,x,k,I,Y,P,U,W=!1;function B(){var e=D.buffer;s.HEAP8=k=new Int8Array(e),s.HEAP16=new Int16Array(e),s.HEAP32=Y=new Int32Array(e),s.HEAPU8=I=new Uint8Array(e),s.HEAPU16=new Uint16Array(e),s.HEAPU32=P=new Uint32Array(e),s.HEAPF32=new Float32Array(e),s.HEAPF64=U=new Float64Array(e)}var H=s.INITIAL_MEMORY||16777216;if(5242880<=H||ee(\"INITIAL_MEMORY should be larger than STACK_SIZE, was \"+H+\"! (STACK_SIZE=5242880)\"),_)D=s.wasmMemory;else if(s.wasmMemory)D=s.wasmMemory;else if(!((D=new WebAssembly.Memory({initial:H/65536,maximum:65536,shared:!0})).buffer instanceof SharedArrayBuffer))throw R(\"requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag\"),b&&R(\"(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and/or recent version)\"),Error(\"bad memory\");B(),H=D.buffer.byteLength;var N,L=[],j=[],G=[],z=0;function q(){return E||0<z}var Q,V,X=0,Z=null,$=null;function J(){X++,s.monitorRunDependencies&&s.monitorRunDependencies(X)}function K(){if(X--,s.monitorRunDependencies&&s.monitorRunDependencies(X),0==X&&(null!==Z&&(clearInterval(Z),Z=null),$)){var e=$;$=null,e()}}function ee(e){throw s.onAbort&&s.onAbort(e),R(e=\"Aborted(\"+e+\")\"),W=!0,x=1,e=new WebAssembly.RuntimeError(e+\". Build with -sASSERTIONS for more info.\"),u(e),e}function te(e){return e.startsWith(\"data:application/octet-stream;base64,\")}function re(e){if(e==Q&&S)return new Uint8Array(S);if(l)return l(e);throw\"both async and sync fetching of the wasm failed\"}function ne(e,t,r){return function(e){if(!S&&(m||g)){if(\"function\"==typeof fetch&&!e.startsWith(\"file://\"))return fetch(e,{credentials:\"same-origin\"}).then((t=>{if(!t.ok)throw\"failed to load wasm binary file at '\"+e+\"'\";return t.arrayBuffer()})).catch((()=>re(e)));if(c)return new Promise(((t,r)=>{c(e,(e=>t(new Uint8Array(e))),r)}))}return Promise.resolve().then((()=>re(e)))}(e).then((e=>WebAssembly.instantiate(e,t))).then((e=>e)).then(r,(e=>{R(\"failed to asynchronously prepare wasm: \"+e),ee(e)}))}function ae(e){this.name=\"ExitStatus\",this.message=`Program terminated with exit(${e})`,this.status=e}function ie(e){e.terminate(),e.onmessage=()=>{}}function oe(e){(e=he.La[e])||ee(),he.lb(e)}function ue(e){var t=he.fb();if(!t)return 6;he.Oa.push(t),he.La[e.Na]=t,t.Na=e.Na;var r={cmd:\"run\",start_routine:e.mb,arg:e.eb,pthread_ptr:e.Na};return b&&t.unref(),t.postMessage(r,e.sb),0}te(Q=\"ort-wasm-threaded.wasm\")||(Q=y(Q));var se=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf8\"):void 0,fe=(e,t,r)=>{var n=(t>>>=0)+r;for(r=t;e[r]&&!(r>=n);)++r;if(16<r-t&&e.buffer&&se)return se.decode(e.buffer instanceof SharedArrayBuffer?e.slice(t,r):e.subarray(t,r));for(n=\"\";t<r;){var a=e[t++];if(128&a){var i=63&e[t++];if(192==(224&a))n+=String.fromCharCode((31&a)<<6|i);else{var o=63&e[t++];65536>(a=224==(240&a)?(15&a)<<12|i<<6|o:(7&a)<<18|i<<12|o<<6|63&e[t++])?n+=String.fromCharCode(a):(a-=65536,n+=String.fromCharCode(55296|a>>10,56320|1023&a))}}else n+=String.fromCharCode(a)}return n},ce=(e,t)=>(e>>>=0)?fe(r(),e,t):\"\";function le(e){if(_)return qe(1,1,e);x=e,q()||(he.nb(),s.onExit&&s.onExit(e),W=!0),p(e,new ae(e))}var de=e=>{if(x=e,_)throw me(e),\"unwind\";le(e)},he={Ra:[],Oa:[],Za:[],La:{},Va:function(){_?he.hb():he.gb()},gb:function(){L.unshift((()=>{J(),he.ib((()=>K()))}))},hb:function(){he.receiveObjectTransfer=he.kb,he.threadInitTLS=he.Ya,he.setExitStatus=he.Xa,E=!1},Xa:function(e){x=e},xb:[\"$terminateWorker\"],nb:function(){for(var e of he.Oa)ie(e);for(e of he.Ra)ie(e);he.Ra=[],he.Oa=[],he.La=[]},lb:function(e){var t=e.Na;delete he.La[t],he.Ra.push(e),he.Oa.splice(he.Oa.indexOf(e),1),e.Na=0,mt(t)},kb:function(){},Ya:function(){he.Za.forEach((e=>e()))},jb:e=>new Promise((t=>{e.onmessage=r=>{var n=(r=r.data).cmd;if(r.targetThread&&r.targetThread!=ct()){var a=he.La[r.wb];a?a.postMessage(r,r.transferList):R('Internal error! Worker sent a message \"'+n+'\" to target pthread '+r.targetThread+\", but that thread no longer exists!\")}else\"checkMailbox\"===n?We():\"spawnThread\"===n?ue(r):\"cleanupThread\"===n?oe(r.thread):\"killThread\"===n?(r=r.thread,n=he.La[r],delete he.La[r],ie(n),mt(r),he.Oa.splice(he.Oa.indexOf(n),1),n.Na=0):\"cancelThread\"===n?he.La[r.thread].postMessage({cmd:\"cancel\"}):\"loaded\"===n?(e.loaded=!0,t(e)):\"alert\"===n?alert(\"Thread \"+r.threadId+\": \"+r.text):\"setimmediate\"===r.target?e.postMessage(r):\"callHandler\"===n?s[r.handler](...r.args):n&&R(\"worker sent an unknown command \"+n)},e.onerror=e=>{throw R(\"worker sent an error! \"+e.filename+\":\"+e.lineno+\": \"+e.message),e},b&&(e.on(\"message\",(function(t){e.onmessage({data:t})})),e.on(\"error\",(function(t){e.onerror(t)})));var r,n=[];for(r of[\"onExit\",\"onAbort\",\"print\",\"printErr\"])s.hasOwnProperty(r)&&n.push(r);e.postMessage({cmd:\"load\",handlers:n,urlOrBlob:s.mainScriptUrlOrBlob||_scriptDir,wasmMemory:D,wasmModule:F})})),ib:function(e){e()},cb:function(){var e=y(\"ort-wasm-threaded.worker.js\");e=new Worker(e),he.Ra.push(e)},fb:function(){return 0==he.Ra.length&&(he.cb(),he.jb(he.Ra[0])),he.Ra.pop()}};s.PThread=he;var pe=e=>{for(;0<e.length;)e.shift()(s)};function me(e){if(_)return qe(2,0,e);de(e)}s.establishStackSpace=function(){var e=ct(),t=n()[e+52>>2>>>0];e=n()[e+56>>2>>>0],vt(t,t-e),Ot(t)};var ge=[];function be(e){this.Ua=e-24,this.bb=function(e){a()[this.Ua+4>>2>>>0]=e},this.ab=function(e){a()[this.Ua+8>>2>>>0]=e},this.Va=function(e,t){this.$a(),this.bb(e),this.ab(t)},this.$a=function(){a()[this.Ua+16>>2>>>0]=0}}function _e(e,t,r,n){return _?qe(3,1,e,t,r,n):ve(e,t,r,n)}function ve(e,t,r,n){if(e>>>=0,t>>>=0,r>>>=0,n>>>=0,\"undefined\"==typeof SharedArrayBuffer)return R(\"Current environment does not support SharedArrayBuffer, pthreads are not available!\"),6;var a=[];return _&&0===a.length?_e(e,t,r,n):(e={mb:r,Na:e,eb:n,sb:a},_?(e.ub=\"spawnThread\",postMessage(e,a),0):ue(e))}function ye(e,t,r){return _?qe(4,1,e,t,r):0}function Oe(e,t){if(_)return qe(5,1,e,t)}s.invokeEntryPoint=function(e,t){var r=ge[e];r||(e>=ge.length&&(ge.length=e+1),ge[e]=r=N.get(e)),e=r(t),q()?he.Xa(e):gt(e)};var we=e=>{for(var t=0,r=0;r<e.length;++r){var n=e.charCodeAt(r);127>=n?t++:2047>=n?t+=2:55296<=n&&57343>=n?(t+=4,++r):t+=3}return t},Me=(e,t,r,n)=>{if(!(0<n))return 0;var a=r>>>=0;n=r+n-1;for(var i=0;i<e.length;++i){var o=e.charCodeAt(i);if(55296<=o&&57343>=o&&(o=65536+((1023&o)<<10)|1023&e.charCodeAt(++i)),127>=o){if(r>=n)break;t[r++>>>0]=o}else{if(2047>=o){if(r+1>=n)break;t[r++>>>0]=192|o>>6}else{if(65535>=o){if(r+2>=n)break;t[r++>>>0]=224|o>>12}else{if(r+3>=n)break;t[r++>>>0]=240|o>>18,t[r++>>>0]=128|o>>12&63}t[r++>>>0]=128|o>>6&63}t[r++>>>0]=128|63&o}}return t[r>>>0]=0,r-a},Te=(e,t,n)=>Me(e,r(),t,n);function Se(e,t){if(_)return qe(6,1,e,t)}function Ae(e,t,r){if(_)return qe(7,1,e,t,r)}function Re(e,t,r){return _?qe(8,1,e,t,r):0}function Ee(e,t){if(_)return qe(9,1,e,t)}function De(e,t,r){if(_)return qe(10,1,e,t,r)}function Ce(e,t,r,n){if(_)return qe(11,1,e,t,r,n)}function Fe(e,t,r,n){if(_)return qe(12,1,e,t,r,n)}function xe(e,t,r,n){if(_)return qe(13,1,e,t,r,n)}function ke(e){if(_)return qe(14,1,e)}function Ie(e,t){if(_)return qe(15,1,e,t)}function Ye(e,t,r){if(_)return qe(16,1,e,t,r)}var Pe=e=>{if(!W)try{if(e(),!q())try{_?gt(x):de(x)}catch(e){e instanceof ae||\"unwind\"==e||p(1,e)}}catch(e){e instanceof ae||\"unwind\"==e||p(1,e)}};function Ue(e){e>>>=0,\"function\"==typeof Atomics.tb&&(Atomics.tb(n(),e>>2,e).value.then(We),e+=128,Atomics.store(n(),e>>2,1))}function We(){var e=ct();e&&(Ue(e),Pe((()=>bt())))}s.__emscripten_thread_mailbox_await=Ue,s.checkMailbox=We;var Be=e=>0==e%4&&(0!=e%100||0==e%400),He=[0,31,60,91,121,152,182,213,244,274,305,335],Ne=[0,31,59,90,120,151,181,212,243,273,304,334];function Le(e,t,r,n,a,i,o,u){return _?qe(17,1,e,t,r,n,a,i,o,u):-52}function je(e,t,r,n,a,i,o){if(_)return qe(18,1,e,t,r,n,a,i,o)}var Ge=e=>{var t=we(e)+1,r=lt(t);return r&&Te(e,r,t),r},ze=e=>{var t=yt();return e=e(),Ot(t),e};function qe(e,t){var r=arguments.length-2,n=arguments;return ze((()=>{for(var a=wt(8*r),o=a>>3,u=0;u<r;u++){var s=n[2+u];i()[o+u>>>0]=s}return pt(e,r,a,t)}))}var Qe,Ve=[],Xe={},Ze=()=>{if(!Qe){var e,t={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:h||\"./this.program\"};for(e in Xe)void 0===Xe[e]?delete t[e]:t[e]=Xe[e];var r=[];for(e in t)r.push(`${e}=${t[e]}`);Qe=r}return Qe};function $e(e,r){if(_)return qe(19,1,e,r);e>>>=0,r>>>=0;var n=0;return Ze().forEach((function(i,o){var u=r+n;for(o=a()[e+4*o>>2>>>0]=u,u=0;u<i.length;++u)t()[o++>>0>>>0]=i.charCodeAt(u);t()[o>>0>>>0]=0,n+=i.length+1})),0}function Je(e,t){if(_)return qe(20,1,e,t);e>>>=0,t>>>=0;var r=Ze();a()[e>>2>>>0]=r.length;var n=0;return r.forEach((function(e){n+=e.length+1})),a()[t>>2>>>0]=n,0}function Ke(e){return _?qe(21,1,e):52}function et(e,t,r,n){return _?qe(22,1,e,t,r,n):52}function tt(e,t,r,n,a){return _?qe(23,1,e,t,r,n,a):70}var rt=[null,[],[]];function nt(e,t,n,i){if(_)return qe(24,1,e,t,n,i);t>>>=0,n>>>=0,i>>>=0;for(var o=0,u=0;u<n;u++){var s=a()[t>>2>>>0],f=a()[t+4>>2>>>0];t+=8;for(var c=0;c<f;c++){var l=r()[s+c>>>0],d=rt[e];0===l||10===l?((1===e?A:R)(fe(d,0)),d.length=0):d.push(l)}o+=f}return a()[i>>2>>>0]=o,0}var at=[31,29,31,30,31,30,31,31,30,31,30,31],it=[31,28,31,30,31,30,31,31,30,31,30,31],ot=(e,r)=>{t().set(e,r>>>0)};function ut(e,t,r,a){function i(e,t,r){for(e=\"number\"==typeof e?e.toString():e||\"\";e.length<t;)e=r[0]+e;return e}function o(e,t){return i(e,t,\"0\")}function u(e,t){function r(e){return 0>e?-1:0<e?1:0}var n;return 0===(n=r(e.getFullYear()-t.getFullYear()))&&0===(n=r(e.getMonth()-t.getMonth()))&&(n=r(e.getDate()-t.getDate())),n}function s(e){switch(e.getDay()){case 0:return new Date(e.getFullYear()-1,11,29);case 1:return e;case 2:return new Date(e.getFullYear(),0,3);case 3:return new Date(e.getFullYear(),0,2);case 4:return new Date(e.getFullYear(),0,1);case 5:return new Date(e.getFullYear()-1,11,31);case 6:return new Date(e.getFullYear()-1,11,30)}}function f(e){var t=e.Pa;for(e=new Date(new Date(e.Qa+1900,0,1).getTime());0<t;){var r=e.getMonth(),n=(Be(e.getFullYear())?at:it)[r];if(!(t>n-e.getDate())){e.setDate(e.getDate()+t);break}t-=n-e.getDate()+1,e.setDate(1),11>r?e.setMonth(r+1):(e.setMonth(0),e.setFullYear(e.getFullYear()+1))}return r=new Date(e.getFullYear()+1,0,4),t=s(new Date(e.getFullYear(),0,4)),r=s(r),0>=u(t,e)?0>=u(r,e)?e.getFullYear()+1:e.getFullYear():e.getFullYear()-1}e>>>=0,t>>>=0,r>>>=0,a>>>=0;var c=n()[a+40>>2>>>0];for(var l in a={qb:n()[a>>2>>>0],pb:n()[a+4>>2>>>0],Sa:n()[a+8>>2>>>0],Wa:n()[a+12>>2>>>0],Ta:n()[a+16>>2>>>0],Qa:n()[a+20>>2>>>0],Ma:n()[a+24>>2>>>0],Pa:n()[a+28>>2>>>0],yb:n()[a+32>>2>>>0],ob:n()[a+36>>2>>>0],rb:c?ce(c):\"\"},r=ce(r),c={\"%c\":\"%a %b %d %H:%M:%S %Y\",\"%D\":\"%m/%d/%y\",\"%F\":\"%Y-%m-%d\",\"%h\":\"%b\",\"%r\":\"%I:%M:%S %p\",\"%R\":\"%H:%M\",\"%T\":\"%H:%M:%S\",\"%x\":\"%m/%d/%y\",\"%X\":\"%H:%M:%S\",\"%Ec\":\"%c\",\"%EC\":\"%C\",\"%Ex\":\"%m/%d/%y\",\"%EX\":\"%H:%M:%S\",\"%Ey\":\"%y\",\"%EY\":\"%Y\",\"%Od\":\"%d\",\"%Oe\":\"%e\",\"%OH\":\"%H\",\"%OI\":\"%I\",\"%Om\":\"%m\",\"%OM\":\"%M\",\"%OS\":\"%S\",\"%Ou\":\"%u\",\"%OU\":\"%U\",\"%OV\":\"%V\",\"%Ow\":\"%w\",\"%OW\":\"%W\",\"%Oy\":\"%y\"})r=r.replace(new RegExp(l,\"g\"),c[l]);var d=\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\".split(\" \"),h=\"January February March April May June July August September October November December\".split(\" \");for(l in c={\"%a\":e=>d[e.Ma].substring(0,3),\"%A\":e=>d[e.Ma],\"%b\":e=>h[e.Ta].substring(0,3),\"%B\":e=>h[e.Ta],\"%C\":e=>o((e.Qa+1900)/100|0,2),\"%d\":e=>o(e.Wa,2),\"%e\":e=>i(e.Wa,2,\" \"),\"%g\":e=>f(e).toString().substring(2),\"%G\":e=>f(e),\"%H\":e=>o(e.Sa,2),\"%I\":e=>(0==(e=e.Sa)?e=12:12<e&&(e-=12),o(e,2)),\"%j\":e=>{for(var t=0,r=0;r<=e.Ta-1;t+=(Be(e.Qa+1900)?at:it)[r++]);return o(e.Wa+t,3)},\"%m\":e=>o(e.Ta+1,2),\"%M\":e=>o(e.pb,2),\"%n\":()=>\"\\n\",\"%p\":e=>0<=e.Sa&&12>e.Sa?\"AM\":\"PM\",\"%S\":e=>o(e.qb,2),\"%t\":()=>\"\\t\",\"%u\":e=>e.Ma||7,\"%U\":e=>o(Math.floor((e.Pa+7-e.Ma)/7),2),\"%V\":e=>{var t=Math.floor((e.Pa+7-(e.Ma+6)%7)/7);if(2>=(e.Ma+371-e.Pa-2)%7&&t++,t)53==t&&(4==(r=(e.Ma+371-e.Pa)%7)||3==r&&Be(e.Qa)||(t=1));else{t=52;var r=(e.Ma+7-e.Pa-1)%7;(4==r||5==r&&Be(e.Qa%400-1))&&t++}return o(t,2)},\"%w\":e=>e.Ma,\"%W\":e=>o(Math.floor((e.Pa+7-(e.Ma+6)%7)/7),2),\"%y\":e=>(e.Qa+1900).toString().substring(2),\"%Y\":e=>e.Qa+1900,\"%z\":e=>{var t=0<=(e=e.ob);return e=Math.abs(e)/60,(t?\"+\":\"-\")+String(\"0000\"+(e/60*100+e%60)).slice(-4)},\"%Z\":e=>e.rb,\"%%\":()=>\"%\"},r=r.replace(/%%/g,\"\\0\\0\"),c)r.includes(l)&&(r=r.replace(new RegExp(l,\"g\"),c[l](a)));return l=function(e){var t=Array(we(e)+1);return Me(e,t,0,t.length),t}(r=r.replace(/\\0\\0/g,\"%\")),l.length>t?0:(ot(l,e),l.length-1)}he.Va();var st=[null,le,me,_e,ye,Oe,Se,Ae,Re,Ee,De,Ce,Fe,xe,ke,Ie,Ye,Le,je,$e,Je,Ke,et,tt,nt],ft={b:function(e,t,r){throw new be(e>>>=0).Va(t>>>0,r>>>0),e},N:function(e){dt(e>>>0,!g,1,!m,131072,!1),he.Ya()},j:function(e){e>>>=0,_?postMessage({cmd:\"cleanupThread\",thread:e}):oe(e)},I:ve,h:ye,T:Oe,D:Se,F:Ae,U:Re,R:Ee,J:De,Q:Ce,n:Fe,E:xe,B:ke,S:Ie,C:Ye,q:()=>!0,z:function(e,t){(e>>>=0)==t>>>0?setTimeout((()=>We())):_?postMessage({targetThread:e,cmd:\"checkMailbox\"}):(e=he.La[e])&&e.postMessage({cmd:\"checkMailbox\"})},L:function(){return-1},M:Ue,p:function(e){b&&he.La[e>>>0].ref()},t:function(e,t,r){e=t+2097152>>>0<4194305-!!e?(e>>>0)+4294967296*t:NaN,r>>>=0,e=new Date(1e3*e),n()[r>>2>>>0]=e.getUTCSeconds(),n()[r+4>>2>>>0]=e.getUTCMinutes(),n()[r+8>>2>>>0]=e.getUTCHours(),n()[r+12>>2>>>0]=e.getUTCDate(),n()[r+16>>2>>>0]=e.getUTCMonth(),n()[r+20>>2>>>0]=e.getUTCFullYear()-1900,n()[r+24>>2>>>0]=e.getUTCDay(),e=(e.getTime()-Date.UTC(e.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,n()[r+28>>2>>>0]=e},u:function(e,t,r){e=t+2097152>>>0<4194305-!!e?(e>>>0)+4294967296*t:NaN,r>>>=0,e=new Date(1e3*e),n()[r>>2>>>0]=e.getSeconds(),n()[r+4>>2>>>0]=e.getMinutes(),n()[r+8>>2>>>0]=e.getHours(),n()[r+12>>2>>>0]=e.getDate(),n()[r+16>>2>>>0]=e.getMonth(),n()[r+20>>2>>>0]=e.getFullYear()-1900,n()[r+24>>2>>>0]=e.getDay(),t=(Be(e.getFullYear())?He:Ne)[e.getMonth()]+e.getDate()-1|0,n()[r+28>>2>>>0]=t,n()[r+36>>2>>>0]=-60*e.getTimezoneOffset(),t=new Date(e.getFullYear(),6,1).getTimezoneOffset();var a=new Date(e.getFullYear(),0,1).getTimezoneOffset();e=0|(t!=a&&e.getTimezoneOffset()==Math.min(a,t)),n()[r+32>>2>>>0]=e},v:function(e){e>>>=0;var t=new Date(n()[e+20>>2>>>0]+1900,n()[e+16>>2>>>0],n()[e+12>>2>>>0],n()[e+8>>2>>>0],n()[e+4>>2>>>0],n()[e>>2>>>0],0),r=n()[e+32>>2>>>0],a=t.getTimezoneOffset(),i=new Date(t.getFullYear(),6,1).getTimezoneOffset(),o=new Date(t.getFullYear(),0,1).getTimezoneOffset(),u=Math.min(o,i);return 0>r?n()[e+32>>2>>>0]=Number(i!=o&&u==a):0<r!=(u==a)&&(i=Math.max(o,i),t.setTime(t.getTime()+6e4*((0<r?u:i)-a))),n()[e+24>>2>>>0]=t.getDay(),r=(Be(t.getFullYear())?He:Ne)[t.getMonth()]+t.getDate()-1|0,n()[e+28>>2>>>0]=r,n()[e>>2>>>0]=t.getSeconds(),n()[e+4>>2>>>0]=t.getMinutes(),n()[e+8>>2>>>0]=t.getHours(),n()[e+12>>2>>>0]=t.getDate(),n()[e+16>>2>>>0]=t.getMonth(),n()[e+20>>2>>>0]=t.getYear(),e=t.getTime()/1e3,_t((V=e,1<=+Math.abs(V)?0<V?+Math.floor(V/4294967296)>>>0:~~+Math.ceil((V-+(~~V>>>0))/4294967296)>>>0:0)),e>>>0},r:Le,s:je,y:function(e,t,r){function i(e){return(e=e.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?e[1]:\"GMT\"}e>>>=0,t>>>=0,r>>>=0;var o=(new Date).getFullYear(),u=new Date(o,0,1),s=new Date(o,6,1);o=u.getTimezoneOffset();var f=s.getTimezoneOffset(),c=Math.max(o,f);a()[e>>2>>>0]=60*c,n()[t>>2>>>0]=Number(o!=f),e=i(u),t=i(s),e=Ge(e),t=Ge(t),f<o?(a()[r>>2>>>0]=e,a()[r+4>>2>>>0]=t):(a()[r>>2>>>0]=t,a()[r+4>>2>>>0]=e)},c:()=>{ee(\"\")},k:function(){},i:function(){return Date.now()},o:()=>{throw z+=1,\"unwind\"},A:function(){return 4294901760},e:()=>performance.timeOrigin+performance.now(),f:function(){return b?require(\"os\").cpus().length:navigator.hardwareConcurrency},K:function(e,t,r,n){for(he.vb=t>>>0,Ve.length=r,t=n>>>0>>3,n=0;n<r;n++)Ve[n]=i()[t+n>>>0];return st[e].apply(null,Ve)},x:function(e){e>>>=0;var t=r().length;if(e<=t||4294901760<e)return!1;for(var n=1;4>=n;n*=2){var a=t*(1+.2/n);a=Math.min(a,e+100663296);var i=Math;a=Math.max(e,a);e:{i=i.min.call(i,4294901760,a+(65536-a%65536)%65536)-D.buffer.byteLength+65535>>>16;try{D.grow(i),B();var o=1;break e}catch(e){}o=void 0}if(o)return!0}return!1},O:$e,P:Je,H:de,g:Ke,m:et,w:tt,l:nt,a:D||s.wasmMemory,G:ut,d:function(e,t,r,n){return ut(e>>>0,t>>>0,r>>>0,n>>>0)}};!function(){function e(e,t){return e=e.exports,C=e=function(e){var t=e=>()=>e()>>>0,r=e=>t=>e(t)>>>0;return(e=Object.assign({},e)).__errno_location=t(e.__errno_location),e.pthread_self=t(e.pthread_self),e.malloc=r(e.malloc),e.stackSave=t(e.stackSave),e.stackAlloc=r(e.stackAlloc),e}(e),he.Za.push(C.ya),N=C.za,j.unshift(C.V),F=t,K(),e}var t={a:ft};if(J(),s.instantiateWasm)try{return s.instantiateWasm(t,e)}catch(e){R(\"Module.instantiateWasm callback failed with error: \"+e),u(e)}(function(e,t){var r=Q;return S||\"function\"!=typeof WebAssembly.instantiateStreaming||te(r)||r.startsWith(\"file://\")||b||\"function\"!=typeof fetch?ne(r,e,t):fetch(r,{credentials:\"same-origin\"}).then((n=>WebAssembly.instantiateStreaming(n,e).then(t,(function(n){return R(\"wasm streaming compile failed: \"+n),R(\"falling back to ArrayBuffer instantiation\"),ne(r,e,t)}))))})(t,(function(t){e(t.instance,t.module)})).catch(u)}(),s._OrtInit=(e,t)=>(s._OrtInit=C.W)(e,t),s._OrtGetLastError=(e,t)=>(s._OrtGetLastError=C.X)(e,t),s._OrtCreateSessionOptions=(e,t,r,n,a,i,o,u,f,c)=>(s._OrtCreateSessionOptions=C.Y)(e,t,r,n,a,i,o,u,f,c),s._OrtAppendExecutionProvider=(e,t)=>(s._OrtAppendExecutionProvider=C.Z)(e,t),s._OrtAddFreeDimensionOverride=(e,t,r)=>(s._OrtAddFreeDimensionOverride=C._)(e,t,r),s._OrtAddSessionConfigEntry=(e,t,r)=>(s._OrtAddSessionConfigEntry=C.$)(e,t,r),s._OrtReleaseSessionOptions=e=>(s._OrtReleaseSessionOptions=C.aa)(e),s._OrtCreateSession=(e,t,r)=>(s._OrtCreateSession=C.ba)(e,t,r),s._OrtReleaseSession=e=>(s._OrtReleaseSession=C.ca)(e),s._OrtGetInputOutputCount=(e,t,r)=>(s._OrtGetInputOutputCount=C.da)(e,t,r),s._OrtGetInputName=(e,t)=>(s._OrtGetInputName=C.ea)(e,t),s._OrtGetOutputName=(e,t)=>(s._OrtGetOutputName=C.fa)(e,t),s._OrtFree=e=>(s._OrtFree=C.ga)(e),s._OrtCreateTensor=(e,t,r,n,a,i)=>(s._OrtCreateTensor=C.ha)(e,t,r,n,a,i),s._OrtGetTensorData=(e,t,r,n,a)=>(s._OrtGetTensorData=C.ia)(e,t,r,n,a),s._OrtReleaseTensor=e=>(s._OrtReleaseTensor=C.ja)(e),s._OrtCreateRunOptions=(e,t,r,n)=>(s._OrtCreateRunOptions=C.ka)(e,t,r,n),s._OrtAddRunConfigEntry=(e,t,r)=>(s._OrtAddRunConfigEntry=C.la)(e,t,r),s._OrtReleaseRunOptions=e=>(s._OrtReleaseRunOptions=C.ma)(e),s._OrtCreateBinding=e=>(s._OrtCreateBinding=C.na)(e),s._OrtBindInput=(e,t,r)=>(s._OrtBindInput=C.oa)(e,t,r),s._OrtBindOutput=(e,t,r,n)=>(s._OrtBindOutput=C.pa)(e,t,r,n),s._OrtClearBoundOutputs=e=>(s._OrtClearBoundOutputs=C.qa)(e),s._OrtReleaseBinding=e=>(s._OrtReleaseBinding=C.ra)(e),s._OrtRunWithBinding=(e,t,r,n,a)=>(s._OrtRunWithBinding=C.sa)(e,t,r,n,a),s._OrtRun=(e,t,r,n,a,i,o,u)=>(s._OrtRun=C.ta)(e,t,r,n,a,i,o,u),s._OrtEndProfiling=e=>(s._OrtEndProfiling=C.ua)(e);var ct=s._pthread_self=()=>(ct=s._pthread_self=C.va)(),lt=s._malloc=e=>(lt=s._malloc=C.wa)(e);s._free=e=>(s._free=C.xa)(e),s.__emscripten_tls_init=()=>(s.__emscripten_tls_init=C.ya)();var dt=s.__emscripten_thread_init=(e,t,r,n,a,i)=>(dt=s.__emscripten_thread_init=C.Aa)(e,t,r,n,a,i);s.__emscripten_thread_crashed=()=>(s.__emscripten_thread_crashed=C.Ba)();var ht,pt=(e,t,r,n)=>(pt=C.Ca)(e,t,r,n),mt=e=>(mt=C.Da)(e),gt=s.__emscripten_thread_exit=e=>(gt=s.__emscripten_thread_exit=C.Ea)(e),bt=s.__emscripten_check_mailbox=()=>(bt=s.__emscripten_check_mailbox=C.Fa)(),_t=e=>(_t=C.Ga)(e),vt=(e,t)=>(vt=C.Ha)(e,t),yt=()=>(yt=C.Ia)(),Ot=e=>(Ot=C.Ja)(e),wt=e=>(wt=C.Ka)(e);function Mt(){function e(){if(!ht&&(ht=!0,s.calledRun=!0,!W)&&(_||pe(j),o(s),s.onRuntimeInitialized&&s.onRuntimeInitialized(),!_)){if(s.postRun)for(\"function\"==typeof s.postRun&&(s.postRun=[s.postRun]);s.postRun.length;){var e=s.postRun.shift();G.unshift(e)}pe(G)}}if(!(0<X))if(_)o(s),_||pe(j),startWorker(s);else{if(s.preRun)for(\"function\"==typeof s.preRun&&(s.preRun=[s.preRun]);s.preRun.length;)L.unshift(s.preRun.shift());pe(L),0<X||(s.setStatus?(s.setStatus(\"Running...\"),setTimeout((function(){setTimeout((function(){s.setStatus(\"\")}),1),e()}),1)):e())}}if(s.keepRuntimeAlive=q,s.wasmMemory=D,s.stackAlloc=wt,s.stackSave=yt,s.stackRestore=Ot,s.UTF8ToString=ce,s.stringToUTF8=Te,s.lengthBytesUTF8=we,s.ExitStatus=ae,s.PThread=he,$=function e(){ht||Mt(),ht||($=e)},s.preInit)for(\"function\"==typeof s.preInit&&(s.preInit=[s.preInit]);0<s.preInit.length;)s.preInit.pop()();return Mt(),e.ready});\"object\"==typeof exports&&\"object\"==typeof module?module.exports=e:\"function\"==typeof define&&define.amd&&define([],(()=>e));\n","\nvar ortWasm = (() => {\n  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;\n  if (typeof __filename !== 'undefined') _scriptDir = _scriptDir || __filename;\n  return (\nfunction(moduleArg = {}) {\n\nvar e=moduleArg,k,l;e.ready=new Promise((a,b)=>{k=a;l=b});var q=Object.assign({},e),v=\"./this.program\",aa=\"object\"==typeof window,x=\"function\"==typeof importScripts,ba=\"object\"==typeof process&&\"object\"==typeof process.versions&&\"string\"==typeof process.versions.node,y=\"\",A,B,C;\nif(ba){var fs=require(\"fs\"),D=require(\"path\");y=x?D.dirname(y)+\"/\":__dirname+\"/\";A=(a,b)=>{a=a.startsWith(\"file://\")?new URL(a):D.normalize(a);return fs.readFileSync(a,b?void 0:\"utf8\")};C=a=>{a=A(a,!0);a.buffer||(a=new Uint8Array(a));return a};B=(a,b,c,f=!0)=>{a=a.startsWith(\"file://\")?new URL(a):D.normalize(a);fs.readFile(a,f?void 0:\"utf8\",(g,h)=>{g?c(g):b(f?h.buffer:h)})};!e.thisProgram&&1<process.argv.length&&(v=process.argv[1].replace(/\\\\/g,\"/\"));process.argv.slice(2);e.inspect=()=>\"[Emscripten Module object]\"}else if(aa||\nx)x?y=self.location.href:\"undefined\"!=typeof document&&document.currentScript&&(y=document.currentScript.src),_scriptDir&&(y=_scriptDir),0!==y.indexOf(\"blob:\")?y=y.substr(0,y.replace(/[?#].*/,\"\").lastIndexOf(\"/\")+1):y=\"\",A=a=>{var b=new XMLHttpRequest;b.open(\"GET\",a,!1);b.send(null);return b.responseText},x&&(C=a=>{var b=new XMLHttpRequest;b.open(\"GET\",a,!1);b.responseType=\"arraybuffer\";b.send(null);return new Uint8Array(b.response)}),B=(a,b,c)=>{var f=new XMLHttpRequest;f.open(\"GET\",a,!0);f.responseType=\n\"arraybuffer\";f.onload=()=>{200==f.status||0==f.status&&f.response?b(f.response):c()};f.onerror=c;f.send(null)};var ca=e.print||console.log.bind(console),E=e.printErr||console.error.bind(console);Object.assign(e,q);q=null;e.thisProgram&&(v=e.thisProgram);var F;e.wasmBinary&&(F=e.wasmBinary);var noExitRuntime=e.noExitRuntime||!0;\"object\"!=typeof WebAssembly&&G(\"no native wasm support detected\");var H,I,da=!1,J,K,L,M;\nfunction ea(){var a=H.buffer;e.HEAP8=J=new Int8Array(a);e.HEAP16=new Int16Array(a);e.HEAP32=L=new Int32Array(a);e.HEAPU8=K=new Uint8Array(a);e.HEAPU16=new Uint16Array(a);e.HEAPU32=M=new Uint32Array(a);e.HEAPF32=new Float32Array(a);e.HEAPF64=new Float64Array(a)}var fa=[],ha=[],ia=[];function ja(){var a=e.preRun.shift();fa.unshift(a)}var N=0,O=null,P=null;\nfunction G(a){if(e.onAbort)e.onAbort(a);a=\"Aborted(\"+a+\")\";E(a);da=!0;a=new WebAssembly.RuntimeError(a+\". Build with -sASSERTIONS for more info.\");l(a);throw a;}function ka(a){return a.startsWith(\"data:application/octet-stream;base64,\")}var Q;Q=\"ort-wasm.wasm\";if(!ka(Q)){var la=Q;Q=e.locateFile?e.locateFile(la,y):y+la}function ma(a){if(a==Q&&F)return new Uint8Array(F);if(C)return C(a);throw\"both async and sync fetching of the wasm failed\";}\nfunction na(a){if(!F&&(aa||x)){if(\"function\"==typeof fetch&&!a.startsWith(\"file://\"))return fetch(a,{credentials:\"same-origin\"}).then(b=>{if(!b.ok)throw\"failed to load wasm binary file at '\"+a+\"'\";return b.arrayBuffer()}).catch(()=>ma(a));if(B)return new Promise((b,c)=>{B(a,f=>b(new Uint8Array(f)),c)})}return Promise.resolve().then(()=>ma(a))}function oa(a,b,c){return na(a).then(f=>WebAssembly.instantiate(f,b)).then(f=>f).then(c,f=>{E(\"failed to asynchronously prepare wasm: \"+f);G(f)})}\nfunction pa(a,b){var c=Q;return F||\"function\"!=typeof WebAssembly.instantiateStreaming||ka(c)||c.startsWith(\"file://\")||ba||\"function\"!=typeof fetch?oa(c,a,b):fetch(c,{credentials:\"same-origin\"}).then(f=>WebAssembly.instantiateStreaming(f,a).then(b,function(g){E(\"wasm streaming compile failed: \"+g);E(\"falling back to ArrayBuffer instantiation\");return oa(c,a,b)}))}var R,S=a=>{for(;0<a.length;)a.shift()(e)};\nfunction qa(a){this.va=a-24;this.Ea=function(b){M[this.va+4>>2>>>0]=b};this.za=function(b){M[this.va+8>>2>>>0]=b};this.xa=function(b,c){this.ya();this.Ea(b);this.za(c)};this.ya=function(){M[this.va+16>>2>>>0]=0}}\nvar ra=0,sa=0,ta=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf8\"):void 0,ua=(a,b,c)=>{b>>>=0;var f=b+c;for(c=b;a[c]&&!(c>=f);)++c;if(16<c-b&&a.buffer&&ta)return ta.decode(a.subarray(b,c));for(f=\"\";b<c;){var g=a[b++];if(g&128){var h=a[b++]&63;if(192==(g&224))f+=String.fromCharCode((g&31)<<6|h);else{var m=a[b++]&63;g=224==(g&240)?(g&15)<<12|h<<6|m:(g&7)<<18|h<<12|m<<6|a[b++]&63;65536>g?f+=String.fromCharCode(g):(g-=65536,f+=String.fromCharCode(55296|g>>10,56320|g&1023))}}else f+=String.fromCharCode(g)}return f},\nT=(a,b)=>(a>>>=0)?ua(K,a,b):\"\",U=a=>{for(var b=0,c=0;c<a.length;++c){var f=a.charCodeAt(c);127>=f?b++:2047>=f?b+=2:55296<=f&&57343>=f?(b+=4,++c):b+=3}return b},V=(a,b,c,f)=>{c>>>=0;if(!(0<f))return 0;var g=c;f=c+f-1;for(var h=0;h<a.length;++h){var m=a.charCodeAt(h);if(55296<=m&&57343>=m){var r=a.charCodeAt(++h);m=65536+((m&1023)<<10)|r&1023}if(127>=m){if(c>=f)break;b[c++>>>0]=m}else{if(2047>=m){if(c+1>=f)break;b[c++>>>0]=192|m>>6}else{if(65535>=m){if(c+2>=f)break;b[c++>>>0]=224|m>>12}else{if(c+3>=\nf)break;b[c++>>>0]=240|m>>18;b[c++>>>0]=128|m>>12&63}b[c++>>>0]=128|m>>6&63}b[c++>>>0]=128|m&63}}b[c>>>0]=0;return c-g},W=a=>0===a%4&&(0!==a%100||0===a%400),va=[0,31,60,91,121,152,182,213,244,274,305,335],wa=[0,31,59,90,120,151,181,212,243,273,304,334],Ba=a=>{var b=U(a)+1,c=Aa(b);c&&V(a,K,c,b);return c},X={},Ca=()=>{if(!Y){var a={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\n\"_\")+\".UTF-8\",_:v||\"./this.program\"},b;for(b in X)void 0===X[b]?delete a[b]:a[b]=X[b];var c=[];for(b in a)c.push(`${b}=${a[b]}`);Y=c}return Y},Y,Da=[null,[],[]],Ea=[31,29,31,30,31,30,31,31,30,31,30,31],Fa=[31,28,31,30,31,30,31,31,30,31,30,31];function Ga(a){var b=Array(U(a)+1);V(a,b,0,b.length);return b}\nfunction Ha(a,b,c,f){function g(d,n,p){for(d=\"number\"==typeof d?d.toString():d||\"\";d.length<n;)d=p[0]+d;return d}function h(d,n){return g(d,n,\"0\")}function m(d,n){function p(xa){return 0>xa?-1:0<xa?1:0}var z;0===(z=p(d.getFullYear()-n.getFullYear()))&&0===(z=p(d.getMonth()-n.getMonth()))&&(z=p(d.getDate()-n.getDate()));return z}function r(d){switch(d.getDay()){case 0:return new Date(d.getFullYear()-1,11,29);case 1:return d;case 2:return new Date(d.getFullYear(),0,3);case 3:return new Date(d.getFullYear(),\n0,2);case 4:return new Date(d.getFullYear(),0,1);case 5:return new Date(d.getFullYear()-1,11,31);case 6:return new Date(d.getFullYear()-1,11,30)}}function w(d){var n=d.ra;for(d=new Date((new Date(d.sa+1900,0,1)).getTime());0<n;){var p=d.getMonth(),z=(W(d.getFullYear())?Ea:Fa)[p];if(n>z-d.getDate())n-=z-d.getDate()+1,d.setDate(1),11>p?d.setMonth(p+1):(d.setMonth(0),d.setFullYear(d.getFullYear()+1));else{d.setDate(d.getDate()+n);break}}p=new Date(d.getFullYear()+1,0,4);n=r(new Date(d.getFullYear(),\n0,4));p=r(p);return 0>=m(n,d)?0>=m(p,d)?d.getFullYear()+1:d.getFullYear():d.getFullYear()-1}a>>>=0;b>>>=0;c>>>=0;f>>>=0;var t=L[f+40>>2>>>0];f={Ca:L[f>>2>>>0],Ba:L[f+4>>2>>>0],ta:L[f+8>>2>>>0],wa:L[f+12>>2>>>0],ua:L[f+16>>2>>>0],sa:L[f+20>>2>>>0],ma:L[f+24>>2>>>0],ra:L[f+28>>2>>>0],Fa:L[f+32>>2>>>0],Aa:L[f+36>>2>>>0],Da:t?T(t):\"\"};c=T(c);t={\"%c\":\"%a %b %d %H:%M:%S %Y\",\"%D\":\"%m/%d/%y\",\"%F\":\"%Y-%m-%d\",\"%h\":\"%b\",\"%r\":\"%I:%M:%S %p\",\"%R\":\"%H:%M\",\"%T\":\"%H:%M:%S\",\"%x\":\"%m/%d/%y\",\"%X\":\"%H:%M:%S\",\"%Ec\":\"%c\",\n\"%EC\":\"%C\",\"%Ex\":\"%m/%d/%y\",\"%EX\":\"%H:%M:%S\",\"%Ey\":\"%y\",\"%EY\":\"%Y\",\"%Od\":\"%d\",\"%Oe\":\"%e\",\"%OH\":\"%H\",\"%OI\":\"%I\",\"%Om\":\"%m\",\"%OM\":\"%M\",\"%OS\":\"%S\",\"%Ou\":\"%u\",\"%OU\":\"%U\",\"%OV\":\"%V\",\"%Ow\":\"%w\",\"%OW\":\"%W\",\"%Oy\":\"%y\"};for(var u in t)c=c.replace(new RegExp(u,\"g\"),t[u]);var ya=\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\".split(\" \"),za=\"January February March April May June July August September October November December\".split(\" \");t={\"%a\":d=>ya[d.ma].substring(0,3),\"%A\":d=>ya[d.ma],\"%b\":d=>\nza[d.ua].substring(0,3),\"%B\":d=>za[d.ua],\"%C\":d=>h((d.sa+1900)/100|0,2),\"%d\":d=>h(d.wa,2),\"%e\":d=>g(d.wa,2,\" \"),\"%g\":d=>w(d).toString().substring(2),\"%G\":d=>w(d),\"%H\":d=>h(d.ta,2),\"%I\":d=>{d=d.ta;0==d?d=12:12<d&&(d-=12);return h(d,2)},\"%j\":d=>{for(var n=0,p=0;p<=d.ua-1;n+=(W(d.sa+1900)?Ea:Fa)[p++]);return h(d.wa+n,3)},\"%m\":d=>h(d.ua+1,2),\"%M\":d=>h(d.Ba,2),\"%n\":()=>\"\\n\",\"%p\":d=>0<=d.ta&&12>d.ta?\"AM\":\"PM\",\"%S\":d=>h(d.Ca,2),\"%t\":()=>\"\\t\",\"%u\":d=>d.ma||7,\"%U\":d=>h(Math.floor((d.ra+7-d.ma)/7),2),\"%V\":d=>\n{var n=Math.floor((d.ra+7-(d.ma+6)%7)/7);2>=(d.ma+371-d.ra-2)%7&&n++;if(n)53==n&&(p=(d.ma+371-d.ra)%7,4==p||3==p&&W(d.sa)||(n=1));else{n=52;var p=(d.ma+7-d.ra-1)%7;(4==p||5==p&&W(d.sa%400-1))&&n++}return h(n,2)},\"%w\":d=>d.ma,\"%W\":d=>h(Math.floor((d.ra+7-(d.ma+6)%7)/7),2),\"%y\":d=>(d.sa+1900).toString().substring(2),\"%Y\":d=>d.sa+1900,\"%z\":d=>{d=d.Aa;var n=0<=d;d=Math.abs(d)/60;return(n?\"+\":\"-\")+String(\"0000\"+(d/60*100+d%60)).slice(-4)},\"%Z\":d=>d.Da,\"%%\":()=>\"%\"};c=c.replace(/%%/g,\"\\x00\\x00\");for(u in t)c.includes(u)&&\n(c=c.replace(new RegExp(u,\"g\"),t[u](f)));c=c.replace(/\\0\\0/g,\"%\");u=Ga(c);if(u.length>b)return 0;J.set(u,a>>>0);return u.length-1}\nvar Ja={a:function(a,b,c){a>>>=0;(new qa(a)).xa(b>>>0,c>>>0);ra=a;sa++;throw ra;},e:function(){return 0},H:function(){},x:function(){},z:function(){},k:function(){return 0},F:function(){},B:function(){},E:function(){},g:function(){},y:function(){},v:function(){},G:function(){},w:function(){},l:()=>!0,o:function(a,b,c){a=b+2097152>>>0<4194305-!!a?(a>>>0)+4294967296*b:NaN;c>>>=0;a=new Date(1E3*a);L[c>>2>>>0]=a.getUTCSeconds();L[c+4>>2>>>0]=a.getUTCMinutes();L[c+8>>2>>>0]=a.getUTCHours();L[c+12>>2>>>\n0]=a.getUTCDate();L[c+16>>2>>>0]=a.getUTCMonth();L[c+20>>2>>>0]=a.getUTCFullYear()-1900;L[c+24>>2>>>0]=a.getUTCDay();L[c+28>>2>>>0]=(a.getTime()-Date.UTC(a.getUTCFullYear(),0,1,0,0,0,0))/864E5|0},p:function(a,b,c){a=b+2097152>>>0<4194305-!!a?(a>>>0)+4294967296*b:NaN;c>>>=0;a=new Date(1E3*a);L[c>>2>>>0]=a.getSeconds();L[c+4>>2>>>0]=a.getMinutes();L[c+8>>2>>>0]=a.getHours();L[c+12>>2>>>0]=a.getDate();L[c+16>>2>>>0]=a.getMonth();L[c+20>>2>>>0]=a.getFullYear()-1900;L[c+24>>2>>>0]=a.getDay();L[c+28>>2>>>\n0]=(W(a.getFullYear())?va:wa)[a.getMonth()]+a.getDate()-1|0;L[c+36>>2>>>0]=-(60*a.getTimezoneOffset());b=(new Date(a.getFullYear(),6,1)).getTimezoneOffset();var f=(new Date(a.getFullYear(),0,1)).getTimezoneOffset();L[c+32>>2>>>0]=(b!=f&&a.getTimezoneOffset()==Math.min(f,b))|0},q:function(a){a>>>=0;var b=new Date(L[a+20>>2>>>0]+1900,L[a+16>>2>>>0],L[a+12>>2>>>0],L[a+8>>2>>>0],L[a+4>>2>>>0],L[a>>2>>>0],0),c=L[a+32>>2>>>0],f=b.getTimezoneOffset(),g=(new Date(b.getFullYear(),6,1)).getTimezoneOffset(),\nh=(new Date(b.getFullYear(),0,1)).getTimezoneOffset(),m=Math.min(h,g);0>c?L[a+32>>2>>>0]=Number(g!=h&&m==f):0<c!=(m==f)&&(g=Math.max(h,g),b.setTime(b.getTime()+6E4*((0<c?m:g)-f)));L[a+24>>2>>>0]=b.getDay();L[a+28>>2>>>0]=(W(b.getFullYear())?va:wa)[b.getMonth()]+b.getDate()-1|0;L[a>>2>>>0]=b.getSeconds();L[a+4>>2>>>0]=b.getMinutes();L[a+8>>2>>>0]=b.getHours();L[a+12>>2>>>0]=b.getDate();L[a+16>>2>>>0]=b.getMonth();L[a+20>>2>>>0]=b.getYear();a=b.getTime()/1E3;return Ia((R=a,1<=+Math.abs(R)?0<R?+Math.floor(R/\n4294967296)>>>0:~~+Math.ceil((R-+(~~R>>>0))/4294967296)>>>0:0)),a>>>0},m:function(){return-52},n:function(){},t:function(a,b,c){function f(w){return(w=w.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?w[1]:\"GMT\"}c>>>=0;var g=(new Date).getFullYear(),h=new Date(g,0,1),m=new Date(g,6,1);g=h.getTimezoneOffset();var r=m.getTimezoneOffset();M[a>>>0>>2>>>0]=60*Math.max(g,r);L[b>>>0>>2>>>0]=Number(g!=r);a=f(h);b=f(m);a=Ba(a);b=Ba(b);r<g?(M[c>>2>>>0]=a,M[c+4>>2>>>0]=b):(M[c>>2>>>0]=b,M[c+4>>2>>>0]=a)},d:()=>{G(\"\")},\nh:function(){return Date.now()},u:function(){return 4294901760},b:()=>performance.now(),I:function(a,b,c){b>>>=0;return K.copyWithin(a>>>0>>>0,b>>>0,b+(c>>>0)>>>0)},s:function(a){a>>>=0;var b=K.length;if(4294901760<a)return!1;for(var c=1;4>=c;c*=2){var f=b*(1+.2/c);f=Math.min(f,a+100663296);var g=Math;f=Math.max(a,f);a:{g=g.min.call(g,4294901760,f+(65536-f%65536)%65536)-H.buffer.byteLength+65535>>>16;try{H.grow(g);ea();var h=1;break a}catch(m){}h=void 0}if(h)return!0}return!1},C:function(a,b){a>>>=\n0;b>>>=0;var c=0;Ca().forEach(function(f,g){var h=b+c;g=M[a+4*g>>2>>>0]=h;for(h=0;h<f.length;++h)J[g++>>0>>>0]=f.charCodeAt(h);J[g>>0>>>0]=0;c+=f.length+1});return 0},D:function(a,b){a>>>=0;b>>>=0;var c=Ca();M[a>>2>>>0]=c.length;var f=0;c.forEach(function(g){f+=g.length+1});M[b>>2>>>0]=f;return 0},f:()=>52,j:function(){return 52},r:function(){return 70},i:function(a,b,c,f){b>>>=0;c>>>=0;f>>>=0;for(var g=0,h=0;h<c;h++){var m=M[b>>2>>>0],r=M[b+4>>2>>>0];b+=8;for(var w=0;w<r;w++){var t=K[m+w>>>0],u=\nDa[a];0===t||10===t?((1===a?ca:E)(ua(u,0)),u.length=0):u.push(t)}g+=r}M[f>>2>>>0]=g;return 0},A:Ha,c:function(a,b,c,f){return Ha(a>>>0,b>>>0,c>>>0,f>>>0)}};\n(function(){function a(c){c=c.exports;I=c=Ka(c);H=I.J;ea();ha.unshift(I.K);N--;e.monitorRunDependencies&&e.monitorRunDependencies(N);if(0==N&&(null!==O&&(clearInterval(O),O=null),P)){var f=P;P=null;f()}return c}var b={a:Ja};N++;e.monitorRunDependencies&&e.monitorRunDependencies(N);if(e.instantiateWasm)try{return e.instantiateWasm(b,a)}catch(c){E(\"Module.instantiateWasm callback failed with error: \"+c),l(c)}pa(b,function(c){a(c.instance)}).catch(l);return{}})();\ne._OrtInit=(a,b)=>(e._OrtInit=I.L)(a,b);e._OrtGetLastError=(a,b)=>(e._OrtGetLastError=I.M)(a,b);e._OrtCreateSessionOptions=(a,b,c,f,g,h,m,r,w,t)=>(e._OrtCreateSessionOptions=I.N)(a,b,c,f,g,h,m,r,w,t);e._OrtAppendExecutionProvider=(a,b)=>(e._OrtAppendExecutionProvider=I.O)(a,b);e._OrtAddFreeDimensionOverride=(a,b,c)=>(e._OrtAddFreeDimensionOverride=I.P)(a,b,c);e._OrtAddSessionConfigEntry=(a,b,c)=>(e._OrtAddSessionConfigEntry=I.Q)(a,b,c);e._OrtReleaseSessionOptions=a=>(e._OrtReleaseSessionOptions=I.R)(a);\ne._OrtCreateSession=(a,b,c)=>(e._OrtCreateSession=I.S)(a,b,c);e._OrtReleaseSession=a=>(e._OrtReleaseSession=I.T)(a);e._OrtGetInputOutputCount=(a,b,c)=>(e._OrtGetInputOutputCount=I.U)(a,b,c);e._OrtGetInputName=(a,b)=>(e._OrtGetInputName=I.V)(a,b);e._OrtGetOutputName=(a,b)=>(e._OrtGetOutputName=I.W)(a,b);e._OrtFree=a=>(e._OrtFree=I.X)(a);e._OrtCreateTensor=(a,b,c,f,g,h)=>(e._OrtCreateTensor=I.Y)(a,b,c,f,g,h);e._OrtGetTensorData=(a,b,c,f,g)=>(e._OrtGetTensorData=I.Z)(a,b,c,f,g);\ne._OrtReleaseTensor=a=>(e._OrtReleaseTensor=I._)(a);e._OrtCreateRunOptions=(a,b,c,f)=>(e._OrtCreateRunOptions=I.$)(a,b,c,f);e._OrtAddRunConfigEntry=(a,b,c)=>(e._OrtAddRunConfigEntry=I.aa)(a,b,c);e._OrtReleaseRunOptions=a=>(e._OrtReleaseRunOptions=I.ba)(a);e._OrtCreateBinding=a=>(e._OrtCreateBinding=I.ca)(a);e._OrtBindInput=(a,b,c)=>(e._OrtBindInput=I.da)(a,b,c);e._OrtBindOutput=(a,b,c,f)=>(e._OrtBindOutput=I.ea)(a,b,c,f);e._OrtClearBoundOutputs=a=>(e._OrtClearBoundOutputs=I.fa)(a);\ne._OrtReleaseBinding=a=>(e._OrtReleaseBinding=I.ga)(a);e._OrtRunWithBinding=(a,b,c,f,g)=>(e._OrtRunWithBinding=I.ha)(a,b,c,f,g);e._OrtRun=(a,b,c,f,g,h,m,r)=>(e._OrtRun=I.ia)(a,b,c,f,g,h,m,r);e._OrtEndProfiling=a=>(e._OrtEndProfiling=I.ja)(a);var Aa=e._malloc=a=>(Aa=e._malloc=I.ka)(a);e._free=a=>(e._free=I.la)(a);var Ia=a=>(Ia=I.na)(a),La=()=>(La=I.oa)(),Ma=a=>(Ma=I.pa)(a),Na=a=>(Na=I.qa)(a);\nfunction Ka(a){a=Object.assign({},a);var b=f=>()=>f()>>>0,c=f=>g=>f(g)>>>0;a.__errno_location=b(a.__errno_location);a.malloc=c(a.malloc);a.stackSave=b(a.stackSave);a.stackAlloc=c(a.stackAlloc);return a}e.stackAlloc=Na;e.stackSave=La;e.stackRestore=Ma;e.UTF8ToString=T;e.stringToUTF8=(a,b,c)=>V(a,K,b,c);e.lengthBytesUTF8=U;var Z;P=function Oa(){Z||Pa();Z||(P=Oa)};\nfunction Pa(){function a(){if(!Z&&(Z=!0,e.calledRun=!0,!da)){S(ha);k(e);if(e.onRuntimeInitialized)e.onRuntimeInitialized();if(e.postRun)for(\"function\"==typeof e.postRun&&(e.postRun=[e.postRun]);e.postRun.length;){var b=e.postRun.shift();ia.unshift(b)}S(ia)}}if(!(0<N)){if(e.preRun)for(\"function\"==typeof e.preRun&&(e.preRun=[e.preRun]);e.preRun.length;)ja();S(fa);0<N||(e.setStatus?(e.setStatus(\"Running...\"),setTimeout(function(){setTimeout(function(){e.setStatus(\"\")},1);a()},1)):a())}}\nif(e.preInit)for(\"function\"==typeof e.preInit&&(e.preInit=[e.preInit]);0<e.preInit.length;)e.preInit.pop()();Pa();\n\n\n  return moduleArg.ready\n}\n\n);\n})();\nif (typeof exports === 'object' && typeof module === 'object')\n  module.exports = ortWasm;\nelse if (typeof define === 'function' && define['amd'])\n  define([], () => ortWasm);\n","\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Callback as used by {@link util.asPromise}.\r\n * @typedef asPromiseCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {...*} params Additional arguments\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {asPromiseCallback} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params  = new Array(arguments.length - 1),\r\n        offset  = 0,\r\n        index   = 2,\r\n        pending = true;\r\n    while (index < arguments.length)\r\n        params[offset++] = arguments[index++];\r\n    return new Promise(function executor(resolve, reject) {\r\n        params[offset] = function callback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var params = new Array(arguments.length - 1),\r\n                        offset = 0;\r\n                    while (offset < params.length)\r\n                        params[offset++] = arguments[offset];\r\n                    resolve.apply(null, params);\r\n                }\r\n            }\r\n        };\r\n        try {\r\n            fn.apply(ctx || null, params);\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var parts = null,\r\n        chunk = [];\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                chunk[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                chunk[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                chunk[i++] = b64[t | b >> 6];\r\n                chunk[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (j) {\r\n        chunk[i++] = b64[t];\r\n        chunk[i++] = 61;\r\n        if (j === 1)\r\n            chunk[i++] = 61;\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\n\r\nmodule.exports = factory(factory);\r\n\r\n/**\r\n * Reads / writes floats / doubles from / to buffers.\r\n * @name util.float\r\n * @namespace\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using little endian byte order.\r\n * @name util.float.writeFloatLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using big endian byte order.\r\n * @name util.float.writeFloatBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using little endian byte order.\r\n * @name util.float.readFloatLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using big endian byte order.\r\n * @name util.float.readFloatBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using little endian byte order.\r\n * @name util.float.writeDoubleLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using big endian byte order.\r\n * @name util.float.writeDoubleBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using little endian byte order.\r\n * @name util.float.readDoubleLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using big endian byte order.\r\n * @name util.float.readDoubleBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n// Factory function for the purpose of node-based testing in modified global environments\r\nfunction factory(exports) {\r\n\r\n    // float: typed array\r\n    if (typeof Float32Array !== \"undefined\") (function() {\r\n\r\n        var f32 = new Float32Array([ -0 ]),\r\n            f8b = new Uint8Array(f32.buffer),\r\n            le  = f8b[3] === 128;\r\n\r\n        function writeFloat_f32_cpy(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n        }\r\n\r\n        function writeFloat_f32_rev(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[3];\r\n            buf[pos + 1] = f8b[2];\r\n            buf[pos + 2] = f8b[1];\r\n            buf[pos + 3] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\r\n\r\n        function readFloat_f32_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        function readFloat_f32_rev(buf, pos) {\r\n            f8b[3] = buf[pos    ];\r\n            f8b[2] = buf[pos + 1];\r\n            f8b[1] = buf[pos + 2];\r\n            f8b[0] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\r\n\r\n    // float: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeFloat_ieee754(writeUint, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0)\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n            else if (isNaN(val))\r\n                writeUint(2143289344, buf, pos);\r\n            else if (val > 3.4028234663852886e+38) // +-Infinity\r\n                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n            else if (val < 1.1754943508222875e-38) // denormal\r\n                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n            else {\r\n                var exponent = Math.floor(Math.log(val) / Math.LN2),\r\n                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n            }\r\n        }\r\n\r\n        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\r\n        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\r\n\r\n        function readFloat_ieee754(readUint, buf, pos) {\r\n            var uint = readUint(buf, pos),\r\n                sign = (uint >> 31) * 2 + 1,\r\n                exponent = uint >>> 23 & 255,\r\n                mantissa = uint & 8388607;\r\n            return exponent === 255\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 1.401298464324817e-45 * mantissa\r\n                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n        }\r\n\r\n        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\r\n        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\r\n\r\n    })();\r\n\r\n    // double: typed array\r\n    if (typeof Float64Array !== \"undefined\") (function() {\r\n\r\n        var f64 = new Float64Array([-0]),\r\n            f8b = new Uint8Array(f64.buffer),\r\n            le  = f8b[7] === 128;\r\n\r\n        function writeDouble_f64_cpy(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n            buf[pos + 4] = f8b[4];\r\n            buf[pos + 5] = f8b[5];\r\n            buf[pos + 6] = f8b[6];\r\n            buf[pos + 7] = f8b[7];\r\n        }\r\n\r\n        function writeDouble_f64_rev(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[7];\r\n            buf[pos + 1] = f8b[6];\r\n            buf[pos + 2] = f8b[5];\r\n            buf[pos + 3] = f8b[4];\r\n            buf[pos + 4] = f8b[3];\r\n            buf[pos + 5] = f8b[2];\r\n            buf[pos + 6] = f8b[1];\r\n            buf[pos + 7] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\r\n\r\n        function readDouble_f64_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            f8b[4] = buf[pos + 4];\r\n            f8b[5] = buf[pos + 5];\r\n            f8b[6] = buf[pos + 6];\r\n            f8b[7] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        function readDouble_f64_rev(buf, pos) {\r\n            f8b[7] = buf[pos    ];\r\n            f8b[6] = buf[pos + 1];\r\n            f8b[5] = buf[pos + 2];\r\n            f8b[4] = buf[pos + 3];\r\n            f8b[3] = buf[pos + 4];\r\n            f8b[2] = buf[pos + 5];\r\n            f8b[1] = buf[pos + 6];\r\n            f8b[0] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\r\n\r\n    // double: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);\r\n            } else if (isNaN(val)) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(2146959360, buf, pos + off1);\r\n            } else if (val > 1.7976931348623157e+308) { // +-Infinity\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\r\n            } else {\r\n                var mantissa;\r\n                if (val < 2.2250738585072014e-308) { // denormal\r\n                    mantissa = val / 5e-324;\r\n                    writeUint(mantissa >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\r\n                } else {\r\n                    var exponent = Math.floor(Math.log(val) / Math.LN2);\r\n                    if (exponent === 1024)\r\n                        exponent = 1023;\r\n                    mantissa = val * Math.pow(2, -exponent);\r\n                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\r\n                }\r\n            }\r\n        }\r\n\r\n        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\r\n        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\r\n\r\n        function readDouble_ieee754(readUint, off0, off1, buf, pos) {\r\n            var lo = readUint(buf, pos + off0),\r\n                hi = readUint(buf, pos + off1);\r\n            var sign = (hi >> 31) * 2 + 1,\r\n                exponent = hi >>> 20 & 2047,\r\n                mantissa = 4294967296 * (hi & 1048575) + lo;\r\n            return exponent === 2047\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 5e-324 * mantissa\r\n                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n        }\r\n\r\n        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\r\n        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\r\n\r\n    })();\r\n\r\n    return exports;\r\n}\r\n\r\n// uint helpers\r\n\r\nfunction writeUintLE(val, buf, pos) {\r\n    buf[pos    ] =  val        & 255;\r\n    buf[pos + 1] =  val >>> 8  & 255;\r\n    buf[pos + 2] =  val >>> 16 & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\nfunction writeUintBE(val, buf, pos) {\r\n    buf[pos    ] =  val >>> 24;\r\n    buf[pos + 1] =  val >>> 16 & 255;\r\n    buf[pos + 2] =  val >>> 8  & 255;\r\n    buf[pos + 3] =  val        & 255;\r\n}\r\n\r\nfunction readUintLE(buf, pos) {\r\n    return (buf[pos    ]\r\n          | buf[pos + 1] << 8\r\n          | buf[pos + 2] << 16\r\n          | buf[pos + 3] << 24) >>> 0;\r\n}\r\n\r\nfunction readUintBE(buf, pos) {\r\n    return (buf[pos    ] << 24\r\n          | buf[pos + 1] << 16\r\n          | buf[pos + 2] << 8\r\n          | buf[pos + 3]) >>> 0;\r\n}\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","\"use strict\";\r\nexports.__esModule = true;\r\nvar Guid = /** @class */ (function () {\r\n    function Guid(guid) {\r\n        if (!guid) {\r\n            throw new TypeError(\"Invalid argument; `value` has no value.\");\r\n        }\r\n        this.value = Guid.EMPTY;\r\n        if (guid && Guid.isGuid(guid)) {\r\n            this.value = guid;\r\n        }\r\n    }\r\n    Guid.isGuid = function (guid) {\r\n        var value = guid.toString();\r\n        return guid && (guid instanceof Guid || Guid.validator.test(value));\r\n    };\r\n    Guid.create = function () {\r\n        return new Guid([Guid.gen(2), Guid.gen(1), Guid.gen(1), Guid.gen(1), Guid.gen(3)].join(\"-\"));\r\n    };\r\n    Guid.createEmpty = function () {\r\n        return new Guid(\"emptyguid\");\r\n    };\r\n    Guid.parse = function (guid) {\r\n        return new Guid(guid);\r\n    };\r\n    Guid.raw = function () {\r\n        return [Guid.gen(2), Guid.gen(1), Guid.gen(1), Guid.gen(1), Guid.gen(3)].join(\"-\");\r\n    };\r\n    Guid.gen = function (count) {\r\n        var out = \"\";\r\n        for (var i = 0; i < count; i++) {\r\n            // tslint:disable-next-line:no-bitwise\r\n            out += (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\r\n        }\r\n        return out;\r\n    };\r\n    Guid.prototype.equals = function (other) {\r\n        // Comparing string `value` against provided `guid` will auto-call\r\n        // toString on `guid` for comparison\r\n        return Guid.isGuid(other) && this.value === other.toString();\r\n    };\r\n    Guid.prototype.isEmpty = function () {\r\n        return this.value === Guid.EMPTY;\r\n    };\r\n    Guid.prototype.toString = function () {\r\n        return this.value;\r\n    };\r\n    Guid.prototype.toJSON = function () {\r\n        return {\r\n            value: this.value\r\n        };\r\n    };\r\n    Guid.validator = new RegExp(\"^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$\", \"i\");\r\n    Guid.EMPTY = \"00000000-0000-0000-0000-000000000000\";\r\n    return Guid;\r\n}());\r\nexports.Guid = Guid;\r\n","// minimal library entry point.\n\n\"use strict\";\nmodule.exports = require(\"./src/index-minimal\");\n","\"use strict\";\nvar protobuf = exports;\n\n/**\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\n * @name build\n * @type {string}\n * @const\n */\nprotobuf.build = \"minimal\";\n\n// Serialization\nprotobuf.Writer       = require(\"./writer\");\nprotobuf.BufferWriter = require(\"./writer_buffer\");\nprotobuf.Reader       = require(\"./reader\");\nprotobuf.BufferReader = require(\"./reader_buffer\");\n\n// Utility\nprotobuf.util         = require(\"./util/minimal\");\nprotobuf.rpc          = require(\"./rpc\");\nprotobuf.roots        = require(\"./roots\");\nprotobuf.configure    = configure;\n\n/* istanbul ignore next */\n/**\n * Reconfigures the library according to the environment.\n * @returns {undefined}\n */\nfunction configure() {\n    protobuf.util._configure();\n    protobuf.Writer._configure(protobuf.BufferWriter);\n    protobuf.Reader._configure(protobuf.BufferReader);\n}\n\n// Set up buffer utility according to the environment\nconfigure();\n","\"use strict\";\nmodule.exports = Reader;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferReader; // cyclic\n\nvar LongBits  = util.LongBits,\n    utf8      = util.utf8;\n\n/* istanbul ignore next */\nfunction indexOutOfRange(reader, writeLength) {\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\n}\n\n/**\n * Constructs a new reader instance using the specified buffer.\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n * @param {Uint8Array} buffer Buffer to read from\n */\nfunction Reader(buffer) {\n\n    /**\n     * Read buffer.\n     * @type {Uint8Array}\n     */\n    this.buf = buffer;\n\n    /**\n     * Read buffer position.\n     * @type {number}\n     */\n    this.pos = 0;\n\n    /**\n     * Read buffer length.\n     * @type {number}\n     */\n    this.len = buffer.length;\n}\n\nvar create_array = typeof Uint8Array !== \"undefined\"\n    ? function create_typed_array(buffer) {\n        if (buffer instanceof Uint8Array || Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    }\n    /* istanbul ignore next */\n    : function create_array(buffer) {\n        if (Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    };\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup(buffer) {\n            return (Reader.create = function create_buffer(buffer) {\n                return util.Buffer.isBuffer(buffer)\n                    ? new BufferReader(buffer)\n                    /* istanbul ignore next */\n                    : create_array(buffer);\n            })(buffer);\n        }\n        /* istanbul ignore next */\n        : create_array;\n};\n\n/**\n * Creates a new reader using the specified buffer.\n * @function\n * @param {Uint8Array|Buffer} buffer Buffer to read from\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\n * @throws {Error} If `buffer` is not a valid buffer\n */\nReader.create = create();\n\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\n\n/**\n * Reads a varint as an unsigned 32 bit value.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.uint32 = (function read_uint32_setup() {\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\n    return function read_uint32() {\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\n\n        /* istanbul ignore if */\n        if ((this.pos += 5) > this.len) {\n            this.pos = this.len;\n            throw indexOutOfRange(this, 10);\n        }\n        return value;\n    };\n})();\n\n/**\n * Reads a varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.int32 = function read_int32() {\n    return this.uint32() | 0;\n};\n\n/**\n * Reads a zig-zag encoded varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.sint32 = function read_sint32() {\n    var value = this.uint32();\n    return value >>> 1 ^ -(value & 1) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readLongVarint() {\n    // tends to deopt with local vars for octet etc.\n    var bits = new LongBits(0, 0);\n    var i = 0;\n    if (this.len - this.pos > 4) { // fast route (lo)\n        for (; i < 4; ++i) {\n            // 1st..4th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 5th\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\n        if (this.buf[this.pos++] < 128)\n            return bits;\n        i = 0;\n    } else {\n        for (; i < 3; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 1st..3th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 4th\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\n        return bits;\n    }\n    if (this.len - this.pos > 4) { // fast route (hi)\n        for (; i < 5; ++i) {\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    } else {\n        for (; i < 5; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    }\n    /* istanbul ignore next */\n    throw Error(\"invalid varint encoding\");\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads a varint as a signed 64 bit value.\n * @name Reader#int64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as an unsigned 64 bit value.\n * @name Reader#uint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a zig-zag encoded varint as a signed 64 bit value.\n * @name Reader#sint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as a boolean.\n * @returns {boolean} Value read\n */\nReader.prototype.bool = function read_bool() {\n    return this.uint32() !== 0;\n};\n\nfunction readFixed32_end(buf, end) { // note that this uses `end`, not `pos`\n    return (buf[end - 4]\n          | buf[end - 3] << 8\n          | buf[end - 2] << 16\n          | buf[end - 1] << 24) >>> 0;\n}\n\n/**\n * Reads fixed 32 bits as an unsigned 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.fixed32 = function read_fixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4);\n};\n\n/**\n * Reads fixed 32 bits as a signed 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.sfixed32 = function read_sfixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readFixed64(/* this: Reader */) {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 8);\n\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads fixed 64 bits.\n * @name Reader#fixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads zig-zag encoded fixed 64 bits.\n * @name Reader#sfixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a float (32 bit) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.float = function read_float() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readFloatLE(this.buf, this.pos);\n    this.pos += 4;\n    return value;\n};\n\n/**\n * Reads a double (64 bit float) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.double = function read_double() {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readDoubleLE(this.buf, this.pos);\n    this.pos += 8;\n    return value;\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @returns {Uint8Array} Value read\n */\nReader.prototype.bytes = function read_bytes() {\n    var length = this.uint32(),\n        start  = this.pos,\n        end    = this.pos + length;\n\n    /* istanbul ignore if */\n    if (end > this.len)\n        throw indexOutOfRange(this, length);\n\n    this.pos += length;\n    if (Array.isArray(this.buf)) // plain array\n        return this.buf.slice(start, end);\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\n        ? new this.buf.constructor(0)\n        : this._slice.call(this.buf, start, end);\n};\n\n/**\n * Reads a string preceeded by its byte length as a varint.\n * @returns {string} Value read\n */\nReader.prototype.string = function read_string() {\n    var bytes = this.bytes();\n    return utf8.read(bytes, 0, bytes.length);\n};\n\n/**\n * Skips the specified number of bytes if specified, otherwise skips a varint.\n * @param {number} [length] Length if known, otherwise a varint is assumed\n * @returns {Reader} `this`\n */\nReader.prototype.skip = function skip(length) {\n    if (typeof length === \"number\") {\n        /* istanbul ignore if */\n        if (this.pos + length > this.len)\n            throw indexOutOfRange(this, length);\n        this.pos += length;\n    } else {\n        do {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n        } while (this.buf[this.pos++] & 128);\n    }\n    return this;\n};\n\n/**\n * Skips the next element of the specified wire type.\n * @param {number} wireType Wire type received\n * @returns {Reader} `this`\n */\nReader.prototype.skipType = function(wireType) {\n    switch (wireType) {\n        case 0:\n            this.skip();\n            break;\n        case 1:\n            this.skip(8);\n            break;\n        case 2:\n            this.skip(this.uint32());\n            break;\n        case 3:\n            while ((wireType = this.uint32() & 7) !== 4) {\n                this.skipType(wireType);\n            }\n            break;\n        case 5:\n            this.skip(4);\n            break;\n\n        /* istanbul ignore next */\n        default:\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\n    }\n    return this;\n};\n\nReader._configure = function(BufferReader_) {\n    BufferReader = BufferReader_;\n    Reader.create = create();\n    BufferReader._configure();\n\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\n    util.merge(Reader.prototype, {\n\n        int64: function read_int64() {\n            return readLongVarint.call(this)[fn](false);\n        },\n\n        uint64: function read_uint64() {\n            return readLongVarint.call(this)[fn](true);\n        },\n\n        sint64: function read_sint64() {\n            return readLongVarint.call(this).zzDecode()[fn](false);\n        },\n\n        fixed64: function read_fixed64() {\n            return readFixed64.call(this)[fn](true);\n        },\n\n        sfixed64: function read_sfixed64() {\n            return readFixed64.call(this)[fn](false);\n        }\n\n    });\n};\n","\"use strict\";\nmodule.exports = BufferReader;\n\n// extends Reader\nvar Reader = require(\"./reader\");\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer reader instance.\n * @classdesc Wire format reader using node buffers.\n * @extends Reader\n * @constructor\n * @param {Buffer} buffer Buffer to read from\n */\nfunction BufferReader(buffer) {\n    Reader.call(this, buffer);\n\n    /**\n     * Read buffer.\n     * @name BufferReader#buf\n     * @type {Buffer}\n     */\n}\n\nBufferReader._configure = function () {\n    /* istanbul ignore else */\n    if (util.Buffer)\n        BufferReader.prototype._slice = util.Buffer.prototype.slice;\n};\n\n\n/**\n * @override\n */\nBufferReader.prototype.string = function read_string_buffer() {\n    var len = this.uint32(); // modifies pos\n    return this.buf.utf8Slice\n        ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len))\n        : this.buf.toString(\"utf-8\", this.pos, this.pos = Math.min(this.pos + len, this.len));\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @name BufferReader#bytes\n * @function\n * @returns {Buffer} Value read\n */\n\nBufferReader._configure();\n","\"use strict\";\nmodule.exports = {};\n\n/**\n * Named roots.\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\n * Can also be used manually to make roots available across modules.\n * @name roots\n * @type {Object.<string,Root>}\n * @example\n * // pbjs -r myroot -o compiled.js ...\n *\n * // in another module:\n * require(\"./compiled.js\");\n *\n * // in any subsequent module:\n * var root = protobuf.roots[\"myroot\"];\n */\n","\"use strict\";\n\n/**\n * Streaming RPC helpers.\n * @namespace\n */\nvar rpc = exports;\n\n/**\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\n * @typedef RPCImpl\n * @type {function}\n * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\n * @param {Uint8Array} requestData Request data\n * @param {RPCImplCallback} callback Callback function\n * @returns {undefined}\n * @example\n * function rpcImpl(method, requestData, callback) {\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\n *         throw Error(\"no such method\");\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\n *         callback(err, responseData);\n *     });\n * }\n */\n\n/**\n * Node-style callback as used by {@link RPCImpl}.\n * @typedef RPCImplCallback\n * @type {function}\n * @param {Error|null} error Error, if any, otherwise `null`\n * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\n * @returns {undefined}\n */\n\nrpc.Service = require(\"./rpc/service\");\n","\"use strict\";\nmodule.exports = Service;\n\nvar util = require(\"../util/minimal\");\n\n// Extends EventEmitter\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\n\n/**\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\n *\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\n * @typedef rpc.ServiceMethodCallback\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {Error|null} error Error, if any\n * @param {TRes} [response] Response message\n * @returns {undefined}\n */\n\n/**\n * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\n * @typedef rpc.ServiceMethod\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\n * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\n */\n\n/**\n * Constructs a new RPC service instance.\n * @classdesc An RPC service as returned by {@link Service#create}.\n * @exports rpc.Service\n * @extends util.EventEmitter\n * @constructor\n * @param {RPCImpl} rpcImpl RPC implementation\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n */\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\n\n    if (typeof rpcImpl !== \"function\")\n        throw TypeError(\"rpcImpl must be a function\");\n\n    util.EventEmitter.call(this);\n\n    /**\n     * RPC implementation. Becomes `null` once the service is ended.\n     * @type {RPCImpl|null}\n     */\n    this.rpcImpl = rpcImpl;\n\n    /**\n     * Whether requests are length-delimited.\n     * @type {boolean}\n     */\n    this.requestDelimited = Boolean(requestDelimited);\n\n    /**\n     * Whether responses are length-delimited.\n     * @type {boolean}\n     */\n    this.responseDelimited = Boolean(responseDelimited);\n}\n\n/**\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\n * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\n * @param {Constructor<TReq>} requestCtor Request constructor\n * @param {Constructor<TRes>} responseCtor Response constructor\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\n * @returns {undefined}\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n */\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\n\n    if (!request)\n        throw TypeError(\"request must be specified\");\n\n    var self = this;\n    if (!callback)\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\n\n    if (!self.rpcImpl) {\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\n        return undefined;\n    }\n\n    try {\n        return self.rpcImpl(\n            method,\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\n            function rpcCallback(err, response) {\n\n                if (err) {\n                    self.emit(\"error\", err, method);\n                    return callback(err);\n                }\n\n                if (response === null) {\n                    self.end(/* endedByRPC */ true);\n                    return undefined;\n                }\n\n                if (!(response instanceof responseCtor)) {\n                    try {\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\n                    } catch (err) {\n                        self.emit(\"error\", err, method);\n                        return callback(err);\n                    }\n                }\n\n                self.emit(\"data\", response, method);\n                return callback(null, response);\n            }\n        );\n    } catch (err) {\n        self.emit(\"error\", err, method);\n        setTimeout(function() { callback(err); }, 0);\n        return undefined;\n    }\n};\n\n/**\n * Ends this service and emits the `end` event.\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\n * @returns {rpc.Service} `this`\n */\nService.prototype.end = function end(endedByRPC) {\n    if (this.rpcImpl) {\n        if (!endedByRPC) // signal end to rpcImpl\n            this.rpcImpl(null, null, null);\n        this.rpcImpl = null;\n        this.emit(\"end\").off();\n    }\n    return this;\n};\n","\"use strict\";\nmodule.exports = LongBits;\n\nvar util = require(\"../util/minimal\");\n\n/**\n * Constructs new long bits.\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\n * @memberof util\n * @constructor\n * @param {number} lo Low 32 bits, unsigned\n * @param {number} hi High 32 bits, unsigned\n */\nfunction LongBits(lo, hi) {\n\n    // note that the casts below are theoretically unnecessary as of today, but older statically\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\n\n    /**\n     * Low bits.\n     * @type {number}\n     */\n    this.lo = lo >>> 0;\n\n    /**\n     * High bits.\n     * @type {number}\n     */\n    this.hi = hi >>> 0;\n}\n\n/**\n * Zero bits.\n * @memberof util.LongBits\n * @type {util.LongBits}\n */\nvar zero = LongBits.zero = new LongBits(0, 0);\n\nzero.toNumber = function() { return 0; };\nzero.zzEncode = zero.zzDecode = function() { return this; };\nzero.length = function() { return 1; };\n\n/**\n * Zero hash.\n * @memberof util.LongBits\n * @type {string}\n */\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\n\n/**\n * Constructs new long bits from the specified number.\n * @param {number} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.fromNumber = function fromNumber(value) {\n    if (value === 0)\n        return zero;\n    var sign = value < 0;\n    if (sign)\n        value = -value;\n    var lo = value >>> 0,\n        hi = (value - lo) / 4294967296 >>> 0;\n    if (sign) {\n        hi = ~hi >>> 0;\n        lo = ~lo >>> 0;\n        if (++lo > 4294967295) {\n            lo = 0;\n            if (++hi > 4294967295)\n                hi = 0;\n        }\n    }\n    return new LongBits(lo, hi);\n};\n\n/**\n * Constructs new long bits from a number, long or string.\n * @param {Long|number|string} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.from = function from(value) {\n    if (typeof value === \"number\")\n        return LongBits.fromNumber(value);\n    if (util.isString(value)) {\n        /* istanbul ignore else */\n        if (util.Long)\n            value = util.Long.fromString(value);\n        else\n            return LongBits.fromNumber(parseInt(value, 10));\n    }\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\n};\n\n/**\n * Converts this long bits to a possibly unsafe JavaScript number.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {number} Possibly unsafe number\n */\nLongBits.prototype.toNumber = function toNumber(unsigned) {\n    if (!unsigned && this.hi >>> 31) {\n        var lo = ~this.lo + 1 >>> 0,\n            hi = ~this.hi     >>> 0;\n        if (!lo)\n            hi = hi + 1 >>> 0;\n        return -(lo + hi * 4294967296);\n    }\n    return this.lo + this.hi * 4294967296;\n};\n\n/**\n * Converts this long bits to a long.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long} Long\n */\nLongBits.prototype.toLong = function toLong(unsigned) {\n    return util.Long\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\n        /* istanbul ignore next */\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\n};\n\nvar charCodeAt = String.prototype.charCodeAt;\n\n/**\n * Constructs new long bits from the specified 8 characters long hash.\n * @param {string} hash Hash\n * @returns {util.LongBits} Bits\n */\nLongBits.fromHash = function fromHash(hash) {\n    if (hash === zeroHash)\n        return zero;\n    return new LongBits(\n        ( charCodeAt.call(hash, 0)\n        | charCodeAt.call(hash, 1) << 8\n        | charCodeAt.call(hash, 2) << 16\n        | charCodeAt.call(hash, 3) << 24) >>> 0\n    ,\n        ( charCodeAt.call(hash, 4)\n        | charCodeAt.call(hash, 5) << 8\n        | charCodeAt.call(hash, 6) << 16\n        | charCodeAt.call(hash, 7) << 24) >>> 0\n    );\n};\n\n/**\n * Converts this long bits to a 8 characters long hash.\n * @returns {string} Hash\n */\nLongBits.prototype.toHash = function toHash() {\n    return String.fromCharCode(\n        this.lo        & 255,\n        this.lo >>> 8  & 255,\n        this.lo >>> 16 & 255,\n        this.lo >>> 24      ,\n        this.hi        & 255,\n        this.hi >>> 8  & 255,\n        this.hi >>> 16 & 255,\n        this.hi >>> 24\n    );\n};\n\n/**\n * Zig-zag encodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzEncode = function zzEncode() {\n    var mask =   this.hi >> 31;\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Zig-zag decodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzDecode = function zzDecode() {\n    var mask = -(this.lo & 1);\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Calculates the length of this longbits when encoded as a varint.\n * @returns {number} Length\n */\nLongBits.prototype.length = function length() {\n    var part0 =  this.lo,\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\n        part2 =  this.hi >>> 24;\n    return part2 === 0\n         ? part1 === 0\n           ? part0 < 16384\n             ? part0 < 128 ? 1 : 2\n             : part0 < 2097152 ? 3 : 4\n           : part1 < 16384\n             ? part1 < 128 ? 5 : 6\n             : part1 < 2097152 ? 7 : 8\n         : part2 < 128 ? 9 : 10;\n};\n","\"use strict\";\nvar util = exports;\n\n// used to return a Promise where callback is omitted\nutil.asPromise = require(\"@protobufjs/aspromise\");\n\n// converts to / from base64 encoded strings\nutil.base64 = require(\"@protobufjs/base64\");\n\n// base class of rpc.Service\nutil.EventEmitter = require(\"@protobufjs/eventemitter\");\n\n// float handling accross browsers\nutil.float = require(\"@protobufjs/float\");\n\n// requires modules optionally and hides the call from bundlers\nutil.inquire = require(\"@protobufjs/inquire\");\n\n// converts to / from utf8 encoded strings\nutil.utf8 = require(\"@protobufjs/utf8\");\n\n// provides a node-like buffer pool in the browser\nutil.pool = require(\"@protobufjs/pool\");\n\n// utility to work with the low and high bits of a 64 bit value\nutil.LongBits = require(\"./longbits\");\n\n/**\n * Whether running within node or not.\n * @memberof util\n * @type {boolean}\n */\nutil.isNode = Boolean(typeof global !== \"undefined\"\n                   && global\n                   && global.process\n                   && global.process.versions\n                   && global.process.versions.node);\n\n/**\n * Global object reference.\n * @memberof util\n * @type {Object}\n */\nutil.global = util.isNode && global\n           || typeof window !== \"undefined\" && window\n           || typeof self   !== \"undefined\" && self\n           || this; // eslint-disable-line no-invalid-this\n\n/**\n * An immuable empty array.\n * @memberof util\n * @type {Array.<*>}\n * @const\n */\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\n\n/**\n * An immutable empty object.\n * @type {Object}\n * @const\n */\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\n\n/**\n * Tests if the specified value is an integer.\n * @function\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is an integer\n */\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\n};\n\n/**\n * Tests if the specified value is a string.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a string\n */\nutil.isString = function isString(value) {\n    return typeof value === \"string\" || value instanceof String;\n};\n\n/**\n * Tests if the specified value is a non-null object.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a non-null object\n */\nutil.isObject = function isObject(value) {\n    return value && typeof value === \"object\";\n};\n\n/**\n * Checks if a property on a message is considered to be present.\n * This is an alias of {@link util.isSet}.\n * @function\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isset =\n\n/**\n * Checks if a property on a message is considered to be present.\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isSet = function isSet(obj, prop) {\n    var value = obj[prop];\n    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\n    return false;\n};\n\n/**\n * Any compatible Buffer instance.\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\n * @interface Buffer\n * @extends Uint8Array\n */\n\n/**\n * Node's Buffer class if available.\n * @type {Constructor<Buffer>}\n */\nutil.Buffer = (function() {\n    try {\n        var Buffer = util.inquire(\"buffer\").Buffer;\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\n    } catch (e) {\n        /* istanbul ignore next */\n        return null;\n    }\n})();\n\n// Internal alias of or polyfull for Buffer.from.\nutil._Buffer_from = null;\n\n// Internal alias of or polyfill for Buffer.allocUnsafe.\nutil._Buffer_allocUnsafe = null;\n\n/**\n * Creates a new buffer of whatever type supported by the environment.\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\n * @returns {Uint8Array|Buffer} Buffer\n */\nutil.newBuffer = function newBuffer(sizeOrArray) {\n    /* istanbul ignore next */\n    return typeof sizeOrArray === \"number\"\n        ? util.Buffer\n            ? util._Buffer_allocUnsafe(sizeOrArray)\n            : new util.Array(sizeOrArray)\n        : util.Buffer\n            ? util._Buffer_from(sizeOrArray)\n            : typeof Uint8Array === \"undefined\"\n                ? sizeOrArray\n                : new Uint8Array(sizeOrArray);\n};\n\n/**\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\n * @type {Constructor<Uint8Array>}\n */\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\n\n/**\n * Any compatible Long instance.\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\n * @interface Long\n * @property {number} low Low bits\n * @property {number} high High bits\n * @property {boolean} unsigned Whether unsigned or not\n */\n\n/**\n * Long.js's Long class if available.\n * @type {Constructor<Long>}\n */\nutil.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long\n         || /* istanbul ignore next */ util.global.Long\n         || util.inquire(\"long\");\n\n/**\n * Regular expression used to verify 2 bit (`bool`) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key2Re = /^true|false|0|1$/;\n\n/**\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\n\n/**\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\n\n/**\n * Converts a number or long to an 8 characters long hash string.\n * @param {Long|number} value Value to convert\n * @returns {string} Hash\n */\nutil.longToHash = function longToHash(value) {\n    return value\n        ? util.LongBits.from(value).toHash()\n        : util.LongBits.zeroHash;\n};\n\n/**\n * Converts an 8 characters long hash string to a long or number.\n * @param {string} hash Hash\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long|number} Original value\n */\nutil.longFromHash = function longFromHash(hash, unsigned) {\n    var bits = util.LongBits.fromHash(hash);\n    if (util.Long)\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\n    return bits.toNumber(Boolean(unsigned));\n};\n\n/**\n * Merges the properties of the source object into the destination object.\n * @memberof util\n * @param {Object.<string,*>} dst Destination object\n * @param {Object.<string,*>} src Source object\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\n * @returns {Object.<string,*>} Destination object\n */\nfunction merge(dst, src, ifNotSet) { // used by converters\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\n        if (dst[keys[i]] === undefined || !ifNotSet)\n            dst[keys[i]] = src[keys[i]];\n    return dst;\n}\n\nutil.merge = merge;\n\n/**\n * Converts the first character of a string to lower case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */\nutil.lcFirst = function lcFirst(str) {\n    return str.charAt(0).toLowerCase() + str.substring(1);\n};\n\n/**\n * Creates a custom error constructor.\n * @memberof util\n * @param {string} name Error name\n * @returns {Constructor<Error>} Custom error constructor\n */\nfunction newError(name) {\n\n    function CustomError(message, properties) {\n\n        if (!(this instanceof CustomError))\n            return new CustomError(message, properties);\n\n        // Error.call(this, message);\n        // ^ just returns a new error instance because the ctor can be called as a function\n\n        Object.defineProperty(this, \"message\", { get: function() { return message; } });\n\n        /* istanbul ignore next */\n        if (Error.captureStackTrace) // node\n            Error.captureStackTrace(this, CustomError);\n        else\n            Object.defineProperty(this, \"stack\", { value: new Error().stack || \"\" });\n\n        if (properties)\n            merge(this, properties);\n    }\n\n    CustomError.prototype = Object.create(Error.prototype, {\n        constructor: {\n            value: CustomError,\n            writable: true,\n            enumerable: false,\n            configurable: true,\n        },\n        name: {\n            get: function get() { return name; },\n            set: undefined,\n            enumerable: false,\n            // configurable: false would accurately preserve the behavior of\n            // the original, but I'm guessing that was not intentional.\n            // For an actual error subclass, this property would\n            // be configurable.\n            configurable: true,\n        },\n        toString: {\n            value: function value() { return this.name + \": \" + this.message; },\n            writable: true,\n            enumerable: false,\n            configurable: true,\n        },\n    });\n\n    return CustomError;\n}\n\nutil.newError = newError;\n\n/**\n * Constructs a new protocol error.\n * @classdesc Error subclass indicating a protocol specifc error.\n * @memberof util\n * @extends Error\n * @template T extends Message<T>\n * @constructor\n * @param {string} message Error message\n * @param {Object.<string,*>} [properties] Additional properties\n * @example\n * try {\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\n * } catch (e) {\n *     if (e instanceof ProtocolError && e.instance)\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\n * }\n */\nutil.ProtocolError = newError(\"ProtocolError\");\n\n/**\n * So far decoded message instance.\n * @name util.ProtocolError#instance\n * @type {Message<T>}\n */\n\n/**\n * A OneOf getter as returned by {@link util.oneOfGetter}.\n * @typedef OneOfGetter\n * @type {function}\n * @returns {string|undefined} Set field name, if any\n */\n\n/**\n * Builds a getter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfGetter} Unbound getter\n */\nutil.oneOfGetter = function getOneOf(fieldNames) {\n    var fieldMap = {};\n    for (var i = 0; i < fieldNames.length; ++i)\n        fieldMap[fieldNames[i]] = 1;\n\n    /**\n     * @returns {string|undefined} Set field name, if any\n     * @this Object\n     * @ignore\n     */\n    return function() { // eslint-disable-line consistent-return\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\n                return keys[i];\n    };\n};\n\n/**\n * A OneOf setter as returned by {@link util.oneOfSetter}.\n * @typedef OneOfSetter\n * @type {function}\n * @param {string|undefined} value Field name\n * @returns {undefined}\n */\n\n/**\n * Builds a setter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfSetter} Unbound setter\n */\nutil.oneOfSetter = function setOneOf(fieldNames) {\n\n    /**\n     * @param {string} name Field name\n     * @returns {undefined}\n     * @this Object\n     * @ignore\n     */\n    return function(name) {\n        for (var i = 0; i < fieldNames.length; ++i)\n            if (fieldNames[i] !== name)\n                delete this[fieldNames[i]];\n    };\n};\n\n/**\n * Default conversion options used for {@link Message#toJSON} implementations.\n *\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\n *\n * - Longs become strings\n * - Enums become string keys\n * - Bytes become base64 encoded strings\n * - (Sub-)Messages become plain objects\n * - Maps become plain objects with all string keys\n * - Repeated fields become arrays\n * - NaN and Infinity for float and double fields become strings\n *\n * @type {IConversionOptions}\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\n */\nutil.toJSONOptions = {\n    longs: String,\n    enums: String,\n    bytes: String,\n    json: true\n};\n\n// Sets up buffer utility according to the environment (called in index-minimal)\nutil._configure = function() {\n    var Buffer = util.Buffer;\n    /* istanbul ignore if */\n    if (!Buffer) {\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\n        return;\n    }\n    // because node 4.x buffers are incompatible & immutable\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\n        /* istanbul ignore next */\n        function Buffer_from(value, encoding) {\n            return new Buffer(value, encoding);\n        };\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\n        /* istanbul ignore next */\n        function Buffer_allocUnsafe(size) {\n            return new Buffer(size);\n        };\n};\n","\"use strict\";\nmodule.exports = Writer;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferWriter; // cyclic\n\nvar LongBits  = util.LongBits,\n    base64    = util.base64,\n    utf8      = util.utf8;\n\n/**\n * Constructs a new writer operation instance.\n * @classdesc Scheduled writer operation.\n * @constructor\n * @param {function(*, Uint8Array, number)} fn Function to call\n * @param {number} len Value byte length\n * @param {*} val Value to write\n * @ignore\n */\nfunction Op(fn, len, val) {\n\n    /**\n     * Function to call.\n     * @type {function(Uint8Array, number, *)}\n     */\n    this.fn = fn;\n\n    /**\n     * Value byte length.\n     * @type {number}\n     */\n    this.len = len;\n\n    /**\n     * Next operation.\n     * @type {Writer.Op|undefined}\n     */\n    this.next = undefined;\n\n    /**\n     * Value to write.\n     * @type {*}\n     */\n    this.val = val; // type varies\n}\n\n/* istanbul ignore next */\nfunction noop() {} // eslint-disable-line no-empty-function\n\n/**\n * Constructs a new writer state instance.\n * @classdesc Copied writer state.\n * @memberof Writer\n * @constructor\n * @param {Writer} writer Writer to copy state from\n * @ignore\n */\nfunction State(writer) {\n\n    /**\n     * Current head.\n     * @type {Writer.Op}\n     */\n    this.head = writer.head;\n\n    /**\n     * Current tail.\n     * @type {Writer.Op}\n     */\n    this.tail = writer.tail;\n\n    /**\n     * Current buffer length.\n     * @type {number}\n     */\n    this.len = writer.len;\n\n    /**\n     * Next state.\n     * @type {State|null}\n     */\n    this.next = writer.states;\n}\n\n/**\n * Constructs a new writer instance.\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n */\nfunction Writer() {\n\n    /**\n     * Current length.\n     * @type {number}\n     */\n    this.len = 0;\n\n    /**\n     * Operations head.\n     * @type {Object}\n     */\n    this.head = new Op(noop, 0, 0);\n\n    /**\n     * Operations tail\n     * @type {Object}\n     */\n    this.tail = this.head;\n\n    /**\n     * Linked forked states.\n     * @type {Object|null}\n     */\n    this.states = null;\n\n    // When a value is written, the writer calculates its byte length and puts it into a linked\n    // list of operations to perform when finish() is called. This both allows us to allocate\n    // buffers of the exact required size and reduces the amount of work we have to do compared\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\n    // part is just a linked list walk calling operations with already prepared values.\n}\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup() {\n            return (Writer.create = function create_buffer() {\n                return new BufferWriter();\n            })();\n        }\n        /* istanbul ignore next */\n        : function create_array() {\n            return new Writer();\n        };\n};\n\n/**\n * Creates a new writer.\n * @function\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\n */\nWriter.create = create();\n\n/**\n * Allocates a buffer of the specified size.\n * @param {number} size Buffer size\n * @returns {Uint8Array} Buffer\n */\nWriter.alloc = function alloc(size) {\n    return new util.Array(size);\n};\n\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\n/* istanbul ignore else */\nif (util.Array !== Array)\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\n\n/**\n * Pushes a new operation to the queue.\n * @param {function(Uint8Array, number, *)} fn Function to call\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @returns {Writer} `this`\n * @private\n */\nWriter.prototype._push = function push(fn, len, val) {\n    this.tail = this.tail.next = new Op(fn, len, val);\n    this.len += len;\n    return this;\n};\n\nfunction writeByte(val, buf, pos) {\n    buf[pos] = val & 255;\n}\n\nfunction writeVarint32(val, buf, pos) {\n    while (val > 127) {\n        buf[pos++] = val & 127 | 128;\n        val >>>= 7;\n    }\n    buf[pos] = val;\n}\n\n/**\n * Constructs a new varint writer operation instance.\n * @classdesc Scheduled varint writer operation.\n * @extends Op\n * @constructor\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @ignore\n */\nfunction VarintOp(len, val) {\n    this.len = len;\n    this.next = undefined;\n    this.val = val;\n}\n\nVarintOp.prototype = Object.create(Op.prototype);\nVarintOp.prototype.fn = writeVarint32;\n\n/**\n * Writes an unsigned 32 bit value as a varint.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.uint32 = function write_uint32(value) {\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\n    this.len += (this.tail = this.tail.next = new VarintOp(\n        (value = value >>> 0)\n                < 128       ? 1\n        : value < 16384     ? 2\n        : value < 2097152   ? 3\n        : value < 268435456 ? 4\n        :                     5,\n    value)).len;\n    return this;\n};\n\n/**\n * Writes a signed 32 bit value as a varint.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.int32 = function write_int32(value) {\n    return value < 0\n        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\n        : this.uint32(value);\n};\n\n/**\n * Writes a 32 bit value as a varint, zig-zag encoded.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sint32 = function write_sint32(value) {\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\n};\n\nfunction writeVarint64(val, buf, pos) {\n    while (val.hi) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\n        val.hi >>>= 7;\n    }\n    while (val.lo > 127) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = val.lo >>> 7;\n    }\n    buf[pos++] = val.lo;\n}\n\n/**\n * Writes an unsigned 64 bit value as a varint.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.uint64 = function write_uint64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a signed 64 bit value as a varint.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.int64 = Writer.prototype.uint64;\n\n/**\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sint64 = function write_sint64(value) {\n    var bits = LongBits.from(value).zzEncode();\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a boolish value as a varint.\n * @param {boolean} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bool = function write_bool(value) {\n    return this._push(writeByte, 1, value ? 1 : 0);\n};\n\nfunction writeFixed32(val, buf, pos) {\n    buf[pos    ] =  val         & 255;\n    buf[pos + 1] =  val >>> 8   & 255;\n    buf[pos + 2] =  val >>> 16  & 255;\n    buf[pos + 3] =  val >>> 24;\n}\n\n/**\n * Writes an unsigned 32 bit value as fixed 32 bits.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.fixed32 = function write_fixed32(value) {\n    return this._push(writeFixed32, 4, value >>> 0);\n};\n\n/**\n * Writes a signed 32 bit value as fixed 32 bits.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\n\n/**\n * Writes an unsigned 64 bit value as fixed 64 bits.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.fixed64 = function write_fixed64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\n};\n\n/**\n * Writes a signed 64 bit value as fixed 64 bits.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\n\n/**\n * Writes a float (32 bit).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.float = function write_float(value) {\n    return this._push(util.float.writeFloatLE, 4, value);\n};\n\n/**\n * Writes a double (64 bit float).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.double = function write_double(value) {\n    return this._push(util.float.writeDoubleLE, 8, value);\n};\n\nvar writeBytes = util.Array.prototype.set\n    ? function writeBytes_set(val, buf, pos) {\n        buf.set(val, pos); // also works for plain array values\n    }\n    /* istanbul ignore next */\n    : function writeBytes_for(val, buf, pos) {\n        for (var i = 0; i < val.length; ++i)\n            buf[pos + i] = val[i];\n    };\n\n/**\n * Writes a sequence of bytes.\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bytes = function write_bytes(value) {\n    var len = value.length >>> 0;\n    if (!len)\n        return this._push(writeByte, 1, 0);\n    if (util.isString(value)) {\n        var buf = Writer.alloc(len = base64.length(value));\n        base64.decode(value, buf, 0);\n        value = buf;\n    }\n    return this.uint32(len)._push(writeBytes, len, value);\n};\n\n/**\n * Writes a string.\n * @param {string} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.string = function write_string(value) {\n    var len = utf8.length(value);\n    return len\n        ? this.uint32(len)._push(utf8.write, len, value)\n        : this._push(writeByte, 1, 0);\n};\n\n/**\n * Forks this writer's state by pushing it to a stack.\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\n * @returns {Writer} `this`\n */\nWriter.prototype.fork = function fork() {\n    this.states = new State(this);\n    this.head = this.tail = new Op(noop, 0, 0);\n    this.len = 0;\n    return this;\n};\n\n/**\n * Resets this instance to the last state.\n * @returns {Writer} `this`\n */\nWriter.prototype.reset = function reset() {\n    if (this.states) {\n        this.head   = this.states.head;\n        this.tail   = this.states.tail;\n        this.len    = this.states.len;\n        this.states = this.states.next;\n    } else {\n        this.head = this.tail = new Op(noop, 0, 0);\n        this.len  = 0;\n    }\n    return this;\n};\n\n/**\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\n * @returns {Writer} `this`\n */\nWriter.prototype.ldelim = function ldelim() {\n    var head = this.head,\n        tail = this.tail,\n        len  = this.len;\n    this.reset().uint32(len);\n    if (len) {\n        this.tail.next = head.next; // skip noop\n        this.tail = tail;\n        this.len += len;\n    }\n    return this;\n};\n\n/**\n * Finishes the write operation.\n * @returns {Uint8Array} Finished buffer\n */\nWriter.prototype.finish = function finish() {\n    var head = this.head.next, // skip noop\n        buf  = this.constructor.alloc(this.len),\n        pos  = 0;\n    while (head) {\n        head.fn(head.val, buf, pos);\n        pos += head.len;\n        head = head.next;\n    }\n    // this.head = this.tail = null;\n    return buf;\n};\n\nWriter._configure = function(BufferWriter_) {\n    BufferWriter = BufferWriter_;\n    Writer.create = create();\n    BufferWriter._configure();\n};\n","\"use strict\";\nmodule.exports = BufferWriter;\n\n// extends Writer\nvar Writer = require(\"./writer\");\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer writer instance.\n * @classdesc Wire format writer using node buffers.\n * @extends Writer\n * @constructor\n */\nfunction BufferWriter() {\n    Writer.call(this);\n}\n\nBufferWriter._configure = function () {\n    /**\n     * Allocates a buffer of the specified size.\n     * @function\n     * @param {number} size Buffer size\n     * @returns {Buffer} Buffer\n     */\n    BufferWriter.alloc = util._Buffer_allocUnsafe;\n\n    BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === \"set\"\n        ? function writeBytesBuffer_set(val, buf, pos) {\n          buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\n          // also works for plain array values\n        }\n        /* istanbul ignore next */\n        : function writeBytesBuffer_copy(val, buf, pos) {\n          if (val.copy) // Buffer values\n            val.copy(buf, pos, 0, val.length);\n          else for (var i = 0; i < val.length;) // plain array values\n            buf[pos++] = val[i++];\n        };\n};\n\n\n/**\n * @override\n */\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\n    if (util.isString(value))\n        value = util._Buffer_from(value, \"base64\");\n    var len = value.length >>> 0;\n    this.uint32(len);\n    if (len)\n        this._push(BufferWriter.writeBytesBuffer, len, value);\n    return this;\n};\n\nfunction writeStringBuffer(val, buf, pos) {\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\n        util.utf8.write(val, buf, pos);\n    else if (buf.utf8Write)\n        buf.utf8Write(val, pos);\n    else\n        buf.write(val, pos);\n}\n\n/**\n * @override\n */\nBufferWriter.prototype.string = function write_string_buffer(value) {\n    var len = util.Buffer.byteLength(value);\n    this.uint32(len);\n    if (len)\n        this._push(writeStringBuffer, len, value);\n    return this;\n};\n\n\n/**\n * Finishes the write operation.\n * @name BufferWriter#finish\n * @function\n * @returns {Buffer} Finished buffer\n */\n\nBufferWriter._configure();\n","// GENERATED FILE. DO NOT EDIT.\nvar Long = (function(exports) {\n  \"use strict\";\n  \n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  \n  /**\n   * @license\n   * Copyright 2009 The Closure Library Authors\n   * Copyright 2020 Daniel Wirtz / The long.js Authors.\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   *\n   * SPDX-License-Identifier: Apache-2.0\n   */\n  // WebAssembly optimizations to do native i64 multiplication and divide\n  var wasm = null;\n  \n  try {\n    wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11])), {}).exports;\n  } catch (e) {// no wasm support :(\n  }\n  /**\n   * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\n   *  See the from* functions below for more convenient ways of constructing Longs.\n   * @exports Long\n   * @class A Long class for representing a 64 bit two's-complement integer value.\n   * @param {number} low The low (signed) 32 bits of the long\n   * @param {number} high The high (signed) 32 bits of the long\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @constructor\n   */\n  \n  \n  function Long(low, high, unsigned) {\n    /**\n     * The low 32 bits as a signed value.\n     * @type {number}\n     */\n    this.low = low | 0;\n    /**\n     * The high 32 bits as a signed value.\n     * @type {number}\n     */\n  \n    this.high = high | 0;\n    /**\n     * Whether unsigned or not.\n     * @type {boolean}\n     */\n  \n    this.unsigned = !!unsigned;\n  } // The internal representation of a long is the two given signed, 32-bit values.\n  // We use 32-bit pieces because these are the size of integers on which\n  // Javascript performs bit-operations.  For operations like addition and\n  // multiplication, we split each number into 16 bit pieces, which can easily be\n  // multiplied within Javascript's floating-point representation without overflow\n  // or change in sign.\n  //\n  // In the algorithms below, we frequently reduce the negative case to the\n  // positive case by negating the input(s) and then post-processing the result.\n  // Note that we must ALWAYS check specially whether those values are MIN_VALUE\n  // (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n  // a positive number, it overflows back into a negative).  Not handling this\n  // case would often result in infinite recursion.\n  //\n  // Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\n  // methods on which they depend.\n  \n  /**\n   * An indicator used to reliably determine if an object is a Long or not.\n   * @type {boolean}\n   * @const\n   * @private\n   */\n  \n  \n  Long.prototype.__isLong__;\n  Object.defineProperty(Long.prototype, \"__isLong__\", {\n    value: true\n  });\n  /**\n   * @function\n   * @param {*} obj Object\n   * @returns {boolean}\n   * @inner\n   */\n  \n  function isLong(obj) {\n    return (obj && obj[\"__isLong__\"]) === true;\n  }\n  /**\n   * @function\n   * @param {*} value number\n   * @returns {number}\n   * @inner\n   */\n  \n  \n  function ctz32(value) {\n    var c = Math.clz32(value & -value);\n    return value ? 31 - c : c;\n  }\n  /**\n   * Tests if the specified object is a Long.\n   * @function\n   * @param {*} obj Object\n   * @returns {boolean}\n   */\n  \n  \n  Long.isLong = isLong;\n  /**\n   * A cache of the Long representations of small integer values.\n   * @type {!Object}\n   * @inner\n   */\n  \n  var INT_CACHE = {};\n  /**\n   * A cache of the Long representations of small unsigned integer values.\n   * @type {!Object}\n   * @inner\n   */\n  \n  var UINT_CACHE = {};\n  /**\n   * @param {number} value\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromInt(value, unsigned) {\n    var obj, cachedObj, cache;\n  \n    if (unsigned) {\n      value >>>= 0;\n  \n      if (cache = 0 <= value && value < 256) {\n        cachedObj = UINT_CACHE[value];\n        if (cachedObj) return cachedObj;\n      }\n  \n      obj = fromBits(value, 0, true);\n      if (cache) UINT_CACHE[value] = obj;\n      return obj;\n    } else {\n      value |= 0;\n  \n      if (cache = -128 <= value && value < 128) {\n        cachedObj = INT_CACHE[value];\n        if (cachedObj) return cachedObj;\n      }\n  \n      obj = fromBits(value, value < 0 ? -1 : 0, false);\n      if (cache) INT_CACHE[value] = obj;\n      return obj;\n    }\n  }\n  /**\n   * Returns a Long representing the given 32 bit integer value.\n   * @function\n   * @param {number} value The 32 bit integer in question\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromInt = fromInt;\n  /**\n   * @param {number} value\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromNumber(value, unsigned) {\n    if (isNaN(value)) return unsigned ? UZERO : ZERO;\n  \n    if (unsigned) {\n      if (value < 0) return UZERO;\n      if (value >= TWO_PWR_64_DBL) return MAX_UNSIGNED_VALUE;\n    } else {\n      if (value <= -TWO_PWR_63_DBL) return MIN_VALUE;\n      if (value + 1 >= TWO_PWR_63_DBL) return MAX_VALUE;\n    }\n  \n    if (value < 0) return fromNumber(-value, unsigned).neg();\n    return fromBits(value % TWO_PWR_32_DBL | 0, value / TWO_PWR_32_DBL | 0, unsigned);\n  }\n  /**\n   * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n   * @function\n   * @param {number} value The number in question\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromNumber = fromNumber;\n  /**\n   * @param {number} lowBits\n   * @param {number} highBits\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromBits(lowBits, highBits, unsigned) {\n    return new Long(lowBits, highBits, unsigned);\n  }\n  /**\n   * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\n   *  assumed to use 32 bits.\n   * @function\n   * @param {number} lowBits The low 32 bits\n   * @param {number} highBits The high 32 bits\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBits = fromBits;\n  /**\n   * @function\n   * @param {number} base\n   * @param {number} exponent\n   * @returns {number}\n   * @inner\n   */\n  \n  var pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\n  \n  /**\n   * @param {string} str\n   * @param {(boolean|number)=} unsigned\n   * @param {number=} radix\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromString(str, unsigned, radix) {\n    if (str.length === 0) throw Error('empty string');\n  \n    if (typeof unsigned === 'number') {\n      // For goog.math.long compatibility\n      radix = unsigned;\n      unsigned = false;\n    } else {\n      unsigned = !!unsigned;\n    }\n  \n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\") return unsigned ? UZERO : ZERO;\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix) throw RangeError('radix');\n    var p;\n    if ((p = str.indexOf('-')) > 0) throw Error('interior hyphen');else if (p === 0) {\n      return fromString(str.substring(1), unsigned, radix).neg();\n    } // Do several (8) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n  \n    var radixToPower = fromNumber(pow_dbl(radix, 8));\n    var result = ZERO;\n  \n    for (var i = 0; i < str.length; i += 8) {\n      var size = Math.min(8, str.length - i),\n          value = parseInt(str.substring(i, i + size), radix);\n  \n      if (size < 8) {\n        var power = fromNumber(pow_dbl(radix, size));\n        result = result.mul(power).add(fromNumber(value));\n      } else {\n        result = result.mul(radixToPower);\n        result = result.add(fromNumber(value));\n      }\n    }\n  \n    result.unsigned = unsigned;\n    return result;\n  }\n  /**\n   * Returns a Long representation of the given string, written using the specified radix.\n   * @function\n   * @param {string} str The textual representation of the Long\n   * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\n   * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromString = fromString;\n  /**\n   * @function\n   * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromValue(val, unsigned) {\n    if (typeof val === 'number') return fromNumber(val, unsigned);\n    if (typeof val === 'string') return fromString(val, unsigned); // Throws for non-objects, converts non-instanceof Long:\n  \n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\n  }\n  /**\n   * Converts the specified value to a Long using the appropriate from* function for its type.\n   * @function\n   * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long}\n   */\n  \n  \n  Long.fromValue = fromValue; // NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\n  // no runtime penalty for these.\n  \n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_16_DBL = 1 << 16;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_24_DBL = 1 << 24;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\n  /**\n   * @type {!Long}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var ZERO = fromInt(0);\n  /**\n   * Signed zero.\n   * @type {!Long}\n   */\n  \n  Long.ZERO = ZERO;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var UZERO = fromInt(0, true);\n  /**\n   * Unsigned zero.\n   * @type {!Long}\n   */\n  \n  Long.UZERO = UZERO;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var ONE = fromInt(1);\n  /**\n   * Signed one.\n   * @type {!Long}\n   */\n  \n  Long.ONE = ONE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var UONE = fromInt(1, true);\n  /**\n   * Unsigned one.\n   * @type {!Long}\n   */\n  \n  Long.UONE = UONE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var NEG_ONE = fromInt(-1);\n  /**\n   * Signed negative one.\n   * @type {!Long}\n   */\n  \n  Long.NEG_ONE = NEG_ONE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var MAX_VALUE = fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0, false);\n  /**\n   * Maximum signed value.\n   * @type {!Long}\n   */\n  \n  Long.MAX_VALUE = MAX_VALUE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF | 0, 0xFFFFFFFF | 0, true);\n  /**\n   * Maximum unsigned value.\n   * @type {!Long}\n   */\n  \n  Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var MIN_VALUE = fromBits(0, 0x80000000 | 0, false);\n  /**\n   * Minimum signed value.\n   * @type {!Long}\n   */\n  \n  Long.MIN_VALUE = MIN_VALUE;\n  /**\n   * @alias Long.prototype\n   * @inner\n   */\n  \n  var LongPrototype = Long.prototype;\n  /**\n   * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\n   * @this {!Long}\n   * @returns {number}\n   */\n  \n  LongPrototype.toInt = function toInt() {\n    return this.unsigned ? this.low >>> 0 : this.low;\n  };\n  /**\n   * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\n   * @this {!Long}\n   * @returns {number}\n   */\n  \n  \n  LongPrototype.toNumber = function toNumber() {\n    if (this.unsigned) return (this.high >>> 0) * TWO_PWR_32_DBL + (this.low >>> 0);\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\n  };\n  /**\n   * Converts the Long to a string written in the specified radix.\n   * @this {!Long}\n   * @param {number=} radix Radix (2-36), defaults to 10\n   * @returns {string}\n   * @override\n   * @throws {RangeError} If `radix` is out of range\n   */\n  \n  \n  LongPrototype.toString = function toString(radix) {\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix) throw RangeError('radix');\n    if (this.isZero()) return '0';\n  \n    if (this.isNegative()) {\n      // Unsigned Longs are never negative\n      if (this.eq(MIN_VALUE)) {\n        // We need to change the Long value before it can be negated, so we remove\n        // the bottom-most digit in this base and then recurse to do the rest.\n        var radixLong = fromNumber(radix),\n            div = this.div(radixLong),\n            rem1 = div.mul(radixLong).sub(this);\n        return div.toString(radix) + rem1.toInt().toString(radix);\n      } else return '-' + this.neg().toString(radix);\n    } // Do several (6) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n  \n  \n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\n        rem = this;\n    var result = '';\n  \n    while (true) {\n      var remDiv = rem.div(radixToPower),\n          intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\n          digits = intval.toString(radix);\n      rem = remDiv;\n      if (rem.isZero()) return digits + result;else {\n        while (digits.length < 6) digits = '0' + digits;\n  \n        result = '' + digits + result;\n      }\n    }\n  };\n  /**\n   * Gets the high 32 bits as a signed integer.\n   * @this {!Long}\n   * @returns {number} Signed high bits\n   */\n  \n  \n  LongPrototype.getHighBits = function getHighBits() {\n    return this.high;\n  };\n  /**\n   * Gets the high 32 bits as an unsigned integer.\n   * @this {!Long}\n   * @returns {number} Unsigned high bits\n   */\n  \n  \n  LongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\n    return this.high >>> 0;\n  };\n  /**\n   * Gets the low 32 bits as a signed integer.\n   * @this {!Long}\n   * @returns {number} Signed low bits\n   */\n  \n  \n  LongPrototype.getLowBits = function getLowBits() {\n    return this.low;\n  };\n  /**\n   * Gets the low 32 bits as an unsigned integer.\n   * @this {!Long}\n   * @returns {number} Unsigned low bits\n   */\n  \n  \n  LongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\n    return this.low >>> 0;\n  };\n  /**\n   * Gets the number of bits needed to represent the absolute value of this Long.\n   * @this {!Long}\n   * @returns {number}\n   */\n  \n  \n  LongPrototype.getNumBitsAbs = function getNumBitsAbs() {\n    if (this.isNegative()) // Unsigned Longs are never negative\n      return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\n    var val = this.high != 0 ? this.high : this.low;\n  \n    for (var bit = 31; bit > 0; bit--) if ((val & 1 << bit) != 0) break;\n  \n    return this.high != 0 ? bit + 33 : bit + 1;\n  };\n  /**\n   * Tests if this Long's value equals zero.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isZero = function isZero() {\n    return this.high === 0 && this.low === 0;\n  };\n  /**\n   * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.eqz = LongPrototype.isZero;\n  /**\n   * Tests if this Long's value is negative.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  LongPrototype.isNegative = function isNegative() {\n    return !this.unsigned && this.high < 0;\n  };\n  /**\n   * Tests if this Long's value is positive or zero.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isPositive = function isPositive() {\n    return this.unsigned || this.high >= 0;\n  };\n  /**\n   * Tests if this Long's value is odd.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isOdd = function isOdd() {\n    return (this.low & 1) === 1;\n  };\n  /**\n   * Tests if this Long's value is even.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isEven = function isEven() {\n    return (this.low & 1) === 0;\n  };\n  /**\n   * Tests if this Long's value equals the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.equals = function equals(other) {\n    if (!isLong(other)) other = fromValue(other);\n    if (this.unsigned !== other.unsigned && this.high >>> 31 === 1 && other.high >>> 31 === 1) return false;\n    return this.high === other.high && this.low === other.low;\n  };\n  /**\n   * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.eq = LongPrototype.equals;\n  /**\n   * Tests if this Long's value differs from the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.notEquals = function notEquals(other) {\n    return !this.eq(\n    /* validates */\n    other);\n  };\n  /**\n   * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.neq = LongPrototype.notEquals;\n  /**\n   * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.ne = LongPrototype.notEquals;\n  /**\n   * Tests if this Long's value is less than the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.lessThan = function lessThan(other) {\n    return this.comp(\n    /* validates */\n    other) < 0;\n  };\n  /**\n   * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.lt = LongPrototype.lessThan;\n  /**\n   * Tests if this Long's value is less than or equal the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\n    return this.comp(\n    /* validates */\n    other) <= 0;\n  };\n  /**\n   * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.lte = LongPrototype.lessThanOrEqual;\n  /**\n   * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.le = LongPrototype.lessThanOrEqual;\n  /**\n   * Tests if this Long's value is greater than the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.greaterThan = function greaterThan(other) {\n    return this.comp(\n    /* validates */\n    other) > 0;\n  };\n  /**\n   * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.gt = LongPrototype.greaterThan;\n  /**\n   * Tests if this Long's value is greater than or equal the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\n    return this.comp(\n    /* validates */\n    other) >= 0;\n  };\n  /**\n   * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.gte = LongPrototype.greaterThanOrEqual;\n  /**\n   * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.ge = LongPrototype.greaterThanOrEqual;\n  /**\n   * Compares this Long's value with the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n   *  if the given one is greater\n   */\n  \n  LongPrototype.compare = function compare(other) {\n    if (!isLong(other)) other = fromValue(other);\n    if (this.eq(other)) return 0;\n    var thisNeg = this.isNegative(),\n        otherNeg = other.isNegative();\n    if (thisNeg && !otherNeg) return -1;\n    if (!thisNeg && otherNeg) return 1; // At this point the sign bits are the same\n  \n    if (!this.unsigned) return this.sub(other).isNegative() ? -1 : 1; // Both are positive if at least one is unsigned\n  \n    return other.high >>> 0 > this.high >>> 0 || other.high === this.high && other.low >>> 0 > this.low >>> 0 ? -1 : 1;\n  };\n  /**\n   * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n   *  if the given one is greater\n   */\n  \n  \n  LongPrototype.comp = LongPrototype.compare;\n  /**\n   * Negates this Long's value.\n   * @this {!Long}\n   * @returns {!Long} Negated Long\n   */\n  \n  LongPrototype.negate = function negate() {\n    if (!this.unsigned && this.eq(MIN_VALUE)) return MIN_VALUE;\n    return this.not().add(ONE);\n  };\n  /**\n   * Negates this Long's value. This is an alias of {@link Long#negate}.\n   * @function\n   * @returns {!Long} Negated Long\n   */\n  \n  \n  LongPrototype.neg = LongPrototype.negate;\n  /**\n   * Returns the sum of this and the specified Long.\n   * @this {!Long}\n   * @param {!Long|number|string} addend Addend\n   * @returns {!Long} Sum\n   */\n  \n  LongPrototype.add = function add(addend) {\n    if (!isLong(addend)) addend = fromValue(addend); // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n  \n    var a48 = this.high >>> 16;\n    var a32 = this.high & 0xFFFF;\n    var a16 = this.low >>> 16;\n    var a00 = this.low & 0xFFFF;\n    var b48 = addend.high >>> 16;\n    var b32 = addend.high & 0xFFFF;\n    var b16 = addend.low >>> 16;\n    var b00 = addend.low & 0xFFFF;\n    var c48 = 0,\n        c32 = 0,\n        c16 = 0,\n        c00 = 0;\n    c00 += a00 + b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 + b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 + b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 + b48;\n    c48 &= 0xFFFF;\n    return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);\n  };\n  /**\n   * Returns the difference of this and the specified Long.\n   * @this {!Long}\n   * @param {!Long|number|string} subtrahend Subtrahend\n   * @returns {!Long} Difference\n   */\n  \n  \n  LongPrototype.subtract = function subtract(subtrahend) {\n    if (!isLong(subtrahend)) subtrahend = fromValue(subtrahend);\n    return this.add(subtrahend.neg());\n  };\n  /**\n   * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\n   * @function\n   * @param {!Long|number|string} subtrahend Subtrahend\n   * @returns {!Long} Difference\n   */\n  \n  \n  LongPrototype.sub = LongPrototype.subtract;\n  /**\n   * Returns the product of this and the specified Long.\n   * @this {!Long}\n   * @param {!Long|number|string} multiplier Multiplier\n   * @returns {!Long} Product\n   */\n  \n  LongPrototype.multiply = function multiply(multiplier) {\n    if (this.isZero()) return this;\n    if (!isLong(multiplier)) multiplier = fromValue(multiplier); // use wasm support if present\n  \n    if (wasm) {\n      var low = wasm[\"mul\"](this.low, this.high, multiplier.low, multiplier.high);\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n    }\n  \n    if (multiplier.isZero()) return this.unsigned ? UZERO : ZERO;\n    if (this.eq(MIN_VALUE)) return multiplier.isOdd() ? MIN_VALUE : ZERO;\n    if (multiplier.eq(MIN_VALUE)) return this.isOdd() ? MIN_VALUE : ZERO;\n  \n    if (this.isNegative()) {\n      if (multiplier.isNegative()) return this.neg().mul(multiplier.neg());else return this.neg().mul(multiplier).neg();\n    } else if (multiplier.isNegative()) return this.mul(multiplier.neg()).neg(); // If both longs are small, use float multiplication\n  \n  \n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24)) return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned); // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n    // We can skip products that would overflow.\n  \n    var a48 = this.high >>> 16;\n    var a32 = this.high & 0xFFFF;\n    var a16 = this.low >>> 16;\n    var a00 = this.low & 0xFFFF;\n    var b48 = multiplier.high >>> 16;\n    var b32 = multiplier.high & 0xFFFF;\n    var b16 = multiplier.low >>> 16;\n    var b00 = multiplier.low & 0xFFFF;\n    var c48 = 0,\n        c32 = 0,\n        c16 = 0,\n        c00 = 0;\n    c00 += a00 * b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 * b00;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c16 += a00 * b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 * b00;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a16 * b16;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a00 * b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n    c48 &= 0xFFFF;\n    return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);\n  };\n  /**\n   * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\n   * @function\n   * @param {!Long|number|string} multiplier Multiplier\n   * @returns {!Long} Product\n   */\n  \n  \n  LongPrototype.mul = LongPrototype.multiply;\n  /**\n   * Returns this Long divided by the specified. The result is signed if this Long is signed or\n   *  unsigned if this Long is unsigned.\n   * @this {!Long}\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Quotient\n   */\n  \n  LongPrototype.divide = function divide(divisor) {\n    if (!isLong(divisor)) divisor = fromValue(divisor);\n    if (divisor.isZero()) throw Error('division by zero'); // use wasm support if present\n  \n    if (wasm) {\n      // guard against signed division overflow: the largest\n      // negative number / -1 would be 1 larger than the largest\n      // positive number, due to two's complement.\n      if (!this.unsigned && this.high === -0x80000000 && divisor.low === -1 && divisor.high === -1) {\n        // be consistent with non-wasm code path\n        return this;\n      }\n  \n      var low = (this.unsigned ? wasm[\"div_u\"] : wasm[\"div_s\"])(this.low, this.high, divisor.low, divisor.high);\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n    }\n  \n    if (this.isZero()) return this.unsigned ? UZERO : ZERO;\n    var approx, rem, res;\n  \n    if (!this.unsigned) {\n      // This section is only relevant for signed longs and is derived from the\n      // closure library as a whole.\n      if (this.eq(MIN_VALUE)) {\n        if (divisor.eq(ONE) || divisor.eq(NEG_ONE)) return MIN_VALUE; // recall that -MIN_VALUE == MIN_VALUE\n        else if (divisor.eq(MIN_VALUE)) return ONE;else {\n          // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n          var halfThis = this.shr(1);\n          approx = halfThis.div(divisor).shl(1);\n  \n          if (approx.eq(ZERO)) {\n            return divisor.isNegative() ? ONE : NEG_ONE;\n          } else {\n            rem = this.sub(divisor.mul(approx));\n            res = approx.add(rem.div(divisor));\n            return res;\n          }\n        }\n      } else if (divisor.eq(MIN_VALUE)) return this.unsigned ? UZERO : ZERO;\n  \n      if (this.isNegative()) {\n        if (divisor.isNegative()) return this.neg().div(divisor.neg());\n        return this.neg().div(divisor).neg();\n      } else if (divisor.isNegative()) return this.div(divisor.neg()).neg();\n  \n      res = ZERO;\n    } else {\n      // The algorithm below has not been made for unsigned longs. It's therefore\n      // required to take special care of the MSB prior to running it.\n      if (!divisor.unsigned) divisor = divisor.toUnsigned();\n      if (divisor.gt(this)) return UZERO;\n      if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\n        return UONE;\n      res = UZERO;\n    } // Repeat the following until the remainder is less than other:  find a\n    // floating-point that approximates remainder / other *from below*, add this\n    // into the result, and subtract it from the remainder.  It is critical that\n    // the approximate value is less than or equal to the real value so that the\n    // remainder never becomes negative.\n  \n  \n    rem = this;\n  \n    while (rem.gte(divisor)) {\n      // Approximate the result of division. This may be a little greater or\n      // smaller than the actual value.\n      approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber())); // We will tweak the approximate result by changing it in the 48-th digit or\n      // the smallest non-fractional digit, whichever is larger.\n  \n      var log2 = Math.ceil(Math.log(approx) / Math.LN2),\n          delta = log2 <= 48 ? 1 : pow_dbl(2, log2 - 48),\n          // Decrease the approximation until it is smaller than the remainder.  Note\n      // that if it is too large, the product overflows and is negative.\n      approxRes = fromNumber(approx),\n          approxRem = approxRes.mul(divisor);\n  \n      while (approxRem.isNegative() || approxRem.gt(rem)) {\n        approx -= delta;\n        approxRes = fromNumber(approx, this.unsigned);\n        approxRem = approxRes.mul(divisor);\n      } // We know the answer can't be zero... and actually, zero would cause\n      // infinite recursion since we would make no progress.\n  \n  \n      if (approxRes.isZero()) approxRes = ONE;\n      res = res.add(approxRes);\n      rem = rem.sub(approxRem);\n    }\n  \n    return res;\n  };\n  /**\n   * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\n   * @function\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Quotient\n   */\n  \n  \n  LongPrototype.div = LongPrototype.divide;\n  /**\n   * Returns this Long modulo the specified.\n   * @this {!Long}\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Remainder\n   */\n  \n  LongPrototype.modulo = function modulo(divisor) {\n    if (!isLong(divisor)) divisor = fromValue(divisor); // use wasm support if present\n  \n    if (wasm) {\n      var low = (this.unsigned ? wasm[\"rem_u\"] : wasm[\"rem_s\"])(this.low, this.high, divisor.low, divisor.high);\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n    }\n  \n    return this.sub(this.div(divisor).mul(divisor));\n  };\n  /**\n   * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n   * @function\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Remainder\n   */\n  \n  \n  LongPrototype.mod = LongPrototype.modulo;\n  /**\n   * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n   * @function\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Remainder\n   */\n  \n  LongPrototype.rem = LongPrototype.modulo;\n  /**\n   * Returns the bitwise NOT of this Long.\n   * @this {!Long}\n   * @returns {!Long}\n   */\n  \n  LongPrototype.not = function not() {\n    return fromBits(~this.low, ~this.high, this.unsigned);\n  };\n  /**\n   * Returns count leading zeros of this Long.\n   * @this {!Long}\n   * @returns {!number}\n   */\n  \n  \n  LongPrototype.countLeadingZeros = function countLeadingZeros() {\n    return this.high ? Math.clz32(this.high) : Math.clz32(this.low) + 32;\n  };\n  /**\n   * Returns count leading zeros. This is an alias of {@link Long#countLeadingZeros}.\n   * @function\n   * @param {!Long}\n   * @returns {!number}\n   */\n  \n  \n  LongPrototype.clz = LongPrototype.countLeadingZeros;\n  /**\n   * Returns count trailing zeros of this Long.\n   * @this {!Long}\n   * @returns {!number}\n   */\n  \n  LongPrototype.countTrailingZeros = function countTrailingZeros() {\n    return this.low ? ctz32(this.low) : ctz32(this.high) + 32;\n  };\n  /**\n   * Returns count trailing zeros. This is an alias of {@link Long#countTrailingZeros}.\n   * @function\n   * @param {!Long}\n   * @returns {!number}\n   */\n  \n  \n  LongPrototype.ctz = LongPrototype.countTrailingZeros;\n  /**\n   * Returns the bitwise AND of this Long and the specified.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other Long\n   * @returns {!Long}\n   */\n  \n  LongPrototype.and = function and(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\n  };\n  /**\n   * Returns the bitwise OR of this Long and the specified.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other Long\n   * @returns {!Long}\n   */\n  \n  \n  LongPrototype.or = function or(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\n  };\n  /**\n   * Returns the bitwise XOR of this Long and the given one.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other Long\n   * @returns {!Long}\n   */\n  \n  \n  LongPrototype.xor = function xor(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits shifted to the left by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shiftLeft = function shiftLeft(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;else if (numBits < 32) return fromBits(this.low << numBits, this.high << numBits | this.low >>> 32 - numBits, this.unsigned);else return fromBits(0, this.low << numBits - 32, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shl = LongPrototype.shiftLeft;\n  /**\n   * Returns this Long with bits arithmetically shifted to the right by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  LongPrototype.shiftRight = function shiftRight(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;else if (numBits < 32) return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >> numBits, this.unsigned);else return fromBits(this.high >> numBits - 32, this.high >= 0 ? 0 : -1, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shr = LongPrototype.shiftRight;\n  /**\n   * Returns this Long with bits logically shifted to the right by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  LongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;\n    if (numBits < 32) return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >>> numBits, this.unsigned);\n    if (numBits === 32) return fromBits(this.high, 0, this.unsigned);\n    return fromBits(this.high >>> numBits - 32, 0, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shru = LongPrototype.shiftRightUnsigned;\n  /**\n   * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  LongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\n  /**\n   * Returns this Long with bits rotated to the left by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  LongPrototype.rotateLeft = function rotateLeft(numBits) {\n    var b;\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;\n    if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\n  \n    if (numBits < 32) {\n      b = 32 - numBits;\n      return fromBits(this.low << numBits | this.high >>> b, this.high << numBits | this.low >>> b, this.unsigned);\n    }\n  \n    numBits -= 32;\n    b = 32 - numBits;\n    return fromBits(this.high << numBits | this.low >>> b, this.low << numBits | this.high >>> b, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits rotated to the left by the given amount. This is an alias of {@link Long#rotateLeft}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  \n  LongPrototype.rotl = LongPrototype.rotateLeft;\n  /**\n   * Returns this Long with bits rotated to the right by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  LongPrototype.rotateRight = function rotateRight(numBits) {\n    var b;\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;\n    if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\n  \n    if (numBits < 32) {\n      b = 32 - numBits;\n      return fromBits(this.high << b | this.low >>> numBits, this.low << b | this.high >>> numBits, this.unsigned);\n    }\n  \n    numBits -= 32;\n    b = 32 - numBits;\n    return fromBits(this.low << b | this.high >>> numBits, this.high << b | this.low >>> numBits, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits rotated to the right by the given amount. This is an alias of {@link Long#rotateRight}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  \n  LongPrototype.rotr = LongPrototype.rotateRight;\n  /**\n   * Converts this Long to signed.\n   * @this {!Long}\n   * @returns {!Long} Signed long\n   */\n  \n  LongPrototype.toSigned = function toSigned() {\n    if (!this.unsigned) return this;\n    return fromBits(this.low, this.high, false);\n  };\n  /**\n   * Converts this Long to unsigned.\n   * @this {!Long}\n   * @returns {!Long} Unsigned long\n   */\n  \n  \n  LongPrototype.toUnsigned = function toUnsigned() {\n    if (this.unsigned) return this;\n    return fromBits(this.low, this.high, true);\n  };\n  /**\n   * Converts this Long to its byte representation.\n   * @param {boolean=} le Whether little or big endian, defaults to big endian\n   * @this {!Long}\n   * @returns {!Array.<number>} Byte representation\n   */\n  \n  \n  LongPrototype.toBytes = function toBytes(le) {\n    return le ? this.toBytesLE() : this.toBytesBE();\n  };\n  /**\n   * Converts this Long to its little endian byte representation.\n   * @this {!Long}\n   * @returns {!Array.<number>} Little endian byte representation\n   */\n  \n  \n  LongPrototype.toBytesLE = function toBytesLE() {\n    var hi = this.high,\n        lo = this.low;\n    return [lo & 0xff, lo >>> 8 & 0xff, lo >>> 16 & 0xff, lo >>> 24, hi & 0xff, hi >>> 8 & 0xff, hi >>> 16 & 0xff, hi >>> 24];\n  };\n  /**\n   * Converts this Long to its big endian byte representation.\n   * @this {!Long}\n   * @returns {!Array.<number>} Big endian byte representation\n   */\n  \n  \n  LongPrototype.toBytesBE = function toBytesBE() {\n    var hi = this.high,\n        lo = this.low;\n    return [hi >>> 24, hi >>> 16 & 0xff, hi >>> 8 & 0xff, hi & 0xff, lo >>> 24, lo >>> 16 & 0xff, lo >>> 8 & 0xff, lo & 0xff];\n  };\n  /**\n   * Creates a Long from its byte representation.\n   * @param {!Array.<number>} bytes Byte representation\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @param {boolean=} le Whether little or big endian, defaults to big endian\n   * @returns {Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBytes = function fromBytes(bytes, unsigned, le) {\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\n  };\n  /**\n   * Creates a Long from its little endian byte representation.\n   * @param {!Array.<number>} bytes Little endian byte representation\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBytesLE = function fromBytesLE(bytes, unsigned) {\n    return new Long(bytes[0] | bytes[1] << 8 | bytes[2] << 16 | bytes[3] << 24, bytes[4] | bytes[5] << 8 | bytes[6] << 16 | bytes[7] << 24, unsigned);\n  };\n  /**\n   * Creates a Long from its big endian byte representation.\n   * @param {!Array.<number>} bytes Big endian byte representation\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBytesBE = function fromBytesBE(bytes, unsigned) {\n    return new Long(bytes[4] << 24 | bytes[5] << 16 | bytes[6] << 8 | bytes[7], bytes[0] << 24 | bytes[1] << 16 | bytes[2] << 8 | bytes[3], unsigned);\n  };\n  \n  var _default = Long;\n  exports.default = _default;\n  return \"default\" in exports ? exports.default : exports;\n})({});\nif (typeof define === 'function' && define.amd) define([], function() { return Long; });\nelse if (typeof module === 'object' && typeof exports === 'object') module.exports = Long;\n","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.resolveBackend = exports.registerBackend = void 0;\nconst backends = new Map();\nconst backendsSortedByPriority = [];\n/**\n * Register a backend.\n *\n * @param name - the name as a key to lookup as an execution provider.\n * @param backend - the backend object.\n * @param priority - an integer indicating the priority of the backend. Higher number means higher priority. if priority\n * < 0, it will be considered as a 'beta' version and will not be used as a fallback backend by default.\n *\n * @ignore\n */\nconst registerBackend = (name, backend, priority) => {\n    if (backend && typeof backend.init === 'function' && typeof backend.createInferenceSessionHandler === 'function') {\n        const currentBackend = backends.get(name);\n        if (currentBackend === undefined) {\n            backends.set(name, { backend, priority });\n        }\n        else if (currentBackend.priority > priority) {\n            // same name is already registered with a higher priority. skip registeration.\n            return;\n        }\n        else if (currentBackend.priority === priority) {\n            if (currentBackend.backend !== backend) {\n                throw new Error(`cannot register backend \"${name}\" using priority ${priority}`);\n            }\n        }\n        if (priority >= 0) {\n            const i = backendsSortedByPriority.indexOf(name);\n            if (i !== -1) {\n                backendsSortedByPriority.splice(i, 1);\n            }\n            for (let i = 0; i < backendsSortedByPriority.length; i++) {\n                if (backends.get(backendsSortedByPriority[i]).priority <= priority) {\n                    backendsSortedByPriority.splice(i, 0, name);\n                    return;\n                }\n            }\n            backendsSortedByPriority.push(name);\n        }\n        return;\n    }\n    throw new TypeError('not a valid backend');\n};\nexports.registerBackend = registerBackend;\n/**\n * Resolve backend by specified hints.\n *\n * @param backendHints - a list of execution provider names to lookup. If omitted use registered backends as list.\n * @returns a promise that resolves to the backend.\n *\n * @ignore\n */\nconst resolveBackend = async (backendHints) => {\n    const backendNames = backendHints.length === 0 ? backendsSortedByPriority : backendHints;\n    const errors = [];\n    for (const backendName of backendNames) {\n        const backendInfo = backends.get(backendName);\n        if (backendInfo) {\n            if (backendInfo.initialized) {\n                return backendInfo.backend;\n            }\n            else if (backendInfo.aborted) {\n                continue; // current backend is unavailable; try next\n            }\n            const isInitializing = !!backendInfo.initPromise;\n            try {\n                if (!isInitializing) {\n                    backendInfo.initPromise = backendInfo.backend.init();\n                }\n                await backendInfo.initPromise;\n                backendInfo.initialized = true;\n                return backendInfo.backend;\n            }\n            catch (e) {\n                if (!isInitializing) {\n                    errors.push({ name: backendName, err: e });\n                }\n                backendInfo.aborted = true;\n            }\n            finally {\n                delete backendInfo.initPromise;\n            }\n        }\n    }\n    throw new Error(`no available backend found. ERR: ${errors.map(e => `[${e.name}] ${e.err}`).join(', ')}`);\n};\nexports.resolveBackend = resolveBackend;\n//# sourceMappingURL=backend-impl.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.registerBackend = void 0;\nvar backend_impl_js_1 = require(\"./backend-impl.js\");\nObject.defineProperty(exports, \"registerBackend\", { enumerable: true, get: function () { return backend_impl_js_1.registerBackend; } });\n//# sourceMappingURL=backend.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.env = void 0;\nconst version_js_1 = require(\"./version.js\");\nlet logLevelValue = 'warning';\nexports.env = {\n    wasm: {},\n    webgl: {},\n    webgpu: {},\n    versions: { common: version_js_1.version },\n    set logLevel(value) {\n        if (value === undefined) {\n            return;\n        }\n        if (typeof value !== 'string' || ['verbose', 'info', 'warning', 'error', 'fatal'].indexOf(value) === -1) {\n            throw new Error(`Unsupported logging level: ${value}`);\n        }\n        logLevelValue = value;\n    },\n    get logLevel() {\n        return logLevelValue;\n    },\n};\n// set property 'logLevel' so that they can be correctly transferred to worker by `postMessage()`.\nObject.defineProperty(exports.env, 'logLevel', { enumerable: true });\n//# sourceMappingURL=env-impl.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.env = void 0;\nconst env_impl_js_1 = require(\"./env-impl.js\");\n/**\n * Represent a set of flags as a global singleton.\n */\nexports.env = env_impl_js_1.env;\n//# sourceMappingURL=env.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * # ONNX Runtime JavaScript API\n *\n * ONNX Runtime JavaScript API is a unified API for all JavaScript usages, including the following NPM packages:\n *\n * - [onnxruntime-node](https://www.npmjs.com/package/onnxruntime-node)\n * - [onnxruntime-web](https://www.npmjs.com/package/onnxruntime-web)\n * - [onnxruntime-react-native](https://www.npmjs.com/package/onnxruntime-react-native)\n *\n * See also:\n * - [Get Started](https://onnxruntime.ai/docs/get-started/with-javascript.html)\n * - [Inference examples](https://github.com/microsoft/onnxruntime-inference-examples/tree/main/js)\n *\n * @packageDocumentation\n */\n__exportStar(require(\"./backend.js\"), exports);\n__exportStar(require(\"./env.js\"), exports);\n__exportStar(require(\"./inference-session.js\"), exports);\n__exportStar(require(\"./tensor.js\"), exports);\n__exportStar(require(\"./onnx-value.js\"), exports);\n__exportStar(require(\"./training-session.js\"), exports);\n//# sourceMappingURL=index.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.InferenceSession = void 0;\nconst backend_impl_js_1 = require(\"./backend-impl.js\");\nconst tensor_js_1 = require(\"./tensor.js\");\nclass InferenceSession {\n    constructor(handler) {\n        this.handler = handler;\n    }\n    async run(feeds, arg1, arg2) {\n        const fetches = {};\n        let options = {};\n        // check inputs\n        if (typeof feeds !== 'object' || feeds === null || feeds instanceof tensor_js_1.Tensor || Array.isArray(feeds)) {\n            throw new TypeError('\\'feeds\\' must be an object that use input names as keys and OnnxValue as corresponding values.');\n        }\n        let isFetchesEmpty = true;\n        // determine which override is being used\n        if (typeof arg1 === 'object') {\n            if (arg1 === null) {\n                throw new TypeError('Unexpected argument[1]: cannot be null.');\n            }\n            if (arg1 instanceof tensor_js_1.Tensor) {\n                throw new TypeError('\\'fetches\\' cannot be a Tensor');\n            }\n            if (Array.isArray(arg1)) {\n                if (arg1.length === 0) {\n                    throw new TypeError('\\'fetches\\' cannot be an empty array.');\n                }\n                isFetchesEmpty = false;\n                // output names\n                for (const name of arg1) {\n                    if (typeof name !== 'string') {\n                        throw new TypeError('\\'fetches\\' must be a string array or an object.');\n                    }\n                    if (this.outputNames.indexOf(name) === -1) {\n                        throw new RangeError(`'fetches' contains invalid output name: ${name}.`);\n                    }\n                    fetches[name] = null;\n                }\n                if (typeof arg2 === 'object' && arg2 !== null) {\n                    options = arg2;\n                }\n                else if (typeof arg2 !== 'undefined') {\n                    throw new TypeError('\\'options\\' must be an object.');\n                }\n            }\n            else {\n                // decide whether arg1 is fetches or options\n                // if any output name is present and its value is valid OnnxValue, we consider it fetches\n                let isFetches = false;\n                const arg1Keys = Object.getOwnPropertyNames(arg1);\n                for (const name of this.outputNames) {\n                    if (arg1Keys.indexOf(name) !== -1) {\n                        const v = arg1[name];\n                        if (v === null || v instanceof tensor_js_1.Tensor) {\n                            isFetches = true;\n                            isFetchesEmpty = false;\n                            fetches[name] = v;\n                        }\n                    }\n                }\n                if (isFetches) {\n                    if (typeof arg2 === 'object' && arg2 !== null) {\n                        options = arg2;\n                    }\n                    else if (typeof arg2 !== 'undefined') {\n                        throw new TypeError('\\'options\\' must be an object.');\n                    }\n                }\n                else {\n                    options = arg1;\n                }\n            }\n        }\n        else if (typeof arg1 !== 'undefined') {\n            throw new TypeError('Unexpected argument[1]: must be \\'fetches\\' or \\'options\\'.');\n        }\n        // check if all inputs are in feed\n        for (const name of this.inputNames) {\n            if (typeof feeds[name] === 'undefined') {\n                throw new Error(`input '${name}' is missing in 'feeds'.`);\n            }\n        }\n        // if no fetches is specified, we use the full output names list\n        if (isFetchesEmpty) {\n            for (const name of this.outputNames) {\n                fetches[name] = null;\n            }\n        }\n        // feeds, fetches and options are prepared\n        const results = await this.handler.run(feeds, fetches, options);\n        const returnValue = {};\n        for (const key in results) {\n            if (Object.hasOwnProperty.call(results, key)) {\n                const result = results[key];\n                if (result instanceof tensor_js_1.Tensor) {\n                    returnValue[key] = result;\n                }\n                else {\n                    returnValue[key] = new tensor_js_1.Tensor(result.type, result.data, result.dims);\n                }\n            }\n        }\n        return returnValue;\n    }\n    async release() {\n        return this.handler.dispose();\n    }\n    static async create(arg0, arg1, arg2, arg3) {\n        // either load from a file or buffer\n        let filePathOrUint8Array;\n        let options = {};\n        if (typeof arg0 === 'string') {\n            filePathOrUint8Array = arg0;\n            if (typeof arg1 === 'object' && arg1 !== null) {\n                options = arg1;\n            }\n            else if (typeof arg1 !== 'undefined') {\n                throw new TypeError('\\'options\\' must be an object.');\n            }\n        }\n        else if (arg0 instanceof Uint8Array) {\n            filePathOrUint8Array = arg0;\n            if (typeof arg1 === 'object' && arg1 !== null) {\n                options = arg1;\n            }\n            else if (typeof arg1 !== 'undefined') {\n                throw new TypeError('\\'options\\' must be an object.');\n            }\n        }\n        else if (arg0 instanceof ArrayBuffer ||\n            (typeof SharedArrayBuffer !== 'undefined' && arg0 instanceof SharedArrayBuffer)) {\n            const buffer = arg0;\n            let byteOffset = 0;\n            let byteLength = arg0.byteLength;\n            if (typeof arg1 === 'object' && arg1 !== null) {\n                options = arg1;\n            }\n            else if (typeof arg1 === 'number') {\n                byteOffset = arg1;\n                if (!Number.isSafeInteger(byteOffset)) {\n                    throw new RangeError('\\'byteOffset\\' must be an integer.');\n                }\n                if (byteOffset < 0 || byteOffset >= buffer.byteLength) {\n                    throw new RangeError(`'byteOffset' is out of range [0, ${buffer.byteLength}).`);\n                }\n                byteLength = arg0.byteLength - byteOffset;\n                if (typeof arg2 === 'number') {\n                    byteLength = arg2;\n                    if (!Number.isSafeInteger(byteLength)) {\n                        throw new RangeError('\\'byteLength\\' must be an integer.');\n                    }\n                    if (byteLength <= 0 || byteOffset + byteLength > buffer.byteLength) {\n                        throw new RangeError(`'byteLength' is out of range (0, ${buffer.byteLength - byteOffset}].`);\n                    }\n                    if (typeof arg3 === 'object' && arg3 !== null) {\n                        options = arg3;\n                    }\n                    else if (typeof arg3 !== 'undefined') {\n                        throw new TypeError('\\'options\\' must be an object.');\n                    }\n                }\n                else if (typeof arg2 !== 'undefined') {\n                    throw new TypeError('\\'byteLength\\' must be a number.');\n                }\n            }\n            else if (typeof arg1 !== 'undefined') {\n                throw new TypeError('\\'options\\' must be an object.');\n            }\n            filePathOrUint8Array = new Uint8Array(buffer, byteOffset, byteLength);\n        }\n        else {\n            throw new TypeError('Unexpected argument[0]: must be \\'path\\' or \\'buffer\\'.');\n        }\n        // get backend hints\n        const eps = options.executionProviders || [];\n        const backendHints = eps.map(i => typeof i === 'string' ? i : i.name);\n        const backend = await (0, backend_impl_js_1.resolveBackend)(backendHints);\n        const handler = await backend.createInferenceSessionHandler(filePathOrUint8Array, options);\n        return new InferenceSession(handler);\n    }\n    startProfiling() {\n        this.handler.startProfiling();\n    }\n    endProfiling() {\n        this.handler.endProfiling();\n    }\n    get inputNames() {\n        return this.handler.inputNames;\n    }\n    get outputNames() {\n        return this.handler.outputNames;\n    }\n}\nexports.InferenceSession = InferenceSession;\n//# sourceMappingURL=inference-session-impl.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.InferenceSession = void 0;\nconst inference_session_impl_js_1 = require(\"./inference-session-impl.js\");\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexports.InferenceSession = inference_session_impl_js_1.InferenceSession;\n//# sourceMappingURL=inference-session.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=onnx-value.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.tensorToImageData = exports.tensorToDataURL = void 0;\n/**\n * implementation of Tensor.toDataURL()\n */\nconst tensorToDataURL = (tensor, options) => {\n    const canvas = document.createElement('canvas');\n    canvas.width = tensor.dims[3];\n    canvas.height = tensor.dims[2];\n    const pixels2DContext = canvas.getContext('2d');\n    if (pixels2DContext != null) {\n        // Default values for height and width & format\n        let width;\n        let height;\n        if (options?.tensorLayout !== undefined && options.tensorLayout === 'NHWC') {\n            width = tensor.dims[2];\n            height = tensor.dims[3];\n        }\n        else { // Default layout is NCWH\n            width = tensor.dims[3];\n            height = tensor.dims[2];\n        }\n        const inputformat = options?.format !== undefined ? options.format : 'RGB';\n        const norm = options?.norm;\n        let normMean;\n        let normBias;\n        if (norm === undefined || norm.mean === undefined) {\n            normMean = [255, 255, 255, 255];\n        }\n        else {\n            if (typeof (norm.mean) === 'number') {\n                normMean = [norm.mean, norm.mean, norm.mean, norm.mean];\n            }\n            else {\n                normMean = [norm.mean[0], norm.mean[1], norm.mean[2], 0];\n                if (norm.mean[3] !== undefined) {\n                    normMean[3] = norm.mean[3];\n                }\n            }\n        }\n        if (norm === undefined || norm.bias === undefined) {\n            normBias = [0, 0, 0, 0];\n        }\n        else {\n            if (typeof (norm.bias) === 'number') {\n                normBias = [norm.bias, norm.bias, norm.bias, norm.bias];\n            }\n            else {\n                normBias = [norm.bias[0], norm.bias[1], norm.bias[2], 0];\n                if (norm.bias[3] !== undefined) {\n                    normBias[3] = norm.bias[3];\n                }\n            }\n        }\n        const stride = height * width;\n        // Default pointer assignments\n        let rTensorPointer = 0, gTensorPointer = stride, bTensorPointer = stride * 2, aTensorPointer = -1;\n        // Updating the pointer assignments based on the input image format\n        if (inputformat === 'RGBA') {\n            rTensorPointer = 0;\n            gTensorPointer = stride;\n            bTensorPointer = stride * 2;\n            aTensorPointer = stride * 3;\n        }\n        else if (inputformat === 'RGB') {\n            rTensorPointer = 0;\n            gTensorPointer = stride;\n            bTensorPointer = stride * 2;\n        }\n        else if (inputformat === 'RBG') {\n            rTensorPointer = 0;\n            bTensorPointer = stride;\n            gTensorPointer = stride * 2;\n        }\n        for (let i = 0; i < height; i++) {\n            for (let j = 0; j < width; j++) {\n                const R = (tensor.data[rTensorPointer++] - normBias[0]) * normMean[0]; // R value\n                const G = (tensor.data[gTensorPointer++] - normBias[1]) * normMean[1]; // G value\n                const B = (tensor.data[bTensorPointer++] - normBias[2]) * normMean[2]; // B value\n                const A = aTensorPointer === -1 ?\n                    255 :\n                    (tensor.data[aTensorPointer++] - normBias[3]) * normMean[3]; // A value\n                // eslint-disable-next-line @typescript-eslint/restrict-plus-operands\n                pixels2DContext.fillStyle = 'rgba(' + R + ',' + G + ',' + B + ',' + A + ')';\n                pixels2DContext.fillRect(j, i, 1, 1);\n            }\n        }\n        return canvas.toDataURL();\n    }\n    else {\n        throw new Error('Can not access image data');\n    }\n};\nexports.tensorToDataURL = tensorToDataURL;\n/**\n * implementation of Tensor.toImageData()\n */\nconst tensorToImageData = (tensor, options) => {\n    const pixels2DContext = document.createElement('canvas').getContext('2d');\n    let image;\n    if (pixels2DContext != null) {\n        // Default values for height and width & format\n        let width;\n        let height;\n        let channels;\n        if (options?.tensorLayout !== undefined && options.tensorLayout === 'NHWC') {\n            width = tensor.dims[2];\n            height = tensor.dims[1];\n            channels = tensor.dims[3];\n        }\n        else { // Default layout is NCWH\n            width = tensor.dims[3];\n            height = tensor.dims[2];\n            channels = tensor.dims[1];\n        }\n        const inputformat = options !== undefined ? (options.format !== undefined ? options.format : 'RGB') : 'RGB';\n        const norm = options?.norm;\n        let normMean;\n        let normBias;\n        if (norm === undefined || norm.mean === undefined) {\n            normMean = [255, 255, 255, 255];\n        }\n        else {\n            if (typeof (norm.mean) === 'number') {\n                normMean = [norm.mean, norm.mean, norm.mean, norm.mean];\n            }\n            else {\n                normMean = [norm.mean[0], norm.mean[1], norm.mean[2], 255];\n                if (norm.mean[3] !== undefined) {\n                    normMean[3] = norm.mean[3];\n                }\n            }\n        }\n        if (norm === undefined || norm.bias === undefined) {\n            normBias = [0, 0, 0, 0];\n        }\n        else {\n            if (typeof (norm.bias) === 'number') {\n                normBias = [norm.bias, norm.bias, norm.bias, norm.bias];\n            }\n            else {\n                normBias = [norm.bias[0], norm.bias[1], norm.bias[2], 0];\n                if (norm.bias[3] !== undefined) {\n                    normBias[3] = norm.bias[3];\n                }\n            }\n        }\n        const stride = height * width;\n        if (options !== undefined) {\n            if (options.format !== undefined && (channels === 4 && options.format !== 'RGBA') ||\n                (channels === 3 && (options.format !== 'RGB' && options.format !== 'BGR'))) {\n                throw new Error('Tensor format doesn\\'t match input tensor dims');\n            }\n        }\n        // Default pointer assignments\n        const step = 4;\n        let rImagePointer = 0, gImagePointer = 1, bImagePointer = 2, aImagePointer = 3;\n        let rTensorPointer = 0, gTensorPointer = stride, bTensorPointer = stride * 2, aTensorPointer = -1;\n        // Updating the pointer assignments based on the input image format\n        if (inputformat === 'RGBA') {\n            rTensorPointer = 0;\n            gTensorPointer = stride;\n            bTensorPointer = stride * 2;\n            aTensorPointer = stride * 3;\n        }\n        else if (inputformat === 'RGB') {\n            rTensorPointer = 0;\n            gTensorPointer = stride;\n            bTensorPointer = stride * 2;\n        }\n        else if (inputformat === 'RBG') {\n            rTensorPointer = 0;\n            bTensorPointer = stride;\n            gTensorPointer = stride * 2;\n        }\n        image = pixels2DContext.createImageData(width, height);\n        for (let i = 0; i < height * width; rImagePointer += step, gImagePointer += step, bImagePointer += step, aImagePointer += step, i++) {\n            image.data[rImagePointer] = (tensor.data[rTensorPointer++] - normBias[0]) * normMean[0]; // R value\n            image.data[gImagePointer] = (tensor.data[gTensorPointer++] - normBias[1]) * normMean[1]; // G value\n            image.data[bImagePointer] = (tensor.data[bTensorPointer++] - normBias[2]) * normMean[2]; // B value\n            image.data[aImagePointer] = aTensorPointer === -1 ?\n                255 :\n                (tensor.data[aTensorPointer++] - normBias[3]) * normMean[3]; // A value\n        }\n    }\n    else {\n        throw new Error('Can not access image data');\n    }\n    return image;\n};\nexports.tensorToImageData = tensorToImageData;\n//# sourceMappingURL=tensor-conversion-impl.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.tensorFromPinnedBuffer = exports.tensorFromGpuBuffer = exports.tensorFromTexture = exports.tensorFromImage = exports.bufferToTensor = void 0;\nconst tensor_impl_js_1 = require(\"./tensor-impl.js\");\n/**\n * Create a new tensor object from image object\n *\n * @param buffer - Extracted image buffer data - assuming RGBA format\n * @param imageFormat - input image configuration - required configurations height, width, format\n * @param tensorFormat - output tensor configuration - Default is RGB format\n */\nconst bufferToTensor = (buffer, options) => {\n    if (buffer === undefined) {\n        throw new Error('Image buffer must be defined');\n    }\n    if (options.height === undefined || options.width === undefined) {\n        throw new Error('Image height and width must be defined');\n    }\n    if (options.tensorLayout === 'NHWC') {\n        throw new Error('NHWC Tensor layout is not supported yet');\n    }\n    const { height, width } = options;\n    const norm = options.norm ?? { mean: 255, bias: 0 };\n    let normMean;\n    let normBias;\n    if (typeof (norm.mean) === 'number') {\n        normMean = [norm.mean, norm.mean, norm.mean, norm.mean];\n    }\n    else {\n        normMean = [norm.mean[0], norm.mean[1], norm.mean[2], norm.mean[3] ?? 255];\n    }\n    if (typeof (norm.bias) === 'number') {\n        normBias = [norm.bias, norm.bias, norm.bias, norm.bias];\n    }\n    else {\n        normBias = [norm.bias[0], norm.bias[1], norm.bias[2], norm.bias[3] ?? 0];\n    }\n    const inputformat = options.format !== undefined ? options.format : 'RGBA';\n    // default value is RGBA since imagedata and HTMLImageElement uses it\n    const outputformat = options.tensorFormat !== undefined ? (options.tensorFormat !== undefined ? options.tensorFormat : 'RGB') : 'RGB';\n    const stride = height * width;\n    const float32Data = outputformat === 'RGBA' ? new Float32Array(stride * 4) : new Float32Array(stride * 3);\n    // Default pointer assignments\n    let step = 4, rImagePointer = 0, gImagePointer = 1, bImagePointer = 2, aImagePointer = 3;\n    let rTensorPointer = 0, gTensorPointer = stride, bTensorPointer = stride * 2, aTensorPointer = -1;\n    // Updating the pointer assignments based on the input image format\n    if (inputformat === 'RGB') {\n        step = 3;\n        rImagePointer = 0;\n        gImagePointer = 1;\n        bImagePointer = 2;\n        aImagePointer = -1;\n    }\n    // Updating the pointer assignments based on the output tensor format\n    if (outputformat === 'RGBA') {\n        aTensorPointer = stride * 3;\n    }\n    else if (outputformat === 'RBG') {\n        rTensorPointer = 0;\n        bTensorPointer = stride;\n        gTensorPointer = stride * 2;\n    }\n    else if (outputformat === 'BGR') {\n        bTensorPointer = 0;\n        gTensorPointer = stride;\n        rTensorPointer = stride * 2;\n    }\n    for (let i = 0; i < stride; i++, rImagePointer += step, bImagePointer += step, gImagePointer += step, aImagePointer += step) {\n        float32Data[rTensorPointer++] = (buffer[rImagePointer] + normBias[0]) / normMean[0];\n        float32Data[gTensorPointer++] = (buffer[gImagePointer] + normBias[1]) / normMean[1];\n        float32Data[bTensorPointer++] = (buffer[bImagePointer] + normBias[2]) / normMean[2];\n        if (aTensorPointer !== -1 && aImagePointer !== -1) {\n            float32Data[aTensorPointer++] = (buffer[aImagePointer] + normBias[3]) / normMean[3];\n        }\n    }\n    // Float32Array -> ort.Tensor\n    const outputTensor = outputformat === 'RGBA' ? new tensor_impl_js_1.Tensor('float32', float32Data, [1, 4, height, width]) :\n        new tensor_impl_js_1.Tensor('float32', float32Data, [1, 3, height, width]);\n    return outputTensor;\n};\nexports.bufferToTensor = bufferToTensor;\n/**\n * implementation of Tensor.fromImage().\n */\nconst tensorFromImage = async (image, options) => {\n    // checking the type of image object\n    const isHTMLImageEle = typeof (HTMLImageElement) !== 'undefined' && image instanceof HTMLImageElement;\n    const isImageDataEle = typeof (ImageData) !== 'undefined' && image instanceof ImageData;\n    const isImageBitmap = typeof (ImageBitmap) !== 'undefined' && image instanceof ImageBitmap;\n    const isString = typeof image === 'string';\n    let data;\n    let bufferToTensorOptions = options ?? {};\n    // filling and checking image configuration options\n    if (isHTMLImageEle) {\n        // HTMLImageElement - image object - format is RGBA by default\n        const canvas = document.createElement('canvas');\n        canvas.width = image.width;\n        canvas.height = image.height;\n        const pixels2DContext = canvas.getContext('2d');\n        if (pixels2DContext != null) {\n            let height = image.height;\n            let width = image.width;\n            if (options !== undefined && options.resizedHeight !== undefined && options.resizedWidth !== undefined) {\n                height = options.resizedHeight;\n                width = options.resizedWidth;\n            }\n            if (options !== undefined) {\n                bufferToTensorOptions = options;\n                if (options.tensorFormat !== undefined) {\n                    throw new Error('Image input config format must be RGBA for HTMLImageElement');\n                }\n                else {\n                    bufferToTensorOptions.tensorFormat = 'RGBA';\n                }\n                bufferToTensorOptions.height = height;\n                bufferToTensorOptions.width = width;\n            }\n            else {\n                bufferToTensorOptions.tensorFormat = 'RGBA';\n                bufferToTensorOptions.height = height;\n                bufferToTensorOptions.width = width;\n            }\n            pixels2DContext.drawImage(image, 0, 0);\n            data = pixels2DContext.getImageData(0, 0, width, height).data;\n        }\n        else {\n            throw new Error('Can not access image data');\n        }\n    }\n    else if (isImageDataEle) {\n        let height;\n        let width;\n        if (options !== undefined && options.resizedWidth !== undefined && options.resizedHeight !== undefined) {\n            height = options.resizedHeight;\n            width = options.resizedWidth;\n        }\n        else {\n            height = image.height;\n            width = image.width;\n        }\n        if (options !== undefined) {\n            bufferToTensorOptions = options;\n        }\n        bufferToTensorOptions.format = 'RGBA';\n        bufferToTensorOptions.height = height;\n        bufferToTensorOptions.width = width;\n        if (options !== undefined) {\n            const tempCanvas = document.createElement('canvas');\n            tempCanvas.width = width;\n            tempCanvas.height = height;\n            const pixels2DContext = tempCanvas.getContext('2d');\n            if (pixels2DContext != null) {\n                pixels2DContext.putImageData(image, 0, 0);\n                data = pixels2DContext.getImageData(0, 0, width, height).data;\n            }\n            else {\n                throw new Error('Can not access image data');\n            }\n        }\n        else {\n            data = image.data;\n        }\n    }\n    else if (isImageBitmap) {\n        // ImageBitmap - image object - format must be provided by user\n        if (options === undefined) {\n            throw new Error('Please provide image config with format for Imagebitmap');\n        }\n        const canvas = document.createElement('canvas');\n        canvas.width = image.width;\n        canvas.height = image.height;\n        const pixels2DContext = canvas.getContext('2d');\n        if (pixels2DContext != null) {\n            const height = image.height;\n            const width = image.width;\n            pixels2DContext.drawImage(image, 0, 0, width, height);\n            data = pixels2DContext.getImageData(0, 0, width, height).data;\n            bufferToTensorOptions.height = height;\n            bufferToTensorOptions.width = width;\n            return (0, exports.bufferToTensor)(data, bufferToTensorOptions);\n        }\n        else {\n            throw new Error('Can not access image data');\n        }\n    }\n    else if (isString) {\n        return new Promise((resolve, reject) => {\n            const canvas = document.createElement('canvas');\n            const context = canvas.getContext('2d');\n            if (!image || !context) {\n                return reject();\n            }\n            const newImage = new Image();\n            newImage.crossOrigin = 'Anonymous';\n            newImage.src = image;\n            newImage.onload = () => {\n                canvas.width = newImage.width;\n                canvas.height = newImage.height;\n                context.drawImage(newImage, 0, 0, canvas.width, canvas.height);\n                const img = context.getImageData(0, 0, canvas.width, canvas.height);\n                bufferToTensorOptions.height = canvas.height;\n                bufferToTensorOptions.width = canvas.width;\n                resolve((0, exports.bufferToTensor)(img.data, bufferToTensorOptions));\n            };\n        });\n    }\n    else {\n        throw new Error('Input data provided is not supported - aborted tensor creation');\n    }\n    if (data !== undefined) {\n        return (0, exports.bufferToTensor)(data, bufferToTensorOptions);\n    }\n    else {\n        throw new Error('Input data provided is not supported - aborted tensor creation');\n    }\n};\nexports.tensorFromImage = tensorFromImage;\n/**\n * implementation of Tensor.fromTexture().\n */\nconst tensorFromTexture = (texture, options) => {\n    const { width, height, download, dispose } = options;\n    // Always assume RGBAF32. TODO: support different texture format\n    const dims = [1, height, width, 4];\n    return new tensor_impl_js_1.Tensor({ location: 'texture', type: 'float32', texture, dims, download, dispose });\n};\nexports.tensorFromTexture = tensorFromTexture;\n/**\n * implementation of Tensor.fromGpuBuffer().\n */\nconst tensorFromGpuBuffer = (gpuBuffer, options) => {\n    const { dataType, dims, download, dispose } = options;\n    return new tensor_impl_js_1.Tensor({ location: 'gpu-buffer', type: dataType ?? 'float32', gpuBuffer, dims, download, dispose });\n};\nexports.tensorFromGpuBuffer = tensorFromGpuBuffer;\n/**\n * implementation of Tensor.fromPinnedBuffer().\n */\nconst tensorFromPinnedBuffer = (type, buffer, dims) => new tensor_impl_js_1.Tensor({ location: 'cpu-pinned', type, data: buffer, dims: dims ?? [buffer.length] });\nexports.tensorFromPinnedBuffer = tensorFromPinnedBuffer;\n//# sourceMappingURL=tensor-factory-impl.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.checkBigInt = exports.NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP = exports.NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP = void 0;\n// a runtime map that maps type string to TypedArray constructor. Should match Tensor.DataTypeMap.\nexports.NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP = new Map([\n    ['float32', Float32Array],\n    ['uint8', Uint8Array],\n    ['int8', Int8Array],\n    ['uint16', Uint16Array],\n    ['float16', Uint16Array],\n    ['int16', Int16Array],\n    ['int32', Int32Array],\n    ['bool', Uint8Array],\n    ['float64', Float64Array],\n    ['uint32', Uint32Array],\n]);\n// a runtime map that maps type string to TypedArray constructor. Should match Tensor.DataTypeMap.\nexports.NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP = new Map([\n    [Float32Array, 'float32'],\n    [Uint8Array, 'uint8'],\n    [Int8Array, 'int8'],\n    [Uint16Array, 'uint16'],\n    [Int16Array, 'int16'],\n    [Int32Array, 'int32'],\n    [Float64Array, 'float64'],\n    [Uint32Array, 'uint32'],\n]);\n// the following code allows delaying execution of BigInt checking. This allows lazy initialization for\n// NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP and NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP, which allows BigInt polyfill\n// if available.\nlet isBigIntChecked = false;\nconst checkBigInt = () => {\n    if (!isBigIntChecked) {\n        isBigIntChecked = true;\n        const isBigInt64ArrayAvailable = typeof BigInt64Array !== 'undefined' && typeof BigInt64Array.from === 'function';\n        const isBigUint64ArrayAvailable = typeof BigUint64Array !== 'undefined' && typeof BigUint64Array.from === 'function';\n        if (isBigInt64ArrayAvailable) {\n            exports.NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set('int64', BigInt64Array);\n            exports.NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(BigInt64Array, 'int64');\n        }\n        if (isBigUint64ArrayAvailable) {\n            exports.NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set('uint64', BigUint64Array);\n            exports.NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(BigUint64Array, 'uint64');\n        }\n    }\n};\nexports.checkBigInt = checkBigInt;\n//# sourceMappingURL=tensor-impl-type-mapping.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Tensor = void 0;\nconst tensor_conversion_impl_js_1 = require(\"./tensor-conversion-impl.js\");\nconst tensor_factory_impl_js_1 = require(\"./tensor-factory-impl.js\");\nconst tensor_impl_type_mapping_js_1 = require(\"./tensor-impl-type-mapping.js\");\nconst tensor_utils_impl_js_1 = require(\"./tensor-utils-impl.js\");\n/**\n * the implementation of Tensor interface.\n *\n * @ignore\n */\nclass Tensor {\n    /**\n     * implementation.\n     */\n    constructor(arg0, arg1, arg2) {\n        // perform one-time check for BigInt support\n        (0, tensor_impl_type_mapping_js_1.checkBigInt)();\n        let type;\n        let dims;\n        if (typeof arg0 === 'object' && 'location' in arg0) {\n            //\n            // constructing tensor from specific location\n            //\n            this.dataLocation = arg0.location;\n            type = arg0.type;\n            dims = arg0.dims;\n            switch (arg0.location) {\n                case 'cpu-pinned': {\n                    const expectedTypedArrayConstructor = tensor_impl_type_mapping_js_1.NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.get(type);\n                    if (!expectedTypedArrayConstructor) {\n                        throw new TypeError(`unsupported type \"${type}\" to create tensor from pinned buffer`);\n                    }\n                    if (!(arg0.data instanceof expectedTypedArrayConstructor)) {\n                        throw new TypeError(`buffer should be of type ${expectedTypedArrayConstructor.name}`);\n                    }\n                    this.cpuData = arg0.data;\n                    break;\n                }\n                case 'texture': {\n                    if (type !== 'float32') {\n                        throw new TypeError(`unsupported type \"${type}\" to create tensor from texture`);\n                    }\n                    this.gpuTextureData = arg0.texture;\n                    this.downloader = arg0.download;\n                    this.disposer = arg0.dispose;\n                    break;\n                }\n                case 'gpu-buffer': {\n                    if ((type !== 'float32' && type !== 'float16' && type !== 'int32' && type !== 'int64' && type !== 'uint32' &&\n                        type !== 'bool')) {\n                        throw new TypeError(`unsupported type \"${type}\" to create tensor from gpu buffer`);\n                    }\n                    this.gpuBufferData = arg0.gpuBuffer;\n                    this.downloader = arg0.download;\n                    this.disposer = arg0.dispose;\n                    break;\n                }\n                default:\n                    throw new Error(`Tensor constructor: unsupported location '${this.dataLocation}'`);\n            }\n        }\n        else {\n            //\n            // constructing tensor of location 'cpu'\n            //\n            let data;\n            let maybeDims;\n            // check whether arg0 is type or data\n            if (typeof arg0 === 'string') {\n                //\n                // Override: constructor(type, data, ...)\n                //\n                type = arg0;\n                maybeDims = arg2;\n                if (arg0 === 'string') {\n                    // string tensor\n                    if (!Array.isArray(arg1)) {\n                        throw new TypeError('A string tensor\\'s data must be a string array.');\n                    }\n                    // we don't check whether every element in the array is string; this is too slow. we assume it's correct and\n                    // error will be populated at inference\n                    data = arg1;\n                }\n                else {\n                    // numeric tensor\n                    const typedArrayConstructor = tensor_impl_type_mapping_js_1.NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.get(arg0);\n                    if (typedArrayConstructor === undefined) {\n                        throw new TypeError(`Unsupported tensor type: ${arg0}.`);\n                    }\n                    if (Array.isArray(arg1)) {\n                        if (arg0 === 'float16') {\n                            // Throw error here because when user try to use number array as data,\n                            // e.g. new Tensor('float16', [1, 2, 3, 4], dims)), it will actually call\n                            // Uint16Array.from(arg1) which generates wrong data.\n                            throw new TypeError('Creating a float16 tensor from number array is not supported. Please use Uint16Array as data.');\n                        }\n                        else if (arg0 === 'uint64' || arg0 === 'int64') {\n                            // use 'as any' here because:\n                            // 1. TypeScript's check on type of 'Array.isArray()' does not work with readonly arrays.\n                            // see https://github.com/microsoft/TypeScript/issues/17002\n                            // 2. TypeScript's check on union type of '(BigInt64ArrayConstructor|BigUint64ArrayConstructor).from()'\n                            // does not accept parameter mapFn.\n                            // 3. parameters of 'SupportedTypedArrayConstructors.from()' does not match the requirement of the union\n                            // type.\n                            // assume 'arg1' is of type \"readonly number[]|readonly bigint[]\" here.\n                            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                            data = typedArrayConstructor.from(arg1, BigInt);\n                        }\n                        else {\n                            // assume 'arg1' is of type \"readonly number[]\" here.\n                            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                            data = typedArrayConstructor.from(arg1);\n                        }\n                    }\n                    else if (arg1 instanceof typedArrayConstructor) {\n                        data = arg1;\n                    }\n                    else {\n                        throw new TypeError(`A ${type} tensor's data must be type of ${typedArrayConstructor}`);\n                    }\n                }\n            }\n            else {\n                //\n                // Override: constructor(data, ...)\n                //\n                maybeDims = arg1;\n                if (Array.isArray(arg0)) {\n                    // only boolean[] and string[] is supported\n                    if (arg0.length === 0) {\n                        throw new TypeError('Tensor type cannot be inferred from an empty array.');\n                    }\n                    const firstElementType = typeof arg0[0];\n                    if (firstElementType === 'string') {\n                        type = 'string';\n                        data = arg0;\n                    }\n                    else if (firstElementType === 'boolean') {\n                        type = 'bool';\n                        // 'arg0' is of type 'boolean[]'. Uint8Array.from(boolean[]) actually works, but typescript thinks this is\n                        // wrong type. We use 'as any' to make it happy.\n                        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                        data = Uint8Array.from(arg0);\n                    }\n                    else {\n                        throw new TypeError(`Invalid element type of data array: ${firstElementType}.`);\n                    }\n                }\n                else {\n                    // get tensor type from TypedArray\n                    const mappedType = tensor_impl_type_mapping_js_1.NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.get(arg0.constructor);\n                    if (mappedType === undefined) {\n                        throw new TypeError(`Unsupported type for tensor data: ${arg0.constructor}.`);\n                    }\n                    type = mappedType;\n                    data = arg0;\n                }\n            }\n            // type and data is processed, now processing dims\n            if (maybeDims === undefined) {\n                // assume 1-D tensor if dims omitted\n                maybeDims = [data.length];\n            }\n            else if (!Array.isArray(maybeDims)) {\n                throw new TypeError('A tensor\\'s dims must be a number array');\n            }\n            dims = maybeDims;\n            this.cpuData = data;\n            this.dataLocation = 'cpu';\n        }\n        // perform check on dims\n        const size = (0, tensor_utils_impl_js_1.calculateSize)(dims);\n        // if data is on CPU, check whether data length matches tensor size\n        if (this.cpuData && size !== this.cpuData.length) {\n            throw new Error(`Tensor's size(${size}) does not match data length(${this.cpuData.length}).`);\n        }\n        this.type = type;\n        this.dims = dims;\n        this.size = size;\n    }\n    // #endregion\n    // #region factory\n    static async fromImage(image, options) {\n        return (0, tensor_factory_impl_js_1.tensorFromImage)(image, options);\n    }\n    static fromTexture(texture, options) {\n        return (0, tensor_factory_impl_js_1.tensorFromTexture)(texture, options);\n    }\n    static fromGpuBuffer(gpuBuffer, options) {\n        return (0, tensor_factory_impl_js_1.tensorFromGpuBuffer)(gpuBuffer, options);\n    }\n    static fromPinnedBuffer(type, buffer, dims) {\n        return (0, tensor_factory_impl_js_1.tensorFromPinnedBuffer)(type, buffer, dims);\n    }\n    // #endregion\n    // #region conversions\n    toDataURL(options) {\n        return (0, tensor_conversion_impl_js_1.tensorToDataURL)(this, options);\n    }\n    toImageData(options) {\n        return (0, tensor_conversion_impl_js_1.tensorToImageData)(this, options);\n    }\n    // #endregion\n    // #region properties\n    get data() {\n        this.ensureValid();\n        if (!this.cpuData) {\n            throw new Error('The data is not on CPU. Use `getData()` to download GPU data to CPU, ' +\n                'or use `texture` or `gpuBuffer` property to access the GPU data directly.');\n        }\n        return this.cpuData;\n    }\n    get location() {\n        return this.dataLocation;\n    }\n    get texture() {\n        this.ensureValid();\n        if (!this.gpuTextureData) {\n            throw new Error('The data is not stored as a WebGL texture.');\n        }\n        return this.gpuTextureData;\n    }\n    get gpuBuffer() {\n        this.ensureValid();\n        if (!this.gpuBufferData) {\n            throw new Error('The data is not stored as a WebGPU buffer.');\n        }\n        return this.gpuBufferData;\n    }\n    // #endregion\n    // #region methods\n    async getData(releaseData) {\n        this.ensureValid();\n        switch (this.dataLocation) {\n            case 'cpu':\n            case 'cpu-pinned':\n                return this.data;\n            case 'texture':\n            case 'gpu-buffer': {\n                if (!this.downloader) {\n                    throw new Error('The current tensor is not created with a specified data downloader.');\n                }\n                if (this.isDownloading) {\n                    throw new Error('The current tensor is being downloaded.');\n                }\n                try {\n                    this.isDownloading = true;\n                    const data = await this.downloader();\n                    this.downloader = undefined;\n                    this.dataLocation = 'cpu';\n                    this.cpuData = data;\n                    if (releaseData && this.disposer) {\n                        this.disposer();\n                        this.disposer = undefined;\n                    }\n                    return data;\n                }\n                finally {\n                    this.isDownloading = false;\n                }\n            }\n            default:\n                throw new Error(`cannot get data from location: ${this.dataLocation}`);\n        }\n    }\n    dispose() {\n        if (this.isDownloading) {\n            throw new Error('The current tensor is being downloaded.');\n        }\n        if (this.disposer) {\n            this.disposer();\n            this.disposer = undefined;\n        }\n        this.cpuData = undefined;\n        this.gpuTextureData = undefined;\n        this.gpuBufferData = undefined;\n        this.downloader = undefined;\n        this.isDownloading = undefined;\n        this.dataLocation = 'none';\n    }\n    // #endregion\n    // #region tensor utilities\n    ensureValid() {\n        if (this.dataLocation === 'none') {\n            throw new Error('The tensor is disposed.');\n        }\n    }\n    reshape(dims) {\n        this.ensureValid();\n        if (this.downloader || this.disposer) {\n            throw new Error('Cannot reshape a tensor that owns GPU resource.');\n        }\n        return (0, tensor_utils_impl_js_1.tensorReshape)(this, dims);\n    }\n}\nexports.Tensor = Tensor;\n//# sourceMappingURL=tensor-impl.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.tensorReshape = exports.calculateSize = void 0;\nconst tensor_impl_js_1 = require(\"./tensor-impl.js\");\n/**\n * calculate size from dims.\n *\n * @param dims the dims array. May be an illegal input.\n */\nconst calculateSize = (dims) => {\n    let size = 1;\n    for (let i = 0; i < dims.length; i++) {\n        const dim = dims[i];\n        if (typeof dim !== 'number' || !Number.isSafeInteger(dim)) {\n            throw new TypeError(`dims[${i}] must be an integer, got: ${dim}`);\n        }\n        if (dim < 0) {\n            throw new RangeError(`dims[${i}] must be a non-negative integer, got: ${dim}`);\n        }\n        size *= dim;\n    }\n    return size;\n};\nexports.calculateSize = calculateSize;\n/**\n * implementation of Tensor.reshape()\n */\nconst tensorReshape = (tensor, dims) => {\n    switch (tensor.location) {\n        case 'cpu':\n            return new tensor_impl_js_1.Tensor(tensor.type, tensor.data, dims);\n        case 'cpu-pinned':\n            return new tensor_impl_js_1.Tensor({\n                location: 'cpu-pinned',\n                data: tensor.data,\n                type: tensor.type,\n                dims,\n            });\n        case 'texture':\n            return new tensor_impl_js_1.Tensor({\n                location: 'texture',\n                texture: tensor.texture,\n                type: tensor.type,\n                dims,\n            });\n        case 'gpu-buffer':\n            return new tensor_impl_js_1.Tensor({\n                location: 'gpu-buffer',\n                gpuBuffer: tensor.gpuBuffer,\n                type: tensor.type,\n                dims,\n            });\n        default:\n            throw new Error(`tensorReshape: tensor location ${tensor.location} is not supported`);\n    }\n};\nexports.tensorReshape = tensorReshape;\n//# sourceMappingURL=tensor-utils-impl.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Tensor = void 0;\nconst tensor_impl_js_1 = require(\"./tensor-impl.js\");\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexports.Tensor = tensor_impl_js_1.Tensor;\n//# sourceMappingURL=tensor.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TrainingSession = void 0;\nclass TrainingSession {\n    constructor(handler) {\n        this.handler = handler;\n    }\n    get inputNames() {\n        return this.handler.inputNames;\n    }\n    get outputNames() {\n        return this.handler.outputNames;\n    }\n    static async create(_trainingOptions, _sessionOptions) {\n        throw new Error('Method not implemented');\n    }\n    async loadParametersBuffer(_array, _trainableOnly) {\n        throw new Error('Method not implemented.');\n    }\n    async getContiguousParameters(_trainableOnly) {\n        throw new Error('Method not implemented.');\n    }\n    async runTrainStep(_feeds, _fetches, _options) {\n        throw new Error('Method not implemented.');\n    }\n    async release() {\n        return this.handler.dispose();\n    }\n}\nexports.TrainingSession = TrainingSession;\n//# sourceMappingURL=training-session-impl.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TrainingSession = void 0;\nconst training_session_impl_js_1 = require(\"./training-session-impl.js\");\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexports.TrainingSession = training_session_impl_js_1.TrainingSession;\n//# sourceMappingURL=training-session.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.version = void 0;\n// This file is generated by /js/scripts/update-version.ts\n// Do not modify file content manually.\nexports.version = '1.17.0';\n//# sourceMappingURL=version.js.map","/// @file\n/// @addtogroup flatbuffers_javascript_api\n/// @{\n/// @cond FLATBUFFERS_INTERNAL\n\n/**\n * @fileoverview\n *\n * Need to suppress 'global this' error so the Node.js export line doesn't cause\n * closure compile to error out.\n * @suppress {globalThis}\n */\n\n/**\n * @const\n * @namespace\n */\nvar flatbuffers = {};\n\n/**\n * @typedef {number}\n */\nflatbuffers.Offset;\n\n/**\n * @typedef {{\n *   bb: flatbuffers.ByteBuffer,\n *   bb_pos: number\n * }}\n */\nflatbuffers.Table;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_SHORT = 2;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_INT = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.FILE_IDENTIFIER_LENGTH = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZE_PREFIX_LENGTH = 4;\n\n/**\n * @enum {number}\n */\nflatbuffers.Encoding = {\n  UTF8_BYTES: 1,\n  UTF16_STRING: 2\n};\n\n/**\n * @type {Int32Array}\n * @const\n */\nflatbuffers.int32 = new Int32Array(2);\n\n/**\n * @type {Float32Array}\n * @const\n */\nflatbuffers.float32 = new Float32Array(flatbuffers.int32.buffer);\n\n/**\n * @type {Float64Array}\n * @const\n */\nflatbuffers.float64 = new Float64Array(flatbuffers.int32.buffer);\n\n/**\n * @type {boolean}\n * @const\n */\nflatbuffers.isLittleEndian = new Uint16Array(new Uint8Array([1, 0]).buffer)[0] === 1;\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @constructor\n * @param {number} low\n * @param {number} high\n */\nflatbuffers.Long = function(low, high) {\n  /**\n   * @type {number}\n   * @const\n   */\n  this.low = low | 0;\n\n  /**\n   * @type {number}\n   * @const\n   */\n  this.high = high | 0;\n};\n\n/**\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.Long.create = function(low, high) {\n  // Special-case zero to avoid GC overhead for default values\n  return low == 0 && high == 0 ? flatbuffers.Long.ZERO : new flatbuffers.Long(low, high);\n};\n\n/**\n * @returns {number}\n */\nflatbuffers.Long.prototype.toFloat64 = function() {\n  return (this.low >>> 0) + this.high * 0x100000000;\n};\n\n/**\n * @param {flatbuffers.Long} other\n * @returns {boolean}\n */\nflatbuffers.Long.prototype.equals = function(other) {\n  return this.low == other.low && this.high == other.high;\n};\n\n/**\n * @type {!flatbuffers.Long}\n * @const\n */\nflatbuffers.Long.ZERO = new flatbuffers.Long(0, 0);\n\n/// @endcond\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a FlatBufferBuilder.\n *\n * @constructor\n * @param {number=} opt_initial_size\n */\nflatbuffers.Builder = function(opt_initial_size) {\n  if (!opt_initial_size) {\n    var initial_size = 1024;\n  } else {\n    var initial_size = opt_initial_size;\n  }\n\n  /**\n   * @type {flatbuffers.ByteBuffer}\n   * @private\n   */\n  this.bb = flatbuffers.ByteBuffer.allocate(initial_size);\n\n  /**\n   * Remaining space in the ByteBuffer.\n   *\n   * @type {number}\n   * @private\n   */\n  this.space = initial_size;\n\n  /**\n   * Minimum alignment encountered so far.\n   *\n   * @type {number}\n   * @private\n   */\n  this.minalign = 1;\n\n  /**\n   * The vtable for the current table.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtable = null;\n\n  /**\n   * The amount of fields we're actually using.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vtable_in_use = 0;\n\n  /**\n   * Whether we are currently serializing a table.\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.isNested = false;\n\n  /**\n   * Starting offset of the current struct/table.\n   *\n   * @type {number}\n   * @private\n   */\n  this.object_start = 0;\n\n  /**\n   * List of offsets of all vtables.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtables = [];\n\n  /**\n   * For the current vector being built.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vector_num_elems = 0;\n\n  /**\n   * False omits default values from the serialized data\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.force_defaults = false;\n};\n\nflatbuffers.Builder.prototype.clear = function() {\n  this.bb.clear();\n  this.space = this.bb.capacity();\n  this.minalign = 1;\n  this.vtable = null;\n  this.vtable_in_use = 0;\n  this.isNested = false;\n  this.object_start = 0;\n  this.vtables = [];\n  this.vector_num_elems = 0;\n  this.force_defaults = false;\n};\n\n/**\n * In order to save space, fields that are set to their default value\n * don't get serialized into the buffer. Forcing defaults provides a\n * way to manually disable this optimization.\n *\n * @param {boolean} forceDefaults true always serializes default values\n */\nflatbuffers.Builder.prototype.forceDefaults = function(forceDefaults) {\n  this.force_defaults = forceDefaults;\n};\n\n/**\n * Get the ByteBuffer representing the FlatBuffer. Only call this after you've\n * called finish(). The actual data starts at the ByteBuffer's current position,\n * not necessarily at 0.\n *\n * @returns {flatbuffers.ByteBuffer}\n */\nflatbuffers.Builder.prototype.dataBuffer = function() {\n  return this.bb;\n};\n\n/**\n * Get the bytes representing the FlatBuffer. Only call this after you've\n * called finish().\n *\n * @returns {!Uint8Array}\n */\nflatbuffers.Builder.prototype.asUint8Array = function() {\n  return this.bb.bytes().subarray(this.bb.position(), this.bb.position() + this.offset());\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Prepare to write an element of `size` after `additional_bytes` have been\n * written, e.g. if you write a string, you need to align such the int length\n * field is aligned to 4 bytes, and the string data follows it directly. If all\n * you need to do is alignment, `additional_bytes` will be 0.\n *\n * @param {number} size This is the of the new element to write\n * @param {number} additional_bytes The padding size\n */\nflatbuffers.Builder.prototype.prep = function(size, additional_bytes) {\n  // Track the biggest thing we've ever aligned to.\n  if (size > this.minalign) {\n    this.minalign = size;\n  }\n\n  // Find the amount of alignment needed such that `size` is properly\n  // aligned after `additional_bytes`\n  var align_size = ((~(this.bb.capacity() - this.space + additional_bytes)) + 1) & (size - 1);\n\n  // Reallocate the buffer if needed.\n  while (this.space < align_size + size + additional_bytes) {\n    var old_buf_size = this.bb.capacity();\n    this.bb = flatbuffers.Builder.growByteBuffer(this.bb);\n    this.space += this.bb.capacity() - old_buf_size;\n  }\n\n  this.pad(align_size);\n};\n\n/**\n * @param {number} byte_size\n */\nflatbuffers.Builder.prototype.pad = function(byte_size) {\n  for (var i = 0; i < byte_size; i++) {\n    this.bb.writeInt8(--this.space, 0);\n  }\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt8 = function(value) {\n  this.bb.writeInt8(this.space -= 1, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt16 = function(value) {\n  this.bb.writeInt16(this.space -= 2, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt32 = function(value) {\n  this.bb.writeInt32(this.space -= 4, value);\n};\n\n/**\n * @param {flatbuffers.Long} value\n */\nflatbuffers.Builder.prototype.writeInt64 = function(value) {\n  this.bb.writeInt64(this.space -= 8, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat32 = function(value) {\n  this.bb.writeFloat32(this.space -= 4, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat64 = function(value) {\n  this.bb.writeFloat64(this.space -= 8, value);\n};\n/// @endcond\n\n/**\n * Add an `int8` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int8` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt8 = function(value) {\n  this.prep(1, 0);\n  this.writeInt8(value);\n};\n\n/**\n * Add an `int16` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int16` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt16 = function(value) {\n  this.prep(2, 0);\n  this.writeInt16(value);\n};\n\n/**\n * Add an `int32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt32 = function(value) {\n  this.prep(4, 0);\n  this.writeInt32(value);\n};\n\n/**\n * Add an `int64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {flatbuffers.Long} value The `int64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt64 = function(value) {\n  this.prep(8, 0);\n  this.writeInt64(value);\n};\n\n/**\n * Add a `float32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat32 = function(value) {\n  this.prep(4, 0);\n  this.writeFloat32(value);\n};\n\n/**\n * Add a `float64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat64 = function(value) {\n  this.prep(8, 0);\n  this.writeFloat64(value);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt8 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt8(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt16 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt16(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Long} value\n * @param {flatbuffers.Long} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || !value.equals(defaultValue)) {\n    this.addInt64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldOffset = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addOffset(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structs are stored inline, so nothing additional is being added. `d` is always 0.\n *\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldStruct = function(voffset, value, defaultValue) {\n  if (value != defaultValue) {\n    this.nested(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structures are always stored inline, they need to be created right\n * where they're used.  You'll get this assertion failure if you\n * created it elsewhere.\n *\n * @param {flatbuffers.Offset} obj The offset of the created object\n */\nflatbuffers.Builder.prototype.nested = function(obj) {\n  if (obj != this.offset()) {\n    throw new Error('FlatBuffers: struct must be serialized inline.');\n  }\n};\n\n/**\n * Should not be creating any other object, string or vector\n * while an object is being constructed\n */\nflatbuffers.Builder.prototype.notNested = function() {\n  if (this.isNested) {\n    throw new Error('FlatBuffers: object serialization must not be nested.');\n  }\n};\n\n/**\n * Set the current vtable at `voffset` to the current location in the buffer.\n *\n * @param {number} voffset\n */\nflatbuffers.Builder.prototype.slot = function(voffset) {\n  this.vtable[voffset] = this.offset();\n};\n\n/**\n * @returns {flatbuffers.Offset} Offset relative to the end of the buffer.\n */\nflatbuffers.Builder.prototype.offset = function() {\n  return this.bb.capacity() - this.space;\n};\n\n/**\n * Doubles the size of the backing ByteBuffer and copies the old data towards\n * the end of the new buffer (since we build the buffer backwards).\n *\n * @param {flatbuffers.ByteBuffer} bb The current buffer with the existing data\n * @returns {!flatbuffers.ByteBuffer} A new byte buffer with the old data copied\n * to it. The data is located at the end of the buffer.\n *\n * uint8Array.set() formally takes {Array<number>|ArrayBufferView}, so to pass\n * it a uint8Array we need to suppress the type check:\n * @suppress {checkTypes}\n */\nflatbuffers.Builder.growByteBuffer = function(bb) {\n  var old_buf_size = bb.capacity();\n\n  // Ensure we don't grow beyond what fits in an int.\n  if (old_buf_size & 0xC0000000) {\n    throw new Error('FlatBuffers: cannot grow buffer beyond 2 gigabytes.');\n  }\n\n  var new_buf_size = old_buf_size << 1;\n  var nbb = flatbuffers.ByteBuffer.allocate(new_buf_size);\n  nbb.setPosition(new_buf_size - old_buf_size);\n  nbb.bytes().set(bb.bytes(), new_buf_size - old_buf_size);\n  return nbb;\n};\n/// @endcond\n\n/**\n * Adds on offset, relative to where it will be written.\n *\n * @param {flatbuffers.Offset} offset The offset to add.\n */\nflatbuffers.Builder.prototype.addOffset = function(offset) {\n  this.prep(flatbuffers.SIZEOF_INT, 0); // Ensure alignment is already done.\n  this.writeInt32(this.offset() - offset + flatbuffers.SIZEOF_INT);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Start encoding a new object in the buffer.  Users will not usually need to\n * call this directly. The FlatBuffers compiler will generate helper methods\n * that call this method internally.\n *\n * @param {number} numfields\n */\nflatbuffers.Builder.prototype.startObject = function(numfields) {\n  this.notNested();\n  if (this.vtable == null) {\n    this.vtable = [];\n  }\n  this.vtable_in_use = numfields;\n  for (var i = 0; i < numfields; i++) {\n    this.vtable[i] = 0; // This will push additional elements as needed\n  }\n  this.isNested = true;\n  this.object_start = this.offset();\n};\n\n/**\n * Finish off writing the object that is under construction.\n *\n * @returns {flatbuffers.Offset} The offset to the object inside `dataBuffer`\n */\nflatbuffers.Builder.prototype.endObject = function() {\n  if (this.vtable == null || !this.isNested) {\n    throw new Error('FlatBuffers: endObject called without startObject');\n  }\n\n  this.addInt32(0);\n  var vtableloc = this.offset();\n\n  // Trim trailing zeroes.\n  var i = this.vtable_in_use - 1;\n  for (; i >= 0 && this.vtable[i] == 0; i--) {}\n  var trimmed_size = i + 1;\n\n  // Write out the current vtable.\n  for (; i >= 0; i--) {\n    // Offset relative to the start of the table.\n    this.addInt16(this.vtable[i] != 0 ? vtableloc - this.vtable[i] : 0);\n  }\n\n  var standard_fields = 2; // The fields below:\n  this.addInt16(vtableloc - this.object_start);\n  var len = (trimmed_size + standard_fields) * flatbuffers.SIZEOF_SHORT;\n  this.addInt16(len);\n\n  // Search for an existing vtable that matches the current one.\n  var existing_vtable = 0;\n  var vt1 = this.space;\nouter_loop:\n  for (i = 0; i < this.vtables.length; i++) {\n    var vt2 = this.bb.capacity() - this.vtables[i];\n    if (len == this.bb.readInt16(vt2)) {\n      for (var j = flatbuffers.SIZEOF_SHORT; j < len; j += flatbuffers.SIZEOF_SHORT) {\n        if (this.bb.readInt16(vt1 + j) != this.bb.readInt16(vt2 + j)) {\n          continue outer_loop;\n        }\n      }\n      existing_vtable = this.vtables[i];\n      break;\n    }\n  }\n\n  if (existing_vtable) {\n    // Found a match:\n    // Remove the current vtable.\n    this.space = this.bb.capacity() - vtableloc;\n\n    // Point table to existing vtable.\n    this.bb.writeInt32(this.space, existing_vtable - vtableloc);\n  } else {\n    // No match:\n    // Add the location of the current vtable to the list of vtables.\n    this.vtables.push(this.offset());\n\n    // Point table to current vtable.\n    this.bb.writeInt32(this.bb.capacity() - vtableloc, this.offset() - vtableloc);\n  }\n\n  this.isNested = false;\n  return vtableloc;\n};\n/// @endcond\n\n/**\n * Finalize a buffer, poiting to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n * @param {boolean=} opt_size_prefix\n */\nflatbuffers.Builder.prototype.finish = function(root_table, opt_file_identifier, opt_size_prefix) {\n  var size_prefix = opt_size_prefix ? flatbuffers.SIZE_PREFIX_LENGTH : 0;\n  if (opt_file_identifier) {\n    var file_identifier = opt_file_identifier;\n    this.prep(this.minalign, flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH + size_prefix);\n    if (file_identifier.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n      throw new Error('FlatBuffers: file identifier must be length ' +\n        flatbuffers.FILE_IDENTIFIER_LENGTH);\n    }\n    for (var i = flatbuffers.FILE_IDENTIFIER_LENGTH - 1; i >= 0; i--) {\n      this.writeInt8(file_identifier.charCodeAt(i));\n    }\n  }\n  this.prep(this.minalign, flatbuffers.SIZEOF_INT + size_prefix);\n  this.addOffset(root_table);\n  if (size_prefix) {\n    this.addInt32(this.bb.capacity() - this.space);\n  }\n  this.bb.setPosition(this.space);\n};\n\n/**\n * Finalize a size prefixed buffer, pointing to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n */\nflatbuffers.Builder.prototype.finishSizePrefixed = function (root_table, opt_file_identifier) {\n  this.finish(root_table, opt_file_identifier, true);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * This checks a required field has been set in a given table that has\n * just been constructed.\n *\n * @param {flatbuffers.Offset} table\n * @param {number} field\n */\nflatbuffers.Builder.prototype.requiredField = function(table, field) {\n  var table_start = this.bb.capacity() - table;\n  var vtable_start = table_start - this.bb.readInt32(table_start);\n  var ok = this.bb.readInt16(vtable_start + field) != 0;\n\n  // If this fails, the caller will show what field needs to be set.\n  if (!ok) {\n    throw new Error('FlatBuffers: field ' + field + ' must be set');\n  }\n};\n\n/**\n * Start a new array/vector of objects.  Users usually will not call\n * this directly. The FlatBuffers compiler will create a start/end\n * method for vector types in generated code.\n *\n * @param {number} elem_size The size of each element in the array\n * @param {number} num_elems The number of elements in the array\n * @param {number} alignment The alignment of the array\n */\nflatbuffers.Builder.prototype.startVector = function(elem_size, num_elems, alignment) {\n  this.notNested();\n  this.vector_num_elems = num_elems;\n  this.prep(flatbuffers.SIZEOF_INT, elem_size * num_elems);\n  this.prep(alignment, elem_size * num_elems); // Just in case alignment > int.\n};\n\n/**\n * Finish off the creation of an array and all its elements. The array must be\n * created with `startVector`.\n *\n * @returns {flatbuffers.Offset} The offset at which the newly created array\n * starts.\n */\nflatbuffers.Builder.prototype.endVector = function() {\n  this.writeInt32(this.vector_num_elems);\n  return this.offset();\n};\n/// @endcond\n\n/**\n * Encode the string `s` in the buffer using UTF-8. If a Uint8Array is passed\n * instead of a string, it is assumed to contain valid UTF-8 encoded data.\n *\n * @param {string|Uint8Array} s The string to encode\n * @return {flatbuffers.Offset} The offset in the buffer where the encoded string starts\n */\nflatbuffers.Builder.prototype.createString = function(s) {\n  if (s instanceof Uint8Array) {\n    var utf8 = s;\n  } else {\n    var utf8 = [];\n    var i = 0;\n\n    while (i < s.length) {\n      var codePoint;\n\n      // Decode UTF-16\n      var a = s.charCodeAt(i++);\n      if (a < 0xD800 || a >= 0xDC00) {\n        codePoint = a;\n      } else {\n        var b = s.charCodeAt(i++);\n        codePoint = (a << 10) + b + (0x10000 - (0xD800 << 10) - 0xDC00);\n      }\n\n      // Encode UTF-8\n      if (codePoint < 0x80) {\n        utf8.push(codePoint);\n      } else {\n        if (codePoint < 0x800) {\n          utf8.push(((codePoint >> 6) & 0x1F) | 0xC0);\n        } else {\n          if (codePoint < 0x10000) {\n            utf8.push(((codePoint >> 12) & 0x0F) | 0xE0);\n          } else {\n            utf8.push(\n              ((codePoint >> 18) & 0x07) | 0xF0,\n              ((codePoint >> 12) & 0x3F) | 0x80);\n          }\n          utf8.push(((codePoint >> 6) & 0x3F) | 0x80);\n        }\n        utf8.push((codePoint & 0x3F) | 0x80);\n      }\n    }\n  }\n\n  this.addInt8(0);\n  this.startVector(1, utf8.length, 1);\n  this.bb.setPosition(this.space -= utf8.length);\n  for (var i = 0, offset = this.space, bytes = this.bb.bytes(); i < utf8.length; i++) {\n    bytes[offset++] = utf8[i];\n  }\n  return this.endVector();\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.Builder.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n////////////////////////////////////////////////////////////////////////////////\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Create a new ByteBuffer with a given array of bytes (`Uint8Array`).\n *\n * @constructor\n * @param {Uint8Array} bytes\n */\nflatbuffers.ByteBuffer = function(bytes) {\n  /**\n   * @type {Uint8Array}\n   * @private\n   */\n  this.bytes_ = bytes;\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.position_ = 0;\n};\n\n/**\n * Create and allocate a new ByteBuffer with a given size.\n *\n * @param {number} byte_size\n * @returns {!flatbuffers.ByteBuffer}\n */\nflatbuffers.ByteBuffer.allocate = function(byte_size) {\n  return new flatbuffers.ByteBuffer(new Uint8Array(byte_size));\n};\n\nflatbuffers.ByteBuffer.prototype.clear = function() {\n  this.position_ = 0;\n};\n\n/**\n * Get the underlying `Uint8Array`.\n *\n * @returns {Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.bytes = function() {\n  return this.bytes_;\n};\n\n/**\n * Get the buffer's position.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.position = function() {\n  return this.position_;\n};\n\n/**\n * Set the buffer's position.\n *\n * @param {number} position\n */\nflatbuffers.ByteBuffer.prototype.setPosition = function(position) {\n  this.position_ = position;\n};\n\n/**\n * Get the buffer's capacity.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.capacity = function() {\n  return this.bytes_.length;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt8 = function(offset) {\n  return this.readUint8(offset) << 24 >> 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint8 = function(offset) {\n  return this.bytes_[offset];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt16 = function(offset) {\n  return this.readUint16(offset) << 16 >> 16;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint16 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt32 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8 | this.bytes_[offset + 2] << 16 | this.bytes_[offset + 3] << 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint32 = function(offset) {\n  return this.readInt32(offset) >>> 0;\n};\n\n/**\n * @param {number} offset\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readInt64 = function(offset) {\n  return new flatbuffers.Long(this.readInt32(offset), this.readInt32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readUint64 = function(offset) {\n  return new flatbuffers.Long(this.readUint32(offset), this.readUint32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat32 = function(offset) {\n  flatbuffers.int32[0] = this.readInt32(offset);\n  return flatbuffers.float32[0];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat64 = function(offset) {\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1] = this.readInt32(offset);\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0] = this.readInt32(offset + 4);\n  return flatbuffers.float64[0];\n};\n\n/**\n * @param {number} offset\n * @param {number|boolean} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt8 = function(offset, value) {\n  this.bytes_[offset] = /** @type {number} */(value);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint8 = function(offset, value) {\n  this.bytes_[offset] = value;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt16 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint16 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt32 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n  this.bytes_[offset + 2] = value >> 16;\n  this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint32 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n    this.bytes_[offset + 2] = value >> 16;\n    this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt64 = function(offset, value) {\n  this.writeInt32(offset, value.low);\n  this.writeInt32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint64 = function(offset, value) {\n    this.writeUint32(offset, value.low);\n    this.writeUint32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat32 = function(offset, value) {\n  flatbuffers.float32[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[0]);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat64 = function(offset, value) {\n  flatbuffers.float64[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1]);\n  this.writeInt32(offset + 4, flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0]);\n};\n\n/**\n * Return the file identifier.   Behavior is undefined for FlatBuffers whose\n * schema does not include a file_identifier (likely points at padding or the\n * start of a the root vtable).\n * @returns {string}\n */\nflatbuffers.ByteBuffer.prototype.getBufferIdentifier = function() {\n  if (this.bytes_.length < this.position_ + flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error(\n        'FlatBuffers: ByteBuffer is too short to contain an identifier.');\n  }\n  var result = \"\";\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    result += String.fromCharCode(\n        this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i));\n  }\n  return result;\n};\n\n/**\n * Look up a field in the vtable, return an offset into the object, or 0 if the\n * field is not present.\n *\n * @param {number} bb_pos\n * @param {number} vtable_offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__offset = function(bb_pos, vtable_offset) {\n  var vtable = bb_pos - this.readInt32(bb_pos);\n  return vtable_offset < this.readInt16(vtable) ? this.readInt16(vtable + vtable_offset) : 0;\n};\n\n/**\n * Initialize any Table-derived type to point to the union at the given offset.\n *\n * @param {flatbuffers.Table} t\n * @param {number} offset\n * @returns {flatbuffers.Table}\n */\nflatbuffers.ByteBuffer.prototype.__union = function(t, offset) {\n  t.bb_pos = offset + this.readInt32(offset);\n  t.bb = this;\n  return t;\n};\n\n/**\n * Create a JavaScript string from UTF-8 data stored inside the FlatBuffer.\n * This allocates a new string and converts to wide chars upon each access.\n *\n * To avoid the conversion to UTF-16, pass flatbuffers.Encoding.UTF8_BYTES as\n * the \"optionalEncoding\" argument. This is useful for avoiding conversion to\n * and from UTF-16 when the data will just be packaged back up in another\n * FlatBuffer later on.\n *\n * @param {number} offset\n * @param {flatbuffers.Encoding=} opt_encoding Defaults to UTF16_STRING\n * @returns {string|!Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.__string = function(offset, opt_encoding) {\n  offset += this.readInt32(offset);\n\n  var length = this.readInt32(offset);\n  var result = '';\n  var i = 0;\n\n  offset += flatbuffers.SIZEOF_INT;\n\n  if (opt_encoding === flatbuffers.Encoding.UTF8_BYTES) {\n    return this.bytes_.subarray(offset, offset + length);\n  }\n\n  while (i < length) {\n    var codePoint;\n\n    // Decode UTF-8\n    var a = this.readUint8(offset + i++);\n    if (a < 0xC0) {\n      codePoint = a;\n    } else {\n      var b = this.readUint8(offset + i++);\n      if (a < 0xE0) {\n        codePoint =\n          ((a & 0x1F) << 6) |\n          (b & 0x3F);\n      } else {\n        var c = this.readUint8(offset + i++);\n        if (a < 0xF0) {\n          codePoint =\n            ((a & 0x0F) << 12) |\n            ((b & 0x3F) << 6) |\n            (c & 0x3F);\n        } else {\n          var d = this.readUint8(offset + i++);\n          codePoint =\n            ((a & 0x07) << 18) |\n            ((b & 0x3F) << 12) |\n            ((c & 0x3F) << 6) |\n            (d & 0x3F);\n        }\n      }\n    }\n\n    // Encode UTF-16\n    if (codePoint < 0x10000) {\n      result += String.fromCharCode(codePoint);\n    } else {\n      codePoint -= 0x10000;\n      result += String.fromCharCode(\n        (codePoint >> 10) + 0xD800,\n        (codePoint & ((1 << 10) - 1)) + 0xDC00);\n    }\n  }\n\n  return result;\n};\n\n/**\n * Retrieve the relative offset stored at \"offset\"\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__indirect = function(offset) {\n  return offset + this.readInt32(offset);\n};\n\n/**\n * Get the start of data of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector = function(offset) {\n  return offset + this.readInt32(offset) + flatbuffers.SIZEOF_INT; // data starts after the length\n};\n\n/**\n * Get the length of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector_len = function(offset) {\n  return this.readInt32(offset + this.readInt32(offset));\n};\n\n/**\n * @param {string} ident\n * @returns {boolean}\n */\nflatbuffers.ByteBuffer.prototype.__has_identifier = function(ident) {\n  if (ident.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error('FlatBuffers: file identifier must be length ' +\n                    flatbuffers.FILE_IDENTIFIER_LENGTH);\n  }\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    if (ident.charCodeAt(i) != this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n\n// Exports for Node.js and RequireJS\nexport { flatbuffers };\n\n/// @endcond\n/// @}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(1057);\n"],"names":["root","factory","exports","module","define","amd","self","init","createInferenceSessionHandler","pathOrBuffer","options","session","Session","loadModel","OnnxjsSessionHandler","onnxjsBackend","OnnxjsBackend","initializeFlags","env","wasm","initTimeout","simd","proxy","numThreads","Number","isInteger","numCpuLogicalCores","navigator","cpus","length","hardwareConcurrency","Math","min","ceil","initializeWebAssemblyInstance","handler","OnnxruntimeWebAssemblySessionHandler","Promise","resolve","wasmBackend","OnnxruntimeWebAssemblyBackend","registerBackend","Object","defineProperty","versions","value","version","enumerable","attribute","assign","this","_cacheKey","getOwnPropertyNames","sort","map","name","join","createAttributeWithCacheKey","AttributeWithCacheKeyImpl","ortFbs","onnxruntime","experimental","fbs","attributes","_attributes","Map","attr","onnx","AttributeProto","set","Attribute","getValue","getType","size","Error","key","type","delete","getFloat","defaultValue","get","getInt","getString","getTensor","getFloats","getInts","getStrings","getTensors","valueAndType","undefined","AttributeType","FLOAT","INT","STRING","TENSOR","FLOATS","INTS","STRINGS","TENSORS","attrType","GRAPH","GRAPHS","getValueNoCheck","LongUtil","isLong","longToNumber","arr","numberValue","Array","i","maybeLong","Tensor","fromProto","fromOrtTensor","utf8String","decodeUtf8String","getValueNoCheckFromOnnxFormat","getValueNoCheckFromOrtFormat","f","s","t","g","floats","ints","strings","tensors","graphs","floatsArray","intsLength","push","stringsLength","tensorsLength","backendsCache","tryLoadBackend","backendHint","backendObj","backend","obj","o","initialize","createSessionHandler","dispose","webgl","WebGLBackend","resolveBackend","hint","hints","cache","contextId","matmulMaxBatchSize","textureCacheMode","pack","async","glContext","createWebGLContext","Logger","setWithEnv","gl","verbose","e","warning","context","WebGLSessionHandler","getFunctions","offsetToCoords","coordsToOffset","toVec","valueFrom","getCommonUtilFuncs","getInputsSamplingSnippets","getOutputSamplingSnippet","getCustomTypes","GlslLibRoutine","outputLayout","outputTextureLayout","isPacked","getPackedOutputSamplingSnippet","getUnpackedOutputSamplingSnippet","outShape","unpackedShape","outTexShape","width","height","result","funcName","getOutputScalarCoords","getOutputPacked1DCoords","getOutputPacked2DCoords","getOutputPacked3DCoords","getOutputPackedNDCoords","glsl","getGlsl","floatTextureSetRGBASource","output","getOutputUnpacked1DCoords","getOutputUnpacked2DCoords","getOutputUnpacked3DCoords","getOutputUnpacked4DCoords","getOutputUnpacked5DCoords","getOutputUnpacked6DCoords","floatTextureSetRSource","shape","texShape","packedTexShape","source","ArrayUtil","arraysEqual","texelsInLogicalRow","texelsInBatch","texelsInBatchN","batches","coords","b","rank","strides","coordsToCompute","coordsFromIndexSnippet","stride","line1","line2","texture2D","programInfo","inputNames","forEach","samplerName","inputLayout","inputTextureLayouts","generateShaderFuncNameFromInputSamplerName","getPackedSamplerFromInput","getUnpackedSamplerFromInput","outCoordFuncName","generateShaderFuncNameFromInputSamplerNameAtOutCoords","getPackedSamplerAtOutputCoords","getUnpackedSamplerAtOutputCoords","coordsSnippet","inShape","texName","texFuncSnippet","inRank","outRank","broadcastDims","BroadcastUtil","getBroadcastDims","getCoordsDataType","rankDiff","fields","getGlChannels","d","unpackedCoordsSnippet","isInputScalar","ShapeUtil","isOutputScalar","rows","cols","indexOf","swapLastDimsSnippet","inTexShape","getPackedSamplerScalar","getPackedSampler1D","getPackedSampler2D","getPackedSampler3D","getPackedSamplerND","getUnpackedSamplerScalar","getUnpackedSampler1D","getUnpackedSampler2D","getUnpackedSampler3D","getUnpackedSampler4D","getUnpackedSampler5D","getUnpackedSampler6D","texNumR","texNumC","valuesPerRow","squeezedShape","slice","newInputShape","squeezeInputShape","newInputLayout","JSON","parse","stringify","samplerRoutine","routineBody","getSqueezedParams","dependencies","params","index","tNumR","tNumC","squeezeShape","newShape","keptDims","stride0","stride1","routine","revDims","reverse","stride2","stride3","stride4","xScale","yScale","stridesBlock","body","layout","getValueFromSingle","varName","transpose","getPackedValueFrom","GlslLib","CoordsGlslLib","FunctionType","GlslContext","addDependency","node","GlslLibRoutineNode","returnOrderedNodes","nodes","cycleCheck","Set","alreadyTraversed","createOrderedNodes","graphNodes","dfsTraverse","has","add","TopologicalSortGlslRoutines","encodeFloat32","decodeFloat32","encode","decode","encodeUint8","endianness","EncodingGlslLib","isLittleEndian","decodeUint8","ArrayBuffer","a","Uint32Array","c","Uint8Array","setFragColor","getColorAsFloat","FragColorGlslLib","INLINE_FUNC_DEF_REGEX","script","match","inlineDefs","exec","split","tokens","trim","filter","v","regexString","replace","regex","RegExp","variable","declLine","newBody","paramRedecLine","replacement","libs","glslLibRoutineDependencyGraph","keys","glslRegistry","lib","libName","routinesInLib","currentNode","preprocess","shaderSource","hasMain","getDefaultFragShaderMain","replaceInlines","getFragShaderPreamble","getUniforms","variables","getImports","routinesIncluded","selectGlslLibRoutinesToBeIncluded","routines","classAndRoutine","samplers","uniformLines","sampler","arrayLength","GlslPreprocessor","VecGlslLib","ShapeUtilsGlslLib","bcastIndex","bcastMatmulIndex","offsetToIndices","indicesToOffset","incrementIndices","outputRank","dimOffset","block","indexToOffsetSingle","offsetToIndicesSingle","shapeInit","GLSL_ES_2_0","varyingVertex","varyingFrag","outputDeclaration","GLSL_ES_3_0","outputShapeLength","binaryVecFunctions","copyVec","setVecItem","getVecItem","nameOp","sub","mul","div","fname","assignmentBlock","packedTextureDataCache","unpackedTextureDataCache","calculateTextureWidthAndHeight","textureType","layoutStrategy","executeProgram","program","inputs","inputTypes","inputTextureDatas","getOrCreateTextureData","texture","cacheHint","getProgramInfoUniqueKey","artifact","programManager","getArtifact","createTextureLayoutFromTextureType","dims","outputTextureData","createTextureData","build","setArtifact","runProgram","run","tensor","TextureType","packed","td","getTextureData","dataId","unpack","packedLastDimension","adjustedKernelShape","adjustedLayout","buffer","numberData","numFeatureMaps","oldRowSize","newRowSize","Float32Array","oldOffset","newOffset","subarray","unpackedTextureLayout","createTextureLayoutFromShape","reverseWH","unpackedTextureData","createTextureDataFromLayoutBindTensor","dataType","data","usage","textureManager","createTextureFromLayout","createTextureDataFromTexture","reshapeUnpacked","input","reshapedDims","inputTD","unpacked","newTextureLayout","channels","computeStrides","reshapePacked","isReshapeCheap","squeezedInputShape","processDims3D","squeezedOutputShape","squeezedInputTensor","squeezedOutputTensor","createPackedReshape3DProgramInfoLoader","cast","tensorId","textureData","_id","readTexture","readTextureAsync","setTextureData","isInitializer","isTextureLayoutCached","clearActiveTextures","releaseTexture","isFloat32DownloadSupported","readUint8TextureAsFloat","encodeAsUint8","createPackProgramInfoLoader","createUnpackProgramInfoLoader","WebGLInferenceHandler","WEBGL_OP_RESOLVE_RULES","unaryOps","abs","acos","binaryOps","and","asin","atan","averagePool","parseAveragePoolAttributes","batchNormalization","parseBatchNormalizationAttributes","parseCastAttributes","clip","parseClipAttributes","clipV11","concat","parseConcatAttributes","conv","parseConvAttributes","convTranspose","parseConvTransposeAttributes","cos","identity","depthToSpace","parseDepthToSpaceAttributes","equal","elu","parseEluAttributes","exp","flatten","parseFlattenAttributes","floor","gather","parseGatherAttributes","gemm","parseGemmAttributesV7","parseGemmAttributesV11","globalAveragePool","parseGlobalAveragePoolAttributes","globalMaxPool","greater","imageScaler","parseImageScalerAttributes","instanceNormalization","parseInstanceNormalizationAttributes","leakyRelu","parseLeakyReluAttributes","less","lrn","parseLrnAttributes","log","matMul","parseMatMulAttributes","maxPool","parseMaxPoolAttributes","neg","not","or","padV2","parsePadAttributesV2","padV11","parsePadAttributesV11","pow","pRelu","reduceLogSum","parseReduceAttributes","reduceMax","reduceMean","reduceMin","reduceProd","reduceSum","reduceLogSumSquare","relu","reshape","resize","parseResizeAttributesV10","parseResizeAttributesV11","sigmoid","sin","sliceV10","parseSliceAttributes","softmax","parseSoftmaxAttributes","softmaxV13","parseSoftmaxAttributesV13","parseSplitAttributes","sqrt","squeeze","parseSqueezeAttributes","squeezeV13","sum","tan","tanh","tile","parseTransposeAttributes","upsample","parseUpsampleAttributesV7","parseUpsampleAttributesV9","unsqueeze","parseUnsqueezeAttributes","unsqueezeV13","xor","batchNormalizationProgramMetadata","inferenceHandler","validateInputs","cacheKey","createBatchNormalizationProgramInfo","epsilon","momentum","spatial","scaleWidth","scaleHeight","X","scale","B","mean","var_","glslAdd","ValueBased","glslDiv","glslMul","glslSub","glslEqual","glslGreater","glslLess","glslAnd","glslOr","glslXor","glslPow","glslBuiltinBinary","glslPRelu","createBinaryProgramInfoLoader","glslFunc","outputTensorType","createBinaryProgramInfo","isBroadcast","areEqual","outputShape","usePackedTexture","calculatedShape","calcShape","aRank","bRank","aBcast","bBcast","to","ProtoUtil","tensorDataTypeFromProto","createPackedConcatProgramInfoLoader","inputCount","metadata","from","fill","axis","inputShape","dataNShape","axisIndex","getChannels","dtype","unpackChannel","unpackFromChannel","shapes","offsets","channel","lastChannels","allChannels","getValueSnippet","getShiftedChannelsSnippet","lastIndex","shift","x","createPackedConcatProgramInfo","channelIdx","idx","createUnpackedConcatProgramInfoLoader","sizeInConcatAxis","previousSum","getTextureIndexWhereDataResidesMethod","getTextureIndexWhereDataResidesLinearSearch","getTextureIndexWhereDataResidesBinarySearch","fetchDataFromCorrectTextureMethod","getFetchDataFromCorrectTextureMethod","getSizeInConcatAxisValueFromIndexMethod","getGetSizeInConcatAxisValueFromIndexMethod","createUnpackedConcatProgramInfo","searchAxis","numberOfTensors","tensorRank","codeLines","inputType","inputDimensionality","createUnpackedGroupedConvProgramInfoLoader","hasBias","processBias","xShape","wShape","outputChannelsPerGroup","group","autoPad","dilations","kernelShape","pads","calculateOutputShape","getActivationSnippet","activationFunction","applyActivation","createUnpackedGroupedConvProgramInfo","conv2DPackedPointwise","xshape","kshape","reshapedX","reshapedK","matmulInputs","matmulOutput","createPackedMatmulProgramInfoLoader","conv2DPacked","im2colOutput","createPackedIm2ColProgramInfoLoader","kernelReshaped","computeTotalPad","inDim","adj","kernel","dilation","outSize","distributePadding","totalPad","head","tail","smallPad","convTranspose2d","adjustedAttributes","getAdjustedConvTransposeAttributes","convTranspose2DUnpacked","valueInit","inputChannelsPerGroup","createUnpackedConvTransposeProgramInfo","createUnpackedConvTransposeProgramInfoLoader","outputPadding","spatialRank","updateShape","calculateOutputShapeAndPads","newAttributes","activationAttributes","parseInternalActivationAttributes","featureMaps","adjustPads","batchSize","inputSpatialShape","outChannels","dilatedKernelShape","outputSpatialShape","conv2d","getAdjustedConvAttributes","packMode","isPointwise","conv2DUnpackedPointwise","conv2DUnpacked","createMatmulProgramInfoLoader","xIm2Col","createIm2ColProgramInfoLoader","dotProductInputs","createDotProductProgramInfoLoader","PoolConvUtil","adjustPadsBasedOnAutoPad","blocksize","blocksizeSqr","transposePerm","mode","firstReshapeShape","firstReshapedTensor","transposeAttributes","perm","transposeOutput","secondReshapeShape","TypeError","activationCacheKey","createDotProductProgramMetadata","im2colShape","calculateIm2ColDims","kWidth","kHeight","im2colStrides","im2colWidth","im2colHeight","initValue","sharedDim","createDotProductProgramInfo","outputDims","flattenShape","r","func","activation","glslRelu","glslSigmoid","glslClip","clipMin","clipMax","activationName","MIN_CLIP","MAX_CLIP","createGatherProgramInfoLoader","gatherProgramMetadata","indexDataShape","normalizeAxis","indexCopyOps","orank","irank","iDrank","createGatherProgramInfo","NUMBER_TYPES","createGemmProgramInfoLoader","parseGemmAttributes","isOptionalC","transA","transB","alpha","beta","createGemmProgramInfo","aShape","bShape","GemmUtil","getShapeOfGemmResult","line","declareC","broadcastC","calculateC","w","wshape","kernelSize","unrolled","row","col","createPackedIm2ColProgramInfo","im2colDims","createIm2ColProgramInfo","createImageScalerProgramInfoLoader","bias","imageScalerProgramMetadata","getBiasMethod","createGetBiasMethod","createImageScalerProgramInfo","numChannels","meanAndVariance","createMeanAndVarianceProgramInfoLoader","createComputeOutputProgramInfoLoader","meanAndVarianceProgramMetadata","xDims","channelSize","createMeanAndVarianceProgramInfo","computeOutputProgramMetadata","meanAndVarianceShape","textureWidth","textureHeight","meanAndVarianceWidth","meanAndVarianceHeight","createComputeOutputProgramInfo","createLrnProgramInfoLoader","lrnProgramMetadata","C","createLrnProgramInfo","sharedDimIndex","coordsDataType","allGlChannels","getBiasForMatmulSnippet","getBiasForMatmul","getBcastedSamplerForMatmulSnippet","unpackedACoordsSnippet","unpackedBCoordsSnippet","inAShape","inBShape","inARank","inBRank","rankADiff","rankBDiff","broadcastADims","broadcastBDims","coordsASnippet","coordsBSnippet","swapDimSnippet","getBcastSamplerForMatmul","getSamplerAInLoopSnippet","res","getA","getSamplerBInLoopSnippet","getB","getOutputCoordsSnippet","createPackedMatmulProgramInfo","createMatmulProgramMetadata","arank","brank","createMatmulProgramInfo","packProgramMetadata","unpackedReversed","inputRank","setup","outOfBoundsCondition","cond","getOutOfBoundsCondition","D","getOutput","createPackProgramInfo","getVecChannels","padProgramMetadata","validateInputsV2","createPadProgramInfo","validateInputsV11","attrubutes","generatePadAttributesFromInputs","integerData","floatData","padShape","padFunction","getPadFunction","getPadConstant","getPadReflect","getPadEdge","createAveragePoolProgramInfo","ceilMode","countIncludePad","isGlobalOperator","getAdjustedPoolAttributesAndOutputShape","op2","poolingCode","generatePoolingCode","createMaxPoolProgramInfo","storageOrder","hasDilations","hasOwnProperty","call","adjustPoolAttributes","computePoolOutputShape","globalMaxPoolAttributes","globalMaxPoolMetadata","inputDims","op1","start","codeW","kw","sw","pwStart","pwEnd","dimW","codeH","codeHEnd","kh","sh","phStart","phEnd","dimH","padCode","kernelStrides","stridesRank","padsRank","offsetToIndicesFunction","copyInputDims","copyArray","copyPads","copyKernelStrides","copyStrides","reduce","cur","array","arrayName","reduceOp","reduceProgramMetadata","createReduceProgramInfo","axes","keepDims","iRank","idxCopy","normalizeAxes","ops","reduceOps","k","oRank","idxZero","input3D","outputShape3D","createPackedReshape3DProgramMetadata","inputShape3D","mainLoop","outputCoords","getFlattenedIndexFrom3D","createPackedReshape3DProgramInfo","batch","calculateReshapedDims","resizeProgramMetadata","createPackedResizeProgramInfo","parseUpsampleAttributes","prepareInputs","scales","every","coordinateTransformMode","dim","outputHeight","outputWidth","inputHeight","inputWidth","scalesHeight","scalesWidth","getSourceFracIndex","outputSizes","scalesTensor","scalesInputIdx","sizesInputIdx","parseScalesData","isResize","sizesTensor","parseScalesDataFromOutputSize","yDims","scalesValidation","end","Int32Array","sliceProgramMetadata","createSliceProgramInfo","starts","ends","val","normalizedAxes","sliceOps","validateInputsV10","generateSliceAttributesFromInputs","some","softmaxComputeMaxProgramMetadata","softmaxComputeScaleProgramMetadata","softmaxProgramMetadata","logicalRowCount","sizeToDimension","featureCount","sizeFromDimension","computeSoftmax","transposeAttribute","isTransposeRequired","transposedInputShape","transposedInputs","_","p","computeMaxProgramInfo","createComputeMaxProgramInfo","max","computeScaleProgramInfo","createComputScaleProgramInfo","softMaxProgramInfo","createSoftMaxProgramInfo","maxElementPerLogicalRow","normalizationPerLogicalRow","splitProgramMetadata","count","getProgramCount","createSplitProgramInfo","numOutputs","outputs","SplitUtil","splitShape","offset","validateInputsV13","sumProgramMetadata","createSumProgramInfo","sumLine","j","tileProgramMetadata","createTileProgramInfo","tileOps","transposeProgramMetadata","createTransposeProgramInfo","getAdjustedPerm","unpackedOutputShape","getOutputShape","getPermFunctionBody","sortBasedOnPerm","reverseFunc","downloadUint8AsFloat","glslAbs","glslBuiltinUnary","glslAcos","glslAsin","glslAtan","glslCeil","glslCos","glslElu","glslExp","glslFloor","glslIdentity","glslLeakyRelu","glslLog","glslNeg","glslNot","glslSin","glslSqrt","glslTan","glslTanh","createElementwiseProgramInfoLoader","createElementwiseProgramInfo","generateClipAttributesFromInputs","unpackProgramMetadata","createUnpackProgramInfo","innerDims","sourceCoords","getSourceCoords","unsqueezeShape","upsampleProgramMetadata","createUpsampleProgramInfo","opset","extrapolationValue","needRoiInput","useExtrapolation","nearestMode","cubicCoefficientA","excludeOutside","useNearest2xOptimization","roiInputIdx","outputPitches","inputPitches","precalculatedPitches","getInputFloatFunction","profiler","textureLayoutStrategy","repo","attributesBound","buildArtifact","event","useProgram","bindOutput","bindAttributes","attribLocations","bindUniforms","uniformLocations","err","error","draw","vertexShader","deleteShader","deleteProgram","preprocessor","fragScript","compile","getUniformLocations","getAttribLocations","fragShaderScript","vertexShaderScript","getVertexShaderSource","compileShader","VERTEX_SHADER","debug","fragShader","FRAGMENT_SHADER","createProgram","attachFramebuffer","positionHandle","position","textureCoordHandle","textureCoord","setVertexAttributes","textures","texturePosition","find","bindTexture","uniform1fv","uniform1f","uniform1iv","uniform1i","uniformHandle","bindTextureToUniform","getAttribLocation","location","getUniformLocation","reference","ProgramManager","PreferLogicalStrategy","maxTextureSize","TextureManager","reuseTextures","pack2unpackMap","unpack2packMap","createInferenceHandler","onGraphInitialized","graph","initializers","getValues","addInitializer","opsets","op","resolveOperator","impl","opImpl","opInit","internalFormat","R32F","format","RED","RGBA32F","RGBA","src","textureSize","constructor","allocate","dataSize","RedFloat32DataEncoder","dest","RGBAFloatDataEncoder","ALPHA","UNSIGNED_BYTE","_textureSize","byteOffset","byteLength","Uint8DataEncoder","computeTextureWH","prefs","breakAxis","wsize","hsize","totalSize","AlwaysKeepOriginalSizeStrategy","wh","computeTexture","logShape","squeezeResult","sizeFromShape","sizeToSquarishShape","isEmptyArray","isArray","parseAxisParam","assert","ax","isInt","dimsToSkip","inferredDims","reversedWH","config","pendingRead","inUseTextures","idleTextures","textureLookup","textureDataType","toEncoderType","encoder","getEncoder","pop","updateTexture","toTextureData","allocateTexture","toTensorData","createAndWaitForFence","tensorData","subscribers","deleteTexture","splice","Int16Array","Int8Array","Uint16Array","Float64Array","_dataType","len","checkFn","delayFn","maxCounter","_counter","reject","tryCount","tryFn","nextBackoff","setTimeout","charAt","toUpperCase","createNewWebGLContext","canvas","ca","depth","antialias","stencil","preserveDrawingBuffer","premultipliedAlpha","failIfMajorPerformanceCaveat","getContext","WebGLContext","webgl2","OffscreenCanvas","createOffscreenCanvas","document","createElement","createCanvas","isContextLost","disable","DEPTH_TEST","STENCIL_TEST","BLEND","DITHER","POLYGON_OFFSET_FILL","SAMPLE_COVERAGE","enable","SCISSOR_TEST","CULL_FACE","cullFace","BACK","linearSearchLastTrue","frameBufferBound","itemsToPoll","getExtensions","vertexbuffer","createVertexbuffer","framebuffer","createFramebuffer","queryVitalParameters","createTexture","TEXTURE_2D","texParameteri","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","texImage2D","checkError","texSubImage2D","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","viewport","scissor","readPixels","isFramebufferReady","getActiveTexture","n","getParameter","ACTIVE_TEXTURE","TEXTURE0","getTextureBinding","TEXTURE_BINDING_2D","getFramebufferBinding","FRAMEBUFFER_BINDING","vertexAttribPointer","enableVertexAttribArray","attachShader","linkProgram","shaderType","shader","createShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","activeTexture","drawArrays","TRIANGLE_STRIP","getError","label","toString","DataEncoders","isRenderFloat32Supported","textureHalfFloatExtension","HALF_FLOAT_OES","unit","maxTextureImageUnits","disposed","deleteFramebuffer","bindBuffer","ARRAY_BUFFER","deleteBuffer","ELEMENT_ARRAY_BUFFER","finish","createDefaultGeometry","createBuffer","geometry","bufferData","STATIC_DRAW","fb","isFloatTextureAttachableToFrameBuffer","checkFloatTextureAttachableToFrameBuffer","checkRenderFloat32","checkFloat32Download","isBlendSupported","checkFloat32Blend","MAX_TEXTURE_SIZE","MAX_TEXTURE_IMAGE_UNITS","colorBufferFloatExtension","getExtension","disjointTimerQueryWebgl2Extension","textureFloatExtension","frameBuffer","isComplete","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","fragmentShader","POINTS","NO_ERROR","beginTimer","gl2","ext","query","createQuery","beginQuery","TIME_ELAPSED_EXT","endTimer","endQuery","isTimerResultAvailable","available","disjoint","getQueryParameter","QUERY_RESULT_AVAILABLE","GPU_DISJOINT_EXT","getTimerResult","timeElapsed","QUERY_RESULT","deleteQuery","waitForQueryAndGetTime","repeatedTry","fenceContext","createFence","pollFence","fenceSync","SYNC_GPU_COMMANDS_COMPLETE","flush","isFencePassed","status","clientWaitSync","ALREADY_SIGNALED","CONDITION_SATISFIED","addItemToPoll","pollItems","isDoneFn","resolveFn","getNodes","_ops","KernelOp","reset","_starter","resolved","_values","getInputIndices","execute","sessionHandler","modelInputs","graphInputs","sequence","graphValues","rear","thisOpIndex","thisOp","inputList","inputTensors","outputList","downstreamNodes","currentDownstreamNodeIndex","currentDownstreamNode","getOutputIndices","outputIndex","outputTensor","getData","ExecutionPlan","Graph","graphProto","initializer","GraphImpl","valueInfo","_from","_to","tensorValueTypeFromProto","tensorType","_nodeProto","NodeProto","opType","Node","tensorAttributesFromORTFormat","executeNode","graphInitializer","buildGraph","transformGraph","checkIsAcyclic","_allInputIndices","getInputNames","_allInputNames","_allOutputIndices","getOutputNames","_allOutputNames","_allData","_nodes","GraphProto","buildGraphFromOnnxFormat","buildGraphFromOrtFormat","dataIndices","nodesIndices","inputValueNames","currentIndex","Value","tensorDimsFromProto","nodeProto","pick","dataIndex","inputsLength","inputName","nodeArgsLength","nodeArgs","valueType","TypeInfoValue","tensor_type","TensorTypeAndShape","elemType","dimLength","dimValue","initializersLength","tensorDimsFromORTFormat","outputsLength","outputName","nodesLength","attributesLength","starters","nodesStack","nodesState","nodeIndex","outgoingEdgeIndex","downstreamNodeIndex","removeAllIdentityNodes","removeAllDropoutNodes","fuseConvActivationNodes","finalizeGraph","newIndices","nodePossition","ind","currentData","deleteNode","inputValueIndex","outputValueIndex","nodesConsumingOutput","delIndex","replaceIndex","isActivation","next","child","_severity","_content","_category","severity","content","category","console","color","SEVERITY_VALUE","info","fatal","LOGGER_PROVIDER_MAP","NoOpLoggerProvider","ConsoleLoggerProvider","LOGGER_DEFAULT_CONFIG","provider","minimalSeverity","logDateTime","logSourceLocation","LOGGER_CONFIG_MAP","arg0","arg1","arg2","arg3","bind","logInternal","stack","Date","toISOString","previousConfig","logLevel","startTime","endCallback","timer","ctx","checkTimer","endTime","maxNumberEvents","flushBatchSize","flushIntervalInMilliseconds","_started","_flushPointer","_maxNumberEvents","_flushBatchSize","_flushIntervalInMilliseconds","create","_timingEvents","_flushTime","now","stop","logOneEvent","begin","isPromise","then","reason","Event","endSync","EventRecord","toFixed","currentTime","previousPointer","Profiler","performance","load","buf","isOrtFormat","loadFromOnnxFormat","loadFromOrtFormat","modelProto","ModelProto","irVersion","_opsets","opsetImport","domain","_graph","flatbuffers","ByteBuffer","ortModel","InferenceSession","getRootAsInferenceSession","model","opsetImportLength","opsetId","Model","INT_TYPES","FLOAT_TYPES","matchSelector","selector","endsWith","rangeStart","parseInt","substring","isNaN","pair","rangeEnd","rules","rule","versionSelector","DimensionValueType","TensorDataType","NodeType","bb","bb_pos","__init","getRootAsShape","Shape","readInt32","getSizePrefixedRootAsShape","setPosition","SIZE_PREFIX_LENGTH","__offset","Dimension","__indirect","__vector","__vector_len","startShape","builder","startObject","addDim","addFieldOffset","createDimVector","startVector","addOffset","endVector","startDimVector","numElems","endShape","endObject","createShape","getRootAsDimension","getSizePrefixedRootAsDimension","DimensionValue","denotation","optionalEncoding","__string","startDimension","addValue","valueOffset","addDenotation","denotationOffset","endDimension","createDimension","getRootAsDimensionValue","getSizePrefixedRootAsDimensionValue","dimType","readInt8","UNKNOWN","readInt64","createLong","dimParam","startDimensionValue","addDimType","addFieldInt8","addDimValue","addFieldInt64","addDimParam","dimParamOffset","endDimensionValue","createDimensionValue","getRootAsTensorTypeAndShape","getSizePrefixedRootAsTensorTypeAndShape","UNDEFINED","startTensorTypeAndShape","addElemType","addFieldInt32","addShape","shapeOffset","endTensorTypeAndShape","createTensorTypeAndShape","getRootAsMapType","MapType","getSizePrefixedRootAsMapType","keyType","TypeInfo","startMapType","addKeyType","addValueType","valueTypeOffset","endMapType","createMapType","getRootAsSequenceType","SequenceType","getSizePrefixedRootAsSequenceType","startSequenceType","elemTypeOffset","endSequenceType","createSequenceType","readUint32","srcArgIndex","dstArgIndex","createEdgeEnd","node_index","src_arg_index","dst_arg_index","prep","writeInt32","EdgeEnd","getRootAsNodeEdge","NodeEdge","getSizePrefixedRootAsNodeEdge","inputEdges","inputEdgesLength","outputEdges","outputEdgesLength","startNodeEdge","addNodeIndex","addInputEdges","inputEdgesOffset","startInputEdgesVector","addOutputEdges","outputEdgesOffset","startOutputEdgesVector","endNodeEdge","createNodeEdge","getRootAsNode","getSizePrefixedRootAsNode","docString","sinceVersion","Primitive","executionProviderType","inputArgCounts","inputArgCountsLength","inputArgCountsArray","bytes","implicitInputs","implicitInputsLength","startNode","addName","nameOffset","addDocString","docStringOffset","addDomain","domainOffset","addSinceVersion","addIndex","addOpType","opTypeOffset","addType","addExecutionProviderType","executionProviderTypeOffset","addInputs","inputsOffset","createInputsVector","startInputsVector","addOutputs","outputsOffset","createOutputsVector","startOutputsVector","addAttributes","attributesOffset","createAttributesVector","startAttributesVector","addInputArgCounts","inputArgCountsOffset","createInputArgCountsVector","addInt32","startInputArgCountsVector","addImplicitInputs","implicitInputsOffset","createImplicitInputsVector","startImplicitInputsVector","endNode","createNode","getRootAsValueInfo","ValueInfo","getSizePrefixedRootAsValueInfo","startValueInfo","typeOffset","endValueInfo","createValueInfo","getRootAsTypeInfo","getSizePrefixedRootAsTypeInfo","readUint8","NONE","__union","startTypeInfo","endTypeInfo","createTypeInfo","getRootAsOperatorSetId","OperatorSetId","getSizePrefixedRootAsOperatorSetId","startOperatorSetId","addVersion","endOperatorSetId","createOperatorSetId","getRootAsTensor","getSizePrefixedRootAsTensor","dimsLength","rawData","rawDataLength","rawDataArray","stringData","stringDataLength","startTensor","addDims","dimsOffset","createDimsVector","addInt64","startDimsVector","addDataType","addRawData","rawDataOffset","createRawDataVector","addInt8","startRawDataVector","addStringData","stringDataOffset","createStringDataVector","startStringDataVector","endTensor","createTensor","getRootAsSparseTensor","SparseTensor","getSizePrefixedRootAsSparseTensor","values","indices","startSparseTensor","addValues","valuesOffset","addIndices","indicesOffset","endSparseTensor","createSparseTensor","getRootAsAttribute","getSizePrefixedRootAsAttribute","readFloat32","floatsLength","graphsLength","startAttribute","addF","addFieldFloat32","addI","addS","sOffset","addT","tOffset","addG","gOffset","addFloats","floatsOffset","createFloatsVector","addFloat32","startFloatsVector","addInts","intsOffset","createIntsVector","startIntsVector","addStrings","stringsOffset","createStringsVector","startStringsVector","addTensors","tensorsOffset","createTensorsVector","startTensorsVector","addGraphs","graphsOffset","createGraphsVector","startGraphsVector","endAttribute","createAttribute","getRootAsGraph","getSizePrefixedRootAsGraph","maxNodeIndex","nodeEdges","nodeEdgesLength","sparseInitializers","sparseInitializersLength","startGraph","addInitializers","initializersOffset","createInitializersVector","startInitializersVector","addNodeArgs","nodeArgsOffset","createNodeArgsVector","startNodeArgsVector","addNodes","nodesOffset","createNodesVector","startNodesVector","addMaxNodeIndex","addNodeEdges","nodeEdgesOffset","createNodeEdgesVector","startNodeEdgesVector","addSparseInitializers","sparseInitializersOffset","createSparseInitializersVector","startSparseInitializersVector","endGraph","createGraph","getRootAsModel","getSizePrefixedRootAsModel","producerName","producerVersion","modelVersion","graphDocString","startModel","addIrVersion","addOpsetImport","opsetImportOffset","createOpsetImportVector","startOpsetImportVector","addProducerName","producerNameOffset","addProducerVersion","producerVersionOffset","addModelVersion","addGraph","graphOffset","addGraphDocString","graphDocStringOffset","endModel","createModel","getRootAsKernelCreateInfos","KernelCreateInfos","getSizePrefixedRootAsKernelCreateInfos","nodeIndices","nodeIndicesLength","nodeIndicesArray","kernelDefHashes","readUint64","kernelDefHashesLength","startKernelCreateInfos","addNodeIndices","nodeIndicesOffset","createNodeIndicesVector","startNodeIndicesVector","addKernelDefHashes","kernelDefHashesOffset","createKernelDefHashesVector","startKernelDefHashesVector","endKernelCreateInfos","createKernelCreateInfos","getRootAsSubGraphSessionState","SubGraphSessionState","getSizePrefixedRootAsSubGraphSessionState","graphId","sessionState","SessionState","startSubGraphSessionState","addGraphId","graphIdOffset","addSessionState","sessionStateOffset","endSubGraphSessionState","requiredField","createSubGraphSessionState","getRootAsSessionState","getSizePrefixedRootAsSessionState","kernels","subGraphSessionStates","subGraphSessionStatesLength","startSessionState","addKernels","kernelsOffset","addSubGraphSessionStates","subGraphSessionStatesOffset","createSubGraphSessionStatesVector","startSubGraphSessionStatesVector","endSessionState","createSessionState","getSizePrefixedRootAsInferenceSession","bufferHasIdentifier","__has_identifier","ortVersion","startInferenceSession","addOrtVersion","ortVersionOffset","addModel","modelOffset","endInferenceSession","finishInferenceSessionBuffer","finishSizePrefixedInferenceSessionBuffer","createInferenceSession","outputNames","feeds","_fetches","_options","inputMap","feed","outputMap","startProfiling","endProfiling","_initialized","graphInputTypes","graphInputDims","_model","arg","process","promisify","readFile","fetch","arrayBuffer","isView","modelProtoBlob","initializeOps","_executionPlan","normalizeAndValidateInputs","outputTensors","createOutput","modelInputNames","sortedInputs","sortedInputsIndex","validateInputTensorDims","modelInputIndices","modelValues","graphInput","validateInputTensorTypes","givenInputs","expectedType","actualType","noneDimSupported","expectedDims","actualDims","compareTensorDims","modelOutputNames","dataProvider","asyncDataProvider","Guid","validateDimsAndCalcSize","empty","RangeError","dataviewConstructor","sizeof","dataBuffer","createView","_strides","tensorProto","str","dataDest","dataSource","DataView","elementSize","sizeofProto","readProto","TensorProto","DataType","INT32","INT16","UINT16","INT8","UINT8","BOOL","int32Data","INT64","int64Data","DOUBLE","doubleData","UINT32","UINT64","uint64Data","element","fromData","ortTensor","BigInt64Array","greaterThanOrEqual","lessThan","toNumber","view","getUint8","getInt8","getUint16","getInt16","getFloat32","getInt32","getUint32","fromBits","getFloat64","expectedDimensions","expr","msg","n1","n2","preprocessInputShapes","dimsA","dimsB","postprocessOutputShape","calcMatMulShape","MatMulUtil","adims","bdims","isMatMul","crank","cdims","cShapeMatMul","aLen","bLen","broadcastedIndices","originalShape","originalIndices","fillIndex","calc","inplace","resultType","outputIndices","originalIndicesA","originalIndicesB","valA","valB","isAScalar","isBScalar","rest","isValidBroadcast","finalShape","finalRank","unshift","target","targetIndex","sourceIndex","blockSize","leftShape","transLeft","rightShape","transRight","biasShape","M","K","N","kDim","typeProto","tensorDataTypeStringToEnum","unsigned","Long","fromValue","low","high","getSizeFromDimensionRange","incrementIndex","axisToIncrementOn","originalDims","shapeHints","nDims","unknownDimension","newTensorSize","oldTensorSize","pad","shape1","shape2","total","y","right","inSqueezeList","inputDimsIterator","sqr","axpy","powx","MathUtil","determineSplit","numElementsAlongAxis","calcReduce","keepdims","ReduceUtil","calcReduceShape","inputStrides","indicesY","calcReduceByAxis","curAxisInd","pos","step","adjustPadAndReturnShape","computeShapeHelper","computeConvOutputShape","filterDims","inSize","padHeadIndex","padTailIndex","dkernel","padNeeded","TextDecoder","currentKernelId","commandEncoder","computePassEncoder","pendingDispatchNumber","supportTimestampQuery","sessionExternalDataMapping","kernelCustomData","gpu","requestAdapter","adapter","requiredFeatures","deviceDescriptor","requiredLimits","maxComputeWorkgroupStorageSize","limits","maxComputeWorkgroupsPerDimension","maxStorageBufferBindingSize","maxBufferSize","maxComputeInvocationsPerWorkgroup","maxComputeWorkgroupSizeX","maxComputeWorkgroupSizeY","maxComputeWorkgroupSizeZ","features","requestDevice","device","gpuDataManager","createGpuDataManager","kernelPersistentData","configureLogger","onuncapturederror","ev","GPUValidationError","message","profilingQuerySet","createQuerySet","webgpu","getCommandEncoder","createCommandEncoder","getComputePassEncoder","beginComputePass","endComputePass","queue","submit","refreshPendingBuffers","createKernelOutput","createIntermediateOutput","inputDatas","gpuData","inputInfos","validatedOutputIndices","outputTensorViews","outputDatas","isTemporary","isPersistent","tensorView","temporaryData","persistentData","normalizedDispatchGroup","normalizeDispatchGroupSize","dispatchGroup","LOG_DEBUG","upload","gpuDataId","memcpy","dst","download","getTargetBuffer","alloc","id","free","ptr","release","createKernel","kernelId","nodeName","WEBGPU_OP_RESOLVE_RULES","releaseKernel","computeKernel","errors","kernelEntry","useErrorScope","pushErrorScope","popErrorScope","registerBuffer","sessionId","sessionInputOutputMapping","previousBuffer","registerExternalBuffer","unregisterBuffers","bufferInfo","unregisterExternalBuffer","getBuffer","createDownloader","gpuBuffer","downloadGpuData","WebGpuBackend","getFloat32Array","elementCount","HEAP8","getBigInt64Array","getInt32Array","newDims","TensorViewImpl","contextDataOffset","customDataOffset","customDataSize","heapU32","HEAPU32","opKernelContext","outputCount","currentKernelCustomData","HEAPU8","compute","inputsOutputsMapping","mappedInputs","getTensorElementSize","bufferSize","stackSave","stackAlloc","_JsepOutput","stackRestore","jsepInit","isSourceGpu","dataOffset","profilingMode","UTF8ToString","_JsepGetNodeName","sessionHandle","ComputeContextImpl","configLogLevel","logLevelPrefix","$configLogLevel","$debug","LOG","level","messageLevel","logLevelStringToEnum","args","tensorTypeToTypedArrayConstructor","isChannelLast","calcNormalizedBufferSize","guid","createNewGpuDataId","originalSize","gpuReadBuffer","GPUBufferUsage","COPY_DST","MAP_READ","copyBufferToBuffer","mapAsync","GPUMapMode","READ","getMappedRange","targetBuffer","destroy","storageCache","freeBuffers","buffersForUploadingPending","buffersPending","externalBuffers","srcArrayBuffer","srcOffset","srcLength","gpuDataCache","gpuBufferForUploading","mappedAtCreation","MAP_WRITE","COPY_SRC","unmap","sourceId","destinationId","sourceGpuDataCache","destinationGpuDataCache","GpuDataType","default","STORAGE","buffers","cachedData","storage","GpuDataManagerImpl","acosh","argMax","parseArgMinMaxAttributes","argMin","asinh","atanh","pool","biasAdd","biasSplitGelu","clipV10","cosh","einsum","parseEinsumAttributes","parseAlphaAttributes","erf","expand","gatherElements","parseGatherElementsAttributes","gelu","parseGlobalMaxPoolAttributes","greaterOrEqual","instanceNorm","parseInstanceNormAttributes","layerNorm","parseLayerNormAttributes","lessOrEqual","parsePadAttributes","range","reciprocal","reduceL1","reduceL2","reduceLogSumExp","reduceSumSquare","parseResizeAttributes","sinh","skipLayerNorm","parseSkipLayerNormAttributes","thresholdedRelu","where","typeSnippet","component","activationFnSnippet","_hasPreluActivationWeights","_packed","_coordsLength","biasActivationSnippet","createConv2DMatMulProgramInfo","dimAOuter","dimBOuter","dimInner","sequentialAccessByThreads","isChannelsLast","inChannels","outWidth","outHeight","isVec4","dispatchX","dispatchY","workGroupSize","elementsPerThread","dispatch","innerElementSize","tileAOuter","tileBOuter","tileInner","fitAOuter","fitBOuter","fitInner","elementsSize","tensorTypeToWsglStorageType","declareInputs","declareFunctions","gpuDataType","z","getShaderSource","utilFunctions","addBias","hasPreluActivationWeights","innerElementSizeX","innerElementSizeW","coordASnippet","coordResSnippet","xHeight","xWidth","readXSnippet","getXSnippet","sampleX","sampleW","getWSnippet","resType","aType","bType","conv2dCommonSnippet","makeMatMulPackedVec4Source","makeMatMulPackedSource","createConv2DTransposeMatMulProgramInfo","readASnippet","sampleA","conv2dTransposeCommonSnippet","createConvTranspose2DProgramInfo","squeezeOutputShapeFunction","outputSize","shaderHelper","is1DimensionDispatch","rowDim","colDim","channelDim","workPerThread","components","inputVariable","dy","inputVariables","outputVariable","codeSnippet4","codeSnippet","indicesGet","setByOffset","declareVariables","mainStart","guardAgainstOutOfBoundsWorkgroupSizes","createConvTranspose2DOpProgramShaderSource","workgroupSize","batchDims","transposeA","splitK","splitedDimInner","tileAWidth","tileAHight","rowPerThreadB","writeDataToSubAVec4Snippet","calculateResultSnippet","writeDataToSubASnippet","rowPerThreadA","colPerThreadA","matmulSnippet","readDataFromSubASnippet","reshapedOutputShape","outerDimsA","outerDimsB","outerDims","getActicationSnippet","A","batchAVariable","batchBVariable","batchVariable","aVariable","bVariable","broadCastADims","broadCastBDims","batchRank","resStr","getAIndices","getByIndices","getBIndices","setByIndices","matMulReadWriteFnSource","biasComponents","createArgMinMaxProgramInfoLoader","updatedAttributes","selectLastIndex","createArgMinMaxAttributesFromInputs","getByOffset","includes","residual","createBiasAddProgramInfo","erfImpl","createBiasSplitGeluProgramInfo","createBinaryOpProgramInfoLoader","funcCall","additionalImplementation","outputDataType","vectorize","isAOneElement","isBOneElement","sharedDimension","dimA","dimsOutput","doBroadcast","typeA","typeB","typeOutput","expressionScalar","expressionVector","vecSize","scalar","vector","assignment","broadcastImpl","calcOffsetImpl","singleAssignment","typeCast","expressionA","expressionB","createBinaryOpProgramShader","createBinaryOpProgramInfo","roundStr","WORKGROUP_SIZE","getWgslMappedType","mappedType","tensorTypeToWsglValueType","createIndicesHelper","isInput","indicesType","storageType","normalizeDim","implementationUsed","broadcastedIndicesToOffset","o2iSnippet","offsetToIndicesImplementation","indicesToOffsetImplementation","broadcastedIndicesToOffsetImplementation","getByIndicesImplementation","getImplementation","setByIndicesImplementation","setImplementation","impls","varOffset","varIndices","implKey","indicesSet","indicesAndValue","normalizedIndices","indicesHelpers","sizeInCode","workgroupSizeX","workgroupSizeY","workgroupSizeZ","paramList","globalIdxDefinition","declareVariable","bindingIndex","access","createShaderHelper","ShaderHelperImpl","adjustedAxis","inputVars","indicesAxis","returnSnippet","assignOutputData","createConcatProgramInfo","createConcatProgramInfoLoader","createGroupedConvProgramInfoLoader","createGroupedConvProgramInfo","updateOutputShape","wIsConst","createConvTranspose2DProgramInfoLoader","weightTransposeAttribute","convTranspose1d","transposedWeight","wT","convTransposeInputs","createConv2DTransposeMatMulProgramInfoLoader","auto_pad","kernel_shape","w_is_const","conv1d","inputChannels","weightHeight","weightWidth","sameSize","xReshaped","wReshaped","matmulOutputShape","convInputs","createConv2DMatMulProgramInfoLoader","createConv2DMatMulProgramMetadata","createConv2DTransposeMatMulProgramMetadata","symbolPattern","termPattern","termPatternOnly","lhsPatternOnly","inputIndex","symbolToIndices","addSymbol","symbol","equation","hasEllipsis","symbolToInfo","lhs","rhs","inputTerm","einsumTerm","processTerm","entries","sym","rhsSymbols","ellipsisDims","inputIndices","term","ellipsis","nextDim","indexSymbols","EinsumTerm","ellipsisDimLength","String","fromCharCode","charCodeAt","einsumEquation","EinsumEquation","reduceOpsSetIndices","reduceOpsLoopHeaders","reduceOpsLoopFooters","reduceOpCompute","isReduceOpsWithoutLoop","inputVar","createEinsumProgramInfo","createEinsumProgramInfoLoader","expandProgramMetadata","getAdjustedShape","diff","shapeIndex","inputShapeIndex","activation_params","inputOutputDataType","inputSize","indicesShape","indicesDataType","indicesSize","axisDimLimit","createGatherElementsProgramInfo","indicesRank","calcStr","calcDataIndices","calculateAlpha","m","broadcastM","broadcastN","offsetC","inputStorageBuffersDeclarations","H","normCount","createInstanceNormNHWCProgramInfo","normSize","createInstanceNormProgramInfo","scaleSize","biasSize","meanInvStdDevDim","hasMeanDataOutput","hasInvStdOutput","createLayerNormProgramInfo","createPadProgramInfoLoader","bigInt64Pads","createPadAttributesFromInputs","padSnippet","constantValue","getPadWrap","getPadSnippet","generatePadCode","validPads","inputShapeAsChannelFirst","outputShapeAsChannelFirst","dimIdxW","dimIdxH","parsePoolCommonAttributes","ceil_mode","count_include_pad","globalPoolAttributes","storage_order","limit","delta","validateInputContent","validateInputsContent","numElements","wgslType","createRangeProgramInfo","noOp","axesInput","noopWithEmptyAxes","reduceOnAllAxes","inputOffsetAssignment","initinputOffsetLet","initinputOffsetVar","initinputOffset","l","createReduceProgramInfoLoader","createReduceAttributesFromInputs","_output","createResizeProgramInfoLoader","opsetVersion","sizes","roi","inputTensor","scalesInput","roiInput","roiTmp","roiLocal","updateRoI","round","initOutputShape","keepAspectRatioPolicy","scaleInPolicy","MAX_VALUE","MIN_VALUE","adjustedOutputShape","adjustOutputShape","noScale","coordinateTransferMode","checkInputIndices","getNearestPixelFromOriginal","calculateInputIndicesFromOutputIndices","calculateOriginalIndicesFromOutputIndices","batchIdx","heightIdx","widthIdx","bilinearInterpolation","cubicCoeffA","createCubicInterpolationFunction","direction","bicubicInterpolation","createResizeProgramInfo","customDataBuffer","getOpsetVersionFromCustomDataBuffer","roiInputIndex","scalesInputIndex","sizesInputIndex","validateScales","newScales","updateScales","skip","gamma","hiddenSize","sequenceLength","isTraining","hasBetaInput","hasBiasInput","hasMeanOutput","hasInvStdDevOutput","hasInputSkipBiasSumOutput","bindingNumber","createSkipLayerNormProgramInfo","createSkipLayerNormProgramInfoLoader","readInput","fixStartEndValues","steps","newValue","programInfoLoader","createSliceAttributesFromInputs","signs","sign","numSteps","newEnd","newStart","outputTensorInfo","calculateInputIndicesImpl","createSliceProgramInfoLoader","threadMaxDecl","_shaderHelper","createSoftmaxProgramInfo","splitSizes","createSplitAttributesFromInputs","outputsTensorInfo","outputShapes","writeBufferDataImpl","createSplitProgramInfoLoader","getRepeats","repeatsTensorView","repeats","permAttr","permFunctionBody","datasize","inputDataType","expression","createElementwiseProgramShader","varType","dimsC","expressionC","createWhereOpProgramShader","createWhereOpProgramInfo","inputsTensorView","profilingEnabled","writeTimestamp","setPipeline","computePipeline","binding","resource","bindGroup","createBindGroup","getBindGroupLayout","setBindGroup","dispatchWorkgroups","profilingQueryData","QUERY_RESOLVE","resolveQuerySet","kernelInfo","mappedData","BigUint64Array","startTimeU64","endTimeU64","profilingTimeBase","isSafeInteger","inputShapes","tensorDataTypeEnumToString","normalizedDispatchGroupSize","extensions","userCode","code","additionalImplementations","shaderModule","createShaderModule","createComputePipeline","entryPoint","limitPerDimension","dispatchAverage","cbrt","proxyWorker","initWasmCallbacks","initOrtCallbacks","isProxy","initializing","initialized","aborted","createSessionAllocateCallbacks","createSessionFinalizeCallbacks","createSessionCallbacks","releaseSessionCallbacks","runCallbacks","endProfilingCallbacks","ensureWorker","onProxyWorkerMessage","out","scriptSrc","currentScript","wasmPaths","substr","lastIndexOf","terminate","onmessage","in","postMessage","initializeWebAssembly","initializeRuntime","core","initRuntime","createSessionAllocate","createSessionFinalize","modeldata","createSession","preferredOutputLocation","releaseSession","serializableInputs","extractTransferableBuffers","setRunOptions","getInstance","runOptionsHandle","allocs","runOptions","logSeverityLevel","logVerbosityLevel","tagDataOffset","tag","allocWasmString","_OrtCreateRunOptions","checkLastError","extra","iterateExtraOptions","WeakSet","keyDataOffset","valueDataOffset","_OrtAddRunConfigEntry","_OrtReleaseRunOptions","_free","runtimeInitialized","runtimeInitializationPromise","encodeTensorMetadata","getName","decodeTensorMetadata","isGpuBufferSupportedType","fromGpuBuffer","path","response","modelData","fetches","inputArray","kvp","outputArray","results","resultMap","setSessionOptions","sessionOptionsHandle","sessionOptions","use_ort_model_bytes_directly","executionProviders","ep","enableMemPattern","appendDefaultOptions","graphOptimizationLevel","getGraphOptimzationLevel","executionMode","getExecutionMode","logIdDataOffset","logId","optimizedModelFilePathOffset","optimizedModelFilePath","_OrtCreateSessionOptions","enableCpuMemArena","enableProfiling","epName","webnnOptions","deviceType","_OrtAddSessionConfigEntry","powerPreference","webgpuOptions","preferredLayout","epNameDataOffset","_OrtAppendExecutionProvider","setExecutionProviders","freeDimensionOverrides","_OrtAddFreeDimensionOverride","_OrtReleaseSessionOptions","dateType","dataLocationStringToEnum","dataLocationEnumToString","loggingLevel","_OrtInit","activeSessions","modelDataOffset","_malloc","inputNamesUTF8Encoded","outputNamesUTF8Encoded","_OrtCreateSession","_OrtGetInputOutputCount","HEAP32","getSessionInputOutputCount","_OrtGetInputName","_OrtGetOutputName","nameString","_OrtFree","_OrtReleaseSession","ioBindingState","_OrtReleaseBinding","handle","jsepUnregisterBuffers","prepareInputOutputTensor","tensorHandles","dataByteLength","elementSizeInBytes","jsepRegisterBuffer","_OrtCreateTensor","runOptionsAllocs","inputTensorHandles","outputTensorHandles","inputOutputAllocs","beforeRunStack","inputValuesOffset","inputNamesOffset","outputValuesOffset","outputNamesOffset","inputValuesIndex","inputNamesIndex","outputValuesIndex","outputNamesIndex","_OrtBindInput","_OrtBindOutput","errorCode","_OrtRun","beforeGetTensorDataStack","tensorDataOffset","keepOutputTensor","_OrtGetTensorData","tensorDataIndex","preferredLocation","outputPreferredLocations","maxBytesToRead","jsepGetBuffer","jsepCreateDownloader","_OrtReleaseTensor","_OrtClearBoundOutputs","profileFileName","_OrtEndProfiling","ortWasmFactory","ortWasmFactoryThreaded","flags","timeout","useThreads","SharedArrayBuffer","MessageChannel","port1","WebAssembly","validate","isMultiThreadSupported","useSimd","isSimdSupported","wasmPrefixOverride","wasmFileName","getWasmFileName","wasmPathOverride","isTimeout","tasks","locateFile","fileName","scriptDirectory","Blob","URL","createObjectURL","mainScriptUrlOrBlob","__dirname","scriptSourceCode","what","race","PThread","terminateAllThreads","dataLength","lengthBytesUTF8","stringToUTF8","prefix","seen","paramsOffset","_OrtGetLastError","errorMessagePointer","errorMessage","Worker_fn","workerConstructor","workerOptions","url","globalScope","window","blob","BlobBuilder","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","append","getBlob","webkitURL","objectURL","worker","revokeObjectURL","encodeURIComponent","valuesById","$protobuf","$Reader","Reader","$Writer","Writer","$util","util","$root","roots","Version","properties","sparseTensors","typeProtos","prototype","refAttrName","newBuffer","sparseTensor","tp","emptyArray","writer","uint32","string","float","int64","fork","ldelim","TypeProto","int32","SparseTensorProto","encodeDelimited","reader","end2","skipType","decodeDelimited","verify","isString","fromObject","object","LongBits","base64","toObject","arrays","defaults","long","longs","enums","json","isFinite","toJSON","toJSONOptions","getTypeUrl","typeUrlPrefix","ValueInfoProto","TrainingInfoProto","initializationBinding","updateBinding","initialization","algorithm","StringStringEntryProto","metadataProps","trainingInfo","functions","OperatorSetIdProto","FunctionProto","TensorAnnotation","quantParameterTensorNames","tensorName","sparseInitializer","quantizationAnnotation","externalData","segment","dataLocation","Segment","double","uint64","DataLocation","TensorShapeProto","$oneOfFields","oneOfGetter","oneOfSetter","oneofs","sequenceType","mapType","optionalType","sparseTensorType","Sequence","Optional","OperatorStatus","attributeProto","_scriptDir","__filename","I","Y","P","U","u","ready","h","importScripts","ENVIRONMENT_IS_PTHREAD","O","dirname","startsWith","normalize","readFileSync","thisProgram","argv","exitCode","inspect","global","Worker","href","XMLHttpRequest","open","send","responseText","responseType","onload","onerror","T","writeSync","S","print","R","printErr","quit","wasmBinary","E","noExitRuntime","ee","F","W","HEAP16","HEAPU16","HEAPF32","HEAPF64","INITIAL_MEMORY","wasmMemory","Memory","initial","maximum","shared","L","G","q","Q","V","Z","$","J","monitorRunDependencies","clearInterval","onAbort","RuntimeError","te","re","ne","credentials","ok","catch","instantiate","ae","ie","oe","he","La","lb","ue","Oa","Na","cmd","start_routine","mb","eb","pthread_ptr","unref","sb","se","fe","ce","le","qe","nb","onExit","de","me","Ra","Za","Va","hb","gb","ib","receiveObjectTransfer","kb","threadInitTLS","Ya","setExitStatus","Xa","xb","mt","jb","targetThread","ct","wb","transferList","We","thread","loaded","alert","threadId","text","filename","lineno","on","handlers","urlOrBlob","wasmModule","cb","pe","establishStackSpace","vt","Ot","ge","be","Ua","ab","$a","_e","ve","ub","ye","Oe","invokeEntryPoint","gt","we","Me","Te","Se","Ae","Re","Ee","De","Ce","Fe","xe","ke","Ie","Ye","Pe","Ue","Atomics","tb","store","bt","__emscripten_thread_mailbox_await","checkMailbox","Be","He","Ne","Le","je","Ge","lt","ze","yt","arguments","wt","pt","Qe","Ve","Xe","Ze","USER","LOGNAME","PATH","PWD","HOME","LANG","languages","$e","Je","Ke","et","tt","rt","nt","at","it","ot","ut","getFullYear","getMonth","getDate","getDay","Pa","Qa","getTime","setDate","setMonth","setFullYear","qb","pb","Sa","Wa","Ta","Ma","yb","ob","rb","st","ft","dt","ref","NaN","getUTCSeconds","getUTCMinutes","getUTCHours","getUTCDate","getUTCMonth","getUTCFullYear","getUTCDay","UTC","getSeconds","getMinutes","getHours","getTimezoneOffset","setTime","getYear","_t","toTimeString","timeOrigin","vb","apply","grow","__errno_location","pthread_self","malloc","ya","za","instantiateWasm","instantiateStreaming","instance","aa","ba","da","ea","fa","ga","ha","ia","ja","ka","la","ma","_OrtCreateBinding","na","oa","pa","qa","ra","_OrtRunWithBinding","sa","ta","ua","_pthread_self","va","wa","xa","__emscripten_tls_init","__emscripten_thread_init","Aa","__emscripten_thread_crashed","Ba","ht","Ca","Da","__emscripten_thread_exit","Ea","__emscripten_check_mailbox","Fa","Ga","Ha","Ia","Ja","Ka","Mt","calledRun","onRuntimeInitialized","postRun","startWorker","preRun","setStatus","keepRuntimeAlive","ExitStatus","preInit","ortWasm","moduleArg","fs","copyWithin","fn","pending","b64","s64","parts","chunk","invalidEncoding","test","EventEmitter","_listeners","evt","off","listeners","emit","f32","f8b","writeFloat_f32_cpy","writeFloat_f32_rev","readFloat_f32_cpy","readFloat_f32_rev","writeFloatLE","writeFloatBE","readFloatLE","readFloatBE","writeFloat_ieee754","writeUint","exponent","LN2","readFloat_ieee754","readUint","uint","mantissa","Infinity","writeUintLE","writeUintBE","readUintLE","readUintBE","f64","writeDouble_f64_cpy","writeDouble_f64_rev","readDouble_f64_cpy","readDouble_f64_rev","writeDoubleLE","writeDoubleBE","readDoubleLE","readDoubleBE","writeDouble_ieee754","off0","off1","readDouble_ieee754","lo","hi","inquire","moduleName","mod","eval","SIZE","MAX","slab","utf8","read","write","c1","c2","__esModule","EMPTY","isGuid","validator","gen","createEmpty","raw","random","equals","other","isEmpty","protobuf","configure","_configure","BufferWriter","BufferReader","rpc","indexOutOfRange","writeLength","create_array","Buffer","isBuffer","readLongVarint","bits","readFixed32_end","readFixed64","_slice","sint32","bool","fixed32","sfixed32","wireType","BufferReader_","merge","sint64","zzDecode","fixed64","sfixed64","utf8Slice","Service","rpcImpl","requestDelimited","responseDelimited","Boolean","rpcCall","method","requestCtor","responseCtor","request","callback","asPromise","endedByRPC","zero","zzEncode","zeroHash","fromNumber","fromString","toLong","fromHash","hash","toHash","mask","part0","part1","part2","ifNotSet","newError","CustomError","captureStackTrace","writable","configurable","isNode","freeze","emptyObject","isObject","isset","isSet","prop","utf8Write","_Buffer_from","_Buffer_allocUnsafe","sizeOrArray","dcodeIO","key2Re","key32Re","key64Re","longToHash","longFromHash","lcFirst","toLowerCase","ProtocolError","fieldNames","fieldMap","encoding","allocUnsafe","Op","noop","State","states","writeByte","VarintOp","writeVarint64","writeFixed32","_push","writeBytes","BufferWriter_","writeStringBuffer","writeBytesBuffer","copy","Instance","Module","ctz32","clz32","__isLong__","INT_CACHE","UINT_CACHE","fromInt","cachedObj","UZERO","ZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","radix","radixToPower","power","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","eq","radixLong","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","notEquals","neq","comp","lessThanOrEqual","lte","greaterThan","gte","compare","thisNeg","otherNeg","negate","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","b00","divide","divisor","approx","toUnsigned","shru","shr","shl","log2","approxRes","approxRem","modulo","countLeadingZeros","clz","countTrailingZeros","ctz","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","rotateLeft","rotl","rotateRight","rotr","toSigned","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","_default","backends","backendsSortedByPriority","priority","currentBackend","backendHints","backendNames","backendName","backendInfo","isInitializing","initPromise","backend_impl_js_1","version_js_1","logLevelValue","common","env_impl_js_1","__createBinding","k2","desc","getOwnPropertyDescriptor","__exportStar","tensor_js_1","isFetchesEmpty","isFetches","arg1Keys","returnValue","static","filePathOrUint8Array","inference_session_impl_js_1","tensorToImageData","tensorToDataURL","pixels2DContext","tensorLayout","inputformat","norm","normMean","normBias","rTensorPointer","gTensorPointer","bTensorPointer","aTensorPointer","fillStyle","fillRect","toDataURL","image","rImagePointer","gImagePointer","bImagePointer","aImagePointer","createImageData","tensorFromPinnedBuffer","tensorFromGpuBuffer","tensorFromTexture","tensorFromImage","bufferToTensor","tensor_impl_js_1","outputformat","tensorFormat","float32Data","isHTMLImageEle","HTMLImageElement","isImageDataEle","ImageData","isImageBitmap","ImageBitmap","bufferToTensorOptions","resizedHeight","resizedWidth","drawImage","getImageData","newImage","Image","crossOrigin","img","tempCanvas","putImageData","checkBigInt","NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP","NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP","isBigIntChecked","isBigInt64ArrayAvailable","isBigUint64ArrayAvailable","tensor_conversion_impl_js_1","tensor_factory_impl_js_1","tensor_impl_type_mapping_js_1","tensor_utils_impl_js_1","expectedTypedArrayConstructor","cpuData","gpuTextureData","downloader","disposer","gpuBufferData","maybeDims","typedArrayConstructor","BigInt","firstElementType","calculateSize","toImageData","ensureValid","releaseData","isDownloading","tensorReshape","TrainingSession","_trainingOptions","_sessionOptions","_array","_trainableOnly","_feeds","training_session_impl_js_1","Offset","Table","SIZEOF_SHORT","SIZEOF_INT","FILE_IDENTIFIER_LENGTH","Encoding","UTF8_BYTES","UTF16_STRING","float32","float64","toFloat64","Builder","opt_initial_size","initial_size","space","minalign","vtable","vtable_in_use","isNested","object_start","vtables","vector_num_elems","force_defaults","clear","capacity","forceDefaults","asUint8Array","additional_bytes","align_size","old_buf_size","growByteBuffer","byte_size","writeInt8","writeInt16","writeInt64","writeFloat32","writeFloat64","addInt16","addFloat64","voffset","slot","addFieldInt16","addFieldFloat64","addFieldStruct","nested","notNested","new_buf_size","nbb","numfields","vtableloc","trimmed_size","existing_vtable","vt1","outer_loop","vt2","readInt16","root_table","opt_file_identifier","opt_size_prefix","size_prefix","file_identifier","finishSizePrefixed","table","field","table_start","vtable_start","elem_size","num_elems","alignment","createString","codePoint","bytes_","position_","readUint16","readFloat64","writeUint8","writeUint16","writeUint32","writeUint64","getBufferIdentifier","vtable_offset","opt_encoding","ident","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","getter","definition","Symbol","toStringTag","__webpack_exports__"],"sourceRoot":""}