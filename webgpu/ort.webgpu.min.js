/*!
 * ONNX Runtime Web v1.17.0
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
"use strict";var ort=(()=>{var kn=Object.defineProperty;var Ll=Object.getOwnPropertyDescriptor;var Gl=Object.getOwnPropertyNames;var Fl=Object.prototype.hasOwnProperty;var F=(e,t)=>()=>(e&&(t=e(e=0)),t);var Kt=(e,t)=>()=>(t||e((t={exports:{}}).exports,t),t.exports),zt=(e,t)=>{for(var r in t)kn(e,r,{get:t[r],enumerable:!0})},ql=(e,t,r,a)=>{if(t&&typeof t=="object"||typeof t=="function")for(let n of Gl(t))!Fl.call(e,n)&&n!==r&&kn(e,n,{get:()=>t[n],enumerable:!(a=Ll(t,n))||a.enumerable});return e};var _t=e=>ql(kn({},"__esModule",{value:!0}),e);var Ur,Wt,vt,Hr,Lr=F(()=>{Ur=new Map,Wt=[],vt=(e,t,r)=>{if(t&&typeof t.init=="function"&&typeof t.createInferenceSessionHandler=="function"){let a=Ur.get(e);if(a===void 0)Ur.set(e,{backend:t,priority:r});else{if(a.priority>r)return;if(a.priority===r&&a.backend!==t)throw new Error(`cannot register backend "${e}" using priority ${r}`)}if(r>=0){let n=Wt.indexOf(e);n!==-1&&Wt.splice(n,1);for(let s=0;s<Wt.length;s++)if(Ur.get(Wt[s]).priority<=r){Wt.splice(s,0,e);return}Wt.push(e)}return}throw new TypeError("not a valid backend")},Hr=async e=>{let t=e.length===0?Wt:e,r=[];for(let a of t){let n=Ur.get(a);if(n){if(n.initialized)return n.backend;if(n.aborted)continue;let s=!!n.initPromise;try{return s||(n.initPromise=n.backend.init()),await n.initPromise,n.initialized=!0,n.backend}catch(u){s||r.push({name:a,err:u}),n.aborted=!0}finally{delete n.initPromise}}}throw new Error(`no available backend found. ERR: ${r.map(a=>`[${a.name}] ${a.err}`).join(", ")}`)}});var Ka=F(()=>{Lr()});var Ya,Za=F(()=>{Ya="1.17.0"});var Xa,Rn,Qa=F(()=>{Za();Xa="warning",Rn={wasm:{},webgl:{},webgpu:{},versions:{common:Ya},set logLevel(e){if(e!==void 0){if(typeof e!="string"||["verbose","info","warning","error","fatal"].indexOf(e)===-1)throw new Error(`Unsupported logging level: ${e}`);Xa=e}},get logLevel(){return Xa}};Object.defineProperty(Rn,"logLevel",{enumerable:!0})});var Te,Ja=F(()=>{Qa();Te=Rn});var eo,to,ro=F(()=>{eo=(e,t)=>{let r=document.createElement("canvas");r.width=e.dims[3],r.height=e.dims[2];let a=r.getContext("2d");if(a!=null){let n,s;t?.tensorLayout!==void 0&&t.tensorLayout==="NHWC"?(n=e.dims[2],s=e.dims[3]):(n=e.dims[3],s=e.dims[2]);let u=t?.format!==void 0?t.format:"RGB",l=t?.norm,o,c;l===void 0||l.mean===void 0?o=[255,255,255,255]:typeof l.mean=="number"?o=[l.mean,l.mean,l.mean,l.mean]:(o=[l.mean[0],l.mean[1],l.mean[2],0],l.mean[3]!==void 0&&(o[3]=l.mean[3])),l===void 0||l.bias===void 0?c=[0,0,0,0]:typeof l.bias=="number"?c=[l.bias,l.bias,l.bias,l.bias]:(c=[l.bias[0],l.bias[1],l.bias[2],0],l.bias[3]!==void 0&&(c[3]=l.bias[3]));let f=s*n,y=0,h=f,w=f*2,v=-1;u==="RGBA"?(y=0,h=f,w=f*2,v=f*3):u==="RGB"?(y=0,h=f,w=f*2):u==="RBG"&&(y=0,w=f,h=f*2);for(let $=0;$<s;$++)for(let C=0;C<n;C++){let _=(e.data[y++]-c[0])*o[0],I=(e.data[h++]-c[1])*o[1],k=(e.data[w++]-c[2])*o[2],A=v===-1?255:(e.data[v++]-c[3])*o[3];a.fillStyle="rgba("+_+","+I+","+k+","+A+")",a.fillRect(C,$,1,1)}return r.toDataURL()}else throw new Error("Can not access image data")},to=(e,t)=>{let r=document.createElement("canvas").getContext("2d"),a;if(r!=null){let n,s,u;t?.tensorLayout!==void 0&&t.tensorLayout==="NHWC"?(n=e.dims[2],s=e.dims[1],u=e.dims[3]):(n=e.dims[3],s=e.dims[2],u=e.dims[1]);let l=t!==void 0&&t.format!==void 0?t.format:"RGB",o=t?.norm,c,f;o===void 0||o.mean===void 0?c=[255,255,255,255]:typeof o.mean=="number"?c=[o.mean,o.mean,o.mean,o.mean]:(c=[o.mean[0],o.mean[1],o.mean[2],255],o.mean[3]!==void 0&&(c[3]=o.mean[3])),o===void 0||o.bias===void 0?f=[0,0,0,0]:typeof o.bias=="number"?f=[o.bias,o.bias,o.bias,o.bias]:(f=[o.bias[0],o.bias[1],o.bias[2],0],o.bias[3]!==void 0&&(f[3]=o.bias[3]));let y=s*n;if(t!==void 0&&(t.format!==void 0&&u===4&&t.format!=="RGBA"||u===3&&t.format!=="RGB"&&t.format!=="BGR"))throw new Error("Tensor format doesn't match input tensor dims");let h=4,w=0,v=1,$=2,C=3,_=0,I=y,k=y*2,A=-1;l==="RGBA"?(_=0,I=y,k=y*2,A=y*3):l==="RGB"?(_=0,I=y,k=y*2):l==="RBG"&&(_=0,k=y,I=y*2),a=r.createImageData(n,s);for(let B=0;B<s*n;w+=h,v+=h,$+=h,C+=h,B++)a.data[w]=(e.data[_++]-f[0])*c[0],a.data[v]=(e.data[I++]-f[1])*c[1],a.data[$]=(e.data[k++]-f[2])*c[2],a.data[C]=A===-1?255:(e.data[A++]-f[3])*c[3]}else throw new Error("Can not access image data");return a}});var Pn,no,ao,oo,io,so=F(()=>{Gr();Pn=(e,t)=>{if(e===void 0)throw new Error("Image buffer must be defined");if(t.height===void 0||t.width===void 0)throw new Error("Image height and width must be defined");if(t.tensorLayout==="NHWC")throw new Error("NHWC Tensor layout is not supported yet");let{height:r,width:a}=t,n=t.norm??{mean:255,bias:0},s,u;typeof n.mean=="number"?s=[n.mean,n.mean,n.mean,n.mean]:s=[n.mean[0],n.mean[1],n.mean[2],n.mean[3]??255],typeof n.bias=="number"?u=[n.bias,n.bias,n.bias,n.bias]:u=[n.bias[0],n.bias[1],n.bias[2],n.bias[3]??0];let l=t.format!==void 0?t.format:"RGBA",o=t.tensorFormat!==void 0&&t.tensorFormat!==void 0?t.tensorFormat:"RGB",c=r*a,f=o==="RGBA"?new Float32Array(c*4):new Float32Array(c*3),y=4,h=0,w=1,v=2,$=3,C=0,_=c,I=c*2,k=-1;l==="RGB"&&(y=3,h=0,w=1,v=2,$=-1),o==="RGBA"?k=c*3:o==="RBG"?(C=0,I=c,_=c*2):o==="BGR"&&(I=0,_=c,C=c*2);for(let B=0;B<c;B++,h+=y,v+=y,w+=y,$+=y)f[C++]=(e[h]+u[0])/s[0],f[_++]=(e[w]+u[1])/s[1],f[I++]=(e[v]+u[2])/s[2],k!==-1&&$!==-1&&(f[k++]=(e[$]+u[3])/s[3]);return o==="RGBA"?new Ke("float32",f,[1,4,r,a]):new Ke("float32",f,[1,3,r,a])},no=async(e,t)=>{let r=typeof HTMLImageElement<"u"&&e instanceof HTMLImageElement,a=typeof ImageData<"u"&&e instanceof ImageData,n=typeof ImageBitmap<"u"&&e instanceof ImageBitmap,s=typeof e=="string",u,l=t??{};if(r){let o=document.createElement("canvas");o.width=e.width,o.height=e.height;let c=o.getContext("2d");if(c!=null){let f=e.height,y=e.width;if(t!==void 0&&t.resizedHeight!==void 0&&t.resizedWidth!==void 0&&(f=t.resizedHeight,y=t.resizedWidth),t!==void 0){if(l=t,t.tensorFormat!==void 0)throw new Error("Image input config format must be RGBA for HTMLImageElement");l.tensorFormat="RGBA",l.height=f,l.width=y}else l.tensorFormat="RGBA",l.height=f,l.width=y;c.drawImage(e,0,0),u=c.getImageData(0,0,y,f).data}else throw new Error("Can not access image data")}else if(a){let o,c;if(t!==void 0&&t.resizedWidth!==void 0&&t.resizedHeight!==void 0?(o=t.resizedHeight,c=t.resizedWidth):(o=e.height,c=e.width),t!==void 0&&(l=t),l.format="RGBA",l.height=o,l.width=c,t!==void 0){let f=document.createElement("canvas");f.width=c,f.height=o;let y=f.getContext("2d");if(y!=null)y.putImageData(e,0,0),u=y.getImageData(0,0,c,o).data;else throw new Error("Can not access image data")}else u=e.data}else if(n){if(t===void 0)throw new Error("Please provide image config with format for Imagebitmap");let o=document.createElement("canvas");o.width=e.width,o.height=e.height;let c=o.getContext("2d");if(c!=null){let f=e.height,y=e.width;return c.drawImage(e,0,0,y,f),u=c.getImageData(0,0,y,f).data,l.height=f,l.width=y,Pn(u,l)}else throw new Error("Can not access image data")}else{if(s)return new Promise((o,c)=>{let f=document.createElement("canvas"),y=f.getContext("2d");if(!e||!y)return c();let h=new Image;h.crossOrigin="Anonymous",h.src=e,h.onload=()=>{f.width=h.width,f.height=h.height,y.drawImage(h,0,0,f.width,f.height);let w=y.getImageData(0,0,f.width,f.height);l.height=f.height,l.width=f.width,o(Pn(w.data,l))}});throw new Error("Input data provided is not supported - aborted tensor creation")}if(u!==void 0)return Pn(u,l);throw new Error("Input data provided is not supported - aborted tensor creation")},ao=(e,t)=>{let{width:r,height:a,download:n,dispose:s}=t,u=[1,a,r,4];return new Ke({location:"texture",type:"float32",texture:e,dims:u,download:n,dispose:s})},oo=(e,t)=>{let{dataType:r,dims:a,download:n,dispose:s}=t;return new Ke({location:"gpu-buffer",type:r??"float32",gpuBuffer:e,dims:a,download:n,dispose:s})},io=(e,t,r)=>new Ke({location:"cpu-pinned",type:e,data:t,dims:r??[t.length]})});var mr,Fr,uo,lo,co=F(()=>{mr=new Map([["float32",Float32Array],["uint8",Uint8Array],["int8",Int8Array],["uint16",Uint16Array],["float16",Uint16Array],["int16",Int16Array],["int32",Int32Array],["bool",Uint8Array],["float64",Float64Array],["uint32",Uint32Array]]),Fr=new Map([[Float32Array,"float32"],[Uint8Array,"uint8"],[Int8Array,"int8"],[Uint16Array,"uint16"],[Int16Array,"int16"],[Int32Array,"int32"],[Float64Array,"float64"],[Uint32Array,"uint32"]]),uo=!1,lo=()=>{if(!uo){uo=!0;let e=typeof BigInt64Array<"u"&&typeof BigInt64Array.from=="function",t=typeof BigUint64Array<"u"&&typeof BigUint64Array.from=="function";e&&(mr.set("int64",BigInt64Array),Fr.set(BigInt64Array,"int64")),t&&(mr.set("uint64",BigUint64Array),Fr.set(BigUint64Array,"uint64"))}}});var po,fo,mo=F(()=>{Gr();po=e=>{let t=1;for(let r=0;r<e.length;r++){let a=e[r];if(typeof a!="number"||!Number.isSafeInteger(a))throw new TypeError(`dims[${r}] must be an integer, got: ${a}`);if(a<0)throw new RangeError(`dims[${r}] must be a non-negative integer, got: ${a}`);t*=a}return t},fo=(e,t)=>{switch(e.location){case"cpu":return new Ke(e.type,e.data,t);case"cpu-pinned":return new Ke({location:"cpu-pinned",data:e.data,type:e.type,dims:t});case"texture":return new Ke({location:"texture",texture:e.texture,type:e.type,dims:t});case"gpu-buffer":return new Ke({location:"gpu-buffer",gpuBuffer:e.gpuBuffer,type:e.type,dims:t});default:throw new Error(`tensorReshape: tensor location ${e.location} is not supported`)}}});var Ke,Gr=F(()=>{ro();so();co();mo();Ke=class{constructor(t,r,a){lo();let n,s;if(typeof t=="object"&&"location"in t)switch(this.dataLocation=t.location,n=t.type,s=t.dims,t.location){case"cpu-pinned":{let l=mr.get(n);if(!l)throw new TypeError(`unsupported type "${n}" to create tensor from pinned buffer`);if(!(t.data instanceof l))throw new TypeError(`buffer should be of type ${l.name}`);this.cpuData=t.data;break}case"texture":{if(n!=="float32")throw new TypeError(`unsupported type "${n}" to create tensor from texture`);this.gpuTextureData=t.texture,this.downloader=t.download,this.disposer=t.dispose;break}case"gpu-buffer":{if(n!=="float32"&&n!=="float16"&&n!=="int32"&&n!=="int64"&&n!=="uint32"&&n!=="bool")throw new TypeError(`unsupported type "${n}" to create tensor from gpu buffer`);this.gpuBufferData=t.gpuBuffer,this.downloader=t.download,this.disposer=t.dispose;break}default:throw new Error(`Tensor constructor: unsupported location '${this.dataLocation}'`)}else{let l,o;if(typeof t=="string")if(n=t,o=a,t==="string"){if(!Array.isArray(r))throw new TypeError("A string tensor's data must be a string array.");l=r}else{let c=mr.get(t);if(c===void 0)throw new TypeError(`Unsupported tensor type: ${t}.`);if(Array.isArray(r)){if(t==="float16")throw new TypeError("Creating a float16 tensor from number array is not supported. Please use Uint16Array as data.");t==="uint64"||t==="int64"?l=c.from(r,BigInt):l=c.from(r)}else if(r instanceof c)l=r;else throw new TypeError(`A ${n} tensor's data must be type of ${c}`)}else if(o=r,Array.isArray(t)){if(t.length===0)throw new TypeError("Tensor type cannot be inferred from an empty array.");let c=typeof t[0];if(c==="string")n="string",l=t;else if(c==="boolean")n="bool",l=Uint8Array.from(t);else throw new TypeError(`Invalid element type of data array: ${c}.`)}else{let c=Fr.get(t.constructor);if(c===void 0)throw new TypeError(`Unsupported type for tensor data: ${t.constructor}.`);n=c,l=t}if(o===void 0)o=[l.length];else if(!Array.isArray(o))throw new TypeError("A tensor's dims must be a number array");s=o,this.cpuData=l,this.dataLocation="cpu"}let u=po(s);if(this.cpuData&&u!==this.cpuData.length)throw new Error(`Tensor's size(${u}) does not match data length(${this.cpuData.length}).`);this.type=n,this.dims=s,this.size=u}static async fromImage(t,r){return no(t,r)}static fromTexture(t,r){return ao(t,r)}static fromGpuBuffer(t,r){return oo(t,r)}static fromPinnedBuffer(t,r,a){return io(t,r,a)}toDataURL(t){return eo(this,t)}toImageData(t){return to(this,t)}get data(){if(this.ensureValid(),!this.cpuData)throw new Error("The data is not on CPU. Use `getData()` to download GPU data to CPU, or use `texture` or `gpuBuffer` property to access the GPU data directly.");return this.cpuData}get location(){return this.dataLocation}get texture(){if(this.ensureValid(),!this.gpuTextureData)throw new Error("The data is not stored as a WebGL texture.");return this.gpuTextureData}get gpuBuffer(){if(this.ensureValid(),!this.gpuBufferData)throw new Error("The data is not stored as a WebGPU buffer.");return this.gpuBufferData}async getData(t){switch(this.ensureValid(),this.dataLocation){case"cpu":case"cpu-pinned":return this.data;case"texture":case"gpu-buffer":{if(!this.downloader)throw new Error("The current tensor is not created with a specified data downloader.");if(this.isDownloading)throw new Error("The current tensor is being downloaded.");try{this.isDownloading=!0;let r=await this.downloader();return this.downloader=void 0,this.dataLocation="cpu",this.cpuData=r,t&&this.disposer&&(this.disposer(),this.disposer=void 0),r}finally{this.isDownloading=!1}}default:throw new Error(`cannot get data from location: ${this.dataLocation}`)}}dispose(){if(this.isDownloading)throw new Error("The current tensor is being downloaded.");this.disposer&&(this.disposer(),this.disposer=void 0),this.cpuData=void 0,this.gpuTextureData=void 0,this.gpuBufferData=void 0,this.downloader=void 0,this.isDownloading=void 0,this.dataLocation="none"}ensureValid(){if(this.dataLocation==="none")throw new Error("The tensor is disposed.")}reshape(t){if(this.ensureValid(),this.downloader||this.disposer)throw new Error("Cannot reshape a tensor that owns GPU resource.");return fo(this,t)}}});var Le,qr=F(()=>{Gr();Le=Ke});var jr,ho=F(()=>{Lr();qr();jr=class e{constructor(t){this.handler=t}async run(t,r,a){let n={},s={};if(typeof t!="object"||t===null||t instanceof Le||Array.isArray(t))throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");let u=!0;if(typeof r=="object"){if(r===null)throw new TypeError("Unexpected argument[1]: cannot be null.");if(r instanceof Le)throw new TypeError("'fetches' cannot be a Tensor");if(Array.isArray(r)){if(r.length===0)throw new TypeError("'fetches' cannot be an empty array.");u=!1;for(let c of r){if(typeof c!="string")throw new TypeError("'fetches' must be a string array or an object.");if(this.outputNames.indexOf(c)===-1)throw new RangeError(`'fetches' contains invalid output name: ${c}.`);n[c]=null}if(typeof a=="object"&&a!==null)s=a;else if(typeof a<"u")throw new TypeError("'options' must be an object.")}else{let c=!1,f=Object.getOwnPropertyNames(r);for(let y of this.outputNames)if(f.indexOf(y)!==-1){let h=r[y];(h===null||h instanceof Le)&&(c=!0,u=!1,n[y]=h)}if(c){if(typeof a=="object"&&a!==null)s=a;else if(typeof a<"u")throw new TypeError("'options' must be an object.")}else s=r}}else if(typeof r<"u")throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");for(let c of this.inputNames)if(typeof t[c]>"u")throw new Error(`input '${c}' is missing in 'feeds'.`);if(u)for(let c of this.outputNames)n[c]=null;let l=await this.handler.run(t,n,s),o={};for(let c in l)if(Object.hasOwnProperty.call(l,c)){let f=l[c];f instanceof Le?o[c]=f:o[c]=new Le(f.type,f.data,f.dims)}return o}async release(){return this.handler.dispose()}static async create(t,r,a,n){let s,u={};if(typeof t=="string"){if(s=t,typeof r=="object"&&r!==null)u=r;else if(typeof r<"u")throw new TypeError("'options' must be an object.")}else if(t instanceof Uint8Array){if(s=t,typeof r=="object"&&r!==null)u=r;else if(typeof r<"u")throw new TypeError("'options' must be an object.")}else if(t instanceof ArrayBuffer||typeof SharedArrayBuffer<"u"&&t instanceof SharedArrayBuffer){let y=t,h=0,w=t.byteLength;if(typeof r=="object"&&r!==null)u=r;else if(typeof r=="number"){if(h=r,!Number.isSafeInteger(h))throw new RangeError("'byteOffset' must be an integer.");if(h<0||h>=y.byteLength)throw new RangeError(`'byteOffset' is out of range [0, ${y.byteLength}).`);if(w=t.byteLength-h,typeof a=="number"){if(w=a,!Number.isSafeInteger(w))throw new RangeError("'byteLength' must be an integer.");if(w<=0||h+w>y.byteLength)throw new RangeError(`'byteLength' is out of range (0, ${y.byteLength-h}].`);if(typeof n=="object"&&n!==null)u=n;else if(typeof n<"u")throw new TypeError("'options' must be an object.")}else if(typeof a<"u")throw new TypeError("'byteLength' must be a number.")}else if(typeof r<"u")throw new TypeError("'options' must be an object.");s=new Uint8Array(y,h,w)}else throw new TypeError("Unexpected argument[0]: must be 'path' or 'buffer'.");let o=(u.executionProviders||[]).map(y=>typeof y=="string"?y:y.name),f=await(await Hr(o)).createInferenceSessionHandler(s,u);return new e(f)}startProfiling(){this.handler.startProfiling()}endProfiling(){this.handler.endProfiling()}get inputNames(){return this.handler.inputNames}get outputNames(){return this.handler.outputNames}}});var go,yo=F(()=>{ho();go=jr});var bo=F(()=>{});var jl,Kr,wo=F(()=>{Lr();qr();jl="Training backend could not be resolved. Make sure you're using the correct configuration & WebAssembly files.",Kr=class e{constructor(t){this.handler=t}get inputNames(){return this.handler.inputNames}get outputNames(){return this.handler.outputNames}static async create(t,r){let a=t.evalModel||"",n=t.optimizerModel||"",s=r||{},l=(s.executionProviders||[]).map(c=>typeof c=="string"?c:c.name),o=await Hr(l);if(o.createTrainingSessionHandler){let c=await o.createTrainingSessionHandler(t.checkpointState,t.trainModel,a,n,s);return new e(c)}else throw new Error(jl)}typeNarrowingForRunStep(t,r,a){let n={},s={};if(typeof t!="object"||t===null||t instanceof Le||Array.isArray(t))throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");let u=!0;if(typeof r=="object"){if(r===null)throw new TypeError("Unexpected argument[1]: cannot be null.");if(r instanceof Le)throw new TypeError("'fetches' cannot be a Tensor");if(Array.isArray(r)){if(r.length===0)throw new TypeError("'fetches' cannot be an empty array.");u=!1;for(let l of r){if(typeof l!="string")throw new TypeError("'fetches' must be a string array or an object.");if(this.outputNames.indexOf(l)===-1)throw new RangeError(`'fetches' contains invalid output name: ${l}.`);n[l]=null}if(typeof a=="object"&&a!==null)s=a;else if(typeof a<"u")throw new TypeError("'options' must be an object.")}else{let l=!1,o=Object.getOwnPropertyNames(r);for(let c of this.outputNames)if(o.indexOf(c)!==-1){let f=r[c];(f===null||f instanceof Le)&&(l=!0,u=!1,n[c]=f)}if(l){if(typeof a=="object"&&a!==null)s=a;else if(typeof a<"u")throw new TypeError("'options' must be an object.")}else s=r}}else if(typeof r<"u")throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");for(let l of this.inputNames)if(typeof t[l]>"u")throw new Error(`input '${l}' is missing in 'feeds'.`);if(u)for(let l of this.outputNames)n[l]=null;return[n,s]}convertHandlerReturnTypeToMapOfTensors(t){let r={};for(let a in t)if(Object.hasOwnProperty.call(t,a)){let n=t[a];n instanceof Le?r[a]=n:r[a]=new Le(n.type,n.data,n.dims)}return r}async runTrainStep(t,r,a){let[n,s]=this.typeNarrowingForRunStep(t,r,a),u=await this.handler.runTrainStep(t,n,s);return this.convertHandlerReturnTypeToMapOfTensors(u)}async getParametersSize(t=!0){return this.handler.getParametersSize(t)}async loadParametersBuffer(t,r=!0){let a=await this.getParametersSize(r);if(t.length!==4*a)throw new Error("Size of the buffer passed into loadParametersBuffer must match the number of parameters in the model. Please use getParametersSize method to check.");return this.handler.loadParametersBuffer(t,r)}async getContiguousParameters(t=!0){return this.handler.getContiguousParameters(t)}async release(){return this.handler.dispose()}}});var vo,$o=F(()=>{wo();vo=Kr});var Bn={};zt(Bn,{InferenceSession:()=>go,Tensor:()=>Le,TrainingSession:()=>vo,env:()=>Te,registerBackend:()=>vt});var $t=F(()=>{Ka();Ja();yo();qr();bo();$o()});var Mn={};zt(Mn,{readFile:()=>Kl});var Kl,Dn=F(()=>{Kl=void 0});var zn={};zt(zn,{join:()=>Yl});var Yl,Wn=F(()=>{Yl=void 0});var Co=Kt((Io,Vn)=>{"use strict";var xo=(()=>{var e=typeof document<"u"&&document.currentScript?document.currentScript.src:void 0;return typeof __filename<"u"&&(e=e||__filename),function(t={}){var r=t,a,n;r.ready=new Promise((d,m)=>{a=d,n=m}),r.jsepInit=(d,m,b,x,O,L,H,ue)=>{r.Za=d,r.Oa=m,r.Qa=b,r.Ja=x,r.Pa=O,r.ra=L,r.Ra=H,r.Sa=ue,m=(Y,ne,X)=>(...ce)=>{let ge=Je,R=ne?.();ce=Y(...ce);let oe=ne?.();return R!==oe&&(Y=oe,X(R),ne=X=null),Je!=ge?kr():ce},b=Y=>async(...ne)=>{try{if(r.Da)throw Error("Session already started");let X=r.Da={Ta:ne[0],errors:[]},ce=await Y(...ne);if(r.Da!==X)throw Error("Session mismatch");d.flush();let ge=X.errors;if(0<ge.length){let R=await Promise.all(ge);if(R=R.filter(oe=>oe),0<R.length)throw Error(R.join(`
`))}return ce}finally{r.Da=null}},r._OrtRun=b(m(r._OrtRun,()=>r._OrtRun,Y=>r._OrtRun=Y)),r._OrtRunWithBinding=b(m(r._OrtRunWithBinding,()=>r._OrtRunWithBinding,Y=>r._OrtRunWithBinding=Y)),r._OrtBindInput=m(r._OrtBindInput,()=>r._OrtBindInput,Y=>r._OrtBindInput=Y),r.jsepRegisterBuffer=(Y,ne,X,ce)=>d.registerBuffer(Y,ne,X,ce),r.jsepUnregisterBuffers=Y=>{d.unregisterBuffers(Y)},r.jsepGetBuffer=Y=>d.getBuffer(Y),r.jsepCreateDownloader=(Y,ne,X)=>d.createDownloader(Y,ne,X)};var s=Object.assign({},r),u="./this.program",l=(d,m)=>{throw m},o=typeof window=="object",c=typeof importScripts=="function",f=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string",y="",h,w,v;if(f){var $=(Dn(),_t(Mn)),C=(Wn(),_t(zn));y=c?C.dirname(y)+"/":__dirname+"/",h=(d,m)=>(d=d.startsWith("file://")?new URL(d):C.normalize(d),$.readFileSync(d,m?void 0:"utf8")),v=d=>(d=h(d,!0),d.buffer||(d=new Uint8Array(d)),d),w=(d,m,b,x=!0)=>{d=d.startsWith("file://")?new URL(d):C.normalize(d),$.readFile(d,x?void 0:"utf8",(O,L)=>{O?b(O):m(x?L.buffer:L)})},!r.thisProgram&&1<process.argv.length&&(u=process.argv[1].replace(/\\/g,"/")),process.argv.slice(2),l=(d,m)=>{throw process.exitCode=d,m},r.inspect=()=>"[Emscripten Module object]"}else(o||c)&&(c?y=self.location.href:typeof document<"u"&&document.currentScript&&(y=document.currentScript.src),e&&(y=e),y.indexOf("blob:")!==0?y=y.substr(0,y.replace(/[?#].*/,"").lastIndexOf("/")+1):y="",h=d=>{var m=new XMLHttpRequest;return m.open("GET",d,!1),m.send(null),m.responseText},c&&(v=d=>{var m=new XMLHttpRequest;return m.open("GET",d,!1),m.responseType="arraybuffer",m.send(null),new Uint8Array(m.response)}),w=(d,m,b)=>{var x=new XMLHttpRequest;x.open("GET",d,!0),x.responseType="arraybuffer",x.onload=()=>{x.status==200||x.status==0&&x.response?m(x.response):b()},x.onerror=b,x.send(null)});var _=r.print||console.log.bind(console),I=r.printErr||console.error.bind(console);Object.assign(r,s),s=null,r.thisProgram&&(u=r.thisProgram),r.quit&&(l=r.quit);var k;r.wasmBinary&&(k=r.wasmBinary);var A=r.noExitRuntime||!0;typeof WebAssembly!="object"&&qe("no native wasm support detected");var B,T,z=!1,W,K,ee,M,Z,xe,re;function ve(){var d=B.buffer;r.HEAP8=K=new Int8Array(d),r.HEAP16=new Int16Array(d),r.HEAP32=M=new Int32Array(d),r.HEAPU8=ee=new Uint8Array(d),r.HEAPU16=new Uint16Array(d),r.HEAPU32=Z=new Uint32Array(d),r.HEAPF32=xe=new Float32Array(d),r.HEAPF64=re=new Float64Array(d)}var j=[],$e=[],Ce=[];function _e(){var d=r.preRun.shift();j.unshift(d)}var me=0,it=null,Ge=null;function qe(d){throw r.onAbort&&r.onAbort(d),d="Aborted("+d+")",I(d),z=!0,W=1,d=new WebAssembly.RuntimeError(d+". Build with -sASSERTIONS for more info."),n(d),d}function G(d){return d.startsWith("data:application/octet-stream;base64,")}var le;if(le="ort-wasm-simd.wasm",!G(le)){var fe=le;le=r.locateFile?r.locateFile(fe,y):y+fe}function Ue(d){if(d==le&&k)return new Uint8Array(k);if(v)return v(d);throw"both async and sync fetching of the wasm failed"}function Ye(d){if(!k&&(o||c)){if(typeof fetch=="function"&&!d.startsWith("file://"))return fetch(d,{credentials:"same-origin"}).then(m=>{if(!m.ok)throw"failed to load wasm binary file at '"+d+"'";return m.arrayBuffer()}).catch(()=>Ue(d));if(w)return new Promise((m,b)=>{w(d,x=>m(new Uint8Array(x)),b)})}return Promise.resolve().then(()=>Ue(d))}function Be(d,m,b){return Ye(d).then(x=>WebAssembly.instantiate(x,m)).then(x=>x).then(b,x=>{I("failed to asynchronously prepare wasm: "+x),qe(x)})}function Ve(d,m){var b=le;return k||typeof WebAssembly.instantiateStreaming!="function"||G(b)||b.startsWith("file://")||f||typeof fetch!="function"?Be(b,d,m):fetch(b,{credentials:"same-origin"}).then(x=>WebAssembly.instantiateStreaming(x,d).then(m,function(O){return I("wasm streaming compile failed: "+O),I("falling back to ArrayBuffer instantiation"),Be(b,d,m)}))}var je,st={912800:d=>{r.ra("Abs",d,void 0)},912851:d=>{r.ra("Neg",d,void 0)},912902:d=>{r.ra("Floor",d,void 0)},912955:d=>{r.ra("Ceil",d,void 0)},913007:d=>{r.ra("Reciprocal",d,void 0)},913065:d=>{r.ra("Sqrt",d,void 0)},913117:d=>{r.ra("Exp",d,void 0)},913168:d=>{r.ra("Erf",d,void 0)},913219:d=>{r.ra("Sigmoid",d,void 0)},913274:d=>{r.ra("Log",d,void 0)},913325:d=>{r.ra("Sin",d,void 0)},913376:d=>{r.ra("Cos",d,void 0)},913427:d=>{r.ra("Tan",d,void 0)},913478:d=>{r.ra("Asin",d,void 0)},913530:d=>{r.ra("Acos",d,void 0)},913582:d=>{r.ra("Atan",d,void 0)},913634:d=>{r.ra("Sinh",d,void 0)},913686:d=>{r.ra("Cosh",d,void 0)},913738:d=>{r.ra("Asinh",d,void 0)},913791:d=>{r.ra("Acosh",d,void 0)},913844:d=>{r.ra("Atanh",d,void 0)},913897:d=>{r.ra("Tanh",d,void 0)},913949:d=>{r.ra("Not",d,void 0)},914e3:(d,m,b)=>{r.ra("Clip",d,{min:m,max:b})},914069:d=>{r.ra("Clip",d,void 0)},914121:(d,m)=>{r.ra("Elu",d,{alpha:m})},914179:d=>{r.ra("Relu",d,void 0)},914231:(d,m)=>{r.ra("LeakyRelu",d,{alpha:m})},914295:(d,m)=>{r.ra("ThresholdedRelu",d,{alpha:m})},914365:(d,m)=>{r.ra("Cast",d,{to:m})},914423:d=>{r.ra("Add",d,void 0)},914474:d=>{r.ra("Sub",d,void 0)},914525:d=>{r.ra("Mul",d,void 0)},914576:d=>{r.ra("Div",d,void 0)},914627:d=>{r.ra("Pow",d,void 0)},914678:d=>{r.ra("Equal",d,void 0)},914731:d=>{r.ra("Greater",d,void 0)},914786:d=>{r.ra("GreaterOrEqual",d,void 0)},914848:d=>{r.ra("Less",d,void 0)},914900:d=>{r.ra("LessOrEqual",d,void 0)},914959:(d,m,b,x,O)=>{r.ra("ReduceMean",d,{keepDims:!!m,noopWithEmptyAxes:!!b,axes:x?Array.from(M.subarray(O>>>0,O+x>>>0)):[]})},915123:(d,m,b,x,O)=>{r.ra("ReduceMax",d,{keepDims:!!m,noopWithEmptyAxes:!!b,axes:x?Array.from(M.subarray(O>>>0,O+x>>>0)):[]})},915286:(d,m,b,x,O)=>{r.ra("ReduceMin",d,{keepDims:!!m,noopWithEmptyAxes:!!b,axes:x?Array.from(M.subarray(O>>>0,O+x>>>0)):[]})},915449:(d,m,b,x,O)=>{r.ra("ReduceProd",d,{keepDims:!!m,noopWithEmptyAxes:!!b,axes:x?Array.from(M.subarray(O>>>0,O+x>>>0)):[]})},915613:(d,m,b,x,O)=>{r.ra("ReduceSum",d,{keepDims:!!m,noopWithEmptyAxes:!!b,axes:x?Array.from(M.subarray(O>>>0,O+x>>>0)):[]})},915776:(d,m,b,x,O)=>{r.ra("ReduceL1",d,{keepDims:!!m,noopWithEmptyAxes:!!b,axes:x?Array.from(M.subarray(O>>>0,O+x>>>0)):[]})},915938:(d,m,b,x,O)=>{r.ra("ReduceL2",d,{keepDims:!!m,noopWithEmptyAxes:!!b,axes:x?Array.from(M.subarray(O>>>0,O+x>>>0)):[]})},916100:(d,m,b,x,O)=>{r.ra("ReduceLogSum",d,{keepDims:!!m,noopWithEmptyAxes:!!b,axes:x?Array.from(M.subarray(O>>>0,O+x>>>0)):[]})},916266:(d,m,b,x,O)=>{r.ra("ReduceSumSquare",d,{keepDims:!!m,noopWithEmptyAxes:!!b,axes:x?Array.from(M.subarray(O>>>0,O+x>>>0)):[]})},916435:(d,m,b,x,O)=>{r.ra("ReduceLogSumExp",d,{keepDims:!!m,noopWithEmptyAxes:!!b,axes:x?Array.from(M.subarray(O>>>0,O+x>>>0)):[]})},916604:d=>{r.ra("Where",d,void 0)},916657:(d,m,b)=>{r.ra("Transpose",d,{perm:m?Array.from(M.subarray(b>>>0,b+m>>>0)):[]})},916770:(d,m,b,x,O,L,H,ue,Y,ne,X,ce,ge,R,oe)=>{r.ra("ConvTranspose",d,{format:Y?"NHWC":"NCHW",autoPad:m,dilations:[b],group:x,kernel_shape:[O],pads:[L,H],strides:[ue],wIsConst:()=>!!K[ne>>>0],outputPadding:X?Array.from(M.subarray(ce>>>0,ce+X>>>0)):[],outputShape:ge?Array.from(M.subarray(R>>>0,R+ge>>>0)):[],activation:De(oe)})},917184:(d,m,b,x,O,L,H,ue,Y,ne,X,ce,ge,R)=>{r.ra("ConvTranspose",d,{format:ue?"NHWC":"NCHW",autoPad:m,dilations:Array.from(M.subarray(b>>>0,b+2>>>0)),group:x,kernelShape:Array.from(M.subarray(O>>>0,O+2>>>0)),pads:Array.from(M.subarray(L>>>0,L+4>>>0)),strides:Array.from(M.subarray(H>>>0,H+2>>>0)),wIsConst:()=>!!K[Y>>>0],outputPadding:0<ne?Array.from(M.subarray(X>>>0,X+ne>>>0)):[],outputShape:0<ce?Array.from(M.subarray(ge>>>0,ge+ce>>>0)):[],activation:De(R)})},917741:(d,m,b,x,O,L,H,ue,Y,ne,X,ce,ge,R,oe)=>{r.ra("ConvTranspose",d,{format:Y?"NHWC":"NCHW",autoPad:m,dilations:[b],group:x,kernel_shape:[O],pads:[L,H],strides:[ue],wIsConst:()=>!!K[ne>>>0],outputPadding:X?Array.from(M.subarray(ce>>>0,ce+X>>>0)):[],outputShape:ge?Array.from(M.subarray(R>>>0,R+ge>>>0)):[],activation:De(oe)})},918155:(d,m,b,x,O,L,H,ue,Y,ne,X,ce,ge,R)=>{r.ra("ConvTranspose",d,{format:ue?"NHWC":"NCHW",autoPad:m,dilations:Array.from(M.subarray(b>>>0,b+2>>>0)),group:x,kernelShape:Array.from(M.subarray(O>>>0,O+2>>>0)),pads:Array.from(M.subarray(L>>>0,L+4>>>0)),strides:Array.from(M.subarray(H>>>0,H+2>>>0)),wIsConst:()=>!!K[Y>>>0],outputPadding:0<ne?Array.from(M.subarray(X>>>0,X+ne>>>0)):[],outputShape:0<ce?Array.from(M.subarray(ge>>>0,ge+ce>>>0)):[],activation:De(R)})},918712:(d,m)=>{r.ra("GlobalAveragePool",d,{format:m?"NHWC":"NCHW"})},918803:(d,m,b,x,O,L,H,ue,Y,ne,X,ce,ge,R,oe,he)=>{r.ra("AveragePool",d,{format:he?"NHWC":"NCHW",auto_pad:m,ceil_mode:b,count_include_pad:x,storage_order:O,dilations:[L,H],kernel_shape:[ue,Y],pads:[ne,X,ce,ge],strides:[R,oe]})},919087:(d,m)=>{r.ra("GlobalAveragePool",d,{format:m?"NHWC":"NCHW"})},919178:(d,m,b,x,O,L,H,ue,Y,ne,X,ce,ge,R,oe,he)=>{r.ra("AveragePool",d,{format:he?"NHWC":"NCHW",auto_pad:m,ceil_mode:b,count_include_pad:x,storage_order:O,dilations:[L,H],kernel_shape:[ue,Y],pads:[ne,X,ce,ge],strides:[R,oe]})},919462:(d,m)=>{r.ra("GlobalMaxPool",d,{format:m?"NHWC":"NCHW"})},919549:(d,m,b,x,O,L,H,ue,Y,ne,X,ce,ge,R,oe,he)=>{r.ra("MaxPool",d,{format:he?"NHWC":"NCHW",auto_pad:m,ceil_mode:b,count_include_pad:x,storage_order:O,dilations:[L,H],kernel_shape:[ue,Y],pads:[ne,X,ce,ge],strides:[R,oe]})},919829:(d,m)=>{r.ra("GlobalMaxPool",d,{format:m?"NHWC":"NCHW"})},919916:(d,m,b,x,O,L,H,ue,Y,ne,X,ce,ge,R,oe,he)=>{r.ra("MaxPool",d,{format:he?"NHWC":"NCHW",auto_pad:m,ceil_mode:b,count_include_pad:x,storage_order:O,dilations:[L,H],kernel_shape:[ue,Y],pads:[ne,X,ce,ge],strides:[R,oe]})},920196:(d,m,b,x,O)=>{r.ra("Gemm",d,{alpha:m,beta:b,transA:x,transB:O})},920300:d=>{r.ra("MatMul",d,void 0)},920354:(d,m,b,x)=>{r.ra("ArgMax",d,{keepDims:!!m,selectLastIndex:!!b,axis:x})},920462:(d,m,b,x)=>{r.ra("ArgMin",d,{keepDims:!!m,selectLastIndex:!!b,axis:x})},920570:(d,m)=>{r.ra("Softmax",d,{axis:m})},920633:(d,m)=>{r.ra("Concat",d,{axis:m})},920693:(d,m,b,x,O)=>{r.ra("Split",d,{axis:m,numOutputs:b,splitSizes:x?Array.from(M.subarray(O>>>0,O+x>>>0)):[]})},920838:d=>{r.ra("Expand",d,void 0)},920892:(d,m)=>{r.ra("Gather",d,{axis:Number(m)})},920963:(d,m)=>{r.ra("GatherElements",d,{axis:Number(m)})},921042:(d,m,b,x,O,L,H,ue,Y,ne,X)=>{r.ra("Resize",d,{antialias:m,axes:b?Array.from(M.subarray(x>>>0,x+b>>>0)):[],coordinateTransformMode:De(O),cubicCoeffA:L,excludeOutside:H,extrapolationValue:ue,keepAspectRatioPolicy:De(Y),mode:De(ne),nearestMode:De(X)})},921393:(d,m,b,x,O,L,H)=>{r.ra("Slice",d,{starts:m?Array.from(M.subarray(b>>>0,b+m>>>0)):[],ends:x?Array.from(M.subarray(O>>>0,O+x>>>0)):[],axes:L?Array.from(M.subarray(H>>>0,H+L>>>0)):[]})},921624:d=>{r.ra("Tile",d,void 0)},921676:(d,m,b)=>{r.ra("LayerNormalization",d,{axis:Number(m),epsilon:Number(b)})},921783:(d,m,b)=>{r.ra("InstanceNormalization",d,{epsilon:m,format:b?"NHWC":"NCHW"})},921897:(d,m,b)=>{r.ra("InstanceNormalization",d,{epsilon:m,format:b?"NHWC":"NCHW"})},922011:d=>{r.ra("Range",d,void 0)},922064:(d,m)=>{r.ra("Einsum",d,{equation:De(m)})},922145:(d,m,b,x,O)=>{r.ra("Pad",d,{mode:m,value:b,pads:x?Array.from(M.subarray(O>>>0,O+x>>>0)):[]})},922277:(d,m,b,x,O,L)=>{r.ra("BatchNormalization",d,{epsilon:m,momentum:b,spatial:!!O,trainingMode:!!x,format:L?"NHWC":"NCHW"})},922446:(d,m,b,x,O,L)=>{r.ra("BatchNormalization",d,{epsilon:m,momentum:b,spatial:!!O,trainingMode:!!x,format:L?"NHWC":"NCHW"})},922615:(d,m,b,x,O,L,H,ue,Y)=>{r.ra("Attention",d,{numHeads:m,isUnidirectional:b,maskFilterValue:x,scale:O,doRotary:L,qkvHiddenSizes:H?Array.from(M.subarray(Number(ue)>>>0,Number(ue)+H>>>0)):[],pastPresentShareBuffer:!!Y})},922887:d=>{r.ra("Gelu",d,void 0)},922939:(d,m,b,x,O,L)=>{r.ra("MultiHeadAttention",d,{numHeads:m,isUnidirectional:b,maskFilterValue:x,scale:O,doRotary:L})},923098:d=>{r.ra("BiasAdd",d,void 0)},923153:d=>{r.ra("BiasSplitGelu",d,void 0)},923214:(d,m)=>{r.ra("SkipLayerNormalization",d,{epsilon:m})},923295:(d,m,b,x,O,L,H,ue,Y,ne,X,ce,ge)=>{r.ra("Conv",d,{format:Y?"NHWC":"NCHW",auto_pad:m,dilations:[b],group:x,kernel_shape:[O],pads:L?Array.from(M.subarray(H>>>0,H+L>>>0)):[],strides:[ue],w_is_const:()=>!!K[ne>>>0],activation:De(X),activation_params:ce?Array.from(xe.subarray(ge>>>0,ge+ce>>>0)):[]})},923676:(d,m,b,x,O,L,H,ue,Y,ne,X,ce,ge,R,oe,he)=>{r.ra("Conv",d,{format:ce?"NHWC":"NCHW",auto_pad:m,dilations:[b,x],group:O,kernel_shape:[L,H],pads:ue?Array.from(M.subarray(Y>>>0,Y+ue>>>0)):[],strides:[ne,X],w_is_const:()=>!!K[ge>>>0],activation:De(R),activation_params:oe?Array.from(xe.subarray(he>>>0,he+oe>>>0)):[]})},924078:d=>{r.Ra(d)},924112:(d,m)=>r.Sa(d,m,r.Da.Ta,r.Da.errors),924224:d=>r.Oa(d),924257:d=>r.Qa(d),924289:(d,m,b)=>{r.Ja(d,m,b,!0)},924328:(d,m,b)=>{r.Ja(d,m,b)}};function Qe(d){this.name="ExitStatus",this.message=`Program terminated with exit(${d})`,this.status=d}var Ot=d=>{for(;0<d.length;)d.shift()(r)};function kt(d){this.Ha=d-24,this.Ma=function(m){Z[this.Ha+4>>2>>>0]=m},this.La=function(m){Z[this.Ha+8>>2>>>0]=m},this.Ya=function(m,b){this.Ka(),this.Ma(m),this.La(b)},this.Ka=function(){Z[this.Ha+16>>2>>>0]=0}}var Xt=0,Ir=0,tt=typeof TextDecoder<"u"?new TextDecoder("utf8"):void 0,Qt=(d,m,b)=>{m>>>=0;var x=m+b;for(b=m;d[b]&&!(b>=x);)++b;if(16<b-m&&d.buffer&&tt)return tt.decode(d.subarray(m,b));for(x="";m<b;){var O=d[m++];if(O&128){var L=d[m++]&63;if((O&224)==192)x+=String.fromCharCode((O&31)<<6|L);else{var H=d[m++]&63;O=(O&240)==224?(O&15)<<12|L<<6|H:(O&7)<<18|L<<12|H<<6|d[m++]&63,65536>O?x+=String.fromCharCode(O):(O-=65536,x+=String.fromCharCode(55296|O>>10,56320|O&1023))}}else x+=String.fromCharCode(O)}return x},De=(d,m)=>(d>>>=0)?Qt(ee,d,m):"",Ut=d=>{for(var m=0,b=0;b<d.length;++b){var x=d.charCodeAt(b);127>=x?m++:2047>=x?m+=2:55296<=x&&57343>=x?(m+=4,++b):m+=3}return m},Jt=(d,m,b,x)=>{if(b>>>=0,!(0<x))return 0;var O=b;x=b+x-1;for(var L=0;L<d.length;++L){var H=d.charCodeAt(L);if(55296<=H&&57343>=H){var ue=d.charCodeAt(++L);H=65536+((H&1023)<<10)|ue&1023}if(127>=H){if(b>=x)break;m[b++>>>0]=H}else{if(2047>=H){if(b+1>=x)break;m[b++>>>0]=192|H>>6}else{if(65535>=H){if(b+2>=x)break;m[b++>>>0]=224|H>>12}else{if(b+3>=x)break;m[b++>>>0]=240|H>>18,m[b++>>>0]=128|H>>12&63}m[b++>>>0]=128|H>>6&63}m[b++>>>0]=128|H&63}}return m[b>>>0]=0,b-O},gt=d=>d%4===0&&(d%100!==0||d%400===0),Cr=[0,31,60,91,121,152,182,213,244,274,305,335],yt=[0,31,59,90,120,151,181,212,243,273,304,334],Ht=d=>{var m=Ut(d)+1,b=qt(m);return b&&Jt(d,ee,b,m),b},xt=[],Lt=(d,m)=>{xt.length=0;var b;for(m>>=2;b=ee[d++>>>0];)m+=b!=105&m,xt.push(b==105?M[m>>>0]:re[m++>>>1]),++m;return xt},Gt={},er=()=>{if(!Ft){var d={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:(typeof navigator=="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:u||"./this.program"},m;for(m in Gt)Gt[m]===void 0?delete d[m]:d[m]=Gt[m];var b=[];for(m in d)b.push(`${m}=${d[m]}`);Ft=b}return Ft},Ft,_r=[null,[],[]],He=[31,29,31,30,31,30,31,31,30,31,30,31],tr=[31,28,31,30,31,30,31,31,30,31,30,31];function rr(d){var m=Array(Ut(d)+1);return Jt(d,m,0,m.length),m}function se(d,m,b,x){function O(R,oe,he){for(R=typeof R=="number"?R.toString():R||"";R.length<oe;)R=he[0]+R;return R}function L(R,oe){return O(R,oe,"0")}function H(R,oe){function he(fr){return 0>fr?-1:0<fr?1:0}var wt;return(wt=he(R.getFullYear()-oe.getFullYear()))===0&&(wt=he(R.getMonth()-oe.getMonth()))===0&&(wt=he(R.getDate()-oe.getDate())),wt}function ue(R){switch(R.getDay()){case 0:return new Date(R.getFullYear()-1,11,29);case 1:return R;case 2:return new Date(R.getFullYear(),0,3);case 3:return new Date(R.getFullYear(),0,2);case 4:return new Date(R.getFullYear(),0,1);case 5:return new Date(R.getFullYear()-1,11,31);case 6:return new Date(R.getFullYear()-1,11,30)}}function Y(R){var oe=R.Ba;for(R=new Date(new Date(R.Ca+1900,0,1).getTime());0<oe;){var he=R.getMonth(),wt=(gt(R.getFullYear())?He:tr)[he];if(oe>wt-R.getDate())oe-=wt-R.getDate()+1,R.setDate(1),11>he?R.setMonth(he+1):(R.setMonth(0),R.setFullYear(R.getFullYear()+1));else{R.setDate(R.getDate()+oe);break}}return he=new Date(R.getFullYear()+1,0,4),oe=ue(new Date(R.getFullYear(),0,4)),he=ue(he),0>=H(oe,R)?0>=H(he,R)?R.getFullYear()+1:R.getFullYear():R.getFullYear()-1}d>>>=0,m>>>=0,b>>>=0,x>>>=0;var ne=M[x+40>>2>>>0];x={Wa:M[x>>2>>>0],Va:M[x+4>>2>>>0],Ea:M[x+8>>2>>>0],Ia:M[x+12>>2>>>0],Fa:M[x+16>>2>>>0],Ca:M[x+20>>2>>>0],wa:M[x+24>>2>>>0],Ba:M[x+28>>2>>>0],$a:M[x+32>>2>>>0],Ua:M[x+36>>2>>>0],Xa:ne?De(ne):""},b=De(b),ne={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var X in ne)b=b.replace(new RegExp(X,"g"),ne[X]);var ce="Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),ge="January February March April May June July August September October November December".split(" ");ne={"%a":R=>ce[R.wa].substring(0,3),"%A":R=>ce[R.wa],"%b":R=>ge[R.Fa].substring(0,3),"%B":R=>ge[R.Fa],"%C":R=>L((R.Ca+1900)/100|0,2),"%d":R=>L(R.Ia,2),"%e":R=>O(R.Ia,2," "),"%g":R=>Y(R).toString().substring(2),"%G":R=>Y(R),"%H":R=>L(R.Ea,2),"%I":R=>(R=R.Ea,R==0?R=12:12<R&&(R-=12),L(R,2)),"%j":R=>{for(var oe=0,he=0;he<=R.Fa-1;oe+=(gt(R.Ca+1900)?He:tr)[he++]);return L(R.Ia+oe,3)},"%m":R=>L(R.Fa+1,2),"%M":R=>L(R.Va,2),"%n":()=>`
`,"%p":R=>0<=R.Ea&&12>R.Ea?"AM":"PM","%S":R=>L(R.Wa,2),"%t":()=>"	","%u":R=>R.wa||7,"%U":R=>L(Math.floor((R.Ba+7-R.wa)/7),2),"%V":R=>{var oe=Math.floor((R.Ba+7-(R.wa+6)%7)/7);if(2>=(R.wa+371-R.Ba-2)%7&&oe++,oe)oe==53&&(he=(R.wa+371-R.Ba)%7,he==4||he==3&&gt(R.Ca)||(oe=1));else{oe=52;var he=(R.wa+7-R.Ba-1)%7;(he==4||he==5&&gt(R.Ca%400-1))&&oe++}return L(oe,2)},"%w":R=>R.wa,"%W":R=>L(Math.floor((R.Ba+7-(R.wa+6)%7)/7),2),"%y":R=>(R.Ca+1900).toString().substring(2),"%Y":R=>R.Ca+1900,"%z":R=>{R=R.Ua;var oe=0<=R;return R=Math.abs(R)/60,(oe?"+":"-")+("0000"+(R/60*100+R%60)).slice(-4)},"%Z":R=>R.Xa,"%%":()=>"%"},b=b.replace(/%%/g,"\0\0");for(X in ne)b.includes(X)&&(b=b.replace(new RegExp(X,"g"),ne[X](x)));return b=b.replace(/\0\0/g,"%"),X=rr(b),X.length>m?0:(K.set(X,d>>>0),X.length-1)}function bt(d){try{d()}catch(m){qe(m)}}function Ar(d){var m={},b;for(b in d)(function(x){var O=d[x];m[x]=typeof O=="function"?function(){Rt.push(x);try{return O.apply(null,arguments)}finally{z||(Rt.pop()===x||qe(),Je&&ut===1&&Rt.length===0&&(ut=0,bt(cr),typeof Fibers<"u"&&Fibers.ab()))}}:O})(b);return m}var ut=0,Je=null,Er=0,Rt=[],nr={},ar={},Tr=0,Pt=null,Or=[];function kr(){return new Promise((d,m)=>{Pt={resolve:d,reject:m}})}function Rr(){var d=qt(65548),m=d+12;Z[d>>2>>>0]=m,Z[d+4>>2>>>0]=m+65536,m=Rt[0];var b=nr[m];return b===void 0&&(b=Tr++,nr[m]=b,ar[b]=m),M[d+8>>2>>>0]=b,d}function Pr(d){if(!z){if(ut===0){var m=!1,b=!1;d((x=0)=>{if(!z&&(Er=x,m=!0,b)){ut=2,bt(()=>jt(Je)),typeof Browser<"u"&&Browser.Ga.Na&&Browser.Ga.resume(),x=!1;try{var O=(0,T[ar[M[Je+8>>2>>>0]]])()}catch(ue){O=ue,x=!0}var L=!1;if(!Je){var H=Pt;H&&(Pt=null,(x?H.reject:H.resolve)(O),L=!0)}if(x&&!L)throw O}}),b=!0,m||(ut=1,Je=Rr(),typeof Browser<"u"&&Browser.Ga.Na&&Browser.Ga.pause(),bt(()=>dr(Je)))}else ut===2?(ut=0,bt(Bt),or(Je),Je=null,Or.forEach(x=>{if(!z)try{if(x(),!A)try{W=W=x=W,A||(r.onExit&&r.onExit(x),z=!0),l(x,new Qe(x))}catch(O){O instanceof Qe||O=="unwind"||l(1,O)}}catch(O){O instanceof Qe||O=="unwind"||l(1,O)}})):qe(`invalid state: ${ut}`);return Er}}function Br(d){return Pr(m=>{d().then(m)})}var Mr={n:function(d,m,b){return Br(async()=>{await r.Pa(d,m,b)})},a:function(d,m,b){throw d>>>=0,new kt(d).Ya(m>>>0,b>>>0),Xt=d,Ir++,Xt},g:function(){return 0},J:function(){},z:function(){},B:function(){},L:function(){return 0},H:function(){},C:function(){},G:function(){},l:function(){},A:function(){},x:function(){},I:function(){},y:function(){},m:()=>!0,q:function(d,m,b){d=m+2097152>>>0<4194305-!!d?(d>>>0)+4294967296*m:NaN,b>>>=0,d=new Date(1e3*d),M[b>>2>>>0]=d.getUTCSeconds(),M[b+4>>2>>>0]=d.getUTCMinutes(),M[b+8>>2>>>0]=d.getUTCHours(),M[b+12>>2>>>0]=d.getUTCDate(),M[b+16>>2>>>0]=d.getUTCMonth(),M[b+20>>2>>>0]=d.getUTCFullYear()-1900,M[b+24>>2>>>0]=d.getUTCDay(),M[b+28>>2>>>0]=(d.getTime()-Date.UTC(d.getUTCFullYear(),0,1,0,0,0,0))/864e5|0},r:function(d,m,b){d=m+2097152>>>0<4194305-!!d?(d>>>0)+4294967296*m:NaN,b>>>=0,d=new Date(1e3*d),M[b>>2>>>0]=d.getSeconds(),M[b+4>>2>>>0]=d.getMinutes(),M[b+8>>2>>>0]=d.getHours(),M[b+12>>2>>>0]=d.getDate(),M[b+16>>2>>>0]=d.getMonth(),M[b+20>>2>>>0]=d.getFullYear()-1900,M[b+24>>2>>>0]=d.getDay(),M[b+28>>2>>>0]=(gt(d.getFullYear())?Cr:yt)[d.getMonth()]+d.getDate()-1|0,M[b+36>>2>>>0]=-(60*d.getTimezoneOffset()),m=new Date(d.getFullYear(),6,1).getTimezoneOffset();var x=new Date(d.getFullYear(),0,1).getTimezoneOffset();M[b+32>>2>>>0]=(m!=x&&d.getTimezoneOffset()==Math.min(x,m))|0},s:function(d){d>>>=0;var m=new Date(M[d+20>>2>>>0]+1900,M[d+16>>2>>>0],M[d+12>>2>>>0],M[d+8>>2>>>0],M[d+4>>2>>>0],M[d>>2>>>0],0),b=M[d+32>>2>>>0],x=m.getTimezoneOffset(),O=new Date(m.getFullYear(),6,1).getTimezoneOffset(),L=new Date(m.getFullYear(),0,1).getTimezoneOffset(),H=Math.min(L,O);return 0>b?M[d+32>>2>>>0]=+(O!=L&&H==x):0<b!=(H==x)&&(O=Math.max(L,O),m.setTime(m.getTime()+6e4*((0<b?H:O)-x))),M[d+24>>2>>>0]=m.getDay(),M[d+28>>2>>>0]=(gt(m.getFullYear())?Cr:yt)[m.getMonth()]+m.getDate()-1|0,M[d>>2>>>0]=m.getSeconds(),M[d+4>>2>>>0]=m.getMinutes(),M[d+8>>2>>>0]=m.getHours(),M[d+12>>2>>>0]=m.getDate(),M[d+16>>2>>>0]=m.getMonth(),M[d+20>>2>>>0]=m.getYear(),d=m.getTime()/1e3,ir((je=d,1<=+Math.abs(je)?0<je?+Math.floor(je/4294967296)>>>0:~~+Math.ceil((je-+(~~je>>>0))/4294967296)>>>0:0)),d>>>0},o:function(){return-52},p:function(){},v:function(d,m,b){function x(Y){return(Y=Y.toTimeString().match(/\(([A-Za-z ]+)\)$/))?Y[1]:"GMT"}b>>>=0;var O=new Date().getFullYear(),L=new Date(O,0,1),H=new Date(O,6,1);O=L.getTimezoneOffset();var ue=H.getTimezoneOffset();Z[d>>>0>>2>>>0]=60*Math.max(O,ue),M[m>>>0>>2>>>0]=+(O!=ue),d=x(L),m=x(H),d=Ht(d),m=Ht(m),ue<O?(Z[b>>2>>>0]=d,Z[b+4>>2>>>0]=m):(Z[b>>2>>>0]=m,Z[b+4>>2>>>0]=d)},e:()=>{qe("")},b:function(d,m,b){return d>>>=0,m=Lt(m>>>0,b>>>0),st[d].apply(null,m)},i:function(d,m,b){return d>>>=0,m=Lt(m>>>0,b>>>0),st[d].apply(null,m)},h:function(){return Date.now()},w:function(){return 4294901760},c:()=>performance.now(),K:function(d,m,b){return m>>>=0,ee.copyWithin(d>>>0>>>0,m>>>0,m+(b>>>0)>>>0)},u:function(d){d>>>=0;var m=ee.length;if(4294901760<d)return!1;for(var b=1;4>=b;b*=2){var x=m*(1+.2/b);x=Math.min(x,d+100663296);var O=Math;x=Math.max(d,x);e:{O=O.min.call(O,4294901760,x+(65536-x%65536)%65536)-B.buffer.byteLength+65535>>>16;try{B.grow(O),ve();var L=1;break e}catch{}L=void 0}if(L)return!0}return!1},D:function(d,m){d>>>=0,m>>>=0;var b=0;return er().forEach(function(x,O){var L=m+b;for(O=Z[d+4*O>>2>>>0]=L,L=0;L<x.length;++L)K[O++>>0>>>0]=x.charCodeAt(L);K[O>>0>>>0]=0,b+=x.length+1}),0},E:function(d,m){d>>>=0,m>>>=0;var b=er();Z[d>>2>>>0]=b.length;var x=0;return b.forEach(function(O){x+=O.length+1}),Z[m>>2>>>0]=x,0},f:()=>52,k:function(){return 52},t:function(){return 70},j:function(d,m,b,x){m>>>=0,b>>>=0,x>>>=0;for(var O=0,L=0;L<b;L++){var H=Z[m>>2>>>0],ue=Z[m+4>>2>>>0];m+=8;for(var Y=0;Y<ue;Y++){var ne=ee[H+Y>>>0],X=_r[d];ne===0||ne===10?((d===1?_:I)(Qt(X,0)),X.length=0):X.push(ne)}O+=ue}return Z[x>>2>>>0]=O,0},F:se,d:function(d,m,b,x){return se(d>>>0,m>>>0,b>>>0,x>>>0)}};(function(){function d(b){if(b=b.exports,b=Ar(b),T=b=It(b),B=T.M,ve(),$e.unshift(T.N),me--,r.monitorRunDependencies&&r.monitorRunDependencies(me),me==0&&(it!==null&&(clearInterval(it),it=null),Ge)){var x=Ge;Ge=null,x()}return b}var m={a:Mr};if(me++,r.monitorRunDependencies&&r.monitorRunDependencies(me),r.instantiateWasm)try{return r.instantiateWasm(m,d)}catch(b){I("Module.instantiateWasm callback failed with error: "+b),n(b)}return Ve(m,function(b){d(b.instance)}).catch(n),{}})(),r._OrtInit=(d,m)=>(r._OrtInit=T.O)(d,m),r._OrtGetLastError=(d,m)=>(r._OrtGetLastError=T.P)(d,m),r._OrtCreateSessionOptions=(d,m,b,x,O,L,H,ue,Y,ne)=>(r._OrtCreateSessionOptions=T.Q)(d,m,b,x,O,L,H,ue,Y,ne),r._OrtAppendExecutionProvider=(d,m)=>(r._OrtAppendExecutionProvider=T.R)(d,m),r._OrtAddFreeDimensionOverride=(d,m,b)=>(r._OrtAddFreeDimensionOverride=T.S)(d,m,b),r._OrtAddSessionConfigEntry=(d,m,b)=>(r._OrtAddSessionConfigEntry=T.T)(d,m,b),r._OrtReleaseSessionOptions=d=>(r._OrtReleaseSessionOptions=T.U)(d),r._OrtCreateSession=(d,m,b)=>(r._OrtCreateSession=T.V)(d,m,b),r._OrtReleaseSession=d=>(r._OrtReleaseSession=T.W)(d),r._OrtGetInputOutputCount=(d,m,b)=>(r._OrtGetInputOutputCount=T.X)(d,m,b),r._OrtGetInputName=(d,m)=>(r._OrtGetInputName=T.Y)(d,m),r._OrtGetOutputName=(d,m)=>(r._OrtGetOutputName=T.Z)(d,m),r._OrtFree=d=>(r._OrtFree=T._)(d),r._OrtCreateTensor=(d,m,b,x,O,L)=>(r._OrtCreateTensor=T.$)(d,m,b,x,O,L),r._OrtGetTensorData=(d,m,b,x,O)=>(r._OrtGetTensorData=T.aa)(d,m,b,x,O),r._OrtReleaseTensor=d=>(r._OrtReleaseTensor=T.ba)(d),r._OrtCreateRunOptions=(d,m,b,x)=>(r._OrtCreateRunOptions=T.ca)(d,m,b,x),r._OrtAddRunConfigEntry=(d,m,b)=>(r._OrtAddRunConfigEntry=T.da)(d,m,b),r._OrtReleaseRunOptions=d=>(r._OrtReleaseRunOptions=T.ea)(d),r._OrtCreateBinding=d=>(r._OrtCreateBinding=T.fa)(d),r._OrtBindInput=(d,m,b)=>(r._OrtBindInput=T.ga)(d,m,b),r._OrtBindOutput=(d,m,b,x)=>(r._OrtBindOutput=T.ha)(d,m,b,x),r._OrtClearBoundOutputs=d=>(r._OrtClearBoundOutputs=T.ia)(d),r._OrtReleaseBinding=d=>(r._OrtReleaseBinding=T.ja)(d),r._OrtRunWithBinding=(d,m,b,x,O)=>(r._OrtRunWithBinding=T.ka)(d,m,b,x,O),r._OrtRun=(d,m,b,x,O,L,H,ue)=>(r._OrtRun=T.la)(d,m,b,x,O,L,H,ue),r._OrtEndProfiling=d=>(r._OrtEndProfiling=T.ma)(d),r._JsepOutput=(d,m,b)=>(r._JsepOutput=T.na)(d,m,b),r._JsepGetNodeName=d=>(r._JsepGetNodeName=T.oa)(d);var qt=r._malloc=d=>(qt=r._malloc=T.pa)(d),or=r._free=d=>(or=r._free=T.qa)(d),ir=d=>(ir=T.sa)(d),sr=()=>(sr=T.ta)(),ur=d=>(ur=T.ua)(d),lr=d=>(lr=T.va)(d),dr=d=>(dr=T.xa)(d),cr=()=>(cr=T.ya)(),jt=d=>(jt=T.za)(d),Bt=()=>(Bt=T.Aa)();r.___start_em_js=924361,r.___stop_em_js=924522;function It(d){d=Object.assign({},d);var m=x=>()=>x()>>>0,b=x=>O=>x(O)>>>0;return d.__errno_location=m(d.__errno_location),d.malloc=b(d.malloc),d.stackSave=m(d.stackSave),d.stackAlloc=b(d.stackAlloc),d}r.stackAlloc=lr,r.stackSave=sr,r.stackRestore=ur,r.UTF8ToString=De,r.stringToUTF8=(d,m,b)=>Jt(d,ee,m,b),r.lengthBytesUTF8=Ut;var Mt;Ge=function d(){Mt||pr(),Mt||(Ge=d)};function pr(){function d(){if(!Mt&&(Mt=!0,r.calledRun=!0,!z)){if(Ot($e),a(r),r.onRuntimeInitialized&&r.onRuntimeInitialized(),r.postRun)for(typeof r.postRun=="function"&&(r.postRun=[r.postRun]);r.postRun.length;){var m=r.postRun.shift();Ce.unshift(m)}Ot(Ce)}}if(!(0<me)){if(r.preRun)for(typeof r.preRun=="function"&&(r.preRun=[r.preRun]);r.preRun.length;)_e();Ot(j),0<me||(r.setStatus?(r.setStatus("Running..."),setTimeout(function(){setTimeout(function(){r.setStatus("")},1),d()},1)):d())}}if(r.preInit)for(typeof r.preInit=="function"&&(r.preInit=[r.preInit]);0<r.preInit.length;)r.preInit.pop()();return pr(),t.ready}})();typeof Io=="object"&&typeof Vn=="object"?Vn.exports=xo:typeof define=="function"&&define.amd&&define([],()=>xo)});var _o=Kt(()=>{});var Ao=Kt(()=>{});var Eo={};zt(Eo,{cpus:()=>Zl});var Zl,To=F(()=>{Zl=void 0});var Ro=Kt((ko,Nn)=>{"use strict";var Oo=(()=>{var e=typeof document<"u"&&document.currentScript?document.currentScript.src:void 0;return typeof __filename<"u"&&(e=e||__filename),function(t={}){function r(){return ve.buffer!=me.buffer&&fe(),me}function a(){return ve.buffer!=me.buffer&&fe(),it}function n(){return ve.buffer!=me.buffer&&fe(),Ge}function s(){return ve.buffer!=me.buffer&&fe(),qe}function u(){return ve.buffer!=me.buffer&&fe(),G}function l(){return ve.buffer!=me.buffer&&fe(),le}var o=t,c,f;o.ready=new Promise((i,p)=>{c=i,f=p}),o.jsepInit=(i,p,g,S,E,D,N,ae)=>{o.Qb=i,o.wb=p,o.yb=g,o.jb=S,o.xb=E,o.Ea=D,o.zb=N,o.Ab=ae,p=(Q,te,ie)=>(...ye)=>{let Ie=lt,P=te?.();ye=Q(...ye);let de=te?.();return P!==de&&(Q=de,ie(P),te=ie=null),lt!=Ie?Ml():ye},g=Q=>async(...te)=>{try{if(o.bb)throw Error("Session already started");let ie=o.bb={Fb:te[0],errors:[]},ye=await Q(...te);if(o.bb!==ie)throw Error("Session mismatch");i.flush();let Ie=ie.errors;if(0<Ie.length){let P=await Promise.all(Ie);if(P=P.filter(de=>de),0<P.length)throw Error(P.join(`
`))}return ye}finally{o.bb=null}},o._OrtRun=g(p(o._OrtRun,()=>o._OrtRun,Q=>o._OrtRun=Q)),o._OrtRunWithBinding=g(p(o._OrtRunWithBinding,()=>o._OrtRunWithBinding,Q=>o._OrtRunWithBinding=Q)),o._OrtBindInput=p(o._OrtBindInput,()=>o._OrtBindInput,Q=>o._OrtBindInput=Q),o.jsepRegisterBuffer=(Q,te,ie,ye)=>i.registerBuffer(Q,te,ie,ye),o.jsepUnregisterBuffers=Q=>{i.unregisterBuffers(Q)},o.jsepGetBuffer=Q=>i.getBuffer(Q),o.jsepCreateDownloader=(Q,te,ie)=>i.createDownloader(Q,te,ie)};var y=Object.assign({},o),h="./this.program",w=(i,p)=>{throw p},v=typeof window=="object",$=typeof importScripts=="function",C=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string",_=o.ENVIRONMENT_IS_PTHREAD||!1,I="";function k(i){return o.locateFile?o.locateFile(i,I):I+i}var A,B,T;if(C){var z=(Dn(),_t(Mn)),W=(Wn(),_t(zn));I=$?W.dirname(I)+"/":__dirname+"/",A=(p,g)=>(p=p.startsWith("file://")?new URL(p):W.normalize(p),z.readFileSync(p,g?void 0:"utf8")),T=p=>(p=A(p,!0),p.buffer||(p=new Uint8Array(p)),p),B=(p,g,S,E=!0)=>{p=p.startsWith("file://")?new URL(p):W.normalize(p),z.readFile(p,E?void 0:"utf8",(D,N)=>{D?S(D):g(E?N.buffer:N)})},!o.thisProgram&&1<process.argv.length&&(h=process.argv[1].replace(/\\/g,"/")),process.argv.slice(2),w=(p,g)=>{throw process.exitCode=p,g},o.inspect=()=>"[Emscripten Module object]";let i;try{i=_o()}catch(p){throw console.error('The "worker_threads" module is not supported in this node.js build - perhaps a newer version is needed?'),p}global.Worker=i.Worker}else(v||$)&&($?I=self.location.href:typeof document<"u"&&document.currentScript&&(I=document.currentScript.src),typeof e<"u"&&e&&(I=e),I.indexOf("blob:")!==0?I=I.substr(0,I.replace(/[?#].*/,"").lastIndexOf("/")+1):I="",C||(A=i=>{var p=new XMLHttpRequest;return p.open("GET",i,!1),p.send(null),p.responseText},$&&(T=i=>{var p=new XMLHttpRequest;return p.open("GET",i,!1),p.responseType="arraybuffer",p.send(null),new Uint8Array(p.response)}),B=(i,p,g)=>{var S=new XMLHttpRequest;S.open("GET",i,!0),S.responseType="arraybuffer",S.onload=()=>{S.status==200||S.status==0&&S.response?p(S.response):g()},S.onerror=g,S.send(null)}));C&&typeof performance>"u"&&(global.performance=Ao().performance);var K=console.log.bind(console),ee=console.error.bind(console);C&&(K=(...i)=>z.writeSync(1,i.join(" ")+`
`),ee=(...i)=>z.writeSync(2,i.join(" ")+`
`));var M=o.print||K,Z=o.printErr||ee;Object.assign(o,y),y=null,o.thisProgram&&(h=o.thisProgram),o.quit&&(w=o.quit);var xe;o.wasmBinary&&(xe=o.wasmBinary);var re=o.noExitRuntime||!0;typeof WebAssembly!="object"&&tt("no native wasm support detected");var ve,j,$e,Ce=!1,_e,me,it,Ge,qe,G,le;function fe(){var i=ve.buffer;o.HEAP8=me=new Int8Array(i),o.HEAP16=new Int16Array(i),o.HEAP32=Ge=new Int32Array(i),o.HEAPU8=it=new Uint8Array(i),o.HEAPU16=new Uint16Array(i),o.HEAPU32=qe=new Uint32Array(i),o.HEAPF32=G=new Float32Array(i),o.HEAPF64=le=new Float64Array(i)}var Ue=o.INITIAL_MEMORY||16777216;if(5242880<=Ue||tt("INITIAL_MEMORY should be larger than STACK_SIZE, was "+Ue+"! (STACK_SIZE=5242880)"),_)ve=o.wasmMemory;else if(o.wasmMemory)ve=o.wasmMemory;else if(ve=new WebAssembly.Memory({initial:Ue/65536,maximum:65536,shared:!0}),!(ve.buffer instanceof SharedArrayBuffer))throw Z("requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag"),C&&Z("(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and/or recent version)"),Error("bad memory");fe(),Ue=ve.buffer.byteLength;var Ye=[],Be=[],Ve=[],je=0;function st(){return re||0<je}var Qe=0,Ot=null,kt=null;function Xt(){Qe++,o.monitorRunDependencies&&o.monitorRunDependencies(Qe)}function Ir(){if(Qe--,o.monitorRunDependencies&&o.monitorRunDependencies(Qe),Qe==0&&(Ot!==null&&(clearInterval(Ot),Ot=null),kt)){var i=kt;kt=null,i()}}function tt(i){throw o.onAbort&&o.onAbort(i),i="Aborted("+i+")",Z(i),Ce=!0,_e=1,i=new WebAssembly.RuntimeError(i+". Build with -sASSERTIONS for more info."),f(i),i}function Qt(i){return i.startsWith("data:application/octet-stream;base64,")}var De;De="ort-wasm-simd-threaded.wasm",Qt(De)||(De=k(De));function Ut(i){if(i==De&&xe)return new Uint8Array(xe);if(T)return T(i);throw"both async and sync fetching of the wasm failed"}function Jt(i){if(!xe&&(v||$)){if(typeof fetch=="function"&&!i.startsWith("file://"))return fetch(i,{credentials:"same-origin"}).then(p=>{if(!p.ok)throw"failed to load wasm binary file at '"+i+"'";return p.arrayBuffer()}).catch(()=>Ut(i));if(B)return new Promise((p,g)=>{B(i,S=>p(new Uint8Array(S)),g)})}return Promise.resolve().then(()=>Ut(i))}function gt(i,p,g){return Jt(i).then(S=>WebAssembly.instantiate(S,p)).then(S=>S).then(g,S=>{Z("failed to asynchronously prepare wasm: "+S),tt(S)})}function Cr(i,p){var g=De;return xe||typeof WebAssembly.instantiateStreaming!="function"||Qt(g)||g.startsWith("file://")||C||typeof fetch!="function"?gt(g,i,p):fetch(g,{credentials:"same-origin"}).then(S=>WebAssembly.instantiateStreaming(S,i).then(p,function(E){return Z("wasm streaming compile failed: "+E),Z("falling back to ArrayBuffer instantiation"),gt(g,i,p)}))}var yt,Ht={1428784:i=>{o.Ea("Abs",i,void 0)},1428835:i=>{o.Ea("Neg",i,void 0)},1428886:i=>{o.Ea("Floor",i,void 0)},1428939:i=>{o.Ea("Ceil",i,void 0)},1428991:i=>{o.Ea("Reciprocal",i,void 0)},1429049:i=>{o.Ea("Sqrt",i,void 0)},1429101:i=>{o.Ea("Exp",i,void 0)},1429152:i=>{o.Ea("Erf",i,void 0)},1429203:i=>{o.Ea("Sigmoid",i,void 0)},1429258:i=>{o.Ea("Log",i,void 0)},1429309:i=>{o.Ea("Sin",i,void 0)},1429360:i=>{o.Ea("Cos",i,void 0)},1429411:i=>{o.Ea("Tan",i,void 0)},1429462:i=>{o.Ea("Asin",i,void 0)},1429514:i=>{o.Ea("Acos",i,void 0)},1429566:i=>{o.Ea("Atan",i,void 0)},1429618:i=>{o.Ea("Sinh",i,void 0)},1429670:i=>{o.Ea("Cosh",i,void 0)},1429722:i=>{o.Ea("Asinh",i,void 0)},1429775:i=>{o.Ea("Acosh",i,void 0)},1429828:i=>{o.Ea("Atanh",i,void 0)},1429881:i=>{o.Ea("Tanh",i,void 0)},1429933:i=>{o.Ea("Not",i,void 0)},1429984:(i,p,g)=>{o.Ea("Clip",i,{min:p,max:g})},1430053:i=>{o.Ea("Clip",i,void 0)},1430105:(i,p)=>{o.Ea("Elu",i,{alpha:p})},1430163:i=>{o.Ea("Relu",i,void 0)},1430215:(i,p)=>{o.Ea("LeakyRelu",i,{alpha:p})},1430279:(i,p)=>{o.Ea("ThresholdedRelu",i,{alpha:p})},1430349:i=>{o.zb(i)},1430383:(i,p)=>o.Ab(i,p,o.bb.Fb,o.bb.errors),1430495:(i,p)=>{o.Ea("Cast",i,{to:p})},1430553:i=>{o.Ea("Add",i,void 0)},1430604:i=>{o.Ea("Sub",i,void 0)},1430655:i=>{o.Ea("Mul",i,void 0)},1430706:i=>{o.Ea("Div",i,void 0)},1430757:i=>{o.Ea("Pow",i,void 0)},1430808:i=>{o.Ea("Equal",i,void 0)},1430861:i=>{o.Ea("Greater",i,void 0)},1430916:i=>{o.Ea("GreaterOrEqual",i,void 0)},1430978:i=>{o.Ea("Less",i,void 0)},1431030:i=>{o.Ea("LessOrEqual",i,void 0)},1431089:(i,p,g,S,E)=>{o.Ea("ReduceMean",i,{keepDims:!!p,noopWithEmptyAxes:!!g,axes:S?Array.from(n().subarray(E>>>0,E+S>>>0)):[]})},1431253:(i,p,g,S,E)=>{o.Ea("ReduceMax",i,{keepDims:!!p,noopWithEmptyAxes:!!g,axes:S?Array.from(n().subarray(E>>>0,E+S>>>0)):[]})},1431416:(i,p,g,S,E)=>{o.Ea("ReduceMin",i,{keepDims:!!p,noopWithEmptyAxes:!!g,axes:S?Array.from(n().subarray(E>>>0,E+S>>>0)):[]})},1431579:(i,p,g,S,E)=>{o.Ea("ReduceProd",i,{keepDims:!!p,noopWithEmptyAxes:!!g,axes:S?Array.from(n().subarray(E>>>0,E+S>>>0)):[]})},1431743:(i,p,g,S,E)=>{o.Ea("ReduceSum",i,{keepDims:!!p,noopWithEmptyAxes:!!g,axes:S?Array.from(n().subarray(E>>>0,E+S>>>0)):[]})},1431906:(i,p,g,S,E)=>{o.Ea("ReduceL1",i,{keepDims:!!p,noopWithEmptyAxes:!!g,axes:S?Array.from(n().subarray(E>>>0,E+S>>>0)):[]})},1432068:(i,p,g,S,E)=>{o.Ea("ReduceL2",i,{keepDims:!!p,noopWithEmptyAxes:!!g,axes:S?Array.from(n().subarray(E>>>0,E+S>>>0)):[]})},1432230:(i,p,g,S,E)=>{o.Ea("ReduceLogSum",i,{keepDims:!!p,noopWithEmptyAxes:!!g,axes:S?Array.from(n().subarray(E>>>0,E+S>>>0)):[]})},1432396:(i,p,g,S,E)=>{o.Ea("ReduceSumSquare",i,{keepDims:!!p,noopWithEmptyAxes:!!g,axes:S?Array.from(n().subarray(E>>>0,E+S>>>0)):[]})},1432565:(i,p,g,S,E)=>{o.Ea("ReduceLogSumExp",i,{keepDims:!!p,noopWithEmptyAxes:!!g,axes:S?Array.from(n().subarray(E>>>0,E+S>>>0)):[]})},1432734:i=>{o.Ea("Where",i,void 0)},1432787:(i,p,g)=>{o.Ea("Transpose",i,{perm:p?Array.from(n().subarray(g>>>0,g+p>>>0)):[]})},1432900:(i,p,g,S,E,D,N,ae,Q,te,ie,ye,Ie)=>{o.Ea("Conv",i,{format:Q?"NHWC":"NCHW",auto_pad:p,dilations:[g],group:S,kernel_shape:[E],pads:D?Array.from(n().subarray(N>>>0,N+D>>>0)):[],strides:[ae],w_is_const:()=>!!r()[te>>>0],activation:He(ie),activation_params:ye?Array.from(u().subarray(Ie>>>0,Ie+ye>>>0)):[]})},1433281:(i,p,g,S,E,D,N,ae,Q,te,ie,ye,Ie,P,de,Se)=>{o.Ea("Conv",i,{format:ye?"NHWC":"NCHW",auto_pad:p,dilations:[g,S],group:E,kernel_shape:[D,N],pads:ae?Array.from(n().subarray(Q>>>0,Q+ae>>>0)):[],strides:[te,ie],w_is_const:()=>!!r()[Ie>>>0],activation:He(P),activation_params:de?Array.from(u().subarray(Se>>>0,Se+de>>>0)):[]})},1433683:(i,p,g,S,E,D,N,ae,Q,te,ie,ye,Ie,P,de)=>{o.Ea("ConvTranspose",i,{format:Q?"NHWC":"NCHW",autoPad:p,dilations:[g],group:S,kernel_shape:[E],pads:[D,N],strides:[ae],wIsConst:()=>!!r()[te>>>0],outputPadding:ie?Array.from(n().subarray(ye>>>0,ye+ie>>>0)):[],outputShape:Ie?Array.from(n().subarray(P>>>0,P+Ie>>>0)):[],activation:He(de)})},1434097:(i,p,g,S,E,D,N,ae,Q,te,ie,ye,Ie,P)=>{o.Ea("ConvTranspose",i,{format:ae?"NHWC":"NCHW",autoPad:p,dilations:Array.from(n().subarray(g>>>0,g+2>>>0)),group:S,kernelShape:Array.from(n().subarray(E>>>0,E+2>>>0)),pads:Array.from(n().subarray(D>>>0,D+4>>>0)),strides:Array.from(n().subarray(N>>>0,N+2>>>0)),wIsConst:()=>!!r()[Q>>>0],outputPadding:0<te?Array.from(n().subarray(ie>>>0,ie+te>>>0)):[],outputShape:0<ye?Array.from(n().subarray(Ie>>>0,Ie+ye>>>0)):[],activation:He(P)})},1434654:(i,p,g,S,E,D,N,ae,Q,te,ie,ye,Ie,P,de)=>{o.Ea("ConvTranspose",i,{format:Q?"NHWC":"NCHW",autoPad:p,dilations:[g],group:S,kernel_shape:[E],pads:[D,N],strides:[ae],wIsConst:()=>!!r()[te>>>0],outputPadding:ie?Array.from(n().subarray(ye>>>0,ye+ie>>>0)):[],outputShape:Ie?Array.from(n().subarray(P>>>0,P+Ie>>>0)):[],activation:He(de)})},1435068:(i,p,g,S,E,D,N,ae,Q,te,ie,ye,Ie,P)=>{o.Ea("ConvTranspose",i,{format:ae?"NHWC":"NCHW",autoPad:p,dilations:Array.from(n().subarray(g>>>0,g+2>>>0)),group:S,kernelShape:Array.from(n().subarray(E>>>0,E+2>>>0)),pads:Array.from(n().subarray(D>>>0,D+4>>>0)),strides:Array.from(n().subarray(N>>>0,N+2>>>0)),wIsConst:()=>!!r()[Q>>>0],outputPadding:0<te?Array.from(n().subarray(ie>>>0,ie+te>>>0)):[],outputShape:0<ye?Array.from(n().subarray(Ie>>>0,Ie+ye>>>0)):[],activation:He(P)})},1435625:(i,p)=>{o.Ea("GlobalAveragePool",i,{format:p?"NHWC":"NCHW"})},1435716:(i,p,g,S,E,D,N,ae,Q,te,ie,ye,Ie,P,de,Se)=>{o.Ea("AveragePool",i,{format:Se?"NHWC":"NCHW",auto_pad:p,ceil_mode:g,count_include_pad:S,storage_order:E,dilations:[D,N],kernel_shape:[ae,Q],pads:[te,ie,ye,Ie],strides:[P,de]})},1436e3:(i,p)=>{o.Ea("GlobalAveragePool",i,{format:p?"NHWC":"NCHW"})},1436091:(i,p,g,S,E,D,N,ae,Q,te,ie,ye,Ie,P,de,Se)=>{o.Ea("AveragePool",i,{format:Se?"NHWC":"NCHW",auto_pad:p,ceil_mode:g,count_include_pad:S,storage_order:E,dilations:[D,N],kernel_shape:[ae,Q],pads:[te,ie,ye,Ie],strides:[P,de]})},1436375:(i,p)=>{o.Ea("GlobalMaxPool",i,{format:p?"NHWC":"NCHW"})},1436462:(i,p,g,S,E,D,N,ae,Q,te,ie,ye,Ie,P,de,Se)=>{o.Ea("MaxPool",i,{format:Se?"NHWC":"NCHW",auto_pad:p,ceil_mode:g,count_include_pad:S,storage_order:E,dilations:[D,N],kernel_shape:[ae,Q],pads:[te,ie,ye,Ie],strides:[P,de]})},1436742:(i,p)=>{o.Ea("GlobalMaxPool",i,{format:p?"NHWC":"NCHW"})},1436829:(i,p,g,S,E,D,N,ae,Q,te,ie,ye,Ie,P,de,Se)=>{o.Ea("MaxPool",i,{format:Se?"NHWC":"NCHW",auto_pad:p,ceil_mode:g,count_include_pad:S,storage_order:E,dilations:[D,N],kernel_shape:[ae,Q],pads:[te,ie,ye,Ie],strides:[P,de]})},1437109:(i,p,g,S,E)=>{o.Ea("Gemm",i,{alpha:p,beta:g,transA:S,transB:E})},1437213:i=>{o.Ea("MatMul",i,void 0)},1437267:(i,p,g,S)=>{o.Ea("ArgMax",i,{keepDims:!!p,selectLastIndex:!!g,axis:S})},1437375:(i,p,g,S)=>{o.Ea("ArgMin",i,{keepDims:!!p,selectLastIndex:!!g,axis:S})},1437483:(i,p)=>{o.Ea("Softmax",i,{axis:p})},1437546:(i,p)=>{o.Ea("Concat",i,{axis:p})},1437606:(i,p,g,S,E)=>{o.Ea("Split",i,{axis:p,numOutputs:g,splitSizes:S?Array.from(n().subarray(E>>>0,E+S>>>0)):[]})},1437751:i=>{o.Ea("Expand",i,void 0)},1437805:(i,p)=>{o.Ea("Gather",i,{axis:Number(p)})},1437876:(i,p)=>{o.Ea("GatherElements",i,{axis:Number(p)})},1437955:(i,p,g,S,E,D,N,ae,Q,te,ie)=>{o.Ea("Resize",i,{antialias:p,axes:g?Array.from(n().subarray(S>>>0,S+g>>>0)):[],coordinateTransformMode:He(E),cubicCoeffA:D,excludeOutside:N,extrapolationValue:ae,keepAspectRatioPolicy:He(Q),mode:He(te),nearestMode:He(ie)})},1438306:(i,p,g,S,E,D,N)=>{o.Ea("Slice",i,{starts:p?Array.from(n().subarray(g>>>0,g+p>>>0)):[],ends:S?Array.from(n().subarray(E>>>0,E+S>>>0)):[],axes:D?Array.from(n().subarray(N>>>0,N+D>>>0)):[]})},1438537:i=>{o.Ea("Tile",i,void 0)},1438589:(i,p,g)=>{o.Ea("LayerNormalization",i,{axis:Number(p),epsilon:Number(g)})},1438696:(i,p,g)=>{o.Ea("InstanceNormalization",i,{epsilon:p,format:g?"NHWC":"NCHW"})},1438810:(i,p,g)=>{o.Ea("InstanceNormalization",i,{epsilon:p,format:g?"NHWC":"NCHW"})},1438924:i=>{o.Ea("Range",i,void 0)},1438977:(i,p)=>{o.Ea("Einsum",i,{equation:He(p)})},1439058:(i,p,g,S,E)=>{o.Ea("Pad",i,{mode:p,value:g,pads:S?Array.from(n().subarray(E>>>0,E+S>>>0)):[]})},1439190:(i,p,g,S,E,D)=>{o.Ea("BatchNormalization",i,{epsilon:p,momentum:g,spatial:!!E,trainingMode:!!S,format:D?"NHWC":"NCHW"})},1439359:(i,p,g,S,E,D)=>{o.Ea("BatchNormalization",i,{epsilon:p,momentum:g,spatial:!!E,trainingMode:!!S,format:D?"NHWC":"NCHW"})},1439528:(i,p,g,S,E,D,N,ae,Q)=>{o.Ea("Attention",i,{numHeads:p,isUnidirectional:g,maskFilterValue:S,scale:E,doRotary:D,qkvHiddenSizes:N?Array.from(n().subarray(Number(ae)>>>0,Number(ae)+N>>>0)):[],pastPresentShareBuffer:!!Q})},1439800:i=>{o.Ea("Gelu",i,void 0)},1439852:(i,p,g,S,E,D)=>{o.Ea("MultiHeadAttention",i,{numHeads:p,isUnidirectional:g,maskFilterValue:S,scale:E,doRotary:D})},1440011:i=>{o.Ea("BiasAdd",i,void 0)},1440066:i=>{o.Ea("BiasSplitGelu",i,void 0)},1440127:(i,p)=>{o.Ea("SkipLayerNormalization",i,{epsilon:p})},1440208:i=>o.wb(i),1440241:i=>o.yb(i),1440273:(i,p,g)=>{o.jb(i,p,g,!0)},1440312:(i,p,g)=>{o.jb(i,p,g)}};function xt(i){this.name="ExitStatus",this.message=`Program terminated with exit(${i})`,this.status=i}function Lt(i){i.terminate(),i.onmessage=()=>{}}function Gt(i){(i=se.Qa[i])||tt(),se.Eb(i)}function er(i){var p=se.tb();if(!p)return 6;se.Ya.push(p),se.Qa[i.Xa]=p,p.Xa=i.Xa;var g={cmd:"run",start_routine:i.Gb,arg:i.rb,pthread_ptr:i.Xa};return C&&p.unref(),p.postMessage(g,i.Mb),0}var Ft=typeof TextDecoder<"u"?new TextDecoder("utf8"):void 0,_r=(i,p,g)=>{p>>>=0;var S=p+g;for(g=p;i[g]&&!(g>=S);)++g;if(16<g-p&&i.buffer&&Ft)return Ft.decode(i.buffer instanceof SharedArrayBuffer?i.slice(p,g):i.subarray(p,g));for(S="";p<g;){var E=i[p++];if(E&128){var D=i[p++]&63;if((E&224)==192)S+=String.fromCharCode((E&31)<<6|D);else{var N=i[p++]&63;E=(E&240)==224?(E&15)<<12|D<<6|N:(E&7)<<18|D<<12|N<<6|i[p++]&63,65536>E?S+=String.fromCharCode(E):(E-=65536,S+=String.fromCharCode(55296|E>>10,56320|E&1023))}}else S+=String.fromCharCode(E)}return S},He=(i,p)=>(i>>>=0)?_r(a(),i,p):"";function tr(i){if(_)return H(1,1,i);_e=i,st()||(se.Hb(),o.onExit&&o.onExit(i),Ce=!0),w(i,new xt(i))}var rr=i=>{if(_e=i,_)throw Ar(i),"unwind";tr(i)},se={ab:[],Ya:[],mb:[],Qa:{},gb:function(){_?se.vb():se.ub()},ub:function(){Ye.unshift(()=>{Xt(),se.Bb(()=>Ir())})},vb:function(){se.receiveObjectTransfer=se.Db,se.threadInitTLS=se.lb,se.setExitStatus=se.kb,re=!1},kb:function(i){_e=i},Sb:["$terminateWorker"],Hb:function(){for(var i of se.Ya)Lt(i);for(i of se.ab)Lt(i);se.ab=[],se.Ya=[],se.Qa=[]},Eb:function(i){var p=i.Xa;delete se.Qa[p],se.ab.push(i),se.Ya.splice(se.Ya.indexOf(i),1),i.Xa=0,An(p)},Db:function(){},lb:function(){se.mb.forEach(i=>i())},Cb:i=>new Promise(p=>{i.onmessage=D=>{D=D.data;var N=D.cmd;if(D.targetThread&&D.targetThread!=Wr()){var ae=se.Qa[D.Rb];ae?ae.postMessage(D,D.transferList):Z('Internal error! Worker sent a message "'+N+'" to target pthread '+D.targetThread+", but that thread no longer exists!")}else N==="checkMailbox"?Bt():N==="spawnThread"?er(D):N==="cleanupThread"?Gt(D.thread):N==="killThread"?(D=D.thread,N=se.Qa[D],delete se.Qa[D],Lt(N),An(D),se.Ya.splice(se.Ya.indexOf(N),1),N.Xa=0):N==="cancelThread"?se.Qa[D.thread].postMessage({cmd:"cancel"}):N==="loaded"?(i.loaded=!0,p(i)):N==="alert"?alert("Thread "+D.threadId+": "+D.text):D.target==="setimmediate"?i.postMessage(D):N==="callHandler"?o[D.handler](...D.args):N&&Z("worker sent an unknown command "+N)},i.onerror=D=>{throw Z("worker sent an error! "+D.filename+":"+D.lineno+": "+D.message),D},C&&(i.on("message",function(D){i.onmessage({data:D})}),i.on("error",function(D){i.onerror(D)}));var g=[],S=["onExit","onAbort","print","printErr"],E;for(E of S)o.hasOwnProperty(E)&&g.push(E);i.postMessage({cmd:"load",handlers:g,urlOrBlob:o.mainScriptUrlOrBlob||e,wasmMemory:ve,wasmModule:$e})}),Bb:function(i){i()},qb:function(){var i=k("ort-wasm-simd-threaded.worker.js");i=new Worker(i),se.ab.push(i)},tb:function(){return se.ab.length==0&&(se.qb(),se.Cb(se.ab[0])),se.ab.pop()}};o.PThread=se;var bt=i=>{for(;0<i.length;)i.shift()(o)};o.establishStackSpace=function(){var i=Wr(),p=n()[i+52>>2>>>0];i=n()[i+56>>2>>>0],Na(p,p-i),Vr(p)};function Ar(i){if(_)return H(2,0,i);rr(i)}o.invokeEntryPoint=function(i,p){i=Ua.apply(null,[i,p]),st()?se.kb(i):En(i)};function ut(i){this.fb=i-24,this.pb=function(p){s()[this.fb+4>>2>>>0]=p},this.ob=function(p){s()[this.fb+8>>2>>>0]=p},this.gb=function(p,g){this.nb(),this.pb(p),this.ob(g)},this.nb=function(){s()[this.fb+16>>2>>>0]=0}}var Je=0,Er=0;function Rt(i,p,g,S){return _?H(3,1,i,p,g,S):nr(i,p,g,S)}function nr(i,p,g,S){if(i>>>=0,p>>>=0,g>>>=0,S>>>=0,typeof SharedArrayBuffer>"u")return Z("Current environment does not support SharedArrayBuffer, pthreads are not available!"),6;var E=[];return _&&E.length===0?Rt(i,p,g,S):(i={Gb:g,Xa:i,rb:S,Mb:E},_?(i.Ob="spawnThread",postMessage(i,E),0):er(i))}function ar(i,p,g){return _?H(4,1,i,p,g):0}function Tr(i,p){if(_)return H(5,1,i,p)}var Pt=i=>{for(var p=0,g=0;g<i.length;++g){var S=i.charCodeAt(g);127>=S?p++:2047>=S?p+=2:55296<=S&&57343>=S?(p+=4,++g):p+=3}return p},Or=(i,p,g,S)=>{if(g>>>=0,!(0<S))return 0;var E=g;S=g+S-1;for(var D=0;D<i.length;++D){var N=i.charCodeAt(D);if(55296<=N&&57343>=N){var ae=i.charCodeAt(++D);N=65536+((N&1023)<<10)|ae&1023}if(127>=N){if(g>=S)break;p[g++>>>0]=N}else{if(2047>=N){if(g+1>=S)break;p[g++>>>0]=192|N>>6}else{if(65535>=N){if(g+2>=S)break;p[g++>>>0]=224|N>>12}else{if(g+3>=S)break;p[g++>>>0]=240|N>>18,p[g++>>>0]=128|N>>12&63}p[g++>>>0]=128|N>>6&63}p[g++>>>0]=128|N&63}}return p[g>>>0]=0,g-E},kr=(i,p,g)=>Or(i,a(),p,g);function Rr(i,p){if(_)return H(6,1,i,p)}function Pr(i,p,g){if(_)return H(7,1,i,p,g)}function Br(i,p,g){return _?H(8,1,i,p,g):0}function Mr(i,p){if(_)return H(9,1,i,p)}function qt(i,p,g){if(_)return H(10,1,i,p,g)}function or(i,p,g,S){if(_)return H(11,1,i,p,g,S)}function ir(i,p,g,S){if(_)return H(12,1,i,p,g,S)}function sr(i,p,g,S){if(_)return H(13,1,i,p,g,S)}function ur(i){if(_)return H(14,1,i)}function lr(i,p){if(_)return H(15,1,i,p)}function dr(i,p,g){if(_)return H(16,1,i,p,g)}var cr=i=>{if(!Ce)try{if(i(),!st())try{_?En(_e):rr(_e)}catch(p){p instanceof xt||p=="unwind"||w(1,p)}}catch(p){p instanceof xt||p=="unwind"||w(1,p)}};function jt(i){i>>>=0,typeof Atomics.Nb=="function"&&(Atomics.Nb(n(),i>>2,i).value.then(Bt),i+=128,Atomics.store(n(),i>>2,1))}o.__emscripten_thread_mailbox_await=jt;function Bt(){var i=Wr();i&&(jt(i),cr(()=>Wa()))}o.checkMailbox=Bt;var It=i=>i%4===0&&(i%100!==0||i%400===0),Mt=[0,31,60,91,121,152,182,213,244,274,305,335],pr=[0,31,59,90,120,151,181,212,243,273,304,334];function d(i,p,g,S,E,D,N,ae){return _?H(17,1,i,p,g,S,E,D,N,ae):-52}function m(i,p,g,S,E,D,N){if(_)return H(18,1,i,p,g,S,E,D,N)}var b=i=>{var p=Pt(i)+1,g=_n(p);return g&&kr(i,g,p),g},x=[],O=(i,p)=>{x.length=0;var g;for(p>>=2;g=a()[i++>>>0];)p+=g!=105&p,x.push(g==105?n()[p>>>0]:l()[p++>>>1]),++p;return x},L=i=>{var p=Tn();return i=i(),Vr(p),i};function H(i,p){var g=arguments.length-2,S=arguments;return L(()=>{for(var E=On(8*g),D=E>>3,N=0;N<g;N++){var ae=S[2+N];l()[D+N>>>0]=ae}return za(i,g,E,p)})}var ue=[],Y={},ne=()=>{if(!X){var i={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:(typeof navigator=="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:h||"./this.program"},p;for(p in Y)Y[p]===void 0?delete i[p]:i[p]=Y[p];var g=[];for(p in i)g.push(`${p}=${i[p]}`);X=g}return X},X;function ce(i,p){if(_)return H(19,1,i,p);i>>>=0,p>>>=0;var g=0;return ne().forEach(function(S,E){var D=p+g;for(E=s()[i+4*E>>2>>>0]=D,D=0;D<S.length;++D)r()[E++>>0>>>0]=S.charCodeAt(D);r()[E>>0>>>0]=0,g+=S.length+1}),0}function ge(i,p){if(_)return H(20,1,i,p);i>>>=0,p>>>=0;var g=ne();s()[i>>2>>>0]=g.length;var S=0;return g.forEach(function(E){S+=E.length+1}),s()[p>>2>>>0]=S,0}function R(i){return _?H(21,1,i):52}function oe(i,p,g,S){return _?H(22,1,i,p,g,S):52}function he(i,p,g,S,E){return _?H(23,1,i,p,g,S,E):70}var wt=[null,[],[]];function fr(i,p,g,S){if(_)return H(24,1,i,p,g,S);p>>>=0,g>>>=0,S>>>=0;for(var E=0,D=0;D<g;D++){var N=s()[p>>2>>>0],ae=s()[p+4>>2>>>0];p+=8;for(var Q=0;Q<ae;Q++){var te=a()[N+Q>>>0],ie=wt[i];te===0||te===10?((i===1?M:Z)(_r(ie,0)),ie.length=0):ie.push(te)}E+=ae}return s()[S>>2>>>0]=E,0}var Ta=[31,29,31,30,31,30,31,31,30,31,30,31],Oa=[31,28,31,30,31,30,31,31,30,31,30,31];function Ol(i){var p=Array(Pt(i)+1);return Or(i,p,0,p.length),p}var kl=(i,p)=>{r().set(i,p>>>0)};function ka(i,p,g,S){function E(P,de,Se){for(P=typeof P=="number"?P.toString():P||"";P.length<de;)P=Se[0]+P;return P}function D(P,de){return E(P,de,"0")}function N(P,de){function Se(ja){return 0>ja?-1:0<ja?1:0}var Dt;return(Dt=Se(P.getFullYear()-de.getFullYear()))===0&&(Dt=Se(P.getMonth()-de.getMonth()))===0&&(Dt=Se(P.getDate()-de.getDate())),Dt}function ae(P){switch(P.getDay()){case 0:return new Date(P.getFullYear()-1,11,29);case 1:return P;case 2:return new Date(P.getFullYear(),0,3);case 3:return new Date(P.getFullYear(),0,2);case 4:return new Date(P.getFullYear(),0,1);case 5:return new Date(P.getFullYear()-1,11,31);case 6:return new Date(P.getFullYear()-1,11,30)}}function Q(P){var de=P.Za;for(P=new Date(new Date(P.$a+1900,0,1).getTime());0<de;){var Se=P.getMonth(),Dt=(It(P.getFullYear())?Ta:Oa)[Se];if(de>Dt-P.getDate())de-=Dt-P.getDate()+1,P.setDate(1),11>Se?P.setMonth(Se+1):(P.setMonth(0),P.setFullYear(P.getFullYear()+1));else{P.setDate(P.getDate()+de);break}}return Se=new Date(P.getFullYear()+1,0,4),de=ae(new Date(P.getFullYear(),0,4)),Se=ae(Se),0>=N(de,P)?0>=N(Se,P)?P.getFullYear()+1:P.getFullYear():P.getFullYear()-1}i>>>=0,p>>>=0,g>>>=0,S>>>=0;var te=n()[S+40>>2>>>0];S={Kb:n()[S>>2>>>0],Jb:n()[S+4>>2>>>0],cb:n()[S+8>>2>>>0],ib:n()[S+12>>2>>>0],eb:n()[S+16>>2>>>0],$a:n()[S+20>>2>>>0],Wa:n()[S+24>>2>>>0],Za:n()[S+28>>2>>>0],Tb:n()[S+32>>2>>>0],Ib:n()[S+36>>2>>>0],Lb:te?He(te):""},g=He(g),te={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var ie in te)g=g.replace(new RegExp(ie,"g"),te[ie]);var ye="Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),Ie="January February March April May June July August September October November December".split(" ");te={"%a":P=>ye[P.Wa].substring(0,3),"%A":P=>ye[P.Wa],"%b":P=>Ie[P.eb].substring(0,3),"%B":P=>Ie[P.eb],"%C":P=>D((P.$a+1900)/100|0,2),"%d":P=>D(P.ib,2),"%e":P=>E(P.ib,2," "),"%g":P=>Q(P).toString().substring(2),"%G":P=>Q(P),"%H":P=>D(P.cb,2),"%I":P=>(P=P.cb,P==0?P=12:12<P&&(P-=12),D(P,2)),"%j":P=>{for(var de=0,Se=0;Se<=P.eb-1;de+=(It(P.$a+1900)?Ta:Oa)[Se++]);return D(P.ib+de,3)},"%m":P=>D(P.eb+1,2),"%M":P=>D(P.Jb,2),"%n":()=>`
`,"%p":P=>0<=P.cb&&12>P.cb?"AM":"PM","%S":P=>D(P.Kb,2),"%t":()=>"	","%u":P=>P.Wa||7,"%U":P=>D(Math.floor((P.Za+7-P.Wa)/7),2),"%V":P=>{var de=Math.floor((P.Za+7-(P.Wa+6)%7)/7);if(2>=(P.Wa+371-P.Za-2)%7&&de++,de)de==53&&(Se=(P.Wa+371-P.Za)%7,Se==4||Se==3&&It(P.$a)||(de=1));else{de=52;var Se=(P.Wa+7-P.Za-1)%7;(Se==4||Se==5&&It(P.$a%400-1))&&de++}return D(de,2)},"%w":P=>P.Wa,"%W":P=>D(Math.floor((P.Za+7-(P.Wa+6)%7)/7),2),"%y":P=>(P.$a+1900).toString().substring(2),"%Y":P=>P.$a+1900,"%z":P=>{P=P.Ib;var de=0<=P;return P=Math.abs(P)/60,(de?"+":"-")+("0000"+(P/60*100+P%60)).slice(-4)},"%Z":P=>P.Lb,"%%":()=>"%"},g=g.replace(/%%/g,"\0\0");for(ie in te)g.includes(ie)&&(g=g.replace(new RegExp(ie,"g"),te[ie](S)));return g=g.replace(/\0\0/g,"%"),ie=Ol(g),ie.length>p?0:(kl(ie,i),ie.length-1)}function Dr(i){try{i()}catch(p){tt(p)}}function Rl(i){var p={},g;for(g in i)(function(S){var E=i[S];p[S]=typeof E=="function"?function(){zr.push(S);try{return E.apply(null,arguments)}finally{Ce||(zr.pop()===S||tt(),lt&&Ct===1&&zr.length===0&&(Ct=0,je+=1,Dr(La),typeof Fibers<"u"&&Fibers.Ub()))}}:E})(g);return p}var Ct=0,lt=null,Ra=0,zr=[],Pa={},Ba={},Pl=0,Cn=null,Bl=[];function Ml(){return new Promise((i,p)=>{Cn={resolve:i,reject:p}})}function Dl(){var i=_n(65548),p=i+12;s()[i>>2>>>0]=p,s()[i+4>>2>>>0]=p+65536,p=zr[0];var g=Pa[p];return g===void 0&&(g=Pl++,Pa[p]=g,Ba[g]=p),p=g,n()[i+8>>2>>>0]=p,i}function zl(){var i=n()[lt+8>>2>>>0];return i=j[Ba[i]],--je,i()}function Wl(i){if(!Ce){if(Ct===0){var p=!1,g=!1;i((S=0)=>{if(!Ce&&(Ra=S,p=!0,g)){Ct=2,Dr(()=>Ga(lt)),typeof Browser<"u"&&Browser.hb.sb&&Browser.hb.resume(),S=!1;try{var E=zl()}catch(ae){E=ae,S=!0}var D=!1;if(!lt){var N=Cn;N&&(Cn=null,(S?N.reject:N.resolve)(E),D=!0)}if(S&&!D)throw E}}),g=!0,p||(Ct=1,lt=Dl(),typeof Browser<"u"&&Browser.hb.sb&&Browser.hb.pause(),Dr(()=>Ha(lt)))}else Ct===2?(Ct=0,Dr(Fa),Ma(lt),lt=null,Bl.forEach(S=>cr(S))):tt(`invalid state: ${Ct}`);return Ra}}function Vl(i){return Wl(p=>{i().then(p)})}se.gb();var Nl=[null,tr,Ar,Rt,ar,Tr,Rr,Pr,Br,Mr,qt,or,ir,sr,ur,lr,dr,d,m,ce,ge,R,oe,he,fr],Ul={r:function(i,p,g){return Vl(async()=>{await o.xb(i,p,g)})},b:function(i,p,g){throw i>>>=0,new ut(i).gb(p>>>0,g>>>0),Je=i,Er++,Je},P:function(i){Da(i>>>0,!$,1,!v,131072,!1),se.lb()},n:function(i){i>>>=0,_?postMessage({cmd:"cleanupThread",thread:i}):Gt(i)},K:nr,g:ar,V:Tr,F:Rr,H:Pr,y:Br,T:Mr,L:qt,S:or,p:ir,G:sr,D:ur,U:lr,E:dr,q:()=>!0,B:function(i,p){i>>>=0,i==p>>>0?setTimeout(()=>Bt()):_?postMessage({targetThread:i,cmd:"checkMailbox"}):(i=se.Qa[i])&&i.postMessage({cmd:"checkMailbox"})},N:function(){return-1},O:jt,X:function(i){C&&se.Qa[i>>>0].ref()},u:function(i,p,g){i=p+2097152>>>0<4194305-!!i?(i>>>0)+4294967296*p:NaN,g>>>=0,i=new Date(1e3*i),n()[g>>2>>>0]=i.getUTCSeconds(),n()[g+4>>2>>>0]=i.getUTCMinutes(),n()[g+8>>2>>>0]=i.getUTCHours(),n()[g+12>>2>>>0]=i.getUTCDate(),n()[g+16>>2>>>0]=i.getUTCMonth(),n()[g+20>>2>>>0]=i.getUTCFullYear()-1900,n()[g+24>>2>>>0]=i.getUTCDay(),i=(i.getTime()-Date.UTC(i.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,n()[g+28>>2>>>0]=i},v:function(i,p,g){i=p+2097152>>>0<4194305-!!i?(i>>>0)+4294967296*p:NaN,g>>>=0,i=new Date(1e3*i),n()[g>>2>>>0]=i.getSeconds(),n()[g+4>>2>>>0]=i.getMinutes(),n()[g+8>>2>>>0]=i.getHours(),n()[g+12>>2>>>0]=i.getDate(),n()[g+16>>2>>>0]=i.getMonth(),n()[g+20>>2>>>0]=i.getFullYear()-1900,n()[g+24>>2>>>0]=i.getDay(),p=(It(i.getFullYear())?Mt:pr)[i.getMonth()]+i.getDate()-1|0,n()[g+28>>2>>>0]=p,n()[g+36>>2>>>0]=-(60*i.getTimezoneOffset()),p=new Date(i.getFullYear(),6,1).getTimezoneOffset();var S=new Date(i.getFullYear(),0,1).getTimezoneOffset();i=(p!=S&&i.getTimezoneOffset()==Math.min(S,p))|0,n()[g+32>>2>>>0]=i},w:function(i){i>>>=0;var p=new Date(n()[i+20>>2>>>0]+1900,n()[i+16>>2>>>0],n()[i+12>>2>>>0],n()[i+8>>2>>>0],n()[i+4>>2>>>0],n()[i>>2>>>0],0),g=n()[i+32>>2>>>0],S=p.getTimezoneOffset(),E=new Date(p.getFullYear(),6,1).getTimezoneOffset(),D=new Date(p.getFullYear(),0,1).getTimezoneOffset(),N=Math.min(D,E);return 0>g?n()[i+32>>2>>>0]=+(E!=D&&N==S):0<g!=(N==S)&&(E=Math.max(D,E),p.setTime(p.getTime()+6e4*((0<g?N:E)-S))),n()[i+24>>2>>>0]=p.getDay(),g=(It(p.getFullYear())?Mt:pr)[p.getMonth()]+p.getDate()-1|0,n()[i+28>>2>>>0]=g,n()[i>>2>>>0]=p.getSeconds(),n()[i+4>>2>>>0]=p.getMinutes(),n()[i+8>>2>>>0]=p.getHours(),n()[i+12>>2>>>0]=p.getDate(),n()[i+16>>2>>>0]=p.getMonth(),n()[i+20>>2>>>0]=p.getYear(),i=p.getTime()/1e3,Va((yt=i,1<=+Math.abs(yt)?0<yt?+Math.floor(yt/4294967296)>>>0:~~+Math.ceil((yt-+(~~yt>>>0))/4294967296)>>>0:0)),i>>>0},s:d,t:m,A:function(i,p,g){function S(te){return(te=te.toTimeString().match(/\(([A-Za-z ]+)\)$/))?te[1]:"GMT"}i>>>=0,p>>>=0,g>>>=0;var E=new Date().getFullYear(),D=new Date(E,0,1),N=new Date(E,6,1);E=D.getTimezoneOffset();var ae=N.getTimezoneOffset(),Q=Math.max(E,ae);s()[i>>2>>>0]=60*Q,n()[p>>2>>>0]=+(E!=ae),i=S(D),p=S(N),i=b(i),p=b(p),ae<E?(s()[g>>2>>>0]=i,s()[g+4>>2>>>0]=p):(s()[g>>2>>>0]=p,s()[g+4>>2>>>0]=i)},e:()=>{tt("")},c:function(i,p,g){return i>>>=0,p=O(p>>>0,g>>>0),Ht[i].apply(null,p)},l:function(i,p,g){return i>>>=0,p=O(p>>>0,g>>>0),Ht[i].apply(null,p)},o:function(){},k:function(){return Date.now()},W:()=>{throw je+=1,"unwind"},C:function(){return 4294901760},d:()=>performance.timeOrigin+performance.now(),i:function(){return C?(To(),_t(Eo)).cpus().length:navigator.hardwareConcurrency},M:function(i,p,g,S){for(se.Pb=p>>>0,ue.length=g,p=S>>>0>>3,S=0;S<g;S++)ue[S]=l()[p+S>>>0];return(0>i?Ht[-i-1]:Nl[i]).apply(null,ue)},z:function(i){i>>>=0;var p=a().length;if(i<=p||4294901760<i)return!1;for(var g=1;4>=g;g*=2){var S=p*(1+.2/g);S=Math.min(S,i+100663296);var E=Math;S=Math.max(i,S);e:{E=E.min.call(E,4294901760,S+(65536-S%65536)%65536)-ve.buffer.byteLength+65535>>>16;try{ve.grow(E),fe();var D=1;break e}catch{}D=void 0}if(D)return!0}return!1},Q:ce,R:ge,J:rr,h:R,m:oe,x:he,j:fr,a:ve||o.wasmMemory,I:ka,f:function(i,p,g,S){return ka(i>>>0,p>>>0,g>>>0,S>>>0)}};(function(){function i(g,S){return g=g.exports,g=Rl(g),j=g=Hl(g),se.mb.push(j.Da),Be.unshift(j.Y),$e=S,Ir(),g}var p={a:Ul};if(Xt(),o.instantiateWasm)try{return o.instantiateWasm(p,i)}catch(g){Z("Module.instantiateWasm callback failed with error: "+g),f(g)}return Cr(p,function(g){i(g.instance,g.module)}).catch(f),{}})(),o._OrtInit=(i,p)=>(o._OrtInit=j.Z)(i,p),o._OrtGetLastError=(i,p)=>(o._OrtGetLastError=j._)(i,p),o._OrtCreateSessionOptions=(i,p,g,S,E,D,N,ae,Q,te)=>(o._OrtCreateSessionOptions=j.$)(i,p,g,S,E,D,N,ae,Q,te),o._OrtAppendExecutionProvider=(i,p)=>(o._OrtAppendExecutionProvider=j.aa)(i,p),o._OrtAddFreeDimensionOverride=(i,p,g)=>(o._OrtAddFreeDimensionOverride=j.ba)(i,p,g),o._OrtAddSessionConfigEntry=(i,p,g)=>(o._OrtAddSessionConfigEntry=j.ca)(i,p,g),o._OrtReleaseSessionOptions=i=>(o._OrtReleaseSessionOptions=j.da)(i),o._OrtCreateSession=(i,p,g)=>(o._OrtCreateSession=j.ea)(i,p,g),o._OrtReleaseSession=i=>(o._OrtReleaseSession=j.fa)(i),o._OrtGetInputOutputCount=(i,p,g)=>(o._OrtGetInputOutputCount=j.ga)(i,p,g),o._OrtGetInputName=(i,p)=>(o._OrtGetInputName=j.ha)(i,p),o._OrtGetOutputName=(i,p)=>(o._OrtGetOutputName=j.ia)(i,p),o._OrtFree=i=>(o._OrtFree=j.ja)(i),o._OrtCreateTensor=(i,p,g,S,E,D)=>(o._OrtCreateTensor=j.ka)(i,p,g,S,E,D),o._OrtGetTensorData=(i,p,g,S,E)=>(o._OrtGetTensorData=j.la)(i,p,g,S,E),o._OrtReleaseTensor=i=>(o._OrtReleaseTensor=j.ma)(i),o._OrtCreateRunOptions=(i,p,g,S)=>(o._OrtCreateRunOptions=j.na)(i,p,g,S),o._OrtAddRunConfigEntry=(i,p,g)=>(o._OrtAddRunConfigEntry=j.oa)(i,p,g),o._OrtReleaseRunOptions=i=>(o._OrtReleaseRunOptions=j.pa)(i),o._OrtCreateBinding=i=>(o._OrtCreateBinding=j.qa)(i),o._OrtBindInput=(i,p,g)=>(o._OrtBindInput=j.ra)(i,p,g),o._OrtBindOutput=(i,p,g,S)=>(o._OrtBindOutput=j.sa)(i,p,g,S),o._OrtClearBoundOutputs=i=>(o._OrtClearBoundOutputs=j.ta)(i),o._OrtReleaseBinding=i=>(o._OrtReleaseBinding=j.ua)(i),o._OrtRunWithBinding=(i,p,g,S,E)=>(o._OrtRunWithBinding=j.va)(i,p,g,S,E),o._OrtRun=(i,p,g,S,E,D,N,ae)=>(o._OrtRun=j.wa)(i,p,g,S,E,D,N,ae),o._OrtEndProfiling=i=>(o._OrtEndProfiling=j.xa)(i),o._JsepOutput=(i,p,g)=>(o._JsepOutput=j.ya)(i,p,g),o._JsepGetNodeName=i=>(o._JsepGetNodeName=j.za)(i);var Wr=o._pthread_self=()=>(Wr=o._pthread_self=j.Aa)(),_n=o._malloc=i=>(_n=o._malloc=j.Ba)(i),Ma=o._free=i=>(Ma=o._free=j.Ca)(i);o.__emscripten_tls_init=()=>(o.__emscripten_tls_init=j.Da)();var Da=o.__emscripten_thread_init=(i,p,g,S,E,D)=>(Da=o.__emscripten_thread_init=j.Fa)(i,p,g,S,E,D);o.__emscripten_thread_crashed=()=>(o.__emscripten_thread_crashed=j.Ga)();var za=(i,p,g,S)=>(za=j.Ha)(i,p,g,S),An=i=>(An=j.Ia)(i),En=o.__emscripten_thread_exit=i=>(En=o.__emscripten_thread_exit=j.Ja)(i),Wa=o.__emscripten_check_mailbox=()=>(Wa=o.__emscripten_check_mailbox=j.Ka)(),Va=i=>(Va=j.La)(i),Na=(i,p)=>(Na=j.Ma)(i,p),Tn=()=>(Tn=j.Na)(),Vr=i=>(Vr=j.Oa)(i),On=i=>(On=j.Pa)(i),Ua=o.dynCall_ii=(i,p)=>(Ua=o.dynCall_ii=j.Ra)(i,p),Ha=i=>(Ha=j.Sa)(i),La=()=>(La=j.Ta)(),Ga=i=>(Ga=j.Ua)(i),Fa=()=>(Fa=j.Va)();o.___start_em_js=1440345,o.___stop_em_js=1440506;function Hl(i){i=Object.assign({},i);var p=S=>()=>S()>>>0,g=S=>E=>S(E)>>>0;return i.__errno_location=p(i.__errno_location),i.pthread_self=p(i.pthread_self),i.malloc=g(i.malloc),i.stackSave=p(i.stackSave),i.stackAlloc=g(i.stackAlloc),i}o.keepRuntimeAlive=st,o.wasmMemory=ve,o.stackAlloc=On,o.stackSave=Tn,o.stackRestore=Vr,o.UTF8ToString=He,o.stringToUTF8=kr,o.lengthBytesUTF8=Pt,o.ExitStatus=xt,o.PThread=se;var Nr;kt=function i(){Nr||qa(),Nr||(kt=i)};function qa(){function i(){if(!Nr&&(Nr=!0,o.calledRun=!0,!Ce)&&(_||bt(Be),c(o),o.onRuntimeInitialized&&o.onRuntimeInitialized(),!_)){if(o.postRun)for(typeof o.postRun=="function"&&(o.postRun=[o.postRun]);o.postRun.length;){var p=o.postRun.shift();Ve.unshift(p)}bt(Ve)}}if(!(0<Qe))if(_)c(o),_||bt(Be),startWorker(o);else{if(o.preRun)for(typeof o.preRun=="function"&&(o.preRun=[o.preRun]);o.preRun.length;)Ye.unshift(o.preRun.shift());bt(Ye),0<Qe||(o.setStatus?(o.setStatus("Running..."),setTimeout(function(){setTimeout(function(){o.setStatus("")},1),i()},1)):i())}}if(o.preInit)for(typeof o.preInit=="function"&&(o.preInit=[o.preInit]);0<o.preInit.length;)o.preInit.pop()();return qa(),t.ready}})();typeof ko=="object"&&typeof Nn=="object"?Nn.exports=Oo:typeof define=="function"&&define.amd&&define([],()=>Oo)});var Po=Kt((Df,Xl)=>{Xl.exports='"use strict";var Module={},ENVIRONMENT_IS_NODE=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string";if(ENVIRONMENT_IS_NODE){var nodeWorkerThreads=require("worker_threads"),parentPort=nodeWorkerThreads.parentPort;parentPort.on("message",e=>onmessage({data:e}));var fs=require("fs");Object.assign(global,{self:global,require,Module,location:{href:__filename},Worker:nodeWorkerThreads.Worker,importScripts:e=>(0,eval)(fs.readFileSync(e,"utf8")+"//# sourceURL="+e),postMessage:e=>parentPort.postMessage(e),performance:global.performance||{now:Date.now}})}var initializedJS=!1;function threadPrintErr(){var e=Array.prototype.slice.call(arguments).join(" ");if(ENVIRONMENT_IS_NODE){fs.writeSync(2,e+`\n`);return}console.error(e)}function threadAlert(){var e=Array.prototype.slice.call(arguments).join(" ");postMessage({cmd:"alert",text:e,threadId:Module._pthread_self()})}var err=threadPrintErr;self.alert=threadAlert,Module.instantiateWasm=(e,t)=>{var a=Module.wasmModule;Module.wasmModule=null;var r=new WebAssembly.Instance(a,e);return t(r)},self.onunhandledrejection=e=>{throw e.reason??e};function handleMessage(e){try{if(e.data.cmd==="load"){let a=[];self.onmessage=r=>a.push(r),self.startWorker=r=>{Module=r,postMessage({cmd:"loaded"});for(let s of a)handleMessage(s);self.onmessage=handleMessage},Module.wasmModule=e.data.wasmModule;for(const r of e.data.handlers)Module[r]=(...s)=>{postMessage({cmd:"callHandler",handler:r,args:s})};if(Module.wasmMemory=e.data.wasmMemory,Module.buffer=Module.wasmMemory.buffer,Module.ENVIRONMENT_IS_PTHREAD=!0,typeof e.data.urlOrBlob=="string")importScripts(e.data.urlOrBlob);else{var t=URL.createObjectURL(e.data.urlOrBlob);importScripts(t),URL.revokeObjectURL(t)}ortWasmThreaded(Module)}else if(e.data.cmd==="run"){Module.__emscripten_thread_init(e.data.pthread_ptr,0,0,1),Module.__emscripten_thread_mailbox_await(e.data.pthread_ptr),Module.establishStackSpace(),Module.PThread.receiveObjectTransfer(e.data),Module.PThread.threadInitTLS(),initializedJS||(initializedJS=!0);try{Module.invokeEntryPoint(e.data.start_routine,e.data.arg)}catch(a){if(a!="unwind")throw a}}else e.data.cmd==="cancel"?Module._pthread_self()&&Module.__emscripten_thread_exit(-1):e.data.target==="setimmediate"||(e.data.cmd==="checkMailbox"?initializedJS&&Module.checkMailbox():e.data.cmd&&(err("worker.js received unknown command "+e.data.cmd),err(e.data)))}catch(a){throw Module.__emscripten_thread_crashed&&Module.__emscripten_thread_crashed(),a}}self.onmessage=handleMessage;\n'});var Mo,Ql,Un,Hn,Yr,Bo,Jl,ed,td,Do,Me,Yt=F(()=>{"use strict";Mo=Co();Ql=Ro(),Hn=!1,Yr=!1,Bo=!1,Jl=()=>{try{return typeof SharedArrayBuffer>"u"?!1:(typeof MessageChannel<"u"&&new MessageChannel().port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11])))}catch{return!1}},ed=()=>{try{return WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,30,1,28,0,65,0,253,15,253,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,186,1,26,11]))}catch{return!1}},td=(e,t)=>e?t?"ort-wasm-simd-threaded.wasm":"ort-wasm-simd.wasm":t?"ort-wasm-threaded.wasm":"ort-wasm.wasm",Do=async e=>{if(Hn)return Promise.resolve();if(Yr)throw new Error("multiple calls to 'initializeWebAssembly()' detected.");if(Bo)throw new Error("previous call to 'initializeWebAssembly()' failed.");Yr=!0;let t=e.initTimeout,r=e.numThreads,a=e.simd,n=r>1&&Jl(),s=a&&ed(),u=e.wasmPaths,l=typeof u=="string"?u:void 0,o=td(s,n),c=typeof u=="object"?u[o]:void 0,f=!1,y=[];if(t>0&&y.push(new Promise(h=>{setTimeout(()=>{f=!0,h()},t)})),y.push(new Promise((h,w)=>{let v=n?Ql:Mo,$={locateFile:(C,_)=>{if(n&&C.endsWith(".worker.js")&&typeof Blob<"u")return URL.createObjectURL(new Blob([Po()],{type:"text/javascript"}));if(C.endsWith(".wasm")){if(c)return c;let I=l??_;return o==="ort-wasm-simd.wasm"?I+"ort-wasm-simd.jsep.wasm":o==="ort-wasm-simd-threaded.wasm"?I+"ort-wasm-simd-threaded.jsep.wasm":I+o}return _+C}};if(n)if(typeof Blob>"u")$.mainScriptUrlOrBlob=(void 0)(__dirname,"ort-wasm-threaded.js");else{let C=`var ortWasmThreaded=${v.toString()};`;$.mainScriptUrlOrBlob=new Blob([C],{type:"text/javascript"})}v($).then(C=>{Yr=!1,Hn=!0,Un=C,h()},C=>{Yr=!1,Bo=!0,w(C)})})),await Promise.race(y),f)throw new Error(`WebAssembly backend initializing failed due to timeout: ${t}ms`)},Me=()=>{if(Hn&&Un)return Un;throw new Error("WebAssembly is not initialized yet.")}});var ze,hr,Oe,Zr=F(()=>{"use strict";Yt();ze=(e,t)=>{let r=Me(),a=r.lengthBytesUTF8(e)+1,n=r._malloc(a);return r.stringToUTF8(e,n,a),t.push(n),n},hr=(e,t,r,a)=>{if(typeof e=="object"&&e!==null){if(r.has(e))throw new Error("Circular reference in options");r.add(e)}Object.entries(e).forEach(([n,s])=>{let u=t?t+n:n;if(typeof s=="object")hr(s,u+".",r,a);else if(typeof s=="string"||typeof s=="number")a(u,s.toString());else if(typeof s=="boolean")a(u,s?"1":"0");else throw new Error(`Can't handle extra config type: ${typeof s}`)})},Oe=e=>{let t=Me(),r=t.stackSave();try{let a=t.stackAlloc(8);t._OrtGetLastError(a,a+4);let n=t.HEAP32[a/4],s=t.HEAPU32[a/4+1],u=s?t.UTF8ToString(s):"";throw new Error(`${e} ERROR_CODE: ${n}, ERROR_MESSAGE: ${u}`)}finally{t.stackRestore(r)}}});var zo,Wo=F(()=>{"use strict";Yt();Zr();zo=e=>{let t=Me(),r=0,a=[],n=e||{};try{if(e?.logSeverityLevel===void 0)n.logSeverityLevel=2;else if(typeof e.logSeverityLevel!="number"||!Number.isInteger(e.logSeverityLevel)||e.logSeverityLevel<0||e.logSeverityLevel>4)throw new Error(`log serverity level is not valid: ${e.logSeverityLevel}`);if(e?.logVerbosityLevel===void 0)n.logVerbosityLevel=0;else if(typeof e.logVerbosityLevel!="number"||!Number.isInteger(e.logVerbosityLevel))throw new Error(`log verbosity level is not valid: ${e.logVerbosityLevel}`);e?.terminate===void 0&&(n.terminate=!1);let s=0;return e?.tag!==void 0&&(s=ze(e.tag,a)),r=t._OrtCreateRunOptions(n.logSeverityLevel,n.logVerbosityLevel,!!n.terminate,s),r===0&&Oe("Can't create run options."),e?.extra!==void 0&&hr(e.extra,"",new WeakSet,(u,l)=>{let o=ze(u,a),c=ze(l,a);t._OrtAddRunConfigEntry(r,o,c)!==0&&Oe(`Can't set a run config entry: ${u} - ${l}.`)}),[r,a]}catch(s){throw r!==0&&t._OrtReleaseRunOptions(r),a.forEach(u=>t._free(u)),s}}});var rd,nd,ad,od,Vo,No=F(()=>{"use strict";Yt();Zr();rd=e=>{switch(e){case"disabled":return 0;case"basic":return 1;case"extended":return 2;case"all":return 99;default:throw new Error(`unsupported graph optimization level: ${e}`)}},nd=e=>{switch(e){case"sequential":return 0;case"parallel":return 1;default:throw new Error(`unsupported execution mode: ${e}`)}},ad=e=>{e.extra||(e.extra={}),e.extra.session||(e.extra.session={});let t=e.extra.session;t.use_ort_model_bytes_directly||(t.use_ort_model_bytes_directly="1"),e.executionProviders&&e.executionProviders.some(r=>(typeof r=="string"?r:r.name)==="webgpu")&&(e.enableMemPattern=!1)},od=(e,t,r)=>{for(let a of t){let n=typeof a=="string"?a:a.name;switch(n){case"xnnpack":n="XNNPACK";break;case"webnn":if(n="WEBNN",typeof a!="string"){let u=a;if(u?.deviceType){let l=ze("deviceType",r),o=ze(u.deviceType,r);Me()._OrtAddSessionConfigEntry(e,l,o)!==0&&Oe(`Can't set a session config entry: 'deviceType' - ${u.deviceType}.`)}if(u?.numThreads){let l=u.numThreads;(typeof l!="number"||!Number.isInteger(l)||l<0)&&(l=0);let o=ze("numThreads",r),c=ze(l.toString(),r);Me()._OrtAddSessionConfigEntry(e,o,c)!==0&&Oe(`Can't set a session config entry: 'numThreads' - ${u.numThreads}.`)}if(u?.powerPreference){let l=ze("powerPreference",r),o=ze(u.powerPreference,r);Me()._OrtAddSessionConfigEntry(e,l,o)!==0&&Oe(`Can't set a session config entry: 'powerPreference' - ${u.powerPreference}.`)}}break;case"webgpu":if(n="JS",typeof a!="string"){let u=a;if(u?.preferredLayout){if(u.preferredLayout!=="NCHW"&&u.preferredLayout!=="NHWC")throw new Error(`preferredLayout must be either 'NCHW' or 'NHWC': ${u.preferredLayout}`);let l=ze("preferredLayout",r),o=ze(u.preferredLayout,r);Me()._OrtAddSessionConfigEntry(e,l,o)!==0&&Oe(`Can't set a session config entry: 'preferredLayout' - ${u.preferredLayout}.`)}}break;case"wasm":case"cpu":continue;default:throw new Error(`not supported execution provider: ${n}`)}let s=ze(n,r);Me()._OrtAppendExecutionProvider(e,s)!==0&&Oe(`Can't append execution provider: ${n}.`)}},Vo=e=>{let t=Me(),r=0,a=[],n=e||{};ad(n);try{let s=rd(n.graphOptimizationLevel??"all"),u=nd(n.executionMode??"sequential"),l=typeof n.logId=="string"?ze(n.logId,a):0,o=n.logSeverityLevel??2;if(!Number.isInteger(o)||o<0||o>4)throw new Error(`log serverity level is not valid: ${o}`);let c=n.logVerbosityLevel??0;if(!Number.isInteger(c)||c<0||c>4)throw new Error(`log verbosity level is not valid: ${c}`);let f=typeof n.optimizedModelFilePath=="string"?ze(n.optimizedModelFilePath,a):0;if(r=t._OrtCreateSessionOptions(s,!!n.enableCpuMemArena,!!n.enableMemPattern,u,!!n.enableProfiling,0,l,o,c,f),r===0&&Oe("Can't create session options."),n.executionProviders&&od(r,n.executionProviders,a),n.freeDimensionOverrides)for(let[y,h]of Object.entries(n.freeDimensionOverrides)){if(typeof y!="string")throw new Error(`free dimension override name must be a string: ${y}`);if(typeof h!="number"||!Number.isInteger(h)||h<0)throw new Error(`free dimension override value must be a non-negative integer: ${h}`);let w=ze(y,a);t._OrtAddFreeDimensionOverride(r,w,h)!==0&&Oe(`Can't set a free dimension override: ${y} - ${h}.`)}return n.extra!==void 0&&hr(n.extra,"",new WeakSet,(y,h)=>{let w=ze(y,a),v=ze(h,a);t._OrtAddSessionConfigEntry(r,w,v)!==0&&Oe(`Can't set a session config entry: ${y} - ${h}.`)}),[r,a]}catch(s){throw r!==0&&t._OrtReleaseSessionOptions(r),a.forEach(u=>t._free(u)),s}}});var Ln,gr,yr,Xr,br,Qr,Gn,We=F(()=>{"use strict";Ln=e=>{switch(e){case"int8":return 3;case"uint8":return 2;case"bool":return 9;case"int16":return 5;case"uint16":return 4;case"int32":return 6;case"uint32":return 12;case"float16":return 10;case"float32":return 1;case"float64":return 11;case"string":return 8;case"int64":return 7;case"uint64":return 13;default:throw new Error(`unsupported data type: ${e}`)}},gr=e=>{switch(e){case 3:return"int8";case 2:return"uint8";case 9:return"bool";case 5:return"int16";case 4:return"uint16";case 6:return"int32";case 12:return"uint32";case 10:return"float16";case 1:return"float32";case 11:return"float64";case 8:return"string";case 7:return"int64";case 13:return"uint64";default:throw new Error(`unsupported data type: ${e}`)}},yr=e=>[void 0,4,1,1,2,2,4,8,void 0,1,2,8,4,8,void 0,void 0,void 0][e],Xr=e=>{switch(e){case"float16":return Uint16Array;case"float32":return Float32Array;case"uint8":return Uint8Array;case"int8":return Int8Array;case"uint16":return Uint16Array;case"int16":return Int16Array;case"int32":return Int32Array;case"bool":return Uint8Array;case"float64":return Float64Array;case"uint32":return Uint32Array;case"int64":return BigInt64Array;case"uint64":return BigUint64Array;default:throw new Error(`unsupported type: ${e}`)}},br=e=>{switch(e){case"verbose":return 0;case"info":return 1;case"warning":return 2;case"error":return 3;case"fatal":return 4;default:throw new Error(`unsupported logging level: ${e}`)}},Qr=e=>e==="float32"||e==="int32"||e==="int64"||e==="bool"||e==="float16"||e==="uint32",Gn=e=>{switch(e){case"none":return 0;case"cpu":return 1;case"cpu-pinned":return 2;case"texture":return 3;case"gpu-buffer":return 4;default:throw new Error(`unsupported data location: ${e}`)}}});var id,sd,Uo,Ho,Lo,ud,Pe,At=F(()=>{"use strict";We();id=["V","I","W","E","F"],sd=(e,t)=>{console.log(`[${id[e]},${new Date().toISOString()}]${t}`)},Lo=(e,t)=>{Uo=e,Ho=t},ud=(e,t)=>{let r=br(e),a=br(Uo);r>=a&&sd(r,typeof t=="function"?t():t)},Pe=(...e)=>{Ho&&ud(...e)}});var Go,Fo=F(()=>{"use strict";We();Go=(e,t)=>new(Xr(t))(e)});var Jr=F(()=>{"use strict"});var en,ld,qo,qn,Fn,Ko,Yo=F(()=>{"use strict";At();Jr();en=e=>Math.ceil(e/16)*16,ld=1,qo=()=>ld++,qn=async(e,t,r,a)=>{let n=en(r),s=e.device.createBuffer({size:n,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ});try{let u=e.getCommandEncoder();e.endComputePass(),u.copyBufferToBuffer(t,0,s,0,n),e.flush(),await s.mapAsync(GPUMapMode.READ);let l=s.getMappedRange();if(a){let o=a();return o.set(new Uint8Array(l,0,r)),o}else return new Uint8Array(l.slice(0,r))}finally{s.destroy()}},Fn=class{constructor(t){this.backend=t;this.storageCache=new Map,this.freeBuffers=new Map,this.freeUniformBuffers=new Map,this.buffersForUploadingPending=[],this.buffersPending=[],this.externalBuffers=new Map}upload(t,r){let a=r.buffer,n=r.byteOffset,s=r.byteLength,u=en(s),l=this.storageCache.get(t);if(!l)throw new Error("gpu data for uploading does not exist");if(l.originalSize!==s)throw new Error(`inconsistent data size. gpu data size=${l.originalSize}, data size=${s}`);let o=this.backend.device.createBuffer({mappedAtCreation:!0,size:u,usage:GPUBufferUsage.MAP_WRITE|GPUBufferUsage.COPY_SRC}),c=o.getMappedRange();new Uint8Array(c).set(new Uint8Array(a,n,s)),o.unmap();let f=this.backend.getCommandEncoder();this.backend.endComputePass(),f.copyBufferToBuffer(o,0,l.gpuData.buffer,0,u),Pe("verbose",()=>`[WebGPU] GpuDataManager.upload(id=${t})`),this.buffersForUploadingPending.push(o)}memcpy(t,r){let a=this.storageCache.get(t);if(!a)throw new Error("source gpu data for memcpy does not exist");let n=this.storageCache.get(r);if(!n)throw new Error("destination gpu data for memcpy does not exist");if(a.originalSize!==n.originalSize)throw new Error("inconsistent source and destination gpu data size");let s=en(a.originalSize),u=this.backend.getCommandEncoder();this.backend.endComputePass(),u.copyBufferToBuffer(a.gpuData.buffer,0,n.gpuData.buffer,0,s)}registerExternalBuffer(t,r,a){let n;if(a){if(n=this.externalBuffers.get(a),n===void 0)throw new Error("previous buffer is not registered");if(t===a)return Pe("verbose",()=>`[WebGPU] GpuDataManager.registerExternalBuffer(size=${r}) => id=${n}, buffer is the same, skip.`),n;this.externalBuffers.delete(a)}else n=qo();return this.storageCache.set(n,{gpuData:{id:n,type:0,buffer:t},originalSize:r}),this.externalBuffers.set(t,n),Pe("verbose",()=>`[WebGPU] GpuDataManager.registerExternalBuffer(size=${r}) => id=${n}, registered.`),n}unregisterExternalBuffer(t){let r=this.externalBuffers.get(t);r!==void 0&&(this.storageCache.delete(r),this.externalBuffers.delete(t),Pe("verbose",()=>`[WebGPU] GpuDataManager.unregisterExternalBuffer() => id=${r}`))}create(t,r=GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST){let a=en(t),n,s=(r&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE,u=(r&GPUBufferUsage.UNIFORM)===GPUBufferUsage.UNIFORM;if(s||u){let o=s?this.freeBuffers:this.freeUniformBuffers,c=o.get(a);c||(c=[],o.set(a,c)),c.length>0?n=c.pop():n=this.backend.device.createBuffer({size:a,usage:r})}else n=this.backend.device.createBuffer({size:a,usage:r});let l={id:qo(),type:0,buffer:n};return this.storageCache.set(l.id,{gpuData:l,originalSize:t}),Pe("verbose",()=>`[WebGPU] GpuDataManager.create(size=${t}) => id=${l.id}`),l}get(t){return this.storageCache.get(t)?.gpuData}release(t){let r=this.storageCache.get(t);if(!r)throw new Error("releasing data does not exist");return Pe("verbose",()=>`[WebGPU] GpuDataManager.release(id=${t}), gpuDataId=${r.gpuData.id}`),this.storageCache.delete(t),this.buffersPending.push(r.gpuData.buffer),r.originalSize}async download(t,r){let a=this.storageCache.get(t);if(!a)throw new Error("data does not exist");await qn(this.backend,a.gpuData.buffer,a.originalSize,r)}refreshPendingBuffers(){for(let t of this.buffersForUploadingPending)t.destroy();this.buffersForUploadingPending=[];for(let t of this.buffersPending)(t.usage&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE?this.freeBuffers.get(t.size).push(t):(t.usage&GPUBufferUsage.UNIFORM)===GPUBufferUsage.UNIFORM?this.freeUniformBuffers.get(t.size).push(t):t.destroy();this.buffersPending=[]}dispose(){this.freeBuffers.forEach(t=>{t.forEach(r=>{r.destroy()})}),this.freeUniformBuffers.forEach(t=>{t.forEach(r=>{r.destroy()})}),this.storageCache.forEach(t=>{t.gpuData.buffer.destroy()}),this.storageCache=new Map,this.freeBuffers=new Map,this.freeUniformBuffers=new Map}},Ko=(...e)=>new Fn(...e)});var jn,J,ke=F(()=>{"use strict";jn=class{constructor(t){Object.assign(this,t)}get cacheKey(){return this.key||(this.key=Object.getOwnPropertyNames(this).sort().map(t=>`${this[t]}`).join(";")),this.key}},J=e=>new jn(e)});var Kn,dt,V,Vt,tn,rn,nn,be=F(()=>{"use strict";Kn=class{static calcMatMulShape(t,r){return t[1]!==r[0]?void 0:[t[0],r[1]]}},dt=class{static calcShape(t,r,a=!1){let n=t.length,s=r.length;if(n===0)return r;if(s===0)return t;let u=Math.max(t.length,r.length),l=new Array(u);if(a){if(n<2||s<2)return;let o=Kn.calcMatMulShape([t[n-2],t[n-1]],[r[s-2],r[s-1]]);if(o===void 0)return;[l[u-2],l[u-1]]=o}for(let o=a?3:1;o<=u;o++){let c=n-o<0?1:t[n-o],f=s-o<0?1:r[s-o];if(c!==f&&c>1&&f>1)return;l[u-o]=Math.max(c,f)}return l}static isValidBroadcast(t,r){let a=t.length,n=r.length;if(a>n)return!1;for(let s=1;s<=a;s++)if(t[a-s]!==1&&t[a-s]!==r[n-s])return!1;return!0}},V=class e{static size(t){return e.getSizeFromDimensionRange(t,0,t.length)}static sizeFromDimension(t,r){if(r<0||r>t.length)throw new Error(`invalid dimension of ${r} for sizeFromDimension as Tensor has ${t.length} dimensions.`);return e.getSizeFromDimensionRange(t,r,t.length)}static sizeToDimension(t,r){if(r<0||r>t.length)throw new Error(`invalid dimension of ${r} for sizeToDimension as Tensor has ${t.length} dimensions.`);return e.getSizeFromDimensionRange(t,0,r)}static getSizeFromDimensionRange(t,r,a){let n=1;for(let s=r;s<a;s++){if(t[s]<0)throw new Error("cannot get valid size from specified dimension range. Most likely the range contains negative values in them.");n*=t[s]}return n}static computeStrides(t){let r=t.length;if(r===0)return[];if(r===1)return[1];let a=new Array(r);a[r-1]=1,a[r-2]=t[r-1];for(let n=r-3;n>=0;--n)a[n]=a[n+1]*t[n+1];return a}static normalizeAxis(t,r){if(t<-r&&t>=r)throw new Error("unsupported axis for this operation.");return t<0?t+r:t}static normalizeAxes(t,r){return t.map(a=>this.normalizeAxis(a,r??t.length))}static sortBasedOnPerm(t,r){return r?r.map(a=>t[a]):t.slice().reverse()}static padShape(t,r){let a=t.length;return t.map((n,s)=>n+r[s]+r[s+a])}static areEqual(t,r){return t.length!==r.length?!1:t.every((a,n)=>a===r[n])}},Vt=class e{static adjustPoolAttributes(t,r,a,n,s,u){if(!t&&a.length!==r.length-2)throw new Error("length of specified kernel shapes should be 2 less than length of input dimensions");if(t)for(let l=0;l<r.length-2;l++)l>=a.length?a.push(r[l+2]):a[l]=r[l+2];for(let l=0;l<a.length;l++)if(l<n.length){if(n[l]<0)throw new Error("strides should be greater than or equal to 1")}else n.push(1);for(let l=0;l<a.length;l++)if(l<s.length){if(s[l]<0)throw new Error("dilations should be greater than or equal to 1")}else s.push(1);for(let l=0;l<a.length*2;l++)if(l<u.length){if(u[l]<0)throw new Error("pad should be greater than or equal to 1")}else u.push(0);for(let l=0;l<a.length;l++){if(a[l]<=0)throw new Error("kernel shapes need to be greater than 0");if(u[l]>=a[l]||u[l+a.length]>=a[l])throw new Error("pads should be smaller than kernel")}}static adjustPadsBasedOnAutoPad(t,r,a,n,s,u,l){if(l){if(s.length!==2*(t.length-2))throw new Error("length of pads should be twice the length of data dimensions");if(r.length!==t.length-2)throw new Error("length of strides should be the length of data dimensions");if(n.length!==t.length-2)throw new Error("length of kernel shapes should be the length of data dimensions");for(let o=0;o<t.length-2;o++)e.adjustPadAndReturnShape(t[o+(u?1:2)],r[o],a[o],n[o],s,o,o+t.length-2,l)}}static computePoolOutputShape(t,r,a,n,s,u,l){if(r.length<=0)throw new Error("input shape must be of size greater than 0");let o=[r[0],r[1]];return e.computeShapeHelper(t,r,o,a,n,s,u,l),o}static computeConvOutputShape(t,r,a,n,s,u,l){if(t.length<=0||r.length<=0)throw new Error("invalid input tensor dims or invalid filter tensor dims");let o=[t[0],r[0]];return e.computeShapeHelper(!1,t,o,a,n,s,u,l),o}static computeShapeHelper(t,r,a,n,s,u,l,o){if(t)for(let c=0;c<r.length-2;c++)a.push(1);else for(let c=0;c<r.length-2;c++)a.push(e.adjustPadAndReturnShape(r[c+2],n[c],s[c],u[c],l,c,c+r.length-2,o))}static adjustPadAndReturnShape(t,r,a,n,s,u,l,o){let c=a*(n-1)+1;if(o&&o!=="NOTSET")switch(o){case"VALID":return s[u]=0,s[l]=0,Math.floor((t-c)/r+1);case"SAME_LOWER":case"SAME_UPPER":if(a!==1)throw new Error("Dilation not supported for SAME_UPPER or SAME_LOWER");{let y=((t+r-1)/r-1)*r+n-t;return s[u]=Math.floor(o==="SAME_LOWER"?(y+1)/2:y/2),s[l]=y-s[u],Math.floor((t+y-n)/r+1)}default:throw new Error("Unsupported AutoPad type")}else return Math.floor((t+s[u]+s[l]-c)/r+1)}},tn=class{static getShapeOfGemmResult(t,r,a,n,s){if(t.length!==2||a.length!==2)throw new Error("shape need to be of size 2");let u,l,o;r?(u=t[1],l=t[0]):(u=t[0],l=t[1]);let c=-1;if(n?(o=a[0],c=1):(o=a[1],c=0),a[c]!==l)throw new Error("dimension mismatch");if(u<=0||o<=0||l<=0)throw new Error("invalid shape specified");if(s&&!dt.isValidBroadcast(s,[u,o]))throw new Error("gemm: invalid bias shape for broadcast");return[u,o,l]}},rn=-34028234663852886e22,nn=34028234663852886e22});var dd,Zo,Ae,pe,Ze,Fe,rt,nt,Zn,U,q,Xo,Yn,Qo,Xn,Re,we=F(()=>{"use strict";We();be();dd=64,Zo=(e,t)=>{if(t===3)throw new Error("vec3 has same alignment as vec4, use vec4 instead");switch(e){case 10:return t>1?`vec${t}<f16>`:"f16";case 1:return t>1?`vec${t}<f32>`:"f32";case 6:return t>1?`vec${t}<i32>`:"i32";case 12:return t>1?`vec${t}<u32>`:"u32";case 7:if(t>1)throw new Error("currently not supported vecX of uint64 yet");return["vec2<u32>","i32"];case 13:if(t>1)throw new Error("currently not supported vecX of uint64 yet");return["vec2<u32>","u32"];case 9:if(t!==4)throw new Error("bool must be vec4");return["u32","vec4<bool>"];default:throw new Error(`Unknown data type: ${e}`)}},Ae=(e,t=1)=>{let r=Zo(e,t);return typeof r=="string"?r:r[0]},pe=e=>e.length===0?[]:[{type:"uint32",data:e},{type:"uint32",data:V.computeStrides(e)}],Ze=e=>e%4===0?4:e%2===0?2:1,Fe=(e="f32",t,r="0")=>!t||t===1?`${e}(${r})`:`vec${t}<${e}>(${r})`,rt=(e,t,r)=>e==="f32"?r:t===1?`f32(${r})`:`vec${t}f(${r})`,nt=(e,t)=>t===4?`(${e}.x + ${e}.y + ${e}.z + ${e}.w)`:t===2?`(${e}.x + ${e}.y)`:t===3?`(${e}.x + ${e}.y + ${e}.z)`:e,Zn=(e,t,r,a,n)=>{let s=typeof r=="number",u=s?r:r.length,l=[...new Array(u).keys()],o=u<2?"u32":u<=4?`vec${u}<u32>`:`array<u32, ${u}>`,c=Zo(t,n),f=typeof c=="string"?c:c[1],y=typeof c=="string"?c:c[0],h={indices:o,value:f,storage:y,tensor:t},w=G=>typeof G=="string"?G:`${G}u`,v={offsetToIndices:!1,indicesToOffset:!1,broadcastedIndicesToOffset:!1,set:!1,setByIndices:!1,get:!1,getByIndices:!1},$=s?"uniforms.":"",C=`${$}${e}_shape`,_=`${$}${e}_strides`,I="";for(let G=0;G<u-1;G++)I+=`
    let dim${G} = current / ${_}[${G}];
    let rest${G} = current % ${_}[${G}];
    indices[${G}] = dim${G};
    current = rest${G};
    `;I+=`indices[${u-1}] = current;`;let k=u<2?"":`
  fn o2i_${e}(offset: u32) -> ${h.indices} {
    var indices: ${h.indices};
    var current = offset;
    ${I}
    return indices;
  }`,A=G=>(v.offsetToIndices=!0,u<2?G:`o2i_${e}(${G})`),B=[];if(u>=2)for(let G=u-1;G>=0;G--)B.push(`${_}[${G}] * (indices[${G}])`);let T=u<2?"":`
  fn i2o_${e}(indices: ${h.indices}) -> u32 {
    return ${B.join("+")};
  }`,z=G=>(v.indicesToOffset=!0,u<2?G:`i2o_${e}(${G})`),W=(...G)=>u===0?"0u":`${h.indices}(${G.map(w).join(",")})`,K=(G,le)=>u<2?`${G}`:`${G}[${le}]`,ee=(G,le,fe)=>u<2?`${G}=${fe};`:`${G}[${le}]=${fe};`,M={},Z=(G,le)=>{v.broadcastedIndicesToOffset=!0;let fe=`${le.name}broadcastedIndicesTo${e}Offset`;if(fe in M)return`${fe}(${G})`;let Ue=[];for(let Ye=u-1;Ye>=0;Ye--){let Be=le.indicesGet("outputIndices",Ye+le.rank-u);Ue.push(`${K(_,Ye)} * (${Be} % ${K(C,Ye)})`)}return M[fe]=`fn ${fe}(outputIndices: ${le.type.indices}) -> u32 {
             return ${Ue.length>0?Ue.join("+"):"0u"};
           }`,`${fe}(${G})`},xe=(G,le)=>(()=>{if(h.storage===h.value)return`${e}[${G}]=${le};`;if(h.storage==="vec2<u32>"&&h.value==="i32")return`${e}[${G}]=vec2<u32>(u32(${le}), select(0u, 0xFFFFFFFFu, ${le} < 0));`;if(h.storage==="vec2<u32>"&&h.value==="u32")return`${e}[${G}]=vec2<u32>(u32(${le}), 0u);`;if(h.storage==="u32"&&h.value==="vec4<bool>")return`${e}[${G}]=dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(${le}));`;throw new Error(`not supported combination of storage type ${h.storage} and value type ${h.value} yet`)})(),re=G=>(()=>{if(h.storage===h.value)return`${e}[${G}]`;if(h.storage==="vec2<u32>"&&h.value==="i32")return`i32(${e}[${G}].x)`;if(h.storage==="vec2<u32>"&&h.value==="u32")return`u32(${e}[${G}].x)`;if(h.storage==="u32"&&h.value==="vec4<bool>")return`vec4<bool>(bool(${e}[${G}] & 0xFFu), bool(${e}[${G}] & 0xFF00u), bool(${e}[${G}] & 0xFF0000u), bool(${e}[${G}] & 0xFF000000u))`;throw new Error(`not supported combination of storage type ${h.storage} and value type ${h.value} yet`)})(),ve=u<2?"":`
  fn get_${e}ByIndices(indices: ${h.indices}) -> ${f} {
    return ${re(`i2o_${e}(indices)`)};
  }`,j=u<2?"":(()=>{let G=l.map(fe=>`d${fe}: u32`).join(", "),le=l.map(fe=>`d${fe}`).join(", ");return`
  fn get_${e}(${G}) -> ${f} {
    return get_${e}ByIndices(${W(le)});
  }`})(),$e=(...G)=>{if(G.length!==u)throw new Error(`indices length must be ${u}`);let le=G.map(w).join(",");return u===0?re("0u"):u===1?re(le[0]):(v.get=!0,v.getByIndices=!0,v.indicesToOffset=!0,`get_${e}(${le})`)},Ce=G=>u<2?re(G):(v.getByIndices=!0,v.indicesToOffset=!0,`get_${e}ByIndices(${G})`),_e=u<2?"":`
  fn set_${e}ByIndices(indices: ${h.indices}, value: ${f}) {
    ${xe(`i2o_${e}(indices)`,"value")}
  }`,me=u<2?"":(()=>{let G=l.map(fe=>`d${fe}: u32`).join(", "),le=l.map(fe=>`d${fe}`).join(", ");return`
  fn set_${e}(${G}, value: ${f}) {
    set_${e}ByIndices(${W(le)}, value);
  }`})();return{impl:()=>{let G=[];return s||(G.push(`const ${C} = ${h.indices}(${r.join(",")});`),G.push(`const ${_} = ${h.indices}(${V.computeStrides(r).join(",")});`)),v.offsetToIndices&&G.push(k),v.indicesToOffset&&G.push(T),v.broadcastedIndicesToOffset&&Object.values(M).forEach(le=>G.push(le)),v.set&&G.push(me),v.setByIndices&&G.push(_e),v.get&&G.push(j),v.getByIndices&&G.push(ve),G.join(`
`)},type:h,offsetToIndices:A,indicesToOffset:z,broadcastedIndicesToOffset:Z,indices:W,indicesGet:K,indicesSet:ee,set:(...G)=>{if(G.length!==u+1)throw new Error(`indices length must be ${u}`);let le=G[u];if(typeof le!="string")throw new Error("value must be string");let fe=G.slice(0,u).map(w).join(",");return u===0?xe("0u",le):u===1?xe(fe[0],le):(v.set=!0,v.setByIndices=!0,v.indicesToOffset=!0,`set_${e}(${fe}, ${le})`)},setByOffset:xe,setByIndices:(G,le)=>u<2?xe(G,le):(v.setByIndices=!0,v.indicesToOffset=!0,`set_${e}ByIndices(${G}, ${le});`),get:$e,getByOffset:re,getByIndices:Ce,usage:a,name:e,strides:_,shape:C,rank:u}},U=(e,t,r,a=1)=>Zn(e,t,r,"input",a),q=(e,t,r,a=1)=>Zn(e,t,r,"output",a),Xo=(e,t,r,a=1)=>Zn(e,t,r,"internal",a),Yn=class{constructor(t){this.normalizedDispatchGroup=t;this.internalVariables=[];this.variables=[];this.uniforms=[];this.variableIndex=0}guardAgainstOutOfBoundsWorkgroupSizes(t){return`if (global_idx >= ${typeof t=="number"?`${t}u`:t}) { return; }`}mainStart(t=dd){let r=typeof t=="number"?t:t[0],a=typeof t=="number"?1:t[1],n=typeof t=="number"?1:t[2],s=this.normalizedDispatchGroup[1]===1&&this.normalizedDispatchGroup[2]===1,u=s?`@builtin(global_invocation_id) global_id : vec3<u32>,
    @builtin(local_invocation_id) local_id : vec3<u32>`:`@builtin(local_invocation_index) local_index : u32,
    @builtin(workgroup_id) workgroup_id : vec3<u32>,
    @builtin(num_workgroups) num_workgroups : vec3<u32>`,l=s?"let global_idx = global_id.x;":`let global_idx = (workgroup_id.z * num_workgroups[0] * num_workgroups[1] +
          workgroup_id.y * num_workgroups[0] + workgroup_id.x) * ${r*a*n}u + local_index;`;return`@compute @workgroup_size(${r}, ${a}, ${n})
  fn main(${u}) {
    ${l}
  `}appendVariableUniforms(t){t.rank!==0&&(t.shape.startsWith("uniforms.")&&this.uniforms.push({name:t.shape.replace("uniforms.",""),type:t.type.indices}),t.strides.startsWith("uniforms.")&&this.uniforms.push({name:t.strides.replace("uniforms.",""),type:t.type.indices}))}declareVariable(t,r){if(t.usage==="internal")throw new Error("cannot use internal variable with declareVariable(). use registerInternalVariables() instead.");this.variables.push(t),this.appendVariableUniforms(t);let a=t.usage==="input"?"read":"read_write",n=t.type.storage;return`@group(0) @binding(${r}) var<storage, ${a}> ${t.name}: array<${n}>;`}declareVariables(...t){return t.map(r=>this.declareVariable(r,this.variableIndex++)).join(`
`)}registerInternalVariable(t){if(t.usage!=="internal")throw new Error("cannot use input or output variable with registerInternalVariable(). use declareVariables() instead.");this.internalVariables.push(t),this.appendVariableUniforms(t)}registerInternalVariables(...t){return t.forEach(r=>this.registerInternalVariable(r)),this}registerUniform(t,r){return this.uniforms.push({name:t,type:r}),this}registerUniforms(t){return this.uniforms=this.uniforms.concat(t),this}uniformDeclaration(){if(this.uniforms.length===0)return"";let t=[];for(let{name:r,type:a}of this.uniforms)t.push(`${r}:${a}`);return`
      struct Uniforms { ${t.join(", ")} };
      @group(0) @binding(${this.variableIndex}) var<uniform> uniforms: Uniforms;`}get additionalImplementations(){return this.uniformDeclaration()+this.variables.map(t=>t.impl()).join(`
`)+this.internalVariables.map(t=>t.impl()).join(`
`)}},Qo=e=>new Yn(e),Xn=(e,t)=>{let r=e.length,a=[];for(let n=0;n<r;n++){let s=r-1-n,u=e[s]||1;(t[t.length-1-n]||1)>1&&u===1&&a.unshift(s)}return a},Re=e=>e<=4});var cd,Jo,pd,fd,at,ei,ti,Zt=F(()=>{"use strict";be();ke();we();cd=e=>{if(!e||e.length!==1)throw new Error("Transpose requires 1 input.")},Jo=(e,t)=>t&&t.length!==e?[...new Array(e).keys()].reverse():t,pd=(e,t)=>V.sortBasedOnPerm(e,Jo(e.length,t)),fd=(e,t,r,a)=>{let n=[];n.push(`fn perm(i: ${a.type.indices}) -> ${r.type.indices} {
    var a: ${r.type.indices};`);for(let s=0;s<t;++s)n.push(r.indicesSet("a",e[s],`i[${s}]`));return n.push("return a;}"),n.join(`
`)},at=(e,t)=>{let r=e.dataType,a=e.dims.length,n=Jo(a,t),s=Re(a),u=pd(e.dims,n),l=s?u.length:u,o=s?a:e.dims,c=q("output",r,l),f=U("a",r,o),y=h=>`
  ${h.registerUniform("output_size","u32").declareVariables(f,c)}

  ${fd(n,a,f,c)}

  ${h.mainStart()}
    ${h.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

    let indices = ${c.offsetToIndices("global_idx")};
    let aIndices = perm(indices);

    ${c.setByOffset("global_idx",f.getByIndices("aIndices"))}
  }`;return{name:"Transpose",shaderCache:{hint:`${t}`,inputDependencies:s?["rank"]:["dims"]},getRunData:h=>{let w=V.size(u);return{outputs:[{dims:u,dataType:h[0].dataType}],dispatchGroup:{x:Math.ceil(w/64)},programUniforms:s?[{type:"uint32",data:w},...pe(h[0].dims),...pe(u)]:[{type:"uint32",data:w}]}},getShaderSource:y}},ei=(e,t)=>{cd(e.inputs),e.compute(at(e.inputs[0],t.perm))},ti=e=>J({perm:e.perm})});var md,hd,gd,yd,bd,wd,vd,$d,Sd,xd,ct,ri,ni,ai,oi,ii,si,ui,li,di,ci,pi=F(()=>{"use strict";be();we();an();Zt();md={max:"select(bestValue, candidate, candidate > bestValue)",min:"select(bestValue, candidate, candidate < bestValue)",mean:"bestValue + candidate",sum:"bestValue + candidate",prod:"bestValue * candidate",sumSquare:"bestValue + candidate * candidate",logSumExp:"bestValue + exp(candidate)",l1:"bestValue + abs(candidate)",l2:"bestValue + candidate * candidate",logSum:"bestValue + candidate"},hd={max:"select(bestValue, candidate, candidate > bestValue)",min:"select(bestValue, candidate, candidate < bestValue)",mean:"bestValue + candidate",sum:"bestValue + candidate",prod:"bestValue * candidate",sumSquare:"bestValue + candidate",logSumExp:"bestValue + candidate",l1:"bestValue + candidate",l2:"bestValue + candidate",logSum:"bestValue + candidate"},gd={max:"_A[offset]",min:"_A[offset]",mean:"0",sum:"0",prod:"1",sumSquare:"0",logSumExp:"0",l1:"0",l2:"0",logSum:"0"},yd={max:"bestValue",min:"bestValue",sum:"bestValue",prod:"bestValue",sumSquare:"bestValue",logSumExp:"log(bestValue)",l1:"bestValue",l2:"sqrt(bestValue)",logSum:"log(bestValue)"},bd=(e,t)=>{let r=[];for(let a=t-e;a<t;++a)r.push(a);return r},wd=(e,t)=>{let r=[],a=e.length;for(let s=0;s<a;s++)t.indexOf(s)===-1&&r.push(e[s]);let n=t.map(s=>e[s]);return[r,n]},vd=(e,t)=>{let r=e.length+t.length,a=[],n=0;for(let s=0;s<r;s++)t.indexOf(s)===-1?a.push(e[n++]):a.push(1);return a},$d=(e,t)=>{for(let r=0;r<e.length;++r)if(e[e.length-r-1]!==t-1-r)return!1;return!0},Sd=(e,t)=>{let r=[];if(!$d(e,t)){for(let a=0;a<t;++a)e.indexOf(a)===-1&&r.push(a);e.forEach(a=>r.push(a))}return r},xd=(e,t,r,a,n,s,u)=>{let l=r[0].dims,o=V.size(s),c=V.size(u),f=U("_A",r[0].dataType,l),y=q("output",n,s),h=32,w=`
          var<workgroup> aBestValues : array<${y.type.storage}, ${h}>;
       `;return{name:e,shaderCache:t,getShaderSource:$=>`
        ${$.registerUniform("reduceSize","u32").declareVariables(f,y)}
        ${w}
        fn DIV_CEIL(a : u32, b : u32) -> u32 {
          return ((a - 1u) / b + 1u);
         }
         ${$.mainStart(h)}
          let local_idx = local_id.x;

          let outputIndex = global_idx / ${h};
          let offset = outputIndex * uniforms.reduceSize;

          var bestValue = ${y.type.storage}(${gd[a]});
          let Length = uniforms.reduceSize;
          for (var k = local_idx; k < Length; k = k + ${h}) {
           let candidate = ${y.type.storage}(${f.getByOffset("offset + k")});
           bestValue = ${md[a]};
          }
          aBestValues[local_idx] = bestValue;
          workgroupBarrier();

         var reduceSize = min(Length, ${h}u);
         for (var currentSize = reduceSize / 2u; reduceSize > 1u;
             currentSize = reduceSize / 2u) {
           let interval = DIV_CEIL(reduceSize, 2u);
           if (local_idx < currentSize) {
            let candidate = aBestValues[local_idx + interval];
            bestValue = ${hd[a]};
            aBestValues[local_idx] = bestValue;
           }
           reduceSize = interval;
           workgroupBarrier();
         }

         if (local_idx == 0u) {
          ${y.setByOffset("outputIndex",`${a==="mean"?`bestValue / ${y.type.storage}(uniforms.reduceSize)`:`${yd[a]}`}`)};
         }
        }`,getRunData:()=>({outputs:[{dims:s,dataType:n}],dispatchGroup:{x:o},programUniforms:[{type:"uint32",data:c}]})}},ct=(e,t,r,a)=>{let n=e.inputs.length===1?r:Qn(e.inputs,r),s=n.axes;s.length===0&&!n.noopWithEmptyAxes&&(s=e.inputs[0].dims.map((w,v)=>v));let u=V.normalizeAxes(s,e.inputs[0].dims.length),l=u,o=e.inputs[0],c=Sd(l,e.inputs[0].dims.length);c.length>0&&(o=e.compute(at(e.inputs[0],c),{inputs:[0],outputs:[-1]})[0],l=bd(l.length,o.dims.length));let[f,y]=wd(o.dims,l),h=f;n.keepDims&&(h=vd(f,u)),e.compute(xd(t,{hint:n.cacheKey,inputDependencies:["type"]},[o],a,e.inputs[0].dataType,h,y),{inputs:[o]})},ri=(e,t)=>{ct(e,"ReduceMeanShared",t,"mean")},ni=(e,t)=>{ct(e,"ReduceL1Shared",t,"l1")},ai=(e,t)=>{ct(e,"ReduceL2Shared",t,"l2")},oi=(e,t)=>{ct(e,"ReduceLogSumExpShared",t,"logSumExp")},ii=(e,t)=>{ct(e,"ReduceMaxShared",t,"max")},si=(e,t)=>{ct(e,"ReduceMinShared",t,"min")},ui=(e,t)=>{ct(e,"ReduceProdShared",t,"prod")},li=(e,t)=>{ct(e,"ReduceSumShared",t,"sum")},di=(e,t)=>{ct(e,"ReduceSumSquareShared",t,"sumSquare")},ci=(e,t)=>{ct(e,"ReduceLogSumShared",t,"logSum")}});var pt,Id,on,Qn,ft,Cd,_d,Ad,Ed,Td,Od,kd,Rd,Pd,Bd,mt,fi,mi,hi,gi,yi,bi,wi,vi,$i,Si,ot,an=F(()=>{"use strict";be();ke();we();pi();pt=e=>{if(!e||e.length===0||e.length>2)throw new Error("Reduce op requires 1 or 2 inputs.");if(e.length===2&&e[1].dims.length!==1)throw new Error("Invalid axes input dims.")},Id=e=>["","",`var value = ${e.getByOffset("inputOffset")};`,""],on=(e,t,r,a,n,s,u=!1,l=!1)=>{let o=[],c=r[0].dims,f=V.normalizeAxes(n,r[0].dims.length),y=!l&&f.length===0;c.forEach((z,W)=>{y||f.indexOf(W)>=0?u&&o.push(1):o.push(z)});let h=[],w=U("_A",r[0].dataType,c),v=q("output",s,o),$=a(w,v,f),C=`inputOffset = ${w.indicesToOffset("inputIndices")};`,_=`let ${C};`,I=`var ${C};`,k=$[1]===""?"":I,A=($[1]===""?_:C)+`
`+$[2];for(let z=0,W=0;z<r[0].dims.length;z++)y||f.indexOf(z)>=0?(u&&W++,A=`for(var j${z}: u32 = 0; j${z} < ${r[0].dims[z]}; j${z}++) {
                ${$[2].includes("lastIndex")?`let lastIndex = j${z};`:""}
                ${w.indicesSet("inputIndices",z,`j${z}`)}
                ${A}
              }`):(h.push(`${w.indicesSet("inputIndices",z,v.indicesGet("outputIndices",W))};`),W++);let B=V.size(o);return{name:e,shaderCache:t,getShaderSource:z=>`
        ${z.declareVariables(w,v)}

        ${z.mainStart()}
          ${z.guardAgainstOutOfBoundsWorkgroupSizes(B)}
          var inputIndices: ${w.type.indices};
          let outputIndices = ${v.offsetToIndices("global_idx")};

          ${h.join(`
`)}
          ${$[0]}       // init ops for reduce max/min
          ${k}
          ${$[1]}
          ${A}
          ${$[3]}
          ${$.length===4?v.setByOffset("global_idx","value"):$.slice(4).join(`
`)}
        }`,getRunData:()=>({outputs:[{dims:o,dataType:s}],dispatchGroup:{x:Math.ceil(B/64)}})}},Qn=(e,t)=>{let r=[];return e[1].dims[0]>0&&e[1].getBigInt64Array().forEach(a=>r.push(Number(a))),J({axes:r,keepDims:t.keepDims,noopWithEmptyAxes:t.noopWithEmptyAxes})},ft=(e,t,r,a)=>{let n=e.inputs,s=n.length===1?r:Qn(n,r);e.compute(on(t,{hint:s.cacheKey},[n[0]],s.noopWithEmptyAxes&&s.axes.length===0?Id:a,s.axes,n[0].dataType,s.keepDims,s.noopWithEmptyAxes),{inputs:[0]})},Cd=(e,t)=>{pt(e.inputs),ft(e,"ReduceLogSum",t,(a,n)=>[`var value = ${n.type.storage}(0);`,"",`value += ${a.getByOffset("inputOffset")};`,"value = log(value);"])},_d=(e,t)=>{pt(e.inputs),ft(e,"ReduceL1",t,(a,n)=>[`var value = ${n.type.storage}(0);`,"",`value += abs(${a.getByOffset("inputOffset")});`,""])},Ad=(e,t)=>{pt(e.inputs),ft(e,"ReduceL2",t,(a,n)=>[`var t = ${n.type.value}(0); var value = ${n.type.value}(0);`,"",`t = ${a.getByOffset("inputOffset")}; value += (t * t);`,"value = sqrt(value);"])},Ed=(e,t)=>{pt(e.inputs),ft(e,"ReduceLogSumExp",t,(a,n)=>[`var value = ${n.type.storage}(0);`,"",`value += exp(${a.getByOffset("inputOffset")});`,"value = log(value);"])},Td=(e,t)=>{pt(e.inputs),ft(e,"ReduceMax",t,(a,n,s)=>{let u=[];for(let l=0;l<a.rank;l++)(s.indexOf(l)>=0||s.length===0)&&u.push(a.indicesSet("inputIndices",l,0));return[`${u.join(`
`)}`,`var value = ${a.getByOffset("inputOffset")};`,`value = max(value, ${a.getByOffset("inputOffset")});`,""]})},Od=(e,t)=>{pt(e.inputs),ft(e,"ReduceMean",t,(a,n,s)=>{let u=1;for(let l=0;l<a.rank;l++)(s.indexOf(l)>=0||s.length===0)&&(u*=e.inputs[0].dims[l]);return["var sum = f32(0);","",`sum += f32(${a.getByOffset("inputOffset")});`,`let value = ${n.type.value}(sum / ${u});`]})},kd=(e,t)=>{pt(e.inputs),ft(e,"ReduceMin",t,(a,n,s)=>{let u=[];for(let l=0;l<a.rank;l++)(s.indexOf(l)>=0||s.length===0)&&u.push(`inputIndices[${l}] = 0;`);return[`${u.join(`
`)}`,`var value = ${a.getByOffset("inputOffset")};`,`value = min(value, ${a.getByOffset("inputOffset")});`,""]})},Rd=(e,t)=>{pt(e.inputs),ft(e,"ReduceProd",t,(a,n)=>[`var value = ${n.type.storage}(1);`,"",`value *= ${a.getByOffset("inputOffset")};`,""])},Pd=(e,t)=>{pt(e.inputs),ft(e,"ReduceSum",t,(a,n)=>[`var value = ${n.type.storage}(0);`,"",`value += ${a.getByOffset("inputOffset")};`,""])},Bd=(e,t)=>{pt(e.inputs),ft(e,"ReduceSumSquare",t,(a,n)=>[`var t = ${n.type.value}(0); var value = ${n.type.value}(0);`,"",`t = ${a.getByOffset("inputOffset")}; value += t * t;`,""])},mt=(e,t,r)=>{if(t.length===0)return!!r;let a=1,n=1;for(let s=0;s<t.length;s++)t.indexOf(s)===-1?a*=e[s]:n*=e[s];return n<32&&a>1024},fi=(e,t)=>{mt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Od(e,t):ri(e,t)},mi=(e,t)=>{mt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?_d(e,t):ni(e,t)},hi=(e,t)=>{mt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Ad(e,t):ai(e,t)},gi=(e,t)=>{mt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Ed(e,t):oi(e,t)},yi=(e,t)=>{mt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Td(e,t):ii(e,t)},bi=(e,t)=>{mt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?kd(e,t):si(e,t)},wi=(e,t)=>{mt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Rd(e,t):ui(e,t)},vi=(e,t)=>{mt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Pd(e,t):li(e,t)},$i=(e,t)=>{mt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Bd(e,t):di(e,t)},Si=(e,t)=>{mt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Cd(e,t):ci(e,t)},ot=e=>J(e)});var xi,Ii,Ci,Jn,_i=F(()=>{"use strict";We();ke();an();xi=e=>{if(!e||e.length===0||e.length>2)throw new Error("ArgMinMaxOp op requires 1 or 2 inputs.");if(e[0].dataType!==1)throw new Error("Invalid input type.")},Ii=(e,t)=>{xi(e.inputs);let r=(a,n,s)=>{let u=[];for(let l=0;l<a.rank;l++)(s.indexOf(l)>=0||s.length===0)&&u.push(`inputIndices[${l}] = 0;`);return[`${u.join(`
`)}`,`var value = ${a.getByOffset("inputOffset")};
var bestIndex : i32 = 0;`,`if (${a.getByOffset("inputOffset")} ${t.selectLastIndex>0?"<=":"<"} value) {
         value = ${a.getByOffset("inputOffset")};
         bestIndex = i32(lastIndex);
       }`,"",n.setByOffset("global_idx","bestIndex")]};e.compute(on("ArgMin",{hint:t.cacheKey},[e.inputs[0]],r,[t.axis],7,t.keepDims),{inputs:[0]})},Ci=(e,t)=>{xi(e.inputs);let r=(a,n,s)=>{let u=[];for(let l=0;l<a.rank;l++)(s.indexOf(l)>=0||s.length===0)&&u.push(`inputIndices[${l}] = 0;`);return[`${u.join(`
`)}`,`var value = ${a.getByOffset("inputOffset")};
var bestIndex : i32 = 0;`,`if (${a.getByOffset("inputOffset")} ${t.selectLastIndex>0?">=":">"} value) {
         value = ${a.getByOffset("inputOffset")};
         bestIndex = i32(lastIndex);
       }`,"",n.setByOffset("global_idx","bestIndex")]};e.compute(on("argMax",{hint:t.cacheKey},[e.inputs[0]],r,[t.axis],7,t.keepDims),{inputs:[0]})},Jn=e=>J(e)});var Md,Ai,Dd,zd,Wd,sn,Vd,Ei,ea=F(()=>{"use strict";ke();Jr();we();Md=(e,t)=>{let r=e[0],a=e[1],n=e[2],s=e[3],u=e[4],l=e[5];if(u&&l)throw new Error("Attention cannot have both past and relative_position_bias");if(r.dims.length!==3)throw new Error('Input "input" must have 3 dimensions');let o=r.dims[0],c=r.dims[1],f=r.dims[2];if(n.dims.length!==1)throw new Error('Input "bias" is expected to have 1 dimensions');if(a.dims.length!==2)throw new Error('Input "weights" is expected to have 2 dimensions');if(a.dims[0]!==f)throw new Error("Input 1 dimension 0 should have same length as dimension 2 of input 0");if(n.dims[0]!==a.dims[1])throw new Error('Input "bias" dimension 0 should have same length as dimension 1 of input "weights"');let y=n.dims[0]/3,h=y,w=h;if(t.qkvHiddenSizes.length>0){if(t.qkvHiddenSizes.length!==3)throw new Error("qkv_hidden_sizes attribute should have 3 elements");for(let k of t.qkvHiddenSizes)if(k%t.numHeads!==0)throw new Error("qkv_hidden_sizes should be divisible by num_heads");y=t.qkvHiddenSizes[0],h=t.qkvHiddenSizes[1],w=t.qkvHiddenSizes[2]}let v=c;if(y!==h)throw new Error("qkv_hidden_sizes first element should be same as the second");if(n.dims[0]!==y+h+w)throw new Error('Input "bias" dimension 0 should have same length as sum of Q/K/V hidden sizes');let $=0;if(u){if(h!==w)throw new Error('Input "past" expect k_hidden_size == v_hidden_size');if(u.dims.length!==5)throw new Error('Input "past" must have 5 dimensions');if(u.dims[0]!==2)throw new Error('Input "past" first dimension must be 2');if(u.dims[1]!==o)throw new Error('Input "past" second dimension must be batch_size');if(u.dims[2]!==t.numHeads)throw new Error('Input "past" third dimension must be num_heads');if(u.dims[4]!==h/t.numHeads)throw new Error('Input "past" fifth dimension must be k_hidden_size / num_heads');t.pastPresentShareBuffer||($=u.dims[3])}let C=v+$,_=-1,I=0;if(s)throw new Error("Mask not supported");if(u)throw new Error("past is not supported");if(l)throw new Error("relativePositionBias is not supported");return{batchSize:o,sequenceLength:c,pastSequenceLength:$,kvSequenceLength:v,totalSequenceLength:C,maxSequenceLength:_,inputHiddenSize:f,hiddenSize:y,vHiddenSize:w,headSize:Math.floor(y/t.numHeads),vHeadSize:Math.floor(w/t.numHeads),numHeads:t.numHeads,isUnidirectional:!1,pastPresentShareBuffer:!1,maskFilterValue:t.maskFilterValue,maskType:I,scale:t.scale,broadcastResPosBias:!1,passPastInKv:!1,qkvFormat:1}},Ai=e=>J({...e}),Dd=(e,t,r,a)=>{let n=Ze(a),s=q("x",t.dataType,t.dims,n),u="threadMaxVector";n===2?u="max(threadMaxVector.x, threadMaxVector.y)":n===4&&(u="max(max(threadMaxVector.x, threadMaxVector.y), max(threadMaxVector.z, threadMaxVector.w))");let l=Ae(t.dataType),o=64,c=a/n;c<o?o=1:c/8<64&&(o=Math.ceil(c/8));let f=Math.ceil(a/n/o),y=h=>`
  const dInv: ${l} = 1 / ${a};
  const dComp = ${a/n};
  var<workgroup> wgMax: array<f32, ${o}>;
  var<workgroup> wgSum: array<f32, ${o}>;

  ${h.declareVariables(s)}
  @compute @workgroup_size(${o}, 1, 1)
  fn main(@builtin(workgroup_id) workgroup_id : vec3<u32>,
    @builtin(local_invocation_index) local_index : u32) {
    let localOffset = local_index * ${f};
    let offset: u32 = workgroup_id.x * dComp + localOffset;

    var threadMaxVector = ${Fe("f32",n,"-3.402823e+38f")};
    for (var i: u32 = 0; i < ${f} && i + localOffset < dComp; i++) {
      threadMaxVector = max(${rt(l,n,"x[offset + i]")}, threadMaxVector);
    }
    wgMax[local_index] = ${u};
    workgroupBarrier();

    var maxValue = -3.402823e+38f;
    for (var i = 0u; i < ${o}; i++) {
      maxValue = max(wgMax[i], maxValue);
    }

    var sumVector = ${Fe("f32",n,"0")};
    for (var i: u32 = 0; i < ${f} && i + localOffset < dComp; i++) {
      sumVector += exp(${rt(l,n,"x[offset + i]")} - maxValue);
    }
    wgSum[local_index] = ${nt("sumVector",n)};
    workgroupBarrier();

    var sum: f32 = 0;
    for (var i = 0u; i < ${o}; i++) {
      sum += wgSum[i];
    }

    if (sum == 0) {
      for (var i: u32 = 0; i < ${f} && i + localOffset < dComp; i++) {
        x[offset + i] = ${Fe(l,n,"dInv")};
      }
    } else {
      for (var i: u32 = 0; i < ${f} && i + localOffset < dComp; i++) {
        let f32input = ${rt(l,n,"x[offset + i]")};
        x[offset + i] = ${s.type.value}(exp(f32input - maxValue) / sum);
      }
    }
  }`;e.compute({name:"AttentionProbsSoftmax",shaderCache:{hint:`${a}`},getShaderSource:y,getRunData:()=>({outputs:[],dispatchGroup:{x:r}})},{inputs:[t],outputs:[]})},zd=(e,t,r,a,n,s)=>{let u=[n.batchSize,n.numHeads,n.sequenceLength,n.kvSequenceLength+n.pastSequenceLength],l=s.scale===0?1/Math.sqrt(n.headSize):s.scale,o=Ae(t.dataType),c=Ze(n.headSize),f=U("q",t.dataType,t.dims,c),y=U("key",r.dataType,r.dims,c),h=q("output",t.dataType,u),w=n.headSize/c,v=n.sequenceLength,$=n.totalSequenceLength,C=w,_=12,I={x:Math.ceil(n.totalSequenceLength/_),y:Math.ceil(n.sequenceLength/_),z:n.batchSize*n.numHeads},k=[t,r],A=T=>`
  const M: u32 = ${v}u;
  const N: u32 = ${$}u;
  const K: u32 = ${C}u;
  const alpha: ${o} = ${l};
  const beta: ${o} = 1.0;
  const TILE_SIZE = ${_}u;

  var<workgroup> tileQ: array<${f.type.storage}, ${_*_}>;
  var<workgroup> tileK: array<${f.type.storage}, ${_*_}>;

  ${T.declareVariables(f,y,h)}

  @compute @workgroup_size(${_}, ${_}, 1)
  fn main(@builtin(workgroup_id) workgroup_id : vec3<u32>,
   @builtin(local_invocation_id) local_id : vec3<u32>, @builtin(local_invocation_index) local_index : u32) {
   let global_idx = (workgroup_id.z * ${I.x*I.y}u +
          workgroup_id.y * ${I.x}u + workgroup_id.x) * ${_*_}u + local_index;

    // x holds the N and y holds the M
    let headIdx = workgroup_id.z;
    let m = workgroup_id.y * TILE_SIZE;
    let n = workgroup_id.x * TILE_SIZE;
    let lm = m + local_id.y;
    let ln = n + local_id.x;

    let qOffset = ${n.sequenceLength*w} * headIdx + m * K;
    let kOffset = ${n.kvSequenceLength*w} * headIdx + n * K;

    var value = ${Fe(o,c)};
    for (var w: u32 = 0u; w < K; w += TILE_SIZE) {
      if (m + local_id.y < M && w + local_id.x < K) {
        tileQ[TILE_SIZE * local_id.y + local_id.x] = q[qOffset + local_id.y * K + w + local_id.x];
      }
      if (n + local_id.y < N && w + local_id.x < K) {
        tileK[TILE_SIZE * local_id.y + local_id.x] = key[kOffset + local_id.y * K + w + local_id.x];
      }
      workgroupBarrier();

      for (var k: u32 = 0u; k<TILE_SIZE && w+k < K; k++) {
        value += tileQ[TILE_SIZE * local_id.y + k] * tileK[TILE_SIZE * local_id.x + k];
      }

      workgroupBarrier();
    }

    let headOffset = headIdx * M * N;
    if (lm < M && ln < N) {
      let outputIdx = headOffset + lm * N + ln;
      output[outputIdx] = ${nt("value",c)} * alpha;
    }
  }`,B=e.compute({name:"AttentionProbs",shaderCache:{hint:JSON.stringify(n)},getRunData:()=>({outputs:[{dims:u,dataType:t.dataType,gpuDataType:0}],dispatchGroup:I}),getShaderSource:A},{inputs:k,outputs:[-1]})[0];return Dd(e,B,n.batchSize*n.numHeads*n.sequenceLength,n.totalSequenceLength),B},Wd=(e,t,r,a)=>{let n=[a.batchSize,a.sequenceLength,a.vHiddenSize],s=U("probs",t.dataType,t.dims),u=U("v",r.dataType,r.dims),l=q("output",t.dataType,n),o=Ae(t.dataType),c=12,f={x:Math.ceil(a.vHeadSize/c),y:Math.ceil(a.sequenceLength/c),z:a.batchSize*a.numHeads},y=h=>`
  const M: u32 = ${a.sequenceLength}u;
  const N: u32 = ${a.vHeadSize}u;
  const K: u32 = ${a.totalSequenceLength}u;
  const numHeads: u32 = ${a.numHeads}u;
  const TILE_SIZE = ${c}u;

  var<workgroup> tileQ: array<${s.type.storage}, ${c*c}>;
  var<workgroup> tileK: array<${s.type.storage}, ${c*c}>;

  ${h.declareVariables(s,u,l)}

  @compute @workgroup_size(${c}, ${c}, 1)
  fn main(@builtin(workgroup_id) workgroup_id : vec3<u32>,
   @builtin(local_invocation_id) local_id : vec3<u32>, @builtin(local_invocation_index) local_index : u32) {
   let global_idx = (workgroup_id.z * ${f.x*f.y}u +
          workgroup_id.y * ${f.x}u + workgroup_id.x) * ${c*c}u + local_index;

   let headIdx = workgroup_id.z;
   let m = workgroup_id.y * TILE_SIZE + local_id.y;
   let n = workgroup_id.x * TILE_SIZE + local_id.x;

   let offsetA = headIdx * (M * K) + m * K;
   let offsetB = headIdx * (N * K) + n;

   var value = ${o}(0);
   for (var w: u32 = 0u; w < K; w += TILE_SIZE) {
     if (m < M && w + local_id.x < K) {
       tileQ[TILE_SIZE * local_id.y + local_id.x] = probs[offsetA + w + local_id.x];
     }
     if (n < N && w + local_id.y < K) {
       tileK[TILE_SIZE * local_id.y + local_id.x] = v[offsetB + (w + local_id.y) * N];
     }
     workgroupBarrier();
     for (var k: u32 = 0u; k<TILE_SIZE && w+k < K; k++) {
       value += tileQ[TILE_SIZE * local_id.y + k] * tileK[TILE_SIZE * k + local_id.x];
     }
     workgroupBarrier();
   }

   // we need to transpose output from BNSH_v to BSND_v
   let batchIdx = workgroup_id.z / ${a.numHeads};
   let currentBatchHeadNumber = workgroup_id.z % ${a.numHeads};
   let headOffset = (batchIdx * M * ${a.numHeads} + currentBatchHeadNumber) * ${a.vHeadSize};
   if (m < M && n < N) {
     let outputIdx = batchIdx * ${a.sequenceLength*a.vHiddenSize} + m * ${a.vHiddenSize}
       + currentBatchHeadNumber * ${a.vHeadSize} + n;
     output[outputIdx] = value;
   }
  }`;return e.compute({name:"AttentionScore",shaderCache:{hint:JSON.stringify(a)},getRunData:()=>({outputs:[{dims:n,dataType:t.dataType,gpuDataType:0}],dispatchGroup:f}),getShaderSource:y},{inputs:[t,r],outputs:[0]})[0]},sn=(e,t,r,a,n,s,u,l,o,c,f)=>{let y=zd(e,t,r,o,c,f);Wd(e,y,a,c)},Vd=(e,t)=>{let r=[t.batchSize,t.numHeads,t.sequenceLength,t.headSize],a=Ae(e.inputs[0].dataType),n=t.sequenceLength,s=t.inputHiddenSize,u=t.headSize,l=12,o={x:Math.ceil(t.headSize/l),y:Math.ceil(t.sequenceLength/l),z:t.batchSize*t.numHeads},c=()=>`
  const M: u32 = ${n}u;
  const K: u32 = ${s}u;
  const N: u32 = ${u}u;
  const numHeads: u32 = ${t.numHeads};
  const ldb = ${t.hiddenSize+t.hiddenSize+t.vHiddenSize}u;
  const TILE_SIZE = ${l}u;

  var<workgroup> tileInput: array<${a}, ${l*l}>;
  var<workgroup> tileWeightQ: array<${a}, ${l*l}>;
  var<workgroup> tileWeightK: array<${a}, ${l*l}>;
  var<workgroup> tileWeightV: array<${a}, ${l*l}>;

  @group(0) @binding(0) var<storage, read> input: array<${a}>;
  @group(0) @binding(1) var<storage, read> weight: array<${a}>;
  @group(0) @binding(2) var<storage, read> bias: array<${a}>;
  @group(0) @binding(3) var<storage, read_write> outputQ: array<${a}>;
  @group(0) @binding(4) var<storage, read_write> outputK: array<${a}>;
  @group(0) @binding(5) var<storage, read_write> outputV: array<${a}>;

  @compute @workgroup_size(${l}, ${l}, 1)
  fn main(@builtin(workgroup_id) workgroup_id : vec3<u32>,
   @builtin(local_invocation_id) local_id : vec3<u32>, @builtin(local_invocation_index) local_index : u32) {
   let global_idx = (workgroup_id.z * ${o.x*o.y}u +
          workgroup_id.y * ${o.x}u + workgroup_id.x) * ${l*l}u + local_index;

    let batchIndex = workgroup_id.z / ${t.numHeads};
    let headNumber = workgroup_id.z % ${t.numHeads};
    let m = workgroup_id.y * TILE_SIZE + local_id.y;
    let n = workgroup_id.x * TILE_SIZE + local_id.x;

    let inputOffset = batchIndex * (M * K) + m * K;
    let biasOffsetQ = headNumber * ${t.headSize};
    let biasOffsetK = ${t.hiddenSize} + biasOffsetQ;
    let biasOffsetV = ${t.hiddenSize} + biasOffsetK;

    var valueQ = ${a}(0);
    var valueK = ${a}(0);
    var valueV = ${a}(0);
    for (var w: u32 = 0u; w < K; w += TILE_SIZE) {
      if (m < M && w + local_id.x < K) {
        tileInput[TILE_SIZE * local_id.y + local_id.x] = input[inputOffset + w + local_id.x];
      }
      if (n < N && w + local_id.y < K) {
        let offset = n + (w + local_id.y) * ldb;
        tileWeightQ[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetQ + offset];
        tileWeightK[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetK + offset];
        tileWeightV[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetV + offset];
      }
      workgroupBarrier();
      for (var k: u32 = 0u; k<TILE_SIZE && w+k < K; k++) {
        let inputTileOffset = TILE_SIZE * local_id.y + k;
        let weightTileOffset = TILE_SIZE * k + local_id.x;
        valueQ += tileInput[inputTileOffset] * tileWeightQ[weightTileOffset];
        valueK += tileInput[inputTileOffset] * tileWeightK[weightTileOffset];
        valueV += tileInput[inputTileOffset] * tileWeightV[weightTileOffset];
      }

      workgroupBarrier();
    }

    let headOffset = (m * N + n) % ${t.headSize};
    valueQ += bias[headOffset + biasOffsetQ];
    valueK += bias[headOffset + biasOffsetK];
    valueV += bias[headOffset + biasOffsetV];

    let offset = workgroup_id.z * M * N;
    if (m < M && n < N) {
      let outputIdx = offset + m * N + n;
      outputQ[outputIdx] = valueQ;
      outputK[outputIdx] = valueK;
      outputV[outputIdx] = valueV;
    }
  }`,f=[e.inputs[0],e.inputs[1],e.inputs[2]];return e.compute({name:"AttentionPrepare",shaderCache:{hint:JSON.stringify(t)},getRunData:()=>({outputs:[{dims:r,dataType:e.inputs[0].dataType,gpuDataType:0},{dims:r,dataType:e.inputs[0].dataType,gpuDataType:0},{dims:r,dataType:e.inputs[0].dataType,gpuDataType:0}],dispatchGroup:o}),getShaderSource:c},{inputs:f,outputs:[-1,-1,-1]})},Ei=(e,t)=>{let r=Md(e.inputs,t),[a,n,s]=Vd(e,r);return sn(e,a,n,s,e.inputs[4],void 0,void 0,void 0,e.inputs[5],r,t)}});var Nd,Ud,Hd,Ti,Oi=F(()=>{"use strict";$t();be();ke();we();Nd=(e,t)=>{if(!e||e.length!==5)throw new Error("BatchNormalization requires 5 inputs");let r=(a,n,s)=>{let u=n.length;if(u!==a.length)throw new Error(`${s}: num dimensions != ${u}`);n.forEach((l,o)=>{if(l!==a[o])throw new Error(`${s}: dim[${o}] do not match`)})};if(e[0].dims.length>1){let a=t.format==="NHWC"?t.spatial?e[0].dims.slice(-1):e[0].dims.slice(-1).concat(e[0].dims.slice(1,e[0].dims.length-1)):e[0].dims.slice(1,t.spatial?2:void 0);r(e[1].dims,a,"Invalid input scale"),r(e[2].dims,a,"Invalid input B"),r(e[3].dims,a,"Invalid input mean"),r(e[4].dims,a,"Invalid input var")}else r(e[1].dims,[1],"Invalid input scale"),r(e[2].dims,[1],"Invalid input B"),r(e[3].dims,[1],"Invalid input mean"),r(e[4].dims,[1],"Invalid input var")},Ud=(e,t)=>{let{epsilon:r,spatial:a,format:n}=t,s=e[0].dims,u=a?Ze(s[s.length-1]):1,l=n==="NHWC"&&s.length>1?u:1,o=V.size(s)/u,c=Re(s.length)&&a,f=c?s.length:s,y=U("x",e[0].dataType,e[0].dims,u),h=U("scale",e[1].dataType,e[1].dims,l),w=U("bias",e[2].dataType,e[2].dims,l),v=U("inputMean",e[3].dataType,e[3].dims,l),$=U("inputVar",e[4].dataType,e[4].dims,l),C=q("y",e[0].dataType,f,u),_=()=>{let k="";if(a)k=`let cOffset = ${s.length===1?"0u":n==="NHWC"?`outputIndices[${s.length-1}] / ${u}`:"outputIndices[1]"};`;else if(n==="NCHW")k=`
            ${C.indicesSet("outputIndices","0","0")}
            let cOffset = ${C.indicesToOffset("outputIndices")};`;else{k=`var cIndices = ${h.type.indices}(0);
                       cIndices[0] = outputIndices[${s.length-1}];`;for(let A=1;A<h.rank;A++)k+=`cIndices[${A}] = outputIndices[${A}];`;k+=`let cOffset = ${h.indicesToOffset("cIndices")};`}return k},I=k=>`
  const epsilon = ${r};
  ${k.registerUniform("outputSize","u32").declareVariables(y,h,w,v,$,C)}
  ${k.mainStart()}
  ${k.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
    var outputIndices = ${C.offsetToIndices(`global_idx * ${u}`)};
    ${_()}
    let scale = ${h.getByOffset("cOffset")};
    let bias = ${w.getByOffset("cOffset")};
    let inputMean = ${v.getByOffset("cOffset")};
    let inputVar = ${$.getByOffset("cOffset")};
    let x = ${y.getByOffset("global_idx")};
    let value = (x - inputMean) / sqrt(inputVar + epsilon) * scale + bias;
    ${C.setByOffset("global_idx","value")}
  }`;return{name:"BatchNormalization",shaderCache:{hint:`${t.epsilon}_${t.format}_${a}_${u}`,inputDependencies:c?["rank","type","type","type","type"]:void 0},getShaderSource:I,getRunData:()=>({outputs:[{dims:e[0].dims,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(o/64)},programUniforms:c?[{type:"uint32",data:o},...pe(s)]:[{type:"uint32",data:o}]})}},Hd=e=>J(e),Ti=(e,t)=>{let{inputs:r,outputCount:a}=e,n=Hd({...t,outputCount:a});if(Te.webgpu.validateInputContent&&Nd(r,n),t.trainingMode)throw new Error("BatchNormalization trainingMode is not supported yet.");e.compute(Ud(r,n))}});var Ld,Gd,ki,Ri=F(()=>{"use strict";be();we();Ld=e=>{if(e[0].dims.length!==3)throw new Error("input should have 3 dimensions");if(![320,640,1280].includes(e[0].dims[2]))throw new Error("number of channels should be 320, 640 or 1280");if(e[1].dims.length!==1)throw new Error("bias is expected to have 1 dimensions");if(e[0].dims[2]!==e[1].dims[0])throw new Error("last dimension of input and bias are not the same")},Gd=e=>{let t=e[0].dims,r=e[0].dims[2],a=V.size(t)/4,n=e[0].dataType,s=U("input",n,t,4),u=U("bias",n,[r],4),l=U("residual",n,t,4),o=q("output",n,t,4);return{name:"BiasAdd",getRunData:()=>({outputs:[{dims:t,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(a/64)}}),getShaderSource:f=>`
  const channels = ${r}u / 4;
  ${f.declareVariables(s,u,l,o)}

  ${f.mainStart()}
    ${f.guardAgainstOutOfBoundsWorkgroupSizes(a)}
    let value = ${s.getByOffset("global_idx")}
      + ${u.getByOffset("global_idx % channels")} + ${l.getByOffset("global_idx")};
    ${o.setByOffset("global_idx","value")}
  }`}},ki=e=>{Ld(e.inputs),e.compute(Gd(e.inputs))}});var Fd,Ee,Pi,Bi,Mi,Di,zi,Wi,Vi,Ni,Ui,qd,Hi,Li,Gi,Fi,un,qi,ln,ji,Ki,Yi,Zi,Xi,Qi,Ji,es,ts,rs,ns,as,os,is,ss,us,ls,ta=F(()=>{"use strict";We();be();ke();we();Fd=(e,t,r,a,n,s)=>{let u=Math.ceil(t/4),l="";typeof n=="string"?l=`${n}(a)`:l=n("a");let o=U("inputData",r,[u],4),c=q("outputData",a,[u],4);return`
      ${e.registerUniform("vec_size","u32").declareVariables(o,c)}

  ${s??""}

  ${e.mainStart()}
    ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}

    let a = ${o.getByOffset("global_idx")};
    ${c.setByOffset("global_idx",l)}
  }`},Ee=(e,t,r,a,n,s=e.dataType)=>({name:t,shaderCache:{hint:n,inputDependencies:["type"]},getShaderSource:u=>Fd(u,V.size(e.dims),e.dataType,s,r,a),getRunData:u=>({outputs:[{dims:e.dims,dataType:s}],dispatchGroup:{x:Math.ceil(V.size(u[0].dims)/64/4)},programUniforms:[{type:"uint32",data:Math.ceil(V.size(e.dims)/4)}]})}),Pi=e=>{e.compute(Ee(e.inputs[0],"Abs","abs"))},Bi=e=>{e.compute(Ee(e.inputs[0],"Acos","acos"))},Mi=e=>{e.compute(Ee(e.inputs[0],"Acosh","acosh"))},Di=e=>{e.compute(Ee(e.inputs[0],"Asin","asin"))},zi=e=>{e.compute(Ee(e.inputs[0],"Asinh","asinh"))},Wi=e=>{e.compute(Ee(e.inputs[0],"Atan","atan"))},Vi=e=>{e.compute(Ee(e.inputs[0],"Atanh","atanh"))},Ni=e=>J(e),Ui=(e,t)=>{let r;switch(t.to){case 10:r="vec4<f16>";break;case 1:r="vec4<f32>";break;case 12:r="vec4<u32>";break;case 6:r="vec4<i32>";break;case 9:r="vec4<bool>";break;default:throw new RangeError(`not supported type (specified in attribute 'to' from 'Cast' operator): ${t.to}`)}e.compute(Ee(e.inputs[0],"Cast",r,void 0,t.cacheKey,t.to))},qd=e=>{let t=e.length>=2?e[1].getFloat32Array()[0]:rn,r=e.length>=3?e[2].getFloat32Array()[0]:nn;return J({min:t,max:r})},Hi=(e,t)=>{let r=e.inputs.length===1?t:qd(e.inputs),a=Ae(e.inputs[0].dataType);e.compute(Ee(e.inputs[0],"Clip",n=>`clamp(${n}, clip_min_, clip_max_)`,`
    const clip_min_: vec4<${a}> = vec4(${a}(${r.min}));
    const clip_max_: vec4<${a}> = vec4(${a}(${r.max}));
`,r.cacheKey),{inputs:[0]})},Li=e=>{e.compute(Ee(e.inputs[0],"Ceil","ceil"))},Gi=e=>{e.compute(Ee(e.inputs[0],"Cos","cos"))},Fi=e=>{e.compute(Ee(e.inputs[0],"Cosh","cosh"))},un=e=>J(e),qi=(e,t)=>{e.compute(Ee(e.inputs[0],"Elu",r=>`elu_vf32(${r})`,`
  const elu_alpha_: f32 = f32(${t.alpha});

  fn elu_f32(a: f32) -> f32 {
  return select((exp(a) - 1.0) * elu_alpha_, a, a >= 0.0);
  }

  fn elu_vf32(v: vec4<f32>) -> vec4<f32> {
  return vec4(elu_f32(v.x), elu_f32(v.y), elu_f32(v.z), elu_f32(v.w));
  }`,t.cacheKey))},ln=(e,t="f32")=>`
const r0: ${t} = 0.3275911;
const r1: ${t} = 0.254829592;
const r2: ${t} = -0.284496736;
const r3: ${t} = 1.421413741;
const r4: ${t} = -1.453152027;
const r5: ${t} = 1.061405429;

fn erf_vf32(v: ${e}) -> ${e} {
  let absv = abs(v);
  let x = 1.0 / (1.0 + r0 * absv);
  return sign(v) * (1.0 - ((((r5 * x + r4) * x + r3) * x + r2) * x + r1) * x * exp(-absv * absv));
}`,ji=e=>{let t=Ae(e.inputs[0].dataType);e.compute(Ee(e.inputs[0],"Erf",r=>`erf_vf32(${r})`,ln(`vec4<${t}>`,t)))},Ki=e=>{e.compute(Ee(e.inputs[0],"Exp","exp"))},Yi=e=>{e.compute(Ee(e.inputs[0],"Floor","floor"))},Zi=e=>{let t=Ae(e.inputs[0].dataType);e.compute(Ee(e.inputs[0],"Gelu",r=>`0.5 * ${r} * (1.0 + erf_vf32(${r} * 0.7071067811865475))`,ln(`vec4<${t}>`,t)))},Xi=(e,t)=>{e.compute(Ee(e.inputs[0],"LeakyRelu",r=>`select(leaky_relu_alpha_ * ${r}, ${r}, ${r} >= vec4<f32>(0.0))`,`const leaky_relu_alpha_: f32 = f32(${t.alpha});`,t.cacheKey))},Qi=e=>{e.compute(Ee(e.inputs[0],"Not",t=>`!${t}`))},Ji=e=>{e.compute(Ee(e.inputs[0],"Neg",t=>`-${t}`))},es=e=>{e.compute(Ee(e.inputs[0],"Reciprocal",t=>`1.0/${t}`))},ts=e=>{e.compute(Ee(e.inputs[0],"Relu",t=>`select(vec4<f32>(0.0), ${t}, ${t} > vec4<f32>(0.0))`))},rs=e=>{e.compute(Ee(e.inputs[0],"Sigmoid",t=>`(1.0 / (1.0 + exp(-${t})))`))},ns=e=>{e.compute(Ee(e.inputs[0],"Sin","sin"))},as=e=>{e.compute(Ee(e.inputs[0],"Sinh","sinh"))},os=e=>{e.compute(Ee(e.inputs[0],"Sqrt","sqrt"))},is=e=>{e.compute(Ee(e.inputs[0],"Tan","tan"))},ss=e=>{e.compute(Ee(e.inputs[0],"Tanh","tanh"))},us=(e,t)=>(e.compute(Ee(e.inputs[0],"ThresholdedRelu",r=>`select(vec4<f32>(0.0), ${r}, ${r} > thresholded_relu_alpha_)`,`const thresholded_relu_alpha_: vec4<f32> = vec4<f32>(${t.alpha});`,t.cacheKey)),0),ls=e=>{e.compute(Ee(e.inputs[0],"Log","log"))}});var Kd,Yd,ds,cs=F(()=>{"use strict";be();we();ta();Kd=e=>{if(e[0].dims.length!==3)throw new Error("input should have 3 dimensions");if(![2560,5120,10240].includes(e[0].dims[2]))throw new Error("hidden state should be 2560, 5120 or 10240");if(e[1].dims.length!==1)throw new Error("bias is expected to have 1 dimensions");if(e[0].dims[2]!==e[1].dims[0])throw new Error("last dimension of input and bias are not the same")},Yd=e=>{let t=e[0].dims.slice();t[2]=t[2]/2;let r=U("input",e[0].dataType,e[0].dims,4),a=U("bias",e[0].dataType,[e[0].dims[2]],4),n=q("output",e[0].dataType,t,4),s=V.size(t)/4,u=Ae(e[0].dataType);return{name:"BiasSplitGelu",getRunData:()=>({outputs:[{dims:t,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(s/64)}}),getShaderSource:o=>`
  const M_SQRT2 = sqrt(2.0);
  const halfChannels = ${e[0].dims[2]/4/2}u;

  ${o.declareVariables(r,a,n)}

  ${ln(`vec4<${u}>`,u)}

  ${o.mainStart()}
    ${o.guardAgainstOutOfBoundsWorkgroupSizes(s)}
    let biasIdx = global_idx % halfChannels;
    let batchIndex = global_idx / halfChannels;
    let inputOffset = biasIdx + batchIndex * halfChannels * 2;
    let valueLeft = input[inputOffset] + bias[biasIdx];
    let valueRight = input[inputOffset + halfChannels] + bias[biasIdx + halfChannels];
    let geluRight = valueRight * 0.5 * (erf_vf32(valueRight / M_SQRT2) + 1);

    ${n.setByOffset("global_idx","valueLeft * geluRight")}
  }`}},ds=e=>{Kd(e.inputs),e.compute(Yd(e.inputs))}});var Zd,Xd,ht,ps,fs,ms,hs,gs,ys,bs,ws,vs,$s,Ss=F(()=>{"use strict";We();be();we();Zd=(e,t,r,a,n,s,u,l,o,c,f,y,h)=>{let w,v;typeof l=="string"?w=v=(T,z)=>`${l}((${T}),(${z}))`:typeof l=="function"?w=v=l:(w=l.scalar,v=l.vector);let $=y?t.length:t,C=y?r.length:r,_=y?a.length:a,I=q("outputData",f,_,4),k=U("aData",o,$,4),A=U("bData",c,C,4),B;if(n)if(s){let T=V.size(t)===1,z=V.size(r)===1,W=t.length>0&&t[t.length-1]%4===0,K=r.length>0&&r[r.length-1]%4===0;T||z?B=I.setByOffset("global_idx",v(T?`${k.type.value}(${k.getByOffset("0")}.x)`:k.getByOffset("global_idx"),z?`${A.type.value}(${A.getByOffset("0")}.x)`:A.getByOffset("global_idx"))):B=`
            let outputIndices = ${I.offsetToIndices("global_idx * 4u")};
            let offsetA = ${k.broadcastedIndicesToOffset("outputIndices",I)};
            let offsetB = ${A.broadcastedIndicesToOffset("outputIndices",I)};
            ${I.setByOffset("global_idx",v(u||W?k.getByOffset("offsetA / 4u"):`${k.type.value}(${k.getByOffset("offsetA / 4u")}[offsetA % 4u])`,u||K?A.getByOffset("offsetB / 4u"):`${A.type.value}(${A.getByOffset("offsetB / 4u")}[offsetB % 4u])`))}
          `}else B=I.setByOffset("global_idx",v(k.getByOffset("global_idx"),A.getByOffset("global_idx")));else{if(!s)throw new Error("no necessary to use scalar implementation for element-wise binary op implementation.");let T=(z,W,K="")=>{let ee=`aData[indexA${W}][componentA${W}]`,M=`bData[indexB${W}][componentB${W}]`;return`
            let outputIndices${W} = ${I.offsetToIndices(`global_idx * 4u + ${W}u`)};
            let offsetA${W} = ${k.broadcastedIndicesToOffset(`outputIndices${W}`,I)};
            let offsetB${W} = ${A.broadcastedIndicesToOffset(`outputIndices${W}`,I)};
            let indexA${W} = offsetA${W} / 4u;
            let indexB${W} = offsetB${W} / 4u;
            let componentA${W} = offsetA${W} % 4u;
            let componentB${W} = offsetB${W} % 4u;
            ${z}[${W}] = ${K}(${w(ee,M)});
          `};f===9?B=`
            var data = vec4<u32>(0);
            ${T("data",0,"u32")}
            ${T("data",1,"u32")}
            ${T("data",2,"u32")}
            ${T("data",3,"u32")}
            outputData[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));`:B=`
            ${T("outputData[global_idx]",0)}
            ${T("outputData[global_idx]",1)}
            ${T("outputData[global_idx]",2)}
            ${T("outputData[global_idx]",3)}
          `}return`
        ${e.registerUniform("vec_size","u32").declareVariables(k,A,I)}

        ${h??""}

        ${e.mainStart()}
        ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}
        ${B}
      }`},Xd=(e,t,r,a,n,s,u=r.dataType)=>{let l=!V.areEqual(r.dims,a.dims),o=r.dims,c=V.size(r.dims),f=!1,y=!1,h=[l];if(l){let v=dt.calcShape(r.dims,a.dims,!1);if(!v)throw new Error("Can't perform binary op on the given tensors");o=v,c=V.size(o);let $=V.size(r.dims)===1,C=V.size(a.dims)===1,_=r.dims.length>0&&r.dims[r.dims.length-1]%4===0,I=a.dims.length>0&&a.dims[a.dims.length-1]%4===0;h.push($),h.push(C),h.push(_),h.push(I);let k=1;for(let A=1;A<o.length;A++){let B=r.dims[r.dims.length-A]??1,T=a.dims[a.dims.length-A]??1;if(B===T)k*=B;else break}k%4===0?(y=!0,f=!0):($||C||_||I)&&(f=!0)}else f=!0;h.push(f);let w=Re(r.dims.length)&&Re(a.dims.length)&&Re(o.length);return{name:e,shaderCache:{hint:t+h.map(v=>v.toString()).join("_"),inputDependencies:w?["rank","rank"]:["dims","dims"]},getShaderSource:v=>Zd(v,r.dims,a.dims,o,f,l,y,n,r.dataType,a.dataType,u,w,s),getRunData:()=>({outputs:[{dims:o,dataType:u}],dispatchGroup:{x:Math.ceil(c/64/4)},programUniforms:w?[{type:"uint32",data:Math.ceil(V.size(o)/4)},...pe(r.dims),...pe(a.dims),...pe(o)]:[{type:"uint32",data:Math.ceil(V.size(o)/4)}]})}},ht=(e,t,r,a,n,s)=>{e.compute(Xd(t,n??"",e.inputs[0],e.inputs[1],r,a,s))},ps=e=>{ht(e,"Add",(t,r)=>`${t}+${r}`)},fs=e=>{ht(e,"Div",(t,r)=>`${t}/${r}`)},ms=e=>{ht(e,"Equal",{scalar:(t,r)=>`u32(${t}==${r})`,vector:(t,r)=>`vec4<u32>(${t}==${r})`},void 0,void 0,9)},hs=e=>{ht(e,"Mul",(t,r)=>`${t}*${r}`)},gs=e=>{let t=U("input",e.inputs[0].dataType,e.inputs[0].dims).type.value;ht(e,"Pow",{scalar:(a,n)=>`pow_custom(${a},${n})`,vector:(a,n)=>`pow_vector_custom(${a},${n})`},`
    fn pow_custom(a : ${t}, b : ${t}) -> ${t} {
      if (b == ${t}(0.0)) {
        return ${t}(1.0);
      } else if (a < ${t}(0.0) && f32(b) != floor(f32(b))) {
        return ${t}(pow(f32(a), f32(b))); // NaN
      }
      return select(sign(a), ${t}(1.0), round(f32(abs(b) % ${t}(2.0))) != 1.0) * ${t}(${t==="i32"?"round":""}(pow(f32(abs(a)), f32(b))));
    }
    fn pow_vector_custom(a : vec4<${t}>, b : vec4<${t}>) -> vec4<${t}> {
      // TODO: implement vectorized pow
      return vec4<${t}>(pow_custom(a.x, b.x), pow_custom(a.y, b.y), pow_custom(a.z, b.z), pow_custom(a.w, b.w));
    }
      `)},ys=e=>{ht(e,"Sub",(t,r)=>`${t}-${r}`)},bs=e=>{ht(e,"Greater",{scalar:(t,r)=>`u32(${t}>${r})`,vector:(t,r)=>`vec4<u32>(${t}>${r})`},void 0,void 0,9)},ws=e=>{ht(e,"Less",{scalar:(t,r)=>`u32(${t}<${r})`,vector:(t,r)=>`vec4<u32>(${t}<${r})`},void 0,void 0,9)},vs=e=>{ht(e,"GreaterOrEqual",{scalar:(t,r)=>`u32(${t}>=${r})`,vector:(t,r)=>`vec4<u32>(${t}>=${r})`},void 0,void 0,9)},$s=e=>{ht(e,"LessOrEqual",{scalar:(t,r)=>`u32(${t}<=${r})`,vector:(t,r)=>`vec4<u32>(${t}<=${r})`},void 0,void 0,9)}});var Jd,ec,tc,rc,xs,Is,Cs=F(()=>{"use strict";be();ke();we();Jd=e=>{if(!e||e.length<1)throw new Error("too few inputs");let t=e[0].dataType,r=e[0].dims.length;for(let a of e){if(a.dataType!==t)throw new Error("input tensors should be one type");if(a.dims.length!==r)throw new Error("input tensors should have the same shape")}},ec=(e,t)=>`
  fn calculateInputIndex(index: u32) -> u32 {
    let sizeInConcatAxis = array<u32, ${e}u>(${t});
    for (var i: u32 = 0u; i < ${e}; i += 1u ) {
      if (index < sizeInConcatAxis[i]) {
        return i;
      }
    }
    return ${e}u;
  }`,tc=(e,t)=>{let r=e.length,a=[];for(let n=0;n<r;++n){let s=t.setByOffset("global_idx",e[n].getByIndices("indices"));r===1?a.push(s):n===0?a.push(`if (inputIndex == ${n}u) { ${s} }`):n===r-1?a.push(`else { ${s} }`):a.push(`else if (inputIndex == ${n}) { ${s} }`)}return a.join(`
`)},rc=(e,t)=>{let r=e[0].dims.slice();if(t>=r.length||t<-1*r.length)throw new Error("axis specified for concat doesn't match input dimensionality");let a=t<0?r.length+t:t,n=r.slice(0);for(let A=1;A<e.length;A++){let B=e[A].dims.slice();for(let T=0;T<r.length;T++)if(T===a)n[a]+=B[T];else if(r[T]!==B[T])throw new Error("non concat dimensions must match")}let s=V.size(n),u=new Array(e.length),l=new Array(e.length),o=e[0].dataType,c=0,f=[],y=[],h=[],w=[{type:"uint32",data:s}];for(let A=0;A<e.length;++A)c+=e[A].dims[a],u[A]=c,h.push(Re(e[A].dims.length)),y.push(h[A]?e[A].dims.length:e[A].dims),l[A]=U(`input${A}`,o,y[A]),f.push(h[A]?"rank":"dims"),w.push({type:"uint32",data:u[A]});for(let A=0;A<e.length;++A)h[A]&&w.push(...pe(e[A].dims));let v=Re(n.length);v&&w.push(...pe(n));let $=v?n.length:n,C=q("output",o,$),_=C.indicesGet("indices",a),I=Array.from(Array(u.length).keys()).map(A=>`uniforms.sizeInConcatAxis${A}`).join(","),k=A=>`

  ${(()=>{A.registerUniform("outputSize","u32");for(let B=0;B<e.length;B++)A.registerUniform(`sizeInConcatAxis${B}`,"u32");return A.declareVariables(...l,C)})()}

  ${ec(u.length,I)}

  ${A.mainStart()}
    ${A.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}

    var indices = ${C.offsetToIndices("global_idx")};

    let inputIndex = calculateInputIndex(${_});
    if (inputIndex != 0u) {
      let sizeInConcatAxis = array<u32, ${u.length}u>(${I});
      ${_} -= sizeInConcatAxis[inputIndex - 1u];
    }

    ${tc(l,C)}
  }`;return{name:"Concat",shaderCache:{hint:`${t}`,inputDependencies:f},getRunData:()=>({outputs:[{dims:n,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(s/64)},programUniforms:w}),getShaderSource:k}},xs=(e,t)=>{Jd(e.inputs),e.compute(rc(e.inputs,t.axis))},Is=e=>J({axis:e.axis})});var Et,dn,Nt=F(()=>{"use strict";be();Et=(e,t)=>{switch(e.activation){case"Relu":return{activationFunction:"",applyActivation:`value = max(value, ${t}(0.0));`};case"Sigmoid":return{activationFunction:"",applyActivation:`value = (${t}(1.0) / (${t}(1.0) + exp(-value)));`};case"Clip":return{activationFunction:`const clip_min_=${t}(${e.clipMin});const clip_max_=${t}(${e.clipMax});`,applyActivation:"value = clamp(value, clip_min_, clip_max_);"};default:return{activationFunction:"",applyActivation:""}}},dn=e=>{let t=e?.activation||"";if(t==="Clip"){let[r,a]=e?.activation_params||[rn,nn];return{activation:t,clipMax:a,clipMin:r,activationCacheKey:`${t}:${r},${a}`}}return{activation:t,activationCacheKey:t}}});var Ne,cn,pn=F(()=>{"use strict";Ne=(e,t)=>{switch(e){case 1:return t;case 2:return`vec2<${t}>`;case 3:return`vec3<${t}>`;case 4:return`vec4<${t}>`;default:throw new Error(`${e}-component is not supported.`)}},cn=e=>`
      ${e?"value = value + getBiasByOutputCoords(coords);":""}
      `});var fn,ra=F(()=>{"use strict";fn=e=>`
fn getIndexFromCoords4D(coords : vec4<i32>, shape : vec4<i32>) -> i32 {
  return dot(coords, vec4<i32>(
      shape.y * shape.z * shape.w, shape.z * shape.w, shape.w, 1));
}
fn getOutputIndexFromCoords(coords : vec4<i32>) -> i32 {
  return dot(coords, vec4<i32>(
    i32(${e}.x), i32(${e}.y), i32(${e}.z), 1));
}
`});var nc,ac,wr,_s,oc,vr,ic,mn,$r=F(()=>{"use strict";be();we();Nt();pn();nc=(e,t)=>e?`
        mm_Asub[inputRow][inputCol] = mm_readA(batch,
          kStart + inputRow,
          globalRowStart / innerElementSize + inputCol${t?", batchIndices":""});
        `:`
        mm_Asub[inputRow][inputCol] = mm_readA(batch,
          globalRow + innerRow,
          kStart / innerElementSize + inputCol${t?", batchIndices":""});
        `,ac=(e,t)=>e?`
        let ACached0 = mm_Asub[k * innerElementSize][localRow];
        let ACached1 = mm_Asub[k * innerElementSize + 1][localRow];
        let ACached2 = mm_Asub[k * innerElementSize + 2][localRow];
        ${t===3?"":"let ACached3 = mm_Asub[k * innerElementSize + 3][localRow];"}
        for (var i = 0; i < rowPerThread; i = i + 1) {
          acc[i] = BCached0 * ACached0[i] + acc[i];
          acc[i] = BCached1 * ACached1[i] + acc[i];
          acc[i] = BCached2 * ACached2[i] + acc[i];
          ${t===3?"":"acc[i] = BCached3 * ACached3[i] + acc[i];"}
        }`:`
        for (var i = 0; i < rowPerThread; i = i + 1) {
          let ACached = mm_Asub[tileRow + i][k];
          acc[i] = BCached0 * ACached.x + acc[i];
          acc[i] = BCached1 * ACached.y + acc[i];
          acc[i] = BCached2 * ACached.z + acc[i];
          ${t===3?"":"acc[i] = BCached3 * ACached.w + acc[i];"}
        }`,wr=(e,t,r="f32",a,n=!1,s=32,u=!1,l=32)=>{let o=t[1]*e[1],c=t[0]*e[0],f=n?o:s,y=n?s:o,h=f/t[0],w=s/t[1];if(!((n&&h===4&&e[1]===4||!n&&(h===3||h===4))&&f%t[0]===0&&s%t[1]===0&&e[0]===4))throw new Error(`If transposeA ${n} is true, innerElementSize ${h} and workPerThread[1] ${e[1]} must be 4.
      Otherwise, innerElementSize ${h} must be 3 or 4.
  tileAWidth ${f} must be divisible by workgroupSize[0]${t[0]}. tileInner ${s} must be divisible by workgroupSize[1] ${t[1]}. colPerThread ${e[0]} must be 4.`);return`
var<workgroup> mm_Asub: array<array<vec${h}<${r}>, ${f/h}>, ${y}>;
var<workgroup> mm_Bsub: array<array<vec4<${r}>, ${c/e[0]}>, ${s}>;

const rowPerThread = ${e[1]};
const colPerThread = ${e[0]};
const innerElementSize = ${h};
const tileInner = ${s};

@compute @workgroup_size(${t[0]}, ${t[1]}, ${t[2]})
fn main(@builtin(local_invocation_id) localId : vec3<u32>,
        @builtin(global_invocation_id) globalId : vec3<u32>,
        @builtin(workgroup_id) workgroupId : vec3<u32>) {
  let localRow = i32(localId.y);
  let tileRow = localRow * rowPerThread;
  let tileCol = i32(localId.x);

  let globalRow =i32(globalId.y) * rowPerThread;
  let globalCol = i32(globalId.x);
  let batch = ${u?"0":"i32(globalId.z)"};
  ${a?`let batchIndices = ${a.offsetToIndices("u32(batch)")};`:""}
  let globalRowStart = i32(workgroupId.y) * ${o};

  let numTiles = ${u?`${Math.ceil(l/s)}`:"(uniforms.dimInner - 1) / tileInner + 1"};
  var kStart = ${u?`i32(globalId.z) * ${l}`:"0"};

  var acc: array<vec4<${r}>, rowPerThread>;

  // Loop over shared dimension.
  let tileRowB = localRow * ${w};
  for (var t = 0; t < numTiles; t = t + 1) {
      // Load one tile of A into local memory.
      for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
          let inputRow = tileRow + innerRow;
          let inputCol = tileCol;
          ${nc(n,a)}
      }

      // Load one tile of B into local memory.
      for (var innerRow = 0; innerRow < ${w}; innerRow = innerRow + 1) {
          let inputRow = tileRowB + innerRow;
          let inputCol = tileCol;
          mm_Bsub[inputRow][inputCol] = mm_readB(batch, kStart + inputRow, globalCol${a?", batchIndices":""});
      }
      kStart = kStart + tileInner;
      workgroupBarrier();

      // Compute acc values for a single thread.
      for (var k = 0; k < tileInner / innerElementSize; k = k + 1) {
          let BCached0 = mm_Bsub[k * innerElementSize][tileCol];
          let BCached1 = mm_Bsub[k * innerElementSize + 1][tileCol];
          let BCached2 = mm_Bsub[k * innerElementSize + 2][tileCol];
          ${h===3?"":"let BCached3 = mm_Bsub[k * innerElementSize + 3][tileCol];"}

          ${ac(n,h)}
      }

      workgroupBarrier();
  }

  for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
      mm_write(batch, globalRow + innerRow, globalCol, acc[innerRow]);
  }
}`},_s=(e,t)=>e?`
            mm_Asub[inputRow][inputCol] = mm_readA(batch,
              kStart + inputRow,
              globalRowStart + inputCol${t?", batchIndices":""});
            `:`
            mm_Asub[inputRow][inputCol] = mm_readA(batch,
              globalRowStart + inputRow,
              kStart + inputCol${t?", batchIndices":""});
            `,oc=e=>e?"let ACached = mm_Asub[k][tileRow + innerRow];":"let ACached = mm_Asub[tileRow + innerRow][k];",vr=(e,t,r="f32",a,n=!1,s=32,u=!1,l=32,o=!1)=>{let c=e[1]*t[1],f=e[0]*t[0],y=n?c:s,h=n?s:c;if(!(h%t[1]===0&&y%t[0]===0&&s%t[1]===0))throw new Error(`tileAHight ${h} must be divisible by workgroupSize[1]${t[1]}, tileAWidth ${y} must be divisible by workgroupSize[0]${t[0]}, tileInner ${s} must be divisible by workgroupSize[1]${t[1]}`);let w=h/t[1],v=y/t[0],$=s/t[1],C=o?`
    let localRow = i32(localId.y);
    let localCol = i32(localId.x);
    let globalRowStart = i32(workgroupId.y) * ${c};
    let globalColStart = i32(workgroupId.x) * ${f};

    // Loop over shared dimension.
    for (var t = 0; t < numTiles; t = t + 1) {
      // Load one tile of A into local memory.
      for (var inputRow = localRow; inputRow < ${h}; inputRow = inputRow + ${t[1]}) {
        for (var inputCol = localCol; inputCol < ${y}; inputCol = inputCol + ${t[0]}) {
          ${_s(n,a)}
        }
      }
      // Load one tile of B into local memory.
      for (var inputRow = localRow; inputRow < ${s}; inputRow = inputRow + ${t[1]}) {
            for (var inputCol = localCol; inputCol < ${f}; inputCol = inputCol + ${t[0]}) {
          mm_Bsub[inputRow][inputCol] = mm_readB(batch,
            kStart + inputRow,
            globalColStart + inputCol${a?", batchIndices":""});
        }
      }
      kStart = kStart + tileInner;
      workgroupBarrier();

      // Compute acc values for a single thread.
      var BCached : array<${r}, colPerThread>;
      for (var k = 0; k < tileInner; k = k + 1) {
        for (var inner = 0; inner < colPerThread; inner = inner + 1) {
          BCached[inner] = mm_Bsub[k][localCol + inner * ${t[0]}];
        }
        for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
          let ACached = ${n?`mm_Asub[k][localRow + innerRow * ${t[1]}];`:`mm_Asub[localRow + innerRow * ${t[1]}][k];`}
          for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
            acc[innerRow][innerCol] = acc[innerRow][innerCol] +
                ACached * BCached[innerCol];
          }
        }
      }
      workgroupBarrier();
    }
    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
      let gRow = globalRowStart + localRow + innerRow * ${t[1]};
      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
        let gCol = globalColStart + localCol + innerCol * ${t[0]};
        mm_write(batch, gRow, gCol, acc[innerRow][innerCol]);
      }
    }
    `:`
let tileRow = i32(localId.y) * rowPerThread;
let tileCol = i32(localId.x) * colPerThread;

let globalRow = i32(globalId.y) * rowPerThread;
let globalCol = i32(globalId.x) * colPerThread;
let globalRowStart = i32(workgroupId.y) * ${c};

let tileRowA = i32(localId.y) * ${w};
let tileColA = i32(localId.x) * ${v};
let tileRowB = i32(localId.y) * ${$};
// Loop over shared dimension.
for (var t = 0; t < numTiles; t = t + 1) {
  // Load one tile of A into local memory.
  for (var innerRow = 0; innerRow < ${w}; innerRow = innerRow + 1) {
    for (var innerCol = 0; innerCol < ${v}; innerCol = innerCol + 1) {
      let inputRow = tileRowA + innerRow;
      let inputCol = tileColA + innerCol;
      ${_s(n,a)}
    }
  }

  // Load one tile of B into local memory.
  for (var innerRow = 0; innerRow < ${$}; innerRow = innerRow + 1) {
    for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
      let inputRow = tileRowB + innerRow;
      let inputCol = tileCol + innerCol;
      mm_Bsub[inputRow][inputCol] = mm_readB(batch,
        kStart + inputRow,
        globalCol + innerCol${a?", batchIndices":""});
    }
  }
  kStart = kStart + tileInner;
  workgroupBarrier();

  // Compute acc values for a single thread.
  var BCached : array<${r}, colPerThread>;
  for (var k = 0; k < tileInner; k = k + 1) {
    for (var inner = 0; inner < colPerThread; inner = inner + 1) {
      BCached[inner] = mm_Bsub[k][tileCol + inner];
    }

    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
      ${oc(n)}
      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
        acc[innerRow][innerCol] = acc[innerRow][innerCol] + ACached * BCached[innerCol];
      }
    }
  }

  workgroupBarrier();
}

for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
  for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
    mm_write(batch, globalRow + innerRow, globalCol + innerCol,
        acc[innerRow][innerCol]);
  }
}
`;return`
  var<workgroup> mm_Asub : array<array<${r}, ${y}>, ${h}>;
  var<workgroup> mm_Bsub : array<array<${r}, ${f}>, ${s}>;
  const rowPerThread = ${e[1]};
  const colPerThread = ${e[0]};
  const tileInner = ${s};

@compute @workgroup_size(${t[0]}, ${t[1]}, ${t[2]})
fn main(@builtin(local_invocation_id) localId : vec3<u32>,
        @builtin(global_invocation_id) globalId : vec3<u32>,
        @builtin(workgroup_id) workgroupId : vec3<u32>) {
    let batch = ${u?"0":"i32(globalId.z)"};
    ${a?`let batchIndices = ${a.offsetToIndices("u32(batch)")};`:""}
    let numTiles = ${u?`${Math.ceil(l/s)}`:"(uniforms.dimInner - 1) / tileInner + 1"};
    var kStart = ${u?`i32(globalId.z) * ${l}`:"0"};

    var acc : array<array<${r}, colPerThread>, rowPerThread>;

    // Without this initialization strange values show up in acc.
    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
        acc[innerRow][innerCol] = 0.0;
      }
    }
    ${C}
  }
`},ic=(e,t,r,a,n,s=!1)=>{let[u,l,o]=n,[c,f,y,h]=a,w=Xn(u,o),v=Xn(l,o),$=Ae(a[0].type.tensor),C=()=>{let k=f.rank,A=c.rank,B=`var aIndices: ${f.type.indices};`;for(let T=k-2-1,z=A-1;T>=0;T--,z--)B+=`
aIndices[${T}] = ${A>1?`batchIndices[${z}]`:"batchIndices"};`;return w.forEach(T=>{B+=`
aIndices[${T}] = 0;`}),B+=`
aIndices[${k-2}] = u32(row);
                   aIndices[${k-1}] = u32(colIn);`,B},_=()=>{let k=y.rank,A=c.rank,B=`var bIndices: ${y.type.indices};`;for(let T=k-2-1,z=A-1;T>=0;T--,z--)B+=`
bIndices[${T}] = ${A>1?`batchIndices[${z}]`:"batchIndices"};`;return v.forEach(T=>{B+=`
bIndices[${T}] = 0;`}),B+=`
bIndices[${k-2}] = u32(row);
                   bIndices[${k-1}] = u32(colIn);`,B};return`
    fn mm_readA(batch: i32, row: i32, colIn: i32, batchIndices: ${c.type.indices}) -> ${Ne(e,$)} {
      var value = ${Ne(e,$)}(0.0);
      let col = colIn * ${e};
      if(row < uniforms.dimAOuter && col < uniforms.dimInner)
      {
        ${C()}
        value = ${f.getByIndices("aIndices")};
      }
      return value;
    }

    fn mm_readB(batch: i32, row: i32, colIn: i32, batchIndices: ${c.type.indices}) -> ${Ne(e,$)} {
      var value = ${Ne(e,$)}(0.0);
      let col = colIn * ${e};
      if(row < uniforms.dimInner && col < uniforms.dimBOuter)
      {
        ${_()}
        value = ${y.getByIndices("bIndices")};
      }
      return value;
    }

    fn mm_write(batch: i32, row: i32, colIn: i32, valueIn: ${Ne(e,$)}) {
      let col = colIn * ${e};
      if (row < uniforms.dimAOuter && col < uniforms.dimBOuter) {
        var value = valueIn;
        let coords = vec3<i32>(batch, row, colIn);
        ${t?`value = value + ${s?"bias[colIn]":`${Ne(e,$)}(bias[row])`};`:""}
        ${r}
        ${h.setByIndices("vec3<u32>(coords)","value")}
      }
    }
    `},mn=(e,t,r,a,n=!1)=>{let s=e[0].dims,u=e[1].dims,l=s.slice(0,-2),o=u.slice(0,-2),c=a?a.slice(0,-2):r.slice(0,-2),f=Re(c.length),y=f?c.length:c,h=Xo("batchDims",e[0].dataType,y,1),w=V.size(c),v=s[s.length-2],$=s[s.length-1],C=u[u.length-1],_=$%4===0&&C%4===0,I=v<=8?[4,1,1]:[4,4,1],k=[8,8,1],A=[Math.ceil(C/k[0]/I[0]),Math.ceil(v/k[1]/I[1]),Math.ceil(w/k[2]/I[2])],B=Ae(e[0].dataType),T=_?4:1,z=[...l,v,$/T],W=Re(z.length),K=W?z.length:z,ee=[...o,$,C/T],M=Re(ee.length),Z=M?ee.length:ee,xe=[w,v,C/T],re=U("a",e[0].dataType,K,T),ve=U("b",e[1].dataType,Z,T),j=q("result",e[0].dataType,xe.length,T),$e=[re,ve],Ce=[{type:"int32",data:v},{type:"int32",data:C},{type:"int32",data:$}];f&&Ce.push(...pe(c)),W&&Ce.push(...pe(z)),M&&Ce.push(...pe(ee));let _e=[];_e.push(W?"rank":"dims"),_e.push(M?"rank":"dims");let me=e.length>2,{activationFunction:it,applyActivation:Ge}=Et(t,j.type.value),qe=ic(T,me,Ge,[h,re,ve,j],[l,o,c],n);if(me){let le=n?T:1;$e.push(U("bias",e[2].dataType,e[2].dims.length,le)),Ce.push(...pe(e[2].dims)),_e.push("rank")}Ce.push(...pe(xe));let G=le=>`
  ${le.registerUniform("dimAOuter","i32").registerUniform("dimBOuter","i32").registerUniform("dimInner","i32").registerInternalVariables(h).declareVariables(...$e,j)}
  ${it}
  ${qe}
  ${_?wr(I,k,B,h):vr(I,k,B,h)}
                   `;return{name:"MatMul",shaderCache:{hint:t.activationCacheKey+`${I}${t.activation}${t.clipMax}${t.clipMin}${_}${me}${n}`,inputDependencies:_e},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:A[0],y:A[1],z:A[2]},programUniforms:Ce}),getShaderSource:G}}});var sc,As,Es=F(()=>{"use strict";At();we();Nt();pn();ra();$r();sc=(e,t,r,a,n=!1,s,u=4,l=4,o=4,c="f32")=>{let f=M=>{switch(M){case 1:return"resData = x[xIndex];";case 3:return`resData = vec3<${c}>(x[xIndex], x[xIndex + 1], x[xIndex + 2]);`;case 4:return"resData = x[xIndex / 4];";default:throw new Error(`innerElementSize ${M} is not supported.`)}},y=M=>{switch(M){case 1:return"return w[row * i32(uniforms.w_shape[3]) + colIn];";case 4:return"return w[row * i32(uniforms.w_shape[3]) / 4 + colIn];";default:throw new Error(`innerElementSize ${M} is not supported.`)}},h=e?`
    let coord = vec4<i32>(batch, xRow, xCol, xCh);
    `:`
    let coord = vec4<i32>(batch, xCh, xRow, xCol);
    `,w=e?`
    let coords = vec4<i32>(
      batch,
      row / outWidth,
      row % outWidth,
      col);
    `:`
    let coords = vec4<i32>(
      batch,
      row,
      col / outWidth,
      col % outWidth);
    `,v=e?"i32(uniforms.x_shape[1])":"i32(uniforms.x_shape[2])",$=e?"i32(uniforms.x_shape[2])":"i32(uniforms.x_shape[3])",C=e?"row":"col",_=e?"col":"row",I=`
    let inChannels = i32(uniforms.w_shape[2]);
    let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};
    let outRow = ${C} / outWidth;
    let outCol = ${C} % outWidth;

    let WRow = ${_} / (filterDims[1] * inChannels);
    let WCol = ${_} / inChannels % filterDims[1];
    let xRow = outRow * stride[0] + dilation[0] * WRow - pad[0];
    let xCol = outCol * stride[1] + dilation[1] * WCol - pad[1];
    let xCh = ${_} % inChannels;
    var resData = ${Ne(u,c)}(0.0);
    // The bounds checking is always needed since we use it to pad zero for
    // the 'same' padding type.
    if (xRow >= 0 && xRow < ${v} && xCol >= 0 && xCol < ${$}) {
      ${h}
      let xIndex = getIndexFromCoords4D(coord, vec4<i32>(uniforms.x_shape));
      ${f(u)}
    }
    return resData;`,k=e?t&&a?`
    let col = colIn * ${u};
    ${I}`:`
    let col = colIn * ${u};
    if (row < uniforms.dimAOuter && col < uniforms.dimInner) {
      ${I}
    }
    return ${Ne(u,c)}(0.0);`:a&&r?`
    let col = colIn * ${u};
    ${I}`:`
    let col = colIn * ${u};
    if (row < uniforms.dimInner && col < uniforms.dimBOuter) {
      ${I}
    }
    return ${Ne(u,c)}(0.0);`,A=`${y(l)}`,B=Ne(o,c),T=e?Ne(u,c):Ne(l,c),z=e?Ne(l,c):Ne(u,c),{activationFunction:W,applyActivation:K}=Et(s,B);return`
    ${W}
    fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${T} {
      ${e?k:A}
    }

    fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${z} {
      ${e?A:k}
    }

    fn mm_write(batch: i32, row : i32, colIn : i32, valueIn : ${B}) {
      let col = colIn * ${o};
      if (row < uniforms.dimAOuter && col < uniforms.dimBOuter)
      {
      var value = valueIn;
      let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};
      ${w}
      ${cn(n)}
      ${K}
      setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);
      }
    }`},As=(e,t,r,a,n,s,u,l)=>{let o=t.format==="NHWC",c=o?e[0].dims[3]:e[0].dims[1],f=r[0],y=o?r[2]:r[3],h=o?r[1]:r[2],w=o?r[3]:r[1],v=o&&(c%4===0||c%3===0)&&w%4===0,$=o?w:y*h,C=o?y*h:w,_=[8,8,1],I=a<=8?[4,1,1]:[4,4,1],k=[Math.ceil($/_[0]/I[0]),Math.ceil(C/_[1]/I[1]),Math.ceil(f/_[2]/I[2])];Pe("verbose",()=>`[conv2d_mm_webgpu] dispatch = ${k}`);let A=v?o&&c%4!==0?3:4:1,B=_[1]*I[1],T=_[0]*I[0],z=Math.max(_[0]*A,_[1]),W=a%B===0,K=n%T===0,ee=s%z===0,M=v?[A,4,4]:[1,1,1],Z=Ae(e[0].dataType),xe=v?4:1,re=[{type:"int32",data:a},{type:"int32",data:n},{type:"int32",data:s}],ve=U("x",e[0].dataType,e[0].dims.length,A===3?1:A),j=U("w",e[1].dataType,e[1].dims.length,xe),$e=[ve,j];re.push(...pe(e[0].dims)),re.push(...pe(e[1].dims));let Ce=`
      fn setOutputAtIndex(flatIndex : i32, value : ${v?`vec4<${Z}>`:Z}) {
        result[flatIndex] = ${v?`vec4<${Z}>`:Z}(value);
      }
      fn setOutputAtCoords(d0 : i32, d1 : i32, d2 : i32, d3 : i32, value : ${v?`vec4<${Z}>`:Z}) {
        let flatIndex = getOutputIndexFromCoords(vec4<i32>(d0, d1, d2, d3));
        setOutputAtIndex(flatIndex ${v?"/ 4":""}, value);
      }`;if(u){let me=U("bias",e[2].dataType,e[2].dims.length,xe);$e.push(me),re.push(...pe(e[2].dims)),Ce+=`
        fn getBiasByOutputCoords(coords : vec4<i32>) -> ${v?`vec4<${Z}>`:Z} {
          return bias[coords.${o?"w":"y"}${v?"/ 4":""}];
        }`}let _e=q("result",e[0].dataType,r.length,xe);return re.push(...pe(r)),{name:"Conv2DMatMul",shaderCache:{hint:t.cacheKey},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:k[0],y:k[1],z:k[2]},programUniforms:re}),getShaderSource:me=>`
        ${fn("uniforms.result_strides")}
        //struct Uniforms { xShape : vec4<i32>, wShape : vec4<i32>, outShape : vec4<i32>,
        //  outShapeStrides: vec3<i32>, filterDims : vec2<i32>, pad : vec2<i32>, stride : vec2<i32>,
        //  dilation : vec2<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32 };
        ${me.registerUniform("dimAOuter","i32").registerUniform("dimBOuter","i32").registerUniform("dimInner","i32").declareVariables(...$e,_e)}
        const filterDims : vec2<i32> = vec2<i32>(${t.kernelShape[0]}, ${t.kernelShape[1]});
        const pad : vec2<i32> = vec2<i32>(${t.pads[0]}, ${t.pads[1]});
        const stride : vec2<i32> = vec2<i32>(${t.strides[0]}, ${t.strides[1]});
        const dilation : vec2<i32> = vec2<i32>(${t.dilations[0]}, ${t.dilations[1]});
        ${Ce}
        ${sc(o,W,K,ee,u,t,M[0],M[1],M[2],Z)}
            ${v?wr(I,_,Z,void 0,!o,z):vr(I,_,Z,void 0,!o,z,!1,void 0,l)}`}}});var na,Ts=F(()=>{"use strict";be();we();oa();Nt();na=(e,t,r)=>{let a=e.length>2,n=a?"value += b[output_channel];":"",s=e[0].dims,u=e[1].dims,l=u[0]/t.group,o=t.format==="NHWC",c=aa(s,u,t.dilations,t.pads,t.strides,o),f=V.size(c),y=q("output",e[0].dataType,c),{activationFunction:h,applyActivation:w}=Et(t,y.type.value),v=U("x",e[0].dataType,s),$=U("w",e[1].dataType,u),C=[v,$];a&&C.push(U("b",e[2].dataType,e[2].dims));let _=I=>`
  const strides: vec2<u32> = vec2(${t.strides[0]}u, ${t.strides[1]}u);
  const pads: vec2<u32> = vec2(${t.pads[0]}u, ${t.pads[1]}u);

  ${I.declareVariables(...C,y)}

  ${h}

  ${I.mainStart()}
    ${I.guardAgainstOutOfBoundsWorkgroupSizes(f)}

    let outputIndices = ${y.offsetToIndices("global_idx")};
    let batch: u32 = outputIndices[0];
    let output_channel: u32 = outputIndices[${o?3:1}];
    let xRCCorner: vec2<u32> = vec2<u32>(outputIndices[${o?1:2}], outputIndices[${o?2:3}]) * strides - pads;
    let group_id: u32 = output_channel / ${l}u;

    var value: ${y.type.value} = ${y.type.value}(0);
    for (var wInChannel: u32 = 0u; wInChannel < ${u[1]}u; wInChannel++) {
      let input_channel = group_id * ${u[1]}u + wInChannel;
      for (var wHeight: u32 = 0u; wHeight < ${u[2]}u; wHeight++) {
        let xHeight = xRCCorner.x + wHeight * ${t.dilations[0]}u;

        if (xHeight < 0u || xHeight >= ${s[o?1:2]}u) {
          continue;
        }

        for (var wWidth: u32 = 0u; wWidth < ${u[3]}u; wWidth++) {
          let xWidth = xRCCorner.y + wWidth * ${t.dilations[1]}u;
          if (xWidth < 0u || xWidth >= ${s[o?2:3]}u) {
            continue;
          }

          let xVal = ${o?v.get("batch","xHeight","xWidth","input_channel"):v.get("batch","input_channel","xHeight","xWidth")};
          let wVal = ${$.get("output_channel","wInChannel","wHeight","wWidth")};
          value += xVal*wVal;
        }
      }
    }
    ${n}
    ${w}
    ${y.setByOffset("global_idx","value")}
  }`;return{name:"GroupedConv",shaderCache:{hint:t.cacheKey},getRunData:()=>({outputs:[{dims:r?r(c):c,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(f/64)}}),getShaderSource:_}}});var aa,Os,uc,ks,ia,lc,dc,sa,oa=F(()=>{"use strict";be();ke();Es();$r();Ts();Nt();Zt();aa=(e,t,r,a,n,s)=>{let u=e[0],l=e.slice(s?1:2,s?3:4),o=l.length,c=t[0],y=t.slice(2).map((v,$)=>v+(v-1)*(r[$]-1)),w=l.map((v,$)=>v+a[$]+a[$+o]).map((v,$)=>Math.floor((v-y[$]+n[$])/n[$]));return w.splice(0,0,u),w.splice(s?3:1,0,c),w},Os=[2,3,1,0],uc=(e,t)=>{if(!e||e.length!==2&&e.length!==3)throw new Error("Conv requires 2 or 3 inputs");if(e[0].dims.length!==4&&e[0].dims.length!==3)throw new Error("currently only support conv 1D and 2D");if(e[0].dims.length!==e[1].dims.length)throw new Error("filter does not have same dimension as input");let r=e[0].dims[t.format==="NHWC"?e[0].dims.length-1:1],a=e[1].dims[1]*t.group;if(r!==a)throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");if(e.length===3&&(e[2].dims.length!==1||e[1].dims[0]!==e[2].dims[0]))throw new Error("invalid bias");let n=e[0].dims.length-2;if(t.dilations.length!==n)throw new Error(`dilations should be ${n}D`);if(t.strides.length!==n)throw new Error(`strides should be ${n}D`);if(t.pads.length!==n*2)throw new Error(`pads should be ${n*2}D`);if(t.kernelShape.length!==0&&t.kernelShape.length!==e[1].dims.length-2)throw new Error("invalid kernel shape")},ks=(e,t)=>{let r=e.kernelShape.slice();for(let s=2;s<t[1].dims.length;++s)r[s-2]===0&&(r[s-2]=t[1].dims[s]);let a=e.pads.slice();Vt.adjustPadsBasedOnAutoPad(t[0].dims,e.strides,e.dilations,r,a,e.format==="NHWC",e.autoPad);let n=Object.assign({},e);return Object.assign(n,{kernelShape:r,pads:a,cacheKey:e.cacheKey}),n},ia=e=>{let t=dn(e),r=e.format,a=["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][e.auto_pad],n=e.dilations,s=e.group,u=e.kernel_shape,l=e.pads,o=e.strides,c=e.w_is_const();return J({autoPad:a,format:r,dilations:n,group:s,kernelShape:u,pads:l,strides:o,wIsConst:c,...t})},lc=(e,t,r)=>{let a=ks(r,t);if(r.group!==1){e.compute(na(t,a));return}let n=r.format==="NHWC",s=t.length===3,u=t[0].dims[n?1:2],l=t[0].dims[n?2:3],o=t[0].dims[n?3:1],c=t[1].dims[2],f=t[1].dims[3],y=aa(t[0].dims,t[1].dims,r.dilations,a.pads,r.strides,n),h=y[n?1:2],w=y[n?2:3],v=y[n?3:1],$=n&&c===u&&f===l&&r.pads[0]===0&&r.pads[1]===0;if($||c===1&&f===1&&r.dilations[0]===1&&r.dilations[1]===1&&r.strides[0]===1&&r.strides[1]===1&&r.pads[0]===0&&r.pads[1]===0){let T=y[0],z,W,K,ee=[];if(n){let M=e.kernelCustomData.wT??e.compute(at(t[1],Os),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];if(r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=M),$){let Z=u*l*o;z=t[0].reshape([1,T,Z]),W=M.reshape([1,Z,v]),K=[1,T,v]}else z=t[0].reshape([T,u*l,o]),W=M.reshape([1,o,v]),K=[T,h*w,v];ee.push(z),ee.push(W)}else z=t[0].reshape([T,o,u*l]),W=t[1].reshape([1,v,o]),K=[T,v,h*w],ee.push(W),ee.push(z);s&&ee.push(t[2]),e.compute(mn(ee,a,y,K,n),{inputs:ee});return}let C=!0,_=e.kernelCustomData.wT??e.compute(at(t[1],Os),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=_);let I=[t[0],_];s&&I.push(t[2]);let k=n?h*w:v,A=n?v:h*w,B=c*f*o;e.compute(As(I,a,y,k,A,B,s,C),{inputs:I})},dc=(e,t)=>{let r=t.format==="NHWC",a=[e.inputs[0].reshape(r?[e.inputs[0].dims[0],1,e.inputs[0].dims[1],e.inputs[0].dims[2]]:[e.inputs[0].dims[0],e.inputs[0].dims[1],1,e.inputs[0].dims[2]]),e.inputs[1].reshape([e.inputs[1].dims[0],e.inputs[1].dims[1],1,e.inputs[1].dims[2]])];e.inputs.length===3&&a.push(e.inputs[2]);let n=[0,t.pads[0],0,t.pads[1]],s=[1].concat(t.strides),u=[1].concat(t.dilations),l=[1].concat(t.kernelShape),o=ks({...t,pads:n,strides:s,dilations:u,kernelShape:l},a);e.compute(na(a,o,c=>r?[c[0],c[2],c[3]]:[]))},sa=(e,t)=>{uc(e.inputs,t),e.inputs[0].dims.length===3?dc(e,t):lc(e,e.inputs,t)}});var cc,Rs,Ps=F(()=>{"use strict";At();we();Nt();pn();ra();$r();cc=(e,t=!1,r,a=4)=>{let n=Ne(a,"f32"),s=I=>{switch(I){case 1:return"return w[getIndexFromCoords4D(coord, vec4<i32>(uniforms.w_shape))];";case 4:return`
            let coord1 = vec4<i32>(coordX, coordY, col + 1, rowInner);
            let coord2 = vec4<i32>(coordX, coordY, col + 2, rowInner);
            let coord3 = vec4<i32>(coordX, coordY, col + 3, rowInner);
            let v0 = w[getIndexFromCoords4D(coord, vec4<i32>(uniforms.w_shape))];
            let v1 = w[getIndexFromCoords4D(coord1, vec4<i32>(uniforms.w_shape))];
            let v2 = w[getIndexFromCoords4D(coord2, vec4<i32>(uniforms.w_shape))];
            let v3 = w[getIndexFromCoords4D(coord3, vec4<i32>(uniforms.w_shape))];
            return vec4<f32>(v0, v1, v2, v3);
            `;default:throw new Error(`innerElementSize ${I} is not supported.`)}},u=e?`
      let coord = vec4<i32>(batch, iXR, iXC, xCh);
      `:`
      let coord = vec4<i32>(batch, xCh, iXR, iXC);
      `,l=e?`
    let coords = vec4<i32>(
      batch,
      row / outWidth,
      row % outWidth,
      col);
    `:`
    let coords = vec4<i32>(
      batch,
      row,
      col / outWidth,
      col % outWidth);
    `,o=e?"outBackprop[1]":"outBackprop[2]",c=e?"outBackprop[2]":"outBackprop[3]",f=e?"row":"col",y=e?"col":"row",h=`
      let inChannels = ${e?"outBackprop[3]":"outBackprop[1]"};
      let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};
      let outRow = ${f} / outWidth;
      let outCol = ${f} % outWidth;

      let WRow = ${y} / (filterDims[1] * inChannels);
      let WCol = ${y} / inChannels % filterDims[1];
      let xR = f32(outRow - pads[0] + dilation[0] * WRow) / f32(strides[0]);
      let xC = f32(outCol - pads[1] + dilation[1] * WCol) / f32(strides[1]);
      if (xR < 0.0 || xR >= f32(${o}) || fract(xR) > 0.0) {
        return ${n}(0.0);
      }
      if (xC < 0.0 || xC >= f32(${c}) || fract(xC) > 0.0) {
        return ${n}(0.0);
      }
      let iXR = i32(xR);
      let iXC = i32(xC);
      let xCh = ${y} % inChannels;
      ${u}
      return x[getIndexFromCoords4D(coord, vec4<i32>(uniforms.x_shape))/${a}];`,w=e?`
      let col = colIn * ${a};
      if (row < uniforms.dimAOuter && col < uniforms.dimInner) {
        ${h}
      }
      return ${n}(0.0);`:`
      let col = colIn * ${a};
      if (row < uniforms.dimInner && col < uniforms.dimBOuter) {
        ${h}
      }
      return ${n}(0.0);`,v=`
      let col = colIn * ${a};
      let inChannels = ${e?"outBackprop[3]":"outBackprop[1]"};
      let coordX = filterDims.x - 1 - row / (filterDims[1] * inChannels);
      let coordY = filterDims.y - 1 - (row / inChannels) % filterDims[1];
      if (${e?"row < uniforms.dimInner && col < uniforms.dimBOuter":"row < uniforms.dimInner && col < uniforms.dimAOuter"}  && coordX >= 0 && coordY >= 0) {
        let rowInner = row % inChannels;
        let coord = vec4<i32>(coordX, coordY, col, rowInner);
        ${s(a)}
      }
      return ${n}(0.0);
      `,{activationFunction:$,applyActivation:C}=Et(r,n);return`
      ${$}
  fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${n} {
    ${e?w:v}
  }

  fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${n} {
    ${e?v:w}
  }

  fn mm_write(batch: i32, row : i32, colIn : i32, valueInput : ${n}) {
    let col = colIn * ${a};
    if (row < uniforms.dimAOuter && col < uniforms.dimBOuter) {
      var value = valueInput;
      let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};
      ${l}
      ${cn(t)}
      ${C}
      result[getIndexFromCoords4D(coords, vec4<i32>(uniforms.result_shape))/${a}] = value;
    }
  }`},Rs=(e,t,r,a,n,s,u,l)=>{let o=t.format==="NHWC",c=o?e[0].dims[3]:e[0].dims[1],f=r[0],y=o?r[2]:r[3],h=o?r[1]:r[2],w=o?r[3]:r[1],v=o?c%4===0&&w%4===0:y%4===0&&w%4===0,$=o?w:y*h,C=o?y*h:w,_=v?[8,8,1]:[$<=4||C<=4?4:16,$>4&&C<=4?4:16,1],I=v?[4,4,1]:[$<=4?1:4,$>4&&C<=4?1:4,1],k=[Math.ceil($/_[0]/I[0]),Math.ceil(C/_[1]/I[1]),Math.ceil(f/_[2]/I[2])];Pe("verbose",()=>`[conv_backprop_mm_webgpu] dispatch = ${k}`);let A=v?4:1,B=Math.max(_[0]*A,_[1]),T=v?4:1,z=[{type:"int32",data:a},{type:"int32",data:n},{type:"int32",data:s}],W=U("x",e[0].dataType,e[0].dims.length,T),K=U("w",e[1].dataType,e[1].dims.length,1),ee=q("result",e[0].dataType,r.length,T),M=[W,K];z.push(...pe(e[0].dims)),z.push(...pe(e[1].dims));let Z="";if(u){let xe=U("bias",e[2].dataType,e[2].dims.length,T);M.push(xe),z.push(...pe(e[2].dims)),Z+=`
        fn getBiasByOutputCoords(coords : vec4<i32>) -> ${v?"vec4<f32>":"f32"} {
          return bias[coords.${o?"w":"y"}${v?"/ 4":""}];
        }`}return z.push(...pe(r)),{name:"Conv2DTransposeMatMul",shaderCache:{hint:t.cacheKey},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:k[0],y:k[1],z:k[2]},programUniforms:z}),getShaderSource:xe=>`
        ${fn("uniforms.result_strides")}
        ${xe.registerUniform("dimAOuter","i32").registerUniform("dimBOuter","i32").registerUniform("dimInner","i32").declareVariables(...M,ee)};
        const outBackprop : vec4<i32> = vec4<i32>(${e[0].dims.join(",")});
        const filterDims : vec2<i32> = vec2<i32>(${t.kernelShape[o?1:2]}, ${t.kernelShape[o?2:3]});
        const effectiveFilterDims : vec2<i32> = filterDims + vec2<i32>(
              ${t.dilations[0]<=1?0:(t.kernelShape[o?1:2]-1)*(t.dilations[0]-1)},
              ${t.dilations[1]<=1?0:(t.kernelShape[o?2:3]-1)*(t.dilations[1]-1)});
        const pads : vec2<i32> = vec2<i32>(i32(effectiveFilterDims[0]) - 1 - (${t.pads[0]+t.pads[2]})/2,
                                         i32(effectiveFilterDims[1]) - 1 - (${t.pads[1]+t.pads[3]})/2);
        const strides : vec2<i32> = vec2<i32>(${t.strides[0]}, ${t.strides[1]});
        const dilation : vec2<i32> = vec2<i32>(${t.dilations[0]}, ${t.dilations[1]});
        const dimAOuter : i32 = ${a};
        const dimBOuter : i32 = ${n};
        const dimInner : i32 = ${s};
        ${Z}
        ${cc(o,u,t,A)}
        ${v?wr(I,_,"f32",void 0,!o,B):vr(I,_,"f32",void 0,!o,B,!1,void 0,l)}`}}});var pc,ua,Bs=F(()=>{"use strict";At();be();we();pc=(e,t,r,a,n,s,u=!1,l)=>{let o=r.format==="NHWC",c=o?1:2,f=o?2:3,y=o?3:1,h=V.size(a),w=u?2:1,v=r.group,$=t[1].dims,C=$[0]/v,_=$[1],I=`
  fn setOutputAtIndex(flatIndex : u32, value : ${u?`vec4<${l}>`:l}) {
    result[flatIndex] = ${u?`vec4<${l}>`:l}(value);
  }`;n&&(I+=`
    fn getBiasByOutputCoords(coords : vec4<u32>) -> ${u?`vec4<${l}>`:l} {
      return bias[coords.${o?"w":"y"}${u?"/ 4":""}];
    }`);let k=u?4:1,A=U("W",t[1].dataType,t[1].dims,k),B=U("Dy",t[0].dataType,t[0].dims,k),T=[B,A];n&&T.push(U("bias",t[2].dataType,[a[y]],k));let z=q("result",t[0].dataType,a,k),W=`{
        let batch: u32 = ${s?"global_id.z":"workgroup_id.z"} / outShape[1];
        let r = ${s?"global_id.z":"workgroup_id.z"} % outShape[1];
        let c = ${s?"global_id.y":"workgroup_id.y"} * ${w};
        let d1: u32 = ${s?"global_id.x":"workgroup_id.x"} * 4;

        let dyCorner = vec2<i32>(i32(r), i32(c)) - vec2<i32>(pads);

        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
        // ? = to be determined. : = across all values in that axis.
        var dotProd: array<vec4<${l}>, ${w}>;
        for (var i = 0; i < ${w}; i++) {
          dotProd[i] = vec4<${l}>(0.0);
        }
        for (var wR: u32 = 0; wR < filterDims[0]; wR = wR + 1) {
          var dyR = (${l}(dyCorner.x) + ${l}(wR)) / ${l}(strides.x);
          let wRPerm = filterDims[0] - 1 - wR;
          if (dyR < 0.0 || dyR >= ${l}(outBackprop[1]) ||
              fract(dyR) > 0.0 || wRPerm < 0) {
            continue;
          }
          let idyR: u32 = u32(dyR);

          for (var wC: u32 = 0; wC < filterDims[1]; wC = wC + 1) {
            let dyC = (${l}(dyCorner.y) + ${l}(wC)) / ${l}(strides.y);
            let dyC2 = (${l}(dyCorner.y) + 1.0 + ${l}(wC)) / ${l}(strides.y);
            let wCPerm = filterDims[1] - 1 - wC;
            if (wCPerm < 0) {
              continue;
            }
            var bDyCVal = true;
            var bDyCVal2 = true;
            if (dyC < 0.0 || dyC >= ${l}(outBackprop[2]) ||
                fract(dyC) > 0.0) {
              bDyCVal = false;
            }
            if (dyC2 < 0.0 || dyC2 >= ${l}(outBackprop[2]) ||
                fract(dyC2) > 0.0) {
              bDyCVal2 = false;
            }

            let idyC: u32 = u32(dyC);
            let idyC2: u32 = u32(dyC2);
            if (bDyCVal && bDyCVal2) {
              let d2Length = outBackprop[3];
              for (var d2 :u32 = 0; d2 < d2Length; d2 = d2 + 4) {
                let wValue0 = ${A.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};
                let wValue1 = ${A.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};
                let wValue2 = ${A.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};
                let wValue3 = ${A.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};

                var xValue = ${B.get("batch","idyR","idyC","d2")};
                let tmpval = vec4<${l}>(dot(xValue, wValue0),
                                      dot(xValue, wValue1),
                                      dot(xValue, wValue2),
                                      dot(xValue, wValue3));
                dotProd[0] = dotProd[0] + tmpval;

                xValue =  ${B.get("batch","idyR","idyC2","d2")};

                dotProd[1] = dotProd[1] + vec4<${l}>(dot(xValue, wValue0),
                                                    dot(xValue, wValue1),
                                                    dot(xValue, wValue2),
                                                    dot(xValue, wValue3));
              }
            } else if (bDyCVal) {
              let d2Length = outBackprop[${y}];
              for (var d2: u32 = 0; d2 < d2Length; d2 = d2 + 4) {
                let wValue0 = ${A.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};
                let wValue1 = ${A.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};
                let wValue2 = ${A.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};
                let wValue3 = ${A.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};

                var xValue = ${B.get("batch","idyR","idyC","d2")};
                let tmpval = vec4<${l}>(dot(xValue, wValue0),
                                      dot(xValue, wValue1),
                                      dot(xValue, wValue2),
                                      dot(xValue, wValue3));
                dotProd[0] = dotProd[0] + tmpval;
              }
            } else if (bDyCVal2) {
              let d2Length = outBackprop[3];
              for (var d2: u32 = 0; d2 < d2Length; d2 = d2 + 4) {
                let wValue0 = ${A.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};
                let wValue1 = ${A.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};
                let wValue2 = ${A.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};
                let wValue3 = ${A.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};

                var xValue = ${B.get("batch","idyR","idyC2","d2")};
                let tmpval = vec4<${l}>(dot(xValue, wValue0),
                                      dot(xValue, wValue1),
                                      dot(xValue, wValue2),
                                      dot(xValue, wValue3));
                dotProd[1] = dotProd[1] + tmpval;
              }
            }
          }
        }

        for (var i: u32 = 0; i < ${w}; i = i + 1) {
          let value = dotProd[i] + ${n?"bias[c+i]":"0.0"};
          ${z.set("batch","r","c + i","d1","value")};
        }
      }`,K=`
          let outputIndices = ${z.offsetToIndices("global_idx")};
          let batch = ${z.indicesGet("outputIndices",0)};
          let d1 = ${z.indicesGet("outputIndices",y)};
          let r = ${z.indicesGet("outputIndices",c)};
          let c = ${z.indicesGet("outputIndices",f)};
          let dyCorner = vec2<i32>(i32(r), i32(c)) - pads;
          let dyRCorner = dyCorner.x;
          let dyCCorner = dyCorner.y;
          let groupId = d1 / ${_};
          let wOutChannel = d1 - groupId * ${_};
          // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
          // ? = to be determined. : = across all values in that axis.
          var dotProd = 0.0;
          for (var wR: u32 = 0; wR < effectiveFilterDims.x; wR = wR + 1) {
            if (wR % dilations.x != 0) {
              continue;
            }
            let dyR = (${l}(dyRCorner) + ${l}(wR)) / ${l}(strides[0]);
            let wRPerm = filterDims.x - 1 - wR / dilations.x;
            if (dyR < 0.0 || dyR >= ${l}(outBackprop[${c}]) || fract(dyR) > 0.0 ||
                wRPerm < 0) {
              continue;
            }
            let idyR: u32 = u32(dyR);

            for (var wC: u32 = 0; wC < effectiveFilterDims.y; wC = wC + 1) {
              if (wC % dilations.y != 0) {
                continue;
              }
              let dyC = (${l}(dyCCorner) + ${l}(wC)) / ${l}(strides.y);
              let wCPerm = filterDims.y - 1 - wC / dilations.y;
              if (dyC < 0.0 || dyC >= ${l}(outBackprop[${f}]) ||
                  fract(dyC) > 0.0 || wCPerm < 0) {
                continue;
              }
              let idyC: u32 = u32(dyC);
              var inputChannel = groupId * ${C};
              for (var d2: u32 = 0; d2 < ${C}; d2 = d2 + 1) {
                let xValue = ${o?B.get("batch","idyR","idyC","inputChannel"):B.get("batch","inputChannel","idyR","idyC")};
                let wValue = ${A.get("inputChannel","wOutChannel","u32(wRPerm)","u32(wCPerm)")};
                dotProd = dotProd + xValue * wValue;
                inputChannel = inputChannel + 1;
              }
            }
          }
          let value = dotProd + ${n?"bias[d1]":"0.0"};
          ${z.setByOffset("global_idx","value")};
        `;return`
  ${e.declareVariables(...T,z)}
  ${I}
  const outShape : vec4<u32> = vec4<u32>(${a.join(",")});
  const outBackprop : vec4<u32> = vec4<u32>(${t[0].dims.join(",")});
  const strides : vec2<u32> = vec2<u32>(${r.strides[0]}, ${r.strides[1]});
  const filterDims : vec2<u32> = vec2<u32>(${r.kernelShape[o?1:2]}, ${r.kernelShape[o?2:3]});
  const dilations : vec2<u32> = vec2<u32>(${r.dilations[0]}, ${r.dilations[1]});
  const effectiveFilterDims : vec2<u32> = filterDims + vec2<u32>(
          ${r.dilations[0]<=1?0:(r.kernelShape[o?1:2]-1)*(r.dilations[0]-1)},
          ${r.dilations[1]<=1?0:(r.kernelShape[o?2:3]-1)*(r.dilations[1]-1)});
  const pads : vec2<i32> = vec2<i32>(i32(effectiveFilterDims[0]) - 1 - (${r.pads[0]+r.pads[2]})/2,
                                     i32(effectiveFilterDims[1]) - 1 - (${r.pads[1]+r.pads[3]})/2);
    ${e.mainStart()}
    ${e.guardAgainstOutOfBoundsWorkgroupSizes(h)};
  ${u?W:K}}`},ua=(e,t,r)=>{let a=e.length>2,n=t.outputShape,s=V.size(n),u=[Math.ceil(s/64),1,1];Pe("verbose",()=>`[conv2d_backprop_webgpu] dispatch = ${u}`);let l=Ae(e[0].dataType);return{name:"ConvTranspose2D",shaderCache:{hint:t.cacheKey},getRunData:()=>({dispatchGroup:{x:u[0],y:u[1],z:u[2]},outputs:[{dims:r?r(n):n,dataType:e[0].dataType}]}),getShaderSource:o=>pc(o,e,t,n,a,u[1]===1&&u[2]===1,!1,l)}}});var fc,mc,hc,Ms,Ds,gc,yc,bc,wc,zs,Ws=F(()=>{"use strict";ke();Ps();Bs();Nt();Zt();fc=(e,t,r,a,n,s)=>(e-1)*t+r+(a-1)*n+1-s,mc=(e,t,r,a,n)=>{let s=Math.floor(e/2);t==="SAME_UPPER"?(r[a]=s,r[n]=e-s):t==="SAME_LOWER"&&(r[a]=e-s,r[n]=s)},hc=(e,t,r,a,n,s,u,l,o,c)=>{let f=e.length-2,y=c.length===0;if(o.length===0)for(let v=0;v<f;++v)o.push(0);let h=e[0],w=t[l?3:1]*n;for(let v=0,$=e.length-f-(l?1:0);v<f;++v,++$){let C=e[$],_=y?C*u[v]:c[v],I=fc(C,u[v],s[v],t[$],r[v],_);mc(I,a,s,v,v+f),y&&c.push(u[v]*(C-1)+o[v]+(t[$]-1)*r[v]+1-s[v]-s[v+f])}c.splice(0,0,h),c.splice(l?3:1,0,w)},Ms=(e,t)=>{let r=e.kernelShape.slice();if(e.kernelShape.length===0||e.kernelShape.reduce((h,w)=>h*w,1)===0){r.length=0;for(let h=2;h<t[1].dims.length;++h)r.push(t[1].dims[h])}let a=e.format==="NHWC";r.splice(0,0,t[1].dims[0]),r.splice(a?3:1,0,t[1].dims[1]);let n=e.pads.slice(),s=e.outputShape.slice(),u=e.outputPadding.slice(),l=t[0].dims,o=e.dilations.slice();if(o.reduce((h,w)=>h+w,0)===0){let h=t[0].dims.length-2;o=new Array(h).fill(1)}let c=e.strides.slice();if(c.reduce((h,w)=>h+w,0)===0){let h=t[0].dims.length-2;c=new Array(h).fill(1)}hc(l,r,o,e.autoPad,e.group,n,c,a,u,s);let f=Object.assign({},e),y=e.cacheKey+[r.join("n,"),n.join(","),c.join(","),u.join(","),s.join(","),o.join(",")].join("_");return Object.assign(f,{kernelShape:r,pads:n,outputPadding:u,outputShape:s,dilations:o,strides:c,cacheKey:y}),f},Ds=e=>{let t=dn(e),r=e.format,a=["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][typeof e.autoPad>"u"?0:e.autoPad],n=e.dilations,s=e.group,u=e.kernelShape,l=e.pads,o=e.strides,c=e.wIsConst(),f=e.outputPadding,y=e.outputShape;return J({autoPad:a,format:r,dilations:n,group:s,kernelShape:u,outputPadding:f,outputShape:y,pads:l,strides:o,wIsConst:c,...t})},gc=(e,t)=>{if(!e||e.length!==2&&e.length!==3)throw new Error("Conv requires 2 or 3 inputs");if(e[0].dims.length!==4&&e[0].dims.length!==3)throw new Error("currently only support 2-dimensional conv");if(e[0].dims.length!==e[1].dims.length)throw new Error("filter does not have same dimension as input");let r=e[0].dims[t.format==="NHWC"?e[0].dims.length-1:1],a=e[1].dims[0];if(r!==a)throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");let n=e[1].dims[1]*t.group;if(e.length===3&&(e[2].dims.length!==1||e[2].dims[0]!==n))throw new Error("invalid bias");let s=e[0].dims.length-2;if(t.dilations.reduce((f,y)=>f+y,0)>0&&t.dilations.length!==s)throw new Error(`dilations should be ${s}D`);if(t.strides.reduce((f,y)=>f+y,0)>0&&t.strides.length!==s)throw new Error(`strides should be ${s}D`);if(t.pads.reduce((f,y)=>f+y,0)>0&&t.pads.length!==s*2)throw new Error(`pads should be ${s*2}D`);if(t.outputPadding.length!==s&&t.outputPadding.length!==0)throw new Error(`output_padding should be ${s}D`);if(t.kernelShape.reduce((f,y)=>f+y,0)>0&&t.kernelShape.length!==0&&t.kernelShape.length!==e[1].dims.length-2)throw new Error("invalid kernel shape");if(t.outputShape.length!==0&&t.outputShape.length!==e[0].dims.length-2)throw new Error("invalid output shape")},yc=[2,3,1,0],bc=(e,t,r)=>{let a=Ms(r,t),n=r.format==="NHWC",s=t.length===3;if(a.group!==1){e.compute(ua(t,a));return}let u=a.outputShape,l=u[n?1:2],o=u[n?2:3],c=u[n?3:1],f=t[1].dims[2],y=t[1].dims[3],h=t[0].dims[n?3:1],w=n?l*o:c,v=n?c:l*o,$=f*y*h,C=!0,_=e.kernelCustomData.wT??e.compute(at(t[1],yc),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=_);let I=[t[0],_];s&&(!n&&t[2].dims.length===1?I.push(t[2].reshape([t[2].dims[0],1,1])):I.push(t[2])),e.compute(Rs(I,a,u,w,v,$,s,C),{inputs:I})},wc=(e,t)=>{let r=t.format==="NHWC",a=[e.inputs[0].reshape(r?[e.inputs[0].dims[0],1,e.inputs[0].dims[1],e.inputs[0].dims[2]]:[e.inputs[0].dims[0],e.inputs[0].dims[1],1,e.inputs[0].dims[2]]),e.inputs[1].reshape([e.inputs[1].dims[0],e.inputs[1].dims[1],1,e.inputs[1].dims[2]])];a.length===3&&a.push(e.inputs[2]);let n=t.kernelShape;(n.length===0||n[0]===0)&&(n=[e.inputs[1].dims[2]]);let s=t.dilations;(s.length===0||s[0]===0)&&(s=[1]);let u=t.strides;(u.length===0||u[0]===0)&&(u=[1]);let l=t.pads;l.length===0&&(l=[0,0]),l=[0,l[0],0,l[1]],u=[1].concat(u),s=[1].concat(s),n=[1].concat(n);let o=Ms({...t,pads:l,strides:u,dilations:s,kernelShape:n},a);e.compute(ua(a,o,c=>r?[c[0],c[2],c[3]]:[c[0],c[1],c[3]]))},zs=(e,t)=>{gc(e.inputs,t),e.inputs[0].dims.length===3?wc(e,t):bc(e,e.inputs,t)}});var la,hn,Vs,vc,$c,da,ca,Sc,Ns,Us,Hs=F(()=>{"use strict";be();ke();we();la="[a-zA-Z]|\\.\\.\\.",hn="("+la+")+",Vs="^"+hn+"$",vc="("+hn+",)*"+hn,$c="^"+vc+"$",da=class{constructor(t=-1){this.symbolToIndices=new Map,this.inputIndex=t}addSymbol(t,r){let a=this.symbolToIndices.get(t);a===void 0?a=[r]:a.push(r),this.symbolToIndices.set(t,a)}},ca=class{constructor(t,r){this.equation=r;this.hasEllipsis=!1,this.symbolToInfo=new Map,this.lhs=new Array,this.outputDims=[];let[a,n]=r.includes("->")?r.split("->",2):[r,""];if(!a.match(RegExp($c)))throw new Error("Invalid LHS term");if(a.split(",").forEach((l,o)=>{let c=t[o].dims.slice();if(!l.match(RegExp(Vs)))throw new Error("Invalid LHS term");let f=this.processTerm(l,!0,c,o);this.lhs.push(f)}),n==="")n+=[...this.symbolToInfo.entries()].filter(([l,o])=>o.count===1||l==="...").map(([l])=>l).join("");else if(!n.match(RegExp(hn)))throw new Error("Invalid RHS");n.match(RegExp(la,"g"))?.forEach(l=>{if(l==="...")this.outputDims=this.outputDims.concat(this.ellipsisDims);else{let o=this.symbolToInfo.get(l);if(o===void 0)throw new Error("Invalid RHS symbol");this.outputDims.push(o.dimValue)}}),this.rhs=this.processTerm(n,!0,this.outputDims)}addSymbol(t,r,a){let n=this.symbolToInfo.get(t);if(n!==void 0){if(n.dimValue!==r&&n.count!==1)throw new Error("Dimension mismatch");n.count++,n.inputIndices.push(a)}else n={count:1,dimValue:r,inputIndices:[a]};this.symbolToInfo.set(t,n)}processTerm(t,r,a,n=-1){let s=a.length,u=!1,l=[],o=0;if(!t.match(RegExp(Vs))&&!r&&t!=="")throw new Error("Invalid LHS term");let c=t.match(RegExp(la,"g")),f=new da(n);return c?.forEach((y,h)=>{if(y==="..."){if(u)throw new Error("Only one ellipsis is allowed per input term");u=!0;let w=s-c.length+1;if(w<0)throw new Error("Ellipsis out of bounds");if(l=a.slice(o,o+w),this.hasEllipsis){if(this.ellipsisDims.length!==l.length||this.ellipsisDims.toString()!==l.toString())throw new Error("Ellipsis dimensions mismatch")}else if(r)this.hasEllipsis=!0,this.ellipsisDims=l;else throw new Error("Ellipsis must be specified in the LHS");for(let v=0;v<l.length;v++){let $=String.fromCharCode("0".charCodeAt(0)+h);f.addSymbol($,h+v),this.addSymbol($,a[o++],n)}}else f.addSymbol(y,h),this.addSymbol(y,a[o++],n)}),f}},Sc=(e,t)=>{let r=e[0].dataType,a=new Array(e.length);for(let k=0;k<e.length;++k)a[k]=U(`input${k}`,r,e[k].dims);let n=t.outputDims,s=V.size(n),u=q("output",r,n),l=[],o=Array.from(t.rhs.symbolToIndices.keys()),c="var prod = 1.0;",f="var sum = 0.0;",y="sum += prod;",h=[],w=[],v=[],$=[],C=t.symbolToInfo.size===o.length;t.symbolToInfo.forEach((k,A)=>{if(o.includes(A)){let B=o.indexOf(A);t.lhs.forEach((T,z)=>{if(k.inputIndices.includes(z)){let W=T.symbolToIndices.get(A);if(W===void 0)throw new Error("Invalid symbol error");W.forEach(K=>{l.push(`${a[z].indicesSet(`input${z}Indices`,K,u.indicesGet("outputIndices",B))}`)})}})}else t.lhs.forEach((B,T)=>{let z=t.symbolToInfo.get(A);if(z===void 0)throw new Error("Invalid symbol error");if(z.inputIndices.includes(T)){let W=B.symbolToIndices.get(A);if(W===void 0)throw new Error("Invalid symbol error");W.forEach(K=>{h.push(`${a[T].indicesSet(`input${T}Indices`,K,`${A}`)}`)}),$.push(`prod *= ${a[T].getByIndices(`input${T}Indices`)};`)}}),w.push(`for(var ${A}: u32 = 0; ${A} < ${t.symbolToInfo.get(A)?.dimValue}; ${A}++) {`),v.push("}")});let _=C?[...l,`let sum = ${a.map((k,A)=>k.getByIndices(`input${A}Indices`)).join(" * ")};`]:[...l,f,...w,...h,c,...$,y,...v],I=k=>`
      ${k.declareVariables(...a,u)}

      ${k.mainStart()}
        ${k.guardAgainstOutOfBoundsWorkgroupSizes(s)}
        var outputIndices = ${u.offsetToIndices("global_idx")};
        ${a.map((A,B)=>`var input${B}Indices: ${a[B].type.indices};`).join(`
`)}
        ${_.join(`
`)};
        ${u.setByOffset("global_idx","sum")};
      }`;return{name:"Einsum",shaderCache:{hint:t.equation},getRunData:()=>({outputs:[{dims:n,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(s/64)}}),getShaderSource:I}},Ns=(e,t)=>{let r=new ca(e.inputs,t.equation);e.compute(Sc(e.inputs,r))},Us=e=>{let t=e.equation.replace(/\s+/g,"");return J({equation:t})}});var xc,Ls,Ic,Cc,Gs,Fs=F(()=>{"use strict";be();we();xc=e=>{if(!e||e.length!==2)throw new Error("Expand requires 2 input.");let t=e[0].dims,r=Array.from(e[1].getBigInt64Array(),Number),a=r.length<t.length?0:r.length-t.length,n=t.length<r.length?0:t.length-r.length;for(;a<r.length&&n<t.length;++a,++n)if(r[a]!==t[n]&&r[a]!==1&&t[n]!==1)throw new Error("Expand requires shape to be broadcastable to input")},Ls=(e,t)=>{let r=e.length-t.length,a=[];for(let n=0;n<r;++n)a.push(e[n]);for(let n=0;n<t.length;++n)a.push(t[n]===1?e[n+r]:t[n]);return a},Ic=(e,t)=>e.length>t.length?Ls(e,t):Ls(t,e),Cc=e=>{let t=e[0].dims,r=Array.from(e[1].getBigInt64Array(),Number),a=Ic(t,r),n=V.size(a),s=e[0].dataType,u=Re(t.length),l=u?t.length:t,o=U("input",s,l),c=Re(a.length),f=c?a.length:a,y=q("output",s,f),h=v=>`
  const inputShape = ${o.indices(...t)};
  ${v.registerUniform("vec_size","u32").declareVariables(o,y)}
  ${v.mainStart()}
  ${v.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}
    let outputIndices = ${y.offsetToIndices("global_idx")};
    var inputIndices: ${o.type.indices};
    for (var i = 0; i < ${t.length}; i++) {
      if (${o.indicesGet("inputShape","i")} == 1) {
        ${o.indicesSet("inputIndices","i",0)}
      } else {
        ${o.indicesSet("inputIndices","i",y.indicesGet("outputIndices",`i + ${a.length-t.length}`))}
      }
    }
    ${y.setByOffset("global_idx",o.getByIndices("inputIndices"))}
  }`,w=[{type:"uint32",data:n}];return u&&w.push(...pe(t)),c&&w.push(...pe(a)),{name:"Expand",shaderCache:{hint:`${a}`,inputDependencies:[u?"rank":"dims"]},getShaderSource:h,getRunData:()=>({outputs:[{dims:a,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(n/64)},programUniforms:w})}},Gs=e=>{xc(e.inputs),e.compute(Cc(e.inputs),{inputs:[0]})}});var _c,Ac,qs,js,Ks=F(()=>{"use strict";be();ke();we();_c=e=>{if(!e||e.length!==2)throw new Error("Gather requires 2 inputs.")},Ac=(e,t)=>{let r=e[0].dims,a=e[1].dims,n=r.length,s=V.normalizeAxis(t.axis,n),u=r.slice(0);u.splice(s,1,...a);let l=r[s],o=V.size(u),c=Re(e[0].dims.length),f=c?e[0].dims.length:e[0].dims,y=Re(e[1].dims.length),h=y?e[1].dims.length:e[1].dims,w=Re(u.length),v=w?u.length:u,$=U("data",e[0].dataType,f),C=U("inputIndices",e[1].dataType,h),_=q("output",e[0].dataType,v),I=[{type:"uint32",data:o},{type:"int32",data:l},{type:"uint32",data:s}];c&&I.push(...pe(e[0].dims)),y&&I.push(...pe(e[1].dims)),w&&I.push(...pe(u));let k=[];k.push(c?"rank":"dims"),k.push(y?"rank":"dims");let A=()=>{let T=a.length,z=`var indicesIndices  = ${C.type.indices}(0);`;for(let W=0;W<T;W++)z+=`${T>1?`indicesIndices[${W}]`:"indicesIndices"} = ${u.length>1?`outputIndices[uniforms.axis + ${W}]`:"outputIndices"};`;z+=`
        var idx = ${C.getByIndices("indicesIndices")};
        if (idx < 0) {
          idx = idx + uniforms.axisDimLimit;
        }
        var dataIndices = ${$.type.indices}(0);
      `;for(let W=0,K=0;W<n;W++)W===s?(z+=`${n>1?`dataIndices[${W}]`:"dataIndices"} = u32(idx);`,K+=T):(z+=`${n>1?`dataIndices[${W}]`:"dataIndices"} = ${u.length>1?`outputIndices[${K}]`:"outputIndices"};`,K++);return z},B=T=>`
      ${T.registerUniform("outputSize","u32").registerUniform("axisDimLimit","i32").registerUniform("axis","u32").declareVariables($,C,_)}
      ${T.mainStart()}
        ${T.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
        let outputIndices = ${_.offsetToIndices("global_idx")};
        ${A()};
        let value = ${$.getByIndices("dataIndices")};
        ${_.setByOffset("global_idx","value")};
      }`;return{name:"Gather",shaderCache:{hint:t.cacheKey,inputDependencies:k},getRunData:()=>({outputs:[{dims:u,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(o/64)},programUniforms:I}),getShaderSource:B}},qs=e=>J({axis:e.axis}),js=(e,t)=>{let r=e.inputs;_c(r),e.compute(Ac(e.inputs,t))}});var Ec,Tc,Ys,Zs,Xs=F(()=>{"use strict";be();ke();we();Ec=e=>{if(!e||e.length!==2)throw new Error("GatherElements requires 2 inputs.");if(e[0].dims.length<1)throw new Error("GatherElements requires that the data input be rank >= 1.");if(e[0].dims.length!==e[1].dims.length)throw new Error(`GatherElements requires that the data input and
                     indices input tensors be of same rank.`)},Tc=(e,t)=>{let r=e[0].dims,a=e[0].dataType,n=r.length,s=V.computeStrides(r),u=V.size(r),l=e[1].dims,o=e[1].dataType,c=V.size(l),f=V.normalizeAxis(t.axis,n),y=r[f],h=l.slice(0),w=V.size(h),v=U("input",a,r),$=U("indices",o,[c]),C=q("output",a,h),_=I=>`
      const inputStrides = array<u32, ${s.length}>(${s.map(k=>`${k}u`).join(",")});
      ${I.declareVariables(v,$,C)}
      ${I.mainStart()}
      ${I.guardAgainstOutOfBoundsWorkgroupSizes(w)}

      let outputIndices = ${C.offsetToIndices("global_idx")};

      var idx = ${$.getByOffset("global_idx")};
      if (idx < 0) {
        idx = idx + ${y};
      }

      var srcOffset = u32(0);

      for (var i = 0; i < ${r.length}; i++) {
        if (i == ${f}) {
          srcOffset +=  u32(idx) * inputStrides[i];
        } else {
          srcOffset += ${C.indicesGet("outputIndices","i")} * inputStrides[i];
        }
      }

      // Should never hit this with valid values in indices
      // This is a guard against malicious data in the indices input
      if (srcOffset < 0 || srcOffset >= ${u}) {
        return;
      }

      output[global_idx] = input[srcOffset];
  }`;return{name:"GatherElements",shaderCache:{hint:t.cacheKey},getRunData:()=>({outputs:[{dims:h,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(w/64)}}),getShaderSource:_}},Ys=e=>J({axis:e.axis}),Zs=(e,t)=>{let r=e.inputs;Ec(r),e.compute(Tc(e.inputs,t))}});var Oc,kc,Rc,Qs,Js,eu=F(()=>{"use strict";be();ke();we();Oc=e=>{if(!e)throw new Error("Input is missing");if(e.length<2||e.length>3)throw new Error("Invaid input number.");if(e.length===3&&e[2].dims.length>2)throw new Error("Invalid input shape of C");if(e[0].dataType!==e[1].dataType||e.length===3&&e[0].dataType!==e[2].dataType)throw new Error("Input types are mismatched")},kc=(e,t,r)=>{if(r.length===0)return"0u";let a=r.length===1&&e!==1||r.length===2&&r[0]!==e,n=r[r.length-1]!==t,s="0u";return a||(s+=`+ m * ${r[r.length-1]}u`),n||(s+="+n"),s},Rc=(e,t)=>{let r=e[0].dims.slice(),a=e[1].dims.slice(),[n,s,u]=tn.getShapeOfGemmResult(r,t.transA,a,t.transB,e.length===3?e[2].dims:void 0),l=[n,s];if(!l)throw new Error("Can't use gemm on the given tensors");let o=V.size(l),c="";t.transA&&t.transB?c="value += a[k * M + m] * b[n * K + k];":t.transA&&!t.transB?c="value += a[k * M + m] * b[k * N + n];":!t.transA&&t.transB?c="value += a[m * K + k] * b[n * K + k];":!t.transA&&!t.transB&&(c="value += a[m * K + k] * b[k * N + n];");let f=Ae(e[0].dataType),y=t.alpha===1?"":"value *= alpha;",h=e.length===3?`value += beta * c[${kc(n,s,e[2].dims)}];`:"",w=[`@group(0) @binding(0) var<storage, read> a : array<${f}>;`,`@group(0) @binding(1) var<storage, read> b : array<${f}>;`];e.length===3&&w.push(`@group(0) @binding(2) var<storage, read> c : array<${f}>;`);let v=$=>`
  const M: u32 = ${n}u;
  const N: u32 = ${s}u;
  const K: u32 = ${u}u;
  const alpha = ${f}(${t.alpha});
  const beta = ${f}(${t.beta});

  ${w.join(`
`)}
  @group(0) @binding(${e.length}) var<storage, read_write> output : array<${f}>;

  ${$.mainStart()}
    ${$.guardAgainstOutOfBoundsWorkgroupSizes(o)}

    let m = global_id.x / N;
    let n = global_id.x % N;

    var value = ${f}(0);
    for (var k: u32 = 0u; k<${u}u; k++) {
      ${c}
    }

    ${y}
    ${h}
    output[global_id.x] = value;

  }`;return{name:"Gemm",shaderCache:{hint:t.cacheKey},getRunData:()=>({outputs:[{dims:l,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(o/64)}}),getShaderSource:v}},Qs=(e,t)=>{Oc(e.inputs),e.compute(Rc(e.inputs,t))},Js=e=>J(e)});var Pc,Bc,Mc,Dc,tu,ru,nu=F(()=>{"use strict";We();be();ke();we();Pc={name:"InstanceNormalization"},Bc=(e,t)=>{let r=e[0].dims,a=r,n=2,s=V.sizeToDimension(r,n),u=V.sizeFromDimension(r,n),l=r[1],o=U("x",e[0].dataType,[r[0],r[1],u]),c=U("scale",e[1].dataType,e[1].dims),f=U("bias",e[2].dataType,e[2].dims),y=q("output",e[0].dataType,[r[0],r[1],u]),h=[o,c,f,y],w=o.type.value,v=64,$=C=>`

  const C: u32 = ${l};
  const normSize: u32 = ${u};
  const epsilon: f32 = ${t.epsilon};
  var<workgroup> meanShared : ${w};
  var<workgroup> squaredNormShared : ${w};
  var<workgroup> workgroupShared : array<${w}, ${v}>;
  const workgroupSize = ${v}u;
  ${C.declareVariables(...h)}
  ${C.mainStart(v)}
    let norm = global_idx / workgroupSize;
    let batch = norm / C;
    let channel = norm % C;
    let localIndex = local_id.x;

    // initialize workgroup memory
    var initial: ${w} = 0;
    for (var h = localIndex; h < normSize; h += workgroupSize) {
      initial = initial + ${o.get("batch","channel","h")};
    }
    workgroupShared[localIndex] = initial;
    workgroupBarrier();

    // Calculate the mean of current channel data.
    for (var currSize = workgroupSize >> 1;  currSize > 0; currSize = currSize >> 1) {
      if (localIndex < currSize) {
        workgroupShared[localIndex] = workgroupShared[localIndex] + workgroupShared[localIndex + currSize];
      }
      workgroupBarrier();
    }
    if (localIndex == 0) {
      meanShared = workgroupShared[0] / ${w}(normSize);
    }
    workgroupBarrier();

    // reinitialize workgroup memory.
    initial = 0;
    for (var h = localIndex; h < normSize; h += workgroupSize) {
      let deviation =  ${o.get("batch","channel","h")} - meanShared;
      initial = initial + deviation * deviation;
    }
    workgroupShared[localIndex] = initial;
    workgroupBarrier();

    // Calculate the sum of square of deviation of current channel data.
    for (var currSize = workgroupSize >> 1;  currSize > 0; currSize = currSize >> 1) {
      if (localIndex < currSize) {
        workgroupShared[localIndex] = workgroupShared[localIndex] + workgroupShared[localIndex + currSize];
      }
      workgroupBarrier();
    }
    if (localIndex == 0) {
      squaredNormShared = workgroupShared[0];
    }
    workgroupBarrier();

    let invStdDev = 1 / sqrt(squaredNormShared / ${w}(normSize) + epsilon);
    let channelScale = invStdDev * ${c.getByOffset("channel")};
    let channelShift = ${f.getByOffset("channel")} - meanShared * channelScale;
    for (var h = localIndex; h < normSize; h += workgroupSize) {
      let value = ${o.get("batch","channel","h")} * channelScale + channelShift;
      ${y.set("batch","channel","h","value")};
    }
  }`;return{...Pc,shaderCache:{hint:t.cacheKey},getRunData:()=>({outputs:[{dims:a,dataType:e[0].dataType}],dispatchGroup:{x:s}}),getShaderSource:$}},Mc=(e,t,r,a,n,s,u,l)=>{let o=Ze(u),c=U("input",t.dataType,t.dims,o),f=U("scale",r.dataType,r.dims,o),y=U("bias",a.dataType,a.dims,o),h=64,w=o===1?"vec2f":`mat2x${o}f`,v=o===1?"f32":`vec${o}f`,$=(B,T)=>`${w}(${B}, ${T})`,C=n*u/o,_=Math.ceil(s/h),I=B=>`
  const H: u32 = ${s};
  const C: u32 = ${u/o};
  const imageSize: u32 = ${s*u/o};

  ${B.declareVariables(c)}
  @group(0) @binding(1) var<storage, read_write> output : array<${w}>;

  ${B.mainStart(h)}
    let currentImageNumber = global_idx / ${h} / C;
    let currentChannelNumber = (global_idx / ${h}) % C;
    let wgId = global_idx % ${h};
    let wgOffset = wgId * ${_};
    if (wgOffset >= H) {
        return;
    }
    let wgMax = min(wgOffset + ${_}, H);

    let offset = currentImageNumber * imageSize + currentChannelNumber;
    var sum = ${Fe("f32",o)};
    var squaredSum = ${Fe("f32",o)};
    for (var i: u32 = wgOffset; i < wgMax; i++) {
        let value = ${v}(input[offset + i * C]);
        sum += value;
        squaredSum += value * value;
    }
    output[global_idx] = ${$("sum","squaredSum")};
  }`,k=e.compute({name:"InstanceNormComputeMean",shaderCache:{hint:JSON.stringify({components:o,n,h:s,c:u})},getRunData:()=>({outputs:[{dims:[n,u,h,2],dataType:1}],dispatchGroup:{x:n*u/o}}),getShaderSource:I},{inputs:[t],outputs:[-1]})[0],A=B=>`
  const H: u32 = ${s};
  const C: u32 = ${u/o};
  const imageSize: u32 = ${h*u/o};
  const epsilon: f32 = ${l};

  @group(0) @binding(0) var<storage, read> input : array<${w}>;
  @group(0) @binding(1) var<storage, read> scale : array<${f.type.storage}>;
  @group(0) @binding(2) var<storage, read> bias : array<${y.type.storage}>;
  @group(0) @binding(3) var<storage, read_write> output : array<${w}>;

  ${B.mainStart()}
    ${B.guardAgainstOutOfBoundsWorkgroupSizes(C)}
    let currentImageNumber = global_idx / C;
    let currentChannelNumber = global_idx % C;

    let offset = currentImageNumber * imageSize;
    var sum = ${Fe("f32",o)};
    var squaredSum = ${Fe("f32",o)};
    for (var i: u32 = 0; i < ${h}; i++) {
        let value = input[offset + i + currentChannelNumber * ${h}];
        sum += value[0];
        squaredSum += value[1];
    }
    sum = sum / f32(H);
    squaredSum = squaredSum / f32(H);
    let invStdDev = 1 / sqrt(squaredSum - sum * sum + epsilon);
    let channelScale = invStdDev * ${v}(scale[currentChannelNumber]);
    let channelShift = ${v}(bias[currentChannelNumber]) - sum * channelScale;

    output[global_idx] = ${$("channelScale","channelShift")};
  }`;return e.compute({name:"InstanceNormComputeChannelScaleShift",shaderCache:{hint:JSON.stringify({components:o,n,h:s,c:u,epsilon:l})},getRunData:()=>({outputs:[{dims:[n,u,2],dataType:1}],dispatchGroup:{x:Math.ceil(C/64)}}),getShaderSource:A},{inputs:[k,r,a],outputs:[-1]})[0]},Dc=(e,t,r)=>{let a=t[0].dims,n=a,s=a[0],u=a[a.length-1],l=V.sizeFromDimension(a,1)/u,o=Ze(u),c=V.size(n)/o,f=U("input",t[0].dataType,t[0].dims,o),y=q("output",t[0].dataType,n,o),h=Ae(t[0].dataType),w=o===1?"vec2f":`mat2x${o}f`,v=o===1?h:`vec${o}<${h}>`,$=Mc(e,t[0],t[1],t[2],s,l,u,r.epsilon),C=_=>`
  const H: u32 = ${l};
  const C: u32 = ${u/o};

  @group(0) @binding(0) var<storage, read> input : array<${f.type.storage}>;
  @group(0) @binding(1) var<storage, read> scaleInput : array<${w}>;
  @group(0) @binding(2) var<storage, read_write> output : array<${y.type.storage}>;

  ${_.mainStart()}
    let currentImageNumber = global_idx / (C * H);
    let currentChannelNumber = global_idx % C;

    let scaleOffset = currentImageNumber * C + currentChannelNumber;
    let scale = scaleInput[scaleOffset];
    output[global_idx] = fma(input[global_idx], ${v}(scale[0]), ${v}(scale[1]));
  }`;e.compute({name:"InstanceNormalization",shaderCache:{hint:`${r.cacheKey}`},getRunData:()=>({outputs:[{dims:n,dataType:t[0].dataType}],dispatchGroup:{x:Math.ceil(c/64)}}),getShaderSource:C},{inputs:[t[0],$]})},tu=e=>J({epsilon:e.epsilon,format:e.format}),ru=(e,t)=>{t.format==="NHWC"?Dc(e,e.inputs,t):e.compute(Bc(e.inputs,t))}});var zc,Wc,au,ou,iu=F(()=>{"use strict";We();be();ke();we();zc=e=>{if(!e||e.length<2)throw new Error("layerNorm requires at least 2 inputs.")},Wc=(e,t,r)=>{let a=e[0].dims,n=e[1],s=e[2],u=a,l=V.normalizeAxis(t.axis,a.length),o=V.sizeToDimension(a,l),c=V.sizeFromDimension(a,l),f=V.size(n.dims),y=s?V.size(s.dims):0;if(f!==c||s&&y!==c)throw new Error(`Size of X.shape()[axis:] == ${c}.
       Size of scale and bias (if provided) must match this.
       Got scale size of ${f} and bias size of ${y}`);let h=[];for(let A=0;A<a.length;++A)A<l?h.push(a[A]):h.push(1);let w=Ze(c),v=Ae(e[0].dataType),$=[U("x",e[0].dataType,e[0].dims,w),U("scale",n.dataType,n.dims,w)];s&&$.push(U("bias",s.dataType,s.dims,w)),$.push(q("output",e[0].dataType,u,w));let C=r>1,_=r>2;C&&$.push(q("meanDataOutput",1,h)),_&&$.push(q("invStdOutput",1,h));let I=A=>`
  const normSize: f32 = ${c};
  const normSizeVectorized: u32 = ${c/w};
  const epsilon: f32 = ${t.epsilon};

  ${A.declareVariables(...$)}
  ${A.mainStart()}
    ${A.guardAgainstOutOfBoundsWorkgroupSizes(o)}
    let offset = global_idx * normSizeVectorized;
    var meanVector = ${Fe("f32",w)};
    var meanSquareVector = ${Fe("f32",w)};

    for (var h: u32 = 0u; h < normSizeVectorized; h++) {
      let value = ${rt(v,w,"x[h + offset]")};
      meanVector += value;
      meanSquareVector += value * value;
    }
    let mean = ${nt("meanVector",w)} / normSize;
    let meanSquare = sqrt(${nt("meanSquareVector",w)} 
      / normSize - mean * mean + epsilon);

    for (var j: u32 = 0; j < normSizeVectorized; j++) {
      let f32input = ${rt(v,w,"x[j + offset]")};
      let f32scale = ${rt(v,w,"scale[j]")};
      output[j + offset] = ${$[0].type.value}((f32input - mean) / meanSquare * f32scale
        ${s?`+ ${rt(v,w,"bias[j]")}`:""}
      );
    }

    ${C?"meanDataOutput[global_idx] = mean":""};
    ${_?"invStdOutput[global_idx] = 1 / meanSquare":""};
  }`,k=[{dims:u,dataType:e[0].dataType}];return C&&k.push({dims:h,dataType:1}),_&&k.push({dims:h,dataType:1}),{name:"LayerNormalization",shaderCache:{hint:`${t.cacheKey}|${r}|${e.length}`},getRunData:()=>({outputs:k,dispatchGroup:{x:Math.ceil(o/64)}}),getShaderSource:I}},au=e=>J({axis:e.axis,epsilon:e.epsilon}),ou=(e,t)=>{zc(e.inputs),e.compute(Wc(e.inputs,t,e.outputCount))}});var Vc,su,uu=F(()=>{"use strict";be();$r();Vc=e=>{if(!e||e.length!==2)throw new Error("MatMul requires 2 inputs.");if(e[0].dims[e[0].dims.length-1]!==e[1].dims[e[1].dims.length-2])throw new Error("shared dimension does not match.")},su=e=>{Vc(e.inputs);let t=dt.calcShape(e.inputs[0].dims,e.inputs[1].dims,!0);if(!t)throw new Error("Can't use matmul on the given tensors");e.compute(mn(e.inputs,{activation:"",activationCacheKey:""},t))}});var Nc,du,lu,Uc,pa,cu,pu=F(()=>{"use strict";be();ke();Jr();ea();we();Zt();Nc=(e,t)=>{let r=e[0],a=e[1],n=e[2],s=e[3],u=e[4],l=e[5],o=e[6],c=e[7];if(r.dims.length!==3&&r.dims.length!==5)throw new Error("Input query is expected to have 3 or 5 dimensions");let f=!1,y=r.dims[0],h=r.dims[1],w=r.dims.length===3?f?r.dims[2]/3:r.dims[2]:t.numHeads*r.dims[4],v=h,$=0,C=0,_=Math.floor(w/t.numHeads);if(o&&c){if(o.dims.length!==4)throw new Error('Input "past_key" is expected to have 4 dimensions');if(c.dims.length!==4)throw new Error('Input "past_value" is expected to have 4 dimensions');$=o.dims[2],C=o.dims[2]}else if(o||c)throw new Error('Input "past_key" and "past_value" shall be both present or both absent');let I;if(a){if(r.dims.length!==3)throw new Error('Input "query" is expected to have 3 dimensions when key is given');if(a.dims.length<3||a.dims.length>5)throw new Error('Input "key" is expected to have 3, 4, or 5 dimensions');if(r.dims[0]!==a.dims[0])throw new Error('Input "query" and "key" shall have same dim 0 (batch size)');if(a.dims.length===3){if(a.dims[2]!==r.dims[2])throw new Error('Input "query" and "key" shall have same dim 2 (hidden_size)');I=2,v=a.dims[1]}else if(a.dims.length===5){if(a.dims[2]!==t.numHeads||a.dims[3]!==2||a.dims[4]!==_)throw new Error('Expect "key" shape (batch_size, kv_sequence_length, num_heads, 2, head_size) for packed kv');if(n)throw new Error('Expect "value" be none when "key" has packed kv format.');I=5,v=a.dims[1]}else{if(a.dims[1]!==t.numHeads||a.dims[3]!==_)throw new Error('Expect "key" shape (batch_size, num_heads, kv_sequence_length, head_size) for past_key');I=0,v=a.dims[2]}}else{if(r.dims.length!==3&&r.dims.length!==5)throw new Error('Input "query" is expected to have 3 or 5 dimensions when key is empty');if(r.dims.length===5&&(r.dims[2]!==t.numHeads||r.dims[3]!==3))throw new Error('Expect "query" shape (batch_size, kv_sequence_length, num_heads, 3, head_size) for packed kv');I=3}if(s){if(s.dims.length!==1)throw new Error('Input "bias" is expected to have 1 dimension');if(n&&r.dims.length===5&&r.dims[3]===2)throw new Error("bias is not allowed for packed kv.")}let k=0;if(u){k=8;let W=u.dims;throw W.length===1?W[0]===y?k=1:W[0]===3*y+2&&(k=3):W.length===2&&W[0]===y&&W[1]===v&&(k=5),k===8?new Error('Input "key_padding_mask" shape shall be (batch_size) or (batch_size, kv_sequence_length)'):new Error("Mask not supported")}let A=!1,B=w;if(n){if(n.dims.length!==3&&n.dims.length!==4)throw new Error('Input "value" is expected to have 3 or 4 dimensions');if(r.dims[0]!==n.dims[0])throw new Error('Input "query" and "value" shall have same dim 0 (batch_size)');if(n.dims.length===3){if(v!==n.dims[1])throw new Error('Input "key" and "value" shall have the same dim 1 (kv_sequence_length)');B=n.dims[2]}else{if(v!==n.dims[2])throw new Error('Input "past_key" and "past_value" shall have the same dim 2 (kv_sequence_length)');B=n.dims[1]*n.dims[3],A=!0}}let T=$+v,z=!1;if(u)throw new Error("Key padding mask is not supported");if(l)throw new Error("extraAddQk is not supported");if(o)throw new Error("pastKey is not supported");if(c)throw new Error("pastValue is not supported");return{batchSize:y,sequenceLength:h,pastSequenceLength:$,kvSequenceLength:v,totalSequenceLength:T,maxSequenceLength:C,inputHiddenSize:0,hiddenSize:w,vHiddenSize:B,headSize:_,vHeadSize:Math.floor(B/t.numHeads),numHeads:t.numHeads,isUnidirectional:!1,pastPresentShareBuffer:!1,maskFilterValue:t.maskFilterValue,maskType:k,scale:t.scale,broadcastResPosBias:z,passPastInKv:A,qkvFormat:I}},du=e=>J({...e}),lu=J({perm:[0,2,1,3]}),Uc=(e,t,r,a,n,s,u)=>{let l=[a,n,s],o=V.size(l),c=Ae(t.dataType),f=y=>`
  const biasOffset = ${u}u;
  const hiddenSize = ${s}u;

  @group(0) @binding(0) var<storage, read> qkv: array<${c}>;
  @group(0) @binding(1) var<storage, read> bias: array<${c}>;
  @group(0) @binding(2) var<storage, read_write> qkv_with_bias: array<${c}>;

  ${y.mainStart()}
    ${y.guardAgainstOutOfBoundsWorkgroupSizes(o)}
    let biasOffsetIdx = (global_idx % hiddenSize) + biasOffset;

    qkv_with_bias[global_idx] = qkv[global_idx] + bias[biasOffsetIdx];
  }`;return e.compute({name:"MultiHeadAttentionAddBias",shaderCache:{hint:JSON.stringify({batchSize:a,sequenceLength:n,hiddenSize:s,biasOffset:u})},getRunData:()=>({outputs:[{dims:l,dataType:t.dataType,gpuDataType:0}],dispatchGroup:{x:Math.ceil(o/64)}}),getShaderSource:f},{inputs:[t,r],outputs:[-1]})[0]},pa=(e,t,r,a,n,s,u,l)=>{let o=s;if(u){if(a===1)throw new Error("AddBiasReshape is not implemented. Please export your model with packed QKV or KV");return o=Uc(e,s,u,t,a,r*n,l),o=o.reshape([t,a,r,n]),e.compute(at(o,lu.perm),{inputs:[o],outputs:[-1]})[0]}else return s.dims.length===3&&(o=s.reshape([t,a,r,n])),e.compute(at(o,lu.perm),{inputs:[o],outputs:[-1]})[0]},cu=(e,t)=>{let r=Nc(e.inputs,t);if(e.inputs[0].dims.length===5)throw new Error("Packed QKV is not implemented");if(e.inputs[1]?.dims.length===5)throw new Error("Packed KV is not implemented");let a=e.inputs[1]&&e.inputs[2]&&e.inputs[1].dims.length===4&&e.inputs[2].dims.length===4,n=pa(e,r.batchSize,r.numHeads,r.sequenceLength,r.headSize,e.inputs[0],e.inputs[3],0);if(a)return sn(e,n,e.inputs[1],e.inputs[2],e.inputs[4],void 0,void 0,void 0,e.inputs[5],r,t);let s=pa(e,r.batchSize,r.numHeads,r.kvSequenceLength,r.headSize,e.inputs[1],e.inputs[3],r.hiddenSize),u=pa(e,r.batchSize,r.numHeads,r.kvSequenceLength,r.vHeadSize,e.inputs[2],e.inputs[3],2*r.hiddenSize);sn(e,n,s,u,e.inputs[4],void 0,e.inputs[6],e.inputs[7],e.inputs[5],r,t)}});var Hc,Lc,Gc,Fc,qc,jc,Kc,Yc,Zc,fu,mu,hu=F(()=>{"use strict";We();be();ke();we();Hc=e=>{if(!e||e.length<1)throw new Error("Too few inputs");if(e[0].dataType!==1)throw new Error("Input type must be float.");if(e.length>=2){let t=e[0].dims.length*2===e[1].dims[0];if(e.length===4&&(t=e[3].dims[0]*2===e[1].dims[0]),!t)throw new Error("The pads should be a 1D tensor of shape [2 * input_rank] or [2 * num_axes].")}},Lc=(e,t,r,a,n,s)=>{let u=t.length,l="";for(let o=u-1;o>=0;--o)l+=`
            k = i32(${e.indicesGet("indices",o)}) - ${a[o]};
            if (k < 0) {
              break;
            }
            if (k >= ${t[o]}) {
              break;
            }
            offset += k * ${r[o]};
        `;return`
          value = ${n}(${s});
          for (var i = 0; i < 1; i++) {
            var offset = 0;
            var k = 0;
            ${l}
            value = x[offset];
          }
      `},Gc=(e,t,r,a)=>{let n=t.length,s="";for(let u=n-1;u>=0;--u)s+=`
                k = i32(${e.indicesGet("indices",u)}) - ${a[u]};
                if (k < 0) {
                  k = -k;
                }
                {
                  let _2n_1 = ${2*(t[u]-1)};
                  k = k % _2n_1;
                  if(k >= ${t[u]}) {
                    k = _2n_1 - k;
                  }
                }
                offset += k * ${r[u]};
            `;return`
              var offset = 0;
              var k = 0;
              ${s}
              value = x[offset];
          `},Fc=(e,t,r,a)=>{let n=t.length,s="";for(let u=n-1;u>=0;--u)s+=`
                k = i32(${e.indicesGet("indices",u)}) - ${a[u]};
                if (k < 0) {
                  k = 0;
                }
                if (k >= ${t[u]}) {
                  k = ${t[u]-1};
                }
                offset += k * ${r[u]};
            `;return`
              var offset = 0;
              var k = 0;
              ${s}
              value = x[offset];
          `},qc=(e,t,r,a)=>{let n=t.length,s="";for(let u=n-1;u>=0;--u)s+=`
                k = i32(${e.indicesGet("indices",u)}) - ${a[u]};
                if (k < 0)  {
                  k += ${t[u]};
                }
                if (k >= ${t[u]}) {
                  k -= ${t[u]};
                }
                offset += k * ${r[u]};
            `;return`
              var offset = 0;
              var k = 0;
              ${s}
              value = x[offset];
          `},jc=(e,t,r,a,n)=>{switch(a.mode){case 0:return Lc(e,t,r,a.pads,n,a.value);case 1:return Gc(e,t,r,a.pads);case 2:return Fc(e,t,r,a.pads);case 3:return qc(e,t,r,a.pads);default:throw new Error("Invalid mode")}},Kc=(e,t,r,a)=>{let n=t[0].dims,s=V.padShape(n.slice(),r.pads),u=V.size(s),l=V.computeStrides(n),o=q("output",t[0].dataType,s),c=U("x",t[0].dataType,n),f=jc(o,n,l,r,a);return`
              ${e.declareVariables(c,o)}
              ${e.mainStart()}
              ${e.guardAgainstOutOfBoundsWorkgroupSizes(u)}

              let indices = ${o.offsetToIndices("global_idx")};

              var value = ${a}(0);
              ${f}
              output[global_idx] = value;
          }`},Yc=(e,t)=>{let r=V.padShape(e[0].dims.slice(),t.pads);return{name:"Pad",shaderCache:{hint:t.cacheKey},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(V.size(r)/64)}}),getShaderSource:a=>Kc(a,e,t,"f32")}},Zc=(e,t)=>{if(e.length>1){let r=e[1].getBigInt64Array(),a=e.length>=3&&e[2].data?e[2].getFloat32Array()[0]:0,n=e[0].dims.length,s=new Int32Array(2*n).fill(0);if(e.length>=4){let l=e[3].getBigInt64Array();for(let o=0;o<l.length;o++)s[Number(l[o])]=Number(r[o]),s[Number(l[o])+n]=Number(r[o+l.length])}else r.forEach((l,o)=>s[Number(o)]=Number(l));let u=[];return s.forEach(l=>u.push(l)),J({mode:t.mode,value:a,pads:u})}else return t},fu=(e,t)=>{Hc(e.inputs);let r=Zc(e.inputs,t);e.compute(Yc(e.inputs,r),{inputs:[0]})},mu=e=>{let t=e.mode,r=e.value,a=e.pads;return J({mode:t,value:r,pads:a})}});var gn,gu,yu,bu,wu,vu,$u,Su,xu,Iu,Cu,_u,Au,Eu,Tu,Ou=F(()=>{"use strict";be();ke();we();gn=e=>{if(!e||e.length!==1)throw new Error("Pool ops requires 1 input.");if(e[0].dims.length!==4&&e[0].dims.length!==3)throw new Error("Pool ops supports 1-D or 2-D inputs only for now.")},gu=(e,t,r)=>{let a=t.format==="NHWC",n=e.dims.slice();a&&n.splice(1,0,n.pop());let s=Object.hasOwnProperty.call(t,"dilations"),u=t.kernelShape.slice(),l=t.strides.slice(),o=s?t.dilations.slice():[],c=t.pads.slice();Vt.adjustPoolAttributes(r,n,u,l,o,c);let f=Vt.computePoolOutputShape(r,n,l,o,u,c,t.autoPad),y=Object.assign({},t);s?Object.assign(y,{kernelShape:u,strides:l,pads:c,dilations:o,cacheKey:t.cacheKey}):Object.assign(y,{kernelShape:u,strides:l,pads:c,cacheKey:t.cacheKey});let h=f.slice();return h.push(h.splice(1,1)[0]),[y,a?h:f]},yu=(e,t,r,a,n,s,u,l)=>{let o=n.format==="NHWC",c=r,f=t.type.value,y=c.length,h=V.size(a),w=q("output",t.type.tensor,a);if(n.kernelShape.length<=2){let v=n.kernelShape[n.kernelShape.length-1],$=n.strides[n.strides.length-1],C=n.pads[n.pads.length/2-1],_=n.pads[n.pads.length-1],I=y-(o?2:1),k="",A="",B="";if(C+_!==0?k=`
                for (var i: u32 = 0u; i < ${v}u; i++) {
                  xIndices[${I}] = indices[${I}] * ${$} - ${C} + i;
                  if (xIndices[${I}] < 0 || xIndices[${I}] >= ${c[I]}) {
                    pad++;
                    continue;
                  }
                  let x_val = x[${t.indicesToOffset("xIndices")}];
                  ${s}
                }`:k=`
                for (var i: u32 = 0u; i < ${v}u; i++) {
                  xIndices[${I}] = indices[${I}] * ${$} - ${C} + i;
                  let x_val = x[${t.indicesToOffset("xIndices")}];
                  ${s}
                }`,n.kernelShape.length===2){let z=n.kernelShape[n.kernelShape.length-2],W=n.strides[n.strides.length-2],K=n.pads[n.pads.length/2-2],ee=n.pads[n.pads.length-2],M=y-(o?3:2),Z=c[M];K+ee!==0?A=`
                for (var j: u32 = 0u; j < ${z}u; j++) {
                  xIndices[${M}] = indices[${M}] * ${W} - ${K} + j;
                  if (xIndices[${M}] < 0 || xIndices[${M}] >= ${Z}) {
                    pad+= ${v};
                    continue;
                  }
              `:A=`
                for (var j: u32 = 0u; j < ${z}u; j++) {
                  xIndices[${M}] = indices[${M}] * ${W} - ${K} + j;
                `,B=`
              }
            `}return`
            ${e.declareVariables(t,w)}

            ${e.mainStart()}
              ${e.guardAgainstOutOfBoundsWorkgroupSizes(h)}

              let indices = ${w.offsetToIndices("global_idx")};
              var xIndices = ${w.offsetToIndices("global_idx")};

              var value: ${f} = ${f}(${l});
              var pad = 0;
              ${A}
              ${k}
              ${B}
              ${u}

              output[global_idx] = value;
            }`}else{if(o)throw new Error("Pooling with kernelShape.length > 2 is not supported for NHWC format.");let v=V.size(n.kernelShape),$=V.computeStrides(n.kernelShape),C=$.length,_=n.pads.length,I=n.pads.reduce((B,T)=>B+T),k="";return I?k=`
                if (xIndices[j] >= inputDims[j]) {
                  pad++;
                  isPad = true;
                  break;
                }
              }
              if (!isPad) {
                let x_val = x[${t.indicesToOffset("xIndices")}];
                ${s}
              }`:k=`
              }
              let x_val = x[${t.indicesToOffset("xIndices")}];
              ${s}
            `,`
            ${e.declareVariables(t,w)}

            const pads = array<u32, ${_}>(${n.pads.map(B=>`${B}u`).join(",")});
            const inputDims = array<u32, ${y}>(${c.map(B=>`${B}u`).join(",")});
            const kernelStrides = array<u32, ${C}>(${$.map(B=>`${B}u`).join(",")});
            const strides = array<u32, ${C}>(${n.strides.map(B=>`${B}u`).join(",")});

            ${e.mainStart()}
              ${e.guardAgainstOutOfBoundsWorkgroupSizes(h)}

              let indices = ${w.offsetToIndices("global_idx")};
              let xIndices = ${w.offsetToIndices("global_idx")};

              var offsets: array<u32, ${C}>;

              var value = ${w.type.value}(${l});
              var pad = 0;
              var isPad = false;

              for (var i: u32 = 0u; i < ${v}u; i++) {
                var offset = i;
                for (var j = 0u; j < ${C-1}u; j++) {
                  offsets[j] = offset / kernelStrides[j];
                  offset -= offsets[j] * kernelStrides[j];
                }
                offsets[${C-1}] = offset;

                isPad = false;
                for (var j = ${y-C}u; j < ${y}u; j++) {
                  xIndices[j] = indices[j] * strides[j - ${y-C}u]
                    + offsets[j - ${y-C}u] - pads[j - 2u];
                  ${k}
              }
              ${u}

              output[global_idx] = value;
            }`}},bu=e=>({format:e.format,autoPad:["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][e.auto_pad],ceilMode:e.ceil_mode,kernelShape:e.kernel_shape,strides:e.strides,pads:e.pads}),wu=(e,t,r,a)=>{let[n,s]=gu(t,a,r),u=V.size(n.kernelShape),l=U("x",t.dataType,t.dims),o=l.type.value,c="value += x_val;",f="";return n.countIncludePad?f+=`value /= ${o}(${u});`:f+=`value /= ${o}(${u} - pad);`,{name:e,shaderCache:{hint:a.cacheKey},getRunData:()=>({outputs:[{dims:s,dataType:t.dataType}],dispatchGroup:{x:Math.ceil(V.size(s)/64)}}),getShaderSource:y=>yu(y,l,t.dims,s,n,c,f,"0.0")}},vu=e=>{let t=e.count_include_pad!==0,r=bu(e);if(r.ceilMode!==0)throw new Error("using ceil() in shape computation is not yet supported for AveragePool");return J({countIncludePad:t,...r})},$u=(e,t)=>{gn(e.inputs),e.compute(wu("AveragePool",e.inputs[0],!1,t))},Su={autoPad:"",ceilMode:0,countIncludePad:!1,kernelShape:[],strides:[],pads:[],storageOrder:0,dilations:[],cacheKey:""},xu=e=>{let t=e.format;return{format:t,...Su,cacheKey:t}},Iu=(e,t)=>{gn(e.inputs),e.compute(wu("GlobalAveragePool",e.inputs[0],!0,t))},Cu=(e,t,r,a)=>{let[n,s]=gu(t,a,r),u=`
      value = max(x_val, value);
    `,l="",o=U("x",t.dataType,t.dims);return{name:e,shaderCache:{hint:a.cacheKey},getRunData:()=>({outputs:[{dims:s,dataType:t.dataType}],dispatchGroup:{x:Math.ceil(V.size(s)/64)}}),getShaderSource:c=>yu(c,o,t.dims,s,n,u,l,"-1e5")}},_u=(e,t)=>{gn(e.inputs),e.compute(Cu("MaxPool",e.inputs[0],!1,t))},Au=e=>{let t=e.storage_order,r=e.dilations,a=bu(e);if(t!==0)throw new Error("column major storage order is not yet supported for MaxPool");if(a.ceilMode!==0)throw new Error("using ceil() in shape computation is not yet supported for MaxPool");return J({storageOrder:t,dilations:r,...a})},Eu=e=>{let t=e.format;return{format:t,...Su,cacheKey:t}},Tu=(e,t)=>{gn(e.inputs),e.compute(Cu("GlobalMaxPool",e.inputs[0],!0,t))}});var Qc,Jc,ku,Ru=F(()=>{"use strict";$t();We();we();Qc=(e,t,r)=>{let a=e===t,n=e<t&&r<0,s=e>t&&r>0;if(a||n||s)throw new Error("Range these inputs' contents are invalid.")},Jc=(e,t,r,a)=>{let n=Math.abs(Math.ceil((t-e)/r)),s=[n],u=n,l=q("output",a,s),o=l.type.storage,c=f=>`
        ${f.declareVariables(l)}
        ${f.mainStart()}
        ${f.guardAgainstOutOfBoundsWorkgroupSizes(u)}
        output[global_idx] = ${o}(${e}) + ${o}(global_idx) * ${o}(${r});
      }`;return{name:"Range",shaderCache:{hint:[e,t,r].map(f=>f.toString()).join("_")},getShaderSource:c,getRunData:()=>({outputs:[{dims:s,dataType:a}],dispatchGroup:{x:Math.ceil(u/64)}})}},ku=e=>{let t=0,r=0,a=0;e.inputs[0].dataType===6?(t=e.inputs[0].getInt32Array()[0],r=e.inputs[1].getInt32Array()[0],a=e.inputs[2].getInt32Array()[0]):e.inputs[0].dataType===1&&(t=e.inputs[0].getFloat32Array()[0],r=e.inputs[1].getFloat32Array()[0],a=e.inputs[2].getFloat32Array()[0]),Te.webgpu.validateInputContent&&Qc(t,r,a),e.compute(Jc(t,r,a,e.inputs[0].dataType),{inputs:[]})}});var ep,tp,rp,np,ap,op,ip,sp,up,lp,dp,cp,pp,fp,mp,Pu,Bu,Mu=F(()=>{"use strict";be();ke();we();ep=(e,t)=>{if(e.every(r=>r>0||(()=>{throw new Error("Resize requires scales input values to be positive")})),e.length>0){if(t.mode==="linear"){if(!(e.length===2||e.length===4&&e[0]===1&&e[1]===1||e.length===4&&e[0]===1&&e[3]===1))throw new Error("Resize requires scales input size to be 2 or 4 for linear mode")}else if(t.mode==="cubic"&&!(e.length===2||e.length===4&&e[0]===1&&e[1]===1||e.length===4&&e[0]===1&&e[3]===1))throw new Error("Resize requires scales input size to be 2 or 4 for cubic mode")}},tp=(e,t,r)=>{t.every(n=>n>=0&&n<r||(()=>{throw new Error("Resize requires axes input values to be positive and less than rank")}));let a=new Array(r).fill(1);return t.forEach((n,s)=>a[n]=e[s]),a},rp=(e,t,r,a,n,s)=>{let[u,l,o]=r>10?[1,2,3]:[-1,e.length>1?1:-1,-1],c=e[0].dims.length;if(u>0&&e.length>u&&e[u].dims.length>0)e[u].getFloat32Array().forEach(f=>s.push(f));else if(t.coordinateTransformMode==="tf_crop_and_resize")throw new Error("Resize requires RoI input to be specified when coordinateTransformMode is tfCropAndResize");if(l>0&&e.length>l&&e[l].dims.length>0){if(e[l].getFloat32Array().forEach(f=>a.push(f)),a.length!==0&&a.length!==c&&r>=18&&a.length!==t.axes.length)throw new Error("Resize requires scales input size to be same as input rank or axes size for opset 18 and up");ep(a,t),t.axes.length>0&&tp(a,t.axes,c).forEach((f,y)=>a[y]=f)}if(o>0&&e.length>o&&(e[o].getBigInt64Array().forEach(f=>n.push(Number(f))),n.length!==c||r>=18&&n.length===t.axes.length))throw new Error("Resize requires sizes input size to be same as input rank or axes size for opset 18 and up");if(t.axes.length>0){if(a.length!==t.axes.length)throw new Error('Resize requires "scales" input size to be of axes rank when axes attributes is specified');if(n.length!==t.axes.length)throw new Error('Resize requires "sizes" input size to be of rank axes rank when axes attributes is specified')}if(typeof a<"u"&&typeof n<"u"&&a.length>0&&n.length>c)throw new Error("Resize requires only of scales or sizes to be specified")},np=(e,t)=>`fn getOriginalCoordinateFromResizedCoordinate(xResized: ${t}, xScale: ${t}, lengthResized: ${t},
     lengthOriginal: ${t}, roiStart: ${t}, roiEnd: ${t}) -> ${t} { `+(()=>{switch(e){case"asymmetric":return"return xResized / xScale;";case"pytorch_half_pixel":return"if (lengthResized > 1) {                     return (xResized + 0.5) / xScale - 0.5;                   } else {                     return 0.0;                   }";case"tf_half_pixel_for_nn":return"return (xResized + 0.5) / xScale;";case"align_corners":return"if (lengthResized == 1) {                     return 0.0;                   } else {                     return xResized * (lengthOriginal - 1) / (lengthResized - 1);                   }";case"tf_crop_and_resize":return`if (lengthResized > 1) {                     return roiStart * (lengthOriginal - 1) +                           (xResized * (roiEnd - roiStart) * (lengthOriginal - 1)) / (lengthResized - 1);                   } else {                     return 0.5 * (roiStart + roiEnd) * ${t}(lengthOriginal - 1);                   }`;case"half_pixel_symmetric":return["const outputWidth = xScale * lengthResized;","const adjustment = lengthResized / outputWidth;","const center = lengthOriginal / 2;","const offset = center * (1 - adjustment);","return offset + ((xResized + 0.5) / xScale) - 0.5;"].join(`
`);case"half_pixel":return"return ((xResized + 0.5) / xScale) - 0.5;";default:throw new Error(`Coordinate transform mode ${e} is not supported`)}})()+"}",ap=(e,t,r)=>`fn getNearestPixelFromOriginal(xOriginal: ${r}, isDownSample: bool) -> ${r} {`+(()=>{switch(e){case"round_prefer_ceil":return"if (fract(xOriginal) == 0.5) {             return ceil(xOriginal);           } else {             return round(xOriginal);           }";case"floor":return"return floor(xOriginal);";case"ceil":return"return ceil(xOriginal);";case"round_prefer_floor":return"if (fract(xOriginal) == 0.5) {                     return floor(xOriginal);                   } else {                     return round(xOriginal);                   }";case"simple":default:if(t<11)return"if (isDownSample)                     {                       return ceil(xOriginal);                     } else {                       return xOriginal;                     }";throw new Error(`Nearest mode ${e} is not supported`)}})()+"}",op=(e,t,r)=>{let a=new Array(r).fill(0).concat(new Array(r).fill(1)),n=e.length===0?a:e.slice();return t.length>0?(t.forEach((s,u)=>{a[s]=n[u],a[u+r]=n[t.length+u]}),a):n},ip=(e,t,r,a)=>{let n=[];if(r.length>0)if(a.length>0){if(e.forEach(s=>n.push(s)),Math.max(...a)>e.length)throw new Error("axes is out of bound");a.forEach((s,u)=>n[s]=r[u])}else r.forEach(s=>n.push(s));else{if(t.length===0)throw new Error("Resize requires either scales or sizes.");n=e.map((s,u)=>Math.round(s*t[u]))}return n},sp=(e,t,r)=>{let a=(()=>{switch(r.keepAspectRatioPolicy){case"not_larger":return r.axes.length>0?Math.min(...r.axes.map(s=>t[s]),Number.MAX_VALUE):Math.min(...t,Number.MAX_VALUE);case"not_smaller":return r.axes.length>0?Math.max(...r.axes.map(s=>t[s]),Number.MIN_VALUE):Math.max(...t,Number.MIN_VALUE);default:throw new Error(`Keep aspect ratio policy ${r.keepAspectRatioPolicy} is not supported`)}})();t.fill(1,0,t.length);let n=e.slice();return r.axes.length>0?(r.axes.forEach(s=>t[s]=a),r.axes.forEach(s=>n[s]=Math.round(e[s]*t[s]))):(t.fill(a,0,t.length),n.forEach((s,u)=>n[u]=Math.round(s*t[u]))),n},up=(e,t,r,a,n)=>`
    fn calculateOriginalIndicesFromOutputIndices(outputIndices: ${e.type.indices}) -> array<${e.type.value}, ${r.length}> {
      const inputShape = array<u32, ${t.length}>(${t.map(s=>`${s}u`).join(",")});
      const outputShape = array<u32, ${r.length}>(${r.map(s=>`${s}u`).join(",")});
      const scales = array<${e.type.value}, ${a.length}>(${a.map(s=>`${s}f`).join(",")});
      const roi = array<${e.type.value}, ${n.length}>(${n.map(s=>`${s}f`).join(",")});
      var originalIndices: array<${e.type.value}, ${r.length}>;
      for (var i:u32 = 0; i < ${r.length}; i++) {
        var outputIndex = ${r.length===1?"outputIndices":"outputIndices[i]"};
        if (scales[i] == 1.0) {
          originalIndices[i] = ${e.type.value}(outputIndex);
        } else {
          originalIndices[i] = getOriginalCoordinateFromResizedCoordinate(${e.type.value}(outputIndex), scales[i],
                ${e.type.value}(outputShape[i]), ${e.type.value}(inputShape[i]), roi[i], roi[i + ${t.length}]);
        }
      }
      return originalIndices;
    }`,lp=(e,t,r,a,n,s,u)=>`
    fn calculateInputIndicesFromOutputIndices(outputIndices: ${t.type.indices}) -> ${e.type.indices} {
        const inputShape = array<u32, ${r.length}>(${r.map(l=>`${l}u`).join(",")});
        const outputShape = array<u32, ${a.length}>(${a.map(l=>`${l}u`).join(",")});
        const scales = array<${e.type.value}, ${n.length}>(${n.map(l=>`${l}`).join(",")});
        const roi = array<${e.type.value}, ${s.length}>(${s.map(l=>`${l}`).join(",")});
        var inputIndices: ${e.type.indices};
        for (var i:u32 = 0; i < ${a.length}; i++) {
          var outputIndex = ${a.length===1?"outputIndices":"outputIndices[i]"};
          var inputIndex: u32;
          if (scales[i] == 1.0) {
            inputIndex = outputIndex;
          } else {
            var original_idx = getOriginalCoordinateFromResizedCoordinate(${e.type.value}(outputIndex), scales[i],
                    ${e.type.value}(outputShape[i]), ${e.type.value}(inputShape[i]), roi[i], roi[i + ${r.length}]);
            if (!${u} || (original_idx >= 0 && original_idx < ${e.type.value}(inputShape[i]))) {
              if (original_idx < 0) {
                inputIndex = 0;
              } else if (original_idx > (${e.type.value}(inputShape[i]) - 1)) {
                inputIndex = inputShape[i] - 1;
              } else {
                inputIndex = u32(getNearestPixelFromOriginal(original_idx, scales[i] < 1));
              }
            } else {
              inputIndex = u32(original_idx);
            }
          }
          ${e.indicesSet("inputIndices","i","inputIndex")}
        }
        return inputIndices;
    }`,dp=(e,t)=>`
    fn checkInputIndices(inputIndices: ${e.type.indices}) -> bool {
      const inputShape = array<u32, ${t.length}>(${t.map(r=>`${r}u`).join(",")});
      for (var i:u32 = 0; i < ${t.length}; i++) {
        var inputIndex = ${t.length===1?"inputIndices":"inputIndices[i]"};
        if (inputIndex < 0 || inputIndex >= inputShape[i]) {
          return false;
        }
      }
      return true;
    }`,cp=(e,t,r,a,n,s)=>{let[u,l,o,c]=r.length===2?[-1,0,1,-1]:a[1]===1?[0,2,3,1]:[0,1,2,3],f=e.type.value;return`
    fn getInputValue(batch: u32, channel: u32, row: u32, col: u32) -> ${f} {
      var inputIndices: ${e.type.indices};
      inputIndices[${l}] = max(0, min(row, ${r[l]} - 1));
      inputIndices[${o}] = max(0, min(col, ${r[o]} - 1));
      if (${r.length} > 2) {
        inputIndices[${c}] = channel;
        inputIndices[${u}] = batch;
      };
      return input[${e.indicesToOffset("inputIndices")}];
    }

    fn bilinearInterpolation(outputIndices: ${t.type.indices}) -> ${f} {
      var originalIndices = calculateOriginalIndicesFromOutputIndices(outputIndices);
      var row:${f} = originalIndices[${l}];
      var col:${f} = originalIndices[${o}];
      if (${n} && (row < 0 || row > (${r[l]} - 1) || col < 0 || col > ${r[o]} - 1)) {
        return ${s};
      }
      row = max(0, min(row, ${r[l]} - 1));
      col = max(0, min(col, ${r[o]} - 1));
      var row1: u32 = u32(row);
      var col1: u32 = u32(col);
      var row2: u32 = u32(row + 1);
      var col2: u32 = u32(col + 1);
      var channel: u32 = 0;
      var batch: u32 = 0;
      if (${r.length>2}) {
        channel = u32(originalIndices[${c}]);
        batch = u32(originalIndices[${u}]);
      }
      var x11: ${f} = getInputValue(batch, channel, row1, col1);
      var x12: ${f} = getInputValue(batch, channel, row1, col2);
      var x21: ${f} = getInputValue(batch, channel, row2, col1);
      var x22: ${f} = getInputValue(batch, channel, row2, col2);
      var dx1: ${f} = row - ${f}(row1);
      var dx2: ${f} = ${f}(row2) - row;
      var dy1 = col - ${f}(col1);
      var dy2 = ${f}(col2) - col;
      return (x11 * dx2 * dy2 + x12 * dx2 * dy1 + x21 * dx1 * dy2 + x22 * dx1 * dy1);
    }`},pp=(e,t,r,a,n,s,u,l,o,c)=>{let[f,y]=r.length===2?[0,1]:n[1]===1?[2,3]:[1,2],h=e.type.value,w=v=>{let $=v===f?"row":"col";return`
      fn ${$}CubicInterpolation(inputIndices: ${e.type.indices}, outputIndices: ${t.type.indices}) -> ${h} {
        var outputIndex = ${a.length===1?"outputIndices":`outputIndices[${v}]`};
        var originalIdx: ${h} = getOriginalCoordinateFromResizedCoordinate(${h}(outputIndex), ${n[v]},
        ${h}(${a[v]}), ${h}(${r[v]}), ${s[v]}, ${s[v]} + ${r.length});
        var fractOriginalIdx: ${h} = originalIdx - floor(originalIdx);
        var coefs = getCubicInterpolationCoefs(fractOriginalIdx);

        if (${l} && (originalIdx < 0 || originalIdx > (${r[v]} - 1))) {
          return ${o};
        }
        var data: array<${h}, 4> = array<${h}, 4>(0.0, 0.0, 0.0, 0.0);
        for (var i: i32 = -1; i < 3; i++) {
          var ${$}: ${h} = originalIdx + ${h}(i);
          if (${$} < 0 || ${$} >= ${r[v]}) {
            if (${c}) {
              coefs[i + 1] = 0.0;
              continue;
            } else if (${l}) {
              return ${o};
            } else {
              ${$} = max(0, min(${$}, ${r[v]} - 1));
            }
          }
          var inputIndicesCopy: ${e.type.indices} = inputIndices;
          inputIndicesCopy[${v}] = u32(${$});
          data[i + 1] = ${v===f?`input[${e.indicesToOffset("inputIndicesCopy")}];`:`
                                               rowCubicInterpolation(inputIndicesCopy, outputIndices);`}
        }
        return cubicInterpolation1D(data, coefs);
      }`};return`
    ${w(f)};
    ${w(y)};
  fn getCubicInterpolationCoefs(s: ${h}) -> array<${h}, 4> {
    var absS = abs(s);
    var coeffs: array<${h}, 4> = array<${h}, 4>(0.0, 0.0, 0.0, 0.0);
    var oneMinusAbsS: ${h} = 1.0 - absS;
    var twoMinusAbsS: ${h} = 2.0 - absS;
    var onePlusAbsS: ${h} = 1.0 + absS;
    coeffs[0] = ((${u} * onePlusAbsS - 5 * ${u}) * onePlusAbsS + 8 * ${u}) * onePlusAbsS - 4 * ${u};
    coeffs[1] = ((${u} + 2) * absS - (${u} + 3)) * absS * absS + 1;
    coeffs[2] = ((${u} + 2) * oneMinusAbsS - (${u} + 3)) * oneMinusAbsS * oneMinusAbsS + 1;
    coeffs[3] = ((${u} * twoMinusAbsS - 5 * ${u}) * twoMinusAbsS + 8 * ${u}) * twoMinusAbsS - 4 * ${u};
    return coeffs;
  }

  fn cubicInterpolation1D(x: array<${h}, 4>, coefs: array<${h}, 4>) -> ${h} {
    var coefsSum: ${h} = coefs[0] + coefs[1] + coefs[2] + coefs[3];
    return (x[0] * coefs[0] + x[1] * coefs[1]+ x[2] * coefs[2]+ x[3] * coefs[3]) / coefsSum;
  }

  fn bicubicInterpolation(outputIndices: ${t.type.indices}) -> ${h} {
    var inputIndices: ${e.type.indices} = outputIndices;
    return colCubicInterpolation(inputIndices, outputIndices);
  }
    `},fp=(e,t,r,a,n,s)=>{let u=e.dims,l=op(s,t.axes,u.length),o=ip(u,a,n,t.axes),c=a.slice();a.length===0&&(c=u.map((_,I)=>_===0?1:o[I]/_),t.keepAspectRatioPolicy!=="stretch"&&(o=sp(u,c,t)));let f=q("output",e.dataType,o),y=U("input",e.dataType,u),h=V.size(o),w=u.length===o.length&&u.every((_,I)=>_===o[I]),v=t.coordinateTransformMode==="tf_crop_and_resize",$=y.type.value,C=_=>`
      ${w?"":`
      ${np(t.coordinateTransformMode,$)};
      ${(()=>{switch(t.mode){case"nearest":return`
              ${dp(y,u)};
              ${ap(t.nearestMode,r,$)};
              ${lp(y,f,u,o,c,l,v)};
              `;case"linear":return`
              ${up(f,u,o,c,l)};
              ${cp(y,f,u,c,v,t.extrapolationValue)};
              `;case"cubic":return`
            ${pp(y,f,u,o,c,l,t.cubicCoeffA,v,t.extrapolationValue,t.excludeOutside)};
            `;default:throw Error("Invalid resize mode")}})()};
      `}
      ${_.declareVariables(y,f)}
      ${_.mainStart()}
        ${_.guardAgainstOutOfBoundsWorkgroupSizes(h)}
        ${w?"output[global_idx] = input[global_idx];":`
        let outputIndices = ${f.offsetToIndices("global_idx")};
        var inputIndices: ${y.type.indices};
        ${(()=>{switch(t.mode){case"nearest":return`inputIndices = calculateInputIndicesFromOutputIndices(outputIndices);
                if (checkInputIndices(inputIndices)) {
                  output[global_idx] = input[${y.indicesToOffset("inputIndices")}];
                } else {
                  output[global_idx] = ${t.extrapolationValue};
                }`;case"linear":return"output[global_idx] = bilinearInterpolation(outputIndices);";case"cubic":return"output[global_idx] = bicubicInterpolation(outputIndices);";default:throw Error(`Unsupported resize mode: ${t.mode}`)}})()};
        `}
      }`;return{name:"Resize",shaderCache:{hint:`${t.cacheKey}|${r}|${c.length>0?c:""}|${n.length>0?n:""}|${w}`},getShaderSource:C,getRunData:()=>({outputs:[{dims:o,dataType:e.dataType}],dispatchGroup:{x:Math.ceil(h/64)}})}},mp=e=>{let t=e.customDataBuffer;return new Uint32Array(t,t.byteOffset,1)[0]},Pu=(e,t)=>{let r=[],a=[],n=[],s=mp(e);rp(e.inputs,t,s,r,a,n),e.compute(fp(e.inputs[0],t,s,r,a,n),{inputs:[0]})},Bu=e=>{let t=e.antialias,r=e.axes,a=e.coordinateTransformMode,n=e.cubicCoeffA,s=e.excludeOutside!==0,u=e.extrapolationValue,l=e.keepAspectRatioPolicy,o=e.mode,c=e.nearestMode===""?"simple":e.nearestMode;return J({antialias:t,axes:r,coordinateTransformMode:a,cubicCoeffA:n,excludeOutside:s,extrapolationValue:u,keepAspectRatioPolicy:l,mode:o,nearestMode:c})}});var hp,gp,Du,zu,Wu=F(()=>{"use strict";We();be();ke();we();hp=e=>{if(!e||e.length<3)throw new Error("layerNorm requires at least 3 inputs.");let t=e[0],r=e[1],a=e[2];if(t.dataType!==r.dataType||t.dataType!==a.dataType)throw new Error("All inputs must have the same data type");if(t.dims.length!==3&&t.dims.length!==2)throw new Error("Input must be 2D or 3D");if(r.dims.length!==3&&r.dims.length!==2)throw new Error("Skip must be 2D or 3D");let n=t.dims[t.dims.length-1],s=t.dims[t.dims.length-2];if(r.dims[r.dims.length-1]!==n)throw new Error("Skip must have the same hidden size as input");if(r.dims[r.dims.length-2]!==s)throw new Error("Skip must have the same sequence length as input");if(a.dims.length!==1)throw new Error("Gamma must be 1D");if(a.dims[a.dims.length-1]!==n)throw new Error("Gamma must have the same hidden size as input");if(e.length>3){let u=e[3];if(u.dims.length!==1)throw new Error("Beta must be 1D");if(u.dims[u.dims.length-1]!==n)throw new Error("Beta must have the same hidden size as input")}if(e.length>4){let u=e[4];if(u.dims.length!==1)throw new Error("Bias must be 1D");if(u.dims[u.dims.length-1]!==n)throw new Error("Bias must have the same hidden size as input")}},gp=(e,t,r,a)=>{let n=e[0].dims,s=V.size(n),u=n,l=s,o=n.slice(-1)[0],c=a?n.slice(0,-1).concat(1):[],f=e.length>3,y=e.length>4,h=a&&r>1,w=a&&r>2,v=r>3,$=Ze(o),C=[U("x",e[0].dataType,e[0].dims,$),U("skip",e[1].dataType,e[1].dims,$),U("gamma",e[2].dataType,e[2].dims,$)];f&&C.push(U("beta",e[3].dataType,e[3].dims,$)),y&&C.push(U("bias",e[4].dataType,e[4].dims,$)),C.push(q("output",e[0].dataType,u,$)),h&&C.push(q("meanOutput",1,c)),w&&C.push(q("invStdOutput",1,c)),v&&C.push(q("inputSkipBiasSum",e[0].dataType,u,$));let _=Ae(e[0].dataType),I=A=>`
      const hiddenSize: f32 = ${o};
      const hiddenSizeVectorized: u32 = ${o/$};
      const epsilon: f32 = ${t.epsilon};

      ${A.declareVariables(...C)}

      ${A.mainStart()}
        ${A.guardAgainstOutOfBoundsWorkgroupSizes(l/o)}
        let offset = global_idx * hiddenSizeVectorized;
        var sum = ${Fe("f32",$)};
        var squareSum = ${Fe("f32",$)};
        for (var i: u32 = 0; i < hiddenSizeVectorized; i++) {
          let skipValue = skip[offset + i];
          let biasValue = ${y?"bias[i]":"0.0"};
          let inputValue = x[offset + i];
          let value = inputValue + skipValue + biasValue;
          ${v?"inputSkipBiasSum[offset + i] = value;":""}
          output[offset + i] = value;
          let f32Value = ${rt(_,$,"value")};
          sum += f32Value;
          squareSum += f32Value * f32Value;
        }
        let mean = ${nt("sum",$)} / hiddenSize;
        let variance = sqrt(${nt("squareSum",$)} / hiddenSize - mean * mean + epsilon);
        ${h?"meanOutput[global_idx] = mean;":""}
        ${w?"invStdOutput[global_idx] = 1.0 / variance;":""}
        for (var i: u32 = 0; i < hiddenSizeVectorized; i++) {
          output[offset + i] = (output[offset + i] - ${_}(mean)) / ${_}(variance) * gamma[i]
           + ${f?"beta[i]":"0.0"};
        }
      }`,k=[{dims:u,dataType:e[0].dataType}];return r>1&&k.push({dims:c,dataType:1}),r>2&&k.push({dims:c,dataType:1}),r>3&&k.push({dims:n,dataType:e[0].dataType}),{name:"SkipLayerNormalization",shaderCache:{hint:t.cacheKey},getShaderSource:I,getRunData:()=>({outputs:k,dispatchGroup:{x:Math.ceil(l/o/64)}})}},Du=(e,t)=>{hp(e.inputs);let a=[0];e.outputCount>1&&a.push(-3),e.outputCount>2&&a.push(-3),e.outputCount>3&&a.push(3),e.compute(gp(e.inputs,t,e.outputCount,!1),{outputs:a})},zu=e=>{let t=e.epsilon;return J({epsilon:t})}});var yp,yn,bp,Vu,wp,vp,Nu,Uu,Hu=F(()=>{"use strict";We();be();ke();we();yp=(e,t)=>{if(!e||e.length<1)throw new Error("too few inputs");if(t.axes.length!==0){if(t.axes.length!==t.starts.length||t.axes.length!==t.ends.length)throw new Error("axes, starts and ends must have the same length")}else if(t.starts.length!==t.ends.length)throw new Error("starts and ends must have the same length");e.slice(1).forEach((r,a)=>{if(e[a+1].dataType!==6&&e[a+1].dataType!==7)throw new Error(`Input ${a} must be an array of int32 or int64`)})},yn=(e,t)=>{let r=[];if(e.length>t)if(e[t].dataType===7)e[t].getBigInt64Array().forEach(a=>r.push(Number(a)));else if(e[t].dataType===6)e[t].getInt32Array().forEach(a=>r.push(Number(a)));else throw new Error(`Input ${t} must be an array of int32 or int64`);return r},bp=(e,t)=>{if(e.length>1){let r=yn(e,1),a=yn(e,2),n=yn(e,3);return n.length===0&&(n=[...Array(e[0].dims.length).keys()]),J({starts:r,ends:a,axes:n})}else return t},Vu=(e,t,r,a,n)=>{let s=e;return e<0&&(s+=r[a[t]]),n[t]<0?Math.max(0,Math.min(s,r[a[t]]-1)):Math.max(0,Math.min(s,r[a[t]]))},wp=(e,t,r,a,n)=>`fn calculateInputIndices(outputIndices: ${t.type.indices}) -> ${e.type.indices} {
          var inputIndices: ${e.type.indices};
          var carry = 0u;
          for (var i = ${r.length}; i >= 0; i--) {
            let input_shape_i = ${n?`uniforms.input_shape${r.length>1?"[i]":""}`:"inputShape[i]"};
            let steps_i  = ${n?`uniforms.steps${r.length>1?"[i]":""}`:"steps[i]"};
            let signs_i  = ${n?`uniforms.signs${r.length>1?"[i]":""}`:"signs[i]"};
            let starts_i  = ${n?`uniforms.starts${r.length>1?"[i]":""}`:"starts[i]"};
            var outputIndex = ${a.length===1?"outputIndices":"outputIndices[i]"};
            var inputIndex = outputIndex * steps_i + starts_i + carry;
            carry = inputIndex / input_shape_i;
            inputIndex = inputIndex % input_shape_i;
            if (signs_i < 0) {
              inputIndex = input_shape_i - inputIndex - 1u + starts_i;
            }
            ${r.length===1?"inputIndices":"inputIndices[i]"} = inputIndex;
          }
          return inputIndices;
      }`,vp=(e,t)=>{let r=e[0].dims,a=V.size(r),n=t.axes.length>0?V.normalizeAxes(t.axes,r.length):[...Array(r.length).keys()],s=yn(e,4);s.forEach(A=>A!==0||(()=>{throw new Error("step cannot be 0")})),s.length===0&&(s=Array(n.length).fill(1));let u=t.starts.map((A,B)=>Vu(A,B,r,n,s)),l=t.ends.map((A,B)=>Vu(A,B,r,n,s));if(n.length!==u.length||n.length!==l.length)throw new Error("start, ends and axes should have the same number of elements");if(n.length!==r.length)for(let A=0;A<r.length;++A)n.includes(A)||(u.splice(A,0,0),l.splice(A,0,r[A]),s.splice(A,0,1));let o=s.map(A=>Math.sign(A));s.forEach((A,B,T)=>{if(A<0){let z=(l[B]-u[B])/A,W=u[B],K=W+z*s[B];u[B]=K,l[B]=W,T[B]=-A}});let c=Re(e[0].dims.length),f=c?e[0].dims.length:e[0].dims,y=r.slice(0);n.forEach((A,B)=>{y[A]=Math.ceil((l[A]-u[A])/s[A])});let h=c?y.length:y,w={dims:y,dataType:e[0].dataType},v=q("output",e[0].dataType,h),$=U("input",e[0].dataType,f),C=V.size(y),_=[],I=[];c&&(I.push({name:"starts",type:u.length>1?`vec${u.length}<u32>`:"u32"}),I.push({name:"signs",type:o.length>1?`vec${o.length}<i32>`:"i32"}),I.push({name:"steps",type:s.length>1?`vec${s.length}<u32>`:"u32"}),_.push({type:"uint32",data:u}),_.push({type:"int32",data:o}),_.push({type:"uint32",data:s})),I.push({name:"outputSize",type:"u32"}),_.push({type:"uint32",data:C}),c&&(_.push(...pe(e[0].dims)),_.push(...pe(y)));let k=A=>`
      ${A.registerUniforms(I).declareVariables($,v)}
        ${c?"":[`const signs = array<i32, ${o.length}>(${o.map(B=>`${B}i`).join(",")});`,`const starts = array<u32, ${u.length}>(${u.map(B=>`${B}u`).join(",")});`,`const steps = array<u32, ${s.length}>(${s.map(B=>`${B}u`).join(",")});`,`const inputShape = array<u32, ${r.length}>(${r.map(B=>`${B}u`).join(",")});`].join(`
`)}

        ${wp($,v,r,y,c)}
        ${A.mainStart()}
          ${A.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
          let outputIndices = ${v.offsetToIndices("global_idx")};
          let inputIndices = calculateInputIndices(outputIndices);
          ${v.setByOffset("global_idx",$.getByIndices("inputIndices"))}
      }`;return{name:"Slice",shaderCache:{hint:c?`${o.length}_${u.length}_${s.length}`:`${t.cacheKey} | ${e[4]?.dims??""}`,inputDependencies:[c?"rank":"dims"]},getShaderSource:k,getRunData:()=>({outputs:[w],dispatchGroup:{x:Math.ceil(a/64)},programUniforms:_})}},Nu=(e,t)=>{yp(e.inputs,t);let r=bp(e.inputs,t);e.compute(vp(e.inputs,r),{inputs:[0]})},Uu=e=>{let t=e.starts,r=e.ends,a=e.axes;return J({starts:t,ends:r,axes:a})}});var $p,Sp,Lu,Gu,Fu=F(()=>{"use strict";be();ke();we();$p=e=>{if(!e||e.length!==1)throw new Error("Softmax op requires 1 input.")},Sp=(e,t)=>{let r=e.dims,a=V.size(r),n=64,s=t.axis;if(s<0&&(s=r.length+s),s<r.length-1)throw new Error("softmax only supports last axis for now.");let u=r[s],l=a/u,o=Ze(u),c=u/o,f=(C,_)=>_===4?`max(max(${C}.x, ${C}.y), max(${C}.z, ${C}.w))`:_===2?`max(${C}.x, ${C}.y)`:_===3?`max(max(${C}.x, ${C}.y), ${C}.z)`:C,y=U("x",e.dataType,e.dims,o),h=q("result",e.dataType,e.dims,o),w=y.type.value,v=Ae(e.dataType)==="f32"?`var threadMax = ${w}(-3.402823e+38f);`:`var threadMax = ${w}(-65504.0h);`,$=C=>`
      var<workgroup> rowMaxShared : ${w};
      var<workgroup> rowSumShared : ${w};
      var<workgroup> threadShared : array<${w}, ${n}>;

      fn getValue(row: i32, col: i32, row_stride: i32) -> ${w} {
        let index = row * row_stride + col;
        return x[index];
      }

      fn setValue(row: i32, col: i32, row_stride: i32, value: ${w}) {
        let index = row * row_stride + col;
        result[index] = value;
      }
      ${C.registerUniform("packedCols","i32").declareVariables(y,h)}
      ${C.mainStart()}
        let gindex = i32(global_id.x);
        let lindex = i32(local_id.x);
        const wg = ${n};
        let row = gindex / wg;
        let cols = uniforms.packedCols;
        let row_stride : i32 = uniforms.packedCols;

        // find the rows max
        ${v}
        for (var col = lindex; col < cols; col += wg) {
          let value = getValue(row, col, row_stride);
          threadMax = max(threadMax, value);
        }
        if (lindex < cols) {
          threadShared[lindex] = threadMax;
        }
        workgroupBarrier();

        var reduceSize = min(cols, wg);
        for (var currSize = reduceSize >> 1;  currSize > 0; currSize = reduceSize >> 1) {
          reduceSize = currSize + (reduceSize & 1);
          if (lindex < currSize) {
            threadShared[lindex] = max(threadShared[lindex], threadShared[lindex + reduceSize]);
          }
          workgroupBarrier();
        }
        if (lindex == 0) {
          rowMaxShared = ${w}(${f("threadShared[0]",o)});
        }
        workgroupBarrier();

        // find the rows sum
        var threadSum = ${w}(0.0);
        for (var col = lindex; col < cols; col += wg) {
          let subExp = exp(getValue(row, col, row_stride) - rowMaxShared);
          threadSum += subExp;
        }
        threadShared[lindex] = threadSum;
        workgroupBarrier();

        for (var currSize = wg >> 1;  currSize > 0; currSize = currSize >> 1) {
          if (lindex < currSize) {
            threadShared[lindex] = threadShared[lindex] + threadShared[lindex + currSize];
          }
          workgroupBarrier();
        }
        if (lindex == 0) {
          rowSumShared = ${w}(${nt("threadShared[0]",o)});
        }
        workgroupBarrier();

        // calculate final value for each element in the row
        for (var col = lindex; col < cols; col += wg) {
          let value = exp(getValue(row, col, row_stride) - rowMaxShared) / rowSumShared;
          setValue(row, col, row_stride, value);
        }
      }`;return{name:"Softmax",shaderCache:{hint:`${o}`,inputDependencies:["type"]},getRunData:()=>({outputs:[{dims:r,dataType:e.dataType}],dispatchGroup:{x:l},programUniforms:[{type:"uint32",data:c}]}),getShaderSource:$}},Lu=(e,t)=>{$p(e.inputs),e.compute(Sp(e.inputs[0],t))},Gu=e=>J({axis:e.axis})});var xp,Ip,Cp,_p,Ap,qu,ju,Ku=F(()=>{"use strict";be();ke();we();xp=e=>{if(!e||e.length<1)throw new Error("too few inputs")},Ip=(e,t)=>{let r=[],a=t.numOutputs;return e[1].dims[0]>0&&(e[1].getBigInt64Array().forEach(n=>r.push(Number(n))),a=r.length),J({numOutputs:a,axis:t.axis,splitSizes:r})},Cp=e=>`
fn calculateOutputIndex(index: u32) -> u32 {
    for (var i: u32 = 0u; i < ${e}u; i += 1u ) {
    if (index < sizeInConcatAxis[i]) {
        return i;
    }
    }
    return ${e}u;
}`,_p=e=>{let t=e.length,r=[];for(let a=0;a<t;++a){let n=e[a].setByIndices("indices","input[global_idx]");t===1?r.push(n):a===0?r.push(`if (outputNumber == ${a}u) { ${n} }`):a===t-1?r.push(`else { ${n} }`):r.push(`else if (outputNumber == ${a}) { ${n} }`)}return`
      fn writeBufferData(outputNumber: u32, indices: ${e[0].type.indices}, global_idx: u32) {
        ${r.join(`
`)}
      }`},Ap=(e,t)=>{let r=e[0].dims,a=V.size(r),n=e[0].dataType,s=r.length,u=t.axis,l=u<0?r.length+u:u,o=new Array(t.numOutputs),c=U("input",n,r),f=new Array(t.numOutputs),y=[],h=[],w=0;for(let C=0;C<t.numOutputs;C++){w+=t.splitSizes[C],f[C]=w;let _=r.slice();_[t.axis]=t.splitSizes[C],h.push(_),o[C]=q(`output${C}`,n,h[C]),y.push({dims:h[C],dataType:e[0].dataType})}let v=s<2?"indices":`indices[${l}]`,$=C=>`
  ${C.declareVariables(c,...o)}
  const sizeInConcatAxis = array<u32, ${f.length}>(${f.map(_=>`${_}u`).join(",")});
  ${Cp(f.length)}
  ${_p(o)}

  ${C.mainStart()}
    ${C.guardAgainstOutOfBoundsWorkgroupSizes(a)}

    var indices = ${c.offsetToIndices("global_idx")};
    let outputNumber = calculateOutputIndex(${v});
    if (outputNumber != 0) {
        ${v} -= sizeInConcatAxis[outputNumber - 1u];
    }
    writeBufferData(outputNumber, indices, global_idx);
  }`;return{name:"Split",shaderCache:{hint:t.cacheKey},getShaderSource:$,getRunData:()=>({outputs:y,dispatchGroup:{x:Math.ceil(a/64)}})}},qu=(e,t)=>{xp(e.inputs);let r=e.inputs.length===1?t:Ip(e.inputs,t);e.compute(Ap(e.inputs,r),{inputs:[0]})},ju=e=>{let t=e.axis,r=e.splitSizes,a=e.numOutputs<0?r.length:e.numOutputs;if(a!==r.length)throw new Error("numOutputs and splitSizes lengh must be equal");return J({axis:t,numOutputs:a,splitSizes:r})}});var Yu,Ep,Tp,Op,Zu,Xu=F(()=>{"use strict";We();be();we();Yu=e=>Array.from(e.getBigInt64Array(),Number),Ep=e=>{if(!e||e.length!==2)throw new Error("Tile requires 2 inputs.");if(e[0].dataType!==1&&e[0].dataType!==6&&e[0].dataType!==12)throw new Error("Tile only support float, int32, and uint32 data types");if(e[1].dataType!==7)throw new Error("Tile `repeats` input should be of int64 data type");if(e[1].dims.length!==1)throw new Error("Tile `repeats` input should be 1-D");if(Yu(e[1]).length!==e[0].dims.length)throw new Error("Tile `repeats` input should have same number of elements as rank of input data tensor")},Tp=(e,t)=>{let r=[];for(let a=0;a<e.length;++a)r.push(e[a]*t[a]);return r},Op=e=>{let t=e[0].dims,r=Yu(e[1]),a=Tp(t,r),n=V.size(a),s=e[0].dataType,u=U("input",s,t),l=q("output",s,a),o=c=>`
      const inputShape = ${u.indices(...t)};
      ${c.declareVariables(u,l)}
      ${c.mainStart()}
      ${c.guardAgainstOutOfBoundsWorkgroupSizes(n)}
      let outputIndices = ${l.offsetToIndices("global_idx")};
      var inputIndices: ${u.type.indices};
      for (var i = 0; i < ${t.length}; i++) {
        let inputDimValue = ${l.indicesGet("outputIndices","i")}  % ${u.indicesGet("inputShape","i")};

        ${u.indicesSet("inputIndices","i","inputDimValue")}
      }
      ${l.setByOffset("global_idx",u.getByIndices("inputIndices"))}
    }`;return{name:"Tile",shaderCache:{hint:`${r}`},getRunData:()=>({outputs:[{dims:a,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(n/64)}}),getShaderSource:o}},Zu=e=>{Ep(e.inputs),e.compute(Op(e.inputs),{inputs:[0]})}});var kp,Rp,Qu,Ju=F(()=>{"use strict";We();be();we();kp=(e,t,r,a,n)=>{let s=V.size(r),u=Math.ceil(s/4),l=q("outputData",n,r,4),o=U("aData",t[1].dataType,t[1].dims,4),c=U("bData",t[2].dataType,t[2].dims,4),f=U("cData",t[0].dataType,t[0].dims,4),y,h=(w,v,$)=>`select(${v}, ${w}, ${$})`;if(!a)y=l.setByOffset("global_idx",h(o.getByOffset("global_idx"),c.getByOffset("global_idx"),f.getByOffset("global_idx")));else{let w=(v,$,C="")=>{let _=`aData[indexA${$}][componentA${$}]`,I=`bData[indexB${$}][componentB${$}]`,k=`bool(cData[indexC${$}] & ${4278190080>>>(3-$)*8}u)`;return`
            let outputIndices${$} = ${l.offsetToIndices(`global_idx * 4u + ${$}u`)};
            let offsetA${$} = ${o.broadcastedIndicesToOffset(`outputIndices${$}`,l)};
            let offsetB${$} = ${c.broadcastedIndicesToOffset(`outputIndices${$}`,l)};
            let offsetC${$} = ${f.broadcastedIndicesToOffset(`outputIndices${$}`,l)};
            let indexA${$} = offsetA${$} / 4u;
            let indexB${$} = offsetB${$} / 4u;
            let indexC${$} = offsetC${$} / 4u;
            let componentA${$} = offsetA${$} % 4u;
            let componentB${$} = offsetB${$} % 4u;
            ${v}[${$}] = ${C}(${h(_,I,k)});
          `};n===9?y=`
            var data = vec4<u32>(0);
            ${w("data",0,"u32")}
            ${w("data",1,"u32")}
            ${w("data",2,"u32")}
            ${w("data",3,"u32")}
            outputData[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));`:y=`
            ${w("outputData[global_idx]",0)}
            ${w("outputData[global_idx]",1)}
            ${w("outputData[global_idx]",2)}
            ${w("outputData[global_idx]",3)}
          `}return`
        ${e.declareVariables(f,o,c,l)}
        ${e.mainStart()}
        ${e.guardAgainstOutOfBoundsWorkgroupSizes(u)}
        ${y}
      }`},Rp=e=>{let t=e[1].dims,r=e[2].dims,a=e[0].dims,n=e[1].dataType,s=!(V.areEqual(t,r)&&V.areEqual(r,a)),u=t,l=V.size(t);if(s){let o=dt.calcShape(dt.calcShape(t,r,!1),a,!1);if(!o)throw new Error("Can't perform where op on the given tensors");u=o,l=V.size(u)}return{name:"Where",getShaderSource:o=>kp(o,e,u,s,n),getRunData:()=>({outputs:[{dims:u,dataType:n}],dispatchGroup:{x:Math.ceil(l/64/4)}})}},Qu=e=>{e.compute(Rp(e.inputs))}});var el,tl=F(()=>{"use strict";_i();ea();Oi();Ri();cs();Ss();Cs();oa();Ws();Hs();Fs();Ks();Xs();eu();nu();iu();uu();pu();hu();Ou();Ru();an();Mu();Wu();Hu();Fu();Ku();Xu();Zt();ta();Ju();el=new Map([["Abs",[Pi]],["Acos",[Bi]],["Acosh",[Mi]],["Add",[ps]],["ArgMax",[Ci,Jn]],["ArgMin",[Ii,Jn]],["Asin",[Di]],["Asinh",[zi]],["Atan",[Wi]],["Atanh",[Vi]],["Attention",[Ei,Ai]],["AveragePool",[$u,vu]],["BatchNormalization",[Ti]],["BiasAdd",[ki]],["BiasSplitGelu",[ds]],["Cast",[Ui,Ni]],["Ceil",[Li]],["Clip",[Hi]],["Concat",[xs,Is]],["Conv",[sa,ia]],["ConvTranspose",[zs,Ds]],["Cos",[Gi]],["Cosh",[Fi]],["Div",[fs]],["Einsum",[Ns,Us]],["Elu",[qi,un]],["Equal",[ms]],["Erf",[ji]],["Exp",[Ki]],["Expand",[Gs]],["Floor",[Yi]],["FusedConv",[sa,ia]],["Gather",[js,qs]],["GatherElements",[Zs,Ys]],["Gelu",[Zi]],["Gemm",[Qs,Js]],["GlobalAveragePool",[Iu,xu]],["GlobalMaxPool",[Tu,Eu]],["Greater",[bs]],["GreaterOrEqual",[vs]],["InstanceNormalization",[ru,tu]],["LayerNormalization",[ou,au]],["LeakyRelu",[Xi,un]],["Less",[ws]],["LessOrEqual",[$s]],["Log",[ls]],["MatMul",[su]],["MaxPool",[_u,Au]],["Mul",[hs]],["MultiHeadAttention",[cu,du]],["Neg",[Ji]],["Not",[Qi]],["Pad",[fu,mu]],["Pow",[gs]],["Range",[ku]],["Reciprocal",[es]],["ReduceMin",[bi,ot]],["ReduceMean",[fi,ot]],["ReduceMax",[yi,ot]],["ReduceSum",[vi,ot]],["ReduceProd",[wi,ot]],["ReduceL1",[mi,ot]],["ReduceL2",[hi,ot]],["ReduceLogSum",[Si,ot]],["ReduceLogSumExp",[gi,ot]],["ReduceSumSquare",[$i,ot]],["Relu",[ts]],["Resize",[Pu,Bu]],["Sigmoid",[rs]],["Sin",[ns]],["Sinh",[as]],["Slice",[Nu,Uu]],["SkipLayerNormalization",[Du,zu]],["Split",[qu,ju]],["Sqrt",[os]],["Softmax",[Lu,Gu]],["Sub",[ys]],["Tan",[is]],["Tanh",[ss]],["ThresholdedRelu",[us,un]],["Tile",[Zu]],["Transpose",[ei,ti]],["Where",[Qu]]])});var bn,rl=F(()=>{"use strict";We();At();we();bn=class{constructor(t){this.backend=t;this.repo=new Map,this.attributesBound=!1}getArtifact(t){return this.repo.get(t)}setArtifact(t,r){this.repo.set(t,r)}run(t,r,a,n,s,u,l){let o=this.backend.device,c=this.backend.getComputePassEncoder();c.setPipeline(t.computePipeline);let f=[];for(let h of n)f.push({binding:f.length,resource:{buffer:h.buffer}});for(let h of s)f.push({binding:f.length,resource:{buffer:h.buffer}});l&&f.push({binding:f.length,resource:l});let y=o.createBindGroup({layout:t.computePipeline.getBindGroupLayout(0),entries:f,label:t.programInfo.name});if(c.setBindGroup(0,y),c.dispatchWorkgroups(...u),this.backend.pendingDispatchNumber++,this.backend.isQueryEnabled()){typeof this.backend.queryData>"u"&&(this.backend.queryData=this.backend.gpuDataManager.create(this.backend.querySetCount*8,GPUBufferUsage.COPY_SRC|GPUBufferUsage.QUERY_RESOLVE));let h=this.backend.gpuDataManager.create(this.backend.querySetCount*8,GPUBufferUsage.MAP_READ|GPUBufferUsage.COPY_DST);this.backend.endComputePass(),this.backend.getCommandEncoder().resolveQuerySet(this.backend.querySet,0,2,this.backend.queryData.buffer,0),this.backend.getCommandEncoder().copyBufferToBuffer(this.backend.queryData.buffer,0,h.buffer,0,this.backend.querySetCount*8),this.backend.flush();let w=this.backend.currentKernelId,v=this.backend.kernels.get(w),$=`[${v[0]}] ${v[1]}`;h.buffer.mapAsync(GPUMapMode.READ).then(()=>{let C=new BigUint64Array(h.buffer.getMappedRange()),_=C[0],I=C[1];h.buffer.unmap(),typeof this.backend.queryTimeBase>"u"&&(this.backend.queryTimeBase=_);let k=Number(_-this.backend.queryTimeBase),A=Number(I-this.backend.queryTimeBase);if(!Number.isSafeInteger(k)||!Number.isSafeInteger(A))throw new RangeError("incorrect timestamp range");this.backend.gpuDataManager.release(h.id);let B="";r.forEach((z,W)=>{B+=`input[${W}]: [${z.dims}] | ${gr(z.dataType)}, `});let T="";a.forEach((z,W)=>{T+=`output[${W}]: [${z.dims}] | ${gr(z.dataType)}, `}),console.log(`[profiling] kernel "${w}|${$}" ${B}${T}execution time: ${A-k} ns`)})}this.backend.pendingDispatchNumber>=16&&this.backend.flush()}dispose(){}build(t,r){let a=this.backend.device,n=[];a.features.has("shader-f16")&&n.push("enable f16;");let s=Qo(r),u=t.getShaderSource(s),l=`${n.join(`
`)}
${s.additionalImplementations}
${u}`,o=a.createShaderModule({code:l,label:t.name});Pe("verbose",()=>`[WebGPU] ${t.name} shader code: ${l}`);let c=a.createComputePipeline({compute:{module:o,entryPoint:"main"},layout:"auto",label:t.name});return{programInfo:t,computePipeline:c}}normalizeDispatchGroupSize(t){let r=typeof t=="number"?t:t.x,a=typeof t=="number"?1:t.y||1,n=typeof t=="number"?1:t.z||1,s=this.backend.device.limits.maxComputeWorkgroupsPerDimension;if(r<=s&&a<=s&&n<=s)return[r,a,n];let u=r*a*n,l=Math.ceil(Math.sqrt(u));if(l>s){if(l=Math.ceil(Math.cbrt(u)),l>s)throw new Error("Total dispatch size exceeds WebGPU maximum.");return[l,l,l]}else return[l,l,1]}}});var Pp,Bp,wn,nl=F(()=>{"use strict";At();Fo();Yo();tl();rl();Pp=(e,t)=>{if(t.length!==e.length)throw new Error(`inputDependencies length ${t.length} is not equal to inputTensors length ${e.length}.`);let r=[];for(let a=0;a<e.length;++a){let n=e[a].dataType;switch(t[a]){case"none":{r.push("");break}case"type":{r.push(`${n}`);break}case"rank":{let s=e[a].dims.length;r.push(`${n};${s}`);break}case"dims":{let s=e[a].dims.join(",");r.push(`${n};${s}`);break}default:throw new Error(`unsupported input dependency: ${t[a]}`)}}return r.join("|")},Bp=(e,t,r)=>{let a=e.name;return e.shaderCache?.hint&&(a+="["+e.shaderCache.hint+"]"),a+=":"+r+`:${Pp(t,e.shaderCache?.inputDependencies??new Array(t.length).fill("dims"))}`,a},wn=class{constructor(){this.currentKernelId=null;this.commandEncoder=null;this.computePassEncoder=null;this.pendingDispatchNumber=0;this.querySetCount=2;this.sessionExternalDataMapping=new Map}get currentKernelCustomData(){if(this.currentKernelId===null)throw new Error("currentKernelCustomData(): currentKernelId is null. (should not happen)");let t=this.kernelCustomData.get(this.currentKernelId);return t||(t={},this.kernelCustomData.set(this.currentKernelId,t)),t}async initialize(t){if(!navigator.gpu)throw new Error("WebGpuBackend: WebGPU is not available.");let r=await navigator.gpu.requestAdapter();if(!r)throw new Error("WebGpuBackend: Failed to get GPU adapter.");this.env=t;let a=[],n={requiredLimits:{maxComputeWorkgroupStorageSize:r.limits.maxComputeWorkgroupStorageSize,maxComputeWorkgroupsPerDimension:r.limits.maxComputeWorkgroupsPerDimension,maxStorageBufferBindingSize:r.limits.maxStorageBufferBindingSize,maxBufferSize:r.limits.maxBufferSize,maxComputeInvocationsPerWorkgroup:r.limits.maxComputeInvocationsPerWorkgroup,maxComputeWorkgroupSizeX:r.limits.maxComputeWorkgroupSizeX,maxComputeWorkgroupSizeY:r.limits.maxComputeWorkgroupSizeY,maxComputeWorkgroupSizeZ:r.limits.maxComputeWorkgroupSizeZ},requiredFeatures:a};r.features.has("timestamp-query")&&a.push("timestamp-query"),r.features.has("shader-f16")&&a.push("shader-f16"),this.device=await r.requestDevice(n),this.gpuDataManager=Ko(this),this.programManager=new bn(this),this.kernels=new Map,this.kernelPersistentData=new Map,this.kernelCustomData=new Map,Lo(t.logLevel,!!t.debug),this.device.onuncapturederror=s=>{s.error instanceof GPUValidationError&&console.error(`An uncaught WebGPU validation error was raised: ${s.error.message}`)},Object.defineProperty(this.env.webgpu,"device",{value:this.device})}dispose(){typeof this.querySet<"u"&&this.querySet.destroy(),this.gpuDataManager.dispose()}getCommandEncoder(){return this.commandEncoder||(this.commandEncoder=this.device.createCommandEncoder()),this.commandEncoder}getComputePassEncoder(){if(!this.computePassEncoder){let t={};this.isQueryEnabled()&&(typeof this.querySet>"u"&&(this.querySet=this.device.createQuerySet({type:"timestamp",count:this.querySetCount})),t.timestampWrites={querySet:this.querySet,beginningOfPassWriteIndex:0,endOfPassWriteIndex:1}),this.computePassEncoder=this.getCommandEncoder().beginComputePass(t)}return this.computePassEncoder}endComputePass(){this.computePassEncoder&&(this.computePassEncoder.end(),this.computePassEncoder=null)}flush(){this.commandEncoder&&(this.endComputePass(),this.device.queue.submit([this.getCommandEncoder().finish()]),this.gpuDataManager.refreshPendingBuffers(),this.commandEncoder=null,this.pendingDispatchNumber=0)}isQueryEnabled(){return!!(this.device.features.has("timestamp-query")&&this.env.webgpu.profilingMode==="default")}run(t,r,a,n,s){let u=[];for(let I=0;I<r.length;++I){let k=this.gpuDataManager.get(r[I].data);if(!k)throw new Error(`no GPU data for input: ${r[I].data}`);u[I]=k}let{outputs:l,dispatchGroup:o,programUniforms:c}=t.getRunData(r),f=a.length===0?l.map((I,k)=>k):a;if(f.length!==l.length)throw new Error(`Output size ${f.length} must be equal to ${l.length}.`);let y=[],h=[];for(let I=0;I<l.length;++I){if(!Number.isInteger(f[I])||f[I]<-3||f[I]>=l.length)throw new Error(`Invalid output index: ${f[I]}`);if(f[I]===-3)continue;let k=f[I]===-1,A=f[I]===-2,B=k||A?s(l[I].dataType,l[I].dims):n(f[I],l[I].dataType,l[I].dims),T=this.gpuDataManager.get(B.data);if(!T)throw new Error(`no GPU data for output: ${B.data}`);if(k&&this.temporaryData.push(T),A){let z=this.kernelPersistentData.get(this.currentKernelId);z||(z=[],this.kernelPersistentData.set(this.currentKernelId,z)),z.push(T)}y.push(B),h.push(T)}let w;if(c){let I=0,k=0,A=[],B=1;c.forEach(W=>{let K=typeof W.data=="number"?[W.data]:W.data;if(K.length===0)return;let ee;switch(K.length){case 1:ee=4;break;case 2:ee=8;break;case 3:ee=16;break;case 4:ee=16;break;case 5:ee=16;break;case 6:ee=16;break;default:throw new Error(`unsupported data length: ${K.length}`)}(k===5||k===6)&&(ee=16),ee>B&&(B=ee),I=Math.ceil(I/ee)*ee,k=K.length,A.push(I),I+=K.length*4}),I=Math.ceil(I/B)*B;let T=new ArrayBuffer(I);c.forEach((W,K)=>{let ee=A[K],M=typeof W.data=="number"?[W.data]:W.data;W.type==="int32"?new Int32Array(T,ee,M.length).set(M):W.type==="uint32"?new Uint32Array(T,ee,M.length).set(M):new Float32Array(T,ee,M.length).set(M)});let z=this.gpuDataManager.create(I,GPUBufferUsage.COPY_DST|GPUBufferUsage.UNIFORM);this.device.queue.writeBuffer(z.buffer,0,T,0,I),this.gpuDataManager.release(z.id),w={offset:0,size:I,buffer:z.buffer}}let v=this.programManager.normalizeDispatchGroupSize(o),$=v[1]===1&&v[2]===1,C=Bp(t,r,$),_=this.programManager.getArtifact(C);return _||(_=this.programManager.build(t,v),this.programManager.setArtifact(C,_)),Pe("info",()=>`[ProgramManager] run "${t.name}" (key=${C}) with ${v[0]}x${v[1]}x${v[2]}`),this.programManager.run(_,r,y,u,h,v,w),y}upload(t,r){this.gpuDataManager.upload(t,r)}memcpy(t,r){this.gpuDataManager.memcpy(t,r)}async download(t,r){await this.gpuDataManager.download(t,r)}alloc(t){return this.gpuDataManager.create(t).id}free(t){return this.gpuDataManager.release(t)}createKernel(t,r,a,n){let s=el.get(t);if(!s)throw new Error(`kernel not implemented: ${t}`);this.kernels.set(r,[t,n,s[0],[s[1],a]])}releaseKernel(t){let r=this.kernelPersistentData.get(t);if(r){for(let a of r)this.gpuDataManager.release(a.id);this.kernelPersistentData.delete(t)}this.kernelCustomData.delete(t),this.kernels.delete(t)}computeKernel(t,r,a){let n=this.kernels.get(t);if(!n)throw new Error(`kernel not created: ${t}`);let[s,u,l,o]=n;if(this.currentKernelId!==null)throw new Error(`kernel "[${s}] ${u}" is not allowed to be called recursively`);this.currentKernelId=t,o[0]&&(o[1]=o[0](o[1]),o[0]=void 0),Pe("info",()=>`[WebGPU] Start to run kernel "[${s}] ${u}"...`);let c=this.env.debug;this.temporaryData=[];try{return c&&this.device.pushErrorScope("validation"),l(r,o[1]),0}catch(f){return a.push(Promise.resolve(`[WebGPU] Kernel "[${s}] ${u}" failed. ${f}`)),1}finally{c&&a.push(this.device.popErrorScope().then(f=>f?`GPU validation error for kernel "[${s}] ${u}": ${f.message}`:null));for(let f of this.temporaryData)this.gpuDataManager.release(f.id);this.temporaryData=[],this.currentKernelId=null}}registerBuffer(t,r,a,n){let s=this.sessionExternalDataMapping.get(t);s||(s=new Map,this.sessionExternalDataMapping.set(t,s));let u=s.get(r),l=this.gpuDataManager.registerExternalBuffer(a,n,u?.[1]);return s.set(r,[l,a]),l}unregisterBuffers(t){let r=this.sessionExternalDataMapping.get(t);r&&(r.forEach(a=>this.gpuDataManager.unregisterExternalBuffer(a[1])),this.sessionExternalDataMapping.delete(t))}getBuffer(t){let r=this.gpuDataManager.get(t);if(!r)throw new Error(`no GPU data for buffer: ${t}`);return r.buffer}createDownloader(t,r,a){return async()=>{let n=await qn(this,t,r);return Go(n.buffer,a)}}}});var al={};zt(al,{init:()=>Mp});var Sr,fa,Mp,ol=F(()=>{"use strict";We();nl();At();be();Sr=class e{constructor(t,r,a,n){this.module=t;this.dataType=r;this.data=a;this.dims=n}getFloat32Array(){if(this.dataType!==1)throw new Error("Invalid data type");let t=V.size(this.dims);return t===0?new Float32Array:new Float32Array(this.module.HEAP8.buffer,this.data,t)}getBigInt64Array(){if(this.dataType!==7)throw new Error("Invalid data type");let t=V.size(this.dims);return t===0?new BigInt64Array:new BigInt64Array(this.module.HEAP8.buffer,this.data,t)}getInt32Array(){if(this.dataType!==6)throw new Error("Invalid data type");let t=V.size(this.dims);return t===0?new Int32Array:new Int32Array(this.module.HEAP8.buffer,this.data,t)}reshape(t){if(V.size(t)!==V.size(this.dims))throw new Error("Invalid new shape");return new e(this.module,this.dataType,this.data,t)}},fa=class{constructor(t,r,a){this.module=t;this.backend=r;this.customDataOffset=0;this.customDataSize=0;let n=t.HEAPU32,s=a>>2;this.opKernelContext=n[s++];let u=n[s++];this.outputCount=n[s++],this.customDataOffset=n[s++],this.customDataSize=n[s++];let l=[];for(let o=0;o<u;o++){let c=n[s++],f=n[s++],y=n[s++],h=[];for(let w=0;w<y;w++)h.push(n[s++]);l.push(new Sr(t,c,f,h))}this.inputs=l}get kernelCustomData(){return this.backend.currentKernelCustomData}get customDataBuffer(){return this.module.HEAPU8.subarray(this.customDataOffset,this.customDataOffset+this.customDataSize)}compute(t,r){let a=r?.inputs?.map(l=>typeof l=="number"?this.inputs[l]:l)??this.inputs,n=r?.outputs??[],s=(l,o,c)=>new Sr(this.module,o,this.output(l,c),c),u=(l,o)=>{let c=yr(l);if(!c)throw new Error(`Unsupported data type: ${l}`);let f=c*V.size(o);return new Sr(this.module,l,this.backend.gpuDataManager.create(f).id,o)};return this.backend.run(t,a,n,s,u)}output(t,r){let a=this.module.stackSave();try{let n=this.module.stackAlloc((1+r.length)*4),s=n>>2;this.module.HEAPU32[s++]=r.length;for(let u=0;u<r.length;u++)this.module.HEAPU32[s++]=r[u];return this.module._JsepOutput(this.opKernelContext,t,n)}catch(n){throw new Error(`Failed to generate kernel's output[${t}] with dims [${r}]. If you are running with pre-allocated output, please make sure the output type/dims are correct. Error: ${n}`)}finally{this.module.stackRestore(a)}}},Mp=async(e,t)=>{let r=e.jsepInit;if(r&&navigator.gpu){if(!t.wasm.simd)throw new Error("Not supported for WebGPU=ON and SIMD=OFF. Please set `env.wasm.simd` to true when using WebGPU EP");let a=new wn;await a.initialize(t),r(a,n=>a.alloc(n),n=>a.free(n),(n,s,u,l=!1)=>{if(l)Pe("verbose",()=>`[WebGPU] jsepCopyGpuToGpu: src=${n}, dst=${s}, size=${u}`),a.memcpy(n,s);else{Pe("verbose",()=>`[WebGPU] jsepCopyCpuToGpu: dataOffset=${n}, gpuDataId=${s}, size=${u}`);let o=e.HEAPU8.subarray(n,n+u);a.upload(s,o)}},async(n,s,u)=>{Pe("verbose",()=>`[WebGPU] jsepCopyGpuToCpu: gpuDataId=${n}, dataOffset=${s}, size=${u}`),await a.download(n,()=>e.HEAPU8.subarray(s,s+u))},(n,s,u)=>a.createKernel(n,s,u,t.debug||t.webgpu.profilingMode==="default"?e.UTF8ToString(e._JsepGetNodeName(s)):`${s}`),n=>a.releaseKernel(n),(n,s,u,l)=>{Pe("verbose",()=>`[WebGPU] jsepRun: sessionHandle=${u}, kernel=${n}, contextDataOffset=${s}`);let o=new fa(e,a,s);return a.computeKernel(n,o,l)})}}});var sl,Dp,zp,ul,xr,ll,ma,ha,dl,cl,il,pl,fl,ml,hl=F(()=>{"use strict";Wo();No();We();Yt();Zr();sl=!1,Dp=e=>{let t=Me(),r=t.stackSave();try{let a=t.stackAlloc(8);return t._OrtGetInputOutputCount(e,a,a+4)!==0&&Oe("Can't get session input/output count."),[t.HEAP32[a/4],t.HEAP32[a/4+1]]}finally{t.stackRestore(r)}},zp=(e,t)=>{Me()._OrtInit(e,t)!==0&&Oe("Can't initialize onnxruntime.")},ul=async e=>{zp(e.wasm.numThreads,br(e.logLevel));{let t=(ol(),_t(al)).init;await t(Me(),e)}sl=!0},xr=new Map,ll=()=>sl,ma=e=>{let t=Me(),r=t._malloc(e.byteLength);if(r===0)throw new Error(`Can't create a session. failed to allocate a buffer of size ${e.byteLength}.`);return t.HEAPU8.set(e,r),[r,e.byteLength]},ha=(e,t)=>{let r=Me(),a=0,n=0,s=0,u=[],l=[],o=[];try{[n,u]=Vo(t),a=r._OrtCreateSession(e[0],e[1],n),a===0&&Oe("Can't create a session.");let[c,f]=Dp(a),y=[],h=[],w=[];for(let $=0;$<c;$++){let C=r._OrtGetInputName(a,$);C===0&&Oe("Can't get an input name."),l.push(C),y.push(r.UTF8ToString(C))}for(let $=0;$<f;$++){let C=r._OrtGetOutputName(a,$);C===0&&Oe("Can't get an output name."),o.push(C);let _=r.UTF8ToString(C);h.push(_);{let I=typeof t?.preferredOutputLocation=="string"?t.preferredOutputLocation:t?.preferredOutputLocation?.[_]??"cpu";if(I!=="cpu"&&I!=="cpu-pinned"&&I!=="gpu-buffer")throw new Error(`Not supported preferred output location: ${I}.`);w.push(I)}}let v=null;return w.some($=>$==="gpu-buffer")&&(s=r._OrtCreateBinding(a),s===0&&Oe("Can't create IO binding."),v={handle:s,outputPreferredLocations:w,outputPreferredLocationsEncoded:w.map($=>Gn($))}),xr.set(a,[a,l,o,v]),[a,y,h]}catch(c){throw l.forEach(f=>r._OrtFree(f)),o.forEach(f=>r._OrtFree(f)),s!==0&&r._OrtReleaseBinding(s),a!==0&&r._OrtReleaseSession(a),c}finally{r._free(e[0]),n!==0&&r._OrtReleaseSessionOptions(n),u.forEach(c=>r._free(c))}},dl=(e,t)=>{let r=ma(e);return ha(r,t)},cl=e=>{let t=Me(),r=xr.get(e);if(!r)throw new Error(`cannot release session. invalid session id: ${e}`);let[a,n,s,u]=r;u&&t._OrtReleaseBinding(u.handle),t.jsepUnregisterBuffers?.(e),n.forEach(l=>t._OrtFree(l)),s.forEach(l=>t._OrtFree(l)),t._OrtReleaseSession(a),xr.delete(e)},il=(e,t,r,a,n)=>{if(!e){t.push(0);return}let s=Me(),u=e[0],l=e[1],o=e[3],c,f;if(u==="string"&&o==="gpu-buffer")throw new Error("String tensor is not supported on GPU.");if(o==="gpu-buffer"){let w=e[2].gpuBuffer,v=yr(Ln(u));f=l.reduce(($,C)=>$*C,1)*v,c=s.jsepRegisterBuffer(a,n,w,f)}else{let w=e[2];if(Array.isArray(w)){f=4*w.length,c=s._malloc(f),r.push(c);let v=c/4;for(let $=0;$<w.length;$++){if(typeof w[$]!="string")throw new TypeError(`tensor data at index ${$} is not a string`);s.HEAPU32[v++]=ze(w[$],r)}}else f=w.byteLength,c=s._malloc(f),r.push(c),s.HEAPU8.set(new Uint8Array(w.buffer,w.byteOffset,f),c)}let y=s.stackSave(),h=s.stackAlloc(4*l.length);try{let w=h/4;l.forEach($=>s.HEAP32[w++]=$);let v=s._OrtCreateTensor(Ln(u),c,f,h,l.length,Gn(o));v===0&&Oe(`Can't create tensor for input/output. session=${a}, index=${n}.`),t.push(v)}finally{s.stackRestore(y)}},pl=async(e,t,r,a,n,s)=>{let u=Me(),l=xr.get(e);if(!l)throw new Error(`cannot run inference. invalid session id: ${e}`);let[o,c,f,y]=l,h=t.length,w=a.length,v=0,$=[],C=[],_=[],I=[],k=u.stackSave(),A=u.stackAlloc(h*4),B=u.stackAlloc(h*4),T=u.stackAlloc(w*4),z=u.stackAlloc(w*4);try{[v,$]=zo(s);for(let re=0;re<h;re++)il(r[re],C,I,e,t[re]);for(let re=0;re<w;re++)il(n[re],_,I,e,h+a[re]);let W=A/4,K=B/4,ee=T/4,M=z/4;for(let re=0;re<h;re++)u.HEAPU32[W++]=C[re],u.HEAPU32[K++]=c[t[re]];for(let re=0;re<w;re++)u.HEAPU32[ee++]=_[re],u.HEAPU32[M++]=f[a[re]];if(y){let{handle:re,outputPreferredLocations:ve,outputPreferredLocationsEncoded:j}=y;if(c.length!==h)throw new Error(`input count from feeds (${h}) is expected to be always equal to model's input count (${c.length}).`);for(let $e=0;$e<h;$e++){let Ce=t[$e];await u._OrtBindInput(re,c[Ce],C[$e])!==0&&Oe(`Can't bind input[${$e}] for session=${e}.`)}for(let $e=0;$e<w;$e++){let Ce=a[$e];n[$e]?.[3]?u._OrtBindOutput(re,f[Ce],_[$e],0)!==0&&Oe(`Can't bind pre-allocated output[${$e}] for session=${e}.`):u._OrtBindOutput(re,f[Ce],0,j[Ce])!==0&&Oe(`Can't bind output[${$e}] to ${ve[$e]} for session=${e}.`)}}let Z;y?Z=await u._OrtRunWithBinding(o,y.handle,w,T,v):Z=await u._OrtRun(o,B,A,h,z,w,T,v),Z!==0&&Oe("failed to call OrtRun().");let xe=[];for(let re=0;re<w;re++){let ve=u.HEAPU32[T/4+re];if(ve===_[re]){xe.push(n[re]);continue}let j=u.stackSave(),$e=u.stackAlloc(4*4),Ce=!1,_e,me=0;try{u._OrtGetTensorData(ve,$e,$e+4,$e+8,$e+12)!==0&&Oe(`Can't access output tensor data on index ${re}.`);let Ge=$e/4,qe=u.HEAPU32[Ge++];me=u.HEAPU32[Ge++];let G=u.HEAPU32[Ge++],le=u.HEAPU32[Ge++],fe=[];for(let Be=0;Be<le;Be++)fe.push(u.HEAPU32[G/4+Be]);u._OrtFree(G);let Ue=fe.reduce((Be,Ve)=>Be*Ve,1);_e=gr(qe);let Ye=y?.outputPreferredLocations[a[re]];if(_e==="string"){if(Ye==="gpu-buffer")throw new Error("String tensor is not supported on GPU.");let Be=[],Ve=me/4;for(let je=0;je<Ue;je++){let st=u.HEAPU32[Ve++],Qe=je===Ue-1?void 0:u.HEAPU32[Ve]-st;Be.push(u.UTF8ToString(st,Qe))}xe.push([_e,fe,Be,"cpu"])}else if(Ye==="gpu-buffer"&&Ue>0){let Be=u.jsepGetBuffer(me),Ve=yr(qe);if(Ve===void 0||!Qr(_e))throw new Error(`Unsupported data type: ${_e}`);Ce=!0,xe.push([_e,fe,{gpuBuffer:Be,download:u.jsepCreateDownloader(Be,Ue*Ve,_e),dispose:()=>{u._OrtReleaseTensor(ve)}},"gpu-buffer"])}else{let Be=Xr(_e),Ve=new Be(Ue);new Uint8Array(Ve.buffer,Ve.byteOffset,Ve.byteLength).set(u.HEAPU8.subarray(me,me+Ve.byteLength)),xe.push([_e,fe,Ve,"cpu"])}}finally{u.stackRestore(j),_e==="string"&&me&&u._free(me),Ce||u._OrtReleaseTensor(ve)}}return y&&u._OrtClearBoundOutputs(y.handle),xe}finally{u.stackRestore(k),C.forEach(W=>u._OrtReleaseTensor(W)),_.forEach(W=>u._OrtReleaseTensor(W)),I.forEach(W=>u._free(W)),v!==0&&u._OrtReleaseRunOptions(v),$.forEach(W=>u._free(W))}},fl=e=>{let t=Me(),r=xr.get(e);if(!r)throw new Error("invalid session id");let a=r[0],n=t._OrtEndProfiling(a);n===0&&Oe("Can't get an profile file name."),t._OrtFree(n)},ml=e=>{let t=[];for(let r of e){let a=r[2];!Array.isArray(a)&&"buffer"in a&&t.push(a.buffer)}return t}});var gl=Kt((Wb,Vp)=>{Vp.exports='/*!\n * ONNX Runtime Web v1.17.0\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n"use strict";(()=>{var ln=Object.defineProperty;var Ru=Object.getOwnPropertyDescriptor;var Bu=Object.getOwnPropertyNames;var Mu=Object.prototype.hasOwnProperty;var F=(e,t)=>()=>(e&&(t=e(e=0)),t);var rr=(e,t)=>()=>(t||e((t={exports:{}}).exports,t),t.exports),Er=(e,t)=>{for(var r in t)ln(e,r,{get:t[r],enumerable:!0})},Du=(e,t,r,o)=>{if(t&&typeof t=="object"||typeof t=="function")for(let n of Bu(t))!Mu.call(e,n)&&n!==r&&ln(e,n,{get:()=>t[n],enumerable:!(o=Ru(t,n))||o.enumerable});return e};var zt=e=>Du(ln({},"__esModule",{value:!0}),e);var dn={};Er(dn,{readFile:()=>zu});var zu,cn=F(()=>{zu=void 0});var pn={};Er(pn,{join:()=>Vu});var Vu,mn=F(()=>{Vu=void 0});var ho=rr((fo,fn)=>{"use strict";var mo=(()=>{var e=typeof document<"u"&&document.currentScript?document.currentScript.src:void 0;return typeof __filename<"u"&&(e=e||__filename),function(t={}){var r=t,o,n;r.ready=new Promise((l,m)=>{o=l,n=m}),r.jsepInit=(l,m,y,x,O,G,H,ue)=>{r.Za=l,r.Oa=m,r.Qa=y,r.Ja=x,r.Pa=O,r.ra=G,r.Ra=H,r.Sa=ue,m=(Y,ne,X)=>(...ce)=>{let ge=Ye,k=ne?.();ce=Y(...ce);let ae=ne?.();return k!==ae&&(Y=ae,X(k),ne=X=null),Ye!=ge?wr():ce},y=Y=>async(...ne)=>{try{if(r.Da)throw Error("Session already started");let X=r.Da={Ta:ne[0],errors:[]},ce=await Y(...ne);if(r.Da!==X)throw Error("Session mismatch");l.flush();let ge=X.errors;if(0<ge.length){let k=await Promise.all(ge);if(k=k.filter(ae=>ae),0<k.length)throw Error(k.join(`\n`))}return ce}finally{r.Da=null}},r._OrtRun=y(m(r._OrtRun,()=>r._OrtRun,Y=>r._OrtRun=Y)),r._OrtRunWithBinding=y(m(r._OrtRunWithBinding,()=>r._OrtRunWithBinding,Y=>r._OrtRunWithBinding=Y)),r._OrtBindInput=m(r._OrtBindInput,()=>r._OrtBindInput,Y=>r._OrtBindInput=Y),r.jsepRegisterBuffer=(Y,ne,X,ce)=>l.registerBuffer(Y,ne,X,ce),r.jsepUnregisterBuffers=Y=>{l.unregisterBuffers(Y)},r.jsepGetBuffer=Y=>l.getBuffer(Y),r.jsepCreateDownloader=(Y,ne,X)=>l.createDownloader(Y,ne,X)};var s=Object.assign({},r),u="./this.program",d=(l,m)=>{throw m},a=typeof window=="object",p=typeof importScripts=="function",h=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string",w="",g,v,b;if(h){var S=(cn(),zt(dn)),I=(mn(),zt(pn));w=p?I.dirname(w)+"/":__dirname+"/",g=(l,m)=>(l=l.startsWith("file://")?new URL(l):I.normalize(l),S.readFileSync(l,m?void 0:"utf8")),b=l=>(l=g(l,!0),l.buffer||(l=new Uint8Array(l)),l),v=(l,m,y,x=!0)=>{l=l.startsWith("file://")?new URL(l):I.normalize(l),S.readFile(l,x?void 0:"utf8",(O,G)=>{O?y(O):m(x?G.buffer:G)})},!r.thisProgram&&1<process.argv.length&&(u=process.argv[1].replace(/\\\\/g,"/")),process.argv.slice(2),d=(l,m)=>{throw process.exitCode=l,m},r.inspect=()=>"[Emscripten Module object]"}else(a||p)&&(p?w=self.location.href:typeof document<"u"&&document.currentScript&&(w=document.currentScript.src),e&&(w=e),w.indexOf("blob:")!==0?w=w.substr(0,w.replace(/[?#].*/,"").lastIndexOf("/")+1):w="",g=l=>{var m=new XMLHttpRequest;return m.open("GET",l,!1),m.send(null),m.responseText},p&&(b=l=>{var m=new XMLHttpRequest;return m.open("GET",l,!1),m.responseType="arraybuffer",m.send(null),new Uint8Array(m.response)}),v=(l,m,y)=>{var x=new XMLHttpRequest;x.open("GET",l,!0),x.responseType="arraybuffer",x.onload=()=>{x.status==200||x.status==0&&x.response?m(x.response):y()},x.onerror=y,x.send(null)});var A=r.print||console.log.bind(console),C=r.printErr||console.error.bind(console);Object.assign(r,s),s=null,r.thisProgram&&(u=r.thisProgram),r.quit&&(d=r.quit);var R;r.wasmBinary&&(R=r.wasmBinary);var _=r.noExitRuntime||!0;typeof WebAssembly!="object"&&Le("no native wasm support detected");var B,E,z=!1,V,K,ee,M,Z,xe,re;function ve(){var l=B.buffer;r.HEAP8=K=new Int8Array(l),r.HEAP16=new Int16Array(l),r.HEAP32=M=new Int32Array(l),r.HEAPU8=ee=new Uint8Array(l),r.HEAPU16=new Uint16Array(l),r.HEAPU32=Z=new Uint32Array(l),r.HEAPF32=xe=new Float32Array(l),r.HEAPF64=re=new Float64Array(l)}var q=[],$e=[],Ie=[];function Ae(){var l=r.preRun.shift();q.unshift(l)}var fe=0,rt=null,He=null;function Le(l){throw r.onAbort&&r.onAbort(l),l="Aborted("+l+")",C(l),z=!0,V=1,l=new WebAssembly.RuntimeError(l+". Build with -sASSERTIONS for more info."),n(l),l}function L(l){return l.startsWith("data:application/octet-stream;base64,")}var le;if(le="ort-wasm-simd.wasm",!L(le)){var me=le;le=r.locateFile?r.locateFile(me,w):w+me}function Ne(l){if(l==le&&R)return new Uint8Array(R);if(b)return b(l);throw"both async and sync fetching of the wasm failed"}function je(l){if(!R&&(a||p)){if(typeof fetch=="function"&&!l.startsWith("file://"))return fetch(l,{credentials:"same-origin"}).then(m=>{if(!m.ok)throw"failed to load wasm binary file at \'"+l+"\'";return m.arrayBuffer()}).catch(()=>Ne(l));if(v)return new Promise((m,y)=>{v(l,x=>m(new Uint8Array(x)),y)})}return Promise.resolve().then(()=>Ne(l))}function Re(l,m,y){return je(l).then(x=>WebAssembly.instantiate(x,m)).then(x=>x).then(y,x=>{C("failed to asynchronously prepare wasm: "+x),Le(x)})}function ze(l,m){var y=le;return R||typeof WebAssembly.instantiateStreaming!="function"||L(y)||y.startsWith("file://")||h||typeof fetch!="function"?Re(y,l,m):fetch(y,{credentials:"same-origin"}).then(x=>WebAssembly.instantiateStreaming(x,l).then(m,function(O){return C("wasm streaming compile failed: "+O),C("falling back to ArrayBuffer instantiation"),Re(y,l,m)}))}var Fe,nt={912800:l=>{r.ra("Abs",l,void 0)},912851:l=>{r.ra("Neg",l,void 0)},912902:l=>{r.ra("Floor",l,void 0)},912955:l=>{r.ra("Ceil",l,void 0)},913007:l=>{r.ra("Reciprocal",l,void 0)},913065:l=>{r.ra("Sqrt",l,void 0)},913117:l=>{r.ra("Exp",l,void 0)},913168:l=>{r.ra("Erf",l,void 0)},913219:l=>{r.ra("Sigmoid",l,void 0)},913274:l=>{r.ra("Log",l,void 0)},913325:l=>{r.ra("Sin",l,void 0)},913376:l=>{r.ra("Cos",l,void 0)},913427:l=>{r.ra("Tan",l,void 0)},913478:l=>{r.ra("Asin",l,void 0)},913530:l=>{r.ra("Acos",l,void 0)},913582:l=>{r.ra("Atan",l,void 0)},913634:l=>{r.ra("Sinh",l,void 0)},913686:l=>{r.ra("Cosh",l,void 0)},913738:l=>{r.ra("Asinh",l,void 0)},913791:l=>{r.ra("Acosh",l,void 0)},913844:l=>{r.ra("Atanh",l,void 0)},913897:l=>{r.ra("Tanh",l,void 0)},913949:l=>{r.ra("Not",l,void 0)},914e3:(l,m,y)=>{r.ra("Clip",l,{min:m,max:y})},914069:l=>{r.ra("Clip",l,void 0)},914121:(l,m)=>{r.ra("Elu",l,{alpha:m})},914179:l=>{r.ra("Relu",l,void 0)},914231:(l,m)=>{r.ra("LeakyRelu",l,{alpha:m})},914295:(l,m)=>{r.ra("ThresholdedRelu",l,{alpha:m})},914365:(l,m)=>{r.ra("Cast",l,{to:m})},914423:l=>{r.ra("Add",l,void 0)},914474:l=>{r.ra("Sub",l,void 0)},914525:l=>{r.ra("Mul",l,void 0)},914576:l=>{r.ra("Div",l,void 0)},914627:l=>{r.ra("Pow",l,void 0)},914678:l=>{r.ra("Equal",l,void 0)},914731:l=>{r.ra("Greater",l,void 0)},914786:l=>{r.ra("GreaterOrEqual",l,void 0)},914848:l=>{r.ra("Less",l,void 0)},914900:l=>{r.ra("LessOrEqual",l,void 0)},914959:(l,m,y,x,O)=>{r.ra("ReduceMean",l,{keepDims:!!m,noopWithEmptyAxes:!!y,axes:x?Array.from(M.subarray(O>>>0,O+x>>>0)):[]})},915123:(l,m,y,x,O)=>{r.ra("ReduceMax",l,{keepDims:!!m,noopWithEmptyAxes:!!y,axes:x?Array.from(M.subarray(O>>>0,O+x>>>0)):[]})},915286:(l,m,y,x,O)=>{r.ra("ReduceMin",l,{keepDims:!!m,noopWithEmptyAxes:!!y,axes:x?Array.from(M.subarray(O>>>0,O+x>>>0)):[]})},915449:(l,m,y,x,O)=>{r.ra("ReduceProd",l,{keepDims:!!m,noopWithEmptyAxes:!!y,axes:x?Array.from(M.subarray(O>>>0,O+x>>>0)):[]})},915613:(l,m,y,x,O)=>{r.ra("ReduceSum",l,{keepDims:!!m,noopWithEmptyAxes:!!y,axes:x?Array.from(M.subarray(O>>>0,O+x>>>0)):[]})},915776:(l,m,y,x,O)=>{r.ra("ReduceL1",l,{keepDims:!!m,noopWithEmptyAxes:!!y,axes:x?Array.from(M.subarray(O>>>0,O+x>>>0)):[]})},915938:(l,m,y,x,O)=>{r.ra("ReduceL2",l,{keepDims:!!m,noopWithEmptyAxes:!!y,axes:x?Array.from(M.subarray(O>>>0,O+x>>>0)):[]})},916100:(l,m,y,x,O)=>{r.ra("ReduceLogSum",l,{keepDims:!!m,noopWithEmptyAxes:!!y,axes:x?Array.from(M.subarray(O>>>0,O+x>>>0)):[]})},916266:(l,m,y,x,O)=>{r.ra("ReduceSumSquare",l,{keepDims:!!m,noopWithEmptyAxes:!!y,axes:x?Array.from(M.subarray(O>>>0,O+x>>>0)):[]})},916435:(l,m,y,x,O)=>{r.ra("ReduceLogSumExp",l,{keepDims:!!m,noopWithEmptyAxes:!!y,axes:x?Array.from(M.subarray(O>>>0,O+x>>>0)):[]})},916604:l=>{r.ra("Where",l,void 0)},916657:(l,m,y)=>{r.ra("Transpose",l,{perm:m?Array.from(M.subarray(y>>>0,y+m>>>0)):[]})},916770:(l,m,y,x,O,G,H,ue,Y,ne,X,ce,ge,k,ae)=>{r.ra("ConvTranspose",l,{format:Y?"NHWC":"NCHW",autoPad:m,dilations:[y],group:x,kernel_shape:[O],pads:[G,H],strides:[ue],wIsConst:()=>!!K[ne>>>0],outputPadding:X?Array.from(M.subarray(ce>>>0,ce+X>>>0)):[],outputShape:ge?Array.from(M.subarray(k>>>0,k+ge>>>0)):[],activation:Me(ae)})},917184:(l,m,y,x,O,G,H,ue,Y,ne,X,ce,ge,k)=>{r.ra("ConvTranspose",l,{format:ue?"NHWC":"NCHW",autoPad:m,dilations:Array.from(M.subarray(y>>>0,y+2>>>0)),group:x,kernelShape:Array.from(M.subarray(O>>>0,O+2>>>0)),pads:Array.from(M.subarray(G>>>0,G+4>>>0)),strides:Array.from(M.subarray(H>>>0,H+2>>>0)),wIsConst:()=>!!K[Y>>>0],outputPadding:0<ne?Array.from(M.subarray(X>>>0,X+ne>>>0)):[],outputShape:0<ce?Array.from(M.subarray(ge>>>0,ge+ce>>>0)):[],activation:Me(k)})},917741:(l,m,y,x,O,G,H,ue,Y,ne,X,ce,ge,k,ae)=>{r.ra("ConvTranspose",l,{format:Y?"NHWC":"NCHW",autoPad:m,dilations:[y],group:x,kernel_shape:[O],pads:[G,H],strides:[ue],wIsConst:()=>!!K[ne>>>0],outputPadding:X?Array.from(M.subarray(ce>>>0,ce+X>>>0)):[],outputShape:ge?Array.from(M.subarray(k>>>0,k+ge>>>0)):[],activation:Me(ae)})},918155:(l,m,y,x,O,G,H,ue,Y,ne,X,ce,ge,k)=>{r.ra("ConvTranspose",l,{format:ue?"NHWC":"NCHW",autoPad:m,dilations:Array.from(M.subarray(y>>>0,y+2>>>0)),group:x,kernelShape:Array.from(M.subarray(O>>>0,O+2>>>0)),pads:Array.from(M.subarray(G>>>0,G+4>>>0)),strides:Array.from(M.subarray(H>>>0,H+2>>>0)),wIsConst:()=>!!K[Y>>>0],outputPadding:0<ne?Array.from(M.subarray(X>>>0,X+ne>>>0)):[],outputShape:0<ce?Array.from(M.subarray(ge>>>0,ge+ce>>>0)):[],activation:Me(k)})},918712:(l,m)=>{r.ra("GlobalAveragePool",l,{format:m?"NHWC":"NCHW"})},918803:(l,m,y,x,O,G,H,ue,Y,ne,X,ce,ge,k,ae,he)=>{r.ra("AveragePool",l,{format:he?"NHWC":"NCHW",auto_pad:m,ceil_mode:y,count_include_pad:x,storage_order:O,dilations:[G,H],kernel_shape:[ue,Y],pads:[ne,X,ce,ge],strides:[k,ae]})},919087:(l,m)=>{r.ra("GlobalAveragePool",l,{format:m?"NHWC":"NCHW"})},919178:(l,m,y,x,O,G,H,ue,Y,ne,X,ce,ge,k,ae,he)=>{r.ra("AveragePool",l,{format:he?"NHWC":"NCHW",auto_pad:m,ceil_mode:y,count_include_pad:x,storage_order:O,dilations:[G,H],kernel_shape:[ue,Y],pads:[ne,X,ce,ge],strides:[k,ae]})},919462:(l,m)=>{r.ra("GlobalMaxPool",l,{format:m?"NHWC":"NCHW"})},919549:(l,m,y,x,O,G,H,ue,Y,ne,X,ce,ge,k,ae,he)=>{r.ra("MaxPool",l,{format:he?"NHWC":"NCHW",auto_pad:m,ceil_mode:y,count_include_pad:x,storage_order:O,dilations:[G,H],kernel_shape:[ue,Y],pads:[ne,X,ce,ge],strides:[k,ae]})},919829:(l,m)=>{r.ra("GlobalMaxPool",l,{format:m?"NHWC":"NCHW"})},919916:(l,m,y,x,O,G,H,ue,Y,ne,X,ce,ge,k,ae,he)=>{r.ra("MaxPool",l,{format:he?"NHWC":"NCHW",auto_pad:m,ceil_mode:y,count_include_pad:x,storage_order:O,dilations:[G,H],kernel_shape:[ue,Y],pads:[ne,X,ce,ge],strides:[k,ae]})},920196:(l,m,y,x,O)=>{r.ra("Gemm",l,{alpha:m,beta:y,transA:x,transB:O})},920300:l=>{r.ra("MatMul",l,void 0)},920354:(l,m,y,x)=>{r.ra("ArgMax",l,{keepDims:!!m,selectLastIndex:!!y,axis:x})},920462:(l,m,y,x)=>{r.ra("ArgMin",l,{keepDims:!!m,selectLastIndex:!!y,axis:x})},920570:(l,m)=>{r.ra("Softmax",l,{axis:m})},920633:(l,m)=>{r.ra("Concat",l,{axis:m})},920693:(l,m,y,x,O)=>{r.ra("Split",l,{axis:m,numOutputs:y,splitSizes:x?Array.from(M.subarray(O>>>0,O+x>>>0)):[]})},920838:l=>{r.ra("Expand",l,void 0)},920892:(l,m)=>{r.ra("Gather",l,{axis:Number(m)})},920963:(l,m)=>{r.ra("GatherElements",l,{axis:Number(m)})},921042:(l,m,y,x,O,G,H,ue,Y,ne,X)=>{r.ra("Resize",l,{antialias:m,axes:y?Array.from(M.subarray(x>>>0,x+y>>>0)):[],coordinateTransformMode:Me(O),cubicCoeffA:G,excludeOutside:H,extrapolationValue:ue,keepAspectRatioPolicy:Me(Y),mode:Me(ne),nearestMode:Me(X)})},921393:(l,m,y,x,O,G,H)=>{r.ra("Slice",l,{starts:m?Array.from(M.subarray(y>>>0,y+m>>>0)):[],ends:x?Array.from(M.subarray(O>>>0,O+x>>>0)):[],axes:G?Array.from(M.subarray(H>>>0,H+G>>>0)):[]})},921624:l=>{r.ra("Tile",l,void 0)},921676:(l,m,y)=>{r.ra("LayerNormalization",l,{axis:Number(m),epsilon:Number(y)})},921783:(l,m,y)=>{r.ra("InstanceNormalization",l,{epsilon:m,format:y?"NHWC":"NCHW"})},921897:(l,m,y)=>{r.ra("InstanceNormalization",l,{epsilon:m,format:y?"NHWC":"NCHW"})},922011:l=>{r.ra("Range",l,void 0)},922064:(l,m)=>{r.ra("Einsum",l,{equation:Me(m)})},922145:(l,m,y,x,O)=>{r.ra("Pad",l,{mode:m,value:y,pads:x?Array.from(M.subarray(O>>>0,O+x>>>0)):[]})},922277:(l,m,y,x,O,G)=>{r.ra("BatchNormalization",l,{epsilon:m,momentum:y,spatial:!!O,trainingMode:!!x,format:G?"NHWC":"NCHW"})},922446:(l,m,y,x,O,G)=>{r.ra("BatchNormalization",l,{epsilon:m,momentum:y,spatial:!!O,trainingMode:!!x,format:G?"NHWC":"NCHW"})},922615:(l,m,y,x,O,G,H,ue,Y)=>{r.ra("Attention",l,{numHeads:m,isUnidirectional:y,maskFilterValue:x,scale:O,doRotary:G,qkvHiddenSizes:H?Array.from(M.subarray(Number(ue)>>>0,Number(ue)+H>>>0)):[],pastPresentShareBuffer:!!Y})},922887:l=>{r.ra("Gelu",l,void 0)},922939:(l,m,y,x,O,G)=>{r.ra("MultiHeadAttention",l,{numHeads:m,isUnidirectional:y,maskFilterValue:x,scale:O,doRotary:G})},923098:l=>{r.ra("BiasAdd",l,void 0)},923153:l=>{r.ra("BiasSplitGelu",l,void 0)},923214:(l,m)=>{r.ra("SkipLayerNormalization",l,{epsilon:m})},923295:(l,m,y,x,O,G,H,ue,Y,ne,X,ce,ge)=>{r.ra("Conv",l,{format:Y?"NHWC":"NCHW",auto_pad:m,dilations:[y],group:x,kernel_shape:[O],pads:G?Array.from(M.subarray(H>>>0,H+G>>>0)):[],strides:[ue],w_is_const:()=>!!K[ne>>>0],activation:Me(X),activation_params:ce?Array.from(xe.subarray(ge>>>0,ge+ce>>>0)):[]})},923676:(l,m,y,x,O,G,H,ue,Y,ne,X,ce,ge,k,ae,he)=>{r.ra("Conv",l,{format:ce?"NHWC":"NCHW",auto_pad:m,dilations:[y,x],group:O,kernel_shape:[G,H],pads:ue?Array.from(M.subarray(Y>>>0,Y+ue>>>0)):[],strides:[ne,X],w_is_const:()=>!!K[ge>>>0],activation:Me(k),activation_params:ae?Array.from(xe.subarray(he>>>0,he+ae>>>0)):[]})},924078:l=>{r.Ra(l)},924112:(l,m)=>r.Sa(l,m,r.Da.Ta,r.Da.errors),924224:l=>r.Oa(l),924257:l=>r.Qa(l),924289:(l,m,y)=>{r.Ja(l,m,y,!0)},924328:(l,m,y)=>{r.Ja(l,m,y)}};function Ke(l){this.name="ExitStatus",this.message=`Program terminated with exit(${l})`,this.status=l}var $t=l=>{for(;0<l.length;)l.shift()(r)};function St(l){this.Ha=l-24,this.Ma=function(m){Z[this.Ha+4>>2>>>0]=m},this.La=function(m){Z[this.Ha+8>>2>>>0]=m},this.Ya=function(m,y){this.Ka(),this.Ma(m),this.La(y)},this.Ka=function(){Z[this.Ha+16>>2>>>0]=0}}var Wt=0,pr=0,Xe=typeof TextDecoder<"u"?new TextDecoder("utf8"):void 0,Nt=(l,m,y)=>{m>>>=0;var x=m+y;for(y=m;l[y]&&!(y>=x);)++y;if(16<y-m&&l.buffer&&Xe)return Xe.decode(l.subarray(m,y));for(x="";m<y;){var O=l[m++];if(O&128){var G=l[m++]&63;if((O&224)==192)x+=String.fromCharCode((O&31)<<6|G);else{var H=l[m++]&63;O=(O&240)==224?(O&15)<<12|G<<6|H:(O&7)<<18|G<<12|H<<6|l[m++]&63,65536>O?x+=String.fromCharCode(O):(O-=65536,x+=String.fromCharCode(55296|O>>10,56320|O&1023))}}else x+=String.fromCharCode(O)}return x},Me=(l,m)=>(l>>>=0)?Nt(ee,l,m):"",Ot=l=>{for(var m=0,y=0;y<l.length;++y){var x=l.charCodeAt(y);127>=x?m++:2047>=x?m+=2:55296<=x&&57343>=x?(m+=4,++y):m+=3}return m},Ut=(l,m,y,x)=>{if(y>>>=0,!(0<x))return 0;var O=y;x=y+x-1;for(var G=0;G<l.length;++G){var H=l.charCodeAt(G);if(55296<=H&&57343>=H){var ue=l.charCodeAt(++G);H=65536+((H&1023)<<10)|ue&1023}if(127>=H){if(y>=x)break;m[y++>>>0]=H}else{if(2047>=H){if(y+1>=x)break;m[y++>>>0]=192|H>>6}else{if(65535>=H){if(y+2>=x)break;m[y++>>>0]=224|H>>12}else{if(y+3>=x)break;m[y++>>>0]=240|H>>18,m[y++>>>0]=128|H>>12&63}m[y++>>>0]=128|H>>6&63}m[y++>>>0]=128|H&63}}return m[y>>>0]=0,y-O},pt=l=>l%4===0&&(l%100!==0||l%400===0),mr=[0,31,60,91,121,152,182,213,244,274,305,335],mt=[0,31,59,90,120,151,181,212,243,273,304,334],kt=l=>{var m=Ot(l)+1,y=Mt(m);return y&&Ut(l,ee,y,m),y},gt=[],Pt=(l,m)=>{gt.length=0;var y;for(m>>=2;y=ee[l++>>>0];)m+=y!=105&m,gt.push(y==105?M[m>>>0]:re[m++>>>1]),++m;return gt},Rt={},Ht=()=>{if(!Bt){var l={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:(typeof navigator=="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:u||"./this.program"},m;for(m in Rt)Rt[m]===void 0?delete l[m]:l[m]=Rt[m];var y=[];for(m in l)y.push(`${m}=${l[m]}`);Bt=y}return Bt},Bt,fr=[null,[],[]],Ue=[31,29,31,30,31,30,31,31,30,31,30,31],Gt=[31,28,31,30,31,30,31,31,30,31,30,31];function Lt(l){var m=Array(Ot(l)+1);return Ut(l,m,0,m.length),m}function se(l,m,y,x){function O(k,ae,he){for(k=typeof k=="number"?k.toString():k||"";k.length<ae;)k=he[0]+k;return k}function G(k,ae){return O(k,ae,"0")}function H(k,ae){function he(tr){return 0>tr?-1:0<tr?1:0}var ht;return(ht=he(k.getFullYear()-ae.getFullYear()))===0&&(ht=he(k.getMonth()-ae.getMonth()))===0&&(ht=he(k.getDate()-ae.getDate())),ht}function ue(k){switch(k.getDay()){case 0:return new Date(k.getFullYear()-1,11,29);case 1:return k;case 2:return new Date(k.getFullYear(),0,3);case 3:return new Date(k.getFullYear(),0,2);case 4:return new Date(k.getFullYear(),0,1);case 5:return new Date(k.getFullYear()-1,11,31);case 6:return new Date(k.getFullYear()-1,11,30)}}function Y(k){var ae=k.Ba;for(k=new Date(new Date(k.Ca+1900,0,1).getTime());0<ae;){var he=k.getMonth(),ht=(pt(k.getFullYear())?Ue:Gt)[he];if(ae>ht-k.getDate())ae-=ht-k.getDate()+1,k.setDate(1),11>he?k.setMonth(he+1):(k.setMonth(0),k.setFullYear(k.getFullYear()+1));else{k.setDate(k.getDate()+ae);break}}return he=new Date(k.getFullYear()+1,0,4),ae=ue(new Date(k.getFullYear(),0,4)),he=ue(he),0>=H(ae,k)?0>=H(he,k)?k.getFullYear()+1:k.getFullYear():k.getFullYear()-1}l>>>=0,m>>>=0,y>>>=0,x>>>=0;var ne=M[x+40>>2>>>0];x={Wa:M[x>>2>>>0],Va:M[x+4>>2>>>0],Ea:M[x+8>>2>>>0],Ia:M[x+12>>2>>>0],Fa:M[x+16>>2>>>0],Ca:M[x+20>>2>>>0],wa:M[x+24>>2>>>0],Ba:M[x+28>>2>>>0],$a:M[x+32>>2>>>0],Ua:M[x+36>>2>>>0],Xa:ne?Me(ne):""},y=Me(y),ne={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var X in ne)y=y.replace(new RegExp(X,"g"),ne[X]);var ce="Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),ge="January February March April May June July August September October November December".split(" ");ne={"%a":k=>ce[k.wa].substring(0,3),"%A":k=>ce[k.wa],"%b":k=>ge[k.Fa].substring(0,3),"%B":k=>ge[k.Fa],"%C":k=>G((k.Ca+1900)/100|0,2),"%d":k=>G(k.Ia,2),"%e":k=>O(k.Ia,2," "),"%g":k=>Y(k).toString().substring(2),"%G":k=>Y(k),"%H":k=>G(k.Ea,2),"%I":k=>(k=k.Ea,k==0?k=12:12<k&&(k-=12),G(k,2)),"%j":k=>{for(var ae=0,he=0;he<=k.Fa-1;ae+=(pt(k.Ca+1900)?Ue:Gt)[he++]);return G(k.Ia+ae,3)},"%m":k=>G(k.Fa+1,2),"%M":k=>G(k.Va,2),"%n":()=>`\n`,"%p":k=>0<=k.Ea&&12>k.Ea?"AM":"PM","%S":k=>G(k.Wa,2),"%t":()=>"	","%u":k=>k.wa||7,"%U":k=>G(Math.floor((k.Ba+7-k.wa)/7),2),"%V":k=>{var ae=Math.floor((k.Ba+7-(k.wa+6)%7)/7);if(2>=(k.wa+371-k.Ba-2)%7&&ae++,ae)ae==53&&(he=(k.wa+371-k.Ba)%7,he==4||he==3&&pt(k.Ca)||(ae=1));else{ae=52;var he=(k.wa+7-k.Ba-1)%7;(he==4||he==5&&pt(k.Ca%400-1))&&ae++}return G(ae,2)},"%w":k=>k.wa,"%W":k=>G(Math.floor((k.Ba+7-(k.wa+6)%7)/7),2),"%y":k=>(k.Ca+1900).toString().substring(2),"%Y":k=>k.Ca+1900,"%z":k=>{k=k.Ua;var ae=0<=k;return k=Math.abs(k)/60,(ae?"+":"-")+("0000"+(k/60*100+k%60)).slice(-4)},"%Z":k=>k.Xa,"%%":()=>"%"},y=y.replace(/%%/g,"\\0\\0");for(X in ne)y.includes(X)&&(y=y.replace(new RegExp(X,"g"),ne[X](x)));return y=y.replace(/\\0\\0/g,"%"),X=Lt(y),X.length>m?0:(K.set(X,l>>>0),X.length-1)}function ft(l){try{l()}catch(m){Le(m)}}function hr(l){var m={},y;for(y in l)(function(x){var O=l[x];m[x]=typeof O=="function"?function(){xt.push(x);try{return O.apply(null,arguments)}finally{z||(xt.pop()===x||Le(),Ye&&ot===1&&xt.length===0&&(ot=0,ft(Jt),typeof Fibers<"u"&&Fibers.ab()))}}:O})(y);return m}var ot=0,Ye=null,gr=0,xt=[],Ft={},jt={},yr=0,Ct=null,br=[];function wr(){return new Promise((l,m)=>{Ct={resolve:l,reject:m}})}function vr(){var l=Mt(65548),m=l+12;Z[l>>2>>>0]=m,Z[l+4>>2>>>0]=m+65536,m=xt[0];var y=Ft[m];return y===void 0&&(y=yr++,Ft[m]=y,jt[y]=m),M[l+8>>2>>>0]=y,l}function $r(l){if(!z){if(ot===0){var m=!1,y=!1;l((x=0)=>{if(!z&&(gr=x,m=!0,y)){ot=2,ft(()=>Dt(Ye)),typeof Browser<"u"&&Browser.Ga.Na&&Browser.Ga.resume(),x=!1;try{var O=(0,E[jt[M[Ye+8>>2>>>0]]])()}catch(ue){O=ue,x=!0}var G=!1;if(!Ye){var H=Ct;H&&(Ct=null,(x?H.reject:H.resolve)(O),G=!0)}if(x&&!G)throw O}}),y=!0,m||(ot=1,Ye=vr(),typeof Browser<"u"&&Browser.Ga.Na&&Browser.Ga.pause(),ft(()=>Qt(Ye)))}else ot===2?(ot=0,ft(It),qt(Ye),Ye=null,br.forEach(x=>{if(!z)try{if(x(),!_)try{V=V=x=V,_||(r.onExit&&r.onExit(x),z=!0),d(x,new Ke(x))}catch(O){O instanceof Ke||O=="unwind"||d(1,O)}}catch(O){O instanceof Ke||O=="unwind"||d(1,O)}})):Le(`invalid state: ${ot}`);return gr}}function Sr(l){return $r(m=>{l().then(m)})}var xr={n:function(l,m,y){return Sr(async()=>{await r.Pa(l,m,y)})},a:function(l,m,y){throw l>>>=0,new St(l).Ya(m>>>0,y>>>0),Wt=l,pr++,Wt},g:function(){return 0},J:function(){},z:function(){},B:function(){},L:function(){return 0},H:function(){},C:function(){},G:function(){},l:function(){},A:function(){},x:function(){},I:function(){},y:function(){},m:()=>!0,q:function(l,m,y){l=m+2097152>>>0<4194305-!!l?(l>>>0)+4294967296*m:NaN,y>>>=0,l=new Date(1e3*l),M[y>>2>>>0]=l.getUTCSeconds(),M[y+4>>2>>>0]=l.getUTCMinutes(),M[y+8>>2>>>0]=l.getUTCHours(),M[y+12>>2>>>0]=l.getUTCDate(),M[y+16>>2>>>0]=l.getUTCMonth(),M[y+20>>2>>>0]=l.getUTCFullYear()-1900,M[y+24>>2>>>0]=l.getUTCDay(),M[y+28>>2>>>0]=(l.getTime()-Date.UTC(l.getUTCFullYear(),0,1,0,0,0,0))/864e5|0},r:function(l,m,y){l=m+2097152>>>0<4194305-!!l?(l>>>0)+4294967296*m:NaN,y>>>=0,l=new Date(1e3*l),M[y>>2>>>0]=l.getSeconds(),M[y+4>>2>>>0]=l.getMinutes(),M[y+8>>2>>>0]=l.getHours(),M[y+12>>2>>>0]=l.getDate(),M[y+16>>2>>>0]=l.getMonth(),M[y+20>>2>>>0]=l.getFullYear()-1900,M[y+24>>2>>>0]=l.getDay(),M[y+28>>2>>>0]=(pt(l.getFullYear())?mr:mt)[l.getMonth()]+l.getDate()-1|0,M[y+36>>2>>>0]=-(60*l.getTimezoneOffset()),m=new Date(l.getFullYear(),6,1).getTimezoneOffset();var x=new Date(l.getFullYear(),0,1).getTimezoneOffset();M[y+32>>2>>>0]=(m!=x&&l.getTimezoneOffset()==Math.min(x,m))|0},s:function(l){l>>>=0;var m=new Date(M[l+20>>2>>>0]+1900,M[l+16>>2>>>0],M[l+12>>2>>>0],M[l+8>>2>>>0],M[l+4>>2>>>0],M[l>>2>>>0],0),y=M[l+32>>2>>>0],x=m.getTimezoneOffset(),O=new Date(m.getFullYear(),6,1).getTimezoneOffset(),G=new Date(m.getFullYear(),0,1).getTimezoneOffset(),H=Math.min(G,O);return 0>y?M[l+32>>2>>>0]=+(O!=G&&H==x):0<y!=(H==x)&&(O=Math.max(G,O),m.setTime(m.getTime()+6e4*((0<y?H:O)-x))),M[l+24>>2>>>0]=m.getDay(),M[l+28>>2>>>0]=(pt(m.getFullYear())?mr:mt)[m.getMonth()]+m.getDate()-1|0,M[l>>2>>>0]=m.getSeconds(),M[l+4>>2>>>0]=m.getMinutes(),M[l+8>>2>>>0]=m.getHours(),M[l+12>>2>>>0]=m.getDate(),M[l+16>>2>>>0]=m.getMonth(),M[l+20>>2>>>0]=m.getYear(),l=m.getTime()/1e3,Kt((Fe=l,1<=+Math.abs(Fe)?0<Fe?+Math.floor(Fe/4294967296)>>>0:~~+Math.ceil((Fe-+(~~Fe>>>0))/4294967296)>>>0:0)),l>>>0},o:function(){return-52},p:function(){},v:function(l,m,y){function x(Y){return(Y=Y.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?Y[1]:"GMT"}y>>>=0;var O=new Date().getFullYear(),G=new Date(O,0,1),H=new Date(O,6,1);O=G.getTimezoneOffset();var ue=H.getTimezoneOffset();Z[l>>>0>>2>>>0]=60*Math.max(O,ue),M[m>>>0>>2>>>0]=+(O!=ue),l=x(G),m=x(H),l=kt(l),m=kt(m),ue<O?(Z[y>>2>>>0]=l,Z[y+4>>2>>>0]=m):(Z[y>>2>>>0]=m,Z[y+4>>2>>>0]=l)},e:()=>{Le("")},b:function(l,m,y){return l>>>=0,m=Pt(m>>>0,y>>>0),nt[l].apply(null,m)},i:function(l,m,y){return l>>>=0,m=Pt(m>>>0,y>>>0),nt[l].apply(null,m)},h:function(){return Date.now()},w:function(){return 4294901760},c:()=>performance.now(),K:function(l,m,y){return m>>>=0,ee.copyWithin(l>>>0>>>0,m>>>0,m+(y>>>0)>>>0)},u:function(l){l>>>=0;var m=ee.length;if(4294901760<l)return!1;for(var y=1;4>=y;y*=2){var x=m*(1+.2/y);x=Math.min(x,l+100663296);var O=Math;x=Math.max(l,x);e:{O=O.min.call(O,4294901760,x+(65536-x%65536)%65536)-B.buffer.byteLength+65535>>>16;try{B.grow(O),ve();var G=1;break e}catch{}G=void 0}if(G)return!0}return!1},D:function(l,m){l>>>=0,m>>>=0;var y=0;return Ht().forEach(function(x,O){var G=m+y;for(O=Z[l+4*O>>2>>>0]=G,G=0;G<x.length;++G)K[O++>>0>>>0]=x.charCodeAt(G);K[O>>0>>>0]=0,y+=x.length+1}),0},E:function(l,m){l>>>=0,m>>>=0;var y=Ht();Z[l>>2>>>0]=y.length;var x=0;return y.forEach(function(O){x+=O.length+1}),Z[m>>2>>>0]=x,0},f:()=>52,k:function(){return 52},t:function(){return 70},j:function(l,m,y,x){m>>>=0,y>>>=0,x>>>=0;for(var O=0,G=0;G<y;G++){var H=Z[m>>2>>>0],ue=Z[m+4>>2>>>0];m+=8;for(var Y=0;Y<ue;Y++){var ne=ee[H+Y>>>0],X=fr[l];ne===0||ne===10?((l===1?A:C)(Nt(X,0)),X.length=0):X.push(ne)}O+=ue}return Z[x>>2>>>0]=O,0},F:se,d:function(l,m,y,x){return se(l>>>0,m>>>0,y>>>0,x>>>0)}};(function(){function l(y){if(y=y.exports,y=hr(y),E=y=yt(y),B=E.M,ve(),$e.unshift(E.N),fe--,r.monitorRunDependencies&&r.monitorRunDependencies(fe),fe==0&&(rt!==null&&(clearInterval(rt),rt=null),He)){var x=He;He=null,x()}return y}var m={a:xr};if(fe++,r.monitorRunDependencies&&r.monitorRunDependencies(fe),r.instantiateWasm)try{return r.instantiateWasm(m,l)}catch(y){C("Module.instantiateWasm callback failed with error: "+y),n(y)}return ze(m,function(y){l(y.instance)}).catch(n),{}})(),r._OrtInit=(l,m)=>(r._OrtInit=E.O)(l,m),r._OrtGetLastError=(l,m)=>(r._OrtGetLastError=E.P)(l,m),r._OrtCreateSessionOptions=(l,m,y,x,O,G,H,ue,Y,ne)=>(r._OrtCreateSessionOptions=E.Q)(l,m,y,x,O,G,H,ue,Y,ne),r._OrtAppendExecutionProvider=(l,m)=>(r._OrtAppendExecutionProvider=E.R)(l,m),r._OrtAddFreeDimensionOverride=(l,m,y)=>(r._OrtAddFreeDimensionOverride=E.S)(l,m,y),r._OrtAddSessionConfigEntry=(l,m,y)=>(r._OrtAddSessionConfigEntry=E.T)(l,m,y),r._OrtReleaseSessionOptions=l=>(r._OrtReleaseSessionOptions=E.U)(l),r._OrtCreateSession=(l,m,y)=>(r._OrtCreateSession=E.V)(l,m,y),r._OrtReleaseSession=l=>(r._OrtReleaseSession=E.W)(l),r._OrtGetInputOutputCount=(l,m,y)=>(r._OrtGetInputOutputCount=E.X)(l,m,y),r._OrtGetInputName=(l,m)=>(r._OrtGetInputName=E.Y)(l,m),r._OrtGetOutputName=(l,m)=>(r._OrtGetOutputName=E.Z)(l,m),r._OrtFree=l=>(r._OrtFree=E._)(l),r._OrtCreateTensor=(l,m,y,x,O,G)=>(r._OrtCreateTensor=E.$)(l,m,y,x,O,G),r._OrtGetTensorData=(l,m,y,x,O)=>(r._OrtGetTensorData=E.aa)(l,m,y,x,O),r._OrtReleaseTensor=l=>(r._OrtReleaseTensor=E.ba)(l),r._OrtCreateRunOptions=(l,m,y,x)=>(r._OrtCreateRunOptions=E.ca)(l,m,y,x),r._OrtAddRunConfigEntry=(l,m,y)=>(r._OrtAddRunConfigEntry=E.da)(l,m,y),r._OrtReleaseRunOptions=l=>(r._OrtReleaseRunOptions=E.ea)(l),r._OrtCreateBinding=l=>(r._OrtCreateBinding=E.fa)(l),r._OrtBindInput=(l,m,y)=>(r._OrtBindInput=E.ga)(l,m,y),r._OrtBindOutput=(l,m,y,x)=>(r._OrtBindOutput=E.ha)(l,m,y,x),r._OrtClearBoundOutputs=l=>(r._OrtClearBoundOutputs=E.ia)(l),r._OrtReleaseBinding=l=>(r._OrtReleaseBinding=E.ja)(l),r._OrtRunWithBinding=(l,m,y,x,O)=>(r._OrtRunWithBinding=E.ka)(l,m,y,x,O),r._OrtRun=(l,m,y,x,O,G,H,ue)=>(r._OrtRun=E.la)(l,m,y,x,O,G,H,ue),r._OrtEndProfiling=l=>(r._OrtEndProfiling=E.ma)(l),r._JsepOutput=(l,m,y)=>(r._JsepOutput=E.na)(l,m,y),r._JsepGetNodeName=l=>(r._JsepGetNodeName=E.oa)(l);var Mt=r._malloc=l=>(Mt=r._malloc=E.pa)(l),qt=r._free=l=>(qt=r._free=E.qa)(l),Kt=l=>(Kt=E.sa)(l),Yt=()=>(Yt=E.ta)(),Zt=l=>(Zt=E.ua)(l),Xt=l=>(Xt=E.va)(l),Qt=l=>(Qt=E.xa)(l),Jt=()=>(Jt=E.ya)(),Dt=l=>(Dt=E.za)(l),It=()=>(It=E.Aa)();r.___start_em_js=924361,r.___stop_em_js=924522;function yt(l){l=Object.assign({},l);var m=x=>()=>x()>>>0,y=x=>O=>x(O)>>>0;return l.__errno_location=m(l.__errno_location),l.malloc=y(l.malloc),l.stackSave=m(l.stackSave),l.stackAlloc=y(l.stackAlloc),l}r.stackAlloc=Xt,r.stackSave=Yt,r.stackRestore=Zt,r.UTF8ToString=Me,r.stringToUTF8=(l,m,y)=>Ut(l,ee,m,y),r.lengthBytesUTF8=Ot;var At;He=function l(){At||er(),At||(He=l)};function er(){function l(){if(!At&&(At=!0,r.calledRun=!0,!z)){if($t($e),o(r),r.onRuntimeInitialized&&r.onRuntimeInitialized(),r.postRun)for(typeof r.postRun=="function"&&(r.postRun=[r.postRun]);r.postRun.length;){var m=r.postRun.shift();Ie.unshift(m)}$t(Ie)}}if(!(0<fe)){if(r.preRun)for(typeof r.preRun=="function"&&(r.preRun=[r.preRun]);r.preRun.length;)Ae();$t(q),0<fe||(r.setStatus?(r.setStatus("Running..."),setTimeout(function(){setTimeout(function(){r.setStatus("")},1),l()},1)):l())}}if(r.preInit)for(typeof r.preInit=="function"&&(r.preInit=[r.preInit]);0<r.preInit.length;)r.preInit.pop()();return er(),t.ready}})();typeof fo=="object"&&typeof fn=="object"?fn.exports=mo:typeof define=="function"&&define.amd&&define([],()=>mo)});var go=rr(()=>{});var yo=rr(()=>{});var bo={};Er(bo,{cpus:()=>Wu});var Wu,wo=F(()=>{Wu=void 0});var So=rr(($o,hn)=>{"use strict";var vo=(()=>{var e=typeof document<"u"&&document.currentScript?document.currentScript.src:void 0;return typeof __filename<"u"&&(e=e||__filename),function(t={}){function r(){return ve.buffer!=fe.buffer&&me(),fe}function o(){return ve.buffer!=fe.buffer&&me(),rt}function n(){return ve.buffer!=fe.buffer&&me(),He}function s(){return ve.buffer!=fe.buffer&&me(),Le}function u(){return ve.buffer!=fe.buffer&&me(),L}function d(){return ve.buffer!=fe.buffer&&me(),le}var a=t,p,h;a.ready=new Promise((i,c)=>{p=i,h=c}),a.jsepInit=(i,c,f,$,T,D,N,oe)=>{a.Qb=i,a.wb=c,a.yb=f,a.jb=$,a.xb=T,a.Ea=D,a.zb=N,a.Ab=oe,c=(Q,te,ie)=>(...ye)=>{let Ce=at,P=te?.();ye=Q(...ye);let de=te?.();return P!==de&&(Q=de,ie(P),te=ie=null),at!=Ce?Iu():ye},f=Q=>async(...te)=>{try{if(a.bb)throw Error("Session already started");let ie=a.bb={Fb:te[0],errors:[]},ye=await Q(...te);if(a.bb!==ie)throw Error("Session mismatch");i.flush();let Ce=ie.errors;if(0<Ce.length){let P=await Promise.all(Ce);if(P=P.filter(de=>de),0<P.length)throw Error(P.join(`\n`))}return ye}finally{a.bb=null}},a._OrtRun=f(c(a._OrtRun,()=>a._OrtRun,Q=>a._OrtRun=Q)),a._OrtRunWithBinding=f(c(a._OrtRunWithBinding,()=>a._OrtRunWithBinding,Q=>a._OrtRunWithBinding=Q)),a._OrtBindInput=c(a._OrtBindInput,()=>a._OrtBindInput,Q=>a._OrtBindInput=Q),a.jsepRegisterBuffer=(Q,te,ie,ye)=>i.registerBuffer(Q,te,ie,ye),a.jsepUnregisterBuffers=Q=>{i.unregisterBuffers(Q)},a.jsepGetBuffer=Q=>i.getBuffer(Q),a.jsepCreateDownloader=(Q,te,ie)=>i.createDownloader(Q,te,ie)};var w=Object.assign({},a),g="./this.program",v=(i,c)=>{throw c},b=typeof window=="object",S=typeof importScripts=="function",I=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string",A=a.ENVIRONMENT_IS_PTHREAD||!1,C="";function R(i){return a.locateFile?a.locateFile(i,C):C+i}var _,B,E;if(I){var z=(cn(),zt(dn)),V=(mn(),zt(pn));C=S?V.dirname(C)+"/":__dirname+"/",_=(c,f)=>(c=c.startsWith("file://")?new URL(c):V.normalize(c),z.readFileSync(c,f?void 0:"utf8")),E=c=>(c=_(c,!0),c.buffer||(c=new Uint8Array(c)),c),B=(c,f,$,T=!0)=>{c=c.startsWith("file://")?new URL(c):V.normalize(c),z.readFile(c,T?void 0:"utf8",(D,N)=>{D?$(D):f(T?N.buffer:N)})},!a.thisProgram&&1<process.argv.length&&(g=process.argv[1].replace(/\\\\/g,"/")),process.argv.slice(2),v=(c,f)=>{throw process.exitCode=c,f},a.inspect=()=>"[Emscripten Module object]";let i;try{i=go()}catch(c){throw console.error(\'The "worker_threads" module is not supported in this node.js build - perhaps a newer version is needed?\'),c}global.Worker=i.Worker}else(b||S)&&(S?C=self.location.href:typeof document<"u"&&document.currentScript&&(C=document.currentScript.src),typeof e<"u"&&e&&(C=e),C.indexOf("blob:")!==0?C=C.substr(0,C.replace(/[?#].*/,"").lastIndexOf("/")+1):C="",I||(_=i=>{var c=new XMLHttpRequest;return c.open("GET",i,!1),c.send(null),c.responseText},S&&(E=i=>{var c=new XMLHttpRequest;return c.open("GET",i,!1),c.responseType="arraybuffer",c.send(null),new Uint8Array(c.response)}),B=(i,c,f)=>{var $=new XMLHttpRequest;$.open("GET",i,!0),$.responseType="arraybuffer",$.onload=()=>{$.status==200||$.status==0&&$.response?c($.response):f()},$.onerror=f,$.send(null)}));I&&typeof performance>"u"&&(global.performance=yo().performance);var K=console.log.bind(console),ee=console.error.bind(console);I&&(K=(...i)=>z.writeSync(1,i.join(" ")+`\n`),ee=(...i)=>z.writeSync(2,i.join(" ")+`\n`));var M=a.print||K,Z=a.printErr||ee;Object.assign(a,w),w=null,a.thisProgram&&(g=a.thisProgram),a.quit&&(v=a.quit);var xe;a.wasmBinary&&(xe=a.wasmBinary);var re=a.noExitRuntime||!0;typeof WebAssembly!="object"&&Xe("no native wasm support detected");var ve,q,$e,Ie=!1,Ae,fe,rt,He,Le,L,le;function me(){var i=ve.buffer;a.HEAP8=fe=new Int8Array(i),a.HEAP16=new Int16Array(i),a.HEAP32=He=new Int32Array(i),a.HEAPU8=rt=new Uint8Array(i),a.HEAPU16=new Uint16Array(i),a.HEAPU32=Le=new Uint32Array(i),a.HEAPF32=L=new Float32Array(i),a.HEAPF64=le=new Float64Array(i)}var Ne=a.INITIAL_MEMORY||16777216;if(5242880<=Ne||Xe("INITIAL_MEMORY should be larger than STACK_SIZE, was "+Ne+"! (STACK_SIZE=5242880)"),A)ve=a.wasmMemory;else if(a.wasmMemory)ve=a.wasmMemory;else if(ve=new WebAssembly.Memory({initial:Ne/65536,maximum:65536,shared:!0}),!(ve.buffer instanceof SharedArrayBuffer))throw Z("requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag"),I&&Z("(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and/or recent version)"),Error("bad memory");me(),Ne=ve.buffer.byteLength;var je=[],Re=[],ze=[],Fe=0;function nt(){return re||0<Fe}var Ke=0,$t=null,St=null;function Wt(){Ke++,a.monitorRunDependencies&&a.monitorRunDependencies(Ke)}function pr(){if(Ke--,a.monitorRunDependencies&&a.monitorRunDependencies(Ke),Ke==0&&($t!==null&&(clearInterval($t),$t=null),St)){var i=St;St=null,i()}}function Xe(i){throw a.onAbort&&a.onAbort(i),i="Aborted("+i+")",Z(i),Ie=!0,Ae=1,i=new WebAssembly.RuntimeError(i+". Build with -sASSERTIONS for more info."),h(i),i}function Nt(i){return i.startsWith("data:application/octet-stream;base64,")}var Me;Me="ort-wasm-simd-threaded.wasm",Nt(Me)||(Me=R(Me));function Ot(i){if(i==Me&&xe)return new Uint8Array(xe);if(E)return E(i);throw"both async and sync fetching of the wasm failed"}function Ut(i){if(!xe&&(b||S)){if(typeof fetch=="function"&&!i.startsWith("file://"))return fetch(i,{credentials:"same-origin"}).then(c=>{if(!c.ok)throw"failed to load wasm binary file at \'"+i+"\'";return c.arrayBuffer()}).catch(()=>Ot(i));if(B)return new Promise((c,f)=>{B(i,$=>c(new Uint8Array($)),f)})}return Promise.resolve().then(()=>Ot(i))}function pt(i,c,f){return Ut(i).then($=>WebAssembly.instantiate($,c)).then($=>$).then(f,$=>{Z("failed to asynchronously prepare wasm: "+$),Xe($)})}function mr(i,c){var f=Me;return xe||typeof WebAssembly.instantiateStreaming!="function"||Nt(f)||f.startsWith("file://")||I||typeof fetch!="function"?pt(f,i,c):fetch(f,{credentials:"same-origin"}).then($=>WebAssembly.instantiateStreaming($,i).then(c,function(T){return Z("wasm streaming compile failed: "+T),Z("falling back to ArrayBuffer instantiation"),pt(f,i,c)}))}var mt,kt={1428784:i=>{a.Ea("Abs",i,void 0)},1428835:i=>{a.Ea("Neg",i,void 0)},1428886:i=>{a.Ea("Floor",i,void 0)},1428939:i=>{a.Ea("Ceil",i,void 0)},1428991:i=>{a.Ea("Reciprocal",i,void 0)},1429049:i=>{a.Ea("Sqrt",i,void 0)},1429101:i=>{a.Ea("Exp",i,void 0)},1429152:i=>{a.Ea("Erf",i,void 0)},1429203:i=>{a.Ea("Sigmoid",i,void 0)},1429258:i=>{a.Ea("Log",i,void 0)},1429309:i=>{a.Ea("Sin",i,void 0)},1429360:i=>{a.Ea("Cos",i,void 0)},1429411:i=>{a.Ea("Tan",i,void 0)},1429462:i=>{a.Ea("Asin",i,void 0)},1429514:i=>{a.Ea("Acos",i,void 0)},1429566:i=>{a.Ea("Atan",i,void 0)},1429618:i=>{a.Ea("Sinh",i,void 0)},1429670:i=>{a.Ea("Cosh",i,void 0)},1429722:i=>{a.Ea("Asinh",i,void 0)},1429775:i=>{a.Ea("Acosh",i,void 0)},1429828:i=>{a.Ea("Atanh",i,void 0)},1429881:i=>{a.Ea("Tanh",i,void 0)},1429933:i=>{a.Ea("Not",i,void 0)},1429984:(i,c,f)=>{a.Ea("Clip",i,{min:c,max:f})},1430053:i=>{a.Ea("Clip",i,void 0)},1430105:(i,c)=>{a.Ea("Elu",i,{alpha:c})},1430163:i=>{a.Ea("Relu",i,void 0)},1430215:(i,c)=>{a.Ea("LeakyRelu",i,{alpha:c})},1430279:(i,c)=>{a.Ea("ThresholdedRelu",i,{alpha:c})},1430349:i=>{a.zb(i)},1430383:(i,c)=>a.Ab(i,c,a.bb.Fb,a.bb.errors),1430495:(i,c)=>{a.Ea("Cast",i,{to:c})},1430553:i=>{a.Ea("Add",i,void 0)},1430604:i=>{a.Ea("Sub",i,void 0)},1430655:i=>{a.Ea("Mul",i,void 0)},1430706:i=>{a.Ea("Div",i,void 0)},1430757:i=>{a.Ea("Pow",i,void 0)},1430808:i=>{a.Ea("Equal",i,void 0)},1430861:i=>{a.Ea("Greater",i,void 0)},1430916:i=>{a.Ea("GreaterOrEqual",i,void 0)},1430978:i=>{a.Ea("Less",i,void 0)},1431030:i=>{a.Ea("LessOrEqual",i,void 0)},1431089:(i,c,f,$,T)=>{a.Ea("ReduceMean",i,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:$?Array.from(n().subarray(T>>>0,T+$>>>0)):[]})},1431253:(i,c,f,$,T)=>{a.Ea("ReduceMax",i,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:$?Array.from(n().subarray(T>>>0,T+$>>>0)):[]})},1431416:(i,c,f,$,T)=>{a.Ea("ReduceMin",i,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:$?Array.from(n().subarray(T>>>0,T+$>>>0)):[]})},1431579:(i,c,f,$,T)=>{a.Ea("ReduceProd",i,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:$?Array.from(n().subarray(T>>>0,T+$>>>0)):[]})},1431743:(i,c,f,$,T)=>{a.Ea("ReduceSum",i,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:$?Array.from(n().subarray(T>>>0,T+$>>>0)):[]})},1431906:(i,c,f,$,T)=>{a.Ea("ReduceL1",i,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:$?Array.from(n().subarray(T>>>0,T+$>>>0)):[]})},1432068:(i,c,f,$,T)=>{a.Ea("ReduceL2",i,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:$?Array.from(n().subarray(T>>>0,T+$>>>0)):[]})},1432230:(i,c,f,$,T)=>{a.Ea("ReduceLogSum",i,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:$?Array.from(n().subarray(T>>>0,T+$>>>0)):[]})},1432396:(i,c,f,$,T)=>{a.Ea("ReduceSumSquare",i,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:$?Array.from(n().subarray(T>>>0,T+$>>>0)):[]})},1432565:(i,c,f,$,T)=>{a.Ea("ReduceLogSumExp",i,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:$?Array.from(n().subarray(T>>>0,T+$>>>0)):[]})},1432734:i=>{a.Ea("Where",i,void 0)},1432787:(i,c,f)=>{a.Ea("Transpose",i,{perm:c?Array.from(n().subarray(f>>>0,f+c>>>0)):[]})},1432900:(i,c,f,$,T,D,N,oe,Q,te,ie,ye,Ce)=>{a.Ea("Conv",i,{format:Q?"NHWC":"NCHW",auto_pad:c,dilations:[f],group:$,kernel_shape:[T],pads:D?Array.from(n().subarray(N>>>0,N+D>>>0)):[],strides:[oe],w_is_const:()=>!!r()[te>>>0],activation:Ue(ie),activation_params:ye?Array.from(u().subarray(Ce>>>0,Ce+ye>>>0)):[]})},1433281:(i,c,f,$,T,D,N,oe,Q,te,ie,ye,Ce,P,de,Se)=>{a.Ea("Conv",i,{format:ye?"NHWC":"NCHW",auto_pad:c,dilations:[f,$],group:T,kernel_shape:[D,N],pads:oe?Array.from(n().subarray(Q>>>0,Q+oe>>>0)):[],strides:[te,ie],w_is_const:()=>!!r()[Ce>>>0],activation:Ue(P),activation_params:de?Array.from(u().subarray(Se>>>0,Se+de>>>0)):[]})},1433683:(i,c,f,$,T,D,N,oe,Q,te,ie,ye,Ce,P,de)=>{a.Ea("ConvTranspose",i,{format:Q?"NHWC":"NCHW",autoPad:c,dilations:[f],group:$,kernel_shape:[T],pads:[D,N],strides:[oe],wIsConst:()=>!!r()[te>>>0],outputPadding:ie?Array.from(n().subarray(ye>>>0,ye+ie>>>0)):[],outputShape:Ce?Array.from(n().subarray(P>>>0,P+Ce>>>0)):[],activation:Ue(de)})},1434097:(i,c,f,$,T,D,N,oe,Q,te,ie,ye,Ce,P)=>{a.Ea("ConvTranspose",i,{format:oe?"NHWC":"NCHW",autoPad:c,dilations:Array.from(n().subarray(f>>>0,f+2>>>0)),group:$,kernelShape:Array.from(n().subarray(T>>>0,T+2>>>0)),pads:Array.from(n().subarray(D>>>0,D+4>>>0)),strides:Array.from(n().subarray(N>>>0,N+2>>>0)),wIsConst:()=>!!r()[Q>>>0],outputPadding:0<te?Array.from(n().subarray(ie>>>0,ie+te>>>0)):[],outputShape:0<ye?Array.from(n().subarray(Ce>>>0,Ce+ye>>>0)):[],activation:Ue(P)})},1434654:(i,c,f,$,T,D,N,oe,Q,te,ie,ye,Ce,P,de)=>{a.Ea("ConvTranspose",i,{format:Q?"NHWC":"NCHW",autoPad:c,dilations:[f],group:$,kernel_shape:[T],pads:[D,N],strides:[oe],wIsConst:()=>!!r()[te>>>0],outputPadding:ie?Array.from(n().subarray(ye>>>0,ye+ie>>>0)):[],outputShape:Ce?Array.from(n().subarray(P>>>0,P+Ce>>>0)):[],activation:Ue(de)})},1435068:(i,c,f,$,T,D,N,oe,Q,te,ie,ye,Ce,P)=>{a.Ea("ConvTranspose",i,{format:oe?"NHWC":"NCHW",autoPad:c,dilations:Array.from(n().subarray(f>>>0,f+2>>>0)),group:$,kernelShape:Array.from(n().subarray(T>>>0,T+2>>>0)),pads:Array.from(n().subarray(D>>>0,D+4>>>0)),strides:Array.from(n().subarray(N>>>0,N+2>>>0)),wIsConst:()=>!!r()[Q>>>0],outputPadding:0<te?Array.from(n().subarray(ie>>>0,ie+te>>>0)):[],outputShape:0<ye?Array.from(n().subarray(Ce>>>0,Ce+ye>>>0)):[],activation:Ue(P)})},1435625:(i,c)=>{a.Ea("GlobalAveragePool",i,{format:c?"NHWC":"NCHW"})},1435716:(i,c,f,$,T,D,N,oe,Q,te,ie,ye,Ce,P,de,Se)=>{a.Ea("AveragePool",i,{format:Se?"NHWC":"NCHW",auto_pad:c,ceil_mode:f,count_include_pad:$,storage_order:T,dilations:[D,N],kernel_shape:[oe,Q],pads:[te,ie,ye,Ce],strides:[P,de]})},1436e3:(i,c)=>{a.Ea("GlobalAveragePool",i,{format:c?"NHWC":"NCHW"})},1436091:(i,c,f,$,T,D,N,oe,Q,te,ie,ye,Ce,P,de,Se)=>{a.Ea("AveragePool",i,{format:Se?"NHWC":"NCHW",auto_pad:c,ceil_mode:f,count_include_pad:$,storage_order:T,dilations:[D,N],kernel_shape:[oe,Q],pads:[te,ie,ye,Ce],strides:[P,de]})},1436375:(i,c)=>{a.Ea("GlobalMaxPool",i,{format:c?"NHWC":"NCHW"})},1436462:(i,c,f,$,T,D,N,oe,Q,te,ie,ye,Ce,P,de,Se)=>{a.Ea("MaxPool",i,{format:Se?"NHWC":"NCHW",auto_pad:c,ceil_mode:f,count_include_pad:$,storage_order:T,dilations:[D,N],kernel_shape:[oe,Q],pads:[te,ie,ye,Ce],strides:[P,de]})},1436742:(i,c)=>{a.Ea("GlobalMaxPool",i,{format:c?"NHWC":"NCHW"})},1436829:(i,c,f,$,T,D,N,oe,Q,te,ie,ye,Ce,P,de,Se)=>{a.Ea("MaxPool",i,{format:Se?"NHWC":"NCHW",auto_pad:c,ceil_mode:f,count_include_pad:$,storage_order:T,dilations:[D,N],kernel_shape:[oe,Q],pads:[te,ie,ye,Ce],strides:[P,de]})},1437109:(i,c,f,$,T)=>{a.Ea("Gemm",i,{alpha:c,beta:f,transA:$,transB:T})},1437213:i=>{a.Ea("MatMul",i,void 0)},1437267:(i,c,f,$)=>{a.Ea("ArgMax",i,{keepDims:!!c,selectLastIndex:!!f,axis:$})},1437375:(i,c,f,$)=>{a.Ea("ArgMin",i,{keepDims:!!c,selectLastIndex:!!f,axis:$})},1437483:(i,c)=>{a.Ea("Softmax",i,{axis:c})},1437546:(i,c)=>{a.Ea("Concat",i,{axis:c})},1437606:(i,c,f,$,T)=>{a.Ea("Split",i,{axis:c,numOutputs:f,splitSizes:$?Array.from(n().subarray(T>>>0,T+$>>>0)):[]})},1437751:i=>{a.Ea("Expand",i,void 0)},1437805:(i,c)=>{a.Ea("Gather",i,{axis:Number(c)})},1437876:(i,c)=>{a.Ea("GatherElements",i,{axis:Number(c)})},1437955:(i,c,f,$,T,D,N,oe,Q,te,ie)=>{a.Ea("Resize",i,{antialias:c,axes:f?Array.from(n().subarray($>>>0,$+f>>>0)):[],coordinateTransformMode:Ue(T),cubicCoeffA:D,excludeOutside:N,extrapolationValue:oe,keepAspectRatioPolicy:Ue(Q),mode:Ue(te),nearestMode:Ue(ie)})},1438306:(i,c,f,$,T,D,N)=>{a.Ea("Slice",i,{starts:c?Array.from(n().subarray(f>>>0,f+c>>>0)):[],ends:$?Array.from(n().subarray(T>>>0,T+$>>>0)):[],axes:D?Array.from(n().subarray(N>>>0,N+D>>>0)):[]})},1438537:i=>{a.Ea("Tile",i,void 0)},1438589:(i,c,f)=>{a.Ea("LayerNormalization",i,{axis:Number(c),epsilon:Number(f)})},1438696:(i,c,f)=>{a.Ea("InstanceNormalization",i,{epsilon:c,format:f?"NHWC":"NCHW"})},1438810:(i,c,f)=>{a.Ea("InstanceNormalization",i,{epsilon:c,format:f?"NHWC":"NCHW"})},1438924:i=>{a.Ea("Range",i,void 0)},1438977:(i,c)=>{a.Ea("Einsum",i,{equation:Ue(c)})},1439058:(i,c,f,$,T)=>{a.Ea("Pad",i,{mode:c,value:f,pads:$?Array.from(n().subarray(T>>>0,T+$>>>0)):[]})},1439190:(i,c,f,$,T,D)=>{a.Ea("BatchNormalization",i,{epsilon:c,momentum:f,spatial:!!T,trainingMode:!!$,format:D?"NHWC":"NCHW"})},1439359:(i,c,f,$,T,D)=>{a.Ea("BatchNormalization",i,{epsilon:c,momentum:f,spatial:!!T,trainingMode:!!$,format:D?"NHWC":"NCHW"})},1439528:(i,c,f,$,T,D,N,oe,Q)=>{a.Ea("Attention",i,{numHeads:c,isUnidirectional:f,maskFilterValue:$,scale:T,doRotary:D,qkvHiddenSizes:N?Array.from(n().subarray(Number(oe)>>>0,Number(oe)+N>>>0)):[],pastPresentShareBuffer:!!Q})},1439800:i=>{a.Ea("Gelu",i,void 0)},1439852:(i,c,f,$,T,D)=>{a.Ea("MultiHeadAttention",i,{numHeads:c,isUnidirectional:f,maskFilterValue:$,scale:T,doRotary:D})},1440011:i=>{a.Ea("BiasAdd",i,void 0)},1440066:i=>{a.Ea("BiasSplitGelu",i,void 0)},1440127:(i,c)=>{a.Ea("SkipLayerNormalization",i,{epsilon:c})},1440208:i=>a.wb(i),1440241:i=>a.yb(i),1440273:(i,c,f)=>{a.jb(i,c,f,!0)},1440312:(i,c,f)=>{a.jb(i,c,f)}};function gt(i){this.name="ExitStatus",this.message=`Program terminated with exit(${i})`,this.status=i}function Pt(i){i.terminate(),i.onmessage=()=>{}}function Rt(i){(i=se.Qa[i])||Xe(),se.Eb(i)}function Ht(i){var c=se.tb();if(!c)return 6;se.Ya.push(c),se.Qa[i.Xa]=c,c.Xa=i.Xa;var f={cmd:"run",start_routine:i.Gb,arg:i.rb,pthread_ptr:i.Xa};return I&&c.unref(),c.postMessage(f,i.Mb),0}var Bt=typeof TextDecoder<"u"?new TextDecoder("utf8"):void 0,fr=(i,c,f)=>{c>>>=0;var $=c+f;for(f=c;i[f]&&!(f>=$);)++f;if(16<f-c&&i.buffer&&Bt)return Bt.decode(i.buffer instanceof SharedArrayBuffer?i.slice(c,f):i.subarray(c,f));for($="";c<f;){var T=i[c++];if(T&128){var D=i[c++]&63;if((T&224)==192)$+=String.fromCharCode((T&31)<<6|D);else{var N=i[c++]&63;T=(T&240)==224?(T&15)<<12|D<<6|N:(T&7)<<18|D<<12|N<<6|i[c++]&63,65536>T?$+=String.fromCharCode(T):(T-=65536,$+=String.fromCharCode(55296|T>>10,56320|T&1023))}}else $+=String.fromCharCode(T)}return $},Ue=(i,c)=>(i>>>=0)?fr(o(),i,c):"";function Gt(i){if(A)return H(1,1,i);Ae=i,nt()||(se.Hb(),a.onExit&&a.onExit(i),Ie=!0),v(i,new gt(i))}var Lt=i=>{if(Ae=i,A)throw hr(i),"unwind";Gt(i)},se={ab:[],Ya:[],mb:[],Qa:{},gb:function(){A?se.vb():se.ub()},ub:function(){je.unshift(()=>{Wt(),se.Bb(()=>pr())})},vb:function(){se.receiveObjectTransfer=se.Db,se.threadInitTLS=se.lb,se.setExitStatus=se.kb,re=!1},kb:function(i){Ae=i},Sb:["$terminateWorker"],Hb:function(){for(var i of se.Ya)Pt(i);for(i of se.ab)Pt(i);se.ab=[],se.Ya=[],se.Qa=[]},Eb:function(i){var c=i.Xa;delete se.Qa[c],se.ab.push(i),se.Ya.splice(se.Ya.indexOf(i),1),i.Xa=0,on(c)},Db:function(){},lb:function(){se.mb.forEach(i=>i())},Cb:i=>new Promise(c=>{i.onmessage=D=>{D=D.data;var N=D.cmd;if(D.targetThread&&D.targetThread!=Ar()){var oe=se.Qa[D.Rb];oe?oe.postMessage(D,D.transferList):Z(\'Internal error! Worker sent a message "\'+N+\'" to target pthread \'+D.targetThread+", but that thread no longer exists!")}else N==="checkMailbox"?It():N==="spawnThread"?Ht(D):N==="cleanupThread"?Rt(D.thread):N==="killThread"?(D=D.thread,N=se.Qa[D],delete se.Qa[D],Pt(N),on(D),se.Ya.splice(se.Ya.indexOf(N),1),N.Xa=0):N==="cancelThread"?se.Qa[D.thread].postMessage({cmd:"cancel"}):N==="loaded"?(i.loaded=!0,c(i)):N==="alert"?alert("Thread "+D.threadId+": "+D.text):D.target==="setimmediate"?i.postMessage(D):N==="callHandler"?a[D.handler](...D.args):N&&Z("worker sent an unknown command "+N)},i.onerror=D=>{throw Z("worker sent an error! "+D.filename+":"+D.lineno+": "+D.message),D},I&&(i.on("message",function(D){i.onmessage({data:D})}),i.on("error",function(D){i.onerror(D)}));var f=[],$=["onExit","onAbort","print","printErr"],T;for(T of $)a.hasOwnProperty(T)&&f.push(T);i.postMessage({cmd:"load",handlers:f,urlOrBlob:a.mainScriptUrlOrBlob||e,wasmMemory:ve,wasmModule:$e})}),Bb:function(i){i()},qb:function(){var i=R("ort-wasm-simd-threaded.worker.js");i=new Worker(i),se.ab.push(i)},tb:function(){return se.ab.length==0&&(se.qb(),se.Cb(se.ab[0])),se.ab.pop()}};a.PThread=se;var ft=i=>{for(;0<i.length;)i.shift()(a)};a.establishStackSpace=function(){var i=Ar(),c=n()[i+52>>2>>>0];i=n()[i+56>>2>>>0],oo(c,c-i),_r(c)};function hr(i){if(A)return H(2,0,i);Lt(i)}a.invokeEntryPoint=function(i,c){i=ao.apply(null,[i,c]),nt()?se.kb(i):an(i)};function ot(i){this.fb=i-24,this.pb=function(c){s()[this.fb+4>>2>>>0]=c},this.ob=function(c){s()[this.fb+8>>2>>>0]=c},this.gb=function(c,f){this.nb(),this.pb(c),this.ob(f)},this.nb=function(){s()[this.fb+16>>2>>>0]=0}}var Ye=0,gr=0;function xt(i,c,f,$){return A?H(3,1,i,c,f,$):Ft(i,c,f,$)}function Ft(i,c,f,$){if(i>>>=0,c>>>=0,f>>>=0,$>>>=0,typeof SharedArrayBuffer>"u")return Z("Current environment does not support SharedArrayBuffer, pthreads are not available!"),6;var T=[];return A&&T.length===0?xt(i,c,f,$):(i={Gb:f,Xa:i,rb:$,Mb:T},A?(i.Ob="spawnThread",postMessage(i,T),0):Ht(i))}function jt(i,c,f){return A?H(4,1,i,c,f):0}function yr(i,c){if(A)return H(5,1,i,c)}var Ct=i=>{for(var c=0,f=0;f<i.length;++f){var $=i.charCodeAt(f);127>=$?c++:2047>=$?c+=2:55296<=$&&57343>=$?(c+=4,++f):c+=3}return c},br=(i,c,f,$)=>{if(f>>>=0,!(0<$))return 0;var T=f;$=f+$-1;for(var D=0;D<i.length;++D){var N=i.charCodeAt(D);if(55296<=N&&57343>=N){var oe=i.charCodeAt(++D);N=65536+((N&1023)<<10)|oe&1023}if(127>=N){if(f>=$)break;c[f++>>>0]=N}else{if(2047>=N){if(f+1>=$)break;c[f++>>>0]=192|N>>6}else{if(65535>=N){if(f+2>=$)break;c[f++>>>0]=224|N>>12}else{if(f+3>=$)break;c[f++>>>0]=240|N>>18,c[f++>>>0]=128|N>>12&63}c[f++>>>0]=128|N>>6&63}c[f++>>>0]=128|N&63}}return c[f>>>0]=0,f-T},wr=(i,c,f)=>br(i,o(),c,f);function vr(i,c){if(A)return H(6,1,i,c)}function $r(i,c,f){if(A)return H(7,1,i,c,f)}function Sr(i,c,f){return A?H(8,1,i,c,f):0}function xr(i,c){if(A)return H(9,1,i,c)}function Mt(i,c,f){if(A)return H(10,1,i,c,f)}function qt(i,c,f,$){if(A)return H(11,1,i,c,f,$)}function Kt(i,c,f,$){if(A)return H(12,1,i,c,f,$)}function Yt(i,c,f,$){if(A)return H(13,1,i,c,f,$)}function Zt(i){if(A)return H(14,1,i)}function Xt(i,c){if(A)return H(15,1,i,c)}function Qt(i,c,f){if(A)return H(16,1,i,c,f)}var Jt=i=>{if(!Ie)try{if(i(),!nt())try{A?an(Ae):Lt(Ae)}catch(c){c instanceof gt||c=="unwind"||v(1,c)}}catch(c){c instanceof gt||c=="unwind"||v(1,c)}};function Dt(i){i>>>=0,typeof Atomics.Nb=="function"&&(Atomics.Nb(n(),i>>2,i).value.then(It),i+=128,Atomics.store(n(),i>>2,1))}a.__emscripten_thread_mailbox_await=Dt;function It(){var i=Ar();i&&(Dt(i),Jt(()=>ro()))}a.checkMailbox=It;var yt=i=>i%4===0&&(i%100!==0||i%400===0),At=[0,31,60,91,121,152,182,213,244,274,305,335],er=[0,31,59,90,120,151,181,212,243,273,304,334];function l(i,c,f,$,T,D,N,oe){return A?H(17,1,i,c,f,$,T,D,N,oe):-52}function m(i,c,f,$,T,D,N){if(A)return H(18,1,i,c,f,$,T,D,N)}var y=i=>{var c=Ct(i)+1,f=nn(c);return f&&wr(i,f,c),f},x=[],O=(i,c)=>{x.length=0;var f;for(c>>=2;f=o()[i++>>>0];)c+=f!=105&c,x.push(f==105?n()[c>>>0]:d()[c++>>>1]),++c;return x},G=i=>{var c=sn();return i=i(),_r(c),i};function H(i,c){var f=arguments.length-2,$=arguments;return G(()=>{for(var T=un(8*f),D=T>>3,N=0;N<f;N++){var oe=$[2+N];d()[D+N>>>0]=oe}return to(i,f,T,c)})}var ue=[],Y={},ne=()=>{if(!X){var i={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:(typeof navigator=="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:g||"./this.program"},c;for(c in Y)Y[c]===void 0?delete i[c]:i[c]=Y[c];var f=[];for(c in i)f.push(`${c}=${i[c]}`);X=f}return X},X;function ce(i,c){if(A)return H(19,1,i,c);i>>>=0,c>>>=0;var f=0;return ne().forEach(function($,T){var D=c+f;for(T=s()[i+4*T>>2>>>0]=D,D=0;D<$.length;++D)r()[T++>>0>>>0]=$.charCodeAt(D);r()[T>>0>>>0]=0,f+=$.length+1}),0}function ge(i,c){if(A)return H(20,1,i,c);i>>>=0,c>>>=0;var f=ne();s()[i>>2>>>0]=f.length;var $=0;return f.forEach(function(T){$+=T.length+1}),s()[c>>2>>>0]=$,0}function k(i){return A?H(21,1,i):52}function ae(i,c,f,$){return A?H(22,1,i,c,f,$):52}function he(i,c,f,$,T){return A?H(23,1,i,c,f,$,T):70}var ht=[null,[],[]];function tr(i,c,f,$){if(A)return H(24,1,i,c,f,$);c>>>=0,f>>>=0,$>>>=0;for(var T=0,D=0;D<f;D++){var N=s()[c>>2>>>0],oe=s()[c+4>>2>>>0];c+=8;for(var Q=0;Q<oe;Q++){var te=o()[N+Q>>>0],ie=ht[i];te===0||te===10?((i===1?M:Z)(fr(ie,0)),ie.length=0):ie.push(te)}T+=oe}return s()[$>>2>>>0]=T,0}var qn=[31,29,31,30,31,30,31,31,30,31,30,31],Kn=[31,28,31,30,31,30,31,31,30,31,30,31];function vu(i){var c=Array(Ct(i)+1);return br(i,c,0,c.length),c}var $u=(i,c)=>{r().set(i,c>>>0)};function Yn(i,c,f,$){function T(P,de,Se){for(P=typeof P=="number"?P.toString():P||"";P.length<de;)P=Se[0]+P;return P}function D(P,de){return T(P,de,"0")}function N(P,de){function Se(po){return 0>po?-1:0<po?1:0}var _t;return(_t=Se(P.getFullYear()-de.getFullYear()))===0&&(_t=Se(P.getMonth()-de.getMonth()))===0&&(_t=Se(P.getDate()-de.getDate())),_t}function oe(P){switch(P.getDay()){case 0:return new Date(P.getFullYear()-1,11,29);case 1:return P;case 2:return new Date(P.getFullYear(),0,3);case 3:return new Date(P.getFullYear(),0,2);case 4:return new Date(P.getFullYear(),0,1);case 5:return new Date(P.getFullYear()-1,11,31);case 6:return new Date(P.getFullYear()-1,11,30)}}function Q(P){var de=P.Za;for(P=new Date(new Date(P.$a+1900,0,1).getTime());0<de;){var Se=P.getMonth(),_t=(yt(P.getFullYear())?qn:Kn)[Se];if(de>_t-P.getDate())de-=_t-P.getDate()+1,P.setDate(1),11>Se?P.setMonth(Se+1):(P.setMonth(0),P.setFullYear(P.getFullYear()+1));else{P.setDate(P.getDate()+de);break}}return Se=new Date(P.getFullYear()+1,0,4),de=oe(new Date(P.getFullYear(),0,4)),Se=oe(Se),0>=N(de,P)?0>=N(Se,P)?P.getFullYear()+1:P.getFullYear():P.getFullYear()-1}i>>>=0,c>>>=0,f>>>=0,$>>>=0;var te=n()[$+40>>2>>>0];$={Kb:n()[$>>2>>>0],Jb:n()[$+4>>2>>>0],cb:n()[$+8>>2>>>0],ib:n()[$+12>>2>>>0],eb:n()[$+16>>2>>>0],$a:n()[$+20>>2>>>0],Wa:n()[$+24>>2>>>0],Za:n()[$+28>>2>>>0],Tb:n()[$+32>>2>>>0],Ib:n()[$+36>>2>>>0],Lb:te?Ue(te):""},f=Ue(f),te={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var ie in te)f=f.replace(new RegExp(ie,"g"),te[ie]);var ye="Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),Ce="January February March April May June July August September October November December".split(" ");te={"%a":P=>ye[P.Wa].substring(0,3),"%A":P=>ye[P.Wa],"%b":P=>Ce[P.eb].substring(0,3),"%B":P=>Ce[P.eb],"%C":P=>D((P.$a+1900)/100|0,2),"%d":P=>D(P.ib,2),"%e":P=>T(P.ib,2," "),"%g":P=>Q(P).toString().substring(2),"%G":P=>Q(P),"%H":P=>D(P.cb,2),"%I":P=>(P=P.cb,P==0?P=12:12<P&&(P-=12),D(P,2)),"%j":P=>{for(var de=0,Se=0;Se<=P.eb-1;de+=(yt(P.$a+1900)?qn:Kn)[Se++]);return D(P.ib+de,3)},"%m":P=>D(P.eb+1,2),"%M":P=>D(P.Jb,2),"%n":()=>`\n`,"%p":P=>0<=P.cb&&12>P.cb?"AM":"PM","%S":P=>D(P.Kb,2),"%t":()=>"	","%u":P=>P.Wa||7,"%U":P=>D(Math.floor((P.Za+7-P.Wa)/7),2),"%V":P=>{var de=Math.floor((P.Za+7-(P.Wa+6)%7)/7);if(2>=(P.Wa+371-P.Za-2)%7&&de++,de)de==53&&(Se=(P.Wa+371-P.Za)%7,Se==4||Se==3&&yt(P.$a)||(de=1));else{de=52;var Se=(P.Wa+7-P.Za-1)%7;(Se==4||Se==5&&yt(P.$a%400-1))&&de++}return D(de,2)},"%w":P=>P.Wa,"%W":P=>D(Math.floor((P.Za+7-(P.Wa+6)%7)/7),2),"%y":P=>(P.$a+1900).toString().substring(2),"%Y":P=>P.$a+1900,"%z":P=>{P=P.Ib;var de=0<=P;return P=Math.abs(P)/60,(de?"+":"-")+("0000"+(P/60*100+P%60)).slice(-4)},"%Z":P=>P.Lb,"%%":()=>"%"},f=f.replace(/%%/g,"\\0\\0");for(ie in te)f.includes(ie)&&(f=f.replace(new RegExp(ie,"g"),te[ie]($)));return f=f.replace(/\\0\\0/g,"%"),ie=vu(f),ie.length>c?0:($u(ie,i),ie.length-1)}function Cr(i){try{i()}catch(c){Xe(c)}}function Su(i){var c={},f;for(f in i)(function($){var T=i[$];c[$]=typeof T=="function"?function(){Ir.push($);try{return T.apply(null,arguments)}finally{Ie||(Ir.pop()===$||Xe(),at&&bt===1&&Ir.length===0&&(bt=0,Fe+=1,Cr(so),typeof Fibers<"u"&&Fibers.Ub()))}}:T})(f);return c}var bt=0,at=null,Zn=0,Ir=[],Xn={},Qn={},xu=0,rn=null,Cu=[];function Iu(){return new Promise((i,c)=>{rn={resolve:i,reject:c}})}function Au(){var i=nn(65548),c=i+12;s()[i>>2>>>0]=c,s()[i+4>>2>>>0]=c+65536,c=Ir[0];var f=Xn[c];return f===void 0&&(f=xu++,Xn[c]=f,Qn[f]=c),c=f,n()[i+8>>2>>>0]=c,i}function _u(){var i=n()[at+8>>2>>>0];return i=q[Qn[i]],--Fe,i()}function Tu(i){if(!Ie){if(bt===0){var c=!1,f=!1;i(($=0)=>{if(!Ie&&(Zn=$,c=!0,f)){bt=2,Cr(()=>uo(at)),typeof Browser<"u"&&Browser.hb.sb&&Browser.hb.resume(),$=!1;try{var T=_u()}catch(oe){T=oe,$=!0}var D=!1;if(!at){var N=rn;N&&(rn=null,($?N.reject:N.resolve)(T),D=!0)}if($&&!D)throw T}}),f=!0,c||(bt=1,at=Au(),typeof Browser<"u"&&Browser.hb.sb&&Browser.hb.pause(),Cr(()=>io(at)))}else bt===2?(bt=0,Cr(lo),Jn(at),at=null,Cu.forEach($=>Jt($))):Xe(`invalid state: ${bt}`);return Zn}}function Eu(i){return Tu(c=>{i().then(c)})}se.gb();var Ou=[null,Gt,hr,xt,jt,yr,vr,$r,Sr,xr,Mt,qt,Kt,Yt,Zt,Xt,Qt,l,m,ce,ge,k,ae,he,tr],ku={r:function(i,c,f){return Eu(async()=>{await a.xb(i,c,f)})},b:function(i,c,f){throw i>>>=0,new ot(i).gb(c>>>0,f>>>0),Ye=i,gr++,Ye},P:function(i){eo(i>>>0,!S,1,!b,131072,!1),se.lb()},n:function(i){i>>>=0,A?postMessage({cmd:"cleanupThread",thread:i}):Rt(i)},K:Ft,g:jt,V:yr,F:vr,H:$r,y:Sr,T:xr,L:Mt,S:qt,p:Kt,G:Yt,D:Zt,U:Xt,E:Qt,q:()=>!0,B:function(i,c){i>>>=0,i==c>>>0?setTimeout(()=>It()):A?postMessage({targetThread:i,cmd:"checkMailbox"}):(i=se.Qa[i])&&i.postMessage({cmd:"checkMailbox"})},N:function(){return-1},O:Dt,X:function(i){I&&se.Qa[i>>>0].ref()},u:function(i,c,f){i=c+2097152>>>0<4194305-!!i?(i>>>0)+4294967296*c:NaN,f>>>=0,i=new Date(1e3*i),n()[f>>2>>>0]=i.getUTCSeconds(),n()[f+4>>2>>>0]=i.getUTCMinutes(),n()[f+8>>2>>>0]=i.getUTCHours(),n()[f+12>>2>>>0]=i.getUTCDate(),n()[f+16>>2>>>0]=i.getUTCMonth(),n()[f+20>>2>>>0]=i.getUTCFullYear()-1900,n()[f+24>>2>>>0]=i.getUTCDay(),i=(i.getTime()-Date.UTC(i.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,n()[f+28>>2>>>0]=i},v:function(i,c,f){i=c+2097152>>>0<4194305-!!i?(i>>>0)+4294967296*c:NaN,f>>>=0,i=new Date(1e3*i),n()[f>>2>>>0]=i.getSeconds(),n()[f+4>>2>>>0]=i.getMinutes(),n()[f+8>>2>>>0]=i.getHours(),n()[f+12>>2>>>0]=i.getDate(),n()[f+16>>2>>>0]=i.getMonth(),n()[f+20>>2>>>0]=i.getFullYear()-1900,n()[f+24>>2>>>0]=i.getDay(),c=(yt(i.getFullYear())?At:er)[i.getMonth()]+i.getDate()-1|0,n()[f+28>>2>>>0]=c,n()[f+36>>2>>>0]=-(60*i.getTimezoneOffset()),c=new Date(i.getFullYear(),6,1).getTimezoneOffset();var $=new Date(i.getFullYear(),0,1).getTimezoneOffset();i=(c!=$&&i.getTimezoneOffset()==Math.min($,c))|0,n()[f+32>>2>>>0]=i},w:function(i){i>>>=0;var c=new Date(n()[i+20>>2>>>0]+1900,n()[i+16>>2>>>0],n()[i+12>>2>>>0],n()[i+8>>2>>>0],n()[i+4>>2>>>0],n()[i>>2>>>0],0),f=n()[i+32>>2>>>0],$=c.getTimezoneOffset(),T=new Date(c.getFullYear(),6,1).getTimezoneOffset(),D=new Date(c.getFullYear(),0,1).getTimezoneOffset(),N=Math.min(D,T);return 0>f?n()[i+32>>2>>>0]=+(T!=D&&N==$):0<f!=(N==$)&&(T=Math.max(D,T),c.setTime(c.getTime()+6e4*((0<f?N:T)-$))),n()[i+24>>2>>>0]=c.getDay(),f=(yt(c.getFullYear())?At:er)[c.getMonth()]+c.getDate()-1|0,n()[i+28>>2>>>0]=f,n()[i>>2>>>0]=c.getSeconds(),n()[i+4>>2>>>0]=c.getMinutes(),n()[i+8>>2>>>0]=c.getHours(),n()[i+12>>2>>>0]=c.getDate(),n()[i+16>>2>>>0]=c.getMonth(),n()[i+20>>2>>>0]=c.getYear(),i=c.getTime()/1e3,no((mt=i,1<=+Math.abs(mt)?0<mt?+Math.floor(mt/4294967296)>>>0:~~+Math.ceil((mt-+(~~mt>>>0))/4294967296)>>>0:0)),i>>>0},s:l,t:m,A:function(i,c,f){function $(te){return(te=te.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?te[1]:"GMT"}i>>>=0,c>>>=0,f>>>=0;var T=new Date().getFullYear(),D=new Date(T,0,1),N=new Date(T,6,1);T=D.getTimezoneOffset();var oe=N.getTimezoneOffset(),Q=Math.max(T,oe);s()[i>>2>>>0]=60*Q,n()[c>>2>>>0]=+(T!=oe),i=$(D),c=$(N),i=y(i),c=y(c),oe<T?(s()[f>>2>>>0]=i,s()[f+4>>2>>>0]=c):(s()[f>>2>>>0]=c,s()[f+4>>2>>>0]=i)},e:()=>{Xe("")},c:function(i,c,f){return i>>>=0,c=O(c>>>0,f>>>0),kt[i].apply(null,c)},l:function(i,c,f){return i>>>=0,c=O(c>>>0,f>>>0),kt[i].apply(null,c)},o:function(){},k:function(){return Date.now()},W:()=>{throw Fe+=1,"unwind"},C:function(){return 4294901760},d:()=>performance.timeOrigin+performance.now(),i:function(){return I?(wo(),zt(bo)).cpus().length:navigator.hardwareConcurrency},M:function(i,c,f,$){for(se.Pb=c>>>0,ue.length=f,c=$>>>0>>3,$=0;$<f;$++)ue[$]=d()[c+$>>>0];return(0>i?kt[-i-1]:Ou[i]).apply(null,ue)},z:function(i){i>>>=0;var c=o().length;if(i<=c||4294901760<i)return!1;for(var f=1;4>=f;f*=2){var $=c*(1+.2/f);$=Math.min($,i+100663296);var T=Math;$=Math.max(i,$);e:{T=T.min.call(T,4294901760,$+(65536-$%65536)%65536)-ve.buffer.byteLength+65535>>>16;try{ve.grow(T),me();var D=1;break e}catch{}D=void 0}if(D)return!0}return!1},Q:ce,R:ge,J:Lt,h:k,m:ae,x:he,j:tr,a:ve||a.wasmMemory,I:Yn,f:function(i,c,f,$){return Yn(i>>>0,c>>>0,f>>>0,$>>>0)}};(function(){function i(f,$){return f=f.exports,f=Su(f),q=f=Pu(f),se.mb.push(q.Da),Re.unshift(q.Y),$e=$,pr(),f}var c={a:ku};if(Wt(),a.instantiateWasm)try{return a.instantiateWasm(c,i)}catch(f){Z("Module.instantiateWasm callback failed with error: "+f),h(f)}return mr(c,function(f){i(f.instance,f.module)}).catch(h),{}})(),a._OrtInit=(i,c)=>(a._OrtInit=q.Z)(i,c),a._OrtGetLastError=(i,c)=>(a._OrtGetLastError=q._)(i,c),a._OrtCreateSessionOptions=(i,c,f,$,T,D,N,oe,Q,te)=>(a._OrtCreateSessionOptions=q.$)(i,c,f,$,T,D,N,oe,Q,te),a._OrtAppendExecutionProvider=(i,c)=>(a._OrtAppendExecutionProvider=q.aa)(i,c),a._OrtAddFreeDimensionOverride=(i,c,f)=>(a._OrtAddFreeDimensionOverride=q.ba)(i,c,f),a._OrtAddSessionConfigEntry=(i,c,f)=>(a._OrtAddSessionConfigEntry=q.ca)(i,c,f),a._OrtReleaseSessionOptions=i=>(a._OrtReleaseSessionOptions=q.da)(i),a._OrtCreateSession=(i,c,f)=>(a._OrtCreateSession=q.ea)(i,c,f),a._OrtReleaseSession=i=>(a._OrtReleaseSession=q.fa)(i),a._OrtGetInputOutputCount=(i,c,f)=>(a._OrtGetInputOutputCount=q.ga)(i,c,f),a._OrtGetInputName=(i,c)=>(a._OrtGetInputName=q.ha)(i,c),a._OrtGetOutputName=(i,c)=>(a._OrtGetOutputName=q.ia)(i,c),a._OrtFree=i=>(a._OrtFree=q.ja)(i),a._OrtCreateTensor=(i,c,f,$,T,D)=>(a._OrtCreateTensor=q.ka)(i,c,f,$,T,D),a._OrtGetTensorData=(i,c,f,$,T)=>(a._OrtGetTensorData=q.la)(i,c,f,$,T),a._OrtReleaseTensor=i=>(a._OrtReleaseTensor=q.ma)(i),a._OrtCreateRunOptions=(i,c,f,$)=>(a._OrtCreateRunOptions=q.na)(i,c,f,$),a._OrtAddRunConfigEntry=(i,c,f)=>(a._OrtAddRunConfigEntry=q.oa)(i,c,f),a._OrtReleaseRunOptions=i=>(a._OrtReleaseRunOptions=q.pa)(i),a._OrtCreateBinding=i=>(a._OrtCreateBinding=q.qa)(i),a._OrtBindInput=(i,c,f)=>(a._OrtBindInput=q.ra)(i,c,f),a._OrtBindOutput=(i,c,f,$)=>(a._OrtBindOutput=q.sa)(i,c,f,$),a._OrtClearBoundOutputs=i=>(a._OrtClearBoundOutputs=q.ta)(i),a._OrtReleaseBinding=i=>(a._OrtReleaseBinding=q.ua)(i),a._OrtRunWithBinding=(i,c,f,$,T)=>(a._OrtRunWithBinding=q.va)(i,c,f,$,T),a._OrtRun=(i,c,f,$,T,D,N,oe)=>(a._OrtRun=q.wa)(i,c,f,$,T,D,N,oe),a._OrtEndProfiling=i=>(a._OrtEndProfiling=q.xa)(i),a._JsepOutput=(i,c,f)=>(a._JsepOutput=q.ya)(i,c,f),a._JsepGetNodeName=i=>(a._JsepGetNodeName=q.za)(i);var Ar=a._pthread_self=()=>(Ar=a._pthread_self=q.Aa)(),nn=a._malloc=i=>(nn=a._malloc=q.Ba)(i),Jn=a._free=i=>(Jn=a._free=q.Ca)(i);a.__emscripten_tls_init=()=>(a.__emscripten_tls_init=q.Da)();var eo=a.__emscripten_thread_init=(i,c,f,$,T,D)=>(eo=a.__emscripten_thread_init=q.Fa)(i,c,f,$,T,D);a.__emscripten_thread_crashed=()=>(a.__emscripten_thread_crashed=q.Ga)();var to=(i,c,f,$)=>(to=q.Ha)(i,c,f,$),on=i=>(on=q.Ia)(i),an=a.__emscripten_thread_exit=i=>(an=a.__emscripten_thread_exit=q.Ja)(i),ro=a.__emscripten_check_mailbox=()=>(ro=a.__emscripten_check_mailbox=q.Ka)(),no=i=>(no=q.La)(i),oo=(i,c)=>(oo=q.Ma)(i,c),sn=()=>(sn=q.Na)(),_r=i=>(_r=q.Oa)(i),un=i=>(un=q.Pa)(i),ao=a.dynCall_ii=(i,c)=>(ao=a.dynCall_ii=q.Ra)(i,c),io=i=>(io=q.Sa)(i),so=()=>(so=q.Ta)(),uo=i=>(uo=q.Ua)(i),lo=()=>(lo=q.Va)();a.___start_em_js=1440345,a.___stop_em_js=1440506;function Pu(i){i=Object.assign({},i);var c=$=>()=>$()>>>0,f=$=>T=>$(T)>>>0;return i.__errno_location=c(i.__errno_location),i.pthread_self=c(i.pthread_self),i.malloc=f(i.malloc),i.stackSave=c(i.stackSave),i.stackAlloc=f(i.stackAlloc),i}a.keepRuntimeAlive=nt,a.wasmMemory=ve,a.stackAlloc=un,a.stackSave=sn,a.stackRestore=_r,a.UTF8ToString=Ue,a.stringToUTF8=wr,a.lengthBytesUTF8=Ct,a.ExitStatus=gt,a.PThread=se;var Tr;St=function i(){Tr||co(),Tr||(St=i)};function co(){function i(){if(!Tr&&(Tr=!0,a.calledRun=!0,!Ie)&&(A||ft(Re),p(a),a.onRuntimeInitialized&&a.onRuntimeInitialized(),!A)){if(a.postRun)for(typeof a.postRun=="function"&&(a.postRun=[a.postRun]);a.postRun.length;){var c=a.postRun.shift();ze.unshift(c)}ft(ze)}}if(!(0<Ke))if(A)p(a),A||ft(Re),startWorker(a);else{if(a.preRun)for(typeof a.preRun=="function"&&(a.preRun=[a.preRun]);a.preRun.length;)je.unshift(a.preRun.shift());ft(je),0<Ke||(a.setStatus?(a.setStatus("Running..."),setTimeout(function(){setTimeout(function(){a.setStatus("")},1),i()},1)):i())}}if(a.preInit)for(typeof a.preInit=="function"&&(a.preInit=[a.preInit]);0<a.preInit.length;)a.preInit.pop()();return co(),t.ready}})();typeof $o=="object"&&typeof hn=="object"?hn.exports=vo:typeof define=="function"&&define.amd&&define([],()=>vo)});var xo=rr((Bc,Nu)=>{Nu.exports=\'"use strict";var Module={},ENVIRONMENT_IS_NODE=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string";if(ENVIRONMENT_IS_NODE){var nodeWorkerThreads=require("worker_threads"),parentPort=nodeWorkerThreads.parentPort;parentPort.on("message",e=>onmessage({data:e}));var fs=require("fs");Object.assign(global,{self:global,require,Module,location:{href:__filename},Worker:nodeWorkerThreads.Worker,importScripts:e=>(0,eval)(fs.readFileSync(e,"utf8")+"//# sourceURL="+e),postMessage:e=>parentPort.postMessage(e),performance:global.performance||{now:Date.now}})}var initializedJS=!1;function threadPrintErr(){var e=Array.prototype.slice.call(arguments).join(" ");if(ENVIRONMENT_IS_NODE){fs.writeSync(2,e+`\\n`);return}console.error(e)}function threadAlert(){var e=Array.prototype.slice.call(arguments).join(" ");postMessage({cmd:"alert",text:e,threadId:Module._pthread_self()})}var err=threadPrintErr;self.alert=threadAlert,Module.instantiateWasm=(e,t)=>{var a=Module.wasmModule;Module.wasmModule=null;var r=new WebAssembly.Instance(a,e);return t(r)},self.onunhandledrejection=e=>{throw e.reason??e};function handleMessage(e){try{if(e.data.cmd==="load"){let a=[];self.onmessage=r=>a.push(r),self.startWorker=r=>{Module=r,postMessage({cmd:"loaded"});for(let s of a)handleMessage(s);self.onmessage=handleMessage},Module.wasmModule=e.data.wasmModule;for(const r of e.data.handlers)Module[r]=(...s)=>{postMessage({cmd:"callHandler",handler:r,args:s})};if(Module.wasmMemory=e.data.wasmMemory,Module.buffer=Module.wasmMemory.buffer,Module.ENVIRONMENT_IS_PTHREAD=!0,typeof e.data.urlOrBlob=="string")importScripts(e.data.urlOrBlob);else{var t=URL.createObjectURL(e.data.urlOrBlob);importScripts(t),URL.revokeObjectURL(t)}ortWasmThreaded(Module)}else if(e.data.cmd==="run"){Module.__emscripten_thread_init(e.data.pthread_ptr,0,0,1),Module.__emscripten_thread_mailbox_await(e.data.pthread_ptr),Module.establishStackSpace(),Module.PThread.receiveObjectTransfer(e.data),Module.PThread.threadInitTLS(),initializedJS||(initializedJS=!0);try{Module.invokeEntryPoint(e.data.start_routine,e.data.arg)}catch(a){if(a!="unwind")throw a}}else e.data.cmd==="cancel"?Module._pthread_self()&&Module.__emscripten_thread_exit(-1):e.data.target==="setimmediate"||(e.data.cmd==="checkMailbox"?initializedJS&&Module.checkMailbox():e.data.cmd&&(err("worker.js received unknown command "+e.data.cmd),err(e.data)))}catch(a){throw Module.__emscripten_thread_crashed&&Module.__emscripten_thread_crashed(),a}}self.onmessage=handleMessage;\\n\'});var bn,or,ar,kr,ir,Eo,wn,Ve=F(()=>{"use strict";bn=e=>{switch(e){case"int8":return 3;case"uint8":return 2;case"bool":return 9;case"int16":return 5;case"uint16":return 4;case"int32":return 6;case"uint32":return 12;case"float16":return 10;case"float32":return 1;case"float64":return 11;case"string":return 8;case"int64":return 7;case"uint64":return 13;default:throw new Error(`unsupported data type: ${e}`)}},or=e=>{switch(e){case 3:return"int8";case 2:return"uint8";case 9:return"bool";case 5:return"int16";case 4:return"uint16";case 6:return"int32";case 12:return"uint32";case 10:return"float16";case 1:return"float32";case 11:return"float64";case 8:return"string";case 7:return"int64";case 13:return"uint64";default:throw new Error(`unsupported data type: ${e}`)}},ar=e=>[void 0,4,1,1,2,2,4,8,void 0,1,2,8,4,8,void 0,void 0,void 0][e],kr=e=>{switch(e){case"float16":return Uint16Array;case"float32":return Float32Array;case"uint8":return Uint8Array;case"int8":return Int8Array;case"uint16":return Uint16Array;case"int16":return Int16Array;case"int32":return Int32Array;case"bool":return Uint8Array;case"float64":return Float64Array;case"uint32":return Uint32Array;case"int64":return BigInt64Array;case"uint64":return BigUint64Array;default:throw new Error(`unsupported type: ${e}`)}},ir=e=>{switch(e){case"verbose":return 0;case"info":return 1;case"warning":return 2;case"error":return 3;case"fatal":return 4;default:throw new Error(`unsupported logging level: ${e}`)}},Eo=e=>e==="float32"||e==="int32"||e==="int64"||e==="bool"||e==="float16"||e==="uint32",wn=e=>{switch(e){case"none":return 0;case"cpu":return 1;case"cpu-pinned":return 2;case"texture":return 3;case"gpu-buffer":return 4;default:throw new Error(`unsupported data location: ${e}`)}}});var Yu,Zu,Oo,ko,Po,Xu,Pe,wt=F(()=>{"use strict";Ve();Yu=["V","I","W","E","F"],Zu=(e,t)=>{console.log(`[${Yu[e]},${new Date().toISOString()}]${t}`)},Po=(e,t)=>{Oo=e,ko=t},Xu=(e,t)=>{let r=ir(e),o=ir(Oo);r>=o&&Zu(r,typeof t=="function"?t():t)},Pe=(...e)=>{ko&&Xu(...e)}});var Ro,Bo=F(()=>{"use strict";Ve();Ro=(e,t)=>new(kr(t))(e)});var Pr=F(()=>{"use strict"});var Rr,Qu,Mo,$n,vn,zo,Vo=F(()=>{"use strict";wt();Pr();Rr=e=>Math.ceil(e/16)*16,Qu=1,Mo=()=>Qu++,$n=async(e,t,r,o)=>{let n=Rr(r),s=e.device.createBuffer({size:n,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ});try{let u=e.getCommandEncoder();e.endComputePass(),u.copyBufferToBuffer(t,0,s,0,n),e.flush(),await s.mapAsync(GPUMapMode.READ);let d=s.getMappedRange();if(o){let a=o();return a.set(new Uint8Array(d,0,r)),a}else return new Uint8Array(d.slice(0,r))}finally{s.destroy()}},vn=class{constructor(t){this.backend=t;this.storageCache=new Map,this.freeBuffers=new Map,this.freeUniformBuffers=new Map,this.buffersForUploadingPending=[],this.buffersPending=[],this.externalBuffers=new Map}upload(t,r){let o=r.buffer,n=r.byteOffset,s=r.byteLength,u=Rr(s),d=this.storageCache.get(t);if(!d)throw new Error("gpu data for uploading does not exist");if(d.originalSize!==s)throw new Error(`inconsistent data size. gpu data size=${d.originalSize}, data size=${s}`);let a=this.backend.device.createBuffer({mappedAtCreation:!0,size:u,usage:GPUBufferUsage.MAP_WRITE|GPUBufferUsage.COPY_SRC}),p=a.getMappedRange();new Uint8Array(p).set(new Uint8Array(o,n,s)),a.unmap();let h=this.backend.getCommandEncoder();this.backend.endComputePass(),h.copyBufferToBuffer(a,0,d.gpuData.buffer,0,u),Pe("verbose",()=>`[WebGPU] GpuDataManager.upload(id=${t})`),this.buffersForUploadingPending.push(a)}memcpy(t,r){let o=this.storageCache.get(t);if(!o)throw new Error("source gpu data for memcpy does not exist");let n=this.storageCache.get(r);if(!n)throw new Error("destination gpu data for memcpy does not exist");if(o.originalSize!==n.originalSize)throw new Error("inconsistent source and destination gpu data size");let s=Rr(o.originalSize),u=this.backend.getCommandEncoder();this.backend.endComputePass(),u.copyBufferToBuffer(o.gpuData.buffer,0,n.gpuData.buffer,0,s)}registerExternalBuffer(t,r,o){let n;if(o){if(n=this.externalBuffers.get(o),n===void 0)throw new Error("previous buffer is not registered");if(t===o)return Pe("verbose",()=>`[WebGPU] GpuDataManager.registerExternalBuffer(size=${r}) => id=${n}, buffer is the same, skip.`),n;this.externalBuffers.delete(o)}else n=Mo();return this.storageCache.set(n,{gpuData:{id:n,type:0,buffer:t},originalSize:r}),this.externalBuffers.set(t,n),Pe("verbose",()=>`[WebGPU] GpuDataManager.registerExternalBuffer(size=${r}) => id=${n}, registered.`),n}unregisterExternalBuffer(t){let r=this.externalBuffers.get(t);r!==void 0&&(this.storageCache.delete(r),this.externalBuffers.delete(t),Pe("verbose",()=>`[WebGPU] GpuDataManager.unregisterExternalBuffer() => id=${r}`))}create(t,r=GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST){let o=Rr(t),n,s=(r&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE,u=(r&GPUBufferUsage.UNIFORM)===GPUBufferUsage.UNIFORM;if(s||u){let a=s?this.freeBuffers:this.freeUniformBuffers,p=a.get(o);p||(p=[],a.set(o,p)),p.length>0?n=p.pop():n=this.backend.device.createBuffer({size:o,usage:r})}else n=this.backend.device.createBuffer({size:o,usage:r});let d={id:Mo(),type:0,buffer:n};return this.storageCache.set(d.id,{gpuData:d,originalSize:t}),Pe("verbose",()=>`[WebGPU] GpuDataManager.create(size=${t}) => id=${d.id}`),d}get(t){return this.storageCache.get(t)?.gpuData}release(t){let r=this.storageCache.get(t);if(!r)throw new Error("releasing data does not exist");return Pe("verbose",()=>`[WebGPU] GpuDataManager.release(id=${t}), gpuDataId=${r.gpuData.id}`),this.storageCache.delete(t),this.buffersPending.push(r.gpuData.buffer),r.originalSize}async download(t,r){let o=this.storageCache.get(t);if(!o)throw new Error("data does not exist");await $n(this.backend,o.gpuData.buffer,o.originalSize,r)}refreshPendingBuffers(){for(let t of this.buffersForUploadingPending)t.destroy();this.buffersForUploadingPending=[];for(let t of this.buffersPending)(t.usage&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE?this.freeBuffers.get(t.size).push(t):(t.usage&GPUBufferUsage.UNIFORM)===GPUBufferUsage.UNIFORM?this.freeUniformBuffers.get(t.size).push(t):t.destroy();this.buffersPending=[]}dispose(){this.freeBuffers.forEach(t=>{t.forEach(r=>{r.destroy()})}),this.freeUniformBuffers.forEach(t=>{t.forEach(r=>{r.destroy()})}),this.storageCache.forEach(t=>{t.gpuData.buffer.destroy()}),this.storageCache=new Map,this.freeBuffers=new Map,this.freeUniformBuffers=new Map}},zo=(...e)=>new vn(...e)});var Sn,J,Oe=F(()=>{"use strict";Sn=class{constructor(t){Object.assign(this,t)}get cacheKey(){return this.key||(this.key=Object.getOwnPropertyNames(this).sort().map(t=>`${this[t]}`).join(";")),this.key}},J=e=>new Sn(e)});var xn,it,W,Tt,Br,Mr,Dr,be=F(()=>{"use strict";xn=class{static calcMatMulShape(t,r){return t[1]!==r[0]?void 0:[t[0],r[1]]}},it=class{static calcShape(t,r,o=!1){let n=t.length,s=r.length;if(n===0)return r;if(s===0)return t;let u=Math.max(t.length,r.length),d=new Array(u);if(o){if(n<2||s<2)return;let a=xn.calcMatMulShape([t[n-2],t[n-1]],[r[s-2],r[s-1]]);if(a===void 0)return;[d[u-2],d[u-1]]=a}for(let a=o?3:1;a<=u;a++){let p=n-a<0?1:t[n-a],h=s-a<0?1:r[s-a];if(p!==h&&p>1&&h>1)return;d[u-a]=Math.max(p,h)}return d}static isValidBroadcast(t,r){let o=t.length,n=r.length;if(o>n)return!1;for(let s=1;s<=o;s++)if(t[o-s]!==1&&t[o-s]!==r[n-s])return!1;return!0}},W=class e{static size(t){return e.getSizeFromDimensionRange(t,0,t.length)}static sizeFromDimension(t,r){if(r<0||r>t.length)throw new Error(`invalid dimension of ${r} for sizeFromDimension as Tensor has ${t.length} dimensions.`);return e.getSizeFromDimensionRange(t,r,t.length)}static sizeToDimension(t,r){if(r<0||r>t.length)throw new Error(`invalid dimension of ${r} for sizeToDimension as Tensor has ${t.length} dimensions.`);return e.getSizeFromDimensionRange(t,0,r)}static getSizeFromDimensionRange(t,r,o){let n=1;for(let s=r;s<o;s++){if(t[s]<0)throw new Error("cannot get valid size from specified dimension range. Most likely the range contains negative values in them.");n*=t[s]}return n}static computeStrides(t){let r=t.length;if(r===0)return[];if(r===1)return[1];let o=new Array(r);o[r-1]=1,o[r-2]=t[r-1];for(let n=r-3;n>=0;--n)o[n]=o[n+1]*t[n+1];return o}static normalizeAxis(t,r){if(t<-r&&t>=r)throw new Error("unsupported axis for this operation.");return t<0?t+r:t}static normalizeAxes(t,r){return t.map(o=>this.normalizeAxis(o,r??t.length))}static sortBasedOnPerm(t,r){return r?r.map(o=>t[o]):t.slice().reverse()}static padShape(t,r){let o=t.length;return t.map((n,s)=>n+r[s]+r[s+o])}static areEqual(t,r){return t.length!==r.length?!1:t.every((o,n)=>o===r[n])}},Tt=class e{static adjustPoolAttributes(t,r,o,n,s,u){if(!t&&o.length!==r.length-2)throw new Error("length of specified kernel shapes should be 2 less than length of input dimensions");if(t)for(let d=0;d<r.length-2;d++)d>=o.length?o.push(r[d+2]):o[d]=r[d+2];for(let d=0;d<o.length;d++)if(d<n.length){if(n[d]<0)throw new Error("strides should be greater than or equal to 1")}else n.push(1);for(let d=0;d<o.length;d++)if(d<s.length){if(s[d]<0)throw new Error("dilations should be greater than or equal to 1")}else s.push(1);for(let d=0;d<o.length*2;d++)if(d<u.length){if(u[d]<0)throw new Error("pad should be greater than or equal to 1")}else u.push(0);for(let d=0;d<o.length;d++){if(o[d]<=0)throw new Error("kernel shapes need to be greater than 0");if(u[d]>=o[d]||u[d+o.length]>=o[d])throw new Error("pads should be smaller than kernel")}}static adjustPadsBasedOnAutoPad(t,r,o,n,s,u,d){if(d){if(s.length!==2*(t.length-2))throw new Error("length of pads should be twice the length of data dimensions");if(r.length!==t.length-2)throw new Error("length of strides should be the length of data dimensions");if(n.length!==t.length-2)throw new Error("length of kernel shapes should be the length of data dimensions");for(let a=0;a<t.length-2;a++)e.adjustPadAndReturnShape(t[a+(u?1:2)],r[a],o[a],n[a],s,a,a+t.length-2,d)}}static computePoolOutputShape(t,r,o,n,s,u,d){if(r.length<=0)throw new Error("input shape must be of size greater than 0");let a=[r[0],r[1]];return e.computeShapeHelper(t,r,a,o,n,s,u,d),a}static computeConvOutputShape(t,r,o,n,s,u,d){if(t.length<=0||r.length<=0)throw new Error("invalid input tensor dims or invalid filter tensor dims");let a=[t[0],r[0]];return e.computeShapeHelper(!1,t,a,o,n,s,u,d),a}static computeShapeHelper(t,r,o,n,s,u,d,a){if(t)for(let p=0;p<r.length-2;p++)o.push(1);else for(let p=0;p<r.length-2;p++)o.push(e.adjustPadAndReturnShape(r[p+2],n[p],s[p],u[p],d,p,p+r.length-2,a))}static adjustPadAndReturnShape(t,r,o,n,s,u,d,a){let p=o*(n-1)+1;if(a&&a!=="NOTSET")switch(a){case"VALID":return s[u]=0,s[d]=0,Math.floor((t-p)/r+1);case"SAME_LOWER":case"SAME_UPPER":if(o!==1)throw new Error("Dilation not supported for SAME_UPPER or SAME_LOWER");{let w=((t+r-1)/r-1)*r+n-t;return s[u]=Math.floor(a==="SAME_LOWER"?(w+1)/2:w/2),s[d]=w-s[u],Math.floor((t+w-n)/r+1)}default:throw new Error("Unsupported AutoPad type")}else return Math.floor((t+s[u]+s[d]-p)/r+1)}},Br=class{static getShapeOfGemmResult(t,r,o,n,s){if(t.length!==2||o.length!==2)throw new Error("shape need to be of size 2");let u,d,a;r?(u=t[1],d=t[0]):(u=t[0],d=t[1]);let p=-1;if(n?(a=o[0],p=1):(a=o[1],p=0),o[p]!==d)throw new Error("dimension mismatch");if(u<=0||a<=0||d<=0)throw new Error("invalid shape specified");if(s&&!it.isValidBroadcast(s,[u,a]))throw new Error("gemm: invalid bias shape for broadcast");return[u,a,d]}},Mr=-34028234663852886e22,Dr=34028234663852886e22});var Ju,Wo,_e,pe,qe,Ge,Qe,Je,In,U,j,No,Cn,Uo,An,ke,we=F(()=>{"use strict";Ve();be();Ju=64,Wo=(e,t)=>{if(t===3)throw new Error("vec3 has same alignment as vec4, use vec4 instead");switch(e){case 10:return t>1?`vec${t}<f16>`:"f16";case 1:return t>1?`vec${t}<f32>`:"f32";case 6:return t>1?`vec${t}<i32>`:"i32";case 12:return t>1?`vec${t}<u32>`:"u32";case 7:if(t>1)throw new Error("currently not supported vecX of uint64 yet");return["vec2<u32>","i32"];case 13:if(t>1)throw new Error("currently not supported vecX of uint64 yet");return["vec2<u32>","u32"];case 9:if(t!==4)throw new Error("bool must be vec4");return["u32","vec4<bool>"];default:throw new Error(`Unknown data type: ${e}`)}},_e=(e,t=1)=>{let r=Wo(e,t);return typeof r=="string"?r:r[0]},pe=e=>e.length===0?[]:[{type:"uint32",data:e},{type:"uint32",data:W.computeStrides(e)}],qe=e=>e%4===0?4:e%2===0?2:1,Ge=(e="f32",t,r="0")=>!t||t===1?`${e}(${r})`:`vec${t}<${e}>(${r})`,Qe=(e,t,r)=>e==="f32"?r:t===1?`f32(${r})`:`vec${t}f(${r})`,Je=(e,t)=>t===4?`(${e}.x + ${e}.y + ${e}.z + ${e}.w)`:t===2?`(${e}.x + ${e}.y)`:t===3?`(${e}.x + ${e}.y + ${e}.z)`:e,In=(e,t,r,o,n)=>{let s=typeof r=="number",u=s?r:r.length,d=[...new Array(u).keys()],a=u<2?"u32":u<=4?`vec${u}<u32>`:`array<u32, ${u}>`,p=Wo(t,n),h=typeof p=="string"?p:p[1],w=typeof p=="string"?p:p[0],g={indices:a,value:h,storage:w,tensor:t},v=L=>typeof L=="string"?L:`${L}u`,b={offsetToIndices:!1,indicesToOffset:!1,broadcastedIndicesToOffset:!1,set:!1,setByIndices:!1,get:!1,getByIndices:!1},S=s?"uniforms.":"",I=`${S}${e}_shape`,A=`${S}${e}_strides`,C="";for(let L=0;L<u-1;L++)C+=`\n    let dim${L} = current / ${A}[${L}];\n    let rest${L} = current % ${A}[${L}];\n    indices[${L}] = dim${L};\n    current = rest${L};\n    `;C+=`indices[${u-1}] = current;`;let R=u<2?"":`\n  fn o2i_${e}(offset: u32) -> ${g.indices} {\n    var indices: ${g.indices};\n    var current = offset;\n    ${C}\n    return indices;\n  }`,_=L=>(b.offsetToIndices=!0,u<2?L:`o2i_${e}(${L})`),B=[];if(u>=2)for(let L=u-1;L>=0;L--)B.push(`${A}[${L}] * (indices[${L}])`);let E=u<2?"":`\n  fn i2o_${e}(indices: ${g.indices}) -> u32 {\n    return ${B.join("+")};\n  }`,z=L=>(b.indicesToOffset=!0,u<2?L:`i2o_${e}(${L})`),V=(...L)=>u===0?"0u":`${g.indices}(${L.map(v).join(",")})`,K=(L,le)=>u<2?`${L}`:`${L}[${le}]`,ee=(L,le,me)=>u<2?`${L}=${me};`:`${L}[${le}]=${me};`,M={},Z=(L,le)=>{b.broadcastedIndicesToOffset=!0;let me=`${le.name}broadcastedIndicesTo${e}Offset`;if(me in M)return`${me}(${L})`;let Ne=[];for(let je=u-1;je>=0;je--){let Re=le.indicesGet("outputIndices",je+le.rank-u);Ne.push(`${K(A,je)} * (${Re} % ${K(I,je)})`)}return M[me]=`fn ${me}(outputIndices: ${le.type.indices}) -> u32 {\n             return ${Ne.length>0?Ne.join("+"):"0u"};\n           }`,`${me}(${L})`},xe=(L,le)=>(()=>{if(g.storage===g.value)return`${e}[${L}]=${le};`;if(g.storage==="vec2<u32>"&&g.value==="i32")return`${e}[${L}]=vec2<u32>(u32(${le}), select(0u, 0xFFFFFFFFu, ${le} < 0));`;if(g.storage==="vec2<u32>"&&g.value==="u32")return`${e}[${L}]=vec2<u32>(u32(${le}), 0u);`;if(g.storage==="u32"&&g.value==="vec4<bool>")return`${e}[${L}]=dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(${le}));`;throw new Error(`not supported combination of storage type ${g.storage} and value type ${g.value} yet`)})(),re=L=>(()=>{if(g.storage===g.value)return`${e}[${L}]`;if(g.storage==="vec2<u32>"&&g.value==="i32")return`i32(${e}[${L}].x)`;if(g.storage==="vec2<u32>"&&g.value==="u32")return`u32(${e}[${L}].x)`;if(g.storage==="u32"&&g.value==="vec4<bool>")return`vec4<bool>(bool(${e}[${L}] & 0xFFu), bool(${e}[${L}] & 0xFF00u), bool(${e}[${L}] & 0xFF0000u), bool(${e}[${L}] & 0xFF000000u))`;throw new Error(`not supported combination of storage type ${g.storage} and value type ${g.value} yet`)})(),ve=u<2?"":`\n  fn get_${e}ByIndices(indices: ${g.indices}) -> ${h} {\n    return ${re(`i2o_${e}(indices)`)};\n  }`,q=u<2?"":(()=>{let L=d.map(me=>`d${me}: u32`).join(", "),le=d.map(me=>`d${me}`).join(", ");return`\n  fn get_${e}(${L}) -> ${h} {\n    return get_${e}ByIndices(${V(le)});\n  }`})(),$e=(...L)=>{if(L.length!==u)throw new Error(`indices length must be ${u}`);let le=L.map(v).join(",");return u===0?re("0u"):u===1?re(le[0]):(b.get=!0,b.getByIndices=!0,b.indicesToOffset=!0,`get_${e}(${le})`)},Ie=L=>u<2?re(L):(b.getByIndices=!0,b.indicesToOffset=!0,`get_${e}ByIndices(${L})`),Ae=u<2?"":`\n  fn set_${e}ByIndices(indices: ${g.indices}, value: ${h}) {\n    ${xe(`i2o_${e}(indices)`,"value")}\n  }`,fe=u<2?"":(()=>{let L=d.map(me=>`d${me}: u32`).join(", "),le=d.map(me=>`d${me}`).join(", ");return`\n  fn set_${e}(${L}, value: ${h}) {\n    set_${e}ByIndices(${V(le)}, value);\n  }`})();return{impl:()=>{let L=[];return s||(L.push(`const ${I} = ${g.indices}(${r.join(",")});`),L.push(`const ${A} = ${g.indices}(${W.computeStrides(r).join(",")});`)),b.offsetToIndices&&L.push(R),b.indicesToOffset&&L.push(E),b.broadcastedIndicesToOffset&&Object.values(M).forEach(le=>L.push(le)),b.set&&L.push(fe),b.setByIndices&&L.push(Ae),b.get&&L.push(q),b.getByIndices&&L.push(ve),L.join(`\n`)},type:g,offsetToIndices:_,indicesToOffset:z,broadcastedIndicesToOffset:Z,indices:V,indicesGet:K,indicesSet:ee,set:(...L)=>{if(L.length!==u+1)throw new Error(`indices length must be ${u}`);let le=L[u];if(typeof le!="string")throw new Error("value must be string");let me=L.slice(0,u).map(v).join(",");return u===0?xe("0u",le):u===1?xe(me[0],le):(b.set=!0,b.setByIndices=!0,b.indicesToOffset=!0,`set_${e}(${me}, ${le})`)},setByOffset:xe,setByIndices:(L,le)=>u<2?xe(L,le):(b.setByIndices=!0,b.indicesToOffset=!0,`set_${e}ByIndices(${L}, ${le});`),get:$e,getByOffset:re,getByIndices:Ie,usage:o,name:e,strides:A,shape:I,rank:u}},U=(e,t,r,o=1)=>In(e,t,r,"input",o),j=(e,t,r,o=1)=>In(e,t,r,"output",o),No=(e,t,r,o=1)=>In(e,t,r,"internal",o),Cn=class{constructor(t){this.normalizedDispatchGroup=t;this.internalVariables=[];this.variables=[];this.uniforms=[];this.variableIndex=0}guardAgainstOutOfBoundsWorkgroupSizes(t){return`if (global_idx >= ${typeof t=="number"?`${t}u`:t}) { return; }`}mainStart(t=Ju){let r=typeof t=="number"?t:t[0],o=typeof t=="number"?1:t[1],n=typeof t=="number"?1:t[2],s=this.normalizedDispatchGroup[1]===1&&this.normalizedDispatchGroup[2]===1,u=s?`@builtin(global_invocation_id) global_id : vec3<u32>,\n    @builtin(local_invocation_id) local_id : vec3<u32>`:`@builtin(local_invocation_index) local_index : u32,\n    @builtin(workgroup_id) workgroup_id : vec3<u32>,\n    @builtin(num_workgroups) num_workgroups : vec3<u32>`,d=s?"let global_idx = global_id.x;":`let global_idx = (workgroup_id.z * num_workgroups[0] * num_workgroups[1] +\n          workgroup_id.y * num_workgroups[0] + workgroup_id.x) * ${r*o*n}u + local_index;`;return`@compute @workgroup_size(${r}, ${o}, ${n})\n  fn main(${u}) {\n    ${d}\n  `}appendVariableUniforms(t){t.rank!==0&&(t.shape.startsWith("uniforms.")&&this.uniforms.push({name:t.shape.replace("uniforms.",""),type:t.type.indices}),t.strides.startsWith("uniforms.")&&this.uniforms.push({name:t.strides.replace("uniforms.",""),type:t.type.indices}))}declareVariable(t,r){if(t.usage==="internal")throw new Error("cannot use internal variable with declareVariable(). use registerInternalVariables() instead.");this.variables.push(t),this.appendVariableUniforms(t);let o=t.usage==="input"?"read":"read_write",n=t.type.storage;return`@group(0) @binding(${r}) var<storage, ${o}> ${t.name}: array<${n}>;`}declareVariables(...t){return t.map(r=>this.declareVariable(r,this.variableIndex++)).join(`\n`)}registerInternalVariable(t){if(t.usage!=="internal")throw new Error("cannot use input or output variable with registerInternalVariable(). use declareVariables() instead.");this.internalVariables.push(t),this.appendVariableUniforms(t)}registerInternalVariables(...t){return t.forEach(r=>this.registerInternalVariable(r)),this}registerUniform(t,r){return this.uniforms.push({name:t,type:r}),this}registerUniforms(t){return this.uniforms=this.uniforms.concat(t),this}uniformDeclaration(){if(this.uniforms.length===0)return"";let t=[];for(let{name:r,type:o}of this.uniforms)t.push(`${r}:${o}`);return`\n      struct Uniforms { ${t.join(", ")} };\n      @group(0) @binding(${this.variableIndex}) var<uniform> uniforms: Uniforms;`}get additionalImplementations(){return this.uniformDeclaration()+this.variables.map(t=>t.impl()).join(`\n`)+this.internalVariables.map(t=>t.impl()).join(`\n`)}},Uo=e=>new Cn(e),An=(e,t)=>{let r=e.length,o=[];for(let n=0;n<r;n++){let s=r-1-n,u=e[s]||1;(t[t.length-1-n]||1)>1&&u===1&&o.unshift(s)}return o},ke=e=>e<=4});var el,Ho,tl,rl,et,Go,Lo,Vt=F(()=>{"use strict";be();Oe();we();el=e=>{if(!e||e.length!==1)throw new Error("Transpose requires 1 input.")},Ho=(e,t)=>t&&t.length!==e?[...new Array(e).keys()].reverse():t,tl=(e,t)=>W.sortBasedOnPerm(e,Ho(e.length,t)),rl=(e,t,r,o)=>{let n=[];n.push(`fn perm(i: ${o.type.indices}) -> ${r.type.indices} {\n    var a: ${r.type.indices};`);for(let s=0;s<t;++s)n.push(r.indicesSet("a",e[s],`i[${s}]`));return n.push("return a;}"),n.join(`\n`)},et=(e,t)=>{let r=e.dataType,o=e.dims.length,n=Ho(o,t),s=ke(o),u=tl(e.dims,n),d=s?u.length:u,a=s?o:e.dims,p=j("output",r,d),h=U("a",r,a),w=g=>`\n  ${g.registerUniform("output_size","u32").declareVariables(h,p)}\n\n  ${rl(n,o,h,p)}\n\n  ${g.mainStart()}\n    ${g.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n\n    let indices = ${p.offsetToIndices("global_idx")};\n    let aIndices = perm(indices);\n\n    ${p.setByOffset("global_idx",h.getByIndices("aIndices"))}\n  }`;return{name:"Transpose",shaderCache:{hint:`${t}`,inputDependencies:s?["rank"]:["dims"]},getRunData:g=>{let v=W.size(u);return{outputs:[{dims:u,dataType:g[0].dataType}],dispatchGroup:{x:Math.ceil(v/64)},programUniforms:s?[{type:"uint32",data:v},...pe(g[0].dims),...pe(u)]:[{type:"uint32",data:v}]}},getShaderSource:w}},Go=(e,t)=>{el(e.inputs),e.compute(et(e.inputs[0],t.perm))},Lo=e=>J({perm:e.perm})});var nl,ol,al,il,sl,ul,ll,dl,cl,pl,st,Fo,jo,qo,Ko,Yo,Zo,Xo,Qo,Jo,ea,ta=F(()=>{"use strict";be();we();zr();Vt();nl={max:"select(bestValue, candidate, candidate > bestValue)",min:"select(bestValue, candidate, candidate < bestValue)",mean:"bestValue + candidate",sum:"bestValue + candidate",prod:"bestValue * candidate",sumSquare:"bestValue + candidate * candidate",logSumExp:"bestValue + exp(candidate)",l1:"bestValue + abs(candidate)",l2:"bestValue + candidate * candidate",logSum:"bestValue + candidate"},ol={max:"select(bestValue, candidate, candidate > bestValue)",min:"select(bestValue, candidate, candidate < bestValue)",mean:"bestValue + candidate",sum:"bestValue + candidate",prod:"bestValue * candidate",sumSquare:"bestValue + candidate",logSumExp:"bestValue + candidate",l1:"bestValue + candidate",l2:"bestValue + candidate",logSum:"bestValue + candidate"},al={max:"_A[offset]",min:"_A[offset]",mean:"0",sum:"0",prod:"1",sumSquare:"0",logSumExp:"0",l1:"0",l2:"0",logSum:"0"},il={max:"bestValue",min:"bestValue",sum:"bestValue",prod:"bestValue",sumSquare:"bestValue",logSumExp:"log(bestValue)",l1:"bestValue",l2:"sqrt(bestValue)",logSum:"log(bestValue)"},sl=(e,t)=>{let r=[];for(let o=t-e;o<t;++o)r.push(o);return r},ul=(e,t)=>{let r=[],o=e.length;for(let s=0;s<o;s++)t.indexOf(s)===-1&&r.push(e[s]);let n=t.map(s=>e[s]);return[r,n]},ll=(e,t)=>{let r=e.length+t.length,o=[],n=0;for(let s=0;s<r;s++)t.indexOf(s)===-1?o.push(e[n++]):o.push(1);return o},dl=(e,t)=>{for(let r=0;r<e.length;++r)if(e[e.length-r-1]!==t-1-r)return!1;return!0},cl=(e,t)=>{let r=[];if(!dl(e,t)){for(let o=0;o<t;++o)e.indexOf(o)===-1&&r.push(o);e.forEach(o=>r.push(o))}return r},pl=(e,t,r,o,n,s,u)=>{let d=r[0].dims,a=W.size(s),p=W.size(u),h=U("_A",r[0].dataType,d),w=j("output",n,s),g=32,v=`\n          var<workgroup> aBestValues : array<${w.type.storage}, ${g}>;\n       `;return{name:e,shaderCache:t,getShaderSource:S=>`\n        ${S.registerUniform("reduceSize","u32").declareVariables(h,w)}\n        ${v}\n        fn DIV_CEIL(a : u32, b : u32) -> u32 {\n          return ((a - 1u) / b + 1u);\n         }\n         ${S.mainStart(g)}\n          let local_idx = local_id.x;\n\n          let outputIndex = global_idx / ${g};\n          let offset = outputIndex * uniforms.reduceSize;\n\n          var bestValue = ${w.type.storage}(${al[o]});\n          let Length = uniforms.reduceSize;\n          for (var k = local_idx; k < Length; k = k + ${g}) {\n           let candidate = ${w.type.storage}(${h.getByOffset("offset + k")});\n           bestValue = ${nl[o]};\n          }\n          aBestValues[local_idx] = bestValue;\n          workgroupBarrier();\n\n         var reduceSize = min(Length, ${g}u);\n         for (var currentSize = reduceSize / 2u; reduceSize > 1u;\n             currentSize = reduceSize / 2u) {\n           let interval = DIV_CEIL(reduceSize, 2u);\n           if (local_idx < currentSize) {\n            let candidate = aBestValues[local_idx + interval];\n            bestValue = ${ol[o]};\n            aBestValues[local_idx] = bestValue;\n           }\n           reduceSize = interval;\n           workgroupBarrier();\n         }\n\n         if (local_idx == 0u) {\n          ${w.setByOffset("outputIndex",`${o==="mean"?`bestValue / ${w.type.storage}(uniforms.reduceSize)`:`${il[o]}`}`)};\n         }\n        }`,getRunData:()=>({outputs:[{dims:s,dataType:n}],dispatchGroup:{x:a},programUniforms:[{type:"uint32",data:p}]})}},st=(e,t,r,o)=>{let n=e.inputs.length===1?r:_n(e.inputs,r),s=n.axes;s.length===0&&!n.noopWithEmptyAxes&&(s=e.inputs[0].dims.map((v,b)=>b));let u=W.normalizeAxes(s,e.inputs[0].dims.length),d=u,a=e.inputs[0],p=cl(d,e.inputs[0].dims.length);p.length>0&&(a=e.compute(et(e.inputs[0],p),{inputs:[0],outputs:[-1]})[0],d=sl(d.length,a.dims.length));let[h,w]=ul(a.dims,d),g=h;n.keepDims&&(g=ll(h,u)),e.compute(pl(t,{hint:n.cacheKey,inputDependencies:["type"]},[a],o,e.inputs[0].dataType,g,w),{inputs:[a]})},Fo=(e,t)=>{st(e,"ReduceMeanShared",t,"mean")},jo=(e,t)=>{st(e,"ReduceL1Shared",t,"l1")},qo=(e,t)=>{st(e,"ReduceL2Shared",t,"l2")},Ko=(e,t)=>{st(e,"ReduceLogSumExpShared",t,"logSumExp")},Yo=(e,t)=>{st(e,"ReduceMaxShared",t,"max")},Zo=(e,t)=>{st(e,"ReduceMinShared",t,"min")},Xo=(e,t)=>{st(e,"ReduceProdShared",t,"prod")},Qo=(e,t)=>{st(e,"ReduceSumShared",t,"sum")},Jo=(e,t)=>{st(e,"ReduceSumSquareShared",t,"sumSquare")},ea=(e,t)=>{st(e,"ReduceLogSumShared",t,"logSum")}});var ut,ml,Vr,_n,lt,fl,hl,gl,yl,bl,wl,vl,$l,Sl,xl,dt,ra,na,oa,aa,ia,sa,ua,la,da,ca,tt,zr=F(()=>{"use strict";be();Oe();we();ta();ut=e=>{if(!e||e.length===0||e.length>2)throw new Error("Reduce op requires 1 or 2 inputs.");if(e.length===2&&e[1].dims.length!==1)throw new Error("Invalid axes input dims.")},ml=e=>["","",`var value = ${e.getByOffset("inputOffset")};`,""],Vr=(e,t,r,o,n,s,u=!1,d=!1)=>{let a=[],p=r[0].dims,h=W.normalizeAxes(n,r[0].dims.length),w=!d&&h.length===0;p.forEach((z,V)=>{w||h.indexOf(V)>=0?u&&a.push(1):a.push(z)});let g=[],v=U("_A",r[0].dataType,p),b=j("output",s,a),S=o(v,b,h),I=`inputOffset = ${v.indicesToOffset("inputIndices")};`,A=`let ${I};`,C=`var ${I};`,R=S[1]===""?"":C,_=(S[1]===""?A:I)+`\n`+S[2];for(let z=0,V=0;z<r[0].dims.length;z++)w||h.indexOf(z)>=0?(u&&V++,_=`for(var j${z}: u32 = 0; j${z} < ${r[0].dims[z]}; j${z}++) {\n                ${S[2].includes("lastIndex")?`let lastIndex = j${z};`:""}\n                ${v.indicesSet("inputIndices",z,`j${z}`)}\n                ${_}\n              }`):(g.push(`${v.indicesSet("inputIndices",z,b.indicesGet("outputIndices",V))};`),V++);let B=W.size(a);return{name:e,shaderCache:t,getShaderSource:z=>`\n        ${z.declareVariables(v,b)}\n\n        ${z.mainStart()}\n          ${z.guardAgainstOutOfBoundsWorkgroupSizes(B)}\n          var inputIndices: ${v.type.indices};\n          let outputIndices = ${b.offsetToIndices("global_idx")};\n\n          ${g.join(`\n`)}\n          ${S[0]}       // init ops for reduce max/min\n          ${R}\n          ${S[1]}\n          ${_}\n          ${S[3]}\n          ${S.length===4?b.setByOffset("global_idx","value"):S.slice(4).join(`\n`)}\n        }`,getRunData:()=>({outputs:[{dims:a,dataType:s}],dispatchGroup:{x:Math.ceil(B/64)}})}},_n=(e,t)=>{let r=[];return e[1].dims[0]>0&&e[1].getBigInt64Array().forEach(o=>r.push(Number(o))),J({axes:r,keepDims:t.keepDims,noopWithEmptyAxes:t.noopWithEmptyAxes})},lt=(e,t,r,o)=>{let n=e.inputs,s=n.length===1?r:_n(n,r);e.compute(Vr(t,{hint:s.cacheKey},[n[0]],s.noopWithEmptyAxes&&s.axes.length===0?ml:o,s.axes,n[0].dataType,s.keepDims,s.noopWithEmptyAxes),{inputs:[0]})},fl=(e,t)=>{ut(e.inputs),lt(e,"ReduceLogSum",t,(o,n)=>[`var value = ${n.type.storage}(0);`,"",`value += ${o.getByOffset("inputOffset")};`,"value = log(value);"])},hl=(e,t)=>{ut(e.inputs),lt(e,"ReduceL1",t,(o,n)=>[`var value = ${n.type.storage}(0);`,"",`value += abs(${o.getByOffset("inputOffset")});`,""])},gl=(e,t)=>{ut(e.inputs),lt(e,"ReduceL2",t,(o,n)=>[`var t = ${n.type.value}(0); var value = ${n.type.value}(0);`,"",`t = ${o.getByOffset("inputOffset")}; value += (t * t);`,"value = sqrt(value);"])},yl=(e,t)=>{ut(e.inputs),lt(e,"ReduceLogSumExp",t,(o,n)=>[`var value = ${n.type.storage}(0);`,"",`value += exp(${o.getByOffset("inputOffset")});`,"value = log(value);"])},bl=(e,t)=>{ut(e.inputs),lt(e,"ReduceMax",t,(o,n,s)=>{let u=[];for(let d=0;d<o.rank;d++)(s.indexOf(d)>=0||s.length===0)&&u.push(o.indicesSet("inputIndices",d,0));return[`${u.join(`\n`)}`,`var value = ${o.getByOffset("inputOffset")};`,`value = max(value, ${o.getByOffset("inputOffset")});`,""]})},wl=(e,t)=>{ut(e.inputs),lt(e,"ReduceMean",t,(o,n,s)=>{let u=1;for(let d=0;d<o.rank;d++)(s.indexOf(d)>=0||s.length===0)&&(u*=e.inputs[0].dims[d]);return["var sum = f32(0);","",`sum += f32(${o.getByOffset("inputOffset")});`,`let value = ${n.type.value}(sum / ${u});`]})},vl=(e,t)=>{ut(e.inputs),lt(e,"ReduceMin",t,(o,n,s)=>{let u=[];for(let d=0;d<o.rank;d++)(s.indexOf(d)>=0||s.length===0)&&u.push(`inputIndices[${d}] = 0;`);return[`${u.join(`\n`)}`,`var value = ${o.getByOffset("inputOffset")};`,`value = min(value, ${o.getByOffset("inputOffset")});`,""]})},$l=(e,t)=>{ut(e.inputs),lt(e,"ReduceProd",t,(o,n)=>[`var value = ${n.type.storage}(1);`,"",`value *= ${o.getByOffset("inputOffset")};`,""])},Sl=(e,t)=>{ut(e.inputs),lt(e,"ReduceSum",t,(o,n)=>[`var value = ${n.type.storage}(0);`,"",`value += ${o.getByOffset("inputOffset")};`,""])},xl=(e,t)=>{ut(e.inputs),lt(e,"ReduceSumSquare",t,(o,n)=>[`var t = ${n.type.value}(0); var value = ${n.type.value}(0);`,"",`t = ${o.getByOffset("inputOffset")}; value += t * t;`,""])},dt=(e,t,r)=>{if(t.length===0)return!!r;let o=1,n=1;for(let s=0;s<t.length;s++)t.indexOf(s)===-1?o*=e[s]:n*=e[s];return n<32&&o>1024},ra=(e,t)=>{dt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?wl(e,t):Fo(e,t)},na=(e,t)=>{dt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?hl(e,t):jo(e,t)},oa=(e,t)=>{dt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?gl(e,t):qo(e,t)},aa=(e,t)=>{dt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?yl(e,t):Ko(e,t)},ia=(e,t)=>{dt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?bl(e,t):Yo(e,t)},sa=(e,t)=>{dt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?vl(e,t):Zo(e,t)},ua=(e,t)=>{dt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?$l(e,t):Xo(e,t)},la=(e,t)=>{dt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Sl(e,t):Qo(e,t)},da=(e,t)=>{dt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?xl(e,t):Jo(e,t)},ca=(e,t)=>{dt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?fl(e,t):ea(e,t)},tt=e=>J(e)});var pa,ma,fa,Tn,ha=F(()=>{"use strict";Ve();Oe();zr();pa=e=>{if(!e||e.length===0||e.length>2)throw new Error("ArgMinMaxOp op requires 1 or 2 inputs.");if(e[0].dataType!==1)throw new Error("Invalid input type.")},ma=(e,t)=>{pa(e.inputs);let r=(o,n,s)=>{let u=[];for(let d=0;d<o.rank;d++)(s.indexOf(d)>=0||s.length===0)&&u.push(`inputIndices[${d}] = 0;`);return[`${u.join(`\n`)}`,`var value = ${o.getByOffset("inputOffset")};\nvar bestIndex : i32 = 0;`,`if (${o.getByOffset("inputOffset")} ${t.selectLastIndex>0?"<=":"<"} value) {\n         value = ${o.getByOffset("inputOffset")};\n         bestIndex = i32(lastIndex);\n       }`,"",n.setByOffset("global_idx","bestIndex")]};e.compute(Vr("ArgMin",{hint:t.cacheKey},[e.inputs[0]],r,[t.axis],7,t.keepDims),{inputs:[0]})},fa=(e,t)=>{pa(e.inputs);let r=(o,n,s)=>{let u=[];for(let d=0;d<o.rank;d++)(s.indexOf(d)>=0||s.length===0)&&u.push(`inputIndices[${d}] = 0;`);return[`${u.join(`\n`)}`,`var value = ${o.getByOffset("inputOffset")};\nvar bestIndex : i32 = 0;`,`if (${o.getByOffset("inputOffset")} ${t.selectLastIndex>0?">=":">"} value) {\n         value = ${o.getByOffset("inputOffset")};\n         bestIndex = i32(lastIndex);\n       }`,"",n.setByOffset("global_idx","bestIndex")]};e.compute(Vr("argMax",{hint:t.cacheKey},[e.inputs[0]],r,[t.axis],7,t.keepDims),{inputs:[0]})},Tn=e=>J(e)});var Cl,ga,Il,Al,_l,Wr,Tl,ya,En=F(()=>{"use strict";Oe();Pr();we();Cl=(e,t)=>{let r=e[0],o=e[1],n=e[2],s=e[3],u=e[4],d=e[5];if(u&&d)throw new Error("Attention cannot have both past and relative_position_bias");if(r.dims.length!==3)throw new Error(\'Input "input" must have 3 dimensions\');let a=r.dims[0],p=r.dims[1],h=r.dims[2];if(n.dims.length!==1)throw new Error(\'Input "bias" is expected to have 1 dimensions\');if(o.dims.length!==2)throw new Error(\'Input "weights" is expected to have 2 dimensions\');if(o.dims[0]!==h)throw new Error("Input 1 dimension 0 should have same length as dimension 2 of input 0");if(n.dims[0]!==o.dims[1])throw new Error(\'Input "bias" dimension 0 should have same length as dimension 1 of input "weights"\');let w=n.dims[0]/3,g=w,v=g;if(t.qkvHiddenSizes.length>0){if(t.qkvHiddenSizes.length!==3)throw new Error("qkv_hidden_sizes attribute should have 3 elements");for(let R of t.qkvHiddenSizes)if(R%t.numHeads!==0)throw new Error("qkv_hidden_sizes should be divisible by num_heads");w=t.qkvHiddenSizes[0],g=t.qkvHiddenSizes[1],v=t.qkvHiddenSizes[2]}let b=p;if(w!==g)throw new Error("qkv_hidden_sizes first element should be same as the second");if(n.dims[0]!==w+g+v)throw new Error(\'Input "bias" dimension 0 should have same length as sum of Q/K/V hidden sizes\');let S=0;if(u){if(g!==v)throw new Error(\'Input "past" expect k_hidden_size == v_hidden_size\');if(u.dims.length!==5)throw new Error(\'Input "past" must have 5 dimensions\');if(u.dims[0]!==2)throw new Error(\'Input "past" first dimension must be 2\');if(u.dims[1]!==a)throw new Error(\'Input "past" second dimension must be batch_size\');if(u.dims[2]!==t.numHeads)throw new Error(\'Input "past" third dimension must be num_heads\');if(u.dims[4]!==g/t.numHeads)throw new Error(\'Input "past" fifth dimension must be k_hidden_size / num_heads\');t.pastPresentShareBuffer||(S=u.dims[3])}let I=b+S,A=-1,C=0;if(s)throw new Error("Mask not supported");if(u)throw new Error("past is not supported");if(d)throw new Error("relativePositionBias is not supported");return{batchSize:a,sequenceLength:p,pastSequenceLength:S,kvSequenceLength:b,totalSequenceLength:I,maxSequenceLength:A,inputHiddenSize:h,hiddenSize:w,vHiddenSize:v,headSize:Math.floor(w/t.numHeads),vHeadSize:Math.floor(v/t.numHeads),numHeads:t.numHeads,isUnidirectional:!1,pastPresentShareBuffer:!1,maskFilterValue:t.maskFilterValue,maskType:C,scale:t.scale,broadcastResPosBias:!1,passPastInKv:!1,qkvFormat:1}},ga=e=>J({...e}),Il=(e,t,r,o)=>{let n=qe(o),s=j("x",t.dataType,t.dims,n),u="threadMaxVector";n===2?u="max(threadMaxVector.x, threadMaxVector.y)":n===4&&(u="max(max(threadMaxVector.x, threadMaxVector.y), max(threadMaxVector.z, threadMaxVector.w))");let d=_e(t.dataType),a=64,p=o/n;p<a?a=1:p/8<64&&(a=Math.ceil(p/8));let h=Math.ceil(o/n/a),w=g=>`\n  const dInv: ${d} = 1 / ${o};\n  const dComp = ${o/n};\n  var<workgroup> wgMax: array<f32, ${a}>;\n  var<workgroup> wgSum: array<f32, ${a}>;\n\n  ${g.declareVariables(s)}\n  @compute @workgroup_size(${a}, 1, 1)\n  fn main(@builtin(workgroup_id) workgroup_id : vec3<u32>,\n    @builtin(local_invocation_index) local_index : u32) {\n    let localOffset = local_index * ${h};\n    let offset: u32 = workgroup_id.x * dComp + localOffset;\n\n    var threadMaxVector = ${Ge("f32",n,"-3.402823e+38f")};\n    for (var i: u32 = 0; i < ${h} && i + localOffset < dComp; i++) {\n      threadMaxVector = max(${Qe(d,n,"x[offset + i]")}, threadMaxVector);\n    }\n    wgMax[local_index] = ${u};\n    workgroupBarrier();\n\n    var maxValue = -3.402823e+38f;\n    for (var i = 0u; i < ${a}; i++) {\n      maxValue = max(wgMax[i], maxValue);\n    }\n\n    var sumVector = ${Ge("f32",n,"0")};\n    for (var i: u32 = 0; i < ${h} && i + localOffset < dComp; i++) {\n      sumVector += exp(${Qe(d,n,"x[offset + i]")} - maxValue);\n    }\n    wgSum[local_index] = ${Je("sumVector",n)};\n    workgroupBarrier();\n\n    var sum: f32 = 0;\n    for (var i = 0u; i < ${a}; i++) {\n      sum += wgSum[i];\n    }\n\n    if (sum == 0) {\n      for (var i: u32 = 0; i < ${h} && i + localOffset < dComp; i++) {\n        x[offset + i] = ${Ge(d,n,"dInv")};\n      }\n    } else {\n      for (var i: u32 = 0; i < ${h} && i + localOffset < dComp; i++) {\n        let f32input = ${Qe(d,n,"x[offset + i]")};\n        x[offset + i] = ${s.type.value}(exp(f32input - maxValue) / sum);\n      }\n    }\n  }`;e.compute({name:"AttentionProbsSoftmax",shaderCache:{hint:`${o}`},getShaderSource:w,getRunData:()=>({outputs:[],dispatchGroup:{x:r}})},{inputs:[t],outputs:[]})},Al=(e,t,r,o,n,s)=>{let u=[n.batchSize,n.numHeads,n.sequenceLength,n.kvSequenceLength+n.pastSequenceLength],d=s.scale===0?1/Math.sqrt(n.headSize):s.scale,a=_e(t.dataType),p=qe(n.headSize),h=U("q",t.dataType,t.dims,p),w=U("key",r.dataType,r.dims,p),g=j("output",t.dataType,u),v=n.headSize/p,b=n.sequenceLength,S=n.totalSequenceLength,I=v,A=12,C={x:Math.ceil(n.totalSequenceLength/A),y:Math.ceil(n.sequenceLength/A),z:n.batchSize*n.numHeads},R=[t,r],_=E=>`\n  const M: u32 = ${b}u;\n  const N: u32 = ${S}u;\n  const K: u32 = ${I}u;\n  const alpha: ${a} = ${d};\n  const beta: ${a} = 1.0;\n  const TILE_SIZE = ${A}u;\n\n  var<workgroup> tileQ: array<${h.type.storage}, ${A*A}>;\n  var<workgroup> tileK: array<${h.type.storage}, ${A*A}>;\n\n  ${E.declareVariables(h,w,g)}\n\n  @compute @workgroup_size(${A}, ${A}, 1)\n  fn main(@builtin(workgroup_id) workgroup_id : vec3<u32>,\n   @builtin(local_invocation_id) local_id : vec3<u32>, @builtin(local_invocation_index) local_index : u32) {\n   let global_idx = (workgroup_id.z * ${C.x*C.y}u +\n          workgroup_id.y * ${C.x}u + workgroup_id.x) * ${A*A}u + local_index;\n\n    // x holds the N and y holds the M\n    let headIdx = workgroup_id.z;\n    let m = workgroup_id.y * TILE_SIZE;\n    let n = workgroup_id.x * TILE_SIZE;\n    let lm = m + local_id.y;\n    let ln = n + local_id.x;\n\n    let qOffset = ${n.sequenceLength*v} * headIdx + m * K;\n    let kOffset = ${n.kvSequenceLength*v} * headIdx + n * K;\n\n    var value = ${Ge(a,p)};\n    for (var w: u32 = 0u; w < K; w += TILE_SIZE) {\n      if (m + local_id.y < M && w + local_id.x < K) {\n        tileQ[TILE_SIZE * local_id.y + local_id.x] = q[qOffset + local_id.y * K + w + local_id.x];\n      }\n      if (n + local_id.y < N && w + local_id.x < K) {\n        tileK[TILE_SIZE * local_id.y + local_id.x] = key[kOffset + local_id.y * K + w + local_id.x];\n      }\n      workgroupBarrier();\n\n      for (var k: u32 = 0u; k<TILE_SIZE && w+k < K; k++) {\n        value += tileQ[TILE_SIZE * local_id.y + k] * tileK[TILE_SIZE * local_id.x + k];\n      }\n\n      workgroupBarrier();\n    }\n\n    let headOffset = headIdx * M * N;\n    if (lm < M && ln < N) {\n      let outputIdx = headOffset + lm * N + ln;\n      output[outputIdx] = ${Je("value",p)} * alpha;\n    }\n  }`,B=e.compute({name:"AttentionProbs",shaderCache:{hint:JSON.stringify(n)},getRunData:()=>({outputs:[{dims:u,dataType:t.dataType,gpuDataType:0}],dispatchGroup:C}),getShaderSource:_},{inputs:R,outputs:[-1]})[0];return Il(e,B,n.batchSize*n.numHeads*n.sequenceLength,n.totalSequenceLength),B},_l=(e,t,r,o)=>{let n=[o.batchSize,o.sequenceLength,o.vHiddenSize],s=U("probs",t.dataType,t.dims),u=U("v",r.dataType,r.dims),d=j("output",t.dataType,n),a=_e(t.dataType),p=12,h={x:Math.ceil(o.vHeadSize/p),y:Math.ceil(o.sequenceLength/p),z:o.batchSize*o.numHeads},w=g=>`\n  const M: u32 = ${o.sequenceLength}u;\n  const N: u32 = ${o.vHeadSize}u;\n  const K: u32 = ${o.totalSequenceLength}u;\n  const numHeads: u32 = ${o.numHeads}u;\n  const TILE_SIZE = ${p}u;\n\n  var<workgroup> tileQ: array<${s.type.storage}, ${p*p}>;\n  var<workgroup> tileK: array<${s.type.storage}, ${p*p}>;\n\n  ${g.declareVariables(s,u,d)}\n\n  @compute @workgroup_size(${p}, ${p}, 1)\n  fn main(@builtin(workgroup_id) workgroup_id : vec3<u32>,\n   @builtin(local_invocation_id) local_id : vec3<u32>, @builtin(local_invocation_index) local_index : u32) {\n   let global_idx = (workgroup_id.z * ${h.x*h.y}u +\n          workgroup_id.y * ${h.x}u + workgroup_id.x) * ${p*p}u + local_index;\n\n   let headIdx = workgroup_id.z;\n   let m = workgroup_id.y * TILE_SIZE + local_id.y;\n   let n = workgroup_id.x * TILE_SIZE + local_id.x;\n\n   let offsetA = headIdx * (M * K) + m * K;\n   let offsetB = headIdx * (N * K) + n;\n\n   var value = ${a}(0);\n   for (var w: u32 = 0u; w < K; w += TILE_SIZE) {\n     if (m < M && w + local_id.x < K) {\n       tileQ[TILE_SIZE * local_id.y + local_id.x] = probs[offsetA + w + local_id.x];\n     }\n     if (n < N && w + local_id.y < K) {\n       tileK[TILE_SIZE * local_id.y + local_id.x] = v[offsetB + (w + local_id.y) * N];\n     }\n     workgroupBarrier();\n     for (var k: u32 = 0u; k<TILE_SIZE && w+k < K; k++) {\n       value += tileQ[TILE_SIZE * local_id.y + k] * tileK[TILE_SIZE * k + local_id.x];\n     }\n     workgroupBarrier();\n   }\n\n   // we need to transpose output from BNSH_v to BSND_v\n   let batchIdx = workgroup_id.z / ${o.numHeads};\n   let currentBatchHeadNumber = workgroup_id.z % ${o.numHeads};\n   let headOffset = (batchIdx * M * ${o.numHeads} + currentBatchHeadNumber) * ${o.vHeadSize};\n   if (m < M && n < N) {\n     let outputIdx = batchIdx * ${o.sequenceLength*o.vHiddenSize} + m * ${o.vHiddenSize}\n       + currentBatchHeadNumber * ${o.vHeadSize} + n;\n     output[outputIdx] = value;\n   }\n  }`;return e.compute({name:"AttentionScore",shaderCache:{hint:JSON.stringify(o)},getRunData:()=>({outputs:[{dims:n,dataType:t.dataType,gpuDataType:0}],dispatchGroup:h}),getShaderSource:w},{inputs:[t,r],outputs:[0]})[0]},Wr=(e,t,r,o,n,s,u,d,a,p,h)=>{let w=Al(e,t,r,a,p,h);_l(e,w,o,p)},Tl=(e,t)=>{let r=[t.batchSize,t.numHeads,t.sequenceLength,t.headSize],o=_e(e.inputs[0].dataType),n=t.sequenceLength,s=t.inputHiddenSize,u=t.headSize,d=12,a={x:Math.ceil(t.headSize/d),y:Math.ceil(t.sequenceLength/d),z:t.batchSize*t.numHeads},p=()=>`\n  const M: u32 = ${n}u;\n  const K: u32 = ${s}u;\n  const N: u32 = ${u}u;\n  const numHeads: u32 = ${t.numHeads};\n  const ldb = ${t.hiddenSize+t.hiddenSize+t.vHiddenSize}u;\n  const TILE_SIZE = ${d}u;\n\n  var<workgroup> tileInput: array<${o}, ${d*d}>;\n  var<workgroup> tileWeightQ: array<${o}, ${d*d}>;\n  var<workgroup> tileWeightK: array<${o}, ${d*d}>;\n  var<workgroup> tileWeightV: array<${o}, ${d*d}>;\n\n  @group(0) @binding(0) var<storage, read> input: array<${o}>;\n  @group(0) @binding(1) var<storage, read> weight: array<${o}>;\n  @group(0) @binding(2) var<storage, read> bias: array<${o}>;\n  @group(0) @binding(3) var<storage, read_write> outputQ: array<${o}>;\n  @group(0) @binding(4) var<storage, read_write> outputK: array<${o}>;\n  @group(0) @binding(5) var<storage, read_write> outputV: array<${o}>;\n\n  @compute @workgroup_size(${d}, ${d}, 1)\n  fn main(@builtin(workgroup_id) workgroup_id : vec3<u32>,\n   @builtin(local_invocation_id) local_id : vec3<u32>, @builtin(local_invocation_index) local_index : u32) {\n   let global_idx = (workgroup_id.z * ${a.x*a.y}u +\n          workgroup_id.y * ${a.x}u + workgroup_id.x) * ${d*d}u + local_index;\n\n    let batchIndex = workgroup_id.z / ${t.numHeads};\n    let headNumber = workgroup_id.z % ${t.numHeads};\n    let m = workgroup_id.y * TILE_SIZE + local_id.y;\n    let n = workgroup_id.x * TILE_SIZE + local_id.x;\n\n    let inputOffset = batchIndex * (M * K) + m * K;\n    let biasOffsetQ = headNumber * ${t.headSize};\n    let biasOffsetK = ${t.hiddenSize} + biasOffsetQ;\n    let biasOffsetV = ${t.hiddenSize} + biasOffsetK;\n\n    var valueQ = ${o}(0);\n    var valueK = ${o}(0);\n    var valueV = ${o}(0);\n    for (var w: u32 = 0u; w < K; w += TILE_SIZE) {\n      if (m < M && w + local_id.x < K) {\n        tileInput[TILE_SIZE * local_id.y + local_id.x] = input[inputOffset + w + local_id.x];\n      }\n      if (n < N && w + local_id.y < K) {\n        let offset = n + (w + local_id.y) * ldb;\n        tileWeightQ[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetQ + offset];\n        tileWeightK[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetK + offset];\n        tileWeightV[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetV + offset];\n      }\n      workgroupBarrier();\n      for (var k: u32 = 0u; k<TILE_SIZE && w+k < K; k++) {\n        let inputTileOffset = TILE_SIZE * local_id.y + k;\n        let weightTileOffset = TILE_SIZE * k + local_id.x;\n        valueQ += tileInput[inputTileOffset] * tileWeightQ[weightTileOffset];\n        valueK += tileInput[inputTileOffset] * tileWeightK[weightTileOffset];\n        valueV += tileInput[inputTileOffset] * tileWeightV[weightTileOffset];\n      }\n\n      workgroupBarrier();\n    }\n\n    let headOffset = (m * N + n) % ${t.headSize};\n    valueQ += bias[headOffset + biasOffsetQ];\n    valueK += bias[headOffset + biasOffsetK];\n    valueV += bias[headOffset + biasOffsetV];\n\n    let offset = workgroup_id.z * M * N;\n    if (m < M && n < N) {\n      let outputIdx = offset + m * N + n;\n      outputQ[outputIdx] = valueQ;\n      outputK[outputIdx] = valueK;\n      outputV[outputIdx] = valueV;\n    }\n  }`,h=[e.inputs[0],e.inputs[1],e.inputs[2]];return e.compute({name:"AttentionPrepare",shaderCache:{hint:JSON.stringify(t)},getRunData:()=>({outputs:[{dims:r,dataType:e.inputs[0].dataType,gpuDataType:0},{dims:r,dataType:e.inputs[0].dataType,gpuDataType:0},{dims:r,dataType:e.inputs[0].dataType,gpuDataType:0}],dispatchGroup:a}),getShaderSource:p},{inputs:h,outputs:[-1,-1,-1]})},ya=(e,t)=>{let r=Cl(e.inputs,t),[o,n,s]=Tl(e,r);return Wr(e,o,n,s,e.inputs[4],void 0,void 0,void 0,e.inputs[5],r,t)}});var Nr=F(()=>{});var ba=F(()=>{Nr()});var wa,va=F(()=>{wa="1.17.0"});var $a,On,Sa=F(()=>{va();$a="warning",On={wasm:{},webgl:{},webgpu:{},versions:{common:wa},set logLevel(e){if(e!==void 0){if(typeof e!="string"||["verbose","info","warning","error","fatal"].indexOf(e)===-1)throw new Error(`Unsupported logging level: ${e}`);$a=e}},get logLevel(){return $a}};Object.defineProperty(On,"logLevel",{enumerable:!0})});var Ur,xa=F(()=>{Sa();Ur=On});var Ca=F(()=>{});var Ia=F(()=>{Hr()});var _a=F(()=>{});var Ta=F(()=>{Hr()});var Hr=F(()=>{Ca();Ia();_a();Ta()});var Gr=F(()=>{Hr()});var Ea=F(()=>{Nr();Gr()});var Oa=F(()=>{Ea()});var ka=F(()=>{});var Pa=F(()=>{Nr();Gr()});var Ra=F(()=>{Pa()});var kn=F(()=>{ba();xa();Oa();Gr();ka();Ra()});var kl,Pl,Rl,Ba,Ma=F(()=>{"use strict";kn();be();Oe();we();kl=(e,t)=>{if(!e||e.length!==5)throw new Error("BatchNormalization requires 5 inputs");let r=(o,n,s)=>{let u=n.length;if(u!==o.length)throw new Error(`${s}: num dimensions != ${u}`);n.forEach((d,a)=>{if(d!==o[a])throw new Error(`${s}: dim[${a}] do not match`)})};if(e[0].dims.length>1){let o=t.format==="NHWC"?t.spatial?e[0].dims.slice(-1):e[0].dims.slice(-1).concat(e[0].dims.slice(1,e[0].dims.length-1)):e[0].dims.slice(1,t.spatial?2:void 0);r(e[1].dims,o,"Invalid input scale"),r(e[2].dims,o,"Invalid input B"),r(e[3].dims,o,"Invalid input mean"),r(e[4].dims,o,"Invalid input var")}else r(e[1].dims,[1],"Invalid input scale"),r(e[2].dims,[1],"Invalid input B"),r(e[3].dims,[1],"Invalid input mean"),r(e[4].dims,[1],"Invalid input var")},Pl=(e,t)=>{let{epsilon:r,spatial:o,format:n}=t,s=e[0].dims,u=o?qe(s[s.length-1]):1,d=n==="NHWC"&&s.length>1?u:1,a=W.size(s)/u,p=ke(s.length)&&o,h=p?s.length:s,w=U("x",e[0].dataType,e[0].dims,u),g=U("scale",e[1].dataType,e[1].dims,d),v=U("bias",e[2].dataType,e[2].dims,d),b=U("inputMean",e[3].dataType,e[3].dims,d),S=U("inputVar",e[4].dataType,e[4].dims,d),I=j("y",e[0].dataType,h,u),A=()=>{let R="";if(o)R=`let cOffset = ${s.length===1?"0u":n==="NHWC"?`outputIndices[${s.length-1}] / ${u}`:"outputIndices[1]"};`;else if(n==="NCHW")R=`\n            ${I.indicesSet("outputIndices","0","0")}\n            let cOffset = ${I.indicesToOffset("outputIndices")};`;else{R=`var cIndices = ${g.type.indices}(0);\n                       cIndices[0] = outputIndices[${s.length-1}];`;for(let _=1;_<g.rank;_++)R+=`cIndices[${_}] = outputIndices[${_}];`;R+=`let cOffset = ${g.indicesToOffset("cIndices")};`}return R},C=R=>`\n  const epsilon = ${r};\n  ${R.registerUniform("outputSize","u32").declareVariables(w,g,v,b,S,I)}\n  ${R.mainStart()}\n  ${R.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n    var outputIndices = ${I.offsetToIndices(`global_idx * ${u}`)};\n    ${A()}\n    let scale = ${g.getByOffset("cOffset")};\n    let bias = ${v.getByOffset("cOffset")};\n    let inputMean = ${b.getByOffset("cOffset")};\n    let inputVar = ${S.getByOffset("cOffset")};\n    let x = ${w.getByOffset("global_idx")};\n    let value = (x - inputMean) / sqrt(inputVar + epsilon) * scale + bias;\n    ${I.setByOffset("global_idx","value")}\n  }`;return{name:"BatchNormalization",shaderCache:{hint:`${t.epsilon}_${t.format}_${o}_${u}`,inputDependencies:p?["rank","type","type","type","type"]:void 0},getShaderSource:C,getRunData:()=>({outputs:[{dims:e[0].dims,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(a/64)},programUniforms:p?[{type:"uint32",data:a},...pe(s)]:[{type:"uint32",data:a}]})}},Rl=e=>J(e),Ba=(e,t)=>{let{inputs:r,outputCount:o}=e,n=Rl({...t,outputCount:o});if(Ur.webgpu.validateInputContent&&kl(r,n),t.trainingMode)throw new Error("BatchNormalization trainingMode is not supported yet.");e.compute(Pl(r,n))}});var Bl,Ml,Da,za=F(()=>{"use strict";be();we();Bl=e=>{if(e[0].dims.length!==3)throw new Error("input should have 3 dimensions");if(![320,640,1280].includes(e[0].dims[2]))throw new Error("number of channels should be 320, 640 or 1280");if(e[1].dims.length!==1)throw new Error("bias is expected to have 1 dimensions");if(e[0].dims[2]!==e[1].dims[0])throw new Error("last dimension of input and bias are not the same")},Ml=e=>{let t=e[0].dims,r=e[0].dims[2],o=W.size(t)/4,n=e[0].dataType,s=U("input",n,t,4),u=U("bias",n,[r],4),d=U("residual",n,t,4),a=j("output",n,t,4);return{name:"BiasAdd",getRunData:()=>({outputs:[{dims:t,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(o/64)}}),getShaderSource:h=>`\n  const channels = ${r}u / 4;\n  ${h.declareVariables(s,u,d,a)}\n\n  ${h.mainStart()}\n    ${h.guardAgainstOutOfBoundsWorkgroupSizes(o)}\n    let value = ${s.getByOffset("global_idx")}\n      + ${u.getByOffset("global_idx % channels")} + ${d.getByOffset("global_idx")};\n    ${a.setByOffset("global_idx","value")}\n  }`}},Da=e=>{Bl(e.inputs),e.compute(Ml(e.inputs))}});var Dl,Te,Va,Wa,Na,Ua,Ha,Ga,La,Fa,ja,zl,qa,Ka,Ya,Za,Lr,Xa,Fr,Qa,Ja,ei,ti,ri,ni,oi,ai,ii,si,ui,li,di,ci,pi,mi,fi,Pn=F(()=>{"use strict";Ve();be();Oe();we();Dl=(e,t,r,o,n,s)=>{let u=Math.ceil(t/4),d="";typeof n=="string"?d=`${n}(a)`:d=n("a");let a=U("inputData",r,[u],4),p=j("outputData",o,[u],4);return`\n      ${e.registerUniform("vec_size","u32").declareVariables(a,p)}\n\n  ${s??""}\n\n  ${e.mainStart()}\n    ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}\n\n    let a = ${a.getByOffset("global_idx")};\n    ${p.setByOffset("global_idx",d)}\n  }`},Te=(e,t,r,o,n,s=e.dataType)=>({name:t,shaderCache:{hint:n,inputDependencies:["type"]},getShaderSource:u=>Dl(u,W.size(e.dims),e.dataType,s,r,o),getRunData:u=>({outputs:[{dims:e.dims,dataType:s}],dispatchGroup:{x:Math.ceil(W.size(u[0].dims)/64/4)},programUniforms:[{type:"uint32",data:Math.ceil(W.size(e.dims)/4)}]})}),Va=e=>{e.compute(Te(e.inputs[0],"Abs","abs"))},Wa=e=>{e.compute(Te(e.inputs[0],"Acos","acos"))},Na=e=>{e.compute(Te(e.inputs[0],"Acosh","acosh"))},Ua=e=>{e.compute(Te(e.inputs[0],"Asin","asin"))},Ha=e=>{e.compute(Te(e.inputs[0],"Asinh","asinh"))},Ga=e=>{e.compute(Te(e.inputs[0],"Atan","atan"))},La=e=>{e.compute(Te(e.inputs[0],"Atanh","atanh"))},Fa=e=>J(e),ja=(e,t)=>{let r;switch(t.to){case 10:r="vec4<f16>";break;case 1:r="vec4<f32>";break;case 12:r="vec4<u32>";break;case 6:r="vec4<i32>";break;case 9:r="vec4<bool>";break;default:throw new RangeError(`not supported type (specified in attribute \'to\' from \'Cast\' operator): ${t.to}`)}e.compute(Te(e.inputs[0],"Cast",r,void 0,t.cacheKey,t.to))},zl=e=>{let t=e.length>=2?e[1].getFloat32Array()[0]:Mr,r=e.length>=3?e[2].getFloat32Array()[0]:Dr;return J({min:t,max:r})},qa=(e,t)=>{let r=e.inputs.length===1?t:zl(e.inputs),o=_e(e.inputs[0].dataType);e.compute(Te(e.inputs[0],"Clip",n=>`clamp(${n}, clip_min_, clip_max_)`,`\n    const clip_min_: vec4<${o}> = vec4(${o}(${r.min}));\n    const clip_max_: vec4<${o}> = vec4(${o}(${r.max}));\n`,r.cacheKey),{inputs:[0]})},Ka=e=>{e.compute(Te(e.inputs[0],"Ceil","ceil"))},Ya=e=>{e.compute(Te(e.inputs[0],"Cos","cos"))},Za=e=>{e.compute(Te(e.inputs[0],"Cosh","cosh"))},Lr=e=>J(e),Xa=(e,t)=>{e.compute(Te(e.inputs[0],"Elu",r=>`elu_vf32(${r})`,`\n  const elu_alpha_: f32 = f32(${t.alpha});\n\n  fn elu_f32(a: f32) -> f32 {\n  return select((exp(a) - 1.0) * elu_alpha_, a, a >= 0.0);\n  }\n\n  fn elu_vf32(v: vec4<f32>) -> vec4<f32> {\n  return vec4(elu_f32(v.x), elu_f32(v.y), elu_f32(v.z), elu_f32(v.w));\n  }`,t.cacheKey))},Fr=(e,t="f32")=>`\nconst r0: ${t} = 0.3275911;\nconst r1: ${t} = 0.254829592;\nconst r2: ${t} = -0.284496736;\nconst r3: ${t} = 1.421413741;\nconst r4: ${t} = -1.453152027;\nconst r5: ${t} = 1.061405429;\n\nfn erf_vf32(v: ${e}) -> ${e} {\n  let absv = abs(v);\n  let x = 1.0 / (1.0 + r0 * absv);\n  return sign(v) * (1.0 - ((((r5 * x + r4) * x + r3) * x + r2) * x + r1) * x * exp(-absv * absv));\n}`,Qa=e=>{let t=_e(e.inputs[0].dataType);e.compute(Te(e.inputs[0],"Erf",r=>`erf_vf32(${r})`,Fr(`vec4<${t}>`,t)))},Ja=e=>{e.compute(Te(e.inputs[0],"Exp","exp"))},ei=e=>{e.compute(Te(e.inputs[0],"Floor","floor"))},ti=e=>{let t=_e(e.inputs[0].dataType);e.compute(Te(e.inputs[0],"Gelu",r=>`0.5 * ${r} * (1.0 + erf_vf32(${r} * 0.7071067811865475))`,Fr(`vec4<${t}>`,t)))},ri=(e,t)=>{e.compute(Te(e.inputs[0],"LeakyRelu",r=>`select(leaky_relu_alpha_ * ${r}, ${r}, ${r} >= vec4<f32>(0.0))`,`const leaky_relu_alpha_: f32 = f32(${t.alpha});`,t.cacheKey))},ni=e=>{e.compute(Te(e.inputs[0],"Not",t=>`!${t}`))},oi=e=>{e.compute(Te(e.inputs[0],"Neg",t=>`-${t}`))},ai=e=>{e.compute(Te(e.inputs[0],"Reciprocal",t=>`1.0/${t}`))},ii=e=>{e.compute(Te(e.inputs[0],"Relu",t=>`select(vec4<f32>(0.0), ${t}, ${t} > vec4<f32>(0.0))`))},si=e=>{e.compute(Te(e.inputs[0],"Sigmoid",t=>`(1.0 / (1.0 + exp(-${t})))`))},ui=e=>{e.compute(Te(e.inputs[0],"Sin","sin"))},li=e=>{e.compute(Te(e.inputs[0],"Sinh","sinh"))},di=e=>{e.compute(Te(e.inputs[0],"Sqrt","sqrt"))},ci=e=>{e.compute(Te(e.inputs[0],"Tan","tan"))},pi=e=>{e.compute(Te(e.inputs[0],"Tanh","tanh"))},mi=(e,t)=>(e.compute(Te(e.inputs[0],"ThresholdedRelu",r=>`select(vec4<f32>(0.0), ${r}, ${r} > thresholded_relu_alpha_)`,`const thresholded_relu_alpha_: vec4<f32> = vec4<f32>(${t.alpha});`,t.cacheKey)),0),fi=e=>{e.compute(Te(e.inputs[0],"Log","log"))}});var Wl,Nl,hi,gi=F(()=>{"use strict";be();we();Pn();Wl=e=>{if(e[0].dims.length!==3)throw new Error("input should have 3 dimensions");if(![2560,5120,10240].includes(e[0].dims[2]))throw new Error("hidden state should be 2560, 5120 or 10240");if(e[1].dims.length!==1)throw new Error("bias is expected to have 1 dimensions");if(e[0].dims[2]!==e[1].dims[0])throw new Error("last dimension of input and bias are not the same")},Nl=e=>{let t=e[0].dims.slice();t[2]=t[2]/2;let r=U("input",e[0].dataType,e[0].dims,4),o=U("bias",e[0].dataType,[e[0].dims[2]],4),n=j("output",e[0].dataType,t,4),s=W.size(t)/4,u=_e(e[0].dataType);return{name:"BiasSplitGelu",getRunData:()=>({outputs:[{dims:t,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(s/64)}}),getShaderSource:a=>`\n  const M_SQRT2 = sqrt(2.0);\n  const halfChannels = ${e[0].dims[2]/4/2}u;\n\n  ${a.declareVariables(r,o,n)}\n\n  ${Fr(`vec4<${u}>`,u)}\n\n  ${a.mainStart()}\n    ${a.guardAgainstOutOfBoundsWorkgroupSizes(s)}\n    let biasIdx = global_idx % halfChannels;\n    let batchIndex = global_idx / halfChannels;\n    let inputOffset = biasIdx + batchIndex * halfChannels * 2;\n    let valueLeft = input[inputOffset] + bias[biasIdx];\n    let valueRight = input[inputOffset + halfChannels] + bias[biasIdx + halfChannels];\n    let geluRight = valueRight * 0.5 * (erf_vf32(valueRight / M_SQRT2) + 1);\n\n    ${n.setByOffset("global_idx","valueLeft * geluRight")}\n  }`}},hi=e=>{Wl(e.inputs),e.compute(Nl(e.inputs))}});var Ul,Hl,ct,yi,bi,wi,vi,$i,Si,xi,Ci,Ii,Ai,_i=F(()=>{"use strict";Ve();be();we();Ul=(e,t,r,o,n,s,u,d,a,p,h,w,g)=>{let v,b;typeof d=="string"?v=b=(E,z)=>`${d}((${E}),(${z}))`:typeof d=="function"?v=b=d:(v=d.scalar,b=d.vector);let S=w?t.length:t,I=w?r.length:r,A=w?o.length:o,C=j("outputData",h,A,4),R=U("aData",a,S,4),_=U("bData",p,I,4),B;if(n)if(s){let E=W.size(t)===1,z=W.size(r)===1,V=t.length>0&&t[t.length-1]%4===0,K=r.length>0&&r[r.length-1]%4===0;E||z?B=C.setByOffset("global_idx",b(E?`${R.type.value}(${R.getByOffset("0")}.x)`:R.getByOffset("global_idx"),z?`${_.type.value}(${_.getByOffset("0")}.x)`:_.getByOffset("global_idx"))):B=`\n            let outputIndices = ${C.offsetToIndices("global_idx * 4u")};\n            let offsetA = ${R.broadcastedIndicesToOffset("outputIndices",C)};\n            let offsetB = ${_.broadcastedIndicesToOffset("outputIndices",C)};\n            ${C.setByOffset("global_idx",b(u||V?R.getByOffset("offsetA / 4u"):`${R.type.value}(${R.getByOffset("offsetA / 4u")}[offsetA % 4u])`,u||K?_.getByOffset("offsetB / 4u"):`${_.type.value}(${_.getByOffset("offsetB / 4u")}[offsetB % 4u])`))}\n          `}else B=C.setByOffset("global_idx",b(R.getByOffset("global_idx"),_.getByOffset("global_idx")));else{if(!s)throw new Error("no necessary to use scalar implementation for element-wise binary op implementation.");let E=(z,V,K="")=>{let ee=`aData[indexA${V}][componentA${V}]`,M=`bData[indexB${V}][componentB${V}]`;return`\n            let outputIndices${V} = ${C.offsetToIndices(`global_idx * 4u + ${V}u`)};\n            let offsetA${V} = ${R.broadcastedIndicesToOffset(`outputIndices${V}`,C)};\n            let offsetB${V} = ${_.broadcastedIndicesToOffset(`outputIndices${V}`,C)};\n            let indexA${V} = offsetA${V} / 4u;\n            let indexB${V} = offsetB${V} / 4u;\n            let componentA${V} = offsetA${V} % 4u;\n            let componentB${V} = offsetB${V} % 4u;\n            ${z}[${V}] = ${K}(${v(ee,M)});\n          `};h===9?B=`\n            var data = vec4<u32>(0);\n            ${E("data",0,"u32")}\n            ${E("data",1,"u32")}\n            ${E("data",2,"u32")}\n            ${E("data",3,"u32")}\n            outputData[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));`:B=`\n            ${E("outputData[global_idx]",0)}\n            ${E("outputData[global_idx]",1)}\n            ${E("outputData[global_idx]",2)}\n            ${E("outputData[global_idx]",3)}\n          `}return`\n        ${e.registerUniform("vec_size","u32").declareVariables(R,_,C)}\n\n        ${g??""}\n\n        ${e.mainStart()}\n        ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}\n        ${B}\n      }`},Hl=(e,t,r,o,n,s,u=r.dataType)=>{let d=!W.areEqual(r.dims,o.dims),a=r.dims,p=W.size(r.dims),h=!1,w=!1,g=[d];if(d){let b=it.calcShape(r.dims,o.dims,!1);if(!b)throw new Error("Can\'t perform binary op on the given tensors");a=b,p=W.size(a);let S=W.size(r.dims)===1,I=W.size(o.dims)===1,A=r.dims.length>0&&r.dims[r.dims.length-1]%4===0,C=o.dims.length>0&&o.dims[o.dims.length-1]%4===0;g.push(S),g.push(I),g.push(A),g.push(C);let R=1;for(let _=1;_<a.length;_++){let B=r.dims[r.dims.length-_]??1,E=o.dims[o.dims.length-_]??1;if(B===E)R*=B;else break}R%4===0?(w=!0,h=!0):(S||I||A||C)&&(h=!0)}else h=!0;g.push(h);let v=ke(r.dims.length)&&ke(o.dims.length)&&ke(a.length);return{name:e,shaderCache:{hint:t+g.map(b=>b.toString()).join("_"),inputDependencies:v?["rank","rank"]:["dims","dims"]},getShaderSource:b=>Ul(b,r.dims,o.dims,a,h,d,w,n,r.dataType,o.dataType,u,v,s),getRunData:()=>({outputs:[{dims:a,dataType:u}],dispatchGroup:{x:Math.ceil(p/64/4)},programUniforms:v?[{type:"uint32",data:Math.ceil(W.size(a)/4)},...pe(r.dims),...pe(o.dims),...pe(a)]:[{type:"uint32",data:Math.ceil(W.size(a)/4)}]})}},ct=(e,t,r,o,n,s)=>{e.compute(Hl(t,n??"",e.inputs[0],e.inputs[1],r,o,s))},yi=e=>{ct(e,"Add",(t,r)=>`${t}+${r}`)},bi=e=>{ct(e,"Div",(t,r)=>`${t}/${r}`)},wi=e=>{ct(e,"Equal",{scalar:(t,r)=>`u32(${t}==${r})`,vector:(t,r)=>`vec4<u32>(${t}==${r})`},void 0,void 0,9)},vi=e=>{ct(e,"Mul",(t,r)=>`${t}*${r}`)},$i=e=>{let t=U("input",e.inputs[0].dataType,e.inputs[0].dims).type.value;ct(e,"Pow",{scalar:(o,n)=>`pow_custom(${o},${n})`,vector:(o,n)=>`pow_vector_custom(${o},${n})`},`\n    fn pow_custom(a : ${t}, b : ${t}) -> ${t} {\n      if (b == ${t}(0.0)) {\n        return ${t}(1.0);\n      } else if (a < ${t}(0.0) && f32(b) != floor(f32(b))) {\n        return ${t}(pow(f32(a), f32(b))); // NaN\n      }\n      return select(sign(a), ${t}(1.0), round(f32(abs(b) % ${t}(2.0))) != 1.0) * ${t}(${t==="i32"?"round":""}(pow(f32(abs(a)), f32(b))));\n    }\n    fn pow_vector_custom(a : vec4<${t}>, b : vec4<${t}>) -> vec4<${t}> {\n      // TODO: implement vectorized pow\n      return vec4<${t}>(pow_custom(a.x, b.x), pow_custom(a.y, b.y), pow_custom(a.z, b.z), pow_custom(a.w, b.w));\n    }\n      `)},Si=e=>{ct(e,"Sub",(t,r)=>`${t}-${r}`)},xi=e=>{ct(e,"Greater",{scalar:(t,r)=>`u32(${t}>${r})`,vector:(t,r)=>`vec4<u32>(${t}>${r})`},void 0,void 0,9)},Ci=e=>{ct(e,"Less",{scalar:(t,r)=>`u32(${t}<${r})`,vector:(t,r)=>`vec4<u32>(${t}<${r})`},void 0,void 0,9)},Ii=e=>{ct(e,"GreaterOrEqual",{scalar:(t,r)=>`u32(${t}>=${r})`,vector:(t,r)=>`vec4<u32>(${t}>=${r})`},void 0,void 0,9)},Ai=e=>{ct(e,"LessOrEqual",{scalar:(t,r)=>`u32(${t}<=${r})`,vector:(t,r)=>`vec4<u32>(${t}<=${r})`},void 0,void 0,9)}});var Ll,Fl,jl,ql,Ti,Ei,Oi=F(()=>{"use strict";be();Oe();we();Ll=e=>{if(!e||e.length<1)throw new Error("too few inputs");let t=e[0].dataType,r=e[0].dims.length;for(let o of e){if(o.dataType!==t)throw new Error("input tensors should be one type");if(o.dims.length!==r)throw new Error("input tensors should have the same shape")}},Fl=(e,t)=>`\n  fn calculateInputIndex(index: u32) -> u32 {\n    let sizeInConcatAxis = array<u32, ${e}u>(${t});\n    for (var i: u32 = 0u; i < ${e}; i += 1u ) {\n      if (index < sizeInConcatAxis[i]) {\n        return i;\n      }\n    }\n    return ${e}u;\n  }`,jl=(e,t)=>{let r=e.length,o=[];for(let n=0;n<r;++n){let s=t.setByOffset("global_idx",e[n].getByIndices("indices"));r===1?o.push(s):n===0?o.push(`if (inputIndex == ${n}u) { ${s} }`):n===r-1?o.push(`else { ${s} }`):o.push(`else if (inputIndex == ${n}) { ${s} }`)}return o.join(`\n`)},ql=(e,t)=>{let r=e[0].dims.slice();if(t>=r.length||t<-1*r.length)throw new Error("axis specified for concat doesn\'t match input dimensionality");let o=t<0?r.length+t:t,n=r.slice(0);for(let _=1;_<e.length;_++){let B=e[_].dims.slice();for(let E=0;E<r.length;E++)if(E===o)n[o]+=B[E];else if(r[E]!==B[E])throw new Error("non concat dimensions must match")}let s=W.size(n),u=new Array(e.length),d=new Array(e.length),a=e[0].dataType,p=0,h=[],w=[],g=[],v=[{type:"uint32",data:s}];for(let _=0;_<e.length;++_)p+=e[_].dims[o],u[_]=p,g.push(ke(e[_].dims.length)),w.push(g[_]?e[_].dims.length:e[_].dims),d[_]=U(`input${_}`,a,w[_]),h.push(g[_]?"rank":"dims"),v.push({type:"uint32",data:u[_]});for(let _=0;_<e.length;++_)g[_]&&v.push(...pe(e[_].dims));let b=ke(n.length);b&&v.push(...pe(n));let S=b?n.length:n,I=j("output",a,S),A=I.indicesGet("indices",o),C=Array.from(Array(u.length).keys()).map(_=>`uniforms.sizeInConcatAxis${_}`).join(","),R=_=>`\n\n  ${(()=>{_.registerUniform("outputSize","u32");for(let B=0;B<e.length;B++)_.registerUniform(`sizeInConcatAxis${B}`,"u32");return _.declareVariables(...d,I)})()}\n\n  ${Fl(u.length,C)}\n\n  ${_.mainStart()}\n    ${_.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n\n    var indices = ${I.offsetToIndices("global_idx")};\n\n    let inputIndex = calculateInputIndex(${A});\n    if (inputIndex != 0u) {\n      let sizeInConcatAxis = array<u32, ${u.length}u>(${C});\n      ${A} -= sizeInConcatAxis[inputIndex - 1u];\n    }\n\n    ${jl(d,I)}\n  }`;return{name:"Concat",shaderCache:{hint:`${t}`,inputDependencies:h},getRunData:()=>({outputs:[{dims:n,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(s/64)},programUniforms:v}),getShaderSource:R}},Ti=(e,t)=>{Ll(e.inputs),e.compute(ql(e.inputs,t.axis))},Ei=e=>J({axis:e.axis})});var vt,jr,Et=F(()=>{"use strict";be();vt=(e,t)=>{switch(e.activation){case"Relu":return{activationFunction:"",applyActivation:`value = max(value, ${t}(0.0));`};case"Sigmoid":return{activationFunction:"",applyActivation:`value = (${t}(1.0) / (${t}(1.0) + exp(-value)));`};case"Clip":return{activationFunction:`const clip_min_=${t}(${e.clipMin});const clip_max_=${t}(${e.clipMax});`,applyActivation:"value = clamp(value, clip_min_, clip_max_);"};default:return{activationFunction:"",applyActivation:""}}},jr=e=>{let t=e?.activation||"";if(t==="Clip"){let[r,o]=e?.activation_params||[Mr,Dr];return{activation:t,clipMax:o,clipMin:r,activationCacheKey:`${t}:${r},${o}`}}return{activation:t,activationCacheKey:t}}});var We,qr,Kr=F(()=>{"use strict";We=(e,t)=>{switch(e){case 1:return t;case 2:return`vec2<${t}>`;case 3:return`vec3<${t}>`;case 4:return`vec4<${t}>`;default:throw new Error(`${e}-component is not supported.`)}},qr=e=>`\n      ${e?"value = value + getBiasByOutputCoords(coords);":""}\n      `});var Yr,Rn=F(()=>{"use strict";Yr=e=>`\nfn getIndexFromCoords4D(coords : vec4<i32>, shape : vec4<i32>) -> i32 {\n  return dot(coords, vec4<i32>(\n      shape.y * shape.z * shape.w, shape.z * shape.w, shape.w, 1));\n}\nfn getOutputIndexFromCoords(coords : vec4<i32>) -> i32 {\n  return dot(coords, vec4<i32>(\n    i32(${e}.x), i32(${e}.y), i32(${e}.z), 1));\n}\n`});var Kl,Yl,sr,ki,Zl,ur,Xl,Zr,lr=F(()=>{"use strict";be();we();Et();Kr();Kl=(e,t)=>e?`\n        mm_Asub[inputRow][inputCol] = mm_readA(batch,\n          kStart + inputRow,\n          globalRowStart / innerElementSize + inputCol${t?", batchIndices":""});\n        `:`\n        mm_Asub[inputRow][inputCol] = mm_readA(batch,\n          globalRow + innerRow,\n          kStart / innerElementSize + inputCol${t?", batchIndices":""});\n        `,Yl=(e,t)=>e?`\n        let ACached0 = mm_Asub[k * innerElementSize][localRow];\n        let ACached1 = mm_Asub[k * innerElementSize + 1][localRow];\n        let ACached2 = mm_Asub[k * innerElementSize + 2][localRow];\n        ${t===3?"":"let ACached3 = mm_Asub[k * innerElementSize + 3][localRow];"}\n        for (var i = 0; i < rowPerThread; i = i + 1) {\n          acc[i] = BCached0 * ACached0[i] + acc[i];\n          acc[i] = BCached1 * ACached1[i] + acc[i];\n          acc[i] = BCached2 * ACached2[i] + acc[i];\n          ${t===3?"":"acc[i] = BCached3 * ACached3[i] + acc[i];"}\n        }`:`\n        for (var i = 0; i < rowPerThread; i = i + 1) {\n          let ACached = mm_Asub[tileRow + i][k];\n          acc[i] = BCached0 * ACached.x + acc[i];\n          acc[i] = BCached1 * ACached.y + acc[i];\n          acc[i] = BCached2 * ACached.z + acc[i];\n          ${t===3?"":"acc[i] = BCached3 * ACached.w + acc[i];"}\n        }`,sr=(e,t,r="f32",o,n=!1,s=32,u=!1,d=32)=>{let a=t[1]*e[1],p=t[0]*e[0],h=n?a:s,w=n?s:a,g=h/t[0],v=s/t[1];if(!((n&&g===4&&e[1]===4||!n&&(g===3||g===4))&&h%t[0]===0&&s%t[1]===0&&e[0]===4))throw new Error(`If transposeA ${n} is true, innerElementSize ${g} and workPerThread[1] ${e[1]} must be 4.\n      Otherwise, innerElementSize ${g} must be 3 or 4.\n  tileAWidth ${h} must be divisible by workgroupSize[0]${t[0]}. tileInner ${s} must be divisible by workgroupSize[1] ${t[1]}. colPerThread ${e[0]} must be 4.`);return`\nvar<workgroup> mm_Asub: array<array<vec${g}<${r}>, ${h/g}>, ${w}>;\nvar<workgroup> mm_Bsub: array<array<vec4<${r}>, ${p/e[0]}>, ${s}>;\n\nconst rowPerThread = ${e[1]};\nconst colPerThread = ${e[0]};\nconst innerElementSize = ${g};\nconst tileInner = ${s};\n\n@compute @workgroup_size(${t[0]}, ${t[1]}, ${t[2]})\nfn main(@builtin(local_invocation_id) localId : vec3<u32>,\n        @builtin(global_invocation_id) globalId : vec3<u32>,\n        @builtin(workgroup_id) workgroupId : vec3<u32>) {\n  let localRow = i32(localId.y);\n  let tileRow = localRow * rowPerThread;\n  let tileCol = i32(localId.x);\n\n  let globalRow =i32(globalId.y) * rowPerThread;\n  let globalCol = i32(globalId.x);\n  let batch = ${u?"0":"i32(globalId.z)"};\n  ${o?`let batchIndices = ${o.offsetToIndices("u32(batch)")};`:""}\n  let globalRowStart = i32(workgroupId.y) * ${a};\n\n  let numTiles = ${u?`${Math.ceil(d/s)}`:"(uniforms.dimInner - 1) / tileInner + 1"};\n  var kStart = ${u?`i32(globalId.z) * ${d}`:"0"};\n\n  var acc: array<vec4<${r}>, rowPerThread>;\n\n  // Loop over shared dimension.\n  let tileRowB = localRow * ${v};\n  for (var t = 0; t < numTiles; t = t + 1) {\n      // Load one tile of A into local memory.\n      for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n          let inputRow = tileRow + innerRow;\n          let inputCol = tileCol;\n          ${Kl(n,o)}\n      }\n\n      // Load one tile of B into local memory.\n      for (var innerRow = 0; innerRow < ${v}; innerRow = innerRow + 1) {\n          let inputRow = tileRowB + innerRow;\n          let inputCol = tileCol;\n          mm_Bsub[inputRow][inputCol] = mm_readB(batch, kStart + inputRow, globalCol${o?", batchIndices":""});\n      }\n      kStart = kStart + tileInner;\n      workgroupBarrier();\n\n      // Compute acc values for a single thread.\n      for (var k = 0; k < tileInner / innerElementSize; k = k + 1) {\n          let BCached0 = mm_Bsub[k * innerElementSize][tileCol];\n          let BCached1 = mm_Bsub[k * innerElementSize + 1][tileCol];\n          let BCached2 = mm_Bsub[k * innerElementSize + 2][tileCol];\n          ${g===3?"":"let BCached3 = mm_Bsub[k * innerElementSize + 3][tileCol];"}\n\n          ${Yl(n,g)}\n      }\n\n      workgroupBarrier();\n  }\n\n  for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      mm_write(batch, globalRow + innerRow, globalCol, acc[innerRow]);\n  }\n}`},ki=(e,t)=>e?`\n            mm_Asub[inputRow][inputCol] = mm_readA(batch,\n              kStart + inputRow,\n              globalRowStart + inputCol${t?", batchIndices":""});\n            `:`\n            mm_Asub[inputRow][inputCol] = mm_readA(batch,\n              globalRowStart + inputRow,\n              kStart + inputCol${t?", batchIndices":""});\n            `,Zl=e=>e?"let ACached = mm_Asub[k][tileRow + innerRow];":"let ACached = mm_Asub[tileRow + innerRow][k];",ur=(e,t,r="f32",o,n=!1,s=32,u=!1,d=32,a=!1)=>{let p=e[1]*t[1],h=e[0]*t[0],w=n?p:s,g=n?s:p;if(!(g%t[1]===0&&w%t[0]===0&&s%t[1]===0))throw new Error(`tileAHight ${g} must be divisible by workgroupSize[1]${t[1]}, tileAWidth ${w} must be divisible by workgroupSize[0]${t[0]}, tileInner ${s} must be divisible by workgroupSize[1]${t[1]}`);let v=g/t[1],b=w/t[0],S=s/t[1],I=a?`\n    let localRow = i32(localId.y);\n    let localCol = i32(localId.x);\n    let globalRowStart = i32(workgroupId.y) * ${p};\n    let globalColStart = i32(workgroupId.x) * ${h};\n\n    // Loop over shared dimension.\n    for (var t = 0; t < numTiles; t = t + 1) {\n      // Load one tile of A into local memory.\n      for (var inputRow = localRow; inputRow < ${g}; inputRow = inputRow + ${t[1]}) {\n        for (var inputCol = localCol; inputCol < ${w}; inputCol = inputCol + ${t[0]}) {\n          ${ki(n,o)}\n        }\n      }\n      // Load one tile of B into local memory.\n      for (var inputRow = localRow; inputRow < ${s}; inputRow = inputRow + ${t[1]}) {\n            for (var inputCol = localCol; inputCol < ${h}; inputCol = inputCol + ${t[0]}) {\n          mm_Bsub[inputRow][inputCol] = mm_readB(batch,\n            kStart + inputRow,\n            globalColStart + inputCol${o?", batchIndices":""});\n        }\n      }\n      kStart = kStart + tileInner;\n      workgroupBarrier();\n\n      // Compute acc values for a single thread.\n      var BCached : array<${r}, colPerThread>;\n      for (var k = 0; k < tileInner; k = k + 1) {\n        for (var inner = 0; inner < colPerThread; inner = inner + 1) {\n          BCached[inner] = mm_Bsub[k][localCol + inner * ${t[0]}];\n        }\n        for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n          let ACached = ${n?`mm_Asub[k][localRow + innerRow * ${t[1]}];`:`mm_Asub[localRow + innerRow * ${t[1]}][k];`}\n          for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n            acc[innerRow][innerCol] = acc[innerRow][innerCol] +\n                ACached * BCached[innerCol];\n          }\n        }\n      }\n      workgroupBarrier();\n    }\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      let gRow = globalRowStart + localRow + innerRow * ${t[1]};\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n        let gCol = globalColStart + localCol + innerCol * ${t[0]};\n        mm_write(batch, gRow, gCol, acc[innerRow][innerCol]);\n      }\n    }\n    `:`\nlet tileRow = i32(localId.y) * rowPerThread;\nlet tileCol = i32(localId.x) * colPerThread;\n\nlet globalRow = i32(globalId.y) * rowPerThread;\nlet globalCol = i32(globalId.x) * colPerThread;\nlet globalRowStart = i32(workgroupId.y) * ${p};\n\nlet tileRowA = i32(localId.y) * ${v};\nlet tileColA = i32(localId.x) * ${b};\nlet tileRowB = i32(localId.y) * ${S};\n// Loop over shared dimension.\nfor (var t = 0; t < numTiles; t = t + 1) {\n  // Load one tile of A into local memory.\n  for (var innerRow = 0; innerRow < ${v}; innerRow = innerRow + 1) {\n    for (var innerCol = 0; innerCol < ${b}; innerCol = innerCol + 1) {\n      let inputRow = tileRowA + innerRow;\n      let inputCol = tileColA + innerCol;\n      ${ki(n,o)}\n    }\n  }\n\n  // Load one tile of B into local memory.\n  for (var innerRow = 0; innerRow < ${S}; innerRow = innerRow + 1) {\n    for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n      let inputRow = tileRowB + innerRow;\n      let inputCol = tileCol + innerCol;\n      mm_Bsub[inputRow][inputCol] = mm_readB(batch,\n        kStart + inputRow,\n        globalCol + innerCol${o?", batchIndices":""});\n    }\n  }\n  kStart = kStart + tileInner;\n  workgroupBarrier();\n\n  // Compute acc values for a single thread.\n  var BCached : array<${r}, colPerThread>;\n  for (var k = 0; k < tileInner; k = k + 1) {\n    for (var inner = 0; inner < colPerThread; inner = inner + 1) {\n      BCached[inner] = mm_Bsub[k][tileCol + inner];\n    }\n\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      ${Zl(n)}\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n        acc[innerRow][innerCol] = acc[innerRow][innerCol] + ACached * BCached[innerCol];\n      }\n    }\n  }\n\n  workgroupBarrier();\n}\n\nfor (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n  for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n    mm_write(batch, globalRow + innerRow, globalCol + innerCol,\n        acc[innerRow][innerCol]);\n  }\n}\n`;return`\n  var<workgroup> mm_Asub : array<array<${r}, ${w}>, ${g}>;\n  var<workgroup> mm_Bsub : array<array<${r}, ${h}>, ${s}>;\n  const rowPerThread = ${e[1]};\n  const colPerThread = ${e[0]};\n  const tileInner = ${s};\n\n@compute @workgroup_size(${t[0]}, ${t[1]}, ${t[2]})\nfn main(@builtin(local_invocation_id) localId : vec3<u32>,\n        @builtin(global_invocation_id) globalId : vec3<u32>,\n        @builtin(workgroup_id) workgroupId : vec3<u32>) {\n    let batch = ${u?"0":"i32(globalId.z)"};\n    ${o?`let batchIndices = ${o.offsetToIndices("u32(batch)")};`:""}\n    let numTiles = ${u?`${Math.ceil(d/s)}`:"(uniforms.dimInner - 1) / tileInner + 1"};\n    var kStart = ${u?`i32(globalId.z) * ${d}`:"0"};\n\n    var acc : array<array<${r}, colPerThread>, rowPerThread>;\n\n    // Without this initialization strange values show up in acc.\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n        acc[innerRow][innerCol] = 0.0;\n      }\n    }\n    ${I}\n  }\n`},Xl=(e,t,r,o,n,s=!1)=>{let[u,d,a]=n,[p,h,w,g]=o,v=An(u,a),b=An(d,a),S=_e(o[0].type.tensor),I=()=>{let R=h.rank,_=p.rank,B=`var aIndices: ${h.type.indices};`;for(let E=R-2-1,z=_-1;E>=0;E--,z--)B+=`\naIndices[${E}] = ${_>1?`batchIndices[${z}]`:"batchIndices"};`;return v.forEach(E=>{B+=`\naIndices[${E}] = 0;`}),B+=`\naIndices[${R-2}] = u32(row);\n                   aIndices[${R-1}] = u32(colIn);`,B},A=()=>{let R=w.rank,_=p.rank,B=`var bIndices: ${w.type.indices};`;for(let E=R-2-1,z=_-1;E>=0;E--,z--)B+=`\nbIndices[${E}] = ${_>1?`batchIndices[${z}]`:"batchIndices"};`;return b.forEach(E=>{B+=`\nbIndices[${E}] = 0;`}),B+=`\nbIndices[${R-2}] = u32(row);\n                   bIndices[${R-1}] = u32(colIn);`,B};return`\n    fn mm_readA(batch: i32, row: i32, colIn: i32, batchIndices: ${p.type.indices}) -> ${We(e,S)} {\n      var value = ${We(e,S)}(0.0);\n      let col = colIn * ${e};\n      if(row < uniforms.dimAOuter && col < uniforms.dimInner)\n      {\n        ${I()}\n        value = ${h.getByIndices("aIndices")};\n      }\n      return value;\n    }\n\n    fn mm_readB(batch: i32, row: i32, colIn: i32, batchIndices: ${p.type.indices}) -> ${We(e,S)} {\n      var value = ${We(e,S)}(0.0);\n      let col = colIn * ${e};\n      if(row < uniforms.dimInner && col < uniforms.dimBOuter)\n      {\n        ${A()}\n        value = ${w.getByIndices("bIndices")};\n      }\n      return value;\n    }\n\n    fn mm_write(batch: i32, row: i32, colIn: i32, valueIn: ${We(e,S)}) {\n      let col = colIn * ${e};\n      if (row < uniforms.dimAOuter && col < uniforms.dimBOuter) {\n        var value = valueIn;\n        let coords = vec3<i32>(batch, row, colIn);\n        ${t?`value = value + ${s?"bias[colIn]":`${We(e,S)}(bias[row])`};`:""}\n        ${r}\n        ${g.setByIndices("vec3<u32>(coords)","value")}\n      }\n    }\n    `},Zr=(e,t,r,o,n=!1)=>{let s=e[0].dims,u=e[1].dims,d=s.slice(0,-2),a=u.slice(0,-2),p=o?o.slice(0,-2):r.slice(0,-2),h=ke(p.length),w=h?p.length:p,g=No("batchDims",e[0].dataType,w,1),v=W.size(p),b=s[s.length-2],S=s[s.length-1],I=u[u.length-1],A=S%4===0&&I%4===0,C=b<=8?[4,1,1]:[4,4,1],R=[8,8,1],_=[Math.ceil(I/R[0]/C[0]),Math.ceil(b/R[1]/C[1]),Math.ceil(v/R[2]/C[2])],B=_e(e[0].dataType),E=A?4:1,z=[...d,b,S/E],V=ke(z.length),K=V?z.length:z,ee=[...a,S,I/E],M=ke(ee.length),Z=M?ee.length:ee,xe=[v,b,I/E],re=U("a",e[0].dataType,K,E),ve=U("b",e[1].dataType,Z,E),q=j("result",e[0].dataType,xe.length,E),$e=[re,ve],Ie=[{type:"int32",data:b},{type:"int32",data:I},{type:"int32",data:S}];h&&Ie.push(...pe(p)),V&&Ie.push(...pe(z)),M&&Ie.push(...pe(ee));let Ae=[];Ae.push(V?"rank":"dims"),Ae.push(M?"rank":"dims");let fe=e.length>2,{activationFunction:rt,applyActivation:He}=vt(t,q.type.value),Le=Xl(E,fe,He,[g,re,ve,q],[d,a,p],n);if(fe){let le=n?E:1;$e.push(U("bias",e[2].dataType,e[2].dims.length,le)),Ie.push(...pe(e[2].dims)),Ae.push("rank")}Ie.push(...pe(xe));let L=le=>`\n  ${le.registerUniform("dimAOuter","i32").registerUniform("dimBOuter","i32").registerUniform("dimInner","i32").registerInternalVariables(g).declareVariables(...$e,q)}\n  ${rt}\n  ${Le}\n  ${A?sr(C,R,B,g):ur(C,R,B,g)}\n                   `;return{name:"MatMul",shaderCache:{hint:t.activationCacheKey+`${C}${t.activation}${t.clipMax}${t.clipMin}${A}${fe}${n}`,inputDependencies:Ae},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:_[0],y:_[1],z:_[2]},programUniforms:Ie}),getShaderSource:L}}});var Ql,Pi,Ri=F(()=>{"use strict";wt();we();Et();Kr();Rn();lr();Ql=(e,t,r,o,n=!1,s,u=4,d=4,a=4,p="f32")=>{let h=M=>{switch(M){case 1:return"resData = x[xIndex];";case 3:return`resData = vec3<${p}>(x[xIndex], x[xIndex + 1], x[xIndex + 2]);`;case 4:return"resData = x[xIndex / 4];";default:throw new Error(`innerElementSize ${M} is not supported.`)}},w=M=>{switch(M){case 1:return"return w[row * i32(uniforms.w_shape[3]) + colIn];";case 4:return"return w[row * i32(uniforms.w_shape[3]) / 4 + colIn];";default:throw new Error(`innerElementSize ${M} is not supported.`)}},g=e?`\n    let coord = vec4<i32>(batch, xRow, xCol, xCh);\n    `:`\n    let coord = vec4<i32>(batch, xCh, xRow, xCol);\n    `,v=e?`\n    let coords = vec4<i32>(\n      batch,\n      row / outWidth,\n      row % outWidth,\n      col);\n    `:`\n    let coords = vec4<i32>(\n      batch,\n      row,\n      col / outWidth,\n      col % outWidth);\n    `,b=e?"i32(uniforms.x_shape[1])":"i32(uniforms.x_shape[2])",S=e?"i32(uniforms.x_shape[2])":"i32(uniforms.x_shape[3])",I=e?"row":"col",A=e?"col":"row",C=`\n    let inChannels = i32(uniforms.w_shape[2]);\n    let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};\n    let outRow = ${I} / outWidth;\n    let outCol = ${I} % outWidth;\n\n    let WRow = ${A} / (filterDims[1] * inChannels);\n    let WCol = ${A} / inChannels % filterDims[1];\n    let xRow = outRow * stride[0] + dilation[0] * WRow - pad[0];\n    let xCol = outCol * stride[1] + dilation[1] * WCol - pad[1];\n    let xCh = ${A} % inChannels;\n    var resData = ${We(u,p)}(0.0);\n    // The bounds checking is always needed since we use it to pad zero for\n    // the \'same\' padding type.\n    if (xRow >= 0 && xRow < ${b} && xCol >= 0 && xCol < ${S}) {\n      ${g}\n      let xIndex = getIndexFromCoords4D(coord, vec4<i32>(uniforms.x_shape));\n      ${h(u)}\n    }\n    return resData;`,R=e?t&&o?`\n    let col = colIn * ${u};\n    ${C}`:`\n    let col = colIn * ${u};\n    if (row < uniforms.dimAOuter && col < uniforms.dimInner) {\n      ${C}\n    }\n    return ${We(u,p)}(0.0);`:o&&r?`\n    let col = colIn * ${u};\n    ${C}`:`\n    let col = colIn * ${u};\n    if (row < uniforms.dimInner && col < uniforms.dimBOuter) {\n      ${C}\n    }\n    return ${We(u,p)}(0.0);`,_=`${w(d)}`,B=We(a,p),E=e?We(u,p):We(d,p),z=e?We(d,p):We(u,p),{activationFunction:V,applyActivation:K}=vt(s,B);return`\n    ${V}\n    fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${E} {\n      ${e?R:_}\n    }\n\n    fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${z} {\n      ${e?_:R}\n    }\n\n    fn mm_write(batch: i32, row : i32, colIn : i32, valueIn : ${B}) {\n      let col = colIn * ${a};\n      if (row < uniforms.dimAOuter && col < uniforms.dimBOuter)\n      {\n      var value = valueIn;\n      let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};\n      ${v}\n      ${qr(n)}\n      ${K}\n      setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);\n      }\n    }`},Pi=(e,t,r,o,n,s,u,d)=>{let a=t.format==="NHWC",p=a?e[0].dims[3]:e[0].dims[1],h=r[0],w=a?r[2]:r[3],g=a?r[1]:r[2],v=a?r[3]:r[1],b=a&&(p%4===0||p%3===0)&&v%4===0,S=a?v:w*g,I=a?w*g:v,A=[8,8,1],C=o<=8?[4,1,1]:[4,4,1],R=[Math.ceil(S/A[0]/C[0]),Math.ceil(I/A[1]/C[1]),Math.ceil(h/A[2]/C[2])];Pe("verbose",()=>`[conv2d_mm_webgpu] dispatch = ${R}`);let _=b?a&&p%4!==0?3:4:1,B=A[1]*C[1],E=A[0]*C[0],z=Math.max(A[0]*_,A[1]),V=o%B===0,K=n%E===0,ee=s%z===0,M=b?[_,4,4]:[1,1,1],Z=_e(e[0].dataType),xe=b?4:1,re=[{type:"int32",data:o},{type:"int32",data:n},{type:"int32",data:s}],ve=U("x",e[0].dataType,e[0].dims.length,_===3?1:_),q=U("w",e[1].dataType,e[1].dims.length,xe),$e=[ve,q];re.push(...pe(e[0].dims)),re.push(...pe(e[1].dims));let Ie=`\n      fn setOutputAtIndex(flatIndex : i32, value : ${b?`vec4<${Z}>`:Z}) {\n        result[flatIndex] = ${b?`vec4<${Z}>`:Z}(value);\n      }\n      fn setOutputAtCoords(d0 : i32, d1 : i32, d2 : i32, d3 : i32, value : ${b?`vec4<${Z}>`:Z}) {\n        let flatIndex = getOutputIndexFromCoords(vec4<i32>(d0, d1, d2, d3));\n        setOutputAtIndex(flatIndex ${b?"/ 4":""}, value);\n      }`;if(u){let fe=U("bias",e[2].dataType,e[2].dims.length,xe);$e.push(fe),re.push(...pe(e[2].dims)),Ie+=`\n        fn getBiasByOutputCoords(coords : vec4<i32>) -> ${b?`vec4<${Z}>`:Z} {\n          return bias[coords.${a?"w":"y"}${b?"/ 4":""}];\n        }`}let Ae=j("result",e[0].dataType,r.length,xe);return re.push(...pe(r)),{name:"Conv2DMatMul",shaderCache:{hint:t.cacheKey},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:R[0],y:R[1],z:R[2]},programUniforms:re}),getShaderSource:fe=>`\n        ${Yr("uniforms.result_strides")}\n        //struct Uniforms { xShape : vec4<i32>, wShape : vec4<i32>, outShape : vec4<i32>,\n        //  outShapeStrides: vec3<i32>, filterDims : vec2<i32>, pad : vec2<i32>, stride : vec2<i32>,\n        //  dilation : vec2<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32 };\n        ${fe.registerUniform("dimAOuter","i32").registerUniform("dimBOuter","i32").registerUniform("dimInner","i32").declareVariables(...$e,Ae)}\n        const filterDims : vec2<i32> = vec2<i32>(${t.kernelShape[0]}, ${t.kernelShape[1]});\n        const pad : vec2<i32> = vec2<i32>(${t.pads[0]}, ${t.pads[1]});\n        const stride : vec2<i32> = vec2<i32>(${t.strides[0]}, ${t.strides[1]});\n        const dilation : vec2<i32> = vec2<i32>(${t.dilations[0]}, ${t.dilations[1]});\n        ${Ie}\n        ${Ql(a,V,K,ee,u,t,M[0],M[1],M[2],Z)}\n            ${b?sr(C,A,Z,void 0,!a,z):ur(C,A,Z,void 0,!a,z,!1,void 0,d)}`}}});var Bn,Bi=F(()=>{"use strict";be();we();Dn();Et();Bn=(e,t,r)=>{let o=e.length>2,n=o?"value += b[output_channel];":"",s=e[0].dims,u=e[1].dims,d=u[0]/t.group,a=t.format==="NHWC",p=Mn(s,u,t.dilations,t.pads,t.strides,a),h=W.size(p),w=j("output",e[0].dataType,p),{activationFunction:g,applyActivation:v}=vt(t,w.type.value),b=U("x",e[0].dataType,s),S=U("w",e[1].dataType,u),I=[b,S];o&&I.push(U("b",e[2].dataType,e[2].dims));let A=C=>`\n  const strides: vec2<u32> = vec2(${t.strides[0]}u, ${t.strides[1]}u);\n  const pads: vec2<u32> = vec2(${t.pads[0]}u, ${t.pads[1]}u);\n\n  ${C.declareVariables(...I,w)}\n\n  ${g}\n\n  ${C.mainStart()}\n    ${C.guardAgainstOutOfBoundsWorkgroupSizes(h)}\n\n    let outputIndices = ${w.offsetToIndices("global_idx")};\n    let batch: u32 = outputIndices[0];\n    let output_channel: u32 = outputIndices[${a?3:1}];\n    let xRCCorner: vec2<u32> = vec2<u32>(outputIndices[${a?1:2}], outputIndices[${a?2:3}]) * strides - pads;\n    let group_id: u32 = output_channel / ${d}u;\n\n    var value: ${w.type.value} = ${w.type.value}(0);\n    for (var wInChannel: u32 = 0u; wInChannel < ${u[1]}u; wInChannel++) {\n      let input_channel = group_id * ${u[1]}u + wInChannel;\n      for (var wHeight: u32 = 0u; wHeight < ${u[2]}u; wHeight++) {\n        let xHeight = xRCCorner.x + wHeight * ${t.dilations[0]}u;\n\n        if (xHeight < 0u || xHeight >= ${s[a?1:2]}u) {\n          continue;\n        }\n\n        for (var wWidth: u32 = 0u; wWidth < ${u[3]}u; wWidth++) {\n          let xWidth = xRCCorner.y + wWidth * ${t.dilations[1]}u;\n          if (xWidth < 0u || xWidth >= ${s[a?2:3]}u) {\n            continue;\n          }\n\n          let xVal = ${a?b.get("batch","xHeight","xWidth","input_channel"):b.get("batch","input_channel","xHeight","xWidth")};\n          let wVal = ${S.get("output_channel","wInChannel","wHeight","wWidth")};\n          value += xVal*wVal;\n        }\n      }\n    }\n    ${n}\n    ${v}\n    ${w.setByOffset("global_idx","value")}\n  }`;return{name:"GroupedConv",shaderCache:{hint:t.cacheKey},getRunData:()=>({outputs:[{dims:r?r(p):p,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(h/64)}}),getShaderSource:A}}});var Mn,Mi,Jl,Di,zn,ed,td,Vn,Dn=F(()=>{"use strict";be();Oe();Ri();lr();Bi();Et();Vt();Mn=(e,t,r,o,n,s)=>{let u=e[0],d=e.slice(s?1:2,s?3:4),a=d.length,p=t[0],w=t.slice(2).map((b,S)=>b+(b-1)*(r[S]-1)),v=d.map((b,S)=>b+o[S]+o[S+a]).map((b,S)=>Math.floor((b-w[S]+n[S])/n[S]));return v.splice(0,0,u),v.splice(s?3:1,0,p),v},Mi=[2,3,1,0],Jl=(e,t)=>{if(!e||e.length!==2&&e.length!==3)throw new Error("Conv requires 2 or 3 inputs");if(e[0].dims.length!==4&&e[0].dims.length!==3)throw new Error("currently only support conv 1D and 2D");if(e[0].dims.length!==e[1].dims.length)throw new Error("filter does not have same dimension as input");let r=e[0].dims[t.format==="NHWC"?e[0].dims.length-1:1],o=e[1].dims[1]*t.group;if(r!==o)throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");if(e.length===3&&(e[2].dims.length!==1||e[1].dims[0]!==e[2].dims[0]))throw new Error("invalid bias");let n=e[0].dims.length-2;if(t.dilations.length!==n)throw new Error(`dilations should be ${n}D`);if(t.strides.length!==n)throw new Error(`strides should be ${n}D`);if(t.pads.length!==n*2)throw new Error(`pads should be ${n*2}D`);if(t.kernelShape.length!==0&&t.kernelShape.length!==e[1].dims.length-2)throw new Error("invalid kernel shape")},Di=(e,t)=>{let r=e.kernelShape.slice();for(let s=2;s<t[1].dims.length;++s)r[s-2]===0&&(r[s-2]=t[1].dims[s]);let o=e.pads.slice();Tt.adjustPadsBasedOnAutoPad(t[0].dims,e.strides,e.dilations,r,o,e.format==="NHWC",e.autoPad);let n=Object.assign({},e);return Object.assign(n,{kernelShape:r,pads:o,cacheKey:e.cacheKey}),n},zn=e=>{let t=jr(e),r=e.format,o=["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][e.auto_pad],n=e.dilations,s=e.group,u=e.kernel_shape,d=e.pads,a=e.strides,p=e.w_is_const();return J({autoPad:o,format:r,dilations:n,group:s,kernelShape:u,pads:d,strides:a,wIsConst:p,...t})},ed=(e,t,r)=>{let o=Di(r,t);if(r.group!==1){e.compute(Bn(t,o));return}let n=r.format==="NHWC",s=t.length===3,u=t[0].dims[n?1:2],d=t[0].dims[n?2:3],a=t[0].dims[n?3:1],p=t[1].dims[2],h=t[1].dims[3],w=Mn(t[0].dims,t[1].dims,r.dilations,o.pads,r.strides,n),g=w[n?1:2],v=w[n?2:3],b=w[n?3:1],S=n&&p===u&&h===d&&r.pads[0]===0&&r.pads[1]===0;if(S||p===1&&h===1&&r.dilations[0]===1&&r.dilations[1]===1&&r.strides[0]===1&&r.strides[1]===1&&r.pads[0]===0&&r.pads[1]===0){let E=w[0],z,V,K,ee=[];if(n){let M=e.kernelCustomData.wT??e.compute(et(t[1],Mi),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];if(r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=M),S){let Z=u*d*a;z=t[0].reshape([1,E,Z]),V=M.reshape([1,Z,b]),K=[1,E,b]}else z=t[0].reshape([E,u*d,a]),V=M.reshape([1,a,b]),K=[E,g*v,b];ee.push(z),ee.push(V)}else z=t[0].reshape([E,a,u*d]),V=t[1].reshape([1,b,a]),K=[E,b,g*v],ee.push(V),ee.push(z);s&&ee.push(t[2]),e.compute(Zr(ee,o,w,K,n),{inputs:ee});return}let I=!0,A=e.kernelCustomData.wT??e.compute(et(t[1],Mi),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=A);let C=[t[0],A];s&&C.push(t[2]);let R=n?g*v:b,_=n?b:g*v,B=p*h*a;e.compute(Pi(C,o,w,R,_,B,s,I),{inputs:C})},td=(e,t)=>{let r=t.format==="NHWC",o=[e.inputs[0].reshape(r?[e.inputs[0].dims[0],1,e.inputs[0].dims[1],e.inputs[0].dims[2]]:[e.inputs[0].dims[0],e.inputs[0].dims[1],1,e.inputs[0].dims[2]]),e.inputs[1].reshape([e.inputs[1].dims[0],e.inputs[1].dims[1],1,e.inputs[1].dims[2]])];e.inputs.length===3&&o.push(e.inputs[2]);let n=[0,t.pads[0],0,t.pads[1]],s=[1].concat(t.strides),u=[1].concat(t.dilations),d=[1].concat(t.kernelShape),a=Di({...t,pads:n,strides:s,dilations:u,kernelShape:d},o);e.compute(Bn(o,a,p=>r?[p[0],p[2],p[3]]:[]))},Vn=(e,t)=>{Jl(e.inputs,t),e.inputs[0].dims.length===3?td(e,t):ed(e,e.inputs,t)}});var rd,zi,Vi=F(()=>{"use strict";wt();we();Et();Kr();Rn();lr();rd=(e,t=!1,r,o=4)=>{let n=We(o,"f32"),s=C=>{switch(C){case 1:return"return w[getIndexFromCoords4D(coord, vec4<i32>(uniforms.w_shape))];";case 4:return`\n            let coord1 = vec4<i32>(coordX, coordY, col + 1, rowInner);\n            let coord2 = vec4<i32>(coordX, coordY, col + 2, rowInner);\n            let coord3 = vec4<i32>(coordX, coordY, col + 3, rowInner);\n            let v0 = w[getIndexFromCoords4D(coord, vec4<i32>(uniforms.w_shape))];\n            let v1 = w[getIndexFromCoords4D(coord1, vec4<i32>(uniforms.w_shape))];\n            let v2 = w[getIndexFromCoords4D(coord2, vec4<i32>(uniforms.w_shape))];\n            let v3 = w[getIndexFromCoords4D(coord3, vec4<i32>(uniforms.w_shape))];\n            return vec4<f32>(v0, v1, v2, v3);\n            `;default:throw new Error(`innerElementSize ${C} is not supported.`)}},u=e?`\n      let coord = vec4<i32>(batch, iXR, iXC, xCh);\n      `:`\n      let coord = vec4<i32>(batch, xCh, iXR, iXC);\n      `,d=e?`\n    let coords = vec4<i32>(\n      batch,\n      row / outWidth,\n      row % outWidth,\n      col);\n    `:`\n    let coords = vec4<i32>(\n      batch,\n      row,\n      col / outWidth,\n      col % outWidth);\n    `,a=e?"outBackprop[1]":"outBackprop[2]",p=e?"outBackprop[2]":"outBackprop[3]",h=e?"row":"col",w=e?"col":"row",g=`\n      let inChannels = ${e?"outBackprop[3]":"outBackprop[1]"};\n      let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};\n      let outRow = ${h} / outWidth;\n      let outCol = ${h} % outWidth;\n\n      let WRow = ${w} / (filterDims[1] * inChannels);\n      let WCol = ${w} / inChannels % filterDims[1];\n      let xR = f32(outRow - pads[0] + dilation[0] * WRow) / f32(strides[0]);\n      let xC = f32(outCol - pads[1] + dilation[1] * WCol) / f32(strides[1]);\n      if (xR < 0.0 || xR >= f32(${a}) || fract(xR) > 0.0) {\n        return ${n}(0.0);\n      }\n      if (xC < 0.0 || xC >= f32(${p}) || fract(xC) > 0.0) {\n        return ${n}(0.0);\n      }\n      let iXR = i32(xR);\n      let iXC = i32(xC);\n      let xCh = ${w} % inChannels;\n      ${u}\n      return x[getIndexFromCoords4D(coord, vec4<i32>(uniforms.x_shape))/${o}];`,v=e?`\n      let col = colIn * ${o};\n      if (row < uniforms.dimAOuter && col < uniforms.dimInner) {\n        ${g}\n      }\n      return ${n}(0.0);`:`\n      let col = colIn * ${o};\n      if (row < uniforms.dimInner && col < uniforms.dimBOuter) {\n        ${g}\n      }\n      return ${n}(0.0);`,b=`\n      let col = colIn * ${o};\n      let inChannels = ${e?"outBackprop[3]":"outBackprop[1]"};\n      let coordX = filterDims.x - 1 - row / (filterDims[1] * inChannels);\n      let coordY = filterDims.y - 1 - (row / inChannels) % filterDims[1];\n      if (${e?"row < uniforms.dimInner && col < uniforms.dimBOuter":"row < uniforms.dimInner && col < uniforms.dimAOuter"}  && coordX >= 0 && coordY >= 0) {\n        let rowInner = row % inChannels;\n        let coord = vec4<i32>(coordX, coordY, col, rowInner);\n        ${s(o)}\n      }\n      return ${n}(0.0);\n      `,{activationFunction:S,applyActivation:I}=vt(r,n);return`\n      ${S}\n  fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${n} {\n    ${e?v:b}\n  }\n\n  fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${n} {\n    ${e?b:v}\n  }\n\n  fn mm_write(batch: i32, row : i32, colIn : i32, valueInput : ${n}) {\n    let col = colIn * ${o};\n    if (row < uniforms.dimAOuter && col < uniforms.dimBOuter) {\n      var value = valueInput;\n      let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};\n      ${d}\n      ${qr(t)}\n      ${I}\n      result[getIndexFromCoords4D(coords, vec4<i32>(uniforms.result_shape))/${o}] = value;\n    }\n  }`},zi=(e,t,r,o,n,s,u,d)=>{let a=t.format==="NHWC",p=a?e[0].dims[3]:e[0].dims[1],h=r[0],w=a?r[2]:r[3],g=a?r[1]:r[2],v=a?r[3]:r[1],b=a?p%4===0&&v%4===0:w%4===0&&v%4===0,S=a?v:w*g,I=a?w*g:v,A=b?[8,8,1]:[S<=4||I<=4?4:16,S>4&&I<=4?4:16,1],C=b?[4,4,1]:[S<=4?1:4,S>4&&I<=4?1:4,1],R=[Math.ceil(S/A[0]/C[0]),Math.ceil(I/A[1]/C[1]),Math.ceil(h/A[2]/C[2])];Pe("verbose",()=>`[conv_backprop_mm_webgpu] dispatch = ${R}`);let _=b?4:1,B=Math.max(A[0]*_,A[1]),E=b?4:1,z=[{type:"int32",data:o},{type:"int32",data:n},{type:"int32",data:s}],V=U("x",e[0].dataType,e[0].dims.length,E),K=U("w",e[1].dataType,e[1].dims.length,1),ee=j("result",e[0].dataType,r.length,E),M=[V,K];z.push(...pe(e[0].dims)),z.push(...pe(e[1].dims));let Z="";if(u){let xe=U("bias",e[2].dataType,e[2].dims.length,E);M.push(xe),z.push(...pe(e[2].dims)),Z+=`\n        fn getBiasByOutputCoords(coords : vec4<i32>) -> ${b?"vec4<f32>":"f32"} {\n          return bias[coords.${a?"w":"y"}${b?"/ 4":""}];\n        }`}return z.push(...pe(r)),{name:"Conv2DTransposeMatMul",shaderCache:{hint:t.cacheKey},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:R[0],y:R[1],z:R[2]},programUniforms:z}),getShaderSource:xe=>`\n        ${Yr("uniforms.result_strides")}\n        ${xe.registerUniform("dimAOuter","i32").registerUniform("dimBOuter","i32").registerUniform("dimInner","i32").declareVariables(...M,ee)};\n        const outBackprop : vec4<i32> = vec4<i32>(${e[0].dims.join(",")});\n        const filterDims : vec2<i32> = vec2<i32>(${t.kernelShape[a?1:2]}, ${t.kernelShape[a?2:3]});\n        const effectiveFilterDims : vec2<i32> = filterDims + vec2<i32>(\n              ${t.dilations[0]<=1?0:(t.kernelShape[a?1:2]-1)*(t.dilations[0]-1)},\n              ${t.dilations[1]<=1?0:(t.kernelShape[a?2:3]-1)*(t.dilations[1]-1)});\n        const pads : vec2<i32> = vec2<i32>(i32(effectiveFilterDims[0]) - 1 - (${t.pads[0]+t.pads[2]})/2,\n                                         i32(effectiveFilterDims[1]) - 1 - (${t.pads[1]+t.pads[3]})/2);\n        const strides : vec2<i32> = vec2<i32>(${t.strides[0]}, ${t.strides[1]});\n        const dilation : vec2<i32> = vec2<i32>(${t.dilations[0]}, ${t.dilations[1]});\n        const dimAOuter : i32 = ${o};\n        const dimBOuter : i32 = ${n};\n        const dimInner : i32 = ${s};\n        ${Z}\n        ${rd(a,u,t,_)}\n        ${b?sr(C,A,"f32",void 0,!a,B):ur(C,A,"f32",void 0,!a,B,!1,void 0,d)}`}}});var nd,Wn,Wi=F(()=>{"use strict";wt();be();we();nd=(e,t,r,o,n,s,u=!1,d)=>{let a=r.format==="NHWC",p=a?1:2,h=a?2:3,w=a?3:1,g=W.size(o),v=u?2:1,b=r.group,S=t[1].dims,I=S[0]/b,A=S[1],C=`\n  fn setOutputAtIndex(flatIndex : u32, value : ${u?`vec4<${d}>`:d}) {\n    result[flatIndex] = ${u?`vec4<${d}>`:d}(value);\n  }`;n&&(C+=`\n    fn getBiasByOutputCoords(coords : vec4<u32>) -> ${u?`vec4<${d}>`:d} {\n      return bias[coords.${a?"w":"y"}${u?"/ 4":""}];\n    }`);let R=u?4:1,_=U("W",t[1].dataType,t[1].dims,R),B=U("Dy",t[0].dataType,t[0].dims,R),E=[B,_];n&&E.push(U("bias",t[2].dataType,[o[w]],R));let z=j("result",t[0].dataType,o,R),V=`{\n        let batch: u32 = ${s?"global_id.z":"workgroup_id.z"} / outShape[1];\n        let r = ${s?"global_id.z":"workgroup_id.z"} % outShape[1];\n        let c = ${s?"global_id.y":"workgroup_id.y"} * ${v};\n        let d1: u32 = ${s?"global_id.x":"workgroup_id.x"} * 4;\n\n        let dyCorner = vec2<i32>(i32(r), i32(c)) - vec2<i32>(pads);\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        var dotProd: array<vec4<${d}>, ${v}>;\n        for (var i = 0; i < ${v}; i++) {\n          dotProd[i] = vec4<${d}>(0.0);\n        }\n        for (var wR: u32 = 0; wR < filterDims[0]; wR = wR + 1) {\n          var dyR = (${d}(dyCorner.x) + ${d}(wR)) / ${d}(strides.x);\n          let wRPerm = filterDims[0] - 1 - wR;\n          if (dyR < 0.0 || dyR >= ${d}(outBackprop[1]) ||\n              fract(dyR) > 0.0 || wRPerm < 0) {\n            continue;\n          }\n          let idyR: u32 = u32(dyR);\n\n          for (var wC: u32 = 0; wC < filterDims[1]; wC = wC + 1) {\n            let dyC = (${d}(dyCorner.y) + ${d}(wC)) / ${d}(strides.y);\n            let dyC2 = (${d}(dyCorner.y) + 1.0 + ${d}(wC)) / ${d}(strides.y);\n            let wCPerm = filterDims[1] - 1 - wC;\n            if (wCPerm < 0) {\n              continue;\n            }\n            var bDyCVal = true;\n            var bDyCVal2 = true;\n            if (dyC < 0.0 || dyC >= ${d}(outBackprop[2]) ||\n                fract(dyC) > 0.0) {\n              bDyCVal = false;\n            }\n            if (dyC2 < 0.0 || dyC2 >= ${d}(outBackprop[2]) ||\n                fract(dyC2) > 0.0) {\n              bDyCVal2 = false;\n            }\n\n            let idyC: u32 = u32(dyC);\n            let idyC2: u32 = u32(dyC2);\n            if (bDyCVal && bDyCVal2) {\n              let d2Length = outBackprop[3];\n              for (var d2 :u32 = 0; d2 < d2Length; d2 = d2 + 4) {\n                let wValue0 = ${_.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};\n                let wValue1 = ${_.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};\n                let wValue2 = ${_.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};\n                let wValue3 = ${_.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};\n\n                var xValue = ${B.get("batch","idyR","idyC","d2")};\n                let tmpval = vec4<${d}>(dot(xValue, wValue0),\n                                      dot(xValue, wValue1),\n                                      dot(xValue, wValue2),\n                                      dot(xValue, wValue3));\n                dotProd[0] = dotProd[0] + tmpval;\n\n                xValue =  ${B.get("batch","idyR","idyC2","d2")};\n\n                dotProd[1] = dotProd[1] + vec4<${d}>(dot(xValue, wValue0),\n                                                    dot(xValue, wValue1),\n                                                    dot(xValue, wValue2),\n                                                    dot(xValue, wValue3));\n              }\n            } else if (bDyCVal) {\n              let d2Length = outBackprop[${w}];\n              for (var d2: u32 = 0; d2 < d2Length; d2 = d2 + 4) {\n                let wValue0 = ${_.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};\n                let wValue1 = ${_.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};\n                let wValue2 = ${_.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};\n                let wValue3 = ${_.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};\n\n                var xValue = ${B.get("batch","idyR","idyC","d2")};\n                let tmpval = vec4<${d}>(dot(xValue, wValue0),\n                                      dot(xValue, wValue1),\n                                      dot(xValue, wValue2),\n                                      dot(xValue, wValue3));\n                dotProd[0] = dotProd[0] + tmpval;\n              }\n            } else if (bDyCVal2) {\n              let d2Length = outBackprop[3];\n              for (var d2: u32 = 0; d2 < d2Length; d2 = d2 + 4) {\n                let wValue0 = ${_.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};\n                let wValue1 = ${_.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};\n                let wValue2 = ${_.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};\n                let wValue3 = ${_.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};\n\n                var xValue = ${B.get("batch","idyR","idyC2","d2")};\n                let tmpval = vec4<${d}>(dot(xValue, wValue0),\n                                      dot(xValue, wValue1),\n                                      dot(xValue, wValue2),\n                                      dot(xValue, wValue3));\n                dotProd[1] = dotProd[1] + tmpval;\n              }\n            }\n          }\n        }\n\n        for (var i: u32 = 0; i < ${v}; i = i + 1) {\n          let value = dotProd[i] + ${n?"bias[c+i]":"0.0"};\n          ${z.set("batch","r","c + i","d1","value")};\n        }\n      }`,K=`\n          let outputIndices = ${z.offsetToIndices("global_idx")};\n          let batch = ${z.indicesGet("outputIndices",0)};\n          let d1 = ${z.indicesGet("outputIndices",w)};\n          let r = ${z.indicesGet("outputIndices",p)};\n          let c = ${z.indicesGet("outputIndices",h)};\n          let dyCorner = vec2<i32>(i32(r), i32(c)) - pads;\n          let dyRCorner = dyCorner.x;\n          let dyCCorner = dyCorner.y;\n          let groupId = d1 / ${A};\n          let wOutChannel = d1 - groupId * ${A};\n          // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n          // ? = to be determined. : = across all values in that axis.\n          var dotProd = 0.0;\n          for (var wR: u32 = 0; wR < effectiveFilterDims.x; wR = wR + 1) {\n            if (wR % dilations.x != 0) {\n              continue;\n            }\n            let dyR = (${d}(dyRCorner) + ${d}(wR)) / ${d}(strides[0]);\n            let wRPerm = filterDims.x - 1 - wR / dilations.x;\n            if (dyR < 0.0 || dyR >= ${d}(outBackprop[${p}]) || fract(dyR) > 0.0 ||\n                wRPerm < 0) {\n              continue;\n            }\n            let idyR: u32 = u32(dyR);\n\n            for (var wC: u32 = 0; wC < effectiveFilterDims.y; wC = wC + 1) {\n              if (wC % dilations.y != 0) {\n                continue;\n              }\n              let dyC = (${d}(dyCCorner) + ${d}(wC)) / ${d}(strides.y);\n              let wCPerm = filterDims.y - 1 - wC / dilations.y;\n              if (dyC < 0.0 || dyC >= ${d}(outBackprop[${h}]) ||\n                  fract(dyC) > 0.0 || wCPerm < 0) {\n                continue;\n              }\n              let idyC: u32 = u32(dyC);\n              var inputChannel = groupId * ${I};\n              for (var d2: u32 = 0; d2 < ${I}; d2 = d2 + 1) {\n                let xValue = ${a?B.get("batch","idyR","idyC","inputChannel"):B.get("batch","inputChannel","idyR","idyC")};\n                let wValue = ${_.get("inputChannel","wOutChannel","u32(wRPerm)","u32(wCPerm)")};\n                dotProd = dotProd + xValue * wValue;\n                inputChannel = inputChannel + 1;\n              }\n            }\n          }\n          let value = dotProd + ${n?"bias[d1]":"0.0"};\n          ${z.setByOffset("global_idx","value")};\n        `;return`\n  ${e.declareVariables(...E,z)}\n  ${C}\n  const outShape : vec4<u32> = vec4<u32>(${o.join(",")});\n  const outBackprop : vec4<u32> = vec4<u32>(${t[0].dims.join(",")});\n  const strides : vec2<u32> = vec2<u32>(${r.strides[0]}, ${r.strides[1]});\n  const filterDims : vec2<u32> = vec2<u32>(${r.kernelShape[a?1:2]}, ${r.kernelShape[a?2:3]});\n  const dilations : vec2<u32> = vec2<u32>(${r.dilations[0]}, ${r.dilations[1]});\n  const effectiveFilterDims : vec2<u32> = filterDims + vec2<u32>(\n          ${r.dilations[0]<=1?0:(r.kernelShape[a?1:2]-1)*(r.dilations[0]-1)},\n          ${r.dilations[1]<=1?0:(r.kernelShape[a?2:3]-1)*(r.dilations[1]-1)});\n  const pads : vec2<i32> = vec2<i32>(i32(effectiveFilterDims[0]) - 1 - (${r.pads[0]+r.pads[2]})/2,\n                                     i32(effectiveFilterDims[1]) - 1 - (${r.pads[1]+r.pads[3]})/2);\n    ${e.mainStart()}\n    ${e.guardAgainstOutOfBoundsWorkgroupSizes(g)};\n  ${u?V:K}}`},Wn=(e,t,r)=>{let o=e.length>2,n=t.outputShape,s=W.size(n),u=[Math.ceil(s/64),1,1];Pe("verbose",()=>`[conv2d_backprop_webgpu] dispatch = ${u}`);let d=_e(e[0].dataType);return{name:"ConvTranspose2D",shaderCache:{hint:t.cacheKey},getRunData:()=>({dispatchGroup:{x:u[0],y:u[1],z:u[2]},outputs:[{dims:r?r(n):n,dataType:e[0].dataType}]}),getShaderSource:a=>nd(a,e,t,n,o,u[1]===1&&u[2]===1,!1,d)}}});var od,ad,id,Ni,Ui,sd,ud,ld,dd,Hi,Gi=F(()=>{"use strict";Oe();Vi();Wi();Et();Vt();od=(e,t,r,o,n,s)=>(e-1)*t+r+(o-1)*n+1-s,ad=(e,t,r,o,n)=>{let s=Math.floor(e/2);t==="SAME_UPPER"?(r[o]=s,r[n]=e-s):t==="SAME_LOWER"&&(r[o]=e-s,r[n]=s)},id=(e,t,r,o,n,s,u,d,a,p)=>{let h=e.length-2,w=p.length===0;if(a.length===0)for(let b=0;b<h;++b)a.push(0);let g=e[0],v=t[d?3:1]*n;for(let b=0,S=e.length-h-(d?1:0);b<h;++b,++S){let I=e[S],A=w?I*u[b]:p[b],C=od(I,u[b],s[b],t[S],r[b],A);ad(C,o,s,b,b+h),w&&p.push(u[b]*(I-1)+a[b]+(t[S]-1)*r[b]+1-s[b]-s[b+h])}p.splice(0,0,g),p.splice(d?3:1,0,v)},Ni=(e,t)=>{let r=e.kernelShape.slice();if(e.kernelShape.length===0||e.kernelShape.reduce((g,v)=>g*v,1)===0){r.length=0;for(let g=2;g<t[1].dims.length;++g)r.push(t[1].dims[g])}let o=e.format==="NHWC";r.splice(0,0,t[1].dims[0]),r.splice(o?3:1,0,t[1].dims[1]);let n=e.pads.slice(),s=e.outputShape.slice(),u=e.outputPadding.slice(),d=t[0].dims,a=e.dilations.slice();if(a.reduce((g,v)=>g+v,0)===0){let g=t[0].dims.length-2;a=new Array(g).fill(1)}let p=e.strides.slice();if(p.reduce((g,v)=>g+v,0)===0){let g=t[0].dims.length-2;p=new Array(g).fill(1)}id(d,r,a,e.autoPad,e.group,n,p,o,u,s);let h=Object.assign({},e),w=e.cacheKey+[r.join("n,"),n.join(","),p.join(","),u.join(","),s.join(","),a.join(",")].join("_");return Object.assign(h,{kernelShape:r,pads:n,outputPadding:u,outputShape:s,dilations:a,strides:p,cacheKey:w}),h},Ui=e=>{let t=jr(e),r=e.format,o=["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][typeof e.autoPad>"u"?0:e.autoPad],n=e.dilations,s=e.group,u=e.kernelShape,d=e.pads,a=e.strides,p=e.wIsConst(),h=e.outputPadding,w=e.outputShape;return J({autoPad:o,format:r,dilations:n,group:s,kernelShape:u,outputPadding:h,outputShape:w,pads:d,strides:a,wIsConst:p,...t})},sd=(e,t)=>{if(!e||e.length!==2&&e.length!==3)throw new Error("Conv requires 2 or 3 inputs");if(e[0].dims.length!==4&&e[0].dims.length!==3)throw new Error("currently only support 2-dimensional conv");if(e[0].dims.length!==e[1].dims.length)throw new Error("filter does not have same dimension as input");let r=e[0].dims[t.format==="NHWC"?e[0].dims.length-1:1],o=e[1].dims[0];if(r!==o)throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");let n=e[1].dims[1]*t.group;if(e.length===3&&(e[2].dims.length!==1||e[2].dims[0]!==n))throw new Error("invalid bias");let s=e[0].dims.length-2;if(t.dilations.reduce((h,w)=>h+w,0)>0&&t.dilations.length!==s)throw new Error(`dilations should be ${s}D`);if(t.strides.reduce((h,w)=>h+w,0)>0&&t.strides.length!==s)throw new Error(`strides should be ${s}D`);if(t.pads.reduce((h,w)=>h+w,0)>0&&t.pads.length!==s*2)throw new Error(`pads should be ${s*2}D`);if(t.outputPadding.length!==s&&t.outputPadding.length!==0)throw new Error(`output_padding should be ${s}D`);if(t.kernelShape.reduce((h,w)=>h+w,0)>0&&t.kernelShape.length!==0&&t.kernelShape.length!==e[1].dims.length-2)throw new Error("invalid kernel shape");if(t.outputShape.length!==0&&t.outputShape.length!==e[0].dims.length-2)throw new Error("invalid output shape")},ud=[2,3,1,0],ld=(e,t,r)=>{let o=Ni(r,t),n=r.format==="NHWC",s=t.length===3;if(o.group!==1){e.compute(Wn(t,o));return}let u=o.outputShape,d=u[n?1:2],a=u[n?2:3],p=u[n?3:1],h=t[1].dims[2],w=t[1].dims[3],g=t[0].dims[n?3:1],v=n?d*a:p,b=n?p:d*a,S=h*w*g,I=!0,A=e.kernelCustomData.wT??e.compute(et(t[1],ud),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=A);let C=[t[0],A];s&&(!n&&t[2].dims.length===1?C.push(t[2].reshape([t[2].dims[0],1,1])):C.push(t[2])),e.compute(zi(C,o,u,v,b,S,s,I),{inputs:C})},dd=(e,t)=>{let r=t.format==="NHWC",o=[e.inputs[0].reshape(r?[e.inputs[0].dims[0],1,e.inputs[0].dims[1],e.inputs[0].dims[2]]:[e.inputs[0].dims[0],e.inputs[0].dims[1],1,e.inputs[0].dims[2]]),e.inputs[1].reshape([e.inputs[1].dims[0],e.inputs[1].dims[1],1,e.inputs[1].dims[2]])];o.length===3&&o.push(e.inputs[2]);let n=t.kernelShape;(n.length===0||n[0]===0)&&(n=[e.inputs[1].dims[2]]);let s=t.dilations;(s.length===0||s[0]===0)&&(s=[1]);let u=t.strides;(u.length===0||u[0]===0)&&(u=[1]);let d=t.pads;d.length===0&&(d=[0,0]),d=[0,d[0],0,d[1]],u=[1].concat(u),s=[1].concat(s),n=[1].concat(n);let a=Ni({...t,pads:d,strides:u,dilations:s,kernelShape:n},o);e.compute(Wn(o,a,p=>r?[p[0],p[2],p[3]]:[p[0],p[1],p[3]]))},Hi=(e,t)=>{sd(e.inputs,t),e.inputs[0].dims.length===3?dd(e,t):ld(e,e.inputs,t)}});var Nn,Xr,Li,cd,pd,Un,Hn,md,Fi,ji,qi=F(()=>{"use strict";be();Oe();we();Nn="[a-zA-Z]|\\\\.\\\\.\\\\.",Xr="("+Nn+")+",Li="^"+Xr+"$",cd="("+Xr+",)*"+Xr,pd="^"+cd+"$",Un=class{constructor(t=-1){this.symbolToIndices=new Map,this.inputIndex=t}addSymbol(t,r){let o=this.symbolToIndices.get(t);o===void 0?o=[r]:o.push(r),this.symbolToIndices.set(t,o)}},Hn=class{constructor(t,r){this.equation=r;this.hasEllipsis=!1,this.symbolToInfo=new Map,this.lhs=new Array,this.outputDims=[];let[o,n]=r.includes("->")?r.split("->",2):[r,""];if(!o.match(RegExp(pd)))throw new Error("Invalid LHS term");if(o.split(",").forEach((d,a)=>{let p=t[a].dims.slice();if(!d.match(RegExp(Li)))throw new Error("Invalid LHS term");let h=this.processTerm(d,!0,p,a);this.lhs.push(h)}),n==="")n+=[...this.symbolToInfo.entries()].filter(([d,a])=>a.count===1||d==="...").map(([d])=>d).join("");else if(!n.match(RegExp(Xr)))throw new Error("Invalid RHS");n.match(RegExp(Nn,"g"))?.forEach(d=>{if(d==="...")this.outputDims=this.outputDims.concat(this.ellipsisDims);else{let a=this.symbolToInfo.get(d);if(a===void 0)throw new Error("Invalid RHS symbol");this.outputDims.push(a.dimValue)}}),this.rhs=this.processTerm(n,!0,this.outputDims)}addSymbol(t,r,o){let n=this.symbolToInfo.get(t);if(n!==void 0){if(n.dimValue!==r&&n.count!==1)throw new Error("Dimension mismatch");n.count++,n.inputIndices.push(o)}else n={count:1,dimValue:r,inputIndices:[o]};this.symbolToInfo.set(t,n)}processTerm(t,r,o,n=-1){let s=o.length,u=!1,d=[],a=0;if(!t.match(RegExp(Li))&&!r&&t!=="")throw new Error("Invalid LHS term");let p=t.match(RegExp(Nn,"g")),h=new Un(n);return p?.forEach((w,g)=>{if(w==="..."){if(u)throw new Error("Only one ellipsis is allowed per input term");u=!0;let v=s-p.length+1;if(v<0)throw new Error("Ellipsis out of bounds");if(d=o.slice(a,a+v),this.hasEllipsis){if(this.ellipsisDims.length!==d.length||this.ellipsisDims.toString()!==d.toString())throw new Error("Ellipsis dimensions mismatch")}else if(r)this.hasEllipsis=!0,this.ellipsisDims=d;else throw new Error("Ellipsis must be specified in the LHS");for(let b=0;b<d.length;b++){let S=String.fromCharCode("0".charCodeAt(0)+g);h.addSymbol(S,g+b),this.addSymbol(S,o[a++],n)}}else h.addSymbol(w,g),this.addSymbol(w,o[a++],n)}),h}},md=(e,t)=>{let r=e[0].dataType,o=new Array(e.length);for(let R=0;R<e.length;++R)o[R]=U(`input${R}`,r,e[R].dims);let n=t.outputDims,s=W.size(n),u=j("output",r,n),d=[],a=Array.from(t.rhs.symbolToIndices.keys()),p="var prod = 1.0;",h="var sum = 0.0;",w="sum += prod;",g=[],v=[],b=[],S=[],I=t.symbolToInfo.size===a.length;t.symbolToInfo.forEach((R,_)=>{if(a.includes(_)){let B=a.indexOf(_);t.lhs.forEach((E,z)=>{if(R.inputIndices.includes(z)){let V=E.symbolToIndices.get(_);if(V===void 0)throw new Error("Invalid symbol error");V.forEach(K=>{d.push(`${o[z].indicesSet(`input${z}Indices`,K,u.indicesGet("outputIndices",B))}`)})}})}else t.lhs.forEach((B,E)=>{let z=t.symbolToInfo.get(_);if(z===void 0)throw new Error("Invalid symbol error");if(z.inputIndices.includes(E)){let V=B.symbolToIndices.get(_);if(V===void 0)throw new Error("Invalid symbol error");V.forEach(K=>{g.push(`${o[E].indicesSet(`input${E}Indices`,K,`${_}`)}`)}),S.push(`prod *= ${o[E].getByIndices(`input${E}Indices`)};`)}}),v.push(`for(var ${_}: u32 = 0; ${_} < ${t.symbolToInfo.get(_)?.dimValue}; ${_}++) {`),b.push("}")});let A=I?[...d,`let sum = ${o.map((R,_)=>R.getByIndices(`input${_}Indices`)).join(" * ")};`]:[...d,h,...v,...g,p,...S,w,...b],C=R=>`\n      ${R.declareVariables(...o,u)}\n\n      ${R.mainStart()}\n        ${R.guardAgainstOutOfBoundsWorkgroupSizes(s)}\n        var outputIndices = ${u.offsetToIndices("global_idx")};\n        ${o.map((_,B)=>`var input${B}Indices: ${o[B].type.indices};`).join(`\n`)}\n        ${A.join(`\n`)};\n        ${u.setByOffset("global_idx","sum")};\n      }`;return{name:"Einsum",shaderCache:{hint:t.equation},getRunData:()=>({outputs:[{dims:n,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(s/64)}}),getShaderSource:C}},Fi=(e,t)=>{let r=new Hn(e.inputs,t.equation);e.compute(md(e.inputs,r))},ji=e=>{let t=e.equation.replace(/\\s+/g,"");return J({equation:t})}});var fd,Ki,hd,gd,Yi,Zi=F(()=>{"use strict";be();we();fd=e=>{if(!e||e.length!==2)throw new Error("Expand requires 2 input.");let t=e[0].dims,r=Array.from(e[1].getBigInt64Array(),Number),o=r.length<t.length?0:r.length-t.length,n=t.length<r.length?0:t.length-r.length;for(;o<r.length&&n<t.length;++o,++n)if(r[o]!==t[n]&&r[o]!==1&&t[n]!==1)throw new Error("Expand requires shape to be broadcastable to input")},Ki=(e,t)=>{let r=e.length-t.length,o=[];for(let n=0;n<r;++n)o.push(e[n]);for(let n=0;n<t.length;++n)o.push(t[n]===1?e[n+r]:t[n]);return o},hd=(e,t)=>e.length>t.length?Ki(e,t):Ki(t,e),gd=e=>{let t=e[0].dims,r=Array.from(e[1].getBigInt64Array(),Number),o=hd(t,r),n=W.size(o),s=e[0].dataType,u=ke(t.length),d=u?t.length:t,a=U("input",s,d),p=ke(o.length),h=p?o.length:o,w=j("output",s,h),g=b=>`\n  const inputShape = ${a.indices(...t)};\n  ${b.registerUniform("vec_size","u32").declareVariables(a,w)}\n  ${b.mainStart()}\n  ${b.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}\n    let outputIndices = ${w.offsetToIndices("global_idx")};\n    var inputIndices: ${a.type.indices};\n    for (var i = 0; i < ${t.length}; i++) {\n      if (${a.indicesGet("inputShape","i")} == 1) {\n        ${a.indicesSet("inputIndices","i",0)}\n      } else {\n        ${a.indicesSet("inputIndices","i",w.indicesGet("outputIndices",`i + ${o.length-t.length}`))}\n      }\n    }\n    ${w.setByOffset("global_idx",a.getByIndices("inputIndices"))}\n  }`,v=[{type:"uint32",data:n}];return u&&v.push(...pe(t)),p&&v.push(...pe(o)),{name:"Expand",shaderCache:{hint:`${o}`,inputDependencies:[u?"rank":"dims"]},getShaderSource:g,getRunData:()=>({outputs:[{dims:o,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(n/64)},programUniforms:v})}},Yi=e=>{fd(e.inputs),e.compute(gd(e.inputs),{inputs:[0]})}});var yd,bd,Xi,Qi,Ji=F(()=>{"use strict";be();Oe();we();yd=e=>{if(!e||e.length!==2)throw new Error("Gather requires 2 inputs.")},bd=(e,t)=>{let r=e[0].dims,o=e[1].dims,n=r.length,s=W.normalizeAxis(t.axis,n),u=r.slice(0);u.splice(s,1,...o);let d=r[s],a=W.size(u),p=ke(e[0].dims.length),h=p?e[0].dims.length:e[0].dims,w=ke(e[1].dims.length),g=w?e[1].dims.length:e[1].dims,v=ke(u.length),b=v?u.length:u,S=U("data",e[0].dataType,h),I=U("inputIndices",e[1].dataType,g),A=j("output",e[0].dataType,b),C=[{type:"uint32",data:a},{type:"int32",data:d},{type:"uint32",data:s}];p&&C.push(...pe(e[0].dims)),w&&C.push(...pe(e[1].dims)),v&&C.push(...pe(u));let R=[];R.push(p?"rank":"dims"),R.push(w?"rank":"dims");let _=()=>{let E=o.length,z=`var indicesIndices  = ${I.type.indices}(0);`;for(let V=0;V<E;V++)z+=`${E>1?`indicesIndices[${V}]`:"indicesIndices"} = ${u.length>1?`outputIndices[uniforms.axis + ${V}]`:"outputIndices"};`;z+=`\n        var idx = ${I.getByIndices("indicesIndices")};\n        if (idx < 0) {\n          idx = idx + uniforms.axisDimLimit;\n        }\n        var dataIndices = ${S.type.indices}(0);\n      `;for(let V=0,K=0;V<n;V++)V===s?(z+=`${n>1?`dataIndices[${V}]`:"dataIndices"} = u32(idx);`,K+=E):(z+=`${n>1?`dataIndices[${V}]`:"dataIndices"} = ${u.length>1?`outputIndices[${K}]`:"outputIndices"};`,K++);return z},B=E=>`\n      ${E.registerUniform("outputSize","u32").registerUniform("axisDimLimit","i32").registerUniform("axis","u32").declareVariables(S,I,A)}\n      ${E.mainStart()}\n        ${E.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n        let outputIndices = ${A.offsetToIndices("global_idx")};\n        ${_()};\n        let value = ${S.getByIndices("dataIndices")};\n        ${A.setByOffset("global_idx","value")};\n      }`;return{name:"Gather",shaderCache:{hint:t.cacheKey,inputDependencies:R},getRunData:()=>({outputs:[{dims:u,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(a/64)},programUniforms:C}),getShaderSource:B}},Xi=e=>J({axis:e.axis}),Qi=(e,t)=>{let r=e.inputs;yd(r),e.compute(bd(e.inputs,t))}});var wd,vd,es,ts,rs=F(()=>{"use strict";be();Oe();we();wd=e=>{if(!e||e.length!==2)throw new Error("GatherElements requires 2 inputs.");if(e[0].dims.length<1)throw new Error("GatherElements requires that the data input be rank >= 1.");if(e[0].dims.length!==e[1].dims.length)throw new Error(`GatherElements requires that the data input and\n                     indices input tensors be of same rank.`)},vd=(e,t)=>{let r=e[0].dims,o=e[0].dataType,n=r.length,s=W.computeStrides(r),u=W.size(r),d=e[1].dims,a=e[1].dataType,p=W.size(d),h=W.normalizeAxis(t.axis,n),w=r[h],g=d.slice(0),v=W.size(g),b=U("input",o,r),S=U("indices",a,[p]),I=j("output",o,g),A=C=>`\n      const inputStrides = array<u32, ${s.length}>(${s.map(R=>`${R}u`).join(",")});\n      ${C.declareVariables(b,S,I)}\n      ${C.mainStart()}\n      ${C.guardAgainstOutOfBoundsWorkgroupSizes(v)}\n\n      let outputIndices = ${I.offsetToIndices("global_idx")};\n\n      var idx = ${S.getByOffset("global_idx")};\n      if (idx < 0) {\n        idx = idx + ${w};\n      }\n\n      var srcOffset = u32(0);\n\n      for (var i = 0; i < ${r.length}; i++) {\n        if (i == ${h}) {\n          srcOffset +=  u32(idx) * inputStrides[i];\n        } else {\n          srcOffset += ${I.indicesGet("outputIndices","i")} * inputStrides[i];\n        }\n      }\n\n      // Should never hit this with valid values in indices\n      // This is a guard against malicious data in the indices input\n      if (srcOffset < 0 || srcOffset >= ${u}) {\n        return;\n      }\n\n      output[global_idx] = input[srcOffset];\n  }`;return{name:"GatherElements",shaderCache:{hint:t.cacheKey},getRunData:()=>({outputs:[{dims:g,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(v/64)}}),getShaderSource:A}},es=e=>J({axis:e.axis}),ts=(e,t)=>{let r=e.inputs;wd(r),e.compute(vd(e.inputs,t))}});var $d,Sd,xd,ns,os,as=F(()=>{"use strict";be();Oe();we();$d=e=>{if(!e)throw new Error("Input is missing");if(e.length<2||e.length>3)throw new Error("Invaid input number.");if(e.length===3&&e[2].dims.length>2)throw new Error("Invalid input shape of C");if(e[0].dataType!==e[1].dataType||e.length===3&&e[0].dataType!==e[2].dataType)throw new Error("Input types are mismatched")},Sd=(e,t,r)=>{if(r.length===0)return"0u";let o=r.length===1&&e!==1||r.length===2&&r[0]!==e,n=r[r.length-1]!==t,s="0u";return o||(s+=`+ m * ${r[r.length-1]}u`),n||(s+="+n"),s},xd=(e,t)=>{let r=e[0].dims.slice(),o=e[1].dims.slice(),[n,s,u]=Br.getShapeOfGemmResult(r,t.transA,o,t.transB,e.length===3?e[2].dims:void 0),d=[n,s];if(!d)throw new Error("Can\'t use gemm on the given tensors");let a=W.size(d),p="";t.transA&&t.transB?p="value += a[k * M + m] * b[n * K + k];":t.transA&&!t.transB?p="value += a[k * M + m] * b[k * N + n];":!t.transA&&t.transB?p="value += a[m * K + k] * b[n * K + k];":!t.transA&&!t.transB&&(p="value += a[m * K + k] * b[k * N + n];");let h=_e(e[0].dataType),w=t.alpha===1?"":"value *= alpha;",g=e.length===3?`value += beta * c[${Sd(n,s,e[2].dims)}];`:"",v=[`@group(0) @binding(0) var<storage, read> a : array<${h}>;`,`@group(0) @binding(1) var<storage, read> b : array<${h}>;`];e.length===3&&v.push(`@group(0) @binding(2) var<storage, read> c : array<${h}>;`);let b=S=>`\n  const M: u32 = ${n}u;\n  const N: u32 = ${s}u;\n  const K: u32 = ${u}u;\n  const alpha = ${h}(${t.alpha});\n  const beta = ${h}(${t.beta});\n\n  ${v.join(`\n`)}\n  @group(0) @binding(${e.length}) var<storage, read_write> output : array<${h}>;\n\n  ${S.mainStart()}\n    ${S.guardAgainstOutOfBoundsWorkgroupSizes(a)}\n\n    let m = global_id.x / N;\n    let n = global_id.x % N;\n\n    var value = ${h}(0);\n    for (var k: u32 = 0u; k<${u}u; k++) {\n      ${p}\n    }\n\n    ${w}\n    ${g}\n    output[global_id.x] = value;\n\n  }`;return{name:"Gemm",shaderCache:{hint:t.cacheKey},getRunData:()=>({outputs:[{dims:d,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(a/64)}}),getShaderSource:b}},ns=(e,t)=>{$d(e.inputs),e.compute(xd(e.inputs,t))},os=e=>J(e)});var Cd,Id,Ad,_d,is,ss,us=F(()=>{"use strict";Ve();be();Oe();we();Cd={name:"InstanceNormalization"},Id=(e,t)=>{let r=e[0].dims,o=r,n=2,s=W.sizeToDimension(r,n),u=W.sizeFromDimension(r,n),d=r[1],a=U("x",e[0].dataType,[r[0],r[1],u]),p=U("scale",e[1].dataType,e[1].dims),h=U("bias",e[2].dataType,e[2].dims),w=j("output",e[0].dataType,[r[0],r[1],u]),g=[a,p,h,w],v=a.type.value,b=64,S=I=>`\n\n  const C: u32 = ${d};\n  const normSize: u32 = ${u};\n  const epsilon: f32 = ${t.epsilon};\n  var<workgroup> meanShared : ${v};\n  var<workgroup> squaredNormShared : ${v};\n  var<workgroup> workgroupShared : array<${v}, ${b}>;\n  const workgroupSize = ${b}u;\n  ${I.declareVariables(...g)}\n  ${I.mainStart(b)}\n    let norm = global_idx / workgroupSize;\n    let batch = norm / C;\n    let channel = norm % C;\n    let localIndex = local_id.x;\n\n    // initialize workgroup memory\n    var initial: ${v} = 0;\n    for (var h = localIndex; h < normSize; h += workgroupSize) {\n      initial = initial + ${a.get("batch","channel","h")};\n    }\n    workgroupShared[localIndex] = initial;\n    workgroupBarrier();\n\n    // Calculate the mean of current channel data.\n    for (var currSize = workgroupSize >> 1;  currSize > 0; currSize = currSize >> 1) {\n      if (localIndex < currSize) {\n        workgroupShared[localIndex] = workgroupShared[localIndex] + workgroupShared[localIndex + currSize];\n      }\n      workgroupBarrier();\n    }\n    if (localIndex == 0) {\n      meanShared = workgroupShared[0] / ${v}(normSize);\n    }\n    workgroupBarrier();\n\n    // reinitialize workgroup memory.\n    initial = 0;\n    for (var h = localIndex; h < normSize; h += workgroupSize) {\n      let deviation =  ${a.get("batch","channel","h")} - meanShared;\n      initial = initial + deviation * deviation;\n    }\n    workgroupShared[localIndex] = initial;\n    workgroupBarrier();\n\n    // Calculate the sum of square of deviation of current channel data.\n    for (var currSize = workgroupSize >> 1;  currSize > 0; currSize = currSize >> 1) {\n      if (localIndex < currSize) {\n        workgroupShared[localIndex] = workgroupShared[localIndex] + workgroupShared[localIndex + currSize];\n      }\n      workgroupBarrier();\n    }\n    if (localIndex == 0) {\n      squaredNormShared = workgroupShared[0];\n    }\n    workgroupBarrier();\n\n    let invStdDev = 1 / sqrt(squaredNormShared / ${v}(normSize) + epsilon);\n    let channelScale = invStdDev * ${p.getByOffset("channel")};\n    let channelShift = ${h.getByOffset("channel")} - meanShared * channelScale;\n    for (var h = localIndex; h < normSize; h += workgroupSize) {\n      let value = ${a.get("batch","channel","h")} * channelScale + channelShift;\n      ${w.set("batch","channel","h","value")};\n    }\n  }`;return{...Cd,shaderCache:{hint:t.cacheKey},getRunData:()=>({outputs:[{dims:o,dataType:e[0].dataType}],dispatchGroup:{x:s}}),getShaderSource:S}},Ad=(e,t,r,o,n,s,u,d)=>{let a=qe(u),p=U("input",t.dataType,t.dims,a),h=U("scale",r.dataType,r.dims,a),w=U("bias",o.dataType,o.dims,a),g=64,v=a===1?"vec2f":`mat2x${a}f`,b=a===1?"f32":`vec${a}f`,S=(B,E)=>`${v}(${B}, ${E})`,I=n*u/a,A=Math.ceil(s/g),C=B=>`\n  const H: u32 = ${s};\n  const C: u32 = ${u/a};\n  const imageSize: u32 = ${s*u/a};\n\n  ${B.declareVariables(p)}\n  @group(0) @binding(1) var<storage, read_write> output : array<${v}>;\n\n  ${B.mainStart(g)}\n    let currentImageNumber = global_idx / ${g} / C;\n    let currentChannelNumber = (global_idx / ${g}) % C;\n    let wgId = global_idx % ${g};\n    let wgOffset = wgId * ${A};\n    if (wgOffset >= H) {\n        return;\n    }\n    let wgMax = min(wgOffset + ${A}, H);\n\n    let offset = currentImageNumber * imageSize + currentChannelNumber;\n    var sum = ${Ge("f32",a)};\n    var squaredSum = ${Ge("f32",a)};\n    for (var i: u32 = wgOffset; i < wgMax; i++) {\n        let value = ${b}(input[offset + i * C]);\n        sum += value;\n        squaredSum += value * value;\n    }\n    output[global_idx] = ${S("sum","squaredSum")};\n  }`,R=e.compute({name:"InstanceNormComputeMean",shaderCache:{hint:JSON.stringify({components:a,n,h:s,c:u})},getRunData:()=>({outputs:[{dims:[n,u,g,2],dataType:1}],dispatchGroup:{x:n*u/a}}),getShaderSource:C},{inputs:[t],outputs:[-1]})[0],_=B=>`\n  const H: u32 = ${s};\n  const C: u32 = ${u/a};\n  const imageSize: u32 = ${g*u/a};\n  const epsilon: f32 = ${d};\n\n  @group(0) @binding(0) var<storage, read> input : array<${v}>;\n  @group(0) @binding(1) var<storage, read> scale : array<${h.type.storage}>;\n  @group(0) @binding(2) var<storage, read> bias : array<${w.type.storage}>;\n  @group(0) @binding(3) var<storage, read_write> output : array<${v}>;\n\n  ${B.mainStart()}\n    ${B.guardAgainstOutOfBoundsWorkgroupSizes(I)}\n    let currentImageNumber = global_idx / C;\n    let currentChannelNumber = global_idx % C;\n\n    let offset = currentImageNumber * imageSize;\n    var sum = ${Ge("f32",a)};\n    var squaredSum = ${Ge("f32",a)};\n    for (var i: u32 = 0; i < ${g}; i++) {\n        let value = input[offset + i + currentChannelNumber * ${g}];\n        sum += value[0];\n        squaredSum += value[1];\n    }\n    sum = sum / f32(H);\n    squaredSum = squaredSum / f32(H);\n    let invStdDev = 1 / sqrt(squaredSum - sum * sum + epsilon);\n    let channelScale = invStdDev * ${b}(scale[currentChannelNumber]);\n    let channelShift = ${b}(bias[currentChannelNumber]) - sum * channelScale;\n\n    output[global_idx] = ${S("channelScale","channelShift")};\n  }`;return e.compute({name:"InstanceNormComputeChannelScaleShift",shaderCache:{hint:JSON.stringify({components:a,n,h:s,c:u,epsilon:d})},getRunData:()=>({outputs:[{dims:[n,u,2],dataType:1}],dispatchGroup:{x:Math.ceil(I/64)}}),getShaderSource:_},{inputs:[R,r,o],outputs:[-1]})[0]},_d=(e,t,r)=>{let o=t[0].dims,n=o,s=o[0],u=o[o.length-1],d=W.sizeFromDimension(o,1)/u,a=qe(u),p=W.size(n)/a,h=U("input",t[0].dataType,t[0].dims,a),w=j("output",t[0].dataType,n,a),g=_e(t[0].dataType),v=a===1?"vec2f":`mat2x${a}f`,b=a===1?g:`vec${a}<${g}>`,S=Ad(e,t[0],t[1],t[2],s,d,u,r.epsilon),I=A=>`\n  const H: u32 = ${d};\n  const C: u32 = ${u/a};\n\n  @group(0) @binding(0) var<storage, read> input : array<${h.type.storage}>;\n  @group(0) @binding(1) var<storage, read> scaleInput : array<${v}>;\n  @group(0) @binding(2) var<storage, read_write> output : array<${w.type.storage}>;\n\n  ${A.mainStart()}\n    let currentImageNumber = global_idx / (C * H);\n    let currentChannelNumber = global_idx % C;\n\n    let scaleOffset = currentImageNumber * C + currentChannelNumber;\n    let scale = scaleInput[scaleOffset];\n    output[global_idx] = fma(input[global_idx], ${b}(scale[0]), ${b}(scale[1]));\n  }`;e.compute({name:"InstanceNormalization",shaderCache:{hint:`${r.cacheKey}`},getRunData:()=>({outputs:[{dims:n,dataType:t[0].dataType}],dispatchGroup:{x:Math.ceil(p/64)}}),getShaderSource:I},{inputs:[t[0],S]})},is=e=>J({epsilon:e.epsilon,format:e.format}),ss=(e,t)=>{t.format==="NHWC"?_d(e,e.inputs,t):e.compute(Id(e.inputs,t))}});var Td,Ed,ls,ds,cs=F(()=>{"use strict";Ve();be();Oe();we();Td=e=>{if(!e||e.length<2)throw new Error("layerNorm requires at least 2 inputs.")},Ed=(e,t,r)=>{let o=e[0].dims,n=e[1],s=e[2],u=o,d=W.normalizeAxis(t.axis,o.length),a=W.sizeToDimension(o,d),p=W.sizeFromDimension(o,d),h=W.size(n.dims),w=s?W.size(s.dims):0;if(h!==p||s&&w!==p)throw new Error(`Size of X.shape()[axis:] == ${p}.\n       Size of scale and bias (if provided) must match this.\n       Got scale size of ${h} and bias size of ${w}`);let g=[];for(let _=0;_<o.length;++_)_<d?g.push(o[_]):g.push(1);let v=qe(p),b=_e(e[0].dataType),S=[U("x",e[0].dataType,e[0].dims,v),U("scale",n.dataType,n.dims,v)];s&&S.push(U("bias",s.dataType,s.dims,v)),S.push(j("output",e[0].dataType,u,v));let I=r>1,A=r>2;I&&S.push(j("meanDataOutput",1,g)),A&&S.push(j("invStdOutput",1,g));let C=_=>`\n  const normSize: f32 = ${p};\n  const normSizeVectorized: u32 = ${p/v};\n  const epsilon: f32 = ${t.epsilon};\n\n  ${_.declareVariables(...S)}\n  ${_.mainStart()}\n    ${_.guardAgainstOutOfBoundsWorkgroupSizes(a)}\n    let offset = global_idx * normSizeVectorized;\n    var meanVector = ${Ge("f32",v)};\n    var meanSquareVector = ${Ge("f32",v)};\n\n    for (var h: u32 = 0u; h < normSizeVectorized; h++) {\n      let value = ${Qe(b,v,"x[h + offset]")};\n      meanVector += value;\n      meanSquareVector += value * value;\n    }\n    let mean = ${Je("meanVector",v)} / normSize;\n    let meanSquare = sqrt(${Je("meanSquareVector",v)} \n      / normSize - mean * mean + epsilon);\n\n    for (var j: u32 = 0; j < normSizeVectorized; j++) {\n      let f32input = ${Qe(b,v,"x[j + offset]")};\n      let f32scale = ${Qe(b,v,"scale[j]")};\n      output[j + offset] = ${S[0].type.value}((f32input - mean) / meanSquare * f32scale\n        ${s?`+ ${Qe(b,v,"bias[j]")}`:""}\n      );\n    }\n\n    ${I?"meanDataOutput[global_idx] = mean":""};\n    ${A?"invStdOutput[global_idx] = 1 / meanSquare":""};\n  }`,R=[{dims:u,dataType:e[0].dataType}];return I&&R.push({dims:g,dataType:1}),A&&R.push({dims:g,dataType:1}),{name:"LayerNormalization",shaderCache:{hint:`${t.cacheKey}|${r}|${e.length}`},getRunData:()=>({outputs:R,dispatchGroup:{x:Math.ceil(a/64)}}),getShaderSource:C}},ls=e=>J({axis:e.axis,epsilon:e.epsilon}),ds=(e,t)=>{Td(e.inputs),e.compute(Ed(e.inputs,t,e.outputCount))}});var Od,ps,ms=F(()=>{"use strict";be();lr();Od=e=>{if(!e||e.length!==2)throw new Error("MatMul requires 2 inputs.");if(e[0].dims[e[0].dims.length-1]!==e[1].dims[e[1].dims.length-2])throw new Error("shared dimension does not match.")},ps=e=>{Od(e.inputs);let t=it.calcShape(e.inputs[0].dims,e.inputs[1].dims,!0);if(!t)throw new Error("Can\'t use matmul on the given tensors");e.compute(Zr(e.inputs,{activation:"",activationCacheKey:""},t))}});var kd,hs,fs,Pd,Gn,gs,ys=F(()=>{"use strict";be();Oe();Pr();En();we();Vt();kd=(e,t)=>{let r=e[0],o=e[1],n=e[2],s=e[3],u=e[4],d=e[5],a=e[6],p=e[7];if(r.dims.length!==3&&r.dims.length!==5)throw new Error("Input query is expected to have 3 or 5 dimensions");let h=!1,w=r.dims[0],g=r.dims[1],v=r.dims.length===3?h?r.dims[2]/3:r.dims[2]:t.numHeads*r.dims[4],b=g,S=0,I=0,A=Math.floor(v/t.numHeads);if(a&&p){if(a.dims.length!==4)throw new Error(\'Input "past_key" is expected to have 4 dimensions\');if(p.dims.length!==4)throw new Error(\'Input "past_value" is expected to have 4 dimensions\');S=a.dims[2],I=a.dims[2]}else if(a||p)throw new Error(\'Input "past_key" and "past_value" shall be both present or both absent\');let C;if(o){if(r.dims.length!==3)throw new Error(\'Input "query" is expected to have 3 dimensions when key is given\');if(o.dims.length<3||o.dims.length>5)throw new Error(\'Input "key" is expected to have 3, 4, or 5 dimensions\');if(r.dims[0]!==o.dims[0])throw new Error(\'Input "query" and "key" shall have same dim 0 (batch size)\');if(o.dims.length===3){if(o.dims[2]!==r.dims[2])throw new Error(\'Input "query" and "key" shall have same dim 2 (hidden_size)\');C=2,b=o.dims[1]}else if(o.dims.length===5){if(o.dims[2]!==t.numHeads||o.dims[3]!==2||o.dims[4]!==A)throw new Error(\'Expect "key" shape (batch_size, kv_sequence_length, num_heads, 2, head_size) for packed kv\');if(n)throw new Error(\'Expect "value" be none when "key" has packed kv format.\');C=5,b=o.dims[1]}else{if(o.dims[1]!==t.numHeads||o.dims[3]!==A)throw new Error(\'Expect "key" shape (batch_size, num_heads, kv_sequence_length, head_size) for past_key\');C=0,b=o.dims[2]}}else{if(r.dims.length!==3&&r.dims.length!==5)throw new Error(\'Input "query" is expected to have 3 or 5 dimensions when key is empty\');if(r.dims.length===5&&(r.dims[2]!==t.numHeads||r.dims[3]!==3))throw new Error(\'Expect "query" shape (batch_size, kv_sequence_length, num_heads, 3, head_size) for packed kv\');C=3}if(s){if(s.dims.length!==1)throw new Error(\'Input "bias" is expected to have 1 dimension\');if(n&&r.dims.length===5&&r.dims[3]===2)throw new Error("bias is not allowed for packed kv.")}let R=0;if(u){R=8;let V=u.dims;throw V.length===1?V[0]===w?R=1:V[0]===3*w+2&&(R=3):V.length===2&&V[0]===w&&V[1]===b&&(R=5),R===8?new Error(\'Input "key_padding_mask" shape shall be (batch_size) or (batch_size, kv_sequence_length)\'):new Error("Mask not supported")}let _=!1,B=v;if(n){if(n.dims.length!==3&&n.dims.length!==4)throw new Error(\'Input "value" is expected to have 3 or 4 dimensions\');if(r.dims[0]!==n.dims[0])throw new Error(\'Input "query" and "value" shall have same dim 0 (batch_size)\');if(n.dims.length===3){if(b!==n.dims[1])throw new Error(\'Input "key" and "value" shall have the same dim 1 (kv_sequence_length)\');B=n.dims[2]}else{if(b!==n.dims[2])throw new Error(\'Input "past_key" and "past_value" shall have the same dim 2 (kv_sequence_length)\');B=n.dims[1]*n.dims[3],_=!0}}let E=S+b,z=!1;if(u)throw new Error("Key padding mask is not supported");if(d)throw new Error("extraAddQk is not supported");if(a)throw new Error("pastKey is not supported");if(p)throw new Error("pastValue is not supported");return{batchSize:w,sequenceLength:g,pastSequenceLength:S,kvSequenceLength:b,totalSequenceLength:E,maxSequenceLength:I,inputHiddenSize:0,hiddenSize:v,vHiddenSize:B,headSize:A,vHeadSize:Math.floor(B/t.numHeads),numHeads:t.numHeads,isUnidirectional:!1,pastPresentShareBuffer:!1,maskFilterValue:t.maskFilterValue,maskType:R,scale:t.scale,broadcastResPosBias:z,passPastInKv:_,qkvFormat:C}},hs=e=>J({...e}),fs=J({perm:[0,2,1,3]}),Pd=(e,t,r,o,n,s,u)=>{let d=[o,n,s],a=W.size(d),p=_e(t.dataType),h=w=>`\n  const biasOffset = ${u}u;\n  const hiddenSize = ${s}u;\n\n  @group(0) @binding(0) var<storage, read> qkv: array<${p}>;\n  @group(0) @binding(1) var<storage, read> bias: array<${p}>;\n  @group(0) @binding(2) var<storage, read_write> qkv_with_bias: array<${p}>;\n\n  ${w.mainStart()}\n    ${w.guardAgainstOutOfBoundsWorkgroupSizes(a)}\n    let biasOffsetIdx = (global_idx % hiddenSize) + biasOffset;\n\n    qkv_with_bias[global_idx] = qkv[global_idx] + bias[biasOffsetIdx];\n  }`;return e.compute({name:"MultiHeadAttentionAddBias",shaderCache:{hint:JSON.stringify({batchSize:o,sequenceLength:n,hiddenSize:s,biasOffset:u})},getRunData:()=>({outputs:[{dims:d,dataType:t.dataType,gpuDataType:0}],dispatchGroup:{x:Math.ceil(a/64)}}),getShaderSource:h},{inputs:[t,r],outputs:[-1]})[0]},Gn=(e,t,r,o,n,s,u,d)=>{let a=s;if(u){if(o===1)throw new Error("AddBiasReshape is not implemented. Please export your model with packed QKV or KV");return a=Pd(e,s,u,t,o,r*n,d),a=a.reshape([t,o,r,n]),e.compute(et(a,fs.perm),{inputs:[a],outputs:[-1]})[0]}else return s.dims.length===3&&(a=s.reshape([t,o,r,n])),e.compute(et(a,fs.perm),{inputs:[a],outputs:[-1]})[0]},gs=(e,t)=>{let r=kd(e.inputs,t);if(e.inputs[0].dims.length===5)throw new Error("Packed QKV is not implemented");if(e.inputs[1]?.dims.length===5)throw new Error("Packed KV is not implemented");let o=e.inputs[1]&&e.inputs[2]&&e.inputs[1].dims.length===4&&e.inputs[2].dims.length===4,n=Gn(e,r.batchSize,r.numHeads,r.sequenceLength,r.headSize,e.inputs[0],e.inputs[3],0);if(o)return Wr(e,n,e.inputs[1],e.inputs[2],e.inputs[4],void 0,void 0,void 0,e.inputs[5],r,t);let s=Gn(e,r.batchSize,r.numHeads,r.kvSequenceLength,r.headSize,e.inputs[1],e.inputs[3],r.hiddenSize),u=Gn(e,r.batchSize,r.numHeads,r.kvSequenceLength,r.vHeadSize,e.inputs[2],e.inputs[3],2*r.hiddenSize);Wr(e,n,s,u,e.inputs[4],void 0,e.inputs[6],e.inputs[7],e.inputs[5],r,t)}});var Rd,Bd,Md,Dd,zd,Vd,Wd,Nd,Ud,bs,ws,vs=F(()=>{"use strict";Ve();be();Oe();we();Rd=e=>{if(!e||e.length<1)throw new Error("Too few inputs");if(e[0].dataType!==1)throw new Error("Input type must be float.");if(e.length>=2){let t=e[0].dims.length*2===e[1].dims[0];if(e.length===4&&(t=e[3].dims[0]*2===e[1].dims[0]),!t)throw new Error("The pads should be a 1D tensor of shape [2 * input_rank] or [2 * num_axes].")}},Bd=(e,t,r,o,n,s)=>{let u=t.length,d="";for(let a=u-1;a>=0;--a)d+=`\n            k = i32(${e.indicesGet("indices",a)}) - ${o[a]};\n            if (k < 0) {\n              break;\n            }\n            if (k >= ${t[a]}) {\n              break;\n            }\n            offset += k * ${r[a]};\n        `;return`\n          value = ${n}(${s});\n          for (var i = 0; i < 1; i++) {\n            var offset = 0;\n            var k = 0;\n            ${d}\n            value = x[offset];\n          }\n      `},Md=(e,t,r,o)=>{let n=t.length,s="";for(let u=n-1;u>=0;--u)s+=`\n                k = i32(${e.indicesGet("indices",u)}) - ${o[u]};\n                if (k < 0) {\n                  k = -k;\n                }\n                {\n                  let _2n_1 = ${2*(t[u]-1)};\n                  k = k % _2n_1;\n                  if(k >= ${t[u]}) {\n                    k = _2n_1 - k;\n                  }\n                }\n                offset += k * ${r[u]};\n            `;return`\n              var offset = 0;\n              var k = 0;\n              ${s}\n              value = x[offset];\n          `},Dd=(e,t,r,o)=>{let n=t.length,s="";for(let u=n-1;u>=0;--u)s+=`\n                k = i32(${e.indicesGet("indices",u)}) - ${o[u]};\n                if (k < 0) {\n                  k = 0;\n                }\n                if (k >= ${t[u]}) {\n                  k = ${t[u]-1};\n                }\n                offset += k * ${r[u]};\n            `;return`\n              var offset = 0;\n              var k = 0;\n              ${s}\n              value = x[offset];\n          `},zd=(e,t,r,o)=>{let n=t.length,s="";for(let u=n-1;u>=0;--u)s+=`\n                k = i32(${e.indicesGet("indices",u)}) - ${o[u]};\n                if (k < 0)  {\n                  k += ${t[u]};\n                }\n                if (k >= ${t[u]}) {\n                  k -= ${t[u]};\n                }\n                offset += k * ${r[u]};\n            `;return`\n              var offset = 0;\n              var k = 0;\n              ${s}\n              value = x[offset];\n          `},Vd=(e,t,r,o,n)=>{switch(o.mode){case 0:return Bd(e,t,r,o.pads,n,o.value);case 1:return Md(e,t,r,o.pads);case 2:return Dd(e,t,r,o.pads);case 3:return zd(e,t,r,o.pads);default:throw new Error("Invalid mode")}},Wd=(e,t,r,o)=>{let n=t[0].dims,s=W.padShape(n.slice(),r.pads),u=W.size(s),d=W.computeStrides(n),a=j("output",t[0].dataType,s),p=U("x",t[0].dataType,n),h=Vd(a,n,d,r,o);return`\n              ${e.declareVariables(p,a)}\n              ${e.mainStart()}\n              ${e.guardAgainstOutOfBoundsWorkgroupSizes(u)}\n\n              let indices = ${a.offsetToIndices("global_idx")};\n\n              var value = ${o}(0);\n              ${h}\n              output[global_idx] = value;\n          }`},Nd=(e,t)=>{let r=W.padShape(e[0].dims.slice(),t.pads);return{name:"Pad",shaderCache:{hint:t.cacheKey},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(W.size(r)/64)}}),getShaderSource:o=>Wd(o,e,t,"f32")}},Ud=(e,t)=>{if(e.length>1){let r=e[1].getBigInt64Array(),o=e.length>=3&&e[2].data?e[2].getFloat32Array()[0]:0,n=e[0].dims.length,s=new Int32Array(2*n).fill(0);if(e.length>=4){let d=e[3].getBigInt64Array();for(let a=0;a<d.length;a++)s[Number(d[a])]=Number(r[a]),s[Number(d[a])+n]=Number(r[a+d.length])}else r.forEach((d,a)=>s[Number(a)]=Number(d));let u=[];return s.forEach(d=>u.push(d)),J({mode:t.mode,value:o,pads:u})}else return t},bs=(e,t)=>{Rd(e.inputs);let r=Ud(e.inputs,t);e.compute(Nd(e.inputs,r),{inputs:[0]})},ws=e=>{let t=e.mode,r=e.value,o=e.pads;return J({mode:t,value:r,pads:o})}});var Qr,$s,Ss,xs,Cs,Is,As,_s,Ts,Es,Os,ks,Ps,Rs,Bs,Ms=F(()=>{"use strict";be();Oe();we();Qr=e=>{if(!e||e.length!==1)throw new Error("Pool ops requires 1 input.");if(e[0].dims.length!==4&&e[0].dims.length!==3)throw new Error("Pool ops supports 1-D or 2-D inputs only for now.")},$s=(e,t,r)=>{let o=t.format==="NHWC",n=e.dims.slice();o&&n.splice(1,0,n.pop());let s=Object.hasOwnProperty.call(t,"dilations"),u=t.kernelShape.slice(),d=t.strides.slice(),a=s?t.dilations.slice():[],p=t.pads.slice();Tt.adjustPoolAttributes(r,n,u,d,a,p);let h=Tt.computePoolOutputShape(r,n,d,a,u,p,t.autoPad),w=Object.assign({},t);s?Object.assign(w,{kernelShape:u,strides:d,pads:p,dilations:a,cacheKey:t.cacheKey}):Object.assign(w,{kernelShape:u,strides:d,pads:p,cacheKey:t.cacheKey});let g=h.slice();return g.push(g.splice(1,1)[0]),[w,o?g:h]},Ss=(e,t,r,o,n,s,u,d)=>{let a=n.format==="NHWC",p=r,h=t.type.value,w=p.length,g=W.size(o),v=j("output",t.type.tensor,o);if(n.kernelShape.length<=2){let b=n.kernelShape[n.kernelShape.length-1],S=n.strides[n.strides.length-1],I=n.pads[n.pads.length/2-1],A=n.pads[n.pads.length-1],C=w-(a?2:1),R="",_="",B="";if(I+A!==0?R=`\n                for (var i: u32 = 0u; i < ${b}u; i++) {\n                  xIndices[${C}] = indices[${C}] * ${S} - ${I} + i;\n                  if (xIndices[${C}] < 0 || xIndices[${C}] >= ${p[C]}) {\n                    pad++;\n                    continue;\n                  }\n                  let x_val = x[${t.indicesToOffset("xIndices")}];\n                  ${s}\n                }`:R=`\n                for (var i: u32 = 0u; i < ${b}u; i++) {\n                  xIndices[${C}] = indices[${C}] * ${S} - ${I} + i;\n                  let x_val = x[${t.indicesToOffset("xIndices")}];\n                  ${s}\n                }`,n.kernelShape.length===2){let z=n.kernelShape[n.kernelShape.length-2],V=n.strides[n.strides.length-2],K=n.pads[n.pads.length/2-2],ee=n.pads[n.pads.length-2],M=w-(a?3:2),Z=p[M];K+ee!==0?_=`\n                for (var j: u32 = 0u; j < ${z}u; j++) {\n                  xIndices[${M}] = indices[${M}] * ${V} - ${K} + j;\n                  if (xIndices[${M}] < 0 || xIndices[${M}] >= ${Z}) {\n                    pad+= ${b};\n                    continue;\n                  }\n              `:_=`\n                for (var j: u32 = 0u; j < ${z}u; j++) {\n                  xIndices[${M}] = indices[${M}] * ${V} - ${K} + j;\n                `,B=`\n              }\n            `}return`\n            ${e.declareVariables(t,v)}\n\n            ${e.mainStart()}\n              ${e.guardAgainstOutOfBoundsWorkgroupSizes(g)}\n\n              let indices = ${v.offsetToIndices("global_idx")};\n              var xIndices = ${v.offsetToIndices("global_idx")};\n\n              var value: ${h} = ${h}(${d});\n              var pad = 0;\n              ${_}\n              ${R}\n              ${B}\n              ${u}\n\n              output[global_idx] = value;\n            }`}else{if(a)throw new Error("Pooling with kernelShape.length > 2 is not supported for NHWC format.");let b=W.size(n.kernelShape),S=W.computeStrides(n.kernelShape),I=S.length,A=n.pads.length,C=n.pads.reduce((B,E)=>B+E),R="";return C?R=`\n                if (xIndices[j] >= inputDims[j]) {\n                  pad++;\n                  isPad = true;\n                  break;\n                }\n              }\n              if (!isPad) {\n                let x_val = x[${t.indicesToOffset("xIndices")}];\n                ${s}\n              }`:R=`\n              }\n              let x_val = x[${t.indicesToOffset("xIndices")}];\n              ${s}\n            `,`\n            ${e.declareVariables(t,v)}\n\n            const pads = array<u32, ${A}>(${n.pads.map(B=>`${B}u`).join(",")});\n            const inputDims = array<u32, ${w}>(${p.map(B=>`${B}u`).join(",")});\n            const kernelStrides = array<u32, ${I}>(${S.map(B=>`${B}u`).join(",")});\n            const strides = array<u32, ${I}>(${n.strides.map(B=>`${B}u`).join(",")});\n\n            ${e.mainStart()}\n              ${e.guardAgainstOutOfBoundsWorkgroupSizes(g)}\n\n              let indices = ${v.offsetToIndices("global_idx")};\n              let xIndices = ${v.offsetToIndices("global_idx")};\n\n              var offsets: array<u32, ${I}>;\n\n              var value = ${v.type.value}(${d});\n              var pad = 0;\n              var isPad = false;\n\n              for (var i: u32 = 0u; i < ${b}u; i++) {\n                var offset = i;\n                for (var j = 0u; j < ${I-1}u; j++) {\n                  offsets[j] = offset / kernelStrides[j];\n                  offset -= offsets[j] * kernelStrides[j];\n                }\n                offsets[${I-1}] = offset;\n\n                isPad = false;\n                for (var j = ${w-I}u; j < ${w}u; j++) {\n                  xIndices[j] = indices[j] * strides[j - ${w-I}u]\n                    + offsets[j - ${w-I}u] - pads[j - 2u];\n                  ${R}\n              }\n              ${u}\n\n              output[global_idx] = value;\n            }`}},xs=e=>({format:e.format,autoPad:["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][e.auto_pad],ceilMode:e.ceil_mode,kernelShape:e.kernel_shape,strides:e.strides,pads:e.pads}),Cs=(e,t,r,o)=>{let[n,s]=$s(t,o,r),u=W.size(n.kernelShape),d=U("x",t.dataType,t.dims),a=d.type.value,p="value += x_val;",h="";return n.countIncludePad?h+=`value /= ${a}(${u});`:h+=`value /= ${a}(${u} - pad);`,{name:e,shaderCache:{hint:o.cacheKey},getRunData:()=>({outputs:[{dims:s,dataType:t.dataType}],dispatchGroup:{x:Math.ceil(W.size(s)/64)}}),getShaderSource:w=>Ss(w,d,t.dims,s,n,p,h,"0.0")}},Is=e=>{let t=e.count_include_pad!==0,r=xs(e);if(r.ceilMode!==0)throw new Error("using ceil() in shape computation is not yet supported for AveragePool");return J({countIncludePad:t,...r})},As=(e,t)=>{Qr(e.inputs),e.compute(Cs("AveragePool",e.inputs[0],!1,t))},_s={autoPad:"",ceilMode:0,countIncludePad:!1,kernelShape:[],strides:[],pads:[],storageOrder:0,dilations:[],cacheKey:""},Ts=e=>{let t=e.format;return{format:t,..._s,cacheKey:t}},Es=(e,t)=>{Qr(e.inputs),e.compute(Cs("GlobalAveragePool",e.inputs[0],!0,t))},Os=(e,t,r,o)=>{let[n,s]=$s(t,o,r),u=`\n      value = max(x_val, value);\n    `,d="",a=U("x",t.dataType,t.dims);return{name:e,shaderCache:{hint:o.cacheKey},getRunData:()=>({outputs:[{dims:s,dataType:t.dataType}],dispatchGroup:{x:Math.ceil(W.size(s)/64)}}),getShaderSource:p=>Ss(p,a,t.dims,s,n,u,d,"-1e5")}},ks=(e,t)=>{Qr(e.inputs),e.compute(Os("MaxPool",e.inputs[0],!1,t))},Ps=e=>{let t=e.storage_order,r=e.dilations,o=xs(e);if(t!==0)throw new Error("column major storage order is not yet supported for MaxPool");if(o.ceilMode!==0)throw new Error("using ceil() in shape computation is not yet supported for MaxPool");return J({storageOrder:t,dilations:r,...o})},Rs=e=>{let t=e.format;return{format:t,..._s,cacheKey:t}},Bs=(e,t)=>{Qr(e.inputs),e.compute(Os("GlobalMaxPool",e.inputs[0],!0,t))}});var Gd,Ld,Ds,zs=F(()=>{"use strict";kn();Ve();we();Gd=(e,t,r)=>{let o=e===t,n=e<t&&r<0,s=e>t&&r>0;if(o||n||s)throw new Error("Range these inputs\' contents are invalid.")},Ld=(e,t,r,o)=>{let n=Math.abs(Math.ceil((t-e)/r)),s=[n],u=n,d=j("output",o,s),a=d.type.storage,p=h=>`\n        ${h.declareVariables(d)}\n        ${h.mainStart()}\n        ${h.guardAgainstOutOfBoundsWorkgroupSizes(u)}\n        output[global_idx] = ${a}(${e}) + ${a}(global_idx) * ${a}(${r});\n      }`;return{name:"Range",shaderCache:{hint:[e,t,r].map(h=>h.toString()).join("_")},getShaderSource:p,getRunData:()=>({outputs:[{dims:s,dataType:o}],dispatchGroup:{x:Math.ceil(u/64)}})}},Ds=e=>{let t=0,r=0,o=0;e.inputs[0].dataType===6?(t=e.inputs[0].getInt32Array()[0],r=e.inputs[1].getInt32Array()[0],o=e.inputs[2].getInt32Array()[0]):e.inputs[0].dataType===1&&(t=e.inputs[0].getFloat32Array()[0],r=e.inputs[1].getFloat32Array()[0],o=e.inputs[2].getFloat32Array()[0]),Ur.webgpu.validateInputContent&&Gd(t,r,o),e.compute(Ld(t,r,o,e.inputs[0].dataType),{inputs:[]})}});var Fd,jd,qd,Kd,Yd,Zd,Xd,Qd,Jd,ec,tc,rc,nc,oc,ac,Vs,Ws,Ns=F(()=>{"use strict";be();Oe();we();Fd=(e,t)=>{if(e.every(r=>r>0||(()=>{throw new Error("Resize requires scales input values to be positive")})),e.length>0){if(t.mode==="linear"){if(!(e.length===2||e.length===4&&e[0]===1&&e[1]===1||e.length===4&&e[0]===1&&e[3]===1))throw new Error("Resize requires scales input size to be 2 or 4 for linear mode")}else if(t.mode==="cubic"&&!(e.length===2||e.length===4&&e[0]===1&&e[1]===1||e.length===4&&e[0]===1&&e[3]===1))throw new Error("Resize requires scales input size to be 2 or 4 for cubic mode")}},jd=(e,t,r)=>{t.every(n=>n>=0&&n<r||(()=>{throw new Error("Resize requires axes input values to be positive and less than rank")}));let o=new Array(r).fill(1);return t.forEach((n,s)=>o[n]=e[s]),o},qd=(e,t,r,o,n,s)=>{let[u,d,a]=r>10?[1,2,3]:[-1,e.length>1?1:-1,-1],p=e[0].dims.length;if(u>0&&e.length>u&&e[u].dims.length>0)e[u].getFloat32Array().forEach(h=>s.push(h));else if(t.coordinateTransformMode==="tf_crop_and_resize")throw new Error("Resize requires RoI input to be specified when coordinateTransformMode is tfCropAndResize");if(d>0&&e.length>d&&e[d].dims.length>0){if(e[d].getFloat32Array().forEach(h=>o.push(h)),o.length!==0&&o.length!==p&&r>=18&&o.length!==t.axes.length)throw new Error("Resize requires scales input size to be same as input rank or axes size for opset 18 and up");Fd(o,t),t.axes.length>0&&jd(o,t.axes,p).forEach((h,w)=>o[w]=h)}if(a>0&&e.length>a&&(e[a].getBigInt64Array().forEach(h=>n.push(Number(h))),n.length!==p||r>=18&&n.length===t.axes.length))throw new Error("Resize requires sizes input size to be same as input rank or axes size for opset 18 and up");if(t.axes.length>0){if(o.length!==t.axes.length)throw new Error(\'Resize requires "scales" input size to be of axes rank when axes attributes is specified\');if(n.length!==t.axes.length)throw new Error(\'Resize requires "sizes" input size to be of rank axes rank when axes attributes is specified\')}if(typeof o<"u"&&typeof n<"u"&&o.length>0&&n.length>p)throw new Error("Resize requires only of scales or sizes to be specified")},Kd=(e,t)=>`fn getOriginalCoordinateFromResizedCoordinate(xResized: ${t}, xScale: ${t}, lengthResized: ${t},\n     lengthOriginal: ${t}, roiStart: ${t}, roiEnd: ${t}) -> ${t} { `+(()=>{switch(e){case"asymmetric":return"return xResized / xScale;";case"pytorch_half_pixel":return"if (lengthResized > 1) {                     return (xResized + 0.5) / xScale - 0.5;                   } else {                     return 0.0;                   }";case"tf_half_pixel_for_nn":return"return (xResized + 0.5) / xScale;";case"align_corners":return"if (lengthResized == 1) {                     return 0.0;                   } else {                     return xResized * (lengthOriginal - 1) / (lengthResized - 1);                   }";case"tf_crop_and_resize":return`if (lengthResized > 1) {                     return roiStart * (lengthOriginal - 1) +                           (xResized * (roiEnd - roiStart) * (lengthOriginal - 1)) / (lengthResized - 1);                   } else {                     return 0.5 * (roiStart + roiEnd) * ${t}(lengthOriginal - 1);                   }`;case"half_pixel_symmetric":return["const outputWidth = xScale * lengthResized;","const adjustment = lengthResized / outputWidth;","const center = lengthOriginal / 2;","const offset = center * (1 - adjustment);","return offset + ((xResized + 0.5) / xScale) - 0.5;"].join(`\n`);case"half_pixel":return"return ((xResized + 0.5) / xScale) - 0.5;";default:throw new Error(`Coordinate transform mode ${e} is not supported`)}})()+"}",Yd=(e,t,r)=>`fn getNearestPixelFromOriginal(xOriginal: ${r}, isDownSample: bool) -> ${r} {`+(()=>{switch(e){case"round_prefer_ceil":return"if (fract(xOriginal) == 0.5) {             return ceil(xOriginal);           } else {             return round(xOriginal);           }";case"floor":return"return floor(xOriginal);";case"ceil":return"return ceil(xOriginal);";case"round_prefer_floor":return"if (fract(xOriginal) == 0.5) {                     return floor(xOriginal);                   } else {                     return round(xOriginal);                   }";case"simple":default:if(t<11)return"if (isDownSample)                     {                       return ceil(xOriginal);                     } else {                       return xOriginal;                     }";throw new Error(`Nearest mode ${e} is not supported`)}})()+"}",Zd=(e,t,r)=>{let o=new Array(r).fill(0).concat(new Array(r).fill(1)),n=e.length===0?o:e.slice();return t.length>0?(t.forEach((s,u)=>{o[s]=n[u],o[u+r]=n[t.length+u]}),o):n},Xd=(e,t,r,o)=>{let n=[];if(r.length>0)if(o.length>0){if(e.forEach(s=>n.push(s)),Math.max(...o)>e.length)throw new Error("axes is out of bound");o.forEach((s,u)=>n[s]=r[u])}else r.forEach(s=>n.push(s));else{if(t.length===0)throw new Error("Resize requires either scales or sizes.");n=e.map((s,u)=>Math.round(s*t[u]))}return n},Qd=(e,t,r)=>{let o=(()=>{switch(r.keepAspectRatioPolicy){case"not_larger":return r.axes.length>0?Math.min(...r.axes.map(s=>t[s]),Number.MAX_VALUE):Math.min(...t,Number.MAX_VALUE);case"not_smaller":return r.axes.length>0?Math.max(...r.axes.map(s=>t[s]),Number.MIN_VALUE):Math.max(...t,Number.MIN_VALUE);default:throw new Error(`Keep aspect ratio policy ${r.keepAspectRatioPolicy} is not supported`)}})();t.fill(1,0,t.length);let n=e.slice();return r.axes.length>0?(r.axes.forEach(s=>t[s]=o),r.axes.forEach(s=>n[s]=Math.round(e[s]*t[s]))):(t.fill(o,0,t.length),n.forEach((s,u)=>n[u]=Math.round(s*t[u]))),n},Jd=(e,t,r,o,n)=>`\n    fn calculateOriginalIndicesFromOutputIndices(outputIndices: ${e.type.indices}) -> array<${e.type.value}, ${r.length}> {\n      const inputShape = array<u32, ${t.length}>(${t.map(s=>`${s}u`).join(",")});\n      const outputShape = array<u32, ${r.length}>(${r.map(s=>`${s}u`).join(",")});\n      const scales = array<${e.type.value}, ${o.length}>(${o.map(s=>`${s}f`).join(",")});\n      const roi = array<${e.type.value}, ${n.length}>(${n.map(s=>`${s}f`).join(",")});\n      var originalIndices: array<${e.type.value}, ${r.length}>;\n      for (var i:u32 = 0; i < ${r.length}; i++) {\n        var outputIndex = ${r.length===1?"outputIndices":"outputIndices[i]"};\n        if (scales[i] == 1.0) {\n          originalIndices[i] = ${e.type.value}(outputIndex);\n        } else {\n          originalIndices[i] = getOriginalCoordinateFromResizedCoordinate(${e.type.value}(outputIndex), scales[i],\n                ${e.type.value}(outputShape[i]), ${e.type.value}(inputShape[i]), roi[i], roi[i + ${t.length}]);\n        }\n      }\n      return originalIndices;\n    }`,ec=(e,t,r,o,n,s,u)=>`\n    fn calculateInputIndicesFromOutputIndices(outputIndices: ${t.type.indices}) -> ${e.type.indices} {\n        const inputShape = array<u32, ${r.length}>(${r.map(d=>`${d}u`).join(",")});\n        const outputShape = array<u32, ${o.length}>(${o.map(d=>`${d}u`).join(",")});\n        const scales = array<${e.type.value}, ${n.length}>(${n.map(d=>`${d}`).join(",")});\n        const roi = array<${e.type.value}, ${s.length}>(${s.map(d=>`${d}`).join(",")});\n        var inputIndices: ${e.type.indices};\n        for (var i:u32 = 0; i < ${o.length}; i++) {\n          var outputIndex = ${o.length===1?"outputIndices":"outputIndices[i]"};\n          var inputIndex: u32;\n          if (scales[i] == 1.0) {\n            inputIndex = outputIndex;\n          } else {\n            var original_idx = getOriginalCoordinateFromResizedCoordinate(${e.type.value}(outputIndex), scales[i],\n                    ${e.type.value}(outputShape[i]), ${e.type.value}(inputShape[i]), roi[i], roi[i + ${r.length}]);\n            if (!${u} || (original_idx >= 0 && original_idx < ${e.type.value}(inputShape[i]))) {\n              if (original_idx < 0) {\n                inputIndex = 0;\n              } else if (original_idx > (${e.type.value}(inputShape[i]) - 1)) {\n                inputIndex = inputShape[i] - 1;\n              } else {\n                inputIndex = u32(getNearestPixelFromOriginal(original_idx, scales[i] < 1));\n              }\n            } else {\n              inputIndex = u32(original_idx);\n            }\n          }\n          ${e.indicesSet("inputIndices","i","inputIndex")}\n        }\n        return inputIndices;\n    }`,tc=(e,t)=>`\n    fn checkInputIndices(inputIndices: ${e.type.indices}) -> bool {\n      const inputShape = array<u32, ${t.length}>(${t.map(r=>`${r}u`).join(",")});\n      for (var i:u32 = 0; i < ${t.length}; i++) {\n        var inputIndex = ${t.length===1?"inputIndices":"inputIndices[i]"};\n        if (inputIndex < 0 || inputIndex >= inputShape[i]) {\n          return false;\n        }\n      }\n      return true;\n    }`,rc=(e,t,r,o,n,s)=>{let[u,d,a,p]=r.length===2?[-1,0,1,-1]:o[1]===1?[0,2,3,1]:[0,1,2,3],h=e.type.value;return`\n    fn getInputValue(batch: u32, channel: u32, row: u32, col: u32) -> ${h} {\n      var inputIndices: ${e.type.indices};\n      inputIndices[${d}] = max(0, min(row, ${r[d]} - 1));\n      inputIndices[${a}] = max(0, min(col, ${r[a]} - 1));\n      if (${r.length} > 2) {\n        inputIndices[${p}] = channel;\n        inputIndices[${u}] = batch;\n      };\n      return input[${e.indicesToOffset("inputIndices")}];\n    }\n\n    fn bilinearInterpolation(outputIndices: ${t.type.indices}) -> ${h} {\n      var originalIndices = calculateOriginalIndicesFromOutputIndices(outputIndices);\n      var row:${h} = originalIndices[${d}];\n      var col:${h} = originalIndices[${a}];\n      if (${n} && (row < 0 || row > (${r[d]} - 1) || col < 0 || col > ${r[a]} - 1)) {\n        return ${s};\n      }\n      row = max(0, min(row, ${r[d]} - 1));\n      col = max(0, min(col, ${r[a]} - 1));\n      var row1: u32 = u32(row);\n      var col1: u32 = u32(col);\n      var row2: u32 = u32(row + 1);\n      var col2: u32 = u32(col + 1);\n      var channel: u32 = 0;\n      var batch: u32 = 0;\n      if (${r.length>2}) {\n        channel = u32(originalIndices[${p}]);\n        batch = u32(originalIndices[${u}]);\n      }\n      var x11: ${h} = getInputValue(batch, channel, row1, col1);\n      var x12: ${h} = getInputValue(batch, channel, row1, col2);\n      var x21: ${h} = getInputValue(batch, channel, row2, col1);\n      var x22: ${h} = getInputValue(batch, channel, row2, col2);\n      var dx1: ${h} = row - ${h}(row1);\n      var dx2: ${h} = ${h}(row2) - row;\n      var dy1 = col - ${h}(col1);\n      var dy2 = ${h}(col2) - col;\n      return (x11 * dx2 * dy2 + x12 * dx2 * dy1 + x21 * dx1 * dy2 + x22 * dx1 * dy1);\n    }`},nc=(e,t,r,o,n,s,u,d,a,p)=>{let[h,w]=r.length===2?[0,1]:n[1]===1?[2,3]:[1,2],g=e.type.value,v=b=>{let S=b===h?"row":"col";return`\n      fn ${S}CubicInterpolation(inputIndices: ${e.type.indices}, outputIndices: ${t.type.indices}) -> ${g} {\n        var outputIndex = ${o.length===1?"outputIndices":`outputIndices[${b}]`};\n        var originalIdx: ${g} = getOriginalCoordinateFromResizedCoordinate(${g}(outputIndex), ${n[b]},\n        ${g}(${o[b]}), ${g}(${r[b]}), ${s[b]}, ${s[b]} + ${r.length});\n        var fractOriginalIdx: ${g} = originalIdx - floor(originalIdx);\n        var coefs = getCubicInterpolationCoefs(fractOriginalIdx);\n\n        if (${d} && (originalIdx < 0 || originalIdx > (${r[b]} - 1))) {\n          return ${a};\n        }\n        var data: array<${g}, 4> = array<${g}, 4>(0.0, 0.0, 0.0, 0.0);\n        for (var i: i32 = -1; i < 3; i++) {\n          var ${S}: ${g} = originalIdx + ${g}(i);\n          if (${S} < 0 || ${S} >= ${r[b]}) {\n            if (${p}) {\n              coefs[i + 1] = 0.0;\n              continue;\n            } else if (${d}) {\n              return ${a};\n            } else {\n              ${S} = max(0, min(${S}, ${r[b]} - 1));\n            }\n          }\n          var inputIndicesCopy: ${e.type.indices} = inputIndices;\n          inputIndicesCopy[${b}] = u32(${S});\n          data[i + 1] = ${b===h?`input[${e.indicesToOffset("inputIndicesCopy")}];`:`\n                                               rowCubicInterpolation(inputIndicesCopy, outputIndices);`}\n        }\n        return cubicInterpolation1D(data, coefs);\n      }`};return`\n    ${v(h)};\n    ${v(w)};\n  fn getCubicInterpolationCoefs(s: ${g}) -> array<${g}, 4> {\n    var absS = abs(s);\n    var coeffs: array<${g}, 4> = array<${g}, 4>(0.0, 0.0, 0.0, 0.0);\n    var oneMinusAbsS: ${g} = 1.0 - absS;\n    var twoMinusAbsS: ${g} = 2.0 - absS;\n    var onePlusAbsS: ${g} = 1.0 + absS;\n    coeffs[0] = ((${u} * onePlusAbsS - 5 * ${u}) * onePlusAbsS + 8 * ${u}) * onePlusAbsS - 4 * ${u};\n    coeffs[1] = ((${u} + 2) * absS - (${u} + 3)) * absS * absS + 1;\n    coeffs[2] = ((${u} + 2) * oneMinusAbsS - (${u} + 3)) * oneMinusAbsS * oneMinusAbsS + 1;\n    coeffs[3] = ((${u} * twoMinusAbsS - 5 * ${u}) * twoMinusAbsS + 8 * ${u}) * twoMinusAbsS - 4 * ${u};\n    return coeffs;\n  }\n\n  fn cubicInterpolation1D(x: array<${g}, 4>, coefs: array<${g}, 4>) -> ${g} {\n    var coefsSum: ${g} = coefs[0] + coefs[1] + coefs[2] + coefs[3];\n    return (x[0] * coefs[0] + x[1] * coefs[1]+ x[2] * coefs[2]+ x[3] * coefs[3]) / coefsSum;\n  }\n\n  fn bicubicInterpolation(outputIndices: ${t.type.indices}) -> ${g} {\n    var inputIndices: ${e.type.indices} = outputIndices;\n    return colCubicInterpolation(inputIndices, outputIndices);\n  }\n    `},oc=(e,t,r,o,n,s)=>{let u=e.dims,d=Zd(s,t.axes,u.length),a=Xd(u,o,n,t.axes),p=o.slice();o.length===0&&(p=u.map((A,C)=>A===0?1:a[C]/A),t.keepAspectRatioPolicy!=="stretch"&&(a=Qd(u,p,t)));let h=j("output",e.dataType,a),w=U("input",e.dataType,u),g=W.size(a),v=u.length===a.length&&u.every((A,C)=>A===a[C]),b=t.coordinateTransformMode==="tf_crop_and_resize",S=w.type.value,I=A=>`\n      ${v?"":`\n      ${Kd(t.coordinateTransformMode,S)};\n      ${(()=>{switch(t.mode){case"nearest":return`\n              ${tc(w,u)};\n              ${Yd(t.nearestMode,r,S)};\n              ${ec(w,h,u,a,p,d,b)};\n              `;case"linear":return`\n              ${Jd(h,u,a,p,d)};\n              ${rc(w,h,u,p,b,t.extrapolationValue)};\n              `;case"cubic":return`\n            ${nc(w,h,u,a,p,d,t.cubicCoeffA,b,t.extrapolationValue,t.excludeOutside)};\n            `;default:throw Error("Invalid resize mode")}})()};\n      `}\n      ${A.declareVariables(w,h)}\n      ${A.mainStart()}\n        ${A.guardAgainstOutOfBoundsWorkgroupSizes(g)}\n        ${v?"output[global_idx] = input[global_idx];":`\n        let outputIndices = ${h.offsetToIndices("global_idx")};\n        var inputIndices: ${w.type.indices};\n        ${(()=>{switch(t.mode){case"nearest":return`inputIndices = calculateInputIndicesFromOutputIndices(outputIndices);\n                if (checkInputIndices(inputIndices)) {\n                  output[global_idx] = input[${w.indicesToOffset("inputIndices")}];\n                } else {\n                  output[global_idx] = ${t.extrapolationValue};\n                }`;case"linear":return"output[global_idx] = bilinearInterpolation(outputIndices);";case"cubic":return"output[global_idx] = bicubicInterpolation(outputIndices);";default:throw Error(`Unsupported resize mode: ${t.mode}`)}})()};\n        `}\n      }`;return{name:"Resize",shaderCache:{hint:`${t.cacheKey}|${r}|${p.length>0?p:""}|${n.length>0?n:""}|${v}`},getShaderSource:I,getRunData:()=>({outputs:[{dims:a,dataType:e.dataType}],dispatchGroup:{x:Math.ceil(g/64)}})}},ac=e=>{let t=e.customDataBuffer;return new Uint32Array(t,t.byteOffset,1)[0]},Vs=(e,t)=>{let r=[],o=[],n=[],s=ac(e);qd(e.inputs,t,s,r,o,n),e.compute(oc(e.inputs[0],t,s,r,o,n),{inputs:[0]})},Ws=e=>{let t=e.antialias,r=e.axes,o=e.coordinateTransformMode,n=e.cubicCoeffA,s=e.excludeOutside!==0,u=e.extrapolationValue,d=e.keepAspectRatioPolicy,a=e.mode,p=e.nearestMode===""?"simple":e.nearestMode;return J({antialias:t,axes:r,coordinateTransformMode:o,cubicCoeffA:n,excludeOutside:s,extrapolationValue:u,keepAspectRatioPolicy:d,mode:a,nearestMode:p})}});var ic,sc,Us,Hs,Gs=F(()=>{"use strict";Ve();be();Oe();we();ic=e=>{if(!e||e.length<3)throw new Error("layerNorm requires at least 3 inputs.");let t=e[0],r=e[1],o=e[2];if(t.dataType!==r.dataType||t.dataType!==o.dataType)throw new Error("All inputs must have the same data type");if(t.dims.length!==3&&t.dims.length!==2)throw new Error("Input must be 2D or 3D");if(r.dims.length!==3&&r.dims.length!==2)throw new Error("Skip must be 2D or 3D");let n=t.dims[t.dims.length-1],s=t.dims[t.dims.length-2];if(r.dims[r.dims.length-1]!==n)throw new Error("Skip must have the same hidden size as input");if(r.dims[r.dims.length-2]!==s)throw new Error("Skip must have the same sequence length as input");if(o.dims.length!==1)throw new Error("Gamma must be 1D");if(o.dims[o.dims.length-1]!==n)throw new Error("Gamma must have the same hidden size as input");if(e.length>3){let u=e[3];if(u.dims.length!==1)throw new Error("Beta must be 1D");if(u.dims[u.dims.length-1]!==n)throw new Error("Beta must have the same hidden size as input")}if(e.length>4){let u=e[4];if(u.dims.length!==1)throw new Error("Bias must be 1D");if(u.dims[u.dims.length-1]!==n)throw new Error("Bias must have the same hidden size as input")}},sc=(e,t,r,o)=>{let n=e[0].dims,s=W.size(n),u=n,d=s,a=n.slice(-1)[0],p=o?n.slice(0,-1).concat(1):[],h=e.length>3,w=e.length>4,g=o&&r>1,v=o&&r>2,b=r>3,S=qe(a),I=[U("x",e[0].dataType,e[0].dims,S),U("skip",e[1].dataType,e[1].dims,S),U("gamma",e[2].dataType,e[2].dims,S)];h&&I.push(U("beta",e[3].dataType,e[3].dims,S)),w&&I.push(U("bias",e[4].dataType,e[4].dims,S)),I.push(j("output",e[0].dataType,u,S)),g&&I.push(j("meanOutput",1,p)),v&&I.push(j("invStdOutput",1,p)),b&&I.push(j("inputSkipBiasSum",e[0].dataType,u,S));let A=_e(e[0].dataType),C=_=>`\n      const hiddenSize: f32 = ${a};\n      const hiddenSizeVectorized: u32 = ${a/S};\n      const epsilon: f32 = ${t.epsilon};\n\n      ${_.declareVariables(...I)}\n\n      ${_.mainStart()}\n        ${_.guardAgainstOutOfBoundsWorkgroupSizes(d/a)}\n        let offset = global_idx * hiddenSizeVectorized;\n        var sum = ${Ge("f32",S)};\n        var squareSum = ${Ge("f32",S)};\n        for (var i: u32 = 0; i < hiddenSizeVectorized; i++) {\n          let skipValue = skip[offset + i];\n          let biasValue = ${w?"bias[i]":"0.0"};\n          let inputValue = x[offset + i];\n          let value = inputValue + skipValue + biasValue;\n          ${b?"inputSkipBiasSum[offset + i] = value;":""}\n          output[offset + i] = value;\n          let f32Value = ${Qe(A,S,"value")};\n          sum += f32Value;\n          squareSum += f32Value * f32Value;\n        }\n        let mean = ${Je("sum",S)} / hiddenSize;\n        let variance = sqrt(${Je("squareSum",S)} / hiddenSize - mean * mean + epsilon);\n        ${g?"meanOutput[global_idx] = mean;":""}\n        ${v?"invStdOutput[global_idx] = 1.0 / variance;":""}\n        for (var i: u32 = 0; i < hiddenSizeVectorized; i++) {\n          output[offset + i] = (output[offset + i] - ${A}(mean)) / ${A}(variance) * gamma[i]\n           + ${h?"beta[i]":"0.0"};\n        }\n      }`,R=[{dims:u,dataType:e[0].dataType}];return r>1&&R.push({dims:p,dataType:1}),r>2&&R.push({dims:p,dataType:1}),r>3&&R.push({dims:n,dataType:e[0].dataType}),{name:"SkipLayerNormalization",shaderCache:{hint:t.cacheKey},getShaderSource:C,getRunData:()=>({outputs:R,dispatchGroup:{x:Math.ceil(d/a/64)}})}},Us=(e,t)=>{ic(e.inputs);let o=[0];e.outputCount>1&&o.push(-3),e.outputCount>2&&o.push(-3),e.outputCount>3&&o.push(3),e.compute(sc(e.inputs,t,e.outputCount,!1),{outputs:o})},Hs=e=>{let t=e.epsilon;return J({epsilon:t})}});var uc,Jr,lc,Ls,dc,cc,Fs,js,qs=F(()=>{"use strict";Ve();be();Oe();we();uc=(e,t)=>{if(!e||e.length<1)throw new Error("too few inputs");if(t.axes.length!==0){if(t.axes.length!==t.starts.length||t.axes.length!==t.ends.length)throw new Error("axes, starts and ends must have the same length")}else if(t.starts.length!==t.ends.length)throw new Error("starts and ends must have the same length");e.slice(1).forEach((r,o)=>{if(e[o+1].dataType!==6&&e[o+1].dataType!==7)throw new Error(`Input ${o} must be an array of int32 or int64`)})},Jr=(e,t)=>{let r=[];if(e.length>t)if(e[t].dataType===7)e[t].getBigInt64Array().forEach(o=>r.push(Number(o)));else if(e[t].dataType===6)e[t].getInt32Array().forEach(o=>r.push(Number(o)));else throw new Error(`Input ${t} must be an array of int32 or int64`);return r},lc=(e,t)=>{if(e.length>1){let r=Jr(e,1),o=Jr(e,2),n=Jr(e,3);return n.length===0&&(n=[...Array(e[0].dims.length).keys()]),J({starts:r,ends:o,axes:n})}else return t},Ls=(e,t,r,o,n)=>{let s=e;return e<0&&(s+=r[o[t]]),n[t]<0?Math.max(0,Math.min(s,r[o[t]]-1)):Math.max(0,Math.min(s,r[o[t]]))},dc=(e,t,r,o,n)=>`fn calculateInputIndices(outputIndices: ${t.type.indices}) -> ${e.type.indices} {\n          var inputIndices: ${e.type.indices};\n          var carry = 0u;\n          for (var i = ${r.length}; i >= 0; i--) {\n            let input_shape_i = ${n?`uniforms.input_shape${r.length>1?"[i]":""}`:"inputShape[i]"};\n            let steps_i  = ${n?`uniforms.steps${r.length>1?"[i]":""}`:"steps[i]"};\n            let signs_i  = ${n?`uniforms.signs${r.length>1?"[i]":""}`:"signs[i]"};\n            let starts_i  = ${n?`uniforms.starts${r.length>1?"[i]":""}`:"starts[i]"};\n            var outputIndex = ${o.length===1?"outputIndices":"outputIndices[i]"};\n            var inputIndex = outputIndex * steps_i + starts_i + carry;\n            carry = inputIndex / input_shape_i;\n            inputIndex = inputIndex % input_shape_i;\n            if (signs_i < 0) {\n              inputIndex = input_shape_i - inputIndex - 1u + starts_i;\n            }\n            ${r.length===1?"inputIndices":"inputIndices[i]"} = inputIndex;\n          }\n          return inputIndices;\n      }`,cc=(e,t)=>{let r=e[0].dims,o=W.size(r),n=t.axes.length>0?W.normalizeAxes(t.axes,r.length):[...Array(r.length).keys()],s=Jr(e,4);s.forEach(_=>_!==0||(()=>{throw new Error("step cannot be 0")})),s.length===0&&(s=Array(n.length).fill(1));let u=t.starts.map((_,B)=>Ls(_,B,r,n,s)),d=t.ends.map((_,B)=>Ls(_,B,r,n,s));if(n.length!==u.length||n.length!==d.length)throw new Error("start, ends and axes should have the same number of elements");if(n.length!==r.length)for(let _=0;_<r.length;++_)n.includes(_)||(u.splice(_,0,0),d.splice(_,0,r[_]),s.splice(_,0,1));let a=s.map(_=>Math.sign(_));s.forEach((_,B,E)=>{if(_<0){let z=(d[B]-u[B])/_,V=u[B],K=V+z*s[B];u[B]=K,d[B]=V,E[B]=-_}});let p=ke(e[0].dims.length),h=p?e[0].dims.length:e[0].dims,w=r.slice(0);n.forEach((_,B)=>{w[_]=Math.ceil((d[_]-u[_])/s[_])});let g=p?w.length:w,v={dims:w,dataType:e[0].dataType},b=j("output",e[0].dataType,g),S=U("input",e[0].dataType,h),I=W.size(w),A=[],C=[];p&&(C.push({name:"starts",type:u.length>1?`vec${u.length}<u32>`:"u32"}),C.push({name:"signs",type:a.length>1?`vec${a.length}<i32>`:"i32"}),C.push({name:"steps",type:s.length>1?`vec${s.length}<u32>`:"u32"}),A.push({type:"uint32",data:u}),A.push({type:"int32",data:a}),A.push({type:"uint32",data:s})),C.push({name:"outputSize",type:"u32"}),A.push({type:"uint32",data:I}),p&&(A.push(...pe(e[0].dims)),A.push(...pe(w)));let R=_=>`\n      ${_.registerUniforms(C).declareVariables(S,b)}\n        ${p?"":[`const signs = array<i32, ${a.length}>(${a.map(B=>`${B}i`).join(",")});`,`const starts = array<u32, ${u.length}>(${u.map(B=>`${B}u`).join(",")});`,`const steps = array<u32, ${s.length}>(${s.map(B=>`${B}u`).join(",")});`,`const inputShape = array<u32, ${r.length}>(${r.map(B=>`${B}u`).join(",")});`].join(`\n`)}\n\n        ${dc(S,b,r,w,p)}\n        ${_.mainStart()}\n          ${_.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n          let outputIndices = ${b.offsetToIndices("global_idx")};\n          let inputIndices = calculateInputIndices(outputIndices);\n          ${b.setByOffset("global_idx",S.getByIndices("inputIndices"))}\n      }`;return{name:"Slice",shaderCache:{hint:p?`${a.length}_${u.length}_${s.length}`:`${t.cacheKey} | ${e[4]?.dims??""}`,inputDependencies:[p?"rank":"dims"]},getShaderSource:R,getRunData:()=>({outputs:[v],dispatchGroup:{x:Math.ceil(o/64)},programUniforms:A})}},Fs=(e,t)=>{uc(e.inputs,t);let r=lc(e.inputs,t);e.compute(cc(e.inputs,r),{inputs:[0]})},js=e=>{let t=e.starts,r=e.ends,o=e.axes;return J({starts:t,ends:r,axes:o})}});var pc,mc,Ks,Ys,Zs=F(()=>{"use strict";be();Oe();we();pc=e=>{if(!e||e.length!==1)throw new Error("Softmax op requires 1 input.")},mc=(e,t)=>{let r=e.dims,o=W.size(r),n=64,s=t.axis;if(s<0&&(s=r.length+s),s<r.length-1)throw new Error("softmax only supports last axis for now.");let u=r[s],d=o/u,a=qe(u),p=u/a,h=(I,A)=>A===4?`max(max(${I}.x, ${I}.y), max(${I}.z, ${I}.w))`:A===2?`max(${I}.x, ${I}.y)`:A===3?`max(max(${I}.x, ${I}.y), ${I}.z)`:I,w=U("x",e.dataType,e.dims,a),g=j("result",e.dataType,e.dims,a),v=w.type.value,b=_e(e.dataType)==="f32"?`var threadMax = ${v}(-3.402823e+38f);`:`var threadMax = ${v}(-65504.0h);`,S=I=>`\n      var<workgroup> rowMaxShared : ${v};\n      var<workgroup> rowSumShared : ${v};\n      var<workgroup> threadShared : array<${v}, ${n}>;\n\n      fn getValue(row: i32, col: i32, row_stride: i32) -> ${v} {\n        let index = row * row_stride + col;\n        return x[index];\n      }\n\n      fn setValue(row: i32, col: i32, row_stride: i32, value: ${v}) {\n        let index = row * row_stride + col;\n        result[index] = value;\n      }\n      ${I.registerUniform("packedCols","i32").declareVariables(w,g)}\n      ${I.mainStart()}\n        let gindex = i32(global_id.x);\n        let lindex = i32(local_id.x);\n        const wg = ${n};\n        let row = gindex / wg;\n        let cols = uniforms.packedCols;\n        let row_stride : i32 = uniforms.packedCols;\n\n        // find the rows max\n        ${b}\n        for (var col = lindex; col < cols; col += wg) {\n          let value = getValue(row, col, row_stride);\n          threadMax = max(threadMax, value);\n        }\n        if (lindex < cols) {\n          threadShared[lindex] = threadMax;\n        }\n        workgroupBarrier();\n\n        var reduceSize = min(cols, wg);\n        for (var currSize = reduceSize >> 1;  currSize > 0; currSize = reduceSize >> 1) {\n          reduceSize = currSize + (reduceSize & 1);\n          if (lindex < currSize) {\n            threadShared[lindex] = max(threadShared[lindex], threadShared[lindex + reduceSize]);\n          }\n          workgroupBarrier();\n        }\n        if (lindex == 0) {\n          rowMaxShared = ${v}(${h("threadShared[0]",a)});\n        }\n        workgroupBarrier();\n\n        // find the rows sum\n        var threadSum = ${v}(0.0);\n        for (var col = lindex; col < cols; col += wg) {\n          let subExp = exp(getValue(row, col, row_stride) - rowMaxShared);\n          threadSum += subExp;\n        }\n        threadShared[lindex] = threadSum;\n        workgroupBarrier();\n\n        for (var currSize = wg >> 1;  currSize > 0; currSize = currSize >> 1) {\n          if (lindex < currSize) {\n            threadShared[lindex] = threadShared[lindex] + threadShared[lindex + currSize];\n          }\n          workgroupBarrier();\n        }\n        if (lindex == 0) {\n          rowSumShared = ${v}(${Je("threadShared[0]",a)});\n        }\n        workgroupBarrier();\n\n        // calculate final value for each element in the row\n        for (var col = lindex; col < cols; col += wg) {\n          let value = exp(getValue(row, col, row_stride) - rowMaxShared) / rowSumShared;\n          setValue(row, col, row_stride, value);\n        }\n      }`;return{name:"Softmax",shaderCache:{hint:`${a}`,inputDependencies:["type"]},getRunData:()=>({outputs:[{dims:r,dataType:e.dataType}],dispatchGroup:{x:d},programUniforms:[{type:"uint32",data:p}]}),getShaderSource:S}},Ks=(e,t)=>{pc(e.inputs),e.compute(mc(e.inputs[0],t))},Ys=e=>J({axis:e.axis})});var fc,hc,gc,yc,bc,Xs,Qs,Js=F(()=>{"use strict";be();Oe();we();fc=e=>{if(!e||e.length<1)throw new Error("too few inputs")},hc=(e,t)=>{let r=[],o=t.numOutputs;return e[1].dims[0]>0&&(e[1].getBigInt64Array().forEach(n=>r.push(Number(n))),o=r.length),J({numOutputs:o,axis:t.axis,splitSizes:r})},gc=e=>`\nfn calculateOutputIndex(index: u32) -> u32 {\n    for (var i: u32 = 0u; i < ${e}u; i += 1u ) {\n    if (index < sizeInConcatAxis[i]) {\n        return i;\n    }\n    }\n    return ${e}u;\n}`,yc=e=>{let t=e.length,r=[];for(let o=0;o<t;++o){let n=e[o].setByIndices("indices","input[global_idx]");t===1?r.push(n):o===0?r.push(`if (outputNumber == ${o}u) { ${n} }`):o===t-1?r.push(`else { ${n} }`):r.push(`else if (outputNumber == ${o}) { ${n} }`)}return`\n      fn writeBufferData(outputNumber: u32, indices: ${e[0].type.indices}, global_idx: u32) {\n        ${r.join(`\n`)}\n      }`},bc=(e,t)=>{let r=e[0].dims,o=W.size(r),n=e[0].dataType,s=r.length,u=t.axis,d=u<0?r.length+u:u,a=new Array(t.numOutputs),p=U("input",n,r),h=new Array(t.numOutputs),w=[],g=[],v=0;for(let I=0;I<t.numOutputs;I++){v+=t.splitSizes[I],h[I]=v;let A=r.slice();A[t.axis]=t.splitSizes[I],g.push(A),a[I]=j(`output${I}`,n,g[I]),w.push({dims:g[I],dataType:e[0].dataType})}let b=s<2?"indices":`indices[${d}]`,S=I=>`\n  ${I.declareVariables(p,...a)}\n  const sizeInConcatAxis = array<u32, ${h.length}>(${h.map(A=>`${A}u`).join(",")});\n  ${gc(h.length)}\n  ${yc(a)}\n\n  ${I.mainStart()}\n    ${I.guardAgainstOutOfBoundsWorkgroupSizes(o)}\n\n    var indices = ${p.offsetToIndices("global_idx")};\n    let outputNumber = calculateOutputIndex(${b});\n    if (outputNumber != 0) {\n        ${b} -= sizeInConcatAxis[outputNumber - 1u];\n    }\n    writeBufferData(outputNumber, indices, global_idx);\n  }`;return{name:"Split",shaderCache:{hint:t.cacheKey},getShaderSource:S,getRunData:()=>({outputs:w,dispatchGroup:{x:Math.ceil(o/64)}})}},Xs=(e,t)=>{fc(e.inputs);let r=e.inputs.length===1?t:hc(e.inputs,t);e.compute(bc(e.inputs,r),{inputs:[0]})},Qs=e=>{let t=e.axis,r=e.splitSizes,o=e.numOutputs<0?r.length:e.numOutputs;if(o!==r.length)throw new Error("numOutputs and splitSizes lengh must be equal");return J({axis:t,numOutputs:o,splitSizes:r})}});var eu,wc,vc,$c,tu,ru=F(()=>{"use strict";Ve();be();we();eu=e=>Array.from(e.getBigInt64Array(),Number),wc=e=>{if(!e||e.length!==2)throw new Error("Tile requires 2 inputs.");if(e[0].dataType!==1&&e[0].dataType!==6&&e[0].dataType!==12)throw new Error("Tile only support float, int32, and uint32 data types");if(e[1].dataType!==7)throw new Error("Tile `repeats` input should be of int64 data type");if(e[1].dims.length!==1)throw new Error("Tile `repeats` input should be 1-D");if(eu(e[1]).length!==e[0].dims.length)throw new Error("Tile `repeats` input should have same number of elements as rank of input data tensor")},vc=(e,t)=>{let r=[];for(let o=0;o<e.length;++o)r.push(e[o]*t[o]);return r},$c=e=>{let t=e[0].dims,r=eu(e[1]),o=vc(t,r),n=W.size(o),s=e[0].dataType,u=U("input",s,t),d=j("output",s,o),a=p=>`\n      const inputShape = ${u.indices(...t)};\n      ${p.declareVariables(u,d)}\n      ${p.mainStart()}\n      ${p.guardAgainstOutOfBoundsWorkgroupSizes(n)}\n      let outputIndices = ${d.offsetToIndices("global_idx")};\n      var inputIndices: ${u.type.indices};\n      for (var i = 0; i < ${t.length}; i++) {\n        let inputDimValue = ${d.indicesGet("outputIndices","i")}  % ${u.indicesGet("inputShape","i")};\n\n        ${u.indicesSet("inputIndices","i","inputDimValue")}\n      }\n      ${d.setByOffset("global_idx",u.getByIndices("inputIndices"))}\n    }`;return{name:"Tile",shaderCache:{hint:`${r}`},getRunData:()=>({outputs:[{dims:o,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(n/64)}}),getShaderSource:a}},tu=e=>{wc(e.inputs),e.compute($c(e.inputs),{inputs:[0]})}});var Sc,xc,nu,ou=F(()=>{"use strict";Ve();be();we();Sc=(e,t,r,o,n)=>{let s=W.size(r),u=Math.ceil(s/4),d=j("outputData",n,r,4),a=U("aData",t[1].dataType,t[1].dims,4),p=U("bData",t[2].dataType,t[2].dims,4),h=U("cData",t[0].dataType,t[0].dims,4),w,g=(v,b,S)=>`select(${b}, ${v}, ${S})`;if(!o)w=d.setByOffset("global_idx",g(a.getByOffset("global_idx"),p.getByOffset("global_idx"),h.getByOffset("global_idx")));else{let v=(b,S,I="")=>{let A=`aData[indexA${S}][componentA${S}]`,C=`bData[indexB${S}][componentB${S}]`,R=`bool(cData[indexC${S}] & ${4278190080>>>(3-S)*8}u)`;return`\n            let outputIndices${S} = ${d.offsetToIndices(`global_idx * 4u + ${S}u`)};\n            let offsetA${S} = ${a.broadcastedIndicesToOffset(`outputIndices${S}`,d)};\n            let offsetB${S} = ${p.broadcastedIndicesToOffset(`outputIndices${S}`,d)};\n            let offsetC${S} = ${h.broadcastedIndicesToOffset(`outputIndices${S}`,d)};\n            let indexA${S} = offsetA${S} / 4u;\n            let indexB${S} = offsetB${S} / 4u;\n            let indexC${S} = offsetC${S} / 4u;\n            let componentA${S} = offsetA${S} % 4u;\n            let componentB${S} = offsetB${S} % 4u;\n            ${b}[${S}] = ${I}(${g(A,C,R)});\n          `};n===9?w=`\n            var data = vec4<u32>(0);\n            ${v("data",0,"u32")}\n            ${v("data",1,"u32")}\n            ${v("data",2,"u32")}\n            ${v("data",3,"u32")}\n            outputData[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));`:w=`\n            ${v("outputData[global_idx]",0)}\n            ${v("outputData[global_idx]",1)}\n            ${v("outputData[global_idx]",2)}\n            ${v("outputData[global_idx]",3)}\n          `}return`\n        ${e.declareVariables(h,a,p,d)}\n        ${e.mainStart()}\n        ${e.guardAgainstOutOfBoundsWorkgroupSizes(u)}\n        ${w}\n      }`},xc=e=>{let t=e[1].dims,r=e[2].dims,o=e[0].dims,n=e[1].dataType,s=!(W.areEqual(t,r)&&W.areEqual(r,o)),u=t,d=W.size(t);if(s){let a=it.calcShape(it.calcShape(t,r,!1),o,!1);if(!a)throw new Error("Can\'t perform where op on the given tensors");u=a,d=W.size(u)}return{name:"Where",getShaderSource:a=>Sc(a,e,u,s,n),getRunData:()=>({outputs:[{dims:u,dataType:n}],dispatchGroup:{x:Math.ceil(d/64/4)}})}},nu=e=>{e.compute(xc(e.inputs))}});var au,iu=F(()=>{"use strict";ha();En();Ma();za();gi();_i();Oi();Dn();Gi();qi();Zi();Ji();rs();as();us();cs();ms();ys();vs();Ms();zs();zr();Ns();Gs();qs();Zs();Js();ru();Vt();Pn();ou();au=new Map([["Abs",[Va]],["Acos",[Wa]],["Acosh",[Na]],["Add",[yi]],["ArgMax",[fa,Tn]],["ArgMin",[ma,Tn]],["Asin",[Ua]],["Asinh",[Ha]],["Atan",[Ga]],["Atanh",[La]],["Attention",[ya,ga]],["AveragePool",[As,Is]],["BatchNormalization",[Ba]],["BiasAdd",[Da]],["BiasSplitGelu",[hi]],["Cast",[ja,Fa]],["Ceil",[Ka]],["Clip",[qa]],["Concat",[Ti,Ei]],["Conv",[Vn,zn]],["ConvTranspose",[Hi,Ui]],["Cos",[Ya]],["Cosh",[Za]],["Div",[bi]],["Einsum",[Fi,ji]],["Elu",[Xa,Lr]],["Equal",[wi]],["Erf",[Qa]],["Exp",[Ja]],["Expand",[Yi]],["Floor",[ei]],["FusedConv",[Vn,zn]],["Gather",[Qi,Xi]],["GatherElements",[ts,es]],["Gelu",[ti]],["Gemm",[ns,os]],["GlobalAveragePool",[Es,Ts]],["GlobalMaxPool",[Bs,Rs]],["Greater",[xi]],["GreaterOrEqual",[Ii]],["InstanceNormalization",[ss,is]],["LayerNormalization",[ds,ls]],["LeakyRelu",[ri,Lr]],["Less",[Ci]],["LessOrEqual",[Ai]],["Log",[fi]],["MatMul",[ps]],["MaxPool",[ks,Ps]],["Mul",[vi]],["MultiHeadAttention",[gs,hs]],["Neg",[oi]],["Not",[ni]],["Pad",[bs,ws]],["Pow",[$i]],["Range",[Ds]],["Reciprocal",[ai]],["ReduceMin",[sa,tt]],["ReduceMean",[ra,tt]],["ReduceMax",[ia,tt]],["ReduceSum",[la,tt]],["ReduceProd",[ua,tt]],["ReduceL1",[na,tt]],["ReduceL2",[oa,tt]],["ReduceLogSum",[ca,tt]],["ReduceLogSumExp",[aa,tt]],["ReduceSumSquare",[da,tt]],["Relu",[ii]],["Resize",[Vs,Ws]],["Sigmoid",[si]],["Sin",[ui]],["Sinh",[li]],["Slice",[Fs,js]],["SkipLayerNormalization",[Us,Hs]],["Split",[Xs,Qs]],["Sqrt",[di]],["Softmax",[Ks,Ys]],["Sub",[Si]],["Tan",[ci]],["Tanh",[pi]],["ThresholdedRelu",[mi,Lr]],["Tile",[tu]],["Transpose",[Go,Lo]],["Where",[nu]]])});var en,su=F(()=>{"use strict";Ve();wt();we();en=class{constructor(t){this.backend=t;this.repo=new Map,this.attributesBound=!1}getArtifact(t){return this.repo.get(t)}setArtifact(t,r){this.repo.set(t,r)}run(t,r,o,n,s,u,d){let a=this.backend.device,p=this.backend.getComputePassEncoder();p.setPipeline(t.computePipeline);let h=[];for(let g of n)h.push({binding:h.length,resource:{buffer:g.buffer}});for(let g of s)h.push({binding:h.length,resource:{buffer:g.buffer}});d&&h.push({binding:h.length,resource:d});let w=a.createBindGroup({layout:t.computePipeline.getBindGroupLayout(0),entries:h,label:t.programInfo.name});if(p.setBindGroup(0,w),p.dispatchWorkgroups(...u),this.backend.pendingDispatchNumber++,this.backend.isQueryEnabled()){typeof this.backend.queryData>"u"&&(this.backend.queryData=this.backend.gpuDataManager.create(this.backend.querySetCount*8,GPUBufferUsage.COPY_SRC|GPUBufferUsage.QUERY_RESOLVE));let g=this.backend.gpuDataManager.create(this.backend.querySetCount*8,GPUBufferUsage.MAP_READ|GPUBufferUsage.COPY_DST);this.backend.endComputePass(),this.backend.getCommandEncoder().resolveQuerySet(this.backend.querySet,0,2,this.backend.queryData.buffer,0),this.backend.getCommandEncoder().copyBufferToBuffer(this.backend.queryData.buffer,0,g.buffer,0,this.backend.querySetCount*8),this.backend.flush();let v=this.backend.currentKernelId,b=this.backend.kernels.get(v),S=`[${b[0]}] ${b[1]}`;g.buffer.mapAsync(GPUMapMode.READ).then(()=>{let I=new BigUint64Array(g.buffer.getMappedRange()),A=I[0],C=I[1];g.buffer.unmap(),typeof this.backend.queryTimeBase>"u"&&(this.backend.queryTimeBase=A);let R=Number(A-this.backend.queryTimeBase),_=Number(C-this.backend.queryTimeBase);if(!Number.isSafeInteger(R)||!Number.isSafeInteger(_))throw new RangeError("incorrect timestamp range");this.backend.gpuDataManager.release(g.id);let B="";r.forEach((z,V)=>{B+=`input[${V}]: [${z.dims}] | ${or(z.dataType)}, `});let E="";o.forEach((z,V)=>{E+=`output[${V}]: [${z.dims}] | ${or(z.dataType)}, `}),console.log(`[profiling] kernel "${v}|${S}" ${B}${E}execution time: ${_-R} ns`)})}this.backend.pendingDispatchNumber>=16&&this.backend.flush()}dispose(){}build(t,r){let o=this.backend.device,n=[];o.features.has("shader-f16")&&n.push("enable f16;");let s=Uo(r),u=t.getShaderSource(s),d=`${n.join(`\n`)}\n${s.additionalImplementations}\n${u}`,a=o.createShaderModule({code:d,label:t.name});Pe("verbose",()=>`[WebGPU] ${t.name} shader code: ${d}`);let p=o.createComputePipeline({compute:{module:a,entryPoint:"main"},layout:"auto",label:t.name});return{programInfo:t,computePipeline:p}}normalizeDispatchGroupSize(t){let r=typeof t=="number"?t:t.x,o=typeof t=="number"?1:t.y||1,n=typeof t=="number"?1:t.z||1,s=this.backend.device.limits.maxComputeWorkgroupsPerDimension;if(r<=s&&o<=s&&n<=s)return[r,o,n];let u=r*o*n,d=Math.ceil(Math.sqrt(u));if(d>s){if(d=Math.ceil(Math.cbrt(u)),d>s)throw new Error("Total dispatch size exceeds WebGPU maximum.");return[d,d,d]}else return[d,d,1]}}});var Cc,Ic,tn,uu=F(()=>{"use strict";wt();Bo();Vo();iu();su();Cc=(e,t)=>{if(t.length!==e.length)throw new Error(`inputDependencies length ${t.length} is not equal to inputTensors length ${e.length}.`);let r=[];for(let o=0;o<e.length;++o){let n=e[o].dataType;switch(t[o]){case"none":{r.push("");break}case"type":{r.push(`${n}`);break}case"rank":{let s=e[o].dims.length;r.push(`${n};${s}`);break}case"dims":{let s=e[o].dims.join(",");r.push(`${n};${s}`);break}default:throw new Error(`unsupported input dependency: ${t[o]}`)}}return r.join("|")},Ic=(e,t,r)=>{let o=e.name;return e.shaderCache?.hint&&(o+="["+e.shaderCache.hint+"]"),o+=":"+r+`:${Cc(t,e.shaderCache?.inputDependencies??new Array(t.length).fill("dims"))}`,o},tn=class{constructor(){this.currentKernelId=null;this.commandEncoder=null;this.computePassEncoder=null;this.pendingDispatchNumber=0;this.querySetCount=2;this.sessionExternalDataMapping=new Map}get currentKernelCustomData(){if(this.currentKernelId===null)throw new Error("currentKernelCustomData(): currentKernelId is null. (should not happen)");let t=this.kernelCustomData.get(this.currentKernelId);return t||(t={},this.kernelCustomData.set(this.currentKernelId,t)),t}async initialize(t){if(!navigator.gpu)throw new Error("WebGpuBackend: WebGPU is not available.");let r=await navigator.gpu.requestAdapter();if(!r)throw new Error("WebGpuBackend: Failed to get GPU adapter.");this.env=t;let o=[],n={requiredLimits:{maxComputeWorkgroupStorageSize:r.limits.maxComputeWorkgroupStorageSize,maxComputeWorkgroupsPerDimension:r.limits.maxComputeWorkgroupsPerDimension,maxStorageBufferBindingSize:r.limits.maxStorageBufferBindingSize,maxBufferSize:r.limits.maxBufferSize,maxComputeInvocationsPerWorkgroup:r.limits.maxComputeInvocationsPerWorkgroup,maxComputeWorkgroupSizeX:r.limits.maxComputeWorkgroupSizeX,maxComputeWorkgroupSizeY:r.limits.maxComputeWorkgroupSizeY,maxComputeWorkgroupSizeZ:r.limits.maxComputeWorkgroupSizeZ},requiredFeatures:o};r.features.has("timestamp-query")&&o.push("timestamp-query"),r.features.has("shader-f16")&&o.push("shader-f16"),this.device=await r.requestDevice(n),this.gpuDataManager=zo(this),this.programManager=new en(this),this.kernels=new Map,this.kernelPersistentData=new Map,this.kernelCustomData=new Map,Po(t.logLevel,!!t.debug),this.device.onuncapturederror=s=>{s.error instanceof GPUValidationError&&console.error(`An uncaught WebGPU validation error was raised: ${s.error.message}`)},Object.defineProperty(this.env.webgpu,"device",{value:this.device})}dispose(){typeof this.querySet<"u"&&this.querySet.destroy(),this.gpuDataManager.dispose()}getCommandEncoder(){return this.commandEncoder||(this.commandEncoder=this.device.createCommandEncoder()),this.commandEncoder}getComputePassEncoder(){if(!this.computePassEncoder){let t={};this.isQueryEnabled()&&(typeof this.querySet>"u"&&(this.querySet=this.device.createQuerySet({type:"timestamp",count:this.querySetCount})),t.timestampWrites={querySet:this.querySet,beginningOfPassWriteIndex:0,endOfPassWriteIndex:1}),this.computePassEncoder=this.getCommandEncoder().beginComputePass(t)}return this.computePassEncoder}endComputePass(){this.computePassEncoder&&(this.computePassEncoder.end(),this.computePassEncoder=null)}flush(){this.commandEncoder&&(this.endComputePass(),this.device.queue.submit([this.getCommandEncoder().finish()]),this.gpuDataManager.refreshPendingBuffers(),this.commandEncoder=null,this.pendingDispatchNumber=0)}isQueryEnabled(){return!!(this.device.features.has("timestamp-query")&&this.env.webgpu.profilingMode==="default")}run(t,r,o,n,s){let u=[];for(let C=0;C<r.length;++C){let R=this.gpuDataManager.get(r[C].data);if(!R)throw new Error(`no GPU data for input: ${r[C].data}`);u[C]=R}let{outputs:d,dispatchGroup:a,programUniforms:p}=t.getRunData(r),h=o.length===0?d.map((C,R)=>R):o;if(h.length!==d.length)throw new Error(`Output size ${h.length} must be equal to ${d.length}.`);let w=[],g=[];for(let C=0;C<d.length;++C){if(!Number.isInteger(h[C])||h[C]<-3||h[C]>=d.length)throw new Error(`Invalid output index: ${h[C]}`);if(h[C]===-3)continue;let R=h[C]===-1,_=h[C]===-2,B=R||_?s(d[C].dataType,d[C].dims):n(h[C],d[C].dataType,d[C].dims),E=this.gpuDataManager.get(B.data);if(!E)throw new Error(`no GPU data for output: ${B.data}`);if(R&&this.temporaryData.push(E),_){let z=this.kernelPersistentData.get(this.currentKernelId);z||(z=[],this.kernelPersistentData.set(this.currentKernelId,z)),z.push(E)}w.push(B),g.push(E)}let v;if(p){let C=0,R=0,_=[],B=1;p.forEach(V=>{let K=typeof V.data=="number"?[V.data]:V.data;if(K.length===0)return;let ee;switch(K.length){case 1:ee=4;break;case 2:ee=8;break;case 3:ee=16;break;case 4:ee=16;break;case 5:ee=16;break;case 6:ee=16;break;default:throw new Error(`unsupported data length: ${K.length}`)}(R===5||R===6)&&(ee=16),ee>B&&(B=ee),C=Math.ceil(C/ee)*ee,R=K.length,_.push(C),C+=K.length*4}),C=Math.ceil(C/B)*B;let E=new ArrayBuffer(C);p.forEach((V,K)=>{let ee=_[K],M=typeof V.data=="number"?[V.data]:V.data;V.type==="int32"?new Int32Array(E,ee,M.length).set(M):V.type==="uint32"?new Uint32Array(E,ee,M.length).set(M):new Float32Array(E,ee,M.length).set(M)});let z=this.gpuDataManager.create(C,GPUBufferUsage.COPY_DST|GPUBufferUsage.UNIFORM);this.device.queue.writeBuffer(z.buffer,0,E,0,C),this.gpuDataManager.release(z.id),v={offset:0,size:C,buffer:z.buffer}}let b=this.programManager.normalizeDispatchGroupSize(a),S=b[1]===1&&b[2]===1,I=Ic(t,r,S),A=this.programManager.getArtifact(I);return A||(A=this.programManager.build(t,b),this.programManager.setArtifact(I,A)),Pe("info",()=>`[ProgramManager] run "${t.name}" (key=${I}) with ${b[0]}x${b[1]}x${b[2]}`),this.programManager.run(A,r,w,u,g,b,v),w}upload(t,r){this.gpuDataManager.upload(t,r)}memcpy(t,r){this.gpuDataManager.memcpy(t,r)}async download(t,r){await this.gpuDataManager.download(t,r)}alloc(t){return this.gpuDataManager.create(t).id}free(t){return this.gpuDataManager.release(t)}createKernel(t,r,o,n){let s=au.get(t);if(!s)throw new Error(`kernel not implemented: ${t}`);this.kernels.set(r,[t,n,s[0],[s[1],o]])}releaseKernel(t){let r=this.kernelPersistentData.get(t);if(r){for(let o of r)this.gpuDataManager.release(o.id);this.kernelPersistentData.delete(t)}this.kernelCustomData.delete(t),this.kernels.delete(t)}computeKernel(t,r,o){let n=this.kernels.get(t);if(!n)throw new Error(`kernel not created: ${t}`);let[s,u,d,a]=n;if(this.currentKernelId!==null)throw new Error(`kernel "[${s}] ${u}" is not allowed to be called recursively`);this.currentKernelId=t,a[0]&&(a[1]=a[0](a[1]),a[0]=void 0),Pe("info",()=>`[WebGPU] Start to run kernel "[${s}] ${u}"...`);let p=this.env.debug;this.temporaryData=[];try{return p&&this.device.pushErrorScope("validation"),d(r,a[1]),0}catch(h){return o.push(Promise.resolve(`[WebGPU] Kernel "[${s}] ${u}" failed. ${h}`)),1}finally{p&&o.push(this.device.popErrorScope().then(h=>h?`GPU validation error for kernel "[${s}] ${u}": ${h.message}`:null));for(let h of this.temporaryData)this.gpuDataManager.release(h.id);this.temporaryData=[],this.currentKernelId=null}}registerBuffer(t,r,o,n){let s=this.sessionExternalDataMapping.get(t);s||(s=new Map,this.sessionExternalDataMapping.set(t,s));let u=s.get(r),d=this.gpuDataManager.registerExternalBuffer(o,n,u?.[1]);return s.set(r,[d,o]),d}unregisterBuffers(t){let r=this.sessionExternalDataMapping.get(t);r&&(r.forEach(o=>this.gpuDataManager.unregisterExternalBuffer(o[1])),this.sessionExternalDataMapping.delete(t))}getBuffer(t){let r=this.gpuDataManager.get(t);if(!r)throw new Error(`no GPU data for buffer: ${t}`);return r.buffer}createDownloader(t,r,o){return async()=>{let n=await $n(this,t,r);return Ro(n.buffer,o)}}}});var lu={};Er(lu,{init:()=>Ac});var dr,Ln,Ac,du=F(()=>{"use strict";Ve();uu();wt();be();dr=class e{constructor(t,r,o,n){this.module=t;this.dataType=r;this.data=o;this.dims=n}getFloat32Array(){if(this.dataType!==1)throw new Error("Invalid data type");let t=W.size(this.dims);return t===0?new Float32Array:new Float32Array(this.module.HEAP8.buffer,this.data,t)}getBigInt64Array(){if(this.dataType!==7)throw new Error("Invalid data type");let t=W.size(this.dims);return t===0?new BigInt64Array:new BigInt64Array(this.module.HEAP8.buffer,this.data,t)}getInt32Array(){if(this.dataType!==6)throw new Error("Invalid data type");let t=W.size(this.dims);return t===0?new Int32Array:new Int32Array(this.module.HEAP8.buffer,this.data,t)}reshape(t){if(W.size(t)!==W.size(this.dims))throw new Error("Invalid new shape");return new e(this.module,this.dataType,this.data,t)}},Ln=class{constructor(t,r,o){this.module=t;this.backend=r;this.customDataOffset=0;this.customDataSize=0;let n=t.HEAPU32,s=o>>2;this.opKernelContext=n[s++];let u=n[s++];this.outputCount=n[s++],this.customDataOffset=n[s++],this.customDataSize=n[s++];let d=[];for(let a=0;a<u;a++){let p=n[s++],h=n[s++],w=n[s++],g=[];for(let v=0;v<w;v++)g.push(n[s++]);d.push(new dr(t,p,h,g))}this.inputs=d}get kernelCustomData(){return this.backend.currentKernelCustomData}get customDataBuffer(){return this.module.HEAPU8.subarray(this.customDataOffset,this.customDataOffset+this.customDataSize)}compute(t,r){let o=r?.inputs?.map(d=>typeof d=="number"?this.inputs[d]:d)??this.inputs,n=r?.outputs??[],s=(d,a,p)=>new dr(this.module,a,this.output(d,p),p),u=(d,a)=>{let p=ar(d);if(!p)throw new Error(`Unsupported data type: ${d}`);let h=p*W.size(a);return new dr(this.module,d,this.backend.gpuDataManager.create(h).id,a)};return this.backend.run(t,o,n,s,u)}output(t,r){let o=this.module.stackSave();try{let n=this.module.stackAlloc((1+r.length)*4),s=n>>2;this.module.HEAPU32[s++]=r.length;for(let u=0;u<r.length;u++)this.module.HEAPU32[s++]=r[u];return this.module._JsepOutput(this.opKernelContext,t,n)}catch(n){throw new Error(`Failed to generate kernel\'s output[${t}] with dims [${r}]. If you are running with pre-allocated output, please make sure the output type/dims are correct. Error: ${n}`)}finally{this.module.stackRestore(o)}}},Ac=async(e,t)=>{let r=e.jsepInit;if(r&&navigator.gpu){if(!t.wasm.simd)throw new Error("Not supported for WebGPU=ON and SIMD=OFF. Please set `env.wasm.simd` to true when using WebGPU EP");let o=new tn;await o.initialize(t),r(o,n=>o.alloc(n),n=>o.free(n),(n,s,u,d=!1)=>{if(d)Pe("verbose",()=>`[WebGPU] jsepCopyGpuToGpu: src=${n}, dst=${s}, size=${u}`),o.memcpy(n,s);else{Pe("verbose",()=>`[WebGPU] jsepCopyCpuToGpu: dataOffset=${n}, gpuDataId=${s}, size=${u}`);let a=e.HEAPU8.subarray(n,n+u);o.upload(s,a)}},async(n,s,u)=>{Pe("verbose",()=>`[WebGPU] jsepCopyGpuToCpu: gpuDataId=${n}, dataOffset=${s}, size=${u}`),await o.download(n,()=>e.HEAPU8.subarray(s,s+u))},(n,s,u)=>o.createKernel(n,s,u,t.debug||t.webgpu.profilingMode==="default"?e.UTF8ToString(e._JsepGetNodeName(s)):`${s}`),n=>o.releaseKernel(n),(n,s,u,d)=>{Pe("verbose",()=>`[WebGPU] jsepRun: sessionHandle=${u}, kernel=${n}, contextDataOffset=${s}`);let a=new Ln(e,o,s);return o.computeKernel(n,a,d)})}}});var Io;Io=ho();var Uu=So(),gn,yn=!1,Or=!1,Co=!1,Hu=()=>{try{return typeof SharedArrayBuffer>"u"?!1:(typeof MessageChannel<"u"&&new MessageChannel().port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11])))}catch{return!1}},Gu=()=>{try{return WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,30,1,28,0,65,0,253,15,253,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,186,1,26,11]))}catch{return!1}},Lu=(e,t)=>e?t?"ort-wasm-simd-threaded.wasm":"ort-wasm-simd.wasm":t?"ort-wasm-threaded.wasm":"ort-wasm.wasm",Ao=async e=>{if(yn)return Promise.resolve();if(Or)throw new Error("multiple calls to \'initializeWebAssembly()\' detected.");if(Co)throw new Error("previous call to \'initializeWebAssembly()\' failed.");Or=!0;let t=e.initTimeout,r=e.numThreads,o=e.simd,n=r>1&&Hu(),s=o&&Gu(),u=e.wasmPaths,d=typeof u=="string"?u:void 0,a=Lu(s,n),p=typeof u=="object"?u[a]:void 0,h=!1,w=[];if(t>0&&w.push(new Promise(g=>{setTimeout(()=>{h=!0,g()},t)})),w.push(new Promise((g,v)=>{let b=n?Uu:Io,S={locateFile:(I,A)=>{if(n&&I.endsWith(".worker.js")&&typeof Blob<"u")return URL.createObjectURL(new Blob([xo()],{type:"text/javascript"}));if(I.endsWith(".wasm")){if(p)return p;let C=d??A;return a==="ort-wasm-simd.wasm"?C+"ort-wasm-simd.jsep.wasm":a==="ort-wasm-simd-threaded.wasm"?C+"ort-wasm-simd-threaded.jsep.wasm":C+a}return A+I}};if(n)if(typeof Blob>"u")S.mainScriptUrlOrBlob=(void 0)(__dirname,"ort-wasm-threaded.js");else{let I=`var ortWasmThreaded=${b.toString()};`;S.mainScriptUrlOrBlob=new Blob([I],{type:"text/javascript"})}b(S).then(I=>{Or=!1,yn=!0,gn=I,g()},I=>{Or=!1,Co=!0,v(I)})})),await Promise.race(w),h)throw new Error(`WebAssembly backend initializing failed due to timeout: ${t}ms`)},Be=()=>{if(yn&&gn)return gn;throw new Error("WebAssembly is not initialized yet.")};var De=(e,t)=>{let r=Be(),o=r.lengthBytesUTF8(e)+1,n=r._malloc(o);return r.stringToUTF8(e,n,o),t.push(n),n},nr=(e,t,r,o)=>{if(typeof e=="object"&&e!==null){if(r.has(e))throw new Error("Circular reference in options");r.add(e)}Object.entries(e).forEach(([n,s])=>{let u=t?t+n:n;if(typeof s=="object")nr(s,u+".",r,o);else if(typeof s=="string"||typeof s=="number")o(u,s.toString());else if(typeof s=="boolean")o(u,s?"1":"0");else throw new Error(`Can\'t handle extra config type: ${typeof s}`)})},Ee=e=>{let t=Be(),r=t.stackSave();try{let o=t.stackAlloc(8);t._OrtGetLastError(o,o+4);let n=t.HEAP32[o/4],s=t.HEAPU32[o/4+1],u=s?t.UTF8ToString(s):"";throw new Error(`${e} ERROR_CODE: ${n}, ERROR_MESSAGE: ${u}`)}finally{t.stackRestore(r)}};var _o=e=>{let t=Be(),r=0,o=[],n=e||{};try{if(e?.logSeverityLevel===void 0)n.logSeverityLevel=2;else if(typeof e.logSeverityLevel!="number"||!Number.isInteger(e.logSeverityLevel)||e.logSeverityLevel<0||e.logSeverityLevel>4)throw new Error(`log serverity level is not valid: ${e.logSeverityLevel}`);if(e?.logVerbosityLevel===void 0)n.logVerbosityLevel=0;else if(typeof e.logVerbosityLevel!="number"||!Number.isInteger(e.logVerbosityLevel))throw new Error(`log verbosity level is not valid: ${e.logVerbosityLevel}`);e?.terminate===void 0&&(n.terminate=!1);let s=0;return e?.tag!==void 0&&(s=De(e.tag,o)),r=t._OrtCreateRunOptions(n.logSeverityLevel,n.logVerbosityLevel,!!n.terminate,s),r===0&&Ee("Can\'t create run options."),e?.extra!==void 0&&nr(e.extra,"",new WeakSet,(u,d)=>{let a=De(u,o),p=De(d,o);t._OrtAddRunConfigEntry(r,a,p)!==0&&Ee(`Can\'t set a run config entry: ${u} - ${d}.`)}),[r,o]}catch(s){throw r!==0&&t._OrtReleaseRunOptions(r),o.forEach(u=>t._free(u)),s}};var Fu=e=>{switch(e){case"disabled":return 0;case"basic":return 1;case"extended":return 2;case"all":return 99;default:throw new Error(`unsupported graph optimization level: ${e}`)}},ju=e=>{switch(e){case"sequential":return 0;case"parallel":return 1;default:throw new Error(`unsupported execution mode: ${e}`)}},qu=e=>{e.extra||(e.extra={}),e.extra.session||(e.extra.session={});let t=e.extra.session;t.use_ort_model_bytes_directly||(t.use_ort_model_bytes_directly="1"),e.executionProviders&&e.executionProviders.some(r=>(typeof r=="string"?r:r.name)==="webgpu")&&(e.enableMemPattern=!1)},Ku=(e,t,r)=>{for(let o of t){let n=typeof o=="string"?o:o.name;switch(n){case"xnnpack":n="XNNPACK";break;case"webnn":if(n="WEBNN",typeof o!="string"){let u=o;if(u?.deviceType){let d=De("deviceType",r),a=De(u.deviceType,r);Be()._OrtAddSessionConfigEntry(e,d,a)!==0&&Ee(`Can\'t set a session config entry: \'deviceType\' - ${u.deviceType}.`)}if(u?.numThreads){let d=u.numThreads;(typeof d!="number"||!Number.isInteger(d)||d<0)&&(d=0);let a=De("numThreads",r),p=De(d.toString(),r);Be()._OrtAddSessionConfigEntry(e,a,p)!==0&&Ee(`Can\'t set a session config entry: \'numThreads\' - ${u.numThreads}.`)}if(u?.powerPreference){let d=De("powerPreference",r),a=De(u.powerPreference,r);Be()._OrtAddSessionConfigEntry(e,d,a)!==0&&Ee(`Can\'t set a session config entry: \'powerPreference\' - ${u.powerPreference}.`)}}break;case"webgpu":if(n="JS",typeof o!="string"){let u=o;if(u?.preferredLayout){if(u.preferredLayout!=="NCHW"&&u.preferredLayout!=="NHWC")throw new Error(`preferredLayout must be either \'NCHW\' or \'NHWC\': ${u.preferredLayout}`);let d=De("preferredLayout",r),a=De(u.preferredLayout,r);Be()._OrtAddSessionConfigEntry(e,d,a)!==0&&Ee(`Can\'t set a session config entry: \'preferredLayout\' - ${u.preferredLayout}.`)}}break;case"wasm":case"cpu":continue;default:throw new Error(`not supported execution provider: ${n}`)}let s=De(n,r);Be()._OrtAppendExecutionProvider(e,s)!==0&&Ee(`Can\'t append execution provider: ${n}.`)}},To=e=>{let t=Be(),r=0,o=[],n=e||{};qu(n);try{let s=Fu(n.graphOptimizationLevel??"all"),u=ju(n.executionMode??"sequential"),d=typeof n.logId=="string"?De(n.logId,o):0,a=n.logSeverityLevel??2;if(!Number.isInteger(a)||a<0||a>4)throw new Error(`log serverity level is not valid: ${a}`);let p=n.logVerbosityLevel??0;if(!Number.isInteger(p)||p<0||p>4)throw new Error(`log verbosity level is not valid: ${p}`);let h=typeof n.optimizedModelFilePath=="string"?De(n.optimizedModelFilePath,o):0;if(r=t._OrtCreateSessionOptions(s,!!n.enableCpuMemArena,!!n.enableMemPattern,u,!!n.enableProfiling,0,d,a,p,h),r===0&&Ee("Can\'t create session options."),n.executionProviders&&Ku(r,n.executionProviders,o),n.freeDimensionOverrides)for(let[w,g]of Object.entries(n.freeDimensionOverrides)){if(typeof w!="string")throw new Error(`free dimension override name must be a string: ${w}`);if(typeof g!="number"||!Number.isInteger(g)||g<0)throw new Error(`free dimension override value must be a non-negative integer: ${g}`);let v=De(w,o);t._OrtAddFreeDimensionOverride(r,v,g)!==0&&Ee(`Can\'t set a free dimension override: ${w} - ${g}.`)}return n.extra!==void 0&&nr(n.extra,"",new WeakSet,(w,g)=>{let v=De(w,o),b=De(g,o);t._OrtAddSessionConfigEntry(r,v,b)!==0&&Ee(`Can\'t set a session config entry: ${w} - ${g}.`)}),[r,o]}catch(s){throw r!==0&&t._OrtReleaseSessionOptions(r),o.forEach(u=>t._free(u)),s}};Ve();var pu=!1,_c=e=>{let t=Be(),r=t.stackSave();try{let o=t.stackAlloc(8);return t._OrtGetInputOutputCount(e,o,o+4)!==0&&Ee("Can\'t get session input/output count."),[t.HEAP32[o/4],t.HEAP32[o/4+1]]}finally{t.stackRestore(r)}},Tc=(e,t)=>{Be()._OrtInit(e,t)!==0&&Ee("Can\'t initialize onnxruntime.")},mu=async e=>{Tc(e.wasm.numThreads,ir(e.logLevel));{let t=(du(),zt(lu)).init;await t(Be(),e)}pu=!0},cr=new Map,fu=()=>pu,Fn=e=>{let t=Be(),r=t._malloc(e.byteLength);if(r===0)throw new Error(`Can\'t create a session. failed to allocate a buffer of size ${e.byteLength}.`);return t.HEAPU8.set(e,r),[r,e.byteLength]},jn=(e,t)=>{let r=Be(),o=0,n=0,s=0,u=[],d=[],a=[];try{[n,u]=To(t),o=r._OrtCreateSession(e[0],e[1],n),o===0&&Ee("Can\'t create a session.");let[p,h]=_c(o),w=[],g=[],v=[];for(let S=0;S<p;S++){let I=r._OrtGetInputName(o,S);I===0&&Ee("Can\'t get an input name."),d.push(I),w.push(r.UTF8ToString(I))}for(let S=0;S<h;S++){let I=r._OrtGetOutputName(o,S);I===0&&Ee("Can\'t get an output name."),a.push(I);let A=r.UTF8ToString(I);g.push(A);{let C=typeof t?.preferredOutputLocation=="string"?t.preferredOutputLocation:t?.preferredOutputLocation?.[A]??"cpu";if(C!=="cpu"&&C!=="cpu-pinned"&&C!=="gpu-buffer")throw new Error(`Not supported preferred output location: ${C}.`);v.push(C)}}let b=null;return v.some(S=>S==="gpu-buffer")&&(s=r._OrtCreateBinding(o),s===0&&Ee("Can\'t create IO binding."),b={handle:s,outputPreferredLocations:v,outputPreferredLocationsEncoded:v.map(S=>wn(S))}),cr.set(o,[o,d,a,b]),[o,w,g]}catch(p){throw d.forEach(h=>r._OrtFree(h)),a.forEach(h=>r._OrtFree(h)),s!==0&&r._OrtReleaseBinding(s),o!==0&&r._OrtReleaseSession(o),p}finally{r._free(e[0]),n!==0&&r._OrtReleaseSessionOptions(n),u.forEach(p=>r._free(p))}},hu=(e,t)=>{let r=Fn(e);return jn(r,t)},gu=e=>{let t=Be(),r=cr.get(e);if(!r)throw new Error(`cannot release session. invalid session id: ${e}`);let[o,n,s,u]=r;u&&t._OrtReleaseBinding(u.handle),t.jsepUnregisterBuffers?.(e),n.forEach(d=>t._OrtFree(d)),s.forEach(d=>t._OrtFree(d)),t._OrtReleaseSession(o),cr.delete(e)},cu=(e,t,r,o,n)=>{if(!e){t.push(0);return}let s=Be(),u=e[0],d=e[1],a=e[3],p,h;if(u==="string"&&a==="gpu-buffer")throw new Error("String tensor is not supported on GPU.");if(a==="gpu-buffer"){let v=e[2].gpuBuffer,b=ar(bn(u));h=d.reduce((S,I)=>S*I,1)*b,p=s.jsepRegisterBuffer(o,n,v,h)}else{let v=e[2];if(Array.isArray(v)){h=4*v.length,p=s._malloc(h),r.push(p);let b=p/4;for(let S=0;S<v.length;S++){if(typeof v[S]!="string")throw new TypeError(`tensor data at index ${S} is not a string`);s.HEAPU32[b++]=De(v[S],r)}}else h=v.byteLength,p=s._malloc(h),r.push(p),s.HEAPU8.set(new Uint8Array(v.buffer,v.byteOffset,h),p)}let w=s.stackSave(),g=s.stackAlloc(4*d.length);try{let v=g/4;d.forEach(S=>s.HEAP32[v++]=S);let b=s._OrtCreateTensor(bn(u),p,h,g,d.length,wn(a));b===0&&Ee(`Can\'t create tensor for input/output. session=${o}, index=${n}.`),t.push(b)}finally{s.stackRestore(w)}},yu=async(e,t,r,o,n,s)=>{let u=Be(),d=cr.get(e);if(!d)throw new Error(`cannot run inference. invalid session id: ${e}`);let[a,p,h,w]=d,g=t.length,v=o.length,b=0,S=[],I=[],A=[],C=[],R=u.stackSave(),_=u.stackAlloc(g*4),B=u.stackAlloc(g*4),E=u.stackAlloc(v*4),z=u.stackAlloc(v*4);try{[b,S]=_o(s);for(let re=0;re<g;re++)cu(r[re],I,C,e,t[re]);for(let re=0;re<v;re++)cu(n[re],A,C,e,g+o[re]);let V=_/4,K=B/4,ee=E/4,M=z/4;for(let re=0;re<g;re++)u.HEAPU32[V++]=I[re],u.HEAPU32[K++]=p[t[re]];for(let re=0;re<v;re++)u.HEAPU32[ee++]=A[re],u.HEAPU32[M++]=h[o[re]];if(w){let{handle:re,outputPreferredLocations:ve,outputPreferredLocationsEncoded:q}=w;if(p.length!==g)throw new Error(`input count from feeds (${g}) is expected to be always equal to model\'s input count (${p.length}).`);for(let $e=0;$e<g;$e++){let Ie=t[$e];await u._OrtBindInput(re,p[Ie],I[$e])!==0&&Ee(`Can\'t bind input[${$e}] for session=${e}.`)}for(let $e=0;$e<v;$e++){let Ie=o[$e];n[$e]?.[3]?u._OrtBindOutput(re,h[Ie],A[$e],0)!==0&&Ee(`Can\'t bind pre-allocated output[${$e}] for session=${e}.`):u._OrtBindOutput(re,h[Ie],0,q[Ie])!==0&&Ee(`Can\'t bind output[${$e}] to ${ve[$e]} for session=${e}.`)}}let Z;w?Z=await u._OrtRunWithBinding(a,w.handle,v,E,b):Z=await u._OrtRun(a,B,_,g,z,v,E,b),Z!==0&&Ee("failed to call OrtRun().");let xe=[];for(let re=0;re<v;re++){let ve=u.HEAPU32[E/4+re];if(ve===A[re]){xe.push(n[re]);continue}let q=u.stackSave(),$e=u.stackAlloc(4*4),Ie=!1,Ae,fe=0;try{u._OrtGetTensorData(ve,$e,$e+4,$e+8,$e+12)!==0&&Ee(`Can\'t access output tensor data on index ${re}.`);let He=$e/4,Le=u.HEAPU32[He++];fe=u.HEAPU32[He++];let L=u.HEAPU32[He++],le=u.HEAPU32[He++],me=[];for(let Re=0;Re<le;Re++)me.push(u.HEAPU32[L/4+Re]);u._OrtFree(L);let Ne=me.reduce((Re,ze)=>Re*ze,1);Ae=or(Le);let je=w?.outputPreferredLocations[o[re]];if(Ae==="string"){if(je==="gpu-buffer")throw new Error("String tensor is not supported on GPU.");let Re=[],ze=fe/4;for(let Fe=0;Fe<Ne;Fe++){let nt=u.HEAPU32[ze++],Ke=Fe===Ne-1?void 0:u.HEAPU32[ze]-nt;Re.push(u.UTF8ToString(nt,Ke))}xe.push([Ae,me,Re,"cpu"])}else if(je==="gpu-buffer"&&Ne>0){let Re=u.jsepGetBuffer(fe),ze=ar(Le);if(ze===void 0||!Eo(Ae))throw new Error(`Unsupported data type: ${Ae}`);Ie=!0,xe.push([Ae,me,{gpuBuffer:Re,download:u.jsepCreateDownloader(Re,Ne*ze,Ae),dispose:()=>{u._OrtReleaseTensor(ve)}},"gpu-buffer"])}else{let Re=kr(Ae),ze=new Re(Ne);new Uint8Array(ze.buffer,ze.byteOffset,ze.byteLength).set(u.HEAPU8.subarray(fe,fe+ze.byteLength)),xe.push([Ae,me,ze,"cpu"])}}finally{u.stackRestore(q),Ae==="string"&&fe&&u._free(fe),Ie||u._OrtReleaseTensor(ve)}}return w&&u._OrtClearBoundOutputs(w.handle),xe}finally{u.stackRestore(R),I.forEach(V=>u._OrtReleaseTensor(V)),A.forEach(V=>u._OrtReleaseTensor(V)),C.forEach(V=>u._free(V)),b!==0&&u._OrtReleaseRunOptions(b),S.forEach(V=>u._free(V))}},bu=e=>{let t=Be(),r=cr.get(e);if(!r)throw new Error("invalid session id");let o=r[0],n=t._OrtEndProfiling(o);n===0&&Ee("Can\'t get an profile file name."),t._OrtFree(n)},wu=e=>{let t=[];for(let r of e){let o=r[2];!Array.isArray(o)&&"buffer"in o&&t.push(o.buffer)}return t};self.onmessage=e=>{switch(e.data.type){case"init-wasm":try{Ao(e.data.in).then(()=>postMessage({type:"init-wasm"}),t=>postMessage({type:"init-wasm",err:t}))}catch(t){postMessage({type:"init-wasm",err:t})}break;case"init-ort":try{mu(e.data.in).then(()=>postMessage({type:"init-ort"}),t=>postMessage({type:"init-ort",err:t}))}catch(t){postMessage({type:"init-ort",err:t})}break;case"create_allocate":try{let{model:t}=e.data.in,r=Fn(t);postMessage({type:"create_allocate",out:r})}catch(t){postMessage({type:"create_allocate",err:t})}break;case"create_finalize":try{let{modeldata:t,options:r}=e.data.in,o=jn(t,r);postMessage({type:"create_finalize",out:o})}catch(t){postMessage({type:"create_finalize",err:t})}break;case"create":try{let{model:t,options:r}=e.data.in,o=hu(t,r);postMessage({type:"create",out:o})}catch(t){postMessage({type:"create",err:t})}break;case"release":try{gu(e.data.in),postMessage({type:"release"})}catch(t){postMessage({type:"release",err:t})}break;case"run":try{let{sessionId:t,inputIndices:r,inputs:o,outputIndices:n,options:s}=e.data.in;yu(t,r,o,n,new Array(n.length).fill(null),s).then(u=>{u.some(d=>d[3]!=="cpu")?postMessage({type:"run",err:"Proxy does not support non-cpu tensor location."}):postMessage({type:"run",out:u},wu(u))},u=>{postMessage({type:"run",err:u})})}catch(t){postMessage({type:"run",err:t})}break;case"end-profiling":try{let t=e.data.in;bu(t),postMessage({type:"end-profiling"})}catch(t){postMessage({type:"end-profiling",err:t})}break;case"is-ort-env-initialized":try{let t=fu();postMessage({type:"is-ort-env-initialized",out:t})}catch(t){postMessage({type:"is-ort-env-initialized",err:t})}break;default:}};})();\n/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n'});var St,Xe,$n,Ca,_a,ga,ya,ba,wa,va,$a,Sa,xa,Ia,Tt,Np,vn,yl,bl,wl,vl,Aa,$l,Sl,xl,Il,Ea=F(()=>{"use strict";$t();hl();Yt();St=()=>!!Te.wasm.proxy&&typeof document<"u",$n=!1,Ca=!1,_a=!1,ba=[],wa=[],va=[],$a=[],Sa=[],xa=[],Ia=[],Tt=()=>{if($n||!Ca||_a||!Xe)throw new Error("worker not ready")},Np=e=>{switch(e.data.type){case"init-wasm":$n=!1,e.data.err?(_a=!0,ga[1](e.data.err)):(Ca=!0,ga[0]());break;case"init-ort":e.data.err?ya[1](e.data.err):ya[0]();break;case"create_allocate":e.data.err?ba.shift()[1](e.data.err):ba.shift()[0](e.data.out);break;case"create_finalize":e.data.err?wa.shift()[1](e.data.err):wa.shift()[0](e.data.out);break;case"create":e.data.err?va.shift()[1](e.data.err):va.shift()[0](e.data.out);break;case"release":e.data.err?$a.shift()[1](e.data.err):$a.shift()[0]();break;case"run":e.data.err?Sa.shift()[1](e.data.err):Sa.shift()[0](e.data.out);break;case"end-profiling":e.data.err?xa.shift()[1](e.data.err):xa.shift()[0]();break;case"is-ort-env-initialized":e.data.err?Ia.shift()[1](e.data.err):Ia.shift()[0](e.data.out);break;default:}},vn=typeof document<"u"?document?.currentScript?.src:void 0,yl=async()=>{if(St()){if(Ca)return;if($n)throw new Error("multiple calls to 'initWasm()' detected.");if(_a)throw new Error("previous call to 'initWasm()' failed.");return $n=!0,Te.wasm.wasmPaths===void 0&&vn&&vn.indexOf("blob:")!==0&&(Te.wasm.wasmPaths=vn.substr(0,+vn.lastIndexOf("/")+1)),new Promise((e,t)=>{Xe?.terminate();let r=URL.createObjectURL(new Blob([gl()],{type:"text/javascript"}));Xe=new Worker(r,{name:"ort-wasm-proxy-worker"}),Xe.onerror=n=>t(n),Xe.onmessage=Np,URL.revokeObjectURL(r),ga=[e,t];let a={type:"init-wasm",in:Te.wasm};Xe.postMessage(a)})}else return Do(Te.wasm)},bl=async e=>{if(St())return Tt(),new Promise((t,r)=>{ya=[t,r];let a={type:"init-ort",in:e};Xe.postMessage(a)});await ul(e)},wl=async e=>St()?(Tt(),new Promise((t,r)=>{ba.push([t,r]);let a={type:"create_allocate",in:{model:e}};Xe.postMessage(a,[e.buffer])})):ma(e),vl=async(e,t)=>St()?(Tt(),new Promise((r,a)=>{wa.push([r,a]);let n={type:"create_finalize",in:{modeldata:e,options:t}};Xe.postMessage(n)})):ha(e,t),Aa=async(e,t)=>{if(St()){if(t?.preferredOutputLocation)throw new Error('session option "preferredOutputLocation" is not supported for proxy.');return Tt(),new Promise((r,a)=>{va.push([r,a]);let n={type:"create",in:{model:e,options:t}};Xe.postMessage(n,[e.buffer])})}else return dl(e,t)},$l=async e=>{if(St())return Tt(),new Promise((t,r)=>{$a.push([t,r]);let a={type:"release",in:e};Xe.postMessage(a)});cl(e)},Sl=async(e,t,r,a,n,s)=>{if(St()){if(r.some(u=>u[3]!=="cpu"))throw new Error("input tensor on GPU is not supported for proxy.");if(n.some(u=>u))throw new Error("pre-allocated output tensor is not supported for proxy.");return Tt(),new Promise((u,l)=>{Sa.push([u,l]);let o=r,c={type:"run",in:{sessionId:e,inputIndices:t,inputs:o,outputIndices:a,options:s}};Xe.postMessage(c,ml(o))})}else return pl(e,t,r,a,n,s)},xl=async e=>{if(St())return Tt(),new Promise((t,r)=>{xa.push([t,r]);let a={type:"end-profiling",in:e};Xe.postMessage(a)});fl(e)},Il=async()=>St()?(Tt(),new Promise((e,t)=>{Ia.push([e,t]);let r={type:"is-ort-env-initialized"};Xe.postMessage(r)})):ll()});var Sn,Cl,Up,xn,_l=F(()=>{"use strict";$t();Ea();We();Cl=(e,t)=>{switch(e.location){case"cpu":return[e.type,e.dims,e.data,"cpu"];case"gpu-buffer":return[e.type,e.dims,{gpuBuffer:e.gpuBuffer},"gpu-buffer"];default:throw new Error(`invalid data location: ${e.location} for ${t()}`)}},Up=e=>{switch(e[3]){case"cpu":return new Le(e[0],e[2],e[1]);case"gpu-buffer":{let t=e[0];if(!Qr(t))throw new Error(`not supported data type: ${t} for deserializing GPU tensor`);let{gpuBuffer:r,download:a,dispose:n}=e[2];return Le.fromGpuBuffer(r,{dataType:t,dims:e[1],download:a,dispose:n})}default:throw new Error(`invalid data location: ${e[3]}`)}},xn=class{async createSessionAllocate(t){let r=await fetch(t);if(r.status!==200)throw new Error(`failed to load model: ${t}`);let a=await r.arrayBuffer();return wl(new Uint8Array(a))}async loadModel(t,r){if(await Il()||(Sn||(Sn=bl(Te)),await Sn,Sn=void 0),typeof t=="string")if(typeof process<"u"&&process.versions&&process.versions.node){let a=await(void 0)(t);[this.sessionId,this.inputNames,this.outputNames]=await Aa(a,r)}else{let a=await this.createSessionAllocate(t);[this.sessionId,this.inputNames,this.outputNames]=await vl(a,r)}else[this.sessionId,this.inputNames,this.outputNames]=await Aa(t,r)}async dispose(){return $l(this.sessionId)}async run(t,r,a){let n=[],s=[];Object.entries(t).forEach(h=>{let w=h[0],v=h[1],$=this.inputNames.indexOf(w);if($===-1)throw new Error(`invalid input '${w}'`);n.push(v),s.push($)});let u=[],l=[];Object.entries(r).forEach(h=>{let w=h[0],v=h[1],$=this.outputNames.indexOf(w);if($===-1)throw new Error(`invalid output '${w}'`);u.push(v),l.push($)});let o=n.map((h,w)=>Cl(h,()=>`input "${this.inputNames[s[w]]}"`)),c=u.map((h,w)=>h?Cl(h,()=>`output "${this.outputNames[l[w]]}"`):null),f=await Sl(this.sessionId,s,o,l,c,a),y={};for(let h=0;h<f.length;h++)y[this.outputNames[l[h]]]=u[h]??Up(f[h]);return y}startProfiling(){}endProfiling(){xl(this.sessionId)}}});var Hp,In,Al=F(()=>{"use strict";$t();Ea();_l();Hp=()=>{if((typeof Te.wasm.initTimeout!="number"||Te.wasm.initTimeout<0)&&(Te.wasm.initTimeout=0),typeof Te.wasm.simd!="boolean"&&(Te.wasm.simd=!0),typeof Te.wasm.proxy!="boolean"&&(Te.wasm.proxy=!1),typeof Te.wasm.numThreads!="number"||!Number.isInteger(Te.wasm.numThreads)||Te.wasm.numThreads<=0){let e=typeof navigator>"u"?(void 0)().length:navigator.hardwareConcurrency;Te.wasm.numThreads=Math.min(4,Math.ceil((e||1)/2))}},In=class{async init(){Hp(),await yl()}async createInferenceSessionHandler(t,r){let a=new xn;return await a.loadModel(t,r),Promise.resolve(a)}}});var El={};zt(El,{wasmBackend:()=>Lp});var Lp,Tl=F(()=>{"use strict";Al();Lp=new In});var Fp={};zt(Fp,{InferenceSession:()=>go,Tensor:()=>Le,TrainingSession:()=>vo,default:()=>Gp,env:()=>Te,registerBackend:()=>vt});$t();$t();$t();var So="1.17.0";var Gp=Bn;{let e=(Tl(),_t(El)).wasmBackend;typeof navigator<"u"&&navigator.gpu&&vt("webgpu",e,5),vt("cpu",e,10),vt("wasm",e,10),vt("xnnpack",e,9),vt("webnn",e,9)}Object.defineProperty(Te.versions,"web",{value:So,enumerable:!0});return _t(Fp);})();
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
//# sourceMappingURL=ort.webgpu.min.js.map
