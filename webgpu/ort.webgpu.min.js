/*!
 * ONNX Runtime Web v1.17.0
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
"use strict";var ort=(()=>{var Rn=Object.defineProperty;var Yl=Object.getOwnPropertyDescriptor;var Zl=Object.getOwnPropertyNames;var Ql=Object.prototype.hasOwnProperty;var j=(e,t)=>()=>(e&&(t=e(e=0)),t);var Yt=(e,t)=>()=>(t||e((t={exports:{}}).exports,t),t.exports),Wt=(e,t)=>{for(var r in t)Rn(e,r,{get:t[r],enumerable:!0})},Xl=(e,t,r,a)=>{if(t&&typeof t=="object"||typeof t=="function")for(let n of Zl(t))!Ql.call(e,n)&&n!==r&&Rn(e,n,{get:()=>t[n],enumerable:!(a=Yl(t,n))||a.enumerable});return e};var At=e=>Xl(Rn({},"__esModule",{value:!0}),e);var Hr,Vt,St,Lr,Gr=j(()=>{Hr=new Map,Vt=[],St=(e,t,r)=>{if(t&&typeof t.init=="function"&&typeof t.createInferenceSessionHandler=="function"){let a=Hr.get(e);if(a===void 0)Hr.set(e,{backend:t,priority:r});else{if(a.priority>r)return;if(a.priority===r&&a.backend!==t)throw new Error(`cannot register backend "${e}" using priority ${r}`)}if(r>=0){let n=Vt.indexOf(e);n!==-1&&Vt.splice(n,1);for(let i=0;i<Vt.length;i++)if(Hr.get(Vt[i]).priority<=r){Vt.splice(i,0,e);return}Vt.push(e)}return}throw new TypeError("not a valid backend")},Lr=async e=>{let t=e.length===0?Vt:e,r=[];for(let a of t){let n=Hr.get(a);if(n){if(n.initialized)return n.backend;if(n.aborted)continue;let i=!!n.initPromise;try{return i||(n.initPromise=n.backend.init()),await n.initPromise,n.initialized=!0,n.backend}catch(u){i||r.push({name:a,err:u}),n.aborted=!0}finally{delete n.initPromise}}}throw new Error(`no available backend found. ERR: ${r.map(a=>`[${a.name}] ${a.err}`).join(", ")}`)}});var Ya=j(()=>{Gr()});var Za,Qa=j(()=>{Za="1.17.0"});var Xa,Pn,Ja=j(()=>{Qa();Xa="warning",Pn={wasm:{},webgl:{},webgpu:{},versions:{common:Za},set logLevel(e){if(e!==void 0){if(typeof e!="string"||["verbose","info","warning","error","fatal"].indexOf(e)===-1)throw new Error(`Unsupported logging level: ${e}`);Xa=e}},get logLevel(){return Xa}};Object.defineProperty(Pn,"logLevel",{enumerable:!0})});var Ae,eo=j(()=>{Ja();Ae=Pn});var to,ro,no=j(()=>{to=(e,t)=>{let r=document.createElement("canvas");r.width=e.dims[3],r.height=e.dims[2];let a=r.getContext("2d");if(a!=null){let n,i;t?.tensorLayout!==void 0&&t.tensorLayout==="NHWC"?(n=e.dims[2],i=e.dims[3]):(n=e.dims[3],i=e.dims[2]);let u=t?.format!==void 0?t.format:"RGB",l=t?.norm,o,c;l===void 0||l.mean===void 0?o=[255,255,255,255]:typeof l.mean=="number"?o=[l.mean,l.mean,l.mean,l.mean]:(o=[l.mean[0],l.mean[1],l.mean[2],0],l.mean[3]!==void 0&&(o[3]=l.mean[3])),l===void 0||l.bias===void 0?c=[0,0,0,0]:typeof l.bias=="number"?c=[l.bias,l.bias,l.bias,l.bias]:(c=[l.bias[0],l.bias[1],l.bias[2],0],l.bias[3]!==void 0&&(c[3]=l.bias[3]));let f=i*n,y=0,m=f,w=f*2,b=-1;u==="RGBA"?(y=0,m=f,w=f*2,b=f*3):u==="RGB"?(y=0,m=f,w=f*2):u==="RBG"&&(y=0,w=f,m=f*2);for(let $=0;$<i;$++)for(let I=0;I<n;I++){let x=(e.data[y++]-c[0])*o[0],_=(e.data[m++]-c[1])*o[1],R=(e.data[w++]-c[2])*o[2],E=b===-1?255:(e.data[b++]-c[3])*o[3];a.fillStyle="rgba("+x+","+_+","+R+","+E+")",a.fillRect(I,$,1,1)}return r.toDataURL()}else throw new Error("Can not access image data")},ro=(e,t)=>{let r=document.createElement("canvas").getContext("2d"),a;if(r!=null){let n,i,u;t?.tensorLayout!==void 0&&t.tensorLayout==="NHWC"?(n=e.dims[2],i=e.dims[1],u=e.dims[3]):(n=e.dims[3],i=e.dims[2],u=e.dims[1]);let l=t!==void 0&&t.format!==void 0?t.format:"RGB",o=t?.norm,c,f;o===void 0||o.mean===void 0?c=[255,255,255,255]:typeof o.mean=="number"?c=[o.mean,o.mean,o.mean,o.mean]:(c=[o.mean[0],o.mean[1],o.mean[2],255],o.mean[3]!==void 0&&(c[3]=o.mean[3])),o===void 0||o.bias===void 0?f=[0,0,0,0]:typeof o.bias=="number"?f=[o.bias,o.bias,o.bias,o.bias]:(f=[o.bias[0],o.bias[1],o.bias[2],0],o.bias[3]!==void 0&&(f[3]=o.bias[3]));let y=i*n;if(t!==void 0&&(t.format!==void 0&&u===4&&t.format!=="RGBA"||u===3&&t.format!=="RGB"&&t.format!=="BGR"))throw new Error("Tensor format doesn't match input tensor dims");let m=4,w=0,b=1,$=2,I=3,x=0,_=y,R=y*2,E=-1;l==="RGBA"?(x=0,_=y,R=y*2,E=y*3):l==="RGB"?(x=0,_=y,R=y*2):l==="RBG"&&(x=0,R=y,_=y*2),a=r.createImageData(n,i);for(let D=0;D<i*n;w+=m,b+=m,$+=m,I+=m,D++)a.data[w]=(e.data[x++]-f[0])*c[0],a.data[b]=(e.data[_++]-f[1])*c[1],a.data[$]=(e.data[R++]-f[2])*c[2],a.data[I]=E===-1?255:(e.data[E++]-f[3])*c[3]}else throw new Error("Can not access image data");return a}});var Bn,ao,oo,io,so,uo=j(()=>{Fr();Bn=(e,t)=>{if(e===void 0)throw new Error("Image buffer must be defined");if(t.height===void 0||t.width===void 0)throw new Error("Image height and width must be defined");if(t.tensorLayout==="NHWC")throw new Error("NHWC Tensor layout is not supported yet");let{height:r,width:a}=t,n=t.norm??{mean:255,bias:0},i,u;typeof n.mean=="number"?i=[n.mean,n.mean,n.mean,n.mean]:i=[n.mean[0],n.mean[1],n.mean[2],n.mean[3]??255],typeof n.bias=="number"?u=[n.bias,n.bias,n.bias,n.bias]:u=[n.bias[0],n.bias[1],n.bias[2],n.bias[3]??0];let l=t.format!==void 0?t.format:"RGBA",o=t.tensorFormat!==void 0&&t.tensorFormat!==void 0?t.tensorFormat:"RGB",c=r*a,f=o==="RGBA"?new Float32Array(c*4):new Float32Array(c*3),y=4,m=0,w=1,b=2,$=3,I=0,x=c,_=c*2,R=-1;l==="RGB"&&(y=3,m=0,w=1,b=2,$=-1),o==="RGBA"?R=c*3:o==="RBG"?(I=0,_=c,x=c*2):o==="BGR"&&(_=0,x=c,I=c*2);for(let D=0;D<c;D++,m+=y,b+=y,w+=y,$+=y)f[I++]=(e[m]+u[0])/i[0],f[x++]=(e[w]+u[1])/i[1],f[_++]=(e[b]+u[2])/i[2],R!==-1&&$!==-1&&(f[R++]=(e[$]+u[3])/i[3]);return o==="RGBA"?new Ke("float32",f,[1,4,r,a]):new Ke("float32",f,[1,3,r,a])},ao=async(e,t)=>{let r=typeof HTMLImageElement<"u"&&e instanceof HTMLImageElement,a=typeof ImageData<"u"&&e instanceof ImageData,n=typeof ImageBitmap<"u"&&e instanceof ImageBitmap,i=typeof e=="string",u,l=t??{};if(r){let o=document.createElement("canvas");o.width=e.width,o.height=e.height;let c=o.getContext("2d");if(c!=null){let f=e.height,y=e.width;if(t!==void 0&&t.resizedHeight!==void 0&&t.resizedWidth!==void 0&&(f=t.resizedHeight,y=t.resizedWidth),t!==void 0){if(l=t,t.tensorFormat!==void 0)throw new Error("Image input config format must be RGBA for HTMLImageElement");l.tensorFormat="RGBA",l.height=f,l.width=y}else l.tensorFormat="RGBA",l.height=f,l.width=y;c.drawImage(e,0,0),u=c.getImageData(0,0,y,f).data}else throw new Error("Can not access image data")}else if(a){let o,c;if(t!==void 0&&t.resizedWidth!==void 0&&t.resizedHeight!==void 0?(o=t.resizedHeight,c=t.resizedWidth):(o=e.height,c=e.width),t!==void 0&&(l=t),l.format="RGBA",l.height=o,l.width=c,t!==void 0){let f=document.createElement("canvas");f.width=c,f.height=o;let y=f.getContext("2d");if(y!=null)y.putImageData(e,0,0),u=y.getImageData(0,0,c,o).data;else throw new Error("Can not access image data")}else u=e.data}else if(n){if(t===void 0)throw new Error("Please provide image config with format for Imagebitmap");let o=document.createElement("canvas");o.width=e.width,o.height=e.height;let c=o.getContext("2d");if(c!=null){let f=e.height,y=e.width;return c.drawImage(e,0,0,y,f),u=c.getImageData(0,0,y,f).data,l.height=f,l.width=y,Bn(u,l)}else throw new Error("Can not access image data")}else{if(i)return new Promise((o,c)=>{let f=document.createElement("canvas"),y=f.getContext("2d");if(!e||!y)return c();let m=new Image;m.crossOrigin="Anonymous",m.src=e,m.onload=()=>{f.width=m.width,f.height=m.height,y.drawImage(m,0,0,f.width,f.height);let w=y.getImageData(0,0,f.width,f.height);l.height=f.height,l.width=f.width,o(Bn(w.data,l))}});throw new Error("Input data provided is not supported - aborted tensor creation")}if(u!==void 0)return Bn(u,l);throw new Error("Input data provided is not supported - aborted tensor creation")},oo=(e,t)=>{let{width:r,height:a,download:n,dispose:i}=t,u=[1,a,r,4];return new Ke({location:"texture",type:"float32",texture:e,dims:u,download:n,dispose:i})},io=(e,t)=>{let{dataType:r,dims:a,download:n,dispose:i}=t;return new Ke({location:"gpu-buffer",type:r??"float32",gpuBuffer:e,dims:a,download:n,dispose:i})},so=(e,t,r)=>new Ke({location:"cpu-pinned",type:e,data:t,dims:r??[t.length]})});var hr,jr,lo,co,po=j(()=>{hr=new Map([["float32",Float32Array],["uint8",Uint8Array],["int8",Int8Array],["uint16",Uint16Array],["float16",Uint16Array],["int16",Int16Array],["int32",Int32Array],["bool",Uint8Array],["float64",Float64Array],["uint32",Uint32Array]]),jr=new Map([[Float32Array,"float32"],[Uint8Array,"uint8"],[Int8Array,"int8"],[Uint16Array,"uint16"],[Int16Array,"int16"],[Int32Array,"int32"],[Float64Array,"float64"],[Uint32Array,"uint32"]]),lo=!1,co=()=>{if(!lo){lo=!0;let e=typeof BigInt64Array<"u"&&typeof BigInt64Array.from=="function",t=typeof BigUint64Array<"u"&&typeof BigUint64Array.from=="function";e&&(hr.set("int64",BigInt64Array),jr.set(BigInt64Array,"int64")),t&&(hr.set("uint64",BigUint64Array),jr.set(BigUint64Array,"uint64"))}}});var fo,mo,ho=j(()=>{Fr();fo=e=>{let t=1;for(let r=0;r<e.length;r++){let a=e[r];if(typeof a!="number"||!Number.isSafeInteger(a))throw new TypeError(`dims[${r}] must be an integer, got: ${a}`);if(a<0)throw new RangeError(`dims[${r}] must be a non-negative integer, got: ${a}`);t*=a}return t},mo=(e,t)=>{switch(e.location){case"cpu":return new Ke(e.type,e.data,t);case"cpu-pinned":return new Ke({location:"cpu-pinned",data:e.data,type:e.type,dims:t});case"texture":return new Ke({location:"texture",texture:e.texture,type:e.type,dims:t});case"gpu-buffer":return new Ke({location:"gpu-buffer",gpuBuffer:e.gpuBuffer,type:e.type,dims:t});default:throw new Error(`tensorReshape: tensor location ${e.location} is not supported`)}}});var Ke,Fr=j(()=>{no();uo();po();ho();Ke=class{constructor(t,r,a){co();let n,i;if(typeof t=="object"&&"location"in t)switch(this.dataLocation=t.location,n=t.type,i=t.dims,t.location){case"cpu-pinned":{let l=hr.get(n);if(!l)throw new TypeError(`unsupported type "${n}" to create tensor from pinned buffer`);if(!(t.data instanceof l))throw new TypeError(`buffer should be of type ${l.name}`);this.cpuData=t.data;break}case"texture":{if(n!=="float32")throw new TypeError(`unsupported type "${n}" to create tensor from texture`);this.gpuTextureData=t.texture,this.downloader=t.download,this.disposer=t.dispose;break}case"gpu-buffer":{if(n!=="float32"&&n!=="float16"&&n!=="int32"&&n!=="int64"&&n!=="uint32"&&n!=="bool")throw new TypeError(`unsupported type "${n}" to create tensor from gpu buffer`);this.gpuBufferData=t.gpuBuffer,this.downloader=t.download,this.disposer=t.dispose;break}default:throw new Error(`Tensor constructor: unsupported location '${this.dataLocation}'`)}else{let l,o;if(typeof t=="string")if(n=t,o=a,t==="string"){if(!Array.isArray(r))throw new TypeError("A string tensor's data must be a string array.");l=r}else{let c=hr.get(t);if(c===void 0)throw new TypeError(`Unsupported tensor type: ${t}.`);if(Array.isArray(r)){if(t==="float16")throw new TypeError("Creating a float16 tensor from number array is not supported. Please use Uint16Array as data.");t==="uint64"||t==="int64"?l=c.from(r,BigInt):l=c.from(r)}else if(r instanceof c)l=r;else throw new TypeError(`A ${n} tensor's data must be type of ${c}`)}else if(o=r,Array.isArray(t)){if(t.length===0)throw new TypeError("Tensor type cannot be inferred from an empty array.");let c=typeof t[0];if(c==="string")n="string",l=t;else if(c==="boolean")n="bool",l=Uint8Array.from(t);else throw new TypeError(`Invalid element type of data array: ${c}.`)}else{let c=jr.get(t.constructor);if(c===void 0)throw new TypeError(`Unsupported type for tensor data: ${t.constructor}.`);n=c,l=t}if(o===void 0)o=[l.length];else if(!Array.isArray(o))throw new TypeError("A tensor's dims must be a number array");i=o,this.cpuData=l,this.dataLocation="cpu"}let u=fo(i);if(this.cpuData&&u!==this.cpuData.length)throw new Error(`Tensor's size(${u}) does not match data length(${this.cpuData.length}).`);this.type=n,this.dims=i,this.size=u}static async fromImage(t,r){return ao(t,r)}static fromTexture(t,r){return oo(t,r)}static fromGpuBuffer(t,r){return io(t,r)}static fromPinnedBuffer(t,r,a){return so(t,r,a)}toDataURL(t){return to(this,t)}toImageData(t){return ro(this,t)}get data(){if(this.ensureValid(),!this.cpuData)throw new Error("The data is not on CPU. Use `getData()` to download GPU data to CPU, or use `texture` or `gpuBuffer` property to access the GPU data directly.");return this.cpuData}get location(){return this.dataLocation}get texture(){if(this.ensureValid(),!this.gpuTextureData)throw new Error("The data is not stored as a WebGL texture.");return this.gpuTextureData}get gpuBuffer(){if(this.ensureValid(),!this.gpuBufferData)throw new Error("The data is not stored as a WebGPU buffer.");return this.gpuBufferData}async getData(t){switch(this.ensureValid(),this.dataLocation){case"cpu":case"cpu-pinned":return this.data;case"texture":case"gpu-buffer":{if(!this.downloader)throw new Error("The current tensor is not created with a specified data downloader.");if(this.isDownloading)throw new Error("The current tensor is being downloaded.");try{this.isDownloading=!0;let r=await this.downloader();return this.downloader=void 0,this.dataLocation="cpu",this.cpuData=r,t&&this.disposer&&(this.disposer(),this.disposer=void 0),r}finally{this.isDownloading=!1}}default:throw new Error(`cannot get data from location: ${this.dataLocation}`)}}dispose(){if(this.isDownloading)throw new Error("The current tensor is being downloaded.");this.disposer&&(this.disposer(),this.disposer=void 0),this.cpuData=void 0,this.gpuTextureData=void 0,this.gpuBufferData=void 0,this.downloader=void 0,this.isDownloading=void 0,this.dataLocation="none"}ensureValid(){if(this.dataLocation==="none")throw new Error("The tensor is disposed.")}reshape(t){if(this.ensureValid(),this.downloader||this.disposer)throw new Error("Cannot reshape a tensor that owns GPU resource.");return mo(this,t)}}});var Le,qr=j(()=>{Fr();Le=Ke});var Kr,go=j(()=>{Gr();qr();Kr=class e{constructor(t){this.handler=t}async run(t,r,a){let n={},i={};if(typeof t!="object"||t===null||t instanceof Le||Array.isArray(t))throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");let u=!0;if(typeof r=="object"){if(r===null)throw new TypeError("Unexpected argument[1]: cannot be null.");if(r instanceof Le)throw new TypeError("'fetches' cannot be a Tensor");if(Array.isArray(r)){if(r.length===0)throw new TypeError("'fetches' cannot be an empty array.");u=!1;for(let c of r){if(typeof c!="string")throw new TypeError("'fetches' must be a string array or an object.");if(this.outputNames.indexOf(c)===-1)throw new RangeError(`'fetches' contains invalid output name: ${c}.`);n[c]=null}if(typeof a=="object"&&a!==null)i=a;else if(typeof a<"u")throw new TypeError("'options' must be an object.")}else{let c=!1,f=Object.getOwnPropertyNames(r);for(let y of this.outputNames)if(f.indexOf(y)!==-1){let m=r[y];(m===null||m instanceof Le)&&(c=!0,u=!1,n[y]=m)}if(c){if(typeof a=="object"&&a!==null)i=a;else if(typeof a<"u")throw new TypeError("'options' must be an object.")}else i=r}}else if(typeof r<"u")throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");for(let c of this.inputNames)if(typeof t[c]>"u")throw new Error(`input '${c}' is missing in 'feeds'.`);if(u)for(let c of this.outputNames)n[c]=null;let l=await this.handler.run(t,n,i),o={};for(let c in l)if(Object.hasOwnProperty.call(l,c)){let f=l[c];f instanceof Le?o[c]=f:o[c]=new Le(f.type,f.data,f.dims)}return o}async release(){return this.handler.dispose()}static async create(t,r,a,n){let i,u={};if(typeof t=="string"){if(i=t,typeof r=="object"&&r!==null)u=r;else if(typeof r<"u")throw new TypeError("'options' must be an object.")}else if(t instanceof Uint8Array){if(i=t,typeof r=="object"&&r!==null)u=r;else if(typeof r<"u")throw new TypeError("'options' must be an object.")}else if(t instanceof ArrayBuffer||typeof SharedArrayBuffer<"u"&&t instanceof SharedArrayBuffer){let y=t,m=0,w=t.byteLength;if(typeof r=="object"&&r!==null)u=r;else if(typeof r=="number"){if(m=r,!Number.isSafeInteger(m))throw new RangeError("'byteOffset' must be an integer.");if(m<0||m>=y.byteLength)throw new RangeError(`'byteOffset' is out of range [0, ${y.byteLength}).`);if(w=t.byteLength-m,typeof a=="number"){if(w=a,!Number.isSafeInteger(w))throw new RangeError("'byteLength' must be an integer.");if(w<=0||m+w>y.byteLength)throw new RangeError(`'byteLength' is out of range (0, ${y.byteLength-m}].`);if(typeof n=="object"&&n!==null)u=n;else if(typeof n<"u")throw new TypeError("'options' must be an object.")}else if(typeof a<"u")throw new TypeError("'byteLength' must be a number.")}else if(typeof r<"u")throw new TypeError("'options' must be an object.");i=new Uint8Array(y,m,w)}else throw new TypeError("Unexpected argument[0]: must be 'path' or 'buffer'.");let o=(u.executionProviders||[]).map(y=>typeof y=="string"?y:y.name),f=await(await Lr(o)).createInferenceSessionHandler(i,u);return new e(f)}startProfiling(){this.handler.startProfiling()}endProfiling(){this.handler.endProfiling()}get inputNames(){return this.handler.inputNames}get outputNames(){return this.handler.outputNames}}});var yo,bo=j(()=>{go();yo=Kr});var wo=j(()=>{});var Jl,Yr,vo=j(()=>{Gr();qr();Jl="Training backend could not be resolved. Make sure you're using the correct configuration & WebAssembly files.",Yr=class e{constructor(t,r,a){this.handler=t,this.hasOptimizerModel=r,this.hasEvalModel=a}get trainingInputNames(){return this.handler.inputNames}get trainingOutputNames(){return this.handler.outputNames}get evalInputNames(){if(this.hasEvalModel)return this.handler.evalInputNames;throw new Error("This training session has no evalModel loaded.")}get evalOutputNames(){if(this.hasEvalModel)return this.handler.evalOutputNames;throw new Error("This training session has no evalModel loaded.")}static async create(t,r){let a=t.evalModel||"",n=t.optimizerModel||"",i=r||{},l=(i.executionProviders||[]).map(c=>typeof c=="string"?c:c.name),o=await Lr(l);if(o.createTrainingSessionHandler){let c=await o.createTrainingSessionHandler(t.checkpointState,t.trainModel,a,n,i);return new e(c,!!t.optimizerModel,!!t.evalModel)}else throw new Error(Jl)}typeNarrowingForRunStep(t,r,a,n,i){let u={},l={};if(typeof a!="object"||a===null||a instanceof Le||Array.isArray(a))throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");let o=!0;if(typeof n=="object"){if(n===null)throw new TypeError("Unexpected argument[1]: cannot be null.");if(n instanceof Le)throw new TypeError("'fetches' cannot be a Tensor");if(Array.isArray(n)){if(n.length===0)throw new TypeError("'fetches' cannot be an empty array.");o=!1;for(let c of n){if(typeof c!="string")throw new TypeError("'fetches' must be a string array or an object.");if(r.indexOf(c)===-1)throw new RangeError(`'fetches' contains invalid output name: ${c}.`);u[c]=null}if(typeof i=="object"&&i!==null)l=i;else if(typeof i<"u")throw new TypeError("'options' must be an object.")}else{let c=!1,f=Object.getOwnPropertyNames(n);for(let y of r)if(f.indexOf(y)!==-1){let m=n[y];(m===null||m instanceof Le)&&(c=!0,o=!1,u[y]=m)}if(c){if(typeof i=="object"&&i!==null)l=i;else if(typeof i<"u")throw new TypeError("'options' must be an object.")}else l=n}}else if(typeof n<"u")throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");for(let c of t)if(typeof a[c]>"u")throw new Error(`input '${c}' is missing in 'feeds'.`);if(o)for(let c of r)u[c]=null;return[u,l]}convertHandlerReturnTypeToMapOfTensors(t){let r={};for(let a in t)if(Object.hasOwnProperty.call(t,a)){let n=t[a];n instanceof Le?r[a]=n:r[a]=new Le(n.type,n.data,n.dims)}return r}async runTrainStep(t,r,a){let[n,i]=this.typeNarrowingForRunStep(this.trainingInputNames,this.trainingOutputNames,t,r,a),u=await this.handler.runTrainStep(t,n,i);return this.convertHandlerReturnTypeToMapOfTensors(u)}async runOptimizerStep(t){if(this.hasOptimizerModel)await this.handler.runOptimizerStep(t||{});else throw new Error("This TrainingSession has no OptimizerModel loaded.")}async runEvalStep(t,r,a){if(this.hasEvalModel){let[n,i]=this.typeNarrowingForRunStep(this.evalInputNames,this.evalOutputNames,t,r,a),u=await this.handler.runEvalStep(t,n,i);return this.convertHandlerReturnTypeToMapOfTensors(u)}else throw new Error("This TrainingSession has no EvalModel loaded.")}async getParametersSize(t=!0){return this.handler.getParametersSize(t)}async loadParametersBuffer(t,r=!0){let a=await this.getParametersSize(r);if(t.length!==4*a)throw new Error("Size of the buffer passed into loadParametersBuffer must match the number of parameters in the model. Please use getParametersSize method to check.");return this.handler.loadParametersBuffer(t,r)}async getContiguousParameters(t=!0){return this.handler.getContiguousParameters(t)}async release(){return this.handler.dispose()}}});var $o,So=j(()=>{vo();$o=Yr});var Mn={};Wt(Mn,{InferenceSession:()=>yo,Tensor:()=>Le,TrainingSession:()=>$o,env:()=>Ae,registerBackend:()=>St});var ct=j(()=>{Ya();eo();bo();qr();wo();So()});var zn={};Wt(zn,{readFile:()=>ed});var ed,Dn=j(()=>{ed=void 0});var Wn={};Wt(Wn,{join:()=>td});var td,Vn=j(()=>{td=void 0});var _o=Yt((Co,Nn)=>{"use strict";var Io=(()=>{var e=typeof document<"u"&&document.currentScript?document.currentScript.src:void 0;return typeof __filename<"u"&&(e=e||__filename),function(t={}){var r=t,a,n;r.ready=new Promise((d,h)=>{a=d,n=h}),r.jsepInit=(d,h,v,C,T,L,H,le)=>{r.Za=d,r.Oa=h,r.Qa=v,r.Ja=C,r.Pa=T,r.ra=L,r.Ra=H,r.Sa=le,h=(Z,ae,J)=>(...fe)=>{let we=tt,O=ae?.();fe=Z(...fe);let ie=ae?.();return O!==ie&&(Z=ie,J(O),ae=J=null),tt!=we?Rr():fe},v=Z=>async(...ae)=>{try{if(r.Da)throw Error("Session already started");let J=r.Da={Ta:ae[0],errors:[]},fe=await Z(...ae);if(r.Da!==J)throw Error("Session mismatch");d.flush();let we=J.errors;if(0<we.length){let O=await Promise.all(we);if(O=O.filter(ie=>ie),0<O.length)throw Error(O.join(`
`))}return fe}finally{r.Da=null}},r._OrtRun=v(h(r._OrtRun,()=>r._OrtRun,Z=>r._OrtRun=Z)),r._OrtRunWithBinding=v(h(r._OrtRunWithBinding,()=>r._OrtRunWithBinding,Z=>r._OrtRunWithBinding=Z)),r._OrtBindInput=h(r._OrtBindInput,()=>r._OrtBindInput,Z=>r._OrtBindInput=Z),r.jsepRegisterBuffer=(Z,ae,J,fe)=>d.registerBuffer(Z,ae,J,fe),r.jsepUnregisterBuffers=Z=>{d.unregisterBuffers(Z)},r.jsepGetBuffer=Z=>d.getBuffer(Z),r.jsepCreateDownloader=(Z,ae,J)=>d.createDownloader(Z,ae,J)};var i=Object.assign({},r),u="./this.program",l=(d,h)=>{throw h},o=typeof window=="object",c=typeof importScripts=="function",f=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string",y="",m,w,b;if(f){var $=(Dn(),At(zn)),I=(Vn(),At(Wn));y=c?I.dirname(y)+"/":__dirname+"/",m=(d,h)=>(d=d.startsWith("file://")?new URL(d):I.normalize(d),$.readFileSync(d,h?void 0:"utf8")),b=d=>(d=m(d,!0),d.buffer||(d=new Uint8Array(d)),d),w=(d,h,v,C=!0)=>{d=d.startsWith("file://")?new URL(d):I.normalize(d),$.readFile(d,C?void 0:"utf8",(T,L)=>{T?v(T):h(C?L.buffer:L)})},!r.thisProgram&&1<process.argv.length&&(u=process.argv[1].replace(/\\/g,"/")),process.argv.slice(2),l=(d,h)=>{throw process.exitCode=d,h},r.inspect=()=>"[Emscripten Module object]"}else(o||c)&&(c?y=self.location.href:typeof document<"u"&&document.currentScript&&(y=document.currentScript.src),e&&(y=e),y.indexOf("blob:")!==0?y=y.substr(0,y.replace(/[?#].*/,"").lastIndexOf("/")+1):y="",m=d=>{var h=new XMLHttpRequest;return h.open("GET",d,!1),h.send(null),h.responseText},c&&(b=d=>{var h=new XMLHttpRequest;return h.open("GET",d,!1),h.responseType="arraybuffer",h.send(null),new Uint8Array(h.response)}),w=(d,h,v)=>{var C=new XMLHttpRequest;C.open("GET",d,!0),C.responseType="arraybuffer",C.onload=()=>{C.status==200||C.status==0&&C.response?h(C.response):v()},C.onerror=v,C.send(null)});var x=r.print||console.log.bind(console),_=r.printErr||console.error.bind(console);Object.assign(r,i),i=null,r.thisProgram&&(u=r.thisProgram),r.quit&&(l=r.quit);var R;r.wasmBinary&&(R=r.wasmBinary);var E=r.noExitRuntime||!0;typeof WebAssembly!="object"&&je("no native wasm support detected");var D,P,W=!1,N,F,te,B,q,pe,X;function $e(){var d=D.buffer;r.HEAP8=F=new Int8Array(d),r.HEAP16=new Int16Array(d),r.HEAP32=B=new Int32Array(d),r.HEAPU8=te=new Uint8Array(d),r.HEAPU16=new Uint16Array(d),r.HEAPU32=q=new Uint32Array(d),r.HEAPF32=pe=new Float32Array(d),r.HEAPF64=X=new Float64Array(d)}var Y=[],Se=[],Ce=[];function _e(){var d=r.preRun.shift();Y.unshift(d)}var he=0,st=null,Ge=null;function je(d){throw r.onAbort&&r.onAbort(d),d="Aborted("+d+")",_(d),W=!0,N=1,d=new WebAssembly.RuntimeError(d+". Build with -sASSERTIONS for more info."),n(d),d}function G(d){return d.startsWith("data:application/octet-stream;base64,")}var de;if(de="ort-wasm-simd.wasm",!G(de)){var me=de;de=r.locateFile?r.locateFile(me,y):y+me}function Ue(d){if(d==de&&R)return new Uint8Array(R);if(b)return b(d);throw"both async and sync fetching of the wasm failed"}function Qe(d){if(!R&&(o||c)){if(typeof fetch=="function"&&!d.startsWith("file://"))return fetch(d,{credentials:"same-origin"}).then(h=>{if(!h.ok)throw"failed to load wasm binary file at '"+d+"'";return h.arrayBuffer()}).catch(()=>Ue(d));if(w)return new Promise((h,v)=>{w(d,C=>h(new Uint8Array(C)),v)})}return Promise.resolve().then(()=>Ue(d))}function Be(d,h,v){return Qe(d).then(C=>WebAssembly.instantiate(C,h)).then(C=>C).then(v,C=>{_("failed to asynchronously prepare wasm: "+C),je(C)})}function Ve(d,h){var v=de;return R||typeof WebAssembly.instantiateStreaming!="function"||G(v)||v.startsWith("file://")||f||typeof fetch!="function"?Be(v,d,h):fetch(v,{credentials:"same-origin"}).then(C=>WebAssembly.instantiateStreaming(C,d).then(h,function(T){return _("wasm streaming compile failed: "+T),_("falling back to ArrayBuffer instantiation"),Be(v,d,h)}))}var qe,ut={912368:d=>{r.ra("Abs",d,void 0)},912419:d=>{r.ra("Neg",d,void 0)},912470:d=>{r.ra("Floor",d,void 0)},912523:d=>{r.ra("Ceil",d,void 0)},912575:d=>{r.ra("Reciprocal",d,void 0)},912633:d=>{r.ra("Sqrt",d,void 0)},912685:d=>{r.ra("Exp",d,void 0)},912736:d=>{r.ra("Erf",d,void 0)},912787:d=>{r.ra("Sigmoid",d,void 0)},912842:d=>{r.ra("Log",d,void 0)},912893:d=>{r.ra("Sin",d,void 0)},912944:d=>{r.ra("Cos",d,void 0)},912995:d=>{r.ra("Tan",d,void 0)},913046:d=>{r.ra("Asin",d,void 0)},913098:d=>{r.ra("Acos",d,void 0)},913150:d=>{r.ra("Atan",d,void 0)},913202:d=>{r.ra("Sinh",d,void 0)},913254:d=>{r.ra("Cosh",d,void 0)},913306:d=>{r.ra("Asinh",d,void 0)},913359:d=>{r.ra("Acosh",d,void 0)},913412:d=>{r.ra("Atanh",d,void 0)},913465:d=>{r.ra("Tanh",d,void 0)},913517:d=>{r.ra("Not",d,void 0)},913568:(d,h,v)=>{r.ra("Clip",d,{min:h,max:v})},913637:d=>{r.ra("Clip",d,void 0)},913689:(d,h)=>{r.ra("Elu",d,{alpha:h})},913747:d=>{r.ra("Relu",d,void 0)},913799:(d,h)=>{r.ra("LeakyRelu",d,{alpha:h})},913863:(d,h)=>{r.ra("ThresholdedRelu",d,{alpha:h})},913933:(d,h)=>{r.ra("Cast",d,{to:h})},913991:d=>{r.ra("Add",d,void 0)},914042:d=>{r.ra("Sub",d,void 0)},914093:d=>{r.ra("Mul",d,void 0)},914144:d=>{r.ra("Div",d,void 0)},914195:d=>{r.ra("Pow",d,void 0)},914246:d=>{r.ra("Equal",d,void 0)},914299:d=>{r.ra("Greater",d,void 0)},914354:d=>{r.ra("GreaterOrEqual",d,void 0)},914416:d=>{r.ra("Less",d,void 0)},914468:d=>{r.ra("LessOrEqual",d,void 0)},914527:(d,h,v,C,T)=>{r.ra("ReduceMean",d,{keepDims:!!h,noopWithEmptyAxes:!!v,axes:C?Array.from(B.subarray(T>>>0,T+C>>>0)):[]})},914691:(d,h,v,C,T)=>{r.ra("ReduceMax",d,{keepDims:!!h,noopWithEmptyAxes:!!v,axes:C?Array.from(B.subarray(T>>>0,T+C>>>0)):[]})},914854:(d,h,v,C,T)=>{r.ra("ReduceMin",d,{keepDims:!!h,noopWithEmptyAxes:!!v,axes:C?Array.from(B.subarray(T>>>0,T+C>>>0)):[]})},915017:(d,h,v,C,T)=>{r.ra("ReduceProd",d,{keepDims:!!h,noopWithEmptyAxes:!!v,axes:C?Array.from(B.subarray(T>>>0,T+C>>>0)):[]})},915181:(d,h,v,C,T)=>{r.ra("ReduceSum",d,{keepDims:!!h,noopWithEmptyAxes:!!v,axes:C?Array.from(B.subarray(T>>>0,T+C>>>0)):[]})},915344:(d,h,v,C,T)=>{r.ra("ReduceL1",d,{keepDims:!!h,noopWithEmptyAxes:!!v,axes:C?Array.from(B.subarray(T>>>0,T+C>>>0)):[]})},915506:(d,h,v,C,T)=>{r.ra("ReduceL2",d,{keepDims:!!h,noopWithEmptyAxes:!!v,axes:C?Array.from(B.subarray(T>>>0,T+C>>>0)):[]})},915668:(d,h,v,C,T)=>{r.ra("ReduceLogSum",d,{keepDims:!!h,noopWithEmptyAxes:!!v,axes:C?Array.from(B.subarray(T>>>0,T+C>>>0)):[]})},915834:(d,h,v,C,T)=>{r.ra("ReduceSumSquare",d,{keepDims:!!h,noopWithEmptyAxes:!!v,axes:C?Array.from(B.subarray(T>>>0,T+C>>>0)):[]})},916003:(d,h,v,C,T)=>{r.ra("ReduceLogSumExp",d,{keepDims:!!h,noopWithEmptyAxes:!!v,axes:C?Array.from(B.subarray(T>>>0,T+C>>>0)):[]})},916172:d=>{r.ra("Where",d,void 0)},916225:(d,h,v)=>{r.ra("Transpose",d,{perm:h?Array.from(B.subarray(v>>>0,v+h>>>0)):[]})},916338:(d,h,v,C,T,L,H,le,Z,ae,J,fe,we,O,ie)=>{r.ra("ConvTranspose",d,{format:Z?"NHWC":"NCHW",autoPad:h,dilations:[v],group:C,kernel_shape:[T],pads:[L,H],strides:[le],wIsConst:()=>!!F[ae>>>0],outputPadding:J?Array.from(B.subarray(fe>>>0,fe+J>>>0)):[],outputShape:we?Array.from(B.subarray(O>>>0,O+we>>>0)):[],activation:De(ie)})},916752:(d,h,v,C,T,L,H,le,Z,ae,J,fe,we,O)=>{r.ra("ConvTranspose",d,{format:le?"NHWC":"NCHW",autoPad:h,dilations:Array.from(B.subarray(v>>>0,v+2>>>0)),group:C,kernelShape:Array.from(B.subarray(T>>>0,T+2>>>0)),pads:Array.from(B.subarray(L>>>0,L+4>>>0)),strides:Array.from(B.subarray(H>>>0,H+2>>>0)),wIsConst:()=>!!F[Z>>>0],outputPadding:0<ae?Array.from(B.subarray(J>>>0,J+ae>>>0)):[],outputShape:0<fe?Array.from(B.subarray(we>>>0,we+fe>>>0)):[],activation:De(O)})},917309:(d,h,v,C,T,L,H,le,Z,ae,J,fe,we,O,ie)=>{r.ra("ConvTranspose",d,{format:Z?"NHWC":"NCHW",autoPad:h,dilations:[v],group:C,kernel_shape:[T],pads:[L,H],strides:[le],wIsConst:()=>!!F[ae>>>0],outputPadding:J?Array.from(B.subarray(fe>>>0,fe+J>>>0)):[],outputShape:we?Array.from(B.subarray(O>>>0,O+we>>>0)):[],activation:De(ie)})},917723:(d,h,v,C,T,L,H,le,Z,ae,J,fe,we,O)=>{r.ra("ConvTranspose",d,{format:le?"NHWC":"NCHW",autoPad:h,dilations:Array.from(B.subarray(v>>>0,v+2>>>0)),group:C,kernelShape:Array.from(B.subarray(T>>>0,T+2>>>0)),pads:Array.from(B.subarray(L>>>0,L+4>>>0)),strides:Array.from(B.subarray(H>>>0,H+2>>>0)),wIsConst:()=>!!F[Z>>>0],outputPadding:0<ae?Array.from(B.subarray(J>>>0,J+ae>>>0)):[],outputShape:0<fe?Array.from(B.subarray(we>>>0,we+fe>>>0)):[],activation:De(O)})},918280:(d,h)=>{r.ra("GlobalAveragePool",d,{format:h?"NHWC":"NCHW"})},918371:(d,h,v,C,T,L,H,le,Z,ae,J,fe,we,O,ie,ge)=>{r.ra("AveragePool",d,{format:ge?"NHWC":"NCHW",auto_pad:h,ceil_mode:v,count_include_pad:C,storage_order:T,dilations:[L,H],kernel_shape:[le,Z],pads:[ae,J,fe,we],strides:[O,ie]})},918655:(d,h)=>{r.ra("GlobalAveragePool",d,{format:h?"NHWC":"NCHW"})},918746:(d,h,v,C,T,L,H,le,Z,ae,J,fe,we,O,ie,ge)=>{r.ra("AveragePool",d,{format:ge?"NHWC":"NCHW",auto_pad:h,ceil_mode:v,count_include_pad:C,storage_order:T,dilations:[L,H],kernel_shape:[le,Z],pads:[ae,J,fe,we],strides:[O,ie]})},919030:(d,h)=>{r.ra("GlobalMaxPool",d,{format:h?"NHWC":"NCHW"})},919117:(d,h,v,C,T,L,H,le,Z,ae,J,fe,we,O,ie,ge)=>{r.ra("MaxPool",d,{format:ge?"NHWC":"NCHW",auto_pad:h,ceil_mode:v,count_include_pad:C,storage_order:T,dilations:[L,H],kernel_shape:[le,Z],pads:[ae,J,fe,we],strides:[O,ie]})},919397:(d,h)=>{r.ra("GlobalMaxPool",d,{format:h?"NHWC":"NCHW"})},919484:(d,h,v,C,T,L,H,le,Z,ae,J,fe,we,O,ie,ge)=>{r.ra("MaxPool",d,{format:ge?"NHWC":"NCHW",auto_pad:h,ceil_mode:v,count_include_pad:C,storage_order:T,dilations:[L,H],kernel_shape:[le,Z],pads:[ae,J,fe,we],strides:[O,ie]})},919764:(d,h,v,C,T)=>{r.ra("Gemm",d,{alpha:h,beta:v,transA:C,transB:T})},919868:d=>{r.ra("MatMul",d,void 0)},919922:(d,h,v,C)=>{r.ra("ArgMax",d,{keepDims:!!h,selectLastIndex:!!v,axis:C})},920030:(d,h,v,C)=>{r.ra("ArgMin",d,{keepDims:!!h,selectLastIndex:!!v,axis:C})},920138:(d,h)=>{r.ra("Softmax",d,{axis:h})},920201:(d,h)=>{r.ra("Concat",d,{axis:h})},920261:(d,h,v,C,T)=>{r.ra("Split",d,{axis:h,numOutputs:v,splitSizes:C?Array.from(B.subarray(T>>>0,T+C>>>0)):[]})},920406:d=>{r.ra("Expand",d,void 0)},920460:(d,h)=>{r.ra("Gather",d,{axis:Number(h)})},920531:(d,h)=>{r.ra("GatherElements",d,{axis:Number(h)})},920610:(d,h,v,C,T,L,H,le,Z,ae,J)=>{r.ra("Resize",d,{antialias:h,axes:v?Array.from(B.subarray(C>>>0,C+v>>>0)):[],coordinateTransformMode:De(T),cubicCoeffA:L,excludeOutside:H,extrapolationValue:le,keepAspectRatioPolicy:De(Z),mode:De(ae),nearestMode:De(J)})},920961:(d,h,v,C,T,L,H)=>{r.ra("Slice",d,{starts:h?Array.from(B.subarray(v>>>0,v+h>>>0)):[],ends:C?Array.from(B.subarray(T>>>0,T+C>>>0)):[],axes:L?Array.from(B.subarray(H>>>0,H+L>>>0)):[]})},921192:d=>{r.ra("Tile",d,void 0)},921244:(d,h,v)=>{r.ra("LayerNormalization",d,{axis:Number(h),epsilon:Number(v)})},921351:(d,h,v)=>{r.ra("InstanceNormalization",d,{epsilon:h,format:v?"NHWC":"NCHW"})},921465:(d,h,v)=>{r.ra("InstanceNormalization",d,{epsilon:h,format:v?"NHWC":"NCHW"})},921579:d=>{r.ra("Range",d,void 0)},921632:(d,h)=>{r.ra("Einsum",d,{equation:De(h)})},921713:(d,h,v,C,T)=>{r.ra("Pad",d,{mode:h,value:v,pads:C?Array.from(B.subarray(T>>>0,T+C>>>0)):[]})},921845:(d,h,v,C,T,L)=>{r.ra("BatchNormalization",d,{epsilon:h,momentum:v,spatial:!!T,trainingMode:!!C,format:L?"NHWC":"NCHW"})},922014:(d,h,v,C,T,L)=>{r.ra("BatchNormalization",d,{epsilon:h,momentum:v,spatial:!!T,trainingMode:!!C,format:L?"NHWC":"NCHW"})},922183:(d,h,v)=>{r.ra("CumSum",d,{exclusive:Number(h),reverse:Number(v)})},922280:(d,h,v,C,T,L,H,le,Z)=>{r.ra("Attention",d,{numHeads:h,isUnidirectional:v,maskFilterValue:C,scale:T,doRotary:L,qkvHiddenSizes:H?Array.from(B.subarray(Number(le)>>>0,Number(le)+H>>>0)):[],pastPresentShareBuffer:!!Z})},922552:d=>{r.ra("Gelu",d,void 0)},922604:(d,h,v,C,T,L)=>{r.ra("MultiHeadAttention",d,{numHeads:h,isUnidirectional:v,maskFilterValue:C,scale:T,doRotary:L})},922763:d=>{r.ra("BiasAdd",d,void 0)},922818:d=>{r.ra("BiasSplitGelu",d,void 0)},922879:(d,h)=>{r.ra("SkipLayerNormalization",d,{epsilon:h})},922960:(d,h,v,C,T,L,H,le,Z,ae,J,fe,we)=>{r.ra("Conv",d,{format:Z?"NHWC":"NCHW",auto_pad:h,dilations:[v],group:C,kernel_shape:[T],pads:L?Array.from(B.subarray(H>>>0,H+L>>>0)):[],strides:[le],w_is_const:()=>!!F[ae>>>0],activation:De(J),activation_params:fe?Array.from(pe.subarray(we>>>0,we+fe>>>0)):[]})},923341:(d,h,v,C,T,L,H,le,Z,ae,J,fe,we,O,ie,ge)=>{r.ra("Conv",d,{format:fe?"NHWC":"NCHW",auto_pad:h,dilations:[v,C],group:T,kernel_shape:[L,H],pads:le?Array.from(B.subarray(Z>>>0,Z+le>>>0)):[],strides:[ae,J],w_is_const:()=>!!F[we>>>0],activation:De(O),activation_params:ie?Array.from(pe.subarray(ge>>>0,ge+ie>>>0)):[]})},923743:d=>{r.Ra(d)},923777:(d,h)=>r.Sa(d,h,r.Da.Ta,r.Da.errors),923889:d=>r.Oa(d),923922:d=>r.Qa(d),923954:(d,h,v)=>{r.Ja(d,h,v,!0)},923993:(d,h,v)=>{r.Ja(d,h,v)}};function et(d){this.name="ExitStatus",this.message=`Program terminated with exit(${d})`,this.status=d}var kt=d=>{for(;0<d.length;)d.shift()(r)};function Rt(d){this.Ha=d-24,this.Ma=function(h){q[this.Ha+4>>2>>>0]=h},this.La=function(h){q[this.Ha+8>>2>>>0]=h},this.Ya=function(h,v){this.Ka(),this.Ma(h),this.La(v)},this.Ka=function(){q[this.Ha+16>>2>>>0]=0}}var Xt=0,Cr=0,rt=typeof TextDecoder<"u"?new TextDecoder("utf8"):void 0,Jt=(d,h,v)=>{h>>>=0;var C=h+v;for(v=h;d[v]&&!(v>=C);)++v;if(16<v-h&&d.buffer&&rt)return rt.decode(d.subarray(h,v));for(C="";h<v;){var T=d[h++];if(T&128){var L=d[h++]&63;if((T&224)==192)C+=String.fromCharCode((T&31)<<6|L);else{var H=d[h++]&63;T=(T&240)==224?(T&15)<<12|L<<6|H:(T&7)<<18|L<<12|H<<6|d[h++]&63,65536>T?C+=String.fromCharCode(T):(T-=65536,C+=String.fromCharCode(55296|T>>10,56320|T&1023))}}else C+=String.fromCharCode(T)}return C},De=(d,h)=>(d>>>=0)?Jt(te,d,h):"",Ht=d=>{for(var h=0,v=0;v<d.length;++v){var C=d.charCodeAt(v);127>=C?h++:2047>=C?h+=2:55296<=C&&57343>=C?(h+=4,++v):h+=3}return h},er=(d,h,v,C)=>{if(v>>>=0,!(0<C))return 0;var T=v;C=v+C-1;for(var L=0;L<d.length;++L){var H=d.charCodeAt(L);if(55296<=H&&57343>=H){var le=d.charCodeAt(++L);H=65536+((H&1023)<<10)|le&1023}if(127>=H){if(v>=C)break;h[v++>>>0]=H}else{if(2047>=H){if(v+1>=C)break;h[v++>>>0]=192|H>>6}else{if(65535>=H){if(v+2>=C)break;h[v++>>>0]=224|H>>12}else{if(v+3>=C)break;h[v++>>>0]=240|H>>18,h[v++>>>0]=128|H>>12&63}h[v++>>>0]=128|H>>6&63}h[v++>>>0]=128|H&63}}return h[v>>>0]=0,v-T},bt=d=>d%4===0&&(d%100!==0||d%400===0),_r=[0,31,60,91,121,152,182,213,244,274,305,335],wt=[0,31,59,90,120,151,181,212,243,273,304,334],Lt=d=>{var h=Ht(d)+1,v=qt(h);return v&&er(d,te,v,h),v},It=[],Gt=(d,h)=>{It.length=0;var v;for(h>>=2;v=te[d++>>>0];)h+=v!=105&h,It.push(v==105?B[h>>>0]:X[h++>>>1]),++h;return It},Ft={},tr=()=>{if(!jt){var d={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:(typeof navigator=="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:u||"./this.program"},h;for(h in Ft)Ft[h]===void 0?delete d[h]:d[h]=Ft[h];var v=[];for(h in d)v.push(`${h}=${d[h]}`);jt=v}return jt},jt,Ar=[null,[],[]],He=[31,29,31,30,31,30,31,31,30,31,30,31],rr=[31,28,31,30,31,30,31,31,30,31,30,31];function nr(d){var h=Array(Ht(d)+1);return er(d,h,0,h.length),h}function ue(d,h,v,C){function T(O,ie,ge){for(O=typeof O=="number"?O.toString():O||"";O.length<ie;)O=ge[0]+O;return O}function L(O,ie){return T(O,ie,"0")}function H(O,ie){function ge(mr){return 0>mr?-1:0<mr?1:0}var $t;return($t=ge(O.getFullYear()-ie.getFullYear()))===0&&($t=ge(O.getMonth()-ie.getMonth()))===0&&($t=ge(O.getDate()-ie.getDate())),$t}function le(O){switch(O.getDay()){case 0:return new Date(O.getFullYear()-1,11,29);case 1:return O;case 2:return new Date(O.getFullYear(),0,3);case 3:return new Date(O.getFullYear(),0,2);case 4:return new Date(O.getFullYear(),0,1);case 5:return new Date(O.getFullYear()-1,11,31);case 6:return new Date(O.getFullYear()-1,11,30)}}function Z(O){var ie=O.Ba;for(O=new Date(new Date(O.Ca+1900,0,1).getTime());0<ie;){var ge=O.getMonth(),$t=(bt(O.getFullYear())?He:rr)[ge];if(ie>$t-O.getDate())ie-=$t-O.getDate()+1,O.setDate(1),11>ge?O.setMonth(ge+1):(O.setMonth(0),O.setFullYear(O.getFullYear()+1));else{O.setDate(O.getDate()+ie);break}}return ge=new Date(O.getFullYear()+1,0,4),ie=le(new Date(O.getFullYear(),0,4)),ge=le(ge),0>=H(ie,O)?0>=H(ge,O)?O.getFullYear()+1:O.getFullYear():O.getFullYear()-1}d>>>=0,h>>>=0,v>>>=0,C>>>=0;var ae=B[C+40>>2>>>0];C={Wa:B[C>>2>>>0],Va:B[C+4>>2>>>0],Ea:B[C+8>>2>>>0],Ia:B[C+12>>2>>>0],Fa:B[C+16>>2>>>0],Ca:B[C+20>>2>>>0],wa:B[C+24>>2>>>0],Ba:B[C+28>>2>>>0],$a:B[C+32>>2>>>0],Ua:B[C+36>>2>>>0],Xa:ae?De(ae):""},v=De(v),ae={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var J in ae)v=v.replace(new RegExp(J,"g"),ae[J]);var fe="Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),we="January February March April May June July August September October November December".split(" ");ae={"%a":O=>fe[O.wa].substring(0,3),"%A":O=>fe[O.wa],"%b":O=>we[O.Fa].substring(0,3),"%B":O=>we[O.Fa],"%C":O=>L((O.Ca+1900)/100|0,2),"%d":O=>L(O.Ia,2),"%e":O=>T(O.Ia,2," "),"%g":O=>Z(O).toString().substring(2),"%G":O=>Z(O),"%H":O=>L(O.Ea,2),"%I":O=>(O=O.Ea,O==0?O=12:12<O&&(O-=12),L(O,2)),"%j":O=>{for(var ie=0,ge=0;ge<=O.Fa-1;ie+=(bt(O.Ca+1900)?He:rr)[ge++]);return L(O.Ia+ie,3)},"%m":O=>L(O.Fa+1,2),"%M":O=>L(O.Va,2),"%n":()=>`
`,"%p":O=>0<=O.Ea&&12>O.Ea?"AM":"PM","%S":O=>L(O.Wa,2),"%t":()=>"	","%u":O=>O.wa||7,"%U":O=>L(Math.floor((O.Ba+7-O.wa)/7),2),"%V":O=>{var ie=Math.floor((O.Ba+7-(O.wa+6)%7)/7);if(2>=(O.wa+371-O.Ba-2)%7&&ie++,ie)ie==53&&(ge=(O.wa+371-O.Ba)%7,ge==4||ge==3&&bt(O.Ca)||(ie=1));else{ie=52;var ge=(O.wa+7-O.Ba-1)%7;(ge==4||ge==5&&bt(O.Ca%400-1))&&ie++}return L(ie,2)},"%w":O=>O.wa,"%W":O=>L(Math.floor((O.Ba+7-(O.wa+6)%7)/7),2),"%y":O=>(O.Ca+1900).toString().substring(2),"%Y":O=>O.Ca+1900,"%z":O=>{O=O.Ua;var ie=0<=O;return O=Math.abs(O)/60,(ie?"+":"-")+("0000"+(O/60*100+O%60)).slice(-4)},"%Z":O=>O.Xa,"%%":()=>"%"},v=v.replace(/%%/g,"\0\0");for(J in ae)v.includes(J)&&(v=v.replace(new RegExp(J,"g"),ae[J](C)));return v=v.replace(/\0\0/g,"%"),J=nr(v),J.length>h?0:(F.set(J,d>>>0),J.length-1)}function vt(d){try{d()}catch(h){je(h)}}function Er(d){var h={},v;for(v in d)(function(C){var T=d[C];h[C]=typeof T=="function"?function(){Pt.push(C);try{return T.apply(null,arguments)}finally{W||(Pt.pop()===C||je(),tt&&lt===1&&Pt.length===0&&(lt=0,vt(pr),typeof Fibers<"u"&&Fibers.ab()))}}:T})(v);return h}var lt=0,tt=null,Tr=0,Pt=[],ar={},or={},Or=0,Bt=null,kr=[];function Rr(){return new Promise((d,h)=>{Bt={resolve:d,reject:h}})}function Pr(){var d=qt(65548),h=d+12;q[d>>2>>>0]=h,q[d+4>>2>>>0]=h+65536,h=Pt[0];var v=ar[h];return v===void 0&&(v=Or++,ar[h]=v,or[v]=h),B[d+8>>2>>>0]=v,d}function Br(d){if(!W){if(lt===0){var h=!1,v=!1;d((C=0)=>{if(!W&&(Tr=C,h=!0,v)){lt=2,vt(()=>Kt(tt)),typeof Browser<"u"&&Browser.Ga.Na&&Browser.Ga.resume(),C=!1;try{var T=(0,P[or[B[tt+8>>2>>>0]]])()}catch(le){T=le,C=!0}var L=!1;if(!tt){var H=Bt;H&&(Bt=null,(C?H.reject:H.resolve)(T),L=!0)}if(C&&!L)throw T}}),v=!0,h||(lt=1,tt=Pr(),typeof Browser<"u"&&Browser.Ga.Na&&Browser.Ga.pause(),vt(()=>cr(tt)))}else lt===2?(lt=0,vt(Mt),ir(tt),tt=null,kr.forEach(C=>{if(!W)try{if(C(),!E)try{N=N=C=N,E||(r.onExit&&r.onExit(C),W=!0),l(C,new et(C))}catch(T){T instanceof et||T=="unwind"||l(1,T)}}catch(T){T instanceof et||T=="unwind"||l(1,T)}})):je(`invalid state: ${lt}`);return Tr}}function Mr(d){return Br(h=>{d().then(h)})}var zr={n:function(d,h,v){return Mr(async()=>{await r.Pa(d,h,v)})},a:function(d,h,v){throw d>>>=0,new Rt(d).Ya(h>>>0,v>>>0),Xt=d,Cr++,Xt},g:function(){return 0},J:function(){},z:function(){},B:function(){},L:function(){return 0},H:function(){},C:function(){},G:function(){},l:function(){},A:function(){},x:function(){},I:function(){},y:function(){},m:()=>!0,q:function(d,h,v){d=h+2097152>>>0<4194305-!!d?(d>>>0)+4294967296*h:NaN,v>>>=0,d=new Date(1e3*d),B[v>>2>>>0]=d.getUTCSeconds(),B[v+4>>2>>>0]=d.getUTCMinutes(),B[v+8>>2>>>0]=d.getUTCHours(),B[v+12>>2>>>0]=d.getUTCDate(),B[v+16>>2>>>0]=d.getUTCMonth(),B[v+20>>2>>>0]=d.getUTCFullYear()-1900,B[v+24>>2>>>0]=d.getUTCDay(),B[v+28>>2>>>0]=(d.getTime()-Date.UTC(d.getUTCFullYear(),0,1,0,0,0,0))/864e5|0},r:function(d,h,v){d=h+2097152>>>0<4194305-!!d?(d>>>0)+4294967296*h:NaN,v>>>=0,d=new Date(1e3*d),B[v>>2>>>0]=d.getSeconds(),B[v+4>>2>>>0]=d.getMinutes(),B[v+8>>2>>>0]=d.getHours(),B[v+12>>2>>>0]=d.getDate(),B[v+16>>2>>>0]=d.getMonth(),B[v+20>>2>>>0]=d.getFullYear()-1900,B[v+24>>2>>>0]=d.getDay(),B[v+28>>2>>>0]=(bt(d.getFullYear())?_r:wt)[d.getMonth()]+d.getDate()-1|0,B[v+36>>2>>>0]=-(60*d.getTimezoneOffset()),h=new Date(d.getFullYear(),6,1).getTimezoneOffset();var C=new Date(d.getFullYear(),0,1).getTimezoneOffset();B[v+32>>2>>>0]=(h!=C&&d.getTimezoneOffset()==Math.min(C,h))|0},s:function(d){d>>>=0;var h=new Date(B[d+20>>2>>>0]+1900,B[d+16>>2>>>0],B[d+12>>2>>>0],B[d+8>>2>>>0],B[d+4>>2>>>0],B[d>>2>>>0],0),v=B[d+32>>2>>>0],C=h.getTimezoneOffset(),T=new Date(h.getFullYear(),6,1).getTimezoneOffset(),L=new Date(h.getFullYear(),0,1).getTimezoneOffset(),H=Math.min(L,T);return 0>v?B[d+32>>2>>>0]=+(T!=L&&H==C):0<v!=(H==C)&&(T=Math.max(L,T),h.setTime(h.getTime()+6e4*((0<v?H:T)-C))),B[d+24>>2>>>0]=h.getDay(),B[d+28>>2>>>0]=(bt(h.getFullYear())?_r:wt)[h.getMonth()]+h.getDate()-1|0,B[d>>2>>>0]=h.getSeconds(),B[d+4>>2>>>0]=h.getMinutes(),B[d+8>>2>>>0]=h.getHours(),B[d+12>>2>>>0]=h.getDate(),B[d+16>>2>>>0]=h.getMonth(),B[d+20>>2>>>0]=h.getYear(),d=h.getTime()/1e3,sr((qe=d,1<=+Math.abs(qe)?0<qe?+Math.floor(qe/4294967296)>>>0:~~+Math.ceil((qe-+(~~qe>>>0))/4294967296)>>>0:0)),d>>>0},o:function(){return-52},p:function(){},v:function(d,h,v){function C(Z){return(Z=Z.toTimeString().match(/\(([A-Za-z ]+)\)$/))?Z[1]:"GMT"}v>>>=0;var T=new Date().getFullYear(),L=new Date(T,0,1),H=new Date(T,6,1);T=L.getTimezoneOffset();var le=H.getTimezoneOffset();q[d>>>0>>2>>>0]=60*Math.max(T,le),B[h>>>0>>2>>>0]=+(T!=le),d=C(L),h=C(H),d=Lt(d),h=Lt(h),le<T?(q[v>>2>>>0]=d,q[v+4>>2>>>0]=h):(q[v>>2>>>0]=h,q[v+4>>2>>>0]=d)},e:()=>{je("")},b:function(d,h,v){return d>>>=0,h=Gt(h>>>0,v>>>0),ut[d].apply(null,h)},i:function(d,h,v){return d>>>=0,h=Gt(h>>>0,v>>>0),ut[d].apply(null,h)},h:function(){return Date.now()},w:function(){return 4294901760},c:()=>performance.now(),K:function(d,h,v){return h>>>=0,te.copyWithin(d>>>0>>>0,h>>>0,h+(v>>>0)>>>0)},u:function(d){d>>>=0;var h=te.length;if(4294901760<d)return!1;for(var v=1;4>=v;v*=2){var C=h*(1+.2/v);C=Math.min(C,d+100663296);var T=Math;C=Math.max(d,C);e:{T=T.min.call(T,4294901760,C+(65536-C%65536)%65536)-D.buffer.byteLength+65535>>>16;try{D.grow(T),$e();var L=1;break e}catch{}L=void 0}if(L)return!0}return!1},D:function(d,h){d>>>=0,h>>>=0;var v=0;return tr().forEach(function(C,T){var L=h+v;for(T=q[d+4*T>>2>>>0]=L,L=0;L<C.length;++L)F[T++>>0>>>0]=C.charCodeAt(L);F[T>>0>>>0]=0,v+=C.length+1}),0},E:function(d,h){d>>>=0,h>>>=0;var v=tr();q[d>>2>>>0]=v.length;var C=0;return v.forEach(function(T){C+=T.length+1}),q[h>>2>>>0]=C,0},f:()=>52,k:function(){return 52},t:function(){return 70},j:function(d,h,v,C){h>>>=0,v>>>=0,C>>>=0;for(var T=0,L=0;L<v;L++){var H=q[h>>2>>>0],le=q[h+4>>2>>>0];h+=8;for(var Z=0;Z<le;Z++){var ae=te[H+Z>>>0],J=Ar[d];ae===0||ae===10?((d===1?x:_)(Jt(J,0)),J.length=0):J.push(ae)}T+=le}return q[C>>2>>>0]=T,0},F:ue,d:function(d,h,v,C){return ue(d>>>0,h>>>0,v>>>0,C>>>0)}};(function(){function d(v){if(v=v.exports,v=Er(v),P=v=Ct(v),D=P.M,$e(),Se.unshift(P.N),he--,r.monitorRunDependencies&&r.monitorRunDependencies(he),he==0&&(st!==null&&(clearInterval(st),st=null),Ge)){var C=Ge;Ge=null,C()}return v}var h={a:zr};if(he++,r.monitorRunDependencies&&r.monitorRunDependencies(he),r.instantiateWasm)try{return r.instantiateWasm(h,d)}catch(v){_("Module.instantiateWasm callback failed with error: "+v),n(v)}return Ve(h,function(v){d(v.instance)}).catch(n),{}})(),r._OrtInit=(d,h)=>(r._OrtInit=P.O)(d,h),r._OrtGetLastError=(d,h)=>(r._OrtGetLastError=P.P)(d,h),r._OrtCreateSessionOptions=(d,h,v,C,T,L,H,le,Z,ae)=>(r._OrtCreateSessionOptions=P.Q)(d,h,v,C,T,L,H,le,Z,ae),r._OrtAppendExecutionProvider=(d,h)=>(r._OrtAppendExecutionProvider=P.R)(d,h),r._OrtAddFreeDimensionOverride=(d,h,v)=>(r._OrtAddFreeDimensionOverride=P.S)(d,h,v),r._OrtAddSessionConfigEntry=(d,h,v)=>(r._OrtAddSessionConfigEntry=P.T)(d,h,v),r._OrtReleaseSessionOptions=d=>(r._OrtReleaseSessionOptions=P.U)(d),r._OrtCreateSession=(d,h,v)=>(r._OrtCreateSession=P.V)(d,h,v),r._OrtReleaseSession=d=>(r._OrtReleaseSession=P.W)(d),r._OrtGetInputOutputCount=(d,h,v)=>(r._OrtGetInputOutputCount=P.X)(d,h,v),r._OrtGetInputName=(d,h)=>(r._OrtGetInputName=P.Y)(d,h),r._OrtGetOutputName=(d,h)=>(r._OrtGetOutputName=P.Z)(d,h),r._OrtFree=d=>(r._OrtFree=P._)(d),r._OrtCreateTensor=(d,h,v,C,T,L)=>(r._OrtCreateTensor=P.$)(d,h,v,C,T,L),r._OrtGetTensorData=(d,h,v,C,T)=>(r._OrtGetTensorData=P.aa)(d,h,v,C,T),r._OrtReleaseTensor=d=>(r._OrtReleaseTensor=P.ba)(d),r._OrtCreateRunOptions=(d,h,v,C)=>(r._OrtCreateRunOptions=P.ca)(d,h,v,C),r._OrtAddRunConfigEntry=(d,h,v)=>(r._OrtAddRunConfigEntry=P.da)(d,h,v),r._OrtReleaseRunOptions=d=>(r._OrtReleaseRunOptions=P.ea)(d),r._OrtCreateBinding=d=>(r._OrtCreateBinding=P.fa)(d),r._OrtBindInput=(d,h,v)=>(r._OrtBindInput=P.ga)(d,h,v),r._OrtBindOutput=(d,h,v,C)=>(r._OrtBindOutput=P.ha)(d,h,v,C),r._OrtClearBoundOutputs=d=>(r._OrtClearBoundOutputs=P.ia)(d),r._OrtReleaseBinding=d=>(r._OrtReleaseBinding=P.ja)(d),r._OrtRunWithBinding=(d,h,v,C,T)=>(r._OrtRunWithBinding=P.ka)(d,h,v,C,T),r._OrtRun=(d,h,v,C,T,L,H,le)=>(r._OrtRun=P.la)(d,h,v,C,T,L,H,le),r._OrtEndProfiling=d=>(r._OrtEndProfiling=P.ma)(d),r._JsepOutput=(d,h,v)=>(r._JsepOutput=P.na)(d,h,v),r._JsepGetNodeName=d=>(r._JsepGetNodeName=P.oa)(d);var qt=r._malloc=d=>(qt=r._malloc=P.pa)(d),ir=r._free=d=>(ir=r._free=P.qa)(d),sr=d=>(sr=P.sa)(d),ur=()=>(ur=P.ta)(),lr=d=>(lr=P.ua)(d),dr=d=>(dr=P.va)(d),cr=d=>(cr=P.xa)(d),pr=()=>(pr=P.ya)(),Kt=d=>(Kt=P.za)(d),Mt=()=>(Mt=P.Aa)();r.___start_em_js=924026,r.___stop_em_js=924187;function Ct(d){d=Object.assign({},d);var h=C=>()=>C()>>>0,v=C=>T=>C(T)>>>0;return d.__errno_location=h(d.__errno_location),d.malloc=v(d.malloc),d.stackSave=h(d.stackSave),d.stackAlloc=v(d.stackAlloc),d}r.stackAlloc=dr,r.stackSave=ur,r.stackRestore=lr,r.UTF8ToString=De,r.stringToUTF8=(d,h,v)=>er(d,te,h,v),r.lengthBytesUTF8=Ht;var zt;Ge=function d(){zt||fr(),zt||(Ge=d)};function fr(){function d(){if(!zt&&(zt=!0,r.calledRun=!0,!W)){if(kt(Se),a(r),r.onRuntimeInitialized&&r.onRuntimeInitialized(),r.postRun)for(typeof r.postRun=="function"&&(r.postRun=[r.postRun]);r.postRun.length;){var h=r.postRun.shift();Ce.unshift(h)}kt(Ce)}}if(!(0<he)){if(r.preRun)for(typeof r.preRun=="function"&&(r.preRun=[r.preRun]);r.preRun.length;)_e();kt(Y),0<he||(r.setStatus?(r.setStatus("Running..."),setTimeout(function(){setTimeout(function(){r.setStatus("")},1),d()},1)):d())}}if(r.preInit)for(typeof r.preInit=="function"&&(r.preInit=[r.preInit]);0<r.preInit.length;)r.preInit.pop()();return fr(),t.ready}})();typeof Co=="object"&&typeof Nn=="object"?Nn.exports=Io:typeof define=="function"&&define.amd&&define([],()=>Io)});var Ao=Yt(()=>{});var Eo=Yt(()=>{});var To={};Wt(To,{cpus:()=>rd});var rd,Oo=j(()=>{rd=void 0});var Po=Yt((Ro,Un)=>{"use strict";var ko=(()=>{var e=typeof document<"u"&&document.currentScript?document.currentScript.src:void 0;return typeof __filename<"u"&&(e=e||__filename),function(t={}){function r(){return $e.buffer!=he.buffer&&me(),he}function a(){return $e.buffer!=he.buffer&&me(),st}function n(){return $e.buffer!=he.buffer&&me(),Ge}function i(){return $e.buffer!=he.buffer&&me(),je}function u(){return $e.buffer!=he.buffer&&me(),G}function l(){return $e.buffer!=he.buffer&&me(),de}var o=t,c,f;o.ready=new Promise((s,p)=>{c=s,f=p}),o.jsepInit=(s,p,g,S,A,M,U,oe)=>{o.Qb=s,o.wb=p,o.yb=g,o.jb=S,o.xb=A,o.Ea=M,o.zb=U,o.Ab=oe,p=(ee,re,se)=>(...ve)=>{let Ie=dt,k=re?.();ve=ee(...ve);let ce=re?.();return k!==ce&&(ee=ce,se(k),re=se=null),dt!=Ie?Ul():ve},g=ee=>async(...re)=>{try{if(o.bb)throw Error("Session already started");let se=o.bb={Fb:re[0],errors:[]},ve=await ee(...re);if(o.bb!==se)throw Error("Session mismatch");s.flush();let Ie=se.errors;if(0<Ie.length){let k=await Promise.all(Ie);if(k=k.filter(ce=>ce),0<k.length)throw Error(k.join(`
`))}return ve}finally{o.bb=null}},o._OrtRun=g(p(o._OrtRun,()=>o._OrtRun,ee=>o._OrtRun=ee)),o._OrtRunWithBinding=g(p(o._OrtRunWithBinding,()=>o._OrtRunWithBinding,ee=>o._OrtRunWithBinding=ee)),o._OrtBindInput=p(o._OrtBindInput,()=>o._OrtBindInput,ee=>o._OrtBindInput=ee),o.jsepRegisterBuffer=(ee,re,se,ve)=>s.registerBuffer(ee,re,se,ve),o.jsepUnregisterBuffers=ee=>{s.unregisterBuffers(ee)},o.jsepGetBuffer=ee=>s.getBuffer(ee),o.jsepCreateDownloader=(ee,re,se)=>s.createDownloader(ee,re,se)};var y=Object.assign({},o),m="./this.program",w=(s,p)=>{throw p},b=typeof window=="object",$=typeof importScripts=="function",I=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string",x=o.ENVIRONMENT_IS_PTHREAD||!1,_="";function R(s){return o.locateFile?o.locateFile(s,_):_+s}var E,D,P;if(I){var W=(Dn(),At(zn)),N=(Vn(),At(Wn));_=$?N.dirname(_)+"/":__dirname+"/",E=(p,g)=>(p=p.startsWith("file://")?new URL(p):N.normalize(p),W.readFileSync(p,g?void 0:"utf8")),P=p=>(p=E(p,!0),p.buffer||(p=new Uint8Array(p)),p),D=(p,g,S,A=!0)=>{p=p.startsWith("file://")?new URL(p):N.normalize(p),W.readFile(p,A?void 0:"utf8",(M,U)=>{M?S(M):g(A?U.buffer:U)})},!o.thisProgram&&1<process.argv.length&&(m=process.argv[1].replace(/\\/g,"/")),process.argv.slice(2),w=(p,g)=>{throw process.exitCode=p,g},o.inspect=()=>"[Emscripten Module object]";let s;try{s=Ao()}catch(p){throw console.error('The "worker_threads" module is not supported in this node.js build - perhaps a newer version is needed?'),p}global.Worker=s.Worker}else(b||$)&&($?_=self.location.href:typeof document<"u"&&document.currentScript&&(_=document.currentScript.src),typeof e<"u"&&e&&(_=e),_.indexOf("blob:")!==0?_=_.substr(0,_.replace(/[?#].*/,"").lastIndexOf("/")+1):_="",I||(E=s=>{var p=new XMLHttpRequest;return p.open("GET",s,!1),p.send(null),p.responseText},$&&(P=s=>{var p=new XMLHttpRequest;return p.open("GET",s,!1),p.responseType="arraybuffer",p.send(null),new Uint8Array(p.response)}),D=(s,p,g)=>{var S=new XMLHttpRequest;S.open("GET",s,!0),S.responseType="arraybuffer",S.onload=()=>{S.status==200||S.status==0&&S.response?p(S.response):g()},S.onerror=g,S.send(null)}));I&&typeof performance>"u"&&(global.performance=Eo().performance);var F=console.log.bind(console),te=console.error.bind(console);I&&(F=(...s)=>W.writeSync(1,s.join(" ")+`
`),te=(...s)=>W.writeSync(2,s.join(" ")+`
`));var B=o.print||F,q=o.printErr||te;Object.assign(o,y),y=null,o.thisProgram&&(m=o.thisProgram),o.quit&&(w=o.quit);var pe;o.wasmBinary&&(pe=o.wasmBinary);var X=o.noExitRuntime||!0;typeof WebAssembly!="object"&&rt("no native wasm support detected");var $e,Y,Se,Ce=!1,_e,he,st,Ge,je,G,de;function me(){var s=$e.buffer;o.HEAP8=he=new Int8Array(s),o.HEAP16=new Int16Array(s),o.HEAP32=Ge=new Int32Array(s),o.HEAPU8=st=new Uint8Array(s),o.HEAPU16=new Uint16Array(s),o.HEAPU32=je=new Uint32Array(s),o.HEAPF32=G=new Float32Array(s),o.HEAPF64=de=new Float64Array(s)}var Ue=o.INITIAL_MEMORY||16777216;if(5242880<=Ue||rt("INITIAL_MEMORY should be larger than STACK_SIZE, was "+Ue+"! (STACK_SIZE=5242880)"),x)$e=o.wasmMemory;else if(o.wasmMemory)$e=o.wasmMemory;else if($e=new WebAssembly.Memory({initial:Ue/65536,maximum:65536,shared:!0}),!($e.buffer instanceof SharedArrayBuffer))throw q("requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag"),I&&q("(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and/or recent version)"),Error("bad memory");me(),Ue=$e.buffer.byteLength;var Qe=[],Be=[],Ve=[],qe=0;function ut(){return X||0<qe}var et=0,kt=null,Rt=null;function Xt(){et++,o.monitorRunDependencies&&o.monitorRunDependencies(et)}function Cr(){if(et--,o.monitorRunDependencies&&o.monitorRunDependencies(et),et==0&&(kt!==null&&(clearInterval(kt),kt=null),Rt)){var s=Rt;Rt=null,s()}}function rt(s){throw o.onAbort&&o.onAbort(s),s="Aborted("+s+")",q(s),Ce=!0,_e=1,s=new WebAssembly.RuntimeError(s+". Build with -sASSERTIONS for more info."),f(s),s}function Jt(s){return s.startsWith("data:application/octet-stream;base64,")}var De;De="ort-wasm-simd-threaded.wasm",Jt(De)||(De=R(De));function Ht(s){if(s==De&&pe)return new Uint8Array(pe);if(P)return P(s);throw"both async and sync fetching of the wasm failed"}function er(s){if(!pe&&(b||$)){if(typeof fetch=="function"&&!s.startsWith("file://"))return fetch(s,{credentials:"same-origin"}).then(p=>{if(!p.ok)throw"failed to load wasm binary file at '"+s+"'";return p.arrayBuffer()}).catch(()=>Ht(s));if(D)return new Promise((p,g)=>{D(s,S=>p(new Uint8Array(S)),g)})}return Promise.resolve().then(()=>Ht(s))}function bt(s,p,g){return er(s).then(S=>WebAssembly.instantiate(S,p)).then(S=>S).then(g,S=>{q("failed to asynchronously prepare wasm: "+S),rt(S)})}function _r(s,p){var g=De;return pe||typeof WebAssembly.instantiateStreaming!="function"||Jt(g)||g.startsWith("file://")||I||typeof fetch!="function"?bt(g,s,p):fetch(g,{credentials:"same-origin"}).then(S=>WebAssembly.instantiateStreaming(S,s).then(p,function(A){return q("wasm streaming compile failed: "+A),q("falling back to ArrayBuffer instantiation"),bt(g,s,p)}))}var wt,Lt={1428400:s=>{o.Ea("Abs",s,void 0)},1428451:s=>{o.Ea("Neg",s,void 0)},1428502:s=>{o.Ea("Floor",s,void 0)},1428555:s=>{o.Ea("Ceil",s,void 0)},1428607:s=>{o.Ea("Reciprocal",s,void 0)},1428665:s=>{o.Ea("Sqrt",s,void 0)},1428717:s=>{o.Ea("Exp",s,void 0)},1428768:s=>{o.Ea("Erf",s,void 0)},1428819:s=>{o.Ea("Sigmoid",s,void 0)},1428874:s=>{o.Ea("Log",s,void 0)},1428925:s=>{o.Ea("Sin",s,void 0)},1428976:s=>{o.Ea("Cos",s,void 0)},1429027:s=>{o.Ea("Tan",s,void 0)},1429078:s=>{o.Ea("Asin",s,void 0)},1429130:s=>{o.Ea("Acos",s,void 0)},1429182:s=>{o.Ea("Atan",s,void 0)},1429234:s=>{o.Ea("Sinh",s,void 0)},1429286:s=>{o.Ea("Cosh",s,void 0)},1429338:s=>{o.Ea("Asinh",s,void 0)},1429391:s=>{o.Ea("Acosh",s,void 0)},1429444:s=>{o.Ea("Atanh",s,void 0)},1429497:s=>{o.Ea("Tanh",s,void 0)},1429549:s=>{o.Ea("Not",s,void 0)},1429600:(s,p,g)=>{o.Ea("Clip",s,{min:p,max:g})},1429669:s=>{o.Ea("Clip",s,void 0)},1429721:(s,p)=>{o.Ea("Elu",s,{alpha:p})},1429779:s=>{o.Ea("Relu",s,void 0)},1429831:(s,p)=>{o.Ea("LeakyRelu",s,{alpha:p})},1429895:(s,p)=>{o.Ea("ThresholdedRelu",s,{alpha:p})},1429965:s=>{o.zb(s)},1429999:(s,p)=>o.Ab(s,p,o.bb.Fb,o.bb.errors),1430111:(s,p)=>{o.Ea("Cast",s,{to:p})},1430169:s=>{o.Ea("Add",s,void 0)},1430220:s=>{o.Ea("Sub",s,void 0)},1430271:s=>{o.Ea("Mul",s,void 0)},1430322:s=>{o.Ea("Div",s,void 0)},1430373:s=>{o.Ea("Pow",s,void 0)},1430424:s=>{o.Ea("Equal",s,void 0)},1430477:s=>{o.Ea("Greater",s,void 0)},1430532:s=>{o.Ea("GreaterOrEqual",s,void 0)},1430594:s=>{o.Ea("Less",s,void 0)},1430646:s=>{o.Ea("LessOrEqual",s,void 0)},1430705:(s,p,g,S,A)=>{o.Ea("ReduceMean",s,{keepDims:!!p,noopWithEmptyAxes:!!g,axes:S?Array.from(n().subarray(A>>>0,A+S>>>0)):[]})},1430869:(s,p,g,S,A)=>{o.Ea("ReduceMax",s,{keepDims:!!p,noopWithEmptyAxes:!!g,axes:S?Array.from(n().subarray(A>>>0,A+S>>>0)):[]})},1431032:(s,p,g,S,A)=>{o.Ea("ReduceMin",s,{keepDims:!!p,noopWithEmptyAxes:!!g,axes:S?Array.from(n().subarray(A>>>0,A+S>>>0)):[]})},1431195:(s,p,g,S,A)=>{o.Ea("ReduceProd",s,{keepDims:!!p,noopWithEmptyAxes:!!g,axes:S?Array.from(n().subarray(A>>>0,A+S>>>0)):[]})},1431359:(s,p,g,S,A)=>{o.Ea("ReduceSum",s,{keepDims:!!p,noopWithEmptyAxes:!!g,axes:S?Array.from(n().subarray(A>>>0,A+S>>>0)):[]})},1431522:(s,p,g,S,A)=>{o.Ea("ReduceL1",s,{keepDims:!!p,noopWithEmptyAxes:!!g,axes:S?Array.from(n().subarray(A>>>0,A+S>>>0)):[]})},1431684:(s,p,g,S,A)=>{o.Ea("ReduceL2",s,{keepDims:!!p,noopWithEmptyAxes:!!g,axes:S?Array.from(n().subarray(A>>>0,A+S>>>0)):[]})},1431846:(s,p,g,S,A)=>{o.Ea("ReduceLogSum",s,{keepDims:!!p,noopWithEmptyAxes:!!g,axes:S?Array.from(n().subarray(A>>>0,A+S>>>0)):[]})},1432012:(s,p,g,S,A)=>{o.Ea("ReduceSumSquare",s,{keepDims:!!p,noopWithEmptyAxes:!!g,axes:S?Array.from(n().subarray(A>>>0,A+S>>>0)):[]})},1432181:(s,p,g,S,A)=>{o.Ea("ReduceLogSumExp",s,{keepDims:!!p,noopWithEmptyAxes:!!g,axes:S?Array.from(n().subarray(A>>>0,A+S>>>0)):[]})},1432350:s=>{o.Ea("Where",s,void 0)},1432403:(s,p,g)=>{o.Ea("Transpose",s,{perm:p?Array.from(n().subarray(g>>>0,g+p>>>0)):[]})},1432516:(s,p,g,S,A,M,U,oe,ee,re,se,ve,Ie)=>{o.Ea("Conv",s,{format:ee?"NHWC":"NCHW",auto_pad:p,dilations:[g],group:S,kernel_shape:[A],pads:M?Array.from(n().subarray(U>>>0,U+M>>>0)):[],strides:[oe],w_is_const:()=>!!r()[re>>>0],activation:He(se),activation_params:ve?Array.from(u().subarray(Ie>>>0,Ie+ve>>>0)):[]})},1432897:(s,p,g,S,A,M,U,oe,ee,re,se,ve,Ie,k,ce,xe)=>{o.Ea("Conv",s,{format:ve?"NHWC":"NCHW",auto_pad:p,dilations:[g,S],group:A,kernel_shape:[M,U],pads:oe?Array.from(n().subarray(ee>>>0,ee+oe>>>0)):[],strides:[re,se],w_is_const:()=>!!r()[Ie>>>0],activation:He(k),activation_params:ce?Array.from(u().subarray(xe>>>0,xe+ce>>>0)):[]})},1433299:(s,p,g,S,A,M,U,oe,ee,re,se,ve,Ie,k,ce)=>{o.Ea("ConvTranspose",s,{format:ee?"NHWC":"NCHW",autoPad:p,dilations:[g],group:S,kernel_shape:[A],pads:[M,U],strides:[oe],wIsConst:()=>!!r()[re>>>0],outputPadding:se?Array.from(n().subarray(ve>>>0,ve+se>>>0)):[],outputShape:Ie?Array.from(n().subarray(k>>>0,k+Ie>>>0)):[],activation:He(ce)})},1433713:(s,p,g,S,A,M,U,oe,ee,re,se,ve,Ie,k)=>{o.Ea("ConvTranspose",s,{format:oe?"NHWC":"NCHW",autoPad:p,dilations:Array.from(n().subarray(g>>>0,g+2>>>0)),group:S,kernelShape:Array.from(n().subarray(A>>>0,A+2>>>0)),pads:Array.from(n().subarray(M>>>0,M+4>>>0)),strides:Array.from(n().subarray(U>>>0,U+2>>>0)),wIsConst:()=>!!r()[ee>>>0],outputPadding:0<re?Array.from(n().subarray(se>>>0,se+re>>>0)):[],outputShape:0<ve?Array.from(n().subarray(Ie>>>0,Ie+ve>>>0)):[],activation:He(k)})},1434270:(s,p,g,S,A,M,U,oe,ee,re,se,ve,Ie,k,ce)=>{o.Ea("ConvTranspose",s,{format:ee?"NHWC":"NCHW",autoPad:p,dilations:[g],group:S,kernel_shape:[A],pads:[M,U],strides:[oe],wIsConst:()=>!!r()[re>>>0],outputPadding:se?Array.from(n().subarray(ve>>>0,ve+se>>>0)):[],outputShape:Ie?Array.from(n().subarray(k>>>0,k+Ie>>>0)):[],activation:He(ce)})},1434684:(s,p,g,S,A,M,U,oe,ee,re,se,ve,Ie,k)=>{o.Ea("ConvTranspose",s,{format:oe?"NHWC":"NCHW",autoPad:p,dilations:Array.from(n().subarray(g>>>0,g+2>>>0)),group:S,kernelShape:Array.from(n().subarray(A>>>0,A+2>>>0)),pads:Array.from(n().subarray(M>>>0,M+4>>>0)),strides:Array.from(n().subarray(U>>>0,U+2>>>0)),wIsConst:()=>!!r()[ee>>>0],outputPadding:0<re?Array.from(n().subarray(se>>>0,se+re>>>0)):[],outputShape:0<ve?Array.from(n().subarray(Ie>>>0,Ie+ve>>>0)):[],activation:He(k)})},1435241:(s,p)=>{o.Ea("GlobalAveragePool",s,{format:p?"NHWC":"NCHW"})},1435332:(s,p,g,S,A,M,U,oe,ee,re,se,ve,Ie,k,ce,xe)=>{o.Ea("AveragePool",s,{format:xe?"NHWC":"NCHW",auto_pad:p,ceil_mode:g,count_include_pad:S,storage_order:A,dilations:[M,U],kernel_shape:[oe,ee],pads:[re,se,ve,Ie],strides:[k,ce]})},1435616:(s,p)=>{o.Ea("GlobalAveragePool",s,{format:p?"NHWC":"NCHW"})},1435707:(s,p,g,S,A,M,U,oe,ee,re,se,ve,Ie,k,ce,xe)=>{o.Ea("AveragePool",s,{format:xe?"NHWC":"NCHW",auto_pad:p,ceil_mode:g,count_include_pad:S,storage_order:A,dilations:[M,U],kernel_shape:[oe,ee],pads:[re,se,ve,Ie],strides:[k,ce]})},1435991:(s,p)=>{o.Ea("GlobalMaxPool",s,{format:p?"NHWC":"NCHW"})},1436078:(s,p,g,S,A,M,U,oe,ee,re,se,ve,Ie,k,ce,xe)=>{o.Ea("MaxPool",s,{format:xe?"NHWC":"NCHW",auto_pad:p,ceil_mode:g,count_include_pad:S,storage_order:A,dilations:[M,U],kernel_shape:[oe,ee],pads:[re,se,ve,Ie],strides:[k,ce]})},1436358:(s,p)=>{o.Ea("GlobalMaxPool",s,{format:p?"NHWC":"NCHW"})},1436445:(s,p,g,S,A,M,U,oe,ee,re,se,ve,Ie,k,ce,xe)=>{o.Ea("MaxPool",s,{format:xe?"NHWC":"NCHW",auto_pad:p,ceil_mode:g,count_include_pad:S,storage_order:A,dilations:[M,U],kernel_shape:[oe,ee],pads:[re,se,ve,Ie],strides:[k,ce]})},1436725:(s,p,g,S,A)=>{o.Ea("Gemm",s,{alpha:p,beta:g,transA:S,transB:A})},1436829:s=>{o.Ea("MatMul",s,void 0)},1436883:(s,p,g,S)=>{o.Ea("ArgMax",s,{keepDims:!!p,selectLastIndex:!!g,axis:S})},1436991:(s,p,g,S)=>{o.Ea("ArgMin",s,{keepDims:!!p,selectLastIndex:!!g,axis:S})},1437099:(s,p)=>{o.Ea("Softmax",s,{axis:p})},1437162:(s,p)=>{o.Ea("Concat",s,{axis:p})},1437222:(s,p,g,S,A)=>{o.Ea("Split",s,{axis:p,numOutputs:g,splitSizes:S?Array.from(n().subarray(A>>>0,A+S>>>0)):[]})},1437367:s=>{o.Ea("Expand",s,void 0)},1437421:(s,p)=>{o.Ea("Gather",s,{axis:Number(p)})},1437492:(s,p)=>{o.Ea("GatherElements",s,{axis:Number(p)})},1437571:(s,p,g,S,A,M,U,oe,ee,re,se)=>{o.Ea("Resize",s,{antialias:p,axes:g?Array.from(n().subarray(S>>>0,S+g>>>0)):[],coordinateTransformMode:He(A),cubicCoeffA:M,excludeOutside:U,extrapolationValue:oe,keepAspectRatioPolicy:He(ee),mode:He(re),nearestMode:He(se)})},1437922:(s,p,g,S,A,M,U)=>{o.Ea("Slice",s,{starts:p?Array.from(n().subarray(g>>>0,g+p>>>0)):[],ends:S?Array.from(n().subarray(A>>>0,A+S>>>0)):[],axes:M?Array.from(n().subarray(U>>>0,U+M>>>0)):[]})},1438153:s=>{o.Ea("Tile",s,void 0)},1438205:(s,p,g)=>{o.Ea("LayerNormalization",s,{axis:Number(p),epsilon:Number(g)})},1438312:(s,p,g)=>{o.Ea("InstanceNormalization",s,{epsilon:p,format:g?"NHWC":"NCHW"})},1438426:(s,p,g)=>{o.Ea("InstanceNormalization",s,{epsilon:p,format:g?"NHWC":"NCHW"})},1438540:s=>{o.Ea("Range",s,void 0)},1438593:(s,p)=>{o.Ea("Einsum",s,{equation:He(p)})},1438674:(s,p,g,S,A)=>{o.Ea("Pad",s,{mode:p,value:g,pads:S?Array.from(n().subarray(A>>>0,A+S>>>0)):[]})},1438806:(s,p,g,S,A,M)=>{o.Ea("BatchNormalization",s,{epsilon:p,momentum:g,spatial:!!A,trainingMode:!!S,format:M?"NHWC":"NCHW"})},1438975:(s,p,g,S,A,M)=>{o.Ea("BatchNormalization",s,{epsilon:p,momentum:g,spatial:!!A,trainingMode:!!S,format:M?"NHWC":"NCHW"})},1439144:(s,p,g)=>{o.Ea("CumSum",s,{exclusive:Number(p),reverse:Number(g)})},1439241:(s,p,g,S,A,M,U,oe,ee)=>{o.Ea("Attention",s,{numHeads:p,isUnidirectional:g,maskFilterValue:S,scale:A,doRotary:M,qkvHiddenSizes:U?Array.from(n().subarray(Number(oe)>>>0,Number(oe)+U>>>0)):[],pastPresentShareBuffer:!!ee})},1439513:s=>{o.Ea("Gelu",s,void 0)},1439565:(s,p,g,S,A,M)=>{o.Ea("MultiHeadAttention",s,{numHeads:p,isUnidirectional:g,maskFilterValue:S,scale:A,doRotary:M})},1439724:s=>{o.Ea("BiasAdd",s,void 0)},1439779:s=>{o.Ea("BiasSplitGelu",s,void 0)},1439840:(s,p)=>{o.Ea("SkipLayerNormalization",s,{epsilon:p})},1439921:s=>o.wb(s),1439954:s=>o.yb(s),1439986:(s,p,g)=>{o.jb(s,p,g,!0)},1440025:(s,p,g)=>{o.jb(s,p,g)}};function It(s){this.name="ExitStatus",this.message=`Program terminated with exit(${s})`,this.status=s}function Gt(s){s.terminate(),s.onmessage=()=>{}}function Ft(s){(s=ue.Qa[s])||rt(),ue.Eb(s)}function tr(s){var p=ue.tb();if(!p)return 6;ue.Ya.push(p),ue.Qa[s.Xa]=p,p.Xa=s.Xa;var g={cmd:"run",start_routine:s.Gb,arg:s.rb,pthread_ptr:s.Xa};return I&&p.unref(),p.postMessage(g,s.Mb),0}var jt=typeof TextDecoder<"u"?new TextDecoder("utf8"):void 0,Ar=(s,p,g)=>{p>>>=0;var S=p+g;for(g=p;s[g]&&!(g>=S);)++g;if(16<g-p&&s.buffer&&jt)return jt.decode(s.buffer instanceof SharedArrayBuffer?s.slice(p,g):s.subarray(p,g));for(S="";p<g;){var A=s[p++];if(A&128){var M=s[p++]&63;if((A&224)==192)S+=String.fromCharCode((A&31)<<6|M);else{var U=s[p++]&63;A=(A&240)==224?(A&15)<<12|M<<6|U:(A&7)<<18|M<<12|U<<6|s[p++]&63,65536>A?S+=String.fromCharCode(A):(A-=65536,S+=String.fromCharCode(55296|A>>10,56320|A&1023))}}else S+=String.fromCharCode(A)}return S},He=(s,p)=>(s>>>=0)?Ar(a(),s,p):"";function rr(s){if(x)return H(1,1,s);_e=s,ut()||(ue.Hb(),o.onExit&&o.onExit(s),Ce=!0),w(s,new It(s))}var nr=s=>{if(_e=s,x)throw Er(s),"unwind";rr(s)},ue={ab:[],Ya:[],mb:[],Qa:{},gb:function(){x?ue.vb():ue.ub()},ub:function(){Qe.unshift(()=>{Xt(),ue.Bb(()=>Cr())})},vb:function(){ue.receiveObjectTransfer=ue.Db,ue.threadInitTLS=ue.lb,ue.setExitStatus=ue.kb,X=!1},kb:function(s){_e=s},Sb:["$terminateWorker"],Hb:function(){for(var s of ue.Ya)Gt(s);for(s of ue.ab)Gt(s);ue.ab=[],ue.Ya=[],ue.Qa=[]},Eb:function(s){var p=s.Xa;delete ue.Qa[p],ue.ab.push(s),ue.Ya.splice(ue.Ya.indexOf(s),1),s.Xa=0,En(p)},Db:function(){},lb:function(){ue.mb.forEach(s=>s())},Cb:s=>new Promise(p=>{s.onmessage=M=>{M=M.data;var U=M.cmd;if(M.targetThread&&M.targetThread!=Vr()){var oe=ue.Qa[M.Rb];oe?oe.postMessage(M,M.transferList):q('Internal error! Worker sent a message "'+U+'" to target pthread '+M.targetThread+", but that thread no longer exists!")}else U==="checkMailbox"?Mt():U==="spawnThread"?tr(M):U==="cleanupThread"?Ft(M.thread):U==="killThread"?(M=M.thread,U=ue.Qa[M],delete ue.Qa[M],Gt(U),En(M),ue.Ya.splice(ue.Ya.indexOf(U),1),U.Xa=0):U==="cancelThread"?ue.Qa[M.thread].postMessage({cmd:"cancel"}):U==="loaded"?(s.loaded=!0,p(s)):U==="alert"?alert("Thread "+M.threadId+": "+M.text):M.target==="setimmediate"?s.postMessage(M):U==="callHandler"?o[M.handler](...M.args):U&&q("worker sent an unknown command "+U)},s.onerror=M=>{throw q("worker sent an error! "+M.filename+":"+M.lineno+": "+M.message),M},I&&(s.on("message",function(M){s.onmessage({data:M})}),s.on("error",function(M){s.onerror(M)}));var g=[],S=["onExit","onAbort","print","printErr"],A;for(A of S)o.hasOwnProperty(A)&&g.push(A);s.postMessage({cmd:"load",handlers:g,urlOrBlob:o.mainScriptUrlOrBlob||e,wasmMemory:$e,wasmModule:Se})}),Bb:function(s){s()},qb:function(){var s=R("ort-wasm-simd-threaded.worker.js");s=new Worker(s),ue.ab.push(s)},tb:function(){return ue.ab.length==0&&(ue.qb(),ue.Cb(ue.ab[0])),ue.ab.pop()}};o.PThread=ue;var vt=s=>{for(;0<s.length;)s.shift()(o)};o.establishStackSpace=function(){var s=Vr(),p=n()[s+52>>2>>>0];s=n()[s+56>>2>>>0],Ua(p,p-s),Nr(p)};function Er(s){if(x)return H(2,0,s);nr(s)}o.invokeEntryPoint=function(s,p){s=Ha.apply(null,[s,p]),ut()?ue.kb(s):Tn(s)};function lt(s){this.fb=s-24,this.pb=function(p){i()[this.fb+4>>2>>>0]=p},this.ob=function(p){i()[this.fb+8>>2>>>0]=p},this.gb=function(p,g){this.nb(),this.pb(p),this.ob(g)},this.nb=function(){i()[this.fb+16>>2>>>0]=0}}var tt=0,Tr=0;function Pt(s,p,g,S){return x?H(3,1,s,p,g,S):ar(s,p,g,S)}function ar(s,p,g,S){if(s>>>=0,p>>>=0,g>>>=0,S>>>=0,typeof SharedArrayBuffer>"u")return q("Current environment does not support SharedArrayBuffer, pthreads are not available!"),6;var A=[];return x&&A.length===0?Pt(s,p,g,S):(s={Gb:g,Xa:s,rb:S,Mb:A},x?(s.Ob="spawnThread",postMessage(s,A),0):tr(s))}function or(s,p,g){return x?H(4,1,s,p,g):0}function Or(s,p){if(x)return H(5,1,s,p)}var Bt=s=>{for(var p=0,g=0;g<s.length;++g){var S=s.charCodeAt(g);127>=S?p++:2047>=S?p+=2:55296<=S&&57343>=S?(p+=4,++g):p+=3}return p},kr=(s,p,g,S)=>{if(g>>>=0,!(0<S))return 0;var A=g;S=g+S-1;for(var M=0;M<s.length;++M){var U=s.charCodeAt(M);if(55296<=U&&57343>=U){var oe=s.charCodeAt(++M);U=65536+((U&1023)<<10)|oe&1023}if(127>=U){if(g>=S)break;p[g++>>>0]=U}else{if(2047>=U){if(g+1>=S)break;p[g++>>>0]=192|U>>6}else{if(65535>=U){if(g+2>=S)break;p[g++>>>0]=224|U>>12}else{if(g+3>=S)break;p[g++>>>0]=240|U>>18,p[g++>>>0]=128|U>>12&63}p[g++>>>0]=128|U>>6&63}p[g++>>>0]=128|U&63}}return p[g>>>0]=0,g-A},Rr=(s,p,g)=>kr(s,a(),p,g);function Pr(s,p){if(x)return H(6,1,s,p)}function Br(s,p,g){if(x)return H(7,1,s,p,g)}function Mr(s,p,g){return x?H(8,1,s,p,g):0}function zr(s,p){if(x)return H(9,1,s,p)}function qt(s,p,g){if(x)return H(10,1,s,p,g)}function ir(s,p,g,S){if(x)return H(11,1,s,p,g,S)}function sr(s,p,g,S){if(x)return H(12,1,s,p,g,S)}function ur(s,p,g,S){if(x)return H(13,1,s,p,g,S)}function lr(s){if(x)return H(14,1,s)}function dr(s,p){if(x)return H(15,1,s,p)}function cr(s,p,g){if(x)return H(16,1,s,p,g)}var pr=s=>{if(!Ce)try{if(s(),!ut())try{x?Tn(_e):nr(_e)}catch(p){p instanceof It||p=="unwind"||w(1,p)}}catch(p){p instanceof It||p=="unwind"||w(1,p)}};function Kt(s){s>>>=0,typeof Atomics.Nb=="function"&&(Atomics.Nb(n(),s>>2,s).value.then(Mt),s+=128,Atomics.store(n(),s>>2,1))}o.__emscripten_thread_mailbox_await=Kt;function Mt(){var s=Vr();s&&(Kt(s),pr(()=>Va()))}o.checkMailbox=Mt;var Ct=s=>s%4===0&&(s%100!==0||s%400===0),zt=[0,31,60,91,121,152,182,213,244,274,305,335],fr=[0,31,59,90,120,151,181,212,243,273,304,334];function d(s,p,g,S,A,M,U,oe){return x?H(17,1,s,p,g,S,A,M,U,oe):-52}function h(s,p,g,S,A,M,U){if(x)return H(18,1,s,p,g,S,A,M,U)}var v=s=>{var p=Bt(s)+1,g=An(p);return g&&Rr(s,g,p),g},C=[],T=(s,p)=>{C.length=0;var g;for(p>>=2;g=a()[s++>>>0];)p+=g!=105&p,C.push(g==105?n()[p>>>0]:l()[p++>>>1]),++p;return C},L=s=>{var p=On();return s=s(),Nr(p),s};function H(s,p){var g=arguments.length-2,S=arguments;return L(()=>{for(var A=kn(8*g),M=A>>3,U=0;U<g;U++){var oe=S[2+U];l()[M+U>>>0]=oe}return Wa(s,g,A,p)})}var le=[],Z={},ae=()=>{if(!J){var s={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:(typeof navigator=="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:m||"./this.program"},p;for(p in Z)Z[p]===void 0?delete s[p]:s[p]=Z[p];var g=[];for(p in s)g.push(`${p}=${s[p]}`);J=g}return J},J;function fe(s,p){if(x)return H(19,1,s,p);s>>>=0,p>>>=0;var g=0;return ae().forEach(function(S,A){var M=p+g;for(A=i()[s+4*A>>2>>>0]=M,M=0;M<S.length;++M)r()[A++>>0>>>0]=S.charCodeAt(M);r()[A>>0>>>0]=0,g+=S.length+1}),0}function we(s,p){if(x)return H(20,1,s,p);s>>>=0,p>>>=0;var g=ae();i()[s>>2>>>0]=g.length;var S=0;return g.forEach(function(A){S+=A.length+1}),i()[p>>2>>>0]=S,0}function O(s){return x?H(21,1,s):52}function ie(s,p,g,S){return x?H(22,1,s,p,g,S):52}function ge(s,p,g,S,A){return x?H(23,1,s,p,g,S,A):70}var $t=[null,[],[]];function mr(s,p,g,S){if(x)return H(24,1,s,p,g,S);p>>>=0,g>>>=0,S>>>=0;for(var A=0,M=0;M<g;M++){var U=i()[p>>2>>>0],oe=i()[p+4>>2>>>0];p+=8;for(var ee=0;ee<oe;ee++){var re=a()[U+ee>>>0],se=$t[s];re===0||re===10?((s===1?B:q)(Ar(se,0)),se.length=0):se.push(re)}A+=oe}return i()[S>>2>>>0]=A,0}var Oa=[31,29,31,30,31,30,31,31,30,31,30,31],ka=[31,28,31,30,31,30,31,31,30,31,30,31];function zl(s){var p=Array(Bt(s)+1);return kr(s,p,0,p.length),p}var Dl=(s,p)=>{r().set(s,p>>>0)};function Ra(s,p,g,S){function A(k,ce,xe){for(k=typeof k=="number"?k.toString():k||"";k.length<ce;)k=xe[0]+k;return k}function M(k,ce){return A(k,ce,"0")}function U(k,ce){function xe(Ka){return 0>Ka?-1:0<Ka?1:0}var Dt;return(Dt=xe(k.getFullYear()-ce.getFullYear()))===0&&(Dt=xe(k.getMonth()-ce.getMonth()))===0&&(Dt=xe(k.getDate()-ce.getDate())),Dt}function oe(k){switch(k.getDay()){case 0:return new Date(k.getFullYear()-1,11,29);case 1:return k;case 2:return new Date(k.getFullYear(),0,3);case 3:return new Date(k.getFullYear(),0,2);case 4:return new Date(k.getFullYear(),0,1);case 5:return new Date(k.getFullYear()-1,11,31);case 6:return new Date(k.getFullYear()-1,11,30)}}function ee(k){var ce=k.Za;for(k=new Date(new Date(k.$a+1900,0,1).getTime());0<ce;){var xe=k.getMonth(),Dt=(Ct(k.getFullYear())?Oa:ka)[xe];if(ce>Dt-k.getDate())ce-=Dt-k.getDate()+1,k.setDate(1),11>xe?k.setMonth(xe+1):(k.setMonth(0),k.setFullYear(k.getFullYear()+1));else{k.setDate(k.getDate()+ce);break}}return xe=new Date(k.getFullYear()+1,0,4),ce=oe(new Date(k.getFullYear(),0,4)),xe=oe(xe),0>=U(ce,k)?0>=U(xe,k)?k.getFullYear()+1:k.getFullYear():k.getFullYear()-1}s>>>=0,p>>>=0,g>>>=0,S>>>=0;var re=n()[S+40>>2>>>0];S={Kb:n()[S>>2>>>0],Jb:n()[S+4>>2>>>0],cb:n()[S+8>>2>>>0],ib:n()[S+12>>2>>>0],eb:n()[S+16>>2>>>0],$a:n()[S+20>>2>>>0],Wa:n()[S+24>>2>>>0],Za:n()[S+28>>2>>>0],Tb:n()[S+32>>2>>>0],Ib:n()[S+36>>2>>>0],Lb:re?He(re):""},g=He(g),re={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var se in re)g=g.replace(new RegExp(se,"g"),re[se]);var ve="Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),Ie="January February March April May June July August September October November December".split(" ");re={"%a":k=>ve[k.Wa].substring(0,3),"%A":k=>ve[k.Wa],"%b":k=>Ie[k.eb].substring(0,3),"%B":k=>Ie[k.eb],"%C":k=>M((k.$a+1900)/100|0,2),"%d":k=>M(k.ib,2),"%e":k=>A(k.ib,2," "),"%g":k=>ee(k).toString().substring(2),"%G":k=>ee(k),"%H":k=>M(k.cb,2),"%I":k=>(k=k.cb,k==0?k=12:12<k&&(k-=12),M(k,2)),"%j":k=>{for(var ce=0,xe=0;xe<=k.eb-1;ce+=(Ct(k.$a+1900)?Oa:ka)[xe++]);return M(k.ib+ce,3)},"%m":k=>M(k.eb+1,2),"%M":k=>M(k.Jb,2),"%n":()=>`
`,"%p":k=>0<=k.cb&&12>k.cb?"AM":"PM","%S":k=>M(k.Kb,2),"%t":()=>"	","%u":k=>k.Wa||7,"%U":k=>M(Math.floor((k.Za+7-k.Wa)/7),2),"%V":k=>{var ce=Math.floor((k.Za+7-(k.Wa+6)%7)/7);if(2>=(k.Wa+371-k.Za-2)%7&&ce++,ce)ce==53&&(xe=(k.Wa+371-k.Za)%7,xe==4||xe==3&&Ct(k.$a)||(ce=1));else{ce=52;var xe=(k.Wa+7-k.Za-1)%7;(xe==4||xe==5&&Ct(k.$a%400-1))&&ce++}return M(ce,2)},"%w":k=>k.Wa,"%W":k=>M(Math.floor((k.Za+7-(k.Wa+6)%7)/7),2),"%y":k=>(k.$a+1900).toString().substring(2),"%Y":k=>k.$a+1900,"%z":k=>{k=k.Ib;var ce=0<=k;return k=Math.abs(k)/60,(ce?"+":"-")+("0000"+(k/60*100+k%60)).slice(-4)},"%Z":k=>k.Lb,"%%":()=>"%"},g=g.replace(/%%/g,"\0\0");for(se in re)g.includes(se)&&(g=g.replace(new RegExp(se,"g"),re[se](S)));return g=g.replace(/\0\0/g,"%"),se=zl(g),se.length>p?0:(Dl(se,s),se.length-1)}function Dr(s){try{s()}catch(p){rt(p)}}function Wl(s){var p={},g;for(g in s)(function(S){var A=s[S];p[S]=typeof A=="function"?function(){Wr.push(S);try{return A.apply(null,arguments)}finally{Ce||(Wr.pop()===S||rt(),dt&&_t===1&&Wr.length===0&&(_t=0,qe+=1,Dr(Ga),typeof Fibers<"u"&&Fibers.Ub()))}}:A})(g);return p}var _t=0,dt=null,Pa=0,Wr=[],Ba={},Ma={},Vl=0,_n=null,Nl=[];function Ul(){return new Promise((s,p)=>{_n={resolve:s,reject:p}})}function Hl(){var s=An(65548),p=s+12;i()[s>>2>>>0]=p,i()[s+4>>2>>>0]=p+65536,p=Wr[0];var g=Ba[p];return g===void 0&&(g=Vl++,Ba[p]=g,Ma[g]=p),p=g,n()[s+8>>2>>>0]=p,s}function Ll(){var s=n()[dt+8>>2>>>0];return s=Y[Ma[s]],--qe,s()}function Gl(s){if(!Ce){if(_t===0){var p=!1,g=!1;s((S=0)=>{if(!Ce&&(Pa=S,p=!0,g)){_t=2,Dr(()=>Fa(dt)),typeof Browser<"u"&&Browser.hb.sb&&Browser.hb.resume(),S=!1;try{var A=Ll()}catch(oe){A=oe,S=!0}var M=!1;if(!dt){var U=_n;U&&(_n=null,(S?U.reject:U.resolve)(A),M=!0)}if(S&&!M)throw A}}),g=!0,p||(_t=1,dt=Hl(),typeof Browser<"u"&&Browser.hb.sb&&Browser.hb.pause(),Dr(()=>La(dt)))}else _t===2?(_t=0,Dr(ja),za(dt),dt=null,Nl.forEach(S=>pr(S))):rt(`invalid state: ${_t}`);return Pa}}function Fl(s){return Gl(p=>{s().then(p)})}ue.gb();var jl=[null,rr,Er,Pt,or,Or,Pr,Br,Mr,zr,qt,ir,sr,ur,lr,dr,cr,d,h,fe,we,O,ie,ge,mr],ql={r:function(s,p,g){return Fl(async()=>{await o.xb(s,p,g)})},b:function(s,p,g){throw s>>>=0,new lt(s).gb(p>>>0,g>>>0),tt=s,Tr++,tt},P:function(s){Da(s>>>0,!$,1,!b,131072,!1),ue.lb()},n:function(s){s>>>=0,x?postMessage({cmd:"cleanupThread",thread:s}):Ft(s)},K:ar,g:or,V:Or,F:Pr,H:Br,y:Mr,T:zr,L:qt,S:ir,p:sr,G:ur,D:lr,U:dr,E:cr,q:()=>!0,B:function(s,p){s>>>=0,s==p>>>0?setTimeout(()=>Mt()):x?postMessage({targetThread:s,cmd:"checkMailbox"}):(s=ue.Qa[s])&&s.postMessage({cmd:"checkMailbox"})},N:function(){return-1},O:Kt,X:function(s){I&&ue.Qa[s>>>0].ref()},u:function(s,p,g){s=p+2097152>>>0<4194305-!!s?(s>>>0)+4294967296*p:NaN,g>>>=0,s=new Date(1e3*s),n()[g>>2>>>0]=s.getUTCSeconds(),n()[g+4>>2>>>0]=s.getUTCMinutes(),n()[g+8>>2>>>0]=s.getUTCHours(),n()[g+12>>2>>>0]=s.getUTCDate(),n()[g+16>>2>>>0]=s.getUTCMonth(),n()[g+20>>2>>>0]=s.getUTCFullYear()-1900,n()[g+24>>2>>>0]=s.getUTCDay(),s=(s.getTime()-Date.UTC(s.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,n()[g+28>>2>>>0]=s},v:function(s,p,g){s=p+2097152>>>0<4194305-!!s?(s>>>0)+4294967296*p:NaN,g>>>=0,s=new Date(1e3*s),n()[g>>2>>>0]=s.getSeconds(),n()[g+4>>2>>>0]=s.getMinutes(),n()[g+8>>2>>>0]=s.getHours(),n()[g+12>>2>>>0]=s.getDate(),n()[g+16>>2>>>0]=s.getMonth(),n()[g+20>>2>>>0]=s.getFullYear()-1900,n()[g+24>>2>>>0]=s.getDay(),p=(Ct(s.getFullYear())?zt:fr)[s.getMonth()]+s.getDate()-1|0,n()[g+28>>2>>>0]=p,n()[g+36>>2>>>0]=-(60*s.getTimezoneOffset()),p=new Date(s.getFullYear(),6,1).getTimezoneOffset();var S=new Date(s.getFullYear(),0,1).getTimezoneOffset();s=(p!=S&&s.getTimezoneOffset()==Math.min(S,p))|0,n()[g+32>>2>>>0]=s},w:function(s){s>>>=0;var p=new Date(n()[s+20>>2>>>0]+1900,n()[s+16>>2>>>0],n()[s+12>>2>>>0],n()[s+8>>2>>>0],n()[s+4>>2>>>0],n()[s>>2>>>0],0),g=n()[s+32>>2>>>0],S=p.getTimezoneOffset(),A=new Date(p.getFullYear(),6,1).getTimezoneOffset(),M=new Date(p.getFullYear(),0,1).getTimezoneOffset(),U=Math.min(M,A);return 0>g?n()[s+32>>2>>>0]=+(A!=M&&U==S):0<g!=(U==S)&&(A=Math.max(M,A),p.setTime(p.getTime()+6e4*((0<g?U:A)-S))),n()[s+24>>2>>>0]=p.getDay(),g=(Ct(p.getFullYear())?zt:fr)[p.getMonth()]+p.getDate()-1|0,n()[s+28>>2>>>0]=g,n()[s>>2>>>0]=p.getSeconds(),n()[s+4>>2>>>0]=p.getMinutes(),n()[s+8>>2>>>0]=p.getHours(),n()[s+12>>2>>>0]=p.getDate(),n()[s+16>>2>>>0]=p.getMonth(),n()[s+20>>2>>>0]=p.getYear(),s=p.getTime()/1e3,Na((wt=s,1<=+Math.abs(wt)?0<wt?+Math.floor(wt/4294967296)>>>0:~~+Math.ceil((wt-+(~~wt>>>0))/4294967296)>>>0:0)),s>>>0},s:d,t:h,A:function(s,p,g){function S(re){return(re=re.toTimeString().match(/\(([A-Za-z ]+)\)$/))?re[1]:"GMT"}s>>>=0,p>>>=0,g>>>=0;var A=new Date().getFullYear(),M=new Date(A,0,1),U=new Date(A,6,1);A=M.getTimezoneOffset();var oe=U.getTimezoneOffset(),ee=Math.max(A,oe);i()[s>>2>>>0]=60*ee,n()[p>>2>>>0]=+(A!=oe),s=S(M),p=S(U),s=v(s),p=v(p),oe<A?(i()[g>>2>>>0]=s,i()[g+4>>2>>>0]=p):(i()[g>>2>>>0]=p,i()[g+4>>2>>>0]=s)},e:()=>{rt("")},c:function(s,p,g){return s>>>=0,p=T(p>>>0,g>>>0),Lt[s].apply(null,p)},l:function(s,p,g){return s>>>=0,p=T(p>>>0,g>>>0),Lt[s].apply(null,p)},o:function(){},k:function(){return Date.now()},W:()=>{throw qe+=1,"unwind"},C:function(){return 4294901760},d:()=>performance.timeOrigin+performance.now(),i:function(){return I?(Oo(),At(To)).cpus().length:navigator.hardwareConcurrency},M:function(s,p,g,S){for(ue.Pb=p>>>0,le.length=g,p=S>>>0>>3,S=0;S<g;S++)le[S]=l()[p+S>>>0];return(0>s?Lt[-s-1]:jl[s]).apply(null,le)},z:function(s){s>>>=0;var p=a().length;if(s<=p||4294901760<s)return!1;for(var g=1;4>=g;g*=2){var S=p*(1+.2/g);S=Math.min(S,s+100663296);var A=Math;S=Math.max(s,S);e:{A=A.min.call(A,4294901760,S+(65536-S%65536)%65536)-$e.buffer.byteLength+65535>>>16;try{$e.grow(A),me();var M=1;break e}catch{}M=void 0}if(M)return!0}return!1},Q:fe,R:we,J:nr,h:O,m:ie,x:ge,j:mr,a:$e||o.wasmMemory,I:Ra,f:function(s,p,g,S){return Ra(s>>>0,p>>>0,g>>>0,S>>>0)}};(function(){function s(g,S){return g=g.exports,g=Wl(g),Y=g=Kl(g),ue.mb.push(Y.Da),Be.unshift(Y.Y),Se=S,Cr(),g}var p={a:ql};if(Xt(),o.instantiateWasm)try{return o.instantiateWasm(p,s)}catch(g){q("Module.instantiateWasm callback failed with error: "+g),f(g)}return _r(p,function(g){s(g.instance,g.module)}).catch(f),{}})(),o._OrtInit=(s,p)=>(o._OrtInit=Y.Z)(s,p),o._OrtGetLastError=(s,p)=>(o._OrtGetLastError=Y._)(s,p),o._OrtCreateSessionOptions=(s,p,g,S,A,M,U,oe,ee,re)=>(o._OrtCreateSessionOptions=Y.$)(s,p,g,S,A,M,U,oe,ee,re),o._OrtAppendExecutionProvider=(s,p)=>(o._OrtAppendExecutionProvider=Y.aa)(s,p),o._OrtAddFreeDimensionOverride=(s,p,g)=>(o._OrtAddFreeDimensionOverride=Y.ba)(s,p,g),o._OrtAddSessionConfigEntry=(s,p,g)=>(o._OrtAddSessionConfigEntry=Y.ca)(s,p,g),o._OrtReleaseSessionOptions=s=>(o._OrtReleaseSessionOptions=Y.da)(s),o._OrtCreateSession=(s,p,g)=>(o._OrtCreateSession=Y.ea)(s,p,g),o._OrtReleaseSession=s=>(o._OrtReleaseSession=Y.fa)(s),o._OrtGetInputOutputCount=(s,p,g)=>(o._OrtGetInputOutputCount=Y.ga)(s,p,g),o._OrtGetInputName=(s,p)=>(o._OrtGetInputName=Y.ha)(s,p),o._OrtGetOutputName=(s,p)=>(o._OrtGetOutputName=Y.ia)(s,p),o._OrtFree=s=>(o._OrtFree=Y.ja)(s),o._OrtCreateTensor=(s,p,g,S,A,M)=>(o._OrtCreateTensor=Y.ka)(s,p,g,S,A,M),o._OrtGetTensorData=(s,p,g,S,A)=>(o._OrtGetTensorData=Y.la)(s,p,g,S,A),o._OrtReleaseTensor=s=>(o._OrtReleaseTensor=Y.ma)(s),o._OrtCreateRunOptions=(s,p,g,S)=>(o._OrtCreateRunOptions=Y.na)(s,p,g,S),o._OrtAddRunConfigEntry=(s,p,g)=>(o._OrtAddRunConfigEntry=Y.oa)(s,p,g),o._OrtReleaseRunOptions=s=>(o._OrtReleaseRunOptions=Y.pa)(s),o._OrtCreateBinding=s=>(o._OrtCreateBinding=Y.qa)(s),o._OrtBindInput=(s,p,g)=>(o._OrtBindInput=Y.ra)(s,p,g),o._OrtBindOutput=(s,p,g,S)=>(o._OrtBindOutput=Y.sa)(s,p,g,S),o._OrtClearBoundOutputs=s=>(o._OrtClearBoundOutputs=Y.ta)(s),o._OrtReleaseBinding=s=>(o._OrtReleaseBinding=Y.ua)(s),o._OrtRunWithBinding=(s,p,g,S,A)=>(o._OrtRunWithBinding=Y.va)(s,p,g,S,A),o._OrtRun=(s,p,g,S,A,M,U,oe)=>(o._OrtRun=Y.wa)(s,p,g,S,A,M,U,oe),o._OrtEndProfiling=s=>(o._OrtEndProfiling=Y.xa)(s),o._JsepOutput=(s,p,g)=>(o._JsepOutput=Y.ya)(s,p,g),o._JsepGetNodeName=s=>(o._JsepGetNodeName=Y.za)(s);var Vr=o._pthread_self=()=>(Vr=o._pthread_self=Y.Aa)(),An=o._malloc=s=>(An=o._malloc=Y.Ba)(s),za=o._free=s=>(za=o._free=Y.Ca)(s);o.__emscripten_tls_init=()=>(o.__emscripten_tls_init=Y.Da)();var Da=o.__emscripten_thread_init=(s,p,g,S,A,M)=>(Da=o.__emscripten_thread_init=Y.Fa)(s,p,g,S,A,M);o.__emscripten_thread_crashed=()=>(o.__emscripten_thread_crashed=Y.Ga)();var Wa=(s,p,g,S)=>(Wa=Y.Ha)(s,p,g,S),En=s=>(En=Y.Ia)(s),Tn=o.__emscripten_thread_exit=s=>(Tn=o.__emscripten_thread_exit=Y.Ja)(s),Va=o.__emscripten_check_mailbox=()=>(Va=o.__emscripten_check_mailbox=Y.Ka)(),Na=s=>(Na=Y.La)(s),Ua=(s,p)=>(Ua=Y.Ma)(s,p),On=()=>(On=Y.Na)(),Nr=s=>(Nr=Y.Oa)(s),kn=s=>(kn=Y.Pa)(s),Ha=o.dynCall_ii=(s,p)=>(Ha=o.dynCall_ii=Y.Ra)(s,p),La=s=>(La=Y.Sa)(s),Ga=()=>(Ga=Y.Ta)(),Fa=s=>(Fa=Y.Ua)(s),ja=()=>(ja=Y.Va)();o.___start_em_js=1440058,o.___stop_em_js=1440219;function Kl(s){s=Object.assign({},s);var p=S=>()=>S()>>>0,g=S=>A=>S(A)>>>0;return s.__errno_location=p(s.__errno_location),s.pthread_self=p(s.pthread_self),s.malloc=g(s.malloc),s.stackSave=p(s.stackSave),s.stackAlloc=g(s.stackAlloc),s}o.keepRuntimeAlive=ut,o.wasmMemory=$e,o.stackAlloc=kn,o.stackSave=On,o.stackRestore=Nr,o.UTF8ToString=He,o.stringToUTF8=Rr,o.lengthBytesUTF8=Bt,o.ExitStatus=It,o.PThread=ue;var Ur;Rt=function s(){Ur||qa(),Ur||(Rt=s)};function qa(){function s(){if(!Ur&&(Ur=!0,o.calledRun=!0,!Ce)&&(x||vt(Be),c(o),o.onRuntimeInitialized&&o.onRuntimeInitialized(),!x)){if(o.postRun)for(typeof o.postRun=="function"&&(o.postRun=[o.postRun]);o.postRun.length;){var p=o.postRun.shift();Ve.unshift(p)}vt(Ve)}}if(!(0<et))if(x)c(o),x||vt(Be),startWorker(o);else{if(o.preRun)for(typeof o.preRun=="function"&&(o.preRun=[o.preRun]);o.preRun.length;)Qe.unshift(o.preRun.shift());vt(Qe),0<et||(o.setStatus?(o.setStatus("Running..."),setTimeout(function(){setTimeout(function(){o.setStatus("")},1),s()},1)):s())}}if(o.preInit)for(typeof o.preInit=="function"&&(o.preInit=[o.preInit]);0<o.preInit.length;)o.preInit.pop()();return qa(),t.ready}})();typeof Ro=="object"&&typeof Un=="object"?Un.exports=ko:typeof define=="function"&&define.amd&&define([],()=>ko)});var Bo=Yt((Lf,nd)=>{nd.exports='"use strict";var Module={},ENVIRONMENT_IS_NODE=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string";if(ENVIRONMENT_IS_NODE){var nodeWorkerThreads=require("worker_threads"),parentPort=nodeWorkerThreads.parentPort;parentPort.on("message",e=>onmessage({data:e}));var fs=require("fs");Object.assign(global,{self:global,require,Module,location:{href:__filename},Worker:nodeWorkerThreads.Worker,importScripts:e=>(0,eval)(fs.readFileSync(e,"utf8")+"//# sourceURL="+e),postMessage:e=>parentPort.postMessage(e),performance:global.performance||{now:Date.now}})}var initializedJS=!1;function threadPrintErr(){var e=Array.prototype.slice.call(arguments).join(" ");if(ENVIRONMENT_IS_NODE){fs.writeSync(2,e+`\n`);return}console.error(e)}function threadAlert(){var e=Array.prototype.slice.call(arguments).join(" ");postMessage({cmd:"alert",text:e,threadId:Module._pthread_self()})}var err=threadPrintErr;self.alert=threadAlert,Module.instantiateWasm=(e,t)=>{var a=Module.wasmModule;Module.wasmModule=null;var r=new WebAssembly.Instance(a,e);return t(r)},self.onunhandledrejection=e=>{throw e.reason??e};function handleMessage(e){try{if(e.data.cmd==="load"){let a=[];self.onmessage=r=>a.push(r),self.startWorker=r=>{Module=r,postMessage({cmd:"loaded"});for(let s of a)handleMessage(s);self.onmessage=handleMessage},Module.wasmModule=e.data.wasmModule;for(const r of e.data.handlers)Module[r]=(...s)=>{postMessage({cmd:"callHandler",handler:r,args:s})};if(Module.wasmMemory=e.data.wasmMemory,Module.buffer=Module.wasmMemory.buffer,Module.ENVIRONMENT_IS_PTHREAD=!0,typeof e.data.urlOrBlob=="string")importScripts(e.data.urlOrBlob);else{var t=URL.createObjectURL(e.data.urlOrBlob);importScripts(t),URL.revokeObjectURL(t)}ortWasmThreaded(Module)}else if(e.data.cmd==="run"){Module.__emscripten_thread_init(e.data.pthread_ptr,0,0,1),Module.__emscripten_thread_mailbox_await(e.data.pthread_ptr),Module.establishStackSpace(),Module.PThread.receiveObjectTransfer(e.data),Module.PThread.threadInitTLS(),initializedJS||(initializedJS=!0);try{Module.invokeEntryPoint(e.data.start_routine,e.data.arg)}catch(a){if(a!="unwind")throw a}}else e.data.cmd==="cancel"?Module._pthread_self()&&Module.__emscripten_thread_exit(-1):e.data.target==="setimmediate"||(e.data.cmd==="checkMailbox"?initializedJS&&Module.checkMailbox():e.data.cmd&&(err("worker.js received unknown command "+e.data.cmd),err(e.data)))}catch(a){throw Module.__emscripten_thread_crashed&&Module.__emscripten_thread_crashed(),a}}self.onmessage=handleMessage;\n'});var zo,ad,Hn,Ln,Zr,Mo,od,id,sd,Do,Me,Zt=j(()=>{"use strict";zo=_o();ad=Po(),Ln=!1,Zr=!1,Mo=!1,od=()=>{try{return typeof SharedArrayBuffer>"u"?!1:(typeof MessageChannel<"u"&&new MessageChannel().port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11])))}catch{return!1}},id=()=>{try{return WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,30,1,28,0,65,0,253,15,253,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,186,1,26,11]))}catch{return!1}},sd=(e,t)=>e?t?"ort-wasm-simd-threaded.wasm":"ort-wasm-simd.wasm":t?"ort-wasm-threaded.wasm":"ort-wasm.wasm",Do=async e=>{if(Ln)return Promise.resolve();if(Zr)throw new Error("multiple calls to 'initializeWebAssembly()' detected.");if(Mo)throw new Error("previous call to 'initializeWebAssembly()' failed.");Zr=!0;let t=e.initTimeout,r=e.numThreads,a=e.simd,n=r>1&&od(),i=a&&id(),u=e.wasmPaths,l=typeof u=="string"?u:void 0,o=sd(i,n),c=typeof u=="object"?u[o]:void 0,f=!1,y=[];if(t>0&&y.push(new Promise(m=>{setTimeout(()=>{f=!0,m()},t)})),y.push(new Promise((m,w)=>{let b=n?ad:zo,$={locateFile:(I,x)=>{if(n&&I.endsWith(".worker.js")&&typeof Blob<"u")return URL.createObjectURL(new Blob([Bo()],{type:"text/javascript"}));if(I.endsWith(".wasm")){if(c)return c;let _=l??x;return o==="ort-wasm-simd.wasm"?_+"ort-wasm-simd.jsep.wasm":o==="ort-wasm-simd-threaded.wasm"?_+"ort-wasm-simd-threaded.jsep.wasm":_+o}return x+I}};if(n)if(typeof Blob>"u")$.mainScriptUrlOrBlob=(void 0)(__dirname,"ort-wasm-threaded.js");else{let I=`var ortWasmThreaded=${b.toString()};`;$.mainScriptUrlOrBlob=new Blob([I],{type:"text/javascript"})}b($).then(I=>{Zr=!1,Ln=!0,Hn=I,m()},I=>{Zr=!1,Mo=!0,w(I)})})),await Promise.race(y),f)throw new Error(`WebAssembly backend initializing failed due to timeout: ${t}ms`)},Me=()=>{if(Ln&&Hn)return Hn;throw new Error("WebAssembly is not initialized yet.")}});var We,gr,Oe,Qr=j(()=>{"use strict";Zt();We=(e,t)=>{let r=Me(),a=r.lengthBytesUTF8(e)+1,n=r._malloc(a);return r.stringToUTF8(e,n,a),t.push(n),n},gr=(e,t,r,a)=>{if(typeof e=="object"&&e!==null){if(r.has(e))throw new Error("Circular reference in options");r.add(e)}Object.entries(e).forEach(([n,i])=>{let u=t?t+n:n;if(typeof i=="object")gr(i,u+".",r,a);else if(typeof i=="string"||typeof i=="number")a(u,i.toString());else if(typeof i=="boolean")a(u,i?"1":"0");else throw new Error(`Can't handle extra config type: ${typeof i}`)})},Oe=e=>{let t=Me(),r=t.stackSave();try{let a=t.stackAlloc(8);t._OrtGetLastError(a,a+4);let n=t.HEAP32[a/4],i=t.HEAPU32[a/4+1],u=i?t.UTF8ToString(i):"";throw new Error(`${e} ERROR_CODE: ${n}, ERROR_MESSAGE: ${u}`)}finally{t.stackRestore(r)}}});var Wo,Vo=j(()=>{"use strict";Zt();Qr();Wo=e=>{let t=Me(),r=0,a=[],n=e||{};try{if(e?.logSeverityLevel===void 0)n.logSeverityLevel=2;else if(typeof e.logSeverityLevel!="number"||!Number.isInteger(e.logSeverityLevel)||e.logSeverityLevel<0||e.logSeverityLevel>4)throw new Error(`log serverity level is not valid: ${e.logSeverityLevel}`);if(e?.logVerbosityLevel===void 0)n.logVerbosityLevel=0;else if(typeof e.logVerbosityLevel!="number"||!Number.isInteger(e.logVerbosityLevel))throw new Error(`log verbosity level is not valid: ${e.logVerbosityLevel}`);e?.terminate===void 0&&(n.terminate=!1);let i=0;return e?.tag!==void 0&&(i=We(e.tag,a)),r=t._OrtCreateRunOptions(n.logSeverityLevel,n.logVerbosityLevel,!!n.terminate,i),r===0&&Oe("Can't create run options."),e?.extra!==void 0&&gr(e.extra,"",new WeakSet,(u,l)=>{let o=We(u,a),c=We(l,a);t._OrtAddRunConfigEntry(r,o,c)!==0&&Oe(`Can't set a run config entry: ${u} - ${l}.`)}),[r,a]}catch(i){throw r!==0&&t._OrtReleaseRunOptions(r),a.forEach(u=>t._free(u)),i}}});var ud,ld,dd,cd,No,Uo=j(()=>{"use strict";Zt();Qr();ud=e=>{switch(e){case"disabled":return 0;case"basic":return 1;case"extended":return 2;case"all":return 99;default:throw new Error(`unsupported graph optimization level: ${e}`)}},ld=e=>{switch(e){case"sequential":return 0;case"parallel":return 1;default:throw new Error(`unsupported execution mode: ${e}`)}},dd=e=>{e.extra||(e.extra={}),e.extra.session||(e.extra.session={});let t=e.extra.session;t.use_ort_model_bytes_directly||(t.use_ort_model_bytes_directly="1"),e.executionProviders&&e.executionProviders.some(r=>(typeof r=="string"?r:r.name)==="webgpu")&&(e.enableMemPattern=!1)},cd=(e,t,r)=>{for(let a of t){let n=typeof a=="string"?a:a.name;switch(n){case"xnnpack":n="XNNPACK";break;case"webnn":if(n="WEBNN",typeof a!="string"){let u=a;if(u?.deviceType){let l=We("deviceType",r),o=We(u.deviceType,r);Me()._OrtAddSessionConfigEntry(e,l,o)!==0&&Oe(`Can't set a session config entry: 'deviceType' - ${u.deviceType}.`)}if(u?.numThreads){let l=u.numThreads;(typeof l!="number"||!Number.isInteger(l)||l<0)&&(l=0);let o=We("numThreads",r),c=We(l.toString(),r);Me()._OrtAddSessionConfigEntry(e,o,c)!==0&&Oe(`Can't set a session config entry: 'numThreads' - ${u.numThreads}.`)}if(u?.powerPreference){let l=We("powerPreference",r),o=We(u.powerPreference,r);Me()._OrtAddSessionConfigEntry(e,l,o)!==0&&Oe(`Can't set a session config entry: 'powerPreference' - ${u.powerPreference}.`)}}break;case"webgpu":if(n="JS",typeof a!="string"){let u=a;if(u?.preferredLayout){if(u.preferredLayout!=="NCHW"&&u.preferredLayout!=="NHWC")throw new Error(`preferredLayout must be either 'NCHW' or 'NHWC': ${u.preferredLayout}`);let l=We("preferredLayout",r),o=We(u.preferredLayout,r);Me()._OrtAddSessionConfigEntry(e,l,o)!==0&&Oe(`Can't set a session config entry: 'preferredLayout' - ${u.preferredLayout}.`)}}break;case"wasm":case"cpu":continue;default:throw new Error(`not supported execution provider: ${n}`)}let i=We(n,r);Me()._OrtAppendExecutionProvider(e,i)!==0&&Oe(`Can't append execution provider: ${n}.`)}},No=e=>{let t=Me(),r=0,a=[],n=e||{};dd(n);try{let i=ud(n.graphOptimizationLevel??"all"),u=ld(n.executionMode??"sequential"),l=typeof n.logId=="string"?We(n.logId,a):0,o=n.logSeverityLevel??2;if(!Number.isInteger(o)||o<0||o>4)throw new Error(`log serverity level is not valid: ${o}`);let c=n.logVerbosityLevel??0;if(!Number.isInteger(c)||c<0||c>4)throw new Error(`log verbosity level is not valid: ${c}`);let f=typeof n.optimizedModelFilePath=="string"?We(n.optimizedModelFilePath,a):0;if(r=t._OrtCreateSessionOptions(i,!!n.enableCpuMemArena,!!n.enableMemPattern,u,!!n.enableProfiling,0,l,o,c,f),r===0&&Oe("Can't create session options."),n.executionProviders&&cd(r,n.executionProviders,a),n.freeDimensionOverrides)for(let[y,m]of Object.entries(n.freeDimensionOverrides)){if(typeof y!="string")throw new Error(`free dimension override name must be a string: ${y}`);if(typeof m!="number"||!Number.isInteger(m)||m<0)throw new Error(`free dimension override value must be a non-negative integer: ${m}`);let w=We(y,a);t._OrtAddFreeDimensionOverride(r,w,m)!==0&&Oe(`Can't set a free dimension override: ${y} - ${m}.`)}return n.extra!==void 0&&gr(n.extra,"",new WeakSet,(y,m)=>{let w=We(y,a),b=We(m,a);t._OrtAddSessionConfigEntry(r,w,b)!==0&&Oe(`Can't set a session config entry: ${y} - ${m}.`)}),[r,a]}catch(i){throw r!==0&&t._OrtReleaseSessionOptions(r),a.forEach(u=>t._free(u)),i}}});var Gn,yr,br,Xr,wr,Jr,Fn,ze=j(()=>{"use strict";Gn=e=>{switch(e){case"int8":return 3;case"uint8":return 2;case"bool":return 9;case"int16":return 5;case"uint16":return 4;case"int32":return 6;case"uint32":return 12;case"float16":return 10;case"float32":return 1;case"float64":return 11;case"string":return 8;case"int64":return 7;case"uint64":return 13;default:throw new Error(`unsupported data type: ${e}`)}},yr=e=>{switch(e){case 3:return"int8";case 2:return"uint8";case 9:return"bool";case 5:return"int16";case 4:return"uint16";case 6:return"int32";case 12:return"uint32";case 10:return"float16";case 1:return"float32";case 11:return"float64";case 8:return"string";case 7:return"int64";case 13:return"uint64";default:throw new Error(`unsupported data type: ${e}`)}},br=e=>[void 0,4,1,1,2,2,4,8,void 0,1,2,8,4,8,void 0,void 0,void 0][e],Xr=e=>{switch(e){case"float16":return Uint16Array;case"float32":return Float32Array;case"uint8":return Uint8Array;case"int8":return Int8Array;case"uint16":return Uint16Array;case"int16":return Int16Array;case"int32":return Int32Array;case"bool":return Uint8Array;case"float64":return Float64Array;case"uint32":return Uint32Array;case"int64":return BigInt64Array;case"uint64":return BigUint64Array;default:throw new Error(`unsupported type: ${e}`)}},wr=e=>{switch(e){case"verbose":return 0;case"info":return 1;case"warning":return 2;case"error":return 3;case"fatal":return 4;default:throw new Error(`unsupported logging level: ${e}`)}},Jr=e=>e==="float32"||e==="int32"||e==="int64"||e==="bool"||e==="float16"||e==="uint32",Fn=e=>{switch(e){case"none":return 0;case"cpu":return 1;case"cpu-pinned":return 2;case"texture":return 3;case"gpu-buffer":return 4;default:throw new Error(`unsupported data location: ${e}`)}}});var pd,fd,Ho,Lo,Go,md,Pe,Et=j(()=>{"use strict";ze();pd=["V","I","W","E","F"],fd=(e,t)=>{console.log(`[${pd[e]},${new Date().toISOString()}]${t}`)},Go=(e,t)=>{Ho=e,Lo=t},md=(e,t)=>{let r=wr(e),a=wr(Ho);r>=a&&fd(r,typeof t=="function"?t():t)},Pe=(...e)=>{Lo&&md(...e)}});var Fo,jo=j(()=>{"use strict";ze();Fo=(e,t)=>new(Xr(t))(e)});var en=j(()=>{"use strict"});var tn,hd,qo,qn,jn,Yo,Zo=j(()=>{"use strict";Et();en();tn=e=>Math.ceil(e/16)*16,hd=1,qo=()=>hd++,qn=async(e,t,r,a)=>{let n=tn(r),i=e.device.createBuffer({size:n,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ});try{let u=e.getCommandEncoder();e.endComputePass(),u.copyBufferToBuffer(t,0,i,0,n),e.flush(),await i.mapAsync(GPUMapMode.READ);let l=i.getMappedRange();if(a){let o=a();return o.set(new Uint8Array(l,0,r)),o}else return new Uint8Array(l.slice(0,r))}finally{i.destroy()}},jn=class{constructor(t){this.backend=t;this.storageCache=new Map,this.freeBuffers=new Map,this.freeUniformBuffers=new Map,this.buffersForUploadingPending=[],this.buffersPending=[],this.externalBuffers=new Map}upload(t,r){let a=r.buffer,n=r.byteOffset,i=r.byteLength,u=tn(i),l=this.storageCache.get(t);if(!l)throw new Error("gpu data for uploading does not exist");if(l.originalSize!==i)throw new Error(`inconsistent data size. gpu data size=${l.originalSize}, data size=${i}`);let o=this.backend.device.createBuffer({mappedAtCreation:!0,size:u,usage:GPUBufferUsage.MAP_WRITE|GPUBufferUsage.COPY_SRC}),c=o.getMappedRange();new Uint8Array(c).set(new Uint8Array(a,n,i)),o.unmap();let f=this.backend.getCommandEncoder();this.backend.endComputePass(),f.copyBufferToBuffer(o,0,l.gpuData.buffer,0,u),Pe("verbose",()=>`[WebGPU] GpuDataManager.upload(id=${t})`),this.buffersForUploadingPending.push(o)}memcpy(t,r){let a=this.storageCache.get(t);if(!a)throw new Error("source gpu data for memcpy does not exist");let n=this.storageCache.get(r);if(!n)throw new Error("destination gpu data for memcpy does not exist");if(a.originalSize!==n.originalSize)throw new Error("inconsistent source and destination gpu data size");let i=tn(a.originalSize),u=this.backend.getCommandEncoder();this.backend.endComputePass(),u.copyBufferToBuffer(a.gpuData.buffer,0,n.gpuData.buffer,0,i)}registerExternalBuffer(t,r,a){let n;if(a){if(n=this.externalBuffers.get(a),n===void 0)throw new Error("previous buffer is not registered");if(t===a)return Pe("verbose",()=>`[WebGPU] GpuDataManager.registerExternalBuffer(size=${r}) => id=${n}, buffer is the same, skip.`),n;this.externalBuffers.delete(a)}else n=qo();return this.storageCache.set(n,{gpuData:{id:n,type:0,buffer:t},originalSize:r}),this.externalBuffers.set(t,n),Pe("verbose",()=>`[WebGPU] GpuDataManager.registerExternalBuffer(size=${r}) => id=${n}, registered.`),n}unregisterExternalBuffer(t){let r=this.externalBuffers.get(t);r!==void 0&&(this.storageCache.delete(r),this.externalBuffers.delete(t),Pe("verbose",()=>`[WebGPU] GpuDataManager.unregisterExternalBuffer() => id=${r}`))}create(t,r=GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST){let a=tn(t),n,i=(r&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE,u=(r&GPUBufferUsage.UNIFORM)===GPUBufferUsage.UNIFORM;if(i||u){let o=i?this.freeBuffers:this.freeUniformBuffers,c=o.get(a);c||(c=[],o.set(a,c)),c.length>0?n=c.pop():n=this.backend.device.createBuffer({size:a,usage:r})}else n=this.backend.device.createBuffer({size:a,usage:r});let l={id:qo(),type:0,buffer:n};return this.storageCache.set(l.id,{gpuData:l,originalSize:t}),Pe("verbose",()=>`[WebGPU] GpuDataManager.create(size=${t}) => id=${l.id}`),l}get(t){return this.storageCache.get(t)?.gpuData}release(t){let r=this.storageCache.get(t);if(!r)throw new Error("releasing data does not exist");return Pe("verbose",()=>`[WebGPU] GpuDataManager.release(id=${t}), gpuDataId=${r.gpuData.id}`),this.storageCache.delete(t),this.buffersPending.push(r.gpuData.buffer),r.originalSize}async download(t,r){let a=this.storageCache.get(t);if(!a)throw new Error("data does not exist");await qn(this.backend,a.gpuData.buffer,a.originalSize,r)}refreshPendingBuffers(){for(let t of this.buffersForUploadingPending)t.destroy();this.buffersForUploadingPending=[];for(let t of this.buffersPending)(t.usage&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE?this.freeBuffers.get(t.size).push(t):(t.usage&GPUBufferUsage.UNIFORM)===GPUBufferUsage.UNIFORM?this.freeUniformBuffers.get(t.size).push(t):t.destroy();this.buffersPending=[]}dispose(){this.freeBuffers.forEach(t=>{t.forEach(r=>{r.destroy()})}),this.freeUniformBuffers.forEach(t=>{t.forEach(r=>{r.destroy()})}),this.storageCache.forEach(t=>{t.gpuData.buffer.destroy()}),this.storageCache=new Map,this.freeBuffers=new Map,this.freeUniformBuffers=new Map}},Yo=(...e)=>new jn(...e)});var Kn,Q,ke=j(()=>{"use strict";Kn=class{constructor(t){Object.assign(this,t)}get cacheKey(){return this.key||(this.key=Object.getOwnPropertyNames(this).sort().map(t=>`${this[t]}`).join(";")),this.key}},Q=e=>new Kn(e)});var Yn,pt,z,Nt,rn,nn,an,ye=j(()=>{"use strict";Yn=class{static calcMatMulShape(t,r){return t[1]!==r[0]?void 0:[t[0],r[1]]}},pt=class{static calcShape(t,r,a=!1){let n=t.length,i=r.length;if(n===0)return r;if(i===0)return t;let u=Math.max(t.length,r.length),l=new Array(u);if(a){if(n<2||i<2)return;let o=Yn.calcMatMulShape([t[n-2],t[n-1]],[r[i-2],r[i-1]]);if(o===void 0)return;[l[u-2],l[u-1]]=o}for(let o=a?3:1;o<=u;o++){let c=n-o<0?1:t[n-o],f=i-o<0?1:r[i-o];if(c!==f&&c>1&&f>1)return;l[u-o]=Math.max(c,f)}return l}static isValidBroadcast(t,r){let a=t.length,n=r.length;if(a>n)return!1;for(let i=1;i<=a;i++)if(t[a-i]!==1&&t[a-i]!==r[n-i])return!1;return!0}},z=class e{static size(t){return e.getSizeFromDimensionRange(t,0,t.length)}static sizeFromDimension(t,r){if(r<0||r>t.length)throw new Error(`invalid dimension of ${r} for sizeFromDimension as Tensor has ${t.length} dimensions.`);return e.getSizeFromDimensionRange(t,r,t.length)}static sizeToDimension(t,r){if(r<0||r>t.length)throw new Error(`invalid dimension of ${r} for sizeToDimension as Tensor has ${t.length} dimensions.`);return e.getSizeFromDimensionRange(t,0,r)}static getSizeFromDimensionRange(t,r,a){let n=1;for(let i=r;i<a;i++){if(t[i]<0)throw new Error("cannot get valid size from specified dimension range. Most likely the range contains negative values in them.");n*=t[i]}return n}static computeStrides(t){let r=t.length;if(r===0)return[];if(r===1)return[1];let a=new Array(r);a[r-1]=1,a[r-2]=t[r-1];for(let n=r-3;n>=0;--n)a[n]=a[n+1]*t[n+1];return a}static normalizeAxis(t,r){if(t<-r&&t>=r)throw new Error("unsupported axis for this operation.");return t<0?t+r:t}static normalizeAxes(t,r){return t.map(a=>this.normalizeAxis(a,r??t.length))}static sortBasedOnPerm(t,r){return r?r.map(a=>t[a]):t.slice().reverse()}static padShape(t,r){let a=t.length;return t.map((n,i)=>n+r[i]+r[i+a])}static areEqual(t,r){return t.length!==r.length?!1:t.every((a,n)=>a===r[n])}},Nt=class e{static adjustPoolAttributes(t,r,a,n,i,u){if(!t&&a.length!==r.length-2)throw new Error("length of specified kernel shapes should be 2 less than length of input dimensions");if(t)for(let l=0;l<r.length-2;l++)l>=a.length?a.push(r[l+2]):a[l]=r[l+2];for(let l=0;l<a.length;l++)if(l<n.length){if(n[l]<0)throw new Error("strides should be greater than or equal to 1")}else n.push(1);for(let l=0;l<a.length;l++)if(l<i.length){if(i[l]<0)throw new Error("dilations should be greater than or equal to 1")}else i.push(1);for(let l=0;l<a.length*2;l++)if(l<u.length){if(u[l]<0)throw new Error("pad should be greater than or equal to 1")}else u.push(0);for(let l=0;l<a.length;l++){if(a[l]<=0)throw new Error("kernel shapes need to be greater than 0");if(u[l]>=a[l]||u[l+a.length]>=a[l])throw new Error("pads should be smaller than kernel")}}static adjustPadsBasedOnAutoPad(t,r,a,n,i,u,l){if(l){if(i.length!==2*(t.length-2))throw new Error("length of pads should be twice the length of data dimensions");if(r.length!==t.length-2)throw new Error("length of strides should be the length of data dimensions");if(n.length!==t.length-2)throw new Error("length of kernel shapes should be the length of data dimensions");for(let o=0;o<t.length-2;o++)e.adjustPadAndReturnShape(t[o+(u?1:2)],r[o],a[o],n[o],i,o,o+t.length-2,l)}}static computePoolOutputShape(t,r,a,n,i,u,l){if(r.length<=0)throw new Error("input shape must be of size greater than 0");let o=[r[0],r[1]];return e.computeShapeHelper(t,r,o,a,n,i,u,l),o}static computeConvOutputShape(t,r,a,n,i,u,l){if(t.length<=0||r.length<=0)throw new Error("invalid input tensor dims or invalid filter tensor dims");let o=[t[0],r[0]];return e.computeShapeHelper(!1,t,o,a,n,i,u,l),o}static computeShapeHelper(t,r,a,n,i,u,l,o){if(t)for(let c=0;c<r.length-2;c++)a.push(1);else for(let c=0;c<r.length-2;c++)a.push(e.adjustPadAndReturnShape(r[c+2],n[c],i[c],u[c],l,c,c+r.length-2,o))}static adjustPadAndReturnShape(t,r,a,n,i,u,l,o){let c=a*(n-1)+1;if(o&&o!=="NOTSET")switch(o){case"VALID":return i[u]=0,i[l]=0,Math.floor((t-c)/r+1);case"SAME_LOWER":case"SAME_UPPER":if(a!==1)throw new Error("Dilation not supported for SAME_UPPER or SAME_LOWER");{let y=((t+r-1)/r-1)*r+n-t;return i[u]=Math.floor(o==="SAME_LOWER"?(y+1)/2:y/2),i[l]=y-i[u],Math.floor((t+y-n)/r+1)}default:throw new Error("Unsupported AutoPad type")}else return Math.floor((t+i[u]+i[l]-c)/r+1)}},rn=class{static getShapeOfGemmResult(t,r,a,n,i){if(t.length!==2||a.length!==2)throw new Error("shape need to be of size 2");let u,l,o;r?(u=t[1],l=t[0]):(u=t[0],l=t[1]);let c=-1;if(n?(o=a[0],c=1):(o=a[1],c=0),a[c]!==l)throw new Error("dimension mismatch");if(u<=0||o<=0||l<=0)throw new Error("invalid shape specified");if(i&&!pt.isValidBroadcast(i,[u,o]))throw new Error("gemm: invalid bias shape for broadcast");return[u,o,l]}},nn=-34028234663852886e22,an=34028234663852886e22});var gd,Qo,Ee,ne,Xe,Fe,nt,at,Ye,Qn,V,K,Xo,Zn,Jo,Xn,Re,be=j(()=>{"use strict";ze();ye();gd=64,Qo=(e,t)=>{if(t===3)throw new Error("vec3 has same alignment as vec4, use vec4 instead");switch(e){case 10:return t>1?`vec${t}<f16>`:"f16";case 1:return t>1?`vec${t}<f32>`:"f32";case 6:return t>1?`vec${t}<i32>`:"i32";case 12:return t>1?`vec${t}<u32>`:"u32";case 7:if(t>1)throw new Error("currently not supported vecX of uint64 yet");return["vec2<u32>","i32"];case 13:if(t>1)throw new Error("currently not supported vecX of uint64 yet");return["vec2<u32>","u32"];case 9:if(t!==4)throw new Error("bool must be vec4");return["u32","vec4<bool>"];default:throw new Error(`Unknown data type: ${e}`)}},Ee=(e,t=1)=>{let r=Qo(e,t);return typeof r=="string"?r:r[0]},ne=e=>e.length===0?[]:[{type:"uint32",data:e},{type:"uint32",data:z.computeStrides(e)}],Xe=e=>e%4===0?4:e%2===0?2:1,Fe=(e="f32",t,r="0")=>!t||t===1?`${e}(${r})`:`vec${t}<${e}>(${r})`,nt=(e,t,r)=>e==="f32"?r:t===1?`f32(${r})`:`vec${t}f(${r})`,at=(e,t)=>t===4?`(${e}.x + ${e}.y + ${e}.z + ${e}.w)`:t===2?`(${e}.x + ${e}.y)`:t===3?`(${e}.x + ${e}.y + ${e}.z)`:e,Ye=(e,t,r)=>e.startsWith("uniforms.")&&r>4?typeof t=="string"?`${e}[(${t}) / 4][(${t}) % 4]`:`${e}[${Math.floor(t/4)}][${t%4}]`:r>1?`${e}[${t}]`:e,Qn=(e,t,r,a,n)=>{let i=typeof r=="number",u=i?r:r.length,l=[...new Array(u).keys()],o=u<2?"u32":u<=4?`vec${u}<u32>`:`array<u32, ${u}>`,c=Qo(t,n),f=typeof c=="string"?c:c[1],y=typeof c=="string"?c:c[0],m={indices:o,value:f,storage:y,tensor:t},w=G=>typeof G=="string"?G:`${G}u`,b={offsetToIndices:!1,indicesToOffset:!1,broadcastedIndicesToOffset:!1,set:!1,setByIndices:!1,get:!1,getByIndices:!1},$=i?"uniforms.":"",I=`${$}${e}_shape`,x=`${$}${e}_strides`,_="";for(let G=0;G<u-1;G++)_+=`
    let dim${G} = current / ${Ye(x,G,u)};
    let rest${G} = current % ${Ye(x,G,u)};
    indices[${G}] = dim${G};
    current = rest${G};
    `;_+=`indices[${u-1}] = current;`;let R=u<2?"":`
  fn o2i_${e}(offset: u32) -> ${m.indices} {
    var indices: ${m.indices};
    var current = offset;
    ${_}
    return indices;
  }`,E=G=>(b.offsetToIndices=!0,u<2?G:`o2i_${e}(${G})`),D=[];if(u>=2)for(let G=u-1;G>=0;G--)D.push(`${Ye(x,G,u)} * (indices[${G}])`);let P=u<2?"":`
  fn i2o_${e}(indices: ${m.indices}) -> u32 {
    return ${D.join("+")};
  }`,W=G=>(b.indicesToOffset=!0,u<2?G:`i2o_${e}(${G})`),N=(...G)=>u===0?"0u":`${m.indices}(${G.map(w).join(",")})`,F=(G,de)=>u<2?`${G}`:`${Ye(G,de,u)}`,te=(G,de,me)=>u<2?`${G}=${me};`:`${Ye(G,de,u)}=${me};`,B={},q=(G,de)=>{b.broadcastedIndicesToOffset=!0;let me=`${de.name}broadcastedIndicesTo${e}Offset`;if(me in B)return`${me}(${G})`;let Ue=[];for(let Qe=u-1;Qe>=0;Qe--){let Be=de.indicesGet("outputIndices",Qe+de.rank-u);Ue.push(`${F(x,Qe)} * (${Be} % ${F(I,Qe)})`)}return B[me]=`fn ${me}(outputIndices: ${de.type.indices}) -> u32 {
             return ${Ue.length>0?Ue.join("+"):"0u"};
           }`,`${me}(${G})`},pe=(G,de)=>(()=>{if(m.storage===m.value)return`${e}[${G}]=${de};`;if(m.storage==="vec2<u32>"&&m.value==="i32")return`${e}[${G}]=vec2<u32>(u32(${de}), select(0u, 0xFFFFFFFFu, ${de} < 0));`;if(m.storage==="vec2<u32>"&&m.value==="u32")return`${e}[${G}]=vec2<u32>(u32(${de}), 0u);`;if(m.storage==="u32"&&m.value==="vec4<bool>")return`${e}[${G}]=dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(${de}));`;throw new Error(`not supported combination of storage type ${m.storage} and value type ${m.value} yet`)})(),X=G=>(()=>{if(m.storage===m.value)return`${e}[${G}]`;if(m.storage==="vec2<u32>"&&m.value==="i32")return`i32(${e}[${G}].x)`;if(m.storage==="vec2<u32>"&&m.value==="u32")return`u32(${e}[${G}].x)`;if(m.storage==="u32"&&m.value==="vec4<bool>")return`vec4<bool>(bool(${e}[${G}] & 0xFFu), bool(${e}[${G}] & 0xFF00u), bool(${e}[${G}] & 0xFF0000u), bool(${e}[${G}] & 0xFF000000u))`;throw new Error(`not supported combination of storage type ${m.storage} and value type ${m.value} yet`)})(),$e=u<2?"":`
  fn get_${e}ByIndices(indices: ${m.indices}) -> ${f} {
    return ${X(`i2o_${e}(indices)`)};
  }`,Y=u<2?"":(()=>{let G=l.map(me=>`d${me}: u32`).join(", "),de=l.map(me=>`d${me}`).join(", ");return`
  fn get_${e}(${G}) -> ${f} {
    return get_${e}ByIndices(${N(de)});
  }`})(),Se=(...G)=>{if(G.length!==u)throw new Error(`indices length must be ${u}`);let de=G.map(w).join(",");return u===0?X("0u"):u===1?X(de[0]):(b.get=!0,b.getByIndices=!0,b.indicesToOffset=!0,`get_${e}(${de})`)},Ce=G=>u<2?X(G):(b.getByIndices=!0,b.indicesToOffset=!0,`get_${e}ByIndices(${G})`),_e=u<2?"":`
  fn set_${e}ByIndices(indices: ${m.indices}, value: ${f}) {
    ${pe(`i2o_${e}(indices)`,"value")}
  }`,he=u<2?"":(()=>{let G=l.map(me=>`d${me}: u32`).join(", "),de=l.map(me=>`d${me}`).join(", ");return`
  fn set_${e}(${G}, value: ${f}) {
    set_${e}ByIndices(${N(de)}, value);
  }`})();return{impl:()=>{let G=[];return i||(G.push(`const ${I} = ${m.indices}(${r.join(",")});`),G.push(`const ${x} = ${m.indices}(${z.computeStrides(r).join(",")});`)),b.offsetToIndices&&G.push(R),b.indicesToOffset&&G.push(P),b.broadcastedIndicesToOffset&&Object.values(B).forEach(de=>G.push(de)),b.set&&G.push(he),b.setByIndices&&G.push(_e),b.get&&G.push(Y),b.getByIndices&&G.push($e),G.join(`
`)},type:m,offsetToIndices:E,indicesToOffset:W,broadcastedIndicesToOffset:q,indices:N,indicesGet:F,indicesSet:te,set:(...G)=>{if(G.length!==u+1)throw new Error(`indices length must be ${u}`);let de=G[u];if(typeof de!="string")throw new Error("value must be string");let me=G.slice(0,u).map(w).join(",");return u===0?pe("0u",de):u===1?pe(me[0],de):(b.set=!0,b.setByIndices=!0,b.indicesToOffset=!0,`set_${e}(${me}, ${de})`)},setByOffset:pe,setByIndices:(G,de)=>u<2?pe(G,de):(b.setByIndices=!0,b.indicesToOffset=!0,`set_${e}ByIndices(${G}, ${de});`),get:Se,getByOffset:X,getByIndices:Ce,usage:a,name:e,strides:x,shape:I,rank:u}},V=(e,t,r,a=1)=>Qn(e,t,r,"input",a),K=(e,t,r,a=1)=>Qn(e,t,r,"output",a),Xo=(e,t,r,a=1)=>Qn(e,t,r,"internal",a),Zn=class{constructor(t){this.normalizedDispatchGroup=t;this.internalVariables=[];this.variables=[];this.uniforms=[];this.variableIndex=0}guardAgainstOutOfBoundsWorkgroupSizes(t){return`if (global_idx >= ${typeof t=="number"?`${t}u`:t}) { return; }`}mainStart(t=gd){let r=typeof t=="number"?t:t[0],a=typeof t=="number"?1:t[1],n=typeof t=="number"?1:t[2],i=this.normalizedDispatchGroup[1]===1&&this.normalizedDispatchGroup[2]===1,u=i?`@builtin(global_invocation_id) global_id : vec3<u32>,
    @builtin(local_invocation_id) local_id : vec3<u32>`:`@builtin(local_invocation_index) local_index : u32,
    @builtin(workgroup_id) workgroup_id : vec3<u32>,
    @builtin(num_workgroups) num_workgroups : vec3<u32>`,l=i?"let global_idx = global_id.x;":`let global_idx = (workgroup_id.z * num_workgroups[0] * num_workgroups[1] +
          workgroup_id.y * num_workgroups[0] + workgroup_id.x) * ${r*a*n}u + local_index;`;return`@compute @workgroup_size(${r}, ${a}, ${n})
  fn main(${u}) {
    ${l}
  `}appendVariableUniforms(t){t.rank!==0&&(t.shape.startsWith("uniforms.")&&this.uniforms.push({name:t.shape.replace("uniforms.",""),type:"u32",length:t.rank}),t.strides.startsWith("uniforms.")&&this.uniforms.push({name:t.strides.replace("uniforms.",""),type:"u32",length:t.rank}))}declareVariable(t,r){if(t.usage==="internal")throw new Error("cannot use internal variable with declareVariable(). use registerInternalVariables() instead.");this.variables.push(t),this.appendVariableUniforms(t);let a=t.usage==="input"?"read":"read_write",n=t.type.storage;return`@group(0) @binding(${r}) var<storage, ${a}> ${t.name}: array<${n}>;`}declareVariables(...t){return t.map(r=>this.declareVariable(r,this.variableIndex++)).join(`
`)}registerInternalVariable(t){if(t.usage!=="internal")throw new Error("cannot use input or output variable with registerInternalVariable(). use declareVariables() instead.");this.internalVariables.push(t),this.appendVariableUniforms(t)}registerInternalVariables(...t){return t.forEach(r=>this.registerInternalVariable(r)),this}registerUniform(t,r,a=1){return this.uniforms.push({name:t,type:r,length:a}),this}registerUniforms(t){return this.uniforms=this.uniforms.concat(t),this}uniformDeclaration(){if(this.uniforms.length===0)return"";let t=[];for(let{name:r,type:a,length:n}of this.uniforms)if(n&&n>4)t.push(`${r}:array<vec4<${a}>, ${Math.ceil(n/4)}>`);else{let i=n==null||n===1?a:`vec${n}<${a}>`;t.push(`${r}:${i}`)}return`
      struct Uniforms { ${t.join(", ")} };
      @group(0) @binding(${this.variableIndex}) var<uniform> uniforms: Uniforms;`}get additionalImplementations(){return this.uniformDeclaration()+this.variables.map(t=>t.impl()).join(`
`)+this.internalVariables.map(t=>t.impl()).join(`
`)}},Jo=e=>new Zn(e),Xn=(e,t)=>{let r=e.length,a=[];for(let n=0;n<r;n++){let i=r-1-n,u=e[i]||1;(t[t.length-1-n]||1)>1&&u===1&&a.unshift(i)}return a},Re=e=>!0});var yd,ei,bd,wd,ot,ti,ri,Qt=j(()=>{"use strict";ye();ke();be();yd=e=>{if(!e||e.length!==1)throw new Error("Transpose requires 1 input.")},ei=(e,t)=>t&&t.length!==e?[...new Array(e).keys()].reverse():t,bd=(e,t)=>z.sortBasedOnPerm(e,ei(e.length,t)),wd=(e,t,r,a)=>{let n=[];n.push(`fn perm(i: ${a.type.indices}) -> ${r.type.indices} {
    var a: ${r.type.indices};`);for(let i=0;i<t;++i)n.push(r.indicesSet("a",e[i],`i[${i}]`));return n.push("return a;}"),n.join(`
`)},ot=(e,t)=>{let r=e.dataType,a=e.dims.length,n=ei(a,t),i=Re(a),u=bd(e.dims,n),l=i?u.length:u,o=i?a:e.dims,c=K("output",r,l),f=V("a",r,o),y=m=>`
  ${m.registerUniform("output_size","u32").declareVariables(f,c)}

  ${wd(n,a,f,c)}

  ${m.mainStart()}
    ${m.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

    let indices = ${c.offsetToIndices("global_idx")};
    let aIndices = perm(indices);

    ${c.setByOffset("global_idx",f.getByIndices("aIndices"))}
  }`;return{name:"Transpose",shaderCache:{hint:`${t}`,inputDependencies:i?["rank"]:["dims"]},getRunData:m=>{let w=z.size(u);return{outputs:[{dims:u,dataType:m[0].dataType}],dispatchGroup:{x:Math.ceil(w/64)},programUniforms:i?[{type:"uint32",data:w},...ne(m[0].dims),...ne(u)]:[{type:"uint32",data:w}]}},getShaderSource:y}},ti=(e,t)=>{yd(e.inputs),e.compute(ot(e.inputs[0],t.perm))},ri=e=>Q({perm:e.perm})});var vd,$d,Sd,xd,Id,Cd,_d,Ad,Ed,Td,ft,ni,ai,oi,ii,si,ui,li,di,ci,pi,fi=j(()=>{"use strict";ye();be();on();Qt();vd={max:"select(bestValue, candidate, candidate > bestValue)",min:"select(bestValue, candidate, candidate < bestValue)",mean:"bestValue + candidate",sum:"bestValue + candidate",prod:"bestValue * candidate",sumSquare:"bestValue + candidate * candidate",logSumExp:"bestValue + exp(candidate)",l1:"bestValue + abs(candidate)",l2:"bestValue + candidate * candidate",logSum:"bestValue + candidate"},$d={max:"select(bestValue, candidate, candidate > bestValue)",min:"select(bestValue, candidate, candidate < bestValue)",mean:"bestValue + candidate",sum:"bestValue + candidate",prod:"bestValue * candidate",sumSquare:"bestValue + candidate",logSumExp:"bestValue + candidate",l1:"bestValue + candidate",l2:"bestValue + candidate",logSum:"bestValue + candidate"},Sd={max:"_A[offset]",min:"_A[offset]",mean:"0",sum:"0",prod:"1",sumSquare:"0",logSumExp:"0",l1:"0",l2:"0",logSum:"0"},xd={max:"bestValue",min:"bestValue",sum:"bestValue",prod:"bestValue",sumSquare:"bestValue",logSumExp:"log(bestValue)",l1:"bestValue",l2:"sqrt(bestValue)",logSum:"log(bestValue)"},Id=(e,t)=>{let r=[];for(let a=t-e;a<t;++a)r.push(a);return r},Cd=(e,t)=>{let r=[],a=e.length;for(let i=0;i<a;i++)t.indexOf(i)===-1&&r.push(e[i]);let n=t.map(i=>e[i]);return[r,n]},_d=(e,t)=>{let r=e.length+t.length,a=[],n=0;for(let i=0;i<r;i++)t.indexOf(i)===-1?a.push(e[n++]):a.push(1);return a},Ad=(e,t)=>{for(let r=0;r<e.length;++r)if(e[e.length-r-1]!==t-1-r)return!1;return!0},Ed=(e,t)=>{let r=[];if(!Ad(e,t)){for(let a=0;a<t;++a)e.indexOf(a)===-1&&r.push(a);e.forEach(a=>r.push(a))}return r},Td=(e,t,r,a,n,i,u)=>{let l=r[0].dims,o=z.size(i),c=z.size(u),f=V("_A",r[0].dataType,l),y=K("output",n,i),m=32,w=`
          var<workgroup> aBestValues : array<${y.type.storage}, ${m}>;
       `;return{name:e,shaderCache:t,getShaderSource:$=>`
        ${$.registerUniform("reduceSize","u32").declareVariables(f,y)}
        ${w}
        fn DIV_CEIL(a : u32, b : u32) -> u32 {
          return ((a - 1u) / b + 1u);
         }
         ${$.mainStart(m)}
          let local_idx = local_id.x;

          let outputIndex = global_idx / ${m};
          let offset = outputIndex * uniforms.reduceSize;

          var bestValue = ${y.type.storage}(${Sd[a]});
          let Length = uniforms.reduceSize;
          for (var k = local_idx; k < Length; k = k + ${m}) {
           let candidate = ${y.type.storage}(${f.getByOffset("offset + k")});
           bestValue = ${vd[a]};
          }
          aBestValues[local_idx] = bestValue;
          workgroupBarrier();

         var reduceSize = min(Length, ${m}u);
         for (var currentSize = reduceSize / 2u; reduceSize > 1u;
             currentSize = reduceSize / 2u) {
           let interval = DIV_CEIL(reduceSize, 2u);
           if (local_idx < currentSize) {
            let candidate = aBestValues[local_idx + interval];
            bestValue = ${$d[a]};
            aBestValues[local_idx] = bestValue;
           }
           reduceSize = interval;
           workgroupBarrier();
         }

         if (local_idx == 0u) {
          ${y.setByOffset("outputIndex",`${a==="mean"?`bestValue / ${y.type.storage}(uniforms.reduceSize)`:`${xd[a]}`}`)};
         }
        }`,getRunData:()=>({outputs:[{dims:i,dataType:n}],dispatchGroup:{x:o},programUniforms:[{type:"uint32",data:c}]})}},ft=(e,t,r,a)=>{let n=e.inputs.length===1?r:Jn(e.inputs,r),i=n.axes;i.length===0&&!n.noopWithEmptyAxes&&(i=e.inputs[0].dims.map((w,b)=>b));let u=z.normalizeAxes(i,e.inputs[0].dims.length),l=u,o=e.inputs[0],c=Ed(l,e.inputs[0].dims.length);c.length>0&&(o=e.compute(ot(e.inputs[0],c),{inputs:[0],outputs:[-1]})[0],l=Id(l.length,o.dims.length));let[f,y]=Cd(o.dims,l),m=f;n.keepDims&&(m=_d(f,u)),e.compute(Td(t,{hint:n.cacheKey,inputDependencies:["type"]},[o],a,e.inputs[0].dataType,m,y),{inputs:[o]})},ni=(e,t)=>{ft(e,"ReduceMeanShared",t,"mean")},ai=(e,t)=>{ft(e,"ReduceL1Shared",t,"l1")},oi=(e,t)=>{ft(e,"ReduceL2Shared",t,"l2")},ii=(e,t)=>{ft(e,"ReduceLogSumExpShared",t,"logSumExp")},si=(e,t)=>{ft(e,"ReduceMaxShared",t,"max")},ui=(e,t)=>{ft(e,"ReduceMinShared",t,"min")},li=(e,t)=>{ft(e,"ReduceProdShared",t,"prod")},di=(e,t)=>{ft(e,"ReduceSumShared",t,"sum")},ci=(e,t)=>{ft(e,"ReduceSumSquareShared",t,"sumSquare")},pi=(e,t)=>{ft(e,"ReduceLogSumShared",t,"logSum")}});var mt,Od,sn,Jn,ht,kd,Rd,Pd,Bd,Md,zd,Dd,Wd,Vd,Nd,gt,mi,hi,gi,yi,bi,wi,vi,$i,Si,xi,it,on=j(()=>{"use strict";ye();ke();be();fi();mt=e=>{if(!e||e.length===0||e.length>2)throw new Error("Reduce op requires 1 or 2 inputs.");if(e.length===2&&e[1].dims.length!==1)throw new Error("Invalid axes input dims.")},Od=e=>["","",`var value = ${e.getByOffset("inputOffset")};`,""],sn=(e,t,r,a,n,i,u=!1,l=!1)=>{let o=[],c=r[0].dims,f=z.normalizeAxes(n,r[0].dims.length),y=!l&&f.length===0;c.forEach((W,N)=>{y||f.indexOf(N)>=0?u&&o.push(1):o.push(W)});let m=[],w=V("_A",r[0].dataType,c),b=K("output",i,o),$=a(w,b,f),I=`inputOffset = ${w.indicesToOffset("inputIndices")};`,x=`let ${I};`,_=`var ${I};`,R=$[1]===""?"":_,E=($[1]===""?x:I)+`
`+$[2];for(let W=0,N=0;W<r[0].dims.length;W++)y||f.indexOf(W)>=0?(u&&N++,E=`for(var j${W}: u32 = 0; j${W} < ${r[0].dims[W]}; j${W}++) {
                ${$[2].includes("lastIndex")?`let lastIndex = j${W};`:""}
                ${w.indicesSet("inputIndices",W,`j${W}`)}
                ${E}
              }`):(m.push(`${w.indicesSet("inputIndices",W,b.indicesGet("outputIndices",N))};`),N++);let D=z.size(o);return{name:e,shaderCache:t,getShaderSource:W=>`
        ${W.declareVariables(w,b)}

        ${W.mainStart()}
          ${W.guardAgainstOutOfBoundsWorkgroupSizes(D)}
          var inputIndices: ${w.type.indices};
          let outputIndices = ${b.offsetToIndices("global_idx")};

          ${m.join(`
`)}
          ${$[0]}       // init ops for reduce max/min
          ${R}
          ${$[1]}
          ${E}
          ${$[3]}
          ${$.length===4?b.setByOffset("global_idx","value"):$.slice(4).join(`
`)}
        }`,getRunData:()=>({outputs:[{dims:o,dataType:i}],dispatchGroup:{x:Math.ceil(D/64)}})}},Jn=(e,t)=>{let r=[];return e[1].dims[0]>0&&e[1].getBigInt64Array().forEach(a=>r.push(Number(a))),Q({axes:r,keepDims:t.keepDims,noopWithEmptyAxes:t.noopWithEmptyAxes})},ht=(e,t,r,a)=>{let n=e.inputs,i=n.length===1?r:Jn(n,r);e.compute(sn(t,{hint:i.cacheKey},[n[0]],i.noopWithEmptyAxes&&i.axes.length===0?Od:a,i.axes,n[0].dataType,i.keepDims,i.noopWithEmptyAxes),{inputs:[0]})},kd=(e,t)=>{mt(e.inputs),ht(e,"ReduceLogSum",t,(a,n)=>[`var value = ${n.type.storage}(0);`,"",`value += ${a.getByOffset("inputOffset")};`,"value = log(value);"])},Rd=(e,t)=>{mt(e.inputs),ht(e,"ReduceL1",t,(a,n)=>[`var value = ${n.type.storage}(0);`,"",`value += abs(${a.getByOffset("inputOffset")});`,""])},Pd=(e,t)=>{mt(e.inputs),ht(e,"ReduceL2",t,(a,n)=>[`var t = ${n.type.value}(0); var value = ${n.type.value}(0);`,"",`t = ${a.getByOffset("inputOffset")}; value += (t * t);`,"value = sqrt(value);"])},Bd=(e,t)=>{mt(e.inputs),ht(e,"ReduceLogSumExp",t,(a,n)=>[`var value = ${n.type.storage}(0);`,"",`value += exp(${a.getByOffset("inputOffset")});`,"value = log(value);"])},Md=(e,t)=>{mt(e.inputs),ht(e,"ReduceMax",t,(a,n,i)=>{let u=[];for(let l=0;l<a.rank;l++)(i.indexOf(l)>=0||i.length===0)&&u.push(a.indicesSet("inputIndices",l,0));return[`${u.join(`
`)}`,`var value = ${a.getByOffset("inputOffset")};`,`value = max(value, ${a.getByOffset("inputOffset")});`,""]})},zd=(e,t)=>{mt(e.inputs),ht(e,"ReduceMean",t,(a,n,i)=>{let u=1;for(let l=0;l<a.rank;l++)(i.indexOf(l)>=0||i.length===0)&&(u*=e.inputs[0].dims[l]);return["var sum = f32(0);","",`sum += f32(${a.getByOffset("inputOffset")});`,`let value = ${n.type.value}(sum / ${u});`]})},Dd=(e,t)=>{mt(e.inputs),ht(e,"ReduceMin",t,(a,n,i)=>{let u=[];for(let l=0;l<a.rank;l++)(i.indexOf(l)>=0||i.length===0)&&u.push(`inputIndices[${l}] = 0;`);return[`${u.join(`
`)}`,`var value = ${a.getByOffset("inputOffset")};`,`value = min(value, ${a.getByOffset("inputOffset")});`,""]})},Wd=(e,t)=>{mt(e.inputs),ht(e,"ReduceProd",t,(a,n)=>[`var value = ${n.type.storage}(1);`,"",`value *= ${a.getByOffset("inputOffset")};`,""])},Vd=(e,t)=>{mt(e.inputs),ht(e,"ReduceSum",t,(a,n)=>[`var value = ${n.type.storage}(0);`,"",`value += ${a.getByOffset("inputOffset")};`,""])},Nd=(e,t)=>{mt(e.inputs),ht(e,"ReduceSumSquare",t,(a,n)=>[`var t = ${n.type.value}(0); var value = ${n.type.value}(0);`,"",`t = ${a.getByOffset("inputOffset")}; value += t * t;`,""])},gt=(e,t,r)=>{if(t.length===0)return!!r;let a=1,n=1;for(let i=0;i<t.length;i++)t.indexOf(i)===-1?a*=e[i]:n*=e[i];return n<32&&a>1024},mi=(e,t)=>{gt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?zd(e,t):ni(e,t)},hi=(e,t)=>{gt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Rd(e,t):ai(e,t)},gi=(e,t)=>{gt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Pd(e,t):oi(e,t)},yi=(e,t)=>{gt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Bd(e,t):ii(e,t)},bi=(e,t)=>{gt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Md(e,t):si(e,t)},wi=(e,t)=>{gt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Dd(e,t):ui(e,t)},vi=(e,t)=>{gt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Wd(e,t):li(e,t)},$i=(e,t)=>{gt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Vd(e,t):di(e,t)},Si=(e,t)=>{gt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Nd(e,t):ci(e,t)},xi=(e,t)=>{gt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?kd(e,t):pi(e,t)},it=e=>Q(e)});var Ii,Ci,_i,ea,Ai=j(()=>{"use strict";ze();ke();on();Ii=e=>{if(!e||e.length===0||e.length>2)throw new Error("ArgMinMaxOp op requires 1 or 2 inputs.");if(e[0].dataType!==1)throw new Error("Invalid input type.")},Ci=(e,t)=>{Ii(e.inputs);let r=(a,n,i)=>{let u=[];for(let l=0;l<a.rank;l++)(i.indexOf(l)>=0||i.length===0)&&u.push(`inputIndices[${l}] = 0;`);return[`${u.join(`
`)}`,`var value = ${a.getByOffset("inputOffset")};
var bestIndex : i32 = 0;`,`if (${a.getByOffset("inputOffset")} ${t.selectLastIndex>0?"<=":"<"} value) {
         value = ${a.getByOffset("inputOffset")};
         bestIndex = i32(lastIndex);
       }`,"",n.setByOffset("global_idx","bestIndex")]};e.compute(sn("ArgMin",{hint:t.cacheKey},[e.inputs[0]],r,[t.axis],7,t.keepDims),{inputs:[0]})},_i=(e,t)=>{Ii(e.inputs);let r=(a,n,i)=>{let u=[];for(let l=0;l<a.rank;l++)(i.indexOf(l)>=0||i.length===0)&&u.push(`inputIndices[${l}] = 0;`);return[`${u.join(`
`)}`,`var value = ${a.getByOffset("inputOffset")};
var bestIndex : i32 = 0;`,`if (${a.getByOffset("inputOffset")} ${t.selectLastIndex>0?">=":">"} value) {
         value = ${a.getByOffset("inputOffset")};
         bestIndex = i32(lastIndex);
       }`,"",n.setByOffset("global_idx","bestIndex")]};e.compute(sn("argMax",{hint:t.cacheKey},[e.inputs[0]],r,[t.axis],7,t.keepDims),{inputs:[0]})},ea=e=>Q(e)});var Ud,Ei,Hd,Ld,Gd,un,Fd,Ti,ta=j(()=>{"use strict";ke();en();be();Ud=(e,t)=>{let r=e[0],a=e[1],n=e[2],i=e[3],u=e[4],l=e[5];if(u&&l)throw new Error("Attention cannot have both past and relative_position_bias");if(r.dims.length!==3)throw new Error('Input "input" must have 3 dimensions');let o=r.dims[0],c=r.dims[1],f=r.dims[2];if(n.dims.length!==1)throw new Error('Input "bias" is expected to have 1 dimensions');if(a.dims.length!==2)throw new Error('Input "weights" is expected to have 2 dimensions');if(a.dims[0]!==f)throw new Error("Input 1 dimension 0 should have same length as dimension 2 of input 0");if(n.dims[0]!==a.dims[1])throw new Error('Input "bias" dimension 0 should have same length as dimension 1 of input "weights"');let y=n.dims[0]/3,m=y,w=m;if(t.qkvHiddenSizes.length>0){if(t.qkvHiddenSizes.length!==3)throw new Error("qkv_hidden_sizes attribute should have 3 elements");for(let R of t.qkvHiddenSizes)if(R%t.numHeads!==0)throw new Error("qkv_hidden_sizes should be divisible by num_heads");y=t.qkvHiddenSizes[0],m=t.qkvHiddenSizes[1],w=t.qkvHiddenSizes[2]}let b=c;if(y!==m)throw new Error("qkv_hidden_sizes first element should be same as the second");if(n.dims[0]!==y+m+w)throw new Error('Input "bias" dimension 0 should have same length as sum of Q/K/V hidden sizes');let $=0;if(u){if(m!==w)throw new Error('Input "past" expect k_hidden_size == v_hidden_size');if(u.dims.length!==5)throw new Error('Input "past" must have 5 dimensions');if(u.dims[0]!==2)throw new Error('Input "past" first dimension must be 2');if(u.dims[1]!==o)throw new Error('Input "past" second dimension must be batch_size');if(u.dims[2]!==t.numHeads)throw new Error('Input "past" third dimension must be num_heads');if(u.dims[4]!==m/t.numHeads)throw new Error('Input "past" fifth dimension must be k_hidden_size / num_heads');t.pastPresentShareBuffer||($=u.dims[3])}let I=b+$,x=-1,_=0;if(i)throw new Error("Mask not supported");if(u)throw new Error("past is not supported");if(l)throw new Error("relativePositionBias is not supported");return{batchSize:o,sequenceLength:c,pastSequenceLength:$,kvSequenceLength:b,totalSequenceLength:I,maxSequenceLength:x,inputHiddenSize:f,hiddenSize:y,vHiddenSize:w,headSize:Math.floor(y/t.numHeads),vHeadSize:Math.floor(w/t.numHeads),numHeads:t.numHeads,isUnidirectional:!1,pastPresentShareBuffer:!1,maskFilterValue:t.maskFilterValue,maskType:_,scale:t.scale,broadcastResPosBias:!1,passPastInKv:!1,qkvFormat:1}},Ei=e=>Q({...e}),Hd=(e,t,r,a)=>{let n=Xe(a),i=K("x",t.dataType,t.dims,n),u="threadMaxVector";n===2?u="max(threadMaxVector.x, threadMaxVector.y)":n===4&&(u="max(max(threadMaxVector.x, threadMaxVector.y), max(threadMaxVector.z, threadMaxVector.w))");let l=Ee(t.dataType),o=64,c=a/n;c<o?o=1:c/8<64&&(o=Math.ceil(c/8));let f=Math.ceil(a/n/o),y=m=>`
  const dInv: ${l} = 1 / ${a};
  const dComp = ${a/n};
  var<workgroup> wgMax: array<f32, ${o}>;
  var<workgroup> wgSum: array<f32, ${o}>;

  ${m.declareVariables(i)}
  @compute @workgroup_size(${o}, 1, 1)
  fn main(@builtin(workgroup_id) workgroup_id : vec3<u32>,
    @builtin(local_invocation_index) local_index : u32) {
    let localOffset = local_index * ${f};
    let offset: u32 = workgroup_id.x * dComp + localOffset;

    var threadMaxVector = ${Fe("f32",n,"-3.402823e+38f")};
    for (var i: u32 = 0; i < ${f} && i + localOffset < dComp; i++) {
      threadMaxVector = max(${nt(l,n,"x[offset + i]")}, threadMaxVector);
    }
    wgMax[local_index] = ${u};
    workgroupBarrier();

    var maxValue = -3.402823e+38f;
    for (var i = 0u; i < ${o}; i++) {
      maxValue = max(wgMax[i], maxValue);
    }

    var sumVector = ${Fe("f32",n,"0")};
    for (var i: u32 = 0; i < ${f} && i + localOffset < dComp; i++) {
      sumVector += exp(${nt(l,n,"x[offset + i]")} - maxValue);
    }
    wgSum[local_index] = ${at("sumVector",n)};
    workgroupBarrier();

    var sum: f32 = 0;
    for (var i = 0u; i < ${o}; i++) {
      sum += wgSum[i];
    }

    if (sum == 0) {
      for (var i: u32 = 0; i < ${f} && i + localOffset < dComp; i++) {
        x[offset + i] = ${Fe(l,n,"dInv")};
      }
    } else {
      for (var i: u32 = 0; i < ${f} && i + localOffset < dComp; i++) {
        let f32input = ${nt(l,n,"x[offset + i]")};
        x[offset + i] = ${i.type.value}(exp(f32input - maxValue) / sum);
      }
    }
  }`;e.compute({name:"AttentionProbsSoftmax",shaderCache:{hint:`${a}`},getShaderSource:y,getRunData:()=>({outputs:[],dispatchGroup:{x:r}})},{inputs:[t],outputs:[]})},Ld=(e,t,r,a,n,i)=>{let u=[n.batchSize,n.numHeads,n.sequenceLength,n.kvSequenceLength+n.pastSequenceLength],l=i.scale===0?1/Math.sqrt(n.headSize):i.scale,o=Ee(t.dataType),c=Xe(n.headSize),f=V("q",t.dataType,t.dims,c),y=V("key",r.dataType,r.dims,c),m=K("output",t.dataType,u),w=n.headSize/c,b=n.sequenceLength,$=n.totalSequenceLength,I=w,x=12,_={x:Math.ceil(n.totalSequenceLength/x),y:Math.ceil(n.sequenceLength/x),z:n.batchSize*n.numHeads},R=[t,r],E=P=>`
  const M: u32 = ${b}u;
  const N: u32 = ${$}u;
  const K: u32 = ${I}u;
  const alpha: ${o} = ${l};
  const beta: ${o} = 1.0;
  const TILE_SIZE = ${x}u;

  var<workgroup> tileQ: array<${f.type.storage}, ${x*x}>;
  var<workgroup> tileK: array<${f.type.storage}, ${x*x}>;

  ${P.declareVariables(f,y,m)}

  @compute @workgroup_size(${x}, ${x}, 1)
  fn main(@builtin(workgroup_id) workgroup_id : vec3<u32>,
   @builtin(local_invocation_id) local_id : vec3<u32>, @builtin(local_invocation_index) local_index : u32) {
   let global_idx = (workgroup_id.z * ${_.x*_.y}u +
          workgroup_id.y * ${_.x}u + workgroup_id.x) * ${x*x}u + local_index;

    // x holds the N and y holds the M
    let headIdx = workgroup_id.z;
    let m = workgroup_id.y * TILE_SIZE;
    let n = workgroup_id.x * TILE_SIZE;
    let lm = m + local_id.y;
    let ln = n + local_id.x;

    let qOffset = ${n.sequenceLength*w} * headIdx + m * K;
    let kOffset = ${n.kvSequenceLength*w} * headIdx + n * K;

    var value = ${Fe(o,c)};
    for (var w: u32 = 0u; w < K; w += TILE_SIZE) {
      if (m + local_id.y < M && w + local_id.x < K) {
        tileQ[TILE_SIZE * local_id.y + local_id.x] = q[qOffset + local_id.y * K + w + local_id.x];
      }
      if (n + local_id.y < N && w + local_id.x < K) {
        tileK[TILE_SIZE * local_id.y + local_id.x] = key[kOffset + local_id.y * K + w + local_id.x];
      }
      workgroupBarrier();

      for (var k: u32 = 0u; k<TILE_SIZE && w+k < K; k++) {
        value += tileQ[TILE_SIZE * local_id.y + k] * tileK[TILE_SIZE * local_id.x + k];
      }

      workgroupBarrier();
    }

    let headOffset = headIdx * M * N;
    if (lm < M && ln < N) {
      let outputIdx = headOffset + lm * N + ln;
      output[outputIdx] = ${at("value",c)} * alpha;
    }
  }`,D=e.compute({name:"AttentionProbs",shaderCache:{hint:JSON.stringify(n)},getRunData:()=>({outputs:[{dims:u,dataType:t.dataType,gpuDataType:0}],dispatchGroup:_}),getShaderSource:E},{inputs:R,outputs:[-1]})[0];return Hd(e,D,n.batchSize*n.numHeads*n.sequenceLength,n.totalSequenceLength),D},Gd=(e,t,r,a)=>{let n=[a.batchSize,a.sequenceLength,a.vHiddenSize],i=V("probs",t.dataType,t.dims),u=V("v",r.dataType,r.dims),l=K("output",t.dataType,n),o=Ee(t.dataType),c=12,f={x:Math.ceil(a.vHeadSize/c),y:Math.ceil(a.sequenceLength/c),z:a.batchSize*a.numHeads},y=m=>`
  const M: u32 = ${a.sequenceLength}u;
  const N: u32 = ${a.vHeadSize}u;
  const K: u32 = ${a.totalSequenceLength}u;
  const numHeads: u32 = ${a.numHeads}u;
  const TILE_SIZE = ${c}u;

  var<workgroup> tileQ: array<${i.type.storage}, ${c*c}>;
  var<workgroup> tileK: array<${i.type.storage}, ${c*c}>;

  ${m.declareVariables(i,u,l)}

  @compute @workgroup_size(${c}, ${c}, 1)
  fn main(@builtin(workgroup_id) workgroup_id : vec3<u32>,
   @builtin(local_invocation_id) local_id : vec3<u32>, @builtin(local_invocation_index) local_index : u32) {
   let global_idx = (workgroup_id.z * ${f.x*f.y}u +
          workgroup_id.y * ${f.x}u + workgroup_id.x) * ${c*c}u + local_index;

   let headIdx = workgroup_id.z;
   let m = workgroup_id.y * TILE_SIZE + local_id.y;
   let n = workgroup_id.x * TILE_SIZE + local_id.x;

   let offsetA = headIdx * (M * K) + m * K;
   let offsetB = headIdx * (N * K) + n;

   var value = ${o}(0);
   for (var w: u32 = 0u; w < K; w += TILE_SIZE) {
     if (m < M && w + local_id.x < K) {
       tileQ[TILE_SIZE * local_id.y + local_id.x] = probs[offsetA + w + local_id.x];
     }
     if (n < N && w + local_id.y < K) {
       tileK[TILE_SIZE * local_id.y + local_id.x] = v[offsetB + (w + local_id.y) * N];
     }
     workgroupBarrier();
     for (var k: u32 = 0u; k<TILE_SIZE && w+k < K; k++) {
       value += tileQ[TILE_SIZE * local_id.y + k] * tileK[TILE_SIZE * k + local_id.x];
     }
     workgroupBarrier();
   }

   // we need to transpose output from BNSH_v to BSND_v
   let batchIdx = workgroup_id.z / ${a.numHeads};
   let currentBatchHeadNumber = workgroup_id.z % ${a.numHeads};
   let headOffset = (batchIdx * M * ${a.numHeads} + currentBatchHeadNumber) * ${a.vHeadSize};
   if (m < M && n < N) {
     let outputIdx = batchIdx * ${a.sequenceLength*a.vHiddenSize} + m * ${a.vHiddenSize}
       + currentBatchHeadNumber * ${a.vHeadSize} + n;
     output[outputIdx] = value;
   }
  }`;return e.compute({name:"AttentionScore",shaderCache:{hint:JSON.stringify(a)},getRunData:()=>({outputs:[{dims:n,dataType:t.dataType,gpuDataType:0}],dispatchGroup:f}),getShaderSource:y},{inputs:[t,r],outputs:[0]})[0]},un=(e,t,r,a,n,i,u,l,o,c,f)=>{let y=Ld(e,t,r,o,c,f);Gd(e,y,a,c)},Fd=(e,t)=>{let r=[t.batchSize,t.numHeads,t.sequenceLength,t.headSize],a=Ee(e.inputs[0].dataType),n=t.sequenceLength,i=t.inputHiddenSize,u=t.headSize,l=12,o={x:Math.ceil(t.headSize/l),y:Math.ceil(t.sequenceLength/l),z:t.batchSize*t.numHeads},c=()=>`
  const M: u32 = ${n}u;
  const K: u32 = ${i}u;
  const N: u32 = ${u}u;
  const numHeads: u32 = ${t.numHeads};
  const ldb = ${t.hiddenSize+t.hiddenSize+t.vHiddenSize}u;
  const TILE_SIZE = ${l}u;

  var<workgroup> tileInput: array<${a}, ${l*l}>;
  var<workgroup> tileWeightQ: array<${a}, ${l*l}>;
  var<workgroup> tileWeightK: array<${a}, ${l*l}>;
  var<workgroup> tileWeightV: array<${a}, ${l*l}>;

  @group(0) @binding(0) var<storage, read> input: array<${a}>;
  @group(0) @binding(1) var<storage, read> weight: array<${a}>;
  @group(0) @binding(2) var<storage, read> bias: array<${a}>;
  @group(0) @binding(3) var<storage, read_write> outputQ: array<${a}>;
  @group(0) @binding(4) var<storage, read_write> outputK: array<${a}>;
  @group(0) @binding(5) var<storage, read_write> outputV: array<${a}>;

  @compute @workgroup_size(${l}, ${l}, 1)
  fn main(@builtin(workgroup_id) workgroup_id : vec3<u32>,
   @builtin(local_invocation_id) local_id : vec3<u32>, @builtin(local_invocation_index) local_index : u32) {
   let global_idx = (workgroup_id.z * ${o.x*o.y}u +
          workgroup_id.y * ${o.x}u + workgroup_id.x) * ${l*l}u + local_index;

    let batchIndex = workgroup_id.z / ${t.numHeads};
    let headNumber = workgroup_id.z % ${t.numHeads};
    let m = workgroup_id.y * TILE_SIZE + local_id.y;
    let n = workgroup_id.x * TILE_SIZE + local_id.x;

    let inputOffset = batchIndex * (M * K) + m * K;
    let biasOffsetQ = headNumber * ${t.headSize};
    let biasOffsetK = ${t.hiddenSize} + biasOffsetQ;
    let biasOffsetV = ${t.hiddenSize} + biasOffsetK;

    var valueQ = ${a}(0);
    var valueK = ${a}(0);
    var valueV = ${a}(0);
    for (var w: u32 = 0u; w < K; w += TILE_SIZE) {
      if (m < M && w + local_id.x < K) {
        tileInput[TILE_SIZE * local_id.y + local_id.x] = input[inputOffset + w + local_id.x];
      }
      if (n < N && w + local_id.y < K) {
        let offset = n + (w + local_id.y) * ldb;
        tileWeightQ[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetQ + offset];
        tileWeightK[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetK + offset];
        tileWeightV[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetV + offset];
      }
      workgroupBarrier();
      for (var k: u32 = 0u; k<TILE_SIZE && w+k < K; k++) {
        let inputTileOffset = TILE_SIZE * local_id.y + k;
        let weightTileOffset = TILE_SIZE * k + local_id.x;
        valueQ += tileInput[inputTileOffset] * tileWeightQ[weightTileOffset];
        valueK += tileInput[inputTileOffset] * tileWeightK[weightTileOffset];
        valueV += tileInput[inputTileOffset] * tileWeightV[weightTileOffset];
      }

      workgroupBarrier();
    }

    let headOffset = (m * N + n) % ${t.headSize};
    valueQ += bias[headOffset + biasOffsetQ];
    valueK += bias[headOffset + biasOffsetK];
    valueV += bias[headOffset + biasOffsetV];

    let offset = workgroup_id.z * M * N;
    if (m < M && n < N) {
      let outputIdx = offset + m * N + n;
      outputQ[outputIdx] = valueQ;
      outputK[outputIdx] = valueK;
      outputV[outputIdx] = valueV;
    }
  }`,f=[e.inputs[0],e.inputs[1],e.inputs[2]];return e.compute({name:"AttentionPrepare",shaderCache:{hint:JSON.stringify(t)},getRunData:()=>({outputs:[{dims:r,dataType:e.inputs[0].dataType,gpuDataType:0},{dims:r,dataType:e.inputs[0].dataType,gpuDataType:0},{dims:r,dataType:e.inputs[0].dataType,gpuDataType:0}],dispatchGroup:o}),getShaderSource:c},{inputs:f,outputs:[-1,-1,-1]})},Ti=(e,t)=>{let r=Ud(e.inputs,t),[a,n,i]=Fd(e,r);return un(e,a,n,i,e.inputs[4],void 0,void 0,void 0,e.inputs[5],r,t)}});var jd,qd,Kd,Oi,ki=j(()=>{"use strict";ct();ye();ke();be();jd=(e,t)=>{if(!e||e.length!==5)throw new Error("BatchNormalization requires 5 inputs");let r=(a,n,i)=>{let u=n.length;if(u!==a.length)throw new Error(`${i}: num dimensions != ${u}`);n.forEach((l,o)=>{if(l!==a[o])throw new Error(`${i}: dim[${o}] do not match`)})};if(e[0].dims.length>1){let a=t.format==="NHWC"?t.spatial?e[0].dims.slice(-1):e[0].dims.slice(-1).concat(e[0].dims.slice(1,e[0].dims.length-1)):e[0].dims.slice(1,t.spatial?2:void 0);r(e[1].dims,a,"Invalid input scale"),r(e[2].dims,a,"Invalid input B"),r(e[3].dims,a,"Invalid input mean"),r(e[4].dims,a,"Invalid input var")}else r(e[1].dims,[1],"Invalid input scale"),r(e[2].dims,[1],"Invalid input B"),r(e[3].dims,[1],"Invalid input mean"),r(e[4].dims,[1],"Invalid input var")},qd=(e,t)=>{let{epsilon:r,spatial:a,format:n}=t,i=e[0].dims,u=a?Xe(i[i.length-1]):1,l=n==="NHWC"&&i.length>1?u:1,o=z.size(i)/u,c=Re(i.length)&&a,f=c?i.length:i,y=V("x",e[0].dataType,e[0].dims,u),m=V("scale",e[1].dataType,e[1].dims,l),w=V("bias",e[2].dataType,e[2].dims,l),b=V("inputMean",e[3].dataType,e[3].dims,l),$=V("inputVar",e[4].dataType,e[4].dims,l),I=K("y",e[0].dataType,f,u),x=()=>{let R="";if(a)R=`let cOffset = ${i.length===1?"0u":n==="NHWC"?`outputIndices[${i.length-1}] / ${u}`:"outputIndices[1]"};`;else if(n==="NCHW")R=`
            ${I.indicesSet("outputIndices","0","0")}
            let cOffset = ${I.indicesToOffset("outputIndices")};`;else{R=`var cIndices = ${m.type.indices}(0);
                       cIndices[0] = outputIndices[${i.length-1}];`;for(let E=1;E<m.rank;E++)R+=`cIndices[${E}] = outputIndices[${E}];`;R+=`let cOffset = ${m.indicesToOffset("cIndices")};`}return R},_=R=>`
  const epsilon = ${r};
  ${R.registerUniform("outputSize","u32").declareVariables(y,m,w,b,$,I)}
  ${R.mainStart()}
  ${R.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
    var outputIndices = ${I.offsetToIndices(`global_idx * ${u}`)};
    ${x()}
    let scale = ${m.getByOffset("cOffset")};
    let bias = ${w.getByOffset("cOffset")};
    let inputMean = ${b.getByOffset("cOffset")};
    let inputVar = ${$.getByOffset("cOffset")};
    let x = ${y.getByOffset("global_idx")};
    let value = (x - inputMean) / sqrt(inputVar + epsilon) * scale + bias;
    ${I.setByOffset("global_idx","value")}
  }`;return{name:"BatchNormalization",shaderCache:{hint:`${t.epsilon}_${t.format}_${a}_${u}`,inputDependencies:c?["rank","type","type","type","type"]:void 0},getShaderSource:_,getRunData:()=>({outputs:[{dims:e[0].dims,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(o/64)},programUniforms:c?[{type:"uint32",data:o},...ne(i)]:[{type:"uint32",data:o}]})}},Kd=e=>Q(e),Oi=(e,t)=>{let{inputs:r,outputCount:a}=e,n=Kd({...t,outputCount:a});if(Ae.webgpu.validateInputContent&&jd(r,n),t.trainingMode)throw new Error("BatchNormalization trainingMode is not supported yet.");e.compute(qd(r,n))}});var Yd,Zd,Ri,Pi=j(()=>{"use strict";ye();be();Yd=e=>{if(e[0].dims.length!==3)throw new Error("input should have 3 dimensions");if(![320,640,1280].includes(e[0].dims[2]))throw new Error("number of channels should be 320, 640 or 1280");if(e[1].dims.length!==1)throw new Error("bias is expected to have 1 dimensions");if(e[0].dims[2]!==e[1].dims[0])throw new Error("last dimension of input and bias are not the same")},Zd=e=>{let t=e[0].dims,r=e[0].dims[2],a=z.size(t)/4,n=e[0].dataType,i=V("input",n,t,4),u=V("bias",n,[r],4),l=V("residual",n,t,4),o=K("output",n,t,4);return{name:"BiasAdd",getRunData:()=>({outputs:[{dims:t,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(a/64)}}),getShaderSource:f=>`
  const channels = ${r}u / 4;
  ${f.declareVariables(i,u,l,o)}

  ${f.mainStart()}
    ${f.guardAgainstOutOfBoundsWorkgroupSizes(a)}
    let value = ${i.getByOffset("global_idx")}
      + ${u.getByOffset("global_idx % channels")} + ${l.getByOffset("global_idx")};
    ${o.setByOffset("global_idx","value")}
  }`}},Ri=e=>{Yd(e.inputs),e.compute(Zd(e.inputs))}});var Qd,Te,Bi,Mi,zi,Di,Wi,Vi,Ni,Ui,Hi,Xd,Li,Gi,Fi,ji,ln,qi,dn,Ki,Yi,Zi,Qi,Xi,Ji,es,ts,rs,ns,as,os,is,ss,us,ls,ds,ra=j(()=>{"use strict";ze();ye();ke();be();Qd=(e,t,r,a,n,i)=>{let u=Math.ceil(t/4),l="";typeof n=="string"?l=`${n}(a)`:l=n("a");let o=V("inputData",r,[u],4),c=K("outputData",a,[u],4);return`
      ${e.registerUniform("vec_size","u32").declareVariables(o,c)}

  ${i??""}

  ${e.mainStart()}
    ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}

    let a = ${o.getByOffset("global_idx")};
    ${c.setByOffset("global_idx",l)}
  }`},Te=(e,t,r,a,n,i=e.dataType)=>({name:t,shaderCache:{hint:n,inputDependencies:["type"]},getShaderSource:u=>Qd(u,z.size(e.dims),e.dataType,i,r,a),getRunData:u=>({outputs:[{dims:e.dims,dataType:i}],dispatchGroup:{x:Math.ceil(z.size(u[0].dims)/64/4)},programUniforms:[{type:"uint32",data:Math.ceil(z.size(e.dims)/4)}]})}),Bi=e=>{e.compute(Te(e.inputs[0],"Abs","abs"))},Mi=e=>{e.compute(Te(e.inputs[0],"Acos","acos"))},zi=e=>{e.compute(Te(e.inputs[0],"Acosh","acosh"))},Di=e=>{e.compute(Te(e.inputs[0],"Asin","asin"))},Wi=e=>{e.compute(Te(e.inputs[0],"Asinh","asinh"))},Vi=e=>{e.compute(Te(e.inputs[0],"Atan","atan"))},Ni=e=>{e.compute(Te(e.inputs[0],"Atanh","atanh"))},Ui=e=>Q(e),Hi=(e,t)=>{let r;switch(t.to){case 10:r="vec4<f16>";break;case 1:r="vec4<f32>";break;case 12:r="vec4<u32>";break;case 6:r="vec4<i32>";break;case 9:r="vec4<bool>";break;default:throw new RangeError(`not supported type (specified in attribute 'to' from 'Cast' operator): ${t.to}`)}e.compute(Te(e.inputs[0],"Cast",r,void 0,t.cacheKey,t.to))},Xd=e=>{let t=e.length>=2?e[1].getFloat32Array()[0]:nn,r=e.length>=3?e[2].getFloat32Array()[0]:an;return Q({min:t,max:r})},Li=(e,t)=>{let r=e.inputs.length===1?t:Xd(e.inputs),a=Ee(e.inputs[0].dataType);e.compute(Te(e.inputs[0],"Clip",n=>`clamp(${n}, clip_min_, clip_max_)`,`
    const clip_min_: vec4<${a}> = vec4(${a}(${r.min}));
    const clip_max_: vec4<${a}> = vec4(${a}(${r.max}));
`,r.cacheKey),{inputs:[0]})},Gi=e=>{e.compute(Te(e.inputs[0],"Ceil","ceil"))},Fi=e=>{e.compute(Te(e.inputs[0],"Cos","cos"))},ji=e=>{e.compute(Te(e.inputs[0],"Cosh","cosh"))},ln=e=>Q(e),qi=(e,t)=>{e.compute(Te(e.inputs[0],"Elu",r=>`elu_vf32(${r})`,`
  const elu_alpha_: f32 = f32(${t.alpha});

  fn elu_f32(a: f32) -> f32 {
  return select((exp(a) - 1.0) * elu_alpha_, a, a >= 0.0);
  }

  fn elu_vf32(v: vec4<f32>) -> vec4<f32> {
  return vec4(elu_f32(v.x), elu_f32(v.y), elu_f32(v.z), elu_f32(v.w));
  }`,t.cacheKey))},dn=(e,t="f32")=>`
const r0: ${t} = 0.3275911;
const r1: ${t} = 0.254829592;
const r2: ${t} = -0.284496736;
const r3: ${t} = 1.421413741;
const r4: ${t} = -1.453152027;
const r5: ${t} = 1.061405429;

fn erf_vf32(v: ${e}) -> ${e} {
  let absv = abs(v);
  let x = 1.0 / (1.0 + r0 * absv);
  return sign(v) * (1.0 - ((((r5 * x + r4) * x + r3) * x + r2) * x + r1) * x * exp(-absv * absv));
}`,Ki=e=>{let t=Ee(e.inputs[0].dataType);e.compute(Te(e.inputs[0],"Erf",r=>`erf_vf32(${r})`,dn(`vec4<${t}>`,t)))},Yi=e=>{e.compute(Te(e.inputs[0],"Exp","exp"))},Zi=e=>{e.compute(Te(e.inputs[0],"Floor","floor"))},Qi=e=>{let t=Ee(e.inputs[0].dataType);e.compute(Te(e.inputs[0],"Gelu",r=>`0.5 * ${r} * (1.0 + erf_vf32(${r} * 0.7071067811865475))`,dn(`vec4<${t}>`,t)))},Xi=(e,t)=>{e.compute(Te(e.inputs[0],"LeakyRelu",r=>`select(leaky_relu_alpha_ * ${r}, ${r}, ${r} >= vec4<f32>(0.0))`,`const leaky_relu_alpha_: f32 = f32(${t.alpha});`,t.cacheKey))},Ji=e=>{e.compute(Te(e.inputs[0],"Not",t=>`!${t}`))},es=e=>{e.compute(Te(e.inputs[0],"Neg",t=>`-${t}`))},ts=e=>{e.compute(Te(e.inputs[0],"Reciprocal",t=>`1.0/${t}`))},rs=e=>{e.compute(Te(e.inputs[0],"Relu",t=>`select(vec4<f32>(0.0), ${t}, ${t} > vec4<f32>(0.0))`))},ns=e=>{e.compute(Te(e.inputs[0],"Sigmoid",t=>`(1.0 / (1.0 + exp(-${t})))`))},as=e=>{e.compute(Te(e.inputs[0],"Sin","sin"))},os=e=>{e.compute(Te(e.inputs[0],"Sinh","sinh"))},is=e=>{e.compute(Te(e.inputs[0],"Sqrt","sqrt"))},ss=e=>{e.compute(Te(e.inputs[0],"Tan","tan"))},us=e=>{e.compute(Te(e.inputs[0],"Tanh","tanh"))},ls=(e,t)=>(e.compute(Te(e.inputs[0],"ThresholdedRelu",r=>`select(vec4<f32>(0.0), ${r}, ${r} > thresholded_relu_alpha_)`,`const thresholded_relu_alpha_: vec4<f32> = vec4<f32>(${t.alpha});`,t.cacheKey)),0),ds=e=>{e.compute(Te(e.inputs[0],"Log","log"))}});var ec,tc,cs,ps=j(()=>{"use strict";ye();be();ra();ec=e=>{if(e[0].dims.length!==3)throw new Error("input should have 3 dimensions");if(![2560,5120,10240].includes(e[0].dims[2]))throw new Error("hidden state should be 2560, 5120 or 10240");if(e[1].dims.length!==1)throw new Error("bias is expected to have 1 dimensions");if(e[0].dims[2]!==e[1].dims[0])throw new Error("last dimension of input and bias are not the same")},tc=e=>{let t=e[0].dims.slice();t[2]=t[2]/2;let r=V("input",e[0].dataType,e[0].dims,4),a=V("bias",e[0].dataType,[e[0].dims[2]],4),n=K("output",e[0].dataType,t,4),i=z.size(t)/4,u=Ee(e[0].dataType);return{name:"BiasSplitGelu",getRunData:()=>({outputs:[{dims:t,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(i/64)}}),getShaderSource:o=>`
  const M_SQRT2 = sqrt(2.0);
  const halfChannels = ${e[0].dims[2]/4/2}u;

  ${o.declareVariables(r,a,n)}

  ${dn(`vec4<${u}>`,u)}

  ${o.mainStart()}
    ${o.guardAgainstOutOfBoundsWorkgroupSizes(i)}
    let biasIdx = global_idx % halfChannels;
    let batchIndex = global_idx / halfChannels;
    let inputOffset = biasIdx + batchIndex * halfChannels * 2;
    let valueLeft = input[inputOffset] + bias[biasIdx];
    let valueRight = input[inputOffset + halfChannels] + bias[biasIdx + halfChannels];
    let geluRight = valueRight * 0.5 * (erf_vf32(valueRight / M_SQRT2) + 1);

    ${n.setByOffset("global_idx","valueLeft * geluRight")}
  }`}},cs=e=>{ec(e.inputs),e.compute(tc(e.inputs))}});var rc,nc,yt,fs,ms,hs,gs,ys,bs,ws,vs,$s,Ss,xs=j(()=>{"use strict";ze();ye();be();rc=(e,t,r,a,n,i,u,l,o,c,f,y,m)=>{let w,b;typeof l=="string"?w=b=(P,W)=>`${l}((${P}),(${W}))`:typeof l=="function"?w=b=l:(w=l.scalar,b=l.vector);let $=y?t.length:t,I=y?r.length:r,x=y?a.length:a,_=K("outputData",f,x,4),R=V("aData",o,$,4),E=V("bData",c,I,4),D;if(n)if(i){let P=z.size(t)===1,W=z.size(r)===1,N=t.length>0&&t[t.length-1]%4===0,F=r.length>0&&r[r.length-1]%4===0;P||W?D=_.setByOffset("global_idx",b(P?`${R.type.value}(${R.getByOffset("0")}.x)`:R.getByOffset("global_idx"),W?`${E.type.value}(${E.getByOffset("0")}.x)`:E.getByOffset("global_idx"))):D=`
            let outputIndices = ${_.offsetToIndices("global_idx * 4u")};
            let offsetA = ${R.broadcastedIndicesToOffset("outputIndices",_)};
            let offsetB = ${E.broadcastedIndicesToOffset("outputIndices",_)};
            ${_.setByOffset("global_idx",b(u||N?R.getByOffset("offsetA / 4u"):`${R.type.value}(${R.getByOffset("offsetA / 4u")}[offsetA % 4u])`,u||F?E.getByOffset("offsetB / 4u"):`${E.type.value}(${E.getByOffset("offsetB / 4u")}[offsetB % 4u])`))}
          `}else D=_.setByOffset("global_idx",b(R.getByOffset("global_idx"),E.getByOffset("global_idx")));else{if(!i)throw new Error("no necessary to use scalar implementation for element-wise binary op implementation.");let P=(W,N,F="")=>{let te=`aData[indexA${N}][componentA${N}]`,B=`bData[indexB${N}][componentB${N}]`;return`
            let outputIndices${N} = ${_.offsetToIndices(`global_idx * 4u + ${N}u`)};
            let offsetA${N} = ${R.broadcastedIndicesToOffset(`outputIndices${N}`,_)};
            let offsetB${N} = ${E.broadcastedIndicesToOffset(`outputIndices${N}`,_)};
            let indexA${N} = offsetA${N} / 4u;
            let indexB${N} = offsetB${N} / 4u;
            let componentA${N} = offsetA${N} % 4u;
            let componentB${N} = offsetB${N} % 4u;
            ${W}[${N}] = ${F}(${w(te,B)});
          `};f===9?D=`
            var data = vec4<u32>(0);
            ${P("data",0,"u32")}
            ${P("data",1,"u32")}
            ${P("data",2,"u32")}
            ${P("data",3,"u32")}
            outputData[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));`:D=`
            ${P("outputData[global_idx]",0)}
            ${P("outputData[global_idx]",1)}
            ${P("outputData[global_idx]",2)}
            ${P("outputData[global_idx]",3)}
          `}return`
        ${e.registerUniform("vec_size","u32").declareVariables(R,E,_)}

        ${m??""}

        ${e.mainStart()}
        ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}
        ${D}
      }`},nc=(e,t,r,a,n,i,u=r.dataType)=>{let l=!z.areEqual(r.dims,a.dims),o=r.dims,c=z.size(r.dims),f=!1,y=!1,m=[l];if(l){let b=pt.calcShape(r.dims,a.dims,!1);if(!b)throw new Error("Can't perform binary op on the given tensors");o=b,c=z.size(o);let $=z.size(r.dims)===1,I=z.size(a.dims)===1,x=r.dims.length>0&&r.dims[r.dims.length-1]%4===0,_=a.dims.length>0&&a.dims[a.dims.length-1]%4===0;m.push($),m.push(I),m.push(x),m.push(_);let R=1;for(let E=1;E<o.length;E++){let D=r.dims[r.dims.length-E]??1,P=a.dims[a.dims.length-E]??1;if(D===P)R*=D;else break}R%4===0?(y=!0,f=!0):($||I||x||_)&&(f=!0)}else f=!0;m.push(f);let w=Re(r.dims.length)&&Re(a.dims.length)&&Re(o.length);return{name:e,shaderCache:{hint:t+m.map(b=>b.toString()).join("_"),inputDependencies:w?["rank","rank"]:["dims","dims"]},getShaderSource:b=>rc(b,r.dims,a.dims,o,f,l,y,n,r.dataType,a.dataType,u,w,i),getRunData:()=>({outputs:[{dims:o,dataType:u}],dispatchGroup:{x:Math.ceil(c/64/4)},programUniforms:w?[{type:"uint32",data:Math.ceil(z.size(o)/4)},...ne(r.dims),...ne(a.dims),...ne(o)]:[{type:"uint32",data:Math.ceil(z.size(o)/4)}]})}},yt=(e,t,r,a,n,i)=>{e.compute(nc(t,n??"",e.inputs[0],e.inputs[1],r,a,i))},fs=e=>{yt(e,"Add",(t,r)=>`${t}+${r}`)},ms=e=>{yt(e,"Div",(t,r)=>`${t}/${r}`)},hs=e=>{yt(e,"Equal",{scalar:(t,r)=>`u32(${t}==${r})`,vector:(t,r)=>`vec4<u32>(${t}==${r})`},void 0,void 0,9)},gs=e=>{yt(e,"Mul",(t,r)=>`${t}*${r}`)},ys=e=>{let t=V("input",e.inputs[0].dataType,e.inputs[0].dims).type.value;yt(e,"Pow",{scalar:(a,n)=>`pow_custom(${a},${n})`,vector:(a,n)=>`pow_vector_custom(${a},${n})`},`
    fn pow_custom(a : ${t}, b : ${t}) -> ${t} {
      if (b == ${t}(0.0)) {
        return ${t}(1.0);
      } else if (a < ${t}(0.0) && f32(b) != floor(f32(b))) {
        return ${t}(pow(f32(a), f32(b))); // NaN
      }
      return select(sign(a), ${t}(1.0), round(f32(abs(b) % ${t}(2.0))) != 1.0) * ${t}(${t==="i32"?"round":""}(pow(f32(abs(a)), f32(b))));
    }
    fn pow_vector_custom(a : vec4<${t}>, b : vec4<${t}>) -> vec4<${t}> {
      // TODO: implement vectorized pow
      return vec4<${t}>(pow_custom(a.x, b.x), pow_custom(a.y, b.y), pow_custom(a.z, b.z), pow_custom(a.w, b.w));
    }
      `)},bs=e=>{yt(e,"Sub",(t,r)=>`${t}-${r}`)},ws=e=>{yt(e,"Greater",{scalar:(t,r)=>`u32(${t}>${r})`,vector:(t,r)=>`vec4<u32>(${t}>${r})`},void 0,void 0,9)},vs=e=>{yt(e,"Less",{scalar:(t,r)=>`u32(${t}<${r})`,vector:(t,r)=>`vec4<u32>(${t}<${r})`},void 0,void 0,9)},$s=e=>{yt(e,"GreaterOrEqual",{scalar:(t,r)=>`u32(${t}>=${r})`,vector:(t,r)=>`vec4<u32>(${t}>=${r})`},void 0,void 0,9)},Ss=e=>{yt(e,"LessOrEqual",{scalar:(t,r)=>`u32(${t}<=${r})`,vector:(t,r)=>`vec4<u32>(${t}<=${r})`},void 0,void 0,9)}});var oc,ic,sc,uc,Is,Cs,_s=j(()=>{"use strict";ye();ke();be();oc=e=>{if(!e||e.length<1)throw new Error("too few inputs");let t=e[0].dataType,r=e[0].dims.length;for(let a of e){if(a.dataType!==t)throw new Error("input tensors should be one type");if(a.dims.length!==r)throw new Error("input tensors should have the same shape")}},ic=(e,t)=>`
  fn calculateInputIndex(index: u32) -> u32 {
    let sizeInConcatAxis = array<u32, ${e}u>(${t});
    for (var i: u32 = 0u; i < ${e}; i += 1u ) {
      if (index < sizeInConcatAxis[i]) {
        return i;
      }
    }
    return ${e}u;
  }`,sc=(e,t)=>{let r=e.length,a=[];for(let n=0;n<r;++n){let i=t.setByOffset("global_idx",e[n].getByIndices("indices"));r===1?a.push(i):n===0?a.push(`if (inputIndex == ${n}u) { ${i} }`):n===r-1?a.push(`else { ${i} }`):a.push(`else if (inputIndex == ${n}) { ${i} }`)}return a.join(`
`)},uc=(e,t)=>{let r=e[0].dims.slice();if(t>=r.length||t<-1*r.length)throw new Error("axis specified for concat doesn't match input dimensionality");let a=t<0?r.length+t:t,n=r.slice(0);for(let E=1;E<e.length;E++){let D=e[E].dims.slice();for(let P=0;P<r.length;P++)if(P===a)n[a]+=D[P];else if(r[P]!==D[P])throw new Error("non concat dimensions must match")}let i=z.size(n),u=new Array(e.length),l=new Array(e.length),o=e[0].dataType,c=0,f=[],y=[],m=[],w=[{type:"uint32",data:i}];for(let E=0;E<e.length;++E)c+=e[E].dims[a],u[E]=c,m.push(Re(e[E].dims.length)),y.push(m[E]?e[E].dims.length:e[E].dims),l[E]=V(`input${E}`,o,y[E]),f.push(m[E]?"rank":"dims"),w.push({type:"uint32",data:u[E]});for(let E=0;E<e.length;++E)m[E]&&w.push(...ne(e[E].dims));let b=Re(n.length);b&&w.push(...ne(n));let $=b?n.length:n,I=K("output",o,$),x=I.indicesGet("indices",a),_=Array.from(Array(u.length).keys()).map(E=>`uniforms.sizeInConcatAxis${E}`).join(","),R=E=>`

  ${(()=>{E.registerUniform("outputSize","u32");for(let D=0;D<e.length;D++)E.registerUniform(`sizeInConcatAxis${D}`,"u32");return E.declareVariables(...l,I)})()}

  ${ic(u.length,_)}

  ${E.mainStart()}
    ${E.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}

    var indices = ${I.offsetToIndices("global_idx")};

    let inputIndex = calculateInputIndex(${x});
    if (inputIndex != 0u) {
      let sizeInConcatAxis = array<u32, ${u.length}u>(${_});
      ${x} -= sizeInConcatAxis[inputIndex - 1u];
    }

    ${sc(l,I)}
  }`;return{name:"Concat",shaderCache:{hint:`${t}`,inputDependencies:f},getRunData:()=>({outputs:[{dims:n,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(i/64)},programUniforms:w}),getShaderSource:R}},Is=(e,t)=>{oc(e.inputs),e.compute(uc(e.inputs,t.axis))},Cs=e=>Q({axis:e.axis})});var Tt,cn,Ut=j(()=>{"use strict";ye();Tt=(e,t)=>{switch(e.activation){case"Relu":return{activationFunction:"",applyActivation:`value = max(value, ${t}(0.0));`};case"Sigmoid":return{activationFunction:"",applyActivation:`value = (${t}(1.0) / (${t}(1.0) + exp(-value)));`};case"Clip":return{activationFunction:`const clip_min_=${t}(${e.clipMin});const clip_max_=${t}(${e.clipMax});`,applyActivation:"value = clamp(value, clip_min_, clip_max_);"};default:return{activationFunction:"",applyActivation:""}}},cn=e=>{let t=e?.activation||"";if(t==="Clip"){let[r,a]=e?.activation_params||[nn,an];return{activation:t,clipMax:a,clipMin:r,activationCacheKey:`${t}:${r},${a}`}}return{activation:t,activationCacheKey:t}}});var Ne,pn,fn=j(()=>{"use strict";Ne=(e,t)=>{switch(e){case 1:return t;case 2:return`vec2<${t}>`;case 3:return`vec3<${t}>`;case 4:return`vec4<${t}>`;default:throw new Error(`${e}-component is not supported.`)}},pn=e=>`
      ${e?"value = value + getBiasByOutputCoords(coords);":""}
      `});var mn,na=j(()=>{"use strict";mn=e=>`
fn getIndexFromCoords4D(coords : vec4<i32>, shape : vec4<i32>) -> i32 {
  return dot(coords, vec4<i32>(
      shape.y * shape.z * shape.w, shape.z * shape.w, shape.w, 1));
}
fn getOutputIndexFromCoords(coords : vec4<i32>) -> i32 {
  return dot(coords, vec4<i32>(
    i32(${e}.x), i32(${e}.y), i32(${e}.z), 1));
}
`});var lc,dc,vr,As,cc,$r,pc,hn,Sr=j(()=>{"use strict";ye();be();Ut();fn();lc=(e,t)=>e?`
        mm_Asub[inputRow][inputCol] = mm_readA(batch,
          kStart + inputRow,
          globalRowStart / innerElementSize + inputCol${t?", batchIndices":""});
        `:`
        mm_Asub[inputRow][inputCol] = mm_readA(batch,
          globalRow + innerRow,
          kStart / innerElementSize + inputCol${t?", batchIndices":""});
        `,dc=(e,t)=>e?`
        let ACached0 = mm_Asub[k * innerElementSize][localRow];
        let ACached1 = mm_Asub[k * innerElementSize + 1][localRow];
        let ACached2 = mm_Asub[k * innerElementSize + 2][localRow];
        ${t===3?"":"let ACached3 = mm_Asub[k * innerElementSize + 3][localRow];"}
        for (var i = 0; i < rowPerThread; i = i + 1) {
          acc[i] = BCached0 * ACached0[i] + acc[i];
          acc[i] = BCached1 * ACached1[i] + acc[i];
          acc[i] = BCached2 * ACached2[i] + acc[i];
          ${t===3?"":"acc[i] = BCached3 * ACached3[i] + acc[i];"}
        }`:`
        for (var i = 0; i < rowPerThread; i = i + 1) {
          let ACached = mm_Asub[tileRow + i][k];
          acc[i] = BCached0 * ACached.x + acc[i];
          acc[i] = BCached1 * ACached.y + acc[i];
          acc[i] = BCached2 * ACached.z + acc[i];
          ${t===3?"":"acc[i] = BCached3 * ACached.w + acc[i];"}
        }`,vr=(e,t,r="f32",a,n=!1,i=32,u=!1,l=32)=>{let o=t[1]*e[1],c=t[0]*e[0],f=n?o:i,y=n?i:o,m=f/t[0],w=i/t[1];if(!((n&&m===4&&e[1]===4||!n&&(m===3||m===4))&&f%t[0]===0&&i%t[1]===0&&e[0]===4))throw new Error(`If transposeA ${n} is true, innerElementSize ${m} and workPerThread[1] ${e[1]} must be 4.
      Otherwise, innerElementSize ${m} must be 3 or 4.
  tileAWidth ${f} must be divisible by workgroupSize[0]${t[0]}. tileInner ${i} must be divisible by workgroupSize[1] ${t[1]}. colPerThread ${e[0]} must be 4.`);return`
var<workgroup> mm_Asub: array<array<vec${m}<${r}>, ${f/m}>, ${y}>;
var<workgroup> mm_Bsub: array<array<vec4<${r}>, ${c/e[0]}>, ${i}>;

const rowPerThread = ${e[1]};
const colPerThread = ${e[0]};
const innerElementSize = ${m};
const tileInner = ${i};

@compute @workgroup_size(${t[0]}, ${t[1]}, ${t[2]})
fn main(@builtin(local_invocation_id) localId : vec3<u32>,
        @builtin(global_invocation_id) globalId : vec3<u32>,
        @builtin(workgroup_id) workgroupId : vec3<u32>) {
  let localRow = i32(localId.y);
  let tileRow = localRow * rowPerThread;
  let tileCol = i32(localId.x);

  let globalRow =i32(globalId.y) * rowPerThread;
  let globalCol = i32(globalId.x);
  let batch = ${u?"0":"i32(globalId.z)"};
  ${a?`let batchIndices = ${a.offsetToIndices("u32(batch)")};`:""}
  let globalRowStart = i32(workgroupId.y) * ${o};

  let numTiles = ${u?`${Math.ceil(l/i)}`:"(uniforms.dimInner - 1) / tileInner + 1"};
  var kStart = ${u?`i32(globalId.z) * ${l}`:"0"};

  var acc: array<vec4<${r}>, rowPerThread>;

  // Loop over shared dimension.
  let tileRowB = localRow * ${w};
  for (var t = 0; t < numTiles; t = t + 1) {
      // Load one tile of A into local memory.
      for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
          let inputRow = tileRow + innerRow;
          let inputCol = tileCol;
          ${lc(n,a)}
      }

      // Load one tile of B into local memory.
      for (var innerRow = 0; innerRow < ${w}; innerRow = innerRow + 1) {
          let inputRow = tileRowB + innerRow;
          let inputCol = tileCol;
          mm_Bsub[inputRow][inputCol] = mm_readB(batch, kStart + inputRow, globalCol${a?", batchIndices":""});
      }
      kStart = kStart + tileInner;
      workgroupBarrier();

      // Compute acc values for a single thread.
      for (var k = 0; k < tileInner / innerElementSize; k = k + 1) {
          let BCached0 = mm_Bsub[k * innerElementSize][tileCol];
          let BCached1 = mm_Bsub[k * innerElementSize + 1][tileCol];
          let BCached2 = mm_Bsub[k * innerElementSize + 2][tileCol];
          ${m===3?"":"let BCached3 = mm_Bsub[k * innerElementSize + 3][tileCol];"}

          ${dc(n,m)}
      }

      workgroupBarrier();
  }

  for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
      mm_write(batch, globalRow + innerRow, globalCol, acc[innerRow]);
  }
}`},As=(e,t)=>e?`
            mm_Asub[inputRow][inputCol] = mm_readA(batch,
              kStart + inputRow,
              globalRowStart + inputCol${t?", batchIndices":""});
            `:`
            mm_Asub[inputRow][inputCol] = mm_readA(batch,
              globalRowStart + inputRow,
              kStart + inputCol${t?", batchIndices":""});
            `,cc=e=>e?"let ACached = mm_Asub[k][tileRow + innerRow];":"let ACached = mm_Asub[tileRow + innerRow][k];",$r=(e,t,r="f32",a,n=!1,i=32,u=!1,l=32,o=!1)=>{let c=e[1]*t[1],f=e[0]*t[0],y=n?c:i,m=n?i:c;if(!(m%t[1]===0&&y%t[0]===0&&i%t[1]===0))throw new Error(`tileAHight ${m} must be divisible by workgroupSize[1]${t[1]}, tileAWidth ${y} must be divisible by workgroupSize[0]${t[0]}, tileInner ${i} must be divisible by workgroupSize[1]${t[1]}`);let w=m/t[1],b=y/t[0],$=i/t[1],I=o?`
    let localRow = i32(localId.y);
    let localCol = i32(localId.x);
    let globalRowStart = i32(workgroupId.y) * ${c};
    let globalColStart = i32(workgroupId.x) * ${f};

    // Loop over shared dimension.
    for (var t = 0; t < numTiles; t = t + 1) {
      // Load one tile of A into local memory.
      for (var inputRow = localRow; inputRow < ${m}; inputRow = inputRow + ${t[1]}) {
        for (var inputCol = localCol; inputCol < ${y}; inputCol = inputCol + ${t[0]}) {
          ${As(n,a)}
        }
      }
      // Load one tile of B into local memory.
      for (var inputRow = localRow; inputRow < ${i}; inputRow = inputRow + ${t[1]}) {
            for (var inputCol = localCol; inputCol < ${f}; inputCol = inputCol + ${t[0]}) {
          mm_Bsub[inputRow][inputCol] = mm_readB(batch,
            kStart + inputRow,
            globalColStart + inputCol${a?", batchIndices":""});
        }
      }
      kStart = kStart + tileInner;
      workgroupBarrier();

      // Compute acc values for a single thread.
      var BCached : array<${r}, colPerThread>;
      for (var k = 0; k < tileInner; k = k + 1) {
        for (var inner = 0; inner < colPerThread; inner = inner + 1) {
          BCached[inner] = mm_Bsub[k][localCol + inner * ${t[0]}];
        }
        for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
          let ACached = ${n?`mm_Asub[k][localRow + innerRow * ${t[1]}];`:`mm_Asub[localRow + innerRow * ${t[1]}][k];`}
          for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
            acc[innerRow][innerCol] = acc[innerRow][innerCol] +
                ACached * BCached[innerCol];
          }
        }
      }
      workgroupBarrier();
    }
    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
      let gRow = globalRowStart + localRow + innerRow * ${t[1]};
      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
        let gCol = globalColStart + localCol + innerCol * ${t[0]};
        mm_write(batch, gRow, gCol, acc[innerRow][innerCol]);
      }
    }
    `:`
let tileRow = i32(localId.y) * rowPerThread;
let tileCol = i32(localId.x) * colPerThread;

let globalRow = i32(globalId.y) * rowPerThread;
let globalCol = i32(globalId.x) * colPerThread;
let globalRowStart = i32(workgroupId.y) * ${c};

let tileRowA = i32(localId.y) * ${w};
let tileColA = i32(localId.x) * ${b};
let tileRowB = i32(localId.y) * ${$};
// Loop over shared dimension.
for (var t = 0; t < numTiles; t = t + 1) {
  // Load one tile of A into local memory.
  for (var innerRow = 0; innerRow < ${w}; innerRow = innerRow + 1) {
    for (var innerCol = 0; innerCol < ${b}; innerCol = innerCol + 1) {
      let inputRow = tileRowA + innerRow;
      let inputCol = tileColA + innerCol;
      ${As(n,a)}
    }
  }

  // Load one tile of B into local memory.
  for (var innerRow = 0; innerRow < ${$}; innerRow = innerRow + 1) {
    for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
      let inputRow = tileRowB + innerRow;
      let inputCol = tileCol + innerCol;
      mm_Bsub[inputRow][inputCol] = mm_readB(batch,
        kStart + inputRow,
        globalCol + innerCol${a?", batchIndices":""});
    }
  }
  kStart = kStart + tileInner;
  workgroupBarrier();

  // Compute acc values for a single thread.
  var BCached : array<${r}, colPerThread>;
  for (var k = 0; k < tileInner; k = k + 1) {
    for (var inner = 0; inner < colPerThread; inner = inner + 1) {
      BCached[inner] = mm_Bsub[k][tileCol + inner];
    }

    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
      ${cc(n)}
      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
        acc[innerRow][innerCol] = acc[innerRow][innerCol] + ACached * BCached[innerCol];
      }
    }
  }

  workgroupBarrier();
}

for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
  for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
    mm_write(batch, globalRow + innerRow, globalCol + innerCol,
        acc[innerRow][innerCol]);
  }
}
`;return`
  var<workgroup> mm_Asub : array<array<${r}, ${y}>, ${m}>;
  var<workgroup> mm_Bsub : array<array<${r}, ${f}>, ${i}>;
  const rowPerThread = ${e[1]};
  const colPerThread = ${e[0]};
  const tileInner = ${i};

@compute @workgroup_size(${t[0]}, ${t[1]}, ${t[2]})
fn main(@builtin(local_invocation_id) localId : vec3<u32>,
        @builtin(global_invocation_id) globalId : vec3<u32>,
        @builtin(workgroup_id) workgroupId : vec3<u32>) {
    let batch = ${u?"0":"i32(globalId.z)"};
    ${a?`let batchIndices = ${a.offsetToIndices("u32(batch)")};`:""}
    let numTiles = ${u?`${Math.ceil(l/i)}`:"(uniforms.dimInner - 1) / tileInner + 1"};
    var kStart = ${u?`i32(globalId.z) * ${l}`:"0"};

    var acc : array<array<${r}, colPerThread>, rowPerThread>;

    // Without this initialization strange values show up in acc.
    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
        acc[innerRow][innerCol] = 0.0;
      }
    }
    ${I}
  }
`},pc=(e,t,r,a,n,i=!1)=>{let[u,l,o]=n,[c,f,y,m]=a,w=Xn(u,o),b=Xn(l,o),$=Ee(a[0].type.tensor),I=()=>{let R=f.rank,E=c.rank,D=`var aIndices: ${f.type.indices};`;for(let P=R-2-1,W=E-1;P>=0;P--,W--)D+=`
aIndices[${P}] = ${E>1?`batchIndices[${W}]`:"batchIndices"};`;return w.forEach(P=>{D+=`
aIndices[${P}] = 0;`}),D+=`
aIndices[${R-2}] = u32(row);
                   aIndices[${R-1}] = u32(colIn);`,D},x=()=>{let R=y.rank,E=c.rank,D=`var bIndices: ${y.type.indices};`;for(let P=R-2-1,W=E-1;P>=0;P--,W--)D+=`
bIndices[${P}] = ${E>1?`batchIndices[${W}]`:"batchIndices"};`;return b.forEach(P=>{D+=`
bIndices[${P}] = 0;`}),D+=`
bIndices[${R-2}] = u32(row);
                   bIndices[${R-1}] = u32(colIn);`,D};return`
    fn mm_readA(batch: i32, row: i32, colIn: i32, batchIndices: ${c.type.indices}) -> ${Ne(e,$)} {
      var value = ${Ne(e,$)}(0.0);
      let col = colIn * ${e};
      if(row < uniforms.dimAOuter && col < uniforms.dimInner)
      {
        ${I()}
        value = ${f.getByIndices("aIndices")};
      }
      return value;
    }

    fn mm_readB(batch: i32, row: i32, colIn: i32, batchIndices: ${c.type.indices}) -> ${Ne(e,$)} {
      var value = ${Ne(e,$)}(0.0);
      let col = colIn * ${e};
      if(row < uniforms.dimInner && col < uniforms.dimBOuter)
      {
        ${x()}
        value = ${y.getByIndices("bIndices")};
      }
      return value;
    }

    fn mm_write(batch: i32, row: i32, colIn: i32, valueIn: ${Ne(e,$)}) {
      let col = colIn * ${e};
      if (row < uniforms.dimAOuter && col < uniforms.dimBOuter) {
        var value = valueIn;
        let coords = vec3<i32>(batch, row, colIn);
        ${t?`value = value + ${i?"bias[colIn]":`${Ne(e,$)}(bias[row])`};`:""}
        ${r}
        ${m.setByIndices("vec3<u32>(coords)","value")}
      }
    }
    `},hn=(e,t,r,a,n=!1)=>{let i=e[0].dims,u=e[1].dims,l=i.slice(0,-2),o=u.slice(0,-2),c=a?a.slice(0,-2):r.slice(0,-2),f=Re(c.length),y=f?c.length:c,m=Xo("batchDims",e[0].dataType,y,1),w=z.size(c),b=i[i.length-2],$=i[i.length-1],I=u[u.length-1],x=$%4===0&&I%4===0,_=b<=8?[4,1,1]:[4,4,1],R=[8,8,1],E=[Math.ceil(I/R[0]/_[0]),Math.ceil(b/R[1]/_[1]),Math.ceil(w/R[2]/_[2])],D=Ee(e[0].dataType),P=x?4:1,W=[...l,b,$/P],N=Re(W.length),F=N?W.length:W,te=[...o,$,I/P],B=Re(te.length),q=B?te.length:te,pe=[w,b,I/P],X=V("a",e[0].dataType,F,P),$e=V("b",e[1].dataType,q,P),Y=K("result",e[0].dataType,pe.length,P),Se=[X,$e],Ce=[{type:"int32",data:b},{type:"int32",data:I},{type:"int32",data:$}];f&&Ce.push(...ne(c)),N&&Ce.push(...ne(W)),B&&Ce.push(...ne(te));let _e=[];_e.push(N?"rank":"dims"),_e.push(B?"rank":"dims");let he=e.length>2,{activationFunction:st,applyActivation:Ge}=Tt(t,Y.type.value),je=pc(P,he,Ge,[m,X,$e,Y],[l,o,c],n);if(he){let de=n?P:1;Se.push(V("bias",e[2].dataType,e[2].dims.length,de)),Ce.push(...ne(e[2].dims)),_e.push("rank")}Ce.push(...ne(pe));let G=de=>`
  ${de.registerUniform("dimAOuter","i32").registerUniform("dimBOuter","i32").registerUniform("dimInner","i32").registerInternalVariables(m).declareVariables(...Se,Y)}
  ${st}
  ${je}
  ${x?vr(_,R,D,m):$r(_,R,D,m)}
                   `;return{name:"MatMul",shaderCache:{hint:t.activationCacheKey+`${_}${t.activation}${t.clipMax}${t.clipMin}${x}${he}${n}`,inputDependencies:_e},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:E[0],y:E[1],z:E[2]},programUniforms:Ce}),getShaderSource:G}}});var fc,Es,Ts=j(()=>{"use strict";Et();be();Ut();fn();na();Sr();fc=(e,t,r,a,n=!1,i,u=4,l=4,o=4,c="f32")=>{let f=B=>{switch(B){case 1:return"resData = x[xIndex];";case 3:return`resData = vec3<${c}>(x[xIndex], x[xIndex + 1], x[xIndex + 2]);`;case 4:return"resData = x[xIndex / 4];";default:throw new Error(`innerElementSize ${B} is not supported.`)}},y=B=>{switch(B){case 1:return"return w[row * i32(uniforms.w_shape[3]) + colIn];";case 4:return"return w[row * i32(uniforms.w_shape[3]) / 4 + colIn];";default:throw new Error(`innerElementSize ${B} is not supported.`)}},m=e?`
    let coord = vec4<i32>(batch, xRow, xCol, xCh);
    `:`
    let coord = vec4<i32>(batch, xCh, xRow, xCol);
    `,w=e?`
    let coords = vec4<i32>(
      batch,
      row / outWidth,
      row % outWidth,
      col);
    `:`
    let coords = vec4<i32>(
      batch,
      row,
      col / outWidth,
      col % outWidth);
    `,b=e?"i32(uniforms.x_shape[1])":"i32(uniforms.x_shape[2])",$=e?"i32(uniforms.x_shape[2])":"i32(uniforms.x_shape[3])",I=e?"row":"col",x=e?"col":"row",_=`
    let inChannels = i32(uniforms.w_shape[2]);
    let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};
    let outRow = ${I} / outWidth;
    let outCol = ${I} % outWidth;

    let WRow = ${x} / (filterDims[1] * inChannels);
    let WCol = ${x} / inChannels % filterDims[1];
    let xRow = outRow * stride[0] + dilation[0] * WRow - pad[0];
    let xCol = outCol * stride[1] + dilation[1] * WCol - pad[1];
    let xCh = ${x} % inChannels;
    var resData = ${Ne(u,c)}(0.0);
    // The bounds checking is always needed since we use it to pad zero for
    // the 'same' padding type.
    if (xRow >= 0 && xRow < ${b} && xCol >= 0 && xCol < ${$}) {
      ${m}
      let xIndex = getIndexFromCoords4D(coord, vec4<i32>(uniforms.x_shape));
      ${f(u)}
    }
    return resData;`,R=e?t&&a?`
    let col = colIn * ${u};
    ${_}`:`
    let col = colIn * ${u};
    if (row < uniforms.dimAOuter && col < uniforms.dimInner) {
      ${_}
    }
    return ${Ne(u,c)}(0.0);`:a&&r?`
    let col = colIn * ${u};
    ${_}`:`
    let col = colIn * ${u};
    if (row < uniforms.dimInner && col < uniforms.dimBOuter) {
      ${_}
    }
    return ${Ne(u,c)}(0.0);`,E=`${y(l)}`,D=Ne(o,c),P=e?Ne(u,c):Ne(l,c),W=e?Ne(l,c):Ne(u,c),{activationFunction:N,applyActivation:F}=Tt(i,D);return`
    ${N}
    fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${P} {
      ${e?R:E}
    }

    fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${W} {
      ${e?E:R}
    }

    fn mm_write(batch: i32, row : i32, colIn : i32, valueIn : ${D}) {
      let col = colIn * ${o};
      if (row < uniforms.dimAOuter && col < uniforms.dimBOuter)
      {
      var value = valueIn;
      let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};
      ${w}
      ${pn(n)}
      ${F}
      setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);
      }
    }`},Es=(e,t,r,a,n,i,u,l)=>{let o=t.format==="NHWC",c=o?e[0].dims[3]:e[0].dims[1],f=r[0],y=o?r[2]:r[3],m=o?r[1]:r[2],w=o?r[3]:r[1],b=o&&(c%4===0||c%3===0)&&w%4===0,$=o?w:y*m,I=o?y*m:w,x=[8,8,1],_=a<=8?[4,1,1]:[4,4,1],R=[Math.ceil($/x[0]/_[0]),Math.ceil(I/x[1]/_[1]),Math.ceil(f/x[2]/_[2])];Pe("verbose",()=>`[conv2d_mm_webgpu] dispatch = ${R}`);let E=b?o&&c%4!==0?3:4:1,D=x[1]*_[1],P=x[0]*_[0],W=Math.max(x[0]*E,x[1]),N=a%D===0,F=n%P===0,te=i%W===0,B=b?[E,4,4]:[1,1,1],q=Ee(e[0].dataType),pe=b?4:1,X=[{type:"int32",data:a},{type:"int32",data:n},{type:"int32",data:i}],$e=V("x",e[0].dataType,e[0].dims.length,E===3?1:E),Y=V("w",e[1].dataType,e[1].dims.length,pe),Se=[$e,Y];X.push(...ne(e[0].dims)),X.push(...ne(e[1].dims));let Ce=`
      fn setOutputAtIndex(flatIndex : i32, value : ${b?`vec4<${q}>`:q}) {
        result[flatIndex] = ${b?`vec4<${q}>`:q}(value);
      }
      fn setOutputAtCoords(d0 : i32, d1 : i32, d2 : i32, d3 : i32, value : ${b?`vec4<${q}>`:q}) {
        let flatIndex = getOutputIndexFromCoords(vec4<i32>(d0, d1, d2, d3));
        setOutputAtIndex(flatIndex ${b?"/ 4":""}, value);
      }`;if(u){let he=V("bias",e[2].dataType,e[2].dims.length,pe);Se.push(he),X.push(...ne(e[2].dims)),Ce+=`
        fn getBiasByOutputCoords(coords : vec4<i32>) -> ${b?`vec4<${q}>`:q} {
          return bias[coords.${o?"w":"y"}${b?"/ 4":""}];
        }`}let _e=K("result",e[0].dataType,r.length,pe);return X.push(...ne(r)),{name:"Conv2DMatMul",shaderCache:{hint:t.cacheKey},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:R[0],y:R[1],z:R[2]},programUniforms:X}),getShaderSource:he=>`
        ${mn("uniforms.result_strides")}
        //struct Uniforms { xShape : vec4<i32>, wShape : vec4<i32>, outShape : vec4<i32>,
        //  outShapeStrides: vec3<i32>, filterDims : vec2<i32>, pad : vec2<i32>, stride : vec2<i32>,
        //  dilation : vec2<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32 };
        ${he.registerUniform("dimAOuter","i32").registerUniform("dimBOuter","i32").registerUniform("dimInner","i32").declareVariables(...Se,_e)}
        const filterDims : vec2<i32> = vec2<i32>(${t.kernelShape[0]}, ${t.kernelShape[1]});
        const pad : vec2<i32> = vec2<i32>(${t.pads[0]}, ${t.pads[1]});
        const stride : vec2<i32> = vec2<i32>(${t.strides[0]}, ${t.strides[1]});
        const dilation : vec2<i32> = vec2<i32>(${t.dilations[0]}, ${t.dilations[1]});
        ${Ce}
        ${fc(o,N,F,te,u,t,B[0],B[1],B[2],q)}
            ${b?vr(_,x,q,void 0,!o,W):$r(_,x,q,void 0,!o,W,!1,void 0,l)}`}}});var aa,Os=j(()=>{"use strict";ye();be();ia();Ut();aa=(e,t,r)=>{let a=e.length>2,n=a?"value += b[output_channel];":"",i=e[0].dims,u=e[1].dims,l=u[0]/t.group,o=t.format==="NHWC",c=oa(i,u,t.dilations,t.pads,t.strides,o),f=z.size(c),y=K("output",e[0].dataType,c),{activationFunction:m,applyActivation:w}=Tt(t,y.type.value),b=V("x",e[0].dataType,i),$=V("w",e[1].dataType,u),I=[b,$];a&&I.push(V("b",e[2].dataType,e[2].dims));let x=_=>`
  const strides: vec2<u32> = vec2(${t.strides[0]}u, ${t.strides[1]}u);
  const pads: vec2<u32> = vec2(${t.pads[0]}u, ${t.pads[1]}u);

  ${_.declareVariables(...I,y)}

  ${m}

  ${_.mainStart()}
    ${_.guardAgainstOutOfBoundsWorkgroupSizes(f)}

    let outputIndices = ${y.offsetToIndices("global_idx")};
    let batch: u32 = outputIndices[0];
    let output_channel: u32 = outputIndices[${o?3:1}];
    let xRCCorner: vec2<u32> = vec2<u32>(outputIndices[${o?1:2}], outputIndices[${o?2:3}]) * strides - pads;
    let group_id: u32 = output_channel / ${l}u;

    var value: ${y.type.value} = ${y.type.value}(0);
    for (var wInChannel: u32 = 0u; wInChannel < ${u[1]}u; wInChannel++) {
      let input_channel = group_id * ${u[1]}u + wInChannel;
      for (var wHeight: u32 = 0u; wHeight < ${u[2]}u; wHeight++) {
        let xHeight = xRCCorner.x + wHeight * ${t.dilations[0]}u;

        if (xHeight < 0u || xHeight >= ${i[o?1:2]}u) {
          continue;
        }

        for (var wWidth: u32 = 0u; wWidth < ${u[3]}u; wWidth++) {
          let xWidth = xRCCorner.y + wWidth * ${t.dilations[1]}u;
          if (xWidth < 0u || xWidth >= ${i[o?2:3]}u) {
            continue;
          }

          let xVal = ${o?b.get("batch","xHeight","xWidth","input_channel"):b.get("batch","input_channel","xHeight","xWidth")};
          let wVal = ${$.get("output_channel","wInChannel","wHeight","wWidth")};
          value += xVal*wVal;
        }
      }
    }
    ${n}
    ${w}
    ${y.setByOffset("global_idx","value")}
  }`;return{name:"GroupedConv",shaderCache:{hint:t.cacheKey},getRunData:()=>({outputs:[{dims:r?r(c):c,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(f/64)}}),getShaderSource:x}}});var oa,ks,mc,Rs,sa,hc,gc,ua,ia=j(()=>{"use strict";ye();ke();Ts();Sr();Os();Ut();Qt();oa=(e,t,r,a,n,i)=>{let u=e[0],l=e.slice(i?1:2,i?3:4),o=l.length,c=t[0],y=t.slice(2).map((b,$)=>b+(b-1)*(r[$]-1)),w=l.map((b,$)=>b+a[$]+a[$+o]).map((b,$)=>Math.floor((b-y[$]+n[$])/n[$]));return w.splice(0,0,u),w.splice(i?3:1,0,c),w},ks=[2,3,1,0],mc=(e,t)=>{if(!e||e.length!==2&&e.length!==3)throw new Error("Conv requires 2 or 3 inputs");if(e[0].dims.length!==4&&e[0].dims.length!==3)throw new Error("currently only support conv 1D and 2D");if(e[0].dims.length!==e[1].dims.length)throw new Error("filter does not have same dimension as input");let r=e[0].dims[t.format==="NHWC"?e[0].dims.length-1:1],a=e[1].dims[1]*t.group;if(r!==a)throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");if(e.length===3&&(e[2].dims.length!==1||e[1].dims[0]!==e[2].dims[0]))throw new Error("invalid bias");let n=e[0].dims.length-2;if(t.dilations.length!==n)throw new Error(`dilations should be ${n}D`);if(t.strides.length!==n)throw new Error(`strides should be ${n}D`);if(t.pads.length!==n*2)throw new Error(`pads should be ${n*2}D`);if(t.kernelShape.length!==0&&t.kernelShape.length!==e[1].dims.length-2)throw new Error("invalid kernel shape")},Rs=(e,t)=>{let r=e.kernelShape.slice();for(let i=2;i<t[1].dims.length;++i)r[i-2]===0&&(r[i-2]=t[1].dims[i]);let a=e.pads.slice();Nt.adjustPadsBasedOnAutoPad(t[0].dims,e.strides,e.dilations,r,a,e.format==="NHWC",e.autoPad);let n=Object.assign({},e);return Object.assign(n,{kernelShape:r,pads:a,cacheKey:e.cacheKey}),n},sa=e=>{let t=cn(e),r=e.format,a=["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][e.auto_pad],n=e.dilations,i=e.group,u=e.kernel_shape,l=e.pads,o=e.strides,c=e.w_is_const();return Q({autoPad:a,format:r,dilations:n,group:i,kernelShape:u,pads:l,strides:o,wIsConst:c,...t})},hc=(e,t,r)=>{let a=Rs(r,t);if(r.group!==1){e.compute(aa(t,a));return}let n=r.format==="NHWC",i=t.length===3,u=t[0].dims[n?1:2],l=t[0].dims[n?2:3],o=t[0].dims[n?3:1],c=t[1].dims[2],f=t[1].dims[3],y=oa(t[0].dims,t[1].dims,r.dilations,a.pads,r.strides,n),m=y[n?1:2],w=y[n?2:3],b=y[n?3:1],$=n&&c===u&&f===l&&r.pads[0]===0&&r.pads[1]===0;if($||c===1&&f===1&&r.dilations[0]===1&&r.dilations[1]===1&&r.strides[0]===1&&r.strides[1]===1&&r.pads[0]===0&&r.pads[1]===0){let P=y[0],W,N,F,te=[];if(n){let B=e.kernelCustomData.wT??e.compute(ot(t[1],ks),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];if(r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=B),$){let q=u*l*o;W=t[0].reshape([1,P,q]),N=B.reshape([1,q,b]),F=[1,P,b]}else W=t[0].reshape([P,u*l,o]),N=B.reshape([1,o,b]),F=[P,m*w,b];te.push(W),te.push(N)}else W=t[0].reshape([P,o,u*l]),N=t[1].reshape([1,b,o]),F=[P,b,m*w],te.push(N),te.push(W);i&&te.push(t[2]),e.compute(hn(te,a,y,F,n),{inputs:te});return}let I=!0,x=e.kernelCustomData.wT??e.compute(ot(t[1],ks),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=x);let _=[t[0],x];i&&_.push(t[2]);let R=n?m*w:b,E=n?b:m*w,D=c*f*o;e.compute(Es(_,a,y,R,E,D,i,I),{inputs:_})},gc=(e,t)=>{let r=t.format==="NHWC",a=[e.inputs[0].reshape(r?[e.inputs[0].dims[0],1,e.inputs[0].dims[1],e.inputs[0].dims[2]]:[e.inputs[0].dims[0],e.inputs[0].dims[1],1,e.inputs[0].dims[2]]),e.inputs[1].reshape([e.inputs[1].dims[0],e.inputs[1].dims[1],1,e.inputs[1].dims[2]])];e.inputs.length===3&&a.push(e.inputs[2]);let n=[0,t.pads[0],0,t.pads[1]],i=[1].concat(t.strides),u=[1].concat(t.dilations),l=[1].concat(t.kernelShape),o=Rs({...t,pads:n,strides:i,dilations:u,kernelShape:l},a);e.compute(aa(a,o,c=>r?[c[0],c[2],c[3]]:[]))},ua=(e,t)=>{mc(e.inputs,t),e.inputs[0].dims.length===3?gc(e,t):hc(e,e.inputs,t)}});var yc,Ps,Bs=j(()=>{"use strict";Et();be();Ut();fn();na();Sr();yc=(e,t=!1,r,a=4)=>{let n=Ne(a,"f32"),i=_=>{switch(_){case 1:return"return w[getIndexFromCoords4D(coord, vec4<i32>(uniforms.w_shape))];";case 4:return`
            let coord1 = vec4<i32>(coordX, coordY, col + 1, rowInner);
            let coord2 = vec4<i32>(coordX, coordY, col + 2, rowInner);
            let coord3 = vec4<i32>(coordX, coordY, col + 3, rowInner);
            let v0 = w[getIndexFromCoords4D(coord, vec4<i32>(uniforms.w_shape))];
            let v1 = w[getIndexFromCoords4D(coord1, vec4<i32>(uniforms.w_shape))];
            let v2 = w[getIndexFromCoords4D(coord2, vec4<i32>(uniforms.w_shape))];
            let v3 = w[getIndexFromCoords4D(coord3, vec4<i32>(uniforms.w_shape))];
            return vec4<f32>(v0, v1, v2, v3);
            `;default:throw new Error(`innerElementSize ${_} is not supported.`)}},u=e?`
      let coord = vec4<i32>(batch, iXR, iXC, xCh);
      `:`
      let coord = vec4<i32>(batch, xCh, iXR, iXC);
      `,l=e?`
    let coords = vec4<i32>(
      batch,
      row / outWidth,
      row % outWidth,
      col);
    `:`
    let coords = vec4<i32>(
      batch,
      row,
      col / outWidth,
      col % outWidth);
    `,o=e?"outBackprop[1]":"outBackprop[2]",c=e?"outBackprop[2]":"outBackprop[3]",f=e?"row":"col",y=e?"col":"row",m=`
      let inChannels = ${e?"outBackprop[3]":"outBackprop[1]"};
      let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};
      let outRow = ${f} / outWidth;
      let outCol = ${f} % outWidth;

      let WRow = ${y} / (filterDims[1] * inChannels);
      let WCol = ${y} / inChannels % filterDims[1];
      let xR = f32(outRow - pads[0] + dilation[0] * WRow) / f32(strides[0]);
      let xC = f32(outCol - pads[1] + dilation[1] * WCol) / f32(strides[1]);
      if (xR < 0.0 || xR >= f32(${o}) || fract(xR) > 0.0) {
        return ${n}(0.0);
      }
      if (xC < 0.0 || xC >= f32(${c}) || fract(xC) > 0.0) {
        return ${n}(0.0);
      }
      let iXR = i32(xR);
      let iXC = i32(xC);
      let xCh = ${y} % inChannels;
      ${u}
      return x[getIndexFromCoords4D(coord, vec4<i32>(uniforms.x_shape))/${a}];`,w=e?`
      let col = colIn * ${a};
      if (row < uniforms.dimAOuter && col < uniforms.dimInner) {
        ${m}
      }
      return ${n}(0.0);`:`
      let col = colIn * ${a};
      if (row < uniforms.dimInner && col < uniforms.dimBOuter) {
        ${m}
      }
      return ${n}(0.0);`,b=`
      let col = colIn * ${a};
      let inChannels = ${e?"outBackprop[3]":"outBackprop[1]"};
      let coordX = filterDims.x - 1 - row / (filterDims[1] * inChannels);
      let coordY = filterDims.y - 1 - (row / inChannels) % filterDims[1];
      if (${e?"row < uniforms.dimInner && col < uniforms.dimBOuter":"row < uniforms.dimInner && col < uniforms.dimAOuter"}  && coordX >= 0 && coordY >= 0) {
        let rowInner = row % inChannels;
        let coord = vec4<i32>(coordX, coordY, col, rowInner);
        ${i(a)}
      }
      return ${n}(0.0);
      `,{activationFunction:$,applyActivation:I}=Tt(r,n);return`
      ${$}
  fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${n} {
    ${e?w:b}
  }

  fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${n} {
    ${e?b:w}
  }

  fn mm_write(batch: i32, row : i32, colIn : i32, valueInput : ${n}) {
    let col = colIn * ${a};
    if (row < uniforms.dimAOuter && col < uniforms.dimBOuter) {
      var value = valueInput;
      let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};
      ${l}
      ${pn(t)}
      ${I}
      result[getIndexFromCoords4D(coords, vec4<i32>(uniforms.result_shape))/${a}] = value;
    }
  }`},Ps=(e,t,r,a,n,i,u,l)=>{let o=t.format==="NHWC",c=o?e[0].dims[3]:e[0].dims[1],f=r[0],y=o?r[2]:r[3],m=o?r[1]:r[2],w=o?r[3]:r[1],b=o?c%4===0&&w%4===0:y%4===0&&w%4===0,$=o?w:y*m,I=o?y*m:w,x=b?[8,8,1]:[$<=4||I<=4?4:16,$>4&&I<=4?4:16,1],_=b?[4,4,1]:[$<=4?1:4,$>4&&I<=4?1:4,1],R=[Math.ceil($/x[0]/_[0]),Math.ceil(I/x[1]/_[1]),Math.ceil(f/x[2]/_[2])];Pe("verbose",()=>`[conv_backprop_mm_webgpu] dispatch = ${R}`);let E=b?4:1,D=Math.max(x[0]*E,x[1]),P=b?4:1,W=[{type:"int32",data:a},{type:"int32",data:n},{type:"int32",data:i}],N=V("x",e[0].dataType,e[0].dims.length,P),F=V("w",e[1].dataType,e[1].dims.length,1),te=K("result",e[0].dataType,r.length,P),B=[N,F];W.push(...ne(e[0].dims)),W.push(...ne(e[1].dims));let q="";if(u){let pe=V("bias",e[2].dataType,e[2].dims.length,P);B.push(pe),W.push(...ne(e[2].dims)),q+=`
        fn getBiasByOutputCoords(coords : vec4<i32>) -> ${b?"vec4<f32>":"f32"} {
          return bias[coords.${o?"w":"y"}${b?"/ 4":""}];
        }`}return W.push(...ne(r)),{name:"Conv2DTransposeMatMul",shaderCache:{hint:t.cacheKey},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:R[0],y:R[1],z:R[2]},programUniforms:W}),getShaderSource:pe=>`
        ${mn("uniforms.result_strides")}
        ${pe.registerUniform("dimAOuter","i32").registerUniform("dimBOuter","i32").registerUniform("dimInner","i32").declareVariables(...B,te)};
        const outBackprop : vec4<i32> = vec4<i32>(${e[0].dims.join(",")});
        const filterDims : vec2<i32> = vec2<i32>(${t.kernelShape[o?1:2]}, ${t.kernelShape[o?2:3]});
        const effectiveFilterDims : vec2<i32> = filterDims + vec2<i32>(
              ${t.dilations[0]<=1?0:(t.kernelShape[o?1:2]-1)*(t.dilations[0]-1)},
              ${t.dilations[1]<=1?0:(t.kernelShape[o?2:3]-1)*(t.dilations[1]-1)});
        const pads : vec2<i32> = vec2<i32>(i32(effectiveFilterDims[0]) - 1 - (${t.pads[0]+t.pads[2]})/2,
                                         i32(effectiveFilterDims[1]) - 1 - (${t.pads[1]+t.pads[3]})/2);
        const strides : vec2<i32> = vec2<i32>(${t.strides[0]}, ${t.strides[1]});
        const dilation : vec2<i32> = vec2<i32>(${t.dilations[0]}, ${t.dilations[1]});
        const dimAOuter : i32 = ${a};
        const dimBOuter : i32 = ${n};
        const dimInner : i32 = ${i};
        ${q}
        ${yc(o,u,t,E)}
        ${b?vr(_,x,"f32",void 0,!o,D):$r(_,x,"f32",void 0,!o,D,!1,void 0,l)}`}}});var bc,la,Ms=j(()=>{"use strict";Et();ye();be();bc=(e,t,r,a,n,i,u=!1,l)=>{let o=r.format==="NHWC",c=o?1:2,f=o?2:3,y=o?3:1,m=z.size(a),w=u?2:1,b=r.group,$=t[1].dims,I=$[0]/b,x=$[1],_=`
  fn setOutputAtIndex(flatIndex : u32, value : ${u?`vec4<${l}>`:l}) {
    result[flatIndex] = ${u?`vec4<${l}>`:l}(value);
  }`;n&&(_+=`
    fn getBiasByOutputCoords(coords : vec4<u32>) -> ${u?`vec4<${l}>`:l} {
      return bias[coords.${o?"w":"y"}${u?"/ 4":""}];
    }`);let R=u?4:1,E=V("W",t[1].dataType,t[1].dims,R),D=V("Dy",t[0].dataType,t[0].dims,R),P=[D,E];n&&P.push(V("bias",t[2].dataType,[a[y]],R));let W=K("result",t[0].dataType,a,R),N=`{
        let batch: u32 = ${i?"global_id.z":"workgroup_id.z"} / outShape[1];
        let r = ${i?"global_id.z":"workgroup_id.z"} % outShape[1];
        let c = ${i?"global_id.y":"workgroup_id.y"} * ${w};
        let d1: u32 = ${i?"global_id.x":"workgroup_id.x"} * 4;

        let dyCorner = vec2<i32>(i32(r), i32(c)) - vec2<i32>(pads);

        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
        // ? = to be determined. : = across all values in that axis.
        var dotProd: array<vec4<${l}>, ${w}>;
        for (var i = 0; i < ${w}; i++) {
          dotProd[i] = vec4<${l}>(0.0);
        }
        for (var wR: u32 = 0; wR < filterDims[0]; wR = wR + 1) {
          var dyR = (${l}(dyCorner.x) + ${l}(wR)) / ${l}(strides.x);
          let wRPerm = filterDims[0] - 1 - wR;
          if (dyR < 0.0 || dyR >= ${l}(outBackprop[1]) ||
              fract(dyR) > 0.0 || wRPerm < 0) {
            continue;
          }
          let idyR: u32 = u32(dyR);

          for (var wC: u32 = 0; wC < filterDims[1]; wC = wC + 1) {
            let dyC = (${l}(dyCorner.y) + ${l}(wC)) / ${l}(strides.y);
            let dyC2 = (${l}(dyCorner.y) + 1.0 + ${l}(wC)) / ${l}(strides.y);
            let wCPerm = filterDims[1] - 1 - wC;
            if (wCPerm < 0) {
              continue;
            }
            var bDyCVal = true;
            var bDyCVal2 = true;
            if (dyC < 0.0 || dyC >= ${l}(outBackprop[2]) ||
                fract(dyC) > 0.0) {
              bDyCVal = false;
            }
            if (dyC2 < 0.0 || dyC2 >= ${l}(outBackprop[2]) ||
                fract(dyC2) > 0.0) {
              bDyCVal2 = false;
            }

            let idyC: u32 = u32(dyC);
            let idyC2: u32 = u32(dyC2);
            if (bDyCVal && bDyCVal2) {
              let d2Length = outBackprop[3];
              for (var d2 :u32 = 0; d2 < d2Length; d2 = d2 + 4) {
                let wValue0 = ${E.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};
                let wValue1 = ${E.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};
                let wValue2 = ${E.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};
                let wValue3 = ${E.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};

                var xValue = ${D.get("batch","idyR","idyC","d2")};
                let tmpval = vec4<${l}>(dot(xValue, wValue0),
                                      dot(xValue, wValue1),
                                      dot(xValue, wValue2),
                                      dot(xValue, wValue3));
                dotProd[0] = dotProd[0] + tmpval;

                xValue =  ${D.get("batch","idyR","idyC2","d2")};

                dotProd[1] = dotProd[1] + vec4<${l}>(dot(xValue, wValue0),
                                                    dot(xValue, wValue1),
                                                    dot(xValue, wValue2),
                                                    dot(xValue, wValue3));
              }
            } else if (bDyCVal) {
              let d2Length = outBackprop[${y}];
              for (var d2: u32 = 0; d2 < d2Length; d2 = d2 + 4) {
                let wValue0 = ${E.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};
                let wValue1 = ${E.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};
                let wValue2 = ${E.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};
                let wValue3 = ${E.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};

                var xValue = ${D.get("batch","idyR","idyC","d2")};
                let tmpval = vec4<${l}>(dot(xValue, wValue0),
                                      dot(xValue, wValue1),
                                      dot(xValue, wValue2),
                                      dot(xValue, wValue3));
                dotProd[0] = dotProd[0] + tmpval;
              }
            } else if (bDyCVal2) {
              let d2Length = outBackprop[3];
              for (var d2: u32 = 0; d2 < d2Length; d2 = d2 + 4) {
                let wValue0 = ${E.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};
                let wValue1 = ${E.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};
                let wValue2 = ${E.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};
                let wValue3 = ${E.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};

                var xValue = ${D.get("batch","idyR","idyC2","d2")};
                let tmpval = vec4<${l}>(dot(xValue, wValue0),
                                      dot(xValue, wValue1),
                                      dot(xValue, wValue2),
                                      dot(xValue, wValue3));
                dotProd[1] = dotProd[1] + tmpval;
              }
            }
          }
        }

        for (var i: u32 = 0; i < ${w}; i = i + 1) {
          let value = dotProd[i] + ${n?"bias[c+i]":"0.0"};
          ${W.set("batch","r","c + i","d1","value")};
        }
      }`,F=`
          let outputIndices = ${W.offsetToIndices("global_idx")};
          let batch = ${W.indicesGet("outputIndices",0)};
          let d1 = ${W.indicesGet("outputIndices",y)};
          let r = ${W.indicesGet("outputIndices",c)};
          let c = ${W.indicesGet("outputIndices",f)};
          let dyCorner = vec2<i32>(i32(r), i32(c)) - pads;
          let dyRCorner = dyCorner.x;
          let dyCCorner = dyCorner.y;
          let groupId = d1 / ${x};
          let wOutChannel = d1 - groupId * ${x};
          // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
          // ? = to be determined. : = across all values in that axis.
          var dotProd = 0.0;
          for (var wR: u32 = 0; wR < effectiveFilterDims.x; wR = wR + 1) {
            if (wR % dilations.x != 0) {
              continue;
            }
            let dyR = (${l}(dyRCorner) + ${l}(wR)) / ${l}(strides[0]);
            let wRPerm = filterDims.x - 1 - wR / dilations.x;
            if (dyR < 0.0 || dyR >= ${l}(outBackprop[${c}]) || fract(dyR) > 0.0 ||
                wRPerm < 0) {
              continue;
            }
            let idyR: u32 = u32(dyR);

            for (var wC: u32 = 0; wC < effectiveFilterDims.y; wC = wC + 1) {
              if (wC % dilations.y != 0) {
                continue;
              }
              let dyC = (${l}(dyCCorner) + ${l}(wC)) / ${l}(strides.y);
              let wCPerm = filterDims.y - 1 - wC / dilations.y;
              if (dyC < 0.0 || dyC >= ${l}(outBackprop[${f}]) ||
                  fract(dyC) > 0.0 || wCPerm < 0) {
                continue;
              }
              let idyC: u32 = u32(dyC);
              var inputChannel = groupId * ${I};
              for (var d2: u32 = 0; d2 < ${I}; d2 = d2 + 1) {
                let xValue = ${o?D.get("batch","idyR","idyC","inputChannel"):D.get("batch","inputChannel","idyR","idyC")};
                let wValue = ${E.get("inputChannel","wOutChannel","u32(wRPerm)","u32(wCPerm)")};
                dotProd = dotProd + xValue * wValue;
                inputChannel = inputChannel + 1;
              }
            }
          }
          let value = dotProd + ${n?"bias[d1]":"0.0"};
          ${W.setByOffset("global_idx","value")};
        `;return`
  ${e.declareVariables(...P,W)}
  ${_}
  const outShape : vec4<u32> = vec4<u32>(${a.join(",")});
  const outBackprop : vec4<u32> = vec4<u32>(${t[0].dims.join(",")});
  const strides : vec2<u32> = vec2<u32>(${r.strides[0]}, ${r.strides[1]});
  const filterDims : vec2<u32> = vec2<u32>(${r.kernelShape[o?1:2]}, ${r.kernelShape[o?2:3]});
  const dilations : vec2<u32> = vec2<u32>(${r.dilations[0]}, ${r.dilations[1]});
  const effectiveFilterDims : vec2<u32> = filterDims + vec2<u32>(
          ${r.dilations[0]<=1?0:(r.kernelShape[o?1:2]-1)*(r.dilations[0]-1)},
          ${r.dilations[1]<=1?0:(r.kernelShape[o?2:3]-1)*(r.dilations[1]-1)});
  const pads : vec2<i32> = vec2<i32>(i32(effectiveFilterDims[0]) - 1 - (${r.pads[0]+r.pads[2]})/2,
                                     i32(effectiveFilterDims[1]) - 1 - (${r.pads[1]+r.pads[3]})/2);
    ${e.mainStart()}
    ${e.guardAgainstOutOfBoundsWorkgroupSizes(m)};
  ${u?N:F}}`},la=(e,t,r)=>{let a=e.length>2,n=t.outputShape,i=z.size(n),u=[Math.ceil(i/64),1,1];Pe("verbose",()=>`[conv2d_backprop_webgpu] dispatch = ${u}`);let l=Ee(e[0].dataType);return{name:"ConvTranspose2D",shaderCache:{hint:t.cacheKey},getRunData:()=>({dispatchGroup:{x:u[0],y:u[1],z:u[2]},outputs:[{dims:r?r(n):n,dataType:e[0].dataType}]}),getShaderSource:o=>bc(o,e,t,n,a,u[1]===1&&u[2]===1,!1,l)}}});var wc,vc,$c,zs,Ds,Sc,xc,Ic,Cc,Ws,Vs=j(()=>{"use strict";ke();Bs();Ms();Ut();Qt();wc=(e,t,r,a,n,i)=>(e-1)*t+r+(a-1)*n+1-i,vc=(e,t,r,a,n)=>{let i=Math.floor(e/2);t==="SAME_UPPER"?(r[a]=i,r[n]=e-i):t==="SAME_LOWER"&&(r[a]=e-i,r[n]=i)},$c=(e,t,r,a,n,i,u,l,o,c)=>{let f=e.length-2,y=c.length===0;if(o.length===0)for(let b=0;b<f;++b)o.push(0);let m=e[0],w=t[l?3:1]*n;for(let b=0,$=e.length-f-(l?1:0);b<f;++b,++$){let I=e[$],x=y?I*u[b]:c[b],_=wc(I,u[b],i[b],t[$],r[b],x);vc(_,a,i,b,b+f),y&&c.push(u[b]*(I-1)+o[b]+(t[$]-1)*r[b]+1-i[b]-i[b+f])}c.splice(0,0,m),c.splice(l?3:1,0,w)},zs=(e,t)=>{let r=e.kernelShape.slice();if(e.kernelShape.length===0||e.kernelShape.reduce((m,w)=>m*w,1)===0){r.length=0;for(let m=2;m<t[1].dims.length;++m)r.push(t[1].dims[m])}let a=e.format==="NHWC";r.splice(0,0,t[1].dims[0]),r.splice(a?3:1,0,t[1].dims[1]);let n=e.pads.slice(),i=e.outputShape.slice(),u=e.outputPadding.slice(),l=t[0].dims,o=e.dilations.slice();if(o.reduce((m,w)=>m+w,0)===0){let m=t[0].dims.length-2;o=new Array(m).fill(1)}let c=e.strides.slice();if(c.reduce((m,w)=>m+w,0)===0){let m=t[0].dims.length-2;c=new Array(m).fill(1)}$c(l,r,o,e.autoPad,e.group,n,c,a,u,i);let f=Object.assign({},e),y=e.cacheKey+[r.join("n,"),n.join(","),c.join(","),u.join(","),i.join(","),o.join(",")].join("_");return Object.assign(f,{kernelShape:r,pads:n,outputPadding:u,outputShape:i,dilations:o,strides:c,cacheKey:y}),f},Ds=e=>{let t=cn(e),r=e.format,a=["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][typeof e.autoPad>"u"?0:e.autoPad],n=e.dilations,i=e.group,u=e.kernelShape,l=e.pads,o=e.strides,c=e.wIsConst(),f=e.outputPadding,y=e.outputShape;return Q({autoPad:a,format:r,dilations:n,group:i,kernelShape:u,outputPadding:f,outputShape:y,pads:l,strides:o,wIsConst:c,...t})},Sc=(e,t)=>{if(!e||e.length!==2&&e.length!==3)throw new Error("Conv requires 2 or 3 inputs");if(e[0].dims.length!==4&&e[0].dims.length!==3)throw new Error("currently only support 2-dimensional conv");if(e[0].dims.length!==e[1].dims.length)throw new Error("filter does not have same dimension as input");let r=e[0].dims[t.format==="NHWC"?e[0].dims.length-1:1],a=e[1].dims[0];if(r!==a)throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");let n=e[1].dims[1]*t.group;if(e.length===3&&(e[2].dims.length!==1||e[2].dims[0]!==n))throw new Error("invalid bias");let i=e[0].dims.length-2;if(t.dilations.reduce((f,y)=>f+y,0)>0&&t.dilations.length!==i)throw new Error(`dilations should be ${i}D`);if(t.strides.reduce((f,y)=>f+y,0)>0&&t.strides.length!==i)throw new Error(`strides should be ${i}D`);if(t.pads.reduce((f,y)=>f+y,0)>0&&t.pads.length!==i*2)throw new Error(`pads should be ${i*2}D`);if(t.outputPadding.length!==i&&t.outputPadding.length!==0)throw new Error(`output_padding should be ${i}D`);if(t.kernelShape.reduce((f,y)=>f+y,0)>0&&t.kernelShape.length!==0&&t.kernelShape.length!==e[1].dims.length-2)throw new Error("invalid kernel shape");if(t.outputShape.length!==0&&t.outputShape.length!==e[0].dims.length-2)throw new Error("invalid output shape")},xc=[2,3,1,0],Ic=(e,t,r)=>{let a=zs(r,t),n=r.format==="NHWC",i=a.outputShape,u=i[n?3:1],l=t[0].dims[n?3:1];if(a.group!==1||u===1&&l===1){e.compute(la(t,a));return}let o=i[n?1:2],c=i[n?2:3],f=t[1].dims[2],y=t[1].dims[3],m=n?o*c:u,w=n?u:o*c,b=f*y*l,$=!0,I=e.kernelCustomData.wT??e.compute(ot(t[1],xc),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=I);let x=[t[0],I],_=t.length===3;_&&(!n&&t[2].dims.length===1?x.push(t[2].reshape([t[2].dims[0],1,1])):x.push(t[2])),e.compute(Ps(x,a,i,m,w,b,_,$),{inputs:x})},Cc=(e,t)=>{let r=t.format==="NHWC",a=[e.inputs[0].reshape(r?[e.inputs[0].dims[0],1,e.inputs[0].dims[1],e.inputs[0].dims[2]]:[e.inputs[0].dims[0],e.inputs[0].dims[1],1,e.inputs[0].dims[2]]),e.inputs[1].reshape([e.inputs[1].dims[0],e.inputs[1].dims[1],1,e.inputs[1].dims[2]])];a.length===3&&a.push(e.inputs[2]);let n=t.kernelShape;(n.length===0||n[0]===0)&&(n=[e.inputs[1].dims[2]]);let i=t.dilations;(i.length===0||i[0]===0)&&(i=[1]);let u=t.strides;(u.length===0||u[0]===0)&&(u=[1]);let l=t.pads;l.length===0&&(l=[0,0]),l=[0,l[0],0,l[1]],u=[1].concat(u),i=[1].concat(i),n=[1].concat(n);let o=zs({...t,pads:l,strides:u,dilations:i,kernelShape:n},a);e.compute(la(a,o,c=>r?[c[0],c[2],c[3]]:[c[0],c[1],c[3]]))},Ws=(e,t)=>{Sc(e.inputs,t),e.inputs[0].dims.length===3?Cc(e,t):Ic(e,e.inputs,t)}});var _c,Ns,Us,Hs=j(()=>{"use strict";ze();ye();ke();be();_c=(e,t,r,a)=>{let n=z.size(t),i=t.length,u=V("input",e,i),l=K("output",e,i),o=r.dataType===6?r.getInt32Array()[0]:Number(r.getBigInt64Array()[0]),c=z.normalizeAxis(o,i),f=y=>{let m=` i32(${u.indicesGet("inputIndices","uniforms.axis")}) `,w=i===1?"i32(uniforms.input_shape)":"i32(uniforms.input_shape[uniforms.axis])",b=a.reverse?m+(a.exclusive?" + 1":""):"0",$=a.reverse?w:m+(a.exclusive?"":" + 1");return`
                ${y.registerUniform("outputSize","u32").registerUniform("axis","u32").declareVariables(u,l)}
                ${y.mainStart()}
                  ${y.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
                  var inputIndices = ${l.offsetToIndices("global_idx")};
                  var sum = 0.0;
                  let first : i32 = ${b};
                  let last : i32 = ${$};
                  for (var i : i32 = first; i < last; i++) {
                    ${u.indicesSet("inputIndices","uniforms.axis","u32(i)")};
                    sum = sum + ${u.getByIndices("inputIndices")};
                  }
                  ${l.setByOffset("global_idx","sum")};
                }`};return{name:"CumSum",shaderCache:{hint:a.cacheKey,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:t,dataType:e}],dispatchGroup:{x:Math.ceil(n/64)},programUniforms:[{type:"uint32",data:n},{type:"int32",data:c},...ne(t),...ne(t)]}),getShaderSource:f}},Ns=(e,t)=>{let r=e.inputs[0].dims,a=e.inputs[0].dataType,n=e.inputs[1];e.compute(_c(a,r,n,t),{inputs:[0]})},Us=e=>{let t=e.exclusive===1,r=e.reverse===1;return Q({exclusive:t,reverse:r})}});var da,gn,Ls,Ac,Ec,ca,pa,Gs,Tc,Fs,js,qs=j(()=>{"use strict";ye();ke();be();da="[a-zA-Z]|\\.\\.\\.",gn="("+da+")+",Ls="^"+gn+"$",Ac="("+gn+",)*"+gn,Ec="^"+Ac+"$",ca=class{constructor(t=-1){this.symbolToIndices=new Map,this.inputIndex=t}addSymbol(t,r){let a=this.symbolToIndices.get(t);a===void 0?a=[r]:a.push(r),this.symbolToIndices.set(t,a)}},pa=class{constructor(t,r){this.equation=r;this.hasEllipsis=!1,this.symbolToInfo=new Map,this.lhs=new Array,this.outputDims=[];let[a,n]=r.includes("->")?r.split("->",2):[r,""];if(!a.match(RegExp(Ec)))throw new Error("Invalid LHS term");if(a.split(",").forEach((l,o)=>{let c=t[o].dims.slice();if(!l.match(RegExp(Ls)))throw new Error("Invalid LHS term");let f=this.processTerm(l,!0,c,o);this.lhs.push(f)}),n==="")n+=[...this.symbolToInfo.entries()].filter(([l,o])=>o.count===1||l==="...").map(([l])=>l).join("");else if(!n.match(RegExp(gn)))throw new Error("Invalid RHS");n.match(RegExp(da,"g"))?.forEach(l=>{if(l==="...")this.outputDims=this.outputDims.concat(this.ellipsisDims);else{let o=this.symbolToInfo.get(l);if(o===void 0)throw new Error("Invalid RHS symbol");this.outputDims.push(o.dimValue)}}),this.rhs=this.processTerm(n,!1,this.outputDims)}addSymbol(t,r,a){let n=this.symbolToInfo.get(t);if(n!==void 0){if(n.dimValue!==r&&n.count!==1)throw new Error("Dimension mismatch");n.count++,n.inputIndices.push(a)}else n={count:1,dimValue:r,inputIndices:[a]};this.symbolToInfo.set(t,n)}processTerm(t,r,a,n=-1){let i=a.length,u=!1,l=[],o=0;if(!t.match(RegExp(Ls))&&!r&&t!=="")throw new Error("Invalid LHS term");let c=t.match(RegExp(da,"g")),f=new ca(n);return c?.forEach((y,m)=>{if(y==="..."){if(u)throw new Error("Only one ellipsis is allowed per input term");u=!0;let w=i-c.length+1;if(w<0)throw new Error("Ellipsis out of bounds");if(l=a.slice(o,o+w),this.hasEllipsis){if(this.ellipsisDims.length!==l.length||this.ellipsisDims.toString()!==l.toString())throw new Error("Ellipsis dimensions mismatch")}else if(r)this.hasEllipsis=!0,this.ellipsisDims=l;else throw new Error("Ellipsis must be specified in the LHS");for(let b=0;b<l.length;b++){let $=String.fromCharCode("0".charCodeAt(0)+b);f.addSymbol($,m+b),this.addSymbol($,a[o++],n)}}else f.addSymbol(y,m+(this.hasEllipsis?this.ellipsisDims.length-1:0)),this.addSymbol(y,a[o++],n)}),f}},Gs=e=>e+"_max",Tc=(e,t,r,a,n)=>{let u=t.map((w,b)=>e[b]?w.length:w).map((w,b)=>V(`input${b}`,r,w)),l=z.size(n),o=Re(n.length),c=o?n.length:n,f=K("output",r,c),y=[...a.symbolToInfo.keys()].filter(w=>!a.rhs.symbolToIndices.has(w)),m=w=>{let b=[],$="var prod = 1.0;",I="var sum = 0.0;",x="sum += prod;",_=[],R=[],E=[],D=[],P=a.symbolToInfo.size===a.rhs.symbolToIndices.size;a.symbolToInfo.forEach((N,F)=>{if(a.rhs.symbolToIndices.has(F)){let te=a.rhs.symbolToIndices.get(F)?.[0];te!==void 0&&a.lhs.forEach((B,q)=>{if(N.inputIndices.includes(q)){let pe=B.symbolToIndices.get(F);if(pe===void 0)throw new Error("Invalid symbol error");pe.forEach(X=>{b.push(`${u[q].indicesSet(`input${q}Indices`,X,f.indicesGet("outputIndices",te))}`)})}})}else a.lhs.forEach((te,B)=>{if(N.inputIndices.includes(B)){let q=te.symbolToIndices.get(F);if(q===void 0)throw new Error("Invalid symbol error");q.forEach(pe=>{_.push(`${u[B].indicesSet(`input${B}Indices`,pe,`${F}`)}`)}),D.push(`prod *= ${u[B].getByIndices(`input${B}Indices`)};`)}}),R.push(`for(var ${F}: u32 = 0; ${F} < uniforms.${Gs(F)}; ${F}++) {`),E.push("}")});let W=P?[...b,`let sum = ${u.map((N,F)=>N.getByIndices(`input${F}Indices`)).join(" * ")};`]:[...b,I,...R,..._,$,...D,x,...E];return`
            ${w.registerUniforms(y.map(N=>({name:`${Gs(N)}`,type:"u32"}))).registerUniform("outputSize","u32").declareVariables(...u,f)}

            ${w.mainStart()}
            ${w.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
            var outputIndices = ${f.offsetToIndices("global_idx")};
            ${u.map((N,F)=>`var input${F}Indices: ${u[F].type.indices};`).join(`
`)}
            ${W.join(`
`)};
            ${f.setByOffset("global_idx","sum")};
          }`};return{name:"Einsum",shaderCache:{hint:a.equation,inputDependencies:e.map(w=>w?"rank":"dims")},getRunData:()=>{let w=y.filter($=>a.symbolToInfo.has($)).map($=>({type:"uint32",data:a.symbolToInfo.get($)?.dimValue||0}));w.push({type:"uint32",data:l});let b=t.filter(($,I)=>e[I]).map(($,I)=>[...ne($)]).reduce(($,I)=>$.concat(I),w);return o&&b.push(...ne(n)),{outputs:[{dims:n,dataType:r}],dispatchGroup:{x:Math.ceil(l/64)},programUniforms:b}},getShaderSource:m}},Fs=(e,t)=>{let r=new pa(e.inputs,t.equation),a=e.inputs.map((u,l)=>Re(u.dims.length)),n=r.outputDims,i=e.inputs.map((u,l)=>u.dims);e.compute(Tc(a,i,e.inputs[0].dataType,r,n))},js=e=>{let t=e.equation.replace(/\s+/g,"");return Q({equation:t})}});var Oc,Ks,kc,Rc,Ys,Zs=j(()=>{"use strict";ze();ye();be();Oc=e=>{if(!e||e.length!==2)throw new Error("Expand requires 2 input.");let t=e[0].dims,r=Array.from(e[1].getBigInt64Array(),Number),a=r.length<t.length?0:r.length-t.length,n=t.length<r.length?0:t.length-r.length;for(;a<r.length&&n<t.length;++a,++n)if(r[a]!==t[n]&&r[a]!==1&&t[n]!==1)throw new Error("Expand requires shape to be broadcastable to input")},Ks=(e,t)=>{let r=e.length-t.length,a=[];for(let n=0;n<r;++n)a.push(e[n]);for(let n=0;n<t.length;++n)a.push(t[n]===1?e[n+r]:t[n]);return a},kc=(e,t)=>e.length>t.length?Ks(e,t):Ks(t,e),Rc=e=>{let t=e[0].dims,r=Array.from(e[1].getBigInt64Array(),Number),a=kc(t,r),n=e[0].dataType,i=n===9?4:1,u=z.size(a)/i,l=Re(t.length),o=Re(a.length),c=y=>{let m=l?t.length:t,w=o?a.length:a,b=V("input",n,m,i),$=K("output",n,w,i),I;if(n===9){let x=(_,R,E="")=>`
          let outputIndices${R} = ${$.offsetToIndices(`outputOffset + ${R}u`)};
          let offset${R} = ${b.broadcastedIndicesToOffset(`outputIndices${R}`,$)};
          let index${R} = offset${R} / 4u;
          let component${R} = offset${R} % 4u;
          ${_}[${R}] = ${E}(${b.getByOffset(`index${R}`)}[component${R}]);
        `;I=`
        let outputOffset = global_idx * ${i};
        var data = vec4<u32>(0);
        ${x("data",0,"u32")}
        ${x("data",1,"u32")}
        ${x("data",2,"u32")}
        ${x("data",3,"u32")}
        ${$.setByOffset("global_idx","data")}
      }`}else I=`
        let outputIndices = ${$.offsetToIndices("global_idx")};
        let inputOffset = ${b.broadcastedIndicesToOffset("outputIndices",$)};
        ${$.setByOffset("global_idx",b.getByOffset("inputOffset"))}
      }`;return`
    ${y.registerUniform("vec_size","u32").declareVariables(b,$)}
    ${y.mainStart()}
    ${y.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}
    ${I}`},f=[{type:"uint32",data:u}];return l&&f.push(...ne(t)),o&&f.push(...ne(a)),{name:"Expand",shaderCache:{hint:`${a.length}`,inputDependencies:[l?"rank":"dims"]},getShaderSource:c,getRunData:()=>({outputs:[{dims:a,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(u/64)},programUniforms:f})}},Ys=e=>{Oc(e.inputs),e.compute(Rc(e.inputs),{inputs:[0]})}});var Pc,Bc,Qs,Xs,Js=j(()=>{"use strict";ze();ye();ke();be();Pc=e=>{if(!e||e.length!==2)throw new Error("Gather requires 2 inputs.")},Bc=(e,t)=>{let r=e[0].dims,a=e[1].dims,n=r.length,i=z.normalizeAxis(t.axis,n),u=r.slice(0);u.splice(i,1,...a);let l=r[i],o=e[0].dataType===9?4:1,c=z.size(u)/o,f=Re(e[0].dims.length),y=f?e[0].dims.length:e[0].dims,m=Re(e[1].dims.length),w=m?e[1].dims.length:e[1].dims,b=Re(u.length),$=b?u.length:u,I=[{type:"uint32",data:c},{type:"int32",data:l},{type:"uint32",data:i}];f&&I.push(...ne(e[0].dims)),m&&I.push(...ne(e[1].dims)),b&&I.push(...ne(u));let x=[];x.push(f?"rank":"dims"),x.push(m?"rank":"dims");let _=R=>{let E=V("data",e[0].dataType,y,o),D=V("inputIndices",e[1].dataType,w),P=K("output",e[0].dataType,$,o),W=F=>{let te=a.length,B=`var indicesIndices${F}  = ${D.type.indices}(0);`;for(let q=0;q<te;q++)B+=`${te>1?`indicesIndices${F}[${q}]`:`indicesIndices${F}`} = ${u.length>1?`outputIndices${F}[uniforms.axis + ${q}]`:`outputIndices${F}`};`;B+=`
          var idx${F} = ${D.getByIndices(`indicesIndices${F}`)};
          if (idx${F} < 0) {
            idx${F} = idx${F} + uniforms.axisDimLimit;
          }
          var dataIndices${F} = ${E.type.indices}(0);
        `;for(let q=0,pe=0;q<n;q++)q===i?(B+=`${n>1?`dataIndices${F}[${q}]`:`dataIndices${F}`} = u32(idx${F});`,pe+=te):(B+=`${n>1?`dataIndices${F}[${q}]`:`dataIndices${F}`} = ${u.length>1?`outputIndices${F}[${pe}]`:`outputIndices${F}`};`,pe++);return B},N;if(e[0].dataType===9){let F=(te,B,q="")=>`
          let outputIndices${B} = ${P.offsetToIndices(`outputOffset + ${B}u`)};
          ${W(B)};
          let offset${B} = ${E.indicesToOffset(`dataIndices${B}`)};
          let index${B} = offset${B} / 4u;
          let component${B} = offset${B} % 4u;
          ${te}[${B}] = ${q}(${E.getByOffset(`index${B}`)}[component${B}]);
        `;N=`
        let outputOffset = global_idx * ${o};
        var value = vec4<u32>(0);
        ${F("value",0,"u32")}
        ${F("value",1,"u32")}
        ${F("value",2,"u32")}
        ${F("value",3,"u32")}
        ${P.setByOffset("global_idx","value")}
      `}else N=`
      let outputIndices = ${P.offsetToIndices("global_idx")};
      ${W("")};
      let value = ${E.getByIndices("dataIndices")};
      ${P.setByOffset("global_idx","value")};
      `;return`
      ${R.registerUniform("outputSize","u32").registerUniform("axisDimLimit","i32").registerUniform("axis","u32").declareVariables(E,D,P)}
      ${R.mainStart()}
        ${R.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
        ${N}
      }`};return{name:"Gather",shaderCache:{hint:t.cacheKey,inputDependencies:x},getRunData:()=>({outputs:[{dims:u,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(c/64)},programUniforms:I}),getShaderSource:_}},Qs=e=>Q({axis:e.axis}),Xs=(e,t)=>{let r=e.inputs;Pc(r),e.compute(Bc(e.inputs,t))}});var Mc,zc,eu,tu,ru=j(()=>{"use strict";ye();ke();be();Mc=e=>{if(!e||e.length!==2)throw new Error("GatherElements requires 2 inputs.");if(e[0].dims.length<1)throw new Error("GatherElements requires that the data input be rank >= 1.");if(e[0].dims.length!==e[1].dims.length)throw new Error(`GatherElements requires that the data input and
                     indices input tensors be of same rank.`)},zc=(e,t)=>{let r=e[0].dims,a=e[0].dataType,n=r.length,i=e[1].dims,u=e[1].dataType,l=z.normalizeAxis(t.axis,n),o=r[l],c=i.slice(0),f=z.size(c),y=V("input",a,n),m=V("indicesInput",u,i.length),w=K("output",a,c.length),b=[{type:"uint32",data:f},{type:"int32",data:o},{type:"uint32",data:l}];return b.push(...ne(r)),b.push(...ne(i)),b.push(...ne(c)),{name:"GatherElements",shaderCache:{inputDependencies:["rank","rank"]},getRunData:()=>({outputs:[{dims:c,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(f/64)},programUniforms:b}),getShaderSource:x=>`
      ${x.registerUniform("outputSize","u32").registerUniform("axisDimLimit","i32").registerUniform("axis","u32").declareVariables(y,m,w)}
      ${x.mainStart()}
      ${x.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}

      let outputIndices = ${w.offsetToIndices("global_idx")};

      var idx = ${m.getByOffset("global_idx")};
      if (idx < 0) {
        idx = idx + uniforms.axisDimLimit;
      }
      var inputIndices = ${y.type.indices}(outputIndices);
      ${y.indicesSet("inputIndices","uniforms.axis","u32(idx)")};
      let value = ${y.getByIndices("inputIndices")};

      ${w.setByOffset("global_idx","value")};
  }`}},eu=e=>Q({axis:e.axis}),tu=(e,t)=>{let r=e.inputs;Mc(r),e.compute(zc(e.inputs,t))}});var Dc,Wc,Vc,nu,au,ou=j(()=>{"use strict";ye();ke();be();Dc=e=>{if(!e)throw new Error("Input is missing");if(e.length<2||e.length>3)throw new Error("Invaid input number.");if(e.length===3&&e[2].dims.length>2)throw new Error("Invalid input shape of C");if(e[0].dataType!==e[1].dataType||e.length===3&&e[0].dataType!==e[2].dataType)throw new Error("Input types are mismatched")},Wc=(e,t,r)=>{if(r.length===0)return"0u";let a=r.length===1&&e!==1||r.length===2&&r[0]!==e,n=r[r.length-1]!==t,i="0u";return a||(i+=`+ m * ${r[r.length-1]}u`),n||(i+="+n"),i},Vc=(e,t)=>{let r=e[0].dims.slice(),a=e[1].dims.slice(),[n,i,u]=rn.getShapeOfGemmResult(r,t.transA,a,t.transB,e.length===3?e[2].dims:void 0),l=[n,i];if(!l)throw new Error("Can't use gemm on the given tensors");let o=z.size(l),c="";t.transA&&t.transB?c="value += a[k * M + m] * b[n * K + k];":t.transA&&!t.transB?c="value += a[k * M + m] * b[k * N + n];":!t.transA&&t.transB?c="value += a[m * K + k] * b[n * K + k];":!t.transA&&!t.transB&&(c="value += a[m * K + k] * b[k * N + n];");let f=Ee(e[0].dataType),y=t.alpha===1?"":"value *= alpha;",m=e.length===3?`value += beta * c[${Wc(n,i,e[2].dims)}];`:"",w=[`@group(0) @binding(0) var<storage, read> a : array<${f}>;`,`@group(0) @binding(1) var<storage, read> b : array<${f}>;`];e.length===3&&w.push(`@group(0) @binding(2) var<storage, read> c : array<${f}>;`);let b=$=>`
  const M: u32 = ${n}u;
  const N: u32 = ${i}u;
  const K: u32 = ${u}u;
  const alpha = ${f}(${t.alpha});
  const beta = ${f}(${t.beta});

  ${w.join(`
`)}
  @group(0) @binding(${e.length}) var<storage, read_write> output : array<${f}>;

  ${$.mainStart()}
    ${$.guardAgainstOutOfBoundsWorkgroupSizes(o)}

    let m = global_id.x / N;
    let n = global_id.x % N;

    var value = ${f}(0);
    for (var k: u32 = 0u; k<${u}u; k++) {
      ${c}
    }

    ${y}
    ${m}
    output[global_id.x] = value;

  }`;return{name:"Gemm",shaderCache:{hint:t.cacheKey},getRunData:()=>({outputs:[{dims:l,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(o/64)}}),getShaderSource:b}},nu=(e,t)=>{Dc(e.inputs),e.compute(Vc(e.inputs,t))},au=e=>Q(e)});var Nc,Uc,Hc,Lc,iu,su,uu=j(()=>{"use strict";ze();ye();ke();be();Nc={name:"InstanceNormalization"},Uc=(e,t)=>{let r=e[0].dims,a=r,n=2,i=z.sizeToDimension(r,n),u=z.sizeFromDimension(r,n),l=r[1],o=V("x",e[0].dataType,[r[0],r[1],u]),c=V("scale",e[1].dataType,e[1].dims),f=V("bias",e[2].dataType,e[2].dims),y=K("output",e[0].dataType,[r[0],r[1],u]),m=[o,c,f,y],w=o.type.value,b=64,$=I=>`

  const C: u32 = ${l};
  const normSize: u32 = ${u};
  const epsilon: f32 = ${t.epsilon};
  var<workgroup> meanShared : ${w};
  var<workgroup> squaredNormShared : ${w};
  var<workgroup> workgroupShared : array<${w}, ${b}>;
  const workgroupSize = ${b}u;
  ${I.declareVariables(...m)}
  ${I.mainStart(b)}
    let norm = global_idx / workgroupSize;
    let batch = norm / C;
    let channel = norm % C;
    let localIndex = local_id.x;

    // initialize workgroup memory
    var initial: ${w} = 0;
    for (var h = localIndex; h < normSize; h += workgroupSize) {
      initial = initial + ${o.get("batch","channel","h")};
    }
    workgroupShared[localIndex] = initial;
    workgroupBarrier();

    // Calculate the mean of current channel data.
    for (var currSize = workgroupSize >> 1;  currSize > 0; currSize = currSize >> 1) {
      if (localIndex < currSize) {
        workgroupShared[localIndex] = workgroupShared[localIndex] + workgroupShared[localIndex + currSize];
      }
      workgroupBarrier();
    }
    if (localIndex == 0) {
      meanShared = workgroupShared[0] / ${w}(normSize);
    }
    workgroupBarrier();

    // reinitialize workgroup memory.
    initial = 0;
    for (var h = localIndex; h < normSize; h += workgroupSize) {
      let deviation =  ${o.get("batch","channel","h")} - meanShared;
      initial = initial + deviation * deviation;
    }
    workgroupShared[localIndex] = initial;
    workgroupBarrier();

    // Calculate the sum of square of deviation of current channel data.
    for (var currSize = workgroupSize >> 1;  currSize > 0; currSize = currSize >> 1) {
      if (localIndex < currSize) {
        workgroupShared[localIndex] = workgroupShared[localIndex] + workgroupShared[localIndex + currSize];
      }
      workgroupBarrier();
    }
    if (localIndex == 0) {
      squaredNormShared = workgroupShared[0];
    }
    workgroupBarrier();

    let invStdDev = 1 / sqrt(squaredNormShared / ${w}(normSize) + epsilon);
    let channelScale = invStdDev * ${c.getByOffset("channel")};
    let channelShift = ${f.getByOffset("channel")} - meanShared * channelScale;
    for (var h = localIndex; h < normSize; h += workgroupSize) {
      let value = ${o.get("batch","channel","h")} * channelScale + channelShift;
      ${y.set("batch","channel","h","value")};
    }
  }`;return{...Nc,shaderCache:{hint:t.cacheKey},getRunData:()=>({outputs:[{dims:a,dataType:e[0].dataType}],dispatchGroup:{x:i}}),getShaderSource:$}},Hc=(e,t,r,a,n,i,u,l)=>{let o=Xe(u),c=V("input",t.dataType,t.dims,o),f=V("scale",r.dataType,r.dims,o),y=V("bias",a.dataType,a.dims,o),m=64,w=o===1?"vec2f":`mat2x${o}f`,b=o===1?"f32":`vec${o}f`,$=(D,P)=>`${w}(${D}, ${P})`,I=n*u/o,x=Math.ceil(i/m),_=D=>`
  const H: u32 = ${i};
  const C: u32 = ${u/o};
  const imageSize: u32 = ${i*u/o};

  ${D.declareVariables(c)}
  @group(0) @binding(1) var<storage, read_write> output : array<${w}>;

  ${D.mainStart(m)}
    let currentImageNumber = global_idx / ${m} / C;
    let currentChannelNumber = (global_idx / ${m}) % C;
    let wgId = global_idx % ${m};
    let wgOffset = wgId * ${x};
    if (wgOffset >= H) {
        return;
    }
    let wgMax = min(wgOffset + ${x}, H);

    let offset = currentImageNumber * imageSize + currentChannelNumber;
    var sum = ${Fe("f32",o)};
    var squaredSum = ${Fe("f32",o)};
    for (var i: u32 = wgOffset; i < wgMax; i++) {
        let value = ${b}(input[offset + i * C]);
        sum += value;
        squaredSum += value * value;
    }
    output[global_idx] = ${$("sum","squaredSum")};
  }`,R=e.compute({name:"InstanceNormComputeMean",shaderCache:{hint:JSON.stringify({components:o,n,h:i,c:u})},getRunData:()=>({outputs:[{dims:[n,u,m,2],dataType:1}],dispatchGroup:{x:n*u/o}}),getShaderSource:_},{inputs:[t],outputs:[-1]})[0],E=D=>`
  const H: u32 = ${i};
  const C: u32 = ${u/o};
  const imageSize: u32 = ${m*u/o};
  const epsilon: f32 = ${l};

  @group(0) @binding(0) var<storage, read> input : array<${w}>;
  @group(0) @binding(1) var<storage, read> scale : array<${f.type.storage}>;
  @group(0) @binding(2) var<storage, read> bias : array<${y.type.storage}>;
  @group(0) @binding(3) var<storage, read_write> output : array<${w}>;

  ${D.mainStart()}
    ${D.guardAgainstOutOfBoundsWorkgroupSizes(I)}
    let currentImageNumber = global_idx / C;
    let currentChannelNumber = global_idx % C;

    let offset = currentImageNumber * imageSize;
    var sum = ${Fe("f32",o)};
    var squaredSum = ${Fe("f32",o)};
    for (var i: u32 = 0; i < ${m}; i++) {
        let value = input[offset + i + currentChannelNumber * ${m}];
        sum += value[0];
        squaredSum += value[1];
    }
    sum = sum / f32(H);
    squaredSum = squaredSum / f32(H);
    let invStdDev = 1 / sqrt(squaredSum - sum * sum + epsilon);
    let channelScale = invStdDev * ${b}(scale[currentChannelNumber]);
    let channelShift = ${b}(bias[currentChannelNumber]) - sum * channelScale;

    output[global_idx] = ${$("channelScale","channelShift")};
  }`;return e.compute({name:"InstanceNormComputeChannelScaleShift",shaderCache:{hint:JSON.stringify({components:o,n,h:i,c:u,epsilon:l})},getRunData:()=>({outputs:[{dims:[n,u,2],dataType:1}],dispatchGroup:{x:Math.ceil(I/64)}}),getShaderSource:E},{inputs:[R,r,a],outputs:[-1]})[0]},Lc=(e,t,r)=>{let a=t[0].dims,n=a,i=a[0],u=a[a.length-1],l=z.sizeFromDimension(a,1)/u,o=Xe(u),c=z.size(n)/o,f=V("input",t[0].dataType,t[0].dims,o),y=K("output",t[0].dataType,n,o),m=Ee(t[0].dataType),w=o===1?"vec2f":`mat2x${o}f`,b=o===1?m:`vec${o}<${m}>`,$=Hc(e,t[0],t[1],t[2],i,l,u,r.epsilon),I=x=>`
  const H: u32 = ${l};
  const C: u32 = ${u/o};

  @group(0) @binding(0) var<storage, read> input : array<${f.type.storage}>;
  @group(0) @binding(1) var<storage, read> scaleInput : array<${w}>;
  @group(0) @binding(2) var<storage, read_write> output : array<${y.type.storage}>;

  ${x.mainStart()}
    let currentImageNumber = global_idx / (C * H);
    let currentChannelNumber = global_idx % C;

    let scaleOffset = currentImageNumber * C + currentChannelNumber;
    let scale = scaleInput[scaleOffset];
    output[global_idx] = fma(input[global_idx], ${b}(scale[0]), ${b}(scale[1]));
  }`;e.compute({name:"InstanceNormalization",shaderCache:{hint:`${r.cacheKey}`},getRunData:()=>({outputs:[{dims:n,dataType:t[0].dataType}],dispatchGroup:{x:Math.ceil(c/64)}}),getShaderSource:I},{inputs:[t[0],$]})},iu=e=>Q({epsilon:e.epsilon,format:e.format}),su=(e,t)=>{t.format==="NHWC"?Lc(e,e.inputs,t):e.compute(Uc(e.inputs,t))}});var Gc,Fc,lu,du,cu=j(()=>{"use strict";ze();ye();ke();be();Gc=e=>{if(!e||e.length<2)throw new Error("layerNorm requires at least 2 inputs.")},Fc=(e,t,r)=>{let a=e[0].dims,n=e[1],i=e[2],u=a,l=z.normalizeAxis(t.axis,a.length),o=z.sizeToDimension(a,l),c=z.sizeFromDimension(a,l),f=z.size(n.dims),y=i?z.size(i.dims):0;if(f!==c||i&&y!==c)throw new Error(`Size of X.shape()[axis:] == ${c}.
       Size of scale and bias (if provided) must match this.
       Got scale size of ${f} and bias size of ${y}`);let m=[];for(let E=0;E<a.length;++E)E<l?m.push(a[E]):m.push(1);let w=Xe(c),b=Ee(e[0].dataType),$=[V("x",e[0].dataType,e[0].dims,w),V("scale",n.dataType,n.dims,w)];i&&$.push(V("bias",i.dataType,i.dims,w)),$.push(K("output",e[0].dataType,u,w));let I=r>1,x=r>2;I&&$.push(K("meanDataOutput",1,m)),x&&$.push(K("invStdOutput",1,m));let _=E=>`
  const normSize: f32 = ${c};
  const normSizeVectorized: u32 = ${c/w};
  const epsilon: f32 = ${t.epsilon};

  ${E.declareVariables(...$)}
  ${E.mainStart()}
    ${E.guardAgainstOutOfBoundsWorkgroupSizes(o)}
    let offset = global_idx * normSizeVectorized;
    var meanVector = ${Fe("f32",w)};
    var meanSquareVector = ${Fe("f32",w)};

    for (var h: u32 = 0u; h < normSizeVectorized; h++) {
      let value = ${nt(b,w,"x[h + offset]")};
      meanVector += value;
      meanSquareVector += value * value;
    }
    let mean = ${at("meanVector",w)} / normSize;
    let meanSquare = sqrt(${at("meanSquareVector",w)} 
      / normSize - mean * mean + epsilon);

    for (var j: u32 = 0; j < normSizeVectorized; j++) {
      let f32input = ${nt(b,w,"x[j + offset]")};
      let f32scale = ${nt(b,w,"scale[j]")};
      output[j + offset] = ${$[0].type.value}((f32input - mean) / meanSquare * f32scale
        ${i?`+ ${nt(b,w,"bias[j]")}`:""}
      );
    }

    ${I?"meanDataOutput[global_idx] = mean":""};
    ${x?"invStdOutput[global_idx] = 1 / meanSquare":""};
  }`,R=[{dims:u,dataType:e[0].dataType}];return I&&R.push({dims:m,dataType:1}),x&&R.push({dims:m,dataType:1}),{name:"LayerNormalization",shaderCache:{hint:`${t.cacheKey}|${r}|${e.length}`},getRunData:()=>({outputs:R,dispatchGroup:{x:Math.ceil(o/64)}}),getShaderSource:_}},lu=e=>Q({axis:e.axis,epsilon:e.epsilon}),du=(e,t)=>{Gc(e.inputs),e.compute(Fc(e.inputs,t,e.outputCount))}});var jc,pu,fu=j(()=>{"use strict";ye();Sr();jc=e=>{if(!e||e.length!==2)throw new Error("MatMul requires 2 inputs.");if(e[0].dims[e[0].dims.length-1]!==e[1].dims[e[1].dims.length-2])throw new Error("shared dimension does not match.")},pu=e=>{jc(e.inputs);let t=pt.calcShape(e.inputs[0].dims,e.inputs[1].dims,!0);if(!t)throw new Error("Can't use matmul on the given tensors");e.compute(hn(e.inputs,{activation:"",activationCacheKey:""},t))}});var qc,hu,mu,Kc,fa,gu,yu=j(()=>{"use strict";ye();ke();en();ta();be();Qt();qc=(e,t)=>{let r=e[0],a=e[1],n=e[2],i=e[3],u=e[4],l=e[5],o=e[6],c=e[7];if(r.dims.length!==3&&r.dims.length!==5)throw new Error("Input query is expected to have 3 or 5 dimensions");let f=!1,y=r.dims[0],m=r.dims[1],w=r.dims.length===3?f?r.dims[2]/3:r.dims[2]:t.numHeads*r.dims[4],b=m,$=0,I=0,x=Math.floor(w/t.numHeads);if(o&&c){if(o.dims.length!==4)throw new Error('Input "past_key" is expected to have 4 dimensions');if(c.dims.length!==4)throw new Error('Input "past_value" is expected to have 4 dimensions');$=o.dims[2],I=o.dims[2]}else if(o||c)throw new Error('Input "past_key" and "past_value" shall be both present or both absent');let _;if(a){if(r.dims.length!==3)throw new Error('Input "query" is expected to have 3 dimensions when key is given');if(a.dims.length<3||a.dims.length>5)throw new Error('Input "key" is expected to have 3, 4, or 5 dimensions');if(r.dims[0]!==a.dims[0])throw new Error('Input "query" and "key" shall have same dim 0 (batch size)');if(a.dims.length===3){if(a.dims[2]!==r.dims[2])throw new Error('Input "query" and "key" shall have same dim 2 (hidden_size)');_=2,b=a.dims[1]}else if(a.dims.length===5){if(a.dims[2]!==t.numHeads||a.dims[3]!==2||a.dims[4]!==x)throw new Error('Expect "key" shape (batch_size, kv_sequence_length, num_heads, 2, head_size) for packed kv');if(n)throw new Error('Expect "value" be none when "key" has packed kv format.');_=5,b=a.dims[1]}else{if(a.dims[1]!==t.numHeads||a.dims[3]!==x)throw new Error('Expect "key" shape (batch_size, num_heads, kv_sequence_length, head_size) for past_key');_=0,b=a.dims[2]}}else{if(r.dims.length!==3&&r.dims.length!==5)throw new Error('Input "query" is expected to have 3 or 5 dimensions when key is empty');if(r.dims.length===5&&(r.dims[2]!==t.numHeads||r.dims[3]!==3))throw new Error('Expect "query" shape (batch_size, kv_sequence_length, num_heads, 3, head_size) for packed kv');_=3}if(i){if(i.dims.length!==1)throw new Error('Input "bias" is expected to have 1 dimension');if(n&&r.dims.length===5&&r.dims[3]===2)throw new Error("bias is not allowed for packed kv.")}let R=0;if(u){R=8;let N=u.dims;throw N.length===1?N[0]===y?R=1:N[0]===3*y+2&&(R=3):N.length===2&&N[0]===y&&N[1]===b&&(R=5),R===8?new Error('Input "key_padding_mask" shape shall be (batch_size) or (batch_size, kv_sequence_length)'):new Error("Mask not supported")}let E=!1,D=w;if(n){if(n.dims.length!==3&&n.dims.length!==4)throw new Error('Input "value" is expected to have 3 or 4 dimensions');if(r.dims[0]!==n.dims[0])throw new Error('Input "query" and "value" shall have same dim 0 (batch_size)');if(n.dims.length===3){if(b!==n.dims[1])throw new Error('Input "key" and "value" shall have the same dim 1 (kv_sequence_length)');D=n.dims[2]}else{if(b!==n.dims[2])throw new Error('Input "past_key" and "past_value" shall have the same dim 2 (kv_sequence_length)');D=n.dims[1]*n.dims[3],E=!0}}let P=$+b,W=!1;if(u)throw new Error("Key padding mask is not supported");if(l)throw new Error("extraAddQk is not supported");if(o)throw new Error("pastKey is not supported");if(c)throw new Error("pastValue is not supported");return{batchSize:y,sequenceLength:m,pastSequenceLength:$,kvSequenceLength:b,totalSequenceLength:P,maxSequenceLength:I,inputHiddenSize:0,hiddenSize:w,vHiddenSize:D,headSize:x,vHeadSize:Math.floor(D/t.numHeads),numHeads:t.numHeads,isUnidirectional:!1,pastPresentShareBuffer:!1,maskFilterValue:t.maskFilterValue,maskType:R,scale:t.scale,broadcastResPosBias:W,passPastInKv:E,qkvFormat:_}},hu=e=>Q({...e}),mu=Q({perm:[0,2,1,3]}),Kc=(e,t,r,a,n,i,u)=>{let l=[a,n,i],o=z.size(l),c=Ee(t.dataType),f=y=>`
  const biasOffset = ${u}u;
  const hiddenSize = ${i}u;

  @group(0) @binding(0) var<storage, read> qkv: array<${c}>;
  @group(0) @binding(1) var<storage, read> bias: array<${c}>;
  @group(0) @binding(2) var<storage, read_write> qkv_with_bias: array<${c}>;

  ${y.mainStart()}
    ${y.guardAgainstOutOfBoundsWorkgroupSizes(o)}
    let biasOffsetIdx = (global_idx % hiddenSize) + biasOffset;

    qkv_with_bias[global_idx] = qkv[global_idx] + bias[biasOffsetIdx];
  }`;return e.compute({name:"MultiHeadAttentionAddBias",shaderCache:{hint:JSON.stringify({batchSize:a,sequenceLength:n,hiddenSize:i,biasOffset:u})},getRunData:()=>({outputs:[{dims:l,dataType:t.dataType,gpuDataType:0}],dispatchGroup:{x:Math.ceil(o/64)}}),getShaderSource:f},{inputs:[t,r],outputs:[-1]})[0]},fa=(e,t,r,a,n,i,u,l)=>{let o=i;if(u){if(a===1)throw new Error("AddBiasReshape is not implemented. Please export your model with packed QKV or KV");return o=Kc(e,i,u,t,a,r*n,l),o=o.reshape([t,a,r,n]),e.compute(ot(o,mu.perm),{inputs:[o],outputs:[-1]})[0]}else return i.dims.length===3&&(o=i.reshape([t,a,r,n])),e.compute(ot(o,mu.perm),{inputs:[o],outputs:[-1]})[0]},gu=(e,t)=>{let r=qc(e.inputs,t);if(e.inputs[0].dims.length===5)throw new Error("Packed QKV is not implemented");if(e.inputs[1]?.dims.length===5)throw new Error("Packed KV is not implemented");let a=e.inputs[1]&&e.inputs[2]&&e.inputs[1].dims.length===4&&e.inputs[2].dims.length===4,n=fa(e,r.batchSize,r.numHeads,r.sequenceLength,r.headSize,e.inputs[0],e.inputs[3],0);if(a)return un(e,n,e.inputs[1],e.inputs[2],e.inputs[4],void 0,void 0,void 0,e.inputs[5],r,t);let i=fa(e,r.batchSize,r.numHeads,r.kvSequenceLength,r.headSize,e.inputs[1],e.inputs[3],r.hiddenSize),u=fa(e,r.batchSize,r.numHeads,r.kvSequenceLength,r.vHeadSize,e.inputs[2],e.inputs[3],2*r.hiddenSize);un(e,n,i,u,e.inputs[4],void 0,e.inputs[6],e.inputs[7],e.inputs[5],r,t)}});var Yc,Zc,Qc,Xc,Jc,ep,tp,rp,np,bu,wu,vu=j(()=>{"use strict";ze();ye();ke();be();Yc=e=>{if(!e||e.length<1)throw new Error("Too few inputs");if(e[0].dataType!==1)throw new Error("Input type must be float.");if(e.length>=2){let t=e[0].dims.length*2===e[1].dims[0];if(e.length===4&&(t=e[3].dims[0]*2===e[1].dims[0]),!t)throw new Error("The pads should be a 1D tensor of shape [2 * input_rank] or [2 * num_axes].")}},Zc=(e,t,r,a,n,i)=>{let u=t.length,l="";for(let o=u-1;o>=0;--o)l+=`
            k = i32(${e.indicesGet("indices",o)}) - ${a[o]};
            if (k < 0) {
              break;
            }
            if (k >= ${t[o]}) {
              break;
            }
            offset += k * ${r[o]};
        `;return`
          value = ${n}(${i});
          for (var i = 0; i < 1; i++) {
            var offset = 0;
            var k = 0;
            ${l}
            value = x[offset];
          }
      `},Qc=(e,t,r,a)=>{let n=t.length,i="";for(let u=n-1;u>=0;--u)i+=`
                k = i32(${e.indicesGet("indices",u)}) - ${a[u]};
                if (k < 0) {
                  k = -k;
                }
                {
                  let _2n_1 = ${2*(t[u]-1)};
                  k = k % _2n_1;
                  if(k >= ${t[u]}) {
                    k = _2n_1 - k;
                  }
                }
                offset += k * ${r[u]};
            `;return`
              var offset = 0;
              var k = 0;
              ${i}
              value = x[offset];
          `},Xc=(e,t,r,a)=>{let n=t.length,i="";for(let u=n-1;u>=0;--u)i+=`
                k = i32(${e.indicesGet("indices",u)}) - ${a[u]};
                if (k < 0) {
                  k = 0;
                }
                if (k >= ${t[u]}) {
                  k = ${t[u]-1};
                }
                offset += k * ${r[u]};
            `;return`
              var offset = 0;
              var k = 0;
              ${i}
              value = x[offset];
          `},Jc=(e,t,r,a)=>{let n=t.length,i="";for(let u=n-1;u>=0;--u)i+=`
                k = i32(${e.indicesGet("indices",u)}) - ${a[u]};
                if (k < 0)  {
                  k += ${t[u]};
                }
                if (k >= ${t[u]}) {
                  k -= ${t[u]};
                }
                offset += k * ${r[u]};
            `;return`
              var offset = 0;
              var k = 0;
              ${i}
              value = x[offset];
          `},ep=(e,t,r,a,n)=>{switch(a.mode){case 0:return Zc(e,t,r,a.pads,n,a.value);case 1:return Qc(e,t,r,a.pads);case 2:return Xc(e,t,r,a.pads);case 3:return Jc(e,t,r,a.pads);default:throw new Error("Invalid mode")}},tp=(e,t,r,a)=>{let n=t[0].dims,i=z.padShape(n.slice(),r.pads),u=z.size(i),l=z.computeStrides(n),o=K("output",t[0].dataType,i),c=V("x",t[0].dataType,n),f=ep(o,n,l,r,a);return`
              ${e.declareVariables(c,o)}
              ${e.mainStart()}
              ${e.guardAgainstOutOfBoundsWorkgroupSizes(u)}

              let indices = ${o.offsetToIndices("global_idx")};

              var value = ${a}(0);
              ${f}
              output[global_idx] = value;
          }`},rp=(e,t)=>{let r=z.padShape(e[0].dims.slice(),t.pads);return{name:"Pad",shaderCache:{hint:t.cacheKey},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(z.size(r)/64)}}),getShaderSource:a=>tp(a,e,t,"f32")}},np=(e,t)=>{if(e.length>1){let r=e[1].getBigInt64Array(),a=e.length>=3&&e[2].data?e[2].getFloat32Array()[0]:0,n=e[0].dims.length,i=new Int32Array(2*n).fill(0);if(e.length>=4){let l=e[3].getBigInt64Array();for(let o=0;o<l.length;o++)i[Number(l[o])]=Number(r[o]),i[Number(l[o])+n]=Number(r[o+l.length])}else r.forEach((l,o)=>i[Number(o)]=Number(l));let u=[];return i.forEach(l=>u.push(l)),Q({mode:t.mode,value:a,pads:u})}else return t},bu=(e,t)=>{Yc(e.inputs);let r=np(e.inputs,t);e.compute(rp(e.inputs,r),{inputs:[0]})},wu=e=>{let t=e.mode,r=e.value,a=e.pads;return Q({mode:t,value:r,pads:a})}});var yn,$u,Su,xu,Iu,Cu,_u,Au,Eu,Tu,Ou,ku,Ru,Pu,Bu,Mu,zu=j(()=>{"use strict";ct();ye();ke();be();yn=e=>{if(Ae.webgpu.validateInputContent&&(!e||e.length!==1))throw new Error("Pool ops requires 1 input.")},$u=(e,t,r)=>{let a=t.format==="NHWC",n=e.dims.slice();a&&n.splice(1,0,n.pop());let i=Object.hasOwnProperty.call(t,"dilations"),u=t.kernelShape.slice(),l=t.strides.slice(),o=i?t.dilations.slice():[],c=t.pads.slice();Nt.adjustPoolAttributes(r,n,u,l,o,c);let f=Nt.computePoolOutputShape(r,n,l,o,u,c,t.autoPad),y=Object.assign({},t);i?Object.assign(y,{kernelShape:u,strides:l,pads:c,dilations:o,cacheKey:t.cacheKey}):Object.assign(y,{kernelShape:u,strides:l,pads:c,cacheKey:t.cacheKey});let m=f.slice();return m.push(m.splice(1,1)[0]),[y,a?m:f]},Su=(e,t)=>{let r=t.format==="NHWC",a=z.size(e),n=z.size(t.kernelShape),i=[{type:"uint32",data:a},{type:"uint32",data:n}],u=[{name:"outputSize",type:"u32"},{name:"kernelSize",type:"u32"}];if(t.kernelShape.length<=2){let l=t.kernelShape[t.kernelShape.length-1],o=t.strides[t.strides.length-1],c=t.pads[t.pads.length/2-1],f=t.pads[t.pads.length-1],y=!!(c+f);i.push({type:"uint32",data:l},{type:"uint32",data:o},{type:"uint32",data:c},{type:"uint32",data:f}),u.push({name:"kw",type:"u32"},{name:"sw",type:"u32"},{name:"pwStart",type:"u32"},{name:"pwEnd",type:"u32"});let m=!1;if(t.kernelShape.length===2){let w=t.kernelShape[t.kernelShape.length-2],b=t.strides[t.strides.length-2],$=t.pads[t.pads.length/2-2],I=t.pads[t.pads.length-2];m=!!($+I),i.push({type:"uint32",data:w},{type:"uint32",data:b},{type:"uint32",data:$},{type:"uint32",data:I}),u.push({name:"kh",type:"u32"},{name:"sh",type:"u32"},{name:"phStart",type:"u32"},{name:"phEnd",type:"u32"})}return[i,u,!0,y,m]}else{if(r)throw new Error("Pooling with kernelShape.length > 2 is not supported for NHWC format.");let l=z.computeStrides(t.kernelShape);i.push({type:"uint32",data:l},{type:"uint32",data:t.pads},{type:"uint32",data:t.strides}),u.push({name:"kernelStrides",type:"u32",length:l.length},{name:"pads",type:"u32",length:t.pads.length},{name:"strides",type:"u32",length:t.strides.length});let o=t.pads.reduce((c,f)=>c+f);return[i,u,!!o,!1,!1]}},xu=(e,t,r,a,n,i,u,l,o,c,f,y)=>{let m=n.format==="NHWC",w=t.type.value,b=K("output",t.type.tensor,a);if(n.kernelShape.length<=2){let $="",I="",x="",_=r-(m?2:1);if(f===!0?$=`
                for (var i: u32 = 0u; i < uniforms.kw; i++) {
                  xIndices[${_}] = indices[${_}] * uniforms.sw - uniforms.pwStart + i;
                  if (xIndices[${_}] < 0 || xIndices[${_}]
                      >= uniforms.x_shape[${_}]) {
                    pad++;
                    continue;
                  }
                  let x_val = x[${t.indicesToOffset("xIndices")}];
                  ${i}
                }`:$=`
                for (var i: u32 = 0u; i < uniforms.kw; i++) {
                  xIndices[${_}] = indices[${_}] * uniforms.sw - uniforms.pwStart + i;
                  let x_val = x[${t.indicesToOffset("xIndices")}];
                  ${i}
                }`,n.kernelShape.length===2){let E=r-(m?3:2);y===!0?I=`
                for (var j: u32 = 0u; j < uniforms.kh; j++) {
                  xIndices[${E}] = indices[${E}] * uniforms.sh - uniforms.phStart + j;
                  if (xIndices[${E}] < 0 || xIndices[${E}] >= uniforms.x_shape[${E}]) {
                    pad += i32(uniforms.kw);
                    continue;
                  }
              `:I=`
                for (var j: u32 = 0u; j < uniforms.kh; j++) {
                  xIndices[${E}] = indices[${E}] * uniforms.sh - uniforms.phStart + j;
                `,x=`
              }
            `}return`
            ${e.registerUniforms(o).declareVariables(t,b)}

            ${e.mainStart()}
              ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}

              let indices = ${b.offsetToIndices("global_idx")};
              var xIndices = ${b.offsetToIndices("global_idx")};

              var value = ${w}(${l});
              var pad = 0;
              ${I}
              ${$}
              ${x}
              ${u}

              output[global_idx] = value;
            }`}else{if(m)throw new Error("Pooling with kernelShape.length > 2 is not supported for NHWC format.");let $=n.kernelShape.length,I=n.pads.length,x="";return c?x=`
                if (xIndices[j] >= uniforms.x_shape[j]) {
                  pad++;
                  isPad = true;
                  break;
                }
              }
              if (!isPad) {
                let x_val = x[${t.indicesToOffset("xIndices")}];
                ${i}
              }`:x=`
              }
              let x_val = x[${t.indicesToOffset("xIndices")}];
              ${i}
            `,`
            ${e.registerUniforms(o).declareVariables(t,b)}

            ${e.mainStart()}
              ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
              let indices = ${b.offsetToIndices("global_idx")};
              var xIndices = ${b.offsetToIndices("global_idx")};

              var offsets: array<u32, ${$}>;

              var value = ${w}(${l});
              var pad = 0;
              var isPad = false;

              for (var i: u32 = 0u; i < uniforms.kernelSize; i++) {
                var offset = i;
                for (var j = 0u; j < ${$-1}u; j++) {
                  offsets[j] = offset / ${Ye("uniforms.kernelStrides","j",$)};
                  offset -= offsets[j] * ${Ye("uniforms.kernelStrides","j",$)};
                }
                offsets[${$-1}] = offset;

                isPad = false;
                for (var j = ${r-$}u; j < ${r}u; j++) {
                  xIndices[j] = indices[j] * ${Ye("uniforms.strides",`j - ${r-$}u`,$)}
                    + offsets[j - ${r-$}u] - ${Ye("uniforms.pads","j - 2u",I)};
                  ${x}
              }
              ${u}

              output[global_idx] = value;
            }`}},Iu=e=>({format:e.format,autoPad:["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][e.auto_pad],ceilMode:e.ceil_mode,kernelShape:e.kernel_shape,strides:e.strides,pads:e.pads}),Cu=(e,t,r,a)=>{let[n,i]=$u(t,a,r),u=V("x",t.dataType,t.dims.length),l=u.type.value,o="value += x_val;",c="";n.countIncludePad?c+=`value /= ${l}(uniforms.kernelSize);`:c+=`value /= ${l}(i32(uniforms.kernelSize) - pad);`;let[f,y,m,w,b]=Su(i,n);f.push(...ne(t.dims)),f.push(...ne(i));let $=["rank"];return{name:e,shaderCache:{hint:a.cacheKey+m+w+b+n.countIncludePad,inputDependencies:$},getRunData:()=>({outputs:[{dims:i,dataType:t.dataType}],dispatchGroup:{x:Math.ceil(z.size(i)/64)},programUniforms:f}),getShaderSource:I=>xu(I,u,t.dims.length,i.length,n,o,c,0,y,m,w,b)}},_u=e=>{let t=e.count_include_pad!==0,r=Iu(e);if(r.ceilMode!==0)throw new Error("using ceil() in shape computation is not yet supported for AveragePool");return Q({countIncludePad:t,...r})},Au=(e,t)=>{yn(e.inputs),e.compute(Cu("AveragePool",e.inputs[0],!1,t))},Eu={autoPad:"",ceilMode:0,countIncludePad:!1,kernelShape:[],strides:[],pads:[],storageOrder:0,dilations:[],cacheKey:""},Tu=e=>{let t=e.format;return{format:t,...Eu,cacheKey:t}},Ou=(e,t)=>{yn(e.inputs),e.compute(Cu("GlobalAveragePool",e.inputs[0],!0,t))},ku=(e,t,r,a)=>{let[n,i]=$u(t,a,r),u=`
      value = max(x_val, value);
    `,l="",o=V("x",t.dataType,t.dims.length),c=["rank"],[f,y,m,w,b]=Su(i,n);return f.push(...ne(t.dims)),f.push(...ne(i)),{name:e,shaderCache:{hint:a.cacheKey+m,inputDependencies:c},getRunData:()=>({outputs:[{dims:i,dataType:t.dataType}],dispatchGroup:{x:Math.ceil(z.size(i)/64)},programUniforms:f}),getShaderSource:$=>xu($,o,t.dims.length,i.length,n,u,l,-1e5,y,m,w,b)}},Ru=(e,t)=>{yn(e.inputs),e.compute(ku("MaxPool",e.inputs[0],!1,t))},Pu=e=>{let t=e.storage_order,r=e.dilations,a=Iu(e);if(t!==0)throw new Error("column major storage order is not yet supported for MaxPool");if(a.ceilMode!==0)throw new Error("using ceil() in shape computation is not yet supported for MaxPool");return Q({storageOrder:t,dilations:r,...a})},Bu=e=>{let t=e.format;return{format:t,...Eu,cacheKey:t}},Mu=(e,t)=>{yn(e.inputs),e.compute(ku("GlobalMaxPool",e.inputs[0],!0,t))}});var op,ip,Du,Wu=j(()=>{"use strict";ct();ze();be();op=(e,t,r)=>{let a=e===t,n=e<t&&r<0,i=e>t&&r>0;if(a||n||i)throw new Error("Range these inputs' contents are invalid.")},ip=(e,t,r,a)=>{let n=Math.abs(Math.ceil((t-e)/r)),i=[n],u=n,l=K("output",a,i),o=l.type.storage,c=f=>`
        ${f.declareVariables(l)}
        ${f.mainStart()}
        ${f.guardAgainstOutOfBoundsWorkgroupSizes(u)}
        output[global_idx] = ${o}(${e}) + ${o}(global_idx) * ${o}(${r});
      }`;return{name:"Range",shaderCache:{hint:[e,t,r].map(f=>f.toString()).join("_")},getShaderSource:c,getRunData:()=>({outputs:[{dims:i,dataType:a}],dispatchGroup:{x:Math.ceil(u/64)}})}},Du=e=>{let t=0,r=0,a=0;e.inputs[0].dataType===6?(t=e.inputs[0].getInt32Array()[0],r=e.inputs[1].getInt32Array()[0],a=e.inputs[2].getInt32Array()[0]):e.inputs[0].dataType===1&&(t=e.inputs[0].getFloat32Array()[0],r=e.inputs[1].getFloat32Array()[0],a=e.inputs[2].getFloat32Array()[0]),Ae.webgpu.validateInputContent&&op(t,r,a),e.compute(ip(t,r,a,e.inputs[0].dataType),{inputs:[]})}});var sp,up,lp,dp,cp,pp,fp,mp,hp,gp,yp,bp,wp,vp,$p,Vu,Nu,Uu=j(()=>{"use strict";ye();ke();be();sp=(e,t)=>{if(e.every(r=>r>0||(()=>{throw new Error("Resize requires scales input values to be positive")})),e.length>0){if(t.mode==="linear"){if(!(e.length===2||e.length===4&&e[0]===1&&e[1]===1||e.length===4&&e[0]===1&&e[3]===1))throw new Error("Resize requires scales input size to be 2 or 4 for linear mode")}else if(t.mode==="cubic"&&!(e.length===2||e.length===4&&e[0]===1&&e[1]===1||e.length===4&&e[0]===1&&e[3]===1))throw new Error("Resize requires scales input size to be 2 or 4 for cubic mode")}},up=(e,t,r)=>{t.every(n=>n>=0&&n<r||(()=>{throw new Error("Resize requires axes input values to be positive and less than rank")}));let a=new Array(r).fill(1);return t.forEach((n,i)=>a[n]=e[i]),a},lp=(e,t,r,a,n,i)=>{let[u,l,o]=r>10?[1,2,3]:[-1,e.length>1?1:-1,-1],c=e[0].dims.length;if(u>0&&e.length>u&&e[u].dims.length>0)e[u].getFloat32Array().forEach(f=>i.push(f));else if(t.coordinateTransformMode==="tf_crop_and_resize")throw new Error("Resize requires RoI input to be specified when coordinateTransformMode is tfCropAndResize");if(l>0&&e.length>l&&e[l].dims.length>0){if(e[l].getFloat32Array().forEach(f=>a.push(f)),a.length!==0&&a.length!==c&&r>=18&&a.length!==t.axes.length)throw new Error("Resize requires scales input size to be same as input rank or axes size for opset 18 and up");sp(a,t),t.axes.length>0&&up(a,t.axes,c).forEach((f,y)=>a[y]=f)}if(o>0&&e.length>o&&(e[o].getBigInt64Array().forEach(f=>n.push(Number(f))),n.length!==c||r>=18&&n.length===t.axes.length))throw new Error("Resize requires sizes input size to be same as input rank or axes size for opset 18 and up");if(t.axes.length>0){if(a.length!==t.axes.length)throw new Error('Resize requires "scales" input size to be of axes rank when axes attributes is specified');if(n.length!==t.axes.length)throw new Error('Resize requires "sizes" input size to be of rank axes rank when axes attributes is specified')}if(typeof a<"u"&&typeof n<"u"&&a.length>0&&n.length>c)throw new Error("Resize requires only of scales or sizes to be specified")},dp=(e,t)=>`fn getOriginalCoordinateFromResizedCoordinate(xResized: ${t}, xScale: ${t}, lengthResized: ${t},
     lengthOriginal: ${t}, roiStart: ${t}, roiEnd: ${t}) -> ${t} { `+(()=>{switch(e){case"asymmetric":return"return xResized / xScale;";case"pytorch_half_pixel":return"if (lengthResized > 1) {                     return (xResized + 0.5) / xScale - 0.5;                   } else {                     return 0.0;                   }";case"tf_half_pixel_for_nn":return"return (xResized + 0.5) / xScale;";case"align_corners":return"if (lengthResized == 1) {                     return 0.0;                   } else {                     return xResized * (lengthOriginal - 1) / (lengthResized - 1);                   }";case"tf_crop_and_resize":return`if (lengthResized > 1) {                     return roiStart * (lengthOriginal - 1) +                           (xResized * (roiEnd - roiStart) * (lengthOriginal - 1)) / (lengthResized - 1);                   } else {                     return 0.5 * (roiStart + roiEnd) * ${t}(lengthOriginal - 1);                   }`;case"half_pixel_symmetric":return["const outputWidth = xScale * lengthResized;","const adjustment = lengthResized / outputWidth;","const center = lengthOriginal / 2;","const offset = center * (1 - adjustment);","return offset + ((xResized + 0.5) / xScale) - 0.5;"].join(`
`);case"half_pixel":return"return ((xResized + 0.5) / xScale) - 0.5;";default:throw new Error(`Coordinate transform mode ${e} is not supported`)}})()+"}",cp=(e,t,r)=>`fn getNearestPixelFromOriginal(xOriginal: ${r}, isDownSample: bool) -> ${r} {`+(()=>{switch(e){case"round_prefer_ceil":return"if (fract(xOriginal) == 0.5) {             return ceil(xOriginal);           } else {             return round(xOriginal);           }";case"floor":return"return floor(xOriginal);";case"ceil":return"return ceil(xOriginal);";case"round_prefer_floor":return"if (fract(xOriginal) == 0.5) {                     return floor(xOriginal);                   } else {                     return round(xOriginal);                   }";case"simple":default:if(t<11)return"if (isDownSample)                     {                       return ceil(xOriginal);                     } else {                       return xOriginal;                     }";throw new Error(`Nearest mode ${e} is not supported`)}})()+"}",pp=(e,t,r)=>{let a=new Array(r).fill(0).concat(new Array(r).fill(1)),n=e.length===0?a:e.slice();return t.length>0?(t.forEach((i,u)=>{a[i]=n[u],a[u+r]=n[t.length+u]}),a):n},fp=(e,t,r,a)=>{let n=[];if(r.length>0)if(a.length>0){if(e.forEach(i=>n.push(i)),Math.max(...a)>e.length)throw new Error("axes is out of bound");a.forEach((i,u)=>n[i]=r[u])}else r.forEach(i=>n.push(i));else{if(t.length===0)throw new Error("Resize requires either scales or sizes.");n=e.map((i,u)=>Math.round(i*t[u]))}return n},mp=(e,t,r)=>{let a=(()=>{switch(r.keepAspectRatioPolicy){case"not_larger":return r.axes.length>0?Math.min(...r.axes.map(i=>t[i]),Number.MAX_VALUE):Math.min(...t,Number.MAX_VALUE);case"not_smaller":return r.axes.length>0?Math.max(...r.axes.map(i=>t[i]),Number.MIN_VALUE):Math.max(...t,Number.MIN_VALUE);default:throw new Error(`Keep aspect ratio policy ${r.keepAspectRatioPolicy} is not supported`)}})();t.fill(1,0,t.length);let n=e.slice();return r.axes.length>0?(r.axes.forEach(i=>t[i]=a),r.axes.forEach(i=>n[i]=Math.round(e[i]*t[i]))):(t.fill(a,0,t.length),n.forEach((i,u)=>n[u]=Math.round(i*t[u]))),n},hp=(e,t,r,a,n)=>`
    fn calculateOriginalIndicesFromOutputIndices(outputIndices: ${e.type.indices}) -> array<${e.type.value}, ${r.length}> {
      const inputShape = array<u32, ${t.length}>(${t.map(i=>`${i}u`).join(",")});
      const outputShape = array<u32, ${r.length}>(${r.map(i=>`${i}u`).join(",")});
      const scales = array<${e.type.value}, ${a.length}>(${a.map(i=>`${i}f`).join(",")});
      const roi = array<${e.type.value}, ${n.length}>(${n.map(i=>`${i}f`).join(",")});
      var originalIndices: array<${e.type.value}, ${r.length}>;
      for (var i:u32 = 0; i < ${r.length}; i++) {
        var outputIndex = ${r.length===1?"outputIndices":"outputIndices[i]"};
        if (scales[i] == 1.0) {
          originalIndices[i] = ${e.type.value}(outputIndex);
        } else {
          originalIndices[i] = getOriginalCoordinateFromResizedCoordinate(${e.type.value}(outputIndex), scales[i],
                ${e.type.value}(outputShape[i]), ${e.type.value}(inputShape[i]), roi[i], roi[i + ${t.length}]);
        }
      }
      return originalIndices;
    }`,gp=(e,t,r,a,n,i,u)=>`
    fn calculateInputIndicesFromOutputIndices(outputIndices: ${t.type.indices}) -> ${e.type.indices} {
        const inputShape = array<u32, ${r.length}>(${r.map(l=>`${l}u`).join(",")});
        const outputShape = array<u32, ${a.length}>(${a.map(l=>`${l}u`).join(",")});
        const scales = array<${e.type.value}, ${n.length}>(${n.map(l=>`${l}`).join(",")});
        const roi = array<${e.type.value}, ${i.length}>(${i.map(l=>`${l}`).join(",")});
        var inputIndices: ${e.type.indices};
        for (var i:u32 = 0; i < ${a.length}; i++) {
          var outputIndex = ${a.length===1?"outputIndices":"outputIndices[i]"};
          var inputIndex: u32;
          if (scales[i] == 1.0) {
            inputIndex = outputIndex;
          } else {
            var original_idx = getOriginalCoordinateFromResizedCoordinate(${e.type.value}(outputIndex), scales[i],
                    ${e.type.value}(outputShape[i]), ${e.type.value}(inputShape[i]), roi[i], roi[i + ${r.length}]);
            if (!${u} || (original_idx >= 0 && original_idx < ${e.type.value}(inputShape[i]))) {
              if (original_idx < 0) {
                inputIndex = 0;
              } else if (original_idx > (${e.type.value}(inputShape[i]) - 1)) {
                inputIndex = inputShape[i] - 1;
              } else {
                inputIndex = u32(getNearestPixelFromOriginal(original_idx, scales[i] < 1));
              }
            } else {
              inputIndex = u32(original_idx);
            }
          }
          ${e.indicesSet("inputIndices","i","inputIndex")}
        }
        return inputIndices;
    }`,yp=(e,t)=>`
    fn checkInputIndices(inputIndices: ${e.type.indices}) -> bool {
      const inputShape = array<u32, ${t.length}>(${t.map(r=>`${r}u`).join(",")});
      for (var i:u32 = 0; i < ${t.length}; i++) {
        var inputIndex = ${t.length===1?"inputIndices":"inputIndices[i]"};
        if (inputIndex < 0 || inputIndex >= inputShape[i]) {
          return false;
        }
      }
      return true;
    }`,bp=(e,t,r,a,n,i)=>{let[u,l,o,c]=r.length===2?[-1,0,1,-1]:a[1]===1?[0,2,3,1]:[0,1,2,3],f=e.type.value;return`
    fn getInputValue(batch: u32, channel: u32, row: u32, col: u32) -> ${f} {
      var inputIndices: ${e.type.indices};
      inputIndices[${l}] = max(0, min(row, ${r[l]} - 1));
      inputIndices[${o}] = max(0, min(col, ${r[o]} - 1));
      if (${r.length} > 2) {
        inputIndices[${c}] = channel;
        inputIndices[${u}] = batch;
      };
      return input[${e.indicesToOffset("inputIndices")}];
    }

    fn bilinearInterpolation(outputIndices: ${t.type.indices}) -> ${f} {
      var originalIndices = calculateOriginalIndicesFromOutputIndices(outputIndices);
      var row:${f} = originalIndices[${l}];
      var col:${f} = originalIndices[${o}];
      if (${n} && (row < 0 || row > (${r[l]} - 1) || col < 0 || col > ${r[o]} - 1)) {
        return ${i};
      }
      row = max(0, min(row, ${r[l]} - 1));
      col = max(0, min(col, ${r[o]} - 1));
      var row1: u32 = u32(row);
      var col1: u32 = u32(col);
      var row2: u32 = u32(row + 1);
      var col2: u32 = u32(col + 1);
      var channel: u32 = 0;
      var batch: u32 = 0;
      if (${r.length>2}) {
        channel = u32(originalIndices[${c}]);
        batch = u32(originalIndices[${u}]);
      }
      var x11: ${f} = getInputValue(batch, channel, row1, col1);
      var x12: ${f} = getInputValue(batch, channel, row1, col2);
      var x21: ${f} = getInputValue(batch, channel, row2, col1);
      var x22: ${f} = getInputValue(batch, channel, row2, col2);
      var dx1: ${f} = row - ${f}(row1);
      var dx2: ${f} = ${f}(row2) - row;
      var dy1 = col - ${f}(col1);
      var dy2 = ${f}(col2) - col;
      return (x11 * dx2 * dy2 + x12 * dx2 * dy1 + x21 * dx1 * dy2 + x22 * dx1 * dy1);
    }`},wp=(e,t,r,a,n,i,u,l,o,c)=>{let[f,y]=r.length===2?[0,1]:n[1]===1?[2,3]:[1,2],m=e.type.value,w=b=>{let $=b===f?"row":"col";return`
      fn ${$}CubicInterpolation(inputIndices: ${e.type.indices}, outputIndices: ${t.type.indices}) -> ${m} {
        var outputIndex = ${a.length===1?"outputIndices":`outputIndices[${b}]`};
        var originalIdx: ${m} = getOriginalCoordinateFromResizedCoordinate(${m}(outputIndex), ${n[b]},
        ${m}(${a[b]}), ${m}(${r[b]}), ${i[b]}, ${i[b]} + ${r.length});
        var fractOriginalIdx: ${m} = originalIdx - floor(originalIdx);
        var coefs = getCubicInterpolationCoefs(fractOriginalIdx);

        if (${l} && (originalIdx < 0 || originalIdx > (${r[b]} - 1))) {
          return ${o};
        }
        var data: array<${m}, 4> = array<${m}, 4>(0.0, 0.0, 0.0, 0.0);
        for (var i: i32 = -1; i < 3; i++) {
          var ${$}: ${m} = originalIdx + ${m}(i);
          if (${$} < 0 || ${$} >= ${r[b]}) {
            if (${c}) {
              coefs[i + 1] = 0.0;
              continue;
            } else if (${l}) {
              return ${o};
            } else {
              ${$} = max(0, min(${$}, ${r[b]} - 1));
            }
          }
          var inputIndicesCopy: ${e.type.indices} = inputIndices;
          inputIndicesCopy[${b}] = u32(${$});
          data[i + 1] = ${b===f?`input[${e.indicesToOffset("inputIndicesCopy")}];`:`
                                               rowCubicInterpolation(inputIndicesCopy, outputIndices);`}
        }
        return cubicInterpolation1D(data, coefs);
      }`};return`
    ${w(f)};
    ${w(y)};
  fn getCubicInterpolationCoefs(s: ${m}) -> array<${m}, 4> {
    var absS = abs(s);
    var coeffs: array<${m}, 4> = array<${m}, 4>(0.0, 0.0, 0.0, 0.0);
    var oneMinusAbsS: ${m} = 1.0 - absS;
    var twoMinusAbsS: ${m} = 2.0 - absS;
    var onePlusAbsS: ${m} = 1.0 + absS;
    coeffs[0] = ((${u} * onePlusAbsS - 5 * ${u}) * onePlusAbsS + 8 * ${u}) * onePlusAbsS - 4 * ${u};
    coeffs[1] = ((${u} + 2) * absS - (${u} + 3)) * absS * absS + 1;
    coeffs[2] = ((${u} + 2) * oneMinusAbsS - (${u} + 3)) * oneMinusAbsS * oneMinusAbsS + 1;
    coeffs[3] = ((${u} * twoMinusAbsS - 5 * ${u}) * twoMinusAbsS + 8 * ${u}) * twoMinusAbsS - 4 * ${u};
    return coeffs;
  }

  fn cubicInterpolation1D(x: array<${m}, 4>, coefs: array<${m}, 4>) -> ${m} {
    var coefsSum: ${m} = coefs[0] + coefs[1] + coefs[2] + coefs[3];
    return (x[0] * coefs[0] + x[1] * coefs[1]+ x[2] * coefs[2]+ x[3] * coefs[3]) / coefsSum;
  }

  fn bicubicInterpolation(outputIndices: ${t.type.indices}) -> ${m} {
    var inputIndices: ${e.type.indices} = outputIndices;
    return colCubicInterpolation(inputIndices, outputIndices);
  }
    `},vp=(e,t,r,a,n,i)=>{let u=e.dims,l=pp(i,t.axes,u.length),o=fp(u,a,n,t.axes),c=a.slice();a.length===0&&(c=u.map((x,_)=>x===0?1:o[_]/x),t.keepAspectRatioPolicy!=="stretch"&&(o=mp(u,c,t)));let f=K("output",e.dataType,o),y=V("input",e.dataType,u),m=z.size(o),w=u.length===o.length&&u.every((x,_)=>x===o[_]),b=t.coordinateTransformMode==="tf_crop_and_resize",$=y.type.value,I=x=>`
      ${w?"":`
      ${dp(t.coordinateTransformMode,$)};
      ${(()=>{switch(t.mode){case"nearest":return`
              ${yp(y,u)};
              ${cp(t.nearestMode,r,$)};
              ${gp(y,f,u,o,c,l,b)};
              `;case"linear":return`
              ${hp(f,u,o,c,l)};
              ${bp(y,f,u,c,b,t.extrapolationValue)};
              `;case"cubic":return`
            ${wp(y,f,u,o,c,l,t.cubicCoeffA,b,t.extrapolationValue,t.excludeOutside)};
            `;default:throw Error("Invalid resize mode")}})()};
      `}
      ${x.declareVariables(y,f)}
      ${x.mainStart()}
        ${x.guardAgainstOutOfBoundsWorkgroupSizes(m)}
        ${w?"output[global_idx] = input[global_idx];":`
        let outputIndices = ${f.offsetToIndices("global_idx")};
        var inputIndices: ${y.type.indices};
        ${(()=>{switch(t.mode){case"nearest":return`inputIndices = calculateInputIndicesFromOutputIndices(outputIndices);
                if (checkInputIndices(inputIndices)) {
                  output[global_idx] = input[${y.indicesToOffset("inputIndices")}];
                } else {
                  output[global_idx] = ${t.extrapolationValue};
                }`;case"linear":return"output[global_idx] = bilinearInterpolation(outputIndices);";case"cubic":return"output[global_idx] = bicubicInterpolation(outputIndices);";default:throw Error(`Unsupported resize mode: ${t.mode}`)}})()};
        `}
      }`;return{name:"Resize",shaderCache:{hint:`${t.cacheKey}|${r}|${c.length>0?c:""}|${n.length>0?n:""}|${w}`},getShaderSource:I,getRunData:()=>({outputs:[{dims:o,dataType:e.dataType}],dispatchGroup:{x:Math.ceil(m/64)}})}},$p=e=>{let t=e.customDataBuffer;return new Uint32Array(t,t.byteOffset,1)[0]},Vu=(e,t)=>{let r=[],a=[],n=[],i=$p(e);lp(e.inputs,t,i,r,a,n),e.compute(vp(e.inputs[0],t,i,r,a,n),{inputs:[0]})},Nu=e=>{let t=e.antialias,r=e.axes,a=e.coordinateTransformMode,n=e.cubicCoeffA,i=e.excludeOutside!==0,u=e.extrapolationValue,l=e.keepAspectRatioPolicy,o=e.mode,c=e.nearestMode===""?"simple":e.nearestMode;return Q({antialias:t,axes:r,coordinateTransformMode:a,cubicCoeffA:n,excludeOutside:i,extrapolationValue:u,keepAspectRatioPolicy:l,mode:o,nearestMode:c})}});var Sp,xp,Hu,Lu,Gu=j(()=>{"use strict";ze();ye();ke();be();Sp=e=>{if(!e||e.length<3)throw new Error("layerNorm requires at least 3 inputs.");let t=e[0],r=e[1],a=e[2];if(t.dataType!==r.dataType||t.dataType!==a.dataType)throw new Error("All inputs must have the same data type");if(t.dims.length!==3&&t.dims.length!==2)throw new Error("Input must be 2D or 3D");if(r.dims.length!==3&&r.dims.length!==2)throw new Error("Skip must be 2D or 3D");let n=t.dims[t.dims.length-1],i=t.dims[t.dims.length-2];if(r.dims[r.dims.length-1]!==n)throw new Error("Skip must have the same hidden size as input");if(r.dims[r.dims.length-2]!==i)throw new Error("Skip must have the same sequence length as input");if(a.dims.length!==1)throw new Error("Gamma must be 1D");if(a.dims[a.dims.length-1]!==n)throw new Error("Gamma must have the same hidden size as input");if(e.length>3){let u=e[3];if(u.dims.length!==1)throw new Error("Beta must be 1D");if(u.dims[u.dims.length-1]!==n)throw new Error("Beta must have the same hidden size as input")}if(e.length>4){let u=e[4];if(u.dims.length!==1)throw new Error("Bias must be 1D");if(u.dims[u.dims.length-1]!==n)throw new Error("Bias must have the same hidden size as input")}},xp=(e,t,r,a)=>{let n=e[0].dims,i=z.size(n),u=n,l=i,o=n.slice(-1)[0],c=a?n.slice(0,-1).concat(1):[],f=e.length>3,y=e.length>4,m=a&&r>1,w=a&&r>2,b=r>3,$=Xe(o),I=[V("x",e[0].dataType,e[0].dims,$),V("skip",e[1].dataType,e[1].dims,$),V("gamma",e[2].dataType,e[2].dims,$)];f&&I.push(V("beta",e[3].dataType,e[3].dims,$)),y&&I.push(V("bias",e[4].dataType,e[4].dims,$)),I.push(K("output",e[0].dataType,u,$)),m&&I.push(K("meanOutput",1,c)),w&&I.push(K("invStdOutput",1,c)),b&&I.push(K("inputSkipBiasSum",e[0].dataType,u,$));let x=Ee(e[0].dataType),_=E=>`
      const hiddenSize: f32 = ${o};
      const hiddenSizeVectorized: u32 = ${o/$};
      const epsilon: f32 = ${t.epsilon};

      ${E.declareVariables(...I)}

      ${E.mainStart()}
        ${E.guardAgainstOutOfBoundsWorkgroupSizes(l/o)}
        let offset = global_idx * hiddenSizeVectorized;
        var sum = ${Fe("f32",$)};
        var squareSum = ${Fe("f32",$)};
        for (var i: u32 = 0; i < hiddenSizeVectorized; i++) {
          let skipValue = skip[offset + i];
          let biasValue = ${y?"bias[i]":"0.0"};
          let inputValue = x[offset + i];
          let value = inputValue + skipValue + biasValue;
          ${b?"inputSkipBiasSum[offset + i] = value;":""}
          output[offset + i] = value;
          let f32Value = ${nt(x,$,"value")};
          sum += f32Value;
          squareSum += f32Value * f32Value;
        }
        let mean = ${at("sum",$)} / hiddenSize;
        let variance = sqrt(${at("squareSum",$)} / hiddenSize - mean * mean + epsilon);
        ${m?"meanOutput[global_idx] = mean;":""}
        ${w?"invStdOutput[global_idx] = 1.0 / variance;":""}
        for (var i: u32 = 0; i < hiddenSizeVectorized; i++) {
          output[offset + i] = (output[offset + i] - ${x}(mean)) / ${x}(variance) * gamma[i]
           + ${f?"beta[i]":"0.0"};
        }
      }`,R=[{dims:u,dataType:e[0].dataType}];return r>1&&R.push({dims:c,dataType:1}),r>2&&R.push({dims:c,dataType:1}),r>3&&R.push({dims:n,dataType:e[0].dataType}),{name:"SkipLayerNormalization",shaderCache:{hint:t.cacheKey},getShaderSource:_,getRunData:()=>({outputs:R,dispatchGroup:{x:Math.ceil(l/o/64)}})}},Hu=(e,t)=>{Sp(e.inputs);let a=[0];e.outputCount>1&&a.push(-3),e.outputCount>2&&a.push(-3),e.outputCount>3&&a.push(3),e.compute(xp(e.inputs,t,e.outputCount,!1),{outputs:a})},Lu=e=>{let t=e.epsilon;return Q({epsilon:t})}});var Ip,bn,Cp,Fu,_p,Ap,ju,qu,Ku=j(()=>{"use strict";ze();ye();ke();be();Ip=(e,t)=>{if(!e||e.length<1)throw new Error("too few inputs");if(t.axes.length!==0){if(t.axes.length!==t.starts.length||t.axes.length!==t.ends.length)throw new Error("axes, starts and ends must have the same length")}else if(t.starts.length!==t.ends.length)throw new Error("starts and ends must have the same length");e.slice(1).forEach((r,a)=>{if(e[a+1].dataType!==6&&e[a+1].dataType!==7)throw new Error(`Input ${a} must be an array of int32 or int64`)})},bn=(e,t)=>{let r=[];if(e.length>t)if(e[t].dataType===7)e[t].getBigInt64Array().forEach(a=>r.push(Number(a)));else if(e[t].dataType===6)e[t].getInt32Array().forEach(a=>r.push(Number(a)));else throw new Error(`Input ${t} must be an array of int32 or int64`);return r},Cp=(e,t)=>{if(e.length>1){let r=bn(e,1),a=bn(e,2),n=bn(e,3);return n.length===0&&(n=[...Array(e[0].dims.length).keys()]),Q({starts:r,ends:a,axes:n})}else return t},Fu=(e,t,r,a,n)=>{let i=e;return e<0&&(i+=r[a[t]]),n[t]<0?Math.max(0,Math.min(i,r[a[t]]-1)):Math.max(0,Math.min(i,r[a[t]]))},_p=(e,t,r,a)=>`fn calculateInputIndices(outputIndices: ${t.type.indices}) -> ${e.type.indices} {
          var inputIndices: ${e.type.indices};
          var carry = 0u;
          for (var i = ${r.length}; i >= 0; i--) {
            let input_shape_i = ${Ye("uniforms.input_shape","i",r.length)};
            let steps_i = ${Ye("uniforms.steps","i",r.length)};
            let signs_i = ${Ye("uniforms.signs","i",r.length)};
            let starts_i = ${Ye("uniforms.starts","i",r.length)};
            var outputIndex = ${a.length===1?"outputIndices":"outputIndices[i]"};
            var inputIndex = outputIndex * steps_i + starts_i + carry;
            carry = inputIndex / input_shape_i;
            inputIndex = inputIndex % input_shape_i;
            if (signs_i < 0) {
              inputIndex = input_shape_i - inputIndex - 1u + starts_i;
            }
            ${r.length===1?"inputIndices":"inputIndices[i]"} = inputIndex;
          }
          return inputIndices;
      }`,Ap=(e,t)=>{let r=e[0].dims,a=z.size(r),n=t.axes.length>0?z.normalizeAxes(t.axes,r.length):[...Array(r.length).keys()],i=bn(e,4);i.forEach(x=>x!==0||(()=>{throw new Error("step cannot be 0")})),i.length===0&&(i=Array(n.length).fill(1));let u=t.starts.map((x,_)=>Fu(x,_,r,n,i)),l=t.ends.map((x,_)=>Fu(x,_,r,n,i));if(n.length!==u.length||n.length!==l.length)throw new Error("start, ends and axes should have the same number of elements");if(n.length!==r.length)for(let x=0;x<r.length;++x)n.includes(x)||(u.splice(x,0,0),l.splice(x,0,r[x]),i.splice(x,0,1));let o=i.map(x=>Math.sign(x));i.forEach((x,_,R)=>{if(x<0){let E=(l[_]-u[_])/x,D=u[_],P=D+E*i[_];u[_]=P,l[_]=D,R[_]=-x}});let c=r.slice(0);n.forEach((x,_)=>{c[x]=Math.ceil((l[x]-u[x])/i[x])});let f={dims:c,dataType:e[0].dataType},y=K("output",e[0].dataType,c.length),m=V("input",e[0].dataType,e[0].dims.length),w=z.size(c),b=[{name:"outputSize",type:"u32"},{name:"starts",type:"u32",length:u.length},{name:"signs",type:"i32",length:o.length},{name:"steps",type:"u32",length:i.length}],$=[{type:"uint32",data:w},{type:"uint32",data:u},{type:"int32",data:o},{type:"uint32",data:i},...ne(e[0].dims),...ne(c)],I=x=>`
      ${x.registerUniforms(b).declareVariables(m,y)}
        ${_p(m,y,r,c)}
        ${x.mainStart()}
          ${x.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
          let outputIndices = ${y.offsetToIndices("global_idx")};
          let inputIndices = calculateInputIndices(outputIndices);
          ${y.setByOffset("global_idx",m.getByIndices("inputIndices"))}
      }`;return{name:"Slice",shaderCache:{hint:`${o.length}_${u.length}_${i.length}`,inputDependencies:["rank"]},getShaderSource:I,getRunData:()=>({outputs:[f],dispatchGroup:{x:Math.ceil(a/64)},programUniforms:$})}},ju=(e,t)=>{Ip(e.inputs,t);let r=Cp(e.inputs,t);e.compute(Ap(e.inputs,r),{inputs:[0]})},qu=e=>{let t=e.starts,r=e.ends,a=e.axes;return Q({starts:t,ends:r,axes:a})}});var Ep,Tp,Yu,Zu,Qu=j(()=>{"use strict";ye();ke();be();Ep=e=>{if(!e||e.length!==1)throw new Error("Softmax op requires 1 input.")},Tp=(e,t)=>{let r=e.dims,a=z.size(r),n=64,i=t.axis;if(i<0&&(i=r.length+i),i<r.length-1)throw new Error("softmax only supports last axis for now.");let u=r[i],l=a/u,o=Xe(u),c=u/o,f=(I,x)=>x===4?`max(max(${I}.x, ${I}.y), max(${I}.z, ${I}.w))`:x===2?`max(${I}.x, ${I}.y)`:x===3?`max(max(${I}.x, ${I}.y), ${I}.z)`:I,y=V("x",e.dataType,e.dims,o),m=K("result",e.dataType,e.dims,o),w=y.type.value,b=Ee(e.dataType)==="f32"?`var threadMax = ${w}(-3.402823e+38f);`:`var threadMax = ${w}(-65504.0h);`,$=I=>`
      var<workgroup> rowMaxShared : ${w};
      var<workgroup> rowSumShared : ${w};
      var<workgroup> threadShared : array<${w}, ${n}>;

      fn getValue(row: i32, col: i32, row_stride: i32) -> ${w} {
        let index = row * row_stride + col;
        return x[index];
      }

      fn setValue(row: i32, col: i32, row_stride: i32, value: ${w}) {
        let index = row * row_stride + col;
        result[index] = value;
      }
      ${I.registerUniform("packedCols","i32").declareVariables(y,m)}
      ${I.mainStart()}
        let gindex = i32(global_id.x);
        let lindex = i32(local_id.x);
        const wg = ${n};
        let row = gindex / wg;
        let cols = uniforms.packedCols;
        let row_stride : i32 = uniforms.packedCols;

        // find the rows max
        ${b}
        for (var col = lindex; col < cols; col += wg) {
          let value = getValue(row, col, row_stride);
          threadMax = max(threadMax, value);
        }
        if (lindex < cols) {
          threadShared[lindex] = threadMax;
        }
        workgroupBarrier();

        var reduceSize = min(cols, wg);
        for (var currSize = reduceSize >> 1;  currSize > 0; currSize = reduceSize >> 1) {
          reduceSize = currSize + (reduceSize & 1);
          if (lindex < currSize) {
            threadShared[lindex] = max(threadShared[lindex], threadShared[lindex + reduceSize]);
          }
          workgroupBarrier();
        }
        if (lindex == 0) {
          rowMaxShared = ${w}(${f("threadShared[0]",o)});
        }
        workgroupBarrier();

        // find the rows sum
        var threadSum = ${w}(0.0);
        for (var col = lindex; col < cols; col += wg) {
          let subExp = exp(getValue(row, col, row_stride) - rowMaxShared);
          threadSum += subExp;
        }
        threadShared[lindex] = threadSum;
        workgroupBarrier();

        for (var currSize = wg >> 1;  currSize > 0; currSize = currSize >> 1) {
          if (lindex < currSize) {
            threadShared[lindex] = threadShared[lindex] + threadShared[lindex + currSize];
          }
          workgroupBarrier();
        }
        if (lindex == 0) {
          rowSumShared = ${w}(${at("threadShared[0]",o)});
        }
        workgroupBarrier();

        // calculate final value for each element in the row
        for (var col = lindex; col < cols; col += wg) {
          let value = exp(getValue(row, col, row_stride) - rowMaxShared) / rowSumShared;
          setValue(row, col, row_stride, value);
        }
      }`;return{name:"Softmax",shaderCache:{hint:`${o}`,inputDependencies:["type"]},getRunData:()=>({outputs:[{dims:r,dataType:e.dataType}],dispatchGroup:{x:l},programUniforms:[{type:"uint32",data:c}]}),getShaderSource:$}},Yu=(e,t)=>{Ep(e.inputs),e.compute(Tp(e.inputs[0],t))},Zu=e=>Q({axis:e.axis})});var Op,kp,Rp,Pp,Bp,Xu,Ju,el=j(()=>{"use strict";ye();ke();be();Op=e=>{if(!e||e.length<1)throw new Error("too few inputs")},kp=(e,t)=>{let r=[],a=t.numOutputs;return e[1].dims[0]>0&&(e[1].getBigInt64Array().forEach(n=>r.push(Number(n))),a=r.length),Q({numOutputs:a,axis:t.axis,splitSizes:r})},Rp=e=>`
fn calculateOutputIndex(index: u32) -> u32 {
    for (var i: u32 = 0u; i < ${e}u; i += 1u ) {
    if (index < sizeInConcatAxis[i]) {
        return i;
    }
    }
    return ${e}u;
}`,Pp=e=>{let t=e.length,r=[];for(let a=0;a<t;++a){let n=e[a].setByIndices("indices","input[global_idx]");t===1?r.push(n):a===0?r.push(`if (outputNumber == ${a}u) { ${n} }`):a===t-1?r.push(`else { ${n} }`):r.push(`else if (outputNumber == ${a}) { ${n} }`)}return`
      fn writeBufferData(outputNumber: u32, indices: ${e[0].type.indices}, global_idx: u32) {
        ${r.join(`
`)}
      }`},Bp=(e,t)=>{let r=e[0].dims,a=z.size(r),n=e[0].dataType,i=r.length,u=t.axis,l=u<0?r.length+u:u,o=new Array(t.numOutputs),c=V("input",n,r),f=new Array(t.numOutputs),y=[],m=[],w=0;for(let I=0;I<t.numOutputs;I++){w+=t.splitSizes[I],f[I]=w;let x=r.slice();x[t.axis]=t.splitSizes[I],m.push(x),o[I]=K(`output${I}`,n,m[I]),y.push({dims:m[I],dataType:e[0].dataType})}let b=i<2?"indices":`indices[${l}]`,$=I=>`
  ${I.declareVariables(c,...o)}
  const sizeInConcatAxis = array<u32, ${f.length}>(${f.map(x=>`${x}u`).join(",")});
  ${Rp(f.length)}
  ${Pp(o)}

  ${I.mainStart()}
    ${I.guardAgainstOutOfBoundsWorkgroupSizes(a)}

    var indices = ${c.offsetToIndices("global_idx")};
    let outputNumber = calculateOutputIndex(${b});
    if (outputNumber != 0) {
        ${b} -= sizeInConcatAxis[outputNumber - 1u];
    }
    writeBufferData(outputNumber, indices, global_idx);
  }`;return{name:"Split",shaderCache:{hint:t.cacheKey},getShaderSource:$,getRunData:()=>({outputs:y,dispatchGroup:{x:Math.ceil(a/64)}})}},Xu=(e,t)=>{Op(e.inputs);let r=e.inputs.length===1?t:kp(e.inputs,t);e.compute(Bp(e.inputs,r),{inputs:[0]})},Ju=e=>{let t=e.axis,r=e.splitSizes,a=e.numOutputs<0?r.length:e.numOutputs;if(a!==r.length)throw new Error("numOutputs and splitSizes lengh must be equal");return Q({axis:t,numOutputs:a,splitSizes:r})}});var tl,Mp,zp,Dp,rl,nl=j(()=>{"use strict";ze();ye();be();tl=e=>Array.from(e.getBigInt64Array(),Number),Mp=e=>{if(!e||e.length!==2)throw new Error("Tile requires 2 inputs.");if(e[0].dataType!==1&&e[0].dataType!==6&&e[0].dataType!==12)throw new Error("Tile only support float, int32, and uint32 data types");if(e[1].dataType!==7)throw new Error("Tile `repeats` input should be of int64 data type");if(e[1].dims.length!==1)throw new Error("Tile `repeats` input should be 1-D");if(tl(e[1]).length!==e[0].dims.length)throw new Error("Tile `repeats` input should have same number of elements as rank of input data tensor")},zp=(e,t)=>{let r=[];for(let a=0;a<e.length;++a)r.push(e[a]*t[a]);return r},Dp=e=>{let t=e[0].dims,r=tl(e[1]),a=zp(t,r),n=z.size(a),i=e[0].dataType,u=V("input",i,t),l=K("output",i,a),o=c=>`
      const inputShape = ${u.indices(...t)};
      ${c.declareVariables(u,l)}
      ${c.mainStart()}
      ${c.guardAgainstOutOfBoundsWorkgroupSizes(n)}
      let outputIndices = ${l.offsetToIndices("global_idx")};
      var inputIndices: ${u.type.indices};
      for (var i = 0; i < ${t.length}; i++) {
        let inputDimValue = ${l.indicesGet("outputIndices","i")}  % ${u.indicesGet("inputShape","i")};

        ${u.indicesSet("inputIndices","i","inputDimValue")}
      }
      ${l.setByOffset("global_idx",u.getByIndices("inputIndices"))}
    }`;return{name:"Tile",shaderCache:{hint:`${r}`},getRunData:()=>({outputs:[{dims:a,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(n/64)}}),getShaderSource:o}},rl=e=>{Mp(e.inputs),e.compute(Dp(e.inputs),{inputs:[0]})}});var Wp,Vp,al,ol=j(()=>{"use strict";ze();ye();be();Wp=(e,t,r,a,n)=>{let i=z.size(r),u=Math.ceil(i/4),l=K("outputData",n,r,4),o=V("aData",t[1].dataType,t[1].dims,4),c=V("bData",t[2].dataType,t[2].dims,4),f=V("cData",t[0].dataType,t[0].dims,4),y,m=(w,b,$)=>`select(${b}, ${w}, ${$})`;if(!a)y=l.setByOffset("global_idx",m(o.getByOffset("global_idx"),c.getByOffset("global_idx"),f.getByOffset("global_idx")));else{let w=(b,$,I="")=>{let x=`aData[indexA${$}][componentA${$}]`,_=`bData[indexB${$}][componentB${$}]`,R=`bool(cData[indexC${$}] & ${4278190080>>>(3-$)*8}u)`;return`
            let outputIndices${$} = ${l.offsetToIndices(`global_idx * 4u + ${$}u`)};
            let offsetA${$} = ${o.broadcastedIndicesToOffset(`outputIndices${$}`,l)};
            let offsetB${$} = ${c.broadcastedIndicesToOffset(`outputIndices${$}`,l)};
            let offsetC${$} = ${f.broadcastedIndicesToOffset(`outputIndices${$}`,l)};
            let indexA${$} = offsetA${$} / 4u;
            let indexB${$} = offsetB${$} / 4u;
            let indexC${$} = offsetC${$} / 4u;
            let componentA${$} = offsetA${$} % 4u;
            let componentB${$} = offsetB${$} % 4u;
            ${b}[${$}] = ${I}(${m(x,_,R)});
          `};n===9?y=`
            var data = vec4<u32>(0);
            ${w("data",0,"u32")}
            ${w("data",1,"u32")}
            ${w("data",2,"u32")}
            ${w("data",3,"u32")}
            outputData[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));`:y=`
            ${w("outputData[global_idx]",0)}
            ${w("outputData[global_idx]",1)}
            ${w("outputData[global_idx]",2)}
            ${w("outputData[global_idx]",3)}
          `}return`
        ${e.declareVariables(f,o,c,l)}
        ${e.mainStart()}
        ${e.guardAgainstOutOfBoundsWorkgroupSizes(u)}
        ${y}
      }`},Vp=e=>{let t=e[1].dims,r=e[2].dims,a=e[0].dims,n=e[1].dataType,i=!(z.areEqual(t,r)&&z.areEqual(r,a)),u=t,l=z.size(t);if(i){let o=pt.calcShape(pt.calcShape(t,r,!1),a,!1);if(!o)throw new Error("Can't perform where op on the given tensors");u=o,l=z.size(u)}return{name:"Where",getShaderSource:o=>Wp(o,e,u,i,n),getRunData:()=>({outputs:[{dims:u,dataType:n}],dispatchGroup:{x:Math.ceil(l/64/4)}})}},al=e=>{e.compute(Vp(e.inputs))}});var il,sl=j(()=>{"use strict";Ai();ta();ki();Pi();ps();xs();_s();ia();Vs();Hs();qs();Zs();Js();ru();ou();uu();cu();fu();yu();vu();zu();Wu();on();Uu();Gu();Ku();Qu();el();nl();Qt();ra();ol();il=new Map([["Abs",[Bi]],["Acos",[Mi]],["Acosh",[zi]],["Add",[fs]],["ArgMax",[_i,ea]],["ArgMin",[Ci,ea]],["Asin",[Di]],["Asinh",[Wi]],["Atan",[Vi]],["Atanh",[Ni]],["Attention",[Ti,Ei]],["AveragePool",[Au,_u]],["BatchNormalization",[Oi]],["BiasAdd",[Ri]],["BiasSplitGelu",[cs]],["Cast",[Hi,Ui]],["Ceil",[Gi]],["Clip",[Li]],["Concat",[Is,Cs]],["Conv",[ua,sa]],["ConvTranspose",[Ws,Ds]],["Cos",[Fi]],["Cosh",[ji]],["CumSum",[Ns,Us]],["Div",[ms]],["Einsum",[Fs,js]],["Elu",[qi,ln]],["Equal",[hs]],["Erf",[Ki]],["Exp",[Yi]],["Expand",[Ys]],["Floor",[Zi]],["FusedConv",[ua,sa]],["Gather",[Xs,Qs]],["GatherElements",[tu,eu]],["Gelu",[Qi]],["Gemm",[nu,au]],["GlobalAveragePool",[Ou,Tu]],["GlobalMaxPool",[Mu,Bu]],["Greater",[ws]],["GreaterOrEqual",[$s]],["InstanceNormalization",[su,iu]],["LayerNormalization",[du,lu]],["LeakyRelu",[Xi,ln]],["Less",[vs]],["LessOrEqual",[Ss]],["Log",[ds]],["MatMul",[pu]],["MaxPool",[Ru,Pu]],["Mul",[gs]],["MultiHeadAttention",[gu,hu]],["Neg",[es]],["Not",[Ji]],["Pad",[bu,wu]],["Pow",[ys]],["Range",[Du]],["Reciprocal",[ts]],["ReduceMin",[wi,it]],["ReduceMean",[mi,it]],["ReduceMax",[bi,it]],["ReduceSum",[$i,it]],["ReduceProd",[vi,it]],["ReduceL1",[hi,it]],["ReduceL2",[gi,it]],["ReduceLogSum",[xi,it]],["ReduceLogSumExp",[yi,it]],["ReduceSumSquare",[Si,it]],["Relu",[rs]],["Resize",[Vu,Nu]],["Sigmoid",[ns]],["Sin",[as]],["Sinh",[os]],["Slice",[ju,qu]],["SkipLayerNormalization",[Hu,Lu]],["Split",[Xu,Ju]],["Sqrt",[is]],["Softmax",[Yu,Zu]],["Sub",[bs]],["Tan",[ss]],["Tanh",[us]],["ThresholdedRelu",[ls,ln]],["Tile",[rl]],["Transpose",[ti,ri]],["Where",[al]]])});var wn,ul=j(()=>{"use strict";ze();Et();be();wn=class{constructor(t){this.backend=t;this.repo=new Map,this.attributesBound=!1}getArtifact(t){return this.repo.get(t)}setArtifact(t,r){this.repo.set(t,r)}run(t,r,a,n,i,u,l){let o=this.backend.device,c=this.backend.getComputePassEncoder();c.setPipeline(t.computePipeline);let f=[];for(let m of n)f.push({binding:f.length,resource:{buffer:m.buffer}});for(let m of i)f.push({binding:f.length,resource:{buffer:m.buffer}});l&&f.push({binding:f.length,resource:l});let y=o.createBindGroup({layout:t.computePipeline.getBindGroupLayout(0),entries:f,label:t.programInfo.name});if(c.setBindGroup(0,y),c.dispatchWorkgroups(...u),this.backend.pendingDispatchNumber++,this.backend.isQueryEnabled()){typeof this.backend.queryData>"u"&&(this.backend.queryData=this.backend.gpuDataManager.create(this.backend.querySetCount*8,GPUBufferUsage.COPY_SRC|GPUBufferUsage.QUERY_RESOLVE));let m=this.backend.gpuDataManager.create(this.backend.querySetCount*8,GPUBufferUsage.MAP_READ|GPUBufferUsage.COPY_DST);this.backend.endComputePass(),this.backend.getCommandEncoder().resolveQuerySet(this.backend.querySet,0,2,this.backend.queryData.buffer,0),this.backend.getCommandEncoder().copyBufferToBuffer(this.backend.queryData.buffer,0,m.buffer,0,this.backend.querySetCount*8),this.backend.flush();let w=this.backend.currentKernelId,b=this.backend.kernels.get(w),$=`[${b[0]}] ${b[1]}`;m.buffer.mapAsync(GPUMapMode.READ).then(()=>{let I=new BigUint64Array(m.buffer.getMappedRange()),x=I[0],_=I[1];m.buffer.unmap(),typeof this.backend.queryTimeBase>"u"&&(this.backend.queryTimeBase=x);let R=Number(x-this.backend.queryTimeBase),E=Number(_-this.backend.queryTimeBase);if(!Number.isSafeInteger(R)||!Number.isSafeInteger(E))throw new RangeError("incorrect timestamp range");this.backend.gpuDataManager.release(m.id);let D="";r.forEach((W,N)=>{D+=`input[${N}]: [${W.dims}] | ${yr(W.dataType)}, `});let P="";a.forEach((W,N)=>{P+=`output[${N}]: [${W.dims}] | ${yr(W.dataType)}, `}),console.log(`[profiling] kernel "${w}|${$}|${t.programInfo.name}" ${D}${P}execution time: ${E-R} ns`)})}this.backend.pendingDispatchNumber>=16&&this.backend.flush()}dispose(){}build(t,r){let a=this.backend.device,n=[];a.features.has("shader-f16")&&n.push("enable f16;");let i=Jo(r),u=t.getShaderSource(i),l=`${n.join(`
`)}
${i.additionalImplementations}
${u}`,o=a.createShaderModule({code:l,label:t.name});Pe("verbose",()=>`[WebGPU] ${t.name} shader code: ${l}`);let c=a.createComputePipeline({compute:{module:o,entryPoint:"main"},layout:"auto",label:t.name});return{programInfo:t,computePipeline:c}}normalizeDispatchGroupSize(t){let r=typeof t=="number"?t:t.x,a=typeof t=="number"?1:t.y||1,n=typeof t=="number"?1:t.z||1,i=this.backend.device.limits.maxComputeWorkgroupsPerDimension;if(r<=i&&a<=i&&n<=i)return[r,a,n];let u=r*a*n,l=Math.ceil(Math.sqrt(u));if(l>i){if(l=Math.ceil(Math.cbrt(u)),l>i)throw new Error("Total dispatch size exceeds WebGPU maximum.");return[l,l,l]}else return[l,l,1]}}});var Np,Up,vn,ll=j(()=>{"use strict";Et();jo();Zo();sl();ul();Np=(e,t)=>{if(t.length!==e.length)throw new Error(`inputDependencies length ${t.length} is not equal to inputTensors length ${e.length}.`);let r=[];for(let a=0;a<e.length;++a){let n=e[a].dataType;switch(t[a]){case"none":{r.push("");break}case"type":{r.push(`${n}`);break}case"rank":{let i=e[a].dims.length;r.push(`${n};${i}`);break}case"dims":{let i=e[a].dims.join(",");r.push(`${n};${i}`);break}default:throw new Error(`unsupported input dependency: ${t[a]}`)}}return r.join("|")},Up=(e,t,r)=>{let a=e.name;return e.shaderCache?.hint&&(a+="["+e.shaderCache.hint+"]"),a+=":"+r+`:${Np(t,e.shaderCache?.inputDependencies??new Array(t.length).fill("dims"))}`,a},vn=class{constructor(){this.currentKernelId=null;this.commandEncoder=null;this.computePassEncoder=null;this.pendingDispatchNumber=0;this.querySetCount=2;this.sessionExternalDataMapping=new Map}get currentKernelCustomData(){if(this.currentKernelId===null)throw new Error("currentKernelCustomData(): currentKernelId is null. (should not happen)");let t=this.kernelCustomData.get(this.currentKernelId);return t||(t={},this.kernelCustomData.set(this.currentKernelId,t)),t}async initialize(t){if(!navigator.gpu)throw new Error("WebGpuBackend: WebGPU is not available.");let r=await navigator.gpu.requestAdapter();if(!r)throw new Error("WebGpuBackend: Failed to get GPU adapter.");this.env=t;let a=[],n={requiredLimits:{maxComputeWorkgroupStorageSize:r.limits.maxComputeWorkgroupStorageSize,maxComputeWorkgroupsPerDimension:r.limits.maxComputeWorkgroupsPerDimension,maxStorageBufferBindingSize:r.limits.maxStorageBufferBindingSize,maxBufferSize:r.limits.maxBufferSize,maxComputeInvocationsPerWorkgroup:r.limits.maxComputeInvocationsPerWorkgroup,maxComputeWorkgroupSizeX:r.limits.maxComputeWorkgroupSizeX,maxComputeWorkgroupSizeY:r.limits.maxComputeWorkgroupSizeY,maxComputeWorkgroupSizeZ:r.limits.maxComputeWorkgroupSizeZ},requiredFeatures:a};r.features.has("timestamp-query")&&a.push("timestamp-query"),r.features.has("shader-f16")&&a.push("shader-f16"),this.device=await r.requestDevice(n),this.gpuDataManager=Yo(this),this.programManager=new wn(this),this.kernels=new Map,this.kernelPersistentData=new Map,this.kernelCustomData=new Map,Go(t.logLevel,!!t.debug),this.device.onuncapturederror=i=>{i.error instanceof GPUValidationError&&console.error(`An uncaught WebGPU validation error was raised: ${i.error.message}`)},Object.defineProperty(this.env.webgpu,"device",{value:this.device})}dispose(){typeof this.querySet<"u"&&this.querySet.destroy(),this.gpuDataManager.dispose()}getCommandEncoder(){return this.commandEncoder||(this.commandEncoder=this.device.createCommandEncoder()),this.commandEncoder}getComputePassEncoder(){if(!this.computePassEncoder){let t={};this.isQueryEnabled()&&(typeof this.querySet>"u"&&(this.querySet=this.device.createQuerySet({type:"timestamp",count:this.querySetCount})),t.timestampWrites={querySet:this.querySet,beginningOfPassWriteIndex:0,endOfPassWriteIndex:1}),this.computePassEncoder=this.getCommandEncoder().beginComputePass(t)}return this.computePassEncoder}endComputePass(){this.computePassEncoder&&(this.computePassEncoder.end(),this.computePassEncoder=null)}flush(){this.commandEncoder&&(this.endComputePass(),this.device.queue.submit([this.getCommandEncoder().finish()]),this.gpuDataManager.refreshPendingBuffers(),this.commandEncoder=null,this.pendingDispatchNumber=0)}isQueryEnabled(){return!!(this.device.features.has("timestamp-query")&&this.env.webgpu.profilingMode==="default")}run(t,r,a,n,i){let u=[];for(let _=0;_<r.length;++_){let R=this.gpuDataManager.get(r[_].data);if(!R)throw new Error(`no GPU data for input: ${r[_].data}`);u[_]=R}let{outputs:l,dispatchGroup:o,programUniforms:c}=t.getRunData(r),f=a.length===0?l.map((_,R)=>R):a;if(f.length!==l.length)throw new Error(`Output size ${f.length} must be equal to ${l.length}.`);let y=[],m=[];for(let _=0;_<l.length;++_){if(!Number.isInteger(f[_])||f[_]<-3||f[_]>=l.length)throw new Error(`Invalid output index: ${f[_]}`);if(f[_]===-3)continue;let R=f[_]===-1,E=f[_]===-2,D=R||E?i(l[_].dataType,l[_].dims):n(f[_],l[_].dataType,l[_].dims),P=this.gpuDataManager.get(D.data);if(!P)throw new Error(`no GPU data for output: ${D.data}`);if(R&&this.temporaryData.push(P),E){let W=this.kernelPersistentData.get(this.currentKernelId);W||(W=[],this.kernelPersistentData.set(this.currentKernelId,W)),W.push(P)}y.push(D),m.push(P)}let w;if(c){let _=0,R=[];c.forEach(W=>{let N=typeof W.data=="number"?[W.data]:W.data;if(N.length===0)return;let F=N.length<=2?N.length*4:16;_=Math.ceil(_/F)*F,R.push(_),_+=N.length>4?Math.ceil(N.length/4)*16:N.length*4});let E=16;_=Math.ceil(_/E)*E;let D=new ArrayBuffer(_);c.forEach((W,N)=>{let F=R[N],te=typeof W.data=="number"?[W.data]:W.data;W.type==="int32"?new Int32Array(D,F,te.length).set(te):W.type==="uint32"?new Uint32Array(D,F,te.length).set(te):new Float32Array(D,F,te.length).set(te)});let P=this.gpuDataManager.create(_,GPUBufferUsage.COPY_DST|GPUBufferUsage.UNIFORM);this.device.queue.writeBuffer(P.buffer,0,D,0,_),this.gpuDataManager.release(P.id),w={offset:0,size:_,buffer:P.buffer}}let b=this.programManager.normalizeDispatchGroupSize(o),$=b[1]===1&&b[2]===1,I=Up(t,r,$),x=this.programManager.getArtifact(I);return x||(x=this.programManager.build(t,b),this.programManager.setArtifact(I,x),Pe("info",()=>`[artifact] key: ${I}, programName: ${t.name}`)),Pe("info",()=>`[ProgramManager] run "${t.name}" (key=${I}) with ${b[0]}x${b[1]}x${b[2]}`),this.programManager.run(x,r,y,u,m,b,w),y}upload(t,r){this.gpuDataManager.upload(t,r)}memcpy(t,r){this.gpuDataManager.memcpy(t,r)}async download(t,r){await this.gpuDataManager.download(t,r)}alloc(t){return this.gpuDataManager.create(t).id}free(t){return this.gpuDataManager.release(t)}createKernel(t,r,a,n){let i=il.get(t);if(!i)throw new Error(`kernel not implemented: ${t}`);this.kernels.set(r,[t,n,i[0],[i[1],a]])}releaseKernel(t){let r=this.kernelPersistentData.get(t);if(r){for(let a of r)this.gpuDataManager.release(a.id);this.kernelPersistentData.delete(t)}this.kernelCustomData.delete(t),this.kernels.delete(t)}computeKernel(t,r,a){let n=this.kernels.get(t);if(!n)throw new Error(`kernel not created: ${t}`);let[i,u,l,o]=n;if(this.currentKernelId!==null)throw new Error(`kernel "[${i}] ${u}" is not allowed to be called recursively`);this.currentKernelId=t,o[0]&&(o[1]=o[0](o[1]),o[0]=void 0),Pe("info",()=>`[WebGPU] Start to run kernel "[${i}] ${u}"...`);let c=this.env.debug;this.temporaryData=[];try{return c&&this.device.pushErrorScope("validation"),l(r,o[1]),0}catch(f){return a.push(Promise.resolve(`[WebGPU] Kernel "[${i}] ${u}" failed. ${f}`)),1}finally{c&&a.push(this.device.popErrorScope().then(f=>f?`GPU validation error for kernel "[${i}] ${u}": ${f.message}`:null));for(let f of this.temporaryData)this.gpuDataManager.release(f.id);this.temporaryData=[],this.currentKernelId=null}}registerBuffer(t,r,a,n){let i=this.sessionExternalDataMapping.get(t);i||(i=new Map,this.sessionExternalDataMapping.set(t,i));let u=i.get(r),l=this.gpuDataManager.registerExternalBuffer(a,n,u?.[1]);return i.set(r,[l,a]),l}unregisterBuffers(t){let r=this.sessionExternalDataMapping.get(t);r&&(r.forEach(a=>this.gpuDataManager.unregisterExternalBuffer(a[1])),this.sessionExternalDataMapping.delete(t))}getBuffer(t){let r=this.gpuDataManager.get(t);if(!r)throw new Error(`no GPU data for buffer: ${t}`);return r.buffer}createDownloader(t,r,a){return async()=>{let n=await qn(this,t,r);return Fo(n.buffer,a)}}}});var dl={};Wt(dl,{init:()=>Hp});var xr,ma,Hp,cl=j(()=>{"use strict";ze();ll();Et();ye();xr=class e{constructor(t,r,a,n){this.module=t;this.dataType=r;this.data=a;this.dims=n}getFloat32Array(){if(this.dataType!==1)throw new Error("Invalid data type");let t=z.size(this.dims);return t===0?new Float32Array:new Float32Array(this.module.HEAP8.buffer,this.data,t)}getBigInt64Array(){if(this.dataType!==7)throw new Error("Invalid data type");let t=z.size(this.dims);return t===0?new BigInt64Array:new BigInt64Array(this.module.HEAP8.buffer,this.data,t)}getInt32Array(){if(this.dataType!==6)throw new Error("Invalid data type");let t=z.size(this.dims);return t===0?new Int32Array:new Int32Array(this.module.HEAP8.buffer,this.data,t)}reshape(t){if(z.size(t)!==z.size(this.dims))throw new Error("Invalid new shape");return new e(this.module,this.dataType,this.data,t)}},ma=class{constructor(t,r,a){this.module=t;this.backend=r;this.customDataOffset=0;this.customDataSize=0;let n=t.HEAPU32,i=a>>2;this.opKernelContext=n[i++];let u=n[i++];this.outputCount=n[i++],this.customDataOffset=n[i++],this.customDataSize=n[i++];let l=[];for(let o=0;o<u;o++){let c=n[i++],f=n[i++],y=n[i++],m=[];for(let w=0;w<y;w++)m.push(n[i++]);l.push(new xr(t,c,f,m))}this.inputs=l}get kernelCustomData(){return this.backend.currentKernelCustomData}get customDataBuffer(){return this.module.HEAPU8.subarray(this.customDataOffset,this.customDataOffset+this.customDataSize)}compute(t,r){let a=r?.inputs?.map(l=>typeof l=="number"?this.inputs[l]:l)??this.inputs,n=r?.outputs??[],i=(l,o,c)=>new xr(this.module,o,this.output(l,c),c),u=(l,o)=>{let c=br(l);if(!c)throw new Error(`Unsupported data type: ${l}`);let f=c*z.size(o);return new xr(this.module,l,this.backend.gpuDataManager.create(f).id,o)};return this.backend.run(t,a,n,i,u)}output(t,r){let a=this.module.stackSave();try{let n=this.module.stackAlloc((1+r.length)*4),i=n>>2;this.module.HEAPU32[i++]=r.length;for(let u=0;u<r.length;u++)this.module.HEAPU32[i++]=r[u];return this.module._JsepOutput(this.opKernelContext,t,n)}catch(n){throw new Error(`Failed to generate kernel's output[${t}] with dims [${r}]. If you are running with pre-allocated output, please make sure the output type/dims are correct. Error: ${n}`)}finally{this.module.stackRestore(a)}}},Hp=async(e,t)=>{let r=e.jsepInit;if(r&&navigator.gpu){if(!t.wasm.simd)throw new Error("Not supported for WebGPU=ON and SIMD=OFF. Please set `env.wasm.simd` to true when using WebGPU EP");let a=new vn;await a.initialize(t),r(a,n=>a.alloc(n),n=>a.free(n),(n,i,u,l=!1)=>{if(l)Pe("verbose",()=>`[WebGPU] jsepCopyGpuToGpu: src=${n}, dst=${i}, size=${u}`),a.memcpy(n,i);else{Pe("verbose",()=>`[WebGPU] jsepCopyCpuToGpu: dataOffset=${n}, gpuDataId=${i}, size=${u}`);let o=e.HEAPU8.subarray(n,n+u);a.upload(i,o)}},async(n,i,u)=>{Pe("verbose",()=>`[WebGPU] jsepCopyGpuToCpu: gpuDataId=${n}, dataOffset=${i}, size=${u}`),await a.download(n,()=>e.HEAPU8.subarray(i,i+u))},(n,i,u)=>a.createKernel(n,i,u,t.debug||t.webgpu.profilingMode==="default"?e.UTF8ToString(e._JsepGetNodeName(i)):`${i}`),n=>a.releaseKernel(n),(n,i,u,l)=>{Pe("verbose",()=>`[WebGPU] jsepRun: sessionHandle=${u}, kernel=${n}, contextDataOffset=${i}`);let o=new ma(e,a,i);return a.computeKernel(n,o,l)})}}});var fl,Lp,Gp,ml,Ir,hl,ha,ga,gl,yl,pl,bl,wl,vl,$l=j(()=>{"use strict";Vo();Uo();ze();Zt();Qr();fl=!1,Lp=e=>{let t=Me(),r=t.stackSave();try{let a=t.stackAlloc(8);return t._OrtGetInputOutputCount(e,a,a+4)!==0&&Oe("Can't get session input/output count."),[t.HEAP32[a/4],t.HEAP32[a/4+1]]}finally{t.stackRestore(r)}},Gp=(e,t)=>{Me()._OrtInit(e,t)!==0&&Oe("Can't initialize onnxruntime.")},ml=async e=>{Gp(e.wasm.numThreads,wr(e.logLevel));{let t=(cl(),At(dl)).init;await t(Me(),e)}fl=!0},Ir=new Map,hl=()=>fl,ha=e=>{let t=Me(),r=t._malloc(e.byteLength);if(r===0)throw new Error(`Can't create a session. failed to allocate a buffer of size ${e.byteLength}.`);return t.HEAPU8.set(e,r),[r,e.byteLength]},ga=(e,t)=>{let r=Me(),a=0,n=0,i=0,u=[],l=[],o=[];try{[n,u]=No(t),a=r._OrtCreateSession(e[0],e[1],n),a===0&&Oe("Can't create a session.");let[c,f]=Lp(a),y=[],m=[],w=[];for(let $=0;$<c;$++){let I=r._OrtGetInputName(a,$);I===0&&Oe("Can't get an input name."),l.push(I),y.push(r.UTF8ToString(I))}for(let $=0;$<f;$++){let I=r._OrtGetOutputName(a,$);I===0&&Oe("Can't get an output name."),o.push(I);let x=r.UTF8ToString(I);m.push(x);{let _=typeof t?.preferredOutputLocation=="string"?t.preferredOutputLocation:t?.preferredOutputLocation?.[x]??"cpu";if(_!=="cpu"&&_!=="cpu-pinned"&&_!=="gpu-buffer")throw new Error(`Not supported preferred output location: ${_}.`);w.push(_)}}let b=null;return w.some($=>$==="gpu-buffer")&&(i=r._OrtCreateBinding(a),i===0&&Oe("Can't create IO binding."),b={handle:i,outputPreferredLocations:w,outputPreferredLocationsEncoded:w.map($=>Fn($))}),Ir.set(a,[a,l,o,b]),[a,y,m]}catch(c){throw l.forEach(f=>r._OrtFree(f)),o.forEach(f=>r._OrtFree(f)),i!==0&&r._OrtReleaseBinding(i),a!==0&&r._OrtReleaseSession(a),c}finally{r._free(e[0]),n!==0&&r._OrtReleaseSessionOptions(n),u.forEach(c=>r._free(c))}},gl=(e,t)=>{let r=ha(e);return ga(r,t)},yl=e=>{let t=Me(),r=Ir.get(e);if(!r)throw new Error(`cannot release session. invalid session id: ${e}`);let[a,n,i,u]=r;u&&t._OrtReleaseBinding(u.handle),t.jsepUnregisterBuffers?.(e),n.forEach(l=>t._OrtFree(l)),i.forEach(l=>t._OrtFree(l)),t._OrtReleaseSession(a),Ir.delete(e)},pl=(e,t,r,a,n)=>{if(!e){t.push(0);return}let i=Me(),u=e[0],l=e[1],o=e[3],c,f;if(u==="string"&&o==="gpu-buffer")throw new Error("String tensor is not supported on GPU.");if(o==="gpu-buffer"){let w=e[2].gpuBuffer,b=br(Gn(u));f=l.reduce(($,I)=>$*I,1)*b,c=i.jsepRegisterBuffer(a,n,w,f)}else{let w=e[2];if(Array.isArray(w)){f=4*w.length,c=i._malloc(f),r.push(c);let b=c/4;for(let $=0;$<w.length;$++){if(typeof w[$]!="string")throw new TypeError(`tensor data at index ${$} is not a string`);i.HEAPU32[b++]=We(w[$],r)}}else f=w.byteLength,c=i._malloc(f),r.push(c),i.HEAPU8.set(new Uint8Array(w.buffer,w.byteOffset,f),c)}let y=i.stackSave(),m=i.stackAlloc(4*l.length);try{let w=m/4;l.forEach($=>i.HEAP32[w++]=$);let b=i._OrtCreateTensor(Gn(u),c,f,m,l.length,Fn(o));b===0&&Oe(`Can't create tensor for input/output. session=${a}, index=${n}.`),t.push(b)}finally{i.stackRestore(y)}},bl=async(e,t,r,a,n,i)=>{let u=Me(),l=Ir.get(e);if(!l)throw new Error(`cannot run inference. invalid session id: ${e}`);let[o,c,f,y]=l,m=t.length,w=a.length,b=0,$=[],I=[],x=[],_=[],R=u.stackSave(),E=u.stackAlloc(m*4),D=u.stackAlloc(m*4),P=u.stackAlloc(w*4),W=u.stackAlloc(w*4);try{[b,$]=Wo(i);for(let X=0;X<m;X++)pl(r[X],I,_,e,t[X]);for(let X=0;X<w;X++)pl(n[X],x,_,e,m+a[X]);let N=E/4,F=D/4,te=P/4,B=W/4;for(let X=0;X<m;X++)u.HEAPU32[N++]=I[X],u.HEAPU32[F++]=c[t[X]];for(let X=0;X<w;X++)u.HEAPU32[te++]=x[X],u.HEAPU32[B++]=f[a[X]];if(y){let{handle:X,outputPreferredLocations:$e,outputPreferredLocationsEncoded:Y}=y;if(c.length!==m)throw new Error(`input count from feeds (${m}) is expected to be always equal to model's input count (${c.length}).`);for(let Se=0;Se<m;Se++){let Ce=t[Se];await u._OrtBindInput(X,c[Ce],I[Se])!==0&&Oe(`Can't bind input[${Se}] for session=${e}.`)}for(let Se=0;Se<w;Se++){let Ce=a[Se];n[Se]?.[3]?u._OrtBindOutput(X,f[Ce],x[Se],0)!==0&&Oe(`Can't bind pre-allocated output[${Se}] for session=${e}.`):u._OrtBindOutput(X,f[Ce],0,Y[Ce])!==0&&Oe(`Can't bind output[${Se}] to ${$e[Se]} for session=${e}.`)}}let q;y?q=await u._OrtRunWithBinding(o,y.handle,w,P,b):q=await u._OrtRun(o,D,E,m,W,w,P,b),q!==0&&Oe("failed to call OrtRun().");let pe=[];for(let X=0;X<w;X++){let $e=u.HEAPU32[P/4+X];if($e===x[X]){pe.push(n[X]);continue}let Y=u.stackSave(),Se=u.stackAlloc(4*4),Ce=!1,_e,he=0;try{u._OrtGetTensorData($e,Se,Se+4,Se+8,Se+12)!==0&&Oe(`Can't access output tensor data on index ${X}.`);let Ge=Se/4,je=u.HEAPU32[Ge++];he=u.HEAPU32[Ge++];let G=u.HEAPU32[Ge++],de=u.HEAPU32[Ge++],me=[];for(let Be=0;Be<de;Be++)me.push(u.HEAPU32[G/4+Be]);u._OrtFree(G);let Ue=me.reduce((Be,Ve)=>Be*Ve,1);_e=yr(je);let Qe=y?.outputPreferredLocations[a[X]];if(_e==="string"){if(Qe==="gpu-buffer")throw new Error("String tensor is not supported on GPU.");let Be=[],Ve=he/4;for(let qe=0;qe<Ue;qe++){let ut=u.HEAPU32[Ve++],et=qe===Ue-1?void 0:u.HEAPU32[Ve]-ut;Be.push(u.UTF8ToString(ut,et))}pe.push([_e,me,Be,"cpu"])}else if(Qe==="gpu-buffer"&&Ue>0){let Be=u.jsepGetBuffer(he),Ve=br(je);if(Ve===void 0||!Jr(_e))throw new Error(`Unsupported data type: ${_e}`);Ce=!0,pe.push([_e,me,{gpuBuffer:Be,download:u.jsepCreateDownloader(Be,Ue*Ve,_e),dispose:()=>{u._OrtReleaseTensor($e)}},"gpu-buffer"])}else{let Be=Xr(_e),Ve=new Be(Ue);new Uint8Array(Ve.buffer,Ve.byteOffset,Ve.byteLength).set(u.HEAPU8.subarray(he,he+Ve.byteLength)),pe.push([_e,me,Ve,"cpu"])}}finally{u.stackRestore(Y),_e==="string"&&he&&u._free(he),Ce||u._OrtReleaseTensor($e)}}return y&&u._OrtClearBoundOutputs(y.handle),pe}finally{u.stackRestore(R),I.forEach(N=>u._OrtReleaseTensor(N)),x.forEach(N=>u._OrtReleaseTensor(N)),_.forEach(N=>u._free(N)),b!==0&&u._OrtReleaseRunOptions(b),$.forEach(N=>u._free(N))}},wl=e=>{let t=Me(),r=Ir.get(e);if(!r)throw new Error("invalid session id");let a=r[0],n=t._OrtEndProfiling(a);n===0&&Oe("Can't get an profile file name."),t._OrtFree(n)},vl=e=>{let t=[];for(let r of e){let a=r[2];!Array.isArray(a)&&"buffer"in a&&t.push(a.buffer)}return t}});var Sl=Yt((rw,jp)=>{jp.exports='/*!\n * ONNX Runtime Web v1.17.0\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n"use strict";(()=>{var cn=Object.defineProperty;var Wu=Object.getOwnPropertyDescriptor;var Uu=Object.getOwnPropertyNames;var Nu=Object.prototype.hasOwnProperty;var q=(e,t)=>()=>(e&&(t=e(e=0)),t);var or=(e,t)=>()=>(t||e((t={exports:{}}).exports,t),t.exports),kr=(e,t)=>{for(var r in t)cn(e,r,{get:t[r],enumerable:!0})},Hu=(e,t,r,o)=>{if(t&&typeof t=="object"||typeof t=="function")for(let n of Uu(t))!Nu.call(e,n)&&n!==r&&cn(e,n,{get:()=>t[n],enumerable:!(o=Wu(t,n))||o.enumerable});return e};var Vt=e=>Hu(cn({},"__esModule",{value:!0}),e);var pn={};kr(pn,{readFile:()=>Gu});var Gu,mn=q(()=>{Gu=void 0});var fn={};kr(fn,{join:()=>Lu});var Lu,hn=q(()=>{Lu=void 0});var go=or((ho,gn)=>{"use strict";var fo=(()=>{var e=typeof document<"u"&&document.currentScript?document.currentScript.src:void 0;return typeof __filename<"u"&&(e=e||__filename),function(t={}){var r=t,o,n;r.ready=new Promise((l,m)=>{o=l,n=m}),r.jsepInit=(l,m,y,C,_,G,H,le)=>{r.Za=l,r.Oa=m,r.Qa=y,r.Ja=C,r.Pa=_,r.ra=G,r.Ra=H,r.Sa=le,m=(Z,oe,J)=>(...me)=>{let we=Xe,O=oe?.();me=Z(...me);let ie=oe?.();return O!==ie&&(Z=ie,J(O),oe=J=null),Xe!=we?$r():me},y=Z=>async(...oe)=>{try{if(r.Da)throw Error("Session already started");let J=r.Da={Ta:oe[0],errors:[]},me=await Z(...oe);if(r.Da!==J)throw Error("Session mismatch");l.flush();let we=J.errors;if(0<we.length){let O=await Promise.all(we);if(O=O.filter(ie=>ie),0<O.length)throw Error(O.join(`\n`))}return me}finally{r.Da=null}},r._OrtRun=y(m(r._OrtRun,()=>r._OrtRun,Z=>r._OrtRun=Z)),r._OrtRunWithBinding=y(m(r._OrtRunWithBinding,()=>r._OrtRunWithBinding,Z=>r._OrtRunWithBinding=Z)),r._OrtBindInput=m(r._OrtBindInput,()=>r._OrtBindInput,Z=>r._OrtBindInput=Z),r.jsepRegisterBuffer=(Z,oe,J,me)=>l.registerBuffer(Z,oe,J,me),r.jsepUnregisterBuffers=Z=>{l.unregisterBuffers(Z)},r.jsepGetBuffer=Z=>l.getBuffer(Z),r.jsepCreateDownloader=(Z,oe,J)=>l.createDownloader(Z,oe,J)};var s=Object.assign({},r),u="./this.program",d=(l,m)=>{throw m},a=typeof window=="object",p=typeof importScripts=="function",h=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string",$="",g,w,b;if(h){var v=(mn(),Vt(pn)),I=(hn(),Vt(fn));$=p?I.dirname($)+"/":__dirname+"/",g=(l,m)=>(l=l.startsWith("file://")?new URL(l):I.normalize(l),v.readFileSync(l,m?void 0:"utf8")),b=l=>(l=g(l,!0),l.buffer||(l=new Uint8Array(l)),l),w=(l,m,y,C=!0)=>{l=l.startsWith("file://")?new URL(l):I.normalize(l),v.readFile(l,C?void 0:"utf8",(_,G)=>{_?y(_):m(C?G.buffer:G)})},!r.thisProgram&&1<process.argv.length&&(u=process.argv[1].replace(/\\\\/g,"/")),process.argv.slice(2),d=(l,m)=>{throw process.exitCode=l,m},r.inspect=()=>"[Emscripten Module object]"}else(a||p)&&(p?$=self.location.href:typeof document<"u"&&document.currentScript&&($=document.currentScript.src),e&&($=e),$.indexOf("blob:")!==0?$=$.substr(0,$.replace(/[?#].*/,"").lastIndexOf("/")+1):$="",g=l=>{var m=new XMLHttpRequest;return m.open("GET",l,!1),m.send(null),m.responseText},p&&(b=l=>{var m=new XMLHttpRequest;return m.open("GET",l,!1),m.responseType="arraybuffer",m.send(null),new Uint8Array(m.response)}),w=(l,m,y)=>{var C=new XMLHttpRequest;C.open("GET",l,!0),C.responseType="arraybuffer",C.onload=()=>{C.status==200||C.status==0&&C.response?m(C.response):y()},C.onerror=y,C.send(null)});var x=r.print||console.log.bind(console),A=r.printErr||console.error.bind(console);Object.assign(r,s),s=null,r.thisProgram&&(u=r.thisProgram),r.quit&&(d=r.quit);var B;r.wasmBinary&&(B=r.wasmBinary);var E=r.noExitRuntime||!0;typeof WebAssembly!="object"&&Le("no native wasm support detected");var V,P,z=!1,U,F,te,R,j,pe,Q;function $e(){var l=V.buffer;r.HEAP8=F=new Int8Array(l),r.HEAP16=new Int16Array(l),r.HEAP32=R=new Int32Array(l),r.HEAPU8=te=new Uint8Array(l),r.HEAPU16=new Uint16Array(l),r.HEAPU32=j=new Uint32Array(l),r.HEAPF32=pe=new Float32Array(l),r.HEAPF64=Q=new Float64Array(l)}var Y=[],Se=[],Ie=[];function Ae(){var l=r.preRun.shift();Y.unshift(l)}var he=0,nt=null,He=null;function Le(l){throw r.onAbort&&r.onAbort(l),l="Aborted("+l+")",A(l),z=!0,U=1,l=new WebAssembly.RuntimeError(l+". Build with -sASSERTIONS for more info."),n(l),l}function L(l){return l.startsWith("data:application/octet-stream;base64,")}var de;if(de="ort-wasm-simd.wasm",!L(de)){var fe=de;de=r.locateFile?r.locateFile(fe,$):$+fe}function Ue(l){if(l==de&&B)return new Uint8Array(B);if(b)return b(l);throw"both async and sync fetching of the wasm failed"}function Ke(l){if(!B&&(a||p)){if(typeof fetch=="function"&&!l.startsWith("file://"))return fetch(l,{credentials:"same-origin"}).then(m=>{if(!m.ok)throw"failed to load wasm binary file at \'"+l+"\'";return m.arrayBuffer()}).catch(()=>Ue(l));if(w)return new Promise((m,y)=>{w(l,C=>m(new Uint8Array(C)),y)})}return Promise.resolve().then(()=>Ue(l))}function Re(l,m,y){return Ke(l).then(C=>WebAssembly.instantiate(C,m)).then(C=>C).then(y,C=>{A("failed to asynchronously prepare wasm: "+C),Le(C)})}function Ve(l,m){var y=de;return B||typeof WebAssembly.instantiateStreaming!="function"||L(y)||y.startsWith("file://")||h||typeof fetch!="function"?Re(y,l,m):fetch(y,{credentials:"same-origin"}).then(C=>WebAssembly.instantiateStreaming(C,l).then(m,function(_){return A("wasm streaming compile failed: "+_),A("falling back to ArrayBuffer instantiation"),Re(y,l,m)}))}var Fe,ot={912368:l=>{r.ra("Abs",l,void 0)},912419:l=>{r.ra("Neg",l,void 0)},912470:l=>{r.ra("Floor",l,void 0)},912523:l=>{r.ra("Ceil",l,void 0)},912575:l=>{r.ra("Reciprocal",l,void 0)},912633:l=>{r.ra("Sqrt",l,void 0)},912685:l=>{r.ra("Exp",l,void 0)},912736:l=>{r.ra("Erf",l,void 0)},912787:l=>{r.ra("Sigmoid",l,void 0)},912842:l=>{r.ra("Log",l,void 0)},912893:l=>{r.ra("Sin",l,void 0)},912944:l=>{r.ra("Cos",l,void 0)},912995:l=>{r.ra("Tan",l,void 0)},913046:l=>{r.ra("Asin",l,void 0)},913098:l=>{r.ra("Acos",l,void 0)},913150:l=>{r.ra("Atan",l,void 0)},913202:l=>{r.ra("Sinh",l,void 0)},913254:l=>{r.ra("Cosh",l,void 0)},913306:l=>{r.ra("Asinh",l,void 0)},913359:l=>{r.ra("Acosh",l,void 0)},913412:l=>{r.ra("Atanh",l,void 0)},913465:l=>{r.ra("Tanh",l,void 0)},913517:l=>{r.ra("Not",l,void 0)},913568:(l,m,y)=>{r.ra("Clip",l,{min:m,max:y})},913637:l=>{r.ra("Clip",l,void 0)},913689:(l,m)=>{r.ra("Elu",l,{alpha:m})},913747:l=>{r.ra("Relu",l,void 0)},913799:(l,m)=>{r.ra("LeakyRelu",l,{alpha:m})},913863:(l,m)=>{r.ra("ThresholdedRelu",l,{alpha:m})},913933:(l,m)=>{r.ra("Cast",l,{to:m})},913991:l=>{r.ra("Add",l,void 0)},914042:l=>{r.ra("Sub",l,void 0)},914093:l=>{r.ra("Mul",l,void 0)},914144:l=>{r.ra("Div",l,void 0)},914195:l=>{r.ra("Pow",l,void 0)},914246:l=>{r.ra("Equal",l,void 0)},914299:l=>{r.ra("Greater",l,void 0)},914354:l=>{r.ra("GreaterOrEqual",l,void 0)},914416:l=>{r.ra("Less",l,void 0)},914468:l=>{r.ra("LessOrEqual",l,void 0)},914527:(l,m,y,C,_)=>{r.ra("ReduceMean",l,{keepDims:!!m,noopWithEmptyAxes:!!y,axes:C?Array.from(R.subarray(_>>>0,_+C>>>0)):[]})},914691:(l,m,y,C,_)=>{r.ra("ReduceMax",l,{keepDims:!!m,noopWithEmptyAxes:!!y,axes:C?Array.from(R.subarray(_>>>0,_+C>>>0)):[]})},914854:(l,m,y,C,_)=>{r.ra("ReduceMin",l,{keepDims:!!m,noopWithEmptyAxes:!!y,axes:C?Array.from(R.subarray(_>>>0,_+C>>>0)):[]})},915017:(l,m,y,C,_)=>{r.ra("ReduceProd",l,{keepDims:!!m,noopWithEmptyAxes:!!y,axes:C?Array.from(R.subarray(_>>>0,_+C>>>0)):[]})},915181:(l,m,y,C,_)=>{r.ra("ReduceSum",l,{keepDims:!!m,noopWithEmptyAxes:!!y,axes:C?Array.from(R.subarray(_>>>0,_+C>>>0)):[]})},915344:(l,m,y,C,_)=>{r.ra("ReduceL1",l,{keepDims:!!m,noopWithEmptyAxes:!!y,axes:C?Array.from(R.subarray(_>>>0,_+C>>>0)):[]})},915506:(l,m,y,C,_)=>{r.ra("ReduceL2",l,{keepDims:!!m,noopWithEmptyAxes:!!y,axes:C?Array.from(R.subarray(_>>>0,_+C>>>0)):[]})},915668:(l,m,y,C,_)=>{r.ra("ReduceLogSum",l,{keepDims:!!m,noopWithEmptyAxes:!!y,axes:C?Array.from(R.subarray(_>>>0,_+C>>>0)):[]})},915834:(l,m,y,C,_)=>{r.ra("ReduceSumSquare",l,{keepDims:!!m,noopWithEmptyAxes:!!y,axes:C?Array.from(R.subarray(_>>>0,_+C>>>0)):[]})},916003:(l,m,y,C,_)=>{r.ra("ReduceLogSumExp",l,{keepDims:!!m,noopWithEmptyAxes:!!y,axes:C?Array.from(R.subarray(_>>>0,_+C>>>0)):[]})},916172:l=>{r.ra("Where",l,void 0)},916225:(l,m,y)=>{r.ra("Transpose",l,{perm:m?Array.from(R.subarray(y>>>0,y+m>>>0)):[]})},916338:(l,m,y,C,_,G,H,le,Z,oe,J,me,we,O,ie)=>{r.ra("ConvTranspose",l,{format:Z?"NHWC":"NCHW",autoPad:m,dilations:[y],group:C,kernel_shape:[_],pads:[G,H],strides:[le],wIsConst:()=>!!F[oe>>>0],outputPadding:J?Array.from(R.subarray(me>>>0,me+J>>>0)):[],outputShape:we?Array.from(R.subarray(O>>>0,O+we>>>0)):[],activation:Me(ie)})},916752:(l,m,y,C,_,G,H,le,Z,oe,J,me,we,O)=>{r.ra("ConvTranspose",l,{format:le?"NHWC":"NCHW",autoPad:m,dilations:Array.from(R.subarray(y>>>0,y+2>>>0)),group:C,kernelShape:Array.from(R.subarray(_>>>0,_+2>>>0)),pads:Array.from(R.subarray(G>>>0,G+4>>>0)),strides:Array.from(R.subarray(H>>>0,H+2>>>0)),wIsConst:()=>!!F[Z>>>0],outputPadding:0<oe?Array.from(R.subarray(J>>>0,J+oe>>>0)):[],outputShape:0<me?Array.from(R.subarray(we>>>0,we+me>>>0)):[],activation:Me(O)})},917309:(l,m,y,C,_,G,H,le,Z,oe,J,me,we,O,ie)=>{r.ra("ConvTranspose",l,{format:Z?"NHWC":"NCHW",autoPad:m,dilations:[y],group:C,kernel_shape:[_],pads:[G,H],strides:[le],wIsConst:()=>!!F[oe>>>0],outputPadding:J?Array.from(R.subarray(me>>>0,me+J>>>0)):[],outputShape:we?Array.from(R.subarray(O>>>0,O+we>>>0)):[],activation:Me(ie)})},917723:(l,m,y,C,_,G,H,le,Z,oe,J,me,we,O)=>{r.ra("ConvTranspose",l,{format:le?"NHWC":"NCHW",autoPad:m,dilations:Array.from(R.subarray(y>>>0,y+2>>>0)),group:C,kernelShape:Array.from(R.subarray(_>>>0,_+2>>>0)),pads:Array.from(R.subarray(G>>>0,G+4>>>0)),strides:Array.from(R.subarray(H>>>0,H+2>>>0)),wIsConst:()=>!!F[Z>>>0],outputPadding:0<oe?Array.from(R.subarray(J>>>0,J+oe>>>0)):[],outputShape:0<me?Array.from(R.subarray(we>>>0,we+me>>>0)):[],activation:Me(O)})},918280:(l,m)=>{r.ra("GlobalAveragePool",l,{format:m?"NHWC":"NCHW"})},918371:(l,m,y,C,_,G,H,le,Z,oe,J,me,we,O,ie,ge)=>{r.ra("AveragePool",l,{format:ge?"NHWC":"NCHW",auto_pad:m,ceil_mode:y,count_include_pad:C,storage_order:_,dilations:[G,H],kernel_shape:[le,Z],pads:[oe,J,me,we],strides:[O,ie]})},918655:(l,m)=>{r.ra("GlobalAveragePool",l,{format:m?"NHWC":"NCHW"})},918746:(l,m,y,C,_,G,H,le,Z,oe,J,me,we,O,ie,ge)=>{r.ra("AveragePool",l,{format:ge?"NHWC":"NCHW",auto_pad:m,ceil_mode:y,count_include_pad:C,storage_order:_,dilations:[G,H],kernel_shape:[le,Z],pads:[oe,J,me,we],strides:[O,ie]})},919030:(l,m)=>{r.ra("GlobalMaxPool",l,{format:m?"NHWC":"NCHW"})},919117:(l,m,y,C,_,G,H,le,Z,oe,J,me,we,O,ie,ge)=>{r.ra("MaxPool",l,{format:ge?"NHWC":"NCHW",auto_pad:m,ceil_mode:y,count_include_pad:C,storage_order:_,dilations:[G,H],kernel_shape:[le,Z],pads:[oe,J,me,we],strides:[O,ie]})},919397:(l,m)=>{r.ra("GlobalMaxPool",l,{format:m?"NHWC":"NCHW"})},919484:(l,m,y,C,_,G,H,le,Z,oe,J,me,we,O,ie,ge)=>{r.ra("MaxPool",l,{format:ge?"NHWC":"NCHW",auto_pad:m,ceil_mode:y,count_include_pad:C,storage_order:_,dilations:[G,H],kernel_shape:[le,Z],pads:[oe,J,me,we],strides:[O,ie]})},919764:(l,m,y,C,_)=>{r.ra("Gemm",l,{alpha:m,beta:y,transA:C,transB:_})},919868:l=>{r.ra("MatMul",l,void 0)},919922:(l,m,y,C)=>{r.ra("ArgMax",l,{keepDims:!!m,selectLastIndex:!!y,axis:C})},920030:(l,m,y,C)=>{r.ra("ArgMin",l,{keepDims:!!m,selectLastIndex:!!y,axis:C})},920138:(l,m)=>{r.ra("Softmax",l,{axis:m})},920201:(l,m)=>{r.ra("Concat",l,{axis:m})},920261:(l,m,y,C,_)=>{r.ra("Split",l,{axis:m,numOutputs:y,splitSizes:C?Array.from(R.subarray(_>>>0,_+C>>>0)):[]})},920406:l=>{r.ra("Expand",l,void 0)},920460:(l,m)=>{r.ra("Gather",l,{axis:Number(m)})},920531:(l,m)=>{r.ra("GatherElements",l,{axis:Number(m)})},920610:(l,m,y,C,_,G,H,le,Z,oe,J)=>{r.ra("Resize",l,{antialias:m,axes:y?Array.from(R.subarray(C>>>0,C+y>>>0)):[],coordinateTransformMode:Me(_),cubicCoeffA:G,excludeOutside:H,extrapolationValue:le,keepAspectRatioPolicy:Me(Z),mode:Me(oe),nearestMode:Me(J)})},920961:(l,m,y,C,_,G,H)=>{r.ra("Slice",l,{starts:m?Array.from(R.subarray(y>>>0,y+m>>>0)):[],ends:C?Array.from(R.subarray(_>>>0,_+C>>>0)):[],axes:G?Array.from(R.subarray(H>>>0,H+G>>>0)):[]})},921192:l=>{r.ra("Tile",l,void 0)},921244:(l,m,y)=>{r.ra("LayerNormalization",l,{axis:Number(m),epsilon:Number(y)})},921351:(l,m,y)=>{r.ra("InstanceNormalization",l,{epsilon:m,format:y?"NHWC":"NCHW"})},921465:(l,m,y)=>{r.ra("InstanceNormalization",l,{epsilon:m,format:y?"NHWC":"NCHW"})},921579:l=>{r.ra("Range",l,void 0)},921632:(l,m)=>{r.ra("Einsum",l,{equation:Me(m)})},921713:(l,m,y,C,_)=>{r.ra("Pad",l,{mode:m,value:y,pads:C?Array.from(R.subarray(_>>>0,_+C>>>0)):[]})},921845:(l,m,y,C,_,G)=>{r.ra("BatchNormalization",l,{epsilon:m,momentum:y,spatial:!!_,trainingMode:!!C,format:G?"NHWC":"NCHW"})},922014:(l,m,y,C,_,G)=>{r.ra("BatchNormalization",l,{epsilon:m,momentum:y,spatial:!!_,trainingMode:!!C,format:G?"NHWC":"NCHW"})},922183:(l,m,y)=>{r.ra("CumSum",l,{exclusive:Number(m),reverse:Number(y)})},922280:(l,m,y,C,_,G,H,le,Z)=>{r.ra("Attention",l,{numHeads:m,isUnidirectional:y,maskFilterValue:C,scale:_,doRotary:G,qkvHiddenSizes:H?Array.from(R.subarray(Number(le)>>>0,Number(le)+H>>>0)):[],pastPresentShareBuffer:!!Z})},922552:l=>{r.ra("Gelu",l,void 0)},922604:(l,m,y,C,_,G)=>{r.ra("MultiHeadAttention",l,{numHeads:m,isUnidirectional:y,maskFilterValue:C,scale:_,doRotary:G})},922763:l=>{r.ra("BiasAdd",l,void 0)},922818:l=>{r.ra("BiasSplitGelu",l,void 0)},922879:(l,m)=>{r.ra("SkipLayerNormalization",l,{epsilon:m})},922960:(l,m,y,C,_,G,H,le,Z,oe,J,me,we)=>{r.ra("Conv",l,{format:Z?"NHWC":"NCHW",auto_pad:m,dilations:[y],group:C,kernel_shape:[_],pads:G?Array.from(R.subarray(H>>>0,H+G>>>0)):[],strides:[le],w_is_const:()=>!!F[oe>>>0],activation:Me(J),activation_params:me?Array.from(pe.subarray(we>>>0,we+me>>>0)):[]})},923341:(l,m,y,C,_,G,H,le,Z,oe,J,me,we,O,ie,ge)=>{r.ra("Conv",l,{format:me?"NHWC":"NCHW",auto_pad:m,dilations:[y,C],group:_,kernel_shape:[G,H],pads:le?Array.from(R.subarray(Z>>>0,Z+le>>>0)):[],strides:[oe,J],w_is_const:()=>!!F[we>>>0],activation:Me(O),activation_params:ie?Array.from(pe.subarray(ge>>>0,ge+ie>>>0)):[]})},923743:l=>{r.Ra(l)},923777:(l,m)=>r.Sa(l,m,r.Da.Ta,r.Da.errors),923889:l=>r.Oa(l),923922:l=>r.Qa(l),923954:(l,m,y)=>{r.Ja(l,m,y,!0)},923993:(l,m,y)=>{r.Ja(l,m,y)}};function Ze(l){this.name="ExitStatus",this.message=`Program terminated with exit(${l})`,this.status=l}var St=l=>{for(;0<l.length;)l.shift()(r)};function xt(l){this.Ha=l-24,this.Ma=function(m){j[this.Ha+4>>2>>>0]=m},this.La=function(m){j[this.Ha+8>>2>>>0]=m},this.Ya=function(m,y){this.Ka(),this.Ma(m),this.La(y)},this.Ka=function(){j[this.Ha+16>>2>>>0]=0}}var Nt=0,fr=0,Qe=typeof TextDecoder<"u"?new TextDecoder("utf8"):void 0,Ht=(l,m,y)=>{m>>>=0;var C=m+y;for(y=m;l[y]&&!(y>=C);)++y;if(16<y-m&&l.buffer&&Qe)return Qe.decode(l.subarray(m,y));for(C="";m<y;){var _=l[m++];if(_&128){var G=l[m++]&63;if((_&224)==192)C+=String.fromCharCode((_&31)<<6|G);else{var H=l[m++]&63;_=(_&240)==224?(_&15)<<12|G<<6|H:(_&7)<<18|G<<12|H<<6|l[m++]&63,65536>_?C+=String.fromCharCode(_):(_-=65536,C+=String.fromCharCode(55296|_>>10,56320|_&1023))}}else C+=String.fromCharCode(_)}return C},Me=(l,m)=>(l>>>=0)?Ht(te,l,m):"",kt=l=>{for(var m=0,y=0;y<l.length;++y){var C=l.charCodeAt(y);127>=C?m++:2047>=C?m+=2:55296<=C&&57343>=C?(m+=4,++y):m+=3}return m},Gt=(l,m,y,C)=>{if(y>>>=0,!(0<C))return 0;var _=y;C=y+C-1;for(var G=0;G<l.length;++G){var H=l.charCodeAt(G);if(55296<=H&&57343>=H){var le=l.charCodeAt(++G);H=65536+((H&1023)<<10)|le&1023}if(127>=H){if(y>=C)break;m[y++>>>0]=H}else{if(2047>=H){if(y+1>=C)break;m[y++>>>0]=192|H>>6}else{if(65535>=H){if(y+2>=C)break;m[y++>>>0]=224|H>>12}else{if(y+3>=C)break;m[y++>>>0]=240|H>>18,m[y++>>>0]=128|H>>12&63}m[y++>>>0]=128|H>>6&63}m[y++>>>0]=128|H&63}}return m[y>>>0]=0,y-_},mt=l=>l%4===0&&(l%100!==0||l%400===0),hr=[0,31,60,91,121,152,182,213,244,274,305,335],ft=[0,31,59,90,120,151,181,212,243,273,304,334],Pt=l=>{var m=kt(l)+1,y=Dt(m);return y&&Gt(l,te,y,m),y},yt=[],Rt=(l,m)=>{yt.length=0;var y;for(m>>=2;y=te[l++>>>0];)m+=y!=105&m,yt.push(y==105?R[m>>>0]:Q[m++>>>1]),++m;return yt},Bt={},Lt=()=>{if(!Mt){var l={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:(typeof navigator=="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:u||"./this.program"},m;for(m in Bt)Bt[m]===void 0?delete l[m]:l[m]=Bt[m];var y=[];for(m in l)y.push(`${m}=${l[m]}`);Mt=y}return Mt},Mt,gr=[null,[],[]],Ne=[31,29,31,30,31,30,31,31,30,31,30,31],Ft=[31,28,31,30,31,30,31,31,30,31,30,31];function jt(l){var m=Array(kt(l)+1);return Gt(l,m,0,m.length),m}function ue(l,m,y,C){function _(O,ie,ge){for(O=typeof O=="number"?O.toString():O||"";O.length<ie;)O=ge[0]+O;return O}function G(O,ie){return _(O,ie,"0")}function H(O,ie){function ge(nr){return 0>nr?-1:0<nr?1:0}var gt;return(gt=ge(O.getFullYear()-ie.getFullYear()))===0&&(gt=ge(O.getMonth()-ie.getMonth()))===0&&(gt=ge(O.getDate()-ie.getDate())),gt}function le(O){switch(O.getDay()){case 0:return new Date(O.getFullYear()-1,11,29);case 1:return O;case 2:return new Date(O.getFullYear(),0,3);case 3:return new Date(O.getFullYear(),0,2);case 4:return new Date(O.getFullYear(),0,1);case 5:return new Date(O.getFullYear()-1,11,31);case 6:return new Date(O.getFullYear()-1,11,30)}}function Z(O){var ie=O.Ba;for(O=new Date(new Date(O.Ca+1900,0,1).getTime());0<ie;){var ge=O.getMonth(),gt=(mt(O.getFullYear())?Ne:Ft)[ge];if(ie>gt-O.getDate())ie-=gt-O.getDate()+1,O.setDate(1),11>ge?O.setMonth(ge+1):(O.setMonth(0),O.setFullYear(O.getFullYear()+1));else{O.setDate(O.getDate()+ie);break}}return ge=new Date(O.getFullYear()+1,0,4),ie=le(new Date(O.getFullYear(),0,4)),ge=le(ge),0>=H(ie,O)?0>=H(ge,O)?O.getFullYear()+1:O.getFullYear():O.getFullYear()-1}l>>>=0,m>>>=0,y>>>=0,C>>>=0;var oe=R[C+40>>2>>>0];C={Wa:R[C>>2>>>0],Va:R[C+4>>2>>>0],Ea:R[C+8>>2>>>0],Ia:R[C+12>>2>>>0],Fa:R[C+16>>2>>>0],Ca:R[C+20>>2>>>0],wa:R[C+24>>2>>>0],Ba:R[C+28>>2>>>0],$a:R[C+32>>2>>>0],Ua:R[C+36>>2>>>0],Xa:oe?Me(oe):""},y=Me(y),oe={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var J in oe)y=y.replace(new RegExp(J,"g"),oe[J]);var me="Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),we="January February March April May June July August September October November December".split(" ");oe={"%a":O=>me[O.wa].substring(0,3),"%A":O=>me[O.wa],"%b":O=>we[O.Fa].substring(0,3),"%B":O=>we[O.Fa],"%C":O=>G((O.Ca+1900)/100|0,2),"%d":O=>G(O.Ia,2),"%e":O=>_(O.Ia,2," "),"%g":O=>Z(O).toString().substring(2),"%G":O=>Z(O),"%H":O=>G(O.Ea,2),"%I":O=>(O=O.Ea,O==0?O=12:12<O&&(O-=12),G(O,2)),"%j":O=>{for(var ie=0,ge=0;ge<=O.Fa-1;ie+=(mt(O.Ca+1900)?Ne:Ft)[ge++]);return G(O.Ia+ie,3)},"%m":O=>G(O.Fa+1,2),"%M":O=>G(O.Va,2),"%n":()=>`\n`,"%p":O=>0<=O.Ea&&12>O.Ea?"AM":"PM","%S":O=>G(O.Wa,2),"%t":()=>"	","%u":O=>O.wa||7,"%U":O=>G(Math.floor((O.Ba+7-O.wa)/7),2),"%V":O=>{var ie=Math.floor((O.Ba+7-(O.wa+6)%7)/7);if(2>=(O.wa+371-O.Ba-2)%7&&ie++,ie)ie==53&&(ge=(O.wa+371-O.Ba)%7,ge==4||ge==3&&mt(O.Ca)||(ie=1));else{ie=52;var ge=(O.wa+7-O.Ba-1)%7;(ge==4||ge==5&&mt(O.Ca%400-1))&&ie++}return G(ie,2)},"%w":O=>O.wa,"%W":O=>G(Math.floor((O.Ba+7-(O.wa+6)%7)/7),2),"%y":O=>(O.Ca+1900).toString().substring(2),"%Y":O=>O.Ca+1900,"%z":O=>{O=O.Ua;var ie=0<=O;return O=Math.abs(O)/60,(ie?"+":"-")+("0000"+(O/60*100+O%60)).slice(-4)},"%Z":O=>O.Xa,"%%":()=>"%"},y=y.replace(/%%/g,"\\0\\0");for(J in oe)y.includes(J)&&(y=y.replace(new RegExp(J,"g"),oe[J](C)));return y=y.replace(/\\0\\0/g,"%"),J=jt(y),J.length>m?0:(F.set(J,l>>>0),J.length-1)}function ht(l){try{l()}catch(m){Le(m)}}function yr(l){var m={},y;for(y in l)(function(C){var _=l[C];m[C]=typeof _=="function"?function(){Ct.push(C);try{return _.apply(null,arguments)}finally{z||(Ct.pop()===C||Le(),Xe&&at===1&&Ct.length===0&&(at=0,ht(tr),typeof Fibers<"u"&&Fibers.ab()))}}:_})(y);return m}var at=0,Xe=null,br=0,Ct=[],qt={},Kt={},wr=0,It=null,vr=[];function $r(){return new Promise((l,m)=>{It={resolve:l,reject:m}})}function Sr(){var l=Dt(65548),m=l+12;j[l>>2>>>0]=m,j[l+4>>2>>>0]=m+65536,m=Ct[0];var y=qt[m];return y===void 0&&(y=wr++,qt[m]=y,Kt[y]=m),R[l+8>>2>>>0]=y,l}function xr(l){if(!z){if(at===0){var m=!1,y=!1;l((C=0)=>{if(!z&&(br=C,m=!0,y)){at=2,ht(()=>zt(Xe)),typeof Browser<"u"&&Browser.Ga.Na&&Browser.Ga.resume(),C=!1;try{var _=(0,P[Kt[R[Xe+8>>2>>>0]]])()}catch(le){_=le,C=!0}var G=!1;if(!Xe){var H=It;H&&(It=null,(C?H.reject:H.resolve)(_),G=!0)}if(C&&!G)throw _}}),y=!0,m||(at=1,Xe=Sr(),typeof Browser<"u"&&Browser.Ga.Na&&Browser.Ga.pause(),ht(()=>er(Xe)))}else at===2?(at=0,ht(At),Yt(Xe),Xe=null,vr.forEach(C=>{if(!z)try{if(C(),!E)try{U=U=C=U,E||(r.onExit&&r.onExit(C),z=!0),d(C,new Ze(C))}catch(_){_ instanceof Ze||_=="unwind"||d(1,_)}}catch(_){_ instanceof Ze||_=="unwind"||d(1,_)}})):Le(`invalid state: ${at}`);return br}}function Cr(l){return xr(m=>{l().then(m)})}var Ir={n:function(l,m,y){return Cr(async()=>{await r.Pa(l,m,y)})},a:function(l,m,y){throw l>>>=0,new xt(l).Ya(m>>>0,y>>>0),Nt=l,fr++,Nt},g:function(){return 0},J:function(){},z:function(){},B:function(){},L:function(){return 0},H:function(){},C:function(){},G:function(){},l:function(){},A:function(){},x:function(){},I:function(){},y:function(){},m:()=>!0,q:function(l,m,y){l=m+2097152>>>0<4194305-!!l?(l>>>0)+4294967296*m:NaN,y>>>=0,l=new Date(1e3*l),R[y>>2>>>0]=l.getUTCSeconds(),R[y+4>>2>>>0]=l.getUTCMinutes(),R[y+8>>2>>>0]=l.getUTCHours(),R[y+12>>2>>>0]=l.getUTCDate(),R[y+16>>2>>>0]=l.getUTCMonth(),R[y+20>>2>>>0]=l.getUTCFullYear()-1900,R[y+24>>2>>>0]=l.getUTCDay(),R[y+28>>2>>>0]=(l.getTime()-Date.UTC(l.getUTCFullYear(),0,1,0,0,0,0))/864e5|0},r:function(l,m,y){l=m+2097152>>>0<4194305-!!l?(l>>>0)+4294967296*m:NaN,y>>>=0,l=new Date(1e3*l),R[y>>2>>>0]=l.getSeconds(),R[y+4>>2>>>0]=l.getMinutes(),R[y+8>>2>>>0]=l.getHours(),R[y+12>>2>>>0]=l.getDate(),R[y+16>>2>>>0]=l.getMonth(),R[y+20>>2>>>0]=l.getFullYear()-1900,R[y+24>>2>>>0]=l.getDay(),R[y+28>>2>>>0]=(mt(l.getFullYear())?hr:ft)[l.getMonth()]+l.getDate()-1|0,R[y+36>>2>>>0]=-(60*l.getTimezoneOffset()),m=new Date(l.getFullYear(),6,1).getTimezoneOffset();var C=new Date(l.getFullYear(),0,1).getTimezoneOffset();R[y+32>>2>>>0]=(m!=C&&l.getTimezoneOffset()==Math.min(C,m))|0},s:function(l){l>>>=0;var m=new Date(R[l+20>>2>>>0]+1900,R[l+16>>2>>>0],R[l+12>>2>>>0],R[l+8>>2>>>0],R[l+4>>2>>>0],R[l>>2>>>0],0),y=R[l+32>>2>>>0],C=m.getTimezoneOffset(),_=new Date(m.getFullYear(),6,1).getTimezoneOffset(),G=new Date(m.getFullYear(),0,1).getTimezoneOffset(),H=Math.min(G,_);return 0>y?R[l+32>>2>>>0]=+(_!=G&&H==C):0<y!=(H==C)&&(_=Math.max(G,_),m.setTime(m.getTime()+6e4*((0<y?H:_)-C))),R[l+24>>2>>>0]=m.getDay(),R[l+28>>2>>>0]=(mt(m.getFullYear())?hr:ft)[m.getMonth()]+m.getDate()-1|0,R[l>>2>>>0]=m.getSeconds(),R[l+4>>2>>>0]=m.getMinutes(),R[l+8>>2>>>0]=m.getHours(),R[l+12>>2>>>0]=m.getDate(),R[l+16>>2>>>0]=m.getMonth(),R[l+20>>2>>>0]=m.getYear(),l=m.getTime()/1e3,Zt((Fe=l,1<=+Math.abs(Fe)?0<Fe?+Math.floor(Fe/4294967296)>>>0:~~+Math.ceil((Fe-+(~~Fe>>>0))/4294967296)>>>0:0)),l>>>0},o:function(){return-52},p:function(){},v:function(l,m,y){function C(Z){return(Z=Z.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?Z[1]:"GMT"}y>>>=0;var _=new Date().getFullYear(),G=new Date(_,0,1),H=new Date(_,6,1);_=G.getTimezoneOffset();var le=H.getTimezoneOffset();j[l>>>0>>2>>>0]=60*Math.max(_,le),R[m>>>0>>2>>>0]=+(_!=le),l=C(G),m=C(H),l=Pt(l),m=Pt(m),le<_?(j[y>>2>>>0]=l,j[y+4>>2>>>0]=m):(j[y>>2>>>0]=m,j[y+4>>2>>>0]=l)},e:()=>{Le("")},b:function(l,m,y){return l>>>=0,m=Rt(m>>>0,y>>>0),ot[l].apply(null,m)},i:function(l,m,y){return l>>>=0,m=Rt(m>>>0,y>>>0),ot[l].apply(null,m)},h:function(){return Date.now()},w:function(){return 4294901760},c:()=>performance.now(),K:function(l,m,y){return m>>>=0,te.copyWithin(l>>>0>>>0,m>>>0,m+(y>>>0)>>>0)},u:function(l){l>>>=0;var m=te.length;if(4294901760<l)return!1;for(var y=1;4>=y;y*=2){var C=m*(1+.2/y);C=Math.min(C,l+100663296);var _=Math;C=Math.max(l,C);e:{_=_.min.call(_,4294901760,C+(65536-C%65536)%65536)-V.buffer.byteLength+65535>>>16;try{V.grow(_),$e();var G=1;break e}catch{}G=void 0}if(G)return!0}return!1},D:function(l,m){l>>>=0,m>>>=0;var y=0;return Lt().forEach(function(C,_){var G=m+y;for(_=j[l+4*_>>2>>>0]=G,G=0;G<C.length;++G)F[_++>>0>>>0]=C.charCodeAt(G);F[_>>0>>>0]=0,y+=C.length+1}),0},E:function(l,m){l>>>=0,m>>>=0;var y=Lt();j[l>>2>>>0]=y.length;var C=0;return y.forEach(function(_){C+=_.length+1}),j[m>>2>>>0]=C,0},f:()=>52,k:function(){return 52},t:function(){return 70},j:function(l,m,y,C){m>>>=0,y>>>=0,C>>>=0;for(var _=0,G=0;G<y;G++){var H=j[m>>2>>>0],le=j[m+4>>2>>>0];m+=8;for(var Z=0;Z<le;Z++){var oe=te[H+Z>>>0],J=gr[l];oe===0||oe===10?((l===1?x:A)(Ht(J,0)),J.length=0):J.push(oe)}_+=le}return j[C>>2>>>0]=_,0},F:ue,d:function(l,m,y,C){return ue(l>>>0,m>>>0,y>>>0,C>>>0)}};(function(){function l(y){if(y=y.exports,y=yr(y),P=y=bt(y),V=P.M,$e(),Se.unshift(P.N),he--,r.monitorRunDependencies&&r.monitorRunDependencies(he),he==0&&(nt!==null&&(clearInterval(nt),nt=null),He)){var C=He;He=null,C()}return y}var m={a:Ir};if(he++,r.monitorRunDependencies&&r.monitorRunDependencies(he),r.instantiateWasm)try{return r.instantiateWasm(m,l)}catch(y){A("Module.instantiateWasm callback failed with error: "+y),n(y)}return Ve(m,function(y){l(y.instance)}).catch(n),{}})(),r._OrtInit=(l,m)=>(r._OrtInit=P.O)(l,m),r._OrtGetLastError=(l,m)=>(r._OrtGetLastError=P.P)(l,m),r._OrtCreateSessionOptions=(l,m,y,C,_,G,H,le,Z,oe)=>(r._OrtCreateSessionOptions=P.Q)(l,m,y,C,_,G,H,le,Z,oe),r._OrtAppendExecutionProvider=(l,m)=>(r._OrtAppendExecutionProvider=P.R)(l,m),r._OrtAddFreeDimensionOverride=(l,m,y)=>(r._OrtAddFreeDimensionOverride=P.S)(l,m,y),r._OrtAddSessionConfigEntry=(l,m,y)=>(r._OrtAddSessionConfigEntry=P.T)(l,m,y),r._OrtReleaseSessionOptions=l=>(r._OrtReleaseSessionOptions=P.U)(l),r._OrtCreateSession=(l,m,y)=>(r._OrtCreateSession=P.V)(l,m,y),r._OrtReleaseSession=l=>(r._OrtReleaseSession=P.W)(l),r._OrtGetInputOutputCount=(l,m,y)=>(r._OrtGetInputOutputCount=P.X)(l,m,y),r._OrtGetInputName=(l,m)=>(r._OrtGetInputName=P.Y)(l,m),r._OrtGetOutputName=(l,m)=>(r._OrtGetOutputName=P.Z)(l,m),r._OrtFree=l=>(r._OrtFree=P._)(l),r._OrtCreateTensor=(l,m,y,C,_,G)=>(r._OrtCreateTensor=P.$)(l,m,y,C,_,G),r._OrtGetTensorData=(l,m,y,C,_)=>(r._OrtGetTensorData=P.aa)(l,m,y,C,_),r._OrtReleaseTensor=l=>(r._OrtReleaseTensor=P.ba)(l),r._OrtCreateRunOptions=(l,m,y,C)=>(r._OrtCreateRunOptions=P.ca)(l,m,y,C),r._OrtAddRunConfigEntry=(l,m,y)=>(r._OrtAddRunConfigEntry=P.da)(l,m,y),r._OrtReleaseRunOptions=l=>(r._OrtReleaseRunOptions=P.ea)(l),r._OrtCreateBinding=l=>(r._OrtCreateBinding=P.fa)(l),r._OrtBindInput=(l,m,y)=>(r._OrtBindInput=P.ga)(l,m,y),r._OrtBindOutput=(l,m,y,C)=>(r._OrtBindOutput=P.ha)(l,m,y,C),r._OrtClearBoundOutputs=l=>(r._OrtClearBoundOutputs=P.ia)(l),r._OrtReleaseBinding=l=>(r._OrtReleaseBinding=P.ja)(l),r._OrtRunWithBinding=(l,m,y,C,_)=>(r._OrtRunWithBinding=P.ka)(l,m,y,C,_),r._OrtRun=(l,m,y,C,_,G,H,le)=>(r._OrtRun=P.la)(l,m,y,C,_,G,H,le),r._OrtEndProfiling=l=>(r._OrtEndProfiling=P.ma)(l),r._JsepOutput=(l,m,y)=>(r._JsepOutput=P.na)(l,m,y),r._JsepGetNodeName=l=>(r._JsepGetNodeName=P.oa)(l);var Dt=r._malloc=l=>(Dt=r._malloc=P.pa)(l),Yt=r._free=l=>(Yt=r._free=P.qa)(l),Zt=l=>(Zt=P.sa)(l),Xt=()=>(Xt=P.ta)(),Qt=l=>(Qt=P.ua)(l),Jt=l=>(Jt=P.va)(l),er=l=>(er=P.xa)(l),tr=()=>(tr=P.ya)(),zt=l=>(zt=P.za)(l),At=()=>(At=P.Aa)();r.___start_em_js=924026,r.___stop_em_js=924187;function bt(l){l=Object.assign({},l);var m=C=>()=>C()>>>0,y=C=>_=>C(_)>>>0;return l.__errno_location=m(l.__errno_location),l.malloc=y(l.malloc),l.stackSave=m(l.stackSave),l.stackAlloc=y(l.stackAlloc),l}r.stackAlloc=Jt,r.stackSave=Xt,r.stackRestore=Qt,r.UTF8ToString=Me,r.stringToUTF8=(l,m,y)=>Gt(l,te,m,y),r.lengthBytesUTF8=kt;var Tt;He=function l(){Tt||rr(),Tt||(He=l)};function rr(){function l(){if(!Tt&&(Tt=!0,r.calledRun=!0,!z)){if(St(Se),o(r),r.onRuntimeInitialized&&r.onRuntimeInitialized(),r.postRun)for(typeof r.postRun=="function"&&(r.postRun=[r.postRun]);r.postRun.length;){var m=r.postRun.shift();Ie.unshift(m)}St(Ie)}}if(!(0<he)){if(r.preRun)for(typeof r.preRun=="function"&&(r.preRun=[r.preRun]);r.preRun.length;)Ae();St(Y),0<he||(r.setStatus?(r.setStatus("Running..."),setTimeout(function(){setTimeout(function(){r.setStatus("")},1),l()},1)):l())}}if(r.preInit)for(typeof r.preInit=="function"&&(r.preInit=[r.preInit]);0<r.preInit.length;)r.preInit.pop()();return rr(),t.ready}})();typeof ho=="object"&&typeof gn=="object"?gn.exports=fo:typeof define=="function"&&define.amd&&define([],()=>fo)});var yo=or(()=>{});var bo=or(()=>{});var wo={};kr(wo,{cpus:()=>Fu});var Fu,vo=q(()=>{Fu=void 0});var xo=or((So,yn)=>{"use strict";var $o=(()=>{var e=typeof document<"u"&&document.currentScript?document.currentScript.src:void 0;return typeof __filename<"u"&&(e=e||__filename),function(t={}){function r(){return $e.buffer!=he.buffer&&fe(),he}function o(){return $e.buffer!=he.buffer&&fe(),nt}function n(){return $e.buffer!=he.buffer&&fe(),He}function s(){return $e.buffer!=he.buffer&&fe(),Le}function u(){return $e.buffer!=he.buffer&&fe(),L}function d(){return $e.buffer!=he.buffer&&fe(),de}var a=t,p,h;a.ready=new Promise((i,c)=>{p=i,h=c}),a.jsepInit=(i,c,f,S,T,M,N,ae)=>{a.Qb=i,a.wb=c,a.yb=f,a.jb=S,a.xb=T,a.Ea=M,a.zb=N,a.Ab=ae,c=(ee,re,se)=>(...ve)=>{let Ce=it,k=re?.();ve=ee(...ve);let ce=re?.();return k!==ce&&(ee=ce,se(k),re=se=null),it!=Ce?ku():ve},f=ee=>async(...re)=>{try{if(a.bb)throw Error("Session already started");let se=a.bb={Fb:re[0],errors:[]},ve=await ee(...re);if(a.bb!==se)throw Error("Session mismatch");i.flush();let Ce=se.errors;if(0<Ce.length){let k=await Promise.all(Ce);if(k=k.filter(ce=>ce),0<k.length)throw Error(k.join(`\n`))}return ve}finally{a.bb=null}},a._OrtRun=f(c(a._OrtRun,()=>a._OrtRun,ee=>a._OrtRun=ee)),a._OrtRunWithBinding=f(c(a._OrtRunWithBinding,()=>a._OrtRunWithBinding,ee=>a._OrtRunWithBinding=ee)),a._OrtBindInput=c(a._OrtBindInput,()=>a._OrtBindInput,ee=>a._OrtBindInput=ee),a.jsepRegisterBuffer=(ee,re,se,ve)=>i.registerBuffer(ee,re,se,ve),a.jsepUnregisterBuffers=ee=>{i.unregisterBuffers(ee)},a.jsepGetBuffer=ee=>i.getBuffer(ee),a.jsepCreateDownloader=(ee,re,se)=>i.createDownloader(ee,re,se)};var $=Object.assign({},a),g="./this.program",w=(i,c)=>{throw c},b=typeof window=="object",v=typeof importScripts=="function",I=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string",x=a.ENVIRONMENT_IS_PTHREAD||!1,A="";function B(i){return a.locateFile?a.locateFile(i,A):A+i}var E,V,P;if(I){var z=(mn(),Vt(pn)),U=(hn(),Vt(fn));A=v?U.dirname(A)+"/":__dirname+"/",E=(c,f)=>(c=c.startsWith("file://")?new URL(c):U.normalize(c),z.readFileSync(c,f?void 0:"utf8")),P=c=>(c=E(c,!0),c.buffer||(c=new Uint8Array(c)),c),V=(c,f,S,T=!0)=>{c=c.startsWith("file://")?new URL(c):U.normalize(c),z.readFile(c,T?void 0:"utf8",(M,N)=>{M?S(M):f(T?N.buffer:N)})},!a.thisProgram&&1<process.argv.length&&(g=process.argv[1].replace(/\\\\/g,"/")),process.argv.slice(2),w=(c,f)=>{throw process.exitCode=c,f},a.inspect=()=>"[Emscripten Module object]";let i;try{i=yo()}catch(c){throw console.error(\'The "worker_threads" module is not supported in this node.js build - perhaps a newer version is needed?\'),c}global.Worker=i.Worker}else(b||v)&&(v?A=self.location.href:typeof document<"u"&&document.currentScript&&(A=document.currentScript.src),typeof e<"u"&&e&&(A=e),A.indexOf("blob:")!==0?A=A.substr(0,A.replace(/[?#].*/,"").lastIndexOf("/")+1):A="",I||(E=i=>{var c=new XMLHttpRequest;return c.open("GET",i,!1),c.send(null),c.responseText},v&&(P=i=>{var c=new XMLHttpRequest;return c.open("GET",i,!1),c.responseType="arraybuffer",c.send(null),new Uint8Array(c.response)}),V=(i,c,f)=>{var S=new XMLHttpRequest;S.open("GET",i,!0),S.responseType="arraybuffer",S.onload=()=>{S.status==200||S.status==0&&S.response?c(S.response):f()},S.onerror=f,S.send(null)}));I&&typeof performance>"u"&&(global.performance=bo().performance);var F=console.log.bind(console),te=console.error.bind(console);I&&(F=(...i)=>z.writeSync(1,i.join(" ")+`\n`),te=(...i)=>z.writeSync(2,i.join(" ")+`\n`));var R=a.print||F,j=a.printErr||te;Object.assign(a,$),$=null,a.thisProgram&&(g=a.thisProgram),a.quit&&(w=a.quit);var pe;a.wasmBinary&&(pe=a.wasmBinary);var Q=a.noExitRuntime||!0;typeof WebAssembly!="object"&&Qe("no native wasm support detected");var $e,Y,Se,Ie=!1,Ae,he,nt,He,Le,L,de;function fe(){var i=$e.buffer;a.HEAP8=he=new Int8Array(i),a.HEAP16=new Int16Array(i),a.HEAP32=He=new Int32Array(i),a.HEAPU8=nt=new Uint8Array(i),a.HEAPU16=new Uint16Array(i),a.HEAPU32=Le=new Uint32Array(i),a.HEAPF32=L=new Float32Array(i),a.HEAPF64=de=new Float64Array(i)}var Ue=a.INITIAL_MEMORY||16777216;if(5242880<=Ue||Qe("INITIAL_MEMORY should be larger than STACK_SIZE, was "+Ue+"! (STACK_SIZE=5242880)"),x)$e=a.wasmMemory;else if(a.wasmMemory)$e=a.wasmMemory;else if($e=new WebAssembly.Memory({initial:Ue/65536,maximum:65536,shared:!0}),!($e.buffer instanceof SharedArrayBuffer))throw j("requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag"),I&&j("(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and/or recent version)"),Error("bad memory");fe(),Ue=$e.buffer.byteLength;var Ke=[],Re=[],Ve=[],Fe=0;function ot(){return Q||0<Fe}var Ze=0,St=null,xt=null;function Nt(){Ze++,a.monitorRunDependencies&&a.monitorRunDependencies(Ze)}function fr(){if(Ze--,a.monitorRunDependencies&&a.monitorRunDependencies(Ze),Ze==0&&(St!==null&&(clearInterval(St),St=null),xt)){var i=xt;xt=null,i()}}function Qe(i){throw a.onAbort&&a.onAbort(i),i="Aborted("+i+")",j(i),Ie=!0,Ae=1,i=new WebAssembly.RuntimeError(i+". Build with -sASSERTIONS for more info."),h(i),i}function Ht(i){return i.startsWith("data:application/octet-stream;base64,")}var Me;Me="ort-wasm-simd-threaded.wasm",Ht(Me)||(Me=B(Me));function kt(i){if(i==Me&&pe)return new Uint8Array(pe);if(P)return P(i);throw"both async and sync fetching of the wasm failed"}function Gt(i){if(!pe&&(b||v)){if(typeof fetch=="function"&&!i.startsWith("file://"))return fetch(i,{credentials:"same-origin"}).then(c=>{if(!c.ok)throw"failed to load wasm binary file at \'"+i+"\'";return c.arrayBuffer()}).catch(()=>kt(i));if(V)return new Promise((c,f)=>{V(i,S=>c(new Uint8Array(S)),f)})}return Promise.resolve().then(()=>kt(i))}function mt(i,c,f){return Gt(i).then(S=>WebAssembly.instantiate(S,c)).then(S=>S).then(f,S=>{j("failed to asynchronously prepare wasm: "+S),Qe(S)})}function hr(i,c){var f=Me;return pe||typeof WebAssembly.instantiateStreaming!="function"||Ht(f)||f.startsWith("file://")||I||typeof fetch!="function"?mt(f,i,c):fetch(f,{credentials:"same-origin"}).then(S=>WebAssembly.instantiateStreaming(S,i).then(c,function(T){return j("wasm streaming compile failed: "+T),j("falling back to ArrayBuffer instantiation"),mt(f,i,c)}))}var ft,Pt={1428400:i=>{a.Ea("Abs",i,void 0)},1428451:i=>{a.Ea("Neg",i,void 0)},1428502:i=>{a.Ea("Floor",i,void 0)},1428555:i=>{a.Ea("Ceil",i,void 0)},1428607:i=>{a.Ea("Reciprocal",i,void 0)},1428665:i=>{a.Ea("Sqrt",i,void 0)},1428717:i=>{a.Ea("Exp",i,void 0)},1428768:i=>{a.Ea("Erf",i,void 0)},1428819:i=>{a.Ea("Sigmoid",i,void 0)},1428874:i=>{a.Ea("Log",i,void 0)},1428925:i=>{a.Ea("Sin",i,void 0)},1428976:i=>{a.Ea("Cos",i,void 0)},1429027:i=>{a.Ea("Tan",i,void 0)},1429078:i=>{a.Ea("Asin",i,void 0)},1429130:i=>{a.Ea("Acos",i,void 0)},1429182:i=>{a.Ea("Atan",i,void 0)},1429234:i=>{a.Ea("Sinh",i,void 0)},1429286:i=>{a.Ea("Cosh",i,void 0)},1429338:i=>{a.Ea("Asinh",i,void 0)},1429391:i=>{a.Ea("Acosh",i,void 0)},1429444:i=>{a.Ea("Atanh",i,void 0)},1429497:i=>{a.Ea("Tanh",i,void 0)},1429549:i=>{a.Ea("Not",i,void 0)},1429600:(i,c,f)=>{a.Ea("Clip",i,{min:c,max:f})},1429669:i=>{a.Ea("Clip",i,void 0)},1429721:(i,c)=>{a.Ea("Elu",i,{alpha:c})},1429779:i=>{a.Ea("Relu",i,void 0)},1429831:(i,c)=>{a.Ea("LeakyRelu",i,{alpha:c})},1429895:(i,c)=>{a.Ea("ThresholdedRelu",i,{alpha:c})},1429965:i=>{a.zb(i)},1429999:(i,c)=>a.Ab(i,c,a.bb.Fb,a.bb.errors),1430111:(i,c)=>{a.Ea("Cast",i,{to:c})},1430169:i=>{a.Ea("Add",i,void 0)},1430220:i=>{a.Ea("Sub",i,void 0)},1430271:i=>{a.Ea("Mul",i,void 0)},1430322:i=>{a.Ea("Div",i,void 0)},1430373:i=>{a.Ea("Pow",i,void 0)},1430424:i=>{a.Ea("Equal",i,void 0)},1430477:i=>{a.Ea("Greater",i,void 0)},1430532:i=>{a.Ea("GreaterOrEqual",i,void 0)},1430594:i=>{a.Ea("Less",i,void 0)},1430646:i=>{a.Ea("LessOrEqual",i,void 0)},1430705:(i,c,f,S,T)=>{a.Ea("ReduceMean",i,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:S?Array.from(n().subarray(T>>>0,T+S>>>0)):[]})},1430869:(i,c,f,S,T)=>{a.Ea("ReduceMax",i,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:S?Array.from(n().subarray(T>>>0,T+S>>>0)):[]})},1431032:(i,c,f,S,T)=>{a.Ea("ReduceMin",i,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:S?Array.from(n().subarray(T>>>0,T+S>>>0)):[]})},1431195:(i,c,f,S,T)=>{a.Ea("ReduceProd",i,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:S?Array.from(n().subarray(T>>>0,T+S>>>0)):[]})},1431359:(i,c,f,S,T)=>{a.Ea("ReduceSum",i,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:S?Array.from(n().subarray(T>>>0,T+S>>>0)):[]})},1431522:(i,c,f,S,T)=>{a.Ea("ReduceL1",i,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:S?Array.from(n().subarray(T>>>0,T+S>>>0)):[]})},1431684:(i,c,f,S,T)=>{a.Ea("ReduceL2",i,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:S?Array.from(n().subarray(T>>>0,T+S>>>0)):[]})},1431846:(i,c,f,S,T)=>{a.Ea("ReduceLogSum",i,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:S?Array.from(n().subarray(T>>>0,T+S>>>0)):[]})},1432012:(i,c,f,S,T)=>{a.Ea("ReduceSumSquare",i,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:S?Array.from(n().subarray(T>>>0,T+S>>>0)):[]})},1432181:(i,c,f,S,T)=>{a.Ea("ReduceLogSumExp",i,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:S?Array.from(n().subarray(T>>>0,T+S>>>0)):[]})},1432350:i=>{a.Ea("Where",i,void 0)},1432403:(i,c,f)=>{a.Ea("Transpose",i,{perm:c?Array.from(n().subarray(f>>>0,f+c>>>0)):[]})},1432516:(i,c,f,S,T,M,N,ae,ee,re,se,ve,Ce)=>{a.Ea("Conv",i,{format:ee?"NHWC":"NCHW",auto_pad:c,dilations:[f],group:S,kernel_shape:[T],pads:M?Array.from(n().subarray(N>>>0,N+M>>>0)):[],strides:[ae],w_is_const:()=>!!r()[re>>>0],activation:Ne(se),activation_params:ve?Array.from(u().subarray(Ce>>>0,Ce+ve>>>0)):[]})},1432897:(i,c,f,S,T,M,N,ae,ee,re,se,ve,Ce,k,ce,xe)=>{a.Ea("Conv",i,{format:ve?"NHWC":"NCHW",auto_pad:c,dilations:[f,S],group:T,kernel_shape:[M,N],pads:ae?Array.from(n().subarray(ee>>>0,ee+ae>>>0)):[],strides:[re,se],w_is_const:()=>!!r()[Ce>>>0],activation:Ne(k),activation_params:ce?Array.from(u().subarray(xe>>>0,xe+ce>>>0)):[]})},1433299:(i,c,f,S,T,M,N,ae,ee,re,se,ve,Ce,k,ce)=>{a.Ea("ConvTranspose",i,{format:ee?"NHWC":"NCHW",autoPad:c,dilations:[f],group:S,kernel_shape:[T],pads:[M,N],strides:[ae],wIsConst:()=>!!r()[re>>>0],outputPadding:se?Array.from(n().subarray(ve>>>0,ve+se>>>0)):[],outputShape:Ce?Array.from(n().subarray(k>>>0,k+Ce>>>0)):[],activation:Ne(ce)})},1433713:(i,c,f,S,T,M,N,ae,ee,re,se,ve,Ce,k)=>{a.Ea("ConvTranspose",i,{format:ae?"NHWC":"NCHW",autoPad:c,dilations:Array.from(n().subarray(f>>>0,f+2>>>0)),group:S,kernelShape:Array.from(n().subarray(T>>>0,T+2>>>0)),pads:Array.from(n().subarray(M>>>0,M+4>>>0)),strides:Array.from(n().subarray(N>>>0,N+2>>>0)),wIsConst:()=>!!r()[ee>>>0],outputPadding:0<re?Array.from(n().subarray(se>>>0,se+re>>>0)):[],outputShape:0<ve?Array.from(n().subarray(Ce>>>0,Ce+ve>>>0)):[],activation:Ne(k)})},1434270:(i,c,f,S,T,M,N,ae,ee,re,se,ve,Ce,k,ce)=>{a.Ea("ConvTranspose",i,{format:ee?"NHWC":"NCHW",autoPad:c,dilations:[f],group:S,kernel_shape:[T],pads:[M,N],strides:[ae],wIsConst:()=>!!r()[re>>>0],outputPadding:se?Array.from(n().subarray(ve>>>0,ve+se>>>0)):[],outputShape:Ce?Array.from(n().subarray(k>>>0,k+Ce>>>0)):[],activation:Ne(ce)})},1434684:(i,c,f,S,T,M,N,ae,ee,re,se,ve,Ce,k)=>{a.Ea("ConvTranspose",i,{format:ae?"NHWC":"NCHW",autoPad:c,dilations:Array.from(n().subarray(f>>>0,f+2>>>0)),group:S,kernelShape:Array.from(n().subarray(T>>>0,T+2>>>0)),pads:Array.from(n().subarray(M>>>0,M+4>>>0)),strides:Array.from(n().subarray(N>>>0,N+2>>>0)),wIsConst:()=>!!r()[ee>>>0],outputPadding:0<re?Array.from(n().subarray(se>>>0,se+re>>>0)):[],outputShape:0<ve?Array.from(n().subarray(Ce>>>0,Ce+ve>>>0)):[],activation:Ne(k)})},1435241:(i,c)=>{a.Ea("GlobalAveragePool",i,{format:c?"NHWC":"NCHW"})},1435332:(i,c,f,S,T,M,N,ae,ee,re,se,ve,Ce,k,ce,xe)=>{a.Ea("AveragePool",i,{format:xe?"NHWC":"NCHW",auto_pad:c,ceil_mode:f,count_include_pad:S,storage_order:T,dilations:[M,N],kernel_shape:[ae,ee],pads:[re,se,ve,Ce],strides:[k,ce]})},1435616:(i,c)=>{a.Ea("GlobalAveragePool",i,{format:c?"NHWC":"NCHW"})},1435707:(i,c,f,S,T,M,N,ae,ee,re,se,ve,Ce,k,ce,xe)=>{a.Ea("AveragePool",i,{format:xe?"NHWC":"NCHW",auto_pad:c,ceil_mode:f,count_include_pad:S,storage_order:T,dilations:[M,N],kernel_shape:[ae,ee],pads:[re,se,ve,Ce],strides:[k,ce]})},1435991:(i,c)=>{a.Ea("GlobalMaxPool",i,{format:c?"NHWC":"NCHW"})},1436078:(i,c,f,S,T,M,N,ae,ee,re,se,ve,Ce,k,ce,xe)=>{a.Ea("MaxPool",i,{format:xe?"NHWC":"NCHW",auto_pad:c,ceil_mode:f,count_include_pad:S,storage_order:T,dilations:[M,N],kernel_shape:[ae,ee],pads:[re,se,ve,Ce],strides:[k,ce]})},1436358:(i,c)=>{a.Ea("GlobalMaxPool",i,{format:c?"NHWC":"NCHW"})},1436445:(i,c,f,S,T,M,N,ae,ee,re,se,ve,Ce,k,ce,xe)=>{a.Ea("MaxPool",i,{format:xe?"NHWC":"NCHW",auto_pad:c,ceil_mode:f,count_include_pad:S,storage_order:T,dilations:[M,N],kernel_shape:[ae,ee],pads:[re,se,ve,Ce],strides:[k,ce]})},1436725:(i,c,f,S,T)=>{a.Ea("Gemm",i,{alpha:c,beta:f,transA:S,transB:T})},1436829:i=>{a.Ea("MatMul",i,void 0)},1436883:(i,c,f,S)=>{a.Ea("ArgMax",i,{keepDims:!!c,selectLastIndex:!!f,axis:S})},1436991:(i,c,f,S)=>{a.Ea("ArgMin",i,{keepDims:!!c,selectLastIndex:!!f,axis:S})},1437099:(i,c)=>{a.Ea("Softmax",i,{axis:c})},1437162:(i,c)=>{a.Ea("Concat",i,{axis:c})},1437222:(i,c,f,S,T)=>{a.Ea("Split",i,{axis:c,numOutputs:f,splitSizes:S?Array.from(n().subarray(T>>>0,T+S>>>0)):[]})},1437367:i=>{a.Ea("Expand",i,void 0)},1437421:(i,c)=>{a.Ea("Gather",i,{axis:Number(c)})},1437492:(i,c)=>{a.Ea("GatherElements",i,{axis:Number(c)})},1437571:(i,c,f,S,T,M,N,ae,ee,re,se)=>{a.Ea("Resize",i,{antialias:c,axes:f?Array.from(n().subarray(S>>>0,S+f>>>0)):[],coordinateTransformMode:Ne(T),cubicCoeffA:M,excludeOutside:N,extrapolationValue:ae,keepAspectRatioPolicy:Ne(ee),mode:Ne(re),nearestMode:Ne(se)})},1437922:(i,c,f,S,T,M,N)=>{a.Ea("Slice",i,{starts:c?Array.from(n().subarray(f>>>0,f+c>>>0)):[],ends:S?Array.from(n().subarray(T>>>0,T+S>>>0)):[],axes:M?Array.from(n().subarray(N>>>0,N+M>>>0)):[]})},1438153:i=>{a.Ea("Tile",i,void 0)},1438205:(i,c,f)=>{a.Ea("LayerNormalization",i,{axis:Number(c),epsilon:Number(f)})},1438312:(i,c,f)=>{a.Ea("InstanceNormalization",i,{epsilon:c,format:f?"NHWC":"NCHW"})},1438426:(i,c,f)=>{a.Ea("InstanceNormalization",i,{epsilon:c,format:f?"NHWC":"NCHW"})},1438540:i=>{a.Ea("Range",i,void 0)},1438593:(i,c)=>{a.Ea("Einsum",i,{equation:Ne(c)})},1438674:(i,c,f,S,T)=>{a.Ea("Pad",i,{mode:c,value:f,pads:S?Array.from(n().subarray(T>>>0,T+S>>>0)):[]})},1438806:(i,c,f,S,T,M)=>{a.Ea("BatchNormalization",i,{epsilon:c,momentum:f,spatial:!!T,trainingMode:!!S,format:M?"NHWC":"NCHW"})},1438975:(i,c,f,S,T,M)=>{a.Ea("BatchNormalization",i,{epsilon:c,momentum:f,spatial:!!T,trainingMode:!!S,format:M?"NHWC":"NCHW"})},1439144:(i,c,f)=>{a.Ea("CumSum",i,{exclusive:Number(c),reverse:Number(f)})},1439241:(i,c,f,S,T,M,N,ae,ee)=>{a.Ea("Attention",i,{numHeads:c,isUnidirectional:f,maskFilterValue:S,scale:T,doRotary:M,qkvHiddenSizes:N?Array.from(n().subarray(Number(ae)>>>0,Number(ae)+N>>>0)):[],pastPresentShareBuffer:!!ee})},1439513:i=>{a.Ea("Gelu",i,void 0)},1439565:(i,c,f,S,T,M)=>{a.Ea("MultiHeadAttention",i,{numHeads:c,isUnidirectional:f,maskFilterValue:S,scale:T,doRotary:M})},1439724:i=>{a.Ea("BiasAdd",i,void 0)},1439779:i=>{a.Ea("BiasSplitGelu",i,void 0)},1439840:(i,c)=>{a.Ea("SkipLayerNormalization",i,{epsilon:c})},1439921:i=>a.wb(i),1439954:i=>a.yb(i),1439986:(i,c,f)=>{a.jb(i,c,f,!0)},1440025:(i,c,f)=>{a.jb(i,c,f)}};function yt(i){this.name="ExitStatus",this.message=`Program terminated with exit(${i})`,this.status=i}function Rt(i){i.terminate(),i.onmessage=()=>{}}function Bt(i){(i=ue.Qa[i])||Qe(),ue.Eb(i)}function Lt(i){var c=ue.tb();if(!c)return 6;ue.Ya.push(c),ue.Qa[i.Xa]=c,c.Xa=i.Xa;var f={cmd:"run",start_routine:i.Gb,arg:i.rb,pthread_ptr:i.Xa};return I&&c.unref(),c.postMessage(f,i.Mb),0}var Mt=typeof TextDecoder<"u"?new TextDecoder("utf8"):void 0,gr=(i,c,f)=>{c>>>=0;var S=c+f;for(f=c;i[f]&&!(f>=S);)++f;if(16<f-c&&i.buffer&&Mt)return Mt.decode(i.buffer instanceof SharedArrayBuffer?i.slice(c,f):i.subarray(c,f));for(S="";c<f;){var T=i[c++];if(T&128){var M=i[c++]&63;if((T&224)==192)S+=String.fromCharCode((T&31)<<6|M);else{var N=i[c++]&63;T=(T&240)==224?(T&15)<<12|M<<6|N:(T&7)<<18|M<<12|N<<6|i[c++]&63,65536>T?S+=String.fromCharCode(T):(T-=65536,S+=String.fromCharCode(55296|T>>10,56320|T&1023))}}else S+=String.fromCharCode(T)}return S},Ne=(i,c)=>(i>>>=0)?gr(o(),i,c):"";function Ft(i){if(x)return H(1,1,i);Ae=i,ot()||(ue.Hb(),a.onExit&&a.onExit(i),Ie=!0),w(i,new yt(i))}var jt=i=>{if(Ae=i,x)throw yr(i),"unwind";Ft(i)},ue={ab:[],Ya:[],mb:[],Qa:{},gb:function(){x?ue.vb():ue.ub()},ub:function(){Ke.unshift(()=>{Nt(),ue.Bb(()=>fr())})},vb:function(){ue.receiveObjectTransfer=ue.Db,ue.threadInitTLS=ue.lb,ue.setExitStatus=ue.kb,Q=!1},kb:function(i){Ae=i},Sb:["$terminateWorker"],Hb:function(){for(var i of ue.Ya)Rt(i);for(i of ue.ab)Rt(i);ue.ab=[],ue.Ya=[],ue.Qa=[]},Eb:function(i){var c=i.Xa;delete ue.Qa[c],ue.ab.push(i),ue.Ya.splice(ue.Ya.indexOf(i),1),i.Xa=0,sn(c)},Db:function(){},lb:function(){ue.mb.forEach(i=>i())},Cb:i=>new Promise(c=>{i.onmessage=M=>{M=M.data;var N=M.cmd;if(M.targetThread&&M.targetThread!=_r()){var ae=ue.Qa[M.Rb];ae?ae.postMessage(M,M.transferList):j(\'Internal error! Worker sent a message "\'+N+\'" to target pthread \'+M.targetThread+", but that thread no longer exists!")}else N==="checkMailbox"?At():N==="spawnThread"?Lt(M):N==="cleanupThread"?Bt(M.thread):N==="killThread"?(M=M.thread,N=ue.Qa[M],delete ue.Qa[M],Rt(N),sn(M),ue.Ya.splice(ue.Ya.indexOf(N),1),N.Xa=0):N==="cancelThread"?ue.Qa[M.thread].postMessage({cmd:"cancel"}):N==="loaded"?(i.loaded=!0,c(i)):N==="alert"?alert("Thread "+M.threadId+": "+M.text):M.target==="setimmediate"?i.postMessage(M):N==="callHandler"?a[M.handler](...M.args):N&&j("worker sent an unknown command "+N)},i.onerror=M=>{throw j("worker sent an error! "+M.filename+":"+M.lineno+": "+M.message),M},I&&(i.on("message",function(M){i.onmessage({data:M})}),i.on("error",function(M){i.onerror(M)}));var f=[],S=["onExit","onAbort","print","printErr"],T;for(T of S)a.hasOwnProperty(T)&&f.push(T);i.postMessage({cmd:"load",handlers:f,urlOrBlob:a.mainScriptUrlOrBlob||e,wasmMemory:$e,wasmModule:Se})}),Bb:function(i){i()},qb:function(){var i=B("ort-wasm-simd-threaded.worker.js");i=new Worker(i),ue.ab.push(i)},tb:function(){return ue.ab.length==0&&(ue.qb(),ue.Cb(ue.ab[0])),ue.ab.pop()}};a.PThread=ue;var ht=i=>{for(;0<i.length;)i.shift()(a)};a.establishStackSpace=function(){var i=_r(),c=n()[i+52>>2>>>0];i=n()[i+56>>2>>>0],ao(c,c-i),Er(c)};function yr(i){if(x)return H(2,0,i);jt(i)}a.invokeEntryPoint=function(i,c){i=io.apply(null,[i,c]),ot()?ue.kb(i):un(i)};function at(i){this.fb=i-24,this.pb=function(c){s()[this.fb+4>>2>>>0]=c},this.ob=function(c){s()[this.fb+8>>2>>>0]=c},this.gb=function(c,f){this.nb(),this.pb(c),this.ob(f)},this.nb=function(){s()[this.fb+16>>2>>>0]=0}}var Xe=0,br=0;function Ct(i,c,f,S){return x?H(3,1,i,c,f,S):qt(i,c,f,S)}function qt(i,c,f,S){if(i>>>=0,c>>>=0,f>>>=0,S>>>=0,typeof SharedArrayBuffer>"u")return j("Current environment does not support SharedArrayBuffer, pthreads are not available!"),6;var T=[];return x&&T.length===0?Ct(i,c,f,S):(i={Gb:f,Xa:i,rb:S,Mb:T},x?(i.Ob="spawnThread",postMessage(i,T),0):Lt(i))}function Kt(i,c,f){return x?H(4,1,i,c,f):0}function wr(i,c){if(x)return H(5,1,i,c)}var It=i=>{for(var c=0,f=0;f<i.length;++f){var S=i.charCodeAt(f);127>=S?c++:2047>=S?c+=2:55296<=S&&57343>=S?(c+=4,++f):c+=3}return c},vr=(i,c,f,S)=>{if(f>>>=0,!(0<S))return 0;var T=f;S=f+S-1;for(var M=0;M<i.length;++M){var N=i.charCodeAt(M);if(55296<=N&&57343>=N){var ae=i.charCodeAt(++M);N=65536+((N&1023)<<10)|ae&1023}if(127>=N){if(f>=S)break;c[f++>>>0]=N}else{if(2047>=N){if(f+1>=S)break;c[f++>>>0]=192|N>>6}else{if(65535>=N){if(f+2>=S)break;c[f++>>>0]=224|N>>12}else{if(f+3>=S)break;c[f++>>>0]=240|N>>18,c[f++>>>0]=128|N>>12&63}c[f++>>>0]=128|N>>6&63}c[f++>>>0]=128|N&63}}return c[f>>>0]=0,f-T},$r=(i,c,f)=>vr(i,o(),c,f);function Sr(i,c){if(x)return H(6,1,i,c)}function xr(i,c,f){if(x)return H(7,1,i,c,f)}function Cr(i,c,f){return x?H(8,1,i,c,f):0}function Ir(i,c){if(x)return H(9,1,i,c)}function Dt(i,c,f){if(x)return H(10,1,i,c,f)}function Yt(i,c,f,S){if(x)return H(11,1,i,c,f,S)}function Zt(i,c,f,S){if(x)return H(12,1,i,c,f,S)}function Xt(i,c,f,S){if(x)return H(13,1,i,c,f,S)}function Qt(i){if(x)return H(14,1,i)}function Jt(i,c){if(x)return H(15,1,i,c)}function er(i,c,f){if(x)return H(16,1,i,c,f)}var tr=i=>{if(!Ie)try{if(i(),!ot())try{x?un(Ae):jt(Ae)}catch(c){c instanceof yt||c=="unwind"||w(1,c)}}catch(c){c instanceof yt||c=="unwind"||w(1,c)}};function zt(i){i>>>=0,typeof Atomics.Nb=="function"&&(Atomics.Nb(n(),i>>2,i).value.then(At),i+=128,Atomics.store(n(),i>>2,1))}a.__emscripten_thread_mailbox_await=zt;function At(){var i=_r();i&&(zt(i),tr(()=>no()))}a.checkMailbox=At;var bt=i=>i%4===0&&(i%100!==0||i%400===0),Tt=[0,31,60,91,121,152,182,213,244,274,305,335],rr=[0,31,59,90,120,151,181,212,243,273,304,334];function l(i,c,f,S,T,M,N,ae){return x?H(17,1,i,c,f,S,T,M,N,ae):-52}function m(i,c,f,S,T,M,N){if(x)return H(18,1,i,c,f,S,T,M,N)}var y=i=>{var c=It(i)+1,f=an(c);return f&&$r(i,f,c),f},C=[],_=(i,c)=>{C.length=0;var f;for(c>>=2;f=o()[i++>>>0];)c+=f!=105&c,C.push(f==105?n()[c>>>0]:d()[c++>>>1]),++c;return C},G=i=>{var c=ln();return i=i(),Er(c),i};function H(i,c){var f=arguments.length-2,S=arguments;return G(()=>{for(var T=dn(8*f),M=T>>3,N=0;N<f;N++){var ae=S[2+N];d()[M+N>>>0]=ae}return ro(i,f,T,c)})}var le=[],Z={},oe=()=>{if(!J){var i={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:(typeof navigator=="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:g||"./this.program"},c;for(c in Z)Z[c]===void 0?delete i[c]:i[c]=Z[c];var f=[];for(c in i)f.push(`${c}=${i[c]}`);J=f}return J},J;function me(i,c){if(x)return H(19,1,i,c);i>>>=0,c>>>=0;var f=0;return oe().forEach(function(S,T){var M=c+f;for(T=s()[i+4*T>>2>>>0]=M,M=0;M<S.length;++M)r()[T++>>0>>>0]=S.charCodeAt(M);r()[T>>0>>>0]=0,f+=S.length+1}),0}function we(i,c){if(x)return H(20,1,i,c);i>>>=0,c>>>=0;var f=oe();s()[i>>2>>>0]=f.length;var S=0;return f.forEach(function(T){S+=T.length+1}),s()[c>>2>>>0]=S,0}function O(i){return x?H(21,1,i):52}function ie(i,c,f,S){return x?H(22,1,i,c,f,S):52}function ge(i,c,f,S,T){return x?H(23,1,i,c,f,S,T):70}var gt=[null,[],[]];function nr(i,c,f,S){if(x)return H(24,1,i,c,f,S);c>>>=0,f>>>=0,S>>>=0;for(var T=0,M=0;M<f;M++){var N=s()[c>>2>>>0],ae=s()[c+4>>2>>>0];c+=8;for(var ee=0;ee<ae;ee++){var re=o()[N+ee>>>0],se=gt[i];re===0||re===10?((i===1?R:j)(gr(se,0)),se.length=0):se.push(re)}T+=ae}return s()[S>>2>>>0]=T,0}var Kn=[31,29,31,30,31,30,31,31,30,31,30,31],Yn=[31,28,31,30,31,30,31,31,30,31,30,31];function Au(i){var c=Array(It(i)+1);return vr(i,c,0,c.length),c}var Tu=(i,c)=>{r().set(i,c>>>0)};function Zn(i,c,f,S){function T(k,ce,xe){for(k=typeof k=="number"?k.toString():k||"";k.length<ce;)k=xe[0]+k;return k}function M(k,ce){return T(k,ce,"0")}function N(k,ce){function xe(mo){return 0>mo?-1:0<mo?1:0}var _t;return(_t=xe(k.getFullYear()-ce.getFullYear()))===0&&(_t=xe(k.getMonth()-ce.getMonth()))===0&&(_t=xe(k.getDate()-ce.getDate())),_t}function ae(k){switch(k.getDay()){case 0:return new Date(k.getFullYear()-1,11,29);case 1:return k;case 2:return new Date(k.getFullYear(),0,3);case 3:return new Date(k.getFullYear(),0,2);case 4:return new Date(k.getFullYear(),0,1);case 5:return new Date(k.getFullYear()-1,11,31);case 6:return new Date(k.getFullYear()-1,11,30)}}function ee(k){var ce=k.Za;for(k=new Date(new Date(k.$a+1900,0,1).getTime());0<ce;){var xe=k.getMonth(),_t=(bt(k.getFullYear())?Kn:Yn)[xe];if(ce>_t-k.getDate())ce-=_t-k.getDate()+1,k.setDate(1),11>xe?k.setMonth(xe+1):(k.setMonth(0),k.setFullYear(k.getFullYear()+1));else{k.setDate(k.getDate()+ce);break}}return xe=new Date(k.getFullYear()+1,0,4),ce=ae(new Date(k.getFullYear(),0,4)),xe=ae(xe),0>=N(ce,k)?0>=N(xe,k)?k.getFullYear()+1:k.getFullYear():k.getFullYear()-1}i>>>=0,c>>>=0,f>>>=0,S>>>=0;var re=n()[S+40>>2>>>0];S={Kb:n()[S>>2>>>0],Jb:n()[S+4>>2>>>0],cb:n()[S+8>>2>>>0],ib:n()[S+12>>2>>>0],eb:n()[S+16>>2>>>0],$a:n()[S+20>>2>>>0],Wa:n()[S+24>>2>>>0],Za:n()[S+28>>2>>>0],Tb:n()[S+32>>2>>>0],Ib:n()[S+36>>2>>>0],Lb:re?Ne(re):""},f=Ne(f),re={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var se in re)f=f.replace(new RegExp(se,"g"),re[se]);var ve="Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),Ce="January February March April May June July August September October November December".split(" ");re={"%a":k=>ve[k.Wa].substring(0,3),"%A":k=>ve[k.Wa],"%b":k=>Ce[k.eb].substring(0,3),"%B":k=>Ce[k.eb],"%C":k=>M((k.$a+1900)/100|0,2),"%d":k=>M(k.ib,2),"%e":k=>T(k.ib,2," "),"%g":k=>ee(k).toString().substring(2),"%G":k=>ee(k),"%H":k=>M(k.cb,2),"%I":k=>(k=k.cb,k==0?k=12:12<k&&(k-=12),M(k,2)),"%j":k=>{for(var ce=0,xe=0;xe<=k.eb-1;ce+=(bt(k.$a+1900)?Kn:Yn)[xe++]);return M(k.ib+ce,3)},"%m":k=>M(k.eb+1,2),"%M":k=>M(k.Jb,2),"%n":()=>`\n`,"%p":k=>0<=k.cb&&12>k.cb?"AM":"PM","%S":k=>M(k.Kb,2),"%t":()=>"	","%u":k=>k.Wa||7,"%U":k=>M(Math.floor((k.Za+7-k.Wa)/7),2),"%V":k=>{var ce=Math.floor((k.Za+7-(k.Wa+6)%7)/7);if(2>=(k.Wa+371-k.Za-2)%7&&ce++,ce)ce==53&&(xe=(k.Wa+371-k.Za)%7,xe==4||xe==3&&bt(k.$a)||(ce=1));else{ce=52;var xe=(k.Wa+7-k.Za-1)%7;(xe==4||xe==5&&bt(k.$a%400-1))&&ce++}return M(ce,2)},"%w":k=>k.Wa,"%W":k=>M(Math.floor((k.Za+7-(k.Wa+6)%7)/7),2),"%y":k=>(k.$a+1900).toString().substring(2),"%Y":k=>k.$a+1900,"%z":k=>{k=k.Ib;var ce=0<=k;return k=Math.abs(k)/60,(ce?"+":"-")+("0000"+(k/60*100+k%60)).slice(-4)},"%Z":k=>k.Lb,"%%":()=>"%"},f=f.replace(/%%/g,"\\0\\0");for(se in re)f.includes(se)&&(f=f.replace(new RegExp(se,"g"),re[se](S)));return f=f.replace(/\\0\\0/g,"%"),se=Au(f),se.length>c?0:(Tu(se,i),se.length-1)}function Ar(i){try{i()}catch(c){Qe(c)}}function _u(i){var c={},f;for(f in i)(function(S){var T=i[S];c[S]=typeof T=="function"?function(){Tr.push(S);try{return T.apply(null,arguments)}finally{Ie||(Tr.pop()===S||Qe(),it&&wt===1&&Tr.length===0&&(wt=0,Fe+=1,Ar(uo),typeof Fibers<"u"&&Fibers.Ub()))}}:T})(f);return c}var wt=0,it=null,Xn=0,Tr=[],Qn={},Jn={},Eu=0,on=null,Ou=[];function ku(){return new Promise((i,c)=>{on={resolve:i,reject:c}})}function Pu(){var i=an(65548),c=i+12;s()[i>>2>>>0]=c,s()[i+4>>2>>>0]=c+65536,c=Tr[0];var f=Qn[c];return f===void 0&&(f=Eu++,Qn[c]=f,Jn[f]=c),c=f,n()[i+8>>2>>>0]=c,i}function Ru(){var i=n()[it+8>>2>>>0];return i=Y[Jn[i]],--Fe,i()}function Bu(i){if(!Ie){if(wt===0){var c=!1,f=!1;i((S=0)=>{if(!Ie&&(Xn=S,c=!0,f)){wt=2,Ar(()=>lo(it)),typeof Browser<"u"&&Browser.hb.sb&&Browser.hb.resume(),S=!1;try{var T=Ru()}catch(ae){T=ae,S=!0}var M=!1;if(!it){var N=on;N&&(on=null,(S?N.reject:N.resolve)(T),M=!0)}if(S&&!M)throw T}}),f=!0,c||(wt=1,it=Pu(),typeof Browser<"u"&&Browser.hb.sb&&Browser.hb.pause(),Ar(()=>so(it)))}else wt===2?(wt=0,Ar(co),eo(it),it=null,Ou.forEach(S=>tr(S))):Qe(`invalid state: ${wt}`);return Xn}}function Mu(i){return Bu(c=>{i().then(c)})}ue.gb();var Du=[null,Ft,yr,Ct,Kt,wr,Sr,xr,Cr,Ir,Dt,Yt,Zt,Xt,Qt,Jt,er,l,m,me,we,O,ie,ge,nr],zu={r:function(i,c,f){return Mu(async()=>{await a.xb(i,c,f)})},b:function(i,c,f){throw i>>>=0,new at(i).gb(c>>>0,f>>>0),Xe=i,br++,Xe},P:function(i){to(i>>>0,!v,1,!b,131072,!1),ue.lb()},n:function(i){i>>>=0,x?postMessage({cmd:"cleanupThread",thread:i}):Bt(i)},K:qt,g:Kt,V:wr,F:Sr,H:xr,y:Cr,T:Ir,L:Dt,S:Yt,p:Zt,G:Xt,D:Qt,U:Jt,E:er,q:()=>!0,B:function(i,c){i>>>=0,i==c>>>0?setTimeout(()=>At()):x?postMessage({targetThread:i,cmd:"checkMailbox"}):(i=ue.Qa[i])&&i.postMessage({cmd:"checkMailbox"})},N:function(){return-1},O:zt,X:function(i){I&&ue.Qa[i>>>0].ref()},u:function(i,c,f){i=c+2097152>>>0<4194305-!!i?(i>>>0)+4294967296*c:NaN,f>>>=0,i=new Date(1e3*i),n()[f>>2>>>0]=i.getUTCSeconds(),n()[f+4>>2>>>0]=i.getUTCMinutes(),n()[f+8>>2>>>0]=i.getUTCHours(),n()[f+12>>2>>>0]=i.getUTCDate(),n()[f+16>>2>>>0]=i.getUTCMonth(),n()[f+20>>2>>>0]=i.getUTCFullYear()-1900,n()[f+24>>2>>>0]=i.getUTCDay(),i=(i.getTime()-Date.UTC(i.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,n()[f+28>>2>>>0]=i},v:function(i,c,f){i=c+2097152>>>0<4194305-!!i?(i>>>0)+4294967296*c:NaN,f>>>=0,i=new Date(1e3*i),n()[f>>2>>>0]=i.getSeconds(),n()[f+4>>2>>>0]=i.getMinutes(),n()[f+8>>2>>>0]=i.getHours(),n()[f+12>>2>>>0]=i.getDate(),n()[f+16>>2>>>0]=i.getMonth(),n()[f+20>>2>>>0]=i.getFullYear()-1900,n()[f+24>>2>>>0]=i.getDay(),c=(bt(i.getFullYear())?Tt:rr)[i.getMonth()]+i.getDate()-1|0,n()[f+28>>2>>>0]=c,n()[f+36>>2>>>0]=-(60*i.getTimezoneOffset()),c=new Date(i.getFullYear(),6,1).getTimezoneOffset();var S=new Date(i.getFullYear(),0,1).getTimezoneOffset();i=(c!=S&&i.getTimezoneOffset()==Math.min(S,c))|0,n()[f+32>>2>>>0]=i},w:function(i){i>>>=0;var c=new Date(n()[i+20>>2>>>0]+1900,n()[i+16>>2>>>0],n()[i+12>>2>>>0],n()[i+8>>2>>>0],n()[i+4>>2>>>0],n()[i>>2>>>0],0),f=n()[i+32>>2>>>0],S=c.getTimezoneOffset(),T=new Date(c.getFullYear(),6,1).getTimezoneOffset(),M=new Date(c.getFullYear(),0,1).getTimezoneOffset(),N=Math.min(M,T);return 0>f?n()[i+32>>2>>>0]=+(T!=M&&N==S):0<f!=(N==S)&&(T=Math.max(M,T),c.setTime(c.getTime()+6e4*((0<f?N:T)-S))),n()[i+24>>2>>>0]=c.getDay(),f=(bt(c.getFullYear())?Tt:rr)[c.getMonth()]+c.getDate()-1|0,n()[i+28>>2>>>0]=f,n()[i>>2>>>0]=c.getSeconds(),n()[i+4>>2>>>0]=c.getMinutes(),n()[i+8>>2>>>0]=c.getHours(),n()[i+12>>2>>>0]=c.getDate(),n()[i+16>>2>>>0]=c.getMonth(),n()[i+20>>2>>>0]=c.getYear(),i=c.getTime()/1e3,oo((ft=i,1<=+Math.abs(ft)?0<ft?+Math.floor(ft/4294967296)>>>0:~~+Math.ceil((ft-+(~~ft>>>0))/4294967296)>>>0:0)),i>>>0},s:l,t:m,A:function(i,c,f){function S(re){return(re=re.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?re[1]:"GMT"}i>>>=0,c>>>=0,f>>>=0;var T=new Date().getFullYear(),M=new Date(T,0,1),N=new Date(T,6,1);T=M.getTimezoneOffset();var ae=N.getTimezoneOffset(),ee=Math.max(T,ae);s()[i>>2>>>0]=60*ee,n()[c>>2>>>0]=+(T!=ae),i=S(M),c=S(N),i=y(i),c=y(c),ae<T?(s()[f>>2>>>0]=i,s()[f+4>>2>>>0]=c):(s()[f>>2>>>0]=c,s()[f+4>>2>>>0]=i)},e:()=>{Qe("")},c:function(i,c,f){return i>>>=0,c=_(c>>>0,f>>>0),Pt[i].apply(null,c)},l:function(i,c,f){return i>>>=0,c=_(c>>>0,f>>>0),Pt[i].apply(null,c)},o:function(){},k:function(){return Date.now()},W:()=>{throw Fe+=1,"unwind"},C:function(){return 4294901760},d:()=>performance.timeOrigin+performance.now(),i:function(){return I?(vo(),Vt(wo)).cpus().length:navigator.hardwareConcurrency},M:function(i,c,f,S){for(ue.Pb=c>>>0,le.length=f,c=S>>>0>>3,S=0;S<f;S++)le[S]=d()[c+S>>>0];return(0>i?Pt[-i-1]:Du[i]).apply(null,le)},z:function(i){i>>>=0;var c=o().length;if(i<=c||4294901760<i)return!1;for(var f=1;4>=f;f*=2){var S=c*(1+.2/f);S=Math.min(S,i+100663296);var T=Math;S=Math.max(i,S);e:{T=T.min.call(T,4294901760,S+(65536-S%65536)%65536)-$e.buffer.byteLength+65535>>>16;try{$e.grow(T),fe();var M=1;break e}catch{}M=void 0}if(M)return!0}return!1},Q:me,R:we,J:jt,h:O,m:ie,x:ge,j:nr,a:$e||a.wasmMemory,I:Zn,f:function(i,c,f,S){return Zn(i>>>0,c>>>0,f>>>0,S>>>0)}};(function(){function i(f,S){return f=f.exports,f=_u(f),Y=f=Vu(f),ue.mb.push(Y.Da),Re.unshift(Y.Y),Se=S,fr(),f}var c={a:zu};if(Nt(),a.instantiateWasm)try{return a.instantiateWasm(c,i)}catch(f){j("Module.instantiateWasm callback failed with error: "+f),h(f)}return hr(c,function(f){i(f.instance,f.module)}).catch(h),{}})(),a._OrtInit=(i,c)=>(a._OrtInit=Y.Z)(i,c),a._OrtGetLastError=(i,c)=>(a._OrtGetLastError=Y._)(i,c),a._OrtCreateSessionOptions=(i,c,f,S,T,M,N,ae,ee,re)=>(a._OrtCreateSessionOptions=Y.$)(i,c,f,S,T,M,N,ae,ee,re),a._OrtAppendExecutionProvider=(i,c)=>(a._OrtAppendExecutionProvider=Y.aa)(i,c),a._OrtAddFreeDimensionOverride=(i,c,f)=>(a._OrtAddFreeDimensionOverride=Y.ba)(i,c,f),a._OrtAddSessionConfigEntry=(i,c,f)=>(a._OrtAddSessionConfigEntry=Y.ca)(i,c,f),a._OrtReleaseSessionOptions=i=>(a._OrtReleaseSessionOptions=Y.da)(i),a._OrtCreateSession=(i,c,f)=>(a._OrtCreateSession=Y.ea)(i,c,f),a._OrtReleaseSession=i=>(a._OrtReleaseSession=Y.fa)(i),a._OrtGetInputOutputCount=(i,c,f)=>(a._OrtGetInputOutputCount=Y.ga)(i,c,f),a._OrtGetInputName=(i,c)=>(a._OrtGetInputName=Y.ha)(i,c),a._OrtGetOutputName=(i,c)=>(a._OrtGetOutputName=Y.ia)(i,c),a._OrtFree=i=>(a._OrtFree=Y.ja)(i),a._OrtCreateTensor=(i,c,f,S,T,M)=>(a._OrtCreateTensor=Y.ka)(i,c,f,S,T,M),a._OrtGetTensorData=(i,c,f,S,T)=>(a._OrtGetTensorData=Y.la)(i,c,f,S,T),a._OrtReleaseTensor=i=>(a._OrtReleaseTensor=Y.ma)(i),a._OrtCreateRunOptions=(i,c,f,S)=>(a._OrtCreateRunOptions=Y.na)(i,c,f,S),a._OrtAddRunConfigEntry=(i,c,f)=>(a._OrtAddRunConfigEntry=Y.oa)(i,c,f),a._OrtReleaseRunOptions=i=>(a._OrtReleaseRunOptions=Y.pa)(i),a._OrtCreateBinding=i=>(a._OrtCreateBinding=Y.qa)(i),a._OrtBindInput=(i,c,f)=>(a._OrtBindInput=Y.ra)(i,c,f),a._OrtBindOutput=(i,c,f,S)=>(a._OrtBindOutput=Y.sa)(i,c,f,S),a._OrtClearBoundOutputs=i=>(a._OrtClearBoundOutputs=Y.ta)(i),a._OrtReleaseBinding=i=>(a._OrtReleaseBinding=Y.ua)(i),a._OrtRunWithBinding=(i,c,f,S,T)=>(a._OrtRunWithBinding=Y.va)(i,c,f,S,T),a._OrtRun=(i,c,f,S,T,M,N,ae)=>(a._OrtRun=Y.wa)(i,c,f,S,T,M,N,ae),a._OrtEndProfiling=i=>(a._OrtEndProfiling=Y.xa)(i),a._JsepOutput=(i,c,f)=>(a._JsepOutput=Y.ya)(i,c,f),a._JsepGetNodeName=i=>(a._JsepGetNodeName=Y.za)(i);var _r=a._pthread_self=()=>(_r=a._pthread_self=Y.Aa)(),an=a._malloc=i=>(an=a._malloc=Y.Ba)(i),eo=a._free=i=>(eo=a._free=Y.Ca)(i);a.__emscripten_tls_init=()=>(a.__emscripten_tls_init=Y.Da)();var to=a.__emscripten_thread_init=(i,c,f,S,T,M)=>(to=a.__emscripten_thread_init=Y.Fa)(i,c,f,S,T,M);a.__emscripten_thread_crashed=()=>(a.__emscripten_thread_crashed=Y.Ga)();var ro=(i,c,f,S)=>(ro=Y.Ha)(i,c,f,S),sn=i=>(sn=Y.Ia)(i),un=a.__emscripten_thread_exit=i=>(un=a.__emscripten_thread_exit=Y.Ja)(i),no=a.__emscripten_check_mailbox=()=>(no=a.__emscripten_check_mailbox=Y.Ka)(),oo=i=>(oo=Y.La)(i),ao=(i,c)=>(ao=Y.Ma)(i,c),ln=()=>(ln=Y.Na)(),Er=i=>(Er=Y.Oa)(i),dn=i=>(dn=Y.Pa)(i),io=a.dynCall_ii=(i,c)=>(io=a.dynCall_ii=Y.Ra)(i,c),so=i=>(so=Y.Sa)(i),uo=()=>(uo=Y.Ta)(),lo=i=>(lo=Y.Ua)(i),co=()=>(co=Y.Va)();a.___start_em_js=1440058,a.___stop_em_js=1440219;function Vu(i){i=Object.assign({},i);var c=S=>()=>S()>>>0,f=S=>T=>S(T)>>>0;return i.__errno_location=c(i.__errno_location),i.pthread_self=c(i.pthread_self),i.malloc=f(i.malloc),i.stackSave=c(i.stackSave),i.stackAlloc=f(i.stackAlloc),i}a.keepRuntimeAlive=ot,a.wasmMemory=$e,a.stackAlloc=dn,a.stackSave=ln,a.stackRestore=Er,a.UTF8ToString=Ne,a.stringToUTF8=$r,a.lengthBytesUTF8=It,a.ExitStatus=yt,a.PThread=ue;var Or;xt=function i(){Or||po(),Or||(xt=i)};function po(){function i(){if(!Or&&(Or=!0,a.calledRun=!0,!Ie)&&(x||ht(Re),p(a),a.onRuntimeInitialized&&a.onRuntimeInitialized(),!x)){if(a.postRun)for(typeof a.postRun=="function"&&(a.postRun=[a.postRun]);a.postRun.length;){var c=a.postRun.shift();Ve.unshift(c)}ht(Ve)}}if(!(0<Ze))if(x)p(a),x||ht(Re),startWorker(a);else{if(a.preRun)for(typeof a.preRun=="function"&&(a.preRun=[a.preRun]);a.preRun.length;)Ke.unshift(a.preRun.shift());ht(Ke),0<Ze||(a.setStatus?(a.setStatus("Running..."),setTimeout(function(){setTimeout(function(){a.setStatus("")},1),i()},1)):i())}}if(a.preInit)for(typeof a.preInit=="function"&&(a.preInit=[a.preInit]);0<a.preInit.length;)a.preInit.pop()();return po(),t.ready}})();typeof So=="object"&&typeof yn=="object"?yn.exports=$o:typeof define=="function"&&define.amd&&define([],()=>$o)});var Co=or((Nc,ju)=>{ju.exports=\'"use strict";var Module={},ENVIRONMENT_IS_NODE=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string";if(ENVIRONMENT_IS_NODE){var nodeWorkerThreads=require("worker_threads"),parentPort=nodeWorkerThreads.parentPort;parentPort.on("message",e=>onmessage({data:e}));var fs=require("fs");Object.assign(global,{self:global,require,Module,location:{href:__filename},Worker:nodeWorkerThreads.Worker,importScripts:e=>(0,eval)(fs.readFileSync(e,"utf8")+"//# sourceURL="+e),postMessage:e=>parentPort.postMessage(e),performance:global.performance||{now:Date.now}})}var initializedJS=!1;function threadPrintErr(){var e=Array.prototype.slice.call(arguments).join(" ");if(ENVIRONMENT_IS_NODE){fs.writeSync(2,e+`\\n`);return}console.error(e)}function threadAlert(){var e=Array.prototype.slice.call(arguments).join(" ");postMessage({cmd:"alert",text:e,threadId:Module._pthread_self()})}var err=threadPrintErr;self.alert=threadAlert,Module.instantiateWasm=(e,t)=>{var a=Module.wasmModule;Module.wasmModule=null;var r=new WebAssembly.Instance(a,e);return t(r)},self.onunhandledrejection=e=>{throw e.reason??e};function handleMessage(e){try{if(e.data.cmd==="load"){let a=[];self.onmessage=r=>a.push(r),self.startWorker=r=>{Module=r,postMessage({cmd:"loaded"});for(let s of a)handleMessage(s);self.onmessage=handleMessage},Module.wasmModule=e.data.wasmModule;for(const r of e.data.handlers)Module[r]=(...s)=>{postMessage({cmd:"callHandler",handler:r,args:s})};if(Module.wasmMemory=e.data.wasmMemory,Module.buffer=Module.wasmMemory.buffer,Module.ENVIRONMENT_IS_PTHREAD=!0,typeof e.data.urlOrBlob=="string")importScripts(e.data.urlOrBlob);else{var t=URL.createObjectURL(e.data.urlOrBlob);importScripts(t),URL.revokeObjectURL(t)}ortWasmThreaded(Module)}else if(e.data.cmd==="run"){Module.__emscripten_thread_init(e.data.pthread_ptr,0,0,1),Module.__emscripten_thread_mailbox_await(e.data.pthread_ptr),Module.establishStackSpace(),Module.PThread.receiveObjectTransfer(e.data),Module.PThread.threadInitTLS(),initializedJS||(initializedJS=!0);try{Module.invokeEntryPoint(e.data.start_routine,e.data.arg)}catch(a){if(a!="unwind")throw a}}else e.data.cmd==="cancel"?Module._pthread_self()&&Module.__emscripten_thread_exit(-1):e.data.target==="setimmediate"||(e.data.cmd==="checkMailbox"?initializedJS&&Module.checkMailbox():e.data.cmd&&(err("worker.js received unknown command "+e.data.cmd),err(e.data)))}catch(a){throw Module.__emscripten_thread_crashed&&Module.__emscripten_thread_crashed(),a}}self.onmessage=handleMessage;\\n\'});var vn,ir,sr,Rr,ur,Oo,$n,ze=q(()=>{"use strict";vn=e=>{switch(e){case"int8":return 3;case"uint8":return 2;case"bool":return 9;case"int16":return 5;case"uint16":return 4;case"int32":return 6;case"uint32":return 12;case"float16":return 10;case"float32":return 1;case"float64":return 11;case"string":return 8;case"int64":return 7;case"uint64":return 13;default:throw new Error(`unsupported data type: ${e}`)}},ir=e=>{switch(e){case 3:return"int8";case 2:return"uint8";case 9:return"bool";case 5:return"int16";case 4:return"uint16";case 6:return"int32";case 12:return"uint32";case 10:return"float16";case 1:return"float32";case 11:return"float64";case 8:return"string";case 7:return"int64";case 13:return"uint64";default:throw new Error(`unsupported data type: ${e}`)}},sr=e=>[void 0,4,1,1,2,2,4,8,void 0,1,2,8,4,8,void 0,void 0,void 0][e],Rr=e=>{switch(e){case"float16":return Uint16Array;case"float32":return Float32Array;case"uint8":return Uint8Array;case"int8":return Int8Array;case"uint16":return Uint16Array;case"int16":return Int16Array;case"int32":return Int32Array;case"bool":return Uint8Array;case"float64":return Float64Array;case"uint32":return Uint32Array;case"int64":return BigInt64Array;case"uint64":return BigUint64Array;default:throw new Error(`unsupported type: ${e}`)}},ur=e=>{switch(e){case"verbose":return 0;case"info":return 1;case"warning":return 2;case"error":return 3;case"fatal":return 4;default:throw new Error(`unsupported logging level: ${e}`)}},Oo=e=>e==="float32"||e==="int32"||e==="int64"||e==="bool"||e==="float16"||e==="uint32",$n=e=>{switch(e){case"none":return 0;case"cpu":return 1;case"cpu-pinned":return 2;case"texture":return 3;case"gpu-buffer":return 4;default:throw new Error(`unsupported data location: ${e}`)}}});var tl,rl,ko,Po,Ro,nl,Pe,vt=q(()=>{"use strict";ze();tl=["V","I","W","E","F"],rl=(e,t)=>{console.log(`[${tl[e]},${new Date().toISOString()}]${t}`)},Ro=(e,t)=>{ko=e,Po=t},nl=(e,t)=>{let r=ur(e),o=ur(ko);r>=o&&rl(r,typeof t=="function"?t():t)},Pe=(...e)=>{Po&&nl(...e)}});var Bo,Mo=q(()=>{"use strict";ze();Bo=(e,t)=>new(Rr(t))(e)});var Br=q(()=>{"use strict"});var Mr,ol,Do,xn,Sn,Vo,Wo=q(()=>{"use strict";vt();Br();Mr=e=>Math.ceil(e/16)*16,ol=1,Do=()=>ol++,xn=async(e,t,r,o)=>{let n=Mr(r),s=e.device.createBuffer({size:n,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ});try{let u=e.getCommandEncoder();e.endComputePass(),u.copyBufferToBuffer(t,0,s,0,n),e.flush(),await s.mapAsync(GPUMapMode.READ);let d=s.getMappedRange();if(o){let a=o();return a.set(new Uint8Array(d,0,r)),a}else return new Uint8Array(d.slice(0,r))}finally{s.destroy()}},Sn=class{constructor(t){this.backend=t;this.storageCache=new Map,this.freeBuffers=new Map,this.freeUniformBuffers=new Map,this.buffersForUploadingPending=[],this.buffersPending=[],this.externalBuffers=new Map}upload(t,r){let o=r.buffer,n=r.byteOffset,s=r.byteLength,u=Mr(s),d=this.storageCache.get(t);if(!d)throw new Error("gpu data for uploading does not exist");if(d.originalSize!==s)throw new Error(`inconsistent data size. gpu data size=${d.originalSize}, data size=${s}`);let a=this.backend.device.createBuffer({mappedAtCreation:!0,size:u,usage:GPUBufferUsage.MAP_WRITE|GPUBufferUsage.COPY_SRC}),p=a.getMappedRange();new Uint8Array(p).set(new Uint8Array(o,n,s)),a.unmap();let h=this.backend.getCommandEncoder();this.backend.endComputePass(),h.copyBufferToBuffer(a,0,d.gpuData.buffer,0,u),Pe("verbose",()=>`[WebGPU] GpuDataManager.upload(id=${t})`),this.buffersForUploadingPending.push(a)}memcpy(t,r){let o=this.storageCache.get(t);if(!o)throw new Error("source gpu data for memcpy does not exist");let n=this.storageCache.get(r);if(!n)throw new Error("destination gpu data for memcpy does not exist");if(o.originalSize!==n.originalSize)throw new Error("inconsistent source and destination gpu data size");let s=Mr(o.originalSize),u=this.backend.getCommandEncoder();this.backend.endComputePass(),u.copyBufferToBuffer(o.gpuData.buffer,0,n.gpuData.buffer,0,s)}registerExternalBuffer(t,r,o){let n;if(o){if(n=this.externalBuffers.get(o),n===void 0)throw new Error("previous buffer is not registered");if(t===o)return Pe("verbose",()=>`[WebGPU] GpuDataManager.registerExternalBuffer(size=${r}) => id=${n}, buffer is the same, skip.`),n;this.externalBuffers.delete(o)}else n=Do();return this.storageCache.set(n,{gpuData:{id:n,type:0,buffer:t},originalSize:r}),this.externalBuffers.set(t,n),Pe("verbose",()=>`[WebGPU] GpuDataManager.registerExternalBuffer(size=${r}) => id=${n}, registered.`),n}unregisterExternalBuffer(t){let r=this.externalBuffers.get(t);r!==void 0&&(this.storageCache.delete(r),this.externalBuffers.delete(t),Pe("verbose",()=>`[WebGPU] GpuDataManager.unregisterExternalBuffer() => id=${r}`))}create(t,r=GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST){let o=Mr(t),n,s=(r&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE,u=(r&GPUBufferUsage.UNIFORM)===GPUBufferUsage.UNIFORM;if(s||u){let a=s?this.freeBuffers:this.freeUniformBuffers,p=a.get(o);p||(p=[],a.set(o,p)),p.length>0?n=p.pop():n=this.backend.device.createBuffer({size:o,usage:r})}else n=this.backend.device.createBuffer({size:o,usage:r});let d={id:Do(),type:0,buffer:n};return this.storageCache.set(d.id,{gpuData:d,originalSize:t}),Pe("verbose",()=>`[WebGPU] GpuDataManager.create(size=${t}) => id=${d.id}`),d}get(t){return this.storageCache.get(t)?.gpuData}release(t){let r=this.storageCache.get(t);if(!r)throw new Error("releasing data does not exist");return Pe("verbose",()=>`[WebGPU] GpuDataManager.release(id=${t}), gpuDataId=${r.gpuData.id}`),this.storageCache.delete(t),this.buffersPending.push(r.gpuData.buffer),r.originalSize}async download(t,r){let o=this.storageCache.get(t);if(!o)throw new Error("data does not exist");await xn(this.backend,o.gpuData.buffer,o.originalSize,r)}refreshPendingBuffers(){for(let t of this.buffersForUploadingPending)t.destroy();this.buffersForUploadingPending=[];for(let t of this.buffersPending)(t.usage&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE?this.freeBuffers.get(t.size).push(t):(t.usage&GPUBufferUsage.UNIFORM)===GPUBufferUsage.UNIFORM?this.freeUniformBuffers.get(t.size).push(t):t.destroy();this.buffersPending=[]}dispose(){this.freeBuffers.forEach(t=>{t.forEach(r=>{r.destroy()})}),this.freeUniformBuffers.forEach(t=>{t.forEach(r=>{r.destroy()})}),this.storageCache.forEach(t=>{t.gpuData.buffer.destroy()}),this.storageCache=new Map,this.freeBuffers=new Map,this.freeUniformBuffers=new Map}},Vo=(...e)=>new Sn(...e)});var Cn,X,Oe=q(()=>{"use strict";Cn=class{constructor(t){Object.assign(this,t)}get cacheKey(){return this.key||(this.key=Object.getOwnPropertyNames(this).sort().map(t=>`${this[t]}`).join(";")),this.key}},X=e=>new Cn(e)});var In,st,D,Et,Dr,zr,Vr,ye=q(()=>{"use strict";In=class{static calcMatMulShape(t,r){return t[1]!==r[0]?void 0:[t[0],r[1]]}},st=class{static calcShape(t,r,o=!1){let n=t.length,s=r.length;if(n===0)return r;if(s===0)return t;let u=Math.max(t.length,r.length),d=new Array(u);if(o){if(n<2||s<2)return;let a=In.calcMatMulShape([t[n-2],t[n-1]],[r[s-2],r[s-1]]);if(a===void 0)return;[d[u-2],d[u-1]]=a}for(let a=o?3:1;a<=u;a++){let p=n-a<0?1:t[n-a],h=s-a<0?1:r[s-a];if(p!==h&&p>1&&h>1)return;d[u-a]=Math.max(p,h)}return d}static isValidBroadcast(t,r){let o=t.length,n=r.length;if(o>n)return!1;for(let s=1;s<=o;s++)if(t[o-s]!==1&&t[o-s]!==r[n-s])return!1;return!0}},D=class e{static size(t){return e.getSizeFromDimensionRange(t,0,t.length)}static sizeFromDimension(t,r){if(r<0||r>t.length)throw new Error(`invalid dimension of ${r} for sizeFromDimension as Tensor has ${t.length} dimensions.`);return e.getSizeFromDimensionRange(t,r,t.length)}static sizeToDimension(t,r){if(r<0||r>t.length)throw new Error(`invalid dimension of ${r} for sizeToDimension as Tensor has ${t.length} dimensions.`);return e.getSizeFromDimensionRange(t,0,r)}static getSizeFromDimensionRange(t,r,o){let n=1;for(let s=r;s<o;s++){if(t[s]<0)throw new Error("cannot get valid size from specified dimension range. Most likely the range contains negative values in them.");n*=t[s]}return n}static computeStrides(t){let r=t.length;if(r===0)return[];if(r===1)return[1];let o=new Array(r);o[r-1]=1,o[r-2]=t[r-1];for(let n=r-3;n>=0;--n)o[n]=o[n+1]*t[n+1];return o}static normalizeAxis(t,r){if(t<-r&&t>=r)throw new Error("unsupported axis for this operation.");return t<0?t+r:t}static normalizeAxes(t,r){return t.map(o=>this.normalizeAxis(o,r??t.length))}static sortBasedOnPerm(t,r){return r?r.map(o=>t[o]):t.slice().reverse()}static padShape(t,r){let o=t.length;return t.map((n,s)=>n+r[s]+r[s+o])}static areEqual(t,r){return t.length!==r.length?!1:t.every((o,n)=>o===r[n])}},Et=class e{static adjustPoolAttributes(t,r,o,n,s,u){if(!t&&o.length!==r.length-2)throw new Error("length of specified kernel shapes should be 2 less than length of input dimensions");if(t)for(let d=0;d<r.length-2;d++)d>=o.length?o.push(r[d+2]):o[d]=r[d+2];for(let d=0;d<o.length;d++)if(d<n.length){if(n[d]<0)throw new Error("strides should be greater than or equal to 1")}else n.push(1);for(let d=0;d<o.length;d++)if(d<s.length){if(s[d]<0)throw new Error("dilations should be greater than or equal to 1")}else s.push(1);for(let d=0;d<o.length*2;d++)if(d<u.length){if(u[d]<0)throw new Error("pad should be greater than or equal to 1")}else u.push(0);for(let d=0;d<o.length;d++){if(o[d]<=0)throw new Error("kernel shapes need to be greater than 0");if(u[d]>=o[d]||u[d+o.length]>=o[d])throw new Error("pads should be smaller than kernel")}}static adjustPadsBasedOnAutoPad(t,r,o,n,s,u,d){if(d){if(s.length!==2*(t.length-2))throw new Error("length of pads should be twice the length of data dimensions");if(r.length!==t.length-2)throw new Error("length of strides should be the length of data dimensions");if(n.length!==t.length-2)throw new Error("length of kernel shapes should be the length of data dimensions");for(let a=0;a<t.length-2;a++)e.adjustPadAndReturnShape(t[a+(u?1:2)],r[a],o[a],n[a],s,a,a+t.length-2,d)}}static computePoolOutputShape(t,r,o,n,s,u,d){if(r.length<=0)throw new Error("input shape must be of size greater than 0");let a=[r[0],r[1]];return e.computeShapeHelper(t,r,a,o,n,s,u,d),a}static computeConvOutputShape(t,r,o,n,s,u,d){if(t.length<=0||r.length<=0)throw new Error("invalid input tensor dims or invalid filter tensor dims");let a=[t[0],r[0]];return e.computeShapeHelper(!1,t,a,o,n,s,u,d),a}static computeShapeHelper(t,r,o,n,s,u,d,a){if(t)for(let p=0;p<r.length-2;p++)o.push(1);else for(let p=0;p<r.length-2;p++)o.push(e.adjustPadAndReturnShape(r[p+2],n[p],s[p],u[p],d,p,p+r.length-2,a))}static adjustPadAndReturnShape(t,r,o,n,s,u,d,a){let p=o*(n-1)+1;if(a&&a!=="NOTSET")switch(a){case"VALID":return s[u]=0,s[d]=0,Math.floor((t-p)/r+1);case"SAME_LOWER":case"SAME_UPPER":if(o!==1)throw new Error("Dilation not supported for SAME_UPPER or SAME_LOWER");{let $=((t+r-1)/r-1)*r+n-t;return s[u]=Math.floor(a==="SAME_LOWER"?($+1)/2:$/2),s[d]=$-s[u],Math.floor((t+$-n)/r+1)}default:throw new Error("Unsupported AutoPad type")}else return Math.floor((t+s[u]+s[d]-p)/r+1)}},Dr=class{static getShapeOfGemmResult(t,r,o,n,s){if(t.length!==2||o.length!==2)throw new Error("shape need to be of size 2");let u,d,a;r?(u=t[1],d=t[0]):(u=t[0],d=t[1]);let p=-1;if(n?(a=o[0],p=1):(a=o[1],p=0),o[p]!==d)throw new Error("dimension mismatch");if(u<=0||a<=0||d<=0)throw new Error("invalid shape specified");if(s&&!st.isValidBroadcast(s,[u,a]))throw new Error("gemm: invalid bias shape for broadcast");return[u,a,d]}},zr=-34028234663852886e22,Vr=34028234663852886e22});var al,Uo,Te,ne,Ye,Ge,Je,et,je,Tn,W,K,No,An,Ho,_n,ke,be=q(()=>{"use strict";ze();ye();al=64,Uo=(e,t)=>{if(t===3)throw new Error("vec3 has same alignment as vec4, use vec4 instead");switch(e){case 10:return t>1?`vec${t}<f16>`:"f16";case 1:return t>1?`vec${t}<f32>`:"f32";case 6:return t>1?`vec${t}<i32>`:"i32";case 12:return t>1?`vec${t}<u32>`:"u32";case 7:if(t>1)throw new Error("currently not supported vecX of uint64 yet");return["vec2<u32>","i32"];case 13:if(t>1)throw new Error("currently not supported vecX of uint64 yet");return["vec2<u32>","u32"];case 9:if(t!==4)throw new Error("bool must be vec4");return["u32","vec4<bool>"];default:throw new Error(`Unknown data type: ${e}`)}},Te=(e,t=1)=>{let r=Uo(e,t);return typeof r=="string"?r:r[0]},ne=e=>e.length===0?[]:[{type:"uint32",data:e},{type:"uint32",data:D.computeStrides(e)}],Ye=e=>e%4===0?4:e%2===0?2:1,Ge=(e="f32",t,r="0")=>!t||t===1?`${e}(${r})`:`vec${t}<${e}>(${r})`,Je=(e,t,r)=>e==="f32"?r:t===1?`f32(${r})`:`vec${t}f(${r})`,et=(e,t)=>t===4?`(${e}.x + ${e}.y + ${e}.z + ${e}.w)`:t===2?`(${e}.x + ${e}.y)`:t===3?`(${e}.x + ${e}.y + ${e}.z)`:e,je=(e,t,r)=>e.startsWith("uniforms.")&&r>4?typeof t=="string"?`${e}[(${t}) / 4][(${t}) % 4]`:`${e}[${Math.floor(t/4)}][${t%4}]`:r>1?`${e}[${t}]`:e,Tn=(e,t,r,o,n)=>{let s=typeof r=="number",u=s?r:r.length,d=[...new Array(u).keys()],a=u<2?"u32":u<=4?`vec${u}<u32>`:`array<u32, ${u}>`,p=Uo(t,n),h=typeof p=="string"?p:p[1],$=typeof p=="string"?p:p[0],g={indices:a,value:h,storage:$,tensor:t},w=L=>typeof L=="string"?L:`${L}u`,b={offsetToIndices:!1,indicesToOffset:!1,broadcastedIndicesToOffset:!1,set:!1,setByIndices:!1,get:!1,getByIndices:!1},v=s?"uniforms.":"",I=`${v}${e}_shape`,x=`${v}${e}_strides`,A="";for(let L=0;L<u-1;L++)A+=`\n    let dim${L} = current / ${je(x,L,u)};\n    let rest${L} = current % ${je(x,L,u)};\n    indices[${L}] = dim${L};\n    current = rest${L};\n    `;A+=`indices[${u-1}] = current;`;let B=u<2?"":`\n  fn o2i_${e}(offset: u32) -> ${g.indices} {\n    var indices: ${g.indices};\n    var current = offset;\n    ${A}\n    return indices;\n  }`,E=L=>(b.offsetToIndices=!0,u<2?L:`o2i_${e}(${L})`),V=[];if(u>=2)for(let L=u-1;L>=0;L--)V.push(`${je(x,L,u)} * (indices[${L}])`);let P=u<2?"":`\n  fn i2o_${e}(indices: ${g.indices}) -> u32 {\n    return ${V.join("+")};\n  }`,z=L=>(b.indicesToOffset=!0,u<2?L:`i2o_${e}(${L})`),U=(...L)=>u===0?"0u":`${g.indices}(${L.map(w).join(",")})`,F=(L,de)=>u<2?`${L}`:`${je(L,de,u)}`,te=(L,de,fe)=>u<2?`${L}=${fe};`:`${je(L,de,u)}=${fe};`,R={},j=(L,de)=>{b.broadcastedIndicesToOffset=!0;let fe=`${de.name}broadcastedIndicesTo${e}Offset`;if(fe in R)return`${fe}(${L})`;let Ue=[];for(let Ke=u-1;Ke>=0;Ke--){let Re=de.indicesGet("outputIndices",Ke+de.rank-u);Ue.push(`${F(x,Ke)} * (${Re} % ${F(I,Ke)})`)}return R[fe]=`fn ${fe}(outputIndices: ${de.type.indices}) -> u32 {\n             return ${Ue.length>0?Ue.join("+"):"0u"};\n           }`,`${fe}(${L})`},pe=(L,de)=>(()=>{if(g.storage===g.value)return`${e}[${L}]=${de};`;if(g.storage==="vec2<u32>"&&g.value==="i32")return`${e}[${L}]=vec2<u32>(u32(${de}), select(0u, 0xFFFFFFFFu, ${de} < 0));`;if(g.storage==="vec2<u32>"&&g.value==="u32")return`${e}[${L}]=vec2<u32>(u32(${de}), 0u);`;if(g.storage==="u32"&&g.value==="vec4<bool>")return`${e}[${L}]=dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(${de}));`;throw new Error(`not supported combination of storage type ${g.storage} and value type ${g.value} yet`)})(),Q=L=>(()=>{if(g.storage===g.value)return`${e}[${L}]`;if(g.storage==="vec2<u32>"&&g.value==="i32")return`i32(${e}[${L}].x)`;if(g.storage==="vec2<u32>"&&g.value==="u32")return`u32(${e}[${L}].x)`;if(g.storage==="u32"&&g.value==="vec4<bool>")return`vec4<bool>(bool(${e}[${L}] & 0xFFu), bool(${e}[${L}] & 0xFF00u), bool(${e}[${L}] & 0xFF0000u), bool(${e}[${L}] & 0xFF000000u))`;throw new Error(`not supported combination of storage type ${g.storage} and value type ${g.value} yet`)})(),$e=u<2?"":`\n  fn get_${e}ByIndices(indices: ${g.indices}) -> ${h} {\n    return ${Q(`i2o_${e}(indices)`)};\n  }`,Y=u<2?"":(()=>{let L=d.map(fe=>`d${fe}: u32`).join(", "),de=d.map(fe=>`d${fe}`).join(", ");return`\n  fn get_${e}(${L}) -> ${h} {\n    return get_${e}ByIndices(${U(de)});\n  }`})(),Se=(...L)=>{if(L.length!==u)throw new Error(`indices length must be ${u}`);let de=L.map(w).join(",");return u===0?Q("0u"):u===1?Q(de[0]):(b.get=!0,b.getByIndices=!0,b.indicesToOffset=!0,`get_${e}(${de})`)},Ie=L=>u<2?Q(L):(b.getByIndices=!0,b.indicesToOffset=!0,`get_${e}ByIndices(${L})`),Ae=u<2?"":`\n  fn set_${e}ByIndices(indices: ${g.indices}, value: ${h}) {\n    ${pe(`i2o_${e}(indices)`,"value")}\n  }`,he=u<2?"":(()=>{let L=d.map(fe=>`d${fe}: u32`).join(", "),de=d.map(fe=>`d${fe}`).join(", ");return`\n  fn set_${e}(${L}, value: ${h}) {\n    set_${e}ByIndices(${U(de)}, value);\n  }`})();return{impl:()=>{let L=[];return s||(L.push(`const ${I} = ${g.indices}(${r.join(",")});`),L.push(`const ${x} = ${g.indices}(${D.computeStrides(r).join(",")});`)),b.offsetToIndices&&L.push(B),b.indicesToOffset&&L.push(P),b.broadcastedIndicesToOffset&&Object.values(R).forEach(de=>L.push(de)),b.set&&L.push(he),b.setByIndices&&L.push(Ae),b.get&&L.push(Y),b.getByIndices&&L.push($e),L.join(`\n`)},type:g,offsetToIndices:E,indicesToOffset:z,broadcastedIndicesToOffset:j,indices:U,indicesGet:F,indicesSet:te,set:(...L)=>{if(L.length!==u+1)throw new Error(`indices length must be ${u}`);let de=L[u];if(typeof de!="string")throw new Error("value must be string");let fe=L.slice(0,u).map(w).join(",");return u===0?pe("0u",de):u===1?pe(fe[0],de):(b.set=!0,b.setByIndices=!0,b.indicesToOffset=!0,`set_${e}(${fe}, ${de})`)},setByOffset:pe,setByIndices:(L,de)=>u<2?pe(L,de):(b.setByIndices=!0,b.indicesToOffset=!0,`set_${e}ByIndices(${L}, ${de});`),get:Se,getByOffset:Q,getByIndices:Ie,usage:o,name:e,strides:x,shape:I,rank:u}},W=(e,t,r,o=1)=>Tn(e,t,r,"input",o),K=(e,t,r,o=1)=>Tn(e,t,r,"output",o),No=(e,t,r,o=1)=>Tn(e,t,r,"internal",o),An=class{constructor(t){this.normalizedDispatchGroup=t;this.internalVariables=[];this.variables=[];this.uniforms=[];this.variableIndex=0}guardAgainstOutOfBoundsWorkgroupSizes(t){return`if (global_idx >= ${typeof t=="number"?`${t}u`:t}) { return; }`}mainStart(t=al){let r=typeof t=="number"?t:t[0],o=typeof t=="number"?1:t[1],n=typeof t=="number"?1:t[2],s=this.normalizedDispatchGroup[1]===1&&this.normalizedDispatchGroup[2]===1,u=s?`@builtin(global_invocation_id) global_id : vec3<u32>,\n    @builtin(local_invocation_id) local_id : vec3<u32>`:`@builtin(local_invocation_index) local_index : u32,\n    @builtin(workgroup_id) workgroup_id : vec3<u32>,\n    @builtin(num_workgroups) num_workgroups : vec3<u32>`,d=s?"let global_idx = global_id.x;":`let global_idx = (workgroup_id.z * num_workgroups[0] * num_workgroups[1] +\n          workgroup_id.y * num_workgroups[0] + workgroup_id.x) * ${r*o*n}u + local_index;`;return`@compute @workgroup_size(${r}, ${o}, ${n})\n  fn main(${u}) {\n    ${d}\n  `}appendVariableUniforms(t){t.rank!==0&&(t.shape.startsWith("uniforms.")&&this.uniforms.push({name:t.shape.replace("uniforms.",""),type:"u32",length:t.rank}),t.strides.startsWith("uniforms.")&&this.uniforms.push({name:t.strides.replace("uniforms.",""),type:"u32",length:t.rank}))}declareVariable(t,r){if(t.usage==="internal")throw new Error("cannot use internal variable with declareVariable(). use registerInternalVariables() instead.");this.variables.push(t),this.appendVariableUniforms(t);let o=t.usage==="input"?"read":"read_write",n=t.type.storage;return`@group(0) @binding(${r}) var<storage, ${o}> ${t.name}: array<${n}>;`}declareVariables(...t){return t.map(r=>this.declareVariable(r,this.variableIndex++)).join(`\n`)}registerInternalVariable(t){if(t.usage!=="internal")throw new Error("cannot use input or output variable with registerInternalVariable(). use declareVariables() instead.");this.internalVariables.push(t),this.appendVariableUniforms(t)}registerInternalVariables(...t){return t.forEach(r=>this.registerInternalVariable(r)),this}registerUniform(t,r,o=1){return this.uniforms.push({name:t,type:r,length:o}),this}registerUniforms(t){return this.uniforms=this.uniforms.concat(t),this}uniformDeclaration(){if(this.uniforms.length===0)return"";let t=[];for(let{name:r,type:o,length:n}of this.uniforms)if(n&&n>4)t.push(`${r}:array<vec4<${o}>, ${Math.ceil(n/4)}>`);else{let s=n==null||n===1?o:`vec${n}<${o}>`;t.push(`${r}:${s}`)}return`\n      struct Uniforms { ${t.join(", ")} };\n      @group(0) @binding(${this.variableIndex}) var<uniform> uniforms: Uniforms;`}get additionalImplementations(){return this.uniformDeclaration()+this.variables.map(t=>t.impl()).join(`\n`)+this.internalVariables.map(t=>t.impl()).join(`\n`)}},Ho=e=>new An(e),_n=(e,t)=>{let r=e.length,o=[];for(let n=0;n<r;n++){let s=r-1-n,u=e[s]||1;(t[t.length-1-n]||1)>1&&u===1&&o.unshift(s)}return o},ke=e=>!0});var il,Go,sl,ul,tt,Lo,Fo,Wt=q(()=>{"use strict";ye();Oe();be();il=e=>{if(!e||e.length!==1)throw new Error("Transpose requires 1 input.")},Go=(e,t)=>t&&t.length!==e?[...new Array(e).keys()].reverse():t,sl=(e,t)=>D.sortBasedOnPerm(e,Go(e.length,t)),ul=(e,t,r,o)=>{let n=[];n.push(`fn perm(i: ${o.type.indices}) -> ${r.type.indices} {\n    var a: ${r.type.indices};`);for(let s=0;s<t;++s)n.push(r.indicesSet("a",e[s],`i[${s}]`));return n.push("return a;}"),n.join(`\n`)},tt=(e,t)=>{let r=e.dataType,o=e.dims.length,n=Go(o,t),s=ke(o),u=sl(e.dims,n),d=s?u.length:u,a=s?o:e.dims,p=K("output",r,d),h=W("a",r,a),$=g=>`\n  ${g.registerUniform("output_size","u32").declareVariables(h,p)}\n\n  ${ul(n,o,h,p)}\n\n  ${g.mainStart()}\n    ${g.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n\n    let indices = ${p.offsetToIndices("global_idx")};\n    let aIndices = perm(indices);\n\n    ${p.setByOffset("global_idx",h.getByIndices("aIndices"))}\n  }`;return{name:"Transpose",shaderCache:{hint:`${t}`,inputDependencies:s?["rank"]:["dims"]},getRunData:g=>{let w=D.size(u);return{outputs:[{dims:u,dataType:g[0].dataType}],dispatchGroup:{x:Math.ceil(w/64)},programUniforms:s?[{type:"uint32",data:w},...ne(g[0].dims),...ne(u)]:[{type:"uint32",data:w}]}},getShaderSource:$}},Lo=(e,t)=>{il(e.inputs),e.compute(tt(e.inputs[0],t.perm))},Fo=e=>X({perm:e.perm})});var ll,dl,cl,pl,ml,fl,hl,gl,yl,bl,ut,jo,qo,Ko,Yo,Zo,Xo,Qo,Jo,ea,ta,ra=q(()=>{"use strict";ye();be();Wr();Wt();ll={max:"select(bestValue, candidate, candidate > bestValue)",min:"select(bestValue, candidate, candidate < bestValue)",mean:"bestValue + candidate",sum:"bestValue + candidate",prod:"bestValue * candidate",sumSquare:"bestValue + candidate * candidate",logSumExp:"bestValue + exp(candidate)",l1:"bestValue + abs(candidate)",l2:"bestValue + candidate * candidate",logSum:"bestValue + candidate"},dl={max:"select(bestValue, candidate, candidate > bestValue)",min:"select(bestValue, candidate, candidate < bestValue)",mean:"bestValue + candidate",sum:"bestValue + candidate",prod:"bestValue * candidate",sumSquare:"bestValue + candidate",logSumExp:"bestValue + candidate",l1:"bestValue + candidate",l2:"bestValue + candidate",logSum:"bestValue + candidate"},cl={max:"_A[offset]",min:"_A[offset]",mean:"0",sum:"0",prod:"1",sumSquare:"0",logSumExp:"0",l1:"0",l2:"0",logSum:"0"},pl={max:"bestValue",min:"bestValue",sum:"bestValue",prod:"bestValue",sumSquare:"bestValue",logSumExp:"log(bestValue)",l1:"bestValue",l2:"sqrt(bestValue)",logSum:"log(bestValue)"},ml=(e,t)=>{let r=[];for(let o=t-e;o<t;++o)r.push(o);return r},fl=(e,t)=>{let r=[],o=e.length;for(let s=0;s<o;s++)t.indexOf(s)===-1&&r.push(e[s]);let n=t.map(s=>e[s]);return[r,n]},hl=(e,t)=>{let r=e.length+t.length,o=[],n=0;for(let s=0;s<r;s++)t.indexOf(s)===-1?o.push(e[n++]):o.push(1);return o},gl=(e,t)=>{for(let r=0;r<e.length;++r)if(e[e.length-r-1]!==t-1-r)return!1;return!0},yl=(e,t)=>{let r=[];if(!gl(e,t)){for(let o=0;o<t;++o)e.indexOf(o)===-1&&r.push(o);e.forEach(o=>r.push(o))}return r},bl=(e,t,r,o,n,s,u)=>{let d=r[0].dims,a=D.size(s),p=D.size(u),h=W("_A",r[0].dataType,d),$=K("output",n,s),g=32,w=`\n          var<workgroup> aBestValues : array<${$.type.storage}, ${g}>;\n       `;return{name:e,shaderCache:t,getShaderSource:v=>`\n        ${v.registerUniform("reduceSize","u32").declareVariables(h,$)}\n        ${w}\n        fn DIV_CEIL(a : u32, b : u32) -> u32 {\n          return ((a - 1u) / b + 1u);\n         }\n         ${v.mainStart(g)}\n          let local_idx = local_id.x;\n\n          let outputIndex = global_idx / ${g};\n          let offset = outputIndex * uniforms.reduceSize;\n\n          var bestValue = ${$.type.storage}(${cl[o]});\n          let Length = uniforms.reduceSize;\n          for (var k = local_idx; k < Length; k = k + ${g}) {\n           let candidate = ${$.type.storage}(${h.getByOffset("offset + k")});\n           bestValue = ${ll[o]};\n          }\n          aBestValues[local_idx] = bestValue;\n          workgroupBarrier();\n\n         var reduceSize = min(Length, ${g}u);\n         for (var currentSize = reduceSize / 2u; reduceSize > 1u;\n             currentSize = reduceSize / 2u) {\n           let interval = DIV_CEIL(reduceSize, 2u);\n           if (local_idx < currentSize) {\n            let candidate = aBestValues[local_idx + interval];\n            bestValue = ${dl[o]};\n            aBestValues[local_idx] = bestValue;\n           }\n           reduceSize = interval;\n           workgroupBarrier();\n         }\n\n         if (local_idx == 0u) {\n          ${$.setByOffset("outputIndex",`${o==="mean"?`bestValue / ${$.type.storage}(uniforms.reduceSize)`:`${pl[o]}`}`)};\n         }\n        }`,getRunData:()=>({outputs:[{dims:s,dataType:n}],dispatchGroup:{x:a},programUniforms:[{type:"uint32",data:p}]})}},ut=(e,t,r,o)=>{let n=e.inputs.length===1?r:En(e.inputs,r),s=n.axes;s.length===0&&!n.noopWithEmptyAxes&&(s=e.inputs[0].dims.map((w,b)=>b));let u=D.normalizeAxes(s,e.inputs[0].dims.length),d=u,a=e.inputs[0],p=yl(d,e.inputs[0].dims.length);p.length>0&&(a=e.compute(tt(e.inputs[0],p),{inputs:[0],outputs:[-1]})[0],d=ml(d.length,a.dims.length));let[h,$]=fl(a.dims,d),g=h;n.keepDims&&(g=hl(h,u)),e.compute(bl(t,{hint:n.cacheKey,inputDependencies:["type"]},[a],o,e.inputs[0].dataType,g,$),{inputs:[a]})},jo=(e,t)=>{ut(e,"ReduceMeanShared",t,"mean")},qo=(e,t)=>{ut(e,"ReduceL1Shared",t,"l1")},Ko=(e,t)=>{ut(e,"ReduceL2Shared",t,"l2")},Yo=(e,t)=>{ut(e,"ReduceLogSumExpShared",t,"logSumExp")},Zo=(e,t)=>{ut(e,"ReduceMaxShared",t,"max")},Xo=(e,t)=>{ut(e,"ReduceMinShared",t,"min")},Qo=(e,t)=>{ut(e,"ReduceProdShared",t,"prod")},Jo=(e,t)=>{ut(e,"ReduceSumShared",t,"sum")},ea=(e,t)=>{ut(e,"ReduceSumSquareShared",t,"sumSquare")},ta=(e,t)=>{ut(e,"ReduceLogSumShared",t,"logSum")}});var lt,wl,Ur,En,dt,vl,$l,Sl,xl,Cl,Il,Al,Tl,_l,El,ct,na,oa,aa,ia,sa,ua,la,da,ca,pa,rt,Wr=q(()=>{"use strict";ye();Oe();be();ra();lt=e=>{if(!e||e.length===0||e.length>2)throw new Error("Reduce op requires 1 or 2 inputs.");if(e.length===2&&e[1].dims.length!==1)throw new Error("Invalid axes input dims.")},wl=e=>["","",`var value = ${e.getByOffset("inputOffset")};`,""],Ur=(e,t,r,o,n,s,u=!1,d=!1)=>{let a=[],p=r[0].dims,h=D.normalizeAxes(n,r[0].dims.length),$=!d&&h.length===0;p.forEach((z,U)=>{$||h.indexOf(U)>=0?u&&a.push(1):a.push(z)});let g=[],w=W("_A",r[0].dataType,p),b=K("output",s,a),v=o(w,b,h),I=`inputOffset = ${w.indicesToOffset("inputIndices")};`,x=`let ${I};`,A=`var ${I};`,B=v[1]===""?"":A,E=(v[1]===""?x:I)+`\n`+v[2];for(let z=0,U=0;z<r[0].dims.length;z++)$||h.indexOf(z)>=0?(u&&U++,E=`for(var j${z}: u32 = 0; j${z} < ${r[0].dims[z]}; j${z}++) {\n                ${v[2].includes("lastIndex")?`let lastIndex = j${z};`:""}\n                ${w.indicesSet("inputIndices",z,`j${z}`)}\n                ${E}\n              }`):(g.push(`${w.indicesSet("inputIndices",z,b.indicesGet("outputIndices",U))};`),U++);let V=D.size(a);return{name:e,shaderCache:t,getShaderSource:z=>`\n        ${z.declareVariables(w,b)}\n\n        ${z.mainStart()}\n          ${z.guardAgainstOutOfBoundsWorkgroupSizes(V)}\n          var inputIndices: ${w.type.indices};\n          let outputIndices = ${b.offsetToIndices("global_idx")};\n\n          ${g.join(`\n`)}\n          ${v[0]}       // init ops for reduce max/min\n          ${B}\n          ${v[1]}\n          ${E}\n          ${v[3]}\n          ${v.length===4?b.setByOffset("global_idx","value"):v.slice(4).join(`\n`)}\n        }`,getRunData:()=>({outputs:[{dims:a,dataType:s}],dispatchGroup:{x:Math.ceil(V/64)}})}},En=(e,t)=>{let r=[];return e[1].dims[0]>0&&e[1].getBigInt64Array().forEach(o=>r.push(Number(o))),X({axes:r,keepDims:t.keepDims,noopWithEmptyAxes:t.noopWithEmptyAxes})},dt=(e,t,r,o)=>{let n=e.inputs,s=n.length===1?r:En(n,r);e.compute(Ur(t,{hint:s.cacheKey},[n[0]],s.noopWithEmptyAxes&&s.axes.length===0?wl:o,s.axes,n[0].dataType,s.keepDims,s.noopWithEmptyAxes),{inputs:[0]})},vl=(e,t)=>{lt(e.inputs),dt(e,"ReduceLogSum",t,(o,n)=>[`var value = ${n.type.storage}(0);`,"",`value += ${o.getByOffset("inputOffset")};`,"value = log(value);"])},$l=(e,t)=>{lt(e.inputs),dt(e,"ReduceL1",t,(o,n)=>[`var value = ${n.type.storage}(0);`,"",`value += abs(${o.getByOffset("inputOffset")});`,""])},Sl=(e,t)=>{lt(e.inputs),dt(e,"ReduceL2",t,(o,n)=>[`var t = ${n.type.value}(0); var value = ${n.type.value}(0);`,"",`t = ${o.getByOffset("inputOffset")}; value += (t * t);`,"value = sqrt(value);"])},xl=(e,t)=>{lt(e.inputs),dt(e,"ReduceLogSumExp",t,(o,n)=>[`var value = ${n.type.storage}(0);`,"",`value += exp(${o.getByOffset("inputOffset")});`,"value = log(value);"])},Cl=(e,t)=>{lt(e.inputs),dt(e,"ReduceMax",t,(o,n,s)=>{let u=[];for(let d=0;d<o.rank;d++)(s.indexOf(d)>=0||s.length===0)&&u.push(o.indicesSet("inputIndices",d,0));return[`${u.join(`\n`)}`,`var value = ${o.getByOffset("inputOffset")};`,`value = max(value, ${o.getByOffset("inputOffset")});`,""]})},Il=(e,t)=>{lt(e.inputs),dt(e,"ReduceMean",t,(o,n,s)=>{let u=1;for(let d=0;d<o.rank;d++)(s.indexOf(d)>=0||s.length===0)&&(u*=e.inputs[0].dims[d]);return["var sum = f32(0);","",`sum += f32(${o.getByOffset("inputOffset")});`,`let value = ${n.type.value}(sum / ${u});`]})},Al=(e,t)=>{lt(e.inputs),dt(e,"ReduceMin",t,(o,n,s)=>{let u=[];for(let d=0;d<o.rank;d++)(s.indexOf(d)>=0||s.length===0)&&u.push(`inputIndices[${d}] = 0;`);return[`${u.join(`\n`)}`,`var value = ${o.getByOffset("inputOffset")};`,`value = min(value, ${o.getByOffset("inputOffset")});`,""]})},Tl=(e,t)=>{lt(e.inputs),dt(e,"ReduceProd",t,(o,n)=>[`var value = ${n.type.storage}(1);`,"",`value *= ${o.getByOffset("inputOffset")};`,""])},_l=(e,t)=>{lt(e.inputs),dt(e,"ReduceSum",t,(o,n)=>[`var value = ${n.type.storage}(0);`,"",`value += ${o.getByOffset("inputOffset")};`,""])},El=(e,t)=>{lt(e.inputs),dt(e,"ReduceSumSquare",t,(o,n)=>[`var t = ${n.type.value}(0); var value = ${n.type.value}(0);`,"",`t = ${o.getByOffset("inputOffset")}; value += t * t;`,""])},ct=(e,t,r)=>{if(t.length===0)return!!r;let o=1,n=1;for(let s=0;s<t.length;s++)t.indexOf(s)===-1?o*=e[s]:n*=e[s];return n<32&&o>1024},na=(e,t)=>{ct(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Il(e,t):jo(e,t)},oa=(e,t)=>{ct(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?$l(e,t):qo(e,t)},aa=(e,t)=>{ct(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Sl(e,t):Ko(e,t)},ia=(e,t)=>{ct(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?xl(e,t):Yo(e,t)},sa=(e,t)=>{ct(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Cl(e,t):Zo(e,t)},ua=(e,t)=>{ct(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Al(e,t):Xo(e,t)},la=(e,t)=>{ct(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Tl(e,t):Qo(e,t)},da=(e,t)=>{ct(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?_l(e,t):Jo(e,t)},ca=(e,t)=>{ct(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?El(e,t):ea(e,t)},pa=(e,t)=>{ct(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?vl(e,t):ta(e,t)},rt=e=>X(e)});var ma,fa,ha,On,ga=q(()=>{"use strict";ze();Oe();Wr();ma=e=>{if(!e||e.length===0||e.length>2)throw new Error("ArgMinMaxOp op requires 1 or 2 inputs.");if(e[0].dataType!==1)throw new Error("Invalid input type.")},fa=(e,t)=>{ma(e.inputs);let r=(o,n,s)=>{let u=[];for(let d=0;d<o.rank;d++)(s.indexOf(d)>=0||s.length===0)&&u.push(`inputIndices[${d}] = 0;`);return[`${u.join(`\n`)}`,`var value = ${o.getByOffset("inputOffset")};\nvar bestIndex : i32 = 0;`,`if (${o.getByOffset("inputOffset")} ${t.selectLastIndex>0?"<=":"<"} value) {\n         value = ${o.getByOffset("inputOffset")};\n         bestIndex = i32(lastIndex);\n       }`,"",n.setByOffset("global_idx","bestIndex")]};e.compute(Ur("ArgMin",{hint:t.cacheKey},[e.inputs[0]],r,[t.axis],7,t.keepDims),{inputs:[0]})},ha=(e,t)=>{ma(e.inputs);let r=(o,n,s)=>{let u=[];for(let d=0;d<o.rank;d++)(s.indexOf(d)>=0||s.length===0)&&u.push(`inputIndices[${d}] = 0;`);return[`${u.join(`\n`)}`,`var value = ${o.getByOffset("inputOffset")};\nvar bestIndex : i32 = 0;`,`if (${o.getByOffset("inputOffset")} ${t.selectLastIndex>0?">=":">"} value) {\n         value = ${o.getByOffset("inputOffset")};\n         bestIndex = i32(lastIndex);\n       }`,"",n.setByOffset("global_idx","bestIndex")]};e.compute(Ur("argMax",{hint:t.cacheKey},[e.inputs[0]],r,[t.axis],7,t.keepDims),{inputs:[0]})},On=e=>X(e)});var Ol,ya,kl,Pl,Rl,Nr,Bl,ba,kn=q(()=>{"use strict";Oe();Br();be();Ol=(e,t)=>{let r=e[0],o=e[1],n=e[2],s=e[3],u=e[4],d=e[5];if(u&&d)throw new Error("Attention cannot have both past and relative_position_bias");if(r.dims.length!==3)throw new Error(\'Input "input" must have 3 dimensions\');let a=r.dims[0],p=r.dims[1],h=r.dims[2];if(n.dims.length!==1)throw new Error(\'Input "bias" is expected to have 1 dimensions\');if(o.dims.length!==2)throw new Error(\'Input "weights" is expected to have 2 dimensions\');if(o.dims[0]!==h)throw new Error("Input 1 dimension 0 should have same length as dimension 2 of input 0");if(n.dims[0]!==o.dims[1])throw new Error(\'Input "bias" dimension 0 should have same length as dimension 1 of input "weights"\');let $=n.dims[0]/3,g=$,w=g;if(t.qkvHiddenSizes.length>0){if(t.qkvHiddenSizes.length!==3)throw new Error("qkv_hidden_sizes attribute should have 3 elements");for(let B of t.qkvHiddenSizes)if(B%t.numHeads!==0)throw new Error("qkv_hidden_sizes should be divisible by num_heads");$=t.qkvHiddenSizes[0],g=t.qkvHiddenSizes[1],w=t.qkvHiddenSizes[2]}let b=p;if($!==g)throw new Error("qkv_hidden_sizes first element should be same as the second");if(n.dims[0]!==$+g+w)throw new Error(\'Input "bias" dimension 0 should have same length as sum of Q/K/V hidden sizes\');let v=0;if(u){if(g!==w)throw new Error(\'Input "past" expect k_hidden_size == v_hidden_size\');if(u.dims.length!==5)throw new Error(\'Input "past" must have 5 dimensions\');if(u.dims[0]!==2)throw new Error(\'Input "past" first dimension must be 2\');if(u.dims[1]!==a)throw new Error(\'Input "past" second dimension must be batch_size\');if(u.dims[2]!==t.numHeads)throw new Error(\'Input "past" third dimension must be num_heads\');if(u.dims[4]!==g/t.numHeads)throw new Error(\'Input "past" fifth dimension must be k_hidden_size / num_heads\');t.pastPresentShareBuffer||(v=u.dims[3])}let I=b+v,x=-1,A=0;if(s)throw new Error("Mask not supported");if(u)throw new Error("past is not supported");if(d)throw new Error("relativePositionBias is not supported");return{batchSize:a,sequenceLength:p,pastSequenceLength:v,kvSequenceLength:b,totalSequenceLength:I,maxSequenceLength:x,inputHiddenSize:h,hiddenSize:$,vHiddenSize:w,headSize:Math.floor($/t.numHeads),vHeadSize:Math.floor(w/t.numHeads),numHeads:t.numHeads,isUnidirectional:!1,pastPresentShareBuffer:!1,maskFilterValue:t.maskFilterValue,maskType:A,scale:t.scale,broadcastResPosBias:!1,passPastInKv:!1,qkvFormat:1}},ya=e=>X({...e}),kl=(e,t,r,o)=>{let n=Ye(o),s=K("x",t.dataType,t.dims,n),u="threadMaxVector";n===2?u="max(threadMaxVector.x, threadMaxVector.y)":n===4&&(u="max(max(threadMaxVector.x, threadMaxVector.y), max(threadMaxVector.z, threadMaxVector.w))");let d=Te(t.dataType),a=64,p=o/n;p<a?a=1:p/8<64&&(a=Math.ceil(p/8));let h=Math.ceil(o/n/a),$=g=>`\n  const dInv: ${d} = 1 / ${o};\n  const dComp = ${o/n};\n  var<workgroup> wgMax: array<f32, ${a}>;\n  var<workgroup> wgSum: array<f32, ${a}>;\n\n  ${g.declareVariables(s)}\n  @compute @workgroup_size(${a}, 1, 1)\n  fn main(@builtin(workgroup_id) workgroup_id : vec3<u32>,\n    @builtin(local_invocation_index) local_index : u32) {\n    let localOffset = local_index * ${h};\n    let offset: u32 = workgroup_id.x * dComp + localOffset;\n\n    var threadMaxVector = ${Ge("f32",n,"-3.402823e+38f")};\n    for (var i: u32 = 0; i < ${h} && i + localOffset < dComp; i++) {\n      threadMaxVector = max(${Je(d,n,"x[offset + i]")}, threadMaxVector);\n    }\n    wgMax[local_index] = ${u};\n    workgroupBarrier();\n\n    var maxValue = -3.402823e+38f;\n    for (var i = 0u; i < ${a}; i++) {\n      maxValue = max(wgMax[i], maxValue);\n    }\n\n    var sumVector = ${Ge("f32",n,"0")};\n    for (var i: u32 = 0; i < ${h} && i + localOffset < dComp; i++) {\n      sumVector += exp(${Je(d,n,"x[offset + i]")} - maxValue);\n    }\n    wgSum[local_index] = ${et("sumVector",n)};\n    workgroupBarrier();\n\n    var sum: f32 = 0;\n    for (var i = 0u; i < ${a}; i++) {\n      sum += wgSum[i];\n    }\n\n    if (sum == 0) {\n      for (var i: u32 = 0; i < ${h} && i + localOffset < dComp; i++) {\n        x[offset + i] = ${Ge(d,n,"dInv")};\n      }\n    } else {\n      for (var i: u32 = 0; i < ${h} && i + localOffset < dComp; i++) {\n        let f32input = ${Je(d,n,"x[offset + i]")};\n        x[offset + i] = ${s.type.value}(exp(f32input - maxValue) / sum);\n      }\n    }\n  }`;e.compute({name:"AttentionProbsSoftmax",shaderCache:{hint:`${o}`},getShaderSource:$,getRunData:()=>({outputs:[],dispatchGroup:{x:r}})},{inputs:[t],outputs:[]})},Pl=(e,t,r,o,n,s)=>{let u=[n.batchSize,n.numHeads,n.sequenceLength,n.kvSequenceLength+n.pastSequenceLength],d=s.scale===0?1/Math.sqrt(n.headSize):s.scale,a=Te(t.dataType),p=Ye(n.headSize),h=W("q",t.dataType,t.dims,p),$=W("key",r.dataType,r.dims,p),g=K("output",t.dataType,u),w=n.headSize/p,b=n.sequenceLength,v=n.totalSequenceLength,I=w,x=12,A={x:Math.ceil(n.totalSequenceLength/x),y:Math.ceil(n.sequenceLength/x),z:n.batchSize*n.numHeads},B=[t,r],E=P=>`\n  const M: u32 = ${b}u;\n  const N: u32 = ${v}u;\n  const K: u32 = ${I}u;\n  const alpha: ${a} = ${d};\n  const beta: ${a} = 1.0;\n  const TILE_SIZE = ${x}u;\n\n  var<workgroup> tileQ: array<${h.type.storage}, ${x*x}>;\n  var<workgroup> tileK: array<${h.type.storage}, ${x*x}>;\n\n  ${P.declareVariables(h,$,g)}\n\n  @compute @workgroup_size(${x}, ${x}, 1)\n  fn main(@builtin(workgroup_id) workgroup_id : vec3<u32>,\n   @builtin(local_invocation_id) local_id : vec3<u32>, @builtin(local_invocation_index) local_index : u32) {\n   let global_idx = (workgroup_id.z * ${A.x*A.y}u +\n          workgroup_id.y * ${A.x}u + workgroup_id.x) * ${x*x}u + local_index;\n\n    // x holds the N and y holds the M\n    let headIdx = workgroup_id.z;\n    let m = workgroup_id.y * TILE_SIZE;\n    let n = workgroup_id.x * TILE_SIZE;\n    let lm = m + local_id.y;\n    let ln = n + local_id.x;\n\n    let qOffset = ${n.sequenceLength*w} * headIdx + m * K;\n    let kOffset = ${n.kvSequenceLength*w} * headIdx + n * K;\n\n    var value = ${Ge(a,p)};\n    for (var w: u32 = 0u; w < K; w += TILE_SIZE) {\n      if (m + local_id.y < M && w + local_id.x < K) {\n        tileQ[TILE_SIZE * local_id.y + local_id.x] = q[qOffset + local_id.y * K + w + local_id.x];\n      }\n      if (n + local_id.y < N && w + local_id.x < K) {\n        tileK[TILE_SIZE * local_id.y + local_id.x] = key[kOffset + local_id.y * K + w + local_id.x];\n      }\n      workgroupBarrier();\n\n      for (var k: u32 = 0u; k<TILE_SIZE && w+k < K; k++) {\n        value += tileQ[TILE_SIZE * local_id.y + k] * tileK[TILE_SIZE * local_id.x + k];\n      }\n\n      workgroupBarrier();\n    }\n\n    let headOffset = headIdx * M * N;\n    if (lm < M && ln < N) {\n      let outputIdx = headOffset + lm * N + ln;\n      output[outputIdx] = ${et("value",p)} * alpha;\n    }\n  }`,V=e.compute({name:"AttentionProbs",shaderCache:{hint:JSON.stringify(n)},getRunData:()=>({outputs:[{dims:u,dataType:t.dataType,gpuDataType:0}],dispatchGroup:A}),getShaderSource:E},{inputs:B,outputs:[-1]})[0];return kl(e,V,n.batchSize*n.numHeads*n.sequenceLength,n.totalSequenceLength),V},Rl=(e,t,r,o)=>{let n=[o.batchSize,o.sequenceLength,o.vHiddenSize],s=W("probs",t.dataType,t.dims),u=W("v",r.dataType,r.dims),d=K("output",t.dataType,n),a=Te(t.dataType),p=12,h={x:Math.ceil(o.vHeadSize/p),y:Math.ceil(o.sequenceLength/p),z:o.batchSize*o.numHeads},$=g=>`\n  const M: u32 = ${o.sequenceLength}u;\n  const N: u32 = ${o.vHeadSize}u;\n  const K: u32 = ${o.totalSequenceLength}u;\n  const numHeads: u32 = ${o.numHeads}u;\n  const TILE_SIZE = ${p}u;\n\n  var<workgroup> tileQ: array<${s.type.storage}, ${p*p}>;\n  var<workgroup> tileK: array<${s.type.storage}, ${p*p}>;\n\n  ${g.declareVariables(s,u,d)}\n\n  @compute @workgroup_size(${p}, ${p}, 1)\n  fn main(@builtin(workgroup_id) workgroup_id : vec3<u32>,\n   @builtin(local_invocation_id) local_id : vec3<u32>, @builtin(local_invocation_index) local_index : u32) {\n   let global_idx = (workgroup_id.z * ${h.x*h.y}u +\n          workgroup_id.y * ${h.x}u + workgroup_id.x) * ${p*p}u + local_index;\n\n   let headIdx = workgroup_id.z;\n   let m = workgroup_id.y * TILE_SIZE + local_id.y;\n   let n = workgroup_id.x * TILE_SIZE + local_id.x;\n\n   let offsetA = headIdx * (M * K) + m * K;\n   let offsetB = headIdx * (N * K) + n;\n\n   var value = ${a}(0);\n   for (var w: u32 = 0u; w < K; w += TILE_SIZE) {\n     if (m < M && w + local_id.x < K) {\n       tileQ[TILE_SIZE * local_id.y + local_id.x] = probs[offsetA + w + local_id.x];\n     }\n     if (n < N && w + local_id.y < K) {\n       tileK[TILE_SIZE * local_id.y + local_id.x] = v[offsetB + (w + local_id.y) * N];\n     }\n     workgroupBarrier();\n     for (var k: u32 = 0u; k<TILE_SIZE && w+k < K; k++) {\n       value += tileQ[TILE_SIZE * local_id.y + k] * tileK[TILE_SIZE * k + local_id.x];\n     }\n     workgroupBarrier();\n   }\n\n   // we need to transpose output from BNSH_v to BSND_v\n   let batchIdx = workgroup_id.z / ${o.numHeads};\n   let currentBatchHeadNumber = workgroup_id.z % ${o.numHeads};\n   let headOffset = (batchIdx * M * ${o.numHeads} + currentBatchHeadNumber) * ${o.vHeadSize};\n   if (m < M && n < N) {\n     let outputIdx = batchIdx * ${o.sequenceLength*o.vHiddenSize} + m * ${o.vHiddenSize}\n       + currentBatchHeadNumber * ${o.vHeadSize} + n;\n     output[outputIdx] = value;\n   }\n  }`;return e.compute({name:"AttentionScore",shaderCache:{hint:JSON.stringify(o)},getRunData:()=>({outputs:[{dims:n,dataType:t.dataType,gpuDataType:0}],dispatchGroup:h}),getShaderSource:$},{inputs:[t,r],outputs:[0]})[0]},Nr=(e,t,r,o,n,s,u,d,a,p,h)=>{let $=Pl(e,t,r,a,p,h);Rl(e,$,o,p)},Bl=(e,t)=>{let r=[t.batchSize,t.numHeads,t.sequenceLength,t.headSize],o=Te(e.inputs[0].dataType),n=t.sequenceLength,s=t.inputHiddenSize,u=t.headSize,d=12,a={x:Math.ceil(t.headSize/d),y:Math.ceil(t.sequenceLength/d),z:t.batchSize*t.numHeads},p=()=>`\n  const M: u32 = ${n}u;\n  const K: u32 = ${s}u;\n  const N: u32 = ${u}u;\n  const numHeads: u32 = ${t.numHeads};\n  const ldb = ${t.hiddenSize+t.hiddenSize+t.vHiddenSize}u;\n  const TILE_SIZE = ${d}u;\n\n  var<workgroup> tileInput: array<${o}, ${d*d}>;\n  var<workgroup> tileWeightQ: array<${o}, ${d*d}>;\n  var<workgroup> tileWeightK: array<${o}, ${d*d}>;\n  var<workgroup> tileWeightV: array<${o}, ${d*d}>;\n\n  @group(0) @binding(0) var<storage, read> input: array<${o}>;\n  @group(0) @binding(1) var<storage, read> weight: array<${o}>;\n  @group(0) @binding(2) var<storage, read> bias: array<${o}>;\n  @group(0) @binding(3) var<storage, read_write> outputQ: array<${o}>;\n  @group(0) @binding(4) var<storage, read_write> outputK: array<${o}>;\n  @group(0) @binding(5) var<storage, read_write> outputV: array<${o}>;\n\n  @compute @workgroup_size(${d}, ${d}, 1)\n  fn main(@builtin(workgroup_id) workgroup_id : vec3<u32>,\n   @builtin(local_invocation_id) local_id : vec3<u32>, @builtin(local_invocation_index) local_index : u32) {\n   let global_idx = (workgroup_id.z * ${a.x*a.y}u +\n          workgroup_id.y * ${a.x}u + workgroup_id.x) * ${d*d}u + local_index;\n\n    let batchIndex = workgroup_id.z / ${t.numHeads};\n    let headNumber = workgroup_id.z % ${t.numHeads};\n    let m = workgroup_id.y * TILE_SIZE + local_id.y;\n    let n = workgroup_id.x * TILE_SIZE + local_id.x;\n\n    let inputOffset = batchIndex * (M * K) + m * K;\n    let biasOffsetQ = headNumber * ${t.headSize};\n    let biasOffsetK = ${t.hiddenSize} + biasOffsetQ;\n    let biasOffsetV = ${t.hiddenSize} + biasOffsetK;\n\n    var valueQ = ${o}(0);\n    var valueK = ${o}(0);\n    var valueV = ${o}(0);\n    for (var w: u32 = 0u; w < K; w += TILE_SIZE) {\n      if (m < M && w + local_id.x < K) {\n        tileInput[TILE_SIZE * local_id.y + local_id.x] = input[inputOffset + w + local_id.x];\n      }\n      if (n < N && w + local_id.y < K) {\n        let offset = n + (w + local_id.y) * ldb;\n        tileWeightQ[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetQ + offset];\n        tileWeightK[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetK + offset];\n        tileWeightV[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetV + offset];\n      }\n      workgroupBarrier();\n      for (var k: u32 = 0u; k<TILE_SIZE && w+k < K; k++) {\n        let inputTileOffset = TILE_SIZE * local_id.y + k;\n        let weightTileOffset = TILE_SIZE * k + local_id.x;\n        valueQ += tileInput[inputTileOffset] * tileWeightQ[weightTileOffset];\n        valueK += tileInput[inputTileOffset] * tileWeightK[weightTileOffset];\n        valueV += tileInput[inputTileOffset] * tileWeightV[weightTileOffset];\n      }\n\n      workgroupBarrier();\n    }\n\n    let headOffset = (m * N + n) % ${t.headSize};\n    valueQ += bias[headOffset + biasOffsetQ];\n    valueK += bias[headOffset + biasOffsetK];\n    valueV += bias[headOffset + biasOffsetV];\n\n    let offset = workgroup_id.z * M * N;\n    if (m < M && n < N) {\n      let outputIdx = offset + m * N + n;\n      outputQ[outputIdx] = valueQ;\n      outputK[outputIdx] = valueK;\n      outputV[outputIdx] = valueV;\n    }\n  }`,h=[e.inputs[0],e.inputs[1],e.inputs[2]];return e.compute({name:"AttentionPrepare",shaderCache:{hint:JSON.stringify(t)},getRunData:()=>({outputs:[{dims:r,dataType:e.inputs[0].dataType,gpuDataType:0},{dims:r,dataType:e.inputs[0].dataType,gpuDataType:0},{dims:r,dataType:e.inputs[0].dataType,gpuDataType:0}],dispatchGroup:a}),getShaderSource:p},{inputs:h,outputs:[-1,-1,-1]})},ba=(e,t)=>{let r=Ol(e.inputs,t),[o,n,s]=Bl(e,r);return Nr(e,o,n,s,e.inputs[4],void 0,void 0,void 0,e.inputs[5],r,t)}});var Hr=q(()=>{});var wa=q(()=>{Hr()});var va,$a=q(()=>{va="1.17.0"});var Sa,Pn,xa=q(()=>{$a();Sa="warning",Pn={wasm:{},webgl:{},webgpu:{},versions:{common:va},set logLevel(e){if(e!==void 0){if(typeof e!="string"||["verbose","info","warning","error","fatal"].indexOf(e)===-1)throw new Error(`Unsupported logging level: ${e}`);Sa=e}},get logLevel(){return Sa}};Object.defineProperty(Pn,"logLevel",{enumerable:!0})});var Ut,Ca=q(()=>{xa();Ut=Pn});var Ia=q(()=>{});var Aa=q(()=>{Gr()});var _a=q(()=>{});var Ea=q(()=>{Gr()});var Gr=q(()=>{Ia();Aa();_a();Ea()});var Lr=q(()=>{Gr()});var Oa=q(()=>{Hr();Lr()});var ka=q(()=>{Oa()});var Pa=q(()=>{});var Ra=q(()=>{Hr();Lr()});var Ba=q(()=>{Ra()});var Fr=q(()=>{wa();Ca();ka();Lr();Pa();Ba()});var zl,Vl,Wl,Ma,Da=q(()=>{"use strict";Fr();ye();Oe();be();zl=(e,t)=>{if(!e||e.length!==5)throw new Error("BatchNormalization requires 5 inputs");let r=(o,n,s)=>{let u=n.length;if(u!==o.length)throw new Error(`${s}: num dimensions != ${u}`);n.forEach((d,a)=>{if(d!==o[a])throw new Error(`${s}: dim[${a}] do not match`)})};if(e[0].dims.length>1){let o=t.format==="NHWC"?t.spatial?e[0].dims.slice(-1):e[0].dims.slice(-1).concat(e[0].dims.slice(1,e[0].dims.length-1)):e[0].dims.slice(1,t.spatial?2:void 0);r(e[1].dims,o,"Invalid input scale"),r(e[2].dims,o,"Invalid input B"),r(e[3].dims,o,"Invalid input mean"),r(e[4].dims,o,"Invalid input var")}else r(e[1].dims,[1],"Invalid input scale"),r(e[2].dims,[1],"Invalid input B"),r(e[3].dims,[1],"Invalid input mean"),r(e[4].dims,[1],"Invalid input var")},Vl=(e,t)=>{let{epsilon:r,spatial:o,format:n}=t,s=e[0].dims,u=o?Ye(s[s.length-1]):1,d=n==="NHWC"&&s.length>1?u:1,a=D.size(s)/u,p=ke(s.length)&&o,h=p?s.length:s,$=W("x",e[0].dataType,e[0].dims,u),g=W("scale",e[1].dataType,e[1].dims,d),w=W("bias",e[2].dataType,e[2].dims,d),b=W("inputMean",e[3].dataType,e[3].dims,d),v=W("inputVar",e[4].dataType,e[4].dims,d),I=K("y",e[0].dataType,h,u),x=()=>{let B="";if(o)B=`let cOffset = ${s.length===1?"0u":n==="NHWC"?`outputIndices[${s.length-1}] / ${u}`:"outputIndices[1]"};`;else if(n==="NCHW")B=`\n            ${I.indicesSet("outputIndices","0","0")}\n            let cOffset = ${I.indicesToOffset("outputIndices")};`;else{B=`var cIndices = ${g.type.indices}(0);\n                       cIndices[0] = outputIndices[${s.length-1}];`;for(let E=1;E<g.rank;E++)B+=`cIndices[${E}] = outputIndices[${E}];`;B+=`let cOffset = ${g.indicesToOffset("cIndices")};`}return B},A=B=>`\n  const epsilon = ${r};\n  ${B.registerUniform("outputSize","u32").declareVariables($,g,w,b,v,I)}\n  ${B.mainStart()}\n  ${B.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n    var outputIndices = ${I.offsetToIndices(`global_idx * ${u}`)};\n    ${x()}\n    let scale = ${g.getByOffset("cOffset")};\n    let bias = ${w.getByOffset("cOffset")};\n    let inputMean = ${b.getByOffset("cOffset")};\n    let inputVar = ${v.getByOffset("cOffset")};\n    let x = ${$.getByOffset("global_idx")};\n    let value = (x - inputMean) / sqrt(inputVar + epsilon) * scale + bias;\n    ${I.setByOffset("global_idx","value")}\n  }`;return{name:"BatchNormalization",shaderCache:{hint:`${t.epsilon}_${t.format}_${o}_${u}`,inputDependencies:p?["rank","type","type","type","type"]:void 0},getShaderSource:A,getRunData:()=>({outputs:[{dims:e[0].dims,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(a/64)},programUniforms:p?[{type:"uint32",data:a},...ne(s)]:[{type:"uint32",data:a}]})}},Wl=e=>X(e),Ma=(e,t)=>{let{inputs:r,outputCount:o}=e,n=Wl({...t,outputCount:o});if(Ut.webgpu.validateInputContent&&zl(r,n),t.trainingMode)throw new Error("BatchNormalization trainingMode is not supported yet.");e.compute(Vl(r,n))}});var Ul,Nl,za,Va=q(()=>{"use strict";ye();be();Ul=e=>{if(e[0].dims.length!==3)throw new Error("input should have 3 dimensions");if(![320,640,1280].includes(e[0].dims[2]))throw new Error("number of channels should be 320, 640 or 1280");if(e[1].dims.length!==1)throw new Error("bias is expected to have 1 dimensions");if(e[0].dims[2]!==e[1].dims[0])throw new Error("last dimension of input and bias are not the same")},Nl=e=>{let t=e[0].dims,r=e[0].dims[2],o=D.size(t)/4,n=e[0].dataType,s=W("input",n,t,4),u=W("bias",n,[r],4),d=W("residual",n,t,4),a=K("output",n,t,4);return{name:"BiasAdd",getRunData:()=>({outputs:[{dims:t,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(o/64)}}),getShaderSource:h=>`\n  const channels = ${r}u / 4;\n  ${h.declareVariables(s,u,d,a)}\n\n  ${h.mainStart()}\n    ${h.guardAgainstOutOfBoundsWorkgroupSizes(o)}\n    let value = ${s.getByOffset("global_idx")}\n      + ${u.getByOffset("global_idx % channels")} + ${d.getByOffset("global_idx")};\n    ${a.setByOffset("global_idx","value")}\n  }`}},za=e=>{Ul(e.inputs),e.compute(Nl(e.inputs))}});var Hl,_e,Wa,Ua,Na,Ha,Ga,La,Fa,ja,qa,Gl,Ka,Ya,Za,Xa,jr,Qa,qr,Ja,ei,ti,ri,ni,oi,ai,ii,si,ui,li,di,ci,pi,mi,fi,hi,Rn=q(()=>{"use strict";ze();ye();Oe();be();Hl=(e,t,r,o,n,s)=>{let u=Math.ceil(t/4),d="";typeof n=="string"?d=`${n}(a)`:d=n("a");let a=W("inputData",r,[u],4),p=K("outputData",o,[u],4);return`\n      ${e.registerUniform("vec_size","u32").declareVariables(a,p)}\n\n  ${s??""}\n\n  ${e.mainStart()}\n    ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}\n\n    let a = ${a.getByOffset("global_idx")};\n    ${p.setByOffset("global_idx",d)}\n  }`},_e=(e,t,r,o,n,s=e.dataType)=>({name:t,shaderCache:{hint:n,inputDependencies:["type"]},getShaderSource:u=>Hl(u,D.size(e.dims),e.dataType,s,r,o),getRunData:u=>({outputs:[{dims:e.dims,dataType:s}],dispatchGroup:{x:Math.ceil(D.size(u[0].dims)/64/4)},programUniforms:[{type:"uint32",data:Math.ceil(D.size(e.dims)/4)}]})}),Wa=e=>{e.compute(_e(e.inputs[0],"Abs","abs"))},Ua=e=>{e.compute(_e(e.inputs[0],"Acos","acos"))},Na=e=>{e.compute(_e(e.inputs[0],"Acosh","acosh"))},Ha=e=>{e.compute(_e(e.inputs[0],"Asin","asin"))},Ga=e=>{e.compute(_e(e.inputs[0],"Asinh","asinh"))},La=e=>{e.compute(_e(e.inputs[0],"Atan","atan"))},Fa=e=>{e.compute(_e(e.inputs[0],"Atanh","atanh"))},ja=e=>X(e),qa=(e,t)=>{let r;switch(t.to){case 10:r="vec4<f16>";break;case 1:r="vec4<f32>";break;case 12:r="vec4<u32>";break;case 6:r="vec4<i32>";break;case 9:r="vec4<bool>";break;default:throw new RangeError(`not supported type (specified in attribute \'to\' from \'Cast\' operator): ${t.to}`)}e.compute(_e(e.inputs[0],"Cast",r,void 0,t.cacheKey,t.to))},Gl=e=>{let t=e.length>=2?e[1].getFloat32Array()[0]:zr,r=e.length>=3?e[2].getFloat32Array()[0]:Vr;return X({min:t,max:r})},Ka=(e,t)=>{let r=e.inputs.length===1?t:Gl(e.inputs),o=Te(e.inputs[0].dataType);e.compute(_e(e.inputs[0],"Clip",n=>`clamp(${n}, clip_min_, clip_max_)`,`\n    const clip_min_: vec4<${o}> = vec4(${o}(${r.min}));\n    const clip_max_: vec4<${o}> = vec4(${o}(${r.max}));\n`,r.cacheKey),{inputs:[0]})},Ya=e=>{e.compute(_e(e.inputs[0],"Ceil","ceil"))},Za=e=>{e.compute(_e(e.inputs[0],"Cos","cos"))},Xa=e=>{e.compute(_e(e.inputs[0],"Cosh","cosh"))},jr=e=>X(e),Qa=(e,t)=>{e.compute(_e(e.inputs[0],"Elu",r=>`elu_vf32(${r})`,`\n  const elu_alpha_: f32 = f32(${t.alpha});\n\n  fn elu_f32(a: f32) -> f32 {\n  return select((exp(a) - 1.0) * elu_alpha_, a, a >= 0.0);\n  }\n\n  fn elu_vf32(v: vec4<f32>) -> vec4<f32> {\n  return vec4(elu_f32(v.x), elu_f32(v.y), elu_f32(v.z), elu_f32(v.w));\n  }`,t.cacheKey))},qr=(e,t="f32")=>`\nconst r0: ${t} = 0.3275911;\nconst r1: ${t} = 0.254829592;\nconst r2: ${t} = -0.284496736;\nconst r3: ${t} = 1.421413741;\nconst r4: ${t} = -1.453152027;\nconst r5: ${t} = 1.061405429;\n\nfn erf_vf32(v: ${e}) -> ${e} {\n  let absv = abs(v);\n  let x = 1.0 / (1.0 + r0 * absv);\n  return sign(v) * (1.0 - ((((r5 * x + r4) * x + r3) * x + r2) * x + r1) * x * exp(-absv * absv));\n}`,Ja=e=>{let t=Te(e.inputs[0].dataType);e.compute(_e(e.inputs[0],"Erf",r=>`erf_vf32(${r})`,qr(`vec4<${t}>`,t)))},ei=e=>{e.compute(_e(e.inputs[0],"Exp","exp"))},ti=e=>{e.compute(_e(e.inputs[0],"Floor","floor"))},ri=e=>{let t=Te(e.inputs[0].dataType);e.compute(_e(e.inputs[0],"Gelu",r=>`0.5 * ${r} * (1.0 + erf_vf32(${r} * 0.7071067811865475))`,qr(`vec4<${t}>`,t)))},ni=(e,t)=>{e.compute(_e(e.inputs[0],"LeakyRelu",r=>`select(leaky_relu_alpha_ * ${r}, ${r}, ${r} >= vec4<f32>(0.0))`,`const leaky_relu_alpha_: f32 = f32(${t.alpha});`,t.cacheKey))},oi=e=>{e.compute(_e(e.inputs[0],"Not",t=>`!${t}`))},ai=e=>{e.compute(_e(e.inputs[0],"Neg",t=>`-${t}`))},ii=e=>{e.compute(_e(e.inputs[0],"Reciprocal",t=>`1.0/${t}`))},si=e=>{e.compute(_e(e.inputs[0],"Relu",t=>`select(vec4<f32>(0.0), ${t}, ${t} > vec4<f32>(0.0))`))},ui=e=>{e.compute(_e(e.inputs[0],"Sigmoid",t=>`(1.0 / (1.0 + exp(-${t})))`))},li=e=>{e.compute(_e(e.inputs[0],"Sin","sin"))},di=e=>{e.compute(_e(e.inputs[0],"Sinh","sinh"))},ci=e=>{e.compute(_e(e.inputs[0],"Sqrt","sqrt"))},pi=e=>{e.compute(_e(e.inputs[0],"Tan","tan"))},mi=e=>{e.compute(_e(e.inputs[0],"Tanh","tanh"))},fi=(e,t)=>(e.compute(_e(e.inputs[0],"ThresholdedRelu",r=>`select(vec4<f32>(0.0), ${r}, ${r} > thresholded_relu_alpha_)`,`const thresholded_relu_alpha_: vec4<f32> = vec4<f32>(${t.alpha});`,t.cacheKey)),0),hi=e=>{e.compute(_e(e.inputs[0],"Log","log"))}});var Fl,jl,gi,yi=q(()=>{"use strict";ye();be();Rn();Fl=e=>{if(e[0].dims.length!==3)throw new Error("input should have 3 dimensions");if(![2560,5120,10240].includes(e[0].dims[2]))throw new Error("hidden state should be 2560, 5120 or 10240");if(e[1].dims.length!==1)throw new Error("bias is expected to have 1 dimensions");if(e[0].dims[2]!==e[1].dims[0])throw new Error("last dimension of input and bias are not the same")},jl=e=>{let t=e[0].dims.slice();t[2]=t[2]/2;let r=W("input",e[0].dataType,e[0].dims,4),o=W("bias",e[0].dataType,[e[0].dims[2]],4),n=K("output",e[0].dataType,t,4),s=D.size(t)/4,u=Te(e[0].dataType);return{name:"BiasSplitGelu",getRunData:()=>({outputs:[{dims:t,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(s/64)}}),getShaderSource:a=>`\n  const M_SQRT2 = sqrt(2.0);\n  const halfChannels = ${e[0].dims[2]/4/2}u;\n\n  ${a.declareVariables(r,o,n)}\n\n  ${qr(`vec4<${u}>`,u)}\n\n  ${a.mainStart()}\n    ${a.guardAgainstOutOfBoundsWorkgroupSizes(s)}\n    let biasIdx = global_idx % halfChannels;\n    let batchIndex = global_idx / halfChannels;\n    let inputOffset = biasIdx + batchIndex * halfChannels * 2;\n    let valueLeft = input[inputOffset] + bias[biasIdx];\n    let valueRight = input[inputOffset + halfChannels] + bias[biasIdx + halfChannels];\n    let geluRight = valueRight * 0.5 * (erf_vf32(valueRight / M_SQRT2) + 1);\n\n    ${n.setByOffset("global_idx","valueLeft * geluRight")}\n  }`}},gi=e=>{Fl(e.inputs),e.compute(jl(e.inputs))}});var ql,Kl,pt,bi,wi,vi,$i,Si,xi,Ci,Ii,Ai,Ti,_i=q(()=>{"use strict";ze();ye();be();ql=(e,t,r,o,n,s,u,d,a,p,h,$,g)=>{let w,b;typeof d=="string"?w=b=(P,z)=>`${d}((${P}),(${z}))`:typeof d=="function"?w=b=d:(w=d.scalar,b=d.vector);let v=$?t.length:t,I=$?r.length:r,x=$?o.length:o,A=K("outputData",h,x,4),B=W("aData",a,v,4),E=W("bData",p,I,4),V;if(n)if(s){let P=D.size(t)===1,z=D.size(r)===1,U=t.length>0&&t[t.length-1]%4===0,F=r.length>0&&r[r.length-1]%4===0;P||z?V=A.setByOffset("global_idx",b(P?`${B.type.value}(${B.getByOffset("0")}.x)`:B.getByOffset("global_idx"),z?`${E.type.value}(${E.getByOffset("0")}.x)`:E.getByOffset("global_idx"))):V=`\n            let outputIndices = ${A.offsetToIndices("global_idx * 4u")};\n            let offsetA = ${B.broadcastedIndicesToOffset("outputIndices",A)};\n            let offsetB = ${E.broadcastedIndicesToOffset("outputIndices",A)};\n            ${A.setByOffset("global_idx",b(u||U?B.getByOffset("offsetA / 4u"):`${B.type.value}(${B.getByOffset("offsetA / 4u")}[offsetA % 4u])`,u||F?E.getByOffset("offsetB / 4u"):`${E.type.value}(${E.getByOffset("offsetB / 4u")}[offsetB % 4u])`))}\n          `}else V=A.setByOffset("global_idx",b(B.getByOffset("global_idx"),E.getByOffset("global_idx")));else{if(!s)throw new Error("no necessary to use scalar implementation for element-wise binary op implementation.");let P=(z,U,F="")=>{let te=`aData[indexA${U}][componentA${U}]`,R=`bData[indexB${U}][componentB${U}]`;return`\n            let outputIndices${U} = ${A.offsetToIndices(`global_idx * 4u + ${U}u`)};\n            let offsetA${U} = ${B.broadcastedIndicesToOffset(`outputIndices${U}`,A)};\n            let offsetB${U} = ${E.broadcastedIndicesToOffset(`outputIndices${U}`,A)};\n            let indexA${U} = offsetA${U} / 4u;\n            let indexB${U} = offsetB${U} / 4u;\n            let componentA${U} = offsetA${U} % 4u;\n            let componentB${U} = offsetB${U} % 4u;\n            ${z}[${U}] = ${F}(${w(te,R)});\n          `};h===9?V=`\n            var data = vec4<u32>(0);\n            ${P("data",0,"u32")}\n            ${P("data",1,"u32")}\n            ${P("data",2,"u32")}\n            ${P("data",3,"u32")}\n            outputData[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));`:V=`\n            ${P("outputData[global_idx]",0)}\n            ${P("outputData[global_idx]",1)}\n            ${P("outputData[global_idx]",2)}\n            ${P("outputData[global_idx]",3)}\n          `}return`\n        ${e.registerUniform("vec_size","u32").declareVariables(B,E,A)}\n\n        ${g??""}\n\n        ${e.mainStart()}\n        ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}\n        ${V}\n      }`},Kl=(e,t,r,o,n,s,u=r.dataType)=>{let d=!D.areEqual(r.dims,o.dims),a=r.dims,p=D.size(r.dims),h=!1,$=!1,g=[d];if(d){let b=st.calcShape(r.dims,o.dims,!1);if(!b)throw new Error("Can\'t perform binary op on the given tensors");a=b,p=D.size(a);let v=D.size(r.dims)===1,I=D.size(o.dims)===1,x=r.dims.length>0&&r.dims[r.dims.length-1]%4===0,A=o.dims.length>0&&o.dims[o.dims.length-1]%4===0;g.push(v),g.push(I),g.push(x),g.push(A);let B=1;for(let E=1;E<a.length;E++){let V=r.dims[r.dims.length-E]??1,P=o.dims[o.dims.length-E]??1;if(V===P)B*=V;else break}B%4===0?($=!0,h=!0):(v||I||x||A)&&(h=!0)}else h=!0;g.push(h);let w=ke(r.dims.length)&&ke(o.dims.length)&&ke(a.length);return{name:e,shaderCache:{hint:t+g.map(b=>b.toString()).join("_"),inputDependencies:w?["rank","rank"]:["dims","dims"]},getShaderSource:b=>ql(b,r.dims,o.dims,a,h,d,$,n,r.dataType,o.dataType,u,w,s),getRunData:()=>({outputs:[{dims:a,dataType:u}],dispatchGroup:{x:Math.ceil(p/64/4)},programUniforms:w?[{type:"uint32",data:Math.ceil(D.size(a)/4)},...ne(r.dims),...ne(o.dims),...ne(a)]:[{type:"uint32",data:Math.ceil(D.size(a)/4)}]})}},pt=(e,t,r,o,n,s)=>{e.compute(Kl(t,n??"",e.inputs[0],e.inputs[1],r,o,s))},bi=e=>{pt(e,"Add",(t,r)=>`${t}+${r}`)},wi=e=>{pt(e,"Div",(t,r)=>`${t}/${r}`)},vi=e=>{pt(e,"Equal",{scalar:(t,r)=>`u32(${t}==${r})`,vector:(t,r)=>`vec4<u32>(${t}==${r})`},void 0,void 0,9)},$i=e=>{pt(e,"Mul",(t,r)=>`${t}*${r}`)},Si=e=>{let t=W("input",e.inputs[0].dataType,e.inputs[0].dims).type.value;pt(e,"Pow",{scalar:(o,n)=>`pow_custom(${o},${n})`,vector:(o,n)=>`pow_vector_custom(${o},${n})`},`\n    fn pow_custom(a : ${t}, b : ${t}) -> ${t} {\n      if (b == ${t}(0.0)) {\n        return ${t}(1.0);\n      } else if (a < ${t}(0.0) && f32(b) != floor(f32(b))) {\n        return ${t}(pow(f32(a), f32(b))); // NaN\n      }\n      return select(sign(a), ${t}(1.0), round(f32(abs(b) % ${t}(2.0))) != 1.0) * ${t}(${t==="i32"?"round":""}(pow(f32(abs(a)), f32(b))));\n    }\n    fn pow_vector_custom(a : vec4<${t}>, b : vec4<${t}>) -> vec4<${t}> {\n      // TODO: implement vectorized pow\n      return vec4<${t}>(pow_custom(a.x, b.x), pow_custom(a.y, b.y), pow_custom(a.z, b.z), pow_custom(a.w, b.w));\n    }\n      `)},xi=e=>{pt(e,"Sub",(t,r)=>`${t}-${r}`)},Ci=e=>{pt(e,"Greater",{scalar:(t,r)=>`u32(${t}>${r})`,vector:(t,r)=>`vec4<u32>(${t}>${r})`},void 0,void 0,9)},Ii=e=>{pt(e,"Less",{scalar:(t,r)=>`u32(${t}<${r})`,vector:(t,r)=>`vec4<u32>(${t}<${r})`},void 0,void 0,9)},Ai=e=>{pt(e,"GreaterOrEqual",{scalar:(t,r)=>`u32(${t}>=${r})`,vector:(t,r)=>`vec4<u32>(${t}>=${r})`},void 0,void 0,9)},Ti=e=>{pt(e,"LessOrEqual",{scalar:(t,r)=>`u32(${t}<=${r})`,vector:(t,r)=>`vec4<u32>(${t}<=${r})`},void 0,void 0,9)}});var Zl,Xl,Ql,Jl,Ei,Oi,ki=q(()=>{"use strict";ye();Oe();be();Zl=e=>{if(!e||e.length<1)throw new Error("too few inputs");let t=e[0].dataType,r=e[0].dims.length;for(let o of e){if(o.dataType!==t)throw new Error("input tensors should be one type");if(o.dims.length!==r)throw new Error("input tensors should have the same shape")}},Xl=(e,t)=>`\n  fn calculateInputIndex(index: u32) -> u32 {\n    let sizeInConcatAxis = array<u32, ${e}u>(${t});\n    for (var i: u32 = 0u; i < ${e}; i += 1u ) {\n      if (index < sizeInConcatAxis[i]) {\n        return i;\n      }\n    }\n    return ${e}u;\n  }`,Ql=(e,t)=>{let r=e.length,o=[];for(let n=0;n<r;++n){let s=t.setByOffset("global_idx",e[n].getByIndices("indices"));r===1?o.push(s):n===0?o.push(`if (inputIndex == ${n}u) { ${s} }`):n===r-1?o.push(`else { ${s} }`):o.push(`else if (inputIndex == ${n}) { ${s} }`)}return o.join(`\n`)},Jl=(e,t)=>{let r=e[0].dims.slice();if(t>=r.length||t<-1*r.length)throw new Error("axis specified for concat doesn\'t match input dimensionality");let o=t<0?r.length+t:t,n=r.slice(0);for(let E=1;E<e.length;E++){let V=e[E].dims.slice();for(let P=0;P<r.length;P++)if(P===o)n[o]+=V[P];else if(r[P]!==V[P])throw new Error("non concat dimensions must match")}let s=D.size(n),u=new Array(e.length),d=new Array(e.length),a=e[0].dataType,p=0,h=[],$=[],g=[],w=[{type:"uint32",data:s}];for(let E=0;E<e.length;++E)p+=e[E].dims[o],u[E]=p,g.push(ke(e[E].dims.length)),$.push(g[E]?e[E].dims.length:e[E].dims),d[E]=W(`input${E}`,a,$[E]),h.push(g[E]?"rank":"dims"),w.push({type:"uint32",data:u[E]});for(let E=0;E<e.length;++E)g[E]&&w.push(...ne(e[E].dims));let b=ke(n.length);b&&w.push(...ne(n));let v=b?n.length:n,I=K("output",a,v),x=I.indicesGet("indices",o),A=Array.from(Array(u.length).keys()).map(E=>`uniforms.sizeInConcatAxis${E}`).join(","),B=E=>`\n\n  ${(()=>{E.registerUniform("outputSize","u32");for(let V=0;V<e.length;V++)E.registerUniform(`sizeInConcatAxis${V}`,"u32");return E.declareVariables(...d,I)})()}\n\n  ${Xl(u.length,A)}\n\n  ${E.mainStart()}\n    ${E.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n\n    var indices = ${I.offsetToIndices("global_idx")};\n\n    let inputIndex = calculateInputIndex(${x});\n    if (inputIndex != 0u) {\n      let sizeInConcatAxis = array<u32, ${u.length}u>(${A});\n      ${x} -= sizeInConcatAxis[inputIndex - 1u];\n    }\n\n    ${Ql(d,I)}\n  }`;return{name:"Concat",shaderCache:{hint:`${t}`,inputDependencies:h},getRunData:()=>({outputs:[{dims:n,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(s/64)},programUniforms:w}),getShaderSource:B}},Ei=(e,t)=>{Zl(e.inputs),e.compute(Jl(e.inputs,t.axis))},Oi=e=>X({axis:e.axis})});var $t,Kr,Ot=q(()=>{"use strict";ye();$t=(e,t)=>{switch(e.activation){case"Relu":return{activationFunction:"",applyActivation:`value = max(value, ${t}(0.0));`};case"Sigmoid":return{activationFunction:"",applyActivation:`value = (${t}(1.0) / (${t}(1.0) + exp(-value)));`};case"Clip":return{activationFunction:`const clip_min_=${t}(${e.clipMin});const clip_max_=${t}(${e.clipMax});`,applyActivation:"value = clamp(value, clip_min_, clip_max_);"};default:return{activationFunction:"",applyActivation:""}}},Kr=e=>{let t=e?.activation||"";if(t==="Clip"){let[r,o]=e?.activation_params||[zr,Vr];return{activation:t,clipMax:o,clipMin:r,activationCacheKey:`${t}:${r},${o}`}}return{activation:t,activationCacheKey:t}}});var We,Yr,Zr=q(()=>{"use strict";We=(e,t)=>{switch(e){case 1:return t;case 2:return`vec2<${t}>`;case 3:return`vec3<${t}>`;case 4:return`vec4<${t}>`;default:throw new Error(`${e}-component is not supported.`)}},Yr=e=>`\n      ${e?"value = value + getBiasByOutputCoords(coords);":""}\n      `});var Xr,Bn=q(()=>{"use strict";Xr=e=>`\nfn getIndexFromCoords4D(coords : vec4<i32>, shape : vec4<i32>) -> i32 {\n  return dot(coords, vec4<i32>(\n      shape.y * shape.z * shape.w, shape.z * shape.w, shape.w, 1));\n}\nfn getOutputIndexFromCoords(coords : vec4<i32>) -> i32 {\n  return dot(coords, vec4<i32>(\n    i32(${e}.x), i32(${e}.y), i32(${e}.z), 1));\n}\n`});var ed,td,lr,Pi,rd,dr,nd,Qr,cr=q(()=>{"use strict";ye();be();Ot();Zr();ed=(e,t)=>e?`\n        mm_Asub[inputRow][inputCol] = mm_readA(batch,\n          kStart + inputRow,\n          globalRowStart / innerElementSize + inputCol${t?", batchIndices":""});\n        `:`\n        mm_Asub[inputRow][inputCol] = mm_readA(batch,\n          globalRow + innerRow,\n          kStart / innerElementSize + inputCol${t?", batchIndices":""});\n        `,td=(e,t)=>e?`\n        let ACached0 = mm_Asub[k * innerElementSize][localRow];\n        let ACached1 = mm_Asub[k * innerElementSize + 1][localRow];\n        let ACached2 = mm_Asub[k * innerElementSize + 2][localRow];\n        ${t===3?"":"let ACached3 = mm_Asub[k * innerElementSize + 3][localRow];"}\n        for (var i = 0; i < rowPerThread; i = i + 1) {\n          acc[i] = BCached0 * ACached0[i] + acc[i];\n          acc[i] = BCached1 * ACached1[i] + acc[i];\n          acc[i] = BCached2 * ACached2[i] + acc[i];\n          ${t===3?"":"acc[i] = BCached3 * ACached3[i] + acc[i];"}\n        }`:`\n        for (var i = 0; i < rowPerThread; i = i + 1) {\n          let ACached = mm_Asub[tileRow + i][k];\n          acc[i] = BCached0 * ACached.x + acc[i];\n          acc[i] = BCached1 * ACached.y + acc[i];\n          acc[i] = BCached2 * ACached.z + acc[i];\n          ${t===3?"":"acc[i] = BCached3 * ACached.w + acc[i];"}\n        }`,lr=(e,t,r="f32",o,n=!1,s=32,u=!1,d=32)=>{let a=t[1]*e[1],p=t[0]*e[0],h=n?a:s,$=n?s:a,g=h/t[0],w=s/t[1];if(!((n&&g===4&&e[1]===4||!n&&(g===3||g===4))&&h%t[0]===0&&s%t[1]===0&&e[0]===4))throw new Error(`If transposeA ${n} is true, innerElementSize ${g} and workPerThread[1] ${e[1]} must be 4.\n      Otherwise, innerElementSize ${g} must be 3 or 4.\n  tileAWidth ${h} must be divisible by workgroupSize[0]${t[0]}. tileInner ${s} must be divisible by workgroupSize[1] ${t[1]}. colPerThread ${e[0]} must be 4.`);return`\nvar<workgroup> mm_Asub: array<array<vec${g}<${r}>, ${h/g}>, ${$}>;\nvar<workgroup> mm_Bsub: array<array<vec4<${r}>, ${p/e[0]}>, ${s}>;\n\nconst rowPerThread = ${e[1]};\nconst colPerThread = ${e[0]};\nconst innerElementSize = ${g};\nconst tileInner = ${s};\n\n@compute @workgroup_size(${t[0]}, ${t[1]}, ${t[2]})\nfn main(@builtin(local_invocation_id) localId : vec3<u32>,\n        @builtin(global_invocation_id) globalId : vec3<u32>,\n        @builtin(workgroup_id) workgroupId : vec3<u32>) {\n  let localRow = i32(localId.y);\n  let tileRow = localRow * rowPerThread;\n  let tileCol = i32(localId.x);\n\n  let globalRow =i32(globalId.y) * rowPerThread;\n  let globalCol = i32(globalId.x);\n  let batch = ${u?"0":"i32(globalId.z)"};\n  ${o?`let batchIndices = ${o.offsetToIndices("u32(batch)")};`:""}\n  let globalRowStart = i32(workgroupId.y) * ${a};\n\n  let numTiles = ${u?`${Math.ceil(d/s)}`:"(uniforms.dimInner - 1) / tileInner + 1"};\n  var kStart = ${u?`i32(globalId.z) * ${d}`:"0"};\n\n  var acc: array<vec4<${r}>, rowPerThread>;\n\n  // Loop over shared dimension.\n  let tileRowB = localRow * ${w};\n  for (var t = 0; t < numTiles; t = t + 1) {\n      // Load one tile of A into local memory.\n      for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n          let inputRow = tileRow + innerRow;\n          let inputCol = tileCol;\n          ${ed(n,o)}\n      }\n\n      // Load one tile of B into local memory.\n      for (var innerRow = 0; innerRow < ${w}; innerRow = innerRow + 1) {\n          let inputRow = tileRowB + innerRow;\n          let inputCol = tileCol;\n          mm_Bsub[inputRow][inputCol] = mm_readB(batch, kStart + inputRow, globalCol${o?", batchIndices":""});\n      }\n      kStart = kStart + tileInner;\n      workgroupBarrier();\n\n      // Compute acc values for a single thread.\n      for (var k = 0; k < tileInner / innerElementSize; k = k + 1) {\n          let BCached0 = mm_Bsub[k * innerElementSize][tileCol];\n          let BCached1 = mm_Bsub[k * innerElementSize + 1][tileCol];\n          let BCached2 = mm_Bsub[k * innerElementSize + 2][tileCol];\n          ${g===3?"":"let BCached3 = mm_Bsub[k * innerElementSize + 3][tileCol];"}\n\n          ${td(n,g)}\n      }\n\n      workgroupBarrier();\n  }\n\n  for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      mm_write(batch, globalRow + innerRow, globalCol, acc[innerRow]);\n  }\n}`},Pi=(e,t)=>e?`\n            mm_Asub[inputRow][inputCol] = mm_readA(batch,\n              kStart + inputRow,\n              globalRowStart + inputCol${t?", batchIndices":""});\n            `:`\n            mm_Asub[inputRow][inputCol] = mm_readA(batch,\n              globalRowStart + inputRow,\n              kStart + inputCol${t?", batchIndices":""});\n            `,rd=e=>e?"let ACached = mm_Asub[k][tileRow + innerRow];":"let ACached = mm_Asub[tileRow + innerRow][k];",dr=(e,t,r="f32",o,n=!1,s=32,u=!1,d=32,a=!1)=>{let p=e[1]*t[1],h=e[0]*t[0],$=n?p:s,g=n?s:p;if(!(g%t[1]===0&&$%t[0]===0&&s%t[1]===0))throw new Error(`tileAHight ${g} must be divisible by workgroupSize[1]${t[1]}, tileAWidth ${$} must be divisible by workgroupSize[0]${t[0]}, tileInner ${s} must be divisible by workgroupSize[1]${t[1]}`);let w=g/t[1],b=$/t[0],v=s/t[1],I=a?`\n    let localRow = i32(localId.y);\n    let localCol = i32(localId.x);\n    let globalRowStart = i32(workgroupId.y) * ${p};\n    let globalColStart = i32(workgroupId.x) * ${h};\n\n    // Loop over shared dimension.\n    for (var t = 0; t < numTiles; t = t + 1) {\n      // Load one tile of A into local memory.\n      for (var inputRow = localRow; inputRow < ${g}; inputRow = inputRow + ${t[1]}) {\n        for (var inputCol = localCol; inputCol < ${$}; inputCol = inputCol + ${t[0]}) {\n          ${Pi(n,o)}\n        }\n      }\n      // Load one tile of B into local memory.\n      for (var inputRow = localRow; inputRow < ${s}; inputRow = inputRow + ${t[1]}) {\n            for (var inputCol = localCol; inputCol < ${h}; inputCol = inputCol + ${t[0]}) {\n          mm_Bsub[inputRow][inputCol] = mm_readB(batch,\n            kStart + inputRow,\n            globalColStart + inputCol${o?", batchIndices":""});\n        }\n      }\n      kStart = kStart + tileInner;\n      workgroupBarrier();\n\n      // Compute acc values for a single thread.\n      var BCached : array<${r}, colPerThread>;\n      for (var k = 0; k < tileInner; k = k + 1) {\n        for (var inner = 0; inner < colPerThread; inner = inner + 1) {\n          BCached[inner] = mm_Bsub[k][localCol + inner * ${t[0]}];\n        }\n        for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n          let ACached = ${n?`mm_Asub[k][localRow + innerRow * ${t[1]}];`:`mm_Asub[localRow + innerRow * ${t[1]}][k];`}\n          for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n            acc[innerRow][innerCol] = acc[innerRow][innerCol] +\n                ACached * BCached[innerCol];\n          }\n        }\n      }\n      workgroupBarrier();\n    }\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      let gRow = globalRowStart + localRow + innerRow * ${t[1]};\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n        let gCol = globalColStart + localCol + innerCol * ${t[0]};\n        mm_write(batch, gRow, gCol, acc[innerRow][innerCol]);\n      }\n    }\n    `:`\nlet tileRow = i32(localId.y) * rowPerThread;\nlet tileCol = i32(localId.x) * colPerThread;\n\nlet globalRow = i32(globalId.y) * rowPerThread;\nlet globalCol = i32(globalId.x) * colPerThread;\nlet globalRowStart = i32(workgroupId.y) * ${p};\n\nlet tileRowA = i32(localId.y) * ${w};\nlet tileColA = i32(localId.x) * ${b};\nlet tileRowB = i32(localId.y) * ${v};\n// Loop over shared dimension.\nfor (var t = 0; t < numTiles; t = t + 1) {\n  // Load one tile of A into local memory.\n  for (var innerRow = 0; innerRow < ${w}; innerRow = innerRow + 1) {\n    for (var innerCol = 0; innerCol < ${b}; innerCol = innerCol + 1) {\n      let inputRow = tileRowA + innerRow;\n      let inputCol = tileColA + innerCol;\n      ${Pi(n,o)}\n    }\n  }\n\n  // Load one tile of B into local memory.\n  for (var innerRow = 0; innerRow < ${v}; innerRow = innerRow + 1) {\n    for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n      let inputRow = tileRowB + innerRow;\n      let inputCol = tileCol + innerCol;\n      mm_Bsub[inputRow][inputCol] = mm_readB(batch,\n        kStart + inputRow,\n        globalCol + innerCol${o?", batchIndices":""});\n    }\n  }\n  kStart = kStart + tileInner;\n  workgroupBarrier();\n\n  // Compute acc values for a single thread.\n  var BCached : array<${r}, colPerThread>;\n  for (var k = 0; k < tileInner; k = k + 1) {\n    for (var inner = 0; inner < colPerThread; inner = inner + 1) {\n      BCached[inner] = mm_Bsub[k][tileCol + inner];\n    }\n\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      ${rd(n)}\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n        acc[innerRow][innerCol] = acc[innerRow][innerCol] + ACached * BCached[innerCol];\n      }\n    }\n  }\n\n  workgroupBarrier();\n}\n\nfor (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n  for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n    mm_write(batch, globalRow + innerRow, globalCol + innerCol,\n        acc[innerRow][innerCol]);\n  }\n}\n`;return`\n  var<workgroup> mm_Asub : array<array<${r}, ${$}>, ${g}>;\n  var<workgroup> mm_Bsub : array<array<${r}, ${h}>, ${s}>;\n  const rowPerThread = ${e[1]};\n  const colPerThread = ${e[0]};\n  const tileInner = ${s};\n\n@compute @workgroup_size(${t[0]}, ${t[1]}, ${t[2]})\nfn main(@builtin(local_invocation_id) localId : vec3<u32>,\n        @builtin(global_invocation_id) globalId : vec3<u32>,\n        @builtin(workgroup_id) workgroupId : vec3<u32>) {\n    let batch = ${u?"0":"i32(globalId.z)"};\n    ${o?`let batchIndices = ${o.offsetToIndices("u32(batch)")};`:""}\n    let numTiles = ${u?`${Math.ceil(d/s)}`:"(uniforms.dimInner - 1) / tileInner + 1"};\n    var kStart = ${u?`i32(globalId.z) * ${d}`:"0"};\n\n    var acc : array<array<${r}, colPerThread>, rowPerThread>;\n\n    // Without this initialization strange values show up in acc.\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n        acc[innerRow][innerCol] = 0.0;\n      }\n    }\n    ${I}\n  }\n`},nd=(e,t,r,o,n,s=!1)=>{let[u,d,a]=n,[p,h,$,g]=o,w=_n(u,a),b=_n(d,a),v=Te(o[0].type.tensor),I=()=>{let B=h.rank,E=p.rank,V=`var aIndices: ${h.type.indices};`;for(let P=B-2-1,z=E-1;P>=0;P--,z--)V+=`\naIndices[${P}] = ${E>1?`batchIndices[${z}]`:"batchIndices"};`;return w.forEach(P=>{V+=`\naIndices[${P}] = 0;`}),V+=`\naIndices[${B-2}] = u32(row);\n                   aIndices[${B-1}] = u32(colIn);`,V},x=()=>{let B=$.rank,E=p.rank,V=`var bIndices: ${$.type.indices};`;for(let P=B-2-1,z=E-1;P>=0;P--,z--)V+=`\nbIndices[${P}] = ${E>1?`batchIndices[${z}]`:"batchIndices"};`;return b.forEach(P=>{V+=`\nbIndices[${P}] = 0;`}),V+=`\nbIndices[${B-2}] = u32(row);\n                   bIndices[${B-1}] = u32(colIn);`,V};return`\n    fn mm_readA(batch: i32, row: i32, colIn: i32, batchIndices: ${p.type.indices}) -> ${We(e,v)} {\n      var value = ${We(e,v)}(0.0);\n      let col = colIn * ${e};\n      if(row < uniforms.dimAOuter && col < uniforms.dimInner)\n      {\n        ${I()}\n        value = ${h.getByIndices("aIndices")};\n      }\n      return value;\n    }\n\n    fn mm_readB(batch: i32, row: i32, colIn: i32, batchIndices: ${p.type.indices}) -> ${We(e,v)} {\n      var value = ${We(e,v)}(0.0);\n      let col = colIn * ${e};\n      if(row < uniforms.dimInner && col < uniforms.dimBOuter)\n      {\n        ${x()}\n        value = ${$.getByIndices("bIndices")};\n      }\n      return value;\n    }\n\n    fn mm_write(batch: i32, row: i32, colIn: i32, valueIn: ${We(e,v)}) {\n      let col = colIn * ${e};\n      if (row < uniforms.dimAOuter && col < uniforms.dimBOuter) {\n        var value = valueIn;\n        let coords = vec3<i32>(batch, row, colIn);\n        ${t?`value = value + ${s?"bias[colIn]":`${We(e,v)}(bias[row])`};`:""}\n        ${r}\n        ${g.setByIndices("vec3<u32>(coords)","value")}\n      }\n    }\n    `},Qr=(e,t,r,o,n=!1)=>{let s=e[0].dims,u=e[1].dims,d=s.slice(0,-2),a=u.slice(0,-2),p=o?o.slice(0,-2):r.slice(0,-2),h=ke(p.length),$=h?p.length:p,g=No("batchDims",e[0].dataType,$,1),w=D.size(p),b=s[s.length-2],v=s[s.length-1],I=u[u.length-1],x=v%4===0&&I%4===0,A=b<=8?[4,1,1]:[4,4,1],B=[8,8,1],E=[Math.ceil(I/B[0]/A[0]),Math.ceil(b/B[1]/A[1]),Math.ceil(w/B[2]/A[2])],V=Te(e[0].dataType),P=x?4:1,z=[...d,b,v/P],U=ke(z.length),F=U?z.length:z,te=[...a,v,I/P],R=ke(te.length),j=R?te.length:te,pe=[w,b,I/P],Q=W("a",e[0].dataType,F,P),$e=W("b",e[1].dataType,j,P),Y=K("result",e[0].dataType,pe.length,P),Se=[Q,$e],Ie=[{type:"int32",data:b},{type:"int32",data:I},{type:"int32",data:v}];h&&Ie.push(...ne(p)),U&&Ie.push(...ne(z)),R&&Ie.push(...ne(te));let Ae=[];Ae.push(U?"rank":"dims"),Ae.push(R?"rank":"dims");let he=e.length>2,{activationFunction:nt,applyActivation:He}=$t(t,Y.type.value),Le=nd(P,he,He,[g,Q,$e,Y],[d,a,p],n);if(he){let de=n?P:1;Se.push(W("bias",e[2].dataType,e[2].dims.length,de)),Ie.push(...ne(e[2].dims)),Ae.push("rank")}Ie.push(...ne(pe));let L=de=>`\n  ${de.registerUniform("dimAOuter","i32").registerUniform("dimBOuter","i32").registerUniform("dimInner","i32").registerInternalVariables(g).declareVariables(...Se,Y)}\n  ${nt}\n  ${Le}\n  ${x?lr(A,B,V,g):dr(A,B,V,g)}\n                   `;return{name:"MatMul",shaderCache:{hint:t.activationCacheKey+`${A}${t.activation}${t.clipMax}${t.clipMin}${x}${he}${n}`,inputDependencies:Ae},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:E[0],y:E[1],z:E[2]},programUniforms:Ie}),getShaderSource:L}}});var od,Ri,Bi=q(()=>{"use strict";vt();be();Ot();Zr();Bn();cr();od=(e,t,r,o,n=!1,s,u=4,d=4,a=4,p="f32")=>{let h=R=>{switch(R){case 1:return"resData = x[xIndex];";case 3:return`resData = vec3<${p}>(x[xIndex], x[xIndex + 1], x[xIndex + 2]);`;case 4:return"resData = x[xIndex / 4];";default:throw new Error(`innerElementSize ${R} is not supported.`)}},$=R=>{switch(R){case 1:return"return w[row * i32(uniforms.w_shape[3]) + colIn];";case 4:return"return w[row * i32(uniforms.w_shape[3]) / 4 + colIn];";default:throw new Error(`innerElementSize ${R} is not supported.`)}},g=e?`\n    let coord = vec4<i32>(batch, xRow, xCol, xCh);\n    `:`\n    let coord = vec4<i32>(batch, xCh, xRow, xCol);\n    `,w=e?`\n    let coords = vec4<i32>(\n      batch,\n      row / outWidth,\n      row % outWidth,\n      col);\n    `:`\n    let coords = vec4<i32>(\n      batch,\n      row,\n      col / outWidth,\n      col % outWidth);\n    `,b=e?"i32(uniforms.x_shape[1])":"i32(uniforms.x_shape[2])",v=e?"i32(uniforms.x_shape[2])":"i32(uniforms.x_shape[3])",I=e?"row":"col",x=e?"col":"row",A=`\n    let inChannels = i32(uniforms.w_shape[2]);\n    let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};\n    let outRow = ${I} / outWidth;\n    let outCol = ${I} % outWidth;\n\n    let WRow = ${x} / (filterDims[1] * inChannels);\n    let WCol = ${x} / inChannels % filterDims[1];\n    let xRow = outRow * stride[0] + dilation[0] * WRow - pad[0];\n    let xCol = outCol * stride[1] + dilation[1] * WCol - pad[1];\n    let xCh = ${x} % inChannels;\n    var resData = ${We(u,p)}(0.0);\n    // The bounds checking is always needed since we use it to pad zero for\n    // the \'same\' padding type.\n    if (xRow >= 0 && xRow < ${b} && xCol >= 0 && xCol < ${v}) {\n      ${g}\n      let xIndex = getIndexFromCoords4D(coord, vec4<i32>(uniforms.x_shape));\n      ${h(u)}\n    }\n    return resData;`,B=e?t&&o?`\n    let col = colIn * ${u};\n    ${A}`:`\n    let col = colIn * ${u};\n    if (row < uniforms.dimAOuter && col < uniforms.dimInner) {\n      ${A}\n    }\n    return ${We(u,p)}(0.0);`:o&&r?`\n    let col = colIn * ${u};\n    ${A}`:`\n    let col = colIn * ${u};\n    if (row < uniforms.dimInner && col < uniforms.dimBOuter) {\n      ${A}\n    }\n    return ${We(u,p)}(0.0);`,E=`${$(d)}`,V=We(a,p),P=e?We(u,p):We(d,p),z=e?We(d,p):We(u,p),{activationFunction:U,applyActivation:F}=$t(s,V);return`\n    ${U}\n    fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${P} {\n      ${e?B:E}\n    }\n\n    fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${z} {\n      ${e?E:B}\n    }\n\n    fn mm_write(batch: i32, row : i32, colIn : i32, valueIn : ${V}) {\n      let col = colIn * ${a};\n      if (row < uniforms.dimAOuter && col < uniforms.dimBOuter)\n      {\n      var value = valueIn;\n      let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};\n      ${w}\n      ${Yr(n)}\n      ${F}\n      setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);\n      }\n    }`},Ri=(e,t,r,o,n,s,u,d)=>{let a=t.format==="NHWC",p=a?e[0].dims[3]:e[0].dims[1],h=r[0],$=a?r[2]:r[3],g=a?r[1]:r[2],w=a?r[3]:r[1],b=a&&(p%4===0||p%3===0)&&w%4===0,v=a?w:$*g,I=a?$*g:w,x=[8,8,1],A=o<=8?[4,1,1]:[4,4,1],B=[Math.ceil(v/x[0]/A[0]),Math.ceil(I/x[1]/A[1]),Math.ceil(h/x[2]/A[2])];Pe("verbose",()=>`[conv2d_mm_webgpu] dispatch = ${B}`);let E=b?a&&p%4!==0?3:4:1,V=x[1]*A[1],P=x[0]*A[0],z=Math.max(x[0]*E,x[1]),U=o%V===0,F=n%P===0,te=s%z===0,R=b?[E,4,4]:[1,1,1],j=Te(e[0].dataType),pe=b?4:1,Q=[{type:"int32",data:o},{type:"int32",data:n},{type:"int32",data:s}],$e=W("x",e[0].dataType,e[0].dims.length,E===3?1:E),Y=W("w",e[1].dataType,e[1].dims.length,pe),Se=[$e,Y];Q.push(...ne(e[0].dims)),Q.push(...ne(e[1].dims));let Ie=`\n      fn setOutputAtIndex(flatIndex : i32, value : ${b?`vec4<${j}>`:j}) {\n        result[flatIndex] = ${b?`vec4<${j}>`:j}(value);\n      }\n      fn setOutputAtCoords(d0 : i32, d1 : i32, d2 : i32, d3 : i32, value : ${b?`vec4<${j}>`:j}) {\n        let flatIndex = getOutputIndexFromCoords(vec4<i32>(d0, d1, d2, d3));\n        setOutputAtIndex(flatIndex ${b?"/ 4":""}, value);\n      }`;if(u){let he=W("bias",e[2].dataType,e[2].dims.length,pe);Se.push(he),Q.push(...ne(e[2].dims)),Ie+=`\n        fn getBiasByOutputCoords(coords : vec4<i32>) -> ${b?`vec4<${j}>`:j} {\n          return bias[coords.${a?"w":"y"}${b?"/ 4":""}];\n        }`}let Ae=K("result",e[0].dataType,r.length,pe);return Q.push(...ne(r)),{name:"Conv2DMatMul",shaderCache:{hint:t.cacheKey},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:B[0],y:B[1],z:B[2]},programUniforms:Q}),getShaderSource:he=>`\n        ${Xr("uniforms.result_strides")}\n        //struct Uniforms { xShape : vec4<i32>, wShape : vec4<i32>, outShape : vec4<i32>,\n        //  outShapeStrides: vec3<i32>, filterDims : vec2<i32>, pad : vec2<i32>, stride : vec2<i32>,\n        //  dilation : vec2<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32 };\n        ${he.registerUniform("dimAOuter","i32").registerUniform("dimBOuter","i32").registerUniform("dimInner","i32").declareVariables(...Se,Ae)}\n        const filterDims : vec2<i32> = vec2<i32>(${t.kernelShape[0]}, ${t.kernelShape[1]});\n        const pad : vec2<i32> = vec2<i32>(${t.pads[0]}, ${t.pads[1]});\n        const stride : vec2<i32> = vec2<i32>(${t.strides[0]}, ${t.strides[1]});\n        const dilation : vec2<i32> = vec2<i32>(${t.dilations[0]}, ${t.dilations[1]});\n        ${Ie}\n        ${od(a,U,F,te,u,t,R[0],R[1],R[2],j)}\n            ${b?lr(A,x,j,void 0,!a,z):dr(A,x,j,void 0,!a,z,!1,void 0,d)}`}}});var Mn,Mi=q(()=>{"use strict";ye();be();zn();Ot();Mn=(e,t,r)=>{let o=e.length>2,n=o?"value += b[output_channel];":"",s=e[0].dims,u=e[1].dims,d=u[0]/t.group,a=t.format==="NHWC",p=Dn(s,u,t.dilations,t.pads,t.strides,a),h=D.size(p),$=K("output",e[0].dataType,p),{activationFunction:g,applyActivation:w}=$t(t,$.type.value),b=W("x",e[0].dataType,s),v=W("w",e[1].dataType,u),I=[b,v];o&&I.push(W("b",e[2].dataType,e[2].dims));let x=A=>`\n  const strides: vec2<u32> = vec2(${t.strides[0]}u, ${t.strides[1]}u);\n  const pads: vec2<u32> = vec2(${t.pads[0]}u, ${t.pads[1]}u);\n\n  ${A.declareVariables(...I,$)}\n\n  ${g}\n\n  ${A.mainStart()}\n    ${A.guardAgainstOutOfBoundsWorkgroupSizes(h)}\n\n    let outputIndices = ${$.offsetToIndices("global_idx")};\n    let batch: u32 = outputIndices[0];\n    let output_channel: u32 = outputIndices[${a?3:1}];\n    let xRCCorner: vec2<u32> = vec2<u32>(outputIndices[${a?1:2}], outputIndices[${a?2:3}]) * strides - pads;\n    let group_id: u32 = output_channel / ${d}u;\n\n    var value: ${$.type.value} = ${$.type.value}(0);\n    for (var wInChannel: u32 = 0u; wInChannel < ${u[1]}u; wInChannel++) {\n      let input_channel = group_id * ${u[1]}u + wInChannel;\n      for (var wHeight: u32 = 0u; wHeight < ${u[2]}u; wHeight++) {\n        let xHeight = xRCCorner.x + wHeight * ${t.dilations[0]}u;\n\n        if (xHeight < 0u || xHeight >= ${s[a?1:2]}u) {\n          continue;\n        }\n\n        for (var wWidth: u32 = 0u; wWidth < ${u[3]}u; wWidth++) {\n          let xWidth = xRCCorner.y + wWidth * ${t.dilations[1]}u;\n          if (xWidth < 0u || xWidth >= ${s[a?2:3]}u) {\n            continue;\n          }\n\n          let xVal = ${a?b.get("batch","xHeight","xWidth","input_channel"):b.get("batch","input_channel","xHeight","xWidth")};\n          let wVal = ${v.get("output_channel","wInChannel","wHeight","wWidth")};\n          value += xVal*wVal;\n        }\n      }\n    }\n    ${n}\n    ${w}\n    ${$.setByOffset("global_idx","value")}\n  }`;return{name:"GroupedConv",shaderCache:{hint:t.cacheKey},getRunData:()=>({outputs:[{dims:r?r(p):p,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(h/64)}}),getShaderSource:x}}});var Dn,Di,ad,zi,Vn,id,sd,Wn,zn=q(()=>{"use strict";ye();Oe();Bi();cr();Mi();Ot();Wt();Dn=(e,t,r,o,n,s)=>{let u=e[0],d=e.slice(s?1:2,s?3:4),a=d.length,p=t[0],$=t.slice(2).map((b,v)=>b+(b-1)*(r[v]-1)),w=d.map((b,v)=>b+o[v]+o[v+a]).map((b,v)=>Math.floor((b-$[v]+n[v])/n[v]));return w.splice(0,0,u),w.splice(s?3:1,0,p),w},Di=[2,3,1,0],ad=(e,t)=>{if(!e||e.length!==2&&e.length!==3)throw new Error("Conv requires 2 or 3 inputs");if(e[0].dims.length!==4&&e[0].dims.length!==3)throw new Error("currently only support conv 1D and 2D");if(e[0].dims.length!==e[1].dims.length)throw new Error("filter does not have same dimension as input");let r=e[0].dims[t.format==="NHWC"?e[0].dims.length-1:1],o=e[1].dims[1]*t.group;if(r!==o)throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");if(e.length===3&&(e[2].dims.length!==1||e[1].dims[0]!==e[2].dims[0]))throw new Error("invalid bias");let n=e[0].dims.length-2;if(t.dilations.length!==n)throw new Error(`dilations should be ${n}D`);if(t.strides.length!==n)throw new Error(`strides should be ${n}D`);if(t.pads.length!==n*2)throw new Error(`pads should be ${n*2}D`);if(t.kernelShape.length!==0&&t.kernelShape.length!==e[1].dims.length-2)throw new Error("invalid kernel shape")},zi=(e,t)=>{let r=e.kernelShape.slice();for(let s=2;s<t[1].dims.length;++s)r[s-2]===0&&(r[s-2]=t[1].dims[s]);let o=e.pads.slice();Et.adjustPadsBasedOnAutoPad(t[0].dims,e.strides,e.dilations,r,o,e.format==="NHWC",e.autoPad);let n=Object.assign({},e);return Object.assign(n,{kernelShape:r,pads:o,cacheKey:e.cacheKey}),n},Vn=e=>{let t=Kr(e),r=e.format,o=["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][e.auto_pad],n=e.dilations,s=e.group,u=e.kernel_shape,d=e.pads,a=e.strides,p=e.w_is_const();return X({autoPad:o,format:r,dilations:n,group:s,kernelShape:u,pads:d,strides:a,wIsConst:p,...t})},id=(e,t,r)=>{let o=zi(r,t);if(r.group!==1){e.compute(Mn(t,o));return}let n=r.format==="NHWC",s=t.length===3,u=t[0].dims[n?1:2],d=t[0].dims[n?2:3],a=t[0].dims[n?3:1],p=t[1].dims[2],h=t[1].dims[3],$=Dn(t[0].dims,t[1].dims,r.dilations,o.pads,r.strides,n),g=$[n?1:2],w=$[n?2:3],b=$[n?3:1],v=n&&p===u&&h===d&&r.pads[0]===0&&r.pads[1]===0;if(v||p===1&&h===1&&r.dilations[0]===1&&r.dilations[1]===1&&r.strides[0]===1&&r.strides[1]===1&&r.pads[0]===0&&r.pads[1]===0){let P=$[0],z,U,F,te=[];if(n){let R=e.kernelCustomData.wT??e.compute(tt(t[1],Di),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];if(r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=R),v){let j=u*d*a;z=t[0].reshape([1,P,j]),U=R.reshape([1,j,b]),F=[1,P,b]}else z=t[0].reshape([P,u*d,a]),U=R.reshape([1,a,b]),F=[P,g*w,b];te.push(z),te.push(U)}else z=t[0].reshape([P,a,u*d]),U=t[1].reshape([1,b,a]),F=[P,b,g*w],te.push(U),te.push(z);s&&te.push(t[2]),e.compute(Qr(te,o,$,F,n),{inputs:te});return}let I=!0,x=e.kernelCustomData.wT??e.compute(tt(t[1],Di),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=x);let A=[t[0],x];s&&A.push(t[2]);let B=n?g*w:b,E=n?b:g*w,V=p*h*a;e.compute(Ri(A,o,$,B,E,V,s,I),{inputs:A})},sd=(e,t)=>{let r=t.format==="NHWC",o=[e.inputs[0].reshape(r?[e.inputs[0].dims[0],1,e.inputs[0].dims[1],e.inputs[0].dims[2]]:[e.inputs[0].dims[0],e.inputs[0].dims[1],1,e.inputs[0].dims[2]]),e.inputs[1].reshape([e.inputs[1].dims[0],e.inputs[1].dims[1],1,e.inputs[1].dims[2]])];e.inputs.length===3&&o.push(e.inputs[2]);let n=[0,t.pads[0],0,t.pads[1]],s=[1].concat(t.strides),u=[1].concat(t.dilations),d=[1].concat(t.kernelShape),a=zi({...t,pads:n,strides:s,dilations:u,kernelShape:d},o);e.compute(Mn(o,a,p=>r?[p[0],p[2],p[3]]:[]))},Wn=(e,t)=>{ad(e.inputs,t),e.inputs[0].dims.length===3?sd(e,t):id(e,e.inputs,t)}});var ud,Vi,Wi=q(()=>{"use strict";vt();be();Ot();Zr();Bn();cr();ud=(e,t=!1,r,o=4)=>{let n=We(o,"f32"),s=A=>{switch(A){case 1:return"return w[getIndexFromCoords4D(coord, vec4<i32>(uniforms.w_shape))];";case 4:return`\n            let coord1 = vec4<i32>(coordX, coordY, col + 1, rowInner);\n            let coord2 = vec4<i32>(coordX, coordY, col + 2, rowInner);\n            let coord3 = vec4<i32>(coordX, coordY, col + 3, rowInner);\n            let v0 = w[getIndexFromCoords4D(coord, vec4<i32>(uniforms.w_shape))];\n            let v1 = w[getIndexFromCoords4D(coord1, vec4<i32>(uniforms.w_shape))];\n            let v2 = w[getIndexFromCoords4D(coord2, vec4<i32>(uniforms.w_shape))];\n            let v3 = w[getIndexFromCoords4D(coord3, vec4<i32>(uniforms.w_shape))];\n            return vec4<f32>(v0, v1, v2, v3);\n            `;default:throw new Error(`innerElementSize ${A} is not supported.`)}},u=e?`\n      let coord = vec4<i32>(batch, iXR, iXC, xCh);\n      `:`\n      let coord = vec4<i32>(batch, xCh, iXR, iXC);\n      `,d=e?`\n    let coords = vec4<i32>(\n      batch,\n      row / outWidth,\n      row % outWidth,\n      col);\n    `:`\n    let coords = vec4<i32>(\n      batch,\n      row,\n      col / outWidth,\n      col % outWidth);\n    `,a=e?"outBackprop[1]":"outBackprop[2]",p=e?"outBackprop[2]":"outBackprop[3]",h=e?"row":"col",$=e?"col":"row",g=`\n      let inChannels = ${e?"outBackprop[3]":"outBackprop[1]"};\n      let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};\n      let outRow = ${h} / outWidth;\n      let outCol = ${h} % outWidth;\n\n      let WRow = ${$} / (filterDims[1] * inChannels);\n      let WCol = ${$} / inChannels % filterDims[1];\n      let xR = f32(outRow - pads[0] + dilation[0] * WRow) / f32(strides[0]);\n      let xC = f32(outCol - pads[1] + dilation[1] * WCol) / f32(strides[1]);\n      if (xR < 0.0 || xR >= f32(${a}) || fract(xR) > 0.0) {\n        return ${n}(0.0);\n      }\n      if (xC < 0.0 || xC >= f32(${p}) || fract(xC) > 0.0) {\n        return ${n}(0.0);\n      }\n      let iXR = i32(xR);\n      let iXC = i32(xC);\n      let xCh = ${$} % inChannels;\n      ${u}\n      return x[getIndexFromCoords4D(coord, vec4<i32>(uniforms.x_shape))/${o}];`,w=e?`\n      let col = colIn * ${o};\n      if (row < uniforms.dimAOuter && col < uniforms.dimInner) {\n        ${g}\n      }\n      return ${n}(0.0);`:`\n      let col = colIn * ${o};\n      if (row < uniforms.dimInner && col < uniforms.dimBOuter) {\n        ${g}\n      }\n      return ${n}(0.0);`,b=`\n      let col = colIn * ${o};\n      let inChannels = ${e?"outBackprop[3]":"outBackprop[1]"};\n      let coordX = filterDims.x - 1 - row / (filterDims[1] * inChannels);\n      let coordY = filterDims.y - 1 - (row / inChannels) % filterDims[1];\n      if (${e?"row < uniforms.dimInner && col < uniforms.dimBOuter":"row < uniforms.dimInner && col < uniforms.dimAOuter"}  && coordX >= 0 && coordY >= 0) {\n        let rowInner = row % inChannels;\n        let coord = vec4<i32>(coordX, coordY, col, rowInner);\n        ${s(o)}\n      }\n      return ${n}(0.0);\n      `,{activationFunction:v,applyActivation:I}=$t(r,n);return`\n      ${v}\n  fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${n} {\n    ${e?w:b}\n  }\n\n  fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${n} {\n    ${e?b:w}\n  }\n\n  fn mm_write(batch: i32, row : i32, colIn : i32, valueInput : ${n}) {\n    let col = colIn * ${o};\n    if (row < uniforms.dimAOuter && col < uniforms.dimBOuter) {\n      var value = valueInput;\n      let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};\n      ${d}\n      ${Yr(t)}\n      ${I}\n      result[getIndexFromCoords4D(coords, vec4<i32>(uniforms.result_shape))/${o}] = value;\n    }\n  }`},Vi=(e,t,r,o,n,s,u,d)=>{let a=t.format==="NHWC",p=a?e[0].dims[3]:e[0].dims[1],h=r[0],$=a?r[2]:r[3],g=a?r[1]:r[2],w=a?r[3]:r[1],b=a?p%4===0&&w%4===0:$%4===0&&w%4===0,v=a?w:$*g,I=a?$*g:w,x=b?[8,8,1]:[v<=4||I<=4?4:16,v>4&&I<=4?4:16,1],A=b?[4,4,1]:[v<=4?1:4,v>4&&I<=4?1:4,1],B=[Math.ceil(v/x[0]/A[0]),Math.ceil(I/x[1]/A[1]),Math.ceil(h/x[2]/A[2])];Pe("verbose",()=>`[conv_backprop_mm_webgpu] dispatch = ${B}`);let E=b?4:1,V=Math.max(x[0]*E,x[1]),P=b?4:1,z=[{type:"int32",data:o},{type:"int32",data:n},{type:"int32",data:s}],U=W("x",e[0].dataType,e[0].dims.length,P),F=W("w",e[1].dataType,e[1].dims.length,1),te=K("result",e[0].dataType,r.length,P),R=[U,F];z.push(...ne(e[0].dims)),z.push(...ne(e[1].dims));let j="";if(u){let pe=W("bias",e[2].dataType,e[2].dims.length,P);R.push(pe),z.push(...ne(e[2].dims)),j+=`\n        fn getBiasByOutputCoords(coords : vec4<i32>) -> ${b?"vec4<f32>":"f32"} {\n          return bias[coords.${a?"w":"y"}${b?"/ 4":""}];\n        }`}return z.push(...ne(r)),{name:"Conv2DTransposeMatMul",shaderCache:{hint:t.cacheKey},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:B[0],y:B[1],z:B[2]},programUniforms:z}),getShaderSource:pe=>`\n        ${Xr("uniforms.result_strides")}\n        ${pe.registerUniform("dimAOuter","i32").registerUniform("dimBOuter","i32").registerUniform("dimInner","i32").declareVariables(...R,te)};\n        const outBackprop : vec4<i32> = vec4<i32>(${e[0].dims.join(",")});\n        const filterDims : vec2<i32> = vec2<i32>(${t.kernelShape[a?1:2]}, ${t.kernelShape[a?2:3]});\n        const effectiveFilterDims : vec2<i32> = filterDims + vec2<i32>(\n              ${t.dilations[0]<=1?0:(t.kernelShape[a?1:2]-1)*(t.dilations[0]-1)},\n              ${t.dilations[1]<=1?0:(t.kernelShape[a?2:3]-1)*(t.dilations[1]-1)});\n        const pads : vec2<i32> = vec2<i32>(i32(effectiveFilterDims[0]) - 1 - (${t.pads[0]+t.pads[2]})/2,\n                                         i32(effectiveFilterDims[1]) - 1 - (${t.pads[1]+t.pads[3]})/2);\n        const strides : vec2<i32> = vec2<i32>(${t.strides[0]}, ${t.strides[1]});\n        const dilation : vec2<i32> = vec2<i32>(${t.dilations[0]}, ${t.dilations[1]});\n        const dimAOuter : i32 = ${o};\n        const dimBOuter : i32 = ${n};\n        const dimInner : i32 = ${s};\n        ${j}\n        ${ud(a,u,t,E)}\n        ${b?lr(A,x,"f32",void 0,!a,V):dr(A,x,"f32",void 0,!a,V,!1,void 0,d)}`}}});var ld,Un,Ui=q(()=>{"use strict";vt();ye();be();ld=(e,t,r,o,n,s,u=!1,d)=>{let a=r.format==="NHWC",p=a?1:2,h=a?2:3,$=a?3:1,g=D.size(o),w=u?2:1,b=r.group,v=t[1].dims,I=v[0]/b,x=v[1],A=`\n  fn setOutputAtIndex(flatIndex : u32, value : ${u?`vec4<${d}>`:d}) {\n    result[flatIndex] = ${u?`vec4<${d}>`:d}(value);\n  }`;n&&(A+=`\n    fn getBiasByOutputCoords(coords : vec4<u32>) -> ${u?`vec4<${d}>`:d} {\n      return bias[coords.${a?"w":"y"}${u?"/ 4":""}];\n    }`);let B=u?4:1,E=W("W",t[1].dataType,t[1].dims,B),V=W("Dy",t[0].dataType,t[0].dims,B),P=[V,E];n&&P.push(W("bias",t[2].dataType,[o[$]],B));let z=K("result",t[0].dataType,o,B),U=`{\n        let batch: u32 = ${s?"global_id.z":"workgroup_id.z"} / outShape[1];\n        let r = ${s?"global_id.z":"workgroup_id.z"} % outShape[1];\n        let c = ${s?"global_id.y":"workgroup_id.y"} * ${w};\n        let d1: u32 = ${s?"global_id.x":"workgroup_id.x"} * 4;\n\n        let dyCorner = vec2<i32>(i32(r), i32(c)) - vec2<i32>(pads);\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        var dotProd: array<vec4<${d}>, ${w}>;\n        for (var i = 0; i < ${w}; i++) {\n          dotProd[i] = vec4<${d}>(0.0);\n        }\n        for (var wR: u32 = 0; wR < filterDims[0]; wR = wR + 1) {\n          var dyR = (${d}(dyCorner.x) + ${d}(wR)) / ${d}(strides.x);\n          let wRPerm = filterDims[0] - 1 - wR;\n          if (dyR < 0.0 || dyR >= ${d}(outBackprop[1]) ||\n              fract(dyR) > 0.0 || wRPerm < 0) {\n            continue;\n          }\n          let idyR: u32 = u32(dyR);\n\n          for (var wC: u32 = 0; wC < filterDims[1]; wC = wC + 1) {\n            let dyC = (${d}(dyCorner.y) + ${d}(wC)) / ${d}(strides.y);\n            let dyC2 = (${d}(dyCorner.y) + 1.0 + ${d}(wC)) / ${d}(strides.y);\n            let wCPerm = filterDims[1] - 1 - wC;\n            if (wCPerm < 0) {\n              continue;\n            }\n            var bDyCVal = true;\n            var bDyCVal2 = true;\n            if (dyC < 0.0 || dyC >= ${d}(outBackprop[2]) ||\n                fract(dyC) > 0.0) {\n              bDyCVal = false;\n            }\n            if (dyC2 < 0.0 || dyC2 >= ${d}(outBackprop[2]) ||\n                fract(dyC2) > 0.0) {\n              bDyCVal2 = false;\n            }\n\n            let idyC: u32 = u32(dyC);\n            let idyC2: u32 = u32(dyC2);\n            if (bDyCVal && bDyCVal2) {\n              let d2Length = outBackprop[3];\n              for (var d2 :u32 = 0; d2 < d2Length; d2 = d2 + 4) {\n                let wValue0 = ${E.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};\n                let wValue1 = ${E.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};\n                let wValue2 = ${E.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};\n                let wValue3 = ${E.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};\n\n                var xValue = ${V.get("batch","idyR","idyC","d2")};\n                let tmpval = vec4<${d}>(dot(xValue, wValue0),\n                                      dot(xValue, wValue1),\n                                      dot(xValue, wValue2),\n                                      dot(xValue, wValue3));\n                dotProd[0] = dotProd[0] + tmpval;\n\n                xValue =  ${V.get("batch","idyR","idyC2","d2")};\n\n                dotProd[1] = dotProd[1] + vec4<${d}>(dot(xValue, wValue0),\n                                                    dot(xValue, wValue1),\n                                                    dot(xValue, wValue2),\n                                                    dot(xValue, wValue3));\n              }\n            } else if (bDyCVal) {\n              let d2Length = outBackprop[${$}];\n              for (var d2: u32 = 0; d2 < d2Length; d2 = d2 + 4) {\n                let wValue0 = ${E.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};\n                let wValue1 = ${E.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};\n                let wValue2 = ${E.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};\n                let wValue3 = ${E.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};\n\n                var xValue = ${V.get("batch","idyR","idyC","d2")};\n                let tmpval = vec4<${d}>(dot(xValue, wValue0),\n                                      dot(xValue, wValue1),\n                                      dot(xValue, wValue2),\n                                      dot(xValue, wValue3));\n                dotProd[0] = dotProd[0] + tmpval;\n              }\n            } else if (bDyCVal2) {\n              let d2Length = outBackprop[3];\n              for (var d2: u32 = 0; d2 < d2Length; d2 = d2 + 4) {\n                let wValue0 = ${E.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};\n                let wValue1 = ${E.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};\n                let wValue2 = ${E.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};\n                let wValue3 = ${E.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};\n\n                var xValue = ${V.get("batch","idyR","idyC2","d2")};\n                let tmpval = vec4<${d}>(dot(xValue, wValue0),\n                                      dot(xValue, wValue1),\n                                      dot(xValue, wValue2),\n                                      dot(xValue, wValue3));\n                dotProd[1] = dotProd[1] + tmpval;\n              }\n            }\n          }\n        }\n\n        for (var i: u32 = 0; i < ${w}; i = i + 1) {\n          let value = dotProd[i] + ${n?"bias[c+i]":"0.0"};\n          ${z.set("batch","r","c + i","d1","value")};\n        }\n      }`,F=`\n          let outputIndices = ${z.offsetToIndices("global_idx")};\n          let batch = ${z.indicesGet("outputIndices",0)};\n          let d1 = ${z.indicesGet("outputIndices",$)};\n          let r = ${z.indicesGet("outputIndices",p)};\n          let c = ${z.indicesGet("outputIndices",h)};\n          let dyCorner = vec2<i32>(i32(r), i32(c)) - pads;\n          let dyRCorner = dyCorner.x;\n          let dyCCorner = dyCorner.y;\n          let groupId = d1 / ${x};\n          let wOutChannel = d1 - groupId * ${x};\n          // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n          // ? = to be determined. : = across all values in that axis.\n          var dotProd = 0.0;\n          for (var wR: u32 = 0; wR < effectiveFilterDims.x; wR = wR + 1) {\n            if (wR % dilations.x != 0) {\n              continue;\n            }\n            let dyR = (${d}(dyRCorner) + ${d}(wR)) / ${d}(strides[0]);\n            let wRPerm = filterDims.x - 1 - wR / dilations.x;\n            if (dyR < 0.0 || dyR >= ${d}(outBackprop[${p}]) || fract(dyR) > 0.0 ||\n                wRPerm < 0) {\n              continue;\n            }\n            let idyR: u32 = u32(dyR);\n\n            for (var wC: u32 = 0; wC < effectiveFilterDims.y; wC = wC + 1) {\n              if (wC % dilations.y != 0) {\n                continue;\n              }\n              let dyC = (${d}(dyCCorner) + ${d}(wC)) / ${d}(strides.y);\n              let wCPerm = filterDims.y - 1 - wC / dilations.y;\n              if (dyC < 0.0 || dyC >= ${d}(outBackprop[${h}]) ||\n                  fract(dyC) > 0.0 || wCPerm < 0) {\n                continue;\n              }\n              let idyC: u32 = u32(dyC);\n              var inputChannel = groupId * ${I};\n              for (var d2: u32 = 0; d2 < ${I}; d2 = d2 + 1) {\n                let xValue = ${a?V.get("batch","idyR","idyC","inputChannel"):V.get("batch","inputChannel","idyR","idyC")};\n                let wValue = ${E.get("inputChannel","wOutChannel","u32(wRPerm)","u32(wCPerm)")};\n                dotProd = dotProd + xValue * wValue;\n                inputChannel = inputChannel + 1;\n              }\n            }\n          }\n          let value = dotProd + ${n?"bias[d1]":"0.0"};\n          ${z.setByOffset("global_idx","value")};\n        `;return`\n  ${e.declareVariables(...P,z)}\n  ${A}\n  const outShape : vec4<u32> = vec4<u32>(${o.join(",")});\n  const outBackprop : vec4<u32> = vec4<u32>(${t[0].dims.join(",")});\n  const strides : vec2<u32> = vec2<u32>(${r.strides[0]}, ${r.strides[1]});\n  const filterDims : vec2<u32> = vec2<u32>(${r.kernelShape[a?1:2]}, ${r.kernelShape[a?2:3]});\n  const dilations : vec2<u32> = vec2<u32>(${r.dilations[0]}, ${r.dilations[1]});\n  const effectiveFilterDims : vec2<u32> = filterDims + vec2<u32>(\n          ${r.dilations[0]<=1?0:(r.kernelShape[a?1:2]-1)*(r.dilations[0]-1)},\n          ${r.dilations[1]<=1?0:(r.kernelShape[a?2:3]-1)*(r.dilations[1]-1)});\n  const pads : vec2<i32> = vec2<i32>(i32(effectiveFilterDims[0]) - 1 - (${r.pads[0]+r.pads[2]})/2,\n                                     i32(effectiveFilterDims[1]) - 1 - (${r.pads[1]+r.pads[3]})/2);\n    ${e.mainStart()}\n    ${e.guardAgainstOutOfBoundsWorkgroupSizes(g)};\n  ${u?U:F}}`},Un=(e,t,r)=>{let o=e.length>2,n=t.outputShape,s=D.size(n),u=[Math.ceil(s/64),1,1];Pe("verbose",()=>`[conv2d_backprop_webgpu] dispatch = ${u}`);let d=Te(e[0].dataType);return{name:"ConvTranspose2D",shaderCache:{hint:t.cacheKey},getRunData:()=>({dispatchGroup:{x:u[0],y:u[1],z:u[2]},outputs:[{dims:r?r(n):n,dataType:e[0].dataType}]}),getShaderSource:a=>ld(a,e,t,n,o,u[1]===1&&u[2]===1,!1,d)}}});var dd,cd,pd,Ni,Hi,md,fd,hd,gd,Gi,Li=q(()=>{"use strict";Oe();Wi();Ui();Ot();Wt();dd=(e,t,r,o,n,s)=>(e-1)*t+r+(o-1)*n+1-s,cd=(e,t,r,o,n)=>{let s=Math.floor(e/2);t==="SAME_UPPER"?(r[o]=s,r[n]=e-s):t==="SAME_LOWER"&&(r[o]=e-s,r[n]=s)},pd=(e,t,r,o,n,s,u,d,a,p)=>{let h=e.length-2,$=p.length===0;if(a.length===0)for(let b=0;b<h;++b)a.push(0);let g=e[0],w=t[d?3:1]*n;for(let b=0,v=e.length-h-(d?1:0);b<h;++b,++v){let I=e[v],x=$?I*u[b]:p[b],A=dd(I,u[b],s[b],t[v],r[b],x);cd(A,o,s,b,b+h),$&&p.push(u[b]*(I-1)+a[b]+(t[v]-1)*r[b]+1-s[b]-s[b+h])}p.splice(0,0,g),p.splice(d?3:1,0,w)},Ni=(e,t)=>{let r=e.kernelShape.slice();if(e.kernelShape.length===0||e.kernelShape.reduce((g,w)=>g*w,1)===0){r.length=0;for(let g=2;g<t[1].dims.length;++g)r.push(t[1].dims[g])}let o=e.format==="NHWC";r.splice(0,0,t[1].dims[0]),r.splice(o?3:1,0,t[1].dims[1]);let n=e.pads.slice(),s=e.outputShape.slice(),u=e.outputPadding.slice(),d=t[0].dims,a=e.dilations.slice();if(a.reduce((g,w)=>g+w,0)===0){let g=t[0].dims.length-2;a=new Array(g).fill(1)}let p=e.strides.slice();if(p.reduce((g,w)=>g+w,0)===0){let g=t[0].dims.length-2;p=new Array(g).fill(1)}pd(d,r,a,e.autoPad,e.group,n,p,o,u,s);let h=Object.assign({},e),$=e.cacheKey+[r.join("n,"),n.join(","),p.join(","),u.join(","),s.join(","),a.join(",")].join("_");return Object.assign(h,{kernelShape:r,pads:n,outputPadding:u,outputShape:s,dilations:a,strides:p,cacheKey:$}),h},Hi=e=>{let t=Kr(e),r=e.format,o=["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][typeof e.autoPad>"u"?0:e.autoPad],n=e.dilations,s=e.group,u=e.kernelShape,d=e.pads,a=e.strides,p=e.wIsConst(),h=e.outputPadding,$=e.outputShape;return X({autoPad:o,format:r,dilations:n,group:s,kernelShape:u,outputPadding:h,outputShape:$,pads:d,strides:a,wIsConst:p,...t})},md=(e,t)=>{if(!e||e.length!==2&&e.length!==3)throw new Error("Conv requires 2 or 3 inputs");if(e[0].dims.length!==4&&e[0].dims.length!==3)throw new Error("currently only support 2-dimensional conv");if(e[0].dims.length!==e[1].dims.length)throw new Error("filter does not have same dimension as input");let r=e[0].dims[t.format==="NHWC"?e[0].dims.length-1:1],o=e[1].dims[0];if(r!==o)throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");let n=e[1].dims[1]*t.group;if(e.length===3&&(e[2].dims.length!==1||e[2].dims[0]!==n))throw new Error("invalid bias");let s=e[0].dims.length-2;if(t.dilations.reduce((h,$)=>h+$,0)>0&&t.dilations.length!==s)throw new Error(`dilations should be ${s}D`);if(t.strides.reduce((h,$)=>h+$,0)>0&&t.strides.length!==s)throw new Error(`strides should be ${s}D`);if(t.pads.reduce((h,$)=>h+$,0)>0&&t.pads.length!==s*2)throw new Error(`pads should be ${s*2}D`);if(t.outputPadding.length!==s&&t.outputPadding.length!==0)throw new Error(`output_padding should be ${s}D`);if(t.kernelShape.reduce((h,$)=>h+$,0)>0&&t.kernelShape.length!==0&&t.kernelShape.length!==e[1].dims.length-2)throw new Error("invalid kernel shape");if(t.outputShape.length!==0&&t.outputShape.length!==e[0].dims.length-2)throw new Error("invalid output shape")},fd=[2,3,1,0],hd=(e,t,r)=>{let o=Ni(r,t),n=r.format==="NHWC",s=o.outputShape,u=s[n?3:1],d=t[0].dims[n?3:1];if(o.group!==1||u===1&&d===1){e.compute(Un(t,o));return}let a=s[n?1:2],p=s[n?2:3],h=t[1].dims[2],$=t[1].dims[3],g=n?a*p:u,w=n?u:a*p,b=h*$*d,v=!0,I=e.kernelCustomData.wT??e.compute(tt(t[1],fd),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=I);let x=[t[0],I],A=t.length===3;A&&(!n&&t[2].dims.length===1?x.push(t[2].reshape([t[2].dims[0],1,1])):x.push(t[2])),e.compute(Vi(x,o,s,g,w,b,A,v),{inputs:x})},gd=(e,t)=>{let r=t.format==="NHWC",o=[e.inputs[0].reshape(r?[e.inputs[0].dims[0],1,e.inputs[0].dims[1],e.inputs[0].dims[2]]:[e.inputs[0].dims[0],e.inputs[0].dims[1],1,e.inputs[0].dims[2]]),e.inputs[1].reshape([e.inputs[1].dims[0],e.inputs[1].dims[1],1,e.inputs[1].dims[2]])];o.length===3&&o.push(e.inputs[2]);let n=t.kernelShape;(n.length===0||n[0]===0)&&(n=[e.inputs[1].dims[2]]);let s=t.dilations;(s.length===0||s[0]===0)&&(s=[1]);let u=t.strides;(u.length===0||u[0]===0)&&(u=[1]);let d=t.pads;d.length===0&&(d=[0,0]),d=[0,d[0],0,d[1]],u=[1].concat(u),s=[1].concat(s),n=[1].concat(n);let a=Ni({...t,pads:d,strides:u,dilations:s,kernelShape:n},o);e.compute(Un(o,a,p=>r?[p[0],p[2],p[3]]:[p[0],p[1],p[3]]))},Gi=(e,t)=>{md(e.inputs,t),e.inputs[0].dims.length===3?gd(e,t):hd(e,e.inputs,t)}});var yd,Fi,ji,qi=q(()=>{"use strict";ze();ye();Oe();be();yd=(e,t,r,o)=>{let n=D.size(t),s=t.length,u=W("input",e,s),d=K("output",e,s),a=r.dataType===6?r.getInt32Array()[0]:Number(r.getBigInt64Array()[0]),p=D.normalizeAxis(a,s),h=$=>{let g=` i32(${u.indicesGet("inputIndices","uniforms.axis")}) `,w=s===1?"i32(uniforms.input_shape)":"i32(uniforms.input_shape[uniforms.axis])",b=o.reverse?g+(o.exclusive?" + 1":""):"0",v=o.reverse?w:g+(o.exclusive?"":" + 1");return`\n                ${$.registerUniform("outputSize","u32").registerUniform("axis","u32").declareVariables(u,d)}\n                ${$.mainStart()}\n                  ${$.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n                  var inputIndices = ${d.offsetToIndices("global_idx")};\n                  var sum = 0.0;\n                  let first : i32 = ${b};\n                  let last : i32 = ${v};\n                  for (var i : i32 = first; i < last; i++) {\n                    ${u.indicesSet("inputIndices","uniforms.axis","u32(i)")};\n                    sum = sum + ${u.getByIndices("inputIndices")};\n                  }\n                  ${d.setByOffset("global_idx","sum")};\n                }`};return{name:"CumSum",shaderCache:{hint:o.cacheKey,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:t,dataType:e}],dispatchGroup:{x:Math.ceil(n/64)},programUniforms:[{type:"uint32",data:n},{type:"int32",data:p},...ne(t),...ne(t)]}),getShaderSource:h}},Fi=(e,t)=>{let r=e.inputs[0].dims,o=e.inputs[0].dataType,n=e.inputs[1];e.compute(yd(o,r,n,t),{inputs:[0]})},ji=e=>{let t=e.exclusive===1,r=e.reverse===1;return X({exclusive:t,reverse:r})}});var Nn,Jr,Ki,bd,wd,Hn,Gn,Yi,vd,Zi,Xi,Qi=q(()=>{"use strict";ye();Oe();be();Nn="[a-zA-Z]|\\\\.\\\\.\\\\.",Jr="("+Nn+")+",Ki="^"+Jr+"$",bd="("+Jr+",)*"+Jr,wd="^"+bd+"$",Hn=class{constructor(t=-1){this.symbolToIndices=new Map,this.inputIndex=t}addSymbol(t,r){let o=this.symbolToIndices.get(t);o===void 0?o=[r]:o.push(r),this.symbolToIndices.set(t,o)}},Gn=class{constructor(t,r){this.equation=r;this.hasEllipsis=!1,this.symbolToInfo=new Map,this.lhs=new Array,this.outputDims=[];let[o,n]=r.includes("->")?r.split("->",2):[r,""];if(!o.match(RegExp(wd)))throw new Error("Invalid LHS term");if(o.split(",").forEach((d,a)=>{let p=t[a].dims.slice();if(!d.match(RegExp(Ki)))throw new Error("Invalid LHS term");let h=this.processTerm(d,!0,p,a);this.lhs.push(h)}),n==="")n+=[...this.symbolToInfo.entries()].filter(([d,a])=>a.count===1||d==="...").map(([d])=>d).join("");else if(!n.match(RegExp(Jr)))throw new Error("Invalid RHS");n.match(RegExp(Nn,"g"))?.forEach(d=>{if(d==="...")this.outputDims=this.outputDims.concat(this.ellipsisDims);else{let a=this.symbolToInfo.get(d);if(a===void 0)throw new Error("Invalid RHS symbol");this.outputDims.push(a.dimValue)}}),this.rhs=this.processTerm(n,!1,this.outputDims)}addSymbol(t,r,o){let n=this.symbolToInfo.get(t);if(n!==void 0){if(n.dimValue!==r&&n.count!==1)throw new Error("Dimension mismatch");n.count++,n.inputIndices.push(o)}else n={count:1,dimValue:r,inputIndices:[o]};this.symbolToInfo.set(t,n)}processTerm(t,r,o,n=-1){let s=o.length,u=!1,d=[],a=0;if(!t.match(RegExp(Ki))&&!r&&t!=="")throw new Error("Invalid LHS term");let p=t.match(RegExp(Nn,"g")),h=new Hn(n);return p?.forEach(($,g)=>{if($==="..."){if(u)throw new Error("Only one ellipsis is allowed per input term");u=!0;let w=s-p.length+1;if(w<0)throw new Error("Ellipsis out of bounds");if(d=o.slice(a,a+w),this.hasEllipsis){if(this.ellipsisDims.length!==d.length||this.ellipsisDims.toString()!==d.toString())throw new Error("Ellipsis dimensions mismatch")}else if(r)this.hasEllipsis=!0,this.ellipsisDims=d;else throw new Error("Ellipsis must be specified in the LHS");for(let b=0;b<d.length;b++){let v=String.fromCharCode("0".charCodeAt(0)+b);h.addSymbol(v,g+b),this.addSymbol(v,o[a++],n)}}else h.addSymbol($,g+(this.hasEllipsis?this.ellipsisDims.length-1:0)),this.addSymbol($,o[a++],n)}),h}},Yi=e=>e+"_max",vd=(e,t,r,o,n)=>{let u=t.map((w,b)=>e[b]?w.length:w).map((w,b)=>W(`input${b}`,r,w)),d=D.size(n),a=ke(n.length),p=a?n.length:n,h=K("output",r,p),$=[...o.symbolToInfo.keys()].filter(w=>!o.rhs.symbolToIndices.has(w)),g=w=>{let b=[],v="var prod = 1.0;",I="var sum = 0.0;",x="sum += prod;",A=[],B=[],E=[],V=[],P=o.symbolToInfo.size===o.rhs.symbolToIndices.size;o.symbolToInfo.forEach((U,F)=>{if(o.rhs.symbolToIndices.has(F)){let te=o.rhs.symbolToIndices.get(F)?.[0];te!==void 0&&o.lhs.forEach((R,j)=>{if(U.inputIndices.includes(j)){let pe=R.symbolToIndices.get(F);if(pe===void 0)throw new Error("Invalid symbol error");pe.forEach(Q=>{b.push(`${u[j].indicesSet(`input${j}Indices`,Q,h.indicesGet("outputIndices",te))}`)})}})}else o.lhs.forEach((te,R)=>{if(U.inputIndices.includes(R)){let j=te.symbolToIndices.get(F);if(j===void 0)throw new Error("Invalid symbol error");j.forEach(pe=>{A.push(`${u[R].indicesSet(`input${R}Indices`,pe,`${F}`)}`)}),V.push(`prod *= ${u[R].getByIndices(`input${R}Indices`)};`)}}),B.push(`for(var ${F}: u32 = 0; ${F} < uniforms.${Yi(F)}; ${F}++) {`),E.push("}")});let z=P?[...b,`let sum = ${u.map((U,F)=>U.getByIndices(`input${F}Indices`)).join(" * ")};`]:[...b,I,...B,...A,v,...V,x,...E];return`\n            ${w.registerUniforms($.map(U=>({name:`${Yi(U)}`,type:"u32"}))).registerUniform("outputSize","u32").declareVariables(...u,h)}\n\n            ${w.mainStart()}\n            ${w.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n            var outputIndices = ${h.offsetToIndices("global_idx")};\n            ${u.map((U,F)=>`var input${F}Indices: ${u[F].type.indices};`).join(`\n`)}\n            ${z.join(`\n`)};\n            ${h.setByOffset("global_idx","sum")};\n          }`};return{name:"Einsum",shaderCache:{hint:o.equation,inputDependencies:e.map(w=>w?"rank":"dims")},getRunData:()=>{let w=$.filter(v=>o.symbolToInfo.has(v)).map(v=>({type:"uint32",data:o.symbolToInfo.get(v)?.dimValue||0}));w.push({type:"uint32",data:d});let b=t.filter((v,I)=>e[I]).map((v,I)=>[...ne(v)]).reduce((v,I)=>v.concat(I),w);return a&&b.push(...ne(n)),{outputs:[{dims:n,dataType:r}],dispatchGroup:{x:Math.ceil(d/64)},programUniforms:b}},getShaderSource:g}},Zi=(e,t)=>{let r=new Gn(e.inputs,t.equation),o=e.inputs.map((u,d)=>ke(u.dims.length)),n=r.outputDims,s=e.inputs.map((u,d)=>u.dims);e.compute(vd(o,s,e.inputs[0].dataType,r,n))},Xi=e=>{let t=e.equation.replace(/\\s+/g,"");return X({equation:t})}});var $d,Ji,Sd,xd,es,ts=q(()=>{"use strict";ze();ye();be();$d=e=>{if(!e||e.length!==2)throw new Error("Expand requires 2 input.");let t=e[0].dims,r=Array.from(e[1].getBigInt64Array(),Number),o=r.length<t.length?0:r.length-t.length,n=t.length<r.length?0:t.length-r.length;for(;o<r.length&&n<t.length;++o,++n)if(r[o]!==t[n]&&r[o]!==1&&t[n]!==1)throw new Error("Expand requires shape to be broadcastable to input")},Ji=(e,t)=>{let r=e.length-t.length,o=[];for(let n=0;n<r;++n)o.push(e[n]);for(let n=0;n<t.length;++n)o.push(t[n]===1?e[n+r]:t[n]);return o},Sd=(e,t)=>e.length>t.length?Ji(e,t):Ji(t,e),xd=e=>{let t=e[0].dims,r=Array.from(e[1].getBigInt64Array(),Number),o=Sd(t,r),n=e[0].dataType,s=n===9?4:1,u=D.size(o)/s,d=ke(t.length),a=ke(o.length),p=$=>{let g=d?t.length:t,w=a?o.length:o,b=W("input",n,g,s),v=K("output",n,w,s),I;if(n===9){let x=(A,B,E="")=>`\n          let outputIndices${B} = ${v.offsetToIndices(`outputOffset + ${B}u`)};\n          let offset${B} = ${b.broadcastedIndicesToOffset(`outputIndices${B}`,v)};\n          let index${B} = offset${B} / 4u;\n          let component${B} = offset${B} % 4u;\n          ${A}[${B}] = ${E}(${b.getByOffset(`index${B}`)}[component${B}]);\n        `;I=`\n        let outputOffset = global_idx * ${s};\n        var data = vec4<u32>(0);\n        ${x("data",0,"u32")}\n        ${x("data",1,"u32")}\n        ${x("data",2,"u32")}\n        ${x("data",3,"u32")}\n        ${v.setByOffset("global_idx","data")}\n      }`}else I=`\n        let outputIndices = ${v.offsetToIndices("global_idx")};\n        let inputOffset = ${b.broadcastedIndicesToOffset("outputIndices",v)};\n        ${v.setByOffset("global_idx",b.getByOffset("inputOffset"))}\n      }`;return`\n    ${$.registerUniform("vec_size","u32").declareVariables(b,v)}\n    ${$.mainStart()}\n    ${$.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}\n    ${I}`},h=[{type:"uint32",data:u}];return d&&h.push(...ne(t)),a&&h.push(...ne(o)),{name:"Expand",shaderCache:{hint:`${o.length}`,inputDependencies:[d?"rank":"dims"]},getShaderSource:p,getRunData:()=>({outputs:[{dims:o,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(u/64)},programUniforms:h})}},es=e=>{$d(e.inputs),e.compute(xd(e.inputs),{inputs:[0]})}});var Cd,Id,rs,ns,os=q(()=>{"use strict";ze();ye();Oe();be();Cd=e=>{if(!e||e.length!==2)throw new Error("Gather requires 2 inputs.")},Id=(e,t)=>{let r=e[0].dims,o=e[1].dims,n=r.length,s=D.normalizeAxis(t.axis,n),u=r.slice(0);u.splice(s,1,...o);let d=r[s],a=e[0].dataType===9?4:1,p=D.size(u)/a,h=ke(e[0].dims.length),$=h?e[0].dims.length:e[0].dims,g=ke(e[1].dims.length),w=g?e[1].dims.length:e[1].dims,b=ke(u.length),v=b?u.length:u,I=[{type:"uint32",data:p},{type:"int32",data:d},{type:"uint32",data:s}];h&&I.push(...ne(e[0].dims)),g&&I.push(...ne(e[1].dims)),b&&I.push(...ne(u));let x=[];x.push(h?"rank":"dims"),x.push(g?"rank":"dims");let A=B=>{let E=W("data",e[0].dataType,$,a),V=W("inputIndices",e[1].dataType,w),P=K("output",e[0].dataType,v,a),z=F=>{let te=o.length,R=`var indicesIndices${F}  = ${V.type.indices}(0);`;for(let j=0;j<te;j++)R+=`${te>1?`indicesIndices${F}[${j}]`:`indicesIndices${F}`} = ${u.length>1?`outputIndices${F}[uniforms.axis + ${j}]`:`outputIndices${F}`};`;R+=`\n          var idx${F} = ${V.getByIndices(`indicesIndices${F}`)};\n          if (idx${F} < 0) {\n            idx${F} = idx${F} + uniforms.axisDimLimit;\n          }\n          var dataIndices${F} = ${E.type.indices}(0);\n        `;for(let j=0,pe=0;j<n;j++)j===s?(R+=`${n>1?`dataIndices${F}[${j}]`:`dataIndices${F}`} = u32(idx${F});`,pe+=te):(R+=`${n>1?`dataIndices${F}[${j}]`:`dataIndices${F}`} = ${u.length>1?`outputIndices${F}[${pe}]`:`outputIndices${F}`};`,pe++);return R},U;if(e[0].dataType===9){let F=(te,R,j="")=>`\n          let outputIndices${R} = ${P.offsetToIndices(`outputOffset + ${R}u`)};\n          ${z(R)};\n          let offset${R} = ${E.indicesToOffset(`dataIndices${R}`)};\n          let index${R} = offset${R} / 4u;\n          let component${R} = offset${R} % 4u;\n          ${te}[${R}] = ${j}(${E.getByOffset(`index${R}`)}[component${R}]);\n        `;U=`\n        let outputOffset = global_idx * ${a};\n        var value = vec4<u32>(0);\n        ${F("value",0,"u32")}\n        ${F("value",1,"u32")}\n        ${F("value",2,"u32")}\n        ${F("value",3,"u32")}\n        ${P.setByOffset("global_idx","value")}\n      `}else U=`\n      let outputIndices = ${P.offsetToIndices("global_idx")};\n      ${z("")};\n      let value = ${E.getByIndices("dataIndices")};\n      ${P.setByOffset("global_idx","value")};\n      `;return`\n      ${B.registerUniform("outputSize","u32").registerUniform("axisDimLimit","i32").registerUniform("axis","u32").declareVariables(E,V,P)}\n      ${B.mainStart()}\n        ${B.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n        ${U}\n      }`};return{name:"Gather",shaderCache:{hint:t.cacheKey,inputDependencies:x},getRunData:()=>({outputs:[{dims:u,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(p/64)},programUniforms:I}),getShaderSource:A}},rs=e=>X({axis:e.axis}),ns=(e,t)=>{let r=e.inputs;Cd(r),e.compute(Id(e.inputs,t))}});var Ad,Td,as,is,ss=q(()=>{"use strict";ye();Oe();be();Ad=e=>{if(!e||e.length!==2)throw new Error("GatherElements requires 2 inputs.");if(e[0].dims.length<1)throw new Error("GatherElements requires that the data input be rank >= 1.");if(e[0].dims.length!==e[1].dims.length)throw new Error(`GatherElements requires that the data input and\n                     indices input tensors be of same rank.`)},Td=(e,t)=>{let r=e[0].dims,o=e[0].dataType,n=r.length,s=e[1].dims,u=e[1].dataType,d=D.normalizeAxis(t.axis,n),a=r[d],p=s.slice(0),h=D.size(p),$=W("input",o,n),g=W("indicesInput",u,s.length),w=K("output",o,p.length),b=[{type:"uint32",data:h},{type:"int32",data:a},{type:"uint32",data:d}];return b.push(...ne(r)),b.push(...ne(s)),b.push(...ne(p)),{name:"GatherElements",shaderCache:{inputDependencies:["rank","rank"]},getRunData:()=>({outputs:[{dims:p,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(h/64)},programUniforms:b}),getShaderSource:x=>`\n      ${x.registerUniform("outputSize","u32").registerUniform("axisDimLimit","i32").registerUniform("axis","u32").declareVariables($,g,w)}\n      ${x.mainStart()}\n      ${x.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n\n      let outputIndices = ${w.offsetToIndices("global_idx")};\n\n      var idx = ${g.getByOffset("global_idx")};\n      if (idx < 0) {\n        idx = idx + uniforms.axisDimLimit;\n      }\n      var inputIndices = ${$.type.indices}(outputIndices);\n      ${$.indicesSet("inputIndices","uniforms.axis","u32(idx)")};\n      let value = ${$.getByIndices("inputIndices")};\n\n      ${w.setByOffset("global_idx","value")};\n  }`}},as=e=>X({axis:e.axis}),is=(e,t)=>{let r=e.inputs;Ad(r),e.compute(Td(e.inputs,t))}});var _d,Ed,Od,us,ls,ds=q(()=>{"use strict";ye();Oe();be();_d=e=>{if(!e)throw new Error("Input is missing");if(e.length<2||e.length>3)throw new Error("Invaid input number.");if(e.length===3&&e[2].dims.length>2)throw new Error("Invalid input shape of C");if(e[0].dataType!==e[1].dataType||e.length===3&&e[0].dataType!==e[2].dataType)throw new Error("Input types are mismatched")},Ed=(e,t,r)=>{if(r.length===0)return"0u";let o=r.length===1&&e!==1||r.length===2&&r[0]!==e,n=r[r.length-1]!==t,s="0u";return o||(s+=`+ m * ${r[r.length-1]}u`),n||(s+="+n"),s},Od=(e,t)=>{let r=e[0].dims.slice(),o=e[1].dims.slice(),[n,s,u]=Dr.getShapeOfGemmResult(r,t.transA,o,t.transB,e.length===3?e[2].dims:void 0),d=[n,s];if(!d)throw new Error("Can\'t use gemm on the given tensors");let a=D.size(d),p="";t.transA&&t.transB?p="value += a[k * M + m] * b[n * K + k];":t.transA&&!t.transB?p="value += a[k * M + m] * b[k * N + n];":!t.transA&&t.transB?p="value += a[m * K + k] * b[n * K + k];":!t.transA&&!t.transB&&(p="value += a[m * K + k] * b[k * N + n];");let h=Te(e[0].dataType),$=t.alpha===1?"":"value *= alpha;",g=e.length===3?`value += beta * c[${Ed(n,s,e[2].dims)}];`:"",w=[`@group(0) @binding(0) var<storage, read> a : array<${h}>;`,`@group(0) @binding(1) var<storage, read> b : array<${h}>;`];e.length===3&&w.push(`@group(0) @binding(2) var<storage, read> c : array<${h}>;`);let b=v=>`\n  const M: u32 = ${n}u;\n  const N: u32 = ${s}u;\n  const K: u32 = ${u}u;\n  const alpha = ${h}(${t.alpha});\n  const beta = ${h}(${t.beta});\n\n  ${w.join(`\n`)}\n  @group(0) @binding(${e.length}) var<storage, read_write> output : array<${h}>;\n\n  ${v.mainStart()}\n    ${v.guardAgainstOutOfBoundsWorkgroupSizes(a)}\n\n    let m = global_id.x / N;\n    let n = global_id.x % N;\n\n    var value = ${h}(0);\n    for (var k: u32 = 0u; k<${u}u; k++) {\n      ${p}\n    }\n\n    ${$}\n    ${g}\n    output[global_id.x] = value;\n\n  }`;return{name:"Gemm",shaderCache:{hint:t.cacheKey},getRunData:()=>({outputs:[{dims:d,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(a/64)}}),getShaderSource:b}},us=(e,t)=>{_d(e.inputs),e.compute(Od(e.inputs,t))},ls=e=>X(e)});var kd,Pd,Rd,Bd,cs,ps,ms=q(()=>{"use strict";ze();ye();Oe();be();kd={name:"InstanceNormalization"},Pd=(e,t)=>{let r=e[0].dims,o=r,n=2,s=D.sizeToDimension(r,n),u=D.sizeFromDimension(r,n),d=r[1],a=W("x",e[0].dataType,[r[0],r[1],u]),p=W("scale",e[1].dataType,e[1].dims),h=W("bias",e[2].dataType,e[2].dims),$=K("output",e[0].dataType,[r[0],r[1],u]),g=[a,p,h,$],w=a.type.value,b=64,v=I=>`\n\n  const C: u32 = ${d};\n  const normSize: u32 = ${u};\n  const epsilon: f32 = ${t.epsilon};\n  var<workgroup> meanShared : ${w};\n  var<workgroup> squaredNormShared : ${w};\n  var<workgroup> workgroupShared : array<${w}, ${b}>;\n  const workgroupSize = ${b}u;\n  ${I.declareVariables(...g)}\n  ${I.mainStart(b)}\n    let norm = global_idx / workgroupSize;\n    let batch = norm / C;\n    let channel = norm % C;\n    let localIndex = local_id.x;\n\n    // initialize workgroup memory\n    var initial: ${w} = 0;\n    for (var h = localIndex; h < normSize; h += workgroupSize) {\n      initial = initial + ${a.get("batch","channel","h")};\n    }\n    workgroupShared[localIndex] = initial;\n    workgroupBarrier();\n\n    // Calculate the mean of current channel data.\n    for (var currSize = workgroupSize >> 1;  currSize > 0; currSize = currSize >> 1) {\n      if (localIndex < currSize) {\n        workgroupShared[localIndex] = workgroupShared[localIndex] + workgroupShared[localIndex + currSize];\n      }\n      workgroupBarrier();\n    }\n    if (localIndex == 0) {\n      meanShared = workgroupShared[0] / ${w}(normSize);\n    }\n    workgroupBarrier();\n\n    // reinitialize workgroup memory.\n    initial = 0;\n    for (var h = localIndex; h < normSize; h += workgroupSize) {\n      let deviation =  ${a.get("batch","channel","h")} - meanShared;\n      initial = initial + deviation * deviation;\n    }\n    workgroupShared[localIndex] = initial;\n    workgroupBarrier();\n\n    // Calculate the sum of square of deviation of current channel data.\n    for (var currSize = workgroupSize >> 1;  currSize > 0; currSize = currSize >> 1) {\n      if (localIndex < currSize) {\n        workgroupShared[localIndex] = workgroupShared[localIndex] + workgroupShared[localIndex + currSize];\n      }\n      workgroupBarrier();\n    }\n    if (localIndex == 0) {\n      squaredNormShared = workgroupShared[0];\n    }\n    workgroupBarrier();\n\n    let invStdDev = 1 / sqrt(squaredNormShared / ${w}(normSize) + epsilon);\n    let channelScale = invStdDev * ${p.getByOffset("channel")};\n    let channelShift = ${h.getByOffset("channel")} - meanShared * channelScale;\n    for (var h = localIndex; h < normSize; h += workgroupSize) {\n      let value = ${a.get("batch","channel","h")} * channelScale + channelShift;\n      ${$.set("batch","channel","h","value")};\n    }\n  }`;return{...kd,shaderCache:{hint:t.cacheKey},getRunData:()=>({outputs:[{dims:o,dataType:e[0].dataType}],dispatchGroup:{x:s}}),getShaderSource:v}},Rd=(e,t,r,o,n,s,u,d)=>{let a=Ye(u),p=W("input",t.dataType,t.dims,a),h=W("scale",r.dataType,r.dims,a),$=W("bias",o.dataType,o.dims,a),g=64,w=a===1?"vec2f":`mat2x${a}f`,b=a===1?"f32":`vec${a}f`,v=(V,P)=>`${w}(${V}, ${P})`,I=n*u/a,x=Math.ceil(s/g),A=V=>`\n  const H: u32 = ${s};\n  const C: u32 = ${u/a};\n  const imageSize: u32 = ${s*u/a};\n\n  ${V.declareVariables(p)}\n  @group(0) @binding(1) var<storage, read_write> output : array<${w}>;\n\n  ${V.mainStart(g)}\n    let currentImageNumber = global_idx / ${g} / C;\n    let currentChannelNumber = (global_idx / ${g}) % C;\n    let wgId = global_idx % ${g};\n    let wgOffset = wgId * ${x};\n    if (wgOffset >= H) {\n        return;\n    }\n    let wgMax = min(wgOffset + ${x}, H);\n\n    let offset = currentImageNumber * imageSize + currentChannelNumber;\n    var sum = ${Ge("f32",a)};\n    var squaredSum = ${Ge("f32",a)};\n    for (var i: u32 = wgOffset; i < wgMax; i++) {\n        let value = ${b}(input[offset + i * C]);\n        sum += value;\n        squaredSum += value * value;\n    }\n    output[global_idx] = ${v("sum","squaredSum")};\n  }`,B=e.compute({name:"InstanceNormComputeMean",shaderCache:{hint:JSON.stringify({components:a,n,h:s,c:u})},getRunData:()=>({outputs:[{dims:[n,u,g,2],dataType:1}],dispatchGroup:{x:n*u/a}}),getShaderSource:A},{inputs:[t],outputs:[-1]})[0],E=V=>`\n  const H: u32 = ${s};\n  const C: u32 = ${u/a};\n  const imageSize: u32 = ${g*u/a};\n  const epsilon: f32 = ${d};\n\n  @group(0) @binding(0) var<storage, read> input : array<${w}>;\n  @group(0) @binding(1) var<storage, read> scale : array<${h.type.storage}>;\n  @group(0) @binding(2) var<storage, read> bias : array<${$.type.storage}>;\n  @group(0) @binding(3) var<storage, read_write> output : array<${w}>;\n\n  ${V.mainStart()}\n    ${V.guardAgainstOutOfBoundsWorkgroupSizes(I)}\n    let currentImageNumber = global_idx / C;\n    let currentChannelNumber = global_idx % C;\n\n    let offset = currentImageNumber * imageSize;\n    var sum = ${Ge("f32",a)};\n    var squaredSum = ${Ge("f32",a)};\n    for (var i: u32 = 0; i < ${g}; i++) {\n        let value = input[offset + i + currentChannelNumber * ${g}];\n        sum += value[0];\n        squaredSum += value[1];\n    }\n    sum = sum / f32(H);\n    squaredSum = squaredSum / f32(H);\n    let invStdDev = 1 / sqrt(squaredSum - sum * sum + epsilon);\n    let channelScale = invStdDev * ${b}(scale[currentChannelNumber]);\n    let channelShift = ${b}(bias[currentChannelNumber]) - sum * channelScale;\n\n    output[global_idx] = ${v("channelScale","channelShift")};\n  }`;return e.compute({name:"InstanceNormComputeChannelScaleShift",shaderCache:{hint:JSON.stringify({components:a,n,h:s,c:u,epsilon:d})},getRunData:()=>({outputs:[{dims:[n,u,2],dataType:1}],dispatchGroup:{x:Math.ceil(I/64)}}),getShaderSource:E},{inputs:[B,r,o],outputs:[-1]})[0]},Bd=(e,t,r)=>{let o=t[0].dims,n=o,s=o[0],u=o[o.length-1],d=D.sizeFromDimension(o,1)/u,a=Ye(u),p=D.size(n)/a,h=W("input",t[0].dataType,t[0].dims,a),$=K("output",t[0].dataType,n,a),g=Te(t[0].dataType),w=a===1?"vec2f":`mat2x${a}f`,b=a===1?g:`vec${a}<${g}>`,v=Rd(e,t[0],t[1],t[2],s,d,u,r.epsilon),I=x=>`\n  const H: u32 = ${d};\n  const C: u32 = ${u/a};\n\n  @group(0) @binding(0) var<storage, read> input : array<${h.type.storage}>;\n  @group(0) @binding(1) var<storage, read> scaleInput : array<${w}>;\n  @group(0) @binding(2) var<storage, read_write> output : array<${$.type.storage}>;\n\n  ${x.mainStart()}\n    let currentImageNumber = global_idx / (C * H);\n    let currentChannelNumber = global_idx % C;\n\n    let scaleOffset = currentImageNumber * C + currentChannelNumber;\n    let scale = scaleInput[scaleOffset];\n    output[global_idx] = fma(input[global_idx], ${b}(scale[0]), ${b}(scale[1]));\n  }`;e.compute({name:"InstanceNormalization",shaderCache:{hint:`${r.cacheKey}`},getRunData:()=>({outputs:[{dims:n,dataType:t[0].dataType}],dispatchGroup:{x:Math.ceil(p/64)}}),getShaderSource:I},{inputs:[t[0],v]})},cs=e=>X({epsilon:e.epsilon,format:e.format}),ps=(e,t)=>{t.format==="NHWC"?Bd(e,e.inputs,t):e.compute(Pd(e.inputs,t))}});var Md,Dd,fs,hs,gs=q(()=>{"use strict";ze();ye();Oe();be();Md=e=>{if(!e||e.length<2)throw new Error("layerNorm requires at least 2 inputs.")},Dd=(e,t,r)=>{let o=e[0].dims,n=e[1],s=e[2],u=o,d=D.normalizeAxis(t.axis,o.length),a=D.sizeToDimension(o,d),p=D.sizeFromDimension(o,d),h=D.size(n.dims),$=s?D.size(s.dims):0;if(h!==p||s&&$!==p)throw new Error(`Size of X.shape()[axis:] == ${p}.\n       Size of scale and bias (if provided) must match this.\n       Got scale size of ${h} and bias size of ${$}`);let g=[];for(let E=0;E<o.length;++E)E<d?g.push(o[E]):g.push(1);let w=Ye(p),b=Te(e[0].dataType),v=[W("x",e[0].dataType,e[0].dims,w),W("scale",n.dataType,n.dims,w)];s&&v.push(W("bias",s.dataType,s.dims,w)),v.push(K("output",e[0].dataType,u,w));let I=r>1,x=r>2;I&&v.push(K("meanDataOutput",1,g)),x&&v.push(K("invStdOutput",1,g));let A=E=>`\n  const normSize: f32 = ${p};\n  const normSizeVectorized: u32 = ${p/w};\n  const epsilon: f32 = ${t.epsilon};\n\n  ${E.declareVariables(...v)}\n  ${E.mainStart()}\n    ${E.guardAgainstOutOfBoundsWorkgroupSizes(a)}\n    let offset = global_idx * normSizeVectorized;\n    var meanVector = ${Ge("f32",w)};\n    var meanSquareVector = ${Ge("f32",w)};\n\n    for (var h: u32 = 0u; h < normSizeVectorized; h++) {\n      let value = ${Je(b,w,"x[h + offset]")};\n      meanVector += value;\n      meanSquareVector += value * value;\n    }\n    let mean = ${et("meanVector",w)} / normSize;\n    let meanSquare = sqrt(${et("meanSquareVector",w)} \n      / normSize - mean * mean + epsilon);\n\n    for (var j: u32 = 0; j < normSizeVectorized; j++) {\n      let f32input = ${Je(b,w,"x[j + offset]")};\n      let f32scale = ${Je(b,w,"scale[j]")};\n      output[j + offset] = ${v[0].type.value}((f32input - mean) / meanSquare * f32scale\n        ${s?`+ ${Je(b,w,"bias[j]")}`:""}\n      );\n    }\n\n    ${I?"meanDataOutput[global_idx] = mean":""};\n    ${x?"invStdOutput[global_idx] = 1 / meanSquare":""};\n  }`,B=[{dims:u,dataType:e[0].dataType}];return I&&B.push({dims:g,dataType:1}),x&&B.push({dims:g,dataType:1}),{name:"LayerNormalization",shaderCache:{hint:`${t.cacheKey}|${r}|${e.length}`},getRunData:()=>({outputs:B,dispatchGroup:{x:Math.ceil(a/64)}}),getShaderSource:A}},fs=e=>X({axis:e.axis,epsilon:e.epsilon}),hs=(e,t)=>{Md(e.inputs),e.compute(Dd(e.inputs,t,e.outputCount))}});var zd,ys,bs=q(()=>{"use strict";ye();cr();zd=e=>{if(!e||e.length!==2)throw new Error("MatMul requires 2 inputs.");if(e[0].dims[e[0].dims.length-1]!==e[1].dims[e[1].dims.length-2])throw new Error("shared dimension does not match.")},ys=e=>{zd(e.inputs);let t=st.calcShape(e.inputs[0].dims,e.inputs[1].dims,!0);if(!t)throw new Error("Can\'t use matmul on the given tensors");e.compute(Qr(e.inputs,{activation:"",activationCacheKey:""},t))}});var Vd,vs,ws,Wd,Ln,$s,Ss=q(()=>{"use strict";ye();Oe();Br();kn();be();Wt();Vd=(e,t)=>{let r=e[0],o=e[1],n=e[2],s=e[3],u=e[4],d=e[5],a=e[6],p=e[7];if(r.dims.length!==3&&r.dims.length!==5)throw new Error("Input query is expected to have 3 or 5 dimensions");let h=!1,$=r.dims[0],g=r.dims[1],w=r.dims.length===3?h?r.dims[2]/3:r.dims[2]:t.numHeads*r.dims[4],b=g,v=0,I=0,x=Math.floor(w/t.numHeads);if(a&&p){if(a.dims.length!==4)throw new Error(\'Input "past_key" is expected to have 4 dimensions\');if(p.dims.length!==4)throw new Error(\'Input "past_value" is expected to have 4 dimensions\');v=a.dims[2],I=a.dims[2]}else if(a||p)throw new Error(\'Input "past_key" and "past_value" shall be both present or both absent\');let A;if(o){if(r.dims.length!==3)throw new Error(\'Input "query" is expected to have 3 dimensions when key is given\');if(o.dims.length<3||o.dims.length>5)throw new Error(\'Input "key" is expected to have 3, 4, or 5 dimensions\');if(r.dims[0]!==o.dims[0])throw new Error(\'Input "query" and "key" shall have same dim 0 (batch size)\');if(o.dims.length===3){if(o.dims[2]!==r.dims[2])throw new Error(\'Input "query" and "key" shall have same dim 2 (hidden_size)\');A=2,b=o.dims[1]}else if(o.dims.length===5){if(o.dims[2]!==t.numHeads||o.dims[3]!==2||o.dims[4]!==x)throw new Error(\'Expect "key" shape (batch_size, kv_sequence_length, num_heads, 2, head_size) for packed kv\');if(n)throw new Error(\'Expect "value" be none when "key" has packed kv format.\');A=5,b=o.dims[1]}else{if(o.dims[1]!==t.numHeads||o.dims[3]!==x)throw new Error(\'Expect "key" shape (batch_size, num_heads, kv_sequence_length, head_size) for past_key\');A=0,b=o.dims[2]}}else{if(r.dims.length!==3&&r.dims.length!==5)throw new Error(\'Input "query" is expected to have 3 or 5 dimensions when key is empty\');if(r.dims.length===5&&(r.dims[2]!==t.numHeads||r.dims[3]!==3))throw new Error(\'Expect "query" shape (batch_size, kv_sequence_length, num_heads, 3, head_size) for packed kv\');A=3}if(s){if(s.dims.length!==1)throw new Error(\'Input "bias" is expected to have 1 dimension\');if(n&&r.dims.length===5&&r.dims[3]===2)throw new Error("bias is not allowed for packed kv.")}let B=0;if(u){B=8;let U=u.dims;throw U.length===1?U[0]===$?B=1:U[0]===3*$+2&&(B=3):U.length===2&&U[0]===$&&U[1]===b&&(B=5),B===8?new Error(\'Input "key_padding_mask" shape shall be (batch_size) or (batch_size, kv_sequence_length)\'):new Error("Mask not supported")}let E=!1,V=w;if(n){if(n.dims.length!==3&&n.dims.length!==4)throw new Error(\'Input "value" is expected to have 3 or 4 dimensions\');if(r.dims[0]!==n.dims[0])throw new Error(\'Input "query" and "value" shall have same dim 0 (batch_size)\');if(n.dims.length===3){if(b!==n.dims[1])throw new Error(\'Input "key" and "value" shall have the same dim 1 (kv_sequence_length)\');V=n.dims[2]}else{if(b!==n.dims[2])throw new Error(\'Input "past_key" and "past_value" shall have the same dim 2 (kv_sequence_length)\');V=n.dims[1]*n.dims[3],E=!0}}let P=v+b,z=!1;if(u)throw new Error("Key padding mask is not supported");if(d)throw new Error("extraAddQk is not supported");if(a)throw new Error("pastKey is not supported");if(p)throw new Error("pastValue is not supported");return{batchSize:$,sequenceLength:g,pastSequenceLength:v,kvSequenceLength:b,totalSequenceLength:P,maxSequenceLength:I,inputHiddenSize:0,hiddenSize:w,vHiddenSize:V,headSize:x,vHeadSize:Math.floor(V/t.numHeads),numHeads:t.numHeads,isUnidirectional:!1,pastPresentShareBuffer:!1,maskFilterValue:t.maskFilterValue,maskType:B,scale:t.scale,broadcastResPosBias:z,passPastInKv:E,qkvFormat:A}},vs=e=>X({...e}),ws=X({perm:[0,2,1,3]}),Wd=(e,t,r,o,n,s,u)=>{let d=[o,n,s],a=D.size(d),p=Te(t.dataType),h=$=>`\n  const biasOffset = ${u}u;\n  const hiddenSize = ${s}u;\n\n  @group(0) @binding(0) var<storage, read> qkv: array<${p}>;\n  @group(0) @binding(1) var<storage, read> bias: array<${p}>;\n  @group(0) @binding(2) var<storage, read_write> qkv_with_bias: array<${p}>;\n\n  ${$.mainStart()}\n    ${$.guardAgainstOutOfBoundsWorkgroupSizes(a)}\n    let biasOffsetIdx = (global_idx % hiddenSize) + biasOffset;\n\n    qkv_with_bias[global_idx] = qkv[global_idx] + bias[biasOffsetIdx];\n  }`;return e.compute({name:"MultiHeadAttentionAddBias",shaderCache:{hint:JSON.stringify({batchSize:o,sequenceLength:n,hiddenSize:s,biasOffset:u})},getRunData:()=>({outputs:[{dims:d,dataType:t.dataType,gpuDataType:0}],dispatchGroup:{x:Math.ceil(a/64)}}),getShaderSource:h},{inputs:[t,r],outputs:[-1]})[0]},Ln=(e,t,r,o,n,s,u,d)=>{let a=s;if(u){if(o===1)throw new Error("AddBiasReshape is not implemented. Please export your model with packed QKV or KV");return a=Wd(e,s,u,t,o,r*n,d),a=a.reshape([t,o,r,n]),e.compute(tt(a,ws.perm),{inputs:[a],outputs:[-1]})[0]}else return s.dims.length===3&&(a=s.reshape([t,o,r,n])),e.compute(tt(a,ws.perm),{inputs:[a],outputs:[-1]})[0]},$s=(e,t)=>{let r=Vd(e.inputs,t);if(e.inputs[0].dims.length===5)throw new Error("Packed QKV is not implemented");if(e.inputs[1]?.dims.length===5)throw new Error("Packed KV is not implemented");let o=e.inputs[1]&&e.inputs[2]&&e.inputs[1].dims.length===4&&e.inputs[2].dims.length===4,n=Ln(e,r.batchSize,r.numHeads,r.sequenceLength,r.headSize,e.inputs[0],e.inputs[3],0);if(o)return Nr(e,n,e.inputs[1],e.inputs[2],e.inputs[4],void 0,void 0,void 0,e.inputs[5],r,t);let s=Ln(e,r.batchSize,r.numHeads,r.kvSequenceLength,r.headSize,e.inputs[1],e.inputs[3],r.hiddenSize),u=Ln(e,r.batchSize,r.numHeads,r.kvSequenceLength,r.vHeadSize,e.inputs[2],e.inputs[3],2*r.hiddenSize);Nr(e,n,s,u,e.inputs[4],void 0,e.inputs[6],e.inputs[7],e.inputs[5],r,t)}});var Ud,Nd,Hd,Gd,Ld,Fd,jd,qd,Kd,xs,Cs,Is=q(()=>{"use strict";ze();ye();Oe();be();Ud=e=>{if(!e||e.length<1)throw new Error("Too few inputs");if(e[0].dataType!==1)throw new Error("Input type must be float.");if(e.length>=2){let t=e[0].dims.length*2===e[1].dims[0];if(e.length===4&&(t=e[3].dims[0]*2===e[1].dims[0]),!t)throw new Error("The pads should be a 1D tensor of shape [2 * input_rank] or [2 * num_axes].")}},Nd=(e,t,r,o,n,s)=>{let u=t.length,d="";for(let a=u-1;a>=0;--a)d+=`\n            k = i32(${e.indicesGet("indices",a)}) - ${o[a]};\n            if (k < 0) {\n              break;\n            }\n            if (k >= ${t[a]}) {\n              break;\n            }\n            offset += k * ${r[a]};\n        `;return`\n          value = ${n}(${s});\n          for (var i = 0; i < 1; i++) {\n            var offset = 0;\n            var k = 0;\n            ${d}\n            value = x[offset];\n          }\n      `},Hd=(e,t,r,o)=>{let n=t.length,s="";for(let u=n-1;u>=0;--u)s+=`\n                k = i32(${e.indicesGet("indices",u)}) - ${o[u]};\n                if (k < 0) {\n                  k = -k;\n                }\n                {\n                  let _2n_1 = ${2*(t[u]-1)};\n                  k = k % _2n_1;\n                  if(k >= ${t[u]}) {\n                    k = _2n_1 - k;\n                  }\n                }\n                offset += k * ${r[u]};\n            `;return`\n              var offset = 0;\n              var k = 0;\n              ${s}\n              value = x[offset];\n          `},Gd=(e,t,r,o)=>{let n=t.length,s="";for(let u=n-1;u>=0;--u)s+=`\n                k = i32(${e.indicesGet("indices",u)}) - ${o[u]};\n                if (k < 0) {\n                  k = 0;\n                }\n                if (k >= ${t[u]}) {\n                  k = ${t[u]-1};\n                }\n                offset += k * ${r[u]};\n            `;return`\n              var offset = 0;\n              var k = 0;\n              ${s}\n              value = x[offset];\n          `},Ld=(e,t,r,o)=>{let n=t.length,s="";for(let u=n-1;u>=0;--u)s+=`\n                k = i32(${e.indicesGet("indices",u)}) - ${o[u]};\n                if (k < 0)  {\n                  k += ${t[u]};\n                }\n                if (k >= ${t[u]}) {\n                  k -= ${t[u]};\n                }\n                offset += k * ${r[u]};\n            `;return`\n              var offset = 0;\n              var k = 0;\n              ${s}\n              value = x[offset];\n          `},Fd=(e,t,r,o,n)=>{switch(o.mode){case 0:return Nd(e,t,r,o.pads,n,o.value);case 1:return Hd(e,t,r,o.pads);case 2:return Gd(e,t,r,o.pads);case 3:return Ld(e,t,r,o.pads);default:throw new Error("Invalid mode")}},jd=(e,t,r,o)=>{let n=t[0].dims,s=D.padShape(n.slice(),r.pads),u=D.size(s),d=D.computeStrides(n),a=K("output",t[0].dataType,s),p=W("x",t[0].dataType,n),h=Fd(a,n,d,r,o);return`\n              ${e.declareVariables(p,a)}\n              ${e.mainStart()}\n              ${e.guardAgainstOutOfBoundsWorkgroupSizes(u)}\n\n              let indices = ${a.offsetToIndices("global_idx")};\n\n              var value = ${o}(0);\n              ${h}\n              output[global_idx] = value;\n          }`},qd=(e,t)=>{let r=D.padShape(e[0].dims.slice(),t.pads);return{name:"Pad",shaderCache:{hint:t.cacheKey},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(D.size(r)/64)}}),getShaderSource:o=>jd(o,e,t,"f32")}},Kd=(e,t)=>{if(e.length>1){let r=e[1].getBigInt64Array(),o=e.length>=3&&e[2].data?e[2].getFloat32Array()[0]:0,n=e[0].dims.length,s=new Int32Array(2*n).fill(0);if(e.length>=4){let d=e[3].getBigInt64Array();for(let a=0;a<d.length;a++)s[Number(d[a])]=Number(r[a]),s[Number(d[a])+n]=Number(r[a+d.length])}else r.forEach((d,a)=>s[Number(a)]=Number(d));let u=[];return s.forEach(d=>u.push(d)),X({mode:t.mode,value:o,pads:u})}else return t},xs=(e,t)=>{Ud(e.inputs);let r=Kd(e.inputs,t);e.compute(qd(e.inputs,r),{inputs:[0]})},Cs=e=>{let t=e.mode,r=e.value,o=e.pads;return X({mode:t,value:r,pads:o})}});var en,As,Ts,_s,Es,Os,ks,Ps,Rs,Bs,Ms,Ds,zs,Vs,Ws,Us,Ns=q(()=>{"use strict";Fr();ye();Oe();be();en=e=>{if(Ut.webgpu.validateInputContent&&(!e||e.length!==1))throw new Error("Pool ops requires 1 input.")},As=(e,t,r)=>{let o=t.format==="NHWC",n=e.dims.slice();o&&n.splice(1,0,n.pop());let s=Object.hasOwnProperty.call(t,"dilations"),u=t.kernelShape.slice(),d=t.strides.slice(),a=s?t.dilations.slice():[],p=t.pads.slice();Et.adjustPoolAttributes(r,n,u,d,a,p);let h=Et.computePoolOutputShape(r,n,d,a,u,p,t.autoPad),$=Object.assign({},t);s?Object.assign($,{kernelShape:u,strides:d,pads:p,dilations:a,cacheKey:t.cacheKey}):Object.assign($,{kernelShape:u,strides:d,pads:p,cacheKey:t.cacheKey});let g=h.slice();return g.push(g.splice(1,1)[0]),[$,o?g:h]},Ts=(e,t)=>{let r=t.format==="NHWC",o=D.size(e),n=D.size(t.kernelShape),s=[{type:"uint32",data:o},{type:"uint32",data:n}],u=[{name:"outputSize",type:"u32"},{name:"kernelSize",type:"u32"}];if(t.kernelShape.length<=2){let d=t.kernelShape[t.kernelShape.length-1],a=t.strides[t.strides.length-1],p=t.pads[t.pads.length/2-1],h=t.pads[t.pads.length-1],$=!!(p+h);s.push({type:"uint32",data:d},{type:"uint32",data:a},{type:"uint32",data:p},{type:"uint32",data:h}),u.push({name:"kw",type:"u32"},{name:"sw",type:"u32"},{name:"pwStart",type:"u32"},{name:"pwEnd",type:"u32"});let g=!1;if(t.kernelShape.length===2){let w=t.kernelShape[t.kernelShape.length-2],b=t.strides[t.strides.length-2],v=t.pads[t.pads.length/2-2],I=t.pads[t.pads.length-2];g=!!(v+I),s.push({type:"uint32",data:w},{type:"uint32",data:b},{type:"uint32",data:v},{type:"uint32",data:I}),u.push({name:"kh",type:"u32"},{name:"sh",type:"u32"},{name:"phStart",type:"u32"},{name:"phEnd",type:"u32"})}return[s,u,!0,$,g]}else{if(r)throw new Error("Pooling with kernelShape.length > 2 is not supported for NHWC format.");let d=D.computeStrides(t.kernelShape);s.push({type:"uint32",data:d},{type:"uint32",data:t.pads},{type:"uint32",data:t.strides}),u.push({name:"kernelStrides",type:"u32",length:d.length},{name:"pads",type:"u32",length:t.pads.length},{name:"strides",type:"u32",length:t.strides.length});let a=t.pads.reduce((p,h)=>p+h);return[s,u,!!a,!1,!1]}},_s=(e,t,r,o,n,s,u,d,a,p,h,$)=>{let g=n.format==="NHWC",w=t.type.value,b=K("output",t.type.tensor,o);if(n.kernelShape.length<=2){let v="",I="",x="",A=r-(g?2:1);if(h===!0?v=`\n                for (var i: u32 = 0u; i < uniforms.kw; i++) {\n                  xIndices[${A}] = indices[${A}] * uniforms.sw - uniforms.pwStart + i;\n                  if (xIndices[${A}] < 0 || xIndices[${A}]\n                      >= uniforms.x_shape[${A}]) {\n                    pad++;\n                    continue;\n                  }\n                  let x_val = x[${t.indicesToOffset("xIndices")}];\n                  ${s}\n                }`:v=`\n                for (var i: u32 = 0u; i < uniforms.kw; i++) {\n                  xIndices[${A}] = indices[${A}] * uniforms.sw - uniforms.pwStart + i;\n                  let x_val = x[${t.indicesToOffset("xIndices")}];\n                  ${s}\n                }`,n.kernelShape.length===2){let E=r-(g?3:2);$===!0?I=`\n                for (var j: u32 = 0u; j < uniforms.kh; j++) {\n                  xIndices[${E}] = indices[${E}] * uniforms.sh - uniforms.phStart + j;\n                  if (xIndices[${E}] < 0 || xIndices[${E}] >= uniforms.x_shape[${E}]) {\n                    pad += i32(uniforms.kw);\n                    continue;\n                  }\n              `:I=`\n                for (var j: u32 = 0u; j < uniforms.kh; j++) {\n                  xIndices[${E}] = indices[${E}] * uniforms.sh - uniforms.phStart + j;\n                `,x=`\n              }\n            `}return`\n            ${e.registerUniforms(a).declareVariables(t,b)}\n\n            ${e.mainStart()}\n              ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n\n              let indices = ${b.offsetToIndices("global_idx")};\n              var xIndices = ${b.offsetToIndices("global_idx")};\n\n              var value = ${w}(${d});\n              var pad = 0;\n              ${I}\n              ${v}\n              ${x}\n              ${u}\n\n              output[global_idx] = value;\n            }`}else{if(g)throw new Error("Pooling with kernelShape.length > 2 is not supported for NHWC format.");let v=n.kernelShape.length,I=n.pads.length,x="";return p?x=`\n                if (xIndices[j] >= uniforms.x_shape[j]) {\n                  pad++;\n                  isPad = true;\n                  break;\n                }\n              }\n              if (!isPad) {\n                let x_val = x[${t.indicesToOffset("xIndices")}];\n                ${s}\n              }`:x=`\n              }\n              let x_val = x[${t.indicesToOffset("xIndices")}];\n              ${s}\n            `,`\n            ${e.registerUniforms(a).declareVariables(t,b)}\n\n            ${e.mainStart()}\n              ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n              let indices = ${b.offsetToIndices("global_idx")};\n              var xIndices = ${b.offsetToIndices("global_idx")};\n\n              var offsets: array<u32, ${v}>;\n\n              var value = ${w}(${d});\n              var pad = 0;\n              var isPad = false;\n\n              for (var i: u32 = 0u; i < uniforms.kernelSize; i++) {\n                var offset = i;\n                for (var j = 0u; j < ${v-1}u; j++) {\n                  offsets[j] = offset / ${je("uniforms.kernelStrides","j",v)};\n                  offset -= offsets[j] * ${je("uniforms.kernelStrides","j",v)};\n                }\n                offsets[${v-1}] = offset;\n\n                isPad = false;\n                for (var j = ${r-v}u; j < ${r}u; j++) {\n                  xIndices[j] = indices[j] * ${je("uniforms.strides",`j - ${r-v}u`,v)}\n                    + offsets[j - ${r-v}u] - ${je("uniforms.pads","j - 2u",I)};\n                  ${x}\n              }\n              ${u}\n\n              output[global_idx] = value;\n            }`}},Es=e=>({format:e.format,autoPad:["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][e.auto_pad],ceilMode:e.ceil_mode,kernelShape:e.kernel_shape,strides:e.strides,pads:e.pads}),Os=(e,t,r,o)=>{let[n,s]=As(t,o,r),u=W("x",t.dataType,t.dims.length),d=u.type.value,a="value += x_val;",p="";n.countIncludePad?p+=`value /= ${d}(uniforms.kernelSize);`:p+=`value /= ${d}(i32(uniforms.kernelSize) - pad);`;let[h,$,g,w,b]=Ts(s,n);h.push(...ne(t.dims)),h.push(...ne(s));let v=["rank"];return{name:e,shaderCache:{hint:o.cacheKey+g+w+b+n.countIncludePad,inputDependencies:v},getRunData:()=>({outputs:[{dims:s,dataType:t.dataType}],dispatchGroup:{x:Math.ceil(D.size(s)/64)},programUniforms:h}),getShaderSource:I=>_s(I,u,t.dims.length,s.length,n,a,p,0,$,g,w,b)}},ks=e=>{let t=e.count_include_pad!==0,r=Es(e);if(r.ceilMode!==0)throw new Error("using ceil() in shape computation is not yet supported for AveragePool");return X({countIncludePad:t,...r})},Ps=(e,t)=>{en(e.inputs),e.compute(Os("AveragePool",e.inputs[0],!1,t))},Rs={autoPad:"",ceilMode:0,countIncludePad:!1,kernelShape:[],strides:[],pads:[],storageOrder:0,dilations:[],cacheKey:""},Bs=e=>{let t=e.format;return{format:t,...Rs,cacheKey:t}},Ms=(e,t)=>{en(e.inputs),e.compute(Os("GlobalAveragePool",e.inputs[0],!0,t))},Ds=(e,t,r,o)=>{let[n,s]=As(t,o,r),u=`\n      value = max(x_val, value);\n    `,d="",a=W("x",t.dataType,t.dims.length),p=["rank"],[h,$,g,w,b]=Ts(s,n);return h.push(...ne(t.dims)),h.push(...ne(s)),{name:e,shaderCache:{hint:o.cacheKey+g,inputDependencies:p},getRunData:()=>({outputs:[{dims:s,dataType:t.dataType}],dispatchGroup:{x:Math.ceil(D.size(s)/64)},programUniforms:h}),getShaderSource:v=>_s(v,a,t.dims.length,s.length,n,u,d,-1e5,$,g,w,b)}},zs=(e,t)=>{en(e.inputs),e.compute(Ds("MaxPool",e.inputs[0],!1,t))},Vs=e=>{let t=e.storage_order,r=e.dilations,o=Es(e);if(t!==0)throw new Error("column major storage order is not yet supported for MaxPool");if(o.ceilMode!==0)throw new Error("using ceil() in shape computation is not yet supported for MaxPool");return X({storageOrder:t,dilations:r,...o})},Ws=e=>{let t=e.format;return{format:t,...Rs,cacheKey:t}},Us=(e,t)=>{en(e.inputs),e.compute(Ds("GlobalMaxPool",e.inputs[0],!0,t))}});var Zd,Xd,Hs,Gs=q(()=>{"use strict";Fr();ze();be();Zd=(e,t,r)=>{let o=e===t,n=e<t&&r<0,s=e>t&&r>0;if(o||n||s)throw new Error("Range these inputs\' contents are invalid.")},Xd=(e,t,r,o)=>{let n=Math.abs(Math.ceil((t-e)/r)),s=[n],u=n,d=K("output",o,s),a=d.type.storage,p=h=>`\n        ${h.declareVariables(d)}\n        ${h.mainStart()}\n        ${h.guardAgainstOutOfBoundsWorkgroupSizes(u)}\n        output[global_idx] = ${a}(${e}) + ${a}(global_idx) * ${a}(${r});\n      }`;return{name:"Range",shaderCache:{hint:[e,t,r].map(h=>h.toString()).join("_")},getShaderSource:p,getRunData:()=>({outputs:[{dims:s,dataType:o}],dispatchGroup:{x:Math.ceil(u/64)}})}},Hs=e=>{let t=0,r=0,o=0;e.inputs[0].dataType===6?(t=e.inputs[0].getInt32Array()[0],r=e.inputs[1].getInt32Array()[0],o=e.inputs[2].getInt32Array()[0]):e.inputs[0].dataType===1&&(t=e.inputs[0].getFloat32Array()[0],r=e.inputs[1].getFloat32Array()[0],o=e.inputs[2].getFloat32Array()[0]),Ut.webgpu.validateInputContent&&Zd(t,r,o),e.compute(Xd(t,r,o,e.inputs[0].dataType),{inputs:[]})}});var Qd,Jd,ec,tc,rc,nc,oc,ac,ic,sc,uc,lc,dc,cc,pc,Ls,Fs,js=q(()=>{"use strict";ye();Oe();be();Qd=(e,t)=>{if(e.every(r=>r>0||(()=>{throw new Error("Resize requires scales input values to be positive")})),e.length>0){if(t.mode==="linear"){if(!(e.length===2||e.length===4&&e[0]===1&&e[1]===1||e.length===4&&e[0]===1&&e[3]===1))throw new Error("Resize requires scales input size to be 2 or 4 for linear mode")}else if(t.mode==="cubic"&&!(e.length===2||e.length===4&&e[0]===1&&e[1]===1||e.length===4&&e[0]===1&&e[3]===1))throw new Error("Resize requires scales input size to be 2 or 4 for cubic mode")}},Jd=(e,t,r)=>{t.every(n=>n>=0&&n<r||(()=>{throw new Error("Resize requires axes input values to be positive and less than rank")}));let o=new Array(r).fill(1);return t.forEach((n,s)=>o[n]=e[s]),o},ec=(e,t,r,o,n,s)=>{let[u,d,a]=r>10?[1,2,3]:[-1,e.length>1?1:-1,-1],p=e[0].dims.length;if(u>0&&e.length>u&&e[u].dims.length>0)e[u].getFloat32Array().forEach(h=>s.push(h));else if(t.coordinateTransformMode==="tf_crop_and_resize")throw new Error("Resize requires RoI input to be specified when coordinateTransformMode is tfCropAndResize");if(d>0&&e.length>d&&e[d].dims.length>0){if(e[d].getFloat32Array().forEach(h=>o.push(h)),o.length!==0&&o.length!==p&&r>=18&&o.length!==t.axes.length)throw new Error("Resize requires scales input size to be same as input rank or axes size for opset 18 and up");Qd(o,t),t.axes.length>0&&Jd(o,t.axes,p).forEach((h,$)=>o[$]=h)}if(a>0&&e.length>a&&(e[a].getBigInt64Array().forEach(h=>n.push(Number(h))),n.length!==p||r>=18&&n.length===t.axes.length))throw new Error("Resize requires sizes input size to be same as input rank or axes size for opset 18 and up");if(t.axes.length>0){if(o.length!==t.axes.length)throw new Error(\'Resize requires "scales" input size to be of axes rank when axes attributes is specified\');if(n.length!==t.axes.length)throw new Error(\'Resize requires "sizes" input size to be of rank axes rank when axes attributes is specified\')}if(typeof o<"u"&&typeof n<"u"&&o.length>0&&n.length>p)throw new Error("Resize requires only of scales or sizes to be specified")},tc=(e,t)=>`fn getOriginalCoordinateFromResizedCoordinate(xResized: ${t}, xScale: ${t}, lengthResized: ${t},\n     lengthOriginal: ${t}, roiStart: ${t}, roiEnd: ${t}) -> ${t} { `+(()=>{switch(e){case"asymmetric":return"return xResized / xScale;";case"pytorch_half_pixel":return"if (lengthResized > 1) {                     return (xResized + 0.5) / xScale - 0.5;                   } else {                     return 0.0;                   }";case"tf_half_pixel_for_nn":return"return (xResized + 0.5) / xScale;";case"align_corners":return"if (lengthResized == 1) {                     return 0.0;                   } else {                     return xResized * (lengthOriginal - 1) / (lengthResized - 1);                   }";case"tf_crop_and_resize":return`if (lengthResized > 1) {                     return roiStart * (lengthOriginal - 1) +                           (xResized * (roiEnd - roiStart) * (lengthOriginal - 1)) / (lengthResized - 1);                   } else {                     return 0.5 * (roiStart + roiEnd) * ${t}(lengthOriginal - 1);                   }`;case"half_pixel_symmetric":return["const outputWidth = xScale * lengthResized;","const adjustment = lengthResized / outputWidth;","const center = lengthOriginal / 2;","const offset = center * (1 - adjustment);","return offset + ((xResized + 0.5) / xScale) - 0.5;"].join(`\n`);case"half_pixel":return"return ((xResized + 0.5) / xScale) - 0.5;";default:throw new Error(`Coordinate transform mode ${e} is not supported`)}})()+"}",rc=(e,t,r)=>`fn getNearestPixelFromOriginal(xOriginal: ${r}, isDownSample: bool) -> ${r} {`+(()=>{switch(e){case"round_prefer_ceil":return"if (fract(xOriginal) == 0.5) {             return ceil(xOriginal);           } else {             return round(xOriginal);           }";case"floor":return"return floor(xOriginal);";case"ceil":return"return ceil(xOriginal);";case"round_prefer_floor":return"if (fract(xOriginal) == 0.5) {                     return floor(xOriginal);                   } else {                     return round(xOriginal);                   }";case"simple":default:if(t<11)return"if (isDownSample)                     {                       return ceil(xOriginal);                     } else {                       return xOriginal;                     }";throw new Error(`Nearest mode ${e} is not supported`)}})()+"}",nc=(e,t,r)=>{let o=new Array(r).fill(0).concat(new Array(r).fill(1)),n=e.length===0?o:e.slice();return t.length>0?(t.forEach((s,u)=>{o[s]=n[u],o[u+r]=n[t.length+u]}),o):n},oc=(e,t,r,o)=>{let n=[];if(r.length>0)if(o.length>0){if(e.forEach(s=>n.push(s)),Math.max(...o)>e.length)throw new Error("axes is out of bound");o.forEach((s,u)=>n[s]=r[u])}else r.forEach(s=>n.push(s));else{if(t.length===0)throw new Error("Resize requires either scales or sizes.");n=e.map((s,u)=>Math.round(s*t[u]))}return n},ac=(e,t,r)=>{let o=(()=>{switch(r.keepAspectRatioPolicy){case"not_larger":return r.axes.length>0?Math.min(...r.axes.map(s=>t[s]),Number.MAX_VALUE):Math.min(...t,Number.MAX_VALUE);case"not_smaller":return r.axes.length>0?Math.max(...r.axes.map(s=>t[s]),Number.MIN_VALUE):Math.max(...t,Number.MIN_VALUE);default:throw new Error(`Keep aspect ratio policy ${r.keepAspectRatioPolicy} is not supported`)}})();t.fill(1,0,t.length);let n=e.slice();return r.axes.length>0?(r.axes.forEach(s=>t[s]=o),r.axes.forEach(s=>n[s]=Math.round(e[s]*t[s]))):(t.fill(o,0,t.length),n.forEach((s,u)=>n[u]=Math.round(s*t[u]))),n},ic=(e,t,r,o,n)=>`\n    fn calculateOriginalIndicesFromOutputIndices(outputIndices: ${e.type.indices}) -> array<${e.type.value}, ${r.length}> {\n      const inputShape = array<u32, ${t.length}>(${t.map(s=>`${s}u`).join(",")});\n      const outputShape = array<u32, ${r.length}>(${r.map(s=>`${s}u`).join(",")});\n      const scales = array<${e.type.value}, ${o.length}>(${o.map(s=>`${s}f`).join(",")});\n      const roi = array<${e.type.value}, ${n.length}>(${n.map(s=>`${s}f`).join(",")});\n      var originalIndices: array<${e.type.value}, ${r.length}>;\n      for (var i:u32 = 0; i < ${r.length}; i++) {\n        var outputIndex = ${r.length===1?"outputIndices":"outputIndices[i]"};\n        if (scales[i] == 1.0) {\n          originalIndices[i] = ${e.type.value}(outputIndex);\n        } else {\n          originalIndices[i] = getOriginalCoordinateFromResizedCoordinate(${e.type.value}(outputIndex), scales[i],\n                ${e.type.value}(outputShape[i]), ${e.type.value}(inputShape[i]), roi[i], roi[i + ${t.length}]);\n        }\n      }\n      return originalIndices;\n    }`,sc=(e,t,r,o,n,s,u)=>`\n    fn calculateInputIndicesFromOutputIndices(outputIndices: ${t.type.indices}) -> ${e.type.indices} {\n        const inputShape = array<u32, ${r.length}>(${r.map(d=>`${d}u`).join(",")});\n        const outputShape = array<u32, ${o.length}>(${o.map(d=>`${d}u`).join(",")});\n        const scales = array<${e.type.value}, ${n.length}>(${n.map(d=>`${d}`).join(",")});\n        const roi = array<${e.type.value}, ${s.length}>(${s.map(d=>`${d}`).join(",")});\n        var inputIndices: ${e.type.indices};\n        for (var i:u32 = 0; i < ${o.length}; i++) {\n          var outputIndex = ${o.length===1?"outputIndices":"outputIndices[i]"};\n          var inputIndex: u32;\n          if (scales[i] == 1.0) {\n            inputIndex = outputIndex;\n          } else {\n            var original_idx = getOriginalCoordinateFromResizedCoordinate(${e.type.value}(outputIndex), scales[i],\n                    ${e.type.value}(outputShape[i]), ${e.type.value}(inputShape[i]), roi[i], roi[i + ${r.length}]);\n            if (!${u} || (original_idx >= 0 && original_idx < ${e.type.value}(inputShape[i]))) {\n              if (original_idx < 0) {\n                inputIndex = 0;\n              } else if (original_idx > (${e.type.value}(inputShape[i]) - 1)) {\n                inputIndex = inputShape[i] - 1;\n              } else {\n                inputIndex = u32(getNearestPixelFromOriginal(original_idx, scales[i] < 1));\n              }\n            } else {\n              inputIndex = u32(original_idx);\n            }\n          }\n          ${e.indicesSet("inputIndices","i","inputIndex")}\n        }\n        return inputIndices;\n    }`,uc=(e,t)=>`\n    fn checkInputIndices(inputIndices: ${e.type.indices}) -> bool {\n      const inputShape = array<u32, ${t.length}>(${t.map(r=>`${r}u`).join(",")});\n      for (var i:u32 = 0; i < ${t.length}; i++) {\n        var inputIndex = ${t.length===1?"inputIndices":"inputIndices[i]"};\n        if (inputIndex < 0 || inputIndex >= inputShape[i]) {\n          return false;\n        }\n      }\n      return true;\n    }`,lc=(e,t,r,o,n,s)=>{let[u,d,a,p]=r.length===2?[-1,0,1,-1]:o[1]===1?[0,2,3,1]:[0,1,2,3],h=e.type.value;return`\n    fn getInputValue(batch: u32, channel: u32, row: u32, col: u32) -> ${h} {\n      var inputIndices: ${e.type.indices};\n      inputIndices[${d}] = max(0, min(row, ${r[d]} - 1));\n      inputIndices[${a}] = max(0, min(col, ${r[a]} - 1));\n      if (${r.length} > 2) {\n        inputIndices[${p}] = channel;\n        inputIndices[${u}] = batch;\n      };\n      return input[${e.indicesToOffset("inputIndices")}];\n    }\n\n    fn bilinearInterpolation(outputIndices: ${t.type.indices}) -> ${h} {\n      var originalIndices = calculateOriginalIndicesFromOutputIndices(outputIndices);\n      var row:${h} = originalIndices[${d}];\n      var col:${h} = originalIndices[${a}];\n      if (${n} && (row < 0 || row > (${r[d]} - 1) || col < 0 || col > ${r[a]} - 1)) {\n        return ${s};\n      }\n      row = max(0, min(row, ${r[d]} - 1));\n      col = max(0, min(col, ${r[a]} - 1));\n      var row1: u32 = u32(row);\n      var col1: u32 = u32(col);\n      var row2: u32 = u32(row + 1);\n      var col2: u32 = u32(col + 1);\n      var channel: u32 = 0;\n      var batch: u32 = 0;\n      if (${r.length>2}) {\n        channel = u32(originalIndices[${p}]);\n        batch = u32(originalIndices[${u}]);\n      }\n      var x11: ${h} = getInputValue(batch, channel, row1, col1);\n      var x12: ${h} = getInputValue(batch, channel, row1, col2);\n      var x21: ${h} = getInputValue(batch, channel, row2, col1);\n      var x22: ${h} = getInputValue(batch, channel, row2, col2);\n      var dx1: ${h} = row - ${h}(row1);\n      var dx2: ${h} = ${h}(row2) - row;\n      var dy1 = col - ${h}(col1);\n      var dy2 = ${h}(col2) - col;\n      return (x11 * dx2 * dy2 + x12 * dx2 * dy1 + x21 * dx1 * dy2 + x22 * dx1 * dy1);\n    }`},dc=(e,t,r,o,n,s,u,d,a,p)=>{let[h,$]=r.length===2?[0,1]:n[1]===1?[2,3]:[1,2],g=e.type.value,w=b=>{let v=b===h?"row":"col";return`\n      fn ${v}CubicInterpolation(inputIndices: ${e.type.indices}, outputIndices: ${t.type.indices}) -> ${g} {\n        var outputIndex = ${o.length===1?"outputIndices":`outputIndices[${b}]`};\n        var originalIdx: ${g} = getOriginalCoordinateFromResizedCoordinate(${g}(outputIndex), ${n[b]},\n        ${g}(${o[b]}), ${g}(${r[b]}), ${s[b]}, ${s[b]} + ${r.length});\n        var fractOriginalIdx: ${g} = originalIdx - floor(originalIdx);\n        var coefs = getCubicInterpolationCoefs(fractOriginalIdx);\n\n        if (${d} && (originalIdx < 0 || originalIdx > (${r[b]} - 1))) {\n          return ${a};\n        }\n        var data: array<${g}, 4> = array<${g}, 4>(0.0, 0.0, 0.0, 0.0);\n        for (var i: i32 = -1; i < 3; i++) {\n          var ${v}: ${g} = originalIdx + ${g}(i);\n          if (${v} < 0 || ${v} >= ${r[b]}) {\n            if (${p}) {\n              coefs[i + 1] = 0.0;\n              continue;\n            } else if (${d}) {\n              return ${a};\n            } else {\n              ${v} = max(0, min(${v}, ${r[b]} - 1));\n            }\n          }\n          var inputIndicesCopy: ${e.type.indices} = inputIndices;\n          inputIndicesCopy[${b}] = u32(${v});\n          data[i + 1] = ${b===h?`input[${e.indicesToOffset("inputIndicesCopy")}];`:`\n                                               rowCubicInterpolation(inputIndicesCopy, outputIndices);`}\n        }\n        return cubicInterpolation1D(data, coefs);\n      }`};return`\n    ${w(h)};\n    ${w($)};\n  fn getCubicInterpolationCoefs(s: ${g}) -> array<${g}, 4> {\n    var absS = abs(s);\n    var coeffs: array<${g}, 4> = array<${g}, 4>(0.0, 0.0, 0.0, 0.0);\n    var oneMinusAbsS: ${g} = 1.0 - absS;\n    var twoMinusAbsS: ${g} = 2.0 - absS;\n    var onePlusAbsS: ${g} = 1.0 + absS;\n    coeffs[0] = ((${u} * onePlusAbsS - 5 * ${u}) * onePlusAbsS + 8 * ${u}) * onePlusAbsS - 4 * ${u};\n    coeffs[1] = ((${u} + 2) * absS - (${u} + 3)) * absS * absS + 1;\n    coeffs[2] = ((${u} + 2) * oneMinusAbsS - (${u} + 3)) * oneMinusAbsS * oneMinusAbsS + 1;\n    coeffs[3] = ((${u} * twoMinusAbsS - 5 * ${u}) * twoMinusAbsS + 8 * ${u}) * twoMinusAbsS - 4 * ${u};\n    return coeffs;\n  }\n\n  fn cubicInterpolation1D(x: array<${g}, 4>, coefs: array<${g}, 4>) -> ${g} {\n    var coefsSum: ${g} = coefs[0] + coefs[1] + coefs[2] + coefs[3];\n    return (x[0] * coefs[0] + x[1] * coefs[1]+ x[2] * coefs[2]+ x[3] * coefs[3]) / coefsSum;\n  }\n\n  fn bicubicInterpolation(outputIndices: ${t.type.indices}) -> ${g} {\n    var inputIndices: ${e.type.indices} = outputIndices;\n    return colCubicInterpolation(inputIndices, outputIndices);\n  }\n    `},cc=(e,t,r,o,n,s)=>{let u=e.dims,d=nc(s,t.axes,u.length),a=oc(u,o,n,t.axes),p=o.slice();o.length===0&&(p=u.map((x,A)=>x===0?1:a[A]/x),t.keepAspectRatioPolicy!=="stretch"&&(a=ac(u,p,t)));let h=K("output",e.dataType,a),$=W("input",e.dataType,u),g=D.size(a),w=u.length===a.length&&u.every((x,A)=>x===a[A]),b=t.coordinateTransformMode==="tf_crop_and_resize",v=$.type.value,I=x=>`\n      ${w?"":`\n      ${tc(t.coordinateTransformMode,v)};\n      ${(()=>{switch(t.mode){case"nearest":return`\n              ${uc($,u)};\n              ${rc(t.nearestMode,r,v)};\n              ${sc($,h,u,a,p,d,b)};\n              `;case"linear":return`\n              ${ic(h,u,a,p,d)};\n              ${lc($,h,u,p,b,t.extrapolationValue)};\n              `;case"cubic":return`\n            ${dc($,h,u,a,p,d,t.cubicCoeffA,b,t.extrapolationValue,t.excludeOutside)};\n            `;default:throw Error("Invalid resize mode")}})()};\n      `}\n      ${x.declareVariables($,h)}\n      ${x.mainStart()}\n        ${x.guardAgainstOutOfBoundsWorkgroupSizes(g)}\n        ${w?"output[global_idx] = input[global_idx];":`\n        let outputIndices = ${h.offsetToIndices("global_idx")};\n        var inputIndices: ${$.type.indices};\n        ${(()=>{switch(t.mode){case"nearest":return`inputIndices = calculateInputIndicesFromOutputIndices(outputIndices);\n                if (checkInputIndices(inputIndices)) {\n                  output[global_idx] = input[${$.indicesToOffset("inputIndices")}];\n                } else {\n                  output[global_idx] = ${t.extrapolationValue};\n                }`;case"linear":return"output[global_idx] = bilinearInterpolation(outputIndices);";case"cubic":return"output[global_idx] = bicubicInterpolation(outputIndices);";default:throw Error(`Unsupported resize mode: ${t.mode}`)}})()};\n        `}\n      }`;return{name:"Resize",shaderCache:{hint:`${t.cacheKey}|${r}|${p.length>0?p:""}|${n.length>0?n:""}|${w}`},getShaderSource:I,getRunData:()=>({outputs:[{dims:a,dataType:e.dataType}],dispatchGroup:{x:Math.ceil(g/64)}})}},pc=e=>{let t=e.customDataBuffer;return new Uint32Array(t,t.byteOffset,1)[0]},Ls=(e,t)=>{let r=[],o=[],n=[],s=pc(e);ec(e.inputs,t,s,r,o,n),e.compute(cc(e.inputs[0],t,s,r,o,n),{inputs:[0]})},Fs=e=>{let t=e.antialias,r=e.axes,o=e.coordinateTransformMode,n=e.cubicCoeffA,s=e.excludeOutside!==0,u=e.extrapolationValue,d=e.keepAspectRatioPolicy,a=e.mode,p=e.nearestMode===""?"simple":e.nearestMode;return X({antialias:t,axes:r,coordinateTransformMode:o,cubicCoeffA:n,excludeOutside:s,extrapolationValue:u,keepAspectRatioPolicy:d,mode:a,nearestMode:p})}});var mc,fc,qs,Ks,Ys=q(()=>{"use strict";ze();ye();Oe();be();mc=e=>{if(!e||e.length<3)throw new Error("layerNorm requires at least 3 inputs.");let t=e[0],r=e[1],o=e[2];if(t.dataType!==r.dataType||t.dataType!==o.dataType)throw new Error("All inputs must have the same data type");if(t.dims.length!==3&&t.dims.length!==2)throw new Error("Input must be 2D or 3D");if(r.dims.length!==3&&r.dims.length!==2)throw new Error("Skip must be 2D or 3D");let n=t.dims[t.dims.length-1],s=t.dims[t.dims.length-2];if(r.dims[r.dims.length-1]!==n)throw new Error("Skip must have the same hidden size as input");if(r.dims[r.dims.length-2]!==s)throw new Error("Skip must have the same sequence length as input");if(o.dims.length!==1)throw new Error("Gamma must be 1D");if(o.dims[o.dims.length-1]!==n)throw new Error("Gamma must have the same hidden size as input");if(e.length>3){let u=e[3];if(u.dims.length!==1)throw new Error("Beta must be 1D");if(u.dims[u.dims.length-1]!==n)throw new Error("Beta must have the same hidden size as input")}if(e.length>4){let u=e[4];if(u.dims.length!==1)throw new Error("Bias must be 1D");if(u.dims[u.dims.length-1]!==n)throw new Error("Bias must have the same hidden size as input")}},fc=(e,t,r,o)=>{let n=e[0].dims,s=D.size(n),u=n,d=s,a=n.slice(-1)[0],p=o?n.slice(0,-1).concat(1):[],h=e.length>3,$=e.length>4,g=o&&r>1,w=o&&r>2,b=r>3,v=Ye(a),I=[W("x",e[0].dataType,e[0].dims,v),W("skip",e[1].dataType,e[1].dims,v),W("gamma",e[2].dataType,e[2].dims,v)];h&&I.push(W("beta",e[3].dataType,e[3].dims,v)),$&&I.push(W("bias",e[4].dataType,e[4].dims,v)),I.push(K("output",e[0].dataType,u,v)),g&&I.push(K("meanOutput",1,p)),w&&I.push(K("invStdOutput",1,p)),b&&I.push(K("inputSkipBiasSum",e[0].dataType,u,v));let x=Te(e[0].dataType),A=E=>`\n      const hiddenSize: f32 = ${a};\n      const hiddenSizeVectorized: u32 = ${a/v};\n      const epsilon: f32 = ${t.epsilon};\n\n      ${E.declareVariables(...I)}\n\n      ${E.mainStart()}\n        ${E.guardAgainstOutOfBoundsWorkgroupSizes(d/a)}\n        let offset = global_idx * hiddenSizeVectorized;\n        var sum = ${Ge("f32",v)};\n        var squareSum = ${Ge("f32",v)};\n        for (var i: u32 = 0; i < hiddenSizeVectorized; i++) {\n          let skipValue = skip[offset + i];\n          let biasValue = ${$?"bias[i]":"0.0"};\n          let inputValue = x[offset + i];\n          let value = inputValue + skipValue + biasValue;\n          ${b?"inputSkipBiasSum[offset + i] = value;":""}\n          output[offset + i] = value;\n          let f32Value = ${Je(x,v,"value")};\n          sum += f32Value;\n          squareSum += f32Value * f32Value;\n        }\n        let mean = ${et("sum",v)} / hiddenSize;\n        let variance = sqrt(${et("squareSum",v)} / hiddenSize - mean * mean + epsilon);\n        ${g?"meanOutput[global_idx] = mean;":""}\n        ${w?"invStdOutput[global_idx] = 1.0 / variance;":""}\n        for (var i: u32 = 0; i < hiddenSizeVectorized; i++) {\n          output[offset + i] = (output[offset + i] - ${x}(mean)) / ${x}(variance) * gamma[i]\n           + ${h?"beta[i]":"0.0"};\n        }\n      }`,B=[{dims:u,dataType:e[0].dataType}];return r>1&&B.push({dims:p,dataType:1}),r>2&&B.push({dims:p,dataType:1}),r>3&&B.push({dims:n,dataType:e[0].dataType}),{name:"SkipLayerNormalization",shaderCache:{hint:t.cacheKey},getShaderSource:A,getRunData:()=>({outputs:B,dispatchGroup:{x:Math.ceil(d/a/64)}})}},qs=(e,t)=>{mc(e.inputs);let o=[0];e.outputCount>1&&o.push(-3),e.outputCount>2&&o.push(-3),e.outputCount>3&&o.push(3),e.compute(fc(e.inputs,t,e.outputCount,!1),{outputs:o})},Ks=e=>{let t=e.epsilon;return X({epsilon:t})}});var hc,tn,gc,Zs,yc,bc,Xs,Qs,Js=q(()=>{"use strict";ze();ye();Oe();be();hc=(e,t)=>{if(!e||e.length<1)throw new Error("too few inputs");if(t.axes.length!==0){if(t.axes.length!==t.starts.length||t.axes.length!==t.ends.length)throw new Error("axes, starts and ends must have the same length")}else if(t.starts.length!==t.ends.length)throw new Error("starts and ends must have the same length");e.slice(1).forEach((r,o)=>{if(e[o+1].dataType!==6&&e[o+1].dataType!==7)throw new Error(`Input ${o} must be an array of int32 or int64`)})},tn=(e,t)=>{let r=[];if(e.length>t)if(e[t].dataType===7)e[t].getBigInt64Array().forEach(o=>r.push(Number(o)));else if(e[t].dataType===6)e[t].getInt32Array().forEach(o=>r.push(Number(o)));else throw new Error(`Input ${t} must be an array of int32 or int64`);return r},gc=(e,t)=>{if(e.length>1){let r=tn(e,1),o=tn(e,2),n=tn(e,3);return n.length===0&&(n=[...Array(e[0].dims.length).keys()]),X({starts:r,ends:o,axes:n})}else return t},Zs=(e,t,r,o,n)=>{let s=e;return e<0&&(s+=r[o[t]]),n[t]<0?Math.max(0,Math.min(s,r[o[t]]-1)):Math.max(0,Math.min(s,r[o[t]]))},yc=(e,t,r,o)=>`fn calculateInputIndices(outputIndices: ${t.type.indices}) -> ${e.type.indices} {\n          var inputIndices: ${e.type.indices};\n          var carry = 0u;\n          for (var i = ${r.length}; i >= 0; i--) {\n            let input_shape_i = ${je("uniforms.input_shape","i",r.length)};\n            let steps_i = ${je("uniforms.steps","i",r.length)};\n            let signs_i = ${je("uniforms.signs","i",r.length)};\n            let starts_i = ${je("uniforms.starts","i",r.length)};\n            var outputIndex = ${o.length===1?"outputIndices":"outputIndices[i]"};\n            var inputIndex = outputIndex * steps_i + starts_i + carry;\n            carry = inputIndex / input_shape_i;\n            inputIndex = inputIndex % input_shape_i;\n            if (signs_i < 0) {\n              inputIndex = input_shape_i - inputIndex - 1u + starts_i;\n            }\n            ${r.length===1?"inputIndices":"inputIndices[i]"} = inputIndex;\n          }\n          return inputIndices;\n      }`,bc=(e,t)=>{let r=e[0].dims,o=D.size(r),n=t.axes.length>0?D.normalizeAxes(t.axes,r.length):[...Array(r.length).keys()],s=tn(e,4);s.forEach(x=>x!==0||(()=>{throw new Error("step cannot be 0")})),s.length===0&&(s=Array(n.length).fill(1));let u=t.starts.map((x,A)=>Zs(x,A,r,n,s)),d=t.ends.map((x,A)=>Zs(x,A,r,n,s));if(n.length!==u.length||n.length!==d.length)throw new Error("start, ends and axes should have the same number of elements");if(n.length!==r.length)for(let x=0;x<r.length;++x)n.includes(x)||(u.splice(x,0,0),d.splice(x,0,r[x]),s.splice(x,0,1));let a=s.map(x=>Math.sign(x));s.forEach((x,A,B)=>{if(x<0){let E=(d[A]-u[A])/x,V=u[A],P=V+E*s[A];u[A]=P,d[A]=V,B[A]=-x}});let p=r.slice(0);n.forEach((x,A)=>{p[x]=Math.ceil((d[x]-u[x])/s[x])});let h={dims:p,dataType:e[0].dataType},$=K("output",e[0].dataType,p.length),g=W("input",e[0].dataType,e[0].dims.length),w=D.size(p),b=[{name:"outputSize",type:"u32"},{name:"starts",type:"u32",length:u.length},{name:"signs",type:"i32",length:a.length},{name:"steps",type:"u32",length:s.length}],v=[{type:"uint32",data:w},{type:"uint32",data:u},{type:"int32",data:a},{type:"uint32",data:s},...ne(e[0].dims),...ne(p)],I=x=>`\n      ${x.registerUniforms(b).declareVariables(g,$)}\n        ${yc(g,$,r,p)}\n        ${x.mainStart()}\n          ${x.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n          let outputIndices = ${$.offsetToIndices("global_idx")};\n          let inputIndices = calculateInputIndices(outputIndices);\n          ${$.setByOffset("global_idx",g.getByIndices("inputIndices"))}\n      }`;return{name:"Slice",shaderCache:{hint:`${a.length}_${u.length}_${s.length}`,inputDependencies:["rank"]},getShaderSource:I,getRunData:()=>({outputs:[h],dispatchGroup:{x:Math.ceil(o/64)},programUniforms:v})}},Xs=(e,t)=>{hc(e.inputs,t);let r=gc(e.inputs,t);e.compute(bc(e.inputs,r),{inputs:[0]})},Qs=e=>{let t=e.starts,r=e.ends,o=e.axes;return X({starts:t,ends:r,axes:o})}});var wc,vc,eu,tu,ru=q(()=>{"use strict";ye();Oe();be();wc=e=>{if(!e||e.length!==1)throw new Error("Softmax op requires 1 input.")},vc=(e,t)=>{let r=e.dims,o=D.size(r),n=64,s=t.axis;if(s<0&&(s=r.length+s),s<r.length-1)throw new Error("softmax only supports last axis for now.");let u=r[s],d=o/u,a=Ye(u),p=u/a,h=(I,x)=>x===4?`max(max(${I}.x, ${I}.y), max(${I}.z, ${I}.w))`:x===2?`max(${I}.x, ${I}.y)`:x===3?`max(max(${I}.x, ${I}.y), ${I}.z)`:I,$=W("x",e.dataType,e.dims,a),g=K("result",e.dataType,e.dims,a),w=$.type.value,b=Te(e.dataType)==="f32"?`var threadMax = ${w}(-3.402823e+38f);`:`var threadMax = ${w}(-65504.0h);`,v=I=>`\n      var<workgroup> rowMaxShared : ${w};\n      var<workgroup> rowSumShared : ${w};\n      var<workgroup> threadShared : array<${w}, ${n}>;\n\n      fn getValue(row: i32, col: i32, row_stride: i32) -> ${w} {\n        let index = row * row_stride + col;\n        return x[index];\n      }\n\n      fn setValue(row: i32, col: i32, row_stride: i32, value: ${w}) {\n        let index = row * row_stride + col;\n        result[index] = value;\n      }\n      ${I.registerUniform("packedCols","i32").declareVariables($,g)}\n      ${I.mainStart()}\n        let gindex = i32(global_id.x);\n        let lindex = i32(local_id.x);\n        const wg = ${n};\n        let row = gindex / wg;\n        let cols = uniforms.packedCols;\n        let row_stride : i32 = uniforms.packedCols;\n\n        // find the rows max\n        ${b}\n        for (var col = lindex; col < cols; col += wg) {\n          let value = getValue(row, col, row_stride);\n          threadMax = max(threadMax, value);\n        }\n        if (lindex < cols) {\n          threadShared[lindex] = threadMax;\n        }\n        workgroupBarrier();\n\n        var reduceSize = min(cols, wg);\n        for (var currSize = reduceSize >> 1;  currSize > 0; currSize = reduceSize >> 1) {\n          reduceSize = currSize + (reduceSize & 1);\n          if (lindex < currSize) {\n            threadShared[lindex] = max(threadShared[lindex], threadShared[lindex + reduceSize]);\n          }\n          workgroupBarrier();\n        }\n        if (lindex == 0) {\n          rowMaxShared = ${w}(${h("threadShared[0]",a)});\n        }\n        workgroupBarrier();\n\n        // find the rows sum\n        var threadSum = ${w}(0.0);\n        for (var col = lindex; col < cols; col += wg) {\n          let subExp = exp(getValue(row, col, row_stride) - rowMaxShared);\n          threadSum += subExp;\n        }\n        threadShared[lindex] = threadSum;\n        workgroupBarrier();\n\n        for (var currSize = wg >> 1;  currSize > 0; currSize = currSize >> 1) {\n          if (lindex < currSize) {\n            threadShared[lindex] = threadShared[lindex] + threadShared[lindex + currSize];\n          }\n          workgroupBarrier();\n        }\n        if (lindex == 0) {\n          rowSumShared = ${w}(${et("threadShared[0]",a)});\n        }\n        workgroupBarrier();\n\n        // calculate final value for each element in the row\n        for (var col = lindex; col < cols; col += wg) {\n          let value = exp(getValue(row, col, row_stride) - rowMaxShared) / rowSumShared;\n          setValue(row, col, row_stride, value);\n        }\n      }`;return{name:"Softmax",shaderCache:{hint:`${a}`,inputDependencies:["type"]},getRunData:()=>({outputs:[{dims:r,dataType:e.dataType}],dispatchGroup:{x:d},programUniforms:[{type:"uint32",data:p}]}),getShaderSource:v}},eu=(e,t)=>{wc(e.inputs),e.compute(vc(e.inputs[0],t))},tu=e=>X({axis:e.axis})});var $c,Sc,xc,Cc,Ic,nu,ou,au=q(()=>{"use strict";ye();Oe();be();$c=e=>{if(!e||e.length<1)throw new Error("too few inputs")},Sc=(e,t)=>{let r=[],o=t.numOutputs;return e[1].dims[0]>0&&(e[1].getBigInt64Array().forEach(n=>r.push(Number(n))),o=r.length),X({numOutputs:o,axis:t.axis,splitSizes:r})},xc=e=>`\nfn calculateOutputIndex(index: u32) -> u32 {\n    for (var i: u32 = 0u; i < ${e}u; i += 1u ) {\n    if (index < sizeInConcatAxis[i]) {\n        return i;\n    }\n    }\n    return ${e}u;\n}`,Cc=e=>{let t=e.length,r=[];for(let o=0;o<t;++o){let n=e[o].setByIndices("indices","input[global_idx]");t===1?r.push(n):o===0?r.push(`if (outputNumber == ${o}u) { ${n} }`):o===t-1?r.push(`else { ${n} }`):r.push(`else if (outputNumber == ${o}) { ${n} }`)}return`\n      fn writeBufferData(outputNumber: u32, indices: ${e[0].type.indices}, global_idx: u32) {\n        ${r.join(`\n`)}\n      }`},Ic=(e,t)=>{let r=e[0].dims,o=D.size(r),n=e[0].dataType,s=r.length,u=t.axis,d=u<0?r.length+u:u,a=new Array(t.numOutputs),p=W("input",n,r),h=new Array(t.numOutputs),$=[],g=[],w=0;for(let I=0;I<t.numOutputs;I++){w+=t.splitSizes[I],h[I]=w;let x=r.slice();x[t.axis]=t.splitSizes[I],g.push(x),a[I]=K(`output${I}`,n,g[I]),$.push({dims:g[I],dataType:e[0].dataType})}let b=s<2?"indices":`indices[${d}]`,v=I=>`\n  ${I.declareVariables(p,...a)}\n  const sizeInConcatAxis = array<u32, ${h.length}>(${h.map(x=>`${x}u`).join(",")});\n  ${xc(h.length)}\n  ${Cc(a)}\n\n  ${I.mainStart()}\n    ${I.guardAgainstOutOfBoundsWorkgroupSizes(o)}\n\n    var indices = ${p.offsetToIndices("global_idx")};\n    let outputNumber = calculateOutputIndex(${b});\n    if (outputNumber != 0) {\n        ${b} -= sizeInConcatAxis[outputNumber - 1u];\n    }\n    writeBufferData(outputNumber, indices, global_idx);\n  }`;return{name:"Split",shaderCache:{hint:t.cacheKey},getShaderSource:v,getRunData:()=>({outputs:$,dispatchGroup:{x:Math.ceil(o/64)}})}},nu=(e,t)=>{$c(e.inputs);let r=e.inputs.length===1?t:Sc(e.inputs,t);e.compute(Ic(e.inputs,r),{inputs:[0]})},ou=e=>{let t=e.axis,r=e.splitSizes,o=e.numOutputs<0?r.length:e.numOutputs;if(o!==r.length)throw new Error("numOutputs and splitSizes lengh must be equal");return X({axis:t,numOutputs:o,splitSizes:r})}});var iu,Ac,Tc,_c,su,uu=q(()=>{"use strict";ze();ye();be();iu=e=>Array.from(e.getBigInt64Array(),Number),Ac=e=>{if(!e||e.length!==2)throw new Error("Tile requires 2 inputs.");if(e[0].dataType!==1&&e[0].dataType!==6&&e[0].dataType!==12)throw new Error("Tile only support float, int32, and uint32 data types");if(e[1].dataType!==7)throw new Error("Tile `repeats` input should be of int64 data type");if(e[1].dims.length!==1)throw new Error("Tile `repeats` input should be 1-D");if(iu(e[1]).length!==e[0].dims.length)throw new Error("Tile `repeats` input should have same number of elements as rank of input data tensor")},Tc=(e,t)=>{let r=[];for(let o=0;o<e.length;++o)r.push(e[o]*t[o]);return r},_c=e=>{let t=e[0].dims,r=iu(e[1]),o=Tc(t,r),n=D.size(o),s=e[0].dataType,u=W("input",s,t),d=K("output",s,o),a=p=>`\n      const inputShape = ${u.indices(...t)};\n      ${p.declareVariables(u,d)}\n      ${p.mainStart()}\n      ${p.guardAgainstOutOfBoundsWorkgroupSizes(n)}\n      let outputIndices = ${d.offsetToIndices("global_idx")};\n      var inputIndices: ${u.type.indices};\n      for (var i = 0; i < ${t.length}; i++) {\n        let inputDimValue = ${d.indicesGet("outputIndices","i")}  % ${u.indicesGet("inputShape","i")};\n\n        ${u.indicesSet("inputIndices","i","inputDimValue")}\n      }\n      ${d.setByOffset("global_idx",u.getByIndices("inputIndices"))}\n    }`;return{name:"Tile",shaderCache:{hint:`${r}`},getRunData:()=>({outputs:[{dims:o,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(n/64)}}),getShaderSource:a}},su=e=>{Ac(e.inputs),e.compute(_c(e.inputs),{inputs:[0]})}});var Ec,Oc,lu,du=q(()=>{"use strict";ze();ye();be();Ec=(e,t,r,o,n)=>{let s=D.size(r),u=Math.ceil(s/4),d=K("outputData",n,r,4),a=W("aData",t[1].dataType,t[1].dims,4),p=W("bData",t[2].dataType,t[2].dims,4),h=W("cData",t[0].dataType,t[0].dims,4),$,g=(w,b,v)=>`select(${b}, ${w}, ${v})`;if(!o)$=d.setByOffset("global_idx",g(a.getByOffset("global_idx"),p.getByOffset("global_idx"),h.getByOffset("global_idx")));else{let w=(b,v,I="")=>{let x=`aData[indexA${v}][componentA${v}]`,A=`bData[indexB${v}][componentB${v}]`,B=`bool(cData[indexC${v}] & ${4278190080>>>(3-v)*8}u)`;return`\n            let outputIndices${v} = ${d.offsetToIndices(`global_idx * 4u + ${v}u`)};\n            let offsetA${v} = ${a.broadcastedIndicesToOffset(`outputIndices${v}`,d)};\n            let offsetB${v} = ${p.broadcastedIndicesToOffset(`outputIndices${v}`,d)};\n            let offsetC${v} = ${h.broadcastedIndicesToOffset(`outputIndices${v}`,d)};\n            let indexA${v} = offsetA${v} / 4u;\n            let indexB${v} = offsetB${v} / 4u;\n            let indexC${v} = offsetC${v} / 4u;\n            let componentA${v} = offsetA${v} % 4u;\n            let componentB${v} = offsetB${v} % 4u;\n            ${b}[${v}] = ${I}(${g(x,A,B)});\n          `};n===9?$=`\n            var data = vec4<u32>(0);\n            ${w("data",0,"u32")}\n            ${w("data",1,"u32")}\n            ${w("data",2,"u32")}\n            ${w("data",3,"u32")}\n            outputData[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));`:$=`\n            ${w("outputData[global_idx]",0)}\n            ${w("outputData[global_idx]",1)}\n            ${w("outputData[global_idx]",2)}\n            ${w("outputData[global_idx]",3)}\n          `}return`\n        ${e.declareVariables(h,a,p,d)}\n        ${e.mainStart()}\n        ${e.guardAgainstOutOfBoundsWorkgroupSizes(u)}\n        ${$}\n      }`},Oc=e=>{let t=e[1].dims,r=e[2].dims,o=e[0].dims,n=e[1].dataType,s=!(D.areEqual(t,r)&&D.areEqual(r,o)),u=t,d=D.size(t);if(s){let a=st.calcShape(st.calcShape(t,r,!1),o,!1);if(!a)throw new Error("Can\'t perform where op on the given tensors");u=a,d=D.size(u)}return{name:"Where",getShaderSource:a=>Ec(a,e,u,s,n),getRunData:()=>({outputs:[{dims:u,dataType:n}],dispatchGroup:{x:Math.ceil(d/64/4)}})}},lu=e=>{e.compute(Oc(e.inputs))}});var cu,pu=q(()=>{"use strict";ga();kn();Da();Va();yi();_i();ki();zn();Li();qi();Qi();ts();os();ss();ds();ms();gs();bs();Ss();Is();Ns();Gs();Wr();js();Ys();Js();ru();au();uu();Wt();Rn();du();cu=new Map([["Abs",[Wa]],["Acos",[Ua]],["Acosh",[Na]],["Add",[bi]],["ArgMax",[ha,On]],["ArgMin",[fa,On]],["Asin",[Ha]],["Asinh",[Ga]],["Atan",[La]],["Atanh",[Fa]],["Attention",[ba,ya]],["AveragePool",[Ps,ks]],["BatchNormalization",[Ma]],["BiasAdd",[za]],["BiasSplitGelu",[gi]],["Cast",[qa,ja]],["Ceil",[Ya]],["Clip",[Ka]],["Concat",[Ei,Oi]],["Conv",[Wn,Vn]],["ConvTranspose",[Gi,Hi]],["Cos",[Za]],["Cosh",[Xa]],["CumSum",[Fi,ji]],["Div",[wi]],["Einsum",[Zi,Xi]],["Elu",[Qa,jr]],["Equal",[vi]],["Erf",[Ja]],["Exp",[ei]],["Expand",[es]],["Floor",[ti]],["FusedConv",[Wn,Vn]],["Gather",[ns,rs]],["GatherElements",[is,as]],["Gelu",[ri]],["Gemm",[us,ls]],["GlobalAveragePool",[Ms,Bs]],["GlobalMaxPool",[Us,Ws]],["Greater",[Ci]],["GreaterOrEqual",[Ai]],["InstanceNormalization",[ps,cs]],["LayerNormalization",[hs,fs]],["LeakyRelu",[ni,jr]],["Less",[Ii]],["LessOrEqual",[Ti]],["Log",[hi]],["MatMul",[ys]],["MaxPool",[zs,Vs]],["Mul",[$i]],["MultiHeadAttention",[$s,vs]],["Neg",[ai]],["Not",[oi]],["Pad",[xs,Cs]],["Pow",[Si]],["Range",[Hs]],["Reciprocal",[ii]],["ReduceMin",[ua,rt]],["ReduceMean",[na,rt]],["ReduceMax",[sa,rt]],["ReduceSum",[da,rt]],["ReduceProd",[la,rt]],["ReduceL1",[oa,rt]],["ReduceL2",[aa,rt]],["ReduceLogSum",[pa,rt]],["ReduceLogSumExp",[ia,rt]],["ReduceSumSquare",[ca,rt]],["Relu",[si]],["Resize",[Ls,Fs]],["Sigmoid",[ui]],["Sin",[li]],["Sinh",[di]],["Slice",[Xs,Qs]],["SkipLayerNormalization",[qs,Ks]],["Split",[nu,ou]],["Sqrt",[ci]],["Softmax",[eu,tu]],["Sub",[xi]],["Tan",[pi]],["Tanh",[mi]],["ThresholdedRelu",[fi,jr]],["Tile",[su]],["Transpose",[Lo,Fo]],["Where",[lu]]])});var rn,mu=q(()=>{"use strict";ze();vt();be();rn=class{constructor(t){this.backend=t;this.repo=new Map,this.attributesBound=!1}getArtifact(t){return this.repo.get(t)}setArtifact(t,r){this.repo.set(t,r)}run(t,r,o,n,s,u,d){let a=this.backend.device,p=this.backend.getComputePassEncoder();p.setPipeline(t.computePipeline);let h=[];for(let g of n)h.push({binding:h.length,resource:{buffer:g.buffer}});for(let g of s)h.push({binding:h.length,resource:{buffer:g.buffer}});d&&h.push({binding:h.length,resource:d});let $=a.createBindGroup({layout:t.computePipeline.getBindGroupLayout(0),entries:h,label:t.programInfo.name});if(p.setBindGroup(0,$),p.dispatchWorkgroups(...u),this.backend.pendingDispatchNumber++,this.backend.isQueryEnabled()){typeof this.backend.queryData>"u"&&(this.backend.queryData=this.backend.gpuDataManager.create(this.backend.querySetCount*8,GPUBufferUsage.COPY_SRC|GPUBufferUsage.QUERY_RESOLVE));let g=this.backend.gpuDataManager.create(this.backend.querySetCount*8,GPUBufferUsage.MAP_READ|GPUBufferUsage.COPY_DST);this.backend.endComputePass(),this.backend.getCommandEncoder().resolveQuerySet(this.backend.querySet,0,2,this.backend.queryData.buffer,0),this.backend.getCommandEncoder().copyBufferToBuffer(this.backend.queryData.buffer,0,g.buffer,0,this.backend.querySetCount*8),this.backend.flush();let w=this.backend.currentKernelId,b=this.backend.kernels.get(w),v=`[${b[0]}] ${b[1]}`;g.buffer.mapAsync(GPUMapMode.READ).then(()=>{let I=new BigUint64Array(g.buffer.getMappedRange()),x=I[0],A=I[1];g.buffer.unmap(),typeof this.backend.queryTimeBase>"u"&&(this.backend.queryTimeBase=x);let B=Number(x-this.backend.queryTimeBase),E=Number(A-this.backend.queryTimeBase);if(!Number.isSafeInteger(B)||!Number.isSafeInteger(E))throw new RangeError("incorrect timestamp range");this.backend.gpuDataManager.release(g.id);let V="";r.forEach((z,U)=>{V+=`input[${U}]: [${z.dims}] | ${ir(z.dataType)}, `});let P="";o.forEach((z,U)=>{P+=`output[${U}]: [${z.dims}] | ${ir(z.dataType)}, `}),console.log(`[profiling] kernel "${w}|${v}|${t.programInfo.name}" ${V}${P}execution time: ${E-B} ns`)})}this.backend.pendingDispatchNumber>=16&&this.backend.flush()}dispose(){}build(t,r){let o=this.backend.device,n=[];o.features.has("shader-f16")&&n.push("enable f16;");let s=Ho(r),u=t.getShaderSource(s),d=`${n.join(`\n`)}\n${s.additionalImplementations}\n${u}`,a=o.createShaderModule({code:d,label:t.name});Pe("verbose",()=>`[WebGPU] ${t.name} shader code: ${d}`);let p=o.createComputePipeline({compute:{module:a,entryPoint:"main"},layout:"auto",label:t.name});return{programInfo:t,computePipeline:p}}normalizeDispatchGroupSize(t){let r=typeof t=="number"?t:t.x,o=typeof t=="number"?1:t.y||1,n=typeof t=="number"?1:t.z||1,s=this.backend.device.limits.maxComputeWorkgroupsPerDimension;if(r<=s&&o<=s&&n<=s)return[r,o,n];let u=r*o*n,d=Math.ceil(Math.sqrt(u));if(d>s){if(d=Math.ceil(Math.cbrt(u)),d>s)throw new Error("Total dispatch size exceeds WebGPU maximum.");return[d,d,d]}else return[d,d,1]}}});var kc,Pc,nn,fu=q(()=>{"use strict";vt();Mo();Wo();pu();mu();kc=(e,t)=>{if(t.length!==e.length)throw new Error(`inputDependencies length ${t.length} is not equal to inputTensors length ${e.length}.`);let r=[];for(let o=0;o<e.length;++o){let n=e[o].dataType;switch(t[o]){case"none":{r.push("");break}case"type":{r.push(`${n}`);break}case"rank":{let s=e[o].dims.length;r.push(`${n};${s}`);break}case"dims":{let s=e[o].dims.join(",");r.push(`${n};${s}`);break}default:throw new Error(`unsupported input dependency: ${t[o]}`)}}return r.join("|")},Pc=(e,t,r)=>{let o=e.name;return e.shaderCache?.hint&&(o+="["+e.shaderCache.hint+"]"),o+=":"+r+`:${kc(t,e.shaderCache?.inputDependencies??new Array(t.length).fill("dims"))}`,o},nn=class{constructor(){this.currentKernelId=null;this.commandEncoder=null;this.computePassEncoder=null;this.pendingDispatchNumber=0;this.querySetCount=2;this.sessionExternalDataMapping=new Map}get currentKernelCustomData(){if(this.currentKernelId===null)throw new Error("currentKernelCustomData(): currentKernelId is null. (should not happen)");let t=this.kernelCustomData.get(this.currentKernelId);return t||(t={},this.kernelCustomData.set(this.currentKernelId,t)),t}async initialize(t){if(!navigator.gpu)throw new Error("WebGpuBackend: WebGPU is not available.");let r=await navigator.gpu.requestAdapter();if(!r)throw new Error("WebGpuBackend: Failed to get GPU adapter.");this.env=t;let o=[],n={requiredLimits:{maxComputeWorkgroupStorageSize:r.limits.maxComputeWorkgroupStorageSize,maxComputeWorkgroupsPerDimension:r.limits.maxComputeWorkgroupsPerDimension,maxStorageBufferBindingSize:r.limits.maxStorageBufferBindingSize,maxBufferSize:r.limits.maxBufferSize,maxComputeInvocationsPerWorkgroup:r.limits.maxComputeInvocationsPerWorkgroup,maxComputeWorkgroupSizeX:r.limits.maxComputeWorkgroupSizeX,maxComputeWorkgroupSizeY:r.limits.maxComputeWorkgroupSizeY,maxComputeWorkgroupSizeZ:r.limits.maxComputeWorkgroupSizeZ},requiredFeatures:o};r.features.has("timestamp-query")&&o.push("timestamp-query"),r.features.has("shader-f16")&&o.push("shader-f16"),this.device=await r.requestDevice(n),this.gpuDataManager=Vo(this),this.programManager=new rn(this),this.kernels=new Map,this.kernelPersistentData=new Map,this.kernelCustomData=new Map,Ro(t.logLevel,!!t.debug),this.device.onuncapturederror=s=>{s.error instanceof GPUValidationError&&console.error(`An uncaught WebGPU validation error was raised: ${s.error.message}`)},Object.defineProperty(this.env.webgpu,"device",{value:this.device})}dispose(){typeof this.querySet<"u"&&this.querySet.destroy(),this.gpuDataManager.dispose()}getCommandEncoder(){return this.commandEncoder||(this.commandEncoder=this.device.createCommandEncoder()),this.commandEncoder}getComputePassEncoder(){if(!this.computePassEncoder){let t={};this.isQueryEnabled()&&(typeof this.querySet>"u"&&(this.querySet=this.device.createQuerySet({type:"timestamp",count:this.querySetCount})),t.timestampWrites={querySet:this.querySet,beginningOfPassWriteIndex:0,endOfPassWriteIndex:1}),this.computePassEncoder=this.getCommandEncoder().beginComputePass(t)}return this.computePassEncoder}endComputePass(){this.computePassEncoder&&(this.computePassEncoder.end(),this.computePassEncoder=null)}flush(){this.commandEncoder&&(this.endComputePass(),this.device.queue.submit([this.getCommandEncoder().finish()]),this.gpuDataManager.refreshPendingBuffers(),this.commandEncoder=null,this.pendingDispatchNumber=0)}isQueryEnabled(){return!!(this.device.features.has("timestamp-query")&&this.env.webgpu.profilingMode==="default")}run(t,r,o,n,s){let u=[];for(let A=0;A<r.length;++A){let B=this.gpuDataManager.get(r[A].data);if(!B)throw new Error(`no GPU data for input: ${r[A].data}`);u[A]=B}let{outputs:d,dispatchGroup:a,programUniforms:p}=t.getRunData(r),h=o.length===0?d.map((A,B)=>B):o;if(h.length!==d.length)throw new Error(`Output size ${h.length} must be equal to ${d.length}.`);let $=[],g=[];for(let A=0;A<d.length;++A){if(!Number.isInteger(h[A])||h[A]<-3||h[A]>=d.length)throw new Error(`Invalid output index: ${h[A]}`);if(h[A]===-3)continue;let B=h[A]===-1,E=h[A]===-2,V=B||E?s(d[A].dataType,d[A].dims):n(h[A],d[A].dataType,d[A].dims),P=this.gpuDataManager.get(V.data);if(!P)throw new Error(`no GPU data for output: ${V.data}`);if(B&&this.temporaryData.push(P),E){let z=this.kernelPersistentData.get(this.currentKernelId);z||(z=[],this.kernelPersistentData.set(this.currentKernelId,z)),z.push(P)}$.push(V),g.push(P)}let w;if(p){let A=0,B=[];p.forEach(z=>{let U=typeof z.data=="number"?[z.data]:z.data;if(U.length===0)return;let F=U.length<=2?U.length*4:16;A=Math.ceil(A/F)*F,B.push(A),A+=U.length>4?Math.ceil(U.length/4)*16:U.length*4});let E=16;A=Math.ceil(A/E)*E;let V=new ArrayBuffer(A);p.forEach((z,U)=>{let F=B[U],te=typeof z.data=="number"?[z.data]:z.data;z.type==="int32"?new Int32Array(V,F,te.length).set(te):z.type==="uint32"?new Uint32Array(V,F,te.length).set(te):new Float32Array(V,F,te.length).set(te)});let P=this.gpuDataManager.create(A,GPUBufferUsage.COPY_DST|GPUBufferUsage.UNIFORM);this.device.queue.writeBuffer(P.buffer,0,V,0,A),this.gpuDataManager.release(P.id),w={offset:0,size:A,buffer:P.buffer}}let b=this.programManager.normalizeDispatchGroupSize(a),v=b[1]===1&&b[2]===1,I=Pc(t,r,v),x=this.programManager.getArtifact(I);return x||(x=this.programManager.build(t,b),this.programManager.setArtifact(I,x),Pe("info",()=>`[artifact] key: ${I}, programName: ${t.name}`)),Pe("info",()=>`[ProgramManager] run "${t.name}" (key=${I}) with ${b[0]}x${b[1]}x${b[2]}`),this.programManager.run(x,r,$,u,g,b,w),$}upload(t,r){this.gpuDataManager.upload(t,r)}memcpy(t,r){this.gpuDataManager.memcpy(t,r)}async download(t,r){await this.gpuDataManager.download(t,r)}alloc(t){return this.gpuDataManager.create(t).id}free(t){return this.gpuDataManager.release(t)}createKernel(t,r,o,n){let s=cu.get(t);if(!s)throw new Error(`kernel not implemented: ${t}`);this.kernels.set(r,[t,n,s[0],[s[1],o]])}releaseKernel(t){let r=this.kernelPersistentData.get(t);if(r){for(let o of r)this.gpuDataManager.release(o.id);this.kernelPersistentData.delete(t)}this.kernelCustomData.delete(t),this.kernels.delete(t)}computeKernel(t,r,o){let n=this.kernels.get(t);if(!n)throw new Error(`kernel not created: ${t}`);let[s,u,d,a]=n;if(this.currentKernelId!==null)throw new Error(`kernel "[${s}] ${u}" is not allowed to be called recursively`);this.currentKernelId=t,a[0]&&(a[1]=a[0](a[1]),a[0]=void 0),Pe("info",()=>`[WebGPU] Start to run kernel "[${s}] ${u}"...`);let p=this.env.debug;this.temporaryData=[];try{return p&&this.device.pushErrorScope("validation"),d(r,a[1]),0}catch(h){return o.push(Promise.resolve(`[WebGPU] Kernel "[${s}] ${u}" failed. ${h}`)),1}finally{p&&o.push(this.device.popErrorScope().then(h=>h?`GPU validation error for kernel "[${s}] ${u}": ${h.message}`:null));for(let h of this.temporaryData)this.gpuDataManager.release(h.id);this.temporaryData=[],this.currentKernelId=null}}registerBuffer(t,r,o,n){let s=this.sessionExternalDataMapping.get(t);s||(s=new Map,this.sessionExternalDataMapping.set(t,s));let u=s.get(r),d=this.gpuDataManager.registerExternalBuffer(o,n,u?.[1]);return s.set(r,[d,o]),d}unregisterBuffers(t){let r=this.sessionExternalDataMapping.get(t);r&&(r.forEach(o=>this.gpuDataManager.unregisterExternalBuffer(o[1])),this.sessionExternalDataMapping.delete(t))}getBuffer(t){let r=this.gpuDataManager.get(t);if(!r)throw new Error(`no GPU data for buffer: ${t}`);return r.buffer}createDownloader(t,r,o){return async()=>{let n=await xn(this,t,r);return Bo(n.buffer,o)}}}});var hu={};kr(hu,{init:()=>Rc});var pr,Fn,Rc,gu=q(()=>{"use strict";ze();fu();vt();ye();pr=class e{constructor(t,r,o,n){this.module=t;this.dataType=r;this.data=o;this.dims=n}getFloat32Array(){if(this.dataType!==1)throw new Error("Invalid data type");let t=D.size(this.dims);return t===0?new Float32Array:new Float32Array(this.module.HEAP8.buffer,this.data,t)}getBigInt64Array(){if(this.dataType!==7)throw new Error("Invalid data type");let t=D.size(this.dims);return t===0?new BigInt64Array:new BigInt64Array(this.module.HEAP8.buffer,this.data,t)}getInt32Array(){if(this.dataType!==6)throw new Error("Invalid data type");let t=D.size(this.dims);return t===0?new Int32Array:new Int32Array(this.module.HEAP8.buffer,this.data,t)}reshape(t){if(D.size(t)!==D.size(this.dims))throw new Error("Invalid new shape");return new e(this.module,this.dataType,this.data,t)}},Fn=class{constructor(t,r,o){this.module=t;this.backend=r;this.customDataOffset=0;this.customDataSize=0;let n=t.HEAPU32,s=o>>2;this.opKernelContext=n[s++];let u=n[s++];this.outputCount=n[s++],this.customDataOffset=n[s++],this.customDataSize=n[s++];let d=[];for(let a=0;a<u;a++){let p=n[s++],h=n[s++],$=n[s++],g=[];for(let w=0;w<$;w++)g.push(n[s++]);d.push(new pr(t,p,h,g))}this.inputs=d}get kernelCustomData(){return this.backend.currentKernelCustomData}get customDataBuffer(){return this.module.HEAPU8.subarray(this.customDataOffset,this.customDataOffset+this.customDataSize)}compute(t,r){let o=r?.inputs?.map(d=>typeof d=="number"?this.inputs[d]:d)??this.inputs,n=r?.outputs??[],s=(d,a,p)=>new pr(this.module,a,this.output(d,p),p),u=(d,a)=>{let p=sr(d);if(!p)throw new Error(`Unsupported data type: ${d}`);let h=p*D.size(a);return new pr(this.module,d,this.backend.gpuDataManager.create(h).id,a)};return this.backend.run(t,o,n,s,u)}output(t,r){let o=this.module.stackSave();try{let n=this.module.stackAlloc((1+r.length)*4),s=n>>2;this.module.HEAPU32[s++]=r.length;for(let u=0;u<r.length;u++)this.module.HEAPU32[s++]=r[u];return this.module._JsepOutput(this.opKernelContext,t,n)}catch(n){throw new Error(`Failed to generate kernel\'s output[${t}] with dims [${r}]. If you are running with pre-allocated output, please make sure the output type/dims are correct. Error: ${n}`)}finally{this.module.stackRestore(o)}}},Rc=async(e,t)=>{let r=e.jsepInit;if(r&&navigator.gpu){if(!t.wasm.simd)throw new Error("Not supported for WebGPU=ON and SIMD=OFF. Please set `env.wasm.simd` to true when using WebGPU EP");let o=new nn;await o.initialize(t),r(o,n=>o.alloc(n),n=>o.free(n),(n,s,u,d=!1)=>{if(d)Pe("verbose",()=>`[WebGPU] jsepCopyGpuToGpu: src=${n}, dst=${s}, size=${u}`),o.memcpy(n,s);else{Pe("verbose",()=>`[WebGPU] jsepCopyCpuToGpu: dataOffset=${n}, gpuDataId=${s}, size=${u}`);let a=e.HEAPU8.subarray(n,n+u);o.upload(s,a)}},async(n,s,u)=>{Pe("verbose",()=>`[WebGPU] jsepCopyGpuToCpu: gpuDataId=${n}, dataOffset=${s}, size=${u}`),await o.download(n,()=>e.HEAPU8.subarray(s,s+u))},(n,s,u)=>o.createKernel(n,s,u,t.debug||t.webgpu.profilingMode==="default"?e.UTF8ToString(e._JsepGetNodeName(s)):`${s}`),n=>o.releaseKernel(n),(n,s,u,d)=>{Pe("verbose",()=>`[WebGPU] jsepRun: sessionHandle=${u}, kernel=${n}, contextDataOffset=${s}`);let a=new Fn(e,o,s);return o.computeKernel(n,a,d)})}}});var Ao;Ao=go();var qu=xo(),bn,wn=!1,Pr=!1,Io=!1,Ku=()=>{try{return typeof SharedArrayBuffer>"u"?!1:(typeof MessageChannel<"u"&&new MessageChannel().port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11])))}catch{return!1}},Yu=()=>{try{return WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,30,1,28,0,65,0,253,15,253,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,186,1,26,11]))}catch{return!1}},Zu=(e,t)=>e?t?"ort-wasm-simd-threaded.wasm":"ort-wasm-simd.wasm":t?"ort-wasm-threaded.wasm":"ort-wasm.wasm",To=async e=>{if(wn)return Promise.resolve();if(Pr)throw new Error("multiple calls to \'initializeWebAssembly()\' detected.");if(Io)throw new Error("previous call to \'initializeWebAssembly()\' failed.");Pr=!0;let t=e.initTimeout,r=e.numThreads,o=e.simd,n=r>1&&Ku(),s=o&&Yu(),u=e.wasmPaths,d=typeof u=="string"?u:void 0,a=Zu(s,n),p=typeof u=="object"?u[a]:void 0,h=!1,$=[];if(t>0&&$.push(new Promise(g=>{setTimeout(()=>{h=!0,g()},t)})),$.push(new Promise((g,w)=>{let b=n?qu:Ao,v={locateFile:(I,x)=>{if(n&&I.endsWith(".worker.js")&&typeof Blob<"u")return URL.createObjectURL(new Blob([Co()],{type:"text/javascript"}));if(I.endsWith(".wasm")){if(p)return p;let A=d??x;return a==="ort-wasm-simd.wasm"?A+"ort-wasm-simd.jsep.wasm":a==="ort-wasm-simd-threaded.wasm"?A+"ort-wasm-simd-threaded.jsep.wasm":A+a}return x+I}};if(n)if(typeof Blob>"u")v.mainScriptUrlOrBlob=(void 0)(__dirname,"ort-wasm-threaded.js");else{let I=`var ortWasmThreaded=${b.toString()};`;v.mainScriptUrlOrBlob=new Blob([I],{type:"text/javascript"})}b(v).then(I=>{Pr=!1,wn=!0,bn=I,g()},I=>{Pr=!1,Io=!0,w(I)})})),await Promise.race($),h)throw new Error(`WebAssembly backend initializing failed due to timeout: ${t}ms`)},Be=()=>{if(wn&&bn)return bn;throw new Error("WebAssembly is not initialized yet.")};var De=(e,t)=>{let r=Be(),o=r.lengthBytesUTF8(e)+1,n=r._malloc(o);return r.stringToUTF8(e,n,o),t.push(n),n},ar=(e,t,r,o)=>{if(typeof e=="object"&&e!==null){if(r.has(e))throw new Error("Circular reference in options");r.add(e)}Object.entries(e).forEach(([n,s])=>{let u=t?t+n:n;if(typeof s=="object")ar(s,u+".",r,o);else if(typeof s=="string"||typeof s=="number")o(u,s.toString());else if(typeof s=="boolean")o(u,s?"1":"0");else throw new Error(`Can\'t handle extra config type: ${typeof s}`)})},Ee=e=>{let t=Be(),r=t.stackSave();try{let o=t.stackAlloc(8);t._OrtGetLastError(o,o+4);let n=t.HEAP32[o/4],s=t.HEAPU32[o/4+1],u=s?t.UTF8ToString(s):"";throw new Error(`${e} ERROR_CODE: ${n}, ERROR_MESSAGE: ${u}`)}finally{t.stackRestore(r)}};var _o=e=>{let t=Be(),r=0,o=[],n=e||{};try{if(e?.logSeverityLevel===void 0)n.logSeverityLevel=2;else if(typeof e.logSeverityLevel!="number"||!Number.isInteger(e.logSeverityLevel)||e.logSeverityLevel<0||e.logSeverityLevel>4)throw new Error(`log serverity level is not valid: ${e.logSeverityLevel}`);if(e?.logVerbosityLevel===void 0)n.logVerbosityLevel=0;else if(typeof e.logVerbosityLevel!="number"||!Number.isInteger(e.logVerbosityLevel))throw new Error(`log verbosity level is not valid: ${e.logVerbosityLevel}`);e?.terminate===void 0&&(n.terminate=!1);let s=0;return e?.tag!==void 0&&(s=De(e.tag,o)),r=t._OrtCreateRunOptions(n.logSeverityLevel,n.logVerbosityLevel,!!n.terminate,s),r===0&&Ee("Can\'t create run options."),e?.extra!==void 0&&ar(e.extra,"",new WeakSet,(u,d)=>{let a=De(u,o),p=De(d,o);t._OrtAddRunConfigEntry(r,a,p)!==0&&Ee(`Can\'t set a run config entry: ${u} - ${d}.`)}),[r,o]}catch(s){throw r!==0&&t._OrtReleaseRunOptions(r),o.forEach(u=>t._free(u)),s}};var Xu=e=>{switch(e){case"disabled":return 0;case"basic":return 1;case"extended":return 2;case"all":return 99;default:throw new Error(`unsupported graph optimization level: ${e}`)}},Qu=e=>{switch(e){case"sequential":return 0;case"parallel":return 1;default:throw new Error(`unsupported execution mode: ${e}`)}},Ju=e=>{e.extra||(e.extra={}),e.extra.session||(e.extra.session={});let t=e.extra.session;t.use_ort_model_bytes_directly||(t.use_ort_model_bytes_directly="1"),e.executionProviders&&e.executionProviders.some(r=>(typeof r=="string"?r:r.name)==="webgpu")&&(e.enableMemPattern=!1)},el=(e,t,r)=>{for(let o of t){let n=typeof o=="string"?o:o.name;switch(n){case"xnnpack":n="XNNPACK";break;case"webnn":if(n="WEBNN",typeof o!="string"){let u=o;if(u?.deviceType){let d=De("deviceType",r),a=De(u.deviceType,r);Be()._OrtAddSessionConfigEntry(e,d,a)!==0&&Ee(`Can\'t set a session config entry: \'deviceType\' - ${u.deviceType}.`)}if(u?.numThreads){let d=u.numThreads;(typeof d!="number"||!Number.isInteger(d)||d<0)&&(d=0);let a=De("numThreads",r),p=De(d.toString(),r);Be()._OrtAddSessionConfigEntry(e,a,p)!==0&&Ee(`Can\'t set a session config entry: \'numThreads\' - ${u.numThreads}.`)}if(u?.powerPreference){let d=De("powerPreference",r),a=De(u.powerPreference,r);Be()._OrtAddSessionConfigEntry(e,d,a)!==0&&Ee(`Can\'t set a session config entry: \'powerPreference\' - ${u.powerPreference}.`)}}break;case"webgpu":if(n="JS",typeof o!="string"){let u=o;if(u?.preferredLayout){if(u.preferredLayout!=="NCHW"&&u.preferredLayout!=="NHWC")throw new Error(`preferredLayout must be either \'NCHW\' or \'NHWC\': ${u.preferredLayout}`);let d=De("preferredLayout",r),a=De(u.preferredLayout,r);Be()._OrtAddSessionConfigEntry(e,d,a)!==0&&Ee(`Can\'t set a session config entry: \'preferredLayout\' - ${u.preferredLayout}.`)}}break;case"wasm":case"cpu":continue;default:throw new Error(`not supported execution provider: ${n}`)}let s=De(n,r);Be()._OrtAppendExecutionProvider(e,s)!==0&&Ee(`Can\'t append execution provider: ${n}.`)}},Eo=e=>{let t=Be(),r=0,o=[],n=e||{};Ju(n);try{let s=Xu(n.graphOptimizationLevel??"all"),u=Qu(n.executionMode??"sequential"),d=typeof n.logId=="string"?De(n.logId,o):0,a=n.logSeverityLevel??2;if(!Number.isInteger(a)||a<0||a>4)throw new Error(`log serverity level is not valid: ${a}`);let p=n.logVerbosityLevel??0;if(!Number.isInteger(p)||p<0||p>4)throw new Error(`log verbosity level is not valid: ${p}`);let h=typeof n.optimizedModelFilePath=="string"?De(n.optimizedModelFilePath,o):0;if(r=t._OrtCreateSessionOptions(s,!!n.enableCpuMemArena,!!n.enableMemPattern,u,!!n.enableProfiling,0,d,a,p,h),r===0&&Ee("Can\'t create session options."),n.executionProviders&&el(r,n.executionProviders,o),n.freeDimensionOverrides)for(let[$,g]of Object.entries(n.freeDimensionOverrides)){if(typeof $!="string")throw new Error(`free dimension override name must be a string: ${$}`);if(typeof g!="number"||!Number.isInteger(g)||g<0)throw new Error(`free dimension override value must be a non-negative integer: ${g}`);let w=De($,o);t._OrtAddFreeDimensionOverride(r,w,g)!==0&&Ee(`Can\'t set a free dimension override: ${$} - ${g}.`)}return n.extra!==void 0&&ar(n.extra,"",new WeakSet,($,g)=>{let w=De($,o),b=De(g,o);t._OrtAddSessionConfigEntry(r,w,b)!==0&&Ee(`Can\'t set a session config entry: ${$} - ${g}.`)}),[r,o]}catch(s){throw r!==0&&t._OrtReleaseSessionOptions(r),o.forEach(u=>t._free(u)),s}};ze();var bu=!1,Bc=e=>{let t=Be(),r=t.stackSave();try{let o=t.stackAlloc(8);return t._OrtGetInputOutputCount(e,o,o+4)!==0&&Ee("Can\'t get session input/output count."),[t.HEAP32[o/4],t.HEAP32[o/4+1]]}finally{t.stackRestore(r)}},Mc=(e,t)=>{Be()._OrtInit(e,t)!==0&&Ee("Can\'t initialize onnxruntime.")},wu=async e=>{Mc(e.wasm.numThreads,ur(e.logLevel));{let t=(gu(),Vt(hu)).init;await t(Be(),e)}bu=!0},mr=new Map,vu=()=>bu,jn=e=>{let t=Be(),r=t._malloc(e.byteLength);if(r===0)throw new Error(`Can\'t create a session. failed to allocate a buffer of size ${e.byteLength}.`);return t.HEAPU8.set(e,r),[r,e.byteLength]},qn=(e,t)=>{let r=Be(),o=0,n=0,s=0,u=[],d=[],a=[];try{[n,u]=Eo(t),o=r._OrtCreateSession(e[0],e[1],n),o===0&&Ee("Can\'t create a session.");let[p,h]=Bc(o),$=[],g=[],w=[];for(let v=0;v<p;v++){let I=r._OrtGetInputName(o,v);I===0&&Ee("Can\'t get an input name."),d.push(I),$.push(r.UTF8ToString(I))}for(let v=0;v<h;v++){let I=r._OrtGetOutputName(o,v);I===0&&Ee("Can\'t get an output name."),a.push(I);let x=r.UTF8ToString(I);g.push(x);{let A=typeof t?.preferredOutputLocation=="string"?t.preferredOutputLocation:t?.preferredOutputLocation?.[x]??"cpu";if(A!=="cpu"&&A!=="cpu-pinned"&&A!=="gpu-buffer")throw new Error(`Not supported preferred output location: ${A}.`);w.push(A)}}let b=null;return w.some(v=>v==="gpu-buffer")&&(s=r._OrtCreateBinding(o),s===0&&Ee("Can\'t create IO binding."),b={handle:s,outputPreferredLocations:w,outputPreferredLocationsEncoded:w.map(v=>$n(v))}),mr.set(o,[o,d,a,b]),[o,$,g]}catch(p){throw d.forEach(h=>r._OrtFree(h)),a.forEach(h=>r._OrtFree(h)),s!==0&&r._OrtReleaseBinding(s),o!==0&&r._OrtReleaseSession(o),p}finally{r._free(e[0]),n!==0&&r._OrtReleaseSessionOptions(n),u.forEach(p=>r._free(p))}},$u=(e,t)=>{let r=jn(e);return qn(r,t)},Su=e=>{let t=Be(),r=mr.get(e);if(!r)throw new Error(`cannot release session. invalid session id: ${e}`);let[o,n,s,u]=r;u&&t._OrtReleaseBinding(u.handle),t.jsepUnregisterBuffers?.(e),n.forEach(d=>t._OrtFree(d)),s.forEach(d=>t._OrtFree(d)),t._OrtReleaseSession(o),mr.delete(e)},yu=(e,t,r,o,n)=>{if(!e){t.push(0);return}let s=Be(),u=e[0],d=e[1],a=e[3],p,h;if(u==="string"&&a==="gpu-buffer")throw new Error("String tensor is not supported on GPU.");if(a==="gpu-buffer"){let w=e[2].gpuBuffer,b=sr(vn(u));h=d.reduce((v,I)=>v*I,1)*b,p=s.jsepRegisterBuffer(o,n,w,h)}else{let w=e[2];if(Array.isArray(w)){h=4*w.length,p=s._malloc(h),r.push(p);let b=p/4;for(let v=0;v<w.length;v++){if(typeof w[v]!="string")throw new TypeError(`tensor data at index ${v} is not a string`);s.HEAPU32[b++]=De(w[v],r)}}else h=w.byteLength,p=s._malloc(h),r.push(p),s.HEAPU8.set(new Uint8Array(w.buffer,w.byteOffset,h),p)}let $=s.stackSave(),g=s.stackAlloc(4*d.length);try{let w=g/4;d.forEach(v=>s.HEAP32[w++]=v);let b=s._OrtCreateTensor(vn(u),p,h,g,d.length,$n(a));b===0&&Ee(`Can\'t create tensor for input/output. session=${o}, index=${n}.`),t.push(b)}finally{s.stackRestore($)}},xu=async(e,t,r,o,n,s)=>{let u=Be(),d=mr.get(e);if(!d)throw new Error(`cannot run inference. invalid session id: ${e}`);let[a,p,h,$]=d,g=t.length,w=o.length,b=0,v=[],I=[],x=[],A=[],B=u.stackSave(),E=u.stackAlloc(g*4),V=u.stackAlloc(g*4),P=u.stackAlloc(w*4),z=u.stackAlloc(w*4);try{[b,v]=_o(s);for(let Q=0;Q<g;Q++)yu(r[Q],I,A,e,t[Q]);for(let Q=0;Q<w;Q++)yu(n[Q],x,A,e,g+o[Q]);let U=E/4,F=V/4,te=P/4,R=z/4;for(let Q=0;Q<g;Q++)u.HEAPU32[U++]=I[Q],u.HEAPU32[F++]=p[t[Q]];for(let Q=0;Q<w;Q++)u.HEAPU32[te++]=x[Q],u.HEAPU32[R++]=h[o[Q]];if($){let{handle:Q,outputPreferredLocations:$e,outputPreferredLocationsEncoded:Y}=$;if(p.length!==g)throw new Error(`input count from feeds (${g}) is expected to be always equal to model\'s input count (${p.length}).`);for(let Se=0;Se<g;Se++){let Ie=t[Se];await u._OrtBindInput(Q,p[Ie],I[Se])!==0&&Ee(`Can\'t bind input[${Se}] for session=${e}.`)}for(let Se=0;Se<w;Se++){let Ie=o[Se];n[Se]?.[3]?u._OrtBindOutput(Q,h[Ie],x[Se],0)!==0&&Ee(`Can\'t bind pre-allocated output[${Se}] for session=${e}.`):u._OrtBindOutput(Q,h[Ie],0,Y[Ie])!==0&&Ee(`Can\'t bind output[${Se}] to ${$e[Se]} for session=${e}.`)}}let j;$?j=await u._OrtRunWithBinding(a,$.handle,w,P,b):j=await u._OrtRun(a,V,E,g,z,w,P,b),j!==0&&Ee("failed to call OrtRun().");let pe=[];for(let Q=0;Q<w;Q++){let $e=u.HEAPU32[P/4+Q];if($e===x[Q]){pe.push(n[Q]);continue}let Y=u.stackSave(),Se=u.stackAlloc(4*4),Ie=!1,Ae,he=0;try{u._OrtGetTensorData($e,Se,Se+4,Se+8,Se+12)!==0&&Ee(`Can\'t access output tensor data on index ${Q}.`);let He=Se/4,Le=u.HEAPU32[He++];he=u.HEAPU32[He++];let L=u.HEAPU32[He++],de=u.HEAPU32[He++],fe=[];for(let Re=0;Re<de;Re++)fe.push(u.HEAPU32[L/4+Re]);u._OrtFree(L);let Ue=fe.reduce((Re,Ve)=>Re*Ve,1);Ae=ir(Le);let Ke=$?.outputPreferredLocations[o[Q]];if(Ae==="string"){if(Ke==="gpu-buffer")throw new Error("String tensor is not supported on GPU.");let Re=[],Ve=he/4;for(let Fe=0;Fe<Ue;Fe++){let ot=u.HEAPU32[Ve++],Ze=Fe===Ue-1?void 0:u.HEAPU32[Ve]-ot;Re.push(u.UTF8ToString(ot,Ze))}pe.push([Ae,fe,Re,"cpu"])}else if(Ke==="gpu-buffer"&&Ue>0){let Re=u.jsepGetBuffer(he),Ve=sr(Le);if(Ve===void 0||!Oo(Ae))throw new Error(`Unsupported data type: ${Ae}`);Ie=!0,pe.push([Ae,fe,{gpuBuffer:Re,download:u.jsepCreateDownloader(Re,Ue*Ve,Ae),dispose:()=>{u._OrtReleaseTensor($e)}},"gpu-buffer"])}else{let Re=Rr(Ae),Ve=new Re(Ue);new Uint8Array(Ve.buffer,Ve.byteOffset,Ve.byteLength).set(u.HEAPU8.subarray(he,he+Ve.byteLength)),pe.push([Ae,fe,Ve,"cpu"])}}finally{u.stackRestore(Y),Ae==="string"&&he&&u._free(he),Ie||u._OrtReleaseTensor($e)}}return $&&u._OrtClearBoundOutputs($.handle),pe}finally{u.stackRestore(B),I.forEach(U=>u._OrtReleaseTensor(U)),x.forEach(U=>u._OrtReleaseTensor(U)),A.forEach(U=>u._free(U)),b!==0&&u._OrtReleaseRunOptions(b),v.forEach(U=>u._free(U))}},Cu=e=>{let t=Be(),r=mr.get(e);if(!r)throw new Error("invalid session id");let o=r[0],n=t._OrtEndProfiling(o);n===0&&Ee("Can\'t get an profile file name."),t._OrtFree(n)},Iu=e=>{let t=[];for(let r of e){let o=r[2];!Array.isArray(o)&&"buffer"in o&&t.push(o.buffer)}return t};self.onmessage=e=>{switch(e.data.type){case"init-wasm":try{To(e.data.in).then(()=>postMessage({type:"init-wasm"}),t=>postMessage({type:"init-wasm",err:t}))}catch(t){postMessage({type:"init-wasm",err:t})}break;case"init-ort":try{wu(e.data.in).then(()=>postMessage({type:"init-ort"}),t=>postMessage({type:"init-ort",err:t}))}catch(t){postMessage({type:"init-ort",err:t})}break;case"create_allocate":try{let{model:t}=e.data.in,r=jn(t);postMessage({type:"create_allocate",out:r})}catch(t){postMessage({type:"create_allocate",err:t})}break;case"create_finalize":try{let{modeldata:t,options:r}=e.data.in,o=qn(t,r);postMessage({type:"create_finalize",out:o})}catch(t){postMessage({type:"create_finalize",err:t})}break;case"create":try{let{model:t,options:r}=e.data.in,o=$u(t,r);postMessage({type:"create",out:o})}catch(t){postMessage({type:"create",err:t})}break;case"release":try{Su(e.data.in),postMessage({type:"release"})}catch(t){postMessage({type:"release",err:t})}break;case"run":try{let{sessionId:t,inputIndices:r,inputs:o,outputIndices:n,options:s}=e.data.in;xu(t,r,o,n,new Array(n.length).fill(null),s).then(u=>{u.some(d=>d[3]!=="cpu")?postMessage({type:"run",err:"Proxy does not support non-cpu tensor location."}):postMessage({type:"run",out:u},Iu(u))},u=>{postMessage({type:"run",err:u})})}catch(t){postMessage({type:"run",err:t})}break;case"end-profiling":try{let t=e.data.in;Cu(t),postMessage({type:"end-profiling"})}catch(t){postMessage({type:"end-profiling",err:t})}break;case"is-ort-env-initialized":try{let t=vu();postMessage({type:"is-ort-env-initialized",out:t})}catch(t){postMessage({type:"is-ort-env-initialized",err:t})}break;default:}};})();\n/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n'});var xt,Je,Sn,_a,Aa,ya,ba,wa,va,$a,Sa,xa,Ia,Ca,Ot,qp,$n,xl,Il,Cl,_l,Ea,Al,El,Tl,Ol,Ta=j(()=>{"use strict";ct();$l();Zt();xt=()=>!!Ae.wasm.proxy&&typeof document<"u",Sn=!1,_a=!1,Aa=!1,wa=[],va=[],$a=[],Sa=[],xa=[],Ia=[],Ca=[],Ot=()=>{if(Sn||!_a||Aa||!Je)throw new Error("worker not ready")},qp=e=>{switch(e.data.type){case"init-wasm":Sn=!1,e.data.err?(Aa=!0,ya[1](e.data.err)):(_a=!0,ya[0]());break;case"init-ort":e.data.err?ba[1](e.data.err):ba[0]();break;case"create_allocate":e.data.err?wa.shift()[1](e.data.err):wa.shift()[0](e.data.out);break;case"create_finalize":e.data.err?va.shift()[1](e.data.err):va.shift()[0](e.data.out);break;case"create":e.data.err?$a.shift()[1](e.data.err):$a.shift()[0](e.data.out);break;case"release":e.data.err?Sa.shift()[1](e.data.err):Sa.shift()[0]();break;case"run":e.data.err?xa.shift()[1](e.data.err):xa.shift()[0](e.data.out);break;case"end-profiling":e.data.err?Ia.shift()[1](e.data.err):Ia.shift()[0]();break;case"is-ort-env-initialized":e.data.err?Ca.shift()[1](e.data.err):Ca.shift()[0](e.data.out);break;default:}},$n=typeof document<"u"?document?.currentScript?.src:void 0,xl=async()=>{if(xt()){if(_a)return;if(Sn)throw new Error("multiple calls to 'initWasm()' detected.");if(Aa)throw new Error("previous call to 'initWasm()' failed.");return Sn=!0,Ae.wasm.wasmPaths===void 0&&$n&&$n.indexOf("blob:")!==0&&(Ae.wasm.wasmPaths=$n.substr(0,+$n.lastIndexOf("/")+1)),new Promise((e,t)=>{Je?.terminate();let r=URL.createObjectURL(new Blob([Sl()],{type:"text/javascript"}));Je=new Worker(r,{name:"ort-wasm-proxy-worker"}),Je.onerror=n=>t(n),Je.onmessage=qp,URL.revokeObjectURL(r),ya=[e,t];let a={type:"init-wasm",in:Ae.wasm};Je.postMessage(a)})}else return Do(Ae.wasm)},Il=async e=>{if(xt())return Ot(),new Promise((t,r)=>{ba=[t,r];let a={type:"init-ort",in:e};Je.postMessage(a)});await ml(e)},Cl=async e=>xt()?(Ot(),new Promise((t,r)=>{wa.push([t,r]);let a={type:"create_allocate",in:{model:e}};Je.postMessage(a,[e.buffer])})):ha(e),_l=async(e,t)=>xt()?(Ot(),new Promise((r,a)=>{va.push([r,a]);let n={type:"create_finalize",in:{modeldata:e,options:t}};Je.postMessage(n)})):ga(e,t),Ea=async(e,t)=>{if(xt()){if(t?.preferredOutputLocation)throw new Error('session option "preferredOutputLocation" is not supported for proxy.');return Ot(),new Promise((r,a)=>{$a.push([r,a]);let n={type:"create",in:{model:e,options:t}};Je.postMessage(n,[e.buffer])})}else return gl(e,t)},Al=async e=>{if(xt())return Ot(),new Promise((t,r)=>{Sa.push([t,r]);let a={type:"release",in:e};Je.postMessage(a)});yl(e)},El=async(e,t,r,a,n,i)=>{if(xt()){if(r.some(u=>u[3]!=="cpu"))throw new Error("input tensor on GPU is not supported for proxy.");if(n.some(u=>u))throw new Error("pre-allocated output tensor is not supported for proxy.");return Ot(),new Promise((u,l)=>{xa.push([u,l]);let o=r,c={type:"run",in:{sessionId:e,inputIndices:t,inputs:o,outputIndices:a,options:i}};Je.postMessage(c,vl(o))})}else return bl(e,t,r,a,n,i)},Tl=async e=>{if(xt())return Ot(),new Promise((t,r)=>{Ia.push([t,r]);let a={type:"end-profiling",in:e};Je.postMessage(a)});wl(e)},Ol=async()=>xt()?(Ot(),new Promise((e,t)=>{Ca.push([e,t]);let r={type:"is-ort-env-initialized"};Je.postMessage(r)})):hl()});var xn,kl,Kp,In,Rl=j(()=>{"use strict";ct();Ta();ze();kl=(e,t)=>{switch(e.location){case"cpu":return[e.type,e.dims,e.data,"cpu"];case"gpu-buffer":return[e.type,e.dims,{gpuBuffer:e.gpuBuffer},"gpu-buffer"];default:throw new Error(`invalid data location: ${e.location} for ${t()}`)}},Kp=e=>{switch(e[3]){case"cpu":return new Le(e[0],e[2],e[1]);case"gpu-buffer":{let t=e[0];if(!Jr(t))throw new Error(`not supported data type: ${t} for deserializing GPU tensor`);let{gpuBuffer:r,download:a,dispose:n}=e[2];return Le.fromGpuBuffer(r,{dataType:t,dims:e[1],download:a,dispose:n})}default:throw new Error(`invalid data location: ${e[3]}`)}},In=class{async createSessionAllocate(t){let r=await fetch(t);if(r.status!==200)throw new Error(`failed to load model: ${t}`);let a=await r.arrayBuffer();return Cl(new Uint8Array(a))}async loadModel(t,r){if(await Ol()||(xn||(xn=Il(Ae)),await xn,xn=void 0),typeof t=="string")if(typeof process<"u"&&process.versions&&process.versions.node){let a=await(void 0)(t);[this.sessionId,this.inputNames,this.outputNames]=await Ea(a,r)}else{let a=await this.createSessionAllocate(t);[this.sessionId,this.inputNames,this.outputNames]=await _l(a,r)}else[this.sessionId,this.inputNames,this.outputNames]=await Ea(t,r)}async dispose(){return Al(this.sessionId)}async run(t,r,a){let n=[],i=[];Object.entries(t).forEach(m=>{let w=m[0],b=m[1],$=this.inputNames.indexOf(w);if($===-1)throw new Error(`invalid input '${w}'`);n.push(b),i.push($)});let u=[],l=[];Object.entries(r).forEach(m=>{let w=m[0],b=m[1],$=this.outputNames.indexOf(w);if($===-1)throw new Error(`invalid output '${w}'`);u.push(b),l.push($)});let o=n.map((m,w)=>kl(m,()=>`input "${this.inputNames[i[w]]}"`)),c=u.map((m,w)=>m?kl(m,()=>`output "${this.outputNames[l[w]]}"`):null),f=await El(this.sessionId,i,o,l,c,a),y={};for(let m=0;m<f.length;m++)y[this.outputNames[l[m]]]=u[m]??Kp(f[m]);return y}startProfiling(){}endProfiling(){Tl(this.sessionId)}}});var Yp,Cn,Pl=j(()=>{"use strict";ct();Ta();Rl();Yp=()=>{if((typeof Ae.wasm.initTimeout!="number"||Ae.wasm.initTimeout<0)&&(Ae.wasm.initTimeout=0),typeof Ae.wasm.simd!="boolean"&&(Ae.wasm.simd=!0),typeof Ae.wasm.proxy!="boolean"&&(Ae.wasm.proxy=!1),typeof Ae.wasm.numThreads!="number"||!Number.isInteger(Ae.wasm.numThreads)||Ae.wasm.numThreads<=0){let e=typeof navigator>"u"?(void 0)().length:navigator.hardwareConcurrency;Ae.wasm.numThreads=Math.min(4,Math.ceil((e||1)/2))}},Cn=class{async init(){Yp(),await xl()}async createInferenceSessionHandler(t,r){let a=new In;return await a.loadModel(t,r),Promise.resolve(a)}}});var Bl={};Wt(Bl,{wasmBackend:()=>Zp});var Zp,Ml=j(()=>{"use strict";Pl();Zp=new Cn});var Xp={};Wt(Xp,{InferenceSession:()=>yo,Tensor:()=>Le,TrainingSession:()=>$o,default:()=>Qp,env:()=>Ae,registerBackend:()=>St});ct();ct();ct();var xo="1.17.0";var Qp=Mn;{let e=(Ml(),At(Bl)).wasmBackend;typeof navigator<"u"&&navigator.gpu&&St("webgpu",e,5),St("cpu",e,10),St("wasm",e,10),St("xnnpack",e,9),St("webnn",e,9)}Object.defineProperty(Ae.versions,"web",{value:xo,enumerable:!0});return At(Xp);})();
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
//# sourceMappingURL=ort.webgpu.min.js.map
