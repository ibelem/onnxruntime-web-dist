/*!
 * ONNX Runtime Web v1.17.0
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
var kn=Object.defineProperty;var ql=Object.getOwnPropertyDescriptor;var jl=Object.getOwnPropertyNames;var Kl=Object.prototype.hasOwnProperty;var q=(e,t)=>()=>(e&&(t=e(e=0)),t);var Kt=(e,t)=>()=>(t||e((t={exports:{}}).exports,t),t.exports),Yt=(e,t)=>{for(var r in t)kn(e,r,{get:t[r],enumerable:!0})},Yl=(e,t,r,a)=>{if(t&&typeof t=="object"||typeof t=="function")for(let n of jl(t))!Kl.call(e,n)&&n!==r&&kn(e,n,{get:()=>t[n],enumerable:!(a=ql(t,n))||a.enumerable});return e};var zt=e=>Yl(kn({},"__esModule",{value:!0}),e);var Vr,Dt,Ct,Hr,Lr=q(()=>{Vr=new Map,Dt=[],Ct=(e,t,r)=>{if(t&&typeof t.init=="function"&&typeof t.createInferenceSessionHandler=="function"){let a=Vr.get(e);if(a===void 0)Vr.set(e,{backend:t,priority:r});else{if(a.priority>r)return;if(a.priority===r&&a.backend!==t)throw new Error(`cannot register backend "${e}" using priority ${r}`)}if(r>=0){let n=Dt.indexOf(e);n!==-1&&Dt.splice(n,1);for(let o=0;o<Dt.length;o++)if(Vr.get(Dt[o]).priority<=r){Dt.splice(o,0,e);return}Dt.push(e)}return}throw new TypeError("not a valid backend")},Hr=async e=>{let t=e.length===0?Dt:e,r=[];for(let a of t){let n=Vr.get(a);if(n){if(n.initialized)return n.backend;if(n.aborted)continue;let o=!!n.initPromise;try{return o||(n.initPromise=n.backend.init()),await n.initPromise,n.initialized=!0,n.backend}catch(u){o||r.push({name:a,err:u}),n.aborted=!0}finally{delete n.initPromise}}}throw new Error(`no available backend found. ERR: ${r.map(a=>`[${a.name}] ${a.err}`).join(", ")}`)}});var Ka=q(()=>{Lr()});var Ya,Za=q(()=>{Ya="1.17.0"});var Xa,Rn,Ja=q(()=>{Za();Xa="warning",Rn={wasm:{},webgl:{},webgpu:{},versions:{common:Ya},set logLevel(e){if(e!==void 0){if(typeof e!="string"||["verbose","info","warning","error","fatal"].indexOf(e)===-1)throw new Error(`Unsupported logging level: ${e}`);Xa=e}},get logLevel(){return Xa}};Object.defineProperty(Rn,"logLevel",{enumerable:!0})});var Oe,Qa=q(()=>{Ja();Oe=Rn});var ei,ti,ri=q(()=>{ei=(e,t)=>{let r=document.createElement("canvas");r.width=e.dims[3],r.height=e.dims[2];let a=r.getContext("2d");if(a!=null){let n,o;t?.tensorLayout!==void 0&&t.tensorLayout==="NHWC"?(n=e.dims[2],o=e.dims[3]):(n=e.dims[3],o=e.dims[2]);let u=t?.format!==void 0?t.format:"RGB",l=t?.norm,i,c;l===void 0||l.mean===void 0?i=[255,255,255,255]:typeof l.mean=="number"?i=[l.mean,l.mean,l.mean,l.mean]:(i=[l.mean[0],l.mean[1],l.mean[2],0],l.mean[3]!==void 0&&(i[3]=l.mean[3])),l===void 0||l.bias===void 0?c=[0,0,0,0]:typeof l.bias=="number"?c=[l.bias,l.bias,l.bias,l.bias]:(c=[l.bias[0],l.bias[1],l.bias[2],0],l.bias[3]!==void 0&&(c[3]=l.bias[3]));let f=o*n,y=0,m=f,b=f*2,w=-1;u==="RGBA"?(y=0,m=f,b=f*2,w=f*3):u==="RGB"?(y=0,m=f,b=f*2):u==="RBG"&&(y=0,b=f,m=f*2);for(let $=0;$<o;$++)for(let I=0;I<n;I++){let x=(e.data[y++]-c[0])*i[0],C=(e.data[m++]-c[1])*i[1],P=(e.data[b++]-c[2])*i[2],E=w===-1?255:(e.data[w++]-c[3])*i[3];a.fillStyle="rgba("+x+","+C+","+P+","+E+")",a.fillRect(I,$,1,1)}return r.toDataURL()}else throw new Error("Can not access image data")},ti=(e,t)=>{let r=document.createElement("canvas").getContext("2d"),a;if(r!=null){let n,o,u;t?.tensorLayout!==void 0&&t.tensorLayout==="NHWC"?(n=e.dims[2],o=e.dims[1],u=e.dims[3]):(n=e.dims[3],o=e.dims[2],u=e.dims[1]);let l=t!==void 0&&t.format!==void 0?t.format:"RGB",i=t?.norm,c,f;i===void 0||i.mean===void 0?c=[255,255,255,255]:typeof i.mean=="number"?c=[i.mean,i.mean,i.mean,i.mean]:(c=[i.mean[0],i.mean[1],i.mean[2],255],i.mean[3]!==void 0&&(c[3]=i.mean[3])),i===void 0||i.bias===void 0?f=[0,0,0,0]:typeof i.bias=="number"?f=[i.bias,i.bias,i.bias,i.bias]:(f=[i.bias[0],i.bias[1],i.bias[2],0],i.bias[3]!==void 0&&(f[3]=i.bias[3]));let y=o*n;if(t!==void 0&&(t.format!==void 0&&u===4&&t.format!=="RGBA"||u===3&&t.format!=="RGB"&&t.format!=="BGR"))throw new Error("Tensor format doesn't match input tensor dims");let m=4,b=0,w=1,$=2,I=3,x=0,C=y,P=y*2,E=-1;l==="RGBA"?(x=0,C=y,P=y*2,E=y*3):l==="RGB"?(x=0,C=y,P=y*2):l==="RBG"&&(x=0,P=y,C=y*2),a=r.createImageData(n,o);for(let z=0;z<o*n;b+=m,w+=m,$+=m,I+=m,z++)a.data[b]=(e.data[x++]-f[0])*c[0],a.data[w]=(e.data[C++]-f[1])*c[1],a.data[$]=(e.data[P++]-f[2])*c[2],a.data[I]=E===-1?255:(e.data[E++]-f[3])*c[3]}else throw new Error("Can not access image data");return a}});var Pn,ni,ai,ii,oi,si=q(()=>{Gr();Pn=(e,t)=>{if(e===void 0)throw new Error("Image buffer must be defined");if(t.height===void 0||t.width===void 0)throw new Error("Image height and width must be defined");if(t.tensorLayout==="NHWC")throw new Error("NHWC Tensor layout is not supported yet");let{height:r,width:a}=t,n=t.norm??{mean:255,bias:0},o,u;typeof n.mean=="number"?o=[n.mean,n.mean,n.mean,n.mean]:o=[n.mean[0],n.mean[1],n.mean[2],n.mean[3]??255],typeof n.bias=="number"?u=[n.bias,n.bias,n.bias,n.bias]:u=[n.bias[0],n.bias[1],n.bias[2],n.bias[3]??0];let l=t.format!==void 0?t.format:"RGBA",i=t.tensorFormat!==void 0&&t.tensorFormat!==void 0?t.tensorFormat:"RGB",c=r*a,f=i==="RGBA"?new Float32Array(c*4):new Float32Array(c*3),y=4,m=0,b=1,w=2,$=3,I=0,x=c,C=c*2,P=-1;l==="RGB"&&(y=3,m=0,b=1,w=2,$=-1),i==="RGBA"?P=c*3:i==="RBG"?(I=0,C=c,x=c*2):i==="BGR"&&(C=0,x=c,I=c*2);for(let z=0;z<c;z++,m+=y,w+=y,b+=y,$+=y)f[I++]=(e[m]+u[0])/o[0],f[x++]=(e[b]+u[1])/o[1],f[C++]=(e[w]+u[2])/o[2],P!==-1&&$!==-1&&(f[P++]=(e[$]+u[3])/o[3]);return i==="RGBA"?new Ye("float32",f,[1,4,r,a]):new Ye("float32",f,[1,3,r,a])},ni=async(e,t)=>{let r=typeof HTMLImageElement<"u"&&e instanceof HTMLImageElement,a=typeof ImageData<"u"&&e instanceof ImageData,n=typeof ImageBitmap<"u"&&e instanceof ImageBitmap,o=typeof e=="string",u,l=t??{};if(r){let i=document.createElement("canvas");i.width=e.width,i.height=e.height;let c=i.getContext("2d");if(c!=null){let f=e.height,y=e.width;if(t!==void 0&&t.resizedHeight!==void 0&&t.resizedWidth!==void 0&&(f=t.resizedHeight,y=t.resizedWidth),t!==void 0){if(l=t,t.tensorFormat!==void 0)throw new Error("Image input config format must be RGBA for HTMLImageElement");l.tensorFormat="RGBA",l.height=f,l.width=y}else l.tensorFormat="RGBA",l.height=f,l.width=y;c.drawImage(e,0,0),u=c.getImageData(0,0,y,f).data}else throw new Error("Can not access image data")}else if(a){let i,c;if(t!==void 0&&t.resizedWidth!==void 0&&t.resizedHeight!==void 0?(i=t.resizedHeight,c=t.resizedWidth):(i=e.height,c=e.width),t!==void 0&&(l=t),l.format="RGBA",l.height=i,l.width=c,t!==void 0){let f=document.createElement("canvas");f.width=c,f.height=i;let y=f.getContext("2d");if(y!=null)y.putImageData(e,0,0),u=y.getImageData(0,0,c,i).data;else throw new Error("Can not access image data")}else u=e.data}else if(n){if(t===void 0)throw new Error("Please provide image config with format for Imagebitmap");let i=document.createElement("canvas");i.width=e.width,i.height=e.height;let c=i.getContext("2d");if(c!=null){let f=e.height,y=e.width;return c.drawImage(e,0,0,y,f),u=c.getImageData(0,0,y,f).data,l.height=f,l.width=y,Pn(u,l)}else throw new Error("Can not access image data")}else{if(o)return new Promise((i,c)=>{let f=document.createElement("canvas"),y=f.getContext("2d");if(!e||!y)return c();let m=new Image;m.crossOrigin="Anonymous",m.src=e,m.onload=()=>{f.width=m.width,f.height=m.height,y.drawImage(m,0,0,f.width,f.height);let b=y.getImageData(0,0,f.width,f.height);l.height=f.height,l.width=f.width,i(Pn(b.data,l))}});throw new Error("Input data provided is not supported - aborted tensor creation")}if(u!==void 0)return Pn(u,l);throw new Error("Input data provided is not supported - aborted tensor creation")},ai=(e,t)=>{let{width:r,height:a,download:n,dispose:o}=t,u=[1,a,r,4];return new Ye({location:"texture",type:"float32",texture:e,dims:u,download:n,dispose:o})},ii=(e,t)=>{let{dataType:r,dims:a,download:n,dispose:o}=t;return new Ye({location:"gpu-buffer",type:r??"float32",gpuBuffer:e,dims:a,download:n,dispose:o})},oi=(e,t,r)=>new Ye({location:"cpu-pinned",type:e,data:t,dims:r??[t.length]})});var hr,Fr,ui,li,di=q(()=>{hr=new Map([["float32",Float32Array],["uint8",Uint8Array],["int8",Int8Array],["uint16",Uint16Array],["float16",Uint16Array],["int16",Int16Array],["int32",Int32Array],["bool",Uint8Array],["float64",Float64Array],["uint32",Uint32Array]]),Fr=new Map([[Float32Array,"float32"],[Uint8Array,"uint8"],[Int8Array,"int8"],[Uint16Array,"uint16"],[Int16Array,"int16"],[Int32Array,"int32"],[Float64Array,"float64"],[Uint32Array,"uint32"]]),ui=!1,li=()=>{if(!ui){ui=!0;let e=typeof BigInt64Array<"u"&&typeof BigInt64Array.from=="function",t=typeof BigUint64Array<"u"&&typeof BigUint64Array.from=="function";e&&(hr.set("int64",BigInt64Array),Fr.set(BigInt64Array,"int64")),t&&(hr.set("uint64",BigUint64Array),Fr.set(BigUint64Array,"uint64"))}}});var ci,pi,fi=q(()=>{Gr();ci=e=>{let t=1;for(let r=0;r<e.length;r++){let a=e[r];if(typeof a!="number"||!Number.isSafeInteger(a))throw new TypeError(`dims[${r}] must be an integer, got: ${a}`);if(a<0)throw new RangeError(`dims[${r}] must be a non-negative integer, got: ${a}`);t*=a}return t},pi=(e,t)=>{switch(e.location){case"cpu":return new Ye(e.type,e.data,t);case"cpu-pinned":return new Ye({location:"cpu-pinned",data:e.data,type:e.type,dims:t});case"texture":return new Ye({location:"texture",texture:e.texture,type:e.type,dims:t});case"gpu-buffer":return new Ye({location:"gpu-buffer",gpuBuffer:e.gpuBuffer,type:e.type,dims:t});default:throw new Error(`tensorReshape: tensor location ${e.location} is not supported`)}}});var Ye,Gr=q(()=>{ri();si();di();fi();Ye=class{constructor(t,r,a){li();let n,o;if(typeof t=="object"&&"location"in t)switch(this.dataLocation=t.location,n=t.type,o=t.dims,t.location){case"cpu-pinned":{let l=hr.get(n);if(!l)throw new TypeError(`unsupported type "${n}" to create tensor from pinned buffer`);if(!(t.data instanceof l))throw new TypeError(`buffer should be of type ${l.name}`);this.cpuData=t.data;break}case"texture":{if(n!=="float32")throw new TypeError(`unsupported type "${n}" to create tensor from texture`);this.gpuTextureData=t.texture,this.downloader=t.download,this.disposer=t.dispose;break}case"gpu-buffer":{if(n!=="float32"&&n!=="float16"&&n!=="int32"&&n!=="int64"&&n!=="uint32"&&n!=="bool")throw new TypeError(`unsupported type "${n}" to create tensor from gpu buffer`);this.gpuBufferData=t.gpuBuffer,this.downloader=t.download,this.disposer=t.dispose;break}default:throw new Error(`Tensor constructor: unsupported location '${this.dataLocation}'`)}else{let l,i;if(typeof t=="string")if(n=t,i=a,t==="string"){if(!Array.isArray(r))throw new TypeError("A string tensor's data must be a string array.");l=r}else{let c=hr.get(t);if(c===void 0)throw new TypeError(`Unsupported tensor type: ${t}.`);if(Array.isArray(r)){if(t==="float16")throw new TypeError("Creating a float16 tensor from number array is not supported. Please use Uint16Array as data.");t==="uint64"||t==="int64"?l=c.from(r,BigInt):l=c.from(r)}else if(r instanceof c)l=r;else throw new TypeError(`A ${n} tensor's data must be type of ${c}`)}else if(i=r,Array.isArray(t)){if(t.length===0)throw new TypeError("Tensor type cannot be inferred from an empty array.");let c=typeof t[0];if(c==="string")n="string",l=t;else if(c==="boolean")n="bool",l=Uint8Array.from(t);else throw new TypeError(`Invalid element type of data array: ${c}.`)}else{let c=Fr.get(t.constructor);if(c===void 0)throw new TypeError(`Unsupported type for tensor data: ${t.constructor}.`);n=c,l=t}if(i===void 0)i=[l.length];else if(!Array.isArray(i))throw new TypeError("A tensor's dims must be a number array");o=i,this.cpuData=l,this.dataLocation="cpu"}let u=ci(o);if(this.cpuData&&u!==this.cpuData.length)throw new Error(`Tensor's size(${u}) does not match data length(${this.cpuData.length}).`);this.type=n,this.dims=o,this.size=u}static async fromImage(t,r){return ni(t,r)}static fromTexture(t,r){return ai(t,r)}static fromGpuBuffer(t,r){return ii(t,r)}static fromPinnedBuffer(t,r,a){return oi(t,r,a)}toDataURL(t){return ei(this,t)}toImageData(t){return ti(this,t)}get data(){if(this.ensureValid(),!this.cpuData)throw new Error("The data is not on CPU. Use `getData()` to download GPU data to CPU, or use `texture` or `gpuBuffer` property to access the GPU data directly.");return this.cpuData}get location(){return this.dataLocation}get texture(){if(this.ensureValid(),!this.gpuTextureData)throw new Error("The data is not stored as a WebGL texture.");return this.gpuTextureData}get gpuBuffer(){if(this.ensureValid(),!this.gpuBufferData)throw new Error("The data is not stored as a WebGPU buffer.");return this.gpuBufferData}async getData(t){switch(this.ensureValid(),this.dataLocation){case"cpu":case"cpu-pinned":return this.data;case"texture":case"gpu-buffer":{if(!this.downloader)throw new Error("The current tensor is not created with a specified data downloader.");if(this.isDownloading)throw new Error("The current tensor is being downloaded.");try{this.isDownloading=!0;let r=await this.downloader();return this.downloader=void 0,this.dataLocation="cpu",this.cpuData=r,t&&this.disposer&&(this.disposer(),this.disposer=void 0),r}finally{this.isDownloading=!1}}default:throw new Error(`cannot get data from location: ${this.dataLocation}`)}}dispose(){if(this.isDownloading)throw new Error("The current tensor is being downloaded.");this.disposer&&(this.disposer(),this.disposer=void 0),this.cpuData=void 0,this.gpuTextureData=void 0,this.gpuBufferData=void 0,this.downloader=void 0,this.isDownloading=void 0,this.dataLocation="none"}ensureValid(){if(this.dataLocation==="none")throw new Error("The tensor is disposed.")}reshape(t){if(this.ensureValid(),this.downloader||this.disposer)throw new Error("Cannot reshape a tensor that owns GPU resource.");return pi(this,t)}}});var Fe,qr=q(()=>{Gr();Fe=Ye});var jr,mi=q(()=>{Lr();qr();jr=class e{constructor(t){this.handler=t}async run(t,r,a){let n={},o={};if(typeof t!="object"||t===null||t instanceof Fe||Array.isArray(t))throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");let u=!0;if(typeof r=="object"){if(r===null)throw new TypeError("Unexpected argument[1]: cannot be null.");if(r instanceof Fe)throw new TypeError("'fetches' cannot be a Tensor");if(Array.isArray(r)){if(r.length===0)throw new TypeError("'fetches' cannot be an empty array.");u=!1;for(let c of r){if(typeof c!="string")throw new TypeError("'fetches' must be a string array or an object.");if(this.outputNames.indexOf(c)===-1)throw new RangeError(`'fetches' contains invalid output name: ${c}.`);n[c]=null}if(typeof a=="object"&&a!==null)o=a;else if(typeof a<"u")throw new TypeError("'options' must be an object.")}else{let c=!1,f=Object.getOwnPropertyNames(r);for(let y of this.outputNames)if(f.indexOf(y)!==-1){let m=r[y];(m===null||m instanceof Fe)&&(c=!0,u=!1,n[y]=m)}if(c){if(typeof a=="object"&&a!==null)o=a;else if(typeof a<"u")throw new TypeError("'options' must be an object.")}else o=r}}else if(typeof r<"u")throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");for(let c of this.inputNames)if(typeof t[c]>"u")throw new Error(`input '${c}' is missing in 'feeds'.`);if(u)for(let c of this.outputNames)n[c]=null;let l=await this.handler.run(t,n,o),i={};for(let c in l)if(Object.hasOwnProperty.call(l,c)){let f=l[c];f instanceof Fe?i[c]=f:i[c]=new Fe(f.type,f.data,f.dims)}return i}async release(){return this.handler.dispose()}static async create(t,r,a,n){let o,u={};if(typeof t=="string"){if(o=t,typeof r=="object"&&r!==null)u=r;else if(typeof r<"u")throw new TypeError("'options' must be an object.")}else if(t instanceof Uint8Array){if(o=t,typeof r=="object"&&r!==null)u=r;else if(typeof r<"u")throw new TypeError("'options' must be an object.")}else if(t instanceof ArrayBuffer||typeof SharedArrayBuffer<"u"&&t instanceof SharedArrayBuffer){let y=t,m=0,b=t.byteLength;if(typeof r=="object"&&r!==null)u=r;else if(typeof r=="number"){if(m=r,!Number.isSafeInteger(m))throw new RangeError("'byteOffset' must be an integer.");if(m<0||m>=y.byteLength)throw new RangeError(`'byteOffset' is out of range [0, ${y.byteLength}).`);if(b=t.byteLength-m,typeof a=="number"){if(b=a,!Number.isSafeInteger(b))throw new RangeError("'byteLength' must be an integer.");if(b<=0||m+b>y.byteLength)throw new RangeError(`'byteLength' is out of range (0, ${y.byteLength-m}].`);if(typeof n=="object"&&n!==null)u=n;else if(typeof n<"u")throw new TypeError("'options' must be an object.")}else if(typeof a<"u")throw new TypeError("'byteLength' must be a number.")}else if(typeof r<"u")throw new TypeError("'options' must be an object.");o=new Uint8Array(y,m,b)}else throw new TypeError("Unexpected argument[0]: must be 'path' or 'buffer'.");let i=(u.executionProviders||[]).map(y=>typeof y=="string"?y:y.name),f=await(await Hr(i)).createInferenceSessionHandler(o,u);return new e(f)}startProfiling(){this.handler.startProfiling()}endProfiling(){this.handler.endProfiling()}get inputNames(){return this.handler.inputNames}get outputNames(){return this.handler.outputNames}}});var Zl,hi=q(()=>{mi();Zl=jr});var gi=q(()=>{});var Xl,Kr,yi=q(()=>{Lr();qr();Xl="Training backend could not be resolved. Make sure you're using the correct configuration & WebAssembly files.",Kr=class e{constructor(t,r,a){this.handler=t,this.hasOptimizerModel=r,this.hasEvalModel=a}get trainingInputNames(){return this.handler.inputNames}get trainingOutputNames(){return this.handler.outputNames}get evalInputNames(){if(this.hasEvalModel)return this.handler.evalInputNames;throw new Error("This training session has no evalModel loaded.")}get evalOutputNames(){if(this.hasEvalModel)return this.handler.evalOutputNames;throw new Error("This training session has no evalModel loaded.")}static async create(t,r){let a=t.evalModel||"",n=t.optimizerModel||"",o=r||{},l=(o.executionProviders||[]).map(c=>typeof c=="string"?c:c.name),i=await Hr(l);if(i.createTrainingSessionHandler){let c=await i.createTrainingSessionHandler(t.checkpointState,t.trainModel,a,n,o);return new e(c,!!t.optimizerModel,!!t.evalModel)}else throw new Error(Xl)}typeNarrowingForRunStep(t,r,a,n,o){let u={},l={};if(typeof a!="object"||a===null||a instanceof Fe||Array.isArray(a))throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");let i=!0;if(typeof n=="object"){if(n===null)throw new TypeError("Unexpected argument[1]: cannot be null.");if(n instanceof Fe)throw new TypeError("'fetches' cannot be a Tensor");if(Array.isArray(n)){if(n.length===0)throw new TypeError("'fetches' cannot be an empty array.");i=!1;for(let c of n){if(typeof c!="string")throw new TypeError("'fetches' must be a string array or an object.");if(r.indexOf(c)===-1)throw new RangeError(`'fetches' contains invalid output name: ${c}.`);u[c]=null}if(typeof o=="object"&&o!==null)l=o;else if(typeof o<"u")throw new TypeError("'options' must be an object.")}else{let c=!1,f=Object.getOwnPropertyNames(n);for(let y of r)if(f.indexOf(y)!==-1){let m=n[y];(m===null||m instanceof Fe)&&(c=!0,i=!1,u[y]=m)}if(c){if(typeof o=="object"&&o!==null)l=o;else if(typeof o<"u")throw new TypeError("'options' must be an object.")}else l=n}}else if(typeof n<"u")throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");for(let c of t)if(typeof a[c]>"u")throw new Error(`input '${c}' is missing in 'feeds'.`);if(i)for(let c of r)u[c]=null;return[u,l]}convertHandlerReturnTypeToMapOfTensors(t){let r={};for(let a in t)if(Object.hasOwnProperty.call(t,a)){let n=t[a];n instanceof Fe?r[a]=n:r[a]=new Fe(n.type,n.data,n.dims)}return r}async lazyResetGrad(){await this.handler.lazyResetGrad()}async runTrainStep(t,r,a){let[n,o]=this.typeNarrowingForRunStep(this.trainingInputNames,this.trainingOutputNames,t,r,a),u=await this.handler.runTrainStep(t,n,o);return this.convertHandlerReturnTypeToMapOfTensors(u)}async runOptimizerStep(t){if(this.hasOptimizerModel)await this.handler.runOptimizerStep(t||{});else throw new Error("This TrainingSession has no OptimizerModel loaded.")}async runEvalStep(t,r,a){if(this.hasEvalModel){let[n,o]=this.typeNarrowingForRunStep(this.evalInputNames,this.evalOutputNames,t,r,a),u=await this.handler.runEvalStep(t,n,o);return this.convertHandlerReturnTypeToMapOfTensors(u)}else throw new Error("This TrainingSession has no EvalModel loaded.")}async getParametersSize(t=!0){return this.handler.getParametersSize(t)}async loadParametersBuffer(t,r=!0){let a=await this.getParametersSize(r);if(t.length!==4*a)throw new Error("Size of the buffer passed into loadParametersBuffer must match the number of parameters in the model. Please use getParametersSize method to check.");return this.handler.loadParametersBuffer(t,r)}async getContiguousParameters(t=!0){return this.handler.getContiguousParameters(t)}async release(){return this.handler.dispose()}}});var Jl,bi=q(()=>{yi();Jl=Kr});var Bn={};Yt(Bn,{InferenceSession:()=>Zl,Tensor:()=>Fe,TrainingSession:()=>Jl,env:()=>Oe,registerBackend:()=>Ct});var dt=q(()=>{Ka();Qa();hi();qr();gi();bi()});var Mn={};Yt(Mn,{readFile:()=>Ql});var Ql,zn=q(()=>{Ql=void 0});var Dn={};Yt(Dn,{join:()=>ed});var ed,Wn=q(()=>{ed=void 0});var Si=Kt(($i,Un)=>{"use strict";var vi=(()=>{var e=typeof document<"u"&&document.currentScript?document.currentScript.src:void 0;return typeof __filename<"u"&&(e=e||__filename),function(t={}){var r=t,a,n;r.ready=new Promise((d,h)=>{a=d,n=h}),r.jsepInit=(d,h,v,_,O,L,V,le)=>{r.Za=d,r.Oa=h,r.Qa=v,r.Ja=_,r.Pa=O,r.ra=L,r.Ra=V,r.Sa=le,h=(X,ae,ee)=>(...fe)=>{let we=tt,k=ae?.();fe=X(...fe);let oe=ae?.();return k!==oe&&(X=oe,ee(k),ae=ee=null),tt!=we?kr():fe},v=X=>async(...ae)=>{try{if(r.Da)throw Error("Session already started");let ee=r.Da={Ta:ae[0],errors:[]},fe=await X(...ae);if(r.Da!==ee)throw Error("Session mismatch");d.flush();let we=ee.errors;if(0<we.length){let k=await Promise.all(we);if(k=k.filter(oe=>oe),0<k.length)throw Error(k.join(`
`))}return fe}finally{r.Da=null}},r._OrtRun=v(h(r._OrtRun,()=>r._OrtRun,X=>r._OrtRun=X)),r._OrtRunWithBinding=v(h(r._OrtRunWithBinding,()=>r._OrtRunWithBinding,X=>r._OrtRunWithBinding=X)),r._OrtBindInput=h(r._OrtBindInput,()=>r._OrtBindInput,X=>r._OrtBindInput=X),r.jsepRegisterBuffer=(X,ae,ee,fe)=>d.registerBuffer(X,ae,ee,fe),r.jsepUnregisterBuffers=X=>{d.unregisterBuffers(X)},r.jsepGetBuffer=X=>d.getBuffer(X),r.jsepCreateDownloader=(X,ae,ee)=>d.createDownloader(X,ae,ee)};var o=Object.assign({},r),u="./this.program",l=(d,h)=>{throw h},i=typeof window=="object",c=typeof importScripts=="function",f=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string",y="",m,b,w;if(f){var $=(zn(),zt(Mn)),I=(Wn(),zt(Dn));y=c?I.dirname(y)+"/":__dirname+"/",m=(d,h)=>(d=d.startsWith("file://")?new URL(d):I.normalize(d),$.readFileSync(d,h?void 0:"utf8")),w=d=>(d=m(d,!0),d.buffer||(d=new Uint8Array(d)),d),b=(d,h,v,_=!0)=>{d=d.startsWith("file://")?new URL(d):I.normalize(d),$.readFile(d,_?void 0:"utf8",(O,L)=>{O?v(O):h(_?L.buffer:L)})},!r.thisProgram&&1<process.argv.length&&(u=process.argv[1].replace(/\\/g,"/")),process.argv.slice(2),l=(d,h)=>{throw process.exitCode=d,h},r.inspect=()=>"[Emscripten Module object]"}else(i||c)&&(c?y=self.location.href:typeof document<"u"&&document.currentScript&&(y=document.currentScript.src),e&&(y=e),y.indexOf("blob:")!==0?y=y.substr(0,y.replace(/[?#].*/,"").lastIndexOf("/")+1):y="",m=d=>{var h=new XMLHttpRequest;return h.open("GET",d,!1),h.send(null),h.responseText},c&&(w=d=>{var h=new XMLHttpRequest;return h.open("GET",d,!1),h.responseType="arraybuffer",h.send(null),new Uint8Array(h.response)}),b=(d,h,v)=>{var _=new XMLHttpRequest;_.open("GET",d,!0),_.responseType="arraybuffer",_.onload=()=>{_.status==200||_.status==0&&_.response?h(_.response):v()},_.onerror=v,_.send(null)});var x=r.print||console.log.bind(console),C=r.printErr||console.error.bind(console);Object.assign(r,o),o=null,r.thisProgram&&(u=r.thisProgram),r.quit&&(l=r.quit);var P;r.wasmBinary&&(P=r.wasmBinary);var E=r.noExitRuntime||!0;typeof WebAssembly!="object"&&je("no native wasm support detected");var z,T,H=!1,N,G,re,B,j,pe,Q;function $e(){var d=z.buffer;r.HEAP8=G=new Int8Array(d),r.HEAP16=new Int16Array(d),r.HEAP32=B=new Int32Array(d),r.HEAPU8=re=new Uint8Array(d),r.HEAPU16=new Uint16Array(d),r.HEAPU32=j=new Uint32Array(d),r.HEAPF32=pe=new Float32Array(d),r.HEAPF64=Q=new Float64Array(d)}var Z=[],Se=[],Ie=[];function Ee(){var d=r.preRun.shift();Z.unshift(d)}var he=0,ot=null,Ge=null;function je(d){throw r.onAbort&&r.onAbort(d),d="Aborted("+d+")",C(d),H=!0,N=1,d=new WebAssembly.RuntimeError(d+". Build with -sASSERTIONS for more info."),n(d),d}function F(d){return d.startsWith("data:application/octet-stream;base64,")}var de;if(de="ort-wasm-simd.wasm",!F(de)){var me=de;de=r.locateFile?r.locateFile(me,y):y+me}function He(d){if(d==de&&P)return new Uint8Array(P);if(w)return w(d);throw"both async and sync fetching of the wasm failed"}function Xe(d){if(!P&&(i||c)){if(typeof fetch=="function"&&!d.startsWith("file://"))return fetch(d,{credentials:"same-origin"}).then(h=>{if(!h.ok)throw"failed to load wasm binary file at '"+d+"'";return h.arrayBuffer()}).catch(()=>He(d));if(b)return new Promise((h,v)=>{b(d,_=>h(new Uint8Array(_)),v)})}return Promise.resolve().then(()=>He(d))}function Me(d,h,v){return Xe(d).then(_=>WebAssembly.instantiate(_,h)).then(_=>_).then(v,_=>{C("failed to asynchronously prepare wasm: "+_),je(_)})}function Ne(d,h){var v=de;return P||typeof WebAssembly.instantiateStreaming!="function"||F(v)||v.startsWith("file://")||f||typeof fetch!="function"?Me(v,d,h):fetch(v,{credentials:"same-origin"}).then(_=>WebAssembly.instantiateStreaming(_,d).then(h,function(O){return C("wasm streaming compile failed: "+O),C("falling back to ArrayBuffer instantiation"),Me(v,d,h)}))}var Ke,st={913040:d=>{r.ra("Abs",d,void 0)},913091:d=>{r.ra("Neg",d,void 0)},913142:d=>{r.ra("Floor",d,void 0)},913195:d=>{r.ra("Ceil",d,void 0)},913247:d=>{r.ra("Reciprocal",d,void 0)},913305:d=>{r.ra("Sqrt",d,void 0)},913357:d=>{r.ra("Exp",d,void 0)},913408:d=>{r.ra("Erf",d,void 0)},913459:d=>{r.ra("Sigmoid",d,void 0)},913514:d=>{r.ra("Log",d,void 0)},913565:d=>{r.ra("Sin",d,void 0)},913616:d=>{r.ra("Cos",d,void 0)},913667:d=>{r.ra("Tan",d,void 0)},913718:d=>{r.ra("Asin",d,void 0)},913770:d=>{r.ra("Acos",d,void 0)},913822:d=>{r.ra("Atan",d,void 0)},913874:d=>{r.ra("Sinh",d,void 0)},913926:d=>{r.ra("Cosh",d,void 0)},913978:d=>{r.ra("Asinh",d,void 0)},914031:d=>{r.ra("Acosh",d,void 0)},914084:d=>{r.ra("Atanh",d,void 0)},914137:d=>{r.ra("Tanh",d,void 0)},914189:d=>{r.ra("Not",d,void 0)},914240:(d,h,v)=>{r.ra("Clip",d,{min:h,max:v})},914309:d=>{r.ra("Clip",d,void 0)},914361:(d,h)=>{r.ra("Elu",d,{alpha:h})},914419:d=>{r.ra("Relu",d,void 0)},914471:(d,h)=>{r.ra("LeakyRelu",d,{alpha:h})},914535:(d,h)=>{r.ra("ThresholdedRelu",d,{alpha:h})},914605:(d,h)=>{r.ra("Cast",d,{to:h})},914663:d=>{r.ra("Add",d,void 0)},914714:d=>{r.ra("Sub",d,void 0)},914765:d=>{r.ra("Mul",d,void 0)},914816:d=>{r.ra("Div",d,void 0)},914867:d=>{r.ra("Pow",d,void 0)},914918:d=>{r.ra("Equal",d,void 0)},914971:d=>{r.ra("Greater",d,void 0)},915026:d=>{r.ra("GreaterOrEqual",d,void 0)},915088:d=>{r.ra("Less",d,void 0)},915140:d=>{r.ra("LessOrEqual",d,void 0)},915199:(d,h,v,_,O)=>{r.ra("ReduceMean",d,{keepDims:!!h,noopWithEmptyAxes:!!v,axes:_?Array.from(B.subarray(O>>>0,O+_>>>0)):[]})},915363:(d,h,v,_,O)=>{r.ra("ReduceMax",d,{keepDims:!!h,noopWithEmptyAxes:!!v,axes:_?Array.from(B.subarray(O>>>0,O+_>>>0)):[]})},915526:(d,h,v,_,O)=>{r.ra("ReduceMin",d,{keepDims:!!h,noopWithEmptyAxes:!!v,axes:_?Array.from(B.subarray(O>>>0,O+_>>>0)):[]})},915689:(d,h,v,_,O)=>{r.ra("ReduceProd",d,{keepDims:!!h,noopWithEmptyAxes:!!v,axes:_?Array.from(B.subarray(O>>>0,O+_>>>0)):[]})},915853:(d,h,v,_,O)=>{r.ra("ReduceSum",d,{keepDims:!!h,noopWithEmptyAxes:!!v,axes:_?Array.from(B.subarray(O>>>0,O+_>>>0)):[]})},916016:(d,h,v,_,O)=>{r.ra("ReduceL1",d,{keepDims:!!h,noopWithEmptyAxes:!!v,axes:_?Array.from(B.subarray(O>>>0,O+_>>>0)):[]})},916178:(d,h,v,_,O)=>{r.ra("ReduceL2",d,{keepDims:!!h,noopWithEmptyAxes:!!v,axes:_?Array.from(B.subarray(O>>>0,O+_>>>0)):[]})},916340:(d,h,v,_,O)=>{r.ra("ReduceLogSum",d,{keepDims:!!h,noopWithEmptyAxes:!!v,axes:_?Array.from(B.subarray(O>>>0,O+_>>>0)):[]})},916506:(d,h,v,_,O)=>{r.ra("ReduceSumSquare",d,{keepDims:!!h,noopWithEmptyAxes:!!v,axes:_?Array.from(B.subarray(O>>>0,O+_>>>0)):[]})},916675:(d,h,v,_,O)=>{r.ra("ReduceLogSumExp",d,{keepDims:!!h,noopWithEmptyAxes:!!v,axes:_?Array.from(B.subarray(O>>>0,O+_>>>0)):[]})},916844:d=>{r.ra("Where",d,void 0)},916897:(d,h,v)=>{r.ra("Transpose",d,{perm:h?Array.from(B.subarray(v>>>0,v+h>>>0)):[]})},917010:(d,h,v,_,O,L,V,le,X,ae,ee,fe,we,k,oe)=>{r.ra("ConvTranspose",d,{format:X?"NHWC":"NCHW",autoPad:h,dilations:[v],group:_,kernel_shape:[O],pads:[L,V],strides:[le],wIsConst:()=>!!G[ae>>>0],outputPadding:ee?Array.from(B.subarray(fe>>>0,fe+ee>>>0)):[],outputShape:we?Array.from(B.subarray(k>>>0,k+we>>>0)):[],activation:We(oe)})},917424:(d,h,v,_,O,L,V,le,X,ae,ee,fe,we,k)=>{r.ra("ConvTranspose",d,{format:le?"NHWC":"NCHW",autoPad:h,dilations:Array.from(B.subarray(v>>>0,v+2>>>0)),group:_,kernelShape:Array.from(B.subarray(O>>>0,O+2>>>0)),pads:Array.from(B.subarray(L>>>0,L+4>>>0)),strides:Array.from(B.subarray(V>>>0,V+2>>>0)),wIsConst:()=>!!G[X>>>0],outputPadding:0<ae?Array.from(B.subarray(ee>>>0,ee+ae>>>0)):[],outputShape:0<fe?Array.from(B.subarray(we>>>0,we+fe>>>0)):[],activation:We(k)})},917981:(d,h,v,_,O,L,V,le,X,ae,ee,fe,we,k,oe)=>{r.ra("ConvTranspose",d,{format:X?"NHWC":"NCHW",autoPad:h,dilations:[v],group:_,kernel_shape:[O],pads:[L,V],strides:[le],wIsConst:()=>!!G[ae>>>0],outputPadding:ee?Array.from(B.subarray(fe>>>0,fe+ee>>>0)):[],outputShape:we?Array.from(B.subarray(k>>>0,k+we>>>0)):[],activation:We(oe)})},918395:(d,h,v,_,O,L,V,le,X,ae,ee,fe,we,k)=>{r.ra("ConvTranspose",d,{format:le?"NHWC":"NCHW",autoPad:h,dilations:Array.from(B.subarray(v>>>0,v+2>>>0)),group:_,kernelShape:Array.from(B.subarray(O>>>0,O+2>>>0)),pads:Array.from(B.subarray(L>>>0,L+4>>>0)),strides:Array.from(B.subarray(V>>>0,V+2>>>0)),wIsConst:()=>!!G[X>>>0],outputPadding:0<ae?Array.from(B.subarray(ee>>>0,ee+ae>>>0)):[],outputShape:0<fe?Array.from(B.subarray(we>>>0,we+fe>>>0)):[],activation:We(k)})},918952:(d,h)=>{r.ra("GlobalAveragePool",d,{format:h?"NHWC":"NCHW"})},919043:(d,h,v,_,O,L,V,le,X,ae,ee,fe,we,k,oe,ge)=>{r.ra("AveragePool",d,{format:ge?"NHWC":"NCHW",auto_pad:h,ceil_mode:v,count_include_pad:_,storage_order:O,dilations:[L,V],kernel_shape:[le,X],pads:[ae,ee,fe,we],strides:[k,oe]})},919327:(d,h)=>{r.ra("GlobalAveragePool",d,{format:h?"NHWC":"NCHW"})},919418:(d,h,v,_,O,L,V,le,X,ae,ee,fe,we,k,oe,ge)=>{r.ra("AveragePool",d,{format:ge?"NHWC":"NCHW",auto_pad:h,ceil_mode:v,count_include_pad:_,storage_order:O,dilations:[L,V],kernel_shape:[le,X],pads:[ae,ee,fe,we],strides:[k,oe]})},919702:(d,h)=>{r.ra("GlobalMaxPool",d,{format:h?"NHWC":"NCHW"})},919789:(d,h,v,_,O,L,V,le,X,ae,ee,fe,we,k,oe,ge)=>{r.ra("MaxPool",d,{format:ge?"NHWC":"NCHW",auto_pad:h,ceil_mode:v,count_include_pad:_,storage_order:O,dilations:[L,V],kernel_shape:[le,X],pads:[ae,ee,fe,we],strides:[k,oe]})},920069:(d,h)=>{r.ra("GlobalMaxPool",d,{format:h?"NHWC":"NCHW"})},920156:(d,h,v,_,O,L,V,le,X,ae,ee,fe,we,k,oe,ge)=>{r.ra("MaxPool",d,{format:ge?"NHWC":"NCHW",auto_pad:h,ceil_mode:v,count_include_pad:_,storage_order:O,dilations:[L,V],kernel_shape:[le,X],pads:[ae,ee,fe,we],strides:[k,oe]})},920436:(d,h,v,_,O)=>{r.ra("Gemm",d,{alpha:h,beta:v,transA:_,transB:O})},920540:d=>{r.ra("MatMul",d,void 0)},920594:(d,h,v,_)=>{r.ra("ArgMax",d,{keepDims:!!h,selectLastIndex:!!v,axis:_})},920702:(d,h,v,_)=>{r.ra("ArgMin",d,{keepDims:!!h,selectLastIndex:!!v,axis:_})},920810:(d,h)=>{r.ra("Softmax",d,{axis:h})},920873:(d,h)=>{r.ra("Concat",d,{axis:h})},920933:(d,h,v,_,O)=>{r.ra("Split",d,{axis:h,numOutputs:v,splitSizes:_?Array.from(B.subarray(O>>>0,O+_>>>0)):[]})},921078:d=>{r.ra("Expand",d,void 0)},921132:(d,h)=>{r.ra("Gather",d,{axis:Number(h)})},921203:(d,h)=>{r.ra("GatherElements",d,{axis:Number(h)})},921282:(d,h,v,_,O,L,V,le,X,ae,ee)=>{r.ra("Resize",d,{antialias:h,axes:v?Array.from(B.subarray(_>>>0,_+v>>>0)):[],coordinateTransformMode:We(O),cubicCoeffA:L,excludeOutside:V,extrapolationValue:le,keepAspectRatioPolicy:We(X),mode:We(ae),nearestMode:We(ee)})},921633:(d,h,v,_,O,L,V)=>{r.ra("Slice",d,{starts:h?Array.from(B.subarray(v>>>0,v+h>>>0)):[],ends:_?Array.from(B.subarray(O>>>0,O+_>>>0)):[],axes:L?Array.from(B.subarray(V>>>0,V+L>>>0)):[]})},921864:d=>{r.ra("Tile",d,void 0)},921916:(d,h,v)=>{r.ra("LayerNormalization",d,{axis:Number(h),epsilon:Number(v)})},922023:(d,h,v)=>{r.ra("InstanceNormalization",d,{epsilon:h,format:v?"NHWC":"NCHW"})},922137:(d,h,v)=>{r.ra("InstanceNormalization",d,{epsilon:h,format:v?"NHWC":"NCHW"})},922251:d=>{r.ra("Range",d,void 0)},922304:(d,h)=>{r.ra("Einsum",d,{equation:We(h)})},922385:(d,h,v,_,O)=>{r.ra("Pad",d,{mode:h,value:v,pads:_?Array.from(B.subarray(O>>>0,O+_>>>0)):[]})},922517:(d,h,v,_,O,L)=>{r.ra("BatchNormalization",d,{epsilon:h,momentum:v,spatial:!!O,trainingMode:!!_,format:L?"NHWC":"NCHW"})},922686:(d,h,v,_,O,L)=>{r.ra("BatchNormalization",d,{epsilon:h,momentum:v,spatial:!!O,trainingMode:!!_,format:L?"NHWC":"NCHW"})},922855:(d,h,v)=>{r.ra("CumSum",d,{exclusive:Number(h),reverse:Number(v)})},922952:(d,h,v,_,O,L,V,le,X)=>{r.ra("Attention",d,{numHeads:h,isUnidirectional:v,maskFilterValue:_,scale:O,doRotary:L,qkvHiddenSizes:V?Array.from(B.subarray(Number(le)>>>0,Number(le)+V>>>0)):[],pastPresentShareBuffer:!!X})},923224:d=>{r.ra("Gelu",d,void 0)},923276:(d,h,v,_,O,L)=>{r.ra("MultiHeadAttention",d,{numHeads:h,isUnidirectional:v,maskFilterValue:_,scale:O,doRotary:L})},923435:d=>{r.ra("BiasAdd",d,void 0)},923490:d=>{r.ra("BiasSplitGelu",d,void 0)},923551:(d,h)=>{r.ra("SkipLayerNormalization",d,{epsilon:h})},923632:(d,h,v,_,O,L,V,le,X,ae,ee,fe,we)=>{r.ra("Conv",d,{format:X?"NHWC":"NCHW",auto_pad:h,dilations:[v],group:_,kernel_shape:[O],pads:L?Array.from(B.subarray(V>>>0,V+L>>>0)):[],strides:[le],w_is_const:()=>!!G[ae>>>0],activation:We(ee),activation_params:fe?Array.from(pe.subarray(we>>>0,we+fe>>>0)):[]})},924013:(d,h,v,_,O,L,V,le,X,ae,ee,fe,we,k,oe,ge)=>{r.ra("Conv",d,{format:fe?"NHWC":"NCHW",auto_pad:h,dilations:[v,_],group:O,kernel_shape:[L,V],pads:le?Array.from(B.subarray(X>>>0,X+le>>>0)):[],strides:[ae,ee],w_is_const:()=>!!G[we>>>0],activation:We(k),activation_params:oe?Array.from(pe.subarray(ge>>>0,ge+oe>>>0)):[]})},924415:d=>{r.Ra(d)},924449:(d,h)=>r.Sa(d,h,r.Da.Ta,r.Da.errors),924561:d=>r.Oa(d),924594:d=>r.Qa(d),924626:(d,h,v)=>{r.Ja(d,h,v,!0)},924665:(d,h,v)=>{r.Ja(d,h,v)}};function et(d){this.name="ExitStatus",this.message=`Program terminated with exit(${d})`,this.status=d}var Tt=d=>{for(;0<d.length;)d.shift()(r)};function Ot(d){this.Ha=d-24,this.Ma=function(h){j[this.Ha+4>>2>>>0]=h},this.La=function(h){j[this.Ha+8>>2>>>0]=h},this.Ya=function(h,v){this.Ka(),this.Ma(h),this.La(v)},this.Ka=function(){j[this.Ha+16>>2>>>0]=0}}var Jt=0,_r=0,rt=typeof TextDecoder<"u"?new TextDecoder("utf8"):void 0,Qt=(d,h,v)=>{h>>>=0;var _=h+v;for(v=h;d[v]&&!(v>=_);)++v;if(16<v-h&&d.buffer&&rt)return rt.decode(d.subarray(h,v));for(_="";h<v;){var O=d[h++];if(O&128){var L=d[h++]&63;if((O&224)==192)_+=String.fromCharCode((O&31)<<6|L);else{var V=d[h++]&63;O=(O&240)==224?(O&15)<<12|L<<6|V:(O&7)<<18|L<<12|V<<6|d[h++]&63,65536>O?_+=String.fromCharCode(O):(O-=65536,_+=String.fromCharCode(55296|O>>10,56320|O&1023))}}else _+=String.fromCharCode(O)}return _},We=(d,h)=>(d>>>=0)?Qt(re,d,h):"",Vt=d=>{for(var h=0,v=0;v<d.length;++v){var _=d.charCodeAt(v);127>=_?h++:2047>=_?h+=2:55296<=_&&57343>=_?(h+=4,++v):h+=3}return h},er=(d,h,v,_)=>{if(v>>>=0,!(0<_))return 0;var O=v;_=v+_-1;for(var L=0;L<d.length;++L){var V=d.charCodeAt(L);if(55296<=V&&57343>=V){var le=d.charCodeAt(++L);V=65536+((V&1023)<<10)|le&1023}if(127>=V){if(v>=_)break;h[v++>>>0]=V}else{if(2047>=V){if(v+1>=_)break;h[v++>>>0]=192|V>>6}else{if(65535>=V){if(v+2>=_)break;h[v++>>>0]=224|V>>12}else{if(v+3>=_)break;h[v++>>>0]=240|V>>18,h[v++>>>0]=128|V>>12&63}h[v++>>>0]=128|V>>6&63}h[v++>>>0]=128|V&63}}return h[v>>>0]=0,v-O},yt=d=>d%4===0&&(d%100!==0||d%400===0),Cr=[0,31,60,91,121,152,182,213,244,274,305,335],bt=[0,31,59,90,120,151,181,212,243,273,304,334],Ht=d=>{var h=Vt(d)+1,v=qt(h);return v&&er(d,re,v,h),v},St=[],Lt=(d,h)=>{St.length=0;var v;for(h>>=2;v=re[d++>>>0];)h+=v!=105&h,St.push(v==105?B[h>>>0]:Q[h++>>>1]),++h;return St},Gt={},tr=()=>{if(!Ft){var d={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:(typeof navigator=="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:u||"./this.program"},h;for(h in Gt)Gt[h]===void 0?delete d[h]:d[h]=Gt[h];var v=[];for(h in d)v.push(`${h}=${d[h]}`);Ft=v}return Ft},Ft,Ir=[null,[],[]],Le=[31,29,31,30,31,30,31,31,30,31,30,31],rr=[31,28,31,30,31,30,31,31,30,31,30,31];function nr(d){var h=Array(Vt(d)+1);return er(d,h,0,h.length),h}function ue(d,h,v,_){function O(k,oe,ge){for(k=typeof k=="number"?k.toString():k||"";k.length<oe;)k=ge[0]+k;return k}function L(k,oe){return O(k,oe,"0")}function V(k,oe){function ge(mr){return 0>mr?-1:0<mr?1:0}var vt;return(vt=ge(k.getFullYear()-oe.getFullYear()))===0&&(vt=ge(k.getMonth()-oe.getMonth()))===0&&(vt=ge(k.getDate()-oe.getDate())),vt}function le(k){switch(k.getDay()){case 0:return new Date(k.getFullYear()-1,11,29);case 1:return k;case 2:return new Date(k.getFullYear(),0,3);case 3:return new Date(k.getFullYear(),0,2);case 4:return new Date(k.getFullYear(),0,1);case 5:return new Date(k.getFullYear()-1,11,31);case 6:return new Date(k.getFullYear()-1,11,30)}}function X(k){var oe=k.Ba;for(k=new Date(new Date(k.Ca+1900,0,1).getTime());0<oe;){var ge=k.getMonth(),vt=(yt(k.getFullYear())?Le:rr)[ge];if(oe>vt-k.getDate())oe-=vt-k.getDate()+1,k.setDate(1),11>ge?k.setMonth(ge+1):(k.setMonth(0),k.setFullYear(k.getFullYear()+1));else{k.setDate(k.getDate()+oe);break}}return ge=new Date(k.getFullYear()+1,0,4),oe=le(new Date(k.getFullYear(),0,4)),ge=le(ge),0>=V(oe,k)?0>=V(ge,k)?k.getFullYear()+1:k.getFullYear():k.getFullYear()-1}d>>>=0,h>>>=0,v>>>=0,_>>>=0;var ae=B[_+40>>2>>>0];_={Wa:B[_>>2>>>0],Va:B[_+4>>2>>>0],Ea:B[_+8>>2>>>0],Ia:B[_+12>>2>>>0],Fa:B[_+16>>2>>>0],Ca:B[_+20>>2>>>0],wa:B[_+24>>2>>>0],Ba:B[_+28>>2>>>0],$a:B[_+32>>2>>>0],Ua:B[_+36>>2>>>0],Xa:ae?We(ae):""},v=We(v),ae={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var ee in ae)v=v.replace(new RegExp(ee,"g"),ae[ee]);var fe="Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),we="January February March April May June July August September October November December".split(" ");ae={"%a":k=>fe[k.wa].substring(0,3),"%A":k=>fe[k.wa],"%b":k=>we[k.Fa].substring(0,3),"%B":k=>we[k.Fa],"%C":k=>L((k.Ca+1900)/100|0,2),"%d":k=>L(k.Ia,2),"%e":k=>O(k.Ia,2," "),"%g":k=>X(k).toString().substring(2),"%G":k=>X(k),"%H":k=>L(k.Ea,2),"%I":k=>(k=k.Ea,k==0?k=12:12<k&&(k-=12),L(k,2)),"%j":k=>{for(var oe=0,ge=0;ge<=k.Fa-1;oe+=(yt(k.Ca+1900)?Le:rr)[ge++]);return L(k.Ia+oe,3)},"%m":k=>L(k.Fa+1,2),"%M":k=>L(k.Va,2),"%n":()=>`
`,"%p":k=>0<=k.Ea&&12>k.Ea?"AM":"PM","%S":k=>L(k.Wa,2),"%t":()=>"	","%u":k=>k.wa||7,"%U":k=>L(Math.floor((k.Ba+7-k.wa)/7),2),"%V":k=>{var oe=Math.floor((k.Ba+7-(k.wa+6)%7)/7);if(2>=(k.wa+371-k.Ba-2)%7&&oe++,oe)oe==53&&(ge=(k.wa+371-k.Ba)%7,ge==4||ge==3&&yt(k.Ca)||(oe=1));else{oe=52;var ge=(k.wa+7-k.Ba-1)%7;(ge==4||ge==5&&yt(k.Ca%400-1))&&oe++}return L(oe,2)},"%w":k=>k.wa,"%W":k=>L(Math.floor((k.Ba+7-(k.wa+6)%7)/7),2),"%y":k=>(k.Ca+1900).toString().substring(2),"%Y":k=>k.Ca+1900,"%z":k=>{k=k.Ua;var oe=0<=k;return k=Math.abs(k)/60,(oe?"+":"-")+("0000"+(k/60*100+k%60)).slice(-4)},"%Z":k=>k.Xa,"%%":()=>"%"},v=v.replace(/%%/g,"\0\0");for(ee in ae)v.includes(ee)&&(v=v.replace(new RegExp(ee,"g"),ae[ee](_)));return v=v.replace(/\0\0/g,"%"),ee=nr(v),ee.length>h?0:(G.set(ee,d>>>0),ee.length-1)}function wt(d){try{d()}catch(h){je(h)}}function Er(d){var h={},v;for(v in d)(function(_){var O=d[_];h[_]=typeof O=="function"?function(){kt.push(_);try{return O.apply(null,arguments)}finally{H||(kt.pop()===_||je(),tt&&ut===1&&kt.length===0&&(ut=0,wt(pr),typeof Fibers<"u"&&Fibers.ab()))}}:O})(v);return h}var ut=0,tt=null,Ar=0,kt=[],ar={},ir={},Tr=0,Rt=null,Or=[];function kr(){return new Promise((d,h)=>{Rt={resolve:d,reject:h}})}function Rr(){var d=qt(65548),h=d+12;j[d>>2>>>0]=h,j[d+4>>2>>>0]=h+65536,h=kt[0];var v=ar[h];return v===void 0&&(v=Tr++,ar[h]=v,ir[v]=h),B[d+8>>2>>>0]=v,d}function Pr(d){if(!H){if(ut===0){var h=!1,v=!1;d((_=0)=>{if(!H&&(Ar=_,h=!0,v)){ut=2,wt(()=>jt(tt)),typeof Browser<"u"&&Browser.Ga.Na&&Browser.Ga.resume(),_=!1;try{var O=(0,T[ir[B[tt+8>>2>>>0]]])()}catch(le){O=le,_=!0}var L=!1;if(!tt){var V=Rt;V&&(Rt=null,(_?V.reject:V.resolve)(O),L=!0)}if(_&&!L)throw O}}),v=!0,h||(ut=1,tt=Rr(),typeof Browser<"u"&&Browser.Ga.Na&&Browser.Ga.pause(),wt(()=>cr(tt)))}else ut===2?(ut=0,wt(Pt),or(tt),tt=null,Or.forEach(_=>{if(!H)try{if(_(),!E)try{N=N=_=N,E||(r.onExit&&r.onExit(_),H=!0),l(_,new et(_))}catch(O){O instanceof et||O=="unwind"||l(1,O)}}catch(O){O instanceof et||O=="unwind"||l(1,O)}})):je(`invalid state: ${ut}`);return Ar}}function Br(d){return Pr(h=>{d().then(h)})}var Mr={n:function(d,h,v){return Br(async()=>{await r.Pa(d,h,v)})},a:function(d,h,v){throw d>>>=0,new Ot(d).Ya(h>>>0,v>>>0),Jt=d,_r++,Jt},g:function(){return 0},J:function(){},z:function(){},B:function(){},L:function(){return 0},H:function(){},C:function(){},G:function(){},l:function(){},A:function(){},x:function(){},I:function(){},y:function(){},m:()=>!0,q:function(d,h,v){d=h+2097152>>>0<4194305-!!d?(d>>>0)+4294967296*h:NaN,v>>>=0,d=new Date(1e3*d),B[v>>2>>>0]=d.getUTCSeconds(),B[v+4>>2>>>0]=d.getUTCMinutes(),B[v+8>>2>>>0]=d.getUTCHours(),B[v+12>>2>>>0]=d.getUTCDate(),B[v+16>>2>>>0]=d.getUTCMonth(),B[v+20>>2>>>0]=d.getUTCFullYear()-1900,B[v+24>>2>>>0]=d.getUTCDay(),B[v+28>>2>>>0]=(d.getTime()-Date.UTC(d.getUTCFullYear(),0,1,0,0,0,0))/864e5|0},r:function(d,h,v){d=h+2097152>>>0<4194305-!!d?(d>>>0)+4294967296*h:NaN,v>>>=0,d=new Date(1e3*d),B[v>>2>>>0]=d.getSeconds(),B[v+4>>2>>>0]=d.getMinutes(),B[v+8>>2>>>0]=d.getHours(),B[v+12>>2>>>0]=d.getDate(),B[v+16>>2>>>0]=d.getMonth(),B[v+20>>2>>>0]=d.getFullYear()-1900,B[v+24>>2>>>0]=d.getDay(),B[v+28>>2>>>0]=(yt(d.getFullYear())?Cr:bt)[d.getMonth()]+d.getDate()-1|0,B[v+36>>2>>>0]=-(60*d.getTimezoneOffset()),h=new Date(d.getFullYear(),6,1).getTimezoneOffset();var _=new Date(d.getFullYear(),0,1).getTimezoneOffset();B[v+32>>2>>>0]=(h!=_&&d.getTimezoneOffset()==Math.min(_,h))|0},s:function(d){d>>>=0;var h=new Date(B[d+20>>2>>>0]+1900,B[d+16>>2>>>0],B[d+12>>2>>>0],B[d+8>>2>>>0],B[d+4>>2>>>0],B[d>>2>>>0],0),v=B[d+32>>2>>>0],_=h.getTimezoneOffset(),O=new Date(h.getFullYear(),6,1).getTimezoneOffset(),L=new Date(h.getFullYear(),0,1).getTimezoneOffset(),V=Math.min(L,O);return 0>v?B[d+32>>2>>>0]=+(O!=L&&V==_):0<v!=(V==_)&&(O=Math.max(L,O),h.setTime(h.getTime()+6e4*((0<v?V:O)-_))),B[d+24>>2>>>0]=h.getDay(),B[d+28>>2>>>0]=(yt(h.getFullYear())?Cr:bt)[h.getMonth()]+h.getDate()-1|0,B[d>>2>>>0]=h.getSeconds(),B[d+4>>2>>>0]=h.getMinutes(),B[d+8>>2>>>0]=h.getHours(),B[d+12>>2>>>0]=h.getDate(),B[d+16>>2>>>0]=h.getMonth(),B[d+20>>2>>>0]=h.getYear(),d=h.getTime()/1e3,sr((Ke=d,1<=+Math.abs(Ke)?0<Ke?+Math.floor(Ke/4294967296)>>>0:~~+Math.ceil((Ke-+(~~Ke>>>0))/4294967296)>>>0:0)),d>>>0},o:function(){return-52},p:function(){},v:function(d,h,v){function _(X){return(X=X.toTimeString().match(/\(([A-Za-z ]+)\)$/))?X[1]:"GMT"}v>>>=0;var O=new Date().getFullYear(),L=new Date(O,0,1),V=new Date(O,6,1);O=L.getTimezoneOffset();var le=V.getTimezoneOffset();j[d>>>0>>2>>>0]=60*Math.max(O,le),B[h>>>0>>2>>>0]=+(O!=le),d=_(L),h=_(V),d=Ht(d),h=Ht(h),le<O?(j[v>>2>>>0]=d,j[v+4>>2>>>0]=h):(j[v>>2>>>0]=h,j[v+4>>2>>>0]=d)},e:()=>{je("")},b:function(d,h,v){return d>>>=0,h=Lt(h>>>0,v>>>0),st[d].apply(null,h)},i:function(d,h,v){return d>>>=0,h=Lt(h>>>0,v>>>0),st[d].apply(null,h)},h:function(){return Date.now()},w:function(){return 4294901760},c:()=>performance.now(),K:function(d,h,v){return h>>>=0,re.copyWithin(d>>>0>>>0,h>>>0,h+(v>>>0)>>>0)},u:function(d){d>>>=0;var h=re.length;if(4294901760<d)return!1;for(var v=1;4>=v;v*=2){var _=h*(1+.2/v);_=Math.min(_,d+100663296);var O=Math;_=Math.max(d,_);e:{O=O.min.call(O,4294901760,_+(65536-_%65536)%65536)-z.buffer.byteLength+65535>>>16;try{z.grow(O),$e();var L=1;break e}catch{}L=void 0}if(L)return!0}return!1},D:function(d,h){d>>>=0,h>>>=0;var v=0;return tr().forEach(function(_,O){var L=h+v;for(O=j[d+4*O>>2>>>0]=L,L=0;L<_.length;++L)G[O++>>0>>>0]=_.charCodeAt(L);G[O>>0>>>0]=0,v+=_.length+1}),0},E:function(d,h){d>>>=0,h>>>=0;var v=tr();j[d>>2>>>0]=v.length;var _=0;return v.forEach(function(O){_+=O.length+1}),j[h>>2>>>0]=_,0},f:()=>52,k:function(){return 52},t:function(){return 70},j:function(d,h,v,_){h>>>=0,v>>>=0,_>>>=0;for(var O=0,L=0;L<v;L++){var V=j[h>>2>>>0],le=j[h+4>>2>>>0];h+=8;for(var X=0;X<le;X++){var ae=re[V+X>>>0],ee=Ir[d];ae===0||ae===10?((d===1?x:C)(Qt(ee,0)),ee.length=0):ee.push(ae)}O+=le}return j[_>>2>>>0]=O,0},F:ue,d:function(d,h,v,_){return ue(d>>>0,h>>>0,v>>>0,_>>>0)}};(function(){function d(v){if(v=v.exports,v=Er(v),T=v=xt(v),z=T.M,$e(),Se.unshift(T.N),he--,r.monitorRunDependencies&&r.monitorRunDependencies(he),he==0&&(ot!==null&&(clearInterval(ot),ot=null),Ge)){var _=Ge;Ge=null,_()}return v}var h={a:Mr};if(he++,r.monitorRunDependencies&&r.monitorRunDependencies(he),r.instantiateWasm)try{return r.instantiateWasm(h,d)}catch(v){C("Module.instantiateWasm callback failed with error: "+v),n(v)}return Ne(h,function(v){d(v.instance)}).catch(n),{}})(),r._OrtInit=(d,h)=>(r._OrtInit=T.O)(d,h),r._OrtGetLastError=(d,h)=>(r._OrtGetLastError=T.P)(d,h),r._OrtCreateSessionOptions=(d,h,v,_,O,L,V,le,X,ae)=>(r._OrtCreateSessionOptions=T.Q)(d,h,v,_,O,L,V,le,X,ae),r._OrtAppendExecutionProvider=(d,h)=>(r._OrtAppendExecutionProvider=T.R)(d,h),r._OrtAddFreeDimensionOverride=(d,h,v)=>(r._OrtAddFreeDimensionOverride=T.S)(d,h,v),r._OrtAddSessionConfigEntry=(d,h,v)=>(r._OrtAddSessionConfigEntry=T.T)(d,h,v),r._OrtReleaseSessionOptions=d=>(r._OrtReleaseSessionOptions=T.U)(d),r._OrtCreateSession=(d,h,v)=>(r._OrtCreateSession=T.V)(d,h,v),r._OrtReleaseSession=d=>(r._OrtReleaseSession=T.W)(d),r._OrtGetInputOutputCount=(d,h,v)=>(r._OrtGetInputOutputCount=T.X)(d,h,v),r._OrtGetInputName=(d,h)=>(r._OrtGetInputName=T.Y)(d,h),r._OrtGetOutputName=(d,h)=>(r._OrtGetOutputName=T.Z)(d,h),r._OrtFree=d=>(r._OrtFree=T._)(d),r._OrtCreateTensor=(d,h,v,_,O,L)=>(r._OrtCreateTensor=T.$)(d,h,v,_,O,L),r._OrtGetTensorData=(d,h,v,_,O)=>(r._OrtGetTensorData=T.aa)(d,h,v,_,O),r._OrtReleaseTensor=d=>(r._OrtReleaseTensor=T.ba)(d),r._OrtCreateRunOptions=(d,h,v,_)=>(r._OrtCreateRunOptions=T.ca)(d,h,v,_),r._OrtAddRunConfigEntry=(d,h,v)=>(r._OrtAddRunConfigEntry=T.da)(d,h,v),r._OrtReleaseRunOptions=d=>(r._OrtReleaseRunOptions=T.ea)(d),r._OrtCreateBinding=d=>(r._OrtCreateBinding=T.fa)(d),r._OrtBindInput=(d,h,v)=>(r._OrtBindInput=T.ga)(d,h,v),r._OrtBindOutput=(d,h,v,_)=>(r._OrtBindOutput=T.ha)(d,h,v,_),r._OrtClearBoundOutputs=d=>(r._OrtClearBoundOutputs=T.ia)(d),r._OrtReleaseBinding=d=>(r._OrtReleaseBinding=T.ja)(d),r._OrtRunWithBinding=(d,h,v,_,O)=>(r._OrtRunWithBinding=T.ka)(d,h,v,_,O),r._OrtRun=(d,h,v,_,O,L,V,le)=>(r._OrtRun=T.la)(d,h,v,_,O,L,V,le),r._OrtEndProfiling=d=>(r._OrtEndProfiling=T.ma)(d),r._JsepOutput=(d,h,v)=>(r._JsepOutput=T.na)(d,h,v),r._JsepGetNodeName=d=>(r._JsepGetNodeName=T.oa)(d);var qt=r._malloc=d=>(qt=r._malloc=T.pa)(d),or=r._free=d=>(or=r._free=T.qa)(d),sr=d=>(sr=T.sa)(d),ur=()=>(ur=T.ta)(),lr=d=>(lr=T.ua)(d),dr=d=>(dr=T.va)(d),cr=d=>(cr=T.xa)(d),pr=()=>(pr=T.ya)(),jt=d=>(jt=T.za)(d),Pt=()=>(Pt=T.Aa)();r.___start_em_js=924698,r.___stop_em_js=924859;function xt(d){d=Object.assign({},d);var h=_=>()=>_()>>>0,v=_=>O=>_(O)>>>0;return d.__errno_location=h(d.__errno_location),d.malloc=v(d.malloc),d.stackSave=h(d.stackSave),d.stackAlloc=v(d.stackAlloc),d}r.stackAlloc=dr,r.stackSave=ur,r.stackRestore=lr,r.UTF8ToString=We,r.stringToUTF8=(d,h,v)=>er(d,re,h,v),r.lengthBytesUTF8=Vt;var Bt;Ge=function d(){Bt||fr(),Bt||(Ge=d)};function fr(){function d(){if(!Bt&&(Bt=!0,r.calledRun=!0,!H)){if(Tt(Se),a(r),r.onRuntimeInitialized&&r.onRuntimeInitialized(),r.postRun)for(typeof r.postRun=="function"&&(r.postRun=[r.postRun]);r.postRun.length;){var h=r.postRun.shift();Ie.unshift(h)}Tt(Ie)}}if(!(0<he)){if(r.preRun)for(typeof r.preRun=="function"&&(r.preRun=[r.preRun]);r.preRun.length;)Ee();Tt(Z),0<he||(r.setStatus?(r.setStatus("Running..."),setTimeout(function(){setTimeout(function(){r.setStatus("")},1),d()},1)):d())}}if(r.preInit)for(typeof r.preInit=="function"&&(r.preInit=[r.preInit]);0<r.preInit.length;)r.preInit.pop()();return fr(),t.ready}})();typeof $i=="object"&&typeof Un=="object"?Un.exports=vi:typeof define=="function"&&define.amd&&define([],()=>vi)});var xi=Kt(()=>{});var _i=Kt(()=>{});var Ci={};Yt(Ci,{cpus:()=>td});var td,Ii=q(()=>{td=void 0});var Ti=Kt((Ai,Nn)=>{"use strict";var Ei=(()=>{var e=typeof document<"u"&&document.currentScript?document.currentScript.src:void 0;return typeof __filename<"u"&&(e=e||__filename),function(t={}){function r(){return $e.buffer!=he.buffer&&me(),he}function a(){return $e.buffer!=he.buffer&&me(),ot}function n(){return $e.buffer!=he.buffer&&me(),Ge}function o(){return $e.buffer!=he.buffer&&me(),je}function u(){return $e.buffer!=he.buffer&&me(),F}function l(){return $e.buffer!=he.buffer&&me(),de}var i=t,c,f;i.ready=new Promise((s,p)=>{c=s,f=p}),i.jsepInit=(s,p,g,S,A,M,U,ie)=>{i.Qb=s,i.wb=p,i.yb=g,i.jb=S,i.xb=A,i.Ea=M,i.zb=U,i.Ab=ie,p=(te,ne,se)=>(...ve)=>{let _e=lt,R=ne?.();ve=te(...ve);let ce=ne?.();return R!==ce&&(te=ce,se(R),ne=se=null),lt!=_e?Wl():ve},g=te=>async(...ne)=>{try{if(i.bb)throw Error("Session already started");let se=i.bb={Fb:ne[0],errors:[]},ve=await te(...ne);if(i.bb!==se)throw Error("Session mismatch");s.flush();let _e=se.errors;if(0<_e.length){let R=await Promise.all(_e);if(R=R.filter(ce=>ce),0<R.length)throw Error(R.join(`
`))}return ve}finally{i.bb=null}},i._OrtRun=g(p(i._OrtRun,()=>i._OrtRun,te=>i._OrtRun=te)),i._OrtRunWithBinding=g(p(i._OrtRunWithBinding,()=>i._OrtRunWithBinding,te=>i._OrtRunWithBinding=te)),i._OrtBindInput=p(i._OrtBindInput,()=>i._OrtBindInput,te=>i._OrtBindInput=te),i.jsepRegisterBuffer=(te,ne,se,ve)=>s.registerBuffer(te,ne,se,ve),i.jsepUnregisterBuffers=te=>{s.unregisterBuffers(te)},i.jsepGetBuffer=te=>s.getBuffer(te),i.jsepCreateDownloader=(te,ne,se)=>s.createDownloader(te,ne,se)};var y=Object.assign({},i),m="./this.program",b=(s,p)=>{throw p},w=typeof window=="object",$=typeof importScripts=="function",I=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string",x=i.ENVIRONMENT_IS_PTHREAD||!1,C="";function P(s){return i.locateFile?i.locateFile(s,C):C+s}var E,z,T;if(I){var H=(zn(),zt(Mn)),N=(Wn(),zt(Dn));C=$?N.dirname(C)+"/":__dirname+"/",E=(p,g)=>(p=p.startsWith("file://")?new URL(p):N.normalize(p),H.readFileSync(p,g?void 0:"utf8")),T=p=>(p=E(p,!0),p.buffer||(p=new Uint8Array(p)),p),z=(p,g,S,A=!0)=>{p=p.startsWith("file://")?new URL(p):N.normalize(p),H.readFile(p,A?void 0:"utf8",(M,U)=>{M?S(M):g(A?U.buffer:U)})},!i.thisProgram&&1<process.argv.length&&(m=process.argv[1].replace(/\\/g,"/")),process.argv.slice(2),b=(p,g)=>{throw process.exitCode=p,g},i.inspect=()=>"[Emscripten Module object]";let s;try{s=xi()}catch(p){throw console.error('The "worker_threads" module is not supported in this node.js build - perhaps a newer version is needed?'),p}global.Worker=s.Worker}else(w||$)&&($?C=self.location.href:typeof document<"u"&&document.currentScript&&(C=document.currentScript.src),typeof e<"u"&&e&&(C=e),C.indexOf("blob:")!==0?C=C.substr(0,C.replace(/[?#].*/,"").lastIndexOf("/")+1):C="",I||(E=s=>{var p=new XMLHttpRequest;return p.open("GET",s,!1),p.send(null),p.responseText},$&&(T=s=>{var p=new XMLHttpRequest;return p.open("GET",s,!1),p.responseType="arraybuffer",p.send(null),new Uint8Array(p.response)}),z=(s,p,g)=>{var S=new XMLHttpRequest;S.open("GET",s,!0),S.responseType="arraybuffer",S.onload=()=>{S.status==200||S.status==0&&S.response?p(S.response):g()},S.onerror=g,S.send(null)}));I&&typeof performance>"u"&&(global.performance=_i().performance);var G=console.log.bind(console),re=console.error.bind(console);I&&(G=(...s)=>H.writeSync(1,s.join(" ")+`
`),re=(...s)=>H.writeSync(2,s.join(" ")+`
`));var B=i.print||G,j=i.printErr||re;Object.assign(i,y),y=null,i.thisProgram&&(m=i.thisProgram),i.quit&&(b=i.quit);var pe;i.wasmBinary&&(pe=i.wasmBinary);var Q=i.noExitRuntime||!0;typeof WebAssembly!="object"&&rt("no native wasm support detected");var $e,Z,Se,Ie=!1,Ee,he,ot,Ge,je,F,de;function me(){var s=$e.buffer;i.HEAP8=he=new Int8Array(s),i.HEAP16=new Int16Array(s),i.HEAP32=Ge=new Int32Array(s),i.HEAPU8=ot=new Uint8Array(s),i.HEAPU16=new Uint16Array(s),i.HEAPU32=je=new Uint32Array(s),i.HEAPF32=F=new Float32Array(s),i.HEAPF64=de=new Float64Array(s)}var He=i.INITIAL_MEMORY||16777216;if(5242880<=He||rt("INITIAL_MEMORY should be larger than STACK_SIZE, was "+He+"! (STACK_SIZE=5242880)"),x)$e=i.wasmMemory;else if(i.wasmMemory)$e=i.wasmMemory;else if($e=new WebAssembly.Memory({initial:He/65536,maximum:65536,shared:!0}),!($e.buffer instanceof SharedArrayBuffer))throw j("requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag"),I&&j("(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and/or recent version)"),Error("bad memory");me(),He=$e.buffer.byteLength;var Xe=[],Me=[],Ne=[],Ke=0;function st(){return Q||0<Ke}var et=0,Tt=null,Ot=null;function Jt(){et++,i.monitorRunDependencies&&i.monitorRunDependencies(et)}function _r(){if(et--,i.monitorRunDependencies&&i.monitorRunDependencies(et),et==0&&(Tt!==null&&(clearInterval(Tt),Tt=null),Ot)){var s=Ot;Ot=null,s()}}function rt(s){throw i.onAbort&&i.onAbort(s),s="Aborted("+s+")",j(s),Ie=!0,Ee=1,s=new WebAssembly.RuntimeError(s+". Build with -sASSERTIONS for more info."),f(s),s}function Qt(s){return s.startsWith("data:application/octet-stream;base64,")}var We;We="ort-wasm-simd-threaded.wasm",Qt(We)||(We=P(We));function Vt(s){if(s==We&&pe)return new Uint8Array(pe);if(T)return T(s);throw"both async and sync fetching of the wasm failed"}function er(s){if(!pe&&(w||$)){if(typeof fetch=="function"&&!s.startsWith("file://"))return fetch(s,{credentials:"same-origin"}).then(p=>{if(!p.ok)throw"failed to load wasm binary file at '"+s+"'";return p.arrayBuffer()}).catch(()=>Vt(s));if(z)return new Promise((p,g)=>{z(s,S=>p(new Uint8Array(S)),g)})}return Promise.resolve().then(()=>Vt(s))}function yt(s,p,g){return er(s).then(S=>WebAssembly.instantiate(S,p)).then(S=>S).then(g,S=>{j("failed to asynchronously prepare wasm: "+S),rt(S)})}function Cr(s,p){var g=We;return pe||typeof WebAssembly.instantiateStreaming!="function"||Qt(g)||g.startsWith("file://")||I||typeof fetch!="function"?yt(g,s,p):fetch(g,{credentials:"same-origin"}).then(S=>WebAssembly.instantiateStreaming(S,s).then(p,function(A){return j("wasm streaming compile failed: "+A),j("falling back to ArrayBuffer instantiation"),yt(g,s,p)}))}var bt,Ht={1428528:s=>{i.Ea("Abs",s,void 0)},1428579:s=>{i.Ea("Neg",s,void 0)},1428630:s=>{i.Ea("Floor",s,void 0)},1428683:s=>{i.Ea("Ceil",s,void 0)},1428735:s=>{i.Ea("Reciprocal",s,void 0)},1428793:s=>{i.Ea("Sqrt",s,void 0)},1428845:s=>{i.Ea("Exp",s,void 0)},1428896:s=>{i.Ea("Erf",s,void 0)},1428947:s=>{i.Ea("Sigmoid",s,void 0)},1429002:s=>{i.Ea("Log",s,void 0)},1429053:s=>{i.Ea("Sin",s,void 0)},1429104:s=>{i.Ea("Cos",s,void 0)},1429155:s=>{i.Ea("Tan",s,void 0)},1429206:s=>{i.Ea("Asin",s,void 0)},1429258:s=>{i.Ea("Acos",s,void 0)},1429310:s=>{i.Ea("Atan",s,void 0)},1429362:s=>{i.Ea("Sinh",s,void 0)},1429414:s=>{i.Ea("Cosh",s,void 0)},1429466:s=>{i.Ea("Asinh",s,void 0)},1429519:s=>{i.Ea("Acosh",s,void 0)},1429572:s=>{i.Ea("Atanh",s,void 0)},1429625:s=>{i.Ea("Tanh",s,void 0)},1429677:s=>{i.Ea("Not",s,void 0)},1429728:(s,p,g)=>{i.Ea("Clip",s,{min:p,max:g})},1429797:s=>{i.Ea("Clip",s,void 0)},1429849:(s,p)=>{i.Ea("Elu",s,{alpha:p})},1429907:s=>{i.Ea("Relu",s,void 0)},1429959:(s,p)=>{i.Ea("LeakyRelu",s,{alpha:p})},1430023:(s,p)=>{i.Ea("ThresholdedRelu",s,{alpha:p})},1430093:s=>{i.zb(s)},1430127:(s,p)=>i.Ab(s,p,i.bb.Fb,i.bb.errors),1430239:(s,p)=>{i.Ea("Cast",s,{to:p})},1430297:s=>{i.Ea("Add",s,void 0)},1430348:s=>{i.Ea("Sub",s,void 0)},1430399:s=>{i.Ea("Mul",s,void 0)},1430450:s=>{i.Ea("Div",s,void 0)},1430501:s=>{i.Ea("Pow",s,void 0)},1430552:s=>{i.Ea("Equal",s,void 0)},1430605:s=>{i.Ea("Greater",s,void 0)},1430660:s=>{i.Ea("GreaterOrEqual",s,void 0)},1430722:s=>{i.Ea("Less",s,void 0)},1430774:s=>{i.Ea("LessOrEqual",s,void 0)},1430833:(s,p,g,S,A)=>{i.Ea("ReduceMean",s,{keepDims:!!p,noopWithEmptyAxes:!!g,axes:S?Array.from(n().subarray(A>>>0,A+S>>>0)):[]})},1430997:(s,p,g,S,A)=>{i.Ea("ReduceMax",s,{keepDims:!!p,noopWithEmptyAxes:!!g,axes:S?Array.from(n().subarray(A>>>0,A+S>>>0)):[]})},1431160:(s,p,g,S,A)=>{i.Ea("ReduceMin",s,{keepDims:!!p,noopWithEmptyAxes:!!g,axes:S?Array.from(n().subarray(A>>>0,A+S>>>0)):[]})},1431323:(s,p,g,S,A)=>{i.Ea("ReduceProd",s,{keepDims:!!p,noopWithEmptyAxes:!!g,axes:S?Array.from(n().subarray(A>>>0,A+S>>>0)):[]})},1431487:(s,p,g,S,A)=>{i.Ea("ReduceSum",s,{keepDims:!!p,noopWithEmptyAxes:!!g,axes:S?Array.from(n().subarray(A>>>0,A+S>>>0)):[]})},1431650:(s,p,g,S,A)=>{i.Ea("ReduceL1",s,{keepDims:!!p,noopWithEmptyAxes:!!g,axes:S?Array.from(n().subarray(A>>>0,A+S>>>0)):[]})},1431812:(s,p,g,S,A)=>{i.Ea("ReduceL2",s,{keepDims:!!p,noopWithEmptyAxes:!!g,axes:S?Array.from(n().subarray(A>>>0,A+S>>>0)):[]})},1431974:(s,p,g,S,A)=>{i.Ea("ReduceLogSum",s,{keepDims:!!p,noopWithEmptyAxes:!!g,axes:S?Array.from(n().subarray(A>>>0,A+S>>>0)):[]})},1432140:(s,p,g,S,A)=>{i.Ea("ReduceSumSquare",s,{keepDims:!!p,noopWithEmptyAxes:!!g,axes:S?Array.from(n().subarray(A>>>0,A+S>>>0)):[]})},1432309:(s,p,g,S,A)=>{i.Ea("ReduceLogSumExp",s,{keepDims:!!p,noopWithEmptyAxes:!!g,axes:S?Array.from(n().subarray(A>>>0,A+S>>>0)):[]})},1432478:s=>{i.Ea("Where",s,void 0)},1432531:(s,p,g)=>{i.Ea("Transpose",s,{perm:p?Array.from(n().subarray(g>>>0,g+p>>>0)):[]})},1432644:(s,p,g,S,A,M,U,ie,te,ne,se,ve,_e)=>{i.Ea("Conv",s,{format:te?"NHWC":"NCHW",auto_pad:p,dilations:[g],group:S,kernel_shape:[A],pads:M?Array.from(n().subarray(U>>>0,U+M>>>0)):[],strides:[ie],w_is_const:()=>!!r()[ne>>>0],activation:Le(se),activation_params:ve?Array.from(u().subarray(_e>>>0,_e+ve>>>0)):[]})},1433025:(s,p,g,S,A,M,U,ie,te,ne,se,ve,_e,R,ce,xe)=>{i.Ea("Conv",s,{format:ve?"NHWC":"NCHW",auto_pad:p,dilations:[g,S],group:A,kernel_shape:[M,U],pads:ie?Array.from(n().subarray(te>>>0,te+ie>>>0)):[],strides:[ne,se],w_is_const:()=>!!r()[_e>>>0],activation:Le(R),activation_params:ce?Array.from(u().subarray(xe>>>0,xe+ce>>>0)):[]})},1433427:(s,p,g,S,A,M,U,ie,te,ne,se,ve,_e,R,ce)=>{i.Ea("ConvTranspose",s,{format:te?"NHWC":"NCHW",autoPad:p,dilations:[g],group:S,kernel_shape:[A],pads:[M,U],strides:[ie],wIsConst:()=>!!r()[ne>>>0],outputPadding:se?Array.from(n().subarray(ve>>>0,ve+se>>>0)):[],outputShape:_e?Array.from(n().subarray(R>>>0,R+_e>>>0)):[],activation:Le(ce)})},1433841:(s,p,g,S,A,M,U,ie,te,ne,se,ve,_e,R)=>{i.Ea("ConvTranspose",s,{format:ie?"NHWC":"NCHW",autoPad:p,dilations:Array.from(n().subarray(g>>>0,g+2>>>0)),group:S,kernelShape:Array.from(n().subarray(A>>>0,A+2>>>0)),pads:Array.from(n().subarray(M>>>0,M+4>>>0)),strides:Array.from(n().subarray(U>>>0,U+2>>>0)),wIsConst:()=>!!r()[te>>>0],outputPadding:0<ne?Array.from(n().subarray(se>>>0,se+ne>>>0)):[],outputShape:0<ve?Array.from(n().subarray(_e>>>0,_e+ve>>>0)):[],activation:Le(R)})},1434398:(s,p,g,S,A,M,U,ie,te,ne,se,ve,_e,R,ce)=>{i.Ea("ConvTranspose",s,{format:te?"NHWC":"NCHW",autoPad:p,dilations:[g],group:S,kernel_shape:[A],pads:[M,U],strides:[ie],wIsConst:()=>!!r()[ne>>>0],outputPadding:se?Array.from(n().subarray(ve>>>0,ve+se>>>0)):[],outputShape:_e?Array.from(n().subarray(R>>>0,R+_e>>>0)):[],activation:Le(ce)})},1434812:(s,p,g,S,A,M,U,ie,te,ne,se,ve,_e,R)=>{i.Ea("ConvTranspose",s,{format:ie?"NHWC":"NCHW",autoPad:p,dilations:Array.from(n().subarray(g>>>0,g+2>>>0)),group:S,kernelShape:Array.from(n().subarray(A>>>0,A+2>>>0)),pads:Array.from(n().subarray(M>>>0,M+4>>>0)),strides:Array.from(n().subarray(U>>>0,U+2>>>0)),wIsConst:()=>!!r()[te>>>0],outputPadding:0<ne?Array.from(n().subarray(se>>>0,se+ne>>>0)):[],outputShape:0<ve?Array.from(n().subarray(_e>>>0,_e+ve>>>0)):[],activation:Le(R)})},1435369:(s,p)=>{i.Ea("GlobalAveragePool",s,{format:p?"NHWC":"NCHW"})},1435460:(s,p,g,S,A,M,U,ie,te,ne,se,ve,_e,R,ce,xe)=>{i.Ea("AveragePool",s,{format:xe?"NHWC":"NCHW",auto_pad:p,ceil_mode:g,count_include_pad:S,storage_order:A,dilations:[M,U],kernel_shape:[ie,te],pads:[ne,se,ve,_e],strides:[R,ce]})},1435744:(s,p)=>{i.Ea("GlobalAveragePool",s,{format:p?"NHWC":"NCHW"})},1435835:(s,p,g,S,A,M,U,ie,te,ne,se,ve,_e,R,ce,xe)=>{i.Ea("AveragePool",s,{format:xe?"NHWC":"NCHW",auto_pad:p,ceil_mode:g,count_include_pad:S,storage_order:A,dilations:[M,U],kernel_shape:[ie,te],pads:[ne,se,ve,_e],strides:[R,ce]})},1436119:(s,p)=>{i.Ea("GlobalMaxPool",s,{format:p?"NHWC":"NCHW"})},1436206:(s,p,g,S,A,M,U,ie,te,ne,se,ve,_e,R,ce,xe)=>{i.Ea("MaxPool",s,{format:xe?"NHWC":"NCHW",auto_pad:p,ceil_mode:g,count_include_pad:S,storage_order:A,dilations:[M,U],kernel_shape:[ie,te],pads:[ne,se,ve,_e],strides:[R,ce]})},1436486:(s,p)=>{i.Ea("GlobalMaxPool",s,{format:p?"NHWC":"NCHW"})},1436573:(s,p,g,S,A,M,U,ie,te,ne,se,ve,_e,R,ce,xe)=>{i.Ea("MaxPool",s,{format:xe?"NHWC":"NCHW",auto_pad:p,ceil_mode:g,count_include_pad:S,storage_order:A,dilations:[M,U],kernel_shape:[ie,te],pads:[ne,se,ve,_e],strides:[R,ce]})},1436853:(s,p,g,S,A)=>{i.Ea("Gemm",s,{alpha:p,beta:g,transA:S,transB:A})},1436957:s=>{i.Ea("MatMul",s,void 0)},1437011:(s,p,g,S)=>{i.Ea("ArgMax",s,{keepDims:!!p,selectLastIndex:!!g,axis:S})},1437119:(s,p,g,S)=>{i.Ea("ArgMin",s,{keepDims:!!p,selectLastIndex:!!g,axis:S})},1437227:(s,p)=>{i.Ea("Softmax",s,{axis:p})},1437290:(s,p)=>{i.Ea("Concat",s,{axis:p})},1437350:(s,p,g,S,A)=>{i.Ea("Split",s,{axis:p,numOutputs:g,splitSizes:S?Array.from(n().subarray(A>>>0,A+S>>>0)):[]})},1437495:s=>{i.Ea("Expand",s,void 0)},1437549:(s,p)=>{i.Ea("Gather",s,{axis:Number(p)})},1437620:(s,p)=>{i.Ea("GatherElements",s,{axis:Number(p)})},1437699:(s,p,g,S,A,M,U,ie,te,ne,se)=>{i.Ea("Resize",s,{antialias:p,axes:g?Array.from(n().subarray(S>>>0,S+g>>>0)):[],coordinateTransformMode:Le(A),cubicCoeffA:M,excludeOutside:U,extrapolationValue:ie,keepAspectRatioPolicy:Le(te),mode:Le(ne),nearestMode:Le(se)})},1438050:(s,p,g,S,A,M,U)=>{i.Ea("Slice",s,{starts:p?Array.from(n().subarray(g>>>0,g+p>>>0)):[],ends:S?Array.from(n().subarray(A>>>0,A+S>>>0)):[],axes:M?Array.from(n().subarray(U>>>0,U+M>>>0)):[]})},1438281:s=>{i.Ea("Tile",s,void 0)},1438333:(s,p,g)=>{i.Ea("LayerNormalization",s,{axis:Number(p),epsilon:Number(g)})},1438440:(s,p,g)=>{i.Ea("InstanceNormalization",s,{epsilon:p,format:g?"NHWC":"NCHW"})},1438554:(s,p,g)=>{i.Ea("InstanceNormalization",s,{epsilon:p,format:g?"NHWC":"NCHW"})},1438668:s=>{i.Ea("Range",s,void 0)},1438721:(s,p)=>{i.Ea("Einsum",s,{equation:Le(p)})},1438802:(s,p,g,S,A)=>{i.Ea("Pad",s,{mode:p,value:g,pads:S?Array.from(n().subarray(A>>>0,A+S>>>0)):[]})},1438934:(s,p,g,S,A,M)=>{i.Ea("BatchNormalization",s,{epsilon:p,momentum:g,spatial:!!A,trainingMode:!!S,format:M?"NHWC":"NCHW"})},1439103:(s,p,g,S,A,M)=>{i.Ea("BatchNormalization",s,{epsilon:p,momentum:g,spatial:!!A,trainingMode:!!S,format:M?"NHWC":"NCHW"})},1439272:(s,p,g)=>{i.Ea("CumSum",s,{exclusive:Number(p),reverse:Number(g)})},1439369:(s,p,g,S,A,M,U,ie,te)=>{i.Ea("Attention",s,{numHeads:p,isUnidirectional:g,maskFilterValue:S,scale:A,doRotary:M,qkvHiddenSizes:U?Array.from(n().subarray(Number(ie)>>>0,Number(ie)+U>>>0)):[],pastPresentShareBuffer:!!te})},1439641:s=>{i.Ea("Gelu",s,void 0)},1439693:(s,p,g,S,A,M)=>{i.Ea("MultiHeadAttention",s,{numHeads:p,isUnidirectional:g,maskFilterValue:S,scale:A,doRotary:M})},1439852:s=>{i.Ea("BiasAdd",s,void 0)},1439907:s=>{i.Ea("BiasSplitGelu",s,void 0)},1439968:(s,p)=>{i.Ea("SkipLayerNormalization",s,{epsilon:p})},1440049:s=>i.wb(s),1440082:s=>i.yb(s),1440114:(s,p,g)=>{i.jb(s,p,g,!0)},1440153:(s,p,g)=>{i.jb(s,p,g)}};function St(s){this.name="ExitStatus",this.message=`Program terminated with exit(${s})`,this.status=s}function Lt(s){s.terminate(),s.onmessage=()=>{}}function Gt(s){(s=ue.Qa[s])||rt(),ue.Eb(s)}function tr(s){var p=ue.tb();if(!p)return 6;ue.Ya.push(p),ue.Qa[s.Xa]=p,p.Xa=s.Xa;var g={cmd:"run",start_routine:s.Gb,arg:s.rb,pthread_ptr:s.Xa};return I&&p.unref(),p.postMessage(g,s.Mb),0}var Ft=typeof TextDecoder<"u"?new TextDecoder("utf8"):void 0,Ir=(s,p,g)=>{p>>>=0;var S=p+g;for(g=p;s[g]&&!(g>=S);)++g;if(16<g-p&&s.buffer&&Ft)return Ft.decode(s.buffer instanceof SharedArrayBuffer?s.slice(p,g):s.subarray(p,g));for(S="";p<g;){var A=s[p++];if(A&128){var M=s[p++]&63;if((A&224)==192)S+=String.fromCharCode((A&31)<<6|M);else{var U=s[p++]&63;A=(A&240)==224?(A&15)<<12|M<<6|U:(A&7)<<18|M<<12|U<<6|s[p++]&63,65536>A?S+=String.fromCharCode(A):(A-=65536,S+=String.fromCharCode(55296|A>>10,56320|A&1023))}}else S+=String.fromCharCode(A)}return S},Le=(s,p)=>(s>>>=0)?Ir(a(),s,p):"";function rr(s){if(x)return V(1,1,s);Ee=s,st()||(ue.Hb(),i.onExit&&i.onExit(s),Ie=!0),b(s,new St(s))}var nr=s=>{if(Ee=s,x)throw Er(s),"unwind";rr(s)},ue={ab:[],Ya:[],mb:[],Qa:{},gb:function(){x?ue.vb():ue.ub()},ub:function(){Xe.unshift(()=>{Jt(),ue.Bb(()=>_r())})},vb:function(){ue.receiveObjectTransfer=ue.Db,ue.threadInitTLS=ue.lb,ue.setExitStatus=ue.kb,Q=!1},kb:function(s){Ee=s},Sb:["$terminateWorker"],Hb:function(){for(var s of ue.Ya)Lt(s);for(s of ue.ab)Lt(s);ue.ab=[],ue.Ya=[],ue.Qa=[]},Eb:function(s){var p=s.Xa;delete ue.Qa[p],ue.ab.push(s),ue.Ya.splice(ue.Ya.indexOf(s),1),s.Xa=0,En(p)},Db:function(){},lb:function(){ue.mb.forEach(s=>s())},Cb:s=>new Promise(p=>{s.onmessage=M=>{M=M.data;var U=M.cmd;if(M.targetThread&&M.targetThread!=Wr()){var ie=ue.Qa[M.Rb];ie?ie.postMessage(M,M.transferList):j('Internal error! Worker sent a message "'+U+'" to target pthread '+M.targetThread+", but that thread no longer exists!")}else U==="checkMailbox"?Pt():U==="spawnThread"?tr(M):U==="cleanupThread"?Gt(M.thread):U==="killThread"?(M=M.thread,U=ue.Qa[M],delete ue.Qa[M],Lt(U),En(M),ue.Ya.splice(ue.Ya.indexOf(U),1),U.Xa=0):U==="cancelThread"?ue.Qa[M.thread].postMessage({cmd:"cancel"}):U==="loaded"?(s.loaded=!0,p(s)):U==="alert"?alert("Thread "+M.threadId+": "+M.text):M.target==="setimmediate"?s.postMessage(M):U==="callHandler"?i[M.handler](...M.args):U&&j("worker sent an unknown command "+U)},s.onerror=M=>{throw j("worker sent an error! "+M.filename+":"+M.lineno+": "+M.message),M},I&&(s.on("message",function(M){s.onmessage({data:M})}),s.on("error",function(M){s.onerror(M)}));var g=[],S=["onExit","onAbort","print","printErr"],A;for(A of S)i.hasOwnProperty(A)&&g.push(A);s.postMessage({cmd:"load",handlers:g,urlOrBlob:i.mainScriptUrlOrBlob||e,wasmMemory:$e,wasmModule:Se})}),Bb:function(s){s()},qb:function(){var s=P("ort-wasm-simd-threaded.worker.js");s=new Worker(s),ue.ab.push(s)},tb:function(){return ue.ab.length==0&&(ue.qb(),ue.Cb(ue.ab[0])),ue.ab.pop()}};i.PThread=ue;var wt=s=>{for(;0<s.length;)s.shift()(i)};i.establishStackSpace=function(){var s=Wr(),p=n()[s+52>>2>>>0];s=n()[s+56>>2>>>0],Na(p,p-s),Ur(p)};function Er(s){if(x)return V(2,0,s);nr(s)}i.invokeEntryPoint=function(s,p){s=Va.apply(null,[s,p]),st()?ue.kb(s):An(s)};function ut(s){this.fb=s-24,this.pb=function(p){o()[this.fb+4>>2>>>0]=p},this.ob=function(p){o()[this.fb+8>>2>>>0]=p},this.gb=function(p,g){this.nb(),this.pb(p),this.ob(g)},this.nb=function(){o()[this.fb+16>>2>>>0]=0}}var tt=0,Ar=0;function kt(s,p,g,S){return x?V(3,1,s,p,g,S):ar(s,p,g,S)}function ar(s,p,g,S){if(s>>>=0,p>>>=0,g>>>=0,S>>>=0,typeof SharedArrayBuffer>"u")return j("Current environment does not support SharedArrayBuffer, pthreads are not available!"),6;var A=[];return x&&A.length===0?kt(s,p,g,S):(s={Gb:g,Xa:s,rb:S,Mb:A},x?(s.Ob="spawnThread",postMessage(s,A),0):tr(s))}function ir(s,p,g){return x?V(4,1,s,p,g):0}function Tr(s,p){if(x)return V(5,1,s,p)}var Rt=s=>{for(var p=0,g=0;g<s.length;++g){var S=s.charCodeAt(g);127>=S?p++:2047>=S?p+=2:55296<=S&&57343>=S?(p+=4,++g):p+=3}return p},Or=(s,p,g,S)=>{if(g>>>=0,!(0<S))return 0;var A=g;S=g+S-1;for(var M=0;M<s.length;++M){var U=s.charCodeAt(M);if(55296<=U&&57343>=U){var ie=s.charCodeAt(++M);U=65536+((U&1023)<<10)|ie&1023}if(127>=U){if(g>=S)break;p[g++>>>0]=U}else{if(2047>=U){if(g+1>=S)break;p[g++>>>0]=192|U>>6}else{if(65535>=U){if(g+2>=S)break;p[g++>>>0]=224|U>>12}else{if(g+3>=S)break;p[g++>>>0]=240|U>>18,p[g++>>>0]=128|U>>12&63}p[g++>>>0]=128|U>>6&63}p[g++>>>0]=128|U&63}}return p[g>>>0]=0,g-A},kr=(s,p,g)=>Or(s,a(),p,g);function Rr(s,p){if(x)return V(6,1,s,p)}function Pr(s,p,g){if(x)return V(7,1,s,p,g)}function Br(s,p,g){return x?V(8,1,s,p,g):0}function Mr(s,p){if(x)return V(9,1,s,p)}function qt(s,p,g){if(x)return V(10,1,s,p,g)}function or(s,p,g,S){if(x)return V(11,1,s,p,g,S)}function sr(s,p,g,S){if(x)return V(12,1,s,p,g,S)}function ur(s,p,g,S){if(x)return V(13,1,s,p,g,S)}function lr(s){if(x)return V(14,1,s)}function dr(s,p){if(x)return V(15,1,s,p)}function cr(s,p,g){if(x)return V(16,1,s,p,g)}var pr=s=>{if(!Ie)try{if(s(),!st())try{x?An(Ee):nr(Ee)}catch(p){p instanceof St||p=="unwind"||b(1,p)}}catch(p){p instanceof St||p=="unwind"||b(1,p)}};function jt(s){s>>>=0,typeof Atomics.Nb=="function"&&(Atomics.Nb(n(),s>>2,s).value.then(Pt),s+=128,Atomics.store(n(),s>>2,1))}i.__emscripten_thread_mailbox_await=jt;function Pt(){var s=Wr();s&&(jt(s),pr(()=>Wa()))}i.checkMailbox=Pt;var xt=s=>s%4===0&&(s%100!==0||s%400===0),Bt=[0,31,60,91,121,152,182,213,244,274,305,335],fr=[0,31,59,90,120,151,181,212,243,273,304,334];function d(s,p,g,S,A,M,U,ie){return x?V(17,1,s,p,g,S,A,M,U,ie):-52}function h(s,p,g,S,A,M,U){if(x)return V(18,1,s,p,g,S,A,M,U)}var v=s=>{var p=Rt(s)+1,g=In(p);return g&&kr(s,g,p),g},_=[],O=(s,p)=>{_.length=0;var g;for(p>>=2;g=a()[s++>>>0];)p+=g!=105&p,_.push(g==105?n()[p>>>0]:l()[p++>>>1]),++p;return _},L=s=>{var p=Tn();return s=s(),Ur(p),s};function V(s,p){var g=arguments.length-2,S=arguments;return L(()=>{for(var A=On(8*g),M=A>>3,U=0;U<g;U++){var ie=S[2+U];l()[M+U>>>0]=ie}return Da(s,g,A,p)})}var le=[],X={},ae=()=>{if(!ee){var s={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:(typeof navigator=="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:m||"./this.program"},p;for(p in X)X[p]===void 0?delete s[p]:s[p]=X[p];var g=[];for(p in s)g.push(`${p}=${s[p]}`);ee=g}return ee},ee;function fe(s,p){if(x)return V(19,1,s,p);s>>>=0,p>>>=0;var g=0;return ae().forEach(function(S,A){var M=p+g;for(A=o()[s+4*A>>2>>>0]=M,M=0;M<S.length;++M)r()[A++>>0>>>0]=S.charCodeAt(M);r()[A>>0>>>0]=0,g+=S.length+1}),0}function we(s,p){if(x)return V(20,1,s,p);s>>>=0,p>>>=0;var g=ae();o()[s>>2>>>0]=g.length;var S=0;return g.forEach(function(A){S+=A.length+1}),o()[p>>2>>>0]=S,0}function k(s){return x?V(21,1,s):52}function oe(s,p,g,S){return x?V(22,1,s,p,g,S):52}function ge(s,p,g,S,A){return x?V(23,1,s,p,g,S,A):70}var vt=[null,[],[]];function mr(s,p,g,S){if(x)return V(24,1,s,p,g,S);p>>>=0,g>>>=0,S>>>=0;for(var A=0,M=0;M<g;M++){var U=o()[p>>2>>>0],ie=o()[p+4>>2>>>0];p+=8;for(var te=0;te<ie;te++){var ne=a()[U+te>>>0],se=vt[s];ne===0||ne===10?((s===1?B:j)(Ir(se,0)),se.length=0):se.push(ne)}A+=ie}return o()[S>>2>>>0]=A,0}var Ta=[31,29,31,30,31,30,31,31,30,31,30,31],Oa=[31,28,31,30,31,30,31,31,30,31,30,31];function Pl(s){var p=Array(Rt(s)+1);return Or(s,p,0,p.length),p}var Bl=(s,p)=>{r().set(s,p>>>0)};function ka(s,p,g,S){function A(R,ce,xe){for(R=typeof R=="number"?R.toString():R||"";R.length<ce;)R=xe[0]+R;return R}function M(R,ce){return A(R,ce,"0")}function U(R,ce){function xe(ja){return 0>ja?-1:0<ja?1:0}var Mt;return(Mt=xe(R.getFullYear()-ce.getFullYear()))===0&&(Mt=xe(R.getMonth()-ce.getMonth()))===0&&(Mt=xe(R.getDate()-ce.getDate())),Mt}function ie(R){switch(R.getDay()){case 0:return new Date(R.getFullYear()-1,11,29);case 1:return R;case 2:return new Date(R.getFullYear(),0,3);case 3:return new Date(R.getFullYear(),0,2);case 4:return new Date(R.getFullYear(),0,1);case 5:return new Date(R.getFullYear()-1,11,31);case 6:return new Date(R.getFullYear()-1,11,30)}}function te(R){var ce=R.Za;for(R=new Date(new Date(R.$a+1900,0,1).getTime());0<ce;){var xe=R.getMonth(),Mt=(xt(R.getFullYear())?Ta:Oa)[xe];if(ce>Mt-R.getDate())ce-=Mt-R.getDate()+1,R.setDate(1),11>xe?R.setMonth(xe+1):(R.setMonth(0),R.setFullYear(R.getFullYear()+1));else{R.setDate(R.getDate()+ce);break}}return xe=new Date(R.getFullYear()+1,0,4),ce=ie(new Date(R.getFullYear(),0,4)),xe=ie(xe),0>=U(ce,R)?0>=U(xe,R)?R.getFullYear()+1:R.getFullYear():R.getFullYear()-1}s>>>=0,p>>>=0,g>>>=0,S>>>=0;var ne=n()[S+40>>2>>>0];S={Kb:n()[S>>2>>>0],Jb:n()[S+4>>2>>>0],cb:n()[S+8>>2>>>0],ib:n()[S+12>>2>>>0],eb:n()[S+16>>2>>>0],$a:n()[S+20>>2>>>0],Wa:n()[S+24>>2>>>0],Za:n()[S+28>>2>>>0],Tb:n()[S+32>>2>>>0],Ib:n()[S+36>>2>>>0],Lb:ne?Le(ne):""},g=Le(g),ne={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var se in ne)g=g.replace(new RegExp(se,"g"),ne[se]);var ve="Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),_e="January February March April May June July August September October November December".split(" ");ne={"%a":R=>ve[R.Wa].substring(0,3),"%A":R=>ve[R.Wa],"%b":R=>_e[R.eb].substring(0,3),"%B":R=>_e[R.eb],"%C":R=>M((R.$a+1900)/100|0,2),"%d":R=>M(R.ib,2),"%e":R=>A(R.ib,2," "),"%g":R=>te(R).toString().substring(2),"%G":R=>te(R),"%H":R=>M(R.cb,2),"%I":R=>(R=R.cb,R==0?R=12:12<R&&(R-=12),M(R,2)),"%j":R=>{for(var ce=0,xe=0;xe<=R.eb-1;ce+=(xt(R.$a+1900)?Ta:Oa)[xe++]);return M(R.ib+ce,3)},"%m":R=>M(R.eb+1,2),"%M":R=>M(R.Jb,2),"%n":()=>`
`,"%p":R=>0<=R.cb&&12>R.cb?"AM":"PM","%S":R=>M(R.Kb,2),"%t":()=>"	","%u":R=>R.Wa||7,"%U":R=>M(Math.floor((R.Za+7-R.Wa)/7),2),"%V":R=>{var ce=Math.floor((R.Za+7-(R.Wa+6)%7)/7);if(2>=(R.Wa+371-R.Za-2)%7&&ce++,ce)ce==53&&(xe=(R.Wa+371-R.Za)%7,xe==4||xe==3&&xt(R.$a)||(ce=1));else{ce=52;var xe=(R.Wa+7-R.Za-1)%7;(xe==4||xe==5&&xt(R.$a%400-1))&&ce++}return M(ce,2)},"%w":R=>R.Wa,"%W":R=>M(Math.floor((R.Za+7-(R.Wa+6)%7)/7),2),"%y":R=>(R.$a+1900).toString().substring(2),"%Y":R=>R.$a+1900,"%z":R=>{R=R.Ib;var ce=0<=R;return R=Math.abs(R)/60,(ce?"+":"-")+("0000"+(R/60*100+R%60)).slice(-4)},"%Z":R=>R.Lb,"%%":()=>"%"},g=g.replace(/%%/g,"\0\0");for(se in ne)g.includes(se)&&(g=g.replace(new RegExp(se,"g"),ne[se](S)));return g=g.replace(/\0\0/g,"%"),se=Pl(g),se.length>p?0:(Bl(se,s),se.length-1)}function zr(s){try{s()}catch(p){rt(p)}}function Ml(s){var p={},g;for(g in s)(function(S){var A=s[S];p[S]=typeof A=="function"?function(){Dr.push(S);try{return A.apply(null,arguments)}finally{Ie||(Dr.pop()===S||rt(),lt&&_t===1&&Dr.length===0&&(_t=0,Ke+=1,zr(La),typeof Fibers<"u"&&Fibers.Ub()))}}:A})(g);return p}var _t=0,lt=null,Ra=0,Dr=[],Pa={},Ba={},zl=0,Cn=null,Dl=[];function Wl(){return new Promise((s,p)=>{Cn={resolve:s,reject:p}})}function Ul(){var s=In(65548),p=s+12;o()[s>>2>>>0]=p,o()[s+4>>2>>>0]=p+65536,p=Dr[0];var g=Pa[p];return g===void 0&&(g=zl++,Pa[p]=g,Ba[g]=p),p=g,n()[s+8>>2>>>0]=p,s}function Nl(){var s=n()[lt+8>>2>>>0];return s=Z[Ba[s]],--Ke,s()}function Vl(s){if(!Ie){if(_t===0){var p=!1,g=!1;s((S=0)=>{if(!Ie&&(Ra=S,p=!0,g)){_t=2,zr(()=>Ga(lt)),typeof Browser<"u"&&Browser.hb.sb&&Browser.hb.resume(),S=!1;try{var A=Nl()}catch(ie){A=ie,S=!0}var M=!1;if(!lt){var U=Cn;U&&(Cn=null,(S?U.reject:U.resolve)(A),M=!0)}if(S&&!M)throw A}}),g=!0,p||(_t=1,lt=Ul(),typeof Browser<"u"&&Browser.hb.sb&&Browser.hb.pause(),zr(()=>Ha(lt)))}else _t===2?(_t=0,zr(Fa),Ma(lt),lt=null,Dl.forEach(S=>pr(S))):rt(`invalid state: ${_t}`);return Ra}}function Hl(s){return Vl(p=>{s().then(p)})}ue.gb();var Ll=[null,rr,Er,kt,ir,Tr,Rr,Pr,Br,Mr,qt,or,sr,ur,lr,dr,cr,d,h,fe,we,k,oe,ge,mr],Gl={r:function(s,p,g){return Hl(async()=>{await i.xb(s,p,g)})},b:function(s,p,g){throw s>>>=0,new ut(s).gb(p>>>0,g>>>0),tt=s,Ar++,tt},P:function(s){za(s>>>0,!$,1,!w,131072,!1),ue.lb()},n:function(s){s>>>=0,x?postMessage({cmd:"cleanupThread",thread:s}):Gt(s)},K:ar,g:ir,V:Tr,F:Rr,H:Pr,y:Br,T:Mr,L:qt,S:or,p:sr,G:ur,D:lr,U:dr,E:cr,q:()=>!0,B:function(s,p){s>>>=0,s==p>>>0?setTimeout(()=>Pt()):x?postMessage({targetThread:s,cmd:"checkMailbox"}):(s=ue.Qa[s])&&s.postMessage({cmd:"checkMailbox"})},N:function(){return-1},O:jt,X:function(s){I&&ue.Qa[s>>>0].ref()},u:function(s,p,g){s=p+2097152>>>0<4194305-!!s?(s>>>0)+4294967296*p:NaN,g>>>=0,s=new Date(1e3*s),n()[g>>2>>>0]=s.getUTCSeconds(),n()[g+4>>2>>>0]=s.getUTCMinutes(),n()[g+8>>2>>>0]=s.getUTCHours(),n()[g+12>>2>>>0]=s.getUTCDate(),n()[g+16>>2>>>0]=s.getUTCMonth(),n()[g+20>>2>>>0]=s.getUTCFullYear()-1900,n()[g+24>>2>>>0]=s.getUTCDay(),s=(s.getTime()-Date.UTC(s.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,n()[g+28>>2>>>0]=s},v:function(s,p,g){s=p+2097152>>>0<4194305-!!s?(s>>>0)+4294967296*p:NaN,g>>>=0,s=new Date(1e3*s),n()[g>>2>>>0]=s.getSeconds(),n()[g+4>>2>>>0]=s.getMinutes(),n()[g+8>>2>>>0]=s.getHours(),n()[g+12>>2>>>0]=s.getDate(),n()[g+16>>2>>>0]=s.getMonth(),n()[g+20>>2>>>0]=s.getFullYear()-1900,n()[g+24>>2>>>0]=s.getDay(),p=(xt(s.getFullYear())?Bt:fr)[s.getMonth()]+s.getDate()-1|0,n()[g+28>>2>>>0]=p,n()[g+36>>2>>>0]=-(60*s.getTimezoneOffset()),p=new Date(s.getFullYear(),6,1).getTimezoneOffset();var S=new Date(s.getFullYear(),0,1).getTimezoneOffset();s=(p!=S&&s.getTimezoneOffset()==Math.min(S,p))|0,n()[g+32>>2>>>0]=s},w:function(s){s>>>=0;var p=new Date(n()[s+20>>2>>>0]+1900,n()[s+16>>2>>>0],n()[s+12>>2>>>0],n()[s+8>>2>>>0],n()[s+4>>2>>>0],n()[s>>2>>>0],0),g=n()[s+32>>2>>>0],S=p.getTimezoneOffset(),A=new Date(p.getFullYear(),6,1).getTimezoneOffset(),M=new Date(p.getFullYear(),0,1).getTimezoneOffset(),U=Math.min(M,A);return 0>g?n()[s+32>>2>>>0]=+(A!=M&&U==S):0<g!=(U==S)&&(A=Math.max(M,A),p.setTime(p.getTime()+6e4*((0<g?U:A)-S))),n()[s+24>>2>>>0]=p.getDay(),g=(xt(p.getFullYear())?Bt:fr)[p.getMonth()]+p.getDate()-1|0,n()[s+28>>2>>>0]=g,n()[s>>2>>>0]=p.getSeconds(),n()[s+4>>2>>>0]=p.getMinutes(),n()[s+8>>2>>>0]=p.getHours(),n()[s+12>>2>>>0]=p.getDate(),n()[s+16>>2>>>0]=p.getMonth(),n()[s+20>>2>>>0]=p.getYear(),s=p.getTime()/1e3,Ua((bt=s,1<=+Math.abs(bt)?0<bt?+Math.floor(bt/4294967296)>>>0:~~+Math.ceil((bt-+(~~bt>>>0))/4294967296)>>>0:0)),s>>>0},s:d,t:h,A:function(s,p,g){function S(ne){return(ne=ne.toTimeString().match(/\(([A-Za-z ]+)\)$/))?ne[1]:"GMT"}s>>>=0,p>>>=0,g>>>=0;var A=new Date().getFullYear(),M=new Date(A,0,1),U=new Date(A,6,1);A=M.getTimezoneOffset();var ie=U.getTimezoneOffset(),te=Math.max(A,ie);o()[s>>2>>>0]=60*te,n()[p>>2>>>0]=+(A!=ie),s=S(M),p=S(U),s=v(s),p=v(p),ie<A?(o()[g>>2>>>0]=s,o()[g+4>>2>>>0]=p):(o()[g>>2>>>0]=p,o()[g+4>>2>>>0]=s)},e:()=>{rt("")},c:function(s,p,g){return s>>>=0,p=O(p>>>0,g>>>0),Ht[s].apply(null,p)},l:function(s,p,g){return s>>>=0,p=O(p>>>0,g>>>0),Ht[s].apply(null,p)},o:function(){},k:function(){return Date.now()},W:()=>{throw Ke+=1,"unwind"},C:function(){return 4294901760},d:()=>performance.timeOrigin+performance.now(),i:function(){return I?(Ii(),zt(Ci)).cpus().length:navigator.hardwareConcurrency},M:function(s,p,g,S){for(ue.Pb=p>>>0,le.length=g,p=S>>>0>>3,S=0;S<g;S++)le[S]=l()[p+S>>>0];return(0>s?Ht[-s-1]:Ll[s]).apply(null,le)},z:function(s){s>>>=0;var p=a().length;if(s<=p||4294901760<s)return!1;for(var g=1;4>=g;g*=2){var S=p*(1+.2/g);S=Math.min(S,s+100663296);var A=Math;S=Math.max(s,S);e:{A=A.min.call(A,4294901760,S+(65536-S%65536)%65536)-$e.buffer.byteLength+65535>>>16;try{$e.grow(A),me();var M=1;break e}catch{}M=void 0}if(M)return!0}return!1},Q:fe,R:we,J:nr,h:k,m:oe,x:ge,j:mr,a:$e||i.wasmMemory,I:ka,f:function(s,p,g,S){return ka(s>>>0,p>>>0,g>>>0,S>>>0)}};(function(){function s(g,S){return g=g.exports,g=Ml(g),Z=g=Fl(g),ue.mb.push(Z.Da),Me.unshift(Z.Y),Se=S,_r(),g}var p={a:Gl};if(Jt(),i.instantiateWasm)try{return i.instantiateWasm(p,s)}catch(g){j("Module.instantiateWasm callback failed with error: "+g),f(g)}return Cr(p,function(g){s(g.instance,g.module)}).catch(f),{}})(),i._OrtInit=(s,p)=>(i._OrtInit=Z.Z)(s,p),i._OrtGetLastError=(s,p)=>(i._OrtGetLastError=Z._)(s,p),i._OrtCreateSessionOptions=(s,p,g,S,A,M,U,ie,te,ne)=>(i._OrtCreateSessionOptions=Z.$)(s,p,g,S,A,M,U,ie,te,ne),i._OrtAppendExecutionProvider=(s,p)=>(i._OrtAppendExecutionProvider=Z.aa)(s,p),i._OrtAddFreeDimensionOverride=(s,p,g)=>(i._OrtAddFreeDimensionOverride=Z.ba)(s,p,g),i._OrtAddSessionConfigEntry=(s,p,g)=>(i._OrtAddSessionConfigEntry=Z.ca)(s,p,g),i._OrtReleaseSessionOptions=s=>(i._OrtReleaseSessionOptions=Z.da)(s),i._OrtCreateSession=(s,p,g)=>(i._OrtCreateSession=Z.ea)(s,p,g),i._OrtReleaseSession=s=>(i._OrtReleaseSession=Z.fa)(s),i._OrtGetInputOutputCount=(s,p,g)=>(i._OrtGetInputOutputCount=Z.ga)(s,p,g),i._OrtGetInputName=(s,p)=>(i._OrtGetInputName=Z.ha)(s,p),i._OrtGetOutputName=(s,p)=>(i._OrtGetOutputName=Z.ia)(s,p),i._OrtFree=s=>(i._OrtFree=Z.ja)(s),i._OrtCreateTensor=(s,p,g,S,A,M)=>(i._OrtCreateTensor=Z.ka)(s,p,g,S,A,M),i._OrtGetTensorData=(s,p,g,S,A)=>(i._OrtGetTensorData=Z.la)(s,p,g,S,A),i._OrtReleaseTensor=s=>(i._OrtReleaseTensor=Z.ma)(s),i._OrtCreateRunOptions=(s,p,g,S)=>(i._OrtCreateRunOptions=Z.na)(s,p,g,S),i._OrtAddRunConfigEntry=(s,p,g)=>(i._OrtAddRunConfigEntry=Z.oa)(s,p,g),i._OrtReleaseRunOptions=s=>(i._OrtReleaseRunOptions=Z.pa)(s),i._OrtCreateBinding=s=>(i._OrtCreateBinding=Z.qa)(s),i._OrtBindInput=(s,p,g)=>(i._OrtBindInput=Z.ra)(s,p,g),i._OrtBindOutput=(s,p,g,S)=>(i._OrtBindOutput=Z.sa)(s,p,g,S),i._OrtClearBoundOutputs=s=>(i._OrtClearBoundOutputs=Z.ta)(s),i._OrtReleaseBinding=s=>(i._OrtReleaseBinding=Z.ua)(s),i._OrtRunWithBinding=(s,p,g,S,A)=>(i._OrtRunWithBinding=Z.va)(s,p,g,S,A),i._OrtRun=(s,p,g,S,A,M,U,ie)=>(i._OrtRun=Z.wa)(s,p,g,S,A,M,U,ie),i._OrtEndProfiling=s=>(i._OrtEndProfiling=Z.xa)(s),i._JsepOutput=(s,p,g)=>(i._JsepOutput=Z.ya)(s,p,g),i._JsepGetNodeName=s=>(i._JsepGetNodeName=Z.za)(s);var Wr=i._pthread_self=()=>(Wr=i._pthread_self=Z.Aa)(),In=i._malloc=s=>(In=i._malloc=Z.Ba)(s),Ma=i._free=s=>(Ma=i._free=Z.Ca)(s);i.__emscripten_tls_init=()=>(i.__emscripten_tls_init=Z.Da)();var za=i.__emscripten_thread_init=(s,p,g,S,A,M)=>(za=i.__emscripten_thread_init=Z.Fa)(s,p,g,S,A,M);i.__emscripten_thread_crashed=()=>(i.__emscripten_thread_crashed=Z.Ga)();var Da=(s,p,g,S)=>(Da=Z.Ha)(s,p,g,S),En=s=>(En=Z.Ia)(s),An=i.__emscripten_thread_exit=s=>(An=i.__emscripten_thread_exit=Z.Ja)(s),Wa=i.__emscripten_check_mailbox=()=>(Wa=i.__emscripten_check_mailbox=Z.Ka)(),Ua=s=>(Ua=Z.La)(s),Na=(s,p)=>(Na=Z.Ma)(s,p),Tn=()=>(Tn=Z.Na)(),Ur=s=>(Ur=Z.Oa)(s),On=s=>(On=Z.Pa)(s),Va=i.dynCall_ii=(s,p)=>(Va=i.dynCall_ii=Z.Ra)(s,p),Ha=s=>(Ha=Z.Sa)(s),La=()=>(La=Z.Ta)(),Ga=s=>(Ga=Z.Ua)(s),Fa=()=>(Fa=Z.Va)();i.___start_em_js=1440186,i.___stop_em_js=1440347;function Fl(s){s=Object.assign({},s);var p=S=>()=>S()>>>0,g=S=>A=>S(A)>>>0;return s.__errno_location=p(s.__errno_location),s.pthread_self=p(s.pthread_self),s.malloc=g(s.malloc),s.stackSave=p(s.stackSave),s.stackAlloc=g(s.stackAlloc),s}i.keepRuntimeAlive=st,i.wasmMemory=$e,i.stackAlloc=On,i.stackSave=Tn,i.stackRestore=Ur,i.UTF8ToString=Le,i.stringToUTF8=kr,i.lengthBytesUTF8=Rt,i.ExitStatus=St,i.PThread=ue;var Nr;Ot=function s(){Nr||qa(),Nr||(Ot=s)};function qa(){function s(){if(!Nr&&(Nr=!0,i.calledRun=!0,!Ie)&&(x||wt(Me),c(i),i.onRuntimeInitialized&&i.onRuntimeInitialized(),!x)){if(i.postRun)for(typeof i.postRun=="function"&&(i.postRun=[i.postRun]);i.postRun.length;){var p=i.postRun.shift();Ne.unshift(p)}wt(Ne)}}if(!(0<et))if(x)c(i),x||wt(Me),startWorker(i);else{if(i.preRun)for(typeof i.preRun=="function"&&(i.preRun=[i.preRun]);i.preRun.length;)Xe.unshift(i.preRun.shift());wt(Xe),0<et||(i.setStatus?(i.setStatus("Running..."),setTimeout(function(){setTimeout(function(){i.setStatus("")},1),s()},1)):s())}}if(i.preInit)for(typeof i.preInit=="function"&&(i.preInit=[i.preInit]);0<i.preInit.length;)i.preInit.pop()();return qa(),t.ready}})();typeof Ai=="object"&&typeof Nn=="object"?Nn.exports=Ei:typeof define=="function"&&define.amd&&define([],()=>Ei)});var Oi=Kt((Nf,rd)=>{rd.exports='"use strict";var Module={},ENVIRONMENT_IS_NODE=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string";if(ENVIRONMENT_IS_NODE){var nodeWorkerThreads=require("worker_threads"),parentPort=nodeWorkerThreads.parentPort;parentPort.on("message",e=>onmessage({data:e}));var fs=require("fs");Object.assign(global,{self:global,require,Module,location:{href:__filename},Worker:nodeWorkerThreads.Worker,importScripts:e=>(0,eval)(fs.readFileSync(e,"utf8")+"//# sourceURL="+e),postMessage:e=>parentPort.postMessage(e),performance:global.performance||{now:Date.now}})}var initializedJS=!1;function threadPrintErr(){var e=Array.prototype.slice.call(arguments).join(" ");if(ENVIRONMENT_IS_NODE){fs.writeSync(2,e+`\n`);return}console.error(e)}function threadAlert(){var e=Array.prototype.slice.call(arguments).join(" ");postMessage({cmd:"alert",text:e,threadId:Module._pthread_self()})}var err=threadPrintErr;self.alert=threadAlert,Module.instantiateWasm=(e,t)=>{var a=Module.wasmModule;Module.wasmModule=null;var r=new WebAssembly.Instance(a,e);return t(r)},self.onunhandledrejection=e=>{throw e.reason??e};function handleMessage(e){try{if(e.data.cmd==="load"){let a=[];self.onmessage=r=>a.push(r),self.startWorker=r=>{Module=r,postMessage({cmd:"loaded"});for(let s of a)handleMessage(s);self.onmessage=handleMessage},Module.wasmModule=e.data.wasmModule;for(const r of e.data.handlers)Module[r]=(...s)=>{postMessage({cmd:"callHandler",handler:r,args:s})};if(Module.wasmMemory=e.data.wasmMemory,Module.buffer=Module.wasmMemory.buffer,Module.ENVIRONMENT_IS_PTHREAD=!0,typeof e.data.urlOrBlob=="string")importScripts(e.data.urlOrBlob);else{var t=URL.createObjectURL(e.data.urlOrBlob);importScripts(t),URL.revokeObjectURL(t)}ortWasmThreaded(Module)}else if(e.data.cmd==="run"){Module.__emscripten_thread_init(e.data.pthread_ptr,0,0,1),Module.__emscripten_thread_mailbox_await(e.data.pthread_ptr),Module.establishStackSpace(),Module.PThread.receiveObjectTransfer(e.data),Module.PThread.threadInitTLS(),initializedJS||(initializedJS=!0);try{Module.invokeEntryPoint(e.data.start_routine,e.data.arg)}catch(a){if(a!="unwind")throw a}}else e.data.cmd==="cancel"?Module._pthread_self()&&Module.__emscripten_thread_exit(-1):e.data.target==="setimmediate"||(e.data.cmd==="checkMailbox"?initializedJS&&Module.checkMailbox():e.data.cmd&&(err("worker.js received unknown command "+e.data.cmd),err(e.data)))}catch(a){throw Module.__emscripten_thread_crashed&&Module.__emscripten_thread_crashed(),a}}self.onmessage=handleMessage;\n'});var Ri,nd,Vn,Hn,Yr,ki,ad,id,od,Pi,ze,Zt=q(()=>{"use strict";Ri=Si();nd=Ti(),Hn=!1,Yr=!1,ki=!1,ad=()=>{try{return typeof SharedArrayBuffer>"u"?!1:(typeof MessageChannel<"u"&&new MessageChannel().port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11])))}catch{return!1}},id=()=>{try{return WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,30,1,28,0,65,0,253,15,253,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,186,1,26,11]))}catch{return!1}},od=(e,t)=>e?t?"ort-wasm-simd-threaded.wasm":"ort-wasm-simd.wasm":t?"ort-wasm-threaded.wasm":"ort-wasm.wasm",Pi=async e=>{if(Hn)return Promise.resolve();if(Yr)throw new Error("multiple calls to 'initializeWebAssembly()' detected.");if(ki)throw new Error("previous call to 'initializeWebAssembly()' failed.");Yr=!0;let t=e.initTimeout,r=e.numThreads,a=e.simd,n=r>1&&ad(),o=a&&id(),u=e.wasmPaths,l=typeof u=="string"?u:void 0,i=od(o,n),c=typeof u=="object"?u[i]:void 0,f=!1,y=[];if(t>0&&y.push(new Promise(m=>{setTimeout(()=>{f=!0,m()},t)})),y.push(new Promise((m,b)=>{let w=n?nd:Ri,$={locateFile:(I,x)=>{if(n&&I.endsWith(".worker.js")&&typeof Blob<"u")return URL.createObjectURL(new Blob([Oi()],{type:"text/javascript"}));if(I.endsWith(".wasm")){if(c)return c;let C=l??x;return i==="ort-wasm-simd.wasm"?C+"ort-wasm-simd.jsep.wasm":i==="ort-wasm-simd-threaded.wasm"?C+"ort-wasm-simd-threaded.jsep.wasm":C+i}return x+I}};if(n)if(typeof Blob>"u")$.mainScriptUrlOrBlob=(void 0)(__dirname,"ort-wasm-threaded.js");else{let I=`var ortWasmThreaded=${w.toString()};`;$.mainScriptUrlOrBlob=new Blob([I],{type:"text/javascript"})}w($).then(I=>{Yr=!1,Hn=!0,Vn=I,m()},I=>{Yr=!1,ki=!0,b(I)})})),await Promise.race(y),f)throw new Error(`WebAssembly backend initializing failed due to timeout: ${t}ms`)},ze=()=>{if(Hn&&Vn)return Vn;throw new Error("WebAssembly is not initialized yet.")}});var Ue,gr,ke,Zr=q(()=>{"use strict";Zt();Ue=(e,t)=>{let r=ze(),a=r.lengthBytesUTF8(e)+1,n=r._malloc(a);return r.stringToUTF8(e,n,a),t.push(n),n},gr=(e,t,r,a)=>{if(typeof e=="object"&&e!==null){if(r.has(e))throw new Error("Circular reference in options");r.add(e)}Object.entries(e).forEach(([n,o])=>{let u=t?t+n:n;if(typeof o=="object")gr(o,u+".",r,a);else if(typeof o=="string"||typeof o=="number")a(u,o.toString());else if(typeof o=="boolean")a(u,o?"1":"0");else throw new Error(`Can't handle extra config type: ${typeof o}`)})},ke=e=>{let t=ze(),r=t.stackSave();try{let a=t.stackAlloc(8);t._OrtGetLastError(a,a+4);let n=t.HEAP32[a/4],o=t.HEAPU32[a/4+1],u=o?t.UTF8ToString(o):"";throw new Error(`${e} ERROR_CODE: ${n}, ERROR_MESSAGE: ${u}`)}finally{t.stackRestore(r)}}});var Bi,Mi=q(()=>{"use strict";Zt();Zr();Bi=e=>{let t=ze(),r=0,a=[],n=e||{};try{if(e?.logSeverityLevel===void 0)n.logSeverityLevel=2;else if(typeof e.logSeverityLevel!="number"||!Number.isInteger(e.logSeverityLevel)||e.logSeverityLevel<0||e.logSeverityLevel>4)throw new Error(`log serverity level is not valid: ${e.logSeverityLevel}`);if(e?.logVerbosityLevel===void 0)n.logVerbosityLevel=0;else if(typeof e.logVerbosityLevel!="number"||!Number.isInteger(e.logVerbosityLevel))throw new Error(`log verbosity level is not valid: ${e.logVerbosityLevel}`);e?.terminate===void 0&&(n.terminate=!1);let o=0;return e?.tag!==void 0&&(o=Ue(e.tag,a)),r=t._OrtCreateRunOptions(n.logSeverityLevel,n.logVerbosityLevel,!!n.terminate,o),r===0&&ke("Can't create run options."),e?.extra!==void 0&&gr(e.extra,"",new WeakSet,(u,l)=>{let i=Ue(u,a),c=Ue(l,a);t._OrtAddRunConfigEntry(r,i,c)!==0&&ke(`Can't set a run config entry: ${u} - ${l}.`)}),[r,a]}catch(o){throw r!==0&&t._OrtReleaseRunOptions(r),a.forEach(u=>t._free(u)),o}}});var sd,ud,ld,dd,zi,Di=q(()=>{"use strict";Zt();Zr();sd=e=>{switch(e){case"disabled":return 0;case"basic":return 1;case"extended":return 2;case"all":return 99;default:throw new Error(`unsupported graph optimization level: ${e}`)}},ud=e=>{switch(e){case"sequential":return 0;case"parallel":return 1;default:throw new Error(`unsupported execution mode: ${e}`)}},ld=e=>{e.extra||(e.extra={}),e.extra.session||(e.extra.session={});let t=e.extra.session;t.use_ort_model_bytes_directly||(t.use_ort_model_bytes_directly="1"),e.executionProviders&&e.executionProviders.some(r=>(typeof r=="string"?r:r.name)==="webgpu")&&(e.enableMemPattern=!1)},dd=(e,t,r)=>{for(let a of t){let n=typeof a=="string"?a:a.name;switch(n){case"xnnpack":n="XNNPACK";break;case"webnn":if(n="WEBNN",typeof a!="string"){let u=a;if(u?.deviceType){let l=Ue("deviceType",r),i=Ue(u.deviceType,r);ze()._OrtAddSessionConfigEntry(e,l,i)!==0&&ke(`Can't set a session config entry: 'deviceType' - ${u.deviceType}.`)}if(u?.numThreads){let l=u.numThreads;(typeof l!="number"||!Number.isInteger(l)||l<0)&&(l=0);let i=Ue("numThreads",r),c=Ue(l.toString(),r);ze()._OrtAddSessionConfigEntry(e,i,c)!==0&&ke(`Can't set a session config entry: 'numThreads' - ${u.numThreads}.`)}if(u?.powerPreference){let l=Ue("powerPreference",r),i=Ue(u.powerPreference,r);ze()._OrtAddSessionConfigEntry(e,l,i)!==0&&ke(`Can't set a session config entry: 'powerPreference' - ${u.powerPreference}.`)}}break;case"webgpu":if(n="JS",typeof a!="string"){let u=a;if(u?.preferredLayout){if(u.preferredLayout!=="NCHW"&&u.preferredLayout!=="NHWC")throw new Error(`preferredLayout must be either 'NCHW' or 'NHWC': ${u.preferredLayout}`);let l=Ue("preferredLayout",r),i=Ue(u.preferredLayout,r);ze()._OrtAddSessionConfigEntry(e,l,i)!==0&&ke(`Can't set a session config entry: 'preferredLayout' - ${u.preferredLayout}.`)}}break;case"wasm":case"cpu":continue;default:throw new Error(`not supported execution provider: ${n}`)}let o=Ue(n,r);ze()._OrtAppendExecutionProvider(e,o)!==0&&ke(`Can't append execution provider: ${n}.`)}},zi=e=>{let t=ze(),r=0,a=[],n=e||{};ld(n);try{let o=sd(n.graphOptimizationLevel??"all"),u=ud(n.executionMode??"sequential"),l=typeof n.logId=="string"?Ue(n.logId,a):0,i=n.logSeverityLevel??2;if(!Number.isInteger(i)||i<0||i>4)throw new Error(`log serverity level is not valid: ${i}`);let c=n.logVerbosityLevel??0;if(!Number.isInteger(c)||c<0||c>4)throw new Error(`log verbosity level is not valid: ${c}`);let f=typeof n.optimizedModelFilePath=="string"?Ue(n.optimizedModelFilePath,a):0;if(r=t._OrtCreateSessionOptions(o,!!n.enableCpuMemArena,!!n.enableMemPattern,u,!!n.enableProfiling,0,l,i,c,f),r===0&&ke("Can't create session options."),n.executionProviders&&dd(r,n.executionProviders,a),n.freeDimensionOverrides)for(let[y,m]of Object.entries(n.freeDimensionOverrides)){if(typeof y!="string")throw new Error(`free dimension override name must be a string: ${y}`);if(typeof m!="number"||!Number.isInteger(m)||m<0)throw new Error(`free dimension override value must be a non-negative integer: ${m}`);let b=Ue(y,a);t._OrtAddFreeDimensionOverride(r,b,m)!==0&&ke(`Can't set a free dimension override: ${y} - ${m}.`)}return n.extra!==void 0&&gr(n.extra,"",new WeakSet,(y,m)=>{let b=Ue(y,a),w=Ue(m,a);t._OrtAddSessionConfigEntry(r,b,w)!==0&&ke(`Can't set a session config entry: ${y} - ${m}.`)}),[r,a]}catch(o){throw r!==0&&t._OrtReleaseSessionOptions(r),a.forEach(u=>t._free(u)),o}}});var Ln,Wt,yr,Xr,br,Jr,Gn,De=q(()=>{"use strict";Ln=e=>{switch(e){case"int8":return 3;case"uint8":return 2;case"bool":return 9;case"int16":return 5;case"uint16":return 4;case"int32":return 6;case"uint32":return 12;case"float16":return 10;case"float32":return 1;case"float64":return 11;case"string":return 8;case"int64":return 7;case"uint64":return 13;default:throw new Error(`unsupported data type: ${e}`)}},Wt=e=>{switch(e){case 3:return"int8";case 2:return"uint8";case 9:return"bool";case 5:return"int16";case 4:return"uint16";case 6:return"int32";case 12:return"uint32";case 10:return"float16";case 1:return"float32";case 11:return"float64";case 8:return"string";case 7:return"int64";case 13:return"uint64";default:throw new Error(`unsupported data type: ${e}`)}},yr=e=>[void 0,4,1,1,2,2,4,8,void 0,1,2,8,4,8,void 0,void 0,void 0][e],Xr=e=>{switch(e){case"float16":return Uint16Array;case"float32":return Float32Array;case"uint8":return Uint8Array;case"int8":return Int8Array;case"uint16":return Uint16Array;case"int16":return Int16Array;case"int32":return Int32Array;case"bool":return Uint8Array;case"float64":return Float64Array;case"uint32":return Uint32Array;case"int64":return BigInt64Array;case"uint64":return BigUint64Array;default:throw new Error(`unsupported type: ${e}`)}},br=e=>{switch(e){case"verbose":return 0;case"info":return 1;case"warning":return 2;case"error":return 3;case"fatal":return 4;default:throw new Error(`unsupported logging level: ${e}`)}},Jr=e=>e==="float32"||e==="int32"||e==="int64"||e==="bool"||e==="float16"||e==="uint32",Gn=e=>{switch(e){case"none":return 0;case"cpu":return 1;case"cpu-pinned":return 2;case"texture":return 3;case"gpu-buffer":return 4;default:throw new Error(`unsupported data location: ${e}`)}}});var cd,pd,Wi,Ui,Ni,fd,Be,It=q(()=>{"use strict";De();cd=["V","I","W","E","F"],pd=(e,t)=>{console.log(`[${cd[e]},${new Date().toISOString()}]${t}`)},Ni=(e,t)=>{Wi=e,Ui=t},fd=(e,t)=>{let r=br(e),a=br(Wi);r>=a&&pd(r,typeof t=="function"?t():t)},Be=(...e)=>{Ui&&fd(...e)}});var Vi,Hi=q(()=>{"use strict";De();Vi=(e,t)=>new(Xr(t))(e)});var Qr=q(()=>{"use strict"});var en,md,Li,qn,Fn,Fi,qi=q(()=>{"use strict";It();Qr();en=e=>Math.ceil(e/16)*16,md=1,Li=()=>md++,qn=async(e,t,r,a)=>{let n=en(r),o=e.device.createBuffer({size:n,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ});try{let u=e.getCommandEncoder();e.endComputePass(),u.copyBufferToBuffer(t,0,o,0,n),e.flush(),await o.mapAsync(GPUMapMode.READ);let l=o.getMappedRange();if(a){let i=a();return i.set(new Uint8Array(l,0,r)),i}else return new Uint8Array(l.slice(0,r))}finally{o.destroy()}},Fn=class{constructor(t){this.backend=t;this.storageCache=new Map,this.freeBuffers=new Map,this.freeUniformBuffers=new Map,this.buffersForUploadingPending=[],this.buffersPending=[],this.externalBuffers=new Map}upload(t,r){let a=r.buffer,n=r.byteOffset,o=r.byteLength,u=en(o),l=this.storageCache.get(t);if(!l)throw new Error("gpu data for uploading does not exist");if(l.originalSize!==o)throw new Error(`inconsistent data size. gpu data size=${l.originalSize}, data size=${o}`);let i=this.backend.device.createBuffer({mappedAtCreation:!0,size:u,usage:GPUBufferUsage.MAP_WRITE|GPUBufferUsage.COPY_SRC}),c=i.getMappedRange();new Uint8Array(c).set(new Uint8Array(a,n,o)),i.unmap();let f=this.backend.getCommandEncoder();this.backend.endComputePass(),f.copyBufferToBuffer(i,0,l.gpuData.buffer,0,u),Be("verbose",()=>`[WebGPU] GpuDataManager.upload(id=${t})`),this.buffersForUploadingPending.push(i)}memcpy(t,r){let a=this.storageCache.get(t);if(!a)throw new Error("source gpu data for memcpy does not exist");let n=this.storageCache.get(r);if(!n)throw new Error("destination gpu data for memcpy does not exist");if(a.originalSize!==n.originalSize)throw new Error("inconsistent source and destination gpu data size");let o=en(a.originalSize),u=this.backend.getCommandEncoder();this.backend.endComputePass(),u.copyBufferToBuffer(a.gpuData.buffer,0,n.gpuData.buffer,0,o)}registerExternalBuffer(t,r,a){let n;if(a){if(n=this.externalBuffers.get(a),n===void 0)throw new Error("previous buffer is not registered");if(t===a)return Be("verbose",()=>`[WebGPU] GpuDataManager.registerExternalBuffer(size=${r}) => id=${n}, buffer is the same, skip.`),n;this.externalBuffers.delete(a)}else n=Li();return this.storageCache.set(n,{gpuData:{id:n,type:0,buffer:t},originalSize:r}),this.externalBuffers.set(t,n),Be("verbose",()=>`[WebGPU] GpuDataManager.registerExternalBuffer(size=${r}) => id=${n}, registered.`),n}unregisterExternalBuffer(t){let r=this.externalBuffers.get(t);r!==void 0&&(this.storageCache.delete(r),this.externalBuffers.delete(t),Be("verbose",()=>`[WebGPU] GpuDataManager.unregisterExternalBuffer() => id=${r}`))}create(t,r=GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST){let a=en(t),n,o=(r&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE,u=(r&GPUBufferUsage.UNIFORM)===GPUBufferUsage.UNIFORM;if(o||u){let i=o?this.freeBuffers:this.freeUniformBuffers,c=i.get(a);c||(c=[],i.set(a,c)),c.length>0?n=c.pop():n=this.backend.device.createBuffer({size:a,usage:r})}else n=this.backend.device.createBuffer({size:a,usage:r});let l={id:Li(),type:0,buffer:n};return this.storageCache.set(l.id,{gpuData:l,originalSize:t}),Be("verbose",()=>`[WebGPU] GpuDataManager.create(size=${t}) => id=${l.id}`),l}get(t){return this.storageCache.get(t)?.gpuData}release(t){let r=this.storageCache.get(t);if(!r)throw new Error("releasing data does not exist");return Be("verbose",()=>`[WebGPU] GpuDataManager.release(id=${t}), gpuDataId=${r.gpuData.id}`),this.storageCache.delete(t),this.buffersPending.push(r.gpuData.buffer),r.originalSize}async download(t,r){let a=this.storageCache.get(t);if(!a)throw new Error("data does not exist");await qn(this.backend,a.gpuData.buffer,a.originalSize,r)}refreshPendingBuffers(){for(let t of this.buffersForUploadingPending)t.destroy();this.buffersForUploadingPending=[];for(let t of this.buffersPending)(t.usage&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE?this.freeBuffers.get(t.size).push(t):(t.usage&GPUBufferUsage.UNIFORM)===GPUBufferUsage.UNIFORM?this.freeUniformBuffers.get(t.size).push(t):t.destroy();this.buffersPending=[]}dispose(){this.freeBuffers.forEach(t=>{t.forEach(r=>{r.destroy()})}),this.freeUniformBuffers.forEach(t=>{t.forEach(r=>{r.destroy()})}),this.storageCache.forEach(t=>{t.gpuData.buffer.destroy()}),this.storageCache=new Map,this.freeBuffers=new Map,this.freeUniformBuffers=new Map}},Fi=(...e)=>new Fn(...e)});var jn,J,Re=q(()=>{"use strict";jn=class{constructor(t){Object.assign(this,t)}get cacheKey(){return this.key||(this.key=Object.getOwnPropertyNames(this).sort().map(t=>`${this[t]}`).join(";")),this.key}},J=e=>new jn(e)});var Kn,ct,D,Ut,tn,rn,nn,ye=q(()=>{"use strict";Kn=class{static calcMatMulShape(t,r){return t[1]!==r[0]?void 0:[t[0],r[1]]}},ct=class{static calcShape(t,r,a=!1){let n=t.length,o=r.length;if(n===0)return r;if(o===0)return t;let u=Math.max(t.length,r.length),l=new Array(u);if(a){if(n<2||o<2)return;let i=Kn.calcMatMulShape([t[n-2],t[n-1]],[r[o-2],r[o-1]]);if(i===void 0)return;[l[u-2],l[u-1]]=i}for(let i=a?3:1;i<=u;i++){let c=n-i<0?1:t[n-i],f=o-i<0?1:r[o-i];if(c!==f&&c>1&&f>1)return;l[u-i]=Math.max(c,f)}return l}static isValidBroadcast(t,r){let a=t.length,n=r.length;if(a>n)return!1;for(let o=1;o<=a;o++)if(t[a-o]!==1&&t[a-o]!==r[n-o])return!1;return!0}},D=class e{static size(t){return e.getSizeFromDimensionRange(t,0,t.length)}static sizeFromDimension(t,r){if(r<0||r>t.length)throw new Error(`invalid dimension of ${r} for sizeFromDimension as Tensor has ${t.length} dimensions.`);return e.getSizeFromDimensionRange(t,r,t.length)}static sizeToDimension(t,r){if(r<0||r>t.length)throw new Error(`invalid dimension of ${r} for sizeToDimension as Tensor has ${t.length} dimensions.`);return e.getSizeFromDimensionRange(t,0,r)}static getSizeFromDimensionRange(t,r,a){let n=1;for(let o=r;o<a;o++){if(t[o]<0)throw new Error("cannot get valid size from specified dimension range. Most likely the range contains negative values in them.");n*=t[o]}return n}static computeStrides(t){let r=t.length;if(r===0)return[];if(r===1)return[1];let a=new Array(r);a[r-1]=1,a[r-2]=t[r-1];for(let n=r-3;n>=0;--n)a[n]=a[n+1]*t[n+1];return a}static normalizeAxis(t,r){if(t<-r&&t>=r)throw new Error("unsupported axis for this operation.");return t<0?t+r:t}static normalizeAxes(t,r){return t.map(a=>this.normalizeAxis(a,r??t.length))}static sortBasedOnPerm(t,r){return r?r.map(a=>t[a]):t.slice().reverse()}static padShape(t,r){let a=t.length;return t.map((n,o)=>n+r[o]+r[o+a])}static areEqual(t,r){return t.length!==r.length?!1:t.every((a,n)=>a===r[n])}},Ut=class e{static adjustPoolAttributes(t,r,a,n,o,u){if(!t&&a.length!==r.length-2)throw new Error("length of specified kernel shapes should be 2 less than length of input dimensions");if(t)for(let l=0;l<r.length-2;l++)l>=a.length?a.push(r[l+2]):a[l]=r[l+2];for(let l=0;l<a.length;l++)if(l<n.length){if(n[l]<0)throw new Error("strides should be greater than or equal to 1")}else n.push(1);for(let l=0;l<a.length;l++)if(l<o.length){if(o[l]<0)throw new Error("dilations should be greater than or equal to 1")}else o.push(1);for(let l=0;l<a.length*2;l++)if(l<u.length){if(u[l]<0)throw new Error("pad should be greater than or equal to 1")}else u.push(0);for(let l=0;l<a.length;l++){if(a[l]<=0)throw new Error("kernel shapes need to be greater than 0");if(u[l]>=a[l]||u[l+a.length]>=a[l])throw new Error("pads should be smaller than kernel")}}static adjustPadsBasedOnAutoPad(t,r,a,n,o,u,l){if(l){if(o.length!==2*(t.length-2))throw new Error("length of pads should be twice the length of data dimensions");if(r.length!==t.length-2)throw new Error("length of strides should be the length of data dimensions");if(n.length!==t.length-2)throw new Error("length of kernel shapes should be the length of data dimensions");for(let i=0;i<t.length-2;i++)e.adjustPadAndReturnShape(t[i+(u?1:2)],r[i],a[i],n[i],o,i,i+t.length-2,l)}}static computePoolOutputShape(t,r,a,n,o,u,l){if(r.length<=0)throw new Error("input shape must be of size greater than 0");let i=[r[0],r[1]];return e.computeShapeHelper(t,r,i,a,n,o,u,l),i}static computeConvOutputShape(t,r,a,n,o,u,l){if(t.length<=0||r.length<=0)throw new Error("invalid input tensor dims or invalid filter tensor dims");let i=[t[0],r[0]];return e.computeShapeHelper(!1,t,i,a,n,o,u,l),i}static computeShapeHelper(t,r,a,n,o,u,l,i){if(t)for(let c=0;c<r.length-2;c++)a.push(1);else for(let c=0;c<r.length-2;c++)a.push(e.adjustPadAndReturnShape(r[c+2],n[c],o[c],u[c],l,c,c+r.length-2,i))}static adjustPadAndReturnShape(t,r,a,n,o,u,l,i){let c=a*(n-1)+1;if(i&&i!=="NOTSET")switch(i){case"VALID":return o[u]=0,o[l]=0,Math.floor((t-c)/r+1);case"SAME_LOWER":case"SAME_UPPER":if(a!==1)throw new Error("Dilation not supported for SAME_UPPER or SAME_LOWER");{let y=((t+r-1)/r-1)*r+n-t;return o[u]=Math.floor(i==="SAME_LOWER"?(y+1)/2:y/2),o[l]=y-o[u],Math.floor((t+y-n)/r+1)}default:throw new Error("Unsupported AutoPad type")}else return Math.floor((t+o[u]+o[l]-c)/r+1)}},tn=class{static getShapeOfGemmResult(t,r,a,n,o){if(t.length!==2||a.length!==2)throw new Error("shape need to be of size 2");let u,l,i;r?(u=t[1],l=t[0]):(u=t[0],l=t[1]);let c=-1;if(n?(i=a[0],c=1):(i=a[1],c=0),a[c]!==l)throw new Error("dimension mismatch");if(u<=0||i<=0||l<=0)throw new Error("invalid shape specified");if(o&&!ct.isValidBroadcast(o,[u,i]))throw new Error("gemm: invalid bias shape for broadcast");return[u,i,l]}},rn=-34028234663852886e22,nn=34028234663852886e22});var hd,ji,Ae,Y,Je,qe,nt,at,Ce,Zn,W,K,Ki,Yn,Yi,Xn,Pe,be=q(()=>{"use strict";De();ye();hd=64,ji=(e,t)=>{if(t===3)throw new Error("vec3 has same alignment as vec4, use vec4 instead");switch(e){case 10:return t>1?`vec${t}<f16>`:"f16";case 1:return t>1?`vec${t}<f32>`:"f32";case 6:return t>1?`vec${t}<i32>`:"i32";case 12:return t>1?`vec${t}<u32>`:"u32";case 7:if(t>1)throw new Error("currently not supported vecX of uint64 yet");return["vec2<u32>","i32"];case 13:if(t>1)throw new Error("currently not supported vecX of uint64 yet");return["vec2<u32>","u32"];case 9:if(t!==4)throw new Error("bool must be vec4");return["u32","vec4<bool>"];default:throw new Error(`Unknown data type: ${e}`)}},Ae=(e,t=1)=>{let r=ji(e,t);return typeof r=="string"?r:r[0]},Y=e=>e.length===0?[]:[{type:"uint32",data:e},{type:"uint32",data:D.computeStrides(e)}],Je=e=>e%4===0?4:e%2===0?2:1,qe=(e="f32",t,r="0")=>!t||t===1?`${e}(${r})`:`vec${t}<${e}>(${r})`,nt=(e,t,r)=>e==="f32"?r:t===1?`f32(${r})`:`vec${t}f(${r})`,at=(e,t)=>t===4?`(${e}.x + ${e}.y + ${e}.z + ${e}.w)`:t===2?`(${e}.x + ${e}.y)`:t===3?`(${e}.x + ${e}.y + ${e}.z)`:e,Ce=(e,t,r)=>e.startsWith("uniforms.")&&r>4?typeof t=="string"?`${e}[(${t}) / 4][(${t}) % 4]`:`${e}[${Math.floor(t/4)}][${t%4}]`:r>1?`${e}[${t}]`:e,Zn=(e,t,r,a,n)=>{let o=typeof r=="number",u=o?r:r.length,l=[...new Array(u).keys()],i=u<2?"u32":u<=4?`vec${u}<u32>`:`array<u32, ${u}>`,c=ji(t,n),f=typeof c=="string"?c:c[1],y=typeof c=="string"?c:c[0],m={indices:i,value:f,storage:y,tensor:t},b=F=>typeof F=="string"?F:`${F}u`,w={offsetToIndices:!1,indicesToOffset:!1,broadcastedIndicesToOffset:!1,set:!1,setByIndices:!1,get:!1,getByIndices:!1},$=o?"uniforms.":"",I=`${$}${e}_shape`,x=`${$}${e}_strides`,C="";for(let F=0;F<u-1;F++)C+=`
    let dim${F} = current / ${Ce(x,F,u)};
    let rest${F} = current % ${Ce(x,F,u)};
    indices[${F}] = dim${F};
    current = rest${F};
    `;C+=`indices[${u-1}] = current;`;let P=u<2?"":`
  fn o2i_${e}(offset: u32) -> ${m.indices} {
    var indices: ${m.indices};
    var current = offset;
    ${C}
    return indices;
  }`,E=F=>(w.offsetToIndices=!0,u<2?F:`o2i_${e}(${F})`),z=[];if(u>=2)for(let F=u-1;F>=0;F--)z.push(`${Ce(x,F,u)} * (indices[${F}])`);let T=u<2?"":`
  fn i2o_${e}(indices: ${m.indices}) -> u32 {
    return ${z.join("+")};
  }`,H=F=>(w.indicesToOffset=!0,u<2?F:`i2o_${e}(${F})`),N=(...F)=>u===0?"0u":`${m.indices}(${F.map(b).join(",")})`,G=(F,de)=>u<2?`${F}`:`${Ce(F,de,u)}`,re=(F,de,me)=>u<2?`${F}=${me};`:`${Ce(F,de,u)}=${me};`,B={},j=(F,de)=>{w.broadcastedIndicesToOffset=!0;let me=`${de.name}broadcastedIndicesTo${e}Offset`;if(me in B)return`${me}(${F})`;let He=[];for(let Xe=u-1;Xe>=0;Xe--){let Me=de.indicesGet("outputIndices",Xe+de.rank-u);He.push(`${G(x,Xe)} * (${Me} % ${G(I,Xe)})`)}return B[me]=`fn ${me}(outputIndices: ${de.type.indices}) -> u32 {
             return ${He.length>0?He.join("+"):"0u"};
           }`,`${me}(${F})`},pe=(F,de)=>(()=>{if(m.storage===m.value)return`${e}[${F}]=${de};`;if(m.storage==="vec2<u32>"&&m.value==="i32")return`${e}[${F}]=vec2<u32>(u32(${de}), select(0u, 0xFFFFFFFFu, ${de} < 0));`;if(m.storage==="vec2<u32>"&&m.value==="u32")return`${e}[${F}]=vec2<u32>(u32(${de}), 0u);`;if(m.storage==="u32"&&m.value==="vec4<bool>")return`${e}[${F}]=dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(${de}));`;throw new Error(`not supported combination of storage type ${m.storage} and value type ${m.value} yet`)})(),Q=F=>(()=>{if(m.storage===m.value)return`${e}[${F}]`;if(m.storage==="vec2<u32>"&&m.value==="i32")return`i32(${e}[${F}].x)`;if(m.storage==="vec2<u32>"&&m.value==="u32")return`u32(${e}[${F}].x)`;if(m.storage==="u32"&&m.value==="vec4<bool>")return`vec4<bool>(bool(${e}[${F}] & 0xFFu), bool(${e}[${F}] & 0xFF00u), bool(${e}[${F}] & 0xFF0000u), bool(${e}[${F}] & 0xFF000000u))`;throw new Error(`not supported combination of storage type ${m.storage} and value type ${m.value} yet`)})(),$e=u<2?"":`
  fn get_${e}ByIndices(indices: ${m.indices}) -> ${f} {
    return ${Q(`i2o_${e}(indices)`)};
  }`,Z=u<2?"":(()=>{let F=l.map(me=>`d${me}: u32`).join(", "),de=l.map(me=>`d${me}`).join(", ");return`
  fn get_${e}(${F}) -> ${f} {
    return get_${e}ByIndices(${N(de)});
  }`})(),Se=(...F)=>{if(F.length!==u)throw new Error(`indices length must be ${u}`);let de=F.map(b).join(",");return u===0?Q("0u"):u===1?Q(de[0]):(w.get=!0,w.getByIndices=!0,w.indicesToOffset=!0,`get_${e}(${de})`)},Ie=F=>u<2?Q(F):(w.getByIndices=!0,w.indicesToOffset=!0,`get_${e}ByIndices(${F})`),Ee=u<2?"":`
  fn set_${e}ByIndices(indices: ${m.indices}, value: ${f}) {
    ${pe(`i2o_${e}(indices)`,"value")}
  }`,he=u<2?"":(()=>{let F=l.map(me=>`d${me}: u32`).join(", "),de=l.map(me=>`d${me}`).join(", ");return`
  fn set_${e}(${F}, value: ${f}) {
    set_${e}ByIndices(${N(de)}, value);
  }`})();return{impl:()=>{let F=[];return o||(F.push(`const ${I} = ${m.indices}(${r.join(",")});`),F.push(`const ${x} = ${m.indices}(${D.computeStrides(r).join(",")});`)),w.offsetToIndices&&F.push(P),w.indicesToOffset&&F.push(T),w.broadcastedIndicesToOffset&&Object.values(B).forEach(de=>F.push(de)),w.set&&F.push(he),w.setByIndices&&F.push(Ee),w.get&&F.push(Z),w.getByIndices&&F.push($e),F.join(`
`)},type:m,offsetToIndices:E,indicesToOffset:H,broadcastedIndicesToOffset:j,indices:N,indicesGet:G,indicesSet:re,set:(...F)=>{if(F.length!==u+1)throw new Error(`indices length must be ${u}`);let de=F[u];if(typeof de!="string")throw new Error("value must be string");let me=F.slice(0,u).map(b).join(",");return u===0?pe("0u",de):u===1?pe(me[0],de):(w.set=!0,w.setByIndices=!0,w.indicesToOffset=!0,`set_${e}(${me}, ${de})`)},setByOffset:pe,setByIndices:(F,de)=>u<2?pe(F,de):(w.setByIndices=!0,w.indicesToOffset=!0,`set_${e}ByIndices(${F}, ${de});`),get:Se,getByOffset:Q,getByIndices:Ie,usage:a,name:e,strides:x,shape:I,rank:u}},W=(e,t,r,a=1)=>Zn(e,t,r,"input",a),K=(e,t,r,a=1)=>Zn(e,t,r,"output",a),Ki=(e,t,r,a=1)=>Zn(e,t,r,"internal",a),Yn=class{constructor(t){this.normalizedDispatchGroup=t;this.internalVariables=[];this.variables=[];this.uniforms=[];this.variableIndex=0}guardAgainstOutOfBoundsWorkgroupSizes(t){return`if (global_idx >= ${typeof t=="number"?`${t}u`:t}) { return; }`}mainStart(t=hd){let r=typeof t=="number"?t:t[0],a=typeof t=="number"?1:t[1],n=typeof t=="number"?1:t[2],o=this.normalizedDispatchGroup[1]===1&&this.normalizedDispatchGroup[2]===1,u=o?`@builtin(global_invocation_id) global_id : vec3<u32>,
    @builtin(local_invocation_id) local_id : vec3<u32>`:`@builtin(local_invocation_index) local_index : u32,
    @builtin(workgroup_id) workgroup_id : vec3<u32>,
    @builtin(num_workgroups) num_workgroups : vec3<u32>`,l=o?"let global_idx = global_id.x;":`let global_idx = (workgroup_id.z * num_workgroups[0] * num_workgroups[1] +
          workgroup_id.y * num_workgroups[0] + workgroup_id.x) * ${r*a*n}u + local_index;`;return`@compute @workgroup_size(${r}, ${a}, ${n})
  fn main(${u}) {
    ${l}
  `}appendVariableUniforms(t){t.rank!==0&&(t.shape.startsWith("uniforms.")&&this.uniforms.push({name:t.shape.replace("uniforms.",""),type:"u32",length:t.rank}),t.strides.startsWith("uniforms.")&&this.uniforms.push({name:t.strides.replace("uniforms.",""),type:"u32",length:t.rank}))}declareVariable(t,r){if(t.usage==="internal")throw new Error("cannot use internal variable with declareVariable(). use registerInternalVariables() instead.");this.variables.push(t),this.appendVariableUniforms(t);let a=t.usage==="input"?"read":"read_write",n=t.type.storage;return`@group(0) @binding(${r}) var<storage, ${a}> ${t.name}: array<${n}>;`}declareVariables(...t){return t.map(r=>this.declareVariable(r,this.variableIndex++)).join(`
`)}registerInternalVariable(t){if(t.usage!=="internal")throw new Error("cannot use input or output variable with registerInternalVariable(). use declareVariables() instead.");this.internalVariables.push(t),this.appendVariableUniforms(t)}registerInternalVariables(...t){return t.forEach(r=>this.registerInternalVariable(r)),this}registerUniform(t,r,a=1){return this.uniforms.push({name:t,type:r,length:a}),this}registerUniforms(t){return this.uniforms=this.uniforms.concat(t),this}uniformDeclaration(){if(this.uniforms.length===0)return"";let t=[];for(let{name:r,type:a,length:n}of this.uniforms)if(n&&n>4)t.push(`${r}:array<vec4<${a}>, ${Math.ceil(n/4)}>`);else{let o=n==null||n===1?a:`vec${n}<${a}>`;t.push(`${r}:${o}`)}return`
      struct Uniforms { ${t.join(", ")} };
      @group(0) @binding(${this.variableIndex}) var<uniform> uniforms: Uniforms;`}get additionalImplementations(){return this.uniformDeclaration()+this.variables.map(t=>t.impl()).join(`
`)+this.internalVariables.map(t=>t.impl()).join(`
`)}},Yi=e=>new Yn(e),Xn=(e,t)=>{let r=e.length,a=[];for(let n=0;n<r;n++){let o=r-1-n,u=e[o]||1;(t[t.length-1-n]||1)>1&&u===1&&a.unshift(o)}return a},Pe=e=>!0});var gd,Zi,yd,bd,it,Xi,Ji,Xt=q(()=>{"use strict";ye();Re();be();gd=e=>{if(!e||e.length!==1)throw new Error("Transpose requires 1 input.")},Zi=(e,t)=>t&&t.length!==e?[...new Array(e).keys()].reverse():t,yd=(e,t)=>D.sortBasedOnPerm(e,Zi(e.length,t)),bd=(e,t,r,a)=>{let n=[];n.push(`fn perm(i: ${a.type.indices}) -> ${r.type.indices} {
    var a: ${r.type.indices};`);for(let o=0;o<t;++o)n.push(r.indicesSet("a",e[o],`i[${o}]`));return n.push("return a;}"),n.join(`
`)},it=(e,t)=>{let r=e.dataType,a=e.dims.length,n=Zi(a,t),o=Pe(a),u=yd(e.dims,n),l=o?u.length:u,i=o?a:e.dims,c=K("output",r,l),f=W("a",r,i),y=m=>`
  ${m.registerUniform("output_size","u32").declareVariables(f,c)}

  ${bd(n,a,f,c)}

  ${m.mainStart()}
    ${m.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

    let indices = ${c.offsetToIndices("global_idx")};
    let aIndices = perm(indices);

    ${c.setByOffset("global_idx",f.getByIndices("aIndices"))}
  }`;return{name:"Transpose",shaderCache:{hint:`${t}`,inputDependencies:o?["rank"]:["dims"]},getRunData:m=>{let b=D.size(u);return{outputs:[{dims:u,dataType:m[0].dataType}],dispatchGroup:{x:Math.ceil(b/64)},programUniforms:o?[{type:"uint32",data:b},...Y(m[0].dims),...Y(u)]:[{type:"uint32",data:b}]}},getShaderSource:y}},Xi=(e,t)=>{gd(e.inputs),e.compute(it(e.inputs[0],t.perm))},Ji=e=>J({perm:e.perm})});var wd,vd,$d,Sd,xd,_d,Cd,Id,Ed,Ad,pt,Qi,eo,to,ro,no,ao,io,oo,so,uo,lo=q(()=>{"use strict";ye();be();an();Xt();wd={max:"select(bestValue, candidate, candidate > bestValue)",min:"select(bestValue, candidate, candidate < bestValue)",mean:"bestValue + candidate",sum:"bestValue + candidate",prod:"bestValue * candidate",sumSquare:"bestValue + candidate * candidate",logSumExp:"bestValue + exp(candidate)",l1:"bestValue + abs(candidate)",l2:"bestValue + candidate * candidate",logSum:"bestValue + candidate"},vd={max:"select(bestValue, candidate, candidate > bestValue)",min:"select(bestValue, candidate, candidate < bestValue)",mean:"bestValue + candidate",sum:"bestValue + candidate",prod:"bestValue * candidate",sumSquare:"bestValue + candidate",logSumExp:"bestValue + candidate",l1:"bestValue + candidate",l2:"bestValue + candidate",logSum:"bestValue + candidate"},$d={max:"_A[offset]",min:"_A[offset]",mean:"0",sum:"0",prod:"1",sumSquare:"0",logSumExp:"0",l1:"0",l2:"0",logSum:"0"},Sd={max:"bestValue",min:"bestValue",sum:"bestValue",prod:"bestValue",sumSquare:"bestValue",logSumExp:"log(bestValue)",l1:"bestValue",l2:"sqrt(bestValue)",logSum:"log(bestValue)"},xd=(e,t)=>{let r=[];for(let a=t-e;a<t;++a)r.push(a);return r},_d=(e,t)=>{let r=[],a=e.length;for(let o=0;o<a;o++)t.indexOf(o)===-1&&r.push(e[o]);let n=t.map(o=>e[o]);return[r,n]},Cd=(e,t)=>{let r=e.length+t.length,a=[],n=0;for(let o=0;o<r;o++)t.indexOf(o)===-1?a.push(e[n++]):a.push(1);return a},Id=(e,t)=>{for(let r=0;r<e.length;++r)if(e[e.length-r-1]!==t-1-r)return!1;return!0},Ed=(e,t)=>{let r=[];if(!Id(e,t)){for(let a=0;a<t;++a)e.indexOf(a)===-1&&r.push(a);e.forEach(a=>r.push(a))}return r},Ad=(e,t,r,a,n,o,u)=>{let l=r[0].dims,i=D.size(o),c=D.size(u),f=W("_A",r[0].dataType,l),y=K("output",n,o),m=32,b=`
          var<workgroup> aBestValues : array<${y.type.storage}, ${m}>;
       `;return{name:e,shaderCache:t,getShaderSource:$=>`
        ${$.registerUniform("reduceSize","u32").declareVariables(f,y)}
        ${b}
        fn DIV_CEIL(a : u32, b : u32) -> u32 {
          return ((a - 1u) / b + 1u);
         }
         ${$.mainStart(m)}
          let local_idx = local_id.x;

          let outputIndex = global_idx / ${m};
          let offset = outputIndex * uniforms.reduceSize;

          var bestValue = ${y.type.storage}(${$d[a]});
          let Length = uniforms.reduceSize;
          for (var k = local_idx; k < Length; k = k + ${m}) {
           let candidate = ${y.type.storage}(${f.getByOffset("offset + k")});
           bestValue = ${wd[a]};
          }
          aBestValues[local_idx] = bestValue;
          workgroupBarrier();

         var reduceSize = min(Length, ${m}u);
         for (var currentSize = reduceSize / 2u; reduceSize > 1u;
             currentSize = reduceSize / 2u) {
           let interval = DIV_CEIL(reduceSize, 2u);
           if (local_idx < currentSize) {
            let candidate = aBestValues[local_idx + interval];
            bestValue = ${vd[a]};
            aBestValues[local_idx] = bestValue;
           }
           reduceSize = interval;
           workgroupBarrier();
         }

         if (local_idx == 0u) {
          ${y.setByOffset("outputIndex",`${a==="mean"?`bestValue / ${y.type.storage}(uniforms.reduceSize)`:`${Sd[a]}`}`)};
         }
        }`,getRunData:()=>({outputs:[{dims:o,dataType:n}],dispatchGroup:{x:i},programUniforms:[{type:"uint32",data:c}]})}},pt=(e,t,r,a)=>{let n=e.inputs.length===1?r:Jn(e.inputs,r),o=n.axes;o.length===0&&!n.noopWithEmptyAxes&&(o=e.inputs[0].dims.map((b,w)=>w));let u=D.normalizeAxes(o,e.inputs[0].dims.length),l=u,i=e.inputs[0],c=Ed(l,e.inputs[0].dims.length);c.length>0&&(i=e.compute(it(e.inputs[0],c),{inputs:[0],outputs:[-1]})[0],l=xd(l.length,i.dims.length));let[f,y]=_d(i.dims,l),m=f;n.keepDims&&(m=Cd(f,u)),e.compute(Ad(t,{hint:n.cacheKey,inputDependencies:["type"]},[i],a,e.inputs[0].dataType,m,y),{inputs:[i]})},Qi=(e,t)=>{pt(e,"ReduceMeanShared",t,"mean")},eo=(e,t)=>{pt(e,"ReduceL1Shared",t,"l1")},to=(e,t)=>{pt(e,"ReduceL2Shared",t,"l2")},ro=(e,t)=>{pt(e,"ReduceLogSumExpShared",t,"logSumExp")},no=(e,t)=>{pt(e,"ReduceMaxShared",t,"max")},ao=(e,t)=>{pt(e,"ReduceMinShared",t,"min")},io=(e,t)=>{pt(e,"ReduceProdShared",t,"prod")},oo=(e,t)=>{pt(e,"ReduceSumShared",t,"sum")},so=(e,t)=>{pt(e,"ReduceSumSquareShared",t,"sumSquare")},uo=(e,t)=>{pt(e,"ReduceLogSumShared",t,"logSum")}});var ft,Td,on,Jn,mt,Od,kd,Rd,Pd,Bd,Md,zd,Dd,Wd,Ud,ht,co,po,fo,mo,ho,go,yo,bo,wo,vo,an=q(()=>{"use strict";ye();Re();be();lo();ft=e=>{if(!e||e.length===0||e.length>2)throw new Error("Reduce op requires 1 or 2 inputs.");if(e.length===2&&e[1].dims.length!==1)throw new Error("Invalid axes input dims.")},Td=e=>["","",`var value = ${e.getByIndices("input_indices")};`,""],on=(e,t,r,a,n,o,u=!1,l=!1)=>{let i=[],c=r[0].dims,f=c.length,y=D.normalizeAxes(n,f),m=!l&&y.length===0;c.forEach((I,x)=>{m||y.indexOf(x)>=0?u&&i.push(1):i.push(I)});let b=i.length,w=D.size(i);return{name:e,shaderCache:t,getShaderSource:I=>{let x=[],C=W("_A",r[0].dataType,f),P=K("output",o,b),E=a(C,P,y),z=E[2];for(let T=0,H=0;T<f;T++)m||y.indexOf(T)>=0?(u&&H++,z=`for(var j${T}: u32 = 0; j${T} < ${c[T]}; j${T}++) {
                  ${E[2].includes("last_index")?`let last_index = j${T};`:""}
                  ${C.indicesSet("input_indices",T,`j${T}`)}
                  ${z}
                }`):(x.push(`${C.indicesSet("input_indices",T,P.indicesGet("output_indices",H))};`),H++);return`

        ${I.registerUniform("output_size","u32").declareVariables(C,P)}

        ${I.mainStart()}
          ${I.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
          var input_indices: ${C.type.indices};
          let output_indices = ${P.offsetToIndices("global_idx")};

          ${x.join(`
`)}
          ${E[0]}       // init ops for reduce max/min
          ${E[1]}
          ${z}
          ${E[3]}
          ${E.length===4?P.setByOffset("global_idx","value"):E.slice(4).join(`
`)}
        }`},getRunData:()=>({outputs:[{dims:i,dataType:o}],dispatchGroup:{x:Math.ceil(w/64)},programUniforms:[{type:"uint32",data:w},...Y(c),...Y(i)]})}},Jn=(e,t)=>{let r=[];return e[1].dims[0]>0&&e[1].getBigInt64Array().forEach(a=>r.push(Number(a))),J({axes:r,keepDims:t.keepDims,noopWithEmptyAxes:t.noopWithEmptyAxes})},mt=(e,t,r,a)=>{let n=e.inputs,o=n.length===1?r:Jn(n,r);e.compute(on(t,{hint:o.cacheKey,inputDependencies:["rank"]},[n[0]],o.noopWithEmptyAxes&&o.axes.length===0?Td:a,o.axes,n[0].dataType,o.keepDims,o.noopWithEmptyAxes),{inputs:[0]})},Od=(e,t)=>{ft(e.inputs),mt(e,"ReduceLogSum",t,(a,n)=>[`var value = ${n.type.storage}(0);`,"",`value += ${a.getByIndices("input_indices")};`,"value = log(value);"])},kd=(e,t)=>{ft(e.inputs),mt(e,"ReduceL1",t,(a,n)=>[`var value = ${n.type.storage}(0);`,"",`value += abs(${a.getByIndices("input_indices")});`,""])},Rd=(e,t)=>{ft(e.inputs),mt(e,"ReduceL2",t,(a,n)=>[`var t = ${n.type.value}(0); var value = ${n.type.value}(0);`,"",`t = ${a.getByIndices("input_indices")}; value += (t * t);`,"value = sqrt(value);"])},Pd=(e,t)=>{ft(e.inputs),mt(e,"ReduceLogSumExp",t,(a,n)=>[`var value = ${n.type.storage}(0);`,"",`value += exp(${a.getByIndices("input_indices")});`,"value = log(value);"])},Bd=(e,t)=>{ft(e.inputs),mt(e,"ReduceMax",t,(a,n,o)=>{let u=[];for(let l=0;l<a.rank;l++)(o.indexOf(l)>=0||o.length===0)&&u.push(a.indicesSet("input_indices",l,0));return[`${u.join(`
`)}`,`var value = ${a.getByIndices("input_indices")};`,`value = max(value, ${a.getByIndices("input_indices")});`,""]})},Md=(e,t)=>{ft(e.inputs),mt(e,"ReduceMean",t,(a,n,o)=>{let u=1;for(let l=0;l<a.rank;l++)(o.indexOf(l)>=0||o.length===0)&&(u*=e.inputs[0].dims[l]);return["var sum = f32(0);","",`sum += f32(${a.getByIndices("input_indices")});`,`let value = ${n.type.value}(sum / ${u});`]})},zd=(e,t)=>{ft(e.inputs),mt(e,"ReduceMin",t,(a,n,o)=>{let u=[];for(let l=0;l<a.rank;l++)(o.indexOf(l)>=0||o.length===0)&&u.push(`input_indices[${l}] = 0;`);return[`${u.join(`
`)}`,`var value = ${a.getByIndices("input_indices")};`,`value = min(value, ${a.getByIndices("input_indices")});`,""]})},Dd=(e,t)=>{ft(e.inputs),mt(e,"ReduceProd",t,(a,n)=>[`var value = ${n.type.storage}(1);`,"",`value *= ${a.getByIndices("input_indices")};`,""])},Wd=(e,t)=>{ft(e.inputs),mt(e,"ReduceSum",t,(a,n)=>[`var value = ${n.type.storage}(0);`,"",`value += ${a.getByIndices("input_indices")};`,""])},Ud=(e,t)=>{ft(e.inputs),mt(e,"ReduceSumSquare",t,(a,n)=>[`var t = ${n.type.value}(0); var value = ${n.type.value}(0);`,"",`t = ${a.getByIndices("input_indices")}; value += t * t;`,""])},ht=(e,t,r)=>{if(t.length===0)return r;let a=1,n=1;for(let o=0;o<t.length;o++)t.indexOf(o)===-1?a*=e[o]:n*=e[o];return n<32&&a>1024},co=(e,t)=>{ht(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Md(e,t):Qi(e,t)},po=(e,t)=>{ht(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?kd(e,t):eo(e,t)},fo=(e,t)=>{ht(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Rd(e,t):to(e,t)},mo=(e,t)=>{ht(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Pd(e,t):ro(e,t)},ho=(e,t)=>{ht(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Bd(e,t):no(e,t)},go=(e,t)=>{ht(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?zd(e,t):ao(e,t)},yo=(e,t)=>{ht(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Dd(e,t):io(e,t)},bo=(e,t)=>{ht(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Wd(e,t):oo(e,t)},wo=(e,t)=>{ht(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Ud(e,t):so(e,t)},vo=(e,t)=>{ht(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Od(e,t):uo(e,t)}});var $o,So,xo,Qn,_o=q(()=>{"use strict";De();Re();an();$o=e=>{if(!e||e.length===0||e.length>2)throw new Error("ArgMinMaxOp op requires 1 or 2 inputs.");if(e[0].dataType!==1)throw new Error("Invalid input type.")},So=(e,t)=>{$o(e.inputs);let r=(a,n,o)=>{let u=[];for(let l=0;l<a.rank;l++)(o.indexOf(l)>=0||o.length===0)&&u.push(`input_indices[${l}] = 0;`);return[`${u.join(`
`)}`,`var value = ${a.getByIndices("input_indices")};
var best_index : i32 = 0;`,`if (${a.getByIndices("input_indices")} ${t.selectLastIndex>0?"<=":"<"} value) {
         value = ${a.getByIndices("input_indices")};
         best_index = i32(last_index);
       }`,"",n.setByOffset("global_idx","best_index")]};e.compute(on("ArgMin",{hint:t.cacheKey,inputDependencies:["rank"]},[e.inputs[0]],r,[t.axis],7,t.keepDims),{inputs:[0]})},xo=(e,t)=>{$o(e.inputs);let r=(a,n,o)=>{let u=[];for(let l=0;l<a.rank;l++)(o.indexOf(l)>=0||o.length===0)&&u.push(`input_indices[${l}] = 0;`);return[`${u.join(`
`)}`,`var value = ${a.getByIndices("input_indices")};
var best_index : i32 = 0;`,`if (${a.getByIndices("input_indices")} ${t.selectLastIndex>0?">=":">"} value) {
         value = ${a.getByIndices("input_indices")};
         best_index = i32(last_index);
       }`,"",n.setByOffset("global_idx","best_index")]};e.compute(on("argMax",{hint:t.cacheKey,inputDependencies:["rank"]},[e.inputs[0]],r,[t.axis],7,t.keepDims),{inputs:[0]})},Qn=e=>J(e)});var Nd,Co,Vd,Hd,Ld,sn,Gd,Io,ea=q(()=>{"use strict";Re();Qr();be();Nd=(e,t)=>{let r=e[0],a=e[1],n=e[2],o=e[3],u=e[4],l=e[5];if(u&&l)throw new Error("Attention cannot have both past and relative_position_bias");if(r.dims.length!==3)throw new Error('Input "input" must have 3 dimensions');let i=r.dims[0],c=r.dims[1],f=r.dims[2];if(n.dims.length!==1)throw new Error('Input "bias" is expected to have 1 dimensions');if(a.dims.length!==2)throw new Error('Input "weights" is expected to have 2 dimensions');if(a.dims[0]!==f)throw new Error("Input 1 dimension 0 should have same length as dimension 2 of input 0");if(n.dims[0]!==a.dims[1])throw new Error('Input "bias" dimension 0 should have same length as dimension 1 of input "weights"');let y=n.dims[0]/3,m=y,b=m;if(t.qkvHiddenSizes.length>0){if(t.qkvHiddenSizes.length!==3)throw new Error("qkv_hidden_sizes attribute should have 3 elements");for(let P of t.qkvHiddenSizes)if(P%t.numHeads!==0)throw new Error("qkv_hidden_sizes should be divisible by num_heads");y=t.qkvHiddenSizes[0],m=t.qkvHiddenSizes[1],b=t.qkvHiddenSizes[2]}let w=c;if(y!==m)throw new Error("qkv_hidden_sizes first element should be same as the second");if(n.dims[0]!==y+m+b)throw new Error('Input "bias" dimension 0 should have same length as sum of Q/K/V hidden sizes');let $=0;if(u){if(m!==b)throw new Error('Input "past" expect k_hidden_size == v_hidden_size');if(u.dims.length!==5)throw new Error('Input "past" must have 5 dimensions');if(u.dims[0]!==2)throw new Error('Input "past" first dimension must be 2');if(u.dims[1]!==i)throw new Error('Input "past" second dimension must be batch_size');if(u.dims[2]!==t.numHeads)throw new Error('Input "past" third dimension must be num_heads');if(u.dims[4]!==m/t.numHeads)throw new Error('Input "past" fifth dimension must be k_hidden_size / num_heads');t.pastPresentShareBuffer||($=u.dims[3])}let I=w+$,x=-1,C=0;if(o)throw new Error("Mask not supported");if(u)throw new Error("past is not supported");if(l)throw new Error("relativePositionBias is not supported");return{batchSize:i,sequenceLength:c,pastSequenceLength:$,kvSequenceLength:w,totalSequenceLength:I,maxSequenceLength:x,inputHiddenSize:f,hiddenSize:y,vHiddenSize:b,headSize:Math.floor(y/t.numHeads),vHeadSize:Math.floor(b/t.numHeads),numHeads:t.numHeads,isUnidirectional:!1,pastPresentShareBuffer:!1,maskFilterValue:t.maskFilterValue,maskType:C,scale:t.scale,broadcastResPosBias:!1,passPastInKv:!1,qkvFormat:1}},Co=e=>J({...e}),Vd=(e,t,r,a)=>{let n=Je(a),o=K("x",t.dataType,t.dims,n),u="threadMaxVector";n===2?u="max(threadMaxVector.x, threadMaxVector.y)":n===4&&(u="max(max(threadMaxVector.x, threadMaxVector.y), max(threadMaxVector.z, threadMaxVector.w))");let l=Ae(t.dataType),i=64,c=a/n;c<i?i=1:c/8<64&&(i=Math.ceil(c/8));let f=Math.ceil(a/n/i),y=m=>`
  const dInv: ${l} = 1 / ${a};
  const dComp = ${a/n};
  var<workgroup> wgMax: array<f32, ${i}>;
  var<workgroup> wgSum: array<f32, ${i}>;

  ${m.declareVariables(o)}
  @compute @workgroup_size(${i}, 1, 1)
  fn main(@builtin(workgroup_id) workgroup_id : vec3<u32>,
    @builtin(local_invocation_index) local_index : u32) {
    let localOffset = local_index * ${f};
    let offset: u32 = workgroup_id.x * dComp + localOffset;

    var threadMaxVector = ${qe("f32",n,"-3.402823e+38f")};
    for (var i: u32 = 0; i < ${f} && i + localOffset < dComp; i++) {
      threadMaxVector = max(${nt(l,n,"x[offset + i]")}, threadMaxVector);
    }
    wgMax[local_index] = ${u};
    workgroupBarrier();

    var maxValue = -3.402823e+38f;
    for (var i = 0u; i < ${i}; i++) {
      maxValue = max(wgMax[i], maxValue);
    }

    var sumVector = ${qe("f32",n,"0")};
    for (var i: u32 = 0; i < ${f} && i + localOffset < dComp; i++) {
      sumVector += exp(${nt(l,n,"x[offset + i]")} - maxValue);
    }
    wgSum[local_index] = ${at("sumVector",n)};
    workgroupBarrier();

    var sum: f32 = 0;
    for (var i = 0u; i < ${i}; i++) {
      sum += wgSum[i];
    }

    if (sum == 0) {
      for (var i: u32 = 0; i < ${f} && i + localOffset < dComp; i++) {
        x[offset + i] = ${qe(l,n,"dInv")};
      }
    } else {
      for (var i: u32 = 0; i < ${f} && i + localOffset < dComp; i++) {
        let f32input = ${nt(l,n,"x[offset + i]")};
        x[offset + i] = ${o.type.value}(exp(f32input - maxValue) / sum);
      }
    }
  }`;e.compute({name:"AttentionProbsSoftmax",shaderCache:{hint:`${a}`},getShaderSource:y,getRunData:()=>({outputs:[],dispatchGroup:{x:r}})},{inputs:[t],outputs:[]})},Hd=(e,t,r,a,n,o)=>{let u=[n.batchSize,n.numHeads,n.sequenceLength,n.kvSequenceLength+n.pastSequenceLength],l=o.scale===0?1/Math.sqrt(n.headSize):o.scale,i=Ae(t.dataType),c=Je(n.headSize),f=W("q",t.dataType,t.dims,c),y=W("key",r.dataType,r.dims,c),m=K("output",t.dataType,u),b=n.headSize/c,w=n.sequenceLength,$=n.totalSequenceLength,I=b,x=12,C={x:Math.ceil(n.totalSequenceLength/x),y:Math.ceil(n.sequenceLength/x),z:n.batchSize*n.numHeads},P=[t,r],E=T=>`
  const M: u32 = ${w}u;
  const N: u32 = ${$}u;
  const K: u32 = ${I}u;
  const alpha: ${i} = ${l};
  const beta: ${i} = 1.0;
  const TILE_SIZE = ${x}u;

  var<workgroup> tileQ: array<${f.type.storage}, ${x*x}>;
  var<workgroup> tileK: array<${f.type.storage}, ${x*x}>;

  ${T.declareVariables(f,y,m)}

  @compute @workgroup_size(${x}, ${x}, 1)
  fn main(@builtin(workgroup_id) workgroup_id : vec3<u32>,
   @builtin(local_invocation_id) local_id : vec3<u32>, @builtin(local_invocation_index) local_index : u32) {
   let global_idx = (workgroup_id.z * ${C.x*C.y}u +
          workgroup_id.y * ${C.x}u + workgroup_id.x) * ${x*x}u + local_index;

    // x holds the N and y holds the M
    let headIdx = workgroup_id.z;
    let m = workgroup_id.y * TILE_SIZE;
    let n = workgroup_id.x * TILE_SIZE;
    let lm = m + local_id.y;
    let ln = n + local_id.x;

    let qOffset = ${n.sequenceLength*b} * headIdx + m * K;
    let kOffset = ${n.kvSequenceLength*b} * headIdx + n * K;

    var value = ${qe(i,c)};
    for (var w: u32 = 0u; w < K; w += TILE_SIZE) {
      if (m + local_id.y < M && w + local_id.x < K) {
        tileQ[TILE_SIZE * local_id.y + local_id.x] = q[qOffset + local_id.y * K + w + local_id.x];
      }
      if (n + local_id.y < N && w + local_id.x < K) {
        tileK[TILE_SIZE * local_id.y + local_id.x] = key[kOffset + local_id.y * K + w + local_id.x];
      }
      workgroupBarrier();

      for (var k: u32 = 0u; k<TILE_SIZE && w+k < K; k++) {
        value += tileQ[TILE_SIZE * local_id.y + k] * tileK[TILE_SIZE * local_id.x + k];
      }

      workgroupBarrier();
    }

    let headOffset = headIdx * M * N;
    if (lm < M && ln < N) {
      let outputIdx = headOffset + lm * N + ln;
      output[outputIdx] = ${at("value",c)} * alpha;
    }
  }`,z=e.compute({name:"AttentionProbs",shaderCache:{hint:JSON.stringify(n)},getRunData:()=>({outputs:[{dims:u,dataType:t.dataType,gpuDataType:0}],dispatchGroup:C}),getShaderSource:E},{inputs:P,outputs:[-1]})[0];return Vd(e,z,n.batchSize*n.numHeads*n.sequenceLength,n.totalSequenceLength),z},Ld=(e,t,r,a)=>{let n=[a.batchSize,a.sequenceLength,a.vHiddenSize],o=W("probs",t.dataType,t.dims),u=W("v",r.dataType,r.dims),l=K("output",t.dataType,n),i=Ae(t.dataType),c=12,f={x:Math.ceil(a.vHeadSize/c),y:Math.ceil(a.sequenceLength/c),z:a.batchSize*a.numHeads},y=m=>`
  const M: u32 = ${a.sequenceLength}u;
  const N: u32 = ${a.vHeadSize}u;
  const K: u32 = ${a.totalSequenceLength}u;
  const numHeads: u32 = ${a.numHeads}u;
  const TILE_SIZE = ${c}u;

  var<workgroup> tileQ: array<${o.type.storage}, ${c*c}>;
  var<workgroup> tileK: array<${o.type.storage}, ${c*c}>;

  ${m.declareVariables(o,u,l)}

  @compute @workgroup_size(${c}, ${c}, 1)
  fn main(@builtin(workgroup_id) workgroup_id : vec3<u32>,
   @builtin(local_invocation_id) local_id : vec3<u32>, @builtin(local_invocation_index) local_index : u32) {
   let global_idx = (workgroup_id.z * ${f.x*f.y}u +
          workgroup_id.y * ${f.x}u + workgroup_id.x) * ${c*c}u + local_index;

   let headIdx = workgroup_id.z;
   let m = workgroup_id.y * TILE_SIZE + local_id.y;
   let n = workgroup_id.x * TILE_SIZE + local_id.x;

   let offsetA = headIdx * (M * K) + m * K;
   let offsetB = headIdx * (N * K) + n;

   var value = ${i}(0);
   for (var w: u32 = 0u; w < K; w += TILE_SIZE) {
     if (m < M && w + local_id.x < K) {
       tileQ[TILE_SIZE * local_id.y + local_id.x] = probs[offsetA + w + local_id.x];
     }
     if (n < N && w + local_id.y < K) {
       tileK[TILE_SIZE * local_id.y + local_id.x] = v[offsetB + (w + local_id.y) * N];
     }
     workgroupBarrier();
     for (var k: u32 = 0u; k<TILE_SIZE && w+k < K; k++) {
       value += tileQ[TILE_SIZE * local_id.y + k] * tileK[TILE_SIZE * k + local_id.x];
     }
     workgroupBarrier();
   }

   // we need to transpose output from BNSH_v to BSND_v
   let batchIdx = workgroup_id.z / ${a.numHeads};
   let currentBatchHeadNumber = workgroup_id.z % ${a.numHeads};
   let headOffset = (batchIdx * M * ${a.numHeads} + currentBatchHeadNumber) * ${a.vHeadSize};
   if (m < M && n < N) {
     let outputIdx = batchIdx * ${a.sequenceLength*a.vHiddenSize} + m * ${a.vHiddenSize}
       + currentBatchHeadNumber * ${a.vHeadSize} + n;
     output[outputIdx] = value;
   }
  }`;return e.compute({name:"AttentionScore",shaderCache:{hint:JSON.stringify(a)},getRunData:()=>({outputs:[{dims:n,dataType:t.dataType,gpuDataType:0}],dispatchGroup:f}),getShaderSource:y},{inputs:[t,r],outputs:[0]})[0]},sn=(e,t,r,a,n,o,u,l,i,c,f)=>{let y=Hd(e,t,r,i,c,f);Ld(e,y,a,c)},Gd=(e,t)=>{let r=[t.batchSize,t.numHeads,t.sequenceLength,t.headSize],a=Ae(e.inputs[0].dataType),n=t.sequenceLength,o=t.inputHiddenSize,u=t.headSize,l=12,i={x:Math.ceil(t.headSize/l),y:Math.ceil(t.sequenceLength/l),z:t.batchSize*t.numHeads},c=()=>`
  const M: u32 = ${n}u;
  const K: u32 = ${o}u;
  const N: u32 = ${u}u;
  const numHeads: u32 = ${t.numHeads};
  const ldb = ${t.hiddenSize+t.hiddenSize+t.vHiddenSize}u;
  const TILE_SIZE = ${l}u;

  var<workgroup> tileInput: array<${a}, ${l*l}>;
  var<workgroup> tileWeightQ: array<${a}, ${l*l}>;
  var<workgroup> tileWeightK: array<${a}, ${l*l}>;
  var<workgroup> tileWeightV: array<${a}, ${l*l}>;

  @group(0) @binding(0) var<storage, read> input: array<${a}>;
  @group(0) @binding(1) var<storage, read> weight: array<${a}>;
  @group(0) @binding(2) var<storage, read> bias: array<${a}>;
  @group(0) @binding(3) var<storage, read_write> outputQ: array<${a}>;
  @group(0) @binding(4) var<storage, read_write> outputK: array<${a}>;
  @group(0) @binding(5) var<storage, read_write> outputV: array<${a}>;

  @compute @workgroup_size(${l}, ${l}, 1)
  fn main(@builtin(workgroup_id) workgroup_id : vec3<u32>,
   @builtin(local_invocation_id) local_id : vec3<u32>, @builtin(local_invocation_index) local_index : u32) {
   let global_idx = (workgroup_id.z * ${i.x*i.y}u +
          workgroup_id.y * ${i.x}u + workgroup_id.x) * ${l*l}u + local_index;

    let batchIndex = workgroup_id.z / ${t.numHeads};
    let headNumber = workgroup_id.z % ${t.numHeads};
    let m = workgroup_id.y * TILE_SIZE + local_id.y;
    let n = workgroup_id.x * TILE_SIZE + local_id.x;

    let inputOffset = batchIndex * (M * K) + m * K;
    let biasOffsetQ = headNumber * ${t.headSize};
    let biasOffsetK = ${t.hiddenSize} + biasOffsetQ;
    let biasOffsetV = ${t.hiddenSize} + biasOffsetK;

    var valueQ = ${a}(0);
    var valueK = ${a}(0);
    var valueV = ${a}(0);
    for (var w: u32 = 0u; w < K; w += TILE_SIZE) {
      if (m < M && w + local_id.x < K) {
        tileInput[TILE_SIZE * local_id.y + local_id.x] = input[inputOffset + w + local_id.x];
      }
      if (n < N && w + local_id.y < K) {
        let offset = n + (w + local_id.y) * ldb;
        tileWeightQ[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetQ + offset];
        tileWeightK[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetK + offset];
        tileWeightV[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetV + offset];
      }
      workgroupBarrier();
      for (var k: u32 = 0u; k<TILE_SIZE && w+k < K; k++) {
        let inputTileOffset = TILE_SIZE * local_id.y + k;
        let weightTileOffset = TILE_SIZE * k + local_id.x;
        valueQ += tileInput[inputTileOffset] * tileWeightQ[weightTileOffset];
        valueK += tileInput[inputTileOffset] * tileWeightK[weightTileOffset];
        valueV += tileInput[inputTileOffset] * tileWeightV[weightTileOffset];
      }

      workgroupBarrier();
    }

    let headOffset = (m * N + n) % ${t.headSize};
    valueQ += bias[headOffset + biasOffsetQ];
    valueK += bias[headOffset + biasOffsetK];
    valueV += bias[headOffset + biasOffsetV];

    let offset = workgroup_id.z * M * N;
    if (m < M && n < N) {
      let outputIdx = offset + m * N + n;
      outputQ[outputIdx] = valueQ;
      outputK[outputIdx] = valueK;
      outputV[outputIdx] = valueV;
    }
  }`,f=[e.inputs[0],e.inputs[1],e.inputs[2]];return e.compute({name:"AttentionPrepare",shaderCache:{hint:JSON.stringify(t)},getRunData:()=>({outputs:[{dims:r,dataType:e.inputs[0].dataType,gpuDataType:0},{dims:r,dataType:e.inputs[0].dataType,gpuDataType:0},{dims:r,dataType:e.inputs[0].dataType,gpuDataType:0}],dispatchGroup:i}),getShaderSource:c},{inputs:f,outputs:[-1,-1,-1]})},Io=(e,t)=>{let r=Nd(e.inputs,t),[a,n,o]=Gd(e,r);return sn(e,a,n,o,e.inputs[4],void 0,void 0,void 0,e.inputs[5],r,t)}});var Fd,qd,jd,Eo,Ao=q(()=>{"use strict";dt();ye();Re();be();Fd=(e,t)=>{if(!e||e.length!==5)throw new Error("BatchNormalization requires 5 inputs");let r=(a,n,o)=>{let u=n.length;if(u!==a.length)throw new Error(`${o}: num dimensions != ${u}`);n.forEach((l,i)=>{if(l!==a[i])throw new Error(`${o}: dim[${i}] do not match`)})};if(e[0].dims.length>1){let a=t.format==="NHWC"?t.spatial?e[0].dims.slice(-1):e[0].dims.slice(-1).concat(e[0].dims.slice(1,e[0].dims.length-1)):e[0].dims.slice(1,t.spatial?2:void 0);r(e[1].dims,a,"Invalid input scale"),r(e[2].dims,a,"Invalid input B"),r(e[3].dims,a,"Invalid input mean"),r(e[4].dims,a,"Invalid input var")}else r(e[1].dims,[1],"Invalid input scale"),r(e[2].dims,[1],"Invalid input B"),r(e[3].dims,[1],"Invalid input mean"),r(e[4].dims,[1],"Invalid input var")},qd=(e,t)=>{let{epsilon:r,spatial:a,format:n}=t,o=e[0].dims,u=a?Je(o[o.length-1]):1,l=n==="NHWC"&&o.length>1?u:1,i=D.size(o)/u,c=Pe(o.length)&&a,f=c?o.length:o,y=W("x",e[0].dataType,e[0].dims,u),m=W("scale",e[1].dataType,e[1].dims,l),b=W("bias",e[2].dataType,e[2].dims,l),w=W("inputMean",e[3].dataType,e[3].dims,l),$=W("inputVar",e[4].dataType,e[4].dims,l),I=K("y",e[0].dataType,f,u),x=()=>{let P="";if(a)P=`let cOffset = ${o.length===1?"0u":n==="NHWC"?`outputIndices[${o.length-1}] / ${u}`:"outputIndices[1]"};`;else if(n==="NCHW")P=`
            ${I.indicesSet("outputIndices","0","0")}
            let cOffset = ${I.indicesToOffset("outputIndices")};`;else{P=`var cIndices = ${m.type.indices}(0);
                       cIndices[0] = outputIndices[${o.length-1}];`;for(let E=1;E<m.rank;E++)P+=`cIndices[${E}] = outputIndices[${E}];`;P+=`let cOffset = ${m.indicesToOffset("cIndices")};`}return P},C=P=>`
  const epsilon = ${r};
  ${P.registerUniform("outputSize","u32").declareVariables(y,m,b,w,$,I)}
  ${P.mainStart()}
  ${P.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
    var outputIndices = ${I.offsetToIndices(`global_idx * ${u}`)};
    ${x()}
    let scale = ${m.getByOffset("cOffset")};
    let bias = ${b.getByOffset("cOffset")};
    let inputMean = ${w.getByOffset("cOffset")};
    let inputVar = ${$.getByOffset("cOffset")};
    let x = ${y.getByOffset("global_idx")};
    let value = (x - inputMean) / sqrt(inputVar + epsilon) * scale + bias;
    ${I.setByOffset("global_idx","value")}
  }`;return{name:"BatchNormalization",shaderCache:{hint:`${t.epsilon}_${t.format}_${a}_${u}`,inputDependencies:c?["rank","type","type","type","type"]:void 0},getShaderSource:C,getRunData:()=>({outputs:[{dims:e[0].dims,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(i/64)},programUniforms:c?[{type:"uint32",data:i},...Y(o)]:[{type:"uint32",data:i}]})}},jd=e=>J(e),Eo=(e,t)=>{let{inputs:r,outputCount:a}=e,n=jd({...t,outputCount:a});if(Oe.webgpu.validateInputContent&&Fd(r,n),t.trainingMode)throw new Error("BatchNormalization trainingMode is not supported yet.");e.compute(qd(r,n))}});var Kd,Yd,To,Oo=q(()=>{"use strict";ye();be();Kd=e=>{if(e[0].dims.length!==3)throw new Error("input should have 3 dimensions");if(![320,640,1280].includes(e[0].dims[2]))throw new Error("number of channels should be 320, 640 or 1280");if(e[1].dims.length!==1)throw new Error("bias is expected to have 1 dimensions");if(e[0].dims[2]!==e[1].dims[0])throw new Error("last dimension of input and bias are not the same")},Yd=e=>{let t=e[0].dims,r=e[0].dims[2],a=D.size(t)/4,n=e[0].dataType,o=W("input",n,t,4),u=W("bias",n,[r],4),l=W("residual",n,t,4),i=K("output",n,t,4);return{name:"BiasAdd",getRunData:()=>({outputs:[{dims:t,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(a/64)}}),getShaderSource:f=>`
  const channels = ${r}u / 4;
  ${f.declareVariables(o,u,l,i)}

  ${f.mainStart()}
    ${f.guardAgainstOutOfBoundsWorkgroupSizes(a)}
    let value = ${o.getByOffset("global_idx")}
      + ${u.getByOffset("global_idx % channels")} + ${l.getByOffset("global_idx")};
    ${i.setByOffset("global_idx","value")}
  }`}},To=e=>{Kd(e.inputs),e.compute(Yd(e.inputs))}});var Zd,Te,ko,Ro,Po,Bo,Mo,zo,Do,Wo,Uo,Xd,No,Vo,Ho,Lo,un,Go,ln,Fo,qo,jo,Ko,Yo,Zo,Xo,Jo,Qo,es,ts,rs,ns,as,is,os,ss,ta=q(()=>{"use strict";De();ye();Re();be();Zd=(e,t,r,a,n,o)=>{let u=Math.ceil(t/4),l="";typeof n=="string"?l=`${n}(a)`:l=n("a");let i=W("inputData",r,[u],4),c=K("outputData",a,[u],4);return`
      ${e.registerUniform("vec_size","u32").declareVariables(i,c)}

  ${o??""}

  ${e.mainStart()}
    ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}

    let a = ${i.getByOffset("global_idx")};
    ${c.setByOffset("global_idx",l)}
  }`},Te=(e,t,r,a,n,o=e.dataType)=>({name:t,shaderCache:{hint:n,inputDependencies:["type"]},getShaderSource:u=>Zd(u,D.size(e.dims),e.dataType,o,r,a),getRunData:u=>({outputs:[{dims:e.dims,dataType:o}],dispatchGroup:{x:Math.ceil(D.size(u[0].dims)/64/4)},programUniforms:[{type:"uint32",data:Math.ceil(D.size(e.dims)/4)}]})}),ko=e=>{e.compute(Te(e.inputs[0],"Abs","abs"))},Ro=e=>{e.compute(Te(e.inputs[0],"Acos","acos"))},Po=e=>{e.compute(Te(e.inputs[0],"Acosh","acosh"))},Bo=e=>{e.compute(Te(e.inputs[0],"Asin","asin"))},Mo=e=>{e.compute(Te(e.inputs[0],"Asinh","asinh"))},zo=e=>{e.compute(Te(e.inputs[0],"Atan","atan"))},Do=e=>{e.compute(Te(e.inputs[0],"Atanh","atanh"))},Wo=e=>J(e),Uo=(e,t)=>{let r;switch(t.to){case 10:r="vec4<f16>";break;case 1:r="vec4<f32>";break;case 12:r="vec4<u32>";break;case 6:r="vec4<i32>";break;case 9:r="vec4<bool>";break;default:throw new RangeError(`not supported type (specified in attribute 'to' from 'Cast' operator): ${t.to}`)}e.compute(Te(e.inputs[0],"Cast",r,void 0,t.cacheKey,t.to))},Xd=e=>{let t=e.length>=2?e[1].getFloat32Array()[0]:rn,r=e.length>=3?e[2].getFloat32Array()[0]:nn;return J({min:t,max:r})},No=(e,t)=>{let r=e.inputs.length===1?t:Xd(e.inputs),a=Ae(e.inputs[0].dataType);e.compute(Te(e.inputs[0],"Clip",n=>`clamp(${n}, clip_min_, clip_max_)`,`
    const clip_min_: vec4<${a}> = vec4(${a}(${r.min}));
    const clip_max_: vec4<${a}> = vec4(${a}(${r.max}));
`,r.cacheKey),{inputs:[0]})},Vo=e=>{e.compute(Te(e.inputs[0],"Ceil","ceil"))},Ho=e=>{e.compute(Te(e.inputs[0],"Cos","cos"))},Lo=e=>{e.compute(Te(e.inputs[0],"Cosh","cosh"))},un=e=>J(e),Go=(e,t)=>{e.compute(Te(e.inputs[0],"Elu",r=>`elu_vf32(${r})`,`
  const elu_alpha_: f32 = f32(${t.alpha});

  fn elu_f32(a: f32) -> f32 {
  return select((exp(a) - 1.0) * elu_alpha_, a, a >= 0.0);
  }

  fn elu_vf32(v: vec4<f32>) -> vec4<f32> {
  return vec4(elu_f32(v.x), elu_f32(v.y), elu_f32(v.z), elu_f32(v.w));
  }`,t.cacheKey))},ln=(e,t="f32")=>`
const r0: ${t} = 0.3275911;
const r1: ${t} = 0.254829592;
const r2: ${t} = -0.284496736;
const r3: ${t} = 1.421413741;
const r4: ${t} = -1.453152027;
const r5: ${t} = 1.061405429;

fn erf_vf32(v: ${e}) -> ${e} {
  let absv = abs(v);
  let x = 1.0 / (1.0 + r0 * absv);
  return sign(v) * (1.0 - ((((r5 * x + r4) * x + r3) * x + r2) * x + r1) * x * exp(-absv * absv));
}`,Fo=e=>{let t=Ae(e.inputs[0].dataType);e.compute(Te(e.inputs[0],"Erf",r=>`erf_vf32(${r})`,ln(`vec4<${t}>`,t)))},qo=e=>{e.compute(Te(e.inputs[0],"Exp","exp"))},jo=e=>{e.compute(Te(e.inputs[0],"Floor","floor"))},Ko=e=>{let t=Ae(e.inputs[0].dataType);e.compute(Te(e.inputs[0],"Gelu",r=>`0.5 * ${r} * (1.0 + erf_vf32(${r} * 0.7071067811865475))`,ln(`vec4<${t}>`,t)))},Yo=(e,t)=>{e.compute(Te(e.inputs[0],"LeakyRelu",r=>`select(leaky_relu_alpha_ * ${r}, ${r}, ${r} >= vec4<f32>(0.0))`,`const leaky_relu_alpha_: f32 = f32(${t.alpha});`,t.cacheKey))},Zo=e=>{e.compute(Te(e.inputs[0],"Not",t=>`!${t}`))},Xo=e=>{e.compute(Te(e.inputs[0],"Neg",t=>`-${t}`))},Jo=e=>{e.compute(Te(e.inputs[0],"Reciprocal",t=>`1.0/${t}`))},Qo=e=>{e.compute(Te(e.inputs[0],"Relu",t=>`select(vec4<f32>(0.0), ${t}, ${t} > vec4<f32>(0.0))`))},es=e=>{e.compute(Te(e.inputs[0],"Sigmoid",t=>`(1.0 / (1.0 + exp(-${t})))`))},ts=e=>{e.compute(Te(e.inputs[0],"Sin","sin"))},rs=e=>{e.compute(Te(e.inputs[0],"Sinh","sinh"))},ns=e=>{e.compute(Te(e.inputs[0],"Sqrt","sqrt"))},as=e=>{e.compute(Te(e.inputs[0],"Tan","tan"))},is=e=>{e.compute(Te(e.inputs[0],"Tanh","tanh"))},os=(e,t)=>(e.compute(Te(e.inputs[0],"ThresholdedRelu",r=>`select(vec4<f32>(0.0), ${r}, ${r} > thresholded_relu_alpha_)`,`const thresholded_relu_alpha_: vec4<f32> = vec4<f32>(${t.alpha});`,t.cacheKey)),0),ss=e=>{e.compute(Te(e.inputs[0],"Log","log"))}});var Qd,ec,us,ls=q(()=>{"use strict";ye();be();ta();Qd=e=>{if(e[0].dims.length!==3)throw new Error("input should have 3 dimensions");if(![2560,5120,10240].includes(e[0].dims[2]))throw new Error("hidden state should be 2560, 5120 or 10240");if(e[1].dims.length!==1)throw new Error("bias is expected to have 1 dimensions");if(e[0].dims[2]!==e[1].dims[0])throw new Error("last dimension of input and bias are not the same")},ec=e=>{let t=e[0].dims.slice();t[2]=t[2]/2;let r=W("input",e[0].dataType,e[0].dims,4),a=W("bias",e[0].dataType,[e[0].dims[2]],4),n=K("output",e[0].dataType,t,4),o=D.size(t)/4,u=Ae(e[0].dataType);return{name:"BiasSplitGelu",getRunData:()=>({outputs:[{dims:t,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(o/64)}}),getShaderSource:i=>`
  const M_SQRT2 = sqrt(2.0);
  const halfChannels = ${e[0].dims[2]/4/2}u;

  ${i.declareVariables(r,a,n)}

  ${ln(`vec4<${u}>`,u)}

  ${i.mainStart()}
    ${i.guardAgainstOutOfBoundsWorkgroupSizes(o)}
    let biasIdx = global_idx % halfChannels;
    let batchIndex = global_idx / halfChannels;
    let inputOffset = biasIdx + batchIndex * halfChannels * 2;
    let valueLeft = input[inputOffset] + bias[biasIdx];
    let valueRight = input[inputOffset + halfChannels] + bias[biasIdx + halfChannels];
    let geluRight = valueRight * 0.5 * (erf_vf32(valueRight / M_SQRT2) + 1);

    ${n.setByOffset("global_idx","valueLeft * geluRight")}
  }`}},us=e=>{Qd(e.inputs),e.compute(ec(e.inputs))}});var tc,rc,gt,ds,cs,ps,fs,ms,hs,gs,ys,bs,ws,vs=q(()=>{"use strict";De();ye();be();tc=(e,t,r,a,n,o,u,l,i,c,f,y,m)=>{let b,w;typeof l=="string"?b=w=(T,H)=>`${l}((${T}),(${H}))`:typeof l=="function"?b=w=l:(b=l.scalar,w=l.vector);let $=y?t.length:t,I=y?r.length:r,x=y?a.length:a,C=K("outputData",f,x,4),P=W("aData",i,$,4),E=W("bData",c,I,4),z;if(n)if(o){let T=D.size(t)===1,H=D.size(r)===1,N=t.length>0&&t[t.length-1]%4===0,G=r.length>0&&r[r.length-1]%4===0;T||H?z=C.setByOffset("global_idx",w(T?`${P.type.value}(${P.getByOffset("0")}.x)`:P.getByOffset("global_idx"),H?`${E.type.value}(${E.getByOffset("0")}.x)`:E.getByOffset("global_idx"))):z=`
            let outputIndices = ${C.offsetToIndices("global_idx * 4u")};
            let offsetA = ${P.broadcastedIndicesToOffset("outputIndices",C)};
            let offsetB = ${E.broadcastedIndicesToOffset("outputIndices",C)};
            ${C.setByOffset("global_idx",w(u||N?P.getByOffset("offsetA / 4u"):`${P.type.value}(${P.getByOffset("offsetA / 4u")}[offsetA % 4u])`,u||G?E.getByOffset("offsetB / 4u"):`${E.type.value}(${E.getByOffset("offsetB / 4u")}[offsetB % 4u])`))}
          `}else z=C.setByOffset("global_idx",w(P.getByOffset("global_idx"),E.getByOffset("global_idx")));else{if(!o)throw new Error("no necessary to use scalar implementation for element-wise binary op implementation.");let T=(H,N,G="")=>{let re=`aData[indexA${N}][componentA${N}]`,B=`bData[indexB${N}][componentB${N}]`;return`
            let outputIndices${N} = ${C.offsetToIndices(`global_idx * 4u + ${N}u`)};
            let offsetA${N} = ${P.broadcastedIndicesToOffset(`outputIndices${N}`,C)};
            let offsetB${N} = ${E.broadcastedIndicesToOffset(`outputIndices${N}`,C)};
            let indexA${N} = offsetA${N} / 4u;
            let indexB${N} = offsetB${N} / 4u;
            let componentA${N} = offsetA${N} % 4u;
            let componentB${N} = offsetB${N} % 4u;
            ${H}[${N}] = ${G}(${b(re,B)});
          `};f===9?z=`
            var data = vec4<u32>(0);
            ${T("data",0,"u32")}
            ${T("data",1,"u32")}
            ${T("data",2,"u32")}
            ${T("data",3,"u32")}
            outputData[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));`:z=`
            ${T("outputData[global_idx]",0)}
            ${T("outputData[global_idx]",1)}
            ${T("outputData[global_idx]",2)}
            ${T("outputData[global_idx]",3)}
          `}return`
        ${e.registerUniform("vec_size","u32").declareVariables(P,E,C)}

        ${m??""}

        ${e.mainStart()}
        ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}
        ${z}
      }`},rc=(e,t,r,a,n,o,u=r.dataType)=>{let l=!D.areEqual(r.dims,a.dims),i=r.dims,c=D.size(r.dims),f=!1,y=!1,m=[l];if(l){let w=ct.calcShape(r.dims,a.dims,!1);if(!w)throw new Error("Can't perform binary op on the given tensors");i=w,c=D.size(i);let $=D.size(r.dims)===1,I=D.size(a.dims)===1,x=r.dims.length>0&&r.dims[r.dims.length-1]%4===0,C=a.dims.length>0&&a.dims[a.dims.length-1]%4===0;m.push($),m.push(I),m.push(x),m.push(C);let P=1;for(let E=1;E<i.length;E++){let z=r.dims[r.dims.length-E]??1,T=a.dims[a.dims.length-E]??1;if(z===T)P*=z;else break}P%4===0?(y=!0,f=!0):($||I||x||C)&&(f=!0)}else f=!0;m.push(f);let b=Pe(r.dims.length)&&Pe(a.dims.length)&&Pe(i.length);return{name:e,shaderCache:{hint:t+m.map(w=>w.toString()).join("_"),inputDependencies:b?["rank","rank"]:["dims","dims"]},getShaderSource:w=>tc(w,r.dims,a.dims,i,f,l,y,n,r.dataType,a.dataType,u,b,o),getRunData:()=>({outputs:[{dims:i,dataType:u}],dispatchGroup:{x:Math.ceil(c/64/4)},programUniforms:b?[{type:"uint32",data:Math.ceil(D.size(i)/4)},...Y(r.dims),...Y(a.dims),...Y(i)]:[{type:"uint32",data:Math.ceil(D.size(i)/4)}]})}},gt=(e,t,r,a,n,o)=>{e.compute(rc(t,n??"",e.inputs[0],e.inputs[1],r,a,o))},ds=e=>{gt(e,"Add",(t,r)=>`${t}+${r}`)},cs=e=>{gt(e,"Div",(t,r)=>`${t}/${r}`)},ps=e=>{gt(e,"Equal",{scalar:(t,r)=>`u32(${t}==${r})`,vector:(t,r)=>`vec4<u32>(${t}==${r})`},void 0,void 0,9)},fs=e=>{gt(e,"Mul",(t,r)=>`${t}*${r}`)},ms=e=>{let t=W("input",e.inputs[0].dataType,e.inputs[0].dims).type.value;gt(e,"Pow",{scalar:(a,n)=>`pow_custom(${a},${n})`,vector:(a,n)=>`pow_vector_custom(${a},${n})`},`
    fn pow_custom(a : ${t}, b : ${t}) -> ${t} {
      if (b == ${t}(0.0)) {
        return ${t}(1.0);
      } else if (a < ${t}(0.0) && f32(b) != floor(f32(b))) {
        return ${t}(pow(f32(a), f32(b))); // NaN
      }
      return select(sign(a), ${t}(1.0), round(f32(abs(b) % ${t}(2.0))) != 1.0) * ${t}(${t==="i32"?"round":""}(pow(f32(abs(a)), f32(b))));
    }
    fn pow_vector_custom(a : vec4<${t}>, b : vec4<${t}>) -> vec4<${t}> {
      // TODO: implement vectorized pow
      return vec4<${t}>(pow_custom(a.x, b.x), pow_custom(a.y, b.y), pow_custom(a.z, b.z), pow_custom(a.w, b.w));
    }
      `)},hs=e=>{gt(e,"Sub",(t,r)=>`${t}-${r}`)},gs=e=>{gt(e,"Greater",{scalar:(t,r)=>`u32(${t}>${r})`,vector:(t,r)=>`vec4<u32>(${t}>${r})`},void 0,void 0,9)},ys=e=>{gt(e,"Less",{scalar:(t,r)=>`u32(${t}<${r})`,vector:(t,r)=>`vec4<u32>(${t}<${r})`},void 0,void 0,9)},bs=e=>{gt(e,"GreaterOrEqual",{scalar:(t,r)=>`u32(${t}>=${r})`,vector:(t,r)=>`vec4<u32>(${t}>=${r})`},void 0,void 0,9)},ws=e=>{gt(e,"LessOrEqual",{scalar:(t,r)=>`u32(${t}<=${r})`,vector:(t,r)=>`vec4<u32>(${t}<=${r})`},void 0,void 0,9)}});var ac,ic,oc,sc,$s,Ss,xs=q(()=>{"use strict";ye();Re();be();ac=e=>{if(!e||e.length<1)throw new Error("too few inputs");let t=e[0].dataType,r=e[0].dims.length;for(let a of e){if(a.dataType!==t)throw new Error("input tensors should be one type");if(a.dims.length!==r)throw new Error("input tensors should have the same shape")}},ic=(e,t)=>`
  fn calculateInputIndex(index: u32) -> u32 {
    let sizeInConcatAxis = array<u32, ${e}u>(${t});
    for (var i: u32 = 0u; i < ${e}; i += 1u ) {
      if (index < sizeInConcatAxis[i]) {
        return i;
      }
    }
    return ${e}u;
  }`,oc=(e,t)=>{let r=e.length,a=[];for(let n=0;n<r;++n){let o=t.setByOffset("global_idx",e[n].getByIndices("indices"));r===1?a.push(o):n===0?a.push(`if (inputIndex == ${n}u) { ${o} }`):n===r-1?a.push(`else { ${o} }`):a.push(`else if (inputIndex == ${n}) { ${o} }`)}return a.join(`
`)},sc=(e,t)=>{let r=e[0].dims.slice();if(t>=r.length||t<-1*r.length)throw new Error("axis specified for concat doesn't match input dimensionality");let a=t<0?r.length+t:t,n=r.slice(0);for(let E=1;E<e.length;E++){let z=e[E].dims.slice();for(let T=0;T<r.length;T++)if(T===a)n[a]+=z[T];else if(r[T]!==z[T])throw new Error("non concat dimensions must match")}let o=D.size(n),u=new Array(e.length),l=new Array(e.length),i=e[0].dataType,c=0,f=[],y=[],m=[],b=[{type:"uint32",data:o}];for(let E=0;E<e.length;++E)c+=e[E].dims[a],u[E]=c,m.push(Pe(e[E].dims.length)),y.push(m[E]?e[E].dims.length:e[E].dims),l[E]=W(`input${E}`,i,y[E]),f.push(m[E]?"rank":"dims"),b.push({type:"uint32",data:u[E]});for(let E=0;E<e.length;++E)m[E]&&b.push(...Y(e[E].dims));let w=Pe(n.length);w&&b.push(...Y(n));let $=w?n.length:n,I=K("output",i,$),x=I.indicesGet("indices",a),C=Array.from(Array(u.length).keys()).map(E=>`uniforms.sizeInConcatAxis${E}`).join(","),P=E=>`

  ${(()=>{E.registerUniform("outputSize","u32");for(let z=0;z<e.length;z++)E.registerUniform(`sizeInConcatAxis${z}`,"u32");return E.declareVariables(...l,I)})()}

  ${ic(u.length,C)}

  ${E.mainStart()}
    ${E.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}

    var indices = ${I.offsetToIndices("global_idx")};

    let inputIndex = calculateInputIndex(${x});
    if (inputIndex != 0u) {
      let sizeInConcatAxis = array<u32, ${u.length}u>(${C});
      ${x} -= sizeInConcatAxis[inputIndex - 1u];
    }

    ${oc(l,I)}
  }`;return{name:"Concat",shaderCache:{hint:`${t}`,inputDependencies:f},getRunData:()=>({outputs:[{dims:n,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(o/64)},programUniforms:b}),getShaderSource:P}},$s=(e,t)=>{ac(e.inputs),e.compute(sc(e.inputs,t.axis))},Ss=e=>J({axis:e.axis})});var Et,dn,Nt=q(()=>{"use strict";ye();Et=(e,t)=>{switch(e.activation){case"Relu":return{activationFunction:"",applyActivation:`value = max(value, ${t}(0.0));`};case"Sigmoid":return{activationFunction:"",applyActivation:`value = (${t}(1.0) / (${t}(1.0) + exp(-value)));`};case"Clip":return{activationFunction:`const clip_min_=${t}(${e.clipMin});const clip_max_=${t}(${e.clipMax});`,applyActivation:"value = clamp(value, clip_min_, clip_max_);"};default:return{activationFunction:"",applyActivation:""}}},dn=e=>{let t=e?.activation||"";if(t==="Clip"){let[r,a]=e?.activation_params||[rn,nn];return{activation:t,clipMax:a,clipMin:r,activationCacheKey:`${t}:${r},${a}`}}return{activation:t,activationCacheKey:t}}});var Ve,cn,pn=q(()=>{"use strict";Ve=(e,t)=>{switch(e){case 1:return t;case 2:return`vec2<${t}>`;case 3:return`vec3<${t}>`;case 4:return`vec4<${t}>`;default:throw new Error(`${e}-component is not supported.`)}},cn=e=>`
      ${e?"value = value + getBiasByOutputCoords(coords);":""}
      `});var fn,ra=q(()=>{"use strict";fn=e=>`
fn getIndexFromCoords4D(coords : vec4<i32>, shape : vec4<i32>) -> i32 {
  return dot(coords, vec4<i32>(
      shape.y * shape.z * shape.w, shape.z * shape.w, shape.w, 1));
}
fn getOutputIndexFromCoords(coords : vec4<i32>) -> i32 {
  return dot(coords, vec4<i32>(
    i32(${e}.x), i32(${e}.y), i32(${e}.z), 1));
}
`});var uc,lc,wr,_s,dc,vr,cc,mn,$r=q(()=>{"use strict";ye();be();Nt();pn();uc=(e,t)=>e?`
        mm_Asub[inputRow][inputCol] = mm_readA(batch,
          kStart + inputRow,
          globalRowStart / innerElementSize + inputCol${t?", batchIndices":""});
        `:`
        mm_Asub[inputRow][inputCol] = mm_readA(batch,
          globalRow + innerRow,
          kStart / innerElementSize + inputCol${t?", batchIndices":""});
        `,lc=(e,t)=>e?`
        let ACached0 = mm_Asub[k * innerElementSize][localRow];
        let ACached1 = mm_Asub[k * innerElementSize + 1][localRow];
        let ACached2 = mm_Asub[k * innerElementSize + 2][localRow];
        ${t===3?"":"let ACached3 = mm_Asub[k * innerElementSize + 3][localRow];"}
        for (var i = 0; i < rowPerThread; i = i + 1) {
          acc[i] = BCached0 * ACached0[i] + acc[i];
          acc[i] = BCached1 * ACached1[i] + acc[i];
          acc[i] = BCached2 * ACached2[i] + acc[i];
          ${t===3?"":"acc[i] = BCached3 * ACached3[i] + acc[i];"}
        }`:`
        for (var i = 0; i < rowPerThread; i = i + 1) {
          let ACached = mm_Asub[tileRow + i][k];
          acc[i] = BCached0 * ACached.x + acc[i];
          acc[i] = BCached1 * ACached.y + acc[i];
          acc[i] = BCached2 * ACached.z + acc[i];
          ${t===3?"":"acc[i] = BCached3 * ACached.w + acc[i];"}
        }`,wr=(e,t,r="f32",a,n=!1,o=32,u=!1,l=32)=>{let i=t[1]*e[1],c=t[0]*e[0],f=n?i:o,y=n?o:i,m=f/t[0],b=o/t[1];if(!((n&&m===4&&e[1]===4||!n&&(m===3||m===4))&&f%t[0]===0&&o%t[1]===0&&e[0]===4))throw new Error(`If transposeA ${n} is true, innerElementSize ${m} and workPerThread[1] ${e[1]} must be 4.
      Otherwise, innerElementSize ${m} must be 3 or 4.
  tileAWidth ${f} must be divisible by workgroupSize[0]${t[0]}. tileInner ${o} must be divisible by workgroupSize[1] ${t[1]}. colPerThread ${e[0]} must be 4.`);return`
var<workgroup> mm_Asub: array<array<vec${m}<${r}>, ${f/m}>, ${y}>;
var<workgroup> mm_Bsub: array<array<vec4<${r}>, ${c/e[0]}>, ${o}>;

const rowPerThread = ${e[1]};
const colPerThread = ${e[0]};
const innerElementSize = ${m};
const tileInner = ${o};

@compute @workgroup_size(${t[0]}, ${t[1]}, ${t[2]})
fn main(@builtin(local_invocation_id) localId : vec3<u32>,
        @builtin(global_invocation_id) globalId : vec3<u32>,
        @builtin(workgroup_id) workgroupId : vec3<u32>) {
  let localRow = i32(localId.y);
  let tileRow = localRow * rowPerThread;
  let tileCol = i32(localId.x);

  let globalRow =i32(globalId.y) * rowPerThread;
  let globalCol = i32(globalId.x);
  let batch = ${u?"0":"i32(globalId.z)"};
  ${a?`let batchIndices = ${a.offsetToIndices("u32(batch)")};`:""}
  let globalRowStart = i32(workgroupId.y) * ${i};

  let numTiles = ${u?`${Math.ceil(l/o)}`:"(uniforms.dimInner - 1) / tileInner + 1"};
  var kStart = ${u?`i32(globalId.z) * ${l}`:"0"};

  var acc: array<vec4<${r}>, rowPerThread>;

  // Loop over shared dimension.
  let tileRowB = localRow * ${b};
  for (var t = 0; t < numTiles; t = t + 1) {
      // Load one tile of A into local memory.
      for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
          let inputRow = tileRow + innerRow;
          let inputCol = tileCol;
          ${uc(n,a)}
      }

      // Load one tile of B into local memory.
      for (var innerRow = 0; innerRow < ${b}; innerRow = innerRow + 1) {
          let inputRow = tileRowB + innerRow;
          let inputCol = tileCol;
          mm_Bsub[inputRow][inputCol] = mm_readB(batch, kStart + inputRow, globalCol${a?", batchIndices":""});
      }
      kStart = kStart + tileInner;
      workgroupBarrier();

      // Compute acc values for a single thread.
      for (var k = 0; k < tileInner / innerElementSize; k = k + 1) {
          let BCached0 = mm_Bsub[k * innerElementSize][tileCol];
          let BCached1 = mm_Bsub[k * innerElementSize + 1][tileCol];
          let BCached2 = mm_Bsub[k * innerElementSize + 2][tileCol];
          ${m===3?"":"let BCached3 = mm_Bsub[k * innerElementSize + 3][tileCol];"}

          ${lc(n,m)}
      }

      workgroupBarrier();
  }

  for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
      mm_write(batch, globalRow + innerRow, globalCol, acc[innerRow]);
  }
}`},_s=(e,t)=>e?`
            mm_Asub[inputRow][inputCol] = mm_readA(batch,
              kStart + inputRow,
              globalRowStart + inputCol${t?", batchIndices":""});
            `:`
            mm_Asub[inputRow][inputCol] = mm_readA(batch,
              globalRowStart + inputRow,
              kStart + inputCol${t?", batchIndices":""});
            `,dc=e=>e?"let ACached = mm_Asub[k][tileRow + innerRow];":"let ACached = mm_Asub[tileRow + innerRow][k];",vr=(e,t,r="f32",a,n=!1,o=32,u=!1,l=32,i=!1)=>{let c=e[1]*t[1],f=e[0]*t[0],y=n?c:o,m=n?o:c;if(!(m%t[1]===0&&y%t[0]===0&&o%t[1]===0))throw new Error(`tileAHight ${m} must be divisible by workgroupSize[1]${t[1]}, tileAWidth ${y} must be divisible by workgroupSize[0]${t[0]}, tileInner ${o} must be divisible by workgroupSize[1]${t[1]}`);let b=m/t[1],w=y/t[0],$=o/t[1],I=i?`
    let localRow = i32(localId.y);
    let localCol = i32(localId.x);
    let globalRowStart = i32(workgroupId.y) * ${c};
    let globalColStart = i32(workgroupId.x) * ${f};

    // Loop over shared dimension.
    for (var t = 0; t < numTiles; t = t + 1) {
      // Load one tile of A into local memory.
      for (var inputRow = localRow; inputRow < ${m}; inputRow = inputRow + ${t[1]}) {
        for (var inputCol = localCol; inputCol < ${y}; inputCol = inputCol + ${t[0]}) {
          ${_s(n,a)}
        }
      }
      // Load one tile of B into local memory.
      for (var inputRow = localRow; inputRow < ${o}; inputRow = inputRow + ${t[1]}) {
            for (var inputCol = localCol; inputCol < ${f}; inputCol = inputCol + ${t[0]}) {
          mm_Bsub[inputRow][inputCol] = mm_readB(batch,
            kStart + inputRow,
            globalColStart + inputCol${a?", batchIndices":""});
        }
      }
      kStart = kStart + tileInner;
      workgroupBarrier();

      // Compute acc values for a single thread.
      var BCached : array<${r}, colPerThread>;
      for (var k = 0; k < tileInner; k = k + 1) {
        for (var inner = 0; inner < colPerThread; inner = inner + 1) {
          BCached[inner] = mm_Bsub[k][localCol + inner * ${t[0]}];
        }
        for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
          let ACached = ${n?`mm_Asub[k][localRow + innerRow * ${t[1]}];`:`mm_Asub[localRow + innerRow * ${t[1]}][k];`}
          for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
            acc[innerRow][innerCol] = acc[innerRow][innerCol] +
                ACached * BCached[innerCol];
          }
        }
      }
      workgroupBarrier();
    }
    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
      let gRow = globalRowStart + localRow + innerRow * ${t[1]};
      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
        let gCol = globalColStart + localCol + innerCol * ${t[0]};
        mm_write(batch, gRow, gCol, acc[innerRow][innerCol]);
      }
    }
    `:`
let tileRow = i32(localId.y) * rowPerThread;
let tileCol = i32(localId.x) * colPerThread;

let globalRow = i32(globalId.y) * rowPerThread;
let globalCol = i32(globalId.x) * colPerThread;
let globalRowStart = i32(workgroupId.y) * ${c};

let tileRowA = i32(localId.y) * ${b};
let tileColA = i32(localId.x) * ${w};
let tileRowB = i32(localId.y) * ${$};
// Loop over shared dimension.
for (var t = 0; t < numTiles; t = t + 1) {
  // Load one tile of A into local memory.
  for (var innerRow = 0; innerRow < ${b}; innerRow = innerRow + 1) {
    for (var innerCol = 0; innerCol < ${w}; innerCol = innerCol + 1) {
      let inputRow = tileRowA + innerRow;
      let inputCol = tileColA + innerCol;
      ${_s(n,a)}
    }
  }

  // Load one tile of B into local memory.
  for (var innerRow = 0; innerRow < ${$}; innerRow = innerRow + 1) {
    for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
      let inputRow = tileRowB + innerRow;
      let inputCol = tileCol + innerCol;
      mm_Bsub[inputRow][inputCol] = mm_readB(batch,
        kStart + inputRow,
        globalCol + innerCol${a?", batchIndices":""});
    }
  }
  kStart = kStart + tileInner;
  workgroupBarrier();

  // Compute acc values for a single thread.
  var BCached : array<${r}, colPerThread>;
  for (var k = 0; k < tileInner; k = k + 1) {
    for (var inner = 0; inner < colPerThread; inner = inner + 1) {
      BCached[inner] = mm_Bsub[k][tileCol + inner];
    }

    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
      ${dc(n)}
      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
        acc[innerRow][innerCol] = acc[innerRow][innerCol] + ACached * BCached[innerCol];
      }
    }
  }

  workgroupBarrier();
}

for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
  for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
    mm_write(batch, globalRow + innerRow, globalCol + innerCol,
        acc[innerRow][innerCol]);
  }
}
`;return`
  var<workgroup> mm_Asub : array<array<${r}, ${y}>, ${m}>;
  var<workgroup> mm_Bsub : array<array<${r}, ${f}>, ${o}>;
  const rowPerThread = ${e[1]};
  const colPerThread = ${e[0]};
  const tileInner = ${o};

@compute @workgroup_size(${t[0]}, ${t[1]}, ${t[2]})
fn main(@builtin(local_invocation_id) localId : vec3<u32>,
        @builtin(global_invocation_id) globalId : vec3<u32>,
        @builtin(workgroup_id) workgroupId : vec3<u32>) {
    let batch = ${u?"0":"i32(globalId.z)"};
    ${a?`let batchIndices = ${a.offsetToIndices("u32(batch)")};`:""}
    let numTiles = ${u?`${Math.ceil(l/o)}`:"(uniforms.dimInner - 1) / tileInner + 1"};
    var kStart = ${u?`i32(globalId.z) * ${l}`:"0"};

    var acc : array<array<${r}, colPerThread>, rowPerThread>;

    // Without this initialization strange values show up in acc.
    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
        acc[innerRow][innerCol] = 0.0;
      }
    }
    ${I}
  }
`},cc=(e,t,r,a,n,o=!1)=>{let[u,l,i]=n,[c,f,y,m]=a,b=Xn(u,i),w=Xn(l,i),$=Ae(a[0].type.tensor),I=()=>{let P=f.rank,E=c.rank,z=`var aIndices: ${f.type.indices};`;for(let T=P-2-1,H=E-1;T>=0;T--,H--)z+=`
aIndices[${T}] = ${E>1?`batchIndices[${H}]`:"batchIndices"};`;return b.forEach(T=>{z+=`
aIndices[${T}] = 0;`}),z+=`
aIndices[${P-2}] = u32(row);
                   aIndices[${P-1}] = u32(colIn);`,z},x=()=>{let P=y.rank,E=c.rank,z=`var bIndices: ${y.type.indices};`;for(let T=P-2-1,H=E-1;T>=0;T--,H--)z+=`
bIndices[${T}] = ${E>1?`batchIndices[${H}]`:"batchIndices"};`;return w.forEach(T=>{z+=`
bIndices[${T}] = 0;`}),z+=`
bIndices[${P-2}] = u32(row);
                   bIndices[${P-1}] = u32(colIn);`,z};return`
    fn mm_readA(batch: i32, row: i32, colIn: i32, batchIndices: ${c.type.indices}) -> ${Ve(e,$)} {
      var value = ${Ve(e,$)}(0.0);
      let col = colIn * ${e};
      if(row < uniforms.dimAOuter && col < uniforms.dimInner)
      {
        ${I()}
        value = ${f.getByIndices("aIndices")};
      }
      return value;
    }

    fn mm_readB(batch: i32, row: i32, colIn: i32, batchIndices: ${c.type.indices}) -> ${Ve(e,$)} {
      var value = ${Ve(e,$)}(0.0);
      let col = colIn * ${e};
      if(row < uniforms.dimInner && col < uniforms.dimBOuter)
      {
        ${x()}
        value = ${y.getByIndices("bIndices")};
      }
      return value;
    }

    fn mm_write(batch: i32, row: i32, colIn: i32, valueIn: ${Ve(e,$)}) {
      let col = colIn * ${e};
      if (row < uniforms.dimAOuter && col < uniforms.dimBOuter) {
        var value = valueIn;
        let coords = vec3<i32>(batch, row, colIn);
        ${t?`value = value + ${o?"bias[colIn]":`${Ve(e,$)}(bias[row])`};`:""}
        ${r}
        ${m.setByIndices("vec3<u32>(coords)","value")}
      }
    }
    `},mn=(e,t,r,a,n=!1)=>{let o=e[0].dims,u=e[1].dims,l=o.slice(0,-2),i=u.slice(0,-2),c=a?a.slice(0,-2):r.slice(0,-2),f=Pe(c.length),y=f?c.length:c,m=Ki("batchDims",e[0].dataType,y,1),b=D.size(c),w=o[o.length-2],$=o[o.length-1],I=u[u.length-1],x=$%4===0&&I%4===0,C=w<=8?[4,1,1]:[4,4,1],P=[8,8,1],E=[Math.ceil(I/P[0]/C[0]),Math.ceil(w/P[1]/C[1]),Math.ceil(b/P[2]/C[2])],z=Ae(e[0].dataType),T=x?4:1,H=[...l,w,$/T],N=Pe(H.length),G=N?H.length:H,re=[...i,$,I/T],B=Pe(re.length),j=B?re.length:re,pe=[b,w,I/T],Q=W("a",e[0].dataType,G,T),$e=W("b",e[1].dataType,j,T),Z=K("result",e[0].dataType,pe.length,T),Se=[Q,$e],Ie=[{type:"int32",data:w},{type:"int32",data:I},{type:"int32",data:$}];f&&Ie.push(...Y(c)),N&&Ie.push(...Y(H)),B&&Ie.push(...Y(re));let Ee=[];Ee.push(N?"rank":"dims"),Ee.push(B?"rank":"dims");let he=e.length>2,{activationFunction:ot,applyActivation:Ge}=Et(t,Z.type.value),je=cc(T,he,Ge,[m,Q,$e,Z],[l,i,c],n);if(he){let de=n?T:1;Se.push(W("bias",e[2].dataType,e[2].dims.length,de)),Ie.push(...Y(e[2].dims)),Ee.push("rank")}Ie.push(...Y(pe));let F=de=>`
  ${de.registerUniform("dimAOuter","i32").registerUniform("dimBOuter","i32").registerUniform("dimInner","i32").registerInternalVariables(m).declareVariables(...Se,Z)}
  ${ot}
  ${je}
  ${x?wr(C,P,z,m):vr(C,P,z,m)}
                   `;return{name:"MatMul",shaderCache:{hint:t.activationCacheKey+`${C}${t.activation}${t.clipMax}${t.clipMin}${x}${he}${n}`,inputDependencies:Ee},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:E[0],y:E[1],z:E[2]},programUniforms:Ie}),getShaderSource:F}}});var pc,Cs,Is=q(()=>{"use strict";It();be();Nt();pn();ra();$r();pc=(e,t,r,a,n=!1,o,u=4,l=4,i=4,c="f32")=>{let f=B=>{switch(B){case 1:return"resData = x[xIndex];";case 3:return`resData = vec3<${c}>(x[xIndex], x[xIndex + 1], x[xIndex + 2]);`;case 4:return"resData = x[xIndex / 4];";default:throw new Error(`innerElementSize ${B} is not supported.`)}},y=B=>{switch(B){case 1:return"return w[row * i32(uniforms.w_shape[3]) + colIn];";case 4:return"return w[row * i32(uniforms.w_shape[3]) / 4 + colIn];";default:throw new Error(`innerElementSize ${B} is not supported.`)}},m=e?`
    let coord = vec4<i32>(batch, xRow, xCol, xCh);
    `:`
    let coord = vec4<i32>(batch, xCh, xRow, xCol);
    `,b=e?`
    let coords = vec4<i32>(
      batch,
      row / outWidth,
      row % outWidth,
      col);
    `:`
    let coords = vec4<i32>(
      batch,
      row,
      col / outWidth,
      col % outWidth);
    `,w=e?"i32(uniforms.x_shape[1])":"i32(uniforms.x_shape[2])",$=e?"i32(uniforms.x_shape[2])":"i32(uniforms.x_shape[3])",I=e?"row":"col",x=e?"col":"row",C=`
    let inChannels = i32(uniforms.w_shape[2]);
    let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};
    let outRow = ${I} / outWidth;
    let outCol = ${I} % outWidth;

    let WRow = ${x} / (filterDims[1] * inChannels);
    let WCol = ${x} / inChannels % filterDims[1];
    let xRow = outRow * stride[0] + dilation[0] * WRow - pad[0];
    let xCol = outCol * stride[1] + dilation[1] * WCol - pad[1];
    let xCh = ${x} % inChannels;
    var resData = ${Ve(u,c)}(0.0);
    // The bounds checking is always needed since we use it to pad zero for
    // the 'same' padding type.
    if (xRow >= 0 && xRow < ${w} && xCol >= 0 && xCol < ${$}) {
      ${m}
      let xIndex = getIndexFromCoords4D(coord, vec4<i32>(uniforms.x_shape));
      ${f(u)}
    }
    return resData;`,P=e?t&&a?`
    let col = colIn * ${u};
    ${C}`:`
    let col = colIn * ${u};
    if (row < uniforms.dimAOuter && col < uniforms.dimInner) {
      ${C}
    }
    return ${Ve(u,c)}(0.0);`:a&&r?`
    let col = colIn * ${u};
    ${C}`:`
    let col = colIn * ${u};
    if (row < uniforms.dimInner && col < uniforms.dimBOuter) {
      ${C}
    }
    return ${Ve(u,c)}(0.0);`,E=`${y(l)}`,z=Ve(i,c),T=e?Ve(u,c):Ve(l,c),H=e?Ve(l,c):Ve(u,c),{activationFunction:N,applyActivation:G}=Et(o,z);return`
    ${N}
    fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${T} {
      ${e?P:E}
    }

    fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${H} {
      ${e?E:P}
    }

    fn mm_write(batch: i32, row : i32, colIn : i32, valueIn : ${z}) {
      let col = colIn * ${i};
      if (row < uniforms.dimAOuter && col < uniforms.dimBOuter)
      {
      var value = valueIn;
      let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};
      ${b}
      ${cn(n)}
      ${G}
      setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);
      }
    }`},Cs=(e,t,r,a,n,o,u,l)=>{let i=t.format==="NHWC",c=i?e[0].dims[3]:e[0].dims[1],f=r[0],y=i?r[2]:r[3],m=i?r[1]:r[2],b=i?r[3]:r[1],w=i&&(c%4===0||c%3===0)&&b%4===0,$=i?b:y*m,I=i?y*m:b,x=[8,8,1],C=a<=8?[4,1,1]:[4,4,1],P=[Math.ceil($/x[0]/C[0]),Math.ceil(I/x[1]/C[1]),Math.ceil(f/x[2]/C[2])];Be("verbose",()=>`[conv2d_mm_webgpu] dispatch = ${P}`);let E=w?i&&c%4!==0?3:4:1,z=x[1]*C[1],T=x[0]*C[0],H=Math.max(x[0]*E,x[1]),N=a%z===0,G=n%T===0,re=o%H===0,B=w?[E,4,4]:[1,1,1],j=Ae(e[0].dataType),pe=w?4:1,Q=[{type:"int32",data:a},{type:"int32",data:n},{type:"int32",data:o}],$e=W("x",e[0].dataType,e[0].dims.length,E===3?1:E),Z=W("w",e[1].dataType,e[1].dims.length,pe),Se=[$e,Z];Q.push(...Y(e[0].dims)),Q.push(...Y(e[1].dims));let Ie=`
      fn setOutputAtIndex(flatIndex : i32, value : ${w?`vec4<${j}>`:j}) {
        result[flatIndex] = ${w?`vec4<${j}>`:j}(value);
      }
      fn setOutputAtCoords(d0 : i32, d1 : i32, d2 : i32, d3 : i32, value : ${w?`vec4<${j}>`:j}) {
        let flatIndex = getOutputIndexFromCoords(vec4<i32>(d0, d1, d2, d3));
        setOutputAtIndex(flatIndex ${w?"/ 4":""}, value);
      }`;if(u){let he=W("bias",e[2].dataType,e[2].dims.length,pe);Se.push(he),Q.push(...Y(e[2].dims)),Ie+=`
        fn getBiasByOutputCoords(coords : vec4<i32>) -> ${w?`vec4<${j}>`:j} {
          return bias[coords.${i?"w":"y"}${w?"/ 4":""}];
        }`}let Ee=K("result",e[0].dataType,r.length,pe);return Q.push(...Y(r)),{name:"Conv2DMatMul",shaderCache:{hint:t.cacheKey},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:P[0],y:P[1],z:P[2]},programUniforms:Q}),getShaderSource:he=>`
        ${fn("uniforms.result_strides")}
        //struct Uniforms { xShape : vec4<i32>, wShape : vec4<i32>, outShape : vec4<i32>,
        //  outShapeStrides: vec3<i32>, filterDims : vec2<i32>, pad : vec2<i32>, stride : vec2<i32>,
        //  dilation : vec2<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32 };
        ${he.registerUniform("dimAOuter","i32").registerUniform("dimBOuter","i32").registerUniform("dimInner","i32").declareVariables(...Se,Ee)}
        const filterDims : vec2<i32> = vec2<i32>(${t.kernelShape[0]}, ${t.kernelShape[1]});
        const pad : vec2<i32> = vec2<i32>(${t.pads[0]}, ${t.pads[1]});
        const stride : vec2<i32> = vec2<i32>(${t.strides[0]}, ${t.strides[1]});
        const dilation : vec2<i32> = vec2<i32>(${t.dilations[0]}, ${t.dilations[1]});
        ${Ie}
        ${pc(i,N,G,re,u,t,B[0],B[1],B[2],j)}
            ${w?wr(C,x,j,void 0,!i,H):vr(C,x,j,void 0,!i,H,!1,void 0,l)}`}}});var na,Es=q(()=>{"use strict";ye();be();ia();Nt();na=(e,t,r)=>{let a=e.length>2,n=a?"value += b[output_channel];":"",o=e[0].dims,u=e[1].dims,l=u[0]/t.group,i=t.format==="NHWC",c=aa(o,u,t.dilations,t.pads,t.strides,i),f=D.size(c),y=K("output",e[0].dataType,c),{activationFunction:m,applyActivation:b}=Et(t,y.type.value),w=W("x",e[0].dataType,o),$=W("w",e[1].dataType,u),I=[w,$];a&&I.push(W("b",e[2].dataType,e[2].dims));let x=C=>`
  const strides: vec2<u32> = vec2(${t.strides[0]}u, ${t.strides[1]}u);
  const pads: vec2<u32> = vec2(${t.pads[0]}u, ${t.pads[1]}u);

  ${C.declareVariables(...I,y)}

  ${m}

  ${C.mainStart()}
    ${C.guardAgainstOutOfBoundsWorkgroupSizes(f)}

    let outputIndices = ${y.offsetToIndices("global_idx")};
    let batch: u32 = outputIndices[0];
    let output_channel: u32 = outputIndices[${i?3:1}];
    let xRCCorner: vec2<u32> = vec2<u32>(outputIndices[${i?1:2}], outputIndices[${i?2:3}]) * strides - pads;
    let group_id: u32 = output_channel / ${l}u;

    var value: ${y.type.value} = ${y.type.value}(0);
    for (var wInChannel: u32 = 0u; wInChannel < ${u[1]}u; wInChannel++) {
      let input_channel = group_id * ${u[1]}u + wInChannel;
      for (var wHeight: u32 = 0u; wHeight < ${u[2]}u; wHeight++) {
        let xHeight = xRCCorner.x + wHeight * ${t.dilations[0]}u;

        if (xHeight < 0u || xHeight >= ${o[i?1:2]}u) {
          continue;
        }

        for (var wWidth: u32 = 0u; wWidth < ${u[3]}u; wWidth++) {
          let xWidth = xRCCorner.y + wWidth * ${t.dilations[1]}u;
          if (xWidth < 0u || xWidth >= ${o[i?2:3]}u) {
            continue;
          }

          let xVal = ${i?w.get("batch","xHeight","xWidth","input_channel"):w.get("batch","input_channel","xHeight","xWidth")};
          let wVal = ${$.get("output_channel","wInChannel","wHeight","wWidth")};
          value += xVal*wVal;
        }
      }
    }
    ${n}
    ${b}
    ${y.setByOffset("global_idx","value")}
  }`;return{name:"GroupedConv",shaderCache:{hint:t.cacheKey},getRunData:()=>({outputs:[{dims:r?r(c):c,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(f/64)}}),getShaderSource:x}}});var aa,As,fc,Ts,oa,mc,hc,sa,ia=q(()=>{"use strict";ye();Re();Is();$r();Es();Nt();Xt();aa=(e,t,r,a,n,o)=>{let u=e[0],l=e.slice(o?1:2,o?3:4),i=l.length,c=t[0],y=t.slice(2).map((w,$)=>w+(w-1)*(r[$]-1)),b=l.map((w,$)=>w+a[$]+a[$+i]).map((w,$)=>Math.floor((w-y[$]+n[$])/n[$]));return b.splice(0,0,u),b.splice(o?3:1,0,c),b},As=[2,3,1,0],fc=(e,t)=>{if(!e||e.length!==2&&e.length!==3)throw new Error("Conv requires 2 or 3 inputs");if(e[0].dims.length!==4&&e[0].dims.length!==3)throw new Error("currently only support conv 1D and 2D");if(e[0].dims.length!==e[1].dims.length)throw new Error("filter does not have same dimension as input");let r=e[0].dims[t.format==="NHWC"?e[0].dims.length-1:1],a=e[1].dims[1]*t.group;if(r!==a)throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");if(e.length===3&&(e[2].dims.length!==1||e[1].dims[0]!==e[2].dims[0]))throw new Error("invalid bias");let n=e[0].dims.length-2;if(t.dilations.length!==n)throw new Error(`dilations should be ${n}D`);if(t.strides.length!==n)throw new Error(`strides should be ${n}D`);if(t.pads.length!==n*2)throw new Error(`pads should be ${n*2}D`);if(t.kernelShape.length!==0&&t.kernelShape.length!==e[1].dims.length-2)throw new Error("invalid kernel shape")},Ts=(e,t)=>{let r=e.kernelShape.slice();for(let o=2;o<t[1].dims.length;++o)r[o-2]===0&&(r[o-2]=t[1].dims[o]);let a=e.pads.slice();Ut.adjustPadsBasedOnAutoPad(t[0].dims,e.strides,e.dilations,r,a,e.format==="NHWC",e.autoPad);let n=Object.assign({},e);return Object.assign(n,{kernelShape:r,pads:a,cacheKey:e.cacheKey}),n},oa=e=>{let t=dn(e),r=e.format,a=["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][e.auto_pad],n=e.dilations,o=e.group,u=e.kernel_shape,l=e.pads,i=e.strides,c=e.w_is_const();return J({autoPad:a,format:r,dilations:n,group:o,kernelShape:u,pads:l,strides:i,wIsConst:c,...t})},mc=(e,t,r)=>{let a=Ts(r,t);if(r.group!==1){e.compute(na(t,a));return}let n=r.format==="NHWC",o=t.length===3,u=t[0].dims[n?1:2],l=t[0].dims[n?2:3],i=t[0].dims[n?3:1],c=t[1].dims[2],f=t[1].dims[3],y=aa(t[0].dims,t[1].dims,r.dilations,a.pads,r.strides,n),m=y[n?1:2],b=y[n?2:3],w=y[n?3:1],$=n&&c===u&&f===l&&r.pads[0]===0&&r.pads[1]===0;if($||c===1&&f===1&&r.dilations[0]===1&&r.dilations[1]===1&&r.strides[0]===1&&r.strides[1]===1&&r.pads[0]===0&&r.pads[1]===0){let T=y[0],H,N,G,re=[];if(n){let B=e.kernelCustomData.wT??e.compute(it(t[1],As),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];if(r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=B),$){let j=u*l*i;H=t[0].reshape([1,T,j]),N=B.reshape([1,j,w]),G=[1,T,w]}else H=t[0].reshape([T,u*l,i]),N=B.reshape([1,i,w]),G=[T,m*b,w];re.push(H),re.push(N)}else H=t[0].reshape([T,i,u*l]),N=t[1].reshape([1,w,i]),G=[T,w,m*b],re.push(N),re.push(H);o&&re.push(t[2]),e.compute(mn(re,a,y,G,n),{inputs:re});return}let I=!0,x=e.kernelCustomData.wT??e.compute(it(t[1],As),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=x);let C=[t[0],x];o&&C.push(t[2]);let P=n?m*b:w,E=n?w:m*b,z=c*f*i;e.compute(Cs(C,a,y,P,E,z,o,I),{inputs:C})},hc=(e,t)=>{let r=t.format==="NHWC",a=[e.inputs[0].reshape(r?[e.inputs[0].dims[0],1,e.inputs[0].dims[1],e.inputs[0].dims[2]]:[e.inputs[0].dims[0],e.inputs[0].dims[1],1,e.inputs[0].dims[2]]),e.inputs[1].reshape([e.inputs[1].dims[0],e.inputs[1].dims[1],1,e.inputs[1].dims[2]])];e.inputs.length===3&&a.push(e.inputs[2]);let n=[0,t.pads[0],0,t.pads[1]],o=[1].concat(t.strides),u=[1].concat(t.dilations),l=[1].concat(t.kernelShape),i=Ts({...t,pads:n,strides:o,dilations:u,kernelShape:l},a);e.compute(na(a,i,c=>r?[c[0],c[2],c[3]]:[]))},sa=(e,t)=>{fc(e.inputs,t),e.inputs[0].dims.length===3?hc(e,t):mc(e,e.inputs,t)}});var gc,Os,ks=q(()=>{"use strict";It();be();Nt();pn();ra();$r();gc=(e,t=!1,r,a=4)=>{let n=Ve(a,"f32"),o=C=>{switch(C){case 1:return"return w[getIndexFromCoords4D(coord, vec4<i32>(uniforms.w_shape))];";case 4:return`
            let coord1 = vec4<i32>(coordX, coordY, col + 1, rowInner);
            let coord2 = vec4<i32>(coordX, coordY, col + 2, rowInner);
            let coord3 = vec4<i32>(coordX, coordY, col + 3, rowInner);
            let v0 = w[getIndexFromCoords4D(coord, vec4<i32>(uniforms.w_shape))];
            let v1 = w[getIndexFromCoords4D(coord1, vec4<i32>(uniforms.w_shape))];
            let v2 = w[getIndexFromCoords4D(coord2, vec4<i32>(uniforms.w_shape))];
            let v3 = w[getIndexFromCoords4D(coord3, vec4<i32>(uniforms.w_shape))];
            return vec4<f32>(v0, v1, v2, v3);
            `;default:throw new Error(`innerElementSize ${C} is not supported.`)}},u=e?`
      let coord = vec4<i32>(batch, iXR, iXC, xCh);
      `:`
      let coord = vec4<i32>(batch, xCh, iXR, iXC);
      `,l=e?`
    let coords = vec4<i32>(
      batch,
      row / outWidth,
      row % outWidth,
      col);
    `:`
    let coords = vec4<i32>(
      batch,
      row,
      col / outWidth,
      col % outWidth);
    `,i=e?"outBackprop[1]":"outBackprop[2]",c=e?"outBackprop[2]":"outBackprop[3]",f=e?"row":"col",y=e?"col":"row",m=`
      let inChannels = ${e?"outBackprop[3]":"outBackprop[1]"};
      let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};
      let outRow = ${f} / outWidth;
      let outCol = ${f} % outWidth;

      let WRow = ${y} / (filterDims[1] * inChannels);
      let WCol = ${y} / inChannels % filterDims[1];
      let xR = f32(outRow - pads[0] + dilation[0] * WRow) / f32(strides[0]);
      let xC = f32(outCol - pads[1] + dilation[1] * WCol) / f32(strides[1]);
      if (xR < 0.0 || xR >= f32(${i}) || fract(xR) > 0.0) {
        return ${n}(0.0);
      }
      if (xC < 0.0 || xC >= f32(${c}) || fract(xC) > 0.0) {
        return ${n}(0.0);
      }
      let iXR = i32(xR);
      let iXC = i32(xC);
      let xCh = ${y} % inChannels;
      ${u}
      return x[getIndexFromCoords4D(coord, vec4<i32>(uniforms.x_shape))/${a}];`,b=e?`
      let col = colIn * ${a};
      if (row < uniforms.dimAOuter && col < uniforms.dimInner) {
        ${m}
      }
      return ${n}(0.0);`:`
      let col = colIn * ${a};
      if (row < uniforms.dimInner && col < uniforms.dimBOuter) {
        ${m}
      }
      return ${n}(0.0);`,w=`
      let col = colIn * ${a};
      let inChannels = ${e?"outBackprop[3]":"outBackprop[1]"};
      let coordX = filterDims.x - 1 - row / (filterDims[1] * inChannels);
      let coordY = filterDims.y - 1 - (row / inChannels) % filterDims[1];
      if (${e?"row < uniforms.dimInner && col < uniforms.dimBOuter":"row < uniforms.dimInner && col < uniforms.dimAOuter"}  && coordX >= 0 && coordY >= 0) {
        let rowInner = row % inChannels;
        let coord = vec4<i32>(coordX, coordY, col, rowInner);
        ${o(a)}
      }
      return ${n}(0.0);
      `,{activationFunction:$,applyActivation:I}=Et(r,n);return`
      ${$}
  fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${n} {
    ${e?b:w}
  }

  fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${n} {
    ${e?w:b}
  }

  fn mm_write(batch: i32, row : i32, colIn : i32, valueInput : ${n}) {
    let col = colIn * ${a};
    if (row < uniforms.dimAOuter && col < uniforms.dimBOuter) {
      var value = valueInput;
      let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};
      ${l}
      ${cn(t)}
      ${I}
      result[getIndexFromCoords4D(coords, vec4<i32>(uniforms.result_shape))/${a}] = value;
    }
  }`},Os=(e,t,r,a,n,o,u,l)=>{let i=t.format==="NHWC",c=i?e[0].dims[3]:e[0].dims[1],f=r[0],y=i?r[2]:r[3],m=i?r[1]:r[2],b=i?r[3]:r[1],w=i?c%4===0&&b%4===0:y%4===0&&b%4===0,$=i?b:y*m,I=i?y*m:b,x=w?[8,8,1]:[$<=4||I<=4?4:16,$>4&&I<=4?4:16,1],C=w?[4,4,1]:[$<=4?1:4,$>4&&I<=4?1:4,1],P=[Math.ceil($/x[0]/C[0]),Math.ceil(I/x[1]/C[1]),Math.ceil(f/x[2]/C[2])];Be("verbose",()=>`[conv_backprop_mm_webgpu] dispatch = ${P}`);let E=w?4:1,z=Math.max(x[0]*E,x[1]),T=w?4:1,H=[{type:"int32",data:a},{type:"int32",data:n},{type:"int32",data:o}],N=W("x",e[0].dataType,e[0].dims.length,T),G=W("w",e[1].dataType,e[1].dims.length,1),re=K("result",e[0].dataType,r.length,T),B=[N,G];H.push(...Y(e[0].dims)),H.push(...Y(e[1].dims));let j="";if(u){let pe=W("bias",e[2].dataType,e[2].dims.length,T);B.push(pe),H.push(...Y(e[2].dims)),j+=`
        fn getBiasByOutputCoords(coords : vec4<i32>) -> ${w?"vec4<f32>":"f32"} {
          return bias[coords.${i?"w":"y"}${w?"/ 4":""}];
        }`}return H.push(...Y(r)),{name:"Conv2DTransposeMatMul",shaderCache:{hint:t.cacheKey},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:P[0],y:P[1],z:P[2]},programUniforms:H}),getShaderSource:pe=>`
        ${fn("uniforms.result_strides")}
        ${pe.registerUniform("dimAOuter","i32").registerUniform("dimBOuter","i32").registerUniform("dimInner","i32").declareVariables(...B,re)};
        const outBackprop : vec4<i32> = vec4<i32>(${e[0].dims.join(",")});
        const filterDims : vec2<i32> = vec2<i32>(${t.kernelShape[i?1:2]}, ${t.kernelShape[i?2:3]});
        const effectiveFilterDims : vec2<i32> = filterDims + vec2<i32>(
              ${t.dilations[0]<=1?0:(t.kernelShape[i?1:2]-1)*(t.dilations[0]-1)},
              ${t.dilations[1]<=1?0:(t.kernelShape[i?2:3]-1)*(t.dilations[1]-1)});
        const pads : vec2<i32> = vec2<i32>(i32(effectiveFilterDims[0]) - 1 - (${t.pads[0]+t.pads[2]})/2,
                                         i32(effectiveFilterDims[1]) - 1 - (${t.pads[1]+t.pads[3]})/2);
        const strides : vec2<i32> = vec2<i32>(${t.strides[0]}, ${t.strides[1]});
        const dilation : vec2<i32> = vec2<i32>(${t.dilations[0]}, ${t.dilations[1]});
        const dimAOuter : i32 = ${a};
        const dimBOuter : i32 = ${n};
        const dimInner : i32 = ${o};
        ${j}
        ${gc(i,u,t,E)}
        ${w?wr(C,x,"f32",void 0,!i,z):vr(C,x,"f32",void 0,!i,z,!1,void 0,l)}`}}});var yc,ua,Rs=q(()=>{"use strict";It();ye();be();yc=(e,t,r,a,n,o,u=!1,l)=>{let i=r.format==="NHWC",c=i?1:2,f=i?2:3,y=i?3:1,m=D.size(a),b=u?2:1,w=r.group,$=t[1].dims,I=$[0]/w,x=$[1],C=`
  fn setOutputAtIndex(flatIndex : u32, value : ${u?`vec4<${l}>`:l}) {
    result[flatIndex] = ${u?`vec4<${l}>`:l}(value);
  }`;n&&(C+=`
    fn getBiasByOutputCoords(coords : vec4<u32>) -> ${u?`vec4<${l}>`:l} {
      return bias[coords.${i?"w":"y"}${u?"/ 4":""}];
    }`);let P=u?4:1,E=W("W",t[1].dataType,t[1].dims,P),z=W("Dy",t[0].dataType,t[0].dims,P),T=[z,E];n&&T.push(W("bias",t[2].dataType,[a[y]],P));let H=K("result",t[0].dataType,a,P),N=`{
        let batch: u32 = ${o?"global_id.z":"workgroup_id.z"} / outShape[1];
        let r = ${o?"global_id.z":"workgroup_id.z"} % outShape[1];
        let c = ${o?"global_id.y":"workgroup_id.y"} * ${b};
        let d1: u32 = ${o?"global_id.x":"workgroup_id.x"} * 4;

        let dyCorner = vec2<i32>(i32(r), i32(c)) - vec2<i32>(pads);

        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
        // ? = to be determined. : = across all values in that axis.
        var dotProd: array<vec4<${l}>, ${b}>;
        for (var i = 0; i < ${b}; i++) {
          dotProd[i] = vec4<${l}>(0.0);
        }
        for (var wR: u32 = 0; wR < filterDims[0]; wR = wR + 1) {
          var dyR = (${l}(dyCorner.x) + ${l}(wR)) / ${l}(strides.x);
          let wRPerm = filterDims[0] - 1 - wR;
          if (dyR < 0.0 || dyR >= ${l}(outBackprop[1]) ||
              fract(dyR) > 0.0 || wRPerm < 0) {
            continue;
          }
          let idyR: u32 = u32(dyR);

          for (var wC: u32 = 0; wC < filterDims[1]; wC = wC + 1) {
            let dyC = (${l}(dyCorner.y) + ${l}(wC)) / ${l}(strides.y);
            let dyC2 = (${l}(dyCorner.y) + 1.0 + ${l}(wC)) / ${l}(strides.y);
            let wCPerm = filterDims[1] - 1 - wC;
            if (wCPerm < 0) {
              continue;
            }
            var bDyCVal = true;
            var bDyCVal2 = true;
            if (dyC < 0.0 || dyC >= ${l}(outBackprop[2]) ||
                fract(dyC) > 0.0) {
              bDyCVal = false;
            }
            if (dyC2 < 0.0 || dyC2 >= ${l}(outBackprop[2]) ||
                fract(dyC2) > 0.0) {
              bDyCVal2 = false;
            }

            let idyC: u32 = u32(dyC);
            let idyC2: u32 = u32(dyC2);
            if (bDyCVal && bDyCVal2) {
              let d2Length = outBackprop[3];
              for (var d2 :u32 = 0; d2 < d2Length; d2 = d2 + 4) {
                let wValue0 = ${E.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};
                let wValue1 = ${E.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};
                let wValue2 = ${E.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};
                let wValue3 = ${E.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};

                var xValue = ${z.get("batch","idyR","idyC","d2")};
                let tmpval = vec4<${l}>(dot(xValue, wValue0),
                                      dot(xValue, wValue1),
                                      dot(xValue, wValue2),
                                      dot(xValue, wValue3));
                dotProd[0] = dotProd[0] + tmpval;

                xValue =  ${z.get("batch","idyR","idyC2","d2")};

                dotProd[1] = dotProd[1] + vec4<${l}>(dot(xValue, wValue0),
                                                    dot(xValue, wValue1),
                                                    dot(xValue, wValue2),
                                                    dot(xValue, wValue3));
              }
            } else if (bDyCVal) {
              let d2Length = outBackprop[${y}];
              for (var d2: u32 = 0; d2 < d2Length; d2 = d2 + 4) {
                let wValue0 = ${E.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};
                let wValue1 = ${E.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};
                let wValue2 = ${E.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};
                let wValue3 = ${E.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};

                var xValue = ${z.get("batch","idyR","idyC","d2")};
                let tmpval = vec4<${l}>(dot(xValue, wValue0),
                                      dot(xValue, wValue1),
                                      dot(xValue, wValue2),
                                      dot(xValue, wValue3));
                dotProd[0] = dotProd[0] + tmpval;
              }
            } else if (bDyCVal2) {
              let d2Length = outBackprop[3];
              for (var d2: u32 = 0; d2 < d2Length; d2 = d2 + 4) {
                let wValue0 = ${E.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};
                let wValue1 = ${E.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};
                let wValue2 = ${E.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};
                let wValue3 = ${E.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};

                var xValue = ${z.get("batch","idyR","idyC2","d2")};
                let tmpval = vec4<${l}>(dot(xValue, wValue0),
                                      dot(xValue, wValue1),
                                      dot(xValue, wValue2),
                                      dot(xValue, wValue3));
                dotProd[1] = dotProd[1] + tmpval;
              }
            }
          }
        }

        for (var i: u32 = 0; i < ${b}; i = i + 1) {
          let value = dotProd[i] + ${n?"bias[c+i]":"0.0"};
          ${H.set("batch","r","c + i","d1","value")};
        }
      }`,G=`
          let outputIndices = ${H.offsetToIndices("global_idx")};
          let batch = ${H.indicesGet("outputIndices",0)};
          let d1 = ${H.indicesGet("outputIndices",y)};
          let r = ${H.indicesGet("outputIndices",c)};
          let c = ${H.indicesGet("outputIndices",f)};
          let dyCorner = vec2<i32>(i32(r), i32(c)) - pads;
          let dyRCorner = dyCorner.x;
          let dyCCorner = dyCorner.y;
          let groupId = d1 / ${x};
          let wOutChannel = d1 - groupId * ${x};
          // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
          // ? = to be determined. : = across all values in that axis.
          var dotProd = 0.0;
          for (var wR: u32 = 0; wR < effectiveFilterDims.x; wR = wR + 1) {
            if (wR % dilations.x != 0) {
              continue;
            }
            let dyR = (${l}(dyRCorner) + ${l}(wR)) / ${l}(strides[0]);
            let wRPerm = filterDims.x - 1 - wR / dilations.x;
            if (dyR < 0.0 || dyR >= ${l}(outBackprop[${c}]) || fract(dyR) > 0.0 ||
                wRPerm < 0) {
              continue;
            }
            let idyR: u32 = u32(dyR);

            for (var wC: u32 = 0; wC < effectiveFilterDims.y; wC = wC + 1) {
              if (wC % dilations.y != 0) {
                continue;
              }
              let dyC = (${l}(dyCCorner) + ${l}(wC)) / ${l}(strides.y);
              let wCPerm = filterDims.y - 1 - wC / dilations.y;
              if (dyC < 0.0 || dyC >= ${l}(outBackprop[${f}]) ||
                  fract(dyC) > 0.0 || wCPerm < 0) {
                continue;
              }
              let idyC: u32 = u32(dyC);
              var inputChannel = groupId * ${I};
              for (var d2: u32 = 0; d2 < ${I}; d2 = d2 + 1) {
                let xValue = ${i?z.get("batch","idyR","idyC","inputChannel"):z.get("batch","inputChannel","idyR","idyC")};
                let wValue = ${E.get("inputChannel","wOutChannel","u32(wRPerm)","u32(wCPerm)")};
                dotProd = dotProd + xValue * wValue;
                inputChannel = inputChannel + 1;
              }
            }
          }
          let value = dotProd + ${n?"bias[d1]":"0.0"};
          ${H.setByOffset("global_idx","value")};
        `;return`
  ${e.declareVariables(...T,H)}
  ${C}
  const outShape : vec4<u32> = vec4<u32>(${a.join(",")});
  const outBackprop : vec4<u32> = vec4<u32>(${t[0].dims.join(",")});
  const strides : vec2<u32> = vec2<u32>(${r.strides[0]}, ${r.strides[1]});
  const filterDims : vec2<u32> = vec2<u32>(${r.kernelShape[i?1:2]}, ${r.kernelShape[i?2:3]});
  const dilations : vec2<u32> = vec2<u32>(${r.dilations[0]}, ${r.dilations[1]});
  const effectiveFilterDims : vec2<u32> = filterDims + vec2<u32>(
          ${r.dilations[0]<=1?0:(r.kernelShape[i?1:2]-1)*(r.dilations[0]-1)},
          ${r.dilations[1]<=1?0:(r.kernelShape[i?2:3]-1)*(r.dilations[1]-1)});
  const pads : vec2<i32> = vec2<i32>(i32(effectiveFilterDims[0]) - 1 - (${r.pads[0]+r.pads[2]})/2,
                                     i32(effectiveFilterDims[1]) - 1 - (${r.pads[1]+r.pads[3]})/2);
    ${e.mainStart()}
    ${e.guardAgainstOutOfBoundsWorkgroupSizes(m)};
  ${u?N:G}}`},ua=(e,t,r)=>{let a=e.length>2,n=t.outputShape,o=D.size(n),u=[Math.ceil(o/64),1,1];Be("verbose",()=>`[conv2d_backprop_webgpu] dispatch = ${u}`);let l=Ae(e[0].dataType);return{name:"ConvTranspose2D",shaderCache:{hint:t.cacheKey},getRunData:()=>({dispatchGroup:{x:u[0],y:u[1],z:u[2]},outputs:[{dims:r?r(n):n,dataType:e[0].dataType}]}),getShaderSource:i=>yc(i,e,t,n,a,u[1]===1&&u[2]===1,!1,l)}}});var bc,wc,vc,Ps,Bs,$c,Sc,xc,_c,Ms,zs=q(()=>{"use strict";Re();ks();Rs();Nt();Xt();bc=(e,t,r,a,n,o)=>(e-1)*t+r+(a-1)*n+1-o,wc=(e,t,r,a,n)=>{let o=Math.floor(e/2);t==="SAME_UPPER"?(r[a]=o,r[n]=e-o):t==="SAME_LOWER"&&(r[a]=e-o,r[n]=o)},vc=(e,t,r,a,n,o,u,l,i,c)=>{let f=e.length-2,y=c.length===0;if(i.length===0)for(let w=0;w<f;++w)i.push(0);let m=e[0],b=t[l?3:1]*n;for(let w=0,$=e.length-f-(l?1:0);w<f;++w,++$){let I=e[$],x=y?I*u[w]:c[w],C=bc(I,u[w],o[w],t[$],r[w],x);wc(C,a,o,w,w+f),y&&c.push(u[w]*(I-1)+i[w]+(t[$]-1)*r[w]+1-o[w]-o[w+f])}c.splice(0,0,m),c.splice(l?3:1,0,b)},Ps=(e,t)=>{let r=e.kernelShape.slice();if(e.kernelShape.length===0||e.kernelShape.reduce((m,b)=>m*b,1)===0){r.length=0;for(let m=2;m<t[1].dims.length;++m)r.push(t[1].dims[m])}let a=e.format==="NHWC";r.splice(0,0,t[1].dims[0]),r.splice(a?3:1,0,t[1].dims[1]);let n=e.pads.slice(),o=e.outputShape.slice(),u=e.outputPadding.slice(),l=t[0].dims,i=e.dilations.slice();if(i.reduce((m,b)=>m+b,0)===0){let m=t[0].dims.length-2;i=new Array(m).fill(1)}let c=e.strides.slice();if(c.reduce((m,b)=>m+b,0)===0){let m=t[0].dims.length-2;c=new Array(m).fill(1)}vc(l,r,i,e.autoPad,e.group,n,c,a,u,o);let f=Object.assign({},e),y=e.cacheKey+[r.join("n,"),n.join(","),c.join(","),u.join(","),o.join(","),i.join(",")].join("_");return Object.assign(f,{kernelShape:r,pads:n,outputPadding:u,outputShape:o,dilations:i,strides:c,cacheKey:y}),f},Bs=e=>{let t=dn(e),r=e.format,a=["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][typeof e.autoPad>"u"?0:e.autoPad],n=e.dilations,o=e.group,u=e.kernelShape,l=e.pads,i=e.strides,c=e.wIsConst(),f=e.outputPadding,y=e.outputShape;return J({autoPad:a,format:r,dilations:n,group:o,kernelShape:u,outputPadding:f,outputShape:y,pads:l,strides:i,wIsConst:c,...t})},$c=(e,t)=>{if(!e||e.length!==2&&e.length!==3)throw new Error("Conv requires 2 or 3 inputs");if(e[0].dims.length!==4&&e[0].dims.length!==3)throw new Error("currently only support 2-dimensional conv");if(e[0].dims.length!==e[1].dims.length)throw new Error("filter does not have same dimension as input");let r=e[0].dims[t.format==="NHWC"?e[0].dims.length-1:1],a=e[1].dims[0];if(r!==a)throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");let n=e[1].dims[1]*t.group;if(e.length===3&&(e[2].dims.length!==1||e[2].dims[0]!==n))throw new Error("invalid bias");let o=e[0].dims.length-2;if(t.dilations.reduce((f,y)=>f+y,0)>0&&t.dilations.length!==o)throw new Error(`dilations should be ${o}D`);if(t.strides.reduce((f,y)=>f+y,0)>0&&t.strides.length!==o)throw new Error(`strides should be ${o}D`);if(t.pads.reduce((f,y)=>f+y,0)>0&&t.pads.length!==o*2)throw new Error(`pads should be ${o*2}D`);if(t.outputPadding.length!==o&&t.outputPadding.length!==0)throw new Error(`output_padding should be ${o}D`);if(t.kernelShape.reduce((f,y)=>f+y,0)>0&&t.kernelShape.length!==0&&t.kernelShape.length!==e[1].dims.length-2)throw new Error("invalid kernel shape");if(t.outputShape.length!==0&&t.outputShape.length!==e[0].dims.length-2)throw new Error("invalid output shape")},Sc=[2,3,1,0],xc=(e,t,r)=>{let a=Ps(r,t),n=r.format==="NHWC",o=a.outputShape,u=o[n?3:1],l=t[0].dims[n?3:1];if(a.group!==1||u===1&&l===1){e.compute(ua(t,a));return}let i=o[n?1:2],c=o[n?2:3],f=t[1].dims[2],y=t[1].dims[3],m=n?i*c:u,b=n?u:i*c,w=f*y*l,$=!0,I=e.kernelCustomData.wT??e.compute(it(t[1],Sc),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=I);let x=[t[0],I],C=t.length===3;C&&(!n&&t[2].dims.length===1?x.push(t[2].reshape([t[2].dims[0],1,1])):x.push(t[2])),e.compute(Os(x,a,o,m,b,w,C,$),{inputs:x})},_c=(e,t)=>{let r=t.format==="NHWC",a=[e.inputs[0].reshape(r?[e.inputs[0].dims[0],1,e.inputs[0].dims[1],e.inputs[0].dims[2]]:[e.inputs[0].dims[0],e.inputs[0].dims[1],1,e.inputs[0].dims[2]]),e.inputs[1].reshape([e.inputs[1].dims[0],e.inputs[1].dims[1],1,e.inputs[1].dims[2]])];a.length===3&&a.push(e.inputs[2]);let n=t.kernelShape;(n.length===0||n[0]===0)&&(n=[e.inputs[1].dims[2]]);let o=t.dilations;(o.length===0||o[0]===0)&&(o=[1]);let u=t.strides;(u.length===0||u[0]===0)&&(u=[1]);let l=t.pads;l.length===0&&(l=[0,0]),l=[0,l[0],0,l[1]],u=[1].concat(u),o=[1].concat(o),n=[1].concat(n);let i=Ps({...t,pads:l,strides:u,dilations:o,kernelShape:n},a);e.compute(ua(a,i,c=>r?[c[0],c[2],c[3]]:[c[0],c[1],c[3]]))},Ms=(e,t)=>{$c(e.inputs,t),e.inputs[0].dims.length===3?_c(e,t):xc(e,e.inputs,t)}});var Cc,Ds,Ws,Us=q(()=>{"use strict";De();ye();Re();be();Cc=(e,t,r,a)=>{let n=D.size(t),o=t.length,u=W("input",e,o),l=K("output",e,o),i=r.dataType===6?r.getInt32Array()[0]:Number(r.getBigInt64Array()[0]),c=D.normalizeAxis(i,o),f=y=>{let m=` i32(${u.indicesGet("inputIndices","uniforms.axis")}) `,b=Ce("uniforms.input_shape","uniforms.axis",o),w=a.reverse?m+(a.exclusive?" + 1":""):"0",$=a.reverse?b:m+(a.exclusive?"":" + 1");return`
                ${y.registerUniform("outputSize","u32").registerUniform("axis","u32").declareVariables(u,l)}
                ${y.mainStart()}
                  ${y.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
                  var inputIndices = ${l.offsetToIndices("global_idx")};
                  var sum = ${l.type.value}(0);
                  let first : i32 = ${w};
                  let last : i32 = ${$};
                  for (var i : i32 = first; i < last; i++) {
                    ${u.indicesSet("inputIndices","uniforms.axis","u32(i)")};
                    sum = sum + ${u.getByIndices("inputIndices")};
                  }
                  ${l.setByOffset("global_idx","sum")};
                }`};return{name:"CumSum",shaderCache:{hint:a.cacheKey,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:t,dataType:e}],dispatchGroup:{x:Math.ceil(n/64)},programUniforms:[{type:"uint32",data:n},{type:"int32",data:c},...Y(t),...Y(t)]}),getShaderSource:f}},Ds=(e,t)=>{let r=e.inputs[0].dims,a=e.inputs[0].dataType,n=e.inputs[1];e.compute(Cc(a,r,n,t),{inputs:[0]})},Ws=e=>{let t=e.exclusive===1,r=e.reverse===1;return J({exclusive:t,reverse:r})}});var la,hn,Ns,Ic,Ec,da,ca,Vs,Ac,Hs,Ls,Gs=q(()=>{"use strict";ye();Re();be();la="[a-zA-Z]|\\.\\.\\.",hn="("+la+")+",Ns="^"+hn+"$",Ic="("+hn+",)*"+hn,Ec="^"+Ic+"$",da=class{constructor(t=-1){this.symbolToIndices=new Map,this.inputIndex=t}addSymbol(t,r){let a=this.symbolToIndices.get(t);a===void 0?a=[r]:a.push(r),this.symbolToIndices.set(t,a)}},ca=class{constructor(t,r){this.equation=r;this.hasEllipsis=!1,this.symbolToInfo=new Map,this.lhs=new Array,this.outputDims=[];let[a,n]=r.includes("->")?r.split("->",2):[r,""];if(!a.match(RegExp(Ec)))throw new Error("Invalid LHS term");if(a.split(",").forEach((l,i)=>{let c=t[i].dims.slice();if(!l.match(RegExp(Ns)))throw new Error("Invalid LHS term");let f=this.processTerm(l,!0,c,i);this.lhs.push(f)}),n==="")n+=[...this.symbolToInfo.entries()].filter(([l,i])=>i.count===1||l==="...").map(([l])=>l).join("");else if(!n.match(RegExp(hn)))throw new Error("Invalid RHS");n.match(RegExp(la,"g"))?.forEach(l=>{if(l==="...")this.outputDims=this.outputDims.concat(this.ellipsisDims);else{let i=this.symbolToInfo.get(l);if(i===void 0)throw new Error("Invalid RHS symbol");this.outputDims.push(i.dimValue)}}),this.rhs=this.processTerm(n,!1,this.outputDims)}addSymbol(t,r,a){let n=this.symbolToInfo.get(t);if(n!==void 0){if(n.dimValue!==r&&n.count!==1)throw new Error("Dimension mismatch");n.count++,n.inputIndices.push(a)}else n={count:1,dimValue:r,inputIndices:[a]};this.symbolToInfo.set(t,n)}processTerm(t,r,a,n=-1){let o=a.length,u=!1,l=[],i=0;if(!t.match(RegExp(Ns))&&!r&&t!=="")throw new Error("Invalid LHS term");let c=t.match(RegExp(la,"g")),f=new da(n);return c?.forEach((y,m)=>{if(y==="..."){if(u)throw new Error("Only one ellipsis is allowed per input term");u=!0;let b=o-c.length+1;if(b<0)throw new Error("Ellipsis out of bounds");if(l=a.slice(i,i+b),this.hasEllipsis){if(this.ellipsisDims.length!==l.length||this.ellipsisDims.toString()!==l.toString())throw new Error("Ellipsis dimensions mismatch")}else if(r)this.hasEllipsis=!0,this.ellipsisDims=l;else throw new Error("Ellipsis must be specified in the LHS");for(let w=0;w<l.length;w++){let $=String.fromCharCode("0".charCodeAt(0)+w);f.addSymbol($,m+w),this.addSymbol($,a[i++],n)}}else f.addSymbol(y,m+(this.hasEllipsis?this.ellipsisDims.length-1:0)),this.addSymbol(y,a[i++],n)}),f}},Vs=e=>e+"_max",Ac=(e,t,r,a,n)=>{let u=t.map((b,w)=>e[w]?b.length:b).map((b,w)=>W(`input${w}`,r,b)),l=D.size(n),i=Pe(n.length),c=i?n.length:n,f=K("output",r,c),y=[...a.symbolToInfo.keys()].filter(b=>!a.rhs.symbolToIndices.has(b)),m=b=>{let w=[],$="var prod = 1.0;",I="var sum = 0.0;",x="sum += prod;",C=[],P=[],E=[],z=[],T=a.symbolToInfo.size===a.rhs.symbolToIndices.size;a.symbolToInfo.forEach((N,G)=>{if(a.rhs.symbolToIndices.has(G)){let re=a.rhs.symbolToIndices.get(G)?.[0];re!==void 0&&a.lhs.forEach((B,j)=>{if(N.inputIndices.includes(j)){let pe=B.symbolToIndices.get(G);if(pe===void 0)throw new Error("Invalid symbol error");pe.forEach(Q=>{w.push(`${u[j].indicesSet(`input${j}Indices`,Q,f.indicesGet("outputIndices",re))}`)})}})}else a.lhs.forEach((re,B)=>{if(N.inputIndices.includes(B)){let j=re.symbolToIndices.get(G);if(j===void 0)throw new Error("Invalid symbol error");j.forEach(pe=>{C.push(`${u[B].indicesSet(`input${B}Indices`,pe,`${G}`)}`)}),z.push(`prod *= ${u[B].getByIndices(`input${B}Indices`)};`)}}),P.push(`for(var ${G}: u32 = 0; ${G} < uniforms.${Vs(G)}; ${G}++) {`),E.push("}")});let H=T?[...w,`let sum = ${u.map((N,G)=>N.getByIndices(`input${G}Indices`)).join(" * ")};`]:[...w,I,...P,...C,$,...z,x,...E];return`
            ${b.registerUniforms(y.map(N=>({name:`${Vs(N)}`,type:"u32"}))).registerUniform("outputSize","u32").declareVariables(...u,f)}

            ${b.mainStart()}
            ${b.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
            var outputIndices = ${f.offsetToIndices("global_idx")};
            ${u.map((N,G)=>`var input${G}Indices: ${u[G].type.indices};`).join(`
`)}
            ${H.join(`
`)};
            ${f.setByOffset("global_idx","sum")};
          }`};return{name:"Einsum",shaderCache:{hint:a.equation,inputDependencies:e.map(b=>b?"rank":"dims")},getRunData:()=>{let b=y.filter($=>a.symbolToInfo.has($)).map($=>({type:"uint32",data:a.symbolToInfo.get($)?.dimValue||0}));b.push({type:"uint32",data:l});let w=t.filter(($,I)=>e[I]).map(($,I)=>[...Y($)]).reduce(($,I)=>$.concat(I),b);return i&&w.push(...Y(n)),{outputs:[{dims:n,dataType:r}],dispatchGroup:{x:Math.ceil(l/64)},programUniforms:w}},getShaderSource:m}},Hs=(e,t)=>{let r=new ca(e.inputs,t.equation),a=e.inputs.map((u,l)=>Pe(u.dims.length)),n=r.outputDims,o=e.inputs.map((u,l)=>u.dims);e.compute(Ac(a,o,e.inputs[0].dataType,r,n))},Ls=e=>{let t=e.equation.replace(/\s+/g,"");return J({equation:t})}});var Tc,Fs,Oc,kc,qs,js=q(()=>{"use strict";De();ye();be();Tc=e=>{if(!e||e.length!==2)throw new Error("Expand requires 2 input.");let t=e[0].dims,r=Array.from(e[1].getBigInt64Array(),Number),a=r.length<t.length?0:r.length-t.length,n=t.length<r.length?0:t.length-r.length;for(;a<r.length&&n<t.length;++a,++n)if(r[a]!==t[n]&&r[a]!==1&&t[n]!==1)throw new Error("Expand requires shape to be broadcastable to input")},Fs=(e,t)=>{let r=e.length-t.length,a=[];for(let n=0;n<r;++n)a.push(e[n]);for(let n=0;n<t.length;++n)a.push(t[n]===1?e[n+r]:t[n]);return a},Oc=(e,t)=>e.length>t.length?Fs(e,t):Fs(t,e),kc=e=>{let t=e[0].dims,r=Array.from(e[1].getBigInt64Array(),Number),a=Oc(t,r),n=e[0].dataType,o=n===9?4:1,u=D.size(a)/o,l=Pe(t.length),i=Pe(a.length),c=y=>{let m=l?t.length:t,b=i?a.length:a,w=W("input",n,m,o),$=K("output",n,b,o),I;if(n===9){let x=(C,P,E="")=>`
          let outputIndices${P} = ${$.offsetToIndices(`outputOffset + ${P}u`)};
          let offset${P} = ${w.broadcastedIndicesToOffset(`outputIndices${P}`,$)};
          let index${P} = offset${P} / 4u;
          let component${P} = offset${P} % 4u;
          ${C}[${P}] = ${E}(${w.getByOffset(`index${P}`)}[component${P}]);
        `;I=`
        let outputOffset = global_idx * ${o};
        var data = vec4<u32>(0);
        ${x("data",0,"u32")}
        ${x("data",1,"u32")}
        ${x("data",2,"u32")}
        ${x("data",3,"u32")}
        ${$.setByOffset("global_idx","data")}
      }`}else I=`
        let outputIndices = ${$.offsetToIndices("global_idx")};
        let inputOffset = ${w.broadcastedIndicesToOffset("outputIndices",$)};
        ${$.setByOffset("global_idx",w.getByOffset("inputOffset"))}
      }`;return`
    ${y.registerUniform("vec_size","u32").declareVariables(w,$)}
    ${y.mainStart()}
    ${y.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}
    ${I}`},f=[{type:"uint32",data:u}];return l&&f.push(...Y(t)),i&&f.push(...Y(a)),{name:"Expand",shaderCache:{hint:`${a.length}`,inputDependencies:[l?"rank":"dims"]},getShaderSource:c,getRunData:()=>({outputs:[{dims:a,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(u/64)},programUniforms:f})}},qs=e=>{Tc(e.inputs),e.compute(kc(e.inputs),{inputs:[0]})}});var Rc,Pc,Ks,Ys,Zs=q(()=>{"use strict";De();ye();Re();be();Rc=e=>{if(!e||e.length!==2)throw new Error("Gather requires 2 inputs.")},Pc=(e,t)=>{let r=e[0].dims,a=e[1].dims,n=r.length,o=D.normalizeAxis(t.axis,n),u=r.slice(0);u.splice(o,1,...a);let l=r[o],i=e[0].dataType===9?4:1,c=D.size(u)/i,f=Pe(e[0].dims.length),y=f?e[0].dims.length:e[0].dims,m=Pe(e[1].dims.length),b=m?e[1].dims.length:e[1].dims,w=Pe(u.length),$=w?u.length:u,I=[{type:"uint32",data:c},{type:"int32",data:l},{type:"uint32",data:o}];f&&I.push(...Y(e[0].dims)),m&&I.push(...Y(e[1].dims)),w&&I.push(...Y(u));let x=[];x.push(f?"rank":"dims"),x.push(m?"rank":"dims");let C=P=>{let E=W("data",e[0].dataType,y,i),z=W("inputIndices",e[1].dataType,b),T=K("output",e[0].dataType,$,i),H=G=>{let re=a.length,B=`var indicesIndices${G}  = ${z.type.indices}(0);`;for(let j=0;j<re;j++)B+=`${re>1?`indicesIndices${G}[${j}]`:`indicesIndices${G}`} = ${u.length>1?`outputIndices${G}[uniforms.axis + ${j}]`:`outputIndices${G}`};`;B+=`
          var idx${G} = ${z.getByIndices(`indicesIndices${G}`)};
          if (idx${G} < 0) {
            idx${G} = idx${G} + uniforms.axisDimLimit;
          }
          var dataIndices${G} = ${E.type.indices}(0);
        `;for(let j=0,pe=0;j<n;j++)j===o?(B+=`${n>1?`dataIndices${G}[${j}]`:`dataIndices${G}`} = u32(idx${G});`,pe+=re):(B+=`${n>1?`dataIndices${G}[${j}]`:`dataIndices${G}`} = ${u.length>1?`outputIndices${G}[${pe}]`:`outputIndices${G}`};`,pe++);return B},N;if(e[0].dataType===9){let G=(re,B,j="")=>`
          let outputIndices${B} = ${T.offsetToIndices(`outputOffset + ${B}u`)};
          ${H(B)};
          let offset${B} = ${E.indicesToOffset(`dataIndices${B}`)};
          let index${B} = offset${B} / 4u;
          let component${B} = offset${B} % 4u;
          ${re}[${B}] = ${j}(${E.getByOffset(`index${B}`)}[component${B}]);
        `;N=`
        let outputOffset = global_idx * ${i};
        var value = vec4<u32>(0);
        ${G("value",0,"u32")}
        ${G("value",1,"u32")}
        ${G("value",2,"u32")}
        ${G("value",3,"u32")}
        ${T.setByOffset("global_idx","value")}
      `}else N=`
      let outputIndices = ${T.offsetToIndices("global_idx")};
      ${H("")};
      let value = ${E.getByIndices("dataIndices")};
      ${T.setByOffset("global_idx","value")};
      `;return`
      ${P.registerUniform("outputSize","u32").registerUniform("axisDimLimit","i32").registerUniform("axis","u32").declareVariables(E,z,T)}
      ${P.mainStart()}
        ${P.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
        ${N}
      }`};return{name:"Gather",shaderCache:{hint:t.cacheKey,inputDependencies:x},getRunData:()=>({outputs:[{dims:u,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(c/64)},programUniforms:I}),getShaderSource:C}},Ks=e=>J({axis:e.axis}),Ys=(e,t)=>{let r=e.inputs;Rc(r),e.compute(Pc(e.inputs,t))}});var Bc,Mc,Xs,Js,Qs=q(()=>{"use strict";ye();Re();be();Bc=e=>{if(!e||e.length!==2)throw new Error("GatherElements requires 2 inputs.");if(e[0].dims.length<1)throw new Error("GatherElements requires that the data input be rank >= 1.");if(e[0].dims.length!==e[1].dims.length)throw new Error(`GatherElements requires that the data input and
                     indices input tensors be of same rank.`)},Mc=(e,t)=>{let r=e[0].dims,a=e[0].dataType,n=r.length,o=e[1].dims,u=e[1].dataType,l=D.normalizeAxis(t.axis,n),i=r[l],c=o.slice(0),f=D.size(c),y=W("input",a,n),m=W("indicesInput",u,o.length),b=K("output",a,c.length),w=[{type:"uint32",data:f},{type:"int32",data:i},{type:"uint32",data:l}];return w.push(...Y(r)),w.push(...Y(o)),w.push(...Y(c)),{name:"GatherElements",shaderCache:{inputDependencies:["rank","rank"]},getRunData:()=>({outputs:[{dims:c,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(f/64)},programUniforms:w}),getShaderSource:x=>`
      ${x.registerUniform("outputSize","u32").registerUniform("axisDimLimit","i32").registerUniform("axis","u32").declareVariables(y,m,b)}
      ${x.mainStart()}
      ${x.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}

      let outputIndices = ${b.offsetToIndices("global_idx")};

      var idx = ${m.getByOffset("global_idx")};
      if (idx < 0) {
        idx = idx + uniforms.axisDimLimit;
      }
      var inputIndices = ${y.type.indices}(outputIndices);
      ${y.indicesSet("inputIndices","uniforms.axis","u32(idx)")};
      let value = ${y.getByIndices("inputIndices")};

      ${b.setByOffset("global_idx","value")};
  }`}},Xs=e=>J({axis:e.axis}),Js=(e,t)=>{let r=e.inputs;Bc(r),e.compute(Mc(e.inputs,t))}});var zc,Dc,Wc,eu,tu,ru=q(()=>{"use strict";ye();Re();be();zc=e=>{if(!e)throw new Error("Input is missing");if(e.length<2||e.length>3)throw new Error("Invaid input number.");if(e.length===3&&e[2].dims.length>2)throw new Error("Invalid input shape of C");if(e[0].dataType!==e[1].dataType||e.length===3&&e[0].dataType!==e[2].dataType)throw new Error("Input types are mismatched")},Dc=(e,t,r)=>{if(r.length===0)return"0u";let a=r.length===1&&e!==1||r.length===2&&r[0]!==e,n=r[r.length-1]!==t,o="0u";return a||(o+=`+ m * ${r[r.length-1]}u`),n||(o+="+n"),o},Wc=(e,t)=>{let r=e[0].dims.slice(),a=e[1].dims.slice(),[n,o,u]=tn.getShapeOfGemmResult(r,t.transA,a,t.transB,e.length===3?e[2].dims:void 0),l=[n,o];if(!l)throw new Error("Can't use gemm on the given tensors");let i=D.size(l),c="";t.transA&&t.transB?c="value += a[k * M + m] * b[n * K + k];":t.transA&&!t.transB?c="value += a[k * M + m] * b[k * N + n];":!t.transA&&t.transB?c="value += a[m * K + k] * b[n * K + k];":!t.transA&&!t.transB&&(c="value += a[m * K + k] * b[k * N + n];");let f=Ae(e[0].dataType),y=t.alpha===1?"":"value *= alpha;",m=e.length===3?`value += beta * c[${Dc(n,o,e[2].dims)}];`:"",b=[`@group(0) @binding(0) var<storage, read> a : array<${f}>;`,`@group(0) @binding(1) var<storage, read> b : array<${f}>;`];e.length===3&&b.push(`@group(0) @binding(2) var<storage, read> c : array<${f}>;`);let w=$=>`
  const M: u32 = ${n}u;
  const N: u32 = ${o}u;
  const K: u32 = ${u}u;
  const alpha = ${f}(${t.alpha});
  const beta = ${f}(${t.beta});

  ${b.join(`
`)}
  @group(0) @binding(${e.length}) var<storage, read_write> output : array<${f}>;

  ${$.mainStart()}
    ${$.guardAgainstOutOfBoundsWorkgroupSizes(i)}

    let m = global_id.x / N;
    let n = global_id.x % N;

    var value = ${f}(0);
    for (var k: u32 = 0u; k<${u}u; k++) {
      ${c}
    }

    ${y}
    ${m}
    output[global_id.x] = value;

  }`;return{name:"Gemm",shaderCache:{hint:t.cacheKey},getRunData:()=>({outputs:[{dims:l,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(i/64)}}),getShaderSource:w}},eu=(e,t)=>{zc(e.inputs),e.compute(Wc(e.inputs,t))},tu=e=>J(e)});var Uc,Nc,Vc,Hc,nu,au,iu=q(()=>{"use strict";De();ye();Re();be();Uc={name:"InstanceNormalization"},Nc=(e,t)=>{let r=e[0].dims,a=r,n=2,o=D.sizeToDimension(r,n),u=D.sizeFromDimension(r,n),l=r[1],i=W("x",e[0].dataType,[r[0],r[1],u]),c=W("scale",e[1].dataType,e[1].dims),f=W("bias",e[2].dataType,e[2].dims),y=K("output",e[0].dataType,[r[0],r[1],u]),m=[i,c,f,y],b=i.type.value,w=64,$=I=>`

  const C: u32 = ${l};
  const normSize: u32 = ${u};
  const epsilon: f32 = ${t.epsilon};
  var<workgroup> meanShared : ${b};
  var<workgroup> squaredNormShared : ${b};
  var<workgroup> workgroupShared : array<${b}, ${w}>;
  const workgroupSize = ${w}u;
  ${I.declareVariables(...m)}
  ${I.mainStart(w)}
    let norm = global_idx / workgroupSize;
    let batch = norm / C;
    let channel = norm % C;
    let localIndex = local_id.x;

    // initialize workgroup memory
    var initial: ${b} = 0;
    for (var h = localIndex; h < normSize; h += workgroupSize) {
      initial = initial + ${i.get("batch","channel","h")};
    }
    workgroupShared[localIndex] = initial;
    workgroupBarrier();

    // Calculate the mean of current channel data.
    for (var currSize = workgroupSize >> 1;  currSize > 0; currSize = currSize >> 1) {
      if (localIndex < currSize) {
        workgroupShared[localIndex] = workgroupShared[localIndex] + workgroupShared[localIndex + currSize];
      }
      workgroupBarrier();
    }
    if (localIndex == 0) {
      meanShared = workgroupShared[0] / ${b}(normSize);
    }
    workgroupBarrier();

    // reinitialize workgroup memory.
    initial = 0;
    for (var h = localIndex; h < normSize; h += workgroupSize) {
      let deviation =  ${i.get("batch","channel","h")} - meanShared;
      initial = initial + deviation * deviation;
    }
    workgroupShared[localIndex] = initial;
    workgroupBarrier();

    // Calculate the sum of square of deviation of current channel data.
    for (var currSize = workgroupSize >> 1;  currSize > 0; currSize = currSize >> 1) {
      if (localIndex < currSize) {
        workgroupShared[localIndex] = workgroupShared[localIndex] + workgroupShared[localIndex + currSize];
      }
      workgroupBarrier();
    }
    if (localIndex == 0) {
      squaredNormShared = workgroupShared[0];
    }
    workgroupBarrier();

    let invStdDev = 1 / sqrt(squaredNormShared / ${b}(normSize) + epsilon);
    let channelScale = invStdDev * ${c.getByOffset("channel")};
    let channelShift = ${f.getByOffset("channel")} - meanShared * channelScale;
    for (var h = localIndex; h < normSize; h += workgroupSize) {
      let value = ${i.get("batch","channel","h")} * channelScale + channelShift;
      ${y.set("batch","channel","h","value")};
    }
  }`;return{...Uc,shaderCache:{hint:t.cacheKey},getRunData:()=>({outputs:[{dims:a,dataType:e[0].dataType}],dispatchGroup:{x:o}}),getShaderSource:$}},Vc=(e,t,r,a,n,o,u,l)=>{let i=Je(u),c=W("input",t.dataType,t.dims,i),f=W("scale",r.dataType,r.dims,i),y=W("bias",a.dataType,a.dims,i),m=64,b=i===1?"vec2f":`mat2x${i}f`,w=i===1?"f32":`vec${i}f`,$=(z,T)=>`${b}(${z}, ${T})`,I=n*u/i,x=Math.ceil(o/m),C=z=>`
  const H: u32 = ${o};
  const C: u32 = ${u/i};
  const imageSize: u32 = ${o*u/i};

  ${z.declareVariables(c)}
  @group(0) @binding(1) var<storage, read_write> output : array<${b}>;

  ${z.mainStart(m)}
    let currentImageNumber = global_idx / ${m} / C;
    let currentChannelNumber = (global_idx / ${m}) % C;
    let wgId = global_idx % ${m};
    let wgOffset = wgId * ${x};
    if (wgOffset >= H) {
        return;
    }
    let wgMax = min(wgOffset + ${x}, H);

    let offset = currentImageNumber * imageSize + currentChannelNumber;
    var sum = ${qe("f32",i)};
    var squaredSum = ${qe("f32",i)};
    for (var i: u32 = wgOffset; i < wgMax; i++) {
        let value = ${w}(input[offset + i * C]);
        sum += value;
        squaredSum += value * value;
    }
    output[global_idx] = ${$("sum","squaredSum")};
  }`,P=e.compute({name:"InstanceNormComputeMean",shaderCache:{hint:JSON.stringify({components:i,n,h:o,c:u})},getRunData:()=>({outputs:[{dims:[n,u,m,2],dataType:1}],dispatchGroup:{x:n*u/i}}),getShaderSource:C},{inputs:[t],outputs:[-1]})[0],E=z=>`
  const H: u32 = ${o};
  const C: u32 = ${u/i};
  const imageSize: u32 = ${m*u/i};
  const epsilon: f32 = ${l};

  @group(0) @binding(0) var<storage, read> input : array<${b}>;
  @group(0) @binding(1) var<storage, read> scale : array<${f.type.storage}>;
  @group(0) @binding(2) var<storage, read> bias : array<${y.type.storage}>;
  @group(0) @binding(3) var<storage, read_write> output : array<${b}>;

  ${z.mainStart()}
    ${z.guardAgainstOutOfBoundsWorkgroupSizes(I)}
    let currentImageNumber = global_idx / C;
    let currentChannelNumber = global_idx % C;

    let offset = currentImageNumber * imageSize;
    var sum = ${qe("f32",i)};
    var squaredSum = ${qe("f32",i)};
    for (var i: u32 = 0; i < ${m}; i++) {
        let value = input[offset + i + currentChannelNumber * ${m}];
        sum += value[0];
        squaredSum += value[1];
    }
    sum = sum / f32(H);
    squaredSum = squaredSum / f32(H);
    let invStdDev = 1 / sqrt(squaredSum - sum * sum + epsilon);
    let channelScale = invStdDev * ${w}(scale[currentChannelNumber]);
    let channelShift = ${w}(bias[currentChannelNumber]) - sum * channelScale;

    output[global_idx] = ${$("channelScale","channelShift")};
  }`;return e.compute({name:"InstanceNormComputeChannelScaleShift",shaderCache:{hint:JSON.stringify({components:i,n,h:o,c:u,epsilon:l})},getRunData:()=>({outputs:[{dims:[n,u,2],dataType:1}],dispatchGroup:{x:Math.ceil(I/64)}}),getShaderSource:E},{inputs:[P,r,a],outputs:[-1]})[0]},Hc=(e,t,r)=>{let a=t[0].dims,n=a,o=a[0],u=a[a.length-1],l=D.sizeFromDimension(a,1)/u,i=Je(u),c=D.size(n)/i,f=W("input",t[0].dataType,t[0].dims,i),y=K("output",t[0].dataType,n,i),m=Ae(t[0].dataType),b=i===1?"vec2f":`mat2x${i}f`,w=i===1?m:`vec${i}<${m}>`,$=Vc(e,t[0],t[1],t[2],o,l,u,r.epsilon),I=x=>`
  const H: u32 = ${l};
  const C: u32 = ${u/i};

  @group(0) @binding(0) var<storage, read> input : array<${f.type.storage}>;
  @group(0) @binding(1) var<storage, read> scaleInput : array<${b}>;
  @group(0) @binding(2) var<storage, read_write> output : array<${y.type.storage}>;

  ${x.mainStart()}
    let currentImageNumber = global_idx / (C * H);
    let currentChannelNumber = global_idx % C;

    let scaleOffset = currentImageNumber * C + currentChannelNumber;
    let scale = scaleInput[scaleOffset];
    output[global_idx] = fma(input[global_idx], ${w}(scale[0]), ${w}(scale[1]));
  }`;e.compute({name:"InstanceNormalization",shaderCache:{hint:`${r.cacheKey}`},getRunData:()=>({outputs:[{dims:n,dataType:t[0].dataType}],dispatchGroup:{x:Math.ceil(c/64)}}),getShaderSource:I},{inputs:[t[0],$]})},nu=e=>J({epsilon:e.epsilon,format:e.format}),au=(e,t)=>{t.format==="NHWC"?Hc(e,e.inputs,t):e.compute(Nc(e.inputs,t))}});var Lc,Gc,ou,su,uu=q(()=>{"use strict";De();ye();Re();be();Lc=e=>{if(!e||e.length<2)throw new Error("layerNorm requires at least 2 inputs.")},Gc=(e,t,r)=>{let a=e[0].dims,n=e[1],o=e[2],u=a,l=D.normalizeAxis(t.axis,a.length),i=D.sizeToDimension(a,l),c=D.sizeFromDimension(a,l),f=D.size(n.dims),y=o?D.size(o.dims):0;if(f!==c||o&&y!==c)throw new Error(`Size of X.shape()[axis:] == ${c}.
       Size of scale and bias (if provided) must match this.
       Got scale size of ${f} and bias size of ${y}`);let m=[];for(let E=0;E<a.length;++E)E<l?m.push(a[E]):m.push(1);let b=Je(c),w=Ae(e[0].dataType),$=[W("x",e[0].dataType,e[0].dims,b),W("scale",n.dataType,n.dims,b)];o&&$.push(W("bias",o.dataType,o.dims,b)),$.push(K("output",e[0].dataType,u,b));let I=r>1,x=r>2;I&&$.push(K("meanDataOutput",1,m)),x&&$.push(K("invStdOutput",1,m));let C=E=>`
  const normSize: f32 = ${c};
  const normSizeVectorized: u32 = ${c/b};
  const epsilon: f32 = ${t.epsilon};

  ${E.declareVariables(...$)}
  ${E.mainStart()}
    ${E.guardAgainstOutOfBoundsWorkgroupSizes(i)}
    let offset = global_idx * normSizeVectorized;
    var meanVector = ${qe("f32",b)};
    var meanSquareVector = ${qe("f32",b)};

    for (var h: u32 = 0u; h < normSizeVectorized; h++) {
      let value = ${nt(w,b,"x[h + offset]")};
      meanVector += value;
      meanSquareVector += value * value;
    }
    let mean = ${at("meanVector",b)} / normSize;
    let meanSquare = sqrt(${at("meanSquareVector",b)} 
      / normSize - mean * mean + epsilon);

    for (var j: u32 = 0; j < normSizeVectorized; j++) {
      let f32input = ${nt(w,b,"x[j + offset]")};
      let f32scale = ${nt(w,b,"scale[j]")};
      output[j + offset] = ${$[0].type.value}((f32input - mean) / meanSquare * f32scale
        ${o?`+ ${nt(w,b,"bias[j]")}`:""}
      );
    }

    ${I?"meanDataOutput[global_idx] = mean":""};
    ${x?"invStdOutput[global_idx] = 1 / meanSquare":""};
  }`,P=[{dims:u,dataType:e[0].dataType}];return I&&P.push({dims:m,dataType:1}),x&&P.push({dims:m,dataType:1}),{name:"LayerNormalization",shaderCache:{hint:`${t.cacheKey}|${r}|${e.length}`},getRunData:()=>({outputs:P,dispatchGroup:{x:Math.ceil(i/64)}}),getShaderSource:C}},ou=e=>J({axis:e.axis,epsilon:e.epsilon}),su=(e,t)=>{Lc(e.inputs),e.compute(Gc(e.inputs,t,e.outputCount))}});var Fc,lu,du=q(()=>{"use strict";ye();$r();Fc=e=>{if(!e||e.length!==2)throw new Error("MatMul requires 2 inputs.");if(e[0].dims[e[0].dims.length-1]!==e[1].dims[e[1].dims.length-2])throw new Error("shared dimension does not match.")},lu=e=>{Fc(e.inputs);let t=ct.calcShape(e.inputs[0].dims,e.inputs[1].dims,!0);if(!t)throw new Error("Can't use matmul on the given tensors");e.compute(mn(e.inputs,{activation:"",activationCacheKey:""},t))}});var qc,pu,cu,jc,pa,fu,mu=q(()=>{"use strict";ye();Re();Qr();ea();be();Xt();qc=(e,t)=>{let r=e[0],a=e[1],n=e[2],o=e[3],u=e[4],l=e[5],i=e[6],c=e[7];if(r.dims.length!==3&&r.dims.length!==5)throw new Error("Input query is expected to have 3 or 5 dimensions");let f=!1,y=r.dims[0],m=r.dims[1],b=r.dims.length===3?f?r.dims[2]/3:r.dims[2]:t.numHeads*r.dims[4],w=m,$=0,I=0,x=Math.floor(b/t.numHeads);if(i&&c){if(i.dims.length!==4)throw new Error('Input "past_key" is expected to have 4 dimensions');if(c.dims.length!==4)throw new Error('Input "past_value" is expected to have 4 dimensions');$=i.dims[2],I=i.dims[2]}else if(i||c)throw new Error('Input "past_key" and "past_value" shall be both present or both absent');let C;if(a){if(r.dims.length!==3)throw new Error('Input "query" is expected to have 3 dimensions when key is given');if(a.dims.length<3||a.dims.length>5)throw new Error('Input "key" is expected to have 3, 4, or 5 dimensions');if(r.dims[0]!==a.dims[0])throw new Error('Input "query" and "key" shall have same dim 0 (batch size)');if(a.dims.length===3){if(a.dims[2]!==r.dims[2])throw new Error('Input "query" and "key" shall have same dim 2 (hidden_size)');C=2,w=a.dims[1]}else if(a.dims.length===5){if(a.dims[2]!==t.numHeads||a.dims[3]!==2||a.dims[4]!==x)throw new Error('Expect "key" shape (batch_size, kv_sequence_length, num_heads, 2, head_size) for packed kv');if(n)throw new Error('Expect "value" be none when "key" has packed kv format.');C=5,w=a.dims[1]}else{if(a.dims[1]!==t.numHeads||a.dims[3]!==x)throw new Error('Expect "key" shape (batch_size, num_heads, kv_sequence_length, head_size) for past_key');C=0,w=a.dims[2]}}else{if(r.dims.length!==3&&r.dims.length!==5)throw new Error('Input "query" is expected to have 3 or 5 dimensions when key is empty');if(r.dims.length===5&&(r.dims[2]!==t.numHeads||r.dims[3]!==3))throw new Error('Expect "query" shape (batch_size, kv_sequence_length, num_heads, 3, head_size) for packed kv');C=3}if(o){if(o.dims.length!==1)throw new Error('Input "bias" is expected to have 1 dimension');if(n&&r.dims.length===5&&r.dims[3]===2)throw new Error("bias is not allowed for packed kv.")}let P=0;if(u){P=8;let N=u.dims;throw N.length===1?N[0]===y?P=1:N[0]===3*y+2&&(P=3):N.length===2&&N[0]===y&&N[1]===w&&(P=5),P===8?new Error('Input "key_padding_mask" shape shall be (batch_size) or (batch_size, kv_sequence_length)'):new Error("Mask not supported")}let E=!1,z=b;if(n){if(n.dims.length!==3&&n.dims.length!==4)throw new Error('Input "value" is expected to have 3 or 4 dimensions');if(r.dims[0]!==n.dims[0])throw new Error('Input "query" and "value" shall have same dim 0 (batch_size)');if(n.dims.length===3){if(w!==n.dims[1])throw new Error('Input "key" and "value" shall have the same dim 1 (kv_sequence_length)');z=n.dims[2]}else{if(w!==n.dims[2])throw new Error('Input "past_key" and "past_value" shall have the same dim 2 (kv_sequence_length)');z=n.dims[1]*n.dims[3],E=!0}}let T=$+w,H=!1;if(u)throw new Error("Key padding mask is not supported");if(l)throw new Error("extraAddQk is not supported");if(i)throw new Error("pastKey is not supported");if(c)throw new Error("pastValue is not supported");return{batchSize:y,sequenceLength:m,pastSequenceLength:$,kvSequenceLength:w,totalSequenceLength:T,maxSequenceLength:I,inputHiddenSize:0,hiddenSize:b,vHiddenSize:z,headSize:x,vHeadSize:Math.floor(z/t.numHeads),numHeads:t.numHeads,isUnidirectional:!1,pastPresentShareBuffer:!1,maskFilterValue:t.maskFilterValue,maskType:P,scale:t.scale,broadcastResPosBias:H,passPastInKv:E,qkvFormat:C}},pu=e=>J({...e}),cu=J({perm:[0,2,1,3]}),jc=(e,t,r,a,n,o,u)=>{let l=[a,n,o],i=D.size(l),c=Ae(t.dataType),f=y=>`
  const biasOffset = ${u}u;
  const hiddenSize = ${o}u;

  @group(0) @binding(0) var<storage, read> qkv: array<${c}>;
  @group(0) @binding(1) var<storage, read> bias: array<${c}>;
  @group(0) @binding(2) var<storage, read_write> qkv_with_bias: array<${c}>;

  ${y.mainStart()}
    ${y.guardAgainstOutOfBoundsWorkgroupSizes(i)}
    let biasOffsetIdx = (global_idx % hiddenSize) + biasOffset;

    qkv_with_bias[global_idx] = qkv[global_idx] + bias[biasOffsetIdx];
  }`;return e.compute({name:"MultiHeadAttentionAddBias",shaderCache:{hint:JSON.stringify({batchSize:a,sequenceLength:n,hiddenSize:o,biasOffset:u})},getRunData:()=>({outputs:[{dims:l,dataType:t.dataType,gpuDataType:0}],dispatchGroup:{x:Math.ceil(i/64)}}),getShaderSource:f},{inputs:[t,r],outputs:[-1]})[0]},pa=(e,t,r,a,n,o,u,l)=>{let i=o;if(u){if(a===1)throw new Error("AddBiasReshape is not implemented. Please export your model with packed QKV or KV");return i=jc(e,o,u,t,a,r*n,l),i=i.reshape([t,a,r,n]),e.compute(it(i,cu.perm),{inputs:[i],outputs:[-1]})[0]}else return o.dims.length===3&&(i=o.reshape([t,a,r,n])),e.compute(it(i,cu.perm),{inputs:[i],outputs:[-1]})[0]},fu=(e,t)=>{let r=qc(e.inputs,t);if(e.inputs[0].dims.length===5)throw new Error("Packed QKV is not implemented");if(e.inputs[1]?.dims.length===5)throw new Error("Packed KV is not implemented");let a=e.inputs[1]&&e.inputs[2]&&e.inputs[1].dims.length===4&&e.inputs[2].dims.length===4,n=pa(e,r.batchSize,r.numHeads,r.sequenceLength,r.headSize,e.inputs[0],e.inputs[3],0);if(a)return sn(e,n,e.inputs[1],e.inputs[2],e.inputs[4],void 0,void 0,void 0,e.inputs[5],r,t);let o=pa(e,r.batchSize,r.numHeads,r.kvSequenceLength,r.headSize,e.inputs[1],e.inputs[3],r.hiddenSize),u=pa(e,r.batchSize,r.numHeads,r.kvSequenceLength,r.vHeadSize,e.inputs[2],e.inputs[3],2*r.hiddenSize);sn(e,n,o,u,e.inputs[4],void 0,e.inputs[6],e.inputs[7],e.inputs[5],r,t)}});var Kc,Yc,Zc,Xc,Jc,Qc,ep,tp,rp,hu,gu,yu=q(()=>{"use strict";De();ye();Re();be();Kc=e=>{if(!e||e.length<1)throw new Error("Too few inputs");if(e[0].dataType!==1)throw new Error("Input type must be float.");if(e.length>=2){let t=e[0].dims.length*2===e[1].dims[0];if(e.length===4&&(t=e[3].dims[0]*2===e[1].dims[0]),!t)throw new Error("The pads should be a 1D tensor of shape [2 * input_rank] or [2 * num_axes].")}},Yc=(e,t,r,a,n,o)=>{let u=t.length,l="";for(let i=u-1;i>=0;--i)l+=`
            k = i32(${e.indicesGet("indices",i)}) - ${a[i]};
            if (k < 0) {
              break;
            }
            if (k >= ${t[i]}) {
              break;
            }
            offset += k * ${r[i]};
        `;return`
          value = ${n}(${o});
          for (var i = 0; i < 1; i++) {
            var offset = 0;
            var k = 0;
            ${l}
            value = x[offset];
          }
      `},Zc=(e,t,r,a)=>{let n=t.length,o="";for(let u=n-1;u>=0;--u)o+=`
                k = i32(${e.indicesGet("indices",u)}) - ${a[u]};
                if (k < 0) {
                  k = -k;
                }
                {
                  let _2n_1 = ${2*(t[u]-1)};
                  k = k % _2n_1;
                  if(k >= ${t[u]}) {
                    k = _2n_1 - k;
                  }
                }
                offset += k * ${r[u]};
            `;return`
              var offset = 0;
              var k = 0;
              ${o}
              value = x[offset];
          `},Xc=(e,t,r,a)=>{let n=t.length,o="";for(let u=n-1;u>=0;--u)o+=`
                k = i32(${e.indicesGet("indices",u)}) - ${a[u]};
                if (k < 0) {
                  k = 0;
                }
                if (k >= ${t[u]}) {
                  k = ${t[u]-1};
                }
                offset += k * ${r[u]};
            `;return`
              var offset = 0;
              var k = 0;
              ${o}
              value = x[offset];
          `},Jc=(e,t,r,a)=>{let n=t.length,o="";for(let u=n-1;u>=0;--u)o+=`
                k = i32(${e.indicesGet("indices",u)}) - ${a[u]};
                if (k < 0)  {
                  k += ${t[u]};
                }
                if (k >= ${t[u]}) {
                  k -= ${t[u]};
                }
                offset += k * ${r[u]};
            `;return`
              var offset = 0;
              var k = 0;
              ${o}
              value = x[offset];
          `},Qc=(e,t,r,a,n)=>{switch(a.mode){case 0:return Yc(e,t,r,a.pads,n,a.value);case 1:return Zc(e,t,r,a.pads);case 2:return Xc(e,t,r,a.pads);case 3:return Jc(e,t,r,a.pads);default:throw new Error("Invalid mode")}},ep=(e,t,r,a)=>{let n=t[0].dims,o=D.padShape(n.slice(),r.pads),u=D.size(o),l=D.computeStrides(n),i=K("output",t[0].dataType,o),c=W("x",t[0].dataType,n),f=Qc(i,n,l,r,a);return`
              ${e.declareVariables(c,i)}
              ${e.mainStart()}
              ${e.guardAgainstOutOfBoundsWorkgroupSizes(u)}

              let indices = ${i.offsetToIndices("global_idx")};

              var value = ${a}(0);
              ${f}
              output[global_idx] = value;
          }`},tp=(e,t)=>{let r=D.padShape(e[0].dims.slice(),t.pads);return{name:"Pad",shaderCache:{hint:t.cacheKey},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(D.size(r)/64)}}),getShaderSource:a=>ep(a,e,t,"f32")}},rp=(e,t)=>{if(e.length>1){let r=e[1].getBigInt64Array(),a=e.length>=3&&e[2].data?e[2].getFloat32Array()[0]:0,n=e[0].dims.length,o=new Int32Array(2*n).fill(0);if(e.length>=4){let l=e[3].getBigInt64Array();for(let i=0;i<l.length;i++)o[Number(l[i])]=Number(r[i]),o[Number(l[i])+n]=Number(r[i+l.length])}else r.forEach((l,i)=>o[Number(i)]=Number(l));let u=[];return o.forEach(l=>u.push(l)),J({mode:t.mode,value:a,pads:u})}else return t},hu=(e,t)=>{Kc(e.inputs);let r=rp(e.inputs,t);e.compute(tp(e.inputs,r),{inputs:[0]})},gu=e=>{let t=e.mode,r=e.value,a=e.pads;return J({mode:t,value:r,pads:a})}});var gn,bu,wu,vu,$u,Su,xu,_u,Cu,Iu,Eu,Au,Tu,Ou,ku,Ru,Pu=q(()=>{"use strict";dt();ye();Re();be();gn=e=>{if(Oe.webgpu.validateInputContent&&(!e||e.length!==1))throw new Error("Pool ops requires 1 input.")},bu=(e,t,r)=>{let a=t.format==="NHWC",n=e.dims.slice();a&&n.splice(1,0,n.pop());let o=Object.hasOwnProperty.call(t,"dilations"),u=t.kernelShape.slice(),l=t.strides.slice(),i=o?t.dilations.slice():[],c=t.pads.slice();Ut.adjustPoolAttributes(r,n,u,l,i,c);let f=Ut.computePoolOutputShape(r,n,l,i,u,c,t.autoPad),y=Object.assign({},t);o?Object.assign(y,{kernelShape:u,strides:l,pads:c,dilations:i,cacheKey:t.cacheKey}):Object.assign(y,{kernelShape:u,strides:l,pads:c,cacheKey:t.cacheKey});let m=f.slice();return m.push(m.splice(1,1)[0]),[y,a?m:f]},wu=(e,t)=>{let r=t.format==="NHWC",a=D.size(e),n=D.size(t.kernelShape),o=[{type:"uint32",data:a},{type:"uint32",data:n}],u=[{name:"outputSize",type:"u32"},{name:"kernelSize",type:"u32"}];if(t.kernelShape.length<=2){let l=t.kernelShape[t.kernelShape.length-1],i=t.strides[t.strides.length-1],c=t.pads[t.pads.length/2-1],f=t.pads[t.pads.length-1],y=!!(c+f);o.push({type:"uint32",data:l},{type:"uint32",data:i},{type:"uint32",data:c},{type:"uint32",data:f}),u.push({name:"kw",type:"u32"},{name:"sw",type:"u32"},{name:"pwStart",type:"u32"},{name:"pwEnd",type:"u32"});let m=!1;if(t.kernelShape.length===2){let b=t.kernelShape[t.kernelShape.length-2],w=t.strides[t.strides.length-2],$=t.pads[t.pads.length/2-2],I=t.pads[t.pads.length-2];m=!!($+I),o.push({type:"uint32",data:b},{type:"uint32",data:w},{type:"uint32",data:$},{type:"uint32",data:I}),u.push({name:"kh",type:"u32"},{name:"sh",type:"u32"},{name:"phStart",type:"u32"},{name:"phEnd",type:"u32"})}return[o,u,!0,y,m]}else{if(r)throw new Error("Pooling with kernelShape.length > 2 is not supported for NHWC format.");let l=D.computeStrides(t.kernelShape);o.push({type:"uint32",data:l},{type:"uint32",data:t.pads},{type:"uint32",data:t.strides}),u.push({name:"kernelStrides",type:"u32",length:l.length},{name:"pads",type:"u32",length:t.pads.length},{name:"strides",type:"u32",length:t.strides.length});let i=t.pads.reduce((c,f)=>c+f);return[o,u,!!i,!1,!1]}},vu=(e,t,r,a,n,o,u,l,i,c,f,y)=>{let m=n.format==="NHWC",b=t.type.value,w=K("output",t.type.tensor,a);if(n.kernelShape.length<=2){let $="",I="",x="",C=r-(m?2:1);if(f===!0?$=`
                for (var i: u32 = 0u; i < uniforms.kw; i++) {
                  xIndices[${C}] = indices[${C}] * uniforms.sw - uniforms.pwStart + i;
                  if (xIndices[${C}] < 0 || xIndices[${C}]
                      >= uniforms.x_shape[${C}]) {
                    pad++;
                    continue;
                  }
                  let x_val = x[${t.indicesToOffset("xIndices")}];
                  ${o}
                }`:$=`
                for (var i: u32 = 0u; i < uniforms.kw; i++) {
                  xIndices[${C}] = indices[${C}] * uniforms.sw - uniforms.pwStart + i;
                  let x_val = x[${t.indicesToOffset("xIndices")}];
                  ${o}
                }`,n.kernelShape.length===2){let E=r-(m?3:2);y===!0?I=`
                for (var j: u32 = 0u; j < uniforms.kh; j++) {
                  xIndices[${E}] = indices[${E}] * uniforms.sh - uniforms.phStart + j;
                  if (xIndices[${E}] < 0 || xIndices[${E}] >= uniforms.x_shape[${E}]) {
                    pad += i32(uniforms.kw);
                    continue;
                  }
              `:I=`
                for (var j: u32 = 0u; j < uniforms.kh; j++) {
                  xIndices[${E}] = indices[${E}] * uniforms.sh - uniforms.phStart + j;
                `,x=`
              }
            `}return`
            ${e.registerUniforms(i).declareVariables(t,w)}

            ${e.mainStart()}
              ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}

              let indices = ${w.offsetToIndices("global_idx")};
              var xIndices = ${w.offsetToIndices("global_idx")};

              var value = ${b}(${l});
              var pad = 0;
              ${I}
              ${$}
              ${x}
              ${u}

              output[global_idx] = value;
            }`}else{if(m)throw new Error("Pooling with kernelShape.length > 2 is not supported for NHWC format.");let $=n.kernelShape.length,I=n.pads.length,x="";return c?x=`
                if (xIndices[j] >= uniforms.x_shape[j]) {
                  pad++;
                  isPad = true;
                  break;
                }
              }
              if (!isPad) {
                let x_val = x[${t.indicesToOffset("xIndices")}];
                ${o}
              }`:x=`
              }
              let x_val = x[${t.indicesToOffset("xIndices")}];
              ${o}
            `,`
            ${e.registerUniforms(i).declareVariables(t,w)}

            ${e.mainStart()}
              ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
              let indices = ${w.offsetToIndices("global_idx")};
              var xIndices = ${w.offsetToIndices("global_idx")};

              var offsets: array<u32, ${$}>;

              var value = ${b}(${l});
              var pad = 0;
              var isPad = false;

              for (var i: u32 = 0u; i < uniforms.kernelSize; i++) {
                var offset = i;
                for (var j = 0u; j < ${$-1}u; j++) {
                  offsets[j] = offset / ${Ce("uniforms.kernelStrides","j",$)};
                  offset -= offsets[j] * ${Ce("uniforms.kernelStrides","j",$)};
                }
                offsets[${$-1}] = offset;

                isPad = false;
                for (var j = ${r-$}u; j < ${r}u; j++) {
                  xIndices[j] = indices[j] * ${Ce("uniforms.strides",`j - ${r-$}u`,$)}
                    + offsets[j - ${r-$}u] - ${Ce("uniforms.pads","j - 2u",I)};
                  ${x}
              }
              ${u}

              output[global_idx] = value;
            }`}},$u=e=>({format:e.format,autoPad:["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][e.auto_pad],ceilMode:e.ceil_mode,kernelShape:e.kernel_shape,strides:e.strides,pads:e.pads}),Su=(e,t,r,a)=>{let[n,o]=bu(t,a,r),u=W("x",t.dataType,t.dims.length),l=u.type.value,i="value += x_val;",c="";n.countIncludePad?c+=`value /= ${l}(uniforms.kernelSize);`:c+=`value /= ${l}(i32(uniforms.kernelSize) - pad);`;let[f,y,m,b,w]=wu(o,n);f.push(...Y(t.dims)),f.push(...Y(o));let $=["rank"];return{name:e,shaderCache:{hint:a.cacheKey+m+b+w+n.countIncludePad,inputDependencies:$},getRunData:()=>({outputs:[{dims:o,dataType:t.dataType}],dispatchGroup:{x:Math.ceil(D.size(o)/64)},programUniforms:f}),getShaderSource:I=>vu(I,u,t.dims.length,o.length,n,i,c,0,y,m,b,w)}},xu=e=>{let t=e.count_include_pad!==0,r=$u(e);if(r.ceilMode!==0)throw new Error("using ceil() in shape computation is not yet supported for AveragePool");return J({countIncludePad:t,...r})},_u=(e,t)=>{gn(e.inputs),e.compute(Su("AveragePool",e.inputs[0],!1,t))},Cu={autoPad:"",ceilMode:0,countIncludePad:!1,kernelShape:[],strides:[],pads:[],storageOrder:0,dilations:[],cacheKey:""},Iu=e=>{let t=e.format;return{format:t,...Cu,cacheKey:t}},Eu=(e,t)=>{gn(e.inputs),e.compute(Su("GlobalAveragePool",e.inputs[0],!0,t))},Au=(e,t,r,a)=>{let[n,o]=bu(t,a,r),u=`
      value = max(x_val, value);
    `,l="",i=W("x",t.dataType,t.dims.length),c=["rank"],[f,y,m,b,w]=wu(o,n);return f.push(...Y(t.dims)),f.push(...Y(o)),{name:e,shaderCache:{hint:a.cacheKey+m,inputDependencies:c},getRunData:()=>({outputs:[{dims:o,dataType:t.dataType}],dispatchGroup:{x:Math.ceil(D.size(o)/64)},programUniforms:f}),getShaderSource:$=>vu($,i,t.dims.length,o.length,n,u,l,-1e5,y,m,b,w)}},Tu=(e,t)=>{gn(e.inputs),e.compute(Au("MaxPool",e.inputs[0],!1,t))},Ou=e=>{let t=e.storage_order,r=e.dilations,a=$u(e);if(t!==0)throw new Error("column major storage order is not yet supported for MaxPool");if(a.ceilMode!==0)throw new Error("using ceil() in shape computation is not yet supported for MaxPool");return J({storageOrder:t,dilations:r,...a})},ku=e=>{let t=e.format;return{format:t,...Cu,cacheKey:t}},Ru=(e,t)=>{gn(e.inputs),e.compute(Au("GlobalMaxPool",e.inputs[0],!0,t))}});var ap,ip,Bu,Mu=q(()=>{"use strict";dt();De();be();ap=(e,t,r)=>{let a=e===t,n=e<t&&r<0,o=e>t&&r>0;if(a||n||o)throw new Error("Range these inputs' contents are invalid.")},ip=(e,t,r,a)=>{let n=Math.abs(Math.ceil((t-e)/r)),o=[n],u=n,l=K("output",a,o),i=l.type.storage,c=f=>`
        ${f.declareVariables(l)}
        ${f.mainStart()}
        ${f.guardAgainstOutOfBoundsWorkgroupSizes(u)}
        output[global_idx] = ${i}(${e}) + ${i}(global_idx) * ${i}(${r});
      }`;return{name:"Range",shaderCache:{hint:[e,t,r].map(f=>f.toString()).join("_")},getShaderSource:c,getRunData:()=>({outputs:[{dims:o,dataType:a}],dispatchGroup:{x:Math.ceil(u/64)}})}},Bu=e=>{let t=0,r=0,a=0;e.inputs[0].dataType===6?(t=e.inputs[0].getInt32Array()[0],r=e.inputs[1].getInt32Array()[0],a=e.inputs[2].getInt32Array()[0]):e.inputs[0].dataType===1&&(t=e.inputs[0].getFloat32Array()[0],r=e.inputs[1].getFloat32Array()[0],a=e.inputs[2].getFloat32Array()[0]),Oe.webgpu.validateInputContent&&ap(t,r,a),e.compute(ip(t,r,a,e.inputs[0].dataType),{inputs:[]})}});var op,sp,up,lp,dp,cp,pp,fp,mp,hp,gp,yp,bp,wp,vp,zu,Du,Wu=q(()=>{"use strict";ye();Re();be();op=(e,t)=>{if(e.every(r=>r>0||(()=>{throw new Error("Resize requires scales input values to be positive")})),e.length>0){if(t.mode==="linear"){if(!(e.length===2||e.length===4&&e[0]===1&&e[1]===1||e.length===4&&e[0]===1&&e[3]===1))throw new Error("Resize requires scales input size to be 2 or 4 for linear mode")}else if(t.mode==="cubic"&&!(e.length===2||e.length===4&&e[0]===1&&e[1]===1||e.length===4&&e[0]===1&&e[3]===1))throw new Error("Resize requires scales input size to be 2 or 4 for cubic mode")}},sp=(e,t,r)=>{t.every(n=>n>=0&&n<r||(()=>{throw new Error("Resize requires axes input values to be positive and less than rank")}));let a=new Array(r).fill(1);return t.forEach((n,o)=>a[n]=e[o]),a},up=(e,t,r,a,n,o)=>{let[u,l,i]=r>10?[1,2,3]:[-1,e.length>1?1:-1,-1],c=e[0].dims.length;if(u>0&&e.length>u&&e[u].dims.length>0)e[u].getFloat32Array().forEach(f=>o.push(f));else if(t.coordinateTransformMode==="tf_crop_and_resize")throw new Error("Resize requires RoI input to be specified when coordinateTransformMode is tfCropAndResize");if(l>0&&e.length>l&&e[l].dims.length>0){if(e[l].getFloat32Array().forEach(f=>a.push(f)),a.length!==0&&a.length!==c&&r>=18&&a.length!==t.axes.length)throw new Error("Resize requires scales input size to be same as input rank or axes size for opset 18 and up");op(a,t),t.axes.length>0&&sp(a,t.axes,c).forEach((f,y)=>a[y]=f)}if(i>0&&e.length>i&&(e[i].getBigInt64Array().forEach(f=>n.push(Number(f))),n.length!==c||r>=18&&n.length===t.axes.length))throw new Error("Resize requires sizes input size to be same as input rank or axes size for opset 18 and up");if(t.axes.length>0){if(a.length!==t.axes.length)throw new Error('Resize requires "scales" input size to be of axes rank when axes attributes is specified');if(n.length!==t.axes.length)throw new Error('Resize requires "sizes" input size to be of rank axes rank when axes attributes is specified')}if(typeof a<"u"&&typeof n<"u"&&a.length>0&&n.length>c)throw new Error("Resize requires only of scales or sizes to be specified")},lp=(e,t)=>`fn getOriginalCoordinateFromResizedCoordinate(xResized: ${t}, xScale: ${t}, lengthResized: ${t},
     lengthOriginal: ${t}, roiStart: ${t}, roiEnd: ${t}) -> ${t} { `+(()=>{switch(e){case"asymmetric":return"return xResized / xScale;";case"pytorch_half_pixel":return"if (lengthResized > 1) {                     return (xResized + 0.5) / xScale - 0.5;                   } else {                     return 0.0;                   }";case"tf_half_pixel_for_nn":return"return (xResized + 0.5) / xScale;";case"align_corners":return"if (lengthResized == 1) {                     return 0.0;                   } else {                     return xResized * (lengthOriginal - 1) / (lengthResized - 1);                   }";case"tf_crop_and_resize":return`if (lengthResized > 1) {                     return roiStart * (lengthOriginal - 1) +                           (xResized * (roiEnd - roiStart) * (lengthOriginal - 1)) / (lengthResized - 1);                   } else {                     return 0.5 * (roiStart + roiEnd) * ${t}(lengthOriginal - 1);                   }`;case"half_pixel_symmetric":return["const outputWidth = xScale * lengthResized;","const adjustment = lengthResized / outputWidth;","const center = lengthOriginal / 2;","const offset = center * (1 - adjustment);","return offset + ((xResized + 0.5) / xScale) - 0.5;"].join(`
`);case"half_pixel":return"return ((xResized + 0.5) / xScale) - 0.5;";default:throw new Error(`Coordinate transform mode ${e} is not supported`)}})()+"}",dp=(e,t,r)=>`fn getNearestPixelFromOriginal(xOriginal: ${r}, isDownSample: bool) -> ${r} {`+(()=>{switch(e){case"round_prefer_ceil":return"if (fract(xOriginal) == 0.5) {             return ceil(xOriginal);           } else {             return round(xOriginal);           }";case"floor":return"return floor(xOriginal);";case"ceil":return"return ceil(xOriginal);";case"round_prefer_floor":return"if (fract(xOriginal) == 0.5) {                     return floor(xOriginal);                   } else {                     return round(xOriginal);                   }";case"simple":default:if(t<11)return"if (isDownSample)                     {                       return ceil(xOriginal);                     } else {                       return xOriginal;                     }";throw new Error(`Nearest mode ${e} is not supported`)}})()+"}",cp=(e,t,r)=>{let a=new Array(r).fill(0).concat(new Array(r).fill(1)),n=e.length===0?a:e.slice();return t.length>0?(t.forEach((o,u)=>{a[o]=n[u],a[u+r]=n[t.length+u]}),a):n},pp=(e,t,r,a)=>{let n=[];if(r.length>0)if(a.length>0){if(e.forEach(o=>n.push(o)),Math.max(...a)>e.length)throw new Error("axes is out of bound");a.forEach((o,u)=>n[o]=r[u])}else r.forEach(o=>n.push(o));else{if(t.length===0)throw new Error("Resize requires either scales or sizes.");n=e.map((o,u)=>Math.round(o*t[u]))}return n},fp=(e,t,r)=>{let a=(()=>{switch(r.keepAspectRatioPolicy){case"not_larger":return r.axes.length>0?Math.min(...r.axes.map(o=>t[o]),Number.MAX_VALUE):Math.min(...t,Number.MAX_VALUE);case"not_smaller":return r.axes.length>0?Math.max(...r.axes.map(o=>t[o]),Number.MIN_VALUE):Math.max(...t,Number.MIN_VALUE);default:throw new Error(`Keep aspect ratio policy ${r.keepAspectRatioPolicy} is not supported`)}})();t.fill(1,0,t.length);let n=e.slice();return r.axes.length>0?(r.axes.forEach(o=>t[o]=a),r.axes.forEach(o=>n[o]=Math.round(e[o]*t[o]))):(t.fill(a,0,t.length),n.forEach((o,u)=>n[u]=Math.round(o*t[u]))),n},mp=(e,t,r,a,n)=>`
    fn calculateOriginalIndicesFromOutputIndices(output_indices: ${e.type.indices}) -> array<${e.type.value}, ${r.length}> {
      var original_indices: array<${e.type.value}, ${r.length}>;
      for (var i:u32 = 0; i < ${r.length}; i++) {
        var output_index = ${e.type.value}(${e.indicesGet("output_indices","i")});
        var scale = ${Ce("uniforms.scales","i",a)};
        var roi_low = ${Ce("uniforms.roi","i",n)};
        var roi_hi = ${Ce("uniforms.roi",`i + ${t.length}`,n)};
        if (scale == 1.0) {
          original_indices[i] = output_index;
        } else {
          var input_shape_i = ${e.type.value}(${Ce("uniforms.input_shape","i",t.length)});
          var output_shape_i = ${e.type.value}(${Ce("uniforms.output_shape","i",r.length)});
          original_indices[i] = getOriginalCoordinateFromResizedCoordinate(output_index, scale, output_shape_i,
                                                                           input_shape_i, roi_low, roi_hi);
        }
      }
      return original_indices;
    }`,hp=(e,t,r,a,n,o,u)=>`
    fn calculateInputIndicesFromOutputIndices(output_indices: ${t.type.indices}) -> ${e.type.indices} {
      var input_indices: ${e.type.indices};
      for (var i:u32 = 0; i < ${a.length}; i++) {
        var output_index = ${t.type.value}(${t.indicesGet("output_indices","i")});
        var input_index: u32;
        var scale = ${Ce("uniforms.scales","i",n)};
        if (scale == 1.0) {
          input_index = u32(output_index);
        } else {
          var roi_low = ${Ce("uniforms.roi","i",o)};
          var roi_hi = ${Ce("uniforms.roi",`i + ${r.length}`,o)};
          var input_shape_i = ${t.type.value}(${Ce("uniforms.input_shape","i",r.length)});
          var output_shape_i = ${t.type.value}(${Ce("uniforms.output_shape","i",a.length)});
          var original_idx = getOriginalCoordinateFromResizedCoordinate(output_index, scale, output_shape_i,
                                                                        input_shape_i, roi_low, roi_hi);
          if (!${u} || (original_idx >= 0 && original_idx < input_shape_i)) {
            if (original_idx < 0) {
              input_index = 0;
            } else if (original_idx > (input_shape_i - 1)) {
              input_index = u32(input_shape_i) - 1;
            } else {
              input_index = u32(getNearestPixelFromOriginal(original_idx, scale < 1));
            }
          } else {
            input_index = u32(original_idx);
          }
        }
        ${e.indicesSet("input_indices","i"," input_index")}
      }
      return input_indices;
    }`,gp=(e,t)=>`
    fn checkInputIndices(input_indices: ${e.type.indices}) -> bool {
      for (var i:u32 = 0; i < ${t.length}; i++) {
        var input_index = ${e.indicesGet("input_indices","i")};
        if (input_index < 0 || input_index >= ${Ce("uniforms.input_shape","i",t.length)}) {
          return false;
        }
      }
      return true;
    }`,yp=(e,t,r,a,n,o)=>{let[u,l,i,c]=r.length===2?[-1,0,1,-1]:a[1]===1?[0,2,3,1]:[0,1,2,3],f=e.type.value;return`
    fn getInputValue(batch: u32, channel: u32, row: u32, col: u32) -> ${f} {
      var input_indices: ${e.type.indices};
      ${e.indicesSet("input_indices",l,`max(0, min(row, ${r[l]} - 1))`)};
      ${e.indicesSet("input_indices",i,`max(0, min(col, ${r[i]} - 1))`)};
      if (${r.length} > 2) {
        ${e.indicesSet("input_indices",c,"channel")};
        ${e.indicesSet("input_indices",u,"batch")};
      };
      return ${e.getByIndices("input_indices")};
    }

    fn bilinearInterpolation(output_indices: ${t.type.indices}) -> ${f} {
      var originalIndices = calculateOriginalIndicesFromOutputIndices(output_indices);
      var row:${f} = originalIndices[${l}];
      var col:${f} = originalIndices[${i}];
      if (${n} && (row < 0 || row > (${r[l]} - 1) || col < 0 || col > ${r[i]} - 1)) {
        return ${o};
      }
      row = max(0, min(row, ${r[l]} - 1));
      col = max(0, min(col, ${r[i]} - 1));
      var row1: u32 = u32(row);
      var col1: u32 = u32(col);
      var row2: u32 = u32(row + 1);
      var col2: u32 = u32(col + 1);
      var channel: u32 = 0;
      var batch: u32 = 0;
      if (${r.length>2}) {
        channel = u32(originalIndices[${c}]);
        batch = u32(originalIndices[${u}]);
      }
      var x11: ${f} = getInputValue(batch, channel, row1, col1);
      var x12: ${f} = getInputValue(batch, channel, row1, col2);
      var x21: ${f} = getInputValue(batch, channel, row2, col1);
      var x22: ${f} = getInputValue(batch, channel, row2, col2);
      var dx1: ${f} = row - ${f}(row1);
      var dx2: ${f} = ${f}(row2) - row;
      var dy1 = col - ${f}(col1);
      var dy2 = ${f}(col2) - col;
      return (x11 * dx2 * dy2 + x12 * dx2 * dy1 + x21 * dx1 * dy2 + x22 * dx1 * dy1);
    }`},bp=(e,t,r,a,n,o,u,l,i,c)=>{let[f,y]=r.length===2?[0,1]:n[1]===1?[2,3]:[1,2],m=e.type.value,b=w=>{let $=w===f?"row":"col";return`
      fn ${$}CubicInterpolation(input_indices: ${e.type.indices}, output_indices: ${t.type.indices}) -> ${m} {
        var output_index = ${t.indicesGet("output_indices",w)};
        var originalIdx: ${m} = getOriginalCoordinateFromResizedCoordinate(${m}(output_index), ${n[w]},
        ${m}(${a[w]}), ${m}(${r[w]}), ${o[w]}, ${o[w]} + ${r.length});
        var fractOriginalIdx: ${m} = originalIdx - floor(originalIdx);
        var coefs = getCubicInterpolationCoefs(fractOriginalIdx);

        if (${l} && (originalIdx < 0 || originalIdx > (${r[w]} - 1))) {
          return ${i};
        }
        var data: array<${m}, 4> = array<${m}, 4>(0.0, 0.0, 0.0, 0.0);
        for (var i: i32 = -1; i < 3; i++) {
          var ${$}: ${m} = originalIdx + ${m}(i);
          if (${$} < 0 || ${$} >= ${r[w]}) {
            if (${c}) {
              coefs[i + 1] = 0.0;
              continue;
            } else if (${l}) {
              return ${i};
            } else {
              ${$} = max(0, min(${$}, ${r[w]} - 1));
            }
          }
          var input_indices_copy: ${e.type.indices} = input_indices;
          ${e.indicesSet("input_indices_copy",w,`u32(${$})`)};
          data[i + 1] = ${w===f?e.getByIndices("input_indices_copy"):"rowCubicInterpolation(input_indices_copy, output_indices)"};
        }
        return cubicInterpolation1D(data, coefs);
      }`};return`
    ${b(f)};
    ${b(y)};
  fn getCubicInterpolationCoefs(s: ${m}) -> array<${m}, 4> {
    var absS = abs(s);
    var coeffs: array<${m}, 4> = array<${m}, 4>(0.0, 0.0, 0.0, 0.0);
    var oneMinusAbsS: ${m} = 1.0 - absS;
    var twoMinusAbsS: ${m} = 2.0 - absS;
    var onePlusAbsS: ${m} = 1.0 + absS;
    coeffs[0] = ((${u} * onePlusAbsS - 5 * ${u}) * onePlusAbsS + 8 * ${u}) * onePlusAbsS - 4 * ${u};
    coeffs[1] = ((${u} + 2) * absS - (${u} + 3)) * absS * absS + 1;
    coeffs[2] = ((${u} + 2) * oneMinusAbsS - (${u} + 3)) * oneMinusAbsS * oneMinusAbsS + 1;
    coeffs[3] = ((${u} * twoMinusAbsS - 5 * ${u}) * twoMinusAbsS + 8 * ${u}) * twoMinusAbsS - 4 * ${u};
    return coeffs;
  }

  fn cubicInterpolation1D(x: array<${m}, 4>, coefs: array<${m}, 4>) -> ${m} {
    var coefsSum: ${m} = coefs[0] + coefs[1] + coefs[2] + coefs[3];
    return (x[0] * coefs[0] + x[1] * coefs[1]+ x[2] * coefs[2]+ x[3] * coefs[3]) / coefsSum;
  }

  fn bicubicInterpolation(output_indices: ${t.type.indices}) -> ${m} {
    var input_indices: ${e.type.indices} = output_indices;
    return colCubicInterpolation(input_indices, output_indices);
  }
    `},wp=(e,t,r,a,n,o)=>{let u=e.dims,l=cp(o,t.axes,u.length),i=pp(u,a,n,t.axes),c=a.slice();a.length===0&&(c=u.map((x,C)=>x===0?1:i[C]/x),t.keepAspectRatioPolicy!=="stretch"&&(i=fp(u,c,t)));let f=K("output",e.dataType,i.length),y=W("input",e.dataType,u.length),m=D.size(i),b=u.length===i.length&&u.every((x,C)=>x===i[C]),w=t.coordinateTransformMode==="tf_crop_and_resize",$=y.type.value,I=x=>`
      ${b?"":`
      ${lp(t.coordinateTransformMode,$)};
      ${(()=>{switch(t.mode){case"nearest":return`
              ${gp(y,u)};
              ${dp(t.nearestMode,r,$)};
              ${hp(y,f,u,i,c.length,l.length,w)};
              `;case"linear":return`
              ${mp(f,u,i,c.length,l.length)};
              ${yp(y,f,u,c,w,t.extrapolationValue)};
              `;case"cubic":return`
            ${bp(y,f,u,i,c,l,t.cubicCoeffA,w,t.extrapolationValue,t.excludeOutside)};
            `;default:throw Error("Invalid resize mode")}})()};
      `}
      ${x.registerUniform("output_size","u32").registerUniform("scales","f32",c.length).registerUniform("roi","f32",l.length).declareVariables(y,f)}
      ${x.mainStart()}
        ${x.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
        ${b?"output[global_idx] = input[global_idx];":`
        let output_indices = ${f.offsetToIndices("global_idx")};
        var input_indices: ${y.type.indices};
        ${(()=>{switch(t.mode){case"nearest":return`input_indices = calculateInputIndicesFromOutputIndices(output_indices);
                if (checkInputIndices(input_indices)) {
                  output[global_idx] = ${y.getByIndices("input_indices")};
                } else {
                  output[global_idx] = ${t.extrapolationValue};
                }`;case"linear":return"output[global_idx] = bilinearInterpolation(output_indices);";case"cubic":return"output[global_idx] = bicubicInterpolation(output_indices);";default:throw Error(`Unsupported resize mode: ${t.mode}`)}})()};
        `}
      }`;return{name:"Resize",shaderCache:{hint:`${t.cacheKey}|${r}|${c.length>0?c:""}|${n.length>0?n:""}|${l.length>0?l:""}|${b}`,inputDependencies:["rank"]},getShaderSource:I,getRunData:()=>({outputs:[{dims:i,dataType:e.dataType}],dispatchGroup:{x:Math.ceil(m/64)},programUniforms:[{type:"uint32",data:m},{type:"float32",data:c},{type:"float32",data:l},...Y(u),...Y(i)]})}},vp=e=>{let t=e.customDataBuffer;return new Uint32Array(t,t.byteOffset,1)[0]},zu=(e,t)=>{let r=[],a=[],n=[],o=vp(e);up(e.inputs,t,o,r,a,n),e.compute(wp(e.inputs[0],t,o,r,a,n),{inputs:[0]})},Du=e=>{let t=e.antialias,r=e.axes,a=e.coordinateTransformMode,n=e.cubicCoeffA,o=e.excludeOutside!==0,u=e.extrapolationValue,l=e.keepAspectRatioPolicy,i=e.mode,c=e.nearestMode===""?"simple":e.nearestMode;return J({antialias:t,axes:r,coordinateTransformMode:a,cubicCoeffA:n,excludeOutside:o,extrapolationValue:u,keepAspectRatioPolicy:l,mode:i,nearestMode:c})}});var $p,Sp,Uu,Nu,Vu=q(()=>{"use strict";De();ye();Re();be();$p=e=>{if(!e||e.length<3)throw new Error("layerNorm requires at least 3 inputs.");let t=e[0],r=e[1],a=e[2];if(t.dataType!==r.dataType||t.dataType!==a.dataType)throw new Error("All inputs must have the same data type");if(t.dims.length!==3&&t.dims.length!==2)throw new Error("Input must be 2D or 3D");if(r.dims.length!==3&&r.dims.length!==2)throw new Error("Skip must be 2D or 3D");let n=t.dims[t.dims.length-1],o=t.dims[t.dims.length-2];if(r.dims[r.dims.length-1]!==n)throw new Error("Skip must have the same hidden size as input");if(r.dims[r.dims.length-2]!==o)throw new Error("Skip must have the same sequence length as input");if(a.dims.length!==1)throw new Error("Gamma must be 1D");if(a.dims[a.dims.length-1]!==n)throw new Error("Gamma must have the same hidden size as input");if(e.length>3){let u=e[3];if(u.dims.length!==1)throw new Error("Beta must be 1D");if(u.dims[u.dims.length-1]!==n)throw new Error("Beta must have the same hidden size as input")}if(e.length>4){let u=e[4];if(u.dims.length!==1)throw new Error("Bias must be 1D");if(u.dims[u.dims.length-1]!==n)throw new Error("Bias must have the same hidden size as input")}},Sp=(e,t,r,a)=>{let n=e[0].dims,o=D.size(n),u=n,l=o,i=n.slice(-1)[0],c=a?n.slice(0,-1).concat(1):[],f=e.length>3,y=e.length>4,m=a&&r>1,b=a&&r>2,w=r>3,$=Je(i),I=[W("x",e[0].dataType,e[0].dims,$),W("skip",e[1].dataType,e[1].dims,$),W("gamma",e[2].dataType,e[2].dims,$)];f&&I.push(W("beta",e[3].dataType,e[3].dims,$)),y&&I.push(W("bias",e[4].dataType,e[4].dims,$)),I.push(K("output",e[0].dataType,u,$)),m&&I.push(K("meanOutput",1,c)),b&&I.push(K("invStdOutput",1,c)),w&&I.push(K("inputSkipBiasSum",e[0].dataType,u,$));let x=Ae(e[0].dataType),C=E=>`
      const hiddenSize: f32 = ${i};
      const hiddenSizeVectorized: u32 = ${i/$};
      const epsilon: f32 = ${t.epsilon};

      ${E.declareVariables(...I)}

      ${E.mainStart()}
        ${E.guardAgainstOutOfBoundsWorkgroupSizes(l/i)}
        let offset = global_idx * hiddenSizeVectorized;
        var sum = ${qe("f32",$)};
        var squareSum = ${qe("f32",$)};
        for (var i: u32 = 0; i < hiddenSizeVectorized; i++) {
          let skipValue = skip[offset + i];
          let biasValue = ${y?"bias[i]":"0.0"};
          let inputValue = x[offset + i];
          let value = inputValue + skipValue + biasValue;
          ${w?"inputSkipBiasSum[offset + i] = value;":""}
          output[offset + i] = value;
          let f32Value = ${nt(x,$,"value")};
          sum += f32Value;
          squareSum += f32Value * f32Value;
        }
        let mean = ${at("sum",$)} / hiddenSize;
        let variance = sqrt(${at("squareSum",$)} / hiddenSize - mean * mean + epsilon);
        ${m?"meanOutput[global_idx] = mean;":""}
        ${b?"invStdOutput[global_idx] = 1.0 / variance;":""}
        for (var i: u32 = 0; i < hiddenSizeVectorized; i++) {
          output[offset + i] = (output[offset + i] - ${x}(mean)) / ${x}(variance) * gamma[i]
           + ${f?"beta[i]":"0.0"};
        }
      }`,P=[{dims:u,dataType:e[0].dataType}];return r>1&&P.push({dims:c,dataType:1}),r>2&&P.push({dims:c,dataType:1}),r>3&&P.push({dims:n,dataType:e[0].dataType}),{name:"SkipLayerNormalization",shaderCache:{hint:t.cacheKey},getShaderSource:C,getRunData:()=>({outputs:P,dispatchGroup:{x:Math.ceil(l/i/64)}})}},Uu=(e,t)=>{$p(e.inputs);let a=[0];e.outputCount>1&&a.push(-3),e.outputCount>2&&a.push(-3),e.outputCount>3&&a.push(3),e.compute(Sp(e.inputs,t,e.outputCount,!1),{outputs:a})},Nu=e=>{let t=e.epsilon;return J({epsilon:t})}});var xp,yn,_p,Hu,Cp,Ip,Lu,Gu,Fu=q(()=>{"use strict";De();ye();Re();be();xp=(e,t)=>{if(!e||e.length<1)throw new Error("too few inputs");if(t.axes.length!==0){if(t.axes.length!==t.starts.length||t.axes.length!==t.ends.length)throw new Error("axes, starts and ends must have the same length")}else if(t.starts.length!==t.ends.length)throw new Error("starts and ends must have the same length");e.slice(1).forEach((r,a)=>{if(e[a+1].dataType!==6&&e[a+1].dataType!==7)throw new Error(`Input ${a} must be an array of int32 or int64`)})},yn=(e,t)=>{let r=[];if(e.length>t)if(e[t].dataType===7)e[t].getBigInt64Array().forEach(a=>r.push(Number(a)));else if(e[t].dataType===6)e[t].getInt32Array().forEach(a=>r.push(Number(a)));else throw new Error(`Input ${t} must be an array of int32 or int64`);return r},_p=(e,t)=>{if(e.length>1){let r=yn(e,1),a=yn(e,2),n=yn(e,3);return n.length===0&&(n=[...Array(e[0].dims.length).keys()]),J({starts:r,ends:a,axes:n})}else return t},Hu=(e,t,r,a,n)=>{let o=e;return e<0&&(o+=r[a[t]]),n[t]<0?Math.max(0,Math.min(o,r[a[t]]-1)):Math.max(0,Math.min(o,r[a[t]]))},Cp=(e,t,r)=>`fn calculateInputIndices(output_indices: ${t.type.indices}) -> ${e.type.indices} {
          var input_indices: ${e.type.indices};
          var carry = 0u;
          for (var i = ${r.length}; i >= 0; i--) {
            let input_shape_i = ${Ce("uniforms.input_shape","i",r.length)};
            let steps_i = ${Ce("uniforms.steps","i",r.length)};
            let signs_i = ${Ce("uniforms.signs","i",r.length)};
            let starts_i = ${Ce("uniforms.starts","i",r.length)};
            var output_index = ${t.indicesGet("output_indices","i")};
            var input_index = output_index * steps_i + starts_i + carry;
            carry = input_index / input_shape_i;
            input_index = input_index % input_shape_i;
            if (signs_i < 0) {
              input_index = input_shape_i - input_index - 1u + starts_i;
            }
            ${e.indicesSet("input_indices","i","input_index")};
          }
          return input_indices;
      }`,Ip=(e,t)=>{let r=e[0].dims,a=D.size(r),n=t.axes.length>0?D.normalizeAxes(t.axes,r.length):[...Array(r.length).keys()],o=yn(e,4);o.forEach(x=>x!==0||(()=>{throw new Error("step cannot be 0")})),o.length===0&&(o=Array(n.length).fill(1));let u=t.starts.map((x,C)=>Hu(x,C,r,n,o)),l=t.ends.map((x,C)=>Hu(x,C,r,n,o));if(n.length!==u.length||n.length!==l.length)throw new Error("start, ends and axes should have the same number of elements");if(n.length!==r.length)for(let x=0;x<r.length;++x)n.includes(x)||(u.splice(x,0,0),l.splice(x,0,r[x]),o.splice(x,0,1));let i=o.map(x=>Math.sign(x));o.forEach((x,C,P)=>{if(x<0){let E=(l[C]-u[C])/x,z=u[C],T=z+E*o[C];u[C]=T,l[C]=z,P[C]=-x}});let c=r.slice(0);n.forEach((x,C)=>{c[x]=Math.ceil((l[x]-u[x])/o[x])});let f={dims:c,dataType:e[0].dataType},y=K("output",e[0].dataType,c.length),m=W("input",e[0].dataType,e[0].dims.length),b=D.size(c),w=[{name:"outputSize",type:"u32"},{name:"starts",type:"u32",length:u.length},{name:"signs",type:"i32",length:i.length},{name:"steps",type:"u32",length:o.length}],$=[{type:"uint32",data:b},{type:"uint32",data:u},{type:"int32",data:i},{type:"uint32",data:o},...Y(e[0].dims),...Y(c)],I=x=>`
      ${x.registerUniforms(w).declareVariables(m,y)}
        ${Cp(m,y,r)}
        ${x.mainStart()}
          ${x.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
          let output_indices = ${y.offsetToIndices("global_idx")};
          let input_indices = calculateInputIndices(output_indices);
          ${y.setByOffset("global_idx",m.getByIndices("input_indices"))}
      }`;return{name:"Slice",shaderCache:{hint:`${i.length}_${u.length}_${o.length}`,inputDependencies:["rank"]},getShaderSource:I,getRunData:()=>({outputs:[f],dispatchGroup:{x:Math.ceil(a/64)},programUniforms:$})}},Lu=(e,t)=>{xp(e.inputs,t);let r=_p(e.inputs,t);e.compute(Ip(e.inputs,r),{inputs:[0]})},Gu=e=>{let t=e.starts,r=e.ends,a=e.axes;return J({starts:t,ends:r,axes:a})}});var Ep,Ap,qu,ju,Ku=q(()=>{"use strict";ye();Re();be();Ep=e=>{if(!e||e.length!==1)throw new Error("Softmax op requires 1 input.")},Ap=(e,t)=>{let r=e.dims,a=D.size(r),n=64,o=t.axis;if(o<0&&(o=r.length+o),o<r.length-1)throw new Error("softmax only supports last axis for now.");let u=r[o],l=a/u,i=Je(u),c=u/i,f=(I,x)=>x===4?`max(max(${I}.x, ${I}.y), max(${I}.z, ${I}.w))`:x===2?`max(${I}.x, ${I}.y)`:x===3?`max(max(${I}.x, ${I}.y), ${I}.z)`:I,y=W("x",e.dataType,e.dims,i),m=K("result",e.dataType,e.dims,i),b=y.type.value,w=Ae(e.dataType)==="f32"?`var threadMax = ${b}(-3.402823e+38f);`:`var threadMax = ${b}(-65504.0h);`,$=I=>`
      var<workgroup> rowMaxShared : ${b};
      var<workgroup> rowSumShared : ${b};
      var<workgroup> threadShared : array<${b}, ${n}>;

      fn getValue(row: i32, col: i32, row_stride: i32) -> ${b} {
        let index = row * row_stride + col;
        return x[index];
      }

      fn setValue(row: i32, col: i32, row_stride: i32, value: ${b}) {
        let index = row * row_stride + col;
        result[index] = value;
      }
      ${I.registerUniform("packedCols","i32").declareVariables(y,m)}
      ${I.mainStart()}
        let gindex = i32(global_id.x);
        let lindex = i32(local_id.x);
        const wg = ${n};
        let row = gindex / wg;
        let cols = uniforms.packedCols;
        let row_stride : i32 = uniforms.packedCols;

        // find the rows max
        ${w}
        for (var col = lindex; col < cols; col += wg) {
          let value = getValue(row, col, row_stride);
          threadMax = max(threadMax, value);
        }
        if (lindex < cols) {
          threadShared[lindex] = threadMax;
        }
        workgroupBarrier();

        var reduceSize = min(cols, wg);
        for (var currSize = reduceSize >> 1;  currSize > 0; currSize = reduceSize >> 1) {
          reduceSize = currSize + (reduceSize & 1);
          if (lindex < currSize) {
            threadShared[lindex] = max(threadShared[lindex], threadShared[lindex + reduceSize]);
          }
          workgroupBarrier();
        }
        if (lindex == 0) {
          rowMaxShared = ${b}(${f("threadShared[0]",i)});
        }
        workgroupBarrier();

        // find the rows sum
        var threadSum = ${b}(0.0);
        for (var col = lindex; col < cols; col += wg) {
          let subExp = exp(getValue(row, col, row_stride) - rowMaxShared);
          threadSum += subExp;
        }
        threadShared[lindex] = threadSum;
        workgroupBarrier();

        for (var currSize = wg >> 1;  currSize > 0; currSize = currSize >> 1) {
          if (lindex < currSize) {
            threadShared[lindex] = threadShared[lindex] + threadShared[lindex + currSize];
          }
          workgroupBarrier();
        }
        if (lindex == 0) {
          rowSumShared = ${b}(${at("threadShared[0]",i)});
        }
        workgroupBarrier();

        // calculate final value for each element in the row
        for (var col = lindex; col < cols; col += wg) {
          let value = exp(getValue(row, col, row_stride) - rowMaxShared) / rowSumShared;
          setValue(row, col, row_stride, value);
        }
      }`;return{name:"Softmax",shaderCache:{hint:`${i}`,inputDependencies:["type"]},getRunData:()=>({outputs:[{dims:r,dataType:e.dataType}],dispatchGroup:{x:l},programUniforms:[{type:"uint32",data:c}]}),getShaderSource:$}},qu=(e,t)=>{Ep(e.inputs),e.compute(Ap(e.inputs[0],t))},ju=e=>J({axis:e.axis})});var Tp,Op,kp,Rp,Pp,Yu,Zu,Xu=q(()=>{"use strict";ye();Re();be();Tp=e=>{if(!e||e.length<1)throw new Error("too few inputs")},Op=(e,t)=>{let r=[],a=t.numOutputs;return e[1].dims[0]>0&&(e[1].getBigInt64Array().forEach(n=>r.push(Number(n))),a=r.length),J({numOutputs:a,axis:t.axis,splitSizes:r})},kp=e=>`
fn calculateOutputIndex(index: u32) -> u32 {
    for (var i: u32 = 0u; i < ${e}u; i += 1u ) {
    if (index < ${Ce("uniforms.size_in_split_axis","i",e)}) {
        return i;
    }
    }
    return ${e}u;
}`,Rp=e=>{let t=e.length,r=[];for(let a=0;a<t;++a){let n=e[a].setByIndices("indices","input[global_idx]");t===1?r.push(n):a===0?r.push(`if (output_number == ${a}u) { ${n} }`):a===t-1?r.push(`else { ${n} }`):r.push(`else if (output_number == ${a}) { ${n} }`)}return`
      fn writeBufferData(output_number: u32, indices: ${e[0].type.indices}, global_idx: u32) {
        ${r.join(`
`)}
      }`},Pp=(e,t)=>{let r=e[0].dims,a=D.size(r),n=e[0].dataType,o=D.normalizeAxis(t.axis,r.length),u=new Array(t.numOutputs),l=W("input",n,r),i=new Array(t.numOutputs),c=[],f=[],y=0,m=[{type:"uint32",data:a}];for(let w=0;w<t.numOutputs;w++){y+=t.splitSizes[w],i[w]=y;let $=r.slice();$[t.axis]=t.splitSizes[w],f.push($),u[w]=K(`output${w}`,n,$),c.push({dims:f[w],dataType:e[0].dataType})}m.push({type:"uint32",data:i}),m.push(...Y(r)),f.forEach(w=>m.push(...Y(w)));let b=w=>`
  ${w.registerUniform("input_size","u32").registerUniform("size_in_split_axis","u32",i.length).declareVariables(l,...u)}
  ${kp(i.length)}
  ${Rp(u)}

  ${w.mainStart()}
    ${w.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.input_size")}

    var indices = ${l.offsetToIndices("global_idx")};
    var index = ${l.indicesGet("indices",o)};
    let output_number = calculateOutputIndex(index);
    if (output_number != 0) {
      index -= ${Ce("uniforms.size_in_split_axis","output_number - 1u",i.length)};
      ${l.indicesSet("indices",o,"index")};
    }
    writeBufferData(output_number, indices, global_idx);
  }`;return{name:"Split",shaderCache:{hint:t.cacheKey,inputDependencies:["rank"]},getShaderSource:b,getRunData:()=>({outputs:c,dispatchGroup:{x:Math.ceil(a/64)},programUniforms:m})}},Yu=(e,t)=>{Tp(e.inputs);let r=e.inputs.length===1?t:Op(e.inputs,t);e.compute(Pp(e.inputs,r),{inputs:[0]})},Zu=e=>{let t=e.axis,r=e.splitSizes,a=e.numOutputs<0?r.length:e.numOutputs;if(a!==r.length)throw new Error("numOutputs and splitSizes lengh must be equal");return J({axis:t,numOutputs:a,splitSizes:r})}});var Ju,Bp,Mp,zp,Qu,el=q(()=>{"use strict";De();ye();be();Ju=e=>Array.from(e.getBigInt64Array(),Number),Bp=e=>{if(!e||e.length!==2)throw new Error("Tile requires 2 inputs.");if(e[0].dataType!==1&&e[0].dataType!==6&&e[0].dataType!==12)throw new Error("Tile only support float, int32, and uint32 data types");if(e[1].dataType!==7)throw new Error("Tile `repeats` input should be of int64 data type");if(e[1].dims.length!==1)throw new Error("Tile `repeats` input should be 1-D");if(Ju(e[1]).length!==e[0].dims.length)throw new Error("Tile `repeats` input should have same number of elements as rank of input data tensor")},Mp=(e,t)=>{let r=[];for(let a=0;a<e.length;++a)r.push(e[a]*t[a]);return r},zp=e=>{let t=e[0].dims,r=Ju(e[1]),a=Mp(t,r),n=D.size(a),o=e[0].dataType,u=W("input",o,t.length),l=K("output",o,a.length),i=c=>`
      const inputShape = ${u.indices(...t)};
      ${c.registerUniform("output_size","u32").declareVariables(u,l)}
      ${c.mainStart()}
      ${c.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
      let output_indices = ${l.offsetToIndices("global_idx")};
      var input_indices: ${u.type.indices};
      for (var i = 0; i < ${t.length}; i++) {
        let input_dim_i = ${u.indicesGet("uniforms.input_shape","i")};
        let input_dim_value = ${l.indicesGet("output_indices","i")}  % input_dim_i;

        ${u.indicesSet("input_indices","i","input_dim_value")}
      }
      ${l.setByOffset("global_idx",u.getByIndices("input_indices"))}
    }`;return{name:"Tile",shaderCache:{hint:`${r}`,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:a,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(n/64)},programUniforms:[{type:"uint32",data:n},...Y(e[0].dims),...Y(a)]}),getShaderSource:i}},Qu=e=>{Bp(e.inputs),e.compute(zp(e.inputs),{inputs:[0]})}});var Dp,Wp,tl,rl=q(()=>{"use strict";De();ye();be();Dp=(e,t,r,a,n)=>{let o=K("output_data",n,r.length,4),u=W("a_data",t[1].dataType,t[1].dims.length,4),l=W("b_data",t[2].dataType,t[2].dims.length,4),i=W("c_data",t[0].dataType,t[0].dims.length,4),c,f=(y,m,b)=>`select(${m}, ${y}, ${b})`;if(!a)c=o.setByOffset("global_idx",f(u.getByOffset("global_idx"),l.getByOffset("global_idx"),i.getByOffset("global_idx")));else{let y=(m,b,w="")=>{let $=`a_data[index_a${b}][component_a${b}]`,I=`b_data[index_b${b}][component_b${b}]`,x=`bool(c_data[index_c${b}] & ${4278190080>>>(3-b)*8}u)`;return`
            let output_indices${b} = ${o.offsetToIndices(`global_idx * 4u + ${b}u`)};
            let offset_a${b} = ${u.broadcastedIndicesToOffset(`output_indices${b}`,o)};
            let offset_b${b} = ${l.broadcastedIndicesToOffset(`output_indices${b}`,o)};
            let offset_c${b} = ${i.broadcastedIndicesToOffset(`output_indices${b}`,o)};
            let index_a${b} = offset_a${b} / 4u;
            let index_b${b} = offset_b${b} / 4u;
            let index_c${b} = offset_c${b} / 4u;
            let component_a${b} = offset_a${b} % 4u;
            let component_b${b} = offset_b${b} % 4u;
            ${m}[${b}] = ${w}(${f($,I,x)});
          `};n===9?c=`
            var data = vec4<u32>(0);
            ${y("data",0,"u32")}
            ${y("data",1,"u32")}
            ${y("data",2,"u32")}
            ${y("data",3,"u32")}
            output_data[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));`:c=`
            ${y("output_data[global_idx]",0)}
            ${y("output_data[global_idx]",1)}
            ${y("output_data[global_idx]",2)}
            ${y("output_data[global_idx]",3)}
          `}return`
        ${e.registerUniform("vec_size","u32").declareVariables(i,u,l,o)}
        ${e.mainStart()}
        ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}
        ${c}
      }`},Wp=e=>{let t=e[1].dims,r=e[2].dims,a=e[0].dims,n=e[1].dataType,o=!(D.areEqual(t,r)&&D.areEqual(r,a)),u=t,l=D.size(t),i=Math.ceil(l/4);if(o){let c=ct.calcShape(ct.calcShape(t,r,!1),a,!1);if(!c)throw new Error("Can't perform where op on the given tensors");u=c,l=D.size(u)}return{name:"Where",shaderCache:{inputDependencies:["rank","rank","rank"]},getShaderSource:c=>Dp(c,e,u,o,n),getRunData:()=>({outputs:[{dims:u,dataType:n}],dispatchGroup:{x:Math.ceil(l/64/4)},programUniforms:[{type:"uint32",data:i},...Y(a),...Y(t),...Y(r),...Y(u)]})}},tl=e=>{e.compute(Wp(e.inputs))}});var nl,al=q(()=>{"use strict";_o();ea();Ao();Oo();ls();vs();xs();ia();zs();Us();Gs();js();Zs();Qs();ru();iu();uu();du();mu();yu();Pu();Mu();an();Wu();Vu();Fu();Ku();Xu();el();Xt();ta();rl();nl=new Map([["Abs",[ko]],["Acos",[Ro]],["Acosh",[Po]],["Add",[ds]],["ArgMax",[xo,Qn]],["ArgMin",[So,Qn]],["Asin",[Bo]],["Asinh",[Mo]],["Atan",[zo]],["Atanh",[Do]],["Attention",[Io,Co]],["AveragePool",[_u,xu]],["BatchNormalization",[Eo]],["BiasAdd",[To]],["BiasSplitGelu",[us]],["Cast",[Uo,Wo]],["Ceil",[Vo]],["Clip",[No]],["Concat",[$s,Ss]],["Conv",[sa,oa]],["ConvTranspose",[Ms,Bs]],["Cos",[Ho]],["Cosh",[Lo]],["CumSum",[Ds,Ws]],["Div",[cs]],["Einsum",[Hs,Ls]],["Elu",[Go,un]],["Equal",[ps]],["Erf",[Fo]],["Exp",[qo]],["Expand",[qs]],["Floor",[jo]],["FusedConv",[sa,oa]],["Gather",[Ys,Ks]],["GatherElements",[Js,Xs]],["Gelu",[Ko]],["Gemm",[eu,tu]],["GlobalAveragePool",[Eu,Iu]],["GlobalMaxPool",[Ru,ku]],["Greater",[gs]],["GreaterOrEqual",[bs]],["InstanceNormalization",[au,nu]],["LayerNormalization",[su,ou]],["LeakyRelu",[Yo,un]],["Less",[ys]],["LessOrEqual",[ws]],["Log",[ss]],["MatMul",[lu]],["MaxPool",[Tu,Ou]],["Mul",[fs]],["MultiHeadAttention",[fu,pu]],["Neg",[Xo]],["Not",[Zo]],["Pad",[hu,gu]],["Pow",[ms]],["Range",[Bu]],["Reciprocal",[Jo]],["ReduceMin",[go]],["ReduceMean",[co]],["ReduceMax",[ho]],["ReduceSum",[bo]],["ReduceProd",[yo]],["ReduceL1",[po]],["ReduceL2",[fo]],["ReduceLogSum",[vo]],["ReduceLogSumExp",[mo]],["ReduceSumSquare",[wo]],["Relu",[Qo]],["Resize",[zu,Du]],["Sigmoid",[es]],["Sin",[ts]],["Sinh",[rs]],["Slice",[Lu,Gu]],["SkipLayerNormalization",[Uu,Nu]],["Split",[Yu,Zu]],["Sqrt",[ns]],["Softmax",[qu,ju]],["Sub",[hs]],["Tan",[as]],["Tanh",[is]],["ThresholdedRelu",[os,un]],["Tile",[Qu]],["Transpose",[Xi,Ji]],["Where",[tl]]])});var bn,il=q(()=>{"use strict";De();It();be();bn=class{constructor(t){this.backend=t;this.repo=new Map,this.attributesBound=!1}getArtifact(t){return this.repo.get(t)}setArtifact(t,r){this.repo.set(t,r)}run(t,r,a,n,o,u,l){let i=this.backend.device,c=this.backend.getComputePassEncoder();c.setPipeline(t.computePipeline);let f=[];for(let m of n)f.push({binding:f.length,resource:{buffer:m.buffer}});for(let m of o)f.push({binding:f.length,resource:{buffer:m.buffer}});l&&f.push({binding:f.length,resource:l});let y=i.createBindGroup({layout:t.computePipeline.getBindGroupLayout(0),entries:f,label:t.programInfo.name});if(c.setBindGroup(0,y),c.dispatchWorkgroups(...u),this.backend.pendingDispatchNumber++,this.backend.isQueryEnabled()){typeof this.backend.queryData>"u"&&(this.backend.queryData=this.backend.gpuDataManager.create(this.backend.querySetCount*8,GPUBufferUsage.COPY_SRC|GPUBufferUsage.QUERY_RESOLVE));let m=this.backend.gpuDataManager.create(this.backend.querySetCount*8,GPUBufferUsage.MAP_READ|GPUBufferUsage.COPY_DST);this.backend.endComputePass(),this.backend.getCommandEncoder().resolveQuerySet(this.backend.querySet,0,2,this.backend.queryData.buffer,0),this.backend.getCommandEncoder().copyBufferToBuffer(this.backend.queryData.buffer,0,m.buffer,0,this.backend.querySetCount*8),this.backend.flush();let b=this.backend.currentKernelId,w=this.backend.kernels.get(b);m.buffer.mapAsync(GPUMapMode.READ).then(()=>{let $=new BigUint64Array(m.buffer.getMappedRange()),[I,x]=$,[C,P]=w;m.buffer.unmap(),typeof this.backend.queryTimeBase>"u"&&(this.backend.queryTimeBase=I);let E=Number(I-this.backend.queryTimeBase),z=Number(x-this.backend.queryTimeBase);if(!Number.isSafeInteger(E)||!Number.isSafeInteger(z))throw new RangeError("incorrect timestamp range");if(this.backend.gpuDataManager.release(m.id),this.backend.env.webgpu.profiling?.ondata)this.backend.env.webgpu.profiling.ondata({version:1,inputsMetadata:r.map(T=>({dims:T.dims,dataType:Wt(T.dataType)})),outputsMetadata:a.map(T=>({dims:T.dims,dataType:Wt(T.dataType)})),kernelId:b,kernelType:C,kernelName:P,startTime:E,endTime:z});else{let T="";r.forEach((N,G)=>{T+=`input[${G}]: [${N.dims}] | ${Wt(N.dataType)}, `});let H="";r.forEach((N,G)=>{H+=`output[${G}]: [${N.dims}] | ${Wt(N.dataType)}, `}),console.log(`[profiling] kernel "${b}|${P}|${t.programInfo.name}" ${T}${H}execution time: ${z-E} ns`)}})}this.backend.pendingDispatchNumber>=16&&this.backend.flush()}dispose(){}build(t,r){let a=this.backend.device,n=[];a.features.has("shader-f16")&&n.push("enable f16;");let o=Yi(r),u=t.getShaderSource(o),l=`${n.join(`
`)}
${o.additionalImplementations}
${u}`,i=a.createShaderModule({code:l,label:t.name});Be("verbose",()=>`[WebGPU] ${t.name} shader code: ${l}`);let c=a.createComputePipeline({compute:{module:i,entryPoint:"main"},layout:"auto",label:t.name});return{programInfo:t,computePipeline:c}}normalizeDispatchGroupSize(t){let r=typeof t=="number"?t:t.x,a=typeof t=="number"?1:t.y||1,n=typeof t=="number"?1:t.z||1,o=this.backend.device.limits.maxComputeWorkgroupsPerDimension;if(r<=o&&a<=o&&n<=o)return[r,a,n];let u=r*a*n,l=Math.ceil(Math.sqrt(u));if(l>o){if(l=Math.ceil(Math.cbrt(u)),l>o)throw new Error("Total dispatch size exceeds WebGPU maximum.");return[l,l,l]}else return[l,l,1]}}});var Up,Np,wn,ol=q(()=>{"use strict";It();Hi();qi();al();il();Up=(e,t)=>{if(t.length!==e.length)throw new Error(`inputDependencies length ${t.length} is not equal to inputTensors length ${e.length}.`);let r=[];for(let a=0;a<e.length;++a){let n=e[a].dataType;switch(t[a]){case"none":{r.push("");break}case"type":{r.push(`${n}`);break}case"rank":{let o=e[a].dims.length;r.push(`${n};${o}`);break}case"dims":{let o=e[a].dims.join(",");r.push(`${n};${o}`);break}default:throw new Error(`unsupported input dependency: ${t[a]}`)}}return r.join("|")},Np=(e,t,r)=>{let a=e.name;return e.shaderCache?.hint&&(a+="["+e.shaderCache.hint+"]"),a+=":"+r+`:${Up(t,e.shaderCache?.inputDependencies??new Array(t.length).fill("dims"))}`,a},wn=class{constructor(){this.currentKernelId=null;this.commandEncoder=null;this.computePassEncoder=null;this.pendingDispatchNumber=0;this.querySetCount=2;this.sessionExternalDataMapping=new Map}get currentKernelCustomData(){if(this.currentKernelId===null)throw new Error("currentKernelCustomData(): currentKernelId is null. (should not happen)");let t=this.kernelCustomData.get(this.currentKernelId);return t||(t={},this.kernelCustomData.set(this.currentKernelId,t)),t}async initialize(t){if(!navigator.gpu)throw new Error("WebGpuBackend: WebGPU is not available.");let r=await navigator.gpu.requestAdapter();if(!r)throw new Error("WebGpuBackend: Failed to get GPU adapter.");this.env=t;let a=[],n={requiredLimits:{maxComputeWorkgroupStorageSize:r.limits.maxComputeWorkgroupStorageSize,maxComputeWorkgroupsPerDimension:r.limits.maxComputeWorkgroupsPerDimension,maxStorageBufferBindingSize:r.limits.maxStorageBufferBindingSize,maxBufferSize:r.limits.maxBufferSize,maxComputeInvocationsPerWorkgroup:r.limits.maxComputeInvocationsPerWorkgroup,maxComputeWorkgroupSizeX:r.limits.maxComputeWorkgroupSizeX,maxComputeWorkgroupSizeY:r.limits.maxComputeWorkgroupSizeY,maxComputeWorkgroupSizeZ:r.limits.maxComputeWorkgroupSizeZ},requiredFeatures:a};r.features.has("timestamp-query")&&a.push("timestamp-query"),r.features.has("shader-f16")&&a.push("shader-f16"),this.device=await r.requestDevice(n),this.gpuDataManager=Fi(this),this.programManager=new bn(this),this.kernels=new Map,this.kernelPersistentData=new Map,this.kernelCustomData=new Map,Ni(t.logLevel,!!t.debug),this.device.onuncapturederror=o=>{o.error instanceof GPUValidationError&&console.error(`An uncaught WebGPU validation error was raised: ${o.error.message}`)},Object.defineProperty(this.env.webgpu,"device",{value:this.device})}dispose(){typeof this.querySet<"u"&&this.querySet.destroy(),this.gpuDataManager.dispose()}getCommandEncoder(){return this.commandEncoder||(this.commandEncoder=this.device.createCommandEncoder()),this.commandEncoder}getComputePassEncoder(){if(!this.computePassEncoder){let t={};this.isQueryEnabled()&&(typeof this.querySet>"u"&&(this.querySet=this.device.createQuerySet({type:"timestamp",count:this.querySetCount})),t.timestampWrites={querySet:this.querySet,beginningOfPassWriteIndex:0,endOfPassWriteIndex:1}),this.computePassEncoder=this.getCommandEncoder().beginComputePass(t)}return this.computePassEncoder}endComputePass(){this.computePassEncoder&&(this.computePassEncoder.end(),this.computePassEncoder=null)}flush(){this.commandEncoder&&(this.endComputePass(),this.device.queue.submit([this.getCommandEncoder().finish()]),this.gpuDataManager.refreshPendingBuffers(),this.commandEncoder=null,this.pendingDispatchNumber=0)}isQueryEnabled(){return this.device.features.has("timestamp-query")&&(this.env.webgpu.profiling?.mode==="default"||!this.env.webgpu.profiling?.mode&&this.env.webgpu.profilingMode==="default")}run(t,r,a,n,o){let u=[];for(let C=0;C<r.length;++C){let P=this.gpuDataManager.get(r[C].data);if(!P)throw new Error(`no GPU data for input: ${r[C].data}`);u[C]=P}let{outputs:l,dispatchGroup:i,programUniforms:c}=t.getRunData(r),f=a.length===0?l.map((C,P)=>P):a;if(f.length!==l.length)throw new Error(`Output size ${f.length} must be equal to ${l.length}.`);let y=[],m=[];for(let C=0;C<l.length;++C){if(!Number.isInteger(f[C])||f[C]<-3||f[C]>=l.length)throw new Error(`Invalid output index: ${f[C]}`);if(f[C]===-3)continue;let P=f[C]===-1,E=f[C]===-2,z=P||E?o(l[C].dataType,l[C].dims):n(f[C],l[C].dataType,l[C].dims),T=this.gpuDataManager.get(z.data);if(!T)throw new Error(`no GPU data for output: ${z.data}`);if(P&&this.temporaryData.push(T),E){let H=this.kernelPersistentData.get(this.currentKernelId);H||(H=[],this.kernelPersistentData.set(this.currentKernelId,H)),H.push(T)}y.push(z),m.push(T)}let b;if(c){let C=0,P=[];c.forEach(H=>{let N=typeof H.data=="number"?[H.data]:H.data;if(N.length===0)return;let G=N.length<=2?N.length*4:16;C=Math.ceil(C/G)*G,P.push(C),C+=N.length>4?Math.ceil(N.length/4)*16:N.length*4});let E=16;C=Math.ceil(C/E)*E;let z=new ArrayBuffer(C);c.forEach((H,N)=>{let G=P[N],re=typeof H.data=="number"?[H.data]:H.data;H.type==="int32"?new Int32Array(z,G,re.length).set(re):H.type==="uint32"?new Uint32Array(z,G,re.length).set(re):new Float32Array(z,G,re.length).set(re)});let T=this.gpuDataManager.create(C,GPUBufferUsage.COPY_DST|GPUBufferUsage.UNIFORM);this.device.queue.writeBuffer(T.buffer,0,z,0,C),this.gpuDataManager.release(T.id),b={offset:0,size:C,buffer:T.buffer}}let w=this.programManager.normalizeDispatchGroupSize(i),$=w[1]===1&&w[2]===1,I=Np(t,r,$),x=this.programManager.getArtifact(I);return x||(x=this.programManager.build(t,w),this.programManager.setArtifact(I,x),Be("info",()=>`[artifact] key: ${I}, programName: ${t.name}`)),Be("info",()=>`[ProgramManager] run "${t.name}" (key=${I}) with ${w[0]}x${w[1]}x${w[2]}`),this.programManager.run(x,r,y,u,m,w,b),y}upload(t,r){this.gpuDataManager.upload(t,r)}memcpy(t,r){this.gpuDataManager.memcpy(t,r)}async download(t,r){await this.gpuDataManager.download(t,r)}alloc(t){return this.gpuDataManager.create(t).id}free(t){return this.gpuDataManager.release(t)}createKernel(t,r,a,n){let o=nl.get(t);if(!o)throw new Error(`kernel not implemented: ${t}`);this.kernels.set(r,[t,n,o[0],[o[1],a]])}releaseKernel(t){let r=this.kernelPersistentData.get(t);if(r){for(let a of r)this.gpuDataManager.release(a.id);this.kernelPersistentData.delete(t)}this.kernelCustomData.delete(t),this.kernels.delete(t)}computeKernel(t,r,a){let n=this.kernels.get(t);if(!n)throw new Error(`kernel not created: ${t}`);let[o,u,l,i]=n;if(this.currentKernelId!==null)throw new Error(`kernel "[${o}] ${u}" is not allowed to be called recursively`);this.currentKernelId=t,i[0]&&(i[1]=i[0](i[1]),i[0]=void 0),Be("info",()=>`[WebGPU] Start to run kernel "[${o}] ${u}"...`);let c=this.env.debug;this.temporaryData=[];try{return c&&this.device.pushErrorScope("validation"),l(r,i[1]),0}catch(f){return a.push(Promise.resolve(`[WebGPU] Kernel "[${o}] ${u}" failed. ${f}`)),1}finally{c&&a.push(this.device.popErrorScope().then(f=>f?`GPU validation error for kernel "[${o}] ${u}": ${f.message}`:null));for(let f of this.temporaryData)this.gpuDataManager.release(f.id);this.temporaryData=[],this.currentKernelId=null}}registerBuffer(t,r,a,n){let o=this.sessionExternalDataMapping.get(t);o||(o=new Map,this.sessionExternalDataMapping.set(t,o));let u=o.get(r),l=this.gpuDataManager.registerExternalBuffer(a,n,u?.[1]);return o.set(r,[l,a]),l}unregisterBuffers(t){let r=this.sessionExternalDataMapping.get(t);r&&(r.forEach(a=>this.gpuDataManager.unregisterExternalBuffer(a[1])),this.sessionExternalDataMapping.delete(t))}getBuffer(t){let r=this.gpuDataManager.get(t);if(!r)throw new Error(`no GPU data for buffer: ${t}`);return r.buffer}createDownloader(t,r,a){return async()=>{let n=await qn(this,t,r);return Vi(n.buffer,a)}}}});var sl={};Yt(sl,{init:()=>Vp});var Sr,fa,Vp,ul=q(()=>{"use strict";De();ol();It();ye();Sr=class e{constructor(t,r,a,n){this.module=t;this.dataType=r;this.data=a;this.dims=n}getFloat32Array(){if(this.dataType!==1)throw new Error("Invalid data type");let t=D.size(this.dims);return t===0?new Float32Array:new Float32Array(this.module.HEAP8.buffer,this.data,t)}getBigInt64Array(){if(this.dataType!==7)throw new Error("Invalid data type");let t=D.size(this.dims);return t===0?new BigInt64Array:new BigInt64Array(this.module.HEAP8.buffer,this.data,t)}getInt32Array(){if(this.dataType!==6)throw new Error("Invalid data type");let t=D.size(this.dims);return t===0?new Int32Array:new Int32Array(this.module.HEAP8.buffer,this.data,t)}reshape(t){if(D.size(t)!==D.size(this.dims))throw new Error("Invalid new shape");return new e(this.module,this.dataType,this.data,t)}},fa=class{constructor(t,r,a){this.module=t;this.backend=r;this.customDataOffset=0;this.customDataSize=0;let n=t.HEAPU32,o=a>>2;this.opKernelContext=n[o++];let u=n[o++];this.outputCount=n[o++],this.customDataOffset=n[o++],this.customDataSize=n[o++];let l=[];for(let i=0;i<u;i++){let c=n[o++],f=n[o++],y=n[o++],m=[];for(let b=0;b<y;b++)m.push(n[o++]);l.push(new Sr(t,c,f,m))}this.inputs=l}get kernelCustomData(){return this.backend.currentKernelCustomData}get customDataBuffer(){return this.module.HEAPU8.subarray(this.customDataOffset,this.customDataOffset+this.customDataSize)}compute(t,r){let a=r?.inputs?.map(l=>typeof l=="number"?this.inputs[l]:l)??this.inputs,n=r?.outputs??[],o=(l,i,c)=>new Sr(this.module,i,this.output(l,c),c),u=(l,i)=>{let c=yr(l);if(!c)throw new Error(`Unsupported data type: ${l}`);let f=c*D.size(i);return new Sr(this.module,l,this.backend.gpuDataManager.create(f).id,i)};return this.backend.run(t,a,n,o,u)}output(t,r){let a=this.module.stackSave();try{let n=this.module.stackAlloc((1+r.length)*4),o=n>>2;this.module.HEAPU32[o++]=r.length;for(let u=0;u<r.length;u++)this.module.HEAPU32[o++]=r[u];return this.module._JsepOutput(this.opKernelContext,t,n)}catch(n){throw new Error(`Failed to generate kernel's output[${t}] with dims [${r}]. If you are running with pre-allocated output, please make sure the output type/dims are correct. Error: ${n}`)}finally{this.module.stackRestore(a)}}},Vp=async(e,t)=>{let r=e.jsepInit;if(r&&navigator.gpu){if(!t.wasm.simd)throw new Error("Not supported for WebGPU=ON and SIMD=OFF. Please set `env.wasm.simd` to true when using WebGPU EP");let a=new wn;await a.initialize(t),r(a,n=>a.alloc(n),n=>a.free(n),(n,o,u,l=!1)=>{if(l)Be("verbose",()=>`[WebGPU] jsepCopyGpuToGpu: src=${n}, dst=${o}, size=${u}`),a.memcpy(n,o);else{Be("verbose",()=>`[WebGPU] jsepCopyCpuToGpu: dataOffset=${n}, gpuDataId=${o}, size=${u}`);let i=e.HEAPU8.subarray(n,n+u);a.upload(o,i)}},async(n,o,u)=>{Be("verbose",()=>`[WebGPU] jsepCopyGpuToCpu: gpuDataId=${n}, dataOffset=${o}, size=${u}`),await a.download(n,()=>e.HEAPU8.subarray(o,o+u))},(n,o,u)=>a.createKernel(n,o,u,t.debug||a.isQueryEnabled()?e.UTF8ToString(e._JsepGetNodeName(o)):`${o}`),n=>a.releaseKernel(n),(n,o,u,l)=>{Be("verbose",()=>`[WebGPU] jsepRun: sessionHandle=${u}, kernel=${n}, contextDataOffset=${o}`);let i=new fa(e,a,o);return a.computeKernel(n,i,l)})}}});var dl,Hp,Lp,cl,xr,pl,ma,ha,fl,ml,ll,hl,gl,yl,bl=q(()=>{"use strict";Mi();Di();De();Zt();Zr();dl=!1,Hp=e=>{let t=ze(),r=t.stackSave();try{let a=t.stackAlloc(8);return t._OrtGetInputOutputCount(e,a,a+4)!==0&&ke("Can't get session input/output count."),[t.HEAP32[a/4],t.HEAP32[a/4+1]]}finally{t.stackRestore(r)}},Lp=(e,t)=>{ze()._OrtInit(e,t)!==0&&ke("Can't initialize onnxruntime.")},cl=async e=>{Lp(e.wasm.numThreads,br(e.logLevel));{let t=(ul(),zt(sl)).init;await t(ze(),e)}dl=!0},xr=new Map,pl=()=>dl,ma=e=>{let t=ze(),r=t._malloc(e.byteLength);if(r===0)throw new Error(`Can't create a session. failed to allocate a buffer of size ${e.byteLength}.`);return t.HEAPU8.set(e,r),[r,e.byteLength]},ha=(e,t)=>{let r=ze(),a=0,n=0,o=0,u=[],l=[],i=[];try{[n,u]=zi(t),a=r._OrtCreateSession(e[0],e[1],n),a===0&&ke("Can't create a session.");let[c,f]=Hp(a),y=[],m=[],b=[];for(let $=0;$<c;$++){let I=r._OrtGetInputName(a,$);I===0&&ke("Can't get an input name."),l.push(I),y.push(r.UTF8ToString(I))}for(let $=0;$<f;$++){let I=r._OrtGetOutputName(a,$);I===0&&ke("Can't get an output name."),i.push(I);let x=r.UTF8ToString(I);m.push(x);{let C=typeof t?.preferredOutputLocation=="string"?t.preferredOutputLocation:t?.preferredOutputLocation?.[x]??"cpu";if(C!=="cpu"&&C!=="cpu-pinned"&&C!=="gpu-buffer")throw new Error(`Not supported preferred output location: ${C}.`);b.push(C)}}let w=null;return b.some($=>$==="gpu-buffer")&&(o=r._OrtCreateBinding(a),o===0&&ke("Can't create IO binding."),w={handle:o,outputPreferredLocations:b,outputPreferredLocationsEncoded:b.map($=>Gn($))}),xr.set(a,[a,l,i,w]),[a,y,m]}catch(c){throw l.forEach(f=>r._OrtFree(f)),i.forEach(f=>r._OrtFree(f)),o!==0&&r._OrtReleaseBinding(o),a!==0&&r._OrtReleaseSession(a),c}finally{r._free(e[0]),n!==0&&r._OrtReleaseSessionOptions(n),u.forEach(c=>r._free(c))}},fl=(e,t)=>{let r=ma(e);return ha(r,t)},ml=e=>{let t=ze(),r=xr.get(e);if(!r)throw new Error(`cannot release session. invalid session id: ${e}`);let[a,n,o,u]=r;u&&t._OrtReleaseBinding(u.handle),t.jsepUnregisterBuffers?.(e),n.forEach(l=>t._OrtFree(l)),o.forEach(l=>t._OrtFree(l)),t._OrtReleaseSession(a),xr.delete(e)},ll=(e,t,r,a,n)=>{if(!e){t.push(0);return}let o=ze(),u=e[0],l=e[1],i=e[3],c,f;if(u==="string"&&i==="gpu-buffer")throw new Error("String tensor is not supported on GPU.");if(i==="gpu-buffer"){let b=e[2].gpuBuffer,w=yr(Ln(u));f=l.reduce(($,I)=>$*I,1)*w,c=o.jsepRegisterBuffer(a,n,b,f)}else{let b=e[2];if(Array.isArray(b)){f=4*b.length,c=o._malloc(f),r.push(c);let w=c/4;for(let $=0;$<b.length;$++){if(typeof b[$]!="string")throw new TypeError(`tensor data at index ${$} is not a string`);o.HEAPU32[w++]=Ue(b[$],r)}}else f=b.byteLength,c=o._malloc(f),r.push(c),o.HEAPU8.set(new Uint8Array(b.buffer,b.byteOffset,f),c)}let y=o.stackSave(),m=o.stackAlloc(4*l.length);try{let b=m/4;l.forEach($=>o.HEAP32[b++]=$);let w=o._OrtCreateTensor(Ln(u),c,f,m,l.length,Gn(i));w===0&&ke(`Can't create tensor for input/output. session=${a}, index=${n}.`),t.push(w)}finally{o.stackRestore(y)}},hl=async(e,t,r,a,n,o)=>{let u=ze(),l=xr.get(e);if(!l)throw new Error(`cannot run inference. invalid session id: ${e}`);let[i,c,f,y]=l,m=t.length,b=a.length,w=0,$=[],I=[],x=[],C=[],P=u.stackSave(),E=u.stackAlloc(m*4),z=u.stackAlloc(m*4),T=u.stackAlloc(b*4),H=u.stackAlloc(b*4);try{[w,$]=Bi(o);for(let Q=0;Q<m;Q++)ll(r[Q],I,C,e,t[Q]);for(let Q=0;Q<b;Q++)ll(n[Q],x,C,e,m+a[Q]);let N=E/4,G=z/4,re=T/4,B=H/4;for(let Q=0;Q<m;Q++)u.HEAPU32[N++]=I[Q],u.HEAPU32[G++]=c[t[Q]];for(let Q=0;Q<b;Q++)u.HEAPU32[re++]=x[Q],u.HEAPU32[B++]=f[a[Q]];if(y){let{handle:Q,outputPreferredLocations:$e,outputPreferredLocationsEncoded:Z}=y;if(c.length!==m)throw new Error(`input count from feeds (${m}) is expected to be always equal to model's input count (${c.length}).`);for(let Se=0;Se<m;Se++){let Ie=t[Se];await u._OrtBindInput(Q,c[Ie],I[Se])!==0&&ke(`Can't bind input[${Se}] for session=${e}.`)}for(let Se=0;Se<b;Se++){let Ie=a[Se];n[Se]?.[3]?u._OrtBindOutput(Q,f[Ie],x[Se],0)!==0&&ke(`Can't bind pre-allocated output[${Se}] for session=${e}.`):u._OrtBindOutput(Q,f[Ie],0,Z[Ie])!==0&&ke(`Can't bind output[${Se}] to ${$e[Se]} for session=${e}.`)}}let j;y?j=await u._OrtRunWithBinding(i,y.handle,b,T,w):j=await u._OrtRun(i,z,E,m,H,b,T,w),j!==0&&ke("failed to call OrtRun().");let pe=[];for(let Q=0;Q<b;Q++){let $e=u.HEAPU32[T/4+Q];if($e===x[Q]){pe.push(n[Q]);continue}let Z=u.stackSave(),Se=u.stackAlloc(4*4),Ie=!1,Ee,he=0;try{u._OrtGetTensorData($e,Se,Se+4,Se+8,Se+12)!==0&&ke(`Can't access output tensor data on index ${Q}.`);let Ge=Se/4,je=u.HEAPU32[Ge++];he=u.HEAPU32[Ge++];let F=u.HEAPU32[Ge++],de=u.HEAPU32[Ge++],me=[];for(let Me=0;Me<de;Me++)me.push(u.HEAPU32[F/4+Me]);u._OrtFree(F);let He=me.reduce((Me,Ne)=>Me*Ne,1);Ee=Wt(je);let Xe=y?.outputPreferredLocations[a[Q]];if(Ee==="string"){if(Xe==="gpu-buffer")throw new Error("String tensor is not supported on GPU.");let Me=[],Ne=he/4;for(let Ke=0;Ke<He;Ke++){let st=u.HEAPU32[Ne++],et=Ke===He-1?void 0:u.HEAPU32[Ne]-st;Me.push(u.UTF8ToString(st,et))}pe.push([Ee,me,Me,"cpu"])}else if(Xe==="gpu-buffer"&&He>0){let Me=u.jsepGetBuffer(he),Ne=yr(je);if(Ne===void 0||!Jr(Ee))throw new Error(`Unsupported data type: ${Ee}`);Ie=!0,pe.push([Ee,me,{gpuBuffer:Me,download:u.jsepCreateDownloader(Me,He*Ne,Ee),dispose:()=>{u._OrtReleaseTensor($e)}},"gpu-buffer"])}else{let Me=Xr(Ee),Ne=new Me(He);new Uint8Array(Ne.buffer,Ne.byteOffset,Ne.byteLength).set(u.HEAPU8.subarray(he,he+Ne.byteLength)),pe.push([Ee,me,Ne,"cpu"])}}finally{u.stackRestore(Z),Ee==="string"&&he&&u._free(he),Ie||u._OrtReleaseTensor($e)}}return y&&u._OrtClearBoundOutputs(y.handle),pe}finally{u.stackRestore(P),I.forEach(N=>u._OrtReleaseTensor(N)),x.forEach(N=>u._OrtReleaseTensor(N)),C.forEach(N=>u._free(N)),w!==0&&u._OrtReleaseRunOptions(w),$.forEach(N=>u._free(N))}},gl=e=>{let t=ze(),r=xr.get(e);if(!r)throw new Error("invalid session id");let a=r[0],n=t._OrtEndProfiling(a);n===0&&ke("Can't get an profile file name."),t._OrtFree(n)},yl=e=>{let t=[];for(let r of e){let a=r[2];!Array.isArray(a)&&"buffer"in a&&t.push(a.buffer)}return t}});var wl=Kt((Qb,Fp)=>{Fp.exports='/*!\n * ONNX Runtime Web v1.17.0\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n"use strict";(()=>{var dn=Object.defineProperty;var Vu=Object.getOwnPropertyDescriptor;var Wu=Object.getOwnPropertyNames;var Uu=Object.prototype.hasOwnProperty;var j=(e,t)=>()=>(e&&(t=e(e=0)),t);var or=(e,t)=>()=>(t||e((t={exports:{}}).exports,t),t.exports),Or=(e,t)=>{for(var r in t)dn(e,r,{get:t[r],enumerable:!0})},Nu=(e,t,r,o)=>{if(t&&typeof t=="object"||typeof t=="function")for(let n of Wu(t))!Uu.call(e,n)&&n!==r&&dn(e,n,{get:()=>t[n],enumerable:!(o=Vu(t,n))||o.enumerable});return e};var Vt=e=>Nu(dn({},"__esModule",{value:!0}),e);var cn={};Or(cn,{readFile:()=>Hu});var Hu,pn=j(()=>{Hu=void 0});var mn={};Or(mn,{join:()=>Gu});var Gu,fn=j(()=>{Gu=void 0});var ho=or((fo,hn)=>{"use strict";var mo=(()=>{var e=typeof document<"u"&&document.currentScript?document.currentScript.src:void 0;return typeof __filename<"u"&&(e=e||__filename),function(t={}){var r=t,o,n;r.ready=new Promise((l,m)=>{o=l,n=m}),r.jsepInit=(l,m,b,C,O,G,N,le)=>{r.Za=l,r.Oa=m,r.Qa=b,r.Ja=C,r.Pa=O,r.ra=G,r.Ra=N,r.Sa=le,m=(X,oe,ee)=>(...me)=>{let we=Xe,k=oe?.();me=X(...me);let ie=oe?.();return k!==ie&&(X=ie,ee(k),oe=ee=null),Xe!=we?vr():me},b=X=>async(...oe)=>{try{if(r.Da)throw Error("Session already started");let ee=r.Da={Ta:oe[0],errors:[]},me=await X(...oe);if(r.Da!==ee)throw Error("Session mismatch");l.flush();let we=ee.errors;if(0<we.length){let k=await Promise.all(we);if(k=k.filter(ie=>ie),0<k.length)throw Error(k.join(`\n`))}return me}finally{r.Da=null}},r._OrtRun=b(m(r._OrtRun,()=>r._OrtRun,X=>r._OrtRun=X)),r._OrtRunWithBinding=b(m(r._OrtRunWithBinding,()=>r._OrtRunWithBinding,X=>r._OrtRunWithBinding=X)),r._OrtBindInput=m(r._OrtBindInput,()=>r._OrtBindInput,X=>r._OrtBindInput=X),r.jsepRegisterBuffer=(X,oe,ee,me)=>l.registerBuffer(X,oe,ee,me),r.jsepUnregisterBuffers=X=>{l.unregisterBuffers(X)},r.jsepGetBuffer=X=>l.getBuffer(X),r.jsepCreateDownloader=(X,oe,ee)=>l.createDownloader(X,oe,ee)};var s=Object.assign({},r),u="./this.program",d=(l,m)=>{throw m},a=typeof window=="object",p=typeof importScripts=="function",h=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string",v="",g,w,y;if(h){var S=(pn(),Vt(cn)),I=(fn(),Vt(mn));v=p?I.dirname(v)+"/":__dirname+"/",g=(l,m)=>(l=l.startsWith("file://")?new URL(l):I.normalize(l),S.readFileSync(l,m?void 0:"utf8")),y=l=>(l=g(l,!0),l.buffer||(l=new Uint8Array(l)),l),w=(l,m,b,C=!0)=>{l=l.startsWith("file://")?new URL(l):I.normalize(l),S.readFile(l,C?void 0:"utf8",(O,G)=>{O?b(O):m(C?G.buffer:G)})},!r.thisProgram&&1<process.argv.length&&(u=process.argv[1].replace(/\\\\/g,"/")),process.argv.slice(2),d=(l,m)=>{throw process.exitCode=l,m},r.inspect=()=>"[Emscripten Module object]"}else(a||p)&&(p?v=self.location.href:typeof document<"u"&&document.currentScript&&(v=document.currentScript.src),e&&(v=e),v.indexOf("blob:")!==0?v=v.substr(0,v.replace(/[?#].*/,"").lastIndexOf("/")+1):v="",g=l=>{var m=new XMLHttpRequest;return m.open("GET",l,!1),m.send(null),m.responseText},p&&(y=l=>{var m=new XMLHttpRequest;return m.open("GET",l,!1),m.responseType="arraybuffer",m.send(null),new Uint8Array(m.response)}),w=(l,m,b)=>{var C=new XMLHttpRequest;C.open("GET",l,!0),C.responseType="arraybuffer",C.onload=()=>{C.status==200||C.status==0&&C.response?m(C.response):b()},C.onerror=b,C.send(null)});var x=r.print||console.log.bind(console),_=r.printErr||console.error.bind(console);Object.assign(r,s),s=null,r.thisProgram&&(u=r.thisProgram),r.quit&&(d=r.quit);var B;r.wasmBinary&&(B=r.wasmBinary);var E=r.noExitRuntime||!0;typeof WebAssembly!="object"&&Fe("no native wasm support detected");var z,T,H=!1,U,L,re,R,q,pe,J;function $e(){var l=z.buffer;r.HEAP8=L=new Int8Array(l),r.HEAP16=new Int16Array(l),r.HEAP32=R=new Int32Array(l),r.HEAPU8=re=new Uint8Array(l),r.HEAPU16=new Uint16Array(l),r.HEAPU32=q=new Uint32Array(l),r.HEAPF32=pe=new Float32Array(l),r.HEAPF64=J=new Float64Array(l)}var Z=[],Se=[],Ie=[];function Ae(){var l=r.preRun.shift();Z.unshift(l)}var he=0,rt=null,Ge=null;function Fe(l){throw r.onAbort&&r.onAbort(l),l="Aborted("+l+")",_(l),H=!0,U=1,l=new WebAssembly.RuntimeError(l+". Build with -sASSERTIONS for more info."),n(l),l}function F(l){return l.startsWith("data:application/octet-stream;base64,")}var de;if(de="ort-wasm-simd.wasm",!F(de)){var fe=de;de=r.locateFile?r.locateFile(fe,v):v+fe}function Ne(l){if(l==de&&B)return new Uint8Array(B);if(y)return y(l);throw"both async and sync fetching of the wasm failed"}function Ke(l){if(!B&&(a||p)){if(typeof fetch=="function"&&!l.startsWith("file://"))return fetch(l,{credentials:"same-origin"}).then(m=>{if(!m.ok)throw"failed to load wasm binary file at \'"+l+"\'";return m.arrayBuffer()}).catch(()=>Ne(l));if(w)return new Promise((m,b)=>{w(l,C=>m(new Uint8Array(C)),b)})}return Promise.resolve().then(()=>Ne(l))}function Be(l,m,b){return Ke(l).then(C=>WebAssembly.instantiate(C,m)).then(C=>C).then(b,C=>{_("failed to asynchronously prepare wasm: "+C),Fe(C)})}function We(l,m){var b=de;return B||typeof WebAssembly.instantiateStreaming!="function"||F(b)||b.startsWith("file://")||h||typeof fetch!="function"?Be(b,l,m):fetch(b,{credentials:"same-origin"}).then(C=>WebAssembly.instantiateStreaming(C,l).then(m,function(O){return _("wasm streaming compile failed: "+O),_("falling back to ArrayBuffer instantiation"),Be(b,l,m)}))}var qe,nt={913040:l=>{r.ra("Abs",l,void 0)},913091:l=>{r.ra("Neg",l,void 0)},913142:l=>{r.ra("Floor",l,void 0)},913195:l=>{r.ra("Ceil",l,void 0)},913247:l=>{r.ra("Reciprocal",l,void 0)},913305:l=>{r.ra("Sqrt",l,void 0)},913357:l=>{r.ra("Exp",l,void 0)},913408:l=>{r.ra("Erf",l,void 0)},913459:l=>{r.ra("Sigmoid",l,void 0)},913514:l=>{r.ra("Log",l,void 0)},913565:l=>{r.ra("Sin",l,void 0)},913616:l=>{r.ra("Cos",l,void 0)},913667:l=>{r.ra("Tan",l,void 0)},913718:l=>{r.ra("Asin",l,void 0)},913770:l=>{r.ra("Acos",l,void 0)},913822:l=>{r.ra("Atan",l,void 0)},913874:l=>{r.ra("Sinh",l,void 0)},913926:l=>{r.ra("Cosh",l,void 0)},913978:l=>{r.ra("Asinh",l,void 0)},914031:l=>{r.ra("Acosh",l,void 0)},914084:l=>{r.ra("Atanh",l,void 0)},914137:l=>{r.ra("Tanh",l,void 0)},914189:l=>{r.ra("Not",l,void 0)},914240:(l,m,b)=>{r.ra("Clip",l,{min:m,max:b})},914309:l=>{r.ra("Clip",l,void 0)},914361:(l,m)=>{r.ra("Elu",l,{alpha:m})},914419:l=>{r.ra("Relu",l,void 0)},914471:(l,m)=>{r.ra("LeakyRelu",l,{alpha:m})},914535:(l,m)=>{r.ra("ThresholdedRelu",l,{alpha:m})},914605:(l,m)=>{r.ra("Cast",l,{to:m})},914663:l=>{r.ra("Add",l,void 0)},914714:l=>{r.ra("Sub",l,void 0)},914765:l=>{r.ra("Mul",l,void 0)},914816:l=>{r.ra("Div",l,void 0)},914867:l=>{r.ra("Pow",l,void 0)},914918:l=>{r.ra("Equal",l,void 0)},914971:l=>{r.ra("Greater",l,void 0)},915026:l=>{r.ra("GreaterOrEqual",l,void 0)},915088:l=>{r.ra("Less",l,void 0)},915140:l=>{r.ra("LessOrEqual",l,void 0)},915199:(l,m,b,C,O)=>{r.ra("ReduceMean",l,{keepDims:!!m,noopWithEmptyAxes:!!b,axes:C?Array.from(R.subarray(O>>>0,O+C>>>0)):[]})},915363:(l,m,b,C,O)=>{r.ra("ReduceMax",l,{keepDims:!!m,noopWithEmptyAxes:!!b,axes:C?Array.from(R.subarray(O>>>0,O+C>>>0)):[]})},915526:(l,m,b,C,O)=>{r.ra("ReduceMin",l,{keepDims:!!m,noopWithEmptyAxes:!!b,axes:C?Array.from(R.subarray(O>>>0,O+C>>>0)):[]})},915689:(l,m,b,C,O)=>{r.ra("ReduceProd",l,{keepDims:!!m,noopWithEmptyAxes:!!b,axes:C?Array.from(R.subarray(O>>>0,O+C>>>0)):[]})},915853:(l,m,b,C,O)=>{r.ra("ReduceSum",l,{keepDims:!!m,noopWithEmptyAxes:!!b,axes:C?Array.from(R.subarray(O>>>0,O+C>>>0)):[]})},916016:(l,m,b,C,O)=>{r.ra("ReduceL1",l,{keepDims:!!m,noopWithEmptyAxes:!!b,axes:C?Array.from(R.subarray(O>>>0,O+C>>>0)):[]})},916178:(l,m,b,C,O)=>{r.ra("ReduceL2",l,{keepDims:!!m,noopWithEmptyAxes:!!b,axes:C?Array.from(R.subarray(O>>>0,O+C>>>0)):[]})},916340:(l,m,b,C,O)=>{r.ra("ReduceLogSum",l,{keepDims:!!m,noopWithEmptyAxes:!!b,axes:C?Array.from(R.subarray(O>>>0,O+C>>>0)):[]})},916506:(l,m,b,C,O)=>{r.ra("ReduceSumSquare",l,{keepDims:!!m,noopWithEmptyAxes:!!b,axes:C?Array.from(R.subarray(O>>>0,O+C>>>0)):[]})},916675:(l,m,b,C,O)=>{r.ra("ReduceLogSumExp",l,{keepDims:!!m,noopWithEmptyAxes:!!b,axes:C?Array.from(R.subarray(O>>>0,O+C>>>0)):[]})},916844:l=>{r.ra("Where",l,void 0)},916897:(l,m,b)=>{r.ra("Transpose",l,{perm:m?Array.from(R.subarray(b>>>0,b+m>>>0)):[]})},917010:(l,m,b,C,O,G,N,le,X,oe,ee,me,we,k,ie)=>{r.ra("ConvTranspose",l,{format:X?"NHWC":"NCHW",autoPad:m,dilations:[b],group:C,kernel_shape:[O],pads:[G,N],strides:[le],wIsConst:()=>!!L[oe>>>0],outputPadding:ee?Array.from(R.subarray(me>>>0,me+ee>>>0)):[],outputShape:we?Array.from(R.subarray(k>>>0,k+we>>>0)):[],activation:De(ie)})},917424:(l,m,b,C,O,G,N,le,X,oe,ee,me,we,k)=>{r.ra("ConvTranspose",l,{format:le?"NHWC":"NCHW",autoPad:m,dilations:Array.from(R.subarray(b>>>0,b+2>>>0)),group:C,kernelShape:Array.from(R.subarray(O>>>0,O+2>>>0)),pads:Array.from(R.subarray(G>>>0,G+4>>>0)),strides:Array.from(R.subarray(N>>>0,N+2>>>0)),wIsConst:()=>!!L[X>>>0],outputPadding:0<oe?Array.from(R.subarray(ee>>>0,ee+oe>>>0)):[],outputShape:0<me?Array.from(R.subarray(we>>>0,we+me>>>0)):[],activation:De(k)})},917981:(l,m,b,C,O,G,N,le,X,oe,ee,me,we,k,ie)=>{r.ra("ConvTranspose",l,{format:X?"NHWC":"NCHW",autoPad:m,dilations:[b],group:C,kernel_shape:[O],pads:[G,N],strides:[le],wIsConst:()=>!!L[oe>>>0],outputPadding:ee?Array.from(R.subarray(me>>>0,me+ee>>>0)):[],outputShape:we?Array.from(R.subarray(k>>>0,k+we>>>0)):[],activation:De(ie)})},918395:(l,m,b,C,O,G,N,le,X,oe,ee,me,we,k)=>{r.ra("ConvTranspose",l,{format:le?"NHWC":"NCHW",autoPad:m,dilations:Array.from(R.subarray(b>>>0,b+2>>>0)),group:C,kernelShape:Array.from(R.subarray(O>>>0,O+2>>>0)),pads:Array.from(R.subarray(G>>>0,G+4>>>0)),strides:Array.from(R.subarray(N>>>0,N+2>>>0)),wIsConst:()=>!!L[X>>>0],outputPadding:0<oe?Array.from(R.subarray(ee>>>0,ee+oe>>>0)):[],outputShape:0<me?Array.from(R.subarray(we>>>0,we+me>>>0)):[],activation:De(k)})},918952:(l,m)=>{r.ra("GlobalAveragePool",l,{format:m?"NHWC":"NCHW"})},919043:(l,m,b,C,O,G,N,le,X,oe,ee,me,we,k,ie,ge)=>{r.ra("AveragePool",l,{format:ge?"NHWC":"NCHW",auto_pad:m,ceil_mode:b,count_include_pad:C,storage_order:O,dilations:[G,N],kernel_shape:[le,X],pads:[oe,ee,me,we],strides:[k,ie]})},919327:(l,m)=>{r.ra("GlobalAveragePool",l,{format:m?"NHWC":"NCHW"})},919418:(l,m,b,C,O,G,N,le,X,oe,ee,me,we,k,ie,ge)=>{r.ra("AveragePool",l,{format:ge?"NHWC":"NCHW",auto_pad:m,ceil_mode:b,count_include_pad:C,storage_order:O,dilations:[G,N],kernel_shape:[le,X],pads:[oe,ee,me,we],strides:[k,ie]})},919702:(l,m)=>{r.ra("GlobalMaxPool",l,{format:m?"NHWC":"NCHW"})},919789:(l,m,b,C,O,G,N,le,X,oe,ee,me,we,k,ie,ge)=>{r.ra("MaxPool",l,{format:ge?"NHWC":"NCHW",auto_pad:m,ceil_mode:b,count_include_pad:C,storage_order:O,dilations:[G,N],kernel_shape:[le,X],pads:[oe,ee,me,we],strides:[k,ie]})},920069:(l,m)=>{r.ra("GlobalMaxPool",l,{format:m?"NHWC":"NCHW"})},920156:(l,m,b,C,O,G,N,le,X,oe,ee,me,we,k,ie,ge)=>{r.ra("MaxPool",l,{format:ge?"NHWC":"NCHW",auto_pad:m,ceil_mode:b,count_include_pad:C,storage_order:O,dilations:[G,N],kernel_shape:[le,X],pads:[oe,ee,me,we],strides:[k,ie]})},920436:(l,m,b,C,O)=>{r.ra("Gemm",l,{alpha:m,beta:b,transA:C,transB:O})},920540:l=>{r.ra("MatMul",l,void 0)},920594:(l,m,b,C)=>{r.ra("ArgMax",l,{keepDims:!!m,selectLastIndex:!!b,axis:C})},920702:(l,m,b,C)=>{r.ra("ArgMin",l,{keepDims:!!m,selectLastIndex:!!b,axis:C})},920810:(l,m)=>{r.ra("Softmax",l,{axis:m})},920873:(l,m)=>{r.ra("Concat",l,{axis:m})},920933:(l,m,b,C,O)=>{r.ra("Split",l,{axis:m,numOutputs:b,splitSizes:C?Array.from(R.subarray(O>>>0,O+C>>>0)):[]})},921078:l=>{r.ra("Expand",l,void 0)},921132:(l,m)=>{r.ra("Gather",l,{axis:Number(m)})},921203:(l,m)=>{r.ra("GatherElements",l,{axis:Number(m)})},921282:(l,m,b,C,O,G,N,le,X,oe,ee)=>{r.ra("Resize",l,{antialias:m,axes:b?Array.from(R.subarray(C>>>0,C+b>>>0)):[],coordinateTransformMode:De(O),cubicCoeffA:G,excludeOutside:N,extrapolationValue:le,keepAspectRatioPolicy:De(X),mode:De(oe),nearestMode:De(ee)})},921633:(l,m,b,C,O,G,N)=>{r.ra("Slice",l,{starts:m?Array.from(R.subarray(b>>>0,b+m>>>0)):[],ends:C?Array.from(R.subarray(O>>>0,O+C>>>0)):[],axes:G?Array.from(R.subarray(N>>>0,N+G>>>0)):[]})},921864:l=>{r.ra("Tile",l,void 0)},921916:(l,m,b)=>{r.ra("LayerNormalization",l,{axis:Number(m),epsilon:Number(b)})},922023:(l,m,b)=>{r.ra("InstanceNormalization",l,{epsilon:m,format:b?"NHWC":"NCHW"})},922137:(l,m,b)=>{r.ra("InstanceNormalization",l,{epsilon:m,format:b?"NHWC":"NCHW"})},922251:l=>{r.ra("Range",l,void 0)},922304:(l,m)=>{r.ra("Einsum",l,{equation:De(m)})},922385:(l,m,b,C,O)=>{r.ra("Pad",l,{mode:m,value:b,pads:C?Array.from(R.subarray(O>>>0,O+C>>>0)):[]})},922517:(l,m,b,C,O,G)=>{r.ra("BatchNormalization",l,{epsilon:m,momentum:b,spatial:!!O,trainingMode:!!C,format:G?"NHWC":"NCHW"})},922686:(l,m,b,C,O,G)=>{r.ra("BatchNormalization",l,{epsilon:m,momentum:b,spatial:!!O,trainingMode:!!C,format:G?"NHWC":"NCHW"})},922855:(l,m,b)=>{r.ra("CumSum",l,{exclusive:Number(m),reverse:Number(b)})},922952:(l,m,b,C,O,G,N,le,X)=>{r.ra("Attention",l,{numHeads:m,isUnidirectional:b,maskFilterValue:C,scale:O,doRotary:G,qkvHiddenSizes:N?Array.from(R.subarray(Number(le)>>>0,Number(le)+N>>>0)):[],pastPresentShareBuffer:!!X})},923224:l=>{r.ra("Gelu",l,void 0)},923276:(l,m,b,C,O,G)=>{r.ra("MultiHeadAttention",l,{numHeads:m,isUnidirectional:b,maskFilterValue:C,scale:O,doRotary:G})},923435:l=>{r.ra("BiasAdd",l,void 0)},923490:l=>{r.ra("BiasSplitGelu",l,void 0)},923551:(l,m)=>{r.ra("SkipLayerNormalization",l,{epsilon:m})},923632:(l,m,b,C,O,G,N,le,X,oe,ee,me,we)=>{r.ra("Conv",l,{format:X?"NHWC":"NCHW",auto_pad:m,dilations:[b],group:C,kernel_shape:[O],pads:G?Array.from(R.subarray(N>>>0,N+G>>>0)):[],strides:[le],w_is_const:()=>!!L[oe>>>0],activation:De(ee),activation_params:me?Array.from(pe.subarray(we>>>0,we+me>>>0)):[]})},924013:(l,m,b,C,O,G,N,le,X,oe,ee,me,we,k,ie,ge)=>{r.ra("Conv",l,{format:me?"NHWC":"NCHW",auto_pad:m,dilations:[b,C],group:O,kernel_shape:[G,N],pads:le?Array.from(R.subarray(X>>>0,X+le>>>0)):[],strides:[oe,ee],w_is_const:()=>!!L[we>>>0],activation:De(k),activation_params:ie?Array.from(pe.subarray(ge>>>0,ge+ie>>>0)):[]})},924415:l=>{r.Ra(l)},924449:(l,m)=>r.Sa(l,m,r.Da.Ta,r.Da.errors),924561:l=>r.Oa(l),924594:l=>r.Qa(l),924626:(l,m,b)=>{r.Ja(l,m,b,!0)},924665:(l,m,b)=>{r.Ja(l,m,b)}};function Ze(l){this.name="ExitStatus",this.message=`Program terminated with exit(${l})`,this.status=l}var $t=l=>{for(;0<l.length;)l.shift()(r)};function St(l){this.Ha=l-24,this.Ma=function(m){q[this.Ha+4>>2>>>0]=m},this.La=function(m){q[this.Ha+8>>2>>>0]=m},this.Ya=function(m,b){this.Ka(),this.Ma(m),this.La(b)},this.Ka=function(){q[this.Ha+16>>2>>>0]=0}}var Nt=0,mr=0,Qe=typeof TextDecoder<"u"?new TextDecoder("utf8"):void 0,Ht=(l,m,b)=>{m>>>=0;var C=m+b;for(b=m;l[b]&&!(b>=C);)++b;if(16<b-m&&l.buffer&&Qe)return Qe.decode(l.subarray(m,b));for(C="";m<b;){var O=l[m++];if(O&128){var G=l[m++]&63;if((O&224)==192)C+=String.fromCharCode((O&31)<<6|G);else{var N=l[m++]&63;O=(O&240)==224?(O&15)<<12|G<<6|N:(O&7)<<18|G<<12|N<<6|l[m++]&63,65536>O?C+=String.fromCharCode(O):(O-=65536,C+=String.fromCharCode(55296|O>>10,56320|O&1023))}}else C+=String.fromCharCode(O)}return C},De=(l,m)=>(l>>>=0)?Ht(re,l,m):"",kt=l=>{for(var m=0,b=0;b<l.length;++b){var C=l.charCodeAt(b);127>=C?m++:2047>=C?m+=2:55296<=C&&57343>=C?(m+=4,++b):m+=3}return m},Gt=(l,m,b,C)=>{if(b>>>=0,!(0<C))return 0;var O=b;C=b+C-1;for(var G=0;G<l.length;++G){var N=l.charCodeAt(G);if(55296<=N&&57343>=N){var le=l.charCodeAt(++G);N=65536+((N&1023)<<10)|le&1023}if(127>=N){if(b>=C)break;m[b++>>>0]=N}else{if(2047>=N){if(b+1>=C)break;m[b++>>>0]=192|N>>6}else{if(65535>=N){if(b+2>=C)break;m[b++>>>0]=224|N>>12}else{if(b+3>=C)break;m[b++>>>0]=240|N>>18,m[b++>>>0]=128|N>>12&63}m[b++>>>0]=128|N>>6&63}m[b++>>>0]=128|N&63}}return m[b>>>0]=0,b-O},pt=l=>l%4===0&&(l%100!==0||l%400===0),fr=[0,31,60,91,121,152,182,213,244,274,305,335],mt=[0,31,59,90,120,151,181,212,243,273,304,334],Pt=l=>{var m=kt(l)+1,b=Dt(m);return b&&Gt(l,re,b,m),b},gt=[],Rt=(l,m)=>{gt.length=0;var b;for(m>>=2;b=re[l++>>>0];)m+=b!=105&m,gt.push(b==105?R[m>>>0]:J[m++>>>1]),++m;return gt},Bt={},Lt=()=>{if(!Mt){var l={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:(typeof navigator=="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:u||"./this.program"},m;for(m in Bt)Bt[m]===void 0?delete l[m]:l[m]=Bt[m];var b=[];for(m in l)b.push(`${m}=${l[m]}`);Mt=b}return Mt},Mt,hr=[null,[],[]],He=[31,29,31,30,31,30,31,31,30,31,30,31],Ft=[31,28,31,30,31,30,31,31,30,31,30,31];function qt(l){var m=Array(kt(l)+1);return Gt(l,m,0,m.length),m}function ue(l,m,b,C){function O(k,ie,ge){for(k=typeof k=="number"?k.toString():k||"";k.length<ie;)k=ge[0]+k;return k}function G(k,ie){return O(k,ie,"0")}function N(k,ie){function ge(nr){return 0>nr?-1:0<nr?1:0}var ht;return(ht=ge(k.getFullYear()-ie.getFullYear()))===0&&(ht=ge(k.getMonth()-ie.getMonth()))===0&&(ht=ge(k.getDate()-ie.getDate())),ht}function le(k){switch(k.getDay()){case 0:return new Date(k.getFullYear()-1,11,29);case 1:return k;case 2:return new Date(k.getFullYear(),0,3);case 3:return new Date(k.getFullYear(),0,2);case 4:return new Date(k.getFullYear(),0,1);case 5:return new Date(k.getFullYear()-1,11,31);case 6:return new Date(k.getFullYear()-1,11,30)}}function X(k){var ie=k.Ba;for(k=new Date(new Date(k.Ca+1900,0,1).getTime());0<ie;){var ge=k.getMonth(),ht=(pt(k.getFullYear())?He:Ft)[ge];if(ie>ht-k.getDate())ie-=ht-k.getDate()+1,k.setDate(1),11>ge?k.setMonth(ge+1):(k.setMonth(0),k.setFullYear(k.getFullYear()+1));else{k.setDate(k.getDate()+ie);break}}return ge=new Date(k.getFullYear()+1,0,4),ie=le(new Date(k.getFullYear(),0,4)),ge=le(ge),0>=N(ie,k)?0>=N(ge,k)?k.getFullYear()+1:k.getFullYear():k.getFullYear()-1}l>>>=0,m>>>=0,b>>>=0,C>>>=0;var oe=R[C+40>>2>>>0];C={Wa:R[C>>2>>>0],Va:R[C+4>>2>>>0],Ea:R[C+8>>2>>>0],Ia:R[C+12>>2>>>0],Fa:R[C+16>>2>>>0],Ca:R[C+20>>2>>>0],wa:R[C+24>>2>>>0],Ba:R[C+28>>2>>>0],$a:R[C+32>>2>>>0],Ua:R[C+36>>2>>>0],Xa:oe?De(oe):""},b=De(b),oe={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var ee in oe)b=b.replace(new RegExp(ee,"g"),oe[ee]);var me="Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),we="January February March April May June July August September October November December".split(" ");oe={"%a":k=>me[k.wa].substring(0,3),"%A":k=>me[k.wa],"%b":k=>we[k.Fa].substring(0,3),"%B":k=>we[k.Fa],"%C":k=>G((k.Ca+1900)/100|0,2),"%d":k=>G(k.Ia,2),"%e":k=>O(k.Ia,2," "),"%g":k=>X(k).toString().substring(2),"%G":k=>X(k),"%H":k=>G(k.Ea,2),"%I":k=>(k=k.Ea,k==0?k=12:12<k&&(k-=12),G(k,2)),"%j":k=>{for(var ie=0,ge=0;ge<=k.Fa-1;ie+=(pt(k.Ca+1900)?He:Ft)[ge++]);return G(k.Ia+ie,3)},"%m":k=>G(k.Fa+1,2),"%M":k=>G(k.Va,2),"%n":()=>`\n`,"%p":k=>0<=k.Ea&&12>k.Ea?"AM":"PM","%S":k=>G(k.Wa,2),"%t":()=>"	","%u":k=>k.wa||7,"%U":k=>G(Math.floor((k.Ba+7-k.wa)/7),2),"%V":k=>{var ie=Math.floor((k.Ba+7-(k.wa+6)%7)/7);if(2>=(k.wa+371-k.Ba-2)%7&&ie++,ie)ie==53&&(ge=(k.wa+371-k.Ba)%7,ge==4||ge==3&&pt(k.Ca)||(ie=1));else{ie=52;var ge=(k.wa+7-k.Ba-1)%7;(ge==4||ge==5&&pt(k.Ca%400-1))&&ie++}return G(ie,2)},"%w":k=>k.wa,"%W":k=>G(Math.floor((k.Ba+7-(k.wa+6)%7)/7),2),"%y":k=>(k.Ca+1900).toString().substring(2),"%Y":k=>k.Ca+1900,"%z":k=>{k=k.Ua;var ie=0<=k;return k=Math.abs(k)/60,(ie?"+":"-")+("0000"+(k/60*100+k%60)).slice(-4)},"%Z":k=>k.Xa,"%%":()=>"%"},b=b.replace(/%%/g,"\\0\\0");for(ee in oe)b.includes(ee)&&(b=b.replace(new RegExp(ee,"g"),oe[ee](C)));return b=b.replace(/\\0\\0/g,"%"),ee=qt(b),ee.length>m?0:(L.set(ee,l>>>0),ee.length-1)}function ft(l){try{l()}catch(m){Fe(m)}}function gr(l){var m={},b;for(b in l)(function(C){var O=l[C];m[C]=typeof O=="function"?function(){xt.push(C);try{return O.apply(null,arguments)}finally{H||(xt.pop()===C||Fe(),Xe&&ot===1&&xt.length===0&&(ot=0,ft(tr),typeof Fibers<"u"&&Fibers.ab()))}}:O})(b);return m}var ot=0,Xe=null,yr=0,xt=[],jt={},Kt={},br=0,Ct=null,wr=[];function vr(){return new Promise((l,m)=>{Ct={resolve:l,reject:m}})}function $r(){var l=Dt(65548),m=l+12;q[l>>2>>>0]=m,q[l+4>>2>>>0]=m+65536,m=xt[0];var b=jt[m];return b===void 0&&(b=br++,jt[m]=b,Kt[b]=m),R[l+8>>2>>>0]=b,l}function Sr(l){if(!H){if(ot===0){var m=!1,b=!1;l((C=0)=>{if(!H&&(yr=C,m=!0,b)){ot=2,ft(()=>zt(Xe)),typeof Browser<"u"&&Browser.Ga.Na&&Browser.Ga.resume(),C=!1;try{var O=(0,T[Kt[R[Xe+8>>2>>>0]]])()}catch(le){O=le,C=!0}var G=!1;if(!Xe){var N=Ct;N&&(Ct=null,(C?N.reject:N.resolve)(O),G=!0)}if(C&&!G)throw O}}),b=!0,m||(ot=1,Xe=$r(),typeof Browser<"u"&&Browser.Ga.Na&&Browser.Ga.pause(),ft(()=>er(Xe)))}else ot===2?(ot=0,ft(_t),Yt(Xe),Xe=null,wr.forEach(C=>{if(!H)try{if(C(),!E)try{U=U=C=U,E||(r.onExit&&r.onExit(C),H=!0),d(C,new Ze(C))}catch(O){O instanceof Ze||O=="unwind"||d(1,O)}}catch(O){O instanceof Ze||O=="unwind"||d(1,O)}})):Fe(`invalid state: ${ot}`);return yr}}function xr(l){return Sr(m=>{l().then(m)})}var Cr={n:function(l,m,b){return xr(async()=>{await r.Pa(l,m,b)})},a:function(l,m,b){throw l>>>=0,new St(l).Ya(m>>>0,b>>>0),Nt=l,mr++,Nt},g:function(){return 0},J:function(){},z:function(){},B:function(){},L:function(){return 0},H:function(){},C:function(){},G:function(){},l:function(){},A:function(){},x:function(){},I:function(){},y:function(){},m:()=>!0,q:function(l,m,b){l=m+2097152>>>0<4194305-!!l?(l>>>0)+4294967296*m:NaN,b>>>=0,l=new Date(1e3*l),R[b>>2>>>0]=l.getUTCSeconds(),R[b+4>>2>>>0]=l.getUTCMinutes(),R[b+8>>2>>>0]=l.getUTCHours(),R[b+12>>2>>>0]=l.getUTCDate(),R[b+16>>2>>>0]=l.getUTCMonth(),R[b+20>>2>>>0]=l.getUTCFullYear()-1900,R[b+24>>2>>>0]=l.getUTCDay(),R[b+28>>2>>>0]=(l.getTime()-Date.UTC(l.getUTCFullYear(),0,1,0,0,0,0))/864e5|0},r:function(l,m,b){l=m+2097152>>>0<4194305-!!l?(l>>>0)+4294967296*m:NaN,b>>>=0,l=new Date(1e3*l),R[b>>2>>>0]=l.getSeconds(),R[b+4>>2>>>0]=l.getMinutes(),R[b+8>>2>>>0]=l.getHours(),R[b+12>>2>>>0]=l.getDate(),R[b+16>>2>>>0]=l.getMonth(),R[b+20>>2>>>0]=l.getFullYear()-1900,R[b+24>>2>>>0]=l.getDay(),R[b+28>>2>>>0]=(pt(l.getFullYear())?fr:mt)[l.getMonth()]+l.getDate()-1|0,R[b+36>>2>>>0]=-(60*l.getTimezoneOffset()),m=new Date(l.getFullYear(),6,1).getTimezoneOffset();var C=new Date(l.getFullYear(),0,1).getTimezoneOffset();R[b+32>>2>>>0]=(m!=C&&l.getTimezoneOffset()==Math.min(C,m))|0},s:function(l){l>>>=0;var m=new Date(R[l+20>>2>>>0]+1900,R[l+16>>2>>>0],R[l+12>>2>>>0],R[l+8>>2>>>0],R[l+4>>2>>>0],R[l>>2>>>0],0),b=R[l+32>>2>>>0],C=m.getTimezoneOffset(),O=new Date(m.getFullYear(),6,1).getTimezoneOffset(),G=new Date(m.getFullYear(),0,1).getTimezoneOffset(),N=Math.min(G,O);return 0>b?R[l+32>>2>>>0]=+(O!=G&&N==C):0<b!=(N==C)&&(O=Math.max(G,O),m.setTime(m.getTime()+6e4*((0<b?N:O)-C))),R[l+24>>2>>>0]=m.getDay(),R[l+28>>2>>>0]=(pt(m.getFullYear())?fr:mt)[m.getMonth()]+m.getDate()-1|0,R[l>>2>>>0]=m.getSeconds(),R[l+4>>2>>>0]=m.getMinutes(),R[l+8>>2>>>0]=m.getHours(),R[l+12>>2>>>0]=m.getDate(),R[l+16>>2>>>0]=m.getMonth(),R[l+20>>2>>>0]=m.getYear(),l=m.getTime()/1e3,Zt((qe=l,1<=+Math.abs(qe)?0<qe?+Math.floor(qe/4294967296)>>>0:~~+Math.ceil((qe-+(~~qe>>>0))/4294967296)>>>0:0)),l>>>0},o:function(){return-52},p:function(){},v:function(l,m,b){function C(X){return(X=X.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?X[1]:"GMT"}b>>>=0;var O=new Date().getFullYear(),G=new Date(O,0,1),N=new Date(O,6,1);O=G.getTimezoneOffset();var le=N.getTimezoneOffset();q[l>>>0>>2>>>0]=60*Math.max(O,le),R[m>>>0>>2>>>0]=+(O!=le),l=C(G),m=C(N),l=Pt(l),m=Pt(m),le<O?(q[b>>2>>>0]=l,q[b+4>>2>>>0]=m):(q[b>>2>>>0]=m,q[b+4>>2>>>0]=l)},e:()=>{Fe("")},b:function(l,m,b){return l>>>=0,m=Rt(m>>>0,b>>>0),nt[l].apply(null,m)},i:function(l,m,b){return l>>>=0,m=Rt(m>>>0,b>>>0),nt[l].apply(null,m)},h:function(){return Date.now()},w:function(){return 4294901760},c:()=>performance.now(),K:function(l,m,b){return m>>>=0,re.copyWithin(l>>>0>>>0,m>>>0,m+(b>>>0)>>>0)},u:function(l){l>>>=0;var m=re.length;if(4294901760<l)return!1;for(var b=1;4>=b;b*=2){var C=m*(1+.2/b);C=Math.min(C,l+100663296);var O=Math;C=Math.max(l,C);e:{O=O.min.call(O,4294901760,C+(65536-C%65536)%65536)-z.buffer.byteLength+65535>>>16;try{z.grow(O),$e();var G=1;break e}catch{}G=void 0}if(G)return!0}return!1},D:function(l,m){l>>>=0,m>>>=0;var b=0;return Lt().forEach(function(C,O){var G=m+b;for(O=q[l+4*O>>2>>>0]=G,G=0;G<C.length;++G)L[O++>>0>>>0]=C.charCodeAt(G);L[O>>0>>>0]=0,b+=C.length+1}),0},E:function(l,m){l>>>=0,m>>>=0;var b=Lt();q[l>>2>>>0]=b.length;var C=0;return b.forEach(function(O){C+=O.length+1}),q[m>>2>>>0]=C,0},f:()=>52,k:function(){return 52},t:function(){return 70},j:function(l,m,b,C){m>>>=0,b>>>=0,C>>>=0;for(var O=0,G=0;G<b;G++){var N=q[m>>2>>>0],le=q[m+4>>2>>>0];m+=8;for(var X=0;X<le;X++){var oe=re[N+X>>>0],ee=hr[l];oe===0||oe===10?((l===1?x:_)(Ht(ee,0)),ee.length=0):ee.push(oe)}O+=le}return q[C>>2>>>0]=O,0},F:ue,d:function(l,m,b,C){return ue(l>>>0,m>>>0,b>>>0,C>>>0)}};(function(){function l(b){if(b=b.exports,b=gr(b),T=b=yt(b),z=T.M,$e(),Se.unshift(T.N),he--,r.monitorRunDependencies&&r.monitorRunDependencies(he),he==0&&(rt!==null&&(clearInterval(rt),rt=null),Ge)){var C=Ge;Ge=null,C()}return b}var m={a:Cr};if(he++,r.monitorRunDependencies&&r.monitorRunDependencies(he),r.instantiateWasm)try{return r.instantiateWasm(m,l)}catch(b){_("Module.instantiateWasm callback failed with error: "+b),n(b)}return We(m,function(b){l(b.instance)}).catch(n),{}})(),r._OrtInit=(l,m)=>(r._OrtInit=T.O)(l,m),r._OrtGetLastError=(l,m)=>(r._OrtGetLastError=T.P)(l,m),r._OrtCreateSessionOptions=(l,m,b,C,O,G,N,le,X,oe)=>(r._OrtCreateSessionOptions=T.Q)(l,m,b,C,O,G,N,le,X,oe),r._OrtAppendExecutionProvider=(l,m)=>(r._OrtAppendExecutionProvider=T.R)(l,m),r._OrtAddFreeDimensionOverride=(l,m,b)=>(r._OrtAddFreeDimensionOverride=T.S)(l,m,b),r._OrtAddSessionConfigEntry=(l,m,b)=>(r._OrtAddSessionConfigEntry=T.T)(l,m,b),r._OrtReleaseSessionOptions=l=>(r._OrtReleaseSessionOptions=T.U)(l),r._OrtCreateSession=(l,m,b)=>(r._OrtCreateSession=T.V)(l,m,b),r._OrtReleaseSession=l=>(r._OrtReleaseSession=T.W)(l),r._OrtGetInputOutputCount=(l,m,b)=>(r._OrtGetInputOutputCount=T.X)(l,m,b),r._OrtGetInputName=(l,m)=>(r._OrtGetInputName=T.Y)(l,m),r._OrtGetOutputName=(l,m)=>(r._OrtGetOutputName=T.Z)(l,m),r._OrtFree=l=>(r._OrtFree=T._)(l),r._OrtCreateTensor=(l,m,b,C,O,G)=>(r._OrtCreateTensor=T.$)(l,m,b,C,O,G),r._OrtGetTensorData=(l,m,b,C,O)=>(r._OrtGetTensorData=T.aa)(l,m,b,C,O),r._OrtReleaseTensor=l=>(r._OrtReleaseTensor=T.ba)(l),r._OrtCreateRunOptions=(l,m,b,C)=>(r._OrtCreateRunOptions=T.ca)(l,m,b,C),r._OrtAddRunConfigEntry=(l,m,b)=>(r._OrtAddRunConfigEntry=T.da)(l,m,b),r._OrtReleaseRunOptions=l=>(r._OrtReleaseRunOptions=T.ea)(l),r._OrtCreateBinding=l=>(r._OrtCreateBinding=T.fa)(l),r._OrtBindInput=(l,m,b)=>(r._OrtBindInput=T.ga)(l,m,b),r._OrtBindOutput=(l,m,b,C)=>(r._OrtBindOutput=T.ha)(l,m,b,C),r._OrtClearBoundOutputs=l=>(r._OrtClearBoundOutputs=T.ia)(l),r._OrtReleaseBinding=l=>(r._OrtReleaseBinding=T.ja)(l),r._OrtRunWithBinding=(l,m,b,C,O)=>(r._OrtRunWithBinding=T.ka)(l,m,b,C,O),r._OrtRun=(l,m,b,C,O,G,N,le)=>(r._OrtRun=T.la)(l,m,b,C,O,G,N,le),r._OrtEndProfiling=l=>(r._OrtEndProfiling=T.ma)(l),r._JsepOutput=(l,m,b)=>(r._JsepOutput=T.na)(l,m,b),r._JsepGetNodeName=l=>(r._JsepGetNodeName=T.oa)(l);var Dt=r._malloc=l=>(Dt=r._malloc=T.pa)(l),Yt=r._free=l=>(Yt=r._free=T.qa)(l),Zt=l=>(Zt=T.sa)(l),Xt=()=>(Xt=T.ta)(),Qt=l=>(Qt=T.ua)(l),Jt=l=>(Jt=T.va)(l),er=l=>(er=T.xa)(l),tr=()=>(tr=T.ya)(),zt=l=>(zt=T.za)(l),_t=()=>(_t=T.Aa)();r.___start_em_js=924698,r.___stop_em_js=924859;function yt(l){l=Object.assign({},l);var m=C=>()=>C()>>>0,b=C=>O=>C(O)>>>0;return l.__errno_location=m(l.__errno_location),l.malloc=b(l.malloc),l.stackSave=m(l.stackSave),l.stackAlloc=b(l.stackAlloc),l}r.stackAlloc=Jt,r.stackSave=Xt,r.stackRestore=Qt,r.UTF8ToString=De,r.stringToUTF8=(l,m,b)=>Gt(l,re,m,b),r.lengthBytesUTF8=kt;var It;Ge=function l(){It||rr(),It||(Ge=l)};function rr(){function l(){if(!It&&(It=!0,r.calledRun=!0,!H)){if($t(Se),o(r),r.onRuntimeInitialized&&r.onRuntimeInitialized(),r.postRun)for(typeof r.postRun=="function"&&(r.postRun=[r.postRun]);r.postRun.length;){var m=r.postRun.shift();Ie.unshift(m)}$t(Ie)}}if(!(0<he)){if(r.preRun)for(typeof r.preRun=="function"&&(r.preRun=[r.preRun]);r.preRun.length;)Ae();$t(Z),0<he||(r.setStatus?(r.setStatus("Running..."),setTimeout(function(){setTimeout(function(){r.setStatus("")},1),l()},1)):l())}}if(r.preInit)for(typeof r.preInit=="function"&&(r.preInit=[r.preInit]);0<r.preInit.length;)r.preInit.pop()();return rr(),t.ready}})();typeof fo=="object"&&typeof hn=="object"?hn.exports=mo:typeof define=="function"&&define.amd&&define([],()=>mo)});var go=or(()=>{});var yo=or(()=>{});var bo={};Or(bo,{cpus:()=>Lu});var Lu,wo=j(()=>{Lu=void 0});var So=or(($o,gn)=>{"use strict";var vo=(()=>{var e=typeof document<"u"&&document.currentScript?document.currentScript.src:void 0;return typeof __filename<"u"&&(e=e||__filename),function(t={}){function r(){return $e.buffer!=he.buffer&&fe(),he}function o(){return $e.buffer!=he.buffer&&fe(),rt}function n(){return $e.buffer!=he.buffer&&fe(),Ge}function s(){return $e.buffer!=he.buffer&&fe(),Fe}function u(){return $e.buffer!=he.buffer&&fe(),F}function d(){return $e.buffer!=he.buffer&&fe(),de}var a=t,p,h;a.ready=new Promise((i,c)=>{p=i,h=c}),a.jsepInit=(i,c,f,$,A,M,W,ae)=>{a.Qb=i,a.wb=c,a.yb=f,a.jb=$,a.xb=A,a.Ea=M,a.zb=W,a.Ab=ae,c=(te,ne,se)=>(...ve)=>{let Ce=at,P=ne?.();ve=te(...ve);let ce=ne?.();return P!==ce&&(te=ce,se(P),ne=se=null),at!=Ce?Ou():ve},f=te=>async(...ne)=>{try{if(a.bb)throw Error("Session already started");let se=a.bb={Fb:ne[0],errors:[]},ve=await te(...ne);if(a.bb!==se)throw Error("Session mismatch");i.flush();let Ce=se.errors;if(0<Ce.length){let P=await Promise.all(Ce);if(P=P.filter(ce=>ce),0<P.length)throw Error(P.join(`\n`))}return ve}finally{a.bb=null}},a._OrtRun=f(c(a._OrtRun,()=>a._OrtRun,te=>a._OrtRun=te)),a._OrtRunWithBinding=f(c(a._OrtRunWithBinding,()=>a._OrtRunWithBinding,te=>a._OrtRunWithBinding=te)),a._OrtBindInput=c(a._OrtBindInput,()=>a._OrtBindInput,te=>a._OrtBindInput=te),a.jsepRegisterBuffer=(te,ne,se,ve)=>i.registerBuffer(te,ne,se,ve),a.jsepUnregisterBuffers=te=>{i.unregisterBuffers(te)},a.jsepGetBuffer=te=>i.getBuffer(te),a.jsepCreateDownloader=(te,ne,se)=>i.createDownloader(te,ne,se)};var v=Object.assign({},a),g="./this.program",w=(i,c)=>{throw c},y=typeof window=="object",S=typeof importScripts=="function",I=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string",x=a.ENVIRONMENT_IS_PTHREAD||!1,_="";function B(i){return a.locateFile?a.locateFile(i,_):_+i}var E,z,T;if(I){var H=(pn(),Vt(cn)),U=(fn(),Vt(mn));_=S?U.dirname(_)+"/":__dirname+"/",E=(c,f)=>(c=c.startsWith("file://")?new URL(c):U.normalize(c),H.readFileSync(c,f?void 0:"utf8")),T=c=>(c=E(c,!0),c.buffer||(c=new Uint8Array(c)),c),z=(c,f,$,A=!0)=>{c=c.startsWith("file://")?new URL(c):U.normalize(c),H.readFile(c,A?void 0:"utf8",(M,W)=>{M?$(M):f(A?W.buffer:W)})},!a.thisProgram&&1<process.argv.length&&(g=process.argv[1].replace(/\\\\/g,"/")),process.argv.slice(2),w=(c,f)=>{throw process.exitCode=c,f},a.inspect=()=>"[Emscripten Module object]";let i;try{i=go()}catch(c){throw console.error(\'The "worker_threads" module is not supported in this node.js build - perhaps a newer version is needed?\'),c}global.Worker=i.Worker}else(y||S)&&(S?_=self.location.href:typeof document<"u"&&document.currentScript&&(_=document.currentScript.src),typeof e<"u"&&e&&(_=e),_.indexOf("blob:")!==0?_=_.substr(0,_.replace(/[?#].*/,"").lastIndexOf("/")+1):_="",I||(E=i=>{var c=new XMLHttpRequest;return c.open("GET",i,!1),c.send(null),c.responseText},S&&(T=i=>{var c=new XMLHttpRequest;return c.open("GET",i,!1),c.responseType="arraybuffer",c.send(null),new Uint8Array(c.response)}),z=(i,c,f)=>{var $=new XMLHttpRequest;$.open("GET",i,!0),$.responseType="arraybuffer",$.onload=()=>{$.status==200||$.status==0&&$.response?c($.response):f()},$.onerror=f,$.send(null)}));I&&typeof performance>"u"&&(global.performance=yo().performance);var L=console.log.bind(console),re=console.error.bind(console);I&&(L=(...i)=>H.writeSync(1,i.join(" ")+`\n`),re=(...i)=>H.writeSync(2,i.join(" ")+`\n`));var R=a.print||L,q=a.printErr||re;Object.assign(a,v),v=null,a.thisProgram&&(g=a.thisProgram),a.quit&&(w=a.quit);var pe;a.wasmBinary&&(pe=a.wasmBinary);var J=a.noExitRuntime||!0;typeof WebAssembly!="object"&&Qe("no native wasm support detected");var $e,Z,Se,Ie=!1,Ae,he,rt,Ge,Fe,F,de;function fe(){var i=$e.buffer;a.HEAP8=he=new Int8Array(i),a.HEAP16=new Int16Array(i),a.HEAP32=Ge=new Int32Array(i),a.HEAPU8=rt=new Uint8Array(i),a.HEAPU16=new Uint16Array(i),a.HEAPU32=Fe=new Uint32Array(i),a.HEAPF32=F=new Float32Array(i),a.HEAPF64=de=new Float64Array(i)}var Ne=a.INITIAL_MEMORY||16777216;if(5242880<=Ne||Qe("INITIAL_MEMORY should be larger than STACK_SIZE, was "+Ne+"! (STACK_SIZE=5242880)"),x)$e=a.wasmMemory;else if(a.wasmMemory)$e=a.wasmMemory;else if($e=new WebAssembly.Memory({initial:Ne/65536,maximum:65536,shared:!0}),!($e.buffer instanceof SharedArrayBuffer))throw q("requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag"),I&&q("(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and/or recent version)"),Error("bad memory");fe(),Ne=$e.buffer.byteLength;var Ke=[],Be=[],We=[],qe=0;function nt(){return J||0<qe}var Ze=0,$t=null,St=null;function Nt(){Ze++,a.monitorRunDependencies&&a.monitorRunDependencies(Ze)}function mr(){if(Ze--,a.monitorRunDependencies&&a.monitorRunDependencies(Ze),Ze==0&&($t!==null&&(clearInterval($t),$t=null),St)){var i=St;St=null,i()}}function Qe(i){throw a.onAbort&&a.onAbort(i),i="Aborted("+i+")",q(i),Ie=!0,Ae=1,i=new WebAssembly.RuntimeError(i+". Build with -sASSERTIONS for more info."),h(i),i}function Ht(i){return i.startsWith("data:application/octet-stream;base64,")}var De;De="ort-wasm-simd-threaded.wasm",Ht(De)||(De=B(De));function kt(i){if(i==De&&pe)return new Uint8Array(pe);if(T)return T(i);throw"both async and sync fetching of the wasm failed"}function Gt(i){if(!pe&&(y||S)){if(typeof fetch=="function"&&!i.startsWith("file://"))return fetch(i,{credentials:"same-origin"}).then(c=>{if(!c.ok)throw"failed to load wasm binary file at \'"+i+"\'";return c.arrayBuffer()}).catch(()=>kt(i));if(z)return new Promise((c,f)=>{z(i,$=>c(new Uint8Array($)),f)})}return Promise.resolve().then(()=>kt(i))}function pt(i,c,f){return Gt(i).then($=>WebAssembly.instantiate($,c)).then($=>$).then(f,$=>{q("failed to asynchronously prepare wasm: "+$),Qe($)})}function fr(i,c){var f=De;return pe||typeof WebAssembly.instantiateStreaming!="function"||Ht(f)||f.startsWith("file://")||I||typeof fetch!="function"?pt(f,i,c):fetch(f,{credentials:"same-origin"}).then($=>WebAssembly.instantiateStreaming($,i).then(c,function(A){return q("wasm streaming compile failed: "+A),q("falling back to ArrayBuffer instantiation"),pt(f,i,c)}))}var mt,Pt={1428528:i=>{a.Ea("Abs",i,void 0)},1428579:i=>{a.Ea("Neg",i,void 0)},1428630:i=>{a.Ea("Floor",i,void 0)},1428683:i=>{a.Ea("Ceil",i,void 0)},1428735:i=>{a.Ea("Reciprocal",i,void 0)},1428793:i=>{a.Ea("Sqrt",i,void 0)},1428845:i=>{a.Ea("Exp",i,void 0)},1428896:i=>{a.Ea("Erf",i,void 0)},1428947:i=>{a.Ea("Sigmoid",i,void 0)},1429002:i=>{a.Ea("Log",i,void 0)},1429053:i=>{a.Ea("Sin",i,void 0)},1429104:i=>{a.Ea("Cos",i,void 0)},1429155:i=>{a.Ea("Tan",i,void 0)},1429206:i=>{a.Ea("Asin",i,void 0)},1429258:i=>{a.Ea("Acos",i,void 0)},1429310:i=>{a.Ea("Atan",i,void 0)},1429362:i=>{a.Ea("Sinh",i,void 0)},1429414:i=>{a.Ea("Cosh",i,void 0)},1429466:i=>{a.Ea("Asinh",i,void 0)},1429519:i=>{a.Ea("Acosh",i,void 0)},1429572:i=>{a.Ea("Atanh",i,void 0)},1429625:i=>{a.Ea("Tanh",i,void 0)},1429677:i=>{a.Ea("Not",i,void 0)},1429728:(i,c,f)=>{a.Ea("Clip",i,{min:c,max:f})},1429797:i=>{a.Ea("Clip",i,void 0)},1429849:(i,c)=>{a.Ea("Elu",i,{alpha:c})},1429907:i=>{a.Ea("Relu",i,void 0)},1429959:(i,c)=>{a.Ea("LeakyRelu",i,{alpha:c})},1430023:(i,c)=>{a.Ea("ThresholdedRelu",i,{alpha:c})},1430093:i=>{a.zb(i)},1430127:(i,c)=>a.Ab(i,c,a.bb.Fb,a.bb.errors),1430239:(i,c)=>{a.Ea("Cast",i,{to:c})},1430297:i=>{a.Ea("Add",i,void 0)},1430348:i=>{a.Ea("Sub",i,void 0)},1430399:i=>{a.Ea("Mul",i,void 0)},1430450:i=>{a.Ea("Div",i,void 0)},1430501:i=>{a.Ea("Pow",i,void 0)},1430552:i=>{a.Ea("Equal",i,void 0)},1430605:i=>{a.Ea("Greater",i,void 0)},1430660:i=>{a.Ea("GreaterOrEqual",i,void 0)},1430722:i=>{a.Ea("Less",i,void 0)},1430774:i=>{a.Ea("LessOrEqual",i,void 0)},1430833:(i,c,f,$,A)=>{a.Ea("ReduceMean",i,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:$?Array.from(n().subarray(A>>>0,A+$>>>0)):[]})},1430997:(i,c,f,$,A)=>{a.Ea("ReduceMax",i,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:$?Array.from(n().subarray(A>>>0,A+$>>>0)):[]})},1431160:(i,c,f,$,A)=>{a.Ea("ReduceMin",i,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:$?Array.from(n().subarray(A>>>0,A+$>>>0)):[]})},1431323:(i,c,f,$,A)=>{a.Ea("ReduceProd",i,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:$?Array.from(n().subarray(A>>>0,A+$>>>0)):[]})},1431487:(i,c,f,$,A)=>{a.Ea("ReduceSum",i,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:$?Array.from(n().subarray(A>>>0,A+$>>>0)):[]})},1431650:(i,c,f,$,A)=>{a.Ea("ReduceL1",i,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:$?Array.from(n().subarray(A>>>0,A+$>>>0)):[]})},1431812:(i,c,f,$,A)=>{a.Ea("ReduceL2",i,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:$?Array.from(n().subarray(A>>>0,A+$>>>0)):[]})},1431974:(i,c,f,$,A)=>{a.Ea("ReduceLogSum",i,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:$?Array.from(n().subarray(A>>>0,A+$>>>0)):[]})},1432140:(i,c,f,$,A)=>{a.Ea("ReduceSumSquare",i,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:$?Array.from(n().subarray(A>>>0,A+$>>>0)):[]})},1432309:(i,c,f,$,A)=>{a.Ea("ReduceLogSumExp",i,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:$?Array.from(n().subarray(A>>>0,A+$>>>0)):[]})},1432478:i=>{a.Ea("Where",i,void 0)},1432531:(i,c,f)=>{a.Ea("Transpose",i,{perm:c?Array.from(n().subarray(f>>>0,f+c>>>0)):[]})},1432644:(i,c,f,$,A,M,W,ae,te,ne,se,ve,Ce)=>{a.Ea("Conv",i,{format:te?"NHWC":"NCHW",auto_pad:c,dilations:[f],group:$,kernel_shape:[A],pads:M?Array.from(n().subarray(W>>>0,W+M>>>0)):[],strides:[ae],w_is_const:()=>!!r()[ne>>>0],activation:He(se),activation_params:ve?Array.from(u().subarray(Ce>>>0,Ce+ve>>>0)):[]})},1433025:(i,c,f,$,A,M,W,ae,te,ne,se,ve,Ce,P,ce,xe)=>{a.Ea("Conv",i,{format:ve?"NHWC":"NCHW",auto_pad:c,dilations:[f,$],group:A,kernel_shape:[M,W],pads:ae?Array.from(n().subarray(te>>>0,te+ae>>>0)):[],strides:[ne,se],w_is_const:()=>!!r()[Ce>>>0],activation:He(P),activation_params:ce?Array.from(u().subarray(xe>>>0,xe+ce>>>0)):[]})},1433427:(i,c,f,$,A,M,W,ae,te,ne,se,ve,Ce,P,ce)=>{a.Ea("ConvTranspose",i,{format:te?"NHWC":"NCHW",autoPad:c,dilations:[f],group:$,kernel_shape:[A],pads:[M,W],strides:[ae],wIsConst:()=>!!r()[ne>>>0],outputPadding:se?Array.from(n().subarray(ve>>>0,ve+se>>>0)):[],outputShape:Ce?Array.from(n().subarray(P>>>0,P+Ce>>>0)):[],activation:He(ce)})},1433841:(i,c,f,$,A,M,W,ae,te,ne,se,ve,Ce,P)=>{a.Ea("ConvTranspose",i,{format:ae?"NHWC":"NCHW",autoPad:c,dilations:Array.from(n().subarray(f>>>0,f+2>>>0)),group:$,kernelShape:Array.from(n().subarray(A>>>0,A+2>>>0)),pads:Array.from(n().subarray(M>>>0,M+4>>>0)),strides:Array.from(n().subarray(W>>>0,W+2>>>0)),wIsConst:()=>!!r()[te>>>0],outputPadding:0<ne?Array.from(n().subarray(se>>>0,se+ne>>>0)):[],outputShape:0<ve?Array.from(n().subarray(Ce>>>0,Ce+ve>>>0)):[],activation:He(P)})},1434398:(i,c,f,$,A,M,W,ae,te,ne,se,ve,Ce,P,ce)=>{a.Ea("ConvTranspose",i,{format:te?"NHWC":"NCHW",autoPad:c,dilations:[f],group:$,kernel_shape:[A],pads:[M,W],strides:[ae],wIsConst:()=>!!r()[ne>>>0],outputPadding:se?Array.from(n().subarray(ve>>>0,ve+se>>>0)):[],outputShape:Ce?Array.from(n().subarray(P>>>0,P+Ce>>>0)):[],activation:He(ce)})},1434812:(i,c,f,$,A,M,W,ae,te,ne,se,ve,Ce,P)=>{a.Ea("ConvTranspose",i,{format:ae?"NHWC":"NCHW",autoPad:c,dilations:Array.from(n().subarray(f>>>0,f+2>>>0)),group:$,kernelShape:Array.from(n().subarray(A>>>0,A+2>>>0)),pads:Array.from(n().subarray(M>>>0,M+4>>>0)),strides:Array.from(n().subarray(W>>>0,W+2>>>0)),wIsConst:()=>!!r()[te>>>0],outputPadding:0<ne?Array.from(n().subarray(se>>>0,se+ne>>>0)):[],outputShape:0<ve?Array.from(n().subarray(Ce>>>0,Ce+ve>>>0)):[],activation:He(P)})},1435369:(i,c)=>{a.Ea("GlobalAveragePool",i,{format:c?"NHWC":"NCHW"})},1435460:(i,c,f,$,A,M,W,ae,te,ne,se,ve,Ce,P,ce,xe)=>{a.Ea("AveragePool",i,{format:xe?"NHWC":"NCHW",auto_pad:c,ceil_mode:f,count_include_pad:$,storage_order:A,dilations:[M,W],kernel_shape:[ae,te],pads:[ne,se,ve,Ce],strides:[P,ce]})},1435744:(i,c)=>{a.Ea("GlobalAveragePool",i,{format:c?"NHWC":"NCHW"})},1435835:(i,c,f,$,A,M,W,ae,te,ne,se,ve,Ce,P,ce,xe)=>{a.Ea("AveragePool",i,{format:xe?"NHWC":"NCHW",auto_pad:c,ceil_mode:f,count_include_pad:$,storage_order:A,dilations:[M,W],kernel_shape:[ae,te],pads:[ne,se,ve,Ce],strides:[P,ce]})},1436119:(i,c)=>{a.Ea("GlobalMaxPool",i,{format:c?"NHWC":"NCHW"})},1436206:(i,c,f,$,A,M,W,ae,te,ne,se,ve,Ce,P,ce,xe)=>{a.Ea("MaxPool",i,{format:xe?"NHWC":"NCHW",auto_pad:c,ceil_mode:f,count_include_pad:$,storage_order:A,dilations:[M,W],kernel_shape:[ae,te],pads:[ne,se,ve,Ce],strides:[P,ce]})},1436486:(i,c)=>{a.Ea("GlobalMaxPool",i,{format:c?"NHWC":"NCHW"})},1436573:(i,c,f,$,A,M,W,ae,te,ne,se,ve,Ce,P,ce,xe)=>{a.Ea("MaxPool",i,{format:xe?"NHWC":"NCHW",auto_pad:c,ceil_mode:f,count_include_pad:$,storage_order:A,dilations:[M,W],kernel_shape:[ae,te],pads:[ne,se,ve,Ce],strides:[P,ce]})},1436853:(i,c,f,$,A)=>{a.Ea("Gemm",i,{alpha:c,beta:f,transA:$,transB:A})},1436957:i=>{a.Ea("MatMul",i,void 0)},1437011:(i,c,f,$)=>{a.Ea("ArgMax",i,{keepDims:!!c,selectLastIndex:!!f,axis:$})},1437119:(i,c,f,$)=>{a.Ea("ArgMin",i,{keepDims:!!c,selectLastIndex:!!f,axis:$})},1437227:(i,c)=>{a.Ea("Softmax",i,{axis:c})},1437290:(i,c)=>{a.Ea("Concat",i,{axis:c})},1437350:(i,c,f,$,A)=>{a.Ea("Split",i,{axis:c,numOutputs:f,splitSizes:$?Array.from(n().subarray(A>>>0,A+$>>>0)):[]})},1437495:i=>{a.Ea("Expand",i,void 0)},1437549:(i,c)=>{a.Ea("Gather",i,{axis:Number(c)})},1437620:(i,c)=>{a.Ea("GatherElements",i,{axis:Number(c)})},1437699:(i,c,f,$,A,M,W,ae,te,ne,se)=>{a.Ea("Resize",i,{antialias:c,axes:f?Array.from(n().subarray($>>>0,$+f>>>0)):[],coordinateTransformMode:He(A),cubicCoeffA:M,excludeOutside:W,extrapolationValue:ae,keepAspectRatioPolicy:He(te),mode:He(ne),nearestMode:He(se)})},1438050:(i,c,f,$,A,M,W)=>{a.Ea("Slice",i,{starts:c?Array.from(n().subarray(f>>>0,f+c>>>0)):[],ends:$?Array.from(n().subarray(A>>>0,A+$>>>0)):[],axes:M?Array.from(n().subarray(W>>>0,W+M>>>0)):[]})},1438281:i=>{a.Ea("Tile",i,void 0)},1438333:(i,c,f)=>{a.Ea("LayerNormalization",i,{axis:Number(c),epsilon:Number(f)})},1438440:(i,c,f)=>{a.Ea("InstanceNormalization",i,{epsilon:c,format:f?"NHWC":"NCHW"})},1438554:(i,c,f)=>{a.Ea("InstanceNormalization",i,{epsilon:c,format:f?"NHWC":"NCHW"})},1438668:i=>{a.Ea("Range",i,void 0)},1438721:(i,c)=>{a.Ea("Einsum",i,{equation:He(c)})},1438802:(i,c,f,$,A)=>{a.Ea("Pad",i,{mode:c,value:f,pads:$?Array.from(n().subarray(A>>>0,A+$>>>0)):[]})},1438934:(i,c,f,$,A,M)=>{a.Ea("BatchNormalization",i,{epsilon:c,momentum:f,spatial:!!A,trainingMode:!!$,format:M?"NHWC":"NCHW"})},1439103:(i,c,f,$,A,M)=>{a.Ea("BatchNormalization",i,{epsilon:c,momentum:f,spatial:!!A,trainingMode:!!$,format:M?"NHWC":"NCHW"})},1439272:(i,c,f)=>{a.Ea("CumSum",i,{exclusive:Number(c),reverse:Number(f)})},1439369:(i,c,f,$,A,M,W,ae,te)=>{a.Ea("Attention",i,{numHeads:c,isUnidirectional:f,maskFilterValue:$,scale:A,doRotary:M,qkvHiddenSizes:W?Array.from(n().subarray(Number(ae)>>>0,Number(ae)+W>>>0)):[],pastPresentShareBuffer:!!te})},1439641:i=>{a.Ea("Gelu",i,void 0)},1439693:(i,c,f,$,A,M)=>{a.Ea("MultiHeadAttention",i,{numHeads:c,isUnidirectional:f,maskFilterValue:$,scale:A,doRotary:M})},1439852:i=>{a.Ea("BiasAdd",i,void 0)},1439907:i=>{a.Ea("BiasSplitGelu",i,void 0)},1439968:(i,c)=>{a.Ea("SkipLayerNormalization",i,{epsilon:c})},1440049:i=>a.wb(i),1440082:i=>a.yb(i),1440114:(i,c,f)=>{a.jb(i,c,f,!0)},1440153:(i,c,f)=>{a.jb(i,c,f)}};function gt(i){this.name="ExitStatus",this.message=`Program terminated with exit(${i})`,this.status=i}function Rt(i){i.terminate(),i.onmessage=()=>{}}function Bt(i){(i=ue.Qa[i])||Qe(),ue.Eb(i)}function Lt(i){var c=ue.tb();if(!c)return 6;ue.Ya.push(c),ue.Qa[i.Xa]=c,c.Xa=i.Xa;var f={cmd:"run",start_routine:i.Gb,arg:i.rb,pthread_ptr:i.Xa};return I&&c.unref(),c.postMessage(f,i.Mb),0}var Mt=typeof TextDecoder<"u"?new TextDecoder("utf8"):void 0,hr=(i,c,f)=>{c>>>=0;var $=c+f;for(f=c;i[f]&&!(f>=$);)++f;if(16<f-c&&i.buffer&&Mt)return Mt.decode(i.buffer instanceof SharedArrayBuffer?i.slice(c,f):i.subarray(c,f));for($="";c<f;){var A=i[c++];if(A&128){var M=i[c++]&63;if((A&224)==192)$+=String.fromCharCode((A&31)<<6|M);else{var W=i[c++]&63;A=(A&240)==224?(A&15)<<12|M<<6|W:(A&7)<<18|M<<12|W<<6|i[c++]&63,65536>A?$+=String.fromCharCode(A):(A-=65536,$+=String.fromCharCode(55296|A>>10,56320|A&1023))}}else $+=String.fromCharCode(A)}return $},He=(i,c)=>(i>>>=0)?hr(o(),i,c):"";function Ft(i){if(x)return N(1,1,i);Ae=i,nt()||(ue.Hb(),a.onExit&&a.onExit(i),Ie=!0),w(i,new gt(i))}var qt=i=>{if(Ae=i,x)throw gr(i),"unwind";Ft(i)},ue={ab:[],Ya:[],mb:[],Qa:{},gb:function(){x?ue.vb():ue.ub()},ub:function(){Ke.unshift(()=>{Nt(),ue.Bb(()=>mr())})},vb:function(){ue.receiveObjectTransfer=ue.Db,ue.threadInitTLS=ue.lb,ue.setExitStatus=ue.kb,J=!1},kb:function(i){Ae=i},Sb:["$terminateWorker"],Hb:function(){for(var i of ue.Ya)Rt(i);for(i of ue.ab)Rt(i);ue.ab=[],ue.Ya=[],ue.Qa=[]},Eb:function(i){var c=i.Xa;delete ue.Qa[c],ue.ab.push(i),ue.Ya.splice(ue.Ya.indexOf(i),1),i.Xa=0,an(c)},Db:function(){},lb:function(){ue.mb.forEach(i=>i())},Cb:i=>new Promise(c=>{i.onmessage=M=>{M=M.data;var W=M.cmd;if(M.targetThread&&M.targetThread!=Ar()){var ae=ue.Qa[M.Rb];ae?ae.postMessage(M,M.transferList):q(\'Internal error! Worker sent a message "\'+W+\'" to target pthread \'+M.targetThread+", but that thread no longer exists!")}else W==="checkMailbox"?_t():W==="spawnThread"?Lt(M):W==="cleanupThread"?Bt(M.thread):W==="killThread"?(M=M.thread,W=ue.Qa[M],delete ue.Qa[M],Rt(W),an(M),ue.Ya.splice(ue.Ya.indexOf(W),1),W.Xa=0):W==="cancelThread"?ue.Qa[M.thread].postMessage({cmd:"cancel"}):W==="loaded"?(i.loaded=!0,c(i)):W==="alert"?alert("Thread "+M.threadId+": "+M.text):M.target==="setimmediate"?i.postMessage(M):W==="callHandler"?a[M.handler](...M.args):W&&q("worker sent an unknown command "+W)},i.onerror=M=>{throw q("worker sent an error! "+M.filename+":"+M.lineno+": "+M.message),M},I&&(i.on("message",function(M){i.onmessage({data:M})}),i.on("error",function(M){i.onerror(M)}));var f=[],$=["onExit","onAbort","print","printErr"],A;for(A of $)a.hasOwnProperty(A)&&f.push(A);i.postMessage({cmd:"load",handlers:f,urlOrBlob:a.mainScriptUrlOrBlob||e,wasmMemory:$e,wasmModule:Se})}),Bb:function(i){i()},qb:function(){var i=B("ort-wasm-simd-threaded.worker.js");i=new Worker(i),ue.ab.push(i)},tb:function(){return ue.ab.length==0&&(ue.qb(),ue.Cb(ue.ab[0])),ue.ab.pop()}};a.PThread=ue;var ft=i=>{for(;0<i.length;)i.shift()(a)};a.establishStackSpace=function(){var i=Ar(),c=n()[i+52>>2>>>0];i=n()[i+56>>2>>>0],oo(c,c-i),Tr(c)};function gr(i){if(x)return N(2,0,i);qt(i)}a.invokeEntryPoint=function(i,c){i=ao.apply(null,[i,c]),nt()?ue.kb(i):sn(i)};function ot(i){this.fb=i-24,this.pb=function(c){s()[this.fb+4>>2>>>0]=c},this.ob=function(c){s()[this.fb+8>>2>>>0]=c},this.gb=function(c,f){this.nb(),this.pb(c),this.ob(f)},this.nb=function(){s()[this.fb+16>>2>>>0]=0}}var Xe=0,yr=0;function xt(i,c,f,$){return x?N(3,1,i,c,f,$):jt(i,c,f,$)}function jt(i,c,f,$){if(i>>>=0,c>>>=0,f>>>=0,$>>>=0,typeof SharedArrayBuffer>"u")return q("Current environment does not support SharedArrayBuffer, pthreads are not available!"),6;var A=[];return x&&A.length===0?xt(i,c,f,$):(i={Gb:f,Xa:i,rb:$,Mb:A},x?(i.Ob="spawnThread",postMessage(i,A),0):Lt(i))}function Kt(i,c,f){return x?N(4,1,i,c,f):0}function br(i,c){if(x)return N(5,1,i,c)}var Ct=i=>{for(var c=0,f=0;f<i.length;++f){var $=i.charCodeAt(f);127>=$?c++:2047>=$?c+=2:55296<=$&&57343>=$?(c+=4,++f):c+=3}return c},wr=(i,c,f,$)=>{if(f>>>=0,!(0<$))return 0;var A=f;$=f+$-1;for(var M=0;M<i.length;++M){var W=i.charCodeAt(M);if(55296<=W&&57343>=W){var ae=i.charCodeAt(++M);W=65536+((W&1023)<<10)|ae&1023}if(127>=W){if(f>=$)break;c[f++>>>0]=W}else{if(2047>=W){if(f+1>=$)break;c[f++>>>0]=192|W>>6}else{if(65535>=W){if(f+2>=$)break;c[f++>>>0]=224|W>>12}else{if(f+3>=$)break;c[f++>>>0]=240|W>>18,c[f++>>>0]=128|W>>12&63}c[f++>>>0]=128|W>>6&63}c[f++>>>0]=128|W&63}}return c[f>>>0]=0,f-A},vr=(i,c,f)=>wr(i,o(),c,f);function $r(i,c){if(x)return N(6,1,i,c)}function Sr(i,c,f){if(x)return N(7,1,i,c,f)}function xr(i,c,f){return x?N(8,1,i,c,f):0}function Cr(i,c){if(x)return N(9,1,i,c)}function Dt(i,c,f){if(x)return N(10,1,i,c,f)}function Yt(i,c,f,$){if(x)return N(11,1,i,c,f,$)}function Zt(i,c,f,$){if(x)return N(12,1,i,c,f,$)}function Xt(i,c,f,$){if(x)return N(13,1,i,c,f,$)}function Qt(i){if(x)return N(14,1,i)}function Jt(i,c){if(x)return N(15,1,i,c)}function er(i,c,f){if(x)return N(16,1,i,c,f)}var tr=i=>{if(!Ie)try{if(i(),!nt())try{x?sn(Ae):qt(Ae)}catch(c){c instanceof gt||c=="unwind"||w(1,c)}}catch(c){c instanceof gt||c=="unwind"||w(1,c)}};function zt(i){i>>>=0,typeof Atomics.Nb=="function"&&(Atomics.Nb(n(),i>>2,i).value.then(_t),i+=128,Atomics.store(n(),i>>2,1))}a.__emscripten_thread_mailbox_await=zt;function _t(){var i=Ar();i&&(zt(i),tr(()=>ro()))}a.checkMailbox=_t;var yt=i=>i%4===0&&(i%100!==0||i%400===0),It=[0,31,60,91,121,152,182,213,244,274,305,335],rr=[0,31,59,90,120,151,181,212,243,273,304,334];function l(i,c,f,$,A,M,W,ae){return x?N(17,1,i,c,f,$,A,M,W,ae):-52}function m(i,c,f,$,A,M,W){if(x)return N(18,1,i,c,f,$,A,M,W)}var b=i=>{var c=Ct(i)+1,f=on(c);return f&&vr(i,f,c),f},C=[],O=(i,c)=>{C.length=0;var f;for(c>>=2;f=o()[i++>>>0];)c+=f!=105&c,C.push(f==105?n()[c>>>0]:d()[c++>>>1]),++c;return C},G=i=>{var c=un();return i=i(),Tr(c),i};function N(i,c){var f=arguments.length-2,$=arguments;return G(()=>{for(var A=ln(8*f),M=A>>3,W=0;W<f;W++){var ae=$[2+W];d()[M+W>>>0]=ae}return to(i,f,A,c)})}var le=[],X={},oe=()=>{if(!ee){var i={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:(typeof navigator=="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:g||"./this.program"},c;for(c in X)X[c]===void 0?delete i[c]:i[c]=X[c];var f=[];for(c in i)f.push(`${c}=${i[c]}`);ee=f}return ee},ee;function me(i,c){if(x)return N(19,1,i,c);i>>>=0,c>>>=0;var f=0;return oe().forEach(function($,A){var M=c+f;for(A=s()[i+4*A>>2>>>0]=M,M=0;M<$.length;++M)r()[A++>>0>>>0]=$.charCodeAt(M);r()[A>>0>>>0]=0,f+=$.length+1}),0}function we(i,c){if(x)return N(20,1,i,c);i>>>=0,c>>>=0;var f=oe();s()[i>>2>>>0]=f.length;var $=0;return f.forEach(function(A){$+=A.length+1}),s()[c>>2>>>0]=$,0}function k(i){return x?N(21,1,i):52}function ie(i,c,f,$){return x?N(22,1,i,c,f,$):52}function ge(i,c,f,$,A){return x?N(23,1,i,c,f,$,A):70}var ht=[null,[],[]];function nr(i,c,f,$){if(x)return N(24,1,i,c,f,$);c>>>=0,f>>>=0,$>>>=0;for(var A=0,M=0;M<f;M++){var W=s()[c>>2>>>0],ae=s()[c+4>>2>>>0];c+=8;for(var te=0;te<ae;te++){var ne=o()[W+te>>>0],se=ht[i];ne===0||ne===10?((i===1?R:q)(hr(se,0)),se.length=0):se.push(ne)}A+=ae}return s()[$>>2>>>0]=A,0}var jn=[31,29,31,30,31,30,31,31,30,31,30,31],Kn=[31,28,31,30,31,30,31,31,30,31,30,31];function _u(i){var c=Array(Ct(i)+1);return wr(i,c,0,c.length),c}var Iu=(i,c)=>{r().set(i,c>>>0)};function Yn(i,c,f,$){function A(P,ce,xe){for(P=typeof P=="number"?P.toString():P||"";P.length<ce;)P=xe[0]+P;return P}function M(P,ce){return A(P,ce,"0")}function W(P,ce){function xe(po){return 0>po?-1:0<po?1:0}var At;return(At=xe(P.getFullYear()-ce.getFullYear()))===0&&(At=xe(P.getMonth()-ce.getMonth()))===0&&(At=xe(P.getDate()-ce.getDate())),At}function ae(P){switch(P.getDay()){case 0:return new Date(P.getFullYear()-1,11,29);case 1:return P;case 2:return new Date(P.getFullYear(),0,3);case 3:return new Date(P.getFullYear(),0,2);case 4:return new Date(P.getFullYear(),0,1);case 5:return new Date(P.getFullYear()-1,11,31);case 6:return new Date(P.getFullYear()-1,11,30)}}function te(P){var ce=P.Za;for(P=new Date(new Date(P.$a+1900,0,1).getTime());0<ce;){var xe=P.getMonth(),At=(yt(P.getFullYear())?jn:Kn)[xe];if(ce>At-P.getDate())ce-=At-P.getDate()+1,P.setDate(1),11>xe?P.setMonth(xe+1):(P.setMonth(0),P.setFullYear(P.getFullYear()+1));else{P.setDate(P.getDate()+ce);break}}return xe=new Date(P.getFullYear()+1,0,4),ce=ae(new Date(P.getFullYear(),0,4)),xe=ae(xe),0>=W(ce,P)?0>=W(xe,P)?P.getFullYear()+1:P.getFullYear():P.getFullYear()-1}i>>>=0,c>>>=0,f>>>=0,$>>>=0;var ne=n()[$+40>>2>>>0];$={Kb:n()[$>>2>>>0],Jb:n()[$+4>>2>>>0],cb:n()[$+8>>2>>>0],ib:n()[$+12>>2>>>0],eb:n()[$+16>>2>>>0],$a:n()[$+20>>2>>>0],Wa:n()[$+24>>2>>>0],Za:n()[$+28>>2>>>0],Tb:n()[$+32>>2>>>0],Ib:n()[$+36>>2>>>0],Lb:ne?He(ne):""},f=He(f),ne={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var se in ne)f=f.replace(new RegExp(se,"g"),ne[se]);var ve="Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),Ce="January February March April May June July August September October November December".split(" ");ne={"%a":P=>ve[P.Wa].substring(0,3),"%A":P=>ve[P.Wa],"%b":P=>Ce[P.eb].substring(0,3),"%B":P=>Ce[P.eb],"%C":P=>M((P.$a+1900)/100|0,2),"%d":P=>M(P.ib,2),"%e":P=>A(P.ib,2," "),"%g":P=>te(P).toString().substring(2),"%G":P=>te(P),"%H":P=>M(P.cb,2),"%I":P=>(P=P.cb,P==0?P=12:12<P&&(P-=12),M(P,2)),"%j":P=>{for(var ce=0,xe=0;xe<=P.eb-1;ce+=(yt(P.$a+1900)?jn:Kn)[xe++]);return M(P.ib+ce,3)},"%m":P=>M(P.eb+1,2),"%M":P=>M(P.Jb,2),"%n":()=>`\n`,"%p":P=>0<=P.cb&&12>P.cb?"AM":"PM","%S":P=>M(P.Kb,2),"%t":()=>"	","%u":P=>P.Wa||7,"%U":P=>M(Math.floor((P.Za+7-P.Wa)/7),2),"%V":P=>{var ce=Math.floor((P.Za+7-(P.Wa+6)%7)/7);if(2>=(P.Wa+371-P.Za-2)%7&&ce++,ce)ce==53&&(xe=(P.Wa+371-P.Za)%7,xe==4||xe==3&&yt(P.$a)||(ce=1));else{ce=52;var xe=(P.Wa+7-P.Za-1)%7;(xe==4||xe==5&&yt(P.$a%400-1))&&ce++}return M(ce,2)},"%w":P=>P.Wa,"%W":P=>M(Math.floor((P.Za+7-(P.Wa+6)%7)/7),2),"%y":P=>(P.$a+1900).toString().substring(2),"%Y":P=>P.$a+1900,"%z":P=>{P=P.Ib;var ce=0<=P;return P=Math.abs(P)/60,(ce?"+":"-")+("0000"+(P/60*100+P%60)).slice(-4)},"%Z":P=>P.Lb,"%%":()=>"%"},f=f.replace(/%%/g,"\\0\\0");for(se in ne)f.includes(se)&&(f=f.replace(new RegExp(se,"g"),ne[se]($)));return f=f.replace(/\\0\\0/g,"%"),se=_u(f),se.length>c?0:(Iu(se,i),se.length-1)}function _r(i){try{i()}catch(c){Qe(c)}}function Au(i){var c={},f;for(f in i)(function($){var A=i[$];c[$]=typeof A=="function"?function(){Ir.push($);try{return A.apply(null,arguments)}finally{Ie||(Ir.pop()===$||Qe(),at&&bt===1&&Ir.length===0&&(bt=0,qe+=1,_r(so),typeof Fibers<"u"&&Fibers.Ub()))}}:A})(f);return c}var bt=0,at=null,Zn=0,Ir=[],Xn={},Qn={},Tu=0,nn=null,Eu=[];function Ou(){return new Promise((i,c)=>{nn={resolve:i,reject:c}})}function ku(){var i=on(65548),c=i+12;s()[i>>2>>>0]=c,s()[i+4>>2>>>0]=c+65536,c=Ir[0];var f=Xn[c];return f===void 0&&(f=Tu++,Xn[c]=f,Qn[f]=c),c=f,n()[i+8>>2>>>0]=c,i}function Pu(){var i=n()[at+8>>2>>>0];return i=Z[Qn[i]],--qe,i()}function Ru(i){if(!Ie){if(bt===0){var c=!1,f=!1;i(($=0)=>{if(!Ie&&(Zn=$,c=!0,f)){bt=2,_r(()=>uo(at)),typeof Browser<"u"&&Browser.hb.sb&&Browser.hb.resume(),$=!1;try{var A=Pu()}catch(ae){A=ae,$=!0}var M=!1;if(!at){var W=nn;W&&(nn=null,($?W.reject:W.resolve)(A),M=!0)}if($&&!M)throw A}}),f=!0,c||(bt=1,at=ku(),typeof Browser<"u"&&Browser.hb.sb&&Browser.hb.pause(),_r(()=>io(at)))}else bt===2?(bt=0,_r(lo),Jn(at),at=null,Eu.forEach($=>tr($))):Qe(`invalid state: ${bt}`);return Zn}}function Bu(i){return Ru(c=>{i().then(c)})}ue.gb();var Mu=[null,Ft,gr,xt,Kt,br,$r,Sr,xr,Cr,Dt,Yt,Zt,Xt,Qt,Jt,er,l,m,me,we,k,ie,ge,nr],Du={r:function(i,c,f){return Bu(async()=>{await a.xb(i,c,f)})},b:function(i,c,f){throw i>>>=0,new ot(i).gb(c>>>0,f>>>0),Xe=i,yr++,Xe},P:function(i){eo(i>>>0,!S,1,!y,131072,!1),ue.lb()},n:function(i){i>>>=0,x?postMessage({cmd:"cleanupThread",thread:i}):Bt(i)},K:jt,g:Kt,V:br,F:$r,H:Sr,y:xr,T:Cr,L:Dt,S:Yt,p:Zt,G:Xt,D:Qt,U:Jt,E:er,q:()=>!0,B:function(i,c){i>>>=0,i==c>>>0?setTimeout(()=>_t()):x?postMessage({targetThread:i,cmd:"checkMailbox"}):(i=ue.Qa[i])&&i.postMessage({cmd:"checkMailbox"})},N:function(){return-1},O:zt,X:function(i){I&&ue.Qa[i>>>0].ref()},u:function(i,c,f){i=c+2097152>>>0<4194305-!!i?(i>>>0)+4294967296*c:NaN,f>>>=0,i=new Date(1e3*i),n()[f>>2>>>0]=i.getUTCSeconds(),n()[f+4>>2>>>0]=i.getUTCMinutes(),n()[f+8>>2>>>0]=i.getUTCHours(),n()[f+12>>2>>>0]=i.getUTCDate(),n()[f+16>>2>>>0]=i.getUTCMonth(),n()[f+20>>2>>>0]=i.getUTCFullYear()-1900,n()[f+24>>2>>>0]=i.getUTCDay(),i=(i.getTime()-Date.UTC(i.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,n()[f+28>>2>>>0]=i},v:function(i,c,f){i=c+2097152>>>0<4194305-!!i?(i>>>0)+4294967296*c:NaN,f>>>=0,i=new Date(1e3*i),n()[f>>2>>>0]=i.getSeconds(),n()[f+4>>2>>>0]=i.getMinutes(),n()[f+8>>2>>>0]=i.getHours(),n()[f+12>>2>>>0]=i.getDate(),n()[f+16>>2>>>0]=i.getMonth(),n()[f+20>>2>>>0]=i.getFullYear()-1900,n()[f+24>>2>>>0]=i.getDay(),c=(yt(i.getFullYear())?It:rr)[i.getMonth()]+i.getDate()-1|0,n()[f+28>>2>>>0]=c,n()[f+36>>2>>>0]=-(60*i.getTimezoneOffset()),c=new Date(i.getFullYear(),6,1).getTimezoneOffset();var $=new Date(i.getFullYear(),0,1).getTimezoneOffset();i=(c!=$&&i.getTimezoneOffset()==Math.min($,c))|0,n()[f+32>>2>>>0]=i},w:function(i){i>>>=0;var c=new Date(n()[i+20>>2>>>0]+1900,n()[i+16>>2>>>0],n()[i+12>>2>>>0],n()[i+8>>2>>>0],n()[i+4>>2>>>0],n()[i>>2>>>0],0),f=n()[i+32>>2>>>0],$=c.getTimezoneOffset(),A=new Date(c.getFullYear(),6,1).getTimezoneOffset(),M=new Date(c.getFullYear(),0,1).getTimezoneOffset(),W=Math.min(M,A);return 0>f?n()[i+32>>2>>>0]=+(A!=M&&W==$):0<f!=(W==$)&&(A=Math.max(M,A),c.setTime(c.getTime()+6e4*((0<f?W:A)-$))),n()[i+24>>2>>>0]=c.getDay(),f=(yt(c.getFullYear())?It:rr)[c.getMonth()]+c.getDate()-1|0,n()[i+28>>2>>>0]=f,n()[i>>2>>>0]=c.getSeconds(),n()[i+4>>2>>>0]=c.getMinutes(),n()[i+8>>2>>>0]=c.getHours(),n()[i+12>>2>>>0]=c.getDate(),n()[i+16>>2>>>0]=c.getMonth(),n()[i+20>>2>>>0]=c.getYear(),i=c.getTime()/1e3,no((mt=i,1<=+Math.abs(mt)?0<mt?+Math.floor(mt/4294967296)>>>0:~~+Math.ceil((mt-+(~~mt>>>0))/4294967296)>>>0:0)),i>>>0},s:l,t:m,A:function(i,c,f){function $(ne){return(ne=ne.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?ne[1]:"GMT"}i>>>=0,c>>>=0,f>>>=0;var A=new Date().getFullYear(),M=new Date(A,0,1),W=new Date(A,6,1);A=M.getTimezoneOffset();var ae=W.getTimezoneOffset(),te=Math.max(A,ae);s()[i>>2>>>0]=60*te,n()[c>>2>>>0]=+(A!=ae),i=$(M),c=$(W),i=b(i),c=b(c),ae<A?(s()[f>>2>>>0]=i,s()[f+4>>2>>>0]=c):(s()[f>>2>>>0]=c,s()[f+4>>2>>>0]=i)},e:()=>{Qe("")},c:function(i,c,f){return i>>>=0,c=O(c>>>0,f>>>0),Pt[i].apply(null,c)},l:function(i,c,f){return i>>>=0,c=O(c>>>0,f>>>0),Pt[i].apply(null,c)},o:function(){},k:function(){return Date.now()},W:()=>{throw qe+=1,"unwind"},C:function(){return 4294901760},d:()=>performance.timeOrigin+performance.now(),i:function(){return I?(wo(),Vt(bo)).cpus().length:navigator.hardwareConcurrency},M:function(i,c,f,$){for(ue.Pb=c>>>0,le.length=f,c=$>>>0>>3,$=0;$<f;$++)le[$]=d()[c+$>>>0];return(0>i?Pt[-i-1]:Mu[i]).apply(null,le)},z:function(i){i>>>=0;var c=o().length;if(i<=c||4294901760<i)return!1;for(var f=1;4>=f;f*=2){var $=c*(1+.2/f);$=Math.min($,i+100663296);var A=Math;$=Math.max(i,$);e:{A=A.min.call(A,4294901760,$+(65536-$%65536)%65536)-$e.buffer.byteLength+65535>>>16;try{$e.grow(A),fe();var M=1;break e}catch{}M=void 0}if(M)return!0}return!1},Q:me,R:we,J:qt,h:k,m:ie,x:ge,j:nr,a:$e||a.wasmMemory,I:Yn,f:function(i,c,f,$){return Yn(i>>>0,c>>>0,f>>>0,$>>>0)}};(function(){function i(f,$){return f=f.exports,f=Au(f),Z=f=zu(f),ue.mb.push(Z.Da),Be.unshift(Z.Y),Se=$,mr(),f}var c={a:Du};if(Nt(),a.instantiateWasm)try{return a.instantiateWasm(c,i)}catch(f){q("Module.instantiateWasm callback failed with error: "+f),h(f)}return fr(c,function(f){i(f.instance,f.module)}).catch(h),{}})(),a._OrtInit=(i,c)=>(a._OrtInit=Z.Z)(i,c),a._OrtGetLastError=(i,c)=>(a._OrtGetLastError=Z._)(i,c),a._OrtCreateSessionOptions=(i,c,f,$,A,M,W,ae,te,ne)=>(a._OrtCreateSessionOptions=Z.$)(i,c,f,$,A,M,W,ae,te,ne),a._OrtAppendExecutionProvider=(i,c)=>(a._OrtAppendExecutionProvider=Z.aa)(i,c),a._OrtAddFreeDimensionOverride=(i,c,f)=>(a._OrtAddFreeDimensionOverride=Z.ba)(i,c,f),a._OrtAddSessionConfigEntry=(i,c,f)=>(a._OrtAddSessionConfigEntry=Z.ca)(i,c,f),a._OrtReleaseSessionOptions=i=>(a._OrtReleaseSessionOptions=Z.da)(i),a._OrtCreateSession=(i,c,f)=>(a._OrtCreateSession=Z.ea)(i,c,f),a._OrtReleaseSession=i=>(a._OrtReleaseSession=Z.fa)(i),a._OrtGetInputOutputCount=(i,c,f)=>(a._OrtGetInputOutputCount=Z.ga)(i,c,f),a._OrtGetInputName=(i,c)=>(a._OrtGetInputName=Z.ha)(i,c),a._OrtGetOutputName=(i,c)=>(a._OrtGetOutputName=Z.ia)(i,c),a._OrtFree=i=>(a._OrtFree=Z.ja)(i),a._OrtCreateTensor=(i,c,f,$,A,M)=>(a._OrtCreateTensor=Z.ka)(i,c,f,$,A,M),a._OrtGetTensorData=(i,c,f,$,A)=>(a._OrtGetTensorData=Z.la)(i,c,f,$,A),a._OrtReleaseTensor=i=>(a._OrtReleaseTensor=Z.ma)(i),a._OrtCreateRunOptions=(i,c,f,$)=>(a._OrtCreateRunOptions=Z.na)(i,c,f,$),a._OrtAddRunConfigEntry=(i,c,f)=>(a._OrtAddRunConfigEntry=Z.oa)(i,c,f),a._OrtReleaseRunOptions=i=>(a._OrtReleaseRunOptions=Z.pa)(i),a._OrtCreateBinding=i=>(a._OrtCreateBinding=Z.qa)(i),a._OrtBindInput=(i,c,f)=>(a._OrtBindInput=Z.ra)(i,c,f),a._OrtBindOutput=(i,c,f,$)=>(a._OrtBindOutput=Z.sa)(i,c,f,$),a._OrtClearBoundOutputs=i=>(a._OrtClearBoundOutputs=Z.ta)(i),a._OrtReleaseBinding=i=>(a._OrtReleaseBinding=Z.ua)(i),a._OrtRunWithBinding=(i,c,f,$,A)=>(a._OrtRunWithBinding=Z.va)(i,c,f,$,A),a._OrtRun=(i,c,f,$,A,M,W,ae)=>(a._OrtRun=Z.wa)(i,c,f,$,A,M,W,ae),a._OrtEndProfiling=i=>(a._OrtEndProfiling=Z.xa)(i),a._JsepOutput=(i,c,f)=>(a._JsepOutput=Z.ya)(i,c,f),a._JsepGetNodeName=i=>(a._JsepGetNodeName=Z.za)(i);var Ar=a._pthread_self=()=>(Ar=a._pthread_self=Z.Aa)(),on=a._malloc=i=>(on=a._malloc=Z.Ba)(i),Jn=a._free=i=>(Jn=a._free=Z.Ca)(i);a.__emscripten_tls_init=()=>(a.__emscripten_tls_init=Z.Da)();var eo=a.__emscripten_thread_init=(i,c,f,$,A,M)=>(eo=a.__emscripten_thread_init=Z.Fa)(i,c,f,$,A,M);a.__emscripten_thread_crashed=()=>(a.__emscripten_thread_crashed=Z.Ga)();var to=(i,c,f,$)=>(to=Z.Ha)(i,c,f,$),an=i=>(an=Z.Ia)(i),sn=a.__emscripten_thread_exit=i=>(sn=a.__emscripten_thread_exit=Z.Ja)(i),ro=a.__emscripten_check_mailbox=()=>(ro=a.__emscripten_check_mailbox=Z.Ka)(),no=i=>(no=Z.La)(i),oo=(i,c)=>(oo=Z.Ma)(i,c),un=()=>(un=Z.Na)(),Tr=i=>(Tr=Z.Oa)(i),ln=i=>(ln=Z.Pa)(i),ao=a.dynCall_ii=(i,c)=>(ao=a.dynCall_ii=Z.Ra)(i,c),io=i=>(io=Z.Sa)(i),so=()=>(so=Z.Ta)(),uo=i=>(uo=Z.Ua)(i),lo=()=>(lo=Z.Va)();a.___start_em_js=1440186,a.___stop_em_js=1440347;function zu(i){i=Object.assign({},i);var c=$=>()=>$()>>>0,f=$=>A=>$(A)>>>0;return i.__errno_location=c(i.__errno_location),i.pthread_self=c(i.pthread_self),i.malloc=f(i.malloc),i.stackSave=c(i.stackSave),i.stackAlloc=f(i.stackAlloc),i}a.keepRuntimeAlive=nt,a.wasmMemory=$e,a.stackAlloc=ln,a.stackSave=un,a.stackRestore=Tr,a.UTF8ToString=He,a.stringToUTF8=vr,a.lengthBytesUTF8=Ct,a.ExitStatus=gt,a.PThread=ue;var Er;St=function i(){Er||co(),Er||(St=i)};function co(){function i(){if(!Er&&(Er=!0,a.calledRun=!0,!Ie)&&(x||ft(Be),p(a),a.onRuntimeInitialized&&a.onRuntimeInitialized(),!x)){if(a.postRun)for(typeof a.postRun=="function"&&(a.postRun=[a.postRun]);a.postRun.length;){var c=a.postRun.shift();We.unshift(c)}ft(We)}}if(!(0<Ze))if(x)p(a),x||ft(Be),startWorker(a);else{if(a.preRun)for(typeof a.preRun=="function"&&(a.preRun=[a.preRun]);a.preRun.length;)Ke.unshift(a.preRun.shift());ft(Ke),0<Ze||(a.setStatus?(a.setStatus("Running..."),setTimeout(function(){setTimeout(function(){a.setStatus("")},1),i()},1)):i())}}if(a.preInit)for(typeof a.preInit=="function"&&(a.preInit=[a.preInit]);0<a.preInit.length;)a.preInit.pop()();return co(),t.ready}})();typeof $o=="object"&&typeof gn=="object"?gn.exports=vo:typeof define=="function"&&define.amd&&define([],()=>vo)});var xo=or((Uc,Fu)=>{Fu.exports=\'"use strict";var Module={},ENVIRONMENT_IS_NODE=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string";if(ENVIRONMENT_IS_NODE){var nodeWorkerThreads=require("worker_threads"),parentPort=nodeWorkerThreads.parentPort;parentPort.on("message",e=>onmessage({data:e}));var fs=require("fs");Object.assign(global,{self:global,require,Module,location:{href:__filename},Worker:nodeWorkerThreads.Worker,importScripts:e=>(0,eval)(fs.readFileSync(e,"utf8")+"//# sourceURL="+e),postMessage:e=>parentPort.postMessage(e),performance:global.performance||{now:Date.now}})}var initializedJS=!1;function threadPrintErr(){var e=Array.prototype.slice.call(arguments).join(" ");if(ENVIRONMENT_IS_NODE){fs.writeSync(2,e+`\\n`);return}console.error(e)}function threadAlert(){var e=Array.prototype.slice.call(arguments).join(" ");postMessage({cmd:"alert",text:e,threadId:Module._pthread_self()})}var err=threadPrintErr;self.alert=threadAlert,Module.instantiateWasm=(e,t)=>{var a=Module.wasmModule;Module.wasmModule=null;var r=new WebAssembly.Instance(a,e);return t(r)},self.onunhandledrejection=e=>{throw e.reason??e};function handleMessage(e){try{if(e.data.cmd==="load"){let a=[];self.onmessage=r=>a.push(r),self.startWorker=r=>{Module=r,postMessage({cmd:"loaded"});for(let s of a)handleMessage(s);self.onmessage=handleMessage},Module.wasmModule=e.data.wasmModule;for(const r of e.data.handlers)Module[r]=(...s)=>{postMessage({cmd:"callHandler",handler:r,args:s})};if(Module.wasmMemory=e.data.wasmMemory,Module.buffer=Module.wasmMemory.buffer,Module.ENVIRONMENT_IS_PTHREAD=!0,typeof e.data.urlOrBlob=="string")importScripts(e.data.urlOrBlob);else{var t=URL.createObjectURL(e.data.urlOrBlob);importScripts(t),URL.revokeObjectURL(t)}ortWasmThreaded(Module)}else if(e.data.cmd==="run"){Module.__emscripten_thread_init(e.data.pthread_ptr,0,0,1),Module.__emscripten_thread_mailbox_await(e.data.pthread_ptr),Module.establishStackSpace(),Module.PThread.receiveObjectTransfer(e.data),Module.PThread.threadInitTLS(),initializedJS||(initializedJS=!0);try{Module.invokeEntryPoint(e.data.start_routine,e.data.arg)}catch(a){if(a!="unwind")throw a}}else e.data.cmd==="cancel"?Module._pthread_self()&&Module.__emscripten_thread_exit(-1):e.data.target==="setimmediate"||(e.data.cmd==="checkMailbox"?initializedJS&&Module.checkMailbox():e.data.cmd&&(err("worker.js received unknown command "+e.data.cmd),err(e.data)))}catch(a){throw Module.__emscripten_thread_crashed&&Module.__emscripten_thread_crashed(),a}}self.onmessage=handleMessage;\\n\'});var wn,Tt,ir,Pr,sr,Eo,vn,Ve=j(()=>{"use strict";wn=e=>{switch(e){case"int8":return 3;case"uint8":return 2;case"bool":return 9;case"int16":return 5;case"uint16":return 4;case"int32":return 6;case"uint32":return 12;case"float16":return 10;case"float32":return 1;case"float64":return 11;case"string":return 8;case"int64":return 7;case"uint64":return 13;default:throw new Error(`unsupported data type: ${e}`)}},Tt=e=>{switch(e){case 3:return"int8";case 2:return"uint8";case 9:return"bool";case 5:return"int16";case 4:return"uint16";case 6:return"int32";case 12:return"uint32";case 10:return"float16";case 1:return"float32";case 11:return"float64";case 8:return"string";case 7:return"int64";case 13:return"uint64";default:throw new Error(`unsupported data type: ${e}`)}},ir=e=>[void 0,4,1,1,2,2,4,8,void 0,1,2,8,4,8,void 0,void 0,void 0][e],Pr=e=>{switch(e){case"float16":return Uint16Array;case"float32":return Float32Array;case"uint8":return Uint8Array;case"int8":return Int8Array;case"uint16":return Uint16Array;case"int16":return Int16Array;case"int32":return Int32Array;case"bool":return Uint8Array;case"float64":return Float64Array;case"uint32":return Uint32Array;case"int64":return BigInt64Array;case"uint64":return BigUint64Array;default:throw new Error(`unsupported type: ${e}`)}},sr=e=>{switch(e){case"verbose":return 0;case"info":return 1;case"warning":return 2;case"error":return 3;case"fatal":return 4;default:throw new Error(`unsupported logging level: ${e}`)}},Eo=e=>e==="float32"||e==="int32"||e==="int64"||e==="bool"||e==="float16"||e==="uint32",vn=e=>{switch(e){case"none":return 0;case"cpu":return 1;case"cpu-pinned":return 2;case"texture":return 3;case"gpu-buffer":return 4;default:throw new Error(`unsupported data location: ${e}`)}}});var el,tl,Oo,ko,Po,rl,Re,wt=j(()=>{"use strict";Ve();el=["V","I","W","E","F"],tl=(e,t)=>{console.log(`[${el[e]},${new Date().toISOString()}]${t}`)},Po=(e,t)=>{Oo=e,ko=t},rl=(e,t)=>{let r=sr(e),o=sr(Oo);r>=o&&tl(r,typeof t=="function"?t():t)},Re=(...e)=>{ko&&rl(...e)}});var Ro,Bo=j(()=>{"use strict";Ve();Ro=(e,t)=>new(Pr(t))(e)});var Rr=j(()=>{"use strict"});var Br,nl,Mo,Sn,$n,zo,Vo=j(()=>{"use strict";wt();Rr();Br=e=>Math.ceil(e/16)*16,nl=1,Mo=()=>nl++,Sn=async(e,t,r,o)=>{let n=Br(r),s=e.device.createBuffer({size:n,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ});try{let u=e.getCommandEncoder();e.endComputePass(),u.copyBufferToBuffer(t,0,s,0,n),e.flush(),await s.mapAsync(GPUMapMode.READ);let d=s.getMappedRange();if(o){let a=o();return a.set(new Uint8Array(d,0,r)),a}else return new Uint8Array(d.slice(0,r))}finally{s.destroy()}},$n=class{constructor(t){this.backend=t;this.storageCache=new Map,this.freeBuffers=new Map,this.freeUniformBuffers=new Map,this.buffersForUploadingPending=[],this.buffersPending=[],this.externalBuffers=new Map}upload(t,r){let o=r.buffer,n=r.byteOffset,s=r.byteLength,u=Br(s),d=this.storageCache.get(t);if(!d)throw new Error("gpu data for uploading does not exist");if(d.originalSize!==s)throw new Error(`inconsistent data size. gpu data size=${d.originalSize}, data size=${s}`);let a=this.backend.device.createBuffer({mappedAtCreation:!0,size:u,usage:GPUBufferUsage.MAP_WRITE|GPUBufferUsage.COPY_SRC}),p=a.getMappedRange();new Uint8Array(p).set(new Uint8Array(o,n,s)),a.unmap();let h=this.backend.getCommandEncoder();this.backend.endComputePass(),h.copyBufferToBuffer(a,0,d.gpuData.buffer,0,u),Re("verbose",()=>`[WebGPU] GpuDataManager.upload(id=${t})`),this.buffersForUploadingPending.push(a)}memcpy(t,r){let o=this.storageCache.get(t);if(!o)throw new Error("source gpu data for memcpy does not exist");let n=this.storageCache.get(r);if(!n)throw new Error("destination gpu data for memcpy does not exist");if(o.originalSize!==n.originalSize)throw new Error("inconsistent source and destination gpu data size");let s=Br(o.originalSize),u=this.backend.getCommandEncoder();this.backend.endComputePass(),u.copyBufferToBuffer(o.gpuData.buffer,0,n.gpuData.buffer,0,s)}registerExternalBuffer(t,r,o){let n;if(o){if(n=this.externalBuffers.get(o),n===void 0)throw new Error("previous buffer is not registered");if(t===o)return Re("verbose",()=>`[WebGPU] GpuDataManager.registerExternalBuffer(size=${r}) => id=${n}, buffer is the same, skip.`),n;this.externalBuffers.delete(o)}else n=Mo();return this.storageCache.set(n,{gpuData:{id:n,type:0,buffer:t},originalSize:r}),this.externalBuffers.set(t,n),Re("verbose",()=>`[WebGPU] GpuDataManager.registerExternalBuffer(size=${r}) => id=${n}, registered.`),n}unregisterExternalBuffer(t){let r=this.externalBuffers.get(t);r!==void 0&&(this.storageCache.delete(r),this.externalBuffers.delete(t),Re("verbose",()=>`[WebGPU] GpuDataManager.unregisterExternalBuffer() => id=${r}`))}create(t,r=GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST){let o=Br(t),n,s=(r&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE,u=(r&GPUBufferUsage.UNIFORM)===GPUBufferUsage.UNIFORM;if(s||u){let a=s?this.freeBuffers:this.freeUniformBuffers,p=a.get(o);p||(p=[],a.set(o,p)),p.length>0?n=p.pop():n=this.backend.device.createBuffer({size:o,usage:r})}else n=this.backend.device.createBuffer({size:o,usage:r});let d={id:Mo(),type:0,buffer:n};return this.storageCache.set(d.id,{gpuData:d,originalSize:t}),Re("verbose",()=>`[WebGPU] GpuDataManager.create(size=${t}) => id=${d.id}`),d}get(t){return this.storageCache.get(t)?.gpuData}release(t){let r=this.storageCache.get(t);if(!r)throw new Error("releasing data does not exist");return Re("verbose",()=>`[WebGPU] GpuDataManager.release(id=${t}), gpuDataId=${r.gpuData.id}`),this.storageCache.delete(t),this.buffersPending.push(r.gpuData.buffer),r.originalSize}async download(t,r){let o=this.storageCache.get(t);if(!o)throw new Error("data does not exist");await Sn(this.backend,o.gpuData.buffer,o.originalSize,r)}refreshPendingBuffers(){for(let t of this.buffersForUploadingPending)t.destroy();this.buffersForUploadingPending=[];for(let t of this.buffersPending)(t.usage&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE?this.freeBuffers.get(t.size).push(t):(t.usage&GPUBufferUsage.UNIFORM)===GPUBufferUsage.UNIFORM?this.freeUniformBuffers.get(t.size).push(t):t.destroy();this.buffersPending=[]}dispose(){this.freeBuffers.forEach(t=>{t.forEach(r=>{r.destroy()})}),this.freeUniformBuffers.forEach(t=>{t.forEach(r=>{r.destroy()})}),this.storageCache.forEach(t=>{t.gpuData.buffer.destroy()}),this.storageCache=new Map,this.freeBuffers=new Map,this.freeUniformBuffers=new Map}},zo=(...e)=>new $n(...e)});var xn,Q,ke=j(()=>{"use strict";xn=class{constructor(t){Object.assign(this,t)}get cacheKey(){return this.key||(this.key=Object.getOwnPropertyNames(this).sort().map(t=>`${this[t]}`).join(";")),this.key}},Q=e=>new xn(e)});var Cn,it,D,Et,Mr,Dr,zr,ye=j(()=>{"use strict";Cn=class{static calcMatMulShape(t,r){return t[1]!==r[0]?void 0:[t[0],r[1]]}},it=class{static calcShape(t,r,o=!1){let n=t.length,s=r.length;if(n===0)return r;if(s===0)return t;let u=Math.max(t.length,r.length),d=new Array(u);if(o){if(n<2||s<2)return;let a=Cn.calcMatMulShape([t[n-2],t[n-1]],[r[s-2],r[s-1]]);if(a===void 0)return;[d[u-2],d[u-1]]=a}for(let a=o?3:1;a<=u;a++){let p=n-a<0?1:t[n-a],h=s-a<0?1:r[s-a];if(p!==h&&p>1&&h>1)return;d[u-a]=Math.max(p,h)}return d}static isValidBroadcast(t,r){let o=t.length,n=r.length;if(o>n)return!1;for(let s=1;s<=o;s++)if(t[o-s]!==1&&t[o-s]!==r[n-s])return!1;return!0}},D=class e{static size(t){return e.getSizeFromDimensionRange(t,0,t.length)}static sizeFromDimension(t,r){if(r<0||r>t.length)throw new Error(`invalid dimension of ${r} for sizeFromDimension as Tensor has ${t.length} dimensions.`);return e.getSizeFromDimensionRange(t,r,t.length)}static sizeToDimension(t,r){if(r<0||r>t.length)throw new Error(`invalid dimension of ${r} for sizeToDimension as Tensor has ${t.length} dimensions.`);return e.getSizeFromDimensionRange(t,0,r)}static getSizeFromDimensionRange(t,r,o){let n=1;for(let s=r;s<o;s++){if(t[s]<0)throw new Error("cannot get valid size from specified dimension range. Most likely the range contains negative values in them.");n*=t[s]}return n}static computeStrides(t){let r=t.length;if(r===0)return[];if(r===1)return[1];let o=new Array(r);o[r-1]=1,o[r-2]=t[r-1];for(let n=r-3;n>=0;--n)o[n]=o[n+1]*t[n+1];return o}static normalizeAxis(t,r){if(t<-r&&t>=r)throw new Error("unsupported axis for this operation.");return t<0?t+r:t}static normalizeAxes(t,r){return t.map(o=>this.normalizeAxis(o,r??t.length))}static sortBasedOnPerm(t,r){return r?r.map(o=>t[o]):t.slice().reverse()}static padShape(t,r){let o=t.length;return t.map((n,s)=>n+r[s]+r[s+o])}static areEqual(t,r){return t.length!==r.length?!1:t.every((o,n)=>o===r[n])}},Et=class e{static adjustPoolAttributes(t,r,o,n,s,u){if(!t&&o.length!==r.length-2)throw new Error("length of specified kernel shapes should be 2 less than length of input dimensions");if(t)for(let d=0;d<r.length-2;d++)d>=o.length?o.push(r[d+2]):o[d]=r[d+2];for(let d=0;d<o.length;d++)if(d<n.length){if(n[d]<0)throw new Error("strides should be greater than or equal to 1")}else n.push(1);for(let d=0;d<o.length;d++)if(d<s.length){if(s[d]<0)throw new Error("dilations should be greater than or equal to 1")}else s.push(1);for(let d=0;d<o.length*2;d++)if(d<u.length){if(u[d]<0)throw new Error("pad should be greater than or equal to 1")}else u.push(0);for(let d=0;d<o.length;d++){if(o[d]<=0)throw new Error("kernel shapes need to be greater than 0");if(u[d]>=o[d]||u[d+o.length]>=o[d])throw new Error("pads should be smaller than kernel")}}static adjustPadsBasedOnAutoPad(t,r,o,n,s,u,d){if(d){if(s.length!==2*(t.length-2))throw new Error("length of pads should be twice the length of data dimensions");if(r.length!==t.length-2)throw new Error("length of strides should be the length of data dimensions");if(n.length!==t.length-2)throw new Error("length of kernel shapes should be the length of data dimensions");for(let a=0;a<t.length-2;a++)e.adjustPadAndReturnShape(t[a+(u?1:2)],r[a],o[a],n[a],s,a,a+t.length-2,d)}}static computePoolOutputShape(t,r,o,n,s,u,d){if(r.length<=0)throw new Error("input shape must be of size greater than 0");let a=[r[0],r[1]];return e.computeShapeHelper(t,r,a,o,n,s,u,d),a}static computeConvOutputShape(t,r,o,n,s,u,d){if(t.length<=0||r.length<=0)throw new Error("invalid input tensor dims or invalid filter tensor dims");let a=[t[0],r[0]];return e.computeShapeHelper(!1,t,a,o,n,s,u,d),a}static computeShapeHelper(t,r,o,n,s,u,d,a){if(t)for(let p=0;p<r.length-2;p++)o.push(1);else for(let p=0;p<r.length-2;p++)o.push(e.adjustPadAndReturnShape(r[p+2],n[p],s[p],u[p],d,p,p+r.length-2,a))}static adjustPadAndReturnShape(t,r,o,n,s,u,d,a){let p=o*(n-1)+1;if(a&&a!=="NOTSET")switch(a){case"VALID":return s[u]=0,s[d]=0,Math.floor((t-p)/r+1);case"SAME_LOWER":case"SAME_UPPER":if(o!==1)throw new Error("Dilation not supported for SAME_UPPER or SAME_LOWER");{let v=((t+r-1)/r-1)*r+n-t;return s[u]=Math.floor(a==="SAME_LOWER"?(v+1)/2:v/2),s[d]=v-s[u],Math.floor((t+v-n)/r+1)}default:throw new Error("Unsupported AutoPad type")}else return Math.floor((t+s[u]+s[d]-p)/r+1)}},Mr=class{static getShapeOfGemmResult(t,r,o,n,s){if(t.length!==2||o.length!==2)throw new Error("shape need to be of size 2");let u,d,a;r?(u=t[1],d=t[0]):(u=t[0],d=t[1]);let p=-1;if(n?(a=o[0],p=1):(a=o[1],p=0),o[p]!==d)throw new Error("dimension mismatch");if(u<=0||a<=0||d<=0)throw new Error("invalid shape specified");if(s&&!it.isValidBroadcast(s,[u,a]))throw new Error("gemm: invalid bias shape for broadcast");return[u,a,d]}},Dr=-34028234663852886e22,zr=34028234663852886e22});var ol,Wo,Te,Y,Ye,Le,Je,et,_e,In,V,K,Uo,_n,No,An,Pe,be=j(()=>{"use strict";Ve();ye();ol=64,Wo=(e,t)=>{if(t===3)throw new Error("vec3 has same alignment as vec4, use vec4 instead");switch(e){case 10:return t>1?`vec${t}<f16>`:"f16";case 1:return t>1?`vec${t}<f32>`:"f32";case 6:return t>1?`vec${t}<i32>`:"i32";case 12:return t>1?`vec${t}<u32>`:"u32";case 7:if(t>1)throw new Error("currently not supported vecX of uint64 yet");return["vec2<u32>","i32"];case 13:if(t>1)throw new Error("currently not supported vecX of uint64 yet");return["vec2<u32>","u32"];case 9:if(t!==4)throw new Error("bool must be vec4");return["u32","vec4<bool>"];default:throw new Error(`Unknown data type: ${e}`)}},Te=(e,t=1)=>{let r=Wo(e,t);return typeof r=="string"?r:r[0]},Y=e=>e.length===0?[]:[{type:"uint32",data:e},{type:"uint32",data:D.computeStrides(e)}],Ye=e=>e%4===0?4:e%2===0?2:1,Le=(e="f32",t,r="0")=>!t||t===1?`${e}(${r})`:`vec${t}<${e}>(${r})`,Je=(e,t,r)=>e==="f32"?r:t===1?`f32(${r})`:`vec${t}f(${r})`,et=(e,t)=>t===4?`(${e}.x + ${e}.y + ${e}.z + ${e}.w)`:t===2?`(${e}.x + ${e}.y)`:t===3?`(${e}.x + ${e}.y + ${e}.z)`:e,_e=(e,t,r)=>e.startsWith("uniforms.")&&r>4?typeof t=="string"?`${e}[(${t}) / 4][(${t}) % 4]`:`${e}[${Math.floor(t/4)}][${t%4}]`:r>1?`${e}[${t}]`:e,In=(e,t,r,o,n)=>{let s=typeof r=="number",u=s?r:r.length,d=[...new Array(u).keys()],a=u<2?"u32":u<=4?`vec${u}<u32>`:`array<u32, ${u}>`,p=Wo(t,n),h=typeof p=="string"?p:p[1],v=typeof p=="string"?p:p[0],g={indices:a,value:h,storage:v,tensor:t},w=F=>typeof F=="string"?F:`${F}u`,y={offsetToIndices:!1,indicesToOffset:!1,broadcastedIndicesToOffset:!1,set:!1,setByIndices:!1,get:!1,getByIndices:!1},S=s?"uniforms.":"",I=`${S}${e}_shape`,x=`${S}${e}_strides`,_="";for(let F=0;F<u-1;F++)_+=`\n    let dim${F} = current / ${_e(x,F,u)};\n    let rest${F} = current % ${_e(x,F,u)};\n    indices[${F}] = dim${F};\n    current = rest${F};\n    `;_+=`indices[${u-1}] = current;`;let B=u<2?"":`\n  fn o2i_${e}(offset: u32) -> ${g.indices} {\n    var indices: ${g.indices};\n    var current = offset;\n    ${_}\n    return indices;\n  }`,E=F=>(y.offsetToIndices=!0,u<2?F:`o2i_${e}(${F})`),z=[];if(u>=2)for(let F=u-1;F>=0;F--)z.push(`${_e(x,F,u)} * (indices[${F}])`);let T=u<2?"":`\n  fn i2o_${e}(indices: ${g.indices}) -> u32 {\n    return ${z.join("+")};\n  }`,H=F=>(y.indicesToOffset=!0,u<2?F:`i2o_${e}(${F})`),U=(...F)=>u===0?"0u":`${g.indices}(${F.map(w).join(",")})`,L=(F,de)=>u<2?`${F}`:`${_e(F,de,u)}`,re=(F,de,fe)=>u<2?`${F}=${fe};`:`${_e(F,de,u)}=${fe};`,R={},q=(F,de)=>{y.broadcastedIndicesToOffset=!0;let fe=`${de.name}broadcastedIndicesTo${e}Offset`;if(fe in R)return`${fe}(${F})`;let Ne=[];for(let Ke=u-1;Ke>=0;Ke--){let Be=de.indicesGet("outputIndices",Ke+de.rank-u);Ne.push(`${L(x,Ke)} * (${Be} % ${L(I,Ke)})`)}return R[fe]=`fn ${fe}(outputIndices: ${de.type.indices}) -> u32 {\n             return ${Ne.length>0?Ne.join("+"):"0u"};\n           }`,`${fe}(${F})`},pe=(F,de)=>(()=>{if(g.storage===g.value)return`${e}[${F}]=${de};`;if(g.storage==="vec2<u32>"&&g.value==="i32")return`${e}[${F}]=vec2<u32>(u32(${de}), select(0u, 0xFFFFFFFFu, ${de} < 0));`;if(g.storage==="vec2<u32>"&&g.value==="u32")return`${e}[${F}]=vec2<u32>(u32(${de}), 0u);`;if(g.storage==="u32"&&g.value==="vec4<bool>")return`${e}[${F}]=dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(${de}));`;throw new Error(`not supported combination of storage type ${g.storage} and value type ${g.value} yet`)})(),J=F=>(()=>{if(g.storage===g.value)return`${e}[${F}]`;if(g.storage==="vec2<u32>"&&g.value==="i32")return`i32(${e}[${F}].x)`;if(g.storage==="vec2<u32>"&&g.value==="u32")return`u32(${e}[${F}].x)`;if(g.storage==="u32"&&g.value==="vec4<bool>")return`vec4<bool>(bool(${e}[${F}] & 0xFFu), bool(${e}[${F}] & 0xFF00u), bool(${e}[${F}] & 0xFF0000u), bool(${e}[${F}] & 0xFF000000u))`;throw new Error(`not supported combination of storage type ${g.storage} and value type ${g.value} yet`)})(),$e=u<2?"":`\n  fn get_${e}ByIndices(indices: ${g.indices}) -> ${h} {\n    return ${J(`i2o_${e}(indices)`)};\n  }`,Z=u<2?"":(()=>{let F=d.map(fe=>`d${fe}: u32`).join(", "),de=d.map(fe=>`d${fe}`).join(", ");return`\n  fn get_${e}(${F}) -> ${h} {\n    return get_${e}ByIndices(${U(de)});\n  }`})(),Se=(...F)=>{if(F.length!==u)throw new Error(`indices length must be ${u}`);let de=F.map(w).join(",");return u===0?J("0u"):u===1?J(de[0]):(y.get=!0,y.getByIndices=!0,y.indicesToOffset=!0,`get_${e}(${de})`)},Ie=F=>u<2?J(F):(y.getByIndices=!0,y.indicesToOffset=!0,`get_${e}ByIndices(${F})`),Ae=u<2?"":`\n  fn set_${e}ByIndices(indices: ${g.indices}, value: ${h}) {\n    ${pe(`i2o_${e}(indices)`,"value")}\n  }`,he=u<2?"":(()=>{let F=d.map(fe=>`d${fe}: u32`).join(", "),de=d.map(fe=>`d${fe}`).join(", ");return`\n  fn set_${e}(${F}, value: ${h}) {\n    set_${e}ByIndices(${U(de)}, value);\n  }`})();return{impl:()=>{let F=[];return s||(F.push(`const ${I} = ${g.indices}(${r.join(",")});`),F.push(`const ${x} = ${g.indices}(${D.computeStrides(r).join(",")});`)),y.offsetToIndices&&F.push(B),y.indicesToOffset&&F.push(T),y.broadcastedIndicesToOffset&&Object.values(R).forEach(de=>F.push(de)),y.set&&F.push(he),y.setByIndices&&F.push(Ae),y.get&&F.push(Z),y.getByIndices&&F.push($e),F.join(`\n`)},type:g,offsetToIndices:E,indicesToOffset:H,broadcastedIndicesToOffset:q,indices:U,indicesGet:L,indicesSet:re,set:(...F)=>{if(F.length!==u+1)throw new Error(`indices length must be ${u}`);let de=F[u];if(typeof de!="string")throw new Error("value must be string");let fe=F.slice(0,u).map(w).join(",");return u===0?pe("0u",de):u===1?pe(fe[0],de):(y.set=!0,y.setByIndices=!0,y.indicesToOffset=!0,`set_${e}(${fe}, ${de})`)},setByOffset:pe,setByIndices:(F,de)=>u<2?pe(F,de):(y.setByIndices=!0,y.indicesToOffset=!0,`set_${e}ByIndices(${F}, ${de});`),get:Se,getByOffset:J,getByIndices:Ie,usage:o,name:e,strides:x,shape:I,rank:u}},V=(e,t,r,o=1)=>In(e,t,r,"input",o),K=(e,t,r,o=1)=>In(e,t,r,"output",o),Uo=(e,t,r,o=1)=>In(e,t,r,"internal",o),_n=class{constructor(t){this.normalizedDispatchGroup=t;this.internalVariables=[];this.variables=[];this.uniforms=[];this.variableIndex=0}guardAgainstOutOfBoundsWorkgroupSizes(t){return`if (global_idx >= ${typeof t=="number"?`${t}u`:t}) { return; }`}mainStart(t=ol){let r=typeof t=="number"?t:t[0],o=typeof t=="number"?1:t[1],n=typeof t=="number"?1:t[2],s=this.normalizedDispatchGroup[1]===1&&this.normalizedDispatchGroup[2]===1,u=s?`@builtin(global_invocation_id) global_id : vec3<u32>,\n    @builtin(local_invocation_id) local_id : vec3<u32>`:`@builtin(local_invocation_index) local_index : u32,\n    @builtin(workgroup_id) workgroup_id : vec3<u32>,\n    @builtin(num_workgroups) num_workgroups : vec3<u32>`,d=s?"let global_idx = global_id.x;":`let global_idx = (workgroup_id.z * num_workgroups[0] * num_workgroups[1] +\n          workgroup_id.y * num_workgroups[0] + workgroup_id.x) * ${r*o*n}u + local_index;`;return`@compute @workgroup_size(${r}, ${o}, ${n})\n  fn main(${u}) {\n    ${d}\n  `}appendVariableUniforms(t){t.rank!==0&&(t.shape.startsWith("uniforms.")&&this.uniforms.push({name:t.shape.replace("uniforms.",""),type:"u32",length:t.rank}),t.strides.startsWith("uniforms.")&&this.uniforms.push({name:t.strides.replace("uniforms.",""),type:"u32",length:t.rank}))}declareVariable(t,r){if(t.usage==="internal")throw new Error("cannot use internal variable with declareVariable(). use registerInternalVariables() instead.");this.variables.push(t),this.appendVariableUniforms(t);let o=t.usage==="input"?"read":"read_write",n=t.type.storage;return`@group(0) @binding(${r}) var<storage, ${o}> ${t.name}: array<${n}>;`}declareVariables(...t){return t.map(r=>this.declareVariable(r,this.variableIndex++)).join(`\n`)}registerInternalVariable(t){if(t.usage!=="internal")throw new Error("cannot use input or output variable with registerInternalVariable(). use declareVariables() instead.");this.internalVariables.push(t),this.appendVariableUniforms(t)}registerInternalVariables(...t){return t.forEach(r=>this.registerInternalVariable(r)),this}registerUniform(t,r,o=1){return this.uniforms.push({name:t,type:r,length:o}),this}registerUniforms(t){return this.uniforms=this.uniforms.concat(t),this}uniformDeclaration(){if(this.uniforms.length===0)return"";let t=[];for(let{name:r,type:o,length:n}of this.uniforms)if(n&&n>4)t.push(`${r}:array<vec4<${o}>, ${Math.ceil(n/4)}>`);else{let s=n==null||n===1?o:`vec${n}<${o}>`;t.push(`${r}:${s}`)}return`\n      struct Uniforms { ${t.join(", ")} };\n      @group(0) @binding(${this.variableIndex}) var<uniform> uniforms: Uniforms;`}get additionalImplementations(){return this.uniformDeclaration()+this.variables.map(t=>t.impl()).join(`\n`)+this.internalVariables.map(t=>t.impl()).join(`\n`)}},No=e=>new _n(e),An=(e,t)=>{let r=e.length,o=[];for(let n=0;n<r;n++){let s=r-1-n,u=e[s]||1;(t[t.length-1-n]||1)>1&&u===1&&o.unshift(s)}return o},Pe=e=>!0});var al,Ho,il,sl,tt,Go,Lo,Wt=j(()=>{"use strict";ye();ke();be();al=e=>{if(!e||e.length!==1)throw new Error("Transpose requires 1 input.")},Ho=(e,t)=>t&&t.length!==e?[...new Array(e).keys()].reverse():t,il=(e,t)=>D.sortBasedOnPerm(e,Ho(e.length,t)),sl=(e,t,r,o)=>{let n=[];n.push(`fn perm(i: ${o.type.indices}) -> ${r.type.indices} {\n    var a: ${r.type.indices};`);for(let s=0;s<t;++s)n.push(r.indicesSet("a",e[s],`i[${s}]`));return n.push("return a;}"),n.join(`\n`)},tt=(e,t)=>{let r=e.dataType,o=e.dims.length,n=Ho(o,t),s=Pe(o),u=il(e.dims,n),d=s?u.length:u,a=s?o:e.dims,p=K("output",r,d),h=V("a",r,a),v=g=>`\n  ${g.registerUniform("output_size","u32").declareVariables(h,p)}\n\n  ${sl(n,o,h,p)}\n\n  ${g.mainStart()}\n    ${g.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n\n    let indices = ${p.offsetToIndices("global_idx")};\n    let aIndices = perm(indices);\n\n    ${p.setByOffset("global_idx",h.getByIndices("aIndices"))}\n  }`;return{name:"Transpose",shaderCache:{hint:`${t}`,inputDependencies:s?["rank"]:["dims"]},getRunData:g=>{let w=D.size(u);return{outputs:[{dims:u,dataType:g[0].dataType}],dispatchGroup:{x:Math.ceil(w/64)},programUniforms:s?[{type:"uint32",data:w},...Y(g[0].dims),...Y(u)]:[{type:"uint32",data:w}]}},getShaderSource:v}},Go=(e,t)=>{al(e.inputs),e.compute(tt(e.inputs[0],t.perm))},Lo=e=>Q({perm:e.perm})});var ul,ll,dl,cl,pl,ml,fl,hl,gl,yl,st,Fo,qo,jo,Ko,Yo,Zo,Xo,Qo,Jo,ea,ta=j(()=>{"use strict";ye();be();Vr();Wt();ul={max:"select(bestValue, candidate, candidate > bestValue)",min:"select(bestValue, candidate, candidate < bestValue)",mean:"bestValue + candidate",sum:"bestValue + candidate",prod:"bestValue * candidate",sumSquare:"bestValue + candidate * candidate",logSumExp:"bestValue + exp(candidate)",l1:"bestValue + abs(candidate)",l2:"bestValue + candidate * candidate",logSum:"bestValue + candidate"},ll={max:"select(bestValue, candidate, candidate > bestValue)",min:"select(bestValue, candidate, candidate < bestValue)",mean:"bestValue + candidate",sum:"bestValue + candidate",prod:"bestValue * candidate",sumSquare:"bestValue + candidate",logSumExp:"bestValue + candidate",l1:"bestValue + candidate",l2:"bestValue + candidate",logSum:"bestValue + candidate"},dl={max:"_A[offset]",min:"_A[offset]",mean:"0",sum:"0",prod:"1",sumSquare:"0",logSumExp:"0",l1:"0",l2:"0",logSum:"0"},cl={max:"bestValue",min:"bestValue",sum:"bestValue",prod:"bestValue",sumSquare:"bestValue",logSumExp:"log(bestValue)",l1:"bestValue",l2:"sqrt(bestValue)",logSum:"log(bestValue)"},pl=(e,t)=>{let r=[];for(let o=t-e;o<t;++o)r.push(o);return r},ml=(e,t)=>{let r=[],o=e.length;for(let s=0;s<o;s++)t.indexOf(s)===-1&&r.push(e[s]);let n=t.map(s=>e[s]);return[r,n]},fl=(e,t)=>{let r=e.length+t.length,o=[],n=0;for(let s=0;s<r;s++)t.indexOf(s)===-1?o.push(e[n++]):o.push(1);return o},hl=(e,t)=>{for(let r=0;r<e.length;++r)if(e[e.length-r-1]!==t-1-r)return!1;return!0},gl=(e,t)=>{let r=[];if(!hl(e,t)){for(let o=0;o<t;++o)e.indexOf(o)===-1&&r.push(o);e.forEach(o=>r.push(o))}return r},yl=(e,t,r,o,n,s,u)=>{let d=r[0].dims,a=D.size(s),p=D.size(u),h=V("_A",r[0].dataType,d),v=K("output",n,s),g=32,w=`\n          var<workgroup> aBestValues : array<${v.type.storage}, ${g}>;\n       `;return{name:e,shaderCache:t,getShaderSource:S=>`\n        ${S.registerUniform("reduceSize","u32").declareVariables(h,v)}\n        ${w}\n        fn DIV_CEIL(a : u32, b : u32) -> u32 {\n          return ((a - 1u) / b + 1u);\n         }\n         ${S.mainStart(g)}\n          let local_idx = local_id.x;\n\n          let outputIndex = global_idx / ${g};\n          let offset = outputIndex * uniforms.reduceSize;\n\n          var bestValue = ${v.type.storage}(${dl[o]});\n          let Length = uniforms.reduceSize;\n          for (var k = local_idx; k < Length; k = k + ${g}) {\n           let candidate = ${v.type.storage}(${h.getByOffset("offset + k")});\n           bestValue = ${ul[o]};\n          }\n          aBestValues[local_idx] = bestValue;\n          workgroupBarrier();\n\n         var reduceSize = min(Length, ${g}u);\n         for (var currentSize = reduceSize / 2u; reduceSize > 1u;\n             currentSize = reduceSize / 2u) {\n           let interval = DIV_CEIL(reduceSize, 2u);\n           if (local_idx < currentSize) {\n            let candidate = aBestValues[local_idx + interval];\n            bestValue = ${ll[o]};\n            aBestValues[local_idx] = bestValue;\n           }\n           reduceSize = interval;\n           workgroupBarrier();\n         }\n\n         if (local_idx == 0u) {\n          ${v.setByOffset("outputIndex",`${o==="mean"?`bestValue / ${v.type.storage}(uniforms.reduceSize)`:`${cl[o]}`}`)};\n         }\n        }`,getRunData:()=>({outputs:[{dims:s,dataType:n}],dispatchGroup:{x:a},programUniforms:[{type:"uint32",data:p}]})}},st=(e,t,r,o)=>{let n=e.inputs.length===1?r:Tn(e.inputs,r),s=n.axes;s.length===0&&!n.noopWithEmptyAxes&&(s=e.inputs[0].dims.map((w,y)=>y));let u=D.normalizeAxes(s,e.inputs[0].dims.length),d=u,a=e.inputs[0],p=gl(d,e.inputs[0].dims.length);p.length>0&&(a=e.compute(tt(e.inputs[0],p),{inputs:[0],outputs:[-1]})[0],d=pl(d.length,a.dims.length));let[h,v]=ml(a.dims,d),g=h;n.keepDims&&(g=fl(h,u)),e.compute(yl(t,{hint:n.cacheKey,inputDependencies:["type"]},[a],o,e.inputs[0].dataType,g,v),{inputs:[a]})},Fo=(e,t)=>{st(e,"ReduceMeanShared",t,"mean")},qo=(e,t)=>{st(e,"ReduceL1Shared",t,"l1")},jo=(e,t)=>{st(e,"ReduceL2Shared",t,"l2")},Ko=(e,t)=>{st(e,"ReduceLogSumExpShared",t,"logSumExp")},Yo=(e,t)=>{st(e,"ReduceMaxShared",t,"max")},Zo=(e,t)=>{st(e,"ReduceMinShared",t,"min")},Xo=(e,t)=>{st(e,"ReduceProdShared",t,"prod")},Qo=(e,t)=>{st(e,"ReduceSumShared",t,"sum")},Jo=(e,t)=>{st(e,"ReduceSumSquareShared",t,"sumSquare")},ea=(e,t)=>{st(e,"ReduceLogSumShared",t,"logSum")}});var ut,bl,Wr,Tn,lt,wl,vl,$l,Sl,xl,Cl,_l,Il,Al,Tl,dt,ra,na,oa,aa,ia,sa,ua,la,da,ca,Vr=j(()=>{"use strict";ye();ke();be();ta();ut=e=>{if(!e||e.length===0||e.length>2)throw new Error("Reduce op requires 1 or 2 inputs.");if(e.length===2&&e[1].dims.length!==1)throw new Error("Invalid axes input dims.")},bl=e=>["","",`var value = ${e.getByIndices("input_indices")};`,""],Wr=(e,t,r,o,n,s,u=!1,d=!1)=>{let a=[],p=r[0].dims,h=p.length,v=D.normalizeAxes(n,h),g=!d&&v.length===0;p.forEach((I,x)=>{g||v.indexOf(x)>=0?u&&a.push(1):a.push(I)});let w=a.length,y=D.size(a);return{name:e,shaderCache:t,getShaderSource:I=>{let x=[],_=V("_A",r[0].dataType,h),B=K("output",s,w),E=o(_,B,v),z=E[2];for(let T=0,H=0;T<h;T++)g||v.indexOf(T)>=0?(u&&H++,z=`for(var j${T}: u32 = 0; j${T} < ${p[T]}; j${T}++) {\n                  ${E[2].includes("last_index")?`let last_index = j${T};`:""}\n                  ${_.indicesSet("input_indices",T,`j${T}`)}\n                  ${z}\n                }`):(x.push(`${_.indicesSet("input_indices",T,B.indicesGet("output_indices",H))};`),H++);return`\n\n        ${I.registerUniform("output_size","u32").declareVariables(_,B)}\n\n        ${I.mainStart()}\n          ${I.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n          var input_indices: ${_.type.indices};\n          let output_indices = ${B.offsetToIndices("global_idx")};\n\n          ${x.join(`\n`)}\n          ${E[0]}       // init ops for reduce max/min\n          ${E[1]}\n          ${z}\n          ${E[3]}\n          ${E.length===4?B.setByOffset("global_idx","value"):E.slice(4).join(`\n`)}\n        }`},getRunData:()=>({outputs:[{dims:a,dataType:s}],dispatchGroup:{x:Math.ceil(y/64)},programUniforms:[{type:"uint32",data:y},...Y(p),...Y(a)]})}},Tn=(e,t)=>{let r=[];return e[1].dims[0]>0&&e[1].getBigInt64Array().forEach(o=>r.push(Number(o))),Q({axes:r,keepDims:t.keepDims,noopWithEmptyAxes:t.noopWithEmptyAxes})},lt=(e,t,r,o)=>{let n=e.inputs,s=n.length===1?r:Tn(n,r);e.compute(Wr(t,{hint:s.cacheKey,inputDependencies:["rank"]},[n[0]],s.noopWithEmptyAxes&&s.axes.length===0?bl:o,s.axes,n[0].dataType,s.keepDims,s.noopWithEmptyAxes),{inputs:[0]})},wl=(e,t)=>{ut(e.inputs),lt(e,"ReduceLogSum",t,(o,n)=>[`var value = ${n.type.storage}(0);`,"",`value += ${o.getByIndices("input_indices")};`,"value = log(value);"])},vl=(e,t)=>{ut(e.inputs),lt(e,"ReduceL1",t,(o,n)=>[`var value = ${n.type.storage}(0);`,"",`value += abs(${o.getByIndices("input_indices")});`,""])},$l=(e,t)=>{ut(e.inputs),lt(e,"ReduceL2",t,(o,n)=>[`var t = ${n.type.value}(0); var value = ${n.type.value}(0);`,"",`t = ${o.getByIndices("input_indices")}; value += (t * t);`,"value = sqrt(value);"])},Sl=(e,t)=>{ut(e.inputs),lt(e,"ReduceLogSumExp",t,(o,n)=>[`var value = ${n.type.storage}(0);`,"",`value += exp(${o.getByIndices("input_indices")});`,"value = log(value);"])},xl=(e,t)=>{ut(e.inputs),lt(e,"ReduceMax",t,(o,n,s)=>{let u=[];for(let d=0;d<o.rank;d++)(s.indexOf(d)>=0||s.length===0)&&u.push(o.indicesSet("input_indices",d,0));return[`${u.join(`\n`)}`,`var value = ${o.getByIndices("input_indices")};`,`value = max(value, ${o.getByIndices("input_indices")});`,""]})},Cl=(e,t)=>{ut(e.inputs),lt(e,"ReduceMean",t,(o,n,s)=>{let u=1;for(let d=0;d<o.rank;d++)(s.indexOf(d)>=0||s.length===0)&&(u*=e.inputs[0].dims[d]);return["var sum = f32(0);","",`sum += f32(${o.getByIndices("input_indices")});`,`let value = ${n.type.value}(sum / ${u});`]})},_l=(e,t)=>{ut(e.inputs),lt(e,"ReduceMin",t,(o,n,s)=>{let u=[];for(let d=0;d<o.rank;d++)(s.indexOf(d)>=0||s.length===0)&&u.push(`input_indices[${d}] = 0;`);return[`${u.join(`\n`)}`,`var value = ${o.getByIndices("input_indices")};`,`value = min(value, ${o.getByIndices("input_indices")});`,""]})},Il=(e,t)=>{ut(e.inputs),lt(e,"ReduceProd",t,(o,n)=>[`var value = ${n.type.storage}(1);`,"",`value *= ${o.getByIndices("input_indices")};`,""])},Al=(e,t)=>{ut(e.inputs),lt(e,"ReduceSum",t,(o,n)=>[`var value = ${n.type.storage}(0);`,"",`value += ${o.getByIndices("input_indices")};`,""])},Tl=(e,t)=>{ut(e.inputs),lt(e,"ReduceSumSquare",t,(o,n)=>[`var t = ${n.type.value}(0); var value = ${n.type.value}(0);`,"",`t = ${o.getByIndices("input_indices")}; value += t * t;`,""])},dt=(e,t,r)=>{if(t.length===0)return r;let o=1,n=1;for(let s=0;s<t.length;s++)t.indexOf(s)===-1?o*=e[s]:n*=e[s];return n<32&&o>1024},ra=(e,t)=>{dt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Cl(e,t):Fo(e,t)},na=(e,t)=>{dt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?vl(e,t):qo(e,t)},oa=(e,t)=>{dt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?$l(e,t):jo(e,t)},aa=(e,t)=>{dt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Sl(e,t):Ko(e,t)},ia=(e,t)=>{dt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?xl(e,t):Yo(e,t)},sa=(e,t)=>{dt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?_l(e,t):Zo(e,t)},ua=(e,t)=>{dt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Il(e,t):Xo(e,t)},la=(e,t)=>{dt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Al(e,t):Qo(e,t)},da=(e,t)=>{dt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Tl(e,t):Jo(e,t)},ca=(e,t)=>{dt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?wl(e,t):ea(e,t)}});var pa,ma,fa,En,ha=j(()=>{"use strict";Ve();ke();Vr();pa=e=>{if(!e||e.length===0||e.length>2)throw new Error("ArgMinMaxOp op requires 1 or 2 inputs.");if(e[0].dataType!==1)throw new Error("Invalid input type.")},ma=(e,t)=>{pa(e.inputs);let r=(o,n,s)=>{let u=[];for(let d=0;d<o.rank;d++)(s.indexOf(d)>=0||s.length===0)&&u.push(`input_indices[${d}] = 0;`);return[`${u.join(`\n`)}`,`var value = ${o.getByIndices("input_indices")};\nvar best_index : i32 = 0;`,`if (${o.getByIndices("input_indices")} ${t.selectLastIndex>0?"<=":"<"} value) {\n         value = ${o.getByIndices("input_indices")};\n         best_index = i32(last_index);\n       }`,"",n.setByOffset("global_idx","best_index")]};e.compute(Wr("ArgMin",{hint:t.cacheKey,inputDependencies:["rank"]},[e.inputs[0]],r,[t.axis],7,t.keepDims),{inputs:[0]})},fa=(e,t)=>{pa(e.inputs);let r=(o,n,s)=>{let u=[];for(let d=0;d<o.rank;d++)(s.indexOf(d)>=0||s.length===0)&&u.push(`input_indices[${d}] = 0;`);return[`${u.join(`\n`)}`,`var value = ${o.getByIndices("input_indices")};\nvar best_index : i32 = 0;`,`if (${o.getByIndices("input_indices")} ${t.selectLastIndex>0?">=":">"} value) {\n         value = ${o.getByIndices("input_indices")};\n         best_index = i32(last_index);\n       }`,"",n.setByOffset("global_idx","best_index")]};e.compute(Wr("argMax",{hint:t.cacheKey,inputDependencies:["rank"]},[e.inputs[0]],r,[t.axis],7,t.keepDims),{inputs:[0]})},En=e=>Q(e)});var El,ga,Ol,kl,Pl,Ur,Rl,ya,On=j(()=>{"use strict";ke();Rr();be();El=(e,t)=>{let r=e[0],o=e[1],n=e[2],s=e[3],u=e[4],d=e[5];if(u&&d)throw new Error("Attention cannot have both past and relative_position_bias");if(r.dims.length!==3)throw new Error(\'Input "input" must have 3 dimensions\');let a=r.dims[0],p=r.dims[1],h=r.dims[2];if(n.dims.length!==1)throw new Error(\'Input "bias" is expected to have 1 dimensions\');if(o.dims.length!==2)throw new Error(\'Input "weights" is expected to have 2 dimensions\');if(o.dims[0]!==h)throw new Error("Input 1 dimension 0 should have same length as dimension 2 of input 0");if(n.dims[0]!==o.dims[1])throw new Error(\'Input "bias" dimension 0 should have same length as dimension 1 of input "weights"\');let v=n.dims[0]/3,g=v,w=g;if(t.qkvHiddenSizes.length>0){if(t.qkvHiddenSizes.length!==3)throw new Error("qkv_hidden_sizes attribute should have 3 elements");for(let B of t.qkvHiddenSizes)if(B%t.numHeads!==0)throw new Error("qkv_hidden_sizes should be divisible by num_heads");v=t.qkvHiddenSizes[0],g=t.qkvHiddenSizes[1],w=t.qkvHiddenSizes[2]}let y=p;if(v!==g)throw new Error("qkv_hidden_sizes first element should be same as the second");if(n.dims[0]!==v+g+w)throw new Error(\'Input "bias" dimension 0 should have same length as sum of Q/K/V hidden sizes\');let S=0;if(u){if(g!==w)throw new Error(\'Input "past" expect k_hidden_size == v_hidden_size\');if(u.dims.length!==5)throw new Error(\'Input "past" must have 5 dimensions\');if(u.dims[0]!==2)throw new Error(\'Input "past" first dimension must be 2\');if(u.dims[1]!==a)throw new Error(\'Input "past" second dimension must be batch_size\');if(u.dims[2]!==t.numHeads)throw new Error(\'Input "past" third dimension must be num_heads\');if(u.dims[4]!==g/t.numHeads)throw new Error(\'Input "past" fifth dimension must be k_hidden_size / num_heads\');t.pastPresentShareBuffer||(S=u.dims[3])}let I=y+S,x=-1,_=0;if(s)throw new Error("Mask not supported");if(u)throw new Error("past is not supported");if(d)throw new Error("relativePositionBias is not supported");return{batchSize:a,sequenceLength:p,pastSequenceLength:S,kvSequenceLength:y,totalSequenceLength:I,maxSequenceLength:x,inputHiddenSize:h,hiddenSize:v,vHiddenSize:w,headSize:Math.floor(v/t.numHeads),vHeadSize:Math.floor(w/t.numHeads),numHeads:t.numHeads,isUnidirectional:!1,pastPresentShareBuffer:!1,maskFilterValue:t.maskFilterValue,maskType:_,scale:t.scale,broadcastResPosBias:!1,passPastInKv:!1,qkvFormat:1}},ga=e=>Q({...e}),Ol=(e,t,r,o)=>{let n=Ye(o),s=K("x",t.dataType,t.dims,n),u="threadMaxVector";n===2?u="max(threadMaxVector.x, threadMaxVector.y)":n===4&&(u="max(max(threadMaxVector.x, threadMaxVector.y), max(threadMaxVector.z, threadMaxVector.w))");let d=Te(t.dataType),a=64,p=o/n;p<a?a=1:p/8<64&&(a=Math.ceil(p/8));let h=Math.ceil(o/n/a),v=g=>`\n  const dInv: ${d} = 1 / ${o};\n  const dComp = ${o/n};\n  var<workgroup> wgMax: array<f32, ${a}>;\n  var<workgroup> wgSum: array<f32, ${a}>;\n\n  ${g.declareVariables(s)}\n  @compute @workgroup_size(${a}, 1, 1)\n  fn main(@builtin(workgroup_id) workgroup_id : vec3<u32>,\n    @builtin(local_invocation_index) local_index : u32) {\n    let localOffset = local_index * ${h};\n    let offset: u32 = workgroup_id.x * dComp + localOffset;\n\n    var threadMaxVector = ${Le("f32",n,"-3.402823e+38f")};\n    for (var i: u32 = 0; i < ${h} && i + localOffset < dComp; i++) {\n      threadMaxVector = max(${Je(d,n,"x[offset + i]")}, threadMaxVector);\n    }\n    wgMax[local_index] = ${u};\n    workgroupBarrier();\n\n    var maxValue = -3.402823e+38f;\n    for (var i = 0u; i < ${a}; i++) {\n      maxValue = max(wgMax[i], maxValue);\n    }\n\n    var sumVector = ${Le("f32",n,"0")};\n    for (var i: u32 = 0; i < ${h} && i + localOffset < dComp; i++) {\n      sumVector += exp(${Je(d,n,"x[offset + i]")} - maxValue);\n    }\n    wgSum[local_index] = ${et("sumVector",n)};\n    workgroupBarrier();\n\n    var sum: f32 = 0;\n    for (var i = 0u; i < ${a}; i++) {\n      sum += wgSum[i];\n    }\n\n    if (sum == 0) {\n      for (var i: u32 = 0; i < ${h} && i + localOffset < dComp; i++) {\n        x[offset + i] = ${Le(d,n,"dInv")};\n      }\n    } else {\n      for (var i: u32 = 0; i < ${h} && i + localOffset < dComp; i++) {\n        let f32input = ${Je(d,n,"x[offset + i]")};\n        x[offset + i] = ${s.type.value}(exp(f32input - maxValue) / sum);\n      }\n    }\n  }`;e.compute({name:"AttentionProbsSoftmax",shaderCache:{hint:`${o}`},getShaderSource:v,getRunData:()=>({outputs:[],dispatchGroup:{x:r}})},{inputs:[t],outputs:[]})},kl=(e,t,r,o,n,s)=>{let u=[n.batchSize,n.numHeads,n.sequenceLength,n.kvSequenceLength+n.pastSequenceLength],d=s.scale===0?1/Math.sqrt(n.headSize):s.scale,a=Te(t.dataType),p=Ye(n.headSize),h=V("q",t.dataType,t.dims,p),v=V("key",r.dataType,r.dims,p),g=K("output",t.dataType,u),w=n.headSize/p,y=n.sequenceLength,S=n.totalSequenceLength,I=w,x=12,_={x:Math.ceil(n.totalSequenceLength/x),y:Math.ceil(n.sequenceLength/x),z:n.batchSize*n.numHeads},B=[t,r],E=T=>`\n  const M: u32 = ${y}u;\n  const N: u32 = ${S}u;\n  const K: u32 = ${I}u;\n  const alpha: ${a} = ${d};\n  const beta: ${a} = 1.0;\n  const TILE_SIZE = ${x}u;\n\n  var<workgroup> tileQ: array<${h.type.storage}, ${x*x}>;\n  var<workgroup> tileK: array<${h.type.storage}, ${x*x}>;\n\n  ${T.declareVariables(h,v,g)}\n\n  @compute @workgroup_size(${x}, ${x}, 1)\n  fn main(@builtin(workgroup_id) workgroup_id : vec3<u32>,\n   @builtin(local_invocation_id) local_id : vec3<u32>, @builtin(local_invocation_index) local_index : u32) {\n   let global_idx = (workgroup_id.z * ${_.x*_.y}u +\n          workgroup_id.y * ${_.x}u + workgroup_id.x) * ${x*x}u + local_index;\n\n    // x holds the N and y holds the M\n    let headIdx = workgroup_id.z;\n    let m = workgroup_id.y * TILE_SIZE;\n    let n = workgroup_id.x * TILE_SIZE;\n    let lm = m + local_id.y;\n    let ln = n + local_id.x;\n\n    let qOffset = ${n.sequenceLength*w} * headIdx + m * K;\n    let kOffset = ${n.kvSequenceLength*w} * headIdx + n * K;\n\n    var value = ${Le(a,p)};\n    for (var w: u32 = 0u; w < K; w += TILE_SIZE) {\n      if (m + local_id.y < M && w + local_id.x < K) {\n        tileQ[TILE_SIZE * local_id.y + local_id.x] = q[qOffset + local_id.y * K + w + local_id.x];\n      }\n      if (n + local_id.y < N && w + local_id.x < K) {\n        tileK[TILE_SIZE * local_id.y + local_id.x] = key[kOffset + local_id.y * K + w + local_id.x];\n      }\n      workgroupBarrier();\n\n      for (var k: u32 = 0u; k<TILE_SIZE && w+k < K; k++) {\n        value += tileQ[TILE_SIZE * local_id.y + k] * tileK[TILE_SIZE * local_id.x + k];\n      }\n\n      workgroupBarrier();\n    }\n\n    let headOffset = headIdx * M * N;\n    if (lm < M && ln < N) {\n      let outputIdx = headOffset + lm * N + ln;\n      output[outputIdx] = ${et("value",p)} * alpha;\n    }\n  }`,z=e.compute({name:"AttentionProbs",shaderCache:{hint:JSON.stringify(n)},getRunData:()=>({outputs:[{dims:u,dataType:t.dataType,gpuDataType:0}],dispatchGroup:_}),getShaderSource:E},{inputs:B,outputs:[-1]})[0];return Ol(e,z,n.batchSize*n.numHeads*n.sequenceLength,n.totalSequenceLength),z},Pl=(e,t,r,o)=>{let n=[o.batchSize,o.sequenceLength,o.vHiddenSize],s=V("probs",t.dataType,t.dims),u=V("v",r.dataType,r.dims),d=K("output",t.dataType,n),a=Te(t.dataType),p=12,h={x:Math.ceil(o.vHeadSize/p),y:Math.ceil(o.sequenceLength/p),z:o.batchSize*o.numHeads},v=g=>`\n  const M: u32 = ${o.sequenceLength}u;\n  const N: u32 = ${o.vHeadSize}u;\n  const K: u32 = ${o.totalSequenceLength}u;\n  const numHeads: u32 = ${o.numHeads}u;\n  const TILE_SIZE = ${p}u;\n\n  var<workgroup> tileQ: array<${s.type.storage}, ${p*p}>;\n  var<workgroup> tileK: array<${s.type.storage}, ${p*p}>;\n\n  ${g.declareVariables(s,u,d)}\n\n  @compute @workgroup_size(${p}, ${p}, 1)\n  fn main(@builtin(workgroup_id) workgroup_id : vec3<u32>,\n   @builtin(local_invocation_id) local_id : vec3<u32>, @builtin(local_invocation_index) local_index : u32) {\n   let global_idx = (workgroup_id.z * ${h.x*h.y}u +\n          workgroup_id.y * ${h.x}u + workgroup_id.x) * ${p*p}u + local_index;\n\n   let headIdx = workgroup_id.z;\n   let m = workgroup_id.y * TILE_SIZE + local_id.y;\n   let n = workgroup_id.x * TILE_SIZE + local_id.x;\n\n   let offsetA = headIdx * (M * K) + m * K;\n   let offsetB = headIdx * (N * K) + n;\n\n   var value = ${a}(0);\n   for (var w: u32 = 0u; w < K; w += TILE_SIZE) {\n     if (m < M && w + local_id.x < K) {\n       tileQ[TILE_SIZE * local_id.y + local_id.x] = probs[offsetA + w + local_id.x];\n     }\n     if (n < N && w + local_id.y < K) {\n       tileK[TILE_SIZE * local_id.y + local_id.x] = v[offsetB + (w + local_id.y) * N];\n     }\n     workgroupBarrier();\n     for (var k: u32 = 0u; k<TILE_SIZE && w+k < K; k++) {\n       value += tileQ[TILE_SIZE * local_id.y + k] * tileK[TILE_SIZE * k + local_id.x];\n     }\n     workgroupBarrier();\n   }\n\n   // we need to transpose output from BNSH_v to BSND_v\n   let batchIdx = workgroup_id.z / ${o.numHeads};\n   let currentBatchHeadNumber = workgroup_id.z % ${o.numHeads};\n   let headOffset = (batchIdx * M * ${o.numHeads} + currentBatchHeadNumber) * ${o.vHeadSize};\n   if (m < M && n < N) {\n     let outputIdx = batchIdx * ${o.sequenceLength*o.vHiddenSize} + m * ${o.vHiddenSize}\n       + currentBatchHeadNumber * ${o.vHeadSize} + n;\n     output[outputIdx] = value;\n   }\n  }`;return e.compute({name:"AttentionScore",shaderCache:{hint:JSON.stringify(o)},getRunData:()=>({outputs:[{dims:n,dataType:t.dataType,gpuDataType:0}],dispatchGroup:h}),getShaderSource:v},{inputs:[t,r],outputs:[0]})[0]},Ur=(e,t,r,o,n,s,u,d,a,p,h)=>{let v=kl(e,t,r,a,p,h);Pl(e,v,o,p)},Rl=(e,t)=>{let r=[t.batchSize,t.numHeads,t.sequenceLength,t.headSize],o=Te(e.inputs[0].dataType),n=t.sequenceLength,s=t.inputHiddenSize,u=t.headSize,d=12,a={x:Math.ceil(t.headSize/d),y:Math.ceil(t.sequenceLength/d),z:t.batchSize*t.numHeads},p=()=>`\n  const M: u32 = ${n}u;\n  const K: u32 = ${s}u;\n  const N: u32 = ${u}u;\n  const numHeads: u32 = ${t.numHeads};\n  const ldb = ${t.hiddenSize+t.hiddenSize+t.vHiddenSize}u;\n  const TILE_SIZE = ${d}u;\n\n  var<workgroup> tileInput: array<${o}, ${d*d}>;\n  var<workgroup> tileWeightQ: array<${o}, ${d*d}>;\n  var<workgroup> tileWeightK: array<${o}, ${d*d}>;\n  var<workgroup> tileWeightV: array<${o}, ${d*d}>;\n\n  @group(0) @binding(0) var<storage, read> input: array<${o}>;\n  @group(0) @binding(1) var<storage, read> weight: array<${o}>;\n  @group(0) @binding(2) var<storage, read> bias: array<${o}>;\n  @group(0) @binding(3) var<storage, read_write> outputQ: array<${o}>;\n  @group(0) @binding(4) var<storage, read_write> outputK: array<${o}>;\n  @group(0) @binding(5) var<storage, read_write> outputV: array<${o}>;\n\n  @compute @workgroup_size(${d}, ${d}, 1)\n  fn main(@builtin(workgroup_id) workgroup_id : vec3<u32>,\n   @builtin(local_invocation_id) local_id : vec3<u32>, @builtin(local_invocation_index) local_index : u32) {\n   let global_idx = (workgroup_id.z * ${a.x*a.y}u +\n          workgroup_id.y * ${a.x}u + workgroup_id.x) * ${d*d}u + local_index;\n\n    let batchIndex = workgroup_id.z / ${t.numHeads};\n    let headNumber = workgroup_id.z % ${t.numHeads};\n    let m = workgroup_id.y * TILE_SIZE + local_id.y;\n    let n = workgroup_id.x * TILE_SIZE + local_id.x;\n\n    let inputOffset = batchIndex * (M * K) + m * K;\n    let biasOffsetQ = headNumber * ${t.headSize};\n    let biasOffsetK = ${t.hiddenSize} + biasOffsetQ;\n    let biasOffsetV = ${t.hiddenSize} + biasOffsetK;\n\n    var valueQ = ${o}(0);\n    var valueK = ${o}(0);\n    var valueV = ${o}(0);\n    for (var w: u32 = 0u; w < K; w += TILE_SIZE) {\n      if (m < M && w + local_id.x < K) {\n        tileInput[TILE_SIZE * local_id.y + local_id.x] = input[inputOffset + w + local_id.x];\n      }\n      if (n < N && w + local_id.y < K) {\n        let offset = n + (w + local_id.y) * ldb;\n        tileWeightQ[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetQ + offset];\n        tileWeightK[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetK + offset];\n        tileWeightV[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetV + offset];\n      }\n      workgroupBarrier();\n      for (var k: u32 = 0u; k<TILE_SIZE && w+k < K; k++) {\n        let inputTileOffset = TILE_SIZE * local_id.y + k;\n        let weightTileOffset = TILE_SIZE * k + local_id.x;\n        valueQ += tileInput[inputTileOffset] * tileWeightQ[weightTileOffset];\n        valueK += tileInput[inputTileOffset] * tileWeightK[weightTileOffset];\n        valueV += tileInput[inputTileOffset] * tileWeightV[weightTileOffset];\n      }\n\n      workgroupBarrier();\n    }\n\n    let headOffset = (m * N + n) % ${t.headSize};\n    valueQ += bias[headOffset + biasOffsetQ];\n    valueK += bias[headOffset + biasOffsetK];\n    valueV += bias[headOffset + biasOffsetV];\n\n    let offset = workgroup_id.z * M * N;\n    if (m < M && n < N) {\n      let outputIdx = offset + m * N + n;\n      outputQ[outputIdx] = valueQ;\n      outputK[outputIdx] = valueK;\n      outputV[outputIdx] = valueV;\n    }\n  }`,h=[e.inputs[0],e.inputs[1],e.inputs[2]];return e.compute({name:"AttentionPrepare",shaderCache:{hint:JSON.stringify(t)},getRunData:()=>({outputs:[{dims:r,dataType:e.inputs[0].dataType,gpuDataType:0},{dims:r,dataType:e.inputs[0].dataType,gpuDataType:0},{dims:r,dataType:e.inputs[0].dataType,gpuDataType:0}],dispatchGroup:a}),getShaderSource:p},{inputs:h,outputs:[-1,-1,-1]})},ya=(e,t)=>{let r=El(e.inputs,t),[o,n,s]=Rl(e,r);return Ur(e,o,n,s,e.inputs[4],void 0,void 0,void 0,e.inputs[5],r,t)}});var Nr=j(()=>{});var ba=j(()=>{Nr()});var wa,va=j(()=>{wa="1.17.0"});var $a,kn,Sa=j(()=>{va();$a="warning",kn={wasm:{},webgl:{},webgpu:{},versions:{common:wa},set logLevel(e){if(e!==void 0){if(typeof e!="string"||["verbose","info","warning","error","fatal"].indexOf(e)===-1)throw new Error(`Unsupported logging level: ${e}`);$a=e}},get logLevel(){return $a}};Object.defineProperty(kn,"logLevel",{enumerable:!0})});var Ut,xa=j(()=>{Sa();Ut=kn});var Ca=j(()=>{});var _a=j(()=>{Hr()});var Aa=j(()=>{});var Ta=j(()=>{Hr()});var Hr=j(()=>{Ca();_a();Aa();Ta()});var Gr=j(()=>{Hr()});var Ea=j(()=>{Nr();Gr()});var Oa=j(()=>{Ea()});var ka=j(()=>{});var Pa=j(()=>{Nr();Gr()});var Ra=j(()=>{Pa()});var Lr=j(()=>{ba();xa();Oa();Gr();ka();Ra()});var Dl,zl,Vl,Ba,Ma=j(()=>{"use strict";Lr();ye();ke();be();Dl=(e,t)=>{if(!e||e.length!==5)throw new Error("BatchNormalization requires 5 inputs");let r=(o,n,s)=>{let u=n.length;if(u!==o.length)throw new Error(`${s}: num dimensions != ${u}`);n.forEach((d,a)=>{if(d!==o[a])throw new Error(`${s}: dim[${a}] do not match`)})};if(e[0].dims.length>1){let o=t.format==="NHWC"?t.spatial?e[0].dims.slice(-1):e[0].dims.slice(-1).concat(e[0].dims.slice(1,e[0].dims.length-1)):e[0].dims.slice(1,t.spatial?2:void 0);r(e[1].dims,o,"Invalid input scale"),r(e[2].dims,o,"Invalid input B"),r(e[3].dims,o,"Invalid input mean"),r(e[4].dims,o,"Invalid input var")}else r(e[1].dims,[1],"Invalid input scale"),r(e[2].dims,[1],"Invalid input B"),r(e[3].dims,[1],"Invalid input mean"),r(e[4].dims,[1],"Invalid input var")},zl=(e,t)=>{let{epsilon:r,spatial:o,format:n}=t,s=e[0].dims,u=o?Ye(s[s.length-1]):1,d=n==="NHWC"&&s.length>1?u:1,a=D.size(s)/u,p=Pe(s.length)&&o,h=p?s.length:s,v=V("x",e[0].dataType,e[0].dims,u),g=V("scale",e[1].dataType,e[1].dims,d),w=V("bias",e[2].dataType,e[2].dims,d),y=V("inputMean",e[3].dataType,e[3].dims,d),S=V("inputVar",e[4].dataType,e[4].dims,d),I=K("y",e[0].dataType,h,u),x=()=>{let B="";if(o)B=`let cOffset = ${s.length===1?"0u":n==="NHWC"?`outputIndices[${s.length-1}] / ${u}`:"outputIndices[1]"};`;else if(n==="NCHW")B=`\n            ${I.indicesSet("outputIndices","0","0")}\n            let cOffset = ${I.indicesToOffset("outputIndices")};`;else{B=`var cIndices = ${g.type.indices}(0);\n                       cIndices[0] = outputIndices[${s.length-1}];`;for(let E=1;E<g.rank;E++)B+=`cIndices[${E}] = outputIndices[${E}];`;B+=`let cOffset = ${g.indicesToOffset("cIndices")};`}return B},_=B=>`\n  const epsilon = ${r};\n  ${B.registerUniform("outputSize","u32").declareVariables(v,g,w,y,S,I)}\n  ${B.mainStart()}\n  ${B.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n    var outputIndices = ${I.offsetToIndices(`global_idx * ${u}`)};\n    ${x()}\n    let scale = ${g.getByOffset("cOffset")};\n    let bias = ${w.getByOffset("cOffset")};\n    let inputMean = ${y.getByOffset("cOffset")};\n    let inputVar = ${S.getByOffset("cOffset")};\n    let x = ${v.getByOffset("global_idx")};\n    let value = (x - inputMean) / sqrt(inputVar + epsilon) * scale + bias;\n    ${I.setByOffset("global_idx","value")}\n  }`;return{name:"BatchNormalization",shaderCache:{hint:`${t.epsilon}_${t.format}_${o}_${u}`,inputDependencies:p?["rank","type","type","type","type"]:void 0},getShaderSource:_,getRunData:()=>({outputs:[{dims:e[0].dims,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(a/64)},programUniforms:p?[{type:"uint32",data:a},...Y(s)]:[{type:"uint32",data:a}]})}},Vl=e=>Q(e),Ba=(e,t)=>{let{inputs:r,outputCount:o}=e,n=Vl({...t,outputCount:o});if(Ut.webgpu.validateInputContent&&Dl(r,n),t.trainingMode)throw new Error("BatchNormalization trainingMode is not supported yet.");e.compute(zl(r,n))}});var Wl,Ul,Da,za=j(()=>{"use strict";ye();be();Wl=e=>{if(e[0].dims.length!==3)throw new Error("input should have 3 dimensions");if(![320,640,1280].includes(e[0].dims[2]))throw new Error("number of channels should be 320, 640 or 1280");if(e[1].dims.length!==1)throw new Error("bias is expected to have 1 dimensions");if(e[0].dims[2]!==e[1].dims[0])throw new Error("last dimension of input and bias are not the same")},Ul=e=>{let t=e[0].dims,r=e[0].dims[2],o=D.size(t)/4,n=e[0].dataType,s=V("input",n,t,4),u=V("bias",n,[r],4),d=V("residual",n,t,4),a=K("output",n,t,4);return{name:"BiasAdd",getRunData:()=>({outputs:[{dims:t,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(o/64)}}),getShaderSource:h=>`\n  const channels = ${r}u / 4;\n  ${h.declareVariables(s,u,d,a)}\n\n  ${h.mainStart()}\n    ${h.guardAgainstOutOfBoundsWorkgroupSizes(o)}\n    let value = ${s.getByOffset("global_idx")}\n      + ${u.getByOffset("global_idx % channels")} + ${d.getByOffset("global_idx")};\n    ${a.setByOffset("global_idx","value")}\n  }`}},Da=e=>{Wl(e.inputs),e.compute(Ul(e.inputs))}});var Nl,Ee,Va,Wa,Ua,Na,Ha,Ga,La,Fa,qa,Hl,ja,Ka,Ya,Za,Fr,Xa,qr,Qa,Ja,ei,ti,ri,ni,oi,ai,ii,si,ui,li,di,ci,pi,mi,fi,Pn=j(()=>{"use strict";Ve();ye();ke();be();Nl=(e,t,r,o,n,s)=>{let u=Math.ceil(t/4),d="";typeof n=="string"?d=`${n}(a)`:d=n("a");let a=V("inputData",r,[u],4),p=K("outputData",o,[u],4);return`\n      ${e.registerUniform("vec_size","u32").declareVariables(a,p)}\n\n  ${s??""}\n\n  ${e.mainStart()}\n    ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}\n\n    let a = ${a.getByOffset("global_idx")};\n    ${p.setByOffset("global_idx",d)}\n  }`},Ee=(e,t,r,o,n,s=e.dataType)=>({name:t,shaderCache:{hint:n,inputDependencies:["type"]},getShaderSource:u=>Nl(u,D.size(e.dims),e.dataType,s,r,o),getRunData:u=>({outputs:[{dims:e.dims,dataType:s}],dispatchGroup:{x:Math.ceil(D.size(u[0].dims)/64/4)},programUniforms:[{type:"uint32",data:Math.ceil(D.size(e.dims)/4)}]})}),Va=e=>{e.compute(Ee(e.inputs[0],"Abs","abs"))},Wa=e=>{e.compute(Ee(e.inputs[0],"Acos","acos"))},Ua=e=>{e.compute(Ee(e.inputs[0],"Acosh","acosh"))},Na=e=>{e.compute(Ee(e.inputs[0],"Asin","asin"))},Ha=e=>{e.compute(Ee(e.inputs[0],"Asinh","asinh"))},Ga=e=>{e.compute(Ee(e.inputs[0],"Atan","atan"))},La=e=>{e.compute(Ee(e.inputs[0],"Atanh","atanh"))},Fa=e=>Q(e),qa=(e,t)=>{let r;switch(t.to){case 10:r="vec4<f16>";break;case 1:r="vec4<f32>";break;case 12:r="vec4<u32>";break;case 6:r="vec4<i32>";break;case 9:r="vec4<bool>";break;default:throw new RangeError(`not supported type (specified in attribute \'to\' from \'Cast\' operator): ${t.to}`)}e.compute(Ee(e.inputs[0],"Cast",r,void 0,t.cacheKey,t.to))},Hl=e=>{let t=e.length>=2?e[1].getFloat32Array()[0]:Dr,r=e.length>=3?e[2].getFloat32Array()[0]:zr;return Q({min:t,max:r})},ja=(e,t)=>{let r=e.inputs.length===1?t:Hl(e.inputs),o=Te(e.inputs[0].dataType);e.compute(Ee(e.inputs[0],"Clip",n=>`clamp(${n}, clip_min_, clip_max_)`,`\n    const clip_min_: vec4<${o}> = vec4(${o}(${r.min}));\n    const clip_max_: vec4<${o}> = vec4(${o}(${r.max}));\n`,r.cacheKey),{inputs:[0]})},Ka=e=>{e.compute(Ee(e.inputs[0],"Ceil","ceil"))},Ya=e=>{e.compute(Ee(e.inputs[0],"Cos","cos"))},Za=e=>{e.compute(Ee(e.inputs[0],"Cosh","cosh"))},Fr=e=>Q(e),Xa=(e,t)=>{e.compute(Ee(e.inputs[0],"Elu",r=>`elu_vf32(${r})`,`\n  const elu_alpha_: f32 = f32(${t.alpha});\n\n  fn elu_f32(a: f32) -> f32 {\n  return select((exp(a) - 1.0) * elu_alpha_, a, a >= 0.0);\n  }\n\n  fn elu_vf32(v: vec4<f32>) -> vec4<f32> {\n  return vec4(elu_f32(v.x), elu_f32(v.y), elu_f32(v.z), elu_f32(v.w));\n  }`,t.cacheKey))},qr=(e,t="f32")=>`\nconst r0: ${t} = 0.3275911;\nconst r1: ${t} = 0.254829592;\nconst r2: ${t} = -0.284496736;\nconst r3: ${t} = 1.421413741;\nconst r4: ${t} = -1.453152027;\nconst r5: ${t} = 1.061405429;\n\nfn erf_vf32(v: ${e}) -> ${e} {\n  let absv = abs(v);\n  let x = 1.0 / (1.0 + r0 * absv);\n  return sign(v) * (1.0 - ((((r5 * x + r4) * x + r3) * x + r2) * x + r1) * x * exp(-absv * absv));\n}`,Qa=e=>{let t=Te(e.inputs[0].dataType);e.compute(Ee(e.inputs[0],"Erf",r=>`erf_vf32(${r})`,qr(`vec4<${t}>`,t)))},Ja=e=>{e.compute(Ee(e.inputs[0],"Exp","exp"))},ei=e=>{e.compute(Ee(e.inputs[0],"Floor","floor"))},ti=e=>{let t=Te(e.inputs[0].dataType);e.compute(Ee(e.inputs[0],"Gelu",r=>`0.5 * ${r} * (1.0 + erf_vf32(${r} * 0.7071067811865475))`,qr(`vec4<${t}>`,t)))},ri=(e,t)=>{e.compute(Ee(e.inputs[0],"LeakyRelu",r=>`select(leaky_relu_alpha_ * ${r}, ${r}, ${r} >= vec4<f32>(0.0))`,`const leaky_relu_alpha_: f32 = f32(${t.alpha});`,t.cacheKey))},ni=e=>{e.compute(Ee(e.inputs[0],"Not",t=>`!${t}`))},oi=e=>{e.compute(Ee(e.inputs[0],"Neg",t=>`-${t}`))},ai=e=>{e.compute(Ee(e.inputs[0],"Reciprocal",t=>`1.0/${t}`))},ii=e=>{e.compute(Ee(e.inputs[0],"Relu",t=>`select(vec4<f32>(0.0), ${t}, ${t} > vec4<f32>(0.0))`))},si=e=>{e.compute(Ee(e.inputs[0],"Sigmoid",t=>`(1.0 / (1.0 + exp(-${t})))`))},ui=e=>{e.compute(Ee(e.inputs[0],"Sin","sin"))},li=e=>{e.compute(Ee(e.inputs[0],"Sinh","sinh"))},di=e=>{e.compute(Ee(e.inputs[0],"Sqrt","sqrt"))},ci=e=>{e.compute(Ee(e.inputs[0],"Tan","tan"))},pi=e=>{e.compute(Ee(e.inputs[0],"Tanh","tanh"))},mi=(e,t)=>(e.compute(Ee(e.inputs[0],"ThresholdedRelu",r=>`select(vec4<f32>(0.0), ${r}, ${r} > thresholded_relu_alpha_)`,`const thresholded_relu_alpha_: vec4<f32> = vec4<f32>(${t.alpha});`,t.cacheKey)),0),fi=e=>{e.compute(Ee(e.inputs[0],"Log","log"))}});var Ll,Fl,hi,gi=j(()=>{"use strict";ye();be();Pn();Ll=e=>{if(e[0].dims.length!==3)throw new Error("input should have 3 dimensions");if(![2560,5120,10240].includes(e[0].dims[2]))throw new Error("hidden state should be 2560, 5120 or 10240");if(e[1].dims.length!==1)throw new Error("bias is expected to have 1 dimensions");if(e[0].dims[2]!==e[1].dims[0])throw new Error("last dimension of input and bias are not the same")},Fl=e=>{let t=e[0].dims.slice();t[2]=t[2]/2;let r=V("input",e[0].dataType,e[0].dims,4),o=V("bias",e[0].dataType,[e[0].dims[2]],4),n=K("output",e[0].dataType,t,4),s=D.size(t)/4,u=Te(e[0].dataType);return{name:"BiasSplitGelu",getRunData:()=>({outputs:[{dims:t,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(s/64)}}),getShaderSource:a=>`\n  const M_SQRT2 = sqrt(2.0);\n  const halfChannels = ${e[0].dims[2]/4/2}u;\n\n  ${a.declareVariables(r,o,n)}\n\n  ${qr(`vec4<${u}>`,u)}\n\n  ${a.mainStart()}\n    ${a.guardAgainstOutOfBoundsWorkgroupSizes(s)}\n    let biasIdx = global_idx % halfChannels;\n    let batchIndex = global_idx / halfChannels;\n    let inputOffset = biasIdx + batchIndex * halfChannels * 2;\n    let valueLeft = input[inputOffset] + bias[biasIdx];\n    let valueRight = input[inputOffset + halfChannels] + bias[biasIdx + halfChannels];\n    let geluRight = valueRight * 0.5 * (erf_vf32(valueRight / M_SQRT2) + 1);\n\n    ${n.setByOffset("global_idx","valueLeft * geluRight")}\n  }`}},hi=e=>{Ll(e.inputs),e.compute(Fl(e.inputs))}});var ql,jl,ct,yi,bi,wi,vi,$i,Si,xi,Ci,_i,Ii,Ai=j(()=>{"use strict";Ve();ye();be();ql=(e,t,r,o,n,s,u,d,a,p,h,v,g)=>{let w,y;typeof d=="string"?w=y=(T,H)=>`${d}((${T}),(${H}))`:typeof d=="function"?w=y=d:(w=d.scalar,y=d.vector);let S=v?t.length:t,I=v?r.length:r,x=v?o.length:o,_=K("outputData",h,x,4),B=V("aData",a,S,4),E=V("bData",p,I,4),z;if(n)if(s){let T=D.size(t)===1,H=D.size(r)===1,U=t.length>0&&t[t.length-1]%4===0,L=r.length>0&&r[r.length-1]%4===0;T||H?z=_.setByOffset("global_idx",y(T?`${B.type.value}(${B.getByOffset("0")}.x)`:B.getByOffset("global_idx"),H?`${E.type.value}(${E.getByOffset("0")}.x)`:E.getByOffset("global_idx"))):z=`\n            let outputIndices = ${_.offsetToIndices("global_idx * 4u")};\n            let offsetA = ${B.broadcastedIndicesToOffset("outputIndices",_)};\n            let offsetB = ${E.broadcastedIndicesToOffset("outputIndices",_)};\n            ${_.setByOffset("global_idx",y(u||U?B.getByOffset("offsetA / 4u"):`${B.type.value}(${B.getByOffset("offsetA / 4u")}[offsetA % 4u])`,u||L?E.getByOffset("offsetB / 4u"):`${E.type.value}(${E.getByOffset("offsetB / 4u")}[offsetB % 4u])`))}\n          `}else z=_.setByOffset("global_idx",y(B.getByOffset("global_idx"),E.getByOffset("global_idx")));else{if(!s)throw new Error("no necessary to use scalar implementation for element-wise binary op implementation.");let T=(H,U,L="")=>{let re=`aData[indexA${U}][componentA${U}]`,R=`bData[indexB${U}][componentB${U}]`;return`\n            let outputIndices${U} = ${_.offsetToIndices(`global_idx * 4u + ${U}u`)};\n            let offsetA${U} = ${B.broadcastedIndicesToOffset(`outputIndices${U}`,_)};\n            let offsetB${U} = ${E.broadcastedIndicesToOffset(`outputIndices${U}`,_)};\n            let indexA${U} = offsetA${U} / 4u;\n            let indexB${U} = offsetB${U} / 4u;\n            let componentA${U} = offsetA${U} % 4u;\n            let componentB${U} = offsetB${U} % 4u;\n            ${H}[${U}] = ${L}(${w(re,R)});\n          `};h===9?z=`\n            var data = vec4<u32>(0);\n            ${T("data",0,"u32")}\n            ${T("data",1,"u32")}\n            ${T("data",2,"u32")}\n            ${T("data",3,"u32")}\n            outputData[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));`:z=`\n            ${T("outputData[global_idx]",0)}\n            ${T("outputData[global_idx]",1)}\n            ${T("outputData[global_idx]",2)}\n            ${T("outputData[global_idx]",3)}\n          `}return`\n        ${e.registerUniform("vec_size","u32").declareVariables(B,E,_)}\n\n        ${g??""}\n\n        ${e.mainStart()}\n        ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}\n        ${z}\n      }`},jl=(e,t,r,o,n,s,u=r.dataType)=>{let d=!D.areEqual(r.dims,o.dims),a=r.dims,p=D.size(r.dims),h=!1,v=!1,g=[d];if(d){let y=it.calcShape(r.dims,o.dims,!1);if(!y)throw new Error("Can\'t perform binary op on the given tensors");a=y,p=D.size(a);let S=D.size(r.dims)===1,I=D.size(o.dims)===1,x=r.dims.length>0&&r.dims[r.dims.length-1]%4===0,_=o.dims.length>0&&o.dims[o.dims.length-1]%4===0;g.push(S),g.push(I),g.push(x),g.push(_);let B=1;for(let E=1;E<a.length;E++){let z=r.dims[r.dims.length-E]??1,T=o.dims[o.dims.length-E]??1;if(z===T)B*=z;else break}B%4===0?(v=!0,h=!0):(S||I||x||_)&&(h=!0)}else h=!0;g.push(h);let w=Pe(r.dims.length)&&Pe(o.dims.length)&&Pe(a.length);return{name:e,shaderCache:{hint:t+g.map(y=>y.toString()).join("_"),inputDependencies:w?["rank","rank"]:["dims","dims"]},getShaderSource:y=>ql(y,r.dims,o.dims,a,h,d,v,n,r.dataType,o.dataType,u,w,s),getRunData:()=>({outputs:[{dims:a,dataType:u}],dispatchGroup:{x:Math.ceil(p/64/4)},programUniforms:w?[{type:"uint32",data:Math.ceil(D.size(a)/4)},...Y(r.dims),...Y(o.dims),...Y(a)]:[{type:"uint32",data:Math.ceil(D.size(a)/4)}]})}},ct=(e,t,r,o,n,s)=>{e.compute(jl(t,n??"",e.inputs[0],e.inputs[1],r,o,s))},yi=e=>{ct(e,"Add",(t,r)=>`${t}+${r}`)},bi=e=>{ct(e,"Div",(t,r)=>`${t}/${r}`)},wi=e=>{ct(e,"Equal",{scalar:(t,r)=>`u32(${t}==${r})`,vector:(t,r)=>`vec4<u32>(${t}==${r})`},void 0,void 0,9)},vi=e=>{ct(e,"Mul",(t,r)=>`${t}*${r}`)},$i=e=>{let t=V("input",e.inputs[0].dataType,e.inputs[0].dims).type.value;ct(e,"Pow",{scalar:(o,n)=>`pow_custom(${o},${n})`,vector:(o,n)=>`pow_vector_custom(${o},${n})`},`\n    fn pow_custom(a : ${t}, b : ${t}) -> ${t} {\n      if (b == ${t}(0.0)) {\n        return ${t}(1.0);\n      } else if (a < ${t}(0.0) && f32(b) != floor(f32(b))) {\n        return ${t}(pow(f32(a), f32(b))); // NaN\n      }\n      return select(sign(a), ${t}(1.0), round(f32(abs(b) % ${t}(2.0))) != 1.0) * ${t}(${t==="i32"?"round":""}(pow(f32(abs(a)), f32(b))));\n    }\n    fn pow_vector_custom(a : vec4<${t}>, b : vec4<${t}>) -> vec4<${t}> {\n      // TODO: implement vectorized pow\n      return vec4<${t}>(pow_custom(a.x, b.x), pow_custom(a.y, b.y), pow_custom(a.z, b.z), pow_custom(a.w, b.w));\n    }\n      `)},Si=e=>{ct(e,"Sub",(t,r)=>`${t}-${r}`)},xi=e=>{ct(e,"Greater",{scalar:(t,r)=>`u32(${t}>${r})`,vector:(t,r)=>`vec4<u32>(${t}>${r})`},void 0,void 0,9)},Ci=e=>{ct(e,"Less",{scalar:(t,r)=>`u32(${t}<${r})`,vector:(t,r)=>`vec4<u32>(${t}<${r})`},void 0,void 0,9)},_i=e=>{ct(e,"GreaterOrEqual",{scalar:(t,r)=>`u32(${t}>=${r})`,vector:(t,r)=>`vec4<u32>(${t}>=${r})`},void 0,void 0,9)},Ii=e=>{ct(e,"LessOrEqual",{scalar:(t,r)=>`u32(${t}<=${r})`,vector:(t,r)=>`vec4<u32>(${t}<=${r})`},void 0,void 0,9)}});var Yl,Zl,Xl,Ql,Ti,Ei,Oi=j(()=>{"use strict";ye();ke();be();Yl=e=>{if(!e||e.length<1)throw new Error("too few inputs");let t=e[0].dataType,r=e[0].dims.length;for(let o of e){if(o.dataType!==t)throw new Error("input tensors should be one type");if(o.dims.length!==r)throw new Error("input tensors should have the same shape")}},Zl=(e,t)=>`\n  fn calculateInputIndex(index: u32) -> u32 {\n    let sizeInConcatAxis = array<u32, ${e}u>(${t});\n    for (var i: u32 = 0u; i < ${e}; i += 1u ) {\n      if (index < sizeInConcatAxis[i]) {\n        return i;\n      }\n    }\n    return ${e}u;\n  }`,Xl=(e,t)=>{let r=e.length,o=[];for(let n=0;n<r;++n){let s=t.setByOffset("global_idx",e[n].getByIndices("indices"));r===1?o.push(s):n===0?o.push(`if (inputIndex == ${n}u) { ${s} }`):n===r-1?o.push(`else { ${s} }`):o.push(`else if (inputIndex == ${n}) { ${s} }`)}return o.join(`\n`)},Ql=(e,t)=>{let r=e[0].dims.slice();if(t>=r.length||t<-1*r.length)throw new Error("axis specified for concat doesn\'t match input dimensionality");let o=t<0?r.length+t:t,n=r.slice(0);for(let E=1;E<e.length;E++){let z=e[E].dims.slice();for(let T=0;T<r.length;T++)if(T===o)n[o]+=z[T];else if(r[T]!==z[T])throw new Error("non concat dimensions must match")}let s=D.size(n),u=new Array(e.length),d=new Array(e.length),a=e[0].dataType,p=0,h=[],v=[],g=[],w=[{type:"uint32",data:s}];for(let E=0;E<e.length;++E)p+=e[E].dims[o],u[E]=p,g.push(Pe(e[E].dims.length)),v.push(g[E]?e[E].dims.length:e[E].dims),d[E]=V(`input${E}`,a,v[E]),h.push(g[E]?"rank":"dims"),w.push({type:"uint32",data:u[E]});for(let E=0;E<e.length;++E)g[E]&&w.push(...Y(e[E].dims));let y=Pe(n.length);y&&w.push(...Y(n));let S=y?n.length:n,I=K("output",a,S),x=I.indicesGet("indices",o),_=Array.from(Array(u.length).keys()).map(E=>`uniforms.sizeInConcatAxis${E}`).join(","),B=E=>`\n\n  ${(()=>{E.registerUniform("outputSize","u32");for(let z=0;z<e.length;z++)E.registerUniform(`sizeInConcatAxis${z}`,"u32");return E.declareVariables(...d,I)})()}\n\n  ${Zl(u.length,_)}\n\n  ${E.mainStart()}\n    ${E.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n\n    var indices = ${I.offsetToIndices("global_idx")};\n\n    let inputIndex = calculateInputIndex(${x});\n    if (inputIndex != 0u) {\n      let sizeInConcatAxis = array<u32, ${u.length}u>(${_});\n      ${x} -= sizeInConcatAxis[inputIndex - 1u];\n    }\n\n    ${Xl(d,I)}\n  }`;return{name:"Concat",shaderCache:{hint:`${t}`,inputDependencies:h},getRunData:()=>({outputs:[{dims:n,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(s/64)},programUniforms:w}),getShaderSource:B}},Ti=(e,t)=>{Yl(e.inputs),e.compute(Ql(e.inputs,t.axis))},Ei=e=>Q({axis:e.axis})});var vt,jr,Ot=j(()=>{"use strict";ye();vt=(e,t)=>{switch(e.activation){case"Relu":return{activationFunction:"",applyActivation:`value = max(value, ${t}(0.0));`};case"Sigmoid":return{activationFunction:"",applyActivation:`value = (${t}(1.0) / (${t}(1.0) + exp(-value)));`};case"Clip":return{activationFunction:`const clip_min_=${t}(${e.clipMin});const clip_max_=${t}(${e.clipMax});`,applyActivation:"value = clamp(value, clip_min_, clip_max_);"};default:return{activationFunction:"",applyActivation:""}}},jr=e=>{let t=e?.activation||"";if(t==="Clip"){let[r,o]=e?.activation_params||[Dr,zr];return{activation:t,clipMax:o,clipMin:r,activationCacheKey:`${t}:${r},${o}`}}return{activation:t,activationCacheKey:t}}});var Ue,Kr,Yr=j(()=>{"use strict";Ue=(e,t)=>{switch(e){case 1:return t;case 2:return`vec2<${t}>`;case 3:return`vec3<${t}>`;case 4:return`vec4<${t}>`;default:throw new Error(`${e}-component is not supported.`)}},Kr=e=>`\n      ${e?"value = value + getBiasByOutputCoords(coords);":""}\n      `});var Zr,Rn=j(()=>{"use strict";Zr=e=>`\nfn getIndexFromCoords4D(coords : vec4<i32>, shape : vec4<i32>) -> i32 {\n  return dot(coords, vec4<i32>(\n      shape.y * shape.z * shape.w, shape.z * shape.w, shape.w, 1));\n}\nfn getOutputIndexFromCoords(coords : vec4<i32>) -> i32 {\n  return dot(coords, vec4<i32>(\n    i32(${e}.x), i32(${e}.y), i32(${e}.z), 1));\n}\n`});var Jl,ed,ur,ki,td,lr,rd,Xr,dr=j(()=>{"use strict";ye();be();Ot();Yr();Jl=(e,t)=>e?`\n        mm_Asub[inputRow][inputCol] = mm_readA(batch,\n          kStart + inputRow,\n          globalRowStart / innerElementSize + inputCol${t?", batchIndices":""});\n        `:`\n        mm_Asub[inputRow][inputCol] = mm_readA(batch,\n          globalRow + innerRow,\n          kStart / innerElementSize + inputCol${t?", batchIndices":""});\n        `,ed=(e,t)=>e?`\n        let ACached0 = mm_Asub[k * innerElementSize][localRow];\n        let ACached1 = mm_Asub[k * innerElementSize + 1][localRow];\n        let ACached2 = mm_Asub[k * innerElementSize + 2][localRow];\n        ${t===3?"":"let ACached3 = mm_Asub[k * innerElementSize + 3][localRow];"}\n        for (var i = 0; i < rowPerThread; i = i + 1) {\n          acc[i] = BCached0 * ACached0[i] + acc[i];\n          acc[i] = BCached1 * ACached1[i] + acc[i];\n          acc[i] = BCached2 * ACached2[i] + acc[i];\n          ${t===3?"":"acc[i] = BCached3 * ACached3[i] + acc[i];"}\n        }`:`\n        for (var i = 0; i < rowPerThread; i = i + 1) {\n          let ACached = mm_Asub[tileRow + i][k];\n          acc[i] = BCached0 * ACached.x + acc[i];\n          acc[i] = BCached1 * ACached.y + acc[i];\n          acc[i] = BCached2 * ACached.z + acc[i];\n          ${t===3?"":"acc[i] = BCached3 * ACached.w + acc[i];"}\n        }`,ur=(e,t,r="f32",o,n=!1,s=32,u=!1,d=32)=>{let a=t[1]*e[1],p=t[0]*e[0],h=n?a:s,v=n?s:a,g=h/t[0],w=s/t[1];if(!((n&&g===4&&e[1]===4||!n&&(g===3||g===4))&&h%t[0]===0&&s%t[1]===0&&e[0]===4))throw new Error(`If transposeA ${n} is true, innerElementSize ${g} and workPerThread[1] ${e[1]} must be 4.\n      Otherwise, innerElementSize ${g} must be 3 or 4.\n  tileAWidth ${h} must be divisible by workgroupSize[0]${t[0]}. tileInner ${s} must be divisible by workgroupSize[1] ${t[1]}. colPerThread ${e[0]} must be 4.`);return`\nvar<workgroup> mm_Asub: array<array<vec${g}<${r}>, ${h/g}>, ${v}>;\nvar<workgroup> mm_Bsub: array<array<vec4<${r}>, ${p/e[0]}>, ${s}>;\n\nconst rowPerThread = ${e[1]};\nconst colPerThread = ${e[0]};\nconst innerElementSize = ${g};\nconst tileInner = ${s};\n\n@compute @workgroup_size(${t[0]}, ${t[1]}, ${t[2]})\nfn main(@builtin(local_invocation_id) localId : vec3<u32>,\n        @builtin(global_invocation_id) globalId : vec3<u32>,\n        @builtin(workgroup_id) workgroupId : vec3<u32>) {\n  let localRow = i32(localId.y);\n  let tileRow = localRow * rowPerThread;\n  let tileCol = i32(localId.x);\n\n  let globalRow =i32(globalId.y) * rowPerThread;\n  let globalCol = i32(globalId.x);\n  let batch = ${u?"0":"i32(globalId.z)"};\n  ${o?`let batchIndices = ${o.offsetToIndices("u32(batch)")};`:""}\n  let globalRowStart = i32(workgroupId.y) * ${a};\n\n  let numTiles = ${u?`${Math.ceil(d/s)}`:"(uniforms.dimInner - 1) / tileInner + 1"};\n  var kStart = ${u?`i32(globalId.z) * ${d}`:"0"};\n\n  var acc: array<vec4<${r}>, rowPerThread>;\n\n  // Loop over shared dimension.\n  let tileRowB = localRow * ${w};\n  for (var t = 0; t < numTiles; t = t + 1) {\n      // Load one tile of A into local memory.\n      for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n          let inputRow = tileRow + innerRow;\n          let inputCol = tileCol;\n          ${Jl(n,o)}\n      }\n\n      // Load one tile of B into local memory.\n      for (var innerRow = 0; innerRow < ${w}; innerRow = innerRow + 1) {\n          let inputRow = tileRowB + innerRow;\n          let inputCol = tileCol;\n          mm_Bsub[inputRow][inputCol] = mm_readB(batch, kStart + inputRow, globalCol${o?", batchIndices":""});\n      }\n      kStart = kStart + tileInner;\n      workgroupBarrier();\n\n      // Compute acc values for a single thread.\n      for (var k = 0; k < tileInner / innerElementSize; k = k + 1) {\n          let BCached0 = mm_Bsub[k * innerElementSize][tileCol];\n          let BCached1 = mm_Bsub[k * innerElementSize + 1][tileCol];\n          let BCached2 = mm_Bsub[k * innerElementSize + 2][tileCol];\n          ${g===3?"":"let BCached3 = mm_Bsub[k * innerElementSize + 3][tileCol];"}\n\n          ${ed(n,g)}\n      }\n\n      workgroupBarrier();\n  }\n\n  for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      mm_write(batch, globalRow + innerRow, globalCol, acc[innerRow]);\n  }\n}`},ki=(e,t)=>e?`\n            mm_Asub[inputRow][inputCol] = mm_readA(batch,\n              kStart + inputRow,\n              globalRowStart + inputCol${t?", batchIndices":""});\n            `:`\n            mm_Asub[inputRow][inputCol] = mm_readA(batch,\n              globalRowStart + inputRow,\n              kStart + inputCol${t?", batchIndices":""});\n            `,td=e=>e?"let ACached = mm_Asub[k][tileRow + innerRow];":"let ACached = mm_Asub[tileRow + innerRow][k];",lr=(e,t,r="f32",o,n=!1,s=32,u=!1,d=32,a=!1)=>{let p=e[1]*t[1],h=e[0]*t[0],v=n?p:s,g=n?s:p;if(!(g%t[1]===0&&v%t[0]===0&&s%t[1]===0))throw new Error(`tileAHight ${g} must be divisible by workgroupSize[1]${t[1]}, tileAWidth ${v} must be divisible by workgroupSize[0]${t[0]}, tileInner ${s} must be divisible by workgroupSize[1]${t[1]}`);let w=g/t[1],y=v/t[0],S=s/t[1],I=a?`\n    let localRow = i32(localId.y);\n    let localCol = i32(localId.x);\n    let globalRowStart = i32(workgroupId.y) * ${p};\n    let globalColStart = i32(workgroupId.x) * ${h};\n\n    // Loop over shared dimension.\n    for (var t = 0; t < numTiles; t = t + 1) {\n      // Load one tile of A into local memory.\n      for (var inputRow = localRow; inputRow < ${g}; inputRow = inputRow + ${t[1]}) {\n        for (var inputCol = localCol; inputCol < ${v}; inputCol = inputCol + ${t[0]}) {\n          ${ki(n,o)}\n        }\n      }\n      // Load one tile of B into local memory.\n      for (var inputRow = localRow; inputRow < ${s}; inputRow = inputRow + ${t[1]}) {\n            for (var inputCol = localCol; inputCol < ${h}; inputCol = inputCol + ${t[0]}) {\n          mm_Bsub[inputRow][inputCol] = mm_readB(batch,\n            kStart + inputRow,\n            globalColStart + inputCol${o?", batchIndices":""});\n        }\n      }\n      kStart = kStart + tileInner;\n      workgroupBarrier();\n\n      // Compute acc values for a single thread.\n      var BCached : array<${r}, colPerThread>;\n      for (var k = 0; k < tileInner; k = k + 1) {\n        for (var inner = 0; inner < colPerThread; inner = inner + 1) {\n          BCached[inner] = mm_Bsub[k][localCol + inner * ${t[0]}];\n        }\n        for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n          let ACached = ${n?`mm_Asub[k][localRow + innerRow * ${t[1]}];`:`mm_Asub[localRow + innerRow * ${t[1]}][k];`}\n          for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n            acc[innerRow][innerCol] = acc[innerRow][innerCol] +\n                ACached * BCached[innerCol];\n          }\n        }\n      }\n      workgroupBarrier();\n    }\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      let gRow = globalRowStart + localRow + innerRow * ${t[1]};\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n        let gCol = globalColStart + localCol + innerCol * ${t[0]};\n        mm_write(batch, gRow, gCol, acc[innerRow][innerCol]);\n      }\n    }\n    `:`\nlet tileRow = i32(localId.y) * rowPerThread;\nlet tileCol = i32(localId.x) * colPerThread;\n\nlet globalRow = i32(globalId.y) * rowPerThread;\nlet globalCol = i32(globalId.x) * colPerThread;\nlet globalRowStart = i32(workgroupId.y) * ${p};\n\nlet tileRowA = i32(localId.y) * ${w};\nlet tileColA = i32(localId.x) * ${y};\nlet tileRowB = i32(localId.y) * ${S};\n// Loop over shared dimension.\nfor (var t = 0; t < numTiles; t = t + 1) {\n  // Load one tile of A into local memory.\n  for (var innerRow = 0; innerRow < ${w}; innerRow = innerRow + 1) {\n    for (var innerCol = 0; innerCol < ${y}; innerCol = innerCol + 1) {\n      let inputRow = tileRowA + innerRow;\n      let inputCol = tileColA + innerCol;\n      ${ki(n,o)}\n    }\n  }\n\n  // Load one tile of B into local memory.\n  for (var innerRow = 0; innerRow < ${S}; innerRow = innerRow + 1) {\n    for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n      let inputRow = tileRowB + innerRow;\n      let inputCol = tileCol + innerCol;\n      mm_Bsub[inputRow][inputCol] = mm_readB(batch,\n        kStart + inputRow,\n        globalCol + innerCol${o?", batchIndices":""});\n    }\n  }\n  kStart = kStart + tileInner;\n  workgroupBarrier();\n\n  // Compute acc values for a single thread.\n  var BCached : array<${r}, colPerThread>;\n  for (var k = 0; k < tileInner; k = k + 1) {\n    for (var inner = 0; inner < colPerThread; inner = inner + 1) {\n      BCached[inner] = mm_Bsub[k][tileCol + inner];\n    }\n\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      ${td(n)}\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n        acc[innerRow][innerCol] = acc[innerRow][innerCol] + ACached * BCached[innerCol];\n      }\n    }\n  }\n\n  workgroupBarrier();\n}\n\nfor (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n  for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n    mm_write(batch, globalRow + innerRow, globalCol + innerCol,\n        acc[innerRow][innerCol]);\n  }\n}\n`;return`\n  var<workgroup> mm_Asub : array<array<${r}, ${v}>, ${g}>;\n  var<workgroup> mm_Bsub : array<array<${r}, ${h}>, ${s}>;\n  const rowPerThread = ${e[1]};\n  const colPerThread = ${e[0]};\n  const tileInner = ${s};\n\n@compute @workgroup_size(${t[0]}, ${t[1]}, ${t[2]})\nfn main(@builtin(local_invocation_id) localId : vec3<u32>,\n        @builtin(global_invocation_id) globalId : vec3<u32>,\n        @builtin(workgroup_id) workgroupId : vec3<u32>) {\n    let batch = ${u?"0":"i32(globalId.z)"};\n    ${o?`let batchIndices = ${o.offsetToIndices("u32(batch)")};`:""}\n    let numTiles = ${u?`${Math.ceil(d/s)}`:"(uniforms.dimInner - 1) / tileInner + 1"};\n    var kStart = ${u?`i32(globalId.z) * ${d}`:"0"};\n\n    var acc : array<array<${r}, colPerThread>, rowPerThread>;\n\n    // Without this initialization strange values show up in acc.\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n        acc[innerRow][innerCol] = 0.0;\n      }\n    }\n    ${I}\n  }\n`},rd=(e,t,r,o,n,s=!1)=>{let[u,d,a]=n,[p,h,v,g]=o,w=An(u,a),y=An(d,a),S=Te(o[0].type.tensor),I=()=>{let B=h.rank,E=p.rank,z=`var aIndices: ${h.type.indices};`;for(let T=B-2-1,H=E-1;T>=0;T--,H--)z+=`\naIndices[${T}] = ${E>1?`batchIndices[${H}]`:"batchIndices"};`;return w.forEach(T=>{z+=`\naIndices[${T}] = 0;`}),z+=`\naIndices[${B-2}] = u32(row);\n                   aIndices[${B-1}] = u32(colIn);`,z},x=()=>{let B=v.rank,E=p.rank,z=`var bIndices: ${v.type.indices};`;for(let T=B-2-1,H=E-1;T>=0;T--,H--)z+=`\nbIndices[${T}] = ${E>1?`batchIndices[${H}]`:"batchIndices"};`;return y.forEach(T=>{z+=`\nbIndices[${T}] = 0;`}),z+=`\nbIndices[${B-2}] = u32(row);\n                   bIndices[${B-1}] = u32(colIn);`,z};return`\n    fn mm_readA(batch: i32, row: i32, colIn: i32, batchIndices: ${p.type.indices}) -> ${Ue(e,S)} {\n      var value = ${Ue(e,S)}(0.0);\n      let col = colIn * ${e};\n      if(row < uniforms.dimAOuter && col < uniforms.dimInner)\n      {\n        ${I()}\n        value = ${h.getByIndices("aIndices")};\n      }\n      return value;\n    }\n\n    fn mm_readB(batch: i32, row: i32, colIn: i32, batchIndices: ${p.type.indices}) -> ${Ue(e,S)} {\n      var value = ${Ue(e,S)}(0.0);\n      let col = colIn * ${e};\n      if(row < uniforms.dimInner && col < uniforms.dimBOuter)\n      {\n        ${x()}\n        value = ${v.getByIndices("bIndices")};\n      }\n      return value;\n    }\n\n    fn mm_write(batch: i32, row: i32, colIn: i32, valueIn: ${Ue(e,S)}) {\n      let col = colIn * ${e};\n      if (row < uniforms.dimAOuter && col < uniforms.dimBOuter) {\n        var value = valueIn;\n        let coords = vec3<i32>(batch, row, colIn);\n        ${t?`value = value + ${s?"bias[colIn]":`${Ue(e,S)}(bias[row])`};`:""}\n        ${r}\n        ${g.setByIndices("vec3<u32>(coords)","value")}\n      }\n    }\n    `},Xr=(e,t,r,o,n=!1)=>{let s=e[0].dims,u=e[1].dims,d=s.slice(0,-2),a=u.slice(0,-2),p=o?o.slice(0,-2):r.slice(0,-2),h=Pe(p.length),v=h?p.length:p,g=Uo("batchDims",e[0].dataType,v,1),w=D.size(p),y=s[s.length-2],S=s[s.length-1],I=u[u.length-1],x=S%4===0&&I%4===0,_=y<=8?[4,1,1]:[4,4,1],B=[8,8,1],E=[Math.ceil(I/B[0]/_[0]),Math.ceil(y/B[1]/_[1]),Math.ceil(w/B[2]/_[2])],z=Te(e[0].dataType),T=x?4:1,H=[...d,y,S/T],U=Pe(H.length),L=U?H.length:H,re=[...a,S,I/T],R=Pe(re.length),q=R?re.length:re,pe=[w,y,I/T],J=V("a",e[0].dataType,L,T),$e=V("b",e[1].dataType,q,T),Z=K("result",e[0].dataType,pe.length,T),Se=[J,$e],Ie=[{type:"int32",data:y},{type:"int32",data:I},{type:"int32",data:S}];h&&Ie.push(...Y(p)),U&&Ie.push(...Y(H)),R&&Ie.push(...Y(re));let Ae=[];Ae.push(U?"rank":"dims"),Ae.push(R?"rank":"dims");let he=e.length>2,{activationFunction:rt,applyActivation:Ge}=vt(t,Z.type.value),Fe=rd(T,he,Ge,[g,J,$e,Z],[d,a,p],n);if(he){let de=n?T:1;Se.push(V("bias",e[2].dataType,e[2].dims.length,de)),Ie.push(...Y(e[2].dims)),Ae.push("rank")}Ie.push(...Y(pe));let F=de=>`\n  ${de.registerUniform("dimAOuter","i32").registerUniform("dimBOuter","i32").registerUniform("dimInner","i32").registerInternalVariables(g).declareVariables(...Se,Z)}\n  ${rt}\n  ${Fe}\n  ${x?ur(_,B,z,g):lr(_,B,z,g)}\n                   `;return{name:"MatMul",shaderCache:{hint:t.activationCacheKey+`${_}${t.activation}${t.clipMax}${t.clipMin}${x}${he}${n}`,inputDependencies:Ae},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:E[0],y:E[1],z:E[2]},programUniforms:Ie}),getShaderSource:F}}});var nd,Pi,Ri=j(()=>{"use strict";wt();be();Ot();Yr();Rn();dr();nd=(e,t,r,o,n=!1,s,u=4,d=4,a=4,p="f32")=>{let h=R=>{switch(R){case 1:return"resData = x[xIndex];";case 3:return`resData = vec3<${p}>(x[xIndex], x[xIndex + 1], x[xIndex + 2]);`;case 4:return"resData = x[xIndex / 4];";default:throw new Error(`innerElementSize ${R} is not supported.`)}},v=R=>{switch(R){case 1:return"return w[row * i32(uniforms.w_shape[3]) + colIn];";case 4:return"return w[row * i32(uniforms.w_shape[3]) / 4 + colIn];";default:throw new Error(`innerElementSize ${R} is not supported.`)}},g=e?`\n    let coord = vec4<i32>(batch, xRow, xCol, xCh);\n    `:`\n    let coord = vec4<i32>(batch, xCh, xRow, xCol);\n    `,w=e?`\n    let coords = vec4<i32>(\n      batch,\n      row / outWidth,\n      row % outWidth,\n      col);\n    `:`\n    let coords = vec4<i32>(\n      batch,\n      row,\n      col / outWidth,\n      col % outWidth);\n    `,y=e?"i32(uniforms.x_shape[1])":"i32(uniforms.x_shape[2])",S=e?"i32(uniforms.x_shape[2])":"i32(uniforms.x_shape[3])",I=e?"row":"col",x=e?"col":"row",_=`\n    let inChannels = i32(uniforms.w_shape[2]);\n    let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};\n    let outRow = ${I} / outWidth;\n    let outCol = ${I} % outWidth;\n\n    let WRow = ${x} / (filterDims[1] * inChannels);\n    let WCol = ${x} / inChannels % filterDims[1];\n    let xRow = outRow * stride[0] + dilation[0] * WRow - pad[0];\n    let xCol = outCol * stride[1] + dilation[1] * WCol - pad[1];\n    let xCh = ${x} % inChannels;\n    var resData = ${Ue(u,p)}(0.0);\n    // The bounds checking is always needed since we use it to pad zero for\n    // the \'same\' padding type.\n    if (xRow >= 0 && xRow < ${y} && xCol >= 0 && xCol < ${S}) {\n      ${g}\n      let xIndex = getIndexFromCoords4D(coord, vec4<i32>(uniforms.x_shape));\n      ${h(u)}\n    }\n    return resData;`,B=e?t&&o?`\n    let col = colIn * ${u};\n    ${_}`:`\n    let col = colIn * ${u};\n    if (row < uniforms.dimAOuter && col < uniforms.dimInner) {\n      ${_}\n    }\n    return ${Ue(u,p)}(0.0);`:o&&r?`\n    let col = colIn * ${u};\n    ${_}`:`\n    let col = colIn * ${u};\n    if (row < uniforms.dimInner && col < uniforms.dimBOuter) {\n      ${_}\n    }\n    return ${Ue(u,p)}(0.0);`,E=`${v(d)}`,z=Ue(a,p),T=e?Ue(u,p):Ue(d,p),H=e?Ue(d,p):Ue(u,p),{activationFunction:U,applyActivation:L}=vt(s,z);return`\n    ${U}\n    fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${T} {\n      ${e?B:E}\n    }\n\n    fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${H} {\n      ${e?E:B}\n    }\n\n    fn mm_write(batch: i32, row : i32, colIn : i32, valueIn : ${z}) {\n      let col = colIn * ${a};\n      if (row < uniforms.dimAOuter && col < uniforms.dimBOuter)\n      {\n      var value = valueIn;\n      let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};\n      ${w}\n      ${Kr(n)}\n      ${L}\n      setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);\n      }\n    }`},Pi=(e,t,r,o,n,s,u,d)=>{let a=t.format==="NHWC",p=a?e[0].dims[3]:e[0].dims[1],h=r[0],v=a?r[2]:r[3],g=a?r[1]:r[2],w=a?r[3]:r[1],y=a&&(p%4===0||p%3===0)&&w%4===0,S=a?w:v*g,I=a?v*g:w,x=[8,8,1],_=o<=8?[4,1,1]:[4,4,1],B=[Math.ceil(S/x[0]/_[0]),Math.ceil(I/x[1]/_[1]),Math.ceil(h/x[2]/_[2])];Re("verbose",()=>`[conv2d_mm_webgpu] dispatch = ${B}`);let E=y?a&&p%4!==0?3:4:1,z=x[1]*_[1],T=x[0]*_[0],H=Math.max(x[0]*E,x[1]),U=o%z===0,L=n%T===0,re=s%H===0,R=y?[E,4,4]:[1,1,1],q=Te(e[0].dataType),pe=y?4:1,J=[{type:"int32",data:o},{type:"int32",data:n},{type:"int32",data:s}],$e=V("x",e[0].dataType,e[0].dims.length,E===3?1:E),Z=V("w",e[1].dataType,e[1].dims.length,pe),Se=[$e,Z];J.push(...Y(e[0].dims)),J.push(...Y(e[1].dims));let Ie=`\n      fn setOutputAtIndex(flatIndex : i32, value : ${y?`vec4<${q}>`:q}) {\n        result[flatIndex] = ${y?`vec4<${q}>`:q}(value);\n      }\n      fn setOutputAtCoords(d0 : i32, d1 : i32, d2 : i32, d3 : i32, value : ${y?`vec4<${q}>`:q}) {\n        let flatIndex = getOutputIndexFromCoords(vec4<i32>(d0, d1, d2, d3));\n        setOutputAtIndex(flatIndex ${y?"/ 4":""}, value);\n      }`;if(u){let he=V("bias",e[2].dataType,e[2].dims.length,pe);Se.push(he),J.push(...Y(e[2].dims)),Ie+=`\n        fn getBiasByOutputCoords(coords : vec4<i32>) -> ${y?`vec4<${q}>`:q} {\n          return bias[coords.${a?"w":"y"}${y?"/ 4":""}];\n        }`}let Ae=K("result",e[0].dataType,r.length,pe);return J.push(...Y(r)),{name:"Conv2DMatMul",shaderCache:{hint:t.cacheKey},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:B[0],y:B[1],z:B[2]},programUniforms:J}),getShaderSource:he=>`\n        ${Zr("uniforms.result_strides")}\n        //struct Uniforms { xShape : vec4<i32>, wShape : vec4<i32>, outShape : vec4<i32>,\n        //  outShapeStrides: vec3<i32>, filterDims : vec2<i32>, pad : vec2<i32>, stride : vec2<i32>,\n        //  dilation : vec2<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32 };\n        ${he.registerUniform("dimAOuter","i32").registerUniform("dimBOuter","i32").registerUniform("dimInner","i32").declareVariables(...Se,Ae)}\n        const filterDims : vec2<i32> = vec2<i32>(${t.kernelShape[0]}, ${t.kernelShape[1]});\n        const pad : vec2<i32> = vec2<i32>(${t.pads[0]}, ${t.pads[1]});\n        const stride : vec2<i32> = vec2<i32>(${t.strides[0]}, ${t.strides[1]});\n        const dilation : vec2<i32> = vec2<i32>(${t.dilations[0]}, ${t.dilations[1]});\n        ${Ie}\n        ${nd(a,U,L,re,u,t,R[0],R[1],R[2],q)}\n            ${y?ur(_,x,q,void 0,!a,H):lr(_,x,q,void 0,!a,H,!1,void 0,d)}`}}});var Bn,Bi=j(()=>{"use strict";ye();be();Dn();Ot();Bn=(e,t,r)=>{let o=e.length>2,n=o?"value += b[output_channel];":"",s=e[0].dims,u=e[1].dims,d=u[0]/t.group,a=t.format==="NHWC",p=Mn(s,u,t.dilations,t.pads,t.strides,a),h=D.size(p),v=K("output",e[0].dataType,p),{activationFunction:g,applyActivation:w}=vt(t,v.type.value),y=V("x",e[0].dataType,s),S=V("w",e[1].dataType,u),I=[y,S];o&&I.push(V("b",e[2].dataType,e[2].dims));let x=_=>`\n  const strides: vec2<u32> = vec2(${t.strides[0]}u, ${t.strides[1]}u);\n  const pads: vec2<u32> = vec2(${t.pads[0]}u, ${t.pads[1]}u);\n\n  ${_.declareVariables(...I,v)}\n\n  ${g}\n\n  ${_.mainStart()}\n    ${_.guardAgainstOutOfBoundsWorkgroupSizes(h)}\n\n    let outputIndices = ${v.offsetToIndices("global_idx")};\n    let batch: u32 = outputIndices[0];\n    let output_channel: u32 = outputIndices[${a?3:1}];\n    let xRCCorner: vec2<u32> = vec2<u32>(outputIndices[${a?1:2}], outputIndices[${a?2:3}]) * strides - pads;\n    let group_id: u32 = output_channel / ${d}u;\n\n    var value: ${v.type.value} = ${v.type.value}(0);\n    for (var wInChannel: u32 = 0u; wInChannel < ${u[1]}u; wInChannel++) {\n      let input_channel = group_id * ${u[1]}u + wInChannel;\n      for (var wHeight: u32 = 0u; wHeight < ${u[2]}u; wHeight++) {\n        let xHeight = xRCCorner.x + wHeight * ${t.dilations[0]}u;\n\n        if (xHeight < 0u || xHeight >= ${s[a?1:2]}u) {\n          continue;\n        }\n\n        for (var wWidth: u32 = 0u; wWidth < ${u[3]}u; wWidth++) {\n          let xWidth = xRCCorner.y + wWidth * ${t.dilations[1]}u;\n          if (xWidth < 0u || xWidth >= ${s[a?2:3]}u) {\n            continue;\n          }\n\n          let xVal = ${a?y.get("batch","xHeight","xWidth","input_channel"):y.get("batch","input_channel","xHeight","xWidth")};\n          let wVal = ${S.get("output_channel","wInChannel","wHeight","wWidth")};\n          value += xVal*wVal;\n        }\n      }\n    }\n    ${n}\n    ${w}\n    ${v.setByOffset("global_idx","value")}\n  }`;return{name:"GroupedConv",shaderCache:{hint:t.cacheKey},getRunData:()=>({outputs:[{dims:r?r(p):p,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(h/64)}}),getShaderSource:x}}});var Mn,Mi,od,Di,zn,ad,id,Vn,Dn=j(()=>{"use strict";ye();ke();Ri();dr();Bi();Ot();Wt();Mn=(e,t,r,o,n,s)=>{let u=e[0],d=e.slice(s?1:2,s?3:4),a=d.length,p=t[0],v=t.slice(2).map((y,S)=>y+(y-1)*(r[S]-1)),w=d.map((y,S)=>y+o[S]+o[S+a]).map((y,S)=>Math.floor((y-v[S]+n[S])/n[S]));return w.splice(0,0,u),w.splice(s?3:1,0,p),w},Mi=[2,3,1,0],od=(e,t)=>{if(!e||e.length!==2&&e.length!==3)throw new Error("Conv requires 2 or 3 inputs");if(e[0].dims.length!==4&&e[0].dims.length!==3)throw new Error("currently only support conv 1D and 2D");if(e[0].dims.length!==e[1].dims.length)throw new Error("filter does not have same dimension as input");let r=e[0].dims[t.format==="NHWC"?e[0].dims.length-1:1],o=e[1].dims[1]*t.group;if(r!==o)throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");if(e.length===3&&(e[2].dims.length!==1||e[1].dims[0]!==e[2].dims[0]))throw new Error("invalid bias");let n=e[0].dims.length-2;if(t.dilations.length!==n)throw new Error(`dilations should be ${n}D`);if(t.strides.length!==n)throw new Error(`strides should be ${n}D`);if(t.pads.length!==n*2)throw new Error(`pads should be ${n*2}D`);if(t.kernelShape.length!==0&&t.kernelShape.length!==e[1].dims.length-2)throw new Error("invalid kernel shape")},Di=(e,t)=>{let r=e.kernelShape.slice();for(let s=2;s<t[1].dims.length;++s)r[s-2]===0&&(r[s-2]=t[1].dims[s]);let o=e.pads.slice();Et.adjustPadsBasedOnAutoPad(t[0].dims,e.strides,e.dilations,r,o,e.format==="NHWC",e.autoPad);let n=Object.assign({},e);return Object.assign(n,{kernelShape:r,pads:o,cacheKey:e.cacheKey}),n},zn=e=>{let t=jr(e),r=e.format,o=["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][e.auto_pad],n=e.dilations,s=e.group,u=e.kernel_shape,d=e.pads,a=e.strides,p=e.w_is_const();return Q({autoPad:o,format:r,dilations:n,group:s,kernelShape:u,pads:d,strides:a,wIsConst:p,...t})},ad=(e,t,r)=>{let o=Di(r,t);if(r.group!==1){e.compute(Bn(t,o));return}let n=r.format==="NHWC",s=t.length===3,u=t[0].dims[n?1:2],d=t[0].dims[n?2:3],a=t[0].dims[n?3:1],p=t[1].dims[2],h=t[1].dims[3],v=Mn(t[0].dims,t[1].dims,r.dilations,o.pads,r.strides,n),g=v[n?1:2],w=v[n?2:3],y=v[n?3:1],S=n&&p===u&&h===d&&r.pads[0]===0&&r.pads[1]===0;if(S||p===1&&h===1&&r.dilations[0]===1&&r.dilations[1]===1&&r.strides[0]===1&&r.strides[1]===1&&r.pads[0]===0&&r.pads[1]===0){let T=v[0],H,U,L,re=[];if(n){let R=e.kernelCustomData.wT??e.compute(tt(t[1],Mi),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];if(r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=R),S){let q=u*d*a;H=t[0].reshape([1,T,q]),U=R.reshape([1,q,y]),L=[1,T,y]}else H=t[0].reshape([T,u*d,a]),U=R.reshape([1,a,y]),L=[T,g*w,y];re.push(H),re.push(U)}else H=t[0].reshape([T,a,u*d]),U=t[1].reshape([1,y,a]),L=[T,y,g*w],re.push(U),re.push(H);s&&re.push(t[2]),e.compute(Xr(re,o,v,L,n),{inputs:re});return}let I=!0,x=e.kernelCustomData.wT??e.compute(tt(t[1],Mi),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=x);let _=[t[0],x];s&&_.push(t[2]);let B=n?g*w:y,E=n?y:g*w,z=p*h*a;e.compute(Pi(_,o,v,B,E,z,s,I),{inputs:_})},id=(e,t)=>{let r=t.format==="NHWC",o=[e.inputs[0].reshape(r?[e.inputs[0].dims[0],1,e.inputs[0].dims[1],e.inputs[0].dims[2]]:[e.inputs[0].dims[0],e.inputs[0].dims[1],1,e.inputs[0].dims[2]]),e.inputs[1].reshape([e.inputs[1].dims[0],e.inputs[1].dims[1],1,e.inputs[1].dims[2]])];e.inputs.length===3&&o.push(e.inputs[2]);let n=[0,t.pads[0],0,t.pads[1]],s=[1].concat(t.strides),u=[1].concat(t.dilations),d=[1].concat(t.kernelShape),a=Di({...t,pads:n,strides:s,dilations:u,kernelShape:d},o);e.compute(Bn(o,a,p=>r?[p[0],p[2],p[3]]:[]))},Vn=(e,t)=>{od(e.inputs,t),e.inputs[0].dims.length===3?id(e,t):ad(e,e.inputs,t)}});var sd,zi,Vi=j(()=>{"use strict";wt();be();Ot();Yr();Rn();dr();sd=(e,t=!1,r,o=4)=>{let n=Ue(o,"f32"),s=_=>{switch(_){case 1:return"return w[getIndexFromCoords4D(coord, vec4<i32>(uniforms.w_shape))];";case 4:return`\n            let coord1 = vec4<i32>(coordX, coordY, col + 1, rowInner);\n            let coord2 = vec4<i32>(coordX, coordY, col + 2, rowInner);\n            let coord3 = vec4<i32>(coordX, coordY, col + 3, rowInner);\n            let v0 = w[getIndexFromCoords4D(coord, vec4<i32>(uniforms.w_shape))];\n            let v1 = w[getIndexFromCoords4D(coord1, vec4<i32>(uniforms.w_shape))];\n            let v2 = w[getIndexFromCoords4D(coord2, vec4<i32>(uniforms.w_shape))];\n            let v3 = w[getIndexFromCoords4D(coord3, vec4<i32>(uniforms.w_shape))];\n            return vec4<f32>(v0, v1, v2, v3);\n            `;default:throw new Error(`innerElementSize ${_} is not supported.`)}},u=e?`\n      let coord = vec4<i32>(batch, iXR, iXC, xCh);\n      `:`\n      let coord = vec4<i32>(batch, xCh, iXR, iXC);\n      `,d=e?`\n    let coords = vec4<i32>(\n      batch,\n      row / outWidth,\n      row % outWidth,\n      col);\n    `:`\n    let coords = vec4<i32>(\n      batch,\n      row,\n      col / outWidth,\n      col % outWidth);\n    `,a=e?"outBackprop[1]":"outBackprop[2]",p=e?"outBackprop[2]":"outBackprop[3]",h=e?"row":"col",v=e?"col":"row",g=`\n      let inChannels = ${e?"outBackprop[3]":"outBackprop[1]"};\n      let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};\n      let outRow = ${h} / outWidth;\n      let outCol = ${h} % outWidth;\n\n      let WRow = ${v} / (filterDims[1] * inChannels);\n      let WCol = ${v} / inChannels % filterDims[1];\n      let xR = f32(outRow - pads[0] + dilation[0] * WRow) / f32(strides[0]);\n      let xC = f32(outCol - pads[1] + dilation[1] * WCol) / f32(strides[1]);\n      if (xR < 0.0 || xR >= f32(${a}) || fract(xR) > 0.0) {\n        return ${n}(0.0);\n      }\n      if (xC < 0.0 || xC >= f32(${p}) || fract(xC) > 0.0) {\n        return ${n}(0.0);\n      }\n      let iXR = i32(xR);\n      let iXC = i32(xC);\n      let xCh = ${v} % inChannels;\n      ${u}\n      return x[getIndexFromCoords4D(coord, vec4<i32>(uniforms.x_shape))/${o}];`,w=e?`\n      let col = colIn * ${o};\n      if (row < uniforms.dimAOuter && col < uniforms.dimInner) {\n        ${g}\n      }\n      return ${n}(0.0);`:`\n      let col = colIn * ${o};\n      if (row < uniforms.dimInner && col < uniforms.dimBOuter) {\n        ${g}\n      }\n      return ${n}(0.0);`,y=`\n      let col = colIn * ${o};\n      let inChannels = ${e?"outBackprop[3]":"outBackprop[1]"};\n      let coordX = filterDims.x - 1 - row / (filterDims[1] * inChannels);\n      let coordY = filterDims.y - 1 - (row / inChannels) % filterDims[1];\n      if (${e?"row < uniforms.dimInner && col < uniforms.dimBOuter":"row < uniforms.dimInner && col < uniforms.dimAOuter"}  && coordX >= 0 && coordY >= 0) {\n        let rowInner = row % inChannels;\n        let coord = vec4<i32>(coordX, coordY, col, rowInner);\n        ${s(o)}\n      }\n      return ${n}(0.0);\n      `,{activationFunction:S,applyActivation:I}=vt(r,n);return`\n      ${S}\n  fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${n} {\n    ${e?w:y}\n  }\n\n  fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${n} {\n    ${e?y:w}\n  }\n\n  fn mm_write(batch: i32, row : i32, colIn : i32, valueInput : ${n}) {\n    let col = colIn * ${o};\n    if (row < uniforms.dimAOuter && col < uniforms.dimBOuter) {\n      var value = valueInput;\n      let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};\n      ${d}\n      ${Kr(t)}\n      ${I}\n      result[getIndexFromCoords4D(coords, vec4<i32>(uniforms.result_shape))/${o}] = value;\n    }\n  }`},zi=(e,t,r,o,n,s,u,d)=>{let a=t.format==="NHWC",p=a?e[0].dims[3]:e[0].dims[1],h=r[0],v=a?r[2]:r[3],g=a?r[1]:r[2],w=a?r[3]:r[1],y=a?p%4===0&&w%4===0:v%4===0&&w%4===0,S=a?w:v*g,I=a?v*g:w,x=y?[8,8,1]:[S<=4||I<=4?4:16,S>4&&I<=4?4:16,1],_=y?[4,4,1]:[S<=4?1:4,S>4&&I<=4?1:4,1],B=[Math.ceil(S/x[0]/_[0]),Math.ceil(I/x[1]/_[1]),Math.ceil(h/x[2]/_[2])];Re("verbose",()=>`[conv_backprop_mm_webgpu] dispatch = ${B}`);let E=y?4:1,z=Math.max(x[0]*E,x[1]),T=y?4:1,H=[{type:"int32",data:o},{type:"int32",data:n},{type:"int32",data:s}],U=V("x",e[0].dataType,e[0].dims.length,T),L=V("w",e[1].dataType,e[1].dims.length,1),re=K("result",e[0].dataType,r.length,T),R=[U,L];H.push(...Y(e[0].dims)),H.push(...Y(e[1].dims));let q="";if(u){let pe=V("bias",e[2].dataType,e[2].dims.length,T);R.push(pe),H.push(...Y(e[2].dims)),q+=`\n        fn getBiasByOutputCoords(coords : vec4<i32>) -> ${y?"vec4<f32>":"f32"} {\n          return bias[coords.${a?"w":"y"}${y?"/ 4":""}];\n        }`}return H.push(...Y(r)),{name:"Conv2DTransposeMatMul",shaderCache:{hint:t.cacheKey},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:B[0],y:B[1],z:B[2]},programUniforms:H}),getShaderSource:pe=>`\n        ${Zr("uniforms.result_strides")}\n        ${pe.registerUniform("dimAOuter","i32").registerUniform("dimBOuter","i32").registerUniform("dimInner","i32").declareVariables(...R,re)};\n        const outBackprop : vec4<i32> = vec4<i32>(${e[0].dims.join(",")});\n        const filterDims : vec2<i32> = vec2<i32>(${t.kernelShape[a?1:2]}, ${t.kernelShape[a?2:3]});\n        const effectiveFilterDims : vec2<i32> = filterDims + vec2<i32>(\n              ${t.dilations[0]<=1?0:(t.kernelShape[a?1:2]-1)*(t.dilations[0]-1)},\n              ${t.dilations[1]<=1?0:(t.kernelShape[a?2:3]-1)*(t.dilations[1]-1)});\n        const pads : vec2<i32> = vec2<i32>(i32(effectiveFilterDims[0]) - 1 - (${t.pads[0]+t.pads[2]})/2,\n                                         i32(effectiveFilterDims[1]) - 1 - (${t.pads[1]+t.pads[3]})/2);\n        const strides : vec2<i32> = vec2<i32>(${t.strides[0]}, ${t.strides[1]});\n        const dilation : vec2<i32> = vec2<i32>(${t.dilations[0]}, ${t.dilations[1]});\n        const dimAOuter : i32 = ${o};\n        const dimBOuter : i32 = ${n};\n        const dimInner : i32 = ${s};\n        ${q}\n        ${sd(a,u,t,E)}\n        ${y?ur(_,x,"f32",void 0,!a,z):lr(_,x,"f32",void 0,!a,z,!1,void 0,d)}`}}});var ud,Wn,Wi=j(()=>{"use strict";wt();ye();be();ud=(e,t,r,o,n,s,u=!1,d)=>{let a=r.format==="NHWC",p=a?1:2,h=a?2:3,v=a?3:1,g=D.size(o),w=u?2:1,y=r.group,S=t[1].dims,I=S[0]/y,x=S[1],_=`\n  fn setOutputAtIndex(flatIndex : u32, value : ${u?`vec4<${d}>`:d}) {\n    result[flatIndex] = ${u?`vec4<${d}>`:d}(value);\n  }`;n&&(_+=`\n    fn getBiasByOutputCoords(coords : vec4<u32>) -> ${u?`vec4<${d}>`:d} {\n      return bias[coords.${a?"w":"y"}${u?"/ 4":""}];\n    }`);let B=u?4:1,E=V("W",t[1].dataType,t[1].dims,B),z=V("Dy",t[0].dataType,t[0].dims,B),T=[z,E];n&&T.push(V("bias",t[2].dataType,[o[v]],B));let H=K("result",t[0].dataType,o,B),U=`{\n        let batch: u32 = ${s?"global_id.z":"workgroup_id.z"} / outShape[1];\n        let r = ${s?"global_id.z":"workgroup_id.z"} % outShape[1];\n        let c = ${s?"global_id.y":"workgroup_id.y"} * ${w};\n        let d1: u32 = ${s?"global_id.x":"workgroup_id.x"} * 4;\n\n        let dyCorner = vec2<i32>(i32(r), i32(c)) - vec2<i32>(pads);\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        var dotProd: array<vec4<${d}>, ${w}>;\n        for (var i = 0; i < ${w}; i++) {\n          dotProd[i] = vec4<${d}>(0.0);\n        }\n        for (var wR: u32 = 0; wR < filterDims[0]; wR = wR + 1) {\n          var dyR = (${d}(dyCorner.x) + ${d}(wR)) / ${d}(strides.x);\n          let wRPerm = filterDims[0] - 1 - wR;\n          if (dyR < 0.0 || dyR >= ${d}(outBackprop[1]) ||\n              fract(dyR) > 0.0 || wRPerm < 0) {\n            continue;\n          }\n          let idyR: u32 = u32(dyR);\n\n          for (var wC: u32 = 0; wC < filterDims[1]; wC = wC + 1) {\n            let dyC = (${d}(dyCorner.y) + ${d}(wC)) / ${d}(strides.y);\n            let dyC2 = (${d}(dyCorner.y) + 1.0 + ${d}(wC)) / ${d}(strides.y);\n            let wCPerm = filterDims[1] - 1 - wC;\n            if (wCPerm < 0) {\n              continue;\n            }\n            var bDyCVal = true;\n            var bDyCVal2 = true;\n            if (dyC < 0.0 || dyC >= ${d}(outBackprop[2]) ||\n                fract(dyC) > 0.0) {\n              bDyCVal = false;\n            }\n            if (dyC2 < 0.0 || dyC2 >= ${d}(outBackprop[2]) ||\n                fract(dyC2) > 0.0) {\n              bDyCVal2 = false;\n            }\n\n            let idyC: u32 = u32(dyC);\n            let idyC2: u32 = u32(dyC2);\n            if (bDyCVal && bDyCVal2) {\n              let d2Length = outBackprop[3];\n              for (var d2 :u32 = 0; d2 < d2Length; d2 = d2 + 4) {\n                let wValue0 = ${E.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};\n                let wValue1 = ${E.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};\n                let wValue2 = ${E.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};\n                let wValue3 = ${E.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};\n\n                var xValue = ${z.get("batch","idyR","idyC","d2")};\n                let tmpval = vec4<${d}>(dot(xValue, wValue0),\n                                      dot(xValue, wValue1),\n                                      dot(xValue, wValue2),\n                                      dot(xValue, wValue3));\n                dotProd[0] = dotProd[0] + tmpval;\n\n                xValue =  ${z.get("batch","idyR","idyC2","d2")};\n\n                dotProd[1] = dotProd[1] + vec4<${d}>(dot(xValue, wValue0),\n                                                    dot(xValue, wValue1),\n                                                    dot(xValue, wValue2),\n                                                    dot(xValue, wValue3));\n              }\n            } else if (bDyCVal) {\n              let d2Length = outBackprop[${v}];\n              for (var d2: u32 = 0; d2 < d2Length; d2 = d2 + 4) {\n                let wValue0 = ${E.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};\n                let wValue1 = ${E.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};\n                let wValue2 = ${E.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};\n                let wValue3 = ${E.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};\n\n                var xValue = ${z.get("batch","idyR","idyC","d2")};\n                let tmpval = vec4<${d}>(dot(xValue, wValue0),\n                                      dot(xValue, wValue1),\n                                      dot(xValue, wValue2),\n                                      dot(xValue, wValue3));\n                dotProd[0] = dotProd[0] + tmpval;\n              }\n            } else if (bDyCVal2) {\n              let d2Length = outBackprop[3];\n              for (var d2: u32 = 0; d2 < d2Length; d2 = d2 + 4) {\n                let wValue0 = ${E.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};\n                let wValue1 = ${E.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};\n                let wValue2 = ${E.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};\n                let wValue3 = ${E.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};\n\n                var xValue = ${z.get("batch","idyR","idyC2","d2")};\n                let tmpval = vec4<${d}>(dot(xValue, wValue0),\n                                      dot(xValue, wValue1),\n                                      dot(xValue, wValue2),\n                                      dot(xValue, wValue3));\n                dotProd[1] = dotProd[1] + tmpval;\n              }\n            }\n          }\n        }\n\n        for (var i: u32 = 0; i < ${w}; i = i + 1) {\n          let value = dotProd[i] + ${n?"bias[c+i]":"0.0"};\n          ${H.set("batch","r","c + i","d1","value")};\n        }\n      }`,L=`\n          let outputIndices = ${H.offsetToIndices("global_idx")};\n          let batch = ${H.indicesGet("outputIndices",0)};\n          let d1 = ${H.indicesGet("outputIndices",v)};\n          let r = ${H.indicesGet("outputIndices",p)};\n          let c = ${H.indicesGet("outputIndices",h)};\n          let dyCorner = vec2<i32>(i32(r), i32(c)) - pads;\n          let dyRCorner = dyCorner.x;\n          let dyCCorner = dyCorner.y;\n          let groupId = d1 / ${x};\n          let wOutChannel = d1 - groupId * ${x};\n          // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n          // ? = to be determined. : = across all values in that axis.\n          var dotProd = 0.0;\n          for (var wR: u32 = 0; wR < effectiveFilterDims.x; wR = wR + 1) {\n            if (wR % dilations.x != 0) {\n              continue;\n            }\n            let dyR = (${d}(dyRCorner) + ${d}(wR)) / ${d}(strides[0]);\n            let wRPerm = filterDims.x - 1 - wR / dilations.x;\n            if (dyR < 0.0 || dyR >= ${d}(outBackprop[${p}]) || fract(dyR) > 0.0 ||\n                wRPerm < 0) {\n              continue;\n            }\n            let idyR: u32 = u32(dyR);\n\n            for (var wC: u32 = 0; wC < effectiveFilterDims.y; wC = wC + 1) {\n              if (wC % dilations.y != 0) {\n                continue;\n              }\n              let dyC = (${d}(dyCCorner) + ${d}(wC)) / ${d}(strides.y);\n              let wCPerm = filterDims.y - 1 - wC / dilations.y;\n              if (dyC < 0.0 || dyC >= ${d}(outBackprop[${h}]) ||\n                  fract(dyC) > 0.0 || wCPerm < 0) {\n                continue;\n              }\n              let idyC: u32 = u32(dyC);\n              var inputChannel = groupId * ${I};\n              for (var d2: u32 = 0; d2 < ${I}; d2 = d2 + 1) {\n                let xValue = ${a?z.get("batch","idyR","idyC","inputChannel"):z.get("batch","inputChannel","idyR","idyC")};\n                let wValue = ${E.get("inputChannel","wOutChannel","u32(wRPerm)","u32(wCPerm)")};\n                dotProd = dotProd + xValue * wValue;\n                inputChannel = inputChannel + 1;\n              }\n            }\n          }\n          let value = dotProd + ${n?"bias[d1]":"0.0"};\n          ${H.setByOffset("global_idx","value")};\n        `;return`\n  ${e.declareVariables(...T,H)}\n  ${_}\n  const outShape : vec4<u32> = vec4<u32>(${o.join(",")});\n  const outBackprop : vec4<u32> = vec4<u32>(${t[0].dims.join(",")});\n  const strides : vec2<u32> = vec2<u32>(${r.strides[0]}, ${r.strides[1]});\n  const filterDims : vec2<u32> = vec2<u32>(${r.kernelShape[a?1:2]}, ${r.kernelShape[a?2:3]});\n  const dilations : vec2<u32> = vec2<u32>(${r.dilations[0]}, ${r.dilations[1]});\n  const effectiveFilterDims : vec2<u32> = filterDims + vec2<u32>(\n          ${r.dilations[0]<=1?0:(r.kernelShape[a?1:2]-1)*(r.dilations[0]-1)},\n          ${r.dilations[1]<=1?0:(r.kernelShape[a?2:3]-1)*(r.dilations[1]-1)});\n  const pads : vec2<i32> = vec2<i32>(i32(effectiveFilterDims[0]) - 1 - (${r.pads[0]+r.pads[2]})/2,\n                                     i32(effectiveFilterDims[1]) - 1 - (${r.pads[1]+r.pads[3]})/2);\n    ${e.mainStart()}\n    ${e.guardAgainstOutOfBoundsWorkgroupSizes(g)};\n  ${u?U:L}}`},Wn=(e,t,r)=>{let o=e.length>2,n=t.outputShape,s=D.size(n),u=[Math.ceil(s/64),1,1];Re("verbose",()=>`[conv2d_backprop_webgpu] dispatch = ${u}`);let d=Te(e[0].dataType);return{name:"ConvTranspose2D",shaderCache:{hint:t.cacheKey},getRunData:()=>({dispatchGroup:{x:u[0],y:u[1],z:u[2]},outputs:[{dims:r?r(n):n,dataType:e[0].dataType}]}),getShaderSource:a=>ud(a,e,t,n,o,u[1]===1&&u[2]===1,!1,d)}}});var ld,dd,cd,Ui,Ni,pd,md,fd,hd,Hi,Gi=j(()=>{"use strict";ke();Vi();Wi();Ot();Wt();ld=(e,t,r,o,n,s)=>(e-1)*t+r+(o-1)*n+1-s,dd=(e,t,r,o,n)=>{let s=Math.floor(e/2);t==="SAME_UPPER"?(r[o]=s,r[n]=e-s):t==="SAME_LOWER"&&(r[o]=e-s,r[n]=s)},cd=(e,t,r,o,n,s,u,d,a,p)=>{let h=e.length-2,v=p.length===0;if(a.length===0)for(let y=0;y<h;++y)a.push(0);let g=e[0],w=t[d?3:1]*n;for(let y=0,S=e.length-h-(d?1:0);y<h;++y,++S){let I=e[S],x=v?I*u[y]:p[y],_=ld(I,u[y],s[y],t[S],r[y],x);dd(_,o,s,y,y+h),v&&p.push(u[y]*(I-1)+a[y]+(t[S]-1)*r[y]+1-s[y]-s[y+h])}p.splice(0,0,g),p.splice(d?3:1,0,w)},Ui=(e,t)=>{let r=e.kernelShape.slice();if(e.kernelShape.length===0||e.kernelShape.reduce((g,w)=>g*w,1)===0){r.length=0;for(let g=2;g<t[1].dims.length;++g)r.push(t[1].dims[g])}let o=e.format==="NHWC";r.splice(0,0,t[1].dims[0]),r.splice(o?3:1,0,t[1].dims[1]);let n=e.pads.slice(),s=e.outputShape.slice(),u=e.outputPadding.slice(),d=t[0].dims,a=e.dilations.slice();if(a.reduce((g,w)=>g+w,0)===0){let g=t[0].dims.length-2;a=new Array(g).fill(1)}let p=e.strides.slice();if(p.reduce((g,w)=>g+w,0)===0){let g=t[0].dims.length-2;p=new Array(g).fill(1)}cd(d,r,a,e.autoPad,e.group,n,p,o,u,s);let h=Object.assign({},e),v=e.cacheKey+[r.join("n,"),n.join(","),p.join(","),u.join(","),s.join(","),a.join(",")].join("_");return Object.assign(h,{kernelShape:r,pads:n,outputPadding:u,outputShape:s,dilations:a,strides:p,cacheKey:v}),h},Ni=e=>{let t=jr(e),r=e.format,o=["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][typeof e.autoPad>"u"?0:e.autoPad],n=e.dilations,s=e.group,u=e.kernelShape,d=e.pads,a=e.strides,p=e.wIsConst(),h=e.outputPadding,v=e.outputShape;return Q({autoPad:o,format:r,dilations:n,group:s,kernelShape:u,outputPadding:h,outputShape:v,pads:d,strides:a,wIsConst:p,...t})},pd=(e,t)=>{if(!e||e.length!==2&&e.length!==3)throw new Error("Conv requires 2 or 3 inputs");if(e[0].dims.length!==4&&e[0].dims.length!==3)throw new Error("currently only support 2-dimensional conv");if(e[0].dims.length!==e[1].dims.length)throw new Error("filter does not have same dimension as input");let r=e[0].dims[t.format==="NHWC"?e[0].dims.length-1:1],o=e[1].dims[0];if(r!==o)throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");let n=e[1].dims[1]*t.group;if(e.length===3&&(e[2].dims.length!==1||e[2].dims[0]!==n))throw new Error("invalid bias");let s=e[0].dims.length-2;if(t.dilations.reduce((h,v)=>h+v,0)>0&&t.dilations.length!==s)throw new Error(`dilations should be ${s}D`);if(t.strides.reduce((h,v)=>h+v,0)>0&&t.strides.length!==s)throw new Error(`strides should be ${s}D`);if(t.pads.reduce((h,v)=>h+v,0)>0&&t.pads.length!==s*2)throw new Error(`pads should be ${s*2}D`);if(t.outputPadding.length!==s&&t.outputPadding.length!==0)throw new Error(`output_padding should be ${s}D`);if(t.kernelShape.reduce((h,v)=>h+v,0)>0&&t.kernelShape.length!==0&&t.kernelShape.length!==e[1].dims.length-2)throw new Error("invalid kernel shape");if(t.outputShape.length!==0&&t.outputShape.length!==e[0].dims.length-2)throw new Error("invalid output shape")},md=[2,3,1,0],fd=(e,t,r)=>{let o=Ui(r,t),n=r.format==="NHWC",s=o.outputShape,u=s[n?3:1],d=t[0].dims[n?3:1];if(o.group!==1||u===1&&d===1){e.compute(Wn(t,o));return}let a=s[n?1:2],p=s[n?2:3],h=t[1].dims[2],v=t[1].dims[3],g=n?a*p:u,w=n?u:a*p,y=h*v*d,S=!0,I=e.kernelCustomData.wT??e.compute(tt(t[1],md),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=I);let x=[t[0],I],_=t.length===3;_&&(!n&&t[2].dims.length===1?x.push(t[2].reshape([t[2].dims[0],1,1])):x.push(t[2])),e.compute(zi(x,o,s,g,w,y,_,S),{inputs:x})},hd=(e,t)=>{let r=t.format==="NHWC",o=[e.inputs[0].reshape(r?[e.inputs[0].dims[0],1,e.inputs[0].dims[1],e.inputs[0].dims[2]]:[e.inputs[0].dims[0],e.inputs[0].dims[1],1,e.inputs[0].dims[2]]),e.inputs[1].reshape([e.inputs[1].dims[0],e.inputs[1].dims[1],1,e.inputs[1].dims[2]])];o.length===3&&o.push(e.inputs[2]);let n=t.kernelShape;(n.length===0||n[0]===0)&&(n=[e.inputs[1].dims[2]]);let s=t.dilations;(s.length===0||s[0]===0)&&(s=[1]);let u=t.strides;(u.length===0||u[0]===0)&&(u=[1]);let d=t.pads;d.length===0&&(d=[0,0]),d=[0,d[0],0,d[1]],u=[1].concat(u),s=[1].concat(s),n=[1].concat(n);let a=Ui({...t,pads:d,strides:u,dilations:s,kernelShape:n},o);e.compute(Wn(o,a,p=>r?[p[0],p[2],p[3]]:[p[0],p[1],p[3]]))},Hi=(e,t)=>{pd(e.inputs,t),e.inputs[0].dims.length===3?hd(e,t):fd(e,e.inputs,t)}});var gd,Li,Fi,qi=j(()=>{"use strict";Ve();ye();ke();be();gd=(e,t,r,o)=>{let n=D.size(t),s=t.length,u=V("input",e,s),d=K("output",e,s),a=r.dataType===6?r.getInt32Array()[0]:Number(r.getBigInt64Array()[0]),p=D.normalizeAxis(a,s),h=v=>{let g=` i32(${u.indicesGet("inputIndices","uniforms.axis")}) `,w=_e("uniforms.input_shape","uniforms.axis",s),y=o.reverse?g+(o.exclusive?" + 1":""):"0",S=o.reverse?w:g+(o.exclusive?"":" + 1");return`\n                ${v.registerUniform("outputSize","u32").registerUniform("axis","u32").declareVariables(u,d)}\n                ${v.mainStart()}\n                  ${v.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n                  var inputIndices = ${d.offsetToIndices("global_idx")};\n                  var sum = ${d.type.value}(0);\n                  let first : i32 = ${y};\n                  let last : i32 = ${S};\n                  for (var i : i32 = first; i < last; i++) {\n                    ${u.indicesSet("inputIndices","uniforms.axis","u32(i)")};\n                    sum = sum + ${u.getByIndices("inputIndices")};\n                  }\n                  ${d.setByOffset("global_idx","sum")};\n                }`};return{name:"CumSum",shaderCache:{hint:o.cacheKey,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:t,dataType:e}],dispatchGroup:{x:Math.ceil(n/64)},programUniforms:[{type:"uint32",data:n},{type:"int32",data:p},...Y(t),...Y(t)]}),getShaderSource:h}},Li=(e,t)=>{let r=e.inputs[0].dims,o=e.inputs[0].dataType,n=e.inputs[1];e.compute(gd(o,r,n,t),{inputs:[0]})},Fi=e=>{let t=e.exclusive===1,r=e.reverse===1;return Q({exclusive:t,reverse:r})}});var Un,Qr,ji,yd,bd,Nn,Hn,Ki,wd,Yi,Zi,Xi=j(()=>{"use strict";ye();ke();be();Un="[a-zA-Z]|\\\\.\\\\.\\\\.",Qr="("+Un+")+",ji="^"+Qr+"$",yd="("+Qr+",)*"+Qr,bd="^"+yd+"$",Nn=class{constructor(t=-1){this.symbolToIndices=new Map,this.inputIndex=t}addSymbol(t,r){let o=this.symbolToIndices.get(t);o===void 0?o=[r]:o.push(r),this.symbolToIndices.set(t,o)}},Hn=class{constructor(t,r){this.equation=r;this.hasEllipsis=!1,this.symbolToInfo=new Map,this.lhs=new Array,this.outputDims=[];let[o,n]=r.includes("->")?r.split("->",2):[r,""];if(!o.match(RegExp(bd)))throw new Error("Invalid LHS term");if(o.split(",").forEach((d,a)=>{let p=t[a].dims.slice();if(!d.match(RegExp(ji)))throw new Error("Invalid LHS term");let h=this.processTerm(d,!0,p,a);this.lhs.push(h)}),n==="")n+=[...this.symbolToInfo.entries()].filter(([d,a])=>a.count===1||d==="...").map(([d])=>d).join("");else if(!n.match(RegExp(Qr)))throw new Error("Invalid RHS");n.match(RegExp(Un,"g"))?.forEach(d=>{if(d==="...")this.outputDims=this.outputDims.concat(this.ellipsisDims);else{let a=this.symbolToInfo.get(d);if(a===void 0)throw new Error("Invalid RHS symbol");this.outputDims.push(a.dimValue)}}),this.rhs=this.processTerm(n,!1,this.outputDims)}addSymbol(t,r,o){let n=this.symbolToInfo.get(t);if(n!==void 0){if(n.dimValue!==r&&n.count!==1)throw new Error("Dimension mismatch");n.count++,n.inputIndices.push(o)}else n={count:1,dimValue:r,inputIndices:[o]};this.symbolToInfo.set(t,n)}processTerm(t,r,o,n=-1){let s=o.length,u=!1,d=[],a=0;if(!t.match(RegExp(ji))&&!r&&t!=="")throw new Error("Invalid LHS term");let p=t.match(RegExp(Un,"g")),h=new Nn(n);return p?.forEach((v,g)=>{if(v==="..."){if(u)throw new Error("Only one ellipsis is allowed per input term");u=!0;let w=s-p.length+1;if(w<0)throw new Error("Ellipsis out of bounds");if(d=o.slice(a,a+w),this.hasEllipsis){if(this.ellipsisDims.length!==d.length||this.ellipsisDims.toString()!==d.toString())throw new Error("Ellipsis dimensions mismatch")}else if(r)this.hasEllipsis=!0,this.ellipsisDims=d;else throw new Error("Ellipsis must be specified in the LHS");for(let y=0;y<d.length;y++){let S=String.fromCharCode("0".charCodeAt(0)+y);h.addSymbol(S,g+y),this.addSymbol(S,o[a++],n)}}else h.addSymbol(v,g+(this.hasEllipsis?this.ellipsisDims.length-1:0)),this.addSymbol(v,o[a++],n)}),h}},Ki=e=>e+"_max",wd=(e,t,r,o,n)=>{let u=t.map((w,y)=>e[y]?w.length:w).map((w,y)=>V(`input${y}`,r,w)),d=D.size(n),a=Pe(n.length),p=a?n.length:n,h=K("output",r,p),v=[...o.symbolToInfo.keys()].filter(w=>!o.rhs.symbolToIndices.has(w)),g=w=>{let y=[],S="var prod = 1.0;",I="var sum = 0.0;",x="sum += prod;",_=[],B=[],E=[],z=[],T=o.symbolToInfo.size===o.rhs.symbolToIndices.size;o.symbolToInfo.forEach((U,L)=>{if(o.rhs.symbolToIndices.has(L)){let re=o.rhs.symbolToIndices.get(L)?.[0];re!==void 0&&o.lhs.forEach((R,q)=>{if(U.inputIndices.includes(q)){let pe=R.symbolToIndices.get(L);if(pe===void 0)throw new Error("Invalid symbol error");pe.forEach(J=>{y.push(`${u[q].indicesSet(`input${q}Indices`,J,h.indicesGet("outputIndices",re))}`)})}})}else o.lhs.forEach((re,R)=>{if(U.inputIndices.includes(R)){let q=re.symbolToIndices.get(L);if(q===void 0)throw new Error("Invalid symbol error");q.forEach(pe=>{_.push(`${u[R].indicesSet(`input${R}Indices`,pe,`${L}`)}`)}),z.push(`prod *= ${u[R].getByIndices(`input${R}Indices`)};`)}}),B.push(`for(var ${L}: u32 = 0; ${L} < uniforms.${Ki(L)}; ${L}++) {`),E.push("}")});let H=T?[...y,`let sum = ${u.map((U,L)=>U.getByIndices(`input${L}Indices`)).join(" * ")};`]:[...y,I,...B,..._,S,...z,x,...E];return`\n            ${w.registerUniforms(v.map(U=>({name:`${Ki(U)}`,type:"u32"}))).registerUniform("outputSize","u32").declareVariables(...u,h)}\n\n            ${w.mainStart()}\n            ${w.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n            var outputIndices = ${h.offsetToIndices("global_idx")};\n            ${u.map((U,L)=>`var input${L}Indices: ${u[L].type.indices};`).join(`\n`)}\n            ${H.join(`\n`)};\n            ${h.setByOffset("global_idx","sum")};\n          }`};return{name:"Einsum",shaderCache:{hint:o.equation,inputDependencies:e.map(w=>w?"rank":"dims")},getRunData:()=>{let w=v.filter(S=>o.symbolToInfo.has(S)).map(S=>({type:"uint32",data:o.symbolToInfo.get(S)?.dimValue||0}));w.push({type:"uint32",data:d});let y=t.filter((S,I)=>e[I]).map((S,I)=>[...Y(S)]).reduce((S,I)=>S.concat(I),w);return a&&y.push(...Y(n)),{outputs:[{dims:n,dataType:r}],dispatchGroup:{x:Math.ceil(d/64)},programUniforms:y}},getShaderSource:g}},Yi=(e,t)=>{let r=new Hn(e.inputs,t.equation),o=e.inputs.map((u,d)=>Pe(u.dims.length)),n=r.outputDims,s=e.inputs.map((u,d)=>u.dims);e.compute(wd(o,s,e.inputs[0].dataType,r,n))},Zi=e=>{let t=e.equation.replace(/\\s+/g,"");return Q({equation:t})}});var vd,Qi,$d,Sd,Ji,es=j(()=>{"use strict";Ve();ye();be();vd=e=>{if(!e||e.length!==2)throw new Error("Expand requires 2 input.");let t=e[0].dims,r=Array.from(e[1].getBigInt64Array(),Number),o=r.length<t.length?0:r.length-t.length,n=t.length<r.length?0:t.length-r.length;for(;o<r.length&&n<t.length;++o,++n)if(r[o]!==t[n]&&r[o]!==1&&t[n]!==1)throw new Error("Expand requires shape to be broadcastable to input")},Qi=(e,t)=>{let r=e.length-t.length,o=[];for(let n=0;n<r;++n)o.push(e[n]);for(let n=0;n<t.length;++n)o.push(t[n]===1?e[n+r]:t[n]);return o},$d=(e,t)=>e.length>t.length?Qi(e,t):Qi(t,e),Sd=e=>{let t=e[0].dims,r=Array.from(e[1].getBigInt64Array(),Number),o=$d(t,r),n=e[0].dataType,s=n===9?4:1,u=D.size(o)/s,d=Pe(t.length),a=Pe(o.length),p=v=>{let g=d?t.length:t,w=a?o.length:o,y=V("input",n,g,s),S=K("output",n,w,s),I;if(n===9){let x=(_,B,E="")=>`\n          let outputIndices${B} = ${S.offsetToIndices(`outputOffset + ${B}u`)};\n          let offset${B} = ${y.broadcastedIndicesToOffset(`outputIndices${B}`,S)};\n          let index${B} = offset${B} / 4u;\n          let component${B} = offset${B} % 4u;\n          ${_}[${B}] = ${E}(${y.getByOffset(`index${B}`)}[component${B}]);\n        `;I=`\n        let outputOffset = global_idx * ${s};\n        var data = vec4<u32>(0);\n        ${x("data",0,"u32")}\n        ${x("data",1,"u32")}\n        ${x("data",2,"u32")}\n        ${x("data",3,"u32")}\n        ${S.setByOffset("global_idx","data")}\n      }`}else I=`\n        let outputIndices = ${S.offsetToIndices("global_idx")};\n        let inputOffset = ${y.broadcastedIndicesToOffset("outputIndices",S)};\n        ${S.setByOffset("global_idx",y.getByOffset("inputOffset"))}\n      }`;return`\n    ${v.registerUniform("vec_size","u32").declareVariables(y,S)}\n    ${v.mainStart()}\n    ${v.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}\n    ${I}`},h=[{type:"uint32",data:u}];return d&&h.push(...Y(t)),a&&h.push(...Y(o)),{name:"Expand",shaderCache:{hint:`${o.length}`,inputDependencies:[d?"rank":"dims"]},getShaderSource:p,getRunData:()=>({outputs:[{dims:o,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(u/64)},programUniforms:h})}},Ji=e=>{vd(e.inputs),e.compute(Sd(e.inputs),{inputs:[0]})}});var xd,Cd,ts,rs,ns=j(()=>{"use strict";Ve();ye();ke();be();xd=e=>{if(!e||e.length!==2)throw new Error("Gather requires 2 inputs.")},Cd=(e,t)=>{let r=e[0].dims,o=e[1].dims,n=r.length,s=D.normalizeAxis(t.axis,n),u=r.slice(0);u.splice(s,1,...o);let d=r[s],a=e[0].dataType===9?4:1,p=D.size(u)/a,h=Pe(e[0].dims.length),v=h?e[0].dims.length:e[0].dims,g=Pe(e[1].dims.length),w=g?e[1].dims.length:e[1].dims,y=Pe(u.length),S=y?u.length:u,I=[{type:"uint32",data:p},{type:"int32",data:d},{type:"uint32",data:s}];h&&I.push(...Y(e[0].dims)),g&&I.push(...Y(e[1].dims)),y&&I.push(...Y(u));let x=[];x.push(h?"rank":"dims"),x.push(g?"rank":"dims");let _=B=>{let E=V("data",e[0].dataType,v,a),z=V("inputIndices",e[1].dataType,w),T=K("output",e[0].dataType,S,a),H=L=>{let re=o.length,R=`var indicesIndices${L}  = ${z.type.indices}(0);`;for(let q=0;q<re;q++)R+=`${re>1?`indicesIndices${L}[${q}]`:`indicesIndices${L}`} = ${u.length>1?`outputIndices${L}[uniforms.axis + ${q}]`:`outputIndices${L}`};`;R+=`\n          var idx${L} = ${z.getByIndices(`indicesIndices${L}`)};\n          if (idx${L} < 0) {\n            idx${L} = idx${L} + uniforms.axisDimLimit;\n          }\n          var dataIndices${L} = ${E.type.indices}(0);\n        `;for(let q=0,pe=0;q<n;q++)q===s?(R+=`${n>1?`dataIndices${L}[${q}]`:`dataIndices${L}`} = u32(idx${L});`,pe+=re):(R+=`${n>1?`dataIndices${L}[${q}]`:`dataIndices${L}`} = ${u.length>1?`outputIndices${L}[${pe}]`:`outputIndices${L}`};`,pe++);return R},U;if(e[0].dataType===9){let L=(re,R,q="")=>`\n          let outputIndices${R} = ${T.offsetToIndices(`outputOffset + ${R}u`)};\n          ${H(R)};\n          let offset${R} = ${E.indicesToOffset(`dataIndices${R}`)};\n          let index${R} = offset${R} / 4u;\n          let component${R} = offset${R} % 4u;\n          ${re}[${R}] = ${q}(${E.getByOffset(`index${R}`)}[component${R}]);\n        `;U=`\n        let outputOffset = global_idx * ${a};\n        var value = vec4<u32>(0);\n        ${L("value",0,"u32")}\n        ${L("value",1,"u32")}\n        ${L("value",2,"u32")}\n        ${L("value",3,"u32")}\n        ${T.setByOffset("global_idx","value")}\n      `}else U=`\n      let outputIndices = ${T.offsetToIndices("global_idx")};\n      ${H("")};\n      let value = ${E.getByIndices("dataIndices")};\n      ${T.setByOffset("global_idx","value")};\n      `;return`\n      ${B.registerUniform("outputSize","u32").registerUniform("axisDimLimit","i32").registerUniform("axis","u32").declareVariables(E,z,T)}\n      ${B.mainStart()}\n        ${B.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n        ${U}\n      }`};return{name:"Gather",shaderCache:{hint:t.cacheKey,inputDependencies:x},getRunData:()=>({outputs:[{dims:u,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(p/64)},programUniforms:I}),getShaderSource:_}},ts=e=>Q({axis:e.axis}),rs=(e,t)=>{let r=e.inputs;xd(r),e.compute(Cd(e.inputs,t))}});var _d,Id,os,as,is=j(()=>{"use strict";ye();ke();be();_d=e=>{if(!e||e.length!==2)throw new Error("GatherElements requires 2 inputs.");if(e[0].dims.length<1)throw new Error("GatherElements requires that the data input be rank >= 1.");if(e[0].dims.length!==e[1].dims.length)throw new Error(`GatherElements requires that the data input and\n                     indices input tensors be of same rank.`)},Id=(e,t)=>{let r=e[0].dims,o=e[0].dataType,n=r.length,s=e[1].dims,u=e[1].dataType,d=D.normalizeAxis(t.axis,n),a=r[d],p=s.slice(0),h=D.size(p),v=V("input",o,n),g=V("indicesInput",u,s.length),w=K("output",o,p.length),y=[{type:"uint32",data:h},{type:"int32",data:a},{type:"uint32",data:d}];return y.push(...Y(r)),y.push(...Y(s)),y.push(...Y(p)),{name:"GatherElements",shaderCache:{inputDependencies:["rank","rank"]},getRunData:()=>({outputs:[{dims:p,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(h/64)},programUniforms:y}),getShaderSource:x=>`\n      ${x.registerUniform("outputSize","u32").registerUniform("axisDimLimit","i32").registerUniform("axis","u32").declareVariables(v,g,w)}\n      ${x.mainStart()}\n      ${x.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n\n      let outputIndices = ${w.offsetToIndices("global_idx")};\n\n      var idx = ${g.getByOffset("global_idx")};\n      if (idx < 0) {\n        idx = idx + uniforms.axisDimLimit;\n      }\n      var inputIndices = ${v.type.indices}(outputIndices);\n      ${v.indicesSet("inputIndices","uniforms.axis","u32(idx)")};\n      let value = ${v.getByIndices("inputIndices")};\n\n      ${w.setByOffset("global_idx","value")};\n  }`}},os=e=>Q({axis:e.axis}),as=(e,t)=>{let r=e.inputs;_d(r),e.compute(Id(e.inputs,t))}});var Ad,Td,Ed,ss,us,ls=j(()=>{"use strict";ye();ke();be();Ad=e=>{if(!e)throw new Error("Input is missing");if(e.length<2||e.length>3)throw new Error("Invaid input number.");if(e.length===3&&e[2].dims.length>2)throw new Error("Invalid input shape of C");if(e[0].dataType!==e[1].dataType||e.length===3&&e[0].dataType!==e[2].dataType)throw new Error("Input types are mismatched")},Td=(e,t,r)=>{if(r.length===0)return"0u";let o=r.length===1&&e!==1||r.length===2&&r[0]!==e,n=r[r.length-1]!==t,s="0u";return o||(s+=`+ m * ${r[r.length-1]}u`),n||(s+="+n"),s},Ed=(e,t)=>{let r=e[0].dims.slice(),o=e[1].dims.slice(),[n,s,u]=Mr.getShapeOfGemmResult(r,t.transA,o,t.transB,e.length===3?e[2].dims:void 0),d=[n,s];if(!d)throw new Error("Can\'t use gemm on the given tensors");let a=D.size(d),p="";t.transA&&t.transB?p="value += a[k * M + m] * b[n * K + k];":t.transA&&!t.transB?p="value += a[k * M + m] * b[k * N + n];":!t.transA&&t.transB?p="value += a[m * K + k] * b[n * K + k];":!t.transA&&!t.transB&&(p="value += a[m * K + k] * b[k * N + n];");let h=Te(e[0].dataType),v=t.alpha===1?"":"value *= alpha;",g=e.length===3?`value += beta * c[${Td(n,s,e[2].dims)}];`:"",w=[`@group(0) @binding(0) var<storage, read> a : array<${h}>;`,`@group(0) @binding(1) var<storage, read> b : array<${h}>;`];e.length===3&&w.push(`@group(0) @binding(2) var<storage, read> c : array<${h}>;`);let y=S=>`\n  const M: u32 = ${n}u;\n  const N: u32 = ${s}u;\n  const K: u32 = ${u}u;\n  const alpha = ${h}(${t.alpha});\n  const beta = ${h}(${t.beta});\n\n  ${w.join(`\n`)}\n  @group(0) @binding(${e.length}) var<storage, read_write> output : array<${h}>;\n\n  ${S.mainStart()}\n    ${S.guardAgainstOutOfBoundsWorkgroupSizes(a)}\n\n    let m = global_id.x / N;\n    let n = global_id.x % N;\n\n    var value = ${h}(0);\n    for (var k: u32 = 0u; k<${u}u; k++) {\n      ${p}\n    }\n\n    ${v}\n    ${g}\n    output[global_id.x] = value;\n\n  }`;return{name:"Gemm",shaderCache:{hint:t.cacheKey},getRunData:()=>({outputs:[{dims:d,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(a/64)}}),getShaderSource:y}},ss=(e,t)=>{Ad(e.inputs),e.compute(Ed(e.inputs,t))},us=e=>Q(e)});var Od,kd,Pd,Rd,ds,cs,ps=j(()=>{"use strict";Ve();ye();ke();be();Od={name:"InstanceNormalization"},kd=(e,t)=>{let r=e[0].dims,o=r,n=2,s=D.sizeToDimension(r,n),u=D.sizeFromDimension(r,n),d=r[1],a=V("x",e[0].dataType,[r[0],r[1],u]),p=V("scale",e[1].dataType,e[1].dims),h=V("bias",e[2].dataType,e[2].dims),v=K("output",e[0].dataType,[r[0],r[1],u]),g=[a,p,h,v],w=a.type.value,y=64,S=I=>`\n\n  const C: u32 = ${d};\n  const normSize: u32 = ${u};\n  const epsilon: f32 = ${t.epsilon};\n  var<workgroup> meanShared : ${w};\n  var<workgroup> squaredNormShared : ${w};\n  var<workgroup> workgroupShared : array<${w}, ${y}>;\n  const workgroupSize = ${y}u;\n  ${I.declareVariables(...g)}\n  ${I.mainStart(y)}\n    let norm = global_idx / workgroupSize;\n    let batch = norm / C;\n    let channel = norm % C;\n    let localIndex = local_id.x;\n\n    // initialize workgroup memory\n    var initial: ${w} = 0;\n    for (var h = localIndex; h < normSize; h += workgroupSize) {\n      initial = initial + ${a.get("batch","channel","h")};\n    }\n    workgroupShared[localIndex] = initial;\n    workgroupBarrier();\n\n    // Calculate the mean of current channel data.\n    for (var currSize = workgroupSize >> 1;  currSize > 0; currSize = currSize >> 1) {\n      if (localIndex < currSize) {\n        workgroupShared[localIndex] = workgroupShared[localIndex] + workgroupShared[localIndex + currSize];\n      }\n      workgroupBarrier();\n    }\n    if (localIndex == 0) {\n      meanShared = workgroupShared[0] / ${w}(normSize);\n    }\n    workgroupBarrier();\n\n    // reinitialize workgroup memory.\n    initial = 0;\n    for (var h = localIndex; h < normSize; h += workgroupSize) {\n      let deviation =  ${a.get("batch","channel","h")} - meanShared;\n      initial = initial + deviation * deviation;\n    }\n    workgroupShared[localIndex] = initial;\n    workgroupBarrier();\n\n    // Calculate the sum of square of deviation of current channel data.\n    for (var currSize = workgroupSize >> 1;  currSize > 0; currSize = currSize >> 1) {\n      if (localIndex < currSize) {\n        workgroupShared[localIndex] = workgroupShared[localIndex] + workgroupShared[localIndex + currSize];\n      }\n      workgroupBarrier();\n    }\n    if (localIndex == 0) {\n      squaredNormShared = workgroupShared[0];\n    }\n    workgroupBarrier();\n\n    let invStdDev = 1 / sqrt(squaredNormShared / ${w}(normSize) + epsilon);\n    let channelScale = invStdDev * ${p.getByOffset("channel")};\n    let channelShift = ${h.getByOffset("channel")} - meanShared * channelScale;\n    for (var h = localIndex; h < normSize; h += workgroupSize) {\n      let value = ${a.get("batch","channel","h")} * channelScale + channelShift;\n      ${v.set("batch","channel","h","value")};\n    }\n  }`;return{...Od,shaderCache:{hint:t.cacheKey},getRunData:()=>({outputs:[{dims:o,dataType:e[0].dataType}],dispatchGroup:{x:s}}),getShaderSource:S}},Pd=(e,t,r,o,n,s,u,d)=>{let a=Ye(u),p=V("input",t.dataType,t.dims,a),h=V("scale",r.dataType,r.dims,a),v=V("bias",o.dataType,o.dims,a),g=64,w=a===1?"vec2f":`mat2x${a}f`,y=a===1?"f32":`vec${a}f`,S=(z,T)=>`${w}(${z}, ${T})`,I=n*u/a,x=Math.ceil(s/g),_=z=>`\n  const H: u32 = ${s};\n  const C: u32 = ${u/a};\n  const imageSize: u32 = ${s*u/a};\n\n  ${z.declareVariables(p)}\n  @group(0) @binding(1) var<storage, read_write> output : array<${w}>;\n\n  ${z.mainStart(g)}\n    let currentImageNumber = global_idx / ${g} / C;\n    let currentChannelNumber = (global_idx / ${g}) % C;\n    let wgId = global_idx % ${g};\n    let wgOffset = wgId * ${x};\n    if (wgOffset >= H) {\n        return;\n    }\n    let wgMax = min(wgOffset + ${x}, H);\n\n    let offset = currentImageNumber * imageSize + currentChannelNumber;\n    var sum = ${Le("f32",a)};\n    var squaredSum = ${Le("f32",a)};\n    for (var i: u32 = wgOffset; i < wgMax; i++) {\n        let value = ${y}(input[offset + i * C]);\n        sum += value;\n        squaredSum += value * value;\n    }\n    output[global_idx] = ${S("sum","squaredSum")};\n  }`,B=e.compute({name:"InstanceNormComputeMean",shaderCache:{hint:JSON.stringify({components:a,n,h:s,c:u})},getRunData:()=>({outputs:[{dims:[n,u,g,2],dataType:1}],dispatchGroup:{x:n*u/a}}),getShaderSource:_},{inputs:[t],outputs:[-1]})[0],E=z=>`\n  const H: u32 = ${s};\n  const C: u32 = ${u/a};\n  const imageSize: u32 = ${g*u/a};\n  const epsilon: f32 = ${d};\n\n  @group(0) @binding(0) var<storage, read> input : array<${w}>;\n  @group(0) @binding(1) var<storage, read> scale : array<${h.type.storage}>;\n  @group(0) @binding(2) var<storage, read> bias : array<${v.type.storage}>;\n  @group(0) @binding(3) var<storage, read_write> output : array<${w}>;\n\n  ${z.mainStart()}\n    ${z.guardAgainstOutOfBoundsWorkgroupSizes(I)}\n    let currentImageNumber = global_idx / C;\n    let currentChannelNumber = global_idx % C;\n\n    let offset = currentImageNumber * imageSize;\n    var sum = ${Le("f32",a)};\n    var squaredSum = ${Le("f32",a)};\n    for (var i: u32 = 0; i < ${g}; i++) {\n        let value = input[offset + i + currentChannelNumber * ${g}];\n        sum += value[0];\n        squaredSum += value[1];\n    }\n    sum = sum / f32(H);\n    squaredSum = squaredSum / f32(H);\n    let invStdDev = 1 / sqrt(squaredSum - sum * sum + epsilon);\n    let channelScale = invStdDev * ${y}(scale[currentChannelNumber]);\n    let channelShift = ${y}(bias[currentChannelNumber]) - sum * channelScale;\n\n    output[global_idx] = ${S("channelScale","channelShift")};\n  }`;return e.compute({name:"InstanceNormComputeChannelScaleShift",shaderCache:{hint:JSON.stringify({components:a,n,h:s,c:u,epsilon:d})},getRunData:()=>({outputs:[{dims:[n,u,2],dataType:1}],dispatchGroup:{x:Math.ceil(I/64)}}),getShaderSource:E},{inputs:[B,r,o],outputs:[-1]})[0]},Rd=(e,t,r)=>{let o=t[0].dims,n=o,s=o[0],u=o[o.length-1],d=D.sizeFromDimension(o,1)/u,a=Ye(u),p=D.size(n)/a,h=V("input",t[0].dataType,t[0].dims,a),v=K("output",t[0].dataType,n,a),g=Te(t[0].dataType),w=a===1?"vec2f":`mat2x${a}f`,y=a===1?g:`vec${a}<${g}>`,S=Pd(e,t[0],t[1],t[2],s,d,u,r.epsilon),I=x=>`\n  const H: u32 = ${d};\n  const C: u32 = ${u/a};\n\n  @group(0) @binding(0) var<storage, read> input : array<${h.type.storage}>;\n  @group(0) @binding(1) var<storage, read> scaleInput : array<${w}>;\n  @group(0) @binding(2) var<storage, read_write> output : array<${v.type.storage}>;\n\n  ${x.mainStart()}\n    let currentImageNumber = global_idx / (C * H);\n    let currentChannelNumber = global_idx % C;\n\n    let scaleOffset = currentImageNumber * C + currentChannelNumber;\n    let scale = scaleInput[scaleOffset];\n    output[global_idx] = fma(input[global_idx], ${y}(scale[0]), ${y}(scale[1]));\n  }`;e.compute({name:"InstanceNormalization",shaderCache:{hint:`${r.cacheKey}`},getRunData:()=>({outputs:[{dims:n,dataType:t[0].dataType}],dispatchGroup:{x:Math.ceil(p/64)}}),getShaderSource:I},{inputs:[t[0],S]})},ds=e=>Q({epsilon:e.epsilon,format:e.format}),cs=(e,t)=>{t.format==="NHWC"?Rd(e,e.inputs,t):e.compute(kd(e.inputs,t))}});var Bd,Md,ms,fs,hs=j(()=>{"use strict";Ve();ye();ke();be();Bd=e=>{if(!e||e.length<2)throw new Error("layerNorm requires at least 2 inputs.")},Md=(e,t,r)=>{let o=e[0].dims,n=e[1],s=e[2],u=o,d=D.normalizeAxis(t.axis,o.length),a=D.sizeToDimension(o,d),p=D.sizeFromDimension(o,d),h=D.size(n.dims),v=s?D.size(s.dims):0;if(h!==p||s&&v!==p)throw new Error(`Size of X.shape()[axis:] == ${p}.\n       Size of scale and bias (if provided) must match this.\n       Got scale size of ${h} and bias size of ${v}`);let g=[];for(let E=0;E<o.length;++E)E<d?g.push(o[E]):g.push(1);let w=Ye(p),y=Te(e[0].dataType),S=[V("x",e[0].dataType,e[0].dims,w),V("scale",n.dataType,n.dims,w)];s&&S.push(V("bias",s.dataType,s.dims,w)),S.push(K("output",e[0].dataType,u,w));let I=r>1,x=r>2;I&&S.push(K("meanDataOutput",1,g)),x&&S.push(K("invStdOutput",1,g));let _=E=>`\n  const normSize: f32 = ${p};\n  const normSizeVectorized: u32 = ${p/w};\n  const epsilon: f32 = ${t.epsilon};\n\n  ${E.declareVariables(...S)}\n  ${E.mainStart()}\n    ${E.guardAgainstOutOfBoundsWorkgroupSizes(a)}\n    let offset = global_idx * normSizeVectorized;\n    var meanVector = ${Le("f32",w)};\n    var meanSquareVector = ${Le("f32",w)};\n\n    for (var h: u32 = 0u; h < normSizeVectorized; h++) {\n      let value = ${Je(y,w,"x[h + offset]")};\n      meanVector += value;\n      meanSquareVector += value * value;\n    }\n    let mean = ${et("meanVector",w)} / normSize;\n    let meanSquare = sqrt(${et("meanSquareVector",w)} \n      / normSize - mean * mean + epsilon);\n\n    for (var j: u32 = 0; j < normSizeVectorized; j++) {\n      let f32input = ${Je(y,w,"x[j + offset]")};\n      let f32scale = ${Je(y,w,"scale[j]")};\n      output[j + offset] = ${S[0].type.value}((f32input - mean) / meanSquare * f32scale\n        ${s?`+ ${Je(y,w,"bias[j]")}`:""}\n      );\n    }\n\n    ${I?"meanDataOutput[global_idx] = mean":""};\n    ${x?"invStdOutput[global_idx] = 1 / meanSquare":""};\n  }`,B=[{dims:u,dataType:e[0].dataType}];return I&&B.push({dims:g,dataType:1}),x&&B.push({dims:g,dataType:1}),{name:"LayerNormalization",shaderCache:{hint:`${t.cacheKey}|${r}|${e.length}`},getRunData:()=>({outputs:B,dispatchGroup:{x:Math.ceil(a/64)}}),getShaderSource:_}},ms=e=>Q({axis:e.axis,epsilon:e.epsilon}),fs=(e,t)=>{Bd(e.inputs),e.compute(Md(e.inputs,t,e.outputCount))}});var Dd,gs,ys=j(()=>{"use strict";ye();dr();Dd=e=>{if(!e||e.length!==2)throw new Error("MatMul requires 2 inputs.");if(e[0].dims[e[0].dims.length-1]!==e[1].dims[e[1].dims.length-2])throw new Error("shared dimension does not match.")},gs=e=>{Dd(e.inputs);let t=it.calcShape(e.inputs[0].dims,e.inputs[1].dims,!0);if(!t)throw new Error("Can\'t use matmul on the given tensors");e.compute(Xr(e.inputs,{activation:"",activationCacheKey:""},t))}});var zd,ws,bs,Vd,Gn,vs,$s=j(()=>{"use strict";ye();ke();Rr();On();be();Wt();zd=(e,t)=>{let r=e[0],o=e[1],n=e[2],s=e[3],u=e[4],d=e[5],a=e[6],p=e[7];if(r.dims.length!==3&&r.dims.length!==5)throw new Error("Input query is expected to have 3 or 5 dimensions");let h=!1,v=r.dims[0],g=r.dims[1],w=r.dims.length===3?h?r.dims[2]/3:r.dims[2]:t.numHeads*r.dims[4],y=g,S=0,I=0,x=Math.floor(w/t.numHeads);if(a&&p){if(a.dims.length!==4)throw new Error(\'Input "past_key" is expected to have 4 dimensions\');if(p.dims.length!==4)throw new Error(\'Input "past_value" is expected to have 4 dimensions\');S=a.dims[2],I=a.dims[2]}else if(a||p)throw new Error(\'Input "past_key" and "past_value" shall be both present or both absent\');let _;if(o){if(r.dims.length!==3)throw new Error(\'Input "query" is expected to have 3 dimensions when key is given\');if(o.dims.length<3||o.dims.length>5)throw new Error(\'Input "key" is expected to have 3, 4, or 5 dimensions\');if(r.dims[0]!==o.dims[0])throw new Error(\'Input "query" and "key" shall have same dim 0 (batch size)\');if(o.dims.length===3){if(o.dims[2]!==r.dims[2])throw new Error(\'Input "query" and "key" shall have same dim 2 (hidden_size)\');_=2,y=o.dims[1]}else if(o.dims.length===5){if(o.dims[2]!==t.numHeads||o.dims[3]!==2||o.dims[4]!==x)throw new Error(\'Expect "key" shape (batch_size, kv_sequence_length, num_heads, 2, head_size) for packed kv\');if(n)throw new Error(\'Expect "value" be none when "key" has packed kv format.\');_=5,y=o.dims[1]}else{if(o.dims[1]!==t.numHeads||o.dims[3]!==x)throw new Error(\'Expect "key" shape (batch_size, num_heads, kv_sequence_length, head_size) for past_key\');_=0,y=o.dims[2]}}else{if(r.dims.length!==3&&r.dims.length!==5)throw new Error(\'Input "query" is expected to have 3 or 5 dimensions when key is empty\');if(r.dims.length===5&&(r.dims[2]!==t.numHeads||r.dims[3]!==3))throw new Error(\'Expect "query" shape (batch_size, kv_sequence_length, num_heads, 3, head_size) for packed kv\');_=3}if(s){if(s.dims.length!==1)throw new Error(\'Input "bias" is expected to have 1 dimension\');if(n&&r.dims.length===5&&r.dims[3]===2)throw new Error("bias is not allowed for packed kv.")}let B=0;if(u){B=8;let U=u.dims;throw U.length===1?U[0]===v?B=1:U[0]===3*v+2&&(B=3):U.length===2&&U[0]===v&&U[1]===y&&(B=5),B===8?new Error(\'Input "key_padding_mask" shape shall be (batch_size) or (batch_size, kv_sequence_length)\'):new Error("Mask not supported")}let E=!1,z=w;if(n){if(n.dims.length!==3&&n.dims.length!==4)throw new Error(\'Input "value" is expected to have 3 or 4 dimensions\');if(r.dims[0]!==n.dims[0])throw new Error(\'Input "query" and "value" shall have same dim 0 (batch_size)\');if(n.dims.length===3){if(y!==n.dims[1])throw new Error(\'Input "key" and "value" shall have the same dim 1 (kv_sequence_length)\');z=n.dims[2]}else{if(y!==n.dims[2])throw new Error(\'Input "past_key" and "past_value" shall have the same dim 2 (kv_sequence_length)\');z=n.dims[1]*n.dims[3],E=!0}}let T=S+y,H=!1;if(u)throw new Error("Key padding mask is not supported");if(d)throw new Error("extraAddQk is not supported");if(a)throw new Error("pastKey is not supported");if(p)throw new Error("pastValue is not supported");return{batchSize:v,sequenceLength:g,pastSequenceLength:S,kvSequenceLength:y,totalSequenceLength:T,maxSequenceLength:I,inputHiddenSize:0,hiddenSize:w,vHiddenSize:z,headSize:x,vHeadSize:Math.floor(z/t.numHeads),numHeads:t.numHeads,isUnidirectional:!1,pastPresentShareBuffer:!1,maskFilterValue:t.maskFilterValue,maskType:B,scale:t.scale,broadcastResPosBias:H,passPastInKv:E,qkvFormat:_}},ws=e=>Q({...e}),bs=Q({perm:[0,2,1,3]}),Vd=(e,t,r,o,n,s,u)=>{let d=[o,n,s],a=D.size(d),p=Te(t.dataType),h=v=>`\n  const biasOffset = ${u}u;\n  const hiddenSize = ${s}u;\n\n  @group(0) @binding(0) var<storage, read> qkv: array<${p}>;\n  @group(0) @binding(1) var<storage, read> bias: array<${p}>;\n  @group(0) @binding(2) var<storage, read_write> qkv_with_bias: array<${p}>;\n\n  ${v.mainStart()}\n    ${v.guardAgainstOutOfBoundsWorkgroupSizes(a)}\n    let biasOffsetIdx = (global_idx % hiddenSize) + biasOffset;\n\n    qkv_with_bias[global_idx] = qkv[global_idx] + bias[biasOffsetIdx];\n  }`;return e.compute({name:"MultiHeadAttentionAddBias",shaderCache:{hint:JSON.stringify({batchSize:o,sequenceLength:n,hiddenSize:s,biasOffset:u})},getRunData:()=>({outputs:[{dims:d,dataType:t.dataType,gpuDataType:0}],dispatchGroup:{x:Math.ceil(a/64)}}),getShaderSource:h},{inputs:[t,r],outputs:[-1]})[0]},Gn=(e,t,r,o,n,s,u,d)=>{let a=s;if(u){if(o===1)throw new Error("AddBiasReshape is not implemented. Please export your model with packed QKV or KV");return a=Vd(e,s,u,t,o,r*n,d),a=a.reshape([t,o,r,n]),e.compute(tt(a,bs.perm),{inputs:[a],outputs:[-1]})[0]}else return s.dims.length===3&&(a=s.reshape([t,o,r,n])),e.compute(tt(a,bs.perm),{inputs:[a],outputs:[-1]})[0]},vs=(e,t)=>{let r=zd(e.inputs,t);if(e.inputs[0].dims.length===5)throw new Error("Packed QKV is not implemented");if(e.inputs[1]?.dims.length===5)throw new Error("Packed KV is not implemented");let o=e.inputs[1]&&e.inputs[2]&&e.inputs[1].dims.length===4&&e.inputs[2].dims.length===4,n=Gn(e,r.batchSize,r.numHeads,r.sequenceLength,r.headSize,e.inputs[0],e.inputs[3],0);if(o)return Ur(e,n,e.inputs[1],e.inputs[2],e.inputs[4],void 0,void 0,void 0,e.inputs[5],r,t);let s=Gn(e,r.batchSize,r.numHeads,r.kvSequenceLength,r.headSize,e.inputs[1],e.inputs[3],r.hiddenSize),u=Gn(e,r.batchSize,r.numHeads,r.kvSequenceLength,r.vHeadSize,e.inputs[2],e.inputs[3],2*r.hiddenSize);Ur(e,n,s,u,e.inputs[4],void 0,e.inputs[6],e.inputs[7],e.inputs[5],r,t)}});var Wd,Ud,Nd,Hd,Gd,Ld,Fd,qd,jd,Ss,xs,Cs=j(()=>{"use strict";Ve();ye();ke();be();Wd=e=>{if(!e||e.length<1)throw new Error("Too few inputs");if(e[0].dataType!==1)throw new Error("Input type must be float.");if(e.length>=2){let t=e[0].dims.length*2===e[1].dims[0];if(e.length===4&&(t=e[3].dims[0]*2===e[1].dims[0]),!t)throw new Error("The pads should be a 1D tensor of shape [2 * input_rank] or [2 * num_axes].")}},Ud=(e,t,r,o,n,s)=>{let u=t.length,d="";for(let a=u-1;a>=0;--a)d+=`\n            k = i32(${e.indicesGet("indices",a)}) - ${o[a]};\n            if (k < 0) {\n              break;\n            }\n            if (k >= ${t[a]}) {\n              break;\n            }\n            offset += k * ${r[a]};\n        `;return`\n          value = ${n}(${s});\n          for (var i = 0; i < 1; i++) {\n            var offset = 0;\n            var k = 0;\n            ${d}\n            value = x[offset];\n          }\n      `},Nd=(e,t,r,o)=>{let n=t.length,s="";for(let u=n-1;u>=0;--u)s+=`\n                k = i32(${e.indicesGet("indices",u)}) - ${o[u]};\n                if (k < 0) {\n                  k = -k;\n                }\n                {\n                  let _2n_1 = ${2*(t[u]-1)};\n                  k = k % _2n_1;\n                  if(k >= ${t[u]}) {\n                    k = _2n_1 - k;\n                  }\n                }\n                offset += k * ${r[u]};\n            `;return`\n              var offset = 0;\n              var k = 0;\n              ${s}\n              value = x[offset];\n          `},Hd=(e,t,r,o)=>{let n=t.length,s="";for(let u=n-1;u>=0;--u)s+=`\n                k = i32(${e.indicesGet("indices",u)}) - ${o[u]};\n                if (k < 0) {\n                  k = 0;\n                }\n                if (k >= ${t[u]}) {\n                  k = ${t[u]-1};\n                }\n                offset += k * ${r[u]};\n            `;return`\n              var offset = 0;\n              var k = 0;\n              ${s}\n              value = x[offset];\n          `},Gd=(e,t,r,o)=>{let n=t.length,s="";for(let u=n-1;u>=0;--u)s+=`\n                k = i32(${e.indicesGet("indices",u)}) - ${o[u]};\n                if (k < 0)  {\n                  k += ${t[u]};\n                }\n                if (k >= ${t[u]}) {\n                  k -= ${t[u]};\n                }\n                offset += k * ${r[u]};\n            `;return`\n              var offset = 0;\n              var k = 0;\n              ${s}\n              value = x[offset];\n          `},Ld=(e,t,r,o,n)=>{switch(o.mode){case 0:return Ud(e,t,r,o.pads,n,o.value);case 1:return Nd(e,t,r,o.pads);case 2:return Hd(e,t,r,o.pads);case 3:return Gd(e,t,r,o.pads);default:throw new Error("Invalid mode")}},Fd=(e,t,r,o)=>{let n=t[0].dims,s=D.padShape(n.slice(),r.pads),u=D.size(s),d=D.computeStrides(n),a=K("output",t[0].dataType,s),p=V("x",t[0].dataType,n),h=Ld(a,n,d,r,o);return`\n              ${e.declareVariables(p,a)}\n              ${e.mainStart()}\n              ${e.guardAgainstOutOfBoundsWorkgroupSizes(u)}\n\n              let indices = ${a.offsetToIndices("global_idx")};\n\n              var value = ${o}(0);\n              ${h}\n              output[global_idx] = value;\n          }`},qd=(e,t)=>{let r=D.padShape(e[0].dims.slice(),t.pads);return{name:"Pad",shaderCache:{hint:t.cacheKey},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(D.size(r)/64)}}),getShaderSource:o=>Fd(o,e,t,"f32")}},jd=(e,t)=>{if(e.length>1){let r=e[1].getBigInt64Array(),o=e.length>=3&&e[2].data?e[2].getFloat32Array()[0]:0,n=e[0].dims.length,s=new Int32Array(2*n).fill(0);if(e.length>=4){let d=e[3].getBigInt64Array();for(let a=0;a<d.length;a++)s[Number(d[a])]=Number(r[a]),s[Number(d[a])+n]=Number(r[a+d.length])}else r.forEach((d,a)=>s[Number(a)]=Number(d));let u=[];return s.forEach(d=>u.push(d)),Q({mode:t.mode,value:o,pads:u})}else return t},Ss=(e,t)=>{Wd(e.inputs);let r=jd(e.inputs,t);e.compute(qd(e.inputs,r),{inputs:[0]})},xs=e=>{let t=e.mode,r=e.value,o=e.pads;return Q({mode:t,value:r,pads:o})}});var Jr,_s,Is,As,Ts,Es,Os,ks,Ps,Rs,Bs,Ms,Ds,zs,Vs,Ws,Us=j(()=>{"use strict";Lr();ye();ke();be();Jr=e=>{if(Ut.webgpu.validateInputContent&&(!e||e.length!==1))throw new Error("Pool ops requires 1 input.")},_s=(e,t,r)=>{let o=t.format==="NHWC",n=e.dims.slice();o&&n.splice(1,0,n.pop());let s=Object.hasOwnProperty.call(t,"dilations"),u=t.kernelShape.slice(),d=t.strides.slice(),a=s?t.dilations.slice():[],p=t.pads.slice();Et.adjustPoolAttributes(r,n,u,d,a,p);let h=Et.computePoolOutputShape(r,n,d,a,u,p,t.autoPad),v=Object.assign({},t);s?Object.assign(v,{kernelShape:u,strides:d,pads:p,dilations:a,cacheKey:t.cacheKey}):Object.assign(v,{kernelShape:u,strides:d,pads:p,cacheKey:t.cacheKey});let g=h.slice();return g.push(g.splice(1,1)[0]),[v,o?g:h]},Is=(e,t)=>{let r=t.format==="NHWC",o=D.size(e),n=D.size(t.kernelShape),s=[{type:"uint32",data:o},{type:"uint32",data:n}],u=[{name:"outputSize",type:"u32"},{name:"kernelSize",type:"u32"}];if(t.kernelShape.length<=2){let d=t.kernelShape[t.kernelShape.length-1],a=t.strides[t.strides.length-1],p=t.pads[t.pads.length/2-1],h=t.pads[t.pads.length-1],v=!!(p+h);s.push({type:"uint32",data:d},{type:"uint32",data:a},{type:"uint32",data:p},{type:"uint32",data:h}),u.push({name:"kw",type:"u32"},{name:"sw",type:"u32"},{name:"pwStart",type:"u32"},{name:"pwEnd",type:"u32"});let g=!1;if(t.kernelShape.length===2){let w=t.kernelShape[t.kernelShape.length-2],y=t.strides[t.strides.length-2],S=t.pads[t.pads.length/2-2],I=t.pads[t.pads.length-2];g=!!(S+I),s.push({type:"uint32",data:w},{type:"uint32",data:y},{type:"uint32",data:S},{type:"uint32",data:I}),u.push({name:"kh",type:"u32"},{name:"sh",type:"u32"},{name:"phStart",type:"u32"},{name:"phEnd",type:"u32"})}return[s,u,!0,v,g]}else{if(r)throw new Error("Pooling with kernelShape.length > 2 is not supported for NHWC format.");let d=D.computeStrides(t.kernelShape);s.push({type:"uint32",data:d},{type:"uint32",data:t.pads},{type:"uint32",data:t.strides}),u.push({name:"kernelStrides",type:"u32",length:d.length},{name:"pads",type:"u32",length:t.pads.length},{name:"strides",type:"u32",length:t.strides.length});let a=t.pads.reduce((p,h)=>p+h);return[s,u,!!a,!1,!1]}},As=(e,t,r,o,n,s,u,d,a,p,h,v)=>{let g=n.format==="NHWC",w=t.type.value,y=K("output",t.type.tensor,o);if(n.kernelShape.length<=2){let S="",I="",x="",_=r-(g?2:1);if(h===!0?S=`\n                for (var i: u32 = 0u; i < uniforms.kw; i++) {\n                  xIndices[${_}] = indices[${_}] * uniforms.sw - uniforms.pwStart + i;\n                  if (xIndices[${_}] < 0 || xIndices[${_}]\n                      >= uniforms.x_shape[${_}]) {\n                    pad++;\n                    continue;\n                  }\n                  let x_val = x[${t.indicesToOffset("xIndices")}];\n                  ${s}\n                }`:S=`\n                for (var i: u32 = 0u; i < uniforms.kw; i++) {\n                  xIndices[${_}] = indices[${_}] * uniforms.sw - uniforms.pwStart + i;\n                  let x_val = x[${t.indicesToOffset("xIndices")}];\n                  ${s}\n                }`,n.kernelShape.length===2){let E=r-(g?3:2);v===!0?I=`\n                for (var j: u32 = 0u; j < uniforms.kh; j++) {\n                  xIndices[${E}] = indices[${E}] * uniforms.sh - uniforms.phStart + j;\n                  if (xIndices[${E}] < 0 || xIndices[${E}] >= uniforms.x_shape[${E}]) {\n                    pad += i32(uniforms.kw);\n                    continue;\n                  }\n              `:I=`\n                for (var j: u32 = 0u; j < uniforms.kh; j++) {\n                  xIndices[${E}] = indices[${E}] * uniforms.sh - uniforms.phStart + j;\n                `,x=`\n              }\n            `}return`\n            ${e.registerUniforms(a).declareVariables(t,y)}\n\n            ${e.mainStart()}\n              ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n\n              let indices = ${y.offsetToIndices("global_idx")};\n              var xIndices = ${y.offsetToIndices("global_idx")};\n\n              var value = ${w}(${d});\n              var pad = 0;\n              ${I}\n              ${S}\n              ${x}\n              ${u}\n\n              output[global_idx] = value;\n            }`}else{if(g)throw new Error("Pooling with kernelShape.length > 2 is not supported for NHWC format.");let S=n.kernelShape.length,I=n.pads.length,x="";return p?x=`\n                if (xIndices[j] >= uniforms.x_shape[j]) {\n                  pad++;\n                  isPad = true;\n                  break;\n                }\n              }\n              if (!isPad) {\n                let x_val = x[${t.indicesToOffset("xIndices")}];\n                ${s}\n              }`:x=`\n              }\n              let x_val = x[${t.indicesToOffset("xIndices")}];\n              ${s}\n            `,`\n            ${e.registerUniforms(a).declareVariables(t,y)}\n\n            ${e.mainStart()}\n              ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n              let indices = ${y.offsetToIndices("global_idx")};\n              var xIndices = ${y.offsetToIndices("global_idx")};\n\n              var offsets: array<u32, ${S}>;\n\n              var value = ${w}(${d});\n              var pad = 0;\n              var isPad = false;\n\n              for (var i: u32 = 0u; i < uniforms.kernelSize; i++) {\n                var offset = i;\n                for (var j = 0u; j < ${S-1}u; j++) {\n                  offsets[j] = offset / ${_e("uniforms.kernelStrides","j",S)};\n                  offset -= offsets[j] * ${_e("uniforms.kernelStrides","j",S)};\n                }\n                offsets[${S-1}] = offset;\n\n                isPad = false;\n                for (var j = ${r-S}u; j < ${r}u; j++) {\n                  xIndices[j] = indices[j] * ${_e("uniforms.strides",`j - ${r-S}u`,S)}\n                    + offsets[j - ${r-S}u] - ${_e("uniforms.pads","j - 2u",I)};\n                  ${x}\n              }\n              ${u}\n\n              output[global_idx] = value;\n            }`}},Ts=e=>({format:e.format,autoPad:["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][e.auto_pad],ceilMode:e.ceil_mode,kernelShape:e.kernel_shape,strides:e.strides,pads:e.pads}),Es=(e,t,r,o)=>{let[n,s]=_s(t,o,r),u=V("x",t.dataType,t.dims.length),d=u.type.value,a="value += x_val;",p="";n.countIncludePad?p+=`value /= ${d}(uniforms.kernelSize);`:p+=`value /= ${d}(i32(uniforms.kernelSize) - pad);`;let[h,v,g,w,y]=Is(s,n);h.push(...Y(t.dims)),h.push(...Y(s));let S=["rank"];return{name:e,shaderCache:{hint:o.cacheKey+g+w+y+n.countIncludePad,inputDependencies:S},getRunData:()=>({outputs:[{dims:s,dataType:t.dataType}],dispatchGroup:{x:Math.ceil(D.size(s)/64)},programUniforms:h}),getShaderSource:I=>As(I,u,t.dims.length,s.length,n,a,p,0,v,g,w,y)}},Os=e=>{let t=e.count_include_pad!==0,r=Ts(e);if(r.ceilMode!==0)throw new Error("using ceil() in shape computation is not yet supported for AveragePool");return Q({countIncludePad:t,...r})},ks=(e,t)=>{Jr(e.inputs),e.compute(Es("AveragePool",e.inputs[0],!1,t))},Ps={autoPad:"",ceilMode:0,countIncludePad:!1,kernelShape:[],strides:[],pads:[],storageOrder:0,dilations:[],cacheKey:""},Rs=e=>{let t=e.format;return{format:t,...Ps,cacheKey:t}},Bs=(e,t)=>{Jr(e.inputs),e.compute(Es("GlobalAveragePool",e.inputs[0],!0,t))},Ms=(e,t,r,o)=>{let[n,s]=_s(t,o,r),u=`\n      value = max(x_val, value);\n    `,d="",a=V("x",t.dataType,t.dims.length),p=["rank"],[h,v,g,w,y]=Is(s,n);return h.push(...Y(t.dims)),h.push(...Y(s)),{name:e,shaderCache:{hint:o.cacheKey+g,inputDependencies:p},getRunData:()=>({outputs:[{dims:s,dataType:t.dataType}],dispatchGroup:{x:Math.ceil(D.size(s)/64)},programUniforms:h}),getShaderSource:S=>As(S,a,t.dims.length,s.length,n,u,d,-1e5,v,g,w,y)}},Ds=(e,t)=>{Jr(e.inputs),e.compute(Ms("MaxPool",e.inputs[0],!1,t))},zs=e=>{let t=e.storage_order,r=e.dilations,o=Ts(e);if(t!==0)throw new Error("column major storage order is not yet supported for MaxPool");if(o.ceilMode!==0)throw new Error("using ceil() in shape computation is not yet supported for MaxPool");return Q({storageOrder:t,dilations:r,...o})},Vs=e=>{let t=e.format;return{format:t,...Ps,cacheKey:t}},Ws=(e,t)=>{Jr(e.inputs),e.compute(Ms("GlobalMaxPool",e.inputs[0],!0,t))}});var Yd,Zd,Ns,Hs=j(()=>{"use strict";Lr();Ve();be();Yd=(e,t,r)=>{let o=e===t,n=e<t&&r<0,s=e>t&&r>0;if(o||n||s)throw new Error("Range these inputs\' contents are invalid.")},Zd=(e,t,r,o)=>{let n=Math.abs(Math.ceil((t-e)/r)),s=[n],u=n,d=K("output",o,s),a=d.type.storage,p=h=>`\n        ${h.declareVariables(d)}\n        ${h.mainStart()}\n        ${h.guardAgainstOutOfBoundsWorkgroupSizes(u)}\n        output[global_idx] = ${a}(${e}) + ${a}(global_idx) * ${a}(${r});\n      }`;return{name:"Range",shaderCache:{hint:[e,t,r].map(h=>h.toString()).join("_")},getShaderSource:p,getRunData:()=>({outputs:[{dims:s,dataType:o}],dispatchGroup:{x:Math.ceil(u/64)}})}},Ns=e=>{let t=0,r=0,o=0;e.inputs[0].dataType===6?(t=e.inputs[0].getInt32Array()[0],r=e.inputs[1].getInt32Array()[0],o=e.inputs[2].getInt32Array()[0]):e.inputs[0].dataType===1&&(t=e.inputs[0].getFloat32Array()[0],r=e.inputs[1].getFloat32Array()[0],o=e.inputs[2].getFloat32Array()[0]),Ut.webgpu.validateInputContent&&Yd(t,r,o),e.compute(Zd(t,r,o,e.inputs[0].dataType),{inputs:[]})}});var Xd,Qd,Jd,ec,tc,rc,nc,oc,ac,ic,sc,uc,lc,dc,cc,Gs,Ls,Fs=j(()=>{"use strict";ye();ke();be();Xd=(e,t)=>{if(e.every(r=>r>0||(()=>{throw new Error("Resize requires scales input values to be positive")})),e.length>0){if(t.mode==="linear"){if(!(e.length===2||e.length===4&&e[0]===1&&e[1]===1||e.length===4&&e[0]===1&&e[3]===1))throw new Error("Resize requires scales input size to be 2 or 4 for linear mode")}else if(t.mode==="cubic"&&!(e.length===2||e.length===4&&e[0]===1&&e[1]===1||e.length===4&&e[0]===1&&e[3]===1))throw new Error("Resize requires scales input size to be 2 or 4 for cubic mode")}},Qd=(e,t,r)=>{t.every(n=>n>=0&&n<r||(()=>{throw new Error("Resize requires axes input values to be positive and less than rank")}));let o=new Array(r).fill(1);return t.forEach((n,s)=>o[n]=e[s]),o},Jd=(e,t,r,o,n,s)=>{let[u,d,a]=r>10?[1,2,3]:[-1,e.length>1?1:-1,-1],p=e[0].dims.length;if(u>0&&e.length>u&&e[u].dims.length>0)e[u].getFloat32Array().forEach(h=>s.push(h));else if(t.coordinateTransformMode==="tf_crop_and_resize")throw new Error("Resize requires RoI input to be specified when coordinateTransformMode is tfCropAndResize");if(d>0&&e.length>d&&e[d].dims.length>0){if(e[d].getFloat32Array().forEach(h=>o.push(h)),o.length!==0&&o.length!==p&&r>=18&&o.length!==t.axes.length)throw new Error("Resize requires scales input size to be same as input rank or axes size for opset 18 and up");Xd(o,t),t.axes.length>0&&Qd(o,t.axes,p).forEach((h,v)=>o[v]=h)}if(a>0&&e.length>a&&(e[a].getBigInt64Array().forEach(h=>n.push(Number(h))),n.length!==p||r>=18&&n.length===t.axes.length))throw new Error("Resize requires sizes input size to be same as input rank or axes size for opset 18 and up");if(t.axes.length>0){if(o.length!==t.axes.length)throw new Error(\'Resize requires "scales" input size to be of axes rank when axes attributes is specified\');if(n.length!==t.axes.length)throw new Error(\'Resize requires "sizes" input size to be of rank axes rank when axes attributes is specified\')}if(typeof o<"u"&&typeof n<"u"&&o.length>0&&n.length>p)throw new Error("Resize requires only of scales or sizes to be specified")},ec=(e,t)=>`fn getOriginalCoordinateFromResizedCoordinate(xResized: ${t}, xScale: ${t}, lengthResized: ${t},\n     lengthOriginal: ${t}, roiStart: ${t}, roiEnd: ${t}) -> ${t} { `+(()=>{switch(e){case"asymmetric":return"return xResized / xScale;";case"pytorch_half_pixel":return"if (lengthResized > 1) {                     return (xResized + 0.5) / xScale - 0.5;                   } else {                     return 0.0;                   }";case"tf_half_pixel_for_nn":return"return (xResized + 0.5) / xScale;";case"align_corners":return"if (lengthResized == 1) {                     return 0.0;                   } else {                     return xResized * (lengthOriginal - 1) / (lengthResized - 1);                   }";case"tf_crop_and_resize":return`if (lengthResized > 1) {                     return roiStart * (lengthOriginal - 1) +                           (xResized * (roiEnd - roiStart) * (lengthOriginal - 1)) / (lengthResized - 1);                   } else {                     return 0.5 * (roiStart + roiEnd) * ${t}(lengthOriginal - 1);                   }`;case"half_pixel_symmetric":return["const outputWidth = xScale * lengthResized;","const adjustment = lengthResized / outputWidth;","const center = lengthOriginal / 2;","const offset = center * (1 - adjustment);","return offset + ((xResized + 0.5) / xScale) - 0.5;"].join(`\n`);case"half_pixel":return"return ((xResized + 0.5) / xScale) - 0.5;";default:throw new Error(`Coordinate transform mode ${e} is not supported`)}})()+"}",tc=(e,t,r)=>`fn getNearestPixelFromOriginal(xOriginal: ${r}, isDownSample: bool) -> ${r} {`+(()=>{switch(e){case"round_prefer_ceil":return"if (fract(xOriginal) == 0.5) {             return ceil(xOriginal);           } else {             return round(xOriginal);           }";case"floor":return"return floor(xOriginal);";case"ceil":return"return ceil(xOriginal);";case"round_prefer_floor":return"if (fract(xOriginal) == 0.5) {                     return floor(xOriginal);                   } else {                     return round(xOriginal);                   }";case"simple":default:if(t<11)return"if (isDownSample)                     {                       return ceil(xOriginal);                     } else {                       return xOriginal;                     }";throw new Error(`Nearest mode ${e} is not supported`)}})()+"}",rc=(e,t,r)=>{let o=new Array(r).fill(0).concat(new Array(r).fill(1)),n=e.length===0?o:e.slice();return t.length>0?(t.forEach((s,u)=>{o[s]=n[u],o[u+r]=n[t.length+u]}),o):n},nc=(e,t,r,o)=>{let n=[];if(r.length>0)if(o.length>0){if(e.forEach(s=>n.push(s)),Math.max(...o)>e.length)throw new Error("axes is out of bound");o.forEach((s,u)=>n[s]=r[u])}else r.forEach(s=>n.push(s));else{if(t.length===0)throw new Error("Resize requires either scales or sizes.");n=e.map((s,u)=>Math.round(s*t[u]))}return n},oc=(e,t,r)=>{let o=(()=>{switch(r.keepAspectRatioPolicy){case"not_larger":return r.axes.length>0?Math.min(...r.axes.map(s=>t[s]),Number.MAX_VALUE):Math.min(...t,Number.MAX_VALUE);case"not_smaller":return r.axes.length>0?Math.max(...r.axes.map(s=>t[s]),Number.MIN_VALUE):Math.max(...t,Number.MIN_VALUE);default:throw new Error(`Keep aspect ratio policy ${r.keepAspectRatioPolicy} is not supported`)}})();t.fill(1,0,t.length);let n=e.slice();return r.axes.length>0?(r.axes.forEach(s=>t[s]=o),r.axes.forEach(s=>n[s]=Math.round(e[s]*t[s]))):(t.fill(o,0,t.length),n.forEach((s,u)=>n[u]=Math.round(s*t[u]))),n},ac=(e,t,r,o,n)=>`\n    fn calculateOriginalIndicesFromOutputIndices(output_indices: ${e.type.indices}) -> array<${e.type.value}, ${r.length}> {\n      var original_indices: array<${e.type.value}, ${r.length}>;\n      for (var i:u32 = 0; i < ${r.length}; i++) {\n        var output_index = ${e.type.value}(${e.indicesGet("output_indices","i")});\n        var scale = ${_e("uniforms.scales","i",o)};\n        var roi_low = ${_e("uniforms.roi","i",n)};\n        var roi_hi = ${_e("uniforms.roi",`i + ${t.length}`,n)};\n        if (scale == 1.0) {\n          original_indices[i] = output_index;\n        } else {\n          var input_shape_i = ${e.type.value}(${_e("uniforms.input_shape","i",t.length)});\n          var output_shape_i = ${e.type.value}(${_e("uniforms.output_shape","i",r.length)});\n          original_indices[i] = getOriginalCoordinateFromResizedCoordinate(output_index, scale, output_shape_i,\n                                                                           input_shape_i, roi_low, roi_hi);\n        }\n      }\n      return original_indices;\n    }`,ic=(e,t,r,o,n,s,u)=>`\n    fn calculateInputIndicesFromOutputIndices(output_indices: ${t.type.indices}) -> ${e.type.indices} {\n      var input_indices: ${e.type.indices};\n      for (var i:u32 = 0; i < ${o.length}; i++) {\n        var output_index = ${t.type.value}(${t.indicesGet("output_indices","i")});\n        var input_index: u32;\n        var scale = ${_e("uniforms.scales","i",n)};\n        if (scale == 1.0) {\n          input_index = u32(output_index);\n        } else {\n          var roi_low = ${_e("uniforms.roi","i",s)};\n          var roi_hi = ${_e("uniforms.roi",`i + ${r.length}`,s)};\n          var input_shape_i = ${t.type.value}(${_e("uniforms.input_shape","i",r.length)});\n          var output_shape_i = ${t.type.value}(${_e("uniforms.output_shape","i",o.length)});\n          var original_idx = getOriginalCoordinateFromResizedCoordinate(output_index, scale, output_shape_i,\n                                                                        input_shape_i, roi_low, roi_hi);\n          if (!${u} || (original_idx >= 0 && original_idx < input_shape_i)) {\n            if (original_idx < 0) {\n              input_index = 0;\n            } else if (original_idx > (input_shape_i - 1)) {\n              input_index = u32(input_shape_i) - 1;\n            } else {\n              input_index = u32(getNearestPixelFromOriginal(original_idx, scale < 1));\n            }\n          } else {\n            input_index = u32(original_idx);\n          }\n        }\n        ${e.indicesSet("input_indices","i"," input_index")}\n      }\n      return input_indices;\n    }`,sc=(e,t)=>`\n    fn checkInputIndices(input_indices: ${e.type.indices}) -> bool {\n      for (var i:u32 = 0; i < ${t.length}; i++) {\n        var input_index = ${e.indicesGet("input_indices","i")};\n        if (input_index < 0 || input_index >= ${_e("uniforms.input_shape","i",t.length)}) {\n          return false;\n        }\n      }\n      return true;\n    }`,uc=(e,t,r,o,n,s)=>{let[u,d,a,p]=r.length===2?[-1,0,1,-1]:o[1]===1?[0,2,3,1]:[0,1,2,3],h=e.type.value;return`\n    fn getInputValue(batch: u32, channel: u32, row: u32, col: u32) -> ${h} {\n      var input_indices: ${e.type.indices};\n      ${e.indicesSet("input_indices",d,`max(0, min(row, ${r[d]} - 1))`)};\n      ${e.indicesSet("input_indices",a,`max(0, min(col, ${r[a]} - 1))`)};\n      if (${r.length} > 2) {\n        ${e.indicesSet("input_indices",p,"channel")};\n        ${e.indicesSet("input_indices",u,"batch")};\n      };\n      return ${e.getByIndices("input_indices")};\n    }\n\n    fn bilinearInterpolation(output_indices: ${t.type.indices}) -> ${h} {\n      var originalIndices = calculateOriginalIndicesFromOutputIndices(output_indices);\n      var row:${h} = originalIndices[${d}];\n      var col:${h} = originalIndices[${a}];\n      if (${n} && (row < 0 || row > (${r[d]} - 1) || col < 0 || col > ${r[a]} - 1)) {\n        return ${s};\n      }\n      row = max(0, min(row, ${r[d]} - 1));\n      col = max(0, min(col, ${r[a]} - 1));\n      var row1: u32 = u32(row);\n      var col1: u32 = u32(col);\n      var row2: u32 = u32(row + 1);\n      var col2: u32 = u32(col + 1);\n      var channel: u32 = 0;\n      var batch: u32 = 0;\n      if (${r.length>2}) {\n        channel = u32(originalIndices[${p}]);\n        batch = u32(originalIndices[${u}]);\n      }\n      var x11: ${h} = getInputValue(batch, channel, row1, col1);\n      var x12: ${h} = getInputValue(batch, channel, row1, col2);\n      var x21: ${h} = getInputValue(batch, channel, row2, col1);\n      var x22: ${h} = getInputValue(batch, channel, row2, col2);\n      var dx1: ${h} = row - ${h}(row1);\n      var dx2: ${h} = ${h}(row2) - row;\n      var dy1 = col - ${h}(col1);\n      var dy2 = ${h}(col2) - col;\n      return (x11 * dx2 * dy2 + x12 * dx2 * dy1 + x21 * dx1 * dy2 + x22 * dx1 * dy1);\n    }`},lc=(e,t,r,o,n,s,u,d,a,p)=>{let[h,v]=r.length===2?[0,1]:n[1]===1?[2,3]:[1,2],g=e.type.value,w=y=>{let S=y===h?"row":"col";return`\n      fn ${S}CubicInterpolation(input_indices: ${e.type.indices}, output_indices: ${t.type.indices}) -> ${g} {\n        var output_index = ${t.indicesGet("output_indices",y)};\n        var originalIdx: ${g} = getOriginalCoordinateFromResizedCoordinate(${g}(output_index), ${n[y]},\n        ${g}(${o[y]}), ${g}(${r[y]}), ${s[y]}, ${s[y]} + ${r.length});\n        var fractOriginalIdx: ${g} = originalIdx - floor(originalIdx);\n        var coefs = getCubicInterpolationCoefs(fractOriginalIdx);\n\n        if (${d} && (originalIdx < 0 || originalIdx > (${r[y]} - 1))) {\n          return ${a};\n        }\n        var data: array<${g}, 4> = array<${g}, 4>(0.0, 0.0, 0.0, 0.0);\n        for (var i: i32 = -1; i < 3; i++) {\n          var ${S}: ${g} = originalIdx + ${g}(i);\n          if (${S} < 0 || ${S} >= ${r[y]}) {\n            if (${p}) {\n              coefs[i + 1] = 0.0;\n              continue;\n            } else if (${d}) {\n              return ${a};\n            } else {\n              ${S} = max(0, min(${S}, ${r[y]} - 1));\n            }\n          }\n          var input_indices_copy: ${e.type.indices} = input_indices;\n          ${e.indicesSet("input_indices_copy",y,`u32(${S})`)};\n          data[i + 1] = ${y===h?e.getByIndices("input_indices_copy"):"rowCubicInterpolation(input_indices_copy, output_indices)"};\n        }\n        return cubicInterpolation1D(data, coefs);\n      }`};return`\n    ${w(h)};\n    ${w(v)};\n  fn getCubicInterpolationCoefs(s: ${g}) -> array<${g}, 4> {\n    var absS = abs(s);\n    var coeffs: array<${g}, 4> = array<${g}, 4>(0.0, 0.0, 0.0, 0.0);\n    var oneMinusAbsS: ${g} = 1.0 - absS;\n    var twoMinusAbsS: ${g} = 2.0 - absS;\n    var onePlusAbsS: ${g} = 1.0 + absS;\n    coeffs[0] = ((${u} * onePlusAbsS - 5 * ${u}) * onePlusAbsS + 8 * ${u}) * onePlusAbsS - 4 * ${u};\n    coeffs[1] = ((${u} + 2) * absS - (${u} + 3)) * absS * absS + 1;\n    coeffs[2] = ((${u} + 2) * oneMinusAbsS - (${u} + 3)) * oneMinusAbsS * oneMinusAbsS + 1;\n    coeffs[3] = ((${u} * twoMinusAbsS - 5 * ${u}) * twoMinusAbsS + 8 * ${u}) * twoMinusAbsS - 4 * ${u};\n    return coeffs;\n  }\n\n  fn cubicInterpolation1D(x: array<${g}, 4>, coefs: array<${g}, 4>) -> ${g} {\n    var coefsSum: ${g} = coefs[0] + coefs[1] + coefs[2] + coefs[3];\n    return (x[0] * coefs[0] + x[1] * coefs[1]+ x[2] * coefs[2]+ x[3] * coefs[3]) / coefsSum;\n  }\n\n  fn bicubicInterpolation(output_indices: ${t.type.indices}) -> ${g} {\n    var input_indices: ${e.type.indices} = output_indices;\n    return colCubicInterpolation(input_indices, output_indices);\n  }\n    `},dc=(e,t,r,o,n,s)=>{let u=e.dims,d=rc(s,t.axes,u.length),a=nc(u,o,n,t.axes),p=o.slice();o.length===0&&(p=u.map((x,_)=>x===0?1:a[_]/x),t.keepAspectRatioPolicy!=="stretch"&&(a=oc(u,p,t)));let h=K("output",e.dataType,a.length),v=V("input",e.dataType,u.length),g=D.size(a),w=u.length===a.length&&u.every((x,_)=>x===a[_]),y=t.coordinateTransformMode==="tf_crop_and_resize",S=v.type.value,I=x=>`\n      ${w?"":`\n      ${ec(t.coordinateTransformMode,S)};\n      ${(()=>{switch(t.mode){case"nearest":return`\n              ${sc(v,u)};\n              ${tc(t.nearestMode,r,S)};\n              ${ic(v,h,u,a,p.length,d.length,y)};\n              `;case"linear":return`\n              ${ac(h,u,a,p.length,d.length)};\n              ${uc(v,h,u,p,y,t.extrapolationValue)};\n              `;case"cubic":return`\n            ${lc(v,h,u,a,p,d,t.cubicCoeffA,y,t.extrapolationValue,t.excludeOutside)};\n            `;default:throw Error("Invalid resize mode")}})()};\n      `}\n      ${x.registerUniform("output_size","u32").registerUniform("scales","f32",p.length).registerUniform("roi","f32",d.length).declareVariables(v,h)}\n      ${x.mainStart()}\n        ${x.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n        ${w?"output[global_idx] = input[global_idx];":`\n        let output_indices = ${h.offsetToIndices("global_idx")};\n        var input_indices: ${v.type.indices};\n        ${(()=>{switch(t.mode){case"nearest":return`input_indices = calculateInputIndicesFromOutputIndices(output_indices);\n                if (checkInputIndices(input_indices)) {\n                  output[global_idx] = ${v.getByIndices("input_indices")};\n                } else {\n                  output[global_idx] = ${t.extrapolationValue};\n                }`;case"linear":return"output[global_idx] = bilinearInterpolation(output_indices);";case"cubic":return"output[global_idx] = bicubicInterpolation(output_indices);";default:throw Error(`Unsupported resize mode: ${t.mode}`)}})()};\n        `}\n      }`;return{name:"Resize",shaderCache:{hint:`${t.cacheKey}|${r}|${p.length>0?p:""}|${n.length>0?n:""}|${d.length>0?d:""}|${w}`,inputDependencies:["rank"]},getShaderSource:I,getRunData:()=>({outputs:[{dims:a,dataType:e.dataType}],dispatchGroup:{x:Math.ceil(g/64)},programUniforms:[{type:"uint32",data:g},{type:"float32",data:p},{type:"float32",data:d},...Y(u),...Y(a)]})}},cc=e=>{let t=e.customDataBuffer;return new Uint32Array(t,t.byteOffset,1)[0]},Gs=(e,t)=>{let r=[],o=[],n=[],s=cc(e);Jd(e.inputs,t,s,r,o,n),e.compute(dc(e.inputs[0],t,s,r,o,n),{inputs:[0]})},Ls=e=>{let t=e.antialias,r=e.axes,o=e.coordinateTransformMode,n=e.cubicCoeffA,s=e.excludeOutside!==0,u=e.extrapolationValue,d=e.keepAspectRatioPolicy,a=e.mode,p=e.nearestMode===""?"simple":e.nearestMode;return Q({antialias:t,axes:r,coordinateTransformMode:o,cubicCoeffA:n,excludeOutside:s,extrapolationValue:u,keepAspectRatioPolicy:d,mode:a,nearestMode:p})}});var pc,mc,qs,js,Ks=j(()=>{"use strict";Ve();ye();ke();be();pc=e=>{if(!e||e.length<3)throw new Error("layerNorm requires at least 3 inputs.");let t=e[0],r=e[1],o=e[2];if(t.dataType!==r.dataType||t.dataType!==o.dataType)throw new Error("All inputs must have the same data type");if(t.dims.length!==3&&t.dims.length!==2)throw new Error("Input must be 2D or 3D");if(r.dims.length!==3&&r.dims.length!==2)throw new Error("Skip must be 2D or 3D");let n=t.dims[t.dims.length-1],s=t.dims[t.dims.length-2];if(r.dims[r.dims.length-1]!==n)throw new Error("Skip must have the same hidden size as input");if(r.dims[r.dims.length-2]!==s)throw new Error("Skip must have the same sequence length as input");if(o.dims.length!==1)throw new Error("Gamma must be 1D");if(o.dims[o.dims.length-1]!==n)throw new Error("Gamma must have the same hidden size as input");if(e.length>3){let u=e[3];if(u.dims.length!==1)throw new Error("Beta must be 1D");if(u.dims[u.dims.length-1]!==n)throw new Error("Beta must have the same hidden size as input")}if(e.length>4){let u=e[4];if(u.dims.length!==1)throw new Error("Bias must be 1D");if(u.dims[u.dims.length-1]!==n)throw new Error("Bias must have the same hidden size as input")}},mc=(e,t,r,o)=>{let n=e[0].dims,s=D.size(n),u=n,d=s,a=n.slice(-1)[0],p=o?n.slice(0,-1).concat(1):[],h=e.length>3,v=e.length>4,g=o&&r>1,w=o&&r>2,y=r>3,S=Ye(a),I=[V("x",e[0].dataType,e[0].dims,S),V("skip",e[1].dataType,e[1].dims,S),V("gamma",e[2].dataType,e[2].dims,S)];h&&I.push(V("beta",e[3].dataType,e[3].dims,S)),v&&I.push(V("bias",e[4].dataType,e[4].dims,S)),I.push(K("output",e[0].dataType,u,S)),g&&I.push(K("meanOutput",1,p)),w&&I.push(K("invStdOutput",1,p)),y&&I.push(K("inputSkipBiasSum",e[0].dataType,u,S));let x=Te(e[0].dataType),_=E=>`\n      const hiddenSize: f32 = ${a};\n      const hiddenSizeVectorized: u32 = ${a/S};\n      const epsilon: f32 = ${t.epsilon};\n\n      ${E.declareVariables(...I)}\n\n      ${E.mainStart()}\n        ${E.guardAgainstOutOfBoundsWorkgroupSizes(d/a)}\n        let offset = global_idx * hiddenSizeVectorized;\n        var sum = ${Le("f32",S)};\n        var squareSum = ${Le("f32",S)};\n        for (var i: u32 = 0; i < hiddenSizeVectorized; i++) {\n          let skipValue = skip[offset + i];\n          let biasValue = ${v?"bias[i]":"0.0"};\n          let inputValue = x[offset + i];\n          let value = inputValue + skipValue + biasValue;\n          ${y?"inputSkipBiasSum[offset + i] = value;":""}\n          output[offset + i] = value;\n          let f32Value = ${Je(x,S,"value")};\n          sum += f32Value;\n          squareSum += f32Value * f32Value;\n        }\n        let mean = ${et("sum",S)} / hiddenSize;\n        let variance = sqrt(${et("squareSum",S)} / hiddenSize - mean * mean + epsilon);\n        ${g?"meanOutput[global_idx] = mean;":""}\n        ${w?"invStdOutput[global_idx] = 1.0 / variance;":""}\n        for (var i: u32 = 0; i < hiddenSizeVectorized; i++) {\n          output[offset + i] = (output[offset + i] - ${x}(mean)) / ${x}(variance) * gamma[i]\n           + ${h?"beta[i]":"0.0"};\n        }\n      }`,B=[{dims:u,dataType:e[0].dataType}];return r>1&&B.push({dims:p,dataType:1}),r>2&&B.push({dims:p,dataType:1}),r>3&&B.push({dims:n,dataType:e[0].dataType}),{name:"SkipLayerNormalization",shaderCache:{hint:t.cacheKey},getShaderSource:_,getRunData:()=>({outputs:B,dispatchGroup:{x:Math.ceil(d/a/64)}})}},qs=(e,t)=>{pc(e.inputs);let o=[0];e.outputCount>1&&o.push(-3),e.outputCount>2&&o.push(-3),e.outputCount>3&&o.push(3),e.compute(mc(e.inputs,t,e.outputCount,!1),{outputs:o})},js=e=>{let t=e.epsilon;return Q({epsilon:t})}});var fc,en,hc,Ys,gc,yc,Zs,Xs,Qs=j(()=>{"use strict";Ve();ye();ke();be();fc=(e,t)=>{if(!e||e.length<1)throw new Error("too few inputs");if(t.axes.length!==0){if(t.axes.length!==t.starts.length||t.axes.length!==t.ends.length)throw new Error("axes, starts and ends must have the same length")}else if(t.starts.length!==t.ends.length)throw new Error("starts and ends must have the same length");e.slice(1).forEach((r,o)=>{if(e[o+1].dataType!==6&&e[o+1].dataType!==7)throw new Error(`Input ${o} must be an array of int32 or int64`)})},en=(e,t)=>{let r=[];if(e.length>t)if(e[t].dataType===7)e[t].getBigInt64Array().forEach(o=>r.push(Number(o)));else if(e[t].dataType===6)e[t].getInt32Array().forEach(o=>r.push(Number(o)));else throw new Error(`Input ${t} must be an array of int32 or int64`);return r},hc=(e,t)=>{if(e.length>1){let r=en(e,1),o=en(e,2),n=en(e,3);return n.length===0&&(n=[...Array(e[0].dims.length).keys()]),Q({starts:r,ends:o,axes:n})}else return t},Ys=(e,t,r,o,n)=>{let s=e;return e<0&&(s+=r[o[t]]),n[t]<0?Math.max(0,Math.min(s,r[o[t]]-1)):Math.max(0,Math.min(s,r[o[t]]))},gc=(e,t,r)=>`fn calculateInputIndices(output_indices: ${t.type.indices}) -> ${e.type.indices} {\n          var input_indices: ${e.type.indices};\n          var carry = 0u;\n          for (var i = ${r.length}; i >= 0; i--) {\n            let input_shape_i = ${_e("uniforms.input_shape","i",r.length)};\n            let steps_i = ${_e("uniforms.steps","i",r.length)};\n            let signs_i = ${_e("uniforms.signs","i",r.length)};\n            let starts_i = ${_e("uniforms.starts","i",r.length)};\n            var output_index = ${t.indicesGet("output_indices","i")};\n            var input_index = output_index * steps_i + starts_i + carry;\n            carry = input_index / input_shape_i;\n            input_index = input_index % input_shape_i;\n            if (signs_i < 0) {\n              input_index = input_shape_i - input_index - 1u + starts_i;\n            }\n            ${e.indicesSet("input_indices","i","input_index")};\n          }\n          return input_indices;\n      }`,yc=(e,t)=>{let r=e[0].dims,o=D.size(r),n=t.axes.length>0?D.normalizeAxes(t.axes,r.length):[...Array(r.length).keys()],s=en(e,4);s.forEach(x=>x!==0||(()=>{throw new Error("step cannot be 0")})),s.length===0&&(s=Array(n.length).fill(1));let u=t.starts.map((x,_)=>Ys(x,_,r,n,s)),d=t.ends.map((x,_)=>Ys(x,_,r,n,s));if(n.length!==u.length||n.length!==d.length)throw new Error("start, ends and axes should have the same number of elements");if(n.length!==r.length)for(let x=0;x<r.length;++x)n.includes(x)||(u.splice(x,0,0),d.splice(x,0,r[x]),s.splice(x,0,1));let a=s.map(x=>Math.sign(x));s.forEach((x,_,B)=>{if(x<0){let E=(d[_]-u[_])/x,z=u[_],T=z+E*s[_];u[_]=T,d[_]=z,B[_]=-x}});let p=r.slice(0);n.forEach((x,_)=>{p[x]=Math.ceil((d[x]-u[x])/s[x])});let h={dims:p,dataType:e[0].dataType},v=K("output",e[0].dataType,p.length),g=V("input",e[0].dataType,e[0].dims.length),w=D.size(p),y=[{name:"outputSize",type:"u32"},{name:"starts",type:"u32",length:u.length},{name:"signs",type:"i32",length:a.length},{name:"steps",type:"u32",length:s.length}],S=[{type:"uint32",data:w},{type:"uint32",data:u},{type:"int32",data:a},{type:"uint32",data:s},...Y(e[0].dims),...Y(p)],I=x=>`\n      ${x.registerUniforms(y).declareVariables(g,v)}\n        ${gc(g,v,r)}\n        ${x.mainStart()}\n          ${x.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n          let output_indices = ${v.offsetToIndices("global_idx")};\n          let input_indices = calculateInputIndices(output_indices);\n          ${v.setByOffset("global_idx",g.getByIndices("input_indices"))}\n      }`;return{name:"Slice",shaderCache:{hint:`${a.length}_${u.length}_${s.length}`,inputDependencies:["rank"]},getShaderSource:I,getRunData:()=>({outputs:[h],dispatchGroup:{x:Math.ceil(o/64)},programUniforms:S})}},Zs=(e,t)=>{fc(e.inputs,t);let r=hc(e.inputs,t);e.compute(yc(e.inputs,r),{inputs:[0]})},Xs=e=>{let t=e.starts,r=e.ends,o=e.axes;return Q({starts:t,ends:r,axes:o})}});var bc,wc,Js,eu,tu=j(()=>{"use strict";ye();ke();be();bc=e=>{if(!e||e.length!==1)throw new Error("Softmax op requires 1 input.")},wc=(e,t)=>{let r=e.dims,o=D.size(r),n=64,s=t.axis;if(s<0&&(s=r.length+s),s<r.length-1)throw new Error("softmax only supports last axis for now.");let u=r[s],d=o/u,a=Ye(u),p=u/a,h=(I,x)=>x===4?`max(max(${I}.x, ${I}.y), max(${I}.z, ${I}.w))`:x===2?`max(${I}.x, ${I}.y)`:x===3?`max(max(${I}.x, ${I}.y), ${I}.z)`:I,v=V("x",e.dataType,e.dims,a),g=K("result",e.dataType,e.dims,a),w=v.type.value,y=Te(e.dataType)==="f32"?`var threadMax = ${w}(-3.402823e+38f);`:`var threadMax = ${w}(-65504.0h);`,S=I=>`\n      var<workgroup> rowMaxShared : ${w};\n      var<workgroup> rowSumShared : ${w};\n      var<workgroup> threadShared : array<${w}, ${n}>;\n\n      fn getValue(row: i32, col: i32, row_stride: i32) -> ${w} {\n        let index = row * row_stride + col;\n        return x[index];\n      }\n\n      fn setValue(row: i32, col: i32, row_stride: i32, value: ${w}) {\n        let index = row * row_stride + col;\n        result[index] = value;\n      }\n      ${I.registerUniform("packedCols","i32").declareVariables(v,g)}\n      ${I.mainStart()}\n        let gindex = i32(global_id.x);\n        let lindex = i32(local_id.x);\n        const wg = ${n};\n        let row = gindex / wg;\n        let cols = uniforms.packedCols;\n        let row_stride : i32 = uniforms.packedCols;\n\n        // find the rows max\n        ${y}\n        for (var col = lindex; col < cols; col += wg) {\n          let value = getValue(row, col, row_stride);\n          threadMax = max(threadMax, value);\n        }\n        if (lindex < cols) {\n          threadShared[lindex] = threadMax;\n        }\n        workgroupBarrier();\n\n        var reduceSize = min(cols, wg);\n        for (var currSize = reduceSize >> 1;  currSize > 0; currSize = reduceSize >> 1) {\n          reduceSize = currSize + (reduceSize & 1);\n          if (lindex < currSize) {\n            threadShared[lindex] = max(threadShared[lindex], threadShared[lindex + reduceSize]);\n          }\n          workgroupBarrier();\n        }\n        if (lindex == 0) {\n          rowMaxShared = ${w}(${h("threadShared[0]",a)});\n        }\n        workgroupBarrier();\n\n        // find the rows sum\n        var threadSum = ${w}(0.0);\n        for (var col = lindex; col < cols; col += wg) {\n          let subExp = exp(getValue(row, col, row_stride) - rowMaxShared);\n          threadSum += subExp;\n        }\n        threadShared[lindex] = threadSum;\n        workgroupBarrier();\n\n        for (var currSize = wg >> 1;  currSize > 0; currSize = currSize >> 1) {\n          if (lindex < currSize) {\n            threadShared[lindex] = threadShared[lindex] + threadShared[lindex + currSize];\n          }\n          workgroupBarrier();\n        }\n        if (lindex == 0) {\n          rowSumShared = ${w}(${et("threadShared[0]",a)});\n        }\n        workgroupBarrier();\n\n        // calculate final value for each element in the row\n        for (var col = lindex; col < cols; col += wg) {\n          let value = exp(getValue(row, col, row_stride) - rowMaxShared) / rowSumShared;\n          setValue(row, col, row_stride, value);\n        }\n      }`;return{name:"Softmax",shaderCache:{hint:`${a}`,inputDependencies:["type"]},getRunData:()=>({outputs:[{dims:r,dataType:e.dataType}],dispatchGroup:{x:d},programUniforms:[{type:"uint32",data:p}]}),getShaderSource:S}},Js=(e,t)=>{bc(e.inputs),e.compute(wc(e.inputs[0],t))},eu=e=>Q({axis:e.axis})});var vc,$c,Sc,xc,Cc,ru,nu,ou=j(()=>{"use strict";ye();ke();be();vc=e=>{if(!e||e.length<1)throw new Error("too few inputs")},$c=(e,t)=>{let r=[],o=t.numOutputs;return e[1].dims[0]>0&&(e[1].getBigInt64Array().forEach(n=>r.push(Number(n))),o=r.length),Q({numOutputs:o,axis:t.axis,splitSizes:r})},Sc=e=>`\nfn calculateOutputIndex(index: u32) -> u32 {\n    for (var i: u32 = 0u; i < ${e}u; i += 1u ) {\n    if (index < ${_e("uniforms.size_in_split_axis","i",e)}) {\n        return i;\n    }\n    }\n    return ${e}u;\n}`,xc=e=>{let t=e.length,r=[];for(let o=0;o<t;++o){let n=e[o].setByIndices("indices","input[global_idx]");t===1?r.push(n):o===0?r.push(`if (output_number == ${o}u) { ${n} }`):o===t-1?r.push(`else { ${n} }`):r.push(`else if (output_number == ${o}) { ${n} }`)}return`\n      fn writeBufferData(output_number: u32, indices: ${e[0].type.indices}, global_idx: u32) {\n        ${r.join(`\n`)}\n      }`},Cc=(e,t)=>{let r=e[0].dims,o=D.size(r),n=e[0].dataType,s=D.normalizeAxis(t.axis,r.length),u=new Array(t.numOutputs),d=V("input",n,r),a=new Array(t.numOutputs),p=[],h=[],v=0,g=[{type:"uint32",data:o}];for(let y=0;y<t.numOutputs;y++){v+=t.splitSizes[y],a[y]=v;let S=r.slice();S[t.axis]=t.splitSizes[y],h.push(S),u[y]=K(`output${y}`,n,S),p.push({dims:h[y],dataType:e[0].dataType})}g.push({type:"uint32",data:a}),g.push(...Y(r)),h.forEach(y=>g.push(...Y(y)));let w=y=>`\n  ${y.registerUniform("input_size","u32").registerUniform("size_in_split_axis","u32",a.length).declareVariables(d,...u)}\n  ${Sc(a.length)}\n  ${xc(u)}\n\n  ${y.mainStart()}\n    ${y.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.input_size")}\n\n    var indices = ${d.offsetToIndices("global_idx")};\n    var index = ${d.indicesGet("indices",s)};\n    let output_number = calculateOutputIndex(index);\n    if (output_number != 0) {\n      index -= ${_e("uniforms.size_in_split_axis","output_number - 1u",a.length)};\n      ${d.indicesSet("indices",s,"index")};\n    }\n    writeBufferData(output_number, indices, global_idx);\n  }`;return{name:"Split",shaderCache:{hint:t.cacheKey,inputDependencies:["rank"]},getShaderSource:w,getRunData:()=>({outputs:p,dispatchGroup:{x:Math.ceil(o/64)},programUniforms:g})}},ru=(e,t)=>{vc(e.inputs);let r=e.inputs.length===1?t:$c(e.inputs,t);e.compute(Cc(e.inputs,r),{inputs:[0]})},nu=e=>{let t=e.axis,r=e.splitSizes,o=e.numOutputs<0?r.length:e.numOutputs;if(o!==r.length)throw new Error("numOutputs and splitSizes lengh must be equal");return Q({axis:t,numOutputs:o,splitSizes:r})}});var au,_c,Ic,Ac,iu,su=j(()=>{"use strict";Ve();ye();be();au=e=>Array.from(e.getBigInt64Array(),Number),_c=e=>{if(!e||e.length!==2)throw new Error("Tile requires 2 inputs.");if(e[0].dataType!==1&&e[0].dataType!==6&&e[0].dataType!==12)throw new Error("Tile only support float, int32, and uint32 data types");if(e[1].dataType!==7)throw new Error("Tile `repeats` input should be of int64 data type");if(e[1].dims.length!==1)throw new Error("Tile `repeats` input should be 1-D");if(au(e[1]).length!==e[0].dims.length)throw new Error("Tile `repeats` input should have same number of elements as rank of input data tensor")},Ic=(e,t)=>{let r=[];for(let o=0;o<e.length;++o)r.push(e[o]*t[o]);return r},Ac=e=>{let t=e[0].dims,r=au(e[1]),o=Ic(t,r),n=D.size(o),s=e[0].dataType,u=V("input",s,t.length),d=K("output",s,o.length),a=p=>`\n      const inputShape = ${u.indices(...t)};\n      ${p.registerUniform("output_size","u32").declareVariables(u,d)}\n      ${p.mainStart()}\n      ${p.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n      let output_indices = ${d.offsetToIndices("global_idx")};\n      var input_indices: ${u.type.indices};\n      for (var i = 0; i < ${t.length}; i++) {\n        let input_dim_i = ${u.indicesGet("uniforms.input_shape","i")};\n        let input_dim_value = ${d.indicesGet("output_indices","i")}  % input_dim_i;\n\n        ${u.indicesSet("input_indices","i","input_dim_value")}\n      }\n      ${d.setByOffset("global_idx",u.getByIndices("input_indices"))}\n    }`;return{name:"Tile",shaderCache:{hint:`${r}`,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:o,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(n/64)},programUniforms:[{type:"uint32",data:n},...Y(e[0].dims),...Y(o)]}),getShaderSource:a}},iu=e=>{_c(e.inputs),e.compute(Ac(e.inputs),{inputs:[0]})}});var Tc,Ec,uu,lu=j(()=>{"use strict";Ve();ye();be();Tc=(e,t,r,o,n)=>{let s=K("output_data",n,r.length,4),u=V("a_data",t[1].dataType,t[1].dims.length,4),d=V("b_data",t[2].dataType,t[2].dims.length,4),a=V("c_data",t[0].dataType,t[0].dims.length,4),p,h=(v,g,w)=>`select(${g}, ${v}, ${w})`;if(!o)p=s.setByOffset("global_idx",h(u.getByOffset("global_idx"),d.getByOffset("global_idx"),a.getByOffset("global_idx")));else{let v=(g,w,y="")=>{let S=`a_data[index_a${w}][component_a${w}]`,I=`b_data[index_b${w}][component_b${w}]`,x=`bool(c_data[index_c${w}] & ${4278190080>>>(3-w)*8}u)`;return`\n            let output_indices${w} = ${s.offsetToIndices(`global_idx * 4u + ${w}u`)};\n            let offset_a${w} = ${u.broadcastedIndicesToOffset(`output_indices${w}`,s)};\n            let offset_b${w} = ${d.broadcastedIndicesToOffset(`output_indices${w}`,s)};\n            let offset_c${w} = ${a.broadcastedIndicesToOffset(`output_indices${w}`,s)};\n            let index_a${w} = offset_a${w} / 4u;\n            let index_b${w} = offset_b${w} / 4u;\n            let index_c${w} = offset_c${w} / 4u;\n            let component_a${w} = offset_a${w} % 4u;\n            let component_b${w} = offset_b${w} % 4u;\n            ${g}[${w}] = ${y}(${h(S,I,x)});\n          `};n===9?p=`\n            var data = vec4<u32>(0);\n            ${v("data",0,"u32")}\n            ${v("data",1,"u32")}\n            ${v("data",2,"u32")}\n            ${v("data",3,"u32")}\n            output_data[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));`:p=`\n            ${v("output_data[global_idx]",0)}\n            ${v("output_data[global_idx]",1)}\n            ${v("output_data[global_idx]",2)}\n            ${v("output_data[global_idx]",3)}\n          `}return`\n        ${e.registerUniform("vec_size","u32").declareVariables(a,u,d,s)}\n        ${e.mainStart()}\n        ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}\n        ${p}\n      }`},Ec=e=>{let t=e[1].dims,r=e[2].dims,o=e[0].dims,n=e[1].dataType,s=!(D.areEqual(t,r)&&D.areEqual(r,o)),u=t,d=D.size(t),a=Math.ceil(d/4);if(s){let p=it.calcShape(it.calcShape(t,r,!1),o,!1);if(!p)throw new Error("Can\'t perform where op on the given tensors");u=p,d=D.size(u)}return{name:"Where",shaderCache:{inputDependencies:["rank","rank","rank"]},getShaderSource:p=>Tc(p,e,u,s,n),getRunData:()=>({outputs:[{dims:u,dataType:n}],dispatchGroup:{x:Math.ceil(d/64/4)},programUniforms:[{type:"uint32",data:a},...Y(o),...Y(t),...Y(r),...Y(u)]})}},uu=e=>{e.compute(Ec(e.inputs))}});var du,cu=j(()=>{"use strict";ha();On();Ma();za();gi();Ai();Oi();Dn();Gi();qi();Xi();es();ns();is();ls();ps();hs();ys();$s();Cs();Us();Hs();Vr();Fs();Ks();Qs();tu();ou();su();Wt();Pn();lu();du=new Map([["Abs",[Va]],["Acos",[Wa]],["Acosh",[Ua]],["Add",[yi]],["ArgMax",[fa,En]],["ArgMin",[ma,En]],["Asin",[Na]],["Asinh",[Ha]],["Atan",[Ga]],["Atanh",[La]],["Attention",[ya,ga]],["AveragePool",[ks,Os]],["BatchNormalization",[Ba]],["BiasAdd",[Da]],["BiasSplitGelu",[hi]],["Cast",[qa,Fa]],["Ceil",[Ka]],["Clip",[ja]],["Concat",[Ti,Ei]],["Conv",[Vn,zn]],["ConvTranspose",[Hi,Ni]],["Cos",[Ya]],["Cosh",[Za]],["CumSum",[Li,Fi]],["Div",[bi]],["Einsum",[Yi,Zi]],["Elu",[Xa,Fr]],["Equal",[wi]],["Erf",[Qa]],["Exp",[Ja]],["Expand",[Ji]],["Floor",[ei]],["FusedConv",[Vn,zn]],["Gather",[rs,ts]],["GatherElements",[as,os]],["Gelu",[ti]],["Gemm",[ss,us]],["GlobalAveragePool",[Bs,Rs]],["GlobalMaxPool",[Ws,Vs]],["Greater",[xi]],["GreaterOrEqual",[_i]],["InstanceNormalization",[cs,ds]],["LayerNormalization",[fs,ms]],["LeakyRelu",[ri,Fr]],["Less",[Ci]],["LessOrEqual",[Ii]],["Log",[fi]],["MatMul",[gs]],["MaxPool",[Ds,zs]],["Mul",[vi]],["MultiHeadAttention",[vs,ws]],["Neg",[oi]],["Not",[ni]],["Pad",[Ss,xs]],["Pow",[$i]],["Range",[Ns]],["Reciprocal",[ai]],["ReduceMin",[sa]],["ReduceMean",[ra]],["ReduceMax",[ia]],["ReduceSum",[la]],["ReduceProd",[ua]],["ReduceL1",[na]],["ReduceL2",[oa]],["ReduceLogSum",[ca]],["ReduceLogSumExp",[aa]],["ReduceSumSquare",[da]],["Relu",[ii]],["Resize",[Gs,Ls]],["Sigmoid",[si]],["Sin",[ui]],["Sinh",[li]],["Slice",[Zs,Xs]],["SkipLayerNormalization",[qs,js]],["Split",[ru,nu]],["Sqrt",[di]],["Softmax",[Js,eu]],["Sub",[Si]],["Tan",[ci]],["Tanh",[pi]],["ThresholdedRelu",[mi,Fr]],["Tile",[iu]],["Transpose",[Go,Lo]],["Where",[uu]]])});var tn,pu=j(()=>{"use strict";Ve();wt();be();tn=class{constructor(t){this.backend=t;this.repo=new Map,this.attributesBound=!1}getArtifact(t){return this.repo.get(t)}setArtifact(t,r){this.repo.set(t,r)}run(t,r,o,n,s,u,d){let a=this.backend.device,p=this.backend.getComputePassEncoder();p.setPipeline(t.computePipeline);let h=[];for(let g of n)h.push({binding:h.length,resource:{buffer:g.buffer}});for(let g of s)h.push({binding:h.length,resource:{buffer:g.buffer}});d&&h.push({binding:h.length,resource:d});let v=a.createBindGroup({layout:t.computePipeline.getBindGroupLayout(0),entries:h,label:t.programInfo.name});if(p.setBindGroup(0,v),p.dispatchWorkgroups(...u),this.backend.pendingDispatchNumber++,this.backend.isQueryEnabled()){typeof this.backend.queryData>"u"&&(this.backend.queryData=this.backend.gpuDataManager.create(this.backend.querySetCount*8,GPUBufferUsage.COPY_SRC|GPUBufferUsage.QUERY_RESOLVE));let g=this.backend.gpuDataManager.create(this.backend.querySetCount*8,GPUBufferUsage.MAP_READ|GPUBufferUsage.COPY_DST);this.backend.endComputePass(),this.backend.getCommandEncoder().resolveQuerySet(this.backend.querySet,0,2,this.backend.queryData.buffer,0),this.backend.getCommandEncoder().copyBufferToBuffer(this.backend.queryData.buffer,0,g.buffer,0,this.backend.querySetCount*8),this.backend.flush();let w=this.backend.currentKernelId,y=this.backend.kernels.get(w);g.buffer.mapAsync(GPUMapMode.READ).then(()=>{let S=new BigUint64Array(g.buffer.getMappedRange()),[I,x]=S,[_,B]=y;g.buffer.unmap(),typeof this.backend.queryTimeBase>"u"&&(this.backend.queryTimeBase=I);let E=Number(I-this.backend.queryTimeBase),z=Number(x-this.backend.queryTimeBase);if(!Number.isSafeInteger(E)||!Number.isSafeInteger(z))throw new RangeError("incorrect timestamp range");if(this.backend.gpuDataManager.release(g.id),this.backend.env.webgpu.profiling?.ondata)this.backend.env.webgpu.profiling.ondata({version:1,inputsMetadata:r.map(T=>({dims:T.dims,dataType:Tt(T.dataType)})),outputsMetadata:o.map(T=>({dims:T.dims,dataType:Tt(T.dataType)})),kernelId:w,kernelType:_,kernelName:B,startTime:E,endTime:z});else{let T="";r.forEach((U,L)=>{T+=`input[${L}]: [${U.dims}] | ${Tt(U.dataType)}, `});let H="";r.forEach((U,L)=>{H+=`output[${L}]: [${U.dims}] | ${Tt(U.dataType)}, `}),console.log(`[profiling] kernel "${w}|${B}|${t.programInfo.name}" ${T}${H}execution time: ${z-E} ns`)}})}this.backend.pendingDispatchNumber>=16&&this.backend.flush()}dispose(){}build(t,r){let o=this.backend.device,n=[];o.features.has("shader-f16")&&n.push("enable f16;");let s=No(r),u=t.getShaderSource(s),d=`${n.join(`\n`)}\n${s.additionalImplementations}\n${u}`,a=o.createShaderModule({code:d,label:t.name});Re("verbose",()=>`[WebGPU] ${t.name} shader code: ${d}`);let p=o.createComputePipeline({compute:{module:a,entryPoint:"main"},layout:"auto",label:t.name});return{programInfo:t,computePipeline:p}}normalizeDispatchGroupSize(t){let r=typeof t=="number"?t:t.x,o=typeof t=="number"?1:t.y||1,n=typeof t=="number"?1:t.z||1,s=this.backend.device.limits.maxComputeWorkgroupsPerDimension;if(r<=s&&o<=s&&n<=s)return[r,o,n];let u=r*o*n,d=Math.ceil(Math.sqrt(u));if(d>s){if(d=Math.ceil(Math.cbrt(u)),d>s)throw new Error("Total dispatch size exceeds WebGPU maximum.");return[d,d,d]}else return[d,d,1]}}});var Oc,kc,rn,mu=j(()=>{"use strict";wt();Bo();Vo();cu();pu();Oc=(e,t)=>{if(t.length!==e.length)throw new Error(`inputDependencies length ${t.length} is not equal to inputTensors length ${e.length}.`);let r=[];for(let o=0;o<e.length;++o){let n=e[o].dataType;switch(t[o]){case"none":{r.push("");break}case"type":{r.push(`${n}`);break}case"rank":{let s=e[o].dims.length;r.push(`${n};${s}`);break}case"dims":{let s=e[o].dims.join(",");r.push(`${n};${s}`);break}default:throw new Error(`unsupported input dependency: ${t[o]}`)}}return r.join("|")},kc=(e,t,r)=>{let o=e.name;return e.shaderCache?.hint&&(o+="["+e.shaderCache.hint+"]"),o+=":"+r+`:${Oc(t,e.shaderCache?.inputDependencies??new Array(t.length).fill("dims"))}`,o},rn=class{constructor(){this.currentKernelId=null;this.commandEncoder=null;this.computePassEncoder=null;this.pendingDispatchNumber=0;this.querySetCount=2;this.sessionExternalDataMapping=new Map}get currentKernelCustomData(){if(this.currentKernelId===null)throw new Error("currentKernelCustomData(): currentKernelId is null. (should not happen)");let t=this.kernelCustomData.get(this.currentKernelId);return t||(t={},this.kernelCustomData.set(this.currentKernelId,t)),t}async initialize(t){if(!navigator.gpu)throw new Error("WebGpuBackend: WebGPU is not available.");let r=await navigator.gpu.requestAdapter();if(!r)throw new Error("WebGpuBackend: Failed to get GPU adapter.");this.env=t;let o=[],n={requiredLimits:{maxComputeWorkgroupStorageSize:r.limits.maxComputeWorkgroupStorageSize,maxComputeWorkgroupsPerDimension:r.limits.maxComputeWorkgroupsPerDimension,maxStorageBufferBindingSize:r.limits.maxStorageBufferBindingSize,maxBufferSize:r.limits.maxBufferSize,maxComputeInvocationsPerWorkgroup:r.limits.maxComputeInvocationsPerWorkgroup,maxComputeWorkgroupSizeX:r.limits.maxComputeWorkgroupSizeX,maxComputeWorkgroupSizeY:r.limits.maxComputeWorkgroupSizeY,maxComputeWorkgroupSizeZ:r.limits.maxComputeWorkgroupSizeZ},requiredFeatures:o};r.features.has("timestamp-query")&&o.push("timestamp-query"),r.features.has("shader-f16")&&o.push("shader-f16"),this.device=await r.requestDevice(n),this.gpuDataManager=zo(this),this.programManager=new tn(this),this.kernels=new Map,this.kernelPersistentData=new Map,this.kernelCustomData=new Map,Po(t.logLevel,!!t.debug),this.device.onuncapturederror=s=>{s.error instanceof GPUValidationError&&console.error(`An uncaught WebGPU validation error was raised: ${s.error.message}`)},Object.defineProperty(this.env.webgpu,"device",{value:this.device})}dispose(){typeof this.querySet<"u"&&this.querySet.destroy(),this.gpuDataManager.dispose()}getCommandEncoder(){return this.commandEncoder||(this.commandEncoder=this.device.createCommandEncoder()),this.commandEncoder}getComputePassEncoder(){if(!this.computePassEncoder){let t={};this.isQueryEnabled()&&(typeof this.querySet>"u"&&(this.querySet=this.device.createQuerySet({type:"timestamp",count:this.querySetCount})),t.timestampWrites={querySet:this.querySet,beginningOfPassWriteIndex:0,endOfPassWriteIndex:1}),this.computePassEncoder=this.getCommandEncoder().beginComputePass(t)}return this.computePassEncoder}endComputePass(){this.computePassEncoder&&(this.computePassEncoder.end(),this.computePassEncoder=null)}flush(){this.commandEncoder&&(this.endComputePass(),this.device.queue.submit([this.getCommandEncoder().finish()]),this.gpuDataManager.refreshPendingBuffers(),this.commandEncoder=null,this.pendingDispatchNumber=0)}isQueryEnabled(){return this.device.features.has("timestamp-query")&&(this.env.webgpu.profiling?.mode==="default"||!this.env.webgpu.profiling?.mode&&this.env.webgpu.profilingMode==="default")}run(t,r,o,n,s){let u=[];for(let _=0;_<r.length;++_){let B=this.gpuDataManager.get(r[_].data);if(!B)throw new Error(`no GPU data for input: ${r[_].data}`);u[_]=B}let{outputs:d,dispatchGroup:a,programUniforms:p}=t.getRunData(r),h=o.length===0?d.map((_,B)=>B):o;if(h.length!==d.length)throw new Error(`Output size ${h.length} must be equal to ${d.length}.`);let v=[],g=[];for(let _=0;_<d.length;++_){if(!Number.isInteger(h[_])||h[_]<-3||h[_]>=d.length)throw new Error(`Invalid output index: ${h[_]}`);if(h[_]===-3)continue;let B=h[_]===-1,E=h[_]===-2,z=B||E?s(d[_].dataType,d[_].dims):n(h[_],d[_].dataType,d[_].dims),T=this.gpuDataManager.get(z.data);if(!T)throw new Error(`no GPU data for output: ${z.data}`);if(B&&this.temporaryData.push(T),E){let H=this.kernelPersistentData.get(this.currentKernelId);H||(H=[],this.kernelPersistentData.set(this.currentKernelId,H)),H.push(T)}v.push(z),g.push(T)}let w;if(p){let _=0,B=[];p.forEach(H=>{let U=typeof H.data=="number"?[H.data]:H.data;if(U.length===0)return;let L=U.length<=2?U.length*4:16;_=Math.ceil(_/L)*L,B.push(_),_+=U.length>4?Math.ceil(U.length/4)*16:U.length*4});let E=16;_=Math.ceil(_/E)*E;let z=new ArrayBuffer(_);p.forEach((H,U)=>{let L=B[U],re=typeof H.data=="number"?[H.data]:H.data;H.type==="int32"?new Int32Array(z,L,re.length).set(re):H.type==="uint32"?new Uint32Array(z,L,re.length).set(re):new Float32Array(z,L,re.length).set(re)});let T=this.gpuDataManager.create(_,GPUBufferUsage.COPY_DST|GPUBufferUsage.UNIFORM);this.device.queue.writeBuffer(T.buffer,0,z,0,_),this.gpuDataManager.release(T.id),w={offset:0,size:_,buffer:T.buffer}}let y=this.programManager.normalizeDispatchGroupSize(a),S=y[1]===1&&y[2]===1,I=kc(t,r,S),x=this.programManager.getArtifact(I);return x||(x=this.programManager.build(t,y),this.programManager.setArtifact(I,x),Re("info",()=>`[artifact] key: ${I}, programName: ${t.name}`)),Re("info",()=>`[ProgramManager] run "${t.name}" (key=${I}) with ${y[0]}x${y[1]}x${y[2]}`),this.programManager.run(x,r,v,u,g,y,w),v}upload(t,r){this.gpuDataManager.upload(t,r)}memcpy(t,r){this.gpuDataManager.memcpy(t,r)}async download(t,r){await this.gpuDataManager.download(t,r)}alloc(t){return this.gpuDataManager.create(t).id}free(t){return this.gpuDataManager.release(t)}createKernel(t,r,o,n){let s=du.get(t);if(!s)throw new Error(`kernel not implemented: ${t}`);this.kernels.set(r,[t,n,s[0],[s[1],o]])}releaseKernel(t){let r=this.kernelPersistentData.get(t);if(r){for(let o of r)this.gpuDataManager.release(o.id);this.kernelPersistentData.delete(t)}this.kernelCustomData.delete(t),this.kernels.delete(t)}computeKernel(t,r,o){let n=this.kernels.get(t);if(!n)throw new Error(`kernel not created: ${t}`);let[s,u,d,a]=n;if(this.currentKernelId!==null)throw new Error(`kernel "[${s}] ${u}" is not allowed to be called recursively`);this.currentKernelId=t,a[0]&&(a[1]=a[0](a[1]),a[0]=void 0),Re("info",()=>`[WebGPU] Start to run kernel "[${s}] ${u}"...`);let p=this.env.debug;this.temporaryData=[];try{return p&&this.device.pushErrorScope("validation"),d(r,a[1]),0}catch(h){return o.push(Promise.resolve(`[WebGPU] Kernel "[${s}] ${u}" failed. ${h}`)),1}finally{p&&o.push(this.device.popErrorScope().then(h=>h?`GPU validation error for kernel "[${s}] ${u}": ${h.message}`:null));for(let h of this.temporaryData)this.gpuDataManager.release(h.id);this.temporaryData=[],this.currentKernelId=null}}registerBuffer(t,r,o,n){let s=this.sessionExternalDataMapping.get(t);s||(s=new Map,this.sessionExternalDataMapping.set(t,s));let u=s.get(r),d=this.gpuDataManager.registerExternalBuffer(o,n,u?.[1]);return s.set(r,[d,o]),d}unregisterBuffers(t){let r=this.sessionExternalDataMapping.get(t);r&&(r.forEach(o=>this.gpuDataManager.unregisterExternalBuffer(o[1])),this.sessionExternalDataMapping.delete(t))}getBuffer(t){let r=this.gpuDataManager.get(t);if(!r)throw new Error(`no GPU data for buffer: ${t}`);return r.buffer}createDownloader(t,r,o){return async()=>{let n=await Sn(this,t,r);return Ro(n.buffer,o)}}}});var fu={};Or(fu,{init:()=>Pc});var cr,Ln,Pc,hu=j(()=>{"use strict";Ve();mu();wt();ye();cr=class e{constructor(t,r,o,n){this.module=t;this.dataType=r;this.data=o;this.dims=n}getFloat32Array(){if(this.dataType!==1)throw new Error("Invalid data type");let t=D.size(this.dims);return t===0?new Float32Array:new Float32Array(this.module.HEAP8.buffer,this.data,t)}getBigInt64Array(){if(this.dataType!==7)throw new Error("Invalid data type");let t=D.size(this.dims);return t===0?new BigInt64Array:new BigInt64Array(this.module.HEAP8.buffer,this.data,t)}getInt32Array(){if(this.dataType!==6)throw new Error("Invalid data type");let t=D.size(this.dims);return t===0?new Int32Array:new Int32Array(this.module.HEAP8.buffer,this.data,t)}reshape(t){if(D.size(t)!==D.size(this.dims))throw new Error("Invalid new shape");return new e(this.module,this.dataType,this.data,t)}},Ln=class{constructor(t,r,o){this.module=t;this.backend=r;this.customDataOffset=0;this.customDataSize=0;let n=t.HEAPU32,s=o>>2;this.opKernelContext=n[s++];let u=n[s++];this.outputCount=n[s++],this.customDataOffset=n[s++],this.customDataSize=n[s++];let d=[];for(let a=0;a<u;a++){let p=n[s++],h=n[s++],v=n[s++],g=[];for(let w=0;w<v;w++)g.push(n[s++]);d.push(new cr(t,p,h,g))}this.inputs=d}get kernelCustomData(){return this.backend.currentKernelCustomData}get customDataBuffer(){return this.module.HEAPU8.subarray(this.customDataOffset,this.customDataOffset+this.customDataSize)}compute(t,r){let o=r?.inputs?.map(d=>typeof d=="number"?this.inputs[d]:d)??this.inputs,n=r?.outputs??[],s=(d,a,p)=>new cr(this.module,a,this.output(d,p),p),u=(d,a)=>{let p=ir(d);if(!p)throw new Error(`Unsupported data type: ${d}`);let h=p*D.size(a);return new cr(this.module,d,this.backend.gpuDataManager.create(h).id,a)};return this.backend.run(t,o,n,s,u)}output(t,r){let o=this.module.stackSave();try{let n=this.module.stackAlloc((1+r.length)*4),s=n>>2;this.module.HEAPU32[s++]=r.length;for(let u=0;u<r.length;u++)this.module.HEAPU32[s++]=r[u];return this.module._JsepOutput(this.opKernelContext,t,n)}catch(n){throw new Error(`Failed to generate kernel\'s output[${t}] with dims [${r}]. If you are running with pre-allocated output, please make sure the output type/dims are correct. Error: ${n}`)}finally{this.module.stackRestore(o)}}},Pc=async(e,t)=>{let r=e.jsepInit;if(r&&navigator.gpu){if(!t.wasm.simd)throw new Error("Not supported for WebGPU=ON and SIMD=OFF. Please set `env.wasm.simd` to true when using WebGPU EP");let o=new rn;await o.initialize(t),r(o,n=>o.alloc(n),n=>o.free(n),(n,s,u,d=!1)=>{if(d)Re("verbose",()=>`[WebGPU] jsepCopyGpuToGpu: src=${n}, dst=${s}, size=${u}`),o.memcpy(n,s);else{Re("verbose",()=>`[WebGPU] jsepCopyCpuToGpu: dataOffset=${n}, gpuDataId=${s}, size=${u}`);let a=e.HEAPU8.subarray(n,n+u);o.upload(s,a)}},async(n,s,u)=>{Re("verbose",()=>`[WebGPU] jsepCopyGpuToCpu: gpuDataId=${n}, dataOffset=${s}, size=${u}`),await o.download(n,()=>e.HEAPU8.subarray(s,s+u))},(n,s,u)=>o.createKernel(n,s,u,t.debug||o.isQueryEnabled()?e.UTF8ToString(e._JsepGetNodeName(s)):`${s}`),n=>o.releaseKernel(n),(n,s,u,d)=>{Re("verbose",()=>`[WebGPU] jsepRun: sessionHandle=${u}, kernel=${n}, contextDataOffset=${s}`);let a=new Ln(e,o,s);return o.computeKernel(n,a,d)})}}});var _o;_o=ho();var qu=So(),yn,bn=!1,kr=!1,Co=!1,ju=()=>{try{return typeof SharedArrayBuffer>"u"?!1:(typeof MessageChannel<"u"&&new MessageChannel().port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11])))}catch{return!1}},Ku=()=>{try{return WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,30,1,28,0,65,0,253,15,253,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,186,1,26,11]))}catch{return!1}},Yu=(e,t)=>e?t?"ort-wasm-simd-threaded.wasm":"ort-wasm-simd.wasm":t?"ort-wasm-threaded.wasm":"ort-wasm.wasm",Io=async e=>{if(bn)return Promise.resolve();if(kr)throw new Error("multiple calls to \'initializeWebAssembly()\' detected.");if(Co)throw new Error("previous call to \'initializeWebAssembly()\' failed.");kr=!0;let t=e.initTimeout,r=e.numThreads,o=e.simd,n=r>1&&ju(),s=o&&Ku(),u=e.wasmPaths,d=typeof u=="string"?u:void 0,a=Yu(s,n),p=typeof u=="object"?u[a]:void 0,h=!1,v=[];if(t>0&&v.push(new Promise(g=>{setTimeout(()=>{h=!0,g()},t)})),v.push(new Promise((g,w)=>{let y=n?qu:_o,S={locateFile:(I,x)=>{if(n&&I.endsWith(".worker.js")&&typeof Blob<"u")return URL.createObjectURL(new Blob([xo()],{type:"text/javascript"}));if(I.endsWith(".wasm")){if(p)return p;let _=d??x;return a==="ort-wasm-simd.wasm"?_+"ort-wasm-simd.jsep.wasm":a==="ort-wasm-simd-threaded.wasm"?_+"ort-wasm-simd-threaded.jsep.wasm":_+a}return x+I}};if(n)if(typeof Blob>"u")S.mainScriptUrlOrBlob=(void 0)(__dirname,"ort-wasm-threaded.js");else{let I=`var ortWasmThreaded=${y.toString()};`;S.mainScriptUrlOrBlob=new Blob([I],{type:"text/javascript"})}y(S).then(I=>{kr=!1,bn=!0,yn=I,g()},I=>{kr=!1,Co=!0,w(I)})})),await Promise.race(v),h)throw new Error(`WebAssembly backend initializing failed due to timeout: ${t}ms`)},Me=()=>{if(bn&&yn)return yn;throw new Error("WebAssembly is not initialized yet.")};var ze=(e,t)=>{let r=Me(),o=r.lengthBytesUTF8(e)+1,n=r._malloc(o);return r.stringToUTF8(e,n,o),t.push(n),n},ar=(e,t,r,o)=>{if(typeof e=="object"&&e!==null){if(r.has(e))throw new Error("Circular reference in options");r.add(e)}Object.entries(e).forEach(([n,s])=>{let u=t?t+n:n;if(typeof s=="object")ar(s,u+".",r,o);else if(typeof s=="string"||typeof s=="number")o(u,s.toString());else if(typeof s=="boolean")o(u,s?"1":"0");else throw new Error(`Can\'t handle extra config type: ${typeof s}`)})},Oe=e=>{let t=Me(),r=t.stackSave();try{let o=t.stackAlloc(8);t._OrtGetLastError(o,o+4);let n=t.HEAP32[o/4],s=t.HEAPU32[o/4+1],u=s?t.UTF8ToString(s):"";throw new Error(`${e} ERROR_CODE: ${n}, ERROR_MESSAGE: ${u}`)}finally{t.stackRestore(r)}};var Ao=e=>{let t=Me(),r=0,o=[],n=e||{};try{if(e?.logSeverityLevel===void 0)n.logSeverityLevel=2;else if(typeof e.logSeverityLevel!="number"||!Number.isInteger(e.logSeverityLevel)||e.logSeverityLevel<0||e.logSeverityLevel>4)throw new Error(`log serverity level is not valid: ${e.logSeverityLevel}`);if(e?.logVerbosityLevel===void 0)n.logVerbosityLevel=0;else if(typeof e.logVerbosityLevel!="number"||!Number.isInteger(e.logVerbosityLevel))throw new Error(`log verbosity level is not valid: ${e.logVerbosityLevel}`);e?.terminate===void 0&&(n.terminate=!1);let s=0;return e?.tag!==void 0&&(s=ze(e.tag,o)),r=t._OrtCreateRunOptions(n.logSeverityLevel,n.logVerbosityLevel,!!n.terminate,s),r===0&&Oe("Can\'t create run options."),e?.extra!==void 0&&ar(e.extra,"",new WeakSet,(u,d)=>{let a=ze(u,o),p=ze(d,o);t._OrtAddRunConfigEntry(r,a,p)!==0&&Oe(`Can\'t set a run config entry: ${u} - ${d}.`)}),[r,o]}catch(s){throw r!==0&&t._OrtReleaseRunOptions(r),o.forEach(u=>t._free(u)),s}};var Zu=e=>{switch(e){case"disabled":return 0;case"basic":return 1;case"extended":return 2;case"all":return 99;default:throw new Error(`unsupported graph optimization level: ${e}`)}},Xu=e=>{switch(e){case"sequential":return 0;case"parallel":return 1;default:throw new Error(`unsupported execution mode: ${e}`)}},Qu=e=>{e.extra||(e.extra={}),e.extra.session||(e.extra.session={});let t=e.extra.session;t.use_ort_model_bytes_directly||(t.use_ort_model_bytes_directly="1"),e.executionProviders&&e.executionProviders.some(r=>(typeof r=="string"?r:r.name)==="webgpu")&&(e.enableMemPattern=!1)},Ju=(e,t,r)=>{for(let o of t){let n=typeof o=="string"?o:o.name;switch(n){case"xnnpack":n="XNNPACK";break;case"webnn":if(n="WEBNN",typeof o!="string"){let u=o;if(u?.deviceType){let d=ze("deviceType",r),a=ze(u.deviceType,r);Me()._OrtAddSessionConfigEntry(e,d,a)!==0&&Oe(`Can\'t set a session config entry: \'deviceType\' - ${u.deviceType}.`)}if(u?.numThreads){let d=u.numThreads;(typeof d!="number"||!Number.isInteger(d)||d<0)&&(d=0);let a=ze("numThreads",r),p=ze(d.toString(),r);Me()._OrtAddSessionConfigEntry(e,a,p)!==0&&Oe(`Can\'t set a session config entry: \'numThreads\' - ${u.numThreads}.`)}if(u?.powerPreference){let d=ze("powerPreference",r),a=ze(u.powerPreference,r);Me()._OrtAddSessionConfigEntry(e,d,a)!==0&&Oe(`Can\'t set a session config entry: \'powerPreference\' - ${u.powerPreference}.`)}}break;case"webgpu":if(n="JS",typeof o!="string"){let u=o;if(u?.preferredLayout){if(u.preferredLayout!=="NCHW"&&u.preferredLayout!=="NHWC")throw new Error(`preferredLayout must be either \'NCHW\' or \'NHWC\': ${u.preferredLayout}`);let d=ze("preferredLayout",r),a=ze(u.preferredLayout,r);Me()._OrtAddSessionConfigEntry(e,d,a)!==0&&Oe(`Can\'t set a session config entry: \'preferredLayout\' - ${u.preferredLayout}.`)}}break;case"wasm":case"cpu":continue;default:throw new Error(`not supported execution provider: ${n}`)}let s=ze(n,r);Me()._OrtAppendExecutionProvider(e,s)!==0&&Oe(`Can\'t append execution provider: ${n}.`)}},To=e=>{let t=Me(),r=0,o=[],n=e||{};Qu(n);try{let s=Zu(n.graphOptimizationLevel??"all"),u=Xu(n.executionMode??"sequential"),d=typeof n.logId=="string"?ze(n.logId,o):0,a=n.logSeverityLevel??2;if(!Number.isInteger(a)||a<0||a>4)throw new Error(`log serverity level is not valid: ${a}`);let p=n.logVerbosityLevel??0;if(!Number.isInteger(p)||p<0||p>4)throw new Error(`log verbosity level is not valid: ${p}`);let h=typeof n.optimizedModelFilePath=="string"?ze(n.optimizedModelFilePath,o):0;if(r=t._OrtCreateSessionOptions(s,!!n.enableCpuMemArena,!!n.enableMemPattern,u,!!n.enableProfiling,0,d,a,p,h),r===0&&Oe("Can\'t create session options."),n.executionProviders&&Ju(r,n.executionProviders,o),n.freeDimensionOverrides)for(let[v,g]of Object.entries(n.freeDimensionOverrides)){if(typeof v!="string")throw new Error(`free dimension override name must be a string: ${v}`);if(typeof g!="number"||!Number.isInteger(g)||g<0)throw new Error(`free dimension override value must be a non-negative integer: ${g}`);let w=ze(v,o);t._OrtAddFreeDimensionOverride(r,w,g)!==0&&Oe(`Can\'t set a free dimension override: ${v} - ${g}.`)}return n.extra!==void 0&&ar(n.extra,"",new WeakSet,(v,g)=>{let w=ze(v,o),y=ze(g,o);t._OrtAddSessionConfigEntry(r,w,y)!==0&&Oe(`Can\'t set a session config entry: ${v} - ${g}.`)}),[r,o]}catch(s){throw r!==0&&t._OrtReleaseSessionOptions(r),o.forEach(u=>t._free(u)),s}};Ve();var yu=!1,Rc=e=>{let t=Me(),r=t.stackSave();try{let o=t.stackAlloc(8);return t._OrtGetInputOutputCount(e,o,o+4)!==0&&Oe("Can\'t get session input/output count."),[t.HEAP32[o/4],t.HEAP32[o/4+1]]}finally{t.stackRestore(r)}},Bc=(e,t)=>{Me()._OrtInit(e,t)!==0&&Oe("Can\'t initialize onnxruntime.")},bu=async e=>{Bc(e.wasm.numThreads,sr(e.logLevel));{let t=(hu(),Vt(fu)).init;await t(Me(),e)}yu=!0},pr=new Map,wu=()=>yu,Fn=e=>{let t=Me(),r=t._malloc(e.byteLength);if(r===0)throw new Error(`Can\'t create a session. failed to allocate a buffer of size ${e.byteLength}.`);return t.HEAPU8.set(e,r),[r,e.byteLength]},qn=(e,t)=>{let r=Me(),o=0,n=0,s=0,u=[],d=[],a=[];try{[n,u]=To(t),o=r._OrtCreateSession(e[0],e[1],n),o===0&&Oe("Can\'t create a session.");let[p,h]=Rc(o),v=[],g=[],w=[];for(let S=0;S<p;S++){let I=r._OrtGetInputName(o,S);I===0&&Oe("Can\'t get an input name."),d.push(I),v.push(r.UTF8ToString(I))}for(let S=0;S<h;S++){let I=r._OrtGetOutputName(o,S);I===0&&Oe("Can\'t get an output name."),a.push(I);let x=r.UTF8ToString(I);g.push(x);{let _=typeof t?.preferredOutputLocation=="string"?t.preferredOutputLocation:t?.preferredOutputLocation?.[x]??"cpu";if(_!=="cpu"&&_!=="cpu-pinned"&&_!=="gpu-buffer")throw new Error(`Not supported preferred output location: ${_}.`);w.push(_)}}let y=null;return w.some(S=>S==="gpu-buffer")&&(s=r._OrtCreateBinding(o),s===0&&Oe("Can\'t create IO binding."),y={handle:s,outputPreferredLocations:w,outputPreferredLocationsEncoded:w.map(S=>vn(S))}),pr.set(o,[o,d,a,y]),[o,v,g]}catch(p){throw d.forEach(h=>r._OrtFree(h)),a.forEach(h=>r._OrtFree(h)),s!==0&&r._OrtReleaseBinding(s),o!==0&&r._OrtReleaseSession(o),p}finally{r._free(e[0]),n!==0&&r._OrtReleaseSessionOptions(n),u.forEach(p=>r._free(p))}},vu=(e,t)=>{let r=Fn(e);return qn(r,t)},$u=e=>{let t=Me(),r=pr.get(e);if(!r)throw new Error(`cannot release session. invalid session id: ${e}`);let[o,n,s,u]=r;u&&t._OrtReleaseBinding(u.handle),t.jsepUnregisterBuffers?.(e),n.forEach(d=>t._OrtFree(d)),s.forEach(d=>t._OrtFree(d)),t._OrtReleaseSession(o),pr.delete(e)},gu=(e,t,r,o,n)=>{if(!e){t.push(0);return}let s=Me(),u=e[0],d=e[1],a=e[3],p,h;if(u==="string"&&a==="gpu-buffer")throw new Error("String tensor is not supported on GPU.");if(a==="gpu-buffer"){let w=e[2].gpuBuffer,y=ir(wn(u));h=d.reduce((S,I)=>S*I,1)*y,p=s.jsepRegisterBuffer(o,n,w,h)}else{let w=e[2];if(Array.isArray(w)){h=4*w.length,p=s._malloc(h),r.push(p);let y=p/4;for(let S=0;S<w.length;S++){if(typeof w[S]!="string")throw new TypeError(`tensor data at index ${S} is not a string`);s.HEAPU32[y++]=ze(w[S],r)}}else h=w.byteLength,p=s._malloc(h),r.push(p),s.HEAPU8.set(new Uint8Array(w.buffer,w.byteOffset,h),p)}let v=s.stackSave(),g=s.stackAlloc(4*d.length);try{let w=g/4;d.forEach(S=>s.HEAP32[w++]=S);let y=s._OrtCreateTensor(wn(u),p,h,g,d.length,vn(a));y===0&&Oe(`Can\'t create tensor for input/output. session=${o}, index=${n}.`),t.push(y)}finally{s.stackRestore(v)}},Su=async(e,t,r,o,n,s)=>{let u=Me(),d=pr.get(e);if(!d)throw new Error(`cannot run inference. invalid session id: ${e}`);let[a,p,h,v]=d,g=t.length,w=o.length,y=0,S=[],I=[],x=[],_=[],B=u.stackSave(),E=u.stackAlloc(g*4),z=u.stackAlloc(g*4),T=u.stackAlloc(w*4),H=u.stackAlloc(w*4);try{[y,S]=Ao(s);for(let J=0;J<g;J++)gu(r[J],I,_,e,t[J]);for(let J=0;J<w;J++)gu(n[J],x,_,e,g+o[J]);let U=E/4,L=z/4,re=T/4,R=H/4;for(let J=0;J<g;J++)u.HEAPU32[U++]=I[J],u.HEAPU32[L++]=p[t[J]];for(let J=0;J<w;J++)u.HEAPU32[re++]=x[J],u.HEAPU32[R++]=h[o[J]];if(v){let{handle:J,outputPreferredLocations:$e,outputPreferredLocationsEncoded:Z}=v;if(p.length!==g)throw new Error(`input count from feeds (${g}) is expected to be always equal to model\'s input count (${p.length}).`);for(let Se=0;Se<g;Se++){let Ie=t[Se];await u._OrtBindInput(J,p[Ie],I[Se])!==0&&Oe(`Can\'t bind input[${Se}] for session=${e}.`)}for(let Se=0;Se<w;Se++){let Ie=o[Se];n[Se]?.[3]?u._OrtBindOutput(J,h[Ie],x[Se],0)!==0&&Oe(`Can\'t bind pre-allocated output[${Se}] for session=${e}.`):u._OrtBindOutput(J,h[Ie],0,Z[Ie])!==0&&Oe(`Can\'t bind output[${Se}] to ${$e[Se]} for session=${e}.`)}}let q;v?q=await u._OrtRunWithBinding(a,v.handle,w,T,y):q=await u._OrtRun(a,z,E,g,H,w,T,y),q!==0&&Oe("failed to call OrtRun().");let pe=[];for(let J=0;J<w;J++){let $e=u.HEAPU32[T/4+J];if($e===x[J]){pe.push(n[J]);continue}let Z=u.stackSave(),Se=u.stackAlloc(4*4),Ie=!1,Ae,he=0;try{u._OrtGetTensorData($e,Se,Se+4,Se+8,Se+12)!==0&&Oe(`Can\'t access output tensor data on index ${J}.`);let Ge=Se/4,Fe=u.HEAPU32[Ge++];he=u.HEAPU32[Ge++];let F=u.HEAPU32[Ge++],de=u.HEAPU32[Ge++],fe=[];for(let Be=0;Be<de;Be++)fe.push(u.HEAPU32[F/4+Be]);u._OrtFree(F);let Ne=fe.reduce((Be,We)=>Be*We,1);Ae=Tt(Fe);let Ke=v?.outputPreferredLocations[o[J]];if(Ae==="string"){if(Ke==="gpu-buffer")throw new Error("String tensor is not supported on GPU.");let Be=[],We=he/4;for(let qe=0;qe<Ne;qe++){let nt=u.HEAPU32[We++],Ze=qe===Ne-1?void 0:u.HEAPU32[We]-nt;Be.push(u.UTF8ToString(nt,Ze))}pe.push([Ae,fe,Be,"cpu"])}else if(Ke==="gpu-buffer"&&Ne>0){let Be=u.jsepGetBuffer(he),We=ir(Fe);if(We===void 0||!Eo(Ae))throw new Error(`Unsupported data type: ${Ae}`);Ie=!0,pe.push([Ae,fe,{gpuBuffer:Be,download:u.jsepCreateDownloader(Be,Ne*We,Ae),dispose:()=>{u._OrtReleaseTensor($e)}},"gpu-buffer"])}else{let Be=Pr(Ae),We=new Be(Ne);new Uint8Array(We.buffer,We.byteOffset,We.byteLength).set(u.HEAPU8.subarray(he,he+We.byteLength)),pe.push([Ae,fe,We,"cpu"])}}finally{u.stackRestore(Z),Ae==="string"&&he&&u._free(he),Ie||u._OrtReleaseTensor($e)}}return v&&u._OrtClearBoundOutputs(v.handle),pe}finally{u.stackRestore(B),I.forEach(U=>u._OrtReleaseTensor(U)),x.forEach(U=>u._OrtReleaseTensor(U)),_.forEach(U=>u._free(U)),y!==0&&u._OrtReleaseRunOptions(y),S.forEach(U=>u._free(U))}},xu=e=>{let t=Me(),r=pr.get(e);if(!r)throw new Error("invalid session id");let o=r[0],n=t._OrtEndProfiling(o);n===0&&Oe("Can\'t get an profile file name."),t._OrtFree(n)},Cu=e=>{let t=[];for(let r of e){let o=r[2];!Array.isArray(o)&&"buffer"in o&&t.push(o.buffer)}return t};self.onmessage=e=>{switch(e.data.type){case"init-wasm":try{Io(e.data.in).then(()=>postMessage({type:"init-wasm"}),t=>postMessage({type:"init-wasm",err:t}))}catch(t){postMessage({type:"init-wasm",err:t})}break;case"init-ort":try{bu(e.data.in).then(()=>postMessage({type:"init-ort"}),t=>postMessage({type:"init-ort",err:t}))}catch(t){postMessage({type:"init-ort",err:t})}break;case"create_allocate":try{let{model:t}=e.data.in,r=Fn(t);postMessage({type:"create_allocate",out:r})}catch(t){postMessage({type:"create_allocate",err:t})}break;case"create_finalize":try{let{modeldata:t,options:r}=e.data.in,o=qn(t,r);postMessage({type:"create_finalize",out:o})}catch(t){postMessage({type:"create_finalize",err:t})}break;case"create":try{let{model:t,options:r}=e.data.in,o=vu(t,r);postMessage({type:"create",out:o})}catch(t){postMessage({type:"create",err:t})}break;case"release":try{$u(e.data.in),postMessage({type:"release"})}catch(t){postMessage({type:"release",err:t})}break;case"run":try{let{sessionId:t,inputIndices:r,inputs:o,outputIndices:n,options:s}=e.data.in;Su(t,r,o,n,new Array(n.length).fill(null),s).then(u=>{u.some(d=>d[3]!=="cpu")?postMessage({type:"run",err:"Proxy does not support non-cpu tensor location."}):postMessage({type:"run",out:u},Cu(u))},u=>{postMessage({type:"run",err:u})})}catch(t){postMessage({type:"run",err:t})}break;case"end-profiling":try{let t=e.data.in;xu(t),postMessage({type:"end-profiling"})}catch(t){postMessage({type:"end-profiling",err:t})}break;case"is-ort-env-initialized":try{let t=wu();postMessage({type:"is-ort-env-initialized",out:t})}catch(t){postMessage({type:"is-ort-env-initialized",err:t})}break;default:}};})();\n/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n'});var $t,Qe,$n,Ca,Ia,ga,ya,ba,wa,va,$a,Sa,xa,_a,At,qp,vn,vl,$l,Sl,xl,Ea,_l,Cl,Il,El,Aa=q(()=>{"use strict";dt();bl();Zt();$t=()=>!!Oe.wasm.proxy&&typeof document<"u",$n=!1,Ca=!1,Ia=!1,ba=[],wa=[],va=[],$a=[],Sa=[],xa=[],_a=[],At=()=>{if($n||!Ca||Ia||!Qe)throw new Error("worker not ready")},qp=e=>{switch(e.data.type){case"init-wasm":$n=!1,e.data.err?(Ia=!0,ga[1](e.data.err)):(Ca=!0,ga[0]());break;case"init-ort":e.data.err?ya[1](e.data.err):ya[0]();break;case"create_allocate":e.data.err?ba.shift()[1](e.data.err):ba.shift()[0](e.data.out);break;case"create_finalize":e.data.err?wa.shift()[1](e.data.err):wa.shift()[0](e.data.out);break;case"create":e.data.err?va.shift()[1](e.data.err):va.shift()[0](e.data.out);break;case"release":e.data.err?$a.shift()[1](e.data.err):$a.shift()[0]();break;case"run":e.data.err?Sa.shift()[1](e.data.err):Sa.shift()[0](e.data.out);break;case"end-profiling":e.data.err?xa.shift()[1](e.data.err):xa.shift()[0]();break;case"is-ort-env-initialized":e.data.err?_a.shift()[1](e.data.err):_a.shift()[0](e.data.out);break;default:}},vn=typeof document<"u"?document?.currentScript?.src:void 0,vl=async()=>{if($t()){if(Ca)return;if($n)throw new Error("multiple calls to 'initWasm()' detected.");if(Ia)throw new Error("previous call to 'initWasm()' failed.");return $n=!0,Oe.wasm.wasmPaths===void 0&&vn&&vn.indexOf("blob:")!==0&&(Oe.wasm.wasmPaths=vn.substr(0,+vn.lastIndexOf("/")+1)),new Promise((e,t)=>{Qe?.terminate();let r=URL.createObjectURL(new Blob([wl()],{type:"text/javascript"}));Qe=new Worker(r,{name:"ort-wasm-proxy-worker"}),Qe.onerror=n=>t(n),Qe.onmessage=qp,URL.revokeObjectURL(r),ga=[e,t];let a={type:"init-wasm",in:Oe.wasm};Qe.postMessage(a)})}else return Pi(Oe.wasm)},$l=async e=>{if($t())return At(),new Promise((t,r)=>{ya=[t,r];let a={type:"init-ort",in:e};Qe.postMessage(a)});await cl(e)},Sl=async e=>$t()?(At(),new Promise((t,r)=>{ba.push([t,r]);let a={type:"create_allocate",in:{model:e}};Qe.postMessage(a,[e.buffer])})):ma(e),xl=async(e,t)=>$t()?(At(),new Promise((r,a)=>{wa.push([r,a]);let n={type:"create_finalize",in:{modeldata:e,options:t}};Qe.postMessage(n)})):ha(e,t),Ea=async(e,t)=>{if($t()){if(t?.preferredOutputLocation)throw new Error('session option "preferredOutputLocation" is not supported for proxy.');return At(),new Promise((r,a)=>{va.push([r,a]);let n={type:"create",in:{model:e,options:t}};Qe.postMessage(n,[e.buffer])})}else return fl(e,t)},_l=async e=>{if($t())return At(),new Promise((t,r)=>{$a.push([t,r]);let a={type:"release",in:e};Qe.postMessage(a)});ml(e)},Cl=async(e,t,r,a,n,o)=>{if($t()){if(r.some(u=>u[3]!=="cpu"))throw new Error("input tensor on GPU is not supported for proxy.");if(n.some(u=>u))throw new Error("pre-allocated output tensor is not supported for proxy.");return At(),new Promise((u,l)=>{Sa.push([u,l]);let i=r,c={type:"run",in:{sessionId:e,inputIndices:t,inputs:i,outputIndices:a,options:o}};Qe.postMessage(c,yl(i))})}else return hl(e,t,r,a,n,o)},Il=async e=>{if($t())return At(),new Promise((t,r)=>{xa.push([t,r]);let a={type:"end-profiling",in:e};Qe.postMessage(a)});gl(e)},El=async()=>$t()?(At(),new Promise((e,t)=>{_a.push([e,t]);let r={type:"is-ort-env-initialized"};Qe.postMessage(r)})):pl()});var Sn,Al,jp,xn,Tl=q(()=>{"use strict";dt();Aa();De();Al=(e,t)=>{switch(e.location){case"cpu":return[e.type,e.dims,e.data,"cpu"];case"gpu-buffer":return[e.type,e.dims,{gpuBuffer:e.gpuBuffer},"gpu-buffer"];default:throw new Error(`invalid data location: ${e.location} for ${t()}`)}},jp=e=>{switch(e[3]){case"cpu":return new Fe(e[0],e[2],e[1]);case"gpu-buffer":{let t=e[0];if(!Jr(t))throw new Error(`not supported data type: ${t} for deserializing GPU tensor`);let{gpuBuffer:r,download:a,dispose:n}=e[2];return Fe.fromGpuBuffer(r,{dataType:t,dims:e[1],download:a,dispose:n})}default:throw new Error(`invalid data location: ${e[3]}`)}},xn=class{async createSessionAllocate(t){let r=await fetch(t);if(r.status!==200)throw new Error(`failed to load model: ${t}`);let a=await r.arrayBuffer();return Sl(new Uint8Array(a))}async loadModel(t,r){if(await El()||(Sn||(Sn=$l(Oe)),await Sn,Sn=void 0),typeof t=="string")if(typeof process<"u"&&process.versions&&process.versions.node){let a=await(void 0)(t);[this.sessionId,this.inputNames,this.outputNames]=await Ea(a,r)}else{let a=await this.createSessionAllocate(t);[this.sessionId,this.inputNames,this.outputNames]=await xl(a,r)}else[this.sessionId,this.inputNames,this.outputNames]=await Ea(t,r)}async dispose(){return _l(this.sessionId)}async run(t,r,a){let n=[],o=[];Object.entries(t).forEach(m=>{let b=m[0],w=m[1],$=this.inputNames.indexOf(b);if($===-1)throw new Error(`invalid input '${b}'`);n.push(w),o.push($)});let u=[],l=[];Object.entries(r).forEach(m=>{let b=m[0],w=m[1],$=this.outputNames.indexOf(b);if($===-1)throw new Error(`invalid output '${b}'`);u.push(w),l.push($)});let i=n.map((m,b)=>Al(m,()=>`input "${this.inputNames[o[b]]}"`)),c=u.map((m,b)=>m?Al(m,()=>`output "${this.outputNames[l[b]]}"`):null),f=await Cl(this.sessionId,o,i,l,c,a),y={};for(let m=0;m<f.length;m++)y[this.outputNames[l[m]]]=u[m]??jp(f[m]);return y}startProfiling(){}endProfiling(){Il(this.sessionId)}}});var Kp,_n,Ol=q(()=>{"use strict";dt();Aa();Tl();Kp=()=>{if((typeof Oe.wasm.initTimeout!="number"||Oe.wasm.initTimeout<0)&&(Oe.wasm.initTimeout=0),typeof Oe.wasm.simd!="boolean"&&(Oe.wasm.simd=!0),typeof Oe.wasm.proxy!="boolean"&&(Oe.wasm.proxy=!1),typeof Oe.wasm.numThreads!="number"||!Number.isInteger(Oe.wasm.numThreads)||Oe.wasm.numThreads<=0){let e=typeof navigator>"u"?(void 0)().length:navigator.hardwareConcurrency;Oe.wasm.numThreads=Math.min(4,Math.ceil((e||1)/2))}},_n=class{async init(){Kp(),await vl()}async createInferenceSessionHandler(t,r){let a=new xn;return await a.loadModel(t,r),Promise.resolve(a)}}});var kl={};Yt(kl,{wasmBackend:()=>Yp});var Yp,Rl=q(()=>{"use strict";Ol();Yp=new _n});dt();dt();dt();var wi="1.17.0";var Sw=Bn;{let e=(Rl(),zt(kl)).wasmBackend;typeof navigator<"u"&&navigator.gpu&&Ct("webgpu",e,5),Ct("cpu",e,10),Ct("wasm",e,10),Ct("xnnpack",e,9),Ct("webnn",e,9)}Object.defineProperty(Oe.versions,"web",{value:wi,enumerable:!0});export{Zl as InferenceSession,Fe as Tensor,Jl as TrainingSession,Sw as default,Oe as env,Ct as registerBackend};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
//# sourceMappingURL=ort.webgpu.min.js.map
